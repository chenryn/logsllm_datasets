## PostgreSQL 使用 pgbench 测试 sysbench 相关case - pg_oltp_bench
### 作者           
digoal            
### 日期          
2016-10-31             
### 标签          
PostgreSQL , sysbench , pgbench                           
----          
## 背景 
pgbench是PostgreSQL的性能测试工具，C写的，调用LIBPQ，效率非常高。pgbench也支持自定义测试脚本，支持自定义随机算法，支持自定义脚本的weight设置等等，用途非常广泛。    
sysbench是一个比较流行的测试软件框架，可测试内存，CPU，数据库，存储等。测试时调LUA的脚本进行测试，支持多线程，并发测试。  
相比pgbench, sysbench的效率略低，另外pgbench的功能也非常强大，所以如果能把sysbench test case迁移到pgbench，对PG的用户来说不失为一桩美事。  
题外话，pg还支持ecpg，嵌入式的开发，所以如果要测试更加复杂的场景，并且又要高效的话，可以尝试使用ecpg。  
## sysbench test case
sysbench自带了一些lua脚本，用于测试数据库。  
https://github.com/akopytov/sysbench/tree/1.0/sysbench/tests/db  
```
Makefile.am	  {common,bulkinsert}.lua missing from Makefile	a month ago
bulk_insert.lua	  Minor cleanups in bulk_insert.lua.	a year ago
common.lua	  Use DROP TABLE IF EXISTS on cleanup.	8 days ago
delete.lua	  Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
insert.lua	  Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
oltp.lua	  Merge branch '0.5' into 1.0	a month ago
oltp_simple.lua	  Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
parallel_prepare.lua	        Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
select.lua	                Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
select_random_points.lua	Add libAttachSQL driver to Sysbench	2 years ago
select_random_ranges.lua	Add libAttachSQL driver to Sysbench	2 years ago
update_index.lua	        Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
update_non_index.lua	        Change lua scripts to 'require common' if a testdir wasn't passed	a month ago
```
以oltp.lua为例，涉及的SQL如下    
```
function get_range_str()
   local start = sb_rand(1, oltp_table_size)
   return string.format(" WHERE id BETWEEN %u AND %u",
                        start, start + oltp_range_size - 1)
end
function event(thread_id)
   local rs
   local i
   local table_name
   local c_val
   local pad_val
   local query
   table_name = "sbtest".. sb_rand_uniform(1, oltp_tables_count)
   if not oltp_skip_trx then
      db_query(begin_query)
   end
   if not oltp_write_only then
   for i=1, oltp_point_selects do
      rs = db_query("SELECT c FROM ".. table_name .." WHERE id=" ..
                       sb_rand(1, oltp_table_size))
   end
   if oltp_range_selects then
   for i=1, oltp_simple_ranges do
      rs = db_query("SELECT c FROM ".. table_name .. get_range_str())
   end
   for i=1, oltp_sum_ranges do
      rs = db_query("SELECT SUM(K) FROM ".. table_name .. get_range_str())
   end
   for i=1, oltp_order_ranges do
      rs = db_query("SELECT c FROM ".. table_name .. get_range_str() ..
                    " ORDER BY c")
   end
   for i=1, oltp_distinct_ranges do
      rs = db_query("SELECT DISTINCT c FROM ".. table_name .. get_range_str() ..
                    " ORDER BY c")
   end
   end
   end
   if not oltp_read_only then
   for i=1, oltp_index_updates do
      rs = db_query("UPDATE " .. table_name .. " SET k=k+1 WHERE id=" .. sb_rand(1, oltp_table_size))
   end
   for i=1, oltp_non_index_updates do
      c_val = sb_rand_str("###########-###########-###########-###########-###########-###########-###########-###########-###########-###########")
      query = "UPDATE " .. table_name .. " SET c='" .. c_val .. "' WHERE id=" .. sb_rand(1, oltp_table_size)
      rs = db_query(query)
      if rs then
        print(query)
      end
   end
   for i=1, oltp_delete_inserts do
   i = sb_rand(1, oltp_table_size)
   rs = db_query("DELETE FROM " .. table_name .. " WHERE id=" .. i)
   c_val = sb_rand_str([[
###########-###########-###########-###########-###########-###########-###########-###########-###########-###########]])
   pad_val = sb_rand_str([[
###########-###########-###########-###########-###########]])
   rs = db_query("INSERT INTO " .. table_name ..  " (id, k, c, pad) VALUES " .. string.format("(%d, %d, '%s', '%s')",i, sb_rand(1, oltp_table_size) , c_val, pad_val))
   end
   end -- oltp_read_only
   if not oltp_skip_trx then
      db_query(commit_query)
   end
end
```
都是很常见的语句，只不过多了一个sb_rand_str函数，用于生成随机的字符。  
## pg生成随机字符
可以使用如下C函数生成类似的随机字符。  
```
$ git clone https://github.com/postgrespro/pg_oltp_bench
  or
$ git clone https://github.com/digoal/pg_oltp_bench
```
创建了一个函数，用于生成随机数值，这个是sysbench中使用的。    
```
pg_oltp_bench.c
#include "postgres.h"
#include "fmgr.h"
#include "mb/pg_wchar.h"
#include "utils/datum.h"
PG_MODULE_MAGIC;
PG_FUNCTION_INFO_V1(sb_rand_str);
Datum
sb_rand_str(PG_FUNCTION_ARGS)
{
        text       *result;
        char       *p,
                           *end;
        result = (text *) DatumGetPointer(datumCopy(PG_GETARG_DATUM(0), false, -1));
        p = VARDATA_ANY(result);
        end = p + VARSIZE_ANY_EXHDR(result);
        while (p < end)
        {
                int len = pg_mblen(p);
                if (len == 1)
                {
                        if (*p == '#')
                                *p = (random() % ('9' - '0' + 1)) + '0';
                        else if (*p == '@')
                                *p = (random() % ('z' - 'a' + 1)) + 'a';
                }
                p += len;
        }
        PG_RETURN_POINTER(result);
}
```
安装和测试  
```
$ cd pg_oltp_bench
$ make USE_PGXS=1
$ make USE_PGXS=1 install
$ psql
postgres=# create extension pg_oltp_bench ;
postgres=# select sb_rand_str('###########-###########-###########-###########-###########-###########-###########-###########-###########-###########');
                                                       sb_rand_str                                                       
-------------------------------------------------------------------------------------------------------------------------
 20038540132-50323775630-82458365307-53537542912-24813396489-03961491366-81366879005-03843501626-78919266849-32710742245
(1 row)
postgres=# select sb_rand_str('###########-###########-###########-###########-########');
                       sb_rand_str                        
----------------------------------------------------------
 38000383151-08324920063-89353598228-34982407725-07119227
(1 row)
postgres=# select sb_rand_str('###########-###########-###########-###########-########');
                       sb_rand_str                        
----------------------------------------------------------
 50905276291-14523885757-56469681351-25872594628-34314810
(1 row)
```
符合测试要求。  
## 对比pgbench与sysbench性能
接下来使用select.lua作为测试对比的CASE  
初始化  
```
DROP TABLE IF EXISTS sbtest;
CREATE TABLE sbtest(
	id SERIAL PRIMARY KEY,
	k INTEGER DEFAULT '0' NOT NULL,
	c CHAR(120) DEFAULT '' NOT NULL,
	pad CHAR(60) DEFAULT '' NOT NULL);
INSERT INTO sbtest (k, c, pad)
SELECT
	(random() * 10000000)::int + 1 AS k,
	sb_rand_str('###########-###########-###########-###########-###########-###########-###########-###########-###########-###########') AS c,
	sb_rand_str('###########-###########-###########-###########-###########') AS pad
FROM
	generate_series(1, 10000000) j;
CREATE INDEX sbtest_k_idx ON sbtest(k);
```
1\. pgbench  
```
$ vi test.sql
\set id1 random(1, 10000000)
SELECT pad FROM sbtest WHERE id = :id1;
```
测试  
```
$ pgbench -M prepared -n -r -P 1 -f ./test.sql -h xxx.xxx.xxx.xxx -p 1924 -U postgres postgres -c 400 -j 400 -T 100
transaction type: ./test.sql
scaling factor: 1
query mode: prepared
number of clients: 400
number of threads: 400
duration: 100 s
number of transactions actually processed: 112965285
latency average = 0.349 ms
latency stddev = 0.186 ms
tps = 1128708.538575 (including connections establishing)
tps = 1140986.576274 (excluding connections establishing)
script statistics:
 - statement latencies in milliseconds:
         0.001  \set id1 random(1, 10000000)
         0.348  SELECT pad FROM sbtest WHERE id = :id1;
```
pgbench本身的CPU开销  
```
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                                                         
47899 digoal  20   0 28.8g  17m  980 S 1549.0  0.0  10:10.19 pgbench -M prepared -n -r -P 1 -f ./test.sql -h xxx.xxx.xxx.xxx -p 1924 -U postgres postgres -c 400 -j 400 -T 100
```
数据库的开销    
```
top - 22:55:41 up 35 days,  4:24,  1 user,  load average: 157.34, 44.42, 15.25
Tasks: 1747 total, 288 running, 1459 sleeping,   0 stopped,   0 zombie
Cpu(s): 73.0%us, 16.1%sy,  0.0%ni,  0.3%id,  0.0%wa,  0.0%hi, 10.6%si,  0.0%st
Mem:  529321832k total, 192584004k used, 336737828k free,   834960k buffers
Swap:        0k total,        0k used,        0k free, 21107224k cached
```
2\. sysbench  
安装软件  
```
$ git clone https://github.com/digoal/sysbench
```
https://github.com/akopytov/sysbench/blob/1.0/sysbench/tests/db/select.lua  
编辑select.lua，使用服务端绑定变量  
```
$ vi select.lua
pathtest = string.match(test, "(.*/)") or ""
dofile(pathtest .. "common.lua")
function thread_init(thread_id)
   set_vars()
   local table_name
   table_name = "sbtest"
   db_query("prepare p1(int) as select pad from " .. table_name .. " WHERE id=$1")
end
function event(thread_id)
   db_query("execute p1(" .. sb_rand(1, oltp_table_size) .. ")")
end
```
测试  
```
./sysbench_pg   \
--test=lua/select.lua   \
--db-driver=pgsql   \
--pgsql-host=xxx.xxx.xxx.xxx   \
--pgsql-port=1924   \
--pgsql-user=postgres   \
--pgsql-password=postgres   \
--pgsql-db=postgres   \
--oltp-tables-count=64   \
--oltp-table-size=10000000   \
--num-threads=400  \
--max-time=120  \
--max-requests=0 \
--report-interval=5 \
run
OLTP test statistics:
    queries performed:
        read:                            0
        write:                           0
        other:                           69504575
        total:                           69504575
    transactions:                        0      (0.00 per sec.)
    deadlocks:                           0      (0.00 per sec.)
    read/write requests:                 0      (0.00 per sec.)
    other operations:                    69504575 (579193.85 per sec.)
General statistics:
    total time:                          120.0023s
    total number of events:              69504175
    total time taken by event execution: 43394.3854s
    response time:
         min:                                  0.07ms
         avg:                                  0.62ms