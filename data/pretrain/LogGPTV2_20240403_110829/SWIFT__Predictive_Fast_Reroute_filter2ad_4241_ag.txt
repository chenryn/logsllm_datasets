link decreases the FS score, the algorithm breaks (line 32) the loop
and updates the set of links having the best FS score among all the
visited nodes. With this break, the algorithm does not need to com-
pute the FS score for all the possible combinations of links. Instead,
few iterations are generally enough before processing another node
in the graph. While this makes the algorithm fast, it also makes it
non optimal. However, in the worse case scenario, it still returns
the AS link with the highest individual FS score. For simplicity,
we only show the merging of the outgoing links of each node. In
our implementation, the algorithm also merges the FS score of the
incoming links of each node.
B GUARANTEES OF SWIFT
SWIFT is beneficial and safe. Despite not notifying path changes
in the control-plane, we now show that the predictive rerouting
strategy implemented by SWIFT is safe as long as inferences do
not miss the disrupted resources and BGP paths do not arbitrarily
change during rerouting.
Given an inter-domain outage O triggering SWIFT, safety condi-
tions for predictive fast rerouting are formalized by the following
assumptions.
• Stability assumption: During the period in which SWIFT fast
reroutes traffic (i.e., before the end of BGP convergence),
ASes change their inter-domain forwarding paths only to
avoid O.
• Reasonable inference assumption: SWIFT inferences enable
the SWIFTED routers to avoid a super-set of the links dis-
rupted by O.
Under the reasonable inference assumption, the following lemma
holds.
Lemma B.1. When any SWIFTED router fast reroutes, it sends
packets over paths with no blackhole and loops.
Proof. Consider any SWIFTED router s that fast reroutes at a
given time t, to avoid an inferred outage. Let n be the router to
which s fast reroutes. By definition of SWIFT (and any existing fast
rerouting technique that s can apply if next to a disrupted link), the
following properties hold at t:
• n must offer a BGP path Pn to s, otherwise s would have not
fast rerouted to n. By definition of BGP, Pn does not contain
loops.
Technical Report, 2017,
Algorithm 1 SWIFT link inference algorithm
1: G : the AS links topology
2: GW : the graph of withdrawn AS paths
3: X.nb_prefixes(x, y) : returns the number of prefixes traversing
4: FS : computes the FS score for the given W , P and Wtotal
5: sort_based_on_FS : sorts a dictionary based on the FS score of
the link (x, y) in the graph X
each element for the given current size of the burst
L = dic()
for y in GW .succ(x) do
best_FS = 0
f ailed_links = ∅
for x in GW .nodes() do
W ← GW .nb_prefixes(x, y)
P ← G.nb_prefixes(x, y)
L[y] ← (W , P)
L.sort_based_on_FS(Wtotal)
cur_set ← ∅
cur_FS ← 0
merдed_W , merдed_P ← 0
while L.length() > 0 do
tmp_W , tmp_P = L.pop()
new_W ← merдed_W + tmp_W
new_P ← merдed_P + tmp_P
new_FS = FS(new_W , new_P,Wtotal)
if new_FS > cur_FS then
6:
7: function Link Inference(G, GW , Wtotal )
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
cur_FS = new_FS
cur_set .add((x, tmp_nдh))
merдed_W ← new_W
merдed_P ← new_P
if best_FS < cur_FS then
best_FS ← cur_FS
f ailed_links = cur_set
else
break
return f ailed_links
• Pn must not include any of the links affected by the outage,
i.e., it does not include blackholes. This is a direct conse-
quence of the reasonable inference assumption.
• n and all routers in Pn keep forwarding packets over Pn.
This is always true for routers that do not fast reroute (using
SWIFT or any other fast rerouting technique), by definition
of BGP. Also, since Pn does not include any link affected by
the outage (see previous property), routers in Pn that can fast
reroute do not receive any withdrawal for path Pn (nor any
path update, since SWIFT and other fast rerouting techniques
do not generate BGP messages). As a consequence, they all
also maintain Pn as forwarding path.
Technical Report, 2017,
Combining these properties together, the packets fast rerouted
by s at time t are forwarded over the path (s n) ∪ Pn, which does
not contain loops nor blackholes – which proves the statement. □
This lemma leads to the following theorems.
Theorem 3.1. Under the stability and reasonable inference assump-
tions, the number of disrupted paths is decreased by every SWIFTED
router which is on a path impacted by an outage.
Proof. The statement follows by observing that every SWIFTED
router on a disrupted path (i) will fast reroute, if the reasonable
inference assumption holds, and (ii) will redirect traffic over a non-
disrupted path by Lemma B.1.
□
Theorem 3.2. Under the stability and reasonable inference assump-
tions, no SWIFT rerouting causes any forwarding loop, irrespectively
of the set of SWIFTED routers.
Proof. Assume by contradiction that upon an outage (affecting
one or more inter-domain links) a forwarding path for a certain
prefix contains a loop L at a given time during the BGP convergence.
Since BGP is guaranteed to compute non-loopy paths, at least one
router s in L must fast reroute. However, s cannot fast reroute
to a path including a loop, by Lemma B.1. This contradicts the
hypothesis, and yields the statement.
□
SWIFT inference is sound. We now prove Theorem 4.1. For the
sake of simplicity, we implicitly assume that the inference input is
produced by a single neighbor of the SWIFTED router. However,
the proof is easy to extend since inference algorithm performs all
its operations (including metric computation) on a per-neighbor
basis.
Theorem 4.1. If all ASes inject at least one prefix on every adjacent
link, SWIFT inference returns a set of links including the failed link if
run on the corresponding stream of BGP messages.
Proof. Assume that a single link f fails and that the inference
algorithm makes a prediction at time t when fed with all and only
the BGP messages generated by f .
We now show that the inference algorithm assigns the highest
possible values of both WS and PS to f .
Indeed, all the paths traversing f before the burst are either
explicitly withdrawn or updated (to avoid f ): This implies that the
number P(f , t) of paths traversing f at t is 0. Moreover, since only
BGP messages generated by f ’s failure are in the inference input by
hypothesis, all the received withdrawals must have crossed f , that
is, W (f , t) = W (t). As a consequence, PS(f , t) = W (l, t)/(W (l, t) +
0) and W S(f , t) = W (l, t)/W (l, t) are equal to their maximum value
1.
This implies that the fit score of f is the highest possible one,
hence the SWIFT inference algorithm will return it in the set of
failed links.
□
T. Holterbach et al.
(a) Ratio of links inferred.
(b) Difference of distance from the
SWIFTED router.
Figure 10: The inference of failed links improves when it is
executed later or when the weight on the WS is higher.
C INFERENCE ALGORITHM CALIBRATION
Two parameters helps adapting the behavior of SWIFT inference
algorithm so that it is more robust against real world factors: (i)
the start threshold, that is, the number of withdrawals after which
SWIFT inference is triggered; and (ii) the difference between wW S
and wPS (see §4.1). We now discuss how we calibrated these pa-
rameters, by studying how they affect the performance of the link
failure localization.
To ensure that our results are not dataset-driven, we rely a differ-
ent dataset than the one we use in the evaluation (§6). Specifically,
we rely on 375 bursts greater than 20k withdrawals collected on 10
RouteViews collectors during the last two weeks of July 2016. As
we do not have ground truth, we compare results obtained when we
run the algorithm with different values of the start threshold with
respect to the values obtained at the end of each burst (i.e., with com-
plete information). We focus first on calibrating the start treshold
before calibrating the weights.
A start treshold of only 2.5k withdrawals is enough to guar-
antee good inference performance. Figure 10(a) shows the (me-
dian) ratio of links inferred at a given start threshold with respect
to the ones inferred at the end of the burst and this, for different
weight values. Intuitively, we can see that results converge towards
1 as the start threshold increases.
We can see that with weights wW S ≥ 3, the inference score
is between 0.3 and 0.4 after 2.5k withdrawals, and between 0.7
and 0.8 after 15k withdrawals. These results reveal that after 2.5k
withdrawals, SWIFT already localizes (sometimes partially) many
outages.
As a result, we configure SWIFT to run the inference algorithm
after only 2.5k withdrawals. At the same time, we configure SWIFT
to wait for more information if the number of prefixes that would
end up being rerouted is unlikely (based on a historical model, as
explained in §4.2). Specifically, we reject an inference that would
reroute more than 10k, 20k, 50k and 100k prefixes, if respectively
inferred after 2.5k, 5k, 7.5k and 10k withdrawals.
Increasing wW S leads to better performance. Figure 10(a) shows
that increasing the weight of WS (while keeping the weight of PS
equal to 1) can improve the inference. Figure 10(b) helps under-
standing this behavior by showing the difference, in the distance
from the SWIFTED router, between the links inferred before and
at the end of each burst. With equal weights for WS and PS, the
2.557.51012.515Start threshold (k)0.00.20.40.60.81.0Link inference score (50th PCTL)     wWS=1wWS=1.1wWS=1.25wWS=1.5wWS=2wWS=3wWS=5wWS=102.557.51012.515Start threshold (k)0.00.20.40.60.8Average distance differencewWS=1wWS=1.1wWS=1.25wWS=1.5wWS=2wWS=3wWS=5wWS=10SWIFT: Predictive Fast Reroute
Technical Report, 2017,
(a) Precision.
(b) Recall.
Figure 11: Sensitivity analysis of prefix prediction.
algorithm tends to infer links further than the one inferred at the
end of the burst. This is likely because at the beginning of the burst,
the PS of the failed link is lower than 1 (as explained in §4.2), and
thus further links may have a higher PS, since less prefixes are
using them. To bring the distance difference closer to 0 (ideal case,
if we assume that the inference at the end of the burst is the correct
one), we can increase the weight of WS. Figure 10(b) shows that
when choosing 3, 5 or 10 for the WS weight, the average distance
difference is very close to 0, and can even be negative for 5 and 10.
As a result, we set the ratio between the weights of WS and PS to 3.
The accuracy of the link inference drives the performance
of the withdrawals prediction. When tuning the start threshold
and the wW S to improve the link inference, this in turn also im-
proves the withdrawals prediction. We evaluate the accuracy of
the withdrawals prediction (in terms of precision and recall) against
the actual withdrawals received at the end of the burst (these with-
drawals act as ground truth in our dataset). For each burst in our
dataset, we run the inference algorithm after a given number of
withdrawals (start threshold) and with different wW S , and we com-
pare the future withdrawals predicted by the algorithm with the
remaining ones in the burst. Figure 11 shows that the value of the
recall can greatly improves (Fig. 11(b)) when increasing the weight
of WS. On the other hand, increasing the weight of WS negatively
impacts precision (11(a)), but with a much lower magnitude than the
positive effect seen on recall. In contrast, a naive solution consisting
in rerouting all the prefixes of the BGP session would have a recall
equal to one but a very low precision.
2.557.51012.515Start threshold (K)0.00.20.40.60.81.0Precision (50th PCTL)wWS=1wWS=1.1wWS=1.25wWS=1.5wWS=2wWS=3wWS=5wWS=10naive2.557.51012.515Start threshold (K)0.00.20.40.60.81.0Recall (50th PCTL)wWS=1wWS=1.1wWS=1.25wWS=1.5wWS=2wWS=3wWS=5wWS=10naive