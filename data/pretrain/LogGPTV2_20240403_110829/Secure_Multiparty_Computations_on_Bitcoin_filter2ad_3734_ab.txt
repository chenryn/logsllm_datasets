statements to take into account also the non-zero fees. For the
sake of simplicity we also assume that the bets in the lotteries
are equal to 1 B. It should be straightforward to see how to
generalize our protocols to other values of the bets.
Our constructions are based on the coin-tossing protocol
of Blum [9]. We managed to adapt this protocol to our model,
without the need to modify the current Bitcoin system. We do
not use any generic methods like the MPC or zero-knowledge
compilers, and hence the protocols are very efﬁcient. The
only cryptographic primitives that we use are the commitment
schemes, implemented using the hash functions (which are
standard Bitcoin primitives). Our protocols rely strongly on the
advanced features of the Bitcoin (in particular: the so-called
“transaction scripts”, and “time-locks”). Because of the lack
of space we only sketch the formal security deﬁnitions. The
security proofs will appear in an extended version of this paper.
We executed our transactions on the real Bitcoin. We provide
a description of these transactions and a reference to them in
the Bitcoin chain.
B. Applications and future work
Although, as argued in Section I-C below, it may actually
make economic sense to use our protocols in practice, we view
gambling mostly as a motivating example for introducing a
concept that can be called “MPCs on Bitcoin”, and which
will hopefully have other applications. One (rather theoretical)
example of such application is the “millionaires problem”
where Alice and Bob want to establish who is richer.4 It is
easy to see that Alice and Bob can (inefﬁciently) determine
who has more coins by applying the generic MPC and zero-
knowledge techniques. This is possible since the only inputs
that are needed are (a) the contents of the Bitcoin ledger
(more precisely: its subset consisting of the non-redeemed
transactions), which is public, and (b) Alice’s and Bob’s private
keys used as their respective private inputs (see Section II for
the deﬁnitions of these terms). Obviously, using this protocol
makes sense only if, for some reason, each party is interested
in proving that she is the richer one. This is because every
participant can easily pretend to be poorer than she really is
and “hide” his money by transferring it to some other address
(that he also controls). Since we do not think that this protocol
is particularly relevant to practical applications, we do not
describe it in detail here. Let us only observe that, interestingly,
this protocol is in some sense dual to the coin-tossing protocol,
as it uses the Bitcoin system to verify the correctness of the
inputs, instead guaranteeing that the outcome is respected (as
it is the case with the coin-tossing)5.
puted this way (taking into account
We think that analyzing what functionalities can be com-
the problem of the
4The formal deﬁnition is as follows: let a, b ∈ N denote the amount of
coins that Alice and Bob respectively own. In this case the parties compute
the function fmill : N × N → {A, B} deﬁned as: fmill(a, b) = A if and
only if a ≥ b and fmill(a, b) = B otherwise.
5The reader may be tempted to think that a similar protocol could be used
with the eCash [17]. This is not the case, as in eCash there is no method of
proving in zero-knowledge that the money has not been spent (since the list
of transactions is not public).
445
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
participants “pretending to be poorer than they really are”)
may be an interesting research direction. Other possible future
research directions are: constructing protocols secure against
“malleability attacks” and “eavesdropping attacks” (see Sec. V
for more details) that do not require the deposits, providing a
more formal framework to analyze the deposit-based technique
(this can probably be done using the tools from the “rational
cryptography” literature [31], [1], [28]).
C. Economic analysis
Besides of being conceptually interesting, we think that our
protocols can have direct practical applications in the online
gambling, which is a signiﬁcant market: it is estimated that
there are currently 1,700 gambling sites worldwide handling
bets worth over $4 billion per year [25]. Some of these sites
are using Bitcoin. The largest of them, SatoshiDice, has been
recently sold for over $12 million [14]. All of the popular sites
charge a fee for their service, called the house edge (on top of
the Bitcoin transaction fees). Currently, the honesty of these
sites can be veriﬁed only ex post facto: they commit to their
randomness before the game starts and later prove to the public
that they did not cheat. Hence, nothing prevents them from
cheating and then disappearing from the market (using the
MPC terminology: such protocols provide security only against
the “covert adversaries” [40]). Of course, this means that the
users need to continually monitor the behavior of the gambling
sites in order to identify the honest ones. This system, called
the “mathematically provable fairness” is described in a recent
article [13], where it is advised to look on a particular page,
called Mem’s Bitcoin Gambling List, to check the gambling
sites’ reputation. This simple reputation system can of course
be attacked in various ways. Moreover, one can expect that
the sites with more established reputation will have a higher
house edge, and indeed the SatoshiDice site charges more than
the other, less well-known, sites. Currently SatoshiDice house
edge is around 2% [13].
Compared to the gambling sites, our protocols have the
following advantage. First of all, the security guarantee is
stronger, as it does not depend on the honesty of any trusted
party. Secondly, in our protocols there is obviously no “house
edge”. On a negative side, the Bitcoin transaction fees can be
slightly larger in our case than in the case of the gambling
sites (since we have more transactions, and some of them
are “strange”). At the moment of writing this paper, using
our solution is cheaper than using SatoshiDice for bets larger
than, say, $5, but of course whether our protocols become
really widely used in practice depends on several factors that
are hard to predict, like the value of the fees for the “strange
transactions”.
We also note that, although our initial motivation was the
peer-to-peer lottery, it can actually make a lot of sense for
the online gambling services to use our solutions, especially
the two-party protocol. Of course the business model of such
services makes sense only if there is non-zero house edge.
This is not a problem since our protocols can be easily used
in lotteries where the expected payoff is positive for one party
(in this case: the gambling service) and it is negative for the
other one (the client). Such “provably guaranteed fairness” can
be actually a good selling line for some of these services.
D. Previous, concurrent and subsequent work
Some of the related work has been already described in the
earlier sections. Previous papers on Bitcoin analyze the Bitcoin
transaction graph [38], or suggest improvements of the current
version of the system. This includes important work of Barber
et al. [5] who study various security aspects of Bitcoin and
Miers et al. [33] who propose a Bitcoin system with provable
anonymity. Our paper does not belong to this category, and in
particular our solutions are fully compatible with the current
version of Bitcoin (except of the ,,malleability” and ,,eaves-
dropping” problem concerning the last protocol, Section V).
Usage of Bitcoin to create a secure and fair two-player
lottery has been independently proposed by Adam Back and
Iddo Bentov in [4]. Similarly to our solution, their protocol
makes use of the time-locked transactions, but the purpose they
are used for is slightly different. Their protocol uses time-locks
to get the deposit back if the protocol is interrupted, while
this paper uses time-locks to make a ﬁnancial compensation
to an honest party, whenever the other party misbehaves. Ad-
ditionally, protocol from [4] is not resilient to the malleability
attacks, while our main schemes (Section III and IV) are.
Another work relevant to ours is Section 7.1 of [5] where
the authors construct a secure “mixer”, that allows two parties
to securely “mix” their coins in order to obtain unlinkability
of the transactions. They also construct commitment schemes
with time-locks, which are similar to these from [4]. Also,
the main motivation of this work is different: the goal of [5]
is to ﬁx an existing problem in Bitcoin (“linkability”), while
our goal is to use Bitcoin to perform tasks that are hard (or
impossible) to perform by other methods.
Commitments in the context of the Bitcoin were also con-
sidered in [19], however, the construction and its applications
are different — the main idea of [19] is to use the Bitcoin sys-
tem as a replacement of a trusted third party in time-stamping.
The notion of “deposits” has already been used in Bitcoin
(see en.bitcoin.it/wiki/Contracts, Section “Example 1”6), but
the application described there is different: the “deposit” is a
method for a party with no reputation to prove that she is not
a spambot by temporarily sacriﬁcing some of her money.
In the subsequent work [2], [3] we show how to extend
the ideas from this paper in order to construct a fair two-party
protocol for any functionality. Similar ideas were developed
independently by Iddo Bentov and Ranjit Kumaresan [8].
E. Acknowledgments
We would like to thank Iddo Bentov and Ranjit Kumaresan
for fruitful discussions and for pointing out an error in a
previous version of our lottery (see footnote 18 on page 11).
This work was supported by the WELCOME/2010-4/2
grant
the EU Innova-
tive Economy (National Cohesion Strategy) Operational Pro-
gramme.
founded within the framework of
II. A SHORT DESCRIPTION OF BITCOIN
Bitcoin works as a peer-to-peer network in which the
participants jointly emulate the central server that controls the
6Accessed on 13.11.2013.
446
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
correctness of transactions. In this sense it is similar to the
concept of the multiparty computation protocols. Recall that,
as described above, a fundamental problem with the traditional
MPCs is that
they cannot provide fairness if there is no
honest majority among the participants, which is particularly
difﬁcult to guarantee in the peer-to-peer networks where the
sybil attacks are possible. The Bitcoin system overcomes this
problem in the following way: the honest majority is deﬁned in
terms of the “majority of computing power”. In other words:
in order to break the system, the adversary needs to control
machines whose total computing power is comparable with
the combined computing power of all the other participants
of the protocol. Hence, e.g., the sybil attack does not work,
as creating a lot of fake identities in the network does not
help the adversary. In a moment we will explain how this is
implemented, but let us ﬁrst discuss the functionality of the
trusted party that is emulated by the users.
One of the main problems with the digital currency is the
potential double spending: if coins are just strings of bits then
the owner of a coin can spend it multiple times. Clearly this
risk could be avoided if the users had access to a trusted ledger
with the list of all the transactions. In this case a transaction
would be considered valid only if it is posted on the board.
For example suppose the transactions are of a form: “user X
transfers to user Y the money that he got in some previous
transaction Ty”, signed by the user X. In this case each user
can verify if money from transaction Ty has not been already
spent by X. The functionality of the trusted party emulated
by the Bitcoin network does precisely this: it maintains a full
list of transactions that happened in the system. The format
of the Bitcoin transactions is in fact more complex than in
the example above. Since it is of a special interest for us, we
describe it in more detail in Section II-A.
The Bitcoin ledger is implemented using the concept of the
Proofs of Work (PoWs) [24] in the following clever way. The
users maintain a chain of blocks. The ﬁrst block B0, called the
genesis block, was generated by the designers of the system
in January 2009. Each new block Bi contains a list Ti of
new transactions, the cryptographic hash of the previous block
H(Bi−1), and some random salt R. The key point is that not
every R works for given Ti and H(Bi−1). In fact, the system
is designed in such a way that it is moderately hard to ﬁnd
a valid R. Technically it is done be requiring that the binary
representation of the hash of (Ti||H(Bi−1)||R) starts with a
certain number m of zeros (the procedure of extending the
chain is called mining, and the machines performing it are
called miners). The hardness of ﬁnding the right R depends
of course on m, and this parameter is periodically adjusted
to the current computing power of the participants in such a
way that the extension happens an average each 10 minutes.
The system contains an incentive to work on ﬁnding the new
blocks. We will not go into the details of this, but let us only
say that one of the side-effects of this incentive system is the
creation of new coins7.
The idea of the block chain is that the longest chain C is
accepted as the proper one. If some transaction is contained
in a block Bi and there are several new blocks on top of it,
then it is infeasible for an adversary with less than a half of
7The number of coins that are created in the system is however limited,
and therefore Bitcoin is expected to have no inﬂation.
the total computating power of the Bitcoin network to revert
it — he would have to mine a new chain C(cid:3) bifurcating from
C at block Bi−1 (or earlier), and C(cid:3) would have to be longer
than C. The difﬁculty of that grows exponentially with number
of new blocks on top of Bi. In practice the transactions need
10 to 20 minutes (i.e. 1-2 new blocks) for reasonably strong
conﬁrmation and 60 minutes (6 blocks) for almost absolute
certainty that they are irreversible.
To sum up, when a user wants to pay somebody in bitcoins,
he creates a transaction and broadcasts it to other nodes in the
network. They validate this transaction, send it further and add
it to the block they are mining. When some node solves the
mining problem, it broadcasts its block to the network. Nodes
obtain a new block, validate transactions in it and its hash and
accept it by mining on top of it. Presence of the transaction in
the block is a conﬁrmation of this transaction, but some users
may choose to wait for several blocks on top of it to get more
assurance.
A. The Bitcoin transactions
The Bitcoin currency system consists of addresses and
transactions between them. An address is simply a public
key pk.8 Normally every such a key has a corresponding
private key sk known only to one user. The private key is
used for signing the transactions, and the public key is used
for verifying the signatures. Each user of the system needs
to know at least one private key of some address, but this
is simple to achieve, since the pairs (sk , pk ) can be easily
generated ofﬂine. We will frequently denote key pairs using
the capital letters (e.g. A), and refer to the private key and
the public key of A by: A.sk and A.pk, respectively (hence:
A = (A.sk , A.pk )). We will also use the following convention:
if A = (A.sk , A.pk ) then let sigA(m) denote a signature on
a message m computed with A.sk and let verA(m, σ) denote
the result (true or false) of the veriﬁcation of a signature σ
on message m with respect to the public key A.pk.
1) Simpliﬁed version: We ﬁrst describe a simpliﬁed version
of the system and then show how to extend it to obtain the
description of the real Bitcoin. We do not describe how the
coins are created as it is not relevant to this paper. Let A =
(A.sk , A.pk ) be a key pair. In our simpliﬁed view a transaction
describing the fact that an amount v (called the value of a
transaction) is transferred from an address A.pk to an address
B.pk has the following form
Tx = (y, B.pk , v, sigA(y, B.pk , v)),
where y is an index of a previous transaction Ty. We say that
B.pk is the recipient of Tx, and that the transaction Ty is
an input of the transaction Tx, or that it is redeemed by this
transaction (or redeemed by the address B.pk). More precisely,
the meaning of Tx is that the amount v of money transferred
to A.pk in transaction Ty is transferred further to B.pk. The
transaction is valid only if (1) A.pk was a recipient of the
transaction Ty, (2) the value of Ty was at least v (the difference
between v and the value of Ty is called the transaction fee),
(3) the transaction Ty has not been redeemed earlier, and (4)
8Technically an address is a hash of pk. In our informal description we
decided to assume that it is simply pk. This is done only to keep the exposition
as simple as possible, as it improves the readability of the transaction scripts
later in the paper.
447
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
the signature of A is correct. Clearly all of these conditions
can be veriﬁed publicly.
The ﬁrst important generalization of this simpliﬁed sys-
tem is that a transaction can have several “inputs” meaning