.Vb 1
\&    use Fcntl;
.Ve
.Sp
first to get the correct constant definitions.  Argument processing and
value return works just like \f(CW\*(C`ioctl\*(C'\fR below.
For example:
.Sp
.Vb 3
\&    use Fcntl;
\&    fcntl($filehandle, F_GETFL, $packed_return_buffer)
\&        or die "can't fcntl F_GETFL: $!";
.Ve
.Sp
You don't have to check for \f(CW\*(C`defined\*(C'\fR on the return from \f(CW\*(C`fcntl\*(C'\fR.
Like \f(CW\*(C`ioctl\*(C'\fR, it maps a \f(CW0\fR return from the system call into
\&\f(CW"0 but true"\fR in Perl.  This string is true in boolean context and \f(CW0\fR
in numeric context.  It is also exempt from the normal \fB\-w\fR warnings
on improper numeric conversions.
.Sp
Note that \f(CW\*(C`fcntl\*(C'\fR will produce a fatal error if used on a machine that
doesn't implement \fIfcntl\fR\|(2).  See the Fcntl module or your \fIfcntl\fR\|(2)
manpage to learn what functions are available on your system.
.IP "fileno \s-1FILEHANDLE\s0" 8
.IX Item "fileno FILEHANDLE"
Returns the file descriptor for a filehandle, or undefined if the
filehandle is not open.  This is mainly useful for constructing
bitmaps for \f(CW\*(C`select\*(C'\fR and low-level \s-1POSIX\s0 tty-handling operations.
If \s-1FILEHANDLE\s0 is an expression, the value is taken as an indirect
filehandle, generally its name.
.Sp
You can use this to find out whether two handles refer to the
same underlying descriptor:
.Sp
.Vb 3
\&    if (fileno(THIS) == fileno(THAT)) {
\&        print "THIS and THAT are dups\en";
\&    }
.Ve
.Sp
(Filehandles connected to memory objects via new features of \f(CW\*(C`open\*(C'\fR may
return undefined even though they are open.)
.IP "flock \s-1FILEHANDLE\s0,OPERATION" 8
.IX Item "flock FILEHANDLE,OPERATION"
Calls \fIflock\fR\|(2), or an emulation of it, on \s-1FILEHANDLE\s0.  Returns true
for success, false on failure.  Produces a fatal error if used on a
machine that doesn't implement \fIflock\fR\|(2), \fIfcntl\fR\|(2) locking, or \fIlockf\fR\|(3).
\&\f(CW\*(C`flock\*(C'\fR is Perl's portable file locking interface, although it locks
only entire files, not records.
.Sp
Two potentially non-obvious but traditional \f(CW\*(C`flock\*(C'\fR semantics are
that it waits indefinitely until the lock is granted, and that its locks
\&\fBmerely advisory\fR.  Such discretionary locks are more flexible, but offer
fewer guarantees.  This means that files locked with \f(CW\*(C`flock\*(C'\fR may be
modified by programs that do not also use \f(CW\*(C`flock\*(C'\fR.  See perlport,
your port's specific documentation, or your system-specific local manpages
for details.  It's best to assume traditional behavior if you're writing
portable programs.  (But if you're not, you should as always feel perfectly
free to write for your own system's idiosyncrasies (sometimes called
\&\*(L"features\*(R").  Slavish adherence to portability concerns shouldn't get
in the way of your getting your job done.)
.Sp
\&\s-1OPERATION\s0 is one of \s-1LOCK_SH\s0, \s-1LOCK_EX\s0, or \s-1LOCK_UN\s0, possibly combined with
\&\s-1LOCK_NB\s0.  These constants are traditionally valued 1, 2, 8 and 4, but
you can use the symbolic names if you import them from the Fcntl module,
either individually, or as a group using the ':flock' tag.  \s-1LOCK_SH\s0
requests a shared lock, \s-1LOCK_EX\s0 requests an exclusive lock, and \s-1LOCK_UN\s0
releases a previously requested lock.  If \s-1LOCK_NB\s0 is bitwise\-or'ed with
\&\s-1LOCK_SH\s0 or \s-1LOCK_EX\s0 then \f(CW\*(C`flock\*(C'\fR will return immediately rather than blocking
waiting for the lock (check the return status to see if you got it).
.Sp
To avoid the possibility of miscoordination, Perl now flushes \s-1FILEHANDLE\s0
before locking or unlocking it.
.Sp
Note that the emulation built with \fIlockf\fR\|(3) doesn't provide shared
locks, and it requires that \s-1FILEHANDLE\s0 be open with write intent.  These
are the semantics that \fIlockf\fR\|(3) implements.  Most if not all systems
implement \fIlockf\fR\|(3) in terms of \fIfcntl\fR\|(2) locking, though, so the
differing semantics shouldn't bite too many people.
.Sp
Note that the \fIfcntl\fR\|(2) emulation of \fIflock\fR\|(3) requires that \s-1FILEHANDLE\s0
be open with read intent to use \s-1LOCK_SH\s0 and requires that it be open
with write intent to use \s-1LOCK_EX\s0.
.Sp
Note also that some versions of \f(CW\*(C`flock\*(C'\fR cannot lock things over the
network; you would need to use the more system-specific \f(CW\*(C`fcntl\*(C'\fR for
that.  If you like you can force Perl to ignore your system's \fIflock\fR\|(2)
function, and so provide its own \fIfcntl\fR\|(2)\-based emulation, by passing
the switch \f(CW\*(C`\-Ud_flock\*(C'\fR to the \fIConfigure\fR program when you configure
perl.
.Sp
Here's a mailbox appender for \s-1BSD\s0 systems.
.Sp
.Vb 1
\&    use Fcntl ':flock'; # import LOCK_* constants
.Ve
.Sp
.Vb 6
\&    sub lock {
\&        flock(MBOX,LOCK_EX);
\&        # and, in case someone appended
\&        # while we were waiting...
\&        seek(MBOX, 0, 2);
\&    }
.Ve
.Sp
.Vb 3
\&    sub unlock {
\&        flock(MBOX,LOCK_UN);
\&    }
.Ve
.Sp
.Vb 2
\&    open(MBOX, ">>/usr/spool/mail/$ENV{'USER'}")
\&            or die "Can't open mailbox: $!";
.Ve
.Sp
.Vb 3
\&    lock();
\&    print MBOX $msg,"\en\en";
\&    unlock();
.Ve
.Sp
On systems that support a real \fIflock()\fR, locks are inherited across \fIfork()\fR
calls, whereas those that must resort to the more capricious \fIfcntl()\fR
function lose the locks, making it harder to write servers.
.Sp
See also DB_File for other \fIflock()\fR examples.
.IP "fork" 8
.IX Item "fork"
Does a \fIfork\fR\|(2) system call to create a new process running the
same program at the same point.  It returns the child pid to the
parent process, \f(CW0\fR to the child process, or \f(CW\*(C`undef\*(C'\fR if the fork is
unsuccessful.  File descriptors (and sometimes locks on those descriptors)
are shared, while everything else is copied.  On most systems supporting
\&\fIfork()\fR, great care has gone into making it extremely efficient (for
example, using copy-on-write technology on data pages), making it the
dominant paradigm for multitasking over the last few decades.
.Sp
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before forking the child process, but this may not be supported
on some platforms (see perlport).  To be safe, you may need to set
\&\f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method of
\&\f(CW\*(C`IO::Handle\*(C'\fR on any open handles in order to avoid duplicate output.
.Sp
If you \f(CW\*(C`fork\*(C'\fR without ever waiting on your children, you will
accumulate zombies.  On some systems, you can avoid this by setting
\&\f(CW$SIG{CHLD}\fR to \f(CW"IGNORE"\fR.  See also perlipc for more examples of
forking and reaping moribund children.
.Sp
Note that if your forked child inherits system file descriptors like
\&\s-1STDIN\s0 and \s-1STDOUT\s0 that are actually connected by a pipe or socket, even
if you exit, then the remote server (such as, say, a \s-1CGI\s0 script or a
backgrounded job launched from a remote shell) won't think you're done.
You should reopen those to \fI/dev/null\fR if it's any issue.
.IP "format" 8
.IX Item "format"
Declare a picture format for use by the \f(CW\*(C`write\*(C'\fR function.  For
example:
.Sp
.Vb 4
\&    format Something =
\&        Test: @>>>>
\&              $str,     $%,    '$' . int($num)
\&    .
.Ve
.Sp
.Vb 4
\&    $str = "widget";
\&    $num = $cost/$quantity;
\&    $~ = 'Something';
\&    write;
.Ve
.Sp
See perlform for many details and examples.
.IP "formline \s-1PICTURE\s0,LIST" 8
.IX Item "formline PICTURE,LIST"
This is an internal function used by \f(CW\*(C`format\*(C'\fRs, though you may call it,
too.  It formats (see perlform) a list of values according to the
contents of \s-1PICTURE\s0, placing the output into the format output
accumulator, \f(CW$^A\fR (or \f(CW$ACCUMULATOR\fR in English).
Eventually, when a \f(CW\*(C`write\*(C'\fR is done, the contents of
\&\f(CW$^A\fR are written to some filehandle, but you could also read \f(CW$^A\fR
yourself and then set \f(CW$^A\fR back to \f(CW""\fR.  Note that a format typically
does one \f(CW\*(C`formline\*(C'\fR per line of form, but the \f(CW\*(C`formline\*(C'\fR function itself
doesn't care how many newlines are embedded in the \s-1PICTURE\s0.  This means
that the \f(CW\*(C`~\*(C'\fR and \f(CW\*(C`~~\*(C'\fR tokens will treat the entire \s-1PICTURE\s0 as a single line.
You may therefore need to use multiple formlines to implement a single
record format, just like the format compiler.
.Sp
Be careful if you put double quotes around the picture, because an \f(CW\*(C`@\*(C'\fR
character may be taken to mean the beginning of an array name.
\&\f(CW\*(C`formline\*(C'\fR always returns true.  See perlform for other examples.
.IP "getc \s-1FILEHANDLE\s0" 8
.IX Item "getc FILEHANDLE"
.PD 0
.IP "getc" 8
.IX Item "getc"
.PD
Returns the next character from the input file attached to \s-1FILEHANDLE\s0,
or the undefined value at end of file, or if there was an error (in
the latter case \f(CW$!\fR is set).  If \s-1FILEHANDLE\s0 is omitted, reads from
\&\s-1STDIN\s0.  This is not particularly efficient.  However, it cannot be
used by itself to fetch single characters without waiting for the user
to hit enter.  For that, try something more like:
.Sp
.Vb 6
\&    if ($BSD_STYLE) {
\&        system "stty cbreak /dev/tty 2>&1";
\&    }
\&    else {
\&        system "stty", '-icanon', 'eol', "\e001";
\&    }
.Ve
.Sp
.Vb 1
\&    $key = getc(STDIN);
.Ve
.Sp
.Vb 7
\&    if ($BSD_STYLE) {
\&        system "stty -cbreak /dev/tty 2>&1";
\&    }
\&    else {
\&        system "stty", 'icanon', 'eol', '^@'; # ASCII null
\&    }
\&    print "\en";
.Ve
.Sp
Determination of whether \f(CW$BSD_STYLE\fR should be set
is left as an exercise to the reader.
.Sp
The \f(CW\*(C`POSIX::getattr\*(C'\fR function can do this more portably on
systems purporting \s-1POSIX\s0 compliance.  See also the \f(CW\*(C`Term::ReadKey\*(C'\fR
module from your nearest \s-1CPAN\s0 site; details on \s-1CPAN\s0 can be found on
\&\*(L"\s-1CPAN\s0\*(R" in perlmodlib.
.IP "getlogin" 8
.IX Item "getlogin"
Implements the C library function of the same name, which on most
systems returns the current login from \fI/etc/utmp\fR, if any.  If null,
use \f(CW\*(C`getpwuid\*(C'\fR.
.Sp
.Vb 1
\&    $login = getlogin || getpwuid($<) || "Kilroy";
.Ve
.Sp
Do not consider \f(CW\*(C`getlogin\*(C'\fR for authentication: it is not as
secure as \f(CW\*(C`getpwuid\*(C'\fR.
.IP "getpeername \s-1SOCKET\s0" 8
.IX Item "getpeername SOCKET"
Returns the packed sockaddr address of other end of the \s-1SOCKET\s0 connection.
.Sp
.Vb 5
\&    use Socket;
\&    $hersockaddr    = getpeername(SOCK);
\&    ($port, $iaddr) = sockaddr_in($hersockaddr);
\&    $herhostname    = gethostbyaddr($iaddr, AF_INET);
\&    $herstraddr     = inet_ntoa($iaddr);
.Ve
.IP "getpgrp \s-1PID\s0" 8
.IX Item "getpgrp PID"
Returns the current process group for the specified \s-1PID\s0.  Use
a \s-1PID\s0 of \f(CW0\fR to get the current process group for the
current process.  Will raise an exception if used on a machine that
doesn't implement \fIgetpgrp\fR\|(2).  If \s-1PID\s0 is omitted, returns process
group of current process.  Note that the \s-1POSIX\s0 version of \f(CW\*(C`getpgrp\*(C'\fR