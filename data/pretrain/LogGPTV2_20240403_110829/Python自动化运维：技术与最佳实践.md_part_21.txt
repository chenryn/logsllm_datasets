一为安装，二为同步配置文件，安装使用了yum模块
第9章集中化管理平台Ansible详解153
---
## Page 181
大的困难，本书将不一一说明。
号连接（具体见jinja2语法）。
示开机自启动。
条语句等价于命令行“setsebool htpd_can_network_connect _db1”"，其中“persistent-yes”
（失败）则配置 selinux httpd访问远程数据库的权限，使用的是Ansible的 seboolean模块，该
154第二部分高级篇
?
理解以上4个角色的定义后，再理解ansible-examples其他playbook的内容已经没有太
template分发多个模板文件时可以使用with_items 来循环同步，变量与字符使用“+”
【 roles/nagios/tasks/ main.yml ]
nagios 角色主要实现了nagios 监控平台的部署，重点介绍任务（tasks）的定义：
（4）nagios角色
判断 sestatus变量（roles/common/tasks/main.yml中定义）返回的rc（运行代码）不等于0
#httpd is handled by the base-apache role upstream
【roles/web/tasks/main.yml 】
notify:restart nagios
with_items:
template: src={ item
name:create the nagios object files
git:repo={(repository}}version={1webapp_version })dest=/var/www/html/
seboolean: name=httpd_can_network_connect_db state=true persistent=yes
name:Configure SELinux to allow httpd to connect to remote database
with_items:
yum:name={{ item }} state=present
name:Install php and git
口9.2节～ 9.11节Ansible介绍及示例参考 http://docs.ansible.com官网文档。
9.1节YAML语法介绍参考http://zh.wikipedia.org/zh-cn/YAML。
php-mysql
dbservers.cfg
webservers.cfg
git
lbservers.cfg
Linux公社 www.linuxidc.com
dest=/etc/nagios/ansible-managed/(( item 1}
表
---
## Page 182
介绍。
https://github.com/saltstack获得。
已经趋向成熟，用户群及社区活跃度都不错，同时官方也开放了不少子项目，具体可访问
等，因此，Saltstack是运维人员提高工作效率、规范业务配置与操作的利器。目前Saltstack
同业务特性进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理
PyCrypto、Pyjinja2、python-msgpack 和 PyYAML等）构建。Saltstack具备如下特点。
基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq
puppet （http://puppetlabs.com/）和 加强版的 func（https://fedorahosted.org/func/）。 Saltstack
于2011年的一个项目，具备配置管理、远程执行、监控等功能，一般可以理解成简化版的
为了方便读者更系统化地了解Saltstack的技术点，本章将针对相关技术点详细展开
通过部署Saltstack环境，我们可以在成千上万台服务器上做到批量执行命令，根据不
Saltstack（http://www.saltstack.com/）是一个服务器基础架构集中化管理平台，开始
口支持API及自定义模块，可通过Python轻松扩展。
口主控端（master）和被控制端（minion）基于证书认证，安全可靠。
口配置简单、功能强大、扩展性强。
口主从集中化管理。
口支持大部分UNIX/Linux及Windows 环境。
口部署简单、方便。
Linux公社 www.linuxidc.com
集中化管理平台Saltstack详解
第10章
---
## Page 183
10.1.3安装Saltstack
署 Saltstack 的默认 yum 源。
10.1.2
数及Nginx根目录的差异化是为方便演示生成动态配置的需要)。
系统版本为CentOSrelease6.4，自带Python2.6.6。相关服务器信息如表10-1所示（CPU核
10.1.1
绍具体步骤。
10.1
156第二部分高级篇
minion
minion
minion
minion
minion
Master
角色
由于目前RHEL 官网 yum 源还没有 Saltstack的安装包支持，因此先安装 EPEL作为部
Saltstack 的不同角色服务安装非常简单，建议读者采用 yum 源方式来实现部署，下面介
（1）主服务器安装（主控端）
#yum install salt-minion -y
（2）从服务器安装（被控端）
#chkconfig salt-master on
RHEL(CentOS)6版本：rpm -Uvh下载地址：http://ftp.linux.ncsu.edu/pub/epel/6/i386/
口RHEL(CentOS) 5 版 本：rpm -Uvh下 载地 址：http://mirror.pnl.gov/epel/5/i386/epel-
为了方便读者理解，笔者通过虚拟化环境部署了两组业务功能服务器来进行演示，操作
#service salt-master start
#yum install salt-master -y
release-5-4.noarch.rpm
epel-release-6-8.noarch.rpm
业务环境说明
Saltstack 的安装
安装EPEL
SN2013-08-022
SN2013-08-021
SN2012-07-012
SN2012-07-011
SN2012-07-010
SN2013-08-020
Id（minion id)
Linux公社 www.linuxidc.com
192.168.1.22
192.168.1.21
192.168.1.12
192.168.1.11
192.168.1.10
192.168.1.20
IP
表10-1环境说明表
Groupsnode（组名）Cpus（核数）Web Root（Nginx根目录）
web2group
web2group
web1group
weblgroup
weblgroup
/data
/data
/www
/www
/www
---
## Page 184
后需要对两种角色的配置文件进行修改，下面具体说明。
10.1.5
条iptables规则：
端直接与主控端的zeromq建立长链接，接收广播到的任务信息并执行，具体操作是添加两
10.1.4
在主控端添加TCP4505、TCP4506的规则，而在被控端无须配置防火墙，原理是被控
【/etc/salt/minion】
1）更新被控端关键项配置：
（2）minion被控端配置
2）重启saltstack salt-master服务使新配置生效，具体执行以下命令：
【/etc/salt/master】
1）更新主控端关键项配置：
（1）master主控端配置
Saltstack分两种角色，
id:SN2013-08-021
#修改被控端主机识别id，建议使用操作系统主机名来配置
#指定master主机IP地址
#service salt-master restart
autoaccept:True
interface:192.168.1.20
iptables
#service salt-minion start
#chkconfig salt-minion on
指定Saltstack文件根目录位置
自动认证，避免手动运行salt-key来确认证书信任；
base:
更新Saltstack配置及安装校验
Saltstack防火墙配置
/srv/salt
-IINPUT
Linux公社 www.linuxidc.com
-m state
一种为master（主控端），另一种为minion（被控端），安装完毕
第10章
集中化管理平台Saltstack详解
157
---
## Page 185
fedorahosted.org/func/）相似，可以帮助运维人员完成集中化的操作平台。
10.2利用 Saltstack 远程执行命令
性是否正常，探测所有被控端采用"*来代替‘SN2013-08-021'即可，具体如图10-1所示。
158第二部分高级篇
Saltstack 的一个比较突出优势是具备执行远程命令的功能，操作及方法与func（https:/
提示
通过test模块的ping方法，可以确认指定被控端设备与主控端是否建立信任关系及连通
示例：查看被控主机的内存使用情况，如图10-2所示。
命令格式：salt[参数］
（3）校验安装结果
service salt-minion restart
2）重启 saltstack salt-minion 服务使新配置生效，具体执行以下命令：
salt-key-a id，接受单个id证书请求。
salt-key-A，接受所有id证书请求；
salt-key-did，删除单个id证书；
salt-key-D，删除所有认证主机id证书；
 salt-key-L，显示已经或未认证的被控端id，Accepted Keys 为已认证清单，
证操作，具体操作如下：
当/etc/salt/master 没有配置auto_accept:True时，需要通过salt-key命令来进行证书认
Unaccepted Keys 为未认证清单；
08-021:
Linux公社 www.linuxidc.com
True
2013-08-021:
图10-2查看“SN2013-08-021”主机内存使用
cotal
图10-1
used
'SN2013-08-021
测试安装主机的连通性
ree
shared
test.ping
buffers
---
## Page 186
图10-6所示。
象名称：对象值"，例如，过滤所有具备'apache:httpd'pillar值的主机。示例：探测具有
的Python 版本号，命令：salt-G'osrelease:6.4'cmd.run'python-V”，运行结果如图10-5所示。
需要正则表达式的支持可切换成--grain-pcre参数来执行。示例：获取主机发行版本号为6.4
value>：，例如，过滤内核为Linux的主机可以写成kermel:Linux'，如果同时
运行结果如图10-4所示。
整操作系统发行版名称，命令：salt-L'SN2013-08-021,SN2013-08-022'grains.item osfullname,
机id名称使用逗号分隔。示例：获取主机id名为SN2013-08-021、SN2013-08-022；获取完
否连通，命令：salt-E"SN2013.*test.ping，运行结果如图 10-3所示。
举常用的具体参数。
1）-E,--pcre，通过正则表达式进行匹配。示例：控测 SN2013字符开头的主机id名是
4）-I,--pillar，根据被控主机的pillar（10.5节详解）信息进行匹配过滤，格式为“对
3）-G,-grain，根据被控主机的 grains（10.4节详解）信息进行匹配过滤，格式为，Saltstack 提供了多种方法对被控端主机（id）进行过滤。下面列
[root@SN2013-08-020
osfullname:Centos
SN2013-08-022:
osfullname:Centos
rooteSN2013-08-020~]#salt-E'^SN2013.*'test.ping
N2013-08-022:
True
N2013-08-021:
Python Z.6.6
Python2.6.6
True
Linux公社 www.linuxidc.com
~]#salt-L
图10-5grain形式匹配主机的Python版本
图10-4
图10-3
列表形式匹配主机的操作系统类型
'SN2013-08-021,SN2013-08-022'grains.item osfullname
正则匹配主机的连通性
第10章集中化管理平台Saltstack详解159
---
## Page 187
非 SN2013开头的主机连通性，其命令为：salt-C* and not E@^SN2013.*test.ping。
探测SN2013开头并且操作系统版本为CentOS的主机连通性，命令如下：
结果如图10-7所示。
式描述；S@表示以IP子网或地址格式描述。
务具备相同的特点，包括部署环境、应用平台、配置文件等。举例分组配置信息如下：
组为例（主机信息支持正则表达式、grain、条件运算符等），通常根据业务类型划分，不同业
160第二部分高级篇
其中，not语句不能作为第一个条件执行，不过可以通过以下方法来规避，示例：探测
6）-C,--compound，根据条件运算符not、and、or去匹配不同规则的主机信息。示例：
示例：探测 web2group 被控主机的连通性，其命令为：salt-N web2group test.ping，运行
7）-S,-ipcidr，根据被控主机的IP 地址或IP子网进行匹配，示例如下：
其中，L@表示后面的主机id格式为列表，即主机id以逗号分隔；G@表示以 grain格
【/etc/salt/master】
5）-N,--nodegroup，根据主控端 master 配置文件中的分组名称进行过滤。以笔者定义的
nodegroups:
nginx:
其中pillar属性配置文件如下（关于pillar后面10.5单独进行说明）：
web2group:
weblgroup:
root:/data
rooteSN2013-08-020]#salt-I
Linux公社 www.linuxidc.com
L@SN2012-07-010,SN2012-07-011,SN2012-07-012
True
L@SN2013-08-021,SN2013-08-022'
13-08-021:
rootesN2013-08-020~]# salt-N webZgroup test.ping
-08-022:
图10-7
True
08-022:
图10-6pillar形式匹配主机的连通性
分组形式（nodegroup）匹配主机的连通性
091
data
test.
---
## Page 188
的字典类型，方便后续的业务逻辑处理，程序运行结果如下：
是API实现test.ping的示例：
过调用master client模块，实例化一个LocalClient 对象，再调用cmdO方法来实现的。以下
以通过 sys 模块列出当前版本支持的模块，如图10-8 所示。
多模块信息见官网模块介绍：htp://docs.saltstack.com/ref/modules/all/index.html。当然，也可
10.3
?
提示
Saltstack提供了非常丰富的功能模块，涉及操作系统的基础功能、常用工具支持等，更
结果以一个标准的 Python字典形式的字符串返回，可以通过evalO函数转换成Python
import salt.client
接下来抽取出常见的模块进行介绍，同时也会列举模块API使用方法。API的原理是通
printret
client= salt.client.Localclient()
salt -S 192.168.1.10 test.ping
salt -s 192.168.0.0/16 test.ping
(SN2013-08-022':True,'SN2013-08-021':True)
过滤表达式中的恶意函数。
将字符字典转换成 Python 的字典类型，推荐使用 ast 模块的 literal_evalO方法，可以
Saltstack常用模块及API
Linux公社 www.linuxidc.com
图10-8所有主机Saltstack支持的模块清单（部分截图）
django
data
cmd
archive
apache
alternatives
aliases
'test.ping')
ontools
第10章
sys.list_modules
集中化管理平台Saltstack详解161
---
## Page 189
162第二部分高级篇
#将主服务器file_roots指定位置下的文件复制到被控主机
salt'*1cp.get_dir salt://path/to/dir//minion/dest
#将主服务器file_roots指定位置下的目录复制到被控主机
#将指定被控主机的/etc/hosts文件复制到被控主机本地的saltcache目录（/var/cache/salt/
2）示例：
1）功能：实现远程文件、目录的复制，以及下载URL文件等操作。
（3）cp模块
client.cmd('SN2013-08-021',cmd.run',['free-m'])
3）API调用：
#minion/files/base/script/test.sh);其次运行该脚本
#获取所有被控主机的内存使用情况
2）示例：
1）功能：实现远程的命令行调用执行（默认具备root操作权限，使用时需评估风险)。
（2）cmd模块
client.cmd('*,archive.gunzip',['/tmp/sourcefile.txt.gz'])
3）API调用：
salt
minion/localfiles/);
salt
2）示例：
（1）Archive模块
'SN2013-08-021' cmd.script salt://script/test.sh
该命令会做两个动作：
salt
在SN2013-08-021
cp.get_file salt://path/to/file/minion/dest
cp.cache_local_file /etc/hosts
archive.gzip /tmp/sourcefile.txt
archive.gunzip/tmp/sourcefile.txt.gz
cmd.run
Linux公社
1主机运行test.sh脚本，其中script/test.sh存放在file_roots指定的目录，
"free
首先同步test，sh到minion的cache目录（如同步到/var/cache/salt/
-m"
www.linuxidc.com
---
## Page 190
#校验所有被控主机/etc/fstab文件的md5是否为6254e84e2f6ffa54e0c8d9cb230f5505，一致则
2）示例：
1）功能：
（6）file模块