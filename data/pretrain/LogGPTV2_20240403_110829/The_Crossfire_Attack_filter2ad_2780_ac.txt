Although the selected target links are highly dependent
on the target area of the attack, they are nearly independent
of the choice of bot distributions; i.e., even if an adversary
uses different sets of bots that have different geographic
distributions to ﬂood a target area,
the effectiveness of
the Crossﬁre attack would remain nearly unchanged. To
show this, we performed the following experiment. First,
we partitioned the set of bots into several subsets based on
bots’ geolocation (viz., subsets denoted by Sj, j = 1, ..., 8
in Table II). Then, we selected different subsets to form
six different bot distributions (viz., distributions denoted by
Distri, i = 1, ..., 6 in Table II), and simulated a separate
Crossﬁre attack for each distribution against three different
target areas;
i.e., East Coast, Pennsylvania, and Univ1.
Finally, we analyzed how the different distributions affect
the degradation ratios.
The geographical distributions of 620 PlanetLab nodes
and 452 LG servers are as follows: 42% were located in
Europe, 39% in North America, 13% in Asia, and 6% in
the rest of the world (viz., Figure 5). Since the distributions
of PlanetLab nodes and LG servers in North America and
Europe cover wider areas than those in the rest of the world,
we (1) assigned three disjoint subsets to each; i.e., S1, S2,
and S3 to North America and S4, S5, and S6 to Europe;
and (2) constructed the bot distributions such that Distr1,
Distr2, and Distr3 cover a similar number of bots in
North America and Asia, and Distr4, Distr5, and Distr6
a similar number of bots in Europe and Asia.
Fig. 4 shows the degradation ratios for the six different bot
distributions shown in Table II and three different-size target
areas chosen; i.e., East Coast, Pennsylvania, and Univ1. For
each target area, we deﬁned a baseline degradation ratio
(denoted by “Baseline” in Fig. 4) as the degradation ratio
132
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:31 UTC from IEEE Xplore.  Restrictions apply. 
North America
S1
S3
(cid:2)
(cid:2)
S2
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Europe
S4
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
S5
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
S6
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Asia
S7
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Others
S8
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Baseline
Distr1
Distr2
Distr3
Distr4
Disrt5
Distr6
Table II: Different geographic distributions of bots (Distri)
created using different subsets of PlanetLab nodes and LG
servers (Sj).
1
0.8
0.6
0.4
0.2
o
i
t
a
R
n
o
i
t
a
d
a
r
g
e
D
0
0
10
Univ1
Pennsylvania
East Coast
20
30
Number of target links
Baseline
     Distr1
     Distr2
     Distr3
     Distr4
     Distr5
     Distr6
40
50
Figure 4: Degradation ratios for different geographic distri-
butions of PlanetLab nodes and LG servers.
given by an attack launched by all bots available. The six
degradation ratios are computed using the same total number
of routes as that used in the baseline ratio. Thus, if the
degradation ratio of a certain distribution is close to the
baseline, that distribution of bots is as damaging to the target
area as the baseline (i.e., as all available bots). As shown in
Fig. 4, the choice of the six different distributions does not
diminish the effectiveness of the attack in a measurable way.
That is, the effectiveness of an attack is nearly independent
of the geographical distribution of bots. This is particularly
noticeable in the case of the small and medium target area
where the degradation ratios are almost indistinguishable
from the baseline.
IV. ATTACK PERSISTENCE AND COST
A. Data-Plane-Only Attack: Indeﬁnite Duration
In this subsection, we discuss how the Crossﬁre at-
tack maintains its effectiveness, namely a high connection
degradation ratio for selected target areas caused by link
ﬂooding (data plane only), by avoiding any route change
(by the control plane) in the Internet. Clearly, the goal of
the adversary is to avoid control plane reaction since that
would cause routes to change dynamically in response to
any unexpected network-state variations (e.g., due to link
failures or high trafﬁc load akin to link ﬂooding).
The Crossﬁre attack takes advantage of the fact that the
current Internet’s dynamic response to link ﬂooding is too
slow for an adaptive adversary. That is, if the adversary
periodically changes the set of predetermined target links
in less than 3 minutes, she can maintain a very high
connection degradation ratio without inducing any Internet
133
route changes. Thus, the attack duration can be extended
virtually indeﬁnitely. The technique of changing the set of
target links, namely the rolling attack, is discussed in detail
in Section IV-B. The following two subsections illustrate
how slowly the current Internet would react to the Crossﬁre
attack.
1) Link failure detection: Link-failure detection refers
to a function of a routing protocol that enables a router
to assess the physical connectivity of its network link to
its neighbor router [34]. A router which misses several
consecutive control packets (e.g., hello packets for OSPF
or keepalive messages for BGP) in a speciﬁc time interval
(default 40 seconds for OSPF or default 180 seconds for
BGP) will conclude that the link failed and broadcast the
link failure to other routers. The consequence of the link
failure is two-fold. First, if an intra-AS link fails, the failure
notiﬁcation is sent to all the routers within the same AS,
which leads to internal topology changes. In contrast, if a
link between two neighbor ASs (i.e., an inter-AS link) fails,
the failure, in the worst case, could propagate to all the BGP
speaking routers in the Internet and cause a global topology
change. These topology changes would redirect the attack
trafﬁc to alternate routes and invalidate the ﬂow densities
computed for the on-going Crossﬁre attack.
To measure Internet reaction to link failures, Shaikh et al.
[34] inject trafﬁc that consumes 100% of the capacity of a
link and measure the time for the router to detect the link
failure. This experiment shows that it takes 217 seconds for
a IGP router (that runs OSPF or IS-IS) and 1,076 seconds for
a BGP router to diagnose congestion as a failure10. Note that
failure detection takes much longer than its default waiting
time interval for the control packets, namely 40 seconds
for OSPF and 180 seconds for BGP. This is because some
control packets that are queued at the congested interface
at a router can successfully reach a neighbor router even
in severe link congestion. Clearly, the congestion diagnostic
times are too long to enable rapid reaction to the Crossﬁre
attack where the adversary can change the set of target links
for an area in much less than 3 minutes; viz., the rolling
attacks of the next subsection.
2) Trafﬁc engineering: Most commonly, ISPs use ofﬂine
trafﬁc engineering techniques, whereby network parameters
are periodically re-optimized based on the estimated trafﬁc
matrix among the ingress/egress points of their networks
[16]. The network parameters can be the link weights of IGP
protocols (e.g., OSPF or IS-IS) in pure IP networks [37] or
bandwidths of LSP (label switched path) tunnels in MPLS
networks [38, 39]. Ofﬂine trafﬁc engineering produces new
10We assume that the OSPF and BGP protocols do not use shorter
intervals for fast failure detection [35], but use default timers (HelloInterval
& RouteDeadInterval for OSPF and KeepaliveTimer & HoldTimer for
BGP). Since most optical ﬁber connections (e.g., SONET or SDH) provide
failure reports in less than 50 ms, additional system conﬁguration for faster
link failure detection at layer-3 is obviously unnecessary [36].
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:31 UTC from IEEE Xplore.  Restrictions apply. 
routes on a time scale ranging from tens of minutes to
hours and days [15], though more commonly in days and
weeks [38, 39, 16]. Even though it is not frequently used by
ISPs due to its potential instability problem, online trafﬁc
engineering occurs on a smaller time scale, namely from
minutes to hours [16, 17]. Given that the adversary can
repeatedly relaunch the Crossﬁre attack for new routes,
neither current ofﬂine nor online trafﬁc engineering can offer
effective countermeasures.
B. Proactive Attack Techniques: the Rolling Attack
A Crossﬁre attack is said to be rolling if the adversary
changes the attack parameters (e.g., bots, decoy servers, and
target links) dynamically while maintaining the same target
area. A rolling attack can be employed by an adversary to
further increase indistinguishability of attack trafﬁc from
legitimate trafﬁc and undetectability of all target links by
target area. Based on the types of attack parameters that can
be dynamically changed, rolling attacks can be categorized
into two types: one that changes bots and decoy servers
while maintaining the same target links, and the other that
changes target links while maintaining the same target area.
The main advantage of the ﬁrst type of attack is that
it further increases the indistinguishability of the Crossﬁre
ﬂows from legitimate ﬂows while maintaining the same
attack effects. Since the source and the destination IP
addresses seen at
links change over
time, the ISPs cannot easily identify the source and the
destination IP addresses that contribute to the attack. A
potential disadvantage is that this attack requires more bots
and decoy servers than the minimum necessary to ﬂood
the target links. However, the current cost of bots suggests
that this disadvantage is insigniﬁcant (viz., discussion of bot
costs below).
the selected target
The second type of rolling attack uses multiple sets of
disjoint target links for the same target area. To ﬁnd the
multiple disjoint sets, the adversary executes the target-link
selection algorithm (viz., Section II-B2) successively; i.e.,
the n-th best set of the target links is selected after removing
the previously selected links. The use of multiple disjoint
sets of the target links enhances attack undetectability by
ISPs since ISPs could not anticipate the adversary’s choice
of targets with certainty. More importantly, this type of
rolling attack enables Crossﬁre to remain a pure data plane
attack, as discussed in the previous subsection. A potential
disadvantage is that this type of rolling attack may degrade
the effectiveness of the Crossﬁre attack since the degradation
ratio caused by attacking a non-best
target set can be
lower than that of attacking the best set. However,
the
degradation ratios of different sets of target links shown
in Table III indicate that this degradation is minimal. In
order to maximize attack effects while being undetected, the
adversary can alternate the target sets; she would use the best
set for the most of attacks and switch to the non-best sets
Target area
Best set
Univ1
Pennsylvania
East Coast
89%
42%
21%
Target link set
2nd best set
3rd best set
77%
30%
16%
63%
24%
14%
Table III: Degradation ratios for different disjoint target link
sets. Each set has 10 target links.
only for a short time interval. For example, if the adversary
repeatedly schedules 3 minutes for the attack on the best
set and next 30 seconds for the second-best set, she can
maintain the attack towards a target area indeﬁnitely while
limiting the reduction of the degradation ratio less than 4%.
C. Avoidance of Early Congestion
Crossﬁre avoids early congestion, namely the event
whereby a non-target link, or more, located upstream of
the target links becomes congested. We argue that early
congestion does not affect attack feasibility, but instead is a
matter of attack provisioning, which is a very distinct and
easily handled issue by an adversary.
Bots can easily detect early congestion by regularly per-
forming traceroutes to the target area since if it happens, they
would not receive most of replies (i.e., ICMP time exceeded
messages) from the congested router and the subsequent
routers on the route. When early congestion is reported
by the bots, the adversary can re-assign some attack ﬂows
to over-provisioned bots, to avoid the early congestion. In
other words, the adversary adaptively assigns attack ﬂows to
geographically distributed bots, so that a sufﬁcient number