consisting of m attribute values, and satisfying certain range con-
ditions. For the sake of simplicity, we henceforth deﬁne result R
of query Q on dataset T as a set containing exactly the hash value
hi = H(ti) of the binary representation of each tuple ti ∈ T that
satisﬁes the query conditions, under a CRHF H : {0, 1}∗ → Zp.
Our AMR constructions will focus on proving that R is the cor-
rect set of hash values corresponding to the tuples satisfying the
query. Then, given these hash values along with the full result tu-
ples, the client can validate the integrity of each result tuple ti by
testing H(ti) ?= hi. Due to collision-resistance of H, the server
cannot return a falsiﬁed t∗
i ) = hi, instead of the
correct pre-image ti of hi. In the following, when clear from the
context, we use term “tuple” for a table tuple ti ∈ T and its hash
value hi = H(ti) interchangeably.
i such that H(t∗
822We illustrate the main idea of our framework using Figure 1. Let
h1, . . . , hn correspond to the hash values of the tuples t1, . . . , tn of
T , respectively. We maintain a copy of the values for every attribute
ai, and sort the copy of ai according to the attribute values of the
tuples on ai. For instance, in Figure 1, h3 = H(t3) appears ﬁrst in
the ordering of a1 because t3 has the smallest value on attribute a1
among the tuples in T .
Figure 1: Illustrating the different tuple orders per attribute
A multi-dimensional range query Q is deﬁned over an arbitrary
set of dimensions (where, recall, each dimension is an attribute).
Our framework “decomposes” a d-dimensional range query into d
separate 1-dimensional queries. More speciﬁcally, our framework
boils down to two steps:
• Step 1: (1-D proofs) For each dimension ai involved in Q,
compute the set Ri of all hash values of tuples that satisfy
the condition on ai. Formally, Ri = {hj = H(tj) | li ≤
tj.ai ≤ ui}. Also compute proof πRi for the integrity of Ri.
i Ri and
proof π for its integrity, given pairs (Ri, πRi ) for every ai
involved in Q.
• Step 2: (Combination) Compute the result R
= (cid:84)
def
For example, suppose in Figure 1 that a 2-dimensional query Q
is deﬁned over ai and aj. Our two-step framework ﬁrst dictates
the computation of Ri = {h1, h3, h7} that corresponds to the 1-
dimensional result along dimension ai, and Rj = {h1, h7} along
dimension aj, as well as proofs πRi , πRj . It next requires the com-
putation of result R = {h1, h7} and a proof π.
Beneﬁts. Our view of multi-dimensional range queries as a collec-
tion of 1-dimensional range queries offers multiple advantages over
existing approaches: (i) We aim to support range queries over any
combination of attributes. Thus, there are O(2m) possible differ-
ent attribute combinations that can be involved in a query, where
m is the total number of attributes in T . In order to support all of
them, existing solutions must build O(2m) separate authenticated
structures. On the contrary, our framework requires m such struc-
tures (one per attribute) constructed once, which sufﬁce to capture
all O(2m) possible subsets of attributes. (ii) As discussed in Sec-
tion 1, the performance of all existing constructions deteriorates
drastically with d.
In contrast, the separate handling of each di-
mension allows our framework to scale with d gracefully. (iii) To
address scalability issues that arise from the advent of “big data,”
data management systems typically employ multi-core CPU hard-
ware, as well as cloud infrastructures involving multiple nodes. In
our framework, the 1-dimensional sub-queries can be distributed
across multiple cores/nodes, and run in parallel. The combination
step can then take place using well-known in-network aggregation
techniques (e.g., in a MapReduce fashion [12]).
The challenge. There are several efﬁcient solutions for the prob-
lem of 1-dimensional range queries (e.g., [18, 17, 14, 15]), each
of which can be used to instantiate Step 1 in our framework. The
problem lies in Step 2, i.e., how to efﬁciently combine the separate
proofs. In particular, for all known 1-dimensional solutions, Step 2
entails creating the proof π as the concatenation of all proofs πRi
and the partial results Ri. This makes the proof size as large as the
sum of the partial result cardinalities, which can be substantially
larger than the ﬁnal result R. In turn, this may lead to a prohibitive
communication and veriﬁcation cost for the client.
π in Step 2, whose size is independent of(cid:80)
is efﬁcient, if it outputs proofs π of size o((cid:80)
A fundamental requirement of our framework is the partial proofs
πRi produced in Step 1 to be efﬁciently combinable to a short proof
i |Ri|. More formally:
EFFICIENCY REQUIREMENT. A AMR following our framework
i |Ri|).
Based on our observation above, any existing 1-dimensional so-
lution trivially conforms to our framework. However, no such solu-
tion satisﬁes the efﬁciency requirement. Essentially, the efﬁciency
requirement motivates the design of AMRs with non-trivial proof
combination techniques. What has prevented the research commu-
nity from devising such AMRs is the combination of the lack of
appropriate cryptographic tools, and the reduced need for range
queries over arbitrarily many dimensions, and large quantities of
data. However, the emergence of big data practices renders the
problem timely and important, whereas the recent introduction of
SOA techniques opens new directions towards efﬁcient solutions.
4.2 Construction
We ﬁrst outline the main idea of our scheme, and elaborate on
some important implementation decisions. Subsequently, we present
the instantiation of our algorithms.
Main idea. Recall that Step 2 of our framework dictates that the
result R is expressed as the intersection of sets Ri. We stress
that SOA techniques appear to solve our targeted problem trivially
as follows: The owner pre-computes a proof component πRi =
acc(Ri) for each Ri, where acc(Ri) is the accumulation value of
set Ri, and signs each πRi. According to our discussion in Sec-
tion 2, given all Ri, πRi, the server computes and sends to the client
a combined intersection proof π∩ for the integrity of R, along with
all πRi and their corresponding signatures. Observe that this ap-
proach satisﬁes our efﬁciency requirement. However, there exist
O(n2) possible Ri sets per dimension that can be involved in a
query, which makes the pre-processing cost for the owner and the
storage overhead for the server prohibitive. The main idea behind
our scheme is to express any possible Ri as the result of an oper-
ation over a ﬁxed number of “primitive sets,” given the constraint
that there are O(n) such “primitive sets.”
One possible way to derive Ri from “primitive sets” is illus-
trated in Figure 2(a). Let us focus on ai and the ordering of the
hash values hj (of tuples tj) according to the tj.ai values. We de-
ﬁne the preﬁx set Pi,j to consist of all hash values appearing in
positions 1, . . . , j in the ordering. In the ﬁgure, Pi,1 = {h3} and
Pi,2 = {h3, h1}. Similarly, we deﬁne sufﬁx set Si,j to consist of all
hash values appearing in positions n− j + 1, . . . , n in the ordering.
In our example, Si,1 = {h6} and Si,2 = {h5, h6}. Now assume
that k(cid:48)
i + 1, ki are the two positions in this ordering correspond-
ing to the ﬁrst and last tuple satisfying the query on ai. Observe
h1h3h4h7.....................h1h7h4h3h1h7h4h3.................................h7h3h1h4RiRja1amaiaj823i Ri =(cid:84)
= acc(Pi,ki ) and πS
i(Pi,ki ∩ Si,k(cid:48)i
that, in this case, Ri = Pi,ki ∩ Si,k(cid:48)i
+1, and, thus, there exist 2n
R =(cid:84)
“primitive sets” per dimension, i.e., all preﬁx and sufﬁx sets. Let
+1). Then, since
πPi,ki
+1) can be computed with a single
set intersection, we can utilize the SOA of [24] to create a proof
) for
π (consisting of π∩ and signatures on every πPi,ki
the integrity of R, while satisfying both efﬁciency and O(n) pre-
processing/storage.
= acc(Si,k(cid:48)i
, πS
i,k(cid:48)i
+1
i,k(cid:48)i
+1
(a)
(b)
Figure 2: Set representation of Ri
+1| ∈ Ω(n), along each attribute.
Unfortunately, from the complexity analysis of [24] in Section 2,
it follows that π∩ requires ˜O(d·n) time for each query at the server,
which makes this approach impractical. The reason is that the π∩
construction overhead is dictated by the cardinality of the input sets,
which is |Pi,ki| + |Si,k(cid:48)i
Motivated by the above, we propose an alternative solution which
we demonstrate using Figure 2(b). We deﬁne sets Ri through set-
the “primitive sets” are only the n preﬁx sets. Now R =(cid:84)
difference. In particular, using the notation of the previous para-
graph, it holds that Ri = Pi,ki \ Pi,k(cid:48)i
(cid:84)
. Consequently, in this case
i Ri =
i(Pi,ki \ Pi,k(cid:48)i
) is no longer expressed as a single set operation.
The only known SOA that can accommodate a circuit of set oper-
˜O(|Ri|), and π∩ with ˜O((cid:80)
ations is [8]. Brieﬂy stated, [8] allows the construction of πRi with
i |Ri|), exponentiations. The downside
is that its security relies on non-standard cryptographic assump-
tions. In Section 4.3, we construct our own sub-protocol for produc-
ing combinable proofs of set-difference, customized for the special
case where the ﬁrst participating set is a strict superset of the sec-
ond. This particular constraint enables our sub-protocol to prove
with ˜O(|Ri|) exponentiations,
the validity of Ri = Pi,ki \ Pi,k(cid:48)i
while being secure under a standard cryptographic assumption.
Our algorithms are comprised of a collection of set operation
sub-protocols, bundled with a set membership scheme. For clar-
ity of presentation, we will abstract the internal mechanics of these
sub-protocols, and instead use the following conventions:
• By SMA we refer to either a Merkle tree [19] or an accu-
mulation tree [22], along with all its algorithms.
• By ProveIntersection, VerifyIntersection, we refer to the
corresponding algorithms of the SOA of [24]. The former
computes an intersection proof on its input sets, and the lat-
ter veriﬁes this operation.
• By ProveSetDiﬀ, VerifySetDiﬀ, we refer to the correspond-
ing algorithms of our construction presented in Section 4.3.
The former generates a set-difference proof, and the latter
veriﬁes this operation.
This presentation choice also highlights that our algorithms use
elementary cryptographic tools as building blocks. Therefore, the
overall performance of our scheme is highly dependent on that of
the underlying tools, leaving potential for great improvement as
novel tool instantiations are introduced in the literature.
Key generation. It outputs key pair pk, sk, which are simply the
public and secret keys of the underlying SMA and SOA schemes,
generated by their corresponding key generation routines.
Setup. Figure 3 visualizes the detailed authentication structure pro-
duced by the setup algorithm, whose pseudo code is shown in the
next page. The owner computes the hash value h = H(t) for every
t ∈ T (Line 1). It then produces the sorted orderings of the hash
values along every attribute (Lines 2-3), and computes the preﬁx
sets Pi,j as explained in Figure 2(b). Next, it calculates preﬁx proof
πPi,j for each Pi,j (Lines 4-5). For each Pi,j, it computes a triplet
τPi,j = (vi,j, vv,j+1, πPi,j ) in Lines 6-7. Values vi,j, vi,j+1 indi-
cate the jth and (j + 1)th largest values on attribute ai appearing
in T . These values are necessary for guaranteeing the complete-
ness of the result, and their purpose will become clear soon. We
make the assumption that all triplets τ are distinct across attributes,
i.e., there does not exist τ that appears in more than one attributes.
This can be easily achieved in practice by including the attribute
index i in each τ, however for simplicity of presentation we avoid
it. Subsequently, it computes an SMAi over the triples τPi,j of
every attribute ai, producing digests δ1, . . . , δm (Line 8). It then
constructs a SMA over the (i, δi) pairs, and generates digest δ
(Line 9). Finally, it sends the m + 1 SMA structures to the server
along with T (Line 10), and publishes pk, δ (Line 11).
Figure 3: Our authentication structure
Proof construction. For ease of presentation and without loss of
generality, we assume that the requested query is upon the d ﬁrst
attributes of T and, hence, encode it as Q = {i, li, ui) for i =
1, ..., d. We provide the pseudo code of this algorithm below.
Given R, the server ﬁrst computes πR (Line 1), and calculates set
such that
Ri for each attribute ai. It identiﬁes preﬁxes Pi,ki , Pi,k(cid:48)i
h1h3h7h2h5h6Pi,1Pi,2Pi,kiSi,nSi,k′i+1Si,n−1...Ri...∩Pi,kiSi,k′i+1......Rk′i+1ki...Pi,k′iPi,kiRiPi,k′iPi,ki......R∩\h1h3h7h2h5h6Pi,1Pi,2......k′i+1ki...t1T...tnh1h1a1amPreﬁxh1=H(t1)P1,1P1,nPm,nPm,1......τP1,1τP1,nτPm,nτPm,1.........τPm,1=(vm,1,vm,2,πPm,1)πPm,1=acc(Pm,1)SMA1SMAmproofs(1,δ1)(m,δm)SMAδDigestsPublisheddigest...824Algorithm Setup(T, pk, sk)
Sort hj in ascending order along tj .ai
For j = 1, ..., n
1. For j = 1, ..., n, compute hj = H(tj )
2. For i = 1, ..., m
3.
4.
5.
Compute πPi,j = acc(Pi,j )
Let vi,j be the jth largest value on attribute ai in T
6.
7.
Construct triplet τPi,j = (vi,j , vi,j+1, πPi,j )
Build SMAi with digest δi over τPi,1 , ..., τPi,n
8.
9. Build SMA with digest δ over (1, δ1), ..., (m, δm)
10. Send T, auth(T ) = (SMA, SMA1, ..., SMAm) to the server
11. Publish pk, δ
Algorithm Prove(Q, R, pk, auth(T ))
1. Compute πR = acc(R)
2. For i = 1, ..., d
Compute Ri
3.
Identify Pi,k and locate τPi,k = (vi,ki , vi,ki+1, πPi,ki
4.