of racks per cluster, number of uplinks per top-of-rack
switch, etc. Robotron realizes the design in FBNet by
creating top-of-rack switch, circuit, interface, and IP
address objects for the cluster.
Conﬁg Generation: After FBNet objects are popu-
lated, the conﬁg generation stage builds vendor-speciﬁc
device conﬁgs based on object states. Conﬁg genera-
tion is highly vendor- and model-dependent. A set of
template conﬁgs, which are extended as new types of
devices are put into production, enables FBNet to pro-
vide the object states necessary for each build.
Deployment: Once device conﬁgs are generated, the
next stage is to deploy them to network devices. Correct
and safe multi-device deployment can be challenging.
Many design changes aﬀect multiple heterogeneous de-
vices. To reduce the risk of severe network disruptions,
changes are deployed in small phases before reaching all
devices.
Monitoring: When a network component is in pro-
duction, it must be continuously monitored to ensure
no deviation from its desired state. This is a critical
part of auditing and troubleshooting an active network.
For example, all production circuits are monitored to
ensure they are up and passing traﬃc.
4. FBNET: MODELING THE NETWORK
FBNet is the vendor-agnostic, network-wide abstrac-
tion layer that models and stores various network device
attributes as well as network-level attributes and topol-
ogy descriptions, e.g., routers, switches, optical devices,
protocol parameters, topologies, etc. We empirically
approached the design of FBNet data models,
inﬂu-
enced by our network architecture, network manage-
ment tasks, and operational events. Our design goals
Figure 4: PSWa-PR1 portmap.
are two-fold. First, the data models should be simple
and comprehensive in order to capture common network
properties across diverse device vendors, hardware plat-
forms, circuit providers, etc. Second, the data models
should be easy to extend and maintain over time based
on management software needs.
In addition to the data models, FBNet provides APIs
that enable any application to query data and safely
make changes. FBNet’s data store and APIs are ar-
chitected to be reliable, highly available, and scalable
to high read rates. We describe the details of FBNet
data models, APIs, and architecture in the rest of the
section.
4.1 Data Model
4.1.1 Object, Value, and Relationship
A network in FBNet has physical (e.g., network de-
vices, linecards, physical interfaces, circuits) and logical
(e.g., BGP sessions, IP addresses) components. They
have attributes to store component data and associa-
tions between components. FBNet models these com-
ponents, data attributes, and association attributes re-
spectively as typed objects, value ﬁelds, and relation-
ship ﬁelds. Every object is instantiated based on a data
model that deﬁnes the type of the object and its avail-
able ﬁelds. Value ﬁelds contain object data whereas
relationship ﬁelds contain typed references to other ob-
jects.
To illustrate this idea, consider Figure 2 which de-
picts a 4-post POP cluster topology. The cluster has a
group of four PSWs connected to the TORs and servers
[not shown]. Each PSW has one 20G uplink to each of
the two PRs. The PRs connect to the backbone via
the BBs and serve as gateways to the Internet through
peering and transit interconnects. Routing information
is exchanged by external BGP (eBGP) sessions estab-
lished between the PSWs and PRs, and the PRs and
Internet Service Providers.
Figure 4 zooms into the connectivity between PSWa
and PR1. The 20G point-to-point link is a logical bun-
dle formed by grouping two 10G circuits in parallel.
Each circuit has a 10G physical interface on each de-
vice as its endpoints. Each physical interface resides in
a linecard and is named etX/Y, where X indicates the
linecard’s slot number inside the device chassis, and Y is
PR1	PSWa	10G	10G	et1/1	et1/2	et2/1	et3/1	ae0	ae1	2001::1	2001::2		eBGP	session																	Linecard												Circuit	Figure 5: FBNet models for Figure 4.
the port number on the linecard. The two physical in-
terfaces on each device are combined into an aggregated
interface (aeX) running Link Aggregation Control Pro-
tocol (LACP) to load-balance traﬃc across interfaces
in the group. Each aggregated interface is assigned an
IP from the same /127 subnet. An eBGP session is es-
tablished over the logical bundle to exchange routing
information.
Figure 5 lays out how the connectivity is modeled
in FBNet. The example’s network components (PSWa,
PR1, physical interfaces, aggregated interfaces, linecards,
circuits, IPs, and eBGP sessions) are represented by
typed objects with value and relationship ﬁelds. Rela-
tionships are shown as directed edges capturing the as-
sociations between objects (e.g., linecards are installed
in a device chassis, physical interfaces are grouped into
an aggregated interface, an IP address is conﬁgured
per aggregated interface, circuits terminate at physi-
cal interfaces, etc). Value ﬁelds have basic data types
such as string, integer, etc. Objects can only be as-
sociated with certain object types based on the rela-
tionship ﬁeld. For example, the PhysicalInterface
model has a string ﬁeld name and a relationship ﬁeld
aggregated_interface that captures its many-to-one
association with the AggregatedInterface model.
While this example demonstrates a limited set of the
core models, the actual set is much richer. At the time
of this paper, there were over 250 models in total cover-
ing IP/AS number allocations, optical transport, BGP,
operational events, etc.
4.1.2 Desired versus Derived
FBNet models are partitioned into two distinct groups:
Desired and Derived.
Desired models capture the desired network state,
which is maintained by network engineers with a set
of specialized tools provided by Robotron. To make
changes, engineers modify the data to describe the up-
dated network design instead of directly updating each
device conﬁg. The data is used to drive the generation
of device conﬁgs. As a result, the integrity and accuracy
of Desired model data is paramount to the correctness
of the generated conﬁgs.
Derived models reﬂect the current operational net-
work state. In contrast to Desired models, data in De-
rived models is populated based on real-time collection
from network devices (Section 5.4). For example, a cir-
cuit object is created if the Link Layer Discovery Proto-
col (LLDP) data from two devices shows that the phys-
ical interfaces connected to both ends are neighbors to
each other. One obvious use case of having the Desired
and Derived data is anomaly detection. Diﬀerences be-
tween data in both models could imply expected or un-
expected deviation from planned network design due to
reasons such as unapplied conﬁg changes, or unplanned
events such as hardware failures, ﬁber cuts, or miscon-
ﬁgurations.
While designing Desired and Derived models, we fol-
low three main principles: (1) the models only contain
the ﬁelds and data needed by the various management
tools; (2) both model groups may contain diﬀerent at-
tributes but should be as similar as possible to allow for
simple comparison (e.g., a PhysicalInterface model
exists in both model groups, but only the Derived ver-
sion has the oper status attribute to indicate the cur-
rent operational state of the interface); (3) duplication
of Desired model ﬁelds should be minimized due to the
diﬃculty of consistently maintaining multiple sources of
truth. For example, a physical interface object can be
associated with a device object indirectly via the device
ﬁeld of the corresponding linecard object. Adding a de-
vice relationship ﬁeld to the physical interface object
would require two device ﬁelds to remain in sync with
each other.
4.2 APIs
4.2.1 Read APIs
FBNet’s read APIs provide operations to retrieve a
list of objects and their attributes. The APIs have a
standard declaration for each object type and are de-
ﬁned around ﬁelds and query as follows:
get(fields, query)
fields: A list of value ﬁelds relative to the object
of the given type. A value ﬁeld can be local to an ob-
ject or indirectly referenced via one or more relationship
ﬁelds. For example, to get the slot and device name of
a linecard object, ﬁelds has two attributes, slot and
device.name. In addition, for each relationship ﬁeld, a
name=PSWa	
  slot=1	
  model=X	
  device=	
  name=et1/1	
  linecard=	
  agg_interface=	
  name=et1/2	
  agg_interface=	
  linecard=	
    name=ae0	
  preﬁx=2001::1	
  interface=	
  a_preﬁx=	
  z_preﬁx=	
  name=ae1	
  preﬁx=2001::2	
  interface=	
  name=et3/1	
  agg_interface=	
  linecard=	
  name=et2/1	
  linecard=	
  agg_interface=	
  name=PR1	
  slot=2	
  model=Y	
  device=	
  slot=3	
  model=Y	
  device=	
  Networkswitch Linecard PhysicalInterface PhysicalInterface AggregatedInterface AggregatedInterface PhysicalInterface PhysicalInterface V6Prefix BgpV6Session V6Prefix Linecard Linecard BackboneRouter a_endpoint=	
  z_endpoint=	
  Circuit  Circuit  a_endpoint=	
  z_endpoint=	
  reverse connection is made available from the referenced
object 2 for convenient access to related objects. For ex-
ample, a device object has a linecards ﬁeld created as
a result of the relationship ﬁeld from the linecard model.
query: Criteria that the returned list of objects must
match. A query is made of expressions. An expression
has the form    where field is
the local or indirect value ﬁeld to compare to, op is the
comparison operator, and rvalue is a list of values to
compare against. Example operators are EQUAL, REG-
EXP, etc. Multiple expressions can be composed using
logical operators to form a large, complex query.
4.2.2 Write APIs
In contrast to per-object-type operations provided
by the read APIs, FBNet’s write APIs provide high-
level operations that add, update, or delete multiple
objects to ensure data integrity (i.e., meets network de-
sign rules). For example, one of the write APIs is de-
signed for portmap manipulation (e.g., used to create
the portmap in Figure 4). The API takes a “change
plan” as the input including an old portmap and a new
portmap, and carries out portmap creation, migration,
update, deletion, etc, accordingly, while enforcing net-
work design rules.
4.3 Architecture and Implementation
Storage Layer
We describe the distributed architecture of FBNet
and its API services, our implementation choices, and
how they scale and tolerate failures across multiple data
centers.
4.3.1
The main pillars of FBNet models are objects and
relationships. This fact lends FBNet’s persistent ob-
ject store to being implemented in MySQL, a relational
database. Each FBNet model is mapped to a database
table where each column corresponds to a ﬁeld in the
model and each row represents an object. Relationship
ﬁelds correspond to foreign keys, establishing the logical
connections between FBNet models.
We use Django [2], an object-relational mapping (ORM)
framework in Python, to translate FBNet models into
table schemas. Figure 6 shows a snippet of FBNet mod-
els. Using an ORM framework enables (1) quick model
changes, (2) the use of object-oriented techniques such
as inheritance, (3) support of custom value ﬁelds and
per-ﬁeld validation, e.g., V6PrefixField.
4.3.2
In order for clients written in any programming lan-
guage to use FBNet APIs, both read and write APIs are
exposed as language-independent Thrift remote proce-
dure calls (RPC) utilizing Django’s ORM API to inter-
act with the database.
Service Layer
2Reverse connections are added in API only, but not in
actual FBNet models.
class PhysicalInterface(Interface):
linecard = models.ForeignKey(Linecard)
agg_interface = models.ForeignKey(
AggregatedInterface)
class V6Prefix(Prefix):
prefix = models.V6PrefixField()
interface = models.ForeignKey(Interface)
class V6PrefixField(CharField):
def get_prep_value(self, value):
# Check if value is a valid IPv6 Address
ip = ipaddr.IPNetwork(value)
if ip.version == 6:
return str(ip)
return ’’
Figure 6: Example FBNet models in Django.
The standard declaration of FBNet’s read API per
object type allows the Thrift API deﬁnition to be auto-
generated by introspecting FBNet models. The read
API service translates incoming RPC calls into eﬃcient
ORM calls to query the database, and serializes the re-
sults back to the caller as a list of Thrift objects. When-
ever FBNet models are changed, the service just needs
to be re-packaged and re-deployed to expose the up-
dated APIs.
Scalability and Availability
FBNet’s write API service deﬁnes and implements
diﬀerent APIs for diﬀerent use cases. To ensure the
atomicity, each write API is wrapped in a single database
transaction, and therefore no partial state is visible to
other applications before the API call completes suc-
cessfully. If an error occurs, all previous operations in
the transaction are rolled back.
4.3.3
Applications perform reads and writes through the
service layer from multiple, geographically-diverse DCs.
We employ standard MySQL replication using one mas-
ter and multiple slaves, one per DC. All writes to the
master database server are replicated asynchronously to
the slave servers with a typical lag of under one second.