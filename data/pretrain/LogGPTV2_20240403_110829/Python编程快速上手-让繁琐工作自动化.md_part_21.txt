经复制了该值。否则，我们打印一条消息，说没有这个名称的账号。
这就是完整的脚本。利用附录B中的指导，轻松地启动命令行程序，现在你就
有了一种快速的方式，将账号的口令复制到剪贴板。如果需要更新口令，就必须修
改源代码的PASSWORDS字典中的值。
当然，你可能不希望把所有的口令都放在一个地方，让某人能够轻易地复制。
但你可以修改这个程序，利用它快速地将普通文本复制到剪贴板。假设你需要发出
一些电子邮件，它们有许多同样的段落。你可以将每个段落作为一个值，放在
第6章 字符串操作
PASSWORDS 字典中（此时你可能希望对这个字典重命名），然后你就有了一种方
式，快速地选择一些标准的文本，并复制到剪贴板。
在 Windows 上，你可以创建一个批处理文件，利用 Win-R 运行窗口，来运行
这个程序（关于批处理文件的更多信息，参见附录 B）。在文件编辑器中输入以下
代码，保存为pw.bat，放在C:\Windows目录下：
@py.exe C:\Python34\pw.py %*
@pause
有了这个批处理文件，在Windows上运行口令保存程序，就只要按下Win-R，
再输入pw 。
6.4 项目：在 Wiki 标记中添加无序列表
在编辑一篇维基百科的文章时，你可以创建一个无序列表，即让每个列表项占
据一行，并在前面放置一个星号。但是假设你有一个非常大的列表，希望添加前面
的星号。你可以在每一行开始处输入这些星号，一行接一行。或者也可以用一小段
Python脚本，将这个任务自动化。
bulletPointAdder.py脚本将从剪贴板中取得文本，在每一行开始处加上星号和空
格，然后将这段新的文本贴回到剪贴板。例如，如果我将下面的文本复制到剪贴板
（取自于维基百科的文章“List of Lists of Lists”）：
Lists of animals
Lists of aquarium life
Lists of biologists by author abbreviation
Lists of cultivars
然后运行bulletPointAdder.py程序，剪贴板中就会包含下面的内容：
* Lists of animals
* Lists of aquarium life
* Lists of biologists by author abbreviation
* Lists of cultivars
这段前面加了星号的文本，就可以粘贴回维基百科的文章中，成为一个无序列表。
第 1步：从剪贴板中复制和粘贴
你希望bulletPointAdder.py程序完成下列事情：
1．从剪贴板粘贴文本；
2．对它做一些处理；
3．将新的文本复制到剪贴板。
第2步有一点技巧，但第1步和第3步相当简单，它们只是利用了pyperclip.copy()
和pyperclip.paste()函数。现在，我们先写出程序中第1步和第3步的部分。输入以
下代码，将程序保存为bulletPointAdder.py：
Python编程快速上手——让繁琐工作自动化
#! python3
# bulletPointAdder.py - Adds Wikipedia bullet points to the start
# of each line of text on the clipboard.
import pyperclip
text = pyperclip.paste()
# TODO: Separate lines and add stars.
pyperclip.copy(text)
TODO注释是提醒，你最后应该完成这部分程序。下一步实际上就是实现程序
的这个部分。
第 2步：分离文本中的行，并添加星号
调用pyperclip.paste()将返回剪贴板上的所有文本，结果是一个大字符串。如果
我们使用“List of Lists of Lists”的例子，保存在text中的字符串就像这样：
'Lists of animals\nLists of aquarium life\nLists of biologists by author
abbreviation\nLists of cultivars'
在打印到剪贴板，或从剪贴板粘贴时，该字符串中的\n 换行字符，让它能显示为
多行。在这一个字符串中有许多“行”。你想要在每一行开始处添加一个星号。
你可以编写代码，查找字符串中每个\n换行字符，然后在它后面添加一个星号。
但更容易的做法是，使用 split()方法得到一个字符串的列表，其中每个表项就是原
来字符串中的一行，然后在列表中每个字符串前面添加星号。
让程序看起来像这样：
#! python3
# bulletPointAdder.py - Adds Wikipedia bullet points to the start
# of each line of text on the clipboard.
import pyperclip
text = pyperclip.paste()
# Separate lines and add stars.
lines = text.split('\n')
for i in range(len(lines)): # loop through all indexes in the "lines" list
lines[i] = '* ' + lines[i] # add star to each string in "lines" list
pyperclip.copy(text)
我们按换行符分割文本，得到一个列表，其中每个表项是文本中的一行。我们
将列表保存在 lines中，然后遍历lines中的每个表项。对于每一行，我们在开始处
添加一个新号和一个空格。现在lines中的每个字符串都以星号开始。
第 3步：连接修改过的行
lines列表现在包含修改过的行，每行都以星号开始。但pyperclip.copy()需要一
个字符串，而不是字符串的列表。要得到这个字符串，就要将 lines 传递给 join 方
第6章 字符串操作
法，连接列表中字符串。让你的程序看起来像这样：
#! python3
# bulletPointAdder.py - Adds Wikipedia bullet points to the start
# of each line of text on the clipboard.
import pyperclip
text = pyperclip.paste()
# Separate lines and add stars.
lines = text.split('\n')
for i in range(len(lines)): # loop through all indexes for "lines" list
lines[i] = '* ' + lines[i] # add star to each string in "lines" list
text = '\n'.join(lines)
pyperclip.copy(text)
运行这个程序，它将取代剪贴板上的文本，新的文本每一行都以星号开始。现
在程序完成了，可以在剪贴板中复制一些文本，试着运行它。
即使不需要自动化这样一个专门的任务，也可能想要自动化某些其他类型的文
本操作，诸如删除每行末尾的空格，或将文本转换成大写或小写。不论你的需求是
什么，都可以使用剪贴板作为输入和输出。
6.5 小结
文本是常见的数据形式，Python自带了许多有用的字符串方法，来处理保存在字符
串中的文本。在你写的几乎每个Python程序中，都会用到取下标、切片和字符串方法。
现在你写的程序似乎不太复杂，因为它们没有图形用户界面，没有图像和彩色
的文本。到目前为止，你在利用 print()显示文本，利用 input()让用户输入文本。但
是，用户可以通过剪贴板，快速输入大量的文本。这种能力提供了一种有用的编程
方式，可以操作大量的文本。这些基于文本的程序可能没有闪亮的窗口或图形，但
它们能很快完成大量有用的工作。
操作大量文本的另一种方式，是直接从硬盘读写文件。在下一章中，你将学习
如何用Python来做到这一点。
6.6 习题
1．什么是转义字符？
2．转义字符\n和\t代表什么？
3．如何在字符串中放入一个倒斜杠字符\？
4．字符串"Howl's Moving Castle"是有效字符串。为什么单词中的单引号没有转
义，却没有问题？
5．如果你不希望在字符串中加入\n，怎样写一个带有换行的字符串？
6．下面的表达式求值为什么？
Python编程快速上手——让繁琐工作自动化
• 'Hello world!'[1]
• 'Hello world!'[0:5]
• 'Hello world!'[:5]
• 'Hello world!'[3:]
7．下面的表达式求值为什么？
• 'Hello'.upper()
• 'Hello'.upper().isupper()
• 'Hello'.upper().lower()
8．下面的表达式求值为什么？
• 'Remember, remember, the fifth of November.'.split()
• '-'.join('There can be only one.'.split())
9．什么字符串方法能用于字符串右对齐、左对齐和居中？
10．如何去掉字符串开始或末尾的空白字符？
6.7 实践项目
作为实践，编程完成下列任务。
表格打印
编写一个名为printTable()的函数，它接受字符串的列表的列表，将它显示在组
织良好的表格中，每列右对齐。假定所有内层列表都包含同样数目的字符串。例如，
该值可能看起来像这样：
tableData = [['apples', 'oranges', 'cherries', 'banana'],
['Alice', 'Bob', 'Carol', 'David'],
['dogs', 'cats', 'moose', 'goose']]
你的printTable()函数将打印出：
apples Alice dogs
oranges Bob cats
cherries Carol moose
banana David goose
提示 你的代码首先必须找到每个内层列表中最长的字符串，这样整列就有足够的宽度以
放下所有字符串。你可以将每一列的最大宽度，保存为一个整数的列表。printTable()函
数的开始可以是colWidths = [0] * len(tableData)，这创建了一个列表，它包含了一些0，
数目与 tableData 中内层列表的数目相同。这样，colWidths[0]就可以保存 tableData[0]中
最长字符串的宽度，colWidths[1]就可以保存tableData[1]中最长字符串的宽度，以此类推。
然后可以找到colWidths列表中最大的值，决定将什么整数宽度传递给rjust()字符串方法。
第6章 字符串操作
第二部分
自动化任务
7
第 章
模式匹配与正则表达式
2
你可能熟悉文本查找，即按下Ctrl-F，输入你要查找的词。“正
则表达式”更进一步，它们让你指定要查找的“模式”。你也许不
知道一家公司的准确电话号码，但如果你住在美国或加拿大，你就
知道它有3位数字，然后是一个短横线，然后是4位数字（有时候
以3位区号开始）。因此作为一个人，你看到一个电话号码就知道：
415-555-1234是电话号码，但4,155,551,234不是。
正则表达式很有用，但如果不是程序员，很少会有人了解
它，尽管大多数现代文本编辑器和文字处理器（诸如微软的Word或OpenOffice），
都有查找和查找替换功能，可以根据正则表达式查找。正则表达式可以节约大量时
间，不仅适用于软件用户，也适用于程序员。实际上，技术作家Cory Doctorow声
称，甚至应该在教授编程之前，先教授正则表达式：
“知道[正则表达式]可能意味着用 3 步解决一个问题，而不是用 3000 步。如果
你是一个技术怪侠，别忘了你用几次击键就能解决的问题，其他人需要数天的烦琐
工作才能解决，而且他们容易犯错。”1
1 Cory Doctorow, “Here’s what ICT should really teach kids: how to do regular expressions,”Guardian, December 4, 2012,
http://www.theguardian.com/technology/2012/dec/04/ict-teach-kids-regular-expressions/.
在本章中，你将从编写一个程序开始，先不用正则表达式来寻找文本模式。然后
再看看，使用正则表达式让代码变得多么简洁。我将展示用正则表达式进行基本匹配，
然后转向一些更强大的功能，诸如字符串替换，以及创建你自己的字符类型。最后，
在本章末尾，你将编写一个程序，从一段文本中自动提取电话号码和E-mail地址。
7.1 不用正则表达式来查找文本模式
假设你希望在字符串中查找电话号码。你知道模式：3个数字，一个短横线，3
个数字，一个短横线，再是4个数字。例如：415-555-4242。
假定我们用一个名为isPhoneNumber()的函数，来检查字符串是否匹配模式，它
返回 True 或 False。打开一个新的文件编辑器窗口，输入以下代码，然后保存为
isPhoneNumber.py：
def isPhoneNumber(text):
 if len(text) != 12:
return False
for i in range(0, 3):
 if not text[i].isdecimal():
return False
 if text[3] != '-':
return False
for i in range(4, 7):
 if not text[i].isdecimal():
return False
 if text[7] != '-':
return False
for i in range(8, 12):
 if not text[i].isdecimal():
return False
 return True
print('415-555-4242 is a phone number:')
print(isPhoneNumber('415-555-4242'))
print('Moshi moshi is a phone number:')
p rint(isPhoneNumber('Moshi moshi'))
运行该程序，输出看起来像这样：
415-555-4242 is a phone number:
True
Moshi moshi is a phone number:
False
isPhoneNumber()函数的代码进行几项检查，看看text中的字符串是不是有效的