### Table II: Results for the Tested Keyboard Applications

| ID | Installs | Copies of ID | Copies of PW |
|---|----------|--------------|--------------|
| 0  | N.A.     | 0            | 0            |
| 1  | >1B      | 0            | 0            |
| 8  | 300M     | 0            | 0            |
| 0  | 100M     | 0            | 0            |
| 0  | 100M     | 0            | 0            |
| 2  | 100M     | 0            | 0            |
| 2  | 50M      | 0            | 0            |
| 0  | 10M      | 0            | 0            |
| 0  | 10M      | 0            | 0            |
| 10M| 0        | 0            | 0            |
| 0  | 0.1M     | 0            | 0            |
| 0  | 0.1M     | 0            | 0            |
| 0  | 0.01M    | 0            | 0            |
| 3  | 0        | 0            | 0            |
| 2  | 0        | 0            | 0            |
| 0  | 0        | 0            | 0            |
| 1  | 0        | 0            | 0            |
| 1  | 0        | 0            | 0            |
| 4  | 0        | 0            | 0            |
| 7  | 0        | 0            | 0            |
| 1  | 0        | 0            | 0            |
| 1  | 0        | 0            | 0            |
| 0  | 0        | 0            | 0            |
| 135| 0        | 0            | 0            |
| 2  | 0        | 0            | 0            |
| 0  | 0        | 0            | 0            |

**Notes:**
- The LatinIME keyboard, which is the default keyboard in the Android Open Source Project (AOSP), should not be confused with Google’s Gboard, which has over a billion installs according to the Google Play Store.
- We tested 13 popular and less popular keyboard applications, including Gboard, SwiftKey, Go, Kika, and TouchPal.
- For each keyboard, we used it to enter Facebook credentials and then performed a memory dump after moving the app to the background and locking the phone.
- Nine out of the 13 tested keyboards stored user passwords in memory. Notably, Gboard and SwiftKey did not store passwords, only account IDs, which are generally less sensitive.
- A Chinese keyboard application stored over 100 copies of the user password in memory.

### Problem #4: Buffering the Most Recent Input
The LatinIME keyboard also has password retention issues. Upon further analysis of its source code, we found that the keyboard buffers the most recent input from the user, only clearing it when the keyboard returns for subsequent data entry. This means that sensitive inputs like passwords can remain in memory for an extended period.

LatinIME, being the reference keyboard in AOSP, is often used as a starting point by third-party developers. Therefore, many less popular keyboard apps may share these same issues. The Go, Kika, FaceMoji, New Keyboard, and Baidu keyboards all exhibit similar patterns, holding user passwords but not account IDs. This suggests they may be reusing LatinIME's buffering strategy.

### Methodology
We categorized "example" apps into four types of authentication techniques:
1. **Basic Password-based Authentication Apps:** These send user passwords directly to a remote server for authentication.
2. **Challenge/Response Apps:** These derive secrets from passwords for authentication.
3. **OAuth Apps:** These delegate authentication to an OAuth service (e.g., Facebook).
4. **Local Authentication or Standalone Apps:** These do not involve a remote server, including some password manager apps.

For open-source apps in these categories, we analyzed their source code. For others, we obtained similar apps from official sites, open-source repositories (e.g., GitHub), security guidebooks, and developer forums like Stack Overflow. We analyzed more than 20 apps or code snippets and identified common mistakes across the categories.

### Basic Password-based Authentication Apps
Most of the apps we collected fall into this category because directly sending passwords is the simplest, though insecure, method of authentication. Sample apps 1 and 2 use different libraries for network communication (Apache vs. Volley) but both have many password copies. To understand why, we modified the apps and analyzed the impacts of our changes.

#### Problem #5: Use and Propagation of String Passwords
We focused on the use of `String` passwords. All sample apps stored passwords as Java strings using `getText().toString()`. To measure the effect, we deleted all uses of `String` in sample app 1 and sent an empty password. This change eliminated more than half of the in-memory passwords, demonstrating that `String` usage is a major source of problems.

#### Problem #6: Lack of Manual TextView Cleanup
TextView holds the password in its buffer after it’s no longer needed. We modified sample app 1a to call the `clear()` method in the TextView buffer right after login. This showed improvement, but almost all apps, including SystemUI, did not clean up the TextView buffer. Keepass2Android was the only exception.

#### Problem #7: Lack of App-level Zeroization
Even if developers use `char` arrays instead of `String` objects, they need to manually clean up the passwords, e.g., by zeroing out the `char` arrays. This means that even with a stronger TextView implementation, developers may still accidentally hold passwords in memory.

### Challenge-Response Authentication Apps
These apps generate HMAC values from user passwords and use them as secrets for authentication. We analyzed an app from a popular security guidebook (sample app 3). Despite avoiding password transmission, it still had similar issues, mainly due to the use of `String` for passwords.

### OAuth Authentication Apps
We considered apps that provide OAuth services, focusing on Facebook OAuth. Sample app 4, implemented using the Facebook OAuth library, still held several password copies in memory. Since the Facebook OAuth library and app are not open-source, we could not perform a detailed code analysis. However, our instrumentation revealed that Facebook uses standard `TextView` and `toString()` methods, leading to password retention.

### Password Managers
We analyzed two popular open-source password managers, Keepass2Android and PasswdSafe. Keepass2Android successfully cleared all passwords from memory using a combination of techniques, such as converting passwords to `char` arrays, setting TextView content to an empty string, and invoking the garbage collector. However, it still obtains passwords as `String` objects before conversion, leading to immutable passwords in memory.

### Summary of the Problems
Our analysis revealed seven main causes of password retention in many apps and the Android framework itself. Some root causes are inter-related, such as the use of `String` passwords and the lack of secure API. To solve the password retention issue, a comprehensive solution addressing all identified root causes is necessary.

### Our Solution
We developed a series of changes to the AOSP framework to address the observed problems.

#### SecureTextView: Fixing the Android Framework
We designed a patched version of `TextView` called `SecureTextView` to handle passwords differently from regular text. This addresses the root cause of retention in the Android framework.