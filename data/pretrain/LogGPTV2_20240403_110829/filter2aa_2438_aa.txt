# Defense by Numbers: Creating Challenges for Script Kiddies and Scanner Monkeys

## Introduction
- **Speaker:** @ChrisJohnRiley
- **Quote:** "The wisest man is he who knows that he knows nothing." - Socrates, *Apology*, 23A

### TL;DR
- **Goals of the Talk:**
  1. Describe the defensive uses of HTTP status codes.
  2. Explain the what, why, and how.
  3. Outline the goals.
  4. Bring it all together.
  5. Provide a review.

## 1. What are HTTP Status Codes?

HTTP status codes seem like a small detail, but they can have a big impact. This talk will cover:
- Numbers
- Bad jokes
- Traces of peanuts
- More numbers

### HTTP Status Codes Overview
- **Part of RFC 2616 (HTTP/1.1)**
- **5 Main Classes of Response:**
  - 1XX: Informational
  - 2XX: Success
  - 3XX: Redirection
  - 4XX: Client Error
  - 5XX: Server Error

### Proposed 7XX Codes
- **Examples:**
  - 701: Meh
  - 719: I am not a teapot
  - 721: Known unknowns
  - 722: Unknown unknowns
  - 732: Fucking Unicode
- **Reference:** [https://github.com/joho/7XX-rfc](https://github.com/joho/7XX-rfc)

### Basics (The Boring Theory Bit)
- **1XX: Informational**
  - Indicates that the request has been received and processing is ongoing.
  - Examples:
    - 100: Continue
    - 101: Switching Protocols
    - 102: Processing (WebDAV RFC 2518)

- **2XX: Success**
  - Indicates that the request has been successfully received, understood, and accepted.
  - Examples:
    - 200: OK
    - 201: Created
    - 202: Accepted
    - 203: Non-Authoritative Information
    - 204: No Content
    - 205: Reset Content
    - 206: Partial Content
    - 207: Multi-Status (WebDAV RFC 4918)

- **3XX: Redirection**
  - Indicates that further action is required to complete the request.
  - Examples:
    - 300: Multiple Choices
    - 301: Moved Permanently
    - 302: Found / Moved Temporarily
    - 303: See Other
    - 304: Not Modified
    - 305: Use Proxy
    - 306: Switch Proxy
    - 307: Temporary Redirect
    - 308: Permanent Redirect

- **4XX: Client Error**
  - Indicates that the client made an error.
  - Examples:
    - 400: Bad Request
    - 401: Unauthorized
    - 402: Payment Required
    - 403: Forbidden
    - 404: Not Found
    - 405: Method Not Allowed
    - 406: Not Acceptable
    - 407: Proxy Authentication Required
    - 408: Request Timeout
    - 409: Conflict
    - 410: Gone
    - 411: Length Required
    - 412: Precondition Failed
    - 413: Request Entity Too Large
    - 414: Request-URI Too Long
    - 415: Unsupported Media Type
    - 416: Requested Range Not Satisfiable
    - 417: Expectation Failed
    - 418: I'm a Teapot (WebDAV RFC 2324)
    - 422: Unprocessable Entity (RFC 4918)
    - 423: Locked (RFC 4918)
    - 424: Failed Dependency (RFC 4918)
    - 426: Upgrade Required (RFC 2817)

- **5XX: Server Error**
  - Indicates that the server made an error.
  - Examples:
    - 500: Internal Server Error
    - 501: Not Implemented
    - 502: Bad Gateway
    - 503: Service Unavailable
    - 504: Gateway Timeout
    - 505: HTTP Version Not Supported
    - 506: Variant Also Negotiates (RFC 2295)
    - 507: Insufficient Storage (WebDAV RFC 4918)
    - 508: Loop Detected (WebDAV RFC 5842)
    - 509: Bandwidth Limit Exceeded (Apache extension)
    - 510: Not Extended (RFC 2274)

## 2. Why Use HTTP Status Codes Defensively?

The idea started as a simple one, but it evolved into a way to create challenges for scanners and script kiddies.

### Goals:
- **Increase Attacker Costs**
- **Waste Attacker Time**

### Prior Art:
- **"When the Tables Turn" (2004)**
  - Authors: Roelof Temmingh, Haroon Meer, Charl van der Walt
  - Reference: [http://slideshare.net/sensepost/strikeback](http://slideshare.net/sensepost/strikeback)

- **"Stopping Automated Attack Tools" (2006)**
  - Author: Gunter Ollmann
  - Reference: [http://www.technicalinfo.net/papers/StoppingAutomatedAttackTools.html](http://www.technicalinfo.net/papers/StoppingAutomatedAttackTools.html)

- **mod-security Mailing List (2006)**
  - Example: Using status code 503 with Retry-After header
  - Author: Ryan Barnett
  - Reference: [http://bb10.com/apache-mod-security-user/2006-12/msg00042.html](http://bb10.com/apache-mod-security-user/2006-12/msg00042.html)

## 3. How to Implement Defensive HTTP Status Codes

### Browser Flexibility
- Browsers need to be flexible, which leads to interpretation and potential misuse.
- **RFCS:** They are more guidelines than strict rules.

### Testing
- **Research Focus:**
  - Internet Explorer
  - Chrome/Chromium
  - Firefox

- **Tools:**
  - **MITMproxy/MITMdump:**
    - Python-based
    - Simple to set up as a proxy or reverse proxy
    - Script-based actions
  - **PHP:**
    - Ability to set response codes
    - Must be at the top of the PHP code
    - Can be added to `php.ini` with `auto-prepend-file = /full/path`

By using these tools and techniques, you can effectively use HTTP status codes to create challenges for script kiddies and scanner monkeys, increasing their costs and wasting their time.