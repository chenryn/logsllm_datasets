real users. Given that packet-level traces of residential users
are not publicly available, we use traces of wireless activ-
ity in the UCSD Computer Science building from [27] (see
Sec. 5.1 for a detailed description). We assume for each
AP in the building a backhaul bandwidth of 6 Mbps, which
is the average downlink speed of the 10K residential ADSL
subscribers presented in Fig. 2. We then compute the sum of
inter-packet gaps in second-long bins (i.e., 0-1 s, 1-2 s, etc.)
for the peak hour (16-17 h), and show them in Fig. 4. We
can see that for more than 80% of the time the inter-packet
gaps are lower than 60 s, despite the utilization being as low
as 1%. This continuous light traﬃc eﬀectively condemns the
SoI technique to a maximum saving of only 20%. Our re-
sults in Fig. 4 are strikingly consistent with the distribution
of the inter-packet gaps of the non-publicly available dataset
of residential traﬃc analyzed in Fig. 3 of [8]. In addition, the
UCSD dataset matches very well with the aggregate utiliza-
tion levels from 10K ADSL customers presented in Fig. 2.
Therefore, we will use it later for our evaluation.
2.5 Summary
Access networks involve a huge number of devices that
are particularly ineﬃcient in terms of per bit energy con-
sumption. Therefore it is not surprising that they end up
consuming a very high percentage (70-80% [16]) of the to-
tal energy spent in networks costing ISPs millions per year.
Powering oﬀ access networks is inhibited by the lack of alter-
native paths which implies that the single connecting path
can only be put to sleep when there is no user traﬃc. This,
however, is seldom possible due to continuous light traﬃc
that does not permit SoI functionalities to be eﬀective.
3. GREENING THE USER PART
In this section, we develop a simple technique for aggre-
gating the traﬃc of multiple users to a suﬃcient subset of
gateways letting the rest sleep. Aggregation is the key to
solving the lack of alternative paths and continuous traﬃc
340e
m
i
t
e
d
l
i
f
o
%
20
10
0
1
−
0
2
−
1
3
−
2
4
−
3
5
−
4
6
−
5
7
−
6
8
−
7
9
−
8
0
1
−
9
1
1
−
0
1
2
1
−
1
1
3
1
−
2
1
4
1
−
3
1
5
1
−
4
1
6
1
−
5
1
7
1
−
6
1
8
1
−
7
1
9
1
−
8
1
0
2
−
9
1
1
2
−
0
2
0
4
−
1
2
0
6
−
0
4
0
6
>
Second−long bins for inter−packet gaps [s]
Figure 4: Histogram of the fraction of the idle time made
up of inter-packet gaps of diﬀerent size for the peak hour
in Fig. 3.
problems discussed before. Currently, the simplest form of
aggregation is via the wireless channel, taking advantage of
the overlap of coverage area from multiple WiFi gateways in
typical urban areas. In the future, femtocells or other wire-
less technologies can be used for the same purpose. Next,
we formulate the problem and then present the design and
implementation of a practical and eﬃcient algorithm.
3.1 Formulation
Let U denote a set of users and let di(t) denote the traf-
ﬁc demand of user i ∈ U at time slot t. Let also G be a
set of gateways and let cj denote the capacity of gateway
j ∈ G, i.e., the speed of its broadband connection to the
Internet. Additionally, with wi,j we denote the maximum
available bandwidth between user i and gateway j due to the
physical characteristics of the wireless channel. The parame-
ters backup (a nonnegative integer) and q ∈ (0, 1] denote the
minimal number of backup gateways each user must connect
to in order to do smooth hand-oﬀs (more on this shortly) and
the maximum allowed utilization of a gateway for protecting
the QoS of the local user, respectively.
To formulate the problem of minimizing the number of
online gateways we deﬁne oj , a binary decision variable that
becomes 1 iﬀ gateway j is online. We also deﬁne the vari-
ables aij that becomes 1 iﬀ i’s traﬃc is “assigned” (routed)
to gateway j. Our optimization problem at time slot t can
now be stated as the following binary integer program:
minimize
oj ,ai,j
oj
X
j∈G
(1)
subject to X
aij ≥ 1 + backup,
∀i ∈ U
j∈G
di · aij ≤ wij,
X
∀i ∈ U, j ∈ G
di · aij ≤ q · cj · oj ,
∀j ∈ G
i∈U
It is easy to see that the decision version of the above
problem is NP-complete (reduction from SET-COVER to a
version of our problem with no backups and inﬁnite capacity
at gateways). Next, we describe BH2, a simple distributed
heuristic algorithm that we developed for the above prob-
lem. BH2 runs on user terminals permitting them to direct
traﬃc to remote gateways in range under certain conditions.
The operation of the algorithm can be summarized easily by
looking at the following two cases:
User connected to its home gateway: If the load of
the home gateway falls below a low threshold, the algorithm
looks for available remote gateways in range that are both
not heavily loaded (i.e., their load is below a high threshold),
and not candidates for going to sleep (their load is above
the low threshold).
If the number of gateways that meet
the above conditions is greater than the minimum number
of backup, the algorithm selects one randomly among them
with a probability proportional to their load, and redirects
its traﬃc there. The randomness in the selection is intro-
duced to prevent synchronization. The use of backup gate-
ways is introduced to allow users to perform smooth hand-
oﬀs if they need to leave the remote gateway.
User connected to a remote gateway: Similar to when
it is at its home, if the load of the remote gateway falls below
the low threshold, the algorithm looks for available gateways
in range whose load is below the high threshold and above
the low threshold. If the number of candidate gateways is
enough to meet the backup requirement, it selects among
them randomly with probability proportional to their load.
If the minimum number of backup gateways cannot be met,
or if the load of the assigned remote gateway increases above
the high threshold, the algorithm returns the user to its home
gateway, waking it up if necessary.
3.2 BH2: Implementation
BH2 needs the following to be in place: (i) gateways need
to implement some form of SoI that puts them to sleep after
a period of traﬃc absence; (ii) gateways need to wake up
when traﬃc reappears; and (iii) terminal devices running
BH2 need to be able to estimate the load of all gateways in
range in order to compare with the above mentioned thresh-
olds and also be able to route traﬃc through the assigned
gateway — all irrespective of the channel in which the gate-
ways operate.
For (i), there already exist several implementations in
[8]). Regarding (ii) technologies
the literature (see e.g.,
such as Wake-on-WirelessLAN (WoWLAN) [28] or Remote
Wake Technology (RWT) [29] are readily available in popu-
lar hardware and operating systems. Note that to wake up
a system using WoWLAN or RWT, it is necessary to know
In BH2 users can
the MAC address of the target device.
only wake their own home gateway, so knowing the MAC
address is not a problem.
Finally, for (iii) we use the methods described in [30] and
[31], that allow a user to be simultaneously connected to
all the gateways in range. Brieﬂy, the user’s wireless card
is virtualized, i.e., it appears as independent virtual cards
associated to each available gateway. The solution then is
to rely on the standard 802.11 Power Saving (PS) mode
to implement a Time-Division Multiple Access (TDMA) by
sequentially cycling through the gateways in a round-robin
fashion devoting enough time to the selected gateway to col-
lect the bandwidth from its backhaul, and a small amount
of time to the other gateways in order to be able to estimate
their load. The load estimation employs a trick that relies
on the fact that every 802.11 frame sent by a gateway car-
ries a MAC Sequence Number (SN) in the header [30]. The
user can listen periodically to the traﬃc sent by the mon-
itored gateways and store its SNs. By counting the SNs,
the amount of packets traversing the gateway backhaul, and
hence its load, can be estimated.
3.3 Discussion
We implemented BH2 on Linux laptops by only modifying
the open source wireless card drivers, without requiring any
explicit communication with gateways, or other terminals
(see Sec. 5.3). To realize, however, the beneﬁts of BH2 a
gateway needs to allow remote terminals to connect to it.
341k-switches
DSLAM
modems
F
D
H
m
o
r
f
s
e
n
i
l
k
×
m
1
k
1
k
1
k
1
2
m
1 2
m
1
2
line 
k
cards
24 modems/line card, modem online probability 0.50
24 modems/line card, modem online probability 0.25
2−switch
4−switch
8−switch
1
0.8
0.6
0.4
0.2
i
l
g
n
p
e
e
s
f
o
y
t
i
l
i
b
a
b
o
r
p
2−switch
4−switch
8−switch
1
0.8
0.6
0.4
0.2
i
l
g
n
p
e
e
s
f
o
y
t
i
l
i
b
a
b
o
r
p
Figure 5: [left] k-switches and connection to DSLAM. [middle and right] Probability of line card 1,2,. . . , k sleeping on
a batch of k line cards connected through m k-switches. Each line card has m = 24 modems and each modem is active
with probability p = 0.5 (middle) or p = 0.25 (right).
0
1
2
3
5
4
line card
6
7
8
0
1
2
3
5
4
line card
6
7
8
In our testbed this is not an issue, but on a real deployment
it implies the cooperation of the owner of the gateway.
The wide adoption of such technologies is clearly a non
trivial matter since it involves incentive, security, and pri-
vacy issues. Our implementation surely does not solve such
issues since it was developed merely for demonstrating the
technical feasibility of BH2 and to permit computing energy
gains in a real setting. However our hope is that due to
the important energy gains that we report, users and ISPs