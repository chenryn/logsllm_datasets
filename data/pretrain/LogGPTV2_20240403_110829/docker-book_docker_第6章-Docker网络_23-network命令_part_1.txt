# network命令
本文提供可用于与Docker网络及与网络中容器进行交互的network子命令的示例。这些命令可通过Docker Engine CLI获得。 这些命令是：
- `docker network create`
- `docker network connect`
- `docker network ls`
- `docker network rm`
- `docker network disconnect`
- `docker network inspect`
虽然不是必需的，但在尝试本节中的示例之前，先阅读 [了解Docker网络](https://docs.docker.com/engine/userguide/networking/) 更佳。 示例使用默认`bridge` 网络以便您可以立即尝试。要实验`overlay`网络，请参阅 [多主机网络入门指南](https://docs.docker.com/engine/userguide/networking/get-started-overlay/) 。
## 创建网络
Docker Engine在安装时自动创建`bridge` 网络。 该网络对应于Engine传统依赖的`docker0` 网桥。除该网络外，也可创建自己的`bridge` 或`overlay` 网络。
`bridge` 网络驻留在运行Docker Engine实例的单个主机上。 `overlay` 网络可跨越运行Docker Engine的多个主机。 如果您运行`docker network create` 并仅提供网络名称，它将为您创建一个桥接网络。
```
$ docker network create simple-network
69568e6336d8c96bbf57869030919f7c69524f71183b44d80948bd3927c87f6a
$ docker network inspect simple-network
[
    {
        "Name": "simple-network",
        "Id": "69568e6336d8c96bbf57869030919f7c69524f71183b44d80948bd3927c87f6a",
        "Scope": "local",
        "Driver": "bridge",
        "IPAM": {
            "Driver": "default",
            "Config": [
                {
                    "Subnet": "172.22.0.0/16",
                    "Gateway": "172.22.0.1"
                }
            ]
        },
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
```
与`bridge` 网络不同， `overlay` 网络需要一些预制条件才能创建——
- 访问key-value存储。 引擎支持Consul，Etcd和ZooKeeper（分布式存储）key-value存储。
- 与key-value存储连接的主机集群。
- 在swarm中的每个主机上正确配置的`Docker daemon` 。
支持`overlay` 网络的`dockerd` 选项有：
- `--cluster-store`
- `--cluster-store-opt`
- `--cluster-advertise`
在创建网络时，Docker引擎默认会为网络创建一个不重叠的子网。 您可以覆盖此默认值，并使用`--subnet` 选项直接指定子网。 对于`bridge ` 网络，只可指定一个子网。 `overlay` 网络支持多个子网。
> **注意** ：强烈建议在创建网络时使用`--subnet` 选项。 如果未指定`--subnet` 则Docker daemon会自动为网络选择并分配子网，这可能会导致与您基础结构中的另一个子网（该子网不受`--subnet` 管理）重叠。 当容器连接到该网络时，这种重叠可能导致连接问题或故障。
除`--subnet` 选项以外，您还可以指定`--gateway` ， `--ip-range` `--gateway` `--ip-range`和`--aux-address`选项。
```
$ docker network create -d overlay \
  --subnet=192.168.0.0/16 \
  --subnet=192.170.0.0/16 \
  --gateway=192.168.0.100 \
  --gateway=192.170.0.100 \
  --ip-range=192.168.1.0/24 \
  --aux-address="my-router=192.168.1.5" --aux-address="my-switch=192.168.1.6" \
  --aux-address="my-printer=192.170.1.5" --aux-address="my-nas=192.170.1.6" \
  my-multihost-network
```
确保您的子网不重叠。 如果重叠，那么网络将会创建失败，Docker Engine返回错误。
创建自定义网络时，您可以向驱动传递其他选项。 `bridge` 驱动程序接受以下选项：
| Option                                   | Equivalent  | Description        |
| ---------------------------------------- | ----------- | ------------------ |
| `com.docker.network.bridge.name`         | -           | 创建Linux网桥时要使用的网桥名称 |
| `com.docker.network.bridge.enable_ip_masquerade` | `--ip-masq` | 启用IP伪装             |
| `com.docker.network.bridge.enable_icc`   | `--icc`     | 启用或禁用跨容器连接         |
| `com.docker.network.bridge.host_binding_ipv4` | `--ip`      | 绑定容器端口时的默认IP       |
| `com.docker.network.driver.mtu`          | `--mtu`     | 设置容器网络MTU          |
`overlay` 驱动也支持`com.docker.network.driver.mtu` 选项。
以下参数可以传递给任何网络驱动的`docker network create` 。
| Argument     | Equivalent | Description |
| ------------ | ---------- | ----------- |
| `--internal` | -          | 限制对网络的外部访问  |
| `--ipv6`     | `--ipv6`   | 启用IPv6网络    |
以下示例使用`-o` 选项，在绑定端口时绑定到指定的IP地址，然后使用`docker network inspect` 来检查网络，最后将新容器attach到新网络。
```
$ docker network create -o "com.docker.network.bridge.host_binding_ipv4"="172.23.0.1" my-network
b1a086897963e6a2e7fc6868962e55e746bee8ad0c97b54a5831054b5f62672a
$ docker network inspect my-network
[
    {
        "Name": "my-network",
        "Id": "b1a086897963e6a2e7fc6868962e55e746bee8ad0c97b54a5831054b5f62672a",
        "Scope": "local",
        "Driver": "bridge",
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.23.0.0/16",
                    "Gateway": "172.23.0.1"
                }
            ]
        },
        "Containers": {},
        "Options": {
            "com.docker.network.bridge.host_binding_ipv4": "172.23.0.1"
        },
        "Labels": {}
    }
]
$ docker run -d -P --name redis --network my-network redis
bafb0c808c53104b2c90346f284bda33a69beadcab4fc83ab8f2c5a4410cd129
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                        NAMES
bafb0c808c53        redis               "/entrypoint.sh redis"   4 seconds ago       Up 3 seconds        172.23.0.1:32770->6379/tcp   redis
```
## 连接容器
您可以将一个现有容器连接到一个或多个网络。 容器可连接到使用不同网络驱动的网络。 一旦连接，容器即可使用另一个容器的IP地址或名称进行通信。
对于支持多主机连接的`overlay` 网络或自定义插件，不同主机上的容器，只要连接到同一multi-host network多主机网络，也可以这种方式进行通信。
此示例使用六个容器，并指示您根据需要创建它们。
### 基本容器网络示例
1. 首先，创建并运行两个容器， `container1`和`container2` ：
   ```
   $ docker run -itd --name=container1 busybox
   18c062ef45ac0c026ee48a83afa39d25635ee5f02b58de4abc8f467bcaa28731
   $ docker run -itd --name=container2 busybox
   498eaaaf328e1018042c04b2de04036fc04719a6e39a097a4f4866043a2c2152
   ```
2. 创建一个隔离的`bridge` 网络进行测试。
   ```
   $ docker network create -d bridge --subnet 172.25.0.0/16 isolated_nw
   06a62f1c73c4e3107c0f555b7a5f163309827bfbbf999840166065a8f35455a8
   ```
3. 将`container2` 连接到网络，然后`inspect`网络以验证连接：
   ```
   $ docker network connect isolated_nw container2
   $ docker network inspect isolated_nw
   [
       {
           "Name": "isolated_nw",
           "Id": "06a62f1c73c4e3107c0f555b7a5f163309827bfbbf999840166065a8f35455a8",
           "Scope": "local",
           "Driver": "bridge",
           "IPAM": {
               "Driver": "default",
               "Config": [
                   {
                       "Subnet": "172.25.0.0/16",
                       "Gateway": "172.25.0.1/16"
                   }
               ]
           },
           "Containers": {
               "90e1f3ec71caf82ae776a827e0712a68a110a3f175954e5bd4222fd142ac9428": {
                   "Name": "container2",
                   "EndpointID": "11cedac1810e864d6b1589d92da12af66203879ab89f4ccd8c8fdaa9b1c48b1d",
                   "MacAddress": "02:42:ac:19:00:02",
                   "IPv4Address": "172.25.0.2/16",
                   "IPv6Address": ""
               }
           },
           "Options": {}
       }
   ]
   ```
   请注意， `container2` 自动分配了一个IP地址。 因为在创建网络时指定了`--subnet` 选项，所以IP地址会从该子网选择。
   **作为提醒**， `container1` 仅连接到默认`bridge` 。
4. 启动第三个容器，但这次使用`--ip` 标志分配一个IP地址，并使用 `docker run`命令的`--network`选项将其连接到`--isolated_nw`网络：
   ```
   $ docker run --network=isolated_nw --ip=172.25.3.3 -itd --name=container3 busybox
   467a7863c3f0277ef8e661b38427737f28099b61fa55622d6c30fb288d88c551
   ```
   只要您为容器指定的IP地址是如上子网的一部分，那就可使用`--ip` 或`--ip6` 标志将IPv4或IPv6地址分配给容器，将其连接到以上网络。 当您在使用用户自定义的网络时以这种方式指定IP地址时，配置将作为容器配置的一部分进行保留，并在容器重新加载时进行应用。 使用非用户自定义网络时，分配的IP地址将被保留，因为不保证Docker daemon重启时容器的子网不会改变，除非您使用用户定义的网络。【这一段官方文档是不是有问题？？？】
5. 检查`container3` 所使用的网络资源。 简洁起见，截断以下输出。
   ```
   $ docker inspect --format=''  container3
   {"isolated_nw":
     {"IPAMConfig":
       {
         "IPv4Address":"172.25.3.3"},
         "NetworkID":"1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b",
         "EndpointID":"dffc7ec2915af58cc827d995e6ebdc897342be0420123277103c40ae35579103",
         "Gateway":"172.25.0.1",
         "IPAddress":"172.25.3.3",
         "IPPrefixLen":16,