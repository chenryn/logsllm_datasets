### 搜索命令函数

| 函数 | 描述 | 示例 |
| --- | --- | --- |
| `mvsum(X,...)` | 接受至少一个数值类型的多值字段或单值字段作为参数，返回所有参数的总和。 | `... \| eval v = mvsum(multiv, 2)` |
| `mvavg(X,...)` | 接受至少一个数值类型的多值字段或单值字段作为参数，返回所有参数的平均值。每个多值字段中的值都会增加分母。 | `... \| eval v = mvavg(multiv, 2)` |
| `mvappend(X,...)` | 接受任意数量的参数，这些参数可以是字符串、多值字段或单值字段。 | `... \| eval v = mvappend(initv, "middle")` |
| `mvcount(X)` | 返回多值字段X的值个数。如果X是单值字段，则返回1；其他情况返回0。 | `... \| eval c = mvcount(mvfield)` |
| `mvdedup(X)` | 接受一个多值字段X，返回去重后的多值字段。 | `... \| eval v = mvdedup(mvfield)` |
| `mvfilter(X, filterexpr)` | 对多值字段X进行过滤，仅保留满足`filterexpr`条件的值。 | `... \| eval v = mvfilter(mv, _x == "1a")` |
| `mvfind(X, V)` | 在多值字段X中查找值V，找到则返回对应的索引，否则返回-1。 | `... \| eval n = mvfind(mymvfield, "err")` |
| `mvindex(X, start[, end])` | 返回多值字段X中从索引start到end（不包括）的子数组。如果没有指定end，则返回索引为start的元素。 | `... \| eval v = mvindex(mv, 10, -1)` |
| `mvjoin(X, DELIMITER)` | 使用分隔符DELIMITER将多值字段X的值连接成一个字符串。 | `... \| eval v = mvjoin(mv, ", ")` |
| `mvmap(X, mapexpr)` | 将多值字段X中的每个值通过表达式`mapexpr`转换，并返回新的多值字段。 | `... \| eval x = mvmap(X, tolong(_x) + 2)`<br>设X = ["1", "3", "4"]<br>则x = [3, 5, 6] |
| `mvdelta(X)` | 计算多值字段X中相邻值之间的差值，并返回一个新的多值字段。 | `... \| eval x = mvdelta(X)`<br>设X = ["1", "3", "4"]<br>则x = [2, 1] |
| `mvrange(X, Y[, Z])` | 生成从X到Y（不包括）的多值字段，步长为Z（默认为1）。 | `... \| eval mv = mvrange(1, 8, 2)`<br>返回: 1, 3, 5, 7 |
| `mvsort(X)` | 对多值字段X进行排序。 | `... \| eval s = mvsort(mv)` |
| `mvszip(X, Y[,"Z"])` | 将多值字段X和Y中的对应元素用分隔符Z连接起来，形成新的多值字段。 | `X = [1, 3, 4, 7]`<br>`Y = [2, 5, 8]`<br>`mvszip(X, Y) = ["1,2", "3,5", "4,8"]` |
| `split(S, SEP)` | 使用分隔符SEP将字符串S拆分成多值字段。如果SEP为空字符串，则S将被拆分为单字组成的多值字段。 | `... \| eval v = split(":abc::edf: ", ":")`<br>返回: ["", "abc", "", "edf", " "] |
| `now()` | 返回当前时间的毫秒数（自1970-01-01:00:00:00以来）。 | `... \| eval current_time = now()` |
| `parsedate(X, Y[, Z])` | 解析日期时间字符串X为Unix时间戳。Y为日期格式说明，Z为可选的Locale。 | `... \| eval ts = parsedate("28/04/2016:12:01:01", "dd/MM/yyyy:HH:mm:ss")`<br>`... \| eval ts = parsedate("28/四月/2016", "dd/MMM/yyyy", "zh")` |
| `printf(FORMAT, [X...])` | 格式化字符串。 | `... \| eval str = printf("%.1fMB", rate)`<br>`... \| eval str = printf("%s ⇒ %s", "aa", "bb")` |
| `relative_time(X, Y)` | 计算基于时间戳X的相对时间Y。 | `... \| eval ts = relative_time(timestamp, "-1d/d")` |
| `round(X [,Y])` | 将数值X四舍五入到小数点后Y位（默认为0）。 | `... \| eval r = round(3.14)`<br>`... \| eval r = round(3.1415, 3)` |
| `substring(X, Y[, Z])` | 返回字符串X从索引Y到Z（不包括）的子字符串。如果不指定Z，则返回从Y开始的剩余部分。 | `... \| eval subs = substring("abcedfg", 1, 4)`<br>返回: "bce" |
| `todouble(X)` | 将字符串或数值X转换为双精度浮点数。 | `... \| eval value = todouble("123.1")`<br>返回: 123.1 |
| `tonumber(numStr[, base])` | 将数字或字符串numStr转换为数值类型，支持2-36进制转换为10进制（默认为10进制）。 | `... \| eval num = tonumber("101", 2)`<br>返回: 5 |
| `tolong(X)` | 将字符串或数值X转换为long类型。 | `... \| eval value = tolong("123")`<br>返回: 123 |
| `tostring(X)` | 将字符串或数值X转换为字符串。 | `... \| eval strv = tostring(123.1)`<br>返回: "123.1" |
| `tojson(X)` | 将任意类型的X转换为JSON字符串。 | `... \| eval json_str = tojson([1, 2, 3])`<br>返回: "[1,2,3]" |
| `trim(X)` | 去除字符串X前后的空白字符。 | `... \| eval strv = trim("  bcd ef   \t")`<br>返回: "bcd ef" |
| `ltrim(X[, Y])` | 去除字符串X左边的空白字符，或去除左边在Y中出现过的字符。 | `... \| eval strv = ltrim("rizhiyi", "irhz")`<br>返回: "yi" |
| `rtrim(X[, Y])` | 去除字符串X右边的空白字符，或去除右边在Y中出现过的字符。 | `... \| eval strv = rtrim("rizhiyi", "irhz")`<br>返回: "rizhiy" |
| `replace(str, regex, replacement)` | 用replacement替换字符串str中每次出现的regex。 | `... \| eval n = replace(date, "^(\d{1,2})/(\d{1,2})/", "\2/\1/")`<br>输入: "1/14/2020"<br>返回: "14/1/2020" |
| `typeof(X)` | 获取字段X的数据类型。 | `... \| eval a_type = typeof(apache.method)` |
| `upper(X)` | 将字符串X转换为大写。 | `... \| eval strv = upper("Get")`<br>返回: "GET" |
| `urlencode(X)` | 对字符串X进行URL编码。 | `... \| eval url = urlencode(url)` |
| `urldecode(X)` | 对字符串X进行URL解码。 | `... \| eval url = urldecode(url)` |
| `base64encode(X)` | 对字符串X进行Base64编码。 | `... \| eval base64 = base64encode(base64)` |
| `base64decode(X)` | 对字符串X进行Base64解码。 | `... \| eval base64 = base64decode(base64)` |
| `unicodeencode(X)` | 对字符串X进行Unicode编码。 | `... \| eval unicode = unicodeencode(unicode)` |
| `unicodedecode(X)` | 对字符串X进行Unicode解码。 | `... \| eval unicode = unicodedecode(unicode)` |
| `md5(X)` | 对字段X进行MD5哈希。 | `... \| eval a = md5(X)` |
| `sha1(X)` | 对字段X进行SHA1哈希。 | `... \| eval a = sha1(X)` |
| `sha256(X)` | 对字段X进行SHA256哈希。 | `... \| eval a = sha256(X)` |
| `sha512(X)` | 对字段X进行SHA512哈希。 | `... \| eval a = sha512(X)` |
| `ip2long(X)` | 将IP地址转换为long类型。 | `... \| eval ipNum = ip2long(X)` |
| `long2ip(X)` | 将long类型转换为IP地址。 | `... \| eval ip = long2ip(X)` |
| `cidr2long(X)` | 将CIDR路由转换为两个long类型的IP起止数字。 | `... \| eval ip_range = cidr2long(X)` |
| `is_valid_mac(X)` | 判断是否为有效的MAC地址。 | `... \| eval is_valid_mac = is_valid_mac(X)` |
| `is_valid_ip(X)` | 判断是否为有效的IP地址。 | `... \| eval is_valid_ip = is_valid_ip(X)` |
| `is_valid_mask(X)` | 判断是否为有效的子网掩码，在[0, 32]之间。 | `... \| eval is_valid_mask = is_valid_mask(X)` |
| `is_valid_cidr(X)` | 判断是否为有效的CIDR地址。 | `... \| eval is_valid_cidr = is_valid_cidr(X)` |
| `expand_ip_range_to_cidr(X, Y [,Z])` | 将两个IP起止地址转换为CIDR地址。 | `... \| eval cidr = expand_ip_range_to_cidr("192.168.1.1", "192.168.1.15")`<br>`... \| eval cidr = expand_ip_range_to_cidr("192.168.1.1", "192.168.1.15", true)` |
| `like(X, Y)` | 判断字符串X是否与模式Y匹配。 | `... \| eval is_like = like(X, "a%bc")` |
| `isnotnull(X)` | 判断字段X是否不为null。 | `... \| eval is_not_null = isnotnull(X)` |
| `isblank(X)` | 判断字段X是否为null或仅包含空白字符。 | `... \| eval is_blank = isblank(X)` |
| `islong(X)` | 判断字段X是否为long类型。 | `... \| eval is_long = islong(X)` |
| `isbool(X)` | 判断字段X是否为布尔类型。 | `... \| eval is_bool = isbool(X)` |

希望这个表格更加清晰和专业！如果有任何进一步的修改需求，请告诉我。