关闭读和写方向的网络连接。关闭网络连接中的写方向的连接将导致server程序收到一个文件
（end-of-le）结束的信号。关闭网络连接中读方向的连接将导致后台goroutine的io.Copy函
数调用返回一个“read from closed connection”（“从关闭的连接读”）类似的错误，因此我们临
时移除了错误日志语句；在练习8.3将会提供一个更好的解决方案。（需要注意的是go语句调
用了一个函数字面量，这Go语言中启动goroutine常用的形式。）
在后台goroutine返回之前，它先打印一个日志信息，然后向done对应的channel发送一个值。
主goroutine在退出前先等待从done对应的channel接收一个值。因此，总是可以在程序退出前
正确输出“done”消息。
基于channels发送消息有两个重要方面。首先每个消息都有一个值，但是有时候通讯的事实
和发生的时刻也同样重要。当我们更希望强调通讯发生的时刻时，我们将它称为消息事件。
有些消息事件并不携带额外的信息，它仅仅是用作两个goroutine之间的同步，这时候我们可
以用 空结构体作为channels元素的类型，虽然也可以使用bool或int类型实现同样的
struct{}
功能， 语句也比 更短。
done <- 1 done <- struct{}{}
练习 8.3： 在netcat3例子中，conn虽然是一个interface类型的值，但是其底层真实类型
是 ，代表一个TCP连接。一个TCP连接有读和写两个部分，可以使用
*net.TCPConn
CloseRead和CloseWrite方法分别关闭它们。修改netcat3的主goroutine代码，只关闭网络连
接中写的部分，这样的话后台goroutine可以在标准输入被关闭后继续打印从reverb1服务器传
回的数据。（要在reverb2服务器也完成同样的功能是比较困难的；参考练习 8.4。）
8.4.2. 串联的Channels（Pipeline）
Channels也可以用于将多个goroutine连接在一起，一个Channel的输出作为下一个Channel的
输入。这种串联的Channels就是所谓的管道（pipeline）。下面的程序用两个channels将三个
goroutine串联起来，如图8.1所示。
Channels 302
gopl
第一个goroutine是一个计数器，用于生成0、1、2、……形式的整数序列，然后通过channel
将该整数序列发送给第二个goroutine；第二个goroutine是一个求平方的程序，对收到的每个
整数求平方，然后将平方后的结果通过第二个channel发送给第三个goroutine；第三个
goroutine是一个打印程序，打印收到的每个整数。为了保持例子清晰，我们有意选择了非常
简单的函数，当然三个goroutine的计算很简单，在现实中确实没有必要为如此简单的运算构
建三个goroutine。
gopl.io/ch8/pipeline1
func main() {
naturals := make(chan int)
squares := make(chan int)
// Counter
go func() {
for x := 0; ; x++ {
naturals <- x
}
}()
// Squarer
go func() {
for {
x := <-naturals
squares <- x * x
}
}()
// Printer (in main goroutine)
for {
fmt.Println(<-squares)
}
}
如您所料，上面的程序将生成0、1、4、9、……形式的无穷数列。像这样的串联Channels的
管道（Pipelines）可以用在需要长时间运行的服务中，每个长时间运行的goroutine可能会包
含一个死循环，在不同goroutine的死循环内部使用串联的Channels来通信。但是，如果我们
希望通过Channels只发送有限的数列该如何处理呢？
Channels 303
gopl
如果发送者知道，没有更多的值需要发送到channel的话，那么让接收者也能及时知道没有多
余的值可接收将是有用的，因为接收者可以停止不必要的接收等待。这可以通过内置的close
函数来关闭channel实现：
close(naturals)
当一个channel被关闭后，再向该channel发送数据将导致panic异常。当一个被关闭的channel
中已经发送的数据都被成功接收后，后续的接收操作将不再阻塞，它们会立即返回一个零
值。关闭上面例子中的naturals变量对应的channel并不能终止循环，它依然会收到一个永无
休止的零值序列，然后将它们发送给打印者goroutine。
没有办法直接测试一个channel是否被关闭，但是接收操作有一个变体形式：它多接收一个结
果，多接收的第二个结果是一个布尔值ok，ture表示成功从channels接收到值，false表示
channels已经被关闭并且里面没有值可接收。使用这个特性，我们可以修改squarer函数中的
循环代码，当naturals对应的channel被关闭并没有值可接收时跳出循环，并且也关闭squares
对应的channel.
// Squarer
go func() {
for {
x, ok := <-naturals
if !ok {
break // channel was closed and drained
}
squares <- x * x
}
close(squares)
}()
因为上面的语法是笨拙的，而且这种处理模式很常见，因此Go语言的range循环可直接在
channels上面迭代。使用range循环是上面处理模式的简洁语法，它依次从channel接收数
据，当channel被关闭并且没有值可接收时跳出循环。
在下面的改进中，我们的计数器goroutine只生成100个含数字的序列，然后关闭naturals对应
的channel，这将导致计算平方数的squarer对应的goroutine可以正常终止循环并关闭squares
对应的channel。（在一个更复杂的程序中，可以通过defer语句关闭对应的channel。）最
后，主goroutine也可以正常终止循环并退出程序。
gopl.io/ch8/pipeline2
Channels 304
gopl
func main() {
naturals := make(chan int)
squares := make(chan int)
// Counter
go func() {
for x := 0; x < 100; x++ {
naturals <- x
}
close(naturals)
}()
// Squarer
go func() {
for x := range naturals {
squares <- x * x
}
close(squares)
}()
// Printer (in main goroutine)
for x := range squares {
fmt.Println(x)
}
}
其实你并不需要关闭每一个channel。只要当需要告诉接收者goroutine，所有的数据已经全部
发送时才需要关闭channel。不管一个channel是否被关闭，当它没有被引用时将会被Go语言
的垃圾自动回收器回收。（不要将关闭一个打开文件的操作和关闭一个channel操作混淆。对
于每个打开的文件，都需要在不使用的使用调用对应的Close方法来关闭文件。）
试图重复关闭一个channel将导致panic异常，试图关闭一个nil值的channel也将导致panic异
常。关闭一个channels还会触发一个广播机制，我们将在8.9节讨论。
8.4.3. 单方向的Channel
随着程序的增长，人们习惯于将大的函数拆分为小的函数。我们前面的例子中使用了三个
goroutine，然后用两个channels来连接它们，它们都是main函数的局部变量。将三个
goroutine拆分为以下三个函数是自然的想法：
func counter(out chan int)
func squarer(out, in chan int)
func printer(in chan int)
Channels 305
gopl
其中计算平方的squarer函数在两个串联Channels的中间，因此拥有两个channel类型的参
数，一个用于输入一个用于输出。两个channel都拥有相同的类型，但是它们的使用方式相
反：一个只用于接收，另一个只用于发送。参数的名字in和out已经明确表示了这个意图，但
是并无法保证squarer函数向一个in参数对应的channel发送数据或者从一个out参数对应的
channel接收数据。
这种场景是典型的。当一个channel作为一个函数参数时，它一般总是被专门用于只发送或者
只接收。
为了表明这种意图并防止被滥用，Go语言的类型系统提供了单方向的channel类型，分别用于
只发送或只接收的channel。类型 表示一个只发送int的channel，只能发送不能接
chan<- int
收。相反，类型 表示一个只接收int的channel，只能接收不能发送。（箭头 和
<-chan int <-
关键字chan的相对位置表明了channel的方向。）这种限制将在编译期检测。
因为关闭操作只用于断言不再向channel发送新的数据，所以只有在发送者所在的goroutine才
会调用close函数，因此对一个只接收的channel调用close将是一个编译错误。
这是改进的版本，这一次参数使用了单方向channel类型：
gopl.io/ch8/pipeline3
func counter(out chan<- int) {
for x := 0; x < 100; x++ {
out <- x
}
close(out)
}
func squarer(out chan<- int, in <-chan int) {
for v := range in {
out <- v * v
}
close(out)
}
func printer(in <-chan int) {
for v := range in {
fmt.Println(v)
}
}
func main() {
naturals := make(chan int)
squares := make(chan int)
go counter(naturals)
go squarer(squares, naturals)
printer(squares)
}
Channels 306
gopl
调用counter(naturals)将导致将 类型的naturals隐式地转换为 类型只发
chan int chan<- int
送型的channel。调用printer(squares)也会导致相似的隐式转换，这一次是转换为
<-chan
类型只接收型的channel。任何双向channel向单向channel变量的赋值操作都将导致该隐
int
式转换。这里并没有反向转换的语法：也就是不能将一个类似 类型的单向型的
chan<- int
channel转换为 类型的双向型的channel。
chan int
8.4.4. 带缓存的Channels
带缓存的Channel内部持有一个元素队列。队列的最大容量是在调用make函数创建channel时
通过第二个参数指定的。下面的语句创建了一个可以持有三个字符串元素的带缓存Channel。
图8.2是ch变量对应的channel的图形表示形式。
ch = make(chan string, 3)
向缓存Channel的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部
删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个goroutine执行接收
操作而释放了新的队列空间。相反，如果channel是空的，接收操作将阻塞直到有另一个
goroutine执行发送操作而向队列插入元素。
我们可以在无阻塞的情况下连续向新创建的channel发送三个值：
ch <- "A"
ch <- "B"
ch <- "C"
此刻，channel的内部缓存队列将是满的（图8.3），如果有第四个发送操作将发生阻塞。
如果我们接收一个值，
fmt.Println(<-ch) // "A"
Channels 307
gopl
那么channel的缓存队列将不是满的也不是空的（图8.4），因此对该channel执行的发送或接
收操作都不会发生阻塞。通过这种方式，channel的缓存队列解耦了接收和发送的goroutine。
在某些特殊情况下，程序可能需要知道channel内部缓存的容量，可以用内置的cap函数获
取：
fmt.Println(cap(ch)) // "3"
同样，对于内置的len函数，如果传入的是channel，那么将返回channel内部缓存队列中有效
元素的个数。因为在并发程序中该信息会随着接收操作而失效，但是它对某些故障诊断和性
能优化会有帮助。
fmt.Println(len(ch)) // "2"
在继续执行两次接收操作后channel内部的缓存队列将又成为空的，如果有第四个接收操作将
发生阻塞：
fmt.Println(<-ch) // "B"
fmt.Println(<-ch) // "C"
在这个例子中，发送和接收操作都发生在同一个goroutine中，但是在真实的程序中它们一般
由不同的goroutine执行。Go语言新手有时候会将一个带缓存的channel当作同一个goroutine
中的队列使用，虽然语法看似简单，但实际上这是一个错误。Channel和goroutine的调度器机
制是紧密相连的，一个发送操作——或许是整个程序——可能会永远阻塞。如果你只是需要
一个简单的队列，使用slice就可以了。
下面的例子展示了一个使用了带缓存channel的应用。它并发地向三个镜像站点发出请求，三
个镜像站点分散在不同的地理位置。它们分别将收到的响应发送到带缓存channel，最后接收
者只接收第一个收到的响应，也就是最快的那个响应。因此mirroredQuery函数可能在另外两
个响应慢的镜像站点响应之前就返回了结果。（顺便说一下，多个goroutines并发地向同一个
channel发送数据，或从同一个channel接收数据都是常见的用法。）
Channels 308
gopl
func mirroredQuery() string {
responses := make(chan string, 3)
go func() { responses <- request("asia.gopl.io") }()
go func() { responses <- request("europe.gopl.io") }()
go func() { responses <- request("americas.gopl.io") }()
return <-responses // return the quickest response
}
func request(hostname string) (response string) { /* ... */ }
如果我们使用了无缓存的channel，那么两个慢的goroutines将会因为没有人接收而被永远卡