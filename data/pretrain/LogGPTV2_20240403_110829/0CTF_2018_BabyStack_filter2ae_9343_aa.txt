# 0CTF 2018 BabyStack
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
> `0ctf`最简单的一道`PWN`题, 用到了`ret2dl_solve`. 说来惭愧, 没做出来, 还是自己菜. 这次的讲解是假设源程序在本机下的,
> 而不是比赛的环境. 比赛的环境是真坑, 下篇给出比赛环境下的讲解.
## 源代码
    #include 
    #include 
    #include 
    int input() {
        char buf[0x1c];
        return read(0, buf, 0x40);
    }
    int main(){
        alarm(0xA);
        input();
        return 0;
    }
    //(自己意淫出来的)
## 程序分析
**1\. checksec**
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled(不能使用Shellcode)
    PIE:      No PIE (0x8048000)
**2\. 查看一些系统函数**
    readelf -r ./babystack
    Relocation section '.rel.plt' at offset 0x2b0 contains 3 entries:
     Offset     Info    Type            Sym.Value  Sym. Name
    0804a00c  00000107 R_386_JUMP_SLOT   00000000   read@GLIBC_2.0
    0804a010  00000207 R_386_JUMP_SLOT   00000000   alarm@GLIBC_2.0
    0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0
**3\. 结论**
> 程序明显存在栈溢出, 但是有没有其他的可以利用的函数.
## 知识讲解
**问题: 一个`libc`中的函数是如何被定位执行的呢?**
> 一个`PWN`手的常识:
> 在`Linux`下,函数采用[延迟绑定技术](https://blog.csdn.net/DrottningholmEast/article/details/76651279),是用到哪个函数才对哪个函数进行重定位.
**1\. 基础知识**  
一个ELF文件是有很多个`section`构成的,  
相应的数据结构:
    typedef struct {
        Elf32_Word sh_name;      // 节头部字符串表节区的索引
        Elf32_Word sh_type;      // 节类型
        Elf32_Word sh_flags;     // 节标志，用于描述属性
        Elf32_Addr sh_addr;      // 节的内存映像
        Elf32_Off  sh_offset;    // 节的文件偏移
        Elf32_Word sh_size;      // 节的长度
        Elf32_Word sh_link;      // 节头部表索引链接
        Elf32_Word sh_info;      // 附加信息
        Elf32_Word sh_addralign; // 节对齐约束
        Elf32_Word sh_entsize;   // 固定大小的节表项的长度
    } Elf32_Shdr;
其中`.dynsym`, `.dynstr`, `.rel.dyn`, `rel.plt`, `.plt`, `.plt.got`,
`.got`,`.got.plt`等, 这些`section`请大家注意一下, 后面要用到.
    .dynsym  --> 动态链接符号表, _dl_fixup会用到(dynamic linking symbol table)
    .dynstr    --> 动态链接字符串表, _dl_fixup会用到
    .rel.dyn   --> 变量重定位(不重点讲了)
    .rel.plt    --> 函数重定位
    .plt         --> 跳转表, 俗称PLT[0]
    .got         --> 全局变量偏移
    .got.plt    --> 保存全局函数偏移表
下面以`read`函数作为例子讲解整个过程:  
 **第一步**
    0x804844c:    call   0x8048300         --------------------    ......                                                                                                    |
    0x8048300 :    jmp  DWORD PTR ds:0x804a00c :    push  0x0 (第一次时, 上一条指令就是跳到0x8048306, 执行push 0x0.)
      (第二次、三次、四次时, 上一条跳转指令直接跳到真实的函数地址)
    0x804830b :jmp    0x80482f0    -------------    ......                                                                                           |
    0x80482f0:    push   DWORD PTR ds:0x804a004     :    push eax         :    push ecx
从上面整个执行流程来看: 压入了`0x0(reloc_arg) 和 ds:0x804a004(link_map)`, 作为
`_dl_runtime_resolve`的参数.
_参数的由来:_
  1. reloc_arg
`readelf -r ./babystack`
    0x80482b0:    0x0804a00c    0x00000107    0x0804a010    0x00000207
    0x80482c0:    0x0804a014    0x00000407    0x08ec8353    0x00009fe8
    (与上面图中的数值一致)
2\. link_map  
链接器的表示信息, 链接的时候就已经写入了.
**结论** : 以上过程想当于执行了`_dl_runtime_resolve(link_map, reloc_arg)`, 该函数会完成符号解析,
将真正的地址写入到`read[@got](https://github.com/got "@got")`中.
**第二步**
    0xf7fee001 :    push   ecx
    0xf7fee002 :    push   edx
    0xf7fee003 :    mov    edx,DWORD PTR [esp+0x10]
    0xf7fee007 :    mov    eax,DWORD || PTR [esp+0xc]
    0xf7fee00b :call   0xf7fe77e0 
    ......
可以看到`_dl_runtime_resolve`中又调用了`_dl_fixup`
    (部分_dl_fixup源码)
    _dl_fixup(struct link_map *l, ElfW(Word) reloc_arg){
      //首先通过参数reloca_arg计算入口地址, DT_JMPREL即.rel.plt, reloc_offset 就是 reloc_arg
      const PLTREL *const reloc
      = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
      // 通过reloc->r_info(0x107) 找到.dynsym中对应的条目
       const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
      // 检查reloc->r_info的最低位是否为0x7, 不是则退出
      assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
      //接着到strtab + sym->st_name中找到符号字符串, result为libc的基地址
      result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,
                      version, ELF_RTYPE_CLASS_PLT, flags, NULL);
    // value 就是目标函数相对与libc基地址的偏移地址
    value = DL_FIXUP_MAKE_VALUE (result,
                                    sym ? (LOOKUP_VALUE_ADDRESS (result)
                                           + sym->st_value) : 0);
    // 写入指定的.got表
    return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);                                       
    }
> 有童鞋可能有疑问: `_dl_fix`前面有`push 指令`, 为什么`_dl_fixup`和  
> `_dl_runtime_resolve`的参数一样都是`reloc_arg, link_map`呢?
_小结论:_ `_dl_fixup` 最终会通过函数名来查找函数对应的地址, 因此函数名是不可能重复的.
**第三步**  
下面实地带大家找一下`read`函数的字符串, 按照`_dl_fixup`.
    .rel.plt = 0x080482b0, reloc_arg = 0
    typedef struct {
        Elf32_Addr r_offset;    // 对于可执行文件，此值为虚拟地址
        Elf32_Word r_info;      // 符号表索引
    } Elf32_Rel;
                             ---------------------------------------    0x80482b0:    |0x0804a00c    0x00000107|    0x0804a010    0x00000207