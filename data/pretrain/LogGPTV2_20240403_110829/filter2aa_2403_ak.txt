地址，不会根据 LR 寄存器的值进行返回。大体上说，它和 x86 平台的 JMP 指令非常相似。为什么编译器
会如此处理呢？实际上，这些指令与前面（未启用优化选项）的运行结果相同。主要原因有两个： 
（1）栈和 SP（Stack Pointer）都没有发生变化。 
（2）调用 printf()函数是程序的最后一条指令；调用之后程序再无其他操作。 
即使未启用优化选项，在完成 printf()函数的作业之后，程序只是要返回到 LR 寄存器里存储的返回地
址而已。LR 的值并没有因为调用 printf()函数而发生变化，而且程序也没有调用 printf()函数之外的函数。
因为没有指令会修改 LR 的值，所以程序不必保存 LR 的状态。另外，在调用这个函数之后，程序也没有
其他操作。故而编译器进行了相应的优化。 
当程序最后的语句是调用另外一个函数时，编译器通常都会进行这种优化。 
本书 13.1.1 节的“指令清单 13.2”再次出现了这种优化技术。 
ARM64 
非经优化的 GCC (Linaro) 4.9 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
46 
逆向工程权威指南（上册） 
指令清单 6.8  非经优化的 GCC (Linaro) 4.9 
.LC1: 
          .string "a=%d; b=%d; c=%d" 
f2: 
; save FP and LR in stack frame: 
          stp      x29, x30, [sp, -16]! 
; set stack frame (FP=SP): 
          add      x29, sp, 0 
          adrp     x0, .LC1 
          add      x0, x0, :lo12:.LC1 
          mov      w1, 1 
          mov      w2, 2 
          mov      w3, 3 
          bl       printf 
          mov      w0, 0 
; restore FP and LR 
          ldp      x29, x30, [sp], 16 
          ret 
第一条 STP(Store Pair)指令把 FP(X29)和 LR(X30)的值推送入栈。第二条“ADD X29, SP, 0”指令构成
栈帧，它只是把 SP 的值复制给 X29。 
后面的“ADDRP/ADD”指令对构建了字符串的指针。 
在传递给 printf()的格式化字符串里，%d 是 32 位 int 整型数据。所以，程序使用了寄存器的 32 位存储
后面的数据 1、2、3。 
即使启用了 GCC (Linaro) 4.9 的优化选项，它生成的指令也与此相同。 
6.2.2 ARM 模式下传递 8 个参数 
我们对 6.1.2 节的例子稍做修改： 
#include  
int main()  
{ 
         printf("a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n", 1, 2, 3, 4, 5, 6, 7, 8); 
         return 0;  
}; 
Optimizing Keil 6/2013：ARM 模式 
.text:00000028               main 
.text:00000028 
.text:00000028               var_18 = -0x18 
.text:00000028               var_14 = -0x14 
.text:00000028               var_4  = -4 
.text:00000028 
.text:00000028 04 E0 2D E5  STR    LR, [SP,#var_4]! 
.text:0000002C 14 D0 4D E2  SUB    SP, SP, #0x14 
.text:00000030 08 30 A0 E3  MOV    R3, #8 
.text:00000034 07 20 A0 E3  MOV    R2, #7 
.text:00000038 06 10 A0 E3  MOV    R1, #6 
.text:0000003C 05 00 A0 E3  MOV    R0, #5 
.text:00000040 04 C0 8D E2  ADD    R12, SP, #0x18+var_14 
.text:00000044 0F 00 8C E8  STMIA  R12, {R0-R3} 
.text:00000048 04 00 A0 E3  MOV    R0, #4 
.text:0000004C 00 00 8D E5  STR    R0, [SP,#0x18+var_18] 
.text:00000050 03 30 A0 E3  MOV    R3, #3 
.text:00000054 02 20 A0 E3  MOV    R2, #2 
.text:00000058 01 10 A0 E3  MOV    R1, #1 
.text:0000005C 6E 0F 8F E2  ADR     R0, aADBDCDDDEDFDGD ; "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%"... 
.text:00000060 BC 18 00 EB  BL     __2printf 
.text:00000064 14 D0 8D E2  ADD    SP, SP, #0x14 
.text:00000068 04 F0 9D E4  LDR    PC, [SP+4+var_4],#4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
47 
程序分为以下几个部分。 
 函数序言： 
第一条指令“STR LR, [SP,#var_4]!”将 LR 寄存器的值推送入栈。在后面调用 printf()函数的时候，
程序会修改这个寄存器的值。指令中的感叹号表示这属于预索引（pre-index）指令。具体说来，
它会首先将 SP 的值减去 4，然后再把 LR 的值保存在 SP 所指向的地址。这条指令与 x86 平台的
PUSH 指令十分类似。有关 PUSH 指令的详细介绍，请参见本书的 28.2 节。 
第二条指令“SUB SP, SP, #0x14”将修改栈指针 SP，以便在栈内分配 0x14（即 20）字节的存储
空间。在后续的操作中，程序会传递 5 个 32 位参数，所以此时需要分配 5×4=20 字节的存储空间。
而函数所需的前 4 个参数则是由寄存器负责传递。 
 使用栈传递 5、6、7、8： 
参数 5、6、7、8 分别被存储到 R0、R1、R2、R3 寄存器，然后通过“ADD R12, SP, #0x18+var_14”
指令把栈的指针地址写到 R12 寄存器里，以供后续指令进行入栈操作。var_14 是 IDA 创建的汇编
宏，其数值等于−0x14。这种“var_?”形式的宏出现在与栈有关的操作指令上时，用于标注栈中
的局部变量。最终，R12 寄存器里将会放入 SP＋4。 
后面的“STMIA R12, {R0-R3}”指令把R0～R3 寄存器中的内容写到R12 寄存器的值所表示的内存地址上。
STMIA 是“Store Multiple Increment After” 的缩写。顾名思义，每写入一个寄存器的值，R12 的值就会加4。 
 通过栈传递数值 4： 
MOV 指令向 R0 寄存器里写入数值“4”。然后，“STR R0, [SP,#0x18+var_18]”指令把 R0 寄存器
的值也存储于栈中。由于 var_18 就是−0x18，所以偏移量的值最终为 0。可见，R0 寄存器里的值
将会写到 SP 所指向的内存地址。 
 通过寄存器传递 1、2、3： 
传递给 printf()函数的前三个参数 a、b、c（分别为 1、2、3）通过 R1、R2、R3 寄存器传递给 printf()
函数。在此之前，其他的 5 个数字都已经推送入栈。在传递格式化字符串之后，被调用的 printf()
函数就可以调用它所需的全部参数了。 
 调用 printf()函数。 
 函数尾声： 
“ADD SP, SP, #0x14”指令把栈指针 SP 还原为调用 printf()之前的状态，起到释放栈空间的作用。当然，
栈内原有的数据不会被清除或者置零，仍然存在相应地址上。在执行其他函数时，这些数据将被复写。 
在程序的最后，“LDR PC, [SP+4+var_4],#4”从栈中提取 LR 寄存器的值，把它传递给 PC 寄存器。
接下来程序将会跳转到那里。这将结束整个程序。这条指令没有出现感叹号，属于“延迟索引
/post-index”指令。也就是说，它先把[SP+4+var_4]（即［SP］）传递给 PC，然后再做 SP=SP−4
的运算。为什么 IDA 以这种风格显示这条指令？IDA 以此充分展现栈的内存存储布局，var_4 是
局部栈里保管 LR 的数据空间。这条指令与 x86 平台的 POP 指令十分类似。 
Optimizing Keil 6/2013: Thumb 模式 
.text:0000001C               printf_main2 
.text:0000001C 
.text:0000001C               var_18 = -0x18 
.text:0000001C               var_14 = -0x14 
.text:0000001C               var_8  = -8 
.text:0000001C 
.text:0000001C 00 B5         PUSH    {LR} 
.text:0000001E 08 23         MOVS    R3, #8 
.text:00000020 85 B0         SUB     SP, SP, #0x14 
.text:00000022 04 93         STR     R3, [SP,#0x18+var_8] 
.text:00000024 07 22         MOVS    R2, #7 
.text:00000026 06 21         MOVS    R1, #6 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
48 
逆向工程权威指南（上册） 
.text:00000028 05 20         MOVS    R0, #5 
.text:0000002A 01 AB         ADD     R3, SP, #0x18+var_14 
.text:0000002C 07 C3         STMIA   R3!, {R0-R2} 
.text:0000002E 04 20         MOVS    R0, #4 
.text:00000030 00 90         STR     R0, [SP,#0x18+var_18] 
.text:00000032 03 23         MOVS    R3, #3 
.text:00000034 02 22         MOVS    R2, #2 
.text:00000036 01 21         MOVS    R1, #1 
.text:00000038 A0 A0         ADR     R0，aADBDCDDDEDFDGD ; "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%"… 
.text:0000003A 06 F0 D9 F8  BL      __2printf 
.text:0000003E 
.text:0000003E               loc_3E  ; CODE XREF: example13_f+16 
.text:0000003E 05 B0         ADD     SP, SP, #0x14 
.text:00000040 00 BD         POP     {PC} 
Thumb 模式的代码与 ARM 模式的代码十分相似，但是参数入栈的顺序不同。即，Thumb 模式会在第
一批次将 8 推送入栈、第二批次将 7、6、5 推送入栈，而在第三批次将 4 推送入栈。 
Optimizing Xcode 4.6.3 (LLVM)：ARM 模式 
__text:0000290C                _printf_main2 
__text:0000290C         
__text:0000290C                var_1C = -0x1C 
__text:0000290C                var_C  = -0xC 
__text:0000290C         
__text:0000290C  80 40 2D E9   STMFD  SP!, {R7,LR} 
__text:00002910  0D 70 A0 E1   MOV    R7, SP 
__text:00002914  14 D0 4D E2   SUB    SP, SP, #0x14 
__text:00002918  70 05 01 E3   MOV    R0, #0x1570 
__text:0000291C  07 C0 A0 E3   MOV    R12, #7 
__text:00002920  00 00 40 E3   MOVT   R0, #0 
__text:00002924  04 20 A0 E3   MOV    R2, #4 
__text:00002928  00 00 8F E0   ADD    R0, PC, R0 
__text:0000292C  06 30 A0 E3   MOV    R3, #6 
__text:00002930  05 10 A0 E3   MOV    R1, #5 
__text:00002934  00 20 8D E5   STR    R2, [SP,#0x1C+var_1C] 
__text:00002938  0A 10 8D E9   STMFA  SP, {R1,R3,R12} 
__text:0000293C  08 90 A0 E3   MOV    R9, #8 
__text:00002940  01 10 A0 E3   MOV    R1, #1 
__text:00002944  02 20 A0 E3   MOV    R2, #2 
__text:00002948  03 30 A0 E3   MOV    R3, #3 
__text:0000294C  10 90 8D E5   STR    R9, [SP,#0x1C+var_C] 
__text:00002950  A4 05 00 EB   BL     _printf 
__text:00002954  07 D0 A0 E1   MOV    SP, R7 
__text:00002958  80 80 BD E8   LDMFD  SP!, {R7, PC} 
这段汇编代码与前面的代码十分雷同，不同的是STMFA (Store Multiple Full Ascending)指令。它是
STMIB (Store Multiple Increment Before)的同义词。它们首先增加SP指针的值，然后将数据推送入栈；而不
是先入栈，再调整SP指针。
①
Optimizing Xcode 4.6.3 (LLVM)：Thumb-2 模式 
虽然这些指令表面看来杂乱无章，但是似乎这就是 xcode 编译出来的程序的一种特点。例如，在地址 0x2918、
0x2920、0x2928 处，R0 寄存器的相关操作似乎可以在一处集中处理。不过，这种分散布局是编译器针对并行计算
而进行的优化。通常，处理器会尝试着并行处理那些相邻的指令。以“MOVT R0, #0”和“ADD R0, PC, R0”为
例——这两条指令都是操作 R0 寄存器的指令，若集中在一起就无法并行计算。另一方面，
“MOVT R0, #0”和“MOV 
R2, #4”之间不存在这种资源冲突，可以同时执行。想必是出于这种设计，编译器才会尽可能地进行这种处理吧。 
__text:00002BA0     
  _printf_main2 
① 指针指向的地址必须有数据，这就是 full stack 的涵义，也是它们与 empty stack 的区别。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
49 
__text:00002BA0 
__text:00002BA0     
  var_1C = −0x1C 
__text:00002BA0     
  var_18 = −0x18 
__text:00002BA0     
  var_C  = −0xC 
__text:00002BA0 
__text:00002BA0 80 B5    
   PUSH  
  {R7,LR} 
__text:00002BA2 6F 46    
   MOV  
  R7, SP 
__text:00002BA4 85 B0    
   SUB  
  SP, SP, #0x14 
__text:00002BA6 41 F2 D8 20   MOVW  
  R0, #0x12D8 
__text:00002BAA 4F F0 07 0C      MOV.W  
  R12, #7 
__text:00002BAE C0 F2 00 00      MOVT.W    R0, #0 
__text:00002BB2 04 22         MOVS  
  R2, #4 
__text:00002BB4 78 44         ADD  
  R0, PC ; char * 
__text:00002BB6 06 23         MOVS  
  R3, #6 
__text:00002BB8 05 21         MOVS  
  R1, #5 
__text:00002BBA 0D F1 04 0E  ADD.W  
  LR, SP, #0x1C+var_18 
__text:00002BBE 00 92         STR  
  R2, [SP,#0x1C+var_1C] 
__text:00002BC0 4F F0 08 09  MOV.W 
  R9, #8 
__text:00002BC4 8E E8 0A 10  STMIA.W   LR, {R1,R3,R12} 
__text:00002BC8 01 21         MOVS  
  R1, #1 
__text:00002BCA 02 22         MOVS  
  R2, #2 
__text:00002BCC 03 23         MOVS  
  R3, #3 
__text:00002BCE CD F8         STR.W  
  R9, [SP,#0x1C+var_C] 
__text:00002BD2 01 F0 0A EA  BLX  
  _print5 
__text:00002BD6 05 B0         ADD  
  SP, SP, #0x14 
__text:00002BD8 80 BD         POP  
  {R7,PC} 
与 ARM 模式编译出的代码相比，这段代码存在着明显的 Thumb 指令的特征。除此之外，ARM 模式
和 Thumb 模式编译出的代码并无实际区别。 
ARM64 
Non-optimizing GCC (Linaro) 4.9 
指令清单 6.9  Non-optimizing GCC (Linaro) 4.9 
.LC2: 
         .string "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n" 
f3: 
; grab more space in stack: 
         sub      sp, sp, #32 
; save FP and LR in stack frame: 
         stp      x29, x30, [sp,16] 
; set stack frame (FP=SP): 
         add      x29, sp, 16 
         adrp     x0, .LC2 ; "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n" 
         add      x0, x0, :lo12:.LC2 
         mov      w1, 8     ; 9th argument 
         str      w1, [sp]  ; store 9th argument in the stack 
         mov      w1, 1 
         mov      w2, 2 
         mov      w3, 3 
         mov      w4, 4 
         mov      w5, 5 
         mov      w6, 6 
         mov      w7, 7 
         bl       printf 
         sub      sp, x29, #16 
; restore FP and LR       
         ldp      x29, x30, [sp,16] 
         add      sp, sp, 32 
         ret 
X-或 W-寄存器传递函数的前 8 个参数［参见 ARM13c］。字符串指针使用 64 位寄存器，所以它使用整
异步社区会员 dearfuture(15918834820) 专享 尊重版权
50 
逆向工程权威指南（上册） 
个 X0 寄存器。所有的其他参数都属于 32 位整型数据，可由寄存器的低 32 位/即 W-寄存器传递。程序使用
栈来传递第九个参数（数值 8）。CPU 的寄存器总数有限，所以寄存器往往不足以传递全部参数。 
启用优化选项之后，GCC （linaro）4.9 生成的代码与此相同。 
6.3 MIPS 
6.3.1 传递 3 个参数 
Optimizing GCC 4.4.5 
在 MIPS 平台上编译“Hello, world!”程序，编译器不会使用 puts()函数替代 printf()函数，而且它会使
用$5～$7 寄存器（即$A0～$A2）传递前 3 个参数。 
这 3 个寄存器都是“A-”开头的寄存器，因为它们就是负责传递参数（arguments）的寄存器。 
指令清单 6.10  Optimizing GCC 4.4.5 (汇编输出) 
$LC0: 
         .ascii   "a=%d; b=%d; c=%d\000" 
main: 
; function prologue: 
         lui      $28,%hi(__gnu_local_gp) 
         addiu    $sp,$sp,-32 
         addiu    $28,$28,%lo(__gnu_local_gp) 
         sw       $31,28($sp) 
; load address of printf(): 
         lw       $25,%call16(printf)($28) 
; load address of the text string and set 1st argument of printf(): 
         lui      $4,%hi($LC0) 
         addiu    $4,$4,%lo($LC0) 
; set 2nd argument of printf(): 
         li       $5,1            # 0x1 
; set 3rd argument of printf(): 
         li       $6,2            # 0x2 
; call printf(): 
         jalr     $25 
; set 4th argument of printf() (branch delay slot): 
         li       $7,3            # 0x3 
; function epilogue: 
         lw       $31,28($sp) 
; set return value to 0: 
         move     $2,$0 
; return 
         j        $31 
         addiu    $sp,$sp,32 ; branch delay slot 
指令清单 6.11  Optimizing GCC 4.4.5 (IDA) 
.text:00000000  main: 
.text:00000000 
.text:00000000 var_10   
= -0x10  
.text:00000000 var_4    
= -4 
.text:00000000 
; function prologue: 
.text:00000000   
lui   $gp, (__gnu_local_gp >> 16) 
.text:00000004    
addiu  $sp, -0x20 