现在，花点时间想想：你能创建哪些应用，如何创建一套能带去面试的作品集。你有能带去面试的代码或项目吗？
另一个要考虑的是，如果你目前没有学位，你是否想将来去获得一个？我刚开始工作的时候，我并没有学位。我费了很大的劲才得到第一份工作，但我有了足够经验之后，我明白了一点：学位并不是那么重要。尽管如此，工作了几年后，我还是决定继续完成学业，从而得到一纸文凭。在接受教育的同时，我仍然坚持正常工作，所以最后我不但比我的同龄人多了4年工作经验，还获得了学位。这么做唯一的缺点就是，在这几年里，我都不得不在晚上学习。因为函授大学和夜大的学费比普通大学便宜，所以费用不是问题。当你有了工作，读书的开支也少了很多，你也无需借贷。不仅如此，有些公司还会部分或全额支付你的学费。
如果你目前还没有学位，你可以采用类似的路线。你可以通过业余时间上课的方式，在工作的同时获得学位。这是一个非常好的支持计划，能在以后助你一臂之力。
另一种方法就是获得专业认证。虽然不如学位那么有用，但是它们没学位那么贵，也能证明你在某领域的专业能力，如微软和Java的专业技术认证、Scrum方法认证。你通常可以自学这些认证课程，通过考试获得认证。考试的费用相当便宜。
采取行动
如果你没有学位，看看有哪些网上课程或者业余课程可以参加。看看它会花费多少，多久会让你毕业。
如果你决定完全放弃学位教育，那么一定要确保自己有一个非常出色的作品集。花时间把写过的代码整理一下，证明你了解你所做的工作。
第35章 发现自己的知识短板
专注于自身强项，这没什么不妥，但有时候，如果弱点得不到解决，通常会成为你的职业或生活的桎梏。我们每个人都有弱点。我们的知识也有使我们不能高效工作的短板。我们能发现并消除的知识短板越多，长久来看我们从中受益越多。
本章的内容都是关于发现妨碍你发挥自身全部潜能的知识短板的。我们将研究这些短板为何会存在，如何找到它们，以及最终如何填补它们，从而让你不受自己所不知的限制。
为什么我们会有短板
在很长一段时间里，我都不明白Lambda（拉姆达）表达式在C#中是如何工作的。在C#中，Lambda表达式是一种基本的匿名函数，可以用来创建代理。你可以使用Lambda表达式作为快捷方式来声明没有名称的函数。
我在C#代码里不断看到Lambda表达式，对它的作用也略知一二，但并没有真正理解。我知道，如果自己花点时间了解Lambda表达式是如何工作的，以及它们是什么，我的工作会更顺利，但是我当时没有时间。
最终，它成为我自己的知识体系中严重的短板。没有花时间去彻底掌握Lambda表达式的工作原理，结果浪费了大把的时间。最后当我下决心花时间去了解Lambda表达式的时候，我只花了几个小时阅读并实践，就领会了这一概念。
观察我工作的旁观者迅速看出我的弱点，以及这个弱点又浪费了多少效率。然而，尽管现在这一点显而易见，但当时我却无法了解。
这就是知识上的短板造成的问题。我们总是倾向于掩饰自己的短板，而且我们也总是太忙，忙到无暇去填补它们。结果，我们要么不能真正明白自己在做什么，要么为了避开自己的短板而采取低效的方法。
尽管我们最终明确了这些短板，也明白自己深受其害，但基本上依然会无动于衷——即使我们知道自己应该有所作为。这就像牙疼的时候不愿意去看牙医，因为我们并不愿意为此而烦恼。
找出你的短板
你的知识短板并不全都显而易见。事实上，大多数的知识短板，你只能隐约觉察到。对于自己不知道的，你很难清楚地意识到，也很容易忽略。
知识短板会阻碍你进步。准确识别它们的最佳方式之一就是看看自己在哪些工作上花费了大量的时间，或者一直进行重复性劳动。通常，你会发现，自己的知识短板使工作速度放缓，额外需要大量的时间完成任务。由于理解得不彻底，你只能摸索着前进。这正是我不理解Lambda表达式的时候发生的情况。我花了大量的时间去调试代码，而不是用几个小时去理解它。
重复性工作也是如此。任何你所做的重复性工作都值得彻查一番，看看是否有自己不理解的地方，如果你这样做了，可能会提高你的工作效率。想想键盘快捷键。你一直重复使用某个应用，但是并没那么高效，原因是你不得不手动在屏幕上拖曳鼠标并点击。键盘快捷键可能就是你的知识短板。花点儿时间学习每天会用几个小时的应用（提示：你的IDE编程环境）的快捷键，一周能给你节约好几个小时的时间。
另一种识别知识短板的方法就是，时刻都要试图了解自己不理解或不清楚的事物。你可以维护一份清单，列出自己需要去研究或者自己不清楚的所有事物，追踪有哪些主题总是不断出现在这个清单上。你会惊讶地发现这份清单的增长速度有多快。你只要对自己坦诚：如果遇到不理解的知识，不需要马上就学会，但是一定要把它添加到清单中，这样你至少可以找出自己的知识短板。
假如你在准备面试，需要明确自己要学什么，这一方法最管用。尽量找出尽可能多的你在面试中可能会被问到的问题。如果你在找Java程序员的工作，你要整理出一份Java面试题的清单表，把所有题目做一遍，将自己不理解的概念和不会回答的问题整理到这个清单中。等你完成这一步，你就有了一份长长的待研究课题清单。这种方法看起来简单明了，但是很多准备面试的软件开发人员对要研究什么以及如何研究一头雾水。完成表35-1有助于你完成这项任务。
表35-1 检查知识短板
知识短板高发区
你的短板
在哪些工作上花费时间最多？
可以改进的重复性劳动
自己没有完全理解的东西
你回答不出来的面试题
消除短板
如果不能采取措施弥补自己的知识短板，就算明确了所有短板也无济于事。幸运的是，一旦你能明确自己的短板，那消除短板的实际工作也并非如自己想象的那么可怕了。这就跟我们去看牙医很类似。
真的，消除短板的关键就是定位短板。一旦你知道自己的知识短板是什么，以及它如何阻碍了你的发展，那么找出弥补它的方法也就简单了。当我意识到自己止步不前是因为没有掌握C#的Lambda表达式，我就坐下来，花几个小时用心学习直到掌握它。
你必须要确切知道自己需要学什么，保证焦点明确。如果你的知识短板是不擅长物理，那很难弥补这一短板。但是，如果你能确定自己因为不知道弹簧的工作原理而遇到麻烦，那就可以花时间学习胡克定律（http://simpleprogrammer.com/ss-hookes-law），然后就一切顺利了。
找出短板并进行弥补
通常情况下，你可以通过“提问题”来快速填补自己知识上的短板。你可能会因自己在某方面的无知而感到尴尬，但是如果你能够克服尴尬，在自己不明白的时候提问，你会发现自己可以毫不费力地填补很多知识上的短板。当你在谈话或者讨论中遇到自己不能完全理解的部分，不要掩饰它，通过提问来弄明白。
采取行动
在接下来的几天里随身带着一个记事本，把自己遇到的不明白的地方都记下来。
在谈话中遇到自己不明白的地方，即使觉得尴尬，也要有意识地提问。
明确自己一天中的某些“痛点”，通过弥补自己知识上的短板，找出消除痛点的方法。
第四篇 生产力
外行静坐等待灵感，其他人则唤起激情努力工作。
——斯蒂芬•金，《写作这回事：创作生涯回忆录》（On Writing: A Memoir of the Craft）
如果我可以把本篇的所有内容提炼成一个忠告，我会说“做该做的工作”。然而，问题在于，“做该做的工作”并不像看起来那么简单。我们都知道，如果明确知道应该做什么，那么我们的工作效率会更高。但是，懒惰、缺乏动力、泡在 Facebook上聊天、沉湎于搞笑的猫咪视频……，种种原因总让我们的计划泡汤。那么，怎样才能坐下来，做我们应该做的工作呢？我们要怎样做才能让自己不再沉迷于搞笑动画，克服拖延症呢？
这正是本篇要论述的内容。我并非完美无缺（我自己也是拖延了很久之后才开始动笔写作本书），但我找到了一些能够大幅提升工作效率的方法，在本篇中，我将与大家一起分享。这些方法中有一些相当浅显，比如我们都需要善意的提示，而还有一些就不那么简单了。
虽然我最终并不能让你成为一台性能卓越、品质出众的超级高效机器，但是我能给你一些有效的工具去打败注意力分散，让你聚精会神，关掉滑稽的猫视频，尽管它们确实有趣。
第36章 一切始于专注
提高工作效率并没有什么了不起的秘诀。如果想让工作更加富有成效，就要让更多的工作尽快完成。现如今，生产效率高并不能保证你是高效的。产量多只表明生产效率高，只有完成正确的工作才会成为高效的人。但现在，我们只专注于讨论如何提高生产效率。首先，我要假设你能解决在工作中遇到的所有问题，所以你一旦开始工作就可以持续不断的交付工作产品。
如何让更多的工作尽快完成呢？这一切都源于专注。专注对于完成任何任务都是至关重要的。眼下，我就专注于“写这一章”这项任务。我戴上耳机，忽略所有电子邮件，一直盯着屏幕打字，因为我知道，写完这一章是需要一整天还是只要几小时，这完全取决于我是否专注工作。
在本章中，我们会讨论什么是专注，为何它如此重要，以及——最重要的——你如何更专注。抑制住要翻页的冲动，把手机调为震动模式，我们开始吧。
什么是专注