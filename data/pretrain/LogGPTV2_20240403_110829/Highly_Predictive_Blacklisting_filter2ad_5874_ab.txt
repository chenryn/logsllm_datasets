tackers. v1 also shares one common attack source (s3)
with v3, but does not share attacker overlap with the other
contributors. Given this observation, between sources
s5 and s6, we would say that s5 has more relevance to
v1 than s6 because s5 has reportedly attacked v2, which
has recently experienced multiple attack source overlaps
with v1. But the victims of s6’s attacks share no overlap
with v1. Note that this relevance measure is quite differ-
ent from the measures based on how proliﬁc the attack
source has been. The latter would favor s6 over s5, as s6
has attacked more victims than s5. In this sense, which
contributors a source has attacked is of greater signiﬁ-
cance to our scheme than how many victims it has at-
tacked. Similarly, between s5 and s7, s5 is more rele-
vant, because the victim of s5 (v2) shares more common
attacks with v1 than the victim of s7 (v3). Finally, be-
cause s4 has attacked both v2 and v3, we would like to
say that it is the most relevant among s4, s5, s6, and s7.
To formalize the above intuition, we model the at-
tack correlation relationship between contributors us-
ing a correlation graph, which is a weighted undirected
graph G = (V, E). The nodes in the graph consist of the
contributors V = {v1, v2, . . .}. There is an edge between
node vi and vj if vi is correlated with vj. The weight on
the edge is determined by the strength of the correlation
(i.e., occurrences of attacker overlap) between the two
corresponding contributors. We now introduce some no-
tation for the relevance model.
Let n be the number of nodes (number of contributors)
in the correlation graph. We use W to denote the adja-
cency matrix of the correlation graph, where the entry
W(i,j) in this matrix is the weight of the edge between
node vj and vi. For a source s, we denote by T (s) the set
of contributors that have reported an attack from s. T (s)
can be written in a vector form bs = {bs
2, . . . , bs
n}
i = 0 otherwise.
such that bs
We also associate with each source s a relevance vector
rs = {rs
v is the relevance value
of attacker s with respect to contributor v. We use lower-
case boldface to indicate vectors and uppercase boldface
to indicate matrices. Table 2 summarizes our notation.
i = 1 if vi ∈ T (s) and bs
2, . . . , rs
n} such that rs
1, rs
1, bs
We now describe how to derive the matrix W from
the attack reports. Consider the following two cases. In
Case 1, contributor vi sees attacks from 500 sources and
vj sees 10 sources. Five of these sources attack both vi
and vj. In Case 2, there are also ﬁve common sources.
However, vi sees only 50 sources and vj sees 10. Al-
though the number of overlapping sources is the same
(i.e., 5 common sources), the strength of connection be-
tween vi and vj is different in the two cases. If a con-
tributor observes a lot of attacks, it is expected that there
should be more overlap between this contributor and the
others. Let mi be the number of sources seen by vi, mj
# of contributors
i-th contributor
n
vi
W Adjacency matrix of the correlation
T (s)
bs
rs
graph
Set of contributors that have reported at-
tack(s) from source s
Attack vector for source s. bs
vi ∈ T (s) and 0 otherwise
Relevance vector for source s. rs
v is the
relevance value of attacker s with re-
spect to contributor v
i = 1 if
Table 2: Summary of Relevance Model Notations
the number seen by vj, and mij the number of common
attack sources. The ratio mij
shows how important vi is
mi
for vj while mij
shows how important vj is for vi. Since
mj
we want W(i,j) to reﬂect the strength of the connection
between vi and vj, we set W(i,j) = mij
. One may
view this new W as a standardized correlation matrix.
Figure 2 shows the matrix W for Table 1 constructed
using this method.
mi · mij
mj
0.33
0.083
0
0
0
0.33
0.063
0
0
0
0.083
0.063
0.13
0
0
0
0
0.13
0
0.5
0
0
0
0.5
0
Figure 2: Standardized Correlation Matrix for Attack Ta-
ble 1
Given this correlation matrix, we follow the afore-
i =
mentioned intuition and calculate the relevance as rs
j∈T (s) W(i,j). This is to say that if the repository re-
ports that source s has attacked contributor vj, this fact
contributes a value of W(i,j) to the source’s relevance
with respect to the victim vi. Written in vector form, it
gives us
rs = W · bs.
(1)
The above simple relevance calculation lacks certain
desired properties. For example, the simple relevance
value is calculated solely from the observed activities
from the source by the repository contributors. In some
cases, this observation does not represent the complete
view of the source’s activity. One reason is that the con-
tributors consist of only a very small set of networks in
the Internet. Before an attacker saturates the Internet
with malicious activity, it is often the case that only a
few contributors have observed the attacker. The attacker
may be at its early stage or it has attacked many places,
USENIX Association  
17th USENIX Security Symposium 
111
most of which do not participate in the security log shar-
ing system. Therefore, one may want a relevance mea-
sure that has a “look-ahead” capability. That is, the rele-
vance calculation should take into consideration possible
future observations of the source and include these an-
ticipated observations from the contributors into the rel-
evance values.
Figure 3: Relevance Evaluation Considers Possible Fu-
ture Attacks
Figure 3 gives an example where one may apply this
“look-ahead” feature. (Examples here are independent
of the one shown in Table 1.) The correlation graph of
Figure 3 consists of four contributors numbered 1, 2, 3,
and 4. Contributor 2 reported an attack from source s
(represented by the star). Our goal is to evaluate how
relevant this attacker is to contributor 1 (double-circled
node). Using Equation 1, the relevance would be zero.
However, we observe that s has relevance 0.5 with re-
spect to contributor 3 and relevance 0.3 with respect to
contributor 4. Although at this time, contributors 3 and
4 have not observed s yet, there may be possible future
attacks from s. In anticipation of this, when evaluating
s’s relevance with respect to contributor 1, contributors
3 and 4 pass to contributor 1 their relevance values af-
ter multiplying them with the weights on their edges, re-
spectively. The attacker’s relevance value for contributor
1 then is 0.5*0.2+0.3*0.2 = 0.16. Note that, had s actu-
ally attacked contributors 3 and 4, the contributors would
have passed the relevance value 1 (again after multiply-
ing them with the weights on the edges) to contributor
1.
This can be viewed as a relevance propagation process.
If a contributor vi observed an attacker, we say that the
attacker has an initial relevance value 1 for that contribu-
tor. Following the edges that go out of the contributor, a
fraction of this relevance can be distributed to the neigh-
bors of the contributor in the graph. Each of vi’s neigh-
bors receives a share of relevance that is proportional to
the weight on the edge that connects the neighbor to vi.
Suppose vj is one of the neighbors. A fraction of the rele-
vance received by vj is then further distributed, in similar
fashion, to its neighbors. The propagation of relevance
continues until the relevance values for each contributor
reach a stable state.
This relevance propagation process has another beneﬁt
besides the “look-ahead” feature. Consider the correla-
tion graph given in Figure 4 (a). The subgraph formed
by nodes 1, 2, 3, and 4 is very different from that formed
by nodes 1, 5, 6, and 7. The subgraph from nodes 1, 2,
3, and 4 is well connected (in fact it forms a clique). The
contributors in the subgraph are thus more tied together.
We call them a correlated group. (We use a dotted cir-
cle to indicate the correlated group in Figure 4.) There
may be certain intrinsic similarities between the mem-
bers in the correlated group (e.g., IP address proximity,
similar vulnerability). Therefore, it is natural to assign
more relevance to source addresses that have attacked
other contributors in the same correlated group. For ex-
ample, consider the sources s and s in Figure 4. They
both attacked three contributors. All the edges in the cor-
relation graph have the same weights. (Hence, we omit-
ted the weights in the ﬁgure.) We would like to say that s
is more relevant than s for contributor 1. If we calculate
the relevance value by Equation 1, the values would be
the same for the two attackers. Relevance propagation
helps to give more value to the attacker s because mem-
bers of the correlated group are well connected. There
are more paths in the subgraph that lead from the con-
tributors where the attack happened to the contributor for
which we are evaluating the attacker relevance. For ex-
ample, the relevance from contributor 2 can propagate to
contributor 3 and then to contributor 1. It can also go to
contributor 4 and then to contributor 1. This is effectively
the same as having an edge with larger weight between
the contributors 2 and 1. Therefore, relevance propaga-
tion can effectively discover and adapt to the structures
in the correlation graph. The relevance values assigned
then reﬂect certain intrinsic relationships among contrib-
utors.
We extend Equation 1 to employ relevance propaga-
tion. If we propagate the relevance values to the imme-
diate neighbors in the correlation graph, we obtain a rel-
evance vector W · bs that represents the propagated val-
ues. Now we propagate the relevance values one more
hop. This gives us W · W · bs = W2 · bs. The rele-
vance vector that reﬂects the total relevance value each
contributor receives is then W · bs + W2 · bs. If we
let the propagation process iterate indeﬁnitely, the rele-
vance vector would become∞i=1 Wi · bs. There is a
technical detail in this process we need to resolve. Nat-
urally, we would like the relevance value to decay along
the path of propagation. The further it goes on the graph,
the smaller its contribution becomes. To achieve this,
we scale the matrix W by a constant 0 < α < 1 such
that the 2-norm of the new matrix αW becomes smaller
than one. With this modiﬁcation, an attacker will have
112 
17th USENIX Security Symposium 
USENIX Association
Figure 4: Attacks on Members in a Correlated Group Contribute More Relevance
only a negligible relevance value to contributors that are
far away in the correlation graph. Putting the above to-
gether, we compute the relevance vector by the following
equation:
rs =
(αW)i · bs
(2)
∞i=1
We observe that bs + rs is the solution for x in the
following system of linear equations:
x = bs + αW · x
(3)
The linear system described by Equation 3 is exactly the
system used by Google’s PageRank [2]. PageRank ana-
lyzes the link structures of webpages to determine the
relevance of each webpage with respect to a keyword
query. In PageRank, bs is set to be an all-one vector and
W is determined by letting W(i,j) be 1/(# of outgoing
links on page j) if one of these outgoing links points
to webpage i, and W(i,j) = 0 otherwise. Therefore,
PageRank propagates relevance where every node pro-
vides an initial relevance value of one. In our relevance
calculation, only nodes whose corresponding contribu-
tors have reported the attacker are assigned one unit of
initial relevance. Similar to the PageRank values that re-
ﬂect the link structures of the webpages, our relevance
values reﬂect the structure of the correlation graph that
captures intrinsic relationships among the contributors.
Equation 3 can be solved to give x = (I − αW)−1 ·
bs, where I is the identity matrix. Also, since x = rs +
bs, rs = (I−αW)−1·bs−bs = [(I−αW)−1−I]·bs.
This gives the relevance vector for each attack source.
The sources are then ranked, for each contributor, ac-
cording to the relevance values. As each attack source
has a potentially different relevance value for each con-
tributor, the rank of a source with respect to different con-
tributors is different. Note that our concept of relevance
measure and relevance propagation does not depend on a
particular choice of the W matrix. As long as W reﬂects
the connection weight between the contributors, our rel-
evance measure applies.
3.3 Analyzing Attack Pattern Severity
We now consider the problem of measuring the degree
to which each attack source exhibits known patterns of
malicious behavior. In the next section, we will disuss
how this measure can be fused into our ﬁnal blacklist
construction decisions. In this section we will describe
our model of malicious behavior and the attributes we
extract to map each attacker’s log production patterns to
this model.
Our model of malicious behavior, in this instance, fo-
cuses on identifying typical scan-and-infect malicious
software (or malware). We deﬁne our malware behav-
ior pattern as that of an attacker who conducts an IP
sweep to small sets of ports that are known to be as-
sociated with malware propagation or backdoor access.
This behavior pattern matches the malware behavior pat-
tern documented by Yegeneswaren et.al.
in [20], as
well as our own most recent experiences (within the last
twelve months) of more than 20K live malware infec-
tions observed within our honeynet [21]. Other potential
malware behavior patterns may be applied, for exam-
ple, such as the scan-oriented malicious address detec-
tion schemes outlined in the context of dynamic signa-
ture generation [11] and malicious port scan analysis [9].
Regardless of the malware behavior model used, the de-
sign and integration of other severity metrics into the ﬁ-
nal blacklist generation process can be carried out in a
similar fashion.
For the set of log entries over the relevance-calculation
time window, we calculate several attributes for each at-
tacker’s /24 network address. (Our blacklists are speci-
ﬁed on a per /24 basis, meaning that a single malicious
address has the potential to induce a LAN-wide ﬁlter.
This is standard practice for DShield and other black-
lists.) For each attacker, we assign a score to target ports
associated with the attacker, assigning a different weight
depending on whether or not the port is associated with
known malware communications.
Let M P be the set of malware-associated ports, where
we currently uses the deﬁnition in Figure 5. This M P
USENIX Association  
17th USENIX Security Symposium 
113
42 − T CP
53 − T CP
53 − U DP
1433 − T CP
1025 − T CP
135 − T CP
2535 − T CP
2745 − T CP
2082 − T CP
5554 − T CP
5000 − T CP
3127 − T CP
10000 − T CP 10080 − T CP
6101 − T CP
12345 − T CP 11768 − T CP 15118 − T CP 17300 − T CP 27374 − T CP 65506 − T CP
4444 − T CP
9033 − T CP
1434 − U DP
21 − T CP
559 − T CP
2535 − T CP
3410 − T CP
9898 − T CP
17300 − T CP 3140 − T CP
69 − U DP
139 − T CP
2100 − T CP
3128 − T CP
6129 − T CP
9995 − T CP
137 − U DP
445 − T CP
2283 − T CP
3306 − T CP
8866 − T CP
9996 − T CP
Figure 5: Malware Associated Ports
is derived from various AV lists and our honeynet ex-
periences. We do not argue that this list is complete
and can be expanded across the life of our HPB service.
However, our experiences in live malware analysis indi-
cate that the entries in M P are both highly common and
highly indicative of malware propagation.
Let the number of target ports that attacker s connects
to be cm, and the total number of unique ports connected
to be deﬁned as cu. We associate a weighting (or impor-
tance) factor wm for all ports in M P , and a weighting
factor wu for all nonmalware ports. We then compute
a malware port score (P S) metric for each attacker as
follows:
the DShield repository we ﬁnd many cases of sources
(such as from China, Russian, the Czech Republic) that
exclusively target international victims. However, this
may also illustrate a weakness in the DShield contributor
pool, as there may be very few contributors that operate
sensors within these countries. We incorporate a damp-
ening factor δ (0 ≤ δ ≤ 1) that allows the consumer
to express the degree to which the IR factor should be
nulliﬁed in computing the ﬁnal severity score for each
attacker.
Finally, we compute a malware severity score M S(s)
for each candidate attacker that may appear in the set of
ﬁnal blacklist entries:
P S(s) =
(wu × cu) + (wm × cm)
cu
(4)
Here, we intend wm to be of greater weight than wu,
and choose an initial default of wm = 4∗wu. P S has the
property that even if a large cm is found, if cu is also large
(as in a horizontal portscan), then P S will remain small.
Again, our intention is to promote a malware behavior
pattern in which malware propagation will tend to target
fewer speciﬁc ports, and is not associated with attackers
that engage in horizontal port sweeps.
Next, we compute the set of unique target IP addresses