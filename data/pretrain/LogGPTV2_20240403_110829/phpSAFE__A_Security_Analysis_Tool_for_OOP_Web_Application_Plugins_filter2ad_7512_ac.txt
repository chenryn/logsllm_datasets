### 1. Introduction
The web application plugins, which account for 23% of the web [4], were the focus of this study. Specifically, we gathered both current (2014) and two-year-old (2012) versions of 35 WordPress plugins. This selection was made to ensure a diverse and representative sample, allowing for meaningful experimental results and manual verification of reported vulnerabilities. The rationale behind using two versions of each plugin is to evaluate the performance of static analysis tools over time and to understand how the security of the plugins evolves.

### 2. Plugin Selection
We selected 35 WordPress plugins, which is a reasonable number for conducting experiments, including manual verification of all reported vulnerabilities. The diversity of the selected plugins, as discussed in [3], ensures that the results are representative. The older versions (2012) were analyzed in 2013, and the vulnerabilities found were communicated to the developers, providing a baseline for comparison.

### 3. Tool Selection
For the study, we chose well-known, free static analysis tools for web applications: RIPS and Pixy. These tools are among the most referenced PHP static analysis tools, though they lack support for Object-Oriented Programming (OOP) analysis. Both tools have been the subject of several scientific publications [14], [7], [3]. RIPS has been continuously developed until 2014, while Pixy has not been updated since 2007.

### 4. Execution of Tools
We executed phpSAFE, RIPS, and Pixy to search for vulnerabilities in the collected plugins. Each tool has different execution methods, features, configurations, and user interfaces. We automated the execution process where possible, adhering to default configurations to prevent bias.

- **phpSAFE**: We developed a PHP script to automate the execution of phpSAFE, which processes all plugin files and collects the results into a single log file.
- **RIPS**: We used RIPS' web interface to search for vulnerabilities one file at a time, configuring it with verbosity level “show secured +1,2” and vulnerability types “SQL Injection and Cross-Site Scripting.”
- **Pixy**: We created a shell script to automate the execution of Pixy via the command line, storing the results in log files. We also enabled the “–A” flag to handle the PHP reference operator “&.”

### 5. Analysis of Results
The results from each tool were normalized and merged into a single repository. A security expert (a computer science PhD student) manually verified the reported vulnerabilities to identify misclassifications, a labor-intensive task. Automated security tools often generate a high number of false alarms, making this step crucial. The confirmed vulnerabilities were considered the true set of vulnerabilities in the plugins. Due to resource constraints, a comprehensive manual analysis to find missed vulnerabilities was not performed, leading to an optimistic view of the tools' performance.

### V. PHPSAFE EVALUATION

#### A. Overall Analysis
Table I presents the global results obtained by executing phpSAFE, RIPS, and Pixy on all plugins. The table includes metrics such as True Positives (TP), False Positives (FP), Precision, Recall, and F-score for both the 2012 and 2014 versions of the plugins.

- **phpSAFE** detected 151 vulnerabilities in 10 plugins from the 2012 version and 179 vulnerabilities in 7 plugins from the 2014 version, primarily related to the use of WordPress objects. RIPS and Pixy did not detect any such vulnerabilities.
- **RIPS** and **Pixy** showed varying performance, with RIPS detecting more vulnerabilities and having higher precision and recall compared to Pixy.

#### B. Vulnerability Detection Overlap
No tool achieved 100% recall, indicating that using multiple tools can help detect more vulnerabilities. Figure 2 illustrates a Venn diagram showing the overlap of vulnerabilities detected by each tool. Combining the results, we identified 394 distinct vulnerabilities in the 2012 versions and 586 in the 2014 versions, representing a 51% increase over two years.

### Conclusion
phpSAFE outperformed RIPS and Pixy in terms of detection rate, precision, recall, and F-score. Its ability to handle OOP and its out-of-the-box configuration for WordPress plugins contributed to its superior performance. However, even with phpSAFE, some vulnerabilities remain undetected, highlighting the need for additional assurance activities. The results suggest that phpSAFE should be the preferred tool for critical applications, but the use of multiple tools can provide a more comprehensive security assessment.