count for 23% of the web [4].
2) Gathering current and two-years-old versions of the web 
application plugins (from 2012 and 2014). We selected a set of 
35 WorPress plugins, which is a reasonable number that allows 
both the execution of the experiments (including a manual ver-
ification of all the vulnerabilities reported by the static analysis 
tools), and that could be representative enough to obtain mean-
ingful results. The reasoning behind the selection of the plugins 
was to include a very diverse set, as discussed in [3]. The need 
for the two versions of each plugin is justified by the goal to
study if the tools are able to maintain their performance as the 
code of the plugins evolves and also to understand how the se-
curity of the plugins evolves over time. The older plugin ver-
sions should have the vulnerabilities reported to their develop-
ers to understand what actions were taken to mitigate them. In 
fact, the 2012 version of the plugins selected were analyzed in 
2013 and the vulnerabilities found were communicated to the 
developers by then [3]. 
3) Selection  of  well-known  free  security  static  analysis 
tools for web applications for comparison purposes. RIPS and 
Pixy are two of the most referenced PHP static analysis tools, 
although they are not ready for OOP analysis. They also have 
been  subject  of  several  scientific  publications  [14],  [7],  [3].
RIPS has been developed  over the past years until 2014, but 
Pixy has not been updated since 2007. 
4) Execution of phpSAFE and the other tools to search for 
vulnerabilities in the collection of plugins. Different tools have 
different ways of being executed, as they have diverse features, 
configurations and user interfaces. Whenever possible we auto-
mated the execution of each tool considering the following as-
pects (to prevent bias, besides the options below, we executed 
the tools with their default configuration):
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
(cid:120) phpSAFE provides a class that can be easily integrated in 
other PHP projects, so we developed a PHP script to auto-
mate the process. It executes phpSAFE for all the plugin files 
and collects the results into a single log file. 
(cid:120) RIPS has to be interacted through its rich web interface to 
search for vulnerabilities one file at a time. It was configured 
with verbosity level “show secured +1,2” (for all the origins 
of the malicious input) and vulnerability type “SQL Injection 
and Cross-Site Scripting” (since it has many other vulnera-
bility types). 
(cid:120) Pixy is executed through a command line interface so we de-
veloped a shell script to automate the process. By configur-
ing Pixy flags it is able to store all the results as a set of log 
files. We also activated the “–A” flag that enables the tool to 
cope  with  the  PHP  reference  operator  “&”  (ex.  $varia-
ble1=& $variable2). 
5) Analysis of the results. As each tool delivers the results 
in a specific format we normalized and merged all of them into 
a  single  repository.  The  vulnerabilities  reported  by  the  tools 
were manually verified by a security expert (a computer science 
PhD student) looking for misclassification issues, which was a 
labor intensive and time consuming task. This is however, an 
important quality assurance aspect, given that it is well known 
that automated security tools typically originate a high number 
of false alarms. The total number of vulnerabilities detected by 
the tools and confirmed manually are those that we consider as 
the real set of vulnerabilities the plugin have. Due to the unfea-
sibly large amount of work, a manual analysis of the plugins 
looking for the vulnerabilities missed by the tools was not per-
formed. Therefore, the data about the number of vulnerabilities 
detected and missed by the tools gives an optimistic view of the 
performance of the tools. This is a best effort result that may be 
improved  using  more  tools,  for  example.  Each  vulnerability 
confirmed by the expert was also further analyzed in order to 
obtain  more  information  about  its  characteristics,  like  input 
vectors, vulnerable variable domain and if it is present in both 
versions of the plugins. 
V. PHPSAFE EVALUATION
This section presents the results of the experiments, starting 
with an overall analysis and then going into the details.  
A. Overall analysis 
Table  I  depicts  the  global  results  obtained  by  executing 
phpSAFE, RIPS and Pixy with all plugins. For each tool there 
are two columns: one for the most recent version of the plugins 
(V. 2014) and another for the older version (V. 2012). The table 
presents the values of the chosen metrics: TP, FN, Precision, Re-
call and F-score. The FN is needed to calculate the Recall and 
this  implies  knowing  all  the  vulnerabilities  present  in  the 
plugins. As mentioned before, we did not search the plugins for 
all the possible vulnerabilities using all possible means, like a 
thorough  manual  code  review  and  using  commercial  tools. 
Therefore we considered as the FN of one tool the vulnerabilities 
that it did not detect but were detected by the other tools. So, the 
value of the Recall metric is also optimistic. 
Of  the  35  plugins  analyzed,  19  are  developed  in  OOP. 
phpSAFE found 151 vulnerabilities related to the use of Word-
Press objects in 10 plugins of the 2012 version, and 179 vulner-
abilities in 7 plugins of the 2014 version. RIPS and Pixy were 
304304
TABLE I. 
VULNERABILITIES OF 2012 AND 2014 PLUGIN VERSIONS
X
S
S
True Positives
False Positives
Precision
Recall
F-Score
phpSAFE
RIPS
V. 2012
307
63
83%
85%
84%
V. 2014 V. 2012 V. 2014
288
374
47
57
87%
86%
53%
68%
76%
65%
134
79
63%
37%
47%
8
2
9
5
Pixy
V. 2012 V. 2014
50
185
21%
13%
16%
0
0
-
0%
-
50
187
21%
13%
16%
20
197
9%
4%
5%
0
0
-
0%
-
20
208
9%
3%
5%
S
Q
L
i
G
l
o
b
a
l
Precision
Recall
F-score
True Positives
False Positives
0
1
0%
0%
-
304
79
79%
52%
63%
not able to detect any vulnerability of this kind. 
80%
100%
89%
315
65
83%
80%
81%
64%
100%
78%
387
62
86%
66%
75%
0
0
-
0%
-
134
79
63%
34%
44%
True Positives
False Positives
Precision
Recall
F-score
Results show that phpSAFE is the tool that detects more vul-
nerabilities (True Positives). It is followed by RIPS and Pixy, 
which has the lowest detection value. The detection rate trend 
ranking is also followed by the other metrics (Precision, Recall 
and F-Score), for which phpSAFE also has the highest values 
followed by RIPS and Pixy. This means that phpSAFE is able 
to  detect  vulnerabilities  more  exactly  (Precision)  and  that  it 
leaves  less  vulnerabilities  undetected  (Recall)  than  the  other 
tools.  phpSAFE  also  has  the  best  F-Score  among  the  tools. 
These results show that phpSAFE should be the tool chosen for 
all situations, from business-critical applications to the less crit-
ical  scenarios.  However,  it  still  leaves  vulnerabilities  unde-
tected, so other assurance activities should also be used. 
This ranking of phpSAFE, RIPS and Pixy holds also true 
when considering 2012 and 2014 versions of the plugins. One 
of the reasons for the detection performance of phpSAFE is its 
ability to cope with OOP and its out-of the-box configuration for 
WordPress plugins. Comparing the two versions of the plugins, 
it  seems that  phpSAFE  and  RIPS are  up-to-date  with  current 
programming practices, as they detected more vulnerabilities in 
recent plugins. Conversely, Pixy detected less, maybe due to the 
lack of upgrades since 2007. 
phpSAFE was the only tool able to detect correctly SQLi 
vulnerabilities, which is an odd result, since both RIPS and Pixy 
are also capable of detecting SQLi. This may be due to the small 
number of SQLi in the plugins analyzed, which may not have 
triggered the detection mechanism of these tools. An interesting 
result is the 115% increase in XSS detection by RIPS from the 
2012 to the 2014 version. This occurred because RIPS was able 
to detect vulnerabilities in some files of the 2014 versions that 
phpSAFE was unable to parse because these files had many in-
cludes and required a lot of memory. 
In spite of the poor results, Pixy still found a considerable 
number of vulnerabilities not detected by the other tools. It is 
also the only tool that was concerned about the register_globals 
= 1 PHP directive. In fact, half of the vulnerabilities it found 
were due to this directive. However, nowadays the PHP default 
configuration is much safer than it was back in 2007 when Pixy 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
was last updated. Critical configuration variables are now dep-
recated, not available or they have safer default values, like the 
register_globals, which is currently deactivated by default in the 
PHP configuration file. This may justify why the other tools did 
not detected this vulnerability type. 
During the analysis process we also observed that although 
phpSAFE and RIPS are able to detect vulnerabilities in functions 
that are not called from the plugin code, Pixy is unable to do so. 
This may be common in plugins because some functions are to 
be called from the main application, so this is a feature that all 
tools prepared for analyzing plugins should have. 
B. Vulnerability detection overlap 
Since  no  tool  presents  a  100%  Recall,  using  more  tools 
should  allow  detecting  more  vulnerabilities.  Conversely,  it  is 
also likely that different tools may report some common vulner-
abilities. In fact, we found such situations during the manual ver-
ification of the vulnerabilities. They are depicted in Fig. 2 that 
shows a Venn diagram having the radius of the circles propor-
tional to the number of vulnerabilities, providing a comparative 
visual image of the coverage of each tool. 
Combining the results of all tools we detected 394 distinct 
vulnerabilities in 2012 versions and 586 in 2014 versions. This 
is an increase of 51% in just two years. In the diagram we can 
see that, although some vulnerabilities were reported by several 