after  the  original  server  exports  those  aforementioned 
quantities  to  the  database,  only  the  recovery  server  is 
allowed  to  access  them.  This  is  possible  because  to  the 
original  SSH  server,  the  recovery  server  is  a  known 
identifiable  entity,  i.e.,  the  database  can  authenticate  the 
recovery server before granting access.  
Finally, all these extra exporting and importing happen 
in  a  dedicated  point-to-point  physical  channel  and  is 
totally transparent to the client or the third party.  From the 
third  party’s  point  of  view,  the  CPR  is  just  like  a  regular 
SSH session, except that it is short and the recovery server 
promptly  resumes  connection  to  the  original  client  at  the 
end of it. 
3.  Related Work 
Our primary motivation is to provide tools that enhance 
reliability,  which  can  easily  be  attached  to  the  existing 
infrastructure  without  making  any  modifications  to  the 
client.  This  contrasts  with  previous  solutions  whose 
purpose  is  to  provide  continuity  of  service  for  mobile 
clients  [9,14,18,23],  perform  dynamic  load  balancing 
using  content-aware  request  distribution  [5,15],  do  socket 
migration as part  of  a  more general process  migration [7-
8],  or  build  network  services  that  scale  [13].  The 
difference  in  motivation  between  our  work  and  the 
previous  methods  presents  special  challenges  and  has 
subtle effects on the proposed architecture. 
Much  of  the  previous  work  proposes  modifications  to 
TCP  [1,2,16-17,  23-25]  thus  making  client  transparency 
difficult,  if  not  impossible.  One  way  to  make  these 
solutions  work  with  legacy  clients  is  by  interposing  a 
proxy: it uses the new protocol by default, but switches to 
TCP  if  that  is  the  only  protocol  the  client  understands. 
This  approach  in  general  has  a  few  drawbacks.  First  and 
foremost,  instead  of  removing  the  original  single-point  of 
failure, it introduces another. These methods also create an 
additional  point  of  indirection,  potentially  impacting 
performance  of  normal  communication  and  potentially 
introducing an additional security vulnerability. 
One way to achieve fault tolerance is to build recovery 
machinery  into  the  server  and  develop  clients  to  take 
advantage  of  this  feature.  The  feature  may  be  user 
controlled,  such  as  the  “REST”  restart  command  in  FTP, 
or it may be hidden from user control. An example of such 
a  methodology  is  Netscape’s  SmartDownload  that  is 
currently  gaining  some  popularity  [10].  This  approach 
requires modifying the clients and servers, and recoding of 
applications. 
To  the  best  of  our  knowledge,  we  are  the  first  to 
describe a method to migrate a secure TCP connection in a 
client transparent way.  
4.  Background 
SSH is a protocol for secure remote login and other secure 
network services over an insecure network.  SSH encrypts 
all 
to  effectively  eliminate  eavesdropping, 
connection  hijacking,  and  other  network-level  attacks.  
Additionally, it provides myriad secure tunneling  
traffic 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:08 UTC from IEEE Xplore.  Restrictions apply. 
Client
“SSH-2.0_OPENSSH_3.5p1”
“SSH-2.0_OPENSSH_3.5P1”
SSH_MSG_KEXINIT
SSH_MSG_KEXINIT
Server
1
3 Key exchange begins
2
4
5
Choose x, e = g x mod p 7
10
11
Public key authentication 13
request
Send signature
generated using client’s 
private key
15
Request to open a
channel
Pseudo-terminal
allocation request
Start shell request
17
19
20
Diffle-Hellman Group and Key Exchange (cid:170)
SSH_MSG_KEX_DH_GEX_REQUEST
(min, max, preferred group size in bits) 
SSH_MSG_KEX_DH_GEX_GROUP
(p: safe prime; g: generator)
6
SSH_MSG_KEX_DH_GEX_INIT
e
SSH_MSG_KEX_DH_GEX_REPLY
(f, signature) 
SSH_MSG_NEWKEYS
SSH_MSG_NEWKEYS
Authentication Protocol (cid:170)
SSH_MSG_SERVICE_REQUEST
(ssh-userauth)
8 Choose y,
   compute f = g y mod p 
9
Message Encrypted Below
SSH_MSG_SERVICE_ACCEPT
12
SSH_MSG_USERAUTH_REQUEST
(public key) 
SSH_MSG_USERAUTH_PK_OK
SSH_MSG_USERAUTH_REQUEST
SSH_MSG_USERAUTH_SUCCESS
Connection Protocol (cid:170)
SSH_MSG_CHANNEL_OPEN
14 Server supports public
      key authentication
      request 
16 Verify signature using
      client’s public key
SSH_MSG_CHANNEL_OPEN_CONFIRMATION
18
SSH_MSG_CHANNEL_REQUEST
(pty-req)
SSH_MSG_CHANNEL_REQUEST
(shell)
SSH_MSG_CHANNEL_WINDOW_ADJUST
SSH_MSG_CHANNEL_DATA
Interactive Session (cid:170)
Not shown here.
21 Adjust window size 
22  Send login prompt and 
welcome message
Figure 2. SSH protocol sample packet exchange
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:08 UTC from IEEE Xplore.  Restrictions apply. 
capabilities and authentication methods.  With an installed 
base of several million systems, it is the de-facto standard 
for  remote  logins  and  a  common  conduit  for  other 
applications. Increasingly, many organizations are making 
SSH  the  only  allowed  form  of  general  access  to  their 
network  from  the  public  Internet  (i.e.,  other  than  more 
specialized access such as via HTTP/HTTPS).  
[19] 
SSH  consists  of 
three  major  components:  The 
Transport  Layer  Protocol 
server 
authentication,  confidentiality,  and  integrity  with  perfect 
forward  secrecy.    The  User  Authentication  Protocol  [20] 
authenticates  the  client  to  the  server.    The  Connection 
Protocol [21] multiplexes the encrypted tunnel into several 
logical channels.  For further details refer to [19-22]. 
provides 
We  will  briefly 
show  how  SSH  works  by 
demonstrating  protocol  level  packet  exchange  during  a 
typical session in Figure 2 (previous page). 
the 
key 
exchange 
When  the  connection  has  been  established,  both  sides 
send  an  identification  string  in  steps  1  and  2.    After 
exchanging 
message 
(SSH_MSG_KEXINT)  in  steps  3  and  4,  each  side  agrees 
on which encryption, Message Authentication Code (MAC) 
and  compression  algorithms  to  use.    Steps  5  through  8 
consist  of  Diffie-Hellman  group  and  key  exchange 
protocol which establishes various keys for use throughout 
the  session.    It  is  the  focus  of  our  recovery  research  and 
will be elaborated further in section 5.  
exchange 
Following  the  successful  key  setup  phase,  signaled  by 
the 
message 
(SSH_MSG_NEWKEYS) in steps 9 and 10, messages are 
encrypted throughout the rest of the session. 
keys 
new 
of 
Steps 11 to 16 illustrate user authentication protocol, in 
particular, the public key authentication method.  Steps 17 
and  above  illustrate  the  SSH  connection  protocol,  which 
provides  interactive  login  sessions,  remote  execution  of 
commands,  and  forwarded TCP/IP  connections.   Figure  2 
also  shows  opening  a  remote  channel  (17,  18),  and 
pseudo-terminal and shell start requests (19, 20).  After the 
server  sends  the  login  prompt  and  greeting  messages,  the 
client begins transferring data, entering interactive session. 
5.  SSH Recovery 
5.1.  Overview 
We  have  investigated  two  feasible  approaches,  a  full 
replay  “Proxy”  based  approach  and  Controlled  Partial 
Replay  approach  (CPR).  After  a  brief  discussion  of  the 
Proxy  approach,  this  paper  will  focus  on  the  CPR 
approach because of its performance benefits. 
A Proxy style recovery daemon is a standalone piece of 
software  with  some  understanding  of  the  protocol  whose 
sessions  are  to  be  recovered.  However,  it  does  not  listen 
on  any  original  service  port,  only  on  a  port  dedicated  to 
recovery  requests.  When  a  recovery  request  arrives,  the 
replaying 
the  monitor's  database.  After 
Proxy  opens  a  new  connection  to  an  existing  service 
daemon on a designated recovery host and replays most of 
the entire initial part of the original conversation between 
the  client  and  original  server,  a  conversation  it  retrieves 
from 
the 
connection  up  to  the  point  it  was  (almost)  disrupted,  the 
Proxy  simply  acts  as  a  two-way  pipe  between  client  and 
new  server.      In  recovering  an  SSH  daemon,  the  Proxy 
recovery  daemon  would  invoke  a  new  sshd  process  then 
replay the entire original conversation to the recovery SSH 
daemon  (acting  as  if  it  were  the  client),  so  that  the  new 
sshd  could  advance  the  state  of  the  encryption  engine  to 
match that of the original and now defunct sshd.  (The new 
sshd  would  have  itself  been  modified  to  use  the  same 
encryption  data  as  the  original,  as  is  discussed  below,  in 
that this is a modification necessary to both approaches.) 
In  the  CPR  approach,  once  the  monitor  detects  server 
failure, the CPR daemon starts an SSH recovery server—a 
modified copy of the regular SSH server—then performs a 
brief  replay  of  the  client  process  that  mimics  the  original 
SSH  client  in  that  it  sends  and  receives  the  same 
sequences  of  the  same  packets  in  the  same  order  as  the 
original client.  (These are in no way sent to or seen by the 
original  client.)    The  recovery  server  is  modified  to 
generate the same set of encryption/decryption/MAC keys 
as  the  original  session,  as  described  below.    This  replay 
proceeds  until  authentication  and  connection  are 
successful  and  the  recovery  server  arrives  at  the  same 
connection  state  as  the  original  server  was.  The  recovery 
client  then  ends  the  partial  replay  process  by  sending  to 
the 
user-defined  message 
“SSH_USEFUL_REPLAY_END” which contains TCP/IP 
kernel  parameters  (sequence  numbers,  port  numbers,  IP 
addresses,  etc.). 
  Upon  receiving  this  message,  the 
recovery  server  restores  these  TCP/IP  kernel  parameters 
via a small kernel module loaded on the recovery system, 
so  that  the  sshd  process  invisibly  resumes  the  connection 
to the original client, thus completing the recovery process.  
The recovery client terminates itself afterwards.  
recovery 
server 
a 
In order for our CPR to work, we need to guarantee that 
the SSH recovery server as well as the recovery client can 
derive the same set of keys as  those of the original session, 
and  in  a  secure  manner.    In  addition,  we  need  to  address 
protocol specifics which normally are designed to prevent 
replay  from  happening  in  the  first  place.    We  will  show 
that  our  recovery  approach  not  only  works,  but  also  does 
not lessen the security of SSH. 
Lastly,  while  the  modifications  needed  for  recovery 
must be made to the SSH software on the server side, the 
changes are not complex (in that they address the protocol 
and  not  the  specific  implementation),  and  can  be  easily 
expressed as simple patches for existing versions of SSH; 
ultimately these could be incorporated directly into future 
SSH  revisions  as  standard  functionality  or  optional 
modules. 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE