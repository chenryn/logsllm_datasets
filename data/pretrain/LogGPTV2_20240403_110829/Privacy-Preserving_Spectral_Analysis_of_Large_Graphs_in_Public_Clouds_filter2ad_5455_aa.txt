# Title: Privacy-Preserving Spectral Analysis of Large Graphs in Public Clouds

## Authors:
Sagar Sharma, James Powers, and Keke Chen

## Abstract
Large graphs, such as those representing user interactions in social networks or customer rating matrices in collaborative filters, hold significant value for both businesses and research. These graphs are not only large but also dynamic, requiring substantial computing resources to maintain. With the widespread adoption of public cloud resources, graph owners may wish to leverage cloud services for scalable storage and computation. However, privacy and data ownership in the cloud have become major concerns.

In this paper, we investigate privacy-preserving algorithms for spectral analysis of outsourced graphs in the cloud. The core operation, eigendecomposition of large matrices, is crucial for many data mining algorithms. We propose a cloud-centric framework involving three parties: data contributors, data owner, and cloud provider. Graphs are represented as matrices (e.g., adjacency and Laplacian matrices), with elements encrypted and submitted by distributed contributors. The data owner interacts with cloud-side programs to perform spectral analysis while ensuring data privacy from an honest-but-curious cloud provider.

For an \( N \times N \) graph matrix, our goal is to design algorithms where the cloud handles expensive storage and computation with \( O(N^2) \) complexity, while the data owner and contributors' algorithms operate with \( O(N) \) complexity. To achieve this, we develop privacy-preserving versions of two approximate eigendecomposition algorithms: the Lanczos algorithm and the Nyström algorithm, using additive homomorphic encryption (AHE) and somewhat homomorphic encryption (SHE). We study both dense and sparse matrices, with sparse matrices incorporating a differentially private data submission protocol to balance sparsity and privacy. Experimental results show that the Nyström algorithm with sparse encoding significantly reduces data owners' costs; SHE-based methods have lower computational time, while AHE-based methods have lower communication and storage costs.

**Keywords:** Graph Spectral Analysis, Outsourced Computation, Homomorphic Encryption, Differential Privacy, Cloud Computing

## 1. Introduction
The rise of social networks, mobile applications, and sensors has led to a rapid increase in data generation across commerce, science, and health industries. Among these, graph data has become an essential resource [1]. Due to their scale and continuous growth, data owners may turn to cloud resources for scalable storage and computation. However, privacy concerns arise when collecting and mining graph data in the cloud. 

1. **User Concerns**: Sensitive datasets make users reluctant to share them due to mistrust in the data owners' ability to protect data in the cloud.
2. **Data Owner Concerns**: Data owners are keen on preserving the ownership of proprietary data, which is critical for business operations and scientific research. Recent studies [29] and incidents [9] highlight the vulnerability of sensitive data in the cloud to information theft, eavesdropping, and insider attacks.

### Challenges in Protecting Data Privacy
Protecting data privacy in the cloud is complex. Traditional methods involve storing encrypted data (e.g., using AES) and decrypting it locally for processing. However, this approach becomes impractical for large-scale data due to the non-linear complexity (e.g., \( O(N^2) \) for \( N \)-node graphs).

Alternative approaches include developing novel encryption methods, such as fully homomorphic encryption (FHE) [16] and garbled circuits (GC) [35], which allow computations on encrypted data. While theoretically promising, FHE and GC are computationally expensive and impractical for large datasets.

### Proposed Framework
We propose a practical cloud-centric framework for graph spectral analysis that addresses these challenges. The framework involves three parties: the cloud, data contributors, and the data owner. Data contributors submit encrypted graph data, and the data owner interacts with the cloud to perform spectral analysis while maintaining privacy from an honest-but-curious cloud provider.

Our framework aims to partition the work between the cloud and the client, with the cloud handling \( O(N^2) \) operations and the data owner performing \( O(N) \) tasks. We consider two approximate eigendecomposition algorithms: the Lanczos method [10] and the Nyström method [15]. Both algorithms can be adapted to the cloud-centric framework, with the cloud performing the expensive matrix operations and the data owner contributing to simpler tasks.

### Contributions
1. **Data Masking Algorithms**: Two algorithms for protecting exposed operands in matrix-vector and matrix-matrix multiplications for AHE-encrypted data, maintaining \( O(N) \) complexity for the data owner.
2. **Algorithm Design**: AHE-based and SHE-based Lanczos and Nyström algorithms, specifically designed for sparse graphs, achieving practical work allocation.
3. **Differential Privacy for Sparse Matrices**: An efficient local differentially private method for inserting fake edges in sparse graph matrices without affecting analysis accuracy.
4. **Experimental Evaluation**: Comprehensive evaluation of AHE- and SHE-based Lanczos and Nyström algorithms using Paillier [27] for AHE and Ring-LWE [7] for SHE, showing that RLWE-based methods have lower computational costs, while Paillier-based methods have lower communication costs.

## 2. Preliminary
This section establishes the necessary background knowledge, including spectral analysis, homomorphic encryption schemes, integer conversion, and differential privacy.

### 2.1 Spectral Analysis
Spectral analysis of graph matrices involves eigendecomposition, yielding eigenvalues and eigenvectors. These provide valuable insights into the structure of matrices and are used in various data mining algorithms. For a symmetric matrix \( A \) of size \( N \times N \), the decomposition is \( A = U \Lambda U^T \), where \( U \) consists of eigenvectors and \( \Lambda \) is a diagonal matrix of eigenvalues.

Complete eigendecomposition has a time complexity of \( O(N^3) \). Approximate methods, such as the Lanczos and Nyström algorithms, reduce this to \( O(kN^2) \) for top-k eigenvectors/values. The most expensive operations are matrix-vector and matrix-matrix multiplications.

### 2.2 Homomorphic Encryption
We use two types of homomorphic encryption: AHE and SHE. AHE allows addition and multiplication by plaintext, while SHE supports one level of homomorphic multiplication. These methods are more efficient than FHE and GC for our purposes.

### 2.3 Integer Conversion
Integer conversion methods are used to handle floating-point values in homomorphic encryption. This ensures that the results of operations, including sign and floating-point values, are correctly handled.

### 2.4 Differential Privacy
Differential privacy is used to protect the privacy of sparse graph matrices. It involves adding noise to the data to ensure that individual contributions cannot be distinguished, thus maintaining privacy while preserving the utility of the data.

## 3. Framework and Algorithms
This section provides a detailed description of our framework and the AHE- and SHE-based algorithms for privacy-preserving outsourced graph spectral analysis, including analyses of privacy guarantees and costs. We also present the differentially private solution for sparse graph data submission.

### 3.1 Cloud-Centric Framework
The framework involves three parties: the cloud, data contributors, and the data owner. Data contributors submit encrypted graph data, and the data owner interacts with the cloud to perform spectral analysis while ensuring privacy from an honest-but-curious cloud provider.

### 3.2 Algorithm Design
#### 3.2.1 Lanczos Method
The Lanczos method is an iterative algorithm for finding the top-k eigenvectors and eigenvalues of a large symmetric matrix. The most expensive step is the matrix-vector multiplication, which is performed by the cloud. The data owner contributes to the initialization and updates of the vectors.

#### 3.2.2 Nyström Method
The Nyström method is a sampling-based algorithm for approximating the eigendecomposition of a large matrix. The most expensive step is the matrix-matrix multiplication, which is also performed by the cloud. The data owner contributes to the sampling and updates of the submatrices.

### 3.3 Privacy Guarantees and Costs
We analyze the privacy guarantees and costs of our AHE- and SHE-based algorithms. The AHE-based methods have smaller ciphertext sizes, making storage and communication efficient, while the SHE-based methods have lower computational costs.

### 3.4 Differentially Private Sparse Matrix Submission
For sparse graph matrices, we propose a differentially private method for inserting fake edges. This method ensures that the encrypted values of the fake edges are indistinguishable from real edges, thus maintaining privacy while preserving the accuracy of the analysis.

## 4. Experimental Evaluation
We conduct a comprehensive cost evaluation of our AHE- and SHE-based Lanczos and Nyström algorithms on three social graph datasets. The results show that RLWE-based methods have lower computational costs, while Paillier-based methods have lower communication costs.

## 5. Related Work
This section discusses related work in the areas of graph spectral analysis, homomorphic encryption, and differential privacy, highlighting the contributions and limitations of existing approaches.

## Conclusion
In this paper, we presented a cloud-centric framework for privacy-preserving spectral analysis of large graphs. Our approach leverages AHE and SHE to enable efficient and secure computation in the cloud, while maintaining the privacy of the data and the analysis results. The proposed algorithms and protocols provide a practical solution for outsourcing graph spectral analysis, balancing privacy, efficiency, and scalability.

## References
[1] ... (List of references)

---

**Note**: The content may change prior to final publication. Citation information: DOI 10.1109/TKDE.2018.2847662, IEEE Transactions on Knowledge and Data Engineering.