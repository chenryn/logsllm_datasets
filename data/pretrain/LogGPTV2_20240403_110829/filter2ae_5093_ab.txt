标记一个方法时，对方法的签名加入了所在类的信息，那如果一个类的方法是继承至其父类的方法，那可能会导致获取这个类的方法时的结果为空，从而漏掉了调用链的构造。
因此需要在构造链时对继承至父类的方法进行处理。
【来自 threedr3am 师傅的[版本](https://github.com/threedr3am/gadgetinspector)】
## 路径爆炸
在循环过程中，由于各种原因可能导致最终得到的调用链非常之长，并且中间具有多次重复性的调用方法的情况。
需要进行去重和对调用链中方法出现的次数增加阈值等处理。
【来自 5wimming 师傅的[版本](https://github.com/5wimming/gadgetinspector)】
## transient 字段
标识着 transient 的字段将不会加入到序列化和反序列化的流程中，这是众所周知的事实，因此 GadgetInspector
在收集信息和污点分析过程中遇到 transient 修饰的字段时都进行了忽略。
但实际上，transient 字段只代表开发人员不希望 Java 原生序列化流程来处理它，不代表开发人员自己不会处理它，可能通过自定义
writeObject/readObject 方法内的逻辑来还原对象的状态，因此 transient
修饰字段的对象不会被自动反序列化，但是可以参与反序列化流程，前提是用户在调用前对其进行了处理。
例如 ysoserial 中的 MozillaRhino1 链中用到的 `org.mozilla.javascript.MemberBox`
类，虽然其成员变量都由 transient 修饰，看起来好像不能参与序列化/反序列化，但类中定义了 writeMember/readMember 方法用来在
writeObject/readObject 中调用中还原，依旧可以参与链条。
但作为静态分析，不能完全开放对 transient 的限制，还是需要在某些维度进行判断。
## 动态代理
在使用中可以发现， GadgetInspector 是无法完整扫出经典 CC 链和一些常用的 ysoserial 中的链的，这是为什么呢？
原因是在这些链条中，部分 gadget 之间的调用本就不是串联的，而是在构造时使用了动态代理技术，通过 InvocationHandler 实现类的
invoke 方法中的逻辑进行向后的触发。
拿 CC1 举例，是使用 AnnotationInvocationHandler 生成的动态代理类调用
`AnnotationInvocationHandler#invoke` 方法触发 `TransformedMap#get` 方法，此时可以将其作为
Source 点进行处理，GadgetInspector 就是这么做的。
但是在 Jdk7u21 等链中，则是触发调用 `AnnotationInvocationHandler#equalsImpl`
方法来调用代理对象的全部方法。此时则可以将其作为 Sink 点处理。
再举一个例子，在 CC3 链中，除了入口点， AnnotationInvocationHandler 还充当了代理 LazyMap 的动态代理
handler 类，串联反序列化链的作用。
除了 AnnotationInvocationHandler 之外，在一些特定的包中还有能触发特定方法的 InvocationHandler
的子类，是反序列化链的构造有更大的灵活空间。
所以可以看到，InvocationHandler 在反序列化构造中可以起到相当大的作用，既能当 Source，又能当 Chain，还能当
Sink，因此需要对其进行格外的处理。
## Agent 技术加持
GadgetInspector 是静态的分析手段，借助了 guava 的工具类获取指定 ClassLoader 下的全部类的资源信息，先不说
GadgetInspector 自己的依赖会污染到最终结果，还面临的问题是程序运行时从字节码动态加载，或根据某些规则动态生成的类将无法纳入利用链中。
虽然目前没有这样的利用链，但是理论上并不排除，而且也许还可能绕过一些限制，因此这里产生的一个想法就是加持 Java Agent
技术来获取运行系统中全部的类。
这部分在做的时候对实际效果不报有期待，但如果效果好的话，也可以算是给 Java Agent 产品的一种赋能。
## Sink/Source 点增强
这里的增强主要分为两个，一个是补充，一个是前/后置。
GadgetInspector 内置的 Sink 和 Source 点都不全，需要更完全的补充，例如 Source 点通用的只写了
`ObjectInputStream#readObject`、`Object#finalize/hashCode/equals`。Sink
点只写了一点点可利用的点，在目前利用手段多种多样情况下，实际上有非常多可以补充的点。
另外一个是“ Source 点后置”以及“Sink
点前置”。在目前已经掌握到了一些基础信息后，没必要将全部的工作都交给污点分析和最终的利用链组合逻辑。可以利用已有的知识将利用链的构造进行缩短。
例如：可用明确利用的点比如 `org.apache.commons.collections.Transformer#transform` 可以直接做为
sink 点，没必再走到 `Method#invoke`。用动态代理生成的类作为反序列化入口时可以直接使用
`java.lang.reflect.InvocationHandler#invoke` 作为入口点等等。
## 反射
GadgetInspector 内置了一些白名单污点流，默认一些类的方法的哪几个参数可以污染返回值，其中一个如下：
    {"java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", 0, 1}
在 Sink 点中，肯定是有 `java.lang.reflect.Method#invoke` 反射方法调用作为最终的执行点，但是调用之前需要先获得
Method 对象：
  * 这个 Method 对象可能是可反序列化类的成员变量。
  * 这个 Method 对象可能是在调用过程中用 `Class#getMethod` 获得的。
第一种情况比较好处理，直接构造进去即可；第二种情况则不然，如果要实现任意方法的反射调用，`Class#getMethod`
的两个参数都要可控。但在静态污点分析中，有一个参数能影响到结果，这个污点就能传过来。
所以反射和类似的 Sink 点势必要导致一些误报。这里可以选择在后期进行人工参与，也可以选择针对反射的 Sink 点进行特殊处理。
## 其他
还有其他一些乱七八糟的小 BUG ，直接修复一下。
# 0x05 Gadgetor
针对上一节提出的一些问题和处理思路，我将 GadgetInspector
按照个人喜好的代码风格进行了重构，并增强或修改了部分的处理逻辑，形成了新的轮子，这里简单粗暴将其命名为 Gadgetor。
关键的模拟 JVM 帧栈的污点分析的逻辑部分没有改动，但是针对其他的发现流程进行了优化和重写。
Gadgetor 的逻辑看起来也许会更清晰一些，不是更好，不是更优雅，只是也许更清晰一些，并且有了比较清晰的注释，非常适合阅读。
这里简单过一下项目结构，总体的逻辑与之前描述的一致。
收集生成各种信息，记录各种映射。
逆拓扑排序。
污点分析。
剩下就是利用链的构造，主要是优化逻辑，以及对 Sink 点进行了较大程度的丰富。
并且将一些已知反序列化链的关键触发位置进行了 Sink 点前置。
就不再贴出过多的代码了。目前由于扩展之后的 Gadgetor
虽然能扫出利用链，但误报也相对较多，需要人工参与的部分比较多，还需要继续更新和优化，目前代码暂时先不放出来，主要是期待与师傅们进行思路的交流，在沉淀一段时间后再进行开源（懂的都懂）。
# 0x06 效果
光说不练假把式，找一个开源项目试一下。
从图中可以看出，测试的项目得到了 6 个反序列化利用链，经过人工审查后，发现虽然有误报，但是还是有所收获的。
# 0x07 TODO
在这个基础上还可以有一些有趣的待实现的功能，比如：结合中间件的依赖进行挖掘、结合 IAST 也许可以自动化构造 Payload 等等。
对这方面有兴趣或有的师傅可以与我交流，想跳槽的师傅也可以联系我。