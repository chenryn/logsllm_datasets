串行重用的杂凑程序即是下列循环
信号引起中断（5.4节)转至SCAN进程，即
共享的杂凑文件先获取用户，然后如BSCRATGH般动作。释放
并把它们删去。这个程序是
件，那就使后备存储中存放未读出信息块的扇形区不能再使用
获取和释放信号。若用户在未读完文件前，就提前释放他的文
使用和释放的动作。这样，必须修改BSCRATCH，使其能接受
记。合
X8
SHBSCR =acquire-→(BSCRATCH^(release→SCAN))
，为滑除这种危险，需设计一个循环程序，读出这些信息块，
多重杂奏文件
SCAN=μX.(pagetable.right?i→back.i.right?x-→X
这个文件系统可用作附庸进程，在任意多个用户中穿插地共
上两例中，每个时刻只用一个杂凑文作。后备存储通常是非
baok:BSTORE*SHBSCR
[pagetable.empty-SKIP)
*SHBSCR
201
口
---
## Page 225
（2）它保证对实际资源的使用是符合规定的，如SHBSCR确保
的杂文件，即
由(1)叉保证(2)中的规定是不必付山很大代价就能实现的。
为自己的附庸进程，虚拟资源的作用有二
同资源直接通信；而中介的虚拟资源（SHBSCR)，用后把它作
若不考虑资源的限量，上述式子等效于X5中的独占的杂凌文伴
按照远程附庸关系的定义，上式右方等价于
记录指针等表示。为有效地应用这种方法，最好先不讨论实施问
新通道的动态建立。在计算机上实际实施时，可用控制块及激活
的无界集实施虚拟进程的动态建立，以及和这些虚拟进程通信的
题。但愿意更深人了解者，可阅读对X8的下列解释。
中是非常重要的。这个范例的数学定义相当复杂，它使用自然数
实际资源和虚拟资源的上述典型川法，在设计资源共享系统
202
·X8中文件系统的结构和使用方式是在不定个数的用后中共
filesys.i.left!u..filesys.i.rewind..filesys,i.right?x..
在用卢处理器内，杂资文件是用远程附席关系建立的，即
不会忘记释放属形区。
中的扇形区收集起来，形成单一-的相连接的杂凑文件。
每个用卢仅从分配给他的扇形区读入信息，而且在使用后，
(myfile:SCRATCH ..myfile.left;u.-myfile.rewind
myfile::filesys !(..myfile.leftyw..myfile,rewind
myfile::filesys  (..myfile,left!u.myfile,rewind
.-myfile.right?x...)
""myfile.right?x...)
..myfile.right?x...)
7
---
## Page 226
虚拟杂凑文件亦和附蒲的 BSTORE进程通信，但向用后屏。
继之按照X6和X7中说明的格式展开，为
会下已获取的。另外，对这个实例的使用过程都以一对信号围
SHBSCR的某个实例的指标，这个实例是由某个用后在某种机
在jilesys及其用乒间的全部通信是以filesys.i开始，其中i是
通信。这些通信已对用户屏藏，甚至不带存名字filesys。有关的
这恰好和！--段落中用片的通信格式相匹配。匹配的信号对
filesys.i.release)
(filesys.i.acquire->
filesys。故每个案例的外部可见的行为是
每个虚拟杂凑文件的实例都有不同的指标i，而且带有名称
起，即
用自然数作为多重标记，其行为为
序号i和名字back后，其行为如
后备存储的每个扇形区的行为如同进程COPY。
事件是
它用乒的干扰。
我们现在考查FILESYS中的拟杂凑文件和后备存储闻的
filesys.i.left?x..filesys.i,rewind..filesys.i,right!u...
在附庸进程一方，每个虚拟的杂凑文件以获取用后为起始，
filesys,i.release-SKIP)
i.back.j.right.u
i.back.j.left.u
(acquire--...left?x.rewindright! u.--release--.)
μX.(back.i.left?x->back.i.right!x-→X)
(filesys.i.acquire-→--filesys.i.releuse)
表示反向的--个通信
备存储的第}个扇形区传送信息块！
表示由杂凑文件数组的第i个元案向后
，在扇形区上加以
203
---
## Page 227
件写人信息，则会出现死锁的危险。实用中，当后备存储将满
后备存皆量有限时，当后备存储已满，而所有用户还在向杂葵文
似结构的杂凑文件数组完至一样。这个数组是
信过程的一张略图。
关装置使任意两部电话机之间的通信成为现实。
这些指标也是电话交换机中的交错开关的一-种数学刻画，这种开
盘上的任意扇形区通信，而且也可安至地和获取它的用户通信。
了。每个虚拟文件只从已被其写人的扇形区中读出信息块。‘
这样，第1个扇形区已可和虚拟杂凑文件数·组的任意元素通信
204
若后备存储中有无穷多个扇形区，FILESYS的行为和有类
上迹说明中，自然数i和的作用是允许任意杂凑文件和磁
i:(acquire-→(SCRATCH^(release→STOP)))
SHBSCR
USER
Ad03
图6.2
一杂岗文件
交错开关
交错开关
扇形区
后备存储
，图6.2是这个通
心
---
## Page 228
合LPH表示行式打印机，CRH表示读卡机，则单用乒单作业可
可能性。
时，就会推迟新文件的获取，从而极大地减少了出现这类危险的
程，及下面XI中的CR进程，定义
个作业的卡片。为解决这些问题，我们用6.2节X4定义的LP进
分开，卡片仓内的作业卡片亦应分开，以免一个作业会读入下“-
这个设计忽略很多重要的管理细节，如不同作业输出的文件应该
着一个，即
的。共享一-个计算机的最简单的方法是串行地运行作业，一个接
出下列进程执行
定义为
启动这个进程后的合理的时间内，它会成功终止。JOB的字母表
早期，这是一个FORTRAN的监督系统。但是，我们需要假定在
工结果由通道lp，left输出。我们不必了解IOB的内部结构，在
入程序卡，并运行程序从读卡机上读入数据和加工数据，再将加
我们假定用后程序由JOB进程负责运行，它从通道or.right上输
人。批加工操作系统的任务是负责这些作业共享计算机的资源。
上，
，由计算机读人执行。程序所用的数据也紧随在程序之后输
只运行一个作业，然后就终止的操作系统是没有多大用处
BATCH1 =(er:GR / Ip:LP /JOBS)
JOBS=*((er.acquire-→lp.acquire→JOB)s
BATCHo= (cr:CRH / Ip:LPH  *JOB)
JOB1=(or:CRH Ip:LPH JOB)
(cr,release-→lp.release-SKIP))
aJOB={er.right,lp left,V}
6.5操作系统
205
---
## Page 229
到界符卡就释放读卡机，则全部剩余的卡片都要跳过。多余的界
业之间的转移，并且保护每个作业不受其它作业的干扰。
乒共享一个计算机，用乒的作业逐个顺序执行。操作系统加速作
BATCH1是一个最简单的，但可使用的操作系统，它使很多用
速度。为了使输入、输出和处理速度匹配，就需要使用多个读卡
速度比较快，远胜于读卡机和打印机的有关作业的输人和输出的
符卡前的剩余卡片继续被读入并删除，
知用乒释放读卡机。若用后提前释放了读卡机，卡片仓中下个界
道拷贝读人非界符·卡。读到界符卡后，重复地传送这个界符，通
有
符卡会被跳过。从硬件读人信息是用输入h？x。
卢若还想读入卡片，能得到的只是另一个界符卡。若用户尚未读
被获取来读人一个作业文件，然后就被释放。超出界符卡后，用
一个或多个作业的结果。在被JOB使用前，每个输入的文件必须
读入下面一个或多个作业的文件，而多余的打印机可输出前面的
机和打即机。每个时刻只能加工一个作业，多余的读卡机就提前
操作系统BATCH1在逻辑上是完整的。但是中央处理器的
CR=h?x-→if x = separator then CR else(acquire-→CR)
X1一个共享的读卡机
206
共享的读卡机需超前读一张卡片，缓存的-卡片作为其下标，
有一种专用的界符卡，插在每个作业文件的最前面。读卡机
跳过最初的一串界符卡后，进程获取它的那后，并向其右通
CRe=(right!x→h?y-
举例
μX,(h?y-→ if y = separator then CR else X))
release-
else μX,(rightIseparator-→X|release→CR)
if y ≠separator then CRy
二
---
## Page 230
卡片的内容输出给这个进程。定义为
人一个作业后释放这个读-卡机，用乒进程获准执行作业时，就把
X3卷宗式输入
系统的本地资源，由VLPS数组的所有元素共享（见6.4节X8)，即
而实际的行式打即机（6.4节X3)可用多重标记，
所需的虚拟行式打印机的无界数组可定义为
件中的内容。故
虚拟打印机后，实际的打印机（6.4节X3)就被获取来输出暂存文
杂凑文件（6.4节X5）暂存月户进程输出的信息块。用乒进程释放
X2卷宗式输出
所用的卷宗INSPOOL和OUTSPOOL的定义见下面的两个例子。
任意一个正等待输入的文件，和要打印输出的文件，即
这里的BATCH类似于BATCH1，但它使用远程附康关系来获取
技术。
印机上实际输出的间隔内，也必须暂存起来。这种技术叫作卷宗
暂存于某个杂凑交件中；而每个输出的文件，从由JOB产生至打
OPSYS1 = insys:INSPOOL / outsys:OUTSPOOL  BATCH
输入卷宗类似于输出卷宗，·只是先获取实际读卡机，而在输
VLP=(temp:SCRATCH !
每个用户进程使用－·个虚拟打印机，这个虚拟打印机用一个
一个卷宗式操作系统的总体结构是
OUTSP00L = (N:(lp:LP2) / VLPS)
BATCH = *(cr::insys / lp::outays  JOB)
μX.left?x→temp.left!x-→X
VLPS= i:(acquire→VLP)
[ rolease→temp.rewind→(actual::lp !
μY,(temp.right?y-actual,left!y-Y
|temp,empty→SKIP)))
，作为卷宗式操作
207
---
## Page 231
VCR= temp:SCRATCH 
代之为远程附庸进程
存文件要共享同一个后备存储，故需将VLP中的附庸进程
但在历史上，多道程序设计会带来很大厂烦。
从数学上看，
辑描述
辑功能是相同的。下面所定义的操作系统和OPSYS1有相同的逻
存中，应象6.4节X8中建议的，放在后备存储器内。而所有的暂
印机打印。一般情况下，输出文件都很庞大，不宜存在计算机主
为附庸进程，贮存由每个JOB所生产的成行数据，然后输给实际打
此处
OPSYS= insys:INSPOOL  outsys:OUTSPOOL  BATCH4
个处理器硬件，就称为多道处理。多道程序设计和多道处理的逻
适用于这类资源共享。这种技术称为多道程序设计，如果使用多
这些虚拟资源。由于这些作业间不相互通信，简单的穿插方式就
拟行式打印机。这样，就可同时运行多个IOB进程，由它们共享
208
OUTSPOOL(X2)中的VLP使用了SCRATCH进程，把它作
输入和输出卷宗为JOB进程提供了无限多个虚拟读卡机和虚
(μY.(temp.right?x→rightIx-→Y
(μX,actual ,right?x->if x = separator then SKIP
(actual:or !
(temp.rewindacquire-→
↓temp.empty-=rightIseparator-sY))A
，由单道程序设计转向多道程序设计是相当简单的；
temp;SCRATCH I *.
BATCH4=( BATCH)
else temp.left(x-→X));
(release-→SKIP))
口
---
## Page 232
修改某一细节，就很容易确定需要修改的模块。比较容易的改动
能够在后来的系统中，重用前面系统中的大部分模块。更重要的
OP）的设计中，我们特别强调的是模块化的长处。由此，我们
是，每个细节都只涉及系统中的一个或两个模块。因此，一且要
代替等价的
进程
而且OUTSPOOL’和INSPOOL'同于X2及X3，只是用远程附
和SH={lp.i|i≥0}U{er.ili≥0}
输入输出系统中，输人卷宗和输出卷宗共享一个文件系统，即
个作为附虚进程的输入输出系统所组成，即
式重新设计这个系统，并尽可能多地使用前面已定义的模块。
卷宗共享：这样就要涉及系统结构的变更。我们用自顶向下的方
着，必须用多重标记，将FILESYS当作-一个附庸进程，由两个
卷宗和输出卷宗的暂存文件就需共享单一的后备存储。这就意味
改。若有另一个后备存储，则可用此贮存输入文件。否则，输入
而将6.4节X8中的文件系统作为输出卷宗的附庸进程，有
有
这个操作系统由一个成批式多道程序系统BATCH4，和-一
在上述四个操作系统（BATCH1，OPSYS1，OPSYS和
行式打印机的个数
IOSYSTEM =SH:(filesys:FILESYS)
如果输入的卡片量也很大，那么对INSPOOL也应做相应修
读卡机的个数
(filesys:FILESYS / OUTSPOOL)
OP=IOSYSTEM I BATCH4
 (lp:OUTSPOOL'  er:INSPOOL')
temp::filesys I ...
temp:SCRATCH