𝐺𝑟𝑛𝑑, 𝐸(𝑡 𝑦𝑝𝑒)
1
2
𝑌 𝑟𝑛𝑑)
Figure 5: Proof to receive a message in our tree-unlinkable
scheme. This function constructs a proof that the provided ci-
phertexts to be used for blind issuance of forwarding credentials
encrypt either 1) the same message and re-randomized source
as are committed to in 𝐶𝐹 , or 2) commit to the same message as
committed to in 𝐶𝐴 and a re-randomization of 𝑠𝑟𝑐.
Users also store an authoring credential ad, which has the same
form as the forwarding data, but for an unused message ⊥. The au-
thoring data is given to the user by the platform when the new user
is created. The authoring data is used by the user to prove creden-
tials on a new message so that new messages are indistinguishable
from forwarded messages to the platform.
Once a user gets forwarding data after receiving a message, the
forwarding data stays constant for the rest of its sending activity for
that message. The MAC is presented blindly during future forwards,
and so the possession of a valid forwarding credential can be proved
to a platform multiple times unlinkably.
Sending a message. To send a message, the sender provides au-
thoring information 𝐶𝐴 and forwarding information (𝐶𝐹 , 𝐶′
𝐹 , 𝜋𝑝, 𝜋𝑟).
Only one of these is filled with useful information, depending on
the type of message that the user wants to send. If the message
is an authored message, the authoring information 𝐶𝐴 is for the
actual message plaintext, and the forwarding information is for an
unused message ⊥ (created from the user’s authoring data ad). If
the message is a forward, the message contents are swapped, and
the relevant forwarding data fd is used to create the forwarding
information.
The authoring information is a commitment, 𝐶𝐴, to the Z𝑞 rep-
resentation of the message, while the forwarding information is
constructed in the present sub-protocol (Figure 4) and consists of
𝐶𝐹 , which is a commitment to the forwarded message’s Z𝑞 rep-
resentation and source ciphertext, as well as 𝐶′
𝐹 , which is a new
commitment to the same message and a re-randomization of the
source ciphertexts. The forwarding information also includes 𝜋𝑝, a
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1493return ⊥
𝑃𝑛𝑒𝑤 (sk, U)
if 𝑈𝑖 ∈ U :
𝑟 ←R Z𝑞, (𝐸1, 𝐸2) ← (𝐺𝑟 , 𝑈𝑖𝑌 𝑟)
(𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒) ← issue(⊥, 𝐸1, 𝐸2, sk𝑀𝐴𝐶)
𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒, (𝐸1, 𝐸2)
𝑃𝑠𝑒𝑛𝑑 (sk, md)
if !blindVf(𝜋𝑝, 𝐶𝐹 , sk𝑀𝐴𝐶)
∨ !Vf(𝜋𝑟 , 𝐶𝐹 , 𝐶′
𝐹) : return ⊥
𝑟 ←R Z𝑞, 𝑆 ← (𝑈𝑠, md)
𝑠𝑟𝑐 ← (𝐺𝑟 , 𝑆𝑌 𝑟)
return (𝑝𝑑 = (𝐶𝐴, 𝑠𝑟𝑐, 𝐶′
𝐹), 𝑒)
𝑃𝑠𝑒𝑛𝑑 (sk, md)
RecMsg(𝑈𝑠, 𝑈𝑟 , 𝑒, pk = 𝑌)
𝑈𝑟𝑒𝑐
𝑃𝑟𝑒𝑐 (sk = (𝑦, sk𝑀𝐴𝐶), 𝑝𝑑)
𝑝𝑑
(𝐶𝐴, 𝑠𝑟𝑐, 𝐶𝐹) ← 𝑝𝑑
(𝑚, 𝑜𝐴, 𝑜𝐹) ← receive(𝑒, 𝑈𝑠, 𝑈𝑟)
(𝑧𝐴, 𝑑𝐴) ← 𝑜𝐴
if 𝐶𝐴 ≠ 𝐺𝑧𝐴
𝑦3 𝐺𝑑𝐴
(𝑧𝐹 , 𝑑𝐹 , 𝐸1, 𝐸2) ← 𝑜𝐹
(𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2) ← 𝐶𝐹
if 𝐶𝑑 ≠ 𝐺𝑍𝐹
return ⊥
𝑦3 𝐺𝑑𝐹
∨ 𝐶𝐸2 ≠ 𝐺𝑧𝐹
𝑑 ∨ 𝐶𝐸1 ≠ 𝐺𝑧𝐹
𝑦1 𝐸1
return ⊥
𝑦2 𝐸2 :
𝑑
:
if 𝑑 = 𝑑𝐴 ≠ ⊥ ∧ 𝑑𝐹 = ⊥ :
𝑡 𝑦𝑝𝑒 ← 𝐴 //new message
elseif 𝑑𝐴 = ⊥ ∧ 𝑑𝐹 = 𝑑 ≠ ⊥ :
//forwarded message
𝑡 𝑦𝑝𝑒 ← 𝐹
return ⊥
else :
//prove rerandomizations commit to 𝑜𝑎 or 𝑜 𝑓
𝑜 ← redeem(𝐶𝐴, 𝑠𝑟𝑐, 𝑜𝐴, 𝐶𝐹 , 𝑜𝐹 , 𝑡 𝑦𝑝𝑒, pk)
(𝜋, 𝑖𝑛𝑓 𝑜, ℎ, 𝐸′
𝜋, 𝑖𝑛𝑓 𝑜
2) ← 𝑜
1, 𝐸′
(𝐶𝐴, 𝑠𝑟𝑐, 𝐶𝐹) ← 𝑝𝑑
//verify proof that rerandomizations are valid
if !Vf(𝜋, 𝑖𝑛𝑓 𝑜, 𝐶𝐴, 𝑠𝑟𝑐, 𝐶𝐹) :
return ⊥
//blindly issue MAC on rerandomized values
(𝑐𝑡𝜎 , 𝜋) ← blindIssue(𝑖𝑛𝑓 𝑜, sk𝑀𝐴𝐶)
𝑐𝑡𝜎 , 𝜋
//verify proof that the new MAC is valid
𝜎 ← Vf𝑖𝑠𝑠𝑢𝑒 (𝜋, 𝑐𝑡𝜎 , 𝑖𝑛𝑓 𝑜, ℎ)
if 𝜎 == ⊥ : return ⊥
return (𝑚, fd = (𝐻 (𝑚), (𝐸′
Report(𝑚, pk = 𝑌)
𝑈𝑟𝑒𝑝 (fd)
//prove knowledge of valid fd
𝑜𝑢𝑡 ← present(fd, pk)
1, 𝐸′
2), 𝜎)) //(m, fd) used to forward the message
𝑃𝑟𝑒𝑝 (sk = (𝑦, sk𝑀𝐴𝐶))
KGen(𝑝𝑎𝑟𝑎𝑚𝑠)
(𝑦, 𝑌 ← 𝐺 𝑦) ←R KGenP (𝑝𝑎𝑟𝑎𝑚𝑠)
sk𝑀𝐴𝐶 ← KGen𝑀𝐴𝐶 (𝑝𝑎𝑟𝑎𝑚𝑠)
return (pk = 𝑌 , sk = (𝑦, sk𝑀𝐴𝐶))
newUser(𝑈𝑖, sk, pk = 𝑌)
𝑈𝑛𝑒𝑤
U.𝑎𝑑𝑑(𝑈𝑖)
return U
𝑖𝑛𝑓 𝑜 ← (⊥, 𝐸1, 𝐸2)
if Vf(𝜎, 𝜋𝑖𝑠𝑠𝑢𝑒, 𝑖𝑛𝑓 𝑜) :
ad ← (𝐻 (⊥), 𝜎, (𝐸1, 𝐸2))
return ad
return ⊥
AuthMsg(𝑈𝑠, 𝑈𝑟 , pk = 𝑌)
𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔)
𝑚, ad ← 𝑚𝑠𝑔
//create proof sender has valid authoring data
𝑜𝑢𝑡 ← present(ad, pk)
(𝐶𝐹 , 𝐶′
𝑧 ←R Z𝑞, 𝑑 ← 𝐻 (𝑚)
𝑜𝐴 ← (𝑧, 𝑑)
𝐶𝐴 ← 𝐺𝑧
𝑦3𝐺𝑑
//send via underlying msg scheme
𝑒 ← send((𝑚, 𝑜𝐴, 𝑜𝐹), 𝑈𝑠, 𝑈𝑟)
𝑒, 𝐶𝐴, 𝐶𝐹 , 𝐶′
𝐹 , 𝑜𝐹 , 𝜋𝑝, 𝜋𝑟) ← 𝑜𝑢𝑡
𝑑 //commit to new message
𝐹 , 𝜋𝑝, 𝜋𝑟
return 𝑒
FwdMsg(𝑈𝑠, 𝑈𝑟 , pk = 𝑌)
𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔)
(𝑚, fd) ← 𝑚𝑠𝑔
𝑜𝑢𝑡 ← present(fd, pk)
(𝐶𝐹 , 𝐶′
𝑧 ←R Z𝑞, 𝐶𝐴 ← 𝐺𝑧
𝑜𝐴 ← (𝑧,⊥)
𝑒 ← send((𝑚, 𝑜𝐴, 𝑜𝐹), 𝑈𝑠, 𝑈𝑟)
𝑒, 𝐶𝐴, 𝐶𝐹 , 𝐶′
𝐹 , 𝑜𝐹 , 𝜋𝑝, 𝜋𝑟) ← 𝑜𝑢𝑡
𝑦3𝐺⊥
𝐹 , 𝜋𝑝, 𝜋𝑟
𝑑
return 𝑒
𝑜𝑢𝑡
if !blindVf(𝜋𝑝, 𝐶𝐹 , sk𝑀𝐴𝐶)
∨!Vf(𝜋𝑟 , 𝐶𝐹 , 𝐶′
𝐹) : return ⊥
𝑟 ←R Z𝑞, 𝑆 ← (𝑈𝑠, md)
𝑠𝑟𝑐 ← (𝐺𝑟 , 𝑆𝑌 𝑟)
return (𝑝𝑑 = (𝐶𝐴, 𝑠𝑟𝑐, 𝐶′
𝐹), 𝑒)
Figure 6: Protocols for Scheme 2.
𝐹 , 𝑜𝐹 , 𝜋𝑝, 𝜋𝑟) ← 𝑜𝑢𝑡
𝐶𝐹 , (𝐶′
if !(blindVf(𝜋𝑝, 𝐶𝐹 , sk𝑀𝐴𝐶) ∧ Vf(𝜋𝑟 , 𝐶𝐹 , 𝐶′
𝐹)) :
return ⊥
(𝑧, 𝑑′, 𝐸1, 𝐸2) ← 𝑜𝐹
𝑑 ← 𝐻 (𝑚)
if 𝐶′
𝐹 ≠ (𝐺𝑧
𝑑 , 𝐺𝑧
∨ 𝑑 ≠ 𝑑′ ∨ 𝑑 = ⊥ :
𝑦3𝐺𝑑
return 𝐸2/𝐸𝑦
1
𝑦1 𝐸1, 𝐺𝑧
𝑦2 𝐸2)
return ⊥
//decrypt to recover (𝑠𝑟𝑐, md)
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1494𝑦3𝐺𝑑
𝑦3𝐺𝑑
𝑑
proof that the user holds a valid MAC on the values stored in 𝐶𝐹 ,
and 𝜋𝑟 , which proves that 𝐶′
𝐹 commits to the same message and
(re-randomized) source as 𝐶𝐹 . We note that these two proofs can
easily be combined into a single statement, but we’ve written them
out separately to distinguish between scheme-specific statements
and the standard MAC issuance proof.
The authoring commitment to a hash of a message 𝑑 ∈ Z𝑞 has the
form of a standard Pedersen commitment [24] with bases 𝐺𝑦3 and
for a random 𝑟 ←R Z𝑞. A forwarding commitment
𝐺𝑑: 𝐶𝐴 = 𝐺𝑟
takes the form of a multi-attribute Pedersen commitment on 𝑑
and two group elements 𝐸1 and 𝐸2 with bases 𝐺𝑦3, 𝐺𝑦1, 𝐺𝑦2, 𝐺𝑑:
𝑑). Hashing the plaintext to an element
𝐶𝐹 = (𝐺𝑟
in Z𝑞 ensures that these schemes are binding without the need
for an additional group element to fix the opening to a particular
value of 𝑟. We note that this structure can easily be extended to
commit to multiple additional attributes that may be required to
store additional metadata.
𝑦2𝐸2, 𝐺𝑟
𝑦1𝐸1, 𝐺𝑟
𝐹 , 𝑠𝑟𝑐 to the receiver.
The sending user encrypts openings to 𝐶𝐴 and 𝐶′
𝐹 alongside the
message plaintext and passes that information on to the receiver.
Processing a message. To process a sent message, the platform
first checks that the proofs 𝜋𝑝 and 𝜋𝑟 are valid for the provided
commitments. If this is the case, it creates a new encryption 𝑠𝑟𝑐
of the sending user’s identity and some associated metadata to be
used if the message is new. It then passes along the platform data
𝑝𝑑 = 𝐶𝐴, 𝐶′
Receiving a message. During the receipt of a message, the receiver
presents encryptions of a message plaintext and 𝑠𝑟𝑐 ciphertext and
proves that these are either (re-randomizations of) the forward-
ing information committed to in 𝐶′
𝐹 or of the authored message
committed to in 𝐶𝐴 and the new 𝑠𝑟𝑐 ciphertext. The platform then
blindly issues the receiver a new MAC on those attributes. The
helper function redeem (Figure 5), is used by the receiver to con-
struct a proof to the platform that the values it would like to get a
MAC on are valid.
Reporting a message. To report a message, a user presents the
platform with the message plaintext, a re-randomization of the
source ciphertext it would like to report, and a proof that it has
a valid credential on those values. This proof is created in the
same manner as when sending a message by calling the helper
function present (Figure 4). After verifying the proof, the platform
can decrypt the ciphertext to reveal the identity of the source.
Security. We prove the following theorems in Appendix C.
Theorem 5.1. Assuming that the MAC of [5] satisfies blind issuance
and anonymity as defined in [5], the platform’s El Gamal encryption
scheme is CPA-secure, the proof system employed is zero-knowledge,