高可用的应用
大型网站的分层架构及物理服务器的分布式部署使得位于不同层次的服务
5万无一失：网站的高可用架构
714
---
## Page 93
到任意服务器，处理结果都是完全一样的。
态对等时，负载均衡可以起到事实上高可用的作用，如图5.5所示。
然可用。对于应用服务器集群，实现这种服务器可用状态实时监测、自动转移失败任务
5.3.1
72
的结果。
他服务器上，这些服务器是完全一样的，请求在任何一台服务器中处理都不会影响最终
跳检测机制发现该服务器失去响应，就会把它从服务器列表中删除，而将请求发送到其
分发到任意一台服务器上进行处理，而当服务器10.0.0.1岩机时，负载均衡服务器通过心
是昂贵的负载均衡硬件，都提供失效转移功能。在网站应用中，当集群中的服务是无状
多台服务器上，以提高整体的负载处理能力。目前，不管是开源免费的负载均衡软件还
足以承担所有的负载压力时，通过负载均衡手段，将流量和数据分摊到一个集群组成的
的机制是负载均衡。
其他任意一台可用机器处理，这样对终端用户而言，请求总是能够成功的，整个系统依
状态，那么所有的服务器完全对等，当任意一台或多台服务器宕机，请求提交给集群中
大型网站技术架构核心原理与案例分析
不保存状态的应用给高可用的架构设计带来了巨大便利，既然服务器不保存请求的
负载均衡，顾名思义，主要使用在业务量和数据量较高的情况下，当单台服务器不
当web服务器集群中的服务器都可用时，负载均衡服务器会把用户发送的访问请求
通过负载均衡进行无状态服务的失效转移
图5.5利用负载均衡服务器实现高可用的应用服务
用户发起访问请求
负
载均衡服务器
---
## Page 94
5.3.2
非常少，只用一台服务器提供服务就绰绰有余，但如果需要保证该服务高可用，也必须
中，由于负载均衡服务器可能会将请求分发到集群任何一台应用服务器上，所以保证每
最新发布的消息及好友状态等，用户每次刷新页面都需要更新这些信息。
购买请求都是向购物车中增加商品；在社交类的网站中，需要记录用户的当前登录状态、
服务器和网络的大量资源，系统不堪负担。而且由于所有用户的 Session信息在每台服务
Session数据的丢失，而服务器使用Session时，也只需要在本机获取即可。如图5.6所示。
次请求依然能够获得正确的Session比单机时要复杂很多。
是有状态的，在交易类的电子商务网站，需要有购物车记录用户的购买信息，用户每次
至少部署两台服务器，使用负载均衡技术构建一个小型的集群。
适用这种方案。
器上都有备份，在大量用户访问的情况下，甚至会出现服务器内存不够Session使用的情
小的情况下。当集群规模较大时，集群服务器间需要大量的通信进行Session复制，占用
使得每台服务器上都保存所有用户的Session信息，这样任何一台机器宕机都不会导致
服务器开启Web容器的Session复制功能，在集群中的几台服务器之间同步Session对象，
Session可由部署在服务器上的Web容器（如JBoss）管理。在使用负载均衡的集群环境
这种方案虽然简单，从本机读取Session信息也很快速，但只能使用在集群规模比较
Web应用中将这些多次请求修改使用的上下文对象称作会话（Session），单机情况下，
由于负载均衡在应用层实际上起到了系统高可用的作用，因此即使某个应用访问量
Session复制是早期企业应用系统使用较多的一种服务器集群Session管理机制。应用
应用服务器的高可用架构设计主要基于服务无状态这一特性，但是事实上，业务总
而大型网站的核心应用集群就是数千台服务器，同时在线用户可达千万，因此并不
集群环境下，Session管理主要有以下几种手段。
1.Session复制
应用服务器集群的Session管理
5万无一失：网站的高可用架构
73
---
## Page 95
这台服务器上获取。这种方法又被称作会话黏滞，如图5.7所示。
求都在同一台服务器上处理，即 Session 绑定在某台特定服务器上，保证 Session 总能在
负载均衡算法的更多信息请参考本书第6章内容。这样在整个会话期间，用户所有的请
是分发到同一台服务器上，当然这时负载均衡服务器必须工作在HTTP协议层上，关于
于同一IP的请求分发到同一台服务器上（也可以根据Cookie信息将同一个用户的请求总
大型网站技术架构核心原理与案例分析
Session绑定可以利用负载均衡的源地址Hash算法实现，负载均衡服务器总是将来源
2.Session绑定
用户终端119.167.195.241
图5.7利用负载均衡的会话黏滞机制将请求绑定到特定服务器
图5.6使用Session复制实现应用服务器共享Session
负载均衡设备
负载均衡设备
应用服务器3
D
m
用
应用服务器1
③
D
复制
---
## Page 96
务器处理完请求后再将修改过的Session响应给客户端。
Session记录在客户端，每次请求服务器的时候，将Session放在请求中发送给服务器，服
法，但很少有网站利用这个算法进行Session管理。
Session而无法完成业务处理。因此虽然大部分负载均衡服务器都提供源地址负载均衡算
宕机，那么该机器上的Session 也就不复存在了，用户请求切换到其他机器后因为没有
限；每次请求响应都需要传输Cookie，影响性能；如果用户关闭Cookie，访问就会不正
记录Session。
用需要记录的Session信息又比较小。因此事实上，许多网站都或多或少地使用Cookie
常。但是由于Cookie的简单易用，可用性高，支持应用服务器的线性伸缩，而大部分应
早期的企业应用系统使用C/S（客户端/服务器）架构，一种管理Session的方式是将
3.利用Cookie记录Session
但是Session绑定的方案显然不符合我们对系统高可用的需求，因为一旦某台服务器
那么有没有可用性高、伸缩性好、性能也不错，对信息大小又没有限制的服务器集
4.Session服务器
利用 Cookie记录 Session也有一些缺点，比如受 Cookie 大小限制，能记录的信息有
网站没有客户端，
用户终端cookie：PI:EMAIL
用户终端cookie：
，但是可以利用浏览器支持的Cookie记录Session，
图5.8利用Cookie记录Session信息
:PI:EMAIL
负载均衡设备
cookie:alias@taobao,com
5万无一失：网站的高可用架构T
应用服务器3
应用服务器2
应用服务器
如图5.8所示。
75
---
## Page 97
应用服务器每次读写Session时，都访问 Session服务器，如图5.9所示。
群Session管理方案呢？
此可以使用类似负载均衡的失效转移策略实现高可用的服务。
分布式部署，被具体应用远程调用。可复用的服务和应用一样，也是无状态的服务，因
功能，则需要开发专门的 Session服务管理平台。
Session管理有比较高的要求，比如利用Session服务集成单点登录（SSO）、用户服务等
态的 Session服务器，然后针对这两种服务器的不同特性分别设计其架构。
76
5.4
在这些产品的基础上进行包装，使其符合Session的存储和访问要求。如果业务场景对
大型网站技术架构核心原理与案例分析
答案就是 Session 服务器。利用独立部署的 Session服务器（集群）统一管理 Session，
可复用的服务模块为业务产品提供基础公共服务，大型网站中这些服务通常都独立
对于有状态的Session服务器，一种比较简单的方法是利用分布式缓存、数据库等，
这种解决方案事实上是将应用服务器的状态分离，分为无状态的应用服务器和有状
除此之外，具体实践中，还有以下几点高可用的服务策略。
高可用的服务
图5.9利用Session服务器共享Session
负载均衡设备
应用服务器1
D
#
（集群）
---
## Page 98
不同的物理机上，核心服务和数据甚至需要部署在不同地域的数据中心。
速度上也格外迅速。显然，用户及时付款购物比能不能评价商品更重要，所以订单、支
序根据服务调度策略，可选择继续重试或将请求转移到提供相同服务的其他服务器上。
请求转移到正常的服务器上。
进而导致用户请求长时间得不到响应，同时还占用应用程序的资源，不利于及时将访问
启动不同的线程或者部署在不同的虚拟机上进行隔离，而高优先级的服务则需要部署在
应用也不合适使用异步调用。
式会延长响应时间，得不偿失。对于那些必须确认服务调用成功才能继续下一步操作的
用户注册操作可顺利完成，只是晚一点收到注册成功的邮件而已。
息异步执行。即使邮件服务队列阻塞，邮件不能成功发送，也不会影响其他服务的执行，
用户服务开通权限这三个服务作为消息的消费者任务，分别从消息队列获取用户注册信
返回用户注册成功响应。而记录用户注册信息到数据库、发送用户注册成功邮件、调用
列阻塞不能发送邮件时，会导致其他两个服务也无法执行，最终导致用户注册失败。
入数据库，发送账户注册成功邮件，开通对应权限。如果采用同步服务调用，当邮件队
请求失败的情况。如提交一个新用户注册请求，应用需要调用三个服务：将用户信息写
付服务比评价服务有更高优先级。
在应用程序中设置服务调用的超时时间，一旦超时，通信框架就抛出异常，应用程
同时在服务部署上也进行必要的隔离，避免故障的连锁反应。低优先级的服务通过
如果采用异步调用的方式，应用程序将用户注册信息发送给消息队列服务器后立即
当然不是所有服务调用都可以异步调用，对于获取用户信息这类调用，采用异步方
运维上将服务器进行分级管理，核心应用和服务优先使用更好的硬件，在运维响应
应用对服务的调用通过消息队列等异步方式完成，避免一个服务失败导致整个应用
3.异步调用
由于服务端宕机、线程死锁等原因，可能导致应用程序对服务端的调用失去响应，
2.超时设置
分级管理
5万无一失：网站的高可用架构·
77
---
## Page 99
是多年运营积淀下来的各种数据（用户数据、交易数据、商品数据……·），代表着历史，
到调用成功的响应，就可以认为调用失败，并重试服务调用。因此必须在服务层保证服
新提交请求就导致服务重复调用，如果这个服务是一个转账操作，就会产生严重后果。
务重复调用和调用一次产生的结果相同，即服务具有幂等性。
虚假的失败。比如服务已经处理成功，但因为网络故障应用没有收到响应，这时应用重
务的顺利完成。
方法，在系统最繁忙的时段关闭“评价”、“确认收货”等非核心服务，以保证核心交易服
系统开销，为重要的服务和功能让出资源。淘宝在每年的“双十一”促销中就使用这种
败的故障页面，但是问下身边的人，其他人都正常使用，自己再刷新页面，也好了。
用；或者随机拒绝部分请求调用，节约资源，让另一部分请求得以成功，避免要死大家
段：拒绝服务及关闭服务。
服务宕机。为了保证核心应用和功能的正常运行，需要对服务进行降级。降级有两种手
5.5
务调用有效性校验，只有有效的操作才能继续执行。
一样。但是对于转账交易等操作，问题就会比较复杂，需要通过交易编号等信息进行服
一起死的惨剧。貌似Twiter比较喜欢使用随机拒绝请求的策略，经常有用户看到请求失
78
大型网站技术架构核心原理与案例分析
服务重复调用是无法避免的，应用层也不需要关心服务是否真的失败，只要没有收
关闭功能：关闭部分不重要的服务，或者服务内部关闭部分不重要的功能，以节约