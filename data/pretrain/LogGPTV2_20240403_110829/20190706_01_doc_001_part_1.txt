RUM index and its applications
Alexander Korotkov
Postgres Professional
PGConf.RU 2017, Moscow
Inverted Index for fulltext search
E
N
T
Posting list
R
Posting tree
Y
T
R
E
E
Generalized inverted index (1/3)
Inserting of new item to the index.
Generalized inverted index (2/3)
GIN search: finding corresponding posting lists/trees
Generalized inverted index (3/3)
GIN search: filtering results
Improving GIN
9.6: CREATE AM
GENERIC WAL
Create access methods
RUM as extension !
How did things start?
I was trying this
starting from 2012!!!
RUM applications
Fulltext indexing with positional information
●
(offsets of lexemes inside document)
Jsonb indexing with positional information (offsets
●
of elements in array)
Inversed fulltext search (find queries matching
●
given document)
Inversed regex search (find regexes matching
●
given
Similarity indexing with lengths of arrays
●
FTS in PostgreSQL
tsvector –
data type for document optimized for search
●
tsquery –
textual data type for rich query language
●
Full text search operator:
tsvector @@ tsquery
●
SQL interface to FTS objects (CREATE, ALTER)
●
Configuration: {tokens, {dictionaries}}
•
Parser: {tokens}
•
Dictionary: tokens → lexeme{s}
•
Additional functions and operators
●
Indexes: GiST, GIN, RUM
●
to_tsvector('english','a fat cat sat on a mat and ate a fat rat')
@@
to_tsquery('english','(cats | rat) & ate & !mice');
http://www.postgresql.org/docs/current/static/textsearch.html
GIN indexing: ranking from heap
156676 Wikipedia articles:
Search is fast, ranking is slow.
●
SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
FROM ti2
WHERE text_vector @@ to_tsquery('english', 'title')
ORDER BY rank DESC HEAP IS SLOW
LIMIT 3;
470 ms !
Limit (actual time=476.106..476.107 rows=3 loops=1)
Buffers: shared hit=149804 read=87416
-> Sort (actual time=476.104..476.104 rows=3 loops=1)
Sort Key: (ts_rank(text_vector, '''titl'''::tsquery)) DESC
Sort Method: top-N heapsort Memory: 25kB
Buffers: shared hit=149804 read=87416
-> Bitmap Heap Scan on ti2 (actual time=6.894..469.215 rows=47855 loops=1)
Recheck Cond: (text_vector @@ '''titl'''::tsquery)
Heap Blocks: exact=4913
Buffers: shared hit=149804 read=87416
-> Bitmap Index Scan on ti2_index (actual time=6.117..6.117 rows=47855 loops=1)
Index Cond: (text_vector @@ '''titl'''::tsquery)
Buffers: shared hit=1 read=12
Planning time: 0.255 ms
Execution time: 476.171 ms
(15 rows)
RUM indexing: ranking from index
Use positions to calculate rank and order results
●
Introduce distance operator tsvector  tsquery
●
CREATE INDEX ti2_rum_fts_idx ON ti2 USING rum(text_vector rum_tsvector_ops);
SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
FROM ti2
WHERE text_vector @@ to_tsquery('english', 'title')
ORDER BY
text_vector  plainto_tsquery('english','title') LIMIT 3;
QUERY PLAN
----------------------------------------------------------------------------------------
L Limit (actual time=54.676..54.735 rows=3 loops=1)
Buffers: shared hit=355
-> Index Scan using ti2_rum_fts_idx on ti2 (actual time=54.675..54.733 rows=3 loops=1)
Index Cond: (text_vector @@ '''titl'''::tsquery)
Order By: (text_vector  '''titl'''::tsquery)
Buffers: shared hit=355
Planning time: 0.225 ms
54.775 ms 476 ms !
Execution time: VS
(8 rows)
GIN indexing: ranking from heap
Top-10 (out of 222813) postings with «Tom Lane»
●
GIN index — 1374.772 ms
•
SELECT subject, ts_rank(fts,plainto_tsquery('english', 'tom lane')) AS rank
FROM pglist WHERE fts @@ plainto_tsquery('english', 'tom lane')
ORDER BY rank DESC LIMIT 10;
QUERY PLAN
----------------------------------------------------------------------------------------
Limit (actual time=1374.277..1374.278 rows=10 loops=1)
-> Sort (actual time=1374.276..1374.276 rows=10 loops=1)
Sort Key: (ts_rank(fts, '''tom'' & ''lane'''::tsquery)) DESC
Sort Method: top-N heapsort Memory: 25kB
-> Bitmap Heap Scan on pglist (actual time=98.413..1330.994 rows=222813 loops=1)
Recheck Cond: (fts @@ '''tom'' & ''lane'''::tsquery)
Heap Blocks: exact=105992
-> Bitmap Index Scan on pglist_gin_idx (actual time=65.712..65.712
rows=222813 loops=1)
Index Cond: (fts @@ '''tom'' & ''lane'''::tsquery)
Planning time: 0.287 ms
Execution time: 1374.772 ms
(11 rows)
RUM indexing: ranking from heap
Top-10 (out of 222813) postings with «Tom Lane»
●
RUM index — 216 ms vs 1374 ms !!!
•
create index pglist_rum_fts_idx on pglist using rum(fts rum_tsvector_ops);
SELECT subject FROM pglist WHERE fts @@ plainto_tsquery('tom lane')
ORDER BY fts  plainto_tsquery('tom lane') LIMIT 10;
QUERY PLAN
----------------------------------------------------------------------------------
Limit (actual time=215.115..215.185 rows=10 loops=1)
-> Index Scan using pglist_rum_fts_idx on pglist (actual time=215.113..215.183
rows=10 loops=1)
Index Cond: (fts @@ plainto_tsquery('tom lane'::text))
Order By: (fts  plainto_tsquery('tom lane'::text))
Planning time: 0.264 ms
Execution time: 215.833 ms
(6 rows)
ts_score ranking
RUM uses new ranking function (ts_score) —
●
combination of ts_rank and ts_tank_cd
ts_rank doesn't supports logical operators
•
ts_rank_cd works poorly with OR queries
•
SELECT ts_rank(fts,plainto_tsquery('english', 'tom lane')) AS rank,
ts_rank_cd (fts,plainto_tsquery('english', 'tom lane')) AS rank_cd ,
fts  plainto_tsquery('english', 'tom lane') as score, subject
FROM pglist WHERE fts @@ plainto_tsquery('english', 'tom lane')
ORDER BY fts  plainto_tsquery('english', 'tom lane') LIMIT 10;
rank | rank_cd | score | subject
----------+---------+----------+------------------------------------------------------------
0.999637 | 2.02857 | 0.487904 | Re: ATTN: Tom Lane
0.999224 | 1.97143 | 0.492074 | Re: Bug #866 related problem (ATTN Tom Lane)
0.99798 | 1.97143 | 0.492074 | Tom Lane
0.996653 | 1.57143 | 0.523388 | happy birthday Tom Lane ...
0.999697 | 2.18825 | 0.570404 | For Tom Lane
0.999638 | 2.12208 | 0.571455 | Re: Favorite Tom Lane quotes
0.999188 | 1.68571 | 0.593533 | Re: disallow LOCK on a view - the Tom Lane remix
0.999188 | 1.68571 | 0.593533 | Re: disallow LOCK on a view - the Tom Lane remix
0.999188 | 1.68571 | 0.593533 | Re: disallow LOCK on a view - the Tom Lane remix
0.999188 | 1.68571 | 0.593533 | Re: [HACKERS] disallow LOCK on a view - the Tom Lane remix
(10 rows)
Phrase Search ( 8 years old!)
Queries 'A & B'::tsquery and 'B & A'::tsquery
●
produce the same result
Phrase search - preserve order of words in a query
●
Results for queries 'A & B' and 'B & A' should be
different !
Introduce new FOLLOWED BY () operator:
●
Guarantee an order of operands
•
Distance between operands
•
a  b == a & b & (∃ i,j : pos(b)i – pos(a)j = n)
Phrase search - definition
FOLLOWED BY operator returns:
●
false
•
true and array of positions of the right
•
operand, which satisfy distance condition
FOLLOWED BY operator requires positions
●
select 'a b c'::tsvector @@ 'a  b'::tsquery; – false, there no positions
?column?
----------
f
(1 row)
select 'a:1 b:2 c'::tsvector @@ 'a  b'::tsquery;
?column?
----------
t
(1 row)
Phrase search - properties
'A  B' = 'AB'
●
'A  B' matches the word with two
●
different forms ( infinitives )
=# SELECT ts_lexize('ispell','bookings');
ts_lexize
----------------
{booking,book}
to_tsvector('bookings') @@ 'booking  book'::tsquery
Phrase search - properties
Precendence of tsquery operators - '!  & |'
●
Use parenthesis to control nesting in tsquery
select 'a & b  c'::tsquery;
tsquery
-------------------
'a' & 'b'  'c'
select 'b  c & a'::tsquery;
tsquery
-------------------
'b'  'c' & 'a'
select 'b  (c & a)'::tsquery;
tsquery
---------------------------
'b'  'c' & 'b'  'a'
Phrase search - example
TSQUERY phraseto_tsquery([CFG,] TEXT)
●
S
top words are taken into account.
select phraseto_tsquery('PostgreSQL can be extended by the user in many ways');
phraseto_tsquery
-----------------------------------------------------------
'postgresql'  'extend'  'user'  'mani'  'way'
(1 row)
It’s possible to combine tsquery’s
●
select phraseto_tsquery('PostgreSQL can be extended by the user in many ways') ||
to_tsquery('ohoho & ik');
?column?
-----------------------------------------------------------------------------------
'postgresql'  'extend'  'user'  'mani'  'way' | 'oho'  'ho' & 'ik'
(1 row)
Phrase search
1.1 mln postings (postgres mailing lists)
Phrase search has overhead
●
select count(*) from pglist where fts @@ to_tsquery( english 'tom  lane');
' ',
count
--------
222777
(1 row)
(s) | & (s)
---------------------------------------+---------
Sequential Scan: 2.6 | 2.2
GIN index: 1.1 | 0.48 - significant overhead
RUM index: 0.5 | 0.48 - solves the problem !
Alternative posting lists/trees ordering
FTS with ordering by timestamp («fresh» results)
●
Store timestamps in additional information
●
Order posting lists/trees by timestamp
●
No sort needed!
●
create index pglist_fts_ts_order_rum_idx on pglist using
rum(fts rum_tsvector_timestamp_ops, sent) WITH (attach =
'sent', to ='fts', order_by_attach = 't');
select sent, subject from pglist
where fts @@ to_tsquery('server & crashed')
order by sent <=| '2000-01-01'::timestamp limit 5;
Index Scan by RUM (fts, sent)
●
0.08 ms 10 ms !
(RUM no sort) vs (GIN + sort)
Inverse FTS (FQS)
Find queries, which match given document
●
Automatic text classification
●
SELECT * FROM queries;
q | tag
-----------------------------------+-------
'supernova' & 'star' | sn
'black' | color
'big' & 'bang' & 'black' & 'hole' | bang
'spiral' & 'galaxi' | shape
'black' & 'hole' | color
(5 rows)
SELECT * FROM queries WHERE
to_tsvector('black holes never exists before we think about them')
@@ q;
q | tag
------------------+-------
'black' | color
'black' & 'hole' | color
(2 rows)
Inverse FTS (FQS)
term1: (AND 1, OR 2)
●
term2: (AND 1, OR 2)
●