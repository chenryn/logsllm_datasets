# RUM Index and Its Applications
## Alexander Korotkov, Postgres Professional
### PGConf.RU 2017, Moscow

## Inverted Index for Full-Text Search
- **Posting List**: A list of document IDs where a term appears.
- **Posting Tree**: An optimized structure for storing posting lists.

## Generalized Inverted Index (GIN)
1. **Inserting New Items into the Index**:
   - GIN supports efficient insertion of new items by maintaining a balanced tree structure.
2. **GIN Search: Finding Corresponding Posting Lists/Trees**:
   - GIN uses a search algorithm to find the relevant posting lists or trees.
3. **GIN Search: Filtering Results**:
   - After finding the posting lists, GIN filters the results to return only the relevant documents.

## Improvements in GIN (PostgreSQL 9.6)
- **CREATE AM GENERIC WAL**: Allows creating access methods with generic Write-Ahead Logging.
- **Create Access Methods**: Enables the creation of custom access methods.
- **RUM as an Extension**: RUM (Reversed Unique Mapping) can be used as an extension to enhance full-text search capabilities.

## History of RUM
- **Development Timeline**: The development of RUM started in 2012, aimed at improving full-text search performance and functionality.

## RUM Applications
- **Full-Text Indexing with Positional Information**:
  - Stores offsets of lexemes within documents.
- **JSONB Indexing with Positional Information**:
  - Stores offsets of elements in JSONB arrays.
- **Inverted Full-Text Search**:
  - Finds queries that match a given document.
- **Inverted Regex Search**:
  - Finds regular expressions that match a given document.
- **Similarity Indexing with Array Lengths**:
  - Supports indexing based on the lengths of arrays.

## Full-Text Search in PostgreSQL
- **tsvector**: A data type optimized for full-text search, representing a document.
- **tsquery**: A textual data type for rich query language.
- **Full-Text Search Operator**:
  - `tsvector @@ tsquery`: Matches a document against a query.
- **SQL Interface for FTS Objects**:
  - `CREATE` and `ALTER` statements for managing full-text search objects.
- **Configuration**:
  - **Parser**: Tokenizes text into tokens.
  - **Dictionary**: Maps tokens to lexemes.
- **Additional Functions and Operators**:
  - Various functions and operators for manipulating and querying full-text search data.
- **Indexes**:
  - **GiST**: Generalized Search Tree.
  - **GIN**: Generalized Inverted Index.
  - **RUM**: Reversed Unique Mapping.

### Example Query
```sql
SELECT to_tsvector('english', 'a fat cat sat on a mat and ate a fat rat') @@
to_tsquery('english', '(cats | rat) & ate & !mice');
```

## GIN Indexing: Ranking from Heap
- **Performance Issue**: While GIN search is fast, ranking results can be slow.
- **Example Query**:
  ```sql
  SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
  FROM ti2
  WHERE text_vector @@ to_tsquery('english', 'title')
  ORDER BY rank DESC
  LIMIT 3;
  ```
- **Execution Time**: 470 ms.

## RUM Indexing: Ranking from Index
- **Performance Improvement**: RUM uses positional information to calculate ranks and order results directly from the index.
- **New Distance Operator**: `tsvector <-> tsquery`.
- **Example Query**:
  ```sql
  CREATE INDEX ti2_rum_fts_idx ON ti2 USING rum(text_vector rum_tsvector_ops);
  SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
  FROM ti2
  WHERE text_vector @@ to_tsquery('english', 'title')
  ORDER BY text_vector <-> plainto_tsquery('english', 'title')
  LIMIT 3;
  ```
- **Execution Time**: 54.775 ms (vs. 476 ms for GIN).

## GIN vs. RUM: Top-10 Postings with "Tom Lane"
- **GIN Index**:
  - **Execution Time**: 1374.772 ms.
- **RUM Index**:
  - **Execution Time**: 216 ms (vs. 1374 ms for GIN).

## New Ranking Function: ts_score
- **Combination of ts_rank and ts_rank_cd**:
  - `ts_score` combines the strengths of both ranking functions.
- **Properties**:
  - `ts_rank` does not support logical operators.
  - `ts_rank_cd` performs poorly with OR queries.
- **Example Query**:
  ```sql
  SELECT ts_rank(fts, plainto_tsquery('english', 'tom lane')) AS rank,
         ts_rank_cd(fts, plainto_tsquery('english', 'tom lane')) AS rank_cd,
         fts <-> plainto_tsquery('english', 'tom lane') AS score, subject
  FROM pglist
  WHERE fts @@ plainto_tsquery('english', 'tom lane')
  ORDER BY fts <-> plainto_tsquery('english', 'tom lane')
  LIMIT 10;
  ```

## Phrase Search
- **Preserves Word Order**:
  - Queries `'A & B'::tsquery` and `'B & A'::tsquery` produce different results.
- **New FOLLOWED BY Operator**:
  - Ensures the order of operands and specifies the distance between them.
- **Example**:
  ```sql
  SELECT 'a b c'::tsvector @@ 'a <-> b'::tsquery; -- false, no positions
  SELECT 'a:1 b:2 c'::tsvector @@ 'a <-> b'::tsquery; -- true, positions satisfy distance condition
  ```

## Phrase Search Properties
- **Equivalence**: `'A <-> B' = 'AB'`.
- **Matching Infinitives**: `'A <-> B'` matches words with two different forms.
- **Operator Precedence**: `! <-> & |`.
- **Parenthesis for Nesting**: Use parentheses to control the nesting of operators in `tsquery`.

## Phrase Search Example
- **phraseto_tsquery Function**:
  - Converts a phrase into a `tsquery` with word order preserved.
- **Example**:
  ```sql
  SELECT phraseto_tsquery('PostgreSQL can be extended by the user in many ways');
  ```

## Alternative Posting Lists/Tree Ordering
- **Timestamp-Based Ordering**:
  - Store timestamps in additional information and order posting lists/trees by timestamp.
- **Example**:
  ```sql
  CREATE INDEX pglist_fts_ts_order_rum_idx ON pglist USING rum(fts rum_tsvector_timestamp_ops, sent) WITH (attach = 'sent', to = 'fts', order_by_attach = 't');
  SELECT sent, subject FROM pglist
  WHERE fts @@ to_tsquery('server & crashed')
  ORDER BY sent <=| '2000-01-01'::timestamp
  LIMIT 5;
  ```

## Inverse Full-Text Search (FQS)
- **Find Queries Matching a Given Document**:
  - Useful for automatic text classification.
- **Example**:
  ```sql
  SELECT * FROM queries WHERE to_tsvector('black holes never exists before we think about them') @@ q;
  ```

## Conclusion
- **RUM Index**:
  - Provides significant performance improvements for full-text search and ranking.
  - Supports advanced features like positional information, phrase search, and inverse full-text search.
- **Future Work**:
  - Further optimizations and enhancements to RUM and GIN for even better performance and functionality.