# NCC Group: Linux Container Security and Hardening

## LXC Configuration
- **Cgroups Template:**
  - `lxc.cap.keep = sys_time sys_nice`
  - `lxc.aa_profile = lxc-container-default`
  - `lxc.seccomp = /path/to/seccomp.rules`

- **Other Security Considerations:**
  - Non-root users can now create and start containers, acting as "root" inside the container.
  - This can lead to unexpected behavior and requires further auditing.

- **Unprivileged Containers:**
  - The number of system calls in different Linux versions:
    - Linux 2.2: 190 syscalls
    - Linux 2.6: 337 syscalls
    - Linux 4.1: 340 syscalls
  - It's important to consider how many syscalls your application actually needs.

- **Kernel Attack Surface:**
  - SECCOMP (SECure COMPuting) filters the kernel to minimize the exposed surface.
  - Quote: "System call filtering isn't a sandbox. It provides a clearly defined mechanism for minimizing the exposed kernel surface." â€“ Will Drewry, Google

- **Seccomp-bpf:**
  - Allows filtering of syscall arguments, but a large number of filters can impact performance.
  - Currently supports x86 and x86_64 architectures.
  - Tools like LXC, Minijail, or Mbox are required (Docker support is coming in version 1.8).

- **Seccomp-bpf Implementation:**
  - Use `prctl(2)` for operations on a process.
  - Modes: `SECCOMP_MODE_STRICT` (old) and `SECCOMP_MODE_FILTER` (new).
  - Example BPF filter code provided.

- **Berkeley Packet Filter:**
  - Example `tcpdump` command and corresponding BPF filter code.

## Container Ecosystem
- **Implementations and Support:**
  - ChromeOS, Google Chrome, Firejail, OpenSSH, Capsicum, Tor, Mbox, vsftpd, BIND, LXC, QEMU, Opera Browser, Docker, CoreOS, Flockport, Sandstorm.io, RancherOS, Heroku, Joyent, Amazon, VMware, Google/Kubernetes.

- **Docker and CoreOS:**
  - Docker focuses on packaging and deployment, with one app per container.
  - CoreOS is a minimal OS for hosting containers, with features like rkt and the app container spec.

- **Comparison:**
  - LXC: Flexible, but complex for running a containerized OS or single app.
  - Docker: Easy mode for running a single app per container.
  - CoreOS: Suitable for hosting Docker containers or using rkt, with high flexibility and bleeding-edge features.

## Security Considerations
- **Attack Vectors:**
  - Container to other container, container to itself, container to host, container to support infrastructure, container to local network, etc.

- **Kernel and Capabilities:**
  - Dropping capabilities and user namespace are critical for security.
  - Examples of dangerous capabilities and potential vulnerabilities (e.g., CAP_DAC_READ_SEARCH, CAP_NET_ADMIN).

- **Resource Limitation:**
  - Limiting access to procfs, sysfs, cgroups, and other system resources.
  - Handling resource consumption and updates within containers.

- **LXC and Docker Weaknesses:**
  - LXC: Capability dropping, weak REST API authentication, and Docker's GitHub-based approach.
  - Docker: Default capability retention, port mapping, base image size, and networking defaults.
  - Docker does not drop all capabilities by default and lacks support for key security features like seccomp-bpf and User Namespace.

## Recommendations
- **Kernel Hardening:**
  - Use Grsecurity/PaX for kernel hardening.
  - Apply typical sysctl hardening and minimal kernel modules.
  - Drop all unnecessary capabilities.

- **Mandatory Access Control (MAC):**
  - Implement AppArmor, Grsecurity RBAC, SMACK, or SELinux.
  - Ensure MAC is enabled by default for LXC and Docker.

- **Docker-Specific Hardening:**
  - Use small base images and avoid running privileged or root containers.
  - Upgrade to Docker 1.8 for seccomp-bpf and User Namespace support.
  - Utilize tools like docker-bench-security for security checks.

- **Network Hardening:**
  - Restrict listening on all interfaces and use containers for network auditing and traceflow.

- **Future Directions:**
  - More namespaces, minimal hypervisors, and container distros.
  - Improved seccomp-bpf argument filtering and more granular capabilities.
  - Microservices architecture aligns well with least-privilege and least-access models.

## Conclusion
- **Improving Security:**
  - Focus on improving the current state and making attackers work harder.
  - Use container technologies to secure non-container Linux systems.
  - Physically separate critical security barriers and isolate by trust.

- **Whitepaper:**
  - "Understanding and Hardening Linux Containers" covers these topics in depth.
  - Release expected in the next few weeks. Follow @dyn___ on Twitter for updates.

- **Questions/Comments:**
  - Contact: PI:EMAIL
  - Twitter: @dyn___

Thank you!