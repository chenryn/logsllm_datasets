NCC Group 
70 
LXC: Template: Cgroups 
lxc.cap.keep = sys_time sys_nice 
lxc.aa_profile = lxc-container-default 
lxc.seccomp = /path/to/seccomp.rules 
2015 
NCC Group 
71 
LXC: Template: Other Security 
2015 
NCC Group 
72 
Recent Advancements 
Non-root users can now create/start containers 
and be “root” inside the container 
Weird things can obviously happen 
More work and auditing to be done 
2015 
NCC Group 
73 
Unprivileged Containers 
There are 190 syscalls in Linux 2.2  
There are 337 syscalls in Linux 2.6 
There are 340 syscalls in Linux 4.1 
    How many does your app really need? 
2015 
NCC Group 
74 
What about that kernel attack 
surface? 
SECure COMPuting  
Filtering the kernel (yet again) 
“System call filtering isn't a sandbox.  It provides a 
clearly defined mechanism for minimizing the exposed 
kernel surface.” – Will @redpig Drewry, Google  
2015 
NCC Group 
75 
Seccomp-bpf 
Syscall arguments can also be filtered (mostly) 
Large number of filters = performance hit  
Only really  supports x86 and x86_64 (for now) 
You’ll need LXC, Minijail or Mbox 
(Docker /contrib now, release branch soon (1.8?)) 
2015 
NCC Group 
76 
Seccomp-bpf 
Seccomp-bpf 
prctl(2) – operations on a process 
PR_SET_SECCOMP: 
SECCOMP_MODE_STRICT (old) 
SECCOMP_MODE_FILTER (new hotness) 
NCC Group - INTERNAL 
2015 
77 
Seccomp-bpf 
struct sock_filter filter[] = { 
       BPF_STMT(BPF_LD+BPF_W+BPF_ABS, syscall_nr), 
       BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, __NR_ptrace, 1, 0), 
       BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW), 
       BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL) 
   }; 
struct sock_fprog prog = {(unsigned short) (sizeof(filter) / 
sizeof(filter[0])), filter }; 
prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); 
prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, 
&prog); 
NCC Group - INTERNAL 
2015 
78 
Berkeley Packet Filter 
# tcpdump –p –nqi wlan0 –d ‘tcp and port 80’ 
(000) ldh      [12] 
(001) jeq      #0x86dd          jt 2 jf 8 
(002) ldb      [20] 
(003) jeq      #0x6             jt 4 jf 19 
(004) ldh      [54] 
(005) jeq      #0x50            jt 18 
jf 6 
(006) ldh      [56] 
(007) jeq      #0x50            jt 18 
jf 19 
(008) jeq      #0x800           jt 9 jf 19 
(009) ldb      [23] 
. . . . . 
NCC Group - INTERNAL 
2015 
79 
  ChromeOS / Google Chrome 
Firejail     OpenSSH 
   Capsicum        Tor 
Mbox   vsftpd           BIND 
   LXC             QEMU  
 Opera Browser 
                         Docker (/contrib) 
2015 
NCC Group 
80 
Seccomp-bpf: where 
Docker 
CoreOS 
Flockport 
Sandstorm.io 
RancherOS 
… and many more 
2015 
NCC Group 
81 
So who is implementing 
and supporting containers? 
Heroku (ish) 
Joyent 
Amazon 
VMware 
Google/Kubernets 
2015 
NCC Group 
82 
Lets talk about the big two 
2015 
NCC Group 
83 
Packaging and deployment focused –  
one app per container 
Devs and Ops, DevOps, DevCyberOps, 
DevSecOps, BlackOps, etc 
Developing PaaS 
Makes it easy 
2015 
NCC Group 
84 
What is the “big deal” 
libcontainer, libchan, libswarm, etc 
Written in go 
REST API 
Running docker daemon (as root) 
2015 
NCC Group 
85 
So Docker is just LXC? Nope. 
Docker images: 
$ docker run --name mynginx –v \ 
/opt/content:/usr/share/nginx/html:ro -d nginx 
Docker Hub: 
$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world’ 
Hello world 
Orchestration, Communication, Management 
2015 
NCC Group 
86 
Docker Ecosystem 
2015 
NCC Group 
87 
Minimal OS for hosting containers 
Launching the rkt and app container spec 
App container spec picked up by VMware Photon 
Separation from Docker and LXC 
2015 
NCC Group 
88 
CoreOS 
Takes some of the configuration away 
FreeBSD::OSX  LXC::Docker 
Additional packaged tools | features 
2015 
NCC Group 
89 
Why Docker, Rocket, etc? 
LXC: You want to run a containerized OS or single 
app. Hard mode with the most flexibility. 
Docker: You want to run a single app per 
container. Easy mode with some costs. 
CoreOS: You want to host Docker containers or 
try and use rkt. So much bleeding it’s rated R. 
2015 
NCC Group 
90 
Why Docker, Rocket, etc? 
2015 
NCC Group 
91 
Going on the attack 
Container to other container 
Container to itself 
Container to host 
Container to support infrastructure 
Container to local network 
Container to …  
2015 
NCC Group - INTERNAL 
92 
Lets think about this…. 
2015 
NCC Group 
93 
Starting at the top 
2015 
NCC Group 
94 
Starting at the top 
Lots of drivers, old code, weird filesystems, 
old syscalls, platform specific problems 
strange or unused network protocols 
2015 
NCC Group 
95 
Kernel who? 
If you don’t drop the right ones: game over 
Not dropping caps also allows kernel code 
exec… CAP_NET_ADMIN (CVE-2013-4588, CVE-2011-
2517, CVE-2011-1019, …) 
2015 
NCC Group 
96 
Not…. Dropping caps 
Speaking of dropping capabilities, a 
Docker shocker: CAP_DAC_READ_SEARCH 
“Invoke open_by_handle_at(2)” 
Brute force the inode of /etc/shadow 
Props to Stealth aka Sebastian Kramer 
2015 
NCC Group 
97 
Not…. Dropping caps 
Without a MAC system, capability 
dropping and the user namespace 
are your only line of defense 
2015 
NCC Group 
98 
Not…. Dropping caps 
Procfs:  /proc/kcore, 
    /proc/sys/modprobe, 
    /proc/sys/kernel/sysrq 
Sysfs:        /sys 
Cgroups does not limit:  mknod 
Kernel ring buffer:   
dmesg 
Network access:     br0 
Unintended devfs:   /dev, /dev/shm 
2015 
NCC Group 
99 
Not…. Limiting access 
Forkbomb!       :(){ :|:& };: 
Memory, disk, entropy… 
2015 
NCC Group 
100 
Not…. Limiting resources 
When was the last time you 
updated OpenSSL in your Docker 
container? 
How do you deal with updates in 
place if apt-get upgrade is a “no-no”? 
2015 
NCC Group 
101 
When good containers go stale 
“The flawed assumption of modern 
computing environments” 
Eggs in one (kernel) basket 
AppArmor does a decent job 
2015 
NCC Group 
102 
Lack of MAC (Mandatory Access Controls) 
Bad defaults: Capability dropping, 
networking,   
Unprivileged containers finished-ish 
A few security fixes have lagged :/ 
2015 
NCC Group 
103 
LXC Weaknesses 
2015 
NCC Group 
104 
Capability dropping: a shocker 
Root daemon plus root to use it 
Weak REST API authentication defaults 
Docker “github all the way down” 
2015 
NCC Group 
105 
Docker Weaknesses 
Does not drop all capabilities by default, drops all except 
“those needed” (still includes some dangerous capabilities   
CAP_NET_RAW, CAP_FOWNER, CAP_MKNOD, …) 
Docker binds container port maps to all interfaces by 
default 
Base images are huge… apt-get is hungry 
Docker networking defaults allow cross-container 
networking and access to Docker host  
2015 
NCC Group 
106 
Docker Weaknesses 
Giving low rights users access to Docker means giving 
them root on the Docker host 
Currently missing support for key security features: 
seccomp-bpf and the User Namespace 
Exposing the socket/REST API inside a container for 
introspection <- don’t do that 
2015 
NCC Group 
107 
Docker Weaknesses 
Docker Weaknesses 
About that lack of User namespace….: 
Hi all, I'm a maintainer of Docker.  As others already 
indicated this doesn't work on 1.0. But it could have. Please 
remember that at this time, we don't claim Docker out-of-
the-box is suitable for containing untrusted programs with 
root privileges. So if you're thinking "pfew, good thing we 
upgraded to 1.0 or we were toast", you need to change your 
underlying configuration now. Add apparmor or selinux 
containment, map trust groups to separate machines, or ideally 
don't grant root access to the application. Docker will soon 
support user namespaces, which is a great additional security 
layer but also not a silver bullet! When we feel comfortable 
saying that Docker out-of-the-box can safely contain 
untrusted uid0 programs, we will say so clearly. 
NCC Group - INTERNAL 
2015 
108 
Posted one year ago :/ 
2015 
NCC Group - INTERNAL 
109 
2015 
NCC Group 
110 
Rocket (rkt) is extremely new 
No root daemon but rkt still requires root… 
2015 
NCC Group 
111 
CoreOS “rkt” Weaknesses 
2015 
NCC Group 
112 
Rocket does not drop many dangerous  
Capabilities or support the User namespace 
CoreOS “rkt” Weaknesses 
2015 
NCC Group 
113 
Seccomp ? Nope. 
Apparmor ? Nope. 
SELinux? Kinda. 
Root inside container? Yep. 
/proc, /proc/sys limits? Nope. 
CoreOS “rkt” Weaknesses 
2015 
NCC Group 
114 
The Dream 
2015 
NCC Group 
115 
The Implementation 
2015 
NCC Group 
116 
Open Container Project (OCP) 
Robert 'Bob' Morton: At 
Security Concepts, we're 
projecting the end of crime 
in Old Detroit within forty 
days.  
There's a new guy in town. 
His name is RoboCop. 
2015 
NCC Group 
117 
Open Container Initiative (OCI?) 
Working on a joint specification (OCF) for 
containers 
Launched runc. An OCF implementation using 
libcontainer from Docker. 
Unfortunately still not working on RoboCop. 
2015 
NCC Group 
118 
That all sounds bad/easy to mess up 
 … and how to make it better 
2015 
NCC Group 
119 
Recommendations 
2015 
NCC Group 
120 
Grsecurity/PaX is the only serious 
kernel hardening patchset. Just do it  
Typical sysctl hardening 
Minimal kernel modules 
2015 
NCC Group 
121 
Kernel Hardening 
Gotta drop them all! 
Design for the smallest set 
Assume the worst 
2015 
NCC Group 
122 
Dropping all the Capabilities 
AppArmor 
Grsecurity RBAC 
SMACK 
SELinux 
2015 
NCC Group 
123 
Adding a MAC Layer 
Defaults to enabled for LXC and 
Docker! 
Can be nested! 
Path based, but hey it works 
2015 
NCC Group 
124 
AppArmor 
Don’t allow access to docker user or group 
Don’t run privileged or root containers 
Drop additional capabilities 
Upgrade to 1.8 when released (or use /contrib now) which has seccomp-bpf 
and User namespace support, w00t! 
Checkout docker-bench-security and other solid work by Docker Security 
team 
Use small base images 
2015 
NCC Group 
125 
Docker Specific Hardening 
Use a whitelist if you can but a blacklist 
will do OK  
Docker is exploring a “high”, “med”, “low” 
default for 1.8+ but what is really needed is 
profiles for each Containerized app. 
2015 
NCC Group 
126 
Seccomp-bpf 
Mount security, Extended filesystem attributes, 
Access controls, Permissions, Logging, 
Firewalls, Auditing, Hardened 
Toolchain, Safe languages, Attack 
surface reduction, Least privileges, 
Least Access, Resource Limits, 2FA, 
Reduced Complexity, Pentesting 
2015 
NCC Group 
127 
Normal System Hardening 
Listening on “all interfaces” 
(includes docker0/lxcbr0)  
Containers are great for network 
auditing/traceflow! 
2015 
NCC Group 
128 
Network Hardening 
2015 
NCC Group 
129 
Trust A 
HYPERVISOR/HARDWARE 
Linux kernel with grsecurity+pax 
Syscall Filtering w/ seccomp-bpf 
Minimal container distro 
Mount protections 
User namespace w/o caps 
Hardened application 
Trust B 
Trust C 
Trust D 
2015 
NCC Group 
130 
Where do we go from here? 
More namespaces (proc, dev) 
Minimal hypervisors (ClearContainers) 
Minimal container distros 
Android or other non-x86 that needs app/system 
segmentation/sandboxing 
2015 
NCC Group 
131 
Where do we go from here? 
“Desktop” applications in containers 
Improved seccomp-bpf argument filtering 
Hopefully more granular capabilities 
…..  more vulnerabilities too! :/ 
2015 
NCC Group 
132 
Where do we go from here? 
Microservices 
2015 
NCC Group 
133 
Where do we go from here? 
2015 
NCC Group 
134 
Where do we go from here? 
2015 
NCC Group 
135 
Where do we go from here? 
2015 
NCC Group 
136 
Conclusion 
It’s not about perfect security but improving the 
current state and making attackers work harder 
The technologies to support containers can be used to 
help secure existing non-container Linux systems 
Microservices architecture fits a least-privilege and 
least-access container/security model 
Physically separate critical security barriers and 
isolate by trust  
2015 
NCC Group 
137 
In closing 
My whitepaper: “Understanding and Hardening 
Linux Containers”… 
Covers everything here in muuuch more depth! 
(background, namespaces, all the capabilities, cgroups, explores 
MAC, seccomp-bpf, past container attacks, overall and specific 
weaknesses, security recommendations for LXC, Docker, rkt 
deployments) 
2015 
NCC Group 
138 
Coming soon! 
When will the whitepaper be released ? 
Hopefully in the next few weeks!  
How can I make sure I get it? 
Email me! or follow me on Twitter! @dyn___ (totally not a 
ploy for more followers) 
2015 
NCC Group 
139 
Coming soon! 
   Any Questions/Comments? 
 PI:EMAIL 
  https://twitter.com/@dyn___ 
2015 
NCC Group 
140 
Thanks!