这是内核漏洞挖掘技术系列的第十一篇。  
第一篇：[内核漏洞挖掘技术系列(1)——trinity](https://xz.aliyun.com/t/4760
"内核漏洞挖掘技术系列\(1\)——trinity")  
第二篇：[内核漏洞挖掘技术系列(2)——bochspwn](https://xz.aliyun.com/t/4800
"内核漏洞挖掘技术系列\(2\)——bochspwn")  
第三篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(1)](https://xz.aliyun.com/t/4921
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(1\)")  
第四篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(2)](https://xz.aliyun.com/t/4932
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(2\)")  
第五篇：[内核漏洞挖掘技术系列(4)——syzkaller(1)](https://xz.aliyun.com/t/5079
"内核漏洞挖掘技术系列\(4\)——syzkaller\(1\)")  
第六篇：[内核漏洞挖掘技术系列(4)——syzkaller(2)](https://xz.aliyun.com/t/5098
"内核漏洞挖掘技术系列\(4\)——syzkaller\(2\)")  
第七篇：[内核漏洞挖掘技术系列(4)——syzkaller(3)](https://xz.aliyun.com/t/5154
"内核漏洞挖掘技术系列\(4\)——syzkaller\(3\)")  
第八篇：[内核漏洞挖掘技术系列(4)——syzkaller(4)](https://xz.aliyun.com/t/5223
"内核漏洞挖掘技术系列\(4\)——syzkaller\(4\)")  
第九篇：[内核漏洞挖掘技术系列(4)——syzkaller(5)](https://xz.aliyun.com/t/5401
"内核漏洞挖掘技术系列\(4\)——syzkaller\(5\)")  
第十篇：[内核漏洞挖掘技术系列(5)——KernelFuzzer](https://xz.aliyun.com/t/5443
"内核漏洞挖掘技术系列\(5\)——KernelFuzzer")
## 前言
AFL()和对应的windows上的winAFL()可以说是用户态程序二进制漏洞挖掘无人不知的神器，关于它们的分析解读在网上也到处都是。很自然有人就做出了AFL用于内核fuzz的尝试。这篇文章介绍两个相关的工具。第一个是nccgroup的TriforceAFL()，它对AFL和QEMU进行了patch，TriforceLinuxSyscallFuzzer()可以使用TriforceAFL对内核fuzz。第二个是德国波鸿鲁尔大学的KAFL[(https://github.com/RUB-SysSec](\(https://github.com/RUB-SysSec "\(https://github.com/RUB-SysSec"))。我们先讲解AFL中的qemu
mode，然后详细研究TriforceAFL和TriforceLinuxSyscallFuzzer的实现，最后简单介绍KAFL。
## AFL中的qemu mode
关于AFL的实现已经有许多分析，这里仅仅介绍AFL中的qemu mode。QEMU能够：
  1. 将一个架构(被模拟的架构)的BB(basic blocks，基本块)翻译到另一个架构(QEMU正在之上运行的架构)
  2. 将TB(translated blocks，翻译块)存储在TBC(translated block cache，翻译块缓存)中，一次翻译并多次使用
  3. 在基本块中添加prologue和epilogue，以处理基本块之间的跳转、恢复控制等操作  
让我们看一下抽象的QEMU执行流程：
  1. 启动预生成的代码prologue，初始化进程并跳转到二进制文件的_start
  2. 查找缓存中包含_start PC(program counter，程序计数器)的已翻译块，如果没有生成翻译并缓存它
  3. 跳转到已翻译的块并执行它  
AFL使用fork server模型来fuzz程序。运行目标的QEMU实例将用作一个fork server，它将通过fds
198(控制队列)和199(状态队列)与fuzzer进程通信。这个fork
server实例的克隆用于运行测试用例。目标的执行跟踪可以通过共享内存(shm)到达fuzzer进程。  
cpu_tb_exec函数负责执行TB，并且可以在其中获得诸如PC地址之类的信息。当指令指针定位于_start并执行通常的fork
server操作时执行下面的代码片段。  
afl_setup函数设置子进程中存储跟踪数据数组的共享内存。  
afl_forkserver函数负责创建fork server并监听fd以启动克隆。  
afl_maybe_log函数第一次调用setup并为每次执行TB更新共享跟踪内存。  
tb_find函数负责查找TB，它会在需要翻译时调用tb_gen_code函数。在这里添加afl_request_tsl函数来通知fork
server翻译这个块并将其保存在内存中，以便将来克隆。  
父进程此时正在afl_forkserver函数调用的afl_wait_tsl函数里等待，最终afl_wait_tsl函数会调用tb_gen_code函数来在父进程的缓存中翻译一个块。这样未来的子进程就可以使用这个缓存了，避免每个块翻译多次。  
syscall.patch在fork server发生SIGABRT的时候传递正确的pid和tgid。  
elfload.patch用于记录afl_entry_point，afl_start_code和afl_end_code。它们在afl_maybe_log函数中用于某些边界检查。
## TriforceAFL
### TriforceAFL中的qemu mode
通常当使用AFL
fuzz时，每个测试用例都会启动一个驱动程序并运行直到完成或崩溃。当对操作系统进行fuzz时，这并不总是可能的。TriforceAFL允许操作系统启动并加载一个驱动程序，该驱动程序控制fuzz的生命周期以及托管测试用例。  
使用TriforceAFL对内核fuzz将执行以下步骤：启动操作系统，操作系统将调用fuzz驱动程序作为其启动过程的一部分。驱动程序将：启动AFL fork
server；获取一个测试用例；启用解析器的跟踪；解析测试用例；启用内核或内核的某些部分的跟踪；基于已解析的输入进行系统调用；通知测试用例已经成功完成(如果测试用例没有因为panic而提前终止)。在为每个测试用例重复启动fork
server之后，afl-fuzz程序将安排所有这些步骤。下面就来看看具体实现。  
由于fuzzer在虚拟机的fork副本中运行，因此每个测试用例的内核的内存状态都是隔离的。如果操作系统使用除内存之外的任何其它资源，这些资源将不会在测试用例之间隔离。因此，通常希望使用内存文件系统(如Linux
ramdisk映像)引导操作系统。  
将一个称为aflCall的特殊的指令添加到CPU，在QEMU的disas_insn函数中实现了指令的翻译，具体实现是在该函数中增加了一个处理该指令的case。  
它支持startForkserver/getWork/startWork/doneWork这几个操作。  
startForkserver：这个调用导致虚拟机启动AFL fork
server。在这个调用之后，虚拟机中的每一个操作都将在虚拟机fork的副本中运行，该副本只持续到测试用例结束。  