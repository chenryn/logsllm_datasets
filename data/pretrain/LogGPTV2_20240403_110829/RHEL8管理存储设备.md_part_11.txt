::: itemizedlist
-   4 KiB
-   2 MiB
-   1 GiB
:::
设备 DAX 节点只支持以下系统调用：
::: itemizedlist
-   `open()`{.literal}
-   `close()`{.literal}
-   `mmap()`{.literal}
:::
不支持 `read()`{.literal} 和 `write()`{.literal} 变体，因为设备 DAX
用例与持久内存编程相关联。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-device-dax-namespace-on-an-nvdimm}安装 ndctl {.title}
:::
此流程安装 `ndctl`{.literal} 工具，用于配置和监控 NVDIMM 设备。
::: itemizedlist
**流程**
-   要安装 `ndctl`{.literal} 工具程序，请使用以下命令：
    ``` screen
    # yum install ndctl
    ```
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#reconfiguring-an-existing-nvdimm-namespace-to-device-dax-mode_creating-a-device-dax-namespace-on-an-nvdimm}将现有 NVDIMM 命名空间重新配置为设备 DAX 模式 {.title}
:::
此流程将 NVDIMM 设备上的命名空间重新配置为设备 DAX
模式，并允许您在命名空间中存储数据。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
重新配置命名空间会删除以前存储在命名空间中的所有数据。
:::
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-device-dax-namespace-on-an-nvdimm "安装 ndctl"){.xref}。
:::
::: orderedlist
**流程**
1.  列出系统中的所有命名空间：
    ``` screen
    # ndctl list --namespaces --idle
    [
      {
        "dev":"namespace1.0",
        "mode":"raw",
        "size":34359738368,
        "state":"disabled",
        "numa_node":1
      },
      {
        "dev":"namespace0.0",
        "mode":"raw",
        "size":34359738368,
        "state":"disabled",
        "numa_node":0
      }
    ]
    ```
2.  重新配置任何命名空间：
    ``` screen
    # ndctl create-namespace \
            --force \
            --mode=devdax \
            --reconfig=namespace-ID
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531402472272}
    **例 5.3. 将命名空间配置为设备 DAX**
    ::: example-contents
    以下命令为支持 DAX 的数据存储重新配置 `namespace0.0`{.literal}。它与
    2MiB 错误粒度一致，可确保一次 2-MiB 页中的操作系统错误：
    ``` screen
    # ndctl create-namespace \
            --force \
            --mode=devdax \
            --align=2M \
            --reconfig=namespace0.0
    ```
    :::
    :::
3.  命名空间现在包括在 `/dev/daxN.M`{.literal} 路径中。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-new-nvdimm-namespace-in-device-dax-mode_creating-a-device-dax-namespace-on-an-nvdimm}在设备 DAX 模式下创建新 NVDIMM 命名空间 {.title}
:::
此流程在 NVDIMM 设备上创建新设备 DAX
命名空间，可让您在命名空间中存储数据。
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-device-dax-namespace-on-an-nvdimm "安装 ndctl"){.xref}。
-   NVDIMM 设备支持标签。
:::
::: orderedlist
**流程**
1.  列出系统中有可用空间的 `pmem`{.literal} 区域。在以下示例中，空间位于
    `region5`{.literal} 和 `region4`{.literal} 区域：
    ``` screen
    # ndctl list --regions
    [
      {
        "dev":"region5",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-7337419320239190016
      },
      {
        "dev":"region4",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-137289417188962304
      }
    ]
    ```
2.  在任何可用区域中，分配一个或多个命名空间：
    ``` screen
    # ndctl create-namespace \
            --mode=devdax \
            --region=regionN \
            --size=namespace-size
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531402448416}
    **例 5.4. 在区域上创建命名空间**
    ::: example-contents
    以下命令在 `region4`{.literal} 中创建 36-GiB 设备 DAX 命名空间。它与
    2MiB 错误粒度一致，可确保一次 2-MiB 页中的操作系统错误：
    ``` screen
    # ndctl create-namespace \
            --mode=devdax \
            --region=region4 \
            --align=2M \
            --size=36G
    {
      "dev":"namespace1.2",
      "mode":"devdax",
      "map":"dev",
      "size":"35.44 GiB (38.05 GB)",
      "uuid":"5ae01b9c-1ebf-4fb6-bc0c-6085f73d31ee",
      "raw_uuid":"4c8be2b0-0842-4bcb-8a26-4bbd3b44add2",
      "daxregion":{
        "id":1,
        "size":"35.44 GiB (38.05 GB)",
        "align":2097152,
        "devices":[
          {
            "chardev":"dax1.2",
            "size":"35.44 GiB (38.05 GB)"
          }
        ]
      },
      "numa_node":1
    }
    ```
    :::
    :::
3.  命名空间现在包括在 `/dev/daxN.M`{.literal} 路径中。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-file-system-dax-namespace-on-an-nvdimm_using-nvdimm-persistent-memory-storage}在 NVDIMM 上创建文件系统 DAX 命名空间 {.title}
:::
您可以在文件系统 DAX 模式中配置 NVDIMM
设备来支持有直接访问功能的文件系统。
您可以：
::: itemizedlist
-   将现有命名空间重新配置为文件系统 DAX 模式，或者
-   如果有可用空间，请创建新文件系统 DAX 命名空间。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
文件系统 DAX 技术仅作为技术预览提供，红帽不提供支持。
:::
::: itemizedlist
**先决条件**
-   一个 NVDIMM 设备被附加到您的系统。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#nvdimm-in-file-system-direct-access-mode_creating-a-file-system-dax-namespace-on-an-nvdimm}文件系统直接访问模式中的 NVDIMM {.title}
:::
当以文件系统直接访问（文件系统 DAX, `fsdax`{.literal}）模式配置 NVDIMM
设备时，可以在其上创建文件系统。
任何在这个文件系统中的文件上执行 `mmap()`{.literal}
操作的应用程序都会直接访问其存储。这启用了 NVDIMM
的直接访问编程模型。文件系统必须使用 `-o dax`{.literal}
选项挂载才能进行直接映射。
#### []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#per_page_metadata_allocation}按页元数据分配
这个模式需要在系统 DRAM 或者 NVDIMM 设备本身中分配每个页面的元数据。每个
4 KiB 页的这个数据结构的开销是 64 字节：
::: itemizedlist
-   在小设备中，开销非常小，足以满足 DRAM 的要求。例如，16-GiB
    命名空间只需要 256 MiB 作为页面结构。因为 NVDIMM
    设备通常比较小且昂贵，所以最好将页面跟踪数据结构保存在 DRAM 中。
-   在大小为 TB 或更大的 NVDIMM
    设备中，存储页面跟踪数据结构所需的内存量可能会超过系统中 DRAM
    的数量。一个 NVDIMM TiB 只需要 16 GiB
    用于页面结构。因此，在这种情况下，最好在 NVDIMM 本身中存储数据结构。
:::
您可以在配置命名空间时使用 `--map`{.literal}
选项配置每个页面元数据的存储位置：
::: itemizedlist
-   要在系统 RAM 中分配，请使用 `--map=mem`{.literal}。
-   要分配 NVDIMM，请使用 `--map=dev`{.literal}。
:::
#### []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#partitions_and_file_systems_on_fsdax}fsdax 中的分区和文件系统
当在 `fsdax`{.literal} 设备中创建分区时，分区必须按页界限一致。在 Intel
64 和 AMD64 构架中，启动和结束分区至少需要 4 KiB 校对。2 MiB
是首选的校对。
在 Red Hat Enterprise Linux 8 中，作为技术预览可在 NVDIMM 上创建 XFS 和
ext4 文件系统。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-file-system-dax-namespace-on-an-nvdimm}安装 ndctl {.title}
:::
此流程安装 `ndctl`{.literal} 工具，用于配置和监控 NVDIMM 设备。
::: itemizedlist
**流程**
-   要安装 `ndctl`{.literal} 工具程序，请使用以下命令：
    ``` screen
    # yum install ndctl
    ```
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#reconfiguring-an-existing-nvdimm-namespace-to-file-system-dax-mode_creating-a-file-system-dax-namespace-on-an-nvdimm}将现有 NVDIMM 命名空间重新配置为文件系统 DAX 模式 {.title}
:::
此流程将 NVDIMM 设备上的命名空间重新配置为文件系统 DAX
模式，并允许您在命名空间中存储文件。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
重新配置命名空间会删除以前存储在命名空间中的所有数据。
:::
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-file-system-dax-namespace-on-an-nvdimm "安装 ndctl"){.xref}。
:::
::: orderedlist
**流程**
1.  列出系统中的所有命名空间：
    ``` screen
    # ndctl list --namespaces --idle
    [
      {
        "dev":"namespace1.0",
        "mode":"raw",
        "size":34359738368,
        "state":"disabled",
        "numa_node":1
      },
      {
        "dev":"namespace0.0",
        "mode":"raw",
        "size":34359738368,
        "state":"disabled",
        "numa_node":0
      }
    ]
    ```
2.  重新配置任何命名空间：
    ``` screen
    # ndctl create-namespace \
            --force \
            --mode=fsdax \
            --reconfig=namespace-ID
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531402392160}