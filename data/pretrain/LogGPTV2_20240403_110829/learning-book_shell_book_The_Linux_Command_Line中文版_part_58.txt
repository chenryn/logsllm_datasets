35.5总结
在这一章中，我们学习了很多小东西，在脚本中这些小零碎可以完成“真正的工作”。随着我
们编写脚本经验的增加，能够有效地操作字符串和数字的能力将具有极为重要的价值。我们的
479
---
## Page 481
loan-cale脚本表明，甚至可以创建简单的脚本来完成一些真正有用的事情。
35.6额外加分
虽然该loan-calc脚本的基本功能已经很到位了，但脚本还远远不够完善。为了额外加分，试着
给脚本loan-calc添加以下功能：
·完整的命令行参数验证
·用一个命令行选项来实现“交互”模式，提示用户输入本金、利率和贷款期限
·输出格式美化
35.7拓展阅读
·《BashHackersWiki》对参数展开有一个很好的论迹：
http://wiki.bash-hackers.org/syntax/pe
·《Bash参考手册》也介绍了这个：
http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion
·Wikipedia上面有一篇很好的文章描述了位运算：
http://en.wikipedia.org/wiki/Bit_operation
·和一篇关于三元运算的文章：
http://en.wikipedia.org/wiki/Ternary_operation
·还有一个对计算还贷金额公式的描述，我们的loan-cale脚本中用到了这个公式：
http://en.wikipedia.org/wiki/Amortization_calculator
480
---
## Page 482
36
数组
在上一章中，我们查看了shell怎样操作字符串和数字的。目前我们所见到的数据类型在计算
机科学圈里被称为标量变量：也就是说，只能包含一个值的变量。
在本章中，我们将者看另一种数据结构叫做数组，数组能存放多个值。数组儿乎是所有编程
语言的一个特性。shell也支持它们.尽管以一个相当有限的形式。即便如此，为解决编程问题，
它们是非常有用的。
36.1什么是数组？
数组是一次能存放多个数据的变量。数组的组织结构就像一张表。我们拿电子表格举例。一张
电子表格就像是一个二维数组。它既有行也有列，并且电子表格中的一个单元格，可以通过单
元格所在的行和列的地址定位它的位置。数组行为也是如此。数组有单元格，被称为元素，而
且每个元素会包含数据。使用一个称为索引或下标的地址可以访问一个单独的数组元素。
大多数编程语言支持多维数组。一个电子表格就是一个多维数组的例子，它有两个维度，宽
度和高度。许多语言支持任意维度的数组，虽然二维和三维数组可能是最常用的。
Bash中的数组仅限制为单一维度。我们可以把它们看作是只有一列的电子表格。尽管有这
种局限，但是有许多应用使用它们。对数组的支持第一次出现在bash版本2中。原来的Unix
shell程序，sh，根本就不支持数组。
36.2创建一个数组
数组变量就像其它bash变量一样命名，当被访问的时候，它们会被自动地创建。这里是一个
例子：
[ne@linuxbox -]$ a[1]=foo
[neglinuxbox -]8 echo $(a[1]]
foo
481
---
## Page 483
这里我们看到一个赋值并访问数组元素的例子。通过第一个命令，把数组a的元素1赋值
为“foo”。第二个命令显示存储在元素1中的值。在第二个命令中使用花括号是必需的，以便
防止shell试图对数组元素名执行路径名展开操作。
也可以用declare命令创建一个数组：
 e- aretoo s[- xoqrnustsou]
使用-a选项，declare命令的这个例子创建了数组a°
36.3数组赋值
有两种方式可以给数组赋值。单个值赋值使用以下语法：
nane [subscript]=value
这里的name是数组的名字，subscript是一个大于或等于零的整数（或算术表达式）。注意
数组第一个元素的下标是0．而不是1。数组元素的值可以是一个字符申或整数。
多个值赋值使用下面的语法：
nane=(value1 value2 ..-)
这里的name是数组的名字，value.是要按照顺序赋给数组的值，从元素0开始。例如，如
果我们希望把星期几的英文简写赋值给数组days，我们可以这样做：
[ne@linuxbox -]$ days= (Sun Mon Tue Wed Thu Fri Sat)
还可以通过指定下标，把值赋给数组中的特定元素：
[ne@]inuxbox -]$ days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Pri[6]=Sat)
482
---
## Page 484
36.4访问数组元素
程任务则可以用数组完成。
让我们考虑一个简单的数据收集和展示的例子。我们将构建一个脚本，用来检查一个特定
目录中文件的修改次数。从这些数据中，我们的脚本将输出一张表，显示这些文件最后是在一
称为hours，输出这样的结果：
[ne@linuxbox -]$ hours
Hour Files Hour Files
00
0
12 11
01
1
13
7
02
0
14
1
E0
0
15
7
04
1
16
6
04
1
17
5
06
6
18
4
07
3
19
4
80
1
20
1
60
14
21
0
10
22
0
11
23
Total files = 80
当执行该hours程序时，指定当前目录作为目标目录。它打印出一张表显示一天（0-23小
时）每小时内，有多少文件做了最后修改。程序代码如下所示：
#!/bin/bash
# hours : script to count files by nodification time
usage (){
echo “usage: $(basenane $0) directory* >b2
#Check that argunent is a directory
if [[ ! -d $1 ]]; then
483
---
## Page 485
usage
exit 1
fi
# Initialize array
for i in {0. . 23} ; do hours[i]=0; done
# Collect data
for i in $(stat -c %y *$1*/* I cut -c 12-13); do
j=${1/#0}
((++hours [j]))
((++count))
done
vie fedsta #
-----\----\-----\----, a- oqpa
for i in {0..11); do
j=$((1 + 12))
]{[]$$u%。d
done
printf "\nTotal files = %d\n* $count
这个脚本由一个函数（名为usage），和一个分为四个区块的主体组成。在第一部分，我们
检查是否有一个命令行参数，且该参数为目录。如果不是目录，会显示脚本使用信息并退出。
第二部分初始化一个名为hours的数组。给每一个数组元素赋值一个0。虽然没有特殊需要
在使用之前准备数组，但是我们的脚本需要确保没有元素是空值。注意这个循环构建方式很有
接下来的一部分收集数据，对目录中的每一个文件运行stat程序。我们使用cut命令从结
果中抽取两位数字的小时字段。在循环里面，我们需要把小时字段开头的零清除掉，因为shell
将试图（最终会失败）把从“00”到“09”的数值解释为八进制（见表35-1）。下一步，我们
以小时为数组索引，来增加其对应的数组元素的值。最后，我们增加一个计数器的值（count），
记录目录中总共的文件数目。
脚本的最后一部分显示数组中的内容。我们首先输出两行标题，然后进入一个循环产生两
栏输出。最后，输出总共的文件数目。
36.5数组操作
有许多常见的数组操作。比方说删除数组，确定数组大小，排序，等等。有许多脚本应用程序。
484
---
## Page 486
36.5.1输出整个数组的内容
下标*和@可以被用来访问数组中的每一个元素。与位置参数一样，α表示法在两者之中更
有用处·这里是一个演示：
(ustg e。 e e,Sop ,)=stewrue s[- xoqxnuteou]
[ne@linuxbox -]$ for i in ${aninals[▪]}; do echo $i; done
a
Bop
a
cat
fish
[ne@linuxbox -]$ for 1 in ${aninals[@]];: do echo $i; done
Bop
a
cat
a
fish
[ne@linuxbox -]$ for i in *${aninals[+]}"; do echo $i; done
a dog a cat a fish
[ne@linuxbox -]$ for i in *${aninals[@]}"; do echo $i; done
a dog
a cat
a fish
我们创建了数组animals，并把三个含有两个字的字符串赋值给数组。然后我们执行四个循
环看一下对数组内容进行分词的效果。表示法${animals[]}和${animals[@]}的行为是一致的
直到它们被用引号引起来。
36.5.2确定数组元素个数
使用参数展开，我们能够确定数组元素的个数，与计算字符串长度的方式几乎相同。这里是一
个例子：
[ne@linuxbox -]$a[100]=foo
485
---
## Page 487
[ne@linuxbox -]$ echo ${#a[a]} # nunber of array elenents
[neglinuxbox -]$ echo ${#a[100]] # length of elenent 100
3
我们创建了数组a，并把字符串“foo”赋值给数组元素100。下一步，我们使用参数展开
来检查数组的长度，使用@表示法。最后，我们查看了包含字符串“foo”的数组元素100的
长度。有趣的是，尽管我们把字符串赋值给数组元素100，bash仅仅报告数组中有一个元素。
这不同于一些其它语言的行为，这种行为是数组中未使用的元素（元素0-99）会初始化为空值，
并把它们计入数组长度。
36.5.3找到数组使用的下标
因为bash允许赋值的数组下标包含“间隔”，有时候确定哪个元素真正存在是很有用的。为做
到这一点，可以使用以下形式的参数展开：
{/jfnuunj}s
S{!array/@/}
这里的array是一个数组变量的名字。和其它使用符号*和α的展开一样，用引号引起来
的@格式是最有用的，因为它能展开成分离的词。
[ne@linuxbox -]$ foo=([2]=a [4]=b [6]=c)
[nellinuxbox -]$ for 1 in *$(foo[@]}°: do echo $i; done
[ne@linuxbox -]$ for 1 in *${1foo[@]}"; do echo $i; done
2
4
36.5.4在数组末尾添加元素
如果我们需要在数组末尾附加数据，那么知道数组中元素的个数是没用的，因为通过和@表
示法返回的数值不能告诉我们使用的最大数组索引。幸运地是，shell为我们提供了一种解决方
486
---
## Page 488
案。通过使用+=赋值运算符，我们能够自动地把值附加到数组末尾。这里，我们把三个值赋
给数组foo，然后附加另外三个。
[ne@linuxbox-]$ foo=(a b c)
[nedlinuxbox-]$ echo $(foo[@]}
a b c
[ne@linuxbox-]$ foo+=(d e f)
[neglinuxbox-]$ echo $(foo[α]}
a b c d e f
36.5.5数组排序
就像电子表格，经常有必要对一列数据进行排序。Shell没有这样做的直接方法，但是通过一点
儿代码，并不难实现。
#!/bin/bash
# array-sort : Sort an array
( q  p a )=t
[0]e]s :fexze [eutatag. oa
a_sorted=($(for i in *${a[Q]}°; do echo $i; done 1 sort))
echo *Sorted array: ${a_sorted [e]}"
当执行之后，脚本产生这样的结果：
[nedlinuxbox -]$ array-sort
Original array: f e d c b a
Sorted array:
a b c d e f
脚本运行成功，通过使用一个复杂的命令替换把原来的数组（a）中的内容复制到第二个数
组（a_sorted）中。通过修改管道线的设计，这个基本技巧可以用来对数组执行各种各样的操
作。
487
---
## Page 489
36.5.6删除数组
删除一个数组，使用unset命令：
[ne@linuxbox -]s foo=(a b c d e f)
[ne@linuxbox -]$ echo ${foo[q]}
a b c d e f
oo qasun s[- xoqxnustoou]
[ne@linuxbox -]$ echo ${foo[q]}