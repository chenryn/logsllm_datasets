## Page 153
列根本原因一致或者相关的事件和报警信息，这些事件应该在同一个事后报告中讨论。
例如写事后报告（参见文献[Loo10]）。我们对一个紧急事件（incident）的定义是，一系
每次on-call值班过程中，轮值工程师必须有足够的时间处理紧急事件和后续跟进工作，
质量上保持平衡
重地决定，仔细考虑两种模式的成本，业务系统的重要性，以及每个系统的业务压力。
但是，多地团队增加了沟通和合作的成本。因此，是否将当地团队转为多地团队应该慎
我们更愿意把该团队转化为多地团队（multisite）。多地团队相比之下有以下两点优势
如果一个服务有足够的业务需求需要更多的人，与其继续扩展当地团队（single site）
需要每月轮值一次。如果团队分散在两地，那么最少工程师的数量是6名。这样既可以
则这个团队需要至少8名工程师。假设每次on-call值班长度为一周，那么每名工程师只
假设每次on-call轮值中需要有两名工程师（主on-call和副on-call，分别进行不同的工作），
利用25%这个时间上限，我们可以计算出满足7×24on-call轮值制度的最少SRE数量。
之处。所以，我们强调至少将SRE团队50%的时间花在软件工程上。在其余时间中，
数量上保持平衡
SRE 管理者负责保证on-call 轮值的工作压力在这两个维度保持在一个可持续的水平上。
的事故数量决定。
指某个工程师在on-call事务上花费的具体时间。质量则可以通过每次on-call轮值发生
SRE团队对on-call工作的质量（这里更多是指工作压力）和数量有明确的要求。数量是
on-call工作平衡
详细介绍。
on-call轮值制度的具体制定有很多种方式，请参看文献[Lim14]中关于on-call章节的更
保障25%的时间上限，也可以保证两地各有足够的工程师开展研发工作。
不超过25%的时间用来on-call，另外25%的时间用来处理其他运维工作。
我们十分强调SRE中的
·长时间执行夜间任务对人的健康不利（参见文献[Dur05]）。多地团队可以利用“日
）通过限制一个团队在on-call轮值制度中的人员数量，可保障每个工程师对生产
环境的熟悉程度（请参见本章后面的“奸诈的敌人一
出而作，日落而息”（Followthe sun）的轮值制度使整个团队避免夜间值班。
“E”（Engineering），认为这是区别我们与传统Ops团队的不同
一运维压力不够”
on-call工作平衡
一节）。
111
128
---
## Page 154
129
112
常认知功能的工作，最后导致错误行为的产生（参见文献[Chr09]）。
肾上腺皮质素（CRH）都会对人的行为造成影响，甚至造成恐惧，进而影响人类进行正
而影响到整个系统的可靠性。从医学上讲，压力状态下释放的荷尔蒙，例如皮质醇和促
的精神压力，危害工程师的身体健康，并且可能导致SRE在处理问题过程中犯错误，从
带来的压力感。业务系统的重要性和操作所带来的影响程度会对on-call工程师造成巨大
为了确保on-call工程师可以保持在第二种处理方式范围内，我们必须要减轻on-call所
计划更周全的执行过程。
当处理复杂系统问题时，第二种行事方式是更好的，可能会产生更好的处理结果，以及
处理方法之一（参见文献[Kah11]）：
现代理论研究指出，在面临挑战时，
设施系统。SRE思考和解决问题的方法论对正确处理问题是非常关键的。
程师要直接负责用户可见、直接影响公司收入的系统，或者是支撑这些系统运转的基础
正如前文所述，SRE负责运维Google最重要的生产系统。在on-call 轮值期间，SRE工
安全感
不够，或者疲劳过度（burnout）。
是为了保障团队按需参与on-call，同时避免过量on-call带来的问题，例如项目开发时间
为上限。这个限制实际上是为限制每个工程师的on-call时间比例。整套激励体制的建立
用不同的方式进行补贴。Google提供年假或者现金补贴，同时按一定程度的工资比例作
管理层需要考虑，针对工作时间之外的on-call工作应给予合理的补贴。不同的组织团队
补贴措施
以及第30章）。
如果在某个季度中，某个团队持续不断地超过这个指标，那么管理团队必须采取一些修
么早晚另外一个组件也会同时报警，导致当天总报警次数超标。
值保持在0左右。如果某个组件几乎每次轮值都会报警，导致每日紧急事件中值>1，那
能产生两个紧急事件。为了维持在这个范围内，报警事件的每日发生概率应该很低，中
及事后总结等，至少需要6个小时。因此，我们认为，每12个小时的轮值周期最多只
我们发现，平均下来，处理任何一个生产环境事件，包括事件根源分析、事件处理，以
·理性、专注、有意识地进行认知类活动。
·依赖直觉，自动化、快速行动。
第11章on-cal轮值
一个人会主动或非主动（潜意识）地选择下列两种
---
## Page 155
提供足够的自动化工具和检查来减少人为犯错误的可能性（参见文献[Loo10]）。
后系统性地分析问题产生的原因提供了宝贵数据。犯错误是不可避免的，软件系统应该
写事后报告，详细记录所有事件发生的时间线。这些事后报告都是对事不对人的，为日
而且应该采取措施避免再次发生同样的问题。SRE团队必须在大型应急事件发生之后书
最后，在应急事件处理结束时，仔细评估哪些地方有问题，哪些地方做得好是非常关键的。
题，而不是在格式化公告邮件，或者是同时更新多个对外沟通渠道上浪费时间。
以及保留对外状态更新公告的历史等。利用这些工具，on-call工程师可以专注于解决问
内部开发使用了一个Web工具，可自动化大部分操作。比如提供方便的职责交接流程，
骤可以帮助on-call工程师利用所有可用的资源将问题最终解决。对应这套流程，Google
使用的是在第14章中描述的流程。这个流程定义了一系列清晰的简单步骤，沿用这些步
仍不能预测多久能够恢复时，应该考虑启用某种正式的应急事务处理流程。Google SRE
一个工程师在处理非常复杂、需要同时引入多个团队的问题时，或者经过一段时间调查
寻求开发团队的帮助常常是解决问题的关键。
队永远可以寻求这些伙伴团队的帮助。当非常严重、原因不明确的紧急情况出现时及时
通常，SRE运维的生产系统对应的开发团队也会参与7×24on-cal1轮值，所以SRE团
资源有：
让on-call SRE知道他们可以寻求外部帮助，对减轻on-call压力也很有帮助。最重要的
决问题，同时不停地审视和验证目前所有的假设。
在应急事件处理过程中，最理想的方法论是这样的：在有足够数据支撑的时候按步骤解
产生的，习惯性的快速反应的动作后果一般都没有经过详细考虑，这可能会将灾难扩大。
有可能由于凭直觉去解释问题产生的原因而浪费宝贵的时间。快速反应主要是由习惯而
直觉一般都不是基于明确的数据支持的。因此，在处理问题的过程中，on-call工程师很
看起来都是很有用的方法，但是这些方法都有自己的缺点。直觉很可能是错误的，而且
在应急事故处理过程中，凭直觉操作和快速反应（例如服务出现问题就先重启服务器
次报警也归类为虚假报警，从而没有认真处理，导致真实事故的发生。
很容易联想起前3次报警都是由于某个外部系统造成的虚假报警，于是很自然地将第4
非常容易产生的现象，举例来说，当on-call工程师收到本周内第4个同样报警信息时，
过的操作，这些操作很容易导致“过度联想”现象的产生。“过度联想”是在on-call中
在这些压力释放的荷尔蒙的影响下，on-call工程师往往会选择反应性的、未经详细考虑
清晰定义的应急事件处理步骤。
清晰的问题升级路线。
无指责，对事不对人的文化氛围（参见文献[L0010]和[Al112]）。
安全感
130
---
## Page 156
131
发团队共同将系统运维压力降低，以便重新由SRE独立运维。
者全部报警信息转交给研发组处理。采用这样的临时措施，SRE才能有时间和精力与开
这种情况下，SRE团队不应该承担全部运维压力，而是应该和研发团队协商，将某些或
降低系统运维压力可能需要改变复杂的系统架构，甚至需要几个季度的时间来完成。在
因为基本上SRE总是可以和研发团队共同努力，使得运维压力下降。但是在某些情况下，
轮值，直到系统达到SRE团队设立的稳定性目标为止。但是这种情况发生的概率极小，
在极端情况下，SRE团队可以选择停止支持某个服务。该服务将由开发团队负责on-call
立一个共同目标，解决运维压力问题。
序导致程序稳定性下降，或者更容易产生报警。在这种情况下，SRE需要和研发团队设
有的时候，造成运维压力上升的因素并不是由SRE控制的，比如研发团队可能修改了程
复地处理报警。
报警比例接近1：1。这样，在问题真正发生时，工程师可以专注于解决问题，而不是重
师在处理紧急事件时，会暂时禁止重复和无关报警，以便更好地专注在真正重要的工作
异常情况可能会触发多条报警，所以合理地分组汇总报警信息是很重要的。通常，工程
同时，控制on-call工程师收到的针对同一起事故的报警总数也很重要。有的时候，
应会导致真正重要的报警被忽略，具体可参看第29章。
个每小时都触发的低优先级报警会严重影响on-call工程师的生产力。同时“狼来了”效
一致，每条报警信息必须是可实际操作的（指收到报警后有明确的动作需要执行）。
错误的监控系统配置常常是导致运维压力过大的原因。报警策略必须跟服务的SLO目标
化（例如：每天工单数量第12章
134
116
注1参见第28章，使用通用故障排查过程手段和方法论往往是学习一个系统的有效方法。
我们的流程定义和名词使用。如果你现在的方法很好用，没有任何理由去改变。
让我们一起来看一下基本的故障排查流程。对这个流程非常熟悉的读者可以不用太在意
对系统设计方式和构建原理的知识是不可或缺的。
样做通常是很低效的。对系统内部运行的了解往往限制了SRE处理系统问题的有效性，
新手们常常不能有效地进行故障排查，是因为这个过程理想情况下同时需要两个条件。
个可以自我学习，也是一项可以传授的技能。
难的事情。这就像解释如何骑自行车一样。但是在本章中，我们认为故障排查过程是一