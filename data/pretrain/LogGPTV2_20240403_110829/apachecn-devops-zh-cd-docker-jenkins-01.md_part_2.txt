持续集成管道通常是起点。设置它很简单，因为一切都是在开发团队中完成的，不需要与质量保证和运营团队达成一致。
# 自动化验收测试
自动化验收测试阶段是与客户(和质量保证人员)一起编写的一套测试，它应该取代手动 UAT 阶段。它作为一个质量门来决定一个产品是否准备好发布。如果任何验收测试失败，则停止管道执行，不再运行进一步的步骤。它阻止移动到配置管理阶段，从而阻止发布。
自动化验收阶段的整个想法是将质量构建到产品中，而不是在以后进行验证。换句话说，当开发人员完成实现时，软件已经与验收测试一起交付，验收测试验证软件是客户想要的。这是软件测试思维的一个巨大转变。不再有一个人(或团队)批准发布，但一切都取决于通过验收测试套件。这就是为什么创建这个阶段通常是持续交付过程中最困难的部分。它需要与客户密切合作，并在流程的开始(而不是结束)创建测试。
Introducing automated acceptance tests is especially challenging in the case of legacy systems. We describe more on that topic in [Chapter 9](09.html), *Advanced Continuous Delivery*.
对于测试的类型以及它们在持续交付过程中的位置，通常会有很多混淆。通常也不清楚如何自动化每种类型，覆盖范围应该是什么，质量保证团队在整个开发过程中应该扮演什么角色。让我们用敏捷测试矩阵和测试金字塔来阐明它。
# 敏捷测试矩阵
Brian Marick 在他的一系列博客文章中，以所谓的敏捷测试矩阵的形式对软件测试进行了分类。它将测试放在两个维度:面向业务或技术，支持程序员或评论产品。让我们来看看这个分类:
![](img/8f120904-9296-452a-a8dd-75dc8059ff6d.png)
让我们简单地评论一下每种类型的测试:
*   **验收测试(自动化)**:这些测试代表了从业务角度看的功能需求。它们是由客户和开发人员以故事或例子的形式编写的，以就软件应该如何工作达成一致。
*   **单元测试(自动化)**:这些测试帮助开发人员提供高质量的软件，并最大限度地减少 bug。
*   **探索性测试(手动)**:这是手动黑盒测试，试图打破或改进系统。
*   **非功能测试(自动化)**:这些测试代表与性能、可伸缩性、安全性等相关的系统属性。
这个分类回答了关于持续交付过程的一个最重要的问题:质量保证在这个过程中扮演什么角色？
手动 QAs 执行探索性测试，所以他们玩系统，尝试打破它，提出问题，思考改进。自动化 QAs 帮助进行非功能和验收测试，例如，他们编写代码来支持负载测试。一般来说，质量保证在交付过程中没有特殊的位置，而是在开发团队中扮演一个角色。
In the automated Continuous Delivery process, there is no longer a place for manual QAs who perform repetitive tasks.
你可能会看着分类，想知道为什么你在那里看不到集成测试。布莱恩·马里克的目标是什么，以及如何将它们放在持续交付管道中？
为了很好地解释它，我们首先需要提到集成测试的含义根据上下文的不同而不同。对于(微)服务架构，它们通常意味着与验收测试完全相同，因为服务很小，只需要单元和验收测试。如果您构建了一个模块化的应用，那么通过集成测试，我们通常指的是绑定多个模块(但不是整个应用)并将它们测试在一起的组件测试。在这种情况下，集成测试将自己置于验收测试和单元测试之间。它们的编写方式与验收测试类似，但通常更具技术性，不仅需要模仿外部服务，还需要模仿内部模块。与单元测试类似，集成测试代表“代码”的观点，而验收测试代表“用户”的观点。关于持续交付管道，集成测试只是作为过程中的一个单独阶段来实现的。
# 测试金字塔
上一节解释了每个测试类型在过程中代表什么，但是没有提到我们应该开发多少测试。那么，在单元测试的情况下，代码覆盖率应该是多少呢？验收测试呢？
为了回答这些问题，迈克·科恩在他的《敏捷的成功:使用 Scrum 的软件开发》一书中创建了一个所谓的测试金字塔。让我们看一下图表，以便更好地理解它。
![](img/f7a6cd1f-e677-49d1-8646-bca9f764282f.png)
当我们沿着金字塔向上移动时，测试会变得更慢，创建成本也会更高。他们经常需要接触用户界面并雇佣一个独立的测试自动化团队。这就是为什么验收测试不应该以 100%的覆盖率为目标。相反，它们应该面向特性，并且只验证选定的测试场景。否则，我们将在测试开发和维护上花费一大笔钱，我们的持续交付管道构建将需要很长时间来执行。
金字塔底部的情况不同。单元测试既便宜又快，所以我们应该争取 100%的代码覆盖率。它们是由开发人员编写的，提供它们应该是任何成熟团队的标准程序。
我希望敏捷测试矩阵和测试金字塔能阐明验收测试的作用和重要性。
让我们进入持续交付流程的最后一个阶段，配置管理。
# 结构管理
配置管理阶段负责跟踪和控制软件及其环境的变化。它涉及准备和安装必要的工具、扩展服务实例的数量及其分布、基础架构清单以及与应用部署相关的所有任务。
配置管理解决了在生产环境中手动部署和配置应用带来的问题。这种常见的做法导致了一个问题，即我们不再知道每个服务在哪里运行以及使用什么属性。配置管理工具(如 Ansible、Chef 或 Puppet)支持将配置文件存储在版本控制系统中，并跟踪生产服务器上所做的每一项更改。
取代操作团队手动任务的另一项工作是负责应用监控。这通常是通过将正在运行的系统的日志和指标流式传输到一个公共仪表板来完成的，该仪表板由开发人员(或 DevOps 团队，如下一节所述)监控。
# 持续交付的先决条件
本书的其余部分致力于如何实现成功的持续交付管道的技术细节。然而，这个过程的成功不仅取决于我们在整本书中展示的工具。在本节中，我们从整体上审视整个流程，并从三个方面定义持续交付要求:
*   您的组织结构及其对开发过程的影响
*   您的产品及其技术细节
*   您的开发团队和您使用的实践
# 组织先决条件
您的组织的工作方式对引入持续交付流程的成功有很大影响。这有点类似于介绍 Scrum。许多组织希望使用敏捷过程，但是他们不会改变他们的文化。你不能在你的开发团队中使用 Scrum，除非组织的结构被调整到那样。例如，您需要一个产品所有者、利益相关者和管理层，他们理解在冲刺阶段不可能有需求变化。否则，即使有善意，你也做不到。这同样适用于持续交付流程；它需要调整组织的结构。让我们看看三个方面:DevOps 文化、流程中的客户和业务决策。
# 德沃普斯文化
很久以前，当软件由个人或微流编写时，开发、质量保证和操作之间没有明确的分离。一个人开发了代码，测试了它，然后把它投入生产。如果出现任何问题，同一个人会调查问题，修复问题，然后重新部署到生产中。当系统变得更大，开发团队成长时，开发的组织方式现在逐渐改变。然后，工程师开始在一个领域变得专业化。这很有道理，因为专业化提高了生产率。然而，副作用是通信开销。如果开发人员、质量保证和运营在组织中的不同部门下，位于不同的建筑中，或者外包给不同的国家，这一点尤其明显。这样的组织结构对持续交付过程没有好处。我们需要更好的东西，我们需要适应所谓的 DevOps 文化。
在某种意义上，DevOps 文化意味着回归根源。一个人或一个团队负责所有三个领域，如下图所示:
![](img/2121ef45-ffa9-46d9-adb9-94c98b8b4d1b.png)
之所以能够在不损失生产力的情况下转向 DevOps 模式，是因为自动化。大多数与质量保证和操作相关的任务被转移到自动化交付管道，因此可以由开发团队管理。
A DevOps team doesn't necessarily need to consist only of developers. A very common scenario in many organization's under transformation is to create teams with four developers, one QA, and one person from operations. They need, however, to work closely together (sit in one area, have stand-ups together, work on the same product).
小型开发团队的文化影响着软件架构。功能需求必须很好地分成(微)服务或模块，这样每个团队都可以处理一个独立的部分。
The impact of the organization's structure on the software architecture was already observed in 1967 and formulated as Conway's Law: "Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure."
# 过程中的客户
在采用持续交付的过程中，客户(或产品所有者)的角色略有变化。传统上，客户参与定义需求，回答开发人员的问题，参加演示，并参加 UAT 阶段，以确定构建的内容是否是他们想要的。
在持续交付中，没有 UAT，在编写验收测试的过程中，客户是必不可少的。对于一些已经以可测试的方式编写了需求的客户来说，这并不是一个大的转变。对其他人来说，这意味着思维方式的改变，使需求更加面向技术。
In the Agile environment, some teams don't even accept user stories (requirements) without acceptance tests attached. Such techniques, even though they may sound too strict, often lead to better development productivity.
# 商业决策
在大多数公司中，业务对发布时间表有影响。毕竟，交付什么功能以及何时交付的决定与公司的不同部门(例如，市场营销)相关，并且对企业具有战略意义。这就是为什么发布时间安排必须在业务和开发团队之间重新评估和讨论。
显然，有一些技术，如功能切换或手动管道步骤，有助于在指定时间释放功能。我们将在本书后面描述它们。准确地说，术语“持续交付”与“持续部署”并不相同。前者意味着对存储库的每次提交都会自动发布到产品中。持续交付没有那么严格，意味着每个提交都以一个候选版本结束，所以它允许最后一步(发布到产品)是手动的。
In the rest of the book, we will use the terms Continuous Delivery and Continuous Deployment interchangeably.
# 技术和开发先决条件
从技术方面来说，有几个要求需要记住。我们将在整本书中讨论它们，所以我们只在这里提到它们，不做详细介绍:
*   **自动化构建、测试、打包和部署操作**:所有操作都需要能够自动化。如果我们处理不可自动化的系统，例如，由于安全原因或其复杂性，那么就不可能创建完全自动化的交付管道。
*   **快速管道执行**:管道必须及时执行，最好 5-15 分钟。如果我们的管道执行需要几个小时或几天，那么就不可能在每次提交到存储库之后运行它。
*   **快速故障恢复**:必须具备快速回滚或系统恢复的可能性。否则，我们会因频繁发布而危及生产健康。
*   **零宕机部署**:部署不能有任何宕机，因为我们一天发布很多次。
*   **基于主干的开发**:开发人员必须定期签到一个主分支。否则，如果每个人都在自己的分支中开发，集成很少，因此发布也很少，这与我们想要实现的正好相反。
我们将在整本书中详细介绍这些先决条件以及如何解决它们。记住这一点，让我们转到本章的最后一节，介绍我们计划在本书中构建什么系统，以及我们将为此使用什么工具。
# 构建持续交付流程
我们介绍了持续交付流程的理念、优势和先决条件。在这一节中，我们描述了将在整本书中使用的工具以及它们在整个系统中的位置。
If you're interested more in the idea of the Continuous Delivery process, then have a look at an excellent book by Jez Humble and David Farley, *Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation*.
# 介绍工具