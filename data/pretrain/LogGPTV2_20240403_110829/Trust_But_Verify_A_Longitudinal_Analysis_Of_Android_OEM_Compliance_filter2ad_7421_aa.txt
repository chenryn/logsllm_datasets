title:Trust, But Verify: A Longitudinal Analysis Of Android OEM Compliance
and Customization
author:Andrea Possemato and
Simone Aonzo and
Davide Balzarotti and
Yanick Fratantonio
4
7
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Trust, But Verify: A Longitudinal Analysis Of
Android OEM Compliance and Customization
Andrea Possemato∗†, Simone Aonzo†, Davide Balzarotti†, Yanick Fratantonio†‡
∗ IDEMIA
† EURECOM
‡ Cisco Talos
Abstract—Nowadays, more than two billions of mobile devices run
Android OS. At the core of this success are the open source nature of
the Android Open Source Project and vendors’ ability to customize
the code base and ship it on their own devices. While the possibility
of customizations is beneficial to vendors, they can potentially lead
to compatibility and security problems. To prevent these problems,
Google developed a set of requirements that must be satisfied for a
vendor to brand its devices as “Android,” and recently introduced
Project Treble as an effort to partition vendor customizations. These
requirements are encoded as part of a textual document (called Com-
patibility Definition Document, or CDD) and various automated tests.
This paper performs the first longitudinal study on Android OEM
customizations. We first built a dataset of 2,907 ROMs, spanning
across 42 different vendors, and covering Android versions from 1.6
to 9.0 (years 2009–2020). We then developed an analysis framework
and pipeline to extract each ROM’s customization layers and evaluate
it across several metrics. For example, we analyze ROMs to determine
whether they are compliant with respect to the various requirements
and whether their customizations negatively affect the security pos-
ture of the overall device. In the process, we focus on various as-
pects, ranging from security hardening of binaries, SELinux policies,
Android init scripts, and kernel security hardening techniques. Our
results are worrisome. We found 579 over 2,907 (∼20%) of the ROMs
have at least one violation for the CDD related to their Android
version — incredibly, 11 of them are branded by Google itself. Some
of our findings suggest that vendors often go out of their way to bypass
or “comment out” safety nets added by the Android security team. In
other cases, we found ROMs that modify init scripts to launch at boot
outdated versions (with known CVEs and public POCs) of programs
as root and reachable from a remote attacker (e.g., tcpdump). This
paper shows that Google’s efforts are not enough, and we offer several
recommendations on how to improve the compliance check pipelines.
I. INTRODUCTION
Mobile devices play a fundamental role in our everyday lives.
The vast majority of them, more than two and a half billion
worldwide [1], run the Android operating system. A Google-led
open source project called Android Open Source Project (AOSP)
offers both the documentation and the source code needed to build
custom variants of the Android operating system (Android OS from
now on). These variants are usually called Android ROMs.
However, AOSP does not include all the components required
to build a complete system. For instance, Google and AOSP cannot
provide kernel device drivers for every hardware configuration.
Therefore, third-party vendors (also known as Original Equipment
Manufacturers, or OEMs) that wish to produce an Android-based
device need to properly customize and tweak an AOSP base image
according to their needs. These modifications can affect both user-
space components, for instance, by including custom applications
or services, and kernel-space components, such as kernel drivers.
AOSP’s openness and flexibility was a determining factor for
the great success of the platform, leading to its adoption by a vast
number of vendors, which market devices with various hardware
configurations and versions of Android. This resulted in a multitude
of different variants, an aspect known as fragmentation. The differ-
ent natures of the different devices can lead to a significant degree of
customization (with respect to the baseline AOSP) that, in turn, can
have a massive impact on the security of the resulting Android ROM.
In particular, we can identify two classes of security problems.
The first is that these customizations may affect the security
posture of the overall system (e.g., by making Google’s hardening
efforts vain), increase the attack surface, and in some cases, even
introduce new security vulnerabilities. For instance, a recent study
published by Project Zero reports several critical bugs found in such
customizations [2].
The second class of problems may originate from the actual
components that are affected by the OEM customizations. Indeed,
customizations that modify core components of the Android OS
may lead to compatibility problems and delays in the application
of security patches, such as the ones released as part of the monthly
Android security bulletins.
Google, who is leading the Android project, is well aware of
these problems, and it has tried to counter them by working in two
parallel directions.
The first is compliance: while AOSP is an open source project
and thus it can be freely modified, an OEM that wishes to brand its
devices with the “Android” label (which is a trademark of Google)
needs to follow a well-defined set of rules. For example, to be
Android-branded, a device needs to meet the requirements presented
in the Android Compatibility Definition Document (CDD) [3], in-
cluding any documents incorporated via reference. From a practical
standpoint, the CDD is a series of technical and non-technical
requirements specified in natural language. Each of the requirements
has a label that indicates whether it must be adopted, its adoption
is strongly recommended, or just recommended. A new CDD is pub-
lished for each new version of Android, and, usually, requirements
that are indicated as ‘strongly recommended’ are later marked as
‘must’ in the next version of the CDD. To simplify the checking
for compliance with these requirements, Google also released a
Compatibility Test Suite (CTS). While the CTS has the advantage of
being fully automated, it only checks for a subset of the requirements
specified in the CDD (this is due to the nature of some CDD require-
© 2021, Andrea Possemato. Under license to IEEE.
DOI 10.1109/SP40001.2021.00074
87
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
ments, which is challenging to express in a programmatic form).
A second Google-led effort to counter the security repercussions
introduced by OEM customizations is Project Treble, a re-
architecture of the Android OS, introduced in 2017 as part of
Android 8.0. This reorganization aims to separate the vendor-
specific components (e.g., drivers for specific chipsets and other
customizations) from the core Android OS framework. The
rationale behind this change is to make it easier for OEM to apply
(security) patches to their customized AOSP. In fact, AOSP patches
only touch AOSP-related code and do not touch the vendor-specific
portion. Thus, an OEM that respects Project Treble’s core principle
can always cleanly apply AOSP security patches without worrying
about backward compatibility and other integration problems.
Finally, with Project Treble, the test suites have also been aug-
mented with the Vendor Test Suite (VTS), which helps to validate the
vendor interface and ensuring forward compatibility of vendor im-
plementations. According to Google’s documentation [4], the VTS
can be thought of as an analogous of the CTS, and it can be used to
automate the testing of the hardware abstraction layer and OS kernel,
in both legacy and current Android architectures. We note that com-
pliance with the VTS is strictly required for any ROM that wishes to
run Google’s software suite, also known as Google Mobile Services
(GMS), which includes popular software like the Google Play Store,
GMail, Google Maps, and YouTube. VTS compliance is also re-
quired for a device to be branded under the ‘Android One’ label [5].
Some works show how vendors’ customizations introduce
vulnerabilities with severe security repercussions. Researchers
focused on customized drivers [6] and customizations of the
Android framework [7], but we still lack a complete picture of
Android OEM customizations over time and that tackles different
aspects of the OS security perimeter. Hence, we built a fully
automated analysis pipeline tailored to the analysis of Android
OEM customizations, and we used our framework to perform the
first large-scale longitudinal study on Android OEM customizations.
The analysis was performed on a dataset of 2,907 ROMs from
42 different OEMs. This dataset was obtained by crawling OEMs
websites, which often contain direct links to ROMs, and it consists
of ROMs published from the year 2010 to 2020 and covering
ROMs from Android version 2.3 to version 9.0.
From a high-level perspective, our analysis focuses on two key
aspects: 1) whether a given OEM complies with the various regula-
tions imposed on Android-branded devices (e.g., CDD, CTS, VTS);
and 2) whether and how the various OEM customizations affect the
security posture of the entire OEM. To investigate these two aspects,
our study considers a wide range of technical aspects, including cus-
tomizations of the security hardening of binaries, SELinux policies,
Android’s init scripts, and kernel security hardening settings.
Our large-scale measurement allows us, for the first time, to
answer several security-related questions. For instance, are Google’s
automated compliance checks sufficient to detect CDD and VTS
violations? Do certified ROMs violate some of the requirements?
Do ROM customizations follow Project Treble’s principle of
keeping vendor-specific changes to the vendor partition (so to ease
the application of security patches)? What kind of customizations is
most prevalent? Do these customizations affect the overall security
posture? For what concerns the vendor-specific binaries and data,
how do their security settings (e.g., hardening techniques) fare when
compared to the ones adopted in the main AOSP baseline?
Sadly, the answers to these questions are often worrisome. We
identified that 579 over 2,907 (∼20%) Android-branded ROM
violate at least one “must comply” CDD rule, while 289 (∼10%)
do not implement at least one “strongly recommended” suggestion.
While some of these violations may have gone unnoticed
by Google because of the technical challenges involved when
automatically analyzing ROM—a challenge that we nonetheless
successfully overcame—some of these violations are surprisingly
obvious, and even the automated CTS and VTS tests can raise
warnings. This result casts some shadow on the effectiveness of the
ROM certification process. Our analysis also identified violations
concerning Project Treble guidelines: in particular, we found ROMs
that significantly modify non-vendor partitions, thus affecting the
ease of application of security patches. Even though we believe that
the principle and the intent of Project Treble are valuable, its effec-
tiveness is hampered by the lack of a strict enforcement procedure.
Finally, we identified several customizations whose security
impact, regardless of whether they constitute or not a violation
of the guidelines, is significant. For example, we have found that
29% of ROMs with SELinux modified their policies in a way that
bypasses never allow specifications of the main AOSP SELinux
policy: we identified cases that “commented out” never allow
SELinux policies to compile their customized version of the policies.
We also found devices shipping init scripts implementing
invasive customizations. For instance, we found a vendor that ships
a ROM with an outdated version of tcpdump (with a known
CVE and public POC), running as root, at boot, and reachable by
a remote attack. We also found several ROMs that do not use many
of the hardening techniques that the Android security team has
developed over the years [8].
We conclude this paper with several recommendations for
Google. In particular, we identified several improvements to extend
the compliance requirements that can be automatically verified,
and we discuss several proposals in terms of guidelines that Google
could add to its official documentation to discourage customizations
that affect the security posture of customized ROMs.
In summary, this paper makes the following contributions:
• We perform the first longitudinal and large-scale analysis on
2,907 Android ROMs, over 42 OEMs and spanning over 10
versions of Android, to explore how customizations affect the
Android System Security.