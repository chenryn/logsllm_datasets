To evaluate the attacks beyond the mobile devices (§6.3),
we selected 18 popular commercial BLE products and three
CC2640 development boards, which are presented in Fig-
ure 5 from various vendors to demonstrate our ﬁndings.
USENIX Association
29th USENIX Security Symposium    47
6.2 Attacks against Mobiles
Generality of the attacks against different Android mo-
biles. We tested all design ﬂaws on mainstream Android ver-
sions, from 7.0 to 9.0 as shown Table 4 and ﬁnd that all our
attacks work with no adjustments. Recall that a fake device
may use the “Insufficient Authentication (0x05)”
error or “Insufficient Encryption (0x0f)” error in §3
to stealthily pair with the victim mobile through Just Works.
This approach works under all versions of Android we tested.
On Android 7.0, a fake device can also send a security re-
quest to stealthily pair with the victim mobile while the secu-
rity request on higher versions of Android will raise a pairing
request dialog window asking the user for permission. Such
a dialog Window may alert the user.
Brand
Version
Samsung Galaxy S8+
Google Pixel 2
Samsung Tablet
Samsung Note 8
Google Pixel 2
Samsung Ofﬁcial Android 7.0
AOSP Android 8.0
Samsung Ofﬁcial Android 8.1
Samsung Ofﬁcial Android 8.1
AOSP Android 9.0
Table 4: Tested Android mobiles
Generality of the attacks against BLE apps.
In §3, we
show that the Android BLE programming framework has
four design ﬂaws. Intuitively, all Android BLE apps using
the framework are vulnerable to attacks presented in this
paper. We also want to ﬁnd if apps use any pairing intents
(presented in Listing 2) to determine the association method
after pairing, and thus detect the MAC address and IRK
stealing attack for the purpose of intrusion detection. Recall
Listing 2 cannot prevent the MAC address and IRK stealing
attack and other attacks as discussed in Flaw 2 in §3.
We build a tool named BLE pairing scanner (BLEPS)
based on soot [18] to statically enumerate functions used
in an app, construct call graphs and then determine how
the app performs pairing and uses intents.
Table 5
shows among all
the BLE apps, 6282 apps use pair-
ing related functions and intents. 2581 apps use create-
Bond() to explicitly start a pairing process.
6117 apps
use getBondState() to determine if the mobile is bonded
with the peer device before data transmission.
2005
apps use only the ACTION_BOND_STATE_CHANGED intent to
check if the mobile is bonded with the intended device.
239 apps use both ACTION_BOND_STATE_CHANGED and
ACTION_PAIRING_REQUEST. 152 out of the 239 apps use in-
tents to determine if Passkey Entry or Numeric Comparison
is used. These apps then automatically input a ﬁxed passkey
for Passkey Entry via setPin() or programmatically “click”
the conﬁrmation button via setPairingConirmation()
when Numeric Comparison is used as the association
method. These strategies make Passkey Entry and Numeric
Comparison useless. 87 of the 239 apps register intents for
BLE apps
Quantity
All apps
Apps using pairing related functionalities/intents
Apps using createBond() for pairing
Apps using getBondState() for pairing status
Apps using ACTION_BOND_STATE_CHANGED
intent for pairing status
Apps using intents for automatic pairing
Apps using intents for debuging
Apps using intents for intrusion detection
18929
6282
2581
6117
2005
152
87
0
Radio
100%
33.10%
13.60%
32.31%
10.59%
0.80%
0.45%
0
Table 5: BLE apps using pairing related functions and intents
Device Name
Type
Permission
APPLights-1
APPLights-2
APPLights-3
Magic Hue
Magc Light
Flux
NPoW
iLux
FORA TNG
iHealth-1
iHealth-2
iBalance
Omron 10
Qradio Aram
Logitech
K830
Logitech
K380
Logitech
K780
Microsoft
Designer
CC26XX with
SCO mode
enabled
Light
Light
Light
Light
Light
Light
Light
Light
Medical
Medical
Medical
Medical
Medical
Medical
Keyboard
Keyboard
Keyboard
Keyboard
Development
board
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
read/write
encrypted
read/write
encrypted
read/write
encrypted
read/write
encrypted
read/write
encrypted
read/write
authenticated
read/write
Attacks
II
III IV V VI VII VIII
I
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2)  (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) 
 (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2)  (cid:2) (cid:2) (cid:2)
(cid:2) (cid:2) (cid:2) (cid:2) 
 (cid:2) (cid:2)
Table 6: Attacks against commercial products. (cid:2) means vul-
nerable.  means not vulnerable. All the attacks are launched
without physical access to mobiles and peer devices.
debugging purposes by printing pairing status via Log.d(.).
We also perform manual analysis of these apps that involve
both the two intents and ﬁnd that none of the apps imple-
ments Listing 2 for intrusion detection.
Attacks against the mobiles and apps of the tested BLE
devices. We have also successfully deployed Attacks I-IV in
Figure 3 against mobiles installed with the apps of all the 18
commercial BLE products in Figure 5 and the results are pre-
sented in Table 6. Example attacks are presented as follows.
(i) Attack I. We can deploy the downgrade attack and inject
false measurements into the mobile app of iBalance Blood
pressure monitors. (ii) Attack II. We can steal the APPLights
app’s passwords that are used for application layer user au-
thentication. (iii) Attack III. A fake keyboard has the same
MAC address and name as a victim Logitech 780 BLE key-
board and utilizes a higher advertising frequency so that it
has a better chance to connect to a victim tablet than the vic-
48    29th USENIX Security Symposium
USENIX Association
tim keyboard. Here a blocker is not used to block the victim
BLE keyboard because a BLE keyboard often implements a
whitelist and accepts only a previously paired mobile. Once
paired with the victim tablet, the fake keyboard can obtain
the IRK and MAC address of the victim tablet. (iv) Attack
IV. We are able to deploy the DoS attack against a smart-
phone installed with the smart light app from Flux so that the
communication between the mobile and the real light fails
since the mobile’s LTK is manipulated and LTKs on the two
sides are different. Note that the light from iLux does not
support pairing at all. Therefore, an attacker can not create
an LTK on the light, and the DoS attack fails.
6.3 Attacks beyond Mobiles
Attacks against BLE devices. Table 6 also shows the re-
sults of the attacks against the 18 commercial BLE prod-
ucts and the CC2640 development board. In particular, we
have identiﬁed various vulnerabilities on the peer BLE de-
vices, which may exist in other BLE products too: (i) Lack
of SCO mode. All 18 commercial BLE devices do not en-
able the SCO mode, and an attacker can pair with these de-
vices using Just Works without physical access.
(ii) Mis-
used permissions. 13 devices conﬁgure their attributes as
read/write, and these attributes can be accessed without pair-
ing. The current BLE Human Interface Device (HID) pro-
ﬁle [19] does not enforce the SCO mode and requires only
the encrypted (not authenticated) read/write permission for
keyboard services. Therefore, the attacker may pair a fake
tablet with a victim keyboard remotely using Just Works.
Intuitively, all keyboards should be subject to our MITM
attack given it is an HID speciﬁcation ﬂaw. (iii) Incorrect
implementation of the SCO mode. Although TI’s SDK al-
lows an application to set an SCO mode ﬂag, it only checks
if the incoming pairing request enables the Secure Connec-
tions (SC) bit and does not check if the negotiated association
method is Passkey Entry or Numerical Comparison. (iv) In-
correct implementation of attribute permission. An LTK can
be an unauthenticated-and-no-MITM-protection key created
by Just Works or an authenticated-and-MITM-protection key
created by Passkey Entry, Numeric Comparison and OOB.
Assume that a victim mobile has used secure pairing to pair
with a victim BLE device based on TI chips and generated an
authenticated-and-MITM-protection LTK. We ﬁnd when a
fake mobile with the victim mobile’s MAC address uses Just
Works and pairs with the victim device, TI’s BLE stack does
not update the key property, the generated LTK is still an
authenticated-and-MITM-protection key, and the fake mo-
bile can access attributes with the authenticated read/write
permission. We have tested and proved the vulnerabilities
on TI’s CC2640, CC2640R2F, and CC2650, and reported
the identiﬁed vulnerabilities to TI and a patched SDK was
released recently [7].
We present example attacks beyond mobiles against the
18 commercial BLE products as follows. (i) Attack V. The
passive eavesdropping attack requires the victim device have
read/write attributes. It fails if the peer device has attributes
of encrypted read/write or authenticated read/write as shown
in Table 6. For example, with Attack V, an attacker can sniff
blood pressure readings sent from an iBalance blood pres-
sure monitor, breaching user privacy. (ii) Attack VI. The at-
tack bypassing the whitelist works against BLE devices with
a whitelist enabled such as the K780 keyboard. (iii) Attack
VII. The data manipulation attack works against all BLE de-
vices. For example, we can access and manipulate attributes
with authenticated read/write permission of any device based
upon TI CC26XX chips, even if the SCO mode is enabled.
(iv) Attack VIII. The MITM attack works against all devices.
For example, we have implemented the MITM attack against
the k780 BLE keyboard and a tablet with two TI CC2640
development boards hosted in a case. One board works as a
fake tablet connecting to the victim keyboard, and the other
works as the fake BLE keyboard connecting to the victim
tablet with the stolen IRK and MAC address.
Maximal attack distance Although BLE is designed for
short-range communication, the attack distance against BLE
devices depends on factors such as antenna gain and trans-
mission power of involved devices. The attacker can use a
large antenna to increase the attack distance. We use the
CC2640R2F chips as the attacking fake devices and fake mo-
biles and ﬁnd these off-the-shelf chips can achieve a reason-
able long maximal attack distance, which is measured with
a Bosch GLR825 laser distance measurer as the farthest dis-
tance at which the attacking device and target can be paired
together. Figure 6 gives the cumulative distribution func-
tion (CDF) of the maximal attack distance against 20 differ-
ent Android mobiles including Google Pixel 4, Samsung S10
and HUAWEI P30 Pro and the 18 devices in Figure 5. The
maximal attack distance mean and maximum are 77.2 me-
ters (m) and 94.0m against mobiles, and 46.5m and 77.1m
against devices.
Keyboard connection competition As discussed earlier,
when both a victim keyboard and a fake keyboard try to con-
nect to a victim mobile, the one with a higher advertising
frequency has a better chance. We now present the impact of
the advertising frequency on the success rate of the fake key-
board connecting to the victim mobile. In our experiments,
the victim keyboard is put close to an Android mobile as in
a normal use scenario, while the fake keyboard is 10 meters
away from the keyboard. For each advertising frequency,
we perform the connection competition game 20 times. The
success rate is the number of successful connections by our
fake keyboard over 20. Figure 7 shows the success rate ver-
sus the advertising frequency. The success rate is 50% when
the advertising frequency of the fake keyboard is 30HZ. The
BLE speciﬁcation sets the highest advertising frequency as
50 HZ, at which the success rate by the fake keyboard is
75%. We use CC2640 for the fake keyboard, which does not
work when the advertising frequency is beyond 50HZ.
USENIX Association
29th USENIX Security Symposium    49
(cid:20)
(cid:19)(cid:17)(cid:27)
(cid:37)(cid:47)(cid:40)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:86)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)(cid:86)