### 6.2 Attacks against Mobiles

#### Generality of the Attacks on Different Android Mobiles
We tested all design flaws on mainstream Android versions, ranging from 7.0 to 9.0, as shown in Table 4. Our findings indicate that all our attacks are effective without any modifications across these versions. Recall that a fake device can use the "Insufficient Authentication (0x05)" or "Insufficient Encryption (0x0f)" errors, as described in §3, to stealthily pair with the victim's mobile device using Just Works. This method is successful on all tested Android versions.

On Android 7.0, a fake device can also send a security request to stealthily pair with the victim's mobile. However, on higher Android versions, this security request will trigger a pairing request dialog window, which may alert the user.

| Brand          | Version        |
|----------------|----------------|
| Samsung Galaxy S8+ | Samsung Official Android 7.0 |
| Google Pixel 2 | AOSP Android 8.0 |
| Samsung Tablet | Samsung Official Android 8.1 |
| Samsung Note 8 | Samsung Official Android 8.1 |
| Google Pixel 2 | AOSP Android 9.0 |

**Table 4: Tested Android Mobiles**

#### Generality of the Attacks on BLE Apps
In §3, we identified four design flaws in the Android BLE programming framework. Consequently, all Android BLE apps that use this framework are vulnerable to the attacks presented in this paper. We also investigated whether apps use any pairing intents (as shown in Listing 2) to determine the association method after pairing, which could help detect MAC address and IRK stealing for intrusion detection. However, Listing 2 cannot prevent the MAC address and IRK stealing attack and other attacks, as discussed in Flaw 2 in §3.

We developed a tool called BLE Pairing Scanner (BLEPS) based on soot [18] to statically enumerate functions used in an app, construct call graphs, and determine how the app performs pairing and uses intents. Table 5 summarizes the results:

- 6282 apps use pairing-related functions and intents.
- 2581 apps use `createBond()` to explicitly start a pairing process.
- 6117 apps use `getBondState()` to check if the mobile is bonded with the peer device before data transmission.
- 2005 apps use only the `ACTION_BOND_STATE_CHANGED` intent to check if the mobile is bonded with the intended device.
- 239 apps use both `ACTION_BOND_STATE_CHANGED` and `ACTION_PAIRING_REQUEST`.
- 152 out of the 239 apps use intents to determine if Passkey Entry or Numeric Comparison is used. These apps then automatically input a fixed passkey for Passkey Entry via `setPin()` or programmatically "click" the confirmation button via `setPairingConfirmation()` when Numeric Comparison is used. These strategies render Passkey Entry and Numeric Comparison ineffective.
- 87 of the 239 apps register intents for debugging purposes by printing pairing status via `Log.d()`.

| BLE Apps       | Quantity   |
|----------------|------------|
| All apps       | 18929      |
| Using pairing-related functionalities/intents | 6282      |
| Using `createBond()` for pairing | 2581       |
| Using `getBondState()` for pairing status | 6117      |
| Using `ACTION_BOND_STATE_CHANGED` intent for pairing status | 2005      |
| Using intents for automatic pairing | 152        |
| Using intents for debugging | 87         |
| Using intents for intrusion detection | 0          |

**Table 5: BLE Apps Using Pairing-Related Functions and Intents**

#### Attacks on Mobiles and Apps of Tested BLE Devices
We successfully deployed Attacks I-IV (as shown in Figure 3) against mobiles installed with the apps of all 18 commercial BLE products listed in Figure 5. The results are presented in Table 6. Example attacks include:

1. **Attack I**: We can deploy a downgrade attack and inject false measurements into the mobile app of iBalance Blood pressure monitors.
2. **Attack II**: We can steal the APPLights app’s passwords used for application layer user authentication.
3. **Attack III**: A fake keyboard with the same MAC address and name as a victim Logitech 780 BLE keyboard can use a higher advertising frequency to connect to a victim tablet. Once paired, the fake keyboard can obtain the IRK and MAC address of the victim tablet.
4. **Attack IV**: We can deploy a DoS attack against a smartphone installed with the smart light app from Flux, causing communication failure between the mobile and the real light due to manipulated LTKs. Note that the light from iLux does not support pairing, making the DoS attack ineffective.

**Table 6: Attacks Against Commercial Products**
- (cid:2) means vulnerable
- (cid:3) means not vulnerable

All attacks were launched without physical access to the mobiles and peer devices.

### 6.3 Attacks Beyond Mobiles

#### Attacks on BLE Devices
Table 6 also shows the results of the attacks against the 18 commercial BLE products and the CC2640 development board. We identified various vulnerabilities in the peer BLE devices, which may exist in other BLE products as well:

1. **Lack of SCO mode**: All 18 commercial BLE devices do not enable the SCO mode, allowing an attacker to pair with these devices using Just Works without physical access.
2. **Misused permissions**: 13 devices configure their attributes as read/write, which can be accessed without pairing. The current BLE Human Interface Device (HID) profile [19] does not enforce the SCO mode and requires only encrypted (not authenticated) read/write permission for keyboard services. Thus, an attacker can pair a fake tablet with a victim keyboard remotely using Just Works.
3. **Incorrect implementation of the SCO mode**: Although TI’s SDK allows setting an SCO mode flag, it only checks if the incoming pairing request enables the Secure Connections (SC) bit and does not verify the negotiated association method.
4. **Incorrect implementation of attribute permission**: An LTK can be an unauthenticated-and-no-MITM-protection key created by Just Works or an authenticated-and-MITM-protection key created by Passkey Entry, Numeric Comparison, and OOB. If a victim mobile pairs with a victim BLE device using secure pairing and generates an authenticated-and-MITM-protection LTK, a fake mobile with the victim mobile’s MAC address can use Just Works to pair with the victim device. TI’s BLE stack does not update the key property, allowing the fake mobile to access attributes with authenticated read/write permission. We tested and confirmed these vulnerabilities on TI’s CC2640, CC2640R2F, and CC2650, and reported them to TI, who released a patched SDK [7].

#### Example Attacks Beyond Mobiles
1. **Attack V (Passive Eavesdropping)**: This attack requires the victim device to have read/write attributes. It fails if the peer device has attributes of encrypted read/write or authenticated read/write. For example, an attacker can sniff blood pressure readings from an iBalance blood pressure monitor, breaching user privacy.
2. **Attack VI (Whitelist Bypass)**: This attack works against BLE devices with a whitelist enabled, such as the K780 keyboard.
3. **Attack VII (Data Manipulation)**: This attack works against all BLE devices. For example, we can access and manipulate attributes with authenticated read/write permission of any device based on TI CC26XX chips, even if the SCO mode is enabled.
4. **Attack VIII (MITM Attack)**: This attack works against all devices. For example, we implemented the MITM attack against the K780 BLE keyboard and a tablet using two TI CC2640 development boards. One board acts as a fake tablet connecting to the victim keyboard, while the other acts as a fake BLE keyboard connecting to the victim tablet with the stolen IRK and MAC address.

#### Maximal Attack Distance
Although BLE is designed for short-range communication, the attack distance against BLE devices depends on factors such as antenna gain and transmission power. The attacker can use a large antenna to increase the attack distance. Using CC2640R2F chips as the attacking fake devices and fake mobiles, we found that these off-the-shelf chips can achieve a reasonable maximal attack distance. This was measured using a Bosch GLR825 laser distance measurer. Figure 6 shows the cumulative distribution function (CDF) of the maximal attack distance against 20 different Android mobiles, including Google Pixel 4, Samsung S10, and HUAWEI P30 Pro, and the 18 devices in Figure 5. The mean and maximum attack distances are 77.2 meters and 94.0 meters against mobiles, and 46.5 meters and 77.1 meters against devices.

#### Keyboard Connection Competition
When both a victim keyboard and a fake keyboard attempt to connect to a victim mobile, the one with a higher advertising frequency has a better chance. We present the impact of the advertising frequency on the success rate of the fake keyboard connecting to the victim mobile. In our experiments, the victim keyboard was placed close to an Android mobile, while the fake keyboard was 10 meters away. For each advertising frequency, we performed the connection competition game 20 times. The success rate is the number of successful connections by the fake keyboard over 20. Figure 7 shows the success rate versus the advertising frequency. The success rate is 50% when the advertising frequency of the fake keyboard is 30 Hz. The BLE specification sets the highest advertising frequency at 50 Hz, at which the success rate by the fake keyboard is 75%. We used CC2640 for the fake keyboard, which does not work beyond 50 Hz.

---

This optimized text provides a clear, coherent, and professional presentation of the research findings and methodology.