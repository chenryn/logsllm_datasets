│ count(DISTINCT id) │  
├────────────────────┤  
│ 99                 │  
└────────────────────┘  
```  
```  
2022-10-01 10:42:32.155 CST,"postgres","postgres",1603,"127.0.0.1:51561",6337a917.643,13,"idle in transaction",2022-10-01 10:42:31 CST,5/16,0,LOG,00000,"statement:   
COPY (SELECT ""id"" FROM ""public"".""t"" WHERE ctid BETWEEN '(92000,0)'::tid AND '(93000,0)'::tid  AND (""id"" < '100' AND ""id"" IS NOT NULL)) TO STDOUT (FORMAT binary);  
",,,,,,,,,"","client backend",,0  
2022-10-01 10:42:32.156 CST,"postgres","postgres",1609,"127.0.0.1:51559",6337a917.649,13,"idle in transaction",2022-10-01 10:42:31 CST,11/16,0,LOG,00000,"statement:   
COPY (SELECT ""id"" FROM ""public"".""t"" WHERE ctid BETWEEN '(93000,0)'::tid AND '(4294967295,0)'::tid  AND (""id"" < '100' AND ""id"" IS NOT NULL)) TO STDOUT (FORMAT binary);  
",,,,,,,,,"","client backend",,0  
...  
```  
## 期待  
如果PG和Duckdb, parquet结合更加顺滑的话, PG的OLAP计算、存储能力、使用体验又能跃升一个数量级.    
## 当前版本的使用限制  
1、某些PG数据类型不能直接mapping到duckdb, 例如pg里面的numeric(因为PG是自己实现的一套numeric), 使用postgres_scan报错, duckdb无法支持PG的numeric类型, 使用copy binary格式估计duckdb也解析不出numeric的value.:    
```  
D SELECT * FROM postgres_scan_pushdown('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't1') limit 1;  
Error: Invalid Error: INTERNAL Error: Decimal has a width of 255 which is bigger than the maximum supported width of 38  
D SELECT * FROM postgres_scan_pushdown('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 't') limit 1;  
Error: Invalid Error: INTERNAL Error: Unsupported decimal storage type  
```  
2、不支持查询pg里面的视图:  
```  
D SELECT * FROM postgres_scan('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', 'public', 'vt') limit 1;  
Run Time (s): real 0.017 user 0.000816 sys 0.000822  
Error: Invalid Error: IO Error: Unable to query Postgres: ERROR:  column "ctid" does not exist  
LINE 2: ..."info", "c1", "c2", "c3" FROM "public"."vt" WHERE ctid BETWE...  
                                                             ^  
HINT:  Perhaps you meant to reference the column "vt.id".  
 ERROR:  column "ctid" does not exist  
LINE 2: ..."info", "c1", "c2", "c3" FROM "public"."vt" WHERE ctid BETWE...  
                                                             ^  
HINT:  Perhaps you meant to reference the column "vt.id".  
```
3、postgres_attach不支持指定dest schema, 目前只能写入main schema.   
PostgreSQL:  
```  
postgres=# create schema s1;  
CREATE SCHEMA  
postgres=# create schema s2;  
CREATE SCHEMA  
postgres=# create table s1.t1 (id int, info text);  
CREATE TABLE  
postgres=# create table s2.t1 (id int, info text, c1 int8);  
CREATE TABLE  
postgres=# create table s2.t2 (id int, info text, c1 int8);  
CREATE TABLE  
postgres=# insert into s1.t1 select generate_series(1,10), random()::text;  
INSERT 0 10  
postgres=# insert into s2.t1 select generate_series(1,10), random()::text, random()*10000;  
INSERT 0 10  
postgres=# insert into s2.t2 select generate_series(1,10), random()::text, random()*10000;  
INSERT 0 10  
```  
DuckDB:  
首先, 在duckdb中默认设置schema搜索路径是有效的：  
```  
D pragma schema=s1;  
D create table t1 (id int);  -- 创建到s1;  
D select * from t1;  -- 此时查询的是s1.t1;  
```  
但是postgres_scanner的postgres_attach暂时不支持destination schema, 而且看起来写死了main schema.   
- 现在支持了, 使用sink_schema设置.  https://duckdb.org/docs/extensions/postgres_scanner  
```  
INSTALL postgres_scanner;  
LOAD postgres_scanner;  
CREATE SCHEMA s1;  
CREATE SCHEMA s2;  
pragma schema='s1'; -- 虽然设置了s1, 但是postgres_attach在main中建立了view.   
D CALL postgres_attach('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', source_schema='s1', overwrite=false, filter_pushdown='false');  
D pragma show_tables;  
┌──────┐  
│ name │  
├──────┤  
│ t1   │  
└──────┘  
D select * from pg_namespace;  
┌──────┬────────────────────┬──────────┬────────┐  
│ oid  │      nspname       │ nspowner │ nspacl │  
├──────┼────────────────────┼──────────┼────────┤  
│ 1326 │ information_schema │ 0        │        │  
│ 1317 │ s2                 │ 0        │        │  
│ 1315 │ s1                 │ 0        │        │  
│ 1314 │ pg_catalog         │ 0        │        │  
│ 1    │ main               │ 0        │        │  
│ 1254 │ temp               │ 0        │        │  
└──────┴────────────────────┴──────────┴────────┘  
D select relname,relnamespace from pg_class where relname='t1';  
┌─────────┬──────────────┐  
│ relname │ relnamespace │  
├─────────┼──────────────┤  
│ t1      │ 1            │  
└─────────┴──────────────┘  
-- 所以通过设置默认schema搜索路径, 不能实现postgres_attach postgresql schema mapping到duckdb的指定schema.   
D pragma schema='s2';  
D CALL postgres_attach('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', source_schema='s2', overwrite=false, filter_pushdown='false');  
Error: Invalid Error: Catalog Error: Failed to create view 't1': View with name "t1" already exists!  
D pragma schema=s2;  
D CALL postgres_attach('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', source_schema='s2', overwrite=false, filter_pushdown='false');  
Error: Invalid Error: Catalog Error: Failed to create view 't1': View with name "t1" already exists!  
D pragma search_path='s2';  
D CALL postgres_attach('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', source_schema='s2', overwrite=false, filter_pushdown='false');  
Error: Invalid Error: Catalog Error: Failed to create view 't1': View with name "t1" already exists!  
D pragma search_path=s2;  
D CALL postgres_attach('hostaddr=127.0.0.1 port=1921 dbname=postgres user=postgres', source_schema='s2', overwrite=false, filter_pushdown='false');  
Error: Invalid Error: Catalog Error: Failed to create view 't1': View with name "t1" already exists!  
```  
目前duckdb也还不支持rename schema, set schema的动作.  
```  
D select * from s1.t1;  
Error: Catalog Error: Table with name t1 does not exist!  
Did you mean "main.t1"?  
LINE 1: select * from s1.t1;  
                      ^  
D select * from main.t1;  
┌────┬──────────────────────┐  
│ id │         info         │  
├────┼──────────────────────┤  
│ 1  │ 0.10076525082446608  │  
│ 2  │ 0.7113172247318253   │  
│ 3  │ 0.12007224869704913  │  
│ 4  │ 0.9942223343189802   │  
│ 5  │ 0.9885377883279318   │  
│ 6  │ 0.012484958537196889 │  
│ 7  │ 0.9231484147535483   │  
│ 8  │ 0.1415844106480968   │  
│ 9  │ 0.6368323174902315   │  
│ 10 │ 0.7566259378410471   │  
└────┴──────────────────────┘  
D alter table main.t1 set schema s1;  
Error: Not implemented Error: T_AlterObjectSchemaStmt  
D alter schema main rename to db;  
Error: Not implemented Error: Schema element not supported yet!  
```  
## 参考  
[《PostgreSQL COPY SQL命令支持binary格式》](../202007/20200727_01.md)    
[《PostgreSQL 14 内置逻辑订阅支持binary传输格式》](../202007/20200720_02.md)    
https://www.postgresql.org/docs/15/libpq-connect.html#LIBPQ-CONNSTRING  
[《用duckdb_fdw加速PostgreSQL分析计算, 提速40倍, 真香.》](../202209/20220924_01.md)    
[《PostgreSQL 变态并行拉取单表的方法 - 按块并行(按行号(ctid)并行) + dblink 异步调用》](../201804/20180410_03.md)    
[《PostgreSQL 14 preview - tid range scan方法, 一种page级别应用可自控的并行扫描、处理方法, 结合RR snapshot export功能》](../202102/20210228_01.md)    
[《PostgreSQL 9.5 new feature - pg_dump use --snapshot taken by another session (exp. slot, pg_export_snapshot())》](../201506/20150616_02.md)    
[《PostgreSQL 事务快照功能 - Parallel Export consistent data or Parallel Query use snapshot transaction feature》](../201303/20130306_02.md)    
https://duckdb.org/2022/09/30/postgres-scanner  
https://github.com/duckdblabs/postgres_scanner#usage   
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")