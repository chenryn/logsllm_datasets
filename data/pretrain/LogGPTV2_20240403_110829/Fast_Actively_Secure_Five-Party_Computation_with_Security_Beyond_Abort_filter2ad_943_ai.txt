the garbler and Pγ is the evaluator for worst case 3PC run.
Circuit
AES-128
SHA-256
CT( ms)
LAN( ms)
WAN( s)
CC( MB)
BC( KB)
Pд(Pд′)
21.93
(+1.12)
249.91
(+11.63)
P5(Pγ )
13.34
(+0.91)
90.83
(+9.76)
Pд(Pд′)
28.95
(+2.39)
295.3
(+14.5)
P5(Pγ )
24.19
(+2.1)
241.83
(+11.9)
Pд(Pд′)
3.70
(+1.02)
4.5
(+1.42)
P5(Pγ )
1.76
(+1.1)
5.6
(+1.51)
Pд(Pд′)
7.41
(+0.15)
97.27
(+3.074)
P5(Pγ )
0.032
(+0.002)
0.064
(+0.004)
Pд(Pд′)
10.416
(+4.03)
10.416
(+4.03)
P5(Pγ )
10.064
(+4.06)
10.064
(+4.06)
We compare our results in the high-latency network with the
relevant ones. The state of the art 3PC [24, 55] and 4PC [24] with
honest majority achieving various notions of security, incur signifi-
cantly less overhead compared to our setting since they tolerate one
corruption which aids in usage of inexpensive Yao’s garbled circuits
[12] and fewer rounds. Thus, the closest result to our setting is [25]
and below we make a detailed comparison with it. For fair analysis,
we instantiate the protocol of [25] in our environment and use
the semi-honest 4DG scheme (Section 3) in place of [13] that they
rely on. However, we also instantiate [25] with the 4DG scheme
of [13] to emphasize the saving in computation time that occurs
with the use of Garble in place of [13]. We highlight the following
parameters for analysis: computation time (CT)– the time spent
computing across all cores, runtime (CT + network time) in terms
of LAN, WAN and communication (CC). The network time empha-
sizes the influence of rounds and data size taking into account the
proximity of servers. The tables highlight average values distinctly
for the role of a garbler (Pд, д ∈ [4]) and the evaluator (P5). The
results for [25], ua, fair appear in Table 2. Table 3 depicts the results
for god. While achieving stronger security than in [25], ua and
fair incur an overhead of at most 0.2 MB overall for both circuits
over [25]. The overhead in both protocols is a result of the proof
of origin of output super-key Y and exchange of Y among garblers.
Additionally, in fair, the commit-then-open trick on output mask
bits constitutes extra communication. For the necessary robust
broadcast channel in god, we use Dolev Strong [41] to implement
authenticated broadcast and fast elliptic-curve based schemes [18]
to realize public-key signatures therein. These signatures have a
one-time setup to establish public-key, private-key for each party.
We do the same for robust 3PC of [24] for empirical purposes.
When instantiated with DS broadcast, the round complexity for
honest run of GOD is 12 (in the presence of 4 broadcasts) and the
shown WAN overhead in Table 3 over [25] captures this inflation in
rounds. For the sake of implementation of all protocols (including
[25] for fair comparison), we have adopted parallelization wherever
possible. Next, if we observe god, Table 3 indicates that the pairwise
communication (CC) of god protocol is almost on par with that
of [25] in Table 2 (and less than fair). This is because, the honest
run of our god is almost same as [25] except for the input commit
routine and the use of broadcast. The input commit routine can
be parallelized with the process of garbling to minimize number
of interactions. This implies that the majority overhead is mainly
due to the use of broadcast. The implementation of DS broadcast
protocol is done by first setting up public-key, private key pair for
each party involved. Each message sent by the broadcast sender
is then agreed upon by the parties by running 3 (t+1) rounds. If
multiple independent broadcasts exist in one round, they are run
parallelly. Also, any private communication that can be sent along
with the broadcast data is also parallelized for improved round
complexity. The broadcast communication is kept minimal and
independent of the circuit, input and output size. As a result, the
total data to be broadcasted constitutes only 1.73 KB of the total
communication. In the honest run, when the adversary does not
strike, the overall overhead amounts to a value of at most 1.2 s
in WAN over [25]. The worst case run in god occurs when the
adversary behaves honestly throughout but only strikes in the final
broadcast of Y and a 3PC instance is run from that point. In this
case, the overall WAN overhead is at most 2.5 s over [25]. This
overhead is justified considering the strength of security that the
protocol offers when compared to [25]. Also, the overheads in LAN
and communication are quite reasonable.
In fair, the overhead of 0.2 MB higher than the honest run of god
is a result of commitments on output wire masks and circulation of
Y and proof proof in the output phase. Also, fair protocol involves
3 sequential rounds for output phase compared to single communi-
cation of Y by P5 in [25] and in god. Note that in the LAN setting,
RTT is of the order of µs for one packet send. Our observations
show that, in the LAN setting, RTT sensitively scales with data size
whereas in WAN, RTT hardly varies for small increase in communi-
cation. For instance, we have noted that, in LAN, the average RTT
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1587for 1 KB, 8 KB, 20 KB, 80 KB is 280µs, 391µs, 832µs, 1400µs respec-
tively, whereas in WAN, RTT for these data sizes does not vary.
This implies that two transfers of 1 KB data consumes less time
than a single transfer of 20 KB data in LAN. All the above reasons
collectively justify the slight variation in the LAN time. Having
said that, we believe that WAN being a better comparison measure
in terms of both communication data and round complexity, aptly
depicts the overhead of all our protocols over [25].
Table 1 provides a unified view of the overall maximum latency
in terms of each parameter and total communication of all proto-
cols implemented with Garble. The bracketed values indicate the
additional overhead involved in the worst case run of god. Note
that the overhead for SHA-256 is higher compared to AES-128. This
difference maps to the circuit dependent communication involving
the inputs and output. Since SHA is a huge circuit compared to AES,
the increase is justified. However, the percentage overheads get
better for SHA compared to AES. Besides, the factor of additional
communication overhead incurred by our protocols for SHA when
compared to AES is far less than the factor of increase in the total
communication for SHA over AES in [25] thus implying that the
performance of our protocols improves with larger circuits. Further,
based on our observation and in [25], using AOT instead of OT
extension eliminates the expensive public key operations needed
even for the seed OTs between every pair of garblers. Further, AOT
needs just 1 round whereas OT extension needs more. All these
factors lead to the improvement of our Garble over [64] which
relies on large number of Tiny OTs [57] to perform authentication.
REFERENCES
[1] Prabhanjan Ananth, Arka Rai Choudhuri, Aarushi Goel, and Abhishek Jain.
2018. Round-Optimal Secure Multiparty Computation with Honest Majority. In
CRYPTO. 395–424.
[2] Prabhanjan Ananth, Arka Rai Choudhuri, Aarushi Goel, and Abhishek Jain. 2019.
Two Round Information-Theoretic MPC with Malicious Security. In EUROCRYPT.
[3] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz
Mazurek. 2014. Secure Multiparty Computations on Bitcoin. In IEEE Symposium
on Security and Privacy. 443–458.
[4] Benny Applebaum, Zvika Brakerski, and Rotem Tsabary. 2019. Degree 2 is
Complete for the Round-Complexity of Malicious MPC. 504–531.
[5] Toshinori Araki, Assi Barak, Jun Furukawa, Tamar Lichter, Yehuda Lindell, Ariel
Nof, Kazuma Ohara, Adi Watzman, and Or Weinstein. 2017. Optimized Honest-
Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second
Barrier. In IEEE Symposium on Security and Privacy. 843–862.
[6] Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, and Kazuma Ohara.
2016. High-Throughput Semi-Honest Secure Three-Party Computation with an
Honest Majority. In SIGSAC. 805–817.
[7] Gilad Asharov, Abhishek Jain, Adriana López-Alt, Eran Tromer, Vinod Vaikun-
tanathan, and Daniel Wichs. 2012. Multiparty Computation with Low Com-
munication, Computation and Interaction via Threshold FHE. In EUROCRYPT.
483–501.
[8] Saikrishna Badrinarayanan, Aayush Jain, Nathan Manohar, and Amit Sahai. 2018.
Secure MPC: Laziness Leads to GOD. IACR Cryptology ePrint Archive 2018 (2018),
580.
[9] Assi Barak, Martin Hirt, Lior Koskas, and Yehuda Lindell. 2018. An End-to-End
System for Large Scale P2P MPC-as-a-Service and Low-Bandwidth MPC for
Weak Participants (CCS ’18). 695–712.
of Secure Protocols (Extended Abstract). In STOC. 503–513.
Linear Communication Complexity. In TCC. 213–230.
garbled circuits. In CCS. 784–796.
Secure Multiparty Computation for the Internet. In CCS. 578–590.
[14] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. 1988. Completeness The-
orems for Non-Cryptographic Fault-Tolerant Distributed Computation (Extended
Abstract). In STOC. 1–10.
[10] Donald Beaver, Silvio Micali, and Phillip Rogaway. 1990. The Round Complexity
[13] Aner Ben-Efraim, Yehuda Lindell, and Eran Omri. 2016. Optimizing Semi-Honest
[11] Zuzana Beerliová-Trubíniová and Martin Hirt. 2008. Perfectly-Secure MPC with
[12] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. 2012. Foundations of
[15] Eli Ben-Sasson, Serge Fehr, and Rafail Ostrovsky. 2012.
Near-Linear
Unconditionally-Secure Multiparty Computation with a Dishonest Minority.
In CRYPTO. 663–680.
[16] Rikke Bendlin, Ivan Damgård, Claudio Orlandi, and Sarah Zakarias. 2011. Semi-
homomorphic Encryption and Multiparty Computation. In EUROCRYPT. 169–
188.
[17] Iddo Bentov and Ranjit Kumaresan. 2014. How to Use Bitcoin to Design Fair
Protocols. In CRYPTO. 421–439.
[18] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang.
2012. High-speed high-security signatures. Journal of Cryptographic Engineering
(2012), 77–89.
[19] John Black. 2006. The Ideal-Cipher Model, Revisited: An Uninstantiable
Blockcipher-Based Hash Function. In Fast Software Encryption, Matthew Robshaw
(Ed.). 328–340.
[20] Dan Bogdanov, Sven Laur, and Jan Willemson. 2008. Sharemind: A Framework
[21] Dan Bogdanov, Riivo Talviste, and Jan Willemson. 2012. Deploying Secure Multi-
for Fast Privacy-Preserving Computations. In ESORICS. 192–206.
Party Computation for Financial Data Analysis - (Short Paper). In FC. 57–64.
[22] Peter Bogetoft, Dan Lund Christensen, Ivan Damgård, Martin Geisler, Thomas P.
Jakobsen, Mikkel Krøigaard, Janus Dam Nielsen, Jesper Buus Nielsen, Kurt
Nielsen, Jakob Pagter, Michael I. Schwartzbach, and Tomas Toft. 2009. Secure
Multiparty Computation Goes Live. In FC. 325–343.
[23] Megha Byali, Carmit Hazay, Arpita Patra, and Swati Singla. 2019. Fast Actively
Secure Five-Party Computation with Security Beyond Abort. Cryptology ePrint
Archive, Report 2019/863. https://eprint.iacr.org/2019/863.
Secure Multiparty Computation. In CRYPTO.
[24] Megha Byali, Arun Joseph, Arpita Patra, and Divya Ravi. 2018. Fast Secure
[31] Richard Cleve. 1986. Limits on the Security of Coin Flips when Half the Processors
Computation for Small Population over the Internet (CCS ’18). 677–694.
[25] Nishanth Chandran, Juan A. Garay, Payman Mohassel, and Satyanarayana
Vusirikala. 2017. Efficient, Constant-Round and Actively Secure MPC: Beyond
the Three-Party Case. In CCS. 277–294.
[26] H. Chaudhari, A. Choudhury, A. Patra, and A. Suresh. 2019. ASTRA: High-
throughput 3PC over Rings with Application to Secure Prediction. https://eprint.
iacr.org/2019/450. In IACR Cryptology ePrint Archive.
[27] David Chaum, Ivan Damgård, and Jeroen Graaf. 1987. Multiparty Computations
Ensuring Privacy of Each Party’s Input and Correctness of the Result. In CRYPTO.
87–119.
[28] Koji Chida, Daniel Genkin, Koki Hamada, Dai Ikarashi, Ryo Kikuchi, Yehuda
Lindell, and Ariel Nof. 2018. Fast Large-Scale Honest-Majority MPC for Malicious
Adversaries. In CRYPTO. 34–64.
[29] Seung Geol Choi, Jonathan Katz, Alex J. Malozemoff, and Vassilis Zikas. 2014.
Efficient Three-Party Computation from Cut-and-Choose. In CRYPTO. 513–530.
[30] Arka Rai Choudhuri, Matthew Green, Abhishek Jain, Gabriel Kaptchuk, and Ian
Miers. 2017. Fairness in an Unfair World: Fair Multiparty Computation from
Public Bulletin Boards. In CCS. 719–728.
Are Faulty (Extended Abstract). In STOC. 364–369.
in Secure Multiparty Computation. In ASIACRYPT. 466–485.
Secret-Sharing and Applications to Secure Computation. In TCC. 342–362.
and Non-Malleable Commitment. In STOC. 141–150.
Using a Black-Box Pseudorandom Generator. In CRYPTO. 378–394.
In CRYPTO. 501–520.
Majority: From Passive to Active Security at Low Cost. In CRYPTO. 558–576.
[38] Ivan Damgård, Claudio Orlandi, and Mark Simkin. 2018. Yet Another Compiler
for Active Security or: Efficient MPC Over Arbitrary Rings. In CRYPTO. 799–829.
[39] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. 2012. Multiparty Computation
from Somewhat Homomorphic Encryption. In CRYPTO, R. Safavi-Naini and
R. Canetti (Eds.). 643–662.
[40] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Mul-
tiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO.
643–662.
[41] Danny Dolev and H. Raymond Strong. 1983. Authenticated Algorithms for
[36] Ivan Damgård and Yuval Ishai. 2006. Scalable Secure Multiparty Computation.
[32] Ran Cohen and Yehuda Lindell. 2014. Fairness versus Guaranteed Output Delivery
[35] Ivan Damgård and Yuval Ishai. 2005. Constant-Round Multiparty Computation
[37] Ivan Damgård and Claudio Orlandi. 2010. Multiparty Computation for Dishonest
[34] Giovanni Di Crescenzo, Yuval Ishai, and Rafail Ostrovsky. 1998. Non-Interactive
[33] R. Cramer, I. Damgård, and Y. Ishai. 2005. Share Conversion, Pseudorandom
Byzantine Agreement. SIAM J. Comput. (1983).
[42] H. Eerikson, C. Orlandi, P. Pullonen, J. Puura, and M. Simkin. 2019. Use your
Brain! Arithmetic 3PC For Any Modulus with Active Security. IACR Cryptology