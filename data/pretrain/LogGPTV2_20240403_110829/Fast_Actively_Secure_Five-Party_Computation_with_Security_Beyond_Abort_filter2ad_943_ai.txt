### Optimized Text

#### Circuit Performance
The following table compares the performance of our 3PC (three-party computation) protocol with existing state-of-the-art protocols, focusing on the roles of the garbler (Pγ) and the evaluator (Pδ) in the worst-case scenario.

| Circuit | Role | CT (ms) | LAN (ms) | WAN (s) | CC (MB) | BC (KB) |
|---------|------|---------|----------|---------|---------|---------|
| AES-128 | Pδ   | 21.93 (+1.12) | 249.91 (+11.63) | - | - | - |
| AES-128 | Pγ   | 13.34 (+0.91) | 90.83 (+9.76) | - | - | - |
| SHA-256 | Pδ   | 28.95 (+2.39) | 295.3 (+14.5) | - | - | - |
| SHA-256 | Pγ   | 24.19 (+2.1) | 241.83 (+11.9) | - | - | - |
| AES-128 | Pδ   | 3.70 (+1.02) | 4.5 (+1.42) | - | - | - |
| AES-128 | Pγ   | 1.76 (+1.1) | 5.6 (+1.51) | - | - | - |
| SHA-256 | Pδ   | 7.41 (+0.15) | 97.27 (+3.074) | - | - | - |
| SHA-256 | Pγ   | 0.032 (+0.002) | 0.064 (+0.004) | - | - | - |
| AES-128 | Pδ   | 10.416 (+4.03) | 10.416 (+4.03) | - | - | - |
| AES-128 | Pγ   | 10.064 (+4.06) | 10.064 (+4.06) | - | - | - |

### Comparison with State-of-the-Art Protocols
We compare our results in a high-latency network with relevant state-of-the-art 3PC [24, 55] and 4PC [24] protocols that achieve various security notions with an honest majority. These protocols incur significantly less overhead compared to ours because they tolerate one corruption, which allows for the use of inexpensive Yao's garbled circuits [12] and fewer rounds. The closest result to our setting is [25], and we provide a detailed comparison below.

For a fair analysis, we instantiate the protocol of [25] in our environment and use the semi-honest 4DG scheme (Section 3) in place of [13]. We also instantiate [25] with the 4DG scheme of [13] to highlight the savings in computation time when using Garble instead of [13].

**Parameters for Analysis:**
- **Computation Time (CT):** The time spent computing across all cores.
- **Runtime (CT + Network Time):** Measured in terms of LAN, WAN, and communication (CC).
- **Network Time:** Emphasizes the influence of rounds and data size, considering the proximity of servers.

The tables show average values distinctly for the role of the garbler (Pδ, δ ∈ [4]) and the evaluator (Pγ). The results for [25], ua, and fair appear in Table 2. Table 3 depicts the results for god.

While achieving stronger security than [25], the protocols ua and fair incur an overhead of at most 0.2 MB overall for both circuits over [25]. This overhead is due to the proof of origin of output super-key Y and the exchange of Y among garblers. Additionally, in fair, the commit-then-open trick on output mask bits constitutes extra communication.

For the necessary robust broadcast channel in god, we use Dolev-Strong [41] to implement authenticated broadcast and fast elliptic-curve-based schemes [18] for public-key signatures. These signatures have a one-time setup to establish public-key and private-key pairs for each party. We do the same for the robust 3PC of [24] for empirical purposes.

When instantiated with DS broadcast, the round complexity for the honest run of GOD is 12 (in the presence of 4 broadcasts), and the shown WAN overhead in Table 3 over [25] captures this inflation in rounds. For the sake of implementation, we have adopted parallelization wherever possible.

In god, Table 3 indicates that the pairwise communication (CC) of the god protocol is almost on par with that of [25] in Table 2 (and less than fair). This is because the honest run of our god is almost the same as [25], except for the input commit routine and the use of broadcast. The input commit routine can be parallelized with the process of garbling to minimize the number of interactions. This implies that the majority of the overhead is mainly due to the use of broadcast.

The implementation of the DS broadcast protocol involves setting up a public-key, private key pair for each party involved. Each message sent by the broadcast sender is then agreed upon by the parties by running 3 (t+1) rounds. If multiple independent broadcasts exist in one round, they are run in parallel. Any private communication that can be sent along with the broadcast data is also parallelized for improved round complexity. The broadcast communication is kept minimal and independent of the circuit, input, and output size. As a result, the total data to be broadcasted constitutes only 1.73 KB of the total communication. In the honest run, when the adversary does not strike, the overall overhead amounts to a value of at most 1.2 s in WAN over [25]. The worst-case run in god occurs when the adversary behaves honestly throughout but only strikes in the final broadcast of Y, and a 3PC instance is run from that point. In this case, the overall WAN overhead is at most 2.5 s over [25]. This overhead is justified considering the strength of security that the protocol offers compared to [25]. The overheads in LAN and communication are also quite reasonable.

In fair, the overhead of 0.2 MB higher than the honest run of god is due to commitments on output wire masks and circulation of Y and proof in the output phase. The fair protocol involves 3 sequential rounds for the output phase compared to the single communication of Y by Pγ in [25] and in god. Note that in the LAN setting, RTT (Round-Trip Time) is of the order of µs for one packet send. Our observations show that, in the LAN setting, RTT sensitively scales with data size, whereas in WAN, RTT hardly varies for small increases in communication. For instance, in LAN, the average RTT for 1 KB, 8 KB, 20 KB, and 80 KB is 280 µs, 391 µs, 832 µs, and 1400 µs, respectively, whereas in WAN, RTT for these data sizes does not vary. This implies that two transfers of 1 KB data consume less time than a single transfer of 20 KB data in LAN. All the above reasons collectively justify the slight variation in the LAN time. However, WAN is a better comparison measure in terms of both communication data and round complexity, aptly depicting the overhead of all our protocols over [25].

Table 1 provides a unified view of the overall maximum latency in terms of each parameter and total communication of all protocols implemented with Garble. The bracketed values indicate the additional overhead involved in the worst-case run of god. Note that the overhead for SHA-256 is higher compared to AES-128. This difference maps to the circuit-dependent communication involving the inputs and outputs. Since SHA-256 is a larger circuit compared to AES-128, the increase is justified. However, the percentage overheads get better for SHA-256 compared to AES-128. Besides, the factor of additional communication overhead incurred by our protocols for SHA-256 when compared to AES-128 is far less than the factor of increase in the total communication for SHA-256 over AES-128 in [25], implying that the performance of our protocols improves with larger circuits. Further, based on our observation and in [25], using AOT (Authenticated Oblivious Transfer) instead of OT (Oblivious Transfer) extension eliminates the expensive public-key operations needed even for the seed OTs between every pair of garblers. AOT needs just 1 round, whereas OT extension needs more. All these factors lead to the improvement of our Garble over [64], which relies on a large number of Tiny OTs [57] to perform authentication.

### References
[References section remains unchanged]

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the technical details and comparisons.