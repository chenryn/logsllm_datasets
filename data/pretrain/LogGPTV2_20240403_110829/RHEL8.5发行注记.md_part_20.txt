文件中，`sshd_hostkey_group`{.literal} 设置为
`__sshd_hostkey_group`{.literal}，ssh `_hostkey_mode`{.literal} 设置为
`__sshd_hostkey_mode`{.literal}。现在，用户可以在 playbook 中配置
`sshd_hostkey_group`{.literal} 和 `sshd_hostkey_mode`{.literal} 变量。
([BZ#1966711](https://bugzilla.redhat.com/show_bug.cgi?id=1966711){.link})
[]{#_bug_fixes.html#BZ-1962976}
::: title
**`README.md`{.literal} 中的 RHEL 系统角色内部链接不再有问题**
:::
在以前的版本中，`README.md`{.literal}
文件中可用的内部链接被破坏。因此，如果用户点击特定的小节文档链接，它不会将用户重定向到
specific `README.md`{.literal}
部分。在这个版本中解决了这个问题，内部链接将用户指向正确的部分。
([BZ#1962976](https://bugzilla.redhat.com/show_bug.cgi?id=1962976){.link})
:::
::: section
::: titlepage
# []{#_bug_fixes.html#bug-fix_rhel-in-cloud-environments}云环境中的 RHEL {.title}
:::
[]{#_bug_fixes.html#BZ-1912236}
::: title
**`nm-cloud-setup`{.literal} 工具现在在 Microsoft Azure
上设置正确的默认路由**
:::
在以前的版本中，在 Microsoft Azure 中，`nm-cloud-setup`{.literal}
工具无法检测云环境的正确网关。因此，实用程序设置了一个不正确的默认路由，连接会失败。在这个版本中解决了这个问题。因此，`nm-cloud-setup`{.literal}
程序现在在 Microsoft Azure 上设置正确的默认路由。
（[BZ#1912236](https://bugzilla.redhat.com/show_bug.cgi?id=1912236){.link}）
[]{#_bug_fixes.html#BZ-1957532}
::: title
**现在，通过备份 AMI 创建的 EC2 实例上会正确生成 SSH 密钥**
:::
在以前的版本中，当从备份 Amazon Machine Image(AMI)创建新 RHEL 8 的
Amazon EC2 实例时，`cloud-init`{.literal} 会删除虚拟机上现有的 SSH
密钥，但没有创建新密钥。因此，虚拟机在某些情况下无法连接到主机。
新创建的 RHEL 8.5 虚拟机解决了这个问题。对于从 RHEL 8.4
或更早版本升级的虚拟机，您必须手动解决这个问题。
为此，请编辑 `cloud.cfg`{.literal} 文件并更改
`ssh_genkeytypes: ~`{.literal} 行到
`ssh_genkeytypes: ['rsa', 'ecdsa', 'ed25519']`{.literal}。当在上述的情形中创建
RHEL 8 虚拟机时，可以正确删除并生成 SSH 密钥。
[(BZ#1957532](https://bugzilla.redhat.com/show_bug.cgi?id=1957532){.link})
[]{#_bug_fixes.html#BZ-1836058}
::: title
**在 AWS ARM64 实例上运行的 RHEL 8 现在可达到指定的网络速度**
:::
当在 Amazon Web Services(AWS) ARM64 实例上运行的虚拟机(VM)中使用 RHEL 8
作为客户机操作系统时，当使用iommu.
`strict=1 内核参数或 定义 noiommu.strict`{.literal}.1 内核参数时，VM
之前会``{=html} 低于预期的网络性能。
红帽提供的 RHEL 8.5 Amazon
机器镜像(AMI)不再会出现这种情况。在其他类型的镜像中，您可以通过将
参数更改为 to `iommu.strict=0`{.literal} 来解决这个问题。这包括：
::: itemizedlist
-   RHEL 8.4 及更早的镜像
-   使用 `yum update`{.literal}从早期版本升级的 RHEL 8.5 镜像
-   RHEL 8.5 镜像不是由红帽提供的
:::
(BZ#1836058)
[]{#_bug_fixes.html#BZ-1854037}
::: title
**内核转储 RHEL 8 虚拟机到 Azure 上的远程机器现在可以更可靠**
:::
在以前的版本中，当虚拟机使用启用了加速网络的 NIC 时，使用
`kdump`{.literal} 工具将 RHEL 8
虚拟机(VM)的内核转储文件保存到远程机器上无法正常工作。因此，转储文件会在大约
200
秒后保存，而不是立即保存。另外，在保存转储文件前，控制台中记录了以下错误消息。
``` screen
device (eth0): linklocal6: DAD failed for an EUI-64 address
```
在这个版本中，底层代码已被修复，在上述情况下，转储文件会被立即保存。
(BZ#1854037)
:::
:::
[]{#_technology_previews.html}
::: chapter
::: titlepage
# []{#_technology_previews.html#_technology_previews}第 8 章 技术预览 {.title}
:::
这部分提供了 Red Hat Enterprise Linux 8.5 中所有可用技术预览的列表。
如需有关红帽对技术预览功能支持范围的信息，请参阅
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview/){.link}。
::: section
::: titlepage
# []{#_technology_previews.html#technology-preview_shells-and-command-line-tools}Shell 和命令行工具 {.title}
:::
[]{#_technology_previews.html#BZ-1868421}
::: title
**ReaR 中的 IBM Z 架构作为技术预览提供**
:::
对 IBM Z 架构的基本支持被添加到 Relax and
Recover(ReaR)中，现在作为技术预览提供。目前仅在 z/VM 环境中支持 IBM Z
构架中的 rear。尚未测试备份和恢复逻辑分区(LPAR)的支持。
目前唯一支持的输出方法是初始程序加载(IPL)。IPL 生成内核和初始
ramdisk(initrd)，可以用于 `zIPL`{.literal} 引导加载器。
有关详情请参考 [IBM System Z 架构中的 ReaR
救援镜像](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#assembly_recovering-and-restoring-a-system_configuring-basic-system-settings){.link}。
(BZ#1868421)
:::
::: section
::: titlepage
# []{#_technology_previews.html#technology-preview_networking}网络 {.title}
:::
[]{#_technology_previews.html#BZ-1570255}
::: title
**KTLS 作为技术预览提供**
:::
RHEL 提供内核传输层安全(KTLS)作为技术预览。KTLS
使用内核中的对称加密或者解密算法为 AES-GCM 密码处理 TLS 记录。KTLS
还提供将 TLS 记录加密卸载到支持此功能的网络接口控制器(NIC)的接口。
(BZ#1570255)
[]{#_technology_previews.html#BZ-1633143}
::: title
**`AF_XDP`{.literal} 作为技术预览**
:::
`Address Family eXpress Data Path`{.literal} (`AF_XDP`{.literal})
是设计用于处理高性能数据包。它包含
`XDP`{.literal}，并允许通过编程方式将选定的数据包高效地重定向到用户空间应用，以便进一步处理。
（BZ#1633143）
[]{#_technology_previews.html#BZ-1889737}
::: title
**可作为技术预览的 XDP 功能**
:::
红帽提供了以下 eXpress Data Path(XDP)功能作为不受支持的技术预览：
::: itemizedlist
-   在 AMD 和 Intel 64 位以外的构架中载入 XDP
    程序。请注意，`libxdp`{.literal} 库不适用于 AMD 和 Intel 64
    位的构架。
-   XDP 硬件卸载。在使用这个功能前，请参阅[使用 nfp 驱动程序的 Netronome
    网卡中卸载 XDP
    程序失败](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.4_release_notes/rhel-8-4-0-release#BZ-1880268){.link}。
:::
([BZ#1889737)](https://bugzilla.redhat.com/show_bug.cgi?id=1889737){.link}
[]{#_technology_previews.html#BZ-1814836}
::: title
**TC 的多协议标签交换，作为技术预览提供**
:::
Multi-protocol Label
Switching（MPLS）是一个内核内数据转发机制，用于跨企业网络路由流量。在
MPLS
网络中，接收数据包的路由器根据附加到数据包的标签决定数据包的其他路由。使用标签时，MPLS
网络可以处理带有特定特征的数据包。例如，您可以添加
`tc 过滤器`{.literal}，以一致的方式管理从特定端口接收的数据包或执行特定类型的流量。
数据包进入企业网络后，MPLS 路由器对数据包执行多个操作，如
`push`{.literal} 来添加标签、`swap`{.literal} 来更新标签，以及
`pop`{.literal} 来删除标签。MPLS 允许基于 RHEL
中的一个或多个标签在本地定义操作。您可以配置路由器并设置流量控制(`tc`{.literal})过滤器，根据
MPLS 标签堆栈条目(`lse`{.literal})元素来对数据包执行相应的操作，如
`label`{.literal}、`traffic class`{.literal}、`bottom of stack`{.literal}
以及 `time to live`{.literal}。
例如，以下命令在 [*enp0s1*]{.emphasis}
网络接口中添加过滤器以匹配传入的数据包，第一个标签为
[*12323*]{.emphasis}，第二个标签为
[*45832*]{.emphasis}。在匹配的数据包中，会执行以下操作：
::: itemizedlist
-   第一个 MPLS TTL 被缩减（如果 TTL 到达 0，则会丢弃数据包）
-   第一个 MPLS 标签被改为 [*549386*]{.emphasis}
-   生成的数据包通过 [*enp0s2*]{.emphasis} 传输，目标 MAC 地址为
    [*00:00:5E:00:53:01*]{.emphasis}，源 MAC 地址为
    [*00:00:5E:00:53:02*]{.emphasis}
    ``` screen
    # tc filter add dev enp0s1 ingress protocol mpls_uc flower mpls lse depth 1 label 12323 lse depth 2 label 45832 \
    action mpls dec_ttl pipe \
    action mpls modify label 549386 pipe \
    action pedit ex munge eth dst set 00:00:5E:00:53:01 pipe \
    action pedit ex munge eth src set 00:00:5E:00:53:02 pipe \
    action mirred egress redirect dev enp0s2
    ```
:::
（BZ#1814836,
[BZ#1856415](https://bugzilla.redhat.com/show_bug.cgi?id=1856415){.link}）
[]{#_technology_previews.html#BZ-1839311}
::: title
**`act_mpls`{.literal} 模块作为技术预览提供**
:::
`act_mpls`{.literal} 模块现在作为技术预览在
`kernel-modules-extra`{.literal} rpm
中找到。该模块允许使用流量控制（TC）过滤器进行多协议标签交换（MPLS）操作，例如：通过
TC 过滤器推送和弹出 MPLS 标签堆栈条目。模块还允许独立设置 Label、Traffic
Class、Stack 的 Bottom 和 Time to Live 字段。
(BZ#1839311)
[]{#_technology_previews.html#JIRA-RHELPLAN-57712}
::: title
**改进了多路径 TCP 支持作为技术预览提供**
:::
多路径
TCP（MPTCP）改进了网络中的资源使用量以及网络故障的恢复能力。例如：在
RHEL 服务器中使用多路径 TCP，启用了 MPTCP v1
的智能手机可以连接到服务器上运行的应用程序，并在 Wi-Fi
和手机网络间切换，而不会中断到服务器的连接。
RHEL 8.4 引入了其他功能，例如：
::: itemizedlist
-   多个并发活跃子流
-   支持 active-backup
-   改进了流性能
-   更好的内存利用率，以及 `receive`{.literal} 和`send`{.literal}
    缓冲区自动调整
-   SYN cookie 支持
:::
请注意,在服务器中运行的应用程序必须原生支持 MPTCP
或管理员必须在内核中载入 `eBPF`{.literal} 程序,以便动态地将
`IPPROTO_TCP`{.literal} 改为 `IPPROTO_MPTCP`{.literal}。
详情请查看 [多路径 TCP
入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-multipath-tcp_configuring-and-managing-networking){.link}。
（JIRA:RHELPLAN-57712）
[]{#_technology_previews.html#BZ-1906489}
::: title
**`systemd-resolved`{.literal} 服务现在作为技术预览提供**
:::
`systemd 解析的服务`{.literal}
为本地应用提供名称解析。该服务实现了缓存和验证 DNS stub
解析器、链接本地多播名称解析（LLMNR）以及多播 DNS 解析器和响应程序。
请注意，即使 `systemd 软件包提供 systemd`{.literal}
`-resolved`{.literal}，这个服务还是一个不受支持的技术预览。
（[BZ#1906489](https://bugzilla.redhat.com/show_bug.cgi?id=1906489){.link}）