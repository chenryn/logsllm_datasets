### Table 3: Threats and Corresponding Security Mechanisms

#### Server-Side Input Filtering
Even though input filtering or whitelisting can fail if implemented incorrectly [3, 2, 1], it is crucial to sanitize user data before rendering web pages. Input filtering can prevent scripting exploits and SQL injections. When applied to data from other embedded services, it can also mitigate many Cross-Site Scripting (XSS) attacks.

#### Content Security Policy (CSP)
Pages rendered by typical embedded web applications have minimal need to contact external websites. Therefore, our server is configured to offer restrictive CSP [14] directives to browsers, limiting the impact of any injected code in the page.

#### Server-Side Content Security Policy (S-CSP)
For browsers that do not support CSP, we introduce Server-side CSP. During rendering, the server examines the CSP directives in the header (or policy-uri) and modifies the HTML code accordingly. The changes are based on custom policies defined by the administrator, such as valid hosts for different HTML elements, inline script usage, and `eval` functionality. The novelty lies in the fact that the resulting HTML page received by the browser automatically complies with CSP. Additionally, S-CSP supports reporting of CSP violations via the `report-uri` directive, which is typically not possible for incompatible browsers.

#### X-Frame-Options
Clickjacking is a serious emerging threat best handled by preventing website framing. Since embedded web applications are usually not designed for mash-up scenarios, setting the `X-Frame-Options` to `DENY` is a good default configuration.

#### JavaScript Frame-Busting
Not all browsers support the `X-Frame-Options` header. Therefore, our framework automatically includes frame-busting code in JavaScript. The specific code used is as simple as possible and has been vetted for common vulnerabilities [44].

#### Random Anti-CSRF Token
Cross-Site Request Forgery (CSRF) is another web application attack that is easy to prevent but often overlooked in embedded settings. Our framework automatically injects random challenge tokens into links and forms pointing back to the web application and checks these tokens upon page access [39].

#### Origin Header Verification
Along with checking CSRF tokens, we ensure that requests supplying parameters (either POST or GET) and including the `Origin` or `Referer` header have expected values. This basic measure helps prevent cross-site attacks. When the `Referer` header is available, we also check for cross-application attacks, ensuring each application is only accessed through its entry pages.

#### SSL
Securing network communications is often a low-priority item for developers. By default, our web server uses HTTPS exclusively, with a persistent self-signed certificate created during device initialization.

#### HTTP Strict Transport Security (HSTS) and Secure Cookies
In addition to supporting SSL, our server implements the HSTS standard [22] and requests that all incoming connections be over SSL, preventing several passive and active network attacks [23]. Browser cookies are created with the `Secure` attribute, preventing plaintext leakage to the network.

#### Parameterized Rendering and Queries
Android already supports parameterized SQLite queries [52], and we encourage developers to use this feature. We have also added the ability to parameterize dynamic HTML rendering, where output escaping is performed automatically.

#### URL Scanning
Incoming HTTP requests are sanitized using a filter similar to Microsoft IIS's URLScan tool [34]. Our filter restricts both the URL and query parts of a request, with allowances for necessary changes by the web application developer. URLScan is particularly useful in preventing web application vulnerabilities due to incorrect or incomplete parsing of request data.

#### Application-Wide Authentication, Password Policy, and Anti-Bruteforcing
Recognizing that user authentication is often a weak spot, we have implemented user authentication as part of the web server, freeing developers from the need to implement secure user session tracking. The password strength policy can be adjusted, and a mechanism to prevent (or severely slow down) brute-force attacks is always enabled.

#### Network Restrictions
Most embedded web servers have constrained network access profiles. The device may serve requests only when connected to a specific network or WiFi SSID, or the requesting hosts might match a profile, such as a specific IP or MAC address. While this feature is easily accessible, it cannot be configured by default due to differences in individual application environments.

#### Location Restrictions
Similar to network restrictions, the server can be configured to operate only when the device is at specific physical locations, minimizing opportunities for an attacker to access and potentially compromise the system.

#### DDoS Mitigation
While distributed denial-of-service (DDoS) protection is challenging, much can be done to mitigate such threats. For most applications, maintaining local service is a top priority, so we throttle HTTP requests to ensure those from the local network have a guaranteed level of service. Lower-level network DDoS attacks must be addressed separately, outside the web server.

## User Interface
This section briefly describes the user interface required for basic administration of the web server and security policy management. We refer to the owner of the smart phone or embedded device as the Admin user.

### Configuration Management
**Figure 4: Main Web Server Configuration Interface**
This interface controls the server settings across all applications. It provides the ability to disable each web application and displays overall statistics such as the number of active applications and active connection sessions.

**Web Server Logs**
Accessible from the menu options, logged events such as failures, new connections, and configuration changes can be visualized.

**Settings**
From this interface, the Admin can override some security features to enforce certain mechanisms for all applications, regardless of their individual configurations.

**Figure 6: Web Server Configuration Sample**

### Configuration per Web Application
**Figure 5: Web Application Configuration Interface**
This interface allows the Admin to control parameters such as port number, application name, and password, and to tune the security policy for each application. It displays the name, path, security level, and status information along with the currently enabled security mechanisms.

**Alarm System Configuration**
Each new client connection request can be monitored by setting the alarm notification level to one of three possibilities: Disabled, Passive, or Approval. Both Passive and Approval notifications alert the administrator about new connections. Approval mode requires the Admin to grant access before proceeding.

**Network and Location Restrictions**
The web server can restrict clients based on network properties (e.g., serving WiFi or 3G only) or current location (e.g., home or office).

**Domain Whitelist**
The Admin can define a list of domains allowed in the CSP policy by writing a comma-separated list of domains/IP addresses. If the field is empty, the web server enforces a restrictive 'allow self' policy and blocks all other sources.

**IP Whitelist**
The Admin can explicitly allow access for a specific set of trusted hosts by adding a comma-separated list of IP addresses. For a new connection request, if the source IP is in this list, access is permitted regardless of other restrictions.

### Configuration Without the UI
For embedded devices without a display, the web server can be configured through an XML file present in the application package as a raw resource. With this file, the web server administrator can enforce security mechanisms for specific web applications or disable all web applications that do not meet certain requirements. Configuration can also be done after installation by modifying the SQLite database on the device.

## Implementation
Our system consists of two main components: the Dispatcher (a web server that processes and routes requests to applications) and our framework API that Android applications can access.

**Dispatcher**
The Dispatcher works as an Android background service. We used the Tornado open-source web server, which we hardened and modified to work with our framework. The web server follows the least privilege principle and runs with the minimal permissions set needed to handle HTTP communications: `android.permission.INTERNET`.

**Permission Model**
To expose a web interface, an application requests a new permission: `com.android.webserver.WEB_APPLICATION`. This permission is more restrictive than `android.permission.INTERNET` and only allows the application to serve web requests via the dispatcher.

**Framework API**
The framework API is a Java library that handles communications between the web server and the web application (which run as separate processes). It provides classes to help generate web content. Similar to modern web frameworks (e.g., Rails), every web page must register its web path through the `mountWebContent` function. This function binds a path to a Java class entry point. For example, our WebSMS web application registers four web pages: three HTML pages and one CSS stylesheet (Figure 7).

**Security Features**
When an HTTP request is received, it goes through all pre-processing security mechanisms and is dispatched to the corresponding web application. The framework API embeds an Android ContentProvider used by the web server to query pages. HTTP headers, body, and security tokens are added to the query and transmitted to the web application. Using the framework API, the web page is built and sent back as a response. This response is then checked by all post-process security mechanisms before being sent to the web client.

## Case Studies
We present two case studies to demonstrate how our framework effectively mitigates web vulnerabilities. We describe the applications we built, their attack surface, how the framework protects them, and show that when using off-the-shelf security scanners, the framework indeed mitigates the vulnerabilities found in the apps.

### Applications
**WebSMS**
When loaded in a client browser, the user can view the current SMS inbox or send a new SMS. For the latter, the application displays a list of contacts fetched from the phone’s directory along with a search box. Clicking on a contact allows sending an SMS directly from the browser. The SMS content is sent via a POST request containing the contact ID.

**WebMedia**
This application displays a gallery of photos and videos stored on the Android device (Figure 8). Clicking a thumbnail shows a full-size view of the media file. The application provides a convenient way to display photos and videos to friends and family on a big screen and enables seamless sharing of content with trusted users.

### Performance Evaluation
While performance should not be the focus of a mobile web framework, we ran a basic performance evaluation using the Apache benchmark tool to assess the impact of enabling security features on WebDroid performance. To reflect real-world usage, we ran these benchmarks over WiFi with WebDroid on a standard HTC Desire phone with Android 2.3.

**Figure 9: Average Number of Requests per Second with and without Security Features Enabled**
The figure shows that WebDroid takes a 10% to 30% performance hit when security features are enabled, depending on the number of simultaneous connections. On average, WebDroid performance takes a 20% hit when security features are enabled.

While this performance hit might not be acceptable for all applications, it is a trade-off for enhanced security.