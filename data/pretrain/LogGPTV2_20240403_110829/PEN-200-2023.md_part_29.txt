pane. With this powerful Burp feature, we can inspect every detail of each request performed,
along with the response. We’ll make use of this feature often during upcoming Modules.
Why does “detectportal.firefox.com” keep showing up in the proxy history? A
captive portal346 is a web page that serves as a sort of gateway page when
attempting to browse the Internet. It is often displayed when accepting a user
agreement or authenticating through a browser to a Wi-Fi network. To ignore
this, simply enter about:config in the address bar. Firefox will present a warning,
but we can proceed by clicking I accept the risk!. Finally, search for
“network.captive-portal-service.enabled” and double-click it to change the value
to “false”. This will prevent these messages from appearing in the proxy history.
346 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Captive_portal
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 211
Made in Morocco
Penetration Testing with Kali Linux
Beside the Proxy feature, the Repeater is another fundamental Burp tool. With the Repeater, we
can craft new requests or easily modify the ones in History, resend them, and review the
responses. To observe this in action, we can right-click a request from Proxy > HTTP History and
select Send to Repeater.
y
k
s
o
n
i
z
D
Figure 92: Sending a Request to Repeater
If we click on Repeater, we will observe one sub-tab with the request on the left side of the
window. We can send multiple requests to Repeater and it will display them using separate tabs.
Let’s send the request to the server by clicking Send.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 212
Made in Morocco
Penetration Testing with Kali Linux
y
Figure 93: Burp Suite Repeater
k
Burp Suite will display the raw server response on the right side of the window, which includes the
response headers and un-rendered response content.
s
o
n
i
z
D
Figure 94: Burp Suite Repeater with Request and Response
The last feature we will cover is Intruder, but first, we’ll need to configure our local Kali’s hosts file
to statically assign the IP to the offsecwp website we are going to test.
kali@kali:~$ cat /etc/hosts
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 213
Made in Morocco
Penetration Testing with Kali Linux
...
192.168.50.16 offsecwp
Listing 102 - Setting up our /etc/hosts file for offsecwp
The Intruder347 Burp feature, as its name suggests, is designed to automate a variety of attack
angles, from the simplest to more complex web application attacks. To learn more about this
feature, let’s simulate a password brute forcing attack.
Since we are dealing with a new target, we can start a new Burp session and configure the Proxy
as we did before. Next, we’ll navigate to http://offsecwp/wp-login.php from Firefox. Then, we will
type “admin” and “test” as respective username and password values, and click Log in.
y
k
s
o
n
i
z
D
Figure 95: Simulating a failed WordPress login
Returning to Burp, we’ll navigate to Proxy > HTTP History, right-click on the POST request to /wp-
login.php and select Send to Intruder.
347 (PortSwigger, 2021), https://portswigger.net/burp/documentation/desktop/tools/intruder/using
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 214
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
Figure 96: Sending the POST request to Intruder
We can now select the IntruDder tab in the upper bar, choose the POST request we want to modify,
and move to the Positions sub-tab. Knowing that the user admin is correct, we only need to brute
force the password field. First, we’ll press Clear on the right bar so that all fields are cleared. We
can then select the value of the pwd key and press the Add button on the right.
Figure 97: Assigning the password value to the Intruder payload generator
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 215
Made in Morocco
Penetration Testing with Kali Linux
We have now instructed the Intruder to modify only the password value on each new request.
Before starting our attack, let’s provide Intruder with a wordlist. Knowing that the correct
password is “password”, we can grab the first 10 values from the rockyou wordlist on Kali.
kali@kali:~$ cat /usr/share/wordlists/rockyou.txt | head
123456
12345
123456789
password
iloveyou
princess
1234567
rockyou
12345678
abc123
Listing 103 - Copying the first 10 rockyou wordlist valyues
Moving to the Payloads sub-tab, we can paste the above wordlist into the Payload Options[Simple
k
list] area.
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 216
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
D
Figure 98: Pasting the first 10 rockyou entries
With everything ready to start the Intruder attack, let’s click on the top right Start Attack button.
We can move past the Burp warning about restricted Intruder features, as this won’t impact our
attack. After we let the attack complete, we can observe that apart from the initial probing
request, it performed 10 requests, one for each entry in the provided wordlist.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 217
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 99: Inspecting Intruder’s attack results
s
We’ll notice that the WordPress application replied with a different Status code on the 4th request,
hinting that this might be the correct password value. Our hypothesis is confirmed once we try to
log in to the WordPress administrative console witoh the discovered password.
n
i
z
D
Figure 100: Logging to the WP admin console
Now that we’ve built a solid foundational knowledge about how Burp and other assessment tools
work, let’s take the next step and learn how to enumerate a target web application.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 218
Made in Morocco
Penetration Testing with Kali Linux
8.3 Web Application Enumeration
This Learning Unit covers the following Learning Objectives:
• Learn how to debug Web Application source code
• Understand how to enumerate and inspect Headers, Cookies, and Source Code
• Learn how to conduct API testing methodologies
In a previous Module, we learned how passive information gathering can play a critical role when
mapping web applications, especially when public repositories or Google dorks disclose sensitive
information about our target. Whether working with leaked credentials or mere application
documentation, we should always refer to the information retrieved passively during our active
web application testing, as it might lead to unexplored paths.
y
It is important to identify the components that make up a web application before attempting to
blindly exploit it. Many web application vulnerabilities are technology-agnostic. However, some
k
exploits and payloads need to be crafted based on the technological underpinnings of the
application, such as the database software or operating system. Before launching any attacks on
a web application, we should first attempt to discover sthe technology stack in use. Technology
stacks generally consist of a host operating system, web server software, database software, and
a frontend/backend programming language. o
Once we have enumerated the underlying stack using the methodologies we learned earlier, we’ll
move on to application enumeration. n
We can leverage several techniques to gather this information directly from the browser. Most
modern browsers include developer itools that can assist in the enumeration process.
z
As the name implieDs, although Developer Tools are typically used by developers,
they are useful for our purposes because they offer information about the inner
workings of our target application.
We will be focusing on Firefox since it is the default browser in Kali Linux. However, most
browsers include similar tools.
8.3.1 Debugging Page Content
A good place to start our web application information mapping is with a URL address. File
extensions, which are sometimes part of a URL, can reveal the programming language the
application was written in. Some extensions, like .php, are straightforward, but others are more
cryptic and vary based on the frameworks in use. For example, a Java-based web application
might use .jsp, .do, or .html.
File extensions on web pages are becoming less common, however, since many languages and
frameworks now support the concept of routes,348 which allow developers to map a URI to a
348 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Web_framework#URL_mapping
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 219
Made in Morocco
Penetration Testing with Kali Linux
section of code. Applications leveraging routes use logic to determine what content is returned to
the user, making URI extensions largely irrelevant.
Although URL inspection can provide some clues about the target web application, most context
clues can be found in the source of the web page. The Firefox Debugger tool (found in the Web
Developer menu) displays the page’s resources and content, which varies by application. The
Debugger tool may display JavaScript frameworks, hidden input fields, comments, client-side
controls within HTML, JavaScript, and much more.
Let’s test this out by opening Debugger while browsing the offsecwp app:
y
k
s
o
n
i
z
D
Figure 101: Using Developer Tools to Inspect JavaScript Sources
We’ll notice that the application uses jQuery349 version 3.6.0, a common JavaScript library. In this
case, the developer minified350 the code, making it more compact and conserving resources,
which also makes it somewhat difficult to read. Fortunately, we can “prettify” code within Firefox
by clicking on the Pretty print source button with the double curly braces:
349 (jQuery, 2022), https://jquery.com/
350 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Minification_(programming)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 220
Made in Morocco
Penetration Testing with Kali Linux
Figure 102: Pretty Print Source y
After clicking the icon, Firefox will display the code in a format that is easier to read and follow:
k
s
o
n
i
z
D
Figure 103: Viewing Prettified Source in Firefox
We can also use the Inspector tool to drill down into specific page content. Let’s use Inspector to
examine the search input element from the WordPress home page by scrolling, right-clicking the
search field on the page, and selecting Inspect.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 221
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
Figure 104: Selecting E-mail Input Element
z
This will open the Inspector tool and highlight the HTML for the element we right-clicked on.
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 222
Made in Morocco
Penetration Testing with Kali Linux
Figure 105: Using the Inspector Tool
This tool can be especially useful for quickly finding hidden form fields in the HTML source.
Now that we have some familiarity with how to use the built-in browser debugger, we’ll learn how
to use the Network Tool and Burp Proxy to inspect HTTP response headers.
8.3.2 Inspecting HTTP Response Headers and Sitemaps
We can also search server responses for additional information. There are two types of tools we
can use to accomplish this task. The first type is a proxy, like Burp Suite, which intercepts
requests and responses between a client and a web server, and the other is the browser’s own
Network tool.
We will explore both approaches in this Module, but let’s begin by demonstrating the Network
y
tool. We can launch it from the Firefox Web Developer menu to review HTTP requests and
responses. This tool shows network activity that occurs after it launches, so we must refresh the
page to display traffic. k
s
o
n
i
z
D
Figure 106: Using the Network Tool to View Requests
We can click on a request to get more details about it. In this case, we want to inspect response
headers. Response headers are a subset of HTTP headers351 that are sent in response to an
HTTP request.
351 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 223
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
Figure 107: Viewing Response Headers in the Network Tool
i
The Server header displayed abovze will often reveal at least the name of the web server software.
In many default configurations, it also reveals the version number.
D
HTTP headers are not always generated solely by the web server. For instance,
web proxies actively insert the X-Forwarded-For352 header to signal the web
server about the original client IP address.
Historically, headers that started with “X-” were called non-standard HTTP headers. However,
RFC6648353 now deprecates the use of “X-” in favor of a clearer naming convention.
The names or values in the response header often reveal additional information about the
technology stack used by the application. Some examples of non-standard headers include X-
Powered-By, x-amz-cf-id, and X-Aspnet-Version. Further research into these names could reveal