### Using Burp Suite for Detailed Inspection

Burp Suite is a powerful tool that allows us to inspect every detail of each request and response. This feature will be frequently used in the upcoming modules.

#### Understanding Captive Portals
You may notice "detectportal.firefox.com" appearing in the proxy history. A **captive portal** is a web page that acts as a gateway when attempting to browse the internet, often displayed when accepting a user agreement or authenticating through a browser to a Wi-Fi network. To prevent these messages from appearing in the proxy history, follow these steps:
1. Enter `about:config` in the Firefox address bar.
2. Accept the warning by clicking "I accept the risk!".
3. Search for `network.captive-portal-service.enabled`.
4. Double-click it to change the value to `false`.

**Reference:**
- [Captive Portal (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Captive_portal)

---

### Utilizing the Repeater Feature

In addition to the Proxy feature, the **Repeater** is another fundamental tool in Burp Suite. The Repeater allows us to craft new requests, modify existing ones, resend them, and review the responses.

**Steps to Use Repeater:**
1. Right-click a request in the **Proxy > HTTP History**.
2. Select **Send to Repeater**.
3. In the Repeater tab, you will see the request on the left side of the window.
4. You can send multiple requests to Repeater, and it will display them using separate tabs.
5. Click **Send** to send the request to the server.

**Figures:**
- **Figure 92:** Sending a Request to Repeater
- **Figure 93:** Burp Suite Repeater
- **Figure 94:** Burp Suite Repeater with Request and Response

The raw server response, including headers and un-rendered content, will be displayed on the right side of the window.

---

### Configuring the Hosts File and Using Intruder

Before diving into the **Intruder** feature, we need to configure our local Kali's hosts file to statically assign the IP to the `offsecwp` website we are testing.

**Command:**
```bash
kali@kali:~$ cat /etc/hosts
...
192.168.50.16 offsecwp
```

**Listing 102:** Setting up our `/etc/hosts` file for `offsecwp`

**Intruder** is a powerful feature in Burp Suite designed to automate various attack angles, from simple to complex web application attacks. Let's simulate a password brute-forcing attack.

**Steps to Simulate a Password Brute-Forcing Attack:**
1. Start a new Burp session and configure the Proxy.
2. Navigate to `http://offsecwp/wp-login.php` from Firefox.
3. Enter "admin" as the username and "test" as the password, then click **Log in**.
4. In Burp, go to **Proxy > HTTP History**, right-click the POST request to `/wp-login.php`, and select **Send to Intruder**.

**Figures:**
- **Figure 95:** Simulating a failed WordPress login
- **Figure 96:** Sending the POST request to Intruder

**Configuring Intruder:**
1. Select the **Intruder** tab.
2. Choose the POST request to modify.
3. Go to the **Positions** sub-tab.
4. Clear all fields and select the value of the `pwd` key.
5. Press **Add** to include the password field in the payload generator.

**Figure 97:** Assigning the password value to the Intruder payload generator

**Providing a Wordlist:**
1. Extract the first 10 values from the `rockyou` wordlist.
   ```bash
   kali@kali:~$ cat /usr/share/wordlists/rockyou.txt | head
   123456
   12345
   123456789
   password
   iloveyou
   princess
   1234567
   rockyou
   12345678
   abc123
   ```

**Listing 103:** Copying the first 10 `rockyou` wordlist values

**Running the Attack:**
1. Go to the **Payloads** sub-tab.
2. Paste the wordlist into the **Payload Options[Simple list]** area.
3. Click **Start Attack** to begin the brute-forcing process.

**Figures:**
- **Figure 98:** Pasting the first 10 `rockyou` entries
- **Figure 99:** Inspecting Intruderâ€™s attack results

After the attack completes, observe the different status codes. The 4th request indicates a potential correct password. Confirm this by logging into the WordPress administrative console with the discovered password.

**Figure 100:** Logging to the WP admin console

---

### Web Application Enumeration

This learning unit covers the following objectives:
- Debugging Web Application source code
- Enumerating and inspecting Headers, Cookies, and Source Code
- Conducting API testing methodologies

**Passive Information Gathering:**
Passive information gathering is crucial for mapping web applications, especially when public repositories or Google dorks disclose sensitive information. Always refer to passively gathered information during active testing.

**Identifying the Technology Stack:**
Before exploiting a web application, identify its components, such as the host operating system, web server software, database software, and frontend/backend programming language. Use the techniques learned earlier to enumerate the underlying stack.

**Using Developer Tools:**
Most modern browsers, including Firefox, have developer tools that can assist in enumeration. These tools provide insights into the inner workings of the target application.

**Debugging Page Content:**
- **URL Inspection:** File extensions in URLs can reveal the programming language. For example, `.php` for PHP, `.jsp` for Java.
- **Source Code Inspection:** Use the Firefox Debugger tool to view resources and content, such as JavaScript frameworks, hidden input fields, and comments.

**Figures:**
- **Figure 101:** Using Developer Tools to Inspect JavaScript Sources
- **Figure 102:** Pretty Print Source
- **Figure 103:** Viewing Prettified Source in Firefox
- **Figure 104:** Selecting E-mail Input Element
- **Figure 105:** Using the Inspector Tool

**Inspecting HTTP Response Headers and Sitemaps:**
- **Network Tool:** Use the Network tool in Firefox to review HTTP requests and responses. Refresh the page to display traffic.
- **Response Headers:** Inspect response headers for additional information about the technology stack.

**Figures:**
- **Figure 106:** Using the Network Tool to View Requests
- **Figure 107:** Viewing Response Headers in the Network Tool

**References:**
- [HTTP Headers (Mozilla, 2022)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers)
- [X-Forwarded-For (RFC6648, 2022)](https://tools.ietf.org/html/rfc6648)

By understanding and utilizing these features and tools, you can effectively map and test web applications for vulnerabilities.