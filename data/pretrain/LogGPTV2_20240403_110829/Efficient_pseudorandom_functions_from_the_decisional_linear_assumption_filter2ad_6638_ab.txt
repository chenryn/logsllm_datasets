non-negligible advantage in deciding the Linear problem in G.
We now deﬁne a generalization of the Linear problem. For k ≥ 1, the k-Linear
problem in G is:
G, output “yes” if r0 =(cid:80)k
Deﬁnition 4 k-Linear problem in G: given g1, g2, . . . , gk, g0, gr1
1 , gr2
2 , . . . , grk
k , gr0
0 ∈
i=1 ri and “no” otherwise.
Deﬁnition 5 k-Linear Assumption in G: no polynomial time algorithm can achieve
non-negligible advantage in deciding the k-Linear problem in G.
(The advantage of an algorithm A in deciding the k-Linear problem is deﬁned
analogously to the Linear case above.) We note that the 1-Linear problem is the
Decisional Diﬃe-Hellman (DDH) problem and the 2-Linear problem is the Linear
problem. The DDH problem is usually deﬁned with diﬀerent (though equivalent)
notation:
Deﬁnition 6 DDH problem: given g, ga, gb, T , output “yes” if T = gab and “no”
otherwise.
These generalized assumptions are useful because they get weaker as k increases,
in generic groups at least (this was proved in [16, 25]). In particular, some k-Linear
Assumption might hold in a bilinear group G where the DDH Problem is easy.
The k-Linear problem also has a helpful property that we will use later: given a
single instance of the problem, one can randomly generate new instances. (This
was proved for the DDH problem in [23].)
5
1
1 , . . . , g
k
r(cid:48)
k , gr(cid:48)
i=1 ri
0
0
i=1 r(cid:48)
1, . . . , r(cid:48)
1 , . . . , grk
k , gr0
0 ∈ G, one can generate gr(cid:48)
k are uniformly random in Zp and r(cid:48)
Lemma 7 Given g1, . . . , gk, g0, gr1
such that r(cid:48)
and is uniformly random otherwise.
Proof. We pick e0, e1, . . . , ek ∈ Zp uniformly randomly. We then deﬁne r(cid:48)
e0ri + ei for i from 1 to k and r(cid:48)
0
0
...
...
...
i if r0 =(cid:80)k
 .
0 =(cid:80)k
 =
i =
0 = e0r0 + e1 + ··· + ek. We can also write this as:
e0
e1
...
ek−1
ek
1
r(cid:48)
r(cid:48)
2...
r(cid:48)
r(cid:48)
k
0
...
r1 1 0
r2 0 1
...
...
rk 0 0
r0 1 1
i=1 ri, then r(cid:48)
. . . 0
. . . 0
...
...
1
0
1
1
i=1 r(cid:48)
i and r(cid:48)
0 = (cid:80)k
If r0 = (cid:80)k
r0 (cid:54)= (cid:80)k
1, . . . , r(cid:48)
If
i=1 ri, then the square matrix on the left of the above expression has a
non-zero determinant and is invertible over Zp. (One can easily show by induction
on k that the determinant of this matrix is (−1)k(r0 − r1 − ··· − rk).) Thus, any
0 ∈ Zp can be uniquely formed by one setting of
1, . . . , r(cid:48)
(k + 1)-tuple of values r(cid:48)
the values of e0, e1, . . . , ek. So r(cid:48)
0 are uniformly random. (cid:3)
k are uniformly random.
k, r(cid:48)
1, . . . , r(cid:48)
k, r(cid:48)
Iterative application of this lemma allows us to generate any number of random
instances of the k-Linear problem from a single instance. As was noted for the
DDH case in [23], we can use this lemma and standard ampliﬁcation techniques to
show that the k-Linear problem is either hard on average or easy even in the worst
case.
3 Our Core Construction
Intuition The key observation behind the Naor-Reingold construction is that the
DDH Assumption implies the existence of a pseudorandom generator that doubles
its input. We use the phrase pseudorandom generator somewhat loosely here, since
their generator is not eﬃciently computable without knowledge of secret parame-
ters. Speciﬁcally, a group element ga is ﬁxed, and this gives a generator ˜Gg,ga which
takes in one random group element, gb, and outputs two pseudorandom group el-
ements: ˜Gga(gb) = (gb, gab). (To compute this pseudorandom generator eﬃciently,
one needs to know either a or b, but this does not pose a problem for their construc-
tion.) This generator is then used along with the GGM construction (which nests n
copies of the generator for an n-bit input) to yield the Naor-Reingold construction.
More formally, the GGM construction takes a pseudorandom generator G that
doubles its input and writes its output G(x) as (G0(x), G1(x)). A pseudorandom
function fs : {0, 1}n → {0, 1}n is then deﬁned from a key s (which is a uniformly
chosen n-bit string) by:
fs(x) = Gxn(··· (Gx2(Gx1(s)))··· ).
Naor and Reingold modify this slightly by using a diﬀerent ga for the generator at
each step:
fG,p,g,a0,...,an(x) = ˜Gxn
gan (··· ( ˜Gx1
ga1 (ga0))··· ) = (ga0)
6
(cid:81)
xi=1 ai.
1
2
2
2
(gr2
2 ) = (gr2
2 , gr1+r2
0
We might hope to obtain a pseudorandom generator G from the Linear Assump-
), but this does
tion that doubles its input by deﬁning Gg0,g1,g2,gr1
not work because ﬁxing r1 makes this generator fail if DDH fails. For example, sup-
pose we receive four output pairs from this generator: (A, A(cid:48)), (B, B(cid:48)), (C, C(cid:48)), (D, D(cid:48)).
We can set g = A/B, gb = C/D, ga = A(cid:48)/B(cid:48), and T = C(cid:48)/D(cid:48). If these pairs were
uniformly random in G2, then T would be uniformly random. Since these pairs come
from our generator, we must have A = gr1
, C =
2 , C(cid:48) = gr1+r3
gr3
2. In this case,
g = gr1
2 = g0, and T = gab. This is a DDH tuple, so
this generator is no more secure than DDH.
Instead, we can get a generator G(cid:48) from the Linear Assumption which takes in
2 , and outputs 3 pseudorandom group elements:
1 , gr2
2 , A(cid:48) = gr1+r1
for some values r1, r1
2 , D(cid:48) = gr1+r4
, a satisﬁes ga
1 , gr2
G(cid:48)
g0,g1,g2(gr1
two random group elements, gr1
0
2−r4
, b = r3
2−r2
r1
2 ) = (gr1
1 , gr2
2 , gr1+r2
2 , B(cid:48) = gr1+r2
, B = gr2
2
, D = gr4
2
2, . . . , r4
2−r2
2
2
2
0
2
0
2
0
2
2
).
0
Pseudorandomness for this generator under the Linear Assumption follows from
Lemma 7. Since this generator does not double its input, we cannot simply plug
it into the GGM construction in the way that the Naor-Reingold construction is
obtained. There is a standard technique for taking a pseudorandom generator that
only slightly stretches its input size and obtaining a new pseudorandom generator
that (e.g.) doubles its input size, but the proof that this generic approach main-
tains pseudorandomness assumes that the pseudorandom generator is eﬃciently
computable, which ours is not. (One needs to know r1 and r2 in order to compute
it, and if one knows r1 and r2, it is no longer pseudorandom.)
as B, and note that there exist c, d ∈ Zp such that gc
1 = g0 and gd
g1 as gc and g2 as gd to reﬂect this relationship (i.e. gc is deﬁned to be gc−1
this notation, our pseudorandom generator G(cid:48), can be written as:
To overcome this diﬃculty, we proceed as follows. We can rename gr1
1 as A, gr2
2
2 = g0. We rename
). In
0
G(cid:48)
g0,gc,gd
(A, B) = (A, B, AcBd).
To modify this so that it doubles its input, we can simply ﬁx additional values
e, f ∈ Zp and deﬁne:
Gg0,gc,gd,ge,gf (A, B) = (A, B, AcBd, AeBf ).
One needs to know c, d, e, f in order to compute this generator, but this will not
pose a problem for our construction. Perhaps more worrisome is that the Linear
Assumption is no longer directly embedded in the generator. Nonetheless, we can
use a hybrid argument to show that samples of outputs from this generator G are
indistinguishable from random under the Linear Assumption. (This is accomplished
by Lemma 10 in the proof of security for our pseudorandom function ensemble
below.) We will use this pseudorandom generator along with the GGM construction
(modifying it like Naor-Reingold) to obtain our construction.
3.1 Construction
We now construct our function ensemble F = {Fn}n∈N and prove it is pseu-
dorandom under the Linear Assumption. Each Fn is a set of functions from n-bit
strings to a group G, where G is a cyclic group of prime order p generated by g.
7
A function f ∈ Fn is associated with a unique key consisting of G, g, p and 4n + 2
elements of Zp. More formally, we give a Setup algorithm that constructs one of
our pseudorandom functions and an Evaluation algorithm that computes its value
on a speciﬁed input string.
Setup(λ) → SK Our Setup algorithm takes in a security parameter λ and
chooses a group G of prime order p which is large enough with respect to λ. It then
chooses a generator g of G and 4n + 2 uniformly random elements of Zp, denoted
by y0, z0, y1, z1, w1, v1, . . . , yn, zn, wn, vn. It outputs:
SK = {G, p, g, y0, z0, y1, z1, w1, v1, . . . , yn, zn, wn, vn}.
We describe the Evaluation algorithm for the function f associated with SK as