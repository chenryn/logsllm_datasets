志的速度要快许多。
只有几种特定的数据库操作才会被记录在事务日志中。但在数据库的底层，几乎所有操作，
无论它们是被归类为DML还是DDL，都可以归结为INSERT、UPDATE和DELETE操作。当
需要写入、更新或删除硬盘上的信息时，就可以使用这3种操作来实现。
无论攻击者是否直接修改了某个表中的信息，SQL注入攻击几乎总会在数据库的事务日志
中留下痕迹。即使在攻击者执行了一条SELECT语句的情况下，相应的WHERE表达式也将迫使
RDBMS创建一个临时表，以便在将数据返回给攻击者之前对中间结果进行排序。这样做的结
果，会在事务日志中创建数个与临时表的创建和加载中间SELECT结果相关的事务日志条目。
在事务日志中查找证据
事务日志的分析是个非常深入的主题，超出了本书内容的范围。因此我们将重点介绍一些
支持调查取证的关键事务。归纳起来，应该按照以下两点来分析事务日志：
·在可疑攻击时间段内执行的INSERT、UPDATE和DELETE语句。在调查取证时，该
信息可用于标识在所调查的时间段内执行的活动，以及相关事件的其他痕迹。
·数据库用户执行的非标准的数据库操作（当事务日志中有可用信息时）。例如，某个通常
从数据库读取信息的应用程序用户账号突然意外地开始执行INSERT、UPDATE和
DELETE语句
接下来将介绍如何搜索主流RDBMS的事务日志，并查找恶意使用了表10-3列出的危险
语句和函数的情况。
Microsoft SQLServer
默认情况下，Microsoft SQL Server的事务日志功能是启用的，而且无法禁用。从任何 SQL
Server客户端，都可以使用原生的fn_dblog函数来访问事务日志。在零售版本的MS SQLServer
690
---
## Page 384
SQL注入攻击与防御（第2版）
中，附带了两个原生客户端：一是命令行客户端SQLCMD，二是传统的 SQLServerManagement
Studio GUI。
下面是一个有用的查询，它列出了针对用户表已经执行事务的汇总信息：
SELECT AllocUnitName as *Object', Operation, CoUNT (OPERATION) AS
'Count' from fn_db1og (null,nu1l) WHERE OPERATION IN ('LOP_INSERT_
ROWS*, *LOP_MODIFY_ROW*, *LOP_DELETE_ROWS*) and A1locUnitName NOT
Like 'sys.$' GROUP BY Operation, AllocUnitNane ORDER BY Object, Operation
该例的查询结果如图10-2所示。
Objedt
Operation
Count
SSFA.Emplcyee LOP_INSERT_ROWS
1
Unknown Aloc UntLOP_DELETE_ROWS1
UnknownAlocUhtLOP_INSERT_ROWS460
UnknownAlocUnitLOP_MODIFY_ROW330
图10-2包含了 Microsoft SQL Server 事务日志汇总信息的查询结果示例
在查询结果中，UnkownAlloeUnit条目表示事务日志引l用的对象已经被删除了。LOP
MODIFY_ROW和LOP_INSERT_ROWS较高的Count值说明在表中插入了460行信息，并被
更新了330次。如果这与应用程序预期的活动相反，那么这就是可疑的活动，可能是与该活动
有关的一次SQL注入攻击。应该标识该情况，以便进一步进行分析，以重现实际的数据插入、
修改和制除操作。
第二个非常有用的查询是数据库审查，它将返回所有INSERT、UPDATE和DELETE操作
的一个列表，以及一些在该查询中捕获的、常常与SQL注入攻击有关的其他操作：
SELECT tlg.Spid, tlg.[Transaction ID), CASE WHEN (select name from
sys.server_principals 1gn where RTRIM(lgn SID) = RTRIM(t1g,
(varchar (max) , [Transaction SID]) ELSE CASE KHEN (select name
wong eueu qoetes)) zeddn + , :xesn qp. 3sra ((([ais uoteoesuex]
sys,database_principals lgn where RTRIM(lgn.SID) = RTRIM(t1g-
[Transaction SID]))) END END as *Login_or_User', tlg. [Transaction
Name] as 'Transaction Type′, tlg. [Begin Time] from fn_dblog(nul1,
nul1) tlg where CAST ([Begin Time] AS DATETIME) >= Ob00eboe66 AND
CAST ([Begin Time] AS DATETIME)  dweqsaw1a) pue (t- asepss
查询结果如下所示：
DELETE from “WEBAPP","SYNGRESS" where "A" = *80′ and *B" = ′three′
and *C" = TO_DATE(*23JAN12′, *DDMONRR*) and ROWID =
INSERT INTO “WEBAPP","SYNGRESS"("A","B",=C") values (*8O′,*three′,TO_
'AAATcPAAEAAAAIuAAD* ;
DATE(*23JAN12′,*DDMONRR′)):
MySQL
在MySQL中，默认情况下不启用事务日志，为了记录事务，必须用命令启用事务日志功能。
371
---
## Page 386
SQL注入攻击与防御（第2版）
可以使用showbinary logs语句来查看是否激活了事务日志功能：
SHOW BINARY LOGS
如果binary logs 被禁用，上面的语句将返回错误说明“you are not using binary logging”
如果事务日志已经启用，将返回所有事务日志名称的一个列表，如下所示：
Log_name
02TS 0TTa 1
DB_Bin_Logs.000001 1 1381
DB_Bin_Logs.000002 1 4603
DB_Bin_Logs.000003 1 126
DB_Bin_Logs.000004 1 794
DB_Bin_Logs.000005 1 126
DB_Bin_Logs.000006 1 221
DB_Bin_Logs.000007 1 107
当配置启用了事务日志功能时，MySQL的第一个事务日志文件的扩展名为*.000001，并
且在以后每次服务器重启时、日志文件达到预定义容量时或者事务日志被清洗时，该数字都会
递增。可以使用下面的查询来确定事务日志存储的位置：
在查询结果中，innodb_log_group_home_dir 的值就是存储事务日志文件的位置。在下面的
示例结果中，事务日志文件存储在MySQL的根目录（.)下：
Variable_name
1Value
innodb_data_home_dir
== | ===
1
innodb_1log_gxoup_home_di.x 1\
要从事务日志中转储一个事务列表，在非Windows服务器上可以使用MySQL原生的mysqlbinlog
工具，在Windows系统中可以使用MySQL命令行客户端。
下面的查询示例显示了如何返回DB_BIN_Log.000002文件中的所有事务记录：
mysqlbin1og *c:\Program Fi1es\MySQL\DB_Bin_Logs .000o02" >
z :\transactionlog.txt
该例的查询结果如下所示，它以人类可读的方式，显示记录在日志文件中的之前执行的语句：
/*!*/:
# at 4155
120114 0:30:34 server id 1 end_1og_pos 4272 Query thread_id=16
exec_time=0 error_code=0
use world/*!*/;
/*!*/:
 at 4272
#120114 0:30:34 server id 1’ end_log_pos 4342 Query thread_id=16
exec_time=0 error_code=0
SET TIMESTAMP=1326519034/*1*/ ;
372
---
## Page 387
第10章确认并从SQL注入攻击中恢复
/*1*/;
COMMIT
#at 4342
#120114 0:30:52 server id 1 end_1og_pos 4411 Query thread_id=16
exec_time=0 error_code=0
NI938
/*!*/;
#at 4411
120114 0:30:52 server id 1 end_1og_pos 4514 Query thread_id=16
exec_time=0 error_code=0
/ *!*/ 1
#at 4514