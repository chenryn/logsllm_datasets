    555555752b70 b8 de 02        MOV        EAX,0x2de
                 00 00
    555555752b75 eb 0c           JMP        end_label
                             LAB_555555752b77                                XREF[1]:     5555557522e8(j)  
    555555752b77 b8 cc 01        MOV        EAX,0x1cc
                 00 00
    555555752b7c eb 05           JMP        end_label
                             LAB_555555752b7e                                XREF[1]:     5555557522db(j)  
    555555752b7e b8 00 00        MOV        EAX,0x0
                 00 00
                             end_label                                       XREF[100]:   5555557527d1(j), 5555557527db(j), 
                                                                                          5555557527e5(j), 5555557527ef(j), 
                                                                                          5555557527f9(j), 555555752803(j), 
                                                                                          55555575280d(j), 555555752817(j), 
                                                                                          555555752821(j), 55555575282b(j), 
                                                                                          555555752835(j), 55555575283f(j), 
                                                                                          555555752849(j), 555555752853(j), 
                                                                                          55555575285d(j), 555555752867(j), 
                                                                                          555555752871(j), 55555575287b(j), 
                                                                                          555555752885(j), 55555575288f(j), 
                                                                                          [more]
    555555752b83 8b 55 fc        MOV        EDX,dword ptr [RBP + -0x4]
    555555752b86 48 63 d2        MOVSXD     RDX,EDX
    555555752b89 89 84 95        MOV        dword ptr [RBP + RDX*0x4 + -0xcbb00],EAX
                 00 45 f3 ff
    555555752b90 83 45 fc 01     ADD        dword ptr [RBP + -0x4],0x1
                             LAB_555555752b94                                XREF[1]:     5555557522cf(j)  
    555555752b94 8b 45 fc        MOV        EAX,dword ptr [RBP + -0x4]
    555555752b97 3b 45 ec        CMP        EAX,dword ptr [RBP + -0x14]
    555555752b9a 0f 8c 34        JL         middle_label
                 f7 ff ff
```
So this is some kind of loop initializing some more array members:
```c
while (counter > 0x1f) & 1) + ((int)uStack12 >> 0x1f) == 1) &&
       (((iVar1 + 0x62) * 2 ^ 0x52U) != p_array[(int)uStack12])) {
      return 0;
    }
    uStack12 = uStack12 + 1;
  }
  return 0;
}
```
So what this function does is read the file byte by byte, perform some manipulation on each byte and compare it to the matching array member, and if no mismatch is found up to the end of the file, return success. Since the function runs just up to the end of the file, we can apparently get it to print success by providing it an empty file. But first, we have to patch the program in order to get it past this logic:
```assembly
    5555555552e7 c7 45 f8        MOV        dword ptr [RBP + -0x8],0x0
                 00 00 00 00
    ; ...
    555555555322 83 7d f8 00     CMP        dword ptr [RBP + -0x8],0x0
    555555555326 0f 84 c0        JZ         LAB_555555752bec 
    ; ...
                                LAB_555555752bec                                XREF[1]:     555555555326(j)  
    555555752bec b8 00 00        MOV        EAX,0x0
                 00 00
                             LAB_555555752bf1                                XREF[4]:     5555555552d6(j), 55555555531d(j), 
                                                                                          555555752bd7(j), 555555752bea(j)  
    555555752bf1 c9              LEAVE
    555555752bf2 c3              RET 
```
We'll patch it by setting `[RBP + -0x8]` to `0x1` instead of `0x0`. To do so, we change `c7 45 f8 00 00 00 00` to ``c7 45 f8 00 00 00 01`.
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./Meow
Meow Meow...
Error opening file: No such file or directory
root@kali:/media/sf_CTFs/matrix/Royal_Cat# touch RoyalCat
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./Meow
Meow Meow...
root@kali:/media/sf_CTFs/matrix/Royal_Cat# cp Meow MeowPatched
root@kali:/media/sf_CTFs/matrix/Royal_Cat# printf '\x01' | dd conv=notrunc of=MeowPatched bs=1 seek=$((0x12ED))
1+0 records in
1+0 records out
1 byte copied, 0.00130419 s, 0.8 kB/s
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./MeowPatched
Meow Meow...
It seems you have got an interesting file...
Maybe you should look at the CTFRoom !
```
Of course, this is just an empty file we've provided, nothing interesting there. Let's see if we can get the same output for a file of length 1. But first, what happens if we get it wrong?
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# printf '\xff' > RoyalCat
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./MeowPatched
Meow Meow...
I think you are missing something.
```
Now, can we get it right? We have two different expected values based on the index of the current byte:
```c
    if (((uStack12 & 1) == 0) && (((iVar1 + 0x45) * 4 ^ 100U) != p_array[(int)uStack12])) break;
    if (((uStack12 - ((int)uStack12 >> 0x1f) & 1) + ((int)uStack12 >> 0x1f) == 1) &&
       (((iVar1 + 0x62) * 2 ^ 0x52U) != p_array[(int)uStack12])) {
      return 0;
    }
```
If the index is even (`((uStack12 & 1) == 0)`) then the expected value is `((iVar1 + 0x45) * 4 ^ 100U)`.
If the index satisfies the condition `((uStack12 - ((int)uStack12 >> 0x1f) & 1) + ((int)uStack12 >> 0x1f) == 1)` then the expected value is `((iVar1 + 0x62) * 2 ^ 0x52U)`. But what is this condition? 
```python
>>> for uStack12 in range(10):
...     print(((uStack12 - (uStack12 >> 0x1f) & 1) + (uStack12 >> 0x1f) == 1))
...
False
True
False
True
False
True
False
True
False
True
>>> for uStack12 in range(0x32eb7 + 1):
...     assert(((uStack12 - (uStack12 >> 0x1f) & 1) + (uStack12 >> 0x1f) == 1) == ( (uStack12 & 1) == 1))
...
>>>
```
So for our case, we can just consider this a fancy way to check if the index is odd.
The first index is `0` so we need to use the even case condition. We saw before that `array[0] = 0x238;`. Now we need to find a value so that `((value + 0x45) * 4 ^ 100U) == 0x238`.
```python
>>> reverse_even = lambda x: hex(((x ^ 100)//4)-0x45)
>>> reverse_even(0x238)
'0x52'
```
Let's try it:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# printf '\x52' > RoyalCat
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./MeowPatched
Meow Meow...
It seems you have got an interesting file...