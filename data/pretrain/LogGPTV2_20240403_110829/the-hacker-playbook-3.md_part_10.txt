### 第3章 抛传——Web 应用程序漏洞利用

#### 1. 聊天支持系统的攻击背景
我们将针对的聊天支持系统是交互式的，它展示了新旧漏洞。为了便于实验，我们会提供多个版本的自定义虚拟机，每个都配备了该聊天支持系统。

此应用程序基于 Node.js 编写。选择 Node 的原因在于其作为开发工具的增长速度非常快，并且很多开发者都喜欢使用它。因此，理解 JavaScript 在后端环境中的安全影响至关重要。

**Node.js 简介**
- **定义**：Node.js 是一个运行在 Chrome V8 引擎上的 JavaScript 运行时环境。它采用事件驱动、非阻塞 I/O 模型，以实现轻量级和高效的处理。
- **特点**：
  - 允许在浏览器外执行 JavaScript。
  - 提供统一堆栈简化项目开发。
  - 不是一个 Web 服务器，但允许用 JavaScript 编程的服务器存在。
- **优点**：
  - 高效快速。
  - 单线程环境，适合作为独立 Web 应用服务器。
  - NPM（Node Package Manager）拥有近50万个免费可重用代码包，是世界上最大的开源库生态系统之一。

Node.js 的广泛使用意味着渗透测试人员必须了解如何识别并利用其中的安全漏洞。例如，有研究表明弱 NPM 凭证可能导致高达 13% 的 NPM 包被篡改，进而影响到约 52% 的依赖这些包的应用程序。

在本示例中，我们将使用 Express 框架作为我们的 Web 服务器，并结合 Pug 模板引擎来生成 HTML 页面。这种架构常见于现代应用开发中。

#### 2. 攻击目标分析
假设我们发现了一个面向公网的 CSK (Cyber Space Kittens) 聊天支持系统。尽管常规漏洞扫描未发现问题，但深入挖掘代码层面的问题、配置错误及逻辑缺陷可能是突破口。

**基本攻击工具准备**:
- 浏览器：Firefox, Chrome, Safari。
- Wappalyzer: 用于检测网站技术栈。
- BuiltWith: 分析页面所使用的技术。
- Retire.JS: 扫描易受攻击的 JavaScript 库。
- Burp Suite 或 OWASP ZAP: 渗透测试工具。

**初始侦察步骤**:
- 使用上述工具确认后端使用的具体技术（如 Express 和 Node.js）。
- 通过 HTTP 标头和其他元数据收集信息。
- 识别所有可能的入口点和服务端点。

#### 3. 网络探测与主动攻击
一旦确定了目标的基础结构，下一步就是进行更详细的网络探测：

- **Burp Suite**: 利用爬虫功能自动发现站点内容，以及主动扫描潜在漏洞。
- **OWASP ZAP**: 类似于 Burp，但完全免费且开源。
- **Dirbuster/GoBuster**: 用于暴力破解目录和文件名。

**XSS 攻击策略**:
- 基础 XSS 攻击类型包括 Cookie 窃取、强制下载文件、用户重定向等。
- 对抗复杂的过滤机制，可以使用混淆技术和 Polyglot payload 来增强攻击效果。

最后，通过实际操作演练这些技术，可以帮助我们更好地理解和防御 Web 应用程序中的常见漏洞。