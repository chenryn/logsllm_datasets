置在一个开括号上并键入C-M-q来重新缩进整个表达式。或者还可以在函数内部的任何位置通过
让编辑器帮你缩进代码。
知道应当如何缩进。由于缩进的本意是反映代码的结构，而结构是由括号来标记的，因此很容易
到这点。事实上，Lisp正则语法的优势之一就在于，它可以让诸如编辑器这样的软件相对容易地
44
另一个重要的格式化规则是，
的确，有经验的Lisp程序员们倾向于依赖编辑器来自动处理缩进，这样不但可以确保代码美
在SLIME中，在每行开始处按下Tab键将导致该行被适当地缩进，或者也可以通过将光标放
(defun foo ()
(defun foo ()
看到then和else子句被缩进到了条件语句的位置，而不是仅仅相对于rF稍微缩进了一点,
(defun foo ()
尽管如此，如果一直都在每行的开始处按Tab来缩进的话，就不会得到这样的代码。相反,
(defun foo ()
(defun foo ()
(dotimes
(if (test
(if {test
(if (test)
(format
(format t
(do-another-thing))))
(do-another-thing)))
(do-one-thing)
(do-one-thing)
第 4章语法和语义
(do-another-thing))))
(do-one-thing)
(i10)
，闭括号总是位于与它们所闭合的列表最后一个元素相同的行。
www.TopSage.com
---
## Page 62
函数。
必要通过将它们分散在多行来加以突出。
现在可以开始了解Lisp的主要程序构造的更多细节了：函数、变量和宏。下一章先来看看
最后，注释应该根据其适用范围被前置一到四个分号，如同下面所说明的：
;;；带有三个分号的注释将通常作为段落注释应用到接下来的一大段代码上。
；；；四个分号用于文件头注释。
(dotimes
1；两个分号说明该注释应用于接下来的代码上。
(baz)))
and-another)
another
X
www.TopSage.com
这个也是一样
本注释仅用于此行
4.9  格式化 Lisp 代码
45
---
## Page 63
里，其他字符也允许使用。例如，将值的一种类型转换成另一种的函数有时会在名字中使用一，
5.1
生成代码，而不是用来完成实际的程序操作的。
全由对函数和特殊操作符的调用所构成。更不用说，宏本身也是函数了—-尽管这种函数是用来
宏运行在编译期，因此它们生成的代码，即当所有宏被展开后将实际构成程序的那些代码，将完
概念性扩展—广义函数（generic function）之上的，第16章将会介绍它们。
置的数据类型纯粹是用操作它们的函数来定义的。甚至连Lisp强大的对象系统也是构建在函数的
语言里一样，函数提供了用于抽象和功能化的基本方法。
何工作的，如何更好使用它们。接下来的几章将专门讲解这三个主题，先从函数开始。就跟其他
一个将字符串转换成微件（widget）的函数可能叫做string->widget。最重要的一个命名约定
Lisp本身是由大量函数组成的。其语言标准中有超过四分之三的名字用于定义函数。所有内
② 严格来讲是几乎任何符号。如果你使用了由语言标准所定义的名字作为你自己的函数的名字，其后果尚未可知。
而且，尽管宏对于Lisp风格有着重要的作用，但最终所有实际的功能还是由函数来提供的。
任何符号都可用作函数名。
(defun name (parameter*)
函数一般使用DEFUN宏来定义。DEFUN的基本结构看起来像这样：
尽管如此，你在第21章会看到，Lisp的包系统允许你在不同的命名空间里创建名字，因此这实际上不是问题。
其在纯粹程度上也不够格。
Lisp家族里，Scheme最接近“纯”函数型语言，而就算它也有一些特性，但相比于诸如Haskell和ML这类语言
如其列表管理函数）被设计用于函数型编程风格，并且Lisp在函数型编程史上也有其突出的地位一
body-form*)
定义新函数
第5章
 documentation string."
函
?通常函数名仅包含字典字符和连字符，但是在特定的命名约定
www.TopSage.com
数
—McCarthy引
---
## Page 64
参列表是一个由变量名所组成的简单列表时，如同在verbose-sum里那样，这些形参被称为必
在一个函数体里做的事情，因此就只需讨论形参列表了。
5.2
的返回值。
档字符串，以及一个由两个表达式所组成的主体。由“+”调用所返回的值将成为verbose-sum
不接受任何参数，它没有文档字符串，并且它的函数体由一个表达式所构成：
从函数的任何位置立即返回，我很快就会谈到它。
值，而最后一个表达式的值将被作为整个函数的值返回。另外RETURN-FROM特殊操作符可用于
讨论相关细节。
成（）。不同种类的形参分别负责处理必要的、可选的、多重的以及关键字实参。我将在下一节里
变量，将用来保存函数在调用时所传递的实参。“如果函数不带有实参，则该列表就是空的，写
frob-widget比frob_widget或frobwidget更具有Lisp风格。一个函数的形参列表定义了一些
是在第2章里提到的那个，即要用连字符而不是下划线或内部大写来构造复合名称。因此,
很明显，一个形参列表的基本用途是为了声明一些变量，用来接收传递给函数的实参。当形
①因为Lisp的函数表示法与lambda演算之间的历史关系，形参列表有时也称为lambda列表。
如果一个字符串紧跟在形参列表之后，那么它应该是一个用来描述函数用途的文档字符串
②例如：
关于函数名或文档字符串就没有更多可说的了，而本书其余部分将用很多篇幅来描述所有可
这个函数称为verbose-sum，它接受的两个实参分别与形参x和y一
现在可以分析一下该程序的各个部分了。它的名字是hello-world，形参列表为空，因此
第2章里所写的hello-world函数，形式如下：
最后，
某些实现里，一个由实现所定义的全局变量需要在使用文档字符串之前被设置成指定的值。
将返回函数foo的文档字符串。尽管如此，请注意文档字符串是用来给人看的，而没有任何程序意义上的用途。
函数形参列表
(defun verbose-sum (x y)
下面是一个更复杂一些的函数;
(format t "hello, world")
(defun hello-world () (format t "hello, world"))
(documentation 'foo ‘function)
(+ x y))
format
"Sum any two numbers after printing a message."
一个DEFUN的主体可由任意数量的Lisp表达式所构成。它们将在函数被调用时依次求
www.TopSage.com
5.2函数形参列表
一对应并且带有一个文
47
---
## Page 65
时候，这个表达式才会被求值。通常情况只是简单地提供一个值作为表达式：
跟一个表达式的列表来指定该默认值。只有在调用者没有传递足够的实参来为可选形参提供值的
或太多的参数来调用的话，将会报错。
么其余的可选形参将自动绑定到值NIL上。这样，前面定义的函数会给出下面的结果：
有任何实参剩余，它们的值将被赋给可选形参。如果实参在所有可选形参被赋值之前用完了，那
形参的名字。下面就是一个简单的例子：
满意。不在意的调用者们将得到一个合理的默认值，而其他调用者们有机会提供一个指定的值。
选择一个好的通用值就可以了。在CommonLisp中，你可以使用可选形参，从而使两类调用者都
以通过设置特定的初始尺寸来改进其程序的性能，而多数调用者只需让实现数据结构的代码自行
的初始尺寸就无关紧要了。那些清楚知道自己打算在数据结构中放置多少个元素的调用者们，可
一个可以创建按需增长的数据结构的函数。由于数据结构可以增长，那么从正确性角度来说，它
个函数将带有一个只有特定调用者才会关心的形参，这可能是因为它有一个合理的默认值。例如
5.3
的形参列表对于几种常见的编码问题提供了一种便利的解决方案。
参数的列表上。最后，参数还可以通过关键字而不是位置来映射到形参上。这样，CommonLisp
应的实参上。如果一个函数以过少或过多的实参来调用的话，Lisp就会报错。
要形参。当函数被调用时，必须为它的每一个必要形参都提供一个实参。每一个形参被绑定到对
了必要形参以外，一个函数还可以有可选形参，或者也可以用单一形参绑定到含有任意多个额外
为了定义一个带有可选形参的函数，在必要形参的名字之后放置符号&optional，后接可选
48
①在那些不直接支持可选形参的语言里，程序员们通常可以找到模拟它们的方式。
当然，你会经常想要一个不同于NIL的默认值。这时可以通过将形参名替换成一个含有名字
虽然许多像verbose-sum这样的函数只有必要形参，但并非所有函数都如此简单。有时一
但是，CommonLisp的形参列表也给了你更灵活的方式将函数调用实参映射到函数形参。除
Lisp仍然可以确保适当数量的实参被传递给函数一
当该函数被调用时，实参被首先绑定到必要形参上。在所有必要形参都被赋值以后，如果还
（foo1
(defun foo（ab&optional cd)(listab cd）)
实”的那个方法。
个数的方法（method）来模拟，这时当一个方法使用较少的实参来调用时，会以默认值代替缺少的实参去调用“真
可能是一个可区分值，而在另一些函数或实参中，这样的特殊值可能是一1或一些由#define所定义的常量。
的可区分值。尽管如此，这种在函数和其调用者之间的协议完全是自组织的一
“no-value”值供调用者传递，以说明它们想要一个给定形参的默认值。例如在C语言中，通常使用NULL作为这样
foo
foo
在像Java这种支持用多个定义重载单个方法的语言里，可选形参也可以通过提供多个具有相同名称，但不同实参
可选形参
第5章
2）
3)
函数
→(12NILNIL)
www.TopSage.com
一在本例中是2到4个。而如果函数用太少
一在某些函数或某些实参中，NULL
一种技术是使用可区分的
---
## Page 66
函数的合法调用：
数量的值做加法运算（它甚至可以没有实参，此时返回0一
+函数也接受可变数量的实参一
和控制串。但在这两个之后，它还需要一组可变数量的实参，这取决于控制串需要插入多少个值。
接收可变数量的实参，比如说前文已然出现过的一些内置函数。FORMAT有两个必要实参，即流
5.4
这将给出类似下面的结果：
量的名字与对应的真实形参相同，但是带有一个-supplied-p后缀。例如：
变量将在调用者实际为该形参提供了一个实参时被绑定到真值，否则为NIL。通常约定，这种变
效的）以外，你还可以通过在形参标识符的默认值表达式之后添加另一个变量名来做到这点。该
过代码来检查形参的值是否为默认值（假如调用者碰巧显式传递了默认值，那么这样做终归是无
除非明确指定否则这将导致height形参带有和width形参相同的值。
且想要使它可以特别方便地产生正方形，那么可以使用一个像这样的形参列表：
表达式可以引用早先出现在形参列表中的形参。如果要编写一个返回矩形的某种表示的函数，并
否则使用10。
可选形参仅适用于一些较为分散并且不能确定调用者是否会提供值的形参。但某些函数需要
有时，有必要去了解--个可选形参的值究竟是被调用者明确指定还是使用了默认值。除了通
(defun make-rectangle (width &optional (height width)) ...)
很明显，也可以通过简单地给它一些可选形参来写出接受可变数量实参的函数，但这样将会
(+123)
(format t "hello, world")
(foo 1
(defun foo (a b &optional (c 3 c-supplied-p))
不过有时可能需要更灵活地选择默认值。比如可能想要基于其他形参来计算默认值。默认值
(foo
(format t
(foo
(foo
(defun foo (a &optional (b 10)) (list a b))
+
剩余形参
(list a b c c-supplied-p))
1）
1）
2）
"hello,
#
3
→(1 10)
↑
→ (1 2 3 NIL)
2
一没有特别的理由限制它只能在两个数之间相加，它可以对任意