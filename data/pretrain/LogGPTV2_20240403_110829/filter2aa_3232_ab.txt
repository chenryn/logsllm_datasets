Map Transit — Warning!
• All facets of eBPF maps are managed by the kernel
• Including the sizes of their values
Map Transit — Warning!
• All facets of eBPF maps are managed by the kernel
• Including the sizes of their values
• Due to this, blindly receiving and operating on eBPF map FDs is extremely dangerous
• Reads from an eBPF map can overflow the target
• Writes to an eBPF map can overread past the source
Map Transit — Warning!
• All facets of eBPF maps are managed by the kernel
• Including the sizes of their values
• Due to this, blindly receiving and operating on eBPF map FDs is extremely dangerous
• Reads from an eBPF map can overflow the target
• Writes to an eBPF map can overread past the source
• Make sure to get and validate the type and size metadata from any received eBPF map
• Through bpf(BPF_OBJ_GET_INFO_BY_FD,...)/bpf_obj_get_info_by_fd()
struct bpf_map_info info = {};
uint32_t info_len = sizeof(info);
bpf_obj_get_info_by_fd(shady_map_fd, &info, &info_len);
char* buf = (char*)malloc(info.value_size);
...
eBPF Program Primer
• Normally, an eBPF program is a single function with all others inlined into it
eBPF Program Primer
• Normally, an eBPF program is a single function with all others inlined into it
• But eBPF supports loading multiple eBPF programs/functions into a single execution context
• eBPF has a map type for storing eBPF program file descriptors, BPF_MAP_TYPE_PROG_ARRAY
• And eBPF’s bpf_tail_call helper function, performs no-return calls into another program
• By their index into a given BPF_MAP_TYPE_PROG_ARRAY map
eBPF Program Primer
• Normally, an eBPF program is a single function with all others inlined into it
• But eBPF supports loading multiple eBPF programs/functions into a single execution context
• eBPF has a map type for storing eBPF program file descriptors, BPF_MAP_TYPE_PROG_ARRAY
• And eBPF’s bpf_tail_call helper function, performs no-return calls into another program
• By their index into a given BPF_MAP_TYPE_PROG_ARRAY map
• Additionally, BPF_MAP_TYPE_PROG_ARRAY maps can be updated at runtime
eBPF Program Primer
• Normally, an eBPF program is a single function with all others inlined into it
• But eBPF supports loading multiple eBPF programs/functions into a single execution context
• eBPF has a map type for storing eBPF program file descriptors, BPF_MAP_TYPE_PROG_ARRAY
• And eBPF’s bpf_tail_call helper function, performs no-return calls into another program
• By their index into a given BPF_MAP_TYPE_PROG_ARRAY map
• Additionally, BPF_MAP_TYPE_PROG_ARRAY maps can be updated at runtime
• Such that bpf_tail_call invocations will call the new eBPF program swapped into the map
Interprocess Call-Based Messaging
IPC via the swapping in and out of eBPF programs that deliver messages to userspace
1. In the eBPF-C program, declare two maps:
• A BPF_MAP_TYPE_PROG_ARRAY map to hold 2 program FDs, including the main entry point
program
• A BPF_MAP_TYPE_ARRAY (or similar) map to send messages to userspace
2. The body of the main entry point eBPF program should be as follows:
SEC("socket/0")
int main_prog(struct __sk_buff *skb) {
bpf_tail_call(skb, &prog_map, 1);
return -1;
}
3. In the ”reader” userspace program, load the above eBPF program as a
BPF_PROG_TYPE_SOCKET_FILTER along with its maps
4. Use Unix domain sockets, or a similar API, to pass both map FDs to a ”writer” process
Interprocess Call-Based Messaging (2)
5. In the reader, set up a TCP socket server
6. Attach the eBPF program to it using setsockopt(2) with SO_ATTACH_BPF
7. Have the reader connect to its own server and send data to it at a regular interval
• After sending the data, check the BPF_MAP_TYPE_ARRAY map for a message
8. In the writer, load a BPF_PROG_TYPE_SOCKET_FILTER program
• It should declare a BPF_MAP_TYPE_ARRAY map identical to the one from step 1
9. Extract its instructions and iterate through them to inject the BPF_MAP_TYPE_ARRAY map FD
in place of the one they declared
for (size_t i=0; i > 32);
... // if connection established
if (fd != handshake_fd) { return 0; }
... // save connection state
Absolute
(Reliable)
Corruption
eBPF Kernel Tracing Primer (2)
• In addition to reading userland and kernel memory, kernel tracing eBPF programs can also
write userland memory
• Through the bpf_probe_write_user() helper function
Note: Using this helper raises an event in the kernel
eBPF Kernel Tracing Primer (2)
• In addition to reading userland and kernel memory, kernel tracing eBPF programs can also
write userland memory
• Through the bpf_probe_write_user() helper function
Note: Using this helper raises an event in the kernel
• They can also abort syscalls at entry through bpf_override_return()
eBPF Kernel Tracing Primer (2)
• In addition to reading userland and kernel memory, kernel tracing eBPF programs can also
write userland memory
• Through the bpf_probe_write_user() helper function
Note: Using this helper raises an event in the kernel
• They can also abort syscalls at entry through bpf_override_return()
• Most of the interesting data sent in syscalls are pointers to userland memory
eBPF Kernel Tracing Primer (2)
• In addition to reading userland and kernel memory, kernel tracing eBPF programs can also
write userland memory
• Through the bpf_probe_write_user() helper function
Note: Using this helper raises an event in the kernel
• They can also abort syscalls at entry through bpf_override_return()
• Most of the interesting data sent in syscalls are pointers to userland memory
• Therefore, tracing eBPF programs can overwrite string and struct syscall inputs and outputs
• And prevent syscalls from reaching the kernel
Interdisciplinary Syscall Interdiction
Precise corruption of data transiting a syscall for nefarious purposes
Three main variants:
• Syscall Redirection/Forgery
• Directing a target process’ syscalls “elsewhere”
• Hijacking a target process’ execution context to perform syscalls
• Useful Targets: open(2), connect(2), write(2), send*(2), bpf(2)
• Lying Kernel
• Providing false data to a process
• Useful Targets: *stat(2), read(2), revc*(2), bpf(2)
• Black Hole
• Preventing a process from communicating with the outside world
• Useful Targets: open(2), connect(2), socket(2), write(2), send*(2), bpf(2)
Interdisciplinary Syscall Interdiction — Syscall Forgery/Redirection
1. Attach a kernel tracing eBPF program to target syscall entries and exits
• This program should be configured with target processes and/or inputs to match/replace
• This can be done through code generation of the program or by passing data in eBPF maps
2. On hooked syscalls, the eBPF program’s kprobe will determine if its inputs should be modified
• If they should not, return
3. Set contextual state (including original inputs) in an eBPF map indexed by PID/TGID
4. Apply the configured modifications
5. On hooked syscall returns, the eBPF program’s kretprobe should identify if there is saved
contextual state based on the process’s PID/TGID/FD
• If not, return
6. Restore the relevant data to user memory and clear the contextual state for the process from
the relevant eBPF map
Interdisciplinary Syscall Interdiction — Lying Kernel
1. Attach a kernel tracing eBPF program to target syscall entries and exits
• This program should use kprobes as necessary to track state and descriptors for matching
• It should also be configured with target processes, FDs, and/or outputs to match/replace
• This can be done through code generation of the program or by passing data in eBPF maps
2. On hooked syscalls, the eBPF program’s kprobe will determine if the syscall’s results should