### Map Transit — Warning

- **Kernel Management of eBPF Maps**: All aspects of eBPF maps, including the sizes of their values, are managed by the kernel.
- **Danger of Blind Operations**: Blindly receiving and operating on eBPF map file descriptors (FDs) is extremely dangerous due to the following risks:
  - **Read Overflows**: Reads from an eBPF map can overflow the target buffer.
  - **Write Overreads**: Writes to an eBPF map can overread past the source buffer.
- **Validation of Metadata**: Ensure you retrieve and validate the type and size metadata for any received eBPF map. This can be done using the `bpf(BPF_OBJ_GET_INFO_BY_FD, ...)` or `bpf_obj_get_info_by_fd()` functions.

```c
struct bpf_map_info info = {};
uint32_t info_len = sizeof(info);
bpf_obj_get_info_by_fd(shady_map_fd, &info, &info_len);
char* buf = (char*)malloc(info.value_size);
```

### eBPF Program Primer

- **Single Function Structure**: Typically, an eBPF program is a single function with all other functions inlined into it.
- **Multiple Programs in a Context**: eBPF supports loading multiple eBPF programs/functions into a single execution context.
- **Program Array Map**: eBPF has a map type, `BPF_MAP_TYPE_PROG_ARRAY`, for storing eBPF program file descriptors.
- **Tail Call Helper**: The `bpf_tail_call` helper function performs no-return calls into another program by its index in a `BPF_MAP_TYPE_PROG_ARRAY` map.
- **Runtime Updates**: `BPF_MAP_TYPE_PROG_ARRAY` maps can be updated at runtime, allowing `bpf_tail_call` invocations to call the new eBPF program swapped into the map.

### Interprocess Call-Based Messaging

**Overview:**
- IPC via the swapping in and out of eBPF programs that deliver messages to userspace.

**Steps:**

1. **Declare Two Maps in eBPF-C Program:**
   - A `BPF_MAP_TYPE_PROG_ARRAY` map to hold 2 program FDs, including the main entry point program.
   - A `BPF_MAP_TYPE_ARRAY` (or similar) map to send messages to userspace.

2. **Main Entry Point eBPF Program:**
   ```c
   SEC("socket/0")
   int main_prog(struct __sk_buff *skb) {
       bpf_tail_call(skb, &prog_map, 1);
       return -1;
   }
   ```

3. **Load eBPF Program in Reader Userspace Program:**
   - Load the eBPF program as a `BPF_PROG_TYPE_SOCKET_FILTER` along with its maps.

4. **Pass Map FDs to Writer Process:**
   - Use Unix domain sockets or a similar API to pass both map FDs to a "writer" process.

5. **Set Up TCP Socket Server in Reader:**
   - Attach the eBPF program to the server using `setsockopt(2)` with `SO_ATTACH_BPF`.
   - Connect to the server and send data at regular intervals.
   - After sending data, check the `BPF_MAP_TYPE_ARRAY` map for a message.

6. **Writer Process:**
   - Load a `BPF_PROG_TYPE_SOCKET_FILTER` program.
   - Declare a `BPF_MAP_TYPE_ARRAY` map identical to the one in step 1.
   - Extract and iterate through instructions to inject the `BPF_MAP_TYPE_ARRAY` map FD in place of the declared one.

### eBPF Kernel Tracing Primer

- **Userland Memory Write**: Kernel tracing eBPF programs can write userland memory using the `bpf_probe_write_user()` helper function.
  - **Note**: Using this helper raises an event in the kernel.
- **Syscall Abort**: They can also abort syscalls at entry using the `bpf_override_return()` function.
- **Pointer Manipulation**: Most interesting data in syscalls are pointers to userland memory, allowing tracing eBPF programs to overwrite string and struct syscall inputs and outputs, and prevent syscalls from reaching the kernel.

### Interdisciplinary Syscall Interdiction

**Overview:**
- Precise corruption of data transiting a syscall for nefarious purposes.

**Three Main Variants:**

1. **Syscall Redirection/Forgery:**
   - Directing a target process’ syscalls “elsewhere”.
   - Hijacking a target process’ execution context to perform syscalls.
   - Useful Targets: `open(2)`, `connect(2)`, `write(2)`, `send*(2)`, `bpf(2)`.

2. **Lying Kernel:**
   - Providing false data to a process.
   - Useful Targets: `*stat(2)`, `read(2)`, `recv*(2)`, `bpf(2)`.

3. **Black Hole:**
   - Preventing a process from communicating with the outside world.
   - Useful Targets: `open(2)`, `connect(2)`, `socket(2)`, `write(2)`, `send*(2)`, `bpf(2)`.

**Syscall Forgery/Redirection:**

1. **Attach eBPF Program to Syscall Entries and Exits:**
   - Configure the program with target processes and/or inputs to match/replace.
   - This can be done through code generation or by passing data in eBPF maps.

2. **Modify Inputs on Hooked Syscalls:**
   - If inputs should not be modified, return.
   - Set contextual state (including original inputs) in an eBPF map indexed by PID/TGID.
   - Apply the configured modifications.

3. **Restore Data on Syscall Returns:**
   - Identify if there is saved contextual state based on the process’s PID/TGID/FD.
   - If not, return.
   - Restore the relevant data to user memory and clear the contextual state for the process from the relevant eBPF map.

**Lying Kernel:**

1. **Attach eBPF Program to Syscall Entries and Exits:**
   - Use kprobes to track state and descriptors for matching.
   - Configure the program with target processes, FDs, and/or outputs to match/replace.
   - This can be done through code generation or by passing data in eBPF maps.

2. **Modify Syscall Results:**
   - Determine if the syscall’s results should be modified.
   - If not, return.
   - Set contextual state (including original outputs) in an eBPF map indexed by PID/TGID.
   - Apply the configured modifications.

This optimized version provides a more structured and professional presentation of the information, making it easier to understand and follow.