   75    
    4    
   75    
   26    
   87    
   84    
   22    
(10 rows)    
```    
24、随机字符串    
```    
md5(random()::text)    
```    
例子，生成一批随机字符串    
```    
postgres=# select md5(random()::text) from generate_series(1,10);    
               md5                    
----------------------------------    
 ba1f4f4b0073f61145a821c14437230d    
 a76b09292c1449ebdccad39bcb5864c0    
 d58f5ebe43f631e7b5b82e070a05e929    
 0c0d3971205dc6bd355e9a60b29a4c6d    
 bd437e87fd904ed6ecc80ed782abac7d    
 71aea571d8c0cd536de53fd2be8dd461    
 e32e105db58f9d39245e3e2b27680812    
 174f491a2ec7a3498cab45d3ce8a4277    
 563a7c389722f746378987b9c4d9bede    
 6e8231c4b7d9a5cfaae2a3e0cef22f24    
(10 rows)    
```    
25、重复字符串    
```    
repeat('abc', 10)    
```    
例子，生成重复2次的随机字符串    
```    
postgres=# select repeat(md5(random()::text),2) from generate_series(1,10);    
                              repeat                                  
------------------------------------------------------------------    
 616d0a07a2b61cd923a14cb3bef06252616d0a07a2b61cd923a14cb3bef06252    
 73bc0d516a46182b484530f5e153085e73bc0d516a46182b484530f5e153085e    
 e745a65dbe0b4ef0d2a063487bbbe3d6e745a65dbe0b4ef0d2a063487bbbe3d6    
 90f9b8b18b3eb095f412e3651f0a946c90f9b8b18b3eb095f412e3651f0a946c    
 b300f78b20ac9a9534a46e9dfd488761b300f78b20ac9a9534a46e9dfd488761    
 a3d55c275f1e0f828c4e6863d4751d06a3d55c275f1e0f828c4e6863d4751d06    
 40e609dbe208fc66372b1c829018097140e609dbe208fc66372b1c8290180971    
 f661298e28403bc3005ac3aebae49e16f661298e28403bc3005ac3aebae49e16    
 10d0641e40164a238224d2e16a28764710d0641e40164a238224d2e16a287647    
 450e599890935df576e20c457691c421450e599890935df576e20c457691c421    
(10 rows)    
```    
26、随机中文    
```    
create or replace function gen_hanzi(int) returns text as $$      
declare      
  res text;      
begin      
  if $1 >=1 then      
    select string_agg(chr(19968+(random()*20901)::int), '') into res from generate_series(1,$1);      
    return res;      
  end if;      
  return null;      
end;      
$$ language plpgsql strict;     
```    
```    
postgres=# select gen_hanzi(10) from generate_series(1,10);    
      gen_hanzi           
----------------------    
 骡歵瘾崪圚祯骤泛准赔    
 𦈚寱瘫办戾薶窍爉充环    
 鹝赶轮肸蒹焷尮禀漽汤    
 庰槖诤蜞礀链惧珿憗腽    
 憭酾轮𫍚陡切弥煈瘐猎    
 韸琵慆蝾啈响夐捶燚积    
 菥芉阣瀤乐潾敾糩镽礕    
 厢垅欳事鎤懯剂掏蔷窡    
 覤綊伱鳪散当镄灳毯杸    
 鳀倯鲗錾榜晟挗觑镈壮    
(10 rows)    
```    
27、随机数组    
```    
create or replace function gen_rand_arr(int,int) returns int[] as $$      
  select array_agg((random()*$1)::int) from generate_series(1,$2);      
$$ language sql strict;      
```    
```    
postgres=# select gen_rand_arr(100,10) from generate_series(1,10);    
          gen_rand_arr               
---------------------------------    
 {69,11,12,70,7,41,81,95,83,17}    
 {26,79,20,21,64,64,51,90,38,38}    
 {3,64,46,28,26,55,39,12,69,76}    
 {66,38,87,78,8,94,18,88,89,1}    
 {6,14,81,26,36,45,90,87,35,28}    
 {25,38,91,71,67,17,26,5,29,95}    
 {82,94,32,69,72,40,63,90,29,51}    
 {91,34,66,72,60,1,17,50,88,51}    
 {77,13,89,69,84,56,86,10,61,14}    
 {5,43,8,38,11,80,78,74,70,6}    
(10 rows)    
```    
28、连接符    
```    
postgres=# select concat('a', ' ', 'b');    
 concat     
--------    
 a b    
(1 row)    
```    
29、自定义函数    
通过自定义函数，可以生成很多有趣的数据。  例如 随机身份证号    
```    
create or replace function gen_id(      
  a date,      
  b date      
)       
returns text as $$      
select lpad((random()*99)::int::text, 2, '0') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       to_char(a + (random()*(b-a))::int, 'yyyymmdd') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       random()::int ||       
       (case when random()*10 >9 then 'X' else (random()*9)::int::text end ) ;      
$$ language sql strict;      
```    
```    
postgres=# select gen_id('1900-01-01', '2017-10-16') from generate_series(1,10);    
       gen_id           
--------------------    
 25614020061108330X    
 49507919010403271X    
 96764619970119860X    
 915005193407306113    
 551360192005045415    
 430005192611170108    
 299138191310237806    
 95149919670723980X    
 542053198501097403    
 482334198309182411    
(10 rows)    
```    
二、如何快速生成大量数据  
1、通过SRF函数genrate_series快速生成  
```  
drop table if exists tbl;  
create unlogged table tbl (  
  id int primary key,  
  info text,  
  c1 int,  
  c2 float,  
  ts timestamp  
);  
-- 写入100万条  
insert into tbl select id,md5(random()::text),random()*1000,random()*100,clock_timestamp() from generate_series(1,1000000) id;  
INSERT 0 1000000  
Time: 990.351 ms  
```  
```  
postgres=# select * from tbl limit 10;  
 id |               info               | c1  |         c2         |             ts               
----+----------------------------------+-----+--------------------+----------------------------  
  1 | 2861dff7a9005fd07bd565d4c222aefc | 731 | 35.985756074820685 | 2023-09-06 07:34:43.992953  
  2 | ada46617f699b439ac3749d339a17a37 | 356 |  6.641897326709056 | 2023-09-06 07:34:43.993349  
  3 | 53e5f281c152abbe2be107273f661dcf |   2 |  79.66681115076746 | 2023-09-06 07:34:43.993352  
  4 | 42a7ab47ac773966fd80bbfb4a381cc5 | 869 |  39.64575446230825 | 2023-09-06 07:34:43.993352  
  5 | fc1fe81740821e8099f28578fe602d47 | 300 |  23.26141144641234 | 2023-09-06 07:34:43.993353  
  6 | 54f85d06b05fa1ad3e6f6c25845a8c99 | 536 |  51.24406182086716 | 2023-09-06 07:34:43.993354  
  7 | 9aac2fa6715b5136ff08c984cf39b200 | 615 |  60.35335101210144 | 2023-09-06 07:34:43.993355  
  8 | 227f02f3ce4a6778ae8b95e4b161da8e | 665 | 35.615585743405376 | 2023-09-06 07:34:43.993356  
  9 | eb2f7c304e9139be23828b764a8334a2 | 825 |  60.37908523246465 | 2023-09-06 07:34:43.993356  
 10 | dce3b8e11fbcf85e6fd0abca9546447d | 438 |  45.88193344829534 | 2023-09-06 07:34:43.993357  
(10 rows)  
```  
2、使用plpgsql或inline code, 快速创建分区表.    
```  
drop table if exists tbl;  
create unlogged table tbl (  
  id int primary key,  
  info text,  
  c1 int,  
  c2 float,  
  ts timestamp  
) PARTITION BY HASH(id);  
do language plpgsql $$  
declare  
  cnt int := 256;  
begin  
  for i in 0..cnt-1 loop  
    execute format('create unlogged table tbl_%s PARTITION OF tbl FOR VALUES WITH ( MODULUS %s, REMAINDER %s)', i, cnt, i);  
  end loop;  
end;  
$$;  
insert into tbl select id,md5(random()::text),random()*1000,random()*100,clock_timestamp() from generate_series(1,1000000) id;  
INSERT 0 1000000  
Time: 1577.707 ms (00:01.578)  
```  
3、使用 pgbench 调用自定义SQL文件, 高速写入  
```  
drop table if exists tbl;  