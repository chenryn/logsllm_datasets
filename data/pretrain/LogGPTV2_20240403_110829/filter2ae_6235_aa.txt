**本文翻译自：[CVE-2017-11176: A step-by-step Linux Kernel exploitation (part
1/4)](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html)**
# 简介
此系列介绍了从CVE描述到一步一步实现Linux内核漏洞利用的详细过程。一开始先分析补丁，以理解漏洞并在内核态下触发漏洞([part
1](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html))，然后逐步构建一个有效的漏洞验证代码(proof-of-concept,POC)([part
2](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part2.html))。然后改写PoC实现简单的任意代码调用([part
3](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part3.html))，最终在ring-0(内核态)下执行任意代码([part
4](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part4.html))。
面向的读者是Linux内核新手(对老手并没有太多新的东西)。由于大多数内核漏洞利用文章假定读者已经熟悉内核代码，我们将尝试通过解析核心数据结构和重要的代码路径来填补这之间的差距。最后，
**应该了解漏洞利用代码的每一行，以及它们对内核的影响。**
显然不可能在一篇文章中涵盖所有内容，但我们将努力解析实现漏洞利用所需的每个内核路径。可以把它想象成一个由实际例子引领的Linux内核导览。内核漏洞利用实现实际上是理解Linux内核的一种方法。此外，我们将展示一些调试技术，工具，常见错误以及解决方法。
这里利用的CVE是CVE-2017-11176，又名“mq_notify：double
sock_put()”。大多数发行版在2017年年中修补了此漏洞。在撰写本系列时，没有已知的公开针对这一漏洞的漏洞利用。
这里公开的内核代码与特定版本(v2.6.32.x)匹配，但该bug也会影响最高至4.11.9版本的内核。有人可能认为这个版本太旧了，但它实际上仍然在很多地方使用，而且某些内核代码路径可能更容易理解。在更新的内核上找到相应的路径应该不会太难。
这里构建的漏洞不是所有内核版本通用的。因此，需要进行一些修改才能在另一个内核版本上使用它(结构偏移/布局，gadgets，函数地址......)。不要试图按原样直接运行漏洞，这只会让你的系统崩溃！你可以在[这里](https://github.com/lexfo/linux/blob/master/cve-2017-11176.c)找到最终的漏洞利用代码。
建议下载存在漏洞的[内核源代码](https://www.kernel.org/)，并尝试实时跟踪代码(甚至更进一步，实现漏洞利用)。启动你最喜欢的代码下载工具，让我们开始吧！
**Warning** ：请不要对这个系列的规模感到害怕，里面有大量的代码。无论如何，如果你真的想深入内核，你必须准备好阅读大量的代码和文档。慢慢来。
**Note** ：我们并没有发现这个漏洞，它基本上是1-day的利用实现。
# 目录
  * 推荐阅读
  * 环境设置
  * 核心概念
  * 公开信息
  * 理解漏洞
  * Reaching the Retry Logic
  * 强制触发漏洞
  * 结论
## 推荐阅读
本文仅涵盖整个内核的一小部分。建议你阅读这些书(非常棒的书)：
  * 深入理解Linux内核(D.P.Bovet，M.Cesati)
  * 深入理解Linux网络内幕(C.Benvenuti)
  * 内核漏洞的利用与防范(E.Perla，M.Oldani)
  * Linux设备驱动程序(J.Corbet，A.Rubini，G.Kroah-Hartman)
## 环境设置
此处展示的代码来自特定版本(2.6.32.x)。但是你可以尝试在以下目标上实现漏洞利用。代码中可能存在轻微变化，但漏洞应该还是可以利用的。
[Debian 8.6.0 (amd64)
ISO](https://cdimage.debian.org/mirror/cdimage/archive/8.6.0-live/amd64/iso-hybrid/debian-live-8.6.0-amd64-standard.iso)
该ISO运行3.16.36内核。我们只确认该漏洞是可以访问的，并导致内核崩溃。大多数改变将在漏洞利用开发的最后阶段出现(参见第3部分和第4部分)。
虽然该漏洞(通常)可以在各种配置/架构中被利用，我们配置的环境如下：
  * 内核版本必须低于4.11.9(我们建议小于4.x版本)
  * 它必须在“amd64”(x86-64)架构上运行
  * 具有root访问权限以进行调试
  * 内核使用SLAB分配器
  * SMEP已启用
  * kASLR和SMAP被禁用
  * 内存 >= 512MB
  * 任意数量的CPU。 一个也没关系，你很快就会理解为什么。
**WARNING** ：由于推荐内核版本中的代码变化，建议将CPU数设置为1。否则，重新分配可能需要额外的步骤(参见第3部分)。
该ISO上的“默认”配置满足所有要求。如果想在另一个版本上开发漏洞利用，请参阅下一节。
即使你不知道什么是SLAB/SMEP/SMAP，也不必担心，这将在[part
3](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part3.html)和[part 4](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part4.html)中介绍。
**WARNING**
：为了方便调试，必须使用虚拟化软件运行目标。但是，我们不鼓励使用virtualbox，因为它不支持SMEP(不确定它现在是否支持)。可以使用免费版本的vmware或任何其他虚拟化工具，只要支持SMEP(我们将绕过SMEP)。
一旦安装了系统，我们需要检查系统配置是否符合预期。
### 检查SLAB/SMEP/SMAP/KASLR状态
要了解是否启用了SMEP，请运行以下命令。输出中必须存在“smep”字符串：
    $ grep "smep" /proc/cpuinfo
    flags   : [...] smep bmi2 invpcid
                    ^--- this one
如果没有，请确保 **cat /proc/cmdline** 中没有 **nosmep** 字符串。如果存在，则需要编辑
**/etc/default/grub** 文件并修改以下行：
    # /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT="quiet"              // must NOT have "nosmep"
    GRUB_CMDLINE_LINUX="initrd=/install/initrd.gz"  // must NOT have "nosmep"
然后运行 **update-grub** 并重启系统。如果仍然禁用smep(检查 _/proc/cpuinfo_ )，则使用另一个虚拟化工具。
对于SMAP，则需要做相反的事。首先，查找“smap”是否在/proc/cpuinfo中。
如果"smap"没有出现，一切都没问题。否则，在grub配置文件中添加“nosmap”(然后update-grub并重新启动)。
这里开发的漏洞利用我们将使用“硬编码”的地址。因此，必须禁用kASLR。这相当于对于内核的ASLR([地址空间布局随机化](https://en.wikipedia.org/wiki/Address_space_layout_randomization))。要禁用它，可以在cmdline中添加
**nokaslr** 选项(就像nosmap一样)。最后，grub cmdline应该是这样的：
    GRUB_CMDLINE_LINUX_DEFAULT="quiet nokaslr nosmap"
    GRUB_CMDLINE_LINUX="initrd=/install/initrd.gz"
最后，必须使用SLAB分配器。可以用下列命令验证内核是否正在使用它：
    $ grep "CONFIG_SL.B=" /boot/config-$(uname -r)
    CONFIG_SLAB=y
必须是 **CONFIG_SLAB=y** 。Debian默认使用SLAB而Ubuntu默认使用SLUB。如果不是，那么将需要 **重新编译内核**
。请阅读文档。
同样，建议的ISO满足所有这些要求，因此只需检查一切是否正常。
### 安装 SystemTap
如前所述，ISO运行v3.16.36(uname
-v)内核，该内核存在此漏洞(在[v3.16.47](https://lwn.net/Articles/732094/)中修复)。
**WARNING** ：不要遵循systemtap安装过程，因为它可能会更新内核！
因此，我们需要获取特定版本的.deb包并手动安装。需要：
  * linux-image-3.16.0-4-amd64_3.16.36-1+deb8u1_amd64.deb
  * linux-image-3.16.0-4-amd64-dbg_3.16.36-1+deb8u1_amd64.deb
  * linux-headers-3.16.0-4-amd64_3.16.36-1+deb8u1_amd64.deb
可以从此[链接](https://snapshot.debian.org/package/linux/3.16.36-1%2Bdeb8u1/)下载或者输入：
    # wget https://snapshot.debian.org/archive/debian-security/20160904T172241Z/pool/updates/main/l/linux/linux-image-3.16.0-4-amd64_3.16.36-1%2Bdeb8u1_amd64.deb
    # wget https://snapshot.debian.org/archive/debian-security/20160904T172241Z/pool/updates/main/l/linux/linux-image-3.16.0-4-amd64-dbg_3.16.36-1%2Bdeb8u1_amd64.deb
    # wget https://snapshot.debian.org/archive/debian-security/20160904T172241Z/pool/updates/main/l/linux/linux-headers-3.16.0-4-amd64_3.16.36-1%2Bdeb8u1_amd64.deb
然后安装：
    # dpkg -i linux-image-3.16.0-4-amd64_3.16.36-1+deb8u1_amd64.deb
    # dpkg -i linux-image-3.16.0-4-amd64-dbg_3.16.36-1+deb8u1_amd64.deb
    # dpkg -i linux-headers-3.16.0-4-amd64_3.16.36-1+deb8u1_amd64.deb
完成后，重新启动系统，并使用以下命令下载SystemTap：
    # apt install systemtap
最后，确保一切正常：
    # stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
    stap: Symbol `SSL_ImplementedCiphers' has different size in shared object, consider re-linking
    Pass 1: parsed user script and 106 library script(s) using 87832virt/32844res/5328shr/28100data kb, in 100usr/10sys/118real ms.
    Pass 2: analyzed script: 1 probe(s), 1 function(s), 3 embed(s), 0 global(s) using 202656virt/149172res/6864shr/142924data kb, in 1180usr/730sys/3789real ms.
    Pass 3: translated to C into "/tmp/stapWdpIWC/stap_1390f4a5f16155a0227289d1fa3d97a4_1464_src.c" using 202656virt/149364res/7056shr/142924data kb, in 0usr/20sys/23real ms.
    Pass 4: compiled C into "stap_1390f4a5f16155a0227289d1fa3d97a4_1464.ko" in 6310usr/890sys/13392real ms.
    Pass 5: starting run.
    read performed                                      // <--------------    Pass 5: run completed in 10usr/20sys/309real ms.
### 最后一次检查
除了SystemTap之外，目标内核将用于编译和运行漏洞利用程序，因此运行以下命令：
    # apt install binutils gcc
下载[exploit](https://github.com/lexfo/linux/blob/master/cve-2017-11176.c):
    $ wget https://raw.githubusercontent.com/lexfo/linux/master/cve-2017-11176.c
**由于推荐的内核和exp针对的内核之间的代码差异，这里的“used-after-freed”对象位于“kmalloc-2048”缓存(而不是kmalloc-1024)。** 也就是说，需要更改exp中的以下行：
    #define KMALLOC_TARGET 2048 // instead of 1024
这是由于此漏洞不是所有内核版本都通用所产生的问题。可以通过阅读第3部分来了解此处的更改。现在，编译并运行exp：
    $ gcc -fpic -O0 -std=c99 -Wall -pthread cve-2017-11176.c -o exploit
    $ ./exploit
    [ ] -={ CVE-2017-11176 Exploit }=-    [+] successfully migrated to CPU#0
    [+] userland structures allocated:
    [+] g_uland_wq_elt = 0x120001000
    [+] g_fake_stack   = 0x20001000
    [+] ROP-chain ready
    [ ] optmem_max = 20480
    [+] can use the 'ancillary data buffer' reallocation gadget!
    [+] g_uland_wq_elt.func = 0xffffffff8107b6b8
    [+] reallocation data initialized!
    [ ] initializing reallocation threads, please wait...
    [+] 200 reallocation threads ready!
    [+] reallocation ready!
    [+] 300 candidates created
    [+] parsing '/proc/net/netlink' complete
    [+] adjacent candidates found!
    [+] netlink candidates ready:
    [+] target.pid = -4590
    [+] guard.pid  = -4614
    [ ] preparing blocking netlink socket
    [+] receive buffer reduced
    [ ] flooding socket
    [+] flood completed
    [+] blocking socket ready
    [+] netlink fd duplicated (unblock_fd=403, sock_fd2=404)
    [ ] creating unblock thread...
    [+] unblocking thread has been created!
    [ ] get ready to block
    [ ][unblock] closing 576 fd
    [ ][unblock] unblocking now
    [+] mq_notify succeed
    [ ] creating unblock thread...
    [+] unblocking thread has been created!
    [ ] get ready to block