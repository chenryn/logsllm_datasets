# Multi-Ciphersuite Security of the Secure Shell (SSH) Protocol

**Authors:**
- Florian Bergsma
- Benjamin Dowling
- Florian Kohlar
- Jörg Schwenk
- Douglas Stebila

An extended abstract version of this work appears in: *Proc. 21st ACM Conference on Computer and Communications Security (CCS) 2014*, doi:10.1145/2660267.2660286. This is the full version.

## Abstract

The Secure Shell (SSH) protocol is widely used to provide secure remote access to servers, making it one of the most important security protocols on the Internet. We demonstrate that the signed-Diffie–Hellman SSH ciphersuites are secure: each is a secure authenticated and confidential channel establishment (ACCE) protocol, the same security definition now used for Transport Layer Security (TLS) ciphersuites. While the ACCE definition suffices for individual ciphersuites, it does not cover scenarios where the same long-term key is used with multiple ciphersuites. In practice, it is common for a server to use the same signing key for both finite field and elliptic curve Diffie–Hellman. Although TLS is vulnerable in such cases, we show that SSH remains secure even when the same signing key is used across multiple ciphersuites. We introduce a new generic multi-ciphersuite composition framework to achieve this result in a black-box manner.

**Keywords:** Secure Shell (SSH), key agility, cross-protocol security, multi-ciphersuite, authenticated and confidential channel establishment

This research was funded by the European Community (FP7/2007-2013) under grant agreement number ICT-2007-216646 - European Network of Excellence in Cryptology II (ECRYPT II), the Australian Technology Network–German Academic Exchange Service (ATN-DAAD) Joint Research Co-operation Scheme, and the Australian Research Council (ARC) Discovery Project scheme under grant DP130104304.

## Contents

1. Introduction
2. Preliminaries
   2.1 Decisional Diffie–Hellman
   2.2 Digital Signature Schemes
   2.3 Buffered Stateful Authenticated Encryption
   2.4 Pseudo-Random Functions
   2.5 Collision-Resistant Hash Functions
3. Multi-Ciphersuite ACCE Protocols
   3.1 Execution Environment
   3.2 Security Definitions
4. The SSH Protocol
   4.1 The SSH PRF
5. ACCE Security of SSH
   5.1 Challenges with Security Proofs for SSH
   5.2 Server-Only-Authentication Mode
   5.3 Mutual Authentication Mode
6. Composition Theorem for Multi-Ciphersuite Security
   6.1 Single Ciphersuite Security with Auxiliary Oracle
   6.2 Multi-Ciphersuite Composition
7. SSH is Multi-Ciphersuite Secure
   7.1 Proof of Precondition 2
   7.2 Proof of Precondition 1
   7.3 Security of SSH with Auxiliary Oracle
   7.4 Final Result: Multi-Ciphersuite SSH
8. TLS is Not Multi-Ciphersuite Secure
   8.1 Attack of Mavrogiannopoulos et al.
   8.2 The Attack in Our Framework
9. Discussion
A. Protocol Description for SSH Signed-Diffie–Hellman Ciphersuite
   A.1 Negotiation
   A.2 Signed-DH Sub-Protocol—All Authentication Modes
   A.3 Sub-Protocol—No Client Authentication
   A.4 Sub-Protocol—Password Client Authentication
   A.5 Sub-Protocol—Public-Key Client Authentication

## 1. Introduction

Communication on the Internet is protected by a variety of cryptographic protocols. While the Transport Layer Security (TLS) protocol secures web communication, email transfer, and many other network protocols, the Secure Shell (SSH) protocol provides secure remote login and rudimentary virtual private network (VPN) access. Ensuring strong cryptographic assurances for these protocols is crucial.

Real-world protocols, including SSH and TLS, are more complex than those typically studied in academic literature. They encompass key exchange, secure channel communication, negotiation of various cryptographic algorithms, and support for multiple authentication modes. These protocols also include additional functionalities such as renegotiation and error reporting, which can affect their practical and theoretical security.

At a high level, parties run a cryptographic protocol to establish a secure channel, followed by the communication of application data over that channel. The process begins with a channel establishment phase, where parties negotiate cryptographic parameters, establish a shared session key, perform entity authentication (either server-only or mutual), and send key confirmation messages. This is followed by the application data phase, where data is communicated over a secure channel providing confidentiality and integrity using the session key from the channel establishment phase. In SSH, this secure channel is called the binary packet protocol. A complicating factor for both SSH and TLS is that some portions of the channel establishment phase occur in plaintext, while others are sent over the secure channel. This overlap can complicate the analysis of these protocols.

For precision, we use the following terminology:
- **Plaintext Channel**: Communication not sent via authenticated encryption using the session key.
- **Auth-Enc Channel**: Communication sent via authenticated encryption using the session key.
- **Handshake Phase**: Communication of protocol messages to perform entity authentication and establish a secure channel, consisting of a negotiation phase and a sub-protocol (or ciphersuite) phase.
- **Application Data Phase**: Communication of application data using the auth-enc channel.

Figure 1 shows a simplified version of the SSH protocol with mutual authentication; details appear in Section 4.

### Provable Security of Real-World Protocols

Standard authenticated key exchange (AKE) models [7, 12, 27] are not appropriate for modeling protocols like SSH and TLS for several reasons. First, the auth-enc channel for secure application data communication is essential but not included in AKE definitions. Moreover, even the handshake phase cannot be analyzed as an AKE protocol because AKE security requires indistinguishability of session keys, but in both SSH and TLS, a key confirmation message is sent over the auth-enc channel, allowing an attacker to distinguish a random session key from the real one. Some work has shown that truncated forms of the SSH [36] and TLS [22, 29] handshakes are secure AKE protocols, but this does not necessarily imply the security of the entire protocol.

It has also been observed that standard notions of authenticated encryption are not quite appropriate for the auth-enc channels in SSH or TLS. The security property that the auth-enc channel in SSH aims to meet is buffered stateful authenticated encryption [6, 1, 31], which includes confidentiality and integrity of ciphertexts, protection against reordering, and details associated with byte-wise processing of received data.

Analysis of TLS proceeded in a similarly separate manner until 2012, when the first security proof of a full, unmodified TLS ciphersuite appeared. Jager et al. [20] showed that (mutually authenticated) TLS ciphersuites are secure.