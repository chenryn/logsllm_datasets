title:Multi-Ciphersuite Security of the Secure Shell (SSH) Protocol
author:Florian Bergsma and
Benjamin Dowling and
Florian Kohlar and
J&quot;org Schwenk and
Douglas Stebila
An extended abstract version of this work appears in: Proc. 21st ACM Conference on Computer and
Communications Security (CCS) 2014, doi:10.1145/2660267.2660286. This is the full version.
Multi-ciphersuite security
of the Secure Shell (SSH) protocol
Florian Bergsma1
Benjamin Dowling2a
Florian Kohlar1
J¨org Schwenk1
Douglas Stebila2a,2b
1 Horst G¨ortz Institute, Ruhr-Universit¨at Bochum, Bochum, Germany
{florian.bergsma,florian.kohlar,joerg.schwenk}@rub.de
2a School of Electrical Engineering and Computer Science
2b School of Mathematical Sciences
2a,2b Queensland University of Technology, Brisbane, Australia
{b1.dowling,stebila}@qut.edu.au
June 5, 2020
Abstract
The Secure Shell (SSH) protocol is widely used to provide secure remote access to servers,
making it among the most important security protocols on the Internet. We show that the
signed-Diﬃe–Hellman SSH ciphersuites of the SSH protocol are secure: each is a secure
authenticated and conﬁdential channel establishment (ACCE) protocol, the same security
deﬁnition now used to describe the security of Transport Layer Security (TLS) ciphersuites.
While the ACCE deﬁnition suﬃces to describe the security of individual ciphersuites,
it does not cover the case where parties use the same long-term key with many diﬀerent
ciphersuites: it is common in practice for the server to use the same signing key with both
ﬁnite ﬁeld and elliptic curve Diﬃe–Hellman, for example. While TLS is vulnerable to attack
in this case, we show that SSH is secure even when the same signing key is used across
multiple ciphersuites. We introduce a new generic multi-ciphersuite composition framework
to achieve this result in a black-box way.
Keywords: Secure Shell (SSH); key agility; cross-protocol security; multi-ciphersuite;
authenticated and conﬁdential channel establishment
The research leading to these results has received funding from the European Community (FP7/2007-2013)
under grant agreement number ICT-2007-216646 - European Network of Excellence in Cryptology II (ECRYPT
II), the Australian Technology Network–German Academic Exchange Service (ATN-DAAD) Joint Research
Co-operation Scheme, and the Australian Research Council (ARC) Discovery Project scheme under grant
DP130104304.
1
Contents
1 Introduction
2 Preliminaries
2.1 Decisional Diﬃe–Hellman . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Digital signature schemes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 Buﬀered stateful authenticated encryption . . . . . . . . . . . . . . . . . . . . . .
2.4 Pseudo-random functions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.5 Collision-resistant hash functions . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
7
7
7
8
8
9
3 Multi-ciphersuite ACCE protocols
9
3.1 Execution environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
3.2 Security deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
4 The SSH protocol
13
4.1 The SSH PRF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
5 ACCE security of SSH
15
5.1 Challenges with security proofs for SSH . . . . . . . . . . . . . . . . . . . . . . . 15
5.2 Server-only-authentication mode . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
5.3 Mutual authentication mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
6 Composition theorem for multi-ciphersuite security
20
6.1 Single ciphersuite security with auxiliary oracle . . . . . . . . . . . . . . . . . . . 21
6.2 Multi-ciphersuite composition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
7 SSH is multi-ciphersuite secure
23
7.1 Proof of Precondition 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
7.2 Proof of Precondition 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
7.3 Security of SSH with auxiliary oracle . . . . . . . . . . . . . . . . . . . . . . . . . 25
7.4 Final result: Multi-ciphersuite SSH . . . . . . . . . . . . . . . . . . . . . . . . . . 27
8 TLS is not multi-ciphersuite secure
28
8.1 Attack of Mavrogiannopoulos et al. . . . . . . . . . . . . . . . . . . . . . . . . . . 28
8.2 The attack in our framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
9 Discussion
29
A Protocol description for SSH signed-Diﬃe–Hellman ciphersuite
33
A.1 Negotiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
A.2 Signed-DH sub-protocol—all authentication modes . . . . . . . . . . . . . . . . . 33
A.3 Sub-protocol—no client authentication . . . . . . . . . . . . . . . . . . . . . . . . 34
A.4 Sub-protocol—password client authentication . . . . . . . . . . . . . . . . . . . . 34
A.5 Sub-protocol—public-key client authentication . . . . . . . . . . . . . . . . . . . 35
2
1
Introduction
Communication on the Internet is protected by a variety of cryptographic protocols: while the
Transport Layer Security (TLS) protocol (also known as the Secure Sockets Layer (SSL) protocol)
secures web communication, as well as e-mail transfer and many other network protocols, the
Secure Shell (SSH) protocol1 provides secure remote login and rudimentary virtual private
network (VPN) access. It is of paramount importance to have strong cryptographic assurances
of these protocols.
These and other real-world protocols tend to be far more complex than protocols typically
studied in the academic literature. These protocols include both key exchange and secure channel
communication, support negotiation of many combinations of cryptographic algorithms and a
variety of authentication modes, and have additional functionality such as renegotiation and
error reporting. All of these can aﬀect the practical and theoretical security of the protocol.
At a high level, the parties run a cryptographic protocol to establish a secure channel, then
communicate arbitrary application data over that channel. More precisely, execution begins with
a channel establishment phase, in which parties negotiate which set of cryptographic parameters
they intend to use, establish a shared session key, use long-term keys for entity authentication
(either server-only or mutual), and send key conﬁrmation messages. This is followed by the
communication of application data over a secure channel which provides conﬁdentiality and
integrity using the session key from the channel establishment phase. The secure channel is
called the binary packet protocol in SSH. A complicating factor for SSH (as well as TLS) is that
some portions of the channel establishment phase take place in plaintext, and other portions
are sent over the secure channel. The overlap between the channel establishment phase and the
secure channel can cause complications in the analysis of these protocols.
For precision, we will use the following terminology:
• plaintext channel : communication that is not sent via authenticated encryption using the
session key;
• auth-enc channel : communication that is sent via authenticated encryption using the
session key;
• handshake phase: communication of protocol messages to perform entity authentication
and establish a secure channel, consisting of a negotiation phase and a sub-protocol (or
ciphersuite) phase;2
• application data phase: communication of application data using the auth-enc channel.
Figure 1 shows a simpliﬁed version of the SSH protocol with mutual authentication; details
appear in Section 4.
Provable security of real-world protocols. Standard authenticated key exchange (AKE)
models [7, 12, 27] are not appropriate for modelling protocols such as SSH and TLS for several
reasons. First, the auth-enc channel for secure application data communication is quite important
but is not included in AKE deﬁnitions. Moreover, even the handshake phase cannot be analyzed
as an AKE protocol: AKE security requires indistinguishability of session keys, but in both
SSH and TLS, in the handshake phase, a key conﬁrmation message is sent over the auth-enc
channel which allows an attacker to distinguish a random session key from the real one. Some
work has shown that truncated forms of the SSH [36] and TLS [22, 29] handshakes are secure
AKE protocols, but this does not necessarily imply security of the entire protocol.
It has also been observed that standard notions of authenticated encryption are not quite
appropriate for the auth-enc channels in SSH or TLS either. The security property that the
1In this paper, we refer exclusively to SSHv2 [39, 37, 40].
2We note that ciphersuite happens to be a TLS-centric term. SSH does not deﬁne a single ciphersuite, instead
separately negotiating key exchange, encryption, and MAC algorithms. For consistency, in the case of SSH we
refer to a single combination of these algorithms as a ciphersuite.
3
Initiator
Responder
KEXINIT: nonce, ciphersuites
KEXREPLY: nonce, ciphersuites
KEXDH INIT: gx
KEXDH REPLY: gy, pkresp, sig
accept server
authentication
AUTHREQUEST: Enc(pkinit or pw or none)
AUTHOK†: Enc(pkinit)
AUTHREQUEST†: Enc(pkinit, sig)
e
s
a
h
p
e
k
a
h
s
d
n
a
h
accept client
authentication
AUTHSUCCESS
Enc(application data)
l
e
n
n
a
h
c
t
x
e
t
n
i
a
l
p
l
e
n
n
a
h
c
c
n
e
-
h
t
u
a
n
o
i
t
a
i
t
o
g
e
n
)
e
t
i
u
s
r
e
h
p
i
c
(
l
o
c
o
t
o
r
p
-
b
u
s
application
data phase
Figure 1: Overview of SSH protocol ﬂow.
† denotes messages omitted for server-only/password auth.
auth-enc channel in SSH aims to meet is buﬀered stateful authenticated encryption [6, 1, 31],
which includes conﬁdentiality and integrity of ciphertexts and protection against reordering,
along with details associated with byte-wise processing of received data.
Analysis of TLS proceeded in a similarly separate manner, until, in 2012, the ﬁrst security
proof of a full, unmodiﬁed TLS ciphersuite appeared. Jager et al. [20] showed that (mutually