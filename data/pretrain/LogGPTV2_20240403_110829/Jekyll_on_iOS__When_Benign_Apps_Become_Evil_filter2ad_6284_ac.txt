function in the same module leaked by our Jekyll app
using the vulnerabilities described before. Finally, we
note that trampolines for dlopen and dlsym can be
found in many essential frameworks, such as UIKit and
CoreGraphics.
3.4
Introducing New Execution Paths via Control-
Flow Hijacking
A key design of our attack scheme is to dynamically in-
troduce new execution paths that do not exist in the orig-
inal app to perform the malicious operations. In order
to achieve this, we plant a vulnerability in the Jekyll app,
through which we can corrupt data on the stack and over-
write a function return address (or a function pointer).
When the function returns, instead of returning to the
original call site, the execution will proceed to a program
point that is speciﬁed by the altered return address on the
stack. Although iOS employs the Stack-Smashing Pro-
tector method to detect stack-based overﬂows, we can
accurately overwrite the function return address without
breaking the stack canary.
void vulnerableFoo(int i, int j){
int buf[16];
...
if(fakeChecks(i)) ;
buf[i]= j; //overwrite return address
...
return;
}
Figure 6: Control Flow Hijacking Vulnerability
Speciﬁcally, we use an out-of-bounds write vulnera-
bility as shown in Figure 6 to hijack the control ﬂow. In
this case, both i and j are controlled by the attacker.
Variable i is used to index a local integer array. Since
the offset from the starting address of this local array to
the memory slot for the function’s return address is ﬁxed,
a carefully crafted i can overwrite the return address via
an array element assignment without breaking the stack
canary [10]. We can also add fake boundary checks on
i in the function to prevent the vulnerability from be-
ing easily detected. The new return address stored in j
points to a gadget that shifts the stack frame to a memory
region storing data supplied by the attacker. After that,
the new stack layout will chain the gadgets together. By
using the existing code in the app, we can defeat DEP and
code signing. Since our method for introducing new exe-
cution paths is essentially return-oriented-programming,
interested readers are referred to [15] and [33] for the
details of ROP on the ARM platform.
3.5 Hiding Gadgets
In traditional ROP attack scenarios, attackers have to
search for usable gadgets from existing binary or li-
braries using the Galileo algorithm [44]. However, in
our case, the attacker is also the app developer, who can
freely construct and hide all necessary gadgets, either at
the basic block or function level. This advantage makes
our attacks signiﬁcantly less difﬁcult and more practical
to launch than ROP attacks.
For the common functional units (such as converting a
char* to NSString and invoking a function pointer),
which are useful for both malicious and legit operations
of the app, we implement them in individual functions.
As a result, we can simply reuse such functions in our
attack based on the return-to-libc like exploitation tech-
nique. For the special gadgets that are not easily found
in existing code, we manually construct them by using
ARM inline assembly code [32] and hide them in infea-
sible branches. In our Jekyll app, we have planted and
hidden all gadgets that are required by traditional ROP
attacks [15], such as memory operations, data processing
(i.e., data moving among registers and arithmetic/logical
operations), and indirect function calls.
To create the infeasible branches, we use the opaque
constant technique [34]. For instance, in Figure 7 we
set a variable to a non-zero constant value derived from
a complicated calculation, and perform a fake check on
that variable. Since the compiler cannot statically deter-
mine that the variable holds a constant value, it will gen-
erate code for both branches. As a result, we can reliably
embed the gadgets using similar techniques.
Finally, we will conclude this section with a concrete
example of our ROP attack. Figure 8 shows the original
source code for dialing attack (see Section 4.2), which
loads a framework into process memory, locates a pri-
vate API called CTCallDial in the framework, and ﬁ-
USENIX Association  
22nd USENIX Security Symposium  565
7
int i = Opaque_constant_calculation();
if(i == 0)
{
//hide a gadget in this branch
asm volatile(
"pop {r2}"
"bx r2"
);
}
Figure 7: Hide an indirect call gadget
initial text and other content of a tweet, the public API
called by the app will present a tweet view to the user,
and let the user decide whether to post it or not, as shown
in Figure 9. However, we ﬁnd that the tweet view in Fig-
ure 9 can be bypassed by using private APIs, i.e., our
app can post tweets without the user’s knowledge. Next,
we describe how we discover the private APIs needed for
achieving this goal.
nally invokes that function. Accomplishing the equiv-
alent functionality through the ROP technique is very
easy, because many function level gadgets are available
in our Jekyll app. Speciﬁcally, we can ﬁnd trampolines
for dlopen and dlsym in public frameworks (see Sec-
tion 3.3), and can also reuse existing code in our Jekyll
app to implement the indirect call and the conversion
from char* to NSString (the argument type of the
function CTCallDial is NSString).
1. void* h = dlopen("CoreTelephony", 1);
2. void (*CTCallDial)(NSString*)=dlsym(h, "CTC-
allDial");
3. CTCallDial(@"111-222-3333");
Figure 8: Attack code for dialing
In addition to these function level gadgets, we also
utilize a few simple basic block level gadgets that are
used to prepare and pass function arguments, recover the
stack pointer, and transfer the control back to the nor-
mal execution. For example, the ﬁrst four arguments of a
function on iOS are passed through the registers R0-R3.
Before jumping into the target function, we can use a
gadget like pop{r0,r1,pc} to set up the function’s
parameters. Such block level gadgets are ubiquitous in
the existing code.
4 Malicious Operations
In this section, we introduce the malicious operations
we can perform using Jekyll apps. We present how to
post tweets and send email and SMS without the user’s
knowledge in Section 4.1, describe more private APIs
based attacks in Section 4.2, and demonstrate Jekyll
app’s ability to exploit kernel vulnerabilities and attack
other apps in Section 4.3 and Section 4.4.
4.1 Under the Hood: Posting Tweets and Sending
Email and SMS
Since iOS 5.0, third-party apps are allowed to send Twit-
ter requests on behalf of the user, by using the public
APIs in a framework called Twitter. After setting the
Figure 9: The default UI for a tweet view
Our intuition is that if we know the event handling
function that is responsible for the “Send” button click
event, our app can directly invoke that function to post
the tweet, without the need to present the tweet view to
the user.
To do this, we created a simple app that uses the
Twitter framework to post tweets, and run the app in
the debug model. We developed a dynamic analysis tool
based on LLDB, a scriptable debugger in the iOS SDK,
to log the function invocation sequence after the “Send”
button is clicked. In the following, we will present some
details about our tool.
In Objective-C, all object method invocations are dis-
patched through a generic message handling function
called objc_msgSend. A method invocation expres-
sion in Objective-C like [object methodFoo:arg0]
will be converted into a C function call expression like
objc_msgSend(object, "methodFoo:", arg0).
Moreover, iOS follows the ARM standard calling con-
vention. The ﬁrst four arguments of a function are passed
through the registers R0-R3, and any additional argu-
ments are passed through the stack. For the C func-
tion expression above, the arguments will be passed as
follows: R0 stores object, R1 stores the starting ad-
dress of the method name (i.e.,“methodFoo:”), and R2
stores arg0.
Our dynamic analysis tool sets a conditional break-
point at the objc_msgSend function. When the break-
point is triggered after the user clicks the “Send” button,
the tool logs the call stack, gets the target method name
through the register R1, and retrieves the type informa-
tion of the target object and other arguments (stored in
the registers R0, R2 and R3 ) by inspecting their Class
structures (see Section 3.3).
566  22nd USENIX Security Symposium 
USENIX Association
8
for posting tweets.
According to the information in the log, we can
easily identify the relevant Objective-C classes and
For
private APIs
instance,
in iOS 6.x, we ﬁnd that a tweet
is composed
through the method “setStatus:” in a class called
SLTwitterStatus, and then is posted through the
method “sendStatus:completion:” in a class
called SLTwitterSession. Our Jekyll app will
dynamically load the Twitter framework, create in-
stances from these classes, and invoke private APIs to
post tweets without the user’s knowledge.
We also extended the idea to ﬁnd critical private APIs
for sending email and SMS. As in the case of posting
Tweets, third-party apps are able to set the initial text
and other content of an email or SMS, and present
the email or SMS view to the user.
In iOS 5.x, we
successfully implemented the code to send email and
SMS without the user’s knowledge. Speciﬁcally, we
ﬁnd that an email is ﬁrst composed by a method of the
class MessageWriter, and then is sent to a service
process via an inter-process communication (IPC)
interface
CPDistributedMessagingCenter.
Eventually, the service process will send the email out.
In the case of sending SMS, we ﬁnd that, the content
of an SMS is ﬁrst converted into an XPC message, and
the XPC message is subsequently passed to an XPC
service (another kind of IPC interfaces in iOS) named
com.apple.chatkit.clientcomposeserver.xpc.
By using such private APIs, our Jekyll app is able to
compose email and SMS objects, pass them to the
corresponding service processes, and automatically send
them without the user’s knowledge. An independent
study simultaneously reported how to send SMS in
this manner; interested readers are referred to [20] for
details.
However, in iOS 6, Apple introduced a new concept
called remote view to enhance the security of email and
SMS services. Speciﬁcally, a third-party app only passes
the initial content of an email or SMS to the correspond-
ing system services. These system service processes will
then generate the message view, and let the user make
further changes and ﬁnal decision. Since the message
view runs in a separate process, the third-party app is no
longer able to invoke the handler function for the “Send”
button click event.
4.2 Camera, Bluetooth, Device ID, and Dialing
The iOS developer community has accumulated exten-
sive knowledge of using private APIs and proposed many
attacks against jailbroken iOS devices. We integrated
some previously known attacks into our Jekyll app. Since
these attacks heavily use private APIs, any app that ex-
plicitly launches these attacks will most certainly be re-
jected by Apple. However, our Jekyll app can dynam-
ically load the private frameworks and hide the invoca-
tions to private APIs, and successfully passes the App
Review.
Next, we brieﬂy introduce the private APIs that we
utilized to achieve the following tasks without alerting
the users: take photos, switch on/off bluetooth, steal the
device identity information, and dial arbitrary numbers.
The operations in this subsection work in both iOS 5.x
and iOS 6.x.
• Abuse cameras. Our Jekyll app is able to stealthily
turn on the camera in iOS devices to record videos
without the user’s knowledge; this can be achieved
by creating and assembling the object instances of a
set of classes such as AVCaptureDeviceInput
and AVCaptureVideoDataOutput in the
AVFoundation framework. Jekyll app can also
extract every frame of a video stream and transfer
the images back to the server.
• Switch Bluetooth. By using the APIs in a private
framework BluetoothManager, our Jekyll app
can directly manipulate the Bluetooth device, such
as turning it on or off.
To obtain the de-
ad-
called
we
function
take
• Steal Device Identity.
identity
of
information,
a
private
vice
vantage
CTServerConnectionCopyMobileEquipmentInfo
in the CoreTelephony framework. This func-
tion can return the device’s the International Mobile
Station Equipment Identity (IMEI),
the Interna-
tional Mobile Subscriber Identity (IMSI), and the
Integrated Circuit Card Identity (ICCID).