Bonjour!
Bonjour is an Apple-designed technology that enables computers and devices
located on the same network to learn about services offered by other computers
and devices. It is designed such that any Bonjour-aware device can be plugged
into a TCP/IP network and it will pick an IP address and make other computers
on that network aware of the services it offers. Bonjour is sometimes referred to
as Rendezvous, Zero Confi guration, or Zeroconf. There is also wide-area Bonjour
that involves making Bonjour-like changes to a DNS server.
35
9955336633cc0022..iinndddd 3355 11//2255//0099 44::3399::4444 PPMM
36 Part I ■ Mac OS X Basics
The Internet Engineering Task Force (IETF) Zero Confi guration Networking
Working Group specifies three requirements for Zero Configuration
Networking, such as Bonjour provides.
■ Must be able to obtain an IP Address (even without a DHCP
server)
■ M ust be able to do name-to-address translation (even without a DNS
server)
■ Must be able to discover services on the network
Get an IP Address
The fi rst requirement is met via RFC 3927, Dynamic Confi guration of IPv4
Link-Local Addresses (or RFC 2496 for IPv6). The basic idea is to have a device
try to get an IP address in the range 169.254/16. The device selects an address
from this range randomly. It then tests whether that IP address is already
in use by issuing a series of Address Resolution Protocol (ARP) requests for
that IP address (Figure 2-1). If an ARP reply is received, the device selects
a new IP address randomly and begins again. Otherwise it has found its IP
address. There are some additional stipulations for the unusual case in which
other devices select this device’s IP address or a race condition occurs, but
the basic idea is simple enough. This RFC is the document that explains why
when your network is messed up, your computer gets an IP address in the
range 169.254/16!
Figure 2-1: A packet capture of a device trying to see whether any other device has the
address it chose
9955336633cc0022..iinndddd 3366 11//2255//0099 44::3399::4444 PPMM
Chapter 2 ■ Mac OS X Parlance 37
In fact, all Macs keep an entry in their routing table in case a device shows
up on this subnet.
$ netstat -rn | grep 169
169.254 link#4 UCS 0 0 en0
Set Up Name Translation
The second requirement is met by using Multicast DNS (mDNS). Multicast DNS
is, not surprisingly, similar to DNS. The mDNS protocol uses the same packet
format, name structure, and DNS record types as unicast DNS. The primary dif-
ference is that its queries are sent to all local hosts using multicast. By contrast,
DNS queries are sent to a specifi c, preconfi gured host, the name server.
Another difference is that DNS listens on UDP port 53, while mDNS lis-
tens on UDP port 5353. Multicast DNS requests use the multicast address
224.0.0.251. Any machine running Bonjour listens for these multicast requests,
and, if it knows the answer, it replies, usually to a multicast address. In this way,
machines on the local network can continuously update their cache without
making any requests.
This explains how devices can fi nd out the IP address of named devices, but
does not explain how these devices come up with their own names. For this, the
strategy is similar to how IP addresses are derived. The device chooses a name
that ends in .local, usually based on the hostname, but it could also be chosen
randomly. It then makes mDNS queries for any other machine with that name.
If it fi nds another device with that name, it chooses a different name; otherwise
it has found its name (Figure 2-2). Note that in this way, all mDNS names end
in the string .local. Many operating systems, including Mac OS X and Windows
(even without Bonjour installed) support mDNS names.
Figure 2-2: A packet capture showing mDNS name resolution.
9955336633cc0022..iinndddd 3377 11//2255//0099 44::3399::4444 PPMM
38 Part I ■ Mac OS X Basics
Service Discovery
The fi nal requirement of Zero Confi guration Networking is met by DNS Service
Discovery (DNS-SD). DNS Service Discovery uses the syntax from DNS SRV
records, but uses DNS PTR records so that multiple results can be returned if
more than one host offers a particular service. A client requests the PTR lookup
for the name “.” and receives a list of zero or more PTR
records of the form “..”. An example will help
clear this up.
Mac OS X comes with the dns-sd binary, which can be used to advertise
services and perform lookups for services. To look for available SSH servers
(Figure 2-3) on the local network, the following command can be issued, where
in this case the service is ssh and the domain is tcp.
$ dns-sd -B _ssh._tcp
Browsing for _ssh._tcp
Timestamp A/R Flags if Domain Service Type
Instance Name
9:13:46.475 Add 3 4 local. _ssh._tcp.
Charlie Miller’s Computer
9:13:46.475 Add 2 4 local. _ssh._tcp.
Dragos Ruiu’s MacBook Air
^C
In the packet structure, the packets look just like DNS queries except they
are on port 5353 and they are sent to a multicast address.
For another example, dns-sd can be run in one window looking for web pages,
and in another it can advertise the fact that a service is available.
$ dns-sd -B _http._tcp
Browsing for _http._tcp
Timestamp A/R Flags if Domain Service Type
Instance Name
9:52:51.203 Add 2 4 local. _http._tcp.
DVR 887A
This shows an existing HTTP service called DVR 887A already on the net-
work. This happens to be a TiVo. In another window, dns-sd can be used to
advertise a service:
$ dns-sd -R “Index” _http._tcp . 80 path=/index.html
Registering Service Index._http._tcp port 80 TXT path=/index.html
9:53:03.998 Got a reply for service Index._http._tcp.local.: Name now
registered and active
9955336633cc0022..iinndddd 3388 11//2255//0099 44::3399::4444 PPMM
Chapter 2 ■ Mac OS X Parlance 39
This command registers an HTTP service on port 80. Notice that the machine
doesn’t actually have such a service, but dns-sd is free to send the packets that
indicate that such a service exists.
The original dns-sd command sees this new service available and adds it.
9:53:04.250 Add 3 4 local. _http._tcp.
Index
You can see how quickly this information is propagated; it took .25 seconds
for the listener to add the new service after it was added. This is because the
new service, upon starting, mulitcasts its presence to everyone on the subnet.
The listener didn’t have to ask; it just had to be listening. This helps keep the
level of network traffi c for Bonjour to a minimum. If you kill the advertising
of the HTTP service from the second window by pressing Ctrl+C, the original
window sees it going away and removes it.
9:53:13.066 Rmv 1 4 local. _http._tcp.
Index
Figure 2-3: Packet capture for an SSH service query
9955336633cc0022..iinndddd 3399 11//2255//0099 44::3399::4444 PPMM
40 Part I ■ Mac OS X Basics
Bonjour
Some administrators perceive Bonjour as a security risk because it advertises
available services. This perception is a fallacy. Advertising services doesn’t make
the services any more or less vulnerable. An attacker could still actively probe
for services. If you really want to turn off Bonjour, you can use the following
command to disable it.
$ sudo launchctl unload -w
/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
If you are worried about the mDNSResponder service itself having a vulner-
ability, then this might be a smart command to run.
Another way to view Bonjour activity on the network is with Bonjour Browser
(www.tildesoft.com); see Figure 2-4.
Figure 2-4: Bonjour Browser shows all advertised services.
You can see some of the service names, such as _odisk, _tivo-videos, _http,
_ssh, and _workstation. o_disk is the remote disk sharing used by Mac OS X to
share out a DVD or CD-ROM drive.
Another way to interact with Bonjour is programmatically through Python.
There are Python bindings for all Zero Configuration settings from the
9955336633cc0022..iinndddd 4400 11//2255//0099 44::3399::4444 PPMM
Chapter 2 ■ Mac OS X Parlance 41
pyzeroconf package (sourceforge.net/projects/pyzeroconf). For example,
the following Python script performs the same actions as the dns-sd command
executed earlier.
import Zeroconf
class MyListener(object):
def removeService(self, server, type, name):
print “Service”, repr(name), “removed”
def addService(self, server, type, name):
print “Service”, repr(name), “added”
# Request more information about the service
try:
info = server.getServiceInfo(type, name)
print ‘Additional info:’, info
except:
pass
if __name__ == ‘__main__’:
server = Zeroconf.Zeroconf()
listener = MyListener()
browser = Zeroconf.ServiceBrowser(server, “_ssh._tcp.local.”,
listener)
Running this script gives the location of advertised SSH servers on this local
network.
$ python query.py
Service u”Charlie Miller’s Computer._ssh._tcp.local.” added
Additional info: service[Charlie Miller’s
Computer._ssh._tcp.local.,192.168.1.182:22,]
Service u’Dragos Ruiu\u2019s MacBook Air._ssh._tcp.local.’ added
mDNSResponder
Now that you understand how Bonjour works in practice, it may be useful to
look at the source code for mDNSResponder. This is the application responsible
for handling Bonjour on Mac OS X computers and is one of the only listening
services in Mac OS X out of the box. This application had the honor of pos-
sessing the fi rst out-of-the-box remote root in OS X (this vulnerability could
be activated across the Internet, even if the fi rewall confi g was turned on and
set to its most restrictive settings possible using the GUI). For these reasons, it
deserves a closer look.
9955336633cc0022..iinndddd 4411 11//2255//0099 44::3399::4455 PPMM
42 Part I ■ Mac OS X Basics
To get the source code, go to Apple’s CVS server.
$ export CVSROOT=:ext:PI:EMAIL:/cvs/apsl
$ export CVS_RSH=ssh
$ cvs co mDNSResponder
It will ask for a password. Use your Apple ID and password separated by a
colon, like id:pass. Take a look at the directory structure.
$ ls
CVS PrivateDNS.txt mDNSMacOS9 mDNSShared
Clients README.txt mDNSMacOSX mDNSVxWorks
LICENSE buildResults.xml mDNSPosix mDNSWindows
Makefile mDNSCore mDNSResponder.sln
There is a central location of code for all platforms (mDNSShared), as well
as platform-specifi c directories (such as mDNSMacOSX and mDNSWindows).
These platform-specifi c fi les contain information about the application’s low-
level needs, such as how to send and receive UDP packets or how to join a
multicast group. There is also a Visual Studio fi le for building in a Windows
environment and an Xcode project fi le that is invoked by the Makefi le. As this
is the fi rst time you’ve encountered the need to use Xcode, we’ll take a moment
to explain Xcode projects.
A Digression about Xcode
Xcode is Apple’s Integrated Development Environment (IDE). It is free to down-
load and comes on the Mac OS X installation DVD (although it is not installed by
default). It consists of a sophisticated GUI built on top of the GCC compiler.
You can open an Xcode project by double-clicking on it in Finder or by using
the Open command:
$ open mDNSMacOSX/mDNSResponder.xcodeproj
This command will bring up the main Xcode window; see Figure 2-5.
You can use this GUI to change the confi gurations, edit and view source fi les,
or even build the application. In this case, let’s make some changes to how the
project is built. We will make it easier to debug by adding symbols and removing
optimizations. Select Project ➢ Edit Project Settings. In the window that appears,
select the Build tab. This tab controls all the settings that are normally passed as
options to the compiler. In the search box, type debug. This will bring up all the
confi guration settings related to debugging. Change the optimization to O0, and
make sure the binary is not stripped and that debugging symbols are produced.
Make the necessary changes, as in Figure 2-6, and close the Xcode project.
9955336633cc0022..iinndddd 4422 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 43
Figure 2-5: The Xcode project for mDNSResponder
Figure 2-6: Changes to make a debug version of mDNSResponder
9955336633cc0022..iinndddd 4433 11//2255//0099 44::3399::4455 PPMM
44 Part I ■ Mac OS X Basics
Build the project by typing
SRCROOT=. make
or use the xcodebuild command-line interface:
$ xcodebuild install -target mDNSResponder
For the majority of projects, running xcodebuild without any arguments in
the same directory as the corresponding .xcodeproj fi le will build the project.
To start over, you can run the equivalent of “make clean”:
$ xcodebuild clean
When the project is built successfully, many libraries and binaries will be
produced, including mDNSMacOSX/usr/sbin/mDNSResponder. To run this,
make a copy of the real mDNSResponder and put the freshly built one on top of
the old one. Then kill the mDNSResponder process; a new one will be spawned
automatically.
$ sudo mv /usr/sbin/mDNSResponder /usr/sbin/mDNSResponder.bak
$ sudo cp mDNSMacOSX/usr/sbin/mDNSResponder /usr/sbin/
$ sudo chmod 555 /usr/sbin/mDNSResponder
$ sudo killall -9 mDNSResponder
Source Code
Due to the importance of this application, and to get a feeling for Apple
source code in general, we’ll now take a closer look at some of the source code
from the project. We’ll concentrate on the code that is shared for all the plat-
forms, located in mDNSCore. From a security perspective, it is important to
know where untrusted network data enters the application. This occurs in the
mDNSCoreReceive function from the fi le mDNS.c.
mDNSexport void mDNSCoreReceive(mDNS *const m, void *const pkt, const
mDNSu8 *const end,
const mDNSAddr *const srcaddr, const mDNSIPPort srcport, const
mDNSAddr *dstaddr, const mDNSIPPort dstport,
const mDNSInterfaceID InterfaceID)
{
mDNSInterfaceID ifid = InterfaceID;
DNSMessage *msg = (DNSMessage *)pkt;
const mDNSu8 StdQ = kDNSFlag0_QR_Query |
kDNSFlag0_OP_StdQuery;
const mDNSu8 StdR = kDNSFlag0_QR_Response |
9955336633cc0022..iinndddd 4444 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 45
kDNSFlag0_OP_StdQuery;
const mDNSu8 UpdR = kDNSFlag0_QR_Response | kDNSFlag0_OP_Update;
mDNSu8 QR_OP;
mDNSu8 *ptr = mDNSNULL;
mDNSBool TLS = (dstaddr == (mDNSAddr *)1); // For debug
logs: dstaddr = 0 means TCP; dstaddr = 1 means TLS
if (TLS) dstaddr = mDNSNULL;
…
if ((unsigned)(end - (mDNSu8 *)pkt) h.flags.b[0] & kDNSFlag0_QROP_Mask);
// Read the integer parts which are in IETF byte-order (MSB
first, LSB second)
ptr = (mDNSu8 *)&msg->h.numQuestions;
msg->h.numQuestions = (mDNSu16)((mDNSu16)ptr[0] h.numAnswers = (mDNSu16)((mDNSu16)ptr[2] h.numAuthorities = (mDNSu16)((mDNSu16)ptr[4] h.numAdditionals = (mDNSu16)((mDNSu16)ptr[6] PktNum++;
…
if (QR_OP == StdQ) mDNSCoreReceiveQuery (m, msg, end,
srcaddr, srcport, dstaddr, dstport, ifid);
else if (QR_OP == StdR) mDNSCoreReceiveResponse(m, msg, end,
srcaddr, srcport, dstaddr, dstport, ifid);
else if (QR_OP != UpdR)
{
LogMsg(“Unknown DNS packet type %02X%02X from
%#-15a:%-5d to %#-15a:%-5d on %p (ignored)”,
msg->h.flags.b[0], msg->h.flags.b[1], srcaddr,
mDNSVal16(srcport), dstaddr, mDNSVal16(dstport), InterfaceID);
}
// Packet reception often causes a change to the task list:
// 1. Inbound queries can cause us to need to send responses
9955336633cc0022..iinndddd 4455 11//2255//0099 44::3399::4455 PPMM