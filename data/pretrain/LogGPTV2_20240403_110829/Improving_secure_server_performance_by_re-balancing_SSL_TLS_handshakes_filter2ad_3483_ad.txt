the client eﬀectively adds to the cost of solving the puzzle,
but does not aﬀect an adversary since he can skip the CA-
RSA step and only work on the puzzle. However, as shown in
ﬁgure 5, the CA-RSA cost quickly becomes negligible com-
pared to client puzzle cost as the puzzle size increases. More
precisely, when the attack is not severe, and therefore the
puzzle size is small, the added cost to a legitimate client is
very small. But when the intensity of the attack increases,
and subsequently the puzzle size increases, the extra cost of
CA-RSA fades away.
Both the client puzzle and our CA-RSA mechanisms aim
at solving the problem of server overload in diﬀerent but
complementary ways:
• Puzzles slow DoS attacks by forcing attackers to per-
form some work before the server commits resources.
• CA-RSA reduces server load by outsourcing some of
the its computation to the clients, allowing the server
to accommodate more SSL requests.
In summary, the combination of client puzzles and CA-
RSA oﬀers an eﬀective countermeasure to server overload
and DoS/DDoS attacks.
5. RELATED WORK
Techniques for speeding up SSL transactions typically aim
to accelerate RSA decryptions and can be classiﬁed into two
categories: dedicated cryptographic hardware accelerators
and non-standard RSA decryption techniques.
5.1 Hardware Accelerators
SSL hardware accelerators are dedicated modular arith-
metic processing units aimed at speeding up RSA compu-
tations. One example of a hardware accelerator is the Son-
icWALL SSL-RX [23] which is claimed to achieve up to 4,400
RSA decryptions per second, and comes with a price tag of
around $14,000.
Accelerators range widely in both speed and price. They
also often give a smaller than expected increase in SSL
throughput. In [21], Coarfa, et al. analyze the performance
of SSL and conclude that hardware accelerators are not as
eﬀective as originally thought: : depending on the workload,
one might only achieve a factor of 2 speedup. Speciﬁcally,
when session re-use is high, resulting in few full SSL hand-
shakes, only a modest gain in SSL throughput is actually
achieved: approximately a factor of 2 speedup. Authors
suggest that, instead of purchasing a relatively expensive
cryptographic accelerator, a better choice would be to invest
in a faster CPU to better handle encryption of application
data during SSL sessions. This conclusion is inline with our
work that does not require any speciﬁc hardware but would
beneﬁt from a more powerful CPU.
Berson, et al.
[26] propose oﬀering cryptographic opera-
tions, such as modular exponentiations, as a network service.
A so-called cryptoserver would be equipped with a multi-
ple hardware accelerators and its services would be shared
amongst many clients. Although trust is a major concern in
this model, there are some application settings where the
cryptoserver might be in the same security perimeter as
its users (e.g., web servers). An example would be a cryp-
toserver supporting SSL for a group of secure web servers
that are all part of the same organization. A similar idea is
due to Mraz [22] where certain portions of the SSL protocol
– RSA processing and bulk encryption – are oﬄoaded to an
array of special-purpose (SSL handshake-optimized) servers.
5.2 RSA Speedup Techniques
Another approach to speeding up SSL handshakes in-
volves techniques for accelerating RSA decryptions without
the use of specialized hardware. We begin by describing the
seminal work by Shacham and Boneh which proposes three
methods for faster RSA decryptions [20, 27]. From an en-
cryptor’s (i.e., an SSL client’s) perspective, all three meth-
ods are backward compatible with standard RSA. Also, all
speedups discussed below are based on 1024-bit RSA and are
relative to the cost of performing plain RSA decryptions.
The ﬁrst technique is based on multi-factor RSA mod-
uli. Speciﬁcally, the RSA setting is that of multi-prime and
multi-power moduli, where n = pqr or n = p2q (instead of
the usual n = pq), and decryption is performed using CRT
and Hensel lifting [28], respectively. One can expect theo-
retical speedups of around 2.25 with n = pqr and 3.38 for
n = p2q. Experiments show real speedups to be around 1.73
and 2.3, respectively.
Similar to CA-RSA, the second method – rebalanced RSA
– shifts the workload to the encryptor.
It is a variant of
an earlier technique by Weiner [29]. Speciﬁcally, d is cho-
sen to be close to n such that both d mod (p − 1) and d
mod (q − 1) are small integers. The resulting public expo-
nent e also becomes close to n, which is much larger than
typical values (i.e., e = 3, 17, or 65537). It is in fact so large
that Microsoft Internet Explorer (IE) cannot accept it; IE
allots a maximum of 32 bits for the public exponent e. Re-
balanced RSA oﬀers the theoretical speedup of 3.6 but the
actual speedup is 3.2.
The third technique – batch RSA – is based on Fiat’s
Batch RSA which, in turn, relies on simultaneous exponen-
tiations [30]. This technique oﬀers the speedup factor of
2.5. Batch RSA uses a batching parameter b that deﬁnes
the number of ciphertexts needed in order to batch-decrypt.
(Typically, b is set to 4 for optimal performance.) Each SSL
server needs b RSA public key certiﬁcates, each with iden-
tical modulus but diﬀerent public and private keys. When
it receives b pending SSL handshake requests, each based
upon one of the certiﬁcates, the server takes advantage of
the batching technique and performs b decryptions in less
time than if it executed them sequentially. A heavily loaded
web server using a round-robin strategy when sending certiﬁ-
cates to clients would incur minimal latency before receiving
4 SSL handshake requests with distinct certiﬁcates.
We now mention one other technique for speeding up RSA
computations.
In [31], Lim and Lee discuss using RSA
precomputations in order to speed up modular exponen-
tiation. A tradeoﬀ is made between storage space (com-
mitted to precomputed values) and computation time, with
more pre-computations resulting in more eﬃcient exponenti-
ations. This technique outperforms other modular exponen-
tiation algorithms such as Square-and-Multiply and BGMW
methods [8].
5.3 Elliptic Curve Cryptography
Elliptic Curve Cryptography (ECC) has been gaining at-
tention as an attractive alternative to more traditional public-
key cryptosystems. ECC oﬀers certain advantages, notably,
it can provide an equivalent level of security as other public
key methods with smaller key sizes and faster computation.
Currently, one of the main reasons hindering wider accep-
tance of ECC is the existence of multiple patents.
In [32] Gupta, et al. analyze achievable performance gains
when using ECC to speed up SSL. Their results show that
the performance gain of ECC over RSA increases for larger
key sizes.
In comparison with currently common 1024-bit
RSA setting, they measure a speedup factor of the server
RSA decryption time of 2.4 when using 160-bit ECC keys
which oﬀers equivalent level of security. Since our scheme
provides a performance gain of about 11 compared to the
regular RSA setting,
it would outperform ECC’s perfor-
mance by a ratio of 4. In order words, ECC beneﬁts, such
as short keys, do not help to solve our problem of server
overload.
6. CONCLUSION
We proposed a variation of Server-Aided RSA for re-balancing
RSA-based client/server handshakes, speciﬁcally targeting
SSL/TLS. Clients are required to perform “useful” work,
thereby freeing up the server’s resources and allowing it to
perform commensurately less work, thus resulting in better
throughput. We stress that our approach is not an alterna-
tive, but a supplement, to client puzzles in defense against
DoS and DDoS attacks. Experimental results demonstrate
that our Client-Aided RSA solution achieves substantial per-
formance improvements over the basic RSA (with CRT) de-
cryption algorithm, namely speedups of between 11 and 19,
depending on the RSA key size. A secure web server achiev-
ing software-speedups of one order in magnitude becomes
competitive with hardware-accelerated SSL servers.

International Conference on Information Security and
Cryptology, pp. 33–45, 1998.
[17] J. Merkle, “Multi-round passive attacks on
server-aided RSA protocols,” Proceedings of the 7th
ACM conference on Computer end Communications
security, pp. 102–107, 2000.
[18] P. Nguyen and I. Shparlinski, “On the insecurity of a
server-aided RSA protocol,” Proceedings of Asiacrypt
’01, vol. 2248, pp. 21–35, 2001.
[19] A. K. Lenstra and E. R. Verheul, “Selecting
cryptographic key sizes,” Journal of Cryptology: the
journal of the International Association for
Cryptologic Research, vol. 14, no. 4, pp. 255–293, 2001.
[20] H. Shacham and D. Boneh, “Improving SSL
Handshake Performance via Batching,” Proceedings of
RSA 2001, vol. 2020, pp. 28–43, 2001.
[21] C. Coarfa, P. Druschel and D. S. Wallach,
“Performance Analysis of TLS Web Servers,” 9th
Network and Systems Security Symposium, pp.
553–558, 2002.
[22] R. Mraz, “Secure Blue: An Architecture for a High
Volume SSL Internet Server,” 17th Annual Computer
Security Applications Conference, 2001.
[23] SonicWALL, “SonicWALLE SSL-RX,”
http://www.sonicwall.com/products/sslrx.html.
[24] A. Juels and J. Brainard, “Client Puzzles: A
Cryptographic Defense Against Connection
Depletion,” 5th Network and Systems Security
Symposium, pp. 151–165, 1999.
[25] D. Dean and A. Stubbleﬁeld, “Using Client Puzzles to
Protect TLS,” Proceedings of the USENIX Security
Symposium, 2001.
[26] T. Berson, D. Dean, M. Franklin, D. Smetters, and
M. Spreitzer, “Cryptography as a Network Service,”
7th Network and Systems Security Symposium, 2001.
[27] D. Boneh and H. Shacham, “Fast Variants of RSA,”
CryptoBytes (RSA Laboratories), vol. 5, pp. 1–9, 2002.
[28] H. Cohen, “A Course in Computational Algebraic
Number Theory,” Graduate Texts in Mathematics,
vol. 138, pp. 6, 1996.
[29] M. Weiner, “Cryptanalysis of Short RSA Secret
Exponents,” IEEE Transactions on Information
Theory, vol. 36(3), pp. 553–558, 1990.
[30] A. Fiat, “Batch RSA,” Proceedings of Crypto ’89, pp.
175–185, 1989.
[31] C. H. Lim and P. J. Lee, “More Flexible
Exponentiation with Precomputation,” Advances in
Cryptology - CRYPTO ’94, pp. 95–107, 1994.
[32] V. Gupta and D. Stebila and S. Fung, “Speeding Up
Secure Web Transactions Using Elliptic Curve
Cryptgraphy,” 11th Network and Systems Security
Symposium, pp. 231–239, 2004.
7. ACKNOWLEDGMENTS
The authors would like to thank the ASIACCS anony-
mous referees for their reviews. We are also grateful towards
Dough Whiting and David Wagner for useful discussions,
and Michael Sirivianos for his technical contributions.
8. REFERENCES
[1] T. Matsumoto, K. Kato, and H. Imai, “Speeding up
Secret Computations with Insecure Auxiliary
Devices,” Proceedings of Crypto ’88, pp. 497–506,
1988.
[2] Private communication, “Private communication with
D. Wagner,” 2005.
[3] Network Working Group, “RFC 2246 - The TLS
Protocol Version 1.0,” Internet RFC/STD/FYI/BCP
Archives, 1999,
http://www.faqs.org/rfcs/rfc2246.html.
[4] BEA WebLogic, “BEA WebLogic Server Frequently
Asked Questions,” http:
//e-docs.bea.com/wls/docs60/faq/security.html.
[5] R. L. Rivest, A. Shamir, and L. M. Adleman, “A
Method for Obtaining Digital Signatures and
Public-Key Cryptosystems,” Communications of the
ACM, vol. 21, pp. 120–126, 1978.
[6] D. Boneh and G. Durfee, “Cryptanalysis of RSA with
Private Key d Less than n0.292,” IEEE Transactions
on Information Theory, vol. 46, pp. 1339–1349, 2000.
[7] J. Quisquater and C. Couvreur, “Fast decipherment
algorithm for RSA public-key cryptosystem,”
Electronic Letters, vol. 18, pp. 1905–907, 1982.
[8] A. J. Menezes, P. C. V. Oorschot, and S. A. Vanstone,
“Handbook of Applied Cryptography,” The CRC
Press series on discrete mathematics and its
applications, 1997.
[9] B. Pﬁtzmann and M. Waidner, “Attacks on Protocols
for Server-Aided RSA Computations,” Proceedings of
Eurocrypt ’92, pp. 153–162, 1992.
[10] R. J. Anderson, “Attack on Server Assisted
Authentication Protocols,” Electronic Letters, vol. 28,
pp. 1473, 1992.
[11] T. Matsumoto, H. Imai, C. S. Laih, and S. M. Yen,
“On veriﬁable implicit asking protocols for RSA
computation,” Advances in Cryptology - Proceedings
of Auscrypt ’92, vol. 718, pp. 296–307, 1992.
[12] C. H. Lim and P. J. Lee, “Security and performance of
server-aided RSA computation protocols,” Advances
in Cryptology - CRYPTO ’95, pp. 70–83, 1995.
[13] J. Burns and C. Mitchell, “Parameter Selection for
Server-Aided RSA Computation Schemes,” IEEE
Transactions on Computing, vol. 43, pp. 163–174,
1994.
[14] C. Laih and F. Tu, “Remarks on Parameter Selection
for Server-Aided Secret RSA Computation Schemes,”
International Workshops on Parallel Processing, pp.
167–173, 1999.
[15] P. B´eguin and J.J. Quisquater, “Fast Server-Aided
RSA Signatures Secure Against Active Attacks,”
Advances in Cryptology - CRYPTO ’95, pp. 57–69,
1995.
[16] S. Hong, J. Shin, and H. Lee-Kwang, “A new
approach to server-aided secret computation,”
