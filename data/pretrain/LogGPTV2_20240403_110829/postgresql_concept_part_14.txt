date_part
-----------
1971
(1 row)
Figure9.2: Errorgeneratedbyundefinedfunction/typecombination.
9.5. SUPPORTOPERATORS 113
Type Function Example Returns
Character length() length(col) lengthofcol
String character_length() character_length(col) lengthofcol,sameaslength()
octet_length() octet_length(col) lengthofcol,includingmultibyteoverhead
trim() trim(col) colwithleadingandtrailingspacesremoved
trim(BOTH…) trim(BOTH,col) sameastrim()
trim(LEADING…) trim(LEADINGcol) colwithleadingspacesremoved
trim(TRAILING…) trim(TRAILINGcol) colwithtrailingspacesremoved
trim(…FROM…) trim(strFROMcol) colwithleadingandtrailingstrremoved
rpad() rpad(col,len) colpaddedontherighttolencharacters
rpad() rpad(col,len,str) colpaddedontherightusingstr
lpad() lpad(col,len) colpaddedonthelefttolencharacters
lpad() lpad(col,len,str) colpaddedontheleftusingstr
upper() upper(col) coluppercased
lower() lower(col) collowercased
initcap() initcap(col) colwiththefirstlettercapitalized
strpos() strpos(col,str) positionofstrincol
position() position(strINcol) sameasstrpos()
substr() substr(col,pos) colstartingatpositionpos
substring(…FROM…) substring(colFROMpos) sameassubstr()
substr() substr(col,pos,len) colstartingatpositionposforlengthlen
substring(…FROM… substring(colFROMpos sameassubstr()
FOR…) FORlen)
translate() translate(col,from,to) colwithfromchangedtoto
to_number() to_number(col,mask) convertcoltoNUMERIC()basedonmask
to_date() to_date(col,mask) convertcoltoDATEbasedonmask
to_timestamp() to_timestamp(col,mask) convertcoltoTIMESTAMPbasedonmask
Number round() round(col) roundtoaninteger
round() round(col,len) NUMERIC()colroundedtolendecimalplaces
trunc() trunc(col) truncatetoaninteger
trunc() trunc(col,len) NUMERIC()coltruncatedtolendecimalplaces
abs() abs(col) absolutevalue
factorial() factorial(col) factorial
sqrt() sqrt(col) squareroot
cbrt() cbrt(col) cuberoot
exp() exp(col) exponential
ln() ln(col) naturallogarithm
log() log(log) base-10logarithm
to_char() to_char(col,mask) convertcoltoastringbasedonmask
Temporal date_part() date_part(units,col) unitspartofcol
extract(…FROM…) extract(unitsFROMcol) sameasdate_part()
date_trunc() date_trunc(units,col) colroundedtounits
isfinite() isfinite(col) BOOLEANindicatingwhethercolisavaliddate
now() now() TIMESTAMPrepresentingcurrentdateandtime
timeofday() timeofday() stringshowingdate/timeinUnixformat
overlaps() overlaps(c1,c2,c3,c4) BOOLEANindicatingwhethercol’soverlapintime
to_char() to_char(col,mask) convertcoltostringbasedonmask
Geometric seepsql’s\dfforalistofgeometricfunctions
Network broadcast() broadcast(col) broadcastaddressofcol
host() host(col) hostaddressofcol
netmask() netmask(col) netmaskofcol
masklen() masklen(col) masklengthofcol
network() network(col) networkaddressofcol
NULL nullif() nullif(col1,col2) returnNULLifcol1equalscol2,elsereturncol1
coalesce() coalesce(col1,col2,…) returnfirstnon-NULLargument
Table9.3: Commonfunctions
114 CHAPTER9. DATATYPES
Type Function Example Returns
Character || col1||col2 appendcol2ontotheendofcol1
String ˜ col˜pattern BOOLEAN,colmatchesregularexpressionpattern
!˜ col!˜pattern BOOLEAN,coldoesnotmatchregularexpressionpattern
˜* col˜*pattern sameas˜,butcase-insensitive
!˜* col!˜*pattern sameas!˜,butcase-insensitive
˜˜ col˜˜pattern BOOLEAN,colmatchesLIKEpattern
LIKE colLIKEpattern sameas˜˜
!˜˜ col!˜˜pattern BOOLEAN,coldoesnotmatchLIKEpattern
NOTLIKE colNOTLIKEpattern sameas!˜˜
Number ! !col factorial
+ col1+col2 addition
– col1–col2 subtraction
* col1*col2 multiplication
/ col1/col2 division
% col1%col2 remainder/modulo
ˆ col1ˆcol2 col1raisedtothepowerofcol2
Temporal + col1+col2 additionoftemporalvalues
– col1–col2 subtractionoftemporalvalues
(…)OVERLAPS (c1,c2)OVERLAPS BOOLEANindicatingcolsoverlapintime
(…) (c3,c4)
Geometric seepsql’s\doforalistofgeometricoperators
Network > col1>>col2 BOOLEANindicatingifcol1isasupernetofcol2
>>= col1>>=col2 BOOLEANindicatingifcol1isequalorasupernetofcol2
Table9.4: Commonoperators
9.6. SUPPORTVARIABLES 115
test=> SELECT CAST(’1/1/1992’ AS DATE) + CAST(’1/1/1993’ AS DATE);
ERROR: Unable to identify an operator ’+’ for types ’date’ and ’date’
You will have to retype this query using an explicit cast
test=> SELECT CAST(’1/1/1992’ AS DATE) + CAST(’1 year’ AS INTERVAL);
?column?
------------------------
1993-01-01 00:00:00-05
(1 row)
test=> SELECT CAST(’1/1/1992’ AS TIMESTAMP) + ’1 year’;
?column?
------------------------
1993-01-01 00:00:00-05
(1 row)
Figure9.3: Errorgeneratedbyundefinedoperator/typecombination
Variable Meaning
CURRENT_DATE currentdate
CURRENT_TIME currenttime
CURRENT_TIMESTAMP currentdateandtime
CURRENT_USER userconnectedtothedatabase
Table9.5: Commonvariables
Alldatatypessupportthestandardcomparisonoperators=,>,and<>. Notall
operator/typecombinationsaredefined,however. Forexample,ifyoutrytoaddtwoDATEvalues,
youwillgetanerror,asshowninthefirstqueryofFigure9.3.
9.6 Support Variables
SeveralvariablesaredefinedinPOSTGRESQL.ThesevariablesareshowninTable 9.5.
116 CHAPTER9. DATATYPES
test=> CREATE TABLE array_test (
test(> col1 INTEGER[5],
test(> col2 INTEGER[][],
test(> col3 INTEGER[2][2][]
test(> );
CREATE
Figure9.4: Creationofarraycolumns
9.7 Arrays
Arraysallowacolumntostoreseveralsimpledatavalues. Youcanstoreone-dimensionalarrays,
two-dimensionalarrays,orarrayswithanynumberofdimensions.
Youcreateanarraycolumninthesamewayasanordinarycolumn,exceptthatyouusebrackets
tospecifythedimensionsofthearray. Thenumberofdimensionsandsizeofeachdimensionare
fordocumentationpurposesonly. Valuesthatdonotmatchthedimensionsspecifiedatthetimeof
columncreationarenotrejected.
Figure9.4createsatablewithone-,two-,andthree-dimensionalINTEGERcolumns. Thefirst
andlastcolumnshavesizesspecified. Thefirstcolumnisaone-dimensionalarray,alsocalledalist
orvector. Valuesinsertedintothatcolumnhaveanappearancelike{3,10,9,32,24}or{20,8,9,1,4}.
That is, eachvalueisalistof integers,surroundedbycurlybraces. Thesecondcolumn, col2, is
atwo-dimensionalarray. Typicalvaluesforthiscolumnare{{2,9,3},{4,3,5}}or{{18,6},{32,5}}.
Noticethedoublebraces. Theouterbracesurroundstwoone-dimensionalarrays. Youcanthink
ofthisstructureasamatrix,withthefirstone-dimensionalarrayrepresentingthefirstrowofthe
array,andthesecondrepresentingthe secondrow of thearray. Commas separatetheindividual
elements as well as each pair of braces. The third column of the array_test table is a three-
dimensional array, holding values like {{{3,1},{1,9}},{{4,5},{8,2}}}. This three-dimensional
matrixismadeupoftwo2 2matrices. Arraysofanysizecanbeconstructed. (cid:0)
Figure 9.5 shows a query inserting values into array_test plus several queries selecting data
fromthistable. Bracketsareusedtoaccessindividualarrayelements.
Any data type can be used as an array. If you need to frequently access or update individual
elementsofthearray,useseparatecolumnsortablesratherthanarrays.
9.8 Large Objects (BLOBs)
POSTGRESQL cannot store values of more than several thousand bytes using the data types
discussed so far, nor can binary data be easily entered within single quotes. Instead, large
objects—also called Binary Large Objects or BLOBS—are used to store very large values and
binarydata.
9.8. LARGEOBJECTS(BLOBS) 117
test=> INSERT INTO array_test VALUES (
test(> ’{1,2,3,4,5}’,
test(> ’{{1,2},{3,4}}’,
test(> ’{{{1,2},{3,4}},{{5,6}, {7,8}}}’
test(> );
INSERT 52694 1
test=> SELECT * FROM array_test;
col1 | col2 | col3
-------------+---------------+-------------------------------
{1,2,3,4,5} | {{1,2},{3,4}} | {{{1,2},{3,4}},{{5,6},{7,8}}}
(1 row)
test=> SELECT col1[4] FROM array_test;
col1
------
4
(1 row)
test=> SELECT col2[2][1] FROM array_test;
col2
------
3
(1 row)
test=> SELECT col3[1][2][2] FROM array_test;
col3
------
4
(1 row)
Figure9.5: Usingarrays
118 CHAPTER9. DATATYPES
test=> CREATE TABLE fruit (name CHAR(30), image OID);
CREATE
test=> INSERT INTO fruit
test-> VALUES (’peach’, lo_import(’/usr/images/peach.jpg’));
INSERT 27111 1
test=> SELECT lo_export(fruit.image, ’/tmp/outimage.jpg’)
test-> FROM fruit
test-> WHERE name = ’peach’;
lo_export
-----------
1
(1 row)
test=> SELECT lo_unlink(fruit.image) FROM fruit;
lo_unlink
-----------
1
(1 row)
Figure9.6: Usinglargeimages
Largeobjectspermitstorageofanyoperatingsystemfile,includingimagesorlargetextfiles,
directlyintothedatabase. Youloadthefileintothedatabaseusinglo_import(),andretrieveitfrom
thedatabaseusinglo_export().
Figure 9.6 shows an example that stores a fruit name and image. The lo_import() function
stores /usr/images/peach.jpg into the database. The function call returns an OID that is used to
refertotheimportedlargeobject. Thisvalueisstoredinfruit.image. Thelo_export()functionuses
theOIDvaluetofindthelargeobjectstoredinthedatabase,thenplacestheimageintothenewfile
/tmp/outimage.jpg. The 1 returned by lo_export() indicatesa successfulexport. The lo_unlink()
functionremoveslargeobjects.
Fullpathnamesmustbeusedwithlargeobjectsbecausethedatabaseserverrunsinadifferent
directory than the psql client. Files are imported and exported by the postgres user, so postgres
musthavepermissiontoreadthefileforlo_import()anddirectorywritepermissionforlo_export().
Because largeobjects use the local filesystem,usersconnecting over a network cannot use lo_-
importorlo_export(). Theycan,however,usepsql’s\lo_importand\lo_exportcommands.
9.9. SUMMARY 119
9.9 Summary
Use care when choosing your data types. The many data types provide great flexibility. Wise
decisionsaboutcolumn namesandtypeswillgiveyour databasestructureandconsistency. The
appropriate choice also improves performance and allows efficient data storage. Do not choose
typeshastily—youwillregretitlater.
Chapter 10
Transactions and Locks
Uptothispoint,wehaveusedPOSTGRESQLasasophisticatedfilingcabinet. However,adatabase
ismuchmore. Itallowsuserstoviewandmodifyinformationsimultaneously. Ithelpsensuredata
integrity. Thischapterexploresthesedatabasecapabilities.
10.1 Transactions
Althoughyoumaynothaveheardthetermtransactionbefore,youhavealreadyusedtransactions.
Every SQL query is executed in a transaction. Transactions give databases an all-or-nothing
capabilitywhenmakingmodifications.
Forexample,supposethequeryUPDATE trans_test SET col = 3isintheprocessofmodifying
700 rows. After it has modified 200 rows, the user pressescontrol-C or hits the computer reset
button. Whentheuserlooksattrans_test,hewillseethatnoneoftherowshasbeenupdated.
Thisresultmightsurpriseyou. Because200ofthe700rowshadalreadyupdated,you might
suspect that 200 rows would show as modified. However, POSTGRESQL uses transactions to
guaranteethatqueriesareeitherfullycompletedorhavenoeffect.
Thisfeatureisvaluable. Supposeyouwereexecutingaquerytoadd$500toeveryone’ssalary
and accidentally kicked the power cord out of the wall during the update procedure. Without
transactions,thequerymayhaveupdatedhalfthesalaries,butnottherest. Itwouldbedifficultto
knowwheretheUPDATEstopped. Youwouldwonder,“Whichrowswereupdated,andwhichones
were not?” You cannot simply re-execute the query, because some people would have already
received their $500 increase. With transactions, you can check to see if any of the rows were
updated. Ifonewasupdated,thenallwereupdated. Ifnot,youcansimplyre-executethequery.
121
122 CHAPTER10. TRANSACTIONSANDLOCKS
test=> INSERT INTO trans_test VALUES (1);
INSERT 130057 1
Figure10.1: INSERTwithnoexplicittransaction
test=> BEGIN WORK;
BEGIN
test=> INSERT INTO trans_test VALUES (1);
INSERT 130058 1
test=> COMMIT WORK;
COMMIT
Figure10.2: INSERTusinganexplicittransaction
10.2 Multistatement Transactions
By default, each SQL query runs in its own transaction. Consider Figures 10.1 and 10.2, which
show two identical queries. Figure 10.1 is a typical INSERT query. Before POSTGRESQL starts
the INSERT, it begins a transaction. It performs the INSERT, then commits the transaction. This
step occurs automatically for any query with no explicit transaction. In Figure 10.2, the INSERT
usesanexplicittransaction. BEGIN WORK startsthetransaction,andCOMMITWORK commitsthe
transaction. TheonlydifferencebetweenthetwoqueriesisthatanimpliedBEGINWORK…COMMIT
WORKsurroundsthefirstINSERT.
Evenmore valuableisthe abilityto bindmultiplequeriesintoasingletransaction. In sucha
case,eitherallqueriesexecutetocompletionornonehasanyeffect. Asanexample,Figure 10.3
showstwoINSERTsinatransaction. PostgreSQLguaranteesthateitherbothINSERTssucceedor
neither.
As a more complicated example, suppose you have a table of bank account balances, and
you wish to transfer $100 from one account to another account. This operation is performed
using two queries: an UPDATEto subtract$100 from one account, and an UPDATEto add $100 to
anotheraccount. TheUPDATEsshouldeitherbothcompleteorhavenoeffect. IfthefirstUPDATE
completes but not the second, the $100 would disappear from the bank records. It would have
been subtracted from one account, but never added to the other account. Such errors are very
hard to find. Multistatement transactionsprevent them from happening. Figure 10.4 shows the
twoqueriesboundintoasingletransaction. ThetransactionforcesPOSTGRESQLtoperformthe
queriesasasingleoperation.
When you begina transactionwith BEGIN WORK, you do not haveto commit it usingCOMMIT
10.2. MULTISTATEMENTTRANSACTIONS 123
test=> BEGIN WORK;
BEGIN
test=> INSERT INTO trans_test VALUES (1);
INSERT 130059 1
test=> INSERT INTO trans_test VALUES (2);
INSERT 130060 1
test=> COMMIT WORK;
COMMIT
Figure10.3: TwoINSERTsinasingletransaction
test=> BEGIN WORK;
BEGIN
test=> UPDATE bankacct SET balance = balance - 100 WHERE acctno = ’82021’;
UPDATE 1
test=> UPDATE bankacct SET balance = balance + 100 WHERE acctno = ’96814’;
UPDATE 1
test=> COMMIT WORK;
COMMIT
Figure10.4: Multistatementtransaction
124 CHAPTER10. TRANSACTIONSANDLOCKS
test=> INSERT INTO rollback_test VALUES (1);
INSERT 19369 1
test=> BEGIN WORK;
BEGIN