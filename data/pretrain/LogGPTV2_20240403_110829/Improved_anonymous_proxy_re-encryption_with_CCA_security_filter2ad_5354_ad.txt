• If e(g, C5) (cid:7)= e(C1, H3(C1, C2, C3, C4)), C outputs ⊥.
• If the set {i → j, (rki→j , query)} is null, C gener-
ates a re-encryption key rki→ as in OReKeyGen, and adds
(rki→, query = 0) to the key list; otherwise, C selects
rki→j randomly from the set {i → j, (rki→j, query)}.
• C applies the algorithm ReEnc by taking input C and
rki→j, and outputs C(cid:3) = (C(cid:3)
1, C(cid:3)
2, C(cid:3)
3).
ODec(pki, C): Given pki and C, C does:
• If i (cid:7)= J, C applies the algorithm Dec by taking input
the private key ai and the ciphertext C, and returns
the output.
• If i = J and C is a second level ciphertext, i.e., C =
?
(C1, C2, C3, C4, C5), C veriﬁes e(g, C5)
= e(C1, H3(C1,
If it does not hold, C outputs ⊥; else
C2, C3, C4)).
C searches OH1 for the tuple (m, R, r), where r =
H1(m, R) and OF1 , such that C1 = gr and C3 = m
If such tuple exists, C returns m; else returns ⊥.
(cid:4)
F1(R).
1, C(cid:3)
2, C(cid:3)
• If i = J and C is a ﬁrst level ciphertext, i.e., C(cid:3) =
3), C searches OH3 for the tuple (Γ, R(cid:3), r(cid:3)),
(C(cid:3)
where r(cid:3) = H3(Γ, R(cid:3)), and OF2 , such that C(cid:3)
F2(R(cid:3)).
Then, C parses Γ as T1, T2, T3, T4, rk2, rk3, rk4, and searches
OH1 for the tuple (m, R, r), where r = H1(m, R), and
OF1 , such that T1 = gr and T3 = m
F1(R). If such
tuple exists, C returns m; else returns ⊥.
3 = Γ
(cid:4)
(cid:4)
Challenge: Once A decides that Phase 1 is ﬁnished, it
If j∗ (cid:7)= J, C aborts;
outputs (i∗, j∗), where i∗, j∗ ∈ Uh.
otherwise C has rk∗ = (rk∗
4, rk∗
(H0(pki)−ski · pkH4(s·ski)
3, rk∗
5, rk∗
1, rk∗
2, rk∗
6):
J
, gH4(s·ski)gyc, gy, gw,
J w, e(pkJ , gy)w)
Qa2
C adds (rk∗, query = 1) to the set of {(rk∗, query)}. C selects
R← {0, 1}, and delivers rk∗ to A if λ = 0, or a random key
λ
from re-encryption key space if λ = 1.
5 = e(g, g)x2ywa2
Note that if Q = e(g, g)x2y, rk∗ is a valid re-encryption key
J = e(gaJ x, gaJ x)yw =
for (i∗, j∗) since rk∗
e(pkJ , pkJ )yw.
Phase 2: C proceeds the game as that in the Phase 1 by
following the constraints speciﬁed in the anonymous game.
Guess: Finally, A returns a guess λ(cid:3) ∈ {0, 1}. If λ(cid:3) = λ, C
outputs Q = e(g, g)x2y; C returns Q (cid:7)= e(g, g)x2y.
1, rk∗
2, rk∗
This completes the simulation. Note rk∗
3 are dis-
tributed uniformly and independently because of indepen-
If Q = e(g, g)x2y
dent and random pkj , H4(sski) and c.
(meaning rki∗→j∗ is a valid re-encryption key of (i∗, j∗)), A
will output λ(cid:3) = λ with the probability of 1
2 +μ; if Q is a ran-
dom element in GT independent from e(g, g)x2y, A will out-
put λ(cid:3) = λ with the probability of 1
2 since the challenged re-
encryption key reveals no information about (i∗, j∗). Hence,
?
= e(g, g)x2y with
the probability of C’s correctly guessing Q
2 + μ
2 + μ
the instance of (g, e, gx, gy, Q) is 1
2 ) ≥ 1
2n ,
1
because the probability of C proceeding the game is
|Uh| .
Therefore, if A can break the anonymous game with a prob-
ability of 1
2 + μ, we can solve the SDBDH problem at least
with a probability of 1
4. PERFORMANCE EVALUATION
|Uh| + 1
2 + μ
2n .
2 ( 1
We implement the proposed PRE scheme co-operating with
Amazon Web Services (AWS) [1], an Infrastructure-as-a-
Service (IaaS) cloud platform.
In particularly, we deploy
the proxy re-encryption as a service in Amazon EC2, provide
simple API for application integration, and adopt Amazon
S3 as storage server for ciphertexts. As a reference applica-
tion, we develop a secure email forwarding application based
on it and demonstrate its eﬃciency and feasibility.
4.1 Implementation
We implement the PRE in C language based on the Pairing-
based Cryptography (PBC) library [4]. We instantiate the
random oracles with OpenSSL/SHA256 and the convert-
ing function element_from_hash of PBC, and let each data
block with length of 64 Bytes, e.g. (cid:4)2 = 512. The bilinear
map is instantiated with two diﬀerent parameters:
• a.param: The group order is 160 bits long, and the
order of the base ﬁeld is 512 bits long. It oﬀers a level
of security that is equivalent to 1024-bit DLOG. The
operations is more eﬃcient compared with other kinds
of parameters [4].
• e.param: The group order is 160 bits long, and the
order of the base ﬁeld is 1024 bits long. It also oﬀers a
level of security equivalent to 1024-bit DLOG, but the
speciﬁed pairing is not as eﬃcient as that of a.param.
4.2 Asymptotic Complexity Comparison
Table 1 describes the asymptotic complexity for the pro-
posed PRE scheme, and summarizes the security properties
with the three anonymous schemes in the state of the art.
We can see that the scheme [5] achieves CPA security and
the scheme [19] achieves CCA security, both in the random
oracle model. However, both schemes cannot achieve the
anonymity as we deﬁned. While the scheme [20] is proved
to achieve the anonymity property as their deﬁned, we ﬁnd
that their scheme does satisfy the anonymity notion we de-
ﬁned in the present paper. Unfortunately, [15] proved that
the scheme [20] cannot attain CCA security as they claimed
due to the attack [15]. In contrast, the proposed scheme in
this paper not only achieves CCA security in the random or-
acle model, but also attains the desired anonymity property.
4.3 Efﬁciency of PRE Operations
To evaluate the eﬃciency of algorithms in the proposed
PRE scheme, we run experiments on a machine with Linux
255Scheme [5]
Scheme [19]
Scheme [20]
Scheme in this Paper
Property
Security Model
Semantic Security
Satisfying our
anonymity
Bilinear Map?
Assumption
Complexity
ReKeyGen
Enc
ReEnc
Dec
RO
CPA
No
RO
CCA
No
[CCA]∗
Yes
Yes
Yes
DBDH,
5-EDBDH, DDH
Decision Linear CCA-secury SKE CCA-secure SKE
No
DDH,
Strongly unforgeable SIG
RO
CCA
Yes
Yes
DBDH
1P +4E
3E
2P+2E
1P + 1E
2E+ 1Enc
4E+ 1Enc
2E
3E + 1DEC
11E
2P +8E
1P+ 5E+ 1ENC+ 1SIGN 1P +4E
3P +2E
5P + 6E + 1VER
5P+ 2E+ 1DEC +1VER
3P +1E
(2nd level ciphertext)
Dec
1E
(1st level ciphertext)
2E+ 1DEC
7E+ 1 DEC
3P +4E
Table 1: Comparison between prior schemes and ours, where SKE denotes a one time symmetric encryption
scheme, SIG denotes a one time signature scheme, P denotes a pairing operation, E denotes an exponentiation
operation, ENC denotes an encryption operation of SKE, DEC denotes an decryption operation of SKE, SIGN
denotes a signing operation of SIG, and VER denotes a veriﬁcation operation of SIG. ∗ The scheme [20] is
not CCA secure shown in [15] (CT-RSA’13).
OS, Intel Duo CPU E7500 2.93GHz and 2GB RAM. We
average the execution time by running each experiment 20
times and show them in Table 4.3. We can see that ReKeyGen
is most costly compared with other algorithms. Fortunately,
this operation is executed infrequently. We observe that the
performance of the PRE scheme is quite acceptable in prac-
tice with the bilinear map speciﬁed by a.param, since the
operations only require around 10-14 milliseconds except the
re-encryption key generation.
Operation
ReKeyGen
Enc
ReEnc
Dec(2nd level ciphertext)
Dec(1st level ciphertext)
a.param (ms)
e.param (ms)
20.17
10.69
11.86
10.79
12.37
56.89
30.22
35.69
32.47
39.49
Table 2: Eﬃciency of operations of the proposed PRE
scheme.
4.4 Implementation of Proxy Service
To investigate the utilization of our PRE, we implement
the proxy service on top of two AWS services: EC2 and
S3, where EC2 provides a virtualized environment to launch
virtual machine instances with optional computing resources
(CPU frequency/core/RAM) and S3 is a cloud-based storage
system to store data in buckets and provides management
interface, i.e., writing, reading and deletion.
We implement the proxy service as a PHP web server run-
ning on an EC2 virtual machine where the bilinear map is
speciﬁed by a.param. The proxy service provides a sim-
ple HTTP API ReEnc(rk, s3-url2, s3-url1), where rk is
a re-encryption key, s3-url2 is the URL of a second level
ciphertext object in S3, and s3-url1 is the URL of a ﬁrst
level ciphertext object (after re-encrypting s3-url2) in S3.
When the re-encryption has been done, a successful HTTP
response is sent out to notify that the operation is executed
successfully and the ﬁrst level ciphertext has been stored to
the location speciﬁed by s3-url1. Note that the proxy ser-
vice itself does not manage any content. If necessary, the
proxy service should be granted permissions to read/write
data objects in S3. In addition, we can easily extend our
proxy service to support other cloud storage services such
as SQL (e.g., RDS) and NoSQL data (e.g., SimpleDB).
4.5 Secure Email Forwarding with Anonymous
Proxy Service
As a case study, we have developed a secure email for-
warding application with our proxy service in AWS.
System overview: As shown in Figure 1, our application
consists of three parts: (i) a web-based email client (email
sender/receiver here) provides regular browser interface for
users to login and send/read emails. To keep the email con-
ﬁdential, it employs our PRE scheme to perform encryp-
tion and decryption, together with necessary functions, i.e.,
downloading ciphertext from S3. (ii)A email server, which
is to manage incoming emails and handle them, and (iii) the
proxy service deployed in EC2.