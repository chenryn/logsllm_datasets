title:Side-Channel Attacks on Shared Search Indexes
author:Liang Wang and
Paul Grubbs and
Jiahui Lu and
Vincent Bindschaedler and
David Cash and
Thomas Ristenpart
2017 IEEE Symposium on Security and Privacy
Side-Channel Attacks on Shared Search Indexes
Liang Wang∗, Paul Grubbs†, Jiahui Lu‡, Vincent Bindschaedler§, David Cash¶, Thomas Ristenpart†
∗UW–Madison †Cornell Tech ‡SJTU §UIUC ¶Rutgers University
Abstract—Full-text search systems, such as Elasticsearch and
Apache Solr, enable document retrieval based on keyword
queries. In many deployments these systems are multi-tenant,
meaning distinct users’ documents reside in, and their queries
are answered by, one or more shared search indexes. Large
deployments may use hundreds of indexes across which user
documents are randomly assigned. The results of a search
query are ﬁltered to remove documents to which a client should
not have access.
We show the existence of exploitable side channels in modern
multi-tenant search. The starting point for our attacks is a
decade-old observation that the TF-IDF scores used to rank
search results can potentially leak information about other
users’ documents. To the best of our knowledge, no attacks
have been shown that exploit this side channel in practice,
and constructing a working side channel requires overcoming
numerous challenges in real deployments. We nevertheless
develop a new attack, called STRESS (Search Text RElevance
Score Side channel), and in so doing show how an attacker
can map out the number of indexes used by a service, obtain
placement of a document within each index, and then exploit
co-tenancy with all other users to (1) discover the terms in
other tenants’ documents or (2) determine the number of
documents (belonging to other tenants) that contain a term of
interest. In controlled experiments, we demonstrate the attacks
on popular services such as GitHub and Xen.do. We conclude
with a discussion of countermeasures.
Keywords-side channels; SaaS security; elasticsearch
I. INTRODUCTION
Modern cloud services provide full-text search interfaces
to enable users to easily navigate potentially large document
sets. Search systems such as Elasticsearch [14] and Solr [48]
are both used by individual enterprises and offered as hosted
services for other companies. Databases such as MySQL
include similar search interfaces for columns containing
unstructured text [35].
The canonical search API allows querying one or more
keywords (or terms as they are usually called) to obtain
an ordered list of matching documents. The response may
additionally provide a real-valued score for each document.
Which documents to return and their scores are determined
using a relevance algorithm, most often term-frequency
inverse-document frequency (TF-IDF) [30, 54] or one of
its variants such as BM25 [53]. The TF-IDF score of a
document is proportional to the ratio of the term frequency
(the number of times a term appears in that document) to the
logarithm of the total number of documents divided by the
document frequency (the number of documents containing
the term at least once). To compute these scores quickly,
the search system maintains an inverted index that contains
precomputed document frequencies for each term and term
frequencies for each document-term pair.
Maintaining an index incurs overhead, and so best practice
guides [12, 34] suggest conﬁguring multi-tenant search
systems to use shared indexes: each index is computed over
(many) different users’ documents. This conﬁguration can
additionally improve search efﬁcacy because the document
frequencies of other users’ documents may help make
relevance scores more accurate. When indexes hold private
data, search APIs must be carefully conﬁgured to return only
results for which the querying user has read privileges. The
industry-standard method (see for example [12,22,33,34,59])
for searching with a multi-tenant index works in two steps.
First, when user u issues a search query, the system forwards
the query to the multi-tenant index, which returns results that
may include documents to which u does not have access
rights. Next, the systems post-processes the list of results to
ﬁlter out any documents u should not have access to, and
returns the remaining results. This is referred to as ﬁltering;
see Figure 1 in §III.
This ﬁltering-based approach includes a side channel: one
user may be able to determine the document frequency of a
term, thereby potentially inferring if other users’ documents
include that
term. This observation was ﬁrst made by
B¨uttcher and Clarke [7] in the context of local ﬁle systems.
But to date no side-channel attack has been demonstrated
exploiting the observation, and, as we shall see, doing so
requires overcoming a number of signiﬁcant challenges.
This paper. We provide the ﬁrst treatment of logical side-
channel attacks on modern multi-tenant search services. We
begin by investigating representative open-source systems
and assessing whether the basic document frequency (DF)
side channel mentioned above exists. We setup local instal-
lations of systems including Elasticsearch/Solr and MySQL,
following best practice guides for multi-tenant search. In all
systems surveyed, we conﬁrm that DF leakage can occur.
Despite this, and akin to early work on more well-studied
side channels such as those based on CPU caches [4,38,40],
it is not a priori clear how an attacker can exploit DF scores
in realistic settings. In modern multi-tenant infrastructures,
there exist a number of challenges:
the precise scoring
functions used in real services are proprietary and unknown,
a user’s documents may be assigned to one of many possible
indexes, noise in relevance scores arises due to the number
© 2017, Liang Wang. Under license to IEEE.
DOI 10.1109/SP.2017.50
673
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
of ﬁles ﬂuctuating frequently over time as users add or
remove ﬁles, indexes may not remove keywords from an
index even after a ﬁle is deleted, many APIs rate limit
queries to search indexes, and more. It could also be, of
course, that some sophisticated enterprise services do deploy
proprietary countermeasures.
We develop STRESS1 attacks, which consist of a multi-
step methodology for exploiting DF side channels. Our
attacks overcome the challenges mentioned and, ultimately,
realize the ﬁrst demonstrated cross-user side-channel attacks
in this setting.
Our framework begins by providing three low-level tools
that aid in attacks. First is a new approach that we call
score dipping. It provides a basic ability to infer, for a
single index that includes an attacker document, whether
there exists another document on the index containing a
speciﬁc keyword. The insight is that an attacker can abstract
away details of the scoring function, relying only on the
assumption that scores decrease with increasing DF. Score
dipping improves on prior ideas [7] for how to exploit the side
channel because it can be used without precise knowledge
of the scoring function used by a service plus, as we will
experimentally show, it is robust to noise.
In large-scale systems there will be a large number of
shards across which an index is split, and score dipping alone
is not effective in this setting. Each shard can be thought of
as a logically isolated portion of the index, and a scoring
function only takes into account documents assigned to the
shard. In targeted attacks against a particular victim, attackers
must have the ability to place one or more documents on
the same shard as the target’s documents. But the search
service controls shard assignment, typically randomly load
balancing new documents across them. Thus attackers are
faced with an analogous issue to the co-location challenge
that must be overcome in cross-user side-channel attacks in
public infrastructure-as-a-service (IaaS) [23,43,51,55,57] or
platform-as-a-service (PaaS) [60] clouds.
As a ﬁrst step towards attacking a multi-shard system, we
show how to use score-dipping to construct our second low-
level tool, called co-shard tests, against multi-shard systems.
Our co-operative co-shard test allows an attacker to deter-
mine if two attacker-owned documents have been assigned
to the same shard. Speciﬁcally, we use score-dipping to
build a covert-channel between different documents that are
owned by the same user or different, co-operating users, and
hence determine if they are on the same shard. This channel
however does not on its own achieve co-location on a shard
with a victim’s documents, since the channel is only between
attacker documents.
We next propose a new and different approach to obtaining
co-location with a victims’ documents, and in the process
also learn about the service backend. Instead of trying to just
1Search Text RElevance Score Side channel
obtain co-location with a target, we use our co-operative co-
shard test to build our third low-level tool that we call a shard
map: A set of documents in which each document is present
on a distinct shard. We will show that it is possible even on
large-scale services to build complete shard maps, i.e., ones
that appear to cover all shards used by the system. A complete
shard map already reveals the number of shards, but more
damagingly will be useful as a preliminary step for more
granular attacks. We show how to do the following using a
shard map:
• DF estimation: We can reverse-engineer each shard’s
unknown scoring function using a curve-ﬁtting strategy.
This yields a function that maps a term’s search score
to an estimate of that
term’s DF on a shard. This
allows, among other things, trending: the ability to count
the number of (private) documents mentioning a word.
For example, if one knows an identiﬁer used by a
particular company using GitHub, our technique allows
counting the number of private ﬁles they have stored on
the service.
• Brute-force term recovery: We can use our shard
map to test if a given term exists anywhere in the
system,
thereby allowing an attacker to brute-force
recover moderately high-entropy values from victim
repositories. While the side-channel attack does not
reveal to the attacker which repositories contained the
term, we propose scenarios that nevertheless allow the
extraction of sensitive information such as credit card
numbers, social security numbers, passwords, and more.
We evaluate the viability of STRESS attacks in practice
with case studies of GitHub, Orchestrate.io, and Xen.do. As
a sample of our results, we demonstrate on GitHub (in a
responsible way, see discussion in §VI) that one can build a
191-document shard map in 104 hours with a single account.
We estimate that it would take about a day to brute force
a space of 106 possible terms on every shard. For example,
if one knows the BIN and last four digits of a credit card
number stored in a GitHub repository then the rest of the
card’s number can be brute-forced in under a day with
191 free accounts (c.f., [18] for discussion of credit card
numbers and other information being stored on GitHub). We
also discuss how stripping relevance scores (but still ranking
documents) is likely to be inadequate.
We conclude by discussing potential countermeasures,
suggesting in particular a new countermeasure which re-
places actual document frequencies with ones trained from
public data. We discuss the merits of this approach and routes
to deployment.
II. BACKGROUND
Ranked keyword search. A fundamental
information-
retrieval task is ﬁnding relevant text documents for keyword
search queries. Let D denote a corpus of text documents.
674
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:39 UTC from IEEE Xplore.  Restrictions apply. 
For our purposes, a document consists of a bag-of-words
representation; each word is a string that we refer to as a
term. Our concern will be search systems that expose an API
allowing keyword search, i.e., a client can execute a remote
procedure call SEARCH(t) for a term t that returns an ordered
list of documents d1, . . . , dn for some (typically ﬁxed, small)
n, sorted from most to least relevant. In addition to the list,
many APIs also return relevance scores s1, . . . , sn for which
si ∈ R indicates the estimated relevance of di to the query.
A higher score indicates stronger relevance, and so si ≥ sj
for i < j. Many search routines allow more complex queries
such as disjunctions and/or conjunctions of keywords, but we
will primarily focus on single-term search.
This work will only consider unstructured document
search in which documents have no semantic relationships.
This distinguishes it from settings such as web or social
network search.
In our unstructured search context, the most prevalent way
of ranking is via term frequency/inverse document frequency
(TF-IDF) scoring [30, 54]. Let D denote the document
corpus, N = |D| the number of documents, t be any term,
and d be an arbitrary document in D. Deﬁne df(t, D) =
|{d ∈ D | t ∈ d}| to be the number of documents in
D containing term t. This is referred to as the document
frequency (DF). We deﬁne the term frequency tf(t, d) as the
number of times the term t appears in the document d. We
deﬁne the inverse document frequency by
N
idf(t, D) = 1 + log
df(t, D) + 1
.
The TF-IDF score for the relevance of document d to the
single-term query t is
scoretf-idf(t, d, D) = tf(t, d) · idf(t, D)
(1)
The TF-IDF score for a multi-term query q = (t1, . . . , tm) is
m(cid:2)
scoretf-idf(q, d, D) =
scoretf-idf(ti, d, D)
(2)
i=1
the idf(t, D) term is independent of the
We note that
document d, and it is intuitively used to weight terms for
multi-keyword queries.
There are many variants of the basic TF-IDF score that
include other parameters and normalizing terms, and also al-
ternative deﬁnitions of term frequency and inverse document
frequency. Indeed, the live systems we experimented on used
more complicated variants of TF-IDF, but we will use this
simple formulation for the time being.
To implement TF-IDF scoring and search, a system
generates an inverted index. For each potentially-searched
keyword t, one stores (t, idf(t, D)) at the head of a list of
(d, tf(t, d)) pairs. This allows fast computation of the TF-
IDF and the documents that should be returned in response
to the query.
675
TF-IDF scoring has many advantages and has intu-
itive probabilistic and geometric interpretations (c.f., [54]).
However, in applications it is often useful to account for
other factors in determining relevance, like the length of a
document compared to the average length of all documents
in the index. The BM25 scoring method incorporates this
additional information [53]. As our eventual attacks will
focus on TF-IDF, we omit the details and note that our attacks
should extend to use of BM25.
Multi-user indexes and the DF side channel. More
than 10 years ago, B¨uttcher and Clarke [7] pointed out a
potential side channel when using TF-IDF scoring on multi-
user indexes. A multi-user index is simply one generated over
a document corpus D that includes ﬁles from different users
with different permissions. To perform a search on behalf
of a user u, one uses the index to compute a ranked list of
documents (d1, . . . , dn) with scores (s1, . . . , sn). Then one
post-processes the list to redact documents (and their scores)
not accessible by u, resulting in a smaller list (d(cid:2)
1, . . . , d(cid:2)
n)
with scores (s(cid:2)
n) that are returned to u.
1, . . . , s(cid:2)
B¨uttcher and Clarke pointed out that systems like Apple’s