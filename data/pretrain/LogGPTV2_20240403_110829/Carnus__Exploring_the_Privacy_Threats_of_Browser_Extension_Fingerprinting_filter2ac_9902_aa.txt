title:Carnus: Exploring the Privacy Threats of Browser Extension Fingerprinting
author:Soroush Karami and
Panagiotis Ilia and
Konstantinos Solomos and
Jason Polakis
Carnus: Exploring the Privacy Threats of Browser
Extension Fingerprinting
Soroush Karami, Panagiotis Ilia, Konstantinos Solomos, Jason Polakis
University of Illinois at Chicago, USA
{skaram5, pilia, ksolom6, polakis}@uic.edu
Abstract—With users becoming increasingly privacy-aware
and browser vendors incorporating anti-tracking mechanisms,
browser ﬁngerprinting has garnered signiﬁcant attention. Accord-
ingly, prior work has proposed techniques for identifying browser
extensions and using them as part of a device’s ﬁngerprint.
While previous studies have demonstrated how extensions can
be detected through their web accessible resources, there exists
a signiﬁcant gap regarding techniques that indirectly detect
extensions through behavioral artifacts. In fact, no prior study
has demonstrated that this can be done in an automated fashion.
In this paper, we bridge this gap by presenting the ﬁrst fully
automated creation and detection of behavior-based extension
ﬁngerprints. We also introduce two novel ﬁngerprinting tech-
niques that monitor extensions’ communication patterns, namely
outgoing HTTP requests and intra-browser message exchanges.
These techniques comprise the core of Carnus, a modular system
for the static and dynamic analysis of extensions, which we
use to create the largest set of extension ﬁngerprints to date.
We leverage our dataset of 29,428 detectable extensions to
conduct a comprehensive investigation of extension ﬁngerprinting
in realistic settings and demonstrate the practicality of our attack.
Our in-depth analysis conﬁrms the robustness of our techniques,
as 83.6% - 87.92% of our behavior-based ﬁngerprints remain
effective against a state-of-the-art countermeasure.
Subsequently, we aim to explore the true extent of the privacy
threat that extension ﬁngerprinting poses to users, and present
a novel study on the feasibility of inference attacks that reveal
private and sensitive user information based on the functionality
and nature of their extensions. We ﬁrst collect over 1.44 million
public user reviews of our detectable extensions, which provide
a unique macroscopic view of the browser extension ecosystem
and enable a more precise evaluation of the discriminatory power
of extensions as well as a new deanonymization vector. We
also automatically categorize extensions based on the developers’
descriptions and identify those that can lead to the inference of
personal data (religion, medical issues, etc.). Overall, our research
sheds light on previously unexplored dimensions of the privacy
threats of extension ﬁngerprinting and highlights the need for
more effective countermeasures that can prevent our attacks.
I.
INTRODUCTION
As Internet connectivity continues to proliferate globally,
reaching almost ubiquitous presence in many countries, a large
fraction of our everyday activities have migrated to the web.
While mobile apps generate a signiﬁcant amount of trafﬁc,
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24383
www.ndss-symposium.org
browsers still mediate a large portion of our online activities.
As a result, the evolution of websites from static resources
to functionality-rich applications has also necessitated the
evolution of browsers into complex platforms with a rich set of
APIs and features. To improve user experience, browsers allow
users to further personalize them and extend their functionality
by installing extensions.
Apart from the obvious beneﬁts for users [26], [38], [48],
extensions also introduce a privacy risk. Due to the potential
risk, browsers do not provide any mechanism that would allow
a visited webpage to directly obtain the list of installed browser
extensions. In practice, however, webpages can indirectly infer
which extensions are installed [24], [44], [46], [47]. Once the
list of installed extensions is obtained, it can be used as part of
a user’s device ﬁngerprint and coupled with other browser [18],
[33], [40] or system level [13] information, which can lead
to the tracking of users across the web [8], [19]. Extensions
may also directly leak sensitive information like visited pages
and form data to third parties [51]. While Firefox and Safari
have tried to prevent certain extension enumeration techniques,
Chrome –the most popular browser with a market share of
∼64% [53]– remains vulnerable.
In this paper, our motivation is twofold: to conduct a com-
prehensive exploration of automated extension enumeration
techniques under realistic settings, and to understand the true
extent of the privacy threat that extension ﬁngerprinting poses
to users (apart from facilitating browser ﬁngerprinting and web
tracking). To that end we build Carnus, a modular system
that analyzes Chrome extensions statically and dynamically for
creating ﬁngerprinting signatures and inferring sensitive data.
Our system employs four different techniques for detecting
extensions; ﬁrst,
leverages the straightforward technique
of identifying extensions that expose unique web-accessible
resources (WARs), which has been demonstrated in prior stud-
ies [24], [47] at a smaller scale. Next, we focus on the identiﬁ-
cation of extensions through the detection of unique behavior-
based modiﬁcations to a page’s DOM. While this approach
has been proposed as a potential ﬁngerprinting technique [52],
no prior work exists on the automatic generation of behavioral
ﬁngerprints. Here we tackle this challenging task, detail our
technical approach, and demonstrate our system’s effectiveness
at automatically creating and detecting ﬁngerprints at scale.
it
We also introduce two new techniques for inferring the
presence of extensions based on intra-browser and exter-
nal communication. Speciﬁcally, we ﬁnd that certain exten-
sions broadcast messages for communicating with components
within the page (e.g., injected JavaScript), which we use to
build ﬁngerprints. Similarly, extensions can also send HTTP
requests to external servers to fetch resources. We conduct a
crawl of the Chrome Web Store and are able to ﬁngerprint
29,428 extensions using all these techniques, resulting in the
largest and most complete ﬁngerprinting study to date. To
demonstrate the robustness of our techniques we evaluate the
impact of a recently presented state-of-the-art countermea-
sure [55] and ﬁnd that our system can still ﬁngerprint 83.6%
- 87.92% of the behavior-based extensions.
Subsequently we measure the tracking capability enabled
by extension ﬁngerprints. While prior work has conducted user
studies on a smaller scale and using smaller sets of ﬁnger-
printable extensions [24], [52], our goal is to accurately gauge
the usefulness of extension ﬁngerprints under more realistic
settings in terms of scale. Given the signiﬁcant challenge of
conducting very large user studies with actual participants, we
identify an alternative data source that offers a unique view
into the set of extensions that users install, thus enabling such
an analysis. Speciﬁcally, we collect over 1.44 million publicly
available reviews for the extensions that are ﬁngerprintable
by Carnus. Using this dataset we conduct an analysis of the
unicity of installed browser extensions for over 1.16 million
users, and explore the feasibility of a novel deanonymization
attack. Our results show that extensions installed by users
can be highly identifying; for instance, if an attacker detects
4 random extensions that are ﬁngerprintable by our system,
there is a 94.47% chance that she can uniquely identify the
user and learn their name and proﬁle picture. While this
deanonymization attack is not applicable to all users, since
not everyone writes reviews, it reveals a signiﬁcant privacy risk
that stems from a seemingly innocuous action, i.e., writing a
review about a browser extension.
Finally, we investigate the feasibility of attacks that infer
user information based on the intended functionality of the
discovered extensions. While not all extensions reveal sen-
sitive information about the user (e.g., an ad-blocker), other
extensions can explicitly or implicitly disclose information that
is personal (e.g., ethnicity) or sensitive (e.g., religion). Our
analysis shows that at least 18,286 of the extensions reveal
such information. When considering the most sensitive types of
information, we ﬁnd that 147, 116, and 387 extensions expose
the user’s medical/health conditions, religion and political
inclinations, respectively. Also, we ﬁnd that the extensions
that expose such sensitive information have been downloaded
almost 2.5 million times. These ﬁndings highlight the privacy
risk of users installing browser extensions, as websites and
third-party services can surreptitiously infer personal and sen-
sitive information. In summary, our research contributions are:
• We develop Carnus, a system that combines dynamic
and static techniques for automatically analyzing ex-
tensions, and demonstrate the ﬁrst automated creation
and detection of behavior-based ﬁngerprints. We pro-
vide a detailed technical description of our novel
framework, which fully automates the entire ﬁnger-
printing process, and demonstrate the practicality of
our attack.
• We introduce two new ﬁngerprinting techniques that
rely on extensions’ communication patterns and are
robust against all countermeasures previously pro-
posed by researchers or deployed by browsers.
• We present the largest extension ﬁngerprinting study
to date, highlighting the true extent of ﬁngerprintable
extensions within the Chrome Store. Our dataset also
enables an evaluation of our attacks against a state-of-
the-art countermeasure [55], demonstrating the effec-
tiveness of our techniques as Carnus can still detect
the vast majority of the behavior-based extensions.
• We present an analysis on the unicity of extensions
using publicly available extension reviews as the van-
tage point for quantifying the uniqueness of extensions
among more than 1.16 million users. Apart from mea-
suring the true usefulness of extension ﬁngerprints for
tracking users, we explore a novel deanonymization
attack where users’ identities are inferred based on
their public reviews.
• We present the ﬁrst empirical analysis on the pri-
vacy inference attacks enabled by browser extensions.
Speciﬁcally, we describe an attack for inferring users’
personal and sensitive information (e.g., demograph-
ics, ethnicity, religion, etc.) based on the intended
functionality of detected extensions.
II. BACKGROUND AND THREAT MODEL
Extension ﬁngerprinting. While modern browsers offer a
rich set of capabilities and functionality, third-party developers
are allowed to create extensions that add new features and en-
able a better experience for users. For instance, popular exten-
sions can remove undesired content like advertisements [21],
[39] but can also harden browsers by removing undesired
features [48] or forcing web requests over HTTPS [27], [45].
To achieve their desired functionality, extensions can alter a
webpage’s DOM and even execute arbitrary scripts in the
context of a webpage (which introduces a signiﬁcant security
threat [10], [12], [15], [28], [36]). However, unlike plugins,
browsers do not provide a JavaScript call for a webpage to
obtain a list of the extensions installed in a user’s browser.
As a result, extensions can only be detected by pages
indirectly. While we present details on how Carnus achieves
this in Section III, the main idea is that extensions expose
elements (e.g., an icon) or exhibit behavior that is observable
by webpages. If a speciﬁc extension’s elements or behavior
are unique among all extensions, then a page can uniquely
identify (i.e., ﬁngerprint) it. Identifying exposed resources in
Chrome is a straightforward process that has been demon-
strated before [24], [47]. On the other hand, uniquely identi-
fying extensions based on their behavior is a challenging task
that presents several obstacles in practice. First, extensions can
exhibit behavior that is dynamic and potentially ephemeral in
nature that also relies on characteristics of the visited website,
as opposed to the typically static and long-lasting nature of
exposed resources. Moreover, multiple extensions may exhibit
similar or identical behavior (e.g., blocking ads on a page). To
make matters worse, if a user has multiple extensions installed
their behavior may overlap, further obscuring the “signals”
used for ﬁngerprinting. While prior work [52] proposed the
use of behavioral features for ﬁngerprinting extensions, that
study did not actually automatically create or evaluate such
ﬁngerprints, nor did it explore the implications of overlapping
behaviors from different extensions. In this study we provide
2
a comprehensive analysis of extension ﬁngerprinting that ex-
plores these challenging, yet critical, practical dimensions.
Threat model. In practice, extension ﬁngerprinting tech-
niques can be deployed in different settings, which can affect
their accuracy; for instance, certain extensions can only be
detected by certain web pages as their functionality gets
“triggered” only when the user visits speciﬁc domains [52].
Since such extensions cannot be detected by all attackers, we
focus on extensions that can be detected regardless of the
web page’s domain. More speciﬁcally, we assume that the
attacker is able to lure the user to a specially crafted page that
attempts to detect as many installed extensions as possible.
Furthermore, as in previous studies, we assume that the user
visits the attacker’s website over Chrome on a computer and
not a smartphone, since the mobile version of Chrome does
not support extensions.
III. SYSTEM DESIGN AND IMPLEMENTATION
In this section we provide details on the design and imple-
mentation of our system. A high-level overview of Carnus is
shown in Figure 1. The ﬁrst module of our system is respon-
sible for crawling the Chrome Web Store and downloading
all available extensions. The crawler also extracts metadata
including the descriptions provided by the developers, as well
as all accompanying reviews by users. The extensions are
processed by both static and dynamic analysis components
which identify their WARs and exercise them to extract their
behavioral signatures. These are subsequently processed so the
ﬁnal ﬁngerprint is created for each extension. For our pri-
vacy inference attacks, we focus on ﬁngerprintable extensions.
Indeed, their descriptions, metadata, and users’ reviews are
processed so as to identify extensions of interest and create
the list of user characteristics and traits that they reveal.
Extension enumeration. As mentioned previously, prior
studies have demonstrated the feasibility of browser extension
enumeration and ﬁngerprintability. These studies focused their
efforts on identifying extensions that expose speciﬁc resources
(i.e., WAR-based enumeration) either directly [24], [47] or
with clever implicit approaches [44], [46]. In the following
subsections we provide technical details and outline the ﬁnger-
print generation and extension detection process for our four
techniques. Overall, we present the ﬁrst study that incorporates
multiple ﬁngerprinting techniques, enabling the largest and
most comprehensive exploration to date.
A. WAR-Based Extension Enumeration
An extension’s structure and required permissions are de-
ﬁned in a manifest ﬁle. In practice, the permissions declare
the extension’s ability to access websites and Chrome APIs,
and the content scripts point to code that will be fetched
and executed in the context of web pages. Resources such
as images, JavaScript and CSS ﬁles are packed along with
extensions. Relevant to our goal are web accessible resources
(WAR). The WAR section of the manifest deﬁnes a list of
resources within an extension that can be accessed from a
web page. In other words, a page is only able to access re-
sources whose paths exist in the WAR section [2]. In Chrome,
a page can fetch a resource from an extension through:
chrome-extension:///, where  is the
public extension ID, and  is the path to the resource.
By compiling a list of the extensions that expose such re-
sources, a website can probe these resources in order to detect
which extensions the user has installed in her browser. Since
this attack is only feasible when the extensions’ identiﬁers
and resource paths are known, Firefox recently implemented
a countermeasure of assigning a random identiﬁer to each in-
stalled extension. However, Chrome lacks any countermeasures
for preventing WAR-based extension enumeration.
As our goal is to maximize the potential coverage of our
attack and explore in depth the privacy implications that arise
from the detection of extensions, we implement the WAR-
based technique as part of our system. During the preparatory
phase, we statically parse the manifest ﬁles of the extensions
collected by our crawler and identify which ones expose such
resources. During the attack phase, a script in our page issues
a request for each extension’s WAR and determines if the
extension is installed based on the status code of the response.
B. Behavior-Based Extension Enumeration
During an initial exploration of the web extension ecosys-
tem, we encountered various extensions that exhibit patterns of
potentially detectable behavior. Speciﬁcally, we found exten-
sions that dynamically add new images, buttons, or text to the
web page, some that detect images and text and replace them,
as well as extensions that fetch resources from the web and use
message passing for communicating with the JavaScript code
inside the visited page. By detecting all the behavioral patterns,
a website can generate behavior-based signatures that allow
identiﬁcation of the user’s installed extensions. In the following