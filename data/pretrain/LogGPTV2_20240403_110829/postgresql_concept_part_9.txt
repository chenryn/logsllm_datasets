test(> weight FLOAT
test(> );
CREATE
test=> CREATE TABLE salesorder (
test(> order_id INTEGER,
test(> customer_id INTEGER, -- joins to customer.customer_id
test(> employee_id INTEGER, -- joins to employee.employee_id
test(> part_id INTEGER, -- joins to part.part_id
test(> order_date DATE,
test(> ship_date DATE,
test(> payment NUMERIC(8,2)
test(> );
CREATE
Figure6.3: Creationofcompanytables
62 CHAPTER6. JOININGTABLES
Keepin mind that all table and column names not protected by double quotes should consist
of only letters, numbers, and the underscore character. Each name must start with a letter, not
anumber. Donot usepunctuation,excepttheunderscore,inyournames. Forexample,address,
office,andzipcode9arevalidnames,but2pairandmy#arenot.
The example in Figure 6.3 also shows the existence of a column named customer_id in two
tables. This duplication occurs because the two columns contain the same type of number, a
customer identification number. Giving them the same name clearly shows which columns join
thetablestogether. Ifyouwantedtouseuniquenames,youcouldnamethecolumnsalesorder_-
customer_id or sales_cust_id. This choice makes the column names unique, but still documents
thecolumnstobejoined.
Figure 6.4 shows the insertion of a row into the customer, employee, and part tables. It also
shows the insertion of a row into the salesorder table, using the same customer, employee, and
partnumberstolinkthesalesorderrowtotheotherrowsweinserted. Forsimplicity,wewilluse
onlyasinglerowpertable.
6.4 Performing Joins
When dataare spread across multiple tables, retrieval of that information becomes an important
issue. Figure 6.5 indicates how to find the customer name for a given order number. It uses
two queries. The first gets the customer_id for order number 14673. The returned customer
identificationnumberof648thenisusedintheWHEREclauseofthenextquery. Thatqueryfinds
thecustomer namerecordwherethecustomer_idequals648. Wecallthistwo-queryapproacha
manualjoin,becausetheusermanuallytooktheresultfromthefirstqueryandplacedthatnumber
intotheWHEREclauseofthesecondquery.
Fortunately,relationaldatabasescanperformthistypeofjoinautomatically. Figure 6.6shows
thesamejoinasinFigure6.5butplacesitinasinglequery. Thisqueryshowsalloftheelements
necessarytoperformthejoinoftwotables:
• ThetwotablesinvolvedinthejoinarespecifiedintheFROMclause.
• ThetwocolumnsneededtoperformthejoinarespecifiedasequalintheWHEREclause.
• Thesalesordertable’sordernumberistestedintheWHEREclause.
• Thecustomertable’scustomernameisreturnedfromtheSELECT.
Internally,thedatabaseperformsthejoinbycarryingoutthefollowingoperations:
• salesorder.order_id = 14673: Findthatrowinthesalesordertable.
• salesorder.customer_id = customer.customer_id: From the row just found, get the cus-
tomer_id. Findtheequalcustomer_idinthecustomertable.
• customer.name: Returnnamefromthecustomertable.
6.4. PERFORMINGJOINS 63
test=> INSERT INTO customer VALUES (
test(> 648,
test(> ’Fleer Gearworks, Inc.’,
test(> ’1-610-555-7829’,
test(> ’830 Winding Way’,
test(> ’Millersville’,
test(> ’AL’,
test(> ’35041’,
test(> ’USA’
test(> );
INSERT 19815 1
test=> INSERT INTO employee VALUES (
test(> 24,
test(> ’Lee Meyers’,
test(> ’10/16/1989’
test(> );
INSERT 19816 1
test=> INSERT INTO part VALUES (
test(> 153,
test(> ’Garage Door Spring’,
test(> 6.20
test(> );
INSERT 19817 1
test=> INSERT INTO salesorder VALUES(
test(> 14673,
test(> 648,
test(> 24,
test(> 153,
test(> ’7/19/1994’,
test(> ’7/28/1994’,
test(> 18.39
test(> );
INSERT 19818 1
Figure6.4: Insertionintocompanytables
64 CHAPTER6. JOININGTABLES
test=> SELECT customer_id FROM salesorder WHERE order_id = 14673;
customer_id
-------------
648
(1 row)
test=> SELECT name FROM customer WHERE customer_id = 648;
name
--------------------------------
Fleer Gearworks, Inc.
(1 row)
Figure6.5: Findingacustomernameusingtwoqueries
test=> SELECT customer.name -- query result
test-> FROM customer, salesorder -- query tables
test-> -- table join
test-> WHERE customer.customer_id = salesorder.customer_id AND
test-> salesorder.order_id = 14673; -- query restriction
name
--------------------------------
Fleer Gearworks, Inc.
(1 row)
Figure6.6: Findingacustomernameusingonequery
6.5. THREE-ANDFOUR-TABLEJOINS 65
test=> SELECT salesorder.order_id
test-> FROM salesorder, customer
test-> WHERE customer.name = ’Fleer Gearworks, Inc.’ AND
test-> salesorder.customer_id = customer.customer_id;
order_id
----------
14673
(1 row)
Figure6.7: Findinganordernumberforacustomername
Thatis,thedatabaseperformsthesamestepsasthemanualjoin,butmuchfaster.
Notice that Figure 6.6 qualifies each column name by prefixing it with the table name, as
discussed in Section 6.1. While such prefixing is optional in many cases, it is required in this
example because the column customer_id exists in both tables mentioned in the FROM clause,
customerandsalesorder. Withoutsuchprefixing,thequerywouldgenerateanerror: ERROR: Column
’customer_id’ is ambiguous.
You can also perform the join in the opposite direction too. In the previous query, the order
number was supplied and the customer name returned. In Figure 6.7, the customer name is
suppliedandtheordernumberreturned. TheorderofitemsintheFROMandWHEREclauseshas
alsobeenswitched;theorderingofitemsisnotimportantintheseclauses.
6.5 Three- and Four-Table Joins
Figure6.8demonstratesathree-tablejoin. Inthisexample,thefirstprintedcolumnisthecustomer
name,andthesecondcolumnistheemployeename. Both columnsarelabeledname. Youcould
useAStogivethecolumnsuniquelabels. Figure6.9showsafour-tablejoin,usingAStomakeeach
columnlabelunique. Thefour-tablejoinmatchesthearrowsinFigure6.2,withthearrowsofthe
salesordertablepointingtotheotherthreetables.
Joinscanalsobeperformedamongtablesthatareonlyindirectlyrelated. Supposeyouwishto
findemployeeswhohavetakenordersforeachcustomer. Figure6.10showssuchaquery. Notice
thatthisquerydisplaysjustthecustomerandemployeetables. Thesalesordertableisusedtojoin
thetwotablesbutdoesnotappearintheresult. TheDISTINCTkeywordisusedbecausemultiple
orders taken by the same employee for the same customer would make that employee appear
morethanonce,whichwasnotdesired. Thesecondqueryusesanaggregatetoreturnacountfor
eachuniquecustomer/employeepair.
Until now, we have used only a single row in each table. As an exercise, add more customer,
employee, and part rows, and add salesorder rows that join to these new entries. You can use
66 CHAPTER6. JOININGTABLES
test=> SELECT customer.name, employee.name
test-> FROM salesorder, customer, employee
test-> WHERE salesorder.customer_id = customer.customer_id AND
test-> salesorder.employee_id = employee.employee_id AND
test-> salesorder.order_id = 14673;
name | name
--------------------------------+--------------------------------
Fleer Gearworks, Inc. | Lee Meyers
(1 row)
Figure6.8: Three-tablejoin
test=> SELECT customer.name AS customer_name,
test-> employee.name AS employee_name,
test-> part.name AS part_name
test-> FROM salesorder, customer, employee, part
test-> WHERE salesorder.customer_id = customer.customer_id AND
test-> salesorder.employee_id = employee.employee_id AND
test-> salesorder.part_id = part.part_id AND
test-> salesorder.order_id = 14673;
customer_name | employee_name | part_name
------------------------------+--------------------------+---------------------
Fleer Gearworks, Inc. | Lee Meyers | Garage Door Spring
(1 row)
Figure6.9: Four-tablejoin
6.5. THREE-ANDFOUR-TABLEJOINS 67
test=> SELECT DISTINCT customer.name, employee.name
test-> FROM customer, employee, salesorder
test-> WHERE customer.customer_id = salesorder.customer_id and
test-> salesorder.employee_id = employee.employee_id
test-> ORDER BY customer.name, employee.name;
name | name
--------------------------------+--------------------------------
Fleer Gearworks, Inc. | Lee Meyers
(1 row)
test=> SELECT DISTINCT customer.name, employee.name, COUNT(*)
test-> FROM customer, employee, salesorder
test-> WHERE customer.customer_id = salesorder.customer_id and
test-> salesorder.employee_id = employee.employee_id
test-> GROUP BY customer.name, employee.name
test-> ORDER BY customer.name, employee.name;
name | name | count
--------------------------------+--------------------------------+-------
Fleer Gearworks, Inc. | Lee Meyers | 1
(1 row)
Figure6.10: Employeeswhohavetakenordersforcustomers
68 CHAPTER6. JOININGTABLES
SELECT employee.name
FROM customer, employee
WHERE customer.employee_id = employee.employee_id AND
customer.customer_id = 648;
SELECT customer.name
FROM customer, employee
WHERE customer.employee_id = employee.employee_id AND
employee.employee_id = 24
ORDER BY customer.name;
Figure6.11: Joiningcustomerandemployee
Figure6.4asanexample. Chooseanyuniqueidentificationnumbersyoulike,thentrythequeries
alreadyshowninthischapterwithyournewdata.
6.6 Additional Join Possibilities
Sofar,allofourexamplejoinshaveinvolvedthesalesordertableinsomeform. Supposewewant
to assign an employee to manage each customer account. If we add an employee_id column to
thecustomertable,thecolumncouldstoretheidentificationnumberoftheemployeeassignedto
managethecustomer’saccount. Figure 6.11 shows howto performajoin betweenthecustomer
and employee tables. The first query finds the employee name assigned to manage customer
number648. Thesecondqueryshowsthe customersmanagedbyemployee24. Noticethatthe
salesordertableisnotinvolvedinthesequeries.
Suppose you want to assign an employee to be responsible for answering detailed questions
about parts. You would then add an employee_id column to the part table, place valid employee
identifiersinthecolumn,andperformqueriessimilartothoseinFigure 6.12. Addingcolumnsto
existingtablesiscoveredinSection13.2.
In some cases,a join could be performed with the state column. For example,to check state
mailingcodesforvalidity,astatecodetablecouldbecreatedwithallvalidstatecodes.3 Anapplication
couldcheckthestatecodeenteredbytheuserandreportanerrorifitisnotinthestatecodetable.
Anotherexamplewouldbetheneedtoprintthefullstatenameinqueries. Statenamescouldbe
stored in a separate table and joined when the full state name is desired. Figure 6.13 shows an
exampleofsuchastatenametable. Thuswehavetwomoreusesforadditionaltables:
3TheUnitedStatesPostalServicehasassignedauniquetwo-lettercodetoeachU.S.state.
6.6. ADDITIONALJOINPOSSIBILITIES 69
-- find the employee assigned to part number 153
SELECT employee.name
FROM part, employee
WHERE part.employee_id = employee.employee_id AND
part.part_id = 153;
-- find the parts assigned to employee 24
SELECT part.name
FROM part, employee
WHERE part.employee_id = employee.employee_id AND
employee.employee_id = 24
ORDER BY name;
Figure6.12: Joiningpartandemployee
test=> CREATE TABLE statename (code CHAR(2),
test(> name CHAR(30)
test(> );
CREATE
test=> INSERT INTO statename VALUES (’AL’, ’Alabama’);
INSERT 20629 1
…
test=> SELECT statename.name AS customer_statename
test-> FROM customer, statename
test-> WHERE customer.customer_id = 648 AND
test-> customer.state = statename.code;
Figure6.13: Thestatenametable
70 CHAPTER6. JOININGTABLES
• Checkcodesagainstalistofvalidvalues—thatis,allowonlyvalidstatecodes
• Storecodedescriptions—thatis,statecodeandstatename
6.7 Choosing a Join Key
Thejoinkeyisthevalueusedtolinkrowsbetweentables. Forexample,inFigure 6.4,648isthe
customer key, appearing in the customer table to uniquely identify the row, and in the salesorder
tabletorefertothatspecificcustomerrow.
Somepeoplemightquestionwhetheranidentificationnumberisneeded. Shouldthecustomer
namebeusedasajoinkey? Usingitasthejoinkeyisnotagoodideaforseveralreasons:
• Numbersarelesslikelytobeenteredincorrectly.
• Twocustomerswiththesamenamewouldbeimpossibletodistinguishinajoin.
• Ifthecustomernamechanges,allreferencestothatnamewouldhavetochange.
• Numericjoinsaremoreefficientthanjoinsoflongcharacterstrings.
• Numbersrequirelessstoragespacethancharacterstrings.
In the statename table, the two-letter state code is probably a good join key for the following
reasons:
• Two-lettercodesareeasyforuserstorememberandenter.
• Statecodesarealwaysunique.
• Statecodesdonotchange.
• Joinsofshorttwo-lettercodesarenotsignificantlyslowerthanintegerjoins.
• Two-lettercodesdonotrequiresignificantlymorestoragespacethanintegers.
Essentially,twochoicesforjoinkeysexist: identificationnumbersandshortcharactercodes. Ifan
itemisreferencedrepeatedly,itisbesttouseashortcharactercodeasajoinkey. Youcandisplay
thiskeytousersandallowthemtorefertocustomersandemployeesusingcodes. Userspreferto
identifyitemsbyshort,fixed-lengthcharactercodescontainingnumbersandletters. Forexample,
customersmightbeidentifiedbysix-charactercodes(FLE001),employeesbytheirinitials(BAW),
andpartsbyfive-charactercodes(E7245). Codesareeasytouseandremember. Inmanycases,
userscanchoosethecodes,aslongastheyareunique.
Itispossibletoallowuserstoentershortcharactercodesandstilluseidentificationnumbers
asjoin keys. Addingacodecolumnto the tableaccomplishesthisgoal. For thecustomer table, a
newcolumncalledcodecanbeaddedtoholdthecustomercode. Whentheuserentersacustomer
6.8. ONE-TO-MANYJOINS 71
SELECT order_id
FROM customer, salesorder
WHERE customer.code = ’FLE001’ AND
customer.customer_id = salesorder.customer_id;
Figure6.14: Usingacustomercode
code,thequerycanfindthecustomer_idassignedtothecustomercode,thenusethatcustomer_id
in joins with other tables. Figure 6.14 shows a query using a customer code to find all order
numbersforthatcustomer.
Insomecases,identificationnumbersworkwellandcodesareunnecessary,asinthefollowing
cases:
• Itemswithshortlifespans,suchasordernumbers
• Itemswithoutappropriatecodes,suchaspayrollbatchnumbers
• Itemsusedinternallyandnotreferencedbyusers
Defining codes for such values would be useless. It is better to allow the database to assign a
uniquenumbertoeachitem. Chapter7discussesdatabasesupportforassigninguniqueidentifiers.
Nouniversalruledictateswhenyoushouldchoosecodesoridentificationnumbers. U.S.states
areclearlybetterkeyedon codes, becauseonly 50 exist. Theresultingcodesareshort, unique,
andwellknownbymostusers. Attheotherextreme,ordernumbersarebestusedwithoutcodes
becausetoomanyofthemarepossibleandcodeswouldbeoflittleuse.
6.8 One-to-Many Joins
Up to this point, when we joined two tables, one row in the first table matched exactly one row
in the second table, making the joins one-to-one joins. But what if more than one salesorder row
existedforacustomerID? Multipleordernumberswouldbeprinted. Insuchaone-to-manyjoin,
onecustomerrowwouldjointomorethanonesalesorderrow. Now,supposenoordersweremade
byacustomer. Eventhough avalidcustomerrowwouldexist,iftherewerenosalesorderrowfor
that customer identification number, no rows would be returned. We could call that situation a