        /* Both are incremental. Thus we have "SS" test. Check if they
           are in the same sequence. */
        u32 avg = (hss->ipid.tcp_ipids[good_tcp_ipid_num - 1] - hss->ipid.tcp_ipids[0]) / (good_tcp_ipid_num - 1);
        if (hss->ipid.icmp_ipids[0] ipid.tcp_ipids[good_tcp_ipid_num - 1] + 3 * avg) {
          test.setAVal("SS", "S");
        } else {
          test.setAVal("SS", "O");
        }
      }
#### TCP 时间戳选项算法 ( `TS`)
这个能预测出开机时间！
`TS`是另一个测试，它试图 根据它如何生成一系列数字来确定目标操作系统的特征。这个查看响应`SEQ`探测的 TCP 时间戳选项（如果有）。它检查
TSval（选项的前四个字节）而不是回显的 TSecr（最后四个字节）值。它采用每个连续 TSval 之间的差异，并将其除以 Nmap
发送生成这些响应的两个探测器之间经过的时间量。
结果值给出了每秒时间戳增量的速率。Nmap 计算所有连续探测的平均每秒增量，然后计算`TS`如下：
  1. 如果任何响应没有时间戳选项，`TS`则设置为`U`（不支持）。
  2. 如果任何时间戳值为零，`TS`则设置为`0`。
  3. 如果每秒平均增量在、 或 范围内`0-5.66`，则分别设置为 1、7 或 8。这三个范围得到特殊处理，因为它们对应于许多主机使用的 2 Hz、100 Hz 和 200 Hz 频率。`70-150``150-350``TS`
  4. 在所有其他情况下，Nmap 记录每秒平均增量的二进制对数，四舍五入到最接近的整数。由于大多数主机使用 1,000 Hz 频率， `A`这是一个常见的结果。
这个结果可以推断出开机时间
    /* Now we look at TCP Timestamp sequence prediction */
      /* Battle plan:
         1) Compute average increments per second, and variance in incr. per second
         2) If any are 0, set to constant
         3) If variance is high, set to random incr. [ skip for now ]
         4) if ~10/second, set to appropriate thing
         5) Same with ~100/sec
      */
      if (hss->si.ts_seqclass == TS_SEQ_UNKNOWN && hss->si.responses >= 2) {
        time_t uptime = 0;
        avg_ts_hz = 0.0;
        for (i = 0; i si.responses - 1; i++) {
          double dhz;
          dhz = (double) ts_diffs[i] / (time_usec_diffs[i] / 1000000.0);
          /*       printf("ts incremented by %d in %li usec -- %fHZ\n", ts_diffs[i], time_usec_diffs[i], dhz); */
          avg_ts_hz += dhz / (hss->si.responses - 1);
        }
        if (avg_ts_hz > 0 && avg_ts_hz si.ts_seqclass = TS_SEQ_2HZ;
          uptime = hss->si.timestamps[0] / 2;
        }
        else if (avg_ts_hz > 70 && avg_ts_hz si.ts_seqclass = TS_SEQ_100HZ;
          uptime = hss->si.timestamps[0] / 100;
        }
        else if (avg_ts_hz > 724 && avg_ts_hz si.ts_seqclass = TS_SEQ_1000HZ;
          uptime = hss->si.timestamps[0] / 1000;
        }
        else if (avg_ts_hz > 0) {
          hss->si.ts_seqclass = TS_SEQ_OTHER_NUM;
          uptime = hss->si.timestamps[0] / (unsigned int)(0.5 + avg_ts_hz);
        }
        if (uptime > 63072000) {
          /* Up 2 years?  Perhaps, but they're probably lying. */
          if (o.debugging) {
            /* long long is probably excessive for number of days, but sick of
             * truncation warnings and finding the right format string for time_t
             */
            log_write(LOG_STDOUT, "Ignoring claimed %s uptime of %lld days\n",
            hss->target->targetipstr(), (long long) (uptime / 86400));
          }
          uptime = 0;
        }
        hss->si.lastboot = hss->seq_send_times[0].tv_sec - uptime;
      }
    switch (hss->si.ts_seqclass) {
      case TS_SEQ_ZERO:
        test.setAVal("TS", "0");
        break;
      case TS_SEQ_2HZ:
      case TS_SEQ_100HZ:
      case TS_SEQ_1000HZ:
      case TS_SEQ_OTHER_NUM:
        /* Here we "cheat" a little to make the classes correspond more
           closely to common real-life frequencies (particularly 100)
           which aren't powers of two. */
        if (avg_ts_hz  70 && avg_ts_hz  150 && avg_ts_hz target->FPR->cp_hex(tsnewval));
        break;
      case TS_SEQ_UNSUPPORTED:
        test.setAVal("TS", "U");
        break;
      }
#### TCP 选项 ( `O`, `O1–O6`)
TCP 数据包的Options。指纹保留了原始顺序，以及选项的值。有些操作系统没有实现这些选项或者实现不全。
Option Name | Character | Argument (if any)  
---|---|---  
End of Options List (EOL) | L |  
No operation (NOP) | N |  
Maximum Segment Size (MSS) | M | The value is appended. Many systems echo the
value used in the corresponding probe.  
Window Scale (WS) | W | The actual value is appended.  
Timestamp (TS) | T | The T is followed by two binary characters representing
the TSval and TSecr values respectively. The characters are 0 if the field is
zero and 1 otherwise.  
Selective ACK permitted (SACK) | S  
    int HostOsScan::get_tcpopt_string(const struct tcp_hdr *tcp, int mss, char *result, int maxlen) const {
      char *p;
      const char *q;
      u16 tmpshort;
      u32 tmpword;
      int length;
      int opcode;
      p = result;
      length = (tcp->th_off * 4) - sizeof(struct tcp_hdr);
      q = ((char *)tcp) + sizeof(struct tcp_hdr);
      /*
       * Example parsed result: M5B4ST11NW2
       *   MSS, Sack Permitted, Timestamp with both value not zero, Nop, WScale with value 2
       */
      /* Be aware of the max increment value for p in parsing,
       * now is 5 = strlen("Mxxxx")  MSS Option
       */
      while (length > 0 && (p - result)  0) {
        /* We could reach here for one of the two reasons:
         *  1. At least one option is not correct. (Eg. Should have 4 bytes but only has 3 bytes left).
         *  2. The option string is too long.
         */
        *result = '\0';
        return -1;
      }