### 4.4: Sequence of Games for the Proof of Theorem 10

In this section, we present a sequence of games to prove Theorem 10. For any slot \( i \in [n] \) and \( j \in [Q_i] \), \( \text{ct}_j^i \) refers to the \( j \)-th challenge ciphertext for slot \( i \). Changes in the games are highlighted in gray for better visibility.

#### Games \( G_0, G_1, G_2 \)

1. **Setup:**
   - \( \text{CS} \subseteq [n] \leftarrow A(1^\lambda, F_m, X, Y) \)
   - \( (\text{pk}, \text{msk}, \{\text{ek}_i\}_{i \in [n]}) \leftarrow \text{Setup}(1^\lambda, F_m, X, Y) \)
   - \( \alpha \leftarrow \text{AOEnc}(\cdot, \cdot), \text{OKeygen}(\cdot)(\text{pk}, \{\text{ek}_i\}_{i \in \text{CS}}) \)
   - Return \( \alpha \).

2. **Oracle Encryptions:**
   - For each \( i \in [n] \) and \( j \in [Q_i] \):
     - \( \text{ct}_j^i := \text{Enc}(\text{pk}, \text{ek}_i, x_{j,0}^i) \)
     - \( \text{ct}_j^i := \text{Enc}(\text{pk}, \text{ek}_i, x_{j,0}^i - x_{1,0}^i + x_{1,0}^i) \)
     - \( \text{ct}_j^i := \text{Enc}(\text{pk}, \text{ek}_i, x_{j,1}^i - x_{1,0}^i + x_{1,1}^i) \)
     - Return \( \text{ct}_j^i \).

3. **Oracle Key Generation:**
   - \( \text{OKeygen}(y_1 \parallel \cdots \parallel y_n): \)
     - Return \( \text{KeyGen}(\text{pk}, \text{msk}, y_1 \parallel \cdots \parallel y_n) \).

### 4.5: Games for the Proof of Theorem 10

In the selective variants of these games, the adversary sends its challenges \( \{x_{j,b}^i\}_{i \in [n], j \in [Q_i], b \in \{0,1\}} \) before seeing the public key and querying any decryption keys.

#### Game \( G_2 \)

- We replace the challenge ciphertexts to \( \text{ct}_j^i = \text{Enc}(\text{pk}, \text{ek}_i, x_{j,1}^i) \) for all \( i \in [n] \) and \( j \in [Q_i] \), using the many-yy-IND security of FE for \( n \) instances, which is implied by the single-instance security (see Lemma 5).
- We prove in Lemma 32 that there exists a PPT adversary \( B_2 \) such that:
  \[
  \text{Adv}_{G_1}(A) - \text{Adv}_{G_2}(A) \leq \text{Adv}_{\text{many-yy-IND-FE}, B_2, n}(\lambda).
  \]

Putting everything together, we obtain:
\[
\text{Adv}_{\text{many-yy-IND-MIFE}, A}(\lambda) \leq \text{Adv}_{\text{one-yy-IND-MIFE}, B_1}(\lambda) + \text{Adv}_{\text{many-yy-IND-FE}, B_2, n}(\lambda).
\]

### Lemma 31: Game \( G_0 \) to \( G_1 \)

There exists a PPT adversary \( B_1 \) such that:
\[
|\text{Adv}_{G_0}(A) - \text{Adv}_{G_1}(A)| \leq \text{Adv}_{\text{one-yy-IND-MIFE}, B_1}(\lambda).
\]

**Proof of Lemma 31:**

In game \( G_1 \), described in Figure 4.5, we replace \( \text{Enc}(\text{pk}, \text{ek}_i, x_{j,0}^i) \) with \( \text{Enc}(\text{pk}, \text{ek}_i, x_{1,0}^i) \) for all \( i \in [n] \) and \( j \in [Q_i] \). This is justified by the following properties:
- One-yy-IND security of MIFE.
- The fact that the encryption scheme is linearly homomorphic.

The adversary \( B_1 \) proceeds as follows:

- **Simulation of pk:**
  - In the adaptive variant, \( B_1 \) receives the set \( \text{CS} \subseteq [n] \) from \( A \), sends it to its own experiment, and forwards the public key to \( A \).
  - In the selective variant, \( B_1 \) receives the challenge vectors and the set \( \text{CS} \subseteq [n] \) from \( A \), sends the challenge vectors to its experiment, and forwards the public key and challenge ciphertexts to \( A \).

- **Simulation of OEnc:**
  - If \( j = 1 \), \( B_1 \) queries its own oracle to get \( \text{ct}_i := \text{Enc}(\text{pk}, \text{ek}_i, x_{1, \beta}) \).
  - If \( j > 1 \), \( B_1 \) uses the linear homomorphism to generate the remaining ciphertexts.

- **Simulation of OKeygen:**
  - \( B_1 \) uses its own secret key generation oracle on input \( y_1 \parallel \cdots \parallel y_n \) and forwards the answer to \( A \).

It is clear that for all \( \beta \in \{0, 1\} \), when \( B_1 \) interacts with one-SEL-INDMIFE, it simulates the game \( G_\beta \) to \( A \). Therefore,
\[
\text{Adv}_{\text{one-yy-IND-MIFE}, B_1}(\lambda) = |\text{Adv}_{G_0}(A) - \text{Adv}_{G_1}(A)|.
\]

### Lemma 32: Game \( G_1 \) to \( G_2 \)

There exists a PPT adversary \( B_2 \) such that:
\[
|\text{Adv}_{G_1}(A) - \text{Adv}_{G_2}(A)| \leq \text{Adv}_{\text{many-yy-IND-FE}, B_2, n}(\lambda).
\]

**Proof of Lemma 32:**

In game \( G_2 \), described in Figure 4.5, we replace \( \text{Enc}(\text{gpk}', \text{ek}'_i, x_{j,0}^i) \) with \( \text{Enc}(\text{gpk}', \text{ek}'_i, x_{j,1}^i) \) for all \( i \in [n] \) and \( j \in [Q_i] \). This follows from the many-yy-IND security of FE for \( n \) instances, which we can use since for each key query \( y_1 \parallel \cdots \parallel y_n \) and all \( r, z \), we have:
\[
\langle x_{j,0}^i, y_i \rangle = \langle x_{j,1}^i, y_i \rangle,
\]
which follows from the restriction imposed by the security game (see Remark 7).

We build a PPT adversary \( B_2 \) such that:
\[
|\text{Adv}_{G_1}(A) - \text{Adv}_{G_2}(A)| \leq \text{Adv}_{\text{many-yy-IND-FE}, B_2, n}(\lambda).
\]

Adversary \( B_2 \) proceeds as follows:

- **Simulation of Challenge Ciphertexts:**
  - \( B_2 \) samples \( z_i \leftarrow \mathbb{Z}_p^k \) for all \( i \in [n] \).
  - It simulates all challenge ciphertexts \( \text{ct}_j^i \) and decryption keys using its own oracles.

- **Forwarding Outputs:**
  - Finally, \( B_2 \) forwards the outputs \( \alpha \) of \( A \) to its own experiment.

It is clear that for all \( \beta \in \{0, 1\} \), when \( B_2 \) interacts with many-yy-INDMIFE, it simulates the game \( G_{1+\beta} \) to \( A \). Therefore,
\[
\text{Adv}_{\text{many-yy-IND-FE}, B_2, n}(\lambda) = |\text{Adv}_{G_1}(A) - \text{Adv}_{G_2}(A)|.
\]

### Putting Everything Together

In Figure 4.6, we provide the details of the scheme with a concrete instantiation of the underlying single-input inner-product scheme, whose one-SEL-SIM security is proven under the Dk-MDDH assumption, as provided in Section 2.6.1.

### 4.6: Concrete Instantiation of the Scheme

**Setup:**
- \( \text{PG} := (G_1, G_2, p, P_1, P_2, e) \leftarrow \text{PGGen}(1^\lambda) \)
- \( A \leftarrow \text{Dk}(p) \)
- \( \text{msk} := \{W_i, V_i, z_i\}_{i \in [n]} \)
- Return \( (\text{pk}, \text{msk}, \{\text{ek}_i\}_{i \in [n]}) \).

**Encryption:**
- For all \( i \in [n] \):
  - \( W_i \leftarrow \mathbb{Z}_p^{m \times (k+1)} \)
  - \( V_i \leftarrow \mathbb{Z}_p^{k \times (k+1)} \)
  - \( z_i \leftarrow \mathbb{Z}_p^k \)
  - \( \text{ek}_i := (z_i, [W_i A]_1, [V_i A]_1) \)
  - \( \text{pk} := (\text{PG}, [A]_1) \)
  - \( \text{ct}_i := \text{Enc}(\text{pk}, \text{ek}_i, x_i) \).

**Key Generation:**
- \( r \leftarrow \mathbb{Z}_p^k \)
- For all \( i \in [n] \):
  - \( d_i := \begin{pmatrix} y_i \\ r \end{pmatrix} \)
  - \( z := \langle z_1 + \cdots + z_n, r \rangle \)
- Return \( \{[d_i]_2\}_{i \in [n]}, [r]_2, [z]^T \).

**Decryption:**
- \( [d]^T := \sum_{i \in [n]} e([c_i]^T_1, [d_i]_2) - [z]^T \)
- Return the discrete log of \( [d]^T \).

Figure 4.6: Our private-key MIFE scheme for the functionality \( F_m, X, Y \), which is proven many-SEL-IND-static in Corollary 2 and many-AD-IND secure in Theorem 51. Both rely on the Dk(p)-MDDH assumption in \( G_1 \) and \( G_2 \).