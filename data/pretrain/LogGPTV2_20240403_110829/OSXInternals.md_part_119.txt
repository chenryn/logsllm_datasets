mach_msg_header_t *reply);
// demonstration function and associates
typedef void(* funcptr_t)(void);
funcptr_t function_with_bad_instruction;
kern_return_t repair_instruction(mach_port_t victim);
void graceful_dead(void);
// support macros for pretty printing
#define L_MARGIN "%-21s: "
#define FuncPutsN(msg) printf(L_MARGIN "%s", __FUNCTION__, msg)
#define FuncPuts(msg) printf(L_MARGIN "%s\n", __FUNCTION__, msg)
#define FuncPutsIDs(msg) printf(L_MARGIN "%s (task %#lx, thread %#lx)\n", \
__FUNCTION__, msg, (long)mach_task_self(), \
(long)pthread_mach_thread_np(pthread_self()));
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 75 of 153
#define EXIT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); exit((retval)); }
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
int
main(int argc, char **argv)
{
kern_return_t kr;
pthread_t exception_thread;
mach_port_t mytask = mach_task_self();
mach_port_t mythread = mach_thread_self();
FuncPutsIDs("starting up");
// create a receive right
kr = mach_port_allocate(mytask, MACH_PORT_RIGHT_RECEIVE, &exception_port);
EXIT_ON_MACH_ERROR("mach_port_allocate", kr);
// insert a send right: we will now have combined receive/send rights
kr = mach_port_insert_right(mytask, exception_port, exception_port,
MACH_MSG_TYPE_MAKE_SEND);
OUT_ON_MACH_ERROR("mach_port_insert_right", kr);
kr = thread_set_exception_ports(mythread, // target thread
EXC_MASK_BAD_INSTRUCTION, // exception types
exception_port, // the port
EXCEPTION_DEFAULT, // behavior
THREAD_STATE_NONE); // flavor
OUT_ON_MACH_ERROR("thread_set_exception_ports", kr);
if ((pthread_create(&exception_thread, (pthread_attr_t *)0,
(void *(*)(void *))exception_handler, (void *)0))) {
perror("pthread_create");
goto out;
}
FuncPuts("about to dispatch exception_handler pthread");
pthread_detach(exception_thread);
// some random bad address for code, but otherwise a valid address
function_with_bad_instruction = (funcptr_t)exception_thread;
FuncPuts("about to call function_with_bad_instruction");
function_with_bad_instruction();
FuncPuts("after function_with_bad_instruction");
out:
mach_port_deallocate(mytask, mythread);
if (exception_port)
mach_port_deallocate(mytask, exception_port);
return 0;
}
void
exception_handler(void)
{
kern_return_t kr;
exc_msg_t msg_recv;
reply_msg_t msg_resp;
FuncPutsIDs("beginning");
msg_recv.Head.msgh_local_port = exception_port;
msg_recv.Head.msgh_size = sizeof(msg_recv);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 76 of 153
kr = mach_msg(&(msg_recv.Head), // message
MACH_RCV_MSG|MACH_RCV_LARGE, // options
0, // send size (irrelevant here)
sizeof(msg_recv), // receive limit
exception_port, // port for receiving
MACH_MSG_TIMEOUT_NONE, // no timeout
MACH_PORT_NULL); // notify port (irrelevant here)
EXIT_ON_MACH_ERROR("mach_msg_receive", kr);
FuncPuts("received message");
FuncPutsN("victim thread is ");
printf("%#lx\n", (long)msg_recv.thread.name);
FuncPutsN("victim thread's task is ");
printf("%#lx\n", (long)msg_recv.task.name);
FuncPuts("calling exc_server");
exc_server(&msg_recv.Head, &msg_resp.Head);
// now msg_resp.RetCode contains return value of catch_exception_raise()
FuncPuts("sending reply");
kr = mach_msg(&(msg_resp.Head), // message
MACH_SEND_MSG, // options
msg_resp.Head.msgh_size, // send size
0, // receive limit (irrelevant here)
MACH_PORT_NULL, // port for receiving (none)
MACH_MSG_TIMEOUT_NONE, // no timeout
MACH_PORT_NULL); // notify port (we don't want one)
EXIT_ON_MACH_ERROR("mach_msg_send", kr);
pthread_exit((void *)0);
}
kern_return_t
catch_exception_raise(mach_port_t port,
mach_port_t victim,
mach_port_t task,
exception_type_t exception,
exception_data_t code,
mach_msg_type_number_t code_count)
{
FuncPutsIDs("beginning");
if (exception != EXC_BAD_INSTRUCTION) {
// this should not happen, but we should forward an exception that we
// were not expecting... here, we simply bail out
exit(-1);
}
return repair_instruction(victim);
}
kern_return_t
repair_instruction(mach_port_t victim)
{
kern_return_t kr;
unsigned int count;
ppc_thread_state_t state;
FuncPutsIDs("fixing instruction");
count = MACHINE_THREAD_STATE_COUNT;
kr = thread_get_state(victim, // target thread
MACHINE_THREAD_STATE, // flavor of state to get
(thread_state_t)&state, // state information
&count); // in/out size
EXIT_ON_MACH_ERROR("thread_get_state", kr);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 77 of 153
// SRR0 is used to save the address of the instruction at which execution
// continues when rfid executes at the end of an exception handler routine
state.srr0 = (vm_address_t)graceful_dead;
kr = thread_set_state(victim, // target thread
MACHINE_THREAD_STATE, // flavor of state to set
(thread_state_t)&state, // state information
MACHINE_THREAD_STATE_COUNT); // in size
EXIT_ON_MACH_ERROR("thread_set_state", kr);
return KERN_SUCCESS;
}
void
graceful_dead(void)
{
FuncPutsIDs("dying graceful death");
}
$ gcc -Wall -o exception exception.c
$ ./exception
main : starting up (task 0x807, thread 0xd03)
main : about to dispatch exception_handler pthread
main : about to call function_with_bad_instruction
exception_handler : beginning (task 0x807, thread 0xf03)
exception_handler : received message
exception_handler : victim thread is 0xd03
exception_handler : victim thread's task is 0x807
exception_handler : calling exc_server
catch_exception_raise: beginning (task 0x807, thread 0xf03)
repair_instruction : fixing instruction (task 0x807, thread 0xf03)
exception_handler : sending reply
graceful_dead : dying graceful death (task 0x807, thread 0xd03)
main : after function_with_bad_instruction
The use of exc_server() in Figure 938 is a typical example of Mach server programming. Other such
server functions can be used to replace repetitive code for receiving and sending messages. For example,
mach_msg_server() is a generic server function whose arguments include a port (receive rights) and a
pointer to a message demultiplexing function. It runs the following loop internally: receive a request
message, call the demultiplexer with request and reply buffers, and possibly send a reply message based
on the demultiplexer's return value.
mach_msg_return_t
mach_msg_server(boolean_t (*demux)(mach_msg_header_t *,
mach_msg_header_t *),
mach_msg_size_t max_size,
mach_port_t rcv_name,
mach_msg_options_t options);
mach_msg_server_once() is a variant that processes only one request and then returns to the user. In
fact, we can replace the entire implementation of exception_handler() in Figure 938 with the following
code, using exc_server() as the demultiplexing function.
void
exception_handler(void)
{
(void)mach_msg_server_once(exc_server, // demultiplexing function
sizeof(exc_msg_t), // maximum receive size
exception_port, // port for receiving
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 78 of 153
MACH_MSG_TIMEOUT_NONE); // options, if any
pthread_exit((void *)0);
}
9.8. Signals
Besides Mach exception handling, Mac OS X provides Unix-style signals as well, with the latter built atop
the former.
Old Signals Are Hard to
kill()
Early versions of UNIX used signals primarily to provide a mechanism for a process to be
terminated, interrupted, or divertedbecause of an error in its own operation or due to an
action of another process. For example, if a user wanted to terminate a runaway process, the
kill command could be used to send the process a kill signal.
Third Edition UNIX (1973) had twelve signals, all of which exist in Mac OS Xmost with the
same names. The Third Edition signals were: SIGHUP, SIGINT, SIGQIT, SIGINS, SIGTRC,
SIGIOT, SIGEMT, SIGFPT, SIGKIL, SIGBUS, SIGSEG, and SIGSYS.
Over time, signals were increasingly used for purposes besides error handlingfor example, as
a facility for IPC and synchronization. In particular, the advent of job control in shells was a
contributing factor to the widespread use of signals. In modern Unix systems, exceptions are
only one class of events that result in the generation of signals. Various other synchronous
and asynchronous events result in signals, for example:
 Explicit generation of a signal by calling kill(2) or killpg(2)
Change in the status of a child process
Terminal interrupts
Job control operations by interactive shells
Expiration of timers
Miscellaneous notifications, such as a process exceeding its CPU resource limit or file
size limit (say, while writing a file)
An implementation of the signal mechanism involves two well-defined phases: signal generation and
signal delivery. Signal generation is the occurrence of an event that warrants a signal. Signal delivery is
the invocation of the signal's dispositionthat is, the carrying out of the associated signal action. Each
signal has a default action, which can be one of the following on Mac OS X.
 Terminate Abnormally terminate the process, with the termination occurring as if _exit() had been
called, with the only difference being that wait() and waitpid() receive status values that indicate
the abnormal termination.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 79 of 153
Dump core Abnormally terminate the process, but also create a core file.
Stop Suspend the process.
Continue Resume the process if it is stopped; otherwise, ignore the signal.
Ignore Don't do anything (discard the signal).
A signal can have its default action be overridden by a user-specified handler. The sigaction() system
call can be used to assign signal actions, which can be specified as SIG_DFL (use the default action),
SIG_IGN (ignore the signal), or a pointer to a signal handler function (catch the signal). A signal can also
be blocked, wherein it remains pending until it is unblocked or the corresponding signal action is set to
SIG_IGN. The sigprop array [bsd/sys/signalvar.h] categorizes the known signals and their default
actions.
// bsd/sys/signalvar.h
#define SA_KILL 0x01 // terminates process by default
#define SA_CORE 0x02 // ditto and dumps core
#define SA_STOP 0x04 // suspend process
#define SA_TTYSTOP 0x08 // ditto, from tty
#define SA_IGNORE 0x10 // ignore by default
#define SA_CONT 0x20 // continue if suspended
int sigprop[NSIG + 1] = {
0, // unused
SA_KILL, // SIGHUP
SA_KILL, // SIGINT
SA_KILL|SA_CORE, // SIGQUIT
...
SA_KILL, // SIGUSR1
SA_KILL, // SIGUSR2
};
The following exceptional cases should be noted about blocking, catching, and ignoring signals.
 SIGKILL and SIGSTOP cannot be blocked, caught, or ignored.
 If a SIGCONT (the "continue" signal) is sent to a process that is stopped, the process is continued
even if SIGCONT is blocked or ignored.
The signal(3) man page provides a list of supported signals and their default actions.
The Mach exception-handling facility was designed to address several problems with the prevailing signal
mechanisms in Unix systems. As Unix systems have evolved, the design and implementation of signal
mechanisms have improved too. Let us look at some aspects of signals in the context of Mac OS X.
9.8.1. Reliability
Early signal implementations were unreliable in that a signal's action was reset to the default action
whenever that signal was caught. If there were two or more successive occurrences of the same signal,
there was a race condition as the kernel would reset the signal handler, and before the program could
reinstall the user-defined handler, the default action would be invoked. Since the default action of many
signals is to terminate the process, this was a severe problem. POSIX.1 included a reliable signal
mechanism based on the signal mechanisms in 4.2BSD and 4.3BSD. The new mechanism requires the use
of the newer sigaction(2) interface instead of the older signal(3) interface. Mac OS X provides both
interfaces, although signal(3) is implemented in the system library as a wrapper call to sigaction(2).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 80 of 153
9.8.2. The Number of Signals
Although the number of signal types available in Unix systems has increased over the years, often there
are hard upper bounds because of the data types that kernels use to represent signal types. Mac OS X uses
a 32-bit unsigned integer to represent a signal number, allowing a maximum of 32 signals. Mac OS X
10.4 has 31 signals.
One Can Never Have Too Many Signals
The Mac OS X signal implementation is derived from FreeBSD's, which also uses a 32-bit
quantity to represent a signal. Recent versions of FreeBSD have 32 signals. AIX and recent
versions of Solaris support more than 32 signals. Solaris can accommodate more than 32
signals by using an array of unsigned long values to represent the data type for the signal
bitmap. In general, it is nontrivial to add new signals to an existing implementation.
9.8.3. Application-Defined Signals
POSIX.1 provides two application-defined signals, SIGUSR1 and SIGUSR2, which can be used by the
programmer for arbitrary purposesfor example, as a rudimentary IPC mechanism.
Signals and IPC
A process can send a signal to itself, another process, or a group of processes by using the
kill(2) or killpg(2) calls. Signals do not amount to a powerful or efficient mechanism for
general-purpose IPC. Besides the limit on the number of signals, it is not possible to
communicate arbitrary types and amounts of data using signals. Moreover, signal delivery is
usually more expensive than dedicated IPC mechanisms.
Mac OS X 10.4 does not support real-time signals, which were originally defined as part of the Real-time
Signals Extension in POSIX.4. Real-time signals are application-defined signals and can vary in
numberranging from SIGRTMIN to SIGRTMAXacross systems that provide them. Other characteristics
distinguish real-time signals from regular signals. For example, real-time signals are delivered in a
guaranteed order: Multiple simultaneously pending real-time signals of the same type are delivered in the
order they were sent, whereas simultaneously pending real-time signals of different types are delivered in
the order of their signal numbers (lowest numbered first).
9.8.4. Signal-Based Notification of Asynchronous I/O
Mac OS X provides the asynchronous I/O (AIO) family of functions, also defined as part of POSIX.4.
When an asynchronous event (such as a completed read or write) occurs, a program can receive a
notification through one of the following mechanisms:
 SIGEV_NONE no notification delivered