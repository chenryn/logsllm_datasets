843 (13.8%)
86 (12.6%)
46 (0.8%)
6 (0.9%)
12 (1.8%)
11 (0.2%)
• An exception was produced and not recovered within
two minutes. In order to detect exceptions, we monitored
the execution of the KiUserExceptionDispatcher
function in the ntdll.dll system library.
• The monitored processes were idle for more than two
consecutive minutes.
• A maximum time-out of 30 minutes was reached.
B. Analysis of Off-the-shelf Packers
The ﬁrst interesting result we observed in the collection
of off-the-shelf packers is the fact that 559 of them (81.6%)
are single-process, 121 (17.6%) use two concurrent processes,
and only ﬁve adopted more than two. The number of layers is
summarized in Figure 4. While the majority of packers adopt
less than four layers, there is a signiﬁcant number of packers
(4.4%) that use more than 50 layers. Even more interesting,
almost 10% of the packers in this dataset did not have the
protected code in the last unpacked layer. In these cases, the
last layer contained part of the routines of the packer, only
revealed at run-time.
Regarding the number of transitions to shallower layers,
one third of the packers did not present any cycle (and thus,
presented a linear transition model). At
the other end of
the scale, for 15 packers we observed more than 1 million
backward transitions.
Finally, Figure 5 shows the prevalence of the different in-
terprocess communication techniques observed for this group
of packers. In this dataset, we did not ﬁnd any sample
using shared memory mapping, writing to shared memory
regions, or deallocating memory of unpacked regions. The
most common interprocess interaction techniques are the
creation of shared ﬁles (that are afterwards executed), and
the use of the Windows API (ReadProcessMemory and
WriteProcessMemory) for process interaction. Five sam-
ples were reported to use injection techniques to processes not
directly created by the process itself. We can also notice that
a signiﬁcant number of samples created several processes or
threads during their execution.
C. Packers Distribution
In the previous section we have analyzed the complexity
of different off-the-shelf packers. In order to understand the
relevance of these results, we obtained access to the Anubis
malware sandbox database (containing over 60 Million unique
668
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 4. Number of layers of the packer.
Fig. 6. Average complexity used by custom packers over time.
as Windows installer tools.
We can observe that the number of samples detected as
packed with well-known packer tools signiﬁcantly decreased
over the years. This trend might be the consequence of the fact
that the packer signature database is not up-to-date with recent
packer families, or that malware writers now prefer to employ
their own custom unpackers or to rely on simple packers
(such as UPX) that do not raise suspicion on their programs.
With the exception of Themida, a complex protector that
uses virtualization technology, the most commonly employed
packers are relatively simple, ranging from Type-I to Type-III.
D. Analysis of Custom Packers
The packers analyzed in the previous section are well-
known tools that can be recognized by signature-based detec-
tion tools such as PEiD or Sigbuster. Nevertheless, a signiﬁcant
number of malware samples are protected by custom protec-
tion engines in an effort to complicate reverse engineering.
To study the complexity and the characteristics of these
packers we run our analysis tool on 7,729 malware binaries
uniformly distributed over the past seven years (based on the
date they were ﬁrst submitted to the public analysis sandbox).
Despite all having a section with entropy higher than 7, only
6,088 samples presented an unpacking behavior during our
analysis. Table I shows the packer complexity classes in both
datasets, off-the-shelf and custom packers. Custom packers
show a higher prevalence for Type-II and Type-III, while very
simple packers (Type-I) and very complex ones (Type-VI) are
more common in the off-the-shelf dataset. Table III shows
the evolution of custom packer complexity over the years,
and Figure 6 summarizes it by plotting the average packer
complexity, together with its standard deviation and the 90th
percentile of the distribution. The data shows no clear trend,
with all the complexity classes remaining roughly constant
over the past eight years.
Fig. 5.
Interprocess communication techniques observed.
samples) to measure the number of malware samples protected
with each packer.
Table II shows the distribution of the most common packers
over the years according to Sigbuster,
the signature-based
packer detection tool present in the sandbox. The table also
presents the highest complexity observed among the different
packer versions tested during the experiments. Since the tool
is capable of identifying the polymorphic protection engines
adopted by famous worms, we indicate in the ﬁrst row the
percentage of those samples. The second row of the table
shows the percentage of samples which are packed with an off-
the-shelf packer. This set is divided into different categories
in the lower part of the table, one row for each of the 9
most prevalent packer tools in the database. Finally, we report
the percentage of well-known packers not listed in the table
(Others), the percentage of packers labeled by the tool as
Unknown packers, and ﬁnally the percentage of tools labeled
669
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply. 
DISTRIBUTION OF KNOWN PACKERS OVER THE YEARS
TABLE II
2010
2.56%
2011
0.80%
Polymorphic worms
Packed samples
UPX (Type-I)
PE Compact (Type-III)
Aspack (Type-III)
FSG (Type-III)
Asprotect (Type-III)
NSPack (Type-III)
Themida (Virt.)
Upack (Type-III)
Xtreme (Type-III)
Others
Unknown
Installer
2012
2009
4.01%
0.73%
9.54% 14.59% 17.94% 15.31%
2013
2008
2007
0.06%
11.75%
4.58%
14.98% 17.35%
1.25%
29.99% 49.15% 56.78% 41.45% 52.69% 55.26% 55.38%
6.83%
3.67%
5.52%
8.71%
3.81%
4.55%
0.77%
11.42%
9.55%
2.22%
4.71%
1.53%
1.42%
3.95%
2.06%
6.00%
0.57%
2.40%
0.88%
2.85%
2.31%
0.24%
0.50%
0.57%
3.67%
19.41%
8.54%
4.64%
2.75%
2.27%
7.79%
9.18% 17.88% 32.60% 20.94% 23.40% 20.21%
3.02%
5.68%
0.90%
1.57%
1.19%
0.78%
1.41%
0.27%
5.24%
5.29%
4.70%
4.64%
0.76%
3.22%
1.30%
0.92%
0.35%
1.32%
4.85%
3.90%
8.84%
5.71%
0.86%
2.22%
1.13%
0.62%
0.32%
0.46%
3.82%
2.39%
6.26%
4.95%
0.64%
2.27%
1.02%
0.57%
0.44%
0.25%
2.89%
2.05%
Figure 7 and Figure 8 plot the overall number of layers and
inter-process communication methods found in the dataset of
custom packers. Like in the case of off-the-shelf packers, the
majority of custom packers use few layers. Nevertheless, in
contrast to off-the-shelf packers, there is a signiﬁcant number
of samples that present between 3 and 6 layers. From the total
of 6,088 samples, 826 (14%) did not have the original code
in the last level. Regarding interprocess communication, we
observed an increment in the use of system process injection
and unpacking by using external ﬁles, caused by the presence
of malware that injects the code to other processes or drops
ﬁles that are afterwards executed.
Finally, Figure 9 and Figure 10 show the evolution (average
and 90th percentile of the distribution) of the number of
processes and the number of layers over time. The standard
deviation of the number of processes over the years was
between 1.08 and 1.66. Regarding the number of layers, it was
between 5.46 and 35.32. In both cases we did not observe any
signiﬁcant variation in our experiments. Combining all this
information, we can conclude that the average custom packer
in our dataset presents a multi-layer unpacking routine with a
cyclic transition model.
VI. DISCUSSION
Generic unpackers rely on a number of assumptions about
the packer structure that, as we have seen in our study,
are not always true for the samples observed in the wild.
First of all, there is a signiﬁcant number of packers with
more than 2 layers. This implies that every unpacked code
is not necessarily part of the original code. Despite some
approaches like Renovo [4] consider cases with several layers
of protection, not many studies have focused on determining
which layer contains the original code, and it is not clear how
to proceed in these cases. Moreover, things are complicated
by the fact that around 10% of the off-the-shelf packers and
14% of the custom packed malware did not have the original
code in the last layer.
Many unpackers try to identify the tail-jump to dump the
protected code at the appropriate moment. Type-IV, Type-V
and Type-VI packers complicate this operation. Even though
Type-V and Type-VI packers exist in our off-the-shelf dataset,
Fig. 7. Number of layers used by custom packers.
Fig. 8.
Interprocess communication techniques used found in custom packers.
they are not very common in the wild. These packers require
670
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:07 UTC from IEEE Xplore.  Restrictions apply. 
CUSTOM PACKER COMPLEXITY OVER THE YEARS.
TABLE III
Type-I
Type-II
Type-III
Type-IV
Type-V
Type-VI
2008
8.1%
2010
8.1%
2009
6.1%
2014
2012
2011
2007
4.6%
8.0%
5.2%
9.2%
18.3% 15.6% 10.2% 15.4% 10.5%
8.9% 11.5% 15.0%
63.8% 64.6% 71.2% 62.5% 64.4% 69.0% 63.7% 61.3%
11.3% 11.4% 12.1% 13.7% 15.7% 15.1% 15.0% 15.0%
0.7%
-
2013
8.3%
2.3%
-
-
0.2%
-
0.2%
1.7%
-
-
1.4%
0.2%
0.1%
0.1%
0.3%
packers there is a relatively low number of samples in this cat-
egory - showing that malware writers look for more complex