### System info
  * Playwright Version: [1.26]
  * Operating System: [Ubuntu 20]
  * Browser: [Firefox]
  * Other info:
  * Also with latest version of browser and playwright, also in another machine with the same settings
### Source code
  * I provided exact source code that allows reproducing the issue locally.
    import { test, expect } from '@playwright/test';
    test('firefox-test', async ({ page }) => {
      const contentHtml = `
        Redirecting to Google...
      `;
      await page.setContent(contentHtml, {
        waitUntil: 'domcontentloaded',
      });
      await page.pause();
    });
**Config file**
    // playwright.config.ts
    // @ts-check
    const { devices } = require('@playwright/test');
    /**
     * Read environment variables from file.
     * https://github.com/motdotla/dotenv
     */
    // require('dotenv').config();
    /**
     * @see https://playwright.dev/docs/test-configuration
     * @type {import('@playwright/test').PlaywrightTestConfig}
     */
    const config = {
      testDir: './tests',
      /* Maximum time one test can run for. */
      timeout: 30 * 1000,
      expect: {
        /**
         * Maximum time expect() should wait for the condition to be met.
         * For example in `await expect(locator).toHaveText();`
         */
        timeout: 5000,
      },
      /* Run tests in files in parallel */
      fullyParallel: true,
      /* Fail the build on CI if you accidentally left test.only in the source code. */
      forbidOnly: !!process.env.CI,
      /* Retry on CI only */
      retries: process.env.CI ? 2 : 0,
      /* Opt out of parallel tests on CI. */
      workers: process.env.CI ? 1 : undefined,
      /* Reporter to use. See https://playwright.dev/docs/test-reporters */
      reporter: 'html',
      /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
      use: {
        /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */
        actionTimeout: 0,
        /* Base URL to use in actions like `await page.goto('/')`. */
        // baseURL: 'http://localhost:3000',
        /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
        trace: 'on-first-retry',
        headless: false,
      },
      /* Configure projects for major browsers */
      projects: [
        {
          name: 'chromium',
          use: {
            ...devices['Desktop Chrome'],
          },
        },
        {
          name: 'firefox',
          use: {
            ...devices['Desktop Firefox'],
          },
        },
        {
          name: 'webkit',
          use: {
            ...devices['Desktop Safari'],
          },
        },
      ],
    };
    module.exports = config;
**Test file (self-contained)**
    import { test, expect } from '@playwright/test';
    test('firefox-test', async ({ page }) => {
      const contentHtml = `
        Redirecting to Google...
      `;
      await page.setContent(contentHtml, {
        waitUntil: 'domcontentloaded',
      });
      await page.pause();
    });
**Steps**
  * npx playwright uninstall --all
  * npm install @playwright/PI:EMAIL
  * npx playwright install firefox chromium
  * npx playwright test --project=firefox
**Expected**  
See Google's page
[Describe expected behavior]  
**See google's page with active javascript**
[Describe actual behavior]
  * blank page with the html and JS code visible through inspection tool,
  * title with the correct page
  * content blank  
![immagine](https://user-
images.githubusercontent.com/5399875/253279730-718ab7c7-1035-4c0c-80f8-475ad0c49d71.png)
With Chromium and WebKit expected behavior is satisfied