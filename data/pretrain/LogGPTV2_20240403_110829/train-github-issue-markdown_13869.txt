Starting with this SO question, I arrived at take() to a in-place array
permutation, however when the call is made with the "clip" argument (to avoid
creation of a backup in case of exception) the function can be seen to
duplicate rows/columns.
Exact test code demonstrating this issue was provided by Stefano M from the SO
post comment stream, and appears below.
    import numpy as np
    print np.version.version
    N = 10
    # gen ref matrix and permutation
    ref = np.arange(N*N)
    ref.resize(N,N)
    rr = range(N)
    np.random.shuffle(rr)
    arr = ref.copy()
    res = (arr.take(rr,axis=0) == ref[rr,:]).all()
    print "test take, not overwriting:", res
    arr = ref.copy()
    arr.take(rr,axis=0,out=arr,mode="raise")
    print "test not-in-place take:", (arr == ref[rr,:]).all()
    arr = ref.copy()
    arr.take(rr,axis=0,out=arr,mode="clip")
    res = (arr == ref[rr,:]).all()
    print "test in-place take:", res
    if not res:
        print "rr", rr
        print "arr", arr[:,0]
        print "ref", ref[rr,0] 
The output is:
    1.8.0
    test take, not overwriting: True
    test not-in-place take: True
    test in-place take: False
    rr [7, 8, 6, 3, 9, 0, 5, 1, 2, 4]
    arr [70 80 60 30 90 70 70 80 60 90]
    ref [70 80 60 30 90  0 50 10 20 40]
Also tested in numpy 1.6.2. and 1.7.1, where it seems broken as well.