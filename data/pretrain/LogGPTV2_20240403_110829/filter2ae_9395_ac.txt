                       load_bias += arch_mmap_rnd();
    ... 然后 ...
    line 941:    if (!load_addr_set) {
                 load_addr_set = 1;
                 load_addr = (elf_ppnt->p_vaddr - elf_ppnt->p_offset);
                 if (loc->elf_ex.e_type == ET_DYN) {
                       load_bias += error -                           ELF_PAGESTART(load_bias + vaddr);
                       load_addr += load_bias;
                       reloc_func_desc = load_bias;
                 }
          }
## 5.2 ASLR二进制检测/链接器混合解决方案
链接器可能还没有能够执行此任务，但我相信我们至少可以编译静态链接的可执行文件以便它使用位置无关代码（IP相对），来找到一个潜在的解决方案。以下是从二进制检测角度出发的以下算法：
  * `gcc -static -fPIC test2.c -o test2 --static_to_dyn.c`使用此算法
  * 将ehdr->e_type从ET_EXEC修改为ET_DYN
  * 修改每个PT_LOAD段的phdr（分别为text和data段）  
A. phdr [TEXT] .p_vaddr = 0x00000000;  
B. phdr [TEXT] .p_offset = 0x00000000;  
C. phdr [DATA] .p_vaddr = 0x200000 + phdr [DATA] .p_offset;
  * ehdr->e_entry = ehdr->e_entry - old_base;
  * 更新每个节头以反映程序头的新地址范围。
否则GDB和objdump将无法使用二进制文件：
    $ gcc -static -fPIC test2.c -o test2
    $ ./static_to_dyn ./test2
    Setting e_entry to 8b0
    $ ./test2
    Segmentation fault (core dumped)
## 5.3 从ASLR的结果延伸我们对静态链接可执行文件的观点
哎呀，快速查看带有objdump的二进制文件证明了大多数代码不使用IP相对寻址而且也不是真正的PIC。像_start这样的glibc
init例程的PIC版本位于/usr/lib/X86_64-linux-gnu/Scrt1.o中。我认为我们可能必须从一种新颖的方法开始，例如将'-static'gcc选项排除在等式之外并从头开始工作。以下是解决方案的几个起点。
也许test2.c应该同时具有_start()和main()，而_start()应该没有代码，也没有使用 **attribute**
（（weak）），这样Scrt1.o中的_start()例程就可以覆盖它。另一种可能的解决方案是使用IP相对寻址编译dietlibc，并使用它代替glibc以简化操作。有多种可能性，但主要的想法是开始思考开箱即用。为了POC，这里有一个程序，除了检查argc是否大于1之外什么都不做，然后每隔一次迭代在循环中递增一个变量。我们将演示ASLR如何在其上工作。使用_start()作为main()，编译器选项如下所示。
    *** PoC of simple static binary made to ASLR ***
    /* Make sure we have a data segment for testing purposes */
    static int test_dummy = 5;
    int _start() {
          int argc;
          long *args;
          long *rbp;
          int i;
          int j = 0;
          /* Extract argc from stack */
          asm __volatile__("mov 8(%%rbp), %%rcx " : "=c" (argc));
          /* Extract argv from stack */
          asm __volatile__("lea 16(%%rbp), %%rcx " : "=c" (args));
          if (argc > 2) {
                 for (i = 0; i 
    /* Make sure we have a data segment for testing purposes */
    static int test_dummy = 5;
    int _start() {
            int argc;
            long *args;
            long *rbp;
            int i;
            int j = 0;
            /* Extract argc from stack */
            asm __volatile__("mov 8(%%rbp), %%rcx " : "=c" (argc));
            /* Extract argv from stack */
            asm __volatile__("lea 16(%%rbp), %%rcx " : "=c" (args));
            for (i = 0; i < argc; i++) {
                 sleep(10); /* long enough for us to verify ASLR */
                    printf("%s\n", args[i]);
          }
            exit(0);
    }
作为注释，读者可以弄清楚如何获得char **envp。我把它留作练习。现在我们实际上正在构建一个静态链接的二进制文件，它可以获取命令行参数并从diet
libc调用静态链接函数：
    # Note that first I downloaded the dietlibc source code and edited the
    # Makefile to use -fPIC flags which will enforce the IP-relative addressing
    # within dietlibc
    $ gcc -nostdlib -c -fPIC test2.c -o test2.o
    $ gcc -nostdlib test2.o /usr/lib/diet/lib-x86_64/libc.a -o test2
    $ ./test2 arg1 arg2
    ./test2
    ARG1
    ARG2
    $
现在我们可以在其上运行static_to_dyn工具来强制执行ASLR：
    $ ./static_to_dyn test2
    $ ./test2 foo bar
    $ pmap `pidof test`