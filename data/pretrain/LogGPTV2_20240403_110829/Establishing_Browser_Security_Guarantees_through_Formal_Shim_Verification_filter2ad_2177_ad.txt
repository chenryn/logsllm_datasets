= proj_user_control (rsp ++ req ++ tr) ->
kernel_state tr = kernel_state (rsp ++ req ++ tr).
Theorem kresponse_dep_kstate:
forall tr1 tr2 req rsp,
kernel_state tr1 = kernel_state tr2 ->
step_correct tr1 req rsp ->
step_correct tr2 req rsp.
Theorem tab_NI:
forall tr1 tr2 t req rsp1 rsp2,
tcorrect tr1 -> tcorrect tr2 ->
from_tab t req ->
(cur_tab tr1 = Some t  cur_tab tr2 = Some t) ->
step_correct tr1 req rsp1 ->
step_correct tr2 req rsp2 ->
rsp1 = rsp2 \/
(exists m, rsp1 = WroteCMsg (cproc_for t tr1) m /\
rsp2 = WroteCMsg (cproc_for t tr2) m).
Theorem no_xdom_sockets: forall tr t,
tcorrect tr ->
In (SendSocket t host s) tr ->
is_safe_soc host (domain_suffic t).
Theorem no_xdom_cookie_set: forall tr1 tr2 cproc,
tcorrect (tr1 ++ SetCookie key value cproc :: tr2) ->
exists tr t,
(tr2 = (SetCookieRequest t key value :: tr) /\
is_safe_cook (domain cproc) (domain_suffix t))
Theorem dom_bar_correct: forall tr,
tcorrect tr -> dom_bar tr = domain_suffix (cur_tab tr).
Figure 7: Kernel Security Properties. This Coq code shows how
traces allow us to formalize QUARK’s security properties.
sponse depends solely on the request and the kernel state.
This delineates which parts of a trace can affect the ker-
nel’s behavior: for a given request req, the kernel will
produce the same response rsp, for any two traces that
induce the same kernel state, even if the two traces have
completely different sets of requests/responses (recall
that the kernel state only includes the current tab and
the set of tabs, and most request responses don’t change
these). Since the kernel state depends only the user’s
control key inputs, this theorem immediately establishes
the fact that our browser will never allow one component
to inﬂuence how the kernel treats another component un-
less the user intervenes.
Note that kresponse dep kstate shows that the ker-
nel will produce the same response given the same re-
quest after any two traces that induce the same kernel
state. This may seem surprising since many of the ker-
nel’s operations produce nondeterministic results, e.g.,
there is no way to guarantee that two web fetches of the
same URL will produce the same document. However,
such nondeterminism is captured in the request, which
11
is consistent with our notion of requests as inputs and
responses as outputs.
Tab Non-Interference. The second security property,
tab NI, states that the kernel’s response to a tab is not
affected by any other tab. In particular, tab NI shows
that if in the context of a valid trace, tr1, the kernel
responds to a request req from tab t with rsp1, then
the kernel will respond to the same request req with an
equivalent response in the context of any other valid trace
tr2 which also contains tab t, irrespective of what other
tabs are present in tr2 or what actions they take. Note
that this property holds in particular for the case where
trace tr2 contains only tab t, which leads to the follow-
ing corollary: the kernel’s response to a tab will be the
same even if all other tabs did not exist
The formal statement of the theorem in Figure 7 is
made slightly more complicated because of two issues.
First, we must assume that the focused tab at the end of
tr1 (denoted by cur tab tr1) is t if and only if the
focused tab at the end of tr2 is also t. This additional
assumption is needed because the kernel responds differ-
ently based on whether a tab is focused or not. For exam-
ple, when the kernel receives a Display message from a
tab (indicating that the tab wants to display its rendered
page to the user), the kernel only forwards the message
to the output process if the tab is currently focused.
The second complication is that the communication
channel underlying the cookie process for t’s domain
may not be the same between tr1 and tr2. Thus, in
the case that kernel responds by forwarding a valid re-
quest from t to its cookie process, we guarantee that the
kernel sends the same payload to the cookie process cor-
responding to t’s domain.
Note that, unlike kresponse dep kstate, tab NI
does not require tr1 and tr2 to induce the same ker-
nel state. Instead, it merely requires the request req to
be from a tab t, and tr1 and tr2 to be valid traces that
both contain t (indeed, t must be on both traces other-
wise the step correct assumptions would not hold).
Other than these restrictions, tr1 and tr2 may be arbi-
trarily different. They could contain different tabs from
different domains, have different tabs focused, different
cookie processes, etc.
Response Integrity and Tab Non-Interference provide
different, complimentary guarantees. Response Integrity
ensures the response to any request req is only affected
by control keys and req, while Tab Non-Interference
guarantees that the response to a tab request does not leak
information to another tab. Note that Response Integrity
could still hold for a kernel which mistakenly sends re-
sponses to the wrong tab, but Tab Non-Interference pre-
vents this. Similarly, Tab Non-Interference could hold
for a kernel which allows a tab to affect how the kernel
responds to a cookie process, but Response Integrity pre-
cludes such behavior.
It is also important to understand that tab NI proves
the absence of interference as caused by the kernel, not
by other components, such as the network or cookie pro-
cesses. In particular, it is still possible for two websites to
communicate with each other through the network, caus-
ing one tab to affect another tab’s view of the web. Sim-
ilarly, it is possible for one tab to set a cookie which is
read by another tab, which again causes a tab to affect an-
other one. For the cookie case, however, we have a sep-
arate theorem about cookie integrity and conﬁdentiality
which states that cookie access control is done correctly.
Note that this property is an adaptation of the tra-
ditional non-interference property.
In traditional non-
interference, the program has ”high” and ”low” inputs
and outputs; a program is non-interfering if high inputs
never affect low outputs. Intuitively, this constrains the
program to never reveal secret information to untrusted
principles.
We found that
this traditional approach to non-
interference ﬁts poorly with our trace-based veriﬁcation
approach. In particular, because the browser is a non-
terminating, reactive program, the ”inputs” and ”out-
puts” are inﬁnite streams of data.
Previous research [11] has adapted the notion of non-
interference to the setting of reactive programs like
browsers. They provide a formal deﬁnition of non-
interference in terms of possibly inﬁnite input and out-
put streams. A program at a particular state is non-
interfering if it produces similar outputs from similar in-
puts. The notion of similarity is parameterized in their
deﬁnition; they explore several options and examine the
consequences of each deﬁnition for similarity.
Our tab non-interference theorem can be viewed in
terms of the deﬁnition from [11], where requests are “in-
puts” and responses are “outputs”; essentially, our the-
orem shows the inductive case for potentially inﬁnite
streams. Adapting our deﬁnition to ﬁt directly in the
framework from [11] is complicated by the fact that we
deal with a uniﬁed trace of input and output events in the
sequence they occur instead of having one trace of input
events and a separate trace of output events. In future
work, we hope to reﬁne our notion of non-interference
to be between domains instead of tabs, and we believe
that applying the formalism from [11] will be useful in
achieving this goal. Unlike [11], we prove a version of
non-interference for a particular program, the QUARK
browser kernel, directly in Coq.
No Cross-domain Socket Creation. The third secu-
rity property, no xdom sockets, ensures that the ker-
nel never delivers a socket bound to domain d to a tab
whose domain does not match d. This involves check-
ing URL sufﬁxes in a style very similar to the cookie
policy as discussed earlier. This property forces a tab to
Component
Kernel Code
Kernel Security Properties
Kernel Proofs
Kernel Primitive Speciﬁcation
Kernel Primitives
Tab Process
Input Process
Output Process
Cookie Process
Python Message Lib
WebKit Modiﬁcations
WebKit
Language
Lines of code
Coq
Coq
Coq
Coq
Ocaml/C
Python
Python
Python
Python
Python
C
C/C++
859
142
4,383
143
538
229
60
83
135
334
250
969,109
Figure 8: QUARK Components by Language and Size.
use GetURL when accessing websites that do not match
its domain sufﬁx, thus restricting the tab to only access
publicly available data from other domains.
Cookie Integrity/Conﬁdentiality. The fourth secu-
rity property states cookie integrity and conﬁdentiality.
As an example of how cookies are processed, consider
the following trace when a cookie is set:
SetCookie key value cproc ::
SetCookieRequest tab key value :: ...
First,
the SetCookieRequest action occurs, stat-
ing that a given tab just
requested a cookie (in
fact, SetCookieRequest is just deﬁned in terms of a
ReadMsg action of the appropriate message). The ker-
nel responds with a SetCookie action (deﬁned in terms
of WroteMsg), which represents the fact that the kernel
sent the cookie to the cookie process cproc. The ker-
nel implementation is meant to ﬁnd a cproc whose do-
main sufﬁx corresponds to the tab. This requirement is
given in the theorem no xdom cookie set, which en-
codes cookie integrity. It requires that, within a correct
trace, if a cookie process is ever asked to set a cookie,
then it is in immediate response to a cookie set request
for the same exact cookie from a tab whose domain
matches that of the cookie process. There is a similar
theorem no xdom cookie get, not shown here, which
encodes cookie conﬁdentiality.
Domain Bar Integrity and Correctness. The ﬁfth
property states that the domain bar is equal to the domain
sufﬁx of the currently selected tab, which encodes the
correctness of the address bar.
6 Evaluation
In this section we evaluate QUARK in terms of proof ef-
fort, trusted computing base, performance, and security.
Proof Effort and Component Sizes. QUARK com-
prises several components written in various languages;
we summarize their sizes in Figure 8. All Python com-
ponents share the “Python Message Lib” for messaging
12
with the kernel. Implementing QUARK took about 6 per-
son months, which includes several iterations redesign-
ing the kernel, proofs, and interfaces between compo-
nents. Formal shim veriﬁcation saved substantial effort:
we guaranteed our security properties for a million lines
of code by reasoning just 859.
Trusted Computing Base. The trusted computing
base (TCB) consists of all system components we as-
sume to be correct. A bug in the TCB could invalidate
our security guarantees. QUARK’s TCB includes:
• Coq’s core calculus and type checker
• Our formal statement of the security properties
• Several primitives used in Ynot
• Several primitives unique to QUARK
• The Ocaml compiler and runtime
• The underlying Operating System kernel
• Our chroot sandbox
Because Coq exploits the Curry-Howard Isomor-
phism, its type checker is actually the “proof checker” we
have mentioned throughout the paper. We assume that
our formal statement of the security properties correctly
reﬂects how we understand them intuitively. We also as-
sume that the primitives from Ynot and those we added in
QUARK correctly implement the monadic type they are
axiomatically assigned. We trust the OCaml compiler
and runtime since our kernel is extracted from Coq and
run as an OCaml program. We also trust the operating
system kernel and our traditional chroot sandbox to pro-
vide process isolation, speciﬁcally, our design assumes
the sandboxing mechanism restricts tabs to only access
resources provided by the kernel, thus preventing com-
promised tabs from commuting over covert channels.
Our TCB does not include WebKit’s large code base or
the Python implementation. This is because a compro-
mised tab or cookie process can not affect the security
guarantees provided by kernel. Furthermore, the TCB
does not include the browser kernel code, since it has
been proved correct.
Ideally, QUARK will take advantage of previous for-
mally veriﬁed infrastructure to minimize its TCB. For
example, by running QUARK in seL4 [27], compiling
QUARK’s ML-like browser kernel with the MLCom-
pCert compiler [1], and sandboxing other QUARK com-
ponents with RockSalt [32], we could drastically reduce
our TCB by eliminating its largest components. In this
light, our work shows how to build yet another piece of
the puzzle (namely a veriﬁed browser) needed to for a
fully veriﬁed software stack. However, these other ver-
iﬁed building blocks are themselves research prototypes
which, for now, makes them very difﬁcult to stitch to-
gether as a foundation for a realistic browser.
Figure 9: QUARK Performance. This graph shows QUARK load
times for the Alexa Top 10 Web sites, normalized to stock WebKit’s
load times. In each group, the leftmost bar shows the unoptimized load
time, the rightmost bar shows the load time in the ﬁnal, optimized ver-
sion of QUARK, and intermediate bars show how additional optimiza-
tions improve performance. Smaller is better.
Performance. We evaluate our approach’s perfor-
mance impact by comparing QUARK’s load times to
stock WebKit. Figure 9 shows QUARK load times for
the top 10 Alexa Web sites, normalized to stock We-
bKit. QUARK’s overhead is due to factoring the browser
into distinct components which run in separate processes
and explicitly communicate through a formally veriﬁed
browser kernel.
By performing a few simple optimizations, the ﬁnal
version of QUARK loads large, sophisticated websites
with only 24% overhead. This is a substantial improve-
ment over a na¨ıve implementation of our architecture,
shown by the left-most “not-optimized” bars in Figure 9.
Passing bound sockets to tabs, whitelisting content distri-
bution networks for major websites, and caching cookie
accesses, improves performance by 62% on average.
The WebKit baseline in Figure 9 is a full-featured
browser based on the Python bindings to WebKit. These
bindings are simply a thin layer around WebKit’s C/C++
implementation which provide easy access to key call-
backs. We measure 10 loads of each page and take the
average. Over all 10 sites, the average slowdown in load-
time is 24% (with a minimum of 5% for blogger and a
maximum of 42% for yahoo).
We also measured load-time for the previous version
of QUARK, just before rectangle-based rendering was
added.
In this previous version, the average load-time
was only 12% versus 24% for the current version. The
increase in overhead is due to additional communica-
tion with the kernel during incremental rendering. De-
spite this additional overhead in load time, incremental
rendering is preferable because it allows QUARK to dis-
play content to the user as it becomes available instead
of waiting until an entire page is loaded.
Security Analysis. QUARK provides strong, formal
guarantees for security policies which are not fully com-
patible with traditional web security policies, but still
13
012345not optimized + socket (same origin) + socket (whitelist) + cookie cacheLoad Time (Normalized to WebKit) provide some of the assurances popular web browsers
seek to provide.
For the policies we have not formally veriﬁed, QUARK
offers exactly the same level of traditional, unveriﬁed
enforcement WebKit provides. Thus, QUARK actually
provides security far beyond the handful policies we for-
mally veriﬁed. Below we discuss the gap between the
subset of policies we veriﬁed and the full set of common
browser security policies.