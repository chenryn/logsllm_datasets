## 1.21 题目20

### 1.21.1 题目需求
查询学生的总成绩，并进行排名。

### 1.21.2 SQL实现

1. **先查询每个学生的总成绩**
   ```sql
   SELECT 
       s_id, 
       SUM(s_score) AS total_score
   FROM 
       Score
   GROUP BY 
       s_id
   ORDER BY 
       total_score DESC;
   ```

   查询结果：
   ```
   s_id | total_score
   ---- | ---------
   01   | 266
   03   | 246
   02   | 210
   07   | 183
   05   | 163
   04   | 120
   06   | 99
   ```

2. **将上面的结果和学生信息表进行关联查询**
   ```sql
   SELECT 
       s.s_name, 
       s.s_id, 
       t.total_score
   FROM 
       Student s
   JOIN (
       SELECT 
           s_id, 
           SUM(s_score) AS total_score
       FROM 
           Score
       GROUP BY 
           s_id
       ORDER BY 
           total_score DESC
   ) t ON s.s_id = t.s_id;
   ```

   查询结果：
   ```
   s_name | s_id | total_score
   -------|------|------------
   赵雷   | 01   | 266
   孙风   | 03   | 246
   钱电   | 02   | 210
   郑竹   | 07   | 183
   周梅   | 05   | 163
   李云   | 04   | 120
   吴兰   | 06   | 99
   ```

3. **不使用中间表查询**
   ```sql
   SELECT 
       s.s_id, 
       s.s_name, 
       SUM(sc.s_score) AS total_score
   FROM 
       Student s
   JOIN 
       Score sc ON s.s_id = sc.s_id
   GROUP BY 
       s.s_id
   ORDER BY 
       total_score DESC;
   ```

   查询结果：
   ```
   s_id | s_name | total_score
   -----|--------|------------
   01   | 赵雷   | 266
   03   | 孙风   | 246
   02   | 钱电   | 210
   07   | 郑竹   | 183
   05   | 周梅   | 163
   04   | 李云   | 120
   06   | 吴兰   | 99
   ```

4. **加上排序号**
   ```sql
   SELECT 
       t1.s_id, 
       t1.s_name, 
       t1.total_score,
       (SELECT COUNT(t2.total_score) + 1
        FROM (
            SELECT 
                s.s_id, 
                s.s_name, 
                SUM(sc.s_score) AS total_score
            FROM 
                Student s
            JOIN 
                Score sc ON s.s_id = sc.s_id
            GROUP BY 
                s.s_id
        ) t2
        WHERE t2.total_score > t1.total_score) AS rank
   FROM (
       SELECT 
           s.s_id, 
           s.s_name, 
           SUM(sc.s_score) AS total_score
       FROM 
           Student s
       JOIN 
           Score sc ON s.s_id = sc.s_id
       GROUP BY 
           s.s_id
       ORDER BY 
           total_score DESC
   ) t1
   ORDER BY 
       t1.total_score DESC;
   ```

   查询结果：
   ```
   s_id | s_name | total_score | rank
   -----|--------|-------------|-----
   01   | 赵雷   | 266         | 1
   03   | 孙风   | 246         | 2
   02   | 钱电   | 210         | 3
   07   | 郑竹   | 183         | 4
   05   | 周梅   | 163         | 5
   04   | 李云   | 120         | 6
   06   | 吴兰   | 99          | 7
   ```

---

## 1.22 题目21

### 1.22.1 题目需求
查询不同老师所教不同课程的平均分从高到低显示。

### 1.22.2 SQL实现

1. **先找出每个老师教授了哪些课程**
   ```sql
   SELECT 
       c.c_name, 
       t.t_name
   FROM 
       Course c
   LEFT JOIN 
       Teacher t ON c.t_id = t.t_id;
   ```

   查询结果：
   ```
   c_name | t_name
   -------|-------
   数学   | 张三
   语文   | 李四
   英语   | 王五
   ```

2. **将上面的结果和成绩表连接起来**
   ```sql
   SELECT 
       c.c_name, 
       t.t_name, 
       ROUND(AVG(s.s_score), 2) AS avg_score
   FROM 
       Course c
   LEFT JOIN 
       Teacher t ON c.t_id = t.t_id
   LEFT JOIN 
       Score s ON c.c_id = s.c_id
   GROUP BY 
       c.c_id
   ORDER BY 
       avg_score DESC;
   ```

   查询结果：
   ```
   c_name | t_name | avg_score
   -------|--------|----------
   数学   | 张三   | 174.50
   英语   | 王五   | 73.50
   语文   | 李四   | 66.50
   ```

---

## 1.23 题目22

### 1.23.1 题目需求
查询所有课程的成绩第2名到第3名的学生信息及该课程成绩。

### 1.23.2 SQL实现

1. **课程表和成绩表连接起来，显示所有的课程和成绩信息**
   ```sql
   SELECT 
       s.s_id, 
       s.c_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id;
   ```

   查询结果：
   ```
   s_id | c_id | s_score | c_name
   -----|------|---------|------
   01   | 01   | 80      | 语文
   01   | 02   | 90      | 数学
   01   | 03   | 96      | 英语
   02   | 01   | 70      | 语文
   02   | 02   | 60      | 数学
   02   | 03   | 80      | 英语
   03   | 01   | 80      | 语文
   03   | 02   | 81      | 数学
   03   | 03   | 85      | 英语
   04   | 01   | 50      | 语文
   04   | 02   | 40      | 数学
   04   | 03   | 30      | 英语
   05   | 01   | 76      | 语文
   05   | 02   | 87      | 数学
   06   | 01   | 43      | 语文
   06   | 03   | 56      | 英语
   07   | 02   | 89      | 数学
   07   | 03   | 94      | 英语
   ```

2. **查出全部的语文成绩**
   ```sql
   SELECT 
       s.s_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id
   WHERE 
       c.c_name = '语文'
   ORDER BY 
       s.s_score DESC;
   ```

   查询结果：
   ```
   s_id | s_score | c_name
   -----|---------|------
   01   | 80      | 语文
   03   | 80      | 语文
   05   | 76      | 语文
   02   | 70      | 语文
   04   | 50      | 语文
   06   | 43      | 语文
   ```

3. **我们找出语文的第2、3名学生**
   ```sql
   SELECT 
       s.s_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id
   WHERE 
       c.c_name = '语文'
   ORDER BY 
       s.s_score DESC
   LIMIT 1, 2;
   ```

   查询结果：
   ```
   s_id | s_score | c_name
   -----|---------|------
   03   | 80      | 语文
   05   | 76      | 语文
   ```

4. **同时求出语文、数学、英语的分数，并且通过UNION拼接**
   ```sql
   (SELECT 
       s.s_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id
   WHERE 
       c.c_name = '语文'
   ORDER BY 
       s.s_score DESC
   LIMIT 1, 2)
   UNION
   (SELECT 
       s.s_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id
   WHERE 
       c.c_name = '数学'
   ORDER BY 
       s.s_score DESC
   LIMIT 1, 2)
   UNION
   (SELECT 
       s.s_id, 
       s.s_score, 
       c.c_name
   FROM 
       Score s
   JOIN 
       Course c ON s.c_id = c.c_id
   WHERE 
       c.c_name = '英语'
   ORDER BY 
       s.s_score DESC
   LIMIT 1, 2);
   ```

   查询结果：
   ```
   s_id | s_score | c_name
   -----|---------|------
   03   | 80      | 语文
   05   | 76      | 语文
   07   | 89      | 数学
   05   | 87      | 数学
   07   | 94      | 英语
   03   | 85      | 英语
   ```

5. **将上面的结果与学生信息表进行连接**
   ```sql
   SELECT 
       s.s_id, 
       s.s_name, 
       t.c_name, 
       t.s_score
   FROM 
       Student s
   JOIN (
       (SELECT 
           s.s_id, 
           s.s_score, 
           c.c_name
       FROM 
           Score s
       JOIN 
           Course c ON s.c_id = c.c_id
       WHERE 
           c.c_name = '语文'
       ORDER BY 
           s.s_score DESC
       LIMIT 1, 2)
       UNION
       (SELECT 
           s.s_id, 
           s.s_score, 
           c.c_name
       FROM 
           Score s
       JOIN 
           Course c ON s.c_id = c.c_id
       WHERE 
           c.c_name = '数学'
       ORDER BY 
           s.s_score DESC
       LIMIT 1, 2)
       UNION
       (SELECT 
           s.s_id, 
           s.s_score, 
           c.c_name
       FROM 
           Score s
       JOIN 
           Course c ON s.c_id = c.c_id
       WHERE 
           c.c_name = '英语'
       ORDER BY 
           s.s_score DESC
       LIMIT 1, 2)
   ) t ON s.s_id = t.s_id;
   ```

   查询结果：
   ```
   s_id | s_name | c_name | s_score
   -----|--------|--------|--------
   03   | 钱电   | 语文   | 80
   05   | 周梅   | 语文   | 76
   07   | 郑竹   | 数学   | 89
   05   | 周梅   | 数学   | 87
   07   | 郑竹   | 英语   | 94
   03   | 钱电   | 英语   | 85
   ```

---

希望这些优化后的SQL查询能够帮助你更清晰地理解和执行题目要求。如果还有其他问题或需要进一步的帮助，请随时告诉我！