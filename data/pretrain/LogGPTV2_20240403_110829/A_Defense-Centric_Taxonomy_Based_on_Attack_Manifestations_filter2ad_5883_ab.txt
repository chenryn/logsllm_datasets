in this work could have been selected from a range of sys-
tems: Windows, Mac, Linux, etc. Linux on an Intel-based
computer was chosen because of the wide variety and ease
of availability of attacks against it, and because much of the
work in intrusion detection is rooted in Unix.
The victim hardware was a commercial, off-the-shelf
machine equipped with a 450 MHz AMD K6 processor,
256 MB of memory, a single 8GB hard disk, and a 10 / 100
Mbps Ethernet network card. The victim operating system,
installed on the hardware, was standard RedHat Linux 6.2.
The sensor stream of interest was system calls, based on
the idea that sequences of operating-system calls contain
anomalous manifestations of attacks; when an attack oc-
curs, its presence is expected to be indicated by deviations
from normal system-call behavior [6]. Special software (a
kernel patch) is required for monitoring system calls. This
work used the IMMSEC kernel patch by Somayaji and col-
leagues at the University of New Mexico [24]. The installa-
tion procedure is (a) obtain the source code for the version
2.2.13 Linux kernel, (b) apply the IMMSEC patch to this
source code, (c) build the modiﬁed Linux kernel, and (d)
install the new kernel on the victim system.
The victim system was conﬁgured to allow only ssh
connections from the network. It was connected to a pri-
vate research network largely isolated from the Internet by
a ﬁrewall. Other machines on the same network were used
for launching attacks and for assisting in the simulation of
normal behavior.
5.2 Acquire vulnerable programs & attacks
A collection of vulnerable programs and corresponding
attacks upon these programs was assembled so that attacks
could be mounted against the testbed, and their manifesta-
tions observed in a controlled environment.
Programs. What makes a program vulnerable to attack
is that (a) the program runs with privileges higher than those
possessed by the would-be attacker and (b) some ﬂaw in
the program is susceptible to malicious exploitation. An
example of such a ﬂaw is writing to an unchecked buffer;
arbitrary data is written to a ﬁxed-length area of memory
without ﬁrst checking that the length of the data does not
exceed the length of the buffer. A buffer overrun or buffer
overﬂow occurs when more data is written into the buffer
than the buffer can hold. When a buffer is overrun, the extra
data overwrites other data structures (e.g., a return pointer
which tells a program running a particular function the ad-
dress of the machine instruction to execute after the func-
tion terminates). A buffer overrun can be exploited by an
attacker so as to overwrite a return pointer, making it point
to machine instructions that the attacker wishes to execute,
e.g., to give the attacker an interactive command-line in-
terface with superuser privileges (a so-called “rootshell”).
With such a rootshell, the attacker has effectively gained all
the privileges of the vulnerable program.
One kind of program that is often attacked is a sys-
tem program, two examples of which are passwd and
tmpwatch. A system program runs with elevated priv-
ileges (e.g., root privileges, which allow the program to
read, write, modify, delete or execute any ﬁle) beyond those
normally afforded a regular user of a system, making these
programs favorite targets of attackers. For this study, eigh-
teen vulnerable system programs were culled from the well-
known public repository of vulnerability information, Se-
curityFocus [21], and installed on the victim system of
the attacker-defender testbed. The eighteen programs are
shown in Table 1.
dip
imwheel
restore
su
traceroute
xlock
diskcheck
kon2
slocate
passwd
vim
xman
dump
ntop
sudo
tmpwatch
xfs
xterm
Table 1: Vulnerable system programs used in the study.
Vulnerabilities reside in the programs, except for passwd,
whose vulnerability is due to a Linux kernel race condition.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:00 UTC from IEEE Xplore.  Restrictions apply. 
Attacks. Once the vulnerabilities were established, at-
tacks were needed to exploit the vulnerabilities. Attacks are
often available as source code to a program that will auto-
matically exploit the vulnerability. In some cases, this so
called “exploit code” was available on public repositories
and was downloaded. In other cases, exploit code was writ-
ten from scratch using available information about the vul-
nerability. A selection of these exploit codes were copied
and modiﬁed, making variations of an attack, each of which
exploited the same vulnerability but which might manifest
in different ways. The modiﬁcations were guided by previ-
ous work in which we identiﬁed methods to cloak an attack,
making it harder to detect with an anomaly-based intrusion
detection system [26, 29]. Once exploit code was down-
loaded or written, the attack consisted of compiling the ex-
ploit code and launching the resulting program against the
target machine. It was conﬁrmed that each attack worked
as intended. Twenty-ﬁve attacks were collected for this
project, and they are listed in Table 2.
crontabrace
dipbuff
diskcheckrace
diskcheckrace[2]
dumpbx
imwheelbuff
imwheelbuff[2]
kernelexecptrace
kernelexecptrace[2]
kernelexecptrace[3] sulocalefmt
killxfs
kon2buff
ntopspy
restorecool
restorecool[2]
slocateheap
sudomem
tmpwatchexec
traceroutefree
traceroutefree[2]
traceroutefree[3]
xlockfmtstring
xmanprivs
xtermdos
Table 2: The 25 attacks. Square brackets [] denote sec-
ondary [2] and tertiary [3] versions of attacks.
5.3 Gather sensor records of attack behavior
During each attack, the behavior of the vulnerable sys-
tem program, in terms of sequences of system calls gener-
ated by the program, was monitored and recorded via the
system-call sensors deployed on the testbed. Table 3 shows
an excerpt from a system-call log. The numbers indicate the
process IDs of the processes that made the system calls. In
this example, four different processes were executing (i.e.,
processes with IDs 5260 through 5263). The names of the
system calls being executed were brk, lstat, etc. The ac-
tual record speciﬁes system-call numbers, rather than names
(e.g., brk corresponds to system call number 45); the call
names in the ﬁgure were transcribed for readability.
For each of the twenty-ﬁve attacks, sensors monitored
the vulnerable system program that was exploited in the at-
tack. In some cases, the attacker ran the system program
directly, in such a way as to exploit its vulnerability.
In
other cases, the attacker modiﬁed the environment in which
a system program ran, and waited for the system administra-
5261 brk
5261 brk
5261 brk
5261 lstat
5261 getdents
5261 lstat
5261 access
5261 fork
5260 wait4
5262 lstat
5262 chdir
5262 lstat
5262 open
5262 fstat
5262 fcntl
5262 brk
5262 lstat
5262 getdents
5262 lstat
5262 access
5262 fork
5261 wait4
5263 lstat
5263 chdir
5263 lstat
5263 open
5263 fstat
5263 fcntl
5263 lstat
5263 getdents
Table 3: Excerpt of system-call stream (reading down the
columns), as monitored by the testbed; numbers are process
IDs, and names are system-call names.
tor (or a scheduling program that performs regular admin-
istrative tasks, e.g., the cron daemon) to run the vulnera-
ble system program. Whether the attacker ran the system
program directly, or it was run by other means, the sensors
detected when the system program was run, and monitored
the system calls it made.
The sensors were conﬁgured to monitor one system pro-
gram at a time – just the system program being exploited
in an attack. Sensors were enabled before the attack began,
and remained operational for the attack’s duration. When
the system program under attack exited, either naturally
(e.g., through an exit or execve system call) or prema-
turely (e.g., in an attempt to execute an illegal instruction,
or a memory segmentation violation), the sensors were dis-
abled, and the record of the system program’s behavior (i.e.,
series of system calls) during attack was recorded to perma-
nent storage. This record is the attack record. Twenty-ﬁve
attack records were collected, one for each attack.
5.4 Gather sensor records of normal behavior
The attacks used to exploit the system programs were
examined to identify the exact nature by which the misuse
took place. For example, an attack could supply an ex-
traordinarily long value for an environment variable, caus-
ing a buffer to overﬂow.
In addition, the documentation
accompanying each vulnerable system program (e.g., its
“man page”) was reviewed to collect examples of intended
program usage. An intended-usage example was selected
which correctly used the features of the program misused by
the attacker. The vulnerable system program was invoked as
described in the selected example to produce a representa-
tive instance of the normal behavior of the program.3 The
example was chosen so that this normal behavior would re-
ﬂect the behavior during attack, excepting the presence of
3Space limitations preclude full exposition of the normal-behavior
methodology which is available elsewhere.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:00 UTC from IEEE Xplore.  Restrictions apply. 
the attack itself. As an example, if an attacker supplied
an exceptionally long value for an environment variable,
the selected example of intended usage would set the same
environment variable to an appropriate value, as discerned
from the documentation. The record of a system program’s
normal behavior (series of system calls) during intended us-
age was produced in much the same way as the record of
that system program’s behavior during attack. The result-
ing record is called the normal record. Twenty-ﬁve normal
records were collected, one for each attack.
5.5 Extract attack manifestations
An attack that can be detected in system-call sensor data
is said to manifest in system-call data. The manifestation
comprises those sequences of system calls which are due to
the presence or activity of the attack, and which would not
appear if there were no attack. Attack manifestations were
identiﬁed as follows.
(1) The corresponding attack record and normal record
were compared to expose sequences of system calls dif-
fering between the two records. Some sequences may ap-
pear only in the attack record, while others may be miss-
ing from the attack record. (2) Sequences of instructions
were extracted which, when executed, resulted in differ-
ences between sequences of system calls in normal and at-
tack records. The exploit code used in the attack, as well
as the source code of the vulnerable system program, were
consulted to help identify the sequences of instructions due
to the presence of the exploit code. If such instructions ap-
pear in the exploit code, the corresponding system calls in
the attack record are due to the attack. (3) Supplemental
tools were used to gather supporting evidence regarding the
effects of the attack on the system call record. For example,
the strace4 program can be used to provide a detailed
report of the interaction between a program and the oper-
ating system. The strace program was used to associate
the presence of an attack with speciﬁc sequences of sys-
tem calls in the attack record. To ensure that the strace
records showed an alternative view of the same behavior
as the corresponding attack or normal record, it was con-
ﬁrmed that the information included in both records (i.e.,
sequences of system calls) matched; they did.
5.6 Build a defense-centric taxonomy
A taxonomy is a classiﬁcation aid, and any classiﬁer
must do its job on the basis of features that can discrimi-
nate one object or event from another. Consequently, the
ﬁrst step in building a taxonomy is to determine the fea-
tures upon which the classiﬁcation will be based.
In the
present case, the features need to exist in the attack manifes-
tations previously discussed, and they need to be accessible
4The strace program is used to intercept and record the system calls that
are made by a program and the signals that are received by the program. It
is a commonly used debugging tool [25].
to anomaly-based detection systems, because these are the
types of detection systems that will form the basis of future
defense-centric strategies [4, 5, 13].
Features of anomalous sequences were previously stud-
ied by Maxion and Tan [18]. In their discussion of cover-
age of anomaly detectors, they identiﬁed foreign symbols
and foreign sequences as speciﬁc types of anomalies that
can occur in any set of sequential, categorical data (like
the system-call data used here). In later work they identi-
ﬁed, and discussed in detail, another fundamental anomaly
type, the minimal foreign sequence, which is a reﬁnement
of the foreign-sequence concept [27, 28]. Foreign symbols
and minimal foreign sequences were used in the present
work as basic taxonomic features of attack manifestations
in system-call sensor data. Close examination of the at-
tack records revealed two additional manifestations that
were also used as features – dormant sequences and non-
anomalous sequences. The four features, observed in sensor
data as attack manifestations, are deﬁned as follows, with
examples shown in Table 4:
1. Foreign symbol: the attack manifestation contains a
system call which never appears in the normal record.
2. Minimal foreign sequence: the attack manifestation
contains a system-call sequence which itself never appears
in the normal record, but all of whose proper subsequences
do appear in the normal record.
3. Dormant sequence: the attack manifestation contains a
sequence of system calls which matches a proper subse-
quence from the normal record but does not match the full
sequence, because it is, for example, truncated.
4. Non-anomalous sequence: the attack manifestation is
a sequence of system calls which exactly and entirely
matches a normal sequence; that is, the attack produced a
set of system calls that matched the system calls for a nor-
mal, attack-free program.
Sequence type
Example
A A C B B B (the C is foreign)
Normal Sequence A A A B B B
Foreign Symbol
Normal Sequence A A A B B B
Min. Foreign Seq. A A A A B B (4 As is min. foreign)