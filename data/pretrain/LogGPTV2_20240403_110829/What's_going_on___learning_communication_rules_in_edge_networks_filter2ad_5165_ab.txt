false negatives. Two dependent (cid:8)ows may always occur together in
the trace, yet happen so rarely (low P rob(X ∧Y )) that their depen-
dence is not identi(cid:12)ed. On the other hand, an unrelated pair of (cid:8)ows
can have a high joint probability simply because one of the (cid:8)ows is
very popular.
We take an information-theoretic approach to identify statisti-
cally signi(cid:12)cant dependencies—pairs of (cid:8)ows that have much higher
joint probabilities than merely due to chance. Speci(cid:12)cally, we set up
candidate rules of the type X ⇒ Y , where both X and Y are tuples
of  and use JMeasure [ʅʄ], a known metric in
the data-mining community, to score candidate rules.
JM easure(X ⇒ Y ) = I(Y ; X = 1),
(ʄ)
where I(Y ; X = 1) is the mutual information, i.e.:
I(Y ; X = 1) = P (X ∧ Y ) log
P (Y |X)
P (Y )
+ P (X ∧ ¬Y ) log
P (¬Y |X)
P (¬Y )
.
Intuitively, the JMeasure score of rule X ⇒ Y is the reduction
in entropy of the random variable Y when the random variable X
happens. If X and Y were independent, the JMeasure score would
be zero. At the other extreme, if Y is completely dependent on X,
the JMeasure takes the largest possible value, P (X) log
1
P (Y ) .
Unlike other measures of statistical signi(cid:12)cance, such as the Chi-
Square Test [@] and the F-Measure [@], the JMeasure score does en-
code the directionality of the relationship. ˆis is crucial because we
expect dependencies in practice to be uni-directional. For example,
a HTTP connection may trigger a DNS connection but not all DNS
connections happen due to HTTP.
Unfortunately, the JMeasure rule that works well for general data-
mining comes short when identifying network dependencies for the
following reasons.
(a) Negative Correlations: Reduction in entropy occurs in one of
two ways. In the extreme, when X happens, Y may always happen
or Y may never happen. Unfortunately, JMeasure does not di(cid:11)er-
entiate between these two cases and scores both highly. While the
(cid:12)rst type of rules are interesting as they correspond to co-occurring
(cid:8)ows which are likely to be true dependencies, the latter kind hap-
pens trivially o(cid:13)en in network traces and are generally not meaning-
ful. ˆere are so many (cid:8)ows that are much shorter than the duration
of the trace (low P (Y )) that it is easy to (cid:12)nd another (cid:8)ow X that
happens only when Y does not occur, spuriously leading to a high
JMeasure rule. To avoid such rules, we only use the positive corre-
lation part of the JMeasure rule:
Score(X ⇒ Y ) = P (X ∧ Y ) log
P (Y |X)
P (Y )
.
(ʅ)
(b) Long-Running Flows: Long-duration (cid:8)ows pose a challenge
unique to mining network traces. Every one of our traces had (cid:8)ows
that were contiguously active over a signi(cid:12)cant part of the trace–
long downloads (FTP, SMB) and long-running shell sessions (telnet,
ssh, remote-desktop). Given the prevalence of short duration (cid:8)ows,
it is o(cid:13)en the case that a short (cid:8)ow (X) happens only when a long
running (cid:8)ow (Y ) is active. ˆe above scoring technique scores this
pair highly, yielding a spurious rule. To avoid such rules we em-
ploy the following principles. First, we note that spurious rules like
the above happen only when the activity on either side (both X and
Y ) is present. Long-running (cid:8)ows are present in many more time-
windows than they are new, and a short (cid:8)ow that starts many times,
i.e., has many new time-windows, is unlikely to completely coincide
with a long (cid:8)ow. So, we prefer to report rules involving present ac-
tivities only when there is little mis-match between the frequencies
on either side: 1/3 ≤ P (X)
P (Y ) ≤ 3. Second, we do not report rules
involving (cid:8)ows that happen in more than 90% of the time-windows
of the trace. It is unlikely that anything reasonable can be said about
such dominant (cid:8)ows.
(c) Too Many Possibilities: Any statistical test, including our tech-
nique, is based on a simple principle. How likely is the null hypoth-
esis (in this context, the hypothesis that X and Y are independent)
given the score? If a rule has a score value that makes the probabil-
ity of the null hypothesis vanishingly small, the rule is reported as
statistically signi(cid:12)cant. Unfortunately, in network mining there is
a complementary challenge. ˆere are so many (cid:8)ows, and so many
potential rules, that even if each null hypothesis has very small prob-
ability, overall the likelihood of false positives is quite large. eXpose
selectively biases the possible rules it considers to reduce false pos-
itives. First, we note that a rule involving two (cid:8)ows can have upto
four unique IPs–the sources and destinations of the two (cid:8)ows. It is
unlikely that (cid:8)ows which have none of their ends in common are de-
pendent (example: does IP A talk to IP B whenever IP C talks to IP
D?). Hence, we only report rules involving (cid:8)ows that have at-least
one IP address in common. Not only does this shi(cid:13) focus away from
potential rules that are more likely to be false-positives (see §ʇ.ʆ for
evaluation), but it also greatly reduces the number of potential rules,
improving scalability. Second, we note that most (cid:8)ows happen in
such few time windows that there is too little data to predict rela-
tionships for such short (cid:8)ows. So, instead, we focus on the heavy
tail– the K most active (cid:8)ows in the packet trace. K can be set by the
network administrator, otherwise it defaults to ʈʃʃʃ (cid:8)ows. See §ʇ.ʈ
for an analysis of eXpose’s sensitivity to K.
(d) Cut-o(cid:11): eXpose only reports rules that have a signi(cid:12)cance
score (Eq. ʅ) greater than a threshold α which defaults to .01nats. 1
To put this threshold in perspective, note that if two (cid:8)ows are
completely dependent on each other, i.e., P (X) = P (Y ) =
P (X ∧ Y ), then both rules X ⇒ Y and Y ⇒ X will be
output for all non-trivial values of P (X). More interestingly, for
general (cid:8)ows such as the (cid:8)ows from a client to a DNS and an
HTTP server, the rule HT T P ⇒ DN S will be output only when
two conditions hold: (ʄ) co-occurrence better than chance, i.e.,
P (DN S|HT T P ) > P (DN S) and, (ʅ) frequent co-occurrence,
i.e., P (HT T P ∧ DN S) >
log P (DN S|HT T P )−log P (DN S) . Note
the interplay between the two conditions, the more likely a DNS
(cid:8)ow is when an HTTP (cid:8)ow happens, the larger the gap between
P (DN S|HT T P ) and P (DN S), the less stringent the constraint
on frequency of co-occurrence.
.01
2.3 Generic Communication Rules
So far, we have been looking at dependencies between pairs of
(cid:8)ows. But, not all dependencies are visible at this granularity. For
example, suppose whenever a client talks to a sales server, the server
fetches data from a backend database. Clearly this is an impor-
tant dependency, yet it may be missed if no single client accesses
the server frequently (recall that we score based on (cid:8)ow frequency).
Our idea is to relax the granularity at which we look for dependen-
cies. In particular, we report the above dependence as long as all the
clients together access the server o(cid:13)en enough. To achieve this we
introduce generics.
ˆe idea behind generics is similar to wild-cards in regular ex-
pression matching—relax some of the (cid:12)elds in a (cid:8)ow’s (cid:12)ve-tuple.
As an example, whenever the (cid:8)ow Client.SomeP ort : Sales.80
is active in a time window, we introduce a generic ∗.∗ : Sales.80
as being active in that time window. Further, we consider rules like
∗ .∗ : Sales.80 ⇒ Sales.∗ : Database.∗,
(ʆ)
and say that this rule happens whenever some client talks to Sales
and Sales talks to the Database within the same time window. A
more interesting example of a generic rule is:
∗ .∗ : W ebServer.80 ⇒ ∗.∗ : DN S.53.
(ʇ)
For rules that relax IPs on both sides, we say the rule happens in a
time window only if the missing (cid:12)elds on both sides are the same.
It does not matter which client(s) lead to the two relaxed (cid:8)ows, as
long as there is at least one client that talked to both the web-server
and the DNS in that time-window.
2.3.1 Templates for Generic Rules
When to instantiate generics and how to combine them into com-
munication rules? Relaxing exhaustively explodes the number of
(cid:8)ows and rules. Instead, we de(cid:12)ne simple templates for relaxing
(cid:8)ows and for combining the generics into rules. Whenever a (cid:8)ow
matches a relaxation template, we instantiate the corresponding
generic. Rule templates prescribe which combinations of generics
ʄnats stands for units of entropy when natural logarithms are used.
For e.g., log(2) = .693 nats.
Enterprise
0.0071
HotSpot-2
0.0003
HotSpot-1
0.0000
LabEnterprise
0.0029
LabAccess
0.0685
0
0.02
0.04
0.06
0.08
Ratio of running time –Improved/Naive
Figure ʆ: Measurement results compare the computational cost of eXpose’s
mining algorithm with that of a baseline.
and (cid:8)ows are worth considering as a communication rule. We in-
troduce one relaxation template and two rule templates. Our tool
automatically learns all signi(cid:12)cant rules that are formed through in-
stantiations of these templates in the packet trace.
Relaxation Template to Create Generics: Whenever one end of a
(cid:8)ow is a well-known port (@ʃ for http, ʈʆ for DNS, /etc/services has
exhaustive list), we relax the IP at the opposite (client) end. ˆe
idea is to create a generic that abstracts away the client’s IP and fo-
cuses on all accesses to the server. Instead of relying only on the
standard list of well-known server ports, we learn from each trace
the ports used by a large number of (cid:8)ows in that trace and consider
them well-known. ˆis lets us learn the ports used by peer-to-peer
applications. Finally, ports that are not in the well-known list are
considered to be the same for the purpose of matching.
Rule-Templates to build Rules from Generics and Flows: Our (cid:12)rst
template helps to identify server’s backend dependencies. Analo-
gous to the example in Eq. ʆ, this template allows rules that com-
bine a (cid:8)ow with a generic if the un-relaxed IP in the generic (i.e.,
the IP corresponding to the server) matches one of the IPs in the
(cid:8)ow. ˆe second template identi(cid:12)es dependencies that are visible
to a client. Analogous to the example in Eq. ʇ, this template allows
rules involving two generics. Such a rule is active in a time window
only if at-least one client accesses both the server IPs/Ports in that
time window.
2.3.2 Scoring Generic Rules
Rules involving generics, such as the example in Eq. ʇ, become
more interesting as more unique clients conform to the rule. Hence,
we supplement statistical signi(cid:12)cance by a support metric. ˆe sup-
port of a rule involving one or more generics is the number of unique
clients whose communication can be abstracted in the form of the
rule. Clearly, a generic rule with support 1 is a trivial generalization.
Hence, we only report generic rules that have support greater than
a threshold β (default 3).
3. ALGORITHMS TO MINE FOR RULES
So far we introduced generics and the scoring function for sta-
tistical signi(cid:12)cance but how do we mine for communication rules?
ˆe costliest part of rule-mining, in our context, involves computing
how o(cid:13)en each candidate rule occurs in the trace. For a simple rule
that involves only two (cid:8)ows, we need to count the time-windows
when both (cid:8)ows happen; if the rule involves generics, we need to
count time windows that contain (cid:8)ows matching the generics as de-
scribed above.
Our key contribution here is a more e(cid:14)cient way to compute fre-
quencies for all potential rules. Recall that we focus on the top K ac-
tive (cid:8)ows (and generics) a(cid:13)er discarding the really long (cid:8)ows (those
that happen in more than @ʃʂ of the time windows). Suppose the
trace consists of W consecutive time windows. Naively checking
whether each of the O(K 2) pairs of (cid:8)ows occur in each of the time-
windows, takes O(W ∗ K 2) time. ˆe square term, K 2, dominates
the running time and can be quite long. Instead, we observe that in
any time-window only a handful of the K (cid:8)ows are active. ˆus, in-
stead of counting frequencies of all K 2 pairs at each time-window,
we need only count (cid:8)ow pairs that are active in a time window. If
the wth window has Sw (cid:8)ows, our algorithm computes frequencies
for all rules in O(PW
2) time. Fig. ʆ shows the improvement
in computational e(cid:14)ciency with this algorithm on our traces. For
concreteness, we show the pseudo-code of our algorithm.
w=1 Sw
Procedure ʄ ExtractCommRules(Packet Trace)
ʄ: Find F – the set of top K active (cid:8)ows and generics
ʅ: Compute Activity Matrix M for all (cid:8)ows in F
ʆ: Use Rule Templates to Create Candidate Rule set R
ʇ: for all Time Windows w ∈ rows (M ) do
ʈ:
ʉ:
@:
@:
@:
if X ⇒ Y ∈ Candidate Rules R then
UpdateStats Freq(X ⇒ Y )
end for
end if
for all  tuples X, Y ∈ Window w do
if Score(X ⇒ Y ) > α, Support(X ⇒ Y ) > β then
ʄʃ: end for
ʄʄ: for all X ⇒ Y rules in Candidate Rules R do
ʄʅ:
ʄʆ:
ʄʇ:
ʄʈ: end for
Output Rule X ⇒ Y as Signi(cid:12)cant
end if
3.1 Composing Communication Rules
ˆe communication rules discussed above relate only a pair of
(cid:8)ows. Our algorithm and statistical signi(cid:12)cance score naturally ex-
tend to rules involving more than two (cid:8)ows. To see this, note that
if the le(cid:13) side of the rule X ⇒ Y were to be replaced with a con-
junction X1 ∧ X2 ∧ · · · ∧ XN ⇒ Y , both the algorithm and the
signi(cid:12)cance score still apply.
ˆe trade-o(cid:11) is computational complexity versus rule exhaustive-
ness. Looking for rules involving up to N (cid:8)ows would roughly
take O(W ∗ K N ) time, since we would have to check each of
the K N (cid:8)ow groups generated from the top K (cid:8)ows on each of
the W windows in the trace. On the other hand, doing so would
help only when a set of (cid:8)ows are related but none of the pair-
wise relationships are signi(cid:12)cant; for e.g., say F3 is present only
when both F1 is new and F2 is present and never otherwise. Here,
F1.new ∧ F2.present ⇒ F3.present is a signi(cid:12)cant rule but nei-
ther of the pair-wise rules are signi(cid:12)cant enough. We believe in Oc-
cam’s razor, the more complicated a rule, the less likely it would hap-
pen; hence we focus on pair-wise rules.
Complementary to rule exhaustiveness is the problem of group-