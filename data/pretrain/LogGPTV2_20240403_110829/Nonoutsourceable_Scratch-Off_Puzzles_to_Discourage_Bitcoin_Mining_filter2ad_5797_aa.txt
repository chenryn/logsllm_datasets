title:Nonoutsourceable Scratch-Off Puzzles to Discourage Bitcoin Mining
Coalitions
author:Andrew Miller and
Ahmed E. Kosba and
Jonathan Katz and
Elaine Shi
Nonoutsourceable Scratch-Off Puzzles to
Discourage Bitcoin Mining Coalitions
Andrew Miller
Jonathan Katz
Ahmed Kosba
University of Maryland
{amiller,akosba,jkatz}@cs.umd.edu
Elaine Shi
Cornell University
PI:EMAIL
ABSTRACT
An implicit goal of Bitcoin’s reward structure is to diffuse network
inﬂuence over a diverse, decentralized population of individual par-
ticipants. Indeed, Bitcoin’s security claims rely on no single entity
wielding a sufﬁciently large portion of the network’s overall com-
putational power. Unfortunately, rather than participating indepen-
dently, most Bitcoin miners join coalitions called mining pools in
which a central pool administrator largely directs the pool’s activ-
ity, leading to a consolidation of power. Recently, the largest min-
ing pool has accounted for more than half of network’s total mining
capacity. Relatedly, “hosted mining” service providers offer their
clients the beneﬁt of economies-of-scale, tempting them away from
independent participation. We argue that the prevalence of mining
coalitions is due to a limitation of the Bitcoin proof-of-work puzzle
– speciﬁcally, that it affords an effective mechanism for enforc-
ing cooperation in a coalition. We present several deﬁnitions and
constructions for “nonoutsourceable” puzzles that thwart such en-
forcement mechanisms, thereby deterring coalitions. We also pro-
vide an implementation and benchmark results for our schemes to
show they are practical.
1.
INTRODUCTION
Bitcoin [32] and subsequent decentralized cryptocurrencies have
gained rapid popularity in recent years, and are often quoted as “a
peek into the future ﬁnancial and payment infrastructure”. Security
of such cryptocurrencies is critical, and to ensure security the most
fundamental assumption made by decentralized cryptocurrencies is
that no single entity or adminstration wields a large fraction of the
computational resources in the network. Violation of this assump-
tion can lead to severe attacks such as history revision and double
spending which essentially nullify all purported security properties
that are widely believed today.
However, two recent trends in mining – namely, mining pools
and hosted mining – have led to the concentration of mining power,
and have cast serious doubt on the well-foundedness of these funda-
mental assumptions that underly the security of Bit-coin-like cryp-
tocurrencies. Speciﬁcally, mining pools exist because solo miners
wish to hedge mining risks and obtain rewards at a more stable,
steady rate. At several times over the past two years, the largest
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’15 October 12-16, 2015, Denver, CO, USA
Copyright 2015 ACM ISBN 978-1-4503-3832-5/15/10 ... $15.00
DOI: http://dx.doi.org/10.1145/2810103.2813621.
handful of mining pools have accounted for well over a third of
the network’s overall computing effort [10]. For example, recently
the largest mining pool, GHash.IO, has even exceeded 50% of the
total mining capacity.1 Currently, Hosted mining, on the other
hand, allows individuals to outsource their mining effort to one
or a few large service providers. Hosted mining services have al-
ready emerged, such as Alydian [9], whose “launch day pricing was
$65,000 per Terahash, and mining hosting contracts are available in
5 and 10 Th/sec blocks” [9]. Hosted mining is appealing because
it can potentially reduce miners’ cost due to economies of scale.
Henceforth we will refer to both mining pools and hosted mining
as mining coalitions.
Such large mining coalitions present a potential lurking threat
to the security of Bitcoin-like cryptocurrencies. To exacerbate the
matter, several recent works [18, 24] showed that it may be incen-
tive compatible for a mining coalition to deviate from the honest
protocol – in particular, Eyal and Sirer [18] showed that a mining
concentration of about 1/3 of the network’s mining power can ob-
tain disproportionately large rewards by exhibiting certain “selﬁsh
mining” behavior.
While alternatives to centralized mining pools are well-known
and have been deployed for several years, (such as P2Pool, [44] a
decentralized mining pool architecture), these have unfortunatley
seen extremely low user adoption (at the time of writing, they ac-
count for less than 2% of the network). Fundamentally, the problem
is that Bitcoin’s reward mechanism provides no particular incentive
for users to use these decentralized alternatives.
Increasing understanding of these problems has prodded exten-
sive and continual discussions in the broad cryptocurrency commu-
nity, regarding how to deter such coalitions from forming and retain
the decentralized nature of Bitcoin-like cryptocurrencies [27]. The
community demands a technical solution to this problem.
1.1 Our Results and Contributions
Our work provides a timely response to this community-wide
concern [27], providing the ﬁrst formally founded solution to com-
bat Bitcoin mining centralization. Our key observation is the fol-
lowing: an enabling factor in the growth of mining pools is a sim-
ple yet effective enforcement mechanism; members of a mining
pool do not inherently trust one another, but instead submit cryp-
tographic proofs (called “shares”) to the other pool members (or
to the pool operator), in order to demonstrate they are contributing
work that can only beneﬁt the pool (e.g., work that is tied to the
pool operator’s public key).
http://arstechnica.com/security/2014/
1See
06/bitcoin-security-guarantee-shattered-by-
anonymous-miner-with-51-network-power/
680Strongly nonoutsourceable puzzles. Our idea, therefore, is to dis-
able such enforcement mechanisms in a cryptographically strong
manner. To this end, we are the ﬁrst to propose strongly nonout-
sourceable puzzles, a new form of proof-of-work puzzles which
additionally guarantee the following:
If a pool operator can effectively outsource mining work to a
worker, then the worker can steal the reward without producing
any evidence that can potentially implicate itself.
Intuitively, if we can enforce the above, then any pool operator
wishing to outsource mining work to an untrusted worker runs the
risk of losing its entitled mining reward, thus effectively creating a
disincentive to outsource mining work (either in the form of mining
pools or hosted mining). Our nonoutsourceable puzzle is broadly
powerful in that it renders unenforceable even external contractual
agreements between the pool operator and the worker. In partic-
ular, no matter whether the pool operator outsources work to the
worker through a cryptocurrency smart contract or through an out-
of-the-band legal contract, we guarantee that the worker can steal
the reward without leaving behind evidence of cheating.
Technical insights. At a technical level, our puzzle achieves the
aforementioned guarantees through two main insights:
P1: We craft our puzzle such that if a worker is doing a large part
of the mining computation, it must possess a sufﬁciently large
part of a “signing key” such that it can later sign over the re-
ward to its own public key – effectively stealing the award
from the pool operator;
P2: We offer a zero-knowledge spending option, such that a worker
can spend the stolen reward in a way that reveals no informa-
tion (including potential evidence that can be used to implicate
itself).
As a technical stepping stone, we formulate a weaker notion of
our puzzle referred to as a weakly nonoutsourceable puzzle. A
weakly nonoutsourceable puzzle essentially guarantees property P1
above, but does not ensure property P2. As a quick roadmap, our
plan is to ﬁrst construct a weakly nonoutsourceable puzzle, and
from there we devise a generic zero-knowledge transformation to
compile a weakly nonoutsourceable puzzle into a strongly nonout-
sourceable one. It turns out that a weakly nonoutsourceable puzzle
is the implicit security notion adopted by the recent work of Per-
macoin [29] but without being formalized there. In Section 6, we
argue that weakly nonoutsourceable puzzles alone are inadequate
to defeat mining coalitions, and in particular hosted mining.
Implementation and practical performance. We show imple-
mentation and evaluation results to demonstrate the practical per-
formance of our puzzles. Based on an instantiation using the suc-
cinct zero-knowledge option of Libsnark [5], we show that it would
take a cheating worker only 14 seconds (using approximately a
thousand parallel cores) to successfully steal a block reward. Fur-
ther, stealing a block’s reward in zero knowledge consumes only
$10 worth of Amazon AWS compute-time, which is very small in
comparison with the block’s reward – roughly $8,750, based on
Bitcoin’s current market price. Clearly this provides a sufﬁciently
strong deterrent against mining coalitions. Note also that this zero-
knowledge spending option is not normally incurred, since honest
miners can simply adopt a cheap plaintext spending option whose
cost is insigniﬁcant (see Section 6). For both the zero-knowledge
and the cheap plaintext spending options, the block veriﬁcation
overhead is insigniﬁcant (at most 1.7 seconds) in comparison with
the present Bitcoin epoch length (roughly 10 minutes).
Deployment considerations. For our nonoutsourceable puzzles to
be practically deployed, it is also important to address several addi-
tional challenges, such as how to still allow miners to reduce min-
ing uncertainty (i.e., the positive effects of mining pools), and how
to simultaneously address various other design goals such as ASIC
resistance, and lightweight clients. We give detailed explanations to
address these practical issues related to deployment (Section 7.3).
Notably, inspired by the design of state lottery games, we propose
a new, multi-tier reward system that allows us to achieve the best
of both worlds: ensure non-outsourceability of puzzles, and mean-
while allow smaller players to reduce payoff variance.
Community demand and importance of formal security. The
community’s demand for a nonoutsourceable puzzle is also seen
in the emergence of new altcoins [1, 41] that (plan to) adopt their
own home-baked versions of nonoutsourceable puzzles. Their so-
lutions, however, offer only weak nonoutsourceability, and do not
provide any formal guarantees. The existence of these custom con-
structions further motivates our efforts, and demonstrates that it is
non-trivial to both formalize the security notions as well as design
constructions with provable security. To date, our work provides
the only formally-founded solution, as well as the ﬁrst strongly non-
outsourceable puzzle construction.
2. BITCOIN BACKGROUND
We deﬁne puzzles and nonoutsourceable puzzles as an indepen-
dent concept, abstracting away the less relevant details about the
Bitcoin protocol itself. Later, however, we will discuss how the
puzzles we introduce can be integrated into a Bitcoin-like distri-
buted digital currency. For this reason, as well as to understand
the motivation behind our formal deﬁnitions, we ﬁrst present some
additional background on Bitcoin and its use of computational puz-
zles. For a more thorough explanation of the Bitcoin protocol, we
refer the readers to [3, 7, 32].
Puzzles, rewards, and epochs. In Bitcoin, new money is printed
at a predictable rate, through a distributed coin-minting process. At
the time of writing, roughly speaking, 25 bitcoins are minted every
10 minutes (referred to as an epoch) on average. When an epoch
begins, a public puzzle instance is generated by computing an up-
to-date hash of the global transaction log (called the “blockchain”).
Then, Bitcoin nodes race to solve this epoch’s puzzle. Whoever
ﬁrst ﬁnds an eligible solution to the puzzle can claim the newly
minted coins corresponding to this epoch.
In slightly more detail, miners start with the puzzle instance puz,
and construct a payload m which contains (a tree hash over) the
miners public key and a new set of transaction to commit to the
log during this epoch. He then searches for a nonce r such that
H(puz(cid:107)m(cid:107)r) < 2λ−d, where H : {0, 1}∗ → {0, 1}λ is a hash
function and d is a difﬁculty parameter. The difﬁculty parameter is
adjusted according to the total amount of computational resources
devoted to mining to ensure that each epoch lasts 10 minutes on
average.
In Section 4, we formally deﬁne a generalization of Bitcoin’s
puzzle called scratch-off puzzles. More detail about the original
Bitcoin puzzle construction can found in the full online version of
our paper.
Consensus mechanism. Bitcoin nodes reach consensus on the his-
tory of transactions by having nodes accept the blockchain with the
largest total difﬁculty. Roughly speaking, this defeats history re-
vision attacks, since to revise history would involve computing a
blockchain that is more difﬁcult than the known good chain. An
adversary must therefore possess a signiﬁcant fraction of the total
681computational resources to successfully race against the rest of the
network in extending the chain.
Bitcoin is novel in its use of computational puzzles as part of
a consensus protocol for anonymous networks without any pre-
established PKI. A related approach was earlier proposed by Asp-
nes et al. [2], although their network model nonetheless retained a
strong assumption about pre-established point-to-point channels.
3. SCRATCH-OFF PUZZLES
As introduced earlier, the Bitcoin protocol is built around a mod-
erately hard computational puzzle. Bitcoin miners compete to solve
these puzzles, and whoever solves a puzzle ﬁrst in each epoch re-
ceives a reward. As there is no shortcut to solving this puzzle, for
an attacker to dominate the network would require the attacker to
expend more computational resources than the rest of the honest
participants combined. Although the Bitcoin puzzle is commonly
referred to as a proof-of-work puzzle, the requirements of the puz-
zle are somewhat different than existing deﬁnitions for proof-of-
work puzzles [13, 16, 21, 42].
Before proceeding with our main contribution of nonoutsource-
able puzzles, we ﬁrst provide a formal deﬁnition of the basic re-
quirements of the Bitcoin puzzle, which we call a scratch-off puz-
zle.2
In particular, while a traditional proof-of-work puzzle [21]
need only be solvable by a single sequential computation, a scratch-
off puzzle must be solvable by several concurrent non-communi-
cating entities.
In what follows, we let λ denote a security parameter. A scratch-
off puzzle is parameterized by parameters (t, µ, d, t0) where, infor-
mally speaking, t denotes the amount of work needed to attempt a
single puzzle solution, µ refers to the maximum amount by which
an adversary can speed up the process of ﬁnding solutions, d affects
the average number of attempts to ﬁnd a solution, and t0 denotes
the initialiazation overhead of the algorithm. We typically assume
that t0 (cid:28) 2dt, where 2dt is the expected time required to solve a
puzzle.
DEFINITION 1. A scratch-off puzzle is parameterized by pa-
rameters (t, µ, d, t0), and consists of the following algorithms (sat-
isfying properties explained shortly):
1. G(1λ) → puz: generates a puzzle instance.
2. Work(puz, m, t) → ticket: The Work algorithm takes a puzzle
instance puz, some payload m, and time parameter t. It makes
t unit scratch attempts, using t · t + t0 time steps in total. Here
t = poly(λ) is the unit scratch time, and t0 can be thought of
as the initialization and ﬁnalization cost of Work.
3. Verify(puz, m, ticket) → {0, 1}: checks if a ticket is valid for
a speciﬁc instance puz, and payload m. If ticket passes this
check, we refer to it as a winning ticket for (puz, m).
Intuitively, the honest Work algorithm makes t unit scratch at-
tempts, and each attempt has probability 2−d of ﬁnding a winning
ticket, where d is called the puzzle’s difﬁculty parameter. For sim-
plicity, we will henceforth use the notation
ζ(t, d) := 1 − (1 − 2
−d)t
to refer to the probability of ﬁnding a winning ticket using t scratch
attempts. For technical reasons that will become apparent later, we
additionally deﬁne the shorthand ζ +(t, d) := ζ(t + 1, d). For the
2The terms “scratch-off puzzle” and “winning ticket” are motivated
by the observation that Bitcoin’s coin minting process resembles a
scratch-off lottery, wherein a participant expends a unit of effort to
learn if he holds a winning ticket.
remainder of the paper, we assume that the puzzle’s difﬁculty pa-
rameter d is ﬁxed, hence we omit the d and write ζ(t) and ζ +(t) for
simplicity. We also deﬁne the algorithm WorkTillSuccess(puz, m)
as Work(puz, m,∞); i.e., this algorithm runs until it ﬁnds a win-
ning ticket for the given instance and payload.
1. Correctness. For any (puz, m, t), if Work(puz, m, t) outputs
A scratch-off puzzle must satisfy three requirements:
ticket (cid:54)= ⊥, then Verify(puz, m, ticket) = 1.
2. Feasibility and parallelizability. Solving a scratch-off puzzle
is feasible, and can be parallelized. More formally, for any (cid:96) =
poly(λ), for any t1, t2, . . . , t(cid:96) = poly(λ), let t :=(cid:80)
i∈[(cid:96)] ti.
 puz ← G(1λ),
Pr
m ← {0, 1}λ,
∀i ∈ [(cid:96)] : ticketi ← Work(puz, m, ti) :
∃i ∈ [(cid:96)] : Verify(puz, m, ticketi)
≥ ζ(t) − negl(λ).
Intuitively, each unit scratch attempt, taking time t, has proba-
bility 2−d of ﬁnding a winning ticket. Therefore, if (cid:96) potentially
parallel processes each makes t1, t2, . . ., t(cid:96) attempts, the prob-
ability of ﬁnding one winning ticket overall is ζ(t) ± negl(λ)
where t =(cid:80)
i∈[(cid:96)] ti.
3. µ-Incompressibility. Roughly speaking, the work for solving