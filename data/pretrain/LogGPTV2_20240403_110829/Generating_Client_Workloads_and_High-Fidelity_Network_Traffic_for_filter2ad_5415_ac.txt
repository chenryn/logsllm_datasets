issues noted above) they can be synchronized closely with each other at startup time and thereafter 
treated essentially as a single system‐wide clock. This does not work on IBM x‐Series NUMA 
(non‐uniform memory access) machines and their derivatives, however. In these machines, different 
NUMA nodes run off separate clock oscillators. Although the nominal frequencies of the oscillators on 
each NUMA node are the same, each oscillator is controlled by a separate crystal with its own distinct drift 
from the nominal frequency. In addition, the clock rates are intentionally varied dynamically over a small 
range (2 percent or so) to reduce the effects of emitted RF (radio frequency) noise, a technique called 
spread‐spectrum clocking, and this variation is not in step across different nodes.
Despite these drawbacks of the TSC, both operating systems and application programs frequently use the TSC 
for timekeeping.
HPET
The HPET is a device available in some newer PCs. Many PC systems do not have this device and operating 
systems generally do not require it, though some can use it if available. The HPET has one central up‐counter 
that runs continuously unless stopped by software. It may be 32 or 64 bits wide. The counter’s period can be 
read from a register. The HPET provides multiple timers, each consisting of a timeout register that is compared 
with the central counter. When a timeout value matches, the corresponding timer fires. If the timer is set to be 
periodic, the HPET hardware automatically adds its period to the compare register, thus computing the next 
time for this timer to fire. 
The HPET has a few drawbacks. The specification does not require the timer to be particularly fine‐grained, 
to have low drift, or to be fast to read. Some typical implementations run the counter at about 18MHz and 
require about the same amount of time (1–2μs) to read the HPET as with the ACPI timer. Implementations have 
been observed in which the period register is off by 800 parts per million or more. A drawback of the general 
design is that setting a timeout races with the counter itself. If software tries to set a short timeout, but for any 
reason its write to the HPET is delayed beyond the point at which the timeout is to expire, the timeout is 
effectively set far in the future instead (about 232 or 264 counts). Software can stop the central counter, but 
doing so would spoil its usefulness for long‐term timekeeping.
The HPET is designed to be able to replace the PIT and CMOS periodic timers by driving the interrupt lines 
to which the PIT and CMOS timers are normally connected. Most current hardware platforms still have 
physical PIT and CMOS timers and do not need to use the HPET to replace them.
VMware Timer Virtualization
VMware products use a patent‐pending technique to allow the many timer devices in a virtual machine to fall 
behind real time and catch up as needed, yet remain sufficiently consistent with one another that software 
running in the virtual machine is not disrupted by anomalous time readings. In VMware terminology, the time 
that is visible to virtual machines on their timer devices is called apparent time. Generally, the timer devices 
in a virtual machine operate identically to the corresponding timer devices in a physical machine, but they 
show apparent time instead of real time. The following sections note some exceptions to this rule and provide 
some additional details about each emulated timer device.
Copyright © 2008 VMware, Inc. All rights reserved.
6
Timekeeping in VMware Virtual Machines
Virtual PIT
VMware products fully emulate the timing functions of all three timers in the PIT device. In addition, when 
the guest operating system programs the speaker timer to generate a sound, the virtual machine requests a 
beep sound from the host machine. However, the sound generated on the host may not be the requested 
frequency or duration.
Virtual CMOS RTC
Current VMware products emulate all the timing functions of the CMOS RTC, including the time of day clock 
and the periodic, update, and alarm interrupts that the CMOS RTC provides.
Many guest operating systems use the CMOS periodic interrupt as the main system timer, so VMware 
products run it in apparent time to be consistent with the other timer devices. Some guest operating systems 
use the CMOS update interrupt to count off precisely one second to measure the CPU speed or the speed of 
other timer devices, so VMware products run the CMOS update interrupt in apparent time as well.
In contrast, VMware products base the virtual CMOS TOD clock directly on the real time as known to the host 
system, not on apparent time. This choice makes sense because guest operating systems generally read the 
CMOS TOD clock only to initialize the system time at power on and occasionally to check the system time for 
correctness. Operating systems use the CMOS TOD clock this way because it provides time only to the nearest 
second but is battery backed and thus continues to keep time even when the system loses power or is restarted.
Specifically, the CMOS TOD clock shows UTC as kept by the host operating system software, plus an offset. 
The offset from UTC is stored in the virtual machine’s nvram file along with the rest of the contents of the 
virtual machine’s CMOS nonvolatile memory. The offset is needed because many guest operating systems 
want the CMOS TOD clock to show the time in the current local time zone, not in UTC. When you create a new 
virtual machine (or delete the nvram file of an existing virtual machine) and power it on, the offset is initialized, 
by default, to the difference of the host operating system’s local time zone from UTC. If software running in 
the virtual machine writes a new time to the CMOS TOD clock, the offset is updated.
You can force the CMOS TOD clock’s offset to be initialized to a specific value at power on. To do so, set the 
option rtc.diffFromUTC in the virtual machine’s .vmx configuration file to a value in seconds. For example, 
setting rtc.diffFromUTC = 0 sets the clock to UTC at power on, while setting rtc.diffFromUTC = -25200 
sets it to Pacific Daylight Time, seven hours earlier than UTC. The guest operating system can still change the 
offset value after power on by writing a new time to the CMOS TOD clock.
You can also force the CMOS TOD clock to start at a specified time whenever the virtual machine is powered 
on, independent of the real time. To do this, set the configuration file option rtc.startTime. The value you 
specify is in seconds since Jan 1, 1970 00:00 UTC, but it is converted to the local time zone of the host operating 
system before setting the CMOS TOD clock (under the assumption that the guest operating system wants the 
CMOS TOD clock to read in local time). If your guest operating system is running the CMOS TOD clock in 
UTC or some other time zone, you should correct for this when setting rtc.startTime.
The virtual CMOS TOD clock has the following limitation: Because the clock is implemented as an offset from 
the host operating system’s software clock, it changes value if you change the host operating system time. 
(Changing the host time zone has no effect, only changing the actual time.) In most cases this effect is harmless, 
but it does mean that you should never use a virtual machine as a time server providing time to the host 
operating system that it is running on. Doing this can create a harmful positive feedback loop, in which any 
change made to the host time incorrectly changes the guest time, too, causing the host time to appear wrong 
again, which causes a further change to the host time, etc. Whether this effect occurs and how severe it is 
depends on how the guest operating system uses the CMOS TOD clock. Some guest operating systems may 
not use the CMOS TOD clock at all, in which case the problem does not occur. Some guests synchronize to the 
CMOS TOD clock only at boot time, in which case the problem does occur but the system goes around its 
feedback loop only once per guest boot. You can use rtc.diffFromUTC to break such a feedback loop, but it 
is better to avoid the loop in the first place by not using the virtual machine as a time server for the host. Some 
guest operating systems periodically resynchronize to the CMOS TOD clock (say, once per hour), in which case 
the feedback is more rapid and rtc.diffFromUTC cannot break the loop.
Because the alarm interrupt is designed to be triggered when the CMOS TOD clock reaches a specific value, 
the alarm interrupt also operates in real time, not apparent time.
Copyright © 2008 VMware, Inc. All rights reserved.
7
Timekeeping in VMware Virtual Machines
The choice of real or apparent time for each feature of the CMOS RTC device reflects the way guest operating 
systems commonly use the device. Guest operating systems typically have no difficulty with part of the device 
operating in apparent time and other parts operating in real time. However, one unsupported guest operating 
system (USL Unix System V Release 4.21) is known to crash if it sees the CMOS device’s update‐in‐progress 
(UIP) bit set while starting up. It is not known whether this crash would occur on real hardware or whether 
the guest operating system is confused by the fact that the update interrupt, the UIP bit, and the rollover of the 
CMOS TOD clock to the next second do not all occur at the same moment, as they would on real hardware. 
You can work around this problem by setting rtc.doUIP = FALSE in the virtual machineʹs configuration file, 
which forces the UIP bit to always return 0.
NOTE   Do not use the rtc.doUIP = FALSE setting unless you are running a guest operating system that 
requires it. Setting this value for other guest operating systems may prevent timekeeping from working 
correctly.
Virtual Local APIC Timer
VMware products fully emulate the local APIC timer on each virtual CPU. The timer’s frequency is not 
dependent on the host’s APIC timer frequency.
In most cases, the local APIC timer runs in apparent time, matching the other timer devices. However, some 
VMware products are able to recognize cases in which the guest operating system is using tickless 
timekeeping but has nevertheless set up a periodic local APIC timer interrupt. In these cases, the local APIC 
timer runs in a “lazy” mode, in which reading its counter returns the current apparent time, but late APIC 
timer interrupts are allowed to pile up and merge rather than being accumulated as a backlog and causing 
apparent time to be held back until the backlog is caught up. Also, APIC timer interrupts on different virtual 
CPUs are allowed to occur slightly out of order.
Virtual ACPI Timer
VMware products fully emulate a 24‐bit ACPI timer. The timer runs in apparent time, matching the other timer 
devices. It generates an interrupt when the high‐order bit changes value.
Virtual TSC
Current VMware products virtualize the TSC in apparent time. The virtual TSC stays in step with the other 
timer devices visible in the virtual machine. Like those devices, the virtual TSC falls behind real time when 
there is a backlog of timer interrupts and catches up as the backlog is cleared. Thus, the virtual TSC does not 
count cycles of code run on the virtual CPU; it advances even when the virtual CPU is not running. The virtual 
TSC also does not match the TSC value on the host hardware. When a virtual machine is powered on, its 
virtual TSC is set, by default, to run at the same rate as the host TSC. If the virtual machine is then moved to a 
different host without being powered off (that is, either using VMotion or suspending the virtual machine on 
one host and resuming it on another), the virtual TSC continues to run at its original power‐on rate, not at the 
host TSC rate on the new host machine.
You can force the virtual TSC’s rate to a specific value N (in cycles per second or Hz) by adding the setting 
timeTracker.apparentHz = N to the virtual machine’s .vmx configuration file. This feature is rarely needed. 
One possible use is to test for bugs in guest operating systems—for example, Linux 2.2 kernels hang during 
startup if the TSC runs faster than 4GHz. Note that this feature does not change the rate at which instructions 
are executed. In particular, you cannot make programs run more slowly by setting the virtual TSC’s rate to a 
lower value.