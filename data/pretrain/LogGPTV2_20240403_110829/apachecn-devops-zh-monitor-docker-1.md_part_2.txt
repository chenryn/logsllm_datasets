一旦被克隆，您应该会看到一个名为`monitoring-docker`的目录，然后进入该目录，如下所示:
```
cd ~/Documents/Projects/monitoring-docker
```
# 运行虚拟服务器
在存储库中，您将找到两个文件夹，其中包含启动 CentOS 7 或 Ubuntu 14.04 虚拟服务器所需的`Vagrant`文件。
如果您想使用 CentOS 7 游民箱，请将目录更改为`vagrant-centos`:
```
cd vagrant-centos
```
一旦进入游民-centos 目录，就会看到有一个`Vagrant`文件；启动 CentOS 7 虚拟服务器只需要这个文件。虚拟服务器启动后，将安装最新版本的`docker`和`docker-compose`，并且`monitoring-docker`目录也将使用挂载点`/monitoring-docker`挂载到虚拟机内部。
要启动虚拟服务器，只需键入以下命令:
```
vagrant up
```
这将从[https://atlas.hashicorp.com/russmckendrick/boxes/centos71](https://atlas.hashicorp.com/russmckendrick/boxes/centos71)下载最新版本的流浪盒，然后启动虚拟服务器；这是一个 450 MB 的下载，所以下载可能需要几分钟；它只需要做一次。
如果一切顺利，您应该会看到类似以下输出的内容:
![Running a virtual server](img/00003.jpeg)
现在您已经启动了虚拟服务器，您可以使用以下命令连接到它:
```
vagrant ssh
```
登录后，应确认`docker`和`docker-compose`均可用:
![Running a virtual server](img/00004.jpeg)
最后，您可以尝试使用以下命令运行`hello-world`容器:
```
docker run hello-world
```
如果一切按预期进行，您应该会看到以下输出:
![Running a virtual server](img/00005.jpeg)
要尝试更有野心的东西，可以使用以下命令运行 Ubuntu 容器:
```
docker run -it ubuntu bash
```
在我们启动并进入 Ubuntu 容器之前，让我们通过检查可以在`/etc`中找到的发布文件来确认我们正在运行 CentOS 主机:
![Running a virtual server](img/00006.jpeg)
现在，我们可以启动 Ubuntu 容器了。使用相同的命令，我们可以通过查看其发布文件来确认我们在 Ubuntu 容器中:
![Running a virtual server](img/00007.jpeg)
要退出容器，只需输入`exit`。这将停止容器的运行，因为它已经终止了容器中唯一正在运行的进程，即 bash，并将您返回到主机 CentOS 机器。
从我们的 CentOS 7 主机上可以看到，我们已经启动并移除了一个 Ubuntu 容器。
CentOS 7 和 Ubuntu 游民文件都将在您的虚拟机上配置一个静态 IP 地址。是`192.168.33.10`；此外，在[也有这个 IP 地址的 DNS 记录。这些将允许您访问任何暴露在浏览器中的容器，无论是在`http://192.168.33.10/`还是](http://docker.media-glass.es)[http://docker.media-glass.es/](http://docker.media-glass.es/)。
### 类型
网址[http://docker.media-glass.es/](http://docker.media-glass.es/)只在游民箱打开的时候工作，你有一个服务网页的容器在运行。
通过运行以下命令，您可以看到这一点:
```
docker run -d -p 80:80russmckendrick/nginx-php
```
### 类型
**下载示例代码**
您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有 Packt Publishing 书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
这将下载并启动一个运行 NGINX 的容器。然后可以在浏览器中前往`http://192.168.33.10/`或[http://docker.media-glass.es/](http://docker.media-glass.es/)；你应该看看禁书。这是因为我们还没有给 NGINX 提供任何内容(这方面的更多内容将在本书后面介绍):
![Running a virtual server](img/00008.jpeg)
更多的例子和想法，去[http://docs.docker.com/userguide/](http://docs.docker.com/userguide/)的网站。
# 暂停虚拟服务器
要退出虚拟服务器并返回到您的本地机器，请键入`exit`。
您现在应该看到本地机器的终端提示；但是，您启动的虚拟服务器仍将在后台愉快地运行，使用资源，直到您使用以下命令关闭它:
```
vagrant halt
```
使用`vagrant destroy`完全终止虚拟服务器:
```
vagrant destroy
```
要检查虚拟服务器的当前状态，您可以运行以下命令:
```
vagrant status
```
以下输出给出了前面命令的结果:
![Halting the virtual server](img/00009.jpeg)
重新启动虚拟服务器或从头开始创建虚拟服务器，都可以通过再次发出`vagrant up`命令来实现。
前面的细节展示了如何使用 CentOS 7 流浪盒。如果您更喜欢启动 Ubuntu 14.04 虚拟服务器，您可以使用以下命令进入`vagrant-ubuntu`目录下载并安装游民箱:
```
cd ~/Documents/Projects/monitoring-docker/vagrant-ubuntu
vagrant up
```
从这里，您将能够运行 float up，并遵循用于引导和与 CentOS 7 虚拟服务器交互的相同指令。
# 总结
在本章中，我们讨论了不同类型的服务器，还讨论了容器化的应用如何适合每一个类别。我们还安装了 VirtualBox，并使用游民推出了 CentOS 7 或 Ubuntu 14.04 虚拟服务器，安装了`docker`和`docker-compose`。
我们新的虚拟服务器环境将在接下来的章节中用于测试各种不同类型的监控。在下一章中，我们将通过使用 Docker 的内置功能来探索关于我们正在运行的容器的指标来开始我们的旅程。