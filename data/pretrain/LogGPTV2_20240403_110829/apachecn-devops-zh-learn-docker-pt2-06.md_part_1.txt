# 六、在容器中运行服务
到目前为止，我们已经仔细解释了 Docker 技术的各个方面。前面的章节无疑已经为被压倒性接受的 Docker 平台奠定了坚实的基础，接下来的章节将会像在这个宏伟的基础上精心打造的建筑一样。
我们描述了重要的构建块(高度可用和可重用的 Docker 映像)来产生强大的 Docker 容器。这里简要介绍了各种易于学习和使用的技术，以及如何通过设计良好的存储框架存储和共享 Docker 映像的技巧。通常，映像必须经过一系列不断的验证、确认和细化，以便对有抱负的开发社区来说是正确的和相关的。
在这一章中，我们将通过详细介绍创建小型网络服务器、在容器中运行该服务器以及使外部人员能够通过互联网连接到容器化网络服务器的关键步骤，将我们的学习提升到一个新的水平。
在本章中，我们将涵盖以下主题:
*   容器网络
*   **容器即服务**(**CaaS**)–构建、运行、暴露和连接到容器服务
*   发布和检索容器的端口
*   将容器绑定到特定的 IP 地址
*   自动生成 Docker 主机端口
*   使用`EXPOSE`和`-P`选项进行端口绑定
## 容器网络概述
网络是企业和云信息技术的关键基础设施组件。特别是，随着计算变得极其分散，网络变得不可或缺。通常，一个 Docker 主机包含多个 Docker 容器，因此网络已经成为实现复合容器化应用的关键组件。Docker 容器还需要与本地和远程容器进行交互和协作，以推出分布式应用。准确地说，不同的分布式容器需要被公开发现、网络可访问和可组合，以产生以业务为中心和过程感知的应用。
Docker 容器化范例的关键优势之一是无需用户付出太多努力就能无缝联网的能力。Docker 的早期版本只支持桥接网络；后来，Docker 收购了 SDN 初创公司 SocketPlane，以增加额外的网络功能。从那以后，Docker 的网络能力突飞猛进，引入了一组单独的子命令，即`docker network connect`、`docker network create`、`docker network disconnect`、`docker network inspect`、`docker network ls`和`docker network rm`，来处理 Docker 网络的本质。默认情况下，在安装过程中，Docker Engine 会为您创建三个网络，您可以使用`docker network ls`子命令列出这些网络，如下所示:
![](img/image_06_001.jpg)
正如你在前面的截图中看到的，在 Docker 设置期间，Docker 引擎创建了`bridge`、`host`和`none` ( `null`)网络。默认情况下，当 Docker 旋转一个新容器时，它会为该容器创建一个网络栈，并连接到默认的`bridge`网络。但是，您可以选择使用`docker run`子命令的`--net`选项将容器连接到`host`或`none`网络或用户定义的网络。如果您选择`host`网络，容器将连接到`host`网络栈，并共享主机的 IP 地址和端口。`none`网络模式仅使用环回(`lo`)接口创建网络栈。我们可以使用`docker run --rm --net=none busybox ip addr`命令确认这一点，如下所示:
![](img/image_06_002.jpg)
显然，正如您在前面的截图中看到的，容器只有一个环回接口。因为这个容器只有一个环回接口，所以它不能与其他容器或外部世界通信。
如果未使用`docker run`子命令的`--net`选项配置网络，则`bridge`网络是 Docker Engine 分配给容器的默认网络接口。为了更好地理解`bridge`网络，让我们首先使用`docker network inspect`子命令对其进行检查，如下所示:
![](img/image_06_003.jpg)
在上面的截图中，我们强调了三个至关重要的见解。您可以找到 Docker 安装过程中发生的相关描述:
*   `docker0` : Docker 在 Linux 内核内部创建一个以太网桥接口，在 Docker 主机上使用`docker0`名称。该接口用作容器之间以及容器与外部网络之间传递以太网帧的桥梁。
*   `Subnet` : Docker 还从`172.17.0.0`到`172.17.255.255`的地址范围中选择了一个私有 IP 子网，并以其容器而备受尊敬。在前面的截图中，Docker 为容器选择了`172.17.0.0/16`子网。
*   `Gateway`:`docker0`接口是`bridge`网络的网关，Docker 从之前选择的 IP 子网范围中为`docker0`分配一个 IP 地址。这里，在前面的例子中，`172.17.0.1`被分配给网关。
我们可以通过使用`ip addr show` Linux 命令列出`docker0`接口来交叉检查网关地址:
```
$ ip addr show docker0
```
输出的第三行显示了分配的 IP 地址及其网络前缀:
```
inet 172.17.0.1/16 scope global docker0 
```
显然，从前面的文本来看，`172.17.0.1`是分配给以太网桥接口`docker0`的 IP 地址，在`docker network inspect bridge`命令的输出中也被列为网关地址。
现在我们已经清楚地了解了网桥创建和子网/网关地址选择过程，让我们更详细地探讨一下`bridge`模式下的容器联网。在`bridge`网络模式下，在容器启动期间，Docker Engine 创建一个具有 Loopback ( `lo`)接口和 Ethernet ( `eth0`)接口的网络栈。我们可以通过运行`docker run --rm busybox ip addr`命令来快速检查这一点:
![](img/image_06_004.jpg)
显然，`ip addr`命令的前面输出显示 Docker 引擎已经为容器创建了一个具有两个网络接口的网络栈，如下所示:
*   第一个接口是`lo`(环回)接口，Docker 引擎为其分配了`127.0.0.1`环回地址。环回接口用于容器内的本地通信。
*   第二个接口是`eth0`(以太网)接口，Docker 引擎为其分配了`172.17.0.3` IP 地址。显然，该地址也属于`docker0`以太网桥接口的相同 IP 地址范围。此外，分配给`eth0`接口的地址用于容器内通信和主机到容器的通信。
The `ip addr` and/or `ifconfig` commands are not supported by all Docker images, including `ubuntu:14.04` and `ubuntu:16.04`. The `docker inspect` subcommand is the reliable way to find the IP address of the container.
前面我们提到了`docker0`，以太网桥接口，作为容器之间以及容器和外部世界之间传递以太网帧的管道。然而，我们还没有澄清容器如何与`docker0`桥连接。下图揭示了这种联系的一些奥秘:
![](img/image_06_005.png)
如图所示，容器的`eth0`接口使用`veth`连接到`docker0`桥。`eth0`和`veth`接口属于一种特殊类型的 Linux 网络接口，称为**虚拟以太网** ( **veth** )接口。`veth`接口总是成对出现，它们就像一根水管，从一个`veth`接口发送的数据会从另一个接口出来，反之亦然。Docker 引擎将其中一个`veth`接口分配给名称为`eth0`的容器，并将容器 IP 地址分配给该接口。配对的另一个`veth`接口绑定到`docker0`桥接接口。这确保了 Docker 主机和容器之间的无缝数据流。
Docker 将私有 IP 地址分配给容器，这是无法从 Docker 主机外部访问的。然而，容器 IP 地址对于 Docker 主机内的调试来说很方便。正如我们前面提到的，许多 Docker 映像不支持`ip addr`或`ifconfig`命令，此外，我们可能无法直接访问容器提示来运行这些命令。幸运的是，Docker 提供了一个`docker inspect`子命令，它像瑞士军刀一样方便，可以深入了解 Docker 容器或映像的低级细节。`docker inspect`子命令报告了很多细节，包括 IP 地址和网关地址。实际上，您可以选择一个正在运行的容器或临时启动一个容器，如下所示:
```
$ sudo docker run -itd ubuntu:16.04   
```
这里，我们假设容器 ID 为`4b0b567b6019`，运行`docker inspect`子命令，如下图所示:
```
$ sudo docker inspect 4b0b567b6019
```
这个命令生成了大量关于容器的信息。这里，我们从`docker inspect`子命令的输出中显示了容器网络配置的一些摘录:
```
"Networks": {
 "bridge": {
 "IPAMConfig": null,
 "Links": null,
 "Aliases": null,
 "NetworkID": "ID removed for readability",
 "EndpointID": "ID removed for readability",
 "Gateway": "172.17.0.1",
 "IPAddress": "172.17.0.3",
 "IPPrefixLen": 16,
 "IPv6Gateway": "",
 "GlobalIPv6Address": "",
 "GlobalIPv6PrefixLen": 0,
 "MacAddress": "02:42:ac:11:00:03"
 }
}
```
以下是网络配置中一些重要字段的详细信息:
*   `Gateway`:这是容器的网关地址，也是`bridge`接口的地址
*   `IPAddress`:这是分配给容器的 IP 地址
*   `IPPrefixLen`:这是 IP 前缀长度，另一种表示子网掩码的方式
毫无疑问，`docker inspect`子命令非常方便找到容器或映像的细微细节。然而，仔细检查令人生畏的细节并找到我们热切寻找的正确信息是一项令人厌倦的工作。也许，您可以使用`grep`命令将其缩小到正确的信息。或者，更好的是，`docker inspect`子命令帮助您使用`docker inspect`子命令的`--format`选项从 JSON 数组中选择正确的字段。
值得注意的是，在下面的例子中，我们使用`docker inspect`子命令的`--format`选项来检索容器的 IP 地址。可通过 JSON 阵列的`.NetworkSettings.IPAddress`字段访问该 IP 地址:
```
$ sudo docker inspect \
 --format='{{.NetworkSettings.IPAddress}}' 4b0b567b6019
172.17.0.3
```
除了`none`、`host`和`bridge`网络模式外，Docker 还支持`overlay`、`macvlan`和`ipvlan`网络模式。
## 将容器视为服务
我们为 Docker 技术的基础打下了良好的基础。在本节中，我们将重点关注用 HTTP 服务创建一个映像，使用创建的映像在容器中启动 HTTP 服务，然后演示与容器中运行的 HTTP 服务的连接。
### 构建一个 HTTP 服务器映像
在本节中，我们将创建一个 Docker 映像，以便在 Ubuntu 16.04 基础映像上安装 Apache2，并使用`ENTRYPOINT`指令配置一个 Apache HTTP 服务器作为可执行文件运行。
在[第三章](03.html)、*构建映像*中，我们举例说明了`Dockerfile`的概念，在 Ubuntu 16.04 基础映像之上构建一个 Apache2 映像。这里，在这个例子中，我们将使用`ENTRYPOINT`指令，通过设置 Apache 日志路径并将 Apache2 设置为默认执行应用来扩展这个`Dockerfile`。以下是`Dockerfile`内容的详细说明。
我们将使用`FROM`指令构建一个以`ubuntu:16.04`为基础映像的映像，如`Dockerfile`片段所示:
```
########################################### 
# Dockerfile to build an apache2 image 
########################################### 
# Base image is Ubuntu 
FROM ubuntu:16.04 
```
使用`MAINTAINER`指令设置作者的详细信息:
```
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
```
使用一条`RUN`指令，我们将同步 APT 资源库源列表，安装`apache2`包，然后清理检索到的文件:
```
# Install apache2 package 
RUN apt-get update && \ 
     apt-get install -y apache2 && \ 
     apt-get clean 
```
使用`ENV`指令设置 Apache 日志目录路径:
```
# Set the log directory PATH 
ENV APACHE_LOG_DIR /var/log/apache2 
```
现在，最后的指令是使用`ENTRYPOINT`指令启动`apache2`服务器:
```
# Launch apache2 server in the foreground 
ENTRYPOINT ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"] 
```
在前一行中，您可能会惊讶地看到`FOREGROUND`参数。这是传统范例和容器范例之间的关键区别之一。在传统范例中，服务器应用通常作为服务或守护程序在后台启动，因为主机系统是通用系统。然而，在容器范例中，必须在前台启动一个应用，因为映像是为唯一目的而制作的。
已经在`Dockerfile`中规定了映像构建指令，现在让我们进入下一个逻辑步骤，通过将映像命名为`apache2`，使用`docker build`子命令构建映像，如下所示:
```
$ sudo docker build -t apache2 .  
```
现在让我们使用`docker images`子命令快速验证映像:
```
$ sudo docker images
```
正如我们在前面章节中看到的，`docker images`命令显示 Docker 主机中所有映像的详细信息。然而，为了精确地说明使用`docker build`子命令创建的映像，我们从完整的映像列表中突出显示了`apache2:latest`(目标映像)和`ubuntu:16.04`(基础映像)的细节，如以下输出片段所示:
```
    apache2 latest 1b34e47c273d About a minute ago 265.5 MB