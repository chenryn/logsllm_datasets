Filipe, Markus Dürmuth, Elissa Redmiles, and Blase Ur.
What was that site doing with my facebook password?:
Designing password-reuse notiﬁcations. In Proceedings
of the ACM Conference on Computer and Communica-
tions Security, 2018.
1568    28th USENIX Security Symposium
USENIX Association
[21] Andy Greenberg. Hackers are passing around a
megaleak of 2.2 billion records. https://www.wired.com/
story/collection-leak-usernames-passwords-billions/,
2019.
[33] Lucy Li, Bijeeta Pal, Junade Ali, Nick Sullivan, Rahul
Chatterjee, and Thomas Ristenpart. Protocols for check-
ing compromised credentials. https://rist.tech.cornell.
edu/papers/c3.pdf , 2019.
[22] Iftach Haitner, Jonathan J Hoch, and Gil Segev. A linear
lower bound on the communication complexity of single-
server private information retrieval. In Proceedings of
the Theory of Cryptography Conference, 2008.
[23] Eiji Hayashi and Jason Hong. A diary study of password
usage in daily life. In Proceedings of the Conference on
Human Factors in Computing Systems, 2011.
[24] Bernardo A Huberman, Matt Franklin, and Tad Hogg.
Enhancing privacy and trust in electronic communities.
In Proceedings of the ACM Conference on Electronic
Commerce, 1999.
[25] Troy Hunt. Password reuse, credential stufﬁng and an-
other billion records in Have I been pwned. https://www.
troyhunt.com/password-reuse-credential-stufﬁng-and-
another- 1- billion- records- in- have- i- been- pwned/,
2017.
[26] Troy Hunt.
Have i been pwned?
haveibeenpwned.com/, 2019.
https : / /
[27] Stanisław Jarecki and Xiaomin Liu. Fast secure com-
putation of set intersection. In Proceedings of the Inter-
national Conference on Security and Cryptography for
Networks, 2010.
[28] Sowmya Karunakaran, Kurt Thomas, Elie Bursztein, and
Oxana Comanescu. Data breaches: user comprehension,
expectations, and concerns with handling exposed data.
In Proceedings of the Symposium on Usable Privacy
and Security, 2018.
[29] Joe Kilian. Founding crytpography on oblivious trans-
In Proceedings of the Symposium on Theory of
fer.
Computing, 1988.
[30] Hugo Krawczyk. Cryptographic extraction and key
derivation: The HKDF scheme. In Proceedings of the
Annual Cryptology Conference, 2010.
[31] Brian Krebs. Sextortion scam uses recipient’s hacked
https:// krebsonsecurity.com/ 2018/ 07/
passwords.
sextortion-scam-uses-recipients-hacked-passwords/,
2018.
[32] Eyal Kushilevitz and Rafail Ostrovsky. Replication is
not needed: Single database, computationally-private
information retrieval. In Foundations of Computer Sci-
ence, 1997. Proceedings., 38th Annual Symposium on,
pages 364–373. IEEE, 1997.
[34] libsodium. The Argon2 function. https:// libsodium.
gitbook . io / doc / password _ hashing / the _ argon2i _
function, 2019.
[35] William R Marczak, John Scott-Railton, Morgan
Marquis-Boire, and Vern Paxson. When governments
hack opponents: a look at actors and technology.
In
Proceedings of the USENIX Security Symposium, 2014.
[36] Neil Matatall. New improvements and best practices for
account security and recoverability. https://github.blog/
2018-07-31-new-improvements-and-best-practices-
for-account-security-and-recoverability/, 2018.
[37] Tara Matthews, Kerwell Liao, Anna Turner, Marianne
Berkovich, Robert Reeder, and Sunny Consolvo. She’ll
just grab any device that’s closer: A study of everyday
device & account sharing in households. In Proceed-
ings of the Conference on Human Factors in Computing
Systems, 2016.
[38] Catherine Meadows. A more efﬁcient cryptographic
matchmaking protocol for use in the absence of a con-
tinuously available third party. In Proceedings of the
IEEE Symposium on Security and Privacy, 1986.
[39] William Melicher, Blase Ur, Sean M Segreti, Saranga
Komanduri, Lujo Bauer, Nicolas Christin, and Lor-
rie Faith Cranor. Fast, lean, and accurate: Modeling
password guessability using neural networks. In Pro-
ceedings of the USENIX Security Symposium, 2016.
[40] Ariana Mirian, Joe DeBlasio, Stefan Savage, Geof-
frey M. Voelker, , and Kurt Thomas. Hack for hire:
Exploring the emerging market for account hijacking.
In Proceedings of The Web Conf, 2019.
[41] Theresa O’Connor. A well-known url for changing
passwords. https:// wicg.github.io/ change-password-
url/index.html, 2018.
[42] Password Ping. LastPass selects PasswordPing for
https : / / www.
compromised credential screening.
passwordping.com/lastpass-selects-passwordping-for-
compromised-credential-screening/, 2017.
[43] Password Ping. Block attacks from compromised cre-
dentials. https://www.passwordping.com/, 2019.
[44] Sarah Pearman, Jeremy Thomas, Pardis Emani Naeini,
Hana Habib, Lujo Bauer, Nicolas Christin, Lorrie Faith
Cranor, Serge Egelman, and Alain Forget. Let’s go in
for a closer look: Observing passwords in their natural
USENIX Association
28th USENIX Security Symposium    1569
habitat. In Proceedings of the 2017 ACM Conference
on Computer and Communications Security, 2017.
[45] Benny Pinkas, Thomas Schneider, and Michael Zohner.
Faster private set intersection based on ot extension. In
Proceedings of the USENIX Security Symposium, 2014.
[46] Michael O. Rabin. How to exchange secrets by oblivious
transfer. Technical report, Tech. rep. TR-81, AikenCom-
putation Laboratory, Harvard University, Cambridge,
MA, 1981.
[47] Richard Shay, Iulia Ion, Robert W Reeder, and Sunny
Consolvo. "My religious aunt asked why I was trying
to sell her viagra": experiences with account hijacking.
In Proceedings of ACM Conference on Human Factors
in Computing Systems, 2014.
[48] Jeff Shiner. Finding pwned passwords with 1pass-
word. https:// blog.1password.com/ ﬁnding-pwned-
passwords-with-1password/, 2019.
[49] Elizabeth Stobert and Robert Biddle. The password
life cycle: User behaviour in managing passwords. In
Proceedings of the Symposium on Usable Privacy and
Security, 2014.
[50] Brett Stone-Gross, Marco Cova, Lorenzo Cavallaro, Bob
Gilbert, Martin Szydlowski, Richard Kemmerer, Christo-
pher Kruegel, and Giovanni Vigna. Your botnet is my
botnet: Analysis of a botnet takeover. In Proceedings of
the ACM Conference on Computer and Communications
Security, 2009.
[51] Kurt Thomas, Frank Li, Ali Zand, Jacob Barrett, Juri
Ranieri, Luca Invernizzi, Yarik Markov, Oxana Co-
manescu, Vijay Eranti, Angelika Moscicki, et al. Data
breaches, phishing, or malware?: Understanding the
risks of stolen credentials. In Proceedings of the ACM
Conference on Computer and Communications Security,
2017.
[52] International Telecommunications Union. Statistics.
https:// www.itu.int/ en/ ITU-D/ Statistics/ Pages/ stat/
default.aspx, 2019.
[53] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel
Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein,
Thomas F Wenisch, Yuval Yarom, and Raoul Strackx.
Foreshadow: Extracting the keys to the intel SGX king-
dom with transient out-of-order execution. In Proceed-
ings of the USENIX Security Symposium, 2018.
[54] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank
Piessens, and Raoul Strackx. Telling your secrets with-
out page faults: Stealthy page table-based attacks on
In Proceedings of the USENIX
enclaved execution.
Security Symposium, 2017.
[55] Emanuel von Zezschwitz, Alexander De Luca, and Hein-
rich Hussmann. Survival of the shortest: A retrospective
analysis of inﬂuencing factors on password composi-
tion. In Proceedings of the International Conference on
Human-Computer Interaction, 2013.
[56] Rick Wash, Emilee Rader, Ruthie Berman, and Zac
Wellmer. Understanding password choices: How fre-
quently entered passwords are re-used across websites.
In Proceedings of the Symposium on Usable Privacy
and Security, 2016.
[57] Daniel Lowe Wheeler. zxcvbn: Low-budget password
In Proceedings of the USENIX
strength estimation.
Security Symposium, 2016.
[58] Victoria Woollaston. Facebook and netﬂix reset pass-
words after data breaches. http:// www.wired.co.uk/
article/facebook-netﬂix-password-reset, 2016.
A Anonymity Sets
In this section, we describe properties of anonymity sets (from
Section 2.3) in more detail. Recall that anonymity sets are
large sets of user credentials that provide plausible deniability
about client data even if information about their membership
in this set is revealed. Deﬁning and arguing with anonymity
sets is challenging and must be done carefully so as to avoid
some trivialities. To avoid constructions with vacuous security,
we require anonymity sets to have the following properties.
Large marginal supports: Our anonymity sets containing
tuples (u, p) must additionally have sufﬁciently large marginal
supports over both usernames and passwords. This ensures
that despite there being several possible tuples (u, p), there
is sufﬁciently large ambiguity about whether membership
implies a speciﬁc username or password. A trivial anonymity
set, for example, might have several possible credentials with
different passwords all tied to the same username.
More mathematically, given an anonymity set K of size |K|,
we require that the size of the following sets:
SuppUser(K) := {u : (u, p) ∈ K} ,
SuppPwd(K) := {p : (u, p) ∈ K} ,
both have large cardinalities comparable to that of |K|. Ob-
serve that |SuppUser(K)| indicates how many bits of infor-
mation about the username is leaked (smaller sets narrow the
set of possible users and leak a lot of information). This is
similarly true for |SuppPwd(K)| for passwords.
Hashing both usernames and passwords with cryptograph-
ically strong hash functions satisﬁes these requirements. In
fact, it is possible that both sets have cardinalities as large
|K| itself which would imply that for every possible common
password there might be a username such that (u, p) ∈ K. This
is true in our scheme modeling Argon2 as a random oracle.
1570    28th USENIX Security Symposium
USENIX Association
Schemes that only hash passwords, as noted previously in
Section 2.4, might still satisfy a weaker anonymity property.
They hide usernames, but depending on how they truncate
hashes, password-only schemes might allow for small or large
SuppPwd sets. Thus, they might satisfy these requirements,
but only weakly at least with respect to passwords. Further-
more, it is not true that for every password there is a username
which might be part of the client’s credentials, unlike our
scheme. We also note that our trivial example, of having sev-
eral passwords all tied to the same username, violates our
requirement by having |SuppUser(K)| = 1.
Uniformity requirement: This is a more challenging require-
ment to model mathematically. Intuitively, however, it states
that anonymity sets should partition the space of usernames
and passwords in a somewhat uniform manner. In other words,
over random choices of the system parameters, it should be
equally likely for any (u, p) to end up in any anonymity set.
A trivial anonymity set violating this requirement would, as
an example, only truncate usernames, thereby trivially leak-
ing some information about the username. Truncation does
not make it equally likely that any (u, p) can end up in any
anonymity set.
Under the reasonable assumption that our hash function
is independent of the domain of typical usernames and
passwords and does not have any “weak inputs”—domains
of inputs where it does not behave like an ideal hash
function—this condition is easily satisﬁed. It is highly improb-
able that related credentials such as username, username0,
username123, will all end up in the same anonymity set.
B Security of the Hash-and-Blind operation
In this section, we outline the security properties satisﬁed
by the hash-and-blind operation, which is an important part
of our protocol. Consider a keyed function F(k,x) := H(x)k
where H : {0,1}∗ → G is a hash function mapping strings to
a group element. In our construction, H is Argon2, and G is
the elliptic curve NID_secp224r1.
The work of Jarecki et al. [27] shows that F(k,·) imple-
ments an oblivious pseudorandom function in the random
oracle model assuming the hardness of the decision Difﬁe-
Hellman assumption in G. In this section, we do not elabo-
rate on the details of the proof, but we state what is meant
by a pseudorandom function and how F(k,·) can be evalu-
ated obliviously—without the secret key k holder knowing
which input they’re evaluating on. Pseudorandomness helps
us achieve bounded leakage and protects the credentials not
queried by the user; obliviousness enables us to implement the
Difﬁe-Hellman blinding based private set intersection within
our protocol.
Pseudorandomness: Informally, a function F(k,·) with out-
puts in Y is said to be pseudorandom if the function be-
haves like a random function when evaluated on new in-
puts. More formally, given outputs F(k,x1), . . . ,F(k,xQ) for
Q queries x1, . . . ,xQ of an adversary’s choice, for any other
x(cid:48) (cid:54)∈ {x1, . . . ,xQ}, we require that F(k,x(cid:48)) be computationally
indistinguishable from a random element in Y as long as k is
chosen uniformly at random and remains hidden.
When applied to our construction, it implies that a client
that sees several possible H(ui, pi)b still cannot distinguish
H(u(cid:48), p(cid:48))b from a random element in G if b is hidden.
Hash-and-blind therefore protects the contents of the server
database when interacting with clients. For the sake of com-
pleteness, we add that this protocol is only secure against
honest-but-curious adversaries which assumes that a client
might be curious to learn more than it is allowed to, but
chooses to honestly follow the protocol.
Obliviousness: A function is said to be evaluated in an obliv-
ious manner if there is a protocol between a client holding
an input x and a server holding a function f such that at
the end of the protocol, the client learns f (x) and the server
learns nothing. In our construction, f (x) = H(x)b for some
value b. The protocol between the client and server is fairly
straightforward (and somewhat implicit in our construction):
the client chooses a uniform random value a, sends H(x)a,
receives H(x)ab, and reconstructs
(cid:16)
H(x)ab(cid:17)1/a
f (x) =
= H(x)b.
Correctness is fairly straightforward. To see why this is
oblivious, observe that for any two inputs x1 and x2, the distri-
butions H(x1)r and H(x2)s for uniformly drawn values r and s
are identical. This implies that the server learns nothing about
the client’s input x.
When applied to our construction, it states that the compo-
nent H(u, p)a computed in Algorithm 2 allows the client to
obliviously evaluate the PRF without revealing to the server
information about the credential (u, p).
We end this section with a couple of notes. First, a caveat
noting that some information about (u, p) does end up being
leaked via the anonymity set, which we capture through our
notion of leakage. A direct composition of proofs of security
involving anonymity sets and obliviousness might be tricky
and will require careful work. Deriving keys from these PRF
outputs will additionally require careful applications of KDFs
with the right domain separators to avoid re-use of crypto
components.
Second, Everspaugh et al. [14] propose an OPRF service
that is closely related to our construction here. Our require-
ments out of an OPRF differs on a couple of key points which
does not enable us to use such a service directly: 1) we do not
require the notion of partial obliviousness in their construc-
tion which adds signiﬁcant computational overheads to their
service, and 2) our clients use of an OPRF does not require an
immediate evaluation of the PRF, but rather its application to a
database to obliviously evaluate its inputs and return potential
matches.
USENIX Association
28th USENIX Security Symposium    1571