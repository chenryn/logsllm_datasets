### References

1. **Filipe, Markus Dürmuth, Elissa Redmiles, and Blase Ur.**  
   "What was that site doing with my Facebook password? Designing password-reuse notifications."  
   *In Proceedings of the ACM Conference on Computer and Communications Security*, 2018.

2. **Andy Greenberg.**  
   "Hackers are passing around a megaleak of 2.2 billion records."  
   *Wired*, 2019.  
   [Link](https://www.wired.com/story/collection-leak-usernames-passwords-billions/)

3. **Lucy Li, Bijeeta Pal, Junade Ali, Nick Sullivan, Rahul Chatterjee, and Thomas Ristenpart.**  
   "Protocols for checking compromised credentials."  
   2019.  
   [Link](https://rist.tech.cornell.edu/papers/c3.pdf)

4. **Iftach Haitner, Jonathan J Hoch, and Gil Segev.**  
   "A linear lower bound on the communication complexity of single-server private information retrieval."  
   *In Proceedings of the Theory of Cryptography Conference*, 2008.

5. **Eiji Hayashi and Jason Hong.**  
   "A diary study of password usage in daily life."  
   *In Proceedings of the Conference on Human Factors in Computing Systems*, 2011.

6. **Bernardo A. Huberman, Matt Franklin, and Tad Hogg.**  
   "Enhancing privacy and trust in electronic communities."  
   *In Proceedings of the ACM Conference on Electronic Commerce*, 1999.

7. **Troy Hunt.**  
   "Password reuse, credential stuffing, and another billion records in Have I Been Pwned."  
   *Troy Hunt's Blog*, 2017.  
   [Link](https://www.troyhunt.com/password-reuse-credential-stuffing-and-another-1-billion-records-in-have-i-been-pwned/)

8. **Troy Hunt.**  
   "Have I Been Pwned?"  
   *haveibeenpwned.com*, 2019.  
   [Link](https://haveibeenpwned.com/)

9. **Stanisław Jarecki and Xiaomin Liu.**  
   "Fast secure computation of set intersection."  
   *In Proceedings of the International Conference on Security and Cryptography for Networks*, 2010.

10. **Sowmya Karunakaran, Kurt Thomas, Elie Bursztein, and Oxana Comanescu.**  
    "Data breaches: user comprehension, expectations, and concerns with handling exposed data."  
    *In Proceedings of the Symposium on Usable Privacy and Security*, 2018.

11. **Joe Kilian.**  
    "Founding cryptography on oblivious transfer."  
    *In Proceedings of the Symposium on Theory of Computing*, 1988.

12. **Hugo Krawczyk.**  
    "Cryptographic extraction and key derivation: The HKDF scheme."  
    *In Proceedings of the Annual Cryptology Conference*, 2010.

13. **Brian Krebs.**  
    "Sextortion scam uses recipient’s hacked passwords."  
    *Krebs on Security*, 2018.  
    [Link](https://krebsonsecurity.com/2018/07/sextortion-scam-uses-recipients-hacked-passwords/)

14. **Eyal Kushilevitz and Rafail Ostrovsky.**  
    "Replication is not needed: Single database, computationally-private information retrieval."  
    *In Foundations of Computer Science, 38th Annual Symposium on*, pages 364–373. IEEE, 1997.

15. **libsodium.**  
    "The Argon2 function."  
    *libsodium Documentation*, 2019.  
    [Link](https://libsodium.gitbook.io/doc/password_hashing/the_argon2i_function)

16. **William R. Marczak, John Scott-Railton, Morgan Marquis-Boire, and Vern Paxson.**  
    "When governments hack opponents: a look at actors and technology."  
    *In Proceedings of the USENIX Security Symposium*, 2014.

17. **Neil Matatall.**  
    "New improvements and best practices for account security and recoverability."  
    *GitHub Blog*, 2018.  
    [Link](https://github.blog/2018-07-31-new-improvements-and-best-practices-for-account-security-and-recoverability/)

18. **Tara Matthews, Kerwell Liao, Anna Turner, Marianne Berkovich, Robert Reeder, and Sunny Consolvo.**  
    "She’ll just grab any device that’s closer: A study of everyday device & account sharing in households."  
    *In Proceedings of the Conference on Human Factors in Computing Systems*, 2016.

19. **Catherine Meadows.**  
    "A more efficient cryptographic matchmaking protocol for use in the absence of a continuously available third party."  
    *In Proceedings of the IEEE Symposium on Security and Privacy*, 1986.

20. **William Melicher, Blase Ur, Sean M. Segreti, Saranga Komanduri, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor.**  
    "Fast, lean, and accurate: Modeling password guessability using neural networks."  
    *In Proceedings of the USENIX Security Symposium*, 2016.

21. **Ariana Mirian, Joe DeBlasio, Stefan Savage, Geoffrey M. Voelker, and Kurt Thomas.**  
    "Hack for hire: Exploring the emerging market for account hijacking."  
    *In Proceedings of The Web Conf*, 2019.

22. **Theresa O’Connor.**  
    "A well-known URL for changing passwords."  
    *Web Incubator Community Group (WICG)*, 2018.  
    [Link](https://wicg.github.io/change-password-url/index.html)

23. **Password Ping.**  
    "LastPass selects PasswordPing for compromised credential screening."  
    *Password Ping Blog*, 2017.  
    [Link](https://www.passwordping.com/lastpass-selects-passwordping-for-compromised-credential-screening/)

24. **Password Ping.**  
    "Block attacks from compromised credentials."  
    *Password Ping Website*, 2019.  
    [Link](https://www.passwordping.com/)

25. **Sarah Pearman, Jeremy Thomas, Pardis Emani Naeini, Hana Habib, Lujo Bauer, Nicolas Christin, Lorrie Faith Cranor, Serge Egelman, and Alain Forget.**  
    "Let’s go in for a closer look: Observing passwords in their natural habitat."  
    *In Proceedings of the 2017 ACM Conference on Computer and Communications Security*, 2017.

26. **Benny Pinkas, Thomas Schneider, and Michael Zohner.**  
    "Faster private set intersection based on OT extension."  
    *In Proceedings of the USENIX Security Symposium*, 2014.

27. **Michael O. Rabin.**  
    "How to exchange secrets by oblivious transfer."  
    *Technical Report TR-81, Aiken Computation Laboratory, Harvard University*, 1981.

28. **Richard Shay, Iulia Ion, Robert W. Reeder, and Sunny Consolvo.**  
    "My religious aunt asked why I was trying to sell her Viagra: experiences with account hijacking."  
    *In Proceedings of ACM Conference on Human Factors in Computing Systems*, 2014.

29. **Jeff Shiner.**  
    "Finding pwned passwords with 1Password."  
    *1Password Blog*, 2019.  
    [Link](https://blog.1password.com/finding-pwned-passwords-with-1password/)

30. **Elizabeth Stobert and Robert Biddle.**  
    "The password lifecycle: User behavior in managing passwords."  
    *In Proceedings of the Symposium on Usable Privacy and Security*, 2014.

31. **Brett Stone-Gross, Marco Cova, Lorenzo Cavallaro, Bob Gilbert, Martin Szydlowski, Richard Kemmerer, Christopher Kruegel, and Giovanni Vigna.**  
    "Your botnet is my botnet: Analysis of a botnet takeover."  
    *In Proceedings of the ACM Conference on Computer and Communications Security*, 2009.

32. **Kurt Thomas, Frank Li, Ali Zand, Jacob Barrett, Juri Ranieri, Luca Invernizzi, Yarik Markov, Oxana Comanescu, Vijay Eranti, Angelika Moscicki, et al.**  
    "Data breaches, phishing, or malware?: Understanding the risks of stolen credentials."  
    *In Proceedings of the ACM Conference on Computer and Communications Security*, 2017.

33. **International Telecommunications Union.**  
    "Statistics."  
    *ITU Website*, 2019.  
    [Link](https://www.itu.int/en/ITU-D/Statistics/Pages/stat/default.aspx)

34. **Jo Van Bulck, Marina Minkin, Ofer Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.**  
    "Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution."  
    *In Proceedings of the USENIX Security Symposium*, 2018.

35. **Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul Strackx.**  
    "Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution."  
    *In Proceedings of the USENIX Security Symposium*, 2017.

36. **Emanuel von Zezschwitz, Alexander De Luca, and Heinrich Hussmann.**  
    "Survival of the shortest: A retrospective analysis of influencing factors on password composition."  
    *In Proceedings of the International Conference on Human-Computer Interaction*, 2013.

37. **Rick Wash, Emilee Rader, Ruthie Berman, and Zac Wellmer.**  
    "Understanding password choices: How frequently entered passwords are re-used across websites."  
    *In Proceedings of the Symposium on Usable Privacy and Security*, 2016.

38. **Daniel Lowe Wheeler.**  
    "zxcvbn: Low-budget password strength estimation."  
    *In Proceedings of the USENIX Security Symposium*, 2016.

39. **Victoria Woollaston.**  
    "Facebook and Netflix reset passwords after data breaches."  
    *Wired UK*, 2016.  
    [Link](http://www.wired.co.uk/article/facebook-netflix-password-reset)

### Appendix A: Anonymity Sets

In this section, we provide a detailed description of the properties of anonymity sets, as introduced in Section 2.3. Anonymity sets are large sets of user credentials that offer plausible deniability about client data, even if membership in these sets is revealed. Defining and working with anonymity sets requires careful consideration to avoid trivialities and ensure meaningful security.

#### Properties of Anonymity Sets

1. **Large Marginal Supports:**
   - **Definition:** Anonymity sets containing tuples \((u, p)\) must have sufficiently large marginal supports over both usernames and passwords.
   - **Rationale:** This ensures that despite there being several possible tuples \((u, p)\), there is enough ambiguity about whether membership implies a specific username or password.
   - **Mathematical Formulation:**
     - Let \(K\) be an anonymity set of size \(|K|\).
     - Define:
       \[
       \text{SuppUser}(K) := \{u : (u, p) \in K\}
       \]
       \[
       \text{SuppPwd}(K) := \{p : (u, p) \in K\}
       \]
     - Both \(\text{SuppUser}(K)\) and \(\text{SuppPwd}(K)\) should have large cardinalities comparable to \(|K|\).
     - **Implication:** Smaller \(\text{SuppUser}(K)\) or \(\text{SuppPwd}(K)\) would narrow the set of possible users or passwords, leaking more information.

2. **Hashing Both Usernames and Passwords:**
   - **Requirement:** Hashing both usernames and passwords with cryptographically strong hash functions satisfies the requirement of large marginal supports.
   - **Example:** Using Argon2 as a random oracle can result in both \(\text{SuppUser}(K)\) and \(\text{SuppPwd}(K)\) having cardinalities as large as \(|K|\).

3. **Uniformity Requirement:**
   - **Intuition:** Anonymity sets should partition the space of usernames and passwords in a uniform manner.
   - **Formalization:** Over random choices of system parameters, it should be equally likely for any \((u, p)\) to end up in any anonymity set.
   - **Assumption:** If the hash function is independent of the domain of typical usernames and passwords and does not have weak inputs, this condition is easily satisfied.

### Appendix B: Security of the Hash-and-Blind Operation

In this section, we outline the security properties of the hash-and-blind operation, a crucial component of our protocol.

#### Keyed Function \(F(k, x) := H(x)^k\)
- **Function Definition:** Consider a keyed function \(F(k, x) := H(x)^k\) where \(H: \{0,1\}^* \rightarrow G\) is a hash function mapping strings to a group element.
- **Construction Details:**
  - \(H\) is Argon2.
  - \(G\) is the elliptic curve NID_secp224r1.

#### Oblivious Pseudorandom Function (OPRF)
- **Security Proof:** The work of Jarecki et al. [27] shows that \(F(k, \cdot)\) implements an oblivious pseudorandom function (OPRF) in the random oracle model, assuming the hardness of the decision Diffie-Hellman assumption in \(G\).

#### Pseudorandomness
- **Informal Definition:** A function \(F(k, \cdot)\) with outputs in \(Y\) is pseudorandom if it behaves like a random function when evaluated on new inputs.
- **Formal Definition:** Given outputs \(F(k, x_1), \ldots, F(k, x_Q)\) for \(Q\) queries \(x_1, \ldots, x_Q\) chosen by an adversary, for any other \(x' \notin \{x_1, \ldots, x_Q\}\), \(F(k, x')\) should be computationally indistinguishable from a random element in \(Y\) as long as \(k\) is chosen uniformly at random and remains hidden.
- **Application:** In our construction, a client that sees several possible \(H(u_i, p_i)^b\) cannot distinguish \(H(u', p')^b\) from a random element in \(G\) if \(b\) is hidden.

#### Obliviousness
- **Definition:** A function is evaluated obliviously if there is a protocol between a client holding an input \(x\) and a server holding a function \(f\) such that the client learns \(f(x)\) and the server learns nothing.
- **Protocol:**
  - The client chooses a uniform random value \(a\).
  - The client sends \(H(x)^a\).
  - The server responds with \(H(x)^{ab}\).
  - The client reconstructs \(f(x) = (H(x)^{ab})^{1/a} = H(x)^b\).
- **Correctness and Security:**
  - Correctness is straightforward.
  - For any two inputs \(x_1\) and \(x_2\), the distributions \(H(x_1)^r\) and \(H(x_2)^s\) for uniformly drawn values \(r\) and \(s\) are identical, ensuring that the server learns nothing about the client’s input \(x\).

#### Notes
1. **Leakage via Anonymity Sets:** Some information about \((u, p)\) may still leak through the anonymity set, which is captured by our notion of leakage.
2. **Composition of Proofs:** Directly composing proofs of security involving anonymity sets and obliviousness might be tricky and requires careful work.
3. **Key Derivation Functions (KDFs):** Deriving keys from PRF outputs will require careful applications of KDFs with the right domain separators to avoid re-use of cryptographic components.
4. **Comparison with Everspaugh et al. [14]:** Our requirements for an OPRF differ from those in their construction, specifically in avoiding partial obliviousness and immediate evaluation of the PRF.

---

This revised version aims to provide a clear, coherent, and professional presentation of the references and appendices.