### Architecture and Components

Our system maintains a persistent local database to store network configurations, such as bridges and ports. In addition to this core architecture, we have introduced several optimizations tailored for mobile devices and added new components, which are detailed in Section III. The new components include:

1. **Application Abstraction Layer**: Implemented in the framework layer to provide application awareness.
2. **PBS Protocol Handler**: Integrated into our secure control channel.
3. **PBS-DROID Data Plane and Management Plane**: Deployed in the kernel space.
4. **Arbiter**: Manages various user/device contexts at runtime.

### Evaluation

#### Design Goals
Our primary design goals are:
- Fine-grained access control
- Dynamic policy enforcement
- Network-wide programmability
- Minimal performance overhead

To achieve these goals, our evaluation focuses on two main aspects:
1. Measuring the performance overhead (both at the network and system levels).
2. Demonstrating use cases that showcase our ability to enforce security policies on mobile devices.

#### A. Performance Overhead

**Testing Environment**
To measure the performance overhead of PBS-DROID on real Android devices, we used an LG Nexus 5 equipped with a Qualcomm MSM8974 Snapdragon 800 CPU and an Asus Nexus 7 tablet with an ARM Cortex-A9. Both devices run Android 4.4 (KitKat). Our network controller runs on Ubuntu Linux x64 with a Quad Core CPU and 8 GB of memory.

**1. Network Performance Overhead**
The network overhead of PBS-DROID is primarily due to flow installation and policy enforcement processes, which involve flow lookups, new flow requests, and flow/policy installations between the device and the controller. We measured this processing delay by testing the average round trip time of 100 packets from our testing devices (with and without PBS) to popular high-availability servers (e.g., google.com).

**Table III: Average Packet Processing Overhead**

| Server     | NX5 (ms) | NX5 (PBS) (ms) | NX7 (ms) | NX7 (PBS) (ms) |
|------------|----------|----------------|----------|----------------|
| google.com | 16       | 18             | 16       | 18             |
| facebook.com | 43      | 47             | 45       | 49             |
| yahoo.com  | 59       | 64             | 40       | 42             |

As shown in Table III, there is no significant increase in packet round trip time introduced by PBS-DROID. The delays include the flow installation overhead for the first unknown incoming packet, which is higher than the processing time for subsequent known packets. Once the flow rule is installed, all packets in the same flow will no longer need to go through the controller. Both devices with PBS-DROID show similar packet processing delays, indicating that the overhead is negligible.

**Figure 15: Throughput Benchmark**

In addition to packet processing overhead, we also tested the impact of PBS-DROID on network throughput using the iperf tool. We opened the iperf server as a communication port to listen to the client application on the device and set the test duration to 10 minutes with a two-second interval between periodic bandwidth reports. As shown in Figure 15, the average overhead of bandwidth for the Nexus 5 is approximately 9%, and for the Nexus 7, it is 7%. These results demonstrate that the network bandwidth overhead is acceptable, attributed to the implementation of the flow cache and policy tables in the operating system kernel space.

**2. System Performance Overhead**
We evaluated the system performance in the following order:
1. Comparing overall system performance scores with and without PBS-DROID using standard Android benchmark tools.
2. Breaking down and comparing individual performance metrics: CPU, memory, and battery overhead.

**Benchmark Tools**
We used four representative Android benchmark tools for the evaluation:
- **Antutu**: Tests all aspects of the device, including CPU, RAM, I/O, etc.
- **Geekbench**: Provides a comprehensive measurement relative to other Android devices.
- **Vellamo**: Encompasses several system-level performance metrics such as I/O, mobile processor, and browsing.
- **PCMark**: Measures real-world performance based on everyday activities and battery life.

**Overall System Performance Overhead**
Figures 16a and 17a show the overall benchmark scores. A higher score denotes better performance. Based on our evaluation, we observed the following overheads introduced by PBS-DROID:
- Nexus 5: 5.3% in Antutu, 1.1% in Vellamo, 6.0% in Geekbench, and 5.7% in PCMark.
- Nexus 7: 1.4% in Antutu, 5.3% in Vellamo, 5.0% in Geekbench, and 2.2% in PCMark.

**CPU and RAM Overhead**
To evaluate the CPU and RAM overhead introduced by PBS-DROID, we used Geekbench and Vellamo. The results are as follows:
- **Nexus 5**: 5.9% CPU overhead (Geekbench), 2.7% CPU overhead (Vellamo), 4.2% RAM overhead (Antutu), and 4.8% RAM overhead (Geekbench).
- **Nexus 7**: 5.3% CPU overhead (Geekbench), 7.3% CPU overhead (Vellamo), 0.8% RAM overhead (Antutu), and 0.2% RAM overhead (Geekbench).

**Battery Overhead**
To verify the feasibility of PBS-DROID on resource-limited mobile devices, we evaluated the battery overhead using PCMark. We charged the battery to full capacity (100%) and tested until the charge dropped below 20%. Table IV summarizes the overhead by battery attribute for work performance (browsing, writing, video playback, and photo editing).

**Table IV: Battery Overhead Measurement (lower is better)**

| Attribute   | NX5 (mAh) | NX5 PBS Over. (%) | NX7 (mAh) | NX7 PBS Over. (%) |
|-------------|-----------|--------------------|-----------|--------------------|
| Browsing    | 3741      | 4.95               | 1972      | 8.25               |
| Writing     | 3174      | 2.99               | 2591      | 4.73               |
| Video       | 4118      | 3.84               | 3893      | 3.84               |
| PhotoEdit   | 4804      | 0.23               | 4948      | 0.23               |
| Total       | 2176      | 4.73               | 10504     | 4.41               |

Overall, the battery overhead for the Nexus 5 is 4.73%, and for the Nexus 7, it is 4.41%. This indicates that PBS-DROID does not significantly increase battery consumption compared to stock Android devices.

### B. Use Cases

In this section, we demonstrate the effectiveness of PBS-DROID in enforcing security policies.

**Deployment Environment**
For our evaluation, we deployed PBS-DROID to manage three buildings (Ba, Bb, Bc) in our campus facilities. The colored areas in Figure 18 designate the local-based enforcement radius of each building. Devices within the radius fall under location-specific context policies, as measured by on-device high-accuracy GPS.

**1. Use Case 1: Network Activity Logging**
Network logging and measurement are essential features in network administration. To demonstrate PBS-DROID's capability, we developed a demonstration controller application called `netlog`. This application, written in less than 300 lines of Java code, provides both a broad and deep view of network activity. It logs device connection activity, network history, and location updates, providing detailed insights into device activity on the network.

**2. Use Case 2: Network Policy Enforcement**
While network logging is essential, it is of little value without real-time, context-specific programmability. PBS-DROID can react based on the device's network and context-specific information. We defined dynamic network policies to be enforced by our prototype SDN controller application, `netpol`. These policies include application-specific, device context, and device role and authorization policies.

**Table V: Policies specifying application, device, and time restrictions by context**

| Policy Action | Flow         | Application Context | Device Context | Time Context   |
|---------------|--------------|---------------------|----------------|----------------|
| Deny          | D1 to/fro D2 | a                   | -              | 08:00-12:00    |
| Deny          | D1 to/fro D2 | a                   | -              | 12:00-17:00    |
| Allow         | D1 to/fro D2 | a                   | -              | 12:00-13:00    |
| Deny          | D1 to H1     | b                   | Ba             | -              |
| Deny          | D2 to H1     | b                   | Ba             | -              |

When running application `a`, all network connection attempts are monitored by the central network controller provided by PBS-DROID. If no rule exists, the controller is queried for a policy decision. For time-based policies, the controller issues a proactive rule update precisely at noon, updating the policy table on each device.

**Table VI: Location and Role Restriction**

| Connection Policy | Device | Location | Application |
|-------------------|--------|----------|-------------|
| Allow             | D1a    | Bb       | all         |
| Deny              | D2a    | Bb       | all         |
| Allow             | c      | Bb       | all         |
| Deny              | b      | all      | all         |

When the device context switches from one location to another, the controller is notified, triggering a local policy modification in the device flow table. In our scenario, application `a` has context-specific access based on the device utilizing the app. While allowed by the supervisor `D1` in building `Bb`, an authorized device `D2` may not run `a` in `Bb`. Wildcard policies can also be applied, such as never allowing application `b` to access the network, while an enterprise-authorized application `c` is granted all accesses.

**3. Use Case 3: Application Flow Path Management**
In this use case, we demonstrate how PBS-DROID can manage application flow paths, ensuring that specific applications are routed through designated network paths based on security and performance requirements. This feature enhances the overall security and efficiency of the network by dynamically adjusting flow paths according to the current network conditions and security policies.