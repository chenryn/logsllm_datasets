maintains a persistent local database to store network conﬁg-
urations (i.e., bridge, ports, etc.). Beyond this architecture, we
modiﬁed the architecture with our optimization schemes ded-
icated to mobile devices and added new components designed
in Section III. For the new components, we implemented: (i)
application abstraction layer in the framework layer to provide
application awareness, (ii) PBS protocol handler in our secure
control channel, (iii) PBS-DROID Data Plane and Management
Plane in the kernel space, and (iv) Arbiter to manage various
user/device contexts at run-time.
IV. EVALUATION
Our design goals are ﬁne-grained access control, dynamic
policy enforcement, network-wide programmability, and min-
imal performance overhead impact. In accordance with these
goals, our evaluation is two-fold: (1) to measure its perfor-
mance overhead (network level and system level) and (2)
to demonstrate use cases which showcase our capabilities to
enforce security policies on mobile devices.
A. Performance Overhead
Testing Environment. To measure the performance over-
head imposed by PBS-DROID on a real Android Device, we
use an LG Nexus 5 equipped with a Qualcomm MSM8974
Snapdragon 800 CPU and an Asus Nexus 7 tablet with an
ARM Cortex-A9. Both testing devices run Android system
version 4.4 (KitKat). Our network controller runs on Ubuntu
Linux x64 with a Quad Core CPU with 8 GB of memory.
1) Network Performance Overhead: The network overhead
of PBS is mainly incurred by the ﬂow installation and policy
enforcement processes. These processes are always accompa-
nied by a ﬂow lookup, a new ﬂow request, and a ﬂow/policy
installation between the device/controller over the network.
Thus, it is imperative that the network performance evalua-
tion should include ﬂow and policy processing overhead. We
measure this processing delay by testing the average round trip
time of 100 packets from our testing devices (with and without
PBS) to popular high availability servers (e.g., google.com).
As shown in Table III, there is no notable increase in packet
round trip time introduced by PBS. We also note that these
delays include the ﬂow installation overhead for the ﬁrst
unknown incoming packet which is much higher than the
processing time for the following known packets. Once the
ﬂow rule is installed all packets in the same ﬂow will no longer
need to go through the controller. Both devices with PBS show
10
Server
NX5 NX5(PBS) NX7 NX7(PBS)
google.com 16ms 18ms
facebook.com 43ms 47ms
yahoo.com 59ms 64ms
18ms 20ms
45ms 49ms
40ms 42ms
TABLE III: Average Packet Processing Overhead
Fig. 15: Throughput Benchmark
similar packet processing delay. The overhead incurred by PBS
is negligible for both devices, inline with our goal.
In addition to packet processing overhead measurement, we
also test the overhead for PBS system on network throughput
by using a standard tool, iperf. In particular, we open the iperf
server as a communication port to listen to the client applica-
tion on the device, and set test duration as 10 minutes with
a two-second interval between periodic bandwidth reports.
As shown in Figure 15, the average overhead of bandwidth
for the Nexus 5 shows approximately 9% overhead and 7%
for the Nexus 7. Our evaluation results demonstrate that the
network bandwidth overhead is acceptable. We attribute this
performance impact to the implementation of the ﬂow cache
and policy tables in the operating system kernel space.
2) System Performance Overhead: We evaluate the system
performance in the following order. (1) We compare the overall
system performance scores with and without PBS as measured
by standard Android benchmark tools. (2) We break down
and compare the overall scores into individual performance
metrics: CPU, memory, and battery overhead.
Benchmark Tools. We use four representative Android
benchmark tools for the evaluation: Antutu, Geekbench, Vel-
lamo, and PCMark. Antutu is one of
the most popular
benchmark tools and comprehensively tests all aspects of the
device, including CPU, RAM, I/O, etc. Geekbench provides a
comprehensive measurement relative to other Android devices
in a scaled cumulative-score-manner. Vellamo4 encompasses
several system-level performance metrics such as I/O, mobile
processor, and browsing. PCMark5’s tests are based on every-
day activities and reﬂect real-world performance by measuring
the battery life of the device.
Overall System Performance Overhead. In Figure 16a
and 17a, we show the overall benchmark scores. A higher
score denotes better performance in each scale/category. Based
on our evaluation, we observe an overall overhead of 5.3%
in Antutu, 1.1% in Vellamo, 6.0% in GeekBench, and 5.7%
in PCMark, introduced by PBS-DROID on the Nexus 5 as
depicted in Figure 16a. On the Nexus 7, the overheads are 1.4%
in Antutu, 5.3% in Vellamo, 5.0% in Geekbench, and 2.2%
4We use two metirics, Multicore and Metal, from the Vellamo benchmark.
5We use all metrics of Work Performance (Browsing, Writing, Video
Playback, and Photo Editing).
11
Attribute NX5 NX5 PBS Over. NX7 NX7 PBS Over.
Browsing 3741
Writing
3174
Video
4118
PhotoEdit 4804
Total
2176
4.95% 1972
2301
8.25% 2202
3893
3.84% 3739
2.99% 2591
2597
4.73% 10504 10967
3926
3436
4276
4948
15837 16586
10.34%
4.50%
4.12%
0.23%
4.41%
TABLE IV: Battery Overhead Measurement (lower is better)
in PCMark respectively as shown in Figure 17a. The slight
differences between two Nexus platforms are mainly due to
the different hardware speciﬁcations and software/application
environments. Overall, the overheads for both devices are in a
reasonable range, no larger than 6% for either devices. Thus,
PBS-DROID does not exhibit signiﬁcant system overhead from
our benchmark results.
CPU and RAM Overhead. To evaluate the CPU overhead
introduced by PBS-DROID, we run two benchmarking tools,
Geekbench and Vellamo, which include corresponding metrics
in comparison. As shown in Figure 16b, Geekbench shows an
overhead of 5.9% and Vellamo shows 2.7% overhead against
the without-PBS case on the Nexus 5. Also, we observe 5.3%
overhead in Geekbench and 7.3% in Vellamo on the Nexus 7
as shown in Figure 17b. In addition, we run two benchmarks,
Geekbench and Antutu, to evaluate RAM overhead. We observe
4.2% overhead in Antutu and 4.8% overhead in Geekbench for
the Nexus 5 and 0.8% overhead in Antutu and 0.2% overhead
in Geekbench for the Nexus 7 as shown in Figure 16c and 17c
respectively. The results for both devices showed negligible
overhead on CPU and RAM evaluation. Overall, we conclude
that PBS-DROID poses a reasonably low impact on CPU/RAM
overhead.
Battery Overhead. In order to verify our goal, we evaluate
the battery overhead to show its feasibility on a resource-
limited mobile device. We use PCMark for the evaluation.
Before testing, we charge the battery to full capacity (100%)
and test until the charge drops below 20%. Table IV summa-
rizes the overhead by battery attribute from work performance:
browsing, writing, video playback, and photo editing. The
writing metric shows the highest overhead of 8.25%, browsing
attribute incurs 4.95%, and the rest of evaluation attributes
show less than or around 4% on the Nexus 5. Additionally,
we note that PBS shows the highest overhead of 10.34% for
Browsing, while all other metrics show less than or around 4%
overhead on the Nexus 7. Overall, we note an average of 4.73%
battery overhead on the Nexus 5 and 4.41% on the Nexus 7
when using PBS-DROID. Accordingly, the evaluation shows
that PBS-DROID does not incur signiﬁcantly greater battery
consumption compared to the stock Android device.
B. Use Cases
In this section, we demonstrate that security policies can
be effectively enforced with PBS.
Deployment Environment. In the scope of our eval-
uation, we deploy PBS-DROID to manage three buildings
in our campus facilities. Figure 18 shows the PBS-DROID
enabled scenario, designating the buildings as (Ba, Bb, Bc)
which together form our central controller-managed network
policy deployment. The colored areas of Figure 18 designate
the local-based enforcement radius of each building. Devices
0102030405060708090NX5NX7Bandwidth	(Mbps)						W/O	PBSW/	PBS(a) Benchmark Result
(b) CPU Overhead
(c) RAM Overhead
Fig. 16: PBS System Performance Evaluation (Nexus 5)
(a) Benchmark Result
(b) CPU Overhead
(c) RAM Overhead
Fig. 17: PBS System Performance Evaluation (Nexus 7)
work connection information is extensively useful in network
debugging, conﬁguration validation, and security audits.
We evaluate the capability of PBS-DROID to easily facili-
tate device network activity logging, by developing a demon-
stration controller application, called netlog. While simple in
construction, less than 300 lines of Java code, netlog facilitates
both network view in depth and breadth. We provide the
administrator a view of network-wide information, participat-
ing device coverage across multiple buildings, subnetworks
and locations, while we simultaneously enable deep, device-
application speciﬁc connection information and network uti-
lization statistics in real time.
Our application logs our testing environment device con-
nection activity, network history, and location updates. The log
data provides an insight into detailed device activity on the
network previously invisible, such as the device-application
speciﬁc connection information. For example, we can observe
the time and location a device invoked speciﬁc applications
(email, social, enterprise speciﬁc, etc.). Furthermore, we utilize
a simple ﬁlter which narrows our gaze to individual devices
and provides an invaluable tool in formulating and ﬁne-tuning
detailed network policies.
2) Use Case 2: Network Policy Enforcement: Although
network logging is essential to the passive administrator, it is of
little value without realtime context-speciﬁc programmability
to act upon it. The key insight is, PBS-DROID is capable of
reacting based on the device’s network and context speciﬁc
information.
We assess the ability to provide such capability by deﬁning
a dynamic network policy to be enforced by our prototype
SDN controller application, netpol. Our policies demonstrate
useful and contextual device speciﬁc attributes such as Appli-
Fig. 18: Managed Facilities
within the radius will fall under location-speciﬁc context
policies, as measured by on-device high-accuracy GPS. Note
that the additional elevation sensitive radius is not shown in
the ﬁgure, which forms a location sphere encompassing the
entire building roughly.
Admittedly, building dimensions are seldom regular, mak-
ing it difﬁcult to achieve perfect coverage. We note that a more
ﬁne-tuned area speciﬁcation with multiple overlapping, smaller
coverage areas can provide a higher resolution coverage of
building volume. However, since we seek to demonstrate our
system capability in a simple and concise fashion, we utilize
a basic building coverage designation for the sake of clarity.
Each building provides independent network connectivity
via multiple short range wireless 802.11g access points (APs).
In order to ensure device control, connectivity between the
PBS-DROID managed devices and the controller is maintained
throughout the devices life cycle in the network.
1) Use Case 1: Network Activity Logging: Network log-
ging and measurement
is an essential feature in network
administration. The ability to monitor and log detailed net-
12
318243009152012994336003044161223185AntutuVellamoPCMarkGeekbenchNX5NX5	PBS1599634916446744VellamoGeekbenchNX5NX5	PBS2199232322952440AntutuGeekbenchNX5NX5	PBS178221524109371363180761609111871435AntutuVellamoPCMarkGeekbenchNX7NX7	PBS1016323310953413VellamoGeekbenchNX7NX7	PBS22523532269354AntutuGeekbenchNX7NX7	PBSBbBcBacation Speciﬁc Policy, Device Context Policy, and Device Role
& Authorization.
In our test case, we use two network mobile devices
(D1, D2), across multiple buildings described earlier. The
devices run several common android applications, (Dna,b,c,d).
Taking on the administrative role, we specify a simple network
policy designed to control communication between two devices
on the network based on device, application, and time context.
The policy aims to restrict inner network device and host
connections, speciﬁed in Table V.
Policy Action Flow
Deny
Deny
Allow
Deny
Deny
D1 to/fro D2 a
D1 to/fro D2 a
D1 to/fro D2 a
D1 to H1
b
b
D2 to H1
Application Context
is 08:00-12:00
is 12:00-17:00
is 12:00-13:00
in Ba
in Ba
TABLE V: Policies specifying application, device, and time
restrictions by context.
When running application a, all network connection at-
tempts are monitored by the central network controller pro-
vided by PBS-DROID. When an instance of a attempts to
establish a connection between either device, the policy en-
forcement is triggered via a ﬂow table lookup. If no rule exists,
the controller is queried for a policy decision. In the case of the
time context, the controller will issue a proactive rule update
precisely at noon, updating the policy table on each device.
We may also restrict application access to speciﬁc hosts or
services based on their location. For example, application b
may not access host H1, a secure database, unless the device
is present in the designated building.
An alternative policy scenario speciﬁes location-based con-
nection management based on device role. We designate device
D1 as a trusted supervisor while D2 remains in a standard
employee role.
Connection Policy Device Location Application
Allow
Deny
Allow
Deny
D1a
D2a
c
b
Bb
Bb
all
all
TABLE VI: Location and Role Restriction
When the device context switches from one location to
another the controller (app) is notiﬁed, which in turn triggers a
local policy modiﬁcation in the device ﬂow table (as indicated
in Figure 19). In our scenario (as speciﬁed in Table VI),
application a has context-speciﬁc access based on the device
utilizing the app. While allowed by the supervisor D1 in
building Bb, an authorized device D2 may not run a in
Bb. Wildcard policies may also be applied. For example, we
never allow application b to access the network regardless of
its location, while an enterprise-authorized application, c, is
granted all accesses.
3) Use Case 3: Application Flow Path Management: In