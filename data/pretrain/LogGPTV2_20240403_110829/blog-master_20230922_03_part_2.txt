MAX_HISTORY_TOKENS = MODEL_MAX_TOKENS – NUM_SYSTEM_TOKENS – NUM_COMPLETION_TOKENS    
```  
例如，假设所需的完成长度是 90 个标记 ( `NUM_COMPLETION_TOKENS=90` )。    
```  
MAX_HISTORY_TOKENS = 4096 – 6 – 90 = 4000    
```  
```  
{    
  "model": "gpt-3.5-turbo", // MODEL_MAX_TOKENS = 4096    
  "messages": [    
         {"role": "system", "content": "You are a helpful assistant."}, // NUM_SYSTEM_TOKENS = 6    
         {"role": "user", "content": "Who won the world series in 2020?"},    
         {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},    
         {"role": ...}  // user 和 assistant 必须交替出现.     
         .    
         .    
         .    
         {"role": "user", "content": "Great! Have a great day."}  // MAX_HISTORY_TOKENS = 4000    
    ]     
}    
```  
`NUM_COMPLETION_TOKENS` 指留给机器人返回内容的token上限数.      
https://zhuanlan.zhihu.com/p/611240015      
例如你想让机器人回复1000个token, 那你最多能给他输入3090个token.      
甚至在messages中, 可以自己造一些精准的自问自答, 作为提示输入给gpt模型, 最后再追加问一个问题.      
- [《沉浸式学习PostgreSQL|PolarDB 9: AI大模型+向量数据库, 提升AI通用机器人在专业领域的精准度, 完美诠释柏拉图提出的“知识是回忆而不是知觉”》](../202308/20230831_01.md)      
- [《标准知识库 + PostgreSQL或PolarDB + 向量插件 + openai(或其他大模型) 提升通用ai机器人在专业领域的精准度》](../202307/20230726_02.md)      
- [《沉浸式学习PostgreSQL|PolarDB 16: 植入通义千问大模型+文本向量化模型, 让数据库具备AI能力》](../202309/20230914_01.md)      
- [《沉浸式学习PostgreSQL|PolarDB 17: 向量数据库, 通义大模型AI的外脑》](../202309/20230922_02.md)      
例如我想问的是A问题, 根据这个A问题的embedding, 在已有的问答库中搜索最相似的N条问答. 把问答式原文写到messages里面, 作为提示, 最后再附上A问题.    
```  
{    
  "model": "gpt-3.5-turbo", // MODEL_MAX_TOKENS = 4096    
  "messages": [    
         {"role": "system", "content": "You are a helpful assistant."}, // NUM_SYSTEM_TOKENS = 6    
         {"role": "user", "content": "自问1"},    
         {"role": "assistant", "content": "自答1"},    
         {"role": ...}  // user 和 assistant 交替出现.     
         .    
         .    
         .    
         {"role": "user", "content": "追加1个问题"}  // MAX_HISTORY_TOKENS = 4000    
    ]     
}    
```  
### 结论    
总之，该pg_tiktoken扩展是用于标记文本数据和管理 Postgres 数据库中标记的宝贵工具。通过利用 OpenAI 的 tiktoken 库，它简化了代币化和使用代币限制的过程，使您能够更轻松地与 OpenAI 的语言模型集成。    
当您探索 的功能时pg_tiktoken extension，我们鼓励您提供反馈并建议您希望在未来的更新中添加的功能。我们期待看到您使用创建的创新自然语言处理应用程序pg_tiktoken。    
## 实验  
根据以上知识, 设计一个使用通义千问的PolarDB专属问答机器人.      
可以在这个实验中进行体验:  
- [《沉浸式学习PostgreSQL|PolarDB 17: 向量数据库, 通义大模型AI的外脑》](../202309/20230922_02.md)      
https://help.aliyun.com/zh/dashscope/developer-reference/api-details    
通义千问以用户以文本形式输入的指令（prompt）以及不定轮次的对话历史（history）作为输入，返回模型生成的回复作为输出。在这一过程中，文本将被转换为语言模型可以处理的token序列。Token是模型用来表示自然语言文本的基本单位，可以直观的理解为“字”或“词”。对于中文文本来说，1个token通常对应一个汉字；对于英文文本来说，1个token通常对应3至4个字母或1个单词。例如，中文文本“你好，我是通义千问”会被转换成序列['你', '好', '，', '我', '是', '通', '义', '千', '问']，而英文文本"Nice to meet you."则会被转换成['Nice', ' to', ' meet', ' you', '.']。    
通义千问模型支持 8k tokens上下文，为了保障正常使用和正常输出，API限定用户输入为6k Tokens。    
1、设计faq表    
```  
问题    
回答    
embedding    
tokens  
```  
2、输入精准问答材料(问题和答案限制字数, 肯定不能大于6K对吧, 例如强制少于100字.)     
3、设计历史问答表    
```  
会话ID    
问题    
回答    
tokens   
准确度评分等级(1,2,3 低中高)    
embedding    
```  
4、保存问答历史记录(不含提示的问题+通义的回复)     
5、人为修正历史问答准确度     
(1,2,3 低中高)    
6、根据问题相似度, 从会话历史表 辅以 准确度 提取prompt; 从精准faq表, 辅以 准确度 提取prompt; 最后根据prompt 长度6K限制等条件, 提取问答内容原文; 在提问前, 作为prompt输入.     
## 参考  
https://neon.tech/docs/ai/ai-concepts    
https://github.com/neondatabase/yc-idea-matcher    
https://github.com/neondatabase/ask-neon    
https://neon.tech/docs/extensions/pg_tiktoken    
https://github.com/kelvich/pg_tiktoken    
[《德说-第257期, 新生产力工具AI推动下一级人类文明跃迁? AI如何倒逼数据库的进化? AI加持后的数据库应用场景有哪些变化?》](../202309/20230921_01.md)      
[《沉浸式学习PostgreSQL|PolarDB 16: 植入通义千问大模型+文本向量化模型, 让数据库具备AI能力》](../202309/20230914_01.md)      
[《沉浸式学习PostgreSQL|PolarDB 17: 向量数据库, 通义大模型AI的外脑》](../202309/20230922_02.md)      
[《PostgreSQL 或PolarDB 使用插件pg_tiktoken - 使用 OpenAI tiktoken库文本向量化(tokenization) - 使用分词算法BPE - NLP 自然语言处理》](../202307/20230706_05.md)      
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")