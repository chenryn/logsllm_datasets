abstract model shown in Fig. 6(a). Each tunnel is annotated with
the fraction of the traffic to destination B carried on that tunnel –
e.g., 𝑟𝑙5,𝐵 = 1/4 indicates that 𝑙5 carries 1/4 of the traffic to 𝐵.
4.2 Topologically sorted logical sequences
While the approach in §4.1 works for arbitrary LSs, we next describe
an alternate approach that works when LSs are chosen with some
restrictions. Given two node pairs (𝑖, 𝑗), and (𝑖′, 𝑗′), we say that
(𝑖, 𝑗) > (𝑖′, 𝑗′) if (𝑖′, 𝑗′) is a segment of any active LS 𝑞 in 𝐿(𝑖, 𝑗) .
Our approach below is applicable if all the node pairs under every
failure scenario can be topologically sorted with respect to relation
’>’. For example, in Fig. 6, the LSs satisfy a topological ordering
with (𝐴, 𝐵) > (𝐴, 𝐷) since 𝑞2 ∈ 𝐿(𝐴, 𝐵) uses the segment (𝐴, 𝐷)
(but not vice versa). Note that, essentially, we only require a strict
partial order over the node pairs. The topological sort refers to any
total order that extends this strict partial order and, it is well-known
that such a total order exists and can be derived easily from the
partial order[21].
When a topological ordering is possible, PCF implements LSs
more directly (Fig. 6(c)). When 𝐴 sends packets to 𝐵, traffic is split
across the tunnel 𝑙5 and LS 𝑞2. Traffic to 𝑞2 involves pushing a label,
and looking up the table entry for host 𝐷. This entry indicates traffic
is split across tunnel 𝑙3 and LS 𝑞1. Traffic to 𝑞1 involves pushing
another label and looking up the entry for host 𝐶, which indicates
the traffic is to be forwarded on tunnel 𝑙1. When a router receives
a packet, it pops labels as needed, and if it is an intermediate point
of a LS takes the appropriate action. For example, when 𝐷 receives
a packet on tunnel 𝑙3 it pops the outer label 𝑙3, and based on the
inner label 𝑞2, looks up the entry for 𝐵, and forwards to 𝐵 along
tunnel 𝑙4.
A key question is to decide how to split the traffic at each hop –
e.g., for traffic from 𝐴 to 𝐵, what fraction is sent on each of tunnels
𝑙5, and LS 𝑞2. We define local proportional routing as a scheme
where the traffic associated with each node pair (𝑖, 𝑗) is split across
all tunnels and LSs from 𝑖 to 𝑗 in proportion to the reservations
associated with these tunnels and LSs. This is a generalization of
FFC which uses a locally proportional scheme but in a context
where there are only tunnels. Then, the following holds:
Proposition 7. The LS models can be realized by local propor-
tional routing when the topological sort property is met.
Proof. For a particular failure scenario 𝑥, let 𝑇𝑥 (𝑠, 𝑡) denote the
set of live tunnels from 𝑠 to 𝑡, 𝐿𝑥 (𝑠, 𝑡) denote the set of active LSs
from 𝑠 to 𝑡 and 𝑄𝑥 (𝑠, 𝑡) denote the active LSs which go through
segment (𝑠, 𝑡). We show by induction along the topological sort
order that locally proportional routing services the demand. Our
induction hypothesis is that the pair (𝑖, 𝑗) needs to route ˜𝐷𝑖 𝑗 where,
˜𝐷𝑖 𝑗 = (cid:174)𝐷(𝑖, 𝑗) +
(𝑚,𝑛)∈𝑃,𝑞∈𝑄𝑥 (𝑖,𝑗)∩𝐿𝑥 (𝑚,𝑛)
𝑢𝑚𝑛𝑏𝑞,
(9)

if every router distribute ˜𝐷𝑖 𝑗 among the tunnels (𝑙 ∈ 𝑇𝑥 (𝑖, 𝑗)) and
LSs (𝑞 ∈ 𝐿𝑥 (𝑖, 𝑗)) in the proportion of their reservations, i.e., there
is a constant 𝑢𝑖 𝑗 such that traffic along 𝑙 is 𝑢𝑖 𝑗𝑎𝑙 and that along LS
q is 𝑢𝑖 𝑗𝑏𝑞 where
𝑙∈𝑇𝑥 (𝑖,𝑗) 𝑎𝑙 +𝑞∈𝐿𝑥 (𝑖,𝑗) 𝑏𝑞
˜𝐷𝑖 𝑗
.
𝑢𝑖 𝑗 =
For the base case, observe that for the topologically largest pair
𝑝1 = (𝑖1, 𝑗1), the demand received is (cid:174)𝐷(𝑖1, 𝑗1). And the hypothesis
is trivially true because 𝑄(𝑖1, 𝑗1) = ∅. For the induction step, we
Physical tunnel with reservation of 1(al=1) Logical sequence with reservation of 1(bq=1) Packet ADBCl5l1l2l3l4q1q2ADBCrl5,B=1/2rl4,B=1/2rl3,B=1/4rl2,B=1/4rl1,B=1/4(a)(b)(c)AADBCq1q2l1l2q2q1q2l4q2l3l5B l5:0.5 q2:0.5D l3:0.5 q1:0.5C l1:1Label action l1:fwd(C) l3:fwd(D) l5:fwd(B) q1:lookup(C) q2:lookup(D)A’s tables:D’s tables:B l4:1Label action l2,l3:strip q1:strip l4:fwd(B) q2:lookup(B)PCF: Provably Resilient Flexible Routing
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
assume that the hypothesis is true for pairs 𝑝1, 𝑝2, ..., 𝑝𝑛 in topo-
logical sort order and show it holds for 𝑝𝑛+1 = (𝑖, 𝑗). Observe that
for any 𝑞 ∈ 𝑄𝑥 (𝑖, 𝑗) ∩ 𝐿𝑥 (𝑚, 𝑛), the traffic sent to 𝑏𝑞 is, by the in-
duction hypothesis, 𝑢𝑚𝑛𝑏𝑞 because 𝑄𝑥 (𝑖, 𝑗) ∩ 𝐿𝑥 (𝑚, 𝑛) = ∅ implies
(𝑚, 𝑛) > (𝑖, 𝑗). Then, (9) holds for (𝑖, 𝑗), and it follows easily that
if (𝑖, 𝑗) routes 𝑢𝑖 𝑗𝑏𝑞 along each 𝑞 ∈ 𝐿𝑥 (𝑖, 𝑗) and 𝑢𝑖 𝑗 𝑎𝑙 along each
𝑙 ∈ 𝑇𝑥 (𝑖, 𝑗) that𝑙∈𝑇𝑥 (𝑖,𝑗) 𝑢𝑖 𝑗𝑎𝑙 +𝑞∈𝐿𝑥 (𝑖,𝑗) 𝑢𝑖 𝑗𝑏𝑞 = ˜𝐷𝑖 𝑗. Since it
follows easily from above that
𝑢𝑖 𝑗 ( 
𝑎𝑙 + 

𝑙∈𝑇𝑥 (𝑖,𝑗)
𝑞∈𝐿𝑥 (𝑖,𝑗)
(𝑚,𝑛)∈𝑃,𝑞∈𝑄𝑥 (𝑖,𝑗)∩𝐿𝑥 (𝑚,𝑛)
𝑏𝑞) =
𝑢𝑚𝑛𝑏𝑞,
(cid:174)𝐷(𝑖, 𝑗) +
it follows that (𝑢𝑖 𝑗)(𝑖,𝑗)∈𝑃 solves 𝑀 × (cid:174)𝑈 = (cid:174)𝐷. Therefore, by propo-
sition 5, 0 ≤ 𝑢𝑖 𝑗 ≤ 1. This implies that the routing is feasible since
none of the reservations are exceeded. □
4.3 Implementation and deployment pathways
Now, we discuss how our scheme can be implemented and practi-
cally deployed. We start with the case when the logical sequences
are topologically sorted. The offline computation phase determines
the reservation for each tunnel and LS, similar to how FFC deter-
mines tunnel reservations. The regular forwarding operation and
the failure recovery is completely distributed. Traffic associated
with each node pair (𝑖, 𝑗) is split across all physical tunnels and LSs
in proportion to the reservations associated with them. When a tun-
nel fails or an LS is inactive, the weights are rescaled in proportion
to the reservations on live tunnels and active LSs. This is similar
to the existing approach of rescaling on live tunnels. Recall that
LSs may have conditions attached to them and may only be active
when the condition is true. Thus, for any conditional LS 𝑞 from 𝑖
to 𝑗, we need a mechanism to propagate the condition (e.g., link
failure event) to 𝑖. For concreteness, we focus our discussion on two
cases (the only cases considered in our evaluations). The first case
involves LSs that do not have any conditions attached. This case
is trivial to implement - such LSs are always active, and no hint
propagation is needed. The second case involves LSs 𝑞 between
𝑖 and 𝑗 which are only active when the link 𝑖 − 𝑗 fails. This can
be implemented by having 𝑖 locally detect the failure of the 𝑖 − 𝑗
link, which then results in 𝑖 activating 𝑞 and following the standard
proportional scheme.
More generally, when logical sequences cannot be sorted in
topological order, one simple implementation approach is to use
a centralized controller. On each failure, the centralized controller
solves a linear system which determines the new routing as dis-
cussed in §4.1. Solving a linear system is much easier than solving
a linear program, as discussed earlier. While we do not explore
further, we believe that it is possible to perform the operations
on failure in a completely distributed fashion because the linear
system we solve is of a special type (see Proposition 5) for which
iterative algorithms exist. We defer further investigation to future
work.
5 EVALUATIONS
We compare the performance guarantees provided by PCF’s congestion-
free mechanisms with FFC, the state-of-the-art congestion-free
mechanism. When possible, we compare PCF with the performance
achieved by the optimal network response which involves comput-
ing the optimal multi-commodity flow for each failure scenario. We
implement all our optimization models in Python, and use Gurobi
8.0 [19] to solve them. We consider the following PCF schemes:
• PCF-TF. This uses FFC’s mechanism to respond to failures, but
models network structure more explicitly (§3.2).
• PCF-LS. Here, LSs are used but not associated with any con-
dition (§3.3). For each node pair (𝑠, 𝑡), we provide a single LS that
includes the set of nodes in the shortest path from 𝑠 to 𝑡. This guar-
antees that the topological sort assumption is met, which ensures
the scheme can be implemented as a locally proportional routing
scheme similar to FFC (§4.2).
• PCF-CLS. Here, the failure of each link ⟨𝑖, 𝑗⟩ results in the
activation of a LS from 𝑖 to 𝑗. Further, each node pair is associated
with a LS that is always active. We get these LSs by decomposing a
restricted form of the logical flow model, where the only conditions
are no link failures, or single link failures, with failure of link ⟨𝑖, 𝑗⟩
resulting in the activation of a flow from 𝑖 to 𝑗 (§3.4). The LSs
may not be topologically sorted. The scheme can be realized using
relatively light-weight operations on each failure compared to the
optimal network response (§4.1). In §5.2 we evaluate a heuristic
that derives topologically sorted LSs from the above LSs, which
allows for a proportional routing scheme similar to FFC.
Topologies. We evaluate our models on 21 topologies obtained
from [22] and [23] (see Table 3 in the Appendix). Our two largest
networks were Deltacom and Ion that contained 151 and 135 edges
respectively and over a hundred nodes each. We remove one-degree
nodes in the topologies recursively so that the networks are not dis-
connected with any single link failure. We use the gravity model [40]
to generate traffic matrices with the utilization of the most con-
gested link (MLU) in the range [0.6, 0.63] across the topologies.
5.1 Results
We start by reporting the demand scale (𝑧) achieved by each scheme,
which is the factor by which the traffic demand of all pairs can be
scaled and yet supported by a given scheme. For example, 𝑧 = 0.5
indicates that for all source destination pairs, half the demand can
be served, while 𝑧 = 2 indicates twice the demand can be handled.
The MLU, or the utilization of the most congested link is the inverse
of 𝑧. Later in this section, we report results with the throughput
metric.
Benefits of modeling network structure. Fig. 8 shows the
demand scale guaranteed by FFC when used to design for all single
link failures for Deltacom (the topology with the most edges) for
twelve different demands. Each curve corresponds to the number
of tunnels used per node pair. We select physical tunnels so that
they are as disjoint as possible, preferring shorter ones when there
are multiple choices. With all our topologies, any node pair has
at least two disjoint physical tunnels. When three or four tunnels
are selected, it is not possible to guarantee that they are disjoint.
Our strategy ensures that the failure of any link causes at most two
tunnels to fail for all node pairs in the three tunnel case, and for
most node pairs in the four tunnels case. The optimal is obtained
by exhaustively enumerating all failure scenarios, and can take
over 2 days in some settings. FFC performs significantly worse
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Chuan Jiang, Sanjay Rao, and Mohit Tawarmalani
Figure 9: Performance of PCF-TF and
FFC when more tunnels are added
Figure 10: Benefits of PCF across multi-
ple demands for Deltacom
Figure 8: Impact of adding tunnels to
FFC’s performance
than optimal, and consistently better with two tunnels (additional
tunnels hurt).
Fig. 9 shows the demand scale guaranteed by PCF-TF when
designing for single link failures for Deltacom, and an example
traffic matrix. Results for FFC are included for comparison. PCF-TF
matches FFC’s performance when 2 tunnels are used, and performs
better as tunnels are added given that it better models network struc-
ture. We observed similar trends with all topologies, and across
demands. Henceforth, in our experiments, all our schemes use three
tunnels (this is conservative as adding more tunnels improves per-
formance), while FFC uses two tunnels (this represents the best
setting for FFC and choosing more tunnels leads to poorer perfor-
mance).
Benefits of more flexible response. We next evaluate the per-
formance of our various PCF schemes relative to FFC, and report
the ratio of the demand scale for a given scheme to the demand
scale with FFC. We generate 12 different demands for Deltacom
to model a traffic matrix every 2 hours. Fig. 10 shows a CDF of
the ratios across these demands. In the median case, PCF-TF and
PCF-LS achieve an improvement of 1.25𝑋 over FFC, while PCF-CLS
achieves a 1.37𝑋 improvement. Further, for 25% of the traffic matri-
ces, PCF-TF, PCF-LS and PCF-CLS achieve improvements of more
than 1.3𝑋, 1.4𝑋 and 1.66𝑋 over FFC respectively. Finally, PCF-CLS
matches the optimal for most cases. While PCF-TF’s improvements
arise due to better modeling of network structure, the further bene-
fits achieved by PCF-LS and PCF-CLS are due to additional flexibility
provided by logical sequences.
Analysis across topologies. Fig. 11 presents a CDF of the ra-
tios of the demand scale for each scheme relative to FFC across
topologies when designing for single link failures. All our schemes
provide significant benefits, with PCF-CLS matching the optimal for
most topologies. On average, PCF-TF, PCF-LS and PCF-CLS achieve
improvements of more than 1.11𝑋, 1.22𝑋 and 1.44𝑋 over FFC re-
spectively. For GEANT (rightmost point), PCF-LS and PCF-CLS
perform 2.6𝑋 better.