OpenSCA知识小课堂开课了！
今天主要介绍基于composer包管理器的组件成分解析原理。
# composer介绍
composer是PHP的依赖管理工具。
开发者受到Node.js的npm及Ruby的bundler启发，composer设计上与两者有诸多相似。
composer的依赖管理文件是composer.json。开发者可以在composer.json中指定每个依赖项的版本范围或使用composer
require/update/remove ${name}命令管理依赖项。
如果一个项目中存在composer.json文件，便可以执行composer
install命令自动安装当前项目所需的依赖项并生成composer.lock文件
composer.json完整文件结构如下：
    {
      "name": "cakephp/app",
      "type": "project",
      "license": "MIT",
      "require": {
          "php": ">=7.2",
          "cakephp/cakephp": "^4.3",
          "cakephp/migrations": "^3.2",
          "cakephp/plugin-installer": "^1.3",
          "mobiledetect/mobiledetectlib": "^2.8"
      },
      "require-dev": {
          "cakephp/bake": "^2.6",
          "cakephp/cakephp-codesniffer": "^4.5",
          "cakephp/debug_kit": "^4.5",
          "josegonzalez/dotenv": "^3.2",
          "phpunit/phpunit": "~8.5.0 || ^9.3"
      },
    }
其中name为项目名称；type为包的类型，有library、project、metapackage和composer-plugin四种类型，默认情况下为library；license为项目声明的许可证，可以是一个字符串或是一个字符串数组。
require-dev为开发环境或测试使用的依赖，require为生产环境使用的依赖，依赖写法为"name":"version"，版本可以指定准确版本或一个范围。
# 解析算法
### composer.lock
composer.lock文件为自动生成的文件，可以准确定位到PHP项目使用的依赖及版本，所以优先解析composer.lock文件。
composer.lock文件结构如下：
    {
      "packages": [
        {
          "name": "a",
          "version": "1.1.0",
          "require": {
              "c": "1.1.*"
          }
        },
        {
          "name": "b",
          "version": "1.2.2",
          "require": {
              "c": "^1.0.2"
          }
        },
        {
           "name": "c",
          "version": "1.1.2"
        }
      ],
      "packages-dev": []
    }
其中packages和packages-dev字段包含项目使用的所有直接和间接依赖，而且记录了组件间的依赖关系，packages为生产环境的依赖，packages-dev为开发环境的依赖。
示例：
    {
      "name": "a",
      "version": "1.1.0",
      "require": {
          "c": "1.1.*"
      }
    }
代表项目依赖1.1.0版本的组件a，且该组件依赖版本约束为1.1.*的组件c。
同理可知项目依赖1.2.2版本的组件b，且该组件依赖版本约束为^1.0.2的组件c。
且组件a和组件b都没有被其他依赖所依赖，所以可知这两个组件是项目的直接依赖。
注：
  * 1.1.*代表版本号需要>=1.1.0且=1.0.2且=1.1.0且
Gitee：  
OpenSCA官网：  