::: section
::: titlepage
# [⁠]{#mpio_configfile.html#config_file_multipath}4.4. 多路径设备配置属性 {.title}
:::
[]{#mpio_configfile.html#idm139642157131472
.indexterm}[]{#mpio_configfile.html#idm139642157129392 .indexterm}
::: para
[表 4.2
"多路径属性"](#mpio_configfile.html#tb-multipath_defaults){.xref}
显示您可以在 `multipath.conf`{.filename} 配置文件的
`multipaths`{.literal}
部分为每个具体多路径设备设定的属性。这些属性只可用于指定的多路径。这些默认设置可由
DM-Multipath 使用并覆盖在 `multipath.conf`{.filename} 文件的
`defaults`{.literal} 和 `devices`{.literal} 部分设定的属性。
:::
[]{#mpio_configfile.html#idm139642169767312
.indexterm}[]{#mpio_configfile.html#idm139642169765552
.indexterm}[]{#mpio_configfile.html#idm139642169764272
.indexterm}[]{#mpio_configfile.html#idm139642149858480
.indexterm}[]{#mpio_configfile.html#idm139642149857200
.indexterm}[]{#mpio_configfile.html#idm139642149855440
.indexterm}[]{#mpio_configfile.html#idm139642149854160
.indexterm}[]{#mpio_configfile.html#idm139642149852400
.indexterm}[]{#mpio_configfile.html#idm139642114424208
.indexterm}[]{#mpio_configfile.html#idm139642114422448
.indexterm}[]{#mpio_configfile.html#idm139642114421168
.indexterm}[]{#mpio_configfile.html#idm139642114419408
.indexterm}[]{#mpio_configfile.html#idm139642114418128
.indexterm}[]{#mpio_configfile.html#idm139642171501168
.indexterm}[]{#mpio_configfile.html#idm139642171499888
.indexterm}[]{#mpio_configfile.html#idm139642171498128
.indexterm}[]{#mpio_configfile.html#idm139642171496848
.indexterm}[]{#mpio_configfile.html#idm139642171495088
.indexterm}[]{#mpio_configfile.html#idm139642171493808
.indexterm}[]{#mpio_configfile.html#idm139642156384432
.indexterm}[]{#mpio_configfile.html#idm139642156383152
.indexterm}[]{#mpio_configfile.html#idm139642156381424
.indexterm}[]{#mpio_configfile.html#idm139642156380176
.indexterm}[]{#mpio_configfile.html#idm139642156378416 .indexterm}
::: table
[⁠]{#mpio_configfile.html#tb-multipath_defaults}
**表 4.2. 多路径属性**
::: table-contents
+----------------------+-----------------------------------------------+
| 属性                 | 描述                                          |
+======================+===============================================+
| ` wwid `{.literal}   | 指定 `multipath`{.literal}                    |
|                      | 属性采用的多路径设备的 WWID。这个参数在       |
|                      | `multipath.conf`{.filename}                   |
|                      | 文件的这个部分是必须的。                      |
+----------------------+-----------------------------------------------+
| ` alias `{.literal}  | 指定使用 `multipath`{.literal}                |
|                      | 属性的多路径设备的符号名称。如果您使用的是    |
|                      | `use                                          |
|                      | r_friendly_names`{.literal}，请必要将其设定为 |
|                      | `                                             |
|                      | mpathn`{.literal}，这样可能会与自动分配的用户 |
|                      | 友好名称冲突，进而给出不正确的设备节点名称。  |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------------------                         |
| g_policy `{.literal} | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |                                               |
|                      | `failover`{.literal} = 每个优先组群有一个路径 |
|                      |   `multi                                      |
|                      | bus`{.literal} = 所有有效路径在一个优先组群中 |
|                      |   `group_by_serial`                           |
|                      | {.literal} = 每个检测到的系列号有一个优先组群 |
|                      |   `group_by_p                                 |
|                      | rio`{.literal} = 每个路径优先值有一个优先组群 |
|                      |   `group_by_node_n                            |
|                      | ame`{.literal} = 每个目标节点名有一个优先组群 |
|                      |   -------------------                         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.li                                  |
|                      | teral}：根据 SCSI-3 ALUA 设置生成路径优先权。 |
|                      |   `tpg_pref`{.literal}：根据 SCSI-            |
|                      | 3 ALUA 设置生成路径优先权，使用首选端口字节。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   这个属性的数字值指定系                      |
|                      | 统在禁用队列前应该试图使用失败的路径的次数。  |
|                      |   `fail`{.literal} 值说明立即失败，无需排队。 |
|                      |   `                                           |
|                      | queue`{.literal} 表示固定路径前排队不会停止。 |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `u                                            |
|                      | niform`{.literal}，则所有路径都有相同的加权。 |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果将其设定为 `yes`{.literal}，multipathd    |
| last_del `{.literal} | 将在删除最后一个到某个设备的路径时禁用排队。  |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。                  |
+----------------------+-----------------------------------------------+
:::
:::
::: para
以下示例显示在配置文件中为两个特定多路径设备指定的多路径属性。第一个设备的
WWID 为 `3600508b4000156d70001200000b0000`{.literal}，符号名称为
`yellow`{.literal}。
:::
::: para
示例中第二个多路径设备的 WWID 为
`1DEC_____321816758474`{.literal}，符号名称为
`red`{.literal}。在这个示例中，`rr_weight`{.literal} 属性被设为
`priorities`{.literal}。
:::
``` screen
multipaths {
       multipath {
              wwid                  3600508b4000156d70001200000b0000
              alias                 yellow
              path_grouping_policy  multibus
              path_selector         "round-robin 0"
              failback              manual
              rr_weight             priorities
              no_path_retry         5
       }
       multipath {
              wwid                  1DEC_____321816758474
              alias                 red
              rr_weight             priorities
        }
}
```
:::
::: section
::: titlepage
# [⁠]{#mpio_configfile.html#config_file_devices}4.5. 配置文件设备 {.title}
:::
[]{#mpio_configfile.html#idm139642174286192
.indexterm}[]{#mpio_configfile.html#idm139642174284752
.indexterm}[]{#mpio_configfile.html#idm139642174283312
.indexterm}[]{#mpio_configfile.html#idm139642179377280 .indexterm}
::: para
[表 4.3
"设备属性"](#mpio_configfile.html#tb-multipath_attributes){.xref}
显示您可以为 `multipath.conf`{.filename} 配置文件 `devices`{.literal}
部分的每个独立存储设备设定的属性。这些属性可由 DM-Multipath
使用，除非使用 `multipath.conf`{.filename} 文件 `multipaths`{.literal}
部分为包含该设备的路径指定的属性覆盖这个值。这些属性覆盖了在
`multipath.conf`{.filename} 文件 `defaults`{.literal} 部分设定的属性。
:::
::: para
默认情况下，在多路径配置中包括很多支持多路径的设备。这些设备默认支持值列在
`multipath.conf.defaults`{.filename}
文件中。您可能不需要为这些设备修改默认值，但如果您想要修改默认值，您可以通过在想要更改默认值的设备的配置文件中添加一个条目来更改默认值。您可以为该设备复制
`multipath.conf.defaults`{.filename}
文件中的设备配置默认值，并覆盖那些您想要更改的值。
:::
::: para
要在配置文件的这个部分添加没有默认自动配置的设备，您需要设定
`vendor`{.literal} 和 `product`{.literal} 参数。您可在
`/sys/block/device_name/device/vendor`{.filename} 和
`/sys/block/device_name/device/model`{.filename} 文件中找到这些值，其中
*device_name* 是要进行多路径操作的设备，示例如下：
:::
``` screen
# cat /sys/block/sda/device/vendor
WINSYS  
# cat /sys/block/sda/device/model
SF2372
```
::: para
要指定的附加参数要视具体设备而定。如果设备是主动/主动模式，您通常不需要设置附加参数。您可能想要将
`path_grouping_policy`{.literal} 设为
`multibus`{.literal}。其它您可能需要设定的参数有
`no_path_retry`{.literal} 和 `rr_min_io`{.literal}，详见 [表 4.3
"设备属性"](#mpio_configfile.html#tb-multipath_attributes){.xref}。
:::
::: para
如果设备是主动/被动模式，但它会自动将路径切换到被动路径，那么您需要将检查器功能改为不需向路径发送
I/O
来测试其是否工作（否则，您的设备将一直进行出错冗余）的功能。这几乎意味着您将
`path_checker`{.literal} 设为 `tur`{.literal}。这对所有支持 Test Unit
Ready 命令的 SCSI 设备都适用。
:::
::: para
如果该设备需要一个特殊的命令切换路径，那么为多路径配置此设备需要硬件处理器内核模块。当前的硬件处理器是
`emc`{.literal}。如果这样还不能满足您的设备，则您可能无法为多路径配置该设备。
:::
[]{#mpio_configfile.html#idm139642113872448
.indexterm}[]{#mpio_configfile.html#idm139642113870688
.indexterm}[]{#mpio_configfile.html#idm139642113869408
.indexterm}[]{#mpio_configfile.html#idm139642113867648
.indexterm}[]{#mpio_configfile.html#idm139642154228080
.indexterm}[]{#mpio_configfile.html#idm139642154226320
.indexterm}[]{#mpio_configfile.html#idm139642154225040
.indexterm}[]{#mpio_configfile.html#idm139642154223280
.indexterm}[]{#mpio_configfile.html#idm139642154222000
.indexterm}[]{#mpio_configfile.html#idm139642154220240
.indexterm}[]{#mpio_configfile.html#idm139642175593200
.indexterm}[]{#mpio_configfile.html#idm139642175591440
.indexterm}[]{#mpio_configfile.html#idm139642175590160
.indexterm}[]{#mpio_configfile.html#idm139642175588400
.indexterm}[]{#mpio_configfile.html#idm139642175587120
.indexterm}[]{#mpio_configfile.html#idm139642120270048
.indexterm}[]{#mpio_configfile.html#idm139642120268768
.indexterm}[]{#mpio_configfile.html#idm139642120267008
.indexterm}[]{#mpio_configfile.html#idm139642120265728
.indexterm}[]{#mpio_configfile.html#idm139642120263968
.indexterm}[]{#mpio_configfile.html#idm139642120262688
.indexterm}[]{#mpio_configfile.html#idm139642148102784
.indexterm}[]{#mpio_configfile.html#idm139642148101504
.indexterm}[]{#mpio_configfile.html#idm139642148099744
.indexterm}[]{#mpio_configfile.html#idm139642148098464
.indexterm}[]{#mpio_configfile.html#idm139642148096704
.indexterm}[]{#mpio_configfile.html#idm139642173129360
.indexterm}[]{#mpio_configfile.html#idm139642173127600
.indexterm}[]{#mpio_configfile.html#idm139642173126320
.indexterm}[]{#mpio_configfile.html#idm139642173124560
.indexterm}[]{#mpio_configfile.html#idm139642173123280
.indexterm}[]{#mpio_configfile.html#idm139642173121520
.indexterm}[]{#mpio_configfile.html#idm139642158004544
.indexterm}[]{#mpio_configfile.html#idm139642158002784
.indexterm}[]{#mpio_configfile.html#idm139642158001504
.indexterm}[]{#mpio_configfile.html#idm139642157999744 .indexterm}
::: table
[⁠]{#mpio_configfile.html#tb-multipath_attributes}
**表 4.3. 设备属性**
::: table-contents
+----------------------+-----------------------------------------------+
| 属性                 | 描述                                          |
+======================+===============================================+
| ` vendor `{.literal} | 指定 `device`{.literal}                       |
|                      | 采用的存储设备的零售商名称，例如              |
|                      | `COMPAQ`{.literal}。                          |
+----------------------+-----------------------------------------------+
| `                    | 指定 `device`{.literal}                       |
|  product `{.literal} | 属性使用的存储设备产品名，比如                |
|                      | `HSV110 (C) COMPAQ`{.literal}。               |
+----------------------+-----------------------------------------------+
| `                    | 指定存储设备的产品修订识别程序。              |
| revision `{.literal} |                                               |
+----------------------+-----------------------------------------------+
| ` product_b          | 根                                            |
| lacklist `{.literal} | 据产品指定用来将设备列入黑名单的正则表达式。  |
+----------------------+-----------------------------------------------+
| ` hardware           |   --------------------------------------      |
| _handler `{.literal} | --------------------------------------------- |
|                      |   指定将在切换路径组群或者处理 I/O 错误       |
|                      | 时用来执行硬件具体动作的模块。可能的值包括：  |
|                      |   `1                                          |
|                      |  emc`{.literal}：EMC 存储阵列的硬件处理程序。 |
|                      |   `1 alua                                     |
|                      | `{.literal}：SCSI-3 ALUA 阵列的硬件处理程序。 |
|                      |   `1 hp_sw                                    |
|                      | `{.literal}：Compaq/HP 控制器的硬件处理程序。 |
|                      |   `1 rdac`{.lite                              |
|                      | ral}：LSI/Engenio RDAC 控制器的硬件处理程序。 |
|                      |   --------------------------------------      |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------------------                         |
| g_policy `{.literal} | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |                                               |
|                      | `failover`{.literal} = 每个优先组群有一个路径 |
|                      |   `multi                                      |
|                      | bus`{.literal} = 所有有效路径在一个优先组群中 |
|                      |   `group_by_serial`                           |
|                      | {.literal} = 每个检测到的系列号有一个优先组群 |
|                      |   `group_by_p                                 |
|                      | rio`{.literal} = 每个路径优先值有一个优先组群 |
|                      |   `group_by_node_n                            |
|                      | ame`{.literal} = 每个目标节点名有一个优先组群 |
|                      |   -------------------                         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` getuid             | 指定默认程序和参数                            |
| _callout `{.literal} | 调用获得唯一路基功能识别程序。需要绝对路径。  |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path               |   -----------------------------------         |
| _checker `{.literal} | --------------------------------------------- |
|                      |   指                                          |
|                      | 定用于决定路径状态的默认方法，可能的值包括：  |
|                      |   `r                                          |
|                      | eadsector0`{.literal}：读取该设备的第一扇区。 |
|                      |   `tur`{.literal}：                           |
|                      | 在该设备中执行 `TEST UNIT READY`{.command}。  |
|                      |   `emc_clariion`{.literal}：查询 EM           |
|                      | C Clariion 具体 EVPD 页面 0xCO 以便决定路径。 |