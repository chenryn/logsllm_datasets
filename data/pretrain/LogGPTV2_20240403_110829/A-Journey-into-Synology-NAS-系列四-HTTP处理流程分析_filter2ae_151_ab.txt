第`1`个比较有意思的`api`是`videotranscoding.cgi`，对应的请求`url`格式为`http://%s:%d/transcoder/videotranscoding.cgi/%s/id=%d%s`，处理该请求的部分代码如下。可以看到，如果`url`中包含字符串`id=`和字符`?`，就将`id=`和`?`之间的内容拷贝到`dest`缓冲区中。由于没有考虑两者出现的先后顺序，如果请求`url`为`http://%s:%d/transcoder/videotranscoding.cgi/VideoStation?id=1`，在调用`strncpy()`时就会出现整数下溢问题。
    __int64 sub_406E80(__int64 a1)
    {
      // ...
      v4 = getenv("REQUEST_URI");
      snprintf(s, 0x800uLL, "%s", v4);
      v99 = strstr(s, "id=");
      if ( v99 )
      {
        v5 = strchr(s, '?');
        if ( v5 )
          strncpy(dest, v99 + 3, v5 - (v99 + 3)); // integer underflow
      }
      // ...
      std::string::assign(v3, dest, strlen(dest));
      // ...
      sub_403F50(a1, v1, v3, (std::string *)(a1 + 136));
假设请求`url`的格式和程序预期的一致，函数`sub_403F50()`将会在后续被调用，其第`3`个参数对应前面拷贝的请求`url`中`id=`和`?`之间的内容。在`sub_403F50()`中，对参数`a2`进行简单校验后，参数`a3`会被当做`id`后面的参数进行格式化。由于未对参数`a3`进行适当校验，且参数`a3`外部可控，因此会存在`SQL`注入的问题。
    __int64 sub_403F50(__int64 a1, std::string *a2, _QWORD *a3, std::string *a4)
    {
      // ...
      if ( !(unsigned int)std::string::compare(a2, "MediaServer") )
      {
        std::string::assign((std::string *)v32, "mediaserver", 0xBuLL);
        std::string::assign((std::string *)&v34, "MediaServer", 0xBuLL);
        std::string::assign((std::string *)v33, "video", 5uLL);
      }
      else
      {
        if ( (unsigned int)std::string::compare(a2, "VideoStation") )
          goto LABEL_4;
        std::string::assign((std::string *)v32, "video_metadata", 0xEuLL);
        std::string::assign((std::string *)&v34, "VideoStation", 0xCuLL);
        std::string::assign((std::string *)v33, "video_file", 0xAuLL);
      }
      snprintf(s, 0x100uLL, "SELECT * from %s where id = %s", v33[0], (const char *)*a3); // SQL injection
另外`1`个类似的`api`为`jpegtnscaler.cgi`，对应的请求`url`格式为`http://%s:%d/transcoder/jpegtnscaler.cgi/%s/%d.%s`，处理该请求的部分代码如下。可以看到，在调用`strncpy()`前未对其长度参数进行校验，通过构造请求如`http://%s:%d/transcoder/jpegtnscaler.cgi//1`，可造成缓冲区溢出。
    __int64 main(__int64 a1, char **a2, char **a3)
    {
      // ...
      v3 = getenv("REQUEST_URI");
      // ...
      v4 = strrchr(v3, '/');
      v5 = v4;
      // ...
      v6 = strtol(v4 + 1, 0LL, 10);
      bzero(s, 0x400uLL);
      strncpy(s, v3, v5 - v3);  // buffer overflow
###  Audio Station
`Audio
Station`套件提供收听广播节目、管理音乐库、建立个人播放清单等功能，并支持随时随地与朋友分享。安装该套件后，在其安装路径下会存在一些自定义的`cgi`程序，如`media_server.cgi`、`web_player.cgi`、`audiotransfer.cgi`等。在使用该套件的同时进行抓包，部分请求示例如下。
在前面提到的`HTTP`请求处理流程中，`execl_cgi()`负责处理自定义的`cgi`请求。更重要的是，在某些情形下，认证的处理由自定义的`cgi`程序负责。
通过分析，最有意思的`api`为`audiotransfer.cgi`，对应的请求`url`格式为`http://%s:%d/webman/3rdparty/AudioStation/webUI/audiotransfer.cgi/%s.%s`，处理该请求的部分代码如下。可以看到，在`main()`函数开始处调用`sub_402730()`。在函数`sub_402730()`中，先获取请求`url`路径最后面的内容，然后将其传给`MediaIDDecryption()`。在`MediaIDDecryption()`中，先计算参数`a1`的长度，在拷贝前`6`个字节后，调用`snprintf()`。由于调用`snprintf()`时，其`size`参数和后面的字符串内容可控，存在缓冲区溢出问题。更重要的是，这个过程中没有对认证进行处理，即无需认证，因此通过构造并发送特定的请求，远程未认证的用户可触发该缓冲区溢出漏洞。
    __int64 main(__int64 a1, char **a2, char **a3)
    {
      sub_402730((__int64)v5);
    _BOOL8 sub_402730(__int64 a1)
    {
      // ...
      v8 = getenv("REQUEST_URI");
      snprintf(s, 0x400uLL, "%s", v8);
      // ...
      v11 = strrchr(s, '/');
      v12 = v11;
      if ( v11 )
      {
        // ...
        v15 = MediaIDDecryption((__int64)(v12 + 1));
    __int64 MediaIDDecryption(const char *a1)
    {
      // ...
      v1 = strlen(a1);
      if ( v1 > 5 )
      {
        v3 = (v1 - 6) >> 1;
        snprintf(s, 7uLL, "%s", a1);
        v14 = 0; v4 = s; v5 = (char *)&v14;
        do
        {
          v6 = *v4; --v5; ++v4; v5[6] = v6;
        }
        while ( v5 != &v13 );   // copy first 6 bytes
        __isoc99_sscanf(s, "%x", &v8);
        __isoc99_sscanf(&v14, "%x", &v9);
        snprintf(v17, v3 + 1, "%s", a1 + 6);
        snprintf(v18, v3 + 1, "%s", &a1[v3 + 6]); // buffer overflow
关于漏洞利用，知道创宇的`[@fenix](https://github.com/fenix "@fenix")`师傅基于`DSM
5.2-5592`和`Audio Station
5.4-2860`进行了[分析和测试](https://paper.seebug.org/1604/)，其中相关的条件包括`x86架构`、`NX保护`、`ASLR为半随机`，感兴趣的可以去看看。这里补充几点：
  * 针对`x86`架构，基于`DSM 6.x`，`ASLR`为全随机，通过寻找合适的`gadgets`，可实现稳定利用，无需堆喷或爆破；
  * 在`DSM 6.x`上，获取到`shell`后，还需要进行提权操作；
  * 针对`x64`架构，由于存在地址高位截断的问题，暂时未找到合适的思路进行利用。  
> 如果师傅们有合适的思路，欢迎交流 🙂
## One More Thing
上面只是列举了几个典型的套件，以及在其中发现的部分问题。实际上，群晖的`DSM`系统中有非常多的功能，以及大量的套件可供分析。群晖官方会不定期发布其产品的[安全公告](https://www.synology.com/en-global/security/advisory)，结合群晖的[镜像仓库](https://archive.synology.com/download/)，可以很方便地去做补丁分析和漏洞挖掘。
## 小结
针对群晖`NAS`的远程使用场景，本文重点对`web`接口上请求的流程和处理机制进行了分析。同时，结合几个典型的套件，基于上述流程，分享了在其中发现的部分安全问题。
本文是该系列的最后一篇，希望对群晖`NAS`设备感兴趣的同学有所收获。
## 相关链接
  * [Synology-SA-20:07 Synology Calendar](https://www.synology.cn/zh-cn/security/advisory/Synology_SA_20_07)
  * [Synology-SA-21:21 Audio Station](https://www.synology.cn/zh-cn/security/advisory/Synology_SA_21_21)
  * [聊聊 Synology NAS Audio Station 套件未授权 RCE 调试及 EXP 构造](https://paper.seebug.org/1604/)
  * [群晖产品安全公告](https://www.synology.com/zh-cn/security/advisory)
  * [群晖镜像仓库](https://archive.synology.com/download/)