·所有单词具有相同的长度。
·所有单词只由小写字母组成。
·字典中不存在重复的单词。
·你可以假设beginWord和endWord是非空的，且二者不相同。
解题思路
·这一题是第127题的加强版，除了找到路径的长度，还进一步要求输出所有路径。解题思路同第
127题一样，也是用BFS遍历。
·当前做法不是最优解，是否可以考虑双端BFS优化，或者迪杰斯塔拉算法？
代码
package leetcode
func findLadders(beginword string, endword string, wordList []string) []
[]string {
result, wordMap := make([][]string, 0), make(map[string]boo1)
for _, w := range wordList {
wordMap[w]  = true
if !wordMap[endword]{
return result
// create a queue, track the path
queue := make([][]string, 0)
queue = append(queue, []string(beginword})
// queuelen is used to track how many slices in queue are in the same level
// if found a result, I still need to finish checking current level cause I
need to return all possible paths
queueLen := 1
// use to track strings that this level has visited
// when queueLen == 0, remove levelMap keys in wordMap
1evelMap := make (map[string]boo1)
for len(queue)> 0 {
[o]ananb =: yed
---
## Page 256
queue = queue[1:]
lastword := path[1en(path)-1]
for i := 0; i,,=:Jo
nextword := lastword[:i]+ string(c) + 1astword[i+l:]
if nextword == endword{
path = append(path, endword)
result = append(result, path)
continue
if wordMap[nextword]{
// different from word ladder, don't remove the word from wordMap
immediately
// same level could reuse the key.
// delete from wordMap only when currently level is done.
1evelmap[nextword]= true
newPath := make([]string, len(path))
copy(newPath, path)
newPath = append(newPath, nextword)
queue = append(queue, newPath)
3
queueLen--
// if queueLen is 0, means finish traversing current level. if result is
not empty, return result
if queueLen == 0 {
if len(result) > 0{
return result
for k := range levelMap {
delete(wordMap, k)
// clear levelMap
levelmap = make(map[string]bool)
queueLen = 1en(queue)
return result
127.WordLadder
题目
Given two words (beginWord and eno/Word), and a dlictionary's word list, find the length of shortest
transformation sequence from beginWord to endWord, such that:
---
## Page 257
1. Only one letter can be changed at a time.
2. Each transformed word must exist in the word list. Note that beginWord is not a transformed
word.
Note:
● Return 0 if there is no such transformation sequence.
●All words have the same length.
● All words contain only lowercase alphabetic characters.
● You may assume no duplicates in the word list.
● You may assume beginWord and endWord are non-empty and are not the same.
Example 1:
Input:
beginword = "hit",
*_60o>, = puoxpua
wordList = ["hot",“dot","dog","lot”","log","cog"]
Output: 5
Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" ->
*,6o>.0{
depth++
qlen := len(que)
for i := 0; i  0 {
1eft = numMap[num-1]
}else {
left = 0
if numMap[num+1]>0 {
right = numMap[num+1]
}else{
right = 0
// sum: length of the sequence n is in
sum = left + right + 1
numMap[num] = Sum
// keep track of the max length
res = max(res, sum)
// extend the length to the boundary(s) of the sequence
// wil1 do nothing if n has no neighbors
numMap[num-1eft] =  sum
numMap [num+right]  = sum
}else{
continue
---
## Page 261
return res
//解法二并查集
func longestConsecutivel(nums []int) int {
if len(nums)
== 0 {
return 0
numMap, countMap, 1cs, uf := map[int]int{}, map[int]int[}, 0,
template.UnionFind{}
uf.Init(len(nums))
for i := 0;i  1cs {
1cs = countMap[parent]
}
return 1cs
//解法三暴力解法，时间复杂度0（n^2）
func 1ongestConsecutive2(nums []int) int {
if 1en(nums）== 0 {
return 0
numMap, 1ength, tmp, 1cs := map[int]bool{}， 0, 0, 0
for i := 0; i 2->3 which represents the number 123 .
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Example:
Input: [1,2,3]
1
/
output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-1eaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:
---
## Page 263
Input: [4,9,0,5,1]
4
/
6
0
/
5
output: 1026
Explanation:
The root-to-1eaf path 4->9->5 represents the number 495.
The root-to-1eaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
题目大意
给定一个二叉树，它的每个结点都存放一个0-9的数字，每条从根到叶子节点的路径都代表一个数字。
例如，从根到叶子节点路径1->2->3代表数字123。计算从根到叶子节点生成的所有数字之和。说明：
叶子节点是指没有子节点的节点。
解题思路
·这一题是第257题的变形题，第257题要求输出每条从根节点到叶子节点的路径，这一题变成了
把每一个从根节点到叶子节点的数字都串联起来，再累加每条路径，求出最后的总和。实际做题思
路基本没变
代码
package leetcode
import(
"strconv"
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func sumNumbers(root *TreeNode) int{
res, nums := 0, binaryTreeNums(root)
for _, n := range nums {
num, _ := strconv.Atoi (n)
res += num
---
## Page 264
return res
func binaryTreeNums(root *TreeNode) []string{
if root == nil {
return []string{}
res := []string{}
if root.Left == nil && root.Right == nil {
return []string{strconv.Itoa(root.val)}
tmpLeft := binaryTreeNums(root.Left)
for i:= 0; i < len(tmpLeft); i++{
res = append(res, strconv.Itoa(root.val)+tmpLeft[i])
tmpRight := binaryTreeNums (root.Right)
for i:= 0;i<len(tmpRight);i++{
res = append(res, strconv.Itoa(root.val)+tmpRight[i])
return res
130.SurroundedRegions
题目
Given a 2D board containing *x' and *o′ (the letter O), capture all regions surrounded by
'x'.
A region is captured by flipping all *o′ s into *x' s in that surrounded region.
Example:
X X X X
X00 X
X X 0 X
X 0 X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X 0 X X
---
## Page 265
Explanation:
aua jo japoq au uo o, Aue jeu suea yium apog au uo aq upinous suoiau papunouns
board are not flipped to *x'. Any *o' that is not on the border and it is not connected to an
'o* on the border will be flipped to *x* . Two cells are connected if they are adjacent cells
connected horizontally or vertically.
题目大意
给定一个二维的矩阵，包含“X'和‘O（字母O）。找到所有被X'围绕的区域，并将这些区域里所有的
‘O”用X'填充。被围绕的区间不会存在于边界上，换句话说，任何边界上的‘O'都不会被填充为X。任
何不在边界上，或不与边界上的O'相连的‘O'最终都会被填充为X。如果两个元素在水平或垂直方向
相邻，则称它们是“相连“的。
解题思路
·给出一张二维地图，要求把地图上非边缘上的‘O'都用X覆盖掉。
·这一题有多种解法。第一种解法是并查集。先将边缘上的'O'全部都和一个特殊的点进行