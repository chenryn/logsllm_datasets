ACCEPT or REJECT.
The correctness ensures that, if all the parties follow the protocol honestly then the search
protocol returns the correct result for each query.
Deﬁnition 5 (Correctness) A PV-SSE scheme is correct if,
∀D B ∀q Pr
⎡
⎣ (K , ak, E D B) ← Setup(D B),
(V , val) ← Search(K , q; E D B; ak)
: val = ACC E PT , V = D B(q)
⎤
⎦ = 1
123
130
A. Soleimanian, S. Khazaei
A relaxation of the above deﬁnition which is based on the deﬁnition of SSE computational
correctness from [8] is tailored for PV-SSE as follows.
Deﬁnition 6 (Computational correctness) For an adversary A and a PV-SSE scheme Σ, we
deﬁne the following game.
ComCorΣA(λ): A(1λ) chooses D B, the game generates (K , ak, E D B) ← Setup(D B)
and gives (E D B, ak) to A. Then the adversary adaptively chooses queries q, for each of
which the game runs the Search protocol with client input (K , q), auditor input ak and
server input E D B. If in any execution the client outputs something other than D B(q) or the
auditor outputs REJECT, the game outputs 1, and otherwise it outputs 0. The output of the
game is denoted by the random variable ComCorΣA(λ).
We say that a scheme Σ is computationally correct if for all P.P.T adversaries A,
Pr[ComCorΣA(λ) = 1] ≤ negl(λ).
3.2 Security deﬁnition
The security deﬁnition consists of two parts, conﬁdentiality and soundness. To capture these
notions for our primitive, similar deﬁnitions to the adaptive security deﬁnition from [13] and
soundness (reliability) deﬁnition from [5] and [22] are respectively used.
The adaptive security [13] guarantees that no useful information leading to the direct
exposure of the searched keyword and plaintext data is leaked from index and queries.
Curtmola et al. [13] presented a precise deﬁnition of the security to model the concept
of preventing the leakage of useful information for an SSE scheme. The concept of the
security deﬁnition in [13] is that given only a precisely-deﬁned leakage proﬁle, a simulator
should be able to simulate the view of the server during an adaptive attack (where the server
chooses the database and related adaptive queries). The mentioned leakage proﬁle (denoted
by L) contains some not very sensitive information such as access pattern, search pattern
(query pattern) and some information on the total size of the database, but never plain data or
searched keywords directly. Therefore, it is guaranteed that by holding the encrypted index
E D B and receiving various queries, an HBC server cannot learn anything beyond what can
be inferred from the deﬁned leakage.
3.2.1 Conﬁdentiality
The conﬁdentiality for a PV-SSE scheme ensures that in an adversarial model in which
the client is honest, the server and the auditor are both HBC and may collude, no useful
information leading to the direct exposure of the searched keyword and plain-text data is
leaked from the encrypted index, audit key, associated queries and interactions.
Deﬁnition 7 (Conﬁdentiality [8]) Let Σ = (Setup, Search) be a PV-SSE scheme and
leakage function L be a stateful algorithm. For the adversary A and the simulator S, the
following games are deﬁned.
RealΣA(λ): The adversary A chooses a database D B ← A(1λ). The game runs
(K , ak, E D B) ← Setup(D B) and gives E D B and ak to A. The adversary adaptively
chooses queries q. For each query q from the adversary, the game runs (V , val) ←
Search(K , q; E D B; ak) with client input (K , q), server input E D B and auditor input
ak and gives the transcript and client output to A. Eventually A returns a bit that the
game uses as its own output denoted by the random variable RealΣA(λ).
123
Publicly veriﬁable SSE
131
SimΣA,S (λ): The game initializes a counter i = 0 and an empty list q. The adversary
A chooses a database D B ← A(1λ). The game runs (E D B
∗) ← S(L(D B)) and
gives E D B
to the adversary. The adversary adaptively chooses queries q. To
respond, the game records the query q as q[i], increments i, and gives to A the output of
S(L(D B, q)). Eventually A returns a bit that the game uses as its own output denoted
by the random variable SimΣA,S (λ).
∗, ak
∗
∗
and ak
We say that Σ is L-adaptively-secure (against chosen keyword attack (CKA)) if for all P.P.T
adversaries A there exists a P.P.T simulator S such that,
| Pr[RealΣA(λ) = 1] − Pr[SimΣA,S (λ) = 1]| ≤ negl(λ).
3.2.2 Soundness
The soundness ensures that any attempt by a malicious server who may collude with an HBC
auditor to produce an incorrect or incomplete result will be detected by the auditor.
Deﬁnition 8 (Soundness) Let Σ = (Setup, Search) be a PV-SSE scheme. The following
game is deﬁned.
SoundΣA(λ): The adversary A chooses a database D B ← A(1λ). The game runs
(K , ak, E D B) ← Setup(D B) and sends E D B and ak to A. The adversary adaptively
∗) ←
chooses queries q. For each query q from the adversary, the game runs (V
Search(K , q; E D B; ak) and gives the output to the adversary. If val
∗ = ACC E PT
∗ (cid:11)= D B(q), then the adversary outputs 1 otherwise it outputs 0. The output of the
and V
game denoted by the random variable SoundΣA(λ) is what the adversary outputs.
We say that Σ is publicly-sound if for all P.P.T adversaries A, Pr[SoundΣA(λ) = 1] ≤
negl(λ).
∗, val
4 Proposed PV-SKS constructions
A Publicly Veriﬁable SKS (PV-SKS) scheme is a PV-SSE scheme where queries are of the
form q = w. In this section two PV-SKS constructions are presented and their security is
proved in terms of the mentioned deﬁnitions in Sect. 3.
4.1 PV-SKS1 construction
The ﬁrst construction is based on the idea of Parno et al. [28]. For each keyword/identiﬁer
pair, whether the associated document contains the keyword or not, the server should be
able to present a proof (in both cases). To achieve this purpose, the client stores a data-
structure X on the server side such that for each pair (w, id) ∈ W × I D the data-structure
X contains a cell including two parts (cid:12)address, value(cid:13). For a target keyword, the client
produces address and two veriﬁcation keys (for each cases, whether the keyword is contained
in the document or not). Then, the server uses the address received from the client to get
associated cell of X. Also, by using value and veriﬁcation keys the server is able to prove
if the keyword is contained in the document or not. More precisely, for each pair (w, id)
the data-structure X contains a triple (cid:12)V , tag0, tag1(cid:13) as the data value. On the other hand,
for each query q = w the client produces tokens tid = π(K X , w||id), id = 1, . . . , d, as
data address, and sends them to the server where π is a pseudo-random permutation (PRP).
123
132
A. Soleimanian, S. Khazaei
, vkid
, vkid
1 are generated such that that the equality vkid
b
= g(V ⊕ tag1) and for w /∈ Wid the proof is vkid
1 , id = 1, . . . , d to the auditor. Using the
The client also sends veriﬁcation keys vkid
token tid = π(K X , w||id) the server extracts the triple X[tid] = (cid:12)V , tag0, tag1(cid:13) and sends
0
V ⊕ tag0 and V ⊕ tag1 to the auditor. For pair (w, id), the triple (cid:12)V , tag0, tag1(cid:13) and the
= g(V ⊕ tagb) is satisﬁed
pair vkid
exclusively for b = 1 or b = 0 where g is a one-way function (OWF). For w ∈ Wid the
0
= g(V ⊕ tag0).
associated proof is vkid
To produce (cid:12)V , tag0, tag1(cid:13) and vkid
1
in a way that the mentioned requirements are
satisﬁed, we set V = F (K E , b||w||id), tag0 = F (KV , 0||w||id)⊕F (K E , 0||w||id), tag1 =
F (KV , 1||w||id) ⊕ F (K E , 1||w||id) where b = 1 if w ∈ Wid, otherwise it is 0 and we also
= g(F (KV , 1||w||id)). Now it is easy to see that by
set vkid
= g(V ⊕tagb) is satisﬁed exclusively for b = 1 or b = 0. Our ﬁrst PV-SKS
0
this settings vkid
b
construction is shown in Fig. 1. In this construction, F and g respectively denote a PRF and
a OWF (see Appendix A.1 for details).
as q = (W
for wi ∈ W
in our PV-SSE1 construction.
We also note that the construction has the capability to support some special queries such
(cid:8) ⊆ W and id ∈ I D by producing tokens ti,id = π(K X , wi||id)
(cid:8), id) where W
(cid:8)
. These queries can be useful in some search protocols and will specially be used
= g(F (KV , 0||w||id)),vkid
, vkid
1
1
0
0
Theorem 1 If F is a secure PRF and π is a secure PRP then the PV-SKS1 constriction in
Fig. 1 is L-adaptively-secure (where L = (L(D B), L(D B; q)) will be deﬁned during the
proof).
Proof In deﬁnition 7, the experiment SimΣA,S (λ) is as follows:
1. the adversary A chooses D B.
2. the simulator S on input L(D B) = |W| × |I D| = N constructs X
∗
as follows:
– for j = 1, . . . , N randomly chooses bit stings r j from the range of π and a j , a j
from the range of F.
∗[r j] = (cid:12)a j , a j
– sets X
(cid:13)
0
, a j
1
0
, a j
1
3. the adversary A repeatedly asks query wc (c denotes the counter for queries)
4. the simulator S on input L(D B, w1, . . . , wc) = (APc, S Pc, d) constructs vk
∗
follows, where APc = {id ∈ I D|wc ∈ Wid} and S Pc = { j| j (cid:2) c, w j = wc}
– if S Pc = ∅ (meaning that the query wc has not been repeated yet)
∗
as
and t
, a j
1
∗ for all id ∈ APc
• randomly chooses a number j ∈ {1, . . . , N} that has not been selected yet
= r j
∗
and sets t
• parses X
] as (cid:12)a j , a j
∗[t
id
∗
• chooses vkid
id
0 randomly from the range of g such that, vkid
= g(a j
0
and sets vkid
∗ for all id /∈ APc
1
• randomly chooses a number j ∈ {1, . . . , N} that has not been selected yet
= r j
∗
and sets t
] as (cid:12)a j , a j
• parses X
∗[t
id
∗
• chooses vkid
id
1 randomly from the range of g such that, vkid
= g(a j
1
and sets vkid
∗ outputs t
∗ = (t
∗
∗
0
0
, . . . , t
whatever previously output for j ∈ S Pc
– if S Pc (cid:11)= ∅ sets t
∗, vk
∗
1
d
⊕ a j ) , vk
) and vk
, vkid
∗
1
, . . . , vk
d
∗
∗ = (vk
id
⊕ a j ) , vk
= (vkid
= (vkid
(cid:11)= g(a j
(cid:11)= g(a j
⊕ a j )
⊕ a j )
, vkid
1
, a j
1
∗
id
)
)
0
∗
1
(cid:13)
(cid:13)
)
0
0
0
1
1
0
123
Publicly veriﬁable SSE
133
Fig. 1 PV-SKS1 Construction
The rest of the interactions are simulated exactly the same as the real protocol.
∗
∗
and X
Clearly, since π is a PRP and F is a PRF thus t
are computationally indistin-
guishable from t and X. As the related relations are satisﬁed in constructing vk
and F is
PRF so it is computationally indistinguishable from vk. Therefore, for all P.P.T adversaries
A there exists simulator S such that,
∗
| Pr[RealΣA(λ) = 1] − Pr[SimΣA,S (λ) = 1]| ≤ negl(λ).
(cid:16)(cid:17)
Theorem 2 If F is a secure PRF and g is a secure OWF, then PV-SKS1 is publicly-sound.
Proof Let Σ denotes PV-SKS1 construction. Consider the soundness Deﬁnition 8 for query
q = w, deﬁne the event A as follows:
123
134
A. Soleimanian, S. Khazaei
A= for some (w, id) ∈ W × I D, the adversary A can produce a value v∗
such that
g(v∗) = vk1−b, where vk0, vk1 and b are obtained from the honest implementation of PV-
SKS1 construction. We then have:
Pr[SoundΣA(λ) = 1] = Pr[A]
≤ Pr[A(F (K E , b||w||id)) → F (K E , 1 − b||w||id)]
+ Pr[A(F (KV , b||w||id)) → F (KV , 1 − b||w||id))]
+ Pr[g(A(vk1−b)) = vk1−b] ≤ negl(λ).
(cid:16)(cid:17)
The last inequality is satisﬁed because F is a PRF and g is a OWF.
4.2 PV-SKS2 construction
Our second PV-SKS construction which is based on the digital signature scheme is presented
in Fig. 2. To make public veriﬁability possible, before data outsourcing the client constructs
a data-structure Y indexed by keywords from W . For each keyword w the data-structure Y
contains a signature on the value D B(w).Thus, it is enough for the server to get D B(w) by
any arbitrary SKS scheme and then use the data-structure Y to attach the related signature. But
as the signature scheme does not preserve the message conﬁdentiality, the plain data D B(w)
should be encrypted before signing. However, the encryption key is needed to be revealed in
the veriﬁcation step, simply because we need to be sure that the list of documents resulted from