    setTimeout(function(){
        Java.perform(function (){
            console.log("");
            console.log("[.] Cert Pinning Bypass/Re-Pinning");
            var CertificateFactory = Java.use("java.security.cert.CertificateFactory");
            var FileInputStream = Java.use("java.io.FileInputStream");
            var BufferedInputStream = Java.use("java.io.BufferedInputStream");
            var X509Certificate = Java.use("java.security.cert.X509Certificate");
            var KeyStore = Java.use("java.security.KeyStore");
            var TrustManagerFactory = Java.use("javax.net.ssl.TrustManagerFactory");
            var SSLContext = Java.use("javax.net.ssl.SSLContext");
            // Load CAs from an InputStream
            console.log("[+] Loading our CA...")
            var cf = CertificateFactory.getInstance("X.509");
            try {
                var fileInputStream = FileInputStream.$new("/data/local/tmp/cert-der.crt");
            }
            catch(err) {
                console.log("[o] " + err);
            }
            var bufferedInputStream = BufferedInputStream.$new(fileInputStream);
            var ca = cf.generateCertificate(bufferedInputStream);
            bufferedInputStream.close();
            var certInfo = Java.cast(ca, X509Certificate);
            console.log("[o] Our CA Info: " + certInfo.getSubjectDN());
            // Create a KeyStore containing our trusted CAs
            console.log("[+] Creating a KeyStore for our CA...");
            var keyStoreType = KeyStore.getDefaultType();
            var keyStore = KeyStore.getInstance(keyStoreType);
            keyStore.load(null, null);
            keyStore.setCertificateEntry("ca", ca);
            // Create a TrustManager that trusts the CAs in our KeyStore
            console.log("[+] Creating a TrustManager that trusts the CA in our KeyStore...");
            var tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
            var tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
            tmf.init(keyStore);
            console.log("[+] Our TrustManager is ready...");
            console.log("[+] Hijacking SSLContext methods now...")
            console.log("[-] Waiting for the app to invoke SSLContext.init()...")
            SSLContext.init.overload("[Ljavax.net.ssl.KeyManager;", "[Ljavax.net.ssl.TrustManager;", "java.security.SecureRandom").implementation = function(a,b,c) {
                console.log("[o] App invoked javax.net.ssl.SSLContext.init...");
                SSLContext.init.overload("[Ljavax.net.ssl.KeyManager;", "[Ljavax.net.ssl.TrustManager;", "java.security.SecureRandom").call(this, a, tmf.getTrustManagers(), c);
                console.log("[+] SSLContext initialized with our custom TrustManager!");
            }
        });
    },0);
在cmd, 输入如下命令:
    $ adb push burpca-cert-der.crt /data/local/tmp/cert-der.crt
    $ frida -U -f it.app.mobile -l frida-android-repinning.js --no-pause
在关闭应用的情况下(避免Magisk Hide处于开启状态), 可得到回显并绕过SSL pinning。  
### 绕过SSL双向校验
其实SSL双向校验是在SSL单向校验的基础上,
在说明这部分内容的时候同时也会有绕过SSL单向校验详细的步骤。参考文章[Android平台HTTPS抓包解决方案及问题分析](https://juejin.im/post/5cc313755188252d6f11b463#heading-14),
我们可以先用sxxl.app来练练手。
在手机上设置完代理之后, 点击完确认, 发现app出现如下弹窗：
在这个时候查看Fiddler会发现应用没有发出任何请求, 这是因为app会对服务器端的证书进行校验, 这时候我们前面安装的Fiddler证书就不起作用了,
应用在发现证书是伪造的情况下拒绝发送请求。根据这个报错+抓不到包, 我们可以确定应用是存在单向校验的, 也就是SSL pinning, 让我们先来解决SSL
pinning的问题。使用JustTrustMe可以绕过客户端的证书校验, 下面勾选上JustTrustMe,
在Xposed框架下使用JustTrustMe绕过SSL pinning。
绕过SSL pinning之后, 就能使用Fiddler抓取到HTTPS的数据包了。
我随便输入了一个手机号码, 按下确定之后, 服务器回传了400的状态码过来, 说需要发送证书以确认客户端的身份。到这一步基本能确定是存在双向校验的了,
接下来的工作就是绕过SSL服务器端的校验了。
如果服务器端会对客户端证书进行校验, 证书应该就直接存放在apk里, 网上与SSL双向校验相关的文章都将证书放到`/asset`目录下,
也就是app的资源目录下, 也有可能放在`/res/raw`目录下。直接将app解压之后, 发现证书的位置如下：
如果找半天没找到就用关键词`.p12/.pfx`搜索证书文件。
在我们要使用该证书的时候, 需要输入安装证书的密码。这时候就需要从源码中获取安装证书的密码了。可能是因为多个dex文件的原因,
直接用JEB反编译的时候出错了, 所以我用GDA反编译来分析应用的源代码
### 获取安装证书的密码
发现通过关键词"PKCS12"能够定位到加载证书的位置。
上图第二个红框中的load函数的第二个参数其实就是证书的密钥, 追根溯源, 我们可以知道v1参数是下图中调用的函数的返回值。
上图的函数的功能就是传递p0参数, 也就是说p0参数就是证书安装密码。想获取这个密码, 关键在于Auto_getValue函数。到这一步,
只要跟进Null_getStorePassword函数看看就好了。
跟进去发现调用了native层的函数, 查看init函数中具体加载的是哪个so文件：
用IDA反编译soul-netsdk之后, 搜索字符串"getStorePassword", 就定位到函数getStorePassword上了, F5之后,
获得伪代码和密钥：
### 代理添加客户端证书
HttpCanary添加客户端证书进行抓包的过程可以参照文章[Android平台HTTPS抓包解决方案及问题分析](https://juejin.im/post/5cc313755188252d6f11b463),
在自己头昏的时候也感谢这篇文章的作者MegatronKing点醒我。下面主要讲解Fiddler和burpsuite添加客户端证书的方法。
#### fiddler操作过程
尝试一下用Fiddler处理这部分的内容来安装客户端的证书, 用来绕过双向认证。
用Fiddler抓取该应用的数据包的时候, 发现Fiddler出现了上面的弹窗, 提示要添加ClientCertificate.cer,
才能抓取到传输的数据包, 不然只会出现400的状态码。而我们文件目录下只能找到`client.p12`和`client.crt`两种格式的证书文件,
所以我们需要将已有的client证书转换成`.cer`格式的证书。
好像应用中只出现`.p12`格式的证书的情况比较常见,
所以下面只会提及如何使用openssl将`.p12`格式的证书转换成`.cer/.der`格式的证书。(.der和.cer格式的证书仅有文件头和文件尾不同)
下面的命令实现了证书的格式转换, `.p12`->`.pem`->`.cer`, 在生成`.pem`格式的证书之后, 需要输入证书的密码,
也就是我们上面逆向获取的证书密码。最后将`ClientCertificate.cer`移动到之前Fiddler弹窗出现的目录下,
也就是`\Fiddler2`下。
    # 将.p12证书转换成.pem格式
    $ openssl pkcs12 -in client.p12 -out ClientCertificate.pem -nodes
    Enter Import Password:
    # 将.pem证书转换成.cer格式
    $ x509 -outform der -in ClientCertificate.pem -out ClientCertificate.cer
现在打开Fiddler尝试抓包, 发现原本显示400的数据包现在能够正常抓取到了, 如果还是不能正常抓取到,
双击`client.p12`将证书安装到本地试试看。  
#### burp操作过程
手机的burpsuite证书安装成功之后, 我们会发现只能抓取到400的状态码。
因为要绕过服务器端对证书的验证, 我们还需要在这里添加上面我们在asset目录下找到的证书。
安装完就能正常抓取数据包了。
## 抓取TCP的数据包
现在还不知道怎么能够获取TCP的数据包并对其中的内容进行解密,
不过之前在看雪上看到一篇分析使用TCP传输协议的文章[某直播APP逆向TCP协议分析](https://bbs.pediy.com/thread-251063.htm),
我大概看了一下, 文章是从逆向的角度分析的, 具体怎么从渗透的角度发现是TCP协议传输的数据包还没有分析过,
看作者使用了wireshark抓取应用的数据包并进行分析, 这个还是要重新分析一下的。
# 结语
文章最后, 还要感谢华华师傅, 其实实习的时候接触android的时间也不长, 但是之后真的让我接触到很多和学到很多, 也谢谢师傅能耐心地帮我解答问题,
感恩。