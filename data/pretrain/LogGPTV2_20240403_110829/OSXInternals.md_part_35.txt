以下是经过优化的文本，使其更加清晰、连贯和专业：

---

### 屏幕高度计算
```forth
screen-height swap ( screen-height tn )
1 + ( screen-height [tn + 1] )
h-disk-height * ( screen-height [[tn + 1] * h-disk-height] )
h-bh + ( screen-height [[[tn + 1] * h-disk-height] + h-bh] )
- ( screen-height - [[[tn + 1] * h-disk-height] + h-bh] )
```

### 汉诺塔磁盘数量增加
```forth
: hanoi-tower-disks-inc ( tid -- tn )
    dup ( tid tid ) \ 复制塔ID
    1 - h-tower-disks + c@ \ 获取当前磁盘数量
    dup ( tid cn cn ) \ 复制当前磁盘数量
    1 + ( tid cn [cn + 1] ) \ 增加磁盘数量
    rot ( cn [cn + 1] tid ) \ 调整栈顺序
    1 - h-tower-disks + c! \ 更新磁盘数量
;
```

### 汉诺塔磁盘数量减少
```forth
: hanoi-tower-disks-dec ( tid -- tn )
    dup ( tid tid ) \ 复制塔ID
    1 - h-tower-disks + c@ \ 获取当前磁盘数量
    dup ( tid cn cn ) \ 复制当前磁盘数量
    1 - ( tid cn [cn - 1] ) \ 减少磁盘数量
    rot ( cn [cn - 1] tid ) \ 调整栈顺序
    1 - h-tower-disks + c! \ 更新磁盘数量
;
```

### 向汉诺塔添加磁盘
```forth
: hanoi-tower-disk-add ( tid did -- )
    h-color-disk ( tid did color ) \ 获取磁盘颜色
    -rot ( color tid did ) \ 调整栈顺序
    2dup ( color tid did tid did ) \ 复制塔ID和磁盘ID
    hanoi-disk-x ( color tid did x ) \ 获取磁盘X坐标
    -rot ( color x tid did ) \ 调整栈顺序
    over ( color x tid did tid ) \ 复制塔ID
    hanoi-tower-disks-inc ( color x tid did tn ) \ 增加磁盘数量
    hanoi-disk-y ( color x tid did y ) \ 获取磁盘Y坐标
    -rot ( color x y tid did ) \ 调整栈顺序
    hanoi-disk-width 2 * ( color x y tid w ) \ 获取磁盘宽度
    swap ( color x y w tid ) \ 调整栈顺序
    drop ( color x y w ) \ 丢弃塔ID
    h-disk-height ( color x y w h ) \ 获取磁盘高度
    hanoi-fillrect \ 绘制磁盘
;
```

### 初始化汉诺塔
```forth
: hanoi-init ( n -- )
    \ 初始化变量
    0 h-dx !
    0 h-dy !
    0 h-tower-disks c!
    0 h-tower-disks 1 + c!
    0 h-tower-disks 2 + c!

    \ 绘制塔基
    1 hanoi-draw-tower-base
    2 hanoi-draw-tower-base
    3 hanoi-draw-tower-base

    \ 绘制塔柱
    1 hanoi-draw-tower-pole
    2 hanoi-draw-tower-pole
    3 hanoi-draw-tower-pole

    \ 向源塔添加磁盘
    1 +
    1 do
        1 i hanoi-tower-disk-add
    loop
;
```

### 睡眠函数
```forth
: hanoi-sleep ( msec -- )
    ms \ 等待指定毫秒数
;
```

### 向上绘制循环
```forth
: hanoi-drawloop-up ( limit start -- )
    do
        h-color-bg
        h-dx @
        h-dy @ i - h-dh @ + 1 -
        h-dw @
        1
        hanoi-fillrect
        h-color-disk
        h-dx @
        h-dy @ i - 1 -
        h-dw @
        1
        hanoi-fillrect
        h-dy @ i - h-disk-ymin >
        if
            h-color-tower
            h-tx @
            h-dy @ i - h-dh @ + 1 -
            h-tw 2 *
            1
            hanoi-fillrect
        then
        h-delay @ hanoi-sleep
    loop
;
```

### 向下绘制循环
```forth
: hanoi-drawloop-down ( limit start -- )
    do
        h-color-bg
        h-dx @
        h-disk-ymin i +
        h-dw @
        1
        hanoi-fillrect
        h-color-disk
        h-dx @
        h-disk-ymin i + 1 + h-dh @ +
        h-dw @
        1
        hanoi-fillrect
        i h-dh @ >
        if
            h-color-tower
            h-tx @
            h-disk-ymin i +
            h-tw 2 *
            1
            hanoi-fillrect
        then
        h-delay @ hanoi-sleep
    loop
;
```

### 左右绘制循环
```forth
: hanoi-drawloop-lr ( limit start -- )
    do
        h-color-bg
        h-dx @ i +
        h-disk-ymin
        h-dw @
        h-dh @
        hanoi-fillrect
        h-color-disk
        h-dx @ i + h-delta @ +
        h-disk-ymin
        h-dw @
        h-dh @
        hanoi-fillrect
        h-delay @ hanoi-sleep
        h-delta @
    +loop
;
```

### 向上移动磁盘
```forth
: hanoi-disk-move-up ( tid did -- )
    h-color-disk ( tid did color ) \ 获取磁盘颜色
    -rot ( color tid did ) \ 调整栈顺序
    2dup ( color tid did tid did ) \ 复制塔ID和磁盘ID
    hanoi-disk-x ( color tid did x ) \ 获取磁盘X坐标
    -rot ( color x tid did ) \ 调整栈顺序
    over ( color x tid did tid ) \ 复制塔ID
    hanoi-tower-disks-dec ( color x tid did tn ) \ 减少磁盘数量
    1 - ( color x tid tid [tn - 1] ) \ 减少磁盘数量
    hanoi-disk-y ( color x tid did y ) \ 获取磁盘Y坐标
    -rot ( color x y tid did ) \ 调整栈顺序
    hanoi-disk-width ( color x y tid w ) \ 获取磁盘宽度
    swap ( color x y w tid ) \ 调整栈顺序
    drop ( color x y w ) \ 丢弃塔ID
    h-disk-height ( color x y w h ) \ 获取磁盘高度
    h-dh !
    2 * h-dw !
    h-dy !
    h-dx !
    h-dcolor !
    h-dx @ h-dw @ 2 / + h-tw - h-tx !
    h-dy @ h-disk-ymin -
    0
    hanoi-drawloop-up
;
```

### 向下移动磁盘
```forth
: hanoi-disk-move-down ( tid did -- )
    h-color-disk ( tid did color ) \ 获取磁盘颜色
    -rot ( color tid did ) \ 调整栈顺序
    2dup ( color tid did tid did ) \ 复制塔ID和磁盘ID
    hanoi-disk-x ( color tid did x ) \ 获取磁盘X坐标
    -rot ( color x tid did ) \ 调整栈顺序
    over ( color x tid did tid ) \ 复制塔ID
    hanoi-tower-disks-inc ( color x tid did tn ) \ 增加磁盘数量
    hanoi-disk-y ( color x tid did y ) \ 获取磁盘Y坐标
    -rot ( color x y tid did ) \ 调整栈顺序
    hanoi-disk-width 2 * ( color x y tid w ) \ 获取磁盘宽度
    swap ( color x y w tid ) \ 调整栈顺序
    drop ( color x y w ) \ 丢弃塔ID
    h-disk-height ( color x y w h ) \ 获取磁盘高度
    h-dh !
    h-dw !
    h-dy !
    h-dx !
    h-dcolor !
    h-dx @ h-dw @ 2 / + h-tw - h-tx !
    h-dy @ h-disk-ymin -
    0
    hanoi-drawloop-down
;
```

### 左右移动磁盘
```forth
: hanoi-disk-move-lr ( tto tfrom -- )
    2dup 
    while
        6 3 pick 3 pick + - ( n from to processed left )
        1 pick
        0 =
        if
            4 pick
            1 =
            if
                2 pick
                4 pick
                6 pick
                hanoi-disk-move
                2drop 2drop drop
            else
                ( n from to processed left )
                1 -rot ( n from to 1 processed left )
                swap drop ( n from to 1 left )
                4 pick 1 - swap ( n from to 1 [n - 1] left )
                4 pick swap 0 ( n from to 1 [n - 1] from left 0 )
            then
        else
            ( n from to processed left )
            swap drop ( n from to left )
            1 pick
            3 pick
            5 pick
            hanoi-disk-move
            ( n from to left )
            swap ( n from left to )
            rot drop ( n left to )
            rot 1 - ( left to [n - 1] )
            -rot 0 ( [n - 1] left to 0 )
        then
    repeat
;
```

### 验证输入
```forth
: hanoi-validate ( n -- n true|false )
    depth
    1 < \ 确保栈中只有一个值
    if
        cr ." usage: n hanoi, where 1 <= n <= " h-maxdisks @ . cr
        false
    else
        dup 1 h-maxdisks @ between
        if
            true
        else
            cr ." usage: n hanoi, where 1 <= n <= " h-maxdisks @ . cr
            drop
            false
        then
    then
;
```

### 主程序
```forth
: hanoi ( n -- )
    hanoi-validate
    if
        erase-screen cr
        ." Press control-z to quit the animation." cr
        dup h-N !
        dup hanoi-init
        1 3 0 hanoi-solve
    then
;
```

### 实际照片
图49. Open Firmware中的汉诺塔程序实际照片

### 制作并使用鼠标指针
在这个示例中，我们将编写一个程序来在屏幕上使用鼠标移动一个“指针”。此外，点击鼠标按钮将在屏幕上打印点击的坐标。我们将使用`fill-rectangle`方法来绘制、擦除和重绘指针，该指针将是一个小正方形。

打开鼠标设备可以访问其`get-event`方法。
```forth
get-event ( ms -- pos.x pos.y buttons true|false )
```
`get-event`接受一个参数：等待事件发生的时间（以毫秒为单位）。如果在指定时间内没有事件发生，则返回失败。它返回四个值：鼠标事件的坐标、包含按下按钮信息的位掩码，以及一个布尔值，指示在该间隔内是否发生了事件。零毫秒的间隔会导致`get-event`一直等待直到事件发生。

`get-event`返回的事件坐标可能是绝对的（对于平板设备），也可能是相对于上次事件的相对坐标（对于鼠标）。这意味着`pos.x`和`pos.y`值应根据设备类型被视为有符号或无符号。可以通过检查`absolute-position`属性的存在来编程确定这一点。

鼠标演示程序如图410所示。它从位置(0, 0)开始绘制一个指针。

---

希望这些修改能帮助你更好地理解和使用这段代码。