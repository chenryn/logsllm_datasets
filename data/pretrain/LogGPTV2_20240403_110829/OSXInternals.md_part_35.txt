screen-height swap ( screen-height tn )
1 + ( screen-height [tn + 1] )
h-disk-height * ( screen-height [[tn + 1] * h-disk-height] )
h-bh + ( screen-height [[[tn + 1] * h-disk-height] + h-bh] )
- ( screen-height - [[[tn + 1] * h-disk-height] + h-bh] )
;
: hanoi-tower-disks-inc ( tid -- tn )
dup ( tid tid )
1 - h-tower-disks + c@ \ fetch cn, current number of disks
dup ( tid cn cn )
1 + ( tid cn [cn + 1] )
rot ( cn [cn + 1] tid )
1 - h-tower-disks + c!
;
: hanoi-tower-disks-dec ( tid -- tn )
dup ( tid tid )
1 - h-tower-disks + c@ \ fetch cn, current number of disks
dup ( tid cn cn )
1 - ( tid cn [cn - 1] )
rot ( cn [cn + 1] tid )
1 - h-tower-disks + c!
;
: hanoi-tower-disk-add ( tid did -- )
h-color-disk ( tid did color )
-rot ( color tid did )
2dup ( color tid did tid did )
hanoi-disk-x ( color tid did x )
-rot ( color x tid did )
over ( color x tid did tid )
hanoi-tower-disks-inc ( color x tid did tn )
hanoi-disk-y ( color x tid did y )
-rot ( color x y tid did )
hanoi-disk-width 2 * ( color x y tid w )
swap ( color x y w tid )
drop ( color x y w )
h-disk-height ( color x y w h )
hanoi-fillrect
;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 34 of 86
: hanoi-init ( n -- )
\ Initialize variables
0 h-dx !
0 h-dy !
0 h-tower-disks c!
0 h-tower-disks 1 + c!
0 h-tower-disks 2 + c!
\ Draw tower bases
1 hanoi-draw-tower-base
2 hanoi-draw-tower-base
3 hanoi-draw-tower-base
\ Draw tower poles
1 hanoi-draw-tower-pole
2 hanoi-draw-tower-pole
3 hanoi-draw-tower-pole
\ Add disks to source tower
1 +
1
do
1 i hanoi-tower-disk-add
loop
;
: hanoi-sleep ( msec -- )
ms
;
: hanoi-drawloop-up ( limit start -- )
do
h-color-bg
h-dx @
h-dy @ i - h-dh @ + 1 -
h-dw @
1
hanoi-fillrect
h-color-disk
h-dx @
h-dy @ i - 1 -
h-dw @
1
hanoi-fillrect
h-dy @ i - h-disk-ymin >
if
h-color-tower
h-tx @
h-dy @ i - h-dh @ + 1 -
h-tw 2 *
1
hanoi-fillrect
then
h-delay @ hanoi-sleep
loop
;
: hanoi-drawloop-down ( limit start -- )
do
h-color-bg
h-dx @
h-disk-ymin i +
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 35 of 86
h-dw @
1
hanoi-fillrect
h-color-disk
h-dx @
h-disk-ymin i + 1 + h-dh @ +
h-dw @
1
hanoi-fillrect
i h-dh @ >
if
h-color-tower
h-tx @
h-disk-ymin i +
h-tw 2 *
1
hanoi-fillrect
then
h-delay @ hanoi-sleep
loop
;
: hanoi-drawloop-lr ( limit start -- )
do
h-color-bg
h-dx @ i +
h-disk-ymin
h-dw @
h-dh @
hanoi-fillrect
h-color-disk
h-dx @ i + h-delta @ +
h-disk-ymin
h-dw @
h-dh @
hanoi-fillrect
h-delay @ hanoi-sleep
h-delta @
+loop
;
: hanoi-disk-move-up ( tid did -- )
h-color-disk ( tid did color )
-rot ( color tid did )
2dup ( color tid did tid did )
hanoi-disk-x ( color tid did x )
-rot ( color x tid did )
over ( color x tid did tid )
hanoi-tower-disks-dec ( color x tid did tn )
1 - ( color x tid tid [tn - 1] )
hanoi-disk-y ( color x tid did y )
-rot ( color x y tid did )
hanoi-disk-width ( color x y tid w )
swap ( color x y w tid )
drop ( color x y w )
h-disk-height ( color x y w h )
h-dh !
2 * h-dw !
h-dy !
h-dx !
h-dcolor !
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 36 of 86
h-dx @ h-dw @ 2 / + h-tw - h-tx !
h-dy @ h-disk-ymin -
0
hanoi-drawloop-up
;
: hanoi-disk-move-down ( tid did -- )
h-color-disK ( tid did color )
-rot ( color tid did )
2dup ( color tid did tid did )
hanoi-disk-x ( color tid did x )
-rot ( color x tid did )
over ( color x tid did tid )
hanoi-tower-disks-inc ( color x tid did tn )
hanoi-disk-y ( color x tid did y )
-rot ( color x y tid did )
hanoi-disk-width 2 * ( color x y tid w )
swap ( color x y w tid )
drop ( color x y w )
h-disk-height ( color x y w h )
h-dh !
h-dw !
h-dy !
h-dx !
h-dcolor !
h-dx @ h-dw @ 2 / + h-tw - h-tx !
h-dy @ h-disk-ymin -
0
hanoi-drawloop-down
;
: hanoi-disk-move-lr ( tto tfrom -- )
2dup 
while
6 3 pick 3 pick + - ( n from to processed left )
1 pick
0 =
if
4 pick
1 =
if
2 pick
4 pick
6 pick
hanoi-disk-move
2drop 2drop drop
else
( n from to processed left )
1 -rot ( n from to 1 processed left )
swap drop ( n from to 1 left )
4 pick 1 - swap ( n from to 1 [n - 1] left )
4 pick swap 0 ( n from to 1 [n - 1] from left 0 )
then
else
( n from to processed left )
swap drop ( n from to left )
1 pick
3 pick
5 pick
hanoi-disk-move
( n from to left )
swap ( n from left to )
rot drop ( n left to )
rot 1 - ( left to [n - 1] )
-rot 0 ( [n - 1] left to 0 )
then
repeat
;
: hanoi-validate ( n -- n true|false )
depth
1 < \ assert that the stack has exactly one value
if
cr ." usage: n hanoi, where 1 <= n <= " h-maxdisks @ . cr
false
else
dup 1 h-maxdisks @ between
if
true
else
cr ." usage: n hanoi, where 1 <= n <= " h-maxdisks @ . cr
drop
false
then
then
;
: hanoi ( n -- )
hanoi-validate
if
erase-screen cr
." Press control-z to quit the animation." cr
dup h-N !
dup hanoi-init
1 3 0 hanoi-solve
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 38 of 86
then
;
Figure 49. Actual photo of the Towers of Hanoi program in Open Firmware
4.8.6. Fabricating and Using a Mouse Pointer
In this example, we will write a program to move a "pointer"one that we will fabricateon the screen using
the mouse. Moreover, clicking a mouse button will print the coordinates of the click on the screen. We
will use the fill-rectangle method to draw, erase, and redraw the pointer, which will be a small square.
Opening the mouse device gives us access to its get-event method.
get-event ( ms -- pos.x pos.y buttons true|false )
get-event is called with one argument: the time in milliseconds to wait for an event before returning
failure. It returns four values: the coordinates of the mouse event, a bit mask containing information about
any buttons pressed, and a Boolean value indicating whether an event happened in that interval. An
interval of zero milliseconds causes get-event to wait until an event occurs.
The event coordinates returned by get-event may be absolute (for a device such as a tablet), or they may
be relative to the last event, as in the case of a mouse. This implies that the pos.x and pos.y values
should be treated as signed or unsigned depending on the type of device. This may be programmatically
determined by checking for the presence of the absolute-position property.
The mouse demonstration program is shown in Figure 410. It starts by drawing a pointer at position (0, 0)