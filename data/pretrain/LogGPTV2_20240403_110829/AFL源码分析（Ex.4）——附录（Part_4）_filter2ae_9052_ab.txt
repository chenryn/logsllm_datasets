项目地址：
###  1.4 崩溃分类、覆盖率分析和其他配套分析工具：
**1.4.1 afl-crash-analyzer (Tobias Ospelt)**
描述：此项目使寻找和注释导致测试目标崩溃的输入用例更容易。
项目地址：
**1.4.2 Crashwalk (Ben Nagy)**
描述：`AFL`感知工具，用于对导致测试目标崩溃的输入用例进行注释和排序。
项目地址：
**1.4.3 afl-cov (Michael Rash)**
描述：根据`afl-fuzz`的输出队列生成可读的覆盖率数据。
项目地址：
**1.4.4 afl-sancov (Bhargava Shastry)**
描述：类似于`afl-cov`，但使用`clang sanitizer`检测异常。
项目地址：
**1.4.5 RecidiVM (Jakub Wilk)**
描述：使用`ASAN`或`MSAN`进行模糊测试时，可以使用此项目轻松估计内存使用限制。
项目地址：
**1.4.6 aflize (Jacek Wielemborek)**
描述：自动构建支持`AFL`的`Debian`软件包版本。
项目地址：
**1.4.7 afl-ddmin-mod (Markus Teufelberger)**
描述：此项目是`afl-tmin`的一种变体，它使用更复杂(但更慢)的最小化算法。
项目地址：
**1.4.8 afl-kit (Kuang-che Wu)**
描述：使用附加功能替换`afl-cmin`和`afl-tmin`，例如基于标准错误模式过滤崩溃的能力。
项目地址：
###  1.5 有局限性的或实验性的工具：
**1.5.1 Cygwin support (Ali Rizvi-Santiago)**
描述：正如项目名字所说。根据作者的说法，此项目“主要”将`AFL`移植到`Windows`。欢迎报告`Bug`！
项目地址：
**1.5.2 Pause and resume scripts (Ben Nagy)**
描述：用于简单自动化暂停和恢复`fuzzer`实例组的项目。
项目地址：
**1.5.3 Static binary-only instrumentation (Aleksandar Nikolich)**
描述：此项目允许对黑盒二进制文件进行静态检测(即，通过提前修改二进制文件，而不是在运行时对其进行转译)。与`QEMU`相比，作者报告了更好的性能，但偶尔会出现无符号二进制文件的转译错误。
项目地址：
**1.5.4 AFL PIN (Parker Thompson)**
描述：早期的英特尔`PIN`检测支持(在使用运行速度更快的`QEMU`之前)。
项目地址：
**1.5.5 AFL-style instrumentation in llvm (Kostya Serebryany)**
描述：允许在编译器级别向待测程序注入`AFL`等效代码桩。`AFL`目前不支持这一点，但在其他项目中可能有用。
项目地址：
**1.5.6 AFL JS (Han Choongwoo)**
描述：此项目提供一次性优化以加速针对`JavaScriptCore`的模糊测试(现在可能被`LLVM`延迟`forkserver init`取代——请参阅
`llvm_mode/README.llvm`)。
项目地址：
**1.5.7 AFL harness for fwknop (Michael Rash)**
描述：此项目提供与`AFL`进行相当复杂的集成的一个例子。
项目地址：
**1.5.8 Building harnesses for DNS servers (Jonathan Foote, Ron Bowes)**
描述：这两篇文章概述了一般原则并展示了一些示例代码。
项目地址1：  
项目地址2：
**1.5.9 Fuzzer shell for SQLite (Richard Hipp)**
描述：一个简单的`SQL shell`，专为对其底层库进行`fuzz`而设计。
项目地址：
**1.5.10 Support for Python mutation modules (Christian Holler)**
项目地址：
**1.5.11 Support for selective instrumentation (Christian Holler)**
项目地址：
**1.5.12 Kernel fuzzing (Dmitry Vyukov)**
描述：应用于对系统调用进行`fuzz`的类似指导方法
项目地址1：  
项目地址2：  
项目地址3：
**1.5.13 Android support (ele7enxxh)**
描述：此项目基于有点过时的`AFL`版本。
项目地址：
**1.5.14 CGI wrapper (floyd)**
描述：此项目提供对`CGI`脚本进行`fuzz`的能力。
项目地址：
**1.5.15 Fuzzing difficulty estimation (Marcel Boehme)**
描述：此项目是`AFL`的一个分支，试图量化在模糊测试工作中的任何一点找到额外路径或崩溃的可能性。
项目地址：
## 2\. historical_notes.txt(前世今生)
本文档讨论了`American Fuzzy Lop`的一些高级设计决策的基本原理。它是从与`Rob
Graham`的讨论中采用的。有关一般说明手册，请参阅自述文件，有关其他实施级别的见解，请参阅`technology_details.txt`。
###  2.1 研究背景
简而言之，`afl-fuzz`的设计灵感主要来自于`Tavis
Ormandy`在`2007`年所做的工作。`Tavis`做了一些非常有说服力的实验，使用`gcov`块覆盖从大量数据中选择最佳测试用例，然后使用它们作为传统模糊测试工作流程的起点。(所谓“有说服力”是指发现并消除大量有趣的漏洞。)
与此同时，`Tavis`和我都对优化模糊测试感兴趣。`Tavis`进行了他的实验，而我正在开发一种名为`bunny-the-fuzzer`的工具，该工具于`2007`年在某个地方发布。
`Bunny`使用了一种与`afl-fuzz`没有太大区别的生成算法，但也尝试推理各种输入位与程序内部状态之间的关系，希望从中得出一些额外的优化点。推理相关部分可能部分受到`Will
Drewry`和`Chris Evans`大约同时完成的其他项目的启发。
状态相关的`fuzz`方法在理论上听起来很吸引人，但这最终使模糊器变得复杂、脆弱且使用起来很麻烦——每个其他目标程序都需要进行一两次调整。因为`Bunny`的表现并不比不那么复杂的蛮力工具好多少，所以我最终决定将其放弃。您仍然可以在以下位置找到其原始文档：
此外，也有相当数量的独立工作。最值得注意的是，那年早些时候，`Jared