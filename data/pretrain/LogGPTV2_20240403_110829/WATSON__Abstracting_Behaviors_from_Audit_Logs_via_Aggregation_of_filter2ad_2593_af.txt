and Content Destruction. Their audit events are visualized in
Figure 8a and Figure 8b. We color-code information ﬂows
summarizing behavior instances.
Conﬁguration Leakage. In this attack case, an attacker
leverages the code executable vulnerability in vim to collect
machine conﬁguration for future compromise preparation. The
background scenario is that one AI engineer in an enterprise
intends to develop an image recognition model. She ﬁrst
downloads the training dataset from the company website
as it cannot be found on the internal ﬁle server. Next, she
implements and evaluates the learning model by submitting
data and codes to a GPU server specialized for machine
learning. Meanwhile, she uses elinks to search online about
model optimization. Unfortunately, one malicious text ﬁle is
mistakenly downloaded for her reference. The ﬁle successfully
13
bashftp172.26.X.XelinksvimtxtbashifconﬁgunamewhoamimkdirML Projectwget176.X.X.Xunzipcatdata.zipdatatouchvimscpbashdl.pyssh172.26.X.XTraining Dataset Download and UploadTraining Program SubmissionConﬁguration LeakageFTP Server Login pythondl.pyshrun-partssshdid_rsa172.26.X.X176.X.X.Xbashemacsftp172.26.X.XTaskTask127.0.0.1gitgitTask#Task~g++cc1plusascollect2lda.outproc.cppshrun-partssshdServ-UbashCVEshContent DestructionProgram CompilationCheck Daily TasksSSH LoginCVEchmodidshlswhoamivimprogram1.hrmprogram2.cprogram1.cwgetssh172.26.X.X172.26.X.XALKG WATSONCount [log-scaled]TABLE V: Overview of attack cases in DARPA TRACE dataset with scenario descriptions. Column 3 shows the root data objects
of malicious behaviors. Column 4 and Column 5 reports the number of nodes and edges in behaviors.
Attack Cases
Firefox
Backdoor
Browser
Extension
Pine
Backdoor
Phishing
Executable
Scenario Description
A malicious ad server exploits Firefox to execute an in-memory payload. This provides a remote
console to exﬁltrate sensitive information. A cache process is exploited and displayed similar
behaviors as the compromised Firefox.
The attacker exploits a target host via a vulnerable browser-plugin pass-mgr. The compromised
plug-in downloads and executes a malicious program, which scans ports for internal recon and
exﬁltrates sensitive information.
Pine is compromised by a malicious executable to scan ports for internal recon and establish a
connection to the attacker’s machine.
The attacker sends a malicious executable as an e-mail attachment to exploit a vulnerability
in Pine. However, the attack fails to run as expected even though the user manually downloads
and executes the executable.
Root
Node
Edge
passwd
233
688
gtcache
895
1750
tcexec
67355
67453
tcexec
22
23
Fig. 10: Malicious behaviors of four APT attacks in DARPA TRACE dataset.
fox backdoor with Drakon in-memory (Firefox Backdoor for
short), browser extension with Drakon dropper (Extension
Backdoor for short), Pine backdoor with Drakon dropper (Pine
Backdoor for short), phishing email link, and phishing email
with executable attachment (Phishing Executable for short).
We note that the phishing email link attack is by nature not
visible in the system-call audit logs as there is no subsequent
system operation on the victim’s machine after the user visits
the phishing website and enters credential information [39].
Therefore, we have omitted this attack from behavior analysis
and investigate only the remaining attacks described in Ta-
ble V. The details of these attacks’ roots are shown in Table VI.
Figure 9 presents the reduction of analysis workload and
behaviors for attack investigation in the DARPA TRACE
dataset. As we can see, WATSON signiﬁcantly decreases the
analysis workload by around 930 times. Besides, the reduced
behaviors indicate that WATSON can cluster semantically simi-
lar behaviors and help security analysts to stay focused on the
inspection of representative behaviors. To better understand
WATSON’s efﬁcacy, we then look into the behavior clusters
related to APT attacks in Table V. Our analysis reveals
that for three (i.e., Extension Backdoor, Pine Backdoor, and
Phishing Executable) of four APT attacks, WATSON success-
fully summarizes the corresponding malicious behaviors in
Figure 10, which match the ground truth provided. Moreover,
our summarized malicious behaviors are generally comparable
to attack scenarios constructed by existing work (e.g., MORSE
[39]) that also investigates the DARPA TRACE dataset. Upon
closer inspection of the remaining Firefox Backdoor attack,
we discover that
the data provenance of cache process
(PID 26317) is missing in the original dataset. Accordingly,
WATSON only captures the second part of the attack: a cache
process exﬁltrates sensitive information remotely.
Moreover, we observe that high-level behaviors of suc-
cessful APT attacks are all abstracted as separate clusters.
That is, no benign behavior is falsely classiﬁed as attacks. As
an example of the Extension Backdoor attack in Figure 10,
the attacker ﬁrst compromises a vulnerable password man-
ager extension in Firefox to implant an on-disk malicious
program, gtcache. Then, the attacker executes the program
to exﬁltrate sensitive information (e.g., /etc/passwd) to
the public network and perform a port scan of target hosts
(e.g., 128.55.12.73) on the internal network. We note that
scanning ports and exﬁltrating data are quite different from
running common utilities in terms of contextual semantics.
Speciﬁcally, the port scan for internal reconnaissance typically
involves thousands of network connections to local network
hosts. As a result, any behavior containing the port scan is
labeled with different semantics from daily behaviors and
constitutes a separate cluster. Another discovery is that the
Extension Backdoor attack would be clustered together with
the Pine Backdoor attack if we decrease the cluster merge
threshold from 0.85 to 0.75. This is expected because both
APT attacks leverage a command and control agent to scan
network ports — a particularly unique behavioral pattern. It is
also worth noting that the cluster of Phishing Executable attack
includes normal behaviors unrelated to APT attacks. This
matches our domain knowledge as Phishing Executable attack
fails to exploit Pine’s vulnerabilities and just demonstrates the
user downloading and executing an email attachment, which
is normal compared to regular email checking behaviors.
We further study what benign behaviors are clustered by
WATSON. For reasons of space, we present two benign clusters,
Syslog Rotation by Gzip (Syslog Rotation for short) and SSH
Login with MOTD (SSH Login for short),
in Figure 11.
Syslog Rotation behavior is a common system routine that
14
TABLE VI: Root data objects of attack cases in DARPA TRACE dataset. Column 2 and 3 shows the name and UUID of roots.
Column 4 represents the graph where WATSON locates malicious behaviors in Figure 10.
Attack Cases
Firefox
Backdoor
Browser
Extension
Pine
Backdoor
Phishing
Executable
Name
/etc/passwd
UUID
Graph
C13A910B-8966-7C95-549F-6EACF06F2429
ta1-trace-e3-ofﬁcial.json.125
/etc/ﬁrefox/native-messaging-hosts/gtcache
17498F61-1D2A-DEB2-F6E5-EB447ABF4A60
ta1-trace-e3-ofﬁcial-1.json.3
/tmp/tcexec
7169B097-1601-297F-2F6E-CEF5924F1C68
ta1-trace-e3-ofﬁcial-1.json.4
/home/admin/Desktop/tcexec
BBC43AE7-8DF9-49DD-44A0-030EEC564E84
ta1-trace-e3-ofﬁcial-1.json.4
Fig. 11: Syslog Rotation and SSH Login behaviors in DARPA TRACE dataset.
compresses system logs (/var/log/syslog.1) to prevent
them from growing too large on disk. In our experiment,
WATSON summarizes ﬁve Syslog Rotation behaviors in one
cluster with no false positive. The signature of Syslog Rotation
cluster includes eight nodes and ten edges. SSH Login behavior
displays the Dynamic Message Of The Day (MOTD) when a
user logs in to the system through ssh. WATSON in total
captures 16 of SSH Login behaviors in one cluster with four
false positives. The signature of SSH Login cluster includes
13 nodes and 198 edges. Note that we cannot verify whether
WATSON misses any true-positive benign behavior as the
ground truth is unknown to us.
In summary, our results show that WATSON can cluster
similar behaviors to reduce analysis workload while not losing
accuracy in attack investigation. It is also worth mentioning
that even though WATSON effectively abstract behaviors, large-
scale benign behaviors may still cause trouble for analysts
as individual behavior signatures from benign clusters require
manual inspection. One approach to mitigating this problem is
to borrow ideas from anomaly detection systems. For example,
we can extract the signatures from a comprehensive benign
dataset and report only deviations to analysts.
F. System Performance
We measure WATSON’s performance overhead for behavior
abstraction in our malicious dataset and the DARPA TRACE
dataset. The scale and magnitude of these two datasets are
generally comparable with that of daily user data. The on-disk
sizes of a session in the malicious dataset and a graph in the
DARPA TRACE dataset are on average 420 MB and 3 GB,
respectively. We conduct the experiments on a Linux server
with Intel(R) Core(TM) i9-9900X CPU @ 3.50GHz and 64GB
memory. The Operating System is Ubuntu 18.04.4 LTS.
In this setting, WATSON abstracts behaviors from a mali-
cious session and a DARPA graph within 35 and 170 seconds,
respectively. We do not include the runtime overhead of KG
construction, as it
logs’ volume.
However, we show that WATSON can parse 40k audit events
in the default auditbeat format and build the KG within one
largely depends on audit
15
second. Construction of the KG in the DARPA TRACE dataset
format [43] is faster, operating at about 70k per second. Our
current implementation loads audit events from disk and runs
the experiments on a single machine using a single thread. The
system efﬁciency can be further improved by main memory
storage [38] and distributed graph processing [58]. Moreover,
the constructed KG and abstracted behaviors represent the
majority of WATSON’s runtime memory overhead. While ana-
lyzing our malicious dataset (33 GB) and the DARPA TRACE
dataset (635 GB), the memory consumption increases up to 2.6
GB. The storage overhead mainly comes from the audit events’
embeddings and behavior database, which is on average 18
MB (10 MB for embeddings and 8 MB for behaviors) for
a malicious session and 121 MB (78 MB for embeddings
and 43 MB for behaviors) for a DARPA graph. We note that
storage overhead does not increase linearly with the increase of
sessions or graphs because events are recurrent on the system.
VI. DISCUSSION
In this section, we will
introduce some of the design
choices, implications, and possible extensions to this work.
Beneﬁt for Related Solutions. Related security tools on log
analysis require intensive manual efforts to develop knowledge
in understanding audit events. WATSON acts as an “assistant”
to these solutions for analysis workload reduction. In fact,
half of the efforts of deﬁning domain knowledge can be
performed automatically. We can use procedural analysis to
identify behavioral patterns and cluster similar ones via a
quantitative representation of behavior semantics. Therefore, it
is relatively easy for an analyst to investigate the representative
behavioral patterns (i.e., behavior signatures) from clusters and
provide domain-speciﬁc labels. Speciﬁcally, behavior signa-
tures in our behavior database can be taken as the inputs to
related security tools. For example, if TGMiner [35] applies
WATSON to extract behavior signatures before formulating
behavior queries, signiﬁcant analysis efforts would be saved
from labeling behaviors of interest in training logs, given that
benign or redundant behaviors have been clustered. With the
assistance of WATSON, MORSE [39] only needs to initialize
tags for representative system entities (e.g., one of IPC ﬁles)
rather than the whole entity space. In addition, WATSON
uncovers event semantics indicating how “surprising” an event
is for security analysis. This helps to reduce human workload
in deﬁning TTP speciﬁcations, as “unsurprising” (e.g., benign)
events are identiﬁed before analysts extract attack patterns.
Embedding Space Retraining. Common to most learning
approaches using embedding techniques [67], WATSON needs
to retrain the embedding space periodically due to semantics
shifts and the inclusion of previously unseen data. That said,
our choice of a computationally efﬁcient embedding model
(TransE) helps to mitigate the overheads incurred by such
retraining. Empirically in our experiments, we observe that
WATSON typically retrains the embedding model on one daily
session within 25 seconds. Especially, we can further leverage
NLP techniques [19], [44], [69] to learn the semantics of "out-
of-vocabulary" (unseen) audit events from their morphological
information (e.g., ﬁle path) so that WATSON does not neces-
sarily retrain the whole embedding space.
Robustness of Behavior Abstraction. To evade the behavior
abstraction, an attacker may attempt to obfuscate a behavior
by intentionally introducing irrelevant events. However, the
impact of such events on behavior semantics is limited. In Sec-
tion III-E, we design two strategies (relative importance and
noise events) to improve WATSON’s robustness for behavior
abstraction. Speciﬁcally, while WATSON aggregates behaviors’
contextual semantics, irrelevant events would be assigned low
importance weights or even removed as noise events. Another
potential approach to deobfuscating behaviors is to incorporate
additional side information (e.g., semantically-rich arguments
of audit events) into WATSON’s KGs. We believe this can give
WATSON more capabilities to sift through uninteresting events
for security analysis. We acknowledge that more advanced
techniques could be used to mimic normal behaviors. Nev-
ertheless, mimicry attack detection itself is an open research
problem [76] and beyond the scope of this study.
VII. RELATED WORK
Causality Analysis. Causality analysis is an orthogonal but
important problem relating to behavior abstraction. King and
Chen [45] ﬁrst introduce building a dependency graph on
system audit logs to track back from a given security incident
and locate its root cause. King et al. [46] improve the causality
tracking by capturing forward and cross-host dependencies. A
large number of research efforts have been further made to
mitigate the dependency explosion problem and high storage
overhead in causality analysis. Recent work has proposed ﬁne-
grained unit partition [49], [54], [56], [57], [73], dynamic taint-
ing [66], [83], modeling-based inference [47], [48], record-
and-reply [41], [42], and universal provenance [37] techniques
to achieve more precise causality tracking. Another line of
research strives to decrease overall log volume for analysis
by graph compression [21], [34], [38], [40], [75] and data
reduction [50], [57], [82]. Although the scope of WATSON
is different from these solutions, its effectiveness relies on
accurate causality analysis when correlating data transfers to
summarize behaviors.
Behavior Abstraction. Abstracting behaviors as graph pat-
terns or causal dependencies has proved useful
in under-
standing OS-level activities and detect potential threats and
risks. TGMiner [84] mines discriminative graph patterns from
behaviors of interest and use them as templates to identify
similar behaviors. Based on cyber threat intelligence reports,
POIROT [62] extracts query graphs for APT behaviors and
presents an alignment algorithm to search for their existence
in provenance graphs. HOLMES [63] and RapSheet [35] view
multi-stage attacks as a chain of causal events that match
TTP speciﬁcations. SLEUTH [38] and MORSE [39] propose
tag policies to model information leakage behaviors. Compared
with prior work, we abstract behaviors as embeddings (numeric
vectors) based on contextual information. Our ﬁndings suggest
that this quantitative representation of behaviors can preserve
behavior semantics and enable advanced behavior analysis
(e.g., similar behavior clustering).
Embedding-based log analysis. Extensive literature exists
on applying embedding techniques for other log analysis
tasks. Such tasks include anomaly-based IDS [22], [25],
[33], [52], [60], malware identiﬁcation [18], [77], [78] and
cyberattack evolution understanding [72]. Much prior work
uses machine learning models such as neural networks, word
embedding, and n-grams to embed logs into vectors. For
example, DeepLog [25] is a neural network-based approach
that leverages a long short-term memory (LSTM) to learn exe-
cution patterns in streams of normal log entries. PROVDETEC-
TOR [77] applies a neural word-embedding model, doc2vec,
to quantify behaviors of processes running on the system.
Similarly, ATTACK2VEC [72] leverages a temporal word-
embedding model to quantify the context in which cyberattack
steps are exploited over time. On the contrary, WATSON ﬁrst
proposes employing a translation-based embedding, TransE, to