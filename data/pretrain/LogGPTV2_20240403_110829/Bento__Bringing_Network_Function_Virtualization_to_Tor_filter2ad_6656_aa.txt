title:Bento: Bringing Network Function Virtualization to Tor
author:Michael Reininger and
Arushi Arora and
Stephen Herwig and
Nicholas Francino and
Christina Garman and
Dave Levin
Poster: Bento: Bringing Network Function Virtualization to Tor
Michael Reininger
University of Maryland
Nicholas Francino
University of Maryland
Arushi Arora
Purdue University
Christina Garman
Purdue University
Stephen Herwig
University of Maryland
Dave Levin
University of Maryland
ABSTRACT
Tor is a powerful and important tool for providing anonymity and
censorship resistance to users around the world. Yet it is surprisingly
difficult to deploy new services in Tor—it is largely relegated to
proxies and hidden services—or to nimbly react to new forms of
attack. Conversely, “non-anonymous” Internet services are thriving
like never before because of recent advances in programmable
networks, such as Network Function Virtualization (NFV) which
provides programmable in-network middleboxes.
This work seeks to close this gap by introducing programmable
middleboxes into the Tor network. In this architecture, users can
install and run sophisticated “functions” on willing Tor routers,
further improving anonymity, resilience to attack, performance of
hidden services, and more. We present the design of an architecture,
Bento, that protects middlebox nodes from the functions they run—
and protects the functions from the middleboxes they run on. Bento
does not require modifications to Tor, and can run on the live
Tor network. Additionally, we give an overview of how we can
significantly extend the capabilities of Tor to meet users’ anonymity
needs and nimbly react to new threats.
ACM Reference Format:
Michael Reininger, Arushi Arora, Stephen Herwig, Nicholas Francino, Christina
Garman, and Dave Levin. 2020. Poster: Bento: Bringing Network Function
Virtualization to Tor. In 2020 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA.
ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3372297.3420020
1 INTRODUCTION
Anonymity systems are critical in achieving free, open commu-
nication on today’s Internet. In particular, Tor [4] has become a
staple in resisting online censorship by rogue nations and allowing
journalists to safely communicate with sources world-wide [10].
However, there is a surprisingly narrow set of services that Tor
is able to support in a robust fashion. Today, the use of Tor is
largely relegated to web proxies and hidden services [13], and, un-
fortunately, neither of these applications has the ability to scale
to handle dynamic workloads or attacks by automated bots [9].
Moreover, Tor has had to wage multiple concurrent arms races
to combat a wide slew of attacks like website fingerprinting and
bridge node detection—unfortunately, rolling out new defenses can
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3420020
be slow and cumbersome. Conversely, services on the standard,
“non-anonymous” Internet are thriving like never before. Impres-
sive innovations in network function virtualization (NFV) [12] in
particular have resulted in more robust, scalable, and resilient net-
work services. The present and future Internet is comprised of
programmable networks, but there do not exist the basic primitives
to achieve such features in anonymous networks.
We introduce Bento, a new architecture that augments the Tor
anonymity network with user-programmable “middleboxes.” Briefly,
Bento allows clients to write sophisticated middlebox “functions”
in a high-level language (Python, in our implementation) and run
them on willing Tor routers. We propose a wide diversity of func-
tions that significantly improve various aspects of Tor, including:
a Browse function that offloads a client’s web browser to avoid
website fingerprinting attacks, a LoadBalance function that auto-
matically scales hidden service replicas up and down to handle
varying load, and a Dropbox function that allows Tor to be used as
an anonymous file store. Through these many functions, we show
that making Tor more programmable carries significant promise.
Naturally, a more programmable Tor network also introduces
several important challenges regarding how to achieve it safely. In
particular, we must be careful to protect middlebox nodes from the
functions they run on others’ behalf—and we must protect functions
from the middleboxes who run them. To address these concerns,
Bento’s design will employ sandboxes as well as recent advances
in deploying legacy software in trusted secure enclaves [5].
Bento is fundamentally an architecture: its goal is to provide
the core abstractions and mechanisms upon which sophisticated,
anonymous systems can be built. One of our contributions is iden-
tifying and presenting a design for the critical components that col-
lectively support programmable middleboxes: Composable func-
tions: Bento provides mechanisms for installing user-defined func-
tions on Tor nodes, and chaining functions together to perform
more complex tasks; Safe execution environments: Bento em-
ploys an execution environment that is general-purpose enough
to enable a wide range of middlebox functions, but also safe in
the presence of rogue developers or malicious middlebox nodes;
Middlebox node policies: Tor node operators should be able to
express what sorts of things they are willing to do on behalf of func-
tions. We introduce middlebox node policies that represent what a
user is willing to allow functions to do, and enforcement mecha-
nisms to ensure them.
Threat model Our architecture is deployed on top of the existing
Tor network (therefore, it is incrementally and immediately deploy-
able), and as a result we adopt the same network-level threat model
as in traditional Tor. This can vary by user and application, but a
Poster CCS '20, November 9–13, 2020, Virtual Event, USA2109Figure 1: Overview of installing, and executing a Browser
“function” that runs on another Tor node, downloads a given
URL, and delivers it, padded to some threshold number of
bytes. Note that, from the perspective of an attacker sniff-
ing the client’s link, the client uploads a small amount and
then downloads a large amount.
common assumption is that of a powerful routing-capable adver-
sary [11], such as a nation-state. Such an adversary often controls a
large network—and can even influence nearby routes to go through
its network—but cannot have a global view of Internet traffic. In
addition to these routing-capable network-based adversaries, our
architecture requires us to consider the threats that can arise from
an altogether new mode of interaction: loading and running code
on other users’ machines. We assume that users naturally have
physical access to their machines, and can thus introspect on run-
ning processes on their machines. However, we also assume that
some Bento middleboxes will have secure enclaves, namely, Intel
SGX. We explicitly assume that these environments are safe; that
is, for any code or data being executed or stored inside of a secure
enclave, we assume that the attacker cannot introspect on either,
despite having physical access to the machine.
Attacks In showing one of the potential benefits of Bento, we con-
sider two broad classes of attack and new ways for how to prevent
them. First, deanonymization attacks [1] seek to infer the two end-
points of a Tor circuit through passive or active traffic analysis.
Routing-capable adversaries are very well-suited for these kinds
of attacks, as they can influence traffic on the entry leg (between
source and entry node) and the exit leg (between exit node and des-
tination) to go through networks they control—at that point, they
can perform straightforward traffic correlation attacks [6]. The sec-
ond broad class of attacks we consider are fingerprinting attacks [8].
Typical defenses involve reordering or batching requests and send-
ing junk control packets to make websites appear indistinguishable
from traffic patterns alone.
2 OVERVIEW OF BENTO
In this poster, we introduce the first architecture to bring the power
of programmable middleboxes to the Tor anonymity network. This
section presents a high-level overview of how Bento enables users
to extend Tor with programmable functions.
Motivating Example Consider a user, Alice, who wishes to anony-
mously browse a website over Tor, but who also fears that an ad-
versary who knows her identity has the ability to observe traffic
entering and leaving her machine. Such an adversary could launch,
for instance, a website fingerprinting attack [2] by correlating traffic
patterns with known websites, thereby potentially violating Tor’s
unlinkability property.
Figure 2: In this motivating example, the user composes two
functions: Browser which runs a web client to download a