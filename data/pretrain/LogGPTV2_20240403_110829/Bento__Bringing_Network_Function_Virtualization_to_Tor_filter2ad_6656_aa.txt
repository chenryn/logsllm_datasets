# Bento: Bringing Network Function Virtualization to Tor

## Authors
- Michael Reininger, University of Maryland
- Arushi Arora, Purdue University
- Stephen Herwig, University of Maryland
- Nicholas Francino, University of Maryland
- Christina Garman, Purdue University
- Dave Levin, University of Maryland

## Poster
**Title:** Bento: Bringing Network Function Virtualization to Tor  
**Presenter:** Michael Reininger, University of Maryland

## Abstract
Tor is a powerful and essential tool for providing anonymity and censorship resistance to users worldwide. However, deploying new services in Tor is challenging, primarily limited to proxies and hidden services, and it is difficult to respond quickly to new forms of attack. In contrast, "non-anonymous" Internet services have thrived due to recent advances in programmable networks, such as Network Function Virtualization (NFV), which provides programmable in-network middleboxes.

This work aims to bridge this gap by introducing programmable middleboxes into the Tor network. Our architecture, Bento, allows users to install and run sophisticated functions on willing Tor routers, enhancing anonymity, resilience to attacks, and the performance of hidden services. Bento ensures that middlebox nodes are protected from the functions they run and that the functions are protected from the middleboxes they run on. Importantly, Bento does not require modifications to Tor and can be deployed on the live Tor network. We also provide an overview of how Bento can significantly extend Tor's capabilities to meet users' anonymity needs and respond nimbly to new threats.

## ACM Reference Format
Michael Reininger, Arushi Arora, Stephen Herwig, Nicholas Francino, Christina Garman, and Dave Levin. 2020. Poster: Bento: Bringing Network Function Virtualization to Tor. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS '20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3372297.3420020

## 1. Introduction
Anonymity systems are crucial for ensuring free and open communication on the Internet. Tor, in particular, has become a cornerstone in resisting online censorship by oppressive regimes and enabling journalists to communicate safely with sources worldwide. Despite its importance, Tor's ability to support a wide range of services robustly is limited. Currently, Tor is primarily used for web proxies and hidden services, neither of which can scale to handle dynamic workloads or attacks by automated bots. Additionally, rolling out new defenses against various attacks, such as website fingerprinting and bridge node detection, is often slow and cumbersome.

In contrast, standard Internet services have benefited greatly from innovations in network function virtualization (NFV), resulting in more robust, scalable, and resilient network services. The present and future Internet is characterized by programmable networks, but these features are lacking in anonymous networks.

We introduce Bento, a new architecture that enhances the Tor anonymity network with user-programmable "middleboxes." Bento allows clients to write sophisticated middlebox functions in a high-level language (Python, in our implementation) and run them on willing Tor routers. These functions can significantly improve various aspects of Tor, including:

- **Browse Function:** Offloads a client’s web browser to avoid website fingerprinting attacks.
- **LoadBalance Function:** Automatically scales hidden service replicas up and down to handle varying load.
- **Dropbox Function:** Allows Tor to be used as an anonymous file store.

Bento introduces several important challenges, particularly in ensuring the safety of the middlebox nodes and the functions they run. To address these, Bento employs sandboxes and recent advances in deploying legacy software in trusted secure enclaves.

Bento is fundamentally an architecture designed to provide the core abstractions and mechanisms for building sophisticated, anonymous systems. Key components include:

- **Composable Functions:** Mechanisms for installing user-defined functions on Tor nodes and chaining them together for complex tasks.
- **Safe Execution Environments:** A general-purpose execution environment that is both versatile and secure, even in the presence of rogue developers or malicious nodes.
- **Middlebox Node Policies:** Policies that allow Tor node operators to specify what actions they are willing to perform on behalf of functions, along with enforcement mechanisms.

### Threat Model
Bento is deployed on top of the existing Tor network, adopting the same network-level threat model as traditional Tor. This typically includes a powerful routing-capable adversary, such as a nation-state, which can control large networks and influence nearby routes but cannot have a global view of Internet traffic. Additionally, Bento must consider threats arising from loading and running code on other users' machines. We assume that some Bento middleboxes will use secure enclaves, such as Intel SGX, and that these environments are safe from introspection, even if an attacker has physical access to the machine.

### Attacks
To demonstrate the potential benefits of Bento, we consider two broad classes of attacks and new ways to prevent them:

- **Deanonymization Attacks:** Seek to infer the endpoints of a Tor circuit through passive or active traffic analysis. Routing-capable adversaries are well-suited for these attacks, as they can influence traffic on the entry and exit legs to perform traffic correlation attacks.
- **Fingerprinting Attacks:** Typical defenses involve reordering or batching requests and sending junk control packets to make websites indistinguishable from traffic patterns alone.

## 2. Overview of Bento

In this poster, we introduce Bento, the first architecture to bring the power of programmable middleboxes to the Tor anonymity network. This section provides a high-level overview of how Bento enables users to extend Tor with programmable functions.

### Motivating Example
Consider a user, Alice, who wishes to browse a website anonymously over Tor but fears that an adversary who knows her identity could observe traffic entering and leaving her machine. Such an adversary could launch a website fingerprinting attack by correlating traffic patterns with known websites, potentially violating Tor’s unlinkability property.

**Figure 2:** In this example, the user composes two functions: 
- **Browser Function:** Runs a web client to download a given URL and delivers it, padded to a threshold number of bytes. From an attacker's perspective, the client uploads a small amount and then downloads a large amount, making it difficult to correlate the traffic with specific websites.

By leveraging Bento, Alice can offload her web browsing to a middlebox, thereby mitigating the risk of fingerprinting attacks and enhancing her anonymity.