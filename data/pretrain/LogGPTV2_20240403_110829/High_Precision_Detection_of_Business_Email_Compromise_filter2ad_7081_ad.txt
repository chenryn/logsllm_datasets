imbalanced dataset typically biases the classiﬁer to prefer the
majority class. Speciﬁcally, it can result in a classiﬁer that
will simply always choose to predict the majority class, i.e.,
legitimate emails, and will thus achieve very high accuracy
(i.e., accuracy = (t p + tn)/(t p + tn + f p + f n), where t p is
true positives, tn is true negatives, f p is false positives, and
f n is false negatives). Since BEC is so rare in our dataset,
a classiﬁer that always predicts that an email is legitimate
would achieve a high accuracy. This problem is especially
acute in the case of our impersonation classiﬁer, which needs
to do the initial ﬁltering between legitimate and BEC emails.
In the case of content classiﬁers, we did not have to sample the
dataset, because it deals with a much smaller training dataset.
There are various methods of dealing with imbalanced
datasets, including over-sampling the minority class and
under-sampling the majority class [6,24,27,29,30], as well as
assigning higher costs to incorrectly predicting the minority
class [9, 38].
Our second major design choice was to under-sample the
majority class (the legitimate emails). We made this decision
for two reasons. First, if we decided to over-sample the BEC
attacks, we would need to do so by a large factor. This might
overﬁt our classiﬁer and bias the results based on a relatively
small number of positive samples. Second, over-sampling
makes training more expensive computationally.
A naïve way to under-sample would be to uniformly sam-
ple the legitimate emails. However, this results in a classiﬁer
with a low precision, because the different categories of legiti-
mate emails are not well represented. For example, uniformly
sampling emails might miss emails from web services that
legitimately impersonate employees. The impersonation clas-
siﬁer will ﬂag these emails as BEC attacks, because they are
relatively rare in the training dataset.
The main challenge in under-sampling the majority class
is how to represent the entire universe of legitimate emails
with a relatively small number of samples (i.e., comparable
or equal to the number of BEC email samples). To do so, we
cluster the legitimate emails using an unsupervised learning
algorithm, Gaussian Mixture Models (GMM). The cluster-
ing algorithm splits the samples into clusters, each of which
is represented by a Normal distribution, projected onto the
impersonation classiﬁer feature space. Figure 2 illustrates an
Figure 2: Depiction of running clustering algorithm on a set legiti-
mate emails in a two-dimensional feature space with three clusters.
After clustering the legitimate emails, we choose the number of
samples from each cluster in proportion to the size of the cluster.
example with two features and 14 legitimate email samples.
In this example, the samples are split into three clusters. To
choose a representative sample of legitimate emails, we ran-
domly pick a certain number of samples from each cluster,
proportional to the number of legitimate emails that belong
to each cluster. If for example our goal is to use a total of 7
samples, we would choose 4 samples from the ﬁrst cluster,
2 samples from the second cluster, and 1 sample from the
third cluster, because the original number of samples in each
cluster is 8, 4, and 2, respectively.
We chose the number of clusters that guarantee a minimal
representation for each major “category” of legitimate email.
We found that using 85 clusters was sufﬁcient for capturing
the legitimate emails in our dataset. When we tried using
more than 85 clusters, the clusters beyond the 85th one would
be nearly or entirely empty. Even after several iterations of
retraining the impersonation classiﬁer, we have have found
that 85 clusters are sufﬁcient to represent our dataset.
5 System Design
BEC-Guard consists of two key stages: an online classiﬁca-
tion stage and an ofﬂine training stage. Ofﬂine training is
conducted periodically (every few days). When a new email
arrives, BEC-Guard combines the impersonation and con-
tent classiﬁers to determine whether the email is BEC or not.
These classiﬁers are trained ahead of time in the ofﬂine train-
ing stage. We describe the key components of our system
design in more detail below.
Traditionally, commercial email security solutions have a
gateway architecture, or in other words, they sit in the data
path of inbound emails and ﬁlter malicious emails. As de-
scribed above, some of BEC-Guard’s impersonation classiﬁer
features rely on historical statistics of internal communica-
tions. The gateway architecture imposes constraints on detect-
ing BEC attacks for two reasons. First, a gateway typically
cannot observe internal communications. Second, the gateway
usually does not have access to historical communications, so
it would require several months or more of observing the com-
munication patterns before the system would be able to detect
USENIX Association
28th USENIX Security Symposium    1299
0123210Feature 1Feature 2Cluster 1Cluster 2Cluster 3mailbox. Since the email is quarantined on the server side,
when the user’s email clients synchronize the email it will
also get quarantined on the user’s email clients. In addition,
the vast majority of emails get quarantined by BEC-Guard
before they are synchronized to the user’s email client.
6 Evasion
In this section we discuss attacks that are currently not stopped
by BEC-Guard, and evasion techniques that can be used by at-
tackers to bypass BEC-Guard and how they can be addressed.
BEC-Guard is a live service in production, and has evolved
rapidly since it was ﬁrst launched in 2017. We have deployed
additional classiﬁers to augment the ones described in this
paper in response to some of the evasion techniques presented
below, and the existing classiﬁers have been retrained multiple
times. Another beneﬁt of the API-based architecture is that if
we ﬁnd some attacks were missed by an evasion we can go
back in time and ﬁnd them, and update the system accordingly.
The email threat landscape is rapidly changing, and while
it is important that the detectors maintain high precision, it
is equally important that the security system can be easily
adapted and retrained.
6.1 Stopping Other Attacks
BEC-Guard focuses on stopping BEC attacks, in which an
external attacker impersonates an employee. However, there
are other types of BEC that are not covered by BEC-Guard.
Account takeover. When attackers steal the credentials of
an employee, they can login remotely to send BEC emails to
other employees. We term this use case “account takeover”.
There are several approaches to detecting account takeover,
including monitoring internal emails for anomalies (e.g., an
employee suddenly sending many emails to other employees
they typically do not communicate with), monitoring suspi-
cious IP logins, and monitoring suspicious inbox rule changes
(e.g., an employee suddenly creates a rule to delete outbound
emails) [18–20]. This scenario is not the focus of BEC-Guard,
but is covered by our commercial product.
Impersonating both sender name and email without
changing reply-to address.
It is possible that external at-
tackers could send emails that impersonate both the sender’s
name and email address, without using a different reply-to
address. We have not observed such attacks in our dataset,
but they are possible, especially in the case where the attacker
asks the recipient to follow a link to steal their credentials.
Similar to account takeover, such attacks can be detected by
looking for abnormal email patterns. Another possible ap-
proach, used by Gascon et al., is to look for anomalies in the
actual MIME header [14].
Impersonation of external people. BEC-Guard’s imper-
sonation classiﬁer currently relies on having access to the
historical inbound email of employees. In order to detect im-
personation of external people that frequently communicate
Figure 3: Comparison between the architecture of traditional email
security systems, which sit as a gateway that ﬁlters emails before
they arrive in the mail system, and BEC-Guard’s architecture, which
relies on APIs for learning the historical communication patterns of
each organization, and detecting attacks in real-time.
incoming BEC attacks. Fortunately, cloud-based email ser-
vices, such as Ofﬁce 365 and Gmail, provide APIs that enable
access to historical communications, as well as to monitor and
move emails in real-time. BEC-Guard leverages these APIs
both to gain access to historical communication, and also to
do near real-time BEC detection. Figure 3 compares the gate-
way architecture with BEC-Guard’s API based architecture.
We describe BEC-Guard’s design and implementation using
the Ofﬁce 365 APIs.
Warmup phase. We name the process of analyzing each
organization’s historical communications, the warmup phase.
In order to start the warmup, the organization enables BEC-
Guard to get access to its Ofﬁce 365 account with an authen-
tication token using OAuth with an Ofﬁce 365 administrator
account. This allows BEC-Guard to access the APIs for all
the users associated with the account. Once authenticated,
BEC-Guard starts collecting statistics necessary for the imper-
sonation classiﬁer (e.g., number of times a certain user sent an
email from a certain email address). The statistics collected
by BEC-Guard go back one year. We found that the classiﬁer
performs well with as little as one month of historical data.
Online classiﬁcation. After the warmup phase, BEC-
Guard is ready to detect incoming BEC attacks in real-time.
To do so, BEC-Guard waits for a webhook API call from any
of the users in the organization’s Ofﬁce 365 account. The
webhook API calls BEC-Guard anytime there is any new
activity for a speciﬁc user. When the webhook is triggered,
BEC-Guard checks if there is a new received email. If so,
BEC-Guard retrieves the email, and classiﬁes it, ﬁrst using
the impersonation classiﬁer, using a database that contains the
historical communication statistics unique to each organiza-
tion. Then, only if it was classiﬁed as an impersonation email,
BEC-Guard classiﬁes the email using the content classiﬁers.
If at least one of the content classiﬁers classiﬁes the email
as a BEC attack, BEC-Guard quarantines the email. This is
performed by removing the email from the folder where it
was received by the user (typically the inbox folder), and
moving it into a designated quarantine folder in the end user’s
1300    28th USENIX Security Symposium
USENIX Association
Learn pastcommunication patterns,Quarantine emailsMailflowMailflowFilter emailsfrom mail flowGatewayArchitectureAPI Architecturewith the organization, BEC-Guard can incorporate emails that
are sent from external people to the company.
Text classiﬁcation in any language. BEC-Guard is cur-
rently optimized to catch BEC in languages that appear fre-
quently in our dataset. Both the impersonation classiﬁer and
the link classiﬁer are not language-dependent, but the text
classiﬁer relies on the TFIDF dictionary is dependent on the
language of the labeled dataset. There are a few possible ways
to make BEC-Guard’s text classiﬁer completely language ag-
nostic. One is to deliberately collect sufﬁcient samples in a
variety of languages (either based on user reports or generate
them synthetically), and label and train on those emails. An-
other potentially more scalable approach is to translate the
labeled emails (e.g., using Google Translate or a similar tool).
Generic sender names. BEC-Guard explicitly tries to de-
tect impersonations of employee names. However, attackers
may impersonate more generic names, such as “HR team” or
“IT”. This attack is beyond the scope of this paper, but we
address it using a similar approach to BEC-Guard in order to
detect these attacks: we combine our content classiﬁers with
a new impersonation classiﬁer, which looks for sender names
that commonly occur across different organizations, but are
sent from a non-corporate email address or have a different
reply-to address.
Brand impersonation. Similar to the “generic sender” at-
tack, attackers often impersonate popular online services (e.g.,
Google Drive or Docusign). These types of attacks are out of
the scope for this paper, but we detect them using a similar
methodology of combining content classiﬁer, with an imper-
sonation classiﬁer that looks for an anomalous sender (e.g.,
the sender name has “Docusign”, but the sender domain has
no relation to Docusign).
6.2 Evading detection
Beyond BEC attacks that BEC-Guard is not designed to detect
(as noted above), there are other several ways attackers can
try to evade BEC-Guard. We discuss these below and discuss
how we have adapted BEC-Guard to address them.
Legitimizing the sender email address. Any system that
uses signals based on anomaly detection is vulnerable to at-
tackers that invest extra effort in not appearing “anomalous”.
For example, when labeling our dataset, we assume that the
impersonated employee was not impersonated by the same
sender email address more than 100 times. While this thresh-
old is not hard coded into the impersonation classiﬁer, it was
a threshold we used to ﬁlter emails for the initial training
set, and therefore may bias the classiﬁer. Note that we have
never observed an attacker impersonating an employee with
the same email more than 20 times.
We believe this assumption is valid since BEC-Guard as-
sumes that the organization is already using a volume-based
security ﬁlter (e.g., the default spam protection of O365 or
Gmail or another spam ﬁlter), which would pick up a “volu-
metric” attack. Typically these systems would ﬂag an email
that was sent at once from an unknown address to more than
100 employees as spam.
However, a sophisticated attacker may try to bypass these
ﬁlters by sending a large number of legitimate emails from the
impersonated email address to a particular organization, and
only after sending hundreds of legitimate emails they would
send a BEC using that address. Of course the downside of this
approach is that it would require more investment from the
attacker, and increase the economic cost of executing a suc-
cessful BEC campaign. One way to overcome such an attack,
is to add artiﬁcial samples to the impersonation classiﬁer that
have higher thresholds, in order to remove the bias. Of course
this may reduce the overall precision of BEC-Guard.
Using infrequent synonyms. Another evasion technique is
to send emails that contain text that is different or has a lower
TFIDF than the labeled emails used to train our text classiﬁer.
For example, the word “bank” has a higher TFIDF, than the
word “fund”. As mentioned before, one way to overcome
these types of attacks is to cover synonyms using a technique,
such as word2vec [34].
Manipulating fonts. Attackers have employed various font
manipulations to avoid text-based detectors. For example, one
technique is to use fonts with a size of zero [35], which are
not displayed to the end user, but can be used to obfuscate
the impersonation or meaning of the text. Another technique
is to use non-Latin letters, such as letters in Cyrillic, which
appear similar to the Latin letters to the end user, but are not
interpreted as Latin by the text-based detector [16].
In order to deal with these types of techniques, we always
normalize any text before feeding it to BEC-Guard’s clas-
siﬁers. For example, we ignore any text with a font size of
zero. If we encounter Cyrillic or Greek in conjunction with
Latin text, we normalize the non-Latin letters to match the
Latin letter that is closest in appearance to it. While these
techniques are heuristic based, they have proved effective in
stopping the common forms of font-based evasion.
Hiding text in an image.
Instead of using text within the
email, attackers can hide the text within an embedded image.
We have observed this use case very rarely in practice, most
likely because these attacks are probably less effective. Many
email clients do not display images by default and even when
they do, the email may seem odd to the recipient. Therefore,
we currently do not address this use case, but a straightforward
way to address it would be to use OCR to extract the text
within the image.
Using a legitimate reply-to address. As mentioned in §4.4
BEC-Guard relies on a list of legitimate reply-to domains to
reduce false positives. This list could potentially be exploited.
For example, attackers could craft a LinkedIn or Salesforce
proﬁle with the same name of the employee being imper-
sonated and send an impersonation email from that service.
USENIX Association
28th USENIX Security Symposium    1301
Precision
FP