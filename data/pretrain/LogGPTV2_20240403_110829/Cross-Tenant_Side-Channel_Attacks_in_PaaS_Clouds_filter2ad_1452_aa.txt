title:Cross-Tenant Side-Channel Attacks in PaaS Clouds
author:Yinqian Zhang and
Ari Juels and
Michael K. Reiter and
Thomas Ristenpart
Cross-Tenant Side-Channel Attacks in PaaS Clouds
Yinqian Zhang
Ari Juels
University of North Carolina
Cornell Tech (Jacobs Institute)
Chapel Hill, NC, USA
PI:EMAIL
Michael K. Reiter
University of North Carolina
Chapel Hill, NC, USA
PI:EMAIL
New York, NY, USA
PI:EMAIL
Thomas Ristenpart
University of Wisconsin
Madison, WI, USA
PI:EMAIL
ABSTRACT
We present a new attack framework for conducting cache-
based side-channel attacks and demonstrate this framework
in attacks between tenants on commercial Platform-as-a-
Service (PaaS) clouds. Our framework uses the Flush-
Reload attack of Gullasch et al. as a primitive, and ex-
tends this work by leveraging it within an automaton-driven
strategy for tracing a victim’s execution. We leverage our
framework ﬁrst to conﬁrm co-location of tenants and then
to extract secrets across tenant boundaries. We speciﬁcally
demonstrate attacks to collect potentially sensitive applica-
tion data (e.g., the number of items in a shopping cart), to
hijack user accounts, and to break SAML single sign-on. To
the best of our knowledge, our attacks are the ﬁrst granular,
cross-tenant, side-channel attacks successfully demonstrated
on state-of-the-art commercial clouds, PaaS or otherwise.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protec-
tion—Information ﬂow controls
General Terms
Security
Keywords
Cloud security; side-channel attacks; cache-based side chan-
nels; Platform-as-a-Service
1.
INTRODUCTION
Public Platform-as-a-Service (PaaS) clouds are an impor-
tant segment of the cloud market, being projected for com-
pound annual growth of almost 30% through 2017 [20] and
“on track to emerge as the key enabling technology for inno-
vation inside and outside enterprise IT” [23]. For our pur-
poses here, a PaaS cloud permits tenants to deploy tasks
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2660356.
in the form of interpreted source (e.g., PHP, Ruby, Node.js,
Java) or application executables that are then executed in
a provider-managed host OS shared with other customers’
applications. As such, a PaaS cloud often leverages OS-
based techniques such as Linux containers to isolate ten-
ants, in contrast to hypervisor-based techniques common in
Infrastructure-as-a-Service (IaaS) clouds.
A continuing, if thus far largely hypothetical, threat to
cloud tenant security is failures of isolation due to side-
channel information leakage. A small but growing handful
of works have explored side channels in settings character-
istic of IaaS clouds, to which tenants deploy tasks in the
form of virtual machines (VMs). Demonstrated attacks in-
clude side channels by which an attacker VM can extract
coarse load measurements of a victim VM with which it is
co-located [32]; identify pages it shares with a co-located vic-
tim VM, allowing it to detect victim VM applications, down-
loaded ﬁles [33] and its operating system (OS) [29]; and even
exﬁltrate a victim VM’s private decryption key [40]. How-
ever, only the ﬁrst of these attacks was demonstrated on a
public cloud, with the others being demonstrated in lab set-
tings. To the best of our knowledge, no side-channel attack
capable of extracting granular information from a victim has
been demonstrated in the wild.
In this paper, we initiate the study of cross-tenant side-
channel attacks speciﬁcally in PaaS clouds and, in doing
so, provide the ﬁrst demonstration of granular, cross-tenant
side channels in commercial clouds of any sort. Existing
side-channel attacks mountable by one process on another
running on the same OS, particularly those that leverage
processor caches (e.g., [28, 30, 25, 34, 14, 38]), seem well
suited to performing attacks across boundries between ten-
ant instances1 in PaaS deployments. This is largely true in
our experience, though directly leveraging these attacks in
PaaS settings is not as straightforward as one might think.
One reason is that even identifying suitable targets to at-
tack in a PaaS deployment requires some thought. After
all, cryptographic keys that commonly form their most nat-
ural targets are largely absent in typical PaaS environments
where cryptographic protections (e.g., storage encryption, or
application of TLS encryption to network traﬃc) are com-
1While “instance” typically refers to an instantiated VM in
an IaaS setting, here we borrow the term for the PaaS set-
ting, to refer more generically to a collection of running com-
putations on one physical machine that are associated with
the same tenant and should be isolated from other tenants.
990monly provided as a service by the cloud operator, often on a
diﬀerent computer than those used to host tenant instances.
In this paper we report on our investigation of cache-based
side channels in PaaS clouds that, among other things, iden-
tiﬁes several novel targets (in the context of cross-tenant
side-channel attacks) for PaaS environments:
1. We show how an attacker instance can infer aspects of
a victim web application’s responses to clients’ service
requests.
In particular, we show that an attacker can
reliably determine the number of distinct items in an au-
thenticated user’s shopping cart on an e-commerce site
(the victim instance) running the popular Magento e-
commerce application.
2. We show how an attacker instance can hijack a user ac-
count on a web site (the victim instance) by predicting
the pseudorandom number it embeds in a password reset
link. We speciﬁcally demonstrate this attack against the
PHP pseudorandom number generator that the site uses.
3. We show how an attacker instance can monitor the vic-
tim so as to obtain a padding oracle to break XML en-
cryption schemes. In particular, we demonstrate a Ble-
ichenbacher attack [6] against SimpleSAMLphp, an open-
source SAML-based authentication application that im-
plements PKCS#1 v1.5 RSA encryption in a manner re-
sistant to these attacks via other vectors (but not via our
side-channel attacks).
We stress, moreover, that we have successfully mounted
each of these attacks in commercial PaaS clouds (though ob-
viously against victims that we deployed ourselves). More-
over, as a side eﬀect of doing so, we have also addressed
how to achieve co-location of an attacker instance with a
victim instance in these PaaS clouds. To our knowledge,
our attacks are thus the ﬁrst granular, cross-tenant attacks
demonstrated on commercial clouds, PaaS or otherwise.
A key ingredient in our attacks is a framework we develop
through which the attacker instance can trace a victim’s ex-
ecution paths inside shared executables. Starting with the
control-ﬂow graph (CFG) of an executable shared with the
victim, our framework consists of building an attack non-
deterministic ﬁnite automaton (attack NFA) that prescribes
the memory chunks (see Sec. 3.1) that the attack instance
should monitor over time (using a known cache-based side
channel [14, 38]) in order to trace the victim’s execution
path in the CFG. This general framework can then be used
to characterize the victim’s execution for speciﬁc attacks,
such as the exact number of times a certain execution path
segment was traversed in a short interval (in the ﬁrst at-
tack above); the precise time at which certain path segments
were traversed by the victim (as in the second attack); or
the direction taken in a speciﬁc branch of interest (in the
third attack). We believe the attack NFA framework that
we introduce here will be similarly useful in subsequent work
on both evaluating and defending against cross-tenant side-
channel attacks.
To summarize, then, the contributions of this paper are
threefold: (i) a general framework for expressing and guiding
cross-tenant side-channel attacks leveraging shared executa-
bles; (ii) identiﬁcation of novel and important targets for
side-channel attacks in PaaS environments; and (iii) demon-
stration of attacks against these targets in commercial PaaS
clouds. Sec. 2 provides background on PaaS clouds and
common isolation techniques they employ and speciﬁes the
PaaS cloud
URL (http://...)
AppFog
Azure
Baidu App Engine
Cloud Foundry
DotCloud
Elastic Beanstalk
Engine Yard
Heroku
HP Cloud Applica-
tion PaaS
Joyent SmartOS
OpenShift
WSO2
www.appfog.com
azure.microsoft.com
developer.baidu.
com/en
cloudfoundry.org
www.dotcloud.com
aws.amazon.com/
elasticbeanstalk/
www.engineyard.com
www.heroku.com
www.hpcloud.com/
products-services/
application-paas
www.joyent.com
www.openshift.com
wso2.com/cloud
Isolation
User
VM
Container
User
Container
VM
VM
Container
Container
VM
Container
Runtime
Table 1: Example PaaS isolation techniques
threat model we assume in our work. Sec. 3 describes our
attack framework. Sec. 4 discusses our strategies for achiev-
ing and conﬁrming co-location of attacker instances with
victims. Sec. 5–7 then detail our three attack demonstra-
tions outlined above. We discuss ethical considerations, ex-
tensions of the attacks, and potential countermeasures in
Sec. 8 and conclude in Sec. 9.
2. BACKGROUND
Cloud computing systems are often categorized as either
IaaS, PaaS, or Software-as-a-Service (SaaS). IaaS clouds en-
able users to launch virtual machines that they control on
the provider’s infrastructure, and provide access to vari-
ous low-level resources including storage and networking.
A canonical public PaaS cloud allows customers to upload
interpreted source code (e.g., PHP, Ruby, Node.js, Java)
or even application executables, which are then run in a
provider-managed host operating system (OS). This OS may
itself be running within a guest VM on a public IaaS plat-
form such as Amazon EC2. The host OS facilitates data
storage, monitoring and logging, and other value-adds that
enable customers to quickly provision applications.
A canonical PaaS use case is dynamic web hosting, where
the customer provides scripts or applications deﬁning the
webpage (i.e., PHP scripts or similar) and a MySQL schema,
while the cloud provides integration of middleware to facili-
tate data storage, performance monitoring and mobile inte-
gration if desired. The convenience and ﬂexibility that PaaS
provides to customers, together with the fact that mature
IaaS clouds enable quick time-to-market for a new PaaS sys-
tem, has lead to an explosion in the number of oﬀerings.
2.1 PaaS Tenant Isolation
In order to increase server utilization and reduce operat-
ing cost, PaaS systems are usually multi-tenant, meaning
they run multiple customers’ instances on the same operat-
ing system. As such, isolation between tenants is essential
for the security of PaaS clouds. In Table 1 we summarize
the isolation mechanisms used in a variety of PaaS systems,
and describe these models in more detail below.
Runtime-based isolation. Some PaaS clouds host appli-
cations owned by multiple tenants in the same process and
isolate them with application runtimes. Multiple tenants
991therefore may share, e.g., the same JVM environment, and
be isolated only by JVM runtime security mechanisms.
User-based isolation. A more widely used isolation tech-
nique is traditional user-based isolation within the host OS.
Each hosted application runs as a non-privileged user on
the OS, and the instance is a set of processes run by that
user. Basic OS-facilitated memory protection prevents il-
legal memory accesses across instance boundaries, and cor-
rectly conﬁgured discretionary access control (DAC) in Unix-
like systems prevents cross-tenant ﬁle accesses.
Container-based isolation. The main limitation of user-
based isolation is the unrestricted use of computer resources
by individual instances. This has been relatively recently
addressed with the advent of Linux containers, as imple-
mented by Linux-VServer (linux-vserver.org), OpenVZ
(openvz.org), and LXC (linuxcontainers.org). The last
has been merged into mainstream Linux kernels. A con-
tainer is a group of processes that are isolated from other
groups via distinct kernel namespaces and resource alloca-
tion quotas (so-called control groups or cgroups). A pop-
ular open-source project, Docker, which has been adopted
by several PaaS oﬀerings, is built atop LXC to facilitate the
management of Linux containers.
VM-based isolation. Some PaaS clouds give each cus-
tomer instance a separate IaaS VM instance, thereby lever-
aging the isolation oﬀered by modern virtualization.