also need to establish a secure channel between the SK and
the TPM. To this end, we can allocate an exclusive TPM
3For the purpose of this paper we assume a static root of trust. Trust in
the SK can also be established through the dynamic root of trust mecha-
nism [40].
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
6
locality for the SK and protect the corresponding memory-
mapped I/O space from OS access. Through load-time at-
testation, we can prove the integrity of the SK and hard-
ware protection environment at boot time. And henceforth
we shall rely on the security of the SK and the protection
environment during run-time.
One design consideration for the SK is the trade-off be-
tween its simplicity and functionality. At one end of the
spectrum, we can build an SK as sophisticated as a Virtual
Machine Monitor (VMM) [10, 16] that has partial control
over OS resources such as page-tables and descriptor tables,
and build the attestation service inside the VMM. Yet as the
SK code grows in complexity and size, its manageability
and veriﬁability diminish, and hence it becomes prone to
software vulnerability exploits. By contrast, one may seek
to minimize functionality at the SK to trade for security and
this is what we do in our design that follows.
4.2 BIND Design
Attestation Overview Figure 3 depicts the sequence of
operations that happen during one attestation phase.
After the process code is invoked, the ﬁrst operation is to
call the BIND by raising a Secure Kernel Intercept (SKI).
Upon receiving an attestation request, the Secure Kernel
ﬁrst veriﬁes the authenticator on the input data to the pro-
cess. The address range as to where this data is stored is
provided by the requester, and to ensure that the requester
does not lie about the input data, these memory addresses
will be incorporated into the measurement. The signature
on the input data is validated through the public signing key
of the TPM that signed the input data. The SK also needs to
verify the hash value. Later in this section, we discuss how
to enable different software versions and upgrades. If either
the signature or the hash veriﬁcation fails, the SK returns
to the process with a failure indicator. Else the SK hashes
the process code as well as the input data addresses, and be-
fore yielding control to the process, the SK sets up certain
protections to ensure that the process code is executed in a
safe and untampered environment. We shall what speciﬁc
protections we need later in this section.
After control is handed back to the process code, the
process performs computation on the incoming data, and
at the very end, requests the output data to be signed by
the SK along with a hash of the code itself. On receiving
the the ATTESTATION COMPLETE request, the SK ﬁrst en-
sures that the ATTESTATION COMPLETE call comes from
a process being attested, i.e., one that performed ATTES-
TATION INIT. This is to prevent a malicious OS kernel
from issuing a ATTESTATION COMPLETE call outside any
attested process in an attempt to thwart the attestation. After
computing a signature over the output data and the measure-
ment result (if there are many instances of output data, the
SK should compute a signature for each instance), the SK
disables the protection mechanisms established for the at-
tested process and yields control.Here we do not explicitly
measure the output data addresses as we do for the input
data, since the process code being measured contains the
ATTESTATION COMPLETE call as well as references to the
output data.
In Figure 3, the SK utilizes the TPM’s hashing and dig-
ital signature functionalities. The TPM provides protected
registers called Platform Conﬁguration Registers (PCR) for
storing integrity measurements. The PCR Reset function
clears the PCR, and the PCR Extend(n) function takes a
160bit number n, and updates a PCR value through PCR ←
SHA1(PCR||n). After sending the input data addresses and
the process code to be hashed by the TPM, the SK calls
PCR Read to retrieve the measurement result. The mea-
surement result is stored in the SK’s memory space until
an ATTESTATION COMPLETE call is issued. Then the SK
sends the output data along with the measurement result to
the TPM to be signed. The signature is computed by the
TPM using a private signing key that has been loaded into
the TPM’s memory prior to the Sign call. A signing pair
−1, K) is created inside the TPM, and the private key
(K
−1 is known only to the TPM and will never be exposed
K
outside the TPM. A TPM can sign a certiﬁcate for its public
−1
signing key using its identity private key K
ID. The certiﬁ-
cate also states that the key is bound to the SK’s locality and
cannot be used by the OS kernel. The identity public key is
vouched for by a CA.
BIND should support concurrent attestations of multi-
ple processes. For this purpose, the SK maintains a data
structure that records the information of all processes under
attestation.
Verifying the Hash Two steps are required to verify an
authenticator on a piece of input data: 1) verify the sig-
nature, 2) verify the hash. Since verifying the signature
is straightforward, we now explain how to verify the hash
and how to enable different software versions and software
upgrades. BIND allows the application to register one or
more legal hash values. We assume that for each applica-
tion, there is a trusted authority that signs certiﬁcates for le-
gal hash values. When an application registers a hash value,
it has to show a correct certiﬁcate. The public key of an
application’s trusted authority is included whenever BIND
is signing an authenticator for this application. Therefore,
BIND supports various software versions and software up-
grades.
Ensuring the Untampered Execution of the Process
Code We argued that one of the unaddressed problems
with current code-attestation technology is the time-of-use
and time-of-attestation discrepancy. Even though the code
attested may be legitimate at the time of attestation, it could
have been compromised by the time of use. In our case, we
also need to ensure that what is executed is exactly the code
that is hashed. We address this problem by having the SK
set up a safe environment for the process to execute. In this
safe environment, the process code is “locked” from outside
interference. The protection mechanisms introduced in this
paragraph are hidden from the programmer’s point of view.
• Memory protection One requirement of a safe execu-
tion environment states that no malicious intermediary
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
7
PROCESS → SK: ATTESTATION INIT(input data addresses, size of process code)
SK:
disable interrupt
verify authenticator on input data
SK → TPM: PCR Reset
SK → TPM: PCR Extend(input data addresses, process code)
SK → TPM: h ← PCR Read
SK:
SK → PROCESS:
PROCESS:
PROCESS → SK: ATTESTATION COMPLETE(output data addresses)
set up secure execution environment for the process
enable interrupt
yield control
perform transformation on input data
SK:
disable interrupt
verify that the call comes from the process being attested
SK → TPM: Sign(output data, h)
{output data, h}K−1
TPM → SK:
clear protection
SK:
SK:
enable interrupt
SK → PROCESS:
{output data, h}K−1
Figure 3. Attestation Service Based on TPM and SEM
(including malicious software code, malicious I/O de-
vices) can modify the process memory space during
its execution. This we achieve through memory pro-
tection. With AMD’s new SEM mode, memory can be
protected on a per-page basis from access by OS kernel
and peripheral devices. The attestation service running
at the SK privilege level can utilize these features, and
set up corresponding protection data structures to en-
sure that the process executes in a safe environment.
• Securely restoring execution environment after inter-
rupts If the process code were simple enough to be able
to execute in a single pass without going through the
OS scheduler interrupts, then no code could have in-
tercepted its execution, and no software attack would
be able to change the processor environment during its
execution.
In reality, however, the process code may take a long
time to execute and due to the OS scheduler, it may
be suspended and resumed several times before com-
pletion. While performing these context switches, a
malicious OS can cheat and not restore the correct ex-
ecution environment. For instance, the OS may resume
the code not at the instruction where it has left off,
but at a different instruction address. A malicious OS
can also modify its kernel data structure for the pro-
cess in between two scheduler events, so that when the
process is resumed, the register contents are changed.
As a counter-measure, we propose the following ap-
proach. Before yielding to the process code, the SK
loads a shadow Interrupt Descriptor Table (IDT) and a
shadow interrupt handler that overrides the OS inter-
rupt handling mechanisms. In this way, every time an
interrupt is raised during the execution of the process
code, the SK takes over. The SK then makes a copy of
the run-time environment of the process, it also inserts
in the process code an Secure Kernel Intercept instruc-
tion exactly where execution is going to resume. Then
the SK dispatches the interrupt to the OS. And next
time the process is resumed, it will trap to the SK ﬁrst
so that the SK can check if all run-time environment
has been faithfully restored by the OS before resuming
the process. The run-time environment to be checked
comprises of 1) register values including general pur-
pose registers, system/control registers, etc. 2) virtual
to physical address mapping for the process.
A Symmetric Key Alternative So far we have used
TPM’s digital signature functionality to sign the measure-
ment results. The drawback of asymmetric key cryptogra-
phy is its high computational overhead. In some situations
where efﬁciency is crucial, we would like to use symmetric
key cryptography instead. In this paragraph, we propose a
symmetric key alternative. To do this, we need to securely
establish a secret MAC key between two TPMs; we also
consider key management issues; and since the TPM does
not support a MAC function by itself, we explain how to
efﬁciently instantiate a MAC using the TPM’s SHA-1 func-
tion. Our guidelines for key agreement and management are
as follows:
• Since we assume untrusted intermediaries, the key ex-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
8
SK A:
generate a, ga mod p
SK A → TPM A: Seal(a)
destroy a
SK A:
SK A → TPM A: Sign(ga mod p)
{ga mod p}K−1
TPM A → SK A:
{ga mod p}K−1
SK A (cid:1) SK B:
{gb mod p}K−1
SK B (cid:1) SK A:
verify signature of {gb mod p}K−1
SK A:
B
A
A
B
SK A → TPM A: Unseal
TPM A → SK A: a
SK A:
compute SKAB ← gab mod p
SK A → TPM A: Seal(SKAB)
SK A:
destroy a, SKAB
Figure 4. Difﬁe-Hellman Key Exchange between TPM A and TPM B. (cid:1) denotes that the message
has gone through an untrusted intermediary, whereas → denotes a secure channel, i.e., the channel
between the SK and a local TPM is secure.
change protocol needs to be resilient to man-in-the-
middle attacks.
• The keys should be sealed in TPM’s memory and
should remain invisible to any untrusted party, includ-
ing the OS kernel, application code, peripheral de-
vices, etc.
• The keys are unsealed to the SK upon time of use. The
SK will use them to 1) verify the MAC on input data;
2) compute a MAC over the output data and the hash
of the process code.
• The secret keys remain in the SK’s memory space for
a controlled period of time. To minimize the chance of
leakage, the SK should destroy the keys immediately
after usage. To prevent the untrusted OS kernel from
reading off the secret key information, the SK should
be executed in a globally uninterrupted manner. And
since we have securely set up the DMA Exclusion Vec-
tors (DEV) during secure boot, we can also prevent pe-
ripheral devices from reading the SK memory space.
For key exchange, we may use Difﬁe-Hellman [14]. In
Figure 4, two participating hosts A and B try to establish a
−1
secret MAC key between their two TPMs. Here K
A is the
−1
A , KA)
private signing key of TPM A. The signing pair (K
−1
is created inside the TPM, and the private key K
A is
known only to TPM A and will never be exposed outside the
TPM. TPM A can sign a certiﬁcate for KA using its identity
−1
ID(A). The identity public key is vouched for
private key K
by the CA.
After a secret MAC key is established between TPM A
and TPM B, for SK A to verify the MAC on some data
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
9
incoming from B, SK A ﬁrst requests TPM A to unseal
SKAB, then it veriﬁes the MAC using SKAB, and imme-
diately destroys SKAB from memory.
We now explain how to efﬁciently and securely im-
plement a MAC function using the TPM. The TPM pro-
vides a SHA-1 functionality.
So we can instantiate
i.e., M AC(msg, K) =
an HMAC [11] using SHA1,
SHA-1(K⊕opad, SHA-1(K⊕ipad, msg)). The SK has to
facilitate the generation of the HMAC, since the TPM does
not support an HMAC function by itself. Therefore the SK
retrieves the MAC key from TPM to perform the XOR and
concatenation functions; the result will then be handed to
the TPM to be hashed.
BIND should provide both asymmetric and symmetric
key options, so that the process can choose whichever ver-
sion to use based on need. In addition, for the symmetric
key version, we need a small modiﬁcation to its interface:
1) the ATTESTATION INIT call has to specify where the in-
put data came from; 2) the ATTESTATION COMPLETE call
has to specify the intended recipients, so that BIND can cre-
ate a MAC for each recipient.
5 Case Study
To demonstrate the use of BIND in real-world distributed
systems, we present two case studies: securing distributed
computation applications and securing the BGP routing
protocol.
5.1 Securing Distributed Computation Applica-
tions with BIND
Introduction to Distributed Computation Applications
Recently, there has been a surge of interest in using large-
scale distributed computation to solve difﬁcult computa-
tional tasks. By utilizing the spare processor cycles of
many personal computers, we can obtain the computa-
tional power of one or more super-computers. For in-
stance, the well-know SETI@Home [3] project uses the
free cycles of Internet-connected computers to analyze ra-
dio telescope data in the Search for Extraterrestrial Intelli-
gence. The GIMPS [2] project is intended for the search of
new Mersenne primes and encryption keys; and the Fold-
ing@Home [1] project uses distributed computing to study