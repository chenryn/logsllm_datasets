⽐如，为多个名字同时建⽴关联。
>>> a = b = c = 1234
>>> a is b is c # 引⽤用同⼀一⽬目标。
True
仅以逗号分隔的多个右值被视作元组初始化元素。
>>> x = 1, "abc", [10, 20]
>>> x
(1, 'abc', [10, 20])
2.1 增量赋值
顾名思义，增量赋值（augmented assignment，+=、*=、...）试图直接修改原对象内容，
实现累加效果。当然，前提是⽬标对象允许，否则退化为普通赋值。
既是增量，那么就须确保⽬标对象已存在。
>>> s += 10
NameError: name 's' is not defined
>>> s = 0
>>> s += 10
!99
学习笔记 . 第三版
我们分别以可变列表、不可变元组对⽐增量赋值结果。
>>> a = b = []
>>> a += [1, 2]
>>> a is b # 依然指向原对象。
True
>>> c = d = ()
>>> c += (1, 2)
>>> c is d # 新对象。
False
相同增量赋值运算符，结果全然不同。列表直接修改原内容，⽽元组新建对象。尽管编译
器都处理成 INPLACE 指令，但最终执⾏还是依⽬标类型⽽定。
以 += 为例，对应 __iadd__ ⽅法，这也是能否执⾏增量操作的标志。
如该⽅法不存在，解释器则尝试执⾏ __add__，变成普通加法操作。
>>> dis.dis(compile("a += [1, 2]", "", "exec"))
1 0 LOAD_NAME 0 (a)
2 LOAD_CONST 0 (1)
4 LOAD_CONST 1 (2)
6 BUILD_LIST 2
8 INPLACE_ADD
10 STORE_NAME 0 (a)
12 LOAD_CONST 2 (None)
14 RETURN_VALUE
>>> dis.dis(compile("a += (1, 2)", "", "exec"))
1 0 LOAD_NAME 0 (a)
2 LOAD_CONST 3 ((1, 2))
4 INPLACE_ADD
6 STORE_NAME 0 (a)
8 LOAD_CONST 2 (None)
10 RETURN_VALUE
!100
学习笔记 . 第三版
2.2 序列解包
不同于将多名字关联到单⼀对象，序列解包（sequence unpacking）展开所有元素对象，继
⽽与多个名字分别建⽴关联。
>>> a, b, c = [1, 2, 3]
>>> a, b, c
1, 2, 3
>>> a, b, c = "xyz"
>>> a, b, c
'x', 'y', 'z'
>>> a, b, c = range(3)
>>> a, b, c
0, 1, 2
下⾯⽰例可能会造成误解。
>>> a, b = [1, 2], (3, 4) # 右值表达式构建元组对象 ([1, 2], (3, 4))。
>>> a
[1, 2]
>>> b
(3, 4)
显然，解包操作还可⽤来交换变量，且⽆需借助第三⽅。事实上，对三个以内的变量交换，
编译器直接优化成 ROT 指令，直接交换栈帧数据，⽽不是构建元组。
>>> a, b = b, a
>>> dis.dis(compile("a, b, c = c, b, a", "", "exec"))
1 0 LOAD_NAME 0 (c)
2 LOAD_NAME 1 (b)
4 LOAD_NAME 2 (a)
6 ROT_THREE # 使⽤用 ROT 指令直接操作栈帧数据。
8 ROT_TWO
!101
学习笔记 . 第三版
10 STORE_NAME 2 (a)
12 STORE_NAME 1 (b)
14 STORE_NAME 0 (c)
16 LOAD_CONST 0 (None)
18 RETURN_VALUE
>>> dis.dis(compile("a, b, c, d = d, c, b, a", "", "exec"))
1 0 LOAD_NAME 0 (d)
2 LOAD_NAME 1 (c)
4 LOAD_NAME 2 (b)
6 LOAD_NAME 3 (a)
8 BUILD_TUPLE 4 # 构建元组，解包后分别赋值。
10 UNPACK_SEQUENCE 4
12 STORE_NAME 3 (a)
14 STORE_NAME 2 (b)
16 STORE_NAME 1 (c)
18 STORE_NAME 0 (d)
20 LOAD_CONST 0 (None)
22 RETURN_VALUE
解包操作⽀持深度嵌套。
左右值表达式以相同的⽅式嵌套。
>>> a, (b, c) = 1, [10, 20] # 简单嵌套⽅方式。
>>> a, b, c
1, 10, 20
>>> a, ((b, c), (d, e)) = 1, [(10, 20), "ab"] # 更更深层次嵌套。
>>> a, b, c, d, e
1, 10, 20, 'a', 'b'
当然，也可忽略某些元素。
>>> a, _, b, _, c = "a0b0c"
>>> a, b, c
'a', 'b', 'c'
!102
学习笔记 . 第三版
星号收集
当序列元素与名字数量不等时，解包出错。
>>> a, b = 1, 2, 3
ValueError: too many values to unpack (expected 2)
>>> a, b, c = 1, 2
ValueError: not enough values to unpack (expected 3, got 2)
如元素多过名字，可考虑将右值截取等长切⽚。但反过来，事情就⽐较⿇烦了，要写更多
代码进⾏判断。为此，Python 3 专门实现了扩展⽅式（extended sequence unpacking）。
在名字前添加星号，表⽰收纳所有剩余元素。
>>> a, *b, c = range(5)
>>> a, b, c
0, [1, 2, 3], 4
>>> a, b, *c = range(5)
>>> a, b, c
0, 1, [2, 3, 4]
>>> *a, b, c = range(5)
>>> a, b, c
[0, 1, 2], 3, 4
即便名字多过元素，也能处理。
>>> a, *b, c = 1, 2 # 收集不不到数据，返回空列列表。
>>> a, b, c
1, [], 2
注意，解包操作优先保障⾮收集名字赋值，所以右值元素不能少于此数量。另外，星号只
能有⼀个，否则⽆法界定收集边界。
!103
学习笔记 . 第三版
>>> a, *b, c, d = 1, 2
ValueError: not enough values to unpack (expected at least 3, got 2)
>>> a, *b, *c, d = range(10)
SyntaxError: two starred expressions in assignment
星号收集不能单独出现，要么与其他名字⼀起，要么放⼊列表或元组内。
>>> *a = 1, 2
SyntaxError: starred assignment target must be in a list or tuple
>>> [*a] = 1, 2
>>> a
[1, 2]
>>> (*a,) = 1, 2 # 注意是元组，别忘了了逗号。
>>> a
[1, 2]
序列解包和星号收集还可⽤于控制流表达式等场合。
>>> for a, *b in ["abc", (1, 2, 3)]: print(a, b)
a ['b', 'c']
1 [2, 3]
星号展开
星号还可⽤来展开可迭代（iterable）对象。
简单点说，可迭代对象就是每次返回⼀个成员。
所有序列类型，以及字典、集合、⽂件等都是可迭代类型。
!104
学习笔记 . 第三版
>>> a = (1, 2)
>>> b = "ab"
>>> c = range(10, 13)
>>> [*a, *b, *c]
[1, 2, 'a', 'b', 10, 11, 12]
对于字典，可⽤单星号展开主键，双星号展开键值。
>>> d = {"a": 1, "b": 2}
>>> [*d]
['a', 'b']
>>> {"c": 3, **d}
{'c': 3, 'a': 1, 'b': 2}
展开操作同样可⽤于函数调⽤，将单个对象分解成多个实参。
def test(a, b, c):
print(locals())
>>> test(*range(3))
{'c': 2, 'b': 1, 'a': 0}
>>> test(*[1, 2], 3)
{'c': 3, 'b': 2, 'a': 1}
>>> a = {"a": 1, "c": 3}
>>> b = {"b": 2}
>>> test(**b, **a)
{'c': 3, 'b': 2, 'a': 1}
2.3 作用域
作为隐式规则，赋值操作总是针对当前名字空间，可能是 locals，又或者 object.__dict__。
在同⼀作⽤域内，即便存在先后顺序，名字也不会解析成不同名字空间引⽤。
!105
学习笔记 . 第三版
>>> x = 10
>>> def test():
print(x)
x = x + 10
>>> test()
UnboundLocalError: local variable 'x' referenced before assignment
>>> dis.dis(test)
2 0 LOAD_GLOBAL 0 (print)
2 LOAD_FAST 0 (x) # 本地
4 CALL_FUNCTION 1
6 POP_TOP
3 8 LOAD_FAST 0 (x) # 本地
10 LOAD_CONST 1 (10)
12 BINARY_ADD
14 STORE_FAST 0 (x) # 本地
16 LOAD_CONST 0 (None)
18 RETURN_VALUE
从反汇编结果看，函数内的 x 统统从本地名字空间引⽤。
并⾮如设想般，先从全局读取，最后才在本地建⽴关联。
如要对外部变量赋值，须显式声明变量位置。关键字 global 指向全局名字空间，nonlocal
为外层嵌套（enclosing）函数。
除⾮必要，否则应避免对外部变量赋值。可以返回值等⽅式，交由持有者处理。
>>> g = 1
>>> def outer():
e = 2
def inner():
global g # 声明全局变量量。
nonlocal e # 声明外层嵌套函数变量量。
g = 10
e = 20
inner()
!106
学习笔记 . 第三版
return e
>>> outer()
20
>>> g
10
此显式声明指⽰编译器⽣成对外部空间的操作指令。
>>> def test():
global x
x = 10
>>> dis.dis(test)
3 0 LOAD_CONST 1 (10)
2 STORE_GLOBAL 0 (x) # 全局
4 LOAD_CONST 0 (None)
6 RETURN_VALUE
我们可⽤ global 在函数内创建全局变量。
>>> x
NameError: name 'x' is not defined # 检查 x 是否存在。
>>> def test():
global x
x = 100
>>> test()
>>> x
100
⾄于 nonlocal 则⾃内向外依次检索嵌套函数，但不包括全局名字空间。
如多层嵌套函数存在同名变量，依就近原则处理。
另，nonlocal 不能为外层嵌套函数新建变量。
>>> def enclosing():
x = 1
def outer():
def inner():
!107
学习笔记 . 第三版
nonlocal x
x = 999 # 向外查找，直到 enclosing.x 命中。
inner()
outer()
print(x)
>>> enclosing()
999
globals enclosing
nonlocal
outer
global