} s1; 
ULONG Length; 
} u1; 
union { 
struct { 
USHORT Type; 
USHORT DataInfoOffset; 
} s2; 
ULONG ZeroInit; 
} u2; 
union { 
CLIENT_ID ClientId; 
double DoNotUseThisField; 
}; 
ULONG MessageId; 
union { 
SIZE_T ClientViewSize; 
ULONG CallbackId; 
}; 
} PORT_MESSAGE, * PPORT_MESSAGE; 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
// specify the message struct and fill it with all 0's to get a c
lear start 
ALPC_MESSAGE pmSend, pmReceived; 
RtlSecureZeroMemory(&pmSend, sizeof(pmSend)); 
RtlSecureZeroMemory(&pmReceived, sizeof(pmReceived)); 
// getting a pointer to my payload (message) byte array 
LPVOID lpPortMessage = pmSend->PortMessage; 
LPCSTR lpMessage = "Hello World!"; 
int lMsgLen = strlen(lpMessage); 
// copying my message into the message byte array 
memmove(lpPortMessage, messageContent, lMsgLen); 
// specify the length of the message 
pMessage->PortHeader.u1.s1.DataLength = lMsgLen; 
// specify the total length of the ALPC message 
pMessage->PortHeader.u1.s1.TotalLength = sizeof(PORT_MESSAGE) + l
MsgLen; 
// Send the ALPC message 
NTSTATUS lSuccess = NtAlpcSendWaitReceivePort( 
    hCommunicationPort,  
// the client's communication por
t handle 
    ALPC_MSGFLG_SYNC_REQUEST, // message flags: synchronous messa
ge (send & receive message)  
    (PPORT_MESSAGE)&pmSend, 
// our ALPC message 
    NULL,                   // sending message attributes: we do
n't need that in the first step 
    (PPORT_MESSAGE)&pmReceived, // ALPC message buffer to receive 
a message 
    &ulReceivedSize,        // SIZE_T ulReceivedSize; Size of the 
received message 
c++
This code snippet will send an ALPC message with a body of “Hello World!” to a
server that we’ve connect to. We specied the message to be synchronous message
with the ALPC_MSGFLG_SYNC_REQUEST  ag, which means that this call will wait
(block) until a message is received on the client’s communication port. 
Of course we do not have to wait until a new message comes in, but use the time
until then for other tasks (remember ALPC was build to be asynchronous, fast and
efcient). To facilitate that ALPC provides three different message types:
>> Synchronous request: As mentioned above synchronous messages block
until a new message comes in (as a logical result of that one has to specify a
receiving ALPC message buffer when calling NtAlpcSendWaitReceivePort
with a synchronous messages)
>> Asynchronous request: Asynchronous messages send out your message, but
not wait for or act on any received messages.
>> Datagram requests: Datagram request are like UDP packets, they don’t
expect a reply and therefore the kernel does not block on waiting for a
received message when sending a datagram request.
So basically you can choose to send a message that expects a reply or one that does
not and when you chose the former you can furthermore chose to wait until the
reply comes in or don’t wait and do something else with your valuable CPU time in
the meantime. That leaves you with the question of how to receive a reply in case
you chose this last option and not wait (asynchronous request) within the
NtAlpcSendWaitReceivePort  function call? 
Once again you have 3 options:
>> You could use an ALPC completion list, in which case the kernel does not
inform you (as the receiver) that new data has been received, but instead
simply copies the data into your process memory. It’s up to you (as the
receiver) to get aware of this new data being present. This could for example
achieved by using a notication event that is shared between you and the
ALPC server¹. Once the server signals the event, you know new data has
arrived. 
¹Taken from Windows Internals, Part 2, 7th Edition.
>> You could use an I/O completion port, which is a documented
synchronization facility.
>> You can receive a kernel callback to get replies - but that is only allowed if
your process lives in kernel land.
As you have the option to not receive messages directly it is not unlikely that more
than one message comes in and waits for being fetched. To handle multiple
messages in different states ALPC uses queues to handle and manage high volumes
    NULL,                   // receiving message attributes: we d
on't need that in the first step 
    0                       // timeout parameter, we don't want t
o timeout 
); 
of messages piling up for a server. There are ve different queues for messages and
to distinguish them I’ll quote directly from chapter 8 of Windows Internals, Part 2,
7th Edition (as there is no better way to put this with these few words):
>> Main queue: A message has been sent, and the client is
processing it.
>> Pending queue: A message has been sent and the caller is
waiting for a reply, but the reply has not yet been sent.
>> Large message queue: A message has been sent, but the
caller’s buffer was to small to receive it. The caller gets
another chance to allocate a larger buffer and request the
message payload again.
>> Canceled queue: A message that was sent to the port but has
since then been canceled.
>> Direct queue: A message that was sent with a direct event
attached.
At this point I’m not going to dive any deeper into message synchronization options
and the different queues - I’ve got to make a cut somewhere - however in case
someone is interested in nding bugs in these code areas I can highly recommend a
look into chapter 8 of the amazing Windows Internals, Part 2, 7th Edition. I learned
a lot from this book and can’t praise it enough! 
Finally, concerning the messaging details of ALPC, there is a last thing that hasn’t
been detailed yet, which is the question of how is a message transported from a
client to a server. It has been mentioned what kind of messages can be send, how
the structure of a message looks like, what mechanism exist to synchronize and
stall messages, but it hasn’t been detailed so far how a message get’s from one
process to the other. 
You’ve got two options for this:
>> Double buffer mechanism: In this approach a message buffer is allocated in
the sender’s and receiver’s (virtual) memory space and the message is copied
from the sender’s (virtual) memory into the kernel’s (virtual) memory and from
there into the receiver’s (virtual) memory. It’s called double buffer, because a
buffer, containing the message, is allocated and copied twice (sender -> kernel
& kernel -> receiver).
>> Section object mechanism: Instead of allocating a buffer to store a message,
client and server can also allocate a shared memory section, that can be
accessed by both parties, map a view of that section - which basically means
to reference a specic area of that allocated section - copy the message into
the mapped view and nally send this view as a message attribute (discussed
in the following chapter) to the receiver. The receiver can extract a pointer to
the same view that the sender used through the view message attribute and
read the data from this view.
The main reason for using the ‘section object mechanism’ is to send large messages,
as the length of messages send through the ‘double buffer mechanism’ have a
hardcoded size limit of 65535 bytes. An error is thrown if this limit is exceeded in a
message buffer. The function AlpcMaxAllowedMessageLength()  can be used to
get the maximum message buffer size, which might change in future versions of
Windows. 
This ‘double buffer mechanism’ is what was used in the code snippet from above.
Looking back a message buffer for the send and the received message has been
implicitly allocated via the rst three lines of code:
This message buffer has then been passed to the kernel in the call to
NtAlpcSendWaitReceivePort , which copies the sending buffer into the receiving
buffer on the other side. 
We could also dig into the kernel to gure out how an ALPC message (send via
message buffers) actually looks like. Reversing the NtAlpcSendWaitReceivePort
leads us to the kernel function AlpcpReceiveMessage , which eventually calls - for
our code path - into AlpcpReadMessageData , where the copying of the buffer
happens. 
Side note: If you’re interested in all the reversing details I left out here check out my
follow up post: Debugging and Reversing ALPC
At the end of this road you’ll nd a simple RtlCopyMemory call - which is just a
macro for memcpy - that copies a bunch of bytes from one memory space into
another - it’s not as fancy as one might have expected it, but that’s what it is ¯\(ツ)/
¯.
1 
2 
3 
ALPC_MESSAGE pmSend, pmReceived;                // these are the m
essage buffers 
RtlSecureZeroMemory(&pmSend, sizeof(pmSend)); 
RtlSecureZeroMemory(&pmReceived, sizeof(pmReceived)); 
c++
AlpcpReadMessageData decompiled in Ghidra
To see that in action I’ve put a breakpoint into the AlpcpReadMessageData
function shown above for my ALPC server process. The breakpoint is triggered once
my ALPC client connects and sends an initial message to the server. The message
that the client sends is the: Hello Server . The annotated debug output is shown
below:
[Pseudo Signature]  
memcpy(PointerToDestination, PointerToSource, LengthToCopy) 
[Translated to calling convention]  memcpy(@RCX,   
 ,@RDX,       ,R8) 
This memcpy call copies the client's message from kernel memory to server memory
Visualized double buffer messaging mechanism
These debug screens show what an ALPC message send through a message buffer
looks like…just bytes in a process memory. 
Also note that the above screens is a visual representation of the ‘double buffer
mechanism’ in it’s 2nd buffer copy stage, where a message is copied from kernel
memory space into the receiver’s process memory space. The copy action from
sender to kernel space has not been tracked as the breakpoint was only set for the
receiver process.
Alright, there’s one last piece that needs to be detailed before putting it all
together, which is ALPC message attributes. I’ve mentioned message attributes a
ALPC Message Attributes
few times before, so here is what that means. 
When sending and receiving messages, via NtAlpcSendWaitReceivePort , client
and server can both specify a set of attributes that they would like to send and/or
receive. These set of attributes that one wants to send and the set of attributes that
one wants to receive are passed to NtAlpcSendWaitReceivePort  in two extra
parameters, shown below:
NtAlpcSendWaitReceivePort function signature
The idea here is that as sender you can pass on additional information to a receiver
and the receiver on the other end can specify what set of attributes he would like to
get, meaning that not necessarily all extra information that was send is also
exposed to the receiver. 
The following message attributes can be send and/or received:
>> Security Attribute: The security attribute holds security context information,
which for example can be used to impersonate the sender of a message
(detailed in the Impersonation section). This information is controlled and
validated by the kernel. The structure of this attribute is shown below:
>> View Attribute: As described towards the end of the Messaging Details
chapter, this attribute can be used to pass over a pointer to a shared memory
section, which can be used by the receiving party to read data from this
memory section. The structure of this attribute is shown below:
>> Context Attribute: The context attribute stores pointers to user-specied
context structures that have been assigned to a specic client (communication
port) or to a specic message. The context structure can be any arbitrary
structure, for example a unique number, and is meant to identify a client. The
1 
2 
3 
4 
5 
typedef struct _ALPC_SECURITY_ATTR { 
ULONG Flags; 
PSECURITY_QUALITY_OF_SERVICE pQOS; 
HANDLE ContextHandle; 
} ALPC_SECURITY_ATTR, * PALPC_SECURITY_ATTR; 
c++
1 
2 
3 
4 
5 
6 
typedef struct _ALPC_DATA_VIEW_ATTR { 
ULONG Flags; 
HANDLE SectionHandle; 
PVOID ViewBase; 
SIZE_T ViewSize; 
} ALPC_DATA_VIEW_ATTR, * PALPC_DATA_VIEW_ATTR; 
c++
server can extract and reference the port structure to uniquely identify a
client that send a message. An example of a port structure I used, can be
found here. The kernel will set in the sequence number, message ID and
callback ID to enable structured message handling (similar to TCP). This
message attribute can always be extracted by the receiver of a message, the
sender does not have to specify this and cannot prevent the receiver from
accessing this. The structure of this attribute is shown below:
>> Handle Attribute: The handle attribute can be used to pass over a handle to
a specic object, e.g. to a le. The receiver can use this handle to reference
the object, e.g. in a call to ReadFile. The kernel will validate if the passed
handle is valid and raise and error otherwise. The structure of this attribute is
shown below:
>> Token Attribute: The token attribute can be used to pass on limited
information about the sender’s token. The structure of this attribute is shown
below:
>> Direct Attribute: The direct attribute can be used to associate a created event
with a message. The receiver can retrieve the event created by the sender and
signal it to let the sender know that the send message was received
(especially useful for datagram requests). The structure of this attribute is
shown below:
1 
2 
3 
4 
5 
6 
7 
typedef struct _ALPC_CONTEXT_ATTR { 
PVOID PortContext; 
PVOID MessageContext; 
ULONG Sequence; 
ULONG MessageId; 
ULONG CallbackId; 
} ALPC_CONTEXT_ATTR, * PALPC_CONTEXT_ATTR; 
c++
1 
2 
3 
4 
5 
6 
7 
typedef struct _ALPC_MESSAGE_HANDLE_INFORMATION { 
ULONG Index; 
ULONG Flags; 
ULONG Handle; 
ULONG ObjectType; 
ACCESS_MASK GrantedAccess; 
} ALPC_MESSAGE_HANDLE_INFORMATION, * PALPC_MESSAGE_HANDLE_INFORMAT
ION; 
c++
1 
2 
3 
4 
5 
6 
typedef struct _ALPC_TOKEN_ATTR 
{ 
ULONGLONG TokenId; 