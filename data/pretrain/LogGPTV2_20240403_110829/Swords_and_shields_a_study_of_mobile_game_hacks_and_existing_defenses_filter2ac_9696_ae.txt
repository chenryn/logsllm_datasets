*
*
NA
NA
Yes
NA
Yes
+
*
native
Compilation
into
code
*
*
*
*
*
NA
NA
NA
Yes
Yes
+
*
Network
tection
pro-
Client-server
sync
No.
games
of
*
*
NA
HTTPS
NA
Customized
Customized
Customized
Customized
Customized
Customized
*
NA
NA
NA
NA
Partial
NA
Partial
NA
NA
NA
Partial
Full
48
4
9
3
1
3
1
1
5
2
5
18
of
No.
games
hacked
48
4
9
3
1
3
1
1
1
1
5
0
Table 3: Levels of protection strength. “Partial” in the local resources protection column means that developers protect
memory or local resources, but not both. “*” means that the protection does not matter at this level. “+” means that the
game either has code obfuscation or compilation into native code. “Partial” in the client-server sync column means that
developers partially rely on the client to compute sensitive logic.
our current threat model. The practical value of this table
is that it gives developers an estimate about how well their
games are protected relative to others in the market. For ex-
ample, if a game implements local resource protection and
customized traﬃc protection, and its important libraries are
compiled into native code, then the game has a 4B rating,
which means that its developer probably has done a better
job than 70% of others.
A game’s genre and its development platform should also
be taken into consideration. For a multi-player game, we
suggest implementing client-server sync, because it gives the
strongest protection, and the traﬃc overhead is reasonable
given that the game has already generating heavy traﬃc.
For a game of another genre, its development platform be-
comes the main consideration. Generally speaking, we sug-
gest a combination of local resource protection, network pro-
tection, and code obfuscation/native code implementation,
if the platform provides support of them. For example, if a
game is developed on Android SDK/NDK, all these mecha-
nisms can be implemented without signiﬁcant eﬀort. Among
other development platforms, we suggest local resource pro-
tection, network protection, and native code for cocos2d-x
because it is a C++ game engine. For the other development
platforms covered in our study (Unity3D, libGDX, Adobe
Air, and AndEngine), it is reasonable to use a combination
of local resource protection, network protection, and code
obfuscation, because it would require signiﬁcant developer’s
eﬀort to build native code libraries, and frequently invoca-
tions of native code functions from high-level languages of
these frameworks, such as Java, or C#, or ActionScript,
would incur high runtime overhead. We also suggest devel-
opers to consider strengthening their protections by deploy-
ing per-device keys and periodically updating keys, which
would make it diﬃcult for professional hackers to share their
results with other gamers.
7. RELATED WORK
Attacks and Defenses in Games. About online multi-
player PC games, researchers have investigated speciﬁc threats
and categorized diﬀerent attacks. Speciﬁc threats have been
discussed in [26, 7] about state exposure and general map
hacking techniques by analyzing the memory respectively.
Yan et al. provide an overview of diﬀerent cheating meth-
ods and the security problems behind these methods [37].
Another review paper [34] covers known attacks and gives a
few real world examples in multi-player games. The authors
focused on comparing the attacks and defenses in Clien-
t/Server architectures and P2P architectures of online mo-
bile games, while our study has a much wider coverage about
diﬀerent types of games and also we have ﬁrst-hand experi-
ences about the eﬀorts of hackers to break these games.
Researchers have proposed defenses against these attacks.
Most of these proposals design protocols to sync client-server
states and verify game status on the server side. For exam-
ple, Baughman et al. propose a protocol for cheat proof for
online games [3]. Researchers also implement approaches to
verify client behavior observed in the server side to ﬁgure out
abnormal behaviors [4, 9, 25, 32]. Minimizing information
disclosed to the client is discussed in [28, 36].
A few client-side protection approaches are proposed in
the research literature: Monch et al. try to protect games
from attacks by creating a trustworthy client [29]. Their
approach is to check the integrity of the client, mask sensi-
tive functions, and update these protections overtime. Re-
searchers propose the use of trust computing platforms as
hosts for game consoles [2]. Comparing with these papers,
we study the defenses in real mobile games systematically
and provide practical suggestions.
Security Issues Due to Untrusted Client. The prob-
lem that we discuss in this paper about mobile games is a
special and critical case of a more general security prob-
lem in many client-server systems. For example, web devel-
opers often make mistakes by placing some sensitive data
in browser cookies or doing some critical computations in
client-side javascript. Bisht et al. described several such
logic bugs in real-world websites [5] and proposed a client-
side detection approach to ﬁnd these bugs. Felmetsger et al.
also studied this type of vulnerabilities, but their proposed
approach is based on program analysis of web application
(i.e., server-side) [12]. Related work can also be extended
395
to studies about protocol implementation bugs. For exam-
ple, Chen et al. described many incorrect implementations
of the OAuth protocol, which allow an untrusted client to
victim users’ accounts without knowing the passwords [8].
Researchers also describe an attack against Google’s In-App
purchase service [30].
8. CONCLUSIONS
Our study tries to understand the eﬀectiveness of exist-
ing defense techniques against mobile-game hacking. These
techniques are designed to protect various elements in mobile
games, including memory, local ﬁles, network traﬃc, source
code, and game states. The result of our study suggests that
many developers (over 50% in our dataset) have attempted
to implement some of these protections, which is encourag-
ing. However, the eﬀectiveness varies. Some protections can
be trivially defeated by automatic tools, some others need
signiﬁcant manual eﬀort to bypass, and some are perhaps
not vulnerable in the principles of their approaches. We pro-
vide a reference framework to help developers understand
how eﬀective their implementations are relative to others.
Besides the eﬀectiveness, an important consideration is cost,
including developer’s eﬀort and runtime overhead. Many
protection mechanisms need developers to make a trade-oﬀ
between eﬀectiveness and cost. For example, client-server
sync is a very eﬀective protection, but the cost is so high
that it is not suitable for most game genres; basic HTTPS
traﬃc protection is very inexpensive, but it is trivially break-
able. We did observe that platform support is an important
factor. It makes developers more willing to adopt these pro-
tection mechanisms, and presents a better value proposition
in terms of cost-eﬀectiveness.
9. ACKNOWLEDGEMENTS
We thank Harshit Agarwal, Sohil Habib, Kenny Sung,
Xiaofeng Wang, and anonymous reviewers for valuable com-
ments.
10. REFERENCES
[1] Adobe. Adobe air.
http://www.adobe.com/products/air.html.
[2] S. Balfe and A. Mohammed. Final fantasy–securing
on-line gaming with trusted computing. In Autonomic
and Trusted Computing, pages 123–134. Springer,
2007.
[3] N. E. Baughman and B. N. Levine. Cheat-proof
playout for centralized and distributed online games.
In INFOCOM 2001. Twentieth Annual Joint
Conference of the IEEE Computer and
Communications Societies. Proceedings. IEEE,
volume 1, pages 104–113. IEEE, 2001.
[4] D. Bethea, R. A. Cochran, and M. K. Reiter.
Server-side veriﬁcation of client behavior in online
games. ACM Transactions on Information and System
Security (TISSEC), 14(4):32, 2011.
[5] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and
V. Venkatakrishnan. Notamper: Automatically
detecting parameter tampering vulnerabilities in web
applications. In ACM Conf. on Computer and
Communications Security, 2010.
[6] Bob Pan. Dex2jar.
https://github.com/pxb1988/dex2jar.
[7] E. Bursztein, M. Hamburg, J. Lagarenne, and
D. Boneh. Openconﬂict: Preventing real time map
hacks in online games. In Security and Privacy (SP),
2011 IEEE Symposium on, pages 506–520. IEEE,
2011.
[8] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and
P. Tague. Oauth demystiﬁed for mobile application
developers. In Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications
Security, pages 892–903. ACM, 2014.
[9] R. A. Cochran and M. K. Reiter. Toward online
veriﬁcation of client behavior in distributed
applications. In NDSS, 2013.
[10] Cocos2d-x. Cocos2d-x. http://www.cocos2d-x.org/.
[11] Dean Takahashi. Mobile games hit 34.8B in 2015.
http://venturebeat.com/2016/02/10/
mobile-games-hit-34-8b-in-2015-taking-85-of-all-app-revenues/.
[12] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna.
Toward automated detection of logic vulnerabilities in
web applications. In USENIX Security Symposium,
pages 143–160, 2010.
[13] FLX App. Cheatdroid. https://play.google.com/store/
apps/details?id=com.felixheller.sharedprefseditor.
[14] GameCIH. Gamecih. www.cih.com.tw/gamecih.html.
[15] GameGuardian. Gameguardian.
http://gameguardian.net/forum/.
[16] GameKiller. Game killer. http://game-killer.com/.
[17] Google Inc. Android ndk. https:
//developer.android.com/tools/sdk/ndk/index.html.
[18] Google Inc. Android sdk.
https://developer.android.com/sdk/index.html.
[19] Google Inc. Hiding leaderboard scores. https:
//developers.google.com/games/services/common/
concepts/leaderboards#hiding leaderboard scores.
[20] Google Inc. Proguard. http:
//developer.android.com/tools/help/proguard.html.
[21] Google Inc. Protobuf.
https://github.com/google/protobuf.
[22] ICSharpCode. Dex2jar. http://ilspy.net/.
[23] Java Decompiler. Jd-gui. http://jd.benow.ca/.
[24] Joshua Brustein. Finland’s new tech power: Game
maker supercell. http://goo.gl/9woZTj.
[25] P. Laurens, R. F. Paige, P. J. Brooke, and H. Chivers.
A novel approach to the detection of cheating in
multiplayer online games. In Engineering Complex
Computer Systems, 2007. 12th IEEE International
Conference on, pages 97–106. IEEE, 2007.
[26] K. Li, S. Ding, D. McCreary, and S. Webb. Analysis of
state exposure control to prevent cheating in online
games. In Proceedings of the 14th international
workshop on Network and operating systems support
for digital audio and video, pages 140–145. ACM, 2004.
[27] Max Lv. Proxydroid.
https://github.com/madeye/proxydroid.
[28] S. Moﬀatt, A. Dua, and W.-c. Feng. Spotcheck: an
eﬃcient defense against information exposure cheats.
In Proceedings of the 10th Annual Workshop on
Network and Systems Support for Games, page 8.
IEEE Press, 2011.
[29] C. M¨onch, G. Grimen, and R. Midtstraum. Protecting
online games against cheating. In Proceedings of 5th
396
ACM SIGCOMM workshop on Network and system
support for games, page 20. ACM, 2006.
[30] C. Mulliner, W. Robertson, and E. Kirda.
Virtualswindle: an automated attack against in-app
billing on android. In Proceedings of the 9th ACM
symposium on Information, computer and
communications security, pages 459–470. ACM, 2014.
[31] SuperData Research. Worldwide digital games market.
https://www.superdataresearch.com/blog/
us-digital-games-market/.
[32] H. Tian, P. J. Brooke, and A.-G. Bosser.
Behaviour-based cheat detection in multiplayer games
with event-b. In Integrated Formal Methods, pages
206–220. Springer, 2012.
[33] Unity3D. Unity3d. https://unity3d.com/.
[34] S. D. Webb and S. Soh. Cheating in networked
computer games: a review. In Proceedings of the 2nd
international conference on Digital interactive media
in entertainment and arts, pages 105–112. ACM, 2007.
[35] Xmodgames. Xmodgames.
http://www.xmodgames.com/.
[36] A. Yahyavi, K. Huguenin, J. Gascon-Samson,
J. Kienzle, and B. Kemme. Watchmen: Scalable
cheat-resistant support for distributed multi-player
online games. In Distributed Computing Systems
(ICDCS), 2013 IEEE 33rd International Conference
on, pages 134–144. IEEE, 2013.
[37] J. Yan and B. Randell. A systematic classiﬁcation of
cheating in online games. In Proceedings of 4th ACM
SIGCOMM workshop on Network and system support
for games, pages 1–9. ACM, 2005.
397