Description: The shortest recorded channel round trip measured in the recording interval, in
microseconds.
Identifier: MQIAMO_NET_TIME_MIN.
Data type: MQCFIN.
Returned: When available.
NetTimeAvg
Description: The average recorded channel round trip measured in the recording interval, in
microseconds.
Identifier: MQIAMO_NET_TIME_AVG.
Data type: MQCFIN.
Returned: When available.
NetTimeMax
Description: The longest recorded channel round trip measured in the recording interval, in
microseconds.
Identifier: MQIAMO_NET_TIME_MAX.
IBM MQ Monitoring and performance 199
Data type: MQCFIN.
Returned: When available.
ExitTimeMin
Description: The shortest recorded time, in microseconds, spent executing a user exit in the
recording interval,
Identifier: MQIAMO_EXIT_TIME_MIN.
Data type: MQCFIN.
Returned: When available.
ExitTimeAvg
Description: The average recorded time, in microseconds, spent executing a user exit in the
recording interval. Measured in microseconds.
Identifier: MQIAMO_EXIT_TIME_AVG.
Data type: MQCFIN.
Returned: When available.
ExitTimeMax
Description: The longest recorded time, in microseconds, spent executing a user exit in the
recording interval. Measured in microseconds.
Identifier: MQIAMO_EXIT_TIME_MAX.
Data type: MQCFIN.
Returned: When available.
FullBatchCount
Description: The number of batches processed by the channel that were sent because the
value of the channel attributes BATCHSZ or BATCHLIM was reached.
Identifier: MQIAMO_FULL_BATCHES.
Data type: MQCFIN.
Returned: When available.
IncmplBatchCount
Description: The number of batches processed by the channel, that were sent without the
value of the channel attribute BATCHSZ being reached.
Identifier: MQIAMO_INCOMPLETE_BATCHES.
Data type: MQCFIN.
Returned: When available.
AverageBatchSize
Description: The average batch size of batches processed by the channel.
Identifier: MQIAMO_AVG_BATCH_SIZE.
Data type: MQCFIN.
Returned: When available.
200 Monitoring and Performance for IBM MQ
PutRetryCount
Description: The number of times in the time interval that a message failed to be put, and
entered a retry loop.
Identifier: MQIAMO_PUT_RETRIES.
Data type: MQCFIN.
Returned: When available.
Reference notes
Use this page to view the notes to which descriptions of the structure of accounting and statistics
messages refer
The following message data descriptions refer to these notes:
• “MQI accounting message data” on page 156
• “Queue accounting message data” on page 167
• “MQI statistics message data” on page 178
• “Queue statistics message data” on page 190
• “Channel statistics message data” on page 196
1.This parameter relates to IBM MQ objects. This parameter is an array of values (MQCFIL or MQCFIL64)
indexed by the following constants:
Table 24. Array indexed by object type
Object type Value context
MQOT_Q (1) Contains the value relating to queue objects.
MQOT_NAMELIST (2) Contains the value relating to namelist objects.
MQOT_PROCESS (3) Contains the value relating to process objects.
MQOT_Q_MGR (5) Contains the value relating to queue manager
objects.
MQOT_CHANNEL (6) Contains the value relating to channel objects.
MQOT_AUTH_INFO (7) Contains the value relating to authentication
information objects.
MQOT_TOPIC (8) Contains the value relating to topic objects.
Note: An array of 13 MQCFIL or MQCFIL64 values are returned but only those listed are meaningful.
2.This parameter relates to IBM MQ messages. This parameter is an array of values (MQCFIL or
MQCFIL64) indexed by the following constants:
Table 25. Array indexed by persistence value
Constant Value
1 Contains the value for nonpersistent messages.
2 Contains the value for persistent messages.
Note: The index for each of these arrays starts at zero, so an index of 1 refers to the second row of the
array. Elements of these arrays not listed in these tables contain no accounting or statistics information.
IBM MQ Monitoring and performance 201
Application activity trace
Application activity trace produces detailed information about the behavior of applications connected to
a queue manager. It traces the behavior of an application and provides a detailed view of the parameters
used by an application as it interacts with IBM MQ resources. It also shows the sequence of MQI calls
issued by an application.
Use Application activity trace when you require more information than is provided by Event monitoring,
Message monitoring, Accounting and statistics messages, and Real-time monitoring.
Note: Activity trace is generated on the IBM MQ connection for each application; so if accounting
messages are enabled the activity trace operations count towards the MQI accounting information for
each application.
IBM MQ supports two methods of collecting application activity trace data.
• Central collection of application activity trace information, where application activity trace
is collected and read by writing activity trace PCF messages to the system queue
SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
• Subscription to activity trace data, written to special IBM MQ system topics.
Note that activity trace is not supported by IBM MQ for z/OS.
As you can now specify application names on most of the programming languages that
IBM MQsupports, refer to Specifying the application name in supported programming languages for more
information.
Configuring central collection of application activity trace information
An application activity trace message is a PCF message. You configure activity trace using a configuration
file. To configure central collection of application activity trace information, you set the ACTVTRC queue
manager attribute. You can override this setting at connection level using MQCONNX options, or at
application stanza level using the activity trace configuration file.
About this task
Activity trace messages are composed of an MQMD structure: a PCF (MQCFH) header structure, followed
by a number of PCF parameters. A sequence of ApplicationTraceData PCF groups follows the PCF
parameters. These PCF groups collect information about the MQI operations that an application performs
while connected to a queue manager. You configure activity trace using a configuration file called
mqat.ini.
To control whether or not application activity trace information is collected, you configure one or more of
the following settings:
1.The ACTVTRC queue manager attribute.
2.The ACTVCONO settings (in the MQCNO structure passed in MQCONNX).
3.The matching stanza for the application in the activity trace configuration file mqat.ini.
The previous sequence is significant. The ACTVTRC attribute is overridden by the ACTVCONO settings,
which are overridden by the settings in the mqat.ini file.
Trace entries are written after each operation has completed, unless otherwise stated. These entries are
first written to the system queue SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE, then written to application
activity trace messages when the application disconnects from the queue manager. For long running
applications, intermediate messages are written if any of the following events occurs:
• The lifetime of the connection reaches a defined timeout value.
• The number of operations reaches a specified number.
• The amount of data collected in memory reaches the maximum message length allowed for the queue.
202 Monitoring and Performance for IBM MQ
You set the timeout value using the ActivityInterval parameter. You set the number of operations
using the ActivityCount parameter. Both parameters are specified in the activity trace configuration
file mqat.ini.
Enabling application activity trace can affect performance. The overhead can be reduced by tuning
the ActivityCount and the ActivityInterval settings. See “Tuning the performance impact of
application activity trace” on page 209.
The simplest way to view the contents of application activity trace messages is to use the “amqsact
sample program” on page 210.
Procedure
1.“Setting ACTVTRC to control collection of activity trace information” on page 203.
2.“Setting MQCONNX options to control collection of activity trace information” on page 203.
3.“Configuring activity trace behavior using mqat.ini” on page 204.
4.“Tuning the performance impact of application activity trace” on page 209.
Setting ACTVTRC to control collection of activity trace information
Use the queue manager attribute ACTVTRC to control the collection of MQI application activity trace
information
About this task
Application activity trace messages are generated only for connections that begin after application activity
trace is enabled. The ACTVTRC parameter can have the following values:
ON
API activity trace collection is enabled
OFF
API activity trace collection is disabled
Note: The ACTVTRC setting can be overridden by the queue manager ACTVCONO parameter. If you set the
ACTVCONO parameter to ENABLED, then the ACTVTRC setting can be overridden for a given connection
using the Options field in the MQCNO structure. See “Setting MQCONNX options to control collection of
activity trace information” on page 203.
Example
To change the value of the ACTVTRC parameter, you use the MQSC command ALTER QMGR. For example,
to enable MQI application activity trace information collection use the following MQSC command:
ALTER QMGR ACTVTRC(ON)
What to do next
The simplest way to view the contents of application activity trace messages is to use the “amqsact
sample program” on page 210.
Enabling application activity trace can affect performance. The overhead can be reduced by tuning
the ActivityCount and the ActivityInterval settings. See “Tuning the performance impact of
application activity trace” on page 209.
Setting MQCONNX options to control collection of activity trace information
If the queue manager attribute ACTVCONO is set to ENABLED, you can use the ConnectOpts parameter
on the MQCONNX call to enable or disable application activity reports on a per connection basis. These
options override the activity trace behavior defined by the queue manager attribute ACTVTRC, and can be
overridden by settings in the activity trace configuration file mqat.ini.
IBM MQ Monitoring and performance 203
Procedure
1.Set the queue manager attribute ACTVCONO to ENABLED.
Note: If an application attempts to modify the accounting behavior of an application using the
ConnectOpts parameter, and the QMGR attribute ACTVCONO is set to DISABLED, then no error is
returned to the application, and activity trace collection is defined by the queue manager attributes or
the activity trace configuration file mqat.ini.
2.Set the ConnectOpts parameter on the MQCONNX call to MQCNO_ACTIVITY_TRACE_ENABLED.
The ConnectOpts parameter on the MQCONNX call can have the following values:
MQCNO_ACTIVITY_TRACE_DISABLED
Activity trace is disabled for the connection.
MQCNO_ACTIVITY_TRACE_ENABLED
Activity trace is enabled for the connection.
Note: If an application selects both MQCNO_ACTIVITY_TRACE_ENABLED and
MQCNO_ACTIVITY_TRACE_DISABLED for MQCONNX, the call fails with a reason code of
MQRC_OPTIONS_ERROR.
3.Check that these activity trace settings are not being overridden by settings in the activity trace
configuration file mqat.ini.
See “Configuring activity trace behavior using mqat.ini” on page 204.
What to do next
The simplest way to view the contents of application activity trace messages is to use the “amqsact
sample program” on page 210.
Enabling application activity trace can affect performance. The overhead can be reduced by tuning
the ActivityCount and the ActivityInterval settings. See “Tuning the performance impact of
application activity trace” on page 209.
Configuring activity trace behavior using mqat.ini
Activity trace behavior is configured using a configuration file called mqat.ini. This file is used to define
the level and frequency of reporting activity trace data. The file also provides a way to define rules to
enable and disable activity trace based on the name of an application.
About this task
On AIX and Linux systems, mqat.ini is located in the queue manager data
directory, which is the same location as the qm.ini file.
On Windows systems, mqat.ini is located in the queue manager data directory
C:\Program Files\IBM\WebSphere MQ\qmgrs\queue_manager_name. Users running applications
to be traced need permission to read this file.
Note: Queue managers migrated from IBM WebSphere MQ 7.1 or earlier will have the mqat.ini file
missing. In such cases, the mqat.ini file needs to be created manually and 660 permissions need to be
set on the file.
When the mqat.ini file is modified, newly created IBM MQ connections will be processed according
to the modified version. Existing connections will continue to use the previous version unless the queue
manager parameters are altered, for example following an ALTER QMGR command.
This file follows the same stanza key and parameter-value pair format as the mqs.ini and qm.ini files.
The file consists of a single stanza, AllActivityTrace, to configure the level and frequency of reporting
activity trace data by default for all activity trace.
204 Monitoring and Performance for IBM MQ
The file can also contain multiple ApplicationTrace stanzas. Each one of these, defines a rule for the trace
behavior for one or more connections, based on matching the application name of the connections to the
rule.
AllActivityTrace stanza
A single AllActivityTrace stanza defines settings for the activity trace that is applied to all IBM MQ
connections, unless overridden.
Individual values in the AllActivityTrace stanza can be overridden by more specific information in an
ApplicationTrace stanza stanza.
If more than one AllActivityTrace stanza is specified then the values in the last stanza is used.
Parameters missing from the chosen AllActivityTrace take default values. Parameters and values from
previous AllActivityTrace stanzas are ignored.
The following parameters can be specified under the AllActivityTrace stanza:
Table 26. Parameter/value pairs that can be used in the activity trace configuration file
Name Values (default in bold type) Description
ActivityInterval 0-99999999 ( 1 ) Approximate time interval in seconds between
trace messages. All activity performed by a
connection in that interval will be written
in a single message. If this value is 0, the
trace message is written when the connection
disconnects (or when the activity count is
reached).
ActivityCount 0-99999999 ( 100 ) Number of MQI or XA operations between
trace messages. If this value is 0, the trace
message is written when the connection
disconnects (or when the activity interval has
elapsed).
TraceLevel LOW / MEDIUM / HIGH Amount of parameter detail traced for
each operation. The description of individual
operations details which parameters are
included for each trace level.
TraceMessageData 0 - 104 857 600 ( maximum Amount of message data traced in bytes
100 MB) for MQGET, MQPUT, MQPUT1, and Callback
operations
StopOnGetTraceMsg ON / OFF Using activity trace, to trace applications that
are also processing activity trace messages,
is not advisable due to possible looping
occurring.
ApplicationTrace stanza
An ApplicationTrace stanza contains a rule which defines which IBM MQ connections will be traced or
not trace based on the application name. Optionally, the default behaviour defined under the Allsettings
which override the global trace level and frequency settings.
This stanza can include ApplName, ApplFunction and ApplClass parameters which are used according to
the matching rules defined in Connection Matching Rules to determine whether the stanza applies to a
particular connection or not.
The stanza must include the Trace parameter to determine if this rule turns activity trace on or off for
matching connections.
An off rule can be used to explicitly disable trace for more specific application names and to override the
ACTVTRC setting of the queue manager or activity trace connection options.
IBM MQ Monitoring and performance 205
The following parameters can be specified under the ApplicationTrace stanza:
Table 27. Parameter/value pairs that can be used in the application trace configuration file
Name Values (default in bold type) Description
Trace ON / OFF (Required parameter Activity trace switch. This switch can be used
- no default value) in the application-specific stanza to determine
whether activity trace is active for the scope
of the current application stanza. Note that
this value overrides ACTVTRC and ACTVCONO
settings for the queue manager.
ApplName Character string (Required This value is used to determine which
parameter - no default) applications the ApplicationTrace stanza
applies to. It is matched to the
ApplName value from the API exit context
structure (which is equivalent to the
MQMD.PutApplName). The content of the
ApplName value varies according to the
application environment.
For platforms other than z/OS, only the
filename portion of the MQAXC.ApplName is
matched to the value in the stanza. Characters
to the left of the rightmost path separator are
ignored when the comparison is made.
For z/OS applications, the entire
MQAXC.ApplName is matched to the value in
the stanza.
A single wildcard character (*) can be used
at the end of the ApplName value to match
any number of characters after that point.
If the ApplName value is set to a single
wildcard character (*) then the ApplName
value matches all applications.
Character string (default value This value is used to qualify which application
* ) programs the ApplicationTrace stanza and
ApplName value applies to.
ApplFunction
The stanza is optional, but is only valid for IBM
i queue managers. A single wildcard character
(*) can be used at the end of the ApplName
value to match any number of characters.
For example, an ApplicationTrace stanza
specifying ApplName = * and ApplFunction
= AMQSPUT0 applies to all invocations of the
AMQSPUT0 program from any job.
ApplClass USER / MCA / ALL The class of application. See the following
table for an explanation of how the AppType
values correspond to IBM MQ connections.
The following table shows how the AppClass values correspond to the APICallerType and
APIEnvironment fields in the connection API exit context structure.
206 Monitoring and Performance for IBM MQ
Table 28. Appclass values and how they correspond to the APICallerType and APIEnvironment fields
APPLCLASS API Caller Type: API Environment: Description
USER MQXACT_EXTERNAL MQXE_OTHER Only user applications are traced
MCA (Any value) MQXE_MCA Clients and channels (amqrmppa)
MQXE_MCA_CLNTCONN
MQXE_MCA_SVRCONN
ALL (Any value) (Any value) All connections are traced
Attention: You must use an APPLCLASS of MCA for client user applications, as a class of USER
does not match these.
For example, to trace the amqsputc sample application, you could use the following code:
ApplicationTrace:
ApplClass=MCA # Application type
# Values: (USER | MCA | INTERNAL | ALL)
# Default: USER
ApplName=amqsputc # Application name (may be wildcarded)
# (matched to app name without path)
# Default: *
Trace=ON # Activity trace switch for application
# Values: ( ON | OFF )
# Default: OFF
ActivityInterval=30 # Time interval between trace messages
# Values: 0-99999999 (0=off)
# Default: 0
ActivityCount=1 # Number of operations between trace msgs
# Values: 0-99999999 (0=off)
# Default: 0
TraceLevel=MEDIUM # Amount of data traced for each operation
# Values: LOW | MEDIUM | HIGH
# Default: MEDIUM
TraceMessageData=1000 # Amount of message data traced
# Values: 0-100000000
# Default: 0
The default mqat.ini generated when a queue manager is created, contains a single rule to explicitly
disable activity trace for the supplied activity trace sample, amqsact.
Connection Matching Rules
The queue manager applies the following rules to determine which stanzas settings to use for a
connection.