### IBM MQ Monitoring and Performance

#### Channel Round Trip Time Metrics

- **NetTimeMin**
  - **Description**: The shortest recorded channel round trip time measured in the recording interval, in microseconds.
  - **Identifier**: `MQIAMO_NET_TIME_MIN`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **NetTimeAvg**
  - **Description**: The average recorded channel round trip time measured in the recording interval, in microseconds.
  - **Identifier**: `MQIAMO_NET_TIME_AVG`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **NetTimeMax**
  - **Description**: The longest recorded channel round trip time measured in the recording interval, in microseconds.
  - **Identifier**: `MQIAMO_NET_TIME_MAX`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

#### User Exit Execution Time Metrics

- **ExitTimeMin**
  - **Description**: The shortest recorded time, in microseconds, spent executing a user exit in the recording interval.
  - **Identifier**: `MQIAMO_EXIT_TIME_MIN`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **ExitTimeAvg**
  - **Description**: The average recorded time, in microseconds, spent executing a user exit in the recording interval.
  - **Identifier**: `MQIAMO_EXIT_TIME_AVG`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **ExitTimeMax**
  - **Description**: The longest recorded time, in microseconds, spent executing a user exit in the recording interval.
  - **Identifier**: `MQIAMO_EXIT_TIME_MAX`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

#### Batch Processing Metrics

- **FullBatchCount**
  - **Description**: The number of batches processed by the channel that were sent because the value of the channel attributes `BATCHSZ` or `BATCHLIM` was reached.
  - **Identifier**: `MQIAMO_FULL_BATCHES`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **IncmplBatchCount**
  - **Description**: The number of batches processed by the channel that were sent without the value of the channel attribute `BATCHSZ` being reached.
  - **Identifier**: `MQIAMO_INCOMPLETE_BATCHES`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **AverageBatchSize**
  - **Description**: The average batch size of batches processed by the channel.
  - **Identifier**: `MQIAMO_AVG_BATCH_SIZE`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

- **PutRetryCount**
  - **Description**: The number of times in the time interval that a message failed to be put and entered a retry loop.
  - **Identifier**: `MQIAMO_PUT_RETRIES`
  - **Data Type**: `MQCFIN`
  - **Returned**: When available.

#### Reference Notes

Use this section to view the notes to which descriptions of the structure of accounting and statistics messages refer. The following message data descriptions refer to these notes:

- "MQI accounting message data" on page 156
- "Queue accounting message data" on page 167
- "MQI statistics message data" on page 178
- "Queue statistics message data" on page 190
- "Channel statistics message data" on page 196

1. **IBM MQ Objects Parameter**:
   - This parameter is an array of values (`MQCFIL` or `MQCFIL64`) indexed by the following constants:
     - **Table 24: Array Indexed by Object Type**
       | Object Type | Value Context |
       |-------------|---------------|
       | `MQOT_Q` (1) | Contains the value relating to queue objects. |
       | `MQOT_NAMELIST` (2) | Contains the value relating to namelist objects. |
       | `MQOT_PROCESS` (3) | Contains the value relating to process objects. |
       | `MQOT_Q_MGR` (5) | Contains the value relating to queue manager objects. |
       | `MQOT_CHANNEL` (6) | Contains the value relating to channel objects. |
       | `MQOT_AUTH_INFO` (7) | Contains the value relating to authentication information objects. |
       | `MQOT_TOPIC` (8) | Contains the value relating to topic objects. |

   **Note**: An array of 13 `MQCFIL` or `MQCFIL64` values are returned, but only those listed are meaningful.

2. **IBM MQ Messages Parameter**:
   - This parameter is an array of values (`MQCFIL` or `MQCFIL64`) indexed by the following constants:
     - **Table 25: Array Indexed by Persistence Value**
       | Constant | Value |
       |----------|-------|
       | 1 | Contains the value for nonpersistent messages. |
       | 2 | Contains the value for persistent messages. |

   **Note**: The index for each of these arrays starts at zero, so an index of 1 refers to the second row of the array. Elements of these arrays not listed in these tables contain no accounting or statistics information.

### Application Activity Trace

Application activity trace provides detailed information about the behavior of applications connected to a queue manager. It traces the behavior of an application and provides a detailed view of the parameters used by an application as it interacts with IBM MQ resources. It also shows the sequence of MQI calls issued by an application.

**Use Case**: Use Application activity trace when you require more information than is provided by Event monitoring, Message monitoring, Accounting and statistics messages, and Real-time monitoring.

**Note**: Activity trace is generated on the IBM MQ connection for each application; if accounting messages are enabled, the activity trace operations count towards the MQI accounting information for each application.

IBM MQ supports two methods of collecting application activity trace data:

- **Central Collection of Application Activity Trace Information**: Activity trace is collected and read by writing activity trace PCF messages to the system queue `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`.
- **Subscription to Activity Trace Data**: Activity trace data is written to special IBM MQ system topics.

**Note**: Activity trace is not supported by IBM MQ for z/OS.

#### Configuring Central Collection of Application Activity Trace Information

An application activity trace message is a PCF message. You configure activity trace using a configuration file. To configure central collection of application activity trace information, you set the `ACTVTRC` queue manager attribute. You can override this setting at the connection level using `MQCONNX` options, or at the application stanza level using the activity trace configuration file `mqat.ini`.

- **Activity Trace Messages**: Composed of an `MQMD` structure, a PCF (`MQCFH`) header structure, followed by a number of PCF parameters. A sequence of `ApplicationTraceData` PCF groups follows the PCF parameters, collecting information about the MQI operations that an application performs while connected to a queue manager.

- **Configuration Settings**:
  1. **ACTVTRC Queue Manager Attribute**.
  2. **ACTVCONO Settings** (in the `MQCNO` structure passed in `MQCONNX`).
  3. **Matching Stanza for the Application in the Activity Trace Configuration File `mqat.ini`**.

**Note**: The `ACTVTRC` attribute is overridden by the `ACTVCONO` settings, which are overridden by the settings in the `mqat.ini` file.

- **Trace Entries**: Written after each operation has completed, unless otherwise stated. These entries are first written to the system queue `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`, then written to application activity trace messages when the application disconnects from the queue manager. For long-running applications, intermediate messages are written if any of the following events occur:
  - The lifetime of the connection reaches a defined timeout value.
  - The number of operations reaches a specified number.
  - The amount of data collected in memory reaches the maximum message length allowed for the queue.

- **Timeout and Operation Count**:
  - **ActivityInterval**: Set the timeout value using the `ActivityInterval` parameter.
  - **ActivityCount**: Set the number of operations using the `ActivityCount` parameter.
  - Both parameters are specified in the activity trace configuration file `mqat.ini`.

**Performance Impact**: Enabling application activity trace can affect performance. The overhead can be reduced by tuning the `ActivityCount` and `ActivityInterval` settings. See “Tuning the performance impact of application activity trace” on page 209.

- **Viewing Trace Messages**: The simplest way to view the contents of application activity trace messages is to use the `amqsact` sample program.

#### Procedure

1. **Setting ACTVTRC to Control Collection of Activity Trace Information**:
   - **About this Task**: Application activity trace messages are generated only for connections that begin after application activity trace is enabled.
   - **Values**:
     - `ON`: API activity trace collection is enabled.
     - `OFF`: API activity trace collection is disabled.
   - **Example**:
     ```plaintext
     ALTER QMGR ACTVTRC(ON)
     ```
   - **Next Steps**: Use the `amqsact` sample program to view the contents of application activity trace messages. Tune the `ActivityCount` and `ActivityInterval` settings to reduce overhead.

2. **Setting MQCONNX Options to Control Collection of Activity Trace Information**:
   - **Procedure**:
     1. Set the queue manager attribute `ACTVCONO` to `ENABLED`.
     2. Set the `ConnectOpts` parameter on the `MQCONNX` call to `MQCNO_ACTIVITY_TRACE_ENABLED`.
     3. Check that these activity trace settings are not being overridden by settings in the activity trace configuration file `mqat.ini`.

   - **Next Steps**: Use the `amqsact` sample program to view the contents of application activity trace messages. Tune the `ActivityCount` and `ActivityInterval` settings to reduce overhead.

3. **Configuring Activity Trace Behavior Using `mqat.ini`**:
   - **About this Task**: Activity trace behavior is configured using a configuration file called `mqat.ini`. This file is used to define the level and frequency of reporting activity trace data and to define rules to enable and disable activity trace based on the name of an application.
   - **Location**:
     - **AIX and Linux**: Located in the queue manager data directory, same location as the `qm.ini` file.
     - **Windows**: Located in the queue manager data directory `C:\Program Files\IBM\WebSphere MQ\qmgrs\queue_manager_name`.
   - **Permissions**: Users running applications to be traced need permission to read this file.
   - **Stanza Key and Parameter-Value Pair Format**:
     - **AllActivityTrace Stanza**: Defines settings for the activity trace that is applied to all IBM MQ connections, unless overridden.
     - **ApplicationTrace Stanza**: Contains a rule which defines which IBM MQ connections will be traced or not traced based on the application name.

   - **Parameters**:
     - **Table 26: Parameter/Value Pairs for AllActivityTrace Stanza**
       | Name | Values (default in bold) | Description |
       |------|-------------------------|-------------|
       | `ActivityInterval` | 0-99999999 (1) | Approximate time interval in seconds between trace messages. |
       | `ActivityCount` | 0-99999999 (100) | Number of MQI or XA operations between trace messages. |
       | `TraceLevel` | LOW / MEDIUM / HIGH | Amount of parameter detail traced for each operation. |
       | `TraceMessageData` | 0 - 104 857 600 (maximum 100 MB) | Amount of message data traced in bytes for `MQGET`, `MQPUT`, `MQPUT1`, and Callback operations. |
       | `StopOnGetTraceMsg` | ON / OFF | Using activity trace to trace applications that are also processing activity trace messages is not advisable due to possible looping. |

     - **Table 27: Parameter/Value Pairs for ApplicationTrace Stanza**
       | Name | Values (default in bold) | Description |
       |------|-------------------------|-------------|
       | `Trace` | ON / OFF (Required parameter - no default) | Activity trace switch. This switch can be used in the application-specific stanza to determine whether activity trace is active for the scope of the current application stanza. |
       | `ApplName` | Character string (Required parameter - no default) | Used to determine which applications the `ApplicationTrace` stanza applies to. Matched to the `ApplName` value from the API exit context structure. |
       | `ApplFunction` | Character string (default value *) | Qualifies which application programs the `ApplicationTrace` stanza and `ApplName` value applies to. |
       | `ApplClass` | USER / MCA / ALL | Class of application. See Table 28 for how the `AppClass` values correspond to the `APICallerType` and `APIEnvironment` fields. |

   - **Connection Matching Rules**:
     - The queue manager applies the following rules to determine which stanzas' settings to use for a connection.