第6章MySQL查询优化|253
---
## Page 276
254丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
换带来的额外代价，为了模拟这个问题，我们使用如下的方式创建表test,分别指定列 name
6.3.2
杂度会更高。
的，如果是更多的表关联，那么这个复
而优化器要选择的就是它认为最合理
壮，而且本身对于多表关联，实现方式
放在前面，MySQL的优化器还不够健
顺序的优化，我们尽可能把小的结果
之前的方式快了许多。
m.inv
DESC,first asc。
为 varchar 和int 类型，来对比查看隐式转换带来的性能问题。
运转起来的时候，原本正常的流程会容易堵塞，其中一个潜在的原因就是因为数据隐式转
联方案就有如图6-9所示的多种方式，
本身会有很多。
在这里需要明确的就是对于表连接
比如表 tl，t2，t3 关联，相关的关
在系统集成和对接的过程中，很多时候我们都会忽略数据类型的兼容性，导致在系统
FROM
 SELECT SQL_NO_CACHE p.*, m.uid, m.username, ..m.email, m.gender, m.showemail,
在 name 列为字符类型时，得到的执行计划列表如下表6-4 所示。
● explain select * from test where id='20';
● explain select * from test where id=20;
然后我们使用如下的两条语句进行执行计划的对比测试。
初始化语句如下：
改造后，执行时间为0.14秒，相比
改造后的语句如下：
这样的话数据量绝对可控，而且符合逻辑
sible...
数据隐式转换
集
DESC,first asc LIMIT 11625， 50
1
图6-9
t3.t2
t3,t2,t1
t3,1,12
t2.t3,t1
t2,t1t3
113.2） cost.
cost=
cost=
cost=.
cost=
---
## Page 277
行全索引扫描，查看 warning 信息会明确提示：
而如果 name 列为 int 类型，
可以很明显地看到，在 name 为字符串类型时，如果 where 条件为 name=20，则走执
Extra:
rows:
possible_keys:
type:
partitions:
table:
key_len:
key:
select_type:
id:
Extra:
filtered:
rows:
ref:
key_len:
key:
possible_keys:
type:
partitions:
table:
select_type:
id:
执行计划列
执行计划列
idx_name
where条件：name=20
Using index
100
const
idx_name
ref
NULL
test
SIMPLE
1warning (0.00 sec)
使用同样的数据和方式，执行计划列表如下表6-5所示。
50
NULL
63
idx_name
idx_name
index
NULL
test
SIMPLE
3warnings(0.00sec)
Using index
Using where;
Where 条件：name=20
表6-5
表6-4
 Using index
const
5
idx_name
idx_name
100
ref
NULL
test
SIMPLE
1warning(0.00 sec)
where条件：
conversion on field 'name
name='20'
where 条件：name='20'
第6章MySQL查询优化|255
Using index
const
idx_name
100
一
idx_name
#
NULL
test
SIMPLE
1
warning (0.00 sec)
---
## Page 278
256丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
和测试进行定位。
了一些改进措施，
稍后DBA介入，发现是由于CPU使用率过高导致，为了能够缓解问题和进一步分析，做
换为字符类型，是不建议的。
是不错的。
我们接下来看一个案例，这个案例带给我们的教训会更加深刻。
对这种场景小结一下：对于数值类型的兼容性，需要尽可能保持一致，如果要反向转
整个调用过程的要点是一个update 操作，where 条件中相关的字段 APNS_PUSH_ID 为 varchar。
#Profile
有一次得到应用同学的反馈，有一个前端应用登录很慢，已经开始影响业务登录了。
通过上面的测试可以看到，两种 where 条件的执行计划是一致的，从效率上来说，都
逻辑类似下面的形式：
相关的表只有一个，表结构如下。
980b351’ COLLATE'utf8_general_ci')\G
#EXPLAIN/*I50100 PARTITIONS*/
涉及的 SQL语句如下，这个也是当时从慢日志中得到的。
两个查询的统计信息如下，平均执行时间竟然都在 40s 左右。
Rank Query ID
查看慢日志的概览情况如下。
select
问题查看
案例6-3：一条update语句引发的“血案”
NAME_CONST(i_
)ENGINE=InnoDB AUTO_INCREMENT=2181938 DEFAULT CHARSET=utf8
2 0x6D5C3CEFC40B5E28 7518.4182 43.5%
10x26EEFEA86049462C7667.373344.3%
Create Table: CREATE TABLE “push_list_s
APNS_PUSH_ID =ID'from push_list_s whereAPNS_PUSH_ID
KEY “INDEX_CABLE_PUSH_ID’('CABLE_PUSH_ID')
UNIQUE KEYAPNS_PUSH_ID’（APNS_PUSH_ID’)
“(.IIISIT NS.) IIISIT NS XEINI. AEY EOOINN
PRIMARY KEY（ID'）,
APNS_PUSH_ID’ varchar(64) CHARACTER SET latin1 NOT NULL DEFAULT ***,
SN_LIST_ID’ int (10) NOT NULL DEFAULT '0”,
ID’int (10) NOT NULL AUTO_INCREMENT,
，问题得以临时解决，但是对于问题的深层次原因也是后续经过不断对比
apnsPushId',_utf8eb43f3f09940de7228a780f69d05eab0a9df98083c701e23d11c7494a
Response time
 =
18940.5681
18939.7800
Calls R/CallV/M
6.10 UPDATE push_list_s
Item
---
## Page 279
下面的存储过程来复现和对比。
该已经得到修复。
主要是和字符集转换有关，
关注点都在NAME_CONST这个部分，
者存在很巨大的差别。
引存在巨大的差别。而从后来我单独得到的执行计划和后来复现情况来看，也没有发现二
没有问题的。
（3）在5.1版本中发现了相应的 bug 描述，但是目前的环境是5.6 版本，所以问题应
（2）对于从慢日志中得到的语句，
测试前，要保证 Handler 是初始化状态，如下：
我找了一套环境尝试复现这个问题，我把表里的数据复制到一个测试环境，然后写了
我希望得到一些确切的信息,能够复现,能够找到一些相关的 bug 或者相关的解决方案。
（1）用字符型字段作为索引，目前来看没有很直接的证据表明字符型索引和数字型索
对于这个问题的疑问如下：
这样一个 update 语句竟然很慢，着实感到很奇怪，因为单独执行，查看执行计划是
=push_id;
问题的对比测试
delimiter
(root:localhost:Tue May 3 08:46:45 2016)[test]>show session status like *%handler%";
end
3rows in set (0.00 sec)
Handler_read_rnd_next
Handler_read_rnd
Handler_discover
Handler_delete
Handler_commit
Variable_name
ENDIF:
，但是单独执行上面的转换语句，查看执行计划没有任何问题。
UPDATE push_list_s SET APNS_PUSH_ID = 'ID’ WHERE APNS_PUSH_ID 
，在查看了一些资料之后，发现在其他版本和环境中，
14
可以看到内部已经做了转换。
Value
，而对于这种转换，可能
第6章MySQL查询优化丨257
---
## Page 280
258丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
18 rows in set (0.00 sec)
Handler_rollback
Handler_read_rnd_next
Handler_external_lock
Handler_discover
Handler_delete
Handler_commit
Variable_name
(root:localhost:Tue May
再来查看 Handler 的情况，发现 Handler_read_rnd_next 为O，很显然是一个索引扫描。
而如果单独执行同样的 SQL 语句，如下。
Handler_read_rnd
Handler_read_prev
Handler_external_lock
Handler_discover
Handler_delete
Handler_commit
Variable_name
(root:localhost:Tue May 3 08:52:17 2016)[test]>show session status like *%handler%
Handler_read_next
查看 Handler 的状态，可以看到 Handler_read_next 的值极高,其实这是一个全表扫描。
Query OK, 1 row affected (o.01 sec)
然后运行存储过程，其实这个过程就是当时问题发生时的一个调用环节。
Rows matched:1
>UPDATE push_list_s SET APNS_PUSH_ID = 'ID’ WHERE APNS_PUSH_ID =
Changed:1
Warnings:0
1714495
1
|Value
0
|Value
---
## Page 281
做匹配，这也就无形中导致了全表扫描，如下。
list_s""APNS_PUSH_ID'using utf8)这个操作是把全表的 APNS_PUSH_ID 先做转换和 push_id
utf8) = push_id@0)~
(opusnd=（8
push_id@o)",
COLLATE 'utf8_general_ci')
NAME_CONST(' push_id', _utf8 6f8540d3a35a1bf47adbbdc8eae8ed4c91f5b882637ad4acc3daed51e6f1649*
APNS_PUSH_ID =‘ID’WHERE APNS_PUSH_ID =
>select *from information_schema.optimizer_trace\G
在 trace 中可以看到内部做了字符集的转换,而转换的过程其实可以理解为 convertC push
我们可以打开 trace，MySQL 5.6版本以后有一个特性，可以试试。
如果查看单独update 语句的执行计划，是看不到太多的明细信息的，如下。
1 row in set (0.00 sec)
id| select_type| table
>explain UPDATE push_list_s SET APNS_PUSH_ID =‘ID’WHERE APNS_PUSH_ID =
"steps":[
ref
1|SIMPLE
"condition_processing":
|rows |Extra
"condition":"wHERE”,
1 |Using where
"original_condition”: “(convert( push lists’.'APNS PUSH ID using utf8) =
"resulting_condition:(convert(push_list_s.APNS_PUSH ID using
"transformation":"constant_propagation",
"resulting_condition:(convert(push_list_s’.APNS_PUSH_IDusing
| push_list_s | range | APNS_PUSH_ID | APNS_PUSH_ID | 66
type
possible_keys | key
QUERY:UPDATE push_list_s SET
TRACE:
第6章MySQL查询优化|259
---
## Page 282
260丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
可以看到解析的时候是在做键值的匹配，如下。
执行单个语句，查看 trace 的情况。
Query OK, 0 rows affected (o.O0 sec)
>flush status;
utf8)=push_id@o）
Query OK,0 rows affected (o.00 sec)
'9e9abc28fef dce2dad4186d49990033calac10580839d33e7f6f681bbd1152d8*
>UPDATE push_list_s SET APNS_PUSH_ID = ‘ID’ WHERE APNS_PUSH_ID =
equal(9e9abc28fefdce2dad
range_analysis":
cost:326472
"resulting_condition:(convert(push_list_s.APNS_PUSH_IDusing
transformation:trivial_condition_removal,
"transformation":equality_propagation”,
d99033ca1ac105889d3f6f681bd1152d，
WHERE
ition:
TRACE:
---
## Page 283