目面言，争取达到85%～90%的覆盖率，通常，要提升剩下的
10%~15%覆盖率实在不容易。在某些情况下，有可能性，但
所付出的代价恐怕不值得。
对每一个项目，你应该决定覆盖率的目标，甚至有时是对每一
个类确定覆盖率的目标。当你刚开始时，可以确定一定的百分
比，如80%，首先使用你的测试，然后眼踪所发现的错误的数
量，再发布你的代码。在你发布你的代码之后，陆续发现错
误。如果你发现出来的错误超过容许的范围，则再增加5%左
右的覆盖率。
再次跟踪你的错误的数量。通过测试发现的错误的数量与软
件发布后发现的错误的数量的比例是多少？在某些时点上，
你将看到增加测试覆盖的比例会耗费很多时间，但通过测试
所发现错误数量的增加并不多。当你碰到那一点时，稍微退
后一点，你就知道找到了好的平衡点。
没有患囊的问题
问：
覆盖工具是如何运作的？
问：
我们应该对我们的项目做测
那最后不是要得到很多测试
答：
试覆盖率分析，但现在、测试覆盖率
基本上，盘五工具的选作有几乎接近零。我们要如何开始？
代码吗？
三个步骤
答：
答：
绝对是的。如果你真地要做
1.在编译期间，覆盖工具可以检查代
先从小范固开始。把度盖率
一个良好的测试，测试代码与产品代
码
的目标设定为10%。然后，当你选到
码的比例大约为2比1或3比1，但早期
2.在编译之后，覆盖工具也可以检查
时，皮礼一下，然后增加到15%，在
发现错误选比让你的客户发现它们好
代码，或
此之前。如累你没有对项目做过自动
多了，另外，这也说明有更多的代码
测试，你可能会发现系统中的某些部
需要去维护，但如果你的环境已准备
3.覆盖工具可以运行在定制的环境之
分是很难做测试自动化的。在第八章
好，额外的代码与付出的努力一般是
(JVM)
中，我们再做详细的讲解。尽你自己
等值的，使客户越满意，就有越多的
所能一
有测试一定比没有测试要好。
生惠，就越会财源广进。
266
第7章
---
## Page 303
测试和连续集成
达到良好的测试覆盖率并不容易.·
既然我们现在已经理解了软件测试覆盖率，让我们回过
头看看BeatBoxPro。既然我们知道去查询什么，还有些
类型的事情没有被测试：
这置是MsicSn，我们实际上还没有
对它进行测试。由于它没有涉及u3。
这可能并不难以自动化。然而，我们
必须处理的有务网络有英的事情，因
此，那也要花一些时用。
这费是我们客户端
Bearox应用程序，我
们已经编写了一些代
研苦测试这整摇收端。
我们湿有任何GU 5测试代
…那正是我们在给客户
我们还做任何声音方要的测
试。像多MJD5
做lemo时酒挥的那个错误。
容易测试的东西
有些东西天生难以测试。GUI实际上不是不可能去微测试的：已经有些工具能
模拟按钮单击和键盘输入。不过，像音频的或3D图像之类的东西就有点难。答
案呢？用真人去实践。软件测试不能覆盖生动的游戏或在音乐程序中音频的所
有变形。
那么，哪些是你似乎不能进行测试的代码？专用的方法、第三方的程序库，或
可能是从主接口模块的输入和输出部分抽取的代码？好的，在第8章中，我们花
儿页的篇幅讲一讲这方面的问题。
然后，进入测试驱动的开发（Test-driven development）。
目前位置
267
---
## Page 304
100%的覆盖率有效吗？
准备练习
勾选出要达到良好测试覆盖率需要做的全部事
情。
测试成功案例（“快乐路径”），
测试失败案例。
如果系统使用数据库，规划已知的输入数据，以便你测试不同的后
台问题。
阅读你正在测试的代码。
审阅用户需求和使用情节，看看系统是否按照预期的要求执行功能。
测试外部失败条件，像网络断线或人们关掉浏览器。
测试像SQL攻击或跨网站脚本攻击（XSS）
模拟磁盘空间满的状况。
模拟负载大的情况。
使用不同的操作系统、平台和浏览器。
若案见272页
268
第7章
---
## Page 305
测试和连续集成
碰头会议
Laura：我真地希望在我们向客户微演示之前，了解所有事情的进展情
况
Bob：是啊，那样我就能对我编写的代码进行测试，并且知道在我开展工
作时，可能会搞坏其他的使用情节。没错，要向完全测试覆盖率前进
Mark：咳，我不确定完全覆盖是否合理。你们没有听说80/20规期吗？为
什么要把全部的财间花费在可能根本不会运行的代码上？
Bob：无论如何，我正在朝100%的测试覆盖率努力。我想只要再花几天
时间编写测试程序，就能够达成。
Mark：几天时间？我们没有时间了：你不是还有很多GUI的代码需要去
编写吗？
Laura：我同意。但我不能肯定我们能否达到80%的覆盖率：有很多复杂
的代码深理在GUI中，并且我不能确定怎样编写测试程序去测试这些代
码。
Mark：嗯吧…，50%怎样？我们可以从50%开始，然后增加我们没有测
试的那些部分。测试覆盖报告将会告诉我们哪些代码我们还没有做测试，
对吗？
Bob：是啊，我们可以检查一下哪些方法我们不能调用。如果我们选中
每一个方法，然后对大量使用的代码做边缘测试，那不是太好了
Laura：听起来确实是一个好计划…你只要提交一些代码，对吗？一旦
CruiseControl完成其构建，我将马上检查测试覆盖报告。
目前位置
269
---
## Page 306
测试环境
信环境
境在做什么
让你创建存储目录，把你的代码保存在安全的地方。
让更多的人提交代码的副本，使他们像一个团队一样有效地工作。
让更多的人把修改提交到存储目录，并且把它们分发给团队中的其
他成员。
跟踪谁修改了什么？何时微的修改？为什么要做修改？
为程序微逻辑分支和标记代码，以便我们回顾参照及修改某个时点
的代码。
把原本不该发生的代码倒回来。
确定你的代码被编译过。
测试你的代码。
告诉我们测试的情况。
通过持经集成工具，你践在可试把
运登事情的入到你的环境之中。
版本控制工具不能做什么
了
中
确定你编译过代码
中
副试品序
口
为你思考。
口
确定你的代码具有可读性和撰写良好。
270
第7章
---
## Page 307
测试和连续集成
测试填字游戏
花点时间轻松一下，测试测试你的右脑。
横排提示
竖排提示
5. The practioe of automaticall building and testing your code
1. Just slightly outside the valid range, this case can be bad
on each commit.
7. This should failif a test doesnt pass.
2. All of your functional testing ties back to these.
news.
8. Instead of running your tests by hand, use ..
3.PeekingnertheoversIfeoumitcheckout sm
10. Coverage tells you how much 
. youre atually
DB tables when you use this kind of testing.
testing.
4. 85% of this and you're doing ok.
11.When white box testing you want to exercise each of
6. Continuous integration watches this to know when things
these.
7. Test the system like a user and forget how it works inside.
change.
12. Ability to be climbed - or support a lot of users.
13. 3 lines of this to 1 line of production isnt crazy.
9. You're done when all your ..
目前位置
271
---
## Page 308
练习答案
备练习
答案
勾选出要达到良好测试覆盖率要做的全部事情。
测试成功案例（“快乐路径”）
V
测试失败案例。
V
如果系统使用数据库，规划已知的输入数据，以便你测试不同的后
台间题。
V
阅读你正在测试的代码。
V
审阅用户需求和使用情节，看看系统是否按照预期的要求执行功能。
V
测试外部失败条件，像网络断线或人们关掉浏览器。
V
测试像SQL攻击或跨网站脚本攻击（XSS）
模拟磁盘空间满的状况。
V
模拟负载大的情况。
V
使用不同的操作系统、平台和浏览器。
*根揭你的应用程序的不同，所率这些对达到家好
测试都是至并重需的，但是，如集你正在使用款件
到试屋盖率工兵，你使可以知运你可组漏牌系统
的邮都分测试。
272
第7章
---
## Page 309
测试和连续集成
测试填字游戏答案
U
C
CONTINU
0
V
S
NTE
R
z
B
ARYOAS
0
M
A
N
X
ODE
K
RA
NCHE
0
E
4
T
Y
X
S
TE
TCODE
目前位置
273
---
## Page 310
软件开发工具箱
软件开发工具箱
软件开发的宗旨就是要开发和交付伟大的软件，在本章中、
第
你学到了几种使开发工作保持在正轨上的几项技术。本书的
完整的工具清单，见附录i。
本章要点
开发技术
使用连续集成工具意味着
你的系统有不同的视角，你
这置是本章学习到
有某个工具始终监视着存
必须全部测试到。
储目录中代码的质量。
测试必须说明成功和失败的
■自动化的测试很有吸引
原因。
力。你还是要编写代码，
尽可能让测试自动化。
因此，趣味还在。有时你
那些技术骨后的
会把事情弄坏，但仍然有
使用持续集成工具使构建和
一业原则
趣。
测试你的代码自动化。
确认持续集成构建的结果
开发原则
和覆盖率报告对整个团
队公开
—团队拥有该项
测试是让你时刻掌握项目状
日，也应对该项目负有责
况的工具。
任。
持续集成给你信心，确保在
如果白动化的测试失败，
你的存储目录中正确存放.
持续集成工具也随之失
并且正确构建。
败。接着，把相关信息电
邮给提交人，直到错误得
代码覆盖率与测试数量相比
到修复。
是对测试有效性的一个较好
测试软件系统的整体功能
的度量。
性对宣告项日能有效的运
作是至关重要的。
274
第7章
---
## Page 311
8测试驱动开发
?
让代码负起责任
好的：John一&下是我对你的期望：
如票某个人忘记了他的密码，他就不能进入
系统。从来听提过的家伙呢？他他不能进入
系统
有时候，完全取决于你的预期。人人都知道，再好的代码必须能运行。但你如何知
道你的代码能运行呢？即使是单元测试（UnitTest），也有大多数代码的某些部分
没有被测试到。但如果测试的是软件开发的基础性部分，会怎样呢？如果你做每件
事都件随着测试，又会怎样呢？在本章中，我们将用你所学到的版本控制、CI和自
动测试方面的知识，并将这些绑定在一起放在一个环境中，在这个环境中，你能有
信心修复错误（Fixing bugs）、进行重构（Refactoring），甚至重新实施部分系统。
进入新的篇章
275
---
## Page 312
先测试，后编码
测试在先
而不是在后