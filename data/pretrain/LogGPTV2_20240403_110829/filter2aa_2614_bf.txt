API安全设计相关资料，如表10-3所示。
表10-3 大型互联网应用API安全设计参考样例
■ 企业或组织公开的API安全设计文档：主要是互联网企业或安全
组织公开的API安全最佳实践文档，如表10-4所示。
表10-4 API安全设计参考文档
10.5 SDL之API安全实现
安全实现在SDL中更多的是指编码开发，是根据安全设计阶段的产
物，选择相应的编程语言，完成API编码实现过程。
10.5.1 如何开展API安全实现
编码开发的相关技术，虽不属于本书重点关注的内容，但在安全实
现层面，仍需要结合所选择的编程语言，考虑其安全编码过程。一般来
说，安全实现的过程通常会分为以下三个步骤。
■ 安全编码培训：是指专门针对某种编程语言所易发的安全缺陷或
高危函数所做的编码赋能培训，也可以作为安全培训活动中的一门课程
来实施。
■ 
安全编码：是指编码开发人员根据安全编码规范开展编码的过
程。
■ 静态检测：是指对编码人员所提交的代码进行静态代码检测，以
发现编码过程中的安全缺陷，并迭代改进的过程。
这三个步骤中，安全编码培训的开展可以参考130.2节的安全培训
来进行，只需要将课程内容换成编码实践的内容即可，而其他的两个步
骤则是全新的内容。
1.安全编码培训
安全编码培训的内容通常依赖于开发应用程序或API所使用的编程
语言，如果是Java语言，Spring Security官方文档是一个优质的资源，可
以根据实际需要，将其中相关的章节摘抄出来，作为培训的案例。除此
之外，各个企业内部的安全编码规范也是一个很好的培训资料。另一方
面，在前文中也有所提及，每一个企业或团队，历史安全缺陷记录都是
很好的参考资料，将排名靠前的安全编码案例进行分析、分享是安全编
码培训很好的培训方案。案例分析时，可以参考本书第3章内容的案例
结构，对造成API漏洞的原因做详细剖析，以加深编码人员对漏洞原理
的理解。
2.安全编码
很多企业或团队内部都有自己的编码规范或安全编码规范，但往往
仅仅是规范文本，很难以在实施工作中执行，这样的安全编码规范实际
上没什么用。一个好的安全编码规范实践其实是遵循PDCA循环的，除
了编写规范文本并定期修订外，在编码过程中也要采用工具进行编码规
则的检测，比如阿里的代码规则检测工具P3C、SonarQube的安全插
件。通过编码规范检测或静态检测，将编码规范纳入日常编码的活动中
进行闭环，才是安全编码规范真正要起到的作用。
3.静态检测
静态检测是安全编码中很重要的一环，尤其是在编码开发人员安全
编码能力不足的情况下，静态检测从事后验证的视角，有效地保障编码
实现的安全性。静态检测通常根据开发语言的不同会选择不同的工具，
或者说，同一种静态检测工具，因开发语言的不同，检测效果会有比
较大的差异。所以企业在采购静态检测工具时，需要结合企业使用的开
发语言，选择合适的代码静态检测工具。
一般来说，选择代码静态检测工具时，主要的参考指标如下。
■ 
支持的开发语言：虽然很多检测工具都宣称能扫描多种开发语
言，但所支持的开发语言检测的效果到底怎么样，这需要企业自己去做
横向比较。
■ 
漏报率：通常使用含有已知漏洞的应用程序，比如WebGoat、
DVWA之类的漏洞学习平台，来验证静态检测工具的漏报率。比如已知
漏洞是1300个，实际扫描后只发现了75个，则漏报率为25%。
■ 误报率：是指在发现的漏洞中，不是漏洞而误报为漏洞的比例。
比如报告出漏洞是100个，实际验证后发现了25个不是漏洞，则误报率
为25%。
■ 运行环境与配置：是指静态检测工具运行的操作系统环境、机器
配置、内存等，有的静态检测工具只允许运行在Windows环境下，有的
静态检测工具则在Windows、Linux、UNIX下均可以；有的可以；与
CI/CD集成，有的则不可以，这是在工具安装时需要考虑的。
■ 
报告格式：是指检测结果所提供的展现形式，一般有HTML、
Word、PDF、Excel格式等。
■ 报告内容：是指是否支持根据不同的漏洞等级或检测规则导出不
同的报告结果数据。
■ 性价比或购买方式：是指付款和使用方式，比如同样的费用下使
用期限是多久、维保多久、是否支持API调用、是否可以支持同时多个
用户并发等。
从目前的静态检测实践来看，大多数企业在使用两种或两种以上的
静态检测工具做交叉检测，以减低漏报率。
10.5.2 API安全实现相关工具
在API安全实现方面，推荐的工具与Web安全所使用的工具并无差
异，主要有以下几种。
■ 
文档类：主要为不同语言的安全编码规范或实践，如表10-5所
示。
表10-5 安全编码规范参考指引
■ 软件类：主要为静态检测工具，如表10-6所示。
表10-6 主流静态检测工具
（续）
无论是文档类工具还是软件类工具，使用它们的目的都是为了保障
研发人员实现的API符合安全要求。文档类工具从编码的角度，在编码
之前，指导研发人员如何编写出安全的代码，软件类工具从代码检测的
角度，在编码之后，验证研发人员编写的代码是否按照要求去实现。对
安全管理人员来说，文档类工具易于输出，但不利于落地，需要借助于
软件类工具做事后的检测，来保障安全措施的闭环。而软件类工具因适
用的语言不同、研发人员编码习惯的不同，在实际使用中，往往需要结
合实际情况进行参数调优，选择投入产出比最佳的方案。比如，为了减
少代码检测的误报率，选择只报告高危的漏洞。这样安全人员在对检测
报告做二次确认时，节约了误报率高带来的误报筛选的成本。比如，为
了适应编程语言，在C语言开发的应用程序代码检测时，选择报告的检
测模板为SANS Top 25，在Java Web开发的应用程序代码检测时，选择
OWASP Top 10，通过有针对性的方案，提高正确率。
10.6 SDL之API安全验证
安全验证是对SDL流程中安全需求、安全设计、安全实现环节的验
证，通过管理手段和技术手段来评估安全实现的正确性，保证安全设计
与安全实现的一致性。
10.6.1 如何开展API安全验证
在安全验证环节，通常采用动态检测、模糊测试、攻击面评估来综
合评价已完成开发功能的安全性。在本书的第4章和第5章中已详细介绍
了API安全工具及渗透测试过程，这其中包含了很多安全验证活动中所
使用的工具。
工具验证是整个安全验证中占比最大的一部分，除此之外，还应考
虑SDL过程保证和个人隐私合规类的安全验证。其内容如下。
■ SDL过程保证：是指通过管理手段，检查SDL在安全验证之前的
各个活动的实施情况，是否已按照标准要求执行。安全验证作为整个流
程中的一个关键检查点，保证前期安全活动执行的完成。
■ 个人隐私合规类：个人隐私合规涉及的内容除了技术部分，还有
很多内容依赖于人工或非安全人员（比如法务人员）的参与，才能保证
其实施的正确性。在国内，国家互联网信息办公室、工业和信息化部、
公安部、市场监管总局联合制定的《App违法违规收集使用个人信息行
为认定方法》中涉及的诸多条款，需要在安全验证环节做最终的安全评
估，以保障最终实现的正确性。同样，如果产品在欧盟区销售，则
GDPR中涉及的很多内容也需要人工参与做详细的验证，光靠工具是无
法验证的。
开展安全验证的目的是为了防止在安全实现活动中，偏离了安全需
求和安全设计，通过验证手段来发现问题，推动偏离的问题进行整改，
以保证编码实现回到期望的轨道上来。
在API安全中，个人隐私合规需要重点关注接口调用中调用者身份
的确认，个人隐私在第三方使用过程中的权责传递与合同约定，防止接
口数据的滥用，控制数据的使用和传播范围。
10.6.2 API安全验证相关工具
在API安全验证方面，业界可使用工具比较多，除了第4章重点介绍
的工具外，还有部分工具如表10-7所示。
表10-7 部分API安全验证工具
API安全验证相关的工具经常在测试阶段或渗透测试阶段被使用，
来验证API安全实现的正确性。它们之间通常混合、交叉使用，互相取
长补短，以保障验证工作尽可能做到全面。比如FuzzDB，其收集的攻
击向量可以提供XSS、Xpath注入、SQL注入、XXE等漏洞的验证，方
便专业技术人员在OWASP 
ZAP或Burp 
Suite中集成使用。同时，
FuzzDB所包含的大量的攻击向量数据库，可以在API开发生命周期中，
作为一个全量的攻击用例参考，弥补专业技术人员能力不足时带来的偏
差。利用FuzzDB，通过对低阶专业技术人员进行简单的培训和赋能实
践，即可以达到验证能力中等水位线的基准要求。
10.7 小结
在这一章中，从SDL的角度为读者介绍了API安全与SDL的关系。
从本章内容读者也可以看出，在整个SDL的关键安全活动中，API安全
通常是作为SDL日常运营的一个子集在运转着，并非独立出来的。同
时，从SDL关键安全活动的开展过程来看，其整体流程比较系统化，通
常需要结合企业内部各个组织之间的运作模型，将安全流程融入业务模
型中来推进SDL的工作。这样的方式，与当前互联网环境下快速试错、
快速交付、小步迭代的文化是相冲突的，因此，需要一种更轻便、更工
具化、流水线化的安全管理模式来满足业务对安全的诉求，同时减少安
全工作对业务交付的影响，这将是下一章介绍的DevSecOps的重点内
容。
通过本章对各个安全活动的介绍，希望读者在理解SDL含义的基础
上，能了解各个关键安全活动包含的内容，为下一章DevSecOps的深入
理解打下基础。
第11章 API安全与DevSecOps
上一章介绍了SDL的整体活动流程，通过对SDL内容的了解发现其
系统化的安全管理过程过于笨重，难以匹配互联网业务快速发展的需
要，为了解决此问题，业界将DevOps和安全进行融合，提出了
DevSecOps的概念，将开发、运营、质量和安全四类角色职责糅合，围
绕安全文化打造更具有协作性、更高效的运作模型。
11.1 DevSecOps简介
与SDL模型相比，DevSecOps出现时间更晚一些，又被称为
DevOpsSec、SecOps或DevSec等。DevSecOps来源于DevOps，是基于
DevOps之上构建安全能力。
11.1.1 DevSecOps的基本概念
在软件企业中，通常包含几个不同的团队，分别负责产品的客户需
求与市场推广、产品的设计与开发、产品的运维和客户服务。这几个团
队之间相互协作，以软件产品生命周期管理的形式，完成解决方案的交