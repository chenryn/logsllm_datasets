```
$ docker network rm br0
```
# 请参见
更多信息参见 Docker 网站上的文档:[https://docs.docker.com/network/](https://docs.docker.com/network/)。
# 更改默认 OCI 运行时
Docker 守护程序依赖于 OCI 兼容的运行时来与 Linux 内核接口。默认情况下，Docker 使用 runC，但是如果需要，您可以将它切换到任何符合 OCI 的运行时。在本食谱中，我们将向您展示如何将运行时更改为另一个符合 OCI 标准的运行时，即英特尔 Clear Containers。
# 准备好
在 Ubuntu 16.04.5 系统上安装 Docker，如果你还没有这样做的话。
使用以下命令安装英特尔透明容器 3.0 组件:
```
$ sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/clearcontainers:/clear-containers-3/xUbuntu_$(lsb_release -rs)/ /' >> /etc/apt/sources.list.d/clear-containers.list"
$ wget -qO - http://download.opensuse.org/repositories/home:/clearcontainers:/clear-containers-3/xUbuntu_$(lsb_release -rs)/Release.key | sudo apt-key add -
$ sudo -E apt-get update
$ sudo -E apt-get -y install cc-runtime cc-proxy cc-shim
```
英特尔透明容器不会在每台机器上运行–它只会在启用了 KVM 的机器上运行，这意味着如果您在 VirtualBox 内部使用虚拟机，它将无法工作。在运行此配方之前，请务必检查系统要求，以确保您的机器兼容:[https://github.com/clearcontainers/runtime](https://github.com/clearcontainers/runtime)。您还可以运行以下命令，该命令将检查您的系统，并让您知道您的系统是否能够运行它:
```
$ cc-runtime cc-check
```
# 怎么做...
请遵循以下步骤:
1.  更改 Docker 守护程序配置(`/etc/docker/daemon.json`)，以使清除容器成为默认运行时:
```
    {
      "default-runtime": "cc-runtime",
      "runtimes": {
        "cc-runtime": {
          "path": "/usr/bin/cc-runtime"
       }
      }
    }
```
2.重新加载 Docker 守护程序并重新启动它:
```
 $ systemctl daemon-reload
 $ systemctl restart docker
```
3.使用英特尔透明容器启动容器:
```
 $ docker container run -it busybox sh
```
# 它是如何工作的...
Docker 使用`runC`访问命名空间和 CGroups 等内核特性来运行容器。我们将`runC`换成了另一个符合 OCI 标准的运行时，叫做英特尔透明容器。
# 请参见
更多信息请参见 Docker 网站上的文档，网址为:[https://docs . Docker . com/engine/reference/command line/Docker/# Docker-runtime-execution-options](https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options)。
# 为容器选择日志驱动程序
Docker 允许您在启动 Docker 守护程序时选择日志驱动程序。随着 Docker 18.03 的发布，支持十一种类型的日志驱动程序:
| **驾驶员** | **描述** |
| 没有人 | 容器没有可用的日志，`docker container logs`不返回任何输出。 |
| `json-file`(默认) | 日志被格式化为 JSON。 |
| `syslog` | 将日志消息写入主机上的`syslog`守护程序。 |
| `journald` | 将日志消息写入主机上的`journald`守护程序。 |
| `gelf` | 将日志消息写入一个**灰色日志扩展日志格式** ( **GELF** )端点，如灰色日志或日志存储。 |
| `fluentd` | 将日志消息写入主机上的`fluentd`守护程序。 |
| `awslogs` | 将日志消息写入亚马逊云观察日志。 |
| `splunk` | 使用 HTTP 事件收集器将日志消息写入`splunk`。 |
| `etwlogs` | 将日志消息作为**事件跟踪写入窗口** ( **ETW** )事件(仅限窗口)。 |
| `gcplogs` | 将日志消息写入**谷歌云平台** ( **GCP** )日志。 |
| `logentries` | 将日志消息写入 Rapid7 日志条目。 |
# 准备好
在系统上安装 Docker，如果你还没有这样做的话。
# 怎么做
请遵循以下步骤:
1.  使用所需的日志驱动程序启动 Docker 守护程序，如下所示:
```
 $ dockerd --log-driver=none
 $ dockerd --log-driver=syslog
```
您也可以在 Docker 配置文件(`/etc/docker/daemon.json`)中添加此选项:
```
    {
      "log-driver": "json-file",
      "log-opts": {
        "labels": "production_status",
        "env": "os,customer"
      }
    }
```
2.  如果您想启动一个使用不同于系统默认日志驱动程序的容器，您可以使用`--log-driver`选项:
```
 $ docker container run -it --log-driver syslog alpine ash
```
# 它是如何工作的...
根据日志驱动程序配置，Docker 守护程序选择相应的日志驱动程序。
# 还有更多...
`docker logs`命令仅适用于以下两个驾驶员:`json-file`和`journald`。
# 请参见
更多信息请参见 Docker 网站上的文档，网址为:[https://docs . Docker . com/config/containers/logging/configure/](https://docs.docker.com/config/containers/logging/configure/)。
# 获取容器的实时 Docker 事件
由于我们将在生产中运行许多容器，如果我们能够出于监控和调试的目的观察实时容器事件，将会很有帮助。Docker 容器可以报告诸如`create`、`destroy`、`die`、`export`、`kill`、`oom`、`pause`、`restart`、`start`、`stop`和`unpause`等事件。在这个食谱中，我们将看到如何启用事件日志，然后使用过滤器来选择特定的事件类型、映像和容器。
# 准备好...
确保 Docker 守护程序正在主机上运行，并且您可以通过 Docker 客户端进行连接。
# 怎么做...
请遵循以下步骤:
1.  使用以下命令启动 Docker 事件记录:
```
 $ docker events
```
2.  在另一个终端上，执行一些与容器/映像相关的操作，您将在第一个终端上看到类似于下面截图的结果:
![](img/5c9f944d-f34a-46e6-b7b4-5e16e6dab59e.png)
事件收集开始后，我创建了一个容器，只需向控制台写入一条消息。从前面的截图中我们可以看到，一个容器被创建、启动和死亡。
# 它是如何工作的...
通过 Docker 事件，Docker 开始列出事件。
# 还有更多...
您可以对 Docker 事件使用`--since`或`--until`选项来缩小所选时间戳的结果范围:
```
 --since=""         Show all events created since timestamp
 --until=""         Stream events until this timestamp
```
考虑以下示例:
```
 $ docker events --since '2015-01-01'
```
使用过滤器，我们可以根据事件、容器和映像进一步缩小事件日志，如下所示:
*   要仅列出开始事件，请使用以下命令:
```
 $ docker events --filter 'event=start'
```
*   要仅从映像 Alpine 中列出事件，请使用以下命令:
```
 $ docker events --filter 'image=alpine:3.5'
```
*   要列出特定容器中的事件，请使用以下命令:
```
 $ docker events --filter 'container=b3619441cb444b87b4'
```
使用格式选项，您可以控制事件消息的输出:
*   要仅显示部分事件信息，您可以像这样更改格式:
```
 $ docker events --format 'ID={{.ID }} Type={{.Type}} Status= 
     {{.Status}}'
```
*   如果希望事件作为有效的 JSON 行进行流式传输，则可以使用以下命令:
```
 $ docker events --format '{{json .}}'
```
# 请参见
Docker 事件文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/events/](https://docs.docker.com/engine/reference/commandline/events/)。