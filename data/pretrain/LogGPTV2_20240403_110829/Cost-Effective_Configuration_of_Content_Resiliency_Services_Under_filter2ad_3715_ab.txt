set d(Ni0 , v) = 0. That is, Fcomb(S, v) = e
(cid:2)|S|
s=1(e−c·d(Nis−1 ,v) − e−c·d(Nis ,v))Pind
|S|−s+1. There-
fore the probability that all content servers in S fail in the
same time slot is,
Fcomb(S) = (1−Pcorr)Pind
, v))}(cid:3)|S|
Fcomb(S, v) dv
(cid:4)
v
|S|+ Pcorr
πR2
Note that there is no close form for the integral but it can be
approximated using numerical methods.
When a user uploads its data to a local content server
NA, NA chooses a backup set SA from other content servers
and replicate the data to each of them. Thus NA and SA to-
gether form the replication set for the uploaded data. The
availability of the data is thus deﬁned as at least one of the
servers in the set survives the risk of both independent fail-
ures and geographically correlated failures through a time
slot. That is, the availability, denoted by A(NA ∪ SA),
equals 1 − Fcomb(NA ∪ SA).
3.3 Cost-Eﬀective Conﬁguration of Repli-
cation Locations
Once the backup set for a content server is conﬁgured,
the replication process involves two types of cost: the com-
munication cost and the storage cost. The former is the cost
incurred when moving data from its origination local con-
tent server NA to all the content servers in NA’s backup set
SA. The latter is the cost of storing data at these content
servers. Considering the availability of cheap large volume
storage devices, we assume in this paper the storage cost is
trivial and focus on the communication cost.
We model the communication cost of moving one unit of
data from a content server NA to another content NB with
the following equation: C(NA, NB) = b1 · d(NA, NB) +
b2 · d2(NA, NB), where d(NA, NB) is the Euclidean dis-
tance between NA and NB. The cost function is composed
of a linear term and a quadratic term. The constant factors
b1 and b2 are coefﬁcients for the two terms, respectively,
and their values depend on the nature of the communica-
tion network. The using of two terms is an approximation
for today’s communication network that combines various
types of communication media and methods. For example,
in wired networks, the linear term is most signiﬁcant, and
in wireless networks, the quadratic term also plays a signif-
icant role.
Note that in the above cost model, we assume commu-
nication cost is purely a function of geographical distance
between the content servers. As shown later in this sec-
tion, such a relative simple cost model help us in under-
standing the different impact of independent failures and
correlated failure in the tradeoff between data availability
and prevention cost. However, this may not the most ac-
curate model for modeling communication cost in real sys-
tems. The most general communication cost model is one
that uses cost matrices to characterize the communication
cost between every pair of content servers. Please refer
to [16] for other variation of communication cost models
and their impact on cost optimization solutions. For sim-
plicity, we assume during each time slot, a content server
receives one unit of data from the local users. Then the total
communication cost of moving data received by a content
server NA in one time slot from NA to its backup set SA
C(NA, NB). Again, we use a
is C(NA, SA) =
relative simple communication cost model here by assum-
NB∈SA
(cid:2)
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
ing data are delivered between content servers using unicast.
Please refer to [16] for a discussion of other communication
models.
Given Scandidate, the pool of all content servers that can
serve as backup servers for NA, the objective static conﬁgu-
ration is to determine an optimal backup set SA for NA: the
communication cost is minimized under the constraint that
the availability of the data received by NA is maintained
over a target lower bound Al, which is speciﬁed in a user’s
service agreement. That is,
min
s. t.
C(NA, SA)
SA ⊆ Scandidate
A(NA ∪ SA) ≥ Al
The explosion of solution space makes naive exhaustive
search impractical. In Section 4, we ﬁrst propose a branch-
and-bound algorithm which can practically ﬁnd the optimal
backup sets for problems with up to 30 candidate servers.
With its help, we then do case studies to observe the prop-
erties of the optimal backup sets, based on which we then
develop heuristic-based algorithms for problems with even
larger scale. We will describe the operation of the algo-
rithms from the point of view of a local content server N0.
It should be clear however that the algorithm is fully dis-
tributed; every content server computes its optimal set in-
dependently. The input to the algorithm is the full set of
candidate servers (e.g., all alive content servers in the pool)
Scandidate = {N1, N2, . . . , Nk}, which practically could
be obtained through some central or distributed directory
services in real systems.
4 Optimization Algorithms for Static Conﬁg-
uration Problem
4.1 Branch-and-Bound
Algorithm 1 gives the pseudo-code of the branch-and-
bound algorithm. The algorithm ﬁnds the minimum-cost
combination of candidate nodes as the backup set for a lo-
cal content server N0. The target lower bound on the data
availability is given by the user and denoted by Al. The
algorithm starts its operation from an initial set S0, which
includes the content server N0 itself, and proceeds by in-
crementally expanding the backup set, adding one content
server a time. The expansion follows a tree-structure (de-
noted by T ), in which each tree-node represents a possible
backup set. An important property of the tree is that the cost
and availability of each tree-node are no less then those of
any of its ancestors. This suggests that, at any stage, if the
availability of a backup set satisﬁes the availability require-
ment, no further expansion of this branch is needed, since
the addition of another node will result in an unnecessary
Algorithm 1 Branch-and-Bound
1: S0 = {N0}
2: Sf ull = S0 ∪ {N1, N2 . . . , Nk}
3: set the root of tree T to S0
4: let cost upper bound Cu = +∞
5: let Soptimal = null
6: while T (cid:3)= φ do
7:
8:
9:
10:
11:
12:
13:
randomly choose a tree-node Scurr from tree T
if Scurr.cost ≥ Cu then
delete from tree T the subtree rooted at Scurr
else if Scurr.availability ≥ Al then
14:
15:
else if Scurr is expandable then
let Cu = Scurr.cost
let Soptimal = Scurr
delete from tree T all nodes whose costs are equal or
greater then Cu
Branch out a new child Snew below Scurr in tree T ,
where Snew belongs to {Scurr ∪ {Ni} | Ni ∈ Sf ull −
Scurr}. Once Scurr has already branched out all its
|Sf ull − Scurr| children, it is not expandable anymore.
delete Scurr from tree T
else if all Scurr’s children have been deleted then
16:
17:
18:
19: end while
20: Algorithm exits.
end if
If Soptimal is null, then there is no fea-
sible backup set that can achieve availability Al; otherwise,
Soptimal − {N0} is the optimal backup set.
increase in the cost. This allows the algorithm to keep tight-
ening the cost upper bound (denoted by Cu) and skip/delete
an entire subtree when it detects that the root of the subtree
has a higher cost than the cost upper bound.
The initial backup set S0 (see line 1) does not have to
contain only N0. It could comprise multiple content servers
in the scenario when, for example, one or more content
servers in an existing backup set of N0 fail and one wants
to keep some of the remaining content servers in the cur-
rent backup set when computing the new backup set. This
feature will be used in Section 5 when we discuss reconﬁg-
uration issues in content resiliency service networks.
4.2 Properties of Optimal Solutions
To draw heuristics for computationally more efﬁcient al-
gorithms, we do simulation-based experiments to observe
the properties of optimal backup sets. We experiment with
a pool of 15 content servers, which are randomly located in
a circulus failure ﬁeld with radius 100; the impact of fault
events has an average radius of 40; the target availability
lower bound is set to 0.99999; the linear and quadratic cost
factors are set to 100 and 1, respectively. Fig. 4 shows the
optimal backup set for a speciﬁc node with different combi-
nations of probabilities of independent failures (Pind) and
correlated failures (Pcorr). The solid nodes in the ﬁgures
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
represent N0 and the lines between the nodes represent the
replication relationship. In Fig. 4.(a)-(d), we ﬁx Pcorr and
observe how the the optimal backup set changes when we
tune up and down Pind. In Fig. 4.(e)-(h), we ﬁx Pind and
observe how the the optimal backup set changes when we
tune up and down Pcorr. The ﬁgures show that the nodes
in the optimal backup set can be roughly divided into two
categories: the peripheral backup servers and the vicinity
backup servers. The peripheral backup servers are a few
(about two or three in most cases) servers that extend far
away from the local server N0. The rest of the backup set
are vicinity backup servers which stay very close to N0. In-
tuitively, the peripheral backup servers are chosen mainly
in response to the risk of correlated failures; the farther they
are from each other, the farther the backup set extends and
the less likely the whole backup set fails in the same cor-
related fault event. However, having too much peripheral
backup servers incurs much more communication cost yet
does not help much in extending the backup set; the opti-
mal set therefore chooses the rest of its members from the
vicinity of N0, mainly in response to the risk of independent
failures.
4.3 Heuristic Algorithms Using Minimum
Enclosing Circles
Based on the above observations, we propose heuristic
algorithms, where minimum enclosing circles are used as
a geometric indication of the extension of the backup sets.
Algorithm 2 gives the pseudo-code of a heuristic algorithm
that utilizes the minimum enclosing circle. The basic idea is
to try out every three-server combinations of the candidate
content servers — though there are exponential number of
possible subsets of the candidate content servers, they share
only polynomial number of minimum enclosing circles be-
cause the minimum enclosing circle of a set of content
servers is determined by no more than three of the servers
in the set. For each three-server combination {Na, Nb, Nc}
under consideration, the algorithm ﬁrst ﬁnds the minimum
enclosing circle E that covers both {Na, Nb, Nc} and S0
and ﬁnd all candidate content servers that are covered by E;
next the algorithm preserves the servers on the circle and
greedily deletes servers in the circle one by one (in decreas-
ing order based on their distances to N0) without violat-
ing the availability lower bound Al. Among all the residue
sets, each computed for one three-server combination, the
algorithm chooses the minimum-cost one as the ﬁnal out-
put. Same as the case in the branch-and-bound algorithm,
the initial backup set S0 does not have to contain only the
local content server N0. It could comprise multiple content
servers and this is useful for the scenario that one or more
servers in an existing backup set of N0 fail and one wants
to keep some of the remaining servers in the current backup
Algorithm 2 MEC-Preserving and Greedy
1: S0 = {N0}
2: Scandidate = {N1, N2 . . . , Nk}
3: let Soptimal = null; let Soptimal.cost = +∞
4: for all three-server subset {Na, Nb, Nc} ⊆ Scandiate do
5:
ﬁnd the minimum enclosing circle E that covers all content
servers in S0 ∪ {Na, Nb, Nc}
let Scovered be the set of nodes that belong to Scandidate
and are covered by circle E
if (S0 ∪ Scovered).availability < Al then
continue to next loop (goto line 4)
end if
let Spreserve be the set of servers that belong to
{Na, Nb, Nc} and are on the circle E
let Sincircle = Scovered − Spreserve
Sort all servers in Sincircle based on their distances to N0.
Assume they are Ni1 , Ni2 , . . . , Nim, in decreasing order.
for j = 1 to m do
Sincircle = Sincircle − Nij
if (S0 ∪ Spreserve ∪ Sincircle).availability < Al then
Spreserve = Spreserve ∪ {Nij}
end if
end for
if (S0 ∪ Spreserve).availability < Al and (S0 ∪
Spreserve).cost < Soptimal.cost then
Soptimal = S0 ∪ Spreserve
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
end if
21:
22: end for
23: Algorithm exits.
If Soptimal is null, then there is no fea-
sible backup set that can achieve availability Al; otherwise,
Soptimal − {N0} is the optimal backup set.
set when computing the new backup set. This feature will
be used in Section 5 when we discuss reconﬁguration issues
in data replication. A computationally less costly variation
of Algorithm 2 (which we refer to as MEC-3) is to consider
only every two-server combinations (which we refer to as
MEC-2). Both run in polynomial time. Note that there are a
few algorithms for computing minimum enclosing circles,
the best of which has a complexity of O(n), where n is the
number of servers under consideration. A good summariza-
tion of these algorithms can be found in [17].
4.4 Performance of Heuristic Algorithms
For content resiliency service networks with relative
small number of servers, we are able to compare the cost
of the backup sets generated by the MEC-2 and MEC-3
algorithms with that of the optimal ones generated by the
branch-and-bound algorithm. Fig. 5.a shows the costs of
the backup sets for every servers when we use the same
experiment setup described in Section 4.2 and set Pind =
0.1, Pcorr = 0.00017. The ﬁgure shows that generally
MEC-3 performs better than MEC-2 but both have good
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
(a) Pind = 0;
Pcorr = 0.00027
(b) Pind = 0.05;
Pcorr = 0.00027
(c) Pind = 0.1;
Pcorr = 0.00027
(d) Pind = 0.2;
Pcorr = 0.00027
(e) Pind = 0.1;
Pcorr = 0.00005
(f) Pind = 0.1;
Pcorr = 0.00017
(g) Pind = 0.1;
Pcorr = 0.0002
(h) Pind = 0.1;
Pcorr = 0.00027
Figure 4. Optimal Backup Sets
performance. This indicates that the heuristics we drew
from the properties of optimal backup sets are valid and
their use in MEC-2 and MEC-3 is beneﬁcial.
It is impossible for us to make the above comparison
for content resiliency service networks with a large num-
ber of servers.
Instead, we compare MEC-2 and MEC-3
with a nearest-random algorithm: the algorithm ﬁrst deter-
mines beforehand the size of the backup set, e.g., m; then
it randomly chooses m servers from a lookup scope that
increases from the nearest m servers, to the nearest 2m
servers, to the nearest 3m servers, ..., until it ﬁnds a so-
lution that meets the target availability bound Al or fails if
it cannot ﬁnd one during the whole process. Note that the
nearest-random algorithm is not one we coin for pure com-
parison purpose. Actually, it is a practically useful algo-
rithm in the scenarios where extremely low computational
complexity is desired.
Fig. 5.b compare the results of MEC-2 with those of
nearest-random algorithm for a system with 50 nodes. The
radius of the fault ﬁeld is set to 1500, the average radius
of fault is set to 200, and the values of other parameters
are the same as in the previous experiments. The numbers
for the nearest-random algorithm in the ﬁgure are the aver-
age (mean) from running the algorithm 10 times assuming
the size of the backup set is 5 (we also tried other sizes,
among which 5 generally gives the best backup sets in this
experiment.) The ﬁgure shows that our heuristic algorithms
perform signiﬁcantly better than the nearest-random algo-
rithm, largely helped by the heuristic previously learned in
the case study.
5 Dynamic Conﬁguration Problem in Con-