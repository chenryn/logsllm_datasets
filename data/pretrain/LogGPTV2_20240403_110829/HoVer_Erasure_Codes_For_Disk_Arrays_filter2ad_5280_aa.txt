# HoVer Erasure Codes for Disk Arrays

**Author:** James Lee Hafner

## Abstract
We introduce a new family of XOR-based erasure codes, primarily designed for use in disk arrays. These codes, named HoVer (Horizontal-Vertical), feature a unique data/parity layout that combines both horizontal and vertical parity arrangements. We provide constructions that can tolerate up to four disk failures. Although the codes are not strictly maximum distance separable (MDS), they offer performance advantages over other codes at common array sizes. Additionally, they have fewer parameter constraints, allowing for greater flexibility in efficiency and performance trade-offs.

## 1. Introduction
Disk array systems have traditionally relied on RAID5 for fault tolerance, ensuring data reliability in single-point-of-failure scenarios. However, as disk capacities have increased and bit error rates have remained relatively constant, the overall reliability of RAID5 systems has declined to unacceptable levels. Various erasure codes have been proposed over the past 40 years, particularly in the last 15 years, to address this issue. Despite their theoretical value, none of these codes has become a de facto standard in the storage industry due to the necessary trade-offs and system-specific constraints.

In this paper, we present a new family of XOR-based erasure codes, called HoVer codes, which can be used in disk arrays or other reliable storage systems. The name "HoVer" is derived from the unique data and parity layout, which incorporates both horizontal and vertical characteristics. Most existing codes place all parity either on separate disks (horizontally) or on the same disks with the data (vertically). In contrast, HoVer codes have parity in both horizontal and vertical positions, providing several advantages over exclusively horizontal or vertical codes. 

While HoVer codes are not MDS, their unique layout offers a range of implementation options that cover a significant portion of the performance/efficiency trade-off space. We have developed four different HoVer code constructions that can tolerate two, three (two versions), and four disk failures. Our 2-fault tolerant construction is fully described theoretically. For the first 3-fault tolerant construction, we provide some negative theoretical results and incomplete positive results. Extensive computer searches have yielded configurations suitable for practical systems with modest array sizes. Details of our second 3-fault tolerant and 4-fault tolerant constructions are omitted for brevity but can be found in [9]. Other HoVer code constructions are possible, and we mention some alternatives briefly.

The paper is organized as follows: Section 1.1 defines key terms. Section 2 describes general HoVer codes and their relation to other work. Section 3 presents our constructions, focusing on the 2-fault tolerant case. Section 4 details the key advantages and trade-offs of HoVer codes. Section 5 outlines open problems, and we conclude with a summary and acknowledgments.

### 1.1. Vocabulary and Notations
To prevent confusion, we define key terms here, as many have inconsistent usage in the literature:

- **Element**: A fundamental unit of data or parity, serving as the building block of the erasure code. In coding theory, this is a bit within a symbol. For XOR-based codes, it is the maximally sized data unit of an XOR formula.
- **Stripe**: A complete, connected set of data and parity elements that are dependently related by parity computation relations. In coding theory, this is a codeword; we use "code instance" synonymously.
- **Strip (or Stripe Unit)**: A unit of storage consisting of all contiguous elements (data, parity, or both) from the same disk and stripe. In coding theory, this is associated with a code symbol. The set of strips in a code instance forms a stripe, and typically, the strips are of the same size.
- **Vertical Code**: An erasure code where a typical strip contains both data and parity elements (e.g., X-code [22]).
- **Horizontal Code**: An erasure code where each strip contains either data elements or parity elements, never both (e.g., EVENODD [2]).

The number of elements in a strip is referred to as the number of "rows" in the code. A code with more than one row is called two-dimensional. The array size is the total number of strips in a stripe. We use the abbreviations v-parity and h-parity for "vertical parity" (aligned vertically with respect to data elements in a stripe) and "horizontal parity" (aligned horizontally with respect to data elements in a stripe).

## 2. HoVer Codes – Data/Parity Layout
HoVer codes are two-dimensional, as shown in the general data/parity layout in Figure 1. We parameterize HoVer codes as \( \text{HoVer}_{v,h}^{t}[r, n] \), where \( t \) is the fault tolerance, \( v \) is the number of rows of v-parity elements, \( h \) is the number of strips of h-parity elements, \( r \) is the number of data elements per strip (not on an h-parity strip), and \( n \) is the number of strips containing data elements. The user data substripe is the \( r \times n \) upper-left block with entries labeled \( X(i, j) \), where \( 0 \leq i < r \) and \( 0 \leq j < n \).

For symmetry reasons, the unused spaces in the array are ideally left unused. Alternatively, these spaces can be used for metadata, or by data or parity from other stripes with appropriate rotations, packing, and logical addressing. It is possible to use these spaces for additional data or parity elements, but such constructions are not considered here. Since \( v \) and \( h \) are small, wasting this space is insignificant in practice.

Any erasure code can be put in this form, possibly with an additional set of strips that contain data exclusively. Purely horizontal codes have \( v = 0 \), and purely vertical codes have \( h = 0 \). As examples, RAID4 is \( \text{HoVer}_{0,1}^{1}[1, n] \), EVENODD is \( \text{HoVer}_{0,2}^{2}[p-1, p] \), and the X-code is \( \text{HoVer}_{2,0}^{2}[p-2, p] \) but requires an additional data-only strip with \( r + 1 \) data elements. (We use the symbol \( p \) exclusively to represent a prime number.)

The novelty of HoVer codes occurs when both \( v \) and \( h \) are non-zero. In all our constructions, each data element "touches" (or contributes to the parity formula for) exactly \( t \) parity elements, which is the theoretical minimum for \( t \)-fault tolerance and implies optimal bit update complexity. With this restriction, we assume \( v + h \leq t \), as the most efficient use of the parity element space puts each data element in each parity strip and each parity row at least once (for a total of exactly \( t \) times). Consequently, a true HoVer code must have \( t \geq 2 \).

This general description of HoVer codes is incomplete, as we have only specified data and parity element placement without detailing how the parity values are computed. Only certain combinations of parameters can provide a valid code regardless of how the parity values are computed (see Section 2.2). In Section 3, we give formal definitions for parity XOR formulas that yield valid codes under certain additional necessary and sufficient conditions.

Additionally, we assume that the first h-parity strip is the simple XOR of the data substrips (i.e., we assume a RAID4 subcode). So, for \( 0 \leq i \leq r-1 \), we set:
\[ H(i,0) = \bigoplus_{j=0}^{n-1} X(i, j) \]
This is not strictly required but is a reasonable assumption in practice, as it extends a standard RAID4 code. When there is only one h-parity strip, we abbreviate \( H(i) = H(i,0) \).

### 2.1. Related Work – Other Codes
Many erasure codes have been presented in the literature for application to disk arrays. For ease of comparison to HoVer codes, we categorize known erasure codes and provide non-exhaustive examples in each category.

- **Reed-Solomon Codes [19]**: These are MDS but require complex finite field arithmetic.
- **XOR-Based MDS Codes**: These come in two types: vertical codes such as the X-code [22], BCP [1], or the B-codes [21] (which superset the ZZS codes [23]), and horizontal codes such as EVENODD [2, 3], Blaum-Roth [4], or Row-Diagonal Parity [6].
- **Non-MDS XOR-Based Codes**: These subdivide into three categories based on storage efficiency:
  - **Efficiency > 50%**: Examples include the Gibson et al. codes [8].
  - **Efficiency = 50%**: Examples include LSI [20], the Blaum-Roth [4] 3-fault tolerant code, and some WEAVER codes [10, 11].
  - **Efficiency < 50%**: Examples include N-way mirroring (trivially XOR-based) or the dual B-codes [21].

LDPC codes [7, 15] (or see [17, 18] in the context of storage systems) technically belong in the class of non-MDS, XOR-based, efficiency larger than 50% codes. These codes have highly irregular graph structures but can have near-optimal efficiency and high average fault-tolerance. They are suggested for use in distributed, wide-area network storage systems, where the erasure model is delay or loss of packets. However, they may not be well-suited to controller-based storage systems, where minimum fault-tolerance goals must be achieved.

With the exception of Reed-Solomon codes, some WEAVER codes, LDPC codes, N-way mirroring, or the dual B-codes, none of the codes have exceptionally high fault tolerance. There are extensions of EVENODD [3] that are 3 and 4 fault tolerant, and the Blaum-Roth [4] binary code of efficiency 50%, the STAR code [14] (a variation on extended EVENODD), and two codes in [8] are 3 fault tolerant. To our knowledge, none of the other codes have variants that can tolerate more than 2 failures.

Throughout the paper, we highlight the features (both positive and negative) of the HoVer codes when compared against these categories. We do not compare with Reed-Solomon, as we focus primarily on XOR-based codes. Similarly, since HoVer codes are high efficiency and approximately MDS, we do not compare them with low-efficiency codes.