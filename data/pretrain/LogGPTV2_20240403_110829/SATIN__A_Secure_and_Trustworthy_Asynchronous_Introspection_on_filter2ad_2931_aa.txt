title:SATIN: A Secure and Trustworthy Asynchronous Introspection on
Multi-Core ARM Processors
author:Shengye Wan and
Jianhua Sun and
Kun Sun and
Ning Zhang and
Qi Li
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
SATIN: A Secure and Trustworthy Asynchronous
Introspection on Multi-Core ARM Processors
Shengye Wan, Jianhua Sun
College of William and Mary
{swan, jsun01}.email.wm.edu
Williamsburg, VA
Fairfax, VA
PI:EMAIL
Kun Sun
Ning Zhang
George Mason University
Washington University
St. Louis, MO
PI:EMAIL
PI:EMAIL
Qi Li
Tsinghua University
Beijing, China
Abstract—On ARM processors with TrustZone security exten-
sion, asynchronous introspection mechanisms have been devel-
oped in the secure world to detect security policy violations in
the normal world. These mechanisms provide security protection
via passively checking the normal world snapshot. However, since
previous secure world checking solutions require to suspend the
entire rich OS, asynchronous introspection has not been widely
adopted in the real world.
Given a multi-core ARM system that can execute the two
worlds simultaneously on different cores, secure world intro-
spection can check the rich OS without suspension. However,
we identify a new normal-world evasion attack that can defeat
the asynchronous introspection by removing the attacking traces
in parallel from one core when the security checking is per-
forming on another core. We perform a systematic study on this
attack and present its efﬁciency against existing asynchronous
introspection mechanisms. As the countermeasure, we propose a
secure and trustworthy asynchronous introspection mechanism
called SATIN, which can efﬁciently detect the evasion attacks by
increasing the attackers’ evasion time cost and decreasing the
defender’s execution time under a safe limit. We implement a
prototype on an ARM development board and the experimental
results show that SATIN can effectively prevent evasion attacks
on multi-core systems with a minor system overhead.
Index Terms—Asynchronous Introspection, Evasion Attack,
Trusted Execution Environment
I. INTRODUCTION
Introspection mechanisms have been developed and de-
ployed in a high privileged execution environment to pre-
vent or detect security policy violations in a low privileged
execution environment on the host machine [20]. In general,
introspection mechanisms can be classiﬁed into two categories:
synchronous introspection for attack prevention [7], [11], [12],
[15], [16], [36], [37] and asynchronous introspection for attack
detection [8], [14], [33], [37], [43], [48]. ARM TrustZone
technology is a system-wide security mechanism to provide
hardware-level isolation between two execution worlds that
share the CPU in a time-sliced fashion, where the secure
world has a higher privilege to access the system resources
of the normal world such as memory, CPU registers, and
peripherals, but not vice versa. To enhance the security of
mobile devices, a number of TrustZone-assisted introspection
mechanisms have been developed and deployed on millions of
mobile devices [7], [11], [12], [37], [43].
Synchronous introspection mechanisms focus on intercept-
ing and mediating security sensitive operations inline by the
high privileged execution environment
to prevent security
policy violations in the low privileged execution environment.
For instance, synchronous mechanisms have been developed in
the virtual machine manager to ensure memory page protection
in virtual machines [15], [16], [36]. Similarly, Samsung’s
KNOX Real-time Kernel Protection (RKP) mechanism [7],
[37] relies on ARM TrustZone technique to intercept certain
privileged system functions in the normal world and screen
them through the secure world for inspection and approval
before being executed.
However, synchronous introspection mechanisms face two
main challenges. First,
it has to hook up to all security
sensitive locations that are potentially exploitable to attackers.
Though it is possible to build up a near-complete list based
on recently discovered policy violations, it is hard to ensure
the completeness of such list. Second, certain implementation
bugs, such as write-what-where, allows an attacker to launch
data attacks bypassing the function checkpoints setup for
the synchronous introspection [26], [35]. Once an attacker
discovers any vulnerability of synchronous introspection, she
can deploy a persistent rootkit to maintain the root access to
the normal world OS (rich OS), steal data or mislead user be-
haviors without being detected by synchronous introspection.
Asynchronous introspection mechanisms can effectively de-
tect those persistent rootkits via analyzing attacking traces of
security policy violations from a snapshot of memory along
with CPU state information that is periodically or randomly
acquired from the low privileged execution environment (e.g.
the normal world). Besides simply checking the integrity of the
invariant kernel code, a number of proof of concept approaches
have been developed to provide a more ﬁne-grained security
checking on dynamic kernel data structures after ﬁlling the
semantic gaps [8], [14], [33], [48]. Unlike the synchronous
introspection that requires to intercept all read/write transac-
tions on the target, asynchronous introspection conduct the
introspection based on the snapshot of the target, which
makes it more effective to introspect the target completely
and therefore detect a persistent attack.
One major limitation on applying asynchronous introspec-
tion mechanism in practice is that the introspection process
may introduce a large system overhead. Particularly, on single
core ARM processors, whenever the secure world is per-
forming the security checking, the entire rich OS will be
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00040
289
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
suspended during the memory acquisition and online memory
analysis process. Due to this poor usage experience on mobile
devices, TrustZone-based asynchronous introspection has not
been widely deployed or enabled.
Modern multi-core ARM processors creates new opportuni-
ties to deploy a practical asynchronous introspection based on
TrustZone without pausing the rich OS. Speciﬁcally, the ARM
multi-core architecture allows each core to enter its secure
world independently, so the rich OS and the secure OS can run
in parallel [9], [23], [28]. It is now feasible to make one core
or all cores taking turns to perform the asynchronous intro-
spection tasks while leaving other cores to continue the normal
world’s operations. For example, Samsung KNOX includes a
Periodic Kernel Measurement (PKM) mechanism in the secure
world to perform periodic asynchronous introspection on a
speciﬁc core [37].
In this paper, we reveal a new type of evasion attack
that can defeat the asynchronous introspection on multi-core
systems by removing the attacking traces concurrently from
one core while the security checking is executing on another.
Evasion attacks target at defeating asynchronous introspection
by predicting precisely the time of next security check and
thus removing all attacking evidence to avoid detection [37],
[48]. However, on multi-core mobile devices that can run both
normal world and secure world concurrently, besides removing
the attacking traces before security check, an attacker can also
hide its attacking trace right after the start of introspection but
before it has the opportunity to examine any malicious bytes.
We name this type of evasion attacks as TZ-Evader.
There are two main challenges to be solved when designing
a TZ-Evader attack. First, the malicious code running in the
normal world needs to know if the asynchronous introspec-
tion is running on any core’s secure world; however,
the
ARM TrustZone architecture protects the secure world running
information from being accessed by the normal world. To
solve this challenge, we propose to utilize the CPU core’s
availability as the side channel information to decide if the
introspection is running on any core. We develop a user-
level prober to stealthily probe the current state of each
core. Second, when one core enters the secure world and
begins to run the inspection,
the malicious normal world
needs to detect the core’s state changes at an earliest time
in order to maximize its evasion capability. To solve this
challenge, we propose a kernel-level prober that can accurately
monitor the running state changes of all cores. There are two
implementation options for deploying the kernel-level prober,
either by intercepting the timer interrupt to inject the prober
in the rich OS or by manipulating the real-time scheduler of
the Linux kernel to add the prober as a high priority process.
We implement a proof-of-concept TZ-Evader attack by
integrating the kernel-level prober with traditional persistent
rootkit on the ARM Juno r1 development board [5]. We eval-
uate its effectiveness against the state-of-the-art asynchronous
introspection mechanisms, and the experimental results show
the new TZ-Evader attack can accurately detect the running
of asynchronous introspection and thus conduct a successful
evasion attack.
With a deep understanding of the TZ-Evader attack, we
propose a secure and trustworthy asynchronous introspection
solution called SATIN in the secure world to defeat the TZ-
Evader attack. The basic idea is to minimize the running time
of each introspection and maximize the probing delay of TZ-
Evader at the same time. We propose a number of techniques
including random wake-up time, random introspection area,
and random CPU afﬁnity to ensure that the asynchronous
introspection is always completed before TZ-Evader can hide
any attacking traces. We implement a prototype of SATIN
on the ARM Juno r1 development board and the experimental
results show that it can effectively detect the TZ-Evader attacks
with a minor system overhead.
In summary, we make the following contributions.
1) we discover a new evasion attack called TZ-Evader
against asynchronous inspection on multi-core ARM
processors. The attack utilizes the side channel infor-
mation to infer if any core is running in the secure
world and then begins to clean the attacking traces
simultaneously on other cores that run in the normal
world.
2) We develop a high-accurate probing technique called
KProber for the normal world to fast probe the running
state of all cores. Based on KProber, we implement
a proof-of-concept TZ-Evader, which can defeat exist-
ing TrustZone-Based asynchronous introspection mech-
anisms.
3) We propose a secure and trustworthy asynchronous
introspection mechanism called SATIN to protect mobile
devices against TZ-Evader. It wins the race condition
over the attacker by minimizing the running time of each
introspection round and maximizing the probing delay
of TZ-Evader.
II. BACKGROUND
A. ARMv8-A Security Model
The ARMv8-A architecture is the latest 64/32-bit ARM
architecture, which supports execution instructions with 64-
bit registers and remains backward compatible with the 32-bit
ARMv7 architecture. In the AArch64 security model, each
instruction is executed at one of the four Exception Levels:
EL0, EL1, EL2, and EL3, as shown in Figure 1. EL3 is the
highest privilege level that only contains a Secure Monitor for
controlling the context switch between the secure world and
the normal world. In the normal world, the user applications
run at EL0, the guest OSes run at EL1, and the hypervisor
runs at EL2. In the secure world, the secure applications run
in the S-EL0 level, and the secure OS runs in the S-EL1 level.
There is no S-EL2 level, so the secure world does not support a
hypervisor layer. The asynchronous introspection module can
be implemented at either S-EL1 or S-EL0 level.
B. Preemptive/Non-preemptive Secure Mode
The ARM interrupt management framework is responsible
for conﬁguring the interrupt routing behavior [3]. There are
290
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
ments. First, the malicious code in the normal world can
detect if one core is entering the secure world. Second, before
the core in the secure world can access the attacking traces,
the malicious code running on other cores can remove the
attacking traces.
1) Probing CPU Core’s Running State: Since the normal
world cannot directly access any secure world information, we
propose to utilize the availability of the shared CPU cores as
a side channel information to infer the running state of each
core. The main idea is that after the secure world holds one
core to perform the introspection, the normal world cannot
use that core to run any process. A user-level prober process
can be used to conduct this probing task. To trace when the
normal world loses the control on a CPU core, the prober
process assigns each core with a child-thread, which keeps
reporting back the corresponding core’s availability. Since the
rich OS kernel may migrate one thread task to other cores,
especially when one core is paused, we ﬁx the CPU afﬁnity of
each thread. Thus, when one core enters the secure world, the
attached thread will be paused and cannot be migrated to other
cores by the OS scheduler. When one thread is paused, the
prober process can detect that the corresponding core enters
the secure world.
Thread_0
(Core_0)
(cid:2) ...
2. Thread
start
Thread_i
(Core_i)
(cid:2) ...
Thread_n
(Core_n)
Time
Reporter
Time
Comparer
Any(cid:2)
time_x(cid:2)
< (time_i -(cid:2)
Tns_threshold)
sleep
N
Y
User-Level
Prober 
1. Create threads
3. Report
core_x
enters
the Secure(cid:2)
World
Fig. 2: User-level Multi-thread Prober
Figure 2 shows the multi-thread design of the user-level
prober. For a device with n cores, we start a process with
n threads, and each thread’s CPU afﬁnity is ﬁxed to its
corresponding core. Each thread has two components: Time
Reporter and Time Comparer. On core i, the Time Reporter
obtains the latest time time i from a shared timer among
all CPU cores and then reports the time into a buffer that
is readable to all
the Time Comparer
compares core i’s time i with all other cores’ latest reported
times.
threads. After that,
Since each thread reports its latest time independently, even
if we can start the Time Reporters on all cores simultaneously,
there exists a time difference when reading those reported
time buffers and comparing their values. Meanwhile, since
the kernel scheduler manages to provide the “fairness” to
all threads, even though we cannot control all threads in a