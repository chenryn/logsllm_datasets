title:Taking Routers Off Their Meds: Why Assumptions Of Router Stability
Are Dangerous
author:Max Schuchard and
Christopher Thompson and
Nicholas Hopper and
Yongdae Kim
Taking Routers Off Their Meds:
Why Assumptions Of Router Stability Are Dangerous
Max Schuchard, Christopher Thompson, Nicholas Hopper, Yongdae Kim
University of Minnesota
{schuch, cthomp, hopper, kyd} @ cs.umn.edu
In this work, we examine how an adversary in control
of a BGP speaker in a transit AS can cause a victim router
in an arbitrary location on the Internet to become unstable.
Through experimentation with both hardware and software
routers, we look at the behavior of routers under abnor-
mal conditions and come to four conclusions. First, routers
placed in certain states behave in anything but a stable man-
ner. Second, unexpected but perfectly legal BGP messages
can place routers into those states with disconcerting ease.
Third, an adversary can use these messages to disrupt a vic-
tim router to which he is not directly connected. Fourth,
modern best practices do little to prevent these attacks.
)
(
 0
B
M
Time (s)
y
r
o
m
e
M
CISCO
Quagga
Through
Figure 1.
 500  1000  1500  2000  2500
70.0
60.0
50.0
40.0
30.0
20.0
10.0
0.0
-10.0
experi-
ments on hardware
and software routers,
we
observed what
happens when routers
ﬁnd
themselves
starved for CPU cy-
cles or memory. We
witnessed a variety of
failure modes, ranging
from severe perfor-
mance degradation to the unrecoverable failure of all active
routing sessions. We also observed that a router placed into
one of these states would more than likely cause its peers
to enter one or more of these states as well. An example of
this is a CPU starved router was the exhausting its peer’s
memory. When the rate of incoming BGP updates exceeds
a router’s computational capacity, the receiving router only
buffers a ﬁxed number of incoming BGP messages. When
those limits are reached it is up to the sender to buffer
all future updates until the CPU starved router can accept
them. We term this behavior back pressure. Figure 1
opposite shows the increase in memory usage over time for
a router that is attempting to exchange routing tables with a
CPU starved peer versus a peer with sufﬁcient processing
power.
 30
 25
 0
 1
 3
i
 5
 0
)
s
m
 20
 15
 10
 2.5
 3.5
 0.5
(
e
m
T
g
n
i
s
s
e
c
o
r
P
attributes
 1.5
 2
Time (ks)
No Attack
Hash Attack
We found it sur-
prisingly easy to force
a router into one of
these unstable states.
the
The majority of
methods we
found
are the result of tak-
ing commonly held
assumptions
about
path
and
invalidating those assumptions. Routers fail to handle these
“corner cases” in a reasonable fashion. For example, in the
software router Quagga uses a small, ﬁxed size hash map
with a predictable hashing function. This is acceptable so
long as the assumption that AS paths will be spread evenly
over all of the buckets holds. However, an adversary can
violate this assumption, advertising AS paths that hash to
the same value. Plots of the time to process updates with
colliding AS paths compared to random AS paths can be
seen in the ﬁgure opposite.
Figure 2.
An adversary in control of a BGP speaker can take ad-
vantage of these assumptions to attack other honest routers.
By convincing legitimate BGP speakers to propagate these
messages, an adversary can push a target in an arbitrary net-
work location into unstable operation. A table below brieﬂy
highlights some current best practices, observations about
how an adversary avoids them, and experimental evidence
to support our observations. Details of how our adversary
launches such an attack, along with how best practice fail to
stop this can be found in our tech report 1.
Best Practice
Limitation
Preﬁx
Filters
Preﬁx
Aggregation
Preﬁx
Limits
AS Path
Limits
Limits still allow
millions of preﬁxes
Not applied to
routes from transit ASes
Malicious updates based on
sum of victim preﬁx limits
Weakened by generous
limits and memory allocation
Experimental Evidence
/24s advertised by
88.5% of transit ASes
Hole punches and
non-aggregated IP blocks
Preﬁx limits applied on
a per connection basis
Patsy allocates memory
in ﬁxed size blocks
1http://www.cs.umn.edu/research/technical_reports.php
1