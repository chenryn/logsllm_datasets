# FABLE: A Language for Enforcing User-Defined Security Policies

**Authors:**
- Nikhil Swamy
- Brian J. Corcoran
- Michael Hicks

**Affiliation:**
University of Maryland, College Park
{nswamy, bjc, mwh}@cs.umd.edu

**Abstract:**
This paper introduces FABLE, a core formalism for a programming language that enables programmers to specify and enforce security policies. In FABLE, security policies are defined by associating security labels with data or actions. Programmers define the semantics of these labels in a separate part of the program called the enforcement policy. FABLE ensures that labeled terms can only be manipulated within the enforcement policy, preventing policy circumvention. This design facilitates straightforward proofs that programs implementing specific policies achieve their high-level security goals. FABLE is flexible enough to support a wide range of security policies, including access control, information flow, provenance, and security automata. We have implemented FABLE as an extension to the LINKS web programming language, resulting in SELINKS. Our experience using SELINKS to build a wiki and an online store, both equipped with access control and provenance policies, demonstrates its practicality and assurance.

## 1. Introduction

For over 35 years, computer security researchers have explored techniques to ensure that software systems correctly enforce their security policies and exhibit desirable security properties [22]. One notable success has been the development of programming language-based techniques for enforcing information flow security policies [32]. These policies typically define a set of security levels ordered as a lattice, where sensitive data is labeled according to this lattice. Correct enforcement implies noninterference, ensuring that no information visible at a higher level (h) is leaked to a lower level (l < h). By incorporating security labels into the type system, one can prove that a correctly typed program enforces its security policy [41]. This approach has been successfully implemented in languages like Jif [10] and FlowCaml [30].

While information flow policies are important, many other types of policies are also widely used, such as access control, type enforcement [4], tainting [35, 37], provenance tracking [7], stack inspection [17, 14], and security automata [17, 42]. Encoding these policies as information flow policies in Jif or FlowCaml can be cumbersome due to the fixed format of security labels and restrictions on implicit flows. 

We aim to develop a programming language that can enforce a wide range of policies while providing the same level of assurance as Jif or FlowCaml. To this end, we present FABLE, a core language for writing programs that enforce various security policies. FABLE allows programmers to define custom security labels and associate them with data using dependent types. For example, a label `LOW` can be associated with an integer, resulting in the type `int{LOW}`. Similarly, a label `ACL(Alice, Bob)` can be defined, where an integer with type `int{ACL(Alice, Bob)}` can only be accessed by Alice or Bob.

The interpretation of these labels is defined in separate enforcement policy functions. For instance, an access control policy function might look like this:

```fable
policy access_simple (acl:lab, x:int{acl}) =
    if (member user acl) then {◦}x else -1
```

This function checks if the current user is a member of the ACL and either returns the value or a default value. FABLE's type system ensures that labeled data is treated abstractly by the main program, and it prevents the association between a label and its data from being severed or forged. This ensures complete mediation of the user’s label policy, meaning no data can be accessed without consulting the correct security policy.

To demonstrate FABLE's flexibility, we have encoded a range of policies, including access control, static and dynamic information flow, provenance tracking, and policies based on security automata. The soundness of FABLE makes proving security properties no more difficult—and arguably simpler—than in specialized languages. We provide proofs of correctness for our access control, provenance, and static information flow policies.

To evaluate FABLE's practicality, we have implemented it as an extension to the LINKS web programming language, resulting in SELINKS. We have built two substantial applications using SELINKS: SEWIKI, a 3500-line secure blog/wiki, and SEWINESTORE, a 1000-line e-commerce application. Both applications implement combined access control and provenance policies. Our experience shows that FABLE's label-based security policies are neither lacking nor burdensome, and the modular separation of the enforcement policy allows for some reuse of policy code.

In the remainder of the paper, we present FABLE's syntax, static semantics, and operational semantics (Section 2). We show how FABLE can be used to define a range of security policies and simplify proofs of their correct implementation (Section 3). Section 4 discusses our SELINKS implementation and our experience building SEWIKI and SEWINESTORE. Section 5 covers related work, and Section 6 outlines future work and concludes.

## 2. FABLE: System F with Labels

### 2.1. Syntax

Figure 1 defines FABLE's syntax. Expressions extend a standard polymorphic λ-calculus, System F [16], and include standard forms such as integer values, variables, abstractions, term applications, the fixpoint combinator, type abstractions, and type applications. FABLE-specific constructs include labels, pattern matching, and operations for adding and removing labels.

**Expressions:**
- Standard: \( n \), \( x \), \( \lambda x:t.e \), \( e_1 e_2 \), \( \text{fix } x:t.v \), \( \Lambda \alpha.e \), \( e[t] \)
- FABLE-specific: \( C(\vec{e}) \), \( \text{match } e \text{ with } p_i \Rightarrow e_i \), \( [\![e]\!] \), \( \{ \circ \}e \), \( \{ e' \}e \)

**Types:**
- Standard: \( \text{int} \), \( \alpha \), \( \forall \alpha.t_2 \), \( (x:t_1) \rightarrow t_2 \)
- FABLE-specific: \( \text{lab} \), \( \text{lab} \sim e \), \( t\{e\} \)

**Patterns:**
- \( p \) ::= \( x \) | \( C(\vec{p}) \)

**Pre-values:**
- \( u \) ::= \( n \) | \( C(\vec{u}) \) | \( \lambda x:t.e \) | \( \Lambda \alpha.e \)

**Application values:**
- \( v_{\text{app}} \) ::= \( u \) | \( [\![ \{ e \}v_{\text{pol}} ]\!] \)

**Policy values:**
- \( v_{\text{pol}} \) ::= \( u \) | \( \{ e \}v_{\text{pol}} \)

**Figure 1. Syntax of FABLE**

Labels are represented by expressions \( C(\vec{e}) \), where \( C \) is a constructor and each \( e_i \) is a label. Pattern matching allows examining labels. For example, the expression `match z with ACL(x, y) => x` would evaluate to `Alice` if `z`'s runtime value were `ACL(Alice, Bob)`.

FABLE introduces the concept of an enforcement policy, a separate part of the program authorized to manipulate labels. Policy code is delimited by bracketed expressions `[\![e]\!]`. Labeling and unlabeling operations, such as `{◦}e` and `{e'}e`, can only occur within policy code.

Standard types include `int`, type variables, and universally quantified types. Functions have dependent types `(x:t_1) → t_2`, where `x` names the argument and may be bound in `t_2`. Labels can be given types `lab` or `lab ∼ e`, which describes label expressions equivalent to `e`. Singleton types are useful for constraining the form of label arguments in policy functions.

The dependent type `t{e}` describes a term of type `t` associated with a label `e`. This association is made using the syntax `{e}e'`. Conversely, the association can be broken using `{◦}e`.

The operational semantics must distinguish between application and policy values to ensure that policy code does not inadvertently grant undue privilege to application functions. Application values consist of pre-values or labeled policy values wrapped in `[\![·]\!]` brackets. Values within policy code are either pre-values or labeled policy values.