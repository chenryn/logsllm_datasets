训可以纳入新的参与过程中。
情况下，SRE所花费的精力是该新项目带来的整体业务风险的一部分，并且与达到预期
可能曾经参与服务但从未正式接管。这其实也是好的，因为该服务已经足够可靠，维护
有时候一个服务最终不值得SRE全职管理一
积极的团队关系会促进团结互助，帮助SRE尽早接管生产环境。
这种模型中，SRE和开发团队之间的更长时间和更密切的协作会创建一个长期协作关系。
通过参与范围的扩大，SRE团队可能会比在简单的PRR模型下更快地接管新服务。在
好地进行重构或重新设计。
务的可靠性与增加新功能之间进行执择。在服务的后期阶段，这些早期经验可以帮助更
发布时维持系统稳定一般来说可以减少研发团队的优先级冲突问题。他们不会在提高服
随着时间的推移，
在于对可靠性的设计方面。
早期参与模型超越了简单PRR模型。然而，SRE参与模型还有可以演进的空间，主要
规模的项目成功对比之下的较小部分。SRE团队可以被重新指派，之前所吸取的经验教
也有可能是，SRE进行了早期参与，但是最后该服务不能满足预测的使用水平。在这种
成本很低，因此可以由研发团队运维。
从服务脱离
发布之后
·由于各个服务中软件实践的不同，每个生产功能的实现方式都不同。为了达到
·“接手”每个服务需要2~3个SRE，该过程通常持续两到三个季度。PRR模式的
功能相似的日志框架被反复实现。
一个典型的例子是，在同一种语言中，因为不同的服务没有实现相同的编码结构，
也要为所有共享代码服务子集实现一次。这些重新实现是对工程师工作量的浪费。
PRR标准，各种新功能通常必须专门为每个服务重新实现，或者在最好的情况下，
而且要求制定严格的服务优先级。
受到可以主持PRR的SRE数量的限制。这些问题导致服务交接是顺序进行的，
前期时间通常很长（多个季度）。所需花费的资源与服务的数量成正比，同时还
目前描述的SRE参与模型产生了以下几种不同的情景：
不断发展的服务：框架和SRE平台
一这可能是在发布之后决定的，或者SRE
|391
451
---
## Page 434
452
392
更简易的自动化和更智能的系统
带有通用控制界面的通用生产操作平台
可重复使用的解决方案
最佳实践代码化
为了有效应对这些情况，很有必要开发一个能符合以下指导思想的模型：
结构化的解决方案：框架
的需求。这个义务促使SRE支持模型的扩展，
最后，SRE这个组织有义务满足数量庞大并且不断增长的目前没有SRE支持的开发团队
程师也更长。
直没有足够的 SRE来支持全部服务。SRE入职之后，他们的培训时间相比一般的研发工
招聘合格的SRE很困难，代价也很高。尽管招聘组织为此付出了巨大努力，我们仍然一
前的PRR模型所不可能满足的（它有几个月的提前期）。
就算是很简单的服务也需要更多的人手。微服务同时意味着部署时间应该较短，这是以
目和SRE需要负责的服务数量都增加了。因为每项服务都有一个基础固定的运维成本，
跟随行业趋势，Google内部也在逐步向微服务转变。注i于是，需要SRE提供支持的数
外部因素传统上会对于SRE组织和它多方面的资源造成影响。
影响SRE的外部因素
注1
通用的控制接口使自动化和智能化达到一个以前不可能达到的水平。例如，SRE可
生产设施的统一接口，统一的运维控制机制，以及统一的监控、日志以及服务配置。
常见并易于共享的技术实现，
参看维基百科上的微服务的页面，http://en.wikipedia.org/wiki/Microservices。
自然而然地成为“生产就绪”。
将生产环境中运行良好的最佳实践代码化，这样服务可以通过简单地使用这些代码，
·SRE软件工程对于服务的贡献往往是本地的。因此，建立能够重复使用的通用解
·通过对常见的服务问题和故障的评审揭示了一定的模式，
经验在那些已经接手的服务中实践。
决方案是困难的。这样的后果是，没有一个简单的方法来将SRE团队收获的新
热点的处理。
松地在其他服务中复制这些修复和改进。典型的例子包括服务过载的处理和数据
第32章
SRE参与模式的演进历程
用于改善可扩展性和可靠性的问题。
：使其远远超出了原有的概念和模式。
，但是并没有办法可以轻
---
## Page 435
然可以期待这些应用在生产中的行为相近，可以利用标准的工具进行管理。
配置和控制组件。这样，研发团队可以选择适合他们需求和经验的语言平台，而SRE仍
实现（C++与Java）不能共享代码，但是目标是为同样的功能暴露同样的API、行为、
Google内部支持数种语言开发的应用，这些框架在所有语言中都可用。虽然框架的不同
味着该框架的用户最终会以相同的通用方式使用服务，配置差异也很小。
要SRE人工一个一个地评审。这些框架推动了跨服务的、可重用的生产解决方案，这意
合和配置各种组件的工作中解脱出来。这些成果常常是相似又不相同的，它们又必须需
各种框架在一致性和高效性上提供了很多前期收益。它们将开发者从临时的、定制的黏
准的方式对外提供控制各个组件的功能。例如，
一个框架基本上是预先实现的一套使用一系列软件组件的规范。该框架还可以以一种标
经考虑了正确的基础设施的使用，所以研发团队可以更专注于业务逻辑的开发。
SRE通过构建框架模块来实现这些关注重点的标准解决方案。其结果是，因为该框架已
提供了一个完整的解决方案。框架模块解决了前面提到的SRE的多个关注重点，如：
在一个或多个框架模块中，每一个框架都为问题所在的领域或问题相关的基础设施依赖
实现了基础设施部分的代码并且预先解决了常见的各种生产问题。每一个问题都被封装
的生产问题主要集中在一项服务的基础设施相关的部分。服务框架以一个标准化的方式
应用程序由一些业务逻辑组成，而这些业务逻辑依赖于各种基础设施组件。SRE所关注
SRE标准的框架来设计应用程序，然后再花时间按SRE规范改造程序。
的代码，SRE和开发团队共同维护这些框架。这种变革使得产品研发团队可以利用符合
支持的平台和服务框架。利用这些框架构建的服务可以共享那些按SRE支持平台设计
基于这些指导思想，在我们支持的每一个环境中（Java、C++、Go），建立了一系列SRE
●性能指标的度量和选择
数据源的原始数据（日志、监控数据，等等）。
以用一个统一的视图查看关于一次故障的全部相关信息，不用收集和分析来自不同<453
●将商业逻辑用一系列完善定义的语义组件进行组织，可以用标准术语来引用。
流量和负载管理的控制系统
请求日志记录
一致的方式将度量结果反馈给控制系统。
描述一个单一的软件服务器的容量，以及如何判断“过载”的方式，这样可以以
管理负载抛弃的标准配置格式
请求调试日志的标准格式。
标准监控维度。
不断发展的服务：框架和SRE平台
一个框架可以提供如下功能：
393
454
---
## Page 436
最初的 SRE参与模型体现了两种选项：完整的 SRE支持，或者基本上没有 SRE支持。注2
这些特性减少了SRE团队在服务交接时的评估和认证工作，同时仍然能保持对服务产品
这种框架模型可以使得PRR执行更快，因为我们可以依靠：
自动从对框架模块的逐步改进中受益。
和工具，以提高Google所有团队整体的服务质量。而且，所有用框架实现的服务都会
这种做法有效地突破了SRE的编制障碍，让所有团队都能使用SRE所支持的生产标准
维护。但是不管怎样，没有完整SRE支持的服务可以使用SRE开发和维护的生产功能。
Google内部服务数量的不断增长，意味着大部分服务既不值得SRE参与也不会被SRE
设计中自带的通用性支持
显著降低运维开销
这种基于服务框架和通用生产平台、控制界面的结构化方法提供了一系列新的益处。
一种基于共同责任的新型参与模型
质量的高标准要求。
新服务和管理优势
394
注2
一个有着公共服务结构、惯例，以及软件基础设施的生产平台，使SRE团队可以为“平
更快、
一个基于框架和强标准而构建的生产平台能够明显降低运维开销，原因如下：
”基础设施提供支持，而让研发团队为服务的功能性问题提供on-call支持一
偶尔，SRE团队会为一些未“接手”的服务提供咨询服务，但是咨询服务是没有保障的，在数量和
●部署更快：一个想法可以在数天之内在SRE级别支持的生产环境中全面部署！
●它支持代码结构、依赖关系、测试、编码样式指南等的强合规性测试。这个功能
范围上都很有限。
SRE在管理采用框架构建的服务时的认知负担降低了。
作为框架实现的一部分内置服务功能。
更低的参与成本
它使得管理大量的服务更容易，特别是数目暴增的微服务。
它具有内置的服务部署、监控和自动化服务。
还提高了用户数据的隐私度、测试和安全性的合规性。
“接手”服务更快（通常由一个SRE在一个季度内完成）。
第32章SRE参与模式的演进历程
一也就是
---
## Page 437
注3新的服务管理模型以两种方式改变了SRE人员配置模型：（1）因为大量的服务采用通用技术，
时降低了管理成本，提高了整个Google的基础服务水平。
部构建生产完备的服务的主要力量。这也是SRE深人扩展自己的贡献的主要领域，这同
上文描述的这三种参与模型仍然在Google内不断实践。然而，框架正在成为Google内
的参与模式的需求也更强烈了。为了满足这方面的需求，生产服务框架随之出现了：基
SRE，以便“为可靠性而设计”。随着对SRE专业知识需求的持续增长，对更具扩展性
随着时间的推移，SRE扩展和改进了这一模型。早期参与模型在开发周期早期引人了
取得了长足的进步，但仅适用于已经进入发布阶段的服务。
不断改进。Google SRE最初的系统化流程一
服务的可靠性可以通过SRE的参与来改建，该流程包括系统化的评审与生产运维方面的
小结
员配置模型。
SRE与研发团队之间的新的关系模型，以及一个对于SRE所支持的服务进行管理的新人
于生产最佳实践的代码模式在框架中进行了标准化，封装在框架内，使得使用框架成为
该模型体现了一个从最初以两种主要方法为主的服务管理方式的重大变革：它需要一个
护的责任，特别是控制系统，如负载抛弃、过载保护、自动化、流量管理、日志和监控等、
应用程序代码中的错误。在这种模式下，SRE承担大部分基础设施服务的软件开发和维
一个被推荐的、一致的、相对简单的构建服务的方法。
人员，而非基于所服务的数量来配置，同时可以在多个产品之间共享资源。
持的生产平台和由开发团队支持的服务的具体业务逻辑。
服务所需要的SRE人数也随之减少
注3
；（2）它促成了生产平台的建立，
简单PRR模型，在规范SRE参与模式中
。这些平台团队根据所维护平台的需要而配置
使得关注重点划分为由SRE
小结
|395
456
---
## Page 439
史，同时也将SRE与民航行业的某些实践经验进行了对比。
最后，Google VP，Benjamin Lutch 在全书最后部分回忆了SRE在Google内部的演进历
常重视可靠性的行业进行了对比。
的其他组织之后，我们可以将目光转向第33章，本章将SRE的实践经验与其他同样非
在讨论完GoogleSRE的工作细节，包括其中的指导思想与最佳实践如何应用到同领域
结束语