    qemu-system-arm -M vexpress-a9 \
         -kernel /root/tq2440_work/u-boot/u-boot/u-boot \
         -nographic \
         -m 512M \
         -net nic,vlan=0 -net tap,vlan=0,ifname=tap0 \
         -sd /root/tq2440_work/busybox_study/a9rootfs.ext3
### 7\. 用NFS挂载文件系统
#### **（1）配置u-boot的环境变量bootargs**
    setenv bootargs 'root=/dev/nfs rw nfsroot=192.168.11.20:/nfs_rootfs/rootfs init=/linuxrc console=ttyAMA0 ip=192.168.11.5'
#### （2）配置kernel
配置内核，使其支持nfs挂载根文件系统
`make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16/
menuconfig`  
配置：
File systems --->
    [*] Network File Systems  --->
           NFS client support
             NFS client support for NFS version 3
        [*]       NFS client support for the NFSv3 ACL protocol extension
        [*]   Root file system on NFS
然后重新编译内核
    make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16 LOADADDR=0x60003000 uImage -j2
将生成的uImage拷贝到/tftpboot下。
启动：
    qemu-system-arm -M vexpress-a9 \
         -kernel /root/tq2440_work/u-boot/u-boot/u-boot \
         -nographic \
         -m 512M \
         -net nic,vlan=0 -net tap,vlan=0,ifname=tap0
         -sd /root/tq2440_work/busybox_study/a9rootfs.ext3
## 二、用QEMU辅助动态调试
### 1\. 用QEMU调试RAW格式ARM程序
    .text
        start:                       @ Label, not really required
                mov   r0, #5         @ Load register r0 with the value 5
                mov   r1, #4         @ Load register r1 with the value 4
                add   r2, r1, r0     @ Add r0 and r1 and store in r2
        stop:   b stop               @ Infinite loop to stop execution
该ARM汇编程序功能是两数相加，而后进入死循环。保存该文件名为add.S。
用as进行编译：
`$ arm-none-eabi-as -o add.o add.s`
用ld进行链接：
`$ arm-none-eabi-ld -Ttext=0x0 -o add.elf add.o`
`-Ttext=0x0`指示地址与标签对齐，即指令从 0x0 开始。可以用nm命令查看各标签对齐情况：
    $ arm-none-eabi-nm add.elf
    ... clip ...
    00000000 t start
    0000000c t stop
ld链接生成的是elf格式，只能在操作系统下运行。应用如下命令将其转换成二进制格式：
`$ arm-none-eabi-objcopy -O binary add.elf add.bin`
当ARM处理器重启时，其从地址0x0处开始执行指令。在connex开发板上有一16MB的flash空间位于地址0x0。利用qemu模拟connex开发板，并用flash运行：
dd生成16MB flash.bin文件。
`$ dd if=/dev/zero of=flash.bin bs=4096 count=4096`
将add.bin拷贝到flash.bin起始位置：
`$ dd if=add.bin of=flash.bin bs=4096 conv=notrunc`
启动运行：
`$ qemu-system-arm -M connex -pflash flash.bin -nographic -serial /dev/null`
其中-pflash选项指示flash.bin文件作为flash memory.
可在qemu命令提示符下查看系统状态：
    (qemu) info registers
    R00=00000005 R01=00000004 R02=00000009 R03=00000000
    R04=00000000 R05=00000000 R06=00000000 R07=00000000
    R08=00000000 R09=00000000 R10=00000000 R11=00000000
    R12=00000000 R13=00000000 R14=00000000 R15=0000000c
    PSR=400001d3 -Z-- A svc32
    (qemu) xp /4iw 0x0
    0x00000000:  mov        r0, #5  ; 0x5
    0x00000004:  mov        r1, #4  ; 0x4
    0x00000008:  add        r2, r1, r0
    0x0000000c:  b  0xc
可在qemu命令提示符下执行`gdbserver`命令启动gdb server，默认端口为1234。
    ~/o/arm ❯❯❯ gdb main.o
    (gdb) target remote localhost:1234
    Remote debugging using localhost:1234
即可远程连接。
为实现从第一条指令开始控制程序运行，运行命令如下：
    ~/o/arm ❯❯❯ qemu-system-arm -S -M connex -drive file=flash.bin,if=pflash,format=raw  -nographic -serial /dev/null
    QEMU 2.4.1 monitor - type 'help' for more information
    (qemu) gdbserver
其中 -S即-singlestep，告诉qemu在执行第一条指令前停住。
### 2\. 用QEMU调试ELF格式ARM程序
如ELF文件没有用到其它系统资源，如socket，设备等，可直接运行调试。
    qemu-arm -singlestep -g 1234 file.bin
如需用到系统资源，则可用QEMU模拟操作系统，并在操作系统中部署gdbserver实现。
这里以调试GNU Hello为例：
    $ wget http://ftp.gnu.org/gnu/hello/hello-2.6.tar.gz
    $ tar xzf hello-2.6.tar.gz
    $ cd hello-2.6
    $ ./configure --host=arm-none-linux-gnueabi
    $ make
    $ cd ..
还需要在busybox文件系统中添加运行库支持，通过查看hello的依赖库：
    $ arm-none-linux-gnueabi-readelf hello-2.6/src/hello -a |grep lib
     [Requesting program interpreter: /lib/ld-linux.so.3]
     0x00000001 (NEEDED)                     Shared library: [libgcc_s.so.1]
     0x00000001 (NEEDED)                     Shared library: [libc.so.6]
    00010694  00000216 R_ARM_JUMP_SLOT   0000835c   __libc_start_main
     2: 0000835c     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.4 (2)
     89: 0000844c     4 FUNC    GLOBAL DEFAULT   12 __libc_csu_fini
     91: 0000835c     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_
     101: 00008450   204 FUNC    GLOBAL DEFAULT   12 __libc_csu_init
     000000: Version: 1  File: libgcc_s.so.1  Cnt: 1
     0x0020: Version: 1  File: libc.so.6  Cnt: 1
可以看到hello依赖库包括：“ld-linux.so.3”, “libgcc_s.so.1” 和 “libc.so.6”。
因此，需要拷贝相应链接库到busybox文件系统中。
    $ cd busybox-1.17.1/_install
    $ mkdir -p lib
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/ld-linux.so.3 lib/
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/libgcc_s.so.1 lib/
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/libm.so.6 lib/
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/libc.so.6 lib/
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/libdl.so.2 lib/
    $ cp /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/usr/bin/gdbserver usr/bin/
    $ cp ../../hello-2.6/src/hello usr/bin/
    $ cd ../../
制作rcS自启动文件：
    #!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    /sbin/mdev -s
    ifconfig lo up
    ifconfig eth0 10.0.2.15 netmask 255.255.255.0
    route add default gw 10.0.2.1
制作文件系统：
    $ cd busybox-1.17.1/_install
    $ mkdir -p proc sys dev etc etc/init.d
    $ cp ../../rcS etc/init.d
    $ chmod +x etc/init.d/rcS
    $ find . | cpio -o --format=newc | gzip > ../../rootfs.img.gz
    $ cd ../../
QEMU中运行该系统：
    $ ./qemu-0.12.5/arm-softmmu/qemu-system-arm -M versatilepb -m 128M -kernel ./linux-2.6.35/arch/arm/boot/zImage -initrd ./rootfs.img.gz -append "root=/dev/ram rdinit=/sbin/init" -redir tcp:1234::1234
进入提示符：
`# gdbserver --multi 10.0.2.15:1234`
    $ ddd --debugger arm-none-linux-gnueabi-gdb
    set solib-absolute-prefix nonexistantpath
    set solib-search-path /home/francesco/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/libc/lib/
    file ./hello-2.6/src/hello
    target extended-remote localhost:1234
    set remote exec-file /usr/bin/hello
    break main
    run
### 3\. 使用Qemu+gdb来调试内核
#### (1)编译调试版内核
对内核进行调试需要解析符号信息，所以得编译一个调试版内核。
    $ cd linux-4.14
    $ make menuconfig
    $ make -j 20
这里需要开启内核参数`CONFIG_DEBUG_INFO`和`CONFIG_GDB_SCRIPTS`。GDB提供了Python接口来扩展功能，内核基于Python接口实现了一系列辅助脚本，简化内核调试，开启`CONFIG_GDB_SCRIPTS`参数就可以使用了。
    Kernel hacking  ---> 
        [*] Kernel debugging
        Compile-time checks and compiler options  --->
            [*] Compile the kernel with debug info
            [*]   Provide GDB scripts for kernel debugging
#### (2)构建initramfs根文件系统
Linux系统启动阶段，boot
loader加载完内核文件vmlinuz后，内核紧接着需要挂载磁盘根文件系统，但如果此时内核没有相应驱动，无法识别磁盘，就需要先加载驱动，而驱动又位于`/lib/modules`，得挂载根文件系统才能读取，这就陷入了一个两难境地，系统无法顺利启动。于是有了initramfs根文件系统，其中包含必要的设备驱动和工具，boot
loader加载initramfs到内存中，内核会将其挂载到根目录`/`,然后运行`/init`脚本，挂载真正的磁盘根文件系统。
这里借助Busybox构建极简initramfs，提供基本的用户态可执行程序。
编译BusyBox，配置`CONFIG_STATIC`参数，编译静态版BusyBox，编译好的可执行文件`busybox`不依赖动态链接库，可以独立运行，方便构建initramfs。
    $ cd busybox-1.28.0
    $ make menuconfig
    Settings  --->
        [*] Build static binary (no shared libs)
    $ make -j 20
    $ make install
会安装在`_install`目录:
    $ ls _install 
    bin  linuxrc  sbin  usr
建initramfs，其中包含BusyBox可执行程序、必要的设备文件、启动脚本`init`。这里没有内核模块，如果需要调试内核模块，可将需要的内核模块包含进来。`init`脚本只挂载了虚拟文件系统`procfs`和`sysfs`，没有挂载磁盘根文件系统，所有调试操作都在内存中进行，不会落磁盘。
    $ mkdir initramfs
    $ cd initramfs
    $ cp ../_install/* -rf ./
    $ mkdir dev proc sys
    $ sudo cp -a /dev/{null, console, tty, tty1, tty2, tty3, tty4} dev/
    $ rm linuxrc
    $ vim init
    $ chmod a+x init
    $ ls
    $ bin   dev  init  proc  sbin  sys   usr
init文件内容：
    #!/bin/busybox sh         
    mount -t proc none /proc  
    mount -t sysfs none /sys  
    exec /sbin/init
打包initramfs:
    $ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz
#### (3)调试
启动内核：
    $ qemu-system-x86_64 -s -kernel /path/to/vmlinux -initrd initramfs.cpio.gz -nographic -append "console=ttyS0"
`-initrd`指定制作的initramfs。
由于系统自带的GDB版本为7.2，内核辅助脚本无法使用，重新编译了一个新版GDB：
    $ cd gdb-7.9.1
    $ ./configure --with-python=$(which python2.7)
    $ make -j 20
    $ sudo make install
启动GDB:
    $ cd linux-4.14
    $ /usr/local/bin/gdb vmlinux
    (gdb) target remote localhost:1234
使用内核提供的GDB辅助调试功能：
    (gdb) apropos lx                                    
    function lx_current -- Return current task          
    function lx_module -- Find module by name and return the module variable                                 
    function lx_per_cpu -- Return per-cpu variable      
    function lx_task_by_pid -- Find Linux task by PID and return the task_struct variable                    
    function lx_thread_info -- Calculate Linux thread_info from task variable                                
    function lx_thread_info_by_pid -- Calculate Linux thread_info from task variable found by pid            
    lx-cmdline --  Report the Linux Commandline used in the current kernel                                   
    lx-cpus -- List CPU status arrays                   
    lx-dmesg -- Print Linux kernel log buffer           
    lx-fdtdump -- Output Flattened Device Tree header and dump FDT blob to the filename                      
    lx-iomem -- Identify the IO memory resource locations defined by the kernel                              
    lx-ioports -- Identify the IO port resource locations defined by the kernel                              
    lx-list-check -- Verify a list consistency          
    lx-lsmod -- List currently loaded modules           
    lx-mounts -- Report the VFS mounts of the current process namespace                                      
    lx-ps -- Dump Linux tasks                           
    lx-symbols -- (Re-)load symbols of Linux kernel and currently loaded modules                             
    lx-version --  Report the Linux Version of the current kernel
    (gdb) lx-cmdline 
    console=ttyS0
在函数`cmdline_proc_show`设置断点，虚拟机中运行`cat /proc/cmdline`命令即会触发。