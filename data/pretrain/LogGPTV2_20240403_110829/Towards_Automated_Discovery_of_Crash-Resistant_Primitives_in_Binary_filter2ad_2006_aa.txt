title:Towards Automated Discovery of Crash-Resistant Primitives in Binary
Executables
author:Benjamin Kollenda and
Enes G&quot;oktas and
Tim Blazytko and
Philipp Koppe and
Robert Gawlik and
Radhesh Krishnan Konoth and
Cristiano Giuffrida and
Herbert Bos and
Thorsten Holz
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Towards Automated Discovery of
Crash-Resistant Primitives in Binary Executables
(Regular Paper)
Benjamin Kollenda1 Enes G¨oktas¸2 Tim Blazytko1 Philipp Koppe1 Robert Gawlik1 R.K. Konoth2
Cristiano Giuffrida2 Herbert Bos2 Thorsten Holz1
1 Horst G¨ortz Institut for IT-Security (HGI), Ruhr-Universit¨at Bochum, Germany
2 Computer Science Institute, Vrije Universiteit Amsterdam, The Netherlands
Abstract—Many modern defenses rely on address space lay-
out randomization (ASLR) to efﬁciently hide security-sensitive
metadata in the address space. Absent implementation ﬂaws, an
attacker can only bypass such defenses by repeatedly probing the
address space for mapped (security-sensitive) regions, incurring
a noisy application crash on any wrong guess. Recent work shows
that modern applications contain idioms that allow the construc-
tion of crash-resistant code primitives, allowing an attacker to
efﬁciently probe the address space without causing any visible
crash.
In this paper, we classify different crash-resistant primitives
and show that this problem is much more prominent than
previously assumed. More speciﬁcally, we show that rather
than relying on labor-intensive source code inspection to ﬁnd
a few “hidden” application-speciﬁc primitives, an attacker can
ﬁnd such primitives semi-automatically, on many classes of real-
world programs, at the binary level. To support our claims,
we develop methods to locate such primitives in real-world
binaries. We successfully identiﬁed 29 new potential primitives
and constructed proof-of-concept exploits for four of them.
I. INTRODUCTION
While arguably a weak defense by itself [42], address space
layout randomization (ASLR) plays a pivotal role in almost all
modern defenses that hide sensitive information at a random
location in memory. ASLR can be categorized as a basic form
of information hiding, namely randomizing the location of
code images, heaps and stacks in the address space. However
advanced defenses increasingly rely on the information hiding
primitives provided by ASLR to (pseudo-)protect sensitive data
such as encryption keys [31], code pointers [17], [28], and
redirection tables [9]. If implemented properly, even attackers
with full read-write access over the process’ memory will not
be able to access the sensitive data, because they are tucked
away at random memory locations in a huge address space.
Since the process memory will not contain a single pointer
to the hidden region(s), the only way for an adversary to get
to the secrets is by trial-and-error. It is almost certain that
such attempts will quickly access unmapped memory, which
normally incurs a crash. Hence, the sensitive information is
believed to be safe from attackers [31].
State-of-the-art attacks on information hiding try to reduce
the entropy of the randomization as much as possible. For
instance, they trick the program into increasing the size of
the hidden region [24], or into performing gigantic memory
allocations [35], or into leaking information via sophisticated
timing side channels [21]. However, unless the attackers
reduce the entropy to zero, the ﬁnal step in these attacks
on randomization still relies on trial and error, with a high
likelihood of crashes.
Today’s successful attacks against the residual entropy build
on the observation that various server applications automatically
restart upon a crash, enabling an attacker to repeatedly probe the
address space in a brute-force manner [13]. Hence, recent work
proposed a variety of improvements to mitigate the attacks [30].
In this paper, we assume that information hiding is perfect, all
of the proposed improvements against disclosure attacks are
in place, the attacker cannot completely drop all entropy, and
the only way to ﬁnd sensitive information is by performing a
crashless brute-force attack. As a result, an attacker needs to
ﬁnd novel crashless ways to bypass such sophisticated defenses.
If the target application has code fragments that do not crash
when reading from or writing to inaccessible memory (because
they handle such violations themselves, say, in an exception
handler), attackers may use these fragments to probe for the
secret information repeatedly. This technique was introduced
by Gawlik et al. [22]. We deﬁne crash-resistant code as code
that will not crash the program upon an invalid memory access.
It is markedly different from crash-tolerant code where a server
application immediately re-forks worker processes or a web
browser re-opens a tab after a crash happened. While crash
tolerance can serve as a vector for attacks, it is much noisier
and thus less attractive than crash resistance—thousands of
crashes in a short amount of time may easily raise alarms in
real-world scenarios. In contrast, crash resistance incurs no
crashes at all and is therefore much stealthier.
Note that crash resistance in its intended form is a classic
double-edged sword. On the one hand, it enhances software
reliability and enables applications to automatically recover
from malformed inputs that cause an access violation, also
improving user experience. On the other hand, it permits attack-
ers to abuse the crash-resistant code snippets, dubbed memory
oracles, to probe the address space [22] and even entropy-
reducing attacks have used such crash-resistant probes [24].
Note that the underlying principles of each memory oracle
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.58
189
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
can vary greatly. They can range from system level exception
handlers, over system calls to application speciﬁc exception
handling.
Unfortunately for attackers, ﬁnding crash-resistant primitives
in real-world software is labor-intensive, manual work. Given
a new application, ﬁnding such a speciﬁc primitive is difﬁcult
and rare, especially in the absence of source code. Thus, in its
original form, the approach was difﬁcult to use in a generic
way across many applications. Furthermore, the concept was
thought to be only applicable to client applications.
In this paper, we present semi-automated methods to locate
crash-resistant primitives in a given binary executable and gen-
eralize the basic concept of crash resistance by demonstrating
that the method is also applicable to server applications. Based
on our observation of the root cause for the crash-resistant
primitives, we developed two different strategies on how to
locate further instances of them in binary executables. Both
serve as a starting point for fully automated identiﬁcation of
such primitives and we demonstrate that our methods can
ﬁnd them quickly in a number of real-world server and client
applications on different platforms. While our techniques do
not produce fully-ﬂedged memory oracles in an automated
way, we substantially reduce the engineering work required to
analyze a given binary executable. More speciﬁcally, we are
able to identify in an automated way code constructs that can
serve as crash-resistant primitives.
The ﬁrst approach targets the interface between a user-
mode program and the kernel, such as system calls on Linux
or API calls on Windows. This builds on the intuition that
many such calls allow the kernel to respond to an invalid
user address given as a parameter by returning an error code
(without crashing) to user space. We leverage taint analysis
to track which bytes in attacker-controlled memory eventually
determine the appropriate parameters in calls that ﬁt crash
resistance (e.g., system calls that return -EFAULT on access
faults). Intuitively, by modifying these memory locations, the
attacker may probe the address space—assuming that the
program does not also dereference the address outside the crash-
resistant code fragment. We explore this idea for both server
applications on Linux and client applications on Windows to
study if this approach is feasible in practice.
The second approach targets exception handling code, since
this is a common technique to guard program code and respond
to error conditions—hence a prime candidate for crash-resistant
code. We look for code structures that paper over access
violations, thus yielding candidates for crash-resistant code
which we subsequently vet. In a ﬁrst step, we extract the
exception handlers from a binary and then use symbolic
execution to determine which ones handle access violations.
Given that exception handling is commonly used for client
applications on Windows [22], we focus our analysis on such
programs.
into proof-of-concept exploits to demonstrate the effectiveness
of our approach.
In summary, we make the following four contributions:
• We classify known crash-resistant primitives based on
their underlying mechanisms and use these properties as
a way to identify additional instances of memory oracles.
is possible to discover (otherwise
extremely hard-to-ﬁnd) crash-resistant code primitives
in an automated fashion in both client applications on
Windows and servers on Linux.
• We show that
it
• We are the ﬁrst to ﬁnd and use crash-resistant code
primitives on server applications. In contrast to crash-
tolerant approaches, which simply exploit the fact that
server applications typically restart upon a crash, our
technique offers much more ﬂexibility and stealthiness
for an adversary.
• We evaluated our techniques on ﬁve popular servers and
two browser applications and found 29 new crash-resistant
primitives, of which we developed four into fully ﬂedged
proof-of-concepts. In addition, we discuss how attackers
can exploit these primitives to bypass any defense utilizing
information hiding.
II. BACKGROUND AND RELATED WORK
In the following, we provide a brief overview of the technical
concepts we use in the rest of this paper to classify crash-
resistant primitives and detect them in an automated way.
A. Crash-resistant Primitives
Several papers [13], [21], [41] have shown that server
applications are vulnerable to guessing attacks against defenses
based on randomization due to their crash-tolerant nature, i.e.,
a network service typically restarts in an automated way upon
a crash. This enables an attacker to perform brute-force attacks
and eventually reach her goal. On the downside, the induced
crashes are noisy and a defender might easily notice a server
application crashing thousands of times in a small amount of
time. Such attacks relying on crash-tolerant code were believed
to not affect client applications given their hard crash policy:
client programs usually do not restart after a crash and thus an
attacker is limited to a single try to bypass a given defense.
A new twist on crashes was proposed by Gawlik et al. [22],
who demonstrated that so called memory oracles can be
leveraged to probe arbitrary memory regions and discover
reference-less memory. The authors showed two examples of
such primitives: one usable in Internet Explorer which abuses a
system feature, and one in the 64bit version of Firefox which is
based on a program speciﬁc performance optimization involving
exception handlers. Furthermore the authors noted that some
system calls, like access, might be usable as memory oracles.
In this paper we build on these ﬁndings to deﬁne categories
of memory oracles and develop tools that aid in the search for
similar primitives.
Using these two methods we successfully found 29 new
crash-resistant primitives in popular server applications and
web browsers. We also developed four primitives found in
Nginx 1.9, Lighttpd 1.4, Internet Explorer 11 and Firefox 46
190
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
an attacker cannot overﬂow a local stack variable to overwrite
return addresses. Additionally, the compiler ensures that no
references to the SafeStack are written to memory outside
of the SafeStack itself, resulting in a reference-less memory
region. As return addresses are located on the SafeStack, a
control-ﬂow hijack based on overwriting return addresses is no
longer applicable, without being able to pivot the stack pointer.
However, as crash resistance allows scanning the whole address
space, the stack can be located [24] and the return addresses
overwritten.
Another recent defense that aims to protect against mean-
ingful control ﬂow hijacks is ASLR-Guard [31]. The main
concept is that an attacker is rendered unable to retrieve a
plain text code pointer, so any control ﬂow hijack attack is
reduced to pure chance. This is achieved by (i) removing links
between data pointers and code pointers and (ii) encoding any
code pointers stored to data memory. The ﬁrst countermeasure
ensures that a data pointer leak (which is explicitly allowed
within the threat model) gives no indication of the location of
executable code. With the common form of ASLR the address
of the data section, which can be located by the attacker, allows
inferring the location of executable code of the same module
by simply adding a static offset. The ﬁrst countermeasure is
combined with a pointer protection scheme that never writes
plain text code pointers to data locations. This includes most
prominently the stack, which can be located and leaked by
an adversary. However, using a crash-resistant primitive, it is
possible to just probe memory until the executable code is
found. An attacker does not need to infer the location from
either data pointers or saved code pointers: after the executable
code has been located, known attacks like JIT-ROP [42] can
be used again.
Apart from models that merely restrict an attacker’s knowl-
edge of the memory layout, some defenses impose additional
properties on the memory. The principle of execute-only
memory (XoM) [8], [23] allows for an additional access right,
in contrast to the standard of execute access implying read
access. Without the possibility of reading the code, an adversary
has no way of determining the actual bytes used to implement
a given functionality. If this technique is combined with some
form of ﬁne-grained ASLR, it prevents code-reuse attacks
requiring knowledge about the exact code either statically,
e.g. ROP [38], or at run time, e.g. JIT-ROP. Against these
defenses, memory oracles are less useful as probing primitives
are mainly utilized to locate memory, whereas XoM does not
use any information hiding in this regard. As such, when using
plain probing attempts, the result of trying to read code would
still indicate inaccessible or unmapped memory. However,
with crash-resistant primitives that allow broad capture of
any exception, it could be possible to brute-force the code
layout. A similar attack might be possible against sophisticated
defense solutions such as Readactor [15] and Readactor++ [16],
which focus on both hiding code pointers from an attacker and
enforcing XoM.
B. Information Hiding Defenses
loaded modules. In practice, however,
Software-based fault isolation (SFI [20], [45]) is a technique
that allows code to be executed with strong safety and
security guarantees by adding checks to critical operations
such as memory accesses or control ﬂow transfers. Similarly,
techniques like SoftBound [34] or baggy bounds checking [7]
enable memory safety, preventing many attack vectors in a
generic way. Unfortunately, the overhead induced by such
approaches is prohibitively high in practice [43], which prevents
a widespread adoption. As a more efﬁcient alternative, several
recent defenses [9], [17], [28], [31] rely on information hiding
to prohibit an attacker from obtaining valuable information
such as encryption keys, code pointers, and redirection tables.
However, any defense based on information hiding is at risk
in the presence of crash resistance. Most prominently, address
space layout randomization (ASLR) can be bypassed as it
is possible to either locate the memory location of a library
directly or instead locate otherwise reference-less structures
that contain pointers to loaded binary images. For example,
on Windows this is the case for thread information blocks
(TEBs) and process environments blocks (PEBs), two data
structures which allow an attacker to retrieve the location
of all
information
leaks providing the location of code images are common. In
contrast, inferring addresses of data structures belonging to
stronger defenses beyond ASLR is not commonly possible.
Such advanced defenses typically assume an attacker equipped
with an information leak—and thus full knowledge of the
memory layout of the process—with the exception of the
meta data structures of the defense in question. Commonly,
this is implemented by only keeping the addresses to these
structures in a register and preventing any write of this value to
memory. Without knowledge of the exact location, an attacker
can thus not overwrite the data and the defense can enforce
certain properties on the protected program. Examples of such