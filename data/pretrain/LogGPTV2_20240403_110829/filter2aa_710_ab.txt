Func bounds changed
Byte patched
Comment changed
Operand type changed
Enum created or changed
Struct created, deleted, or 
changed
 1 
1
Func tail added or deleted
Seg added, deleted, or 
changed
Flirt function identified
Table 1: collabREate capabilities by IDA version
The collabREate plugin stores some information in 
the IDB itself, particularly information that ties the IDB 
to  a  particular  collabREate  project  and  information 
about  the  most  recent  communication  with  the 
collabREate server.  This allows for a more intuitive 
interface when reconnecting to an existing project. If a 
user  reconnects  to  a  project  they  have  previously 
1
In order for full structure updates to be properly 
published IDA 5.2 and an updated IDA 5.2 kernel is 
required (available upon request to Hex-Rays.)
3
worked on using an IDB that already contains project 
information, the server forwards all updates that have 
not yet been applied to that IDB.  Since the state of the 
IDB is tracked in the IDB (instead of on the server) the 
same  user  account  can  have  multiple  collabREate 
sessions  open,  or  start  a  new  collabREate  session 
without the worry that some  updates will be missed 
because the severer believes that the user account has 
already received the updates.  Additionally, should a 
user wish to abandon the changes they have made to a 
database by closing the database without saving their 
work, there will be no confusion on the server side 
regarding which updates the user may or may not have 
received the next time the database is opened.
Table 1 highlights the fact that older versions of IDA 
are not capable of publishing as much information as 
more recent versions of IDA.  This is a result of the 
evolution  of  IDA's  SDK  over  time.   Specifically,  a 
significant number of new notification types were added 
beginning with version 5.1 of the SDK.  An important 
feature of collabREate is the fact that the inability to 
send all forms of updates does not prevent a version of 
IDA from receiving all forms of updates.
A specific problem that needed to be addressed in the 
plugin was the fact that the act of applying a received 
collabREate update to a database would cause IDA to 
generate a new notification message in the database to 
which the  update  was applied.  In  order  to  prevent 
duplicate update message from being sent to the server 
and  all  associated  users,  the  collabREate  plugin 
temporarily  disables  reception  of  IDA  notifications 
whenever a received update is being applied.
3.3 CollabREate Server
The  collabREate  server  offers  two  modes  of 
operation.  A basic mode and a database mode.  When 
the  server  is  unable,  either  intentionally  or 
unintentionally, to connect to a backend database, the 
server enters into its basic mode of operation.  In basic 
mode,  the  server  functions  as  a  simple  non-
authenticating, update reflector.  Each time an update 
arrives for a given project, the update is forwarded to all 
other users that happen to be connected to the same 
project.  In basic mode, no provisions exist for persistent 
storage of individual updates.  Users who are late to join 
a basic mode project will not receive any updates that 
have been made prior to their arrival.
In  database  mode,  the  server  makes  use  of  the 
persistence  features  of  a  backend  SQL  database  to 
provide user management and authentication as well as 
allowing for multiple projects to be associated with a 
given input file, and persistent storage of all updates 
made to each project.
The  collabREate  server  component  is  currently 
implemented  in  Java  and  utilizes  JDBC  [7] to 
communicate with a back end SQL database.  The server 
is responsible for user and project management.  User 
accounts  are  managed  via  a  separate  management 
interface to the server, while projects are created by 
users as they connect to the server.  The separated server 
management component allows the server to be run as 
daemon. 
The server contains as much of the decision logic 
and state tracking as possible.  This both reduces the 
chances that a rogue plugin is able to perform actions 
that it shouldn't and it leaves the plugin to focus on the 
core ability of generating messages when events occur 
and applying updates  as  they are received  from the 
server.
The collabREate server has the capability of forking 
existing  projects  to  allow  users  to  create  alternate 
branches of a project without impacting other users. 
This is a useful feature if you wish to make (and track) a 
significant number of changes to a database without 
forcing  those  changes  on  other  users.   In  the 
collaborative spirit, users currently collabREating on a 
project are given the opportunity to follow a user that 
decides to fork, or they can choose to remain in the 
parent project.  As the server is capable of handling 
multiple projects related to a single binary input file, the 
plugin and the server take additional steps to ensure that 
users  are  connecting  to  the  proper  project  for  their 
particular database.
It  is  well  known,  that  IDA provides  no  “undo” 
capability [8].  Similar to a project fork, the collabREate 
server allows for a feature  called a  checkpoint (aka 
snapshot).  A checkpoint allows a user to apply a name 
to the particular state of the IDB present in their instance 
of IDA.  A user may choose to create a checkpoint prior 
to performing some complicated or questionable edits to 
the IDB.  If these updates result in an unwanted IDB 
state, users can choose to abandon that particular project 
by closing that IDB, opening the original binary, and 
forking a new project using the checkpoint as a starting 
point at which point the server will send the user all 
updates up to the checkpoint.
A final feature of the collabREate server is the ability 
to  restrict  users  to  specific  types  of  updates.   For 
example, one user may be restricted to a subscribe only 
profile, while another user may be allowed to publish 
only comments, while a third is allowed to publish all 
types of updates.
4
3.4 CollabREate Protocol
Communication between the plugins and the server 
occurs asynchronously.  The collabREate protocol is a 
simple binary network protocol.  The basic form of a 
datagram is shown in Table 2.  The UpdateData field 
varies  in  structure,  for  example  there  are  several 
commands that don't effect IDA at all, but are used for 
plugin to server communications such as user login and 
project selection.  These collabREate specific datagrams 
do not contain the UpdateID field.
Field Name Size
Description
Size
4 bytes Size of this datagram (inclusive)
Command
4 bytes Indicates type of communication
UpdateID
8 bytes Unique ID assigned per update
UpdateData Varies
The actual update Data.
Table 2: Basic collabREate datagram structure.
When the server is operating in database mode, all 
datagrams relating to IDA database modifications are 
stored into the SQL database.  This allows for their 
eventual  retransmission  to  users  that  connect  to  the 
associated project and request any updates that they may 
have missed.
3.5 Example CollabREate Session
Depending of a variety of factors, the process of 
setting up a collabREate session varies.  As an example, 
a typical sequence of events is provided.  
First, a collabREate server is is launched.  For this 
example, we assume the server is operating in database 
mode.  Next, the plugin is activated by an IDA user 
which prompts the user to enter server host information. 
The user authenticates with the server using standard 
techniques  [9][10].   Following  authentication,  the 
collabREate plugin sends the MD5 hash of the input file 
that the user is analyzing to the server.  The MD5 value 
is used to ensure that multiple users are in fact working 
on identical input files.  Several projects might share the 
same MD5 (indicating that there are several projects 
relating  to  the  same  original  binary  for  whatever 
reason).  The server sends back a list of projects and 
checkpoints to the plugin.  At this point, the user can 
choose to join an existing project, create a new project, 
or fork a new project from a checkpoint.  For any of 
these  methods,  the  user  may  indicate  the  types  of 
updates to which they would like the plugin to publish 
and subscribe.  At this point the IDB is tied to the 
project  using  a  unique  identifier  to  facilitate 
reconnecting to the project at a later time.
Once a collabREate session is established, users can 
largely  work  within  IDA  as  they  normally  would. 
Updates are broadcast to all other users connected to 
same project as they occur.
Attempting to activate the plugin a second time (via 
Hotkey or menu item) results in a modal dialog box 
presenting collabREate specific commands that allow 
the  user  to  fork,  create  a  checkpoint,  manage 
permissions, disconnect, etc.
4 Future Work
A number of features remain on the collabREate 
“todo” list including but not limited to the following:
1.
Web  interface  for  administration  of  a 
collabREate  server  including  the  ability  to 
add/remove/edit  users,  and well  as  delete  or 
archive projects.
2.
More  granular  client  and  server  side 
permissions.
3.
Provide  a  means  for  disconnected  users  to 
cache  updates  for  later  merging  once  a 
connection to a server is re-established.
4.
Project  migration/replication  across  different 
collabREate servers.
5.
Add revert capability to the checkpoints.
6.
Provide  an  XML  export  feature  for  update 
content.
5 Conclusions
CollabREate  is  a  step  in  the  right  direction  for 
reverse engineers requiring a means to share their work 
among several users, across several locations, or across 
multiple versions of IDA.  Leveraging the capabilities of 
the IDA SDK allows collabREate to provide a very low 
learning curve for new users without compromising the 
degree of supported IDA features.
In the future, it is anticipated that the evolving nature of 
the IDA SDK will facilitate additional useful features 
for both groups and individuals such as an undo-like 
capability.
References
[1] Ida Sync. P. Amini. 
http://pedram.redhive.com/code/ida
_plugins/ida_sync/
5
[2] IDA Pro. 
http://hex-rays.com/ 
[3] CollabREate. C. Eagle, T. Vidas. 
http://www.idabook.com/collabreate 
[4] CVS – Open Source Version Control. 
http://www.nongnu.org/cvs/ 
[5]  Subversion version control system.
http://subversion.tigris.org
[6] IDARub. Spoonm. 
http://www.metasploit.com/users/sp
oonm/idarub/
[7] The Java Database Connectivity API.  
http://java.sun.com/javase/technol
ogies/database/
[8] Eagle, Chris. The IDA Pro Book.  San Francisco: No 
Starch Press, 2008.
[9] CHAP. RFC 1994
[10] HMAC. RFC 2104
6