---
title:  User-defined functions
description: This article describes user-defined functions (scalar and views) in Azure Data Explorer.
ms.reviewer: orspodek
ms.topic: reference
ms.date: 08/13/2023
---
# User-defined functions
**User-defined functions** are reusable subqueries that can be defined as part of the query itself (**query-defined functions**), or stored as part of the database metadata (**stored functions**). User-defined functions are invoked through a **name**, are provided with zero or more **input arguments** (which can be scalar or tabular), and produce a single value (which can be scalar or tabular) based on the function **body**.
A user-defined function belongs to one of two categories:
* Scalar functions
* Tabular functions
The function's input arguments and output determine whether it's scalar or tabular, which then establishes how it might be used.
To optimize multiple uses of the user-defined functions within a single query, see [Optimize queries that use named expressions](../named-expressions.md).
## Scalar function
* Has zero input arguments, or all its input arguments are scalar values
* Produces a single scalar value
* Can be used wherever a scalar expression is allowed
* May only use the row context in which it's defined
* Can only refer to tables (and views) that are in the accessible schema
## Tabular function
* Accepts one or more tabular input arguments, and zero or more scalar input arguments, and/or:
* Produces a single tabular value
## Function names
Valid user-defined function names must follow the same [identifier naming rules](../schema-entities/entity-names.md#identifier-naming-rules) as other entities.
The name must also be unique in its scope of definition.
> [!NOTE]
> If a stored function and a table both have the same name, then any reference to that name
> resolves to the stored function, not the table name. Use the [table function](../table-function.md)
> to reference the table instead.
## Input arguments
Valid user-defined functions follow these rules:
* A user-defined function has a strongly typed list of zero or more input arguments.
* An input argument has a name, a type, and (for scalar arguments) a [default value](#default-values).
* The name of an input argument is an identifier.
* The type of an input argument is either one of the scalar data types, or a tabular schema.
Syntactically, the input arguments list is a comma-separated list of argument definitions, wrapped in parenthesis. Each argument definition is specified as
```kusto
ArgName:ArgType [= ArgDefaultValue]
```
For tabular arguments, *ArgType* has the same syntax as the table definition (parenthesis and a list of column name/type pairs), with the addition of a solitary `(*)` indicating "any tabular schema".
For example:
| Syntax | Input arguments list description |
|--|--|
| `()` | No arguments |
| `(s:string)` | Single scalar argument called `s` taking a value of type `string` |
| `(a:long, b:bool=true)` | Two scalar arguments, the second of which has a default value |
| `(T1:(*), T2(r:real), b:bool)` | Three arguments (two tabular arguments and one scalar argument) |
> [!NOTE]
> When using both tabular input arguments and scalar input arguments, put all tabular input arguments before the scalar input arguments.
## Examples
### Scalar function
> [!div class="nextstepaction"]
> Run the query
```kusto
let Add7 = (arg0:long = 5) { arg0 + 7 };
range x from 1 to 10 step 1
| extend x_plus_7 = Add7(x), five_plus_seven = Add7()
```
### Tabular function with no arguments
> [!div class="nextstepaction"]
> Run the query
```kusto
let tenNumbers = () { range x from 1 to 10 step 1};
tenNumbers
| extend x_plus_7 = x + 7
```
### Tabular function with arguments
> [!div class="nextstepaction"]
> Run the query
```kusto
let MyFilter = (T:(x:long), v:long) {
  T | where x >= v
};
MyFilter((range x from 1 to 10 step 1), 9)
```
**Output**
|x|
|---|
|9|
|10|
A tabular function that uses a tabular input with no column specified.
Any table can be passed to a function, and no table columns can be referenced inside the function.
> [!div class="nextstepaction"]
> Run the query
```kusto
let MyDistinct = (T:(*)) {
  T | distinct *
};
MyDistinct((range x from 1 to 3 step 1))
```
**Output**
|x|
|---|
|1|
|2|
|3|
## Declaring user-defined functions
The declaration of a user-defined function provides:
* Function **name**
* Function **schema** (parameters it accepts, if any)
* Function **body**
> [!Note]
> Overloading functions isn't supported. You can't create multiple functions with the same name and different input schemas.
> [!TIP]
> Lambda functions do not have a name and are bound to a name using a [let statement](../let-statement.md). Therefore, they can be regarded as user-defined stored functions.
> Example: Declaration for a lambda function that accepts two arguments (a `string` called `s` and a `long` called `i`). It returns the product of the first (after converting it into a number) and the second. The lambda is bound to the name `f`:
```kusto
let f=(s:string, i:long) {
    tolong(s) * i
};
```
The function **body** includes:
* Exactly one expression, which provides the function's return value (scalar or tabular value).
* Any number (zero or more) of [let statements](../let-statement.md), whose scope is that of the function body. If specified, the let statements must precede the expression defining the function's return value.
* Any number (zero or more) of [query parameters statements](../query-parameters-statement.md), which declare query parameters used by the function. If specified, they must precede the expression defining the function's return value.
> [!NOTE]
> Other kinds of [query statements](../statements.md) that are supported at the query "top level" aren't supported inside a function body.
> Any two statements must be separated by a semicolon.
### Examples of user-defined functions
The following section shows examples of how to use user-defined functions.
#### User-defined function that uses a let statement
The following example shows a user-defined function (lambda) that accepts a parameter named *ID*. The function is bound to the name *Test* and makes use of three **let** statements, in which the *Test3* definition uses the *ID* parameter. When run, the output from the query is 70:
> [!div class="nextstepaction"]
> Run the query
```kusto
let Test = (id: int) {
  let Test2 = 10;
  let Test3 = 10 + Test2 + id;
  let Test4 = (arg: int) {
      let Test5 = 20;
      Test2 + Test3 + Test5 + arg
  };
  Test4(10)
};
range x from 1 to Test(10) step 1
| count
```
#### User-defined function that defines a default value for a parameter
The following example shows a function that accepts three arguments. The latter two have a default value and don't have to be present at the call site.
> [!div class="nextstepaction"]
> Run the query
```kusto
let f = (a:long, b:string = "b.default", c:long = 0) {