title:Pleiades: Distributed Structural Invariants at Scale
author:Simon Bouget and
Y&apos;erom-David Bromberg and
Adrien Luxey and
François Ta&quot;ıani
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Pleiades: Distributed Structural Invariants at Scale
Simon Bouget, Yérom-David Bromberg, Adrien Luxey, François Taiani
Univ Rennes, CNRS, Inria, IRISA
F-35000 Rennes, France
Email: {francois.taiani,simon.bouget,david.bromberg,adrien.luxey}@irisa.fr
Abstract—Modern large scale distributed systems increasingly
espouse sophisticated distributed architectures characterized by
complex distributed structural invariants. Unfortunately, main-
taining these structural invariants at scale is time consuming and
error prone, as developers must take into account asynchronous
failures, loosely coordinated sub-systems and network delays.
To address this problem, we propose PLEIADES, a new frame-
work to construct and enforce large-scale distributed structural
invariants under aggressive conditions. PLEIADES combines the
resilience of self-organizing overlays, with the expressiveness
of an assembly-based design strategy. The result is a highly
survivable framework that
is able to dynamically maintain
arbitrary complex distributed structures under aggressive crash
failures. Our evaluation shows in particular that PLEIADES is
able to restore the overall structure of a 25,600 node system in
less than 11 asynchronous rounds after half of the nodes have
crashed.
I. INTRODUCTION
Modern distributed architectures are becoming increasing
large and complex. They typically bring together indepen-
dently developed sub-systems (e.g. for storage, batch process-
ing, streaming, application logic, logging, caching) into large,
geo-distributed and heterogeneous architectures [16]. These
complex architectures often require structural
invariants to
be maintained in order to ensure the correct functioning of
the overall system, i.e. regarding the number of nodes, their
connections, and the system’s overall topology.
For instance, MongoDB [26], a popular document-oriented
no-sql database, must maintain a star topology between sets
of nodes organized in cliques (Figure 1a). Similarly the cross-
datacenter replication feature of Riak [33], a production-
level key-value datastore, requires multiple rings to maintain
connections across geo-distributed datacenters (Figure 1b).
Another example are large scale distributed systems such as
for example Ceph [38] or Glusterfs1 that rely on a hierarchical
cluster of nodes to provide reliable data distribution.
These systems only provide a single service (storage), and
must be combined with other sub-systems to construct actual
applications. Complete distributed applications thus present
even more complex architectures which may for instance com-
bine peer-to-peer elements and edge-servers, with datacenter-
hosted machines in a wide range of topologies [10], [16], [41].
This trend is compounded by the fact that, in the wake of
Netﬂix, a growing number of applications are today adopting
a microservice architecture. Such applications involve thou-
1https://www.gluster.org
(a) MongoDB
(b) Riak
(c) Microservices
Figure 1: Modern distributed systems must maintain
increasingly complex structural invariants
sands of services interconnected to form complex intertwining
structures (Figure 1c).
Maintaining such structural invariants at scale is particu-
larly challenging as it requires maintaining systemic prop-
erties in spite of continuous asynchronous failures, loosely
coordinated sub-systems, and network delays. As a result,
current distributed management frameworks such as Borg [35],
Mesos [15] or Kubernetes [7] have so far limited themselves
to basic structural properties mainly based on cardinality (e.g.
maintaining X instances of the same container, or same group
of containers). This is problematic for developers who must
increasingly enforce sophisticated invariants as distributed
systems continue to grow in scope and size.
In this paper we propose PLEIADES, a new framework
to construct and enforce large-scale distributed structural
invariants in a way that is autonomous and resilient. Our
approach leverages the power of self-stabilizing overlays [2],
[37], [36] for resilience, and assembly-based modularity [6],
[32] for expressiveness into a seamless framework. The result
is a framework that can maintain at runtime an arbitrary
number of distributed structures under aggressive conditions,
including catastrophic failures.
More precisely, we make the following contributions:
• We introduce PLEIADES, an assembly-based topology
programming framework that harnesses the autonomous
properties of self-organizing overlays to provide struc-
tural distributed invariants that are both scalable and
highly resilient.
• Through the design of PLEIADES, we demonstrate how
multiple self-stabilizing protocols can be combined to
produce a sophisticated self-organizing behavior that is
both modular and scalable.
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00062
542
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
• We present an extensive evaluation of our framework
that demonstrates its beneﬁts in terms of expressive-
ness, efﬁciency, low overhead, robustness and dynamic
reconﬁguation. We show for instance how a system with
25,600 nodes organized in a ring of rings is able to
reform its overall structure after 50% of the nodes have
crashed in 11 rounds, while consuming less than 2kB of
communication per node and per round.
The remainder of the paper is organized as follows: we ﬁrst
motivate our work and present some background information
(Section II). We then present the design and workings of
PLEIADES (Section III), before moving on to its evaluation
(Section IV). We discuss related work (Section V) and con-
clude (Section VI).
II. PROBLEM, VISION, & BACKGROUND
A. Problem and vision
A growing number of distributed systems rely on complex
deployment topologies to provide their services. At the level
of individual services, Scatter [13] for instance constructs
a ring of cliques in which each individual clique executes
a Paxos instance, resulting in a scalable and resilient key-
value store with a high level of consistency. In the same vein,
MongoDB—a popular document oriented no-sql database—
maintains several replica sets, a clique of nodes using a leader-
election algorithm to implement a master-slave replication
scheme, which communicate with app servers following a
star topology [26]. Riak, a production level key-value datas-
tore derived from Amazon Dynamo, offers a cross-datacenter
replication service that connects several sink clusters around a
source cluster in a star topology. Each Riak cluster is deployed
in a ring topology, and the source cluster uses special nodes,
known as fullsync coordinators to handle the replication to
each sink [33]. The above systems only provide individual
services, and must be combined with other sub-systems to
provide a full-ﬂedged application, leading to increasingly com-
plex distributed architectures. This trend has been popularized
with the massive adoption of microservices these last years as
witnessed by industry leaders like Netﬂix, Amazon, Twitter,
Airbnb, etc.. From their loosely couple nature, thousands of
microservices can be composed and structured [34], [25].
However, if the maintenance of each individual microservice
has been simpliﬁed, it is not the case of the overall microser-
vices ecosystem that becomes more complex.
Maintaining a complex distributed architecture in a large-
scale system is particularly challenging. Such architectures
typically rely on systemic invariants that degrade rapidly in the
face of failures and delays and must be monitored and repaired
continuously. Unfortunately, their maintenance requires coor-
dination and distributed knowledge sharing, which are difﬁcult
to implement by practitioners without appropriate support.
In small systems, practitioners often overcome this chal-
lenge by intervening manually to keep systems running. As
systems grow, however, their developers must increasingly rely
on ad hoc mechanisms, developed speciﬁcally for particular
uses cases, which typically leverage simpler coordination
mechanisms such as ZooKeeper or Etcd and elaborate on
them to maintain more complex invariants. This approach is
highly problematic, as it delegates a core aspect a system’s
correctness to costly, cumbersome, and error-prone practices.
Preliminary solutions to address the structural maintenance
of large-scale systems can be found in modern deployment
automation tools such as Borg [35], Kubernetes [7], Aurora 2
or Mesos [15], and in self-organizing overlays. Unfortunately
both types of solution fall short of the resilience needs of
large-scale structural invariants. Deployment automation tools
have so far only focused on basic cardinality invariants (e.g.
in Kubernetes keeping the number of “pods”—a container
groupings—that are instantiated in a replica set at a given
level), while self-conﬁguring overlays are optimized for simple
topologies, that are only suitable for very basic deployments
(e.g. a ring, a tree, a star).
B. Self-organizing overlays
Self-organizing overlays [17], [37] are a family of decentral-
ized protocols that are able to autonomously organize a large
number of nodes into a predeﬁned topology (e.g. a torus, a
ring). Self-organizing overlays are self-healing, and can with
appropriate extension, conserve their overall shape even in the
face of catastrophic failures [5]. The scalability and robustness
of these solutions have made them particularly well adapted
to large scale self-organizing systems such as decentralized
social networks [24], [2], news recommendation engines [1],
and peer-to-peer storage systems [8].
Self-organizing overlays such as T-Man [17] or Vicinity [37]
are unfortunately monolithic in the sense that they rely on a
single user-deﬁned distance function to connect nodes into a
target structure. Simple topologies such as ring or torus are
easy to realize in this model, but more complex combinations,
such as a star of cliques, are more problematic. Self-organizing
overlays lack in particular the ability to incrementally describe
complex structures, and do not lend themselves as a result to
the enforcement of complex structural invariants.
C. Key challenges and roadmap
In this paper, we take a somewhat extreme stance, and
argue that distributed structural invariants in modern large-
scale distributed systems should be enforced through a generic,
systematic and survivable framework (i.e.
is able to
withstand catastrophic failures). More precisely, we propose
PLEIADES, a framework in which complex structural invari-
ants can be expressed as an assemblage of simple shapes,
and autonomously maintained at runtime in spite of failures,
including catastrophic events. PLEIADES harnesses the expres-
siveness of assembly-based modularity and the resilience of
basic self-organizing overlays to provide self-healing capabil-
ity for complex distributed systems at scale.
that
To avoid any single point of failure, we rely on a fully de-
centralized design. Decentralization brings a number of crucial
2aurora.apache.org
543
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
beneﬁts in terms of fault-tolerance and survivability, but also
important challenges in terms of coordination: the lack of any
central coordination point makes it hard to enforce system-
wide properties, while the scale which we target (several
thousands of nodes) renders typical deterministic agreement
protocols difﬁcult to implement efﬁciently.
In our model, a structural invariant is expressed as a combi-
nation of invididual basic shapes (ring, grid, stars) which are
then connected together to describe the constraints the overall
system must obey. The creation and maintenance of basic
shapes, of their connecting points, and of their connection
are maintained through a number of continuous self-stabilizing
protocols. These individual protocols interact with one-another
to deliver the system’s overall survivability.
The protocols making up PLEIADES must resolve a number
of key challenges in a fully decentralized manner: (i) they must
allocate nodes to “system-level” shapes, (ii) construct individ-
ual basic shapes, (iii) bootstrap identiﬁcation and communi-
cations between these shapes, (iv) and realize and maintain
the dynamic bindings that connect individual shapes according
to the developer’s intent. In the remaining of this paper, we
present these different mechanisms and how they are combined
to form PLEIADES.
III. THE PLEIADES FRAMEWORK
A. System model and overall organization
We assume that the target system executes on N nodes that
communicate through message passing (e.g. using the TCP/IP
stack). The overall organization of a node executing PLEIADES
is shown in Figure 2. Each node possesses a copy of the
system’s overall conﬁguration ﬁle (shown on the right side
of the ﬁgure) which describes (i) which basic shapes should
be instantiated, and (ii) how these shapes should be connected.
For brevity’s sake, we do not discuss how this conﬁguration
ﬁle is disseminated to every nodes: this step could rely on a
gossip broadcast [20], or, in a cloud infrastructure, each node
could retrieve the conﬁguration from its original VM image.
Because PLEIADES is self-stabilizing, nodes may receive this
conﬁguration at different points in time without impacting the
system’s eventual convergence.
Starting from this conﬁguration ﬁle, PLEIADES constructs
and enforces the corresponding structural invariant (in Fig-
ure 2, two rings connected through two links) thanks to six
self-stabilizing and fully decentralized protocols (shown as
rectangles in the ﬁgure). These six protocols fall in three cate-
gories: the three bottom protocols (Global RPS, Same Shape,
and Remote Shapes) are membership protocols (denoted by the
), i.e. helper protocols dedicated to locate and sample
symbol
nodes and shapes. The Shape Building protocol (symbol
)
in the middle of the ﬁgure constructs individual shapes, while
the top two protocols (Port Selection, and Port Connection)
realize the connection between individual shapes (shown with
the symbol
).
These six protocols execute in a fully decentralized manner,
without resorting to any centralized entities, a key property
regarding the scalability and resilience of our approach. Each
	




connected_to[ ]






towards_port[ ]


Vshape
Vlocal
VRPS





	
Vremote





	  


Figure 2: PLEIADES consists of 6 self-stabilizing protocols
that build upon one another to enforce the structural
invariant described in a conﬁguration ﬁle distributed to
all nodes in the system.
of these protocols also produces a self-stabilizing overlay. As
such, each node maintains for each protocol a small set or
array of other nodes in the system (called a view) that evolves
in order to respect speciﬁc properties. The view maintained
on a given node by each individual protocol is shown close
to each rectangle (e.g. Vlocal for the Same shape protocol,
and towards_port[ ] for the Port selection protocol). These
protocols build on one another: higher protocols in Figure 2
use the view constructed by lower protocols to construct their
own view.
In order to describe how these protocols collaborate to
deliver PLEIADES, we must start by describing how individual
shapes are described in our framework (in Section III-B),
and how new nodes join individual shapes (Section III-C),
before discussing ﬁrst the membership and shape construction
protocols (Section III-D), and ﬁnally turning to the Port
Selection and Port Connection protocols (Section III-E).
B. Describing individual shapes
A shape s is a subset Ns ⊆ N of nodes organized in a
particular elementary topology. Each shape follows a particular
template, a reusable description of a shape’s properties, that
may be instantiated several times in a conﬁguration ﬁle. (In
Figure 2 for instance, the two rings of the conﬁguration ﬁle
would be two instances of the same template.) The structure
enforced by a shape template tplate is captured by four pieces
of information, that are used by the Shape Building protocol
to realize the shape’s elementary topology:
• the deﬁnition of a position space Etplate;
• a projection function ftplate : Ns (cid:3)→ Etplate that assigns a
position in Etplate to each node selected to be part of an
instance of tplate;
• a ranking function3 dtplate : Etplate × Etplate (cid:3)→ R;
• a number of neighbors (or shape fanout) per node, ktplate.
3As mentioned in [17], self-organizing overlays employ ranking functions
that cannot always be deﬁned as global distance functions.
544
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 


left
right


	

E=[0,1[
Figure 3: A simple ring template can be deﬁned using
Ering = [0, 1[ as position space, a random projection
function, the modulo distance, and a shape fanout kring = 2.
This information is sufﬁcient for the Shape Building protocol
to connect each node in Ns to its ktplate closest neighbors
according to the ranking function dtplate().
For instance, a naive version of a self-stabilizing ring can
be deﬁned as follows (Figure 3):
Ering = [0, 1[;
fring(n) = rand ([0, 1[);
dring(x, y) = min(|x − y|, 1 − |x − y|);
kring = 2.
This setting places nodes from Ntplate randomly on a circular
identiﬁer space, and selects the two closest
instances of
each node as its neighbors. (In practice, self-stabilizing rings
typically seek to select ktplate/2 predecessors and ktplate/2
successors as neighbors of each node, to prevent clustering.
See [17], [28], [31].)
In addition to its internal structure, a shape template also
deﬁnes a set of ports to which other shapes may connect.
In PLEIADES, a port
is simply deﬁned as a position in
Etplate, labeled with a name. Returning to the ring example of
Figure 3, we may deﬁne two ports, named left and right,
by associating them with the positions 0.25 and 0.75 within
the identiﬁer space [0, 1[.
C. Node joining procedure
When a node joins a running instance of PLEIADES, it
decides which shape to contribute to based on the information
of the conﬁguration ﬁle. This joining mechanism may exploit
a wide range of strategies, depending on uses cases: nodes in
a particular location may be constrained to only join certain
shapes, or nodes with certain properties may be forbidden
to join certain shape templates. For simplicity, the version
of PLEIADES we present in this paper uses a basic joining
procedure, in which a new node randomly selects with equal
probability one of the shapes of the conﬁguration ﬁle. In
Figure 2 for instance, this means half of the nodes on average
would select the top ring, and the other half the bottom ring.
After it has selected its shape, a node populates the conﬁg-
uration variables shown in Table I, using the conﬁguration ﬁle
and the shape template deﬁnition. For instance, in the two-ring
example of Figure 2, a node contributing to the top ring would
pick a random id in [0, 1[, initialize the shape.∗ variables from
the ring template deﬁnition, and the k.∗ variables regarding
port connection from the conﬁguration ﬁle. Here we would
have for instance left.remote_shape.template = ring and
id
Table I: Conﬁguration state of node n, in shape s
Position of node n in shape s;
ID of the shape s;
Template of the shape s;
List of shape s’s ports;
Maximum size of Vlocal;
shape.template
shape.ports
shape.id
∀k ∈ shape.ports:
s
k.id
k.remote_shape.id
k.remote_shape.template
k.remote_port
Position of port k in shape s;
ID of remote shape linked to k;
Template of remote shape linked to k;
Remote port linked to port k.
Table II: Views of membership and shape building prot.
VRPS
View of the Global RPS protocol;
Vlocal
View of the Same Shape protocol s;
Vremote View of the Remote Shapes protocol;
Vshape
Table III: State of the connection protocols on node n
∀k ∈ shape.ports:
View of shape s’s shape building protocol;
is_port[k]
towards_port[k]
connected_to[k]
Boolean, whether n in charge of port k
Local node that seems closest to port k
Remote node that seems in charge of port k
left.remote_shape.remote_port = left, meaning that the
left port of the top ring should be connected to the left
port of the bottom ring.
D. The Membership and Shape Building protocols
Just after joining a shape, a node possesses no information
about which other nodes belong to the same shape, or how
to contact other nodes in other shapes. This information is
provided by PLEIADES’s three membership protocols. The
Global Random Peer-Sampling (RPS) protocol [18] maintains,
on each node, a continuously changing sample VRPS of other
nodes’ descriptors. A node descriptor allows its complete
identiﬁcation on the system. It contains its network address,
the ID of the shape it resides on, and its position on this shape.
This global peer sampling is then used to maintain two
additional membership protocols: the Same Shape Protocol
(SSP), and the Remote Shapes Protocol (RSP).
These two protocols, along with the list of neighbors re-
turned by the Shape Building protocol, are used in turn by
the Port Selection and Port Connection protocols (discussed
in Section III-E), to create and maintain the links between the
shapes according to the speciﬁcation coded in the PLEIADES
conﬁguration ﬁle.
The notations of the views maintained by each node to
implement the three membership protocols (Global RPS, Same
Shape Protocol, and Remote Shapes Protocol) and the Shape
Building protocol are summarized in Table II. We discuss each
mechanism in turn in more detail in what follows. We take
interest in a node n, that belongs to a shape s.
1) Global Random Peer Sampling (RPS): We assume that a
RPS service is available for every node, and we simply emulate
it in our experiments. Decentralized and efﬁcient solutions
exist, such as proposed by Jelasity et al. [18]. RPS protocols
545
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
nodes from shape s
Algorithm 1: SSP: Same Shape Protocol on n
Output: n.Vlocal converges to a s-sized sample of
(cid:2) Bootstrap by ﬁltering the global peer sampling
1 cand ← {n(cid:2) ∈ n.VRPS | n(cid:2).shape.id = n.shape.id}
2 cand ← cand ∪ n.Vlocal
(cid:2) Exploit our neighbors’ knowledge
3 if cand (cid:9)= ∅ then
q ← 1 random node ∈ cand
(cid:2) Remote request to q
cand ← cand ∪ q.Vlocal
4
5
6 end(cid:2) Truncation
7 n.Vlocal ← up to s random nodes ∈ cand
converge towards a constantly changing overlay that is close
to a ﬁxed-degree random graph. This graph shows a short
diameter, which is useful to propagate or build distributed
knowledge. This graph also remains connected with high
probability, even under catastrophic failures, a particularly
interesting property for our framework.
2) Same Shape Protocol (SSP): This overlay provides a
node n with a view Vlocal of neighbors in the same shape s. The
sub-procedure managing this overlay is shown in Algorithm 1.
Upon bootstrap, Vlocal is empty. Each round, n takes candidate
neighbors from the Global RPS overlay, keeping only nodes
from its shape (line 1) in cand. It goes on merging its current
Vlocal with the candidate set on line 2. If cand is not empty
(line 3), n selects a random neighbor q from cand (line 4)
and fetches q’s local view, to add it to cand (line 5). To limit
memory consumption, the size of the local view Vlocal is bound
to s elements (line 7).
If we assume the global peer-sampling overlay provides a
uniformly distributed view of the complete system, we can
least s
calculate the average number of rounds to get at
neighbors in function of the total number of nodes and shapes:
the time to ﬁnd the ﬁrst neighbor is inversely proportional to
the number of shapes, and the number of known neighbors
then grows exponentially. In practice, simulations show that
the size s needed for our framework is reached in a few rounds
(Section IV) which allows the system to converge and reach
a stable state quickly and efﬁciently.
3) Remote Shapes Protocol (RSP): This overlay is used to
initiate inter-shape contacts. Upon bootstrap, Vremote is empty.
During each round, the candidate set cand is ﬁrst ﬁlled with
the previous content in the remote view Vremote and the global
peer sampling view VRPS on line 1. Then, n randomly picks a
node q in cand (line 3), fetches its remote view q.Vremote, and
adds it to its candidate set (line 4).
Lines 7 to 11 use the candidate set cand to ﬁll n.Vremote with
one single descriptor per remote shape. To limit the memory
consumption if the topology features many shapes, we propose
“close” shape.
Algorithm 2: RSP: Remote Shapes Protocol on n
Output: n.Vremote converges to a view of one node per
(cid:2) Bootstrap using the global peer sampling
1 cand ← n.Vremote ∪ n.VRPS
(cid:2) Exploit other nodes’ knowledge
2 if cand (cid:9)= ∅ then
q ← 1 random node ∈ cand
(cid:2) Remote request to q
cand ← cand ∪ q.Vremote
3
4