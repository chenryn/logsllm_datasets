# 【CTF 攻略】法国年度黑客竞赛：Nuit du Hack 2017 Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**竞赛官网：**[ **https://quals.nuitduhack.com/**](https://quals.nuitduhack.com/)
****
****
作者：[ **FlappyPig**](http://bobao.360.cn/member/contribute?uid=1184812799)
预估稿费：600RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**Matriochka step 1**
主要逻辑在这里：
非常简单，字符串倒序然后和一个字符串比较，直接讲T开头字符串倒序就是flag。
**step2**
用了个int 3产生sigtrap信号，在信号处理函数中进行+1或者-1操作。
    from zio import *
    value = [0x0FF6FEAFE,0x0CDAF4DB6,0x8D9A9B17,0x83A147A7,0x7AD24DCA,0x0C99CA1B9,0x71CEAC15,0x932C2931]
    flag = 'W'
    key = 0xdeadbeef
    for v in value:
        c = v^key
        key = v
        flag += l32(c)
    flag2 = 'W'
    for i in range(len(flag)-1):
        if ord(flag[i])&1:
            flag2 += chr((ord(flag[i])+ord(flag[i+1]))&0xff)
        else:
            flag2 += chr((ord(flag[i+1])-ord(flag[i])+0x100)&0xff)
    print flag2
**step3**
进行了类似base64运算。不过每次运算用的字符串表在动态改变。
    import base64
    import os
    from zio import *
    f = open('./step3.bin', 'rb')
    d = f.read()[0x16e3:].split('x00')[0]
    f.close()
    base_table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    def spec_base64(d, s):
        dict = {}
        for i in range(64):
            dict[s[i]]= base_table[i]
        dict['='] = '='
        d2 = ''
        for j in range(len(d)):
            d2 += dict[d[j]]
        return base64.b64decode(d2)
    v = 0x1457893
    def get_index():
        global v
        v = ((v * 0x539) & 0xffffffff) % 0x7FFFFFFF
        return v&0x3f
    s0 = []
    for i in range(64):
        s0.append(base_table[i])
    ss = []
    for i in range(16):
        for j in range(50):
            index1 = get_index()
            index2 = get_index()
            tmp = s0[index1]
            s0[index1] = s0[index2]
            s0[index2] = tmp
        ss.append(''.join(s for s in s0))
    print len(ss)
    for i in range(16):
        d = spec_base64(d, ss[15-i])
        print d
    key2 = 'platypus'
    flag = ''
    for i in range(len(d)):
        flag += chr(ord(d[i])^ord(key2[i%8]))
    key1 = 'pony'
    flag2 = ''
    for i in range(len(flag)):
        flag2 += chr(ord(flag[i])^ord(key1[i%4]))
    print flag2
    os.popen('./step3.bin JonSn0wIsDead!AndDealWithIt! 2>step4_2.bin')
**step4**
层层异或解密代码，写了个idapython脚本自动化还原。
    from idaapi import *
    from idc import *
    from idautils import *
    def decrypt(start, end, xor_data):
        for i in range(start, end):
            a = get_byte(i)
            patch_byte(i, a^xor_data)
    def xor_dec(ea, is_patch):
        MakeCode(ea)
        count = 0
        count2 = 0
        start1 = None
        end1 = None
        start2 = None
        end2 = None
        key = None
        for i in range(0x200):
            if (Byte(ea) == 0x48) & (Byte(ea+1) == 0x8d) & (Byte(ea+2) == 0x05): #lea rax
                MakeCode(ea)
                if count == 0:
                    start1 = GetOperandValue(ea, 1)
                elif count == 1:
                    end1 = GetOperandValue(ea, 1)
                elif count == 4:
                    start2 = GetOperandValue(ea, 1)
                elif count == 5:
                    end2 = GetOperandValue(ea, 1)
                    break
                count += 1
            if (Byte(ea) == 0x83) & (Byte(ea+1) == 0xf0): #xor
                MakeCode(ea)
                if count2 == 0:
                    key = GetOperandValue(ea, 1)&0xff
                count2 += 1
            ea += 1
        if start1 is None:
            return None
        if end1 is None:
            return None
        if start2 is None:
            return None
        if end2 is None:
            return None
        if key is None:
            return None
        print hex(start1), hex(end1), hex(start2), hex(end2), hex(key)
        if is_patch:
            #decrypt(start1, end1, key)
            decrypt(start2, end2, key)
        return start2
    def find_header(ea):
        for i in range(0x200):
            if Byte(ea) == 0xe9: #jmp
                if (Byte(ea-2) == 0x74) & (Byte(ea-1) == 0x05):
                    MakeCode(ea)
                    PatchByte(ea-1, 0x90)
                    PatchByte(ea-2, 0x90)
                    print hex(ea)
                    return GetOperandValue(ea, 0)
                if (Byte(ea-2) == 0x90) & (Byte(ea-1) == 0x90):
                    MakeCode(ea)
                    PatchByte(ea-1, 0x90)
                    PatchByte(ea-2, 0x90)
                    print hex(ea)
                    return GetOperandValue(ea, 0)
            if Byte(ea) == 0xeb: #jmp
                if (Byte(ea-2) == 0x74) & (Byte(ea-1) == 0x02):
                    MakeCode(ea)
                    PatchByte(ea-1, 0x90)
                    PatchByte(ea-2, 0x90)
                    print hex(ea)
                    return GetOperandValue(ea, 0)
            ea += 1
        return None
    ea = 0x400ccf
    #ea = 0x40bc52
    ea = 0x000000000040089D
    while True:
        ea = find_header(ea)
        if ea is None:
            break
        print hex(ea)
        ea = xor_dec(ea, 1)
        if ea is None:
            break
        print hex(ea)
    print 'finished'
在解压出来的代码中，共176次比较，均需要满足。
    import os
    f = open('./and_data.txt', 'r')
    and_values = []
    for line in f:
        line = line.strip()
        if line:
            value = int(line.split(',')[1].strip('h'), 16)
            and_values.append(value)
    f.close()
    print len(and_values)
    f = open('./cmp_data.txt', 'r')
    cmp_values = []
    for line in f:
        line = line.strip()
        if line:
            value = int(line.split(',')[1].strip('h'), 16)
            cmp_values.append(value)