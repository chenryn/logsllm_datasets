### Design and Usability

Our solution assumes that users will only enter sensitive data when security indicators confirm that their inputs are being encrypted for the expected web application. Previous research has proposed various alternatives, such as Bumpy [49], which requires a special keystroke sequence to initiate a secure input session. Instead of relying on users to manually initiate the securing of their inputs, our approach automatically encrypts all user inputs within a CRYPTON-compliant web session. Since our solution requires users to pay attention to secure UI indicators during keyboard input, we anticipate similar usability challenges as those reported in prior evaluations of alternative secure input mechanisms [44]. We expect our solution to be particularly suitable for enterprise settings or mission-critical applications.

### Key Setup and Usability

The initial key setup required to establish a CRYPTON-KERNEL-to-server secure channel may pose a usability challenge for non-security experts, as it involves key upload. Alternative methods, such as adopting a trust-on-first-use model [70] (similar to SSH) or the PAKE protocol [27] to establish a secure channel based on a shared secret, could be considered. These alternatives have their own advantages and disadvantages [9]. However, adopting such alternatives does not affect our core approach and mechanisms. We chose the current setting for its strong security guarantees and compatibility with HTTPS. Recently, online hosting services like GitHub [32] and BitBucket [6] have adopted similar mechanisms to authenticate clients, providing a familiar user experience for more advanced users. We expect a similar user experience for CRYPTON-enabled websites in enterprise settings, with gradual broader adoption among general web application users.

### Implementation and Deployment

We implemented a prototype of the CRYPTON-KERNEL integrated with WebKit-GTK (rev 45311) with JIT disabled for ease of implementation. Our prototype reuses OpenSSL code for AES-GCM encryption/decryption. Since the WebKit-GTK we used does not leverage hardware-accelerated rendering, we implemented text decryption and proof of impression via software paths by intercepting calls to the bridge between WebKit and the cairo graphics library. Similarly, we intercepted signal dispatch from GTK+/Glib to the browser to encrypt user inputs. As user input events are triggered for each keystroke, we used a stream cipher to encrypt user inputs, maintaining the original positions of characters and supporting mouse text selection. When user inputs are sent to web servers, we use a CRYPTON function to re-encrypt them with the AES-GCM block cipher using the specified key. Table 2 lists the sizes of components in our prototype implementation of the CRYPTON-KERNEL. Compared to web browsers like Firefox and Chromium, which typically have around 800K to 1,100K lines of source code, the TCB in our unoptimized prototype is about 30× to 40× smaller.

### Case Studies and Evaluation

#### Micro-study on Open-source Web Applications

We performed case studies on three open-source web applications to measure two aspects: (a) how effectively our solution can protect sensitive content in real-world applications, and (b) the developer effort required for adoption. The applications chosen were RoundCube [65], a webmail server; AjaxIM [23], a web-based instant messenger; and WordPress [30], a web blogging service. We manually converted the source code of these applications by:
1. Modifying the server-side code to encrypt sensitive content before sending it to clients.
2. Identifying client-side JavaScript functions that need to decrypt sensitive data for operations and converting them into CRYPTON functions.
3. Rewriting client-side JavaScript functions that receive and process user inputs into CRYPTON functions, which encrypt user inputs before sending them to web servers.

We found that with modest effort, our solution can effectively protect typical sensitive data, such as sensitive emails, instant messages, blog entries, and comments. We developed a 450-line custom PHP library for common functionalities to process CRYPTONs in PHP applications. Table 1 summarizes the results of our case studies on the three applications. Typical client-side operations on sensitive data include trimming whitespaces in strings, serializing HTML content, emotion text replacement, and URI encoding. For brevity, detailed steps are omitted, but a summary of our modifications to the application source code is available online [1].

#### Macro-study on Real-world Web Applications

To further evaluate the applicability of the CRYPTON-KERNEL to other web applications, we conducted a larger-scale macro study. We selected Alexa Top 50 web pages and identified fields requiring sensitive username/password inputs for signup—18 out of the 50 applications had signup pages (Figure 4). We chose these applications because they often have client-side checking code on sensitive passwords (e.g., strength requirements). Next, we selected 20 popular web applications across five categories and identified scenarios where the CRYPTON-KERNEL can strengthen security against real attacks:

- **Web search pages**: We selected websites that allow users to search terms, marking search terms as sensitive due to potential third-party tracking.
- **Social networking sites**: These sites can be used to exchange private messages or post politically-sensitive comments, so posts and comments were marked as sensitive.
- **Banking sites**: Banking sites are prime targets for browser-based attacks. We selected a local bank that uses additional authentication mechanisms like one-time PassKeys, marking usernames, passwords, and one-time PassKeys as sensitive.
- **E-commerce sites**: We tested eBay, Amazon, and Babylon online commerce sites, marking auction listings and sensitive information like email addresses and credit card details as sensitive.

Table 3 provides a detailed breakdown of the sensitive information and the number and size of JavaScript functions requiring decrypted sensitive information, along with the total number and size of all JavaScript functions and the interactions with the browser and TEMI.

### Conclusion

Both micro and macro studies demonstrate the effectiveness of our solution in protecting typical sensitive data on the present web with modest adoption effort required. Our solution is particularly well-suited for enterprise and mission-critical applications, with the potential for broader adoption in general web applications.