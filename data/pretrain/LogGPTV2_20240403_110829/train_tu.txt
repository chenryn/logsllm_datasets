.br config_seccomp_filter
enabled.
.ip
when
.ir flags
is 0, this operation is functionally identical to the call:
.ip
.in +4n
.ex
prctl(pr_set_seccomp, seccomp_mode_filter, args);
.ee
.in
.ip
the recognized
.ir flags
are:
.rs
.tp
.br seccomp_filter_flag_log " (since linux 4.14)"
.\" commit e66a39977985b1e69e17c4042cb290768eca9b02
all filter return actions except
.br seccomp_ret_allow
should be logged.
an administrator may override this filter flag by preventing specific
actions from being logged via the
.ir /proc/sys/kernel/seccomp/actions_logged
file.
.tp
.br seccomp_filter_flag_new_listener " (since linux 5.0)"
.\" commit 6a21cc50f0c7f87dae5259f6cfefe024412313f6
after successfully installing the filter program,
return a new user-space notification file descriptor.
(the close-on-exec flag is set for the file descriptor.)
when the filter returns
.br seccomp_ret_user_notif
a notification will be sent to this file descriptor.
.ip
at most one seccomp filter using the
.br seccomp_filter_flag_new_listener
flag can be installed for a thread.
.ip
see
.br seccomp_unotify (2)
for further details.
.tp
.br seccomp_filter_flag_spec_allow " (since linux 4.17)"
.\" commit 00a02d0c502a06d15e07b857f8ff921e3e402675
disable speculative store bypass mitigation.
.tp
.br seccomp_filter_flag_tsync
when adding a new filter, synchronize all other threads of the calling
process to the same seccomp filter tree.
a "filter tree" is the ordered list of filters attached to a thread.
(attaching identical filters in separate
.br seccomp ()
calls results in different filters from this perspective.)
.ip
if any thread cannot synchronize to the same filter tree,
the call will not attach the new seccomp filter,
and will fail, returning the first thread id found that cannot synchronize.
synchronization will fail if another thread in the same process is in
.br seccomp_mode_strict
or if it has attached new seccomp filters to itself,
diverging from the calling thread's filter tree.
.re
.tp
.br seccomp_get_action_avail " (since linux 4.14)"
.\" commit d612b1fd8010d0d67b5287fe146b8b55bcbb8655
test to see if an action is supported by the kernel.
this operation is helpful to confirm that the kernel knows
of a more recently added filter return action
since the kernel treats all unknown actions as
.br seccomp_ret_kill_process .
.ip
the value of
.ir flags
must be 0, and
.ir args
must be a pointer to an unsigned 32-bit filter return action.
.tp
.br seccomp_get_notif_sizes " (since linux 5.0)"
.\" commit 6a21cc50f0c7f87dae5259f6cfefe024412313f6
get the sizes of the seccomp user-space notification structures.
since these structures may evolve and grow over time,
this command can be used to determine how
much memory to allocate for sending and receiving notifications.
.ip
the value of
.ir flags
must be 0, and
.ir args
must be a pointer to a
.ir "struct seccomp_notif_sizes" ,
which has the following form:
.ip
.ex
struct seccomp_notif_sizes
    __u16 seccomp_notif;      /* size of notification structure */
    __u16 seccomp_notif_resp; /* size of response structure */
    __u16 seccomp_data;       /* size of \(aqstruct seccomp_data\(aq */
};
.ee
.ip
see
.br seccomp_unotify (2)
for further details.
.\"
.ss filters
when adding filters via
.br seccomp_set_mode_filter ,
.ir args
points to a filter program:
.pp
.in +4n
.ex
struct sock_fprog {
    unsigned short      len;    /* number of bpf instructions */
    struct sock_filter *filter; /* pointer to array of
                                   bpf instructions */
};
.ee
.in
.pp
each program must contain one or more bpf instructions:
.pp
.in +4n
.ex
struct sock_filter {            /* filter block */
    __u16 code;                 /* actual filter code */
    __u8  jt;                   /* jump true */
    __u8  jf;                   /* jump false */
    __u32 k;                    /* generic multiuse field */
};
.ee
.in
.pp
when executing the instructions, the bpf program operates on the
system call information made available (i.e., use the
.br bpf_abs
addressing mode) as a (read-only)
.\" quoting kees cook:
.\"     if bpf even allows changing the data, it's not copied back to
.\"     the syscall when it runs. anything wanting to do things like
.\"     that would need to use ptrace to catch the call and directly
.\"     modify the registers before continuing with the call.
buffer of the following form:
.pp
.in +4n
.ex
struct seccomp_data {
    int   nr;                   /* system call number */
    __u32 arch;                 /* audit_arch_* value
                                   (see ) */
    __u64 instruction_pointer;  /* cpu instruction pointer */
    __u64 args[6];              /* up to 6 system call arguments */
};
.ee
.in
.pp
because numbering of system calls varies between architectures and
some architectures (e.g., x86-64) allow user-space code to use
the calling conventions of multiple architectures
(and the convention being used may vary over the life of a process that uses
.br execve (2)
to execute binaries that employ the different conventions),
it is usually necessary to verify the value of the
.ir arch
field.
.pp
it is strongly recommended to use an allow-list approach whenever
possible because such an approach is more robust and simple.
a deny-list will have to be updated whenever a potentially
dangerous system call is added (or a dangerous flag or option if those
are deny-listed), and it is often possible to alter the
representation of a value without altering its meaning, leading to
a deny-list bypass.
see also
.ir caveats
below.
.pp
the
.ir arch
field is not unique for all calling conventions.
the x86-64 abi and the x32 abi both use
.br audit_arch_x86_64
as
.ir arch ,
and they run on the same processors.
instead, the mask
.br __x32_syscall_bit
is used on the system call number to tell the two abis apart.
.\" as noted by dave drysdale in a note at the end of
.\" https://lwn.net/articles/604515/
.\"     one additional detail to point out for the x32 abi case:
.\"     the syscall number gets a high bit set (__x32_syscall_bit),
.\"     to mark it as an x32 call.
.\"
.\"     if x32 support is included in the kernel, then __syscall_mask
.\"     will have a value that is not all-ones, and this will trigger
.\"     an extra instruction in system_call to mask off the extra bit,
.\"     so that the syscall table indexing still works.
.pp
this means that a policy must either deny all syscalls with
.br __x32_syscall_bit
or it must recognize syscalls with and without
.br __x32_syscall_bit
set.
a list of system calls to be denied based on
.ir nr
that does not also contain
.ir nr
values with
.br __x32_syscall_bit
set can be bypassed by a malicious program that sets
.br __x32_syscall_bit .
.pp
additionally, kernels prior to linux 5.4 incorrectly permitted
.ir nr
in the ranges 512-547 as well as the corresponding non-x32 syscalls ored
with
.br __x32_syscall_bit .
for example,
.ir nr
== 521 and
.ir nr
== (101 |
.br __x32_syscall_bit )
would result in invocations of
.br ptrace (2)
with potentially confused x32-vs-x86_64 semantics in the kernel.
policies intended to work on kernels before linux 5.4 must ensure that they
deny or otherwise correctly handle these system calls.
on linux 5.4 and newer,
.\" commit 6365b842aae4490ebfafadfc6bb27a6d3cc54757
such system calls will fail with the error
.br enosys ,
without doing anything.
.pp
the
.i instruction_pointer
field provides the address of the machine-language instruction that
performed the system call.
this might be useful in conjunction with the use of
.i /proc/[pid]/maps
to perform checks based on which region (mapping) of the program
made the system call.
(probably, it is wise to lock down the
.br mmap (2)
and
.br mprotect (2)
system calls to prevent the program from subverting such checks.)
.pp
when checking values from
.ir args ,
keep in mind that arguments are often
silently truncated before being processed, but after the seccomp check.
for example, this happens if the i386 abi is used on an
x86-64 kernel: although the kernel will normally not look beyond
the 32 lowest bits of the arguments, the values of the full
64-bit registers will be present in the seccomp data.
a less surprising example is that if the x86-64 abi is used to perform
a system call that takes an argument of type
.ir int ,
the more-significant half of the argument register is ignored by
the system call, but visible in the seccomp data.
.pp
a seccomp filter returns a 32-bit value consisting of two parts:
the most significant 16 bits
(corresponding to the mask defined by the constant
.br seccomp_ret_action_full )
contain one of the "action" values listed below;
the least significant 16-bits (defined by the constant
.br seccomp_ret_data )
are "data" to be associated with this return value.
.pp
if multiple filters exist, they are \fiall\fp executed,
in reverse order of their addition to the filter tree\(emthat is,
the most recently installed filter is executed first.
(note that all filters will be called
even if one of the earlier filters returns
.br seccomp_ret_kill .
this is done to simplify the kernel code and to provide a
tiny speed-up in the execution of sets of filters by
avoiding a check for this uncommon case.)
.\" from an aug 2015 conversation with kees cook where i asked why *all*
.\" filters are applied even if one of the early filters returns
.\" seccomp_ret_kill:
.\"
.\"     it's just because it would be an optimization that would only speed up
.\"     the ret_kill case, but it's the uncommon one and the one that doesn't
.\"     benefit meaningfully from such a change (you need to kill the process
.\"     really quickly?). we would speed up killing a program at the (albeit
.\"     tiny) expense to all other filtered programs. best to keep the filter
.\"     execution logic clear, simple, and as fast as possible for all
.\"     filters.
the return value for the evaluation of a given system call is the first-seen
action value of highest precedence (along with its accompanying data)
returned by execution of all of the filters.
.pp
in decreasing order of precedence,
the action values that may be returned by a seccomp filter are:
.tp
.br seccomp_ret_kill_process " (since linux 4.14)"
.\" commit 4d3b0b05aae9ee9ce0970dc4cc0fb3fad5e85945
.\" commit 0466bdb99e8744bc9befa8d62a317f0fd7fd7421
this value results in immediate termination of the process,
with a core dump.
the system call is not executed.
by contrast with
.br seccomp_ret_kill_thread
below, all threads in the thread group are terminated.
(for a discussion of thread groups, see the description of the
.br clone_thread
flag in
.br clone (2).)
.ip
the process terminates
.i "as though"
killed by a
.b sigsys
signal.
even if a signal handler has been registered for
.br sigsys ,
the handler will be ignored in this case and the process always terminates.
to a parent process that is waiting on this process (using
.br waitpid (2)
or similar), the returned
.i wstatus
will indicate that its child was terminated as though by a
.br sigsys
signal.
.tp
.br seccomp_ret_kill_thread " (or " seccomp_ret_kill )
this value results in immediate termination of the thread
that made the system call.
the system call is not executed.
other threads in the same thread group will continue to execute.
.ip
the thread terminates
.i "as though"
killed by a
.b sigsys
signal.
see
.br seccomp_ret_kill_process
above.
.ip
.\" see these commits:
.\" seccomp: dump core when using seccomp_ret_kill
.\"    (b25e67161c295c98acda92123b2dd1e7d8642901)
.\" seccomp: only dump core when single-threaded
.\"    (d7276e321ff8a53106a59c85ca46d03e34288893)
before linux 4.11,
any process terminated in this way would not trigger a coredump
(even though
.b sigsys
is documented in
.br signal (7)
as having a default action of termination with a core dump).
since linux 4.11,
a single-threaded process will dump core if terminated in this way.
.ip
with the addition of
.br seccomp_ret_kill_process
in linux 4.14,
.br seccomp_ret_kill_thread
was added as a synonym for
.br seccomp_ret_kill ,
in order to more clearly distinguish the two actions.
.ip
.br note :
the use of
.br seccomp_ret_kill_thread
to kill a single thread in a multithreaded process is likely to leave the
process in a permanently inconsistent and possibly corrupt state.
.tp
.br seccomp_ret_trap
this value results in the kernel sending a thread-directed
.br sigsys
signal to the triggering thread.
(the system call is not executed.)
various fields will be set in the
.i siginfo_t
structure (see
.br sigaction (2))
associated with signal:
.rs
.ip * 3
.i si_signo
will contain
.br sigsys .
.ip *
.ir si_call_addr
will show the address of the system call instruction.
.ip *
.ir si_syscall
and
.ir si_arch
will indicate which system call was attempted.
.ip *
.i si_code
will contain
.br sys_seccomp .
.ip *
.i si_errno
will contain the
.br seccomp_ret_data
portion of the filter return value.
.re
.ip
the program counter will be as though the system call happened
(i.e., the program counter will not point to the system call instruction).
the return value register will contain an architecture\-dependent value;
if resuming execution, set it to something appropriate for the system call.
(the architecture dependency is because replacing it with
.br enosys
could overwrite some useful information.)
.tp
.br seccomp_ret_errno
this value results in the
.b seccomp_ret_data
portion of the filter's return value being passed to user space as the
.ir errno
value without executing the system call.
.tp
.br seccomp_ret_user_notif " (since linux 5.0)"
.\" commit 6a21cc50f0c7f87dae5259f6cfefe024412313f6
forward the system call to an attached user-space supervisor
process to allow that process to decide what to do with the system call.
if there is no attached supervisor (either
because the filter was not installed with the
.br seccomp_filter_flag_new_listener
flag or because the file descriptor was closed), the filter returns
.br enosys
(similar to what happens when a filter returns
.br seccomp_ret_trace
and there is no tracer).
see
.br seccomp_unotify (2)
for further details.
.ip
note that the supervisor process will not be notified
if another filter returns an action value with a precedence greater than
.br seccomp_ret_user_notif .
.tp
.br seccomp_ret_trace
when returned, this value will cause the kernel to attempt to notify a
.br ptrace (2)-based
tracer prior to executing the system call.
if there is no tracer present,
the system call is not executed and returns a failure status with
.i errno
set to
.br enosys .
.ip
a tracer will be notified if it requests
.br ptrace_o_traceseccomp
using
.ir ptrace(ptrace_setoptions) .
the tracer will be notified of a
.br ptrace_event_seccomp
and the
.br seccomp_ret_data
portion of the filter's return value will be available to the tracer via
.br ptrace_geteventmsg .
.ip
the tracer can skip the system call by changing the system call number
to \-1.
alternatively, the tracer can change the system call
requested by changing the system call to a valid system call number.
if the tracer asks to skip the system call, then the system call will
appear to return the value that the tracer puts in the return value register.
.ip
.\" this was changed in ce6526e8afa4.
.\" a related hole, using ptrace_syscall instead of seccomp_ret_trace, was
.\" changed in arch-specific commits, e.g. 93e35efb8de4 for x86 and
.\" 0f3912fd934c for arm.
before kernel 4.8, the seccomp check will not be run again after the tracer is
notified.
(this means that, on older kernels, seccomp-based sandboxes
.b "must not"
allow use of
.br ptrace (2)\(emeven
of other
sandboxed processes\(emwithout extreme care;
ptracers can use this mechanism to escape from the seccomp sandbox.)
.ip
note that a tracer process will not be notified
if another filter returns an action value with a precedence greater than
.br seccomp_ret_trace .
.tp
.br seccomp_ret_log " (since linux 4.14)"
.\" commit 59f5cf44a38284eb9e76270c786fb6cc62ef8ac4
this value results in the system call being executed after
the filter return action is logged.
an administrator may override the logging of this action via
the
.ir /proc/sys/kernel/seccomp/actions_logged
file.
.tp
.br seccomp_ret_allow
this value results in the system call being executed.
.pp
if an action value other than one of the above is specified,
then the filter action is treated as either
.br seccomp_ret_kill_process
(since linux 4.14)
.\" commit 4d3b0b05aae9ee9ce0970dc4cc0fb3fad5e85945
or
.br seccomp_ret_kill_thread
(in linux 4.13 and earlier).
.\"
.ss /proc interfaces
the files in the directory
.ir /proc/sys/kernel/seccomp
provide additional seccomp information and configuration:
.tp
.ir actions_avail " (since linux 4.14)"
.\" commit 8e5f1ad116df6b0de65eac458d5e7c318d1c05af
a read-only ordered list of seccomp filter return actions in string form.
the ordering, from left-to-right, is in decreasing order of precedence.
the list represents the set of seccomp filter return actions
supported by the kernel.
.tp
.ir actions_logged " (since linux 4.14)"
.\" commit 0ddec0fc8900201c0897b87b762b7c420436662f
a read-write ordered list of seccomp filter return actions that
are allowed to be logged.
writes to the file do not need to be in ordered form but reads from
the file will be ordered in the same way as the
.ir actions_avail
file.
.ip
it is important to note that the value of
.ir actions_logged
does not prevent certain filter return actions from being logged when
the audit subsystem is configured to audit a task.
if the action is not found in the
.ir actions_logged
file, the final decision on whether to audit the action for that task is
ultimately left up to the audit subsystem to decide for all filter return
actions other than
.br seccomp_ret_allow .
.ip
the "allow" string is not accepted in the
.ir actions_logged
file as it is not possible to log
.br seccomp_ret_allow
actions.
attempting to write "allow" to the file will fail with the error
.br einval .
.\"
.ss audit logging of seccomp actions
.\" commit 59f5cf44a38284eb9e76270c786fb6cc62ef8ac4
since linux 4.14, the kernel provides the facility to log the