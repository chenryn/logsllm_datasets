### Services and Background Operations in Android OS

Google provides client libraries to interact with background services in the Android OS. However, in versions 9, 10, and 18-21 of these client libraries, some services are invoked through implicit intents. For instance, services under the package names "com.google.android.c2dm.*" and billing services such as "com.android.vending.billing.MarketBillingService.*" and "com.android.vending.billing.InAppBillingService.*" are often invoked implicitly.

Google offers sample codes, such as Dungeons and Trivial Drive, to guide developers on how to interact with these services. In outdated sample codes, implicit intents are used to invoke these services. For example, the sample code for "com.android.vending.billing.MarketBillingService.*" was not updated until May 1, 2017, which explains the high percentage (50%) of implicit invocations for this service. Additionally, among the 23 implicit invocations for other third-party services, 20 are due to outdated SDKs. The most frequently invoked service, "com.bda.controller.IControllerService," is still invoked implicitly even in the latest SDK, "controller-sdk-std-1.3.1."

### Countermeasures

Our analysis shows that a one-size-fits-all forbidding solution cannot completely prevent service hijacking attacks. When the system converts an implicit service invocation to an explicit one, the ranking of the service list should not be manipulated by attackers. We propose several countermeasures:

#### 1. Optimization in Ranking Rules

As shown in Figure 5, before the forbidden policy was enforced, about 90% of vulnerable invocations targeted the same origin and Google third-party services. The current forbidden solution places the responsibility of converting implicit invocations to explicit ones on developers, which is challenging to enforce. An optimization of the ranking rules, giving higher priority to the same origin and Google services, could significantly reduce service hijacking attacks. This optimization can also mitigate unresolved attacks in "New Apps." With this optimization, 87.4% of vulnerable service invocations in "Old Apps" will be removed, and in "New Apps," the number of vulnerable invocations could be reduced by 44.64%, with 72% of them being vulnerable to hijacking attacks. Eight attacks in Table 2, including seven Google service invocations (five In-App Purchase services and two Google Messages services) and one VPN Connecting service invocation, could be blocked with this optimization.

#### 2. Market-Based Service Ranking

The basic idea is to delegate the evaluation of application trustworthiness to Android app markets like Google Play. The market ranks applications based on user satisfaction metrics such as Download Number (DN), Review Score (RS), and Review Number (RN). Our market-based service ranking approach calculates a ranking score using Equation 1:

\[
\text{Score} = \begin{cases} 
\frac{\omega \cdot DN + (1 - \omega) \cdot RS \cdot RN}{N \cdot S}, & \text{if } RS \geq \sigma \\
\frac{\omega \cdot DN + (1 - \omega) \cdot RS \cdot (N - RN)}{N \cdot S}, & \text{otherwise}
\end{cases}
\]

If the review score is higher than a threshold \(\sigma\), a higher review score and review number generate a higher ranking score. If the review score is lower than \(\sigma\), a higher review number lowers the ranking score. The download number, review score, and review number are normalized by potential highest values \(N\), \(S\), and \(NR\). On Google Play, \(N\) is set to 5,000,000,000, and \(S\) is set to 5. This mechanism is more difficult to manipulate because the critical values used in calculating the ranking score are hard to control by attackers.

#### 3. Signature-Based Service Verification

When developers know which service provider is trustworthy, a signature-based service verification can be adopted. Developers can use `queryIntentServices()` to get a list of services matching an implicit intent and verify the signature of the applications providing the matching services. Only applications from specific providers can be chosen to make the intent explicit. This solution provides flexibility and does not require developers to upgrade their applications when the package name or class name of the service changes. Our experiment results show that this solution has already been adopted by some apps, such as those invoking Amazon's services.

#### 4. SDK Hardening

Since many implicit service invocations are caused by outdated SDKs, hardening SDKs can dramatically reduce these invocations. One way to harden SDKs is to create a trusted SDK list for developers to download the most updated SDKs. Alternatively, an incentive mechanism can motivate SDK providers to update their SDKs regularly.

### Discussion

#### 1. Accuracy of Static Analysis

There are two challenges that impact the accuracy of our static analysis: accurately modeling Android framework APIs and analyzing string variables. The complexity of the Android runtime library and string operations can introduce overhead and sometimes cause analysis deadlocks. We focus on Intent-related framework APIs and string operations, achieving precise values for 99.52% of intents with an average analysis time of 50 seconds per application. To evaluate the accuracy, we manually verified 362 implicit service invocations and found that 353 were real, with 9 false positives.

#### 2. Accuracy of Reachability Analysis

Our static intent analyzer collects all service invocations but may include false positives from dead code. We developed reachability verification to exclude these. Our method may miss some reachable service invocations due to implicit data flow, reflection, and callbacks. We manually verify the reachability of vulnerable invocations for complex applications.

### Related Work

Research on Android security includes malware detection, system protection mechanisms, and ecosystem-based research. Component hijacking attacks have been discussed since 2011. Tools like ComDroid, CHEX, AppSealer, FlowDroid, Amandroid, IccTA, DroidSafe, and HornDroid provide flow-sensitive static analysis for privacy leaks. Other tools like Checker, DroidRA, HARVESTER, TriggerScope, and IntelliDroid improve detection of hidden malicious logic. Epicc and IC3 analyze Intent values, with IC3 reducing intent value analysis into a composite constant propagation problem.