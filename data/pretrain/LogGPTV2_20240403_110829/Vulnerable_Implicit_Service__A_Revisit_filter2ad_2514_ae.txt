services and run as background services in the Android OS.
Google provides client libraries to interact with these background
services. However, in the client libraries of version 9, 10, and 18-21,
some services are invoked through implicit intents. Similarly,
“com.google.android.c2dm.*”
implicit
and
also
For the two billing services
caused by outdated libraries.
“com.android.vending.billing.MarketBillingService.*”
and
“com.android.vending.billing.InAppBillingService.*”,
Google
provides sample codes dungeons and Trivial Drive to guide
developers on how to interact with them.
In the out-
dated sample codes,
intents are used to invoked
these two services. (cid:140)e sample codes used to invoke the
“com.android.vending.billing.MarketBillingService.*” service are
not even updated until May 01, 2017, which could explain the high
percentage (50%) for the implicit invocation of this service.
In
addition, among the 23 implicit invocations for the other third party
services, 20 are caused by the outdated SDKs. For example, the most
frequent invoked service, “com.bda.controller.IControllerService” is
invoked through an SDK, and this service is still invoked implicitly
even in the latest SDK “controller-sdk-std-1.3.1”.
implicit
5 COUNTERMEASURES
Our analysis results show that the one-size-(cid:128)ts-all forbidding solu-
tion cannot completely prevent the service hijacking a(cid:138)acks. When
the system converts an implicit service invocation to an explicit
invocation, the ranking of the service list should not be manipu-
lated by a(cid:138)ackers. We (cid:128)rst propose an optimization to the ranking
rules for the implicit and resolved service invocations, which could
block about 90% vulnerable invocations without the a(cid:138)endance
of the developers. (cid:140)en, we propose a market-based service rank-
ing algorithm to increase the di(cid:129)culty for a(cid:138)acker to manipulate
the ranking of the service list. We also discuss two other coun-
termeasures, namely, signature-based service matching and SDK
hardening, where the signature-based service matching has been
adopted by developers and the SDK hardening may dramatically
reduce service hijacking a(cid:138)acks by (cid:128)xing a small number of popular
SDK/libraries.
Figure 8: Reduction Percentage with the Optimization
5.1 Optimization in Ranking Rules
As shown in Figure 5, before the forbidden policy is enforced, about
90% vulnerable invocations are targeting at the same origin and
Google third party services. Now, the forbidden solution gives the
responsibility of converting an implicit invocations to the explicit
ones to the developers. However, it is di(cid:129)cult to control the behav-
iors of millions of developers. An optimization of the ranking rules,
i.e., giving higher priority to the same origin and Google services
when encountering an implicit or resolved service invocation, could
drastically reduce the service hijacking a(cid:138)acks. In addition, it can
also mitigate the unresolved a(cid:138)acks in the “New Apps”. Figure 8
shows that with the optimization enabled, 87.4% vulnerable service
invocations in the original “Old Apps” will be removed. In the
“New Apps”, the number of vulnerable invocations could also be
reduced by 44.64%, among which 72% are vulnerable to hijacking
a(cid:138)acks. In addition, 8 a(cid:138)acks in Table 2 could be blocked with this
optimization, including the 7 Google service invocations ( i.e., 5
In-App Purchase services and 2 Google Messages services ) and
the VPN Connecting service invocation by the “com.cisco.any*”
application (same origin service).
5.2 Market-Based Service Ranking
(cid:140)e basic idea is to delegate the Android App markets such as
Google Play to evaluate the trustworthy of each application and
then give it a rank based on the market satisfaction. (cid:140)en, when a
service is invoked implicitly, the service with the highest market
ranking will be chosen and returned by the system from the service
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1060list. For instance, Google Play Store provides three values to re(cid:131)ect
users’ satisfaction on one application, namely, Download Number
(DN), Review Score (RS) and Review Number (RN). Download number
re(cid:131)ects the popularity of an application. (cid:140)e higher download
number, the higher of the application ranking. (cid:140)e review score
and review number re(cid:131)ect the users’ satisfaction on the application.
Our market-based service ranking approach calculates a ranking
score for each application using Equation 1.
ω ∗ DN
ω ∗ DN
N
N
+
+
Scor e =
(1 − ω) ∗ RS ∗ RN
(1 − ω) ∗ RS ∗ (N − RN)
N R ∗ S
N R ∗ S
,
if RS ≥ σ
otherwise
,
(1)
If the review score is higher than a threshold σ, a higher review
score and review number will generate a higher ranking score.
However, if the review score is lower than the threshold σ, a higher
review number means more users are not satis(cid:128)ed on the applica-
tion, so a higher review number will lower the ranking score. We
use ω and 1-ω to weight the download number and the average
rating score, respectively. (cid:140)e download number, review score, and
review number are normalized by the potential highest download
number, the largest review score, and the highest review number
of an application, marked as N, S, and NR in the equation. On the
Google Play market, N is set to 5,000,000,000, and S is set to 5. NR
could be obtained by Google. Our market-based service ranking
mechanism is more di(cid:129)cult to be manipulated by the a(cid:138)ackers,
since the critical values used in calculating the ranking score are
di(cid:129)cult to be controlled by a(cid:138)ackers. For example, hijacking of the
VPN Connecting service invoked by “com.zen*” will be di(cid:129)cult, as
the apk (“Cisco Any Connect Client”) providing the service is very
popular (1,000,000 - 5,000,000 download number) and with high
rating score (4.2) and number (7072). Our approach requires Google
Play market to maintain a ranking score for each application, and
this score should be periodically updated.
5.3 Signature Based Service Veri(cid:128)cation
Market-based service ranking mechanism works well when the de-
velopers have no idea which application or service provider should
be trustworthy. If the developer knows which provider of a spe-
ci(cid:128)c service is trustworthy, a signature-based service veri(cid:128)cation
can be adopted. (cid:140)e developer can invoke queryIntentServices()
to get a list of services matching one implicit intent, and then
verify the signature of the applications providing the matching
services. Only applications provided by the speci(cid:128)c providers can
be picked to make the intent explicit. (cid:140)is solution provides the
(cid:131)exibility when the developers know which provider is trusted
for providing a speci(cid:128)c service, since it does not need the devel-
opers to upgrade their applications when the package name or
class name of the service has changed. Our experiment results
show that this solution has already been adopted by some apps.
For instance, a service provided by Amazon responding to the ac-
tion “com.amazon.identity.auth.device.authorization.*” is invoked
by 46 apps, and the service invocation method is implemented in
an Amazon SDK, which veri(cid:128)es the signature of service provider
(i.e., Amazon) before invoking the service.
5.4 SDK Hardening
Since service invocation through an SDK wrapper is popular among
Android applications and the majority of remaining implicit service
invocations are caused by outdated SDKs, the hardening of SDKs
may dramatically reduce the number of implicit service invocations.
One way to hardening SDKs is to construct a trusted SDK list for
application developers to download the most updated SDK. Alter-
natively, an incentive mechanism may be developed to motivate
the SDK providers for actively updating their SDKs.
6 DISCUSSION
6.1 Accuracy of Static Analysis
(cid:140)ere are two challenges that may have impacts on the accuracy of
our static analysis, i.e. accurately modeling of the Android frame-
work APIs [31] and accurately analyzing of string variables [27].
(cid:140)e former is caused by the tremendous number and complexity of
the APIs and classes in the Android runtime library, and the later is
caused by the complexity of the application and string operations.
It will introduce huge overhead to accurately process all APIs and
strings, and sometime even cause the analysis into dead loop. In
this work, we focus on the Intent related framework APIs and string
operations. When encountering other framework APIs and string
operations, we simply record the value as the invocation of the
API. According to our results, we can get precise values for 99.52%
of intents, and the average time used to analyze an application is
only 50 seconds ( including reachability analysis ). However, the
average time of IC3 is 232 seconds for the 62% applications generate
results. One problem introduced by simplifying the modeling is
that we may not accurately determine the values for the condition
branch. To solve this, our solution records all potential values for
the intents in di(cid:130)erent conditions.
To evaluate the accuracy of our static analysis tool, we manually
verify the implicit service invocations in the two datasets, which
include 300 and 62 direct implicit service invocations in the “Old
Apps” and “New Apps”, respectively. Among the 362 invocations,
we found that 353 were real implicit service invocations. (cid:140)e 9
false positive implicit invocations could be classi(cid:128)ed into two cate-
gories. First, the SDK version is considered in 7 invocations, and
the services will only be invoked implicitly when the SDK version
is less than 19 (i.e., Android 4.4) or 21 (i.e., Android 5.0), respec-
tively. In such case, the application still su(cid:130)ers the service hijacking
a(cid:138)acks when running on the low version Android system. Second,
2 false positive is due to false classi(cid:128)cation of the package name
se(cid:138)ing through the re(cid:131)ection call of the setPackage() method, since
re(cid:131)ection calls are not considered in our static analysis tool.
6.2 Accuracy of Reachability Analysis
Our static intent analyzer collects all services invocations through
(cid:128)nding the bindService() or startService() calling points in
the apps; however, some calling points may reside in dead code that
will never run. (cid:140)us, we develop the reachability veri(cid:128)cation to ex-
clude those false positive. Similar to IC3 [33] and FlowDroid [4], our
tool cannot deal with the implicit data(cid:131)ow of re(cid:131)ection and some
callbacks, the runtime string values, and the encrypt calculation.
(cid:140)us, our method may miss some reachable services invocations.
On the other side, since the execution logic of some applications are
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1061hard to be triggered [15, 42], we manually verify the reachability
of the vulnerable invocations.
7 RELATED WORK
(cid:140)ere are explosive researches on Android security, as shown in the
related survey [43], which includes not only the malware detection
and system protect mechanisms on di(cid:130)erent Android so(cid:137)ware stack
layers, but also ecosystem based research, such as repackaging
detection and prevention [7, 35, 38, 40, 40].
Component Hijacking Attacks. Component hijacking a(cid:138)ack
has been discussed since 2011 in ComDroid [10]. CHEX [31] and
AppSealer [44] use static taint analysis to detect the privacy leakage
and privilege escalation caused by vulnerable exported components.
FlowDroid [4], Amandroid [41], IccTA [28], DroidSafe [23] provide
(cid:131)ow-sensitive static analysis to detect privacy leaks on Android.
Later, HornDroid [8] is developed to provide be(cid:138)er accuracy and
performance by directly working on smali code. Barros et al. [6]
develop a tool called Checker, which can resolve the re(cid:131)ection
problem and Intent based implicit control (cid:131)ow with the application
source codes are available. Alternatively, DroidRA [29] solves the
re(cid:131)ection analysis using COAL solver [25]. HARVESTER [36] com-
bines program slicing with code generation and dynamic execution
to analyze the runtime values of the sensitive data during malware
analysis. TriggerScope [15] and IntelliDroid [42] improve the detec-
tion of hidden malicious logic to help detect malicious apps. In this
paper, we focus on service component hijacking a(cid:138)acks and give
a systematic analysis. Since the Intent values are critical for the
component hijacking a(cid:138)acks, Epicc [34] and IC3 [33] are two tools
to analyze Intent values. Particularly, as a successor of Epicc, IC3
reduces the intent value analysis into a composite constant prop-