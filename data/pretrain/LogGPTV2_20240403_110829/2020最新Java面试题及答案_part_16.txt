愈高，因而它实现的是先来先服务。
13/04/2018 Page 95 of 283
(3) 对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其
优先级便可升到很高，从而也可获得处理机。简言之，该算法既照顾了短作业，又考虑了作业到
达的先后次序，不会使长作业长期得不到服务。因此，该算法实现了一种较好的折衷。当然，在
利用该算法时，每要进行调度之前，都须先做响应比的计算，这会增加系统开销。
4.1.22.3. 基于时间片的轮转调度算法
1. 时间片轮转法
在早期的时间片轮转法中，系统将所有的就绪进程按先来先服务的原则排成一个队列，每次调度
时，把CPU 分配给队首进程，并令其执行一个时间片。时间片的大小从几ms 到几百ms。当执行
的时间片用完时，由一个计时器发出时钟中断请求，调度程序便据此信号来停止该进程的执行，
并将它送往就绪队列的末尾；然后，再把处理机分配给就绪队列中新的队首进程，同时也让它执
行一个时间片。这样就可以保证就绪队列中的所有进程在一给定的时间内均能获得一时间片的处
理机执行时间。
2. 多级反馈队列调度算法
(1) 应设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二
个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各
不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的
时间片要比第一个队列的时间片长一倍，……，第 i+1 个队列的时间片要比第 i 个队列的时间片长
一倍。
(2) 当一个新进程进入内存后，首先将它放入第一队列的末尾，按FCFS原则排队等待调度。当
轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时
尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按 FCFS 原则等待调度执行；如果
它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个
长作业(进程)从第一队列依次降到第n队列后，在第n 队列便采取按时间片轮转的方式运行。
(3) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第 1～(i-1)队列均空时，
才会调度第 i 队列中的进程运行。如果处理机正在第 i 队列中为某进程服务时，又有新进程进入优
先权较高的队列(第 1～(i-1)中的任何一个队列)，则此时新进程将抢占正在运行进程的处理机，即
由调度程序把正在运行的进程放回到第i队列的末尾，把处理机分配给新到的高优先权进程。
在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间
时，便能够较好的满足各种类型用户的需要。
4.1.23. 什么是 CAS（比较并交换-乐观锁机制-锁自旋）
4.1.23.1. 概念及特性
CAS（Compare And Swap/Set）比较并交换，CAS 算法的过程是这样：它包含 3 个参数
CAS(V,E,N)。V 表示要更新的变量(内存值)，E 表示预期值(旧的)，N 表示新值。当且仅当 V 值等
13/04/2018 Page 96 of 283
于 E 值时，才会将V 的值设为 N，如果 V 值和 E 值不同，则说明已经有其他线程做了更新，则当
前线程什么都不做。最后，CAS返回当前V的真实值。
CAS 操作是抱着乐观的态度进行的(乐观锁)，它总是认为自己可以成功完成操作。当多个线程同时
使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败。失败的线程不会被挂
起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，
CAS操作即使没有锁，也可以发现其他线程对当前线程的干扰，并进行恰当的处理。
4.1.23.2. 原子包 java.util.concurrent.atomic（锁自旋）
JDK1.5 的原子包：java.util.concurrent.atomic 这个包里面提供了一组原子类。其基本的特性就
是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个
线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等
到该方法执行完成，才由 JVM 从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。
相对于对于 synchronized 这种阻塞算法，CAS 是非阻塞算法的一种常见实现。由于一般 CPU 切
换时间比CPU指令集操作更加长， 所以J.U.C在性能上有了很大的提升。如下代码：
public class AtomicInteger extends Number implements java.io.Serializable {
private volatile int value;
public final int get() {
return value;
}
public final int getAndIncrement() {
for (;;) { //CAS自旋，一直尝试，直达成功
int current = get();
int next = current + 1;
if (compareAndSet(current, next))
return current;
}
}
public final boolean compareAndSet(int expect, int update) {
return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
}
}
13/04/2018 Page 97 of 283
getAndIncrement 采用了 CAS 操作，每次从内存中读取数据然后将此数据和+1 后的结果进行
CAS 操作，如果成功就返回结果，否则重试直到成功为止。而 compareAndSet 利用 JNI 来完成
CPU指令的操作。
4.1.23.3. ABA问题
CAS 会导致“ABA 问题”。CAS 算法实现一个重要前提需要取出内存中某时刻的数据，而在下时
刻比较并替换，那么在这个时间差类会导致数据的变化。
比如说一个线程 one 从内存位置 V 中取出 A，这时候另一个线程 two 也从内存中取出 A，并且
two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操
作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过
程就是没有问题的。
部分乐观锁的实现是通过版本号（version）的方式来解决ABA问题，乐观锁每次在执行数据的修
改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本
号执行+1 操作，否则就执行失败。因为每次操作的版本号都会随之增加，所以不会出现 ABA 问
题，因为版本号只会增加不会减少。
4.1.24. 什么是 AQS（抽象的队列同步器）
AbstractQueuedSynchronizer类如其名，抽象的队列式的同步器，AQS定义了一套多线程访问
共享资源的同步器框架，许多同步类实现都依赖于它，如常用的
ReentrantLock/Semaphore/CountDownLatch。
13/04/2018 Page 98 of 283
它维护了一个 volatile int state（代表共享资源）和一个 FIFO 线程等待队列（多线程争用资源被
阻塞时会进入此队列）。这里 volatile 是核心关键词，具体 volatile 的语义，在此不述。state 的
访问方式有三种:
getState()
setState()
compareAndSetState()
AQS定义两种资源共享方式
Exclusive独占资源-ReentrantLock
Exclusive（独占，只有一个线程能执行，如ReentrantLock）
Share共享资源-Semaphore/CountDownLatch
Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）。
AQS只是一个框架，具体资源的获取/释放方式交由自定义同步器去实现，AQS这里只定义了一个
接口，具体资源的获取交由自定义同步器去实现了（通过state的get/set/CAS)之所以没有定义成
abstract，是因为独占模式下只用实现 tryAcquire-tryRelease，而共享模式下只用实现
tryAcquireShared-tryReleaseShared。如果都定义成abstract，那么每个模式也要去实现另一模
式下的接口。不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实
现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/
唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：
1． isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。
2． tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。
3． tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。
4． tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余
可用资源；正数表示成功，且有剩余资源。
5． tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回
true，否则返回false。
13/04/2018 Page 99 of 283
同步器的实现是ABS核心（state资源状态计数）
同步器的实现是ABS核心，以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程
lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失
败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放
锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，
获取多少次就要释放多么次，这样才能保证state是能回到零态的。
以CountDownLatch以例，任务分为N个子线程去执行，state也初始化为N（注意N要与
线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state
会CAS减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程
就会从await()函数返回，继续后余动作。
ReentrantReadWriteLock实现独占和共享两种方式
一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现 tryAcquire-
tryRelease、tryAcquireShared-tryReleaseShared 中的一种即可。但 AQS 也支持自定义同步器
同时实现独占和共享两种方式，如ReentrantReadWriteLock。
13/04/2018 Page 100 of 283
5. JAVA 基础
5.1.1. JAVA异常分类及处理
5.1.1.1. 概念
如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下
会抛出一个封装了错误信息的对象。此时，这个方法会立刻退出同时不返回任何值。另外，调用
这个方法的其他代码也无法继续执行，异常处理机制会将代码执行交给异常处理器。
5.1.1.2. 异常分类
Throwable是 Java 语言中所有错误或异常的超类。下一层分为Error和Exception
Error
1. Error类是指java运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果
出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。
Exception（RuntimeException、CheckedException）
2. Exception 又 有 两 个 分 支 ， 一 个 是 运 行 时 异 常 RuntimeException ， 一 个 是
CheckedException。
RuntimeException 如：NullPointerException、ClassCastException；一个是检查异常
CheckedException，如 I/O 错误导致的 IOException、SQLException。 RuntimeException 是
那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 如果出现RuntimeException，那么一
定是程序员的错误.
13/04/2018 Page 101 of 283
检查异常 CheckedException：一般是外部错误，这种异常都发生在编译阶段，Java 编译器会强
制程序去捕获此类异常，即会出现要求你把这段可能出现异常的程序进行 try catch，该类异常一
般包括几个方面：
1. 试图在文件尾部读取数据
2. 试图打开一个错误格式的URL
3. 试图根据给定的字符串查找class对象，而这个字符串表示的类并不存在
5.1.1.3. 异常的处理方式
遇到问题不进行具体处理，而是继续抛给调用者 （throw,throws）
抛出异常有三种形式，一是throw,一个throws，还有一种系统自动抛异常。
public static void main(String[] args) {
String s = "abc";
if(s.equals("abc")) {
throw new NumberFormatException();
} else {
System.out.println(s);
}
}
int div(int a,int b) throws Exception{
return a/b;}
try catch 捕获异常针对性处理方式
5.1.1.4. Throw和throws的区别：
位置不同
1. throws 用在函数上，后面跟的是异常类，可以跟多个；而 throw 用在函数内，后面跟的
是异常对象。
功能不同：
2. throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方
式；throw抛出具体的问题对象，执行到throw，功能就已经结束了，跳转到调用者，并
将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语
句，因为执行不到。
3. throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，
执行throw则一定抛出了某种异常对象。
13/04/2018 Page 102 of 283
4. 两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异
常，真正的处理异常由函数的上层调用处理。