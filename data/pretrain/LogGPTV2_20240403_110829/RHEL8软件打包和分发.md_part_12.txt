而不是未指定版本的 `python`{.literal}。将 SPEC 文件的
`BuildRequires`{.literal} 中的特定 Python 3 版本配置为
`python36-rpm-macros`{.literal}、`python38-rpm-macros`{.literal} 或
`python39-rpm-macros`{.literal}。
::: table
[]{#advanced-topics.html#idm139867753397184}
**表 4.3. Python 3 RPM 的宏**
::: table-contents
  宏                    普通定义                             描述
  --------------------- ------------------------------------ ------------------------------------------------------------------
  %{\_\_python3}        /usr/bin/python3                     Python 3 解释器
  %{python3_version}    3.6                                  Python 3 解释器的完整版本。
  %{python3_sitelib}    /usr/lib/python3.6/site-packages     安装纯Python 模块的位置。
  %{python3_sitearch}   /usr/lib64/python3.6/site-packages   安装包含架构特定扩展的模块的位置。
  %py3_build                                                 使用适合系统软件包的参数运行 `setup.py build`{.literal} 命令。
  %py3_install                                               使用适合系统软件包的参数运行 `setup.py install`{.literal} 命令。
:::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#con_automatic-provides-for-python-rpms_assembly_packaging-python-3-rpms}自动提供 Python RPM {.title}
:::
在打包 Python 项目时，如果这些目录存在，请确保在生成的 RPM
中包含以下目录：
::: itemizedlist
-   `.dist-info`{.literal}
-   `.egg-info`{.literal}
-   `.egg-link`{.literal}
:::
在这些目录中，RPM 构建过程会自动生成虚拟 `pythonX.Ydist`{.literal}，例如
`python3.6dist(detox)`{.literal}。这些虚拟提供由
[**%python_enable_dependency_generator**]{.strong} 宏指定的软件包使用。
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#assembly_handling-interpreter-directives-in-python-scripts_advanced-topics}在 Python 脚本中处理解释器指令 {.title}
:::
在 Red Hat Enterprise Linux 8 中，可执行 Python 脚本应该使用在最小
Python 版本中明确指定的解释器指令（也称为 hashbangs 或
shebangs）。例如：
``` literallayout
#!/usr/bin/python3
#!/usr/bin/python3.6
#!/usr/bin/python2
```
在构建任何 RPM
软件包时，`/usr/lib/rpm/redhat/brp-mangle-shebangs`{.literal} buildroot
策略(BRP)脚本会自动运行，并尝试在所有可执行文件中更正解释器指令。
当遇到带有模糊解释器指令的 Python 脚本时，BRP 脚本会生成错误，例如：
``` literallayout
#!/usr/bin/python
```
或者
``` literallayout
#!/usr/bin/env python
```
::: section
::: titlepage
## []{#advanced-topics.html#proc_modifying-interpreter-directives-in-python-scripts_assembly_handling-interpreter-directives-in-python-scripts}在 Python 脚本中修改解释器指令 {.title}
:::
修改 Python 脚本中会导致 RPM 构建时构建错误的解释器指令。
::: itemizedlist
**先决条件**
-   您的 Python 脚本中的一些解释指令会导致构建错误。
:::
::: title
**流程**
:::
要修改解释程序指令，请完成以下任务之一：
::: itemizedlist
-   应用 `platform-python-devel`{.literal} 软件包中的
    `pathfix.py`{.literal} 脚本：
    ``` literallayout
    # pathfix.py -pn -i %{__python3} PATH …​
    ```
    请注意，可以指定多个 `PATHs`{.literal}。如果 `PATH`{.literal}
    是一个目录，`pathfix.py`{.literal} 会以递归方式扫描与模式
    `^[a-zA-Z0-9_]+\.py$`{.literal} 匹配的任何 Python
    脚本，而不仅仅是包含模糊解释器指令的 Python 脚本。在
    `%prep`{.literal} 部分或 `%install`{.literal} 部分末尾添加这个命令。
-   修改打包的 Python
    脚本，使其符合预期的格式。为此，`pathfix.py`{.literal} 也可以在 RPM
    构建过程外使用。当在 RPM 构建之外运行 `pathfix.py`{.literal}
    时，使用解释器指令的路径（如 `/usr/bin/python3`{.literal}
    ）替换上例中的 `%{__python3}`{.literal}。
:::
如果打包的 Python 脚本需要 Python 3.6
以外的版本，请调整前面的命令使其包含所需的版本。
:::
::: section
::: titlepage
## []{#advanced-topics.html#proc_changing-interpreter-directives-in-your-custom-packages_assembly_handling-interpreter-directives-in-python-scripts}在自定义软件包中更改 /usr/bin/python3 解释器指令 {.title}
:::
默认情况下，`/usr/bin/python3`{.literal} 形式的解释程序指令被替换为从
`platform-python`{.literal} 软件包指向 Python 的解释程序指令，该指令用于
Red Hat Enterprise Linux 的系统工具。您可以更改自定义软件包中的
`/usr/bin/python3`{.literal} 解释程序指令，使其指向从 AppStream
存储库安装的特定 Python 版本。
::: itemizedlist
**流程**
-   要为特定版本的 Python 构建软件包，请将相应 `python`{.literal}
    软件包的 `python*-rpm-macros`{.literal} 子软件包添加到 SPEC 文件的
    [**BuildRequires**]{.strong} 部分。例如，对于 Python
    3.6，包括以下行：
    ``` literallayout
    BuildRequires:  python36-rpm-macros
    ```
    因此，自定义软件包中的 `/usr/bin/python3`{.literal}
    解释程序指令会自动转换为 `/usr/bin/python3.6`{.literal}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要防止 BRP 脚本检查和修改解释器指令，请使用以下 RPM 指令：
``` literallayout
%undefine %brp_mangle_shebangs
```
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#ruby-gem-packages_advanced-topics}RubyGems 软件包 {.title}
:::
本节介绍 RubyGems 软件包是什么，以及如何将它们重新打包到 RPM 中。
::: section
::: titlepage
## []{#advanced-topics.html#what-rubygems-are_ruby-gem-packages}RubyGems 是什么 {.title}
:::
Ruby 是一个动态、解释、反射、面向对象、通用编程语言。
在 Ruby 中编写的程序通常使用 RubyGems 项目打包，该项目提供特定的 Ruby
打包格式。
由 RubyGems 创建的软件包称为 gems，它们也可以重新打包到 RPM 中。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本文档引用了使用 `gem`{.literal} 前缀的 RubyGems 概念的术语，例如
.gemspec 用于 `gem specification`{.literal}，与 RPM 相关的术语不限定。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#ruby-gem-rpm-relation_ruby-gem-packages}RubyGems 与 RPM 的关系 {.title}
:::
RubyGems 代表 Ruby 自己的打包格式。但是，RubyGems 包含的元数据与 RPM
所需的元数据类似，它启用了从 RubyGems 转换到 RPM 的元数据。
根据 [Ruby Packaging
指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/Ruby/#_rubygems){.link}，可以通过以下方式将
RubyGems 软件包重新打包为 RPM：
::: itemizedlist
-   此类 RPM 适合其余分发版本。
-   最终用户可以通过安装适当的 RPM 打包 gem 来满足 gem 的依赖关系。
:::
RubyGems 使用与 RPM 类似的术语，如 SPEC
文件、软件包名称、依赖项和其他项目。
要适应其余的 RHEL RPM 发行版本，RubyGems
创建的软件包必须遵循以下列出的约定：
::: itemizedlist
-   gems 的名称必须遵循以下模式：
    ``` literallayout
    rubygem-%{gem_name}
    ```
-   要实施 shebang 行，必须使用以下字符串：
    ``` literallayout
    #!/usr/bin/ruby
    ```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#creating-rpm-packages-from-rubygems_ruby-gem-packages}从 RubyGems 软件包创建 RPM 软件包 {.title}
:::
这部分论述了如何从 RubyGems 创建的软件包创建 RPM 软件包。
要为 RubyGems 软件包创建源 RPM，需要两个文件：
::: itemizedlist
-   gem 文件
-   RPM SPEC 文件
:::
::: section
::: titlepage
### []{#advanced-topics.html#rubygems-spec-file-conventions}RubyGems SPEC 文件惯例 {.title}
:::
RubyGems SPEC 文件必须满足以下约定：
::: itemizedlist
-   包含 `%{gem_name}`{.literal} 的定义，这是 gem 规格中的名称。
-   软件包的来源必须是发布的 gem 存档的完整 URL；软件包的版本必须是 gem
    的版本。
-   包含一个按如下所示定义的 `BuildRequires:`{.literal}
    指令，以便拉取构建所需的宏。
    ``` literallayout
    BuildRequires:rubygems-devel
    ```
-   不包含任何 RubyGems `Requires`{.literal} 或
    `Provides`{.literal}，因为它们是自动生成的。
-   不包含如下定义的 `BuildRequires:`{.literal} 指令，除非您要明确指定
    Ruby 版本兼容性：
    ``` literallayout
    Requires: ruby(release)
    ```
    自动生成的
    RubyGems(`Requires: ruby(rubygems)`{.literal})的依赖性就足够了。
:::
#### []{#advanced-topics.html#macros}宏
RubyGems 创建的软件包的宏由 `rubygems-devel`{.literal} 软件包提供。
::: table
[]{#advanced-topics.html#idm139867750718288}
**表 4.4. RubyGems 的宏**
::: table-contents
  宏名称              扩展路径                                                   使用
  ------------------- ---------------------------------------------------------- ---------------------------
  %{gem_dir}          /usr/share/gems                                            gem 结构的顶级目录。
  %{gem_instdir}      %{gem_dir}/gems/%{gem_name}-%{version}                     包含 gem 实际内容的目录。
  %{gem_libdir}       %{gem_instdir}/lib                                         gem 的库目录。
  %{gem_cache}        %{gem_dir}/cache/%{gem_name}-%{version}.gem                缓存的 gem。
  %{gem_spec}         %{gem_dir}/specifications/%{gem_name}-%{version}.gemspec   gem 规格文件。
  %{gem_docdir}       %{gem_dir}/doc/%{gem_name}-%{version}                      gem 的 RDoc 文档。
  %{gem_extdir_mri}   %{\_libdir}/gems/ruby/%{gem_name}-%{version}               gem 扩展名的目录。
:::
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#rubygems-spec-file-example}RubyGems SPEC 文件示例 {.title}
:::
本节提供了一个用于构建 gems 的示例以及其特定部分的说明。
::: title
**RubyGems SPEC 文件示例**
:::
``` literallayout
%prep
%setup -q -n  %{gem_name}-%{version}
# Modify the gemspec if necessary
# Also apply patches to code if necessary
%patch0 -p1
%build
# Create the gem as gem install only works on a gem file
gem build ../%{gem_name}-%{version}.gemspec
# %%gem_install compiles any C extensions and installs the gem into ./%%gem_dir
# by default, so that we can move it into the buildroot in %%install
%gem_install
%install
mkdir -p %{buildroot}%{gem_dir}
cp -a ./%{gem_dir}/* %{buildroot}%{gem_dir}/
# If there were programs installed:
mkdir -p %{buildroot}%{_bindir}
cp -a ./%{_bindir}/* %{buildroot}%{_bindir}
# If there are C extensions, copy them to the extdir.
mkdir -p %{buildroot}%{gem_extdir_mri}
cp -a .%{gem_extdir_mri}/{gem.build_complete,*.so} %{buildroot}%{gem_extdir_mri}/
```
下表解释了 RubyGems SPEC 文件中特定项目的详情：
::: table
[]{#advanced-topics.html#idm139867790868880}