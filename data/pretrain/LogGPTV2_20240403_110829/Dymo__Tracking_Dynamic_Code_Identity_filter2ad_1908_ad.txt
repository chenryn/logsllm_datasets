### 4. Performance Analysis

Upon launching Internet Explorer, Firefox, and Thunderbird, 95%, 93%, and 97% of the DLLs, respectively, were loaded within one second. The loading of these DLLs imposes significant overhead on Dymo, as it necessitates the computation of hashes for new code pages. Consequently, the startup phase represents a worst-case scenario for measuring the system's performance impact.

To quantify the startup overhead, we conducted tests on the native platform, measuring the time until each application’s main window became responsive to user input, both with and without Dymo. We utilized the PassMark AppTimer tool for these measurements. The results are summarized in Table 1. 

| Application        | Without Dymo (ms) | With Dymo (ms) | Overhead (%) |
|--------------------|-------------------|----------------|--------------|
| Internet Explorer  | 447               | 804            | 80%          |
| Firefox            | 450               | 634            | 41%          |
| Thunderbird        | 799               | 1047           | 31%          |

While the overhead for Internet Explorer is notably high, the browser still starts in under one second, which we consider to be below the threshold of user awareness and thus acceptable. This higher overhead can likely be attributed to Internet Explorer's multi-process, Loosely-Coupled IE (LCIE) architecture [23], which causes Dymo to duplicate its initialization efforts across multiple processes.

### 5. Memory Management Overhead

In addition to the startup overhead, we also examined the performance penalty introduced by our modifications to memory management routines, particularly the page fault handler. For this, we developed a tool that allocated a 2 GB buffer in memory and then accessed a byte on each consecutive page, causing numerous page faults. This allowed us to measure the overhead experienced by memory-intensive applications after the code regions (binary image and libraries) are loaded and the appropriate identity labels are computed. Over 20 iterations, we found that Dymo incurs an average overhead of 7.09%.

### 6. Security Analysis

In this section, we discuss the security implications of our proposed identity label mechanism. In our threat model, we assume an attacker controls a malicious process and aims to perform a security-sensitive operation restricted to a set of applications with known, trusted identities (labels). Alternatively, the attacker might attempt to send a network packet with the label of a trusted process.

The malicious process could try to obtain one of the trusted labels by creating executable memory regions that hash to the same values as those of a trusted process. Given that we use a strong hash function (SHA-1), it is computationally infeasible for the attacker to allocate such a region. Additionally, adding code to a trusted program to carry out a sensitive operation on the attacker’s behalf (a confused deputy attack [10]) would invalidate the identity label due to the additional, unknown hash value.

A malware process might also attempt to tamper with the data of a process to indirectly modify its operations. This is more challenging and depends on the normal functionality of the targeted program. A debugger can facilitate this attack by manipulating the heap or stack areas. We prevent this by disabling access to the Windows debugging API for all user processes when Dymo is running. These APIs are rarely used by regular users, making the reduced functionality acceptable for non-developers.

Another method to tamper with an application's execution without injecting additional code is through non-control-data attacks, which modify decision-making data. While these attacks are realistic threats [4], they are significantly more difficult to execute than arbitrary code injection. Moreover, the malware must exploit an application vulnerability suitable for the intended functionality. Our current system does not specifically defend against these attacks, but it benefits from operating system improvements like Address Space Layout Randomization (ASLR) [2], which makes such exploits more difficult.

### 7. Related Work

Our system, Dymo, aims to track the run-time identity of executing processes, a goal related to previous work on identifying local and remote applications.

#### Local Identification

Patagonix [14] is a hypervisor-based system that tracks executing binaries to detect hidden processes. It runs the target host in a virtual machine and provides a secure channel to identify and list the host’s running processes. Patagonix uses NX hardware support to detect code execution, similar to Dymo. However, it has limitations: it must bridge a semantic gap, periodically refresh its state, and does not support JIT compiled code. Dymo addresses these issues.

Static code identity problems are related to data integrity tools like Tripwire [12]. Various program-level anomaly detection systems monitor system calls and their arguments [6, 13]. Digital rights management (DRM) systems have also recognized the brittleness of static hashing and proposed more robust mechanisms [8].

#### Remote Identification

Sailer et al. [20] present an approach using a Trusted Platform Module (TPM) to identify applications for remote attestation. Their method computes hashes at load-time, resulting in static identity measurements. Dymo, in contrast, implements a dynamic code identity primitive that measures changes during runtime. Haldar et al. [9] propose semantic remote attestation, which is complementary to our approach.

Network access control systems regulate hosts’ network access based on policies, enforced either by agents on the hosts or in the network [7]. Pedigree [19] is a distributed information flow tracking system that records interactions between processes and resources, attaching taint sets to network packets. While related, the semantics of labels differ from Dymo.

### 8. Conclusions

This paper introduces Dymo, a system providing a dynamic code identity primitive for tracking the run-time integrity of processes. Dymo ensures reliable tracking of all code associated with an application, enabling precise application-based access control policies, such as malware detection and application whitelisting. We extended Dymo to label network packets with information identifying the responsible program. Our prototype, developed for Windows XP, was evaluated in realistic settings, demonstrating reliable identity tracking with acceptable performance overhead. Future work will focus on extending Dymo to other platforms and developing sophisticated network-level policy enforcement mechanisms.

### Acknowledgments

This work was partially supported by ONR grant N0001-40911042, ARO grant W911NF0910553, NSF grants CNS-0845559 and CNS-0905537, and Secure Business Austria.

### References

1. Bayer, U., Habibi, I., Balzarotti, D., Kirda, E., Kruegel, C.: A View on Current Malware Behaviors. In: 2nd USENIX Workshop on Large-Scale Exploits and Emergent Threats (2009)
2. Bhatkar, S., DuVarney, D., Sekar, R.: Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In: 12th USENIX Security Symposium (2003)
3. Blazakis, D.: Interpreter Exploitation. In: 4th USENIX Workshop on Offensive Technologies (2010)
4. Chen, C., Xu, J., Sezer, E., Gauriar, P., Iyer, R.: Non-Control-Data Attacks Are Realistic Threats. In: 14th USENIX Security Symposium (2005)
5. Fewer, S.: Reflective DLL Injection. Tech. rep., Harmony Security (2008)
6. Forrest, S., Hofmeyr, S.A., Somayaji, A., Longstaff, T.A.: A Sense of Self for UNIX Processes. In: 17th IEEE Symposium on Security and Privacy (1996)
7. Frias-Martinez, V., Sherrick, J., Stolfo, S.J., Keromytis, A.D.: A Network Access Control Mechanism Based on Behavior Profiles. In: 25th Annual Computer Security Applications Conference (2009)
8. Haitsma, J., Kalker, T., Oostveen, J.: Robust Audio Hashing for Content Identification. In: 2nd International Workshop on Content-Based Multimedia Indexing (2001)
9. Haldar, V., Chandra, D., Franz, M.: Semantic Remote Attestation A Virtual Machine Directed Approach to Trusted Computing. In: 3rd USENIX Virtual Machine Research and Technology Symposium (2004)
10. Hardy, N.: The Confused Deputy. Operating Systems Review 22(4), 36–38 (1988)
11. Hunt, G., Brubacher, D.: Detours: Binary Interception of Win32 Functions. In: 3rd USENIX Windows NT Symposium (1999)
12. Kim, G.H., Spafford, E.H.: The Design and Implementation of Tripwire: A File System Integrity Checker. In: 2nd ACM Conference on Computer and Communications Security (1994)
13. Kruegel, C., Mutz, D., Valeur, F., Vigna, G.: On the Detection of Anomalous System Call Arguments. In: 8th European Symposium on Research in Computer Security (2003)
14. Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor Support for Identifying Covertly Executing Binaries. In: 17th USENIX Security Symposium (2008)
15. Mandelin, D.: An Overview of TraceMonkey (July 2009), http://hacks.mozilla.org/2009/07/tracemonkey-overview/
16. Microsoft Corporation: A detailed description of the Data Execution Prevention (DEP) feature (September 2006), http://support.microsoft.com/kb/875352
17. Microsoft Corporation: Windows Vista Application Development Requirements for User Account Control (UAC) (April 2007), http://msdn.microsoft.com/en-us/library/aa905330.aspx
18. Parno, B., McCune, J.M., Perrig, A.: Bootstrapping Trust in Commodity Computers. In: 31st IEEE Symposium on Security and Privacy (2010)
19. Ramachandran, A., Bhandankar, K., Tariq, M.B., Feamster, N.: Packets with Provenance. Tech. Rep. GT-CS-08-02, Georgia Institute of Technology (2008)
20. Sailer, R., Zhang, X., Jaeger, T., van Doorn, L.: Design and Implementation of a TCG-based Integrity Measurement Architecture. In: 13th USENIX Security Symposium (2004)
21. Saltzer, J.H., Schroeder, M.D.: The Protection of Information in Computer Systems. Proceedings of the IEEE 63(9), 1278–1308 (1975)
22. Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In: 14th ACM Conference on Computer and Communications Security (2007)
23. Zeigler, A.: IE8 and Loosely-Coupled IE (LCIE) (March 2008), http://blogs.msdn.com/b/ie/archive/2008/03/11/ie8-and-loosely-coupled-ie-lcie.aspx
24. Zetter, K.: Google Hack Attack Was Ultra Sophisticated, New Details Show (January 2010), http://www.wired.com/threatlevel/2010/01/operation-aurora/