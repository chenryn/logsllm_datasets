# An Information-Flow Type-System for Mixed Protocol Secure Computation

**Author:** Florian Kerschbaum  
**Affiliation:** SAP Applied Research, Karlsruhe, Germany  
**Email:** [EMAIL]

## Abstract
Several domain-specific programming languages are available for secure computation. Among these, those based on generic programming languages allow the mixing of different protocol primitives, enabling a broader and potentially more efficient range of protocols. While this flexibility can enhance protocol performance, it also introduces the risk of creating insecure protocols. This paper introduces a security type system that facilitates the mixing of protocol primitives in a generic programming language while ensuring that well-typed programs are secure in the semi-honest model. Consequently, any compiled protocol must be secure. We extend the L1 language with our security type system and evaluate its implementation through two protocols from the literature, demonstrating that our type system supports the provably secure implementation of even complex protocols.

## Categories and Subject Descriptors
- **D.4.6 [Operating Systems]:** Security and Protection—Cryptographic controls
- **D.3.4 [Programming Languages]:** Processors—Compilers

## General Terms
- Security
- Programming Languages

## Keywords
- Secure Two-Party Computation
- Type System
- Programming
- Domain-Specific Language
- Information Flow

## 1. Introduction
Secure (two-party) computation [37] enables two parties to compute a function \( f \) over their joint, private inputs \( x \) and \( y \), respectively, without either party inferring additional information about the other's input beyond what can be deduced from their own input and the output. Secure computation has numerous applications, particularly in the financial sector, and has been successfully deployed in commercial and industrial settings [5, 6, 7, 23].

Implementing secure computation protocols is challenging due to the need to handle arbitrary functionality and adhere to rigorous security requirements. Specialized protocols, often combining multiple primitives, are developed for specific problems to achieve better efficiency. However, these protocols require manual verification and security proofs.

Current domain-specific programming languages for secure computation [2, 4, 9, 18, 19, 28, 35] do not fully address these issues. Some are tied to specific protocols, limiting the ability to implement more efficient, specialized protocols. Others, built on generic languages like Python [9] or Java [19, 35], allow the implementation of insecure protocols.

In this paper, we present a novel approach by extending the L1 language [35], a domain-specific extension for secure computation based on Java. Our security type system ensures that well-typed programs are secure in the semi-honest model, where all parties follow the protocol but may try to infer additional information. The type system allows the compiler to statically verify the security of the protocol during compilation, notifying the programmer of any potential security violations.

We evaluate our type system by implementing two protocols: a simple multiplication protocol [14] and a complex privacy-preserving string processing protocol [21]. This demonstrates that even intricate protocols can be effectively implemented and verified using our type system.

### Contributions
- A security type system for mixed protocol secure computation.
- Integration of this type system into the L1 language.
- Proof that any well-typed program is secure in the semi-honest model.
- Evaluation using two exemplary protocols, showing the feasibility of implementing complex functionalities.

## 2. Related Work
Our work is related to domain-specific languages (DSLs) for secure computation [2, 4, 9, 18, 19, 28, 32, 35] and type systems for information flow security [12, 29, 34, 36].

DSLs for secure computation can be categorized into those based on specific protocols [2, 4, 18, 28] and those extending generic programming languages [9, 19, 35]. DSLs based on specific protocols, such as FairPlay [28] and ShareMind [4], provide strong security guarantees but may limit performance. DSLs extending generic languages, such as VIFF [9] and [19, 35], offer flexibility but risk implementing insecure protocols.

Our security type system is inspired by information flow security, which uses type systems to enforce confidentiality policies [10, 11, 36]. Recent research in this area includes JIF [29] and applications to homomorphic encryption [12]. However, these approaches do not cover secure computations, as they assume non-interference, which does not hold in secure computation. Our type system addresses this more complex use case.

## 3. Secure Computation Primitives
We implement secure computations using homomorphic encryption, secret sharing, garbled circuits, and oblivious transfer. These primitives can be combined in various ways, but care must be taken to avoid insecure protocols. We focus on secure two-party computation.

### 3.1 Homomorphic Encryption
Additively homomorphic encryption, such as Paillier's system [33], allows operations on encrypted data. For plaintexts \( x \) and \( y \) encrypted under public key \( X \):
\[ D_X(E_X(x) \cdot E_X(y)) = x + y \]
\[ D_X(E_X(x)^y) = xy \]

Our type system does not protect against mixing ciphertexts from different keys, unlike [12].

### 3.2 Secret Sharing
Secret sharing splits a variable \( x \) into shares \( x_A \) and \( x_B \) such that:
\[ x = x_A + x_B \mod p \]

To implement secure computation, we combine secret sharing with homomorphic encryption. For example, multiplication can be implemented using a protocol involving randomization (Figure 1).

### 3.3 Oblivious Transfer
Oblivious transfer (OT) allows a sender to send one of \( n \) messages to a receiver without learning which message was chosen. OT can be used for distributed "if" statements and can implement generic secure computation protocols [15].

### 3.4 Garbled Circuits
Garbled circuits, introduced by Yao [37], allow the computation of any function. In our language, we combine garbled circuits with secret shares, ensuring that inputs and outputs are secret shares. For example, the function \( f(a, b) = a < b \) can be implemented as:
\[ f''(a_A, b_A, a_B, b_B, r) = ((a_A + a_B) < (b_A + b_B)) - r \]

## 4. The L1 Language
We extend the L1 language [35] with our security type system. L1 is a simplified and extended version of Java designed for secure computation, featuring messaging support and player-specific code. Messaging support allows parties to send each other messages, and player-specific code enables different behavior for different players.

The remainder of the paper is structured as follows: Section 2 reviews related work, Section 3 discusses the protocol primitives, Section 4 reviews the L1 language, Sections 5 and 6 present our main results, Section 7 shows our examples, and Section 8 concludes the paper.