### Manual Decompression and Configuration of Archives

The application enables you to view or modify the settings specified in the `META-INF` and `WEB-INF` directories of the archives. For more information, refer to “Configuring Applications” (page 15).

### Management Tool for Application Servers

The management tool allows you to manage JBoss instances running on one or more computers. You can start and stop services, configure services, and create data sources, queues, and topics. For detailed instructions, see “Administering Application Servers” (page 47).

### Overview of JBoss in Mac OS X Server

This chapter provides an overview of JBoss in Mac OS X Server.

#### JBoss in Mac OS X Server

Mac OS X Server version 10.3 includes JBoss version 3.2.2RC2. To ensure high availability, a "watchdog" process is included that keeps the application server running if it is enabled in Server Admin. If the application server freezes or crashes, the watchdog daemon automatically restarts it.

Additionally, Mac OS X Server offers load balancing and session failover through Apache and JBoss:
- **Apache with mod_jk**: Provides HTTP load balancing with session affinity (sticky sessions) and connects to JBoss instances via AJP connectors.
- **JBoss Session Failover**: Offers session failover through HTTP session state replication in the cluster configuration.
- **Load Balancing for Enterprise Beans**: Includes failover for stateful session beans and support for session affinity.

In Mac OS X Server, JBoss is configured to use Tomcat (via the AJP connector) as its web server and servlet container. HTTP and HTTPS (port 8443) are enabled by default.

You can manage the application server using the Server Admin application, which provides a simple interface to start, stop, and monitor the application server. Alternatively, you can use the command line.

#### Deployment and Management Tools

Mac OS X Server includes two applications for deploying and monitoring applications on JBoss:
- **Deployment Tool**: Allows you to configure an application or component to access the appropriate data sources and database tables. This decouples business logic from the database engine, allowing you to use the database engine that best suits your needs. For more details, see “Configuring Applications” (page 15).
- **Management Tool**: Enables you to administer and monitor local and remote application servers. You can start and stop services, configure services, deploy applications, and add data sources, queues, and topics. The management tool also provides access to statistics from resources and services running on the application server. For more information, see “Administering Application Servers” (page 47).

### Three Deployment Configurations

In Mac OS X Server, JBoss is set up for maximum J2EE compliance with three standard deployment configurations:
- **Development Configuration**: Offers increased logging and schema validation. An application is not deployed if the configuration files do not adhere to their respective schemas.
- **Standalone Configuration**: Optimized for high performance on a single server.
- **Cluster Configuration**: Optimized for high performance on a cluster of servers, including load balancing and session replication among stateful session beans and HTTP sessions.

### Starting the Application Server

To configure an application using the deployment tool, you must connect to a running application server. Follow these steps to start the application server:

1. Launch Server Admin, located in `/Applications/Server`.
2. In the Computers & Services list, select Application Server.
3. In the configuration pane, click Settings. From the Configuration Name pop-up menu, choose the appropriate configuration.
4. Click the Start Service toolbar button. After a few seconds, the application server should be running. You can confirm this by accessing `http://localhost:8080` in your web browser. You should see a webpage titled "Welcome to JBoss/Tomcat."

Alternatively, you can start JBoss from the Terminal with the following command:
```sh
$ /Library/JBoss/3.2/bin/run.sh -c deploy-standalone
```

For detailed logging, use the development configuration, which is useful for tracking module deployments and undeployments, and for identifying exceptions during startup. The development configuration produces a detailed log, which is especially useful when launching the application server from the command line.

### Configuring Your Application

This section explains how to start the deployment tool and configure your application.

#### Starting the JBoss Deployment Tool

To start the deployment tool, double-click `DeploymentTool.woa` in `/Library/JBoss/Applications`, or enter the following command in Terminal:
```sh
$ /Library/JBoss/Applications/DeploymentTool.woa/DeploymentTool
```

After a moment, the Load Application window will appear.

#### Loading Your Application

In the Load Application window, specify the location of the application or component you want to configure. Although the window is titled "Load Application," you can also use the deployment tool to configure EAR, WAR, and JAR files.

**Note:** Running the JBoss Deployment Tool requires a web browser that supports Frames and JavaScript. Some web browsers may need to have pop-up blocking disabled.

#### Configuring Your Application’s Components

To configure a component, select it from the main window. The deployment tool will display the configuration window for the component, which is a tabbed window with one or more panes for configuring specific aspects of the component. The Quick Config pane contains elements that must be configured for the application to be deployable.

Some settings apply to an entire module, such as security roles, and some serve as defaults for individual components in the module. Configuring module-wide settings can speed up the configuration process.

**Note:** For applications with many components, you may want to configure the Quick Config pages of the invalid components and save the application. Then, you can configure each component further in a piecemeal fashion.

#### Saving a Configured Application

To save a configured application, click Save in the top of the main window. The Save Application window will appear. Enter the destination of the configured application in the text field and click Save Application.

#### Deploying Your Application

To deploy a configured application from the deployment tool, save the application to `/Library/JBoss/3.2/deploy` for a single-server deployment or `/Library/JBoss/3.2/farm` for a cluster deployment.

### Configuring and Deploying Sun’s Pet Store

Pet Store is a sample J2EE application from Sun Microsystems, showcasing the power and flexibility of the J2EE platform. This chapter provides a tutorial on configuring Sun’s Pet Store for deployment in Mac OS X Server.

#### Set Up the Environment

Before configuring an enterprise application for deployment in Mac OS X Server, ensure you have all the necessary files, create any required database tables, and verify that the appropriate processes are running.

**Note:** The companion files of this document include pre-configured Pet Store archives ready for deployment using MySQL as the database engine. They are located at `Application_Server_companion/Configured_Pet_Store_archives`. You only need to perform the steps listed in “Set Up the Environment” (page 27) and “Deploy and Test the Application” (page 45).

1. **Get Pet Store from Sun**:
   - Download the Pet Store enterprise application from [Sun's developer site](http://developer.java.sun.com/developer/releases/petstore).
   - Place the `petstore1.3.2` directory in your home directory.

2. **Configure MySQL**:
   - Launch MySQL Manager, located in `/Applications/Server`.
   - Click the lock button and authenticate as the system administrator.
   - Click Install and then Start.
   - Quit MySQL Manager.

3. **Create the Pet Store Tables**:
   - In Terminal, run the `mysql` command-line tool.
   - Enter `use test` and press Return.
   - Copy the text from `Application_Server_companion/Pet_Store_resources/create_tables_sql.txt` to the Clipboard and paste it into the `mysql` command-line tool.
   - Enter `quit` and press Return.

4. **Deploy the `petstore-destinations-service.xml` File**:
   - Copy the `petstore-destinations-service.xml` file from `Application_Server_companion/Pet_Store_resources` to `/Library/JBoss/3.2/deploy`.

5. **Start the Application Server**:
   - Ensure the application server is running on your computer. See “Starting the Application Server” (page 15) for details.

#### Configure the Pet Store Enterprise Application

This section guides you through the steps required to configure the `petstore.ear` file for deployment in Mac OS X Server. This involves specifying the data source for enterprise beans, mapping CMP fields to table columns, defining relationships among enterprise beans, and more.

**Open the `petstore.ear` File in the Deployment Tool**:
1. Launch the JBoss deployment tool. (See “Starting the JBoss Deployment Tool” (page 18) for details.)
2. In the Load Application window, enter the full path to the `petstore.ear` file in the text field and click Load Application.