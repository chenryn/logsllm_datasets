Calendar(17), Calculator2 (22), Browser(23), Gallery3d(24),
Videoeditor(25), Contacts(27), Music(28) and Talk(29).
We compared the battery consumption of an unmodiﬁed
Android 4.0.4 system with a DR BACA-enabled Android
4.0.4 system. Figure 6 shows the results of this performance
test by comparing the following three conﬁgurations:
system without the modiﬁcations by DR BACA;
• No DR BACA: This conﬁguration uses Android 4.0.4
• DR BACA Policy A: In this conﬁguration, DR BACA
is enabled and prevents all applications listed above
from starting;
• DR BACA Policy B: In this conﬁguration, DR BACA
is enabled and allows the execution of all applications
listed above. Therefore, this conﬁguration can be di-
rectly compared to the conﬁguration without DR BACA,
which by default allows the execution of all applica-
tions.
]
%
[
e
f
i
l
y
r
e
t
t
a
B
100
90
80
70
60
50
40
30
20
10
0
No DR BACA
DR BACA Policy A
DR BACA Policy B
660 720 750
0
100
200
300
400
500
600
700
800
Time [minutes]
Figure 6: Battery life time test
Running this user simulation test, the battery for the conﬁg-
uration without DR BACA lasts for 720 minutes or 12 hours.
Interestingly, the conﬁguration with DR BACA using policy
A lasts 30 minutes longer. The reason for this is that the
security policy used in this conﬁguration rejects many of the
applications from starting, preventing them from using up
resources. While this result does not inform us about the
additional performance overhead introduced by DR BACA,
it shows that depending on the security policy chosen, DR
BACA could actually help to preserve the battery life of
306
Android devices. The conﬁguration with DR BACA using
policy B indicates the actual performance overhead of us-
ing the DR BACA system. This conﬁguration lasts for 660
minutes, or 11 hours. Compared to the conﬁguration with-
out DR BACA, the battery life time is reduced by 8.4 %.
This reduction includes the overhead of receiving a new GPS
signal every 5 minutes, which in itself is a costly function.
In a company environment, one reasonable requirement of
DR BACA would be that the device’s battery lasts at least
an entire workday of eight to nine hours. As shown, a DR
BACA-enabled mobile device does fulﬁll this requirement.
In such an environment, the negative eﬀect on the battery
life time introduced by DR BACA stays within an accept-
able range. It should also be noted, that DR BACA in its
current development stage has not yet been optimized for
performance.
8. RELATED WORK
The popularity of Android as a mobile device OS com-
bined with the tremendous increase in Android malware has
led many security researchers to propose new security solu-
tions to mitigate some of the vulnerabilities of Android.
Probably the work most closely related to our own are
CRePE [6] and CtRBAC [33]. CRePE stands for context-
related policy enforcement for Android and can be used to
deﬁne ﬁne-grained policies, even after the installation pro-
cess. CRePE focusses on restricting the capabilities of non-
malicious applications based on current context information
such as the phones location (GPS) and the time of day (in-
ternal clock). DR BACA also provides this functionality but
uses a role-based access control mechanism which is likely to
better map a company environment. CtRBAC is a frame-
work for a context-related role based access control model
(CtRBAC) for Android smartphones proposed by Yee and
Thein. As DR BACA, CtRBAC leverages RBAC to pro-
vide a ﬁner grained access control mechanism by taking the
mobile device’s context into account. However, CtRBAC
only allows one role for the current user. DR BACA users
can own several roles. For example, an employee might be
assigned to the EMPLOYEE role, the IT role and the AD-
MIN role. While CtRBAC oﬀers a system model that ex-
plains how the proposed solution could be implemented, the
paper does not provide any further implementation details.
On the other hand, DR BACA has been fully implemented
and can be used in a production environment. Addition-
ally, DR BACA oﬀers a multi-user environment, can make
security decisions on both the application level and the per-
mission level, enhances the access control mechanism with
a dynamic component through shareable rules and simpli-
ﬁes the management and conﬁguration of environments with
many Android devices through a conﬁguration server. None
of these features are provided by CRePE and CtRBAC.
Saint [21] enhances the Android security model by pro-
viding install-time permission granting policies as well as
runtime inter-application communication policies. These
policies can also include context information such as cur-
rent time and location. The install-time policy can include
rules such as the following: only grant permission X to ap-
plications that own permission Y. A run-time policy could
be the following: an application X with permission Y can-
not interact with any application that contains permission
Z. As Saint, DR BACA uses both permission and applica-
tion level rules.
In addition, DR BACA leverages RBAC
and associates the rules with roles to provide better security
management for enterprise-wide mobile control.
The security of Android can also be improved by strength-
ening the Linux kernel itself through the addition of SELinux
[29]. SELinux for Android enforces stronger security policies
on the kernel level, such as type enforcement and a limited
form of role-based access control. SELinux further protects
the system from compromised system applications running
with root privileges. While DR BACA doesn’t modify ker-
nel itself, SELinux can also be added to DR BACA system
to enhance kernel level security.
Several papers aim to mitigate permission re-delegation
(PRD) attacks.
IPC Inspection [8] dynamically mitigates
this attack by calculating the intersection of the calling and
called applications permission sets. If the intersection does
not contain the requested permission, the request will be
denied. Another solution is called TrustDroid [3] which mit-
igates PRD attacks by dividing applications into a trusted
and an untrusted domain. Applications from the untrusted
domain are not allowed to communicate with applications
from the trusted domain and vice versa. The authors argue
that TrustDroid allows companies to distinguish between
their own company internal applications and others. This
way, sensitive company information is less likely to be leaked.
XManDroid [2] is another very prominent security extension
for Android which oﬀers monitoring mechanisms for inter-
component communication (ICC) at runtime. XManDroid
aims to mitigate application level privilege escalation at-
tacks by checking each ICC against a policy database. The
policy can prevent applications from communicating, if the
union of the permissions of both applications may pose a
security risk. For example: an application with read ac-
cess to the contacts database must not communicate with
an application that has network access. DR BACA doesn’t
directly solve PRD attack, however it can mitigate this at-
tack through a proper security policy. Moreover, IPC could
be speciﬁed as a special context or event and implemented
within DR BACA model.
9. CONCLUSION
We propose a DR BACA (Dynamic Role Based Access
Control) model and fully implement it to provide ﬂexible
capabilities that enhance Android security. By applying
a RBAC approach to Android’s existing permission model,
leveraging the context-aware capabilities of mobile devices
and utilizing the available NFC technology, DR BACA pro-
vides ﬁne-grained access control through both static and
dynamic RBAC. DR BACA oﬀers multi-user capabilities is
ideal for enterprises by simplifying the implementation and
distribution of a uniform security policy on all involved mo-
bile devices. With a proper security policy, DR BACA can
mitigate security risks with very low system overhead.
In our future work, we would like to provide an API for ap-
plication developers who could then make use of DR BACA
users and roles in their own applications. Moreover, we plan
to provide synchronization capabilities between DR BACA
and Anti-Virus vendors to dynamically modify the security
policy so that malicious applications can be put into the
blacklist automatically.
10. REFERENCES
[1] M. Ballano. Android.mobiletx.
307
http://www.symantec.com/security\_response/
writeup.jsp?docid=2012-052807-4439-99, 2012.
[2] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and
A.-R. Sadeghi. Xmandroid: A new android evolution
to mitigate privilege escalation attacks. Technical
Report TR-2011-04, Technische Universit¨at
Darmstadt, Apr 2011.
[3] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R.
Sadeghi, and B. Shastry. Practical and lightweight
domain isolation on android. In Proceedings of the 1st
ACM workshop on Security and privacy in
smartphones and mobile devices, SPSM ’11, pages
51–62, New York, NY, USA, 2011. ACM.
[4] B. Cai. Android.jifake.
http://www.symantec.com/security\_response/
writeup.jsp?docid=2012-073021-4247-99, 2012.
[5] L. Chen and J. Crampton. Inter-domain role mapping
and least privilege. In Proceedings of the 12th ACM
symposium on Access control models and technologies,
pages 157–162. ACM, 2007.
[6] M. Conti, V. Nguyen, and B. Crispo. Crepe:
context-related policy enforcement for android. 2011.
[7] W. Enck, M. Ongtang, and P. McDaniel.
Understanding android security. IEEE Security &
Privacy Magazine, 7(1):50–57, 2009.
[8] A. Felt, H. Wang, and A. Moshchuk. Permission
Communications Security, ASIACCS ’10, pages
328–332, New York, NY, USA, 2010. ACM.
[19] J. Nielsen. Usability Engineering. Morgan Kaufmann
Publishers Inc., San Francisco, CA, USA, 1993.
[20] U. D. of Health & Human Services. Your medical
records. http://www.hhs.gov/ocr/privacy/hipaa/
understanding/consumers/medicalrecords.html,
2013.
[21] M. Ongtang, S. McLaughlin, W. Enck, and
P. McDaniel. Semantically rich application-centric
security in android. Journal of Security and
Communication Network, 2011.
[22] E. Protalinski. New android malware uses google play
icon to trick users, conduct ddos attacks and send
spam texts.
http://thenextweb.com/google/2012/12/27/new-
android-malware-uses-google-play-icon-to-
trick-users-conduct-ddos-attacks-and-send-
spam-texts/, 2012.
[23] N. Provos, M. Friedl, and P. Honeyman. Preventing
privilege escalation. In Proceedings of the 12th
USENIX Security Symposium, volume 12, pages
231–242, 2003.
[24] F. Rohrer. DR BACA: Dynamic role based access
control for android. Master’s thesis, Boston University
Metropolitan College, 2013. Pending publication.
re-delegation: Attacks and defenses. In USENIX, 2011.
[25] F. Ruiz. ‘Fakeinstaller’ leads the attack on android
[9] D. Ferraiolo and R. Kuhn. Role-based access control.
In In 15th NIST-NCSC National Computer Security
Conference, pages 554–563, 1992.
[10] Gartner. Smartphone sales increased 47 percent.
http://www.gartner.com/newsroom/id/2237315,
Nov. 2012.
[11] Google. Jelly bean. http://developer.android.com/
about/versions/jelly-bean.html, 2012.
[12] Google. Manifest.permission.
http://developer.android.com/reference/
android/Manifest.permission.html, 2013.
[13] Google. Signing your applications. http://developer.
android.com/tools/publishing/app-signing.html,
2013.
[14] R. J. Hulsebosch, A. H. Salden, M. S. Bargh, P. W. G.
Ebben, and J. Reitsma. Context sensitive access
control. In Proceedings of the tenth ACM symposium
on Access control models and technologies, SACMAT
’05, pages 111–119, New York, NY, USA, 2005. ACM.
[15] McAfee-Labs. Mcafee threats report: Second quarter
2012. Technical report, 2012.
[16] R. B. Miller. Response time in man-computer
conversational transactions. In Proceedings of the
December 9-11, 1968, fall joint computer conference,
part I, AFIPS ’68 (Fall, part I), pages 267–277, New
York, NY, USA, 1968. ACM.
[17] H. Narayanan and M. Gunes. Ensuring access control
in cloud provisioned healthcare systems. In Consumer
Communications and Networking Conference
(CCNC), 2011 IEEE, pages 247 –251, jan. 2011.
[18] M. Nauman, S. Khan, and X. Zhang. Apex: extending
android permission model and enforcement with
user-deﬁned runtime constraints. In Proceedings of the
5th ACM Symposium on Information, Computer and
phones. http://blogs.mcafee.com/mcafee-
labs/fakeinstaller-leads-the-attack-on-
android-phones, 2012.
[26] A. Saita. Mobile malware dubbed ’bill shocker’ targets
chinese android users.
http://threatpost.com/en\_us/blogs/mobile-
malware-dubbed-bill-shocker-targets-chinese-
android-users-013013, 2013.
[27] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. Computer,
29(2):38–47, 1996.
[28] R. S. Sandhu and P. Samarati. Access control:
principle and practice. Communications Magazine,
IEEE, 32(9):40–48, 1994.
[29] A. Shabtai, Y. Fledel, and Y. Elovici. Securing
android-powered mobile devices using selinux. IEEE
Security and Privacy, 8:36–44, May 2010.
[30] B. Shneiderman. Response time and display rate in
human performance with computers. ACM Computing
Surveys, 16(3):265–285, Sept. 1984.
[31] A. Yamamoto. Android.ackposts.
http://www.symantec.com/security\_response/
writeup.jsp?docid=2012-072302-3943-99, 2012.
[32] A. Yamamoto. Android.enesoluty.
http://www.symantec.com/security\_response/
writeup.jsp?docid=2012-090607-0807-99, 2012.
[33] T. T. W. Yee and N. Thein. Leveraging access control
mechanism of android smartphone using
context-related role-based access control model. In
Networked Computing and Advanced Information
Management (NCM), 2011 7th International
Conference on, pages 54 –61, june 2011.
308