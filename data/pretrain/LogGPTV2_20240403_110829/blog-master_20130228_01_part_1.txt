## PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 3     
### 作者                      
digoal                      
### 日期                       
2013-02-28                    
### 标签                      
PostgreSQL , hyperloglog , 估值类型 , hll , UV , PV        
----                 
## 背景         
接下来主要讲一下hll的存储结构.  
## 一、hll_hashval类型的长度为64bit, 可以与int, int8类型相互转化. 但是在聚合成hll时结果是有差别的.   
所以最好不要直接把int或int8类型当成hll_hashval来使用.  
```  
-- 创建测试表  
digoal=> create table agg (id int primary key,userids hll);  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "agg_pkey" for table "agg"  
CREATE TABLE  
-- 使用generate_series函数生成数值.  
digoal=> \df *.*generate_series*  
                                                               List of functions  
   Schema   |      Name       |         Result data type          |                        Argument data types                        
   |  Type    
------------+-----------------+-----------------------------------+-----------------------------------------------------------------  
---+--------  
 pg_catalog | generate_series | SETOF bigint                      | bigint, bigint                                                    
   | normal  
 pg_catalog | generate_series | SETOF bigint                      | bigint, bigint, bigint                                            
   | normal  
 pg_catalog | generate_series | SETOF integer                     | integer, integer                                                  
   | normal  
 pg_catalog | generate_series | SETOF integer                     | integer, integer, integer      
-- int直接转换成hll_hashval  
digoal=> insert into agg select 1,hll_add_agg(t::hll_hashval) from generate_series(-10000000::int,0::int) g(t);  
INSERT 0 1  
-- int8直接转换成hll_hashval  
digoal=> insert into agg select 2,hll_add_agg(t::hll_hashval) from generate_series(-10000000::int8,0::int8) g(t);  
INSERT 0 1  
-- 调用hll_hash_integer  
digoal=> insert into agg select 3,hll_add_agg(hll_hash_integer(t)) from generate_series(-10000000::int,0::int) g(t);  
INSERT 0 1  
-- 调用hll_hash_bigint  
digoal=> insert into agg select 4,hll_add_agg(hll_hash_bigint(t)) from generate_series(-10000000::int8,0::int8) g(t);  
INSERT 0 1  
-- 查看唯一值.  
digoal=> select id,#userids from agg;  
 id |     ?column?       
----+------------------  
  1 | 12098218.8944067  -- int::hll_hashval  
  2 | 12098218.8944067  -- int8::hll_hashval  
  3 | 10132224.7985314  -- hll_hash_integer  
  4 | 9710693.55748479  -- hll_hash_bigint  
(4 rows)  
```  
根据文档的描述, 误差范围为±1.04/√(2log2m).  
```  
-- 本例的log2m=12.  
digoal=> select hll_log2m(userids) from agg;  
 hll_log2m   
-----------  
        12  
        12  
        12  
        12  
(4 rows)  
```  
可以计算出误差=±0.01625  
```  
-- 真实误差如下 :   
digoal=> select id,((#userids)-10000001)/10000001 from agg;  
 id |      ?column?         
----+---------------------  
  1 |   0.209821768458491  
  2 |   0.209821768458491  
  3 |  0.0132223785308992  
  4 | -0.0289307413584472  
(4 rows)  
```  
说明hll_hash_integer得到的hll_hashval的聚合误差在允许范围内.   
直接转换以及使用hll_hash_bigint得到的hll_hashval的聚合超出误差范围.   
其他 :   
```  
digoal=> delete from agg;  
DELETE 6  
digoal=> insert into agg select 6,hll_add_agg(hll_hash_text(t::text)) from generate_series(-10000000,0) g(t);  
INSERT 0 1  
digoal=> insert into agg select 7,hll_add_agg(hll_hash_bytea(byteain(int4out(t)))) from generate_series(-10000000,0) g(t);  
INSERT 0 1  
```  
超出误差范围.  
```  
digoal=> select id,((#userids)-10000001)/10000001 from agg;  
 id |      ?column?         
----+---------------------  
  6 | -0.0193928457148722  
  7 | -0.0193928457148722  
(2 rows)  
```  
所以最精确的还是使用hll_hash_integer得到的hll_hashval.  
## 二、hll的存储 :   
hll 直观来看就是字节流. 可以与bytea互相转换. 如下 :   
```  
digoal=> select '\xffff'::bytea;  
 bytea    
--------  
 \xffff  
(1 row)  
-- bytea可以转换成hll, 但是这个hll不一定合法  
digoal=> select '\xffff'::bytea::hll;  
  hll     
--------  
 \xffff  
(1 row)  
-- hll转换成bytea没有任何问题, 因为bytea可以存储任何字节流.  
-- 但是hll有自己的存储规范, 实际上\xffff是不合法的, 如下 :   
digoal=> select '\xffff'::hll;  
ERROR:  unknown schema version 15  
LINE 1: select '\xffff'::hll;  
               ^  
digoal=> select '\x1fff'::hll;  
ERROR:  undefined multiset type  
LINE 1: select '\x1fff'::hll;  
               ^  
digoal=> select '\x13ff'::hll;  