### Monitoring Internal Events of a Circuit

To effectively monitor the internal events of a circuit, it is essential to characterize fault injection methods based on several key qualitative properties. These properties are as follows:

- **Controllability**: The ability to control where and when a fault is injected.
- **Observability**: The ability to observe the effects of the injected fault.
- **Real-Environment Evaluation**: The ability to evaluate the target system in its actual application environment.
- **Execution Time**: The time required to execute fault injection campaigns.
- **Design Cycle Integration**: The ability to inject faults into a system during the design cycle.
- **Damage Prevention**: The ability to protect the system from costly damages.
- **Non-Synthesizable Model Support**: The ability to inject faults into non-synthesizable models.
- **HDL Model Support**: The ability to inject faults into HDL (Hardware Description Language) models.

Based on these properties, a comparison between different fault injection methods is presented in Table 1.

### Overview of FITSEC

In this paper, the FITSEC tool is used to illustrate a hybrid fault injection approach that combines simulation and emulation. Figure 1 provides an overview of the FITSEC process.

1. **Fault Injector Unit (FIU) Insertion**:
   - The tool analyzes the VHDL or Verilog model of the target system and suggests potential fault injection points to the user.
   - After the user specifies the target points, a new VHDL or Verilog model is automatically generated, incorporating the main target system and the FIUs.
   - Additional components, signals, and variables may be added to the main code to facilitate the insertion of FIUs.
   - The user must also specify the timing for fault injection, fault termination, and which signal traces to save.

2. **Partitioning and Execution**:
   - The generated code, now containing FIUs, is partitioned into two parts: one part is simulated, and the other part is emulated.
   - An interface enables communication between the simulator and the external emulator, ensuring that the combined system behaves like a single, unified simulator.
   - Partitioning is guided by the nature of the VHDL or Verilog model and user interactions. Non-synthesizable parts are simulated, while high-observability parts are also handled by the simulator due to its superior observability features.

3. **Fault Injection Experiments**:
   - Faults specified by the user are automatically injected, and signal traces are saved for each experiment.
   - Faults can be injected into both the simulated and emulated parts of the system.

4. **Data Analysis**:
   - The final step involves extracting experimental results from the saved signal traces, which is performed automatically by the data analysis unit.

### Fault Models and FIUs

Most previous fault injection methods for HDL models cannot be applied to emulated models. For example, VHDL-based fault injection techniques rely on either:
- **Simulator Capabilities**: Utilizing built-in commands and capabilities of the simulator.
- **Model Modification**: Modifying the VHDL or Verilog model directly.

The first method is inherently dependent on the simulator and is not suitable for emulated systems. While model modification can be used for emulated systems, some modifications may result in non-synthesizable models.

#### FITSEC Approach

FITSEC is designed to support both simulation and emulation, ensuring that the code remains synthesizable for fault injection into emulated parts. The process involves:

1. **FIU Insertion**:
   - FIUs are inserted into the VHDL or Verilog description of the target system before compiling and synthesis.
   - Each FIU is activated by a fault injector signal (FIS). When the FIS is set to 1, the corresponding FIU injects a fault.
   - All experiments in a fault injection campaign use the same model to avoid recompiling and resynthesizing, which are time-consuming processes.

2. **Fault Injection at Different Abstraction Levels**:
   - **Switch-Level Faults**: FITSEC can inject transistor-stuck-on, transistor-stuck-off, short, and open faults into switch-level Verilog models. However, these faults can only be injected into the simulated parts of the system.
   - **Gate-Level Faults**: FITSEC can inject stuck-at, bridging, and gate replacement faults into gate-level models. Examples include:
     - **Stuck-At Faults**: Dividing a signal into two parts (s1 and s2) and using OR gates to inject the fault.
     - **Bridging AND Faults**: Using multiplexers to inject faults between signals X and Y.
     - **Gate Replacement Faults**: Replacing a gate with a multiplexer to simulate the fault.

### Conclusion

FITSEC provides a robust and flexible framework for hybrid fault injection, combining the strengths of simulation and emulation. By ensuring the synthesizability of the modified code and supporting various fault models, FITSEC offers a comprehensive solution for fault injection in complex digital systems.