f
o
#
107
106
105
104
103
102
10
1
True flow size histogram
Virtual sketch:
  Estimated avg. + 95% conf. intervals
Regular sketch:
   Estimated avg.
1
5
10
15
[32,47]
[528,1039]
[16400,32783]
Flow size interval
Figure 2: Histogram estimates with 8MB of mem-
ory. BB-East-2 trace histogram (line) v.s.
his-
togram estimates (with a virtual sketch and with a
regular sketch). Experiment: 9.6 million ﬂows (av-
erage), 6 bit counters (7 bits per ﬂow), 37 runs.
4. EVALUATION
In this section we evaluate our approach using Internet
traces and one synthetic extreme-case distribution. All ex-
periments use parameters: k = 16 and W ≈ 1014 (thus the
sketch counter requires b = 6 bits). In our ﬁrst experiment
we use the ﬂow size histogram of a Tier 1 backbone trace
BB-East-2 described in [8]. This trace has 9.5 million dis-
tinct ﬂows collected over a two hour period. This means
that an 8MB physical sketch has a 2-fold virtual sketch load
L ≈ 1/2.
In our experiments we choose Z = 2 (a 2-fold
virtual sketch) as it has a low virtual sketch load, L, and
Z = 2 is the folding value with the smallest ﬂow thinning
probability. We use the empirical histogram as a base for
generating a series of 37 synthetic traces that will feed our
data stream algorithm.
In another experiment we repeat
the same scenario but replace the multiplexed sketch by a
regular sketch. A regular sketch does not need to keep an
extra ownership bit and can use this space to reduce its load.
Measuring the same number of ﬂows the regular sketch has
load L = b/(b + 1) = 0.86, in contrast to the load L = 1/2
of a 2-fold virtual sketch. Our estimator takes less than one
second to compute all estimates in both scenarios. Figure 2
show the results of both experiments. The ﬁrst experiment
(with the virtual sketch) also shows the 95% percentile con-
ﬁdence intervals. For the virtual sketch we can see that
our algorithm was able to obtain very good histogram esti-
mates as well asvery tight conﬁdence intervals. Note that
for all ﬂow sizes  k we have
It is easy to see that if we assume that `k
Pm =  h − 1
Xi=0  h − 1
m − 1!(1 − p)h−mpm +
i !(1 − p)h−i pi Pm−i, m = 1, 2, . . . , h.
m−1
(8)
Now we prove that the ﬂow is Bernoulli sampled. Proof by
induction on m.
P1 = (1 − p)h−1p + (1 − p)h P1 → P1 =
(1 − p)h−1p
1 − (1 − p)h
as N → ∞, p → 0 and then P1 = 1/h.
Induction:
Assume Pi = (1 − 1/h)i−11/h for i = 1, 2, . . . , m − 1. Then
equation (8) becomes
Pm =(h − 1)p Pm−1 + (1 − p)h Pm + O(p2)
=(h − 1)p(1 − 1/h)m−21/n + (1 − p)h Pm + O(p2),
passing all variables Pm to the left side
Pm =((h − 1)p(1 − 1/h)m−21/n + O(p2))/(1 − (1 − p)h)
=(1 − 1/h)m−11/h + O(p).
As p → 0, Pm = (1 − 1/h)m−11/h, which is geometrically
distributed and thus the ﬂow is Bernoulli sampled.
B. COUNTER INCREMENT PROBABILITY
The probability of having j counter increments out of i
packets is given by f (i, j) = 2−(j(j+1)/2)f ′(i−j, j +1), where
f ′(i, j) = Pi
(1 − 2−1)i
m=0(1 − 2−j )mf ′(i − m, j − 1)
if j ≥ 2
otherwise.
C. FLOW COLLISION FUNCTION
Function hθ(j, m) = h′
θ(j, 1, m) can be computed using
the following recursion.
h′
θ(j, w, m) = exp(−Pi θi)
0
if j = m = 0
if w > j or w m > j
otherwise
h′
θ(j, w, m) =
min(⌊j/w⌋,m)
Xr=0
(θw)r
r!
h′
θ(j − r w, w + 1, m − r);
caching its intermediate results hθ is known to have com-
plexity O(j3) [5].
REF ERENCES
[1] Chadi Barakat, Patrick Thiran, Gianluca Iannaccone,
Christophe Diot, and Philippe Owezarski. Modeling
internet backbone traﬃc at the ﬂow level. IEEE
Transactions on Signal Processing, 51(8):2111–2124,
August 2003.
[2] Graham Cormode, S. Muthukrishnan, and Irina
Rozenbaum. Summarizing and mining inverse
distributions on data streams via dynamic inverse
sampling. In VLDB, pages 25–36, 2005.
[3] Nick Duﬃeld, Carsten Lund, and Mikkel Thorup.
Estimating ﬂow distributions from sampled ﬂow
statistics. IEEE/ACM Transactions on Networking,
13(5):933–946, 2005.
[4] Abhishek Kumar, Minho Sung, Jun Xu, and Ellen W.
Zegura. A data streaming algorithm for estimating
subpopulation ﬂow size distribution. In Proceeding of
the ACM SIGMETRICS, pages 61–72, 2005.
[5] Abhishek Kumar, Minho Sung, Jun (Jim) Xu, and Jia
Wang. Data streaming algorithms for eﬃcient and
accurate estimation of ﬂow size distribution. In
Proceeding of the ACM SIGMETRICS, pages 177–188,
2004.
[6] Yi Lu, Andrea Montanari, Balaji Prabhakar, Sarang
Dharmapurikar, and Abdul Kabbani. Counter braids:
A novel counter architecture for per-ﬂow measurement.
In Proceeding of the ACM SIGMETRICS, 2008.
[7] Robert Morris. Counting large numbers of events in
small registers. Communications of the ACM,
21(10):840–842, 1978.
[8] Bruno Ribeiro, Don Towsley, Tao Ye, and Jean Bolot.
Fisher information of sampled packets: an application
to ﬂow size estimation. In ACM Internet measurement
conference, pages 15–26, 2006.