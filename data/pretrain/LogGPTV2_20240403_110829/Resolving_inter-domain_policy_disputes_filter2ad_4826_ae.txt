a
u
m
u
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Shortest path
C.d. 2
C.d. 4
C.d. 6
C.d. 6, 10% Misconfig
 1
 1.5
 2.5
Memory Requirement Ratio
 2
 3
Figure 17: Deviation of path lengths from shortest
increases exploration and hence more results stored.
mum depth of 6 results in route inﬂation that most closely
match that in the Internet today [16].
Next, we investigated the impact of additional memory
requirements for Precedence by varying route inﬂation. In
all cases, we veriﬁed that usage of Precedence in networks
with no disputes resulted in all nodes selecting their most
preferred next hops: Precedence does not unnecessarily sup-
press routes. For normal BGP, the amount of memory re-
quired at a router is proportional to the number of its neigh-
bors. From Figure 17, we observed that deviation from
the shortest path results in more routes being explored and
hence more being stored before convergence in the case of
Precedence. On average, Precedence requires 50% more
memory for each destination preﬁx, which can be amortized
across the network by jittering initial preﬁx advertisements.
Furthermore, actual route exploration in the Internet may
be to a lesser extent since route advertisement will be con-
strained by economic policies.
To investigate policy disputes due to misconﬁgurations,
we randomly assigned next hop preferences to 10% of the
nodes, veriﬁed that dispute wheels do exist (normal BGP
does not converge), and that the networks converged when
Precedence is used. As shown in Figure 17, we required
approximately the same amount of memory as before.
Finally, we looked at the network convergence times (Fig-
ure 18). As we expected, local preferences assigned based
on shortest-paths results in faster convergence. More im-
portantly, convergence time is not signiﬁcantly aﬀected by
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Shortest path, BGP
C.d. 6, BGP
C.d. 6, Pred
C.d. 6, Pred, 10% Misconfig
 1.5
 2
 2.5
 3
 3.5
 4
 4.5
 5
 5.5
Convergence Time (min)
Figure 18: Usage of the precedence metric does not
delay convergence, even in the presence of miscon-
ﬁgurations.
(P1:0)
(P2:1)
A
(APx:v)
Figure 19: Detection of misbehavior can be per-
formed by observing incoming and outgoing routes.
Here, the arrows indicate direction of possible paths
to destination.
usage of Precedence, nor by the presence of misconﬁgura-
tions (disputes) in the network.
8. DISCUSSION
A major question that naturally arises when considering
entities that act independently to maximize proﬁts is that
of misbehavior. In this section we discuss the detection of
misbehavior, as well as the additional modiﬁcations to the
protocol required in order to remove the constraint where
an AS is represented by a single node.
8.1 Misbehavior
Since the global precedence metric can in general restrict
the autonomy of an AS, there may be incentives for not ad-
hering to the general rule. We discuss various ways whereby
ASes can misbehave, and detection methods that rely on
the ability to observe the incoming and outgoing routes.
Clearly, one type of misbehavior is the selection of an avail-
able route with the highest local precedence regardless of its
global value. We describe several scenarios using Figure 19,
focusing on the routes advertised from A.
(P2:0) : there is deﬁnite misconduct, since the outgoing
route’s global precedence is less than its incoming’s. This is
true even if A ﬁlters P1:0.
(P2:1) : there is no misconduct only if A permanently ﬁl-
ters route P1:0. In this case, route P2:1 is the only incoming
route and therefore also the most locally preferred. Thus,
the outgoing route’s global precedence is not incremented.
(Px:v) : where v>2 for x=1 and x=2. In this case, node
A is artiﬁcially increasing the outgoing precedence value.
This has the eﬀect of not allowing upstream ASes to select
a route traversing this AS. While some may construe this
as misbehavior, it may be used as a means of indicating
that certain links are used as backup. For instance, the
destination node can advertise a global precedence value of
1 on backup links, and 0 on normal links.
(a.i)
M
(b.i)
A
A
AA
D
D
(a.iii)
(a.ii)
A
A
D
B
M
B
M
(b.ii)
(b.iii)
B
AA
B
AA
D
A
A
D
D
M
C
M
C
M
B
B
C
Figure 20: (a) For disputes with odd numbers of
nodes, M eventually lacks a route if it initially ﬁlters
the spoke one. (b) For disputes with even numbers
of nodes, M does not destabilize the network.
From this simple example, we can determine that an AS is
misbehaving if one of these two conditions are satisﬁed: (1)
an outgoing route has a global precedence value that is less
than its corresponding incoming route, or (2) an outgoing
route has a global precedence value that is greater than its
corresponding incoming route by more than one.
8.2 Adaptive Filtering
Misbehavior that is more diﬃcult to detect involves adap-
tive ﬁltering. Let M be the node representing a misbehav-
ing AS. Clearly, if M is always ﬁltering its spoke path, it
will never become a pivot node, and thus cannot inﬂuence
the convergence process. However, M involved in a dispute
can initially accept routes from neighbors along the spoke
and rim. When routing stabilizes and the precedence met-
ric forces selection of the spoke path, M can subsequently
decide to eﬀectively ﬁlter that in order to select the locally
preferred path along the rim.
Two scenarios can occur as illustrated in Figure 20. In
part (a), the total number of pivot nodes in dispute is an
odd number. The selection of a next hop that is more locally
preferred but having a higher global precedence value even-
tually results in M not having a valid route. Subsequent
removal of the ﬁlter causes the system to oscillate again.
In part (b), an even number of pivot nodes can cause the
system to settle in a stable state even if M misbehaves. In
this case, M is able to use the path it locally prefers.
In general it is diﬃcult to determine the number of pivot
nodes in dispute, and thus also if the implementation of
adaptive ﬁltering in M can result in oscillations (which ulti-
mately does not beneﬁt M ). To provide better control of the
situation, we next propose a method to detect the various
types of misbehaviors discussed above.
8.3 Misbehavior Detection
Most ASes are comprised of multiple routers and thus the
usual assumption that an AS can be modeled by a single
router does not hold. For instance, in Figure 21(i), router
A selects, as it should, the less preferred route (R0:0) and
advertises (AR0:1) to B, which then chooses (R2:1). If we
logically collapse A and B into a single node and aggregate
their inputs, we see that even though the routers are behav-
ing correctly, the output should have been (...R0:1) instead.
We propose a slight tweak to the protocol only within an
AS: when an ingress router (i.e. A in the example) adver-
tises a route to an internal peer, it appends the route’s global
(i)
B’s history table
A’s history table
10. REFERENCES
[R2:1]
[AR0:1]
[R1:1]
[R0:0]
[BR2:1]
[AR0:1]
B
[R0:0]
A
(ii)
[R2:1]
B’s history table
[R2:1]
[AR0:0,1]
[R1:1]
A’s history table
[R1:1]
[R0:0]
[BAR0:1]
[AR0:0,1]
B
[R0:0]
A
[R2:1]
[R1:1]
Figure 21: Tagging routes with both ingress and
egress precedence values causes a multiple-router
AS’ behavior to be similar to that of a single router.
precedence when received (the ingress value) and after up-
dates (the egress value). Upon reception of that route, B
uses the ingress value to determine the selected route. The
egress value is then updated, and is lower-bounded by the
previous egress value. Advertisements to neighboring ASes
carry only the egress value. Figure 21(ii) shows the same
network with the tweaked protocol. Here, correct behav-
ior will cause A to advertise (AR0:0), and B to advertise
(BAR0:1). On the other hand, if A misbehaves and selects
(R1:1), the output will clearly be incorrect.
With the slightly modiﬁed protocol, the conditions de-
scribed in §8.1 can be used to detect the occurrence of adap-
tive ﬁltering. For a dispute to occur, a less preferred route
(say Rlp) must have been advertised before the more pre-
ferred one is selected. Thus, Rlp must have been observed
before, but not thereafter. A monitoring mechanism can
be designed based on this as follows: we detect routes that
should have been selected but aren’t. These are then hashed
and stored. Since the monitor is maintained by a third-
party, hashing of the inputs provide anonymity. Output of
any of the stored routes in the future signals reuse of those
routes, and therefore adaptive ﬁltering.
9. CONCLUSION
This paper tries to reconcile two desirable, but seemingly
incompatible, goals. On the one hand, it is a business reality
that ASes would like to set policies according to their own
specialized needs — whether these arise out of business, or
traﬃc engineering, or other concerns — and they would like
to keep these policies private. On the other hand, every AS
would like to have a stable Internet, where routes didn’t os-
cillate. Unfortunately, recent theoretical results make clear
that to ensure a priori, without knowing the policies be-
forehand or relying on assumptions about the structure of
business relationships, that routing will be stable, ASes must
be deprived of essentially all policy autonomy. In this pa-
per we no longer require an a priori guarantee, but instead
seek to remove policy-induced oscillations when they arise.
This allows us to preserve policy freedom when possible, and
impose stability when required.
[1] J. A. Cobb, M. G. Gouda, and R. Musunuri. A
Stabilizing Solution to the Stable Paths Problem. In
Symposium on Self-Stabilizing Systems,
Springer-Verlag LNCS, pages 169–183. ACM Press,
2003.
[2] N. Feamster, R. Johari, and H. Balakrishnan.
Implications of Autonomy for the Expressiveness of
Policy Routing. In SIGCOMM ’05: Proceedings of the
2005 Conference on Applications, Technologies,
Architectures, and Protocols for Computer
Communications, New York, NY, USA, 2005. ACM
Press.
[3] L. Gao. On inferring autonomous system relationships
in the internet. IEEE/ACM Trans. Netw.,
9(6):733–745, 2001.
[4] L. Gao, T. G. Griﬃn, and J. Rexford. Inherently Safe
Backup Routing with BGP. In Proceedings of IEEE
INFOCOM 2001. IEEE Computer Society, IEEE
Press, April 2001.
[5] L. Gao and J. Rexford. Stable Internet Routing
Without Global Coordination. IEEE/ACM
Transactions on Networking, 9(6):681–692, 2001.
[6] T. Griﬃn and G. T. Wilfong. Analysis of the MED
Oscillation Problem in BGP. In ICNP ’02:
Proceedings of the 10th IEEE International
Conference on Network Protocols, pages 90–99,
Washington, DC, USA, 2002. IEEE Computer Society.
[7] T. G. Griﬃn, A. D. Jaggard, and V. Ramachandran.
Design Principles of Policy Languages for Path Vector
Protocols. In SIGCOMM ’03: Proceedings of the 2003
Conference on Applications, Technologies,
Architectures, and Protocols for Computer
Communications, pages 61–72, New York, NY, USA,
2003. ACM Press.
[8] T. G. Griﬃn, F. B. Shepherd, and G. Wilfong. The
Stable Paths Problem and Interdomain Routing.
ACM/IEEE Transactions on Networking,
10(2):232–243, April 2002.
[9] T. G. Griﬃn and G. Wilfong. A Safe Path Vector
Protocol. In Proceedings of IEEE INFOCOM 2000.
IEEE Communications Society, IEEE Press, March
2000.
[10] A. D. Jaggard and V. Ramachandran. Robustness of
Class-Based Path-Vector Systems. In Proceedings of
ICNP’04, pages 84–93. IEEE Computer Society, IEEE
Press, October 2004.
[11] A. D. Jaggard and V. Ramachandran. Robust
Path-Vector Routing Despite Inconsistent Route
Preferences. In Proceedings of ICNP’06. IEEE
Computer Society, IEEE Press, November 2006.
[12] Y. Rekhter, T. Li, and e. Susan Hares. A Border
Gateway Protocol 4 (BGP-4). RFC 4271, January
2006.
[13] University of Oregon RouteViews Project.
http://www.routeviews.org.
[14] J. L. Sobrinho. An Algebraic Theory of Dynamic
Network Routing. ACM/IEEE Transactions on
Networking, 13(5):1160–1173, October 2005.
[15] L. Subramanian, S. Agarwal, J. Rexford, and R. H.
Katz. Characterizing the internet hierarchy from
multiple vantage points. In Proc. of IEEE INFOCOM
2002, New York, NY, Jun 2002.
[16] H. Tangmunarunkit, R. Govindan, S. Shenker, and
D. Estrin. The impact of routing policy on internet
paths. In Proc. of IEEE INFOCOM 2001, Anchorage,
AK, Apr 2001.
[17] K. Varadhan, R. Govindan, and D. Estrin. Persistent
Route Oscillations in Inter-domain Routing. Computer
Networks, 32(1):1–16, March 2000.