### Optimized Text

#### Figure 17: Deviation of Path Lengths from Shortest Path
- **Shortest Path**
- **C.d. 2**
- **C.d. 4**
- **C.d. 6**
- **C.d. 6, 10% Misconfig**

**Memory Requirement Ratio**
- **1**
- **1.5**
- **2.5**

**Figure 17** illustrates the deviation of path lengths from the shortest path. As the deviation increases, more routes are explored and stored, leading to higher memory requirements. Specifically, a maximum depth of 6 results in route inflation that closely matches current Internet conditions [16].

Next, we examined the impact of additional memory requirements for Precedence by varying route inflation. In all cases, we verified that using Precedence in networks with no disputes resulted in all nodes selecting their most preferred next hops without unnecessary suppression of routes. For standard BGP, the memory required at a router is proportional to the number of its neighbors. From **Figure 17**, we observed that deviations from the shortest path result in more routes being explored and stored before convergence when using Precedence. On average, Precedence requires 50% more memory for each destination prefix, which can be amortized across the network by jittering initial prefix advertisements. Furthermore, actual route exploration in the Internet may be less extensive due to economic policies constraining route advertisements.

To investigate policy disputes caused by misconfigurations, we randomly assigned next-hop preferences to 10% of the nodes, verified the existence of dispute wheels (where normal BGP does not converge), and confirmed that the networks converged when Precedence was used. As shown in **Figure 17**, the memory requirements remained approximately the same as before.

#### Figure 18: Convergence Times
- **Shortest path, BGP**
- **C.d. 6, BGP**
- **C.d. 6, Pred**
- **C.d. 6, Pred, 10% Misconfig**

**Convergence Time (min)**
- **1.5**
- **2**
- **2.5**
- **3**
- **3.5**
- **4**
- **4.5**
- **5**
- **5.5**

**Figure 18** shows that the use of the precedence metric does not delay convergence, even in the presence of misconfigurations. As expected, local preferences based on shortest paths result in faster convergence. Importantly, convergence time is not significantly affected by the use of Precedence or the presence of misconfigurations (disputes) in the network.

### 8. Discussion

#### 8.1 Misbehavior
A key concern when entities act independently to maximize profits is the potential for misbehavior. This section discusses the detection of misbehavior and the necessary modifications to the protocol to remove the constraint where an AS is represented by a single node.

Since the global precedence metric can restrict the autonomy of an AS, there may be incentives for non-compliance. We discuss various ways ASes can misbehave and detection methods that rely on observing incoming and outgoing routes.

- **(P2:0)**: There is definite misconduct if the outgoing route’s global precedence is less than its incoming route's, even if A filters P1:0.
- **(P2:1)**: There is no misconduct only if A permanently filters route P1:0. In this case, P2:1 is the only incoming route and the most locally preferred, so the outgoing route’s global precedence is not incremented.
- **(Px:v)**: Where v > 2 for x = 1 and x = 2, node A artificially increases the outgoing precedence value, preventing upstream ASes from selecting a route traversing this AS. While some may consider this misbehavior, it can be used to indicate backup links.

From this example, we can determine that an AS is misbehaving if:
1. An outgoing route has a global precedence value less than its corresponding incoming route.
2. An outgoing route has a global precedence value greater than its corresponding incoming route by more than one.

#### 8.2 Adaptive Filtering
Misbehavior that is more difficult to detect involves adaptive filtering. Let M be the node representing a misbehaving AS. If M always filters its spoke path, it will never become a pivot node and cannot influence the convergence process. However, M involved in a dispute can initially accept routes from neighbors along the spoke and rim. When routing stabilizes and the precedence metric forces selection of the spoke path, M can subsequently decide to filter that route to select the locally preferred path along the rim.

Two scenarios can occur, as illustrated in **Figure 20**:
- **Part (a)**: The total number of pivot nodes in dispute is odd. Selecting a next hop that is more locally preferred but has a higher global precedence value eventually results in M not having a valid route. Removing the filter causes the system to oscillate again.
- **Part (b)**: An even number of pivot nodes can cause the system to settle in a stable state even if M misbehaves, allowing M to use the path it locally prefers.

In general, it is difficult to determine the number of pivot nodes in dispute and whether adaptive filtering in M can result in oscillations. To better control the situation, we propose a method to detect the various types of misbehavior discussed above.

#### 8.3 Misbehavior Detection
Most ASes consist of multiple routers, so the assumption that an AS can be modeled by a single router is often invalid. For instance, in **Figure 21(i)**, router A selects the less preferred route (R0:0) and advertises (AR0:1) to B, which then chooses (R2:1). If we logically collapse A and B into a single node and aggregate their inputs, the output should have been (...R0:1) instead.

We propose a slight tweak to the protocol within an AS: when an ingress router (e.g., A) advertises a route to an internal peer, it appends the route’s global precedence when received (the ingress value) and after updates (the egress value). Upon reception, B uses the ingress value to determine the selected route. The egress value is updated and lower-bounded by the previous egress value. Advertisements to neighboring ASes carry only the egress value. **Figure 21(ii)** shows the same network with the tweaked protocol. Correct behavior will cause A to advertise (AR0:0), and B to advertise (BAR0:1). If A misbehaves and selects (R1:1), the output will be incorrect.

With the modified protocol, the conditions described in §8.1 can be used to detect adaptive filtering. For a dispute to occur, a less preferred route (say Rlp) must have been advertised before the more preferred one is selected. Thus, Rlp must have been observed before but not thereafter. A monitoring mechanism can detect routes that should have been selected but weren’t. These routes are hashed and stored. Since the monitor is maintained by a third party, hashing provides anonymity. The future output of any stored route signals reuse and adaptive filtering.

### 9. Conclusion
This paper aims to reconcile two desirable but seemingly incompatible goals. On one hand, ASes want to set policies according to their specialized needs—whether for business, traffic engineering, or other concerns—and keep these policies private. On the other hand, every AS desires a stable Internet where routes do not oscillate. Recent theoretical results show that ensuring a priori stability without knowing policies beforehand or relying on assumptions about business relationships would require depriving ASes of almost all policy autonomy. Instead, we seek to remove policy-induced oscillations when they arise, preserving policy freedom when possible and imposing stability when required.

### References
[1] J. A. Cobb, M. G. Gouda, and R. Musunuri. A Stabilizing Solution to the Stable Paths Problem. In Symposium on Self-Stabilizing Systems, Springer-Verlag LNCS, pages 169–183. ACM Press, 2003.
[2] N. Feamster, R. Johari, and H. Balakrishnan. Implications of Autonomy for the Expressiveness of Policy Routing. In SIGCOMM ’05: Proceedings of the 2005 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, New York, NY, USA, 2005. ACM Press.
[3] L. Gao. On inferring autonomous system relationships in the internet. IEEE/ACM Trans. Netw., 9(6):733–745, 2001.
[4] L. Gao, T. G. Griffin, and J. Rexford. Inherently Safe Backup Routing with BGP. In Proceedings of IEEE INFOCOM 2001. IEEE Computer Society, IEEE Press, April 2001.
[5] L. Gao and J. Rexford. Stable Internet Routing Without Global Coordination. IEEE/ACM Transactions on Networking, 9(6):681–692, 2001.
[6] T. Griffin and G. T. Wilfong. Analysis of the MED Oscillation Problem in BGP. In ICNP ’02: Proceedings of the 10th IEEE International Conference on Network Protocols, pages 90–99, Washington, DC, USA, 2002. IEEE Computer Society.
[7] T. G. Griffin, A. D. Jaggard, and V. Ramachandran. Design Principles of Policy Languages for Path Vector Protocols. In SIGCOMM ’03: Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, pages 61–72, New York, NY, USA, 2003. ACM Press.
[8] T. G. Griffin, F. B. Shepherd, and G. Wilfong. The Stable Paths Problem and Interdomain Routing. ACM/IEEE Transactions on Networking, 10(2):232–243, April 2002.
[9] T. G. Griffin and G. Wilfong. A Safe Path Vector Protocol. In Proceedings of IEEE INFOCOM 2000. IEEE Communications Society, IEEE Press, March 2000.
[10] A. D. Jaggard and V. Ramachandran. Robustness of Class-Based Path-Vector Systems. In Proceedings of ICNP’04, pages 84–93. IEEE Computer Society, IEEE Press, October 2004.
[11] A. D. Jaggard and V. Ramachandran. Robust Path-Vector Routing Despite Inconsistent Route Preferences. In Proceedings of ICNP’06. IEEE Computer Society, IEEE Press, November 2006.
[12] Y. Rekhter, T. Li, and e. Susan Hares. A Border Gateway Protocol 4 (BGP-4). RFC 4271, January 2006.
[13] University of Oregon RouteViews Project. http://www.routeviews.org.
[14] J. L. Sobrinho. An Algebraic Theory of Dynamic Network Routing. ACM/IEEE Transactions on Networking, 13(5):1160–1173, October 2005.
[15] L. Subramanian, S. Agarwal, J. Rexford, and R. H. Katz. Characterizing the internet hierarchy from multiple vantage points. In Proc. of IEEE INFOCOM 2002, New York, NY, Jun 2002.
[16] H. Tangmunarunkit, R. Govindan, S. Shenker, and D. Estrin. The impact of routing policy on internet paths. In Proc. of IEEE INFOCOM 2001, Anchorage, AK, Apr 2001.
[17] K. Varadhan, R. Govindan, and D. Estrin. Persistent Route Oscillations in Inter-domain Routing. Computer Networks, 32(1):1–16, March 2000.