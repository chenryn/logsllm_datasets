    ``` screen
    # dmidecode
    ```
    在输出中，找到 `Handle`{.literal} 标识符与有问题的 NVDIMM 的
    `phys_id`{.literal} 属性匹配的条目。`Locator`{.literal}
    字段列出了无法正常工作的 NVDIMM 使用的内存插槽。
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531490260400}
    **例 5.9. NVDIMM 内存插槽列表**
    ::: example-contents
    在以下示例中，`nmem0`{.literal} 设备与 `0x0010`{.literal}
    标识符匹配，并使用 `DIMM-XXX-YYYY`{.literal} 内存插槽：
    ``` screen
    # dmidecode
    ...
    Handle 0x0010, DMI type 17, 40 bytes
    Memory Device
            Array Handle: 0x0004
            Error Information Handle: Not Provided
            Total Width: 72 bits
            Data Width: 64 bits
            Size: 125 GB
            Form Factor: DIMM
            Set: 1
            Locator: DIMM-XXX-YYYY
            Bank Locator: Bank0
            Type: Other
            Type Detail: Non-Volatile Registered (Buffered)
    ...
    ```
    :::
    :::
4.  备份 NVDIMM 上的命名空间中的所有数据。如果您在替换 NVDIMM
    前没有备份数据，当您从系统中删除 NVDIMM 时数据将会丢失。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在某些情况下，比如 NVDIMM 完全无法正常工作，备份可能会失败。
    要防止这种情况，使用 S.M.A.R.T 定期监控 NVDIMM 设备，如 ["使用
    S.M.A.R.T 监控 NVDIMM
    健康状况。"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#monitoring-nvdimm-health-using-s-m-a-r-t-_troubleshooting-nvdimm-persistent-memory "使用 S.M.A.R.T 监控 NVDIMM 健康状况。"){.xref}
    所述，并在出现问题前替换失败的 NVDIMM。
    :::
    使用以下命令列出 NVDIMM 上的命名空间：
    ``` screen
    # ndctl list --namespaces --dimm=DIMM-ID-number
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531490250832}
    **例 5.10. NVDIMM 命名空间列表**
    ::: example-contents
    在以下示例中, `nmem0`{.literal} 设备包含需要备份的
    `namespace0.0`{.literal} 和 `namespace0.2`{.literal} 命名空间：
    ``` screen
    # ndctl list --namespaces --dimm=0
    [
      {
        "dev":"namespace0.2",
        "mode":"sector",
        "size":67042312192,
        "uuid":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
        "raw_uuid":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
        "sector_size":4096,
        "blockdev":"pmem0.2s",
        "numa_node":0
      },
      {
        "dev":"namespace0.0",
        "mode":"sector",
        "size":67042312192,
        "uuid":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
        "raw_uuid":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
        "sector_size":4096,
        "blockdev":"pmem0s",
        "numa_node":0
      }
    ]
    ```
    :::
    :::
5.  以物理方式替换失效的 NVDIMM。
:::
::: itemizedlist
**其它资源**
-   `ndctl-list(1)`{.literal} man page
-   `dmidecode(8)`{.literal} man page
:::
:::
:::
:::
[]{#discarding-unused-blocks_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#discarding-unused-blocks_managing-storage-devices}第 6 章 丢弃未使用块 {.title}
:::
您可以在支持它们的块设备中执行或调度丢弃操作。
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#block-discard-operations_discarding-unused-blocks}块忽略操作 {.title}
:::
块忽略操作丢弃了被挂载的文件系统不再使用的块。它们在以下方面很有用：
::: itemizedlist
-   固态驱动器（SSD）
-   精简置备存储
:::
### []{#discarding-unused-blocks_managing-storage-devices.html#requirements}要求
基本文件系统的块设备必须支持物理的丢弃（discard）操作。
如果 `/sys/block/device/queue/discard_max_bytes`{.literal}
文件中的值不是零，则代表支持物理丢弃操作。
:::
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#types-of-block-discard-operations_discarding-unused-blocks}块丢弃操作的类型 {.title}
:::
您可以使用不同方法运行 discard 操作：
::: variablelist
[批量丢弃]{.term}
:   由用户明确运行。它们丢弃所选文件系统中的所有未使用块。
[在线丢弃]{.term}
:   在挂载时指定。它们在没有用户干预的情况下实时运行。在线丢弃操作只丢弃从已使用到空闲的块。
[定期丢弃]{.term}
:   `systemd`{.literal} 服务定期运行的批处理操作。
:::
XFS 和 ext4 文件系统以及 VDO 支持所有类型。
### []{#discarding-unused-blocks_managing-storage-devices.html#recommendations_2}建议
红帽建议您使用批处理或周期性丢弃。
仅在以下情况下使用在线丢弃：
::: itemizedlist
-   系统负载不允许使用批量丢弃，或者
-   为了保持性能，需要在线丢弃操作。
:::
:::
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#performing-batch-block-discard_discarding-unused-blocks}执行批块丢弃 {.title}
:::
这个过程执行批块丢弃操作，忽略挂载的文件系统中未使用的块。
::: itemizedlist
**先决条件**
-   挂载文件系统。
-   文件系统底层的块设备支持物理忽略操作。
:::
::: itemizedlist
**流程**
-   使用 `fstrim`{.literal} 实用程序：
    ::: itemizedlist
    -   要只在所选文件系统中执行丢弃，请使用：
        ``` screen
        # fstrim mount-point
        ```
    -   要在所有挂载的文件系统中执行丢弃，请使用：
        ``` screen
        # fstrim --all
        ```
    :::
:::
如果您在其中执行 `fstrim`{.literal} 命令：
::: itemizedlist
-   不支持丢弃操作的设备，或者
-   由多个设备组成的逻辑设备（LVM 或者
    MD），其中任意设备不支持丢弃操作：
:::
下面的信息将显示：
``` screen
# fstrim /mnt/non_discard
fstrim: /mnt/non_discard: the discard operation is not supported
```
::: itemizedlist
**其它资源**
-   `fstrim(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#enabling-online-block-discard_discarding-unused-blocks}启用在线块丢弃 {.title}
:::
这个过程启用在线块丢弃操作，该操作可自动丢弃所有支持的文件系统中未使用的块。
::: itemizedlist
**流程**
-   在挂载时启用在线丢弃：
    ::: itemizedlist
    -   在手动挂载文件系统时，添加 `-o discard`{.literal} 挂载选项：
        ``` screen
        # mount -o discard device mount-point
        ```
    -   当永久挂载文件系统时，将 `discard`{.literal} 选项添加到
        `/etc/fstab`{.literal} 文件中的挂载条目中。
    :::
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
-   `fstab(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#enabling-online-block-discard-using-rhel-system-roles_discarding-unused-blocks}使用 RHEL 系统角色启用在线块丢弃 {.title}
:::
这部分论述了如何使用角色启用在线块丢弃 `storage`{.literal}。
::: itemizedlist
**先决条件**
-   已存在包括 `storage`{.literal} 角色的 Ansible playbook。
:::
如需有关如何应用此 playbook 的信息，请参阅
[应用角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-system-administration_configuring-basic-system-settings#applying-a-role_con_intro-to-rhel-system-roles){.link}。
::: section
::: titlepage
## []{#discarding-unused-blocks_managing-storage-devices.html#an-example-ansible-playbook-to-enable-online-block-discard_enabling-online-block-discard-using-rhel-system-roles}启用在线块丢弃的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用
`storage`{.literal} 角色来挂载启用了在线块丢弃的 XFS 文件系统。
::: example
[]{#discarding-unused-blocks_managing-storage-devices.html#idm140531490168544}
**例 6.1. 一个 playbook，它在 /mnt/data/ 上启用在线块丢弃功能**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
        mount_point: /mnt/data
        mount_options: discard
  roles:
    - rhel-system-roles.storage
```
:::
:::
::: itemizedlist
**其它资源**
-   此 playbook 还执行 ["永久挂载文件系统的 Ansible playbook
    示例"一节](#managing-local-storage-using-rhel-system-roles_managing-storage-devices.html#an-example-ansible-playbook-to-persistently-mount-a-file-system_managing-local-storage-using-rhel-system-roles "永久挂载文件系统的 Ansible playbook 示例"){.xref}
    中描述的持久挂载示例的所有操作。
:::
::: itemizedlist
-   有关 `storage`{.literal} 系统角色中使用的参数的详情，请查看
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
:::
::: section
::: titlepage
# []{#discarding-unused-blocks_managing-storage-devices.html#enabling-periodic-block-discard_discarding-unused-blocks}启用定期块丢弃 {.title}
:::
这个过程启用一个 `systemd`{.literal}
计时器，它会定期丢弃所有支持的文件系统中未使用的块。
::: itemizedlist
**流程**
-   启用并启动 `systemd`{.literal} 计时器：
    ``` screen
    # systemctl enable --now fstrim.timer
    ```
:::
:::
:::
[]{#getting-started-with-iscsi_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#getting-started-with-iscsi_managing-storage-devices.html#getting-started-with-iscsi_managing-storage-devices}第 7 章 iSCSI 入门 {.title}
:::
Red Hat Enterprise Linux 8 使用 `targetcli`{.literal} shell
作为命令行界面执行以下操作：
::: itemizedlist
-   添加、删除、查看和监控 iSCSI 存储间的连接来利用 iSCSI 硬件。