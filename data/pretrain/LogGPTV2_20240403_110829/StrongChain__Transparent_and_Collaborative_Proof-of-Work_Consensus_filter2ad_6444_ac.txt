is made in accordance with recent results on the long-term
instability of deﬂationary cryptocurrencies [4, 27, 47].
4.5 Timestamps
In StrongChain, we follow the Bitcoin rules on constrain-
ing timestamps (see Section 2.1), however, we redeﬁne how
block timestamps are interpreted. Instead of solely relying
on a timestamp put by the miner who mined the block, block
timestamps in our system are derived from the strong header
and all weak headers included in the corresponding block.
The algorithm to derive a block’s timestamp is presented as
Figure 2: An example of a forked blockchain in StrongChain.
ers that contribute to the block’s PoW. In the case of a fork,
our scheme relies on the strongest chain rule, however, the
PoW is computed differently than in Bitcoin. For every chain
its PoW is calculated as presented by the chainPoW() proce-
dure in Algorithm 1. Every chain is parsed and for each of
its blocks the PoW is calculated by adding:
1. the PoW of the strong header, computed as Tmax/Ts,
where Tmax is the maximum target value, and
2. the accumulated PoW of all associated weak headers,
counting each weak header equally as Tmax/Tw.
Then the chain’s PoW is expressed as just the sum of all its
blocks’ PoW. Such an aggregated chain’s PoW is compared
with the competing chain(s). The chain with the largest ag-
gregated PoW is determined as the current one. As difﬁ-
culty in our protocol changes over time, the strong target Ts
and PoW of weak headers are relative to the maximum tar-
get value Tmax. We assume that nodes of the network check
whether every difﬁculty window is computed correctly (we
skipped this check in our algorithms for easy description).
Including and empowering weak headers in our protocol
moves away from Bitcoin’s “binary” granularity and gives
blocks better expression of the PoW they convey. An ex-
ample is presented in Figure 2. For instance, nodes having
the blocks Bi and B(cid:48)
i can immediately decide to follow the
block Bi as it has more weak headers associated, thus it has
accumulated more PoW than the block B(cid:48)
i.
An exception to this rule is when miners solve conﬂicts.
Namely, on receiving a new block, miners run the algorithm
as presented, however, they also take into consideration PoW
contributions of known weak headers that point to the last
blocks. For instance, for a one-block-long fork within the
same difﬁculty window, if a block B includes l weak headers
and a miner knows of k weak headers pointing to B, then
that miner will select B over any competing block B(cid:48) that
includes l(cid:48) weak and has k(cid:48) known weak headers pointing to
it if l + k > l(cid:48) + k(cid:48). Note that this rule incentivizes miners to
propagate their solutions as quickly as possible as competing
blocks become “stronger” over time.
USENIX Association
28th USENIX Security Symposium    825
…weak header
strong header
transactions
blockBi-2Bi-1BiBi+1Bi’getTimestamp() in Algorithm 1. A block’s timestamp is de-
termined as a weighted average timestamp over the strong
header’s timestamp and all timestamps of the weak head-
ers included in the block. The strong header’s timestamp
has a weight of 1, while weights of weak header timestamps
are determined as their PoW contributed (namely, a weak
header’s timestamp has a weight of the ratio between the
strong target and the weak target). Therefore, the timestamp
value is adjusted proportionally to the mining power asso-
ciated with a given block. That change reﬂects an average
time of the block creation and mitigates miners that inten-
tionally or misconﬁgured put incorrect timestamps into the
blockchain. We show the effectiveness of this approach in
Section 5.5.
4.6 SPV Clients
Our protocol supports light SPV clients. With every new
block, an SPV client is updated with the following informa-
tion:
hdr,hdr0,hdr1, ...,hdrn,BTproof ,
(4)
where hdr is a strong header, hdri are associated weak head-
ers, and BTproof is an inclusion proof of a binding transac-
tion that contains a hash over the weak headers (see Equa-
tion 3). Note that headers contain redundant ﬁelds, thus as
described in Section 4.2, they can be provided to SPV clients
efﬁciently.
With this data, the client veriﬁes ﬁelds of all headers, com-
putes the PoW of the block (analogous, as in chainPoW()
from Algorithm 1), and validates the BTproof proof to check
whether all weak headers are correct, and whether the trans-
action is part of the blockchain (the proof is validated against
TxRoot of hdr). Afterward, the client saves the strong header
hdr and its computed PoW, while other messages (the weak
headers and the proof) can be dropped.
5 Analysis
In this section, we evaluate the requirements discussed in
Section 2.3. We start with analyzing StrongChain’s efﬁ-
ciency and practicality. Next, we study how our design helps
with reward variance, chain quality, and security.
5.1 Efﬁciency and Practicality
For the efﬁciency, it is important to consider the main source
of additional load on the bandwidth, storage, and processing
power of the nodes: the weak headers. Hence, in the fol-
lowing section we analyze the probability distribution of the
number of weak headers. Next, we discuss the value of the
impact of the parametrization on the average block rewards.
5.1.1 Number of Weak Headers
In Bitcoin, we assume that hashes are drawn randomly be-
tween 0 and Tmax = 2256 − 1. Hence, a single hash be-
ing smaller than Tw is a Bernoulli trial with parameter
pw = Tw/2256. The number of hashes tried until a weak
header is found is therefore geometrically distributed, and
the time in seconds between two weak headers is approxi-
mately exponentially distributed with rate η pw, where η is
the total hash rate per second and pw is chosen such that
η pw ≈ 1/600. When a weak header is found, it is also a
strong block with probability ps/pw (where ps = Ts/2256),
which is again a Bernoulli trial. Hence, the probability
distribution of the number of weak headers found between
two strong blocks is that of the number of trials before the
ﬁrst successful trial — as such, it also follows a geometric
distribution, but with mean pw/ps − 1.5 For example, for
Tw/Ts = 210 this means that the average number of weak
headers per block equals 1023. With 60 bytes per weak
header (see Section 4.2) and 1MB per Bitcoin block, this
would mean that the load increases by little over 6% on av-
erage with a small computational overhead introduced (see
details in Section 7). The probability of having more than
16667 headers (or 1MB) in a block would equal.6
(cid:16)
1− 2−10(cid:17)16668 ≈ 8.4603· 10−8.
=
(cid:19)16668
(cid:18)
1− ps
pw
Since around 51,000 Bitcoin blocks are found per year, this
is expected to happen roughly once every 230 years.
5.1.2 Total Rewards
To ease the comparison to the Bitcoin protocol, we can en-
force the same average mining reward per block (currently
12.5 BTC). Let R denote Bitcoin’s mining reward. Since we
reward weak headers as well as strong blocks, we need to
scale all mining rewards by a constant c to ensure that the
total reward remains unchanged — this is done in the re-
wardBlock function in Algorithm 1. As argued previously,
we reward all weak headers equally by γRTs/Tw. Since
the average number of weak headers per strong block is
Tw/Ts − 1, this means that the expected total reward per
block (i.e., strong block and weak header rewards) equals
cR + cRγTs/Tw · (Tw/Ts − 1). Hence, we ﬁnd that
c =
1
1 + γ(Tw/Ts − 1)Ts/Tw
,
5Another way to reach this conclusion is as follows:
the number of
weak headers found in a ﬁxed time interval is Poisson distributed, and it can
be shown that the number of Poisson arrivals in an interval with exponen-
tially distributed length is geometrically distributed.
6For an actual block implementation, we advice to introduce separate
spaces for weak headers and transactions. With such a design, miners do not
have incentives and trade-offs between including more transactions instead
of weak headers.
826    28th USENIX Security Symposium
USENIX Association
which for large values of Tw/Ts is close to 1/(1 + γ). This
means that if γ = 1, the strong block and weak header re-
wards contribute almost equally to a miner’s total reward.
5.2 Reward Variance of Solo Mining
The tendency towards centralization in Bitcoin caused by
powerful mining pools can largely be attributed to the high
reward variance of solo mining [15, 37]. Therefore, keeping
the reward variance of a solo miner at a low level is a central
design goal.
Let RBC and RSC be the random variables representing the
per-block rewards for an α-strong solo miner in Bitcoin and
in StrongChain, respectively. For any given strong block in
both protocols, we deﬁne the random variable I as follows:
(cid:40)
I =
1 the block is mined by the solo miner,
0 otherwise.
By deﬁnition, I has a Bernoulli distribution, which means
that E(I) = α and Var(I) = α(1− α), where E and Var are
the mean and variance of a random variable respectively. The
following technical lemma will aid our analysis of the reward
variances of solo miners:
Lemma 1. Let X1,X2, . . . be independent and identically dis-
tributed random variables. Let N be deﬁned on {0,1, . . .}
and independent of X1,X2, . . .. Let N and all Xi have ﬁnite
mean and variance. Then
Var
Xi
= E(N)Var(X) + Var(N)(E(X))2.
(cid:33)
(cid:32) N
∑
i=1
Proof. See [7].
Reward Variance of Solo Mining in Bitcoin. Bitcoin re-
wards the miner of a block creator with the ﬁxed block re-
ward R and the variable (total) mining fees, which we denote
by the random variable F. Therefore, we have
RBC = I(R + F),
which implies that
Var(RBC) = R2Var(I) + Var(IF).
(5)
Since IF = ∑I
N and F for X) to obtain
i=0 F, we can use Lemma 1 (substituting I for
Var (IF) = E(I)Var(F) + Var(I)E2(F).
Combining (5) and (6) gives
Var(RBC) = E(I)Var(F) + Var(I)
= αVar(F) + α(1− α)
(cid:16)E2(F) + R2(cid:17)
(cid:16)E2(F) + R2(cid:17)
(6)
(7)
.
When the fees are small compared to the mining reward, this
simpliﬁes to α(1− α)R2. By comparison, in [37] the vari-
ance of the block rewards (without fees) earned by a solo
miner across a time period of t seconds is studied, and found
to equal αR2t/600.7 The same quantity can be obtained by
using (7), Lemma 1, and the total number of strong blocks
found (by any miner) after t seconds of mining (which has a
Poisson distribution with mean t/600).
Reward Variance of Solo Mining in StrongChain. For
RSC, we assume that the solo miner has N weak headers in-
cluded in the strong block, and that she obtains cγRTs/Tw
reward per weak header. Then the variance equals
RSC = I(cR + F) + cγRTs/TwN,
where c is the scaling constant derived in Section 5.1.2.
Hence, by applying Lemma 1, we compute the variance of
RSC as
Var(RSC) = (cR)2Var(I) + Var(IF)
+ (cγRTs/Tw)2Var(N).
(8)
The ﬁrst term, which represents the variance of the strong
block rewards, is similar to Bitcoin but multiplied by c2. If
we choose Tw/Ts = 1024 and γ = 10 (this choice is moti-
vated later in this section), c2 roughly equals 0.0083, which
is quite small. Hence, the strong block rewards have a much
smaller impact on the reward variance in our setting than in
Bitcoin. The second term, which represents the variance of
the fees, is precisely the same as for Bitcoin. The third term
represents the variance of the weak header rewards, which in
turn completely depends on Var(N).
To evaluate Var(N), we again use Lemma 1: let, for any
weak header, J equal 1 if it is found by the solo miner, and
0 otherwise. Also, let L be the total number of weak head-
ers found in the block, so including those not found by the
solo miner. Then N is the sum of L instances of J, where J
has a Bernoulli distribution with success probability α (and
therefore E(J) = α and Var(J) = α(1 − α)), and L has a
geometric distribution with success probability Ts/Tw (and
therefore E(L) = Tw/Ts − 1 and Var(L) = (Tw/Ts)2 − Tw/Ts.
By substituting this into (8), we obtain:
Var(N) = E(L)Var(J) + Var(L)(E(J))2
= (Tw/Ts − 1)α(1− α)
+ ((Tw/Ts)2 − Tw/Ts)α2
(9)
Substituting (9) for Var(N) and α(1− α) for Var(I) into (8)
then yields an expression that can be evaluated for different
values of Tw/Ts, γ, and α, as we discuss in the following.
7In particular, it is found to be htR2/(232D), where h = αη and
η/(232D) ≈ 1/600.
USENIX Association
28th USENIX Security Symposium    827
tion [10], which is the fraction of mining power used for non-
stale blocks. In StrongChain, the stale rate of strong blocks
may increase due to high latency. After all, while a new
block is being propagated through the network, weak head-
ers that strengthen the previous block that are found will be
included by miners in their PoW calculation. As a result,
some miners may refuse to switch to the new block when
it arrives. However, the probability of this happening is very
low: because each weak header only contributes Ts/Tw to the
difﬁculty of a block, it would take on average 10 minutes to
ﬁnd enough weak headers to outweigh a block. As we can
see in Table 1, the effect on the stale rate is negligible even
for very high network latencies (i.e., 53 seconds). We also
emphasize that the strong block stale rate is less important in
our setting, as the losing miner still would beneﬁt from her
weak headers appended to the winning block.
Regarding the fairness, deﬁned as the ratio between the
observed share of the rewards (we simulate using one 10%-
strong miner and a 90%-strong one) and the share of the min-
ing power, we see that StrongChain does slightly worse than
Bitcoin for high network latencies. The most likely cause is
that due to the delay in the network, the 10%-strong miner
keeps mining on a chain that has already been extended for
longer than necessary. This gives the miner a slight disad-
vantage compared to the 90%-strong miner.
5.4 Security
One of the main advantages of StrongChain is the added ro-
bustness to selﬁsh mining strategies akin to those discussed
in [11] and [39]. In selﬁsh mining, attackers aim to increase
their share of the earned rewards by tricking other nodes into
mining on top of a block that is unlikely to make it onto the
main chain, thus wasting their mining power. This may come
at a short-term cost, as the chance of the attacker’s blocks go-
ing stale is increased — however, the difﬁculty rescale that
occurs every 2016 blocks means that if the losses to the hon-
est nodes are structural, the difﬁculty will go down and the
gains of the attacker will increase.
In the following, we will consider the selﬁsh mining strat-
egy of [11],8 described as follows:
• The attacker does not propagate a newly found block until
she ﬁnds at least a second block on top of it, and then only
if the difference in difﬁculty between her chain and the
strongest known alternative chain is between zero and R.
• The attacker adopts the strongest known alternative chain
if its difﬁculty is at least greater than her own by R.
Figure 3: Coefﬁcients of variation for the total rewards of α-strong
miners for different strong/weak header difﬁculty ratios (Tw/Ts = 1
corresponds to Bitcoin). The lines indicate the exact results ob-
tained using our analysis, whereas the markers indicate simulation
results. We used γ = log2(Tw/Ts). The black lines indicate that for
Tw/Ts = 1024, a 0.1%-strong miner has a coefﬁcient of variation
that is comparable to a 9%-strong miner’s in Bitcoin.
Comparison The difference between between (7) and (8)
in practice is illustrated in Figure 3. This is done by com-
paring for a range of different values of α the block rewards’
coefﬁcient of variation, which is the ratio of the square root
of the variance to the mean.
To empirically validate the results, we have also imple-
mented a simulator in Java that can evaluate Bitcoin as well