### 高级配置功能

除了上一节介绍的解析算子和常用设置项外，日志易还提供了高级配置功能，允许用户直接在页面上输入JSON格式的算子配置。系统会对JSON格式进行校验，但如果参数错误，可能会导致规则解析失败等问题。因此，建议用户在使用高级配置时，务必确保配置验证通过后再提交。

![高级配置界面](images/parserule-advance-conf.png)

如上图所示，点击算子名称后面的切换按钮即可进入高级配置输入框。再次点击该按钮将放弃修改并返回原始状态。

[重要提示]
对于已保存规则中的高级配置，如果强制切换为普通配置界面，则需要重新填写配置项。

### 算子的高级配置介绍

通常情况下，算子的高级配置内容与普通配置界面上的输入项一一对应，但高级配置中包含一些隐藏参数。本节将列出所有算子的高级配置示例。大多数情况下，通过普通配置界面足以完成解析目的，仅在必要时查阅这部分内容。

#### 正则解析

正则解析算子支持单行和多行模式，在高级配置中采用通用格式。`pattern`数组中只有一个列表表示单行正则，多个列表表示多行正则。示例如下：

```json
{
    "source": "raw_message",
    "pattern": [
        ["(?.*)"],
        ["(?.*)"]
    ],
    "multiline": true,
    "condition": {
        "rule": {
            "field": "a",
            "condition": "equal",
            "value": "1"
        }
    }
}
```

示例中的`condition`部分是所有算子都有的条件控制部分。高级配置支持更复杂的条件控制逻辑，将在后续章节详细讲解。

#### 正则片段解析

正则片段解析算子用于从日志中抽取特定字段。标准正则表达式解析算子要求从日志起始位置开始匹配，而正则片段解析算子可以单独提取小片段的内容。此算子与正则解析算子共用同一入口，只是`pattern`和`extract`两个设置参数不同。示例如下：

```json
{
    "source": "raw_message",
    "multiline": false,
    "rule_name": "",
    "extract": [
        {
            "source": null,
            "regex": "(.*)",
            "fields": {
                "a": "$1"
            },
            "description": "test regex"
        }
    ]
}
```

为了提高匹配效率，建议正则表达式中包含一些固定的文本内容。例如，以下配置用于提取思科fwsm日志中的用户名信息：

```json
{
    "source": "raw_message",
    "rule_name": "report-user_for_cisco_fwsm",
    "multiline": false,
    "extract": [
        {
            "regex": "[Uu]ser\\s[\"|']([^'\"]*)[\"|']",
            "fields": {"user": "$1"},
            "name": "user_for_cisco"
        },
        {
            "regex": "\\sUname:\\s(.*)",
            "fields": {"user": "$1"},
            "name": "uname_for_cisco"
        }
    ]
}
```

#### JSON解析

JSON解析算子中有一个隐藏参数`flatten_short_array`，用于控制是否将只有一个元素的数组转换为普通键值对形式。示例如下：

```json
{
    "source": "raw_message",
    "paths": ["a.b.c"],
    "flatten_short_array": false,
    "extract_limit": 0,
    "condition": {}
}
```

#### XML解析

XML解析算子与JSON解析类似，也包含一个隐藏参数`flatten_short_array`。示例如下：

```json
{
    "source": "raw_message",
    "paths": ["a.b.c"],
    "flatten_short_array": false,
    "extract_limit": 0,
    "condition": {}
}
```

#### URL解析

URL解析算子的高级配置如下：

```json
{
    "source": "request_url",
    "condition": {}
}
```

#### UserAgent解析

UserAgent解析算子的高级配置如下：

```json
{
    "source": "request_user_agent",
    "condition": {}
}
```

#### 删除字段

删除字段算子的高级配置如下：

```json
{
    "source": ["a"],
    "condition": {}
}
```

#### GEO解析

GEO解析算子在高级配置中可以指定`target`参数到其他字段名，并通过`field`参数控制保留的部分解析结果。示例如下：

```json
{
    "source": "request_ip",
    "target": "geo",
    "field": ["all"],
    "condition": {}
}
```

#### 手机号码解析

手机号码解析算子与GEO解析类似，也可以单独控制`target`参数。示例如下：

```json
{
    "source": "phone",
    "target": "phone",
    "condition": {}
}
```

#### 固定电话解析

固定电话解析算子与GEO解析类似，也可以单独控制`target`参数。示例如下：

```json
{
    "source": "telephone",
    "target": "telephone",
    "condition": {}
}
```

#### KeyValue分解

KeyValue分解算子的高级配置如下：

```json
{
    "source": "kv",
    "field_split": [","],
    "value_split": ["="],
    "drop_key_prefix": [],
    "drop_key": [],
    "reserved_key": [],
    "duplicate_key_strategy": "use_last",
    "condition": {}
}
```

#### KeyValue正则匹配

KeyValue正则匹配算子最终会组装成一条复杂的正则表达式进行匹配解析。示例如下：

```json
{
    "source": "kv",
    "kv_match_group": [
        {
            "key_regex": "\\w*",
            "value_regex": "\\d*",
            "value_split": ["="],
            "group_regex": ""
        }
    ],
    "find_first_only": false,
    "reserve_all_values_for_one_key": true,
    "drop_key_prefix": [],
    "drop_key": [],
    "reserved_key": [],
    "duplicate_key_strategy": "use_last",
    "condition": {}
}
```

#### CSV解析（字段值拆分）

CSV解析算子又称为字段值拆分算子。示例如下：

```json
{
    "source": "array",
    "split_string": ",",
    "names": ["field_1"],
    "split_option": null,
    "condition": {}
}
```

#### 数值型字段转换

数值型字段转换算子的高级配置与其他算子不同，采用数组配置，每个元素转换一个数值型字段。示例如下：

```json
[
    {
        "source": "request_status",
        "numeric_type": "int",
        "radix": 10,
        "condition": {}
    }
]
```

#### 自定义字典

自定义字段的高级配置中使用的是已存字典的内部ID。请谨慎修改。示例如下：

```json
{
    "source": "error",
    "id": "1",
    "field": "error_code",
    "match_type": "exact",
    "ext_fields": ["code", "name"],
    "condition": {}
}
```

当`match_type`为`cidr`时，支持CIDR匹配，同时支持IPv4和IPv6。字典文件只能全部是IPv4或全部是IPv6，不能混合使用。如果IP出现重叠，结果只会命中一个，以行数最小的优先级最高。

#### 时间戳识别

时间戳识别算子的高级配置如下：

```json
{
    "source": "timestamp",
    "prefix": "",
    "max_lookahead": 80,
    "rule": ["yyyy-MM-dd HH:mm:ss", "UNIX"],
    "zone": "Asia/Shanghai",
    "locale": "en",
    "condition": {}
}
```

#### IP格式转换

IP格式转换算子的高级配置如下：

```json
{
    "source": "ip",
    "op_type": "long2ip",
    "condition": {}
}
```

通过以上高级配置示例，用户可以根据具体需求灵活调整解析规则，实现更精确的日志解析。