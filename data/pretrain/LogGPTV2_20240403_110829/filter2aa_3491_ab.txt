### Optimized Text

#### Section 1-3 Symbols
- **Section 1**: 21 x 99 symbols
  - **Timing?**
- **Section 2**: 2 copies of 44 symbols
  - **Preamble!**
- **Section 3**: 4 x 56 symbols
  - **Timing?**

```
44404040246000006420004000000000210000000005
44404040246000006420004000000000210000700000
4000000000000000300000000000
2100000000000000300000000000
1100000000000000300000000000
02000000000000002100000000000
```

#### Section 4 Symbols
- **Section 4**: 271 copies of 110 symbols
  - Not all identical due to noise
  - Wrote a Python tool to count packet variations
  - Outputs 1 copy of the most common packet in this section

```
00735350305015510000552000442775576644063173443234570742120043137542513031530202076616413144077352775447244044
51714440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
61704440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
50724440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
62004440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
50724440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
61704440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
50014440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
61704440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
50724440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
51004440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
50104440404024600000642000442774675644063173443233670732120043137542513031530202076616413144077352775447244044
```

#### Preambles
- 20 fixed symbols, followed by 12 that form 1 of 3 patterns
- **Section 2**: Alternates randomly between 2 sequences
  - `4440 4040 2460 0000 6420 0040 0000 0000`
  - `4440 4040 2460 0000 6420 0042 3133 4224`
- **Section 4**: All 271 copies start (after null junk) with:
  - `4440 4040 2460 0000 6420 0044 2774 6756`

#### Structure of Section 4 Data Symbols
- **Header**:
  - 4 bytes null/primer
  - Preamble: 8x4 symbols (20 fixed, 12 variable)
- **Counter**
- **Size**
- **8 Bytes of User Data**
- **Unused Data**

```
4277235742232167  0732  12004313754251303153020207661641  31440773527
```

- **Packet Data**
- **Null Preamble**
- **Packet Data**
- **Checksum**

```
5001 44404040246000006420004427746756 4406317344323367073212004313754251303153020207661641314407735277 5447244044
```

- **Packet Data (16x4 symbols)**:
  - 16 symbol counter (changes every burst, seems to increment)
  - 4 symbols for user data size (learned by modifying badge firmware)
  - 44 symbols for 11 bytes of user data
  - 12 symbols/3 bytes unused by badge

- **Packet Footer**
  - 10 symbols

#### Finding the Mask Symbols for Data 5-11
- We have a stream of differential symbols, but not yet data.
- Every symbol after the preamble is masked.
- Setting the badge to transmit 8 bytes of 0x00 confirmed this, giving 32 symbols of the mask.
- Modified badge firmware to send 11 bytes of 0x00, providing the mask for those 11 user bytes (packet data bytes 5 through 15):

```
5 4 3 5 7 0 3 6 4 0 7 3 0 4 1 4 4 2 7 4 6 2 0 2 0 7 6 6 1 6 4 1 5 2 3 4 4 7 5 1 1 2 5 5
```

- No discernible pattern.

*Note: The last 12 symbols of the preamble may also be masked.*

#### Finding the Mask Symbols for Data 0-4
- The symbols changed with every burst, alternating between changing 1 symbol and (usually) 7.
- Every 8 packets: 8 symbols changed. Every 32: 9 changed. Every 128: 10 changed.
- Conclusion: It’s a counter, 2 bits per symbol, with convolution on half of the bits.
- After reboots, the first symbol alternated between 0 and 4, and on others between 2 and 6.
- Every other location could be any symbol 0-7.
- The first group of 4 symbols had 128 patterns, the next group of 4 had 256 patterns.
- Conclusion: The counter increments by 2, starting either odd or even.
- Incorrectly assumed 0/4 was even.
- Tail of 6 changed symbols obfuscates other symbols.
- Even if byte3 == 0 and byte 4 is known, only the last 2 of 8 symbols can be computed.

```
0000 1111 2222 XXXX XX44
```

- Recorded the counter for a week, observing transitions, which provided a mask for the first 10 symbols.
- Confirmed the count doesn’t start at zero.
- Took 19.1 hours to get the 9th symbol, 76.5 hours for the 10th.
- At this rate, it will take 51 days for 12 symbols, 36 years for 16, and 9139 years for 20.
- Needed a smarter method.

```
4 2 1 0  7 0 6 1  3 2 2 3  4 4 7 6  6 3 3 2
```

- Last symbol to increment plus its tail of 6 changes.
- Confirmed mask:

```
1M
256k
64k
16k
4k
1k
256
64
16
4
.
.
.
.
.
.
2
```

- Last changed symbol indicates:

#### Finding the Mask Symbols for Data 0-4
- Got lucky by getting unlucky—broke a badge.
- Badge became very angry, transmitting a pattern of 108-symbols followed by 108 nulls.
- Counter moved over 16 symbols, transmitted around 1.4 MHz.
- Conclusions:
  - Mask is `4210 7061 3242 2275 0332`
  - Assuming 0/1 guess was right, it’s better to be lucky than smart.

#### Finishing up the Data Mask
- Discovered the counter moves at high speed when updating the TX packet, starting at 346,637.
- Wrote a script to update the TX packet repeatedly, capturing packets and proving the counter is 4 bytes.
- In case you want to send 2 billion packets over 41 years.
- Data mask resulted in erratic values when decoding sequential counts.
- Wrong guess about what 1 and 0 are.
- The broken badge locked the first (unused!) byte at 1 just to cause confusion.
- Masks:
  - For 1: `4210 7061 3242 2275 0332`
  - For 0: `2336 7701 3203 2275 0332`

#### Checksum Mask
- Left with the mask for the Checksum/CRC.
- Needed to know the algorithm and all data values.
- To get the values, had to understand the convolution.
- Guessed and moved on.
- As the counter increments, it either changes:
  - 1 symbol for odd bits
  - 6 of the next 7 symbols for even bits
- This means a 1-bit change is spread out over 7 symbols.
- They are using convolution, possibly like the one used on the Voyager space probe.
- Voyager shift registers:
  - `1111001`
  - `1011011`
- But only for half of the bits.

#### Counter Indicates Values are Convolved
- Started by changing 1 bit at a time.
- Any 1 odd bit always changed 1 symbol, and always by 4.
- Any 1 even bit changed 6 of the next 7 symbols.
- Amount of change depended on mask and distance from the set bit.
- Even bit change (shown in code and mask-bit logic):
  - Symbol positions 0, 2, 3, 6: `mask in [1,2,5,6]) * 4 + 2; [bit0^bit1, 1, 0]`
  - Symbol position 1: `(mask mod 4) * 2 + 3; [bit0^bit1, ~bit0, 1]`
  - Symbol position 5: `mask in [1,3,5,7]) * 6 + 1; [bit0, bit0, 1]`

```
0 1 2 3 4 5 6
0 2 3 2 2 0 1 2
1 6 5 6 6 0 7 6
2 6 7 6 6 0 1 6
3 2 1 2 2 0 7 2
4 2 3 2 2 0 1 2
5 6 5 6 6 0 7 6
6 6 7 6 6 0 1 6
7 2 1 2 2 0 7 2
```

- Symbol position after even bit:
  - Mask (or previous)

#### Reversing Convolution Code, Multiple Bits
- Math worked for decoding 1 even bit set in any position.
- Multiple even bits were a mess.
- After a lot of ugly math and dead ends, realized the math that worked for a mask worked for any previous value.

#### Reversing Convolution Code, Even Bits
- Can now convolve (or de-convolve) any number of even bits.

```
0x00    0x00
0x01    0x00
0x05    0x00
Value of each byte:
Even bits of that byte:
Mask of 0:
Convolved value:
All math is modulo 8
Even bits
Even bits
Even bits
```

#### Convoluted Convolution
- Could decode the counter, mostly sequentially.
- Sometimes multiple odd bits convolved.
- Looked for patterns, added rules until it worked right.
- Rules don’t care about the current bit, only look at previous bits, up to 2 bytes ago.
- Some rules are triggered by 0 bits, not just 1s.
- Rules:
  - `xxx011x`
  - `xxx101x`
  - `1xxxx1x`
  - `11xxxxx`

- Convolution of even bits might be Trellis Code Modulation (TCM).
- Figured it out in a spreadsheet and wrote some Python code.
- Easier than deciphering GNURadio documentation.
- Convolution of odd bits is odd:
  - `xxx011x`
  - `xxx101x`
  - `1xxxx1x`
  - `11xxxxx`
- Rate = 2/3, m = 7?

*Can TCM convolve 1 bit into a pattern like 2322012? Is that middle 0 possible?*

#### CRC Reverse Engineering
- Each packet ended with 10 unknown symbols, equivalent to 20 bits.
- 2^20 possible combinations, but only 2^12 patterns were common/real.
- 12 bits stored in 20 bits?
- Changing 1 symbol can alter the next 6, potentially overwriting the nulls and primer.
- All 10 symbols, "20 bits," had to be correct.
- Altering any in a packet replay attack caused it to be rejected by the NFMI chip.
- Must reverse engineer this to craft custom packets.
- Tried the tool "CRC Reveng" but it didn’t work.
- Wrote Python programs to try all possible 12-bit algorithms, but they didn’t work.

#### CRC Reverse Engineering, Continued
- Observed 1-bit difference in counter resulted in predictable checksum change.
- Checksum values were built up by XORing values from a table, similar to a CRC.
- Used counter values to get the CRC table values for the low bits.
- Noticed that updating a TX packet would fast-forward the counter by ~300,000 ticks.
- Wrote a program to speed the counter through more bits.
- Wrote another program to "bit walk" every byte I could control, setting 1 bit per packet.
- Wrote a program to ingest all this data and compute almost the entire CRC table.
- Eyeballed a pattern in the 10 symbols that revealed how the 12-bit CRC was constructed.