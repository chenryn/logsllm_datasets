目录
简介 1.1
前言 1.2
一、基础知识篇 1.3
1.1 CTF 简介 1.3.1
1.2 学习方法 1.3.2
1.3 Linux 基础 1.3.3
1.4 Web 安全基础 1.3.4
1.4.1 HTML 基础 1.3.4.1
1.4.2 HTTP 协议基础 1.3.4.2
1.4.3 JavaScript 基础 1.3.4.3
1.4.4 常见 Web 服务器基础 1.3.4.4
1.4.5 OWASP Top Ten Project 漏洞基础 1.3.4.5
1.4.6 PHP 源码审计基础 1.3.4.6
1.5 逆向工程基础 1.3.5
1.5.1 C/C++ 语言基础 1.3.5.1
1.5.2 x86/x64 汇编基础 1.3.5.2
1.5.3 Linux ELF 1.3.5.3
1.5.4 Windows PE 1.3.5.4
1.5.5 静态链接 1.3.5.5
1.5.6 动态链接 1.3.5.6
1.5.7 内存管理 1.3.5.7
1.5.8 glibc malloc 1.3.5.8
1.5.9 Linux 内核 1.3.5.9
1.5.10 Windows 内核 1.3.5.10
1.5.11 jemalloc 1.3.5.11
1.5.12 MIPS 汇编基础 1.3.5.12
1.6 密码学基础 1.3.6
1
1.7 Android 安全基础 1.3.7
1.7.1 Android 环境搭建 1.3.7.1
1.7.2 Dalvik 指令集 1.3.7.2
1.7.3 ARM 汇编基础 1.3.7.3
1.7.4 Android 常用工具 1.3.7.4
二、工具篇 1.4
虚拟化分析环境 1.4.1
2.1.1 VirtualBox 1.4.1.1
2.1.2 QEMU 1.4.1.2
2.1.3 Docker 1.4.1.3
2.1.4 Unicorn 1.4.1.4
静态分析工具 1.4.2
2.2.1 radare2 1.4.2.1
2.2.2 IDA Pro 1.4.2.2
2.2.3 JEB 1.4.2.3
2.2.4 Capstone 1.4.2.4
2.2.5 Keystone 1.4.2.5
动态分析工具 1.4.3
2.3.1 GDB 1.4.3.1
2.3.2 OllyDbg 1.4.3.2
2.3.3 x64dbg 1.4.3.3
2.3.4 WinDbg 1.4.3.4
2.3.5 LLDB 1.4.3.5
其他工具 1.4.4
2.4.1 pwntools 1.4.4.1
2.4.2 zio 1.4.4.2
2.4.3 metasploit 1.4.4.3
2.4.4 binwalk 1.4.4.4
2.4.5 Burp Suite 1.4.4.5
2.4.6 Wireshark 1.4.4.6
2
2.4.7 Cuckoo Sandbox 1.4.4.7
三、分类专题篇 1.5
Pwn 1.5.1
3.1.1 格式化字符串漏洞 1.5.1.1
3.1.2 整数溢出 1.5.1.2
3.1.3 栈溢出 1.5.1.3
3.1.4 返回导向编程（ROP）（x86） 1.5.1.4
3.1.5 返回导向编程（ROP）（ARM） 1.5.1.5
3.1.6 Linux 堆利用（一） 1.5.1.6
3.1.7 Linux 堆利用（二） 1.5.1.7
3.1.8 Linux 堆利用（三） 1.5.1.8
3.1.9 Linux 堆利用（四） 1.5.1.9
3.1.10 内核 ROP 1.5.1.10
3.1.11 Linux 内核漏洞利用 1.5.1.11
3.1.12 Windows 内核漏洞利用 1.5.1.12
3.1.13 竞争条件 1.5.1.13
3.1.14 虚拟机逃逸 1.5.1.14
Reverse 1.5.2
3.2.1 patch 二进制文件 1.5.2.1
3.2.2 脱壳技术（PE） 1.5.2.2
3.2.3 脱壳技术(ELF) 1.5.2.3
3.2.4 反调试技术（PE） 1.5.2.4
3.2.5 反调试技术（ELF） 1.5.2.5
3.2.6 指令混淆 1.5.2.6
Web 1.5.3
3.3.1 SQL 注入利用 1.5.3.1
3.3.2 XSS 漏洞利用 1.5.3.2
Crypto 1.5.4
Misc 1.5.5
Mobile 1.5.6
3
四、技巧篇 1.6
4.1 Linux 内核调试 1.6.1
4.2 Linux 命令行技巧 1.6.2
4.3 GCC 编译参数解析 1.6.3
4.4 GCC 堆栈保护技术 1.6.4
4.5 ROP 防御技术 1.6.5
4.6 one-gadget RCE 1.6.6
4.7 通用 gadget 1.6.7
4.8 使用 DynELF 泄露函数地址 1.6.8
4.9 shellcode 开发 1.6.9
4.10 跳转导向编程（JOP） 1.6.10
4.11 1.6.11
4.12 利用 __stack_chk_fail 1.6.12
4.13 利用 _IO_FILE 结构 1.6.13
4.14 glibc tcache 机制 1.6.14
4.15 利用 vsyscall 和 vDSO 1.6.15
五、高级篇 1.7
5.0 软件漏洞分析 1.7.1
5.1 模糊测试 1.7.2
5.1.1 AFL fuzzer 1.7.2.1
5.1.2 libFuzzer 1.7.2.2
5.2 动态二进制插桩 1.7.3
5.2.1 Pin 1.7.3.1
5.2.2 DynamoRio 1.7.3.2
5.2.3 Valgrind 1.7.3.3
5.3 符号执行 1.7.4
5.3.1 angr 1.7.4.1
5.3.2 Triton 1.7.4.2
5.3.3 KLEE 1.7.4.3
5.3.4 S²E 1.7.4.4
4
5.4 数据流分析 1.7.5
5.4.1 Soot 1.7.5.1
5.5 污点分析 1.7.6
5.5.1 TaintCheck 1.7.6.1
5.6 LLVM 1.7.7
5.6.1 Clang 1.7.7.1
5.7 程序切片 1.7.8
5.8 SAT/SMT 1.7.9
5.8.1 Z3 1.7.9.1
5.9 基于模式的漏洞分析 1.7.10
5.10 基于二进制比对的漏洞分析 1.7.11
5.11 反编译技术 1.7.12
5.11.1 RetDec 1.7.12.1
六、题解篇 1.8
Pwn 1.8.1
6.1.1 pwn HCTF2016 brop 1.8.1.1
6.1.2 pwn NJCTF2017 pingme 1.8.1.2
6.1.3 pwn XDCTF2015 pwn200 1.8.1.3
6.1.4 pwn BackdoorCTF2017 Fun-Signals 1.8.1.4
6.1.5 pwn GreHackCTF2017 beerfighter 1.8.1.5
6.1.6 pwn DefconCTF2015 fuckup 1.8.1.6
6.1.7 pwn 0CTF2015 freenote 1.8.1.7
6.1.8 pwn DCTF2017 Flex 1.8.1.8
6.1.9 pwn RHme3 Exploitation 1.8.1.9
6.1.10 pwn 0CTF2017 BabyHeap2017 1.8.1.10
6.1.11 pwn 9447CTF2015 Search-Engine 1.8.1.11
6.1.12 pwn N1CTF2018 vote 1.8.1.12
6.1.13 pwn 34C3CTF2017 readme_revenge 1.8.1.13
6.1.14 pwn 32C3CTF2015 readme 1.8.1.14
6.1.15 pwn 34C3CTF2017 SimpleGC 1.8.1.15
5
6.1.16 pwn HITBCTF2017 1000levels 1.8.1.16
6.1.17 pwn SECCONCTF2016 jmper 1.8.1.17
6.1.18 pwn HITBCTF2017 Sentosa 1.8.1.18
6.1.19 pwn HITBCTF2018 gundam 1.8.1.19
6.1.20 pwn 33C3CTF2016 babyfengshui 1.8.1.20
6.1.21 pwn HITCONCTF2016 Secret_Holder 1.8.1.21
6.1.22 pwn HITCONCTF2016 Sleepy_Holder 1.8.1.22
6.1.23 pwn BCTF2016 bcloud 1.8.1.23
6.1.24 pwn HITCONCTF2016 House_of_Orange 1.8.1.24
6.1.25 pwn HCTF2017 babyprintf 1.8.1.25
6.1.26 pwn 34C3CTF2017 300 1.8.1.26
6.1.27 pwn SECCONCTF2016 tinypad 1.8.1.27
6.1.28 pwn ASISCTF2016 b00ks 1.8.1.28
6.1.29 pwn Insomni'hack_teaserCTF2017 The_Great_Escape_part-
3 1.8.1.29
6.1.30 pwn HITCONCTF2017 Ghost_in_the_heap 1.8.1.30
6.1.31 pwn HITBCTF2018 mutepig 1.8.1.31
6.1.32 pwn SECCONCTF2017 vm_no_fun 1.8.1.32
6.1.33 pwn 34C3CTF2017 LFA 1.8.1.33
6.2.34 pwn N1CTF2018 memsafety 1.8.1.34
Reverse 1.8.2
6.2.1 re XHPCTF2017 dont_panic 1.8.2.1
6.2.2 re ECTF2016 tayy 1.8.2.2
6.2.3 re CodegateCTF2017 angrybird 1.8.2.3
6.2.4 re CSAWCTF2015 wyvern 1.8.2.4
6.2.5 re PicoCTF2014 Baleful 1.8.2.5
6.2.6 re SECCONCTF2017 printf_machine 1.8.2.6
6.2.7 re CodegateCTF2018 RedVelvet 1.8.2.7
6.2.8 re DefcampCTF2015 entry_language 1.8.2.8
Web 1.8.3
6.3.1 web HCTF2017 babycrack 1.8.3.1
6
Crypto 1.8.4
Misc 1.8.5
Mobile 1.8.6
七、实战篇 1.9
CVE 1.9.1
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞 1.9.1.1
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏
洞 1.9.1.2
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞 1.9.1.3
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞 1.9.1.4
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞 1.9.1.5
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞 1.9.1.6
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞 1.9.1.7
7.1.9 CVE-2010-3333 Microsoft Word RTF pFragments 栈溢 1.9.1.8
出漏洞 1.9.1.9
Malware 1.9.2
八、学术篇 1.10
8.1 The Geometry of Innocent Flesh on the Bone: Return-into-libc
without Function Calls (on the x86) 1.10.1
8.2 Return-Oriented Programming without Returns 1.10.2
8.3 Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms 1.10.3
8.4 ROPdefender: A Detection Tool to Defend Against Return-Oriented
Programming Attacks 1.10.4
8.5 Data-Oriented Programming: On the Expressiveness of Non-Control
Data Attacks 1.10.5
8.6 Hacking Blind 1.10.6
8.7 What Cannot Be Read, Cannot Be Leveraged? Revisiting
Assumptions of JIT-ROP Defenses 1.10.7
8.8 All You Ever Wanted to Know About Dynamic Taint Analysis and
Forward Symbolic Execution (but might have been afraid to ask) 1.10.8
7
8.9 Symbolic Execution for Software Testing: Three Decades Later
1.10.9
8.10 AEG: Automatic Exploit Generation 1.10.10
8.11 Address Space Layout Permutation (ASLP): Towards Fine-Grained
Randomization of Commodity Software 1.10.11
8.12 ASLR on the Line: Practical Cache Attacks on the MMU 1.10.12
8.13 New Frontiers of Reverse Engineering 1.10.13
8.14 Who Allocated My Memory? Detecting Custom Memory Allocators
in C Binaries 1.10.14
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using
Machine Learning 1.10.15
8.16 DynaLog: An automated dynamic analysis framework for
characterizing Android applications 1.10.16
8.17 A Static Android Malware Detection Based on Actual Used
Permissions Combination and API Calls 1.10.17
8.18 MaMaDroid: Detecting Android malware by building Markov chains
of behavioral models 1.10.18
8.19 DroidNative: Semantic-Based Detection of Android Native Code
Malware 1.10.19
8.20 DroidAnalytics: A Signature Based Analytic System to Collect,
Extract, Analyze and Associate Android Malware 1.10.20
8.21 Micro-Virtualization Memory Tracing to Detect and Prevent Spraying
Attacks 1.10.21
8.22 Practical Memory Checking With Dr. Memory 1.10.22
8.23 Evaluating the Effectiveness of Current Anti-ROP Defenses
1.10.23
8.24 How to Make ASLR Win the Clone Wars: Runtime Re-
Randomization 1.10.24
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
1.10.25
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic
Execution 1.10.26
8.27 Firmalice - Automatic Detection of Authentication Bypass
Vulnerabilities in Binary Firmware 1.10.27
8.28 Cross-Architecture Bug Search in Binary Executables 1.10.28
8
8.29 Dynamic Hooks: Hiding Control Flow Changes within Non-Control
Data 1.10.29
8.30 Preventing brute force attacks against stack canary protection on
networking servers 1.10.30
8.31 WYSINWYX What You See Is Not What You eXecute 1.10.31
8.32 Unleashing MAYHEM on Binary Code 1.10.32
8.33 Under-Constrained Symbolic Execution: Correctness Checking for
Real Code 1.10.33
8.34 Enhancing Symbolic Execution with Veritesting 1.10.34
8.35 Q: Exploit Hardening Made Easy 1.10.35
8.36 A Survey of Symbolic Execution Techniques 1.10.36
8.37 CUTE: A Concolic Unit Testing Engine for C 1.10.37
8.38 TaintEraser: Protecting Sensitive Data Leaks Using Application-
Level Taint Tracking 1.10.38
8.39 DART: Directed Automated Random Testing 1.10.39
8.40 EXE: Automatically Generating Inputs of Death 1.10.40
8.41 IntPatch: Automatically Fix Integer-Overflow-to-Buffer-Overflow
Vulnerability at Compile-Time 1.10.41
8.42 Dynamic Taint Analysis for Automatic Detection, Analysis, and
Signature Generation of Exploits on Commodity Software 1.10.42
8.43 DTA++: Dynamic Taint Analysis with Targeted Control-Flow
Propagation 1.10.43
8.44 Superset Disassembly: Statically Rewriting x86 Binaries Without
Heuristics 1.10.44
8.45 Ramblr: Making Reassembly Great Again 1.10.45
8.46 FreeGuard: A Faster Secure Heap Allocator 1.10.46
8.47 Jump-Oriented Programming: A New Class of Code-Reuse Attack
1.10.47
8.48 Reassembleable Disassembling 1.10.48
8.49 Understanding Integer Overflow in C/C++ 1.10.49
九、附录 1.11
9.1 更多 Linux 工具 1.11.1
9.2 更多 Windows 工具 1.11.2
9
9.3 更多资源 1.11.3
9.4 Linux 系统调用表 1.11.4
9.5 幻灯片 1.11.5
10