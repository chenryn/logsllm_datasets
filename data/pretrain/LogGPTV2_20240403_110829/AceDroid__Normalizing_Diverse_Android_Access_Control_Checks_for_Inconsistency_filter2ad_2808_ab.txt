Normal yields to System.
At
the end, we have the same overall canonical con-
dition for the two APIs installPackageAsUser and
installPackageForMDM as App := [System]∧ U ser :=
[Restriction = DISALLOW IN ST ALL AP P S]. Note
that it precisely captures the meaning of the protections. Recall
that Kratos would report it as inconsistency due to the lack of
normalization.
We develop a program analysis to automatically extract
security checks and perform normalization. The analysis is
sophisticated such that
it can also handle implicit checks
who themselves do not seem to be security related, e.g., if
(x==10), but serve the functionalities of security checks.
In our experiment,
the analysis is applied to 12 complex
frameworks and customizations that correspond to average
977030 LOC per-image.
Diversity Caused by Non-Standard Checks. Besides the tra-
ditional permission and UID checks, the framework developers
(especially for custom frameworks) might rely on non-standard
security features to enforce access control. For example, the
package ﬂags, signature and shared user ID might all be used
to infer the privilege of the caller. A failure to account for
such non-standard checks would lead to missing important
inconsistencies.
Figure 3 demonstrates an example of an exploitable
inconsistency that would go undetected if non-standards
checks are not considered during analysis (e.g., as in Kratos).
The ﬁgure depicts simpliﬁed code snippets of
the API
DirEncryptService.getSDCardEncryptionPref()
across two Samsung device models. As shown, while Samsung
Tab S 8.4 allows retrieving stored encryption preferences
without any security checks, Samsung S6 Edge permits this
operation only to platform signed apps. The API ﬁrst retrieves
the signatures of the calling package and that of the android
platform based on the calling app’s UID (line 6) and system
process PID (line 7), respectively. It then compares the two
signatures (line 8) and allows accessing the stored encryption
preferences only if they are identical.
To address this, we have identiﬁed numerous features that
are related to access control by inspecting central services
responsible for maintaining information about installed apps,
Listing 3. Simpliﬁed Code from Samsung Tab S 8.4
1 public SDCardEncryptionPolicies getSDCardEncryptionPrefs(){
2
3
4
5
6
final long i = Binder.clearCallingIdentity();
..
restorePrefs = this.mDep.restorePrefs();
Binder.restoreCallingIdentity(i);
return restorePrefs;
sink
Listing 4. Simpliﬁed Code from Samsung S6 Edge
1 public SDCardEncryptionPolicies getSDCardEncryptionPrefs(){
2
3
4
5
6
final long i = Binder.clearCallingIdentity();
..
restorePrefs = this.mDep.restorePrefs();
Binder.restoreCallingIdentity(i);
Signature[] appSig =
getPackageSettings(Binder.getCallingUid() ).signatures ;
7
8
9
10
Signature[] platformSig =
getPackageSettings(Process.myUid() ).signatures ;
if (compareSignatures(platformSig, appSig) == 0 )
return restorePrefs;
sink
else return null;
Fig. 3. DirEncryptService.getSDCardEncryptionPrefs() across two Samsung
models
users and running processes. More details are discussed in
(Section III).
III. ANDROID ACCESS CONTROL MODELING
In this section, we introduce our systematic modeling and
normalization of Android access control.
A. Uncovering Access Control Criteria.
framework
and other
Android is a layered operating system with its app
sitting on top
and framework layer built with Java
of a set of C libraries and the Linux Kernel. At
the
app layer are third party and system apps, preloaded
by the vendors
customization parties. The
system
Android
services
and
ConnectivityService)
essential
functionalities, and communicating with the Linux Kernel.
Android system services execute in system processes and
expose their privileged functionalities via a set of well-deﬁned
interfaces that are accessible by other apps and services
through the Binder IPC.
high-level
LocationManagerService
provides many
implementing
(e.g.
Upon receiving a Binder transaction (i.e., invocation of
an exposed API), a system service determines the identity of
the caller to allow / deny access to the underlying resource.
Prominently, the Binder class deﬁnes the following three APIs
allowing to retrieve the caller identity:
1 public class Binder implements IBinder {
2
3
4
5
public static final native int getCallingPid();
public static final native int getCallingUid();
public static final UserHandle getCallingUserHandle() {
return
UserHandle.of(UserHandle.getUserId(getCallingUid()));}
The caller’s PID and Linux UID can be used to uniquely
identify the app process that sent the current transaction while
the caller’s UserId can be used to identify the user who
initiated the transaction. It should be noted that the UserId
is distinct from the calling app’s UID in that it reﬂects the
actual user of the device, which has multiple apps under it,
each with their own UID.
4
Category
Perspective
App-Speciﬁc
User-Speciﬁc
Privilege Check
Ownership Check
Status Check
Privilege Check
Ownership Check
Status Check
Restrictions
TABLE I.
Security Feature of Caller
ANDROID ACCESS CONTROL MODELING
Example of Usages
UID
PID
Permission
Package Name
Process Name
Shared User ID
Signature
Flags
Calling App UID
Package Name
PID / Process Flags
User Id
Flags (User Type)
User Id
User Id
Restriction Name
Comparison with a Privileged UID
Comparison with a Privileged PID
Calling app has a permission
Comparison with constant String
Comparison with constant String
Comparison with constant String
Comparison with a signature of another app
Comparison with SYSTEM FLAG
Comparison with UID of input parameter
Comparison with input parameter
Comparison with running PIDs and has a IMPORTANCE FOREGROUND
Comparison with a privileged User Id (e.g. 0)
Comparison with FLAG PRIMARY , FLAG GUEST
FLAG RESTRICTED, FLAG ADMIN
Comparison with an input parameter
Comparison with current user
Calling user has a restriction
While the essence of Android access control is to employ
these 3 identiﬁers to enforce app-speciﬁc and/or user-speciﬁc
permissions, the implementation of the access control checks
is much more diverse than simple equivalence checks of these
identiﬁers. This is because there are a large number of features
that are associated with these identiﬁers that can be used as
their delegators in access control checks. Therefore, we have to
identify, model and normalize all these access control checks
in various forms in order to perform comparison.
All
the
app
of
them,
and
services
pertinent
including
responsible
and
user
contain
central Android
that
have
3
can
to
services:
PackageSetting,
data
features
control. Therefore, we
all
for
runtime
managing
be
used
information may
consider
in
access
the
and model
PackageManagerService,
UserManagerService
and ActivityManagerService and 7 classes: Package
SharedUserSetting,
Info,
ApplicationInfo, UserHandle, UserInfo,
and
RunningAppProcessInfo. The criterion to determine
if a feature is related to access control
is whether it has
association with one of the aforementioned three identiﬁers
(e.g., package name can be retrieved with app UID). Note
that
these central Android services rarely change across
framework versions and customizations, and hence serve
as an ideal common basis for normalization. We observe
some recent customizations occasionally use vendor added
services in access control (e.g., LG’s IMdm and Samsung’s
EnterpriseDeviceManager which enforce additional
restrictions based on a custom user policy). They can be
nonetheless modeled and normalized. However due to the
small number of such instances, we leave them to our future
work. We propose a classiﬁcation of
the access control
related features in these services and classes, as shown in
Table I. The classiﬁcation is dictated by our threat model.
In the following, we explain our threat model and then the
classiﬁcation/normalization.
Threat Model. We formally state our assumptions about
the calling entity and the corresponding threat model, as
follows: 1 a malicious third-party app aiming to exploit an
inconsistency to perform a privileged operation with no/weaker
requirements; 2 a malicious user aiming to affect other
users and/or bypass imposed restrictions. In other words,
access control checks using different features are considered
equivalent if they allow/disallow the same set of behaviors
from third-party apps and users.
5
Fig. 4. Android Access Control Perspectives
Categorization of Android Access Control. At the highest
level (the ﬁrst column in Table I), we propose to classify all
Android access control checks as two categories: app-speciﬁc
and user-speciﬁc checks. For the app category, there are three
unique perspectives (i.e., the ﬁrst three entries in the second
column): privilege checks, ownership checks, and status checks.
The meaning of these checks can be intuitively explained
in the right half of Figure 4. Speciﬁcally, privilege checks
are to determine if the calling app owns certain privileges;
ownership checks decide if the calling app is the owner of
the resource; status checks validate if the calling app is the
foreground app (as certain accesses are denied for background
apps). As shown in the third column of Table I, checks in
each perspective can be in various forms. For instance, (app)
privilege checks can be carried out by comparing UID/PID,
explicitly checking permissions, or even checking speciﬁc
ﬂag ﬁelds in relevant data structures. Many of these checks
are semantically equivalent despite of their various syntactic
forms.
Similarly, the user checks include privilege checks (i.e.,
privileges associated with speciﬁc users), ownership checks,
status checks, and restriction checks that determine if a user
is restricted from certain operations. The intuitive explanations
are in the left half of Figure 4. Their details are explained later
in this section.
Based on this understanding, we propose to model Android
access control as follows:
GrantAccess := [App, U ser]
App := [P rivilege, Ownership, Status]
U ser := [U srP rivilege, Ownership, Status, Restriction]
Speciﬁcally, each access control check is modeled as a
pair consisting of the app and user aspects, each aspect itself
being a vector of multiple perspectives. Later we will show that
each perspective has a small number of canonical values. Our
tool aims to transform all access control checks to canonical
vectors.
Normalization. Although many of these checks are in different
Resourceowner?Privileged?Current?Has Restriction?Resource owner?Privileged?Current?PrivateSinkforms, they have the equivalent semantics in terms of the
protection they entail. Framework developers often leverage
their domain knowledge of such implicit equivalence during
customization and version upgrade. As a result, access control
checks seem very diverse and sometimes even ad hoc across
customizations and versions. The key challenge to consistency
checking is hence to normalize these access control checks.
Our deﬁnition of equivalence is regarding the protection en-
abled by the checks, that is, the kind of malicious behaviors
precluded by the checks. For instance, enforcing that the calling
package signature matches that of "android" and enforcing
the calling process PID = Process.myPid() are syntac-
tically inconsistent from the perspective of a preloaded app.
However, neither the signature nor the PID can be acquired
by a third party app and hence both checks disable exploit
from a third party app and thus are semantically equivalent.
B. App-Speciﬁc Access Control
1) Privilege Perspective.: This perspective aims to verify
whether the calling app is allowed to perform an operation
because it holds a capability or is a privileged process / app
(e.g., app is granted the permission MASTER_CLEAR or has a
SYSTEM_UID thus can perform a factory reset). As depicted
in Table I, this perspective can be enforced based on the caller’s
permissions, UID, PID, and others.
We formulate the syntax of privilege checks as follows.
AppP rivCheck P := checkP ermission(C) |
U ID = 0 |...| P1 ∨ P2| P1 ∧ P2
A privilege check can be a primitive check (e.g., U ID = 0)
or a compound check which is multiple primitive checks
connected by disjunction or conjunction. While the syntax
only lists two primitive checks, there are in fact many of such
checks, some of which will be discussed later in the section.
Despite of the different syntactic forms, the semantics of these
checks can be normalized to the following canonical Privilege
domain.
P rivilege := {System, Dangerous, N ormal, ⊥}
The values in the domain are totally ordered. System is
the highest privilege level (acquired only by system apps and
processes); Dangerous is lower, indicating user conﬁrmation
is needed (for protecting private data or for operations affecting
the user’s data); N ormal indicates privileges that may be
acquired by third party apps without user conﬁrmation; ⊥
implies no privilege.
We deﬁne a function evalAppP riv to evaluate a privilege
check to a canonical value. Its signature is the following.
evalAppP riv : AppP rivCheck (cid:55)→ P rivilege
While we will deﬁne the semantics of evalAppP riv for
individual primitive checks later, the semantics for compound
checks are deﬁned as follows.
evalAppP riv(P1 ∨ P2) = M in(evalAppP riv(P1), evalAppP riv(P2))
evalAppP riv(P1 ∧ P2) = M ax(evalAppP riv(P1), evalAppP riv(P2))
Intuitively, if a public API entry enforces two privilege
requirements, we normalize it to the maximum privilege level
of the two. Conversely, if the access control requires either
one, we can safely map it to the minimum privilege of the
two checks, as a calling app only needs one of them to access
the resource.
Next, we describe a few primitive app privilege checks and
their (normalized) semantics. We cannot include others due to
the space limit.
Permission Checks. Android can invoke a permission vali-
dation call checkP ermission(C) to check whether a given
app process has been granted a speciﬁc permission C. Ac-
cording to the Android speciﬁcation, the protection level of
a permission can be Normal, Dangerous, Signature
or SystemOrSignature, depending on the resources pro-
tected. The normalized semantics of the checks is hence the
following.
evalAppP riv(checkP ermission(C)) =
 System,
Dangerous, P L(C) = Dangerous
N ormal,
P L(C) = SystemOrSignature ∨ System
P L(C) = N ormal ∨ U ndef ined
and
The above normalization implies that two permissions are
semantically equivalent if they hold the same protection level,
denoted by the function P L(), regardless of their name. For
example,
checkP ermission("android.permission.
CONTROL_KEYGUARD")
checkP ermission("
android.permission.MANAGE_FINGERPRINT")
are normalized to the same System value. The protection
levels SystemOrSignature and System are equivalent, since
neither can be acquired by a third party app. Please note that
the Undeﬁned level refers to the cases where a permission is
not deﬁned in an image, or what has been referred to as a
Permission Hare in [7]. Obviously, in such a case, the caller
can deﬁne the permission with the lowest protection to pass
the check.