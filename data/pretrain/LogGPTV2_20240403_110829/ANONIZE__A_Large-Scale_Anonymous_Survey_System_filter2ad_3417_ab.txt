### Voting Schemes and Anonymous Credentials

Voting schemes, as described in references [4], [5], [6], [7], and [8], provide both anonymity and authenticity, which are essential for our requirements. However, these schemes do not support the ad-hoc selection of authenticated users for multiple elections.

Anonymous credential systems, as detailed in references [22], [23], [24], and [11], allow users to obtain credentials from authorities and to anonymously demonstrate possession of these credentials. Essentially, such systems provide methods for a "zero-knowledge proof of knowledge of a signature on a set of attributes." Our non-interactive zero-knowledge (NIZK) proofs draw on similar intuitions to those used in anonymous credential constructions, particularly those in [11] and the electronic cash/token extensions in [25] and [12]. However, our goals and the complexity assumptions we rely on differ. Additionally, since anonymous credentials are typically not analyzed under concurrent executions, we have developed new techniques for the security analysis.

### Implementation

One of the key features of our system is its practicality and scalability. It can be implemented with moderate resources and can handle large numbers of users efficiently. The computational costs for users are minimal, with a typical desktop being able to compute even the worst-case scenario in under a few seconds using a single core. Therefore, our system is well-suited to manage a wide range of practical surveying needs at an affordable cost.

## Ad-Hoc Surveys

An Ad-hoc Survey Scheme involves three types of participants:

- **Registration Authority (RA)**: A single entity responsible for user registration.
- **Survey Authorities (SAs)**: One or more entities that create and manage surveys.
- **Users**: Each user is associated with a public identity, such as an email address.

We assume the RA can establish a secure session (private and authenticated) with a user. Users can also set up an anonymous connection to the SA when submitting their survey responses.

The scheme consists of a tuple of algorithms: \( (GenRA, GenSA, Reg_{RA}, Reg_U, GenSurvey, Authorized, Submit, Check) \). We will now explain how these algorithms are used and the security requirements they must meet.

### System Setup

1. **RA Key Generation**:
   - The RA generates a public-private key pair: \( (pk_{RA}, sk_{RA}) \leftarrow GenRA(1^n) \).
   - \( pk_{RA} \) is made public, while \( sk_{RA} \) is kept secret by the RA.

2. **SA Key Generation**:
   - Each SA generates a public-private key pair: \( (pk_{SA}, sk_{SA}) \leftarrow GenSA(1^n) \).
   - \( pk_{SA} \) is made public, while \( sk_{SA} \) is kept secret by the SA.

3. **Common Reference String (CRS)**:
   - For systems requiring a CRS, it is generated and made publicly available. For simplicity, we assume all procedures have access to the CRS as an input.
   - For systems in the Random Oracle model, we assume the procedures have access to the Random Oracle.

### User Registration

To use the system, users must register with the RA. The registration process is as follows:

1. **Secure Session Establishment**:
   - The user sets up a secure session with the RA.

2. **Identity Check**:
   - The RA checks if the user's identity has already been registered. If so, the session is closed. Otherwise, the RA and the user execute the interactive protocol \( (Reg_{RA}, Reg_U) \) on the common input \( 1^n \) and the user's identity \( id \).

3. **Credential Issuance**:
   - If the protocol completes successfully, the RA stores the user's identity as registered, and the user secretly stores the output as \( cred_{id} \).

### Survey Registration

When an SA wants to set up a survey with identifier \( sid \), it generates a "survey public-key" based on the identities of the participants and its own secret key. Specifically, the SA computes and makes public \( pk_{sid} \leftarrow GenSurvey(1^n, sid, L, sk_{SA}) \), where \( L \) is a list of user identities.

### Completing a Survey

For a registered survey with identifier \( sid \) and its associated public key \( pk_{sid} \), each authorized user \( id \) can combine their master credential \( cred_{id} \) with \( sid \) and \( pk_{sid} \) to generate an unlinkable "one-time token" for making a submission. This token satisfies two properties:
1. **Anonymity**: It carries no link to the user's identity.
2. **Uniqueness**: For a given survey key, the user can obtain at most one such token, ensuring they can submit only one response.

The user \( id \) with master credential \( cred_{id} \) submits the message \( m \) by privately executing the algorithm \( Sub = (tok, m, tok_{auth}) \leftarrow Submit(1^n, sid, pk_{sid}, m, cred_{id}) \) and then submitting \( Sub \) to the SA through an anonymous channel. The SA checks the submission by executing \( Check(pk_{SA}, pk_{RA}, sid, pk_{sid}, Sub) \). If it outputs "accept," the submission is stored. If a submission with the same \( tok \) has been previously stored, the old record is removed, or the new \( Sub \) is not stored.

### Announcing Results

Once all submissions are collected, the SA may publish a list of all stored submissions \( Sub = (tok, m, tok_{auth}) \), depending on external privacy requirements.

### Audit Procedures

The system includes audit procedures:
1. **User Verification**: Users can check if their submission was counted by inspecting the published list.
2. **Validity Check**: Users can use \( Check(pk_{SA}, pk_{RA}, sid, pk_{sid}, Sub) \) to verify if \( Sub \) is a valid submission.
3. **Authorization Check**: Users can use \( Authorized(pk_{SA}, sid, pk_{sid}, id) \) to check if they are authorized for the survey.

### Key Features and Security Properties

A crucial aspect of an ad-hoc survey is the privacy property: even if the RA and SA are arbitrarily corrupted (and in collusion), they cannot learn anything about how particular users answered submissions or any correlations between groups of users. The key security property is that only authorized users can complete a survey, and they can do so at most once.

#### Definition of an Ad-hoc Survey

**Definition 1**: An ad-hoc survey scheme \( \Gamma \) is an 8-tuple of probabilistic polynomial-time (PPT) algorithms and interactive PPTs:
- \( (GenRA, GenSA, Reg_{RA}, Reg_U, GenSurvey, Authorized, Submit, Check) \)

- **Key Generation**:
  - \( GenRA(1^n) \) outputs a key-pair \( (pk_{RA}, sk_{RA}) \).
  - \( GenSA(1^n) \) outputs a key-pair \( (pk_{SA}, sk_{SA}) \).

- **Registration**:
  - \( Reg_{RA}(sk_{RA}, 1^n, pk_{RA}, id) \) is an interactive PPT that outputs either success or fail.
  - \( Reg_U(1^n, pk_{RA}, id) \) is an interactive PPT that outputs a bitstring \( cred_{id} \) or fail.

- **Survey Key Generation**:
  - \( GenSurvey(1^n, sid, L, sk_{SA}) \) outputs a bitstring \( pk_{sid} \). Here, \( sid \) is a unique identifier, and \( L \) is a description of the set of eligible users.

- **Authorization**:
  - \( Authorized(pk_{SA}, sid, pk_{sid}, id) \) outputs either YES or NO.

- **Submission**:
  - \( Submit(1^n, sid, pk_{sid}, m, cred_{id}) \) outputs \( Sub = (tok, m, tok_{auth}) \).

- **Check**:
  - \( Check(pk_{RA}, pk_{SA}, sid, pk_{sid}, Sub) \) outputs either accept or fail.

**Remark on Authorization**: The authorization procedure should naturally interpret the set of users allowed to complete a survey. For example, the description might specify a list of user identities or a list with wildcards (e.g., \( *@*.cornell.edu \)).

### Correctness

**Definition 2**: An ad-hoc survey scheme \( \Gamma \) is correct if there exists a negligible function \( \mu(\cdot) \) such that the following experiment outputs fail with probability at most \( \mu(n) \) for every \( n \in \mathbb{N} \), \( sid \), \( m \in \{0, 1\}^n \), set \( L \) of \( n \)-bit strings, and \( id \in L \):

- **Key Generation**:
  - \( (vk_{RA}, sk_{RA}) \leftarrow GenRA(1^n) \)
  - \( (vk_{SA}, sk_{SA}) \leftarrow GenSA(1^n) \)

- **Registration**:
  - Set \( (out_{RA}, out_U) \) to the result of the protocol \( (Reg_{RA}(sk_{RA}, 1^n, vk_{RA}, id), Reg_U(1^n, vk_{RA}, id)) \)
  - Output fail if either \( out_{RA} \) or \( out_U \) is fail, otherwise let \( cred_{id} = out_U \).

- **Survey Key Generation**:
  - \( vksid \leftarrow GenSurvey(1^n, sid, L, sk_{SA}) \)
  - Output fail if \( Authorized(vk_{SA}, sid, vksid, id) = NO \).

- **Submission and Check**:
  - \( Sub \leftarrow Submit(1^n, sid, vksid, m, cred_{id}) \)
  - Output \( Check(vk_{SA}, vk_{RA}, sid, vksid, Sub) \)

### Privacy and Security

**Definition 3**: An ad-hoc survey scheme \( \Gamma \) is unlinkable if for every non-uniform PPT adversary \( A \), the ensembles \( \{EXEC_0(1^n, A)\}_{n \in \mathbb{N}} \) and \( \{EXEC_1(1^n, A)\}_{n \in \mathbb{N}} \) are computationally indistinguishable, where \( EXEC_b(1^n, A) \) is defined as follows:

- **Key Generation**:
  - \( (vk_{RA}, sk_{RA}), z \leftarrow A(1^n) \)

- **Concurrent Interactions**:
  - \( A(1^n, z) \) interacts concurrently with \( Reg_U(1^n, vk_{RA}, id) \) for two different ids \( id_0 \) and \( id_1 \). Whenever an interaction with some \( id \) completes, the remainder of the experiment, \( A \) gets oracle access to \( Submit(1^n, \cdot, \cdot, \cdot, cred_{id}) \).

- **Target Survey**:
  - \( A \) outputs a target survey: \( (vk_{SA}, sid, vksid, id_0, id_1, m_0, m_1, z') \)
  - Output fail if \( Authorized(vk_{SA}, sid, vksid, id_b) = fail \) or if \( A \) has queried \( Submit(1^n, sid, \cdot, m_j, cred_{id_b}) \) for either \( b, j \in \{0, 1\} \).

- **Submissions**:
  - Let \( Sub_b = Submit(1^n, sid, vksid, m_b, cred_{id_b \oplus b}) \) for both \( b = 0 \) and \( b = 1 \), and finally output \( A(1^n, (Sub_0, Sub_1), z') \).

**Justification**: This definition allows the adversary to participate in multiple surveys, see the submissions of many honest submitters, and still be unable to distinguish the submissions of two authorized honest users, even for adaptively chosen participant lists, user identities, and submission messages.