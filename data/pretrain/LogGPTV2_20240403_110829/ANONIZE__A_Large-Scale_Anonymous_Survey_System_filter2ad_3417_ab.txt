tiple times in our context. Voting schemes [4], [5], [6],
[7], [8] on the other hand do provide both the anonymity
and the authenticity properties we require; however, they
do not allow for the authenticated users to be selected
ad-hoc for multiple elections.
An anonymous credential system [22], [23], [24],
[11] allows users to obtain credentials from authorities
and to anonymously demonstrate possession of these
credentials. In essence such systems provide methods
for providing, a “zero-knowledge proof of knowledge
of a signature on a set of attributes.” As mentioned, the
NIZKs we use rely on intuitions similar to those used
in constructions of anonymous credentials (most closely
related to [11] and the electronic cash/token extensions
in [25], [12]), but we have different goals and rely
on different complexity assumptions. Moreover, since
anonymous credentials typically are not analyzed under
concurrent executions, we must develop new techniques
for the security analysis.
E. Our Implementation
One of the key points of our system is that it can
be implemented and can easily handle large numbers of
users with moderate resources. The computational costs
on the users are quite low as well, with a typical desktop
being able to compute the worst-case scenario in under
a few seconds, using a single core of the machine.
Thus we argue our system scales to manage that vast
majority of practical surveying needs at costs that are
easily affordable.
II. AD-HOC SURVEYS
An Ad-hoc Survey Scheme is a protocol involving
three types of players:
— A single Registration Authority (RA).
— One or multiple Survey Authorities (SA).
— Users; each user is associate with a public user
identity id (e.g., its email address).
An
ad-hoc
We assume that the RA has the ability to set up a
secure session (private and authenticated) with the user
associated with a particular user identity. Each user
additionally has the ability to setup an anonymous
connection to the SA when returning their survey.
tuple
of
U , GenSurvey,
algorithms (GenRA,GenSA,Reg
formalize
Authorized, Submit, Check) which we
shortly. To gain some intuition,
let us ﬁrst explain
how these algorithms are intended to be used in a
system and informally explain what types of security
requirements we want from the algorithms.
is
RA,Reg
scheme
survey
a
System Set-up:
— The RA generates a public key-pair pkRA, skRA ←
GenRA(1n); pkRA is made public and skRA is
secretly stored by the RA.
— Each SA generates a public key-pair pkSA, skSA ←
GenSA(1n); pkSA is made public and skSA is
secretly stored by the SA.7
— For systems that require the use of a Common
Reference String (CRS); a CRS is generated and
made publicly available. For simplicity of notation,
we omit the CRS in all the procedures below and
simply assume that all these procedures get the
CRS as an input. Likewise, for systems in the
Random Oracle model, we assume the procedures
below have access to the Random Oracle.
User Registration: To use the system, users need
to register with the RA; at this point the user and the
) which allows
RA execute the protocol (Reg
the user to check out an unlinkable “master credential”.
A user with identity id proceeds as follows:
, Reg
RA
U
1) The user sets up a secure session with the RA.
2) The RA checks that user identity id previously has
not been registered. If it has, the RA closes the
session. Otherwise, the RA and the user invoke the
) on the common
interactive protocol (Reg
input 1n, id.
, Reg
RA
U
3) If the protocol ends successfully, the RA stores that
user identity id has been registered, and the user
secretly stores the output as credid.
Survey Registration: Whenever an SA wants to set-
up a survey with identiﬁer sid, it generates a “survey
public-key” based on the identities of the participants
(and its own secret key). More precisely, the SA on
input a survey identiﬁer sid and a list L of user identities
(they may be previously registered or not) computes and
makes public pksid ← GenSurvey(1n, sid, L, skSA).
Completing a Survey: Given a registered survey
with identiﬁer sid and its associated public-key pksid,
each “authorized” user idi can combine its master cre-
dential credid with the survey identiﬁer sid and public-
key pksid to generate an unlikable “one-time token” that
it can then use to make a submission in the survey.
Roughly speaking, the “one-time token” satisﬁes two
properties: 1) it carries no link to the students identity
(thus we have anonymity), and 2) for a given “survey
key”, the student can obtain at most one such token (and
thus can only submit one response).
More precisely, user
id with master credential
credid submits the message m as the completed
survey by privately executing the algorithm Sub =
(tok, m, tokauth) ← Submit(1n, sid, pksid, m, credid)
7Our security properties hold even if new SAs are added on-the-ﬂy.
378
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
and then submitting Sub to the SA through an
anonymous channel;
tok is the “one-time token”,
and tokauth is an authenticator required to bind the
message m to the one-time token, and to ensure
uniqueness of the one-time token. SA checks whether
the submission is correctly computed by executing
Check(pkSA, pkRA, sid, pksid, Sub); if it outputs accept
it stores the submission. If a submission with the same
tok has been previously stored (i.e., if a Sub of the
(cid:2)
) has already been stored, the
form (tok, m
old record is removed. (Or alternatively, the new Sub is
not stored.)
, tokauth
(cid:2)
Announcing the results: Once all the submissions
have been collected, the SA may (depending on exter-
nal privacy requirements) publish a list of all stored
submissions Sub = (tok, m, tokauth).
Audit Procedures: The system also includes au-
dit procedures. First, Users can check that their sub-
mission was “counted” by simply inspecting that
their
submission is output. Second, a User may
use Check(pkSA, pkRA, sid, pksid, Sub) to check whether
Sub is a valid submission (i.e., user can check that
there is no “ballot/survey-stufﬁng”). Finally, to ensure
that a survey is not targeted to a particular user (for
de-anonymization purposes), the user may use function
) to check whether user
Authorized(pkSA, sid, pksid, id
is also authorized for survey sid with public key
id
pksid.
(cid:2)
(cid:2)
Key features and Security Properties: A crucial
aspect of an ad-hoc survey is the privacy property:
even if the RA and SA are arbitrarily corrupted (and
in collusion) they cannot
learn anything about how
particular users answered submissions (or even learn
correlations between groups of users). The key security
property of our ad-hoc survey is that only authorized
users can complete a survey, and furthermore they can
complete it at most once.
A. Deﬁnition of an Ad-hoc Survey
Deﬁnition 1: An ad-hoc survey scheme Γ is an
8-tuple of PPT algorithms and interactive PPTs
U , GenSurvey, Authorized,
(GenRA,GenSA,Reg
Submit, Check) where
RA,Reg
• GenRA(1n) outputs a key-pair pkRA, skRA.
• GenSA(1n) outputs a key-pair pkSA, skSA.
• Reg
(skRA, 1n, pkRA, idi) is an interactive PPT
RA
that outputs either success or fail.
• Reg
U
(1n, pkRA, id) is an interactive PPT that out-
puts a bitstring credid or fail.
• GenSurvey(1n, sid, L, skSA) outputs a bitstring
pksid. Here sid is a unique arbitrary identiﬁer and
L is a description of the set of users eligible to
participate in the survey.
• Authorized(pkSA, sid, pksid, id) outputs either YES
• Submit(1n, sid, pksid, m, credid) outputs Sub =
or NO.
(tok, m, tokauth).
• Check(pkRA, pkSA, sid, pksid, Sub) outputs either
accept or fail.
A remark on the Authorized procedure: We are in-
terested in schemes where the description of the autho-
rized procedure makes it possible to naturally interpret
the set of users that are allowed to complete a survey
(and indeed, our constructions fall into this category).
For instance, the description of the Authorized proce-
dure speciﬁes a list of user identities, or speciﬁes a list
of user identities with wildcard (e.g., ∗@∗.cornell.edu).
In our speciﬁc implementation, the public key for the
survey pksid consists of a list of authorized users.
B. Correctness
We proceed to deﬁne what it means for an ad-hoc
survey scheme to be correct. The following deﬁnition
requires that for every set of users L, and every user
id ∈ L, if an SA sets up a survey for L, and if the
user correctly registers with the RA, then the user will
be authorized to complete the survey; furthermore, for
every submission m, if user id correctly submits m, this
submission will pass the check.
Deﬁnition 2: An ad-hoc survey scheme Γ is correct
if there exists a negligible function μ(·), such that the
following experiment outputs fail with probability at
most μ(n) for every n ∈ N, sid, m ∈ {0, 1}n, set L
of n-bit strings, id ∈ L:
– (vkRA, skRA) ← GenRA(1n)
– (vkSA, skSA) ← GenSA(1n)
– Set (outRA, outU) to the result of the protocol
(Reg
– Output fail if either outRA or outU is fail, otherwise
let credid = outU.
– vksid ← GenSurvey(1n, sid, L, skSA)
– Output fail if Authorized(vkSA, sid, vksid, id) = NO.
– Sub ← Submit(1n, sid, vksid, m, credid)
– Output Check(vkSA, vkRA, sid, vksid, Sub)
(skRA, 1n, vkRA, id), Reg
(1n, vkRA, id))
RA
U
C. Privacy and Security
The following deﬁnition stipulates that the SA(s) and
RA and malicious users, even if arbitrarily corrupted,
cannot distinguish the submissions of two authorized
honest users, even for an adaptively chosen participant
list, user identities and submission messages, and even
if they may see the submission messages of the two
participants for any messages of their choosing, in any
other survey of its choice. Thus, even if an attacker
knows what submissions correspond to which users in
any surveys of its choice (before and after the survey
379
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
of interest), it still cannot identify what these users
submitted for a survey of interest. The deﬁnition mirrors
the deﬁnition of CCA-secure encryption: we give the
attacker the opportunity to generate an arbitrary public-
key for the RA, pick two user identities id0, id1, ask the
users to register with him, and then make oracle queries
to the users’ Submit procedure. Finally, the attacker
selects a survey consisting of a public-key for a SA, a sid
and a public key for the survey pksid such that id0, id1
are both authorized (for which it has not yet queried
the Submit oracle on sid), a pair of messages m0, m1,
and then sees two submissions. The attacker must guess
whether the two submissions correspond to ones from
id0 and id1 or from id1 and id0 respectively; the attacker
continues to have oracle access to the users’ Submit
procedure during this decision-making phase but cannot
make queries on the sid.
Deﬁnition 3: An ad-hoc survey scheme Γ is unlink-
able if for every non-uniform PPT A the ensembles
(1n, A)}n∈N are compu-
{EXEC
b
(1n, A) is de-
tationally indistinguishable where EXEC
ﬁned as follows:
(1n, A)}n∈N, {EXEC
0
1
b
(1n, A)
U
U
for
any
different
(1n, vkRA, id)
(1n, vkRA, id)
interacts
two
for
(cid:5)= ⊥ completes,
EXEC
– (vkRA, skRA), z ← A(1n)
– A(1n, z)
concurrently
with
ids
Reg
id0 and id1. Whenever an interaction with some
the
Reg
remainder of the experiment, A gets oracle access
to Submit(1n,·,·,·, credid). Next, A outputs a target
survey:
– (vkSA, sid, vksid, id0, id1, m0, m1, z
– Output fail if Authorized(vkSA, sid, vksid, id(cid:2)) = fail
or if A has queried Submit(1n, sid,·, mj, credid(cid:2) ) for
either (cid:2), j ∈ {0, 1}
– Let Sub(cid:2) = Submit(1n, sid, vksid, m(cid:2), credid(cid:2)⊕b )
for both (cid:2) = 0 and (cid:2) = 1 and ﬁnally output
A(1n, (Sub0, Sub1), z
) ← A(1n, z)
)
(cid:2)
(cid:2)
1) Justiﬁcation for the deﬁnition: We want to allow
the adversary to participate in multiple surveys, with
multiple honest submitters, and see the submissions of
as many honest submitters as it wishes. In particular, we
can consider a deﬁnition in which the following changes
are made. The adversary is now permitted to register
an unlimited number of honest users by interacting
U under the condition that no two have the
with Reg
same id. The adversary, for an arbitrary k surveys and
(cid:2) ≥ 2 honest submitters in each survey, is allowed to
output two k × (cid:2) matrices of ids ID
1, a vector of
k sids, (cid:3)sid, a vector of k the surveys’ veriﬁcation-keys
(cid:3)vksid and two k × (cid:2) matrices of messages M 0, M 1. We
require the submissions be legitimate, thus we require
0,ID
380
c, c ∈ {0, 1} be
that all of the ids in a given row of ID
distinct. Similarly, all the sids in (cid:3)sid must be distinct,
corresponding to distinct surveys (if one wanted to
have more ids in a given survey, the adversary could
simply increase the size of (cid:2)). Finally, all of the surveys
need to be “well formed” for every i ∈ [k], j ∈ [(cid:2)],