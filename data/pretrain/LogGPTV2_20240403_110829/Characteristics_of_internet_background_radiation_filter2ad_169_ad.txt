### Significant ICMP Host-Unreachable Messages at Class A

A significant portion of the ICMP host-unreachable messages observed at Class A are responses to UDP packets with spoofed source addresses, sent from port 53 to port 1026. Initially, we suspected these were backscatters from DNS poisoning attempts. However, further investigation revealed that these UDP packets are also present in other networks and are not DNS packets but rather Windows Messenger Pop-Up spams, as discussed in the next section.

### Activities in Background Radiation

In this section, we will first categorize the traffic by ports and provide an overview of the dominant activities on popular ports. We will then incorporate a temporal analysis to examine how the volume of these activities varies over time.

#### 5.1 Details per Port

We rank the popularity of activities primarily by the number of unique source IP addresses, rather than by packet or byte volume, for the following reasons:
1. Our filtering algorithm is biased against sources that attempt to reach many destinations, which can unevenly affect packet and byte volumes for different activities.
2. The number of source IPs should remain relatively unaffected by filtering, assuming a symmetry among destinations.
3. The number of source IPs reflects the activity's popularity across the Internet; an activity with a large number of sources is likely to be prominent globally.
4. While single-source activities might be due to an eccentric host, multi-source activities are more likely to be intentional.

| Port/Abbrev. | Activity |
|--------------|----------|
| 80/Get       | "GET /"  |
| 80/GetSrch   | "GET /"  |
| 80/SrchAAA   | "SEARCH /\x90\x02\xb1\x02\xb1..." (65536 byte URI) |
| 80/Srch64K   | "SEARCH /" |
| 135/Bind1    | RPC bind: 000001a0-0000-0000-c000-000000000046 |
| 135/RPC170   | Unknown RPC request (170 bytes) |
| 135/Bla      | RPC exploit: Blaster |
| 135/Wel      | RPC exploit: Welchia |
| 135/RPC-X1   | RPC exploit: Exploit1624a |
| 135/EP24-X2  | 135/tcp/[empty] => 135/tcp/Probe24a => 135/tcp/RPC exploit: Exploit2904a |
| 445/Nego     | 445/tcp/[session negotiation only] |
| 445/Locator  | "\\\IPC$ \locator"; RPC exploit: Exploit1896a |
| 445/Samr-exe | "\\\IPC$ \samr" |
| 445/Samr     | "\\\IPC$ \srvsvc" |
| 445/Srvsvc   | CREATE FILE: "[...].exe" |
| 445/Epmapper | "\\\IPC$ \epmapper" |

**Table 5: Abbreviations for Popular Activities**

When a source host contacts a port, it often sends one or more probes before revealing its true intention, sometimes in its second or third connection to the destination host. Probes can be empty connections (where the source opens and closes the connection without sending any data) or short requests, such as an HTTP "GET /". Since we are more interested in the source's intention, we analyze activities at a per-session (source-destination pair) granularity rather than a per-connection granularity. This approach helps us avoid the conclusion that probes are the dominant elements. We consider all connections between a source-destination pair on the given destination port collectively and suppress repetitions, providing a clear picture of the activity on each port.

Below, we examine the activities on popular destination ports and present the dominant activities for each port. For convenience, we use abbreviations for activity descriptions, as shown in Table 5. We selected an arbitrary day, March 29, 2004, to compare the distribution of activities seen at different networks: LBL, UW (I, II), and the Class A network. We treat the two UW networks as a single network to eliminate potential bias due to a single filter.

The background radiation traffic is highly concentrated on a small number of popular ports. For example, on March 29, we observed 32,072 distinct source IPs at LBL, with only 0.5% of the source hosts contacting a port not among the "popular" ports discussed below. By focusing on the most popular ports, we cover much of the background radiation activity.

It is important to note that looking at the ports alone does not allow us to distinguish background radiation traffic, as many popular ports, such as 80/tcp (HTTP), 135/tcp (DCE/RPC), and 445/tcp (SMB), are also heavily used by normal traffic. However, when we analyze the background radiation traffic at the application semantic level, it has a very distinctive modal distribution. For example, the activities on port 135 are predominantly targeted at two particular interfaces, and almost all buffer-overrun exploits are focused on one interface. The activity composition may change dramatically over time, especially with the appearance of new vulnerabilities or worms. For instance, the dominant activity on port 445 is no longer "Locator" after the rise of the Sasser worm. However, we believe the modal pattern will persist as long as the background radiation traffic remains highly automated.

#### TCP Port 80 (HTTP) and HTTP Proxy Ports

Most activities on port 80 (Table 6) target the Microsoft IIS server. In most cases, imitating the response of a typical IIS server enables us to attract follow-up connections from the source.

The dominant activity on port 80 is a WebDAV buffer-overrun exploit (denoted as SrchAAA). The exploit always makes two probes: "GET /" and "SEARCH /", each in its own connection, before sending a "SEARCH" request with a long URI (often 33,208 bytes, but the length can vary) starting with "/AAAA..." to overrun the buffer. Unlike other exploits, this one shows a lot of payload diversity—the URIs can differ by hundreds of bytes, and the difference is not due to byte shifting. The URIs are composed solely of lowercase letters, except for a few dozen Unicode characters near the beginning. The URI appears to be constructed using the Venetian exploit and becomes executable x86 code after Unicode encoding (inserting a byte 0 at every other byte).

Other WebDAV exploits, such as one from Agobot (Srch64K), carry a fixed 65,536-byte URI. Old IIS worms, like Nimda and CodeRed II, remain visible in the datasets. The CodeRed II worm is almost identical to the original, except for a space shift and a change in the expiration date to year 0x8888. We also frequently see "OPTIONS /" followed by a "PROPFIND" request, which look like probes. We have not been able to elicit further requests from the sources and do not yet fully understand the intention behind such probes. We suspect they might be scanners trying to obtain a listing of scriptable files by sending “translate: f” in the header of the HTTP request.

An interesting component of background radiation observed across all networks on HTTP proxy ports (81, 1080, 3128, 8000, 8080, 8888) and on port 80 is source hosts using open proxies to send probes to tickerbar.net. A typical request is shown in Figure 8. These requests come from sources abusing a "get rich quick" scheme from greenhorse.com, a website that pays users for running tickerbars while they surf the net. By using open proxies, these sources can potentially appear to be running hundreds of nodes. The Greenhorse website seems to have since been inactivated.

**Figure 8: Typical HTTP request of a tickerbar host**
```
GET http://dc.tickerbar.net/tld/pxy.m?nc=262213531 HTTP/1.0
Host: dc.tickerbar.net
Connection: Close
```

**Table 6: Port 80 Activities (March 29, 2004)**
| Activity | UW | Class A | LBL |
|----------|----|---------|-----|
| Get      | 4.6% | 5.1% | 2.9% |
| GetSrch  | 5.2% | 93.2% | 93.4% |
| SrchAAA  | 84.2% | 0.0% | 0.0% |
| Srch64K  | 0.6% | 0.0% | 0.0% |
| CodeRed  | 0.2% | 0.0% | 0.0% |
| Nimda    | 3.8% | 0.0% | 0.0% |
| Other    | 1.1% | 0.5% | 0.4% |

Note: To reduce trace size, active responders at UW and Class A do not respond to "SEARCH /" to avoid receiving large SrchAAA requests.

#### TCP Port 135/1025 (DCE/RPC)

Port 135 is the Endpoint Mapper port on Windows systems and one of the entry points to exploit the infamous Microsoft Windows DCOM RPC service buffer overrun vulnerability. This vulnerability is exploited by the Blaster and Welchia worms, among others.

**Figure 9: Port 135 activities on March 29**
| Activity | LBL (334) | UW (960) | Class A (6220) |
|----------|-----------|----------|----------------|
| 135/empty | 0.9% | 1.3% | 2.4% |
| 135/Nego | 1.3% | 1.8% | 11.6% |
| 135/Locator | 2.4% | 0.6% | 0.8% |
| 135/Samr-exe | 2.4% | 0.8% | 0.3% |
| 135/Samr | 3.7% | 0.8% | 0.0% |
| 135/Srvsvc | 3.3% | 2.7% | 0.8% |
| 135/Epmapper | 89.3% | 0.4% | 0.4% |
| Other | 1.1% | 1.1% | 0.8% |

On port 1025, which is open on a normal Windows XP host, we see a similar set of exploits. Further, DCE/RPC exploits are also seen on SMB named pipes on ports 139 and 445. We will provide a closer look at RPC exploits in Section 5.2.2.

#### TCP Port 139/445 (CIFS)

Port 139 is the NetBIOS Session Service port and is usually used on Windows systems for CIFS (Common Internet File System) over NetBIOS. Port 445 is for CIFS over TCP and is also known as Microsoft-DS. When used for CIFS sessions, the two ports are almost identical, except that NetBIOS requires an extra step of session setup. Sources simultaneously connecting to both ports prefer port 445 and abandon the port 139 connection, leading to frequent empty port 139 connections.

There are a variety of exploits on these two ports. Figure 3 shows a snapshot of exploits on port 445 at the Class A network. There are two main types of activities:
1. Buffer-overrun RPC exploits through named pipes, such as the Locator pipe or the Epmapper pipe.
2. Access control bypassing followed by attempts to upload executable files to the target host, as in the 445/Samr-exe exploit.

**Table 7: Port 445 activities**
| Activity | UW | Class A | LBL |
|----------|----|---------|-----|
| 445/empty | 0.9% | 1.3% | 2.4% |
| 445/Nego | 1.3% | 1.8% | 11.6% |
| 445/Locator | 2.4% | 0.6% | 0.8% |
| 445/Samr-exe | 2.4% | 0.8% | 0.3% |
| 445/Samr | 3.7% | 0.8% | 0.0% |
| 445/Srvsvc | 3.3% | 2.7% | 0.8% |
| 445/Epmapper | 89.3% | 0.4% | 0.4% |
| Other | 1.1% | 1.1% | 0.8% |

The Locator pipe exploit dominates port 445 activities at all four networks. Some sources do not go beyond the session negotiation step. We also see exploits that first connect to the SAMR (Session Account Manager) pipe, then connect to the SRVSVC pipe, and attempt to create an executable file with names such as msmsgri.exe (W32 Randex.D) and Microsoft.exe. By connecting to the Epmapper pipe, sources are exploiting the same vulnerability as on port 135/1025, though this activity is not seen at the Class A network.

On port 139, 75% to 89% of source hosts either initiate empty connections or do not go beyond the NetBIOS session setup stage, then migrate to port 445. The dominant activity we accurately identify involves attempts to create files on startup folders after connecting to the SRVSVC pipe Xi.exe (W32-Xibo). Unlike port 445, we see few hosts attempting to exploit buffer overflows on the Locator or Epmapper pipe. We also see Agobot variants that connect to the SAMR pipe and drop executables.

#### TCP Port 6129 (Dameware)

Port 6129 is listened to by Dameware Remote Control, an administration tool for Windows systems, which has a buffer overrun vulnerability in its early versions. The Dameware exploits we see are similar to published exploit programs but do not have exactly the same payload. To launch an exploit, the source host will first send a 40-byte message to probe the operating system version and then ship the exploit payload, which is almost always 5,096 bytes long.

On March 29, 2004, 62% of the source hosts that connect to port 6129 at LBL close the connections without sending a byte; another 26% abandon the connections after sending the probe message. We see exploit messages from the remaining 12% (the number is over 30% on April 29). It is reasonable to question if the large number of abandoned connections suggests that the sources did not like our responders. However, we also find source hosts that first connect with an empty connection and later return to send an exploit. Port 6129 is associated with the Agobot, which connects to various ports (see Section 6.1), and the bots may connect to multiple ports simultaneously and decide to exploit the port they receive a response from first.

#### TCP Port 3127/2745/4751 (Virus Backdoors)

Port 3127 and 2745/4751 are known to be the backdoor ports of the MyDoom virus and the Beagle viruses, respectively. On most port 3127 connections, we see a fixed 5-byte header followed by one or more Windows executable file uploads. The files are marked by "MZ" as the first two bytes and contain the string "This program cannot be run in DOS mode" near the head of the file. Running several captured executable files in a closed environment reveals that the programs scan TCP ports 3127, 135, and 445.

On port 2745, the dominant payload we see at LBL and UW is the following FTP URL, which comes after exchanging one or two short binary messages:
```
"ftp://bla:bla@:/bot.exe\0"
```
On the Class A network, however, we do not see a lot of port 2745 activities. Interestingly, we see several source hosts attempting to upload Windows executables. We also see many hosts that close the connection after exchanging an initial message.

On port 4751, in some cases, we see binary uploads after echoing a header, similar to what happens on port 3721. In most cases, we receive a cryptic 24-byte message and are unable to elicit further response by echoing.

#### TCP Port 1981/4444/9996 (Exploit Follow-Ups)

While worms such as CodeRed and Slammer are contained completely within the buffer-overrun payload, several other worms, such as Blaster and Sasser, infect victim hosts in two steps. First, the buffer-overrun payload carries only a piece of "shell code" that will listen on a particular port to accept further commands. Second, the source then instructs the shell code to download and execute a program from a remote host. For example, on port 4444, the follow-up port for the Blaster worm, we often see:
```
tftp -i GET msblast.exe
start msblast.exe
msblast.exe
```
Similarly, on port 1981 (Agobots) and 9996 (Sasser), we see sequences of shell commands to download and execute a bot.exe.

In contrast, there is a different kind of shell code called a "reverse shell," which does not listen on any particular port but instead connects back to the attacker's command and control server.