A signiﬁcant portion of ICMP host-unreach messages we
see at Class A are responses to UDP packets with spoofed source
addresses from port 53 to port 1026. We ﬁrst thought we were
seeing backscatters of DNS poisoning attempts, but then we found
that we are also seeing the UDP packets in other networks as well.
Examining these packets reveals that they are not DNS packets, but
rather Windows Messenger Pop-Up spams, as discussed in the next
section.
5. ACTIVITIES IN BACKGROUND
RADIATION
In this section we will ﬁrst divide the trafﬁc by ports and present
a tour of dominant activities on the popular ports. Then we will
add the temporal element to our analysis to see how the volume of
activities vary over time.
5.1 Details per Port
We rank activities’ popularity mostly by number of source IPs,
rather than by packet or byte volume, for the following reasons.
First, our ﬁltering algorithm is biased against sources that try to
reach many destinations, thus affects packet/byte volumes unevenly
for different activities. The number of source IPs, however, should
largely remain unaffected by ﬁltering, assuming a symmetry among
destinations. Also, number of source IPs reﬂects popularity of the
activity across the Internet — an activity with a huge number of
sources is likely to be prominent on the whole Internet. Finally,
while a single-source activities might be merely a result of an ec-
centric host, a multi-source activity is more likely to be intentional.
Port/Abbrev.
80/Get
80/GetSrch
80/SrchAAA
80/Srch64K
135/Bind1
135/RPC170
135/Bla
135/Wel
135/RPC-X1
135/EP24-X2
445/Nego
445/Locator
445/Samr-exe
445/Samr
445/Srvsvc
445/Epmapper
Activity
"GET /"
"GET /"
"GET /"
"SEARCH /\x90\x02\xb1\x02\xb1..."
(65536 byte URI)
RPC bind: 000001a0-0000-0000-c000-
"SEARCH /"
"SEARCH /"
"SEARCH /AAA..."
000000000046
Unknown RPC request (170 bytes)
RPC exploit: Blaster
RPC exploit: Welchia
RPC exploit: Exploit1624a
135/tcp/[empty] => 135/tcp/Probe24a =>
135/tcp/RPC exploit: Exploit2904a
445/tcp/[session negotiation only]
"\\\IPC$ \locator";
RPC exploit: Exploit1896a
"\\\IPC$ \samr"
"\\\IPC$ \srvsvc"
CREATE FILE: "[...].exe"
"\\\IPC$ \samr"
"\\\IPC$ \srvsvc"
"\\\IPC$ \epmapper"
Table 5: Abbreviations for Popular Activities
When a source host contacts a port, it is common that it sends
one or more probes before revealing its real intention, sometimes
in its second or third connection to the destination host. A probe
can be an empty connection, i.e. the source opens and closes the
connection without sending a byte, or some short request, e.g., an
HTTP "GET /". Since we are more interested in the intention of
sources, we choose to look at the activities at a per-session (source-
destination pair) granularity rather than a per-connection granu-
larity. Otherwise one might reach the conclusion that the probes
are the dominant elements. We consider all connections between
a source-destination pair on the given destination port collectively
and suppress repetitions. This approach usually gives us a clear
picture of activity on each port.
Below we examine the activities on popular destination ports,
and for each port we will present the dominant activities. For con-
venience of presentation, we introduce abbreviations for activity
descriptions, as shown in Table 5. We pick an arbitrary day, March
29, 2004, to compare the distribution of activities seen at different
networks, LBL, UW (I,II), and the Class A network. We consider
the two UW networks as a single network to eliminate possible bias
that might occur due to a single ﬁlter.
The background radiation trafﬁc is highly concentrated on a
small number of popular ports. For example, on Mar 29 we saw
32,072 distinct source IPs at LBL,1 and only 0.5% of the source
hosts contacted a port not among the “popular” ports discussed be-
low. Thus by looking at the most popular ports, we cover much of
the background radiation activity.
Note that looking at the ports alone does not allow us to distin-
guish the background radiation trafﬁc, because many of the pop-
ular ports, e.g., 80/tcp (HTTP), 135/tcp (DCE/RPC) and 445/tcp
(SMB), are also heavily used by the normal trafﬁc. On the other
hand, once we look at the background radiation trafﬁc at appli-
cation semantic level, it has a very distinctive modal distribution.
For example, the activities on port 135 are predominantly targeted
on two particular interfaces, and almost all buffer-overrun exploits
are focused on one interface. It is worth noting that the activity
composition may change dramatically over time, especially when
Activity
Get
GetSrch
SrchAAA 84.2%
0.9%
Srch64K
0.6%
CodeRed
0.2%
Nimda
Other
3.8%
UW Class A
LBL
4.6%
5.1%
2.9%
5.2% 93.2%
93.4%
0.0%
0.0%
0.0%
1.1%
0.5%
0.4%
0.2%
0.1%
2.3%
1.3%
Table 6: Port 80 Activities (Mar 29, 2004) Note that to reduce
trace size the active responders at UW and Class A do not re-
spond to "SEARCH /" to avoid getting the large SrchAAA re-
quests.
new vulnerabilities/worms appear, e.g., the dominant activity on
port 445 is no longer “Locator” after the rise of the Sasser worm.
However, we believe the modal pattern will last as long as the back-
ground radiation trafﬁc remains highly automated.
TCP Port 80 (HTTP) and HTTP Proxy Ports: Most activities
we see on port 80 (Table 6) are targeted against the Microsoft IIS
server. In most cases, imitating the response of a typical IIS server
enables us to attract follow-up connections from the source.
The dominant activity on port 80 is a WebDAV buffer-overrun
exploit [39] (denoted as SrchAAA). The exploit always makes two
probes: "GET /" and "SEARCH /", each in its own connec-
tion, before sending a "SEARCH" request with a long URI (in
many cases 33,208 bytes, but the length can vary) starting with
"/AAAA..." to overrun the buffer. Unlike exploits we see on
many other ports, this exploit shows a lot of payload diversity —
the URIs can be different from each other by hundreds of bytes,
and the difference is not due to byte shifting. More interestingly,
the URIs are composed solely of lower-case letters except for a few
dozens of Unicode characters near the beginning. The URI appears
to be constructed with the Venetian exploit [2], and it will become
executable x86 code after Unicode encoding (inserting a byte 0 at
every other byte). Besides this exploit, we also see other WebDAV
exploits, e.g., one popular exploit (Srch64K) from Agobot carries a
ﬁxed 65,536 byte URI.
Old IIS worms, Nimda and CodeRed II, remain visible in the
datasets. The CodeRed II worm is almost the same as the original
CodeRed II, except shift of a space and the change of expiration
date to year 0x8888. We also often see a "OPTIONS /" followed
by a "PROPFIND" request. As both requests are short, they look
like probes. We have not been able to elicit further requests from
the sources and do not yet fully comprehend the intention behind
such probes. We suspect that they might be scanners trying to ob-
tain a listing of list of scriptable ﬁles by sending “translate: f” in
the header of the HTTP request [31].
An interesting component of background radiation ob-
served across
all networks on the HTTP proxy ports:
81/1080/3128/8000/8080/8888,2 as well as on port 80, is source
hosts using open-proxies to send probes to tickerbar.net.
A typical request
is shown in Figure 8. These requests are
from sources abusing a “get rich quick” money scheme from
greenhorse.com–a web site pays users money for running tickerbar
while they surf the net. By using open-proxies, these sources can
potentially appear to be running hundreds of nodes [35]. The
Greenhorse website seems to have since been inactivated.
1Here we ignore the effect of source IP spooﬁng, since our responder was
able to establish TCP connections with most of the source hosts.
2Though some of these ports are not ofﬁcially assigned to HTTP, the trafﬁc
we received almost contained only HTTP requests.
GET http://dc.tickerbar.net/tld/pxy.m?nc=262213531 HTTP/1.0
Host: dc.tickerbar.net
Connection: Close
Figure 8: Typical HTTP request of a tickerbar host
100.0
)
%
(
s
P
I
e
c
r
u
o
S
f
o
e
g
a
t
n
e
c
r
e
P
80.0
60.0
40.0
20.0
0.0
Other
135/EP24-X2
135/RPC-X1
135/Wel
135/Bla
135/RPC170
135/Bind1
135/empty
LBL
(334)
UW
(960)
Data Set(Volume)
Class A
(6220)
Figure 9: Port 135 activities on Mar 29
TCP Port 135/1025 (DCE/RPC): Port 135 is the Endpoint Mapper
port on Windows systems [10] and one of the entry points to exploit
the infamous Microsoft Windows DCOM RPC service buffer over-
run vulnerability [37]. This vulnerability is exploited by the Blaster
worm and the Welchia worm among others.
Figure 9 shows the dominant activities on the port. The Blaster
worm was seen on all three networks, but strangely we only saw
the Welchia worm at LBL. There were also a number of empty
connections without follow-ups and a few types of probes (e.g.,
135/RPC170) we do not understand well. Comparing the activity
distribution across three networks, the difference is striking and un-
like what we see on other ports. This may be due to 1) lack of a
single dominant activity and 2) that certain scanning and exploits
might be targeted or localized.
On port 1025, which is open on a normal Windows XP host, we
see a similar set of exploits. Further, DCE/RPC exploits are also
seen on SMB name pipes on port 139 and 445. We will present a
closer look of RPC exploit in Section 5.2.2.
TCP Port 139/445 (CIFS): Port 139 is the NetBIOS Session Ser-
vice port and is usually used on Windows systems for CIFS (Com-
mon Internet File System) [7] over NetBIOS. Port 445 is for CIFS
over TCP and is also known as Microsoft-DS. When used for CIFS
sessions, the two ports are almost identical except that NetBIOS
requires an extra step of session setup. Sources simultaneously
connecting to both ports prefer port 445 and abandon the port 139
connection. Thus we frequently see empty port 139 connections.
As many Windows services run on top of CIFS there are a great
variety of exploits we see on these two ports. Figure 3 shows a
snapshot of exploits we see on port 445 at the Class A network.
There are basically two kinds of activities: 1) buffer-overrun RPC
exploits through named pipes, e.g.
the Locator pipe [38] or the
Epmapper pipe (connected to the endpoint mapper service); and
2) access control bypassing followed by attempts to upload exe-
cutable ﬁles to the target host, e.g. as in exploit 445/Samr-exe.
As shown in Table 7, the Locator pipe exploit dominates port
445 activities at all four networks. Besides that, some sources did
not go beyond the session negotiation step — the ﬁrst step in a
Activity
445/empty
445/Nego
445/Locator
445/Samr-exe
445/Samr
445/Srvsvc
445/Epmapper
Other
UW Class A
LBL
0.9%
1.3%
2.4%
2.4%
3.7%
3.3%
89.3%
72.7% 89.4%
1.1%
1.8%
11.6%
0.6%
0.8%
2.7%
0.8%
0.4%
1.1%
0.8%
0.3%
0.0%
3.5%
3.7%
5.4%
Table 7: Port 445 activities
CIFS session. We also see exploits that ﬁrst connect to the SAMR
(Session Account Manager) pipe, then connect to the SRVSVC
pipe and attempt to create an executable ﬁle with names such as
msmsgri.exe(W32 Randex.D) [28] and Microsoft.exe [1].
Finally, by connecting to the Epmapper pipe the sources are ex-
ploiting the same vulnerability as on port 135/1025 — note that
this activity is not seen at the Class A network.
On port 139, 75% to 89% of source hosts either merely initiate
empty connections or do not go beyond the NetBIOS session setup
stage, and then migrate to port 445; The dominant activity that we
accurately identify are attempts to create ﬁles on startup folders af-
ter connecting to the SRVSVC pipe Xi.exe(W32-Xibo) [41].Un-
like port 445, we see few hosts attempting to exploit the buffer
overﬂows on the Locator or Epmapper pipe. We also see Agobot
variants that connect to the SAMR pipe and drop executables.
TCP Port 6129 (Dameware): Port 6129 is listened by Dame-
ware Remote Control, an administration tool for Windows systems,
which has a buffer overrun vulnerability in its early versions [36].
The Dameware exploits we see are similar to those of published ex-
ploit programs but do not have exactly the same payload. To launch
an exploit, the source host will ﬁrst send a 40 byte message to probe
operating system version and then ship the exploit payload, which
is almost always 5,096 bytes long.
On Mar 29, 2004, 62% of the source hosts that connect to port
6129 at LBL3 close the connections without sending a byte; another
26% abandoned the connections after sending the probe message;
and we see exploit messages from the remaining 12% (the number
is over 30% on Apr 29). It would be reasonable to question if the
large number of abandoned connections suggest that the sources
did not like our responders. However, we also ﬁnd source hosts
that would ﬁrst connect with an empty connection and later came
back to send an exploit. Port 6129 is associated with the Agobot
that connects a variety of ports (see Section 6.1), and possibilities
are that the bots may connect to a number of ports simultaneously
and decide to exploit the port that they receive a response from ﬁrst.
TCP Port 3127/2745/4751 (Virus Backdoors): Port 3127 and
2745/4751 are known to be the backdoor ports of the MyDoom
virus and the Beagle viruses, respectively. On most port 3127 con-
nections, we see a ﬁxed 5-byte header followed by one or more
Windows executable ﬁles uploads. The ﬁles are marked by "MZ"
as the ﬁrst two bytes and contain the string "This program
cannot be run in DOS mode" near head of the ﬁle. Run-
ning several captured executable ﬁles in a closed environment re-
veals that the programs scan TCP ports 3127, 135, and 445.
On port 2745, the dominant payload we see at LBL and UW is
the following FTP URL, which comes after exchanging of one or
two short binary messages.
3Due to an iSink responder problem we do not have data for the UW and
Class A network.
"ftp://bla:bla@:/bot.exe\0"
On the Class A network, however, we do not see a lot of port
2745 activities. Interestingly, we see several source hosts that at-
tempt to upload Windows executables. We also see many hosts that
close the connection after exchange of an initial message.
On port 4751, in some cases we see binary upload after echoing a
header, similar to what happens on port 3721, but in most cases we
receive a cryptic 24-byte message, and are unable to elicit further
response by echoing.
TCP Port 1981/4444/9996: (Exploit Follow-Ups): While worms
such as CodeRed and Slammer are contained completely within the
buffer-overrun payload, several of the other worms such as Blaster
and Sasser infect victim hosts in two steps. First, the buffer-overrun
payload carries only a piece of “shell code” that will listen on a
particular port to accept further commands; Second, the source then
instructs the shell code to download and execute a program from a
remote host. For example, on port 4444, the follow-up port for the
Blaster worm, we often see:
tftp -i  GET msblast.exe
start msblast.exe
msblast.exe
Similarly, on port 1981 (Agobots) and 9996 (Sasser) we see se-
quences of shell commands to download and execute a bot.exe.
In contrast, there is a different kind of shell code called “reverse
shell” which does not listen on any particular port, but instead con-