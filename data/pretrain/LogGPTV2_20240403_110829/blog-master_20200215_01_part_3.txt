CASE  WHEN days >= 0 and days = 30 and days = 60 and days = 120  THEN '[120,)'  END   as diff_days ,   
CASE  WHEN payment >= 0 and payment = 50 and payment = 100 and payment = 200  THEN '[200,)'  END   as buyer_payment   
from (  
select buyer_id,   
min(date_pay_time) over w as mmin,   
max(date_pay_time) over w as mmax,   
sum(payment) over w as payment,   
date(now()) - date(date_pay_time) as days   
from   
bi.new_t_order%s o  -- 分区表使用这个代替   
where o.status in (1,4,5,6,7,9)  AND o.sellerId= xxxxxxxxxxxx and o.date_pay_time is not null  
window w as (partition by buyer_id)   
) t  
where mmin = mmax   
group by diff_days, buyer_payment   
    $_$)   
as t(num int8, diff_days text, buyer_payment text)   
group by diff_days,buyer_payment  
order by diff_days,buyer_payment;    
```  
执行结果一样, 都没有问题  
```  
   num    | diff_days | buyer_payment   
----------+-----------+---------------  
    51692 | [0,30)    | [0,50)  
    13022 | [0,30)    | [100,200)  
     3560 | [0,30)    | [200,)  
    50216 | [0,30)    | [50,100)  
 11315785 | [120,)    | [0,50)  
  2541471 | [120,)    | [100,200)  
   711984 | [120,)    | [200,)  
  6957021 | [120,)    | [50,100)  
       17 | [120,)    |   
   128596 | [30,60)   | [0,50)  
    46335 | [30,60)   | [100,200)  
    15399 | [30,60)   | [200,)  
   133719 | [30,60)   | [50,100)  
   372008 | [60,120)  | [0,50)  
   134772 | [60,120)  | [100,200)  
    39495 | [60,120)  | [200,)  
   356866 | [60,120)  | [50,100)  
       15 | [60,120)  |   
(18 rows)  
Time: 18553.140 ms (00:18.553)  
```  
即使使用原始sql性能提升也是很明显的.  
```  
select sum(num) num, diff_days, buyer_payment   
from   
get_res($_$  
select count(buyer_id) num, diff_days, CASE  WHEN payment >= 0 and payment = 50 and payment = 100 and payment = 200  THEN '[200,)'  END   as buyer_payment   
from(    
select sum(payment) payment, diff_days, buyer_id   
from(    
select buyer_id, sum(payment) payment,  CASE  WHEN days >= 0 and days = 30 and days = 60 and days = 120  THEN '[120,)'  END   as diff_days    
from(    
select buyer_id, payment, (now()::date-date_last_pay_time::date) days   
from (    
select o.buyer_id, sum(o.payment) payment, count(distinct o.date_pay_time) purchase_times , max(o.date_pay_time) date_last_pay_time    
from bi.new_t_order%s o    
where o.status in (1,4,5,6,7,9)  AND o.sellerId= xxxxxxxxxxxx and o.date_pay_time is not null  
group by o.buyer_id   
) as extractdata   
where purchase_times >= 1   and purchase_times < 2  /** order end **/    
) as builddata    
group by diff_days, buyer_id    
) as resetdata    
group by diff_days, buyer_id    
) as groupdata     
group by diff_days, buyer_payment    
order by diff_days, buyer_payment   
    $_$)   
as t(num int8, diff_days text, buyer_payment text)   
group by diff_days,buyer_payment  
order by diff_days,buyer_payment;  
```  
```  
   num    | diff_days | buyer_payment   
----------+-----------+---------------  
    51692 | [0,30)    | [0,50)  
    13022 | [0,30)    | [100,200)  
     3560 | [0,30)    | [200,)  
    50216 | [0,30)    | [50,100)  
 11315785 | [120,)    | [0,50)  
  2541471 | [120,)    | [100,200)  
   711984 | [120,)    | [200,)  
  6957021 | [120,)    | [50,100)  
       17 | [120,)    |   
   128596 | [30,60)   | [0,50)  
    46335 | [30,60)   | [100,200)  
    15399 | [30,60)   | [200,)  
   133719 | [30,60)   | [50,100)  
   372008 | [60,120)  | [0,50)  
   134772 | [60,120)  | [100,200)  
    39495 | [60,120)  | [200,)  
   356866 | [60,120)  | [50,100)  
       15 | [60,120)  |   
(18 rows)  
Time: 21636.811 ms (00:21.637)  
```  
## 小结  
通过分析业务逻辑, 减少嵌套次数, 减少运算量和memcpy, sql执行从118秒降低到89秒. 通过分区,dblink异步并行, 降低到19秒.    
## 内核优化思路  
1、列存   
2、优化器, 支持多阶段并行场景,类似mpp.   
3、优化器, 支持复杂sql的更多并行的逻辑优化.   
本文实际上是对2,3使用dblink异步进行了优化.   
## 参考  
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)    
[《PostgreSQL dblink异步调用实践,跑并行多任务 - 例如开N个并行后台任务创建索引, 开N个后台任务跑若干SQL》](../201809/20180903_01.md)    
[《在PostgreSQL中跑后台长任务的方法 - 使用dblink异步接口》](../201806/20180621_03.md)    
[《PostgreSQL 批量导入性能 (采用dblink 异步调用)》](../201804/20180427_03.md)    
[《阿里云RDS PostgreSQL OSS 外部表实践 - (dblink异步调用封装并行) 从OSS并行导入数据》](../201804/20180427_01.md)    
[《PostgreSQL 变态并行拉取单表的方法 - 按块并行(按行号(ctid)并行) + dblink 异步调用》](../201804/20180410_03.md)    
[《PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒》](../201802/20180210_01.md)    
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)    
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例 - 含dblink VS pg 11 parallel hash join VS pg 11 智能分区JOIN》](../201802/20180201_02.md)    
[《惊天性能！单RDS PostgreSQL实例 支撑 2000亿 - 实时标签透视案例 (含dblink异步并行调用)》](../201712/20171223_01.md)    
[《阿里云RDS PostgreSQL OSS 外部表实践 - (dblink异步调用封装并行) 数据并行导出到OSS》](../201709/20170906_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")