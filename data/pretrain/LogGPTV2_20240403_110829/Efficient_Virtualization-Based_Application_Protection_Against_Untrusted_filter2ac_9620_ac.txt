text switch to attack CAP. Its main tasks are to facilitate the context
switch and to safeguard CAP’s context information. It also notiﬁes
the hypervisor to perform address space switch. As shown in Fig-
ure 5, when an interrupt is raised, the control ﬂow leaves from CAP
to the kernel. Once the event is processed by the kernel, the ﬂow
goes back to CAP. We proceed to elaborate the details of context
switch.
Figure 5: Control ﬂow between the CAP and the guest kernel.
Each control ﬂow of CAP starts from an entry gate and ends
with an exit gate.
4.1 Components of Transit Module
The transit module is a self-contained kernel module with its ex-
ecution being protected by the hypervisor using the mechanism de-
scribed in [27]. Speciﬁcally, the memory regions occupied by the
5
Entry Gates Commodity OS Exit Gates CAP Transit Module Address Space Boundary 349transit module is isolated by the hypervisor, such that the untrusted
commodity OS can not modify the data and the code. The control
ﬂows of the transit module execution always start from the pre-
deﬁned addresses called entry/exit gates as in Figure 5.
sit module which captures events within CAP, so that unrelated
applications are not involved.
The AppShield IDT contains the pointers pointing to the App-
Shield interrupt handlers. The hypervisor installs the AppShield
IDT to the CPU occupied by CAP by setting its IDTR register in
the VMCS structure. Consequently, the AppShield interrupt han-
dlers become the ﬁrst responders to interrupts on the CPU occupied
by CAP. They use hypercalls to notify the hypervisor when neces-
sary. When the guest OS is running, it still uses the original IDT
and interrupt handlers. The switch of the two IDTs follows the
switch of the address space. As illustrated in Figure 8, the origi-
nal IDT is uninstalled and the secure IDT is installed for the CAP
execution.
Figure 6: The format of transit module
The transit module has two sections (Figure 6), which are page
aligned for facilitating memory protection. The ﬁrst section is the
public section which contains information that is read-only for the
transit module and the commodity OS. The second section is the
private section which contains private data. Accesses to the pri-
vate section are only allowed if they are from the transit module;
other accesses originated from outside of the transit module are
blocked by the hypervisor. The transit module comprise an App-
Shield Interrupt Descriptor Table (IDT) which points to a set of its
own interrupt handlers called AppShield interrupt handlers. Note
that the interrupts are still handled by the guest kernel as in the nor-
mal setting, not by the transit module. As explained in subsequent
sections, the transit module is for AppShield to capture events and
protect the context switch without having performance effect on the
kernel or other applications.
An AppShield interrupt handler is composed of two code stubs
(Figure 7): the entry gate in the public section and the exit gate in
the private section. The control ﬂow of the transit module always
starts from one of the entry/exit gates. The exit gate handles the
context switch from CAP in protection to the guest kernel while
the entry gate handles the switch back to CAP. More details of
their working mechanisms are presented in Section 4.3.
Figure 7: An AppShield interrupt handler consists of one pair
of gates, which invokes the original interrupt handler to re-
sponse the corresponding interrupt and mediates the return
from the kernel to CAP.
4.2 Event Capture
The hypervisor in AppShield does not intercept interrupt events
since it will signiﬁcantly affect the platform performance. When
AppShield is activated, the hypervisor loads and protects the tran-
6
Figure 8: Performance Overhead Localization. When the con-
text switches to CAP, the normal IDT is uninstalled and the
secure IDT is installed.
By using two sets of interrupt handlers, our design achieves per-
formance overhead localization, because the transit module is only
invoked when CAP is interrupted. AppShield is not involved with
the executions of other applications or the guest OS.
4.3 Context and Address Space Switch
Figure 9 depicts the control ﬂow of event handling with two con-
text switches at the exit gate and the entry gate. When an interrupt
is raised during CAP’s execution, the exit gate of the AppShield
interrupt handler sets out to the context. Under the protection of
the hypervisor, the exit gate ﬁrst prepares a buffer and saves CAP’s
context in the transit module’s private section.
It then creates a
dummy context for the kernel to execute within. Note that the
dummy context should not be randomly generated since some con-
text information is used by the kernel to serve for the application.
For instance, the EIP should point to the corresponding interrupt
handler so that the original handler can serve the interrupt. Specif-
ically, we only need to hide the information in the general registers
(i.e., EAX, EBX, ECX, EDX, ESI, EDI, EBP) since they may con-
tain sensitive CAP data. In the case of system call context switch,
we also need to keep the parameters in the corresponding registers.
To allow the execution ﬂow to securely come back to the transit
module, the return address of the dummy context is set to point to
the corresponding entry gate. In the end, the exit gate then issues
a hypercall to inform the hypervisor to restore the original page
tables so that the interrupt handler in the guest kernel can properly
execute.
Once the guest interrupt handler ﬁnishes its process, the control
is returned to the entry gate. The entry gate issues a hypercall to
request the hypervisor to restore the AppShield EPT and guest page
tables. After ensuring that the request is indeed from the legitimate
entry gate, the hypervisor restores the AppShield EPT and installs
Public Section Private Section Page Aligned Entry Gates … … Exit Gates Exit  Gate Entry  Gate Original Interrupt Handler Address Space Boundary AppShield Interrupt Handler … AppShield Interrupt Handler AppShield Interrupt Handler AppShield Interrupt Handler AppShield IDT Original  IDT Address Space Switch … Original Interrupt Handler Original Interrupt Handler Original Interrupt Handler 350the AppShield IDT, so that the entry gate can properly restore the
saved context and resume the interrupted CAP execution.
explained that temporal protection is achieved by address space iso-
lation and secure context switch. In this section, we describe how
AppShield enforces spatial protection through system call adap-
tion. According to the security risks, we adapt those low risk sys-
tem calls and emulate those high risk ones.
5.1 System Call Adaption
Figure 9: A typical address space switch always starts with an
exit gate and ends with an entry gate. The commodity OS han-
dles the events that trigger the address space switch.
4.4 Special Considerations
4.4.1 Fast-System-Call Cost Localization
Platforms with modern processor and chipset support fast system
call mechanisms by introducing new instructions. The SYSEN-
TRER(SYSCALL) instruction traps the CPU to the kernel mode
while the SYSEXIT(SYSRET) instruction transfers the CPU back
to the user mode. In this paper we use SYSENTER and SYSEXIT
instruction pair to illustrate the localization mechanism.
The SYSENTER instruction sets the registers (i.e., CS, EIP,
SS and ESP) according to values speciﬁed by the operating system
in certain Model-Speciﬁc Registers (MSR), and triggers the CPU
to trap into the kernel mode. To localize the performance over-
head to CAP, the hypervisor uses an additional set of MSR dedi-
cated for CAP, where EIP value in the corresponding MSR (i.e.,
SYSENTER_EIP_MSR) is set to point to the corresponding exit
gate within the transit module. By doing so, all fast system calls
will be intercepted the transit module. The guest kernel uses its
own MSRs. The two sets of registers are switched following ad-
dress space switches. Note that the context backup and restoration
are still handled by the pairs of the exit and entry gates. Itâ ˘A ´Zs
a well known fact that when multiple processors are present in a
system, every processor has its own set of MSRs. Thus, the modi-
ﬁcations of MSRs for the protected application do not affect other
applications running on other processors.
4.4.2 Multi-Thread Execution
AppShield supports multi-thread execution of CAP. The child
threads could be user threads, which are completely maintained by
CAP in user space, or light weight processes which share the same
address space with their parent and are scheduled by the guest OS.
The user threads do not have their own contexts since they do not
have the kernel structure for scheduling. Therefore, they are trans-
parent to AppShield. In contrast, light weight process threads may
have multiple user contexts for CAP, since each of them has its
own corresponding structures (e.g., the kernel stack) for schedul-
ing. These threads may run in parallel and trap into the guest OS
simultaneously. Therefore, by using the base addresses of their ker-
nel stacks as the identiﬁers, the transit module can distinguish each
of them, and save/restore the respective contexts.
5. SYSTEM CALL MEDIATION
The system call from CAP to the guest kernel reveals some ap-
plication data when they are passed to the kernel as parameters.
AppShield provides a spatial-temporal protection [9] for the data
involved in the system call. It ensures that the guest OS can only ac-
cess the authorized data (spatial protection) during the execution of
the system call (temporal protection). The previous sections have
7
In the majority of system calls, the application information needed
by the kernel, if any, is passed as parameters and there is no need
for the kernel to access the application address space. These calls
are not adapted in AppShield.
Nonetheless, system calls with parameters of the pointer type
(e.g., a pointer pointing to the ﬁle name in open), requires the kernel
to access the application’s space to acquire needed information. In
order to prevent the kernel misuse such accesses, it is desirable to
adapt those system calls with parameter marshaling.
To ensure spatial protection, two approaches of parameter mar-
shaling have been proposed in the literature. One approach as used
in [6] is to interact with the hypervisor eight times to safely move
the decrypted data into a newly allocated shared/public buffer. Ob-
viously, the multiple round interaction with the hypervisor is detri-
mental to the system performance. The other approach as in [9]
incurs less context switches as it decrypts the data and overwrites
the cipher text using the same buffer. Nonetheless, both approaches
use encryption algorithms which consume an order of magnitude
more CPU cycles than conventional system calls. Therefore, the
performance deteriorates signiﬁcantly when CAP frequently issues
system calls. We summarize the performance cost of the parameter
marshaling in a system call in these two approaches (i.e., Over-
shadow and SecureME) together with our scheme in Table 1.
OverShadow [6]
SecureME[9], InkTag[17]
AppShield
Crypto.
Opera-
tions
yes
yes
no
Data
Move-
ment
yes
yes
yes
Context
Switch
(#)
8
2
2
Table 1: The time cost of the parameter marshaling in a system
call. Our scheme is relatively efﬁcient because we give up the
costly cryptographic operations and reduce the switch times.
In our scheme, the trusted shim creates a shared region in its
user space, and issues a hypercall to inform the hypervisor that the
shared region is accessible for the guest OS. In this way, the guest
OS can only access the data within the shared region, but cannot
access any other regions within the user space of the CAP.
To adapt system calls, we develop the shim code with the seman-
tics of each system call, i.e. the parameter semantics and the return
values. In addition, the semantics also includes the data ﬂow direc-
tion, i.e. whether the memory buffer referred to by the parameter
is to receive data from the guest kernel, or store the data to be sent
out to the kernel.
Speciﬁcally, for the data that the CAP attempts to send out, the
shim simply copies the data into a buffer allocated in the shared
region, and updates the corresponding parameter to refer to the new
buffer. To receive data from the guest OS, the shim should reserve
a buffer in the shared region. The shim then saves the base address
of the original buffer, and updates the corresponding parameter to
refer to the reserved one. When the system call returns, the shim
copies the received data into the original buffer and continues the
execution.
Exit Gate 1.Save the context 2.Prepare dummy context 3.Issue hypercall to switch address space Entry Gate OS Execution 1.Issue hypercall to switch address space 2.Restore the original context 3.Continue the previous execution 351Conﬁgurations
CPU
Memory
Network Card
Disk
OS
Descriptions
Intel i7-2600 with 3.40GHZ
3GB DDR3 1333MHZ
Intel Device 1502 with 1Gbps
ATA 7200RPM
Ubuntu 10.04 with Kernel 2.6.32.59
Table 2: The conﬁgurations of the experiment machine.
5.2 System Call Emulation
There are several system calls whereby the system call adaption
technique is not applicable to resolve the conﬂict between the sys-
tem call service and the security requirement. Speciﬁcally, such
system calls are not designed for exchanging data. Instead, they
are used to introspect or manipulate the application by accessing
or modifying its internal state. For such system calls, we have to
emulate them in the transit module.
The fast user mutex system call (futex) allows an application to
wait for a value at a given address, and to wake up other applica-
tions waiting on a particular address. The handler of futex not only
directly accesses the process’s space, but also binds some informa-
tion (e.g., a hash bucket) with the address. Therefore, the system
call adaption technique described previous leads to the failure of
futex as the information is bound to an incorrect address.