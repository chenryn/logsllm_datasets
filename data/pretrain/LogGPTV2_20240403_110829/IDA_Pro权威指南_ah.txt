IDA 针对OS X和Linux系统的 GUI 版本和控制台版本的名称分别为 idaq 和idal 。上述控制台版本的外观与 IDA 的Windows 控制台版本（如图 3-2 所示）的外观非常相似。Linux用户可能需要验证（使用 ldd
 ）IDA 所需的各种共享库能否在他们的系统中使用。需要特别指出的是，使用插件IDAPython 时，需要安装 Python 2.6。在必要时，你可能需要升级 Python 或创建符号链接以满足IDA 的要求。
图3-2 IDA Pro 的控制台版本
3.4.3 IDA 与SELinux
如果你是一名 Linux用户，并且已启用 SELinux，在尝试加载所需的处理器模块时，你可能会发现IDA 显示错误消息：“无法将可执行栈作为共享对象启用。”使用 execstack
 命令可以在每个模块的基础上解决这个问题，如下所示：
execstack -c /procs/pc.ilx
3.4.4 32位IDA 与64位IDA
IDA 高级版本的用户可能会注意到，每个 IDA 可执行文件都包括两个版本，如 idag.exe 与idag64.exe ，或者 idaq 与idaq64 。这两个版本之间的区别在于：idax64 能够反汇编 64 位代码，而所有IDA 可执行文件本身为 32位代码。因此，在 64 位平台上运行 IDA 的用户需要确保 IDA 所需的任何支持软件可用在 32 位版本中。例如，如果 64 位Linux用户希望使用 IDAPython 以提供脚本支持，则必须安装 32 位版本的 Python 。有关结合使用 32 位与64位软件的详细信息，请查阅操作系统文档。
3.4.5 IDA 目录的结构
在开始使用 IDA 之前，你不一定需要熟悉 IDA 安装目录的结构。但是，既然现在讨论的主题是安装IDA ，还是初步了解一下安装目录的基本结构。在本书的后续章节，我们将介绍IDA的高级功能，到那时，了解 IDA 安装目录的结构将变得更加重要。下面简要介绍 IDA 安装目录中的各个子目录（对于 Windows 和Linux用户，这些子目录位于 下；对于 OS X用户，这些子目录可能位于/idag.app/Contents/MacOS 下）。
cfg
 。cfg 目录包含各种配置文件，包括基本IDA 配置文件 ida.cfg 、GUI 配置文件 idagui.cfg以及文本模式用户界面配置文件 idatui.cfg 。我们将在第 11 章介绍IDA 的一些更加重要的配置功能。
idc
 。idc 目录包含 IDA 的内置脚本语言 IDC 所需的核心文件。我们将在第 15 章详细介绍如何使用 IDC 编写脚本。
ids
 。ids 目录中包含一些符号文件（IDA 语法中的IDS 文件），这些文件用于描述可被加载到IDA 的二进制文件引用的共享库的内容。这些 IDS 文件包含摘要信息，其中列出了由某一个指定库导出的所有项目。这些项目包含描述某个函数所需的参数类型和数量的信息、函数的返回类型（如果有）以及与该函数的调用约定有关的信息。
loaders
 。loaders 目录包含在文件加载过程中用于识别和解析 PE或ELF 等已知文件格式的IDA 扩展。我们将在第 18 章详细介绍 IDA 加载器。
plugins
 。plugins 目录包含专门为 IDA 提供附加功能（多数情况下由用户定义）的 IDA 模块。我们将在第 17 章重点讨论 IDA 插件。
procs
 。procs目录包含已安装的 IDA 版本所支持的处理器模块。处理器模块为 IDA 提供机器语言—汇编语言转换功能，并负责生成在 IDA 用户界面中显示的汇编语言。我们将在第19 章详细介绍 IDA 处理器模块。
sig
 。sig目录包含 IDA 在各种模式匹配操作中利用的现有代码的签名。通过模式匹配，IDA能够将代码序列确定为已知的库代码，从而节省大量的分析时间。这些签名由IDA 的“快速的库识别和鉴定技术”（FLIRT ）生成，这一内容将在第 12 章详细介绍。
til
 。til 目录包含一些类型库信息，IDA 通过这些信息记录特定于各种编译器库的数据结构的布局。我们将在第 13 章详细介绍如何定制 IDA 类型库。
3.5 IDA 用户界面
IDA 从MS-DOS 继承的特性至今仍然十分明显。无论使用哪一种界面（文本界面或 GUI ），IDA 都大量用到热键。虽然这并非坏事，但是，如果你想当然地认为自己正使用文本输入模式，并且发现几乎每一次击键都会导致相当意外的后果，那就说明 IDA 执行了某种热键操作。例如，在使用GUI 时，如果你定位光标以进行修改，并且希望你输入的内容全部出现在光标位置，这时就可能会出现令人意外的情况（IDA 可不像字处理程序）。
从数据输入的角度看，IDA 通过对话框接受几乎所有输入。因此，如果你希望在 IDA 中输入任何数据，则必须调出输入数据的对话框。IDA 的十六进制编辑功能是个例外，该功能只能通过Hex View 窗口获得。
最后，需要记住的是：IDA 不提供撤销功能
 ！因此，如果不小心按下一个键，启动了一项热键操作，请不要浪费时间在 IDA 的菜单中寻找撤销功能，因为你根本找不到。同样，你也无法找到命令历史记录列表，以查明你刚刚执行的操作。
3.6 小结
了解IDA 的基本信息之后，是使用 IDA 实现某种有用的目标的时候了。在接下来的几章中，你将了解如何使用 IDA 进行基本的文件分析，学习如何读懂 IDA 显示的数据，以及如何通过这些数据深入理解程序的功能。
第二部分 IDA基本用法
本部分内容：
第4章 IDA入门
第5章 IDA数据显示窗口
第6章 反汇编导航
第7章 反汇编操作
第8章 数据类型与数据结构
第9章 交叉引用与绘图功能
第10章 IDA的多种面孔
第4章 IDA入门
现在到了实际使用 IDA 的时候了。本书的剩余部分将介绍 IDA 的各种功能，以及如何利用它们来满足用户的逆向工程需求。本章首先介绍启动 IDA 后会看到的各种选项，其次说明如何打开二进制文件并开始分析过程。最后简要介绍 IDA 的用户界面，为学习后面的几章打下基础。
为规范统一，本章及本书其他部分的示例都将采用 Windows QtGUI 界面，除非某个示例需要一种特殊的 IDA 版本（如 Linux调试示例）。
4.1 启动IDA
只要启动 IDA ，你都会看到一个初始欢迎界面，上面显示你的许可证信息摘要。初始屏幕消失后，IDA 将显示另一个对话框，为你进入桌面环境提供 3 种选项，如图 4-1 所示。
图4-1 启动 IDA
如果不希望看到欢迎信息，可以取消选中该对话框底部的Display at startup（启动时显示）复选框。如果选中这个复选框，将来启动IDA 时，IDA 会认为你已经单击了 Go按钮，因而直接进入一个空白的 IDA 工作区。如果在某个时候，你希望再次使用欢迎对话框（毕竟，它可以方便地返回最近使用过的文件），你可以编辑IDA 的注册表项，将 DisplayWelcome
 的值设为 1 即可。还可以选择 Windows▶Reset hidden message ，这将显示之前隐藏的所有
 信息。
说明
  在Windows 上安装IDA 时，IDA 会创建注册表项 HKEY_CURRENT_USER\Software\ Hex-Rays\IDA
1
 。许多可以在 IDA 中配置（而非编辑某个配置文件）的选项都保存在这个注册表项内。但是，在其他平台中，IDA 将这些值存储在一个无法直接编辑的二进制文件（$HOME/.idapro/ida.reg ）中。
1. 较低版本的IDA 使用HKEY_CURRENT_USER\Software\Datarescue\IDA
 。
图4-1 所示的3 个选项进入IDA 桌面的方式略有不同，下面简单说明。
New （新建）
 。选择New 将启动一个标准的 File Open对话框来选择将要分析的文件。根据选择的文件，IDA 会显示另外一个或多个对话框，你可以选择特定的文件分析选项，然后再加载、分析和显示该文件。
Go（运行）
 。Go按钮终止加载过程，使 IDA 打开一个空白的工作区。这时，如果要打开一个文件，可以将一个二进制文件直接拖放到 IDA 工作区，或者使用 File 菜单中的某个选项打开该文件。前面介绍过，使用 File▶New 命令可启动 File Open对话框。默认情况下，IDA 会利用已知扩展名
 的过滤器限制 File 对话框的显示。请确保修改或清除该过滤器（如选择 All Files），以便 File 对话框正确显示你想要打开的文件2
 。以这种方式打开文件时，IDA 会尝试自动识别选定文件的类型。但是，要特别注意Loading对话框，看 IDA 选择了哪个加载器来处理这个文件。
2. 在非Windows 系统中，可执行文件没有扩展名的情况并不少见。
Previous （上一个）
 。使用Previous 按钮可以打开其下“最近用过的文件”列表中的一个文件。“最近用过的文件”列表中包含IDA 的Windows 注册表项的 History
 子项中的值。最初这个历史记录列表的最大长度设为 10 ，但你可以编辑 idagui.cfg或idatui.cfg 文件中的相应项目，将这一限制升高到 100（参见第 11 章）。要想重新处理最近用过的数据库文件，使用这个历史记录列表是最方便的选择。
4.1.1 IDA 文件加载
使用File▶Open命令打开一个新文件时，会看到如图 4-2 所示的加载对话框。IDA 会生成一个可能的文件类型列表，并在对话框顶部显示这个列表。这个列表中将显示最适合处理选定文件的IDA 加载器。IDA 通过执行 loaders 目录中的每一个文件加载器3
 ，来确定能够识别新文件的加载器，从而建立了这个列表。注意，在图 4-2 中，Windows PE加载器（pe.ldw ）和 MS-DOS EXE加载器（dos.ldw）均声称它们能够识别选定的文件。对此，熟悉 PE文件格式的读者并不会感到惊奇，因为 PE文件格式是 MS-DOS EXE文件格式的扩展形式。Binary File（二进制文件）是这个列表中的最后一个选项，它会一直显示，因为它是 IDA 加载无法识别的文件的默认选项，它提供了最低级的文件加载方法。如果 IDA 提供几个加载器，这时选择默认选项倒是一个不错的策略，除非你拥有推翻 IDA 决定的信息。
3. 我们将在第18 章详细介绍IDA 加载器。
图4-2 IDA 的Load a new file对话框
有时候，Binary File是出现在加载器列表中的唯一选项。这表示没有加载器能够识别选定的文件。这时，如果你希望继续完成加载过程，请确保根据自己对文件内容的理解，选择合适的处理器类型。
在Processor Type（处理器类型）下拉菜单中可以指定在反汇编过程中使用的处理器模块（在IDA 的procs目录中）。多数情况下，IDA 将根据它从可执行文件的头中读取到的信息，选择合适的处理器。如果 IDA 无法正确确定与所打开的文件关联的处理器类型，在继续文件加载操作前，你必须手动选择一种处理器类型。
如果你同时选择了二进制文件输入格式和一种x86 系列处理器，Loading Segment （加载段）和Loading Offset（加载偏移量）字段将处于活动状态。由于二进制加载器无法提取任何内存布局信息，在这里输入的段和偏移量值将共同构成所加载文件内容的基址。在最初的加载过程中，如果忘记指定基址，可以在任何时候使用Edit▶Segments▶Rebase Program命令来修改 IDA 镜像的基址。
Kernel Options（核心选项）按钮用于配置特定的反汇编分析选项，IDA 可利用这些选项改进递归下降过程。绝大多数情况下，默认选项提供的都是最佳的反汇编选项。另外，IDA 帮助文件提供了其他与可用核心选项有关的信息。
Processor Options（处理器选项）按钮用来选择适用于选中的处理器模块的配置选项，但它不一定对每个处理器模块有效。它只能为反汇编过程提供有限的帮助，因为这些选项非常依赖于用户选定的处理器模块，以及模块创建者的编程能力。
其他选项复选框可帮助用户更好地控制文件加载过程。IDA 的帮助文件详细介绍了这里的每一个选项。这些选项并不适用于所有输入文件类型，多数情况下，用户可以使用 IDA 的默认设置。我们将在第 21 章介绍需要修改这些选项的特殊情况。
4.1.2 使用二进制文件加载器
如果选择使用二进制加载器，需要比平常做更多的工作。由于没有文件头信息引导分析过程，你必须手动执行通常由更加强大的加载器自动完成的任务。需要使用二进制加载器的情形包括：分析从网络数据包或日志文件中提取出来的 ROM镜像和破解程序负载。
如果同时选择 x86 处理器模块和二进制加载器，将会显示如图 4-3 所示的对话框。由于 IDA无法获得可用的文件头信息，用户需要指定是将代码作为 16 位模式代码，还是作为 32 位模式代码处理。IDA 还能够为 ARM和MIPS等处理器区分 16 位与32位模式。
图4-3 x86 模式选择
二进制文件并不包含有关内存布局的信息（也就是说，至少不提供 IDA 能够识别的信息）。前面介绍过，如果选择一个x86 类型的处理器，则必须在加载器对话框的Loading Segment 和Loading Offset 字段中指定基址信息。对于所有其他类型的处理器，IDA 会显示如图 4-4 所示的内存布局对话框。为了方便，可以创建一个 RAM块或一个 ROM块，或者同时创建这两个块，并指定每个块的地址范围。Input File 选项用来指定应加载输入文件的哪一个部分（默认为整个文件），以及文件内容所对应的地址。
图4-4 内存组织对话框
图4-5 显示的是加载二进制文件的最后一个步骤：一个友善的提醒——你需要做一些工作。图中的消息表明一个事实：IDA 没有可用的文件头信息帮助它区分二进制文件中的代码字节和数据字节。这时，IDA 会提醒用户指定文件中的一个地址作为入口点，告诉 IDA 将这个地址的字节转换成代码（C 是用于强制 IDA 将字节作为代码处理的热键）。对于二进制文件，IDA 不会进行任何初始反汇编，除非你至少确定了一个代码字节。
图4-5 二进制文件加载
4.2 IDA 数据库文件
选择加载选项，单击 OK按钮关闭对话框后，加载文件的工作才真正开始。这时，IDA 的任务是将选定的可执行文件加载到内存中，并对相关部分进行分析。随后，IDA 会创建一个数据库，其组件分别保存在4 个文件中，这些文件的名称与选定的可执行文件的名称相同，扩展名分别为.id0 、.id1 、.nam 和.til。.id0 文件是一个二叉树形式的数据库，.id1 文件包含描述每个程序字节的标记。.nam 文件包含与IDA 的Names 窗口（将在第 5 章详细介绍）中显示的给定程序位置有关的索引信息。最后，.til文件用于存储与一个给定数据库的本地类型定义有关的信息。这些文件的格式为 IDA 专用，在 IDA 环境以外很难对它们编辑。
为了方便，在你关闭当前项目时，这4 个文件将被存档，你还可以选择将它们压缩成一个IDB文件。通常，人们说到 IDA 数据库时实际上指的是 IDB 文件。一个未压缩的数据库文件的大小一般是最初输入的二进制文件的 10 倍。如果数据库正常关闭，你绝不会在工作目录中看到扩展名为.id0 、.id1 、.nam 或.til 的文件。如果工作目录中存在这些文件，则往往表示数据库被意外关闭（例如，IDA 崩溃），这时数据库可能被损坏。
加载器警告
加载器开始分析文件后，用户可能需要输入额外的信息，以完成加载过程。例如，使用PDB 调试信息创建的 PE文件。如果 IDA 发现一个程序数据库（Program Database, PDB ）文件，它会显示以下消息，询问你是否希望定位并处理相应的 PDB 文件。
“IDA Pro 已确认输入文件链接有调试信息，你希望在本地符号存储区及 Microsoft Symbol Server 中寻找相应的 PDB 文件吗？”
另外，在分析恶意软件等模糊程序时，加载器也会生成一些消息。通常，模糊技术并不严格遵循文件格式规范，如果加载器希望处理结构完整的文件，这时就会造成问题。为此，PE加载器会对导入表进行某种形式的验证，如果发现导入表没有根据约定进行格式化，IDA 将显示以下消息。
导入的文件似乎遭到破坏。这说明该文件可能被压缩或经过修改，以阻止人们对其分析。如果你希望看到原始的导入文件，请取消选择 make imports section（创建导入节）复选框，重新加载该文件。
我们将在第 21 章讨论这些错误示例及其处理方法。
值得注意的是，一旦IDA 为某个可执行文件创建数据库，它就不再需要访问这个可执行文件，除非你希望使用IDA 的集成调试器调试这个可执行文件本身。从安全角度看，这是一项有用的功能。例如，在分析一个恶意软件样本时，只需在分析人员之间传递相关数据库，而不必传递可执行的恶意文件本身。使用IDA 数据库作为恶意软件的攻击向量，这样的案例尚未出现。
就本质而言，IDA 不过是一个数据库应用程序。分析可执行文件时，IDA 会自动创建和填充新的数据库。IDA 提供的各种显示不过是各种数据库视图，以一种有利于软件逆向工程的格式发布相关信息。用户对数据库所做的任何修改都会在这些视图中反映出来，并随数据库一起保存，但这些更改并不会影响原始的可执行文件。IDA 的强大之处在于，它包含各种可用于分析和操作数据库数据的工具。
4.2.1 创建IDA 数据库
在你选择一个准备分析的文件并指定选项之后，IDA 将开始创建数据库。在这个过程中，IDA 会将控制权转交给你选定的加载器模块，该模块的工作包括：从磁盘加载文件，解析它能够识别的任何文件头信息，创建各种包含代码或数据（在文件头中指定）的程序块，最后在将控制权返还IDA 之前确定特定的代码入口点。在这方面，IDA 加载器模块的行为类似于操作系统加载器。IDA 加载器将根据程序文件头包含的信息，确定一个虚拟内存布局，并对数据库进行相应的配置。
加载器完成工作后，IDA 内的反汇编引擎将接管控制权，一次传一个地址给选定的处理器模块。处理器模块的工作包括：确定位于该地址的指令的类型、长度，以及从这个地址继续执行指令的位置（例如，是当前的指令序列还是分支）。如果 IDA 认为它已经找到了文件中的所有指令，它会第二次遍历指令地址列表，并请处理器模块将每个指令转换成汇编语言，然后将它们显示出来。
在这个反汇编完成之后，IDA 将自动对二进制文件进行额外的分析，以提取出其他可能对分析人员有用的信息。在IDA 完成初始分析后，用户可能会在数据库中发现以下一些或全部信息。
编译器识别
 。通常，了解构建软件所使用的编译器会对我们有所帮助。识别所使用的编译器可帮助我们了解二进制文件使用的函数调用约定，并确定该二进制文件链接到哪些库。在加载文件时，IDA 会尝试确定用于创建输入文件的编译器。如果能够确定编译器，就可以在输入文件中扫描该编译器使用的样板代码序列，然后，将这些代码以彩色显示，以减少需要分析的代码的数量。
函数参数和局部变量识别
 。对于每一个已识别的函数（其地址是调用指令的目标），IDA会详细分析栈指针寄存器的行为，以确定栈内的变量，并了解函数栈帧1
 的布局。然后，IDA 会根据这些变量的用途（作为函数中的局部变量，或者在函数调用过程中作为传递给函数的参数），自动为它们生成名称。
1. 第6 章将详细介绍栈帧。
数据类型信息
 。利用对公共库函数及其所需参数的了解，IDA 会在数据库中添加注释，以指明向这些函数提交参数的位置。由于这些注释提供了需要检索各种 API 参考资料才能获得的信息，因此，它们可为分析人员节省大量时间。
4.2.2 关闭IDA 数据库
任何时候你关闭一个数据库，无论你是完全关闭 IDA ，还是切换到另一个数据库，IDA 都将显示一个 Save database （保存数据库）对话框，如图 4-6 所示。
图4-6 Save database 对话框
如果这是你初次保存一个新建的数据库，IDA 会用扩展名.idb 替换输入文件的扩展名，从而生成新数据库的文件名，例如，example.exe会生成名为 example.idb 的数据库。如果输入文件没有扩展名，IDA 会将.idb 附加到输入文件名称后面，构成数据库名称，如 httpd生成httpd.idb 。下面简要说明可用的保存选项及其意义。
Don’t pack database （不打包数据库）
 。这个选项仅仅刷新对 4 个数据库组件文件所做的更改，在关闭桌面前并不
 创建 IDB 文件。在关闭数据库时，不建议
 使用这个选项。
Pack database （Store）［打包数据库（存储）］
 。选择 Store选项会将4 个数据库组件文件存到一个 IDB 文件中。之前的任何 IDB 不经确认即被覆盖。Store选项不使用压缩。创建IDB 文件后，4 个数据库组件文件即被删除。
Pack database （Deflate）［打包数据库（压缩）］
 。Deflate 选项等同于Store选项，其唯一的差别在于数据库组件文件被压缩到 IDB 归档文件中。
Collect garbage （收集垃圾）
 。如果请求垃圾收集，IDA 会在关闭数据库之前，从数据库中删除任何没有用的内存页面。在选择这个选项的同时，选择 Deflate 选项可创建尽可能小的IDB 文件。通常，只有在磁盘空间不足时才选择这个选项。
DON’T SAVE the datebase （不保存数据库）
 。你可能会感到奇怪，怎么会有人不保存自己的工作呢！要知道，要想放弃你当前对数据库所做的更改（上次保存之后），使用这个选项是唯一的办法。选择这个选项时，IDA 会删除4 个数据库组件文件，保留现有的未经修改的IDB 文件。使用这个选项类似于在使用 IDA 时应用了撤销或还原功能。
4.2.3 重新打开数据库
事实上，重新打开一个现有的数据库根本与“火箭科学”（指很难做、很难懂的事情）无关2
 。因此，你可能会问，为什么还要讨论这个主题呢？正常情况下，要想重新打开现有数据库，只需使用IDA 的文件打开方法来选择数据库。通常，由于 IDA 不需要分析，在第二次（及随后）打开数据库文件时，它的运行速度会更快。而且，IDA 会将桌面恢复到它上次关闭时的状态。
2. 除非你打开的恰巧是rocket_science.idb 。
问题是：IDA 会不时崩溃，信不信由你。导致崩溃的原因，要么是 IDA 本身有bug，或者是你所安装的某个“风险”插件中有 bug，崩溃可能会令打开的数据库遭到破坏。一旦你重启 IDA并尝试再次打开受影响的数据库，IDA 可能会显示如图 4-7 和图4-8 所示的对话框。
图4-7 恢复数据库的对话框
图4-8 修复数据库的对话框
IDA 崩溃时，IDA 并没有机会关闭处于活动状态的数据库，也无法删除中间文件。如果你并不是第一次处理某个数据库，这可能会导致 IDB 文件和可能遭到破坏的中间文件并存。IDB 文件是你上次保存的、状态良好的数据库文件，而中间文件则包含上次保存后你做的任何更改。在这种情况下，可以选择还原上次保存的版本，或依旧使用已打开的、可能遭到破坏的版本，如图4-7所示。选择 Continue with Unpacked base （继续使用未打包的库）并不能保证可以恢复你所做的全部更改。未打包的数据库可能已遭到破坏，这会促使IDA 显示如图 4-8 所示的对话框。这时，IDA会建议你还原已打包的数据。如果你选择使用已修复的数据库，请考虑清楚其可能导致的后果。
另外，如果一个处于活动状态的数据库从未被保存过，IDA 崩溃时系统中仅存在中间文件，这时也会显示如图 4-8 所示的对话框。在这种情况下，当你再次打开原始的可执行文件时，IDA将提供修复选项。
4.3 IDA 桌面简介
你将大量用到 IDA 桌面，应该花时间熟悉一下它的各种组件。IDA 的默认桌面如图 4-9 所示。我们将在下一节讨论桌面在分析文件时的各种行为。
我们将介绍以下区域。