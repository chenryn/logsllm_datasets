        /* It looks like we're on schedule. */  
        return true;  
}  
```
简单粗暴的解决办法，修改代码如下：  
vi src/backend/postmaster/checkpointer.c  
```
/*  
 * IsCheckpointOnSchedule -- are we on schedule to finish this checkpoint  
 *               in time?  
 *  
 * Compares the current progress against the time/segments elapsed since last  
 * checkpoint, and returns true if the progress we've made this far is greater  
 * than the elapsed time/segments.  
 */  
static bool  
IsCheckpointOnSchedule(double progress)  
{  
        XLogRecPtr      recptr;  
        struct timeval now;  
        double          elapsed_xlogs,  
                                elapsed_time;  
        Assert(ckpt_active);  
        /* Scale progress according to checkpoint_completion_target. */  
        progress *= CheckPointCompletionTarget;  
        /*  
         * Check against the cached value first. Only do the more expensive  
         * calculations once we reach the target previously calculated. Since  
         * neither time or WAL insert pointer moves backwards, a freshly  
         * calculated value can only be greater than or equal to the cached value.  
         */  
        if (progress < ckpt_cached_elapsed)  
                return false;  
        /*  
         * Check progress against WAL segments written and checkpoint_segments.  
         *  
         * We compare the current WAL insert location against the location  
         * computed before calling CreateCheckPoint. The code in XLogInsert that  
         * actually triggers a checkpoint when checkpoint_segments is exceeded  
         * compares against RedoRecptr, so this is not completely accurate.  
         * However, it's good enough for our purposes, we're only calculating an  
         * estimate anyway.  
         */  
        if (!RecoveryInProgress())  
        {  
                if (!fullPageWrites)  
                {  
                    recptr = GetInsertRecPtr();  
                    elapsed_xlogs = (((double) (recptr - ckpt_start_recptr)) / XLogSegSize) / CheckPointSegments;  
                    if (progress < elapsed_xlogs)  
                    {  
                        ckpt_cached_elapsed = elapsed_xlogs;  
                        return false;  
                    }  
                 }  
        }  
        /*  
         * Check progress against time elapsed and checkpoint_timeout.  
         */  
        gettimeofday(&now, NULL);  
        elapsed_time = ((double) ((pg_time_t) now.tv_sec - ckpt_start_time) +  
                                        now.tv_usec / 1000000.0) / CheckPointTimeout;  
        if (progress < elapsed_time)  
        {  
                ckpt_cached_elapsed = elapsed_time;  
                return false;  
        }  
        /* It looks like we're on schedule. */  
        return true;  
}  
```
```
# gmake && gmake install  
```
重新测试：  
```
pg_ctl restart -m fast  
```
检查点发生时的tps：  
```
progress: 291.0 s, 63144.9 tps, lat 0.426 ms stddev 0.383  
progress: 292.0 s, 55063.7 tps, lat 0.480 ms stddev 1.433  
progress: 293.0 s, 12225.3 tps, lat 2.238 ms stddev 4.460  
progress: 294.0 s, 16436.4 tps, lat 1.621 ms stddev 4.043  
progress: 295.0 s, 18516.5 tps, lat 1.444 ms stddev 3.286  
progress: 296.0 s, 21983.7 tps, lat 1.251 ms stddev 2.941  
progress: 297.0 s, 25759.7 tps, lat 1.034 ms stddev 2.356  
progress: 298.0 s, 33139.4 tps, lat 0.821 ms stddev 1.676  
progress: 299.0 s, 41904.9 tps, lat 0.644 ms stddev 1.134  
progress: 300.0 s, 52432.9 tps, lat 0.513 ms stddev 0.470  
progress: 301.0 s, 57115.4 tps, lat 0.471 ms stddev 0.325  
progress: 302.0 s, 59422.1 tps, lat 0.452 ms stddev 0.297  
progress: 303.0 s, 59860.5 tps, lat 0.449 ms stddev 0.309  
```
stap跟踪结果：  
```
checkpoint start  
----------------------------------end-----------------------------  
buffer__sync__start num_buffers: 262144, dirty_buffers: 156761  
r1_or_w2 2, pid: 22334, min: 51, max: 137, avg: 60, sum: 52016, count: 860  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 108, avg: 58, sum: 35526, count: 604  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 145, avg: 71, sum: 39779, count: 559  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 52, max: 172, avg: 79, sum: 47279, count: 594  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 44, max: 160, avg: 63, sum: 36907, count: 581  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 113, avg: 61, sum: 33895, count: 552  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 116, avg: 61, sum: 38177, count: 617  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 113, avg: 62, sum: 34199, count: 550  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 53, max: 109, avg: 65, sum: 39842, count: 606  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 50, max: 118, avg: 64, sum: 35099, count: 545  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 50, max: 107, avg: 64, sum: 39027, count: 606  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 51, max: 114, avg: 62, sum: 34054, count: 545  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 47, max: 106, avg: 63, sum: 38573, count: 605  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 48, max: 101, avg: 62, sum: 38051, count: 607  
----------------------------------end-----------------------------  
r1_or_w2 2, pid: 22334, min: 42, max: 103, avg: 61, sum: 33596, count: 545  
......  
```
现在写buffer已经比较均匀了，但是我们看到虽然现在checkpointer写BUFFER是均匀的，但是pgbench在checkpoint开始的前10秒左右还是有非常剧烈的性能下降然后逐渐上升。  
因为我们这里只看到检查点写BUFFER带来的IO影响，其实性能下降还有其他因素在里面，这里先不阐述，和xlog有关，后面再写。  
如果你的系统IO比较差，并且要使用异步XLOG提交的话，在做检查点时可能受到IO影响较大，建议你调整一下这部分代码，同时加大target参数，但是建议不超过0.9，最好是调整后观察IO影响会不会降低，降低到不影响业务为宜。  
为什么checkpoint后使用WAL调度会导致不均匀呢？或者说为什么wal会更快，因为我们这里使用的压力测试用例是大量的更新，checkpoint后会产生较多的wal full page write(如果你设置了full_page_writes=on)，所以另一种调教方法是，当打开了full page write, 给wal加一个指数来均衡，这个指数是一个经验值，所以也不是非常完美，个人还是比较偏向直接用时间来调度。  
```
		/*  
		 * Immediately after a checkpoint, a lot more WAL is generated when  
		 * full_page_write is enabled, because every WAL record has to include  
		 * a full image of the modified page. It levels off as time passes and  
		 * more updates fall on pages that have already been modified since  
		 * the last checkpoint.  
		 *  
		 * To correct for that effect, apply a corrective factor on the  
		 * amount of WAL consumed so far.  
		 */  
		if (fullPageWrites)  
			elapsed_xlogs = pow(elapsed_xlogs, 1.5);  
```
从另一个角度来看，XLOG产生速度越快，对IO的需求量越大，这个时候如果要降低checkpointer write buffer对IO的争抢，应该sleep才对，但是现有的策略是xlog产生速度越快，checkpointer write buffer也越多。所以单纯从时间角度来均衡checkpointer的写buffer可能比较靠谱。或者有好的算法可以做到产生XLOG越快的时候，让checkpointer尽量休息，而产生XLOG少的时候，让checkpointer快点写。  
## 参考
1\. src/backend/postmaster/checkpointer.c  
2\. http://blog.163.com/digoal@126/blog/static/163877040201542103933969/  
3\. http://blog.163.com/digoal@126/blog/static/1638770402015463252387/  
4\. http://blog.163.com/digoal@126/blog/static/16387704020154651655783/  
5\. http://blog.163.com/digoal@126/blog/static/16387704020154653422892/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")