If you use dynamically provisioned Docker slaves, then there is no mature Docker image provided yet. You can build it yourself or use the `leszko/jenkins-docker-slave` image. You also need to mark the `privileged` option in the Docker agent configuration. This solution, however, has some drawbacks, so before using it in production, read the [http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/](http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/).
# Docker 建造阶段
我们希望将计算器项目作为 Docker 容器运行，因此我们需要创建 Dockerfile 并将`"Docker build"`阶段添加到 Jenkinsfile 中。
# 添加 Dockerfile
让我们在计算器项目的根目录下创建 Dockerfile:
```
FROM frolvlad/alpine-oraclejdk8:slim
COPY build/libs/calculator-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]
```
The default build directory for Gradle is `build/libs/`, and `calculator-0.0.1-SNAPSHOT.jar` is the complete application packaged into one JAR file. Note that Gradle automatically versioned the application using the Maven-style version `0.0.1-SNAPSHOT`.
Dockerfile 使用包含 JDK 8 ( `frolvlad/alpine-oraclejdk8:slim`)的基本映像。它还复制应用 JAR(由 Gradle 创建)并运行它。让我们检查应用是否构建并运行:
```
$ ./gradlew build
$ docker build -t calculator .
$ docker run -p 8080:8080 --name calculator calculator
```
使用前面的命令，我们已经构建了应用，构建了 Docker 映像，并运行了 Docker 容器。过一会儿，我们应该可以打开浏览器到`http://localhost:8080/sum?a=1&b=2`看到`3`结果了。
我们可以停止容器并将 Dockerfile 推送到 GitHub 存储库:
```
$ git add Dockerfile
$ git commit -m "Add Dockerfile"
$ git push
```
# 将 Docker 构建添加到管道中
我们需要的最后一步是将`"Docker build"`阶段添加到 Jenkins 文件中。通常，JAR 包装也被声明为单独的`Package`阶段:
```
stage("Package") {
     steps {
          sh "./gradlew build"
     }
}
stage("Docker build") {
     steps {
          sh "docker build -t leszko/calculator ."
     }
}
```
We don't explicitly version the image, but each image has a unique hash ID. We will cover the explicit versioning in the next chapter.
请注意，我们在映像标签中使用了 Docker 注册表名称。不需要将映像标记两次`calculator `和`leszko/calculator`。
当我们提交并推送 Jenkins 文件时，管道构建应该会自动开始，我们应该会看到所有的框都是绿色的。这意味着 Docker 映像已经成功构建。
There is also a Gradle plugin for Docker that allows executing the Docker operations within Gradle scripts. You can see an example at: [https://spring.io/guides/gs/spring-boot-docker/](https://spring.io/guides/gs/spring-boot-docker/).
# Docker 推送阶段
当映像准备好了，我们可以将其存储在注册表中。`Docker push`阶段很简单。将以下代码添加到 Jenkinsfile 中就足够了:
```
stage("Docker push") {
     steps {
          sh "docker push leszko/calculator"
     }
}
```
If Docker registry has the access restricted, then first we need to log in using the `docker login` command. Needless to say, the credentials must be well secured, for example, using a dedicated credential store as described on the official Docker page: [https://docs.docker.com/engine/reference/commandline/login/#credentials-store](https://docs.docker.com/engine/reference/commandline/login/#credentials-store).
像往常一样，将更改推送到 GitHub 存储库会触发 Jenkins 开始构建，一段时间后，我们应该会将映像自动存储在注册表中。
# 验收测试阶段
要执行验收测试，首先，我们需要将应用部署到试运行环境，然后对其运行验收测试套件。
# 向管道添加临时部署
让我们添加一个运行`calculator`容器的阶段:
```
stage("Deploy to staging") {
     steps {
          sh "docker run -d --rm -p 8765:8080 --name calculator leszko/calculator"
     }
}
```
运行此阶段后，`calculator`容器作为守护程序运行，将其端口发布为`8765`，并在停止时自动删除。
# 向管道添加验收测试
验收测试通常需要运行一个专用的黑盒测试套件来检查系统的行为。我们将在*编写验收测试*部分介绍它。目前，为了简单起见，让我们简单地通过使用`curl`工具调用 web 服务端点并使用`test`命令检查结果来执行验收测试。
在项目的根目录下，我们创建`acceptance_test.sh`文件:
```
#!/bin/bash
test $(curl localhost:8765/sum?a=1\&b=2) -eq 3
```
我们用参数`a=1`和`b=2`调用`sum`端点，并期望收到`3`响应。
然后，`Acceptance test`阶段可以如下所示:
```
stage("Acceptance test") {
     steps {
          sleep 60
          sh "./acceptance_test.sh"
     }
}
```
由于`docker run -d`命令是异步的，我们需要使用`sleep`操作等待，以确保服务已经在运行。
There is no good way to check if the service is already running. An alternative to sleeping could be a script checking every second whether the service has already started.
# 添加清洗台环境
作为验收测试的最后一步，我们可以添加登台环境清理。最好的方法是在`post`部分，以确保即使在失败的情况下也能执行:
```
post {
     always {
          sh "docker stop calculator"
     }
}
```
该语句确保`calculator`容器不再在 Docker 主机上运行。
# 复合 Docker
没有依赖的生活很容易。然而，在现实生活中，几乎每个应用都链接到数据库、缓存、消息传递系统或另一个应用。在(微)服务架构的情况下，每个服务都需要一堆其他服务来完成它的工作。整体架构并不能消除这个问题，应用通常有一些依赖性，至少对数据库是如此。
想象一个新人加入你的开发团队；设置整个开发环境并运行应用及其所有依赖项需要多长时间？
当谈到自动化的验收测试时，依赖问题不再仅仅是一个方便的问题，而是一个必须的问题。虽然在单元测试期间，我们可以模拟依赖关系，但是验收测试套件需要一个完整的环境。我们如何以可重复的方式快速设置它？幸运的是，Docker Compose 是一个可以提供帮助的工具。
# Docker 工作曲的是什么？
Docker Compose 是一个用于定义、运行和管理多容器 Docker 应用的工具。服务是在配置文件(YAML 格式)中定义的，可以通过一个命令一起创建和运行。
Docker Compose 使用标准的 Docker 机制编排容器，并提供了一种指定整个环境的便捷方式。
Docker Compose 附带了很多功能，最有趣的是:
*   构建一套服务
*   一起推出一套服务
*   管理单个服务的状态
*   在运行之间保留卷数据
*   向上和向下扩展服务
*   显示单个服务的日志
*   缓存配置并在运行之间重新创建已更改的容器
A detailed description of Docker Compose and its features can be found on the official page at: [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
我们展示了 Docker Compose 工具，从安装过程开始，经过 Docker-composite . yml 配置文件和`docker-compose`命令，最后是构建和缩放特性。
# 正在安装复合 Docker
安装 Docker Compose 最简单的方法是使用 pip 包管理器:
You can find the pip tool installation guide at [https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/), or for Ubuntu, at `sudo apt-get install python-pip`.
```
$ pip install docker-compose
```
要检查 Docker Compose 是否已安装，我们可以运行:
```
$ docker-compose --version
```
Installation guidelines for all operating systems can be found at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
# 定义 Docker-组合. yml
`docker-compose.yml`文件用于定义容器的配置、它们的关系和运行时属性。
换句话说，当 Dockerfile 指定如何创建单个 Docker 映像时，那么`docker-compose.yml`指定如何在 Docker 映像之外设置整个环境。
There are three versions of the `docker-compose.yml` file format. In this book, we use version 3, which is the most current and recommended. Read more at: [https://docs.docker.com/compose/compose-file/compose-versioning/](https://docs.docker.com/compose/compose-file/compose-versioning/).
`docker-compose.yml`文件有很多功能，都可以在官方页面找到:[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)。我们将在持续交付流程的背景下讨论最重要的问题。
让我们从一个例子开始，想象我们的计算器项目使用 Redis 服务器进行缓存。在这种情况下，我们需要一个有两个容器的环境，`calculator`和`redis`。在一个新的目录中，让我们创建`docker-compose.yml`文件。
```
version: "3"
services:
     calculator:
          image: calculator:latest
          ports:
               - 8080
     redis:
          image: redis:latest
```
下图显示了环境配置:
![](img/dc2fb242-79fe-404e-bce6-e057c0f11a62.png)
让我们看看这两个容器的定义:
*   **redis** :从官方 Docker Hub 中提取的最新版本`redis`映像的容器。
*   **计算器**:本地构建的最新版本`calculator`映像的容器。它将`8080`端口发布给 Docker 主机(这是`docker`命令的`-p`选项的替代)。该容器链接到`redis`容器，这意味着它们共享相同的网络，并且`redis` IP 地址在`redis`主机名下从`calculator`容器内部可见。
If we like a service to be addressed by a different hostname than its service name (for example, by redis-cache apart from redis), then we can create aliases using the links keyword.
# 使用 docker-compose 命令
`docker-compose`命令读取定义文件并创建环境:
```
$ docker-compose up -d
```
该命令在后台启动两个容器，`calculator`和`redis`(`-d`选项)。我们可以检查容器是否在运行:
```
$ docker-compose ps
 Name                   Command            State          Ports 
---------------------------------------------------------------------------
project_calculator_1   java -jar app.jar    Up     0.0.0.0:8080->8080/tcp
project_redis_1        docker-entrypoint.sh redis ... Up 6379/tcp
```
容器名称以项目名称`project`为前缀，该名称取自放置`docker-compose.yml`文件的目录的名称。我们可以使用`-p `选项手动指定项目名称。由于 Docker Compose 在 Docker 之上运行，我们还可以使用`docker`命令来确认容器正在运行:
```
$ docker ps
CONTAINER ID  IMAGE             COMMAND                 PORTS
360518e46bd3  calculator:latest "java -jar app.jar"     0.0.0.0:8080->8080/tcp 
2268b9f1e14b  redis:latest      "docker-entrypoint..."  6379/tcp
```
完成后，我们可以破坏环境:
```
$ docker-compose down
```
这个例子很简单，但是工具本身非常强大。通过一个简短的配置和一堆命令，我们可以控制所有服务的编排。在我们使用 Docker Compose 进行验收测试之前，让我们看看 Docker Compose 的另外两个特性:构建映像和缩放容器。
# 建筑映像
在前面的例子中，我们必须首先使用`docker build`命令构建`calculator`映像，然后可以在 docker-compose.yml 中指定它。还有另一种方法让 Docker Compose 构建映像。在这种情况下，我们需要在配置中指定`build`属性，而不是`image`。
让我们把`docker-compose.yml`文件放到计算器项目的目录中。当 Dockerfile 和 Docker Compose 配置在同一个目录中时，前者可以如下所示:
```
version: "3"
services:
     calculator:
          build: .
          ports:
               - 8080