### 5.1 Client-Side Manifest Handling

The client-proxy manages the rules of the origin manifest without forwarding the request to the web server. We implemented the client-proxy using mitmproxy v2.0.2 [9] as a mitmproxy add-on script, written in Python v3.5.

### 5.2 Server-Side Manifest Handling

To complement the client-proxy, we also implemented the origin manifest mechanism on the server-side. Instead of modifying the source code of any specific web server software, we chose to implement the server-side prototype as a proxy. This server-proxy is located on the server-side and intercepts and modifies traffic to the web server, as illustrated in Figure 1.

The server-proxy has three primary functions:
- Serve the origin manifest file to any web client requesting it.
- Inform web clients about the version of the latest origin manifest through the `Sec-Origin-Manifest` header.
- Strip HTTP response headers received from the web server according to the fallback section in the origin manifest to reduce bandwidth towards the web client.

Similar to the client-proxy, the server-proxy was implemented as a mitmproxy v2.0.2 [9] add-on script, written in Python v3.5.

### 5.3 Automated Manifest Generation from Observed Traffic

We developed a prototype for an automated origin manifest generator to assist security officers with creating an origin manifest. Our implementation does not use advanced AI or machine learning techniques but instead provides a pragmatic approach to offer a reasonable starting point. The manifest generator hooks into the server-proxy, observing and storing the HTTP headers for all HTTP requests and responses for the back-end web servers it proxies.

After the data collection phase, the manifest generator analyzes the observed HTTP headers and generates origin manifest files for all observed origins. The origin manifest mechanism is then activated in the server-proxy, allowing it to respond to requests related to the origin manifest, such as manifest retrieval and sending the manifest version via the `Sec-Origin-Manifest` header.

The automated generation of the manifest consists of three parts:
1. **Fallback Section Generation**: Enumerate all HTTP headers and their values that occur in a certain ratio (cutoff) of observed responses. By default, we use a cutoff value of 51%. Multiple responses for the same requested URL are counted only once, and only common headers and values are considered. Origins with fewer than a minimum number of observed HTTP responses (default: 2) are disregarded to prevent manifest creation based on a single response.
2. **Baseline and Augment-Only Sections Generation**: Combine observed security headers and values from HTTP responses using the `t` operator described in Section 4.
3. **Unsafe-CORS-Preflight-with-Credentials and CORS-Preflight Sections Generation**: Generate these sections from observed HTTP requests and their responses.

For manifest generation, we only consider headers applicable to the given origin and content-type. For example, a CSP header set on an HTTP response with a `Content-Type` other than `text/html` is ignored. Similarly, HSTS headers in HTTP responses on non-HTTPS origins are ignored.

Some HTTP headers, such as `Content-Encoding`, `Content-Type`, `Content-Length`, and `Content-Disposition`, have a significant impact on the functioning of HTTP and how resources are handled and displayed in the browser. These headers are blacklisted for automated manifest generation as they do not make sense in the context of the origin manifest.

The automated origin manifest generator is implemented as part of a mitmproxy v2.0.2 add-on script using Python v3.5.

### 5.4 Limitations and Considerations

The implementations of the client-proxy and server-proxy are fully functional but have some minor limitations:
1. **CORS Preflight Requests/Responses Differentiation**: We cannot differentiate between authenticated and unauthenticated CORS preflight requests/responses when the browser uses client-side SSL certificates for the given origin. This limitation is inherent to our setup using proxies that break the SSL tunnel. However, the use of client-side SSL certificates is not widespread on the web [31]. Implementing the origin manifest mechanism as a browser modification would not suffer from this limitation.
2. **Strict Certificate Checking**: We must disable strict certificate checking (such as HPKP) because we need to alter both HTTP and HTTPS traffic "in flight." This limitation is also intrinsic to our setup and would not be an issue if the origin manifest were implemented as a browser modification.
3. **HTTP/2 Support**: We disable HTTP/2 support in mitmproxy, which it supports by default. Our implementations work with both HTTP/2 and HTTP/1, but we do not take advantage of the improvements offered by HTTP/2 in our current prototypes.
4. **HTTPS Connections**: Our implementation does not limit itself to only HTTPS connections as required in Section 3. For this feasibility study, we are interested in seeing how the origin manifest mechanism behaves for non-HTTPS origins.
5. **Manifest Generator as a Proof of Concept**: The origin manifest generator is a proof-of-concept tool to assist origin security officers in finding a good starting point for composing a meaningful origin manifest based on currently hosted web applications. We recommend that security officers review generated origin manifests before deployment and do not advocate deploying this tool in production environments to generate origin manifests in real-time.

### 6. Evaluation

We evaluated the origin manifest mechanism and our prototypes through several experiments.

#### 6.1 Functional Evaluation

We evaluated the correctness of our implementation by manually inspecting a randomly chosen subset of the Alexa top 1 million domains and their respective websites, with and without the origin manifest.

**Setup**:
- **Interactive Phase**: Used a regular browser (Chrome version 63.0.3239.132) in incognito mode, operated by a human. We randomly selected 100 domains from the Alexa top 1 million and visited the top-most page, interacting with the web page as a typical user.
- **Visual Inspection Phase**: Used the same browser, but operated by Selenium 3.8.1 [30], to visit another 1,000 randomly selected domains. We took screenshots before and after activating the origin manifest mechanism and visually inspected them for rendering artifacts.

**Results**:
Our manual and visual inspections confirmed that our implementations work correctly. Out of the 1,100 domains visited, we encountered abnormal behavior in only three cases, which were due to insufficient learning input. The automated origin manifest learner and generator tool can be used as a good starting point, but we recommend human review to ensure correct configurations.

#### 6.2 Longitudinal Study

We define the stability of a header as the average amount of time it remains present and unchanged. The stability of HTTP headers impacts the fallback section in manifest files and their stability. Manifest files should be as stable as possible to reduce network traffic and the workload of the security officer.

**Setup**:
- We used OpenWPM [11], based on Firefox, to visit a set of 1,000 domains from the Alexa top 1 million. The domain list included the top 200 domains, 200 domains each from different ranges, and 200 random domains from the top 100,001 to 1,000,000.
- We collected all request and response headers daily between October 5th, 2017, and January 12th, 2018, for a total of 100 days.

**Results**:
- We collected 12,322,019 responses over 100 days, visiting 3,575,043 unique URLs (25,533 origins), with 20,201 URLs (3,682 origins) visited every day. We counted 2,423 different header names (case-insensitive).
- Table 2 shows a selection of popular and security headers with their frequency, stability, and size. A longer list of the top 50 most popular headers can be found in Appendix A.

From these results, we can observe:
- **Popular Headers and Security Headers**: The table includes five popular HTTP headers and all relevant security headers. We omitted highly response-dependent headers like `Date` and `Content-Type`.
- **Stability and Size**: The stability and size of headers are critical for the fallback, baseline, and augment-only sections of the origin manifest.

### Conclusion

Our evaluation confirms that the origin manifest mechanism and our prototypes function correctly and do not break web pages in unexpected ways. The longitudinal study provides insights into the stability and size of HTTP headers, which are essential for the practical application of the origin manifest.