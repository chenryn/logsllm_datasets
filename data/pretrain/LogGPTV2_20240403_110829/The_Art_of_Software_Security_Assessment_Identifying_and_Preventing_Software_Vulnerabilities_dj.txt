methods in an MTA, so it doesn't require any mechanism for handling window 
messages. Of course, this means COM method calls provide no guarantee of 
sequencing or serialization for an MTA. 
A thread must set its apartment model before calling any COM functions. This is done 
by calling CoInitializeEx(), which has the following prototype: 
HRESULT CoInitializeEx(void *pReserved, DWORD dwCoInit) 
The dwCoInit argument dictates whether the thread enters a new STA or enters the 
process's MTA. It can take the following values: 
COINIT_MULTITHREADED Indicates the thread enters the MTA. 
COINIT_APARTMENTTHREADED Indicates the thread should create a new STA. 
Of course, an in-process server has no way of knowing what model its client process 
is using, so it can't rely on CoInitializeEx() for properinitialization. In this case, the 
in-process server must specify at registration what threading models it supports, 
which is done in the registry value 
HKEY_CLASSES_ROOT\Classes\\InprocServer32\ThreadingModel. 
The in-process server can specify one of three options in this value: 
Apartment The STA model. 
Free The MTA model. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
746 
Both An STA or MTA. 
When an object is created, the COM runtime examines this registry key and tries to 
put the object in an existing MTA. If the correct apartment isn't present, COM creates 
a new one of the required type. If this value isn't present, the COM runtime assumes 
the in-process server requires the STA model. 
Threading issues come into play when more than one thread can operate on an object; 
that is, more than one thread is in the same apartment as the object. This issue 
occurs in-process when both the client and server run in an MTA; however, it can 
occur out-of-process with an MTA server accessed by more than one client of any type. 
In both cases, COM developers must make the server object thread safe because any 
number of threads can be operating on it simultaneously. 
One more important detail on COM threads is how the COM subsystem manages 
threads. Like RPC, the COM subsystem manages calls via a pool of worker threads. 
This means a call can occur on any thread, and developers can't assume that calls in 
sequence occur on the same thread. So a COM MTA can have no thread affinity, which 
means it can't make any assumptions about its thread of execution between calls. 
Threading issues in general are a complex topic, covered in depth in Chapter 13(? 
[????.]). Keep threading issues in mind when auditing COM objects in the MTA model. 
Proxies and Stubs 
COM objects can't directly call routines between different apartment models or across 
process boundaries. Instead, COM provides an IPC method in the form of proxies and 
stubs. Much like RPC requests, the COM subsystem handles calling remote 
components and marshalling data. In fact, DCOM uses the native Windows RPC 
mechanisms for its COM remoting. 
On the client side, the code that bundles the data and sends it to the server is referred 
to as an interface proxy (or sometimes just "proxy") because it looks and acts 
exactly like the real object to the caller. The proxy has the same interface as the real 
object. The fact that the proxy is just a stand-in is transparent to the rest of the client 
application. 
The server code responsible for decapsulating a request and delivering it to the server 
application is called a stub. A server application receives a request from a client stub 
and performs the necessary operations. It then returns a result to the stub, which 
handles all marshaling and communications. 
Type Libraries 
The easiest method of deploying and registering a COM component generally involves 
using type libraries. A type library describes all the interface and typing information 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
747 
for COM objects. It can include a variety of information, such as COM object names, 
supported interfaces, method prototypes, structures, enumerations, and relevant 
GUIDs for interfaces and objects. Developers can use type libraries to incorporate 
components into their applications with minimal effort. 
Each type library can be registered with the system. Like interfaces and COM classes, 
they are given a unique GUID to ensure that each type library can be identified. Type 
library IDs are stored in the registry in HKEY_CLASSES_ROOT\Classes\Typelib, with 
subkeys identifying the location of the type library. In addition, CLSIDs and interfaces 
can indicate that a type library applies to them by using the Typelib subkey in their 
locations in the registry. 
Type libraries can be in a standalone file (usually with the extension .tlb) or included 
as a resource in a DLL or executable. As you see later in "Auditing DCOM 
Applications," type libraries provide a wealth of essential information, especially when 
you don't have access to the source code. 
DCOM Configuration Utility 
The following sections focus on programmatic configuration of DCOM applications. 
You can also use the DCOM Configuration utility to view and manipulate the 
registered attributes of DCOM components. To run this utility, type dcomcnfg.exe at 
the command line or in the Run dialog box. In Windows XP and later, this command 
starts an instance of the Microsoft Management Console (MMC), as shown in Figure 
12-3. 
Figure 12-3. Viewing all registered DCOM objects 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
748 
The DCOM Configuration utility can be used to manipulate all DCOM-related security 
settings, including the base subsystem security, default component security, and 
individual component security. This utility should be your starting point for reviewing 
an installed DCOM application. The Properties dialog box for a COM object shows you 
the application name, the application ID, security permissions associated with the 
object, and more useful tidbits of information you need to evaluate application 
exposure (see Figure 12-4). 
Figure 12-4. Viewing properties of COM objects 
DCOM Application Identity 
Unlike local COM, a remote COM server often doesn't run under the access token of 
the launching user. Instead, the base identity is designated by the DCOM object's 
registration parameters. A DCOM server can run in these four user contexts: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
749 
Interactive user This context causes the application to run as whichever 
user is currently logged on. If no users are logged on, the application can't be 
started. 
Launching user This context causes the application to run with the 
credentials of the user who's launching the server. If no identity is established 
in the registry, this context is the default setting. 
Specified user This context causes the application to be launched by using a 
specific user's identity, no matter who the launching user is. The credentials of 
the target user are required to configure this context. 
Service The application DCOM server is hosted inside a service and runs 
under a local service account. 
Generally, running as the launching user is the simplest, most secure option. This 
context causes the application to impersonate the launching user; however, 
accessing objects across the network from the server fails in Windows 2000 and 
earlier because of the lack of impersonation delegation. Long-lived COM servers 
might require running under a local service account or a specified account. In 
Windows XP and later, the network service account is often used. Developers can also 
create a tightly restricted account for the DCOM object. 
The most dangerous application identity is probably the interactive user because any 
method of running arbitrary code results in unrestricted impersonation of the 
interactive user. This identity is especially dangerous if the COM interface allows 
remote access. If you encounter this identity setting, examine all interfaces closely. 
Pay special attention to any capabilities (intentional or otherwise) that allow code 
execution or arbitrary file and object manipulation. 
DCOM Subsystem Access Permissions 
Starting with Windows XP SP2 and Windows Server 2003 SP1, Microsoft provides 
granular system-wide access control for DCOM, which can be accessed through the 
DCOM configuration in the System Properties dialog box. To manipulate these 
system-wide settings, click the Edit Limits buttons on the Security tab. These 
configuration parameters supersede the default and component-specific settings, so 
they can be used to completely restrict DCOM access. The access rights are 
summarized in Table 12-5. 
Table 12-5. COM Object Access Rights 
Access Right 
Meaning 
COM_RIGHTS_EXECUTE 
Allows users to make calls on a COM interface. 
COM_RIGHTS_EXECUTE_LOCAL 
Required to allow local clients to make calls on a COM 
interface. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
750 
Table 12-5. COM Object Access Rights 
Access Right 
Meaning 
COM_RIGHTS_EXECUTE_REMOTE Required to allow remote clients to make calls on a COM 
interface. 
COM_RIGHTS_ACTIVATE_LOCAL Required to allow local clients to activate the interface. 
COM_RIGHTS_ACTIVE_REMOTE 
Required to allow remote clients to activate the 
interface. 
The COM_RIGHTS_EXECUTE right is required for remote COM to function at all. The 
default assignment of the remaining rights allows only administrators to activate and 
launch remote COM objects. However, all users are allowed to launch local COM 
objects and connect to existing remote objects. Earlier versions of Windows support 
only the COM_RIGHTS_EXECUTE permission. 
DCOM Access Controls 
You've already learned how RPC can use native Windows access control mechanisms 
to provide fine-grained authentication and authorization. DCOM makes use of this 
same infrastructure for its own access control features. However, DCOM authorization 
comes into play in a slightly different manner: at activation time and call time. 
Activation 
A DCOM object must be instantiated before a client can receive an interface pointer to 
it and before any of its methods can be called by that client. Usually, this 
instantiationcalled activationis done via RPC. The RPC subsystem locates the DCOM 
server a client is trying to access and launches it if it's not already running. 
The Service Control Manager (SCM) determines whether the requesting principal is 
allowed to launch the object by examining the launch permission ACL for the 
requested class. This ACL is maintained in the registry key 
HKEY_CLASSES_ROOT\APPID\\LaunchPermission. 
The LaunchPermission value might be absent if no special permissions are required. If 
so, the class inherits the default permissions. This ACL is stored in the system registry 
at HKEY_LOCAL_MACHINE\Software\Microsoft\OLE\DefaultLaunchPermission. 
Note 
A DCOM server can't set launch permissions programmatically for the current call. 
Generally, the installing application or system administrator sets these permissions 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
751 
programmatically or with the DCOM Configuration utility. Therefore, insufficient 
launch permissions fall into the operational vulnerability classification. 
Invocation 
After a DCOM object is activated, developers can apply additional levels of control by 
enforcing call-level security, which controls the principals allowed to make interface 
calls on a specific object. There are two ways to enforce call-level security: through 
registry key settings and programmatically. The first method involves consulting the 
registry. First, the ACL for the application is checked, which is in the registry key 
HKEY_CLASSES_ROOT\APPID\\AccessPermission. If this value is absent, 
application access has no special security requirements, and the default ACL is 
applied from the Registry key 
HKEY_LOCAL_MACHINE\Software\Microsoft\OLE\DefaultAccessPermission. 
These registry keys are set manually or via the DCOM Configuration utility. The other 
way to enforce call access permissions is programmatically with the 
CoInitializeSecurity() function: 
HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pVoid, 
        LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, 
        void * pReserved1, DWORD dwAuthLevel, DWORD dwImpLevel, 
        SOLE_AUTHENTICATION_LIST *pAuthList, 
        DWORD dwCapabilities, void * pReserved3) 
The CoInitializeSecurity() function gives developers extensive control over the 
basic security of COM objects. The security measures this function puts in place are 
process wide; that is, if a process has multiple DCOM object interfaces exposed, all 
interfaces are affected by a call to this function. The first argument actually provides 
the majority of the security capability. Although the prototype indicates that this 
argument is a pointer to a security descriptor, it can also point to two other structures: 
an AppID structure or an IAccessControl object. When an AppID structure is specified, 
the relevant AppID is located in the registry and permissions are applied according to 
the subkey values stored there. An IAccessControl object is a system-provided DCOM 
object that supplies methods for enforcing restrictions on other interfaces. The client 
can call CoInitializeSecurity() only once, and any attempt to call it again fails. 
Note 
Remember that CoInitializeSecurity() restrictions are applied to every interface the 
calling process has registered. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
752 
In addition to security descriptor settings, quite a few other security restrictions can 
be put in place with CoInitializeSecurity(). The dwAuthLevel parameter can also be 
used to enforce certain authentication levels. DCOM uses the same authentication 
levels as RPC, so they aren't repeated here. Refer to the "RPC Servers(? [????.])" 
section earlier in this chapter for details on these authentication levels. 
The downside of CoInitializeSecurity() is that it can be called only once and affects 
all DCOM calls in the current process. However, to modify authentication behavior on 
a per-proxy basis, clients can also use the CoSetProxyBlanket() function, which has 
the following prototype: 
HRESULT CoSetProxyBlanket(IUnknown * pProxy, DWORD dwAuthnSvc, 
        DWORD dwAuthzSvc, WCHAR * pServerPrincName, 
        DWORD dwAuthnLevel, DWORD dwImpLevel, 
        RPC_AUTH_IDENTITY_HANDLE pAuthInfo, 
        DWORD dwCapabilities) 
This function operates similarly to CoInitializeSecurity(), except the authentication 
parameters affect only the proxy indicated by the pProxy argument rather than every 
proxy interface a client uses. Also, unlike CoInitializeSecurity(), 
CoSetProxyBlanket() can be called more than once. 
Impersonation in DCOM 
DCOM allows servers to impersonate clients by using the underlying RPC 
implementation. A DCOM application enforces impersonation levels programmatically 
and through the use of registry settings. Registry settings provide initial security 
requirements, but they can be overridden programmatically while the application is 
running. You might have noticed that both CoInitializeSecurity() and 
CoSetProxyBlanket() have a dwImpLevel parameter. This parameter allows clients to 
specify the impersonation level, and it works just as it does in RPC. This parameter is 
simply passed to the underlying RPC transport, discussed earlier in this chapter. 
However, impersonation can be performed only if the authentication level is 
RPC_C_IMP_LEVEL_IMPERSONATE or higher; the default value is C_IMP_LEVEL_IDENTIFY. 
In addition to the standard IPC impersonation issues, DCOM objects might be more at 
risk from impersonation attacks. As Michael Howard and David Leblanc point out in 
Writing Secure Code, a server application is likely to act as a client when an event 
source/sink pair is set up and interfaces are passed as arguments to a server process. 
For those unfamiliar with sources and sinks, they are older COM mechanisms for 
handling asynchronous events through the use of connection points. A connection 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
753 
point is simply a communication channel an object can establish with another object. 
You've seen examples of the client making calls to a server and receiving a result 
immediately. Sometimes, however, the server needs to advise the client that an 
event has occurred. This event might be based on a user action, or it might indicate 
that a time-consuming operation is finished. In this situation, the client exposes its 
own COM interface and passes it to the server. When the server wants to indicate an 
event occurred, it simply calls a method in this interface. To do this, the server must 
be a connectable objectthat is, expose the IConnectionPoint interface (among several 
others). The server's outgoing interface for a connection point is called a source, and 
the client's receiving interface is called a sink. The problem with this process is that 
the server is now a client, and its impersonation level is just as important as the 
client's. If a malicious client connects to an unprotected server, it can use 
CoImpersonateClient() in its sink interface to steal the server's credentials. 
Remember, the server needs to set fairly lax permissions to be vulnerable to this type 
of attack, as in the following example: 
BOOL InitializeCOM(void) 
{ 
    HRESULT rc; 
    rc = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED); 
    if(FAILED(rc)) 
        return FALSE; 
    rc = CoInitializeSecurity(NULL, -1, NULL, NULL, 
            RPC_AUTHN_LEVEL_NONE, RPC_C_IMP_LEVEL_IMPERSONATE, 
            NULL, 0, NULL); 
    if(FAILED(rc)) 
        Return FALSE; 
    return TRUE; 
} 
If a server (or a client) for a connectable object initializes COM security as in this 
example, impersonation vectors are a definite threat because they might allow 
connecting clients to steal credentials. This type of attack is one of the main reasons 
for Microsoft's introduction of COM cloaking and RPC_C_IMP_LEVEL_DELEGATE. 
MIDL Revisited 
MIDL was introduced in "Microsoft Interface Definition Language(? [????.])" earlier in 
this chapter. IDL is primarily intended to express RPC interfaces, but it can also be 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
754 
used to describe COM interfaces. In fact, the MIDL compiler has language support for 
the Object Description Language (ODL), which can be used to represent objects as 
well as RPC interfaces. When auditing COM applications, you might see some COM 
object interfaces expressed in IDL, so this section reviews some of the main attributes 
and keywords for expressing COM objects. 
The most important difference between COM ODL and RPC IDL is the presence of the 
object attribute in the IDL header. This keyword indicates that the interface is a COM 
object and directs the MIDL compiler to generate a COM proxy and stub, as opposed 
to RPC client/server stubs. The other main difference is indicating that the interface is 
derived from another interface. Remember that all COM objects are derived from 
IUnknown; so you must indicate that in the interface definition. 
Note 
Instead of being derived directly from IUnknown, COM objects can be derived from 
another class. However, the parent class is directly or indirectly derived from 
IUnknown. 
Putting this together, a sample COM interface definition in an IDL file might look 
something like this: 
import "iunknwn.idl" 
[ 
    object, 
    uuid(12345678-1234-1234-1234-123456789012), 
] 
interface IBankAccountObject : IUnknown 
{ 
    BOOL LoadDetails([in] PUSER_DETAILS userDetails); 
    BOOL GetBalance([out] PBALANCE balanceInfo); 
    BOOL GetHistory([out] PHISTORY historyInfo); 
    ... other methods ... 
} 
As you can see, it looks a lot like an RPC interface definition. The most important part 
is locating all the available interface methods and determining what arguments they 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
755 