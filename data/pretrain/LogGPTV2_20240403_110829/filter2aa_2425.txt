Unlimited Results: Breaking Firmware Encryption of ESP32-V3
Karim M. Abdellatif, Olivier H´eriveaux, and Adrian Thillard
Motivation
• ESP32 is deployed in hundreds of million
devices as announced by Espressif 1
• ESP32-V3 has been recently used as the main
MCU in Jade hardware wallet (Blockstream)2
• Encrypted firmware is stored in the external
flash
• The encryption key is stored in the eFuses of
ESP32-V3
1Espressif, ”Espressif Achieves the 100-Million Target for IoT Chip Shipments”, 2018
2https://blockstream.com/jade/
2
Motivation
• ESP32 is deployed in hundreds of million
devices as announced by Espressif 1
• ESP32-V3 has been recently used as the main
MCU in Jade hardware wallet (Blockstream)2
• Encrypted firmware is stored in the external
flash
• The encryption key is stored in the eFuses of
ESP32-V3
Jade wallet
ESP32-V3 + external
flash
1Espressif, ”Espressif Achieves the 100-Million Target for IoT Chip Shipments”, 2018
2https://blockstream.com/jade/
2
ESP32-V1 vs ESP32-V3
ESP32-V1
• Flash encryption and secure boot were
broken by LimitedResults3 in 2019
• During the power-up eFuse protection
bits are manipulated
• The main idea is to glitch the chip
during the power-up
3LimitedResults, ”Fatal Fury On ESP32: Time to Release HW Exploits”, Blackhat Europe 2019
3
ESP32-V1 vs ESP32-V3
ESP32-V1
• Flash encryption and secure boot were
broken by LimitedResults3 in 2019
• During the power-up eFuse protection
bits are manipulated
• The main idea is to glitch the chip
during the power-up
ESP32-V3
• In the market since 2020 as a reaction
against the previous attack
• New secure boot mechanism
• It is hardened against fault injection
attacks in hardware and software as
announced by the vendor
3LimitedResults, ”Fatal Fury On ESP32: Time to Release HW Exploits”, Blackhat Europe 2019
3
Outline
ESP32 Security Analysis
Fault Injection Setup
EMFI on ESP32-V1
EMFI on ESP32-V3
Breaking Firmware Encryption by SCAs
Practical Attack
Vendor reply and Conclusion
4
ESP32 SECURITY ANALYSIS
Security features
• Secure boot
• Flash memory encryption
• 1024-bit OTP, up to 768 bits for
customers
• Cryptographic hardware accelerators:
AES, SHA-2, RSA, Elliptic Curve
Cryptography (ECC), and Random
Number Generator (RNG)
• esptool4 can be used to configure the
above features
Source: Espressif
4https://github.com/espressif/esptool
6
eFuse organization
User Application
      Reserved
(System Purposes)
  Flash Encryption
           Key
 Secure Boot
        Key
BLK0
BLK1
BLK2
BLK3
• ESP32 (including V3) has a 1024-bits eFuse memory
• It is divided into 4 blocks of 256 bits each
• After burning these keys, can not be accessed (or updated) by any software
• Only the ESP32 hardware can read and use BLK1 and BLK2 for performing
secure boot and flash encryption
7
Secure boot V1
Digest = SHA-512(AES-256((Bootloader ∥ public key), BLK2)))
(1)
1 b u r n e f u s e ABS DONE 0
Bootloader || Public key 
Digest
0x1000
eFuse BLK2
AES-256
SHA-512
CMP
Continue or Not
Flash
0x00
Key
Signature verification
8
Flash encryption
• It encrypts all the flash content using AES-256
with BLK1 and stores it in the external memory
• Flash encryption uses AES decryption
• Flash decryption uses AES encryption
• During the power-up, the decryption process is
performed
• BLK1 is “tweaked” with the offset address of
each 32 bytes block of flash
1 burn key
f l a s h e n c r y p t i o n
encKey . bin
2 b u r n e f u s e FLASH CRYPT CONFIG 0 xf
3 b u r n e f u s e FLASH CRYPT CNT
Flash
SPI Interface
eFuse BLK1
AES-256
Cache
ESP32 CPU
Bootloader = 
partition-table =
ota_data_initial = 
Firmware = 
0x1000
0x9000
0xE000
0x10000
Key 
Key tweak
address
+
Flash decryption
9
LimitedResults attack
• eFuse protection bits are manipulated
during the power-up
• Injecting faults using power glitching
during the power-up can perturb these
bits
• eFuse slots were attacked
1 Reset ESP32
2 ReadeFuse
Source: LimitedResults
10
FAULT INJECTION SETUP
Fault attacks
• Perturbing the chip during sensitive operations
• Secure boot 5
• Cryptographic operations (AES, DES, RSA, ...) 6
5Albert Spruyt and Niek Timmers, ”Bypassing Secure Boot Using Fault Injection”, Black Hat
Europe 2016.
6Yifan Lu, ”Attacking Hardware AES of PlayStation with DFA”, 2019
12
Electromagnetic injection
• High voltage pulse is injected
to the probe to create EMFI
• Localized faults
• Decapping the chip is not
important (it depends)
EM Setup 7
7Karim Abdellatif and Olivier H´eriveaux , ”SiliconToaster: A Cheap and Programmable EM Injector
for Extracting Secrets”, FDTC 2020.
13
A PCB for ESP32
• For a stable setup, a PCB was
fabricated
• ESP32 + external flash
• Several VDD pins are out to control
• An external oscillator
Fabricated PCB
14
Setup
• SiliconToaster for EM injection
• ESP32 on a scaffold8 board
• An oscilloscope
• XYZ table
EM setup
8Olivier Heriveaux, ”https://github.com/Ledger-Donjon/scaffold”
15
Attack Plan
1 EM evaluation of ESP32-V1 using a glitchable
application
2 Reproducing eFuse attack of LimitedResults by EM
3 EM evaluation of ESP32-V3 using a glitchable
application
4 Performing eFuse attack on ESP32-V3
16
EMFI ON ESP32-V1
Glitchable application
Glitchable code
EM probe scans the overall surface
18
Successful faults
• EM pulse = 500V
• Positive polarity
• 500 trials per spot
• Motor step = 0.2mm
Vulnerable spots
After being sure from the setup settings, next step is to attack the eFuse slots.
19
eFuse attack of ESP32-V1
1 burn key
f l a s h e n c r y p t i o n
encKey .
bin
2 b u r n e f u s e FLASH CRYPT CONFIG 0 xf
3 b u r n e f u s e FLASH CRYPT CNT
Power consumption during the power-up
20
Attack scenario
Attack scenario
21
Successful faults
Experiment log
22
Successful faults
Power trace in case of a successful fault
Spots of eFuse successful attack
23
Discussion on ESP32-V1
1 With EMFI, we managed to dump the eFuse slots of ESP32-V1
2 Only ONE single fault has been needed for this attack
3 The success rate is close to 0.6%
24
EMFI ON ESP32-V3
Recapping Espressif’s countermeasures
1 New secure boot mechanism based on RSA
2 It is hardened against fault injection attacks in hardware
and software as announced by the vendor
3 UART-disable to prevent eFuse reading command
26
Glitchable application
Glitchable code
EM probe scans the overall surface
27
Successful faults
• EM pulse = 500V
• Positive polarity
• 500 trials per spot
• Motor step = 0.2mm
Vulnerable spots
This confirms that ESP32-V3, is not hardened against fault injection attacks.
28
eFuse attack of ESP32-V3
1 burn key
f l a s h e n c r y p t i o n
encKey .
bin
2 b u r n e f u s e FLASH CRYPT CONFIG 0 xf
3 b u r n e f u s e FLASH CRYPT CNT
29
eFuse attack of ESP32-V3
1 burn key
f l a s h e n c r y p t i o n
encKey .
bin
2 b u r n e f u s e FLASH CRYPT CONFIG 0 xf
3 b u r n e f u s e FLASH CRYPT CNT
Power-up of ESP32-V3
29
eFuse attack of ESP32-V3
1 burn key
f l a s h e n c r y p t i o n
encKey .
bin
2 b u r n e f u s e FLASH CRYPT CONFIG 0 xf
3 b u r n e f u s e FLASH CRYPT CNT
Power-up of ESP32-V3
Power-up of ESP32-V1
29
Attack plan
Multiple faults
30
Multiple Faults
Power trace in case of multiple faults
Spots of Timeout
The chip got crashed because of the multiple EM pulses.
31
Discussion on ESP32-V3
1 ESP32-V3 has a different boot ROM with
countermeasures against fault injection
2 Multiple faults are needed
3 Until now, we haven’t succeeded
32
BREAKING FIRMWARE ENCRYPTION BY SCAS
Moving to another attack path
• Motivation
• A difficult attack using fault injection because
of the boot ROM countermeasures
• Another attack path
• A SCA on the flash encryption mechanism
• Targeting the encryption process during the
power up
• Controlling the flash content to perform a
CPA
34
Leakage detection
• A methodology to identify leakage moments which contain sensitive information
• It reduces the computation complexity of security evaluation and improves the
efficiency of the SCAs
• Several methods have been used to identify the amount of leakage such as SNR
and NICV9
SNR = Var(E(x|y))
E(Var(x|y))
(2)
9S. Bhasin, J. Danger, and S. Guilley , ”NICV: Normalized Inter-Class Variance for Detection of
Side-Channel Leakage”, SEC 2014
35
Correlation Power Analysis (CPA10)
T#1
T#2
T#n
m
0
1
L
0
1
L
0
1
L
T1
T2
Tn
+
Key = 0
Key = 1
Key = 256
Plaintext 1
Plaintext 2
Plaintext n
0
1
255
0
1
0
1
m1
m2
mn
255
255
Correlation
0
1
L
0
1
0
1
L
255
L
Key = 0
Model
Measurements
Key = 0xAA
Max()
S-box
HW
Key = 1
Key = 255
10E. Brier, C. Clavier, and F. Olivier , ”Correlation Power analysis with a leakage model”, CHES 2004
36
Side-channel attack setup
• High-end oscilloscope (6.25 Gs/s)
• ESP32 on a scaffold board
• Flash encryption has been enabled
SC setup
37
Flash encryption
• It encrypts all the flash content using AES-256
with BLK1 and stores it in the external memory
• During the power-up, the decryption process is
performed
• First firmware part to get decrypted is the
bootloader (stored at 0x1000)
• BLK1 is “tweaked” with the offset address of
each 32 bytes block of flash
Flash
SPI Interface
eFuse BLK1
AES-256
Cache
ESP32 CPU
Bootloader = 
partition-table =
ota_data_initial = 
Firmware = 
0x1000
0x9000
0xE000
0x10000
Key 
Key tweak
address
+
Flash decryption
38
Flash decryption during power-up
Power up with flash encryption
39
Scenario
Algorithm 1: Traces measurement sequence
Data: N = No. traces = 100000
i = 0;
while True do
FlashData = Random(32);
EraseFlash();
WriteFlash(FlashData,address = 0x1000);
ChipRestart();
CaptureTrace();
i += 1;
if (i == N) then
break;
40
SNR on zone A
Power trace + SNR on zone A
41
SNR on zone B
Power trace + SNR on zone B
42
SNR on Ciphertext
SNR on Ciphertexts
43
CPA results
Correlation of Key[3] using 100K traces
44
Flash limitations
1 The flash is limited in writing/erasing (around 110K times)
2 As a result, number of max traces = 100K
3 Flash emulator was designed on scaffold
45
Power traces with flash emulator
46
CPA result
Correlation of Key[3] using 300K traces
Modelround0[i] = HW (Sbox[P[i] ⊕ guess])
(3)
Modelround1[i] = HW (Sbox[State1[i] ⊕ guess] ⊕ Sbox[P[i] ⊕ K[i]])
(4)
47
Success rate
Success rate
48
Activating all security features
1 Secure boot
2 UART disable
49
Success rate
S
50
PRACTICAL ATTACK
Jade wallet
• Jade11 is an open-source and open-hardware
• It doesn’t store the user PIN in the external
flash
• The PIN verification is performed remotely on
the Blockstream’s server by blind pin server 12
• The external flash contains the user’s private
and public keys to communicate with this
server
Jade wallet
ESP32-V3 + external
flash
11https://github.com/Blockstream/Jade
12https://github.com/Blockstream/blind pin server
52
Success rate
53
Jade wallet
Encrypted firmware
Decrypted firmware
54
Jade wallet
Encrypted firmware
Decrypted firmware
Cloning the wallet + Injecting a backdoor to perform transactions to
substituted addresses = evil maid attack
54
VENDOR REPLY AND CONCLUSION
Espressif’s reply
• First e-mail was sent in October 2021
• ESP32-S2, ESP32-C3 and ESP32-S3 are
also impacted
• Future products from Espressif will contain
countermeasures against SCAs
Espressif’s advisory
56
Conclusion
• By experimental results, ESP32-V3 has a hardened boot ROM against fault
injection (FI)
57
Conclusion
• By experimental results, ESP32-V3 has a hardened boot ROM against fault
injection (FI)
• The presented side-channel attack is generic and works on all products based on
all ESP32 versions (including V3)
57
Conclusion
• By experimental results, ESP32-V3 has a hardened boot ROM against fault
injection (FI)
• The presented side-channel attack is generic and works on all products based on
all ESP32 versions (including V3)
• Protection against fault injection (FI) doesn’t prevent side-channel attacks
(SCAs)
57
THANK YOU. QUESTIONS?
Karim M. Abdellatif, PhD
e-mail: PI:EMAIL
58