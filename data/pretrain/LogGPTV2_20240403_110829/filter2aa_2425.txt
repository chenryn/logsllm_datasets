# Unlimited Results: Breaking Firmware Encryption of ESP32-V3
**Authors:** Karim M. Abdellatif, Olivier Hériveaux, and Adrian Thillard

## Motivation
- The ESP32 is deployed in hundreds of millions of devices, as announced by Espressif [1].
- The ESP32-V3 has recently been used as the main microcontroller (MCU) in the Jade hardware wallet by Blockstream [2].
- Encrypted firmware is stored in the external flash.
- The encryption key is stored in the eFuses of the ESP32-V3.

[1] Espressif, "Espressif Achieves the 100-Million Target for IoT Chip Shipments," 2018.
[2] https://blockstream.com/jade/

## ESP32-V1 vs. ESP32-V3
### ESP32-V1
- Flash encryption and secure boot were broken by LimitedResults in 2019 [3].
- During power-up, eFuse protection bits are manipulated.
- The main idea is to glitch the chip during power-up.

[3] LimitedResults, "Fatal Fury On ESP32: Time to Release HW Exploits," Blackhat Europe 2019.

### ESP32-V3
- Introduced in 2020 as a response to the previous attack.
- Features a new secure boot mechanism.
- Hardened against fault injection attacks in both hardware and software, as claimed by the vendor.

## Outline
1. ESP32 Security Analysis
2. Fault Injection Setup
3. EMFI on ESP32-V1
4. EMFI on ESP32-V3
5. Breaking Firmware Encryption by SCAs
6. Practical Attack
7. Vendor Response and Conclusion

## ESP32 Security Analysis
### Security Features
- Secure boot
- Flash memory encryption
- 1024-bit OTP, with up to 768 bits available for customers
- Cryptographic hardware accelerators: AES, SHA-2, RSA, Elliptic Curve Cryptography (ECC), and Random Number Generator (RNG)
- `esptool` can be used to configure these features [4].

[4] https://github.com/espressif/esptool

### eFuse Organization
- The ESP32 (including V3) has a 1024-bit eFuse memory divided into 4 blocks of 256 bits each.
- After burning the keys, they cannot be accessed or updated by any software.
- Only the ESP32 hardware can read and use BLK1 and BLK2 for secure boot and flash encryption.

### Secure Boot V1
- Digest = SHA-512(AES-256((Bootloader ∥ public key), BLK2)))
- Steps:
  1. Burn eFuse ABS DONE 0
  2. Bootloader || Public key
  3. Digest
  4. eFuse BLK2
  5. AES-256
  6. SHA-512
  7. CMP
  8. Continue or Not
  9. Flash at 0x00

### Flash Encryption
- Encrypts all flash content using AES-256 with BLK1 and stores it in external memory.
- Flash encryption uses AES decryption.
- Flash decryption uses AES encryption.
- During power-up, the decryption process is performed.
- BLK1 is "tweaked" with the offset address of each 32-byte block of flash.

## LimitedResults Attack
- eFuse protection bits are manipulated during power-up.
- Injecting faults using power glitching during power-up can perturb these bits.
- eFuse slots were attacked.

## Fault Injection Setup
### Fault Attacks
- Perturbing the chip during sensitive operations such as secure boot [5] and cryptographic operations (AES, DES, RSA, etc.) [6].

[5] Albert Spruyt and Niek Timmers, "Bypassing Secure Boot Using Fault Injection," Black Hat Europe 2016.
[6] Yifan Lu, "Attacking Hardware AES of PlayStation with DFA," 2019.

### Electromagnetic Injection
- High voltage pulse is injected to create EMFI.
- Localized faults.
- Decapping the chip is not necessary (depending on the scenario) [7].

[7] Karim Abdellatif and Olivier Hériveaux, "SiliconToaster: A Cheap and Programmable EM Injector for Extracting Secrets," FDTC 2020.

### PCB for ESP32
- A stable setup was fabricated with a PCB.
- Includes ESP32 + external flash, several VDD pins for control, and an external oscillator.

### Setup
- SiliconToaster for EM injection.
- ESP32 on a scaffold board [8].
- An oscilloscope.
- XYZ table.

[8] Olivier Heriveaux, "https://github.com/Ledger-Donjon/scaffold"

### Attack Plan
1. EM evaluation of ESP32-V1 using a glitchable application.
2. Reproducing eFuse attack of LimitedResults by EM.
3. EM evaluation of ESP32-V3 using a glitchable application.
4. Performing eFuse attack on ESP32-V3.

## EMFI on ESP32-V1
### Glitchable Application
- EM probe scans the overall surface.

### Successful Faults
- EM pulse = 500V.
- Positive polarity.
- 500 trials per spot.
- Motor step = 0.2mm.
- Vulnerable spots identified.

### eFuse Attack on ESP32-V1
- Steps:
  1. Burn key
  2. Flash encryption
  3. Burn eFuse FLASH CRYPT CONFIG 0xf
  4. Burn eFuse FLASH CRYPT CNT

### Discussion on ESP32-V1
- With EMFI, we managed to dump the eFuse slots of ESP32-V1.
- Only one single fault was needed for this attack.
- The success rate is close to 0.6%.

## EMFI on ESP32-V3
### Recapping Espressif’s Countermeasures
- New secure boot mechanism based on RSA.
- Hardened against fault injection attacks in hardware and software.
- UART-disable to prevent eFuse reading command.

### Glitchable Application
- EM probe scans the overall surface.

### Successful Faults
- EM pulse = 500V.
- Positive polarity.
- 500 trials per spot.
- Motor step = 0.2mm.
- Vulnerable spots confirmed, indicating that ESP32-V3 is not fully hardened against fault injection attacks.

### eFuse Attack on ESP32-V3
- Steps:
  1. Burn key
  2. Flash encryption
  3. Burn eFuse FLASH CRYPT CONFIG 0xf
  4. Burn eFuse FLASH CRYPT CNT

### Power-Up of ESP32-V3
- Multiple faults are needed.
- The chip crashed due to multiple EM pulses.

### Discussion on ESP32-V3
- ESP32-V3 has a different boot ROM with countermeasures against fault injection.
- Multiple faults are required.
- We have not yet succeeded in this attack.

## Breaking Firmware Encryption by SCAs
### Motivation
- Fault injection is difficult due to boot ROM countermeasures.
- Another attack path: SCA on the flash encryption mechanism.
- Targeting the encryption process during power-up.
- Controlling the flash content to perform CPA.

### Leakage Detection
- Methodology to identify leakage moments containing sensitive information.
- Reduces computation complexity and improves SCA efficiency.
- Methods include SNR and NICV [9].

[9] S. Bhasin, J. Danger, and S. Guilley, "NICV: Normalized Inter-Class Variance for Detection of Side-Channel Leakage," SEC 2014.

### Correlation Power Analysis (CPA)
- T#1, T#2, ..., T#n
- m0, m1, ..., mL
- Key = 0, 1, ..., 255
- Plaintext 1, 2, ..., n
- Model: S-box, HW
- Measurements: Max()
- Key = 0xAA

[10] E. Brier, C. Clavier, and F. Olivier, "Correlation Power analysis with a leakage model," CHES 2004.

### Side-Channel Attack Setup
- High-end oscilloscope (6.25 Gs/s).
- ESP32 on a scaffold board.
- Flash encryption enabled.

### Flash Encryption
- Encrypts all flash content using AES-256 with BLK1.
- During power-up, the decryption process is performed.
- First firmware part decrypted is the bootloader (stored at 0x1000).
- BLK1 is "tweaked" with the offset address of each 32-byte block of flash.

### Flash Decryption During Power-Up
- Power-up with flash encryption.

### Scenario
- Algorithm 1: Traces measurement sequence
  - Data: N = No. traces = 100000
  - i = 0
  - While True:
    - FlashData = Random(32)
    - EraseFlash()
    - WriteFlash(FlashData, address = 0x1000)
    - ChipRestart()
    - CaptureTrace()
    - i += 1
    - If (i == N) then break

### SNR on Zone A
- Power trace + SNR on zone A.

### SNR on Zone B
- Power trace + SNR on zone B.

### SNR on Ciphertext
- SNR on ciphertexts.

### CPA Results
- Correlation of Key[3] using 100K traces.

### Flash Limitations
- Flash is limited in writing/erasing (around 110K times).
- Maximum number of traces = 100K.
- Flash emulator designed on scaffold.

### Power Traces with Flash Emulator
- Correlation of Key[3] using 300K traces.
- Modelround0[i] = HW (Sbox[P[i] ⊕ guess])
- Modelround1[i] = HW (Sbox[State1[i] ⊕ guess] ⊕ Sbox[P[i] ⊕ K[i]])

### Success Rate
- Success rate.

### Activating All Security Features
- Secure boot.
- UART disable.

## Practical Attack
### Jade Wallet
- Open-source and open-hardware.
- Does not store the user PIN in the external flash.
- PIN verification is performed remotely on Blockstream's server by blind pin server [11].
- External flash contains the user’s private and public keys to communicate with the server.

[11] https://github.com/Blockstream/Jade
[12] https://github.com/Blockstream/blind pin server

### Success Rate
- Success rate.

### Jade Wallet
- Encrypted firmware.
- Decrypted firmware.
- Cloning the wallet + injecting a backdoor to perform transactions to substituted addresses = evil maid attack.

## Vendor Response and Conclusion
### Espressif’s Reply
- First email sent in October 2021.
- ESP32-S2, ESP32-C3, and ESP32-S3 are also impacted.
- Future products from Espressif will contain countermeasures against SCAs.

### Conclusion
- By experimental results, ESP32-V3 has a hardened boot ROM against fault injection (FI).
- The presented side-channel attack is generic and works on all products based on all ESP32 versions (including V3).
- Protection against fault injection (FI) does not prevent side-channel attacks (SCAs).

## Thank You. Questions?
**Karim M. Abdellatif, PhD**
- Email: PI:EMAIL