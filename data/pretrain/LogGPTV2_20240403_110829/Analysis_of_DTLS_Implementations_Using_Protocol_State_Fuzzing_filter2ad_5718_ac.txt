and also before sending ClientHello. This strategy for reset-
ting digest enables handshakes to “restart in the middle”, by
2528    29th USENIX Security Symposium
USENIX Association
ensuring that hashes are computed over exactly the messages
in the most recent current handshake. After experimenting
with different strategies for resetting digest, we found that
this strategy allows handshakes that restart to complete, whe-
reas other strategies do not. It also produces smaller learned
models, since successful restarts typically show up as back-
transitions to regular handshake states. As an example, for
TinyDTLS using a PSK conﬁguration, the number of states
in the learned model was reduced from 36 if digest was not
reset, to 22 if it was.
5.3 Making the SUT Behavior Deterministic
As mentioned in Section 3, the learning algorithm employed
works under the assumption that the SUT exhibits determinis-
tic behavior, i.e., the output generated depends uniquely on the
supplied input sequence. During learning experiments, howe-
ver, timing effects occasionally manifest as non-determinism
to the time-agnostic LEARNER. Below, we describe our stra-
tegies to remedy this problem.
One cause for timing-induced non-determinism is the
LEARNER sending the ﬁrst input too early, before the SUT has
fully started, or the MAPPER determining prematurely that the
SUT does not respond. We address this by tailoring, for each
SUT, the start and response timeouts. These are, respectively,
the delay before the ﬁrst input is sent (allowing the SUT to
initialize), and the time the MAPPER waits for each response
before concluding a timeout. In order to reduce learning time,
we adjust the response timeout for certain messages, parti-
cularly ClientHello and Finished, to which the SUT could
take longer to respond. Finally, in order to optimize the start
timeout for the slower JSSE and Scandium implementations,
we wrap around the SUT a program which preloads key ma-
terial, among other things. This key material is then reused
rather than reloaded for each new sequence of inputs. Once
the server is ready to receive packets, the wrapper program no-
tiﬁes the LEARNER of the port number at which the server is
listening. The LEARNER can then immediately start sending
inputs, rather than having to wait for a predeﬁned period.
Another cause for non-determinism is timeout-triggered
retransmissions by the SUT. To address this, we set the re-
transmission timeout of the SUT to a high value. For some
SUTs, this is a conﬁgurable parameter; for others we had to
alter the source code. Corresponding patches are provided on
the learning setup’s website for reproducibility.
Even with the above strategies, an SUT would sometimes
produce alternative outputs due to spurious timing effects.
In order to detect such cases, we store SUT’s responses to
queries in a cache during the hypothesis construction phase,
and conﬁrm each counterexample produced by hypothesis va-
lidation before delivering it to the LEARNER. When detecting
a case of differing responses to the same input, we rerun the
sequence until at least 80% of the responses are the same; this
always happened within a small number of retrials.
6 Experimental Setup and Experiments
An experiment conﬁguration comprises the implementation,
the key exchange algorithms and client authentication setting
based on which we form the input alphabet, and whether
messages with retransmissions were discarded.
6.1
Implementations Tested and Analyzed
In total, we analyzed thirteen different implementations. This
includes well-known TLS implementations like OpenSSL,
GnuTLS, MbedTLS, JSSE, WolfSSL, and NSS, which also
support DTLS. For JSSE we analyzed the Sun JSSE provi-
der of Java 9 and 12. Furthermore, we analyzed PionDTLS,
a Go implementation of DTLS 1.2 for WebRTC. The re-
maining implementations are IoT-speciﬁc and support only
DTLS. Scandium is the DTLS implementation which is part
of Eclipse’s Java CoAP implementation. The two TinyDTLS
variants are lightweight implementations speciﬁcally desig-
ned for IoT devices. TinyDTLS for Contiki-NG branched
out from that in Eclipse’s IoT suite, and has been develo-
ped independently ever since. We refer to Eclipse’s variant
as TinyDTLSE, and to Contiki-NG’s as TinyDTLSC. When
referring to both, we simply use TinyDTLS. For GnuTLS
and Scandium, we analyzed two versions; the later version
contains bug ﬁxes uncovered in the earlier one. As with
TinyDTLS, we omit versions when referring to both.
To avoid having to write our own DTLS servers, we use uti-
lities to conﬁgure and launch DTLS servers that are provided
by the developers where possible. For example, for OpenSSL,
we use the openssl s_server utility, for GnuTLS we use
gnutls-serv, etc. There are three exceptions (PionDTLS,
Scandium, and JSSE) for which we wrote our own DTLS ap-
plications2 as either there were no standard utilities available
or the available ones did not provide the desired functiona-
lity. For every implementation, Table 2 displays the name,
version, utility, supported key exchange algorithms and client
certiﬁcate authentication conﬁgurations, and a URL. We use
commit identiﬁers as versions for both TinyDTLS variants,
PionDTLS, and Scandium. The two commits for Scandium
belong to the development version 2.0.0 and shall, more sug-
gestively be referred to as Scandiumold and Scandiumnew.
Note that client certiﬁcate authentication is relevant for DH,
ECDH and RSA, but not for PSK whose handshake does not
incorporate certiﬁcate messages [17, p. 4].
The input alphabet, described in Table 1, includes inputs
necessary to perform handshakes using every key exchange
algorithm supported, two alerts, and one application message.
Whenever certiﬁcates can be part of the key exchange algo-
rithm, they are also included in the alphabet. The SUT is
conﬁgured to use client certiﬁcates whenever these are sup-
ported. Therein we explore three conﬁgurations: (i) required:
2These implementations are accessible via the learning setup’s website.
USENIX Association
29th USENIX Security Symposium    2529
Name
GnuTLS
JSSE
DH,ECDH,RSA,PSK
DH,ECDH,RSA,PSK
gnutls-serv
Algorithms
Client Cert Auth URL
Table 2: DTLS implementations tested. ”-” means a custom program was provided. Client certiﬁcate authentication can be
disabled (NONE), required (REQ) and optional (OPT). Grayed out or slanted are conﬁgurations supported by the library but
not made available by the utility. For slanted conﬁgurations this support was added, which enabled testing them. Braces gather
conﬁgurations explored via single learning experiments.
(cid:123)(cid:122)
(cid:124)
(cid:124)
(cid:123)(cid:122)
DH,ECDH,RSA(cid:124)(cid:123)(cid:122)(cid:125)
DH(cid:124)(cid:123)(cid:122)(cid:125),ECDH
(cid:124) (cid:123)(cid:122) (cid:125),RSA(cid:124)(cid:123)(cid:122)(cid:125)
(cid:123)(cid:122)
(cid:124)
(cid:125)
(cid:123)(cid:122)
(cid:124)
(cid:124)
(cid:123)(cid:122)
(cid:124) (cid:123)(cid:122) (cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124)
(cid:123)(cid:122)
Version Utility
3.5.19
3.6.7
9.0.4
12.0.2
2.16.1
3.46
1.1.1b
e4481fc
c7895c6
6979a09
53a0d97
8414f8a
4.0.0
https://tls.mbed.org
https://nss-crypto.org
https://www.openssl.org
https://github.com/pion/dtls
https://github.com/contiki-ng/tinydtls
https://github.com/eclipse/tinydtls
https://www.wolfssl.com
MbedTLS
NSS
OpenSSL
PionDTLS
Scandiumold
Scandiumnew
TinyDTLSC
TinyDTLSE
WolfSSL
ssl-server2
tstclnt
openssl s_server
-
dtls-server
dtls-server
server
https://www.eclipse.org/californium/
https://www.oracle.com/java/
https://www.gnutls.org
NONE
NONE
NONE
NONE
NONE,REQ,OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
NONE,REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ,OPT
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125),REQ(cid:124)(cid:123)(cid:122)(cid:125),OPT
NONE
NONE
NONE
NONE
NONE
NONE
NONE
DH,ECDH,RSA,PSK
DH,ECDH,RSA,PSK
ECDH
ECDH
ECDH
ECDH
ECDH
(cid:125),PSK(cid:124)(cid:123)(cid:122)(cid:125)
DH,ECDH,RSA
(cid:125)
(cid:125)
(cid:125)
(cid:125)
DH,ECDH,RSA
-
-
a valid certiﬁcate is requested (via CertiﬁcateRequest mes-
sage) and required to complete a handshake; (ii) optional:
a valid certiﬁcate is requested but not required; and (iii) di-
sabled: a valid certiﬁcate is neither requested nor required.
These conﬁgurations are further detailed in Section 7.1.
In some experiments, we had to remove inputs from the
input alphabet and/or limit the set of explored conﬁgurations.
For PionDTLS, NSS and WolfSSL, the reason was that the
server program or library does not support certain combinati-
ons of key exchange algorithms and certiﬁcate conﬁgurations.
Similarly, PionDTLS’s library does not allow PSK and ECDH
cipher suites to be used together, NSS’s utility does not sup-
port certiﬁcate authentication, whilst WolfSSL’s utility could
not be conﬁgured to simultaneously support all key exchange
algorithms. In cases where learned models were large (for
TinyDTLS, Scandium, and JSSE) or when response time was
slow (for Scandium and JSSE), we generated models sepa-
rately for each key exchange algorithm, in order to keep the
learning time reasonable.
6.2 Learning Effort
In our experiments, model learning converged on all analy-
zed implementations, except for JSSE (all conﬁgurations),
WolfSSL with disabled client authentication, and Scandium
using ECDH alphabets. For these conﬁgurations, the last
hypothesis models produced by learning are not complete,
but still very informative as bases for analysis.
Statistics from the learning experiments for which model
learning converged are shown in Table 3. These include the
number of states, number of tests, and learning time. Our
analysis focuses on these three quantities.
Number of states. First, note that the number of states in all
models is a two-digit number. This means that the models
we learn for these DTLS implementations are non-trivial. In
particular, we remark that the number of states is considerably
larger than those reported for TLS implementations, with our
DTLS models averaging 25 states while the TLS models are
averaging 9 states [13]. This conﬁrms our expectations about
the increased complexity of DTLS, and the complexity that
learning with several cipher suites adds to most models.
Second, the number of states is, unsurprisingly, affected by
the alphabet conﬁguration. PSK conﬁgurations generally lead
to smaller models than ECDH ones. (This is expected, since
the handshake sequence is longer unless client certiﬁcate au-
thentication is disabled.) However, combining multiple cipher
suites in one alphabet does not necessarily result in much
larger models. For example, OpenSSL or MbedTLS generate
relatively small models (19 and 17 states respectively, when
authentication is required) even with four cipher suites. This
can be explained by the fact that in mature implementations
handshakes for different key exchange algorithms/authenti-
cation conﬁgurations tend to share states. (For example, in
Fig. 3 note how all handshakes ﬁnish in states 5 and 6.)
Third, as we will soon see, there appears to be a strong cor-
relation between the number of states and bugs. The most con-
sequential bugs were found in implementations generating the
largest models (JSSE, PionDTLS, Scandiumold, TinyDTLS).
Hence, reducing state machine size is a viable strategy for
improving software correctness.
Number of tests. The number of tests was between 21 000
and 50 000 for most implementations, with only PionDTLS
and GnuTLS 3.6.7 requiring considerably more. Implemen-
tations which resulted in the largest models also required
the most tests. PionDTLS leads in terms of model size (66
states) and number of tests (113 508). The one exception to
2530    29th USENIX Security Symposium
USENIX Association
Table 3: Results of learning experiments. The “Timeout“ column refers to the response timeout, to which ∗ is appended in case
the timeout was adjusted based on the input. The “Alphabet Used” column describes the type of cipher suites used, if certiﬁcate
inputs were included (CERT), if authentication was disabled (NONE), optional (OPT) or required (REQ), and if retransmissions
were discarded (DISC).
Implementation
and Version
GnuTLS 3.5.19
GnuTLS 3.6.7
MbedTLS 2.16.1
NSS 3.46
OpenSSL 1.1.1b
PionDTLS
Scandiumold
Scandiumnew
TinyDTLSC
TinyDTLSE
WolfSSL 4.0.0
Timeout
(msecs)
Alphabet Used
States of
Final Model
Hypotheses
Tests
200
50∗
50
100
10
100
100∗
100∗
100
100
80∗
PSK+RSA_CERT_OPT
DH+ECDH+PSK+RSA_CERT_NONE
DH+ECDH+PSK+RSA_CERT_OPT
DH+ECDH+PSK+RSA_CERT_REQ
DH+ECDH+PSK+RSA_CERT_NONE
DH+ECDH+PSK+RSA_CERT_OPT
DH+ECDH+PSK+RSA_CERT_REQ
DH+ECDH+RSA_DISC
DH+ECDH+PSK+RSA_CERT_NONE