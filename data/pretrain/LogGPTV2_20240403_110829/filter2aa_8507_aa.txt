# JSON 学习笔记
---
**在线 JSON 格式化**
- https://www.json.cn/
- http://www.bejson.com/
- https://github.com/jsonhero-io/jsonhero-web
    - https://jsonhero.io/
**JSONPath 在线查询工具**
- http://jsonpath.com/
**文章**
- [WORKING WITH DATA IN JSON FORMAT](https://www.trustedsec.com/blog/working-with-data-in-json-format/)
---
**什么是 JSON ？**
JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）,一种轻量级的文本数据交换格式,是存储和交换文本信息的语法。类似 XML。
JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。
JSON 具有自我描述性，更易理解,比 XML 更小、更快，更易解析。
```json
{
    "sites": [
    { "name":"test" , "url":"www.test.com" },
    { "name":"google" , "url":"www.google.com" },
    { "name":"微博" , "url":"www.weibo.com" }
    ]
}
```
这个 sites 对象是包含 3 个站点记录（对象）的数组。
JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。
由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 `eval()` 函数，用 JSON 数据来生成原生的 JavaScript 对象。
JSON 文件的文件类型是 ".json"
JSON 文本的 MIME 类型是 "application/json"
**与 XML 对比**
- **与 XML 相同之处**
    - JSON 是纯文本
    - JSON 具有"自我描述性"（人类可读）
    - JSON 具有层级结构（值中存在值）
    - JSON 可通过 JavaScript 进行解析
    - JSON 数据可使用 AJAX 进行传输
- **与 XML 不同之处**
    - 没有结束标签
    - 更短
    - 读写的速度更快
    - XML 需要使用 XML 解析器来解析，JSON 可以使用标准的 JavaScript 函数来解析。
    - 使用数组
    - 不使用保留字
---
## 语法
JSON 语法是 JavaScript 语法的子集。
- 数据在名称/值对中
- 数据由逗号分隔
- 大括号保存对象
- 中括号保存数组
**JSON 名称/值对**
JSON 数据的书写格式是：名称/值对。
名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：
```json
"name" : "test"
```
这很容易理解，等价于这条 JavaScript 语句：
```js
name = "test"
```
**JSON 值**
JSON 值可以是：
- 数字（整数或浮点数）
- 字符串（在双引号中）
- 逻辑值（true 或 false）
- 数组（在中括号中）
- 对象（在大括号中）
- null
**JSON 数字**
JSON 数字可以是整型或者浮点型：
```json
{ "age":30 }
```
**JSON 对象**
JSON 对象在大括号 `{}` 中书写：
对象可以包含多个名称/值对：
```json
{ "name":"test" , "url":"www.test.com" }
```
这一点也容易理解，与这条 JavaScript 语句等价：
```js
name = "test"
url = "www.test.com"
```
**JSON 数组**
JSON 数组在中括号中书写：
数组可包含多个对象：
```json
{
"sites": [
{ "name":"test" , "url":"www.test.com" },
{ "name":"google" , "url":"www.google.com" },
{ "name":"微博" , "url":"www.weibo.com" }
]
}
```
在上面的例子中，对象 "sites" 是包含三个对象的数组。每个对象代表一条关于某个网站（name、url）的记录。
**JSON 布尔值**
JSON 布尔值可以是 true 或者 false：
```json
{ "flag":true }
```
**JSON null**
JSON 可以设置 null 值：
```json
{ "test":null }
```
**JSON 使用 JavaScript 语法**
因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。
通过 JavaScript，你可以创建一个对象数组，并像这样进行赋值：
```js
var sites = [
    { "name":"test" , "url":"www.test.com" },
    { "name":"google" , "url":"www.google.com" },
    { "name":"微博" , "url":"www.weibo.com" }
];
```
可以像这样访问 JavaScript 对象数组中的第一项（索引从 0 开始）：
```js
sites[0].name;
```
返回的内容是：
```
test
```
可以像这样修改数据：
```js
sites[0].name="test";
```
---
## 对象
**对象语法**
```json
{ "name":"test", "alexa":10000, "site":null }
```
JSON 对象使用在大括号 `{}` 中书写。
对象可以包含多个 key/value（键/值）对。
key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。
key 和 value 中使用冒号 `:` 分割。
每个 key/value 对使用逗号 `,` 分割。
**访问对象值**
你可以使用点号 `.` 来访问对象的值：
```html
```
你也可以使用中括号 `[]` 来访问对象的值：
```js
var myObj, x;
myObj = { "name":"test", "alexa":10000, "site":null };
x = myObj["name"];
```
**循环对象**
你可以使用 for-in 来循环对象的属性：
```html
var myObj = { "name":"test", "alexa":10000, "site":null };
for (x in myObj) {
    document.getElementById("demo").innerHTML += x + "";
}
```
在 for-in 循环对象的属性时，使用中括号 `[]` 来访问属性的值：
```js
var myObj = { "name":"test", "alexa":10000, "site":null };
for (x in myObj) {
    document.getElementById("demo").innerHTML += myObj[x] + "";
}
```
**嵌套 JSON 对象**
JSON 对象中可以包含另外一个 JSON 对象：
```json
myObj = {
    "name":"test",
    "alexa":10000,
    "sites": {
        "site1":"www.test.com",
        "site2":"m.test.com",
        "site3":"c.test.com"
    }
}
```
你可以使用点号 `.` 或者中括号 `[]` 来访问嵌套的 JSON 对象。
```html
myObj = {
	"name":"test",
	"alexa":10000,
	"sites": {
		"site1":"www.test.com",
		"site2":"m.test.com",
		"site3":"c.test.com"
	}
}
document.getElementById("demo").innerHTML += myObj.sites.site1 + "";
// 或者
document.getElementById("demo").innerHTML += myObj.sites["site1"];
```
**修改值**
你可以使用点号 `.` 来修改 JSON 对象的值：
```html
var myObj, i, x = "";
myObj = {
    "name":"test",
    "alexa":10000,
    "sites": {
        "site1":"www.test.com",
        "site2":"m.test.com",
        "site3":"c.test.com"
    }
}
myObj.sites.site1 = "www.google.com";
for (i in myObj.sites) {
    x += myObj.sites[i] + "";
}
document.getElementById("demo").innerHTML = x;
```
你可以使用中括号 `[]` 来修改 JSON 对象的值：
```js
myObj.sites["site1"] = "www.google.com";
```
**删除对象属性**
我们可以使用 delete 关键字来删除 JSON 对象的属性：
```html
var myObj, i, x = "";
myObj = {
    "name":"test",
    "alexa":10000,
    "sites": {
        "site1":"www.test.com",
        "site2":"m.test.com",
        "site3":"c.test.com"
    }
}
delete myObj.sites.site1;
for (i in myObj.sites) {
    x += myObj.sites[i] + "";
}