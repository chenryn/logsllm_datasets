ࣷ wgbib j
i ࢱwb j
wbi
wgbib j
k
 SHA-1
k

Enck
wbi
i w
b j
j
All cryptographic primitives were used as provided by
the Java Cryptography Extension (JCE). Our experi-
ments were performed on two Dell boxes (Intel Core Duo
E8400 3GHz) connected on a local-area network.
4 Hamming Distance
The Hamming distance Hammingaaabbb between two ࡁ-
bit strings aaa  aࡁࢤ1a1a0 and bbb  bࡁࢤ1b1b0 is sim-
ply the number of positions i where bi ࢧ ai. Here we
consider secure computation of Hammingaaabbb where
one party holds aaa and the other has input bbb. Secure
Figure 1: Circuit computing Hamming distance.
Hamming-distance computation has been used as a sub-
routine in several privacy-preserving protocols [15, 26].
As part of their SciFI work, Osadchy et al. [26] show
a protocol based on homomorphic encryption for secure
computation of Hamming distance. To reduce the on-
line cost of the computation, SCiFI uses pre-computation
techniques aggressively. They report that for ࡁ  900
their protocol has an “off-line” running time of 213s and
an “on-line” running time of 0.31s. (Note that their mea-
sure of “off-line running time” includes the time for any
processing done locally by one party before sending a
message to the other party, even when the local process-
ing depends on that party’s input.)
4.1 Circuit-Based Approach
We explore a garbled-circuit approach to secure Ham-
ming-distance computation. The high level design of a
circuit Hamming for computing the Hamming distance is
given in Figure 1. The circuit ﬁrst computes the XOR
of the two ࡁ-bit input strings vvvvvv߰, and then uses a sub-
circuit Counter to count the number of 1s in the result.
The output is a k-bit value, where k  ऄlog ࡁअ.
A na¨ıve design of the Counter submodule is to use ࡁ
copies of a k-bit AddOneBit circuit, so that in each of
the ࡁ iterations the Counter circuit accumulates one bit
of vvvࣷ vvv߰߰߰ in the k-bit counter.
Since XOR gates are free and an k-bit Adder needs
only k non-XOR gates [17], the Hamming circuit with
the na¨ıve Counter needs ࡁ  ऄlog ࡁअ non-free gates. We
improve upon this by changing the Counter design so as
to reduce the number of gates while enabling the gates to
be evaluated in parallel.
First, we observe that the widths of the early one-bit
adders can be far smaller than k bits. At the ﬁrst level,
the inputs are single bits, so a 1-bit adder with carry is
sufﬁcient; at the next level, the inputs are 2-bits, so a 2-bit
adder is sufﬁcient. This follows throughout the circuit,
halving the total number of gates to ࡁऄlog ࡁअ
.
Second, the serialized execution order is unnecessary.
We improved the na¨ıve design to yield a parallel ver-
sion of Counter given in Figure 2. Our current execution
framework does not support parallel execution, but is de-
signed so that this can be readily supported in a future
version.
2
Figure 2: Parallelized Counter circuit.
4.2 Results
We implemented a secure protocol
for Hamming-
distance computation using the circuit from the previous
section and the Java framework described in Section 3.
Computing the Hamming distance between two 900-bit
vectors took 0.019 seconds and used 56 KB bandwidth
in the online phase (including garbled circuit generation
and evaluation), with 0.051 seconds (of which the OT
takes 0.018 seconds) spent on off-line preprocessing (in-
cluding garbled circuit setup and the OT extension proto-
col setup and execution). For the same problem, the pro-
tocol used in SCiFI took 0.31 seconds for on-line com-
putation, even at the cost of 213 seconds spent on pre-
processing.3 The SCiFI paper did not report bandwidth
consumption, but we conservatively estimate that their
protocol would require at least 110 KB. In addition to
the dramatic improvement in performance, our approach
is quite scalable. Figure 3 shows how the running time
of our protocol scales with increasing input lengths.
The garbled-circuit implementation has another ad-
vantage as compared to the homomorphic-encryption
approach taken by SCiFI: if the obliviously calculated
Hamming distances are not the ﬁnal result, but are only
intermediate results that are used as inputs to another
computation, then a garbled-circuit protocol is much bet-
ter in that by its nature it can be readily composed with
any subsequent secure computation.
In contrast, this
is very inconvenient for homomorphic-encryption-based
protocols because arbitrary operations over the encryp-
tions are not possible. As an example, in the SCiFI ap-
plications the parties do not want to reveal the computed
Hamming distance h directly but instead only want to
determine if h  hmax for some public value hmax. Os-
adchy et al. had to design a special protocol involving
adding random noise to the h values and using an obliv-
3Osadchy et al. [26] used a 2.8 GHz dual core Pentium D with 2 GB
RAM for their experiments, so the comparison here is reasonably close.
Also note that for their experiments, Osadchy et al. conﬁgured their
host to turn off the Nagle ACK delay algorithm, which substantially
improved network performance. This is not realistic for most network
settings and was not done in our experiments.
Figure 3: On-line running time of our Hamming-distance
protocol for different input lengths.
ious transfer protocol to handle this. In our case, how-
ever, we would only need to add a comparator circuit af-
ter the Hamming-distance computation. In fact, with our
approach further optimizations would be possible when
hmax is known since at most the ऄloghmaxअ low-order bits
of the Hamming distance need to be computed.
5 Levenshtein Distance
The Levenshtein distance (also known as edit dis-
tance) between two strings has applications in DNA and
protein-sequence alignment, as well as text comparison.
Given two strings α and β , the Levenshtein distance be-
tween them (denoted Levenshteinαβ ) is deﬁned as the
minimum number of basic operations (insertion, dele-
tion, or replacement of a single character) that are needed
to transform α into β . In the setting we are concerned
with here, one party holds α and the other holds β and
the parties wish to compute Levenshteinαβ .
Algorithm 1 is a standard dynamic-programming al-
gorithm for computing the Levenshtein distance between
two strings. The invariant is that ,E always rep-
resents the Levenshtein distance between α    E and
β     . Lines 2–4 initialize each entry in the ﬁrst row
of the matrix ,, while lines 5–8 initialize the ﬁrst col-
umn. Within the two for-loops (lines 8–13), ,E is
assigned at line 11 to be the smallest of ,Eࢤ   1,
,Eࢤ   1, or ,Eࢤ ࢤ   J (where J is 0 if
αE  β  and 1 if they are different). These corre-
spond to the three basic operations insert αE, delete
β , and replace αE with β .
5.1 State of the Art
Jha et al. give the best previous implementation of a se-
cure two-party protocol for computing the Levenshtein
distance [16]. Instead of using Fairplay, they developed
their own compiler based on Fairplay, while borrow-
000000501001502002500100020003000400050006000700080009000Running Time (miliseconds)Input Size (bits in each vector),E ࢎ E;
Algorithm 1 Levenshtein(α, β )
1: Initialize ,αACJDβ ACJD;
2: for E ࢎ  to αACJD do
3:
4: end for
5: for  ࢎ  to β ACJD do
6:
7: end for
8: for E ࢎ  to αACJD do
9:
10:
11:
, ࢎ ;
for  ࢎ  to β ACJD do
J ࢎ αE  β  ?  : ;
,E ࢎ min,Eࢤ +1, ,Eࢤ +1,
,Eࢤ ࢤ +J);
end for
12:
13: end for
ing the function-description language (SFDL) and the
circuit-description language (SHDL) directly from Fair-
play. Jha et al. investigated three different strategies for
securely computing the Levenshtein distance. Their ﬁrst
protocol (Protocol 1) directly instantiated Algorithm 1
as an SFDL program, which was then compiled into a
garbled-circuit implementation. Because their garbled-
circuit execution approach required keeping the entire
circuit in memory, they concluded that garbled circuits
could not scale to large inputs. The largest problem size
their compiler and execution environment could handle
before crashing was where the parties’ inputs were 200-
character strings over an 8-bit (256-character) alphabet.
Their second protocol combined garbled circuits with
an approach based on secure computation with shares.
The resulting protocol was scalable, but extremely slow.
Finally, they proposed a hybrid protocol (Protocol 3) by
combining the ﬁrst two approaches to achieve better per-
formance with scalability.
According to their results, it took 92 seconds for Pro-
tocol 1 to complete a problem of size 100   100 (i.e.,
two strings of length 100) over an 8-bit alphabet. This
protocol required nearly 2 GB of memory to handle the
200 200 case [16]. Their ﬂagship protocol (Protocol 3),
which is faster for larger problem sizes, took 658 sec-
onds and used 364.3 MB bandwidth on a problem of
size 200  200 over an 8-bit alphabet.
5.2 Circuit-Based Approach
We observed that the circuit used for secure computation
of Levenshtein distance can be much smaller than the cir-
cuit produced from a high-level SFDL description. The
main reason is that the SFDL description does not dis-
tinguish parts of the computation that can be performed
locally by one of the parties, nor does it take advantage
of the actual number of bits required for values at inter-
mediate stages of the computation.
The portion of the computation responsible for initial-
izing the matrix (lines 2–7) does not require any collabo-
ration, and thus can be completed by each party indepen-
dently. Moreover, since the length of each party’s private
string is not meant to be kept secret, the two for-loops
(lines 8–9) can be managed by each party independently
as long as they keep the inner executions synchronized,
leaving only two lines of code (lines 10–11) in the inner-
most loop that need to be computed securely.
Let ࡁ denote the length of the parties’ input strings, as-
sumed to be over a σ-bit alphabet. Figure 5a presents a
circuit, LevenshteinCore, that is computationally equiv-
alent to lines 10–11. The T (stands for “test”) circuit in
that ﬁgure outputs 1 if the input strings provided are dif-
ferent. Figure 4 shows the structure of the T circuit. (For
the purposes of the ﬁgures in this section, we assume
σ  2 since this is the alphabet size that would be used
for genomic comparisons. Nevertheless, everything gen-
eralizes easily to larger σ.) For a σ-bit alphabet, the T
circuit uses σ ࢤ 1 non-free gates.
The rest of the circuit computes the minimum of the
three possible edits (line 11 in Algorithm 1). We be-
gin with the straightforward implementation shown in
Figure 5a. The values of ,Eࢤ , ,Eࢤ , and
,Eࢤ ࢤ  are each represented as ࡁ-bit inputs to the
circuit. For now, this is ﬁxed as the maximum value of
any ,E value. Later, we reduce this to the maximum
value possible for a particular core component. Because
of the way we deﬁne ࡁ there is no need to worry about
the carry output from the adders since ࡁ is deﬁned as the
number of bits needed to represent the maximum out-
put value. The circuit shown calculates exactly the same
function as line 11 of Algorithm 1, producing the out-
put value of ,E. The full Levenshtein circuit has one
LevenshteinCore component for each i and j value, con-
nected to the appropriate inputs and producing the output
value ,E. The output value of the last Levenshtein-
Core component is the Levenshtein distance.
Recall that each ࡁ-bit AddOneBit circuit uses ࡁ non-
free gates, and each ࡁ-bit 2-MIN uses 2ࡁ non-free
gates. So, for problems on a σ-bit alphabet, each ࡁ-bit
NaiveLevenshteinCore circuit uses 7ࡁ  σ ࢤ 1 non-free
gates. Next, we present two optimizations that reduce
the number of non-free gates involved in computing the
Figure 4: T circuit.
(a) Na¨ıve
(b) Better
(c) Final
Figure 5: Implementations of the Levenshtein core circuit.
Levenshtein core to 5ࡁ  σ.
Since min,Eࢤ   1 ,Eࢤ   1 is equiv-
alent to min,Eࢤ  ,Eࢤ   1, we can com-
bine the two AddOneBit circuits (at the top left of Fig-
ure 5a) into a single one, and interchange it with the sub-
sequent 2-MIN as shown in Figure 5b. The circuits in
the dashed box in Figure 5b compute minN  1 O  J,
where J ࢠ 01. This is functionally equivalent to:
if O  N then N  1 else O  J
Hence, we can reuse one of the AddOneBit circuits by
putting it after the GT logic embedded in the MIN cir-
cuit. This leads to the optimized circuit design shown
in Figure 5c. Note that the 1-bit output wire connect-
ing the 2-MIN and 1-bit MUX circuits is essentially the
1-bit output of the GT sub-circuit inside 2-MIN. This
change reduces the number of gates in the core circuit
to 2  2ࡁ  ࡁ  σ ࢤ 1  1  5ࡁ  σ.
The ﬁnal optimization takes advantage of the obser-
vation that the minimal number of bits needed to repre-
sent ,E varies throughout the computation. For ex-
ample, one bit sufﬁces to represent , while more
bits are required to represent ,E for larger E’s and
’s. The value of ,E can always be represented using
ऄlogminE अ bits. The number of gates decreases by:
ऄ
logmini jअ
i1 ∑ࡁ
j1
1ࢤ ∑ࡁ
ࡁ2ऄlog ࡁअ