ture to detect similarities among binaries. Flake [29]
proposed a technique to analyze binaries as graphs of
graphs, and we have been inspired by his work for the
control ﬂow analysis described in Section 4. Kruegel et
al. [39] proposed a similar technique in which they ana-
lyzed the control ﬂow graphs of a number of worms and
they used a graph coloring technique to cope with the
graph-isomorphism problem.
Finally, one step of our technique required to cluster
together similar malware samples. There are several pa-
pers in the area of malware clustering [31, 33, 51, 32].
However, their goal is to cluster together samples belong-
ing to the same malware family as fastest as possible and
with the highest accuracy. This is a crucial task for all
the Antivirus companies. However, our goal is differ-
ent as we are interested in clustering samples based only
on binary similarity and we do not have any interest in
clustering together members of the same family based
on their behavior.
9 Conclusion
Public dynamic analysis sandboxes collect thousands of
new malware samples every day. Most of these submis-
sions belong to well known malware families, or are be-
nign ﬁles that do not pose any relevant security threat.
However, hidden in this large amount of collected data,
few samples have something special that distinguishes
them from the rest. In this paper, we discussed the im-
portance of looking at these samples from an intelligence
and threat prevention point of view.
We show that several binaries used in the most fa-
mous targeted attack campaigns had been submitted
to our sandbox months before the attack was ﬁrst re-
ported. Moreover, we propose a ﬁrst attempt to mine the
database of a popular sandbox, looking for signs of mal-
ware development. Our experiments show promising re-
sults. We were able to automatically identify thousands
of developments, and to show how the authors modify
their programs to test their functionalities or to evade de-
tections from known sandboxes. Around 1,500 of them
were real malware developments – some of which have
been later observed on thousands of infected machines
around the world.
Acknowledgment
We would like to thank Claudio Guarnieri for the fruitful
discussions and insights.
USENIX Association  
24th USENIX Security Symposium  1069
13
References
[1] Amnpardaz SandBox Jevereg. http://jevereg.amnpardaz.
com/.
[2] AV Tracker. http://avtracker.info/.
[3] Comodo Instant Malware Analysis. http://camas.comodo.
com/.
[4] ThreatTrack
Security
Public
Sandbox.
http:
//www.threattracksecurity.com/resources/
sandbox-malware-analysis.aspx.
[5] ViCheck. https://www.vicheck.ca.
[6] Xandora - Suspicious File Analyzer. http://www.xandora.
net/xangui/.
[7] Xtreme RAT.
xxtremerat/.
https://sites.google.com/site/
[8] Bifrost Builder. http://www.megasecurity.org/trojans/
b/bifrost/Bifrost2.0special.html, 2008.
[9] Poison Ivy RAT. http://www.poisonivy-rat.com, 2008.
[10] Anubis. http://anubis.iseclab.org, 2009.
[11] A new approach to China. http://googleblog.blogspot.
fr/2010/01/new-approach-to-china.html, 2010.
[12] Darpa
Cyber Genome
Project.
https://www.
fbo.gov/index?s=opportunity&mode=form&id=
c34caee99a41eb14d4ca81949d4f2fde, 2010.
[13] Malwr. https://malwr.com, 2010.
[14] ThreatExpert. http://www.threatexpert.com/, 2010.
[15] Malbox. http://malbox.xjtu.edu.cn/, 2011.
[16] Virustotal
Behavioural
+=
Information.
http://blog.virustotal.com/2012/07/
virustotal-behavioural-information.html, 2012.
[17] The Red October Campaign - An Advanced Cyber Espi-
onage Network Targeting Diplomatic and Government Agencies.
https://www.securelist.com/en/blog/785/, 2013.
[18] TotalHash. http://totalhash.com/, 2013.
[19] RDG Tejon Crypter. http://blackshop.freeforums.org/
rdg-tejon-crypter-2014-t743.html, 2014.
Import
Malware
[20] Tracking
ing.
tracking-malware-import-hashing/, 2014.
with
Hash-
https://www.mandiant.com/blog/
[21] VirusTotal += imphash.
http://blog.virustotal.com/
2014/02/virustotal-imphash.html, 2014.
[22] XtremeRAT: Nuisance
or
Threat?
http://
www.fireeye.com/blog/technical/2014/02/
xtremerat-nuisance-or-threat.html, 2014.
[23] BALZAROTTI, D., COVA, M., KARLBERGER, C., KRUEGEL,
C., KIRDA, E., AND VIGNA, G. Efﬁcient Detection of Split
Personalities in Malware.
In Proceedings of the Network and
Distributed System Security Symposium (NDSS) (San Diego, CA,
February 2010), NDSS 10.
[24] BAYER, U., HABIBI, I., BALZAROTTI, D., KIRDA, E., AND
KRUEGEL, C. A view on current malware behaviors. In USENIX
workshop on large-scale exploits and emergent threats (LEET)
(April 2009), LEET 09.
[25] BILGE, L., AND DUMITRAS, T. Before we knew it: An empir-
ical study of zero-day attacks in the real world. In Proceedings
of the 2012 ACM Conference on Computer and Communications
Security (New York, NY, USA, 2012), CCS ’12, ACM, pp. 833–
844.
[26] BRUSCHI, D., MARTIGNONI, L., AND MONGA, M. Using Code
Normalization for Fighting Self-Mutating Malware. In Proceed-
ings of the International Symposium of Secure Software Engi-
neering (ISSSE) (Mar. 2006), IEEE Computer Society. Arlington,
VA, USA.
[27] DIXON,
B.
virustotal.
watching-attackers-through-virustotal/, 2014.
Watching
through
http://blog.9bplus.com/
attackers
[28] DUMITRAS, T., AND SHOU, D. Toward a standard benchmark
for computer security research: The worldwide intelligence net-
work environment (wine). In Proceedings of the First Workshop
on Building Analysis Datasets and Gathering Experience Returns
for Security (2011), BADGERS ’11.
[29] FLAKE, H. Structural comparison of executable objects.
In
In Proceedings of the IEEE Conference on Detection of Intru-
sions and Malware & Vulnerability Assessment (DIMVA (2004),
pp. 161–173.
[30] HAYES, M., WALENSTEIN, A., AND LAKHOTIA, A. Evalua-
tion of malware phylogeny modelling systems using automated
variant generation, 2009.
[31] HU, X., BHATKAR, S., GRIFFIN, K., AND SHIN, K. G.
Mutantx-s: Scalable malware clustering based on static features.
In Proceedings of the 2013 USENIX Conference on Annual Tech-
nical Conference (Berkeley, CA, USA, 2013), USENIX ATC’13,
USENIX Association, pp. 187–198.
[32] JACOB, G., COMPARETTI, P. M., NEUGSCHWANDTNER, M.,
KRUEGEL, C., AND VIGNA, G. A static, packer-agnostic ﬁlter
to detect similar malware samples.
In Proceedings of the 9th
International Conference on Detection of Intrusions and Mal-
ware, and Vulnerability Assessment (Berlin, Heidelberg, 2013),
DIMVA’12, Springer-Verlag, pp. 102–122.
[33] JANG, J., BRUMLEY, D., AND VENKATARAMAN, S. Bitshred:
Feature hashing malware for scalable triage and semantic anal-
ysis. In Proceedings of the 18th ACM Conference on Computer
and Communications Security (New York, NY, USA, 2011), CCS
’11, pp. 309–320.
[34] JANG, J., WOO, M., AND BRUMLEY, D. Towards automatic
software lineage inference. In Proceedings of the 22Nd USENIX
Conference on Security (Berkeley, CA, USA, 2013), SEC’13,
USENIX Association, pp. 81–96.
[35] KASPERSKY
death
GREAT
TEAM.
star
The
galaxy.
//securelist.com/blog/research/68750/
equation-the-death-star-of-malware-galaxy/, 2015.
of malware
Equation:
http:
[36] KHOO, W. M., AND LIO, P. Unity in diversity: Phylogenetic-
inspired techniques for reverse engineering and detection of mal-
ware families. SysSec Workshop (2011), 3–10.
[37] KOIVUNEN, T. Sigbuster. http://www.teamfurry.com",
2009.
[38] KORNBLUM, J. Identifying almost identical ﬁles using context
triggered piecewise hashing. Digital Investigation 3, Supplement,
0 (2006), 91 – 97.
[39] KRUEGEL, C., KIRDA, E., MUTZ, D., ROBERTSON, W., AND
VIGNA, G. Polymorphic worm detection using structural infor-
mation of executables.
In Proceedings of the 8th International
Conference on Recent Advances in Intrusion Detection (Berlin,
Heidelberg, 2006), RAID’05, Springer-Verlag, pp. 207–226.
[40] KURTZ, G.
Operation Aurora hit Google, Others.
http://web.archive.org/web/20100327181927/http:
//siblog.mcafee.com/cto/operation-%E2%80%
9Caurora%E2%80%9D-hit-google-others, 2010.
1070  24th USENIX Security Symposium 
USENIX Association
14
A Individual Sample Features
[41] LANDWEHR, N., HALL, M., AND FRANK, E. Logistic model
trees. In Machine Learning: ECML 2003 (2003), Springer Berlin
Heidelberg, pp. 241–252.
[42] LIGH, M. Using IDT for VMM Detection. http://www.mnin.
org/?page=vmmdetect.
[43] LINDORFER, M., DI FEDERICO, A., MAGGI, F., MI-
LANI COMPARETTI, P., AND ZANERO, S. Lines of Malicious
Code: Insights Into the Malicious Software Industry. In Proceed-
ings of the 28th Annual Computer Security Applications Confer-
ence (ACSAC) (2012).
[44] LINDORFER, M., KOLBITSCH, C., AND MILANI COM-
PARETTI, P. Detecting Environment-Sensitive Malware. In Pro-
ceedings of the 14th International Conference on Recent Ad-
vances in Intrusion Detection (RAID) (2011).
[45] MORGAN MARQUIS-BOIRE, CLAUDIO GUARNIERI,
AND RYAN GALLAGHER.
Secret malware in euro-
pean union attack linked to u.s. and british intelligence.
https://firstlook.org/theintercept/2014/11/24/
secret-regin-malware-belgacom-nsa-gchq/, 2014.
[46] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring mul-
tiple execution paths for malware analysis.
In Proceedings of
the 2007 IEEE Symposium on Security and Privacy (Washington,
DC, USA, 2007), SP ’07, IEEE Computer Society, pp. 231–245.
[47] QUIST, D., AND SMITH, V. Detecting the Presence of Vir-
http://www.
tualmachines Using the Local Data Table.
offensivecomputing.net/files/active/0/vm.pdf.
[48] RUTKOWSKA, J. Red Pill... or how to detect VMM using
http://web.archive.org/
(almost) one CPU instruction.
web/20070911024318/http://invisiblethings.org/
papers/redpill.html, 2004.
[49] SÆBJØRNSEN, A., WILLCOCK, J., PANAS, T., QUINLAN, D.,
AND SU, Z. Detecting code clones in binary executables. In Pro-
ceedings of the Eighteenth International Symposium on Software
Testing and Analysis (2009), ISSTA ’09.
[50] SYMANTEC SECURITY RESPONSE. Regin: Top-tier espionage
http://www.symantec.
tool enables stealthy surveillance.
com/content/en/us/enterprise/media/security_
response/whitepapers/regin-analysis.pdf, 2014.
[51] WICHERSKI, G. pehash: A novel approach to fast malware clus-
tering. In Proceedings of the 2Nd USENIX Conference on Large-
scale Exploits and Emergent Threats: Botnets, Spyware, Worms,
and More (Berkeley, CA, USA, 2009), LEET’09, USENIX As-
sociation, pp. 1–1.
[52] ZETTER, K. A google site meant to protect you is help-
ing hackers attack you. http://www.wired.com/2014/09/
how-hackers-use-virustotal/, 2014.
USENIX Association  
24th USENIX Security Symposium  1071
15
A: File Features
A.1 Filename
A.2 File size
A.3 MD5
A.4 Fuzzy Hashes
B: Timestamps
B.1 Submission time
B.2 Compile time
B.3 Symantec ﬁrst
B.4 VirusTotal ﬁrst
C: AV Features
C.1 AV-Detection
C.2 AV-Labels
D: User-based Features
D.1 User Agent
D.2 Languages
D.3 IP
D.4 IP Geolocation
D.5 Email address
D.6 Proxy
E: Binary Features
E.1 N.Sections
E.2 N.Fuctions
E.3 Code Coverage
E.4 Programming Language
E.5 Metadata
F: Behavioral Features
F.1 Duration
F.2 Errors
F.3 Evasion
F.4 Behavior Bitstring
The original name of the ﬁle submitted by the user
The size of the ﬁle
Simple hash used for lookup in other data sources
Using SSDeep algorithm
Time in which the sample was submitted to Anubis Sandbox
Time in which the binary was compiled
Time the sample was ﬁrst observed in the wild by Symantec
Time in which the binary was ﬁrst submitted to VirusTotal
Number of AV that ﬂag the samples as malicious (according to VirusTotal)
List of AV labels associated to the sample (according to VirusTotal)
User agent of the browser used to submit the sample
Languages accepted by the user browser
(according to the accept-language HTTP header)
IP address of the user who submitted the ﬁle
Geolocation of the user IP address
Optional email address speciﬁed when the sample was submitted
Boolean value used to identify submission through popular anonymization proxies
Number of sections in the PE ﬁle
Number of functions identiﬁed by the disassembly
Fraction of .text segment covered by the identiﬁed functions
Programming language used to develop the binary
Filenames and username extracted from the PE ﬁle
Duration in seconds of the analysis
Error raised during the analysis
Known anti-sandbox techniques detected by the sandbox itself
Sequence of 24 boolean ﬂags that characterize the behavior of the sample.
(has popups, has udp traffic, has http, has tcp address scan,
modified registry keys, . . . )
Table 5: List of Individual Features associated to each sample
1072  24th USENIX Security Symposium 
USENIX Association
16