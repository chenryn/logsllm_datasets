### 优化后的文本

#### 图22: C2的RRC状态机仅有两个状态，省略了FACH。

| 状态 | 能耗 (mJ) |
| --- | --- |
| Non-tail | 12000 |
| Tail | 10000 |
| C1 | 8000 |
| C2 | 6000 |

#### 表4: 用户研究跟踪中的RRC状态转换分布
- C1在23.4%的时间内经历RRC状态转换。
- C2仅在6.5%的时间内经历RRC状态转换。

#### 图23: 尾部能耗对总能耗的贡献
- 对于C1，尾部能耗占总能耗的35.68%。
- 对于C2，尾部能耗仅占总能耗的2.88%。

#### 图24: RRC状态转换引入的额外延迟
- C1和C2的3G网络中，不同类型的RRC状态转换导致的网页加载时间分布。
- C2 DCH→DISCONNECTED→DCH的转换只有单个数据点。

#### 内容类型
包括新闻、电影、体育、社交网络、谷歌搜索结果和旅行指南。C1和C2实验之间的平均相对下载数据大小差异仅为1.94%，这主要是由HTTP元数据（如时间、编码机制等）的变化引起的，而非网页内容的变化。

#### 发现10: 2状态RRC状态机模型与3状态RRC状态机模型的比较
- 2状态RRC状态机模型经历RRC状态转换的概率降低了16.9%，导致网页加载时间减少了22.8%。
- 图24显示了C1和C2的3G网络中不同类型RRC状态转换的网页加载时间分布，表4则展示了不同类型转换的百分比。
- 与之前的研究一致 [35, 34]，当涉及RRC状态机转换时，C1和C2的3G网络中的加载时间会变长。最糟糕的情况是同时涉及状态提升和降级——页面加载时间至少翻倍。
- 根据QxDM日志，对于C1，DCH→FACH和FACH→PCH降级定时器分别为3秒和6秒；而对于C2，DCH→Disconnected定时器为10秒，大约等于3状态模型中降级定时器的总和。
- 因此，C2较少的状态转换主要是由于简化了状态机设计，去掉了中间状态：它大部分时间保持在DCH状态，一旦提升，几乎不会降级。这使得C2的2状态模型的加载时间比C1的3状态模型减少了22.8%。
- 我们还使用§5.3中描述的技术计算了能耗。如图23所示，尽管总体能耗相似，但由于降级概率较低，C2的尾部能耗比C1低92.5%。
- 这些结果我们认为可以推广到其他应用，而不仅仅是网页浏览应用，因为根本原因在于RRC状态机的设计。

### 相关工作
- **UI自动化工具**：UI自动化工具常用于动态分析应用程序，以检测应用错误。例如，Dynodroid [29]、A3E [16]、VanarSena [37] 和ContextualFuzzing [27] 通过自动探索所有可能的内部状态来发现应用错误和崩溃。AMC [26] 自动探索应用UI状态以检查车载应用的UI要求违规。DECAF [28] 使用UI自动化来检测广告欺诈。AppsPlayground [36] 提供了一个框架，使用模糊测试进行恶意软件分析。PUMA [21] 提供了一个通用的可编程框架。与PUMA不同，本文中的QoE Doctor旨在分析正常移动应用使用中的QoE，而不是暴露异常行为。我们特别设计了UI自动化中的等待组件，以准确测量用户感知的延迟。

- **QoE测量**：先前的工作通过用户的主观评价来测量应用QoE。例如，D. Joumblatt等人 [24]、Chen等人 [20] 和Ickin等人 [23] 基于用户满意度和不满意定义了目标QoE指标。Schatz等人 [42] 和Balachandran等人 [17, 18] 使用用户参与度作为预测的目标QoE。与他们不同，我们关注的是客观QoE指标，这些指标可以重复且自动测量。Prometheus [15]、AppInsight [38]、Timecard [39] 和Panappticon [47] 测量客观QoE指标，但它们需要访问应用源代码或对应用逻辑或底层系统进行插桩，而QoE Doctor不需要。

- **QoE估计**：从网络流量估计QoE也是一种流行的方法。D. Joumblatt等人 [24] 从网络指标预测网络应用的QoE。Schatz等人 [42] 和Balachandran等人 [17, 18] 构建了一个预测框架，以找到可测量的用户参与度指标与可操作的视频交付机制之间的关系（例如初始加载时间和缓冲率）。Prometheus [15] 使用被动网络测量预测客观QoE指标，如缓冲时间。与他们不同，QoE Doctor不预测或估计QoE指标，而是直接测量QoE指标的真实值。

- **QoE改进**：也有工作致力于改善移动应用的QoE。例如，Timecard [39] 通过对移动操作系统进行插桩，确保用户感知的延迟满足截止时间要求。Proteus [46] 实时预测蜂窝网络的未来性能，提高RTC应用的QoE。Sprout [45] 为需要低延迟和高吞吐量的应用（如视频会议）构建了一种基于UDP的端到端协议。我们的工作是互补的：QoE Doctor可以自动且反复地收集和分析QoE数据，验证这些系统，并可能揭示新的QoE问题的根本原因，为未来的QoE改进提供指导。

- **跨层分析**：跨层分析较少被广泛探索。RILAnalyzer [44] 使用跨层分析方法揭示RRC状态如何影响应用性能。与之相比，QoE Doctor支持直接从UI变化中自动收集客观QoE值，而不依赖用户研究或研究TCP操作等不太直接相关的网络层性能指标。ARO [35] 通过分析tcpdump跟踪来揭示应用性能问题。然而，与QoE Doctor相比，他们的工作主要集中在无线电资源效率问题上，而不是应用QoE。

### 结论
本文构建了一个名为QoE Doctor的工具，该工具可以自动重放感兴趣的用户交互序列，测量移动应用的QoE，记录相关QoE指标，并允许跨多个层次分析QoE问题的根本原因，涵盖系统和网络堆栈。使用该工具，我们系统地研究了流行应用的各种QoE指标，并定量评估了各种QoE相关因素对这些QoE指标的影响。通过QoE Doctor，我们发现了几个重要的QoE问题及其潜在的根本原因，适用于主要应用和运营商。

### 致谢
感谢Yihua Ethan Guo、Ashkan Nikravesh、匿名评审员以及我们的导师Anmol Sheth提供的宝贵建议和反馈。我们还要感谢T-Mobile的Warren McNeel、John Murphy、Pete Myron、Isaac Robinson、Samson Kwong、Jeffery Smith、设备开发和QoE实验室团队的帮助。本研究部分得到了美国国家科学基金会的支持，资助编号为CNS-1059372、CNS-1039657、CNS-1345226和CNS-0964545。

### 参考文献
[此处列出参考文献]

希望这些优化能帮助你更好地传达你的研究内容！如果有更多细节需要进一步优化，请随时告知。