讨论
定位符和文本行
正则表达式中的记号、$>、A>、Z>和z>被称作是定位符（anchor）。它们并不匹
配任意字符。事实上，它们匹配的是特定的位置，也就是说把正则表达式瞄准这些位
置来进行匹配。
文本行指的是位于目标文本的开始和第一个换行符，在两个换行符之间，或者在最后
一个换行符和目标文本结尾之间的那部分目标文本。如果在目标文本中不包含换行符
的话，你的整个目标就会被认为是一行。因此，下面的文本包含有4行，分别是one、
two、一个空串和four。
one
two
four
这个文本可以在程序中采用如下的表示：oneLFtwoLELFfour。
目标文本的起始
定位符总是会匹配目标文本的最开始处，也就是在第一个字符的前面。这也是它会
36
第2章
www.TopSage.com
---
## Page 53
匹配的唯一位置。可以把A>放到你的正则表达式的开始处，这样就可以检查目标文
本是否是由你想要匹配的文本来开头的。注意这里的“A”必须是大写的。
JavaScript不支持A>。
Ruby之外的所有其他正则流派来说，该选项都是默认关闭的。但是要记住在Ruby中
并没有提供可以关掉这个选项的手段。
除非你使用的是JavaScript，那么我们推荐你总是使用。《A>的含义总是
保持不变的，因此可以避免由于正则选项设置而造成的混淆或错误。
自标文本的结尾
定位符和总是会匹配目标文本的结尾处，也就是说在最后一个字符之后。
把Z>或放到正则表达式的结尾处，就可以测试是否目标文本会以你想要匹配的文本
来作为结束。
.NET、Java、PCRE、Perl和Ruby同时支持和。Python只支持。JavaScript
则根本不提供对之或z>的支持。
之和的唯一区别是当目标文本的最后一个字符是换行符的时候。在这种情形下，
Z）可以匹配目标文本的最结尾处，也就是在最后的换行符之后的位置，同时也可以匹配
紧跟在这个换行符之前的位置。这样做的好处是，你可以放心地搜索（omega\Z>，而不必担
心在你的目标文本的最后是不是会存在一个多余的换行符。当逐行读入一个文件的时候，
有些工具会包含行末的换行符，而有些工具则不然：（omega乙会把这种区别隐藏起来。z>则
只会匹配目标文本的最末尾处，因此如果存在一个多余换行符的话，那么它就无法匹配。
定位符是等价的，前提是不要打开“和$匹配换行处”这个选项。对于除了
Ruby之外的所有其他正则流派来说，该选项都是默认关闭的。而且在Ruby中并没有
提供可以关掉这个选项的手段。正像Z>一样，$>也会匹配目标文本的最末尾处，以及
（如果存在的话）在最后一个换行符之前的位置。
为了帮助你更好地理解这里的细微差别，我们来看一个Perl中的例子。假设S/（当前记
录分隔符）被设置为缺省的\n，那么下面的Perl语句会从终端（标准输入）读人一行：
$line = <>;
Perl会在变量Sline的内容中保留换行符。因此，采用像（end·ofoinput.z>这样的表达式
就无法匹配该变量。而如果使用（end·of·input.in>和end·of·input.$>都可以产生匹配，
因为它们会忽略后面多余的换行。
为了方便起见，Perl程序员通常会使用下面的命令来去掉换行符：
chomp$line;
正则表达式的基本技巧
37
www.TopSage.com
---
## Page 54
在执行了上述操作之后，上面所给的3种定位符都会产生匹配。（技术上来说，chomp
会去掉当前记录分隔符组成的字符串。）
除非你使用的是JavaScript，那么我们推荐你总是使用Z>，而不是S。Z>的含义总
是保持不变的，因此可以避免由于正则选项设置而造成的混淆或错误。
文本行开始
默认来说，只会匹配目标文本的开始处，就像之后的位置。
文本行结束
默认来说，《$>只会匹配目标文本的结尾处或者是最后一个换行之前的位置，就像
一样。只有在Ruby中，会匹配目标文本中每行的结束。（当然，它同样会匹配
目标文本中的最后一个字符之后的位置，因为这个位置也总是一行的结束。）使用Sn
是冗余的，因为S总是会匹配n>之前的位置。
长度为0的匹配
对于一个正则表达式来说，它完全可以只包含一个或者多个定位符。这样一个正则
表达式会在定位符能够匹配的每个位置查找一个长度为0的匹配。如果把多个定位
符放在一起的话，只有当所有的定位符都在同一个位置匹配的时候，该正则式才会
匹配成功。
可以在查找和替换的功能中使用这样的正则表达式。可以通过替换A>或Z>来在整
个目标文本之前或者之后添加一些内容。也可以通过在“和$匹配换行处”的模式下，
替换或则只能匹配空串。在“和$匹配换行处”的模式下，^S
38第2章
www.TopSage.com
---
## Page 55
会匹配目标文本中的每个空行。
变体
(?m) ~begin
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python
(?m)ends
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python
如果不能在正则表达式之外打开“和$匹配换行处”的模式，那么你也可以在正则表
达式之前使用一个模式修饰符来达到相同的效果。在实例2.1中的“不区分大小写的匹
配”一节中，我们已经讲解了模式修饰符，并且了解了JavaScript并不对此提供支持。
在.NET、Java、PCRE、Perl和Python中，《（?m）是“^和$匹配换行处”模式的模式修
饰符。其中的m指的是“多行（multiline）”模式，这个是在Perl中引l人的用来描述“^
和$匹配换行处”模式的名称，实在很容易让人感到混淆。
如前所述，这个术语实在是太容易让人弄混了，以致Ruby正则引擎的开发者都无法正
确地遵循这种记法。在Ruby中使用（?m)来打开“点号匹配换行符”模式。因此Ruby
中的总是会匹配
每一行的开始和结束。
除了令人遗憾的字母使用混淆之外，Ruby选择使用和S只匹配每行是非常正确
的。除非你使用的是JavaScript，我们推荐你在自已的正则表达式中都采用这种方式。
在Jan设计EditPadPro和PowerGREP的时候，他遵循了相同的想法。在这些工具中找
行（dot matchesnewlines.）”。除非在你的正则表达式之前添加了(?-m)，就不得不使用
A和Z来把正则表达式定位到文件的开始和结束。
参见
实例3.4和3.21。
2.6匹配整个单词
问题描述
创建一个正则表达式来匹配Mycatisbrown中的cat，但是不会匹配category或是
bobcat。再创建个正则表达式来匹配staccato中的cat，但是却不会匹配到上面的3
个自标字串。
正则表达式的基本技巧
39
www.TopSage.com
---
## Page 56
解决方案
单词边界
\bcat\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
非单词边界
\Bcat\B
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
单词边界
正则表达式记号b被称作是一个单词边界（wordboundary）。它会匹配一个单词的开
始或结束。就它自身而言，所产生的是一个长度为0的匹配。\b>也是一个定位符，这
与在前一个小节中介绍过的记号是一样的。
严格来讲，b会匹配如下的3种位置：
·在目标文本的第一个字符之前，如果第一个学符是单词字符；
·在目标文本的最后一个字符之后，如果最后一个字符是单词字符；
·在目标文本的两个字符之间，其中一个是单词字符，而另外一个不是单词字符。
本书中介绍的所有流派都不提供可以只匹配单词之前或者只匹配单词之后的单独记
号。除非想要创建一个正则式只包含单词边界，而不包含任何其他内容，那么这些单
独记号是不必要的。在正则表达式中，位于\b>之前和之后的记号会决定（\b可以匹配
的位置。在和中的只可以匹配一个单词的开始。而在和中
的\b>只可以匹配一个单词的结束。（x\bx和!\b!>则永远不会匹配任何位置。
如果要使用正则表达式来支持“只匹配完整单词”的查找，那么只需要把该单词
放在两个单词边界之间，就像我们前面给出的\bcat\b>。第一个\b要求（c出现
在字符串的最开始处，或者是在一个非单词字符后面。换行符被认为是非单词字
符。如果换行符紧跟在一个单词字符后面，那么b会匹配换行符后面的位置。
它同样会匹配紧跟着一个单词字符之前的换行符。这样的话，一个占据了一整行
的单词也可以通过一个“只匹配完整单词”的查找来发现。\b不会受到“多行”
模式或是?m）的影响，而这也是为什么本书把“多行”模式称作是“^和$匹配
换行处”的原因之一。
40第2章
www.TopSage.com
---
## Page 57
非单词边界
\B会匹配在目标文本中b不匹配的每一个位置。换句话说，B会匹配不属于单词
开始或结束的每一个位置。
严格来讲，B匹配如下的5个位置：
·在目标文本的第一个字符之前，如果第一个字符不是单词字符；
·在目标文本的最后一个字符之后，如果最后一个字符不是单词字符；
·在两个单词字符之间；
在两个非单词字符之间，
·空串。
Bcat\B>会匹配staccato中的cat。但是不会匹配Mycatisbrown、category或者bobcat。
如果想要进行与“只匹配完整单词”相反的查找（也就是说，不包括Mycatisbrown，
但是包括staccato、category和bobcat)，那么就需要采用多选结构来把Bcat>和
组合成为。其中，Bcat>会匹配staccato和bobcat中的cat。《catB>会匹配
category中的cat（如果中的，匹配单个的单词字符。不幸的是，对于来说情形则有些不同。
虽然本书中的所有流派都支持b和B，但是它们对于到底哪些字符属于单词字符
则有所不同。
在.NET、JavaScript、PCRE、Perl、Python和Ruby中，\b>都会匹配两个字符之间的位
置，其中一个字符可以被匹配，而另外一个字符则可以被W匹配。B则总是
匹配两个同时被或W>匹配的字符之间的位置。
JavaScript、PCRE和Ruby只把ASCII字符看做是单词字符。（w>因此与
是完全等同的。在这些流派中，你可以对像英语这样的只由不含读音符号的A到乙的
字母组成的单词进行“只匹配整个单词”的查找。但是这些流派对于其他语言，例如
西班牙语或俄语，就无法进行“只匹配整个单词”的查找。
.NET和Perl把所有语言字母表中的字母和数字都当作单词字符。在这些流派中，你可
以对任意语言中的单词进行“只匹配整个单词”的查找，这其中也包括不使用拉丁字
母表的语言。
正则表达式的基本技巧
www.TopSage.com
---
## Page 58
Python则为你提供了-个选项。只有在创建正则式时传递了UNICODE或是U选项，
非ASCII的字符才会被包括进来。这个选项会对\b>和产生相同的影响。
Java则表现得不是很一致。（w>只匹配ASCⅡI字符。但是则是支持Unicode的，因
此可以支持任何字母表。在Java中，\b\w\b>会匹配一个单个的英语字母、数字或是在
任何语言中都不会作为单词一部分出现的下划线。\bkxouka\b>会正确匹配cat在俄语中
对应的单词，因为b>是支持Unicode的。但是（w+>不会匹配任何泰国语单词，因为<w）
只会匹配ASCII字符。
参见
实例2.3。
2.7Unicode代码点、属性、区块和脚本
问题描述
使用一个正则表达式来查找商标符号（TM），要求通过指定其Unicode代码点，而不是复制
并粘贴一个实际上的商标符号。如果你选择复制并粘贴，那么商标符号可以被看作另外一
个字面字符，虽然并不能从键盘上直接输入它。字面字符已经在实例2.1中进行了讨论。
创建一个正则表达式来匹配拥有“货币符号（CurrencySymbol）”Unicode属性的任意
字符。Unicode属性也被称作是Unicode类别。