However, during the normal check-in process the informa-
tion sent to Foursquare contains a timestamp encrypted us-
ing the venue’s private key. Thus, the user cannot create a
valid check-in (even with information from old check-ins).
Wormhole attacks: an attacker located at a venue ex-
changes information with an accomplice, so he can perform
a check-in as well. The NFC server completes the protocol
only if the user sends the response within the acceptable
time window. However, the nonce cannot be predicted and
the challenge can’t be relayed in time. The attacker can also
use a device that mimics an NFC server and try to check the
user into a venue X other than the one he is at. Again, the
NFC server at venue X will not receive the challenge in time.
Eavesdropping attacks: an eavesdropper passively mon-
itors the communication between the users and the NFC
server to discover the users’ identity. However, he is only
able to acquire the VenueID which is publicly known, since
the UserID is encrypted with Foursquare’s public key.
System-wide Sybil Attacks: the attacker aims to disrupt
the whole system and drive legitimate users away by ac-
quiring the mayorship of all (or most) venues using multiple
accounts [20]. As shown in Section 7, with the existing de-
fense mechanisms, this can be done with minimal resources.
With our countermeasure this attack can be deterred, as
our NFC server imposes physical constraints on the check-
in process. The attackers will have to physically visit each
venue (practically impossible) to perform the check-ins.
Targeted Sybil Attacks: the attacker targets a few venues
that might oﬀer deals to all customers after a certain number
of check-ins. The attacker can utilize several accounts to col-
lect multiple oﬀers. Even with our countermeasure deployed,
one can still perform this attack. This can be done with a
smartphone that contains the passwords and keys of all the
attacker’s accounts (or those of accomplices). Nonetheless,
our countermeasure will be able to greatly mitigate such an
attack, as it imposes physical and time constraints on the
check-in process. Due to the NFC technology, the attacker
will have to stay next to the server for a unnatural amount
of time to check-in a large number of accounts.
Performance analysis of our implementations.
Encryption: an important factor that aﬀects the applica-
bility of our solution is the time needed for the data encryp-
tion. Table 2 presents the average times (over 100 runs) for
applying RSA encryption to a buﬀer using keys of various
sizes. The Arduino presents the worst performance due to
Keysize
Arduino
Rasp.Pi
Galaxy
512
25,056
2.745
2.265
1,024
2,048
224,279
1,587,550
3.228
2.834
5.130
5.042
4,096
NA
12.150
12.501
Table 2: Average encryption time (ms) for diﬀerent
RSA key sizes (bits).
its limited computational capabilities and RAM size, with
similar times to those reported in [13]. Even for small keys,
the time required for the user device and NFC server to stay
in range is not acceptable in realistic scenarios. For a 512-
bit key (which is very weak), the encryption process takes 25
seconds. Thus, the Arduino board is not a suitable solution.
On the other hand, the Raspberry-Pi server is very eﬃcient
and even with 2,048-bit keys encryption takes merely 5 ms.
Check-in process: Currently, Android requires the user
to tap the screen for authorization before data is sent over
NFC, and multiple messages can only be sent in batches.
As the NFC server has to enforce a strict time window for
the challenge-response step, no user interaction should be
needed between steps (1) and (2), as that would result in a
window large enough for a wormhole attack. However, the
data sent in step (2) of our protocol is based on the data
received in step (1) and can’t be sent in a batch. Thus,
the user is required to tap the screen a second time. This
is very restrictive for building NFC apps, as it does not al-
low multiple steps of communication between devices. This
has been reported by developers [3], was acknowledged by
Google, and is awaiting a ﬁx. To overcome this limitation,
we also implemented a version that uses NFC to pair the
devices, and sends the protocol data over Bluetooth. This
version only requires one tap to initiate the pairing and ev-
erything else is done automatically. Nonetheless, we expect
this to be ﬁxed soon, enabling our NFC-only approach.
In the Bluetooth version, using 2,048-bit keys and a 32-
byte nonce, the entire check-in process lasts 105 ms (average
over 100 runs). Based on the encryption times and the time
needed to send the data (28.7 ms per message), we set the
time window for the challenge-response step to 45 ms. After
sending the nonce, the NFC server terminates the process if
the response is not received within 45 ms. We plan on con-
ducting a study using a variety of smartphones to calculate
the time needed for the encryption, to select a value suit-
able for real-world deployment. Overall, the performance of
Validated Check-in renders it an ideal solution for LBS.
LBS workload: public-key cryptography is considered com-
putationally expensive. Foursquare must validate thousands
of check-ins per minute, as users conduct a few million per
day. Fortunately, hardware acceleration for cryptographic
operations has evolved. Consider that 7 years ago [11] Sun’s
UltraSPARC T1, equipped with a Modular Arithmetic Unit
for RSA, performed 20,425 signature veriﬁcations per second
with a 2,048-bit key utilizing all 32 cores. Decryption can be
further sped up by using GPUs [24] or modern x86 CPUs,
with operations needed by cryptographic algorithms imple-
mented in the hardware, and encryption can be handled at
line speeds [25]. Others [14] also argue that cryptographic
operations at line speeds are no longer an issue.
Cost: components to build our system cost $75 at retail
prices. While this might seem high, a LBS can purchase bulk
quantities of the components at much lower prices. Thus,
they can provide Validated Check-in to collaborating venues
for a very low price, with the ultimate beneﬁt of imposing
fairness which will ensure a robust check-in economy.
9. RELATED WORK
Joining LBS. Researchers have tried to understand the
motives of users that join systems like Foursquare. Their
ﬁndings suggest that there is a signiﬁcant portion of users
that participate for the discounts and special oﬀers [26].
This is also supported by [30], where nearly 20% of the test-
subjects reported that oﬀers were an important reason for
participating. Cramer et al. conduct a user survey [18, 19],
and ﬁnd that both the “gaming” aspect and venue oﬀers are
signiﬁcant incentives for user participation.
Attacking LBS. One of the ﬁrst to raise awareness about
the implications of fake-location attacks against LBS was [22].
Even though part of this paper focuses on the same prob-
lem, our work presents several characteristics that diﬀeren-
tiates it. While He et al. refer to certain heuristics used by
Foursquare, they have not explored them in depth so as to
identify their thresholds. We follow a systematic black-box
testing approach that accurately identiﬁes the thresholds for
each heuristic. Furthermore, they develop a semi-automatic
tool that demonstrates that fake check-ins are feasible, but
due to the lack of knowledge of thresholds, cannot demon-
strate the true extent of potential attacks. Our automated
tool systematically explores the detection mechanisms, re-
veals the extent to which attacks are feasible and highlights
their true impact. Finally, our adaptive attack uses infor-
mation at runtime to avoid redundant check-ins.
Validating User Location. Carbunar et al. [17] present
a mechanism that allows users of LBS to communicate with
the service in a private manner. However, their solution
for validating the user’s location, is susceptible to worm-
hole attacks.
In their follow-up paper [16] they propose
two extensions for detecting wormhole attacks. While the
ﬁrst approach called NES is somewhat similar to our NFC
countermeasure, it presents disadvantages. First, the LBS
is required to keep state regarding each check-in attempt
by a user, as it has to store the nonce values sent to each
user (apart from the keys of all venues and users as we do).
It also requires the venue to be able to communicate with
the service, while our approach works even without Internet
connectivity. The second countermeasure, WES, relies on a
WiFi router present at the location that periodically changes
its SSID to a value that the user will forward to the LBS.
However, there is no description of the process by which the
LBS will predict the SSID values of each venue’s router at a
given time, or the extra state the service will have to store.
Finally, neither solution has actually been implemented.
The Echo protocol [34] is for securely verifying location
claims, using a time-of-ﬂight approach. This protocol does
not require a setup or registration step, which excludes cryp-
tographic operations, and can be deployed for various appli-
cations. However, this solution requires devices that can
emit both radio and ultrasound frequencies, while we take
advantage of the NFC capabilities present in many modern
smartphones. Furthermore, for large or non-circular areas,
multiple nodes are required. On the other hand, we tar-
get a speciﬁc deployment scenario, for LBS to ensure user
presence at a speciﬁc venue during the check-in process.
[28] presents secure protocols for private proximity test-
ing, where two friends can be notiﬁed when within a spe-
27
ciﬁc distance of each other, while their location remains se-
cret. Extensive work has been published regarding distance
bounding protocols (e.g.,
[31]), for verifying a user’s posi-
tion. In [21], the RFID distance bounding protocol assumes
that the prover does not collude with a third party closer to
the veriﬁer and is, thus, vulnerable to wormhole attacks.
10. CONCLUSION
Using a black-box testing approach we revealed the server-
side heuristics employed by Foursquare and Places for de-
tecting fake-location attacks and discovered their thresholds.
Our technique, without prior knowledge, revealed a bug that
allows one to bypass speed constraints set by Places. We also
presented an algorithm that leverages all discovered thresh-
olds of Foursquare for maintaining mayorship in venues. Fi-
nally, we implemented Validated Check-in, an NFC server
that can eliminate system-wide threats, analyzed its security
properties and evaluated its performance. We believe that
user coordinates will become a prominent feature of Inter-
net usage in general and, quite possibly, of critical services.
Thus, our research goals were twofold. First, to demonstrate
the extent to which LBS are vulnerable and the true impact
of fake-location attacks, so as to draw the attention of the
research community. Second, to expose the ineﬃciency of
anomaly detection mechanisms and utilize our ﬁndings for
designing and implementing an eﬀective countermeasure.
11. ACKNOWLEDGMENTS
This research was performed with the ﬁnancial support of
the Prevention of and Fight against Crime Programme Euro-
pean Commission Directorate-General Home Aﬀairs (project
GCC). This publication reﬂects the views only of the au-
thors, and the Commission cannot be held responsible for
any use which may be made of the information contained
therein. This work was also supported in part by the FP7-
PEOPLE-2010-IOF project XHUNTER, No. 273765, and
SysSec, funded by the European Commission under Grant
Agreement No. 257007.
12. REFERENCES
[1] 1.5 million facebook accounts oﬀered for sale.
http://www.zdnet.com/blog/security/
1-5-million-facebook-accounts-offered-for-sale-faq/6304.
[2] American Express discounts in FourSquare.
https://sync.americanexpress.com/foursquare/.
[3] Android issues: Enable real nfc p2p communication.
http://code.google.com/p/android/issues/detail?id=28014.
[4] Facebook developers - bugs. https://developers.facebook.com/
bugs/244713388933143?browse=search_4f12b26febf840e00208758.
[5] Foursquare - follow-up to “mayorships from your couch” post.
http://blog.foursquare.com/2010/04/08/505862083/.
[6] Foursquare adds nfc support to its android app.
http://techcrunch.com/2012/02/10/
foursquare-adds-nfc-support-to-its-android-app/.
[7] Foursquare CEO: ’Not just check-ins and badges.’.
http://money.cnn.com/2012/02/29/technology/foursquare_ceo/.
[8] How does foursquare handle cheating?
http://support.foursquare.com/entries/188307.
[9] Mayor of the north pole. http:
//krazydad.com/blog/2010/02/15/mayor-of-the-north-pole/.
[10] On foursquare, cheating, and claiming mayorships from your
couch. http://blog.foursquare.com/2010/04/07/503822143/.
[11] Rsa performance of sun ﬁre t2000. http:
//blogs.sun.com/chichang1/entry/rsa_performance_of_sun_fire.
[12] Russian underground. http://www.trendmicro.com/
cloud-content/us/pdfs/security-intelligence/white-papers/
wp-russian-underground-101.pdf.
[13] Arkko, J., Keranen, A., and Sethi, M. Practical considerations
and implementation experiences in securing smart object
networks, 2012.
http://tools.ietf.org/html/draft-aks-crypto-sensors-00.
[14] Bittau, A., Hamburg, M., Handley, M., Mazieres, D., and
Boneh, D. The case for ubiquitous transport-level encryption.
In Proceedings of the 19th Conference on USENIX Security
Symposium (2010).
[15] C. Gerlitz and A. Helmon. Hit, link, like and share. Organizing
the social and the fabric of the web in a like economy.
Presented at the DMI mini-conference, volume 24, 2011.
[16] Carbunar, B., and Potharaju, R. You unlocked the mt. everest
badge on foursquare! countering location fraud in geosocial
networks. In IEEE 8th International Conference on Mobile
Adhoc and Sensor Systems (2012), MASS, IEEE.
[17] Carbunar, B., Sion, R., Potharaju, R., and Ehsan, M. The shy
mayor: Private badges in geosocial networks. In ACNS (2012),
vol. 7341 of Lecture Notes in Computer Science, Springer.
[18] Cramer, H. Gamiﬁcation and location-sharing : emerging social
conﬂicts. Proceedings of ACM CHI Workshop on
Gamiﬁcation (2011).
[19] Cramer, H., Rost, M., and Holmquist, L. E. Performing a
check-in: emerging practices, norms and ’conﬂicts’ in
location-sharing using foursquare. In Proceedings of the 13th
International Conference on Human Computer Interaction
with Mobile Devices and Services (2011), MobileHCI, ACM.
[20] Douceur, J. R. The sybil attack. In the First International
Workshop on Peer-to-Peer Systems (2002), IPTPS ’01’.
[21] Hancke, G. P., and Kuhn, M. G. An rﬁd distance bounding
protocol. In Security and Privacy for Emerging Areas in
Communications Networks, 2005. IEEE SecureComm (2005).
[22] He, W., Liu, X., and Ren, M. Location cheating: A security
challenge to location-based social network services. In
Proceedings of the 2011 31st International Conference on
Distributed Computing Systems (2011), ICDCS ’11.
[23] Hu, Y.-C., Perrig, A., and Johnson, D. B. Packet leashes: A
defense against wormhole attacks in wireless networks. In
INFOCOM (2003).
[24] Jang, K., Han, S., Han, S., Moon, S., and Park, K. Sslshader:
cheap ssl acceleration with commodity processors. In
Proceedings of the 8th USENIX conference on Networked
systems design and implementation, NSDI’11.
[25] Kounavis, M. E., Kang, X., Grewal, K., Eszenyi, M., Gueron,
S., and Durham, D. Encrypting the internet. In Proceedings of
the ACM SIGCOMM 2010 conference, SIGCOMM ’10’, ACM.
[26] Lindqvist, J., Cranshaw, J., Wiese, J., Hong, J., and
Zimmerman, J. I’m the mayor of my house: examining why
people use foursquare - a social-driven location sharing
application. In Proceedings of the 2011 annual conference on
Human factors in computing systems, CHI ’11, ACM.
[27] Luo, W., and Hengartner, U. Veriplace: a privacy-aware
location proof architecture. In Proceedings of the 18th
SIGSPATIAL International Conference on Advances in
Geographic Information Systems (2010), GIS ’10’, ACM.
[28] Narayanan, A., Thiagarajan, N., Lakhani, M., Hamburg, M.,
and Boneh, D. Location privacy via private proximity testing.
In NDSS (2011).
[29] Noulas, A., Scellato, S., Mascolo, C., and Pontil, M. An
empirical study of geographic user activity patterns in
foursquare. In ICWSM (2011).
[30] Patil, S., Norcie, G., Kapadia, A., and Lee, A. J. Reasons,
rewards, regrets: privacy considerations in location sharing as
an interactive practice. In Proceedings of the Eighth ACM
Symposium on Usable Privacy and Security, SOUPS ’12.
[31] Rasmussen, K. B., and ˇCapkun, S. Realization of RF distance
bounding. In Proceedings of the 19th USENIX conference on
Security (2010).
[32] Saroiu, S., and Wolman, A. Enabling new mobile applications
with location proofs. In Proceedings of the 10th workshop on
Mobile Computing Systems and Applications (2009),
HotMobile ’09’, ACM.
[33] Saroiu, S., and Wolman, A. I am a sensor, and i approve this
message. In Proceedings of the Eleventh Workshop on Mobile
Computing Systems & Applications (2010), HotMobile, ACM.
[34] Sastry, N., Shankar, U., and Wagner, D. Secure veriﬁcation of
location claims. In Workshop on Wireless Security (2003).
[35] Tippenhauer, N. O., P¨opper, C., Rasmussen, K. B., and
Capkun, S. On the requirements for successful gps spooﬁng
attacks. In Proceedings of the 18th ACM conference on
Computer and communications security (2011), CCS, ACM.
28