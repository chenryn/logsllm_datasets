title:Modelling and Analysis of a Hierarchy of Distance Bounding Attacks
author:Tom Chothia and
Joeri de Ruiter and
Ben Smyth
Modelling and Analysis of a Hierarchy 
of Distance Bounding Attacks
Tom Chothia, Univ. of Birmingham; Joeri de Ruiter, Radboud University Nijmegen;  
Ben Smyth, University of Luxembourg
https://www.usenix.org/conference/usenixsecurity18/presentation/chothia
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Modelling and Analysis of a Hierarchy of Distance Bounding Attacks
Tom Chothia
University of Birmingham
Birmingham, UK
Joeri de Ruiter
Radboud University
Nijmegen, The Netherlands
University of Luxembourg,
Ben Smyth
Luxembourg
Abstract
We present an extension of the applied pi-calculus
that can be used to model distance bounding protocols.
A range of different security properties have been sug-
gested for distance bounding protocols; we show how
these can be encoded in our model and prove a partial
order between them. We also relate the different security
properties to particular attacker models. In doing so, we
identify a new property, which we call uncompromised
distance bounding, that captures the attacker model for
protecting devices such as contactless payment cards or
car entry systems, which assumes that the prover being
tested has not been compromised, though other provers
may have been. We show how to compile our new calcu-
lus into the applied pi-calculus so that protocols can be
automatically checked with the ProVerif tool and we use
this to analyse distance bounding protocols from Master-
Card and NXP.
1
Introduction
Contactless payment cards and “keyless” car entry sys-
tems aim to make life easier. However, they also make
it possible to wirelessly-pickpocket a victim [12] or even
steal their car [21]. Such exploits are not merely the-
oretical; criminal gangs are using such attacks to steal
cars [6]. Thieves relay signals from a victim’s key fob
(located inside the victim’s house) to the victim’s car
(parked outside), which enables the thieves to unlock the
car, start the engine, and drive away.
Distance bounding protocols [11] use round trip times
to establish an upper-bound on the distance between a
“prover”, e.g., a contactless payment card or key fob, and
a “veriﬁer”, e.g., a payment machine or car. This can be
used to enforce that a prover is co-located with a veriﬁer.
Hence, they can be used to prevent the aforementioned
attacks. Round trip times are sometimes bounded by the
speed of light [11] and sometimes by the lag introduced
by relaying equipment [20].
A distance bounding attack occurs when a veriﬁer is
deceived into believing they are co-located with a prover,
when they are not. Attackers may relay, replay and alter
messages, as well as trying to predict or preempt timed
challenges. Some distance bounding protocols also aim
to defend against a “dishonest prover” attacker , i.e., an
attacker that knows all of the secret values of a nor-
mal prover, but will misuse them to try to trick a ver-
iﬁer. Other attacker models consider a weaker “terror-
ist prover,” i.e., a dishonest prover that will not reveal
its long term keys. The literature on symbolic veriﬁca-
tion of distance bounding protocols includes ﬁve differ-
ent types of attacks, each of which uses some combi-
nation of basic, unprivileged attackers, dishonest prover
attackers, and terrorist fraud attackers. We describe these
in detail in the next section.
In this paper, we extend the applied pi-calculus [2] to
distinguish between co-located processes and processes
at distinct locations, and we restrict communication be-
tween locations using timers. In particular, when a lo-
cation’s timer is active, processes at that location may
only receive input from co-located processes (they can-
not receive input from a remote process, i.e., a process at
a different location). Our extended calculus allows us to
model distance bounding protocols. Indeed, we can con-
sider an attacker, some provers and a veriﬁer in various
locations. Moreover, timers capture bounded round trip
times, in particular, a veriﬁer cannot receive any input
from a remote attacker whilst a timer is active at the ver-
iﬁer’s location. Thus, the calculus allows us to check for
and detect each of the different types of attack against
distance bounding protocols. Furthermore, we deﬁne a
compiler that encodes the calculus into the standard ap-
plied pi-calculus, which enables automated analysis us-
ing tools such as ProVerif [8].
Industrial distance bounding protocols such as Master-
card’s RRP protocol [20] and NXP’s “proximity check”
[14, 25] aim to protect payments and access tokens from
relay attacks. These protocols need not defend against at-
USENIX Association
27th USENIX Security Symposium    1563
tacks requiring dishonest provers, because if an attacker
gets access to the secret keys, they can clone the cards
or key fobs, and make payments or gain access without
a need to relay the original device, i.e., protection is only
needed for an uncompromised device.
However, we expect some devices (e.g., EMV cards
or car fobs) may be compromised at some point, and
we would like to ensure that the compromise of a par-
ticular prover would not lead to an attacker being able
to successfully attack other provers. None of the com-
monly considered distance bounding security properties
(which are presented in the next section) match this at-
tacker model.
Using our calculus, we are able to consider all possible
combinations of veriﬁers, provers and dishonest provers
and so enumerate all possible distance bounding attack
scenarios. Defending against each of these attack scenar-
ios gives us a security property, and under reasonable as-
sumptions (which we detail in Section 5) we can equate
many of these distance bounding attack scenarios and
impose a partial order on the others so creating a hierar-
chy of distance bounding attacks. Different parts of this
hierarchy relate to different attacker models, and each
attacker model is dominated by a single security prop-
erty (this ordering is presented in Figure 3 on page 11).
Our ordering shows that, under reasonable assumptions,
“assisted distance fraud” attacks [13] are more powerful
than all other properties. Moreover, it shows that when
an attacker can only act remotely, protection against “dis-
tance hijacking” attacks [13] is the most powerful prop-
erty needed. Details of these attacks are given in the next
section.
From our hierarchy of distance bounding protocols we
identify a new distance bounding attack scenario and
security property, which we call uncompromised dis-
tance bounding security. In an uncompromised distance
bounding attack the provers being targeted are remote
from the veriﬁer and the attacker acts at both the loca-
tion of the prover and the veriﬁer. Additionally, the at-
tacker may have compromised a number of other provers
at both locations, and use these in the attack. An un-
compromised distance bounding attack exists if the at-
tacker can cause the veriﬁer to believe that one of the
uncompromised, remote targeted provers is in fact local
to the veriﬁer. Defending against this kind of attack is the
strongest security property needed for protocols such as
MasterCard’s RRP to protect contactless payment cards
or NXP’s proximity check when being used to protect,
e.g., access to buildings.
We demonstrate the applicability of our
results
by analysing MasterCard’s RRP protocol for distance
bounding of contactless EMV [20], and a distance
bounding protocol from NXP [14, 25]. These proto-
cols have not been studied before. In these protocols the
prover will send information about how long replies are
expected to take and the veriﬁer will use this information
to set the time limits used in the distance bounding pro-
tocol. If attackers can alter these time limits then they
can succeed in a relay attack by telling the veriﬁer to
wait long enough to relay the messages. As our calcu-
lus is based on the applied pi-calculus we are also able
to check that the protocols ensure the authenticity of the
timing information to conﬁrm that attacks on it are not
possible.
Contributions: Our contributions are as follows:
• An extension of the applied pi-calculus with loca-
tions and timer actions (Section 3).
• Formalizations of security properties for distance
bounding protocols (Section 4).
• A hierarchy of our security properties, relations to
particular attacker models, and identiﬁcation of a
new security property (Section 5).
• A practical, automatic tool for the analysis of dis-
tance bounding protocols, based on compiling our
calculus into the applied pi-calculus (Section 6).
• Formal analysis of distance bounding protocols, in-
cluding from MasterCard and NXP (Section 7).
Our models, compiler and full paper (with proofs) are on
our project website https://cs.bham.ac.uk/~tpc/
distance-bounding-protocols/
Related work: Some prior work on the veriﬁcation of
distance bounding protocols has used manual reasoning,
e.g., [30, 34] in the symbolic model, [4, 9, 10, 18] in the
computational model and [13, 34] using theorem provers.
Some previous work on automatic analysis of distance
bounding protocols has been based on the applied pi-
calculus: Malladi et al. [27] analyse single runs, Chothia
et al. [12] analyse an arbitrary number of runs for relay
attacks, and Debant et al. [15] provide a model with a
formal correctness proof, which uses a deﬁnition of relay
attack that is close to our deﬁnition of uncompromised
distance bounding.
Nigam et al. [31] introduce an extension to strand
spaces to model security protocols that include time and
Kanovich et al. [26] consider a multiset rewriting model
and compare discrete and continuous time. A contri-
bution of our paper is to show that you do not need to
explicitly consider the time of actions to meaningfully
analyse distance bounding protocols. Mauw et al. [28]
improves on the framework of [34] looking at causality
between actions to make a framework for automatically
testing distance fraud and terrorist fraud.
None of the previous papers on symbolic checking of
distance bounding protocols consider the full range of
1564    27th USENIX Security Symposium
USENIX Association
distance bounding properties or makes comparisons be-
tween them.
A recent survey [3] gives many examples of distance
bounding protocols and attacks. Two notable protocols
missing from this survey are MasterCard’s RRP proto-
col for contactless EMV cards and NXP’s “proximity
check”, which we both consider in this paper. Master-
Card’s RRP is a variant of the PaySafe protocol, which
we have previously proposed for contactless EMV [12].
Past papers [15, 28, 31] have reported an attack against
PayWave when the prover is dishonest. However, as we
discuss in Section 5, if an EMV card has been compro-
mised, then there is no need to relay it, hence such “dis-
tance fraud attacks” are not the correct attacker model for
contactless EMV. In contrast, we relate distance bound-
ing security properties to particular attacker models.
2 Distance bounding protocols and attacks
Distance bounding protocols aim to let a veriﬁer place an
upper-bound on the distance to a prover by timing how
long it takes for certain challenges to be answered. Cryp-
tography is used to ensure that the responder had to know
the challenge before replying. Often the time taking to
perform complex cryptography will vary between runs,
therefore it is difﬁcult to time cryptographic actions, and
the challenge-response mechanism is typically limited to
a simple exchange of nonces, with the cryptography per-
formed before or afterwards.
Example 1. As a running example we consider the fol-
lowing distance bounding protocol, in which the veriﬁer
and all provers share the same symmetric key.
Veriﬁer
Generate random values
chal and resp
Prover
id
{chal,resp}k
ready
chal
resp
timed
The veriﬁer receives the identiﬁer of the prover, gen-
erates nonces chal and resp, and sends the encrypted
nonces to the prover. Once the prover indicates that it
has decrypted the nonces, the veriﬁer activates a timer,
and sends nonce chal to the prover. The prover waits for
nonce chal before revealing nonce resp, hence, the nonce
is only revealed once the veriﬁer’s timer is running.
This protocol is not vulnerable to relay fraud because
only the prover can decrypt the challenge and response,
and an honest prover will not release the response until
it receives the challenge, i.e., the attacker cannot learn
the response until the timer has started, and then, if the
prover is remote from the veriﬁer, it will be impossible to
get this response to the prover without the timer expiring.
Our example protocol does not defend against a dis-
honest prover that tries to trick the veriﬁer, i.e., a prover
can convince the veriﬁer that it is nearer than it really is.
Such a dishonest prover could be a hardware device that
has been compromised by an attacker, or the owner of a
device trying to mislead the veriﬁer. Indeed, the prover
can send the response early, before receiving the chal-
lenge, so the veriﬁer receives the response just after it
transmits the challenge. This will lead to a short delay
between the challenge and response, making the veriﬁer
incorrectly believe that the prover is nearby.
The right security property for a distance bounding
protocol, will depend on the use case. Common secu-
rity properties considered in the literature on symbolical
of checking distance bounding protocols include:
• Relay/Maﬁa Fraud [17]: The veriﬁer and the prover
are remote from each other. Attackers act at the
same location as both the veriﬁer and prover, and
may relay, alter or replay messages, to trick the
prover into believing that the prover is in fact local.
• Distance Fraud [16]/Lone Distance Fraud [13]: A
dishonest prover, which may deviate from the pro-
tocol, is at a location remote from the veriﬁer. This
dishonest prover misleads the veriﬁer into believing
that it is local.
• Distance Hijacking [13]: A dishonest prover re-
motely authenticates to a veriﬁer, as in Distance
Fraud, but there are also other honest provers at the
same location as the veriﬁer, which the dishonest
prover may make use of.
• Terrorist Fraud [16]: A terrorist fraud attack in-
volves one attacker acting locally to the veriﬁer
along with a remote dishonest prover, with the goal
of making the veriﬁer believe that the remote dis-
honest prover is in fact local. This kind of attack
always assumes that the prover has a secret key that
identiﬁes it and that the prover does not send this
key to any process which is local to the veriﬁer.
• Assisted Distance Fraud [13]: A terrorist prover
remotely authenticates to a veriﬁer, assuming the
cooperation of another dishonest prover that is co-
located with the veriﬁer.
We can stop our example protocol being vulnerable to
distance fraud attacks by adding a new nonce that is sent
with the challenge, and also needs to be included with the
USENIX Association
27th USENIX Security Symposium    1565
response. However, such a protocol would still be vul-
nerable to terrorist fraud attacks, because a remote dis-
honest terrorist fraud prover could decrypt the challenge
and response and send them to an accomplice attacker
that is local to the veriﬁer, which can then use them to
answer the veriﬁer’s challenge within the time limit.
This terrorist fraud attack can be stopped by, for in-
stance, requiring the prover to hash the response with
their secret key. Thereby providing evidence to the veri-
ﬁer that some local party did indeed know the secret key.
However, if the same key is used by multiple provers then
the protocol is vulnerable to distance hijacking and as-
sisted distance fraud, because the dishonest prover could
send the challenge and response to some honest prover
that is co-located with the veriﬁer. This honest prover
would answer the veriﬁers challenge, which the veriﬁer