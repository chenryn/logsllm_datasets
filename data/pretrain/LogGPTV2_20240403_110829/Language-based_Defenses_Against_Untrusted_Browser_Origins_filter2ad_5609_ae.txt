algorithms are standard. We refer interested readers to
our implementation for additional details.
SrvApp1
. . .
SrvAppN
Library
UsrAgent1
. . .
UsrAgentN
p
g
a
e
t
g
e
credentials
C
C
o
o
l
i
c
k
k
S
t
o
r
ajaxRequest
setCookStor
HttpServer
net
HttpClient
DJS
httpSvReq
h t t p S v R e q
serverIdentities
cookies
storage
serverSessions
WebSpi
pageOrigin
Figure 7: WebSpi model and DJS components
4.2 Model Extraction
DJS is a useful starting point for a security component
developer, but defensiveness does not in itself guarantee
security: for example it does not say that a program will
not leak its secrets to the hosting webpage, say by expos-
ing them in its exported API. Moreover, security compo-
nents like those in Section 2 consist of several scripts ex-
changing encrypted messages with each other and with
other frames and websites. Such designs are complex
and prone to errors, analyzing their security thus requires
a detailed model of cryptography, the browser environ-
ment and the web attacker.
In prior work, the WebSpi library of the ProVerif tool
has been used to analyze the security of web applica-
tions [5, 6]. The main processes, channels and data ta-
bles of WebSpi are represented on Figure 7. UsrAgent
processes model the behavior of JavaScript running on a
page, while the other processes handle communications
and processing of server requests.
The advantage of this methodology is that an applica-
tion can be automatically veriﬁed against entire classes
of web attackers. ProVerif can handle an unbounded
number of sessions, but may fail to terminate. If it ver-
iﬁes a model, it can serve to increase conﬁdence in the
security application. The disadvantage is that to model
a JavaScript component in WebSpi, a programmer nor-
mally has to write an applied pi calculus process for each
script by hand.
We developed a model extraction tool that automati-
cally generates user agent process models of components
written in the subset of DJS without loops, using a pro-
cess and data constructor library for cryptographic oper-
ations and serialization (matching our implemented DJS
libraries introduced in the next section).
Our generated processes may then be composed with
existing WebSpi models of the browser and (if neces-
sary) hand-written models of trusted servers and auto-
matically veriﬁed. To support our translation, we ex-
tended the WebSpi model with a more realistic treatment
of JavaScript that allowed multiple processes to share the
same heap.
We do not fully detail our translation from DJS to the
USENIX Association  
22nd USENIX Security Symposium  663
11
applied pi calculus here for lack of space; it follows Mil-
ner’s famous “functions as processes” encoding of the
lambda calculus into the pi calculus [30]. Similar trans-
lations to ours have previously been deﬁned (and proved
sound) for F# [12] and Java [4]. Our translation only
works for well-typed DJS programs that use our DJS li-
braries; it does not apply to arbitrary JavaScript.
DJS programs may preﬁx a function name by _lib to
indicate that the code of certain functions should not be
translated to applied pi and they must instead be treated
as trusted primitives. A typical example is cryptographic
functions, which get translated to symbolic functions.
Our translation recognizes two kinds of security an-
notations in source DJS programs. First, functions may
be annotated with security events; for example, the ex-
pression _lib.event(Send(a,b,x)) may be triggered be-
fore a uses a secret key shared with b to compute a MAC
of x. Second, functions may label certain values as se-
crets _lib.secret(x). Such annotations are reﬂected in
the generated models and can be analyzed by ProVerif
to prove authentication and secrecy queries; we describe
complex components we veriﬁed in Section 6.
5 Defensive Libraries
In this section, we present defensive libraries for cryptog-
raphy (DJCL), data encoding (DJSON), and JSON sig-
nature and encryption (JOSE). These libraries amount to
about two thousand lines of DJS code, veriﬁed for de-
fensiveness using our conformance checker. Hence, they
can be relied upon even in hostile environments.
5.1 Defensive JavaScript Crypto Library
Our starting points for DJCL are two widely used
JavaScript libraries for cryptography: SJCL [37] (cover-
ing hashing, block ciphers, encoding and number gener-
ation) and JSBN (covering big integers, RSA, ECC, key
generation and used in the Chrome benchmark suite). We
rewrote and veriﬁed these libraries in DJS.
Our implementation covers the following primitives:
AES on 256 bit keys in CBC and CCM/GCM modes,
SHA-1 and SHA-256, HMAC, RSA encryption and sig-
nature on keys up to 2048 bits with OAEP/PSS padding.
All our functions operate on byte arrays encoded as
strings; DJCL also includes related encoding and decod-
ing functions (UTF-8, ASCII, hexadecimal, and base64).
We evaluated the performance of DJCL using the
jsperf benchmark engine on Chrome 24, Firefox 18,
Safari 6.0 and IE 9. We found that our AES block func-
tion, SHA compression functions and RSA exponentia-
tion performed at least as fast as their SJCL and JSBN
counterparts, and sometimes even faster. Defensive cod-
ing is well suited for bit-level, self-contained crypto com-
putations, and JavaScript engines can easily optimize our
non-extensible arrays and objects.
On the other hand, when implementing high-level con-
structions such as HMAC or CCM encryption that oper-
ate on variable-length inputs, we pay a cost for not be-
ing able to access native objects in DJS. DJCL encodes
variable-length inputs in strings, since it cannot use
more efﬁcient but non-defensive objects like Int32Array.
Encoding and decoding UTF-8 strings without relying
on a pristine String.fromCharCode and String.charCodeAt
means that we need to use table lookups that are substan-
tially more expensive than the native functions. The re-
sulting performance penalty is highly dependent on the
amount of encoding, the browser and hardware being
used, but even on mobile devices, DJCL achieves en-
cryption and hashing rates upwards of 150KB/s, which is
sufﬁcient for most applications. Of course, performance
can be greatly improved in environments where proto-
types of the primordial String object can be trusted (for
instance, by using Object.freeze before any script is run).
5.2 Defensive JSON and JOSE
In most of our applications, the input string of a DJS pro-
gram represents a JSON object; our DJSON library seri-
alizes and parses such objects defensively for the internal
processing of such data within a defensive program.
DJSON.stringify takes a JSON object and a schema de-
scribing its structure (i.e. an object describing its DJS
type) and generates a serialized string. Deserializing
JSON strings generally requires the ability to create ex-
tensible objects. Instead, we rewrite DJSON.parse defen-
sively by requiring two additional parameters: the ﬁrst is
a schema representing the shape of the expected JSON
object; the second is a preallocated object of expected
shape that will be ﬁlled by DJSON.parse. Our typechecker
processes these schemas as type annotations and uses
them to infer types for code that uses these functions.
This approach imposes two restrictions. Since DJS
typing ﬁxes the length of objects, our library only works
with objects whose sizes are known in advance. This
restriction may be relaxed by using extensions of DJS
(described in our technical report [11]) that use algebraic
constructors for extensible objects and arrays. Also, at
present, we require users of the DJSON library to provide
the extra parameters (schemas, preallocated objects), but
we plan to extend our conformance checker to automati-
cally inject these parameters based on the inferred types
of the serialized and parsed JSON objects.
Combining DJCL and DJSON, we implemented a
family of emerging IETF standards for JSON cryptog-
raphy (JOSE), including JSON Web Tokens (JWT) and
JSON Web Encryption (JWE) [25]. Our library interop-
erates with other server-side implementations of JOSE
664  22nd USENIX Security Symposium 
USENIX Association
12
LOC Typing
Program
300ms
1728
DJCL
36ms
JOSE
160
7ms
Sec. AJAX 61
42ms
43
LastPass
Facebook
135
42ms
31ms
80
ConﬁChair
PV LOC ProVerif
No Goal
114
No Goal
9
12s
243
21s
164
356
43s
25s
203
Table 2: Evaluation of DJS codebase
(notably those implementing OpenID Connect). Us-
ing JOSE, we can write security components that ex-
change encrypted and/or authenticated AJAX requests
and responses with trusted servers. More generally, we
can build various forms of secure RPC mechanisms be-
tween a DJS script and other principals (scripts, frames,
browser extensions, or servers.)
6 Applications
We revisit the password manager bookmarklet, single
sign-on script, and encrypted storage website examples
from Section 2 and evaluate how DJS can help avoid at-
tacks and improve conﬁdence in their security. For each
component, we show that DJS can achieve security goals
even stronger than those currently believed possible us-
ing standard browser security mechanisms. Table 2 sum-
marizes our codebase and veriﬁcation results.
6.1 Secret-Keeping Bookmarklets
Bookmarklets are fragments of JavaScript stored in a
bookmark that get evaluated in the scope of the active
page when they are clicked. Password manager book-
marklets (like LastPass Login, Verisign One-Click, Pass-
pack It) contain code that tries to automatically ﬁll in
login forms (or credit card details) on the current page,
by retrieving encrypted data the user has stored on the
password manager’s web server.
For example, the LastPass server authenticates the user
with a cookie (she must be currently logged in), authenti-
cates the host website with the Referer or Origin header,
and returns the login data encrypted with a secret key
(LASTPASS_RAND) that is unique to the bookmarklet and
embedded in its code. The bookmarklet then decrypts
the login data with its key and ﬁlls in the login form.
The code in these bookmarklets is typically not defen-
sive against same origin attacks; this leads to a family
of rootkit attacks, where a malicious webpage can fool
the bookmarklet into revealing its secrets [1]; indeed, we
found new variations of these attacks (Section 2) even
after the original designs were ﬁxed to use frames.
We wrote two,
improved versions of the LastPass
bookmarklet using DJS that prevent such attacks:
login data retrieved from the LastPass server.
• The ﬁrst uses DJCL’s AES decryption to decrypt the
• The second uses DJCL’s HMAC function to authen-
ticate the bookmarklet (via postMessage) to a frame
loaded from the LastPass origin; the frame then de-
crypts and reveals the login data to the host page.
Assuming the host page is correctly authenticated by
LastPass, both designs prevent rootkit attacks.
Moreover, both our bookmarklets guarantee a stronger
click authentication property. The bookmarklet key rep-
resents the intention of the user to release data to the cur-
rent page. If a script on the page could capture this key,
it would no longer need the bookmarklet; it could use the
password manager server directly to track (and login) the
user on subsequent visits, even if the user wished to re-
main anonymous, and say had erased her cookies for this
site. Instead, by protecting the key using DJS, and using
the key only once per click, both our designs guarantee
that the user must have clicked on the bookmarklet each
time her identity and data is released to the webpage.
Evaluation. Our bookmarklets are fully self-contained
DJS programs and with a trimmed-down version of
DJCL can ﬁt the 2048 bytes length limit of bookmarklets.
They require minimal changes to the existing LastPass
architecture. More radical redesigns are possible, but
even those would beneﬁt from being programmed in
DJS. We veriﬁed our bookmarklets for defensiveness by
typing, and for key secrecy and click authentication by
using ProVerif. In ProVerif, we compose the models ex-
tracted from the bookmarklets with the WebSpi library
and a hand-written model for the LastPass server (and
frame).
Click authentication is an example of a security goal
that requires DJS; it cannot be achieved using frames
for example. The reason is that bookmarklets (unlike
browser extensions) cannot reliably create or commu-
nicate with frames without their messages being inter-
cepted by the page. They need secrets for secure com-
munication; only defensiveness can protect their secrets.
6.2 Script-level Token Access Control
The Facebook login component discussed in Section 2
keeps a secret access token and uses it to authenticate
user data requests to the Facebook REST API. How-
ever, this token may then be used by any script on the
host website, including social plugins from competitors
like Twitter and Google, and advertising libraries that
may track the user against her wishes. Can we restrict
the use of this access token only to selected scripts, say
only (ﬁrst-party) scripts loaded from the host website?
Browser-based security mechanisms, like iframes, can-
not help, since they operate at the origin level. Even CSP