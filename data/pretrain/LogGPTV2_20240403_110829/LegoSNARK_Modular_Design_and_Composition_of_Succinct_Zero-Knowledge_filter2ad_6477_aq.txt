CPlink.RG,CPlink.Z,A,E = 1] = Pr[GdPf ∧ (BadComm∨ BadRel)] ≤
j∈[(cid:96)] cj (cid:54)= (oj, u(cid:62)
j ) ·
(cid:96) ) · [f ]1.
j )·[h[0,nj ]]1
1 , . . . , u(cid:62)
[h[0,nj ]]1, BadRel := c(cid:48) (cid:54)= (o(cid:48), u(cid:62)
Zero-Knowledge. From the zero-knowledge property of ssΠ we know there exists a simulator
ssΠ.S = (ssΠ.Skg, ssΠ.Sprv) such that keys and proof indistinguishability hold for an arbitrary A as in
Deﬁnition 2.2. We now deﬁne the following key simulator CPlink.Skg such that CPlink.Skg([h]1, Rlink) :=
ssΠ.Skg([M]1). Keys indistinguishability follows directly from the assumption on ssΠ.Skg. Anal-
ogously, we obtain proof indistinguishability by deﬁning a proof simulator CPlink.Sprv such that
CPlink.Sprv(crs, tdk, c(cid:48), (cj)j∈[(cid:96)]) := ssΠ.Sprv(crs, tdk, [x]1), with [x]1 = ((cj)j∈[(cid:96)], c(cid:48)).
1 , . . . , u(cid:62)
(cid:96) )·[f ]1
(cid:1)
Similarly to the case of Rlink, this relation can be expressed as a linear subspace relation,
RM([x]1, w), where M, x, w are as follows:
C.2 An extension of CPlink for Preﬁxes of a Committed Vector
Fixed a security parameter λ (and the bilinear group setting for λ as well), Rlink
(Dx × D1 × ··· × D(cid:96) × Dω), where Dx = G1, Dω = Znω+1
q
pre is a relation over
for some nj such that
nω +(cid:80)
j nj = m. Rlink
q
and Dj = Znj
pre is parametrized by a commitment key [f ]1 ∈ Gm+1
1 , . . . , u(cid:62)
(cid:0)c(cid:48), (uj)j∈[(cid:96)], (u(cid:96)+1, o(cid:48))(cid:1) = 1 ⇐⇒ c(cid:48) ?= (o(cid:48), u(cid:62)
(cid:122)
M
1
...
...
...
h[1,n2]
h0 0 . . . 0 0 h[1,n1]
0 h0 . . . 0 0
...
...
0 0 . . . h0 0
0 0 . . . 0 f0 f [1,n1] f [n1+1,n2] . . . f [n(cid:96)−1+1, f [n(cid:96)+1,
n(cid:96)+1]
. . .
. . .
...
. . . h[1,n(cid:96)]
0
0
...
0
0
0
...
0
...
0
n(cid:96)]
0
(cid:125)(cid:124)
...
0
Rlink
pre
x(cid:122)(cid:125)(cid:124)(cid:123)c1
 =
...
c(cid:96)
c(cid:48)
(cid:123)
(cid:123)
, and is deﬁned as:
(cid:96)+1) · [f ]1
w(cid:122)
(cid:125)(cid:124)
o1
...
o(cid:96)
o(cid:48)
u1
...
u(cid:96)+1
Given the above encoding, it is straightforward to extend our scheme CPlink to support the
relation Rlink
pre instead of Rlink.
D A zkSNARK for Linear Subspaces
Here we recall the QA-NIZK scheme for linear subspaces Π(cid:48)
MDDH setting where k = 1.
ssΠ.KeyGen([M]1∈Gl×t
q, a ←$ Zq; P := M(cid:62)k; C := a · k
): k ←$ Zl
1
as of Kiltz and Wee [KW15], in the
56
return(cid:0)ek := [P]1 ∈ Gt
1, vk := ([C]2, [a]2) ∈ Gl
2 × G2
(cid:1)
1 · [C]2 = [π]1 · [a]2
ssΠ.Prove(ek, [x]1, w): return [π]1 ← w(cid:62)[P]1 ∈ G1
ssΠ.VerProof(vk, [x]1, [π]1):] check that [x](cid:62)
ssΠ.Skg(1λ): run as ssΠ.KeyGen and output tdk = k and (ek, vk)
ssΠ.Sprv(tdk, [x]1): return [π]1 ← k(cid:62)[x]1
In the following theorem we prove the knowledge soundness of the scheme given above. The proof
holds under the discrete logarithm assumption in the algebraic group model of [FKL18]; this can
also be interpreted as a proof in the (bilinear) generic group model. We also note that a similar
proof about the use of this scheme in a non-falsiﬁable setting [KW15] also appeared in [FLSZ17].
Theorem D.1. Assume that Dmtx is a witness sampleable matrix distribution. Then, under the
discrete logarithm assumption, in the algebraic group model, the QA-NIZK Π(cid:48)
as in [KW15] (in the
MDDH setting k = 1) is a knowledge-sound SNARK for linear subspace relations with matrices from
Dmtx.
Consider an algebraic adversary A against the knowledge soundness of ssΠ. Its input
Proof
consists of the matrix [M]1 and the associated auxiliary input aux, along with the common reference
string [P]1, [C]2, [a]2. Let [z]1 be a vector that contains M and the portion of aux that has elements
from the group G1, and also assume [z] includes [1]1. A returns a pair ([x]1, [π]1) along with
coeﬃcients that “explain” these elements as linear combinations of its input in the group G1. Let
these coeﬃcients be:
[x]1 := X 0 [P]1 + X 1 [z]1 = X 0 [M(cid:62)k]1 + X 1 [z]1
[π]1 := π(cid:62)
0 [M(cid:62)k]1 + π(cid:62)
0 [P]1 + π(cid:62)
1 [z]1 = π(cid:62)
1 [z]1
We deﬁne the extractor E to be the algorithm that runs the algebraic A and returns w := π0, i.e.,
the coeﬃcients of [π]1 corresponding to P. Next, we have to show that the probability that the
output of (A,E) satisﬁes veriﬁcation while x (cid:54)= Mw is negligible. In other words, assume that the
output of A is such that:
[x](cid:62)
1 · [a · k]2 = [π]1 · [a]2
and
[x]1 (cid:54)= [M]1π0
If A returns such a tuple with non-negligible probability, we show how to build an algorithm B that
on input ([k]1, [k]2) outputs nonzero elements A ∈ Zl×l
q, c ∈ Zq such that
, b ∈ Zl
q
k(cid:62)A k + k(cid:62)b + c = 0
Such a B can in turn be reduced to an algorithm B(cid:48) that solves discrete log, i.e., on input ([α]1, [α]2)
return α.
Algorithm B([k]1, [k]2) proceeds as follows. First, it uses Dmtx to sample ([M]1, aux) along with its
G1 witness (i.e., a vector z of entries in Zq). Second, it samples a ←$ Zq and runs A([z, P]1, [a, a·k]2)
(notice that A’s input can be eﬃciently simulated). Third, once received the output of A, B sets
A := X 0 M(cid:62), b := X 1z − M π0 and c = −π(cid:62)
1 z. Notice that
k(cid:62)Ak + k(cid:62)b + c = k(cid:62) X 0 M(cid:62)k + k(cid:62)X 1z − k(cid:62)M π0 − π(cid:62)
1 z
= k(cid:62) X 0 M(cid:62)k + k(cid:62)X 1z − π
= k(cid:62)x − π = 0
57
Also, one among A, b and c must be nonzero. Indeed, if they are all zero then X 1z − Mπ0 = 0,
that is x = Mπ0, which contradicts our assumption on A’s output.
To ﬁnish the proof, we show how the above problem can be reduced to discrete log in asymmetric
q and implicitly sets k := α· r + s.
groups, i.e., B(cid:48) on input ([α]1, [α]2) returns α. B(cid:48) samples r, s ∈ Zl
It is easy to see that ([k]1, [k]2) can be eﬃciently simulated with a distribution identical to the
one expected by B. Next, given a solution (A, b, c) such that k(cid:62)A k + k(cid:62)b + c = 0 one can ﬁnd
a(cid:48), b(cid:48), c(cid:48) ∈ Zq such that:
0 = (αr + s)(cid:62) A (αr + s) + (αr + s)(cid:62)b + c
= α2(r(cid:62)Ar) + α · (r(cid:62)As + s(cid:62)Ar + r(cid:62)b) + (s(cid:62)As + s(cid:62)b + c)
= a(cid:48)α2 + b(cid:48)α + c(cid:48)
In particular, with overwhelming probability (over the choice of s that is information theoretically
hidden from B’s view) c(cid:48) (cid:54)= 0. From this solution B(cid:48) can solve the system and extract α.
(cid:3)
←$ Zq uniformly at random, compute P = {[(cid:81)
E A Construction of PolyCom and CPpoly from zk-vSQL
We show a pairing-based construction of the commitment PolyCom and CP-SNARK CPpoly that are
“extracted” from the veriﬁable polynomial delegation scheme of Zhang et al. [ZGK+17b]. Basically,
we separate the algorithms related to committing from the ones related to proving and verifying
evaluations of committed polynomials. Except for that, the only noticeable diﬀerence is that in
our case we can prove that cy opens to y = f (x) (with respect to cf which opens to f) for a
given cy instead of one that is freshly generated at proving time. As we show below, this diﬀerence
would matter only for zero-knowledge, for which we give a proof a slightly diﬀerent than the one in
[ZGK+17b].
Setup(1λ): let F be µ-variate polynomials of degree d in each variable. Sample α, β, s1, . . . , sµ+1
i∈W si]1}W∈Wµ,d, and output ck =
(P, [sµ+1, αsµ+1, βsµ+1]1, [α, β, s1, . . . , sµ+1]2).
ComPoly(ck, f ) → (cf , of ): sample
of ←$ Zq,
= [f (s1, . . . , sµ) + of sµ+1]1,
cf,1
cf,2 = [α(f (s1, . . . , sµ) + of sµ+1)]1 and output cf = (cf,1, cf,2).
ComVal(ck, y) → (cy, oy): sample oy ←$ Zq, compute cy,1 = [y + oysµ+1]1, cy,2 = [β(y + of sµ+1)]1
and output cy = (cy,1, cy,2).
CheckCom(ck, c): we assume one knows the type for which c was created. If type = pol, output 1 iﬀ
c1 · [α]2 = c2 · [1]2. If type = val, output 1 iﬀ c1 · [β]2 = c2 · [1]2.
VerCommit(ck, c, f, o)→ b : output c1
?= [f (s1, . . . , sµ) + osµ+1]1.
Theorem E.1 ([ZGK+17b]). Under the (µ + 1)δ–Strong Diﬃe-Hellman and the (δ, µ)–Extended
Power Knowledge of Exponent assumptions (see [ZGK+17b]), PolyCom is an extractable trapdoor
polynomial commitment.
i∈W si, α(cid:81)
compute
The proof of the theorem follows from Theorem 1 in [ZGK+17b]. The only property that is not
proved there is the trapdoor property, which is however straightforward to see if one considers a
simulator Sck that sets the values α, β, s1, . . . , sµ+1 as trapdoor.
Next, we show a CP-SNARK for polynomial evaluation relations Rpoly:
58
i=1
CPpoly.KeyGen(ck): set ek := ck and vk := ([α, β, s1, . . . , sµ+1]2)
CPpoly.Prove(ek, x, f, y, of , oy): sample o1, . . . , oµ ←$ Zq; ﬁnd polynomials qi such that f (Z1, . . . , Zµ)+
of Zµ+1 − (y + oyZµ+1) =
oi(Zi − xi).
(Zi − xi)(qi(Zi, . . . , Zµ) + oiZµ+1) + Xµ+1(of − oy − µ(cid:80)
µ(cid:80)
i=1 oi(si − xi), α(of − oy −(cid:80)µ
cµ+1 := (cµ+1,1, cµ+1,2) = [of − oy −(cid:80)µ
For i = 1 to µ, compute ci := (ci,1, ci,2) = [qi(s1, . . . , sµ) + oisµ+1, α(qi(s1, . . . , sµ) + oisµ+1)]1,
i=1 oi(si − xi))]1. Output
(cf,1 − cy,1) ·
(cid:80)µ
i=1 ci,1·[(si−xi)]2 and CheckCom(vk, cf )∧CheckCom(vk, cy)(cid:86)µ+1
π := (c1, . . . , cµ+1).
CPpoly.VerProof(vk, x, cf , cy, π): parse π
[1]2 =
cµ+1,1·[sµ+1]2
i=1 CheckCom(vk, ci).
Theorem E.2 ([ZGK+17b]). Under the (µ + 1)δ–Strong Diﬃe-Hellman and the (δ, µ)–Extended
Power Knowledge of Exponent assumptions (see [ZGK+17b]), CPpoly is a zero-knowledge CP-SNARK
for Rpoly.
:= (c1, . . . , cµ+1), output
i=1
such that (cf,1 − cy,1)· [1]2 = cµ+1,1 · [sµ+1]2 +(cid:80)µ
Correctness and knowledge soundness are immediate from Theorem 1 in [ZGK+17b]. The only dif-
ference is in the zero-knowledge property. For this, consider the following proof simulator algorithm,
Sprv(td, x, cf , cy): for i = 1 to µ, sample ci,1 ←$ G1 and compute ci,2 = α · ci,1. Next, compute cµ+1,1
i=1 ci,1 · [(si − xi)]2 holds and set cµ+1,2 ← β · cµ+1,1.
It is straightforward to check that proofs created by Sprv are identically distributed to the ones
returned by CPpoly.Prove.
F Additional Material on CP-SNARKs for PolyCom
In this section we present more CP-SNARKs for PolyCom.
F.1 Proof of our CPsc
We give a full description of the interactive protocol in Figure 3.
Proof We show the security of our protocol by reducing it to the one of [ZGK+17b, Construction
2]. For this let us recall the following theorem from [ZGK+17b]:
Theorem F.1 ([ZGK+17b, Theorem 2]). For any µ-variate total-degree-d polynomial g : Fµ →
F with m non-zero coeﬃcients, assuming Com is an extractable linearly homomorphic commitment