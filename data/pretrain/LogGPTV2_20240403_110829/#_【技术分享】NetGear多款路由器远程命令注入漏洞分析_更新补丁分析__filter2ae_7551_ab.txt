            if ( v22 )
    			v25 = 0;
            else
                v25 = v23 & 1;
            if ( v25 )
                strcpy((char *)&v50, v20);
        }
随后会进入连续的goto跳转，跳转过程中主要还是打印一些信息，随后会进入到v7处理，v7处理代码挺长的，其中涉及到了QUERY_STRING环境变量的赋值，赋值内容就是v47。当然，我们漏洞的流程，由于没有?，所以不会进入这个流程。
              if ( (_BYTE)v47 )
                setenv("QUERY_STRING", (const char *)&v47, 1);
接下来就是漏洞触发的关键位置，由于我们不满足条件，就会执行下面的语句。
            v26 = "OPTIONS";
            v27 = (char *)&v53;
之后出来后会跳转，这里会拷贝v26，也就是OPTIONS到v27中，v27的值就是v53的地址值，之后跳转。
        strcpy(v27, v26);
        goto LABEL_47;
跳转之后，会进入一系列判断，判断v53的值
              if ( !strcmp((const char *)&v53, "POST") )
    {
                v33 = (const char *)&unk_F062B;
                v34 = (char *)&v45;
    }
              else if ( !strcmp((const char *)&v53, "OPTIONS") )
              {
              }
              else
              {
    ……
              }
这里省略了一部分过程，由于v53的值是OPTIONS，最后会有一处赋值，v34会赋值为v45的地址值，之后就进入漏洞触发的关键位置，这里会调用sprintf将v50，也就是我们命令的值交给v34。而v34的值就是v45地址的值，这样调用system(&45)的时候，就执行了系统命令。
              sprintf(v34, v33, &v50);
              system((const char *)&v45);
              memset(&v49, 0, 0x40u);
              memset(&v48, 0, 0x40u);
              memset(&v51, 0, 0x20u);
              memset(&v52, 0, 0x10u);
而在我们分析的过程中，没有一处对这个命令值进行限制，最后导致了命令注入漏洞的发生。下面贴上整个源码。  
    int __fastcall sub_36C34(const char *a1, int a2, const char *a3, int a4)
    {
      v4 = a1;
      v5 = a2;
      v6 = a3;
      v7 = a4;
      v8 = fork();
      v9 = v8;
      if ( !v8 )
      {
        if ( fork() )
        {
          v10 = v9;
          goto LABEL_101;
        }
        if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
          printf("rn###############%s(%d)url=%s,method=%drn", "netgear_commonCgi", 59, v6, v7);
        v11 = fopen("/tmp/var/readydropd.conf", "r");
        if ( v11 )
        {
          fclose(v11);
        }
        else
        {
          system("cp -f /www/cgi-bin/readydropd.conf /tmp/var/");
          if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
            puts("rn###################copy readydropd.confr");
        }
        v12 = strstr(v6, "cgi-bin");
        if ( v12 )
        {
          if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
            printf("rn##########%s(%d)rn", "netgear_commonCgi", 76);
          if ( strchr(v12, 63) )
          {
            if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
              printf("rn##########%s(%d)rn", "netgear_commonCgi", 80);
            v13 = strchr(v12, 63);
            if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
              printf("rn#############%s(%d)tmp1=%s,tmp2=%srn", "netgear_commonCgi", 83, v12, v13 + 1);
            strcpy((char *)&v47, v13 + 1);
            if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              printf("rn###############%s(%d)query_string=%srn", "netgear_commonCgi", 86, &v47);
            v14 = strchr(v6, 47);
            if ( v14 )
            {
              v15 = &v50;
              memset(&v50, 0, 0x40u);
              strncpy((char *)&v50, v14 + 1, v13 - 1 - v14);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              {
                v16 = "rn###############%s(%d)cgi_name=%srn";
                v17 = 93;
                v18 = "netgear_commonCgi";
    LABEL_34:
                printf(v16, v18, v17, v15);
                goto LABEL_40;
              }
            }
          }
          else
          {
            if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              printf("rn##########%s(%d)rn", "netgear_commonCgi", 99);
            v19 = strchr(v12, 47);
            v20 = v19 + 1;                          // ;kill
            v21 = v19;                              // /;kill
            v22 = strchr(v19 + 1, 47);              // v22=0
            memset(&v50, 0, 0x40u);                 // v50init
            v23 = (char)v21;
            if ( v21 )
              v23 = 1;
            v24 = v22 == 0;
            if ( v22 )
              v24 = v21 == 0;
            if ( v24 )
            {
              if ( v22 )
                v25 = 0;
              else
                v25 = v23 & 1;
              if ( v25 )
                strcpy((char *)&v50, v20);
            }
            else
            {
              strncpy((char *)&v50, v20, v22 - 1 - v21);// v50=;kill
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                printf("rn#############tmp1=%s,tmp2=%s,tmp3=%s,cgi=%srn", v12, v21, v22, &v50);
              v15 = &v46;
              strcpy((char *)&v46, v22);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              {
                v16 = "rn###############%s(%d)path_info=%srn";
                v17 = 110;
                v18 = "netgear_commonCgi";
                goto LABEL_34;
              }
            }
          }
        }
    LABEL_40:
        if ( v7 )
        {
          if ( v7 == 1 )
          {
            v26 = "POST";
            v27 = (char *)&v53;
          }
          else
          {
            if ( v7 != 2 )
            {
    LABEL_47:
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                printf("rn###############%s(%d)request_method=%srn", "netgear_commonCgi", 130, &v53);
              if ( (_BYTE)v46 )
                setenv("PATH_INFO", (const char *)&v46, 1);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              {
                v28 = getenv("PATH_INFO");
                printf("rn###############%s(%d)PATH_INFO=%srn", "netgear_commonCgi", 136, v28);
              }
              setenv("LD_LIBRARY_PATH", "/usr/lib", 1);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              {
                v29 = getenv("LD_LIBRARY_PATH");
                printf("rn###############%s(%d)LD_LIBRARY_PATH=%srn", "netgear_commonCgi", 140, v29);