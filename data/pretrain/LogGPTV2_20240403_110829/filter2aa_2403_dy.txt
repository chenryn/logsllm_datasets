          v1=667; 
          v2=999; 
     }; 
     c(int a, int b) // ctor 
     { 
          v1=a; 
          v2=b; 
     }; 
     void dump() 
     { 
          printf ("%d; %d\n", v1, v2); 
     }; 
}; 
int main() 
{ 
     class c c1; 
     class c c2(5,6); 
     c1.dump(); 
     c2.dump(); 
     return 0; 
}; 
MSVC –x86  
使用 MSVC 编译上述程序，可得到如下所示的代码。 
指令清单 51.1  MSVC 
_c2$ = -16 ; size = 8 
_c1$ = -8 ; size = 8 
_main PROC 
     push ebp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
510 
逆向工程权威指南（下册） 
     mov   ebp, esp 
     sub   esp, 16 
     lea   ecx, DWORD PTR _c1$[ebp] 
     call ??0c@@QAE@XZ ; c::c 
     push 6 
     push 5 
     lea   ecx, DWORD PTR _c2$[ebp] 
     call ??0c@@QAE@HH@Z ; c::c 
     lea   ecx, DWORD PTR _c1$[ebp] 
     call ?dump@c@@QAEXXZ ; c::dump 
     lea   ecx, DWORD PTR _c2$[ebp] 
     call ?dump@c@@QAEXXZ ; c::dump 
     xor   eax, eax 
     mov   esp, ebp 
     pop   ebp 
     ret   0 
_main ENDP 
我们来看看程序是如何实现的。程序为每个对象（类的实例）分配了 8 个字节内存，正好能存储 2 个
变量。 
在初始化 c1 时，编译器调用了无参构造函数??0c@@QAE@XZ。在初始化另一个实例（即 c2）时，
编译器向有参构造函数??0c@@QAE@HH@Z 传递了 2 个参数。 
在传递整个类对象（C++的术语是 this）的指针时，this 指针通过 ECX 寄存器传递给被调用方函数。
这种调用规范应当符合 thiscall 规范，详细讲解请参阅本书的 51.1.1 节。 
MSVC 通过 ECX 寄存器传递 this 指针。不过，这种调用约定并没有统一的技术规范。GCC 编译器以
传递第一个函数的参数的方式传递 this 指针，其他的编译器多数都遵循了 GCC 的 thiscall 规范。 
为什么这些函数有这些很奇怪的名字（见上面）？其实这是编译器对函数名称进行的名称改编（name 
mangling）的结果。 
C++的类可能包含同名的但是参数不同的方法（即类成员函数）。这就是所谓的多态性。当然，不同的
类可以有重名却不同的方法。 
名称改编（name mangling）是一种在编译过程中，用 ASCII 字符串将函数、变量的名称重新改编的机
制。改编后的方法（类成员函数）名称就被用作该程序内部的函数名。这完全是因为编译器的 Linker 和加
载 DLL 的 OS 装载器均不能识别 C++或 OOP（面向对象的编程语言）的数据结构。 
函数 dump()调用了两次。我们再来看看构造函数的指令代码。 
指令清单 51.2  MSVC 
_this$ = -4  
  ; size = 4 
??0c@@QAE@XZ PROC ; c::c, COMDAT 
; _this$ = ecx 
     push ebp 
     mov   ebp, esp 
     push ecx 
     mov   DWORD PTR _this$[ebp], ecx 
     mov   eax, DWORD PTR _this$[ebp] 
     mov   DWORD PTR [eax], 667 
     mov   ecx, DWORD PTR _this$[ebp] 
     mov  DWORD PTR [ecx+4], 999 
     mov  eax, DWORD PTR _this$[ebp] 
     mov  esp, ebp 
     pop  ebp 
     ret  0 
??0c@@QAE@XZ ENDP ; c::c 
_this$ = -4 ; size = 4 
_a$ = 8  
 ; size = 4 
_b$ = 12  
 ; size = 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
511 
??0c@@QAE@HH@Z PROC ; c::c, COMDAT 
; _this$ = ecx 
     push ebp 
     mov   ebp, esp 
     push ecx 
     mov   DWORD PTR _this$[ebp], ecx 
     mov   eax, DWORD PTR _this$[ebp] 
     mov   ecx, DWORD PTR _a$[ebp] 
     mov   DWORD PTR [eax], ecx 
     mov   edx, DWORD PTR _this$[ebp] 
     mov   eax, DWORD PTR _b$[ebp] 
     mov   DWORD PTR [edx+4], eax 
     mov   eax, DWORD PTR _this$[ebp] 
     mov   esp, ebp 
     pop   ebp 
     ret   8 
??0c@@QAE@HH@Z ENDP ; c::c 
构造函数本身就是一种函数，它们使用 ECX 寄存器存储结构体的指针，然后将指针复制到其自己的
局部变量里。当然，第二步并不是必须的。 
从 C++的标准（ISO13, P.12.1）可知，构造函数不必返回返回值。事实上，从指令层面来来看，构造
函数的返回值是一个新建立的对象的指针，即 this 指针。 
现在我们来看看 dump()。 
指令清单 51.3  MSVC 
_this$ = -4  
; size = 4 
?dump@c@@QAEXXZ PROC  ; c::dump, COMDAT 
; _this$ = ecx 
     push ebp 
     mov   ebp, esp 
     push ecx 
     mov   DWORD PTR _this$[ebp], ecx 
     mov   eax, DWORD PTR _this$[ebp] 
     mov   ecx, DWORD PTR [eax+4] 
     push ecx 
     mov   edx, DWORD PTR _this$[ebp] 
     mov   eax, DWORD PTR [edx] 
     push eax 
     push OFFSET ??_C@_07NJBDCIEC@?$CFd?$DL?5?$CFd?6?$AA@ 
     call _printf 
     add   esp, 12 
     mov   esp, ebp 
     pop   ebp 
     ret   0 
?dump@c@@QAEXXZ ENDP ; c::dump 
很简单，dump()函数从 ECX 寄存器读取一个指向数据结构（这个结构体含有 2 个 int 型数据）的指针，
然后再把这两个整型数据传递给 printf()函数。 
如果指定优化编译参数/Ox 的话，那么 MSVC 能够生成更短的可执行程序。 
指令清单 51.4  MSVC （优化编译） 
??0c@@QAE@XZ PROC ; c::c, COMDAT 
; _this$ = ecx 
     mov  eax, ecx 
     mov  DWORD PTR [eax], 667 
     mov  DWORD PTR [eax+4], 999 
     ret  0 
??0c@@QAE@XZ ENDP ; c::c 
_a$ = 8  ; size = 4 
_b$ = 12 ; size = 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
512 
逆向工程权威指南（下册） 
??0c@@QAE@HH@Z PROC ; c::c, COMDAT 
; _this$ = ecx 
     mov  edx, DWORD PTR _b$[esp-4] 
     mov  eax, ecx 
     mov  ecx, DWORD PTR _a$[esp-4] 
     mov  DWORD PTR [eax], ecx 
     mov  DWORD PTR [eax+4], edx 
     ret  8 
??0c@@QAE@HH@Z ENDP ; c::c 
?dump@c@@QAEXXZ PROC ; c::dump, COMDAT 
; _this$ = ecx 
     mov   eax, DWORD PTR [ecx+4] 
     mov   ecx, DWORD PTR [ecx] 
     push eax 
     push ecx 
     push OFFSET ??_C@_07NJBDCIEC@?$CFd?$DL?5?$CFd?6?$AA@ 
     call _printf 
     add  esp, 12 
     ret  0 
?dump@c@@QAEXXZ ENDP ; c::dump 
优化编译生产的代码就这么短。我们需要注意的是：在调用构造函数之后，栈指针不是通过“add esp, 
x”指令到恢复其初始状态的。另一方面，构造函数的最后一条指令是指令 ret 8 而不是 RET。 
这是因为此处不仅遵循了 thiscall 调用规范（参见 51.1.1 节），而且还同时遵循 stdcall 调用规范（64.2
节）。Stdcall 规范约定：应当由被调用方函数（而不是由调用方函数）恢复参数栈的初始状态。构造函数
（也是本例中的被调用方函数）使用“add ESP，x”的指令把本地栈释放 x 字节，然后把程序控制权传递给
调用方函数。 
读者还可以参考本书第 64 章，了解各调用规范的详细约定。 
必须指出的是，编译器自身能决定调用构造函数和析构函数。我们则可以通过 C++语言的编程基础找到
程序中的相应指令。 
MSVC-x86-64 
在 x86-64 环境里的 64 位应用程序使用 RCX、RDX、R8 以及 R9 这 4 个寄存器传递函数的前 4 项参数，
而其他的参数则通过栈传递。然而，在调用那些涉及类成员函数的时候，编译器会通过 RCX 寄存器传递
类对象的 this 指针，用 RDX 寄存器传递函数的第一个参数，依此类推。我们 可以在类成员函数 c(int a,int b)
中看到这一点。 
指令清单 51.5  x64 下的 MSVC 2012 优化 
; void dump() 
?dump@c@@QEAAXXZ PROC ; c::dump 
     mov  
r8d, DWORD PTR [rcx+4] 
     mov  
edx, DWORD PTR [rcx] 
     lea  
rcx, OFFSET FLAT:??_C@_07NJBDCIEC@?$CFd?$DL?5?$CFd?6?$AA@ ; '%d; %d' 
     jmp  
printf 
?dump@c@@QEAAXXZ ENDP ; c::dump 
; c(int a, int b) 
??0c@@QEAA@HH@Z PROC ; c::c 
     mov  
DWORD PTR [rcx], edx ; 1st argument: a 
     mov  
DWORD PTR [rcx+4], r8d ; 2nd argument: b 
     mov  
rax, rcx 
     ret  
0 
??0c@@QEAA@HH@Z ENDP ; c::c 
; default ctor 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
513 
??0c@@QEAA@XZ PROC ; c::c 
     mov  
DWORD PTR [rcx], 667 
     mov  
DWORD PTR [rcx+4], 999 
     mov  
rax, rcx 
     ret  
0 
??0c@@QEAA@XZ ENDP ; c::c 
64 位环境下
①
GCC-x86 
的int型数据依然是 32 位数据。因此，上述程序仍然使用 32 位寄存器传递整型数据。 
类成员函数 dump()还使用了 JMP printf 指令取代了 RET 指令。我们在 13.1.1 节中已经见过这个 hack 了。 
除了个别不同之处以外，GCC 4.4.1 的编译方式和 MSVC 2012 的编译手段几乎一样。 
指令清单 51.6  GCC 4.4.1 
       public main 
main proc near 
var_20 = dword ptr -20h 
var_1C = dword ptr -1Ch 
var_18 = dword ptr -18h 
var_10 = dword ptr -10h 
var_8   = dword ptr -8 
     push ebp 
     mov   ebp, esp 
     and   esp, 0FFFFFFF0h 
     sub   esp, 20h 
     lea   eax, [esp+20h+var_8] 
     mov   [esp+20h+var_20], eax 
     call  _ZN1cC1Ev 
     mov   [esp+20h+var_18], 6 
     mov   [esp+20h+var_1C], 5 
     lea   eax, [esp+20h+var_10] 
     mov   [esp+20h+var_20], eax 
     call  _ZN1cC1Eii 
     lea   eax, [esp+20h+var_8] 
     mov   [esp+20h+var_20], eax 
     call  _ZN1c4dumpEv 
     lea   eax, [esp+20h+var_10] 
     mov   [esp+20h+var_20], eax 
     call  _ZN1c4dumpEv 
     mov   eax, 0 
     leave 
     retn 
main endp 
这里我们可以看到另外一种风格的名称改编方法，当然这应当是GNU
②
① 很明显，这是为了使 64 位系统向下兼容 32 位的 C/C++应用程序。 
② 这里有一个比较好的文档，它描述了各种编译器的不同的命名混淆规则。 
的专用风格。必须注意的是，
类对象的指针是以函数的第一个参数的方式传递的。当然，编程人员看不到这些技术细节。 
第一个构造函数是： 
                    public _ZN1cC1Ev ; weak 
_ZN1cC1Ev   
proc near   
; CODE XREF: main+10 
arg_0   
= dword ptr 8 
push     ebp 
mov     ebp, esp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
514 
逆向工程权威指南（下册） 
mov     eax, [ebp+arg_0] 
mov     dword ptr [eax], 667 
mov     eax, [ebp+arg_0] 
mov     dword ptr [eax+4], 999 
pop     ebp 
retn 
_ZN1cC1Ev   
endp 
它通过外部传来的第一个参数获取结构体的指针，然后在相应地址修改了 2 个数值。 
第二个构造函数是： 
                    public _ZN1cC1Eii 
_ZN1cC1Eii   
proc near 
arg_0   
= dword ptr 8 
arg_4   
= dword ptr 0Ch 
arg_8   
= dword ptr 10h 
push     ebp 
mov     ebp, esp 
mov     eax, [ebp+arg_0] 
mov     edx, [ebp+arg_4] 
mov     [eax], edx 
mov     eax, [ebp+arg_0] 
mov     edx, [ebp+arg_8] 
mov     [eax+4], edx 
pop     ebp 
retn 
_ZN1cC1Eii   
endp 
上述函数的程序逻辑与下面的 C 语言代码大致相当： 
void ZN1cC1Eii (int *obj, int a, int b) 
{ 
  *obj=a; 
  *(obj+1)=b; 
}; 
结果是完全可以预期的。 
现在我们来看看 dump()函数： 
                    public _ZN1c4dumpEv 
_ZN1c4dumpEv  
proc near 
var_18  
= dword ptr -18h 