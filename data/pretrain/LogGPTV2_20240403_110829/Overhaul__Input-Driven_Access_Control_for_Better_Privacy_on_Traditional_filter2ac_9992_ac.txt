access control [27], where a stronger connection between user
intent and program behavior can be achieved. This primarily
stems from the design decision to treat existing applications in
a black-box fashion. Nevertheless, we believe that OVERHAUL
signiﬁcantly raises the bar for attacks, bringing much of the
security of user-driven access control to existing platforms in
a transparent manner.
447
IV.
IMPLEMENTATION
In this section, we focus on the implementation details of
how we guarantee the properties required of each component
of OVERHAUL. Though our design is sufﬁciently general to
apply to OSes that
implement a traditional access control
model, we built our prototype for the Linux kernel and X.Org
implementation of the X Window System.
A. Enhancements to X Window System
The X Window System is responsible for enforcing several
security properties outlined in Sections II & III. In particular,
it must guarantee that a trusted path exists for authentic user
input, a trusted output for visual notiﬁcations, and interpose
on all accesses to the display contents and system clipboard.
Trusted input. The underlying assumption behind our pro-
totype implementation of a trusted input path for the X Win-
dow System is that user inputs that originate from hardware
attached to the system should be considered authentic, while
software-generated events should be untrusted. While there are
legitimate use cases for allowing programmatic generation of
input events (e.g., GUI testing tools) such avenues are also
required for malware to interact with a user interface on the
user’s behalf so long as the hardware is considered to be free
of embedded malicious functionality.
As a result, OVERHAUL focuses on distinguishing between
hardware and software-generated input events. We identiﬁed
two facilities provided by X11 for generating and injecting
synthetic events to the event queue: the SendEvent [30] and
XTestFakeInput [15] requests. SendEvent is a core X11
protocol request that allows a client to send events to other
clients connected to an X server. In particular, this interface
could allow malware to inject keystrokes or mouse events on
other windows. However, events sent using this interface must
have a ﬂag set that indicates that the event is synthetic. As such,
ﬁltering such input events within the X server is a matter of
checking for the presence of this ﬂag.
The second request, XTestFakeInput, is part of the XTest
extension, which is used to provide a GUI testing framework.
In this case, it is not possible to implement a ﬂag check since
no indicator ﬂag is used with XTest requests. Therefore, it
was necessary to modify the X server to tag events with the
extension or driver that generated the event. While this is more
onerous than checking for the existence of a ﬂag, it is also a
method for determining the provenance of input events that
generalizes to future modiﬁcations to the X Window System.
With the ability to distinguish hardware-generated input
from synthetic input, the X server was modiﬁed to connect
to a secure communication channel upon initialization (as we
will explain in Section IV-B), and send interaction notiﬁcations
to the kernel permission monitor every time the user interacts
with an X client. These notiﬁcations are labeled with the PID
of the process that received the event and a timestamp. The PID
serves as an unforgeable binding between a window belonging
to a process and events, as the mapping between X client
sockets and the PID is retrieved from the kernel.
We note that the trusted input path described so far re-
mains vulnerable to clickjacking attacks [20]. For instance,
a malicious X client may place transparent overlays on the
Figure 5. Sample visual alerts shown by OVERHAUL. The cat image is used
as the visual shared secret to indicate that the alert is authentic.
screen, or periodically display a previously invisible window
over other applications in an attempt to trick users into clicking
on them and stealing authentic input events. To prevent this,
OVERHAUL only generates interaction notiﬁcations if the X
client receiving the event has a valid mapped window that has
stayed visible above a predeﬁned time threshold.
Trusted output. As described before, the trusted output
path that OVERHAUL utilizes is a visual alert shown on
the screen whenever a sensitive resource is accessed. Since
the X Window System controls the entire display contents,
OVERHAUL ensures that the displayed alert is rendered on top
of all other windows, and cannot be blocked, obscured, or
manipulated by other X clients. We have designed the alert
messages to be displayed for a few seconds at the top of the
screen at a reasonably large size to be easily noticeable. Since
resource accesses can only be granted immediately following
user input, the user is highly likely to be present and interacting
with the computer, making it difﬁcult for her to miss an alert.
In addition, the alerts make use of a visual shared secret set by
the user of the system to prevent malicious applications from
forging fake alerts. Two example alerts are shown in Figure 5.
Note that, compared to popup prompts that require explicit
policy decisions from the user during runtime (e.g., Windows
User Account Control, or iOS permission dialogues), alerting
the users with visual notiﬁcations inherently establishes a
looser association between user actions and the application
behavior. Indeed, we have implemented and veriﬁed that
OVERHAUL’s security primitives can be used to support such
a security model in a trivial manner, where the trusted output
path would be used for displaying an unforgeable prompt, and
the trusted input path to verify user interaction with it. How-
ever, it has been shown that popup prompts have severe usabil-
ity issues that conﬂict with their security properties, and that
they are often ignored by users, or disabled completely [24].
Therefore, we believe the non-intrusive, transparent approach
we have taken with OVERHAUL is a worthwhile trade-off
between security and usability, and would be a more effective
security solution in a real-life setting. We do not explore the
popup prompt approach further in this paper.
Display contents. The X Window System allows any client
program to access the contents of the root window (i.e., the
entire screen), or any speciﬁc window through the GetImage
core protocol request [30], or the XShmGetImage request
provided by the MIT shared memory extension [11]. These
448
CopyA
PasteB
2
3
SetSelection
GetSelection
Owner is A
App A
SelectionRequest
Copy 
Source
8
9
ChangeProperty
data
SendEvent
5
1
4
7
X
Server
ConvertSelection
6
App B
Paste 
Target
10
12
SelectionNotify
GetProperty
11
data
DeleteProperty
13
Figure 6.
steps are highlighted in bold.
Protocol diagram for the X11 copy & paste operation. Modiﬁed
interfaces can be used to retrieve the displayed contents for any
purpose, such as taking screenshots, or recording the desktop.
In order to mediate accesses to the display contents of
X clients, our modiﬁed X server intercepts these events,
and queries the kernel permission monitor via the secure
communication channel with a message containing the PID
of the requesting process and a timestamp. Based on the
response, access is either granted, or the screen capture request
is dropped. This way, OVERHAUL can enforce that display
contents can only be accessed in response to user input.
The X Window System also provides two additional core
protocol requests, CopyArea and CopyPlane, which are used
for copying a representation of display contents between two
buffer areas. These requests could be used as an alterna-
tive approach to capture the screen contents, and therefore,
OVERHAUL must also interpose on them. However, unlike
the previous GetImage, these requests are not speciﬁcally
designed for capturing display contents, and they are regularly
used by X clients for various other purposes. Therefore, in
this case, OVERHAUL ﬁrst needs to inspect the owners of the
source and destination buffers speciﬁed in the copy request. If
the owners of both buffers are identical, in other words, a client
is copying a portion of its own window, the request is allowed
to proceed. However,
is requesting the display
contents owned by a different client (or the root window),
OVERHAUL applies its user input-based access control as
before, and allows or blocks the request accordingly.
if a client
Clipboard. The X Window System does not provide a
central clipboard space, but instead deﬁnes the copy & paste
operations as an inter-client communication protocol [28]
outlined in Figure 6. The steps to copy data from a source
client to a target client are as follows.
(1) A copy operation is initiated by user input received via
an X input driver. (2) The source client asserts ownership of
a selection object by issuing to the X server a SetSelection
request. In (3) and (4) the source client conﬁrms with the
X server that it has successfully acquired the selection. This
concludes the copy operation; note that no data has actually
been copied at this stage.
(5) The paste event is initiated by user input. (6) The
target client sends a ConvertSelection request to the X
server, (7) which, in turn, issues a Selection Request to
the selection owner (i.e., the source client) to notify it of
the request for the copied data. (8) The source client sends
the data to the X server to be stored as a property using
a ChangeProperty request, (9) and then requests from the
server that the target client be sent a Selection Notify
event, using a SendEvent request. (10) The paste target is
notiﬁed that the copied data is available. (11) The target client
responds with a GetProperty request, (12) retrieves the data,
(13) and ﬁnally, removes it from the server.
In Figure 6,
the protocol steps that were modiﬁed in
OVERHAUL are highlighted in bold. In particular, steps (1)
and (5) are events that are veriﬁed as authentic user input
from a hardware input device. The X server notiﬁes the kernel
permission monitor of these events as previously described.
In steps (2) and (6), before serving the SetSelection or
ConvertSelection requests received from the clients, the
X server ﬁrst queries the kernel permission monitor via the
secure communication channel to conﬁrm that the copy or
paste request is preceded by corresponding user interaction.
The operation is allowed to proceed only if the permission
monitor responds with a permission grant message; otherwise,
the client is sent back a bad access error.
Note that, this copy & paste protocol is followed merely by
convention, and the given interaction sequence is not enforced
by the X server. As a result, a malicious X client may attempt
to skip certain steps of the protocol to bypass OVERHAUL’s
checks. One possible attack vector is the SendEvent request
which allows an X client to command the X server to send an
X11 event on behalf of the client. By exploiting this mecha-
nism, a malicious client can directly send SelectionRequest
events to other clients and receive the copied data from the
selection owner. To prevent such attacks, our implementation
also interposes on the SendEvent requests, and blocks the
sending of events that can break the copy & paste protocol.
Other examples of possible attacks include subscribing to
events generated by the X server when properties are created
and updated to retrieve the pasted data stored in them before
the actual paste target could remove it. OVERHAUL ensures
that such events are only delivered to the paste target while
the clipboard data is in ﬂight. Due to space restrictions, we
omit details of these low-level implementation details.
B. Enhancements to the Linux Kernel
As shown in Section III, our implementation augments
the Linux kernel with a permission monitor that establishes a
secure communication link to the X Window System, mediates
sensitive hardware accesses, adjusts per-application privileges
in response to interaction notiﬁcations, and responds to permis-
sion queries from the X server for access to display resources.
Secure communication channel. The ﬁrst property that
our kernel must support is establishing and authenticating the
communication channel to the X Server. In our prototype, we
used the Linux netlink facility to provide this channel [29].
Netlink was originally designed to exchange networking in-
formation between the kernel and userspace, but it serves as a
robust general communication channel across this boundary.
449
Netlink, however, does not solve the authentication prob-
lem. That is, the kernel and X server must ensure that no
malicious program is interposing on the channel. While using
a standard mutual authentication protocol
is possible, our
prototype instead relies on the fact that the kernel operates
in supervisor mode and can introspect on the userspace X
process. Once the kernel establishes the netlink channel and
receives a connection request from X during server initializa-
tion, it examines the virtual memory maps to check whether
the process it is communicating with is indeed the X server.
In particular, it checks whether the executable code mapped
into the process is loaded from the well-known, and superuser-
owned, ﬁlesystem path for the X binaries. If so, it considers
the remote party to be authenticated as the legitimate X server
and, due to the kernel’s supervisor privileges, the X server
trusts that the kernel will perform this procedure correctly.
Device mediation. OVERHAUL must interpose on all ac-
cesses to sensitive hardware devices. To this end, it sufﬁces on
Linux to monitor open system call invocations on device nodes
exposed in the ﬁlesystem. Therefore, our prototype implements
an augmented open system call that, in addition to normal
UNIX access control checks, looks up the interaction notiﬁca-
tion records received from the X server for the running process
to allow or deny access to the device accordingly. Note that
it is usually considered better practice to implement kernel-
side security checks using the Linux Security Modules (LSM)
framework [32], instead of modifying system calls directly.
However, as of this writing, LSM does not ofﬁcially support
stacking multiple security modules. Since OVERHAUL is not a
replacement for other security modules, we implemented our
prototype in this way as a conscious design choice.
An important implementation detail of our prototype deals
with accurately mapping sensitive devices to their ﬁlesystem
paths. In particular, modern Linux distributions often make
use of dynamic device name assignments at runtime using
frameworks such as udev. Therefore, our prototype relies on
a trusted helper application, owned by the superuser and
protected against unauthorized modiﬁcation using normal user-
based access control, to manage this mapping. It is invoked
in response to changes in the device ﬁlesystem, mounted by
convention at /dev, and propagates these changes to the kernel
via an authenticated netlink channel.
Process permission management. The kernel permission
monitor receives interaction notiﬁcations from the X server,
which includes a PID and a timestamp, and needs to record