Using the classiﬁcation framework described in Sec. IV-A,
we randomly select 8 traces for each app as the training dataset
and the rest 2 traces for each app as the test set. Therefore,
there were 960 traces in total in the training set and 240 traces
in the test set. Given a test trace, the SVM classiﬁer (using
LibSVM) provides a probability estimation of each class it may
belong to—the higher the probability, the more likely the trace
belongs to the corresponding class. A correct classiﬁcation
means the kth class test sample was correctly classiﬁed as
the kth class; all other results are considered incorrect. In this
way, we can rank the classiﬁcation results by their probability
values and evaluate the top 1, top 2 and top 3 accuracy. Top N
accuracy is the percentage of the test samples being correctly
labeled by one of the top N predicted classes by the classiﬁer.
We ﬁrst tried to classify the foreground apps using single
features. In these experiments, we still used our classiﬁcation
framework, but conducted training and testing with each of
the 6 features separately (with l = 1 in each test). The
results are shown in Fig. 3. As shown in the ﬁgure, a single
feature does not carry enough information to correctly identify
a foreground app. Particularly, most features will yield a
classiﬁcation accuracy of less than 25% for top 1 result;
the active_count feature has the best performance, with
slightly over 40% for top 1 accuracy and almost 60% for top
3 accuracy. In contrast, when the 6 features are combined, the
classiﬁcation results (the bar labeled as “All” in Fig. 3) can
reach 89.2% for top 1 accuracy, and 97.5% for top 3 accuracy.
These results suggest that the iOS side-channel attack vectors
derived from global statistics are not as powerful as the ones
we have seen on Android, which typically leak per-app statistic
information. Therefore, successful side-channel attacks on iOS
need to combine multiple side-channel attack vectors. It also
explains why we needed a new classiﬁcation framework for
conducting side-channel analysis in this paper.
We also studied if all 5000 data points in the side-channel
traces are necessary for classiﬁcation. Particularly, we used
the ﬁrst 1000 data points (corresponding to 1 second of
data collection) for both training and testing and show the
classiﬁcation accuracy in Fig. 4a (the bars with “1s” labels).
Of course, in these experiments all 6 features were used.
Similarly, we also trained and tested with the ﬁrst 2000, 3000,
4000 data points, and show the results in the same ﬁgure
(the bars with “2s”, “3s”, “4s” labels). We can see from the
ﬁgure that more data points clearly make classiﬁcation results
better. But the ﬁrst 2000 data points already contain a large
amount of information for classifying a foreground app: 70%
for top 1 accuracy, 79.6% for top 2 accuracy, and 85.8% for
top 3 accuracy. In contrast, using only the ﬁrst 1000 data
points (i.e., 1 second of data collection) is not enough for
classifying the apps, with the top 1 accuracy being 21.3%.
This is likely because many signature activities of an app’s
launching procedure happen between 1 second to 2 seconds
after the launch begins.
2) Safari Websites: We randomly selected 100 web-
sites from Alexa Top 500 sites on the web (alexa.com/
topsites) and Moz Top 500 registered domains (moz.com/
top500). We used Cycript to automate the following process:
First, the monitoring app is run in the background; second,
after 2 seconds, Safari is launched to load a blank page; third,
after another 3 seconds, the URL bar is ﬁlled with the target
website’s URL and the “enter” button is pressed; Finally, 10
seconds after the website is visited, Safari is killed so that
the experiment can be restarted. It is worth noting that traces
collected when a website is visited from a clean state—newly
started Safari with a blank page—is not different from when
it is visited from the same tab that has already visited another
website. To illustrate this point, we show the network traces of
launching the Safari, and then visiting yelp.com (the upper
ﬁgure of Fig. 5); of visiting youtube.com ﬁrst and then
yelp.com (the lower ﬁgure of Fig. 5). Though the traces
collected for yelp.com in these two cases are not exactly
the same due to noise, they are very similar in the ﬁgure (and
also in the actual data). Besides, the beginning of the website
visit is easy to identify by the monitoring app, since ibytes
and obytes counters increase drastically when it happens.
The monitoring app collects the ﬁrst 5000 data points
(roughly 5 seconds) once large increases of these counters
were observed (i.e., when the “enter” button was pressed). We
collected 10 traces for each website (with 6 time series in
each trace) and the total number of traces was 1000. 8 traces
for each website were randomly selected as training data and
the rest were used as test data. So the training dataset and
test dataset contains 800 and 200 traces, respectively. Fig. 4b
shows the result of classiﬁcation.
When all the 5000 data points are used for classiﬁcation,
the top 1 classiﬁcation accuracy could reach 68.5% and top
3 accuracy could reach 84.5%. With fewer data points (e.g.,
3000 or 4000 data points), the classiﬁcation accuracy drops
only slightly. However, the top 1 classiﬁcation accuracy drops
to 28.5% when only the ﬁrst 2-second data is used and to 3.5%
6
(a) Foreground Apps
(b) Safari Websites
(c) Maps Searches
Fig. 4: Classiﬁcation results.
classiﬁcation accuracy is signiﬁcant when only the ﬁrst 1000
data points are used.
V. ATTACK 2: DETECTING SENSITIVE IN-APP ACTIVITIES
We call the user’s speciﬁc activities inside an iOS app the
in-app activities. In this section, we demonstrate that some
in-app activities that lead to severe privacy breach may be
identiﬁed by sampling memory statistics listed in Table III.
We also show how such incidents can be exploited in practical
attacks.
Fig. 5: Network traces of using Safari to visit Yelp.com from
a clean state, and visit Yelp.com after visiting Youtube.com.
when only the ﬁrst 1-second data is used. The results suggest
that the website loading typically takes longer than 2 seconds.
attack. We
app on iOS in this
3) Apple Maps Searches: We
targeted the built-in
Maps
selected 100
U.S. National Historic Landmarks from the travel channel
(travelchannel.com) and Wikipedia. Then we collected
10 traces when searching each of these locations using the
Maps app. We used Cycript to automate the following steps:
First, the monitoring app runs in the background; second, the
Apple Maps is launched after 2 seconds; third, the name of
the landmark is ﬁlled into the search box and the “enter”
button was pressed; ﬁnally, 10 seconds later Maps is killed.
Because the target of the attack is the search location rather
than the current location, we did not ask the app to calculate the
route. The ﬁrst 5000 data points (about 5 seconds) after “enter”
was pressed were collected as the trace of the corresponding
location search. The classiﬁcation test was performed in the
same way as that of the previous two examples. The results
of the classiﬁcation are shown in Fig. 4c. When all the 5000
data points of the 6 features are used, the classiﬁer achieves
an accuracy of 50% for top 1 accuracy and 79% for top
3 accuracy. What makes the results interesting is that with
only the ﬁrst 4000 data points, the classiﬁcation accuracy
is slightly better. This is presumably because all signature
activities happen within 4 seconds, and the 5th-second data
only add noise to the classiﬁcation experiments. The drop of
VM
faults
Feature
Category
TABLE III: Attack vectors.
free_count
active_count
zero_ﬁll_count
Prior studies such as
Zhou et al. [67] and Chen
et al. [32] have demon-
strated to use the exact net-
work packet sizes and di-
rections to match the pat-
terns of speciﬁc user ac-
tivities in web applications
or Android apps. However,
we cannot use the same algorithms in our work. We face two
new challenges that were not encountered in previous research:
(1) iOS do not provide per-app resource usage statistics
(e.g., through procfs on Android). As a consequence, the
side-channel observations are noisy. Therefore, the algorithm,
instead of expecting exact matches, must tolerate noise. (2)
Any individual attack vector may not manifest clear pattern
due to its noisy nature, we need an algorithm to exploit
multiple attack vectors at the same time. Therefore, we need to
develop a pattern matching algorithms for multi-dimensional
data traces.
A. Attack Methods
(cid:126)Xt =(cid:8) (cid:126)X 1
(cid:9), where (cid:126)X i
and a signature (cid:126)St = (cid:8) (cid:126)S1
We developed a pattern matching algorithm that com-
pares two multi-dimensional data traces that are poten-
tially polluted by noise. More formally, given a sample
,··· , X i
),
tni
t =
) we aim to measure the distance between
(cid:9), where (cid:126)Si
t = (X i
t1
t ,··· , (cid:126)Sl
t ,··· , (cid:126)X l
(Si
t1
the sample and the signature, d( (cid:126)Xt, (cid:126)St).
,··· , Si
tni
t , (cid:126)X 2
t , (cid:126)S2
, Si
t2
t
, X i
t2
t
To address the two technical challenges, background noise
and multi-dimensional data (with different length in each di-
mension), we adopted an extended DTW algorithm [58], which
extends the original DTW algorithm to multi-dimensional
time series. The multi-dimensional DTW, denoted DTW_I,
calculates DTW distance for each feature separately, and sums
7
Top 1Top 2Top 3020406080100Accuracy(%)1s2s3s4s5sTop 1Top 2Top 3020406080100Accuracy(%)1s2s3s4s5sTop 1Top 2Top 3020406080100Accuracy(%)1s2s3s4s5sSafari   youtube.comyelp.comup each DTW distance after normalization. So the distance
between (cid:126)Xt and (cid:126)St would be:
· DTW(cid:0) (cid:126)X k
t , (cid:126)Sk
t
(cid:1)
l(cid:88)
k=1
1
wk
d( (cid:126)Xt, (cid:126)St) =
Here wk is the normalization factor which is determined
empirically. In our attacks, wk is the average distance between
different samples of the signature traces, { (cid:126)St}.
The extended DTW algorithm only gives us a relative
distance measure: the length of the traces and the level of
distortion will both affect the measurement. As such, a pattern
matching algorithm using a ﬁxed threshold is likely to be very
fragile. In our attacks, to determine whether a sample matches
a signature pattern, we compare the sample with multiple
signature patterns to which this sample may be related.
B. Case Studies
We collected 10 traces for each in-app activity by sampling
the 4 features (in Table III) at the rate of 1000/s. Each trace is
comprised of 4 time series. Considering the raw data of any of
these time series (cid:126)At = {At1 , At2,··· , Atn}, we ﬁrst calculate
the difference between Ati and At1, i.e., Bti = Ati − At1, to
construct a new time series (cid:126)Bt = {Bt1 , Bt2,··· , Btn}. Then,
to reduce the noise in the data, we only keep data points in (cid:126)Bt
that appear more than 50 times consecutively, and remove the
repeated data points. The resulting time series (cid:126)Xt is the time
series of a feature that we use to calculate the DTW distance.
1) Linking Bitcoin Addresses to iOS Devices: Bitcoin [51]
is the most popular cryptographic currency to date. A Bitcoin
coin is a chain of ECDSA digital signatures. In each trans-
action the coin is involved in, the sender signs the hash of
the previous transactions of the coin together with the public
key of the receiver using her own private key. The receiver
can verify the ownership of the coin by verifying the digital
signature using the sender’s public key. To protect the privacy
of the users, the identities of the senders and the receivers in
a transaction are replaced by the Bitcoin addresses. A Bitcoin
address is the hash value of a public key that the user holds.
Each user may possess one or more Bitcoin addresses, thus
public/private ECDSA key pairs. Since the coins stored in one
address will be spent in their entirety during one transaction,
unspent changes will be saved in the original Bitcoin address
or, for many Bitcoin wallets, a newly created Bitcoin address.
The target. Anonymity and privacy are desired properties of
the Bitcoin network. Neither the payers nor the payees in any
transactions should be identiﬁed in the public record. Although
Bitcoin’s strong user privacy is claimed in the original paper
of Bitcoin [51], many previous studies have demonstrated that
it is still possible to cluster Bitcoin addresses belonging to
the same user by conducting transaction graph analysis, and
further link these addresses to online merchants because some
of their addresses are publicly known [27]. Nevertheless, it is
still considered impossible to de-anonymize arbitrary Bitcoin
users [49]. The goal of our side-channel analysis is to link the
Bitcoin transactions with the monitored mobile user, thus de-
anonymizing the transactions that belong to the owner of the
iOS device.
8
Our attack. The high-level idea of our attack is to detect
the user’s action of making payment with the Bitcoin wallet
software on the victim iOS device and record the timestamp
of the transaction. Because all successful
transactions are
included in a public record that can be looked up easily, the
adversary is able to correlate the online transaction records
with the side-channel detected Bitcoin activity. However, there
are a few complications that require us to develop a more
polished algorithm than this basic solution. First, because the
number of transactions in each block is large (about 2000 as
of May 2017 [26]) and the side-channel measured timestamp
may be off by seconds, more than one transactions (e.g., in our
analysis, up to hundreds) in the online record can be linked
to the detected Bitcoin transaction activity. Second, the same
Bitcoin address is typically not reused, because many Bitcoin
wallets will generate a new Bitcoin address to receive the un-
spent Bitcoins for each transaction to improve the privacy and
anonymity of the users. This artifact makes directly taking the
intersection of multiple correlated transaction sets unfeasible.
Therefore, we have reﬁned our algorithm as follows.
In order to better describe our attack, we model a Bitcoin
transaction, T, as a 3-tuple: T = (S, R, t), where S is the
set of payers of the transaction, R is the set of payees of the
transaction, and t is the timestamp of the transaction. A payer
or payee is one Bitcoin address, a. We particularly use function
T() to represent each element in the tuple. For instance, the
timestamp of a transaction is denoted by T(t) and the payer
is T(S). We also model the ith block in the blockchain, Bi,
as a 2-tuple: Bi = (T, t). We use Bi(T) to denote the set of
transactions that is associated with block Bi; Bi(t) to denote
the timestamp of the block.
Using method described in Sec. V-A, our monitoring app
can detect, and record the timestamp of, each occurrence of the
Bitcoin transaction in which the mobile user is the payer. The
timestamps of these events are denoted {t1, t2, t3,··· , tn},
where n is the total number of times that the monitoring
app has detected such transactions. We emphasize that the
monitoring app does not need to successfully detect all trans-
actions; a non-contiguous subset is usually sufﬁcient. Then
for each ti, i ∈ {1, 2,··· , n}, we locate the next α blocks
in the blockchain; that is, we ﬁnd a set of α blocks, Bi =
{Bj+1, Bj+2,··· , Bj+α}, so that Bj+1(t) ≥ ti but Bj(t) < ti.