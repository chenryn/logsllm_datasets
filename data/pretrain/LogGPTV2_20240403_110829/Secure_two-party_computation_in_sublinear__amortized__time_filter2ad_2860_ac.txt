### Server-Client State Sharing and Secure Computation

The server transmits the relevant portion of its state share, denoted as Π, to the client, enabling the client to reconstruct the value \( z \). For a detailed understanding of the secure initialization and secure computation of the RAM's next instruction, refer to Figures 1 and 2. In these figures, \([v]\) represents the bitwise secret-sharing of a value \( v \) between the two parties. The following section describes the evaluation process for a single virtual instruction \( I \), shared between the two parties (see Figure 3 for further details).

#### Evaluation Process

1. **Secure Computation of Real Instructions:**
   - The parties repeatedly use secure computation of an oblivious evaluation function (OE) to generate a sequence of real instructions \(\hat{I}_1, \hat{I}_2, \ldots\).
   - Each real instruction \(\hat{I}\) is revealed to the server, which then executes it on the ORAM data structure it maintains.
   - If \(\hat{I}\) is a read instruction, the value \( d \) read from the ORAM is secret-shared with the client.

2. **Completion of Instruction Emulation:**
   - Once all real instructions have been executed, the emulation of the virtual instruction \( I \) is complete.
   - If \( I \) was a read instruction, the virtual value \( d \) read is secret-shared between the client and the server.

**Key Observation:**
- Each secure computation is performed over small inputs, which allows the protocol to achieve sublinear amortized cost.

**Theoretical Result:**

**Theorem 2.** If an ORAM construction and a 2PC protocol secure against semi-honest adversaries are used, our protocol securely computes \( f \) against semi-honest adversaries. Furthermore, if \( f \) can be computed in time \( t \) and space \( s \) on a RAM, our protocol runs in amortized time \( O(t) \cdot \text{polylog}(s) \), the client uses space \( O(\log(s)) \), and the server uses space \( s \cdot \text{polylog}(s) \).

**Security Against Malicious Adversaries:**
- If the underlying secure-computation is secure against malicious parties, a simple modification to our protocol will suffice for security against malicious adversaries. Specifically, we include a signature on the outputs of all secure computations using a signing key held by the other party and modify the functions to verify these signatures before proceeding. The proof of this claim is left for future work. We note that this modification does not apply to our more efficient, concrete solution presented in Section 4.1.

### Optimized Protocol

In Section 3, we demonstrated that any ORAM protocol can be combined with any secure two-party computation scheme to achieve a secure computation scheme with sublinear amortized complexity. In this section, we present a more efficient and practical scheme by instantiating our generic protocol with Yao’s garbled circuits and the ORAM construction of Shi et al. [19]. Our approach deviates from the generic protocol by performing parts of the computation locally when possible without compromising security. This section details our scheme, including algorithmic and engineering decisions, implementation choices, and complexity analysis. Section 5 provides experimental performance results, showing significant improvements over traditional secure computation methods.

#### Overview of the ORAM Construction

We start with an overview of the ORAM construction by Shi et al. [19], which forms the basis of our protocol. The primary data storage structure is a binary tree with the following properties:
- To store \( N \) data items, a binary tree of height \( \log N \) is constructed, where each node can hold \( \log N \) data items.
- Each item is assigned to a randomly chosen leaf node, and the identifier of this leaf node is appended to the item. The item, along with its assignment, is encrypted and stored on the path from the root to the assigned leaf node.
- To find a data item, the client retrieves the leaf node associated with the item, sends the identifier to the server, and the server fetches and sends all items along the path. The client decrypts the content of each node and searches for the item. Upon finding it, the client reassigns it a new leaf identifier and inserts it at the root node, continuing the search to prevent the server from learning the location of the item.

**Load Balancing Mechanism:**
- To prevent nodes from overflowing, after each ORAM access, two nodes are chosen at random from each level of the tree. One item is evicted from each of these nodes and inserted into a child node on the path towards its assigned leaf node. The client performs "dummy" insertions to hide which child receives the evicted item.

**Recursive Binary Trees:**
- The client recovers the leaf identifier associated with the item of interest by recursively using binary trees. Each item can store multiple mappings, and the total number of recursively built trees is \( \log_r N \). The smallest tree, containing very few items, can be stored by the client. The lookup process involves a series of lookups in these trees, starting with the smallest.

**Security Intuition:**
- Every time the client looks up an item, it is reassigned a new leaf node and reinserted at the root, making the paths independent and indistinguishable. During eviction, a node is equally likely to accept or lose an item, ensuring negligible overflow probability with a bucket size of \( O(\log N) \).

### High-Level Protocol

Assuming a database of \( N \) items, each item in each recursive level holds \( r \) mappings between virtual addresses and leaf identifiers from the level above. The client and server perform the following steps to access an item at address \( v \):

1. **Virtual Address Sharing:**
   - The client and server have shares \( v_C \) and \( v_S \) of the virtual address \( v = v_C \oplus v_S \).

2. **Two-Party Computation for Virtual Addresses:**
   - The client and server run a two-party computation protocol to produce shares \( v(1)_C, \ldots, v(\log_r N)_C \) and \( v(1)_S, \ldots, v(\log_r N)_S \) for the virtual addresses they will use in each tree of the ORAM storage.

3. **Random Leaf Identifier Generation:**
   - The server generates random leaf identifiers \( \tilde{L}(1), \ldots, \tilde{L}(\log_r N) \) that will be assigned to items as they are reinserted at the root.

4. **Leaf Identifier Retrieval:**
   - The last tree in the ORAM storage has a constant number of nodes, each containing a constant number of items. The client and server store shares of the leaf identifiers for these items and execute a two-party protocol to determine the leaf value \( L(\log_r N) \). The client has no output.

5. **Recursive Tree Lookup:**
   - For each \( i \) such that \( \log_r N \geq i \geq 2 \):
     - The server retrieves the nodes on the path between the root and the leaf \( L(i) \) in the \( i \)-th tree.
     - The parties execute a secure two-party protocol to update the content of item \( v(i) \) with the new leaf identifier \( \tilde{L}(i-1) \) and tag it with its new leaf node assignment \( \tilde{L}(i) \).

6. **Final Level Lookup:**
   - For the first-level tree containing the actual database items, the server retrieves the nodes on the path between the root and the leaf \( L(1) \). The parties execute a secure two-party protocol to find item \( v = v(1)_C \oplus v(1)_S \). The outputs are secret shares of the data \( d = d_C \oplus d_S \) found at virtual address \( v \). The server tags \( v \) with \( \tilde{L}(1) \), and the parties perform another secure protocol to insert \( v \) at the first empty spot in the root node.

### Optimizations and Implementation Choices

#### Encryption and Decryption

- All data stored in the database at the server must be encrypted. In a naive application, decryption and re-encryption would be done entirely within a Yao circuit, which is computationally expensive.
- We use the encryption scheme \( \text{Enc}(m; r) = (F_K(r) \oplus m, r) \), where \( F \) is a pseudo-random function and \( K \) is a key stored by the client. The server sends \( r \) and a random \( r' \) for re-encryption, and the client computes \( F_K(r) \) and \( F_K(r') \) outside the secure computation. Only the boolean XOR operation is performed inside the garbled circuit, which is very efficient.

**Security Considerations:**
- Sending encryption randomness to the client could reveal information about the access pattern. During the eviction procedure, it is crucial that neither player learns which child received the evicted data. This is ensured by performing the operation inside a secure computation and assigning randomness to nodes rather than ciphertext content.

#### Choosing a Bucket Size

- At each node of the ORAM structure, the bucket size is chosen to balance security and efficiency. A precise bucket size of \( O(\log N) \) ensures negligible overflow probability while maintaining the security and efficiency of the scheme.