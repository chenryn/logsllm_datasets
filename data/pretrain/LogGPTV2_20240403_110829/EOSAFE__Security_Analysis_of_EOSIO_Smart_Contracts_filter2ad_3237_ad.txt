Control ﬂow related functions. These functions may alter
or terminate the control ﬂow of a smart contract according
to their return results. Therefore, we will fork two paths if
necessary. For example, two paths will be generated if the
predicate of the eosio_assert function is a symbolic value
rather than a speciﬁc boolean value.
Authority-related functions. As the authority system is
merely related to the detection of missing permission check
vulnerability, we only have to examine the existence of these
functions, e.g., require_auth, without concerning about the
speciﬁc permission. Hence, we just return a symbolic value
to balance the stack.
Table-related functions. There is a special data structure
in EOSIO that allows for persistent storage of data. Similar to
the concept of storage in Ethereum, this kind of data is saved
on the blockchain that is called table. Table can be regarded
as a database that supports CRUD operations (i.e., Create,
Retrieve, Update and Delete) by several platform-speciﬁc
instructions. For these functions, we only have to focus on the
side effects to the memory rather than the internal operations.
Speciﬁcally, we have implemented them with return values
used to update the memory, as follows:
A = db_get_i64(itr,data,length)
i64.store(base,A)
For functions (e.g., db_update_i64) that do not have any
return value but modify the contents of the table, we record
their function names and arguments in the constraints.
Note that the focus on the side effect of the library functions
is critical for both the symbolic execution engine and the
vulnerability scanners in terms of correctness. For instance,
a piece of data in the memory area, say D, which will be
used later as the branch condition, is overwritten as D(cid:48) by
invoking memcpy. If we do not consider the side effect, namely,
taking D as the branch condition directly instead of D(cid:48), it will
inevitably affect the accuracy of the further analysis.
5.3 Vulnerability Scanner
To detect multiple vulnerabilities, the Scanner is designed
as a generic framework to perform the detection. It mainly
consists of two steps, i.e., locating suspicious functions and
USENIX Association
30th USENIX Security Symposium    1279
Table 1: The formal deﬁnition of predicates Pt, Qt, and Rt. Speciﬁcally, each one of them is the conjunction of its corresponding
two sub-predicates: Interval Maximality (i.e., predIM), and Interval Correctness (i.e., predIC), e.g., Pt = PpredIM
∧ PpredIC
.
t
t
Interval Maximality*
∀i ∈ (U − [t.l,t.h)). ∀t(cid:48) ∈ I . i /∈ [t(cid:48).l,t(cid:48).h)∨ i /∈ [l(cid:48),h(cid:48))
∀i ∈ (U − [t.l,t.h)). ∀t(cid:48) ∈ I . i /∈ [t(cid:48).l,t(cid:48).h)∨ i ∈ [l(cid:48),h(cid:48))
∀i ∈ (U − [t.l,t.h)). ∃t(cid:48) ∈ I . i ∈ [t(cid:48).l,t(cid:48).h)∨ i /∈ [l(cid:48),h(cid:48))
Pt
Qt
Rt
* U refers to the whole legal address space.
Interval Correctness
∀i ∈ [t.l,t.h). (∃t(cid:48) ∈ I . i ∈ [t(cid:48).l,t(cid:48).h)∧ i ∈ [l(cid:48),h(cid:48)))∧t.D[i−t.l] = D(cid:48)[i− l(cid:48)]
∀i ∈ [t.l,t.h). ∃t(cid:48) ∈ I . i ∈ [t(cid:48).l,t(cid:48).h)∧ i /∈ [l(cid:48),h(cid:48))∧t.D[i−t.l] = t(cid:48).D[i−t(cid:48).l]
∀i ∈ [t.l,t.h). (∀t(cid:48) ∈ I . i /∈ [t(cid:48).l,t(cid:48).h)∧ i ∈ [l(cid:48),h(cid:48)))∧t.D[i−t.l] = D(cid:48)[i− l(cid:48)]
detecting vulnerabilities. Accordingly, our goal is to realize
detectors for the four vulnerabilities introduced in §3.
The general strategies proposed in §5.1.1 can alleviate the
path explosion problem to some extent, however, it is still not
enough to meet our needs. Fortunately, one key insight can
help further mitigate this issue, i.e., we only have to focus on
valuable functions that call imported functions with the ability
to invoke actions or change the on-chain state, e.g., send_-
inline (see §2.2), db_update_i64 and db_store_i64 (see
§5.2). These valuable functions are the key targets of our
detection. For example, attacking a smart contract that is vul-
nerable to the rollback vulnerability requires the capability to
invoke the transfer function. In total, there are 18 functions
that can lead to the modiﬁcation of permanent data [37], and
our investigation shows that send_inline, db_update_i64
and db_store_i64 are the most used ones.
As a result, the two steps of the detection framework can
be further transferred and simpliﬁed as a valuable-function-
centric process: 1) locating valuable functions; and 2) veri-
fying their reachability to launch attacks. Note that the sec-
ond step of the process is optional since the reachability can
always be guaranteed. Based on this framework, we will in-
troduce the details for the four detectors.
5.3.1 Notations
To better explain the logic of detecting vulnerabilities, we ﬁrst
deﬁne several symbols here:
• A, the set of names of all the valid accounts in EOSIO;
• B, the set of signatures of all the blockchain-state func-
tions as detailed in §5.2;
• F , the set of signatures of functions that are reachable
from the dispatcher;
• P , the set of signatures of functions (18 in total, see §5.3)
that can lead to the modiﬁcation of permanent data;
• S, the set of signatures of invoked imported functions
during symbolic execution.
Moreover, as introduced in §5.1, we mainly focus on the
constraints and invoked imported functions, which are both
recorded in the path tree. Speciﬁcally, when the Engine sym-
bolically executes the i-th feasible path of function func, we
need to verify the existence of certain constraints and invoked
imported functions. To this end, we deﬁne the following three
predicates:
• Eeqi
func(a,b), which indicates the existence of the con-
straint a = b;
func(a,b), which indicates the existence of the con-
func(sigtarget ), which indicates there exists a sig-
6 that string matches the sigtarget, i.e.,
• Eneqi
straint a (cid:54)= b;
• Emi
nature in S i
∃s ∈ S i
func
func.s ∼ sigtarget
For example, if predicate:
7.
Eeqi
apply(action, “transfer”)
is true, it means that there exists a path constraint of the form
action = “transfer” on the i-th path of the apply function,
so given that this path is feasible, this means that there is a
potential path of apply leading to the transfer function. In
addition, if predicate:
Emi
apply(“send_inline(*)”)
holds, it indicates that there exists an invocation of the send_-
inline function with arbitrary arguments along the previous
path.
5.3.2 Fake EOS detection
As discussed in §3.1 and depicted in Figure 2, the fake EOS
vulnerability can only be triggered by invoking the transfer
function. Moreover, the transfer function must be reachable
from the dispatcher by attackers, which means there does not
exist proper veriﬁcation of code in the dispatcher. Accord-
ingly, the detector traverses all the feasible paths generated
by symbolically executing apply to examine:
Eeqi
apply(action, “transfer”)∧
apply(code,a)
∀a ∈ (A −{sel f}).¬Eeqi
Speciﬁcally, it restricts that only the paths associated with
the transfer function can be analyzed. To accelerate the
analysis, the Engine will terminate irrelevant paths (if the
destination is not transfer) in advance to avoid further exe-
cution. Then, the detector will examine the value in code, as
discussed in §3.1. Thus, the satisfaction of any of the condi-
tions associated with code implies the existence of improper
veriﬁcation. In summary, a smart contract that meets the above
conditions is considered to be vulnerable.
5.3.3 Fake receipt detection
The root cause of this vulnerability comes from inadequate
veriﬁcation inside the transfer function. Therefore, it is un-
necessary to perform symbolic execution from the dispatcher
ically executing the i-th path of function func.
func indicates the set of signatures of functions recorded when symbol-
6S i
7∼ represents string matching that allows wildcard character ∗.
1280    30th USENIX Security Symposium
USENIX Association
to the transfer function. Instead, it only needs to symboli-
cally execute the transfer if we can identify it directly.
To this end, we adopt a heuristic-based method to acceler-
ate the process. Speciﬁcally, the detector ﬁrst identiﬁes the
apply function, then enumerates all the relevant basic blocks
to verify their jump targets whose indices may point to the
suspicious transfer functions. After locating the suspicious
transfer functions, the detector will ﬁlter out valuable ones
according to their corresponding call graphs.
Note that for a given candidate, there exists at most one
transfer function (like Figure 2), which implies that the
transfer function is either one of the suspicious functions,
or inlined in the apply function. For either of the above cases,
we would symbolically execute the function that is suspected
of being the transfer function (indicated by sus). Formally,
the detection logic will be:
Eeqi
sus(to,sel f )∧∃p ∈ P .Emi
sus(p)∧
sus(“eosio_assert()”)
Eneq j
sus(to,sel f )∧ Em j
Speciﬁcally, we would examine if there exists two paths
(i and j) that forked from a point in which it veriﬁes the
value of to. For the path i that veriﬁes the equality of to and
self, we would further examine if it calls functions that can
change blockchain state. For the other path j, which identiﬁes
the inequality between to and self, it will call eosio_assert
to terminate the current path immediately. We should pay
attention that the above logic means that there does exist
a protection against fake receipt vulnerability. Therefore, if
no any two paths satisfy above conditions, then we consider
the EOSIO smart contract is vulnerable to the fake receipt
vulnerability.
We further apply early termination to accelerate the process.
For the valuable transfer function, the protection should be
veriﬁed before updating changes for related on-chain states.
Thus, it is reasonable to terminate the current path to inves-
tigate the collected constraints when encountering functions
like send_inline. If there are two paths meeting the pro-
tection criteria, the smart contract is immune from the fake
receipt vulnerability according to our heuristic strategy and
the analysis will be terminated.
5.3.4 Rollback detection
As shown in Figure 2, the reveal function8 often generates
random numbers to determine the jackpot winner, and invokes
the transfer function in eosio.token by an inlined action,
i.e., send_inline, to return the prize.
In some circumstances, however, the computational burden
has to be considered when handling the reveal function, as
the call depth of the send_inline function is too deep for
the Engine to reach, which may lead to call depth overﬂow
(similar to the fake receipt detection in §5.3.3).
8Note that “reveal” here is just used to represent the processing logic, and
the actual names may be varied in different smart contracts.
Fortunately, as it is not necessary to consider the reacha-
bility of the send_inline function in a path for any target
gambling DApp (see §3.3), we are able to apply two strate-
gies to accelerate the process to locate the reveal function.
Speciﬁcally, the ﬁrst strategy is to traverse feasible paths on
demand. Instead of enumerating all paths, we only examine
paths that can be used to resolve the data/variable dependency
of the target send_inline function. The second strategy re-
duces the size of the path set being examined by the Engine
after extracting valuable functions, namely, removing redun-
dant paths whose basic blocks are thoroughly the subset of
other paths. Consequently, we can achieve the smallest path
set to cover as many basic blocks as possible.
Finally, the detection logic is associated with two properties.
Firstly, our investigation suggests that the reveal function
will generate random numbers with the rem instruction (see
§3.3) along the path inside the constructed path set. Secondly,
if the operands of the modulo calculation are (partially) gen-
erated by blockchain-state functions (see §5.2), the smart
contract will be affected by the rollback vulnerability. In sum-
mary, the detection logic must satisfy:
Emi
reveal(“rem(op_1, *)”)∧∃b ∈ B. op_1 ∼ b
According to our investigation, here op2 is always a con-
stant or a variable that has nothing to do with the blockchain
state. If the above conditions are met, the smart contract will
be labeled vulnerable to rollback vulnerability. Note that we
will remove all the rem instructions generated by EOSIO
ofﬁcial libraries, e.g., eoslib, to reduce the false positives.
5.3.5 Missing permission check detection
As discussed in §3.4, we focus on the functions that are valu-
able and lacking authority validation before the sensitive op-
erations. Again, such functions should be reachable through
the apply function. After ﬁltering all the valuable functions
by call graph, we would symbolically execute apply to ﬁlter
out all the reachable ones from the dispatcher:
Eeqi
apply(code,sel f )∧∃ f ∈ F .Eeqi
apply(action, f )
Then, we would symbolically execute func to obtain its
path tree with the corresponding constraints. To be speciﬁc,
for any feasible path j of func, if it invokes sensitive functions,
e.g., db_update_i64, without checking the permission of
caller by require_auth, i.e.,:
Em j
¬Em j
func(“db_update_i64(*)”) ∧
func(“require_auth(*)”)
Implementation and Experimental Setup
we regard the smart contract as vulnerable to the missing
permission check vulnerability.
6
Implementation We take advantage of Octopus [36] to con-
struct the CFG of Wasm bytecode, and use the Z3 Theorem
Prover (version 4.8.6) as our constraint solver to prune infeasi-
ble paths. All the other major components, including Engine,
USENIX Association
30th USENIX Security Symposium    1281
Emulator and Scanner are all designed and implemented by
ourselves. The implementation is based in Python, which
includes over 5.5k lines of code.
Experimental Setup Our experiment is performed on a
server running Debian with four Intel(R) Xeon(R) E5-2620 v4
@ 2.10GHz and 64G RAM. As mentioned in §5.1.1, the En-
gine has provided two conﬁguration options (i.e., call depth,
and timeout) to partially address the path explosion issue.
During our experiments, we empirically set the call depth as 2
layers, as we ﬁnd it is enough to identify most vulnerabilities.
As to the exploration time, we empirically set the upper bound
as 5 minutes, due to the following two main reasons. First,
within 5 minutes, all the smart contracts in our benchmark
can be fully analyzed and detected with promising results
(see §7.1). Second, as we seek to apply EOSAFE to all the
EOSIO smart contracts, we have to make a trade-off between
accuracy and scalability. Therefore, the exploration time for
each contract is set at a maximum of 5 minutes. Note that all
these settings could be easily conﬁgured and customized in
our tool, to fulﬁll the different requirements.
To compared with the C language based solution discussed
in §4, we also setup the KLEE environment to perform the
evaluation. Speciﬁcally, for wasm2c, we adopted the latest