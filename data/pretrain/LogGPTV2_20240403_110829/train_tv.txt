actions returned by seccomp filters in the audit log.
the kernel makes the decision to log an action based on
the action type,  whether or not the action is present in the
.i actions_logged
file, and whether kernel auditing is enabled
(e.g., via the kernel boot option
.ir audit=1 ).
.\" or auditing could be enabled via the netlink api (audit_set)
the rules are as follows:
.ip * 3
if the action is
.br seccomp_ret_allow ,
the action is not logged.
.ip *
otherwise, if the action is either
.br seccomp_ret_kill_process
or
.br seccomp_ret_kill_thread ,
and that action appears in the
.ir actions_logged
file, the action is logged.
.ip *
otherwise, if the filter has requested logging (the
.br seccomp_filter_flag_log
flag)
and the action appears in the
.ir actions_logged
file, the action is logged.
.ip *
otherwise, if kernel auditing is enabled and the process is being audited
.rb ( autrace (8)),
the action is logged.
.ip *
otherwise, the action is not logged.
.sh return value
on success,
.br seccomp ()
returns 0.
on error, if
.br seccomp_filter_flag_tsync
was used,
the return value is the id of the thread
that caused the synchronization failure.
(this id is a kernel thread id of the type returned by
.br clone (2)
and
.br gettid (2).)
on other errors, \-1 is returned, and
.ir errno
is set to indicate the error.
.sh errors
.br seccomp ()
can fail for the following reasons:
.tp
.br eacces
the caller did not have the
.br cap_sys_admin
capability in its user namespace, or had not set
.ir no_new_privs
before using
.br seccomp_set_mode_filter .
.tp
.br ebusy
while installing a new filter, the
.br seccomp_filter_flag_new_listener
flag was specified,
but a previous filter had already been installed with that flag.
.tp
.br efault
.ir args
was not a valid address.
.tp
.br einval
.ir operation
is unknown or is not supported by this kernel version or configuration.
.tp
.b einval
the specified
.ir flags
are invalid for the given
.ir operation .
.tp
.br einval
.i operation
included
.br bpf_abs ,
but the specified offset was not aligned to a 32-bit boundary or exceeded
.ir "sizeof(struct\ seccomp_data)" .
.tp
.br einval
.\" see kernel/seccomp.c::seccomp_may_assign_mode() in 3.18 sources
a secure computing mode has already been set, and
.i operation
differs from the existing setting.
.tp
.br einval
.i operation
specified
.br seccomp_set_mode_filter ,
but the filter program pointed to by
.i args
was not valid or the length of the filter program was zero or exceeded
.b bpf_maxinsns
(4096) instructions.
.tp
.br enomem
out of memory.
.tp
.br enomem
.\" enomem in kernel/seccomp.c::seccomp_attach_filter() in 3.18 sources
the total length of all filter programs attached
to the calling thread would exceed
.b max_insns_per_path
(32768) instructions.
note that for the purposes of calculating this limit,
each already existing filter program incurs an
overhead penalty of 4 instructions.
.tp
.br eopnotsupp
.i operation
specified
.br seccomp_get_action_avail ,
but the kernel does not support the filter return action specified by
.ir args .
.tp
.br esrch
another thread caused a failure during thread sync, but its id could not
be determined.
.sh versions
the
.br seccomp ()
system call first appeared in linux 3.17.
.\" fixme . add glibc version
.sh conforming to
the
.br seccomp ()
system call is a nonstandard linux extension.
.sh notes
rather than hand-coding seccomp filters as shown in the example below,
you may prefer to employ the
.i libseccomp
library, which provides a front-end for generating seccomp filters.
.pp
the
.ir seccomp
field of the
.ir /proc/[pid]/status
file provides a method of viewing the seccomp mode of a process; see
.br proc (5).
.pp
.br seccomp ()
provides a superset of the functionality provided by the
.br prctl (2)
.br pr_set_seccomp
operation (which does not support
.ir flags ).
.pp
since linux 4.4, the
.br ptrace (2)
.b ptrace_seccomp_get_filter
operation can be used to dump a process's seccomp filters.
.\"
.ss architecture support for seccomp bpf
architecture support for seccomp bpf filtering
.\" check by grepping for have_arch_seccomp_filter in kconfig files in
.\" kernel source. last checked in linux 4.16-rc source.
is available on the following architectures:
.ip * 3
x86-64, i386, x32 (since linux 3.5)
.pd 0
.ip *
arm (since linux 3.8)
.ip *
s390 (since linux 3.8)
.ip *
mips (since linux 3.16)
.ip *
arm-64 (since linux 3.19)
.ip *
powerpc (since linux 4.3)
.ip *
tile (since linux 4.3)
.ip *
pa-risc (since linux 4.6)
.\" user mode linux since linux 4.6
.pd
.\"
.ss caveats
there are various subtleties to consider when applying seccomp filters
to a program, including the following:
.ip * 3
some traditional system calls have user-space implementations in the
.br vdso (7)
on many architectures.
notable examples include
.br clock_gettime (2),
.br gettimeofday (2),
and
.br time (2).
on such architectures,
seccomp filtering for these system calls will have no effect.
(however, there are cases where the
.br vdso (7)
implementations may fall back to invoking the true system call,
in which case seccomp filters would see the system call.)
.ip *
seccomp filtering is based on system call numbers.
however, applications typically do not directly invoke system calls,
but instead call wrapper functions in the c library which
in turn invoke the system calls.
consequently, one must be aware of the following:
.rs
.ip \(bu 3
the glibc wrappers for some traditional system calls may actually
employ system calls with different names in the kernel.
for example, the
.br exit (2)
wrapper function actually employs the
.br exit_group (2)
system call, and the
.br fork (2)
wrapper function actually calls
.br clone (2).
.ip \(bu
the behavior of wrapper functions may vary across architectures,
according to the range of system calls provided on those architectures.
in other words, the same wrapper function may invoke
different system calls on different architectures.
.ip \(bu
finally, the behavior of wrapper functions can change across glibc versions.
for example, in older versions, the glibc wrapper function for
.br open (2)
invoked the system call of the same name,
but starting in glibc 2.26, the implementation switched to calling
.br openat (2)
on all architectures.
.re
.pp
the consequence of the above points is that it may be necessary
to filter for a system call other than might be expected.
various manual pages in section 2 provide helpful details
about the differences between wrapper functions and
the underlying system calls in subsections entitled
.ir "c library/kernel differences" .
.pp
furthermore, note that the application of seccomp filters
even risks causing bugs in an application,
when the filters cause unexpected failures for legitimate operations
that the application might need to perform.
such bugs may not easily be discovered when testing the seccomp
filters if the bugs occur in rarely used application code paths.
.\"
.ss seccomp-specific bpf details
note the following bpf details specific to seccomp filters:
.ip * 3
the
.b bpf_h
and
.b bpf_b
size modifiers are not supported: all operations must load and store
(4-byte) words
.rb ( bpf_w ).
.ip *
to access the contents of the
.i seccomp_data
buffer, use the
.b bpf_abs
addressing mode modifier.
.ip *
the
.b bpf_len
addressing mode modifier yields an immediate mode operand
whose value is the size of the
.ir seccomp_data
buffer.
.sh examples
the program below accepts four or more arguments.
the first three arguments are a system call number,
a numeric architecture identifier, and an error number.
the program uses these values to construct a bpf filter
that is used at run time to perform the following checks:
.ip [1] 4
if the program is not running on the specified architecture,
the bpf filter causes system calls to fail with the error
.br enosys .
.ip [2]
if the program attempts to execute the system call with the specified number,
the bpf filter causes the system call to fail, with
.i errno
being set to the specified error number.
.pp
the remaining command-line arguments specify
the pathname and additional arguments of a program
that the example program should attempt to execute using
.br execv (3)
(a library function that employs the
.br execve (2)
system call).
some example runs of the program are shown below.
.pp
first, we display the architecture that we are running on (x86-64)
and then construct a shell function that looks up system call
numbers on this architecture:
.pp
.in +4n
.ex
$ \fbuname \-m\fp
x86_64
$ \fbsyscall_nr() {
    cat /usr/src/linux/arch/x86/syscalls/syscall_64.tbl | \e
    awk \(aq$2 != "x32" && $3 == "\(aq$1\(aq" { print $1 }\(aq
}\fp
.ee
.in
.pp
when the bpf filter rejects a system call (case [2] above),
it causes the system call to fail with the error number
specified on the command line.
in the experiments shown here, we'll use error number 99:
.pp
.in +4n
.ex
$ \fberrno 99\fp
eaddrnotavail 99 cannot assign requested address
.ee
.in
.pp
in the following example, we attempt to run the command
.br whoami (1),
but the bpf filter rejects the
.br execve (2)
system call, so that the command is not even executed:
.pp
.in +4n
.ex
$ \fbsyscall_nr execve\fp
59
$ \fb./a.out\fp
usage: ./a.out     []
hint for : audit_arch_i386: 0x40000003
                 audit_arch_x86_64: 0xc000003e
$ \fb./a.out 59 0xc000003e 99 /bin/whoami\fp
execv: cannot assign requested address
.ee
.in
.pp
in the next example, the bpf filter rejects the
.br write (2)
system call, so that, although it is successfully started, the
.br whoami (1)
command is not able to write output:
.pp
.in +4n
.ex
$ \fbsyscall_nr write\fp
1
$ \fb./a.out 1 0xc000003e 99 /bin/whoami\fp
.ee
.in
.pp
in the final example,
the bpf filter rejects a system call that is not used by the
.br whoami (1)
command, so it is able to successfully execute and produce output:
.pp
.in +4n
.ex
$ \fbsyscall_nr preadv\fp
295
$ \fb./a.out 295 0xc000003e 99 /bin/whoami\fp
cecilia
.ee
.in
.ss program source
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define x32_syscall_bit 0x40000000
#define array_size(arr) (sizeof(arr) / sizeof((arr)[0]))
static int
install_filter(int syscall_nr, int t_arch, int f_errno)
{
    unsigned int upper_nr_limit = 0xffffffff;
    /* assume that audit_arch_x86_64 means the normal x86\-64 abi
       (in the x32 abi, all system calls have bit 30 set in the
       \(aqnr\(aq field, meaning the numbers are >= x32_syscall_bit). */
    if (t_arch == audit_arch_x86_64)
        upper_nr_limit = x32_syscall_bit \- 1;
    struct sock_filter filter[] = {
        /* [0] load architecture from \(aqseccomp_data\(aq buffer into
               accumulator. */
        bpf_stmt(bpf_ld | bpf_w | bpf_abs,
                 (offsetof(struct seccomp_data, arch))),
        /* [1] jump forward 5 instructions if architecture does not
               match \(aqt_arch\(aq. */
        bpf_jump(bpf_jmp | bpf_jeq | bpf_k, t_arch, 0, 5),
        /* [2] load system call number from \(aqseccomp_data\(aq buffer into
               accumulator. */
        bpf_stmt(bpf_ld | bpf_w | bpf_abs,
                 (offsetof(struct seccomp_data, nr))),
        /* [3] check abi \- only needed for x86\-64 in deny\-list use
               cases.  use bpf_jgt instead of checking against the bit
               mask to avoid having to reload the syscall number. */
        bpf_jump(bpf_jmp | bpf_jgt | bpf_k, upper_nr_limit, 3, 0),
        /* [4] jump forward 1 instruction if system call number
               does not match \(aqsyscall_nr\(aq. */
        bpf_jump(bpf_jmp | bpf_jeq | bpf_k, syscall_nr, 0, 1),
        /* [5] matching architecture and system call: don\(aqt execute
           the system call, and return \(aqf_errno\(aq in \(aqerrno\(aq. */
        bpf_stmt(bpf_ret | bpf_k,
                 seccomp_ret_errno | (f_errno & seccomp_ret_data)),
        /* [6] destination of system call number mismatch: allow other
               system calls. */
        bpf_stmt(bpf_ret | bpf_k, seccomp_ret_allow),
        /* [7] destination of architecture mismatch: kill process. */
        bpf_stmt(bpf_ret | bpf_k, seccomp_ret_kill_process),
    };
    struct sock_fprog prog = {
        .len = array_size(filter),
        .filter = filter,
    };
    if (seccomp(seccomp_set_mode_filter, 0, &prog)) {
        perror("seccomp");
        return 1;
    }
    return 0;
}
int
main(int argc, char *argv[])
{
    if (argc     []\en"
                "hint for : audit_arch_i386: 0x%x\en"
                "                 audit_arch_x86_64: 0x%x\en"
                "\en", argv[0], audit_arch_i386, audit_arch_x86_64);
        exit(exit_failure);
    }
    if (prctl(pr_set_no_new_privs, 1, 0, 0, 0)) {
        perror("prctl");
        exit(exit_failure);
    }
    if (install_filter(strtol(argv[1], null, 0),
                       strtol(argv[2], null, 0),
                       strtol(argv[3], null, 0)))
        exit(exit_failure);
    execv(argv[4], &argv[4]);
    perror("execv");
    exit(exit_failure);
}
.ee
.sh see also
.br bpfc (1),
.br strace (1),
.br bpf (2),
.br prctl (2),
.br ptrace (2),
.br seccomp_unotify (2),
.br sigaction (2),
.br proc (5),
.br signal (7),
.br socket (7)
.pp
various pages from the
.i libseccomp
library, including:
.br scmp_sys_resolver (1),
.br seccomp_export_bpf (3),
.br seccomp_init (3),
.br seccomp_load (3),
and
.br seccomp_rule_add (3).
.pp
the kernel source files
.ir documentation/networking/filter.txt
and
.ir documentation/userspace\-api/seccomp_filter.rst
.\" commit c061f33f35be0ccc80f4b8e0aea5dfd2ed7e01a3
(or
.ir documentation/prctl/seccomp_filter.txt
before linux 4.13).
.pp
mccanne, s.\& and jacobson, v.\& (1992)
.ir "the bsd packet filter: a new architecture for user-level packet capture" ,
proceedings of the usenix winter 1993 conference
.ur http://www.tcpdump.org/papers/bpf\-usenix93.pdf
.ue
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/tailq.3
.so man7/iso_8859-2.7
.\" written by mike frysinger 
.\"
.\" %%%license_start(public_domain)
.\" this page is in the public domain.
.\" %%%license_end
.\"
.\" useful background:
.\"   http://articles.manugarg.com/systemcallinlinux2_6.html
.\"   https://lwn.net/articles/446528/
.\"   http://www.linuxjournal.com/content/creating-vdso-colonels-other-chicken
.\"   http://www.trilithium.com/johan/2005/08/linux-gate/
.\"
.th vdso 7 2021-08-27 "linux" "linux programmer's manual"
.sh name
vdso \- overview of the virtual elf dynamic shared object
.sh synopsis
.nf
.b #include 
.pp
.b void *vdso = (uintptr_t) getauxval(at_sysinfo_ehdr);
.fi
.sh description
the "vdso" (virtual dynamic shared object) is a small shared library that
the kernel automatically maps into the
address space of all user-space applications.
applications usually do not need to concern themselves with these details
as the vdso is most commonly called by the c library.
this way you can code in the normal way using standard functions
and the c library will take care