Works with a basic example:
    await Deno.serve({ port: 8000 }, () => new Response());
It occurs when making a `POST` request when behind a `next-http-proxy-
middleware` as follows:
    import type { NextApiRequest, NextApiResponse } from "next";
    import httpProxyMiddleware from "next-http-proxy-middleware";
    const { API_URL } = process.env;
    const handler = (req: NextApiRequest, res: NextApiResponse) =>
      httpProxyMiddleware(req, res, {
        target: API_URL,
        pathRewrite: [{ patternStr: "^/api/", replaceStr: "/" }],
      });
    export default handler;
    export const config = {
      api: { externalResolver: true },
    };
This is enough to reproduce the crash:
    curl -X POST http://localhost:3000/api/v1/abc
Here is the backtrace:
    ===========================================================
    Deno has panicked. This is a bug in Deno. Please report this
    at https://github.com/denoland/deno/issues/new.
    If you can reliably reproduce this panic, include the
    reproduction steps and re-run with the RUST_BACKTRACE=1 env
    var set and include the backtrace in your report.
    Platform: macos aarch64
    Version: 1.25.0
    Args: ["deno", "run", "-A", "--unstable", "test.ts"]
    thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', ext/flash/lib.rs:846:41
    stack backtrace:
       0: _rust_begin_unwind
       1: core::panicking::panic_fmt
       2: core::panicking::panic
       3:  as core::future::future::Future>::poll
       4:  R as v8::support::CFnFrom>::mapping::c_fn
    note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.