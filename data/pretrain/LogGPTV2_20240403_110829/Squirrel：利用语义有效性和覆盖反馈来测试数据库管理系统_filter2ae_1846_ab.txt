### 优化后的文本

#### 1. 数据剥离与骨架变异
我们从每个中间表示（IR）中提取具体数据（如表名），以便专注于查询骨架的变异。基于IR的突变方法能有效保持语法正确性。一些生成工具通过抽象语法树（AST）生成SQL查询，但严格的类型约束和复杂操作使得直接修改AST与修改SQL查询同样具有挑战性。

**提高语义正确性：**
确保生成的SQL查询在语义上正确是NP-hard问题。因此，我们将尝试实际可行的方法来尽可能提高语义正确性。现有的一些基于生成的工具定义了一组查询模板，每个模板代表一个完整的查询，并包含操作数之间的特定静态约束。然而，由于人力有限，这些框架难以保证其SQL模板的全面表达能力。为解决这一问题，我们采用了动态查询实例化技术。

给定一个语法正确的SQL查询骨架（即没有具体操作数的查询），我们的方法首先根据预定义的基本规则构建数据依赖图。例如，`SELECT` 的操作数可以是 `FROM` 子句中使用的表的列名。然后，我们使用关系满足算法填充具体操作数以完成骨架。通过这种方式，我们可以生成足够多的语义正确查询用于测试数据库管理系统（DBMS）。

#### 2. Squirrel 概览
Squirrel 是一个旨在查找使 DBMS 崩溃的查询的测试框架。其工作流程如下：
- 首先，将查询从 SQL 转换为 IR；
- 然后，对 IR 进行变异以生成新的查询骨架；
- 接着，用具体的操作数填充新骨架；
- 最后，运行新查询并检测错误。

Squirrel 从空数据库开始，需要查询来创建内容。它通过四个关键组件实现目标：转换器、变异器、实例化器和 SQL Fuzzer。
1. **选择查询**：从包含初始查询和保存的有趣查询的队列中选择一个查询。
2. **转换**：转换器将选定的查询 `I` 转换为 IR 向量 `V`，同时剥离具体值以形成查询框架。
3. **变异**：变异器通过插入、删除和替换生成新的 IR 向量 `V'`，确保其语法正确。
4. **实例化**：实例化器分析 `V'` 的数据依赖关系，建立数据依赖图，并选择满足数据依赖性的具体值填充 `V'`。这提高了 `V'` 在语义上的正确性。
5. **执行与检测**：将 `V'` 转换回 SQL 查询 `Q'` 并在 DBMS 中执行。如果执行崩溃，则记录触发错误的输入；否则，如果 `Q'` 触发了新的执行路径，则将其保存到队列中以进一步变异。

#### 3. 中间表示设计
我们设计了一种 SQL 的中间表示（IR），支持语法正确的查询变异。我们将每个查询从 SQL 转换为 IR，对其进行变异，再将新的 IR 转换回 SQL 查询执行。IR 设计的目标包括：
- **表达性**：能够表示任何 SQL 语句；
- **一般性**：IR 格式和操作统一；
- **简单性**：IR 和 SQL 之间的转换高效。

IR 采用静态单一分配（SSA）形式，每个查询或测试用例包含一个或多个 IR 语句。每个语句都是一个赋值，左侧为目标变量，右侧为文字或带操作数的运算符。IR 包含以下字段：
- `ir_type`：IR 语句的类型，基于 AST 中的相应节点。
- `operator`：由 SQL 关键字和数学运算符组成，指示 IR 执行的操作。
- `left_operand, right_operand`：IR 运算符的操作数。
- `data_value`：IR 携带的具体数据。
- `data_type`：数据类型。

我们在附录 A 中提供了 IR 语法的正式定义，并在图 3 和图 4 中展示了示例。

#### 4. 保留语法的变异
我们将 SQL 查询中的令牌分为两组：结构令牌和数据令牌。结构令牌（如 SQL 关键字和数学运算符）定义要执行的操作，而数据令牌指定操作的目标。观察发现，更改结构令牌比更改数据令牌对 DBMS 执行的影响更大。因此，我们主要对结构进行变异，并在第 6 部分讨论数据修改。

##### 4.1 数据结构分离
我们遍历 IR，根据预定义值替换每个数据。具体来说，将语义数据替换为字符串“x”，常数更改为 1 或 1.0，所有字符串更新为“a”。这样处理后，查询的结构更加清晰。我们使用称为 IR 库的字典存储各种 IR，字典的键是 IR 类型，值是 IR 列表。每当我们需要某种类型的 IR 时，随机从列表中选择一个元素。

##### 4.2 基于类型的变异
我们定义了一组基于类型的变异，更新 IR 或其左右操作数。变异集中在操作数上，因为其他成员不易更改。具体而言，对于 IR 程序中的每个 IR `_v_`，我们以一定概率执行以下操作：
- **插入**：在适当位置添加 IR。
- **替换**：更改 IR 或其操作数。
- **删除**：将 IR 替换为空 IR。

通过这种方式，我们能够保持语法正确性的同时进行有效的查询变异。