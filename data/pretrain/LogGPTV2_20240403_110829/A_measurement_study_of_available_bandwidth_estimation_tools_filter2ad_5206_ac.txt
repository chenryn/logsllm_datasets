80
60
40
20
0
0
Pathload high
Pathload low
MRTG
5
10
15
20
time (hours)
(a)Pathload
5
10
15
time (hours)
(b)IGI
5
10
15
time (hours)
(c)Spruce
IGI
MRTG
20
spruce
MRTG
20
Figure 4: MRTG available bandwidth estimate vs.
Pathload, IGI, and Spruce. Data is for the 100 Mb/s
path connecting UC Berkeley to MIT LCS.
erly to injected cross traﬃc and overestimated available band-
width on some paths. In contrast, Spruce tracked the avail-
able bandwidth reasonably well in all cases. This behavior
was repeatedly observed in the MRTG tests.
Figure 3(a) shows that Pathload’s upper and lower bounds
on the available bandwidth are both too high. Indeed, some-
times the lower bound is 20 Mb/s higher than the actual
available bandwidth as measured by MRTG. Despite its
overestimation of the available bandwidth, Pathload reacts
properly to the cross traﬃc injected in the interval [5, 12].
To ensure that these inaccurate bounds on available band-
width were not caused by a bug in the new Pathload release
(version 1.1.0), we ran the same experiment with the older
version of Pathload which was used in [11], but the behavior
persisted. A close examination of the logs show that, on the
shorter path, Pathload repeatedly overestimates the turning
point at which the probe train/stream starts showing an in-
creasing delay trend, indicating that the probe rate has ex-
ceeded the available bandwidth. A preliminary investigation
shows that the default values for the Pathload parameters
SP CT and SP DT are too high for this path. This reason could
be why our results are diﬀerent from those reported in the
Pathload paper [12]. In Figure 4(a) we observed the oppo-
site error, with Pathload detecting a turning point below the
true available bandwidth.
Figure 3(b) shows that IGI successfully estimates the avail-
able bandwidth when the link utilization is low. However,
IGI reacts little to the cross traﬃc injected during the in-
terval [5, 12]. In Figure 4(b), IGI consistently overestimates
available bandwidth. We hypothesize that IGI performs poor-
ly when utilization is high, which is consistent with the data
reported in Figure 12 of the IGI paper [9]. To some extent,
this inaccuracy can be explained based on the IGI algorithm.
IGI starts with an initial phase to determine the turning
point at which ∆in = ∆out. Unfortunately, when the uti-
lization is high, this turning point becomes unpronounced,
immersed in measurement noise [18].
Finally, Figures 3(c) and 4(c) show that Spruce closely
tracks the average available bandwidth and correctly re-
sponds to the injected cross traﬃc. We believe that Spruce’s
good performance is due to its simplicity and the lack of tun-
able parameters. Neither of these two paths contain distinct
tight and narrow links, nor does either consist of multiple
bottlenecks of equal capacity. We expect that Spruce would
not perform as well under such conditions.
The explanations of the observed behavior of Pathload
and IGI are preliminary. More experiments are needed to
better understand the behavior of these tools.
F
D
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
-2
-1
0
Relative Error
1
Pathload
IGI
spruce
2
Figure 5: Cumulative distribution of relative error
measured by Pathload, IGI, and Spruce across all
tested paths in the RON and PlanetLab testbeds.
ject a stream of cross traﬃc whose rate is Γ = 0.5 × M1,
and run the tool again. The induced cross traﬃc is gener-
ated as described in §4.1. Assuming the traﬃc of other users
does not change much between the two phases, the correct
change in the available bandwidth is Γ, which is what we ex-
pect the tool to estimate in the second phase. Admittedly,
the test relies on the assumption that apart from our gener-
ated cross traﬃc, the network conditions do not change be-
tween the two phases. We believe this limitation is intrinsic
to any evaluation technique that does not have direct access
to the routers. To mitigate the impact of changing network
conditions on our results, we conduct the two phases very
close to each other (both ﬁnish within a minute). Further,
we repeat the same experiment multiple times over the same
path, check for consistency, and ignore outliers.
Each single experiment consists of 3 D-tests over the same
path, one with Pathload, second with IGI, and third with
Spruce. The tests run one after the other and complete
within 2 to 3 minutes.
To measure accuracy we use the relative error deﬁned as:
Γ − (M1 − M2)
Γ
Relative Error =
,
(3)
where Γ is the induced change in cross traﬃc, and M1 and
M2 are the available bandwidth measured by the same tool
in the ﬁrst and second phases of the same D-test.
5. RELATIVE ACCURACY
5.2 D-Test Results
We evaluate Pathload, IGI, and Spruce over a variety
of Internet paths using PlanetLab nodes [2] and the RON
testbed [4]. We explore over 400 diﬀerent paths with a vari-
ety of capacity, hop count, latency, load, and link technology.
In the absence of MRTG data, there is no way to discover
the true available bandwidth along a path during the exper-
iment. To overcome this limitation, we use a diﬀerential test
(D-test) that measures changes in the available bandwidth
rather than absolute values.
5.1 Methodology: The D-Test
The D-test has two phases. First, we run the tool and read
its estimate of the available bandwidth, M1. Second, we in-
Figure 5 shows the cumulative distribution function (CDF)
of the relative error of Pathload, IGI, and Spruce. The Path-
load available bandwidth estimate is computed as the aver-
age of the high and low estimates (i.e., Rmax+Rmin
).
2
Ideally, the CDF should be a step function at “0”, which
means that all experiments resulted in zero errors. In prac-
tice, all three tools show some errors and their CDFs are
far from ideal. A negative relative error means that the tool
has underestimated the available bandwidth whereas a posi-
tive relative error means that the tool has overestimated the
available bandwidth. The region between “-1” and “1” refers
to experiments in which the tool has correctly detected a de-
crease in available bandwidth between phase 1 and phase 2
of the D-test, but has potentially underestimated or overes-
timated the change in ABW.
The results in Figure 5 agree with the results of the MRTG
test illustrated in Figures 3 and 4. First, the Spruce CDF has
a closer shape to a step at “0” than the CDFs of the other
tools, indicating that Spruce is more accurate than IGI and
Pathload. In particular, almost 70% of Spruce’s measure-
ments have a relative error smaller than 30% (the region in
which −0.3 < relative error < 0.3). Second, Pathload is less
accurate when compared to Spruce because its CDF is fur-
ther away from a step function at “0”. In comparison with
IGI, Pathload is more responsive because its CDF ramps up
at lower relative error rates. Third, the IGI CDF is almost
a step function at “1”, which means that IGI reacted very
little to charges in the available bandwidth between phase
1 and phase 2 of the D-test. This behavior agrees with the
results of the MRTG test which show that IGI is insensitive
to induced cross traﬃc.
Many of the paths in this study have multiple narrow links
with equal capacity. Although Spruce is based on the PGM
approach which assumes a single bottleneck, it does perform
reasonably well in this environment.
Finally, we have computed the average per-measurement
probe traﬃc generated by the various tools. We found that
Pathload generates between 2.5 and 10 MB of probe traﬃc
per measurement. In contrast, the average per-measurement
probe traﬃc generated by IGI is 130 KB and that generated
by Spruce is 300 KB.
6.
IMPLEMENTATION ISSUES
All of the studied tools (i.e., IGI, Pathload, and Spruce)
require careful scheduling of probe traﬃc. More precisely,
the input gap between a pair of probes must be accurate and,
sometimes, as small as a few hundred microseconds. Because
processes cannot sleep for intervals shorter than one kernel
tick (10ms or 1ms are common values), each tool uses a delay
loop that holds the processor until either preempted or done
sending a train of packets. Because this delay loop eﬀectively
blocks all other programs from sending traﬃc for the dura-
tion of an entire train, the tools cannot properly measure
cross traﬃc sent from the machine on which it runs. Low
bandwidth paths (T1, DSL) are an exception to this rule
since the input gap, in this case, is large enough for the tool
to release the CPU between packets. Any application that
uses one of these measurement tools must therefore use some
other mechanism to account for the eﬀect of traﬃc sent from
the same machine on available bandwidth estimates. Appli-
cations could either account for their own traﬃc explicitly,
or operating systems could provide scheduling methods to
send packets at precise intervals without holding the proces-
sor for the duration of a packet train.
7. CONCLUSION
This paper introduced Spruce, a tool for estimating avail-
able bandwidth and compared its performance with two ex-
isting tools, IGI and Pathload. Spruce is simple, and gener-
ates a relatively low amount of probe traﬃc. Experiments
over a large number of Internet paths indicate that Spruce
estimates available bandwidth more accurately than Path-
load and IGI. Our future work will investigate the sources
of observed errors in order to improve the accuracy of avail-
able bandwidth estimation. Source code for Spruce will be
available at http://project-iris.net/.
8. REFERENCES
[1] National Laboratory for Applied Network Research
(NLANR). http://www.nlanr.net/.
[2] Planetlab. http://www.planet-lab.org/.
[3] M. Allman. Measuring End-to-End Bulk Transfer Capacity.
In ACM SIGCOMM Internet Measurement Workshop
2001, San Francisco, CA, Nov. 2001.
[4] D. Andersen, H. Balakrishnan, M. F. Kaashoek, and
R. Morris. Resilient Overlay Networks. In Proceedings of
the 18th ACM Symposium on Operating Systems
Principles (SOSP ’01), Chateau Lake Louise, Banﬀ,
Canada, Oct. 2001.
[5] B.A.Mah. pchar: a Tool for Measuring Internet Path
Characteristics. Feb. 1999.
[6] R. L. Carter and M. E. Crovella. Dynamic Server Selection
Using Bandwidth Probing in Wide-Area Networks.
Technical Report TR-96-007, Boston University Computer
Science Department, 1996.
[7] C. Dovrolis, P. Ramanathanm, and D. Moore. What Do
Packet Dispersion Techniques Measure? In IEEE
INFOCOM’01, 2001.
[8] A. B. Downey. Using Pathchar to Estimate Internet Link
Characteristics. In Measurement and Modeling of
Computer Systems, pages 222–223, 1999.
[9] N. Hu and P. Steenkiste. Evaluation and Characterization
of Available Bandwidth Techniques. IEEE JSAC Special
Issue in Internet and WWW Measurement, Mapping, and
Modeling, 2003.
[10] V. Jacobson. Pathchar. ftp://ftp.ee.lbl.gov/pathchar/.
[11] M. Jain and C. Dovrolis. End-to-End Available Bandwidth:
Measurement Methodology, Dynamics, and Relation with
TCP Throughput. In ACM SIGCOMM, Pittsburg, PA,
2002.
[12] M. Jain and C. Dovrolis. Pathload: A Measurement Tool
for End-to-End Available Bandwidth. In Passive and
Active Measurements, Fort Collins, CO, March 2002.
[13] G. Jin, G. Yang, B. Crowley, and D. Agarwal. Network
Characterization Service (NCS). In the 10th IEEE
Symposium on High Performance Distributed Computing,
Aug 2001.
[14] S. Keshav. A Control-Theoretic Approach to Flow Control.
In ACM SIGCOMM ’91, pages 3–15, September 1991.
[15] K. Lai and M. Baker. Measuring Link Bandwidths Using a
Deterministic Model of Packet Delay. In ACM SIGCOMM,
pages 283–294, 2000.
[16] K. Lai and M. Baker. Nettimer: A tool for Measuring
Bottleneck Link Bandwidth. In USENIX Symposium on
Internet Technologies and Systems, March 2001.
[17] M. Mathis. TReno Bulk Transfer Capacity.
draft-ietf-ippm-treno-btc-03.txt (Internet-Draft Work in
progress).
[18] B. Melander, M. Bjorkman, and P. Gunningberg. A New
End-to-End Probing and Analysis Method for Estimating
Bandwidth Bottlenecks. In Global Internet Symposium,
2000.
[19] T. Oetiker and D. Rand. Multi Router Traﬃc Grapher.
http://people.ee.ethz.ch/~oetiker/webtools/mrtg/.
[20] V. Paxson. End-to-end Routing Behavior in the Internet.
IEEE/ACM Transactions on Networking, 5(5):601–615,
October 1997.
[21] V. J. Ribeiro, M. Coates, R. H. Riedi, S. Sarvotham, and
R. G. Baraniuk. Multifractal cross traﬃc estimation. In
Proc. of ITC specialist seminar on IP traﬃc Measurement,
September 2000.
[22] V. J. Ribeiro, R. H. Riedi, R. G. Baraniuk, J. Navratil, and
L. Cottrell. pathChirp: Eﬃcient Available Bandwidth
Estimation for Network Paths. In Passive and Active
Measurement Workshop, 2003.
[23] Y. Zhang, N. Duﬃeld, V. Paxson, and S. Shenker. On the
Constancy of Internet Path Properties. In ACM
SIGCOMM Internet Measurement Workshop, Nov. 2001.