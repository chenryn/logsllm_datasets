tween documents, which are not in conﬂict with each other while unwanted
transfers are still denied.
The example above demonstrates that our model can express history-
based policies in a ﬂexible way. Our model provides the same level of security
as the original Chinese Wall model while being less restrictive. Thus, we
believe that our model provides a ﬂexible and expressive method to deﬁne
access depending on histories.
4.9 Summary
In this chapter, we introduced our model for history-based access control.
The objects of our model are either XML elements, attributes or so-called
text blocks. Text blocks are parts of the text content of an XML element,
which diﬀer in their way of creation or to where they were copied. We deﬁne
that our model automatically keeps track of these text blocks.
We described the set of operations of our model, which are create,
delete, view, copy and change-attribute. All of these operations ex-
cept from the last one can be applied to all three types of objects, whereas
the change-attribute operation can only be applied to attributes.
The operations of our model have a high level of abstraction, which allows
to keep track of many important details of the editing process. We record the
details of the editing process in the so-called “History”. In the history, we
record the context of each performed operation, where the context is a tuple
of subject, role and date, the previous values of attributes, deleted elements,
deleted attributes, and which elements or text blocks are copies of each other.
These copies were created by the copy operation.
To record the last aspect, we deﬁned the is-copy-of relation between two
objects. Two objects are in is-copy-of relation with each other, if one object
was created by applying the copy operation on the other. To visualize this,
we introduced the copy graph, where each node of the graph represents an
object and each directed edge of the graph represents a copy operation. If no
is-copy-of relation is missing in the graph we call it a complete copy graph.
We use access control rules to deﬁne access. For this purpose, we pre-
sented two types of rules, namely unary rules and copy rules. The last type
deﬁnes access for the copy operation, whereas the ﬁrst type deﬁnes access
for all remaining operations. We model the subjects in rules using the role-
based approach. In addition to this, each rule deﬁnes access for a speciﬁed
operation only. We use XPath patterns to describe the objects for which a
4.9. SUMMARY
63
rule is applicable. These patterns deﬁne objects by their properties, which
includes the content of objects as well as their history. For copy rules, we
also use an XPath pattern to describe the destination. Finally, a rule can be
either positive (allow) or negative (deny), which is speciﬁed by the mode of
the rule. If conﬂicts between positive and negative rules occur, we take the
rule with the more special role and ﬁnally apply deny takes precedence over
allow. If no rule matches for an object, access is denied.
We extended the function library of XPath to access history informa-
tion in XPath patterns. For this purpose, we have deﬁned functions in six
diﬀerent groups. We have functions that retrieve the copies of an object,
functions that can inspect deleted nodes, functions that return the nodes,
which a speciﬁed subject has accessed, functions that return the context
of a previous operation, functions to get speciﬁc nodes of the current rule
and some additional helper functions. All these functions allow us to deﬁne
objects depending on their history.
Finally, we presented an example, which shows how our model can be
used to model Chinese-Wall policies. In this example, we showed that our
model is suited better for real world scenarios, since it avoids the unnecessary
restrictions of the original Chinese-Wall model.
64
CHAPTER 4. MODEL
Chapter 5
System Architecture
In this chapter, we present a system architecture for applying history-based
access control in a distributed environment where multiple users can edit
documents concurrently. The components of the system architecture are
explained in detail in the following sections. Additionally, we describe the
algorithms and protocols that are required for the interaction between the
components. Before we start with the description of our system architecture,
we will explain the challenges concerning its design.
Applying our model in a scenario where multiple users concurrently edit
multiple documents introduces four challenges that are caused by our history-
based access control model. There can be additional challenges, but we will
only discuss the challenges that are introduced by our model and its way of
deﬁning access rights.
First, access rights of one document can depend on the content of other
documents, which we refer to as depending documents (see also Section
4.7.1). Since, we assume that documents are edited in a distributed fashion,
we need a method for accessing these distributed documents when calculating
access rights.
Second, changes to one document require the recalculation of the views of
all dependent documents, which are currently viewed. The straight forward
approach for this is to recalculate the views of all dependent documents after
a document has been changed. However, this results in a much higher number
of view recalculations compared to models which only deﬁne access depend-
ing on the currently edited document. For example, editing 20 depending
documents concurrently, leads to a 20 times higher number of view recalcu-
lations with the straight forward approach. Therefore, we need a method
which reduces the number of these view recalculations.
Third, the changes of one user to a document can revoke the access rights
of other users which are currently editing dependent documents. As a con-
65
66
CHAPTER 5. SYSTEM ARCHITECTURE
sequence, access rights can be revoked during an editing process, which can
lead to conﬂicts regarding the content of the document and the access rights.
Consequently, we need a method for handling these conﬂicts.
Fourth, the aforementioned straight forward approach causes intermedi-
ate editing steps to become relevant for access decisions of other users, which
is not desired. For example, a user can change a policy relevant element of a
document by ﬁrst deleting it and then replacing it with an updated version
afterwards.
In this example, the ﬁrst step can revoke the access rights of
another user, whereas the second step might restore these access rights. As a
consequence, we need an approach that avoids this problem, more precisely,
we want to avoid that intermediate editing steps become policy relevant for
other documents.
In the following sections, we present a system architecture that solves the
presented challenges. We start with an overview of this architecture. For the
moment, we make no assumptions how the components are distributed of
diﬀerent physical machines. In Section 5.3, we discuss diﬀerent ways of dis-
tributing the components of our architecture on diﬀerent physical machines
and ﬁnally present a distributed system architecture.
5.1 Architecture Overview
Our system architecture and its components are depicted in Figure 5.1. Our
system uses four databases. The document database (Doc DB) contains all
documents of the system. The rule database (Rule DB) contains the access
control rules, which specify allowed or denied accesses to the documents and
their parts. The copy database (Copy DB) stores the is-copy-of relation of
the objects. Finally, the user database (User DB) stores the credentials of
the users of the system as well as the corresponding roles including their
hierarchy.
The user interface (UI) presents documents to the user and oﬀers oper-
ations that can be performed on the documents.
If the user invokes such
an operation, the corresponding request is sent to the document processor
(DP), which performs the requested operation if it is permitted. Inside the
DP, the policy enforcement point (PEP) intercepts each operation and asks
the policy decision point (PDP) whether the requested operation is allowed.
The PDP uses the four databases to decide whether to allow or deny the
requested operation. In the following, we explain the workﬂow for editing a
document to illustrate the processes within our architecture.
5.2. WORKFLOW
67
Figure 5.1: System architecture
5.2 Workﬂow
A document must be opened before it can be viewed or edited. Therefore,
the UI oﬀers a command to open a document. This command is sent to
the DP, which loads a copy of the document from the document database.
We refer to this process as check-out, since it has semantics similar to the
check-out command of a version control system [Tic85]. After the check-out,
the user can edit the document by applying the operations of our model.
The changed content of an opened document including the corresponding
history becomes relevant for access decisions of other documents after it is
checked-in. Up to then, the content of the opened document is only relevant
for access decisions concerning that document itself. The document and
the corresponding history are kept as a local copy in the DP. To check-in a
document, the user must invoke the corresponding command of the UI. Then,
the DP stores the copy of the document back to the document database.
The check-in and check-out concept is more eﬃcient and oﬀers a higher
usability compared to directly working on the policy-relevant version of a
document. The ﬁrst concept is more eﬃcient, because changed content must
be propagated less often, more precisely, only when a document is checked-
in compared with immediately after each change. This also reduces the
overhead for recalculating permissions. The usability is also higher, because
of the transaction semantics of the approach. With this concept a user can
decide when the changing of a document is done, instead of having potentially
unwanted intermediate states to get relevant for access decisions. With this
concept we give a solution for the second and fourth challenge mentioned in
UIASPDPUserDPPEPUser DBCopy DBDoc DBRule DBUIPDPUserDPPEPUser DBCopy DBDoc DBRule DB68
CHAPTER 5. SYSTEM ARCHITECTURE
the introduction of this chapter.
5.2.1 Check-out
When the user user1 invokes the command to check out the document doca,
the DP ﬁrst loads a copy of doca from the Doc DB. The Doc DB maintains a
list listi for each document doci that denotes by which users doci is currently
opened to support concurrent access to documents. For that purpose, the DP
adds user1 to lista. Next, the DP sends a copy of doca and the credentials of
user1 to the PDP to retrieve a view of doca for user1. To create this view,
the PDP performs Algorithm 1.
This algorithm removes nodes from the document for which the user in
question has no view permission. For that purpose, the algorithm adds a
marker to each node which is set initially to “default”, where a node can
either be an element, an attribute or a text block. In line 3, we sort all rules
by their role, where superior roles are placed before inferior roles. If the role
ﬁeld of rules is identical or incomparable, we place deny rules before allow
rules. This sorting implements the conﬂict resolution strategy described in
Section 4.6.6. The loop in lines 4 to 12 iterates over all existing rules. The
condition in line 5 skips rules that are not applicable. In line 7, the XPath
expression for the object of the current rule is evaluated. The result of this
step is a set of nodes that match with the current XPath expression, which
deﬁnes the applicable objects of the rule. For each of these nodes, the marker
is set according to the mode ﬁeld of the current rule (line 8 to 10). In case
all markers of the document are set to a value diﬀerent from “defualt”, we
can stop evaluating rules and exit the loop (lines 11 and 12). Finally, we
remove every node with a marker set to “default” or “deny” (lines 13 to 15).
After that, the PDP sends the view to the DP, which forwards it to the UI
(line 16).
5.2.2 Editing
To edit a document, the user ﬁrst selects an operation oﬀered by the UI, which
is sent to the DP, where the PEP intercepts the operation to check whether
it is allowed. For that purpose, the PEP sends the requested operation
together with the current document to the PDP, which evaluates the rules
to answer the request of the PEP. The current document must be sent to
the PDP, since the current content of the document is relevant for its own
access rights. Algorithm 2 performs the evaluation of the rules for a speciﬁc
operation.
5.2. WORKFLOW
69
Algorithm 1: Create View
Input : rulesall, rolecurr, role hierarchy, doc
Output: doc
add marker to every node of doc
set marker of every node of doc to “default”
sort rulesall by role (special ﬁrst) and mode (deny ﬁrst)
for each rulei of rulesall do
if operation of rulei is not “view” or role of rulei is not inferior
or equal to rolecurr then
continue with next iteration of loop
nodesresult ← evaluate XPath of rulei for doc
for each nodej of nodesresult do
if marker of nodej is “default” then
set marker of nodej to mode of rulei
if all markers of doc are diﬀerent from “default” then
exit loop
for each nodej of doc do
if marker of nodej is “default” or “deny” then
remove nodej and subtree below from doc
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
return doc
70
CHAPTER 5. SYSTEM ARCHITECTURE
The algorithm for rule evaluation sorts all rules like the previous algorithm
(line 1). Then, it checks the applicability of each rule by inspecting its role
and its operation (line 3). For each rule, the XPath pattern is evaluated
(line 5) to check whether it matches with the object in question. In case of
a copy operation, the XPath pattern for the destination is evaluated (lines 8
to 11), too. If the rule is applicable, its mode is returned. After evaluating
all rules, the algorithms returns “deny”, if none of the rules was applicable.
The PDP sends the result of this algorithm back to the DP. If the result is
deny, the DP does not perform the requested operation and informs the user
via the UI. If the result is allow, the DP performs the requested operation.
For that purpose, it executes the algorithm for the selected operation. We
discuss these algorithms in the following.
Algorithm 2: Evaluate Rules
Input : rulesall, rolecurr, role hierarchy, op, doc, obj, docdest, objdest
Output: deny | allow
sort rulesall by role (special ﬁrst) and mode (deny ﬁrst)
for each rulei of rulesall do
1
2
3
4
5
6
7
8
9
10
11
12
13
if operation of rulei is not op or role of rulei is not inferior or
equal to rolecurr then
continue with next iteration of loop
nodesresult ← evaluate XPath for object of rulei for doc
if obj is not contained in nodesresult then
continue with next iteration of loop
if op is “copy” then
nodesresult ← evaluate XPath for destination of rulei for docdest
if objdest is not contained in nodesresult then
continue with next iteration of loop
return mode of rulei
return “deny”
Since performing an operation can lead to modiﬁcations of view permis-
sions, the DP asks the PDP to update the view as described above. The
updated view is presented to the user via the UI.
Create
The create operation can be used to create elements, attributes or text. In all
cases, we add history information that describes the operation. Algorithm 3
5.2. WORKFLOW
71
depicts the creation of a new element, where elemdst represents the position
of the new element. After creating the element, the corresponding history