## PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)单个数据库采用多个zfs卷(如表空间)时如何一致性备份  
##### [TAG 24](../class/24.md)
### 作者                                                                                                                    
digoal                                                                                                                    
### 日期                                                                                                                    
2016-08-23                                                                                                               
### 标签                                                                                                                    
PostgreSQL , 增量备份 , 块级 , COW , 写时复制 , zfs , clone , snapshot , 快照                                     
----                                                                                                                    
## 背景      
当我们使用了多个ZFS卷或者文件系统时，如果一个实例的多个部分，如表空间，放在了不同的zfs上，再使用基于ZFS快照的备份时，可能出现多个文件系统不一致的情况。        
例如控制文件是新的，但是数据是旧的。        
## 保物理备份的一致性检查      
基于文件的物理备份，为了保证备份的一致性，在备份开始时，需要做一个检查点，同时打开FULL PAGE WRTIE，同时还会生成backup_label文件记录备份开始时的WAL文件，检查点位置等信息。        
backup_label文件内容示例        
```      
START WAL LOCATION: 42/EB000060 (file 0000000100000042000000EB)      
CHECKPOINT LOCATION: 42/EB000098      
BACKUP METHOD: pg_start_backup      
BACKUP FROM: master      
START TIME: 2016-08-23 19:43:32 CST      
LABEL: a      
```      
同时backup_label也指出了当前备份是从主节点还是从 standby备份的        
使用read_backup_label解析backup_label文件        
优先从backup_label中得到备份开始的WAL位置，检查点的WAL位置，进行恢复。         
而不是控制文件的信息，因为控制文件可能在备份过程中，经过检查点后，发生了变化。        
```      
/*      
 * read_backup_label: check to see if a backup_label file is present      
 *      
 * If we see a backup_label during recovery, we assume that we are recovering      
 * from a backup dump file, and we therefore roll forward from the checkpoint      
 * identified by the label file, NOT what pg_control says.  This avoids the      
 * problem that pg_control might have been archived one or more checkpoints      
 * later than the start of the dump, and so if we rely on it as the start      
 * point, we will fail to restore a consistent database state.      
 *      
 * Returns TRUE if a backup_label was found (and fills the checkpoint      
 * location and its REDO location into *checkPointLoc and RedoStartLSN,      
 * respectively); returns FALSE if not. If this backup_label came from a      
 * streamed backup, *backupEndRequired is set to TRUE. If this backup_label      
 * was created during recovery, *backupFromStandby is set to TRUE.      
 */      
static bool      
read_backup_label(XLogRecPtr *checkPointLoc, bool *backupEndRequired,      
                                  bool *backupFromStandby)      
{      
        char            startxlogfilename[MAXFNAMELEN];      
        TimeLineID      tli;      
        FILE       *lfp;      
        char            ch;      
        char            backuptype[20];      
        char            backupfrom[20];      
        uint32          hi,      
                                lo;      
        *backupEndRequired = false;      
        *backupFromStandby = false;      
        /*      
         * See if label file is present      
         */      
        lfp = AllocateFile(BACKUP_LABEL_FILE, "r");      
        if (!lfp)      
        {      
                if (errno != ENOENT)      
                        ereport(FATAL,      
                                        (errcode_for_file_access(),      
                                         errmsg("could not read file \"%s\": %m",      
                                                        BACKUP_LABEL_FILE)));      
                return false;                   /* it's not there, all is fine */      
        }      
        /*      
         * Read and parse the START WAL LOCATION and CHECKPOINT lines (this code      
         * is pretty crude, but we are not expecting any variability in the file      
         * format).      
         */      
        if (fscanf(lfp, "START WAL LOCATION: %X/%X (file %08X%16s)%c",      
                           &hi, &lo, &tli, startxlogfilename, &ch) != 5 || ch != '\n')      
                ereport(FATAL,      
                                (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),      
                                 errmsg("invalid data in file \"%s\"", BACKUP_LABEL_FILE)));      
        RedoStartLSN = ((uint64) hi) label, opt->fastcheckpoint, &starttli,      
                                                                  &labelfile, tblspcdir, &tablespaces,      
                                                                  &tblspc_map_file,      
                                                                  opt->progress, opt->sendtblspcmapfile);      
```      
这个labelfile是在最开始的时候备份的，最后备份控制文件。     
```      
                        if (ti->path == NULL)      
                        {      
                                struct stat statbuf;      
                                /* In the main tar, include the backup_label first... */      
                                sendFileWithContent(BACKUP_LABEL_FILE, labelfile);      
                                /*      
                                 * Send tablespace_map file if required and then the bulk of      
                                 * the files.      
                                 */      
                                if (tblspc_map_file && opt->sendtblspcmapfile)      