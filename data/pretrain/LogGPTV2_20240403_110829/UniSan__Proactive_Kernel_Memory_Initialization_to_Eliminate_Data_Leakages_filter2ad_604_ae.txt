1
26
<116 M&P
P
P
M
P
P
P
P
M
M
M
M
1
2
2
1
M
M
M
M
<192 M&P
10
M&P
M&P
28
sock
user
sock
user
user
user
user
user
sock
sock
sock
sock
sock
sock
sock
sock
user
user
user
A&L
A&L
A&L
A&L
A&L
A&L
A&L
A&L
A&L
A&L
A
A
A
A
A
A
A
A
A
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
S
S
S
S
S
S
S
S
S
CVE-2016-4486
CVE-2016-4482
AndroidID-28620350
CVE-2016-4485
CVE-2016-4569
CVE-2016-4578
CVE-2016-4578
CVE-2016-4569
CVE-2016-5243
CVE-2016-5244
AndroidID-28620568
AndroidID-28619338
AndroidID-28620324
AndroidID-28673002
AndroidID-28672819
AndroidID-28616963
AndroidID-28616963
AndroidID-28616963
AndroidID-28616963
Table 3: List of new kernel uninitialized data leak vulnerabilities discovered by UniSan. In Patch column, S represents it has been submitted, and ✓represents
it has been applied. In the Cause column, P is compiler padding and M is missing element initialization. In the Kernel column, A represents Android and L
represents Linux. *These two “r1” are in different functions. AndroidID is internally maintained by Android security team at Google.
Linux (x86_64)
Android (AArch64)
Native Blind
(%) UniSan
(%) Native Blind
(%) UniSan
(%) W/O With
null syscall
stat
open/close
select TCP
signal install
signal handle
fork+exit
fork+exec
prot fault
pipe(latency)
TCP(latency)
pipe(bandw)
TCP(bandw)
0.04
0.37
1.20
2.44
0.11
0.58
156
452
0.295
9.673
91.8
3,321
2,331
0.04 (0.0%)
0.40 (8.1%)
1.22 (1.7%)
2.48 (1.6%)
0.11 (0.0%)
0.71 (22.4%)
157 (0.6%)
464 (2.7%)
0.317 (7.5%)
10.21 (5.6%)
99.5 (8.4%)
3,250 (2.1%)
2,264 (2.9%)
0.04 (0.0%)
0.38 (2.7%)
1.15 (-4.2%)
2.44 (0.0%)
0.11 (0.0%)
0.60 (3.4%)
156 (0.0%)
455 (0.7%)
0.316 (7.1%)
9.909 (2.4%)
97.3 (6.0%)
3,315 (0.2%)
2,333 (-0.1%)
0.42
1.33
6.09
9.67
0.58
1.79
851
2687
1.37
8.850
–
838
–
0.42 (0.0%)
1.43 (7.5%)
6.27 (3.0%)
10.67 (10.3%)
0.58 (0.0%)
1.98 (10.6%)
892 (4.8%)
2737 (1.9%)
1.47 (7.3%)
8.898 (0.5%)
–
728 (13.1%)
–
–
–
0.42 (0.0%)
1.37 (3.0%)
6.07 (-0.3%)
9.80 (1.3%)
0.57 (-1.7%)
1.85 (3.4%)
861 (1.2%)
2742 (2.0%)
1.35 (-1.5%)
8.882 (0.4%)
–
804 (4.1%)
–
–
–
STACKLEAK (x86_64)
(%)
0.12 (200.0%)
(55.6%)
0.70
(48.7%)
1.74
2.37
(11.3%)
0.24 (118.2%)
(12.7%)
0.71
167
(7.1%)
(2.6%)
467
(46.7%)
0.462
(11.6%)
10.2
(8.1%)
99.8
960
(2.7%)
(21.9%)
1183
0.04
0.45
1.17
2.13
0.11
0.63
156
455
0.315
9.141
92.3
987
1514
Table 4: LMBench results. Time is in microseconds. The last two rows are measuring bandwidth, which is the bigger the better. We do not have numbers for
TCP case in Android kernel, because we were not able to establish the TCP socket to our Nexus 9. STACKLEAK is compiled with GCC.
6.3.2 User Space Programs
For x86_64, we used the standard SPEC CPU 2006 benchmark
suite to test the performance impacts of UniSan on user space pro-
grams. The benchmark programs were compiled with the common
options (-pie -fPIC -O2) and each benchmark was run 10 times.
The results are shown in Table 5. Specifically, the performance
overhead introduced by UniSan is only 0.54%, which is negligible.
The performance overhead of the blind mode is higher than UniSan,
which is 1.92%. Note that the moderate blind-mode overhead over
SPEC benchmarks is when the user-space is not protected; when
we also applied the blind mode to the user-space code, the overhead
becomes 10% (7% from stack and 3% from heap).
For AArch64, we instead used the dedicated benchmarks for
Android: AnTuTu (including 3DBench) and Vellamo. They are
typical Android benchmarks to test a variety of cases (e.g., video
streaming, web browsing, photo editing, etc.). Each testing was
repeated five times for deriving the average numbers. The evaluation
results are shown in Table 6. Again, UniSan’s performance overhead
is negligible (<1%) and is lower than blind mode.
Server Programs
6.3.3
We used ApacheBench to test the performance impacts of UniSan
(%) UniSan
Programs
perlbench
bzip2
gcc
mcf
gobmk
hmmer
sjeng
libquantum
h264ref
omnetpp
astar
xalancbmk
milc
namd
dealII
soplex
povray
lbm
sphinx
Geo-mean
Native
3.61
4.74
0.968
2.73
14.0
2.07
3.27
0.0387
9.26
0.362
7.81
0.0758
4.57
8.85
10.5
0.0166
0.427
1.68
1.19
(seconds)
Blind
3.61 (0.0%)
4.78 (0.8%)
0.970 (0.2%)
2.76 (1.1%)
14.0 (0.0%)
2.03 (-1.9%)
3.30 (0.9%)
0.0397 (2.6%)
9.32 (0.6%)
0.364 (0.6%)
7.92 (1.4%)
0.0779 (2.8%)
4.76 (4.2%)
8.86 (0.1%)
10.6 (1.0%)
0.0186 (12.0%)
0.439 (2.8%)
1.69 (0.6%)
1.28 (7.6%)
1.92%
(%)
3.59(-0.6%)
4.78 (0.8%)
0.966(-0.2%)
2.74 (0.4%)
14.0 (0.0%)
2.04(-1.4%)
3.33 (1.8%)
0.0395 (2.1%)
9.28 (0.2%)
0.362 (0.0%)
7.92 (1.4%)
0.0738(-2.6%)
4.76 (4.2%)
8.83(-0.2%)
10.6 (1.0%)
0.0170 (2.4%)
0.426(-0.2%)
1.69 (0.6%)
1.20 (0.8%)
0.54%
Table 5: User space (x86_64) performance evaluation results with the SPEC
benchmarks. Time is in second, the smaller the better.
Benchmark
AnTuTu
Vellamo-Browser
Vellamo-Metal
Vellomo-Multicore
Native
94,998
4,776
2,766
2,610
Blind
92,900 (2.2%)
4,711 (1.4%)
2,777 (-0.4%)
2,499 (4.3%)
(%) UniSan
(%)
94,735 (0.3%)