# Stronger Enigma
Category: Reversing, 70 Points
## Description
> 
> ```
>          /   /  // --- /   /
>         /   /  // /O/ /   /
>        /   /  // --- /   /
>       /   /  //     /   /
>      |   |  || --- |   |
>      |   |  || |N| |   |
>      |   |  || --- |   |
>      |   |  || --- |   |
>      |---|  || |M| |---|
>      |   |  || --- |   |
>     /|   |  || --- |   |
>    / |   |  || |L| |   |     /
>   /_________________________/
>  |    __________________ | |
>  |   / .-.   .-.   .-.   \ |
>  |  | ( Q ) ( W ) ( E )  | |
>  |  |  "-".-."-".-."-"   | |
>  |O |    ( A ) ( S )     | O|
>  |  |  .-."-".-."-".-.   | |
>  |  | ( Z ) ( X ) ( C )  | |
>  |   \ "-"   "-"   "-"  /  |
>  |    ------------------   |
>  |___  .-. __ .-. __ .-.-._|
>   \   / 1 \  / 2 \  / 3 6 \ \ |
>   |\  \ Q /  \ W /  \ E Y /  \|
>   |--- "-"    "-"    "-"-" ---|
>          |      |      |
>         .-.    .-.    .-.
>        / ( \  / ) \  / ? \
>        \ Z /  \ X /  \ C /
>         "-"    "-"    "-"
> ```
> 
> John Savard
> 
> We caught an undercover agent in our facilities.
> 
> He was transmitting sensitive data to our enemies using some kind of crypto machine.
> 
> We were able to capture the machine but the agent destroyed the encryption configuration he used.
> 
> It's national security matter and we only trust you to solve the mystery - what was his message?
> 
> We were able to track the enemy's other machine in this address: 18.156.68.123:80.
> 
> We COUNT on you on this, don't let us down!
> 
> Good Luck!
A Python script was attached.
```python
import string
import random
def create_configuration():
    number_of_rotors = random.randrange(3, 6)
    rotates_amounts = [3, 5, 7, 11, 17, 19, 23]
    result = []
    for _ in range(number_of_rotors):
        rotor = "".join(random.sample(string.ascii_uppercase, 26))
        rotates_amount = random.choice(rotates_amounts)
        result.append([rotor, rotates_amount])
    return result
class StrongerEnigma:
    class Rotor:
        def __init__(self, configuration, rotate_amount):
            self.data = configuration
            self.rotate_amount = rotate_amount
        def rotate(self):
            self.data = self.data[self.rotate_amount:] + self.data[:self.rotate_amount]
        def encrypt(self, char):
            char_idx = string.ascii_uppercase.index(char)
            encrypted = self.data[char_idx]
            self.rotate()
            return encrypted
        def decrypt(self, char):
            char_idx = self.data.index(char)
            decrypted = string.ascii_uppercase[char_idx]
            self.rotate()
            return decrypted
    def __init__(self):
        todays_configuration = create_configuration()
        self.rotors = []
        for d in todays_configuration:
            self.rotors.append(StrongerEnigma.Rotor(d[0], d[1]))
    def __encrypt_char(self, char):
        encrypted = char
        if char in string.ascii_uppercase:
            for r in self.rotors:
                encrypted = r.encrypt(encrypted)
        return encrypted
    def __decrypt_char(self, char):
        decrypted = char
        if char in string.ascii_uppercase:
            for r in reversed(self.rotors):
                decrypted = r.decrypt(decrypted)
        return decrypted
    def encrypt(self, message):
        encrypted_message = ""
        for char in message:
            encrypted_message += self.__encrypt_char(char)
        return encrypted_message
    def decrypt(self, message):
        decrypted_message = ""
        for char in message:
            decrypted_message += self.__decrypt_char(char)
        return decrypted_message
def send_interface(machine):
    to_send = """
HELLO FIELD AGENT!
COMMANDS:
    SEND-SECRET-DATA
    GET-SECRET-DATA
    GOODBYE
    """
    message = machine.encrypt(to_send)
    send(message)
    return message
def process_message(server_machine, message):
    decrypted = server_machine.decrypt(message)
    if decrypted == "GET-SECRET-DATA":
        flag = open("flag.txt", "rt").read()
        encrypted = server_machine.encrypt(flag)
        send(encrypted)
    elif decrypted == "SEND-SECRET-DATA":
        encrypted = receive()
        decrypted = server_machine.decrypt(encrypted)
        open("secrets.txt", "a+").write(decrypted)
    elif decrypted == "GOODBYE":
        send("See you next time")
        exit()
    else:
        send("I don't understand you")
def send(message):
    pass #couldn't extract this part of code from the machine
def receive():
    pass #couldn't extract this part of code from the machine
def doEngima():
    starting_session_seconds = time.time()
    send("Insecure channel. Encrypting with today's configuration..")
    machine = StrongerEnigma()
    while True:
        send_interface(machine)
        client_message = receive()
        process_message(machine, client_message)
```
## Solution
Let's connect to the attached server:
```console
root@kali:/media/sf_CTFs/checkpoint/Stronger_Enigma# nc 18.156.68.123 80
Insecure channel. Encrypting with today's configuration..
ZXMFT DBSBX JSJWK!
IGGYBYFX:
    NYVY-AVKLEX-LYDJ
    SJC-LURSSA-XGYX
    JWBDLON
```
According to the sources, this is the program interface encoded with the current configuration:
```
HELLO FIELD AGENT!
COMMANDS:
    SEND-SECRET-DATA
    GET-SECRET-DATA
    GOODBYE
```
We can press "enter" multiple times and receive the same message encoded with the next configuration:
```console
root@kali:/media/sf_CTFs/checkpoint/Stronger_Enigma# nc 18.156.68.123 80
Insecure channel. Encrypting with today's configuration..
ZXMFT DBSBX JSJWK!
IGGYBYFX:
    NYVY-AVKLEX-LYDJ
    SJC-LURSSA-XGYX
    JWBDLON
I don't understand you
QLVBK QQJTI AWJXA!
PVRYFVYA:
    AZEW-DSPPMR-GVKA
    WJV-UCXVEV-TSKI
    ETJJCDM
I don't understand you
DXFTS KDJAP MKMOV!
FBLUCEWD:
    JUCT-UJOWUM-DRAM
    KMW-ZEQRVA-BOXO
    NKFTQFR
I don't understand you
QPAAX ICMGA LXXYA!
JJEIYCTU:
    PETO-LJPDCM-EXVL
    XXJ-JNSTSG-XJRK
    ASEUPJH
I don't understand you
DSFGH KUXMU PPLPG!
TFAXVTOL:
    CSKX-DMLXEL-DIAP
    PLY-RMBNJC-IAMQ
    FXBFDUY
I don't understand you
RKIML XFLVA BKXMC!
NEAGRKXD: