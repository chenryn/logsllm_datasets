### Incorporating the DOM Tree into Secure Multi-Execution

One viable option for integrating the Document Object Model (DOM) tree with secure multi-execution is to associate it with an input channel, ensuring that the security level of the DOM tree nodes and their values aligns with the overall security level. However, this approach introduces significant overhead, particularly for programs that frequently interact with the DOM tree, due to the bookkeeping required for handling inputs in a secure multi-execution environment. Additionally, this method may result in lower precision compared to an alternative solution.

The alternative solution involves incorporating the DOM tree into each JavaScript execution's state, providing each execution with its own copy of the DOM tree, similar to how program variables are handled. Different executions will not see identical copies of the DOM tree; instead, the evaluation of the DOM tree based on security levels will determine the exposed version. For instance, all security levels except the highest might only see a dummy version of the HTML document. In mash-up applications, different security levels could be shown separate parts of the real DOM tree. It is crucial to ensure that this approach is consistent with the handling of DOM tree nodes that produce external side effects.

We believe the latter alternative is preferable, despite the additional memory overhead from maintaining multiple copies of the DOM tree. This overhead can be considered similar to the general overhead of secure multi-execution for objects manipulated by a program. If necessary, optimizations such as copy-on-write-based sharing of the tree can be implemented to mitigate the memory impact.

In this section, we have outlined some of the challenges anticipated in a real-world browser-based implementation of secure multi-execution. We believe there is significant potential for further research in this direction.

### Handling Non-Noninterferent Programs

In Section IV-C, we demonstrated that termination-sensitively noninterferent programs produce the same results under secure multi-execution as they do under normal execution, provided the normal execution terminates for a given input. An important question is how secure multi-execution handles interferent programs. Theorem 1 in Section IV-B states that any program is noninterferent under secure multi-execution, implying that multi-execution has mechanisms to replace interferent behavior with noninterferent behavior. This section explores these mechanisms through example programs.

Secure multi-execution employs various methods to block unwanted information flows. The informal overview in Section II illustrates how explicit and implicit information flows are managed. Offending assignments and conditional statements are still executed, but any data they do not have access to is replaced by default data. In high-security executions, these statements are executed with real data, but no leaks to low-security output channels are possible.

Another mechanism that blocks certain types of covert flows can be observed in the example in Figure 10a. Assuming that reading a value from L produces external side effects, the program under standard execution reads from L if and only if `x == vdefault`, making it clearly interferent. Under secure multi-execution, the low-security execution does not read any input from L. The high-security execution attempts to read from L if `x == vdefault`, but if it does, it blocks and waits indefinitely for the low-security execution to read from L. This behavior is both termination- and timing-sensitively noninterferent, as secure multi-execution blocks the undesirable flow by making the high-security thread wait indefinitely in the global waiting queue. Figure 10b shows a similar phenomenon for a termination-insensitively noninterferent program.

Figure 10c presents a non-terminating, termination-sensitively noninterferent program, where multi-execution is not transparent using the `selectlowprio` scheduler. In this example, the high-security execution is never selected because the low-security thread diverges. This issue can be mitigated by using a more relaxed scheduler, but the challenge is to do so without compromising timing sensitivity in the soundness guarantee.

### Ensuring Noninterference

The ability of secure multi-execution to enforce noninterference for any program makes it well-suited for environments where there is limited control over the code, such as in a web browser. When the code is interferent, secure multi-execution modifies its behavior to be non-interferent while still executing it. It is essential that the modified behavior remains as meaningful as possible. We believe that in many cases, the modifications made by secure multi-execution are as meaningful as possible without compromising noninterference. For example, a web application that inadvertently sends private information to a website statistics service will be modified to send a request based on default values in the low-security execution. This is desirable behavior when transparency conflicts with noninterference.

In some situations, secure multi-execution may not produce such meaningful behavior, such as when finishing execution with non-empty waiting queues. In other cases, secure multi-execution can detect that modifications have been made, such as when a high-security execution would have sent different data to public outputs than the low-security execution. In these scenarios, an implementation could issue an appropriate warning to the user, explaining that the original program was likely interferent and what effects should be expected. To support this, we suggest that subsequent work could include a detailed formal analysis of the results for programs conforming to different noninterference criteria.

### Exceptions, Concurrency, and Nondeterminism

Exceptions, concurrency, and nondeterminism pose additional challenges for techniques enforcing noninterference. From a theoretical perspective, noninterference becomes a property that is difficult to enforce, necessitating concepts like possibilistic or probabilistic noninterference. Exceptions and concurrency also present practical challenges. For example, Smith and Volpano need to impose significant restrictions in their type system to handle exceptions and concurrency.

An appealing feature of secure multi-execution is that it can support exceptions, concurrency, and nondeterminism without fundamental obstacles. The basic idea of executing the program once at every security level and handling input and output in each execution remains valid, even if each separate execution internally manages exceptions, concurrency, and nondeterminism. It is intuitively clear that no information from higher levels can leak to a lower-level execution because it simply does not have access to the information and cannot communicate with higher-level executions. However, developing these ideas into a formal proof remains a considerable challenge.

### Related Work

There is a vast body of related work in the field of information flow security. We direct the reader to the survey by Sabelfeld and Myers [20] for an overview of static techniques and to Le Guernic's PhD thesis [22] for an overview of dynamic techniques. In this section, we focus on papers that propose ideas or approaches closely related to our notion of secure multi-execution and work that applies information flow analysis to JavaScript.

Russo et al. [15] describe an approach to close internal timing channels using program transformation. For any conditional branching on high-security variables, they rewrite the program to execute branches in dedicated threads, replacing low-security variables with high-security images and implementing careful synchronization to avoid data races. Their technique can be seen as a form of multi-execution, with their base thread equivalent to a low-security thread and the high-security threads serialized by added synchronization commands. While their approach provides termination-insensitive noninterference, secure multi-execution offers stronger guarantees (timing- and termination-sensitive noninterference).

Pottier and Simonet [23] discuss an approach to prove noninterference using standard preservation and progress theorems for a security type system for Core ML. They propose adding a pairing construct to the language to reason about two executions of a program, which is somewhat similar to bi-execution in our approach. Barthe et al. [24] propose self-composition, another pairing construct, to reason about noninterference in program logics, aiming to support (Hoare-logic-like) program verification techniques for noninterference properties.

Vogt et al. [25] describe a practical taint tracking technique for JavaScript, focusing on protecting against cross-site scripting attacks. While useful, their technique is not fully sound, as identified by Russo et al. [7]. Chugh et al. [13] propose a framework for staging information flow in dynamically generated JavaScript, limiting attention to specific types of flow policies to ensure efficient residual checks. Their static instantiation uses an analysis technique based on set inclusion constraints, but like any static technique, it is not fully precise and may reject programs for which secure multi-execution can enforce noninterference transparently.

Yumerefendi et al. [26] describe TightLip, a comprehensive information flow control system implemented in the Linux kernel. TightLip spawns a doppelganger process to detect insecure information flows, inheriting most of the state of the original process but with access to a scrubbed version of the file. System calls of both processes are tracked and compared, and if differences are detected, various mitigation techniques are applied. While TightLip and secure multi-execution share the idea of executing a process multiple times on different security levels, TightLip focuses on detecting output divergence and lacks formal results, making it less precise and sound.

### Conclusion

We have proposed secure multi-execution, a novel dynamic enforcement mechanism for noninterference policies. Secure multi-execution is sound for a strong notion of noninterference, taking into account termination and timing covert channels, and is precise in the sense that the enforcement is transparent for all terminating runs of termination-sensitively noninterferent programs. We have also provided evidence of its practicality through benchmark results on an implementation for JavaScript.

### Acknowledgements

The idea of secure multi-execution originated from a question raised by Nicky Mouha in a summer school lecture on information flow security. We hope this paper provides a satisfactory answer to your question, Nicky!

We are grateful to Andrei Sabelfeld, Bart Jacobs, and Dave Clarke for their valuable feedback and comments on draft versions of this paper. This research is partially funded by the Interuniversity Attraction Poles Programme Belgian State, Belgian Science Policy, and the Research Fund K.U.Leuven.

### References

[1] D. Volpano, C. Irvine, and G. Smith, “A sound type system for secure flow analysis,” Journal of Computer Security, vol. 4, no. 2/3, pp. 167–188, 1996.

[2] N. Heintze and J. G. Riecke, “The SLam calculus: programming with secrecy and integrity,” in POPL, 1998, pp. 365–377.

[3] A. C. Myers, “JFlow: Practical mostly-static information flow control,” in POPL, 1999, pp. 228–241.

[4] M. Zanotti, “Security typings by abstract interpretation,” in Proc. Symposium on Static Analysis, 2002, pp. 360–375.

[12] M. Johns, “On JavaScript malware and related threats,” Journal in Computer Virology, vol. 4, no. 3, pp. 161–178, 2008.

[13] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner, “Staged information flow for JavaScript,” in PLDI, 2009, pp. 50–62.

[14] S. Maffeis, J. C. Mitchell, and A. Taly, “Isolating JavaScript with filters, rewriting, and wrappers,” in ESORICS, 2009, pp. 505–522.

[15] A. Russo, J. Hughes, D. Naumann, and A. Sabelfeld, “Closing internal timing channels by transformation,” in ASIAN, 2006, pp. 120–135.

[16] D. Volpano and G. Smith, “Eliminating covert flows with minimum typings,” in Computer Security Foundations Workshop, 1997, pp. 156–168.

[17] “Valgrind user manual - massif: a heap profiler.” [Online]. Available: http://valgrind.org/docs/manual/ms-manual.html

[18] F. Tip, “A survey of program slicing techniques,” Journal of Programming Languages, vol. 3, no. 3, pp. 121–189, 1995.

[19] D. Devriese and F. Piessens, “Secure multi-execution experiment source code.” [Online]. Available: http://www.cs.kuleuven.be/~dominiqu/permanent/sme-experiment.tar.gz

[20] A. Sabelfeld and A. Myers, “Language-based information-flow security,” IEEE Journal on Selected Areas in Communications, vol. 21, no. 1, pp. 5–19, 2003.

[5] D. E. Denning and P. J. Denning, “Certification of programs for secure information flow,” Comm. of the ACM, vol. 20, no. 7, pp. 504–513, 1977.

[21] G. Smith and D. Volpano, “Secure information flow in a multi-threaded imperative language,” in POPL, 1998, pp. 355–364.

[6] G. Le Guernic, A. Banerjee, T. Jensen, and D. Schmidt, “Automata-based confidentiality monitoring,” in ASIAN, 2006, pp. 75–89.

[7] A. Russo, A. Sabelfeld, and A. Chudnov, “Tracking information flow in dynamic tree structures,” in ESORICS, 2009, pp. 86–103.

[8] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A. Blome, G. A. Reis, M. Vachharajani, and D. I. August, “RIFLE: An architectural framework for user-centric information-flow security,” in MICRO, 2004, pp. 243–254.

[9] F. B. Schneider, “Enforceable security policies,” ACM Trans. Information and System Security, vol. 3, no. 1, pp. 30–50, 2000.

[10] “Mozilla SpiderMonkey website.” [Online]. Available: http://www.mozilla.org/js/spidermonkey/

[11] “Google Chrome V8 benchmark suite instructions.” [Online]. Available: http://code.google.com/apis/v8/benchmarks.html

[22] G. Le Guernic, “Confidentiality enforcement using dynamic information flow analyses,” Ph.D. dissertation, Kansas State University, 2007.

[23] F. Pottier and V. Simonet, “Information flow inference for ML,” ACM Trans. Program. Lang. Syst., vol. 25, no. 1, pp. 117–158, 2003.

[24] G. Barthe, P. R. D’Argenio, and T. Rezk, “Secure information flow by self-composition,” in CSFW, 2004, pp. 100–114.

[25] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Krügel, and G. Vigna, “Cross site scripting prevention with dynamic data tainting and static analysis,” in NDSS, 2007.

[26] A. R. Yumerefendi, B. Mickle, and L. P. Cox, “TightLip: Keeping applications from spilling the beans,” in NSDI, 2007.

[27] A. Russo and A. Sabelfeld, “Dynamic vs. static flow-sensitive security analysis,” 2010, unpublished.