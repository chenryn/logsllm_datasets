//实现
1
模板方法定义了一个算法的步骤，并允许子类为一个或多个步
骤提供实现。
286
第8章
---
## Page 323
模板方法模式
走，泡茶去·····
慕后
让我们逐步地泡茶，追踪这个模板方法是如何工作的。你会得
花絮
知在算法内的某些地方，该模板方法控制了算法。它让子类能
够提供某些步骤的实现.
boilWater();
好吧！首先我们需要一个茶对象
brew() ;
Tea myTea = new Tea ();
pourInCup();
addCondiments();
然后我们调用这个模板方法：
prepateRecipe方法控制了
myTea.prepareRecipe () ;
算法，没有人能够改变
它会依照算法来制作咖啡因饮料
它。这个方法也金依赖
子类来提供某些或所有
步颗的实现。
首先，把水煮沸：
boilWater();
Caffe
Dladc
这件事情是在咖啡因饮料类（超类）中进行的。
boiWater()
pourlinCupl)
接下来，我们需要泡茶，这件事情只有子类才知道要怎
么做：
brew () ;
Tes
现在把茶倒进杯子中；所有的饮料做法都一样，所以这件事情发生
orew
在超类中：
pourInCup();
最后，我们加进调料，由于调料是各个饮料独有的，所以由子类来
实现它：
addCondiments() ;
你现在的位置
287
---
## Page 324
模板方法带给我们什么？
模板方法带给我们什么？
模板方法提供的
不好的茶和咖啡实现
酷炫咖啡因饮料
Coffee和Tea主导一切；它们控制了算
由CaffeineBeverage类主导一切，它拥
法。
有算法，而且保护这个算法。
Coffee和Tea之间存在着重复的代码。
对子类来说，CaffeineBeverage类的存
在，可以将代码的复用最大化。
对于算法所做的代码改变，需要打开子
算法只存在于一个地方，所以容易修
类修改许多地方。
改。
由于类的组织方式不具有弹性，所以
这个模板方法提供了一个框架，可以让
加入新种类的咖啡因饮料需要做许多工
其他的咖啡因饮料插进来。新的咖啡因
作。
饮料只需要实现自己的方法就可以了。
算法的知识和它的实现会分散在许多
CaffeineBeverage类专注在算法本身，
而由子类提供完整的实现。
类中。
288
---
## Page 325
模板方法模式
定义模板方法模式
你已经看到了在茶和咖啡的例子中如何使用模板方法模式。现在，就让我们来看
看这个模式的正式定义和所有的细节：
模板方法模式在一个方法中定义一个算法的骨架，而
将一些步骤延迟到子类中。模板方法使得子类可以在不改变
算法结构的情况下，重新定义算法中的某些步骤。
这个模式是用来创建一个算法的模板。什么是模板？如你所见的，模板就是一
个方法。更具体地说，这个方法将算法定义成一组步骤，其中的任何步骤都可
以是抽象的，由子类负责实现。这可以确保算法的结构保持不变，同时由子类
提供部分实现。
让我们看看类图：
模板方法在实现算法的过程中，用到了
这两个原语禄作。楼板方法本身和这两
个操作的具体实现之间被解耦了。
这个抽象的类包含了
模板方法。
AbstractClass
lemplateMethod(
primitiveOperation1(:
orimtiveOperation10
primitiveOperation20:
这个模板方法所用
imitiveOperation20
到的摄作的抽象版本。
ConcreteClass
primitiveOperation1()
可能有许多个具体类，
primitiveOperation2[)
这个具体类实现抽象的摄作，当）
每一个都实现了模板
模板方法需要这两个抽象方法时.
方法所需的全师操作。
会调用它们。
你现在的位置
289
---
## Page 326
再靠近模板方法模式
再靠近一点
让我们细看抽象类是如何被定义的，包括了它内含的模板方法和原语操作。
这就是我们的抽象类。它被声明为抽
象，用来作为基类，其子类必须实现
其摄作。
这就是横板方法。它被声明为
sinal，以免子类改变这个算法的顺
序。
abstract class AbstractClass(
横板方法定义了一连事
finalvoid templateMethod()
primitiveOperationl () :
的步骤，每个步骤由一
primitiveOperation2():
个方法代表。
concreteOperation();
abstract void primitiveOperationl():
abstract voidprimitiveOperation2():
在这个范制中有两个原
voidconcreteOperation()(
语操作，具体子类必须
//这里是实现
实现它们。
这个抽象类有一个具体的摄作。关于
这类方法，稍后金再详述….
290
第8章
---
## Page 327
模板方法模式
更靠近一点
现在我们要“更靠近一点”，详细看看此抽象类内可以有哪些类型的方法：
我们如进一个新
方法调用，改变了
tempateMethod()
abstract class Abstractclass (
final void templateMethod() (
primitiveOperationl():
primitiveOperation2():
这两个方法还是和以前一
concreteOperation();
hook();
样.定义感抽象，由具体
的子类实现。
abstract void primitiveOperationl();
abstract void primitiveOperation2();
这个具体的方法被定义在抽象类中。
final void concreteOperation()
将它声为simal，这样一来子类就无法
//这里是实现
覆盖它。它可以被模板方法直接使用，
)
或者被子类使用。
void hook()()
不
我们也可以有“默认不做事的方法”，我们称这
这是一个具体的方法，
种方法为“hook”（钩子）。子类可以现情况决
但它什么事情都不做！
定要不要覆盖它们。在下一页，我们就金知递钩
子的实际用途。
你现在的位置
291
---
## Page 328
实现钩子
对模板方法进行挂钩
有了钓子，我能够决定要
不要履盖方法。如累我不提供自
已的方法，抽象类会提供一个默
钩子是一种被声明在抽象类中的方法，但
只有空的或者默认的实现。钩子的存在，
认的实现。
可以让子类有能力对算法的不同点进行挂
钩。要不要挂钩，由子类自行决定。
钩子有好几种用途，让我们先看其中一
个，稍后再看其他几个：
public abstract class CaffeineBeverageWithHook {
void prepareRecipe ()(
boilWater ();
brew () ;
我们加上了一个小小的条件语句，而
pourInCup ();
该条件是否成立，是由一个具体方法
if(customerWantsCondiments())(
customerWantsCondiments）决定的。如果
addCondiments();
顾客“想夏”调料，只有这时我们才调用
addCondiments()。
abstract void brew();
abstract void addCondiments () ;
void boilWater ()(
System,out.println ("Boiling water") ;
我们在这里定义了一个方法，
1
（通常）是空的缺省实现。这
void pourInCup()(
个方法只返回tue，不做别
System.out.println("Pouring into cup");
的事。
1
2
boolean customerWantsCondiments()
这就是一个钩子，子类可以
return true;
覆盖这个方法，但不见得一
定要这么做。
292
第8章
---
## Page 329
模板方法模式
使用钩子
为了使用钩子，我们在子类中覆盖它。在这里，钩子控制了咖啡因饮料是
否执行某部分算法：说得更明确一些，就是饮料中是否要加进调料。
我们如何得知顾客是否想要调料呢？开口问不就行了！
public class CoffeeWithHook extends CaffeineBeverageWithHook {
public void brew(){
System.out.println("Dripping Coffee through filter");
public void addCondiments () (
System.out.println ("Adding Sugar and Milk") ;
你覆盖了这个钩子，
提供了自己的功能。
public boolean customerWantsCondiments(){
String answer=getUserInput();
if(answer.toLowerCase().startsWith("y"))(
return true;
)else（
让用户输入他们对调科的
return false;
决定。根据用户的输入
返tue或talse。
private String getUserInput()(
String answer= null;
System.out.print("would you like milk and sugar with your coffee (y/n)?");
BufferedReader in-new BufferedReader(new InputStreamReader(System.in));
tryf
answer-in.readLine();
)catch（IoExceptionioe）{
System.err.println("Io error trying to read your answer");
if（answer==null）(
return"no";
这段代码询问用户是否想要奶和糖，通过会
return answer;
合行获得用户输入
你现在的位置
293
---
## Page 330
测试
执行测试程序
好了，水开了下面是一段测试码，用来制造
热茶和热咖啡。
public class BeverageTestDrive (
public static void main(String[] args){
创建一杯茶。
TeaWithHook teaHook = new TeaWithHook();
CoffeeWithHook coffeeHook = new CoffeeWithHook();
一杯咖啡。
System.out.println("\nMaking tea...") ;
teaHook.prepareRecipe () ;
然后调用两老的
System.out.println("\nMaking coffee...");
ptepateRecipe()。
coffeeHook.prepareRecipe ();
执行结果...
Sjava BeverageTestDrive
Making tea..
一杯热腾腾的茶是的，当然要
Boiling water
Steeping the tea
加柠檬：
Pouring into cup
Would you like
1emon with your tea （y/n)?Y
Adding Lemon
一杯热腾腾的咖啡，但是那些能
Making coffee..
让我曙图增大的有热量的调科就
Boiling water
免了。
Dripping Coffee through filter
Pouring into cup
Would you like milk and sugar with your coffee (y/n)?n
294
第8章
---
## Page 331
模板方法模式
我反倒认为淘问顾客的这类
功能应该让所有的子类共用，不是吗？
你知道吗？我们同意你的看法。但是你必须承
认，这个例子实在很酷，钩子竞然能够作为条
件控制，影响抽象类中的算法流程，实在很不
赖吧！
我们相信，在你自己的代码中你一定可以找到
其他真实的场面可以使用模板模式和钩子。
问：
现算法中可选的部分，或者在钩子对
模板方法算法中未定义步骤提供完整
当我创建一个模板方法
于子类的实现并不重要的时候，子
的实现。
时，怎么才能知道什么时候该使用抽
类可以对此钩子置之不理。钩子的另
象方法，什么时候使用钩子呢？
一个用法，是让子类能够有机会对模
问
似乎我应该保持抽象方
签
板方法中某些即将发生的（或刚刚发
法的数目越少越好，否则，在子类中
合：
当你的子类“必须”提
生的）步骤作出反应。比方说，名为
实现这些方法将会很麻烦。
供算法中某个方法或步骤的实现时，
justReOrderedListO的钩子方法允许子
就使用抽象方法。如果算法的这个部
类在内部列表重新组织后执行某些动
合：
当你在写模板方法的时
分是可选的，就用钩子。如果是钩子
作（例如在屏募上重新显示数据）。
候，心里要随时记得这一点。想要做
的话，子类可以选择实现这个钩子，
正如你刚刚看到的，钩子也可以让子
到这一点，可以让算法内的步骤不要
但并不强制这么做。
类有能力为其抽象类作一些决定。
切割得太细，但是如果步骤太少的
问：
问:
话，会比较没有弹性，所以要看情况
使用钩子真正的目的是
子类必须实现抽象类中