turn such data structures. For example, MyBloggie employs the
preg_replace function, which is a regular-expression version of
a string replacement operation. preg_replace can both accept and
return arrays as arguments. Arrays are difﬁcult to translate to Kaluza
because they correspond to an unknown number of variables, and
Kaluza expects a ﬁxed number of variables in the constraints. An-
other example of a function we did not translate is found in DCP-
Portal application: the md5 function computes the MD5 hash of its
argument.
For constraints that cannot be translated to Kaluza’s language,
WAPTEC simply drops those constraints, producing a constraint
set that is weaker than it ought to be, potentially leading to un-
soundness and incompleteness in the search for parameter tamper-
ing exploits. However, because WAPTEC always checks if the
variable assignment produced by the solver satisﬁes the original
constraints, unsound results are never reported.
Disjunction.
As mentioned above, disjunction is employed
heavily by WAPTEC, and while Kaluza handles disjunction na-
tively, the search for parameter tampering exploits sometimes re-
quires ﬁnding different solutions for different disjuncts in a set of
constraints—functionality Kaluza does not support. Thus WAPTEC
manages disjunctions itself, sometimes converting to disjunctive
normal form (DNF)2 explicitly.
6. EVALUATION
We evaluated the effectiveness of WAPTEC on a suite of 6 open
source PHP applications that were chosen to reﬂect prevalent appli-
cation domains in commonplace settings. Table 2 provides back-
ground information on these applications (lines of code, number
of ﬁles, and functionality). The test suite was deployed on a Mac
Mini (1.83 GHz Intel, 2.0 GB RAM) running the MAMP applica-
tion suite, and WAPTEC was deployed on an Ubuntu workstation
(2.45Ghz Quad Intel, 2.0GB RAM).
Experiments. We evaluated our approach by conducting two
sets of experiments. In the ﬁrst set of experiments, we ran WAPTEC
to automatically analyze the chosen web forms and identify param-
eter tampering exploits that are correct by construction. In the sec-
ond set of experiments, we ran NOTAMPER, a blackbox version of
WAPTEC developed in our previous work [7], on the same web
forms. We compared the results of the two experiments to quantify
1Type casting functions, while included in the documentation, were
unavailable at the time of evaluation.
2In our experience, converting to DNF was usually inexpensive
(despite its worst-case exponential behavior) because of the struc-
tural simplicity of the constraint sets.
582Application
SnipeGallery
SPHPBlog
DcpPortal
Size
(KLOC)
9.1k
26.5k
144.7k
PHPNews
Landshop
MyBloggie
6.4k
15.4k
9.4k
Files Use
Exploits
54
113
484
21
158
59
Image Mgmt
Blog
Content
Mgmt
News Mgmt
Real Estate
Blog
2
1
32
1
3
6
Table 2: Summary of WAPTEC results
the beneﬁts of using whitebox analysis over blackbox analysis in
the context of parameter tampering attacks.
Results summary. The outcome of the ﬁrst set of experiments is
summarized in Table 2. We evaluated one form in each application.
WAPTEC found a total of 45 exploits. We manually veriﬁed all
of these exploits. For each application shown in column 1, the last
column shows reported exploits. As shown in this table, WAPTEC
successfully generated one or more exploits for each application in
the test suite underscoring a widespread lack of sufﬁcient replica-
tion of the client-side validation in the corresponding server-side
code. A detailed report of exploits found by WAPTEC can be
found at http://sisl.rites.uic.edu/waptec. We discuss a few inter-
esting exploits below and use them to motivate discussion in Sec-
tion 6.2 that discusses improvements made by WAPTEC (white-
box) over our prior work NOTAMPER (blackbox).
6.1 Exploits
Privilege escalation. The dcpportal application allows guests
to register for an account. The registration form solicits standard
information, such as name, e-mail, username, password, etc. Upon
normal registration, a user is provided with an account having ba-
sic privileges. When the form is submitted, the server-side form
processing code validates the provided information and checks if
a cookie make_install_prn is set. When this cookie is set to
1, the user is registered with administrative privileges. By setting
this cookie, it is possible for an attacker to register an account with
escalated privileges.
Discovery of the above vulnerability required WAPTEC to con-
struct a negative parameter tampering exploit i.e., the client-side
formula fclient for this form did not contain any restriction on the
parameter make_install_prn however the server side formula
fserver checked its value. The whitebox view of the server-side
code enabled WAPTEC to set this additional parameter and esca-
late privileges of user being registered to an administrator.
After conﬁrming the exploit, we analyzed the application to un-
derstand the root cause of this ﬂaw. We found that the applica-
tion used cookie make_install_prn during initial installation to
allow creation of an administrator account. To patch this vulner-
ability, the application can use additional server-side state (e.g.,
sessions) to avoid depending on the cookie value alone or have a
separate form for this purpose.
Duplicate users. The dcpportal application requires unique
usernames comprising of at most 32 alphanumeric characters for
new account registrations. The client-side allows only 32 alphanu-
meric characters, while the server-side enforces uniqueness by check-
ing that the database does not contain a matching username be-
fore creating an account. Further, during insertion of new user de-
tails, the database enforces the length by truncating usernames to
32 characters.
During vulnerability analysis, WAPTEC recognized that the server
fails to enforce the length constraint before checking for existing
usernames. For this vulnerability, WAPTEC generated hostile in-
puts that exceeded 32 characters, which in this case caused the
username existence check to always return false. This is because
usernames stored in the database are truncated to 32 characters and
checking for usernames of length > 32 will always return false. In
addition to this, the server also fails to replicate the alphanumeric
constraint on username and WAPTEC generated a hostile input
that contained invalid characters. When conﬁrming these exploits,
we were able to reﬁne them. Although true account duplication
works only for long usernames, it is possible to create imposter ac-
counts by appending url encoded whitespace to existing usernames.
Blog category hijacking. mybloggie, a blogging application,
allows registered users to submit posts to the blog. When submit-
ting a post, users are asked to choose a category for the current post
from a drop-down list of existing categories. By submitting a value
not in that list, an attacker can submit posts that will appear in a
category that will be created in the future. This may negatively im-
pact effectiveness / quality of the future category thus this attack
can hijack a future blog category. WAPTEC computed formulas
fserver and fclient for this form, revealed missing validation of
submitted category value by the server-side code and was exploited
by supplying an out of range value.
Additional exploits. Below we brieﬂy describe one exploit from
each of the other four applications we evaluated.
phpnews, a news management application, allows administra-
tors to modify certain ﬁles through a form which contains name of
the ﬁle as a hidden ﬁeld. The server-side code fails to validate that
the ﬁle name is not tampered and as a result attackers can update
existing ﬁles, create arbitrary ﬁles and / or corrupt ﬁles of other
applications deployed on the same web server.
snipegallery, a photo album application, allows users to arrange
albums hierarchically by selecting a parent category for each new
album from a drop down list. By selecting a value not in that list,
the new album becomes invisible; furthermore, additional analysis
shows that a carefully constructed parent album value leads to a
SQL injection attack.
landshop, a real estate application, includes a form with a hidden
ﬁeld not pertinent to that form. When the value of this ﬁeld is set
to the ID of an existing listing (which are displayed prominently
on the site), that listing is deleted from the application whether the
user is the owner or not.
sphpblog, a blogging application, allows users to choose a lan-
guage for the blog from a drop down menu. By selecting a lan-
guage value not in the drop down menu, an attacker can make the
application unusable and thus conduct a denial-of-service attack.
6.2 Comparison of whitebox and blackbox
results
The results of the comparison are summarized in Table 3. For
each application, this table reports the number of conﬁrmed ex-
ploits found by NOTAMPER (column 2) and WAPTEC (column
3). The next two columns report false positives reported by NO-
TAMPER, which were eliminated in WAPTEC, and false negatives
reported by WAPTEC that NOTAMPER failed to ﬁnd. In total, the
blackbox approach resulted in 23 false positives, and 24 fewer con-
ﬁrmed exploits when compared to the whitebox approach. Further,
for dcpportal and mybloggie applications WAPTEC found sev-
eral exploitable sinks for each negated disjunct of fclient e.g., for
dcpportal column 3 shows 16(32) - each hostile input generated
by negating 16 fclient disjuncts was used in 2 distinct sinks and
hence were exploitable (total 32 exploits). We wish to note that all
583Application
SnipeGallery
SPHPBlog
DcpPortal
PHPNews
Landshop
Mybloggie
Total
Conf. exploits
BlackB. WhiteB. BlackBox
2
1
13
1
3
1
21
2
1
16(32)
1
3
5(6)
45
1
0
9
0
1
12
23
False pos. False neg.
BlackBox
0
0
19
0
0
5
24
Table 3: Comparing whitebox and blackbox analysis results
these disjuncts would have contributed to one hostile each, at best,
in NOTAMPER.
In the rest of this section we will refer to exploits described in
Section 6.1 to highlight features of WAPTEC (whitebox) that en-
able it to produce better results than NOTAMPER (blackbox).
Multiple sink analysis. A single form input can be used by
the server at multiple sensitive operations and can potentially cause
problems at each such operation. The duplicate user exploit in
dcpportal demonstrates a case where a single hostile input ex-
ploited multiple sinks. When WAPTEC negated the 32 alphanu-
meric character length constraint, it produced an invalid string that
was used at two sinks. The string was ﬁrst used in a sink that
checked if a duplicate username exists in the database, and later it
was inserted into the database at a second sink. WAPTEC detected
that the malformed username was used at both sinks and reported
an exploit for each. On the contrary, NOTAMPER reported a single
vulnerability for a similar hostile input. This is because NOTAM-
PER is incapable of reasoning about multiple sinks and, therefore,
suffers from false negatives.
Negative tampering. WAPTEC showcased that it can uncover
negative tampering vulnerabilities by discovering the privilege es-
calation exploit in dcpportal. While exploring additional server-
side form processing code, WAPTEC found a conditional that de-
pended on value of a parameter make_install_prn which is not
found in the client-side formula. To explore this branch, it satis-
ﬁed the conditional by setting the cookie make_install_prn to
1. By analyzing data and control dependencies, it then determined
that this branch modiﬁes parameter values used in the sink, and
therefore, reported the exploit. NOTAMPER is inadequate to dis-
cover such exploits because that requires analysis of server-side
form processing logic to uncover hidden functionality, which is out
of scope for a blackbox tool.
Sanitization. As mentioned in Section 4.2, WAPTEC funda-
mentally avoids paths that may sanitize inputs by computing benign
inputs that satisfy fclient and hence are not needed to be sanitized.
For cases where ﬁlter functions appear in conditional expressions,
WAPTEC maps built-in functions to constraints implied by them.
In contrast, NOTAMPER is unable to detect the presence of saniti-
zation routines on the server-side beyond using simple heuristics to
guess. To account for database constraints, WAPTEC adds them
into fserver and checks for errors / warnings on database opera-
tions. Ignoring database constraints can lead to false positives e.g.,
during testing of the registration form for dcpportal, database
constraints helped to avoid a false positive. In this example, the
hostile input was produced by negating a range constraint on the
birthdate parameter in fclient, and fserver did not contain the
range constraint. The server’s response returned a success page,
so NOTAMPER recognized a vulnerability. However, the default
action by the database converted the invalid date to ’0000-00-00’.
Another example was found while testing the snipegallery ap-
Application
SnipeGallery
SPHPBlog
DcpPortal
PHPNews
Landshop
MyBloggie
Formula
Complexity
5
11
11
1
37
1
48
187 2
1
1
1
8
2
20
37
5
4
trace
Avg.
size (KB)
5
1
135
1