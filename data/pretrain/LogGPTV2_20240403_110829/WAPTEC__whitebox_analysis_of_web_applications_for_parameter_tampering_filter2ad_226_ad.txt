### Data Structures and Function Translation

Certain data structures and functions present challenges when translating to the Kaluza language. For instance, MyBloggie uses the `preg_replace` function, a regular-expression-based string replacement operation that can both accept and return arrays as arguments. Arrays are difficult to translate to Kaluza because they correspond to an unknown number of variables, while Kaluza expects a fixed number of variables in constraints. Another example is the `md5` function in the DCP-Portal application, which computes the MD5 hash of its argument and cannot be directly translated.

For constraints that cannot be translated into Kaluza’s language, WAPTEC simply omits them, resulting in a weaker constraint set. This can lead to unsoundness and incompleteness in the search for parameter tampering exploits. However, WAPTEC always verifies if the variable assignment produced by the solver satisfies the original constraints, ensuring that unsound results are not reported.

### Handling Disjunctions

WAPTEC heavily employs disjunctions, which Kaluza handles natively. However, the search for parameter tampering exploits sometimes requires finding different solutions for different disjuncts in a set of constraints—a feature Kaluza does not support. Therefore, WAPTEC manages disjunctions itself, sometimes converting them to disjunctive normal form (DNF) explicitly. In our experience, converting to DNF is usually inexpensive, despite its worst-case exponential behavior, due to the structural simplicity of the constraint sets.

### Evaluation

We evaluated the effectiveness of WAPTEC on a suite of six open-source PHP applications, chosen to reflect prevalent application domains in commonplace settings. Table 2 provides background information on these applications, including lines of code, number of files, and functionality. The test suite was deployed on a Mac Mini (1.83 GHz Intel, 2.0 GB RAM) running the MAMP application suite, and WAPTEC was deployed on an Ubuntu workstation (2.45 GHz Quad Intel, 2.0 GB RAM).

#### Experiments

We conducted two sets of experiments:
1. **First Set**: We ran WAPTEC to automatically analyze the chosen web forms and identify parameter tampering exploits.
2. **Second Set**: We ran NOTAMPER, a black-box version of WAPTEC developed in our previous work [7], on the same web forms. We compared the results to quantify the benefits of using white-box analysis over black-box analysis in the context of parameter tampering attacks.

#### Results Summary

The outcome of the first set of experiments is summarized in Table 2. We evaluated one form in each application. WAPTEC found a total of 45 exploits, which we manually verified. For each application, the last column shows the reported exploits. WAPTEC successfully generated one or more exploits for each application, highlighting a widespread lack of sufficient replication of client-side validation in the corresponding server-side code. A detailed report of the exploits can be found at http://sisl.rites.uic.edu/waptec. Below, we discuss a few interesting exploits and use them to motivate the discussion in Section 6.2, which compares WAPTEC (white-box) with NOTAMPER (black-box).

### Exploits

#### Privilege Escalation

The dcpportal application allows guests to register for an account. The registration form solicits standard information such as name, email, username, password, etc. Upon normal registration, a user is provided with an account having basic privileges. When the form is submitted, the server-side form processing code validates the provided information and checks if a cookie `make_install_prn` is set. If this cookie is set to 1, the user is registered with administrative privileges. By setting this cookie, an attacker can register an account with escalated privileges.

Discovery of this vulnerability required WAPTEC to construct a negative parameter tampering exploit. The client-side formula did not contain any restriction on the `make_install_prn` parameter, but the server-side formula checked its value. The white-box view of the server-side code enabled WAPTEC to set this additional parameter and escalate the privileges of the user being registered to an administrator.

After confirming the exploit, we analyzed the application and found that the `make_install_prn` cookie was used during initial installation to allow the creation of an administrator account. To patch this vulnerability, the application can use additional server-side state (e.g., sessions) to avoid depending solely on the cookie value or have a separate form for this purpose.

#### Duplicate Users

The dcpportal application requires unique usernames comprising up to 32 alphanumeric characters for new account registrations. The client-side allows only 32 alphanumeric characters, while the server-side enforces uniqueness by checking that the database does not contain a matching username before creating an account. During insertion of new user details, the database truncates usernames to 32 characters.

WAPTEC recognized that the server fails to enforce the length constraint before checking for existing usernames. For this vulnerability, WAPTEC generated hostile inputs that exceeded 32 characters, causing the username existence check to always return false. Additionally, the server fails to replicate the alphanumeric constraint on the username, and WAPTEC generated a hostile input containing invalid characters. Although true account duplication works only for long usernames, it is possible to create imposter accounts by appending URL-encoded whitespace to existing usernames.

#### Blog Category Hijacking

Mybloggie, a blogging application, allows registered users to submit posts to the blog. When submitting a post, users choose a category from a drop-down list of existing categories. By submitting a value not in that list, an attacker can submit posts that will appear in a category created in the future, potentially negatively impacting the quality of the future category. WAPTEC computed formulas for the form, revealing missing validation of the submitted category value by the server-side code, and exploited this by supplying an out-of-range value.

#### Additional Exploits

- **PHPNews**: A news management application allows administrators to modify certain files through a form containing the file name as a hidden field. The server-side code fails to validate the file name, allowing attackers to update existing files, create arbitrary files, or corrupt files of other applications on the same web server.
- **SnipeGallery**: A photo album application allows users to arrange albums hierarchically by selecting a parent category. By selecting a value not in the list, the new album becomes invisible, and further analysis shows that a carefully constructed parent album value leads to a SQL injection attack.
- **Landshop**: A real estate application includes a form with a hidden field. Setting this field to the ID of an existing listing deletes that listing, regardless of whether the user is the owner.
- **SPHPBlog**: A blogging application allows users to choose a language from a drop-down menu. By selecting a language value not in the menu, an attacker can make the application unusable, conducting a denial-of-service attack.

### Comparison of White-Box and Black-Box Results

The results of the comparison are summarized in Table 3. For each application, the table reports the number of confirmed exploits found by NOTAMPER (column 2) and WAPTEC (column 3). The next two columns report false positives reported by NOTAMPER, which were eliminated in WAPTEC, and false negatives reported by WAPTEC that NOTAMPER failed to find. In total, the black-box approach resulted in 23 false positives and 24 fewer confirmed exploits compared to the white-box approach.

For the dcpportal and mybloggie applications, WAPTEC found several exploitable sinks for each negated disjunct of the client-side formula. For example, for dcpportal, column 3 shows 16(32)—each hostile input generated by negating 16 client-side disjuncts was used in 2 distinct sinks, resulting in 32 exploits. All these disjuncts would have contributed to at most one hostile input in NOTAMPER.

### Features of WAPTEC

- **Multiple Sink Analysis**: A single form input can be used at multiple sensitive operations, potentially causing problems at each. The duplicate user exploit in dcpportal demonstrates this, where a single hostile input exploited multiple sinks. WAPTEC detected that the malformed username was used at both sinks and reported an exploit for each, whereas NOTAMPER reported a single vulnerability.
- **Negative Tampering**: WAPTEC uncovered negative tampering vulnerabilities, such as the privilege escalation exploit in dcpportal. By exploring additional server-side form processing code, WAPTEC found a conditional that depended on the value of a parameter not found in the client-side formula. NOTAMPER is inadequate for discovering such exploits because it does not analyze server-side form processing logic.
- **Sanitization**: WAPTEC avoids paths that may sanitize inputs by computing benign inputs that satisfy the client-side formula. For filter functions in conditional expressions, WAPTEC maps built-in functions to constraints implied by them. NOTAMPER, on the other hand, cannot detect the presence of sanitization routines beyond simple heuristics. Ignoring database constraints can lead to false positives, as seen in the dcpportal registration form testing, where database constraints helped avoid a false positive.

### Conclusion

WAPTEC's white-box approach provides significant advantages over black-box methods in detecting and preventing parameter tampering exploits. By leveraging the detailed analysis of server-side code, WAPTEC can identify and mitigate a wider range of vulnerabilities, leading to more secure and robust web applications.