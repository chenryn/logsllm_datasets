`delete`子命令是用来删除集群和虚拟机。此命令会擦除群集和虚拟机的状态，释放磁盘上先前分配的空间。下次执行`minikube start`时，将创建一个新的集群和虚拟机。当您希望在下一次调用`minikube start`时移除所有分配的资源并处理新的 Kubernetes 集群时，您应该运行`delete`子命令:
```
$ minikube delete
  Deleting 'minikube' in virtualbox ...
  The 'minikube' cluster has been deleted.
  Successfully deleted profile 'minikube'
```
有更多的 Minikube 子命令可用，但这些是您应该注意的主要命令。
在本地机器上安装并配置 Minikube 后，您现在可以安装 Kubernetes 命令行工具`kubectl`，并满足使用 Helm 工作的其余先决条件。
# 设置`kubectl`特尔
如 [*第 1 章*](01.html#_idTextAnchor017)*了解 Kubernetes 和 Helm*所述，Kubernetes 是一个暴露不同 API 端点的系统。这些应用编程接口端点用于在集群上执行各种操作，例如创建、查看或删除资源。为了提供更简单的用户体验，开发人员需要一种与 Kubernetes 交互的方式，而不必管理底层的 API 层。
虽然在本书的整个过程中，您将主要使用 Helm 命令行工具来安装和管理应用，但是`kubectl`对于常见任务来说是一个必不可少的工具。
继续阅读，了解如何在本地工作站上安装`kubectl`。注意，w 写作时使用的`kubectl`版本是`v1.16.2`。
## 安装 Kubectl
`Kubectl`可以使用 Minikube 安装或者通过包管理器或者直接下载获得。我们将首先描述如何使用 Minikube 获得`kubectl`。
### 透过 minikube 安装 kubi le
Minikube 的安装很简单。Minikube 提供了一个名为`kubectl`的子命令，它将下载 Kubectl 二进制文件。首先运行`minikube kubectl`:
```
$ minikube kubectl version
  Downloading kubectl v1.16.2
```
该命令将把`kubectl`安装到`$HOME/.kube/cache/v1.16.2`目录。请注意，路径中包含的`Kubectl`版本将取决于您正在使用的 Minikube 版本。要访问`kubectl`，可以使用以下语法:
```
          minikube kubectl --  
```
下面是一个命令示例:
```
$ minikube kubectl -- version –client
Client Version: version.Info{Major:'1', Minor:'16', GitVersion:'v1.16.2', GitCommit:'c97fe5036ef3df2967d086711e6c0c405941e14b', GitTreeState:'clean', BuildDate:'2019-10-15T19:18:23Z', GoVersion:'go1.12.10', Compiler:'gc', Platform:'linux/amd64'}
```
虽然用`minikube kubectl`调用`kubectl`就足够了，但是语法比直接调用`kubectl`更加笨拙。这可以通过将本地 Minikube 缓存中的`kubectl`可执行文件复制到由`PATH`变量管理的位置来克服。在每个操作系统上执行此操作是相似的，但以下是如何在 Linux 机器上实现此操作的示例:
```
$ sudo cp ~/.kube/cache/v1.16.2/kubectl /usr/local/bin/
```
一旦完成，`kubectl`可以作为独立的二进制文件调用，如所示:
```
$ kubectl version –client
Client Version: version.Info{Major:'1', Minor:'16', GitVersion:'v1.16.2', GitCommit:'c97fe5036ef3df2967d086711e6c0c405941e14b', GitTreeState:'clean', BuildDate:'2019-10-15T19:18:23Z', GoVersion:'go1.12.10', Compiler:'gc', Platform:'linux/amd64'}
```
### 安装不带迷你管的 kubectl
Kubectl 也可以不用 Minikube 安装。Kubernetes 上游文档为 https://kubernetes.io/docs/tasks/tools/install-kubectl/的各种 ta [目标操作系统提供了几种不同的机制。](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
### 使用包管理器
不需要 Minikube 就可以安装`kubectl`的一种方式是带有原生包管理的。下面的列表展示了如何在不同的操作系统上做到这一点:
*   使用以下命令将`kubectl`安装到 Windows 上:
    ```
    > choco install kubernetes-cli
    ```
*   使用以下命令将`kubectl`安装在 macOS 上:
    ```
    $ brew install kubernetes-cli
    ```
*   使用以下命令在基于 Debian 的 Linux 上安装`kubectl`:
    ```
    $ sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
    $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    $ echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
    $ sudo apt-get update
    $ sudo apt-get install -y kubectl
    ```
*   使用以下命令安装基于`kubectl` RPM 的 Linux:
    ```
    $ cat  /etc/yum.repos.d/kubernetes.repo
    [kubernetes]
    name=Kubernetes
    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    EOF
    $ yum install -y kubectl
    ```
接下来我们将讨论最终的 Kubectl 安装方法。
### 直接从链接下载
Kubectl 也可以直接从下载链接下载。下载链接将包含将要下载的版本的 Kubectl。您可以通过浏览器中的[https://storage . googleapis . com/kubernetes-release/release/stable . txt](https://storage.googleapis.com/kubernetes-release/release/stable.txt)来确定最新版本的 Kubectl。
以下示例说明显示了如何下载 v1.16.2 版，这是本书通篇使用的 Kubectl 版本:
*   do[从 https://storage . Google APIs . com/kubricks-release/release/v 1.1](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/windows/amd64/kubectl.exe)6.2/bin/Windows/amd64/kubrictel . exe 下载适用于 windows 的 wnload kubicl。
*   [从 https://storage . Google APIs . com/kubrintes-release/releases](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/darwin/amd64/kubectl)e/v 1 . 16 . 2/bin/Darwin/amd64/kubrictel 下载 kubectl for macos。
*   从[https://storage . googleapi . com/kubernetes-release/v 1 . 16 . 2/bin/Linux/amd64/Kubectl](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/linux/amd64/kubectl)下载 Linux 的 kube CTL。
然后，库比特二进制文件可以被移动到由`PATH`变量管理的某个地方。在 macOS 和 Linux 操作系统上，请确保授予可执行文件权限:
```
$ chmod u+x kubectl
```
可以通过运行以下命令来验证 Kubectl 安装。
```
$ kubectl version –client
Client Version: version.Info{Major:'1', Minor:'16', GitVersion:'v1.16.2', GitCommit:'c97fe5036ef3df2967d086711e6c0c405941e14b', GitTreeState:'clean', BuildDate:'2019-10-15T19:18:23Z', GoVersion:'go1.12.10', Compiler:'gc', Platform:'linux/amd64'}
```
既然我们已经介绍了如何设置`kubectl`，我们就准备进入本书的关键技术——Helm。
设置头盔
一旦安装了 Minikube 和`kubectl`，下一个要配置的逻辑工具就是 Helm。请注意，撰写本书时使用的版本的 Helm 是`v3.0.0`，但我们鼓励您使用最新版本的 Helm v3 版本来接收最新的漏洞和错误修复。
## 安装舵
Helm 软件包是为巧克力和家酿而存在的，允许在视窗或苹果电脑上轻松安装。在这些系统上，可以运行以下命令来使用包管理器安装 Helm:
*   使用以下命令在 Windows 上安装 Helm:
    ```
    > choco install kubernetes-helm     
    ```
*   使用以下命令在 macOS 上安装 Helm:
    ```
    $ brew install helm
    ```
Linux 用户，或者更愿意通过可直接下载的链接安装 Helm 的用户，可以通过以下步骤从 Helm 的 GitHub 发行版页面下载存档:
1.  Find the section called **Installati**[**on** on Helm's GitHub releases page at](https://github.com/helm/helm/releases) :
    ![Figure 2.2: The Installation section on the Helm GitHub releases page ](img/Figure_2.2.jpg)
    图 2.2:Helm GitHub 发行版页面上的安装部分
2.  下载与所需版本的操作系统相关的存档文件。
3.  一旦下载，文件将需要取消归档。实现这一点的一种方法是在 PowerShell 上使用`Expand-Archive` cmdlet 函数，或者在 Bash 上使用`tar`实用程序:
    *   对于 Windows/PowerShell，使用以下示例:
        ```
        > Expand-Archive -Path helm-v3.0.0-windows-amd64.zip -DestinationPath $DEST
        ```
    *   对于 Linux 和 Mac，使用以下示例:
        ```
        $ tar -zxvf helm-v3.0.0-linux.amd64.tgz
        ```
请务必指定与下载版本相对应的版本。`helm`二进制文件可以在未归档的文件夹中找到。应该移动到由`PATH`变量管理的位置。
以下示例向您展示了如何在 Linux 系统上将`helm`二进制文件移动到`/usr/local/bin` 文件夹:
```
$ mv ~/Downloads/linux-amd64/helm /usr/local/bin
```
无论 Helm 的安装方式如何，都可以通过运行`helm version`命令进行验证。如果结果输出与以下输出相似，则 Helm 已成功安装:
```
$ helm version
version.BuildInfo{Version:'v3.0.0', GitCommit:'e29ce2a54e96cd02ccfce88bee4f58bb6e2a28b6', GitTreeState:'clean', GoVersion:'go1.13.4'}
```
在您的机器上安装了 Helm 后，继续下一节，了解基本的 Helm 配置主题。
# 配置舵
Helm 是一个具有合理默认值的工具，允许用户在安装后无需执行大量任务的情况下提高工作效率。话虽如此，有几个不同的选项，用户可以改变或启用修改 Helm 的行为。我们将在以下几节中介绍这些选项，从上游存储库的 c 配置开始。
## 添加上游存储库
用户可以开始修改 Helm 安装的一种方式是添加上游图表存储库。在 [*第 1 章*](01.html#_idTextAnchor017)*理解 Kubernetes 和 Helm*中，我们描述了图表存储库如何包含 Helm 图表，这些图表用于打包 Kubernetes 资源文件。Helm 作为 Kubernetes 包管理器，可以连接到各种图表存储库来安装 Kubernetes 应用。
Helm 提供了`repo`子命令，允许用户管理已配置的图表库。此子命令包含可用于对指定存储库执行操作的附加子命令。
以下是五个`repo`子命令:
*   `add`:添加图表库
*   `list`:列出图表库
*   `remove`:移除图表库
*   `update`:从图表库本地更新可用图表的信息
*   `index`:给定包含打包图表的目录，生成索引文件
以前面的列表为指导，添加图表库可以使用`repo add`子命令完成，如图所示: