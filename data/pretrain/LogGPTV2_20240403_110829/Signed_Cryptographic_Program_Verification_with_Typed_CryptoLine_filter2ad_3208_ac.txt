Γ ⊢ a : σ
σ∥ρ
SSbbs
Γ ⊢ a0 : σ
Γ ⊢ a1 : σ
σ∥ρ
Γ ⊢ smull vH vL a0 a1 ⇒ Γ ⊎ {vH : σ , vL : ρ}
SMull
SCShl
UMul
Γ ⊢ a1 : ρ
Γ ⊢ aL : ρ
Γ ⊢ a0 : ρ
Γ ⊢ aH : ρ
Γ ⊢ umul v a0 a1 ⇒ Γ ⊎ {v : ρ}
Γ ⊢ ujoin v aH aL ⇒ Γ ⊎ {v : 2 • ρ}
Γ ⊢
UJoin
Γ ⊢ a0 : σ
Γ ⊢ a1 : σ
SMul
Γ ⊢ smul v a0 a1 ⇒ Γ ⊎ {v : σ}
Γ ⊢ aH : σ
σ∥ρ
Γ ⊢ sjoin v aH aL ⇒ Γ ⊎ {v : 2 • σ}
Γ ⊢ aL : ρ
Γ ⊢ inst ⇒ Γ′
Empty
Γ ⊢ inst insts ⇒ Γ′′
Figure 4: CryptoLine Type Inference
SJoin
⇒ Γ
Γ′ ⊢ insts ⇒ Γ′′
Γ ⊢ assert P ∧∧ Q ⇒ Γ
Γ ⊢ assume P ∧∧ Q ⇒ Γ
Inst
Assert
Assert
for v with the bit string representing the value of a in the type of v.
Similarly, cmov v c a0 a1 updates v with the bit string representing
the value of a0 or a1 depending on the value of the bit c.
Unsigned addition instructions are essentially those in [18] en-
riched with typing information. uadd v a0 a1 updates the bit string
for v with the bit string representing the sum of a0 and a1 if the
sum is representable in the type of v; otherwise, the instruction
yields the error environment ⊥. The addition with carry instruction
uadc v a0 a1 d updates the bit string for v with the bit string repre-
senting the sum of a0, a1, d if the sum is representable in the type
of v; otherwise, it yields the error environment. Carrying addition
instructions uadds c v a0 a1 and uadcs c v a0 a1 d never err. The
bit c is 1 iff the sum is not representable in the unsigned type of v.
The signed uncarrying addition instructions sadd v a0 a1 and
sadc v a0 a1 d are similar. If the sum is representable in the signed
type of v, the bit string for v is updated accordingly. Otherwise,
these instructions yield the error environment. The signed carry-
ing addition instructions are slightly curious. The sadds c v a0 a1
instruction updates the bit string for v if the sum of a0 and a1 is
representable in the type σ of v. In contrast to its unsigned coun-
terpart, sadds will yield the error environment when the sum is
not representable in σ. Moreover, the carrying bit c is computed
by interpreting the bit strings of a0 and a1 in the unsigned type
ρ compatible with σ. If the sum in the unsigned interpretation is
representable in ρ, the carrying bit c is set to 0; otherwise, it is set to
1. In assembly, the carry flag is computed as if sources are unsigned
since there is no typing information. Our bit-accurate semantics
is designed to mimic the semantics of assembly instructions. The
semantics of the signed carrying addition with carry instruction
sadcs c v a0 a1 d is defined similarly.
Unsigned subtraction instructions usub v a0 a1, usubs c v a0 a1,
usbb v a0 a1 d, and usbbs c v a0 a1 d again are similar to those
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1596[[v]]τ
ϵ
mov v a
ϵ = the value represented by ϵ(v) in τ for v ∈ Var
−−−−−−−−−−−→ ϵ[v (cid:55)→ [[a]]τ
ϵ]
−−−−−−−−−−−→ ϵ[v (cid:55)→ V]
cmov v c a0 a1
−−−−−−−−−−−→ ϵ′
uadd v a0 a1
−−−−−−−−−−−→ ϵ[c, v (cid:55)→ C, V]
uadds c v a0 a1
−−−−−−−−−−−→ ϵ′
uadc v a0 a1 d
−−−−−−−−−−−→ ϵ[c, v (cid:55)→ C, V]
uadcs c v a0 a1 d
−−−−−−−−−−−→ ϵ′
sadd v a0 a1
−−−−−−−−−−−→ ϵ′
sadds c v a0 a1
−−−−−−−−−−−→ ϵ′
sadc v a0 a1 d
−−−−−−−−−−−→ ϵ′
sadcs c v a0 a1 d
−−−−−−−−−−−→ ϵ′
usub v a0 a1
−−−−−−−−−−−→ ϵ[c, v (cid:55)→ C, V]
usubs c v a0 a1
−−−−−−−−−−−→ ϵ′
usbb v a0 a1 d
−−−−−−−−−−−→ ϵ[c, v (cid:55)→ C, V]
usbbs c v a0 a1 d
−−−−−−−−−−−→ ϵ′
ssub v a0 a1
−−−−−−−−−−−→ ϵ′
ssubs c v a0 a1
−−−−−−−−−−−→ ϵ′
ssbb v a0 a1 d
−−−−−−−−−−−→ ϵ′
ssbbs c v a0 a1 d
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
ϵ
(cid:26) [[a0]]τ
ϵ
ϵ
[[c@τ]]τ
ϵ = c for c@τ ∈ Const
(v, a : τ)
C =
C =
ϵ , σ∥ρ,
(c : bit; v, a0, a1 : τ) V =
(cid:26) 0
(cid:26) 0
[[a1]]τ
ϵ + [[a1]]ρ
(v, a0, a1 : ρ) V = [[a0]]ρ
ϵ + [[a1]]ρ
˜V = [[a0]]ρ
(c : bit; v, a0, a1 : ρ)
ϵ + [[a1]]ρ
(v, a0, a1 : ρ; d : bit) V = [[a0]]ρ
ϵ + [[a1]]ρ
(c, d : bit; v, a0, a1 : ρ)
˜V = [[a0]]ρ
(v, a0, a1 : σ) V = [[a0]]σ
ϵ + [[a1]]σ
ϵ + [[a1]]σ
(c : bit; v, a0, a1 : σ) V = [[a0]]σ
if U < ρ
1
otherwise
ϵ + [[a1]]σ
(v, a0, a1 : σ; d : bit) V = [[a0]]σ
(c, d : bit; v, a0, a1 : σ) V = [[a0]]σ
ϵ + [[a1]]σ
if U < ρ
1
otherwise
(v, a0, a1 : ρ) V = [[a0]]ρ
ϵ − [[a1]]ρ
˜V = [[a0]]ρ
ϵ − [[a1]]ρ
(c : bit; v, a0, a1 : ρ)
ϵ − [[a1]]ρ
(v, a0, a1 : ρ; d : bit) V = [[a0]]ρ
(c, d : bit; v, a0, a1 : ρ)
˜V = [[a0]]ρ
ϵ − [[a1]]ρ
(v, a0, a1 : σ) V = [[a0]]σ
ϵ − [[a1]]σ
(c : bit; v, a0, a1 : σ) V = [[a0]]σ
ϵ − [[a1]]σ
if ρ < U
otherwise
ϵ − [[a1]]σ
ϵ − [[a1]]σ
if ρ < U
otherwise
1
(v, a0, a1 : σ; d : bit) V = [[a0]]σ
(c, d : bit; v, a0, a1 : σ) V = [[a0]]σ
(cid:26) 0
(cid:26) 0
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) (0, ˜V)
⊥
(1, ˜V − ρ)
ϵ and ϵ′ =
⊥
ϵ and (C, V) =
if [[c]]bit
ϵ = 1
if [[c]]bit
ϵ = 0
ϵ and ϵ′ =
ϵ ,(C, V) =
ϵ + [[d]]bit
ϵ + [[d]]bit
ϵ and ϵ′ =
ϵ , U = [[a0]]ρ
and ϵ′ =
⊥
ϵ and ϵ′ =
ϵ , U = [[a0]]ρ
ϵ + [[d]]bit
ϵ + [[d]]bit
⊥
ϵ + [[a1]]ρ
⊥
ϵ + [[a1]]ρ
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) (0, ˜V)
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[c, v (cid:55)→ C, V]
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[c, v (cid:55)→ C, V]
(cid:26) ϵ[v (cid:55)→ V]
(cid:40) (0, ˜V)
(cid:26) ϵ[v (cid:55)→ V]
(cid:40) (0, ˜V)
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[c, v (cid:55)→ C, V]
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[c, v (cid:55)→ C, V]
⊥
ϵ − [[a1]]ρ
⊥
ϵ − [[a1]]ρ
ϵ and ϵ′ =
⊥
ϵ and (C, V) =
ϵ and ϵ′ =
⊥
ϵ and (C, V) =
ϵ − [[d]]bit
ϵ − [[d]]bit
ϵ and ϵ′ =
ϵ , U = [[a0]]ρ
and ϵ′ =
⊥
ϵ and ϵ′ =
ϵ , U = [[a0]]ρ
ϵ − [[d]]bit
ϵ − [[d]]bit
(1, ˜V + ρ)
and ϵ′ =
ϵ , σ∥ρ,
C =
C =
⊥
if V < ρ
otherwise
if ˜V < ρ
otherwise
if V < ρ
otherwise
if ˜V < ρ
otherwise
(1, ˜V − ρ)
if σ < V < σ
otherwise
if σ < V < σ
otherwise
if σ < V < σ
otherwise
ϵ , σ∥ρ,
if σ < V < σ
otherwise
ϵ + [[d]]bit
if ρ < V
otherwise
if ρ < ˜V
otherwise
if ρ < V
otherwise
if ρ < ˜V
otherwise
(1, ˜V + ρ)
if σ < V < σ
otherwise
if σ < V < σ
otherwise
if σ < V < σ
otherwise
ϵ , σ∥ρ
if σ < V < σ
otherwise
1
−−−−−−−−−−−→ ϵ′
(v, a : ρ) V = [[a]]ρ
ushl v a n
−−−−−−−−−−−→ ϵ′
(v, a : σ) V = [[a]]σ
sshl v a n
−−−−−−−−−−−→ ϵ′
(v, a0, a1 : ρ) V = [[a0]]ρ
umul v a0 a1
−−−−−−−−−−−→ ϵ′
(v, a0, a1 : σ) V = [[a0]]σ
smul v a0 a1
(vH , vL, a0, a1 : ρ) V = [[a0]]ρ
−−−−−−−−−−−→ ϵ[vH , vL (cid:55)→ VH , VL]
umull vH vL a0 a1
−−−−−−−−−−−→ ϵ[vH , vL (cid:55)→ VH , VL](vH , a0, a1 : σ; vL : ρ, σ∥ρ) V = [[a0]]σ
smull vH vL a0 a1
ϵ × 2n and ϵ′ =
ϵ × 2n and ϵ′ =
ϵ × [[a1]]ρ
ϵ × [[a1]]σ
ϵ × [[a1]]ρ
ϵ × [[a1]]σ
Figure 5: CryptoLine Semantics
ϵ − [[d]]bit
⊥
and ϵ′ =
if V < ρ
otherwise
if σ < V < σ
otherwise
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[v (cid:55)→ V]
(cid:26) ϵ[v (cid:55)→ V]
⊥
⊥
if V < ρ
ϵ and ϵ′ =
otherwise
if σ < V < σ
ϵ and ϵ′ =
otherwise
ϵ , VH × ρ + VL = V and ρ < VL < ρ
ϵ , VH × ρ + VL = V and ρ < VL < ρ
⊥
⊥
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1597in [18]. For usub and usbb, the error environment is yielded if the
difference is negative. On the other hand, the usubs and usbbs
instructions never yield the error environment. The signed subtrac-
tion instructions follow a similar line as signed addition instructions.
ssub v a0 a1 and ssbb v a0 a1 d update the bit string for v if the dif-
ferences a0 − a1 and a0 − a1 −d are representable in the signed type
of v respectively. Otherwise, both instructions yield the error envi-
ronment. The borrowing subtraction instructions ssubs c v a0 a1
and ssbbs c v a0 a1 d still yield the error environment if the differ-
ences are not representable in the type σ of v. Otherwise, the bit
string for v is updated with the bit string representing differences
in σ. The borrowing bit c moreover is updated as if the sources are
unsigned. This is the semantics consistent with assembly as well.
The left-shift (ushl v a n, sshl v a n) and half-multiplication
(umul v a0 a1, smul v a0 a1) instructions are as usual. If the result
is representable in the type τ of v, the bit string for v is updated
with the bit string representing the result interpreted in the type τ.
Otherwise, the error environment is yielded.
Recall that the product of two integers representable in the type
τ is representable in the type 2•τ. In full-multiplication, the product
is splitted into two parts and stored in two destinations of types
compatible with τ. The following lemma will be useful in defining
the semantics of full-multiplication instructions.
Lemma 3.1. Consider bit strings b = (bw−1bw−2 · · · b0)2 of length
w, bH = (bw−1bw−2 · · · bk +1bk)2, and bL = (bk−1bk−2 · · · b0)2 with
0 ≤ k < w. Let [[b]]τ be the value represented by b in the type τ .
(1) [[b]]uint w = 2k × [[bH]]uint (w−k) + [[bL]]uint k ; and
(2) [[b]]sint w = 2k × [[bH]]sint (w−k) + [[bL]]uint k .
Lemma 3.1 shows how to split a bit string of length w in differ-
ent interpretations into bit strings of lengths w − k and k. If the
interpretation is unsigned, both the w − k most significant bits and
k least significant bits use the unsigned interpretation. On the other
hand, if the interpretation is signed, then the w − k most significant
bits use the signed representation but the k least significant bits
use the unsigned interpretation.
With Lemma 3.1, it is now easy to explain the semantics of full-
multiplication instructions. For the unsigned full-multiplication
instruction umull vH vL a0 a1, the product of a0 and a1 is written
as VH × ρ + VL where vH , vL, a0, a1 are of the type ρ and VL is
representable in ρ. The values VH and VL are thus representable in
ρ and stored in vH and vL respectively. For the signed instruction
smull vH vL a0 a1 with vH , a0, a1 : σ, vL : ρ, and σ∥ρ, the product
of a0 and a1 is written as VH × ρ +VL where VL is representable in ρ.