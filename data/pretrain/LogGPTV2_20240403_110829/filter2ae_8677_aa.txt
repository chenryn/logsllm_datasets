虽说weblogic xmldecoder的洞是几年前的，但是之前内外网场景下老是遇到，大多数情况是
**不出网、不方便写webshell(weblogic负载均衡，轮询)** 场景，需要解决的问题就是 **回显构造和内存马的植入**
。所以想花个时间来总结一下。
而说到回显、内存马植入的文章网上越来越多，看了文章都知道有哪些方法，比如回显问题大多数都知道有找request、URLClassloader报错、rmi调用那些，一说内存马都知道servlet、filter、listener马，都知道怎么去写个Demo。
但是实际结合到场景去做总是会遇到一些问题，所以自己想着还是多动手实践，毕竟 **talk is cheap** 。
**个人水平较差、文中错误内容还请师傅们指教纠正。**
##
##
##
# 0x01 weblogic xmldecoder 反序列化漏洞
debug 环境搭建:
修改 domain 的 bin 目录下面的 startWebLogic.cmd 文件，在前边部分加上以下行：
set JAVA_OPTIONS=-Xdebug -Xnoagent -Djava.compiler=NONE
-Xrunjdwp:transport=dt_socket,address=9999,server=y,suspend=n
之后就是常规添加libraries和weblogic服务器就不截图了，写个filter断点测试下:
涉及CVE:
  * CVE-2017-3506
  * CVE-2017-10271
  * CVE-2019-2725
三个CVE都是对最初漏洞的不停绕过，`CVE-2017-3506`修补方案为禁用 `object`
标签，CVE-2019-2725，由于组件_async存在反序列化。
原理简单说就是WLS
Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞
##
##
## CVE-2017-10271 简单流程
这个洞网上很多过程文章，不贴过程了
##
简单跟一下,
处理是在`readHeaderOld`方法，进入到`weblogic.wsee.jaxws.workcontext.WorkContextTube#readHeaderOld`后ByteArrayOutputStream
bao为实际传入获内存缓冲区的数据，转换成字节数组，在使用`WorkContextXmlInputAdapter`时又把字节数组用`ByteArrayInputStream`转化为输入流，最后转成XmlDecoder对象
最后跟到readUTF函数中调用readObject( )方法进行反序列化操作，代码执行。
##
### payload中的xmlencoder 标签
文档:[XMLEncoder (Java SE 9 & JDK 9 )
(oracle.com)](https://docs.oracle.com/javase/9/docs/api/java/beans/XMLEncoder.html)
因为这三个cve都是针对前面的绕过
CVE-2017-10271是通过`void`、`new`标签对CVE-2017-3506补丁的绕过。标签这里也不贴那么多了，可以看已有的文章对标签的解释：
  * 
  * 
最早poc使用object 标签来表示对象:
                                cmd.exe
                                /c
                                calc.exe
一些payload中常用的标签：
object或void标签用于初始化对象，属性class的值是初始化对象所属的类
函数调用使用void 标签，属性method的值是调用的方法
    a.fun1("haha").fun2()
        haha
    #如果func1、func2是a.func1;a.func2这种只需要把 写在第一对void标签外即可，表平行的关系。
id或者idref标签是进行标记，和引用标记的
     #对属性进行了id标记
    #引用了id为className的对象
##
### 为啥可以使用`void,new`标签替换？
XMLDecoder对每种支持的标签都实现了一个继承了`ElementHandler`的类，在`DocumentHandler`的构造函数中就可以看到，写个XMLDecode测试，跟进XMLDecoder的readObject函数，随后跟入parsingComplete函数，再到parse函数，最后一路跟到javax.xml.parsers.SAXParserFactory#newSAXParser可以看到this.handlers参数包含了所有元素对应的解析器：
而在绕过中可以使用`void,new`标签替换即可，能等效替换的原因是处理`void、new`的标签`NewElementHandler、ObjectElementHandler`最后都是调用`newelementhandler`的`addAttribute`方法获得类：
具体xmldecoder解密流程可以参加这篇师傅的文章，
##
##
# 0x02 Weblogic xmldecoder反序列命令回显构造
这个部分我把如何找回显和构造通用回显(找上下文)的过程贴详细在这里，可能啰嗦，但是理解后，可以把通用回显和打入通用内存马的payload都构造出来，因为都会用到上下文的部分。
#
**测试环境为 10版本: 10.3.6 12版本 12.1.3**
##
**后面说的"通用"回显只是这两个大版本，附近版本基本都适用，但是不是所有版本，比如12.2.1.4之后就不能用xx类来构造，这个就未测试了，请勿杠.**
##
通用的获得回显的思路就是获取当前web上下文对象，比如request和response来设置传入和响应的内容，有的中间件一般存储在当前线程对象中，又或者存储在静态变量或者特定类里。获取的流程大致是从web中获取当前上下文对象（response、context、writer等）然后拿到回显，而在weblogic中的`ServletResponse`类，其中的`getWriter`和`getOutputStream`方法可以进行输出回显。
##
## weblogic 输入接受类ServletRequestImpl
`weblogic.servlet.internal.ServletRequestImpl`提供了接收参数、请求头等输入方式的函数：
不过在xml反序列这几个洞中这个输入类都用不到，因为我们反序列化时候本来就可以调用xx类的xx方法进行参数的传入(比如传入执行的命令whoami)。
##
## weblogic 回显输出类ServletResponseImpl
10和12中都有`weblogic.servlet.internal.ServletResponseImpl`这个类，其中的`getServletOutputStream`和`getWriter`可作为输出：
测试输出：
如上，只要拿到了`ServletResponseImpl`类即可完成后续执行回显，但是weblogic 12
和10中拿到`ServletResponseImpl`的流程和方法是不一样的，以至于回显payload大多数不通用，拿@shack2师傅写过的工具举例子。
##
## weblogic 10 和 weblogic 12 构造回显差别：
常见payload为dnslog出网探测、Linux反弹shell，稍微方便一些的就是执行命令带回显，比如shack2的工具:
调一下工具查看它发送的的payload，先来看weblogic 12
##
## weblogic12 命令回显调试:
exeCMD方法下断：
复制值出来：
发送的payload如上，可以看到还是调用了`org.mozilla.classfile.DefiningClassLoader`类的defineClass函数来传入自定义的恶意类，利用defineClass加载byte[]返回Class对象，很多poc调用`DefiningClassLoader`类的原因是他重写了`defineClass`而且是`public`属性，通过newInstance方法实例化恶意类并调用相应方法，解码了反编译查看就是个命令执行的马：
主要看这里他工具中weblogic12 版本怎么拿到的`ServletResponseImpl`类：
    ProcessBuilder processBuilder = new ProcessBuilder(cmds);
            processBuilder.redirectErrorStream(true);
            Process proc = processBuilder.start();
            ServletResponseImpl response = this.getServletResponse();
            response.getServletOutputStream().writeStream(proc.getInputStream());
            this.getServletResponse().getWriter().flush();
可以看到在`ServletResponseImpl response =
this.getServletResponse();`拿到的`ServletResponseImpl`，跟进getServletResponse()，发现在`getHttpConnectionHandler`中拿到了`HttpConnectionHandler`：
##
### 为啥在weblogic12中需要拿到HttpConnectionHandler类？
跟进了一下发现,在`weblogic.servlet.internal.HttpConnectionHandler`中是有获得`ServletRequestImpl、ServletRequestImpl`类的私有成员的：
对应获取的`getServletRequest、getServletResponse`方法：
所以，只要拿到HttpConnectionHandler中getServletResponse方法就能拿到`ServletResponseImpl`这个类，最后实例化后执行`getServletOutputStream`和`getWriter`方法即可拿到回显。
再回到刚才payload中的getHttpConnectionHandler方法，获取了当前线程对象后进行了一个反射取字段的操作：
##
### 为啥在拿到HttpConnectionHandler类的时候需要反射connectionHandler字段？
如上图，当时看的时候疑惑这里反射获取`connectionHandler`字段的原因，所以自己调试一下发现`getCurrentWork`获取的是`ContainerSupportProviderImpl`：
跟进`ContainerSupportProviderImpl`类，查找`connectionHandler`字段，发现在`WlsRequestExecutor`这个内部类中，而拿到connectionHandler字段可以拿到`HttpConnectionHandler`类：
调试完了回到刚才的`getServletResponse`中，通过如上对ContainerSupportProviderImpl`类的connectionHandler`字段的获取，就能拿到`HttpConnectionHandler`类，然后通过`response
=
httpConnectionHandler.getServletRequest().getResponse();`，就能拿到response了，自然后面就能拿到回显：
后面搜文章也发现lufei师傅在,  
中构造回显也说过这个12中回显构造方法，说的很清楚，因为没有`getter`方法，所以无法使用`property="connectionHandler"`属性，只能通过反射的方式去获取这个属性。
##
### 所以工具中weblogic12 获取回显的思路：
  * 调用`org.mozilla.classfile.DefiningClassLoader`来加载恶意的自定义类
  * 恶意的自定义类中使用当前线程类获得`ContainerSupportProviderImpl`类，通过对`ContainerSupportProviderImpl`类`connectionHandler`字段的反射获得了`HttpConnectionHandler`类，再有`HttpConnectionHandler`类的`getServletResponse`方法就能拿到`ServletResponseImpl`类来完成后面的回显。
### ps:
工具中是通过base64将自定义恶意类的字节数组传入到classloader中再解密的，如果实战中有环境拦截这部分特征的话也很好改，换传入的格式就行，例子`weblogic.utils.Hex`中自带的`的fromHexString`也可以拿来做接受类字节数组的解码方法。payload中传入类字节数组的hex格式再调用`weblogic.utils.Hex#fromHexString`还原即可：
自定义恶意类：