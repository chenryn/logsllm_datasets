# Userland Commands and Kernel Rootkits in macOS

## Userland Commands
- **Dynamic Library:**
  - Use Xcode's template.
  - Add a constructor.
  - Utilize `fork`, `exec`, `system`, or threads as needed.
  - Ensure to clean up library traces.

**Note:** "I never leave footprints!"

### Issues with This Technique:
- Requires the library to be on disk (can be unpacked from a rootkit and removed if necessary).
- Needs to kill a process (but can be used to infect specific processes when started).
- The `proc` structure is not stable (use a disassembler to get field offsets).

## Hide & Seek
- **macOS Instrumentation Features:**
  - DTrace
  - FSEvents
  - kauth
  - kdebug
  - TrustedBSD
  - Auditing
  - Socket filters

### Focus on DTrace's syscall Provider
- Nemo presented DTrace rootkits at Infiltrate.
- Siliconblade with Volatility can detect them, but Volatility is vulnerable to an old trick.

#### DTrace's Syscall Provider
- Traces every syscall entry and exit.
- `mach_trap` is the Mach equivalent provider.
- DTrace's philosophy ensures zero probe effect when disabled.
- Activation of this provider is equivalent to `sysent` hooking.
- Modifies the `sy_call` pointer inside the `sysent` struct.

### Detection and Limitations
- Not very useful for detecting `sysent` hooking; the `fbt` provider is better (check SyScan slides).
- Nemo's DTrace rootkit uses the syscall provider.
- Can be detected by dumping the `sysent` table and verifying if `_dtrace_systrace_syscall` is present.
- False positives are low probability.

**Nemo's presentation highlights that known tools can be used to subvert a system and may not be easily spotted by a novice investigator. However, nothing can hide in memory.**

- It's easy to find what you know, but how about what you don't?
- `Sysent` hooking is easily detected by memory forensics (assuming you can get a memory dump).
- Fails at the old `sysent` shadowing trick.

**References:**
- [Hunting D-Trace Rootkits with Volatility](http://siliconblade.blogspot.com/2013/04/hunting-d-trace-rootkits-with.html)
- [Offensive Volatility: Messing with OS X](http://siliconblade.blogspot.pt/2013/07/offensive-volatility-messing-with-os-x.html)

## Shadow `sysent`
- Volatility plugins can easily find `sysent` table modifications but fail to detect a shadow `sysent` table.
- Extremely easy to implement with the kernel disassembler.

### Implementation Steps:
1. Find the `sysent` table address via IDT and brute force, or another technique.
   - Warning: Mavericks has a modified `sysent` table.
2. Use the address to find the location in the `__got` section.
3. Disassemble the kernel and find references to the `__got` address.
4. Allocate memory and copy the original `sysent` table.
5. Find space inside the kernel to add a pointer (modifying `__got` is too noisy).
6. Install a pointer to the copied `sysent` table.
7. Modify found references to the `__got` pointer to the new pointer.
8. Hook syscalls in the shadow table.

## Advantages and Disadvantages
- Many instrumentation features available.
- Do not forget them if you are an evil rootkit coder.
- Helpful for a quick assessment if you are a potential victim.
- Be very careful with tool assumptions.

## Checkpoint: Zombies
- **Create a Kernel Memory Leak:**
  - Using one of the dynamic memory functions: `kalloc`, `kmem_alloc`, `OSMalloc`, `MALLOC/FREE`, `_MALLOC/_FREE`, `IOMalloc/IOFree`.
  - No garbage collection mechanism.
  - Find the rootkit’s Mach-O header and compute its size (`__TEXT + __DATA` segments).

### Fix Symbols Offsets
- Kexts have no symbol stubs like most userland binaries.
- Symbols are resolved when the kext is loaded.
- RIP addressing is used (offset from kext to kernel).
- When copying to the zombie area, these offsets are wrong.

### Steps to Fix Symbols Offsets
1. Have a table with all external symbols or dynamically find them (read rootkit from disk).
2. Lookup each kernel symbol address.
3. Disassemble the original rootkit code address and find references to the original symbol.
4. Find `CALL` and `JMP` and check if the target is the symbol.
5. Compute the distance to the start address from `CALL`s in the original and add it to the zombie start address.
6. Now, you have the location of each symbol inside the zombie and can fix the offset back to the kernel symbol.

### Redirect Execution to Zombie
- Hijack some function and have it execute a zombie start function.
- Or start a new kernel thread with `kernel_thread_start`.

### Return `KERN_FAILURE`
- Original kext must return a value.
- If you return `KERN_SUCCESS`, the kext will be loaded and you need to hide or unload it.
- If you return `KERN_FAILURE`, the kext will fail to load and macOS will clean it up.
- No need to hide from `kextstat` as there are no kext-related structures.
- Wipe out the zombie Mach-O header, leaving only code/data in kernel memory.

**Advantages:**
- Harder to find (easier now because I'm telling you).
- It's fun!

## Problems
- **Unstable Internal Structures:**
  - `Proc` structure is one of those.
  - We just need a few fields.
  - Find offsets by disassembling stable functions.
  - Possible, but requires time spent grep'ing around XNU source code and IDA.

- **Memory Forensics:**
  - A worthy rootkit enemy but with its own flaws.
  - Acquisition process has weak assumptions.
  - Needs more features.

- **Other Issues:**
  - It's a cat & mouse game.
  - Any mistake can be costly.
  - When creating a rootkit, reduce the number of assumptions.
  - Defenders face the unknown.
  - Very hard game – abuse their assumptions.

## Conclusions
- Improving the quality of macOS kernel rootkits is easy.
- Stable and future-proof requires more work.
- Prevention and detection tools must be researched and developed.
- The kernel is sexy, but don't forget userland.
- OS.X/Crisis userland rootkit is powerful.
- Easier to hide in userland from memory forensics.

- Attackers have better incentives to be creative.
- Defense will always lag and suffer from information asymmetry.
- Economics didn't solve this problem, and InfoSec won't either (because it's connected to economics and money).
- Always question assumptions. This presentation has a few ;-).

**Practice makes perfection!**

## Greets
- nemo, noar, snare, saure, od, emptydir, korn, g0sh, spico, and all other put.as friends.
- Everyone at COSEINC, thegrugq, diff-t, #osxre, Gil Dabah from diStorm, A. Ionescu, Igor from Hex-Rays, NSA & friends, and you for spending time listening to me J.

## We Are Hiring!
- **Software Engineers:**
  - Based in Singapore.
  - 2 years of experience.
  - Proficient in C and Python.
  - Good communication in English.
  - Monthly salary: $80,000 NT.
  - Housing provided.
  - 2-year contract.

[Reverse.put.as](http://reverse.put.as)  
[GitHub: gdbinit](http://github.com/gdbinit)  
[Email: PI:EMAIL]  
[Twitter: @osxreverser]  
[IRC: #osxre @ irc.freenode.net]  
[Website: iloverootkits.com (maybe soon!)]  

**End! At last… Have fun! A day full of possibilities! Let's go exploring!**