                exit(-1);
            }
        }
    }
# 如何绕过NtGlobalFlag检查
若要绕过NtGlobalFlag检查，只需执行逆向检查之前执行的操作；换句话说，在通过反调试保护检查此值之前，将已调试进程的PEB结构的NtGlobalFlag字段设置为0。
# NtGlobalFlag和IMAGE_LOAD_CONFIG_DIRECTORY
可执行文件包含IMAGE_LOAD_DB2IGDIRECTY结构，该结构包含系统加载程序的其他配置参数。默认情况下，此结构不会内置到可执行文件中，但可以使用修补程序将其添加到可执行文件中。此结构具有GlobalFlagsClear字段，该字段指示应重置PEB结构的NtGlobalFlag字段的哪些标志。如果最初创建可执行文件时没有上述结构或GlobalFlagsClear=0，而在磁盘或内存中，则该字段将有一个非零值，表示存在隐藏的调试器正在工作。下面就是检查运行进程的内存和磁盘上的GlobalFlagsClear字段的代码，这是一种非常流行的反调试技术：
    PIMAGE_NT_HEADERS GetImageNtHeaders(PBYTE pImageBase)
    {
        PIMAGE_DOS_HEADER pImageDosHeader = (PIMAGE_DOS_HEADER)pImageBase;
        return (PIMAGE_NT_HEADERS)(pImageBase + pImageDosHeader->e_lfanew);
    }
    PIMAGE_SECTION_HEADER FindRDataSection(PBYTE pImageBase)
    {
        static const std::string rdata = ".rdata";
        PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pImageBase);
        PIMAGE_SECTION_HEADER pImageSectionHeader = IMAGE_FIRST_SECTION(pImageNtHeaders);
        int n = 0;
        for (; n FileHeader.NumberOfSections; ++n)
        {
            if (rdata == (char*)pImageSectionHeader[n].Name)
            {
                break;
            }
        }
        return &pImageSectionHeader[n];
    }
    void CheckGlobalFlagsClearInProcess()
    {
        PBYTE pImageBase = (PBYTE)GetModuleHandle(NULL);
        PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pImageBase);
        PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pImageBase
            + pImageNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress);
        if (pImageLoadConfigDirectory->GlobalFlagsClear != 0)
        {
            std::cout PointerToRawData + pImageSectionHeader->SizeOfRawData);
            if (NULL == pMappedImageBase) __leave;
            PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pMappedImageBase);
            PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pMappedImageBase 
                + (pImageSectionHeader->PointerToRawData
                    + (pImageNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress - pImageSectionHeader->VirtualAddress)));
            if (pImageLoadConfigDirectory->GlobalFlagsClear != 0)
            {
                std::cout  dt _PEB ProcessHeap @$peb
    ntdll!_PEB
       +0x018 ProcessHeap : 0x00440000 Void
    0:000> dt _HEAP Flags ForceFlags 00440000 
    ntdll!_HEAP
       +0x040 Flags      : 0x40000062
       +0x044 ForceFlags : 0x40000060
对于64位进程
    0:000> dt _PEB ProcessHeap @$peb
    ntdll!_PEB
       +0x030 ProcessHeap : 0x0000009d`94b60000 Void
    0:000> dt _HEAP Flags ForceFlags 0000009d`94b60000
    ntdll!_HEAP
       +0x070 Flags      : 0x40000062
       +0x074 ForceFlags : 0x40000060
如果正在调试进程，则两个字段Flags和ForceFlags都具有特定的调试值：  
1.如果Flags字段没有设置HEAP_GROWABLE（0x00000002）标识，则正在调试进程。
2.如果ForceFlags！= 0，则正在调试进程。
不过要注意的是，`_HEAP`结构并未记录，并且`Flags`和`ForceFlags`字段的偏移值可能因操作系统版本而异。以下代码就是基于HeapFlag检查的反调试保护：
    int GetHeapFlagsOffset(bool x64)
    {
        return x64 ?
            IsVistaOrHigher() ? 0x70 : 0x14: //x64 offsets
            IsVistaOrHigher() ? 0x40 : 0x0C; //x86 offsets
    }
    int GetHeapForceFlagsOffset(bool x64)
    {
        return x64 ?
            IsVistaOrHigher() ? 0x74 : 0x18: //x64 offsets
            IsVistaOrHigher() ? 0x44 : 0x10; //x86 offsets
    }
    void CheckHeap()
    {
        PVOID pPeb = GetPEB();
        PVOID pPeb64 = GetPEB64();
        PVOID heap = 0;
        DWORD offsetProcessHeap = 0;
        PDWORD heapFlagsPtr = 0, heapForceFlagsPtr = 0;
        BOOL x64 = FALSE;
    #ifdef _WIN64
        x64 = TRUE;
        offsetProcessHeap = 0x30;
    #else
        offsetProcessHeap = 0x18;
    #endif
        heap = (PVOID)*(PDWORD_PTR)((PBYTE)pPeb + offsetProcessHeap);
        heapFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapFlagsOffset(x64));
        heapForceFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapForceFlagsOffset(x64));
        if (*heapFlagsPtr & ~HEAP_GROWABLE || *heapForceFlagsPtr != 0)
        {
            std::cout << "Stop debugging program!" << std::endl;
            exit(-1);
        }
        if (pPeb64)
        {
            heap = (PVOID)*(PDWORD_PTR)((PBYTE)pPeb64 + 0x30);
            heapFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapFlagsOffset(true));
            heapForceFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapForceFlagsOffset(true));
            if (*heapFlagsPtr & ~HEAP_GROWABLE || *heapForceFlagsPtr != 0)
            {
                std::cout << "Stop debugging program!" << std::endl;
                exit(-1);
            }
        }
    }
# 如何绕过Heap Flags和ForceFlags检查
为了避开基于HeapFlag检查的反调试保护，应该为Flags字段设置HEAP_GROWABLE标识，然后将ForceFlags的值设置为0。值得一提的是，字段值的重新定义应该在HeapFlag检查之前执行。
未完待续
```