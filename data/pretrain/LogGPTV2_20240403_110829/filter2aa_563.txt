### Hacking the EULA: Reverse Benchmarking Web Application Security Scanners

#### Abstract
Each year, security practitioners lose thousands of work hours sorting through web application security reports to separate out erroneous vulnerability data. The lack of publicly available information and restrictive vendor End User License Agreements (EULAs) that prohibit publishing research on the quality of their signature base have compounded this issue. These agreements have discouraged public research into the common types of false positives exhibited by commercial web application scanners.

#### Overview
**Speakers:**
- **Tom Stracener**: Senior Security Analyst, Cenzic Inc.
- **Marce Luck**: Information Security Architect, Fortune 100 company

#### Introduction
Web application security scanning technology is a critical tool for identifying vulnerabilities in web applications. However, these tools often generate a high number of false positives, which can be time-consuming and costly to address. This presentation introduces the concept of reverse benchmarking as a method to systematically identify and categorize these false positives.

#### Web Application Security Scanning Technology
- **Functionality**: Black box vs. white box testing
- **Ergonomics & Usability**
- **Performance**
- **Feature Sets**
- **Accuracy**: Signal-to-noise ratio
- **False Positive Rates**

#### The Problem of False Positives
False positives are a significant issue in web application security scanning. They arise from various factors, including:
- **Parameter Echoing**: Parameter values echoed back in web applications.
- **Mistaken Identity**: Overly general vulnerability conditions.
- **Semantic Ambiguity**: Generic signatures that do not accurately detect vulnerabilities.
- **Response Timing**: Timing-dependent security checks.
- **Custom 404 Pages**: Erroneous triggers due to custom error pages.

#### What is Reverse Benchmarking?
Reverse benchmarking is a type of passive reverse engineering designed to test the robustness of web application security scanners. It aims to:
- **Expose Poor Coding and Faulty Detection Logic**
- **Reveal Security Testing Design Flaws**
- **Confuse Stateless Testing Mechanisms**

#### Reverse Benchmarking Methodology
- **Active False Positive Solicitation**: Using a sample web application to model a production environment.
- **Reverse Fault Injection**: Introducing faults to trigger false positives.
- **Systematic Analysis**: Developing a taxonomy of false positive types and their contributing factors.

#### Common False Positive Types
1. **Partial Match Problems**: Detection strings triggering unrelated content.
2. **Parameter Echoing**: Values echoed back in web applications.
3. **Mistaken Identity**: Overly general vulnerability conditions.
4. **Semantic Ambiguity**: Generic signatures.
5. **Response Timing**: Timing-dependent security checks.
6. **Custom 404 Pages**: Erroneous triggers due to custom error pages.

#### Creating a Reverse Benchmark Target
The nature of the target depends on the researcher's goals:
- **Reverse Engineering**: Exposing as much of the signature base and rule set as possible.
- **Bakeoffs/Comparisons**: Stress-testing scanners with non-standard or difficult configurations.
- **Open Reverse Benchmarking Project**: Emphasis on exposing signature flaws and generic triggers.

#### Backatcha Roadtest Results
- **Total False Positives**: 92% across four popular blackbox web application security scanners.
- **Detailed Breakdown**:
  - **Scanner 1**: 42% Path Manipulation, 5% Command Injection, 7% XSS, 30% SQL Injection, 14% File Disclosure, 0% Known Vulnerabilities, 0% Misconfigurations.
  - **Scanner 2**: 29% Path Manipulation, 11% Command Injection, 21% XSS, 21% SQL Injection, 0% File Disclosure, 14% Known Vulnerabilities, 0% Misconfigurations.
  - **Scanner 3**: 0% Path Manipulation, 29% Command Injection, 67% XSS, 2% SQL Injection, 1% File Disclosure, 0% Known Vulnerabilities, 1% Misconfigurations.
  - **Scanner 4**: 4% Path Manipulation, 0% Command Injection, 53% XSS, 0% SQL Injection, 7% File Disclosure, 0% Known Vulnerabilities, 36% Misconfigurations.

#### Conclusions
- **All Scanners Had Simple Problems**: High false positive rates.
- **Further Research Needed**: Improve reverse benchmarking targets and methodologies.
- **Community Support Needed**: Partner with organizations like OWASP to develop better tools and standards.

#### Further Research
- **Improve Reverse Benchmarking Targets**: Add more tests and improve methodology.
- **Test with More Scanners**: Expand the scope of the research.
- **Partner with OWASP**: Develop a reverse benchmarking module for SiteGenerator.

By systematically identifying and categorizing false positives, reverse benchmarking can help the security community and developers avoid common mistakes and improve the overall effectiveness of web application security scanners.