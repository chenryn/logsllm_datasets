ing a hex-encoded PKCS7 blob, which holds the certificates as well
as the signature value created with the private key that corresponds
to the public key stored in the certificate. The ByteRange parameter
defines which bytes of the PDF file are used as the hash input for
the signature calculation and defines two integer tuples:
(a, b) : Beginning at byte offset a, the following b bytes are used
as the first input for the hash calculation. Typically, a=0 is
used to indicate that the beginning of the file is used while
a+b is the byte offset where the PKCS#7 blob begins.
(c, d) : Typically, byte offset c is the end of the PKCS#7 blob, while
c+d points to the last byte range of the PDF file and is used
as the second input to the hash calculation.
Figure 5: A simplified overview of a signed PDF file.
According to the specification, it is recommended to sign the
whole file except for the PKCS#7 blob (located in the range between
a+b and c) [21].
2.3 Verifying a signed PDF File
If a signed PDF file is opened with a desktop application that sup-
ports signatures, it immediately starts to verify it by: (1) extracting
the signature from the PDF and applying the cryptographic opera-
tions to verify its correctness and (2) verifying if the used signing
keys are trusted, e.g., an x.509 certificate. One thing that all appli-
cations had in common is that by default, they do not trust the
operating system’s keystore. Similar to web browsers such as Fire-
fox, they distribute their own keystore and keep the list of trusted
certificates up to date. Additionally, every viewer allows the uti-
lization of a different keystore containing trusted certificates. This
feature is interesting for companies using their own Certificate
Authority (CA) and disallowing the usage of any other CA. As a
result, similar to key pinning, the viewer can be configured to trust
only specific certificates.
3 ATTACKER MODEL
In this section, we describe the attacker model including the attack-
ers’ capabilities and the winning conditions.
Victim. A victim can be either a human who opens the file using
a certain PDF desktop application or a website offering an online
validation service.
Attacker Capabilities. It is assumed that the attacker is in posses-
sion of a signed PDF file. The attacker does not possess the proper
private key that was used to sign it. Also, we assume that the victim
HeaderBodyXref TableTrailerHeaderBodyXref TableTrailer Body UpdatesXref Table UpdatesTrailerHeaderBodyXref TableTrailer Body UpdatesXref Table UpdatesTrailer Body UpdatesXref Table UpdatesTrailerUpdate 1Update 2%PDF-1.7%%EOFXref TableTrailer1 0 obj Catalog2 0 obj Pages3 0 obj Page4 0 obj streamOriginal Document1 0 obj Catalog5 0 obj Signature/Pages 2 0 R/Perms 5 0 R/Subfilter adbe.pkcs7/Contents sig.value/ByteRange [a b c d]Xref TableTrailerNew Xref TableNew TrailerNew SignatureBody%%EOFSignature Update 1Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom4(a) A screenshot of Adobe Acrobat DC is depicted after opening a signed PDF
document. A signature validation bar (UI-Layer 1) is automatically shown. A
signature panel (UI-Layer 2) can be opened by pressing the corresponding but-
ton. The panel provides more details, e.g., the error message or email address
of the signer.
(b) There are 3 validation states: (1.) A green icon indi-
cates a valid and trusted signature. (2.) If the icon appears
in yellow, the key used to sign the PDF is untrusted, e.g.,
because a self-generated certificate is used. (3.) The red
icon indicates an invalid signature, e.g., if the PDF file is
modified.
Figure 6: PDF signature validation with two UI-Layers.
where the file is then processed.
Winning Conditions. For the successful execution of this attack,
we have defined two conditions:
Cond. 1) When opening the PDF file, the target application, i.e., the
viewer or online service, shows a UI displaying that it is
validly signed and is identical to the originally unmodified
signed PDF file.
Cond. 2) The viewer application displays content which is different
from the original file.
only trusts specific certificates (e.g., via the trust store) and the
attacker does not possess a single private key that is trusted by
the victim. Thus, malicious PDF files which are digitally signed by
the attacker with a self-generated or untrusted certificate will be
not verified successfully by the viewer. Apart from this restriction,
the attacker can arbitrarily modify the PDF file, for example, by
changing the displayed content.
The attacker finally sends the modified PDF file to a victim,
For viewer applications, both winning conditions must be met.
For the online validation services, only the first condition must be
fulfilled because online services do not show the content of a PDF
file. Instead, they generate a report containing the results of the
verification, see Figure 11. Therein, the services show whether the
PDF file is validly signed.
Desktop viewer applications differ substantially in displaying
the results of the signature verification. To classify if an attack is
successful and to determine if the victim could detect the attack,
we defined two different UI-Layer:
• UI-Layer 1 represents the UI information regarding the sig-
nature validation which is immediately displayed to the user
after opening the PDF file. It is shown without any user in-
teraction. Examples for Adobe Acrobat DC UI-Layer 1 are
presented in the top part of the purple box in Figure 6.
• UI-Layer 2 provides extended information regarding the sig-
nature validation. It can be accessed by clicking on the respec-
tive menu option. Examples for Adobe Acrobat DC UI-Layer
2 are displayed in the bottom-left part of the green box in
Figure 6.
If the information presented on the UI-Layer 2 states that the
signature is invalid or the document has been modified after the
application of the signature, the attack can still be classified as
successful for UI-Layer 1.
In Figure 6, an example of a successful signature validation on
UI-Layer 1 and UI-Layer 2 is presented. After opening the PDF file,
the information Signed and all signatures are valid is displayed.
Further information is revealed by clicking on the Signature Panel
and can be seen in the green box of UI-Layer 2.
Self-Signed PDFs. We do not consider self-signed PDF as a legiti-
mate attack and neither use nor rely on them because a self-signed
PDF can clearly be distinguished from a PDF signed with a trusted
certificate; cf. green and yellow icon in Figure 6.
4 HOW TO BREAK PDF SIGNATURES
In this section, we present three novel attack classes on PDF sig-
natures: Universal Signature Forgery (USF), Incremental Saving
Attack (ISA), and Signature Wrapping Attack (SWA). All attack
classes bypass the PDF’s signature integrity protection, allowing the
modification of the content arbitrarily without the victim noticing.
The attacker’s goal is to place malicious content into the protected
PDF file, such that the previously defined winning conditions for
viewer applications and online validation services are satisfied.
During the security analysis, we designed many broken PDF
files for each attack class which are clearly violating the PDF speci-
fication in order to bypass the signature verification process.
We also learned that nearly every PDF viewer has a high level of
error-tolerance so that these PDF files could be successfully opened
even if required parameters are missing. We can only assume that
(1.)Signatureisvalidandtrusted.(2.)Untrustedkeyisusedtosignthedocument.(3.)Signaturevalueisinvalid.UI-Layer1:AutomaticallyshownoncePDFisopenedUI-Layer2ClicktoopenUI-Layer-2YourAmazonInvoice#345123(PDFContent)Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom5this is due to the individual interpretation of the PDF specification
by each vendor.
4.1 Universal Signature Forgery (USF)
The main idea of Universal Signature Forgery (USF) is to disable the
signature verification while the application viewer still shows a suc-
cessful validation on the UI layer. This attack class was inspired by
existing attacks applied to other message formats like XML [42] and
JSON [33]. Such attacks either remove all signatures or use insecure
algorithms like none in JSON signatures. For PDFs we estimated
two possible approaches – either to remove information within
the signature which makes the validation impossible, or to remove
references to the signature to avoid the validation. Removing refer-
ences did not lead to any successful attack. Thus, we concentrated
on manipulations within the signature. In this case, the attacker
manipulates the signature object in the PDF file, trying to create
an invalid entry within this object. Although the signature object
is provided, the validation logic is not able to apply the correct
cryptographic operations. This leads to the situation that a viewer
shows some signature information even though the verification
is being skipped. In the end, we define 24 different attack vectors,
eight of them are depicted in Figure 7.
Figure 7: Different USF attack variants manipulating the sig-
nature object entries to bypass the signature validation.
In the given example, the attack vectors target two values: a) the
entry Contents contains the key material as well as the signature
value and b) the entry ByteRange defines the signed content in the
file. The manipulation of these entries is reasoned by the fact that
we either remove the signature value or the information stating
which content is signed. In Variant 1, as depicted in Figure 7, either
Contents or ByteRange are removed from the signature object.
Another possibility is defined in Variant 2 by removing only the
content of the entries. In Variants 3 and 4, invalid values were
specified and tested. Such values are for instance null, a zero byte
(0x00), and invalid ByteRange values like negative or overlapping
byte ranges. Providing such tests is common for penetration testers
since many implementations behave abnormally when processing
these special byte sequences.
4.2 Incremental Saving Attack (ISA)
This class of attack relies on the incremental saving feature. The
idea of the attack is to make an incremental saving on the document
by redefining the document’s structure and content using the Body
Updates part. The digital signature within the PDF file protects
precisely the part of the file defined in the ByteRange. Since the
incremental saving appends the Body Updates to the end of the
file, it is not part of the defined ByteRange and thus not part of
the signature’s integrity protection. To summarize, the signature
remains valid, although the Body Updates changed the displayed
content.
Figure 8: Bypassing the signature protection by using incre-
mental saving. In (1), the main idea of the attack is depicted,
while (2)-(4) are variants to obfuscate the manipulations and
prevent a viewer to display warnings.
During our research, we elaborated four variants of ISA. These
variants are reasoned by the fact that some vendors recognized that
incremental saving is dangerous when concerning PDF signatures.
These vendors implemented countermeasures to detect changes
after the document’s signing. As part of our black-box analysis,
we were able to determine these countermeasures and find generic
bypasses that worked for multiple viewers which we describe below.
Variant 1: ISA with Xref table and Trailer. For Variant 1 of
the ISA class, as depicted in Figure 8, only two of the evaluated
signature validators were susceptible to the attack. This is not
very surprising since this type of modification is exactly what a
legitimate PDF application would do when editing or updating a
PDF file. A digital signature in PDF is designed to protect against
this behavior; the signature validator recognizes that the document
was updated after signing it and shows a warning respectively. To
bypass this detection, we found two possibilities. (1) We included an
empty Xref table. This can be interpreted as a sign that no objects are
changed by the last incremental saving. Nevertheless, the included
updates are processed and displayed by the viewer. (2) We used
an Xref table that contains entries for all manipulated objects. We
additionally added one entry which has an incorrect reference (i.e.,
byte offset) pointing to the transform parameters dictionary, which
is part of the signature object. The result of these manipulations
is that the viewer application does not detect the last incremental
saving. No warning is shown that the document has been modified
after signing it but the PDF viewer displays the new objects.
Variant 2: ISA without Xref table and Trailer. Some of the view-
ers detected the manipulation by checking if a new Xref table and
Trailer were defined within the new incremental saving. By remov-
ing the Xref table and the Trailer, a vulnerable validator does not
recognize that incremental saving has been applied and success-
fully verifies the signature without showing a warning. The PDF
5 0 obj Signature/Subfilter adbe.pkcs7/Contents ____/ByteRange [a b c d]5 0 obj Signature/Subfilter adbe.pkcs7/Contents null/ByteRange [a b c d]5 0 obj Signature/Subfilter adbe.pkcs7/Contents 0x00/ByteRange [a b c d]5 0 obj Signature/Subfilter adbe.pkcs7_____/ByteRange [a b c d]5 0 obj Signature/Subfilter adbe.pkcs7/Contents sig.value/ByteRange ____5 0 obj Signature/Subfilter adbe.pkcs7/Contents sig.value/ByteRange null5 0 obj Signature/Subfilter adbe.pkcs7/Contents sig.value/ByteRange [a -b c d]5 0 obj Signature/Subfilter adbe.pkcs7/Contents sig.value_____Variant: 1Variant: 2Variant: 3Variant: 4HeaderBodyXref TableTrailer Body UpdatesXref TableTrailer Body UpdatesXref TableTrailerHeaderBodyXref TableTrailer Body UpdatesXref TableTrailer Body UpdatesHeaderBodyXref TableTrailer Body UpdatesXref TableTrailer Body Updates + Signature ObjectVariant: 1HeaderBodyXref TableTrailer Body UpdatesXref TableTrailer Body UpdatesTrailerProtected by the signatureContent ManipulationVariant: 2Variant: 3Variant: 4Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom6file is still processed normally by displaying the modified document
structure. The cause of this behavior is that many of the viewers are
error tolerant. In the given case, the viewer completes the missing
Xref table and Trailer and processes the manipulated body.
Variant 3: ISA with a Trailer. Some of the PDF viewers do not
open the PDF file if a Trailer is missing. This led to the creation of
this attack vector containing a manipulated Trailer at the end of the
file. To our surprise, the Trailer does not need to point to an Xref
table but rather to any other byte offset within the file. Otherwise,
the verification logic detects the document manipulation.
Variant 4: ISA with a copied signature and without a Xref
table and Trailer. The previous manipulation technique was im-
proved by copying the Signature object within the last incremental
saving. This improvement was forced by some validators which
require any incremental saving to contain a signature object if the
original document was signed. Otherwise, they showed a warning
that the document was modified after the signing.
By copying the original Signature object into the latest incre-
mental saving, this requirement is fulfilled. The copied Signature
object, however, covers the old document instead of the updated
part. To summarize, a vulnerable validator does not verify whether
each incremental saving is signed, but only if it contains a signature
object. Such verification logic is susceptible to ISA.
4.3 Signature Wrapping Attack (SWA)
The Signature Wrapping Attack (SWA) introduces a novel tech-
nique to bypass signature protection without using incremental
saving. During our research, we observed that the part of the docu-
ment containing the signature value is excluded from the signature
computation and thus it is not integrity protected. The ByteRange
defines the exact size of this unprotected space. Consequentially,
we focused on manipulations on the ByteRange entries to increase
the size of the unprotected space and allowing the injection of
malicious content.
The main idea is to move the signed part of the PDF to the
end of the document while reusing the xref pointer within the
signed Trailer to an attacker manipulated Xref table. To avoid any
processing of the relocated part, it can be optionally wrapped by
using a stream object or a dictionary. We distinguish two variants
of SWA.
Variant 1: Relocating the second hashed part. Each ByteRange
entry of the Signature object defines two hashed parts of the
document. The first variant of the attack relocates only the second
hashed part. In Figure 9, two documents are depicted. On the left
side, a validly signed PDF file is depicted. The first hashed part
begins at byte offset a and ends at offset a+b, the second hashed
part ranges from offset c until c+d. On the right side, a manipulated
PDF file is generated by using SWA as follows:
Step 1 (optional): The attacker deletes the padded zero bytes within
the Contents parameter to increase the available space for
injecting manipulated objects.1
Step 2: The attacker defines a new /ByteRange [a b c* d] by ma-
nipulating the c value, which now points to the second
1During signing, the size of the signature value (and the corresponding certificate) is
not known and thus it is roughly estimated. The unused bytes are later filled with zero
Bytes.
Figure 9: A comparison of the original document and the
manipulated document by using the Signature Wrapping
Attack (SWA). Malicious objects are placed before the ma-
licious Xref table table by deleting unused zero bytes in
Contents.
signed part placed on a different position within the docu-
ment.
Step 3: The attacker creates a new Xref table pointing to the new
objects. It is essential that the byte offset of the newly in-
serted Xref table has the same byte offset as the previous
Xref table. The position is not changeable since it is refer-
enced by the signed Trailer. For this purpose, the attacker
can add a padding block (e.g., using whitespaces) before the
new Xref table to fill the unused space.
Step 4: The attacker injects malicious objects which are not pro-
tected by the signature. There are different injection points
for these objects. They can be placed before or after the
malicious Xref table. If Step 1 is not executed, it is only
possible to place them after the malicious Xref table.
Step 5 (optional): Some PDF viewers need a Trailer after the ma-
nipulated Xref table, otherwise they cannot open the PDF
file or detect the manipulation and display a warning mes-
sage. Copying the last Trailer is sufficient to bypass this
limitation.
Step 6: The attacker moves the signed content defined by c and
d at byte offset c*. Optionally, the moved content can be
encapsulated within a stream object.
Noteworthy is the fact that the manipulated PDF file does not
end with %%EOF after the endstream. This was necessary due to
the reason that some validators throw a warning that the file was
manipulated after signing due to an %%EOF after the end of signed
document (byte offset of EOF > c+d). To bypass this requirement, the
%PDF-1.7Original Document1 0 obj Catalog5 0 obj Signature/Subfilter adbe.pkcs7/Contents /ByteRange [a b c d]Xref TableTrailer%%EOF%PDF-1.7Original Document1 0 obj Catalog5 0 obj Signature/Subfilter adbe.pkcs7/Contents /ByteRange [a b c* d]Xref TableTrailer666 0 obj streamstream/ByteRange [x y z w]%%EOFendstreamMalicious ObjectsMalicious Xref Tablec*dabPaddingcdabTrailer (optional)Same byte offsetSession 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom7PDF file is not correctly closed. However, it will still be processed
by any viewer.
Figure 10: File structures of a signed PDF file before and after
different Signature Wrapping attacks were applied.
Variant 2: Relocating the both hashed parts. The first variant
of SWA only relocates the second hashed part. This approach has the
disadvantage that manipulations in the first section are impossible
since the first hash part commonly protects the beginning of the
file (offset a = 0) up to the signature object. The second variant
of SWA relocates both hashed parts by concatenating part 1 and
part 2. The attack algorithm is similar to Variant 1, except for two
differences:
• In Step 2, the attacker changes all original values in /ByteRange
to a∗=0, b∗=0, c∗ and d∗=b+d. In other words, he defines the
first hashed part to begin at byte offset a*=0, having length
b*=0. He then chooses an arbitrary wrapper position c*, and
sets its length (d) to the sum of both hashed parts (b+d).
• In Step 6, the attacker copies the first hashed part (byte
offsets a to a+b) concatenated with the second hashed part
(byte offsets c to c+d) at byte offset c∗.
The algorithm is based on our evaluation result that all tested