(ii) Look for branches that skip the exit points. Figure 6d shows
that the branch condition at 0x182b4 skips the exit point at 0x182be.
This exit point is therefore considered to be part of the existing
function (i.e., the one beginning at 0x182b0).
865ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
(iii) Remove exit points that are skipped. We are left with one
other potential exit point at 0x182d0. It is considered the final exit
point of the function (see Figure 6e).
(iv) Identify the next valid instruction as the start of the next
function. Initially, we consider the instruction at 0x182d2 to be the
start of the next function. However, this address contains a nop
instruction. Therefore, we skip it and mark 0x182d4 as the start of
the next function, as shown in Figure 6f. This corresponds to the
start address of functionC.
This process is then repeated from the start of the new function
block (i.e., from 0x182d4), until the end of the block is reached.
Function block annotation: argXtract maintains a data ob-
ject containing information on cross-references to and from a func-
tion block, as well as the function’s call depth. The call depth indi-
cates the maximum number of functions that get called iteratively
by a function. It is used for function pattern matching and tracing.
3.4 COI Identification
A COI in our framework could be a standard function call or could
be translated to an ARM supervisor call (svc). argXtract identifies
calls to the svcs or functions of interest using the techniques de-
scribed in §3.4.1 and §3.4.2, respectively. In both cases, the addresses
of the calling instructions are stored, to be used in the tracing step.3
This then satisfies Condition C1. After this step, all pre-conditions
for analysing a stripped ARM binary (see §2) will be satisfied.
Supervisor call identification. In svc analysis mode, an input
3.4.1
object containing the svc numbers of interest (obtained from vendor
SDKs) is provided to argXtract. A linear scan is performed over the
disassembly to obtain the addresses of the relevant svc instructions.
3.4.2 Pattern matching. Identifying function calls is far more com-
plex than identifying supervisor calls, as functions cannot be im-
mediately identified within assembly. We exploit the fact that con-
figuration API functions (such as those provided by vendors for
performing configurations to IoT stacks) accept inputs in a specific
order, which are passed within registers in a specific sequence for
Cortex-M. In addition, most functions generate artefacts that are
detectable within memory and/or registers, i.e., as output or inter-
mediate values. For each function of interest, we define a “function
pattern file”, which is a collection of test sets containing register and
memory inputs, and the corresponding outputs (which could be ac-
tual output values in registers or memory, or intermediate values at
detectable locations). In the case of functions that store identifiable
values at binary-specific locations that cannot be predetermined,
we propose wildcard addresses, where expected values are specified
at some predetermined offset from the wildcard address.
A pattern file is passed to each of the functions that have been
identified for the binary under test (see §3.3). The function instruc-
tions are executed with the input register and memory values spec-
ified in the pattern file. Output register and memory contents are
compared against the expected values. If a single function matches
the given pattern, then this is taken to be the function of interest. In
the case of nested function calls, the function with the lowest call
depth that satisfies the given pattern is taken to be the function of in-
terest. Polymorphism will be detected if the processing of the inputs
3Direct calls are identified. However, calls via blx are not.
{' sd_ble_opt_set ':{
' memory ':{... , 20007 f60 : '31 ' , 20007 f61 : '32 ' , 20007 f62
: '33 ' , 20007 f63 : '34 ' , 20007 f64 : '35 ' , 20007 f65
: '36 ' , 20007 f66 : '00 ' , 20007 f68 : '60 ' , 20007 f69 : '7f
', 20007 f6a : '00 ' , 20007 f6b : '20 ' , ...} ,
' registers ':{... ' r0 ': '00000022 ' , 'r1 ': '20007 f68 ', ..}}}
(a) Register/memory contents.
{" args ": {
" output ": {
"0": {...} ,
"1": {" in_out ": " in ",
" ptr_val ": " pointer ",
" data ": {
" p_opt ": {
" sd_ble_opt_set ": [
{
" opt_id ": 34 ,
" p_opt ":
"313233343536"
" ptr_val ": " pointer ",
" length_bits ": 48 ,
" type ": " hex " }}}}}
}
]
}
(b) Argument Definition Object.
(c) Partial output file.
Figure 7: Argument processing.
differs between the functions such that the artefacts/outputs are
different.4 Note however that if two functions produce the same out-
puts for any given inputs, then function pattern matching will fail.
3.5 Tracing and Argument Processing
Once COIs have been identified (as described in §3.4), backward
inter-procedural tracing is used to determine all call execution
paths. Forward-tracing along the paths then leads to the COI(s).
The arguments to a COI are contained within registers r0-r3 (or
on the call stack) [7, 8, 85]. Some registers contain the argument
of interest, while others may hold pointers to data in memory.
Therefore, when a COI is reached, the contents of both the register
object and the memory map are returned to an argument analysis
component for processing.
The type and format of data that are used as arguments to COIs
are obtained from vendor SDKs and provided to argXtract in the
form of Argument Definition Objects. These are JSON templates that
describe the expected structure of bits for each input argument
using predefined keywords.5 For example, Figure 7b depicts the Ar-
gument Definition Object for the sd_ble_opt_set COI discussed
in §2 (Figure 1a). A corresponding trace output may look like that
depicted in Figure 7a. Taking the second argument as an example,
we note that it is defined as a pointer to a pointer to a 6-byte (48-bit)
array. This argument is contained within register r1, which accord-
ing to the trace output in Figure 7a contains a value of 20007f68.
As the Argument Definition Object indicates that this is a pointer,
we refer to the contents of memory. The memory object in Figure 7a
shows that the address 0x20007f68 contains the value 20007f60.
This (also being a pointer) is interpreted as a memory address,
0x20007f60. This address contains the hex value 0x313233343536,
which corresponds to the ASCII string “123456”, i.e., the value spec-
ified as the fixed passkey in our example in Figure 1a. This results
in the output depicted in Figure 7c.
4Note that input structures within function pattern files are provided in byte format.
Therefore, differences in input type do not impact the analysis.
5We adopt this template-based approach for greater flexibility, such that supporting
additional COIs only requires including new Argument Definition Objects, rather than
needing to add extra COI-specific code.
866argXtract: Automated Analysis of Stripped IoT Binaries
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
4 EVALUATION
We implement argXtract using Python. We select Capstone as the
disassembler, as it underpins ARM disassembly for a number of
existing reverse-engineering and analysis tools, including radare,
angr and binwalk. In this section, we evaluate our implementation
in terms of the accuracy of function block identification and pattern
matching, and the correctness of extracted configurations.
4.1 Test Set and Ground Truth
There is no existing ground truth for ARM Cortex-M, i.e., binaries
with known function locations and configurations. We therefore
generate a test set of 28 stripped binaries for testing and verification
purposes. The binaries target chipsets from NXP, STMicroelectron-
ics, Nordic Semiconductor and Texas Instruments, for multiple IoT
technologies including Zigbee, ANT, BLE, Thread and 802.15.4. The
binaries are compiled using GCC, IAR, Keil and Clang, depending
on the chipset vendor. We provide a detailed description of the
test binaries in our code repository. For ground truth, we obtain
the configuration for each binary by disassembling its unstripped
version using the GNU ARM embedded toolchain.
4.2 Accuracy of Function Identification
We evaluate the accuracy of argXtract’s function identification
(§3.3) by identifying function start addresses for the 28 stripped
binaries within our test set and comparing them against the actual
functions from the unstripped versions. For comparison, we also do
the same using radare2 and ghidra. Table 1 presents the results.
The table shows that for all but five binaries, more than 95% of
functions are correctly identified by argXtract. The results are
more variable for radare2 and ghidra, but in general the TPRs
obtained by these two tools are lower (often significantly lower)
than those obtained by argXtract. Manual analysis of a sample
of functions (across the test set) that were correctly identified by
argXtract but not by radare2 or ghidra showed that many such
functions occurred after inline data or less traditional function
exit points. The techniques employed by argXtract for inline data
identification and function boundary identification enable it to han-
dle such instances and identify a greater proportion of function
start addresses correctly. There was a single exception (binary with
ID=0d2), where argXtract resulted in a TPR of 0% while radare2
and ghidra identified approximately 70% of functions. This was a
binary where the .text segment was split into two sections, each
with a different offset. argXtract was unable to compute the offsets
in this case, which meant that further analysis was not possible.
Additionally, manual analysis of the remaining four cases where
argXtract produced a TPR < 95% showed that the unidentified
functions were of unusual structure, e.g., functions accessed via
direct conditional branches, or containing only a bx lr instruction.
These are likely to be fragments of other functions or shared func-
tions. We observe that for the vast majority of such cases, radare2
and ghidra also failed to identify the functions.
Examining false positives (regardless of the analysis tool), we
found that in many cases misidentified functions were either where
unannotated data had been identified as the start of function blocks,
or where a logical function start can be assumed, e.g., blocks of
alternating ldr instructions and data bytes causing each ldr to
Table 1: True Positive Rates (TPR) and Effective False
Positive Rates (EFPR) for function block identification
against test binaries. EFPR is computed by discounting
misidentifications that do not impact the trace.
3
100
0
88.24
0
0
82.35
93.47
0
0
0
Bin File
radare21
ghidra2
radare21
argXtract
argXtract
100 0.29 95.68 2.19 87.96
ghidra2
Bin File
ID† #Fns‡ TPR EFPR TPR EFPR TPR EFPR ID† #Fns‡ TPR EFPR TPR EFPR TPR EFPR
100 69.32 7.4 69.68 2.85
0a1 324
0d2 841
0
3b1 204 99.02
1d7 951 93.27 0.97 74.24
0
0
73.08 0.82
443 598
4d7 1563 95.71 1.17 78.57 3.28 77.8 0.15
83.78 3.05 83.95 1.95
5d3 398 99.50 0.73 94.97
589 1486 97.51 0.68 83.24 1.59 84.79
0
0
646 166 98.80
67e 2138 99.16 0.05 82.69 0.54 83.4 0.22
80.72 0.73 77.71 0.76
681 1961 97.86 0.56 94.19 0.7 87.51 0.12
0
6ac 265 98.11 0.37 73.96 0.5 72.08
7e8 1529 97.58 0.66 81.62 1.57 84.96
0
70b 115 95.65
67.83
0
938 2764 99.57 0.74 85.53 0.59 83.90 0.09
928 520 95.38 0.93 90.19
0
ade 1951 99.33 0.89 89.54 0.46 87.69 0.12
989 762 95.80 9.7* 69.27 8.62 63.10 9.39
88
be7 2035 99.71 0.39 5.11 87.43 4.72
bad 839 92.25 0.79 69.85 5.43 68.53
0
cb5
67.39
0
cc8 1582 94.82 0.71 82.68 1.91
83
0
dd9 801 96.63 6.9* 95.93 6.36 88.15 6.66
e2a 495 95.15 0.39 89.7
0
69.29
0
e2d 698 96.42 0.35 94.99
f2b 1926 99.79 0.65 81.15 1.01 79.85 0.06
0
86.25
f37 1585 95.21 1.16 78.23 3.18 78.36
0
fe9 1007 99.40 0.1 61.27 0.80 56.21 0.70
†ID = First three characters of SHA256 of binary. ‡#Fns = Number of functions. 1radare2 was
executed using aaa analysis mode, 2Ghidra was executed using the ARM Aggressive Instruction
94.57 1.11 61.96
73.04
71.15
0
0
0
0
92
Finder option. Both were provided with the application code base manually.
be considered as the start of a new function. In the former case,
these particular “functions” will never be called during the tracing
phase. In the latter, the functions are directly addressed as if they
are individual functions. Therefore, such FPs will not affect the
trace. We thus consider an “Effective FPR” to denote the false pos-
itives excluding such instances. The EFPRs obtained by argXtract
are fairly similar to those obtained by ghidra (within 1-2% of each
other). radare2 was more likely to result in a higher EFPR; manual
analysis showed that this was often due to radare2 incorrectly
considering push instructions to be the start of a function. Overall,
argXtract resulted in EFPRs of < 1.5% for all but two binaries
(marked with * in the table). These were both compiled by IAR,
which is the only compiler we have observed that uses bl instruc-
tions to branch and link within a function. This accounts for the
higher EFPR for these two binaries. While this will not impact the
actual branching functionality, it will influence the call depth calcu-
lation, which in turn could impact tracing. We observe that radare2
and ghidra also resulted in high EFPRs for these two binaries.
4.3 Function Pattern Matching
We verified the functionality of the pattern matching module against
the ot::KeyManager::SetKeyRotation OpenThread function, the
mbedtls_ssl_conf_ciphersuites mbedtls library function, and
the CryptoKeyPlaintext_initKey function from Texas Instru-
ments’ SimpleLink Platform. When testing for these functions, we
generated stripped binaries using different vendor SDKs (where rel-
evant), as well as different projects and compilers (Keil, IAR, Clang),
to account for vendor/compiler-introduced variations. argXtract
was able to identify the correct function in each case. To further
check the accuracy of argXtract’s function pattern matching, we
manually verified it against the HAL_Write_ConfigData and aci_-
gap_init functions within a real-world STMicroelectronics binary
by comparing their functionality against the functions within an
unstripped reference binary.
867ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
4.4 Correctness of Results
For correctness checks, we perform tests using generated binaries
with known configurations, as well as verification using a real-
world binary and associated device. We use a subset of ten binaries
from our test set, targeting Nordic and STMicroelectronics chipsets,
compiled using GCC, Keil and IAR, and implementing ANT and
BLE. For the ANT binaries, we define different channel settings and
encryption keys. For Nordic BLE binaries, we define 3 BLE services
- Heart Rate, Device Information and a custom service - with very
specific configurations. Obtained configurations must be an exact
match for the output to be taken as correct. For STMicroelectronics
BLE binaries, we define different advertising addresses and privacy
configurations.6 In our experiments, all of the conditions were satis-
fied for all test binaries within our control set, i.e., the configurations
were extracted exactly as expected. We additionally purchased a