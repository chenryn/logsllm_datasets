title:CapProbe: a simple and accurate capacity estimation technique
author:Rohit Kapoor and
Ling-Jyh Chen and
Li Lao and
Mario Gerla and
M. Y. Sanadidi
CapProbe: A Simple and Accurate Capacity Estimation
Technique
Rohit Kapoor
Ling-Jyh Chen
Qualcomm
UCLA
Li Lao
UCLA
Mario Gerla
M. Y. Sanadidi
UCLA
UCLA
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
We present a new capacity estimation technique, called Cap-
Probe. CapProbe combines delay as well as dispersion mea-
surements of packet pairs to ﬁlter out samples distorted by
cross-traﬃc. CapProbe algorithms include convergence tests
and convergence speed-up techniques by varying probing pa-
rameters. Our study of CapProbe includes a probability
analysis to determine the time it takes CapProbe to con-
verge on the average. Through simulations and measure-
ments, we found CapProbe to be quick and accurate across
a wide range of traﬃc scenarios. We also compared Cap-
Probe with two previous well-known techniques, pathchar
and pathrate. We found CapProbe to be much more ac-
curate than pathchar and similar in accuracy to pathrate,
while providing faster estimation than both. Another ad-
vantage of CapProbe is its lower computation cost, since no
statistical post processing of probing data is required.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network Monitoring
General Terms
Measurement, Experimentation, Performance
Keywords
Network capacity, Bottleneck bandwidth, Packet pair dis-
persion
1.
INTRODUCTION
Estimating the capacity of an Internet path is a funda-
mental problem that has received considerable attention in
the last few years. Knowledge of the capacity of a path
can be put to good use in various scenarios. Using such
information, multimedia servers can determine appropriate
streaming rates while ISPs can keep track of the character-
istics of their own links. Further, recent research in overlay
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
networks and application layer multicast can beneﬁt from
such capacity information in better structuring their over-
lays and trees.
Work on estimating path capacity has been based on mon-
itoring either delays of packet pairs and trains or their dis-
persion. Tools adopting the former approach include pathchar [8,
5]. Pathchar uses ICMP replies from routers to estimate link
capacities based on the variation of the round-trip delay as
the probing packet size is increased.
“Packet dispersion” techniques rely on probing the path
with a series of “packet pairs” or “packet trains”, and sta-
tistically processing the probing packets’ dispersion induced
by the path of interest. An early packet dispersion ap-
proach, bprobe [3], was proposed by Carter and Crovella.
Lai [11] ﬁltered packet pair measurements, whose poten-
tial bandwidth, derived from the minimum separation of
the packet pair at the sender, was less than the measured
bandwidth. Packet Tailgating was another technique pro-
posed by Lai [12]. Recently, Vicat in [6] proposed another
ﬁlter based technique called tracerate. Paxson [14] iden-
tiﬁed multi-channel links as a failure case of packet pairs
and presented the Packet Bunch Modes (PBM) technique
to overcome this limitation. Dovrolis [4] presented the most
detailed and revealing analysis of the capabilities and limita-
tions of packet dispersion techniques. He also introduced the
well-known capacity estimation tool pathrate, which ﬁrst
uses packet pairs and if this yields a multimodal distribu-
tion, then uses packet trains of increasing length. Further
details on previous work are presented in Section 8.
All the techniques mentioned above relied either only on
delay [8, 5] or only on dispersion [4, 12] of probe packets.
CapProbe, the tool we present and study in this paper, com-
bines dispersion and delay measurements of probing packet
pairs. CapProbe is based on a simple and fundamental
observation: a packet pair that produces either an over-
estimation or an under-estimation of capacity must have
suﬀered cross-traﬃc induced queuing at some link (similar
queuing observations have also been made by the authors
in [4, 7]). CapProbe ﬁlters out such distorted measure-
ments by tracking packet pair delays. It only uses packet
pairs with minimal end-to-end delays. As we will show in
this paper, CapProbe is accurate across a wide range of path
and network traﬃc parameters. The only scenario where the
tool fails to consistently estimate capacity correctly is when
cross-traﬃc is both intensive and non-reactive (like constant
rate UDP traﬃc).
In this work, we present and study in some detail Cap-
Probe algorithms and their performance. We assess the ac-
Session 2: Inference of Network Propertiescuracy and convergence speed of CapProbe, and using mea-
surements on the Internet, we compare its performance to
other tools such as pathrate and pathchar. CapProbe al-
gorithms include ﬁltering for minimal queuing time among
packet pairs, convergence speed-up by varying probing pa-
rameters, and convergence determination tests that improve
the chances of the tool to reach an accurate capacity esti-
mate at termination, while minimizing traﬃc overhead and
the time to convergence.
An active probing version of CapProbe can be imple-
mented using ICMP messages or UDP messages as probing
packet pairs. In such cases, we say that “active probing”,
or “out-of-band” probing is used to determine the path ca-
pacity. ICMP messages are a ﬁne alternative, provided des-
tination hosts are not discarding such messages. And UDP
messages are a ﬁne alternative provided it is feasible to im-
plement the tool on both ends of a path. In case of diﬃcul-
ties with either ICMP, or a two end implementation of UDP
probing, it would be advantageous to use “passive probing”
or “in-band probing”. As an example of passive probing,
one might consider the use of CapProbe techniques within
TCP. We have designed a minimal modiﬁcation to the TCP
sender protocol that allows accurate estimation of path ca-
pacity without sending any special messages; relying only on
the normal packet ﬂows within the TCP connection. Details
of this technique, which we call TCPProbe, will be reported
in future work due to space limitation.
This paper also includes a probability analysis to identify
the time it takes CapProbe to converge on average, and a
mathematical analysis of the fundamental property of dis-
persion and delay that CapProbe relies on.
The remainder of the paper is organized as follows. Sec-
tion 2 describes the packet pair technique on which a num-
ber of capacity estimation techniques including CapProbe
are based. Section 3 discusses the main idea underlying
CapProbe. Section 4 discusses the eﬀect of probing packet
size on the probability of queuing of a packet pair. Sec-
tion 5 presents an analysis of the probability of obtaining
a sample not aﬀected by queuing. Section 6 presents algo-
rithms to detect and speed-up convergence of CapProbe. In
Section 7, we present results of simulations and measure-
ments showing the performance of CapProbe and compar-
ing it with two well-known capacity estimation techniques,
pathchar and pathrate. Previous works on capacity estima-
tion are discussed in Section 8. Section 9 concludes the work
and discusses avenues for future work.
2. BACKGROUND
The basic Packet Pair algorithm [9, 2] relies on the fact
that if two packets sent back-to-back are queued one after
the other at the narrow link, they will exit the link with
dispersion T given by:
T = L/B
where L is the size of the second packet, and B is the band-
width of the narrow link, i.e., the capacity limiting link.
If the two packets have the same size, their transmission
delays are the same. This means that after the narrow link,
a dispersion of T will be maintained between the packets
even if faster links are traversed downstream of the narrow
link. This is shown in Figure 1(a), where S is the source,
D is the destination, and link A-B is the narrow link. The
narrow link capacity can then be calculated as:
B = L/T
The Packet Pair algorithm assumes that the packets will
queue next to each other at the narrow link. The presence
of cross-traﬃc can invalidate this assumption.
Previous researchers have noted that capacity estimates
resulting from Packet Pair dispersion can be inaccurate.
This inaccuracy can be caused either by interference from
cross-traﬃc or by the end systems’ inability to measure dis-
persion accurately. Below, we discuss the eﬀects of cross-
traﬃc, which can cause compression or expansion of dis-
persion. Compression results in over-estimation of capacity,
while expansion results in under-estimation.
Capacity over-estimation occurs when the dispersion be-
tween the packet pair at the destination is smaller than what
would be introduced by the narrow link. This may happen
whenever the narrow link is not the last link on the path,
i.e., when so-called post narrow links are present.
If the
ﬁrst packet of a pair queues at a post-narrow link, while the
second experiences queuing for a shorter time than the ﬁrst
(for example, when no cross packets are injected between
the pair), the dispersion between the packets decreases. Fig-
ure 1(b) shows how dispersion can decrease at a post-narrow
link. When dispersion of a packet pair sample is compressed
resulting in capacity over-estimation, the ﬁrst packet of the
probing pair will have queued at a post-narrow link due to
interference from cross-traﬃc. Compression and its eﬀect
have been found to be more pronounced when probe pack-
ets are smaller than cross-traﬃc packets [4].
Capacity under-estimation occurs when the dispersion be-
tween the packet pair at the destination is larger than what
would be introduced by the narrow link in the absence of
cross-traﬃc. This increase of dispersion happens due to
cross-traﬃc packets being served (transmitted) in between
packets of a packet pair probe. Such expansion can hap-
pen anywhere on the path, before, at, or after the narrow
link. Figure 1(c) shows how under-estimation of capac-
ity can occur. When under-estimation occurs, the second
packet of the probing pair will have queued due to inter-
ference from cross-traﬃc. We emphasize that queuing of
the second packet behind the ﬁrst packet does not lead to
expansion of the probing pair dispersion. Capacity under-
estimation has been shown to be more pronounced when the
size of cross-traﬃc packets is smaller than that of probing
packets [4].
3. CAPPROBE
The main idea underlying CapProbe is that at least one of
the two probing packets must have queued if the dispersion
at the destination has been distorted from that correspond-
ing to the narrow link capacity. This means that for samples
that estimate an incorrect value of capacity, the sum of the
delays of the packet pair packets, which we call the delay
sum, includes cross-traﬃc induced queuing delay. This de-
lay sum will be larger than the minimum delay sum, which
is the delay sum of a sample in which none of the packets
suﬀer cross-traﬃc induced queuing. The dispersion of such
a packet pair sample is not distorted by cross-traﬃc and will
reﬂect the correct capacity. Based on this observation, Cap-
Probe calculates delay sums of all packet pair samples and
uses the dispersion of the sample with the minimum delay
sum to estimate the narrow link capacity.
(a)
(b)
(c)
Figure 1: Packet Pair dispersion. (a) Ideal case. (b) Over-estimation of capacity. (c) Under-estimation of
capacity.
Figure 2: Packet Pair arriving at the narrow link of
capacity C.
Figure 3: Dispersion reduced due to smaller packet
size.
While pathchar used only packet delays and other schemes
[4, 12] used only packet pair dispersion, CapProbe combines
dispersion and delay measurements of packet pair probes.
Searching for the pair with the minimum delay sum implies
no post processing of probing pair data. Thus CapProbe
promises lower computation costs, and faster capacity esti-
mation. Such features may allow the use of CapProbe in
an “on-line” mode, in cases where the capacity to be esti-
mated changes relatively frequently. This might be the case
in wireless links in which the quality of the link varies fre-
quently. For example, in the CDMA-based 1xRTT cellular
technology, the system design employs varying transmission
bit rates to optimize correct reception probability.
CapProbe also requires minimal storage since only a search
for a minimum is performed, as compared to gathering data
for a histogram to be post-processed. For CapProbe to accu-
rately estimate the narrow link capacity, at least one packet
pair sample with the minimum delay sum must be received
at the destination.
In a network such as the Internet in
which the traﬃc intensity has ample ﬂuctuations includ-
ing lull periods due to reactive TCP ﬂows, there is a good
likelihood of obtaining one or more of the desired samples.
In fact, our experiments below encountered very few cases
that are deprived of such samples. The cases in which these
samples are sometimes not obtained correspond to a highly
congested (almost 100% congested), UDP-predominant (i.e.,
non-reactive) network.
4. EFFECT OF PROBING PACKET SIZE
In this section, we discuss the eﬀect of the size of probing
packets on the accuracy of CapProbe estimation. Our dis-
cussion makes use of the well-known queuing theory result
that the probability of queuing of a packet depends only
on the traﬃc load in the network [10] and is independent
of the size of the packet or cross-traﬃc packets (assuming
that the packet probe rate does not signiﬁcantly change the
traﬃc load on the network). We also mention here that, as
previous authors have discussed, for packet pair dispersion
to measure the narrow link capacity, the two packets should
have the same size.
For CapProbe to estimate accurately, it is suﬃcient that
neither packet of the packet pair has suﬀered any queuing.
We ﬁrst discuss the eﬀect of packet size on the queuing prob-
ability of the second packet. Consider the packet pair shown
in Figure 2, where both packets have a size of L bits each.
Assume these packets arrive back-to-back at a narrow link
with capacity C bps. Note that the arrival of a packet occurs
when the last bit of the packet is received.
Assuming that no cross-traﬃc interferes with the packets
at the narrow link, the second packet departs L/C time units
after the ﬁrst packet, and this is also equal to the dispersion
T between the packets. This dispersion is the time in which
cross-traﬃc packets can interfere with the packet pair at a
post-narrow link. That is, a cross-traﬃc packet “arriving” in
this time will be served between the two packets, causing the
second packet to queue. This consequently causes expansion
of dispersion. We refer to this time as the “vulnerability
window” of the packet pair.
The probability of queuing of the second packet can be
reduced by decreasing the size of the packets. As shown in
Figure 3, the size of the packets is reduced to L/2 bits. The
“vulnerability window” in this case is T = L/2C, which is
smaller than L/C. Thus, by reducing the packet size, the
chances of the second packet being queued are reduced. This
reduces the chances of capacity under-estimation.
We now consider the eﬀect of packet size on probability
of queuing of the ﬁrst packet of a probing pair. We observe
that the queuing behavior of the ﬁrst packet is similar to
that of an independent single packet. Since the probability
of queuing of a single packet is independent of its size, this