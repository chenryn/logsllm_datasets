    `# virsh dumpxml VM-name`{.literal}
    ``` programlisting
      [...]
        800
          /dev/sda
          1000
          /dev/sdb
          500
      [...]
    ```
2.  编辑指定设备的 I/O 加权：
    ``` literallayout
    # virsh blkiotune VM-name --device-weights device, I/O-weight
    ```
    例如：以下将 [*liftrul*]{.emphasis} 虚拟机中的
    [*/dev/sda*]{.emphasis} 设备的权重改为 500。
    ``` literallayout
    # virsh blkiotune liftbrul --device-weights /dev/sda, 500
    ```
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#disk-i-o-throttling-in-virtual-machines_optimizing-virtual-machine-i-o-performance}虚拟机中的磁盘 I/O 节流 {.title}
:::
当多个虚拟机同时运行时，它们可能会通过使用过量磁盘 I/O
来干扰系统性能。KVM 虚拟化中的磁盘 I/O
节流使得能够对从虚拟机发送至主机的磁盘 I/O
请求设定限制。这可以防止虚拟机过度利用共享资源并影响其他虚拟机的性能。
要启用磁盘 I/O
节流，请对从附加到虚拟机到主机计算机的每个块设备发送的磁盘 I/O
请求设置限制。
::: orderedlist
**流程**
1.  使用 `virsh domblklist`{.literal}
    命令列出指定虚拟机上所有磁盘设备的名称。
    ``` literallayout
    # virsh domblklist rollin-coal
    Target     Source
    ------------------------------------------------
    vda        /var/lib/libvirt/images/rollin-coal.qcow2
    sda        -
    sdb        /home/horridly-demanding-processes.iso
    ```
2.  找到您要节流的虚拟磁盘挂载的主机块设备。
    例如，如果您想要从上一步中节流 `sdb`{.literal}
    虚拟磁盘，以下输出显示该磁盘挂载在 `/dev/nvme0n1p3`{.literal}
    分区上。
    ``` literallayout
    $ lsblk
    NAME                                          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
    zram0                                         252:0    0     4G  0 disk  [SWAP]
    nvme0n1                                       259:0    0 238.5G  0 disk
    ├─nvme0n1p1                                   259:1    0   600M  0 part  /boot/efi
    ├─nvme0n1p2                                   259:2    0     1G  0 part  /boot
    └─nvme0n1p3                                   259:3    0 236.9G  0 part
      └─luks-a1123911-6f37-463c-b4eb-fxzy1ac12fea 253:0    0 236.9G  0 crypt /home
    ```
3.  使用 `virsh blkiotune`{.literal} 命令为块设备设置 I/O 限制。
    ``` literallayout
    # virsh blkiotune VM-name --parameter device,limit
    ```
    以下示例将 `rollin-coal`{.literal} 上的 `sdb`{.literal}
    磁盘节流为每秒 1000 个读写 I/O 操作，每秒的读写 I/O 操作吞吐量 50
    MB。
    ``` literallayout
    # virsh blkiotune rollin-coal --device-read-iops-sec /dev/nvme0n1p3,1000 --device-write-iops-sec /dev/nvme0n1p3,1000 --device-write-bytes-sec /dev/nvme0n1p3,52428800 --device-read-bytes-sec /dev/nvme0n1p3,52428800
    ```
:::
::: itemizedlist
**附加信息**
-   磁盘 I/O
    节流可用于各种情况，例如，属于不同客户的虚拟机在同一主机上运行，或者为不同的虚拟机提供服务质量保障时。磁盘
    I/O 节流还可用来模拟较慢的磁盘。
-   I/O 节流可以独立于附加到虚拟机的每个块设备应用，并支持吞吐量和 I/O
    操作的限制。
-   红帽不支持使用 `virsh blkdeviotune 命令在`{.literal} VM 中配置 I/O
    限流。有关使用 RHEL 8 作为虚拟机主机时不支持的功能的更多信息，请参阅
    [RHEL 8
    虚拟化中不支持的功能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/feature-support-and-limitations-in-rhel8-virtualization_configuring-and-managing-virtualization#unsupported-features-in-rhel8-virtualization_feature-support-and-limitations-in-rhel8-virtualization){.link}。
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#configuring-multi-queue-virtio-scsi_optimizing-virtual-machine-i-o-performance}启用多队列 virtio-scsi {.title}
:::
在虚拟机(VM)中使用 `virtio-scsi`{.literal} 存储设备 [*时，多队列
virtio-scsi*]{.emphasis} 功能可提高存储性能和可扩展性。它允许每个虚拟
CPU(vCPU)拥有单独的队列和中断，而不影响其他 vCPU。
::: itemizedlist
**流程**
-   要为特定虚拟机启用多队列 virtio-scsi 支持，请在虚拟机的 XML
    配置中添加以下内容，其中 [*N*]{.emphasis} 是 vCPU 队列的总数：
    ``` programlisting
    ```
:::
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#optimizing-virtual-machine-cpu-performance_optimizing-virtual-machine-performance-in-rhel}优化虚拟机 CPU 性能 {.title}
:::
与主机计算机中的物理 CPU 非常相似，vCPU
对虚拟机(VM)性能至关重要。因此，优化 vCPU
会对虚拟机的资源效率产生重大影响。优化 vCPU：
::: orderedlist
1.  调整分配给虚拟机的主机 CPU 数。您可以使用
    [CLI](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#adding-and-removing-virtual-cpus-using-the-command-line-interface_optimizing-virtual-machine-cpu-performance "使用命令行界面添加和删除虚拟 CPU"){.link}
    或 [Web
    控制台](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#managing-virtual-cpus-using-the-web-console_optimizing-virtual-machine-cpu-performance "使用 Web 控制台管理虚拟 CPU"){.link}进行此操作。
2.  确保 vCPU 模型与主机的 CPU 型号一致。例如，将
    [*testguest1*]{.emphasis} 虚拟机设置为使用主机的 CPU 型号：
    ``` literallayout
    # virt-xml testguest1 --edit --cpu host-model
    ```
3.  [取消激活内核同页合并(KSM)。](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#deactivating-ksm_optimizing-virtual-machine-cpu-performance "取消激活内核相同页面合并"){.link}
4.  如果您的主机使用非统一内存访问(NUMA)，您也可以为其虚拟机 [**配置
    NUMA**]{.strong}。这会尽可能将主机的 CPU 和内存进程映射到虚拟机的
    CPU 和内存进程上。实际上，NUMA 调优为 vCPU
    提供了对分配给虚拟机的系统内存的更精简访问，这可以提高 vCPU
    处理效率。
    详情请查看 ["在虚拟机中配置
    NUMA"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#configuring-numa-in-a-virtual-machine_optimizing-virtual-machine-cpu-performance "在虚拟机中配置 NUMA"){.xref}
    和 ["vCPU
    性能调整场景示例"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#sample-vcpu-performance-tuning-scenario_optimizing-virtual-machine-cpu-performance "vCPU 性能调整场景示例"){.xref}。
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#adding-and-removing-virtual-cpus-using-the-command-line-interface_optimizing-virtual-machine-cpu-performance}使用命令行界面添加和删除虚拟 CPU {.title}
:::
要提高或优化虚拟机(VM)的 CPU 性能，您可以添加或删除分配给虚拟机的虚拟
CPU(vCPU)。
当在运行的虚拟机上执行时，这也被称为 vCPU 热插和热拔。但请注意，RHEL 8
不支持 vCPU 热拔，红帽不建议使用它。
::: itemizedlist
**先决条件**
-   [**可选：**]{.strong}查看目标虚拟机中的 vCPU 的当前状态。例如，显示
    [*testguest*]{.emphasis} 虚拟机上的 vCPU 数量：
    ``` literallayout
    # virsh vcpucount testguest
    maximum      config         4
    maximum      live           2
    current      config         2
    current      live           1
    ```
    此输出显示 [*testguest*]{.emphasis} 目前使用 1 个 vCPU，另外 1 个
    vCPu 可以热插入以提高虚拟机性能。但是，重新引导后，vCPU
    [*testguest*]{.emphasis} 使用的数量会改为 2，而且能够热插 2 个
    vCPU。
:::
::: orderedlist
**流程**
1.  调整可以附加到虚拟机的最大 vCPU 数量，这在虚拟机下次引导时生效。
    例如，要将 [*testguest*]{.emphasis} 虚拟机的最大 vCPU 数量增加到 8:
    ``` literallayout
    # virsh setvcpus testguest 8 --maximum --config
    ```
    请注意，最大值可能受 CPU
    拓扑、主机硬件、系统管理程序和其他因素的限制。
2.  将当前附加到虚拟机的 vCPU 数量调整到上一步中配置的最大值。例如：
    ::: itemizedlist
    -   将附加到正在运行的 [*testguest*]{.emphasis} 虚拟机的 vCPU
        数量增加到 4:
        ``` literallayout
        # virsh setvcpus testguest 4 --live
        ```
        这会增加虚拟机的性能和主机的 [*testguest*]{.emphasis}
        负载占用，直到虚拟机下次引导为止。
    -   将附加到 [*testguest*]{.emphasis} 虚拟机的 vCPU 数量永久减少至
        1：
        ``` literallayout
        # virsh setvcpus testguest 1 --config
        ```
        这会降低虚拟机的性能和 [*testguest*]{.emphasis}
        的主机负载占用。但是，如果需要可热插入虚拟机以暂时提高性能。
    :::
:::
::: itemizedlist
**验证**
-   确认虚拟机的 vCPU 的当前状态反映了您的更改。
    ``` literallayout
    # virsh vcpucount testguest
    maximum      config         8
    maximum      live           4
    current      config         1
    current      live           4
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 web 控制台添加和删除 vCPU 的详情，请参考 ["使用 Web
    控制台管理虚拟
    CPU"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#managing-virtual-cpus-using-the-web-console_optimizing-virtual-machine-cpu-performance "使用 Web 控制台管理虚拟 CPU"){.xref}。
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#managing-virtual-cpus-using-the-web-console_optimizing-virtual-machine-cpu-performance}使用 Web 控制台管理虚拟 CPU {.title}
:::
使用 RHEL 8 web 控制台，您可以查看并配置 web
控制台连接的虚拟机使用的虚拟 CPU。
::: itemizedlist
**先决条件**
-   Web 控制台 VM 插件
    [已安装在您的系统上](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization){.link}。
:::
::: orderedlist
**流程**
1.  在 [Virtual Machines]{.guimenu} 界面中，点击您要查看的信息的虚拟机。
    此时将打开一个新页面，其中包含\"概述\"部分，其中包含关于所选虚拟机的基本信息，以及用于访问虚拟机的图形界面的控制台部分。
2.  单击 Overview 窗格中 vCPU 数旁边的 [edit]{.guibutton}。
    此时会出现 vCPU 详情对话框。
    ::: informalfigure
    ::: mediaobject
    ![显示 VM CPU
    详情对话框的映像.](images/virt-cockpit-configure-vCPUs.png){width="540"}
    :::
    :::
:::
::: orderedlist
1.  为所选虚拟机配置虚拟 CPU。
    ::: itemizedlist
    -   [**vCPU 数量**]{.strong} - 当前正在使用的 vCPU 数量。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        vCPU 数量不能超过 vCPU 的最大值。
        :::
    -   [**vCPU 最大**]{.strong} - 可为虚拟机配置的最大虚拟 CPU
        数。如果这个值大于 [**vCPU
        Count**]{.strong}，可以为虚拟机附加额外的 vCPU。
    -   [**插槽**]{.strong} - 向虚拟机公开的插槽数量。
    -   [**每个插槽的内核数**]{.strong} -
        向虚拟机公开的每个插槽的内核数。
    -   [**每个内核的线程数**]{.strong} -
        向虚拟机公开的每个内核的线程数。
        请注意，
        [**插槽**]{.strong}、[**每个插槽的内核数**]{.strong}和[**每个内核的线程数**]{.strong}选项调整了虚拟机的
        CPU 拓扑。这可能对 vCPU
        性能有用，可能会影响客户机操作系统中某些软件的功能。如果您的部署不需要不同的设置，红帽建议保留默认值。