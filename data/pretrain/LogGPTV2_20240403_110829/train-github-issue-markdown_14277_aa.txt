Username:  
Linux chandu 4.15.0-24-generic #26~16.04.1-Ubuntu SMP Fri Jun 15 14:35:08 UTC
2018 x86_64 x86_64 x86_64 GNU/Linux
This is the process I have followed:  
https://caffe2.ai/docs/getting-
started.html?platform=ubuntu&configuration=compile
1).  
sudo apt-get update  
sudo apt-get install -y --no-install-recommends  
build-essential  
cmake  
git  
libgoogle-glog-dev  
libgtest-dev  
libiomp-dev  
libleveldb-dev  
liblmdb-dev  
libopencv-dev  
libopenmpi-dev  
libsnappy-dev  
libprotobuf-dev  
openmpi-bin  
openmpi-doc  
protobuf-compiler  
python-dev  
python-pip
pip install --user  
future  
numpy  
protobuf
  2. sudo apt-get install -y --no-install-recommends libgflags-dev
  3. git clone --recursive https://github.com/pytorch/pytorch.git && cd pytorch
  4. git submodule update --init
  5. mkdir build && cd build
  6. cmake ..
The output of cmake .. is:
\-- Not forcing any particular BLAS to be found  
\-- Build type not set - defaulting to Release  
\-- Performing Test CAFFE2_LONG_IS_INT32_OR_64  
\-- Performing Test CAFFE2_LONG_IS_INT32_OR_64 - Success  
\-- Does not need to define long separately.  
\-- Performing Test CAFFE2_EXCEPTION_PTR_SUPPORTED  
\-- Performing Test CAFFE2_EXCEPTION_PTR_SUPPORTED - Success  
\-- std::exception_ptr is supported.  
\-- Performing Test CAFFE2_IS_NUMA_AVAILABLE  
\-- Performing Test CAFFE2_IS_NUMA_AVAILABLE - Success  
\-- NUMA is available  
\-- Performing Test CAFFE2_NEED_TO_TURN_OFF_DEPRECATION_WARNING  
\-- Performing Test CAFFE2_NEED_TO_TURN_OFF_DEPRECATION_WARNING - Success  
\-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS  
\-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS - Success  
\-- Current compiler supports avx2 extention. Will build perfkernels.  
\-- Performing Test COMPILER_SUPPORTS_HIDDEN_VISIBILITY  
\-- Performing Test COMPILER_SUPPORTS_HIDDEN_VISIBILITY - Success  
\-- Performing Test COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY  
\-- Performing Test COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY - Success  
\-- Building using own protobuf under third_party per request.  
\-- Use custom protobuf build.  
\-- Looking for pthread.h  
\-- Looking for pthread.h - found  
\-- Looking for pthread_create  
\-- Looking for pthread_create - not found  
\-- Looking for pthread_create in pthreads  
\-- Looking for pthread_create in pthreads - not found  
\-- Looking for pthread_create in pthread  
\-- Looking for pthread_create in pthread - found  
\-- Found Threads: TRUE  
\-- Caffe2 protobuf include directory:
$&lt;BUILD_INTERFACE:/home/chandu/workspace/tracking/pytorch/third_party/protobuf/src&gt;$&lt;INSTALL_INTERFACE:include>  
\-- Found Git: /usr/bin/git (found version "2.7.4")  
\-- The BLAS backend of choice:Eigen  
\-- Brace yourself, we are building NNPACK  
\-- The ASM compiler identification is GNU  
\-- Found assembler: /usr/bin/gcc-4.9  
\-- Found PythonInterp: /usr/bin/python (found version "2.7.12")  
\-- Check if compiler accepts -pthread  
\-- Check if compiler accepts -pthread - yes  
\-- Caffe2: Cannot find gflags automatically. Using legacy find.  
\-- Found gflags: /usr/include  
\-- Caffe2: Found gflags (include: /usr/include, library:
/usr/lib/x86_64-linux-gnu/libgflags.so)  
\-- Caffe2: Cannot find glog automatically. Using legacy find.  
\-- Found glog: /usr/include  
\-- Caffe2: Found glog (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/libglog.so)  
\-- Found LMDB: /usr/include  
\-- Found lmdb (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/liblmdb.so)  
\-- Found LevelDB: /usr/include  
\-- Found LevelDB (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/libleveldb.so)  
\-- Found Snappy: /usr/include  
\-- Found Snappy (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/libsnappy.so)  
\-- Found Numa: /usr/include  
\-- Found Numa (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/libnuma.so)  
\-- OpenCV found (/usr/share/OpenCV)  
CMake Warning at cmake/Dependencies.cmake:330 (find_package):  
By not providing "FindEigen3.cmake" in CMAKE_MODULE_PATH this project has  
asked CMake to find a package configuration file provided by "Eigen3", but  
CMake did not find one.
Could not find a package configuration file provided by "Eigen3" with any  
of the following names:
    Eigen3Config.cmake
    eigen3-config.cmake
Add the installation prefix of "Eigen3" to CMAKE_PREFIX_PATH or set  
"Eigen3_DIR" to a directory containing one of the above files. If "Eigen3"  
provides a separate development package or SDK, be sure it has been  
installed.  
Call Stack (most recent call first):  
CMakeLists.txt:190 (include)
\-- Did not find system Eigen. Using third party subdirectory.  
\-- Found PythonInterp: /usr/bin/python (found suitable version "2.7.12",
minimum required is "2.7")  
\-- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython2.7.so (found
suitable version "2.7.12", minimum required is "2.7")  
\-- Found NumPy: /usr/local/lib/python2.7/dist-packages/numpy/core/include
(found version "1.14.0")  
\-- NumPy ver. 1.14.0 found (include: /usr/local/lib/python2.7/dist-
packages/numpy/core/include)  
\-- Could NOT find pybind11 (missing: pybind11_INCLUDE_DIR)  
\-- Found MPI_C: /usr/lib/openmpi/lib/libmpi.so  
\-- Found MPI_CXX:
/usr/lib/openmpi/lib/libmpi_cxx.so;/usr/lib/openmpi/lib/libmpi.so  
\-- MPI support found  
\-- MPI compile flags:  
\-- MPI include path:
/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include/usr/lib/openmpi/include/usr/lib/openmpi/include/openmpi  
\-- MPI LINK flags path: -Wl,-rpath -Wl,/usr/lib/openmpi/lib -Wl,--enable-new-
dtags  
\-- MPI libraries:
/usr/lib/openmpi/lib/libmpi_cxx.so/usr/lib/openmpi/lib/libmpi.so  
CMake Warning at cmake/Dependencies.cmake:396 (message):  
OpenMPI found, but it is not built with CUDA support.  
Call Stack (most recent call first):  
CMakeLists.txt:190 (include)
\-- Found CUDA: /usr/local/cuda (found suitable version "9.0", minimum
required is "7.0")  
\-- Caffe2: CUDA detected: 9.0  
\-- Caffe2: CUDA nvcc is: /usr/local/cuda/bin/nvcc  
\-- Caffe2: CUDA toolkit directory: /usr/local/cuda  
\-- Caffe2: Header version is: 9.0  
\-- Found CUDNN: /usr/include  
\-- Found cuDNN: v7.0.5 (include: /usr/include, library:
/usr/lib/x86_64-linux-gnu/libcudnn.so)  
\-- Autodetected CUDA architecture(s): 6.1 6.1 6.1 6.1  
\-- Added CUDA NVCC flags for: -gencode;arch=compute_61,code=sm_61  
\-- Found NCCL: /usr/local/include  
\-- Determining NCCL version from the header file: /usr/local/include/nccl.h  
\-- Found NCCL (include: /usr/local/include, library:
/usr/local/lib/libnccl.so)  
\-- Could NOT find CUB (missing: CUB_INCLUDE_DIR)  
\-- Could NOT find Gloo (missing: Gloo_INCLUDE_DIR Gloo_LIBRARY)  
\-- MPI include path:
/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include/usr/lib/openmpi/include/usr/lib/openmpi/include/openmpi  
\-- MPI libraries:
/usr/lib/openmpi/lib/libmpi_cxx.so/usr/lib/openmpi/lib/libmpi.so  
\-- CUDA detected: 9.0  
\-- Found libcuda: /usr/lib/x86_64-linux-gnu/libcuda.so  
\-- Found libnvrtc: /usr/lib/x86_64-linux-gnu/libnvrtc.so  
\-- Determining NCCL version from the header file: /usr/local/include/nccl.h  
\-- Found NCCL (include: /usr/local/include, library:
/usr/local/lib/libnccl.so)  
CMake Warning at cmake/Dependencies.cmake:623 (message):  
mobile opengl is only used in android or ios builds.  
Call Stack (most recent call first):  
CMakeLists.txt:190 (include)
CMake Warning at cmake/Dependencies.cmake:699 (message):  
Metal is only used in ios builds.  
Call Stack (most recent call first):  
CMakeLists.txt:190 (include)
\-- GCC 5.5.0: Adding gcc and gcc_s libs to link line  
\-- Include NCCL operators  
\-- Excluding ideep operators as we are not using ideep  
\-- Including image processing operators  
\-- Excluding video processing operators due to no opencv  
\-- Excluding mkl operators as we are not using mkl  
\-- Include Observer library  
\-- Using lib/python2.7/dist-packages as python relative installation path  
\-- Automatically generating missing **init**.py files.  
CMake Warning at CMakeLists.txt:353 (message):  
Generated cmake files are only fully tested if one builds with system glog,  
gflags, and protobuf. Other settings may generate files that are not well  
tested.
## \--  
\-- ******** Summary ********  
\-- General:  
\-- CMake version : 3.5.1  
\-- CMake command : /usr/bin/cmake  
\-- Git version : v0.1.11-9300-gbb9ff58-dirty  
\-- System : Linux  
\-- C++ compiler : /usr/bin/g++-4.9  
\-- C++ compiler version : 5.5.0  
\-- BLAS : Eigen  
\-- CXX flags : -fvisibility-inlines-hidden -DONNX_NAMESPACE=onnx_c2 -O2 -fPIC
-Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits
-Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter
-Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-
aliasing -Wno-error=deprecated-declarations  
\-- Build type : Release  
\-- Compile definitions :  
\-- CMAKE_PREFIX_PATH :  
\-- CMAKE_INSTALL_PREFIX : /usr/local
\-- BUILD_CAFFE2 : ON  
\-- BUILD_ATEN : OFF  
\-- BUILD_BINARY : ON  
\-- BUILD_CUSTOM_PROTOBUF : ON  
\-- Link local protobuf : ON  
\-- BUILD_DOCS : OFF  
\-- BUILD_PYTHON : ON  
\-- Python version : 2.7.12  
\-- Python executable : /usr/bin/python  
\-- Python includes : /usr/include/python2.7  
\-- Python site-packages: lib/python2.7/dist-packages  
\-- BUILD_SHARED_LIBS : ON  
\-- BUILD_TEST : OFF  
\-- USE_ASAN : OFF  
\-- USE_ATEN : OFF  
\-- USE_CUDA : ON  
\-- CUDA static link : OFF  
\-- USE_CUDNN : ON  
\-- CUDA version : 9.0  
\-- cuDNN version : 7.0.5  
\-- CUDA root directory : /usr/local/cuda  
\-- CUDA library : /usr/lib/x86_64-linux-gnu/libcuda.so  
\-- cudart library :
/usr/local/cuda/lib64/libcudart_static.a;-pthread;dl;/usr/lib/x86_64-linux-
gnu/librt.so  
\-- cublas library :
/usr/local/cuda/lib64/libcublas.so;/usr/local/cuda/lib64/libcublas_device.a  
\-- cufft library : /usr/local/cuda/lib64/libcufft.so  
\-- curand library : /usr/local/cuda/lib64/libcurand.so  
\-- cuDNN library : /usr/lib/x86_64-linux-gnu/libcudnn.so  
\-- nvrtc : /usr/lib/x86_64-linux-gnu/libnvrtc.so  
\-- CUDA include path : /usr/local/cuda/include  
\-- NVCC executable : /usr/local/cuda/bin/nvcc  
\-- CUDA host compiler : /usr/bin/gcc-4.9  
\-- USE_TENSORRT : OFF  
\-- USE_ROCM : OFF  
\-- USE_EIGEN_FOR_BLAS : ON  
\-- USE_FFMPEG : OFF  