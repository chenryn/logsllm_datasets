所有人关注的焦点，包括市场部门和一些高级管理者。这时，对于接受
调试任务的工程师来说，除了要面对技术上的难题外，还要承受很多其
他方面的压力。这种压力有时会加快问题的解决，有时会使他们手忙脚
乱而变得效率更低。
对于如何才能更好地预测软件调试任务的完成时间，目前还没有很
有效的方法，为了降低风险，项目团队应该尽可能地让经验丰富的工程
师来做预测，并综合考虑多个人的估计结果。
 老雷评点  
沧海横流，方显英雄本色。面对高难的bug，当芸芸众生都
望而却步的时候，真的高手会知难而上，力挽狂澜,并因此脱颖
而出，建立起在团队中的声望。很多程序员同行常常为自己的职
业方向困惑，不知道做技术的出路在哪里，年纪大了怎么办。老
雷的经验是选择软件调试这样有难度的技术方向钻研下去，不断
提升自身的价值。调试技术不仅本身具有很强的实用性，还可以
以它作为工具快速学习其他技术，不断增强自己的技术。
1.2.3 广泛的关联性
很多调试机制是操作系统、中央处理器和调试器相互协作的复杂过
程，比如Windows本地调试中的软件断点功能通常是依赖于CPU的断点
指令（对于x86，即INT 3）的，CPU执行到断点指令时中断下来，并以
异常的方式报告给操作系统，再由操作系统将这个事件分发给调试器。
另外，软件调试与编译器有着密切的关系。软件的调试版本包含了
很多用来辅助软件调试的信息，具有更好的可调试性。调试信息中很重
要的一个部分便是调试符号，它是进行源代码级调试所必需的。
综上所述，软件调试与计算机系统的硬件核心（CPU）和软件核心
（操作系统）都有着很紧密的耦合关系，与软件生产的主要机器——编
译器也息息相关。因此，可以说软件调试具有广泛的关联性，这有时也
被称为系统性。
软件调试的广泛关联性增加了理解软件调试过程的难度，同时也导
致软件调试技术难以在短时间内迅速发展和升级。因为要开发一种新的
调试手段，通常需要硬件、操作系统和工具软件三个环节的支持，要涉
及很多厂商或组织。这也是软件调试技术滞后于其他技术的一个原因。
一般来说，对于一种新出现的软硬件技术，对应的有效软件调试技术要
滞后一段时间才出现。
从学习的角度来看，软件调试的广泛关联性使其成为让学习者达到
融会贯通境界的一种绝好途径。在基本掌握对CPU、操作系统、编译
器、编程语言等知识后，学习者可以通过学习软件调试技术和实践来加
深对这些知识的理解，并把它们联系起来。
 老雷评点  
无论学习什么技术或者学问，要达到融会贯通的境界，都要
付出大量辛勤的汗水。使用调试方法的好处是有针对性，生动高
效，不枯燥。比如今日要学习文件系统，那么便把断点设在文件
系统的函数上，命中后观察谁在调用它，它又去调用谁，如此坚
持不懈，“至于用力之久，而一旦豁然贯通焉，则众物之表里精
粗无不到，而吾心之全体大用无不明矣。”（朱熹语）
1.3 简要历史
计算机领域的拓荒者们在设计最初的计算机系统时，就考虑到了调
试问题——既包括如何调试系统中的硬件，又包括如何调试系统中的软
件。现代计算机是从20世纪40年代开始出现并迅速发展起来的，经历了
从大型机到小型机再到微型机的几个主要发展阶段。
关于早期大型机和小型机的原始文档已经成为珍贵的历史资料了，
大多被收藏在博物馆中。但幸运的是，在作者收集到的关于早期计算机
的有限资料中，几乎每一本都包含了关于调试的内容。这不仅是因为运
气，更是因为当时人们就非常重视调试。
本节将以大型机、小型机和微型机三个阶段中有代表性的计算机系
统为例，介绍它们实现调试功能的方式，旨在勾勒出软件调试的简要发
展历史，帮助读者了解典型软件调试功能的演进过程。
1.3.1 单步执行
UNIVAC Ⅰ（Universal Automatic ComputerⅠ）是世界上最早大规
模生产的商用现代计算机，之前的计算机都是只生产一台而且用于军事
和学术领域。从1951年开始，共有46台UNIVAC Ⅰ销售给不同的公司和
组织，每台的售价都高于100万美元，其中一些一直工作到1970年。
1952年，哥伦比亚广播公司租用UNIVAC Ⅰ准确预测出了当年美国总统
的大选结果，这不仅使UNIVAC声名大振，也使人们对计算机的功能有
了新的认识。
与需要一个楼面来安放的ENIAC相比，UNIVAC Ⅰ已经小了很多，
但整个系统仍然需要一个30多平方米的房间才能放得下。典型的
UNIVAC Ⅰ系统由主机（central computer）、磁带驱动器（名为
UNISERVO，最多可配置10台）、打印机（uniprinter）、打字机
（typewriter）、监视控制台（supervisory control）和用于维护的示波器
所组成。
在写字台大小的UNIVAC Ⅰ监视控制台上有很多指示灯和开关。其
中有一个名为Interrupted Operation Switch（IOS）的开关（见图1-3）与
软件调试有着密切的关系。
图1-3 UNIVAC Ⅰ监视控制台上的IOS开关
IOS开关共有中间和上、下、左、右5个位置，分别代表5种运行模
式。中间位置代表正常模式，在此模式下计算机会连续执行内存中的程
序指令，因此这个模式又称为连续（continuous）模式。其他4 个位置代
表不同作用的“单步”模式，分别为ONE OPERATION（上）、ONE
INSTRUCTION（下）、ONE STEP（左）和ONE ADDITION（右），
即一次执行一个操作，一次执行一条指令，一次执行一步，一次执行一
次加法运算。
当IOS开关位于4种单步模式之一时，CPU执行完一条指令或一个操
作后便会停下来，让用户检查当前的寄存器和内存状态。在检查后，只
要按键盘（监视控制台的一部分）上的开始键（START BAR），便可
以让系统继续执行。
UNIVAC Ⅰ的操作手册详细介绍了IOS开关的使用方法、如何使用
不同的模式来启动和调试程序以及诊断软硬件问题。
 老雷评点  
2011年9月，在位于加州山景城（Moutain View）的计算机
历史博物馆中，老雷意外看到一台UNIVAC Ⅰ 陈列在那里，上
文提到的IOS开关赫然在眼前。这让老雷几乎泫然欲泣，于是从
不同角度拍照，流连许久不忍离去。
作者不能确认在UNIVAC Ⅰ之前的计算机是否使用了类似IOS这样
的硬件开关来控制程序单步执行。但可以说，这是比较早的单步执行方
式，而且这种方式一直延续到小型机时代。在图1-4所示的著名小型机
PDP-1的控制面板照片上，右上角的3个开关中，中间一个便是SINGLE
STEP（单步），其下方是SINGLE INST（Single Instruction）（单指
令）。
1971年，Intel成功推出了世界上第一款微处理器4004，标志着计算
机开始向微型化方向发展。1978年，x86 CPU的第一代8086 CPU问世，
在其标志寄存器（FLAGS）中（见图1-5），专门设计了一个用于软件
调试的标志位，叫作TF（Trace Flag），在第8位（Bit 8）。
图1-4 PDP-1的控制面板
图1-5 8086 CPU的标志寄存器（FLAGS）
TF位主要是供调试器软件来使用的，当用户需要单步跟踪时，调试
器会设置TF位，当CPU执行完一条指令后会检查TF位，如果这个位为
1，那么便会产生一个调试异常（INT 1），目的是停止执行当前的程
序，中断到调试器中。
从上面的介绍中，我们看到了单步执行功能从专门的硬件开关向寄
存器中的一个标志位演进的过程。这种变化趋势是与计算机软硬件的总
体发展相适应的。因为在UNIVAC Ⅰ时代，还没有完善的软件环境和调
试器软件，所以使用一个专门的硬件开关是一种很合理有效的方案。在
微处理器出现的时代，软件已经大大发展起来，操作系统和调试器都已
经比较成熟，因此，使用寄存器的一个标志位来代替专门的硬件也变得
水到渠成，因为这样不仅简化了硬件设计、降低了成本，还适合让调试
器软件以程序方式控制。
1.3.2 断点指令
在UNIVAC Ⅰ的43条指令中，有一条使用逗号（，）表示的指令，
是专门用来支持断点功能的，称为逗号断点（comma breakpoint）指
令。同时，在UNIVAC Ⅰ的监视控制台上有一个名为逗号断点的两态开
关（comma breakpoint switch），如果按下这个开关，那么当计算机执
行到逗号断点指令时就会停下来，让用户检查程序状态，进行调试。如
果没有按下开关，那么计算机会将其视作跳过（skip）指令，不做任何
操作，执行后面的指令。
除了逗号断点指令，UNIVAC的打印指令50m（m为内存地址）也
可以产生断点效果。它是与监视控制台上的输出断点开关（output
breakpoint switch）配合工作的。这个开关有3个状态（位置）：正常
（normal）、跳过（skip）和断点（breakpoint）。如果这个开关在正常
位置，那么执行50m指令输出内存地址m的内容；如果开关在跳过位
置，那么这条指令会被忽略；如果开关在断点位置，那么执行到这里时
计算机会中断。可见这条指令不仅实现了一种可随时开启关闭的监视点
功能，还可以根据需要停在监视点位置，这时又相当于一种外部可控的
断点。
综上所述，UNIVAC Ⅰ提供了两种断点指令，并配备了与指令协同
工作的硬件开关，实现了主要靠硬件工作的非常简朴的断点功能。这种
实现方式不需要软件调试器参与，也没有为实现软件调试器提供足够支
持。
我们再来看一下小型机PDP-1上是如何提供断点支持的。概括来
讲，PDP-1提供了一条名为jda的指令，供调试器开发者来实现断点功
能。这条指令的语法是：
jda Y
它执行的操作是将AC（Accumulator）寄存器的内容存入地址Y，
然后把程序计数器（Program Counter，相当于IP）的值放入AC寄存器，
并跳转到Y+1。利用这条指令，调试器可以这样实现断点功能。
当向某一地址设置断点时，将这一地址及其值都保存起来，并将这
一地址处的内容替换成一条jda指令。指令的操作符Y是仔细设计好
的，指向调试器的数据和代码。
当程序执行到断点位置时，系统会执行那里的jda指令，跳转到调
试器的代码。调试器根据AC寄存器的内容知道这个断点的发生位
置，找到它所对应的断点记录，然后保存寄存器的内容（上下
文），并打印出存储在位置Y的AC寄存器内容给调试者。调试者可
以输入内存观察命令或执行其他调试功能，待调试结束后，输入某
一个命令恢复执行。这时调试器需要恢复寄存器的值，将保存的指
令恢复回去，然后跳转回去继续执行。
在x86系列CPU中，有一条使用异常机制的断点指令，即INT 3，供
调试器来设置断点。调试器会在合适的时机将断点处的指令替换为INT
3，当CPU执行到这里时，会产生断点异常，跳转到异常处理例程。我
们将在以后的章节中详细介绍其细节。
1.3.3 分支监视
程序中的分支和跳转指令对于软件的执行流程和执行结果起着关键
作用，不恰当的跳转往往是很多软件问题的错误根源。有时跟踪一个程
序，是为了检查它的跳转时机和跳转方向。因此，监视和报告程序的分
支位置和当时的状态对软件调试是很有意义的。
UNIVAC Ⅰ的条件转移断点（conditional transfer breakpoint）功能
正是针对这一需求而设计的。同样，这一机制由两个部分组成：一个部
分是条件转移指令Qn m和Tn m；另一部分是监视控制台上的按钮和指
示灯。指令中的m是跳转的目标地址，n是0到9的10个值之一，与控制
台上的0～9这10组按键（称为条件转移断点选择按钮）及指示灯相对
应。图1-6是控制面板的相关部分，下面一排共有12个按钮，上面一排
为指示灯，当某个按钮按下时，它上面的指示灯会变亮。最左侧红色按
钮（位于ALL按钮左侧）的作用是将所有按钮复位。当程序执行到Qn和
Tn指令时，系统会检查对应的条件转移断点选择按钮是否被按下。如果
按钮未被按下，那么系统会正常执行；如果按钮ALL被按下，那么系统
会中断执行，相当于遇到一个断点。
当UNIVAC Ⅰ因为条件转移断点而停止后，图1-6中的条件转移
（CONDITIONAL TRANSFER）指示灯会根据指令的比较结果，显示
即将跳转与否。如果调试人员希望执行与比较结果相反的动作，那么可
以通过右侧的开关强制跳转或不跳转。
图1-6 UNIVAC Ⅰ的条件转移断点控制按钮和指示灯
英特尔P6系列CPU引入了记录分支、中断和异常的功能，以及针对
分支设置断点和单步执行，我们将在第2篇详细介绍这些功能。
本节简要介绍了3种调试功能的发展历史，我们从中可以看出从单
纯的硬件机制到软硬件相互配合来调试软件的基本规律。使用软件来调
试软件的最重要工具就是调试器（debugger）。关于调试器的详细发展
历史参见卷2。
1.4 分类
根据被调试软件的特征、所使用的调试工具以及软件的运行环境等
要素，可以把软件调试分成很多个子类。本节将介绍几种常用的分类方
法，并介绍每一种分类方法中的典型调试任务。
1.4.1 按调试目标的系统环境分类
软件调试所使用的工具和方法与操作系统有着密切的关系。例如，
很多调试器是针对操作系统所设计的，只能在某一种或几种操作系统上
运行。对软件调试的一种基本分类标准就是被调试程序（调试目标）所
运行的系统环境（操作系统）。按照这个标准，我们可以把调试分为
Windows下的软件调试、Linux下的软件调试、DOS下的软件调试，等
等。
这种分类方法主要是针对编译为机器码的本地（native）程序而言
的。对于使用Java和.NET等动态语言所编写的运行在虚拟机中的程序，
它们具有较好的跨平台特性，与操作系统的关联度较低，因此不适用于