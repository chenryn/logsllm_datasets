### 漏洞简介
cve-2017-5662：batik 
    orich1
收到了连接请求，这就说明xxe是存在的，并且应该就是在解析svg文件时触发的
那么现在我们有两个选择，要么打断点使用payload调试，要么直接看代码静态跟进  
虽然调试的方式速度快很多，但是我觉得静态跟进更亲切一点，也能更清楚看见调用流程中发生了什么
那么就从 void main 开始看
跟进Main的构造函数（其实就是当前类的构造函数）
_代码太长，不全帖_  
它首先判断了操作系统平台，还有一大堆的对话框初始化，接着就是设置各种Canvas的Listener，说实话看到这里有点发慌，不知道能不能继续跟出来
但是看到这个构造函数最后的时候，发现它是这么操作的
我们不管其他的，可以肯定svgInitializationURI是一个字符串，然后被带进了loadSVGDocument函数里，从函数名和参数名可以猜测一下，他有一个初始化用的svg文件，然后肯定是需要首次加载的，那么我们就可以不用管上面那乱七八糟一大堆的初始化。因为我们的目的本就只是需要跟进这个组件是如何解析svg文件的，其他的不用管
不过不放心，我们先去看看这个被加载的路径是啥 SVG_INITIALIZATION
恩，现在十分确定，它初始化时就加载了一个init.svg文件，那么就应该跟进这个 loadSVGDocument 函数
做了一些简单url解析和判断，然后又给 stopThenRun 传递了一个匿名内部类，按理说这里我们是应该跟进 stopThenRun
看看详情的，但是仔细看一下它在这里重写的run函数
内容大致是对 DocumentLoader 的一些初始化处理，我们知道这个 run 是肯定会被执行的，被执行的时候才在做 DocumentLoader
的初始化，那么就说明 stopThenRun 里面肯定还没有对svg进行解析，所以我们可以直接跟进 startDocumentLoader 函数
如上图，它就在 JSVGComponnent 类中，这里我们可以直接判断，documentLoader 可以开启线程，那么就去找他的 run
函数，看看做了啥
首先找到 documentLoader 的类型
跟进 SVGDocumentLoader，里面刚好有个 run 函数
其他部分都是catch，就不贴出来了  
继续跟进 loadDocument 函数，因为我们只需要知道这个初始化svg是如何被解析的
开始创建 Document 了，继续跟进 createSVGDocument  
发现跟进了 SVGDocumentFactory 接口，不过没事，看一下类关系就好
恩，只有一个 SAXSVGDocumentFactory 实现了 SVGDocumentFactory 接口，那么 createSVGDocument
就在里面没跑了
继续跟进 createDocument
    /**
     * Creates a SVG Document instance.
     * This method supports gzipped sources.
     * @param uri The document URI.
     * @exception IOException if an error occured while reading the document.
     */
    public Document createDocument(String uri) throws IOException {
        ParsedURL purl = new ParsedURL(uri);
        InputStream is = purl.openStream
           (MimeTypeConstants.MIME_TYPES_SVG_LIST.iterator());
        uri = purl.getPostConnectionURL();
        InputSource isrc = new InputSource(is);
        // now looking for a charset encoding in the content type such
        // as "image/svg+xml; charset=iso8859-1" this is not official
        // for image/svg+xml yet! only for text/xml and maybe
        // for application/xml
        String contentType = purl.getContentType();
        int cindex = -1;
        if (contentType != null) {
            contentType = contentType.toLowerCase();
            cindex = contentType.indexOf(HTTP_CHARSET);
        }
        String charset = null;
        if (cindex != -1) {
            int i                 = cindex + HTTP_CHARSET.length();
            int eqIdx = contentType.indexOf('=', i);
            if (eqIdx != -1) {
                eqIdx++; // no one is interested in the equals sign...
                // The patch had ',' as the terminator but I suspect
                // that is the delimiter between possible charsets,
                // but if another 'attribute' were in the accept header
                // charset would be terminated by a ';'.  So I look
                // for both and take to closer of the two.
                int idx     = contentType.indexOf(',', eqIdx);
                int semiIdx = contentType.indexOf(';', eqIdx);
                if ((semiIdx != -1) && ((semiIdx   
cve 描述：  
batik简单使用：  
java xxe 防御：