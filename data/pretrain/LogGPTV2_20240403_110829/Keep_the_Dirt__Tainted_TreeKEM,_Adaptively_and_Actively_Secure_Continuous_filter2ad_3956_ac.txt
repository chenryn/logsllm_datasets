expected to hold in modern messaging protocols. However,
in contrast to the two-party setting, formalizing FS in the
group setting is more nuanced. One natural notion is to require
that a key is secure if all parties have performed an update
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
271
before being corrupted. This is the notion considered in [7]
and the one we adopt here and call it standard FS. In contrast,
[3] deﬁnes a stronger notion we refer to as strong FS. It
requires keys to be secure as soon as possible subject to not
violating basic completeness of the CGKA protocol. However,
this is only required in executions where protocol packets
are delivered in the same order to all group members.6 The
construction in [3] in fact achieves strong FS, but only for
adversaries that are much less active than ours. We provide
some details in the next section.
1) The safe predicate: Providing PCS and FS requires
to clearly deﬁne which keys we expect to be secure given
a sequence of adversarial actions. Given the asynchronous
setting where group members might be in different states,
and an active adversary that may force users into inconsistent
states, this is quite involved. Note that group members might
even have different views of who is currently a member of the
group. We give a compact and intuitive predicate that captures
exactly what PCS and FS guarantees TTKEM provides.
that
2) The reduction in the standard model via piecewise
guessing: Recall
there is a trivial reduction between
selective and adaptive adversaries that simply guesses the
necessary information and fails if the guess was incorrect.
This loses an exponential factor in the amount of information
that needs to be guessed. Jafargholi et al. [12] proposed a
general framework (often refered to as piecewise guessing)
that allows to reduce this loss under certain conditions. The
resulting loss depends on the graph structure that naturally
arises from the security experiment. Applying the framework
in the obvious way (which already requires non-trivial effort)
we achieve a quasipolynomial security loss ≈ (Q · n)2 log(n),
where n is an upper bound on the number of group members
and Q is the number of Init/Update/Remove/Add queries the
adversary issues) against partially active adversaries. Using a
more careful analysis and taking the more restrictive structure
of the queries and the graph constructed in the TTKEM
security game into account, we can improve this to ≈ Qlog(n).
Our proof relies on [12] and requires familiarity with the
framework, but is fully rigorous. We note that all steps of the
proof strategy also apply to TreeKEM, and so an equivalent
proof for it would easily follow.
3) The reduction in the ROM: In (Tainted) TreeKEM, a
node is identiﬁed with a short seed s, from which the pub-
lic/secret key pairs of this node are derived. If the randomness
used to sample those keys is a hash of s, and we model this
hash as a random oracle, we can give a much better polynomial
bound for the adaptive security of TTKEM.
This proof is very different from the proof in the standard
model and does not use the piecewise guessing framework.
Some of the techniques resemble a security proof of Logical
Key Hierarchies (cf. Section I-D) by Panjwani [13], but
otherwise the proof is entirely self-contained and novel. Again,
our proof can also be applied to TreeKEM. As a sidenote,
6Going even further, the (efﬁcient but impractical) CGKA protocols of [11]
enjoys optimal FS. That is keys must become secure as soon as possible for
arbitrary delivery order. In fact, 2 of their protocols enjoy optimal FS even
against adversaries that can arbitrarily manipulate and generate trafﬁc; a type
of active security even stronger than the one considered in this work.
we prove and employ a new result on a public-key version
of generalized selective decryption (GSD, an abstraction of
security experiments involving encryptions of keys) in the
ROM, which we believe to be of independent interest.
D. Related Work
The basic idea of TreeKEM can be traced back to Logical
Key Hierarchies (LKH) [14], [15], [16]. These were introduced
as an efﬁcient solution to multicast key distribution (MKD),
where a trusted and central authority wants to encrypt mes-
sages to a dynamically changing group of receivers. Clearly,
the main difference to continuous group key agreements is the
presence of a central authority that distributes the keys to users
and may add and remove users. At the heart of TreeKEM is the
realization that if one replaces symmetric key encryption with
public key encryption in LKH, then any group member can
perform the actions that the central authority does in MKD.
But, as described above, this introduces the problem that some
users now know the secret keys in parts of the tree they are not
supposed to, which creates security problems. This is where
the main novelties of TreeKEM and follow up work lies: in
providing mechnanisms to achieve PCS and FS nonetheless.
LKH has been proven secure even against adaptive adver-
saries with a quasi-polynomial time bound [13]. Unfortunately,
there are several important differences between LKH that do
not allow us to simply rely on [13] to prove TTKEM or
TreeKEM secure: 1) their proof is in the symmetric key set-
ting, while we are using public key encryption; 2) their proof
assumes a central authority and there is no concept of PCS
or FS; 3) for efﬁciency reasons, TTKEM and TreeKEM use
hierarchical key derivation, which the proof in [13] does not
take into account (even though it had already been proposed
in optimized versions of LKH [16]) and it is a priori unclear
how this affects the proof; 4) we are also interested in proving
security in the ROM, which, as we show, gives tighter bounds.
Since the appearance of the double ratchet algorithm [17],
implemented in applications like Signal or Whatsapp, secure
messaging has received a lot of attention, particularly in the
two party case [18], [10], [19], [9], [20], [2]. In the group
setting, the main example of such a protocol is TreeKEM
[5], [6], currently in development by the IETF MLS working
group. Its predecesor was the ART protocol [4], whose pro-
posal motivated the creation of the mentioned working group.
A study of PCS in settings with multiple groups was done
by Cremers et al.[8], and Weidner [21] explored a variant
of TreeKEM allowing for less reliance on the server for
correctness. Finally, in a follow-up work, Alwen et al. [11]
study the security of CGKA protocols against insider attacks.
rTreeKEM: Recently, Alwen et al. [3] introduced an-
other variant of TreeKEM, termed re-randomized TreeKEM
(rTreeKEM). Since their paper structure shares similarities
with ours, we will discuss the differences between them.
First, it should be noted that the aims of the protocols are
very different: while TTKEM seeks to improve the efﬁciency
of TreeKEM by removing the need for blanks, rTreeKEM’s
focus is on improving its forward secrecy guarantees to
achieve strong FS. However, we see no reason why one could
not combine both protocols, endowing TTKEM with strong
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
272
Constraints on PKE
Forward Secrecy
Adversary
ART [4]
TreeKEM [6]**
rTreeKEM [3]
ElGamal (or any other with
a contributive NIKE)
None
UPKE
TTKEM (this work)
None
Standard
Standard
Strong
Standard
Passive
Passive
Passive
Partially active
Selective
O(n) (ROM)
O (n) (SM)
O (n) (ROM)
O(n) (SM,ROM)
Tightness
Adaptive
Ω ((nQ)n) (ROM)
Ω ((nQ)n) (SM) *
Ω ((nQ)n) (ROM) *
O(cid:0)n2Qlog(n)(cid:1) (SM)
O(cid:0)(nQ)2(cid:1) (ROM)
TABLE I: Table depicting the different security levels satisﬁed by CGKA protocols. The ﬁrst two columns correspond to protocol characteristics, and the
right-most three to the best known proofs. SM and ROM stand Standard and Random Oracle Models, respectively. (*) These would follow from the selective
proof via a straightforward complexity leveraging argument. Such an argument is implicit in the proof of [4]. (**) [3] provides a sketch for a proof against
passive adaptive adversaries with a quasi-polynomial loss in the SM; this paper suggests proofs against part. active, adaptive adversaries both in the SM and
ROM, with the same tightness as the ones for TTKEM.
FS. Moreover, it seems plausible that the proof techniques
developed in this work can also be applied to the rTreeKEM
construction or to the combination of the two.
Second, their work already deﬁnes CGKA as an abstraction
of the main problem TreeKEM aims to solve. We use their
completeness notion, but add a Conﬁrm and Deliver algorithm
to their deﬁnition. The reason for this is that we work in the
more general model that allows a malicious delivery server, i.e.
the adversary can reorder and withhold messages at will. The
model in [3] requires the delivery server to be basically honest:
the server can delay, but never send inconsistent messages to
parties, i.e. the adversary in [3] is almost passive.
Last, both works provide security proofs, albeit these differ
considerably. Their paper provides proofs for both TreeKEM
and rTreeKEM with a polynomial security loss, although these
concern selective security only. They also sketch a security
proof against adaptive adversaries losing a quasi-polynomial
factor (for TreeKEM in the standard model, for rTreeKEM in
the ROM). In contrast, we give formal proofs for the adaptive
security of TTKEM with only polynomial loss in the ROM and
quasi-polynomial in the standard model; and, as mentioned,
against a stronger partially active adversary. Also, proofs with
the same bounds would follow for TreeKEM.
E. Impact on MLS
As of writing, the current version of the MLS draft (MLS
v9) differs substantially from TTKEM, mainly due to the
Proposal-Commit structure. However, it should be noted that
TTKEM can be cast in that same fashion, as it is indeed done
in [11]. As with TreeKEM, the application of this framework
would bring an efﬁciency tradeoff that should be studied
carefully and which we leave for further work, though noting
the challenge in doing so without real world data. As for our
security proofs, a security proof for TreeKEM follows from
the one given in the paper, so we believe this work to be of
relevance to the MLS community.
II. DESCRIPTION OF TTKEM
A. Asynchronous Continuous Group Key Agreement Syntax
Deﬁnition 1 (Asynchronous Continuous Group Key Agree-
ment). An asynchronous continuous group key agreement
(CGKA) scheme is an 8-tuple of algorithms CGKA =
(keygen, init, add, rem, upd, dlv, proc, key) with the following
syntax and semantics:
KEY GENERATION: Fresh InitKey pairs are generated using
(pk, sk) ← keygen(1λ) by users prior to joining a group.
Public keys are used to invite parties to join a group.
INITIALIZE A GROUP: For i ∈ [2, n] let pki be an InitKey PK
belonging to party IDi. Let G = (ID1, . . . , IDn). Party ID1
creates a new group with membership G by running:
(γ, [W2, . . . , Wn]) ← init (G, [pk1, . . . , pkn])
and sending welcome message Wi for party IDi to the
server. Finally, ID1 stores its local state γ for later use.
ADDING A MEMBER: A group member with local state γ can
add party ID to the group by running (γ(cid:48), W, T ) ←
add(γ, ID, pk) and sending welcome message W for
party ID and the add message T for all group members
(including ID) to the server. He stores the old state γ and
new pending state γ(cid:48) until getting a conﬁrmation from the
delivery server as deﬁned below.
REMOVING A MEMBER: A group member with local state γ
can remove group member ID by running (γ(cid:48), T ) ←
rem(γ, ID) and sending the remove message T for all
group members (incl.ID) to the server and storing γ, γ(cid:48).
UPDATE: A group member with local state γ can perform an
update by running (γ(cid:48), T ) ← upd(γ) and sending the
update message T for all group members to the server
and storing γ, γ(cid:48).
CONFIRM AND DELIVER: The delivery server upon receiv-
ing a (set of) CGKA protocol message(s) T (including
welcome messages) generated by a party ID by running
dlv(ID, T ) either sends T to the corresponding member(s)
and sends a message conﬁrm to ID, in which case ID
deletes it’s old state γ and replaces it with the new
pending state γ(cid:48), or sends a message reject to ID, in
which case ID deletes γ(cid:48).
PROCESS: Upon receiving an incoming (set of) CGKA pro-
tocol message(s) T (including welcome messages) a
party immediately processes them by running (γ, I) ←
proc(γ, T ).
GET GROUP KEY: At any point a party can extract
the
current group key I from its local state γ by running
(γ, I) ← key(γ).
We remark that while the protocol allows any group member
to add a new party to the group as well as remove any member
from the group it is up to the higher level message protocol (or
even higher level application) to decide if such an operation
is indeed permitted. (If not, then clients can always simply
choose to ignore the add/remove message.) At the CGKA
level, though, all such operations are possible.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
273
B. Overview
In this work, a directed binary tree T is deﬁned recursively
as a graph that is either the empty graph, a root node, or a
root node whose parents are root nodes of trees themselves.
Note that this corresponds to a standard deﬁnition of trees with
reversed edges. We choose this deﬁnition since it is much more
intuitive in our context and highlights the connection between
the protocol and the GSD game used for the security proof (cf.
Deﬁnition 7). Note that paths in the tree now start at leaves
and end at the root node. The nodes in the tree are associated
with the following values: a seed ∆; a secret/public key pair
derived deterministically as (pk, sk) ← Gen(∆); a credential
(leaf nodes only); and a tainter ID (all nodes but leaves and
root). The root has no associated public/secret key pair, instead
its seed is the current group key.
To achieve FS and PCS, and to manage group membership,
it is necessary to constantly renew the secret keys used in
the protocol. We will do this through the group operations
Update, Remove and Add. We will use the term refresh to
refer to the renewal of a particular (set of) key(s) (as opposed
to the group operation). Each group operation will refresh a
part of the tree, always including the root and thus resulting
in a new group key which can be decrypted by all members of
the current group. Users will also have a list of Initialization
Keys (init keys) stored in some key-server, widely available
and regularly updated, and used to add users to new groups.
Each group member should have a consistent view of the
public information in the tree, namely public keys, credentials,
tainter IDs and past operations. We assume that a party
will only process operations issued by parties that (at the
time of issuing) shared the same view of the tree. This can
easily be enforced by adding a (collision-resistant) hash of
the operations processed so far [10], [9]7. Furthermore, group
members will have a partial view of the secret keys. More
precisely, every user has an associated protocol state γ(ID) (or
state for short when there is no ambiguity), which represents
everything users need to know to stay part of the group (we
implicitly assume a particular group, considering different