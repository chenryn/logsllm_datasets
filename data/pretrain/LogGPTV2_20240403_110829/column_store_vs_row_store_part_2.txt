trolled environment with simple plans, column stores outperform CITY COMMITDATE DAYOFWEEK
rowstoresinproportiontothefractionofcolumnstheyreadfrom NATION SHIPMODE MONTH
disk, but doesn’t look specifically at optimizations for improving REGION Size=scalefactor x YEAR
row-storeperformance,noratsomeoftheadvancedtechniquesfor PHONE 6,000,000 YEARMONTHNUM
Size=scalefactor x YEARMONTH
improvingcolumn-storeperformance. 2,000 DAYNUMWEEK
Halversonetal.[13]builtacolumn-storeimplementationinShore …. (9 add!l attributes)
andcomparedanunmodified(row-based)versionofShoretoaver- Size= 365 x 7
ticallypartitionedvariantofShore. Theirworkproposesanopti-
mization,called“supertuples”,thatavoidsduplicatingheaderin- Figure1:SchemaoftheSSBMBenchmark
formationandbatchesmanytuplestogetherinablock,whichcan
reducetheoverheadsofthefullyverticallypartitionedschemeand Queries: The SSBM consists of thirteen queries divided into
which,forthebenchmarksincludedinthepaper,makeavertically fourcategories,or“flights”:
partitioned database competitive with a column-store. The paper
does not, however, explore the performance benefits of many re- 1. Flight1contains3queries.Querieshavearestrictionon1di-
cent column-oriented optimizations, including a variety of differ- mensionattribute,aswellastheDISCOUNTandQUANTITY
entcompressionmethodsorlate-materialization. Nonetheless,the columnsoftheLINEORDERtable.Queriesmeasurethegain
“supertuple”isthetypeofhigher-leveloptimizationthatthispa- inrevenue(theproductofEXTENDEDPRICEandDISCOUNT)
perconcludeswillbeneededtobeaddedtorow-storesinorderto that would be achieved if various levels of discount were
simulatecolumn-storeperformance. eliminatedforvariousorderquantitiesinagivenyear. The
LINEORDERselectivitiesforthethreequeriesare1.9×10−2,
6.5×10−4,and7.5×10−5,respectively.
3. STARSCHEMABENCHMARK
Inthispaper,weusetheStarSchemaBenchmark(SSBM)[18, 2. Flight 2 contains 3 queries. Queries have a restriction on
19] to compare the performance of C-Store and the commercial 2dimensionattributesandcomputetherevenueforparticu-
row-store. larproductclassesinparticularregions,groupedbyproduct
TheSSBMisadatawarehousingbenchmarkderivedfromTPC- classandyear. TheLINEORDERselectivitiesforthethree
H1.UnlikeTPC-H,itusesapuretextbookstar-schema(the“best queriesare8.0×10−3,1.6×10−3,and2.0×10−4,respec-
practices”dataorganizationfordatawarehouses). Italsoconsists tively.
offewerqueriesthanTPC-Handhaslessstringentrequirementson
3. Flight 3 consists of 4 queries, with a restriction on 3 di-
whatformsoftuningareandarenotallowed.Wechoseitbecause
mensions. Queries compute the revenue in a particular re-
itiseasiertoimplementthanTPC-Handwedidnothavetomodify
gion over a time period, grouped by customer nation, sup-
C-Storetogetittorun(whichwewouldhavehadtodotogetthe
pliernation,andyear. TheLINEORDERselectivitiesforthe
entireTPC-Hbenchmarkrunning).
fourqueriesare3.4×10−2,1.4×10−3,5.5×10−5,and
Schema:Thebenchmarkconsistsofasinglefacttable,theLINE-
7.6×10−7respectively.
ORDERtable,thatcombinestheLINEITEMandORDERStableof
TPC-H.Thisisa17columntablewithinformationaboutindividual 4. Flight4consistsofthreequeries.Queriesrestrictonthreedi-
orders,withacompositeprimarykeyconsistingoftheORDERKEY mensioncolumns,andcomputeprofit(REVENUE-SUPPLY-
andLINENUMBERattributes. OtherattributesintheLINEORDER COST) grouped by year, nation, and category for query 1;
tableincludeforeignkeyreferencestotheCUSTOMER,PART,SUPP- andforqueries2and3,regionandcategory.TheLINEORDER
LIER,andDATEtables(forboththeorderdateandcommitdate), selectivitiesforthethreequeriesare1.6×10−2,4.5×10−3,
as well as attributes of each order, including its priority, quan- and9.1×10−5,respectively.
tity, price, and discount. The dimension tables contain informa-
1http://www.tpc.org/tpch/.
3
4. ROW-ORIENTEDEXECUTION the (salary) index, which will be much slower. We use this opti-
Inthissection, wediscussseveraldifferenttechniquesthatcan mizationinourimplementationbystoringtheprimarykeyofeach
be used to implement a column-database design in a commercial dimensiontableasasecondarysortattributeontheindicesoverthe
row-orientedDBMS(hereafter,SystemX).Welookatthreediffer- attributesofthatdimensiontable.Inthisway,wecanefficientlyac-
entclassesofphysicaldesign:afullyverticallypartitioneddesign, cesstheprimarykeyvaluesofthedimensionthatneedtobejoined
an “index only” design, and a materialized view design. In our withthefacttable.
evaluation,wealsocompareagainsta“standard”row-storedesign MaterializedViews:Thethirdapproachweconsiderusesmate-
withonephysicaltableperrelation. rializedviews.Inthisapproach,wecreateanoptimalsetofmateri-
VerticalPartitioning:Themoststraightforwardwaytoemulate alizedviewsforeveryqueryflightintheworkload,wheretheopti-
acolumn-storeapproachinarow-storeistofullyverticallyparti- malviewforagivenflighthasonlythecolumnsneededtoanswer
tioneachrelation[16]. Inafullyverticallypartitionedapproach, queries in that flight. We do not pre-join columns from different
some mechanism is needed to connect fields from the same row tablesintheseviews. Ourobjectivewiththisstrategyistoallow
together (column stores typically match up records implicitly by SystemXtoaccessjustthedataitneedsfromdisk, avoidingthe
storingcolumnsinthesameorder,butsuchoptimizationsarenot overheadsofexplicitlystoringrecord-idorpositions, andstoring
availableinarowstore).Toaccomplishthis,thesimplestapproach tupleheadersjustoncepertuple. Hence,weexpectittoperform
istoaddaninteger“position”columntoeverytable–thisisof- betterthantheothertwoapproaches, althoughitdoesrequirethe
tenpreferabletousingtheprimarykeybecauseprimarykeyscan queryworkloadtobeknowninadvance,makingitpracticalonly
belargeandaresometimescomposite(asinthecaseoftheline- inlimitedsituations.
ordertableinSSBM).Thisapproachcreatesonephysicaltablefor
each column in the logical schema, where the ith table has two 5. COLUMN-ORIENTEDEXECUTION
columns,onewithvaluesfromcolumniofthelogicalschemaand Nowthatwe’vepresentedourrow-orienteddesigns,inthissec-
onewiththecorrespondingvalueinthepositioncolumn. Queries tion,wereviewthreecommonoptimizationsusedtoimproveper-
arethenrewrittentoperformjoinsonthepositionattributewhen formanceincolumn-orienteddatabasesystems,andintroducethe
fetching multiple columns from the same relation. In our imple- invisiblejoin.
mentation, by default, System X chose to use hash joins for this
purpose,whichprovedtobeexpensive. Forthatreason,weexper- 5.1 Compression
imented with adding clustered indices on the position column of Compressingdatausingcolumn-orientedcompressionalgorithms
every table, and forced System X to use index joins, but this did andkeepingdatainthiscompressedformatasitisoperatedupon
not improve performance – the additional I/Os incurred by index has been shown to improve query performance by up to an or-
accessesmadethemslowerthanhashjoins. der of magnitude [4]. Intuitively, data stored in columns is more
Index-only plans: The vertical partitioning approach has two compressible than data stored in rows. Compression algorithms
problems.First,itrequiresthepositionattributetobestoredinev- perform better on data with low information entropy (high data
erycolumn,whichwastesspaceanddiskbandwidth.Second,most valuelocality). Take,forexample,adatabasetablecontainingin-
row-stores store a relatively large header on every tuple, which formationaboutcustomers(name,phonenumber,e-mailaddress,
further wastes space (column stores typically – or perhaps even snail-mailaddress,etc.). Storingdataincolumnsallowsallofthe
by definition – store headers in separate columns to avoid these names to be stored together, all of the phone numbers together,
overheads).Toamelioratetheseconcerns,thesecondapproachwe etc. Certainlyphonenumbersaremoresimilartoeachotherthan
considerusesindex-onlyplans,wherebaserelationsarestoredus- surrounding text fields like e-mail addresses or names. Further,
ingastandard,row-orienteddesign,butanadditionalunclustered if the data is sorted by one of the columns, that column will be
B+Treeindexisaddedoneverycolumnofeverytable.Index-only super-compressible (for example, runs of the same value can be
plans – which require special support from the database, but are run-lengthencoded).
implemented by System X – work by building lists of (record- But of course, the above observation only immediately affects
id,value) pairs that satisfy predicates on each table, and merging compression ratio. Disk space is cheap, and is getting cheaper
theserid-listsinmemorywhentherearemultiplepredicatesonthe rapidly (of course, reducing the number of needed disks will re-
sametable. Whenrequiredfieldshavenopredicates, alistofall duce power consumption, a cost-factor that is becoming increas-
(record-id,value) pairs from the column can be produced. Such inglyimportant).However,compressionimprovesperformance(in
plansneveraccesstheactualtuplesondisk. Thoughindicesstill additiontoreducingdiskspace)sinceifdataiscompressed, then
explicitlystorerids,theydonotstoreduplicatecolumnvalues,and lesstimemustbespentinI/Oasdataisreadfromdiskintomem-
theytypicallyhavealowerper-tupleoverheadthantheverticalpar- ory(orfrommemorytoCPU).Consequently,someofthe“heavier-
titioningapproachsincetupleheadersarenotstoredintheindex. weight”compressionschemesthatoptimizeforcompressionratio
One problem with the index-only approach is that if a column (suchasLempel-Ziv,Huffman,orarithmeticencoding),mightbe
hasnopredicateonit,theindex-onlyapproachrequirestheindex lesssuitablethan“lighter-weight”schemesthatsacrificecompres-
to be scanned to extract the needed values, which can be slower sion ratio for decompression performance [4, 26]. In fact, com-
thanscanningaheapfile(aswouldoccurintheverticalpartition- pressioncanimprovequeryperformancebeyondsimplysavingon
ingapproach.) Hence,anoptimizationtotheindex-onlyapproach I/O. If a column-oriented query executor can operate directly on
istocreateindiceswithcompositekeys,wherethesecondarykeys compressed data, decompression can be avoided completely and
arefrompredicate-lesscolumns. Forexample,considerthequery performance can be further improved. For example, for schemes
SELECT AVG(salary) FROM emp WHERE age>40–ifwe
likerun-lengthencoding–whereasequenceofrepeatedvaluesis
haveacompositeindexwithan(age,salary)key,thenwecanan- replacedbyacountandthevalue(e.g.,1,1,1,2,2→1×3,2×2)
swerthisquerydirectlyfromthisindex.Ifwehaveseparateindices –operatingdirectlyoncompresseddataresultsintheabilityofa
on(age)and(salary),anindexonlyplanwillhavetofindrecord-ids queryexecutortoperformthesameoperationonmultiplecolumn
correspondingtorecordswithsatisfyingagesandthenmergethis valuesatonce,furtherreducingCPUcosts.
with the complete list of (record-id, salary) pairs extracted from Prior work [4] concludes that the biggest difference between
4
compressioninarow-storeandcompressioninacolumn-storeare theadvantagesofoperatingdirectlyoncompresseddatadescribed
thecaseswhereacolumnissorted(orsecondarilysorted)andthere above. Third,cacheperformanceisimprovedwhenoperatingdi-
areconsecutiverepeatsofthesamevalueinacolumn.Inacolumn- rectlyoncolumndata,sinceagivencachelineisnotpollutedwith
store,itisextremelyeasytosummarizethesevaluerepeatsandop- surrounding irrelevant attributes for a given operation (as shown
eratedirectlyonthissummary.Inarow-store,thesurroundingdata inPAX[6]). Fourth,theblockiterationoptimizationdescribedin
fromotherattributessignificantlycomplicatesthisprocess. Thus, thenextsubsectionhasahigherimpactonperformanceforfixed-
ingeneral,compressionwillhavealargerimpactonqueryperfor- lengthattributes.Inarow-store,ifanyattributeinatupleisvariable-
manceifahighpercentageofthecolumnsaccessedbythatquery width,thentheentiretupleisvariablewidth.Inalatematerialized
havesomeleveloforder. Forthebenchmarkweuseinthispaper, column-store,fixed-widthcolumnscanbeoperatedonseparately.
wedonotstoremultiplecopiesofthefacttableindifferentsortor-
5.3 BlockIteration
ders,andsoonlyoneoftheseventeencolumnsinthefacttablecan
be sorted (and two others secondarily sorted) so we expect com- Inordertoprocessaseriesoftuples,row-storesfirstiteratethrough
pressiontohaveasomewhatsmaller(andmorevariableperquery) eachtuple,andthenneedtoextracttheneededattributesfromthese
effectonperformancethanitcouldifmoreaggressiveredundancy tuplesthroughatuplerepresentationinterface[11].Inmanycases,
wasused. suchasinMySQL,thisleadstotuple-at-a-timeprocessing,where
thereare1-2functioncallstoextractneededdatafromatuplefor
5.2 LateMaterialization eachoperation(whichifitisasmallexpressionorpredicateevalu-
ationislowcostcomparedwiththefunctioncalls)[25].
Inacolumn-store,informationaboutalogicalentity(e.g.,aper-
Recentworkhasshownthatsomeoftheper-tupleoverheadof
son) is stored in multiple locations on disk (e.g. name, e-mail
tupleprocessingcanbereducedinrow-storesifblocksoftuplesare
address, phone number, etc. are all stored in separate columns),
availableatonceandoperatedoninasingleoperatorcall[24,15],
whereas in a row store such information is usually co-located in
andthisisimplementedinIBMDB2[20]. Incontrasttothecase-
asinglerowofatable. However, mostqueriesaccessmorethan
by-caseimplementationinrow-stores,inallcolumn-stores(thatwe
oneattributefromaparticularentity.Further,mostdatabaseoutput
areawareof), blocksofvaluesfromthesamecolumnaresentto
standards(e.g.,ODBCandJDBC)accessdatabaseresultsentity-at-
anoperatorinasinglefunctioncall.Further,noattributeextraction
a-time(notcolumn-at-a-time). Thus,atsomepointinmostquery
is needed, and if the column is fixed-width, these values can be
plans,datafrommultiplecolumnsmustbecombinedtogetherinto
iteratedthroughdirectlyasanarray. Operatingondataasanarray
‘rows’ofinformationaboutanentity. Consequently,thisjoin-like
notonlyminimizesper-tupleoverhead,butitalsoexploitspotential
materializationoftuples(alsocalled“tupleconstruction”)isanex-
forparallelismonmodernCPUs,asloop-pipeliningtechniquescan
tremelycommonoperationinacolumnstore.
beused[9].
Naivecolumn-stores[13,14]storedataondisk(orinmemory)
column-by-column, read in (to CPU from disk or memory) only 5.4 InvisibleJoin
thosecolumnsrelevantforaparticularquery,constructtuplesfrom
Queriesoverdatawarehouses,particularlyoverdatawarehouses
theircomponentattributes,andexecutenormalrow-storeoperators
modeledwithastarschema,oftenhavethefollowingstructure:Re-
ontheserowstoprocess(e.g.,select,aggregate,andjoin)data.Al-
strictthesetoftuplesinthefacttableusingselectionpredicateson
thoughlikelytostilloutperformtherow-storesondatawarehouse
one(ormany)dimensiontables. Then,performsomeaggregation
workloads,thismethodofconstructingtuplesearlyinaqueryplan
ontherestrictedfacttable,oftengroupingbyotherdimensiontable
(“earlymaterialization”)leavesmuchoftheperformancepotential
attributes. Thus,joinsbetweenthefacttableanddimensiontables
ofcolumn-orienteddatabasesunrealized.
needtobeperformedforeachselectionpredicateandforeachag-
Morerecentcolumn-storessuchasX100,C-Store,andtoalesser
gregate grouping. A good example of this is Query 3.1 from the
extent,SybaseIQ,choosetokeepdataincolumnsuntilmuchlater
StarSchemaBenchmark.
intothequeryplan,operatingdirectlyonthesecolumns. Inorder
todoso,intermediate“position”listsoftenneedtobeconstructed SELECT c.nation, s.nation, d.year,
inordertomatchupoperationsthathavebeenperformedondiffer- sum(lo.revenue) as revenue
entcolumns.Take,forexample,aquerythatappliesapredicateon FROM customer AS c, lineorder AS lo,
twocolumnsandprojectsathirdattributefromalltuplesthatpass supplier AS s, dwdate AS d