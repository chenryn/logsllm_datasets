title:A new CRT-RSA algorithm secure against bellcore attacks
author:Johannes Bl&quot;omer and
Martin Otto and
Jean-Pierre Seifert
A New CRT-RSA Algorithm Secure Against Bellcore
Attacks
Johannes Bl¨omer
Paderborn University
D-33095 Paderborn, Germany
PI:EMAIL
∗
Martin Otto
Paderborn University
PaSCo Graduate School
D-33095 Paderborn, Germany
PI:EMAIL
Jean-Pierre Seifert
Inﬁneon Technologies
Secure Mobile Solutions,
SMS IC
D-81609 Munich, Germany
Jean-Pierre.Seifert@inﬁneon.com
ABSTRACT
In this paper we describe a new algorithm to prevent fault
attacks on RSA signature algorithms using the Chinese Re-
mainder Theorem (CRT-RSA). This variant of the RSA sig-
nature algorithm is widely used on smartcards. Smartcards
on the other hand are particularly susceptible to fault at-
tacks like the one described in [7]. Recent results have shown
that fault attacks are practical and easy to accomplish ([21],
[17]). Therefore, they establish a practical need for fault at-
tack protected CRT-RSA schemes. Starting from a careful
derivation and classiﬁcation of fault models, we describe a
new variant of the CRT-RSA algorithm. For the most realis-
tic fault model described, we rigorously analyze the success
probability of an adversary against our new CRT-RSA algo-
rithm. Thereby, we prove that our new algorithm is secure
against the Bellcore attack.
Categories and Subject Descriptors
B.8.1 [Reliability, Testing, and Fault-Tolerance]: fault
attacks; C.3 [Special-Purpose and Application-based
Systems]: smartcards; D.4.6 [Security and Protection]:
Cryptographic controls
General Terms
Algorithms, Security
Keywords
RSA, cryptanalysis, faults attacks, Bellcore attack, smart-
cards, Chinese Remainder Theorem
INTRODUCTION
1.
∗
versity.
Supported by the PaSCo Graduate School, Paderborn Uni-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
Smartcards play an important role in modern cryptogra-
phy. Smartcards are used to compute digital signatures,
most notably digital signatures based on RSA. Since speed
is still an issue with modern smartcards, enhancements have
been adopted to the plain RSA signature algorithm. The
most common enhancement is the computation of an RSA
signature using the Chinese Remainder Theorem (CRT). We
will refer to this variant of RSA as CRT-RSA. With CRT-
RSA one can expect a speed-up by a factor of 4 compared to
plain RSA. However, smartcards are not as tamper-resistant
as one may wish. Hence side-channel attacks like fault,
power, and timing attacks, on smartcards have attracted a
lot of attention. Among side-channel attacks, fault attacks
seem to be easiest to realize [2].
In particular, CRT-RSA
proved to be susceptible to fault attacks. In [7] an extremely
simple attack on CRT-RSA is described. Named the Bell-
core attack, this attack reveals the secret factorization of the
RSA modulus N by introducing a single fault resulting in
a signature that is correct modulo one of the secret prime
factors of N , but faulty modulo the other prime factor. This
attack is particularly devastating because the type of fault
induced is irrelevant.
Several types of countermeasures against fault attacks have
been described, e.g. to compute a signature twice and com-
pare the two results or to verify the result with the public
key before output. However, these two countermeasures are
too costly to be of practical interest. A more sophisticated
software countermeasure has been proposed by Shamir (see
[20]). He suggested to check intermediate results modulo a
small integer. This approach will be described later in more
detail. Of course, general (usually randomized) schemes that
enhance the security of RSA can also prevent fault attacks
or at least make them harder to realize. The most promi-
nent of these randomization schemes is OAEP [4]. Most
smartcard certiﬁcation authorities, however, require that a
smartcard implements a pure RSA signature algorithm that
is secure without using OAEP or similar schemes.
Although several software countermeasures against fault
attacks have been proposed (see [7], [24]), none of these pro-
posals was based on an explicitly formulated and justiﬁed
fault model. Accordingly, no proper security analysis of the
various schemes could be given. Hence, in this paper starting
from a careful derivation and classiﬁcation of fault models,
we describe a new variant of the CRT-RSA algorithm. For
the most realistic fault model described, we analyze whether
a Bellcore-type attack on the algorithm can be successful. In
311[2] it was shown that a fault attack can basically change the
value of any variable used in a smartcard algorithm. Hence,
for any variable used in our scheme we analyze whether a
Bellcore-type attack can be mounted by changing the value
of that particular variable. We prove that for all variables
the success probability of a Bellcore-type fault attack is neg-
ligible. Only once do our proofs rely on a plausible but
unproven number theoretic assumption.
Our scheme borrows ideas from Shamir’s countermeasure
against fault attacks as well as the idea of infective compu-
tations from [24]. Shamir suggests choosing a small prime
t of about 32 bits to compute Sp = md mod pt and Sq =
md mod qt and check whether Sp ≡ Sq mod t before combin-
ing them with the CRT. As is easily seen, Shamir’s scheme
only protects the signature computations modulo the two
secret prime factors of the RSA modulus N . It leaves unpro-
tected the CRT-combination step to obtain the ﬁnal signa-
ture modulo N . Furthermore, as observed in [24], Shamir’s
algorithm has a single point of failure when it checks if
Sp ≡ Sq mod t. Usually, such a comparison relies on the
zero ﬂag only. A single point of failure means that once
this point is successfully attacked, a smartcard may output
a defective signature that can be used to recover secrets.
Infective computation, as introduced in [24], means that
any error introduced by a fault attack propagates through
the computation. In particular, in CRT-RSA a faulty sig-
nature will always be faulty modulo both prime factors,
thereby preventing a Bellcore attack. Unfortunately, for
realistic parameters the infective computation proposed in
[24] can be broken. In particular, the method proposed in
[24] restricts the pairs of public/secret exponents in RSA to
pairs, that basically can be broken by Wiener’s small secret
exponent attacks ([5]).
The scheme proposed in this paper extends Shamir’s idea
to protect every single computation step of the signature al-
gorithm, including the CRT combination. We achieve this
by using two small integers t1 and t2 to compute Sp =
md mod pt1 and Sq = md mod qt2. These values are com-
bined to S mod N t1t2 via the CRT. This combination with
a larger modulus allows to use infective computation steps
afterwards. These infective steps ensure that an error will
cause the ﬁnal signature to be false modulo both primes p
and q. Infective computations not only avoid single points of
failures. They also allow a card to continue its computation,
even if a fault is detected. Hence, our scheme renders mech-
anism like security resets or error messages pointless. This
is an important feature of our scheme, since error messages
or security resets may leak important and useful information
to an adversary (see for example [14], [6] for more details).
Finally, unlike the scheme proposed in [24], our algorithm
works with any RSA key, no restriction on the key space
applies. To prove security, we present a rigorous analysis of
our scheme.
To describe and classify fault models, we start from the
most powerful adversary imaginable, i.e. an adversary that
can change any speciﬁc bit at any speciﬁc time of the algo-
rithm execution. However, we make use of several hardware
features employed on realistic smartcards to argue that the
eﬀects of such a precise intrusion are not completely pre-
dictable for an adversary. The hardware mechanisms we are
referring to include randomized clocks, memory encryption
/ decryption schemes, and randomized address scrambling
(see [18], [9]). Like randomized schemes, these hardware
features try to make fault attacks harder by randomizing
the eﬀects of a fault attack in a manner that can not be
controlled or predicted by an adversary.
Based on the eﬀects of randomized clocks, memory en-
cryption/decryption, and randomized address scrambling we
argue that even a very powerful adversary can not hope to
reset a bit value at a speciﬁc location and time.
Instead
all he can hope is that with a certain probability he will
change the value of a particular variable used by the algo-
rithm. Furthermore, we argue that an adversary can only
hope to change the value of a targeted variable to some ran-
dom value. We also describe some intermediate fault mod-
els, in which the adversary is able to attack speciﬁc byte or
bit values. We extend the analysis of our CRT-RSA scheme
to these models as well. We show that in these models the
new CRT-RSA scheme sometimes oﬀers an even better se-
curity, i.e. knowing the eﬀect of an attack exactly helps de-
fending against this attack. In our analysis, we only look at
fault attacks. Combinations with other side channel attacks
like timing or power attacks are not regarded.
The paper is organized as follows: After stating the pre-
liminaries in Section 2, we formulate a careful classiﬁcation
of fault models in Section 3. We propose a new algorithm
in Section 4 that will be proven to be secure against the
Bellcore attack in Section 5. Section 6 concludes the paper.
2. PRELIMINARIES
Throughout the paper, we will use the following notation.
We assume that an RSA key scheme consists of two primes
p and q that form the RSA modulus N = p · q. We will
denote the public RSA key as e and the private RSA key
as d, satisfying e · d ≡ 1 mod ϕ(N ). Here, ϕ(N ) denotes
Euler’s totient function. The function l(n) will be used to
denote the binary length of an integer n. We will use a | b
to denote that an integer a divides b, and a (cid:5) | b to denote
the converse.
Usually, smartcards compute RSA signatures S(m) :=
md mod N using the CRT-RSA scheme. Here, the two sig-
nature parts Sp := md mod (p−1) mod p and Sq := md mod (q−1)
mod q are computed ﬁrst. They are combined using the
Chinese Remainder Theorem (CRT) as S(m) := CRT(Sp, Sq)
mod N . On average, this scheme is four times faster than
the direct computation via a single exponentiation, cf. [12].
The major exploit of fault attacks on smartcards perform-
ing CRT-RSA signatures is an attack ﬁrst presented in [7]
(and named the ”Bellcore attack”). Here it is assumed that
an adversary induces an error that causes Sp to be defec-
tive while Sq is computed correctly (or vice versa of course).
If the defective CRT-combination S = CRT(Sp, Sq) mod N
is disclosed, the scheme is completely broken as gcd(Se −
m, N ) = q.
As we investigate errors on various variables, we use the
following convention: For random errors on a speciﬁc vari-
able x, we write f (x) = x + e(x), where e(x) is the error de-
pendent on x. For random errors, e(x) ∈ [−x, 2l(x) − 1 − x].
In some scenarios, e(x) can be speciﬁed in greater detail, e.g.
for random byte errors, e(x) = b· 2k with |b| ∈ Z28 a random
byte and 0 ≤ k < l(x) − 7. For single bit errors, |b| = 1 and
0 ≤ k < l(x). We always assume a uniform distribution on
the errors.
All parts of our analysis can be rigorously proven. Only
the analysis for one variable relies on the following heuristi-
cally justiﬁed assumption.
Assumption 1. For an RSA modulus N = p·q, d a secret
key, m ∈ ZN a given message, t (cid:9) p a prime, e(·) a random
error as deﬁned above, the value
α := (cid:16)m
d
div (pt + e(pt))(cid:17) mod t
can be seen as a random variable uniformly distributed in
Ft .
Clearly, α only has a chance to fulﬁll the assumption cor-
rectly if 2l(pt) is a multiple of t. However, the assumption is
justiﬁed for other cases as well, because the distance to the
uniform distribution is negligibly small as t (cid:9) 2l(pt).
3. DEVELOPMENT OF PRACTICALLY
APPROVED FAULT MODELS
There has been a large number of diﬀerent fault attacks
in the literature. They diﬀer in the power to locate and time
an attack, in the number of bits aﬀected, in the eﬀect of an
attack (the fault type), in the probability of the implied ef-
fect of an attack, and in prior work that has to be applied to
the card in order to mount the attack, cf. among others [7],
[16], [22], [14], [15], [1], [3], [8], [23], [2], [21]. However, the
characterization of the used fault models has been simple
and insuﬃcient to derive usable frameworks for a satisfac-
tory analysis. Therefore, we present a characterization of
the diﬀerent parameters needed to fully describe all known
types of fault attacks. This leads to a proper mathematical
formulation of errors induced by such attacks. The derived
fault models are motivated by smartcards as they are used
today.
• For control on the fault location we deﬁne the
three classes ”no control”, ”loose control” (a selected
variable can be targeted) and ”complete control” (se-
lected bits can be attacked).
• For control on the timing we also deﬁne the three
classes ”no control”, ”loose control” (an error is in-
duced in a block of a few operations) and ”precise
control” (the exact time can be met).
• For the number of bits attacked, we diﬀerentiate
between a ”single faulty bit”, ”few faulty bits” (e.g. a
byte) or a ”random number of faulty bits” (bounded
by the length of the attacked variable).
• The fault type describes the character of the fault as
it manifests itself in the chip. This parameter has ap-
peared in the literature as the ”fault model”. We will
break with this tradition as a reasonable description of
a fault model must contain more than just the type of
the fault. Fault types include the classic fault types,
namely the stuck at fault (saf), where bits permanently
keep their value from the point of a successful attack,
the bit ﬂip fault (bf), where bits are ﬂipped to their
complementary value and the random fault (rf), where
bits are changed to a random value, possibly the one
they already had.
In addition to these classic fault
types, we also have the fault type derived from recent
work in [21]. Their approach enables them to set a
single speciﬁc (targeted) bit to 1 or reset that bit to 0.
This is the bit set or reset fault (bsr).
• Attacks mounted also have a certain probability as-
sociated with them. Usually an attack is not certain to
be successful, it is only so most of the time. Therefore,
any eﬀect as well as the control on location and timing
might require a probability or even a distribution to
be completely described. For example, some physical
attacks might have a greater probability of resetting a
bit than of setting that bit (see [8], [6]). No control
on the location implies that a speciﬁc location is ex-
pected to be hit with a certain probability 1/(number
of locations).
To derive reasonable fault models, we combine parameter
settings known from actual attacks with hardware counter-
measures in eﬀect on the card. As we are guided by practical
considerations, we always assume the most powerful adver-
sary, i.e. the adversary presented in [21] and [17] able to use
(bsr) faults. This adversary can select any speciﬁc area on
the card at a precise time (on his clock) and set the stored bit
to any speciﬁc value. We also consider smartcards, that may
have several hardware countermeasures (see [18]). The ar-
chitecture of a modern smartcard is sketched in Figure 1. In
these realistic scenarios, the eﬀective power of the adversary