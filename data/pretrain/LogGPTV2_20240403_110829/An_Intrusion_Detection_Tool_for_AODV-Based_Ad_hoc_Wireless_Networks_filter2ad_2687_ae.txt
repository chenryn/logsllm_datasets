threshold can also be adapted to account for pack-
ets dropped due to congestion to reduce the number
of false positives.
Further, from Fig. 8b, in which TCP ﬂows are
being monitored under
identical conditions as
Fig. 8a, the processing overhead is seen to be
similar. In general, the IDS is not aﬀected by the
kind of payload contained inside the IP packets,
but the focus here was on studying the eﬀect of
TCP and CBR traﬃc streams as the node density
increases. It can be seen in case of both TCP
and CBR streams
that monitoring overhead
actually decreases as the number of bad nodes
increase.
Fig. 9a shows the packets observed by one of the
25 IDS nodes with 50 bad nodes and a total number
of 100 nodes. The graph shows the number of pack-
ets processed, collisions, neighbor table size and
dropped packets (observed) per 10 s time interval
for the duration of the simulation. Packets pro-
cessed are the total number of relevant packets the
IDS was able to snoop on per time interval.
Fig. 9b shows data plotted for the same node with
dropped packets (observed), true positives, and false
positives. The true positives indicate the number of
bad nodes detected during the time interval, which
in this case is at most one per time interval. Two
true positives in the same time interval would indi-
cate that two separate bad nodes were detected.
Overall, the graph shows 10 true positives and one
false positive. With static thresholds, false positives
are likely to increase with increase in data traﬃc and
congestion. False positives can be reduced by
sensing congestion, collisions, and throughput in
observable radio range – and adapting the IDS
threshold.
Our simulation results verify that our prototype
implementation is capable of monitoring traﬃc in
realistic situations even under high node densities,
and we can conclude from the simulation results
that our prototype is scalable for a reasonably sized
ad hoc network (hundreds of nodes) with light traf-
ﬁc conditions. Scalability of individual IDS nodes
can be further increased and false positives mini-
mized – by dynamically adapting the sampling inter-
val and the intrusion thresholds to changes in traﬃc
594
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
a
900
800
700
600
t
n
u
o
C
500
400
300
200
100
100
b
900
800
700
600
t
n
u
o
C
500
400
300
200
100
100
0%
10%
20%
30%
40%
50%
150
200
No. of nodes
250
300
0%
10%
20%
30%
40%
50%
150
200
No. of nodes
250
300
Fig. 8. Intrusion detection simulation: (a) packets processed in CBR traﬃc and (b) packets processed in TCP traﬃc.
conditions. Optimal
sampling intervals can be
adapted to the memory constraints of the node on
which the IDS is deployed, and thresholds selected
to minimize false positives.
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
595
a
l
e
u
a
V
500
450
400
350
300
250
200
150
100
50
0
10
b
25
s
t
e
k
c
a
p
f
o
.
o
N
20
15
10
5
0
10
30
50
70
90
110
130
170
150
Time
190
210
230
250
270
290
30
50
70
90
110
130
170
150
Time
190
210
230
250
270
290
Packets
processed
Collisions
Neighbortabl
e size
Dropped
Dropped
True
Positives
False
Positives
Fig. 9. Sample data from single IDS node: (a) IDS eﬀort and (b) alarms generated.
8. Security analysis
8.1. SecAODV security analysis
In this section we discuss how SecAODV resists
attacks by non-colluding adversaries. Routing dis-
ruption attacks in which an adversary attempts to
forge a route request or a route reply by masquerad-
ing as another sender node or destination node are
prevented, since either the IPv6 address veriﬁcation
or signature veriﬁcation will fail. As long as the IPv6
address of a node and its public key are crypto-
graphically bound, the attacker cannot successfully
spoof another node’s address unless the victim’s pri-
vate key is compromised.
An attacker might also try to initiate route replies
without receiving a route request. This kind of
attack has minimal impact since the attacked node
can ignore packets from a node to which it did
not request a route. Alternatively, an attacker can
replay a cached route reply. This kind of attack is
prevented since the protocol maintains status via
sequence numbers contained in the signed header.
AODV trivially eliminates duplicates and older mes-
sages using sequence numbers in the routing mes-
sages. Moreover, by including the destination and
originator sequence numbers in the signed material,
the SecAODV prevents rushing attacks [19] in which
a malicious node rushes spurious messages in which
the attacker modiﬁed any of these two ﬁelds making
596
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
the legitimate packet look old or as a duplicate. As
long as the private keys of the end nodes are not
compromised, the attacker is not capable of modify-
ing any of these ﬁelds and thus immune to rushing
attacks.
One kind of resource consumption attack is to ini-
tiate a lot of route requests, thereby causing conges-
tion in the network. This attack can be mitigated by
setting an ‘‘acceptance rate,’’ thus limiting the num-
ber of route requests a node can accept and process
per clock tick.
SecAODV also prevents man-in-the-middle attack
by enforcing IP and signature veriﬁcation. Unless
the malicious node possesses the private keys of
both end nodes, the attacker cannot launch a man-
in-the-middle attack.
Routing disruption attacks in which an adversary
attempts to forge a route request or a route reply by
masquerading a source or destination node, are pre-
vented since either the IPv6 address veriﬁcation or
signature veriﬁcation will fail. As long as the IPv6
address of a node and its public key are crypto-
graphically bound, an attacker cannot successfully
spoof another node’s address unless the victim’s pri-
vate key has been compromised.
Amongst the attacks on AODV, enumerated in
[16], SecAODV protects against address spooﬁng,
fabrication, and modiﬁcation of routing messages,
since
required before
any routing message is used to update the routing
tables.
signature veriﬁcation is
8.2. IDS security analysis
While the use of signed control messages in a
routing protocol like SecAODV can prevent routing
disruption attacks, it is possible for an attacker to
selectively drop only data packets (called grey-hole
attacks). The IDS reinforces MANET security by
detecting such kind of attacks. The IDS is able to
detect dropped and mangled packets. Every time a
packet is faithfully retransmitted the corresponding
packet is removed from the watch-list by the IDS.
Mangled packets will not match any packets the
IDS is watching for
retransmission, and thus
timeouts will cause the IDS to deem those to have
been dropped. In case of TCP streams, it is possible
to distinguish mangled packets
from dropped
packets, using the TCP sequence number and byte
count. From the sequence number in the TCP
packet, we can determine which part of the stream
the packet belongs to and use it to determine if
the intermediate node has mangled the data in any
way, or if the checksum is bad. It is important to
establish thresholds for classifying detected intrusive
behavior.
the packet payload, whether
The IDS thus is able to monitor faithful retrans-
is
mission of
encrypted or not. The IDS however will not be able
to monitor packets where link-level encryption is
used at each hop, i.e. when the headers themselves
are encrypted, without knowledge of link-level keys
of all participating nodes.
it
A malicious node may change its own MAC
address and IPv6 address periodically to evade
detection. Thus, to go undetected, the attacker will
need to change his/her IPv6 address very often,
and incur the additional expense of computing a
SUCV identiﬁer every time. Consequently such an
attack is largely ineﬀective, and quite expensive for
the attacker. To maintain a suﬃciently disruptive
attack, the attacker would also have to follow the
target node to remain along some crucial route of
the targeted node, which is quite expensive for the
attacker. Further such an attack essentially amounts
to a Sybil attack [29] which we have assumed (see
Section 5.1) can be detected by an additional mech-
anism [30]. The use of SUCVs makes impersonation
very diﬃcult, and rekeying SUCVs in the above cir-
cumstances would render such an attacks into a low
level nuisance at the most.
Collaborative IDSs will perform best
in a
densely populated MANET with limited mobility,
and will perform worse in a sparsely populated
MANET with signiﬁcant mobility. The eﬀectiveness
of a collaborative IDS depends on the amount of
data that can be collected by each node. The longer
the nodes are members of the MANET, the greater
the availability of meaningful data for further
analysis. The degree of mobility of each node in
the network will also have a signiﬁcant impact on
the IDS’s eﬀectiveness. In a MANET with a high
degree of mobility, if the number of routing error
messages caused by legitimate reasons far exceeds
the number of routing error messages caused due
to the presence of malicious nodes, the eﬀectiveness
or beneﬁt of such an IDS may be minimal. The
damage that could be caused by a malicious node
in highly mobile environment would, however, also
be minimal since malicious routing messages would
likely make up a small percentage of routing error
messages.
The eﬀectiveness of a collaborative IDS depends
on the amount of data that can be collected individ-
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
597
ually. Longer presence increases the availability of
meaningful data. However, the degree of mobility
has a signiﬁcant impact on the eﬀectiveness of the
IDS. Routing errors and packet drops due to
increased mobility may mask malicious behavior,
however malicious nodes cannot signiﬁcantly aﬀect
routing either.
9. Summary and future work