#Config.xml: section for implementation scenarios
weight = "0.10"/>
........., aerospace, consumer electronics, industrial,.........
#Config.xml: section for derived metrics
………………………………………..
#Defines all derived metrics for dependability benchmarking and design space exploration
DseMetrics.py
#custom metric, for each item from database.models, derived from:
#{injectionstat} - SBFI statistic (D metrics), 
#{implprop} – PPA metrics from database.models 
#{custom_arg} - external argument, converted to dictionary at invocation
def DeriveMTTF(injectionstat, implprop, custom_arg):
    frate = dict()
    for cell, cell_stat in injectionstat.iteritems():
        frate[cell]= float(0)
        for f in cell_stat['fault']:
            frate[cell] += (f['c_rate']+f['s_rate'])/len(cell_stat['fault'])
    L = float(0)
    for cell, val in frate.iteritems():
        L += custom_arg['k']*custom_arg['fit.'+cell]*implprop[cell]*val
    return(1/L)
Fig. 7: Excerpt from the conﬁguration ﬁle deﬁning custom
metrics and its relative importance for considered scenarios
displays the selected metrics and weights for the automotive
and mobile scenarios.
Table III lists the derived metrics for the considered alter-
natives and the resulting WSM score (the higher the better)
for each scenario. As can be seen, and due to the relative
importance of metrics for each scenario, the combination of
327
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Goodness of different implementation alternatives
for the MC8051 microcontroller. Best results in bold.
Derived metrics
WSM score
)
W
m
(
r
e
w
o
P
)
z
H
M
(
y
c
n
e
u
q
e
r
F
)
8
0
1
F
T
×
T
Alternatives
h
M
(
XST-Artix7
7.04
XST-Kintex7
6.93
XST-Virtex7
6.93
Precision-Artix7
9.44
Precision-Kintex7
9.06
Precision-Virtex7
9.11
1 Cost is relative to the cheapest (price per slice × slice utilization).
1
t
s
o
C
1.71
2.19
16.57
1.00
1.19
10.54
46.01
77.71
74.90
34.79
49.54
51.15
55.81
83.59
80.29
50.14
71.93
71.45
19.15
18.45
18.42
21.60
21.27
21.15
C
D
S
)
%
(
e
v
i
t
o
m
o
t
u
A
0.78
0.89
0.86
0.80
0.86
0.85
e
l
i
b
o
M
0.75
0.67
0.63
0.88
0.78
0.69
#Config.xml: section for Factorial design
....................................
....................................
Fig. 8: Except from a conﬁguration ﬁle deﬁning the considered
parameters and their possible values
XST synthesiser and a middle-end FPGA (Kintex7) gets the
best results for the automotive domain, whereas the generic
synthesiser (Precision RTL) with a low-end FPGA (Artix-7)
gets the best score for the mobile scenario.
V. DESIGN SPACE EXPLORATION (OPTIMISATION)
This scenario takes place when hardware designers must
conﬁgure the optimisation ﬂags of selected EDA tools, and the
architectural parameters of considered IP cores, to attain the
best possible implementation. As in the case of dependability
benchmarking, this will also depend on the criteria deﬁned
for each application domain. This scenario is illustrated by
studying which is the optimum conﬁguration of the Xilinx’s
XST synthesiser to implement a PIC microcontroller [18] in
a Virtex-6 FPGA for several application domains.
For DAVOS to generate the required design of experiments,
it requires all the optimisation parameters to be considered
and the levels at which they can be set. This is accomplished
by customising the  section of an XML
conﬁguration ﬁle. For each parameter, a new  sub-
section must be added, identifying the command line option
of the tool and the phase of the semi-custom design ﬂow in
which it is used. Additional  subsections deﬁne the
levels considered for the design of experiments (factor value
attribute), and the actual value of this tool option (option value
attribute). Fig. 8 depicts and excerpt of this conﬁguration ﬁle
for the XST synthesiser. For instance, the opt mode synthesis
option can be set to either Speed or Area.
XST provides 31 different conﬁguration parameters that
can potentially impact PPAD properties, so performing a
full factorial design is not feasible within a reasonable time
frame. DAVOS, then, will compute a fractional factorial design
covering a statistically representative subset of the whole
Fig. 9: Web-based report displaying the best conﬁgurations for
XST to implement a PIC microcontroller, and Pareto-optimal
conﬁgurations for MTTF and clock frequency
exploration space. In this case, only 128 out of 231 possible
conﬁgurations have been implemented, their PPAD properties
estimated and, as previously explained, stored in the database.
This small, but statistically representative, set of samples
is now used to infer regression models that predict PPAD
responses for any possible conﬁguration of the considered
parameters. The decision support module then iterates through
the whole design space, using the computed regression mod-
els,
to determine the best possible conﬁguration of these
parameters for each application domain. This module relies
on GPGPU computation, when CUDA runtime available, to
speed-up this process in huge design spaces.
Fig. 9 depicts an excerpt from the resulting DSE web-based
report. In addition to the best conﬁguration for each appli-
cation domain, it also displays a Pareto-optimal graph with
non-dominated conﬁgurations highlighted (it is not possible
to improve one PPAD property without negatively impacting
another). As can be seen in Fig. 9, there are two conﬁgurations
that maximise MTTF or clock frequency in detriment of
the other, whereas other two conﬁgurations ﬁnd a trade-off
between them. This Pareto-optimal graph can be of interest
when no particular application domain is considered and, thus,
no weights have been deﬁned for selected criteria.
VI. DISCUSSION
The considered scenarios have illustrated how DAVOS
supports dependability-driven analysis within the semi-custom
design ﬂow. However there are a number of questions that can
come to the mind of designers about its applicability.
328
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply. 
VII. CONCLUSIONS
This paper has presented DAVOS, a toolkit
that seam-
lessly integrates into the common semi-custom design ﬂow
to offer support for dependability-driven processes, such as
assessment, veriﬁcation, optimisation (DSE), and selection
(benchmarking). Its ﬂexible and modular architecture makes it
compatible with standard HDLs, off-the-shelf EDA tools, and
implementation technologies, enabling its extension to support
any other processes (even those not dependability related).
An interactive web-based interface provides custom query and
visualisation features to ease the analysis of obtained data.
Our future work will focus on i) extending the toolkit so
it can be easily conﬁgured through a web-based interface,
ii) deﬁning novel fault models for different implementation
technologies, iii) complementing the fault injection module
with FPGA-based fault emulation for speed-up purposes, and
iv) improving the analysis and representation of data.
REFERENCES
[1] H. Kaeslin, Top-Down Digital VLSI Design: From Architectures to Gate-
Level Circuits and FPGAs, 1st ed. Morgan Kaufmann, 2014.
[2] W. Wolf, Modern VLSI Design: IP-Based Design, 4th ed.
Prentice
Hall, 2008.
[3] Z. Feng, “Logic Synthesis for FPGA Reliability,” Ph.D. dissertation,
University of California, Los Angeles, 2013.
[4] J. C. Ruiz, D. de Andr´es, S. Blanc, and P. Gil, “Generic Design and
Automatic Deployment of NMR Strategies on HW Cores,” in IEEE
Paciﬁc Rim Int. Symp. on Dependable Computing, 2008, pp. 265–272.
[5] Z. Feng, N. Jing, and L. He, “IPF: In-Place X-Filling Algorithm for the
Reliability of Modern FPGAs,” IEEE Transactions on Very Large Scale
Integration (VLSI) Systems, vol. 22, no. 10, pp. 2226–2229, 2014.
[6] K. Huang, Y. Hu, and X. Li, “Reliability-Oriented Placement and
Routing Algorithm for SRAM-Based FPGAs,” IEEE Transactions on
VLSI Systems, vol. 22, no. 2, pp. 256–269, 2014.
[7] E. Jenn, J. Arlat, M. Rimen, J. Ohlsson, and J. Karlsson, “Fault injection
into VHDL models: the MEFISTO tool,” in International Symposium on
Fault-Tolerant Computing.
IEEE, 1994, pp. 66–75.
[8] C. R. Yount and D. P. Siewiorek, “A methodology for the rapid injection
of transient hardware errors,” IEEE Transactions on Computers, vol. 45,
no. 8, pp. 881–891, 1996.
[9] V. Sieh, O. Tschache, and F. Balbach, “VERIFY: Evaluation of reliability
using VHDL-models with embedded fault descriptions,” in International
Symposium on Fault-Tolerant Computing.
IEEE, 1997, pp. 32–36.
[10] J. C. Baraza, J. Gracia, D. Gil, and P. Gil, “A prototype of a VHDL-based
fault injection tool: description and application,” Journal of Systems
Architecture, vol. 47, no. 10, pp. 847–867, 2002.
[11] C. Robach and M. Scholive, Simulation-Based Fault Injection and
Testing Using the Mutation Technique. Springer, 2003, pp. 195–215.
[12] I. Tuzov, D. de Andr´es, and J.-C. Ruiz, “Dependability-aware Design
Space Exploration for Optimal Synthesis Parameters Tuning,” in IEEE/I-
FIP Int. Conf. on Dependable Systems and Networks, 2017, pp. 121–132.
[13] A. Ishizaka and P. Nemery, Multi-criteria Decision Analysis: Methods
A. Yet Another Fault Injection Tool
The fault injection module of DAVOS extends the basic fea-
tures provided by well-known simulation-based fault injection
tools for hardware designs. On one hand, it supports major
HDLs and abstractions levels (RTL to implementation). On the
other hand, in addition to common parallel execution capabil-
ities, it integrates different techniques speciﬁcally conceived
to speed-up the simulation of heavy hardware models.
In fact, even being at its core, the great potential of DAVOS
does not lie in this module by itself. DAVOS follows the same
path that EDA tools providers and device manufacturers paved
years ago when they agreed on deﬁning standard formats to
make existing tools and libraries interoperable. It presents a
modular architecture that ensures that all their internal modules
can be easily conﬁgured and adapted to work in coordination
with any other modules. What is more, DAVOS is seamlessly
integrated into the common semi-custom design ﬂow, so any
HDL, EDA tool, and/or implementation technology can be
used just by customising the required conﬁguration XML ﬁles.
Thus, DAVOS not only responds to the necessity of tak-
ing dependability-related attributes into consideration for the
implementation of hardware designs, but it also enables the
application of benchmarking and DSE procedures to the semi-
custom design ﬂow without having dependability in mind.
B. Is It Really Plug and Play?
Currently, DAVOS offers native support for Xilinx’s ISE
toolchain, Mentor Graphics’ Precision RTL synthesiser and
ModelSim simulator. Although several conﬁguration ﬁles
should be customised to put into practice the most demanding
scenario (dependability-driven DSE), it can be achieved by
following the guidelines described in Sections III–V.
The integration of any other EDA tool in the implementation
module requires the development of custom Python functions
to generate the appropriate command line scripts and process
resulting reports. A similar process is required to integrate a
new simulator into the fault injection module. Existing ﬁles
for already supported tools can be used as templates.
C. It Looks Great, Can I Have Access to DAVOS?
Although several fault injection tools exist, they are rarely
available. Thus, researchers usually develop their own tools
and cross-comparison of results is barely possible.
DAVOS is published at https://github.com/IlyaTuzov/
DAVOS as a free and open-source toolkit under MIT license.
In such a way, the community will beneﬁt from the integration
of new modules and EDA tools, and researchers could share
their results in a compatible format. The results from the three
considered scenarios are available at http://doi.org/10.5281/
zenodo.1217885.
ACKNOWLEDGMENT
This work has been partially funded by the Ministerio de
Econom´ıa, Industria y Competitividad de Espa˜na under grant
agreement no TIN2016-81075-R, and the “Programa de Ayu-
das de Investigaci´on y Desarrollo” (PAID) de la Universitat
Polit`ecnica de Val`encia.
and Software. Wiley, 2013.
[14] Cobham Gaisler AB, “Leon3 processor product sheet,” 2016. [Online].
Available: http://www.gaisler.com/doc/leon3 product sheet.pdf
[15] Oregano Systems GmbH, “MC8051 IP Core, Synthesizeable VHDL
Microcontroller IP-Core, User Guide (V 1.2), 2013,” 2013. [Online].
Available: http://www.oreganosystems.at/download/mc8051 ug.pdf
[16] H. Quinn and P. Graham, “Terrestrial-based radiation upsets: a cau-
tionary tale,” in IEEE Symposium on Field-Programmable Custom
Computing Machines, 2005, pp. 193–202.
[17] E. Triantaphyllou, “Multi-Criteria Decision Making Methods,” in Multi-
criteria Decision Making Methods: A Comparative Study, ser. Applied
Optimization. Springer US, 2000, vol. 44, pp. 5–21.
[18] E. Romani, “Structural PIC165X microcontroller,” Hamburg VHDL
Archive, 1998. [Online]. Available: https://tams-www.informatik.uni-
hamburg.de/vhdl
329
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply.