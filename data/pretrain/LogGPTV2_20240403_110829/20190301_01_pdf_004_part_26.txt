### 3.5.5 CASE Statements

The `CASE` statement in SPL (Stored Procedure Language) allows for conditional execution of statements based on a boolean expression. The syntax is as follows:

```sql
[ WHEN boolean-expression THEN
    statements
] ...
[ ELSE
    statements
]
END CASE;
```

- **Evaluation Order**: The `boolean-expression` is evaluated in the order it appears within the `CASE` statement.
- **Execution Flow**:
  - When the first `boolean-expression` evaluates to `TRUE`, the corresponding `THEN` clause is executed, and control continues after the `END CASE` keywords.
  - If none of the `boolean-expressions` evaluate to `TRUE` and there is an `ELSE` clause, the statements following `ELSE` are executed.
  - If none of the `boolean-expressions` evaluate to `TRUE` and there is no `ELSE` clause, an exception is thrown.

#### Example: Using a Searched CASE Statement

The following example demonstrates how to use a searched `CASE` statement to assign a department name and location to a variable based on the department number.

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_deptno emp.deptno%TYPE;
    v_dname dept.dname%TYPE;
    v_loc dept.loc%TYPE;
    CURSOR emp_cursor IS SELECT empno, ename, deptno FROM emp;
BEGIN
    OPEN emp_cursor;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME DEPTNO DNAME LOC');
    DBMS_OUTPUT.PUT_LINE('----- ------- ------ ---------- ---------');

    LOOP
        FETCH emp_cursor INTO v_empno, v_ename, v_deptno;
        EXIT WHEN emp_cursor%NOTFOUND;

        CASE
            WHEN v_deptno = 10 THEN
                v_dname := 'Accounting';
                v_loc := 'New York';
            WHEN v_deptno = 20 THEN
                v_dname := 'Research';
                v_loc := 'Dallas';
            WHEN v_deptno = 30 THEN
                v_dname := 'Sales';
                v_loc := 'Chicago';
            WHEN v_deptno = 40 THEN
                v_dname := 'Operations';
                v_loc := 'Boston';
            ELSE
                v_dname := 'unknown';
                v_loc := '';
        END CASE;

        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) ||
                             ' ' || v_deptno || ' ' || RPAD(v_dname, 14) || ' ' ||
                             v_loc);
    END LOOP;

    CLOSE emp_cursor;
END;
```

**Output:**

```
EMPNO ENAME DEPTNO DNAME LOC
----- ------- ------ ---------- ---------
7369 SMITH     20 Research Dallas
7499 ALLEN     30 Sales    Chicago
7521 WARD      30 Sales    Chicago
7566 JONES     20 Research Dallas
7654 MARTIN    30 Sales    Chicago
7698 BLAKE     30 Sales    Chicago
7782 CLARK     10 Accounting New York
7788 SCOTT     20 Research Dallas
7839 KING      10 Accounting New York
7844 TURNER    30 Sales    Chicago
7876 ADAMS     20 Research Dallas
7900 JAMES     30 Sales    Chicago
7902 FORD      20 Research Dallas
7934 MILLER    10 Accounting New York
```

### 3.5.6 Loops

SPL provides several loop constructs to repeat a series of commands. These include `LOOP`, `EXIT`, `CONTINUE`, `WHILE`, and `FOR`.

#### 3.5.6.1 LOOP

The `LOOP` construct defines an unconditional loop that repeats indefinitely until terminated by an `EXIT` or `RETURN` statement.

```sql
LOOP
    statements
END LOOP;
```

#### 3.5.6.2 EXIT

The `EXIT` statement terminates the innermost loop and passes control to the statement following `END LOOP`.

```sql
EXIT [ WHEN expression ];
```

- If the `WHEN` clause is present, the loop exits only if the specified condition is `TRUE`. Otherwise, control passes to the next statement after `EXIT`.

**Example: Loop with EXIT**

```sql
DECLARE
    v_counter NUMBER(2);
BEGIN
    v_counter := 1;
    LOOP
        EXIT WHEN v_counter > 10;
        DBMS_OUTPUT.PUT_LINE('Iteration # ' || v_counter);
        v_counter := v_counter + 1;
    END LOOP;
END;
```

**Output:**

```
Iteration # 1
Iteration # 2
Iteration # 3
Iteration # 4
Iteration # 5
Iteration # 6
Iteration # 7
Iteration # 8
Iteration # 9
Iteration # 10
```

#### 3.5.6.3 CONTINUE

The `CONTINUE` statement skips the remaining statements in the current iteration of the loop and proceeds to the next iteration.

```sql
CONTINUE [ WHEN expression ];
```

- If the `WHEN` clause is used, the next iteration begins only if the specified expression evaluates to `TRUE`. Otherwise, control passes to the next statement following `CONTINUE`.

**Example: Loop with CONTINUE**

```sql
DECLARE
    v_counter NUMBER(2);
BEGIN
    v_counter := 0;
    LOOP
        v_counter := v_counter + 1;
        EXIT WHEN v_counter > 10;
        CONTINUE WHEN MOD(v_counter, 2) = 1;
        DBMS_OUTPUT.PUT_LINE('Iteration # ' || v_counter);
    END LOOP;
END;
```

**Output:**

```
Iteration # 2
Iteration # 4
Iteration # 6
Iteration # 8
Iteration # 10
```

#### 3.5.6.4 WHILE

The `WHILE` loop repeats a sequence of statements as long as the condition expression evaluates to `TRUE`.

```sql
WHILE expression LOOP
    statements
END LOOP;
```

- The condition is checked before each entry to the loop body.

**Example: WHILE Loop**

```sql
DECLARE
    v_counter NUMBER(2);
BEGIN
    v_counter := 1;
    WHILE v_counter <= 10 LOOP
        DBMS_OUTPUT.PUT_LINE('Iteration # ' || v_counter);
        v_counter := v_counter + 1;
    END LOOP;
END;
```

**Output:**

```
Iteration # 1
Iteration # 2
Iteration # 3
Iteration # 4
Iteration # 5
Iteration # 6
Iteration # 7
Iteration # 8
Iteration # 9
Iteration # 10
```

#### 3.5.6.5 FOR (integer variant)

The `FOR` loop iterates over a range of integer values.

```sql
FOR name IN [REVERSE] expression .. expression LOOP
    statements
END LOOP;
```

- The variable `name` is automatically defined as type `INTEGER` and exists only inside the loop.
- The loop iterates from the start value to the end value, inclusive.
- The `REVERSE` clause specifies that the loop should iterate in reverse order.

**Example: FOR Loop**

```sql
BEGIN
    FOR i IN 1 .. 10 LOOP
        DBMS_OUTPUT.PUT_LINE('Iteration # ' || i);
    END LOOP;
END;
```

**Output:**

```
Iteration # 1
Iteration # 2
Iteration # 3
Iteration # 4
Iteration # 5
Iteration # 6
Iteration # 7
Iteration # 8
Iteration # 9
Iteration # 10
```

If the start value is greater than the end value, the loop body is not executed at all.

**Example: FOR Loop with No Execution**

```sql
BEGIN
    FOR i IN 10 .. 1 LOOP
        DBMS_OUTPUT.PUT_LINE('Iteration # ' || i);
    END LOOP;
END;
```

**Output:**

```
(no output)
```

### 3.5.7 Exception Handling

Exception handling in SPL allows you to trap and recover from errors. The syntax for a `BEGIN` block with an `EXCEPTION` section is as follows:

```sql
[ DECLARE
    declarations ]
BEGIN
    statements
EXCEPTION
    WHEN condition [ OR condition ]... THEN
        handler_statements
    [ WHEN condition [ OR condition ]... THEN
        handler_statements ]...
END;
```

- If no error occurs, the block executes all statements and control passes to the next statement after `END`.
- If an error occurs, further processing of the statements is abandoned, and control passes to the `EXCEPTION` list.
- The list is searched for the first condition matching the error. If a match is found, the corresponding `handler_statements` are executed, and control passes to the next statement after `END`.
- If no match is found, the error propagates out as though the `EXCEPTION` clause were not there.

**Special Condition Names:**
- `OTHERS`: Matches every error type.
- Condition names are not case-sensitive.

**Table 3-2: Exception Condition Names**

| Condition Name          | Description                                                                 |
|-------------------------|-----------------------------------------------------------------------------|
| `CASE_NOT_FOUND`        | None of the cases in a `CASE` statement evaluate to `TRUE` and there is no `ELSE` condition. |
| `COLLECTION_IS_NULL`    | Attempted to invoke a collection method on a null collection.               |
| `CURSOR_ALREADY_OPEN`   | Attempted to open a cursor that is already open.                            |
| `DUP_VAL_ON_INDEX`      | Attempted to store a duplicate value in a constrained column.               |
| `INVALID_CURSOR`        | Attempted to access an unopened cursor.                                     |
| `INVALID_NUMBER`        | Encountered a data exception (equivalent to SQLSTATE class code 22).        |
| `NO_DATA_FOUND`         | No rows satisfy the selection criteria.                                     |
| `OTHERS`                | Exception not caught by a prior condition in the exception section.         |
| `SUBSCRIPT_BEYOND_COUNT`| Referenced a subscript of a nested table or varray beyond its initialized or extended size. |
| `SUBSCRIPT_OUTSIDE_LIMIT` | Referenced a subscript or extended a varray beyond its maximum size limit.  |
| `TOO_MANY_ROWS`         | More than one row satisfies the selection criteria (where only one row is allowed). |
| `VALUE_ERROR`           | Encountered a data exception (equivalent to SQLSTATE class code 22).        |
| `ZERO_DIVIDE`           | Attempted to divide by zero.                                                |

**Note:** `INVALID_NUMBER` and `VALUE_ERROR` are not compatible with Oracle databases for which these condition names are for exceptions resulting only from a failed conversion of a string to a numeric literal. In addition, for Oracle databases, an `INVALID_NUMBER` exception is applicable only to SQL statements while a `VALUE_ERROR` exception is applicable only to procedural statements.

### 3.5.8 User-defined Exceptions

User-defined exceptions can be raised explicitly using the `RAISE` statement. These exceptions are typically used to handle logical errors that do not fit into the predefined exception categories.

**Declaring and Raising a User-defined Exception:**

```sql
DECLARE
    exception_name EXCEPTION;
BEGIN
    ...
    RAISE exception_name;
    ...
END;
```

- Unhandled exceptions propagate back through the call stack.
- User-defined exceptions declared in a block are local to that block and global to any nested blocks within the block.
- To reference an exception in an outer block, you must assign a label to the outer block and preface the exception name with the block name.

**Example: Declaring a User-defined Exception in a Package**

```sql
CREATE OR REPLACE PACKAGE ar AS
    overdrawn EXCEPTION;
    PROCEDURE check_balance(p_balance NUMBER, p_amount NUMBER);
END;

CREATE OR REPLACE PACKAGE BODY ar AS
    PROCEDURE check_balance(p_balance NUMBER, p_amount NUMBER) IS
    BEGIN
        IF p_balance < p_amount THEN
            RAISE overdrawn;
        END IF;
    END;
END;
```

In this example, the `overdrawn` exception is declared in the `ar` package and can be raised in the `check_balance` procedure without needing a package qualifier.