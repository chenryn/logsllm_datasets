                flag = False
                ss = string.ascii_letters
                for i in ss:
                    if (flag):
                        break
                    for j in ss:
                        if (flag):
                            break
                        for k in ss:
                            if (flag):
                                break
                            for l in ss:
                                xxxx = i + j + k + l
                                if (sha_ans == getsha256(xxxx + sha_str)):
                                    prefix = xxxx
                                    print('in')
                                    flag = True
                                    break
                print(prefix)
                r.recvline()
                r.sendline(prefix)
                tt = r.recvline().decode().replace('\n', '')
                print(tt)
                r.sendline(base64.b64encode(data))
                r.interactive()
                exit(0)
            adv=adv-adv.grad*lr
            adv=adv.clamp(0,1)
            update = f"Iteration #{i}: l1={l1l} l2loss={l2l} hashloss={hashl}"
            print(update)
            print(hex_hash(adv_out))
            print(hex_hash(target_out))
            print("diffcount",torch.sum(torch.abs(adv-image)>0.005))
            print(f"l0 loss: {torch.sum(adv!=image)}")
            print("best ", best)
            print(f"best_l0: {best_l0}")
            print(f"best_l2: {best_l2}")
            if hex_hash(adv_out)==hex_hash(target_out):
                best=min(best,torch.sum(torch.abs(adv-image)>0.005).numpy())
                best_l0=min(best_l0,torch.sum(adv!=image).numpy())
                best_l2 = min(best_l2, l2l)
                itercnt+=1
                mask=(torch.abs(adv-image) L1_THRES or np.linalg.norm(diff, 2) > L2_THRES:
            raise BufferError("attack failed")
        arr = torch.FloatTensor(arr).reshape(1, 3, 28, 28)
        return (mymodal(arr)<0.5).tolist()[0][0]
    print(Check(b64decode(base64_src)))
### 分析
这道题目依旧考察的是`FGSM`这种常用的对抗样本算法, 类似于`N1CTF2021 Collision`的简化版.
### 解题
这里直接贴出出题人的`exp`.
    from torch import nn
    from torch.utils.data import Dataset,DataLoader