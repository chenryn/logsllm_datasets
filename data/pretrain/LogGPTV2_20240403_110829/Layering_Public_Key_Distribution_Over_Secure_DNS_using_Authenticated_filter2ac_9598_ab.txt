brieﬂy discussed the potential for using DNSSEC to dis-
tribute end-user public keys. In a subsequent RFC [6] the
author describes a DNS key exchange record type with se-
mantics similar to DNS mail exchange records. Though fo-
cus was on IPSec, the author brieﬂy describes the potential
for this mechanism to delegate authority to a more general
key distribution center.
3.4. Identity Based Encryption (IBE)
Identity-based cryptography addresses the key distribu-
tion problem by allowing a sender to directly derive a public
key from a recipient’s name. Each recipient obtains its se-
cret key from a trusted key generator, which generates this
private key from the receiver’s name, public system param-
eters, and a system secret. Since the key generator knows
all private keys, this system implies key escrow. The work
in [44] describes a domain-level key-distribution scheme
using the identity based encryption scheme of Boneh and
Franklin [10]. Requiring key escrow is not generally ac-
ceptable and even careful implementations carry signiﬁcant
risks [1].
4. The Internet Key Service
Instead of placing cryptographic keys directly in DNS,
as previously proposed, we use DNSSEC for authenticated
delegation. This approach imposes minimal overhead on
DNS. As we argued in Section 1.1, DNS’s role in naming is
a fundamental aspect of the Internet, so any mechanism to
bind keys to named entities on the Internet must derive its
authority from DNS. All names addressible over the Inter-
net are ultimately reducible to DNS names, and all authority
to bind names to objects must ultimately derive from the au-
thority DNS has over names. This basic observation drives
our design of IKS.
Previous proposals for authenticated key distribution in
the Internet have failed either because they were unable to
root their authentication mechanisms in DNS, or because
they used DNS directly to manage keys, leading to the prob-
lems discussed in Section 2.4.
The Internet Key Service addresses these problems by
using DNSSEC to securely delegate a part of DNS’s author-
ity over name resolution to a specialized service designed to
meet the requirements of authenticated key distribution. No
natural secure delegation mechanism existed for the Internet
prior to DNSSEC. The imminent deployment of DNSSEC
has made the key distribution problem tractable.
4.1. IKS Overview
IKS allows public keys to be registered to any entity that
can be assigned a DNS name, such as a host, user, or service
port. These keys are stored in and managed by IKS servers,
which may be discovered securely through DNSSEC. In
Flexibility: Domain- and application- speciﬁc mechanisms
for authenticating users during key registration must be
supported.
Efﬁciency: The number of required messages must be
small for performance and reliability reasons.
Generality: Service mechanisms must be application-
independent. The key service must honor the end-to-
end principle, providing service to any application.
Security: To protect the private signing keys, key registra-
tion and query servers should have limited contact with
the system’s key-signing keys.
Consistency: The key-authentication guarantees expected
by an end-user (the “user-model”) must be consistent
with the guarantees actually provided by the system
(the “system model”).
4.3. IKS Architecture
Our use of DNSSEC for authenticated delegation pro-
vides both a secure hand-off between DNS and IKS servers,
and a mechanism for authenticating server responses. Each
participating DNS domain delegates to one or more IKS
servers the responsibility for handling IKS requests. This
delegation is accomplished by adding resource records to
the DNS zone, and is under the domain administrator’s di-
rect control. There is no implicit delegation in IKS; a do-
main that does not explicitly publish delegation records is
choosing not to participate in IKS.
To allow clients to validate responses, IKS servers sign
all keys returned with a named key-signing key (KSK), the
public half of which is committed in DNSSEC. This com-
mitment can be securely retrieved and used in veriﬁcation.
Registration acknowledgments and query failure re-
sponses are signed on-line with a response-signing key
(RSK), the public half of which can be retrieved from the
IKS. Using the KSK for this purpose would require on-line
use of its secret half, placing the KSK itself at risk.
Our scheme is conceptually independent of DNSSEC,
relying only on the presence of some trustworthy name ser-
vice; the impact of changes to DNSSEC standards on our
proposal is likely to be minimal. Unlike previous attempts
to distribute keys via DNS(SEC), our proposal avoids the
three pitfalls enumerated in Section 2.4: poor scalability,
poor query interface, and mismatch of administrative au-
thority.
Scalability.
By layering IKS over DNS, we decentral-
ize key distribution without impeding scalability. The ad-
ditional data placed in DNS (delegation records and KSK
commitments) is negligible, and does not increase with the
number of keys active in the system. The DNS overhead for
Figure 1. IKS Architecture: Naming and au-
thentication authority is placed in DNS and
IKS, which clients use to resolve names se-
curely.
turn, IKS servers handle key registration and lookup re-
quests for names belonging to a speciﬁc DNS domain in
an authenticated manner.
A client wishing to register or retrieve a public key for a
DNS named entity ﬁrst uses DNSSEC to discover and ver-
ify the identity of an IKS server responsible for that domain.
The client then sends the key-registration or lookup request
to this server using the IKS protocol, and authenticates the
server’s responses using key commitments placed in DNS.
One can now guarantee that the requests have been pro-
cessed by a server to which key management authority for
the domain was properly delegated. These keys may now
be used for establishing secure communications channels
or validating digital signatures with conﬁdence. Figure 1
shows high-level information ﬂows in the Internet Key Ser-
vice architecture.
Since each domain administers its own IKS server (or
delegates this task to a trusted organization) there are
no communications between IKS servers for different do-
mains.
IKS operation is thus structured differently from
that of DNS. With authenticated delegation, we avoid the
bottlenecks that can arise in DNS-like hierarchies.
4.2. Design Requirements/Constraints
We have designed IKS to meet the following require-
ments, which we feel are essential for a succesful secure
key distribution service for the Internet.
Authority: The service’s authority to bind DNS names to
keys must derive from DNS’s naming authority.
Scalability: The service must not result in a substantial in-
crease in load on DNS.
Compatibility: Changes to DNS must be avoided. The
service must not create new resource record types.
Client ApplicationIKS ServerDNSSEC ServerKey Queries,Key RegistrationsIKS Location,Signing KeyCommitmentsIKS Location,Signing Key CommitmentsDomainAdminSigning Keysdiscovering delegations and retrieving KSK commitments
is comparable to that for resolving other services (say, the IP
address of a website). IKS permits domain administrators
wide latitude in distributing key management workloads,
say, using a simple weighted load balancing across a group
of IKS servers. Our design thus supports system scalability.
Query Interface.
IKS uses a specialized query and reg-
istration protocol which provides the appropriate level of
expressiveness for key registration and distribution. Clients
can perform narrow searches, based on attributes such as
key length, cryptographic algorithm, and key-container for-
mat, to discover keys suitable for their purposes.
Administrative Authority. Unlike proposals to distribute
keys in DNS, IKS places minimal burden on DNS admin-
istrators, and does not cause rapid changes to DNS zone
data. The delegation records for a given domain are static,
and publication and revocation of key-signing keys are in-
frequent events, not driven by end-user behavior.
5. Protocol Overview
We introduce IKS by showing how to fetch and register
keys. We brieﬂy discuss key revocation in IKS.
5.1. Key Lookup
A name N = (E,D) consists of two components: the
entity part E that designates the user, host, or communica-
tion endpoint, and the domain part D, which is a DNS do-
main name. A query speciﬁes a name N and a set of key
selection criteria C, and is processed as follows.
1. Query DNSSEC for the IKS server for domain D.
2. Send a key-query message to the IKS server for N.
3. IKS responds with metadata for all public keys regis-
tered for N, signed with a key-signing key (KSK).
4. Validate the IKS response as follows:
(a) Fetch the KSK from the IKS server.
(b) Request DNS for the commitment for this KSK.
Validate the response using DNSSEC zone sig-
natures.
(c) Validate the KSK using this commitment.
(d) Verify the IKS signature on the metadata for N’s
keys using the KSK.
5. At the client end, the key metadata are processed, and
keys matching the criteria C are identiﬁed. These keys
are fetched from IKS and veriﬁed.
If N has no keys published in IKS the query server gener-
ates a negative response signed with a response-signing key
(RSK) registered in IKS.
Trust Guarantees for IKS Responses. In accordance with
the consistency constraint (Section 4.2) we explicitly state
the guarantee made by IKS. A valid signature on a query
response indicates that
1. The IKS server for domain D asserts that the key pro-
vided is bound to name N in domain D.
2. The administrators of domain D have veriﬁed, to the
extent they see ﬁt, that the key in question was regis-
tered in the IKS for domain D by the user or agent in
control of name N.
IKS offers no guarantees about how veriﬁcation was per-
formed during key registration. IKS is decoupled from any
standards or protocols for identity veriﬁcation within do-
mains. Clients receiving validated query responses from
domain D decide for themselves what trust to place in D.
IKS insulates the end-user from the complexities of key dis-
tribution, but does not pretend to make guarantees about the
trustworthiness of domains. In all contexts, including IKS,
one must not confuse authentication with trustworthiness.
5.2. Key Registration
Given a target name N = (E,D) and a public key K,
registration proceeds as follows:
1. Query DNSSEC for the IKS server for domain D.
2. Send a key-registration message to the IKS server
specifying entity N, the key K, relevant metadata (per-
mitted uses, expiration date, and so on), and authenti-
cation information.
3. If authentication succeeds, and the registration is au-
thorized, the server returns a success message signed
by a named response-signing key (RSK). The client
can authenticate this RSK and the response as it does
for other key lookups.
If authentication fails, the registration server generates a
signed response indicating acceptable methods of authenti-
cation to guide the client in completing this transaction. As
with negative query responses these authentication failure
responses are signed with a response-signing key (RSK).
Authentication During Registration. The ﬂexibility con-
straint (Section 4.2) grants the registration servers latitude
in performing authentication when keys are registered.
To ensure correct operation in domains using different
authentication standards, we have recognized three different
authentication mechanisms as appropriate for IKS. Each do-
main supports a subset of these mechanisms, as determined
by its local security policies.
Username/Password: A registrant may authenticate to an
IKS server using a shared secret, such as a username
and password. An RSA encryption key is published
in IKS, which registrants may use to securely send the
secret to the server.
User Key Management: A client acting on behalf of a
registrant U may authenticate its request by signing it
with a special purpose key, which has been registered
to U using IKS.
Third-Party Authentication: IKS supports other, possi-
bly domain-speciﬁc, authentication methods by allow-
ing the authentication of requests based on signatures
using other certifying keys, again published via IKS.
The private half of these keys can be distributed to
a number of third-party authentication servers, which
can implement arbitrary authentication protocols and
use signatures with these keys to validate their authen-
tication with the IKS server. These external authenti-
cation protocols are outside of the scope of IKS.
In practice, it is likely that the Username/Password and
User Key Management authentication methods will be suf-
ﬁcient for the majority of IKS installations.
5.3. Key Revocation
When a key is registered in IKS an optional expiration
time may be provided to allow for the graceful expiration
of old keys.
IKS also supports a simple key revocation
mechanism for the exceptional case where a compromised
key must be revoked before its expiration time. In such an
event, the key’s holder must detect the key compromise and
submit an authenticated key revocation request to the IKS
server. We note that mechanisms for detecting key compro-
mises and timely revocation are application speciﬁc, and a
generally open problem outside the scope of IKS. Once a
key revocation request is authenticated and accepted by the
IKS server, the key’s IKS entry is updated and a signed key
revocation response is published in IKS.
To reduce the dangers presented by compromised keys,
IKS implementations must seek to minimize the delay be-
tween the acceptance of a key revocation request and the
publication of the signed key revocation. Caching of IKS
responses by clients reduces reduce IKS server loads, but
complictes the challenge of key revocation, since clients are
guaranteed to refresh their caches only upon key certiﬁcate
expiration. IKS implementations may choose short key cer-
tiﬁcate lifetimes to mitigate this problem.
5.4. Locating an IKS Server
A fundamental issue is how a client identiﬁes the IKS
servers responsible for a domain. We use the existing SRV
record type, intended for service location [28]. DNS SRV
records are intended to allow clients to perform service dis-
covery using DNS. As deﬁned in RFC 1700, a client locates
a server for service S running a protocol P in domain D,
through a DNS query for S. P.D. The response includes
a list of (host, port) pairs, along with a priority for
each matching record and a weight used to distribute load
across servers of the same priority. To locate a server using
DNS SRV records, a client must ﬁrst know the service and
protocol names. Since key lookups may be handled by a dif-
ferent set of servers than registration requests, we use two
distinct service names; ikqs, for “Internet Key-Query Ser-
vice”, and ikrs, for “Internet Key-Registration Service,”.
These IKS services both utilize the TCP protocol.
The IKS for a domain need not actually be hosted in or
by the owner of the domain. The domain administrator may
delegate this function by adding the required SRV records.
We see the potential for organizations, possibly existing cer-
tifying authorities who already have a good understanding
of the operational security issues involved in key manage-
ment, to offer IKS services to domain administrators.
5.5. Message Marshalling and Transport
We have chosen XML as the format for IKS messages
to ensure compatibility with the dominant message format
protocol and the dominant class of applications on the Inter-
net. It is relatively straightforward for a client to parse and
to generate the simple XML messages used in IKS.
Marshalling. The World Wide Web Consortium (W3C)
has published a multi-part recommendation called SOAP
(Simple Object Access Protocol) specifying an interop-
erable means of using XML to exchange structured and
typed information in a distributed environment or applica-
tion [26]. SOAP speciﬁes message formatting, including
the overall structure of the message as an XML document.
A more complete overview of SOAP, with supporting ex-
amples, can be found in [35].
Transport. With the increasing popularity of the Web
Services model of remote service invocation, HTTP is fast
becoming the de facto standard transport protocols for re-
mote procedure call. One of the primary reasons for this
adoption is that HTTP is typically permitted through ﬁre-
walls and across different administrative domains within an