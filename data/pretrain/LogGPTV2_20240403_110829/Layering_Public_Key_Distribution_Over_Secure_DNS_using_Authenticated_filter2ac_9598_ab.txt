### 3.4. Identity-Based Encryption (IBE)

Identity-based cryptography addresses the key distribution problem by allowing a sender to directly derive a public key from a recipient’s name. Each recipient obtains its secret key from a trusted key generator, which generates this private key using the receiver’s name, public system parameters, and a system secret. Since the key generator knows all private keys, this system implies key escrow. The work in [44] describes a domain-level key-distribution scheme using the identity-based encryption scheme of Boneh and Franklin [10]. However, requiring key escrow is generally not acceptable, and even careful implementations carry significant risks [1].

### 4. The Internet Key Service

Instead of placing cryptographic keys directly in DNS, as previously proposed, we use DNSSEC for authenticated delegation. This approach imposes minimal overhead on DNS. As argued in Section 1.1, DNS's role in naming is fundamental to the Internet, so any mechanism to bind keys to named entities must derive its authority from DNS. All names addressable over the Internet are ultimately reducible to DNS names, and all authority to bind names to objects must ultimately derive from the authority DNS has over names. This basic observation drives our design of IKS.

Previous proposals for authenticated key distribution in the Internet have failed either because they were unable to root their authentication mechanisms in DNS or because they used DNS directly to manage keys, leading to the problems discussed in Section 2.4.

The Internet Key Service (IKS) addresses these problems by using DNSSEC to securely delegate a part of DNS's authority over name resolution to a specialized service designed to meet the requirements of authenticated key distribution. No natural secure delegation mechanism existed for the Internet prior to DNSSEC. The imminent deployment of DNSSEC has made the key distribution problem tractable.

#### 4.1. IKS Overview

IKS allows public keys to be registered to any entity that can be assigned a DNS name, such as a host, user, or service port. These keys are stored in and managed by IKS servers, which may be discovered securely through DNSSEC. 

#### 4.2. Design Requirements/Constraints

We have designed IKS to meet the following requirements, which we feel are essential for a successful secure key distribution service for the Internet:

- **Authority**: The service’s authority to bind DNS names to keys must derive from DNS’s naming authority.
- **Scalability**: The service must not result in a substantial increase in load on DNS.
- **Compatibility**: Changes to DNS must be avoided. The service must not create new resource record types.
- **Flexibility**: Domain- and application-specific mechanisms for authenticating users during key registration must be supported.
- **Efficiency**: The number of required messages must be small for performance and reliability reasons.
- **Generality**: Service mechanisms must be application-independent. The key service must honor the end-to-end principle, providing service to any application.
- **Security**: To protect the private signing keys, key registration and query servers should have limited contact with the system’s key-signing keys.
- **Consistency**: The key-authentication guarantees expected by an end-user (the “user-model”) must be consistent with the guarantees actually provided by the system (the “system model”).

#### 4.3. IKS Architecture

Our use of DNSSEC for authenticated delegation provides both a secure hand-off between DNS and IKS servers and a mechanism for authenticating server responses. Each participating DNS domain delegates to one or more IKS servers the responsibility for handling IKS requests. This delegation is accomplished by adding resource records to the DNS zone, and is under the domain administrator’s direct control. There is no implicit delegation in IKS; a domain that does not explicitly publish delegation records is choosing not to participate in IKS.

To allow clients to validate responses, IKS servers sign all keys returned with a named key-signing key (KSK), the public half of which is committed in DNSSEC. This commitment can be securely retrieved and used in verification. Registration acknowledgments and query failure responses are signed online with a response-signing key (RSK), the public half of which can be retrieved from the IKS. Using the KSK for this purpose would require online use of its secret half, placing the KSK itself at risk.

Our scheme is conceptually independent of DNSSEC, relying only on the presence of some trustworthy name service. The impact of changes to DNSSEC standards on our proposal is likely to be minimal. Unlike previous attempts to distribute keys via DNS(SEC), our proposal avoids the three pitfalls enumerated in Section 2.4: poor scalability, poor query interface, and mismatch of administrative authority.

**Scalability**: By layering IKS over DNS, we decentralize key distribution without impeding scalability. The additional data placed in DNS (delegation records and KSK commitments) is negligible and does not increase with the number of keys active in the system. The DNS overhead for discovering delegations and retrieving KSK commitments is comparable to that for resolving other services (e.g., the IP address of a website). IKS permits domain administrators wide latitude in distributing key management workloads, such as using simple weighted load balancing across a group of IKS servers. Our design thus supports system scalability.

**Query Interface**: IKS uses a specialized query and registration protocol that provides the appropriate level of expressiveness for key registration and distribution. Clients can perform narrow searches based on attributes such as key length, cryptographic algorithm, and key-container format to discover keys suitable for their purposes.

**Administrative Authority**: Unlike proposals to distribute keys in DNS, IKS places minimal burden on DNS administrators and does not cause rapid changes to DNS zone data. The delegation records for a given domain are static, and publication and revocation of key-signing keys are infrequent events, not driven by end-user behavior.

### 5. Protocol Overview

We introduce IKS by showing how to fetch and register keys. We briefly discuss key revocation in IKS.

#### 5.1. Key Lookup

A name \( N = (E, D) \) consists of two components: the entity part \( E \) that designates the user, host, or communication endpoint, and the domain part \( D \), which is a DNS domain name. A query specifies a name \( N \) and a set of key selection criteria \( C \), and is processed as follows:

1. Query DNSSEC for the IKS server for domain \( D \).
2. Send a key-query message to the IKS server for \( N \).
3. IKS responds with metadata for all public keys registered for \( N \), signed with a key-signing key (KSK).
4. Validate the IKS response as follows:
   - Fetch the KSK from the IKS server.
   - Request DNS for the commitment for this KSK. Validate the response using DNSSEC zone signatures.
   - Validate the KSK using this commitment.
   - Verify the IKS signature on the metadata for \( N \)'s keys using the KSK.
5. At the client end, the key metadata are processed, and keys matching the criteria \( C \) are identified. These keys are fetched from IKS and verified.

If \( N \) has no keys published in IKS, the query server generates a negative response signed with a response-signing key (RSK) registered in IKS.

**Trust Guarantees for IKS Responses**: In accordance with the consistency constraint (Section 4.2), we explicitly state the guarantee made by IKS. A valid signature on a query response indicates that:
1. The IKS server for domain \( D \) asserts that the key provided is bound to name \( N \) in domain \( D \).
2. The administrators of domain \( D \) have verified, to the extent they see fit, that the key in question was registered in the IKS for domain \( D \) by the user or agent in control of name \( N \).

IKS offers no guarantees about how verification was performed during key registration. IKS is decoupled from any standards or protocols for identity verification within domains. Clients receiving validated query responses from domain \( D \) decide for themselves what trust to place in \( D \). IKS insulates the end-user from the complexities of key distribution but does not pretend to make guarantees about the trustworthiness of domains. In all contexts, including IKS, one must not confuse authentication with trustworthiness.

#### 5.2. Key Registration

Given a target name \( N = (E, D) \) and a public key \( K \), registration proceeds as follows:

1. Query DNSSEC for the IKS server for domain \( D \).
2. Send a key-registration message to the IKS server specifying entity \( N \), the key \( K \), relevant metadata (permitted uses, expiration date, etc.), and authentication information.
3. If authentication succeeds and the registration is authorized, the server returns a success message signed by a named response-signing key (RSK). The client can authenticate this RSK and the response as it does for other key lookups.
4. If authentication fails, the registration server generates a signed response indicating acceptable methods of authentication to guide the client in completing this transaction. As with negative query responses, these authentication failure responses are signed with a response-signing key (RSK).

**Authentication During Registration**: The flexibility constraint (Section 4.2) grants the registration servers latitude in performing authentication when keys are registered. To ensure correct operation in domains using different authentication standards, we recognize three different authentication mechanisms as appropriate for IKS. Each domain supports a subset of these mechanisms, as determined by its local security policies:

- **Username/Password**: A registrant may authenticate to an IKS server using a shared secret, such as a username and password. An RSA encryption key is published in IKS, which registrants may use to securely send the secret to the server.
- **User Key Management**: A client acting on behalf of a registrant \( U \) may authenticate its request by signing it with a special-purpose key, which has been registered to \( U \) using IKS.
- **Third-Party Authentication**: IKS supports other, possibly domain-specific, authentication methods by allowing the authentication of requests based on signatures using other certifying keys, again published via IKS. The private half of these keys can be distributed to a number of third-party authentication servers, which can implement arbitrary authentication protocols and use signatures with these keys to validate their authentication with the IKS server. These external authentication protocols are outside the scope of IKS.

In practice, it is likely that the Username/Password and User Key Management authentication methods will be sufficient for the majority of IKS installations.

#### 5.3. Key Revocation

When a key is registered in IKS, an optional expiration time may be provided to allow for the graceful expiration of old keys. IKS also supports a simple key revocation mechanism for the exceptional case where a compromised key must be revoked before its expiration time. In such an event, the key’s holder must detect the key compromise and submit an authenticated key revocation request to the IKS server. Mechanisms for detecting key compromises and timely revocation are application-specific and a generally open problem outside the scope of IKS. Once a key revocation request is authenticated and accepted by the IKS server, the key’s IKS entry is updated, and a signed key revocation response is published in IKS.

To reduce the dangers presented by compromised keys, IKS implementations must seek to minimize the delay between the acceptance of a key revocation request and the publication of the signed key revocation. Caching of IKS responses by clients reduces IKS server loads but complicates the challenge of key revocation, as clients are guaranteed to refresh their caches only upon key certificate expiration. IKS implementations may choose short key certificate lifetimes to mitigate this problem.

#### 5.4. Locating an IKS Server

A fundamental issue is how a client identifies the IKS servers responsible for a domain. We use the existing SRV record type, intended for service location [28]. DNS SRV records are intended to allow clients to perform service discovery using DNS. As defined in RFC 1700, a client locates a server for service \( S \) running a protocol \( P \) in domain \( D \) through a DNS query for \( S.P.D \). The response includes a list of (host, port) pairs, along with a priority for each matching record and a weight used to distribute load across servers of the same priority. To locate a server using DNS SRV records, a client must first know the service and protocol names. Since key lookups may be handled by a different set of servers than registration requests, we use two distinct service names: `ikqs` for "Internet Key-Query Service" and `ikrs` for "Internet Key-Registration Service." These IKS services both utilize the TCP protocol.

The IKS for a domain need not actually be hosted in or by the owner of the domain. The domain administrator may delegate this function by adding the required SRV records. We see the potential for organizations, possibly existing certifying authorities who already have a good understanding of the operational security issues involved in key management, to offer IKS services to domain administrators.

#### 5.5. Message Marshalling and Transport

We have chosen XML as the format for IKS messages to ensure compatibility with the dominant message format protocol and the dominant class of applications on the Internet. It is relatively straightforward for a client to parse and generate the simple XML messages used in IKS.

**Marshalling**: The World Wide Web Consortium (W3C) has published a multi-part recommendation called SOAP (Simple Object Access Protocol) specifying an interoperable means of using XML to exchange structured and typed information in a distributed environment or application [26]. SOAP specifies message formatting, including the overall structure of the message as an XML document. A more complete overview of SOAP, with supporting examples, can be found in [35].

**Transport**: With the increasing popularity of the Web Services model of remote service invocation, HTTP is fast becoming the de facto standard transport protocol for remote procedure calls. One of the primary reasons for this adoption is that HTTP is typically permitted through firewalls and across different administrative domains within an organization.