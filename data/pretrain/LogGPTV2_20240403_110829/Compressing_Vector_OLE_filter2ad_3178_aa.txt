title:Compressing Vector OLE
author:Elette Boyle and
Geoffroy Couteau and
Niv Gilboa and
Yuval Ishai
Compressing Vector OLE(cid:63)
Elette Boyle(cid:63)(cid:63), Geoﬀroy Couteau(cid:63) (cid:63) (cid:63), Niv Gilboa†, and Yuval Ishai‡
Abstract. Oblivious linear-function evaluation (OLE) is a secure two-party protocol al-
lowing a receiver to learn a secret linear combination of a pair of ﬁeld elements held by a
sender. OLE serves as a common building block for secure computation of arithmetic circuits,
analogously to the role of oblivious transfer (OT) for boolean circuits.
A useful extension of OLE is vector OLE (VOLE), allowing the receiver to learn a linear
combination of two vectors held by the sender. In several applications of OLE, one can
replace a large number of instances of OLE by a smaller number of long instances of VOLE.
This motivates the goal of amortizing the cost of generating long instances of VOLE.
We suggest a new approach for fast generation of pseudo-random instances of VOLE via a
deterministic local expansion of a pair of short correlated seeds and no interaction. This pro-
vides the ﬁrst example of compressing a non-trivial and cryptographically useful correlation
with good concrete eﬃciency. Our VOLE generators can be used to enhance the eﬃciency
of a host of cryptographic applications. These include secure arithmetic computation and
non-interactive zero-knowledge proofs with reusable preprocessing.
Our VOLE generators are based on a novel combination of function secret sharing (FSS) for
multi-point functions and linear codes in which decoding is intractable. Their security can be
based on variants of the learning parity with noise (LPN) assumption over large ﬁelds that
resist known attacks. We provide several constructions that oﬀer tradeoﬀs between diﬀerent
eﬃciency measures and the underlying intractability assumptions.
Keywords. Secure computation, correlation generators, FSS, OLE, LPN, NIZK
1
Introduction
Secret correlated randomness is a valuable resource for cryptographic protocols. For in-
stance, a pair of identical secret random strings can be used for fast and perfectly secure
communication, and more complex correlations such as “multiplication triples" [Bea92,
BDOZ11, DPSZ12] provide an analogous speedup for secure computation. A major diﬀer-
ence between these two types of correlations is that while the former can be easily expanded
locally from a short common seed by using any pseudorandom generator, it seems much
harder to apply a similar compression procedure to the latter without compromising secu-
rity.
More generally, consider the following loosely deﬁned notion of a pseudorandom correla-
tion generator. For a “long” target two-party correlation (Z0, Z1), we would like to locally
expand a pair of correlated “short” strings (seed0, seed1) into a pair of outputs (z0, z1),
where z0 = Expand(seed0) and z1 = Expand(seed1). This should be done so that the joint
output is indistinguishable from (Z0, Z1) not only to the outside world, but also to an
insider who learns one seed seedb and is trying to infer information about the other output
z1−b beyond what is implied by its output zb.
For non-trivial two-party correlations, such correlation generators were only constructed
using indistinguishability obfuscation [HIJ+16], homomorphic secret sharing [BCG+17],
and key-homomorphic pseudorandom functions [Sch18]. However, despite optimization ef-
forts, none of these constructions is suﬃciently eﬃcient to oﬀer a competitive alternative
to traditional interactive protocols.
(cid:63) This is a full version of [BCGI18].
(cid:63)(cid:63) IDC Herzliya, Israel. Email: PI:EMAIL
(cid:63) (cid:63) (cid:63) KIT, Germany. Email: PI:EMAIL
† Ben-Gurion University, Israel. Email: PI:EMAIL
‡ Technion, Israel. Email: PI:EMAIL
2
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
The focus of this work is on a special type of correlation related to oblivious linear-
function evaluation (OLE). The OLE functionality allows a receiver to learn a secret linear
combination of two ﬁeld elements held by a sender. OLE is a common building block for
secure computation of arithmetic circuits [NP06,IPS09,DGN+17], analogously to the role
of oblivious transfer (OT) for boolean circuits [GMW87, Kil88, IPS08, DGN+17].
A useful extension of OLE is vector OLE (VOLE), allowing the receiver to learn a
linear combination of two vectors held by the sender. In several applications of OLE, one
can replace a large number of instances of OLE by a small number of long instances of
VOLE [ADI+17]. This motivates the goal of amortizing the cost of implementing long
VOLE. Despite recent progress (see Section 1.3 below), the concrete communication and
computation costs of the best VOLE protocols still leave much to be desired.
Motivated by the above goal, we study the question of compressing a random VOLE
correlation, or VOLE correlation for short. In a VOLE correlation of length n over a ﬁnite
ﬁeld F, the sender P0 obtains a pair of random vectors Z0 = (u, v), where u and v are
uniformly distributed over Fn, and the receiver P1 obtains a random linear combination
of the two vectors, namely Z1 = (x, ux + v) for x ∈R F. A VOLE correlation can be used
to realize the VOLE functionality via a simple and eﬃcient protocol, similarly to protocol
implementing string OT from a random string OT [Bea95]. In fact, string OT is equivalent
to VOLE over the ﬁeld F = F2.
A natural approach for generating a VOLE correlation is via reduction to random string
OT. Indeed, random string OT correlation can be easily compressed using any pseudoran-
dom generator (PRG), and moreover a length-n VOLE over F can be realized with perfect
F(cid:101) instances of string OT of
security (against a semi-honest adversary) using (cid:96) = (cid:100)log2
length n(cid:96) each [Gil99]. The factor-(cid:96) communication overhead of this reduction can be sig-
niﬁcant for computations over large ﬁelds, which often arise in applications. But more
importantly, the construction of VOLE from string OT requires the sender to feed the OT
oracle with correlated random strings, even when the goal is to obtain a random instance
of VOLE. This correlation makes the natural reduction of random VOLE to random string
OT fail in the non-interactive setting we consider here.
1.1 Our Contribution
We give simple and eﬃcient constructions of VOLE correlation generators based on con-
servative variants of the Learning Parity with Noise (LPN) assumption over large ﬁelds.1
As far as we know, our work gives the ﬁrst non-trivial example for a useful correlation
generator with good concrete eﬃciency.
To give just one example, we estimate that for a ﬁeld F with (cid:100)log2 |F|(cid:101) = 128, we can
generate a length-106 VOLE correlation from a pair of correlated seeds whose length is less
than 1000 ﬁeld elements using about 100 milliseconds2 of local computation on a standard
laptop using a single core and a common GPU.
Our VOLE generators can be useful in a variety of cryptographic applications. We
discuss a few such applications below.
1 Roughly speaking, the LPN assumption says that in a random linear code, a noisy random codeword is
pseudo-random. Unlike the case of LWE, here the noise is restricted to have low Hamming weight. LPN
can be equivalently formulated by requiring that the syndrome of a random low-weight noise vector is
pseudo-random. Our constructions require a slightly sub-constant noise rate, but otherwise can be quite
ﬂexible about the choice of the code and its information rate. See Section 2.3 for more details.
2 This and other running time estimates have not been empirically validated, and only take the cost
of arithmetic and cryptographic operations into account (ignoring, e.g., possible cache misses). Their
accuracy also depends on our estimates for the concrete security of the underlying LPN variants, which
should be further studied.
Compressing Vector OLE
3
Rate 1/2 VOLE. As a direct application, we get a standard VOLE protocol in the plain
model with unique eﬃciency features. This protocol is obtained by using general-purpose
(OT-based) secure two-party computation to distribute the seed generation, locally ex-
panding the seeds, and then using the simple reduction from VOLE to random VOLE. The
protocol has asymptotic rate 1/2 (namely, the asymptotic communication complexity is
dominated by communicating 2n ﬁeld elements) and almost the entire computational work
can be performed oﬄine, following the seed generation, without any interaction. Beyond
its direct eﬃciency beneﬁts, this “local preprocessing” feature has several other advantages,
including the ability to make decisions about who to interact with in the future (and how
much) without revealing these decisions to the outside world. See [BCG+17] for further dis-
cussion. Our protocol can be compared to the recent VOLE protocol from [ADI+17], which
under similar assumptions achieves rate 1/3 and does not enjoy the local preprocessing
feature. An additional unique feature of our protocol (unlike other VOLE protocols from
the literature) is that achieving security against malicious parties has vanishing amortized
cost. As long as the seed generation sub-protocol is secure against malicious parties, the
entire VOLE protocol is secure.
Secure arithmetic computation and beyond. Our eﬃcient implementation of VOLE
can serve as a useful building block in secure computation protocols. For instance, given
an additively shared scalar x ∈ F and an additively shared vector u ∈ Fn, one can securely
compute an additive sharing of ux via two invocations of length-n VOLE. Such scalar-vector
multiplications are common in applications that involve linear algebra. See [IPS09, MZ17,
ADI+17,DGN+17,JVC18] and references therein. More generally, VOLE is useful for secure
computation of arithmetic circuits in which multiplication gates have a large fan-out, as well
as round-eﬃcient secure arithmetic computation via arithmetic garbling [AIK11]. Finally,
VOLE can be helpful even for secure computation tasks that are not arithmetic in nature.
For instance, OLE has been applied for eﬃciently realizing secure keyword search [FIPR05]
and set intersection [GN17]. These applications can beneﬁt from long instances of VOLE,
e.g., when securely computing the intersection of one set with many other sets.
NIZK with reusable setup. Finally, we demonstrate the usefulness of VOLE generators
in the context of non-interactive zero-knowledge proofs (NIZK). We consider the follow-
ing setting for NIZK with reusable interactive setup. In an oﬄine setup phase, before the
statements to be proved are known, the prover and the veriﬁer interact to securely generate
correlated random seeds. The seeds can then be used to prove any polynomial number of
statements by having the prover send a single message to the veriﬁer for each statement.
In this setting, we can leverage our fast VOLE generators towards NIZK proofs for arith-
metic circuit satisﬁability in which the proof computation and veriﬁcation involve just a
small number of ﬁeld operations per gate, and the setup cost is comparable to the circuit
complexity of (a single instance of) the veriﬁcation predicate.
Our NIZK protocols are based on simple honest-veriﬁer zero-knowledge protocols for
arithmetic circuit satisﬁability that consist of parallel calls to VOLE, where the honest
veriﬁer’s VOLE inputs are independent of the statement being proved. Such protocols, in
turn, can be obtained from linear PCPs for circuit satisﬁability [IKO07,GGPR13,BCI+13].
This application of VOLE generators crucially relies on the ﬁeld being large for eliminating
selective failure attacks. (Similar NIZK protocols based on OT [KMO89, IKOS09] are not
fully reusable because they are susceptible to such attacks.) The honest-veriﬁer VOLE-
based NIZK protocols we use are simpliﬁed variants of a NIZK protocol from [CDI+18],
which provides security against malicious veriﬁers using only parallel calls to VOLE and
no additional interaction. The price we pay for the extra simplicity is that our setup phase
4
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
needs to rely on general-purpose interactive MPC for ensuring that the veriﬁer’s (reusable)
VOLE inputs are well formed.
We conclude by summarizing the two advantages of VOLE correlation over the string
OT correlation which is easier to generate. A quantitative advantage is that VOLE natively
supports arithmetic computations without the log2 |F| communication overhead of the OT-
based approach discussed above. A qualitative advantage is that in certain applications
(such as the NIZK protocol from [CDI+18] and our honest-veriﬁer variants), VOLE can
be used to eliminate selective failure attacks by ensuring that every adversarial strategy is
either harmless or leads to failure with overwhelming probability.
1.2 Overview of the Techniques
Our VOLE generators are based on a novel combination of function secret sharing (FSS) [BGI15]
and noisy linear encodings. For the purpose of explaining the technique, it is convenient
to view a VOLE correlation as a “shared vector-scalar product.” That is, the sender knows
a random vector u ∈ Fn, the receiver knows a random scalar x ∈ F, and they both hold
additive shares of ux. The key idea is that eﬃcient PRG-based FSS techniques allow com-
pressing this correlation in the special case where u is sparse, namely it has few nonzero
entries. However, this alone is not enough, since u must be pseudorandom to the receiver,
which is certainly not the case for a sparse vector.
To convert “sparse” to “pseudorandom” we rely on the LPN assumption. This can be
achieved in two diﬀerent ways. In the primal variant of our construction, we achieve this by
adding to the sparse u a random vector in a linear code C in which the LPN assumption
is conjectured to hold. To do this, the sender gets a short message a and ax is shared
between the parties. By locally applying the linear encoding of C to a and the shares of
ax, the VOLE correlation is maintained, except that the sparse u is masked with a random
codeword C(a) where both u and the codeword are unknown to the receiver. If C satisﬁes
the LPN assumption with the level of noise corresponding to the sparsity of u, the sum
looks pseudorandom to the receiver.
The main advantage of the primal construction is that it is conjectured to be secure
even with a code C that has constant locality, namely each codeword symbol is a linear
combination of a constant number of message symbols [Ale03, ADI+17]. This enables fast
incremental generation of VOLE, one entry at a time. Its main disadvantage is that its
output size can be at most quadratic in the seed size. Indeed, a higher stretch would make
it possible to guess a suﬃciently large number of noiseless coordinates to allow eﬃcient
decoding via Guassian elimination.
To achieve an arbitrary polynomial stretch, one can use the dual variant of our con-
struction. Here the parties shrink both the sparse u and the shares of ux by applying a
public compressive linear mapping H. If H is a parity check matrix of a code for which
LPN holds, the output of H looks pseudorandom even when given H. A disadvantage of
the dual approach is that the compressive mapping H cannot have constant locality.
We propose several diﬀerent optimizations of the above approaches. These include LPN-
friendly mappings C and H that can be computed in linear time, improved implementations
of the FSS component of the construction, and secure protocols for distributing the setup
algorithm that generates the seeds. Under plausible variants of the LPN assumption, the
asymptotic time complexity of the seed expansion is linear in the output size. We discuss
further optimizations and give some concrete eﬃciency estimates in Section 5.
Compressing Vector OLE
5
1.3 Related Work
The idea of compressing cryptographically useful correlations was ﬁrst put forward in [GI99],
who focused on the case of multi-party correlations that are distributed uniformly over a
linear space. This idea was generalized in [CDI05]. The problem of compressing useful two-
party correlations was studied in [BCG+17], who presented solutions that rely on “group-
based” homomorphic secret sharing. However, the compression schemes from [BCG+17]
have poor concrete eﬃciency, despite signiﬁcant optimization eﬀorts.
Variants of the LPN assumption were used as a basis for secure arithmetic computation
in several previous works [NP06, IPS09, ADI+17, DGN+17]. The core idea is to use the
homomorphic property of a linear code to compute a linear function on a noisy encoded
message, and then ﬁlter out the noisy coordinates using OT. This technique is quite diﬀerent
from ours. In particular, it inherently relies on erasure-decoding that we completely avoid.
Finally, it is instructive to compare our notion of a VOLEgenerator with the notion of
OT extension [Bea96, IKNP03]. While OT extension protocols reduce the amortized com-
putational cost of n instances of OT, their communication complexity grows linearly with
n even if one settles for producing pseudo-random OT correlation instances. In contrast,
a VOLE generator implies a sublinear-communication protocol for generating a length-n
VOLE correlation, or alternatively a non-interactive algorithm for creating a long pseudo-
random instance of a VOLE correlation from a pair of short correlated seeds.
2 Preliminaries
We consider algorithms that take inputs and produce outputs from a ﬁnite ﬁeld F or ﬁnite
Abelian group G. All of our protocols are fully arithmetic in that they only require a black-
box access to the underlying algebraic structure in the same sense as in [IPS09, ADI+17].
In particular, the number of arithmetic operations performed by our protocols does not
grow with the ﬁeld or group size. By default vectors v are interpreted as row vectors.
2.1 Vector OLE