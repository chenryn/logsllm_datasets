Item  i
Item  i
DA
Client
D
A
DA 
Server
AE
Client
A
E
AE
Server
BFT 
Client
ProxyHMI
SCADA Master
DA
Client
AE
Client
DA
AE
Adapter
BFT
Server
DA
Server
Item  i
Item  i
Item  i
DA
Client
Handlers
AE
Server
Storage
ProxyMaster
Fig. 5. The main components of SMaRt-SCADA.
Frontend
Item  i
Item  i
Item  i
DA
Server
D
A
DA 
Client
BFT 
Client
ProxyFrontend
Master deployment, these multiple entry points may enhance
the server’s performance, as there is no single bottleneck
component to process all requests. However, in a replicated
setting, the SCADA Master replicas need to process all these
messages in the same order.
b) Multi-threading: Internally, the SCADA Master’s DA
and AE subsystems have several modules that execute con-
currently. This enables the SCADA Master to receive and
process multiple requests in parallel. In a context of SMR,
multi-threading is a major difﬁculty because the execution of
the requests is not deterministic. Even if all SCADA Master
replicas receive the same requests, each replica could process
them differently due to distinct scheduling decisions. This
could cause the replicas to evolve to diverse internal states.
c) Non-deterministic timestamps: In the AE subsystem,
some modules retrieve information from the operating system
during their execution. For instance, when an event is created,
a timestamp is retrieved from the operating system and as-
signed to the event. In a replicated solution, it is necessary
to ensure that all replicas generate the same timestamp for
the same event. Otherwise, replicas produce distinct events,
compromising the required determinism.
d) Asynchronous messages: NeoSCADA was designed
following a publish/subscribe architecture. The HMI must
subscribe to an item in the SCADA Master to receive data
or events associated with it. After that, the HMI starts re-
ceiving messages asynchronously. The SCADA Master can
send multiple messages to the HMI in response to a processed
message. For instance, after receiving an ItemUpdate mes-
sage from the Frontend, the HMI can receive ItemUpdate
and EventUpdate messages from the SCADA Master.
In the replicated conﬁguration, the HMI receives messages
asynchronously from a set of replicas. Without additional
information included in the messages, the HMI will not be
able to know in which context these messages were produced.
IV. SMART-SCADA
In this section, we present SMaRt-SCADA, a BFT SCADA
solution that addresses the identiﬁed challenges.
A. Architecture overview
Figure 5 depicts the SMaRt-SCADA architecture. The ﬁgure
shows the main modiﬁcations that we made in NeoSCADA.
The integration of NeoSCADA with BFT-SMaRt was sim-
pliﬁed by using proxies that allowed us to minimize code
modiﬁcations in the original system. Each original component
has its own proxy to accommodate the BFT-SMaRt code: 1)
The ProxyMaster is responsible for forwarding all NeoSCADA
messages that come from the Frontend and the HMI to the
SCADA Master. Each ProxyMaster contains a BFT server,
which is the server-side of the library where a BFT replication
protocol runs. The BFT server communicates with the Adapter
that is responsible for adding information to each incoming
message and to decide to which client the message should
be forwarded, DA or AE. 2) The ProxyHMI receives the
HMI messages and sends them via its BFT client, to the
ProxyMaster. The BFT client is the client-side of the BFT
library. In this proxy, we have a DA server and an AE server
which simulate the servers available in the SCADA Master.
3) The ProxyFrontend, which guarantees the communication
between the Frontend and the SCADA Master. This proxy
employs the BFT client of the library to transmit all messages
that come from the Frontend to the SCADA Master. When the
SCADA Master needs to communicate with the Frontend, the
ProxyFrontend receives messages from the client-side of the
library and forwards them using the DA client.
B. System model
SMaRt-SCADA assumes the system model used in [12],
i.e., n ≥ 3f + 1, where n is the total number of replicas (each
one a SCADA Master with the associated proxy), and f is the
number of tolerated Byzantine replicas. As in other works, we
assume that replicas fail independently due to some diversity
mechanism [16]. We assume that both HMI and Frontends are
166
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
correct as they need to cope with the protocol established to
issue requests to the replicas. Moreover, the communication
of HMI, SCADA Master, and Frontend with their proxies
is protected by separate secure connections (currently TLS
channels). Although this work is focused on the replication of
the SCADA Master, we consider that the traditional defense
mechanisms are present in the infrastructure, such as IDS
and ﬁrewalls. SMaRt-SCADA complements their protection
without interfering with them. Thus, it increases the effort that
an adversary needs to spend to break the overall system.
C. Addressing the challenges
In the following, we show how SMaRt-SCADA addresses
the challenges identiﬁed in § III-B. SMaRt-SCADA was devel-
oped by integrating the BFT-SMaRt state machine replication
library with NeoSCADA. BFT-SMaRt guarantees that all
SCADA Master nodes execute the same sequence of opera-
tions. It implements an agreement protocol that runs among the
replicas. However, BFT-SMaRt assumes that all the replicas
start from the same state and apply deterministic operations on
the messages throughout the execution. Therefore, we needed
to modify the NeoSCADA to meet these assumptions.
a) Multiple entry points: We introduced the proxy com-
ponents and made a small number of internal modiﬁcations
in the SCADA Master to convert the multiple entry points
into a single one. This way, the SCADA Master does not
receive messages simultaneously, and all messages that arrive
are processed, one by one, following the order deﬁned by
the BFT library. The HMI and Frontends use the DA and
AE channels as in the original version. Therefore they are
not aware of the replication library in between. The SCADA
Master is replicated in n instances and each one receives
the requests from a ServerProxy instead of the HMI and
Frontends. Additionally, we modiﬁed the SCADA Master DA
Server and DA Client to guarantee that the messages coming
from the Frontend DA server are placed correctly in the
SCADA Master DA client (see Figure 5).
b) Multi-threading: The original SCADA Master pro-
cesses messages in parallel. Without changes, it would com-
promise the determinism property as all SCADA Master
replicas must apply the same modiﬁcations to their state.
The best solution would be to use a replication library that
supports multi-threaded applications (e.g., [17], [18], [19]). By
resorting to these libraries, the necessary modiﬁcations in the
source code of NeoSCADA would be minimal. Unfortunately,
none of these implementations is available as open-source.
Therefore, we had to refactor the SCADA Master to remove
multi-threading to meet the BFT-SMaRt requirements. Then,
as the execution becomes predictable, we can guarantee that
all replicas execute deterministically.
c) Non-deterministic timestamps & Asynchronous mes-
sages: In the original version, the HMI and Frontend use the
DA and AE client channels to communicate with the AE and
DA servers in the SCADA Master. Since we have eliminated
the multiple entry points in SMaRt-SCADA, we need to take
the messages from the single entry point and deliver them
HMI
Proxy
HMI
SCADA 
Masters
Proxy
Masters
Proxy
Frontend
Frontend
DAC (1)
DAS
Byzantine
agreement
(2)
ItemUpdate(ID,val)
(3)
DAS
(4)
DAC
(6)
(6a)
DAC
AEC
DAC
AES
(5)
ItemUpdate(ID,val)
(7)
ItemUpdate(ID,val)
EventUpdate(ID,val)
(7a)
(8)
DAC (9)
V
DAS
(8a)
AEC(9a)
V
AES
Fig. 6. The messages ﬂow when an item update occurs in SMaRt-SCADA.
to the correct channel server. We developed the Adapter to
add a timestamp and ordering information to each incoming
message, and then forward the messages to each SCADA
Master subsystem and vice-versa. After receiving a message,
the DA server in the SCADA Master passes the timestamp
and the ordering data to the ContextInfo module. Modifying
the DA and AE subsystems to retrieve this information from
ContextInfo guarantees that all generated messages and events
for a certain operation would have the same timestamp. In
addition, the HMI can identify asynchronous messages as they
contain information related to the ordering process.
D. Operational use cases
We revisit the previous use cases, i.e., Item update and Write
value, to show the communication changes in the replicated
version of the SCADA Master.
a) Item update: Similar to the non-replicated Item update
use case, we assume that all the items available in the Frontend
were previously subscribed by the HMI and SCADA Master.
In the following, we describe the scenario where a Frontend is
notiﬁed by a RTU about an item value update. The Frontend
uses its proxy to transmit the message to the ProxyMasters,
which run a Byzantine agreement before delivering the mes-
sage update to the SCADA Masters. Before the update reaches
the HMI, the ProxyHMI waits for f + 1 matching messages
from the replicas. As before, if the updated value raises an
alarm in the SCADA Masters, the HMI is also notiﬁed of that
alarm, in this case, it also waits for f + 1 matching messages.
Figure 6 shows the messages ﬂow when an item’s update
occurs in the SMaRt-SCADA. When there is an item’s update,
the Frontend sends an ItemUpdate message to the Prox-
yFrontend (1). The ProxyFrontend sends the message to the
ProxyMasters using the client-side of the BFT library (2). The
ProxyMaster replicas run a Byzantine agreement to decide the
message order (3) and deliver the message in the same order to
the Adapters. Then, each replica Adapter places the message
in the correct subsystem. In this case, such component is the
DA client, which then sends the message to the DA server (4).
167
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
There, the DA server puts the message in the channel mapped
to that item (5). The DA client connected to that channel
receives the ItemUpdate and passes it to the DA and AE
subsystems. Then, an ItemUpdate and an EventUpdate
message are sent from the DA Client and AE Server, respec-
tively, to the ProxyMaster (6 and 6a). The ItemUpdate and
EventUpdate messages are transmitted to the ProxyHMI
(7 and 7a), which also demultiplexes the messages and places
them in the right communications interfaces. Then, the Prox-
yHMI waits for f + 1 equal messages from the ProxyMaster
for both ItemUpdate and EventUpdate messages (8 and
8a). Next, the ItemUpdate and EventUpdate go to the
DA server and to AE Server (9 and 9a), respectively. Finally,
the HMI receives these messages.
b) Write value: Similar to the non-replicated write value
use case, we describe the scenario where an operator, via HMI,
requests a change to an item value in a RTU. In this scenario,
the ProxyHMI and ProxyFrontend mediate the protocol by
invoking the Byzantine agreement in the ProxyMasters. Then,
they wait for f +1 matching messages from the ProxyMasters.
After that, they can deliver the messages to both HMI and
Frontend, respectively.
Figure 7 presents
sending a
WriteValue from the HMI to the Frontend. The HMI uses
the DA client to forward the WriteValue message to the DA
server in the ProxyHMI (1). Then, it uses the client-side of the
BFT library to replicate the message to every ProxyMaster (2).
The ProxyMasters run a Byzantine agreement to decide the
message order and deliver the message to each own Adapter
(3). The Adapter uses the DA client to send the WriteValue
message to the SCADA Master (4).
the message ﬂow of
The DA server receives the message and places it into the
DA subsystem. Before arriving at the DA client, the message
passes through the handlers in the AE subsystem. Then, the
DA client redirects the message to the ProxyMaster via the
SCADA Master DA server and stays blocked (5). The Adapter
receives the WriteValue message and forwards it to the
Frontend via its ProxyFrontend (6), which waits for f + 1
matching messages (7). Finally, the WriteValue message
is transmitted to the Frontend using the DA client (8).
In the other way around, the RTU replies to the Frontend,
which sends a WriteResult message to the ProxyFrontend
DA client (9). Then, it uses the replication library client-
side to inform the ProxyMaster replicas (10). These replicas,
after running a Byzantine agreement
to decide the order
of such messages (11), deliver the WriteResult to the
Adapter that sends it to the DA client. The message is then
given to the DA server that places it in the mapped channel
to the item with that WriteResult. The DA client of
that item receives the result and passes it to the DA and
AE subsystems (12). A WriteResult and EventUpdate
messages are forwarded to the DA and AE client
in the
ProxyMaster (13 and 13a). Recall that the latter is sent only if
an alarm event is created. The Adapter waits until it receives
the result message related to the WriteResult message.
WriteResult and EventUpdate messages are sent to the
HMI
Proxy
HMI
DAC
(1)
DAS
SCADA 
Masters
Proxy
Masters
Proxy
Frontend
Frontend
DAS
(2)
WriteValue(ID,I/O)
Byzantine
agreement
(3)
DAS
(4)
DAC
WriteValue(ID,I/O)
DAC
(5)
DAC