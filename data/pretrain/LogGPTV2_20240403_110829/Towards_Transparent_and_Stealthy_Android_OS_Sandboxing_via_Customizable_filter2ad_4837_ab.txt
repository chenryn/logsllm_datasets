### Challenges in Android Container-Based Virtualization

Despite the increasing adoption of container-based virtualization on PC and server platforms [2, 26, 72], the development of Android containers faces unique challenges. One significant hurdle is the hardware resource multiplexing, especially for devices not designed for such multiplexing (e.g., WiFi and Bluetooth). For the Android OS, full support for the devices and pseudo-device drivers listed in Table 1 is essential. However, current Android containers fall short of this requirement.

Additionally, the re-architecting of the vendor interface in Android 8.0 [46] has rendered many existing virtualization methods incompatible with multiple devices, including Telephony, Display, Network, and Binder. This update highlights the need for more robust and adaptable virtualization solutions.

Another critical issue is the lack of an "out-of-the-box" design in existing Android containers. All current solutions have in-guest virtualization components running at the same privilege level as the virtual phone's (VP) applications. This makes it easy to detect whether an app is running in a container by scanning for suspicious non-system files and processes. Furthermore, no existing solution allows for the customization of the VP's device attributes, which is crucial for stealthy virtualization, as we will discuss in ยง7.

### Comparison of Existing Solutions

**Cells [10]**: Cells is a pioneering work in mobile container-based virtualization. It introduces a usage model where one VP runs in the foreground while others run in the background. The foreground VP has direct access to hardware devices, supported by a new device namespace mechanism. However, many of its virtualization methods are either outdated or leave in-guest components, and it lacks essential virtualization solutions, such as Bluetooth, which is complex and often used by malware to differentiate between a sandbox and a real machine [4, 69].

**Condroid [73] & VMOS [71]**: These follow-up solutions share similar limitations with Cells in terms of transparency and customization. Condroid leverages Linux Container tools [44] and modifies the Android framework layer to ensure container isolation using namespaces and cgroups. VMOS, on the other hand, runs another Android OS as the guest, sharing the host's native libraries. While simpler, VMOS has weaker isolation mechanisms, with only the mount namespace being isolated.

### Summary of Limitations

Existing Android containers are not suitable for security applications due to their outdated or incomplete device virtualization, in-guest components, and lack of device customization. These limitations can be exploited by attackers to detect the presence of containers. Our research aims to bridge this gap by developing a novel Android container platform with strong anti-evasion capabilities, even against dedicated adversaries.

### Overview of VPBox

**VPBox** is a transparent and stealthy Android OS-level sandbox that uses a customizable container-based virtualization technique. It meets two key requirements:

1. **Transparency**: 
   - The virtualized device should exhibit the same hardware effects as the physical device.
   - Complete virtualization support for all devices and services listed in Table 1.

2. **Stealthiness**: 
   - Ensures that a dedicated adversary in the VP cannot easily detect the presence of the container, including virtualization components and the specific mobile device running the container.

VPBox fully supports all devices and services listed in Table 1, including hardware devices, pseudo-device drivers, and necessary services (e.g., Bluetooth, ADB, SELinux). Security analysts can configure different device artifacts to create diverse virtual environments. To achieve stealthiness, VPBox executes device virtualization and customization outside of the VPs.

**Architecture**:
- VPBox retains the foreground-background VP usage model from Cells [10].
- Each VP runs a stock Android userspace environment, with the foreground VP having direct access to hardware devices.
- VPBox uses Linux namespaces and the device namespace introduced by Cells to remap OS resource identifiers.
- Each VP has its private namespace to prevent interference with other VPs and the host.
- Reused modules from Cells include kernel-level virtualization methods for Input (touchscreen and input buttons) and Sensors (accelerometer and light sensors).
- Two custom processes, "Cellc" and "CellD," manage VP booting and switching, and coordinate the virtualization process.

This architecture ensures that VPBox provides a robust, transparent, and stealthy Android container solution, addressing the limitations of existing solutions.