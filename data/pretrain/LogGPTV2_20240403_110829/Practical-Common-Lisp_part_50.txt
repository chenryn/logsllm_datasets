234
① 在SLIME的REPL缓冲区里，你也可以使用REPL快捷键来改变当前包。键入一个逗号，然后在Command:提示下
 尽管工作在E-mail数据库上，但你可能需要编写几个与存取文本相关而与E-mail本身无关的
现在你可以用IN-PACKAGE切换到新的包上。注意提示符的改变一
(defpackage :com.gigamonkeys.email-db 
(defpackage :com.gigamonkeys.text-db
NIL
hello, world 
CL-USER> (hello-world)
CL-USER>
EMAIL-DB> (in-package :cl-user)
现在切换回CL-USER：
NIL
hello from EMAIL-DB package
EMAIL-DB> (hello-world)
HELLO-WORLD
EMAIL-DB> (defun hello-world () (format t "hello from EMAIL-DB packager%"))
你可以在这个包里定义一个新的hello-world：
EMAIL-DB>
#
CL-UsER> (in-package :com.gigamonkeys.email-db)
#
输入change-package。
(:use :common-lisp :com.gigamonkeys.text-db))
(:export :open-db
第21章编写大型程序：包和符号
:store))
:save
www.TopSage.com
一具体的形式取决于开发
---
## Page 252
符号了。这个新的符号也会添加到作为COM.GIGAMONKEYS.EMAIL-DB包的一部分的隐蔽符号列
将把它转化成COM.GIGAMONKEYS.EMAIL-DB表中的符号，而不是继承自COM.ACME.TEXT的那个
自COM.ACME.TExT的build-index符号设置为不可见的。
的；但其中一个名字build-index跟你已经使用的名字冲突了。你可以通过隐蔽这个符号将来
了许多用于文本处理的函数和类的名字，更进一步假设多数这些函数和类都是你想要用在代码中
个包，同时把不需要继承的符号放在一个：shadow子句里。例如，假设COM.ACME.TEXT包导出
是你不需要的。不用将所有你需要的符号都列在一个：import-from子句中，你可以直接使用这
个：import-from子句，以便从不同的包中分别导入符号。
个：import-from子句中的包名之后包含多个名字即可。
读取为COM.ACME.EMAIL中的同名符号。如果需要从单个包中导入多个符号，那只需在单
DEFPACAKGE作如下改写：
那一个符号。例如，如果想要使用的函数的名字为parse-email-address，那么可以把
符号有冲突。?在这种情况下，你可以使用DEFPACKAGE中的：import-from子句只导入所需要的
限。但假设你只需要用到这个库的-一个函数，且其他的导出符号跟你已经使用（或计划使用）的
从COM.ACME.EMAIL包中导出的，因此你可以通过使用这个包来轻松获得对这些名字的访问权
21.6
GIGAMONKEYS.EMAIL-DB包中。
LISP和COM.GIGAMONKEYS.TEXT-DB中导出的符号。所有其他的名字都将继续直接进入COM.
① 在开发过程中，如果你试图使用一个包，它导出了一些与你当前所在包的已有符号同名的符号，那么Lisp将会立即
有时你可能会遇到相反的情况一
现在cOM.GIGAMONKEYS.EMAIL-DB包中任何代码里出现的parse-email-address都将被
现在假设你找到了一个可以处理E-mail消息的第三方函数库。该库的API中所使用的名字是
这个:shadow子句导致创建了一个新的名为BUILD-INDEx的符号，且这个符号直接添加到
(defpackage :com.gigamonkeys.email-db 
(defpackage :com.gigamonkeys.email-db 
现在COM.GIGAMONKEYS.EMAIL-DB中编写的代码可以同时使用非限定名字来引I用COMMON-
(:shadow :build-index))
（:use
(:import-from :com.acme.email :parse-email-address))
(:import-from :com.acme.email :parse-email-address)
{:use
导入单独的名字
om.acme.text)
om.gigamonkeys.text-db
COI
I1Sp
:com.gigamonkeys
一个包可能导出了一大堆你想要使用的名字，但还有少数
www.TopSage.com
s.text-db)
，一个DEFPACKAGE也可以含有多
21.6导入单独的名字
235
N
---
## Page 253
就可以调整加载文件的顺序，让那些含有DEFPACKAGE的文件在编译或加载任何其他文件之前进
的依赖关系以正确的顺序加载单独的文件提出了要求。
有DEFPACKAGE形式。两种思路都是合理的，尽管每个包一个文件的方法也对组织并根据包之间
foo-package.lisp的文件，而另一些人则创建单个packages.lisp来包含一组相关的包的所
这些包里读取的源代码分开的文件里。一些人喜欢针对每个单独的包都创建一个形如
之前被求值。
COM.GIGAMONKEYS.TEXT-DB 的DEFPACKAGE必须在 COM.GIGAMONKEYS.EMAIL-DB的 DEFPACKAGE
子，如果你打算在COM.GIGAMONKEYS.EMAIL-DB中使用COM.GIGAMONKEYS.TEXT-DB包，那么
表达式的文件之前就被定义。包也必须定义在可能用到它的其他DEFPACKAGE形式之前。举个例
该在哪里保存EFPACKAGE形式呢？
些关于如何组织代码的概括性规则，也即相对于那些通过IN-PACKAGE来使用包的代码来说，应
内容也是值得讨论的—关于如何组织代码来使用不同的包的基本技巧。在本节里，我将讨论--
21.7
突，那么可以使用如下的DEFPACKAGE形式来消除歧义：
import-from子句由一个包名及紧接着需要从那个包中导人的名字所构成。举个例子，如果
过:shadowing-import-from子句来消除歧义。和:import-from子句一样，:shadowing-
在包中创建出一个同名的新符号来。但如果你确实想要使用一个继承来的符号，那么你需要通
消除歧义。如果你根本就不需要使用这个名字，那可以通过：shadow子句将该名字屏蔽掉，从而
他包里继承的同名符号。
里没有冲突，也就是说你总是希望使用来自COM.GIGAMONKEYS.EMAIL-DB的符号，而不是从其
表中。所以，如果你以后使用了另一个同样导出了BUILD-INDEX符号的包，包系统将会知道这
不论用哪种方式，一旦所有的DEFPACKAGE形式都从那些用到它们的代码中分离出来了，你
236
确保包在它们被用到之前总是存在的，最佳方法是把所有的DEFPACKAGE定义放在与需要在
当你想要使用两个导出了同样名字的包时，一个类似的情形出现了在这种情况下，读取器在
前面已经讨论了一些常见情形下用包来管理名字空间的方法，而关于如何使用包的另一层面
(defpackage :com.gigamonkeys.email-db
( :shadowing-import-from :com.gigamonkeys.text-db :save))
打包技巧
(:shadow :build-index)
(:import-from :com.acme.email :parse-email-address)
:use
C
om.acme.text)
第 21章
编写大型程序：包和符号
www.TopSage.com
---
## Page 254
然后，伴随以下错误信息，程序会进入调试器：
函数的库时，你试图像下面这样调用它们中的一个：
一些困扰初级Lisp程序员的疑难杂症，使得包系统看起来比它实际的情况更加复杂和不友好了。
21.8
定。最近，许多程序员都采用了Java风格的命名方式，如同本章里使用的那些包名一样，它由一
发布你的代码给其他程序员使用，那么需要遵守一个可以令不同包之间名字冲突最小的命名约
是字符串，而不同的包必须带有文本上可区分的名字。这样，你就得考虑包名字冲突的可能性。
有问题的。问题只是你想要怎样组织代码。
IN-PACKAGE，也可能会干扰这些工具。
查看IN-PACKAGE来决定与Common Lisp通信时所使用的包的。如果每个文件里有多个
IN-PACKAGE的读者。另外，许多Lisp开发环境，尤其是诸如SLIME这种基于Emacs的环境，是通过
LISP-USER")开始，而所有其他的文件都应当含有一个属于某个包的IN-PACKAGE形式。
文件中除注释以外的第一个形式。含有DEFPACKAGE形式的文件应当以（in-package"COMMON-
definition facility）以正确的顺序来加载和编译文件。?
后你只需加载那个文件就好了。对于更复杂的程序，你会希望使用一种系统定义功能（system
文件自动完成这些步骤，该文件里含有以正确顺序排列的适当的LOAD和COMPILE-FILE调用，然
有的文件，仍然必须先加载所有的包定义，然后再编译那些需要从这些包里读取符号的文件。
COMPILE-FILE输出的文件形式存在的包定义之前，包都是不存在的。因此，如果你正在编译所
COMPILE-FILE编译它们。不过，需要注意的是，直到你用LOAD加载那些以源代码的形式或是
其中有可能需要先用COMPILE-FILE编译。然后加载使用这些包的文件，可再次预先选用
行加载。对于简单的程序，可以手工完成这件事：简单地加载那些含有DEFPACKAGE形式的文件
CL-USER> (foo)
排名第一的疑难杂症通常出现在使用REPL的时候。当你正在寻找一些定义了特别感兴趣的
①所有可通过本书的Web站点获得的那些来自“实践”章节的代码，都使用了ASDF系统定义库。我将在第32章里
关于打包技巧的最后一点是如何给包命名。所有包名都存在于扁平的名字空间里一
另一方面，多个文件以相同的包来读取，每个文件都使用相同的IN-PACKAGE形式，这是没
如果你违反了这个规则，在文件中间切换当前包，那么就会迷惑那些没有注意到第二个
一旦你熟悉了包，就不会再花许多时间来思考它们了。其实本来也没什么可思考的。不过，
讨论ASDF。
3包的各种疑难杂症
www.TopSage.com
21.8
包的各种疑难杂症
一包名只
237
---
## Page 255
FOOLIB导出的那个符号，这会破坏FOOLIB中bar的定义。
符号用作了自己代码里的某个函数的名字，那么Lisp就不会报错。相反，你的函数的名字将会是
为了引用foo函数，但FOOLIB同时还导出了其他一些符号。如果你把其中一个导出的诸如bar的
FOOLIB的包，再次假设它是MY-APP。现在你开始编写MY-APP中的代码。尽管你使用FOOLIB是
就可以指向那些继承的名字了。
再启动来从MY-APP中消除有冲突的符号。然后，你需要重新编译MY-APP包中的代码，这样它们
定义MY-APP包，加上：uSeFOOLIB，那么就会得到符号冲突的错误。解决方案是一样的：选择
中创建新符号。当你试图运行编译后的代码时，就会得到函数未定义的错误。如果你随后试图重
忘记了：uSeFOOLIB，这样，读取器会将这些原本打算从FOOLIB中读取的符号改为在MY-APP
代码打算使用来自包FOOLIB的函数名字，但是当你在（in-package：my-app）下编译文件时却
USE-PACKAGE得以进行并使继承来的fOO在CL-USER中可用。
foo符号从COMMON-LISP-USER中退出，把CL-USER包恢复到调用foo之前的状态，从而使
器就可以将foo读取成一个继承而来的符号，从而就不会在CL-USER中创建一个新符号了。
中导出的同名符号相冲突了。如果你在试图调用foo之前记得USE-PACKAGEFOOLIB，那么读取
建的符号不是一个函数的名字之前就使其进人了CL-USER包。这个新的符号随后又和FOOLIB包
但这次出现了以下错误信息，并再次进入了调试器：
的访问，
238
这类问题也会发生在加载和编译文件时。举个例子，如果你定义了一个包MY-APP，其中的
不过，现在还为时不晚，因为调试器给出的第一个再启动将会以正确的方式来修复：它将使
下一个疑难杂症本质上是第一个的相反形式。在这种情况下，你已经定义了一个用到了诸如
CL-USER>(use-package :foolib)
这个问题的危害更大，因为它不会明显地报错。从求值器的观点来看，这只是要求将一个新
啊？问题在于第一次调用foo的时候，读取器读取名字foo，在求值器接手并发现这个新创
Restarts:
Using package 'FooLIB'results in name conflicts for these symbols:FOo
Restarts:
attempttocall'Foo'whichis anundefinedfunction.
COMMON-LISP-USER' package.
2:
0:[coNTINUE] Unintern the conflictingsymbols from the 6
，然后再调用该函数。
原来你忘了使用那个库的包。于是你退出调试器并试图使用该库的包来得到对名字FOO
[ABORT]
[ABORT]Abort
[ABoRT] Abort entirely from this (lisp)process.
[STORE-VALUE]Setf
[RETURN-VALUE] Return a value instead of calling FOO.
第21章
Abort
编写大型程序：包和符号
entirely from this(lisp)process.
www.TopSage.com
the
---
## Page 256
的库以及一个带有Web接口的流式MP3服务器的各部分。
节。在那之后，本书的其余部分都将面向“实践”：一个垃圾过滤器、一个用来解析二进制文件
还是quit的烦恼。
SLIME的REPL快捷键quit，它可以使你免去记忆特定CommonLisp实现的退出函数究竟是exit
COMMON－LISP-USER包所使用的。解决方案很简单：切换回CL-USER包然后再退出，或者使用
来自COMMON-LISP包的名字，它被具体实现定义在了某个实现相关的包里了，后者往往是
那个包里去做一些事。紧接着你决定完全退出Lisp环境并试图调用（quit）。不过，quit并不是
烦：你定义了一个使用COMMON-LISP同时还可能有其他一些库的包。然后，在REPL中你切换到
复它。
留心那些警告。如果你破坏了一个库中的定义，那么可以通过使用LOAD重新加载库的代码来恢
在多数Lisp环境下，你会得到一个关于“redefining BAR,originally defined in.”的警告。应当
码是在一个与函数名符号所在的包名不同的*PACKAGE*下读取的，但求值器不必关心这点。不过
函数关联到一个旧的名字上，有时这是完全合法的。唯一的可疑之处只在于，做这个重定义的代
① 某些Common Lisp实现，包括Allegro和SBCL，提供了一种“锁定”特定包中符号的机制，这一机制可以确保只有