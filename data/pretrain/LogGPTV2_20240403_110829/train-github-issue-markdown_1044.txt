> This function is a faster version of the builtin python bisect.bisect_left
> (side='left') and bisect.bisect_right (side='right') functions
No, it's not faster for basic cases.
### Reproducing code example:
Python bisect is 3x faster than searchsorted:
    from bisect import bisect_right
    from numpy import searchsorted
    l = list(range(1024 * 8))
    m = int(len(l)/3)
    %timeit bisect_right(l, m)
    a = np.asarray(l)
    %timeit searchsorted(a, m)
    444 ns ± 14.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
    1.57 µs ± 13.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
For reference, numba's implementation of `searchsorted()` is a little faster
than bisect:
    from numba import njit
    @njit
    def searchsorted_jit(_a, _v):
        return searchsorted(_a, _v)
    searchsorted_jit(a, m)
    %timeit searchsorted_jit(a, m)
    391 ns ± 2.93 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
### Numpy/Python version information:
    1.16.2 3.7.3 (default, Mar 27 2019, 09:23:39)
    [Clang 10.0.0 (clang-1000.11.45.5)]