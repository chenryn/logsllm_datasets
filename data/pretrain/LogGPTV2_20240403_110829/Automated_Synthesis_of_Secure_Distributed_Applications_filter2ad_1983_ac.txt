the university’s code. The next rule is COMM-J from TC,
which describes the transmission of the student’s certiﬁcate:
the signature is ﬁrst encrypted with the recipient’s encryp-
tion key and then sent to the address of the recipient, who
receives the message, decrypts the ciphertext, and ﬁnally
veriﬁes the signature. The application of P-S in TA leads to
a call to the signature creation function in the student’s code.
The rules in TZK model the creation of the zero-knowledge
proof and are translated into a sequence of calls to the corre-
sponding functions in the zero-knowledge library. Finally,
the application of COMM-A in TA models the transmission
of the zero-knowledge proof and is translated similarly to
COMM-J.
5. Formal Veriﬁcation
We verify the correctness of our compiler using the se-
curity type system for F# developed by Bengtson et al. [21]
and recently extended by Backes et al. in order to support
zero-knowledge proofs [11]. The semantics of F# is for-
malized using RCF, a concurrent lambda calculus that has
successfully been used to encode and verify the security of
F# protocol implementations [22]. Authorization policies
are expressed in code by means of annotations: assumptions
introduce new hypotheses (i.e., formulas that are assumed to
Table 8 Source code for the running example
(cid:27) TC
(P-S)
[[ assume FUni ; ]]
let s = sig skUni
(pickle Stud(vkid , cs, grd )) in
let msg = enc ekid s in
let c = connect ad in
send c msg
TC
(COMM-J)
(cid:27)
AccSys(dkAS , vkUni , vkid , ad , cs, lab) (cid:44)
let c = listen ad in
let msg = recv c in
let xzk = dec dkAS msg in
let x = unpickle (verzk(3) xzk) in
[[ assert (2) ]] ;
TC
(COMM-A)
where FUni = vkUni says Stud(vkid , cs, grd )
Fid = vkid says Acc(lab)
hold) and assertions6 declare formulas that are expected to
logically follow from the previously introduced hypotheses.
Deﬁnition 4 (Safety [21]). A program P is safe if and only
if, in all executions of P , all assertions are entailed by the
current assumptions.
In general, we are interested in the safety of programs
that are executed in parallel with the attacker. The attacker
is modeled as some arbitrary (untyped) expression that has
access to the functions exported by the program. The idea
is to let the attacker create arbitrary parallel instances of the
protocol roles and to let him send and receive messages on
the network channels. If the attacker cannot break the safety
property, then the program is robustly safe. In the following,
we write P Q to denote the application of program P to
program Q (i.e., P can access the functions exported by Q).
Deﬁnition 5 (Formal threat model [21]). A program A is
an attacker if and only if A contains no occurrence of assert
and each type annotation within A is unit.
A program P is robustly safe if and only if the applica-
tion A P is safe for all attackers A.
The compiler automatically generates assumptions and
assertions that capture the logical formulas that are intro-
duced and derived in the DKAL derivation, respectively. In
particular, the translation of a knowledge assertion of the
form A : F (rules P-A and P-S) introduces an assumption
of the form assume F into A’s code. The translation of any
other rule with a thesis of the form A knows F (e.g., EN-
SUE) or A knows M (e.g., COMM-J) introduces an assertion
6RCF assertions are not to be confused with DKAL assertions.
Uni(skUni , ekid , vkUni , vkid , ad , cs, grd ) (cid:44)
Stud(skid , dkid , ekAS , vkUni , vkid , ad id , ad AS , cs, lab) (cid:44)
(COMM-J)
TC
let c = listen ad in
let msg = recv c in
let s = dec dkid msg in
let x = unpickle(versig vkUni s) in
match x with Stud(vkid , cs, grd ) ⇒
[[ assert FUni ]] ;
[[ assume Fid ]] ;
let s(cid:48) = sig skid (pickle Acc(lab)) in
(cid:9) TA(P-S)
let x = createzk-s s vkUni in (cid:9) TZK(I-ZK-S)
let x(cid:48) = createzk-s s vkid in (cid:9) TZK(I-ZK-S)
let xzk = createzk-∧ x x(cid:48) in (cid:9) TZK(I-ZK-∧)
let yzk = createzk-∃ (3) xzk in (cid:9) TZK(I-ZK-∃)
[[ assert( (2) ) ]] ; (cid:9) TA(P-ZK)
(cid:27)
let msg = enc ekAS yzk in
let c = connect ad AS in
send c msg
TA
(COMM-A)
of the form assert F in A’s code, where F is the logical in-
terpretation of M (i.e., [M ] = F ), thereby ensuring that the
formula F is indeed derivable at run-time.
and
therefore
the
compiler
says Stud(vkid , cs, grd )
The P-S rule in TC introduces
Example 7. Let us consider
the annotations in Ta-
the for-
ble 8.
in the DKAL
mula vkUni
derivation
inserts
assume vkUni says Stud(vkid , cs, grd ) into the university’s
code. The COMM-J rule in TC models the transmission
of the information vkUni says Stud(vkid , cs, grd ) from the
university to the student. Consequently, the compiler inserts
assert vkUni says Stud(vkid , cs, grd ) into the student’s
code after the signature veriﬁcation, which ensures that
vkUni says Stud(vkid , cs, grd ) is indeed derivable from the
current assumptions at run-time.
For veriﬁcation purposes, F# programs are linked to
a symbolic cryptographic library, comprising functions
for public-key encryption, digital signatures, and zero-
knowledge proofs. This library models the ideal behavior
of cryptographic primitives using standard language con-
structs. We programmed the symbolic zero-knowledge li-
brary making usage of the tool developed by Backes et
al. [11], which takes as input a zero-knowledge statement
and produces methods for the construction and veriﬁca-
tion of the corresponding zero-knowledge proof. For pro-
tocols based on digital signatures and public-key encryp-
tion, safety carries over to programs linked to concrete
cryptographic libraries [15, 36]. Preliminary results for the
computational soundness of symbolic abstractions of zero-
knowledge proofs have been proved in [16]. The sound-
ness of the type system ensures that well-typed programs
are safe.
Theorem 1 (Safety by typing [21]). If ∅ (cid:96) P : U, then P
is safe.
For verifying the security of the F# code that is gener-
ated by our compiler, it is in principle enough to run the
type-checker. This compilation validation approach has the
advantage of smoothly supporting optimizations of the re-
sult of the compilation and of the compiler itself. Never-
theless, we additionally prove that all programs output by
the compiler are well-typed. This security by construction
approach has the advantage of making the type-checking of
the result of the compilation unnecessary, unless the code is
modiﬁed, and gives stronger guarantees about the correct-
ness of the compiler.
Theorem 2 (Soundness of the compilation). For all logical
derivations T ∈ Tdkal, there exists a type U such that ∅ (cid:96)
C[T ] : U.
Our main theorem states that well-typed programs that
use the cryptographic library and the functions produced by
the compiler are safe. In the following, we write IC[T ] to
denote the typed interface of the library produced by the
compiler and P · C[T ] to denote the program obtained by
linking P to such a library.
Theorem 3 (Robust safety of the compilation). If IC[T ] (cid:96)
P : U, then P · C[T ] is robustly safe.
6. Case studies
In this section, we utilize our framework to specify a dis-
tributed reviewing system and a distributed social network.
Given these logical speciﬁcations, the compiler automati-
cally produces the corresponding cryptographic implemen-
tations. The goal is to demonstrate the possibility to specify
relatively complex decentralized systems in a simple and
elegant manner, without requiring any cryptographic exper-
tise on the part of the users.
6.1. Distributed Reviewing System
Current reviewing systems (e.g., Easychair and EDAS)
are designed around a trusted party that serves as custo-
dian of a huge amount of data about the submission and
reviewing behavior of thousands of researchers, aggregated
across multiple conferences. The deliberate or accidental
disclosure of such information is a recognized privacy prob-
lem [51]. In this section, we design a decentralized review-
ing system that offers strong privacy guarantees.
The ﬁrst functionality that a reviewing system should of-
fer is paper assignment. This functionality is realized by
the following protocol (for the sake of readability, we de-
pict the protocol and omit the corresponding knowledge and
communication assertions):
Chair
COMM-J
Chair says RevAssign(id,paper )
The authorization policy for reviews is as follows:
∀xid , yp, zrev .
Chair says RevAssign(xid , yp)
∧ xid says Rev(yp, zrev ) ⇒ Rev(yp, zrev )
id
(11)
Ideally, reviewers should upload the minimal amount of
information required to show that the review was submitted
by an authorized reviewer. This can be achieved as follows:
Chair o
∃xid .
Chair says RevAssign(xid , paper )
∧ xid says Rev(paper , rev )
COMM-A
id
The information transmitted to the PC chair does not reveal
the identity of the reviewer, which may be desirable, for in-
stance, if the paper’s author is a colleague of the PC chair
or the reviewer does not want to reveal her identity to the
whole PC. The long version of this paper reports the com-
plete formalization and describes additional features, such
as the management of rebuttals.
6.2. Distributed Social Network
The users of social networks have to face a surprisingly
vast range of privacy issues. Well-understood problems,
such as the centralized management and sharing of per-
sonal information, are accompanied by novel threats: for
example, the Italian police is reported to have stipulated
agreements with Facebook to get unfettered access to user
proﬁles [35] and, in other countries, people that used so-
cial networks to organize protest activities were subject of
repercussions, censorship, and coercion [34, 50, 1, 55, 28].
We used our framework to design a distributed social net-
work that provides access control and, at the same time, user
anonymity. This social network is close in spirit to the one
that was recently developed by Backes et al. [13]. The cryp-
tographic implementation that we obtain by compilation,
however, is substantially different, being based on pairing-
based zero-knowledge protocols as opposed to traditional
Σ-protocols [30], arguably simpler, and open-ended. Users
may establish social relations as follows:
A
COMM-J
B says FriendReq(A)
A says Friend(B)
COMM-J
B
The predicate B says FriendReq(A) represents a friendship
request from B to A (social relations are unidirectional);
the predicate A says Friend(B ) represents the correspond-
ing friendship conﬁrmation. B can use this information to
/
/
o
o
o
/
/
engage in a number of activities. Suppose, for instance, that
the access to A’s wall is limited to friends: B can anony-
mously post messages on A’s wall by existentially quanti-
fying his identity, as shown below:
COMM-A
B
∃x. A says Friend(x) ∧ x says Wallpost(m)
A o
We additionally provide a method for downloading re-
sources anonymously. Realizing this functionality is chal-
lenging since B does not want to reveal her identity to A,
who has to know, however, to whom to send the response.
We solve this problem by introducing into our framework
the notion of anonymous identiﬁers, which are locally gen-
erated and distributed to other principals, who can then use
them as intended recipients in communication assertions.
Anonymous identiﬁers are cryptographically implemented
by fresh public keys and can be realized at the network layer
via rendezvouz-points [33]. Suppose B is interested in a
picture that can only be seen by A’s friends. Similarly to
the previous protocol, B can prove to be a friend without
revealing his identity and, in addition, give A a fresh anony-
mous identiﬁer B 1, which she can use as intended recipient
in the following communication assertion, as shown below:
A
COMM-J
∃x. A says Friend(x)
∧ x says getResource(B1, pic-id)
COMM-A
B
Resource(pic)
The long version gives a formal account of anonymous
identiﬁers and illustrates other interesting features of the
social network, such as friend-of-a-friend relationships and
pseudonyms.
7. Implementation and Experimental Evalua-
tion
We conducted an experimental evaluation to demonstrate
the feasibility of our approach. This section overviews the
cryptographic setup (§ 7.1) and discusses the experimental
results (§ 7.2).
7.1. Cryptographic Setup
Devising a cryptographic realization for our logical
framework turned out to be quite challenging. The cryp-
tographic scheme has to be efﬁcient and, at the same time,
ﬂexible enough to support the different usages of existential
quantiﬁcation, namely, the hiding of predicate arguments,
principal identities, and equality relations among secret val-
ues (cf. Example 2).
Σ-protocols constitute a particularly efﬁcient and widely
deployed class of zero-knowledge protocols. Existing so-
lutions, however, are not ﬂexible enough to implement ar-
bitrary existential quantiﬁcation: for instance, existentially
quantifying veriﬁcation keys that are both signed and used
to verify signatures (e.g., the key vk id in statement (3)) is
impractically slow [10].
A general solution to this problem was discovered only
recently by Abe et al. [5], who introduced the notion of
automorphic signatures. The distinctive feature of this
signature scheme is that veriﬁcation keys lie in the mes-
sage space. Since messages and signatures consist of ele-
ments of a bilinear group and verication is done by evalu-
ating a set of pairing-product equations, automorphic sig-
natures make a perfect counterpart to the powerful zero-
knowledge proof system by Groth and Sahai [40], which
supports a large class of statements over bilinear groups.
Our cryptographic implementation builds on a combination
of these two cryptographic schemes. An other advantage
of the Groth-Sahai scheme over Σ-protocols is the possibil-
ity (i ) to re-randomize proofs without knowing their wit-
nesses [20] and (ii ) to existentially quantify information in
existing proofs. We exploit the ﬁrst property to hide the
equality relations among secret values, while the second
property is crucial for open-ended applications. We imple-
mented the cryptographic library in Java and we relied on
the jPBC library [31] for the computation of mathematical
operations. A detailed description of our cryptographic im-
plementation is reported in the long version.
7.2. Experimental evaluation
We conducted our experimental evaluation on a standard
notebook with a 2.5 GHz dual-core processor7 and 8 GB of
main memory. We measured the time required to create and
verify various proofs and studied how these are inﬂuenced
by the length of the security parameter, the size of the state-
ment, and the number of existentially quantiﬁed values. In
our experiments, the elliptic curves are such that the key
length equals twice the security parameter [53], e.g., we use
160 bit keys to obtain a security parameter of 80 bits.
As illustrated in Figure 1, time and size grow linearly
in the size of the statement, although increasing the num-
ber of conjuncts (and disjuncts) is more expensive than in-
creasing the number of predicate arguments. The reason lies
buried within the automorphic signature scheme for vectors
of messages. Intuitively, setting up such a vector is compu-
tationally more expensive than ﬁlling it with elements [5].
An exact analysis shows that adding one argument to a pred-
icate costs roughly 5 seconds of proof generation time for a
security parameter of 80 bits, while a zero-knowledge proof
of a statement composed of one predicate with four argu-
ments is computationally as expensive as a zero-knowledge
proof for a statement composed of two predicates with one
argument each.
7The full model description is “Intel Core i5-2520M”
o
o
o
/
/
The graphs in Figure 2, Figure 3, Figure 4, and Figure 5
(cf. Appendix A) depict the results obtained for some of
the proofs illustrated in this paper for various security pa-
rameters. Time and size grow linearly in the length of the
security parameter. The results for a security parameter of
80 bits vary from 31 seconds for anonymously posting mes-
sages on a friend’s wall up to 41 seconds for anonymously
accessing a university lab. The reason for the small time
and size differences is that the zero-knowledge statements
are structurally very similar: they all comprise two signa-
ture veriﬁcations and the number of predicate arguments is
only marginally different.
As previously discussed, existential quantiﬁcation is
very expensive in Σ-protocols [10] and the protocols them-
selves change depending on which and how many values
are existentially quantiﬁed. The Groth-Sahai proof system
combined with our encoding of predicates, instead, allows
for a very efﬁcient and arbitrary existential quantiﬁcation.
As a matter of fact, existential quantiﬁcation comes at no
costs at all in our implementation, as illustrated in Figure 6
(cf. Appendix A). Actually, the more information is exis-
tentially quantiﬁed, the shorter the zero-knowledge proof
is. This is explained by the fact that we implement existen-
tial quantiﬁcation by deleting certain information (speciﬁ-
cally, the opening information for the corresponding com-
mitment) from the proof and the performed computations
are always the same.
We remark that our proof-of-concept implementation is
not optimized in any way. In particular, we do not yet ex-
ploit readily available optimizations such as the multi-core
architecture of today’s processors and batch veriﬁcation
techniques [24]. As the computations are largely indepen-
dent, multi-core architectures yields a great performance
gain. Batch veriﬁcation techniques signiﬁcantly speed up
the veriﬁcation process; the veriﬁcation performance gains
can be well above 50% [24]. We are working on the inte-
gration of such optimizations in our implementation.
8. Conclusion and Future Work
Ensuring the privacy of sensitive data is crucial for the
widespread deployment of authorization infrastructures. In
this paper, we show how to enforce privacy-aware eviden-
tial authorization using a powerful and efﬁcient combina-
tion of digital signatures and zero-knowledge proofs. We
developed a high-level declarative language that lets the
user conveniently specify the system and the desired secu-
rity properties, and a compiler that automatically produces
executable cryptographic implementations. Although we
studied the theoretical properties of our framework in the
context of Evidential DKAL, our cryptographic construc-
tion is language-independent and generally applicable: in
the long version, we report on a privacy-oriented extension