masq), and will stop mostly because the upstream resolver failing
first (ranging from 5 to 30 seconds) generating a SERVFAIL response
(or NXDOMAIN) message. To prevent resolvers from generating such
messages too early, we also employ a technique that can sometimes
keep a resolver engaged longer. The trick is to have the attacker-
owned authoritative name server respond in a slow pace with a
chain of CNAME records, creating an illusion that it is making
progress. This can delay resolver’s response for over a minute in
some cases (e.g., CloudFlare).
Answer www.attacker.com
www.victim.com
CNAME www.victim.com
A
1.2.3.4
Figure 5: Example Rogue Response Acceptable by a For-
warder (the victim domain record also cached)
5.2 Extending Window in a Resolver Attack
We propose to take advantage of the security feature of rate limiting
in authoritative name servers, as a way to mute name servers and
extending window in a resolver attack. Modern DNS name server
software such as BIND, NSD, PowerDNS, all support a common
security feature called response rate limiting (RRL) [57, 59], as a mit-
igation of the DNS amplification attack [57] where a large number
of malicious DNS queries are issued to authoritative name servers
spoofing a victim’s IP address. To limit the number of amplified
DNS reply packets, the RRL feature allows a configurable per-IP,
per-prefix, or even global limit of triggered responses. Specifically,
if the limit is reached, then responses are either getting truncated
or dropped. There are also dedicated DNS firewalls with similar
features [14].
Ironically, this feature can be leveraged maliciously to mute a
name server if an attacker can inject spoofed DNS queries (with
the target resolver’s IP) at a rate higher than the configured limit.
Depending on the actual limit (some are configured to be very low),
it may be trivial to create a sufficiently high “loss rate” so that the
resolver’s legitimate query has an extremely low probability of
getting a response. To understand how likely such a strategy can
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1343Figure 7: DNS Response Used to Overwrite Cache
Field
Question
Answer
Value
{nonce}.www.victim.com
Authoritative www.victim.com NS ns.attacker.com
Additional
In addition, we also inspect the remaining cases where the loss
rate increased from the 1kpps test to the 4kpps one. There are
roughly 5,000 cases where the diff is 2% or higher. We believe that
the majority of them can be further increased given increased probe
rate, and therefore potentially vulnerable as well. Therefore, we
have a total of 18110 (13,110 and 5,000) cases out of the 100K (18%)
which we consider vulnerable.
Finally, out of the 75% cases where both 1kpps and 4kpps tests
experienced no loss, we believe there may be many more vulner-
able cases which we simply cannot uncover due to the relatively
low probing speed. Due to ethical concerns, however, we refrain
from probing at an even higher speed. To peek into those cases,
we manage to obtain permission from a collaborator to test an
authoritative name server configured for non-profit website. We
are able to probe the server at a much higher rate (late at night to
avoid disruption). Initially when probed at a rate 4kpps, no loss
is observed. Interestingly, it started to experience loss when the
probing rate is increased to 25kpps. Specifically, when the rate is
increased to 50kpps, the loss rate jumps to 75%. We checked with
our collaborator on whether the server is indeed configured to use
such a high rate limit. To our surprise, there is no rate limit config-
ured at all. To understand this behavior, we replicate a BIND server
locally (replicating the configuration) and verified that indeed it is
fairly easy to trigger high loss rate with comparable probing speeds.
We find that it is because the application (i.e., BIND) not reading
from the socket queue fast enough, which causes overflows. Indeed,
historical DoS attacks similar to this, e.g., by flooding queries with
random names, have been observed in practice [44]. To mitigate
such threats, the official BIND explicitly guideline recommends rate
limit [52], which would paradoxically make it vulnerable to our
attack instead.
In addition, we can leverage this technique to extend the attack
window against a forwarder since RRL is also deployed on resolvers
to limit the rate of incoming queries. By following the same proce-
dure and ethical standard in the previous measurements and a rate
of 4kpps probing against the resolver IPs obtained on 14, 2019 from
Censys [23], we observe surprisingly 121,195 out of 136,547 exhibit
a loss rate of more than 66.7%, indicating it is generally possible to
mute resolvers on the Internet.
6 PRACTICAL ATTACK CONSIDERATIONS
Bypassing the TTL of cached records. If an attacker attempts
to poison a benign domain such as www.victim.com by directly
triggering DNS queries of www.victim.com on a resolver, it may
cache the unwanted legitimate A record, for example, due to oc-
casional failures to mute their upstream servers. This forces the
attacker to wait for the cache timeouts before initiating the next
attack attempt.
Figure 6: Response Loss Rate under Different Query Rate
succeed, we conduct an experiment to measure the response rate
of name servers used by top 10K Alexa websites.
Measurement methodology. To trigger RRL, we send 1K queries
per second for 15 seconds, followed by another around of 4kpps test
of 15 seconds to each name server IP; the two tests are separated by
a two-second gap to avoid interference. If there are multiple name
servers for a given domain, we pick the first one. In both cases,
the queries are uniformly distributed (instead of sent in bursts) all
attempting to ask the A record of the www subdomain. The rational is
that 1kpps and 4kpps represent sufficiently low throughput, roughly
0.6Mbps and 2.5Mbps respectively, which is easily achievable by
any attacker on the Internet.
Ethical considerations. We consciously took a number of mea-
sures to limit the impact on the operations of these servers. First, we
ask for A records in our queries, which generally result in smaller
responses, to conserve the target network’s resources; yet, a prior
report [58] suggests that rate limiting behaviors are generally ag-
nostic to the type of queries (so this would not impact the result of
our measurement). Second, the domain names in the queries are
always the same, resulting in minimal processing overhead on the
server (the result is likely cached in memory and easy to fetch).
Third, we choose to send evenly spaced queries (instead in burst)
to avoid stressing the server. In general, the traffic of 4kpps is small
compared to a normal load experienced by a name server of a Top
Alexa site. Finally, we set up a web server on the IP address used to
conduct the probing, serving a webpage with opt out instructions
(we also configured the reverse DNS name of the IP to direct visitors
to our webpage). In total, we received and honored four requests.
Results. We sort the domains by the loss rate observed in the 4kpps
test in descending order and present the results in Figure 6. Overall,
there are about 25% domains whose name servers experienced
higher than 1% loss rate. This is in line with a recent measurement
reporting about 17% cases with loss behaviors [20]. The difference
is likely due to their lower rate of queries at 500pps.
We now try to analyze what fraction of these domains are vul-
nerable (can be muted successfully). Here we define a domain to
be vulnerable if its name server exhibits an induced loss rate of
66.7% or higher; the threshold is determined empirically as will be
discussed in §7.2. Specifically, there are 13,110 domains that would
already satisfy the criteria and fall victim to a simple DoS attack at
a rate of 4kpps.
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1344However, according to a recent study [41], the cached A record of
www.victim.com could be overwritten by injecting a non-existent
NS record of www.victim.com. Specifically, an attacker always
sends queries asking for A records of domain names with random
prefixes, e.g., {nonce}.www.victim.com where {nonce} is a random
value. This forces the resolver to initiate a new query to the au-
thoritative name server of victim.com as the record is not cached.
Then the attacker attempts to inject a rogue response as shown in
Figure 7, claiming that www.victim.com is a standalone zone with
its own authoritative server ns.attacker.com. The resolver will
then query ns.attacker.com for all future requests asking for A
record of www.victim.com, after the original cached record expires.
This is because the attack has effectively inserted a new NS record
of the www.victim.com zone. And resolvers are by design advised
to use the most accurate delegation it has in the cache, which in
this case is the NS record of www.victim.com instead of the one of
victim.com [41]. We have verified that this method works against
the latest versions of both BIND and Unbound.
Timeouts and retransmitted queries. When a DNS query is
triggered either on a forwarder or resolver and there is no legitimate
reply received from their upstream, they will not wait forever. Most
of them have a timeout determining when to close the current socket
(and therefore the corresponding source port) and retransmit. This
means that some of these source ports may be short-lived and
difficult to catch. Therefore, it is important to understand their
behaviors in more depth.
In most DNS software such as BIND and Unbound, we conduct
controlled experiments with the help of documentation and source
code analysis, and summarize their behaviors (which generally
match what we observe in real resolvers). Specifically, when con-
figured as forwarders, they have a similar behavior to resolvers
but typically have a longer timeout (and it is generally easier to
extend their attack window using different strategies). So, we focus
on resolvers’ behaviors below.
In the case when there is no failure, both BIND and Unbound
maintain a default retransmission timeout (RTO) — 0.8s for BIND,
and a dynamically computed value based on RTT (to the authorita-
tive name server) for Unbound. If timeouts occur (e.g., the name
server is unresponsive or muted), they will contact another name
server in a round robin manner if more than one is available. If
all of them failed to respond, they will exponentially back off by
doubling the RTO — BIND starts the backoff only after 3 consecu-
tive failure whereas Unbound does it after every failure). Finally,
there is another hard-stop condition — default 10s total wait time
for BIND and 16 to 32 trials for Unbound (depending on the type of
query). A SERVFAIL will be sent back to the client if the hard-stop
condition is met.
Here we refer to the RTO as the “attack window” as it represents
the duration where a source port remains unchanged. When the
window ends, a different source port will be chosen, nullifying
any previous port scan progress — a new port may happen to pop
back into the range that is just scanned. It is important to note that
when the attack window is too small (e.g., 1s), even if the port is
correctly identified, it will still take time to inject 64K rogue DNS
records (at a flooding rate of 100kpps, it may still take a few hundred
milliseconds), which may not finish before the window closes.
Generally speaking, if the authoritative name server is muted for
an extended duration, we do expect to see larger attack windows (as
RTOs double over failed attempts). With BIND being more reluctant
in doubling the RTO and having a tighter hard-stop condition (de-
fault 10s), we believe it is a more difficult attack target. We describe
an experiment against such a difficult case in §8.
Handling multiple authoritative name servers. Many domains
in practice are configured with multiple authoritative name server
IPs, for redundancy and security. Some consider this as a specific de-
fense against DNS cache poisoning attacks against resolvers (called
“IP randomization”) [31], as it increases the randomness of a DNS
query. According to a recent measurement study [49], second level
domains like example.com under TLDs like .com, .net and .org
have a median of only 2 NS only (and a mean of 2.3, 2.4, and 2.4);
therefore this is not a strong defense by itself.
There are two ways to handle this. First, a general strategy is
to simultaneously mute all the authoritative name servers, given
that on average few of them exist. This will help the RTO to grow
exponentially after a resolver experiences repeated failures when
contacting all the name servers.
Second, if a resolver is Unbound, it has a unique behavior where
it will stop contacting a name server (blacklisting the server) and
switch “permanently” (i.e., minutes) to other available ones, should
it repeatedly fail to hear from the originally-contacted server [31].
The authors in [31] therefore take advantage of this behavior to
perform what they call “name server pinning”. In our case, we need
to allow periodic successful responses (by suspending the muting
process); this is to avoid the last name server being blocked as well.
Handling multiple backend servers behind DNS resolvers As
described in §4.5, many public DNS resolvers have multiple back-
end servers (with different IPs) that perform the actual queries.
Interestingly, we find that the backend server selection is typically
heavily skewed towards a few (even when we do see 100+ in total
for some providers), likely determined based on location and past
performance measurements. This allows us to focus on only a few
IPs at the same time, which is easily achievable consider each IP
only requires a scan traffic of 1kpps.
7 END-TO-END ATTACKS
In this section, we evaluate our attack in realistic settings, including
a forwarder used in a home, and a production resolver with a
realistic configuration and network conditions.
7.1 Attacking a Forwarder (Home Router)
Experiment Setup. Given that most vulnerable routers have a
fairly similar behavior shown in Table 1, we choose Xiaomi R3 (a
Wi-Fi home router) as a representative case study to launch end-
to-end attacks. It is used as the one and only gateway in an actual
home where 10 to 15 devices are connected to the Internet through
the wireless router all the time. In addition, Xiaomi R3’s upstream
DNS server is set to CloudFlare DNS (1.1.1.1). Its DHCP server is
by default configured to provide 253 IPv4 addresses in a /24 network.
Finally, the attack machine is a Raspberry Pi, which also connects
to the router wirelessly.
Since Xiaomi R3 does not deploy global ICMP rate limit and its
forwarder software does not call connect() on UDP sockets, we
Session 4E: Network Security CCS '20, November 9–13, 2020, Virtual Event, USA1345use strategy 2○ in §4.3 (obtaining multiple IPs through DHCP) to
bypass its per-IP rate limit. For extending the attack window, we
use strategy 1 as described in §5.1 with a malicious name server.
Attack Process. The attack is divided into two phases, In Phase
I, the attacker tries to acquire 240 IP addresses using the DHCP
strategy. Afterwards, the attack goes into Phase II where the fol-
lowing repeats: the attacker issues a query to the forwarder asking
for an arbitrary subdomain, e.g., nonce.attacker.com. If SERV-
FAIL/NXDOMAIN is received or if an attacker has waited for longer
than 1 minute, indicating something is wrong, we will repeat the
attack process by issuing another query. Otherwise, if a NOERROR
response is received, it means a forged response is injected suc-
cessfully. In Phase II, the attacker uses acquired IP addresses to
scan open ports on the router. We rotate among the available IPs