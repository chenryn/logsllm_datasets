### ESCAPE Server

We utilized bridge2java [12] to access the Microsoft Outlook COM API from Java. Additionally, we incorporated the open-source PureTLS TLS implementation [5].

#### User Interface
Figure 1 illustrates the user interface that a content provider would see. The upper right pane displays the file system exported by the ESCAPE server. The user can navigate to the directory containing new content and select recipients from the list of known contacts (shown in the lower half of the window) who should receive an announcement about the new content. Selected contacts are dragged into the Access Control List (ACL) pane (upper left). In the example shown, three contacts were selected to have access to the “My Pictures” folder. Pressing the “Send Announcements” button sends an email to these three users, containing a personalized URL linking back to the “My Pictures” folder, as detailed in Section 4.2.

#### Client-Server Interaction
Figure 2 depicts the process when one of the recipients connects to the ESCAPE server for the first time. Assuming they do not have an ESCAPE certificate for this server, the following steps occur:

1. **Initial SSL Handshake**: When the client (using Internet Explorer) connects, the server initiates an SSL handshake without requiring client authentication.
2. **Certificate Trust Prompt**: If the server uses a self-signed certificate, the user will see a dialog box indicating that the server’s certificate is issued by an untrusted source. The user must click “continue” to complete the SSL handshake.
3. **Resource Request and Renegotiation**: The server parses the HTTP GET request and determines it is a request for an actual resource. It then renegotiates the SSL connection, this time requiring client authentication.
4. **Empty Certificate Chain**: Since the client does not have a certificate, it sends an empty certificate chain. We modified the PureTLS implementation to accept an empty chain without raising an exception.
5. **One-Time Setup Page**: The server serves a page informing the user that a one-time setup is needed. Upon clicking a button, Internet Explorer generates a keypair and sends a certificate request to the ESCAPE server.
6. **Certificate Issuance**: The server receives the request and issues a certificate. The client's public key is stored in the Outlook address book entry for the contact whose email address was in the original request URL.
7. **Certificate Installation**: The client receives the certificate chain and a message that the setup is complete. The certificate chain is automatically installed into the client’s certificate store, but the user must approve two additional dialog boxes: one for installing the certificate and another for adding the self-signed certificate as a trusted root.
8. **Subsequent Visits**: On subsequent visits, the client is authenticated using their private key, which is stored without additional protection under Windows’ Data Protection system [10].

#### Observations on Implementation

**User Overhead**
- **Content Provider**: The content provider may be unaware of the access control mechanism. They only need to use our provided tool to send out announcements about new content.
- **Content Consumer**: During the first visit, the consumer must handle four dialog boxes, which can be reduced to two if the content provider uses a CA certificate from a well-known authority. Subsequent visits do not require any special action.

**Authorization and Revocation**
- **Error Conditions**: Figure 2 highlights two error conditions: "Error 1" and "Error 2". Error 2 occurs when a client with a valid ESCAPE certificate tries to access unauthorized content. Error 1 is triggered when a legitimate user encounters a man-in-the-middle attack. The content provider can revoke the malicious user's access by removing the public key from the Outlook database.
- **Revocation Mechanism**: The same mechanism can be used to permanently revoke users for any reason.

#### Security Considerations

**Leaking of Content**
- **Credential Sharing**: Legitimate users might share credentials, but each user has a unique private key per ESCAPE server, providing a disincentive to share.
- **Content Download and Forwarding**: Authorized users can download and forward content, but the combination of public key certificates and private key disincentives provides adequate protection for small-scale publishers.

**Protection of Keys**
- **Key Storage**: Clients' private keys are protected using the Microsoft Data Protection system [10], encrypted under a key derived from the user’s login secret. This provides adequate protection and usability.

**Content Protection**
- **SSL Connections**: The ESCAPE server only accepts incoming SSL connections. If the client does not present a certificate, one is issued, and the client’s public key is associated with an Outlook address book entry.

This design minimizes user inconvenience while providing a secure and efficient way to manage content access and distribution.

---

**Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003)**  
1063-9527/03 $17.00 © 2003 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:38:51 UTC from IEEE Xplore. Restrictions apply.