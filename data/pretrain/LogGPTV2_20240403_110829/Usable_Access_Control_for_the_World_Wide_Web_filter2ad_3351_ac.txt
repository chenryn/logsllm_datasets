CAPE server
We used bridge2java [12] to access the Microsoft Outlook
COM API from Java. We used the open-source PureTLS
TLS implementation [5].
Figure 1 shows the user interface a content provider
would see. The upper right pane shows the ﬁle system ex-
ported by the ESCAPE server. The user can browse to the
directory that contains the new content, and select from the
list of all known contacts (shown in the lower half of the
window) those that should receive an announcement about
the new content. Those chosen are simply dragged into the
ACL (upper left) pane. Figure 1 shows that three contacts
were selected to have access to the “My Pictures” folder.
Pressing the “Send Announcements” button results in an
email sent to those three users, containing an individual-
ized URL that points back to the “My Pictures” folder, as
explained in Section 4.2.
Figure 2 shows what happens when one of those recip-
ients connects back to the ESCAPE servers. Let’s assume
that they have never connected to this ESCAPE server be-
fore, and therefore do not have an ESCAPE certiﬁcate for
this server. When the client (remember that we’re using In-
ternet Explorer) connects, the server immediately starts an
SSL handshake (without requiring client authentication). If
the server uses a self-signed certiﬁcate, the user will see a
dialog box that informs her that the server’s certiﬁcate was
issued by someone the user “has not chosen to trust”. The
user has to press the “continue” button, which will cause
the SSL handshake to be ﬁnished, and the client to send its
HTTP GET request. The server parses the GET request, de-
cides that it is a request for an actual resource (as opposed
to the posting of a certiﬁcate request), and proceeds with
a renegotiation of the SSL connection, this time requiring
client authentication. Since the client doesn’t have a certiﬁ-
cate issued by the ESCAPE server, it sends an empty cer-
tiﬁcate chain back to the server.7 (We changed the PureTLS
implementation to accept an empty certiﬁcate chain without
raising an exception.) Since the client has not sent any cer-
tiﬁcates, it is not served the page it requested, instead it is
served a page that informs the user that a one-time setup
is needed. Upon pressing a button on that page, Internet
Explorer will generate a keypair, and send a certiﬁcate re-
quest to the ESCAPE server. To the server, this looks like
a new client connection. This time, however, the HTTP re-
quest turns out to be the posting of the certiﬁcate request.
The server receives the request, and immediately issues a
certiﬁcate. The client’s public key is stored in the Outlook
address book entry for the contact who’s email address ap-
peared in the original request URL (which is passed from
page to page as HTML form data). The page served out to
the client includes the client’s certiﬁcate chain, and a mes-
sage to the user that the setup is complete. It includes a link
to the original URL the user can click. The certiﬁcate chain
is automatically installed into the client’s certiﬁcate store.
This, however, results in two more dialog boxes the user has
to deal with: First, IE informs the user that a “web site” is
trying to install a certiﬁcate on her machine. After approv-
ing this, she is also informed that a new “trusted root” cer-
tiﬁcate is about to be installed. This is the self-signed certiﬁ-
cate that the ESCAPE server sent along with the client cer-
tiﬁcate. Approving this install will eliminate warnings in the
future. Note that if the content provider acquires a CA cer-
tiﬁcate from a well-known certiﬁcation authority, this last
dialog box would be eliminated.
Finally, when the user revisits the original URL (by
clicking on the link on the “setup complete” page, or by
clicking on the link she received in the email), the ESCAPE
server will serve the actual content: The HTTP request will
be parsed as a request for content; the SSL renegotiation
will result in the client’s sending of a veriﬁable certiﬁcate
chain; the server will now check if the public key presented
by the client is part of the access control list speciﬁed by the
content provider; if so, it will serve the requested page.
Here are some observations about our implementation:
USER OVERHEAD Let us ﬁrst look at the overhead imposed
on content provider and consumer by this secure publishing
engine. The content provider, in fact, may not even be aware
of the fact that her content is protected by an access con-
trol mechanism. All she needs to do is use our provided tool
to send out the announcement about newly created content.
On the content consumer side, there are four dialog boxes
that need to be dealt with during the ﬁrst visit to the content
provider’s site. This can be reduced to two if the content
provider chooses to purchase a CA certiﬁcate from a certi-
ﬁcation authority that’s already known to Internet Explorer.
7
That is, if they are using TLS. See Section 5 for a discussion of the
subtle differences between SSL and TLS.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
Client will return
Client will return
to GET original
to GET original
document
document
receive
cert request
Yes
generate cert,
save cert
on server,
deliver cert
to client
No
does server
does server
already have
already have
cert for client?
cert for client?
Yes
Error 1
IN
client connects,
SSL handshake,
receive HTTP
request
is client
is client
POSTing
POSTing
cert request?
cert request?
No
renegotiate
SSL, require
client auth
deliver
requested page
OUT
Client will return
Client will return
to POST cert
to POST cert
request
request
serve key
generation
page
No
has client
has client
provided cert?
provided cert?
Yes
retrieve requested
resource,
check ACL
Yes
access
access
allowed?
allowed?
Error 2
No
Figure 2. Diagram of internal workings of ESCAPE server
Subsequent visits do not require any special action on be-
half of the content consumer at all8, even though her pri-
vate key is used to authenticate her to the ESCAPE server.
This is because the keypair generation scripts on the “setup”
page specify that the private key be stored without any ad-
ditional protection. In this case, Windows’ Data Protection
system [10] encrypts the key using the user’s login secret,
and makes it readily available to processes owned by that
user.
We believe that this is the minimum number of user in-
terventions needed for setting up a certiﬁcate-based access
control system with Internet Explorer. It would be inter-
esting to see whether other browsers allow for a smaller
number of dialog boxes, and what the security implications
would be.
It turns out that there is one more inconvenience the
content consumer has to endure – upon completion of the
one-time setup, she has received all necessary certiﬁcates
and should be able to revisit the original URL. Internet Ex-
plorer, however, caches the information that no certiﬁcates
are available for client authentication (even though they
now are), and the connection will fail (it will actually trig-
ger “Error 1” discussed in more detail below). The content
consumer has to restart Internet Explorer for the connec-
tion to start working.
8
This assumes that the “Don’t prompt for client certiﬁcate selection
when no certiﬁcates or only one certiﬁcate exists”-setting in Internet
Explorer is set to “Enable”.
AUTHORIZATION AND REVOCATION Figure 2 singles out
two error conditions, marked as “Error 1” and “Error 2”.
While the system checks for other error conditions, these
are especially interesting. Error 2 is simply the error raised
when a client tries to access a resource it is not authorized to
view (but it has a valid ESCAPE certiﬁcate). Error 1 has to
do with revocation. As mentioned before, our system can-
not be completely secure. For example, an announcement
email sent to a recipient that is not set up with our server
could be intercepted by a malicious man-in-the-middle. He
could access the ESCAPE server before the legitimate user
could, thus essentially assuming the legitimate user’s iden-
tity (remember that we issues certiﬁcates immediately on-
line to whoever asks for them ﬁrst). When, however, the le-
gitimate user later tries to access the ESCAPE server, she
will trigger Error 1. The page served out under that con-
dition says that legitimate users should contact the content
provider. If and when the legitimate user does so, the con-
tent provider simply removes the public key for that user
from her Outlook database (it’s a Base64 string stored in
“User Field 4” of the user’s Outlook entry, which can sim-
ply be removed). Now, when the legitimate user visits the
ESCAPE server again, she will be taken through the setup
process, and her public key will be associated with her Out-
look entry. This revokes the man-in-the-middle that illegit-
imately associated his public key with the legitimate user’s
Outlook entry.
The same mechanism can be used to revoke users per-
manently, for whatever reason.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
4.4. ESCAPE’s Security
5. Hurdles for Deployment
We explained above how we carefully designed the sys-
tem to minimize inconveniences for both content providers
and content consumers. Let us now look at the level of se-
curity we get from our system.
LEAKING OF CONTENT Legitimate users could try and for-
ward credentials that allow them to access content to illegit-
imate users. As we mentioned above, this would be trivial
in a purely capability-based system, where URLs include a
hard-to-guess string that would have to be present to access
content. In our system each user has one private key per ES-
CAPE server, which is the credential that enables her to ac-
cess any content on that server. Therefore, we feel that there
is some disincentive to share this key with other people.
There is never complete protection from content leakage.
Authorized users can always download content they have
access to, destroy any watermarks embedded in it, and then
forward it to unauthorized users. We feel that the level of
protection given by public key certiﬁcates, combined with
the disincentive to share private keys, is adequate for the
kind of content we would like to protect (i.e., that provided
by small-time publishers for a small set of consumers).
PROTECTION OF KEYS As mentioned before, clients’ pri-
vate keys are protected under the Microsoft Data Protection
system [10]. This means that they are encrypted under a key
derived from the user’s login secret, and then stored on the
ﬁle system. To use her private key, the user simply has to be
logged on to the system. Other users that are logged on to
the system, or users that gained access to the system without
logging in (e.g., by compromising a server process) won’t
be able to decrypt the private keys.9 An attacker that can im-
personate a legitimate user to her own computer, however,
can easily decrypt those keys. Again, we feel that this pro-
vides adequate protection for the kind of content we are try-
ing to protect, and offers desirable usability properties (no
need for additional key protection passwords).
CONTENT PROTECTION The ESCAPE server only accepts
incoming SSL connections. If the client does not present
a certiﬁcate, it is given one, and the client’s public key is
associated, on the server’s side, with an Outlook address
book entry that’s essentially of the client’s choosing. We ex-