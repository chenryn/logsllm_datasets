      mysql:
        host: "127.0.0.1"
        password: ""
        port: "3306"
        user: "root"
        database: "pocassist"
        # 数据库连接超时时间
        timeout: "3s"
### 并发配置
pocassist 基于 Go 编写。通过使用 `ants`实例化协程池，复用 goroutine
，节省资源，提升性能。所以，这里的并发也基本指代的是同时在进行漏洞扫描的 Goroutine 的数量。
通俗来讲就是同时运行的插件数量。假设一个请求在整个扫描流程中需要被 100 个插件扫描且每个插件的执行时间为1秒钟， 倘若我们设置了并发为 50，那么只需要
2s 就能执行完所有的插件；如果设置并发为 20，那么就需要 5s 才能执行完所有插件。
    pluginsConfig:
      # 并发量:同时运行的插件数量
      parallel: 8
### 反连平台
反连平台常用于解决没有回显的漏洞探测的情况，最常见的应该属于 ssrf 和 存储型xss。
目前pocassist支持的反连平台为[ceye.io](http://ceye.io/)，配置ceye的`api_key`和`domain`即可。
    # 反连平台配置: 目前使用 ceye.io
    reverse:
      api_key: ""
      domain: ""
## 0x05 poc编辑手册
poc编辑主要分为两大块：
### 规则内容
熟悉xray规则的师傅，看到“规则内容”
这部分就很熟悉了。pocassist借鉴了xray优秀的规则体系，将xray规则中的所有的变量、方法全部实现注入到cel环境中，也就是说pocassist完全兼容xray所有规则。
因此该模块的编写可以参考xray规则的[编辑手册](https://docs.xray.cool/#/guide/poc)。
注意：
  * 无论是哪种`规则类型`，`请求路径 path` 字段均必须以`/`开头。
  * 如果定义了多个`请求头 headers`，填写完之后必须先点击一下保存请求头按钮，否则不会保存请求头。
### 规则类型
pocassist poc 运行时发起的请求由 原始请求 + 规则内容 共同决定。
这部分最关键的就是`规则类型`。规则类型的不同，检测过程中的最终请求uri 和 参数是完全不同的。
pocassist定义了以下几种类型。
#### 1\. directory
目录型扫描。检测目标为目录，请求头使用规则定义。
poc运行时发起的请求路径为`原始请求路径 + "/" + 规则中定义的path`。请求头使用规则定义。
例如：
输入目标为 `https://jweny.top/aaa/bbb/` ，规则中定义的path为
`/user/zs.php?do=save`，poc运行时的请求路径为`https://jweny.top/aaa/bbb/user/zs.php?do=save`
#### 2\. text
页面内容检测。检测目标为原始请求的响应，因此直接使用原始请求请求头。
poc运行时发起的请求直接为原始请求。
也就是说该类型的poc只需要定义cel表达式。（其他字段即使填写也会被忽略）
#### 3.url
url级漏洞检测。检测路径为原始请求的uri，除了路径外，均使用规则定义。
poc运行时发起的请求路径为原始请求的路径，请求头、请求方法、post body等均使用规则定义。
#### 4\. server
server级漏洞检测。检测路径为原始请求的`server:port`+规则中定义的path，其他均使用规则定义。
poc运行时发起的请求路径为`server:port`+规则path，请求头、请求方法、post body等均使用规则定义。
例如：
输入目标为 `https://jweny.top/aaa/bbb.cc.php` ，规则中定义的path为
`/user/zs.php?do=save`，poc运行时的请求路径为`https://jweny.top/user/zs.php?do=save`
#### 5\. script
脚本检测。脚本检测目前只支持开发者模式，也就是说直接使用release二进制是无法加载到引擎中的。（该缺陷正在紧急修复）。
脚本检测的poc只需要在前端配置`漏洞编号、规则类型、是否启用、漏洞描述、规则内容中的名称`即可，没有配置的话，脚本不会加载到引擎中。
前端配置完基础信息，可以在scripts目录下编写go脚本。源码中已提供两个demo，一个是检测memcached未授权，一个是检测tomcat弱口令。
    func MemcachedUnauthority(args *ScriptScanArgs) (*util.ScanResult, error) {
        addr := args.Host + ":11211"
        payload := []byte("stats\n")
        resp, err := util.TcpSend(addr, payload)
        if err != nil {
            return nil, err
        }
        if bytes.Contains(resp, []byte("STAT pid")) {
            return util.VulnerableTcpOrUdpResult(addr, "",
                []string{string(payload)},
                []string{string(resp)},
            ),nil
        }
        return &util.InVulnerableResult, nil
    }
    func init() {
        ScriptRegister("poc-go-memcached-unauth", MemcachedUnauthority)
    }
说明：
  * 脚本的入参必须为`*ScriptScanArgs`，返回值必须为`(*util.ScanResult, error)`。
  * 脚本中必须定义`init`方法用来注册脚本，`ScriptRegister`方法的第一个值为`前端配置的规则内容中的名称`，第二个为要运行的方法名。
  * 脚本编写完之后重新编译pocassist。`go build -o pocassist`
#### 6\. appendparam
参数级漏洞检测。
目前仅解析了`query string`和`post body` 中的参数（json解析已在计划中）。
参数级漏洞检测只需要在前端配置payload列表（目前前端未显示，下一版修复）。
appendparam为依次在每个参数值后面拼接payload。
例如，检测sql注入时，可定义payload为`'` / `%2527`
等，原始请求为`?aaa=bbb`，那么poc运行时会依次发两个请求，`?aaa=bbb'`和`?aaa=bbb%2327`
#### 7\. replaceparam
参数级漏洞检测。
目前仅解析了`query string`和`post body` 中的参数（json解析已在计划中）。
参数级漏洞检测只需要在前端配置payload列表（目前前端未显示，下一版修复）。
replaceparam为依次直接使用payload替换原始参数值。
例如，检测ssrf时，可定义payload定义为反连平台的domain，原始请求为`?aaa=bbb`，那么poc运行时发起的请求为`?aaa=你的reverseDomain'`
## 0x06 常见问题
  1. config.yaml 加载失败：config.yaml要与pocassist二进制文件放置于同一目录中。
  2. 使用mysql时，数据库初始化失败：如果后端使用mysql数据库，一定先创建数据库，导入数据，并将数据库信息更新至config.yaml后，再运行pocassist。
  3. 目前前端有一个小bug，首次登陆成功之后，跳转至/vul时会显示空，需要强制刷新下。
  4. `go get ./... connection error`
启用goproxy（请参阅此[文章](https://madneal.com/post/gproxy/)以进行golang升级）：
`go env -w GOPROXY=https://goproxy.cn,direct go env -w GO111MODULE=on`
  1. 如果使用前后端分离部署的师傅可自行打包前端。
## 0x07 todo
  * 收集师傅们在使用过程中遇到的问题
  * 目前cli端的批量快扫功能为临时方案，后续所有批量快扫功能web端都将支持。
  * 发现潜在bug
  * json参数解析
  * 修复前端bug
  * 初次加载时要强制刷新
  * 参数级扫描：payload列表前端未提供在线编辑
## 0x08 免责声明
未经授权，使用pocassist攻击目标是非法的。pocassist仅用于安全测试目的。
为避免被恶意使用，本项目所有收录的poc均为漏洞的理论判断，不存在漏洞利用过程，不会对目标发起真实攻击和漏洞利用。
## 0x09 参考项目
  * 
  * 
  * 
  * 
* * *