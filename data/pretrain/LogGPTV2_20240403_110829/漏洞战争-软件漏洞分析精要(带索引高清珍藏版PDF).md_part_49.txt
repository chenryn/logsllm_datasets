nop
618bc814 9e
nop
mshtm11CElement::Doc:
618bc815 8be1
moV
eax,dword ptr [ecx]
618bc817 8b5070
mov
edx,dword ptr [eax+7eh]
618bc81a ffd2
ca11
xpa
又看到频为熟悉的虚函数调用指令，刚好在mshtml!Celment:Doc中调用到此虚函数，但如果直
接在mshtmlICelment:：Doc上面下断点会不停地被断下，这显然是行不通的。
读者是否记得在第3章中提到的页堆，通过WinDbg的gflags.exe工具即可开启页堆。在UAF漏洞
中，我们依然可以借助它来辅助分析，如图7-8所示在命令行对E进程开启页堆。
图7-8开启页堆hpa功能
重新打开poc.html进行调试，断下：
(1444.147c): Access violation - code ceeeeee5 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=61c46ece ebx=19513fbe ecx=0cdeefc8 edx=00eeeee0 es1=0484c928 ed1=00eeeeee
eip=618bc815 esp=0484c8fc ebp=8484c914 iop1=θ
nv up ei pl zr na pe nc
c5=001bss=0023 ds=0023 es=0023 fs=003b gs=0000
efl=00010246
mshtm11CE1ement : :Doc:
---
## Page 309
290漏洞战争：软件漏洞分析精要
618bc815 8be1
mov
eax, dword ptr [ecx] ds:ee23:ecdeefc8=????????
x3a e- d- deau1x mshtml!*document*createElement*
61815eb5 mshtm11CDocument::createElement - 
618c81ee mshtm11s_methdescCDocumentcreateElement = 
61815fee mshtm1!CDocument::CreateElementHelper =
---
## Page 310
第7章释放重引用漏洞分析291
可以看到CDocument:createElement与CDocument:CreateElementHelper可能和解析JavaScriptf代
码中的document.createElement函数相关，因此先逆向分析CDocument:createElement函数。
用IDA分析mshtmldll文件，定位到CDocument:createElement函数，可以发现它最终会调用
CDocument:CreateElementHelper米实现，如图7-9所示。
inta2
stecal1 C9o
GaPASPAPANINTHLC1en
Z pr95
8"B4t
rg_k-
ch
111
us
. es9
push
sar_4], 8
ane
edl, tax
图7-gCDocument::CreateElement函数
跟进CreateElementHelper函数，可以发现它调用CMarkup:CreateElement创建元素，如图7-10
所示。
VPR
ca1
: this
DecHBXZ :CDot
rat :9ec(void)
pust
ear,
[etp*oar_1]
cal1
三
ecs,
: this
push
eax
THar
cal1
esi, eax
neatGCHarkugiB(AE JVAELEIRERT_Taca
nov
图7-10
调用CMarkup::CreateElement创建元素
---
## Page 311
292漏洞战争：软件漏洞分析精要
继续跟进CMarkup:CreateElement创建元素，发现它最终会再调用CreateElement函数，如图7-11
所示。
1ec_7895EA2:
tall
test
Jnu
图7-11调用CreateElement函数
CreateElement函数会从一个特定的函数数组中寻找相应的元素创建函数（如图7-12和图7-13所
示），比如此处PoC创建的是span元素，那么它就调用CSpanElement:CreateElement。因此，在calledx
指令处下断查看调用的函数（可能会有两个地址均同名为CreateElement的情况，笔者直接使用第2个
地址），即可鉴别当前创建的是哪一个元素：
bumshtml1CreateElement+θx41“1n eax;gc*
test :/4061918 1o_74041318:
$B, cx
: CooC sREF: Createi ieneat ((LLHEt_1as,GElenent * *,tboc *,C
tet:704192
7
969: CTagPess
test:706132
.test:706137
[e"burdeo]
_5*1}, t1
tet:74061338
cal1
*ear_se], eel
：调用特定元素对应的划建函款
text :7406134C
sasrt 1ec_74061309
图7-12调用特定元素相对应的创建函数
---
## Page 312
第7章释放重引用漏润分析4293
RE : esty)
cata
)-s5tr
m : ctr
d ffet Cles
prsecc
eLienex
smt(cetalag *,(ac +,titrreet s x)
Te.tagaso
图7-13用于创建不同元素的函数表
继续分析CSpanElement:CreateElement函数，它首先会HeapAlloc分配一块大小为28字节的内存，
接着调用CElement:：CElement创建元素，将元素内容写入前面分配的内存地址，如图7-14和图7-15所
示
Iag*,5
eei
esp
test
7a019852
i创建的元素
图7-14CSpanElement::CreateElement函数
---
## Page 313
294漏洞战争：软件漏洞分析精要
pblic:
thiscall cEle
BB2 proc sear
ELENENI_TM4, c1ass CPoc *)
lll
 [etg*ars_]
el, es
前面分能的内存块
司
cal1
Traclase
：上面的i用于保存创建的元素
T7
dvore ptr [eas*7m]
图7-15CElement::CElement函数
因此，为了查看创建元素所在的内存数据，可以在CElement:CELement下断点（不在
CSpanElement:CreateElement下断点是为了保证通用性，因为不是每个元素的创建都会调用到
CSpanElement:CreateElement，而CElement:CElement是各元素创建时的必经之路）：
注：28/4中的Bx28是指元素的大小，dd命令的输出数据是以每4字节为单位，所以显示长度为ex28/4.
根据前面的分析及断点设置，可以开始追踪poc.html中各元素的创建过程，设置如下断点：
Matched: 614612fa mshtm11CreateElement = 
Matched: 6149e4fc mshtm1!CreateElement = 
Anbiguous symbol error at *nshtm11CreateElement+ex41 *1n eax;gc*
@:e25> bp 6149e4fc+37 “1n eax;gc"
0:825> b1
@ e 6149ad5d
,>8:(/8z)t pa pp:,-**
1 e 6149e533
0ee1 (eee1)0:**** mshtml1CreateElement+ex41 *1n eax;gc
运行后打开poc.html，可以看到各个元素的创建过程，创建顺序跟PoC中的各标签一致：
0:025>g
***
(6146773e)
mshtml!CCommentElement::CreateElement|（614677ec)mshtml!string
Exact matches:
nshtm11CCommentElement::CreateElement = 
'= CElement ***
---
## Page 314
第7章释放重引1用漏洞分析295
eb9b4fc8 61325570 00808801 88000088 e8800080
ab9b4fd8
eb9b4fe8 e8800 8008808
(61461427)
mshtm1ICHtmlElement::CreateElement
(61461478)
mshtml!CHtm1Element:: vftable'
Exact matches:
nshtm11CHtmlElement::CreateElement = 
'=== CElement =ss′
1b7f6fd8 6132557e eeeee881 eeeeee88 88eeeeee
1b7f6fe8
1b7f6ff8
eeeeeeee eeeeeeee
(614617e5)
mshtm11CHeadElement::CreateElenent1(6146175e)
mshtn1!CHeadElement::* vftable'
Exact matches:
mshtm11CHeadElement::CreateElement = 
' CElement 
1b802fd8 6132557e 00eee0e1 0000eee8 e00000ee
1b802fe8
eeeee0ee eeeeeeee eeeeeeee eeeeee0
1b882ff8e88000 e8888880
' CElement ='
197f8fde
61325570 0000e001 00000068 00000000
197f8fee
197f8ffee8eeeee0 e8eeeee
(61466a8e)
mshtm11CBodyElement::CreateElement 1(6146eadc)
mshtm1 1CBodyElement::CBodyElement
Exact matches:
mshtm11CBodyElement::CreateElement = 
'= CElement ===*
1b812fde6132557e 8888e881 8808888 e88808
1b812fee
1b812ffe 00000000 000000e
'= CElenent '
1b6b1fde 6132557e e8888e1 080888 e880008
1b6b1fee
1b6b1ffe 00000000 000000
(6146773e)
mshtm11CCommentElement::CreateElement1（614677ec)
mshtm11'string*
Exact matches:
mshtml!CCommentElement::CreateElement = 
'== CElement =s
1bce8fc86132557e 0000801 000000e8 00000000
1bce8fd8
1bce8fe8 ee0000ee 0eee00e0
---
## Page 315
296漏洞战争：软件漏洞分析精要
(614ce97d)mshtn11CScriptElement::CreateElement1(614ce9c7)
mshtm11CScriptElement::CScriptElement
(614ce97d)mshtm11CScriptElement::CreateElement
(614cθ9c7)
mshtm11CScriptElement: :CScriptElement
Exact matches:
mshtml1CScriptElement::CreateElenent = 
' CElenent =
De4e8fd86132557e 00000881 e0000088 08e0000
Be4e8fe8
Be4e8ff8000eee8 e000008e
(6141906c)
mshtm1ICSpanElement::CreateElement
1(61419058)
mshtm11CSpanElement: :* vftable'
Exact matches:
mshtm11CSpanElement::CreateElement = 