2040
1020
2040
516
510
1020
2040
255
255
255
255
255
255
255
-
255
255
255
arity
2:1
4:1
2:1
4:1
8:1
2:1
4:1
2:1
2:1
4:1
8:1
BLS/BN/Ed
33
35
57
60
63
120 BLS/BN/Ed
120
BLS/BN/Ed
BLS12-381
BLS/BN/Ed
8
8
8
8
8
8
8
-
16
10
10
R1CS R1CS
/bit
/perm.
0.34
171
225
0.22
0.47
243
0.29
300
0.2
405
504
0.5
0.3
600
869
268
300
450
1.68
0.52
0.29
0.22
Time
/perm.
0.021 ms
0.05 ms
0.033 ms
0.08 ms
0.259 ms
0.216 ms
0.578 ms
0.525 ms
0.555 ms
1.03 ms
Comparison to HADES ( [31]). Since the design of PO-
SEIDON follows the same strategy as block ciphers in [31],
we provide an explicit list of new material crafted for this
paper:
• Hash-function speciﬁc (CICO, keyless, preimage) al-
gebraic attacks, their analysis, and ﬁxes against recent
hash-only attacks
• Orientation towards various zero-knowledge proof sys-
tems and suggestions how to increase prover perfor-
mance in these systems
• Instances for Merkle trees and variable-length hashing
• Concrete benchmarks for zero-knowledge proofs of ac-
cumulated values in Merkle trees, and a demonstration
that it can be done in 1 second for billion-size trees
Related Work. The Zcash designers introduced a new 256-
bit hash function called Pedersen hash [38, p.134], which
is effectively a vectorized Pedersen commitment in elliptic
curve groups with short vector elements. For the claimed
128-bit security level, it utilizes 869 constraints per 516-bit
message chunk, thus having 1.7 constraints per bit, whereas
our POSEIDON instances use from 0.2 to 0.45 constraints per
bit, depending on the underlying prime ﬁeld.
For the binary ﬁeld case, Ashur and Dhooghe [8] have recently
introduced the STARK-friendly block cipher JARVIS and its
derivative hash function FRIDAY with several instances and
security levels. They use a key-alternating structure with a sin-
gle inverse S-box, followed by an afﬁne transformation (with
low degree in the extension ﬁeld). However, both JARVIS and
FRIDAY were successfully attacked shortly after their publica-
tion [3]. In the response, the authors created a new family of
SNARK/STARK-friendly hash functions with Vision (binary
ﬁelds) and Rescue (prime ﬁelds) being main instances [6].
The latter two share some similarity with our design with two
important differences: First, all S-box layers are full (there are
no partial rounds). Moreover, every second layer has S-boxes
of the form x1/d for small d. This approach prevents some
algebraic attacks but is also more expensive in software as
the resulting power functions have high Hamming weight and
thus require many squarings.
Structure of the Paper. We introduce POSEIDON as a
HADES-based hash in Section 2 and follow up with real-
world applications in Section 3. Concrete instances with round
numbers and domain constants are given in Section 4. We
summarize the cryptanalysis results in Section 5 and refer
to [30, Appendix] for all the details. Finally, we estimate the
performance of POSEIDON instances in zero-knowledge proof
systems in Section 6 by computing R1CS (SNARK) and AET
(STARK) costs.
Historic Remarks. We started working on the design of
POSEIDON in the fall of 2018. The work was triggered by the
STARK paper [9] where a Rijndael-based hash function was
proposed for zero-knowledge applications, but we identiﬁed
that the underlying cipher is not suitable for the hash mode
due to related-key trails. In the design of POSEIDON, we
were inspired by the LowMC cipher [5] with a partial S-box
layer, the block cipher SHARK with its inverse S-box and its
MDS matrix as the linear layer [50], and by MiMC with its
USENIX Association
30th USENIX Security Symposium    521
algebraically simple approach of using the cube S-box [4, 33].
We immediately considered a partial S-box layer for most of
the rounds in order to gain performance and safe constraints.
The S-box was initially either the inverse or a power map
(as the cube function), but we later found out that the inverse
function does not provide a sufﬁciently fast degree growth.
In 2019, we separated the design into two parts due to
diverging analysis and use cases, namely the block ci-
pher HADESMiMC and the hash functions POSEIDON and
STARKAD. The latter was designed for binary ﬁelds, as we
thought that they are useful for STARKs. However, it turned
out that they are neither especially useful in this setting nor
equally secure [14, 42], which is why we eventually dropped
STARKAD.4
After the ﬁrst publications of the design, we got requests from
third parties to add explicit Merkle tree support and encryp-
tion (to be veriﬁable in zero knowledge). Later we were also
asked to add weaker and stronger versions. Initially we al-
lowed for greater ﬂexibility in the choice of S-boxes, curves,
width, etc., but only a few parameter sets are now given in the
main body of this paper for the matter of user convenience: It
turned out that too many possible parameters confuse users.
Regarding zero-knowledge proof systems, we initially tar-
geted Groth16 [35], Bulletproofs [19] and STARKs [9], and
we later also added PLONK [27] due to its increased popular-
ity.
2 The POSEIDON Hash Function
p → Fo
In the following, we propose the hash function POSEIDON,
which maps strings over Fp (for a prime p ≈ 2n) to ﬁxed-
length strings over Fp, i.e., POSEIDON : F∗
p, where
o is the output length measured in Fp elements (usually,
o = 1). It is constructed by instantiating a sponge function
with the POSEIDONπ permutation. POSEIDONπ is a variant
of HADESMiMC proposed in [31], albeit instantiated with a
ﬁxed and known key.
We sometimes use the notation p ≈ 2n and N = n · t ≈
log2(p)·t to denote the approximate size of the texts in bits.
2.1 Sponge Construction for POSEIDONπ
Sponges. A sponge construction [12] builds upon an inter-
nal permutation and can be used to achieve various goals such
as encryption, authentication, or hashing. In addition to the
internal permutation, it is usually deﬁned by two parameters,
namely the rate (or arity in the context of tree hashing) r and
the capacity (or inner part) c. The rate determines the through-
put, whereas the capacity is crucial for the security level. This
4For reference, we recall STARKAD in [30, Appendix J].
m1
m2
m3
m4
h1
h2
I
P
P
P
P
P
Figure 1: A sponge hash function.
means that, when ﬁxing the size of the internal permutation
to N bits, a tradeoff between throughput and security has to
be made.
An example for a sponge hash function is proposed in Fig. 1,
where the construction is used to compute the hash output
h1 || h2 of the 4-block message m1 || m2 || m3 || m4, where mi
and hi are r-bit values. The initial state I contains all zeros,
i.e., I = 0r || 0c for an r-bit rate and a c-bit capacity.
Sponge Security. Depending on the properties of the N-bit
internal permutation, a sponge construction allows to make
strong arguments about the security of the overall design.
Speciﬁcally, if this permutation is modeled as a randomly
chosen permutation, the sponge function is indifferentiable
from a random oracle for up to 2c/2 calls (|F|c/2 calls if the
capacity is counted in ﬁeld elements) [12]. A sponge hash
function with a capacity of c bits can therefore provide 2c/2
bits of collision and 2c/2 bits of (second) preimage resistance.5
In this proposal, we instantiate the sponge function with our
new permutation POSEIDONπ. Given the size N of the permu-
tation and a desired security level s, we can hash r = N − 2s
bits per call to the permutation. Following this design strat-
egy, we choose the number of rounds of the inner permutation
POSEIDONπ in order to ensure that such a permutation does
not exhibit non-generic properties up to 2M queries, where M
is the desired security level.6 For this we set the capacity to
2M and denote by POSEIDON-M a hash function that provides
M bits of security against collision and preimage attacks.
Our POSEIDONπ Sponges. We provide several POSEIDON
instances for different use cases, but they all use the sponge
construction in the same way as illustrated in Fig. 1:
1. Depending on the use case (Section 3), determine the
capacity element value and the input padding if needed.
2. Split the input into chunks of size r.
5We present the Sponge construction over a binary ﬁeld in order to follow
the presentation made in [12]. It can easily be generalized for a prime ﬁeld
p by replacing each (N/t)-bit word by a ((cid:100)log2(p)(cid:101))-bit one.
Ft
6In other words, the permutation cannot be distinguished from a randomly
drawn permutation.
522    30th USENIX Security Symposium
USENIX Association
3. Apply the permutation POSEIDONπ to the capacity ele-
ment and the ﬁrst chunk.
4. Until no more chunks are left, add them into the state
and apply the permutation.
5. Output o output elements out of the rate part of the state.
If needed, iterate the permutation more times.
2.2 The HADES Design Strategy for Hashing
Cryptographic permutations usually consist of an efﬁcient
round function which is applied sufﬁciently many times in
order to make the permutation behave like a randomly drawn
one. In general, the same round function is used throughout
the permutation, in order to destroy all of its possible symme-
tries and structural properties.
In HADES we consider different round functions within the
same construction. More precisely, we mix rounds with full
S-box layers and rounds with partial S-box layers. The mo-
tivation to have different types of rounds is that full S-box
layers are expensive in software and ZK proof systems but are
a good protection against statistical attacks, whereas partial
layers are relatively cheap but are, in some cases, similarly
good as full ones against algebraic attacks.
Details on the HADES Strategy. The HADES design strat-
egy consists of R f rounds in the beginning, in which S-boxes
are applied to the full state. After these rounds, RP rounds in
the middle contain only a single S-box in each round, and the
rest of the state goes through the non-linear layer unchanged
(i.e., identity functions are used instead of the missing S-
boxes). Finally, R f rounds at the end are applied by again
using S-boxes for the full state.
The idea of this approach is to provide arguments for the
security against statistical attacks using the RF = 2R f rounds
with full S-box layers in the beginning and in the end together
with the wide trail strategy [25], which is also used in, e.g.,
the AES [26]. On the other hand, the RP rounds with partial
S-box layers are a more efﬁcient way to increase the degree
of the overall function, and are mainly used for arguments
against algebraic attacks.
A detailed overview of this approach is shown in Fig. 2.
ARC(·)
R f rounds
S
S
S
S
S
S
. . .
S
R f rounds
RP rounds
M(·)
...
ARC(·)
M(·)
...
ARC(·)
. . .
S
RP rounds
R f rounds
S
S
S
S
S
S
. . .
S
R f rounds
M(·)
Figure 2: Construction of the HADES-based POSEIDONπ per-
mutation.
The MixLayer operation is the linear layer of our construction,
and it consists in multiplying the state with a t×t MDS matrix
in order to apply the wide trail strategy.
In total we get:
ARC → SB → M
(cid:125)
(cid:124)
While ARC(·) and M(·) are the same in each round, the
number of S-boxes is not the same, namely