$ curl -ik -X GET --cert clientCrt.pem --key clientKey.pem \
  https://server.blackhat-go.local:9443/hello
HTTP/1.1 200 OK
Date: Fri, 09 Oct 2020 16:55:52 GMT
Content-Length: 25
Content-Type: text/plain; charset=utf-8
Authentication successful
This message tells you the server works as expected. 
Now, let’s have a look at a client (Listing 11-7). You can run the client on 
either the same system as the server or a different one. If it’s on a different 
system, you’ll need to transfer clientCrt.pem to the server and serverCrt.pem to 
the client.
func main() {
    var (
        err              error
        cert             tls.Certificate
        serverCert, body []byte
        pool             *x509.CertPool
        tlsConf          *tls.Config
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   251
        transport        *http.Transport
        client           *http.Client
        resp             *http.Response
    )   
    if cert, err = tls.LoadX509KeyPair("clientCrt.pem", "clientKey.pem"); err != nil { u
        log.Fatalln(err)
    }   
    if serverCert, err = ioutil.ReadFile("../server/serverCrt.pem"); err != nil { v
        log.Fatalln(err)
    }   
    pool = x509.NewCertPool()
    pool.AppendCertsFromPEM(serverCert) w
    tlsConf = &tls.Config{ x
        Certificates: []tls.Certificate{cert},
        RootCAs:      pool,
    }   
    tlsConf.BuildNameToCertificate()y
    transport = &http.Transport{ z
        TLSClientConfig: tlsConf,
    }   
    client = &http.Client{ {
        Transport: transport,
    }   
    if resp, err = client.Get("https://server.blackhat-go.local:9443/hello"); err != nil { |
        log.Fatalln(err)
    }   
    if body, err = ioutil.ReadAll(resp.Body); err != nil { }
        log.Fatalln(err)
    }   
    defer resp.Body.Close()
    fmt.Printf("Success: %s\n", body)
}
Listing 11-7: The mutual authentication client (/ch-11/mutual-auth/cmd /client /main.go)
A lot of the certificate preparation and configuration will look similar 
to what you did in the server code: creating a pool of certificates and prepar-
ing subject and common names. Since you won’t be using the client certifi-
cate and key as a server, you instead call tls.LoadX509KeyPair("clientCrt.pem",  
"clientKey.pem") to load them for use later u. You also read the server certifi-
cate, adding it to the pool of certificates you wish to allow v. You then use 
the pool and client certificates w to build your TLS configuration x, and 
call tlsConf.BuildNameToCertificate() to bind domain names to their respec-
tive certificates y. 
Since you’re creating an HTTP client, you have to define a transport z, 
correlating it with your TLS configuration. You can then use the transport 
前沿信安资讯阵地  公众号：i nf osrc
252   Chapter 11
instance to create an http.Client struct {. As we discussed in Chapters 3 
and 4, you can use this client to issue an HTTP GET request via client.Get 
("https://server.blackhat-go.local:9443/hello") |. 
All the magic happens behind the scenes at this point. Mutual authen-
tication is performed—the client and the server mutually authenticate 
each other. If authentication fails, the program returns an error and exits. 
Otherwise, you read the HTTP response body and display it to stdout }. 
Running your client code produces the expected result, specifically, that 
there were no errors thrown and that authentication succeeds:
$ go run main.go 
Success: Authentication successful
Your server output is shown next. Recall that you configured the server 
to log a hello message to standard output. This message contains the com-
mon name of the connecting client, extracted from the certificate:
$ go run main.go 
Hello: client.blackhat-go.local
You now have a functional sample of mutual authentication. To further 
enhance your understanding, we encourage you to tweak the previous 
examples so they work over TCP sockets. 
In the next section, you’ll dedicate your efforts to a more devious pur-
pose: brute-forcing RC2 encryption cipher symmetric keys.
Brute-Forcing RC2
RC2 is a symmetric-key block cipher created by Ron Rivest in 1987. Prompted 
by recommendations from the government, the designers used a 40-bit 
encryption key, which made the cipher weak enough that the US govern-
ment could brute-force the key and decrypt communications. It provided 
ample confidentiality for most communications but allowed the government 
to peep into chatter with foreign entities, for example. Of course, back in 
the 1980s, brute-forcing the key required significant computing power, and 
only well-funded nation states or specialty organizations had the means to 
decrypt it in a reasonable amount of time. Fast-forward 30 years; today, the 
common home computer can brute-force a 40-bit key in a few days or weeks. 
So, what the heck, let’s brute force a 40-bit key.
Getting Started
Before we dive into the code, let’s set the stage. First of all, neither the stan-
dard nor extended Go crypto libraries have an RC2 package intended for 
public consumption. However, there’s an internal Go package for it. You 
can’t import internal packages directly in external programs, so you’ll have 
to find another way to use it. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   253
Second, to keep things simple, you’ll make some assumptions about the 
data that you normally wouldn’t want to make. Specifically, you’ll assume 
that the length of your cleartext data is a multiple of the RC2 block size 
(8 bytes) to avoid clouding your logic with administrative tasks like han-
dling PKCS #5 padding. Handling the padding is similar to what you did 
with AES previously in this chapter (see Listing 11-4), but you’d need to 
be more diligent in validating the contents to maintain the integrity of the 
data you’ll be working with. You’ll also assume that your ciphertext is an 
encrypted credit card number. You’ll check the potential keys by validating 
the resulting plaintext data. In this case, validating the data involves mak-
ing sure the text is numeric and then subjecting it to a Luhn check, which is a 
method of validating credit card numbers and other sensitive data. 
Next, you’ll assume you were able to determine—perhaps from pilfer-
ing filesystem data or source code—that the data is encrypted using a 40-bit 
key in ECB mode with no initialization vector. RC2 supports variable-length 
keys and, since it’s a block cipher, can operate in different modes. In ECB 
mode, which is the simplest mode, blocks of data are encrypted indepen-
dently of other blocks. This will make your logic a little more straightforward. 
Lastly, although you can crack the key in a nonconcurrent implementation, 
if you so choose, a concurrent implementation will be far better perform-
ing. Rather than building this thing iteratively, showing first a noncon-
current version followed by a concurrent one, we’ll go straight for the 
concurrent build. 
Now you’ll install a couple of prerequisites. First, retrieve the official 
RC2 Go implementation from https://github.com/golang/crypto/blob/master 
/pkcs12/internal/rc2/rc2.go. You’ll need to install this in your local workspace 
so that you can import it into your brute-forcer. As we mentioned earlier, 
the package is an internal package, meaning that, by default, outside pack-
ages can’t import and use it. This is a little hacky, but it’ll prevent you from 
having to use a third-party implementation or—shudder—writing your own 
RC2 cipher code. If you copy it into your workspace, the non-exported func-
tions and types become part of your development package, which makes 
them accessible. 
Let’s also install a package that you’ll use to perform the Luhn check:
$ go get github.com/joeljunstrom/go-luhn
A Luhn check calculates checksums on credit card numbers or other 
identification data to determine whether they’re valid. You’ll use the exist-
ing package for this. It’s well-documented and it’ll save you from re-creating 
the wheel.
Now you can write your code. You’ll need to iterate through every 
combination of the entire key space (40-bits), decrypting your ciphertext 
with each key, and then validating your result by making sure it both 
consists of only numeric characters and passes a Luhn check. You’ll use 
a producer/consumer model to manage the work—the producer will push 
a key to a channel and the consumers will read the key from the channel 
and execute accordingly. The work itself will be a single key value. When you 
前沿信安资讯阵地  公众号：i nf osrc
254   Chapter 11
find a key that produces properly validated plaintext (indicating you found a 
credit card number), you’ll signal each of the goroutines to stop their work.
One of the interesting challenges of this problem is how to iterate the 
key space. In our solution, you iterate it using a for loop, traversing the key 
space represented as uint64 values. The challenge, as you’ll see, is that uint64 
occupies 64 bits of space in memory. So, converting from a uint64 to a 40-bit 
(5-byte) []byte RC2 key requires that you crop off 24 bits (3 bytes) of unnec-
essary data. Hopefully, this process becomes clear once you’ve looked at the 
code. We’ll take it slow, breaking down sections of the program and work-
ing through them one by one. Listing 11-8 begins the program.
import (
    "crypto/cipher"
    "encoding/binary"
    "encoding/hex"
    "fmt"
    "log"
    "regexp"
    "sync"
    u luhn "github.com/joeljunstrom/go-luhn"
    v "github.com/bhg/ch-11/rc2-brute/rc2"
)
w var numeric = regexp.MustCompile(`^\d{8}$`)
x type CryptoData struct {
    block cipher.Block
    key   []byte
}
Listing 11-8: Importing the RC2 brute-force type (/ch-11 /rc2-brute/main.go)
We’ve included the import statements here to draw attention to the 
inclusion of the third-party go-luhn package u, as well as the inclusion of 
the rc2 package v you cloned from the internal Go repository. You also 
compile a regular expression w that you’ll use to check whether the result-
ing plaintext block is 8 bytes of numeric data. 
Note that you’re checking 8 bytes of data and not 16 bytes, which is the 
length of your credit card number. You’re checking 8 bytes because that’s 
the length of an RC2 block. You’ll be decrypting your ciphertext block 
by block, so you can check the first block you decrypt to see whether it’s 
numeric. If the 8 bytes of the block aren’t all numeric, you can confidently 
assume that you aren’t dealing with a credit card number and can skip the 
decryption of the second block of ciphertext altogether. This minor perfor-
mance improvement will significantly reduce the time it takes to execute 
millions of times over. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   255
Lastly, you define a type named CryptoData x that you’ll use to store 
your key and a cipher.Block. You’ll use this struct to define units of work, 
which producers will create and consumers will act upon. 
Producing Work
Let’s look at the producer function (Listing 11-9). You place this function 
after your type definitions in the previous code listing.
u func generate(start, stop uint64, out chan <- *CryptoData,\
done <- chan struct{}, wg *sync.WaitGroup) {
    v wg.Add(1)
    w go func() {
        x defer wg.Done()
        var (
            block cipher.Block
            err   error
            key   []byte
            data  *CryptoData
        )
        y for i := start; i <= stop; i++ {
            key = make([]byte, 8)
            z select {
            { case <- done:
                return
            | default:
                } binary.BigEndian.PutUint64(key, i)
                if block, err = rc2.New(key[3:], 40); err != nil {
                    log.Fatalln(err)
                }
                data = &CryptoData{
                    block: block,
                    key:   key[3:],
                }
                ~ out <- data
            }
        }
    }()
    return
}
Listing 11-9: The RC2 producer function (/ch-11 /rc2-brute /main.go)
Your producer function is named generate() u. It accepts two uint64 vari-
ables used to define a segment of the key space on which the producer will 
create work (basically, the range over which they’ll produce keys). This allows 
you to break up the key space, distributing portions of it to each producer. 
The function also accepts two channels: a *CryptData write-only chan-
nel used for pushing work to consumers and a generic struct channel 
that’ll be used for receiving signals from consumers. This second channel 
前沿信安资讯阵地  公众号：i nf osrc
256   Chapter 11
is necessary so that, for example, a consumer that identifies the correct 
key can explicitly signal the producer to stop producing. No sense creat-
ing more work if you’ve already solved the problem. Lastly, your function 
accepts a WaitGroup to be used for tracking and synchronizing producer 
execution. For each concurrent producer that runs, you execute wg.Add(1) v 
to tell the WaitGroup that you started a new producer.
You populate your work channel within a goroutine w, including a call 
to defer wg.Done() x to notify your WaitGroup when the goroutine exits. This 
will prevent deadlocks later as you try to continue execution from your 
main() function. You use your start() and stop() values to iterate a subsec-
tion of the key space by using a for loop y. Every iteration of the loop incre-
ments the i variable until you’ve reached your ending offset. 
As we mentioned previously, your key space is 40 bits, but i is 64 bits. 
This size difference is crucial to understand. You don’t have a native Go 
type that is 40 bits. You have only 32- or 64-bit types. Since 32 bits is too 
small to hold a 40-bit value, you need to use your 64-bit type instead, and 
account for the extra 24 bits later. Perhaps you could avoid this whole chal-
lenge if you could iterate the entire key space by using a []byte instead 
of a uint64. But doing so would likely require some funky bitwise opera-
tions that may overcomplicate the example. So, you’ll deal with the length 
nuance instead.
Within your loop, you include a select statement z that may look silly 
at first, because it’s operating on channel data and doesn’t fit the typical  
syntax. You use it to check whether your done channel has been closed via 
case <- done {. If the channel is closed, you issue a return statement to 
break out of your goroutine. When the done channel isn’t closed, you use 
the default case | to create the crypto instances necessary to define work. 
Specifically, you call binary.BigEndian.PutUint64(key, i) } to write your uint64 
value (the current key) to a []byte named key. 
Although we didn’t explicitly call it out earlier, you initialized key as an 
8-byte slice. So why are you defining the slice as 8 bytes when you’re dealing 
with only a 5-byte key? Well, since binary.BigEndian.PutUint64 takes a uint64 
value, it requires a destination slice of 8 bytes in length or else it throws an 
index-out-of-range error. It can’t fit an 8-byte value into a 5-byte slice. So, you 
give it an 8-byte slice. Notice throughout the remainder of the code, you use 
only the last 5 bytes of the key slice; even though the first 3 bytes will be zero, 
they will still corrupt the austerity of our crypto functions if included. This is 
why you call rc2.New(key[3:], 40) to create your cipher initially; doing so drops 
the 3 irrelevant bytes and also passes in the length, in bits, of your key: 40. 
You use the resulting cipher.Block instance and the relevant key bytes to 
create a CryptoData object, and you write it to the out worker channel ~.
That’s it for the producer code. Notice that in this section you’re only 
bootstrapping the relevant key data needed. Nowhere in the function are 
you actually attempting to decrypt the ciphertext. You’ll perform this work 
in your consumer function. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   257
Performing Work and Decrypting Data
Let’s review the consumer function now (Listing 11-10). Again, you’ll add 
this function to the same file as your previous code.
u func decrypt(ciphertext []byte, in <- chan *CryptoData, \
done chan struct{}, wg *sync.WaitGroup) {
    size := rc2.BlockSize
    plaintext := make([]byte, len(ciphertext))
    v wg.Add(1)
    go func() {   
        w defer wg.Done()
        x for data := range in {
            select {
            y case <- done:
                return
            z default:
                { data.block.Decrypt(plaintext[:size], ciphertext[:size])
                | if numeric.Match(plaintext[:size]) {
                    } data.block.Decrypt(plaintext[size:], ciphertext[size:])
                    ~ if luhn.Valid(string(plaintext)) && \
                    numeric.Match(plaintext[size:]) {
                        fmt.Printf("Card [%s] found using key [%x]\n", /
                        plaintext, data.key)
                        close(done)
                        return
                    }
                }
            }
        }
    }()
}
Listing 11-10: The RC2 consumer function (/ch-11 /rc2-brute/main.go)
Your consumer function, named decrypt() u, accepts several param-
eters. It receives the ciphertext you wish to decrypt. It also accepts two 