我在 Docker 映像`dockeronwindows/ch06-nerd-dinner-db`中打包了我最新的 SQL Server 数据库模式。该映像使用环境变量来设置管理员密码，这对开发人员来说很好，但在您想要限制访问的测试环境中就不好了。这一章我有一个新版本，有一个更新的 Dockerfile 和数据库的启动脚本，所以我可以从一个机密文件中读入密码。
在`ch07-nerd-dinner-db`的`InitializeDatabase.ps1`脚本中，我添加了一个名为`sa_password_path`的新参数和一些从文件中读取密码的简单逻辑(如果该路径中存在密码的话):
```
if ($sa_password_path -and (Test-Path $sa_password_path)) {
  $password = Get-Content -Raw $sa_password_path
  if ($password) {
    $sa_password = $password
    Write-Verbose "Using SA password from secret file: $sa_password_path"
}
```
This is a completely different approach to the one taken in the REST API. Applications have their own expectations about configuration, and you'll need to integrate that with Docker's approach of surfacing config data in files. In most cases, you can do it all in the Dockerfile, so you shouldn't need to change code to read config from a file directly.
Dockerfile 使用一个环境变量作为密码文件路径的默认值:
```
ENV sa_password_path="C:\secrets\sa-password"
```
这仍然支持运行数据库的不同方式。开发人员可以在不指定任何配置设置的情况下运行它，并且它将使用映像中内置的默认密码，这与应用映像的连接字符串中内置的默认密码相同。在集群环境中，管理员可以独立于部署应用和安全访问数据库容器来创建机密。
我需要创建密码，然后更新数据库服务以使用密码和应用密码的新映像:
```
docker secret create nerd-dinner-db-sa-password .\secrets\nerd-dinner-db-sa-password.txt;
docker service update `
 --secret-add src=nerd-dinner-db-sa-password,target=C:\secrets\sa-password `
 --image dockeronwindows/ch07-nerd-dinner-db:2e `
 nerd-dinner-db;
```
现在，数据库正在使用由 Docker Swarm 保护的强密码。能够访问 Docker 引擎的用户看不到机密的内容，因为它只能在明确使用机密的服务的容器中解密。我可以检查机密，但我只看到元数据:
```
> docker secret inspect --pretty nerd-dinner-db-sa-password
ID:              u2zsrjouhicjnn1fwo5x8jqpk
Name:              nerd-dinner-db-sa-password
Driver:
Created at:        2019-02-14 10:33:04.0575536 +0000 utc
Updated at:        2019-02-14 10:33:04.0575536 +0000 utc
```
现在我的应用坏了，因为我已经更新了数据库密码，而没有更新使用数据库的应用中的连接字符串。这就是通过向 Docker Swarm 发出命令来强制管理分布式应用的危险。相反，您应该以声明的方式管理您的应用，使用 Docker Compose 文件来定义所有服务和其他资源，并将它们部署为 Docker 栈。
# 向 DockerSwarm 部署栈
Docker Swarm 中的栈解决了在单个主机上使用 Docker Compose 或在 Docker Swarm 上手动创建服务的局限性。您从一个合成文件创建一个栈，Docker 将栈服务的所有元数据存储在群中。这意味着 Docker 知道资源集代表一个应用，您可以从任何 Docker 客户端管理服务，而不需要编写文件。
一个*栈*是组成应用的所有对象的抽象。它包含服务、卷和网络，就像标准的 Docker Compose 文件一样，但它也支持 Docker Swarm 对象(配置和机密)以及用于大规模运行应用的附加部署设置。
Stacks can even abstract the orchestrator you're using. Docker Enterprise supports both Docker Swarm and Kubernetes on the same cluster, and you can deploy and manage applications as stacks to either orchestrator, using the simple Docker Compose format and the Docker CLI.
# 使用 Docker 编写文件定义栈
Docker Compose 文件模式已经从支持单个 Docker 主机上的客户端部署发展到跨 Docker Swarm 的栈部署。不同的属性集在不同的场景中是相关的，工具会强制执行这些属性集。Docker Compose 将忽略仅适用于栈部署的属性，Docker Swarm 将忽略仅适用于单节点部署的属性。
我可以利用多个合成文件来利用这一点，在一个文件中定义我的应用的基本设置，在一个覆盖文件中添加本地设置，在另一个覆盖文件中添加集群设置。我已经用`ch07-docker-compose`文件夹中的合成文件做到了这一点。`docker-compose.yml`中的核心服务定义现在非常简单——它们只包括适用于每种部署模式的属性。甚至 Traefik 的反向代理定义也很简单:
```
reverse-proxy:
 image: sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019
 networks:
 - nd-net 
```
在`docker-compose.local.yml`覆盖文件中，我添加了在我的笔记本电脑上开发应用和使用 Docker Compose 进行部署时相关的属性。对于 Traefik，我需要配置要运行的命令以及要为 Docker Engine 命名管道发布和装载卷的端口:
```
reverse-proxy:
  command: --docker --docker.endpoint=npipe:////./pipe/docker_engine --api
 ports:
   - "80"
   - "8080"
 volumes:
   - type: npipe
     source: \\.\pipe\docker_engine
     target: \\.\pipe\docker_engine 
```
在`docker-compose.swarm.yml`覆盖文件中，当我在集群 Docker Swarm 环境中运行时，我有要应用的属性——这可能是测试中的两节点 Swarm 和生产中的 200 节点 Swarm；合成文件将是相同的。我设置了 Traefik 命令来使用 TCP 连接到群管理器，并且我使用机密来存储群中的 TLS 证书:
```
reverse-proxy:
  command: --docker --docker.swarmMode --docker.watch --docker.endpoint=tcp://win2019-dev-02:2376  
           --docker.tls.ca=/certs/ca.pem --docker.tls.cert=/certs/cert.pem ...
  ports:
    - "80:80"
    - "8080:8080"
  secrets:
    - source: docker-client-ca
      target: C:\certs\ca.pem
    - source: docker-client-cert
      target: C:\certs\cert.pem
    - source: docker-client-key
      target: C:\certs\key.pem
 deploy:
   placement:
     constraints:
       - node.role == manager
```
The only part of this application manifest that isn't portable is the DNS name of my swarm manager, `win2019-dev-02`. I explained in [Chapter 6](06.html), *Organizing Distributed Solutions with Docker Compose,* that you can't mount the named pipe in swarm mode yet, but it's coming soon. When that feature arrives, I can use the named pipe for Traefik in swarm mode in the same way as on a single Docker Engine, and my Compose files will work on any Docker cluster.
其余服务的模式是相同的:docker: `compose.yml`中有一个基本定义，本地文件中有一组针对开发人员的覆盖，swarm 文件中有一组替代覆盖。核心组合文件不能单独使用，因为它没有指定的所有配置，这与[第 6 章](06.html)、*用 Docker Compose 组织分布式解决方案、*不同，我的 Docker Compose 文件是为开发而设置的。您可以使用最适合您的方法，但是这种方法的优点是每个环境的设置都捕获在它自己的覆盖文件中。
有几个服务选项值得详细研究。REST 应用编程接口是在核心合成文件中定义的，只有映像和网络设置。本地覆盖添加了用于向代理注册 API 的标签，它还捕获了对数据库服务的依赖:
```
nerd-dinner-api:
  depends_on:
    - nerd-dinner-db
  labels:
    - "traefik.frontend.rule=Host:api.nerddinner.local"
```
群体模式不支持`depends_on`属性。当您部署一个栈时，不能保证服务将以哪种顺序启动。如果您的应用组件是有弹性的，并且有任何依赖关系的`retry`逻辑，那么服务启动顺序就无关紧要了。如果您的组件没有弹性，并且在无法访问依赖项时崩溃，那么 Docker 将重新启动失败的容器，并且应用应该在几次重试后准备好。
Resilience is often missing from legacy applications, which assume that their dependencies are always available and able to respond immediately. This is not the case if you move to cloud services, and this is also true of containers. Docker will keep replacing failed containers, but you can add resilience even to legacy apps by building startup checks and health checks into the Dockerfile.
群组定义增加了机密和配置设置，并且容器标签应用于 Traefik 的方式也有所不同:
```
nerd-dinner-api:
  configs:
    - source: nerd-dinner-api-config
      target: C:\dinner-api\config\config.json
  secrets:
    - source: nerd-dinner-api-secrets
      target: C:\dinner-api\config\secrets.json
  deploy:
    replicas: 2
    labels:
      - "traefik.frontend.rule=Host:api.nerddinner.swarm"
      - "traefik.port=80"
```
配置和机密仅在群集模式下适用，但您可以将它们包含在任何编写文件中—当您在单个 Docker 引擎上运行时，Docker 编写将忽略它们。`deploy`部分也仅用于集群模式，这捕获了副本的基础架构设置。这里，我的副本数为 2，这意味着群将为此服务运行两个容器。我在`deploy`部分也有 Traefik 的标签，确保标签贴在容器上，而不是服务本身。
Docker 使用标签来注释任何类型的对象—卷、节点、服务、机密、容器和任何其他 Docker 资源都可以添加或删除标签，它们在 Docker 引擎 API 中作为键值对公开。Traefik 只查找容器标签，这些标签在组合文件的`deploy`部分以群组模式应用。如果您在服务部分下直接有标签，那么它们会被添加到服务中，而不是容器中。在这种情况下，这意味着容器上没有标签，因此 Traefik 不会注册任何路线。
# 在 Docker 编写文件中定义群资源
在本章中，核心`docker-compose.yml`文件只包含一个`services`部分；没有指定其他资源。这是因为我的应用的资源在单个 Docker Engines 部署和 Docker Swarm 之间都是不同的。
本地覆盖文件使用现有的`nat`网络，并且它使用在 SQL Server 和 Elasticsearch 中使用的卷的默认规范:
```
networks:
  nd-net:
    external:
      name: nat
volumes: