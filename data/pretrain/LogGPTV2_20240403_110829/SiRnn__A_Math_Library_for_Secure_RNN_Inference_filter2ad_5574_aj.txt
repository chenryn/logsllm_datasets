6:
7:
8:
9:
10: Pb outputs Xb (cid:2)(cid:96) Y (cid:48)
F m,n(cid:48),d1,d2,d3
MatCrossTerm (X0, Y (cid:48)
F n(cid:48),m,d3,d2,d1
MatCrossTerm (Y (cid:48)T
0 , X T
F m
Wrap(X0, X1) to learn (cid:104)WX(cid:105)B.
F n(cid:48)
1 ) to learn (cid:104)WY (cid:48)(cid:105)B.
0 , Y (cid:48)
Wrap(Y (cid:48)
F m,d3,d2,d1
((cid:104)W T
F n(cid:48),d1,d2,d3
((cid:104)WX(cid:105)B,(cid:104)Y (cid:48)(cid:105)n(cid:48)
b + (cid:104)C(cid:105)(cid:96)
Y (cid:48)(cid:105)B,(cid:104)X T(cid:105)m) to learn (cid:104)G(cid:105)m.
) to learn (cid:104)H(cid:105)n(cid:48)
.
b + (cid:104)DT(cid:105)(cid:96)
1 ) and learn (cid:104)C(cid:105)(cid:96).
1 ) and learn (cid:104)D(cid:105)(cid:96).
BitMatMul
BitMatMul
2m ∗(cid:96) (cid:104)H(cid:105)n(cid:48)
b
for b ∈ {0, 1}.
b − 2n(cid:48) ∗(cid:96) (cid:104)GT(cid:105)m
b −
such that (cid:80)
DigDec
i∈[c] di = (cid:96). More formally, F (cid:96),{di}i∈[c]
takes
(cid:104)x(cid:105)(cid:96) as input and outputs (cid:104)zc−1(cid:105)dc−1, . . . ,(cid:104)z0(cid:105)d0 such that
x = zc−1|| . . .||z0. We use this functionality in extracting
digits to be used as input to lookup tables for approxima-
tions for exponential, initial approximation of reciprocal in
sigmoid/tanh and reciprocal square root.
For ease of exposition we ﬁrst consider a simpliﬁed func-
tionality F (cid:96),d
DigDec with d | (cid:96) that outputs c = (cid:96)/d digits of
equal length d and present our protocol for this functionality
in Algorithm 6. Idea is as follows: To compute the shares of
zi, it sufﬁces to compute the carry of lower bits into this digit
when reconstructing shares of x. That is, consider a parsing of
b as yb,c−1|| . . .||yb,0 such that yb,i ∈ {0, 1}d
(cid:96)-bit string (cid:104)x(cid:105)(cid:96)
for all i ∈ [c] for b ∈ {0, 1}. Also, set Yb,i = yb,i|| . . .||yb,0
for all i ∈ [c], b ∈ {0, 1}. Now, observe that zi = y0,i +
y1,i + carryi mod 2d, where carryi = Y0,i−1 + Y1,i−1 (cid:62) 2id.
Alternatively, carryi = wrap(Y0,i−1, Y1,i−1, 2id). In our proto-
col, we compute this carryi using Lemma 1 iteratively (similar
to our protocol for F (cid:96),s
LRS) and the variable ui corresponds to
carryi. The communication complexity of our protocol for the
simpliﬁed setting is (c − 1)(λ(d + 2) + 15d + 20) bits.
it
Also,
(cid:80)
is easy to see that
the above protocol gen-
eralizes to the case of unequal size digits, by parsing
the initial shares appropriately and doing the same com-
putation. The communication for the generalized case is
i∈[c−1](λ(di + 2) + 15di + 20) bits. In contrast, doing a
digit-decomposition using GC would require λ(6(cid:96) − 2c − 2)
bits of communication. For example, for (cid:96) = 32 and d = 8,
our protocol has an improvement of 5.5× over GC.
F. Most Signiﬁcant Non-zero Bit (MSNZB)
For an (cid:96)-bit integer x, MSNZB(x) refers to the index of the
most signiﬁcant non-zero-bit. That is, MSNZB(x) = k ∈ [(cid:96)], if
xk = 1 and xj = 0 for all j > k. Alternatively, MSNZB(x) =
k if and only if 2k (cid:54) x  i. To realize this logic we also compute
whether yi = 0 for all i ∈ [c].
More formally, let ι = log (cid:96) and consider the functionality
F d,(cid:96),i
MSNZB-P for i ∈ [c] that takes as input (cid:104)y(cid:105)d and outputs
(cid:104)u(cid:105)ι such that 2u−id (cid:54) y i vj. Note
(cid:54)= 0 and yj = 0 for all j > i and
that z(cid:48)
0 otherwise. Moreover, at most one z(cid:48)
i is non-zero. Hence,
i z(cid:48)
i. Finally, to output the
we compute MSNZB(x) = ˜z =(cid:80)
i = ui · (1 ⊕ vi) ·(cid:81)
i = ui
if yi
Zeros
MSNZB:
b, c = (cid:96)/d, ι = log (cid:96).
b }i∈[(cid:96)] s.t. zi = 1 if 2i (cid:54)
DigDec((cid:104)x(cid:105)(cid:96)) and learn {(cid:104)yi(cid:105)d}i∈[c].
MSNZB-P((cid:104)yi(cid:105)d) and learn (cid:104)ui(cid:105)ι.
Zeros((cid:104)yi(cid:105)d) and learn (cid:104)vi(cid:105)B.
b = (b ⊕ (cid:104)vi(cid:105)B
i(cid:105)B
b ).
Algorithm 7 Most Signiﬁcant Non-Zero Bit, Π(cid:96),d
Input: For b ∈ {0, 1}, Pb holds (cid:104)x(cid:105)(cid:96)
Output: For b ∈ {0, 1}, Pb learns {(cid:104)zi(cid:105)B
x < 2i+1 and 0 otherwise.
1: P0 & P1 invoke F (cid:96),d
2: for i ∈ {0, . . . , c − 1} do
P0 & P1 invoke F d,(cid:96),i
3:
P0 & P1 invoke F d
4:
For b ∈ {0, 1}, Pb sets (cid:104)v(cid:48)
5:
6: end for
7: P0 & P1 invoke F ι
MUX((cid:104)v(cid:48)
8: For b ∈ {0, 1}, Pb sets (cid:104)wc−1(cid:105)B
9: for i ∈ {c − 2, . . . , 0} do
10:
11:
12:
13: end for
14: For b ∈ {0, 1}, Pb sets (cid:104)˜z(cid:105)ι
15: P0 & P1 invoke F (cid:96)
b =(cid:80)c−1
One-Hot((cid:104)˜z(cid:105)ι) and learn {(cid:104)zi(cid:105)B}i∈[(cid:96)].
P0 & P1 invoke FAND((cid:104)wi+1(cid:105)B,(cid:104)vi+1(cid:105)B) and learn (cid:104)wi(cid:105)B.
P0 & P1 invoke FAND((cid:104)wi(cid:105)B,(cid:104)v(cid:48)
P0 & P1 invoke F ι
i(cid:105)B) and learn (cid:104)w(cid:48)
i(cid:105)B.
i(cid:105)B,(cid:104)ui(cid:105)ι) and learn (cid:104)z(cid:48)
i(cid:105)ι.
c−1(cid:105)B,(cid:104)uc−1(cid:105)ι) and learn (cid:104)z(cid:48)
i(cid:105)ι
i=0(cid:104)z(cid:48)
b.
MUX((cid:104)w(cid:48)
c−1(cid:105)ι.
b = b.
DigDec, c calls each to F d,(cid:96),i
one-hot encoding described above, we invoke the functionality
F (cid:96)
One-Hot that takes as input (cid:104)˜z(cid:105)ι and outputs {(cid:104)zi(cid:105)B}i∈[(cid:96)] such
that zi = 1 for i = ˜z and 0 otherwise. We present our protocol
for F (cid:96)
MSNZB in Algorithm 7, for the special case of d | (cid:96); it is
easy to see that the general case works in a similar manner.
Our protocol makes 1 call to F (cid:96),d
MSNZB-P,
F d
Zeros (with i going from 0 to c − 1) and F ι
MUX, 2c − 2 calls
to FAND and 1 call to F (cid:96)
We implement both F d,(cid:96),i
Zeros using LUTs with
d-bit inputs. Moreover, since these are invoked on same input,
we combine them into a single LUT with entries (ui||vi).
Finally, we implement F (cid:96)
One-Hot using an LUT with ι-bit input
and (cid:96)-bit entries. The exact expression for communication for
d | (cid:96) is given in Table V. The expression for the general
case can be computed similarly using expression in digit
decomposition. Based on empirical ﬁndings, we use d = 8
in our implementation.
One-Hot.
MSNZB-P and F d
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1020