app (com.google.android.tag) runs with the lowest
priority. According to its priority, an app receives the Intent
that carries NDEF (NFC Data Exchange Format) data scanned
by the phone. When the NFC device/tag has no NDEF data (but
data in other formats) on it, the Intent dispatched to the app
just contains the serial number of the device/tag, not the data,
and the recipient is supposed to directly communicate with
the device/tag using the number to get the data. Also, when
multiple apps have the same priority, an “Activity Chooser”
dialogue will be presented to the user for selecting the receiving
app. This process negatively affects users’ experience as every
single time that a tag is discovered a pop-up box will appear,
even for the tag that has been used before [1], [2].
In our research, 5 out of 17 popular NFC apps (e.g., NFC
Tools) we found are used to read and write NFC tags 3. These
apps allow users to store any data on tags, including sensitive
information (e.g., a password for one-touch connection to
a Wi-Fi access point). However, there is no authentication
and encryption protection at all4. We ran an unauthorized
app with the NFC permission to collect data from the tag
whenever our Nexus phone touched it. The “Activity Chooser”
mechanism could offer some protection, but only in the case a
malicious app does not have a higher registered priority than the
legitimate one. This can be a problem, for example, when one
only uses the system NFC app, which has the lowest priority.
Also the approach cannot be used by system administrators to
enforce any mandatory policies. Android is also vulnerable
in the case that a malicious app is in the foreground with
foregroundDispatch enabled. When this happens, the
OS will send the Intent to that app allowing it data access.
Among the rest of the apps, NFC ReTag FREE utilizes the
serial number of an NFC tag to trigger operations. Again, since
the communication through the NFC channel is unprotected, a
malicious app can also acquire the serial number, which leaks
out the operation that the legitimate app is about to perform.
The only NFC app with protection is the NFC Passport Reader.
What it does is to use one’s birth date, passport number and
expiration date to generate a secret key for encrypting other
passport information. The problem is, once those parameters
are exposed, the adversary can recover the key to decrypt the
data collected from the NFC channel.
Discussion. From the 13,500 apps collected, we further note
that any app with the Internet permission (for 93% of them,
each has been installed 1,694,965 times on average, as shown
in Table I) can access any domain. With advertising already a
ubiquitous way for apps to proﬁt, more and more apps request
the INTERNET permission to allow the ad component to work.
This creates privacy risks when such apps are being used in a
business or private network, as they can freely connect to any
internal servers, if proper protection is not in place. Therefore,
we believe that the capability to let users control access to
IP/domains is important. For example, an organization can
require its employees to set policies on their phones to ensure
that internal IPs are only accessed by its enterprise apps, not
Angry Birds.
Also we see nearly 600 third-party apps asking for the
BLUETOOTH or BLUETOOTH_ADMIN permissions, and hav-
ing been installed over 3 billion times (Table I). The presence of
3This is expected as this is one of the major use cases of NFC on Android [4]
4There are more expensive tags such as MIFARE that support encryption
and authentication. The app using those tags needs the user to manually enter
a secret. Clearly, they are not used for protecting the information like Wi-Fi
passwords, which should be passed to one’s device conveniently.
6
these apps, which most likely are not fully trusted, constitutes a
serious threat to private user data stored on different Bluetooth
accessories (e.g., glucose meters [23]), as we have reported
in prior research [28]. Note that so far, there is no effective
way to address this issue. Although a framework-layer defense
mechanism (called Dabinder) has been proposed in our previous
work [28], that comes with inherent limitations, as it can
actually be bypassed by a malicious app with native code.
This is because the protection was implemented within the
Bluetooth service (Section IV-C, Figure 3), while native code
with the BLUETOOTH and BLUETOOTH_ADMIN permissions
can directly talk to the Bluetooth stack to establish a connection
with the external device. In Section IV, we describe a new
technique that provides comprehensive protection and supports
Mandatory Access Control on this channel.
IV. EXTERNAL CHANNEL CONTROL
Our study presented on Section III emphasizes the need for
a more ﬁne-grained control over the channels of communication
with Android external resources, with strong security guarantees.
Ad-hoc solutions on each channel fall short of providing
such guarantees and further suffer from the lack of backward-
compatibility, ﬂexibility, extensibility to future channels and
maintainability.
In this section, we present the ﬁrst design
for protecting Android’s external resources. Our system, called
SEACAT employs a ﬂexible hybrid MAC/DAC approach. It
extends SEAndroid’s MAC to safeguard resources with distinct
resource identiﬁers such as SMS, NFC, Bluetooth and Internet,
and also adds in a DAC module to allow the user and app
developers to specify rules through simple and straightforward
user interaction for all these channels. In addition, its DAC
component allows control of channels even in the absence of
resource identiﬁers. We illustrate this on the Audio channel. We
implemented SEACAT on AOSP 4.4 r12 with an SEAndroid-
powered kernel 3.4.0.
A. Design Overview
Challenges. Our objective is to develop a simple security
mechanism that supports ﬂexible ﬁne-grained mandatory and
discretionary protection of various external resources through
controlling their channels of communication. Our solution
should also be extensible as potential channels, app functional-
ities and developer practices are hard to predict. Furthermore
the system has to be maintainable and easily manageable.
Lastly, our solution should be efﬁcient, backward-compatible
and effective.
However, achieving this goal is by no means a smooth sail.
Here are a few technical challenges that need to be overcome
in our design and implementation.
• Limitations of SEAndroid. Today’s SEAndroid does not model
external resources. Even after it is extended to describe them,
new enforcement hooks need to be added to system functions
scattered across the framework/library layer and the Linux
kernel. For example, the Bluetooth channel on Android 4.4
is better protected on the framework layer, which has more
semantic information, while the control on the Internet should
still happen within the kernel. Supporting these hooks requires
a well though-out design that organizes them cross-layer under
a uniﬁed policy engine and management mechanism for both
MAC and DAC.
• Complexity in integration. The current Android already has
the permission-based DAC and SEAndroid-based MAC. An
additional layer of DAC protection for external resources could
complicate the system and affect its performance5. How to
integrate SEACAT into the current Android in the most efﬁcient
way is challenging.
Design. To address these challenges and meet our objectives,
we have come up with a centralized design that integrates
policy compliance checks from both the framework and the
kernel layer, and enforces MAC and DAC policies within
the same security hooks (Figure 1). It safeguards all known
external resources in a uniﬁed way allowing its easy extension
to new channels. More speciﬁcally, the architecture of SEACAT
includes a policy module, a policy enforcement mechanism
and a DAC policy management service. At the center of the
design is the policy module, which stores security policies
and provides an efﬁcient compliance-check service to both the
framework and the kernel layers. It maintains two policy bases,
one for MAC and the other for DAC. The MAC base is static,
which has been compiled into the Linux kernel in the current
SEAndroid implementation. The DAC base can be dynamically
updated during the system’s runtime. Both of them are operated
by a policy engine that performs compliance checks. The engine
is further supported by two Access Vector Caches (AVCs), one
for the kernel and the other for the framework layer. Each AVC
caches the policies recently enforced using a hash map. Due
to the locality of policy queries, this approach can improve the
performance of compliance checks. Since DAC policies are in
the same format as MAC rules, they are all served by the same
AVC and policy engine.
The enforcement mechanism comprises a set of security
hooks and two pairs of mapping tables. These hooks are placed
within the system functions responsible for the operations on
different channels over the framework layer and the kernel
layer. Whenever a call is made to such a function, its hook
ﬁrst looks for the security contexts of the caller (i.e., app) and
the object (e.g., a Bluetooth address, the Sender ID for a text
message, etc.) by searching a MAC mapping table ﬁrst and
then a DAC table. The contexts retrieved thereby, together with
the operation being performed, are used to query the AVC and
the policy engine. Based upon the outcome, the hook decides
whether to let the call go through. Just like the AVC, each
mapping table has two copies, one for the framework layer
and the other for the kernel. Also, the MAC table is made
read-only while the DAC table can be updated during runtime.
Both the DAC policy base and DAC mapping table are
maintained by the policy management service, which provides
the user an interface to identify important external resources
(from their addresses, IDs, etc.) and the apps allowed to access
them. Also it can check manifest ﬁles of newly installed apps
to extract rules embedded there by the developer (e.g., only
the ofﬁcial Chase app can get the text message from Chase)
to ask for the user’s approval. Those policies and the security
5Note that this new DAC cannot be easily integrated into the permission
mechanism, since the objects there (different Bluetooth devices, web services,
etc.) can be added into the system during runtime.
7
We further modiﬁed libselinux, which is used by
Zygote, to assign the appropriate security context to the process
forked for an app. Our instrumentation within libselinux
enables loading user_seapp_contexts for retrieving the
security context associated with a user-deﬁned policy. Note
that again, when an seinfo tag is found within both
seapp_contexts and user_seapp_contexts, its con-
text is always determined by the former, as the MAC policies
always take precedence. In fact the system will never create a
DAC policy for an external resource that conﬂicts with a MAC
policy. Nevertheless, if a compromised system app manages
to inject erroneous DAC policies, they will never affect or
overwrite MAC policies.
The design of SEACAT also allows the app developer to
declare within an app’s manifest the external resource the app
needs exclusive access to. With the user’s consent, the app
will get a domain and the resource will be assigned a type to
protect their interactions through a DAC rule. This approach
makes declaration of DAC policies convenient: for example,
the ofﬁcial app of Chase can state that only itself and Android
system apps are allowed to receive the text messages from
Chase; a screenshot app using an ADB service can make the
IP address of the local socket together with the port number
of the service off limit to other third-party apps.
External resource labeling. For standard local resources, such
as ﬁles, SEAndroid includes policies that guide the OS to ﬁnd
them and label them properly. For example, the administrator
can associate a directory path name with a type, so that every
ﬁle stored under the directory is assigned that type. The security
context of each ﬁle (which includes its type) is always kept
within its extension, making it convenient to retrieve the context
during policy enforcement. When it comes to external resources,
however, we need to ﬁnd a new way to label their identiﬁers and
store their tags. This is done in our research using a new MAC
policy ﬁle seres_contexts, which links each resource (the
MAC address for Bluetooth, the serial number for NFC, the
Sender ID for SMS and the IP/port pair of a service) to its
security context. The content of the ﬁle is pre-speciﬁed by the
system administrator and is maintained as read-only throughout
the system’s runtime. It is loaded into memory buffers within
the framework layer and the Linux kernel respectively, and
utilized by the security hooks there for policy compliance
checks (Section IV-C).
Labeling external resources for the DAC policies is much
more complicated, as new resources come and go, and the user
should be able to dynamically enable protection on them during
the system’s runtime. SEACAT provides three mechanisms for
this purpose: 1) connection-time labeling, 2) app declaration
and 3) manual setting. Speciﬁcally, connection-time labeling
happens the ﬁrst time an external resource is discovered by
the OS, for example, when a new Bluetooth device is paired
with the phone. Also, as discussed before, an app can deﬁne
the external resource that should not be exposed to the public
(e.g., only system apps and the ofﬁcial Facebook app can get
messages from the Sender ID “FACEBOOK”). Finally, the user
is always able to manually enter new DAC policies or edit
existing ones through an interface provided by the system. Note
that, the user never actually deals with SELinux-like policies.
Those are automatically constructed when the user answers
simple questions such as “Please select the app you downloaded
for this accessory.”, or when she maps the ID “FACEBOOK”
to the Facebook app.
For different channels, some labeling mechanisms work
better than others. Bluetooth and NFC resources are marked
mainly when they are connected to the phone: whenever there
are apps assigned domains but not associated with any Bluetooth
or NFC resources, SEACAT notiﬁes the user once a new
Bluetooth device is paired with the phone or an NFC device is
detected; if such a new device has not been protected by the
MAC policies, the user is asked to select, through an interface,
all apps (those assigned domains) that should be allowed to
access it (while other third-party apps’ access requests should
be denied). After this is done, a DAC rule is in place to mediate
the use of the device. Note that once all such apps have been
linked to external resources, SEACAT will no longer interrupt
the user for device labeling, though she can still use the policy
manager to manually add or modify security rules.
In our implementation, we modiﬁed a few system apps and
services to accommodate this mechanism. For Bluetooth, we
changed Settings, the Bluetooth system app and service.
When the Settings app helps the user connect to a newly
discovered Bluetooth device, it checks the device’s MAC
address against a list of mandatory rules. If the address is
not on the list, the Bluetooth service pops an interface to let
the user choose from the existing apps assigned domains but not
paired with any resources. This is done through extending the
RemoteDevices class. The MAC address labeled is kept in
the ﬁle user_seres_contexts, together with its security
context. This ﬁle is uploaded into memory buffers (for both
the kernel and the framework layer) for compliance checks.
For NFC, whenever a new device is found, Android sends an
Intent to the app that registers with the channel III-B. In our
implementation, we instrumented the NFC Intent dispatcher to
let the user label the device and specify the apps allowed to
use it when the dispatcher is working on such an Intent. This is
important when the NFC device is security critical, as now the
control is taken away from the potentially untrusted apps and
delegated to the user (if no MAC mechanism is in place) during
runtime. Furthermore, by providing this mechanism, the system
can protect itself, and it is deprived of any dependency on
end-to-end authentication between apps and external devices.
Lastly, by utilizing the association of apps with resources
speciﬁed in MAC and DAC policies, the user can read already
labeled tags directly, avoiding unnecessary interaction with
the “Activity Chooser” mechanism every single time an NFC
device is discovered, which immensely improves the usability
of the reading-an-NFC-device task. Again, the result of the
DAC labeling is kept in user_seres_contexts.
External resources associated with SMS and Internet are
more convenient to label through app declaration and manual
setting. As discussed before, an app can request exclusive
access to the text messages from a certain SMS ID. The user
can also identify within the interface of our policy manager a
set of SMS IDs (32665 for “FACEBOOK”, 24273 for “Chase”,
etc.) to make sure that only com.android.sms can get
their messages6. Also, there are cases where manual setting is
needed for Internet. For example an organization can require its
employees to set policies on their phones to ensure that internal
6The SMS IDs for services are public. It is easy to provide a list of well-
known ﬁnancial, social-networking services to let the user choose from.
9
that involve our instrumentations, and compared it with the
delay observed from the baseline (i.e., the unprotected Nexus 4).
Table V shows examples of the operations used in our research.
In the experiments, we conducted 10 trials for each operation
to compute its average duration. Note that comparison with
SEAndroid [30] is moot, as the hooks we placed to enforce
control over external resources are not present there. Thus the
operations we measured will provide the same result whether
on AOSP 4.4 or SEAndroid.
Speciﬁcally, we recorded the installation time for a new
app, which involves assignment of domains. The time interval
measured in our experiment is that between the moment
the PackageManager identiﬁes the user’s “install” click
and when the BackupManagerService gets the Intent
for the completion of installing an app with 3.06 MB.
For Bluetooth, both the pairing and connection operations
were timed. Among them, the pairing operation recorded
starts from the moment it was triggered manually and ends
when the OnBondStateChanged callback was invoked by
the OS. For connection, we just looked at the execution
time of BluetoothSocket.connect. Regarding SMS, we
measure the time from when a SMS message is received
(processMessagePart) to when the message is delivered
to all the interested receivers and the process of querying the
SMS content provider. The Internet-related overhead was simply
found out from the network connection time.
The amount of time it takes to dispatch an NFC message
is related to the status of the target app: when it was in the
foreground, we measured the interval between dispatchTag
and the completion of the NfcRootActivity; otherwise,
our timer was stopped when setForegroundDispatch
was called. For the Audio channel, we recorded the time for
the call AudioRecord.startRecording to go through.
Results. The results of this evaluation are presented in Table V.
As we can see from the table, the delays introduced by
SEACAT are mostly negligible. Speciﬁcally, the overhead in
the installation process caused by assigning domains to an
app was found to be as low as 49.52 ms. Policy enforcement
within different security hooks (with policy checks) happened
almost instantly, with a delay sometimes even indistinguishable
from the baseline. In particular, in the case of NFC, even when
the unauthorized app with the NFC permission was running
in the foreground, our implementation almost instantly found
out its security context and denied its access request. The only
operation that brings in a relatively high overhead is labeling
an external device. It involves assigning a type to the resource,
saving the label to user_seres_contexts, updating the
DAC mapping table accordingly and even changing the DAC
policy base to enable authorized apps’ access to the resource
when necessary. On average, those operations took 189.44 ms.
Note that this is just a one-time cost, as long as the user does
not change the type given to a resource. An exception is Audio,