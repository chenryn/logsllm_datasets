and by verifying the signature against the provided
public key. Upon successful veriﬁcation, the node
updates its routing table with S’s address and the
forwarding node’s address. If the message is not
addressed to it, it rebroadcasts the RREQ. When D
receives the RREQ, it constructs a signed route reply
message (RREP) addressed to the source node S,
which includes the D’s public key, as shown in
Fig. 1. D then unicasts the RREP back to the neigh-
boring node from which the RREQ was received.
Upon receiving a RREP, any routing node veriﬁes
the destination D’s IP address and signature against
the included public key, updates its own routing
table for D and routes it towards S. If a route entry
for S does not exist or has expired, the message is
dropped and an error message is sent back to the
previous hop along the incoming path of
the
aﬀected packet. If S does not receive any reply in
a predetermined amount of time, it rebroadcasts
new route requests. Maintenance of local connectiv-
ity mechanism is optionally achieved by periodically
broadcasting Hello messages. As mentioned
earlier, in our implementation these messages are
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
585
Fig. 1. SecAODV message formats.
signed and contain the sender’s public key for
authentication and message integrity veriﬁcation.
For route requests (RREQ), the signed material
contains: (i) the route request identiﬁer, (ii) the
destination sequence number, (iii) the originator
sequence number, (iv) the destination IP, and (v)
the originator IP. ‘‘Destination’’ is the address of
the node for which the route is requested, and ‘‘orig-
inator’’ is the address of the node that requested the
route.
For route replies (RREP), the signed material
contains: (i) the destination sequence number, (ii)
the lifetime, (iii) the destination IP, and (iv) the orig-
inator IP. ‘‘Destination’’ is the address of the node
for which the route is supplied, and ‘‘originator’’
is the address of the node that requested the route.
In the AODV protocol if an intermediate node
has a valid route to the destination in its own rout-
ing table, it can respond to that RREQ with its own
RREP, which speeds up the setup time. However in
order to prevent any man-in-the-middle attacks, in
the SecAODV implementation we require that the
RREP message be signed by the destination node.
When a message is received, the node (S, D or
neighbor) ﬁrst veriﬁes that the IP address is derived
from the presented public key, verifying in this way
the binding between the IP and the public key. Sec-
ondly, if the IP address is validated successfully, the
destination node veriﬁes the packet’s signature, thus
verifying that the packet came from the listed IP
address and not from an adversary that is mali-
ciously masquerading as the listed IP address. In
586
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
the SecAODV implementation, the IP address and
packet veriﬁcation is implemented for all message
types that might trigger routing table modiﬁcations
(route requests, route replies, hello messages, route
errors, etc.).
5. Intrusion detection in MANETs and prototype
implementation
5.1. Assumptions and observations
We assume that interfaces have a promiscuous
mode to monitor traﬃc of neighboring nodes. Key
lengths are chosen to be suﬃciently long, making
it infeasible to compute or guess a private key
knowing only the public key, but on the other hand
do not make signature computation and veriﬁcation
computationally expensive for the mobile device. It
is also assumed that normal packet drop rates can
be dynamically determined and thresholds estab-
lished to distinguish malicious behavior from trust-
worthy conduct. Thresholds can be set to drop rates
that are low enough that impact is negligible, mak-
ing such an attack ineﬀective. We do not, however,
require MAC addresses to be unforgeable, since the
SUCV identiﬁers provide secure bindings between
IPv6 addresses and public keys. Identity is not
determined by MAC addresses alone. Spooﬁng of
IPv6 addresses and MAC addresses can be detected,
since signature veriﬁcation will fail unless private
keys have been compromised.
5.2. Design considerations
5.2.1. Universal deployment
A MANET IDS should be able to function on
any mobile device participating in the MANET,
and not require additional special or superior
capabilities as compared to its peers. The IDS
must be universally deployable and should ideally
be able to dynamically adapt to existing capabilities
of a device to maximize its eﬀectiveness and
eﬃciency.
5.2.2. Scalable monitoring
The eﬀectiveness of a MANET IDS will depend
on its scalability. Snooping on all packet traﬃc is
prohibitively expensive
resource-con-
strained mobile devices, especially when number of
nodes within radio-range increase. Dense networks
or larger radio-ranges of new wireless technologies
will have a large number of neighbor nodes.
for most
5.2.3. Platform for a collaborative IDS
Attacks by colluding adversaries are far more
complex and diﬃcult to detect. They can only be
detected by collaborative IDS schemes.
Individual nodes with IDS deployments can only
monitor within their radio-range. It is necessary to
aggregate such data to detect anomalies and mali-
cious colluding activity in the network through peer
interactions. The IDS should enable collection of
local audit data. Detection of colluding adversaries
is beyond the scope of this work, however aggre-
gated information of observed (mis)behavior from
a majority of good nodes will provide the necessary
foundation for such a collaborative IDS.
In order to implement a truly robust IDS, there
will be a need to aggregate data from multiple archi-
tectural layers. Alarms and thresholds placed at the
network layer can report on the detection of routing
misbehaviors such as observed incorrect packet for-
warding. The MAC layer may alarm on nodes that
send malicious CTS messages designed to deny
other nodes network access. The Transport Layer
may contain signatures for known attacks such as
the SYN ﬂood.
Delegating collaboration and trust issues to the
application level, the IDS agent should enable col-
lection of local audit data. The notion of trust is
determined through an aggregation of information
collected from observing multiple layers providing
input for evaluation algorithms at the Application
Layer. Collaboration not only comes from within
the node, but can be shared between nodes as trust
and reputation values that are interchanged between
nodes throughout the network.
5.2.4. Enabling a protocol speciﬁc IDS
The IDS should allow monitoring of packet traf-
ﬁc for speciﬁc protocols. Speciﬁc protocols behave
in a predictable pattern. Intrusion detection makes
use of these patterns to spot abnormal behavior
and in some instances speciﬁc signatures indicating
malicious activity. Some protocols are more likely
than others to be used with malicious intent. For
example, in TCP a SYN ﬂood can use up available
ports on the target machine eﬀectively denying
service.
5.3. Scope of IDS
In our implementation approach, we focus on
detecting intrusions based on anomalous behavior
of neighboring nodes. Each node monitors particu-
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
587
lar traﬃc activity within its radio-range. An audit
log of all locally detected intrusions is maintained
as evidence of misbehavior. Intrusions are associ-
ated with pairs of IPv6 and corresponding MAC
addresses. Local audit data can then be aggregated
by some centralized/distributed algorithm, to detect
ongoing attacks. Such collective analysis is however
subject to Trust issues, since the problem of identiﬁ-
cation and authentication remains. Rather, in our
current implementation, we focus only on the local
detection and response part, to provide a founda-
tion for such a collaborative IDS. By virtue of the
SUCV identiﬁers, we can conﬁdently identify the
misbehaving nodes and associate intrusions with
them.
5.3.1. Proposed approach
We detect intrusions by neighboring nodes by
their deviation from known or expected behavior.
When nodes act as forwarding nodes, oﬀering
routes to other destinations, it is expected that those
node actually forward data packets, once a route
through them is actually setup. Nodes are expected
to retransmit the message without modifying the
payload towards the intended recipient. We can cat-
egorize packet
traﬃc into control packets that
exchange routing information, and data packets.
Depending on what routing protocol is being used,
routing information may or may not be contained in
the control packets, e.g., in DSR the routing infor-
mation is present in the data packets; AODV on
the other hand, does not have such information.
Regardless of how routes are actually setup, data
packets should not be modiﬁed, with the exception
of some ﬁelds like hopcount in the IPv6 header. A
node can thus monitor most of the packet traﬃc
of its neighbors in promiscuous mode, while they
are in radio-range. A node receiving packets but
not forwarding them can be detected. We monitor
AODV control messages and data stream packets
only. We do not monitor control messages for faith-
ful retransmissions. Since control messages are
signed by the senders, modiﬁcations will be detected
in the signature veriﬁcation at the receiver.
5.3.2. Intrusion response
and deny
The purpose of intrusion detection is to isolate
misbehaving nodes
them network
resources. Nodes may be maliciously dropping
packets or may have a genuine problem that
prevents them from forwarding packets. Chroni-
cally faulty or malicious behavior, however, can be
distinguished from transient failures by monitoring
their activity over a period of time and setting
thresholds. Such nodes are then deemed malicious
and denied network resources. This can be done in
two ways viz. unilaterally ignoring all traﬃc to or
from a malicious node, and calling a vote on other
members in the MANET to decide upon the evic-
tion of a suspected node from the MANET [9].
Though this is a design goal, the collective response
part has not yet been implemented.
5.4. Stateful packet monitoring
We use the packet capture library, libpcap [36–
38], for capturing packets. As shown in Fig. 2a the
captured raw packets are ﬁltered to get only IPv6
using the protocol header ﬁeld in the MAC header.
Further ﬁltering is used to separate AODV and TCP
packets. We restrict ourselves to monitoring TCP
data streams.
5.4.1. Discovering neighbors
The AODV control messages include special kind
of RREP messages called Hello messages. These
Fig. 2. Intrusion detection: (a) packet ﬁltering and monitoring
and (b) monitoring traﬃc in radio range.
588
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
messages are broadcast by the nodes at periodic
intervals. Nodes can discover their neighbors using
these messages. Also, if a neighbor moves away,
the node will cease to receive it’s neighbor’s Hello
messages and thus update its routing tables. We use
these messages to build neighbor tables, which con-
sist of tuples of the form (MAC address, IPv6
address, drop_count, route_state), as
2a. (MAC address, IPv6
shown in Fig.
address) constitute the unique key. This table is
kept updated by monitoring Hello messages and
RERR messages. More details on route maintenance
and timeouts can be found in [13]. Data traﬃc of
active neighbor nodes is monitored.
5.4.2. Monitoring data traﬃc
As shown in Fig. 2b we monitor data packets
that need to be forwarded. Referring to Fig. 2b,
consider nodes A, B and C within radio-range of
each other. Without loss of generality, let C be the
monitoring node, and B be the target of monitoring.
A is sending a datagram via B to some other desti-
nation. B is acting as an intermediary node forward-
ing packets on behalf of A. Consider the datagram
dgram_in sent by A to B. dgram_in will have
MAC source address of A, MAC destination
address of B. But the destination IPv6 address will
not be that of B, since B is not the intended recipient
of dgram_in. Now consider the datagram that B for-
wards after receiving dgram_in. dgram_out will have
the MAC source address of B, however the source
IPv6 address in the datagram will be that of A,
and not B. In fact, dgram_in is a datagram that B
is expected to forward and dgram_out will be that
expected datagram sent out by B, onward to its
intended recipient. Packets of speciﬁc protocols
can be selectively monitored using the protocol ﬁeld
in the IPv6 header for ﬁltering. C being the monitor-
ing node, will ﬁrst record dgram_in and watch for B
to transmit dgram_out. The processing and queuing
delay at B, may vary depending on congestion and
CPU load on B. Under normal circumstances, B
will transmit dgram_out within a reasonable amount
of time. If B fails to do so, then C can infer that B
must have dropped the packet. Another possibility
is that B mangles the packet. When matching dgra-
m_in and dgram_out for a particular protocol it is
important to match all ﬁelds that should not be
changed by B. If B maliciously mangles the packet,
the original dgram_in will not match any dgram_out.
C detects mangling by looking at the TCP sequence
number, checksum and byte count.
5.5. Practical considerations
For the IDS to be eﬀective it has to be scalable. A
mobile device can get overwhelmed quickly if it
starts monitoring all packets in its neighborhood
in promiscuous mode. A large amount of data traf-
ﬁc in dense networks cannot be eﬃciently moni-
tored by a resource-constrained mobile device. It
may be possible in certain situations to have a list
of suspects that can be watched instead of all the
nodes in the neighborhood. Another possibility is
to monitor a random choice of neighbor nodes.
Alternatively, random packets can be watched to
make the IDS scalable. Also the monitoring node
needs to have eﬃcient data-structures to monitor
traﬃc eﬃciently in promiscuous mode. We also
have to account for the buﬀering capacity of nodes.
Our experiments showed that during periods of con-
gestion, or route changes, a large number of packets
get buﬀered by intermediate nodes. Buﬀered packets
are those that a node will watch for to be retrans-
mitted. The mobile device is constrained in how
many packets it can watch for, so a timeout is
associated with each packet being watched. On a
timeout, the monitoring node deems such packets
to be dropped. However, if these timeouts are too
short, the IDS will yield a large number of false
positives. We use thresholds to distinguish between
intrusions and normal behavior. Thresholds can
be used to account for temporary anomalous behav-
ior due to congestion.
5.6. Threshold-based detection
Using threshold-based detection will potentially
allow a malicious node to go unnoticed if it drops
a few packets intermittently. However, the damage
caused by such intermittent packet drops will be
acceptable and will not signiﬁcantly aﬀect
the
MANET. If a node exceeds a small threshold of
such allowed ‘‘misbehavior’’ it will be detected and
classiﬁed as intrusive. An attacker cannot signiﬁ-
cantly disrupt communication while staying under
the detection-thresholds, however will be detected
if the threshold is crossed, i.e. the impact of such
an attack will be negligible by choosing an appropri-
ate threshold.
Thresholds allow for shorter timeouts, for pack-
ets being watched, since most packets are expected
to be retransmitted immediately. In periods of
congestion, a node may queue packets (to be
retransmitted later) instead of transmitting them
A. Patwardhan et al. / Ad Hoc Networks 6 (2008) 578–599
589