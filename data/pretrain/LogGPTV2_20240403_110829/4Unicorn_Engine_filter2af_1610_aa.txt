# 挑战4个任务：迅速上手Unicorn Engine
##### 译文声明
本文是翻译文章，文章原作者 eternal，文章来源：eternal.red
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在这篇教程中，您将通过解决实际问题来练习如何使用Unicorn
Engine。一共有4个练习，其中我将会详细讲解第一个练习，而对于其他练习我们会提供提示和解决方案供大家阅读。
### FAQ：
#### 1、什么是Unicorn Engine？
Unicore
Engine是一个模拟器，尽管并不太常见。通过该模拟器，您不用模仿整个程序或系统。这一模拟器不支持系统调用，必须先映射内存，并手动将数据写入到内存中，然后才能从指定的地址开始模拟。
#### 2、这篇文章中的内容可以用于什么场景？
我们可以在不创建有害进程的前提下，从恶意软件中调用一个特定的函数。此外还可以用于CTF比赛，用于基于漏洞注入的自动软件测试，也可以用于能预测未来的gdb插件（例如实现进一步的跳转），还可以用来仿真混淆的代码。
#### 3、要开始本教程的练习，我需要安装什么？
需要安装Unicorn Engine，并连接Python。此外，还需要一个反汇编工具。
## 任务1
该任务来自hxp CTF 2017，名称为斐波那契，地址为： 。  
二进制文件可以在这里下载： 。  
当我们运行这个程序的时候，我们可以注意到，它会计算并打印我们的Flag，但这个过程非常缓慢，并且Flag的计算过程会随着字节的增多变得越来越慢。  
该题的Flag为：hxp{F。  
这就意味着，我们需要对程序进行优化，以在合理的时间内得到Flag。  
在IDA
Pro的帮助下，我们将代码反编译成像C语言一样的伪代码。尽管代码最终并不一定能被正确地反编译，但我们通过这一过程，可以对代码的具体功能有一定的了解。
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      void *v3; // rbp@1
      int v4; // ebx@1
      signed __int64 v5; // r8@2
      char v6; // r9@3
      __int64 v7; // r8@3
      char v8; // cl@3
      __int64 v9; // r9@5
      int a2a; // [sp+Ch] [bp-1Ch]@3
      v3 = &encrypted_flag;
      v4 = 0;
      setbuf(stdout, 0LL);
      printf("The flag is: ", 0LL);
      while ( 1 )
      {
        LODWORD(v5) = 0;
        do
        {
          a2a = 0;
          fibonacci(v4 + v5, &a2a);
          v8 = v7;
          v5 = v7 + 1;
        }
        while ( v5 != 8 );
        v4 += 8;
        if ( (unsigned __int8)(a2a > 1) & 0x55555555);
          v6 = ((result - ((result >> 1) & 0x55555555)) >> 2) & 0x33333333;
        }
        else
        {
          v3 = fibonacci(i - 2, a2);
          result = v3 + fibonacci(i - 1, a2);
          v5 = result - ((result >> 1) & 0x55555555);
          v6 = ((result - ((result >> 1) & 0x55555555)) >> 2) & 0x33333333;
        }
        v7 = v6 + (v5 & 0x33333333) + ((v6 + (v5 & 0x33333333)) >> 4);
        *v2 ^= ((BYTE1(v7) & 0xF) + (v7 & 0xF) + (unsigned __int8)((((v7 >> 8) & 0xF0F0F) + (v7 & 0xF0F0F0F)) >> 16)) & 1;
      }
      else
      {
        *a2 ^= 1u;
        result = 1;
      }
      return result;
    }
下面是主函数的汇编代码：
    .text:0x4004E0 main            proc near               ; DATA XREF: start+1Do
    .text:0x4004E0
    .text:0x4004E0 var_1C          = dword ptr -1Ch
    .text:0x4004E0
    .text:0x4004E0                 push    rbp
    .text:0x4004E1                 push    rbx
    .text:0x4004E2                 xor     esi, esi        ; buf
    .text:0x4004E4                 mov     ebp, offset unk_4007E1
    .text:0x4004E9                 xor     ebx, ebx
    .text:0x4004EB                 sub     rsp, 18h
    .text:0x4004EF                 mov     rdi, cs:stdout  ; stream
    .text:0x4004F6                 call    _setbuf
    .text:0x4004FB                 mov     edi, offset format ; "The flag is: "
    .text:0x400500                 xor     eax, eax
    .text:0x400502                 call    _printf
    .text:0x400507                 mov     r9d, 49h
    .text:0x40050D                 nop     dword ptr [rax]
    .text:0x400510
    .text:0x400510 loc_400510:                             ; CODE XREF: main+8Aj
    .text:0x400510                 xor     r8d, r8d
    .text:0x400513                 jmp     short loc_40051B
    .text:0x400513 ; ---------------------------------------------------------------------------    .text:0x400515                 align 8
    .text:0x400518
    .text:0x400518 loc_400518:                             ; CODE XREF: main+67j
    .text:0x400518                 mov     r9d, edi
    .text:0x40051B
    .text:0x40051B loc_40051B:                             ; CODE XREF: main+33j
    .text:0x40051B                 lea     edi, [rbx+r8]
    .text:0x40051F                 lea     rsi, [rsp+28h+var_1C]
    .text:0x400524                 mov     [rsp+28h+var_1C], 0
    .text:0x40052C                 call    fibonacci
    .text:0x400531                 mov     edi, [rsp+28h+var_1C]
    .text:0x400535                 mov     ecx, r8d
    .text:0x400538                 add     r8, 1
    .text:0x40053C                 shl     edi, cl
    .text:0x40053E                 mov     eax, edi
    .text:0x400540                 xor     edi, r9d
    .text:0x400543                 cmp     r8, 8
    .text:0x400547                 jnz     short loc_400518
    .text:0x400549                 add     ebx, 8
    .text:0x40054C                 cmp     al, r9b
    .text:0x40054F                 mov     rsi, cs:stdout  ; fp
    .text:0x400556                 jz      short loc_400570
    .text:0x400558                 movsx   edi, dil        ; c
    .text:0x40055C                 add     rbp, 1
    .text:0x400560                 call    __IO_putc
    .text:0x400565                 movzx   r9d, byte ptr [rbp-1]
    .text:0x40056A                 jmp     short loc_400510
    .text:0x40056A ; ---------------------------------------------------------------------------    .text:0x40056C                 align 10h
    .text:0x400570
    .text:0x400570 loc_400570:                             ; CODE XREF: main+76j
    .text:0x400570                 mov     edi, 0Ah        ; c
    .text:0x400575                 call    __IO_putc
    .text:0x40057A                 add     rsp, 18h
    .text:0x40057E                 xor     eax, eax
    .text:0x400580                 pop     rbx
    .text:0x400581                 pop     rbp
    .text:0x400582                 retn
    .text:0x400582 main            endp
fibonacci函数的汇编代码如下：
    .text:0x400670 fibonacci       proc near               ; CODE XREF: main+4Cp
    .text:0x400670                                         ; fibonacci+19p ...
    .text:0x400670                 test    edi, edi
    .text:0x400672                 push    r12
    .text:0x400674                 push    rbp
    .text:0x400675                 mov     rbp, rsi
    .text:0x400678                 push    rbx
    .text:0x400679                 jz      short loc_4006F8
    .text:0x40067B                 cmp     edi, 1
    .text:0x40067E                 mov     ebx, edi
    .text:0x400680                 jz      loc_400710
    .text:0x400686                 lea     edi, [rdi-2]
    .text:0x400689                 call    fibonacci
    .text:0x40068E                 lea     edi, [rbx-1]
    .text:0x400691                 mov     r12d, eax
    .text:0x400694                 mov     rsi, rbp
    .text:0x400697                 call    fibonacci
    .text:0x40069C                 add     eax, r12d
    .text:0x40069F                 mov     edx, eax
    .text:0x4006A1                 mov     ebx, eax
    .text:0x4006A3                 shr     edx, 1
    .text:0x4006A5                 and     edx, 55555555h
    .text:0x4006AB                 sub     ebx, edx