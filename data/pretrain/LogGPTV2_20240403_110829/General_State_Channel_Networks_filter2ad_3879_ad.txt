### Channel Network

In the following discussion, unless it is essential to distinguish between a ledger state channel and a virtual state channel, we will refer to both as simply "state channels" (denoted by γ).

#### 1. Consensus on Creation
A state channel γ can only be successfully established if all users of γ unanimously agree to its creation.

#### 2. Consensus on Updates
For a contract instance within a state channel γ, any updates (including the initial creation of the contract) can only be executed if both end-users of γ mutually agree to the changes.

#### 3. Guarantee of Execution
An honest end-user in a ledger state channel γ can execute a function \( f \) of an existing contract instance with input value \( z \) in any round \( \tau_0 \), even if the other end-user is dishonest. This property also applies to virtual state channels, but with the condition that \( \tau_0 > 0 \) must be requested by the other party. The time required for the execution of a contract instance in a state channel of length \( i > 0 \) is represented by two functions: 
- \( \text{TimeWait}(i) \): The maximum number of rounds needed to wait for the execution.
- \( \text{TimeExe}(i) \): The maximum number of rounds needed to complete the execution.

Both functions are of the order \( O(\Delta \cdot i) \). For detailed definitions and their relationships, see [13].

### Channel Space
Each entity maintains a set of all known state channels, referred to as the "channel space" and denoted by Γ. The channel space can be interpreted as a function that, given an identifier \( id \in \{0, 1\}^* \), returns the corresponding state channel if it exists, or \( \bot \) otherwise. Whenever a new contract instance is created or an existing one is executed in any state channel within Γ, the channel space must be updated. To facilitate this, we define an auxiliary procedure, `UpdateChanSpace`.

**Procedure: UpdateChanSpace**
- **Input**: 
  - Channel space Γ
  - Channel identifier \( id \)
  - Contract instance identifier \( cid \)
  - New contract instance \( \nu \)
  - Values \( addA \) and \( addB \) representing the required change in cash values for the state channel with identifier \( id \)
- **Output**: Updated channel space Γ
- **Steps**:
  1. Set \( \Gamma(id).cspace(cid) := \nu \)
  2. Add \( addA \) coins to \( \Gamma(id).cash(A) \)
  3. Add \( addB \) coins to \( \Gamma(id).cash(B) \)

For a formal definition, see [13].

### Ideal Functionality
The ideal functionality for state channels is denoted by \( F_{\mathcal{L}}(\Delta, i, C) \), where:
- \( i \in \mathbb{N} \) is the maximum length of a state channel that can be opened.
- \( C \) is the set of contract codes that can be instantiated in the state channels.
- \( \mathcal{L} \) is the global ideal functionality (the ledger).

\( F_{\mathcal{L}}(\Delta, i, C) \) communicates with parties from the set \( P \) and maintains a channel space Γ, which is initially empty.

Since the inputs and messages sent by the parties do not contain private information, the ideal functionality forwards all received messages to the simulator Sim. Specifically, upon receiving a message \( m \) from party \( P \), the ideal functionality sends \( (P, m) \) to the simulator. The simulator's role is to instruct the ideal functionality to make changes to the ledger and to output messages to the parties in the correct round, based on the adversary's actions in the real world.

**Abbreviation**: "Wait for at most \( \Delta \) rounds to remove/add \( x \) coins from \( P \)'s account on the ledger" means the ideal functionality waits for instructions from the simulator, which will occur within \( \Delta \) rounds, and then requests changes to \( P \)'s account on the ledger.

### State Channel Creation
The \( F_{\mathcal{L}}(\Delta, i, C) \) functionality includes two procedures for creating state channels:
- One for ledger state channels
- One for virtual state channels

For a detailed formal definition and proof of security and efficiency properties, see [13].