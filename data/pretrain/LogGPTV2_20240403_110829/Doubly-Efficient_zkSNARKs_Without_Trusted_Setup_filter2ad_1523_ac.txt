two evaluations of ˜Vx; the “reducing from two points to one point”
technique requires only one. Since evaluating ˜Vx is typically a
bottleneck for the veriﬁer [104, §3.3], eliminating the second
evaluation is worthwhile even though it slightly increases the
size of P’s ﬁnal message (and thus the proof size; see §4).
We give pseudocode for Gir++ in the full version [106, Appx. E].
Gir++’s eﬃciency and security are formalized in the following
theorem, which can be proved via a standard analysis [49].
Theorem 1. The interactive proof Gir++ satisﬁes the following
properties when applied to a layered arithmetic circuit C of
fan-in two, consisting of N identical sub-computations, each
of depth d, with all layers of each sub-computation having
930
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
width at most G. It has perfect completeness, and soundness
error at most ((1 + 2 log G + 3 log N) · d + log G)/|F|. After
a pre-processing phase taking time O(dG), the veriﬁer runs
in time O(|x| + |y| + d log NG), and the prover runs in time
O(|C| + d · G · log G). If the sub-AC has a regular wiring pattern
as deﬁned in [35], then the pre-processing phase is unnecessary.
4 Compiling Gir++ into a ZK argument
In this section, we describe a straightforward application of
“commit-and-prove” techniques [8, 37] (§1) to Gir++ (§3.2). The
result is a public coin, perfect ZK argument “of knowledge”
for AC satisﬁability (the knowledge property is formalized via
witness-extended emulation; §3.1). In Sections 5 and 6, we
develop substantial eﬃciency improvements; in Section 7, we
apply the Fiat-Shamir heuristic [41] to make it non-interactive.
Building blocks. This section uses abstract commitments having
a homomorphism property (§3.1). We also make black-box use
of three sub-protocols, which operate on commitments:
• proof-of-opening(C) convinces V that P can open C.
• proof-of-equality(C0, C1) convinces V that C0 and C1 commit
to the same value, and that P can open both.
• proof-of-product(C0, C1, C2) convinces V that C2 commits to
the product of the values committed in C0 and C1, and that P
can open all three.
In Appendix A, we give concrete deﬁnitions of the above protocols
in terms of Pedersen commitments [80].
Protocol overview. This protocol diﬀers from Gir++ in three
ways. First, it adds an initial step in which P commits to w
such that C(x, w) = y. Second, P replaces all of its messages in
Gir++ with commitments to those messages. Third, P convinces
V that its committed values pass all of V’s checks in Gir++
using the homomorphism property of the commitments and the
above sub-protocols. The steps below correspond to the steps of
Gir++ (§3.2); we describe only how the protocols diﬀer.
Step 0. (This is a new step.) P sends commitments to each
element of w ∈ F
(cid:4). P and V execute proof-of-opening for each.
Step 1. As in Gir++, V computes ˜Vy(q(cid:16), q). Afterwards, V
computes C0 = Com( ˜Vy(q(cid:16), q); 0).
Step 2. As in Gir++, this step comprises one sum-check and
one mini-protocol per layer of C. We now review the sum-check
protocol, and then describe how P and V execute the sum-check
and mini-protocols “underneath the commitments.”
Review of the sum-check protocol. We begin by describing the
ﬁrst layer sum-check protocol in Gir++ (others are similar), which
reduces ˜Vy(q(cid:16), q) to a claim about ˜V1(·). In the ﬁrst round of the
sum-check protocol, P sends a univariate polynomial s1(·) of
degree 3. V checks that s1(0) + s1(1) = ˜Vy(q(cid:16), q), and then sends
a random ﬁeld element r1 to P. In general, in round j of the
sum-check protocol, P sends a univariate polynomial sj (which
is degree 3 in the ﬁrst bN rounds and degree 2 in the remaining
rounds [97, 104]). V checks that sj(0) + sj(1) = sj−1(rj−1), then
sends a random ﬁeld element rj to P.
We write the vector of all rj’s chosen by V in the jlast =
bN + 2bG rounds of the sum-check protocol as (r1, . . . , rjlast
) ∈
c0, j
(cid:14) δc2, j
(cid:14) δr2
j
c2, j
c1, j
j
(rjlast
(cid:14) δc1, j
(cid:14) δrj
Fb N +2bG ; let r(cid:16) denote the ﬁrst bN entries of this vector, rL
denote the next bG entries, and rR denote the ﬁnal bG entries.
In the last round, P sends v0 and v1 (which it claims are equal
to ˜V1(r(cid:16), rL) and ˜V1(r(cid:16), rR); §3.2). V ﬁrst checks that
(cid:4)
˜add1(q, rL, rR) · (v0 + v1) +
˜mult1(q, rL, rR) · v0 · v1
) = ˜eq(q(cid:16), r(cid:16)) ·(cid:3)
(rjlast
sjlast
←Com(c1, j), δc2, j
←Com(c2, j), and δc3, j
to convince V that
(cid:16))· ˜add1(q,r1,r2) (cid:14) Z ˜eq(q
(cid:16))·
(cid:16),r
V then checks P’s claims about v0 and v1 by invoking a mini-
protocol (§3.2) and engaging P in another sum-check at layer 2.
ZK sum-check protocol. In round j of the sum-check, P com-
mits to sj(t) = c0, j + c1, jt + c2, jt2 + c3, jt3, via δc0, j
←Com(c0, j),
←Com(c3, j), and
δc1, j
P and V execute proof-of-opening for each one. Now P con-
vinces V that sj(0) + sj(1) = sj−1(rj−1). Notice that if V holds
commitments Com(sj−1(rj−1)) and Com(sj(0)+sj(1)), P can use
proof-of-equality to convince V that the above equation holds.
Further, V can use the homomorphism property to compute the
required commitments: for sj(0) + sj(1) = 2c0, j + c1, j + c2, j + c3, j,
V computes δ2
(cid:14) δc3, j . Similarly, for sj−1(rj−1)
V computes δc0, j
(cid:14) δr3
c3, j .
The ﬁrst sum-check round (j = 1) is an exception to the above:
rather than a commitment to s0, V holds a commitment to a
value that purportedly equals s1(0) + s1(1). For the sum-check
invocation at layer 1, this value is C0, which V computed in Step
1. For subsequent layers, the value is the result of the preceding
mini-protocol invocation, which we discuss below.
In the ﬁnal round jlast, V computes a commitment W
) as described above. P then sends commit-
to sjl a s t
ments X, Y, and Z to v0, v1, and v0 · v1, and uses
the committed val-
proof-of-product
relation. Finally, V computes
ues satisfy this product
Ω←(X (cid:14) Y) ˜eq(q
˜mult1(q,r1,r2) and P uses
proof-of-equality to convince V that W and Ω commit to the
same value.
ZK mini-protocols. For random-linear-combination, V computes
Com(μ0v0 + μ1v1) = X μ0 (cid:14)Y μ1; this is the purported Com(s1(0)+
s1(1)) for the next sum-check invocation.
To execute reducing-from-two-points-to-one-point, P commits
to the coeﬃcients of fH and invokes proof-of-opening for each;
V computes commitments to fH(0) and fH(1), and P uses
proof-of-equality to show that these commit to the same values
as X and Y; and V samples υ and computes a commitment to
fH(υ), which it uses in the ﬁnal step.
Final step. P now convinces V that Com( fH(υ)), the result of
the ﬁnal mini-protocol invocation (which is a commitment to
˜Vd(r(cid:16), rυ); §3.2), is consistent with x and w.
We let m = (x, w) denote the concatenation of the input x and
the witness w; assume for simplicity that |x| = |w| = 2(cid:4); interpret
x, w, and m as functions (§3.2, “Multilinear extensions”); and
let (r0, . . . , r(cid:4)) = (r(cid:16), rυ). Then by the deﬁnitions of ˜m, ˜x, and ˜w,
By analogy to Gir++’s ﬁnal step, V’s task is to check that
˜Vd(r(cid:16), rυ) is equal to ˜m(r0, . . . , r(cid:4)). V does this by ﬁrst computing
Com( ˜m(r0, . . . , r(cid:4))) using the commitments to w that P sent in
Step 0 (above), and then engaging P in proof-of-equality on
Com( fH(υ)) and Com( ˜m(r0, . . . , r(cid:4))).
˜m(r0, . . . , r(cid:4)) = (1 − r0) · ˜x(r1, . . . , r(cid:4)) + r0 · ˜w(r1, . . . , r(cid:4)).
(cid:16),r
931
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 


To compute Com( ˜m(·)), V exploits the following expres-
sion [35] for the multilinear extension of w : {0, 1}(cid:4) → F:

˜w(r1, . . . , r(cid:4)) =
b∈{0,1}(cid:3)
k∈{1,...,(cid:4)}
w(b) ·
w(b) · χb
(rk)
χbk
=
b∈{0,1}(cid:3)
(4)
(rk), and
(rk) = rk bk + (1 − rk)(1 − bk), χb =
where χbk
bk is the (1-indexed) kth bit of b. In more detail, V ﬁrst evaluates
each χb in linear time [102], and then computes
Com(w(b))r0·χb(r1,...,r(cid:3))

F =
χbk
k

which is Com(r0 · ˜w(r1, . . . , r(cid:4))). It then computes, in the
clear, F(cid:16) = (1 − r0) · ˜x(r1, . . . , r(cid:4)). Finally, V computes
Com( ˜m(r0, . . . , r(cid:4))) = F (cid:14) Com(F(cid:16); 0). Invoking proof-of-
equality as described above completes the protocol.
b∈{0,1}(cid:3)
The following theorem formalizes the eﬃciency of the argu-
ment of this section. We leave a formal statement of security
properties to the ﬁnal protocol (§7).
Theorem 2. Let C(·, ·) be a layered arithmetic circuit of fan-in
two, consisting of N identical sub-computations, each of depth
d, with all layers of each sub-computation having width at most
G. Assuming the existence of computationally binding, perfectly
hiding homomorphic commitment schemes that support proof-
of-opening, proof-of-equality, and proof-of-product (Appx. A)
with running times upper-bounded by κ, there exists a PZK
argument for the NP relation “∃w such that C(x, w) = y.” The
protocol requires d log(G) rounds of communication, and has
communication complexity Θ(|y| + (|w| + d log G) · λ), where
λ is a security parameter. Given a w such that C(x, w) = y,
the prover runs in time Θ(dNG + G log G + (|w| + d log G) · κ).
Veriﬁer runtime is Θ(|x| + |y| + dG + (|w| + d log(NG)) · κ).
The above follows from the more general Theorem 3.1 of [8].
5 Reducing the cost of sum-checks
In the PZK argument from Section 4, the prover sends a separate
commitment for every message element of Gir++ (§3.2), and
then independently proves knowledge of how to open each
commitment. This leads to long proofs and many expensive
cryptographic operations for the veriﬁer.
In this section, we explain how to reduce this communication
and the number of cryptographic operations for the veriﬁer by
exploiting multi-commitment schemes, in which a commitment
to a vector of elements has the same size as a commitment to
a single element. The Pedersen commitment [80] (Appx. A)
supports multi-commitments.
Dot-product proof protocol. Our starting point is an existing
protocol for multi-commitments, which we call proof-of-dot-
prod. With this protocol, a prover that knows the openings of two
commitments, one to a vector (cid:17)x = (x1, . . . , xn) ∈ Fn and one to a
scalar y ∈ F, can prove in zero-knowledge that y = (cid:6)(cid:17)a, (cid:17)x(cid:7) for a
public (cid:17)a ∈ Fn. The protocol is deﬁned in Appendix A.2.
Squashing V’s checks. To exploit proof-of-dot-prod, we ﬁrst
recall from Section 4 that in each round j of each sum-
check invocation in Gir++, P sends commitments to c0, j,
932
c1, j, c2, j, and (only in the ﬁrst bN rounds) c3, j. Next, P
proves to V that 2c0, j + c1, j + c2, j + c3, j = sj−1(rj−1) (i.e., that
sj(0) + sj(1) = sj−1(rj−1)). Finally, V computes a commitment
to sj(rj) = c0, j + c1, jrj + c2, jr2
Combining the above equations yields c3, j+1 + c2, j+1 + c1, j+1 +
2c0, j+1 − (c3, jr3
+ c1, jrj + c0, j) = 0. V’s ﬁnal check
can likewise be expressed as a linear equation in terms of
v0, v1, c2,n, c1,n, c0,n, and wiring predicate evaluations (§3.2)
(n = bN + 2bG). We can thus write V’s checks during the
rounds of the sum-check protocol as the matrix-vector product
j for the next round.
+ c2, jr2
+ c3, jr3
j
j
j
⎡⎢⎢⎢⎢⎢⎣
M1
...
Mb N +2bG +1
⎤⎥⎥⎥⎥⎥⎦ · (cid:17)π =
⎡⎢⎢⎢⎢⎢⎣
s0
0
...
⎤⎥⎥⎥⎥⎥⎦
(5)
Each Mk is a row in F4b N +6bG +3 encoding one of V’s checks
and (cid:17)π is a column in F4b N +6bG +3 comprising P’s messages.
(4bN +6bG+3 accounts for bN rounds with cubic sj, 2bG rounds
with quadratic sj, and the ﬁnal values v0, v1, and v0v1; §4.)
Now we can combine all of the linear equality checks encoded
in Equation (5) into a single check, namely, by multiplying each
row k by a random coeﬃcient ρk and summing the rows.
Lemma 3. For any (cid:17)π ∈ F
(cid:4), and any matrix M ∈ Fn+1×(cid:4) with
(cid:24)
rows M1, . . . , Mn+1 for which Eq. (5) does not hold, then
(cid:21)(cid:22)(cid:23)
(cid:25)
(cid:26)
Pr
ρ
ρk · Mk
(cid:6)(
= ρ1 · s0
, (cid:17)π
ρk · Mk) , (cid:17)π(cid:7)
≤ 1/|F|
is a polynomial
Proof. Observe that
in
ρ1, . . . , ρn+1 of total degree 1 (i.e., a linear function in
ρ1, . . . , ρn+1). Call this linear polynomial φ. The coeﬃcients
of φ are the entries of M · (cid:17)π. Similarly, ρ1 · s0 is a linear poly-
nomial ψ in ρ1, . . . , ρn+1, whose coeﬃcients are the entries of
[s0, 0, . . . , 0]. Note that if Equation (5) does not hold, then φ and
ψ are distinct polynomials, each of total degree 1. The lemma
(cid:3)
now follows from the Schwartz-Zippel lemma.
Putting the pieces together. Lemma 3 implies that, once P
has committed to (cid:17)π, it can use proof-of-dot-prod to convince
V of the sum-check result in one shot. For soundness in Gir++,
however, P must commit to c3, j, c2, j, c1, j, c0, j before the Veriﬁer
sends rj. This means that P cannot send Com((cid:17)π) all at once.
Instead, we observe that P can send the commitment to (cid:17)π
incrementally, using one group element per round of the sum-
check. That is, in each round of the sum-check protocol, P
commits to a vector encoding the coeﬃcients of that round’s
polynomial, and V responds with its random coin rj. After P
has committed to all of its messages for the sum-check, P and V
engage in the protocol of Figure 1, which encodes V’s checks
for all rounds of the sum-check protocol at once. This protocol
replaces V’s checks in Step 2 of the protocol of Section 4.
Lemma 4. The protocol of Figure 1 is a complete, honest-veriﬁer
perfect ZK argument, with witness-extended emulation under the
discrete log assumption, that its inputs constitute an accepting
sum-check relation: on input a commitment C0, commitments
{αj} to polynomials {sj} in a sum-check invocation, rows {Mk} of
the matrix of Equation (5), and commitments X = Com(v0), Y =
Com(v1), and Z, where {rj} are V’s coins from the sum-check
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 