17.95
18.57
10.48
1.72
11. 9
n/a
Mem
(%)
4.95
0.25
0.04
0.56
0.13
0.00
0.46
1.70
0.04
1.73
0.76
0.01
0.57
0.19
0.81
0.87
0.24
0.02
5.61
4.77
vCode
(%)
32.13
5.12
0.29
0.14
0.60
0.54
13.77
0.24
0.18
0.09
2.68
0.28
0.32
0.17
4.04
5.08
0.50
0.79
20.25
17.29
PT Packet #
Ret
18M
211K
0
9
12K
19M
5M
2
8M
0
553K
0
7M
1K
c-data
17M
0
0
0
14K
34M
501K
0
30M
0
460K
0
0
0
BBID
130M
439K
0
498K
25K
504M
10M
9
39M
0
21M
0
1G
8K
11K
10K
2K
10K
7K
603
perlbench
bzip2
mcf
milc
namd
gobmk
soplex
hmmer
sjeng
libquantum
h264ref
lbm
astar
sphinx
Average
GeoMean
Variance
nginx (/req)
vsftpd (/req)
proof of concept COOP attack, and synthesize 2 advanced attacks
that bypass existing CFI implementations. Then we check whether
µCFI can prevent such attacks (Q2). We integrate one represen-
tative shadow stack, the parallel shadow stack [17], to check the
compatibility of µCFI with backward-edge CFI solutions (Q4). We
evaluate the correctness and overhead of the combined protection.
Due to the data loss problem of Intel PT, we cannot perform
end-to-end evaluation for some SPEC benchmarks. We check this
issue in §6.3 and discuss the missed benchmarks in §6.4.
Setup. We perform our evaluation on a 64-bit Ubuntu 16.04 system,
equipped with an 8-core Intel i7-7740X CPU (4.30GHz frequency)
and 32 GB RAM. We compile each program in two steps. First, we
use wllvm [52] to generate the baseline binary and the LLVM IR
representation of the whole program. Second, we use µCFI compiler
to instrument the IR and generate the protected executable. Both
compilations take default optimization levels and options, like, O2
for SPEC and O1 for nginx and vsftpd. We use the provided train
data sets to evaluate SPEC benchmarks. For nginx and vsftpd, we set
up the server on our evaluation environment, and request files with
different size from another machine in the same local network. We
request each file for 1000 times to avoid accidental deviations. To
measure the overhead, we launch the protected execution together
with the monitor, and count the time till all processes exit, including
the protected execution, the monitor and their child processes.
Result summary. Table 3 and Table 4 summarize our evaluation
results. µCFI successfully enforces the UCT property for tested
programs as it only allows one valid target for all indirect control-
flow transfers (Q1). µCFI introduces 7.88% runtime overhead for
evaluated SPEC benchmarks on average, 4.05% runtime overhead
for nginx and less than 1% overhead for vsftpd (Q2). This means that
µCFI can efficiently protect these programs with a strong security
guarantee. All attacks, including the real-world attacks, the COOP
proof of concept attack and the synthesized attacks, are blocked
by µCFI at runtime (Q3). Programs compiled with µCFI and the
shadow stack work well. The combined protection introduces extra
2.07% overhead to SPEC benchmarks, and negligible extra overhead
to nginx and vsftpd (Q4).
5.1 Enforcing UCT property
µCFI successfully enforces the unique code target property for
evaluated SPEC CPU2006 benchmarks, nginx and vsftpd, as shown
in the uCFI column (under Allowed target #) of Table 3, in which
all ICT instructions have one and only one allowed target. SPEC
benchmarks mcf, libquantum and lbm do not have ICT instructions
in their LLVM IR, so we skip their numbers in the column.
5.1.1 Necessity of constraining data. To understand the advantage
of µCFI, we emulate the analysis without constraining data (like in
PittyPat [21]) to estimate the number of allowed targets for ICT
instructions. Specifically, we associate each sensitive data with a
counter variable to represent the number of its possible sources.
This value is initialized as 1, and gets propagated among sensitive
instructions. If one instruction uses constraining data to derive the
destination from the source, we multiply the source counter by the
maximum value of the constraining data and assign the result to the
destination counter. The multiplication represents the inevitable
overestimation the analysis has to make to conservatively permit all
possible targets. We infer the maximum value of the constraining
data from static analysis if possible (e.g., static array size); otherwise
s
n
o
i
t
c
u
r
t
s
n
i
T
C
I
1.00
0.95
0.90
0.85
0.80
0.75
0.70
0.65
0.60
any input w/ c-data
inputs w/o c-data
0
10
30
20
50
gobmk: log2(target #)
40
1.0000
0.9995
0.9990
0.9985
0.9980
0.9975
0.9970
0.9965
0
6064
1.00
0.90
0.80
0.70
0.60
0.50
0.40
0
10 11
1.00
0.90
0.80
0.70
0.60
0.50
20 23
w/ c-data
w/o c-data
0
1
2
3
4
5
6
7
vsftpd: log2(target #)
10
5
nginx: log2(target #)
15
4
2
h264ref: log2(target #)
6
8
Figure 5: Cumulative distribution of allowed target number in h264ref, nginx, vsftpd and gobmk. X-axis shows the binary logarithm of allowed
target numbers. Executions with constraining data always have unique targets, and therefore produce the horizontal line on the top.
/* index is the constraining data to determine currSE */
SyntaxElement *currSE = &img->MB_SyntaxElements[index];
writeSyntaxElement_UVLC(currSE, ...);
1 struct { void (*mapping)(...); } SyntaxElement;
2 struct { SyntaxElement MB_SyntaxElements[1200]; } *img;
3 int writeMBLayer (int rdopt) {
4
5
6
7 }
8 int writeSyntaxElement_UVLC(SyntaxElement *se, ...) {
9
10 }
Figure 6: Simplified h264ref code snippet that retrieves a function
pointer from a large structure array.
se->mapping(se->value1, ...);
we use its concrete value at runtime as an under-approximation.
Finally, the counter value of the code pointer is the number of
allowed targets for the ICT instruction. Note that our goal here is
not to get an accurate number of unique allowed targets. Instead, we
mainly use the counter value to estimate the attacker’s flexibility
on building control-hijacking attacks.
Column (w/o c-data) shows our estimation results, in which 4
SPEC benchmarks and both real world applications will permit sig-
nificantly more targets if the analysis does not use constraining data.
sjeng always permits 7 targets for its only ICT instruction, while
another 5 applications allow targets varying from small counts (e.g.,
2) to the maximum integer (i.e., ULONG_MAX on Linux). We draw the
distribution of allowed target number for gobmk, h264ref, nginx
and vsftpd in Figure 5, where the X-axis shows the binary loga-
rithm of the allowed target number. The distribution of allowed
target numbers for gobmk varies from input to input, in which
ICTs with more than one target range from 5% to 35%. Most ICTs
have less than 64 (26) targets, but some may permit 264 targets.
For h264ref, 99.7% of ICTs have only one target. Other ICTs have
either 400 targets (0.15%) or 1200 targets (0.15%). Requesting a 1KB
file from nginx can trigger ICTs with 223 targets, while ICTs with
one target only account for 45%. The allowed target numbers for
vsftpd is simpler, like one target (55%) or two (40%), and a few with
128 targets. Our estimation shows that without constraining data,
attackers have substantial flexibility to divert the control flow, even
if the victim is protected with known CFI solutions. For soplex and
namd, µCFI monitor detects operations on constraining data (the
last column on Table 3), but no ICT instructions use the operation
results. Therefore, the analysis without constraining data also en-
forces one target for all invoked ICT instructions. However, we find
execution paths in these programs that really use constraining data
for ICT instructions, where the analysis has to use constraining
data to achieve the UCT property.
for (...) {
{ struct matched_pattern_data *pattern_list; };
struct matched_patterns_list_data *list, ...) {
struct matched_pattern_data tmp;
tmp = list->pattern_list[index1];
list->pattern_list[index2] = tmp;
1 typedef int (*autohelper_fn_ptr)(...);
2 struct pattern { autohelper_fn_ptr autohelper; };
3 struct matched_pattern_data { struct pattern *pattern; };
4 struct matched_patterns_list_data
5
6 int get_next_move_from_list(
7
8
9
10
11
12
13
14
15 }}
16 int check_pattern_hard(..., struct pattern *pattern, ...) {
17
18 }
Figure 7: Simplified gobmk code snippet that cascades memory access
with constraining data.
tmp = list->pattern_list[index3];
check_pattern_hard(..., tmp.pattern, ...);
pattern->autohelper(...);
Case study 1: reading code pointer from a huge table. h264ref
permits up to 1200 targets if the constraining data is not available.
We inspect its execution trace and figure out that the large num-
ber is caused by reading a code pointer from a huge table with a
variable index, as shown in Figure 6. Structure ImageParameters
contains an array of 1200 SyntaxElement instances, while structure