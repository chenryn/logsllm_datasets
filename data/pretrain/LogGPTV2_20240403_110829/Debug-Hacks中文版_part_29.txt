社区是如何看待这个问题的？检查修改历史后发现了两个补丁，其修改内容和我想
描述符的锁。
note_interrupt()有问题。寻找其他 IRQ 处理程序时其实并不需要获取当前中断的
分析到这里，问题的原因就很清楚了。在已获得 desc->lock 的情况下调用
检查社区的修改历史
图5-13引1发死锁的流程
图5-13所示。
备共享 IRQ 的设备，这里就会出问题，敏锐的人应该已经注意到问题了。流程如
似乎 action->flags 中如果没有 IRQF_DISABLED 标志，就允许中断。如果是与其他设
220 1
commit f72fa707604c015a6625e80f269506032d5430dc
irqreturn_t handle_IRQ_event(unsigned int irq, struct pt_ regs *regs,
[kemelirq/handle.c]
 if (!(action->flags & IRQF_DISABLED))
IRQ中断发生
local_irq_enable_in_hardirq();
第5章实践内核调试
>do_IRQ()
/+在禁止中断的状态下调用*/
+对desc->lock加自旋锁(?*/
/*
>misruoted irq()
 struct irqaction *action)
www.TopSage.com
发生同--IRQ中断
/允许中断发生*/
→do_IRO()
→
/±试阐获得同-个 desc->Llock导致死锁*/
---
## Page 239
注2：
此外，其他进程的运行似乎没有问题。
问题。为了确认情况执行了 ps 命令，结果 ps 命令也没有响应。
在某个以Linux 2.6.9内核为基础的发行版上测试内核时，出现了用户进程无响应的
问题内容
#39
参考文献
进行调试的方法。此外，有时可以像这次的问题一样，从内核启动参数寻找原因。
本 hack 以单 CPU 下的死锁为例，介绍了利用 NMI watchdog 给出的内核故障信息
总结
Miracle Linux “Linux 的 110” 注2
Date:  Wed Nov 22 09:32:06 2006 -0800
Author: Linus Torvalds 
commit b42172fc7b569a0ef2b0fa38d71382969074coe2
Date: Fri Nov 10 12:27:56 2006 -0800
Author: Pavel Emelianov 
基于 Linux内核 2.6.9的发行版。
 Don't call “note_interrupt()" with irq descriptor lock held
http://www.miraclelinux.com/support/?q=node/246
[PATCH] Fix misrouted interrupts deadlocks
资料。
“Linux的110”是Miracle Linux的支持页面，提供面向开发者的技术支持
本hack介绍实际发生的信号量导致死锁的问题的解析方法。
内核停止响应（信号量篇）
www.TopSage.com
HACK#39 内核停止响应（信号量篇）1 221
一—安部东洋
译者注
228
---
## Page 240
229
利用crash的bt命令输出backtrace信息。
确定现象是执行了哪些处理而发生的，对于分析问题十分重要。
接下来检查一下backtrace信息，看看是如何到达该状态（UNINTERRUPTABLE）的。
检查进程的backtrace
以下几种情况。
pid为2943，状态为UN（UNINTERRUPTABLE）。考虑一下该进程无响应的可能原因，有
利用crash的ps命令看看无响应的进程（ps命令）的情况。
首先看看无响应的ps命令的情况。
检查进程情况
下面介绍由崩溃转储分析问题的详细方法。
为了确认、分析出问题的进程的详细情况，我们先收集了崩溃转储。
收集崩溃转储
222|第5章实践内核调试
#4[10226357eb0] proc_info_read at ffffff801bb5e0
#0[10226357c88] scheduleatffffffff805537d7-
PID:2943TASK:1022f85d170
crash>bt2943
crash>ps|grep ps
W
#2[10226357df0] access_process_vm at fffff801413ca
也不是busyloop。
等待磁盘IO。
294325962
等待某个事件，但并不是普通的睡眠。
内存8GB。
CPU x86_64。
[10226357e70]proc_pid_cmdline at ffffffff801bb0e5
1022f85d170UN0.054081036 ps
www.TopSage.com
CPU:2COMMAND:“ps"
@②
---
## Page 241
看看源代码。
调用了 down_read()的函数 access_process_vm(）(③)。
处理上发生的问题，因此应该调查一下它在试图操作什么信号量。下面我们来看看
虽然知道是在等待信号量，但并不知道是在等待什么信号量，因此也弄不清是哪个
号量一直不返回，可以认为发生了死锁。
从信号量操作等互斥处理的结构上看，必然存在发生死锁的可能性。这里等待的信
死锁
一步调用 schedule（）（②)。可以认为，它在等待只读信号量。
从这段 backtrace 信息可以看出，ps 命令的进程调用了__down_read(）（①)，然后进
int write)
int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len,
kernel/ptrace.c:
#5 [10226357ef0] vfs_read at ffff8018613e
ORIG_RAX:0000000000000000C
R13: 0000000000000006 R14: 0000000005464a0 R15: 0000000000000
R10:
RDX:0
RAX: 0000000 RBX: ffff8010539 ROX: 0000000000
RIP: 0000002a95827232 RSP: 0000007fbfffe640 RFLAGS: 00010202
down_read(&amm->mmap_sem); 
if (!mm)
mm = get_task_mm(tsk);
void *old_buf = buf;
struct page *page;
struct vm_area_struct *vma;
struct mm_struct *mm;
00000000746f6f72 R
0000000000000000
00000007ff
return 0;
R11:0
R8: 0000000000000000
RSI: 0000007fbfffddf0 R
www.TopSage.com
CS: 0033 SS: 002b
0000000000000246
HACK#39内核停止响应（信号量篇）
R9: 0000000000000000
R12: 0000000000000000
RDI: 0000000000000006
|223
?
mmap_ sem进行了互
224|第5章实践内核调试
Interface)。
RDX=> size
RSI
RDI=6 => fd=6
RAX= => read 系统调用
=> ptr
return buf - old_ buf;
mmput(mm) ;
up_read(&amm->mmap_sem); -
while (len) {
  as s yr mo yu i sa at 
www.TopSage.com
?
---
## Page 243
到 crash 的 ps 和 bt 命令。
该内存结构属于 pid=2639 这个进程，那么来看看 pid=2639 进程的信息。这里要用
利用 crash的 files 命令查看 ps 命令的进程打开的文件，看看 fd=6 是什么文件。
crash> bt 2639
crash> ps I grep 2639
#4 [10229a65ee0] mincore_vma at ffff80177a9a
PID:2639 TASK:1022e9920f0
ROOT:/CWD:/root
PID: 2943 TASK: 1022f85d170
crash> files 2943
罪
茜
2639 2554 31022e9920f0
e
RIP: 0000002a958323f9 RSP: 0000007fbffff3c0 RFLAGS: 00010206
[10229a65f80] no_syscall_ entry_trace at fffff8810e539
[10229a65f40] sys_mincore at fffffff80177bf3
ORIG RAX: ffffffffffffffff C
R13: 0000000008000201 R14: 0
R10:0
RBP:
RDX:0
RAX:00000000000000OOR
RIP: ffffff802d1632 RSP: 000010229a65ed8 RFLAGS: 00010202
[exception RIP: copy_user_generic+178]
[10229a65e20] error_exit at fffff8010fodd
[10229a65cfo] do_page_fault at fffff80121fcc
[10229a65cb0]
[10229a65b88] schedule at ffffffff805537d7
1022e621200
1022e621e80
1022ealab80
1022eala2c0
1022e3e5e40
1022e3e5e40
1022e3e5e4θ
 FILE
0000000000000001
0000001
0000000000000001
_down_read at ffff80554bf
DENTRY
10224402b30
100cff563f0
10224edfde8
1022dcaca48
102244026a8
102244026a8
102244026a8
R11: 000000000001 R12: 00000000001
R8: 00000000fffffffa
RSI: 0000010225f44000 R
RBX:0000000000000001 R
www.TopSage.com
CS: 0010 SS: 0000
0000000000000001 R15: 0000010225f44000
CPU: 3 COMMAND:"MYAPL"
UN 0.0 31248 696 MYAPL
CPU: 2 COMMAND: "ps"
INODE
1022dad0a78
100cff51d00
1022957d098
1022957d320
1022e4813a0
1022e4813a0
1022e4813a0
HACK#39 内核停止响应（信号量篇）1 225
TYPE PATH
RDI: 0000002a95c018f6
RCX:0000000000000001
R9: ffffffff806bcd10
REG /proc/2639/cmdline
CHR
DIR
REG
REG
CHR
CHR
/proc/
/dev/pts/1
/proc/meminfo
/proc/uptime
 /dev/pts/1
 /dev/pts/1
---
## Page 244
取该互斥对象。
226| 第5章实践内核调试
检查一下页面错误引发的异常处理的流程。
异常处理中发生死锁的一种情况就是，在获取了某个互斥对象的情况下再次尝试获
误（page fault）后的操作。
的 ps 命令的进程也在等待读取类的信号量。另外，这个信号量操作似乎是页面错
这里找到的进程 MYAPL 就是最初失去响应的用户进程。根据 backtrace 信息，无响应
asmlinkage long sys_mincore(unsigned long start, size_t len,
mm/mincore.c:
ORIG_RAX: 000000000000001b CS: 0033 SS: 002b
R13:0000000000000000 R14:0000000000400000R15:0000000000000002
RBP: 000000000000000
RDX: 00002a95c018f0
RAX: 00000000001b RBX: ffffff801005390 R
R10:
down_read(&current->mm->mmap_sem);
long error = -EINVAL;
int unmapped_error = 0;
struct vm_area_struct * vma; 
unsigned long end;
int index = 0; 
0000000000000003P
if (end vmend) {
/* Here vma->vm_start vm_end. */
error = unmapped_error;
 if (start bt2640
crash>ps
crash>bt2641
#
ORIG_RAX:ffffffffffffffff CS:0033 SS:002b
2642
2641
2640
2639