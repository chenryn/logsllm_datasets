(b) Event Aggregation
Fig. 2. a) In the top diagram, a HoneyStat MemEvent occurs, and the honeypot is allowed to
continue, in hopes of capturing an egg or payload. (The event is immediately analyzed, how-
ever, without delay.) If a subsequent NetEvent occurs, we update the previous MemoryEvent
event and reset. In the bottom diagram, we see a NetEvent without any prior MemoryEvent,
indicating our host-based IDS did not spot any anomaly. We immediately reset, and analyze the
circled trafﬁc segment. b) Aggregating multiple honeypot events can help spot a pattern. In all
three diagrams, activity Pa is observed, even though others (Pb, Pc) appear closer in time to the
event.
HoneyStat events are placed in a work queue and analyzed by worker threads. We
can prioritize certain types of events, such as when outgoing connections attempt to
reach many different IPs (i.e., it looks like a worm scanning.) These events are obviously
more important than others, since they suggest an automated spread mechanism instead
of a single connection back to the attacker’s IP. This idea borrows from the work of
46
David Dagon et al.
researchers who observed the importance of tracking distinct destination IPs in worm
detection systems [JPBB04,WVGK04]. Future work will explore queue processing and
other prioritizations.
Several actions are taken when a HoneyStat event is analyzed.
1. First, we check if the event corresponds to a honeypot that has already been
recorded as “awake” or active. If the event is a continuation of an ongoing in-
fection, we simply annotate the previous event with the current event type. For
example, if we ﬁrst witness a MemoryEvent, and then see a DiskEvent for the
same honeypot, we update the MemoryEvent to include additional information,
such as the DiskEvent and all subsequent network work activity. The intuition
here is that MemoryEvents are usually followed by something interesting, and it
is worth keeping the honeypot active to track this.
2. Second, if the event involved NetworkEvents (e.g., either downloading an egg
or initiating outgoing scans), the honeypot reporting the event is reset. The idea here
is two-fold. In keeping with the principle of honeypot Data Control [LLO+03],
we need to prevent the node from attacking other machines. Also, once network
activity is initiated, we have enough attack behavior recorded to infer that the worm
is now infective. If only DiskEvents or MemoryEvents are observed, the node
is not reset.
Since the honeypot is deployed using an emulator, resets are fast in practice. One
merely has to kill and restart the emulator, using in round-robin style a fresh copy
of the virtual disk. The disk image is kept in a suspended state, and no reboot of
the guest OS is required. The reset delay is slight, often seconds or a minute, and
always in practice completes before TCP timeouts occur. The effect of startup time
on detection is considered in the analysis in Section 6.
3. Third, the analysis node examines basic properties of the event, and determines
whether it needs to redeploy other honeypots to match the affected OS. The intu-
ition here is that HoneyStat nodes are often deployed to cover a variety of operating
systems: Linux, Windows, and with different patch levels. If one of the systems
falls victim to a worm, it makes sense to redeploy most of the other nodes to run
the vulnerable OS. This improves the probability that an array of HoneyStat nodes
will capture similar events. Again, the delay this causes for detection is discussed
in Section 7.
4. Finally, the HoneyStat event is correlated with other observed events. If a pattern
emerges, this can indicate the presence of a worm or other automated attacks. Any
reasonable correlation of events can be done. In the next section, we present a
candidate analysis based on logistic regression.
As an example, in Figure 2(b), we see three different honeypots generating events.
Prior input to the honeypots includes a variety of sources. For simplicity, the example
in Figure 2(b) merely has three different active ports, Pa, Pb, Pc. Intuitively, we can
use the time difference between the honeypot event and the individual port activity to
infer what caused the honeypot to become active. But if all these events are from the
same worm, then one would expect to see the same inputs to all three honeypots. In
this case, only Pa is common to all three. A logistic regression presents a more ﬂexible
HoneyStat: Local Worm Detection Using Honeypots
47
way of discovering the intersection of all inputs and provides a better explanation why
a honeypot has become active.
4.1 Honeypot Evasion
As more honeypots are used in IDS settings, attackers may attempt to evade by having
worms detect and avoid honeypot traps. Honeypot researchers have observed that a few
assembly instructions behave slightly differently in various (often incomplete) emula-
tors, and that emulated hardware may have predictable signatures (e.g., BIOS Strings,
MAC address ranges for network cards) [Cor04,Sei02]. One can prevent trivial honey-
pot detection by patching emulated VMs [Kor04], and removing any obvious indicators
like registry keys.
Hand crafted assembly instructions designed to detect VMWare present a different
problem. Since Intel chips don’t support multiple zero ring contexts, some instructions
will elicit a VM monitor error, allowing attackers to evade the honeypot trap. This can
be countered by ﬁltering incoming trafﬁc to identify the limited instruction set designed
to detect VMWare. Failing this (e.g., if the emulator detection code is polymorphic), one
can always just treat the crashed emulator as a HoneyStat memory event. This yields a
more limited alert (e.g., you miss disk events), but allows HoneyStat to correlate what
caused the error.
Attackers might also attempt to make machine observations, e.g., the time needed
to perform lengthy calculations. This potentially beneﬁts defenders, since worms may
have a slower propagation rate, allowing for human intervention and earlier detection.
Ultimately, we believe the honeypot evasion problem may devolve into a classic cat-
and-mouse game, not unlike virus detection. In this case, however, the tables are turned,
and it is the attacker who must perform reliable detection in a changing environment.
5 Logistic Analysis of HoneyStat Events
Our key objective is the detection of zero-day worms, or those without a known signa-
ture. Without the ability to perform pattern matching, our task is analogous to anomaly
detection. We therefore use a statistical analysis of the events to identify worm behav-
ior. Statistical techniques, e.g., [MHL94,AFV95,PN97,QVWW98], have been widely
applied in anomaly detection, . In our prior work, we applied time series-based statisti-
cal analysis to alert correlation [QL03].
Our preference was for a technique that can effectively correlate variables collected
in a short observation window with a short computation time. Time series-based anal-
ysis is good for a relatively long observation and requires a series of statistical tests in
order to accurately correlate variables. It is also often not suitable for real-time analy-
sis because of its computationally intensive nature. Therefore, in this work, we instead
apply logistic analysis [HL00] to analyze port correlation.
Logistic regression is a non-linear transformation of the traditional linear regression
model. Instead of correlating two continuous variables, logistic regression considers
(in the simplest case) a dichotomous variable and continuous variables. That is, the
dependent variable is a boolean “dummy” variable coded as 0 or 1, which corresponds
48
David Dagon et al.
to a state or category we wish to explain. In our case, we treat the honeypot event as
a dichotomous variable, i.e., the honeypot is either awake (1) or quiescent (0). Logit
analysis then seeks to explain what continuous variables explain the changes in the
honeypot state, from asleep to awake.
We settled on using a logit analysis only after considering other, more restrictive
analysis techniques. A simple linear regression, for example, would compare continu-
ous-to-continuous variables. In the case of honeypots, this would require either mea-
suring rates of outgoing packets, or identifying some other continuous measurement in
the memory, network and disk events. Since it only takes one packet to be infected or
cause an infection to spread, a simple linear regression approach would not clearly iden-
tify “sleeper worms” (a false negative scenario) and worms on busy networks (a false
positive potential). Additionally, measuring outgoing packet rates would also include
a signiﬁcant amount of noise, since honeypots routinely complete TCP handshakes for
the services they offer (e.g., normal, non-harmful webservice, mail service, ftp con-
nections without successful login, etc.). Using continuous variables based on outgoing
rates may only be slightly better than using incoming scan rates.
The basic form of the model expresses a binary expectation of the honeypot state,
E(Y ) (asleep or awake) for k events, as seen in Eq. (1).
E(Y ) =
1
1 + e−Z
, where Z = β0 +  +
k(cid:1)
nj(cid:1)
j=1
i=1
(βi,jXi,j)
(1)
In Eq. (1), j is a counter for each individual honeypot event, and i is a counter for
each individual port trafﬁc observation for a speciﬁc honeypot. Each βi,j is the regres-
sion coefﬁcient corresponding to the Xi,j variable, a continuous variable representing
each individual port observation. We have one error term  and one constant β0 for the
equation. To set values of Xi,j, we use the inverse of time between an event and the port
activity. Thus, if a MemoryEvent (or honeypot event j) occurs at time t, and just prior
to this, port i on that same honeypot experienced trafﬁc at time t − δt, the variable Xi,j
would represent the port in the equation, and would have the value of 1
δt . This biases
towards network trafﬁc closer in time to the event, consistent with our infection model
discussed in Section 3.
An example shows how honeypot events are aggregated. Suppose one honeypot
event is observed, with activity to ports {P1, P2, . . . , Pn}. We calculate the inverse
time difference between the port activity and the honeypot event, and store the val-
ues for X1,1, X2,1, . . . Xn,1 in a table that solves for Y . Suppose then a second event
is recorded, in the same class as the ﬁrst. We add the second event’s values of X1,2,
X2,2, . . . , Xn,2 to the equation. This process continues. After each new event is added,
we resolve for Y , and calculate new values of β. After sufﬁcient observations, the logit
analysis can identify candidate ports that explain why the honeypots are becoming ac-
tive.
The inverse time relation between event and prior trafﬁc allows one to record arbi-
trary periods of trafﬁc. Trafﬁc that occurred too long ago will, in practice, have such
a low value for Xi,j that it cannot affect the outcome. As a convenience, we cut off
prior trafﬁc tp at 5 minutes, but even this arbitrary limit is generous. Future work will
explore use of other time treatments, such as 1
, as a means of further biasing
δ2
t
, and 1√
δt
HoneyStat: Local Worm Detection Using Honeypots
49
toward more recent network events. Note that this assumption prevents HoneyStat from
tracking worms that sleep for a lengthy period of time before spreading. These worms
are presumably self-crippling, and have a slow enough spread rate to allow for human
intervention.
A key variable in this analysis includes the Wald statistic, which lets us test whether
a variable’s coefﬁcient is zero. The Wald statistic is merely the ratio of the coefﬁcient
to its standard error, with a single degree of freedom [HL00]. The Wald statistic can be
used to reject certain variables, and exclude them from a model. For example, if ports
P0, P1, . . . Pn were observed prior to a honeypot event, we might exclude some of these
ports based on the ratio of their coefﬁcient βi,j, and their standard error. Thus, the Wald
statistic essentially poses a null hypothesis for each variable, and lets us exclude vari-
ables with zero coefﬁcients. (After all, a variable with a zero β value does not contribute
to solving Eq. 1). This analysis is helpful since it reduces noise in our model. However,
since it uses a simple ratio, when the standard error is large, it can lead one to not reject
certain variables. Thus, the Wald statistic can be used to remove unlikely variables, but
might not always remove variables that have no affect.
Applying logistic analysis involves the following steps. First, for a particular hon-
eypot event j, we estimate the coefﬁcients, i.e., β0,j, β1,j . . . βn,j, using maximum like-
lihood evaluation [HL00] (MLE). In this step, we try to ﬁnd a set of coefﬁcients that
minimize the prediction error. Stated another way, MLE assigns values that will maxi-
mize the probability of obtaining the observed set of data. (This is similar to the least
squares method under simple regression analysis.) Second, we use the Wald statistic
to evaluate each variable, and remove those below a user-selected threshold of signif-
icance level, say, 5%. The intuition of this step is that we try to evaluate whether the
“causal” variable in the model is signiﬁcantly related to the outcome. In other words we
essentially ask the question: Is activity on port x signiﬁcantly related to the honeypot
activity or was it merely random?
If the analysis results in a single variable explaining changes in the honeypot, then
we report the result as an alert. If the results are not conclusive, the event data is stored
until additional events are observed, triggering a renewed analysis. Of course, since
the events involve breakins to honeypots, users may also wish to receive informational
alerts about these events.
6 HoneyStat in Practice
To evaluate HoneyStat’s potential as a local worm detection system, we tested two key
aspects of the algorithm: (a) does it properly identify worm outbreaks, and (b) what
false positive rate does it produce? Testing showed that HoneyStat could identify worm
outbreaks, with a low false positive rate. Our testing with available data showed the
false positive rate of zero. This result is encouraging, given the enormous data set used.
Nonetheless, a zero false positive rate may be due to properties of the data set and we
will continue to run more experiments.
6.1 Worm Detection
In [QDG+], we used data from six honeypots that became active during the Blaster
worm outbreak in August 2003. The trace data used for the analysis also included net-
50
David Dagon et al.
work trafﬁc from some 100 /24 darknet IPs. Figure 3 shows an aggregate view of trafﬁc
to all the honeypots on August 9 and 11, as well as background trafﬁc to the darknets.
 10000
 1000
s
n
a
c
S
 100
 10
 1
 14
 12
 10
 8
 6
 4
 2
s
n
a
c
S
15:00
Hour
Scans to Honeypot Port 445
Scans to Honeypot Port 139
Scans to Honeypot Port 135
Scans to Darknet Port 445
Scans to Darknet Port 139
Scans to Darknet Port 135
 0
06:20
06:25
06:30
06:35
06:40
Time of Day, August 9, 2003
06:45
06:50
Scans to Honeypot, Port 135
Scans to Honeypot, Port 80
Scans to Honeypot, Port 8080
Scans From Honeypot, port 135
(a) HoneyStat Worm Detection, ports 135,
139, 445
(b) Non-Worm Events, ports 135 (left), and
80, 8080 (right)
Fig. 3. a) HoneyStat worm detection for Blaster. The Blaster attack on August 11, 2003, is de-
tected by the honeypots. Upward arrows, not drawn to scale, indicate the presence of outgoing
trafﬁc from the HoneyStat nodes. Trafﬁc prior to the honeypot activity is analyzed, using the
inverse of time difference, so that more recent activities more likely explain the change in the
honeypot. A logit analysis shows that prior scans to port 135 explains these episodes–effectively
identifying the blaster worm. b) Avoiding false positives. Here, we see a trojaned honeypot node
becoming active days prior to the Blaster worm outbreak. However, since this event is seen only
in isolation (one honeypot), it does not trigger a worm alert. Trafﬁc to ports 80 and 8080 does not
bias the later analysis.
If we mark the honeypot activity as NetEvents, we can examine the previous
network activity to ﬁnd whether a worm is present. As shown in Table 1, a logit analysis
of the honeypot data shows that of all the variables, port 135 explains the tendency of
honeypots to become active. (In our particular example, one can even visually conﬁrm
in Figure 3(a) that honeypot activity took place right after port 135 trafﬁc arrived.) The
standard error reports the error for the estimated β, and the signiﬁcance column reports
the chance that the variable’s inﬂuence was merely chance. The Wald statistic indicates
whether the β statistic signiﬁcantly differs from zero. The signiﬁcance column is the
most critical for our analysis, since it indicates whether the variable’s estimated β is
zero. The lower the score, the less chance the variable had no inﬂuence on the value of
Y . Thus, we eliminate any variable with a signiﬁcance above a threshold (5%). From
this, the observations for ports 80, 8080, and 3128 can be discounted as not a signiﬁcant
explanation for changes in Y .
In this case, the logit analysis performs two useful tasks. First, we use the signif-
icance column to rule out variables above a certain threshold, leaving only ports 135,
139 and 445. Second, the analysis lets us rank the remaining variables by signiﬁcance.
The logit analysis did not pick one individual port as explaining the value of Y . The
alert that issues therefore identiﬁes three possible causes of the honeypot activity. As
it turns out, this was a very accurate diagnosis of the Blaster outbreak. Recall that just
HoneyStat: Local Worm Detection Using Honeypots