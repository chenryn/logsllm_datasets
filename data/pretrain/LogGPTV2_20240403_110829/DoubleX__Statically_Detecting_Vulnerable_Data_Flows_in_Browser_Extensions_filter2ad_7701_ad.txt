77
29
23
22
3
275
#1-way DF
-
-
-
-
-
-
11
0
0
0
0
11
-
-
-
-
-
11
#Exploitable
63
30
0
1
32
21
49
5
3
3
1
37
76
29
22
22
3
209
Table 3: DoubleX findings on Chrome extensions
HTML files are exposed due to extensions allowing all files to be
web-accessible.
5.2 Analyzing DoubleX Reports
Overall, and out of our 154,484 extension set, DoubleX reported
278 extensions as suspicious, which sums up to 309 suspicious
data flows. In this section, we report on the exploitability of these
flows and present case studies. Subsequently, we discuss the evolu-
tion of vulnerable extensions between 2020 and 2021 and discuss
vulnerability disclosure.
Suspicious Data Flows Our main findings regarding suspi-
5.2.1
cious and exploitable data flows are summarized in Table 3. For
each sensitive API (with a subtotal per flaw category), we first
indicate the number of data flow reports generated by DoubleX
(#Reports). Subsequently, we present the results of our manual
analysis, regarding the number of reports with a data flow between
an attacker and a sensitive API (#DF), the number of reports with a
data flow between an attacker and a sensitive API but not back to
the attacker (#1-way DF),4 and, finally, the number of reports that
an attacker could exploit based on our threat model (#Exploitable).
In particular, to assess the exploitability of the reported flows, two
experts with 5+ years of JavaScript experience first went through
the reports and extensions. As mentioned in Section 4.4.3, DoubleX
produces fine-grained data flow reports. In particular, they contain
precise information about extension components, line numbers,
and corresponding computed values, where a potentially danger-
ous data flow was detected. Thus, we could directly look for the
code logic at precise line numbers to verify what happens in prac-
tice with data from/to an attacker. For the flows that were trivially
exploitable (e.g., an attacker-controlled message directly flows into
a sink) or clearly wrong, we flagged the reports accordingly. For
4Only relevant for cross-origin request APIs, where an attacker aims at requesting
arbitrary URLs and getting the response back from the server
more complicated cases (e.g., multiple data flows or sanitization
functions), we installed the extension and built a payload to exploit
the extension locally.
For the code execution APIs, the majority of the reports (102 / 113)
contains an attacker-controllable flow to a sink, and 63 can be con-
firmed as vulnerable. Regarding download triggering, all of our 21
reports have a verified dangerous data flow and could be exploited
to download arbitrary files. For cross-origin requests, we can ex-
ploit 49 / 95 flaws, even though 75 have a confirmed dangerous data
flow (both from and back to an attacker). In such cases, the attacker
could only control a part of the URL (hence the data flow), while we
aim at making arbitrary requests. We also observe 11 reports where
an attacker could make any request but did not receive the response
(but a status code, for example). Finally, regarding data exfiltration,
we can exploit almost all dangerous data flows reported (76 / 80).
Overall, out of 309 reports, 275 (89%) have a confirmed full data
flow between a sensitive API and an attacker. Of those, 209 are
exploitable under our threat model. Regarding the 66 remaining
reports with a verified, yet unexploitable, dangerous data flow, we
could not build an exploit mostly for one of the following reasons.
For 24 cases, exploitation was prevented by a sanitization function
(e.g., JSON.stringify or escape) or additional checks (e.g., checking
that a payload is a number or checking that a payload matches a spe-
cific value). For 20 reports (cross-origin requests), only a part of the
URL was attacker controllable, while we aim at making arbitrary re-
quests. For 12 cases, only predefined functions could be called with
an attacker-controllable parameter, e.g., eval(predefined(attacker)).
Since 11 cross-origin requests have a data flow from an attacker to
the sink but not back to the attacker, we only have 23 reports with-
out dangerous data flow. In such cases, we observe two common
limitations. For 10 cases, we over-approximate data flows, e.g., we
handle data flows at object level and not at property level or propa-
gate a suspicious function parameter flow to its returned value (as
discussed in Section 5.1.1). Second, for 6 cases, there is a confusion
regarding the sender of a message labeled as attacker-controllable,
e.g., a service worker or a WebSocket object instead of a web page
or another extension. While our static analysis is neither sound
nor complete, in the spirit of soundiness [47], we chose a trade-off
between accuracy and run-time performance. Also, our approach
is more oriented toward detecting suspicious data flows and less
toward proving the absence of vulnerability.
Specifically, we could detect 184 vulnerable extensions, totaling
209 vulnerable data flows, and impacting between 2.4 and 2.9 million
users. Notably, almost 40% of these extensions can be exploited by
any website or extension. Overall, 172 extensions are susceptible
to a Web attacker, and 12 extensions are exploitable through an
unprivileged extension. In addition, we could confirm 89% of the
suspicious data flows reported by DoubleX, which highlights its
high precision. Regarding vulnerable extensions DoubleX may
have missed, we discuss DoubleX recall on a labeled vulnerable
extension set in Section 5.4.
5.2.2 Case Studies Based on our data flow reports and findings,
we now describe five case studies regarding vulnerable extensions
that DoubleX detected. In doing so, we highlight the versatility of
our tool in detecting non-obvious vulnerabilities.
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1797Arbitrary Downloads with a Confused Deputy — The exten-
sion eflehphffapiajamoknfnpfapdgaeffk (10k+ users) registers an
external message handler but does not specify the externally_-
connectable field in its manifest. Therefore, the handler accepts mes-
sages from any extension. The messages are then forwarded to sev-
eral functions before ending in the url property of the downloads.-
download API, which allows an attacker to download arbitrary files.
This example highlights the dangers of implicitly allowing any
extension in externally connectable message handlers.
Arbitrary Code Execution — The extension cdighkgkcaadmon-
mbocgpcnenffjjdfc (4k+ users) can be exploited by any website
to execute arbitrary code in the extension context. In fact, the
content script, which can receive messages from any website, for-
wards all messages to the background page. In the background
page, the messages subsequently flow into the code property of
tabs.executeScript, without any sanitization. This example high-
lights the dangers of trusting input data which can be provided by
an attacker.
Cross-Origin Requests from WARs — The extension kohfgcg-
bkjodfcfkcackpagifgbcmimk (200k+ users) registers an external mes-
sage handler in its WARs to communicate with naturalreaders.com
and its subdomains. By sending messages to the WARs, this website
can make arbitrary requests and leak their content. While this may
be an intended functionality of the extension, as discussed in Sec-
tion 3, if this website gets compromised, an attacker could leverage
the extension’s elevated privileges to make arbitrary requests to
any website and leak their content. This example highlights the
dangers of authorizing a website to make arbitrary cross-origin re-
quests instead of preferring the more secure CORS [54] alternative,
which would limit the resources that can be accessed.
Most Visited Website Exfiltration — The content script of the
extension lklfbkdigihjaaeamncibechhgalldgl (700k+ users) is in-
jected into web pages from msn.com and its subdomains. Similarly
to kohfgcgbkjodfcfkcackpagifgbcmimk, if this website gets compro-
mised, an attacker could send a specific payload to the content
script. This payload triggers the sending of a message to the back-
ground page, asking for information regarding a user’s most visited
websites. The background subsequently sends this information to
the content script, which forwards it to the attacker. This example
highlights the fact that an XSS in a website can be used by an at-
tacker to leverage the extension’s elevated privileges to access user
sensitive information from other and unrelated sites.
Arbitrary Cross-Origin Requests via eval and $.post — The ex-
tension ecnobkadlbkbcdmaidnhigklogkidlhf (100+ users) was flagged
by DoubleX for having a data flow to eval in its content script.
Inspecting the extension, we find that there is no direct data flow
from an attacker to the sink, but a data flow from an attacker to the
URL of a $.post request, for which the response is then sent to eval.
Since the extension has the host permission *://*/*, the call to
eval can be abused to conduct arbitrary cross-origin requests. This
way, an attacker can provide a link to their site to select the code to
be executed, and in turn, can use that code to then conduct cross-
origin requests against arbitrary other hosts, thereby allowing a
cross-origin read of any resource of their choosing. Furthermore,
since the content script is injected into all visited pages, an attacker
can simply lure the victim to their site and send a postMessage to
trigger the chain reaction.
5.2.3 Comparison Between 2020 and 2021 In this section, we discuss
the evolution of vulnerable extensions between 2020 and 2021.
Specifically, we focus on the life cycle of vulnerable extensions, i.e.,
whether vulnerable extensions from 2020 are still in the store in
2021 and, if so, whether they are still vulnerable. To perform these
analyses, we crawled the Chrome Web Store also on June 19, 2020.
Of the 166,513 extensions we could extract, 132,231 (79%) were still
present in the store on March 16, 2021 (and 65,546 had not been
updated in this nine-month time frame).
Similarly to Section 5.2.1, we ran DoubleX on our 2020 exten-
sion set. Specifically, our tool flags 279 extensions (0.17%) as having
a suspicious data flow, which is similar to our results from 2021
(278 / 154,484 extensions). These 279 suspicious extensions expand
to 317 suspicious data flows. As previously, we manually reviewed
all reports from 2020, and we confirm that 286 (90%) have a verified
dangerous data flow between an attacker and the sensitive APIs we
consider. As already highlighted for our 2021 extension set, Dou-
bleX has a very high precision regarding flagged data flows. Besides,
we could exploit 219 of these flows, which leads to 193 vulnerable
extensions. While we found 184 vulnerable extensions in 2021, the
overall number of extensions in the Chrome Web Store slightly
decreased in 2021, so that the proportion of vulnerable extensions
did not change between 2020 and 2021 (0.12% of extensions). Still,
30 extensions that were vulnerable in 2020 are not in the store any-
more, and, as of March 2021, only 3 have been fixed (by removing
permissions or the vulnerable API call; we discuss disclosure in the
following section). While there are 19 new vulnerable extensions,
which were not in the store in 2020, 5 extensions existed before
but turned vulnerable in 2021 (3 due to permission changes, 1 due
to the addition of a vulnerable API call, and 1 due to allowing the
communication with web pages directly in the background page).
Overall, we observe that 87% of the extensions that are vulnerable
in 2021 were already vulnerable in 2020 (even though half of them
were updated in between). Thus, we need a system like DoubleX
to prevent vulnerable extensions from entering the store in the
first place (we discuss integrating DoubleX in Chrome’s vetting
process in Section 6.1), especially as they tend to stay in the store.
This is confirmed by the fact that the majority of developers we
contacted did not take any action after our disclosure, as discussed
in the next section.
5.2.4 Disclosure to Extension Developers Finally, we disclosed our
findings to the corresponding extension developers. Due to the
impact of the flaws, we focussed on the extensions that can be
exploited by any website or extension, leading to, e.g., universal
XSS or sensitive user data exfiltration to any website.
We first reported our findings, including PoC exploits, regarding
vulnerable extensions from 2020. In October 2020, we contacted 22
developers via emails, 4 over contact forms, and reported 9 issues
directly to Google when we did not have any contact information.
Similarly, in May 2021, we reported 13 additional vulnerable exten-
sions (we contacted 9 developers via emails and reported 4 issues
directly to Google). As of July 2021, of the 48 vulnerable exten-
sions we reported, 45 are still in the store. Of those, 13 have been
updated since our disclosure, but only 5 have been fixed (300k+
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1798users, 50k+ users, 3k+ users, 2k+ users, and 35 users). For example,
one extension (300k+ users) was updated to remove the 
permission to only allow the sites related to the extension, thus
limiting the damage to third parties.
5.3 Comparative Analysis
The only related work that leverages a similar threat model and
conducted a large-scale analysis on Chrome extensions is EmPoWeb
from Somé (2019) [72]. Hence, we contrast our results against Em-
PoWeb’s here and defer discussion of additional related work to
Section 7. To analyze extensions’ susceptibility to attacks through
external messages, EmPoWeb is based on a lightweight call graph
analysis. In practice, it yields an extremely high number of reports
to manually vet: of the 66k Chrome extensions analyzed, it flagged
3.3k as suspicious, and only 5% were confirmed to be vulnerable
(after Somé’s huge manual effort).
In this section, we compare DoubleX’s findings with EmPoWeb’s
on our 154,484 extension set. To this end, we ran the open-source
version of EmPoWeb [71], which we slightly patched to match our
attacker model, i.e., so that EmPoWeb considers the same sensitive
APIs as DoubleX and with the same permissions (e.g., we consider
arbitrary cross-origin requests whereas, in its original version, Em-
PoWeb considered even unauthorized access to a single cross-origin
URL). Similarly, we excluded our WARs reports from this analysis
(hence this section’s results may slightly differ from Section 5.2.1),
as EmPoWeb does not consider WARs.
As expected, EmPoWeb flags significantly more extensions as
suspicious than DoubleX: it reports 2,665 extensions compared
to our 268 (corresponding to 4,379 reported flaws vs. 299). Since
EmPoWeb does not rest on a data flow analysis to generate reports, it
mostly over-approximates the presence of an external message and
of a sensitive API as a potential flaw. With DoubleX, though, we
would flag such an extension only if we can find a data flow between
an attacker and a sensitive API, hence yielding significantly fewer
reports and significantly fewer false positives. Naturally, this is also
possible that EmPoWeb flags vulnerable extensions that DoubleX
does not detect. Still, given the extremely low true-positive rate of
EmPoWeb (5%) and the fact that DoubleX detects almost 93% of the
vulnerable extensions that were released with the EmPoWeb paper
(cf. Section 5.4), we are confident that the majority of EmPoWeb’s
additional reports are false positives. In an Open World model
like ours, to quantify potential false negatives, we would have to
manually review hundreds of extensions to find a few vulnerable
ones we may have missed, which would not be feasible.
In addition to being significantly more precise than EmPoWeb,
DoubleX also detects vulnerabilities that EmPoWeb misses. Specif-
ically, if we consider the 204 reports that we found vulnerable after
manual review, 27 of them (13%) are not reported by EmPoWeb.
It is especially prevalent for the cookies.getAll API, where 7 / 22
flaws are not detected and tabs.executeScript (9 / 32). While this
may appear counter-intuitive (as EmPoWeb rather flags almost all
extensions that contain an external message and a sensitive API),
EmPoWeb relies on string matching and on a fixed list of possible
ways to invoke specific APIs, so that it cannot always detect, e.g.,
aliases or dynamic sink invocations. For example, after aliasing
BPMessenger=chrome.runtime.sendMessage, EmPoWeb does not de-
tect BPMessenger as a message-passing API anymore. Contrary to
EmPoWeb, DoubleX pointer analysis can detect and handle such
aliasing cases as well as calls by reference, and APIs not written
in plain text, which leads to a higher number of vulnerabilities
found. In addition, our data flow analysis enables us to determine
if sensitive or dangerous data is being exchanged with an attacker,
which significantly limits our false positives.
5.4 Evaluation on a Labeled Dataset
To evaluate DoubleX false negatives, we consider the dataset of vul-
nerable extensions released by Somé with EmPoWeb. His paper [72]
provides a list of extension IDs and corresponding vulnerabilities.
Of the 171 Chrome extensions he reported as vulnerable in 2019, 82
still existed on March 16, 2021. We collected these extensions, and,
after manual analysis, we confirm that 73 / 82 are still vulnerable.
These 73 extensions total 163 previously reported vulnerabilities.
As Somé considered some APIs that are not part of our attacker
model (e.g., storage-related APIs5), we added them to our sensitive