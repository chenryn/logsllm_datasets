### Experiment Setup and Results

In our experiments, the caller was consistently located in South Carolina, while the callee was situated in one of four different states. The results indicated that the geographic locations of the caller and the callee had only minor effects on the delay, with the variance in delay being less than 1.1 seconds in all cases.

### Timing Estimation for Caller ID Verification

To verify the caller ID, Bob uses a Bayesian classifier to estimate Alice’s waiting time \( \tau_v \) and determine whether a call is **VALID**, **SPOOFED**, or **NOTSUPPORTED**. To evaluate the performance of this classifier, we collected over 3000 instances of calls, labeled as follows: approximately 1100 **VALID**, 1100 **SPOOFED**, and 800 **NOTSUPPORTED** instances. 

- **VALID** samples were collected when Alice genuinely called Bob.
- **SPOOFED** samples were collected when Eve spoofed her caller ID.
- **NOTSUPPORTED** samples were collected by asking 10 volunteers to either reject or answer incoming calls at their discretion. No CallerDec was installed, but a customized app was used to measure the delay between the start of ringing and the user's action.

From the mean and standard deviation of the user response times (Fig. 9), we observed that the average response time for an incoming call varied from 5.9 seconds to 10.6 seconds, indicating that it is unlikely to confuse the user's operation with CallerDec responses, which are triggered without delay.

### Dataset and Evaluation Metrics

We divided the dataset into training and test sets at various proportions \( p \), where \( p \) ranged from 0.1 to 0.9. For example, with \( p = 0.1 \), 10% (approximately 300 instances) of the dataset was used for training, and the remaining 90% (approximately 2700 instances) was used for testing. We evaluated the CallerDec classifier using the following metrics:

- **Accuracy**: The percentage of correct outcomes.
- **Precision**: The percentage of correct outcomes for a class out of all outcomes for that class.
- **Recall**: The percentage of correct outcomes out of all actual occurrences of that class.

As depicted in Fig. 10(a), the accuracy of the classifier was more than 99% even when the training dataset was only 10%, with an average accuracy of 99.26%. Additionally, the precision and recall were fairly constant:
- **VALID**: 99.98% precision, 98.91% recall
- **SPOOFED**: 100% precision, 100% recall
- **NOTSUPPORTED**: 95.62% precision, 99.93% recall

These results suggest that a small number of training data is sufficient for efficient classification.

### Summary of CallerDec Performance

CallerDec can effectively detect caller ID spoofing, providing high accuracy in the detection process.

### Battery Usage Overhead

To evaluate the battery usage of CallerDec, we measured the millivolts consumed per hour by the entire phone. In this setup, the phone only executed a battery logger app, and the Wi-Fi interface was turned off in all cases.

Since CallerDec is triggered on demand by incoming calls, we measured power consumption in two scenarios:
1. **No incoming calls**
2. **10 incoming calls per hour, each lasting approximately 1 minute**

For both scenarios, we compared the power consumption with and without CallerDec installed. Each experiment lasted six hours. The results, shown in Fig. 10(d), indicate that CallerDec consumes almost no extra power when idle. This is because CallerDec is implemented as a background process and is only activated by the `android.intent.action.PHONE_STATE` intent. In the case of receiving 10 incoming calls, CallerDec consumes very little power, approximately 0.01 mV per call, compared to the case where it was not installed.

In summary, CallerDec ensures spoofing detection with minimal additional power consumption.

### Limitations and Future Work

#### Usability
We acknowledge that **NOTSUPPORTED** scenarios may result in an unpleasant user experience due to the need for answering verification calls. However, such scenarios can be eliminated if both parties install CallerDec. We included **NOTSUPPORTED** cases in our mechanism for completeness.

#### Denial of Service (DoS) Attack
CallerDec does not create new types of interfaces for launching DoS attacks. In fact, it can effectively address existing DoS attacks caused by spoofed caller IDs. When an attacker spoofs Alice’s phone number to call Bob, the verification process will be directed to Alice. With CallerDec, the verification process is carried out automatically, allowing Bob to ignore the spoofed call and Alice’s CallerDec to confirm that she did not make the call.

#### PSTN/VoIP
We believe CallerDec could be applicable to PSTN and VoIP networks, as it is agnostic of network types. Validating CallerDec in these networks is a direction for future work.

### Related Work

While caller ID spoofing is a known problem, previously proposed solutions often require cooperation and modification of phone provider networks, imposing additional costs. For instance, TrustID is a corporate service that leverages special interfaces with carriers to detect caller ID spoofing [8].

Cai [27] proposes a system to validate caller ID information based on "originating node information." However, it does not address the problem of fake ID providers and requires customers to rely on their phone providers for verification.

Chow et al. [28] propose the RealName Registry, where telephone providers establish authenticated name registries. Customers register and receive cryptographic certificates. While this addresses some issues, the cost and complexity of introducing cryptographic authentication and PKI are significant.

PinDrop by Balasubramaniyan et al. [29] determines the provenance of a call by evaluating audio artifacts. It is complementary to our scheme, as it requires the receiver to answer the call before verifying the source and cannot validate the origin of a previously unseen caller ID.

Piotrowski et al. [30] consider voice spoofing and propose a watermarking mechanism, but their approach requires modifications to both the caller and callee’s devices, making it useful mainly in closed environments.

### Conclusion

In this paper, we investigated caller ID spoofing attacks and identified that network interconnection protocols enable such attacks. We designed CallerDec, an end-to-end solution that verifies caller ID using a covert channel and timing estimation. We implemented CallerDec on Android-based phones and validated its effectiveness. Although the verification process takes a few seconds, this delay can be hidden when performed in parallel with the voice call.

We studied CallerDec on Android-based phones as a case study, but it can be integrated into other phone terminals to protect users from caller ID spoofing. As more devices support CallerDec, **NOTSUPPORTED** scenarios can be eliminated.

### References

[References listed here as in the original text]

This revised version aims to provide a clearer, more coherent, and professional presentation of the research and findings.