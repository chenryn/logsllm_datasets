Paranoid File Read. Table 1 describes the chain of
events triggered by an application running on a remote
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply. 


Table 2. Sequence of events for writing a reâ€º
mote Paranoid (cid:2)le
Machine
C
Action
close (cid:2)le
C
C
intercept
encrypt (cid:2)le
C PSP
encrypt key
C
S
send (cid:2)le
receive (cid:2)le
S PSP
signature transform
S
write (cid:2)le
Tasks and Explanations
Client application closes a modi(cid:2)ed
Paranoid (cid:2)le
Bypass intercepts the close (cid:2)le op-
eration, passes control
to client
agent.
The client agent generates a random
symmetric key, encrypts the (cid:2)le, en-
crypts the symmetric key with the
group public key, generates a header
which includes a hash of the (cid:2)le.
The client PSP signs the (cid:2)le hash
and signs the header hash.
The client agent connects to the (cid:2)le
server sending a write request along
with the (cid:2)le name and user ID. It
sends the (cid:2)le.
The (cid:2)le server receives the (cid:2)le,
parses the (cid:2)le header, checks mem-
ber authorization.
the
The server PSP transforms
client signature into a group signa-
ture.
The server copies the (cid:2)le into the
appropriate directory.
Writing Remote File. Remote (cid:2)le writes are done on
whole (cid:2)les. When an application creates or modi(cid:2)es a para-
noid (cid:2)le, the client agent performs read and writes on a local
copy. Once the (cid:2)le is closed, the client agent does a remote
write into the Paranoid (cid:2)le system. The client agent en-
crypts the (cid:2)le with a new random symmetric key. The sym-
metric key is encrypted with the memberâ€™s own private key
and the groupâ€™s public key. The encrypted (cid:2)le is attached
to the header and is digitally signed by the writer using his
group private key. The (cid:2)le is sent back to the (cid:2)le server. The
(cid:2)le server on the group ownerâ€™s machine veri(cid:2)es the group
memberâ€™s write authorization. Once credentials and signa-
tures are veri(cid:2)ed, the newer version of the (cid:2)le replaces the
old one. The Paranoid (cid:2)le addresses multiple concurrent
write back consistency by using a last writer wins policy.
However, older versions of (cid:2)les are archived. Remote (cid:2)le
and directory creations are the same as (cid:2)le write operations.
In case a group member has remote (cid:2)le creation rights, the
(cid:2)le server provides a default empty (cid:2)le to the requesting
client agent. Newly created (cid:2)les inherit the same access
groups as the directories they are created on. Alternatively,
default groups can be speci(cid:2)ed in a con(cid:2)guration (cid:2)le.
Table 2 describes the chain of events that follows a re-
mote client write request. Like Table 1, Table 2 has three
columns. The (cid:2)rst column speci(cid:2)es the machine, the sec-
ond column speci(cid:2)es the action, and the third describes the
action and its associated sequence of steps.
3. Key Transformation
The Paranoid (cid:2)le system uses a modi(cid:2)ed version of the
RSA public key cipher [17]. Each access group uses a dif-
, but all the members of a group use the
ferent modulus
same modulus. The modulus and the public exponent of
the group key pair are published and the private exponent
is only known to the group owner. Each group member is
given a random exponent to use as his group private key.
Associated with each group member is a transform key,
known only to the group owner, that can transform a sym-
metric key encrypted with the groupâ€™s public key into the
symmetric key encrypted by the (cid:148)public half(cid:148) correspond-
ing to the memberâ€™s group private key. Thus each group
member can encrypt a symmetric key for group use, but he
can only decrypt a symmetric key after his speci(cid:2)c transfor-
mation is applied to an encrypted key. The transformation
step prevents a group member from granting group access
rights to outsiders without revealing their group private key.
Since this can be easily traced, it is expected to dissuade
leakage. In contrast, systems that hand out the group pri-
vate key to users effectively allow them to add new users
by giving the key to others without any accountability. Fur-
ther, Paranoidâ€™s scheme lets the owner remove a user from
a group without having to re-encrypt any keys or (cid:2)les.
This section describes the transformation in detail. When
a user creates a new group he creates a standard RSA mod-
ulus
are two large random
prime numbers. The group has a public and private key pair,
where
where
and
	
and
, where:

where

! #"%$
($
'&
,
Every group member
that is relatively prime to
random private key
687
group owner also computes the inverse of this key
6!
that:
($
)&
,+.-/+10/+324252
is given a large
. The
, such
;
Additionally, a transform key
lowing formula:
697:6

"%$
is computed using the fol-
! >"%$


:6
?@7AB
is discarded and the transform
The inverse private key
6C
key
is stored in the group de(cid:2)nition (cid:2)le together with the
member identity
. The group de(cid:2)nition (cid:2)le is encrypted
and is kept on the owner machine where it is only accessible
to the (cid:2)le server.
?@7
Assume that a symmetric key
RSA cipher using the public key
EB
I
is encrypted with the
'F
, that is:
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply. 



"




*
*

"
7
7
?
7
7
7
*
D
+
G


+
D
$

$
When user
server computes G
member
asks to read a (cid:2)le encrypted with
, the (cid:2)le-
and sends it to the group
. The group member computes:
DL
Proposition:
?37
?@7
$K$
$K$KMON
$K$KMON
"%$

is a
! >"%$
$K$1MSN
MSN
I(TCU@V
generated by
QED.
TCU
HD
V!IWV
Please note: Applying the transform key
?(7
with his private key
687
ture
the signature
That is:
into a group signature generated with
to a signa-
transforms
.

$OY
! 
$R

The proof is almost identical to the proof of the proposition
above and is left to the reader. Also note that as long as the
group owner keeps
, and the transform keys secret,
he can use the same modulus
for many different access
groups.
Z
,
3.1. Transformation Security
A primary question concerning the key transformation
scheme is how secure is it? The answer is as follows. Since
each group memberâ€™s private key is a large random number,
knowledge of the group public key and a group-memberâ€™s
private key does not give an attacker the ability to gain addi-
tional capabilities beyond impersonating the member. Any
set of collaborating group members could not gain any ad-
ditional capabilities they donâ€™t already have. For example,
if group access privileges were taken away from a set of
group members, they cannot regain group access by collab-
orating. Any group member getting hold of a symmetric
key encrypted with the group public-key could not decrypt
it without knowing the corresponding transform key.
?37
However, the transform keys
and the corresponding transform key
must be kept secret.
Any person that knows both a group-member private-key
can decrypt
any symmetric key encrypted with the groupâ€™s public key
. Thus she can access all the group (cid:2)les, bypassing any
access controls. If she was also able to penetrate the server,
then she could modify (cid:2)les, forge signatures and alter the
group de(cid:2)nition (cid:2)le, adding or subtracting members.
Figure 3. XML headers for Paranoid Files
4. Implementation details and results
4.1. XML
Paranoid (cid:2)les are encrypted and stored in XML format.
An XML header is prepended to the encrypted data. Binary
data, such as encrypted keys, is stored in hexadecimal for-
mat for readability. A simpli(cid:2)ed schema of the XML (cid:2)le
header is given below. The header contains the (cid:2)le access
information along with the protected decryption keys. The
header also contains a list of groups having read or write
access rights. An encrypted symmetric key is stored with
each group name. The (cid:2)le contains a digital signature of
the XML header and the encrypted (cid:2)le.
4.2. Group Files
The XML group de(cid:2)nition (cid:2)le is a list of group members
and membersâ€™ transform keys. The skeleton of one is shown
in Figure 4.
4.3. Client Modules
Applications communicate with the operating system
through the standard library that makes system calls to con-
tact the kernel. Since Paranoid (cid:2)les are kept encrypted,
applications canâ€™t use them without decryption. Making
changes to the operating system or the input and output
library on requires super-user privileges on most systems.
Paranoid uses interposition agents to make sure existing ap-
plications run seamlessly without having any knowledge of
the underlying encrypted (cid:2)le format.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply. 
*
D

+
G


+
D
*
G

?
7
+
G


+
D

$
G

+
G


+
D

$
"
"
?
7
7


7
7
G

+
G


+
D

$

M