D 
调度程序 
A 
I 
G 
F 
E 
2 
3 
指令解码 
指令 
A, B, C, ... 是处理理程序例例如 
handler_add, handler_sub, 
handler_push...   
传统指令集的操作码 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
初始化 
取指 
解码 
RVA à RVA + 进程基础和
其它任务 
指令以加密格式存储。 
DEF"CON"CHINA"1.0"(2019)"
14"
opcode 1 
opcode 2 
opcode 3 
opcode 4 
opcode 7 
opcode 5 
opcode 6 
handler 1 
handler 2 
handler 3 
handler 4 
handler 7 
handler 5 
handler 6 
function pointer 1 
function pointer 2 
function pointer 3 
function pointer 4 
function pointer 7 
function pointer 5 
function pointer 6 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
函数指针表 
(可能加密) 
encr_1 
encr_n 
encr_2 
encr_3 
encr_5 
encr_4 
... 
1 
2 
3 
4 
5 
n-1 
n 
vm_add 
vm_n 
vm_sub 
vm_xor 
vm_push 
vm_pop 
... 
解密指令 
加密指令 
索引 
恢复和解密函数 
DEF"CON"CHINA"1.0"(2019)"
15"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  逆向虚拟化和打包代码容易易吗?当然不不是。挑战可能是巨⼤大的 
J 
ü  记住:混淆是使用任何技巧(包括虚拟化)将代码从A转换为B。 
ü  要确定程序是否虚拟化并不容易。 
ü  处理理程序彼此独⽴立，通常设置为: 
ü  寄存器器 
ü  加密密钥 
ü  内存 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
HITB"2019"AMSTERDAM"
16"
ü  通常按指令类型有⼀一个处理理程序。 
ü  这些处理理程序由VM调度器器“启动”。 
ü  指令的操作数使⽤用处理理程序提供的密钥(初始化代码)加密。 
ü  有时候，秘钥有4个字节，并且使⽤用异或等操作。 J 
ü  不不能虚拟化每个函数的序⾔言和结语。当心 J 
DEF"CON"CHINA"1.0"(2019)"
17"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  你试过打开IDA Pro的封装器器吗?第一眼:只有红⾊色和灰⾊色块(非函
数和数据)。 
ü  最终，数据块可以容纳VM处理理程序…… 
ü  原始代码段可以在程序周围“分割”和“分散”(数据和指令混合在
⼆二进制⽂文件中，⽽而不不是只有⼀一个指令块) 
ü  引⽤用导⼊入函数的指令可以被归零，也可以被NOP替换。L 当
然，它们稍后将被封装器器动态地恢复(重新插入)。 
ü  “隐藏”函数代码可以复制(memcpy())到VirtualAlloc()分配的内存
中，J 当然，代码中必须有⼀一个补丁才能获得这些指令。 
DEF"CON"CHINA"1.0"(2019)"
18"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü 传统打包程序通常不不会虚拟化所有x86指令。 
ü 在打包过程之后，通常会看到虚拟化、本机指令和数据之间的
混合。  
ü 原生API可以重定向到存根代码，存根代码将调⽤用转发给(复制
的)原生DLL(从各自的API)。 
ü API调⽤用指令将直接引用IAT，通常使用RVA将其转换为短跳转，
⽤用于相同的导⼊入地址(“IAT混淆”) J  
ü 更糟的是，API名称可以散列(如在shellcode中使⽤用的那样)。 J  
DEF"CON"CHINA"1.0"(2019)"
19"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü 顺便便问⼀一下，有多少虚拟化指令存在? 
ü 我们是否能够根据操作数及其用途(内存访问、算术、通⽤用等
等)将虚拟指令分组? 
ü 注意指令的主干，将类似的指令类放在⼀一起(例如跳转指令、
直接调⽤用、间接调⽤用等)。 
ü 是否基于(类似)x86指令的虚拟化指令?  
ü 处理理器器标志的含义被修改了了吗? 
DEF"CON"CHINA"1.0"(2019)"
20"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü 从x86模式转换到“虚拟化模式”的“关键指令”是什么? 
ü 记住:通常，寄存器器和标志(EFLAGS)在“跨越”到VM环境之前保存
到堆栈中。 
ü 将控制权转移回x86环境需要哪些负责任的指令? 
ü 很多时候, 在“上下⽂文转换”期间，参数被推送到堆栈上. J 
DEF"CON"CHINA"1.0"(2019)"
21"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  这是快速的建⽴立⼀一个IDA Pro的插件。从这⾥里里下载IDA SDK https://www.hex-
rays.com/products/ida/support/download.shtml (很可能，你需要⼀一个专业账
户)。将其复制到IDA Pro安装⽬目录中的⼀一个⽂文件夹(idasdk695/)。 
ü  在 Visual Studio 2017 创建⼯工程(File à New à Create Project à Visual C++ à 
Windows Desktop à Dynamic-Link Library (DLL)). 
ü  改变⼀一些⼯工程的属性，如这⻚页和下⻚页所示  
DEF"CON"CHINA"1.0"(2019)"
22"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  包含“__NT__;__IDP__” 在处理理器器的定义中。并更改运⾏行行时库  “Multi-
threaded” (MT)  (take care: it is NOT /MTd).   
DEF"CON"CHINA"1.0"(2019)"
23"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  添加ida.lib (from C:\Program Files (x86)\IDA 6.95\idasdk695\lib\x86_win_vc_32) 
到附加依赖项及其⽂文件夹到附加库⽬目录。 
ü  添加 “/EXPORT:PLUGIN” 到附加选项.  
DEF"CON"CHINA"1.0"(2019)"
24"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
不不要忘记必要的申明。 J 
初始化 
使插件对idb可⽤用，并将插件加载到内存中。 
清除任务 
当⽤用户激活插件时调⽤用的函数。 
简单(和不完整)的URL正则表达式。
J 
DEF"CON"CHINA"1.0"(2019)"
25"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
插件将被ALT-X组合激活. J  
插件结构  
它检查字符串串是否与URL regex匹
配.  
如果检查, 所以 ea == strinfo.ea. 
J 
它从“strings view”中获取
字符串串的数量量。   
得到string 
DEF"CON"CHINA"1.0"(2019)"
26"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
在此恶意驱动程序中找到url。J 
ALT - X 
DEF"CON"CHINA"1.0"(2019)"
27"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Ø  解码指令并⽤用结果填充
结构(ana.cpp) 
ü  IDA处理理器器模块仍然是处理理虚拟包装程
序的最佳方法之一。 
ü  请您记住关于如何编写IDA处理理器器模块
的⼏几个要点(正如hex - ray中的Ilfak所提
到的): 
Ø  处理理分析程序(amu.cpp)
解码的命令 
Ø  创建交叉引⽤用。 
Ø  跟踪寄存器内容。 
Ø  跟踪寄存器内容。 
Ø  将输出写⼊入⼀一个已处
理理的输出，其中包含
前缀、注释和xref 
(out.cpp) 
ü  写⼀一个处理理器器 
ü  修改(或编写)
模拟器器 
ü  写一个
outputter 
ü  IDA Pro SDK⽂文档和示例例总是很棒. J 
处理理器器模
块 
DEF"CON"CHINA"1.0"(2019)"
28"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü 负责将x86指令转换为VM指令的VM解释器器代码通常⽐比较混乱。 
ü 自己的VM指令也被压缩和加密(主要是xor 'ed) 
ü 正如我前面提到的，通常只有一个x86指令对应许多VM指令代码。 
ü 有两个堆栈:一个来自x86领域，另⼀一个来⾃自VM领域。 
ü 来⾃自虚拟化上下⽂文的堆栈可能会向上增⻓长，这与x86标准不不同。 
ü 有时候，保护者不不会将x86上下⽂文复制到虚拟机中。在这种情况下，
它更更愿意保存上下文(注册内容+标志)以便稍后使用。 
DEF"CON"CHINA"1.0"(2019)"
29"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü 找出VM指令的大小很有趣，我们可以将其放⼊入表示加密密
钥、数据、RVA(位置)、操作码(类型)等的结构中。 
ü 由于⾃自定义虚拟化包装器器没有针对每个x86指令的虚拟化指
令，所以建议找到针对本机x86指令的处理理程序(⾮非虚拟化指
令))  
ü 通常，⾮非虚拟化指令的处理理程序会在短时间内从VM环境中退
出，执⾏行行x86指令并返回到虚拟机环境。 
ü 在本例中，x86指令也与虚拟化指令⼀一起被加密和压缩。 
DEF"CON"CHINA"1.0"(2019)"
30"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  常量展开:模糊处理理程序使⽤用的⼀一种技术，它⽤用⽣生成相同结果常量量值
的⼀一组代码来替换内容。 
ü  基于模式的混淆:⽤用⼀一组等价指令交换⼀一条指令。 
ü  滥⽤用内联函数。 
ü  反VM技术:防⽌止恶意软件样本在VM中运行。 
ü  死代码(垃圾代码):这种技术是通过插⼊入代码来实现的，这些代码的
结果将在下⼀一⾏行行代码中被覆盖，或者更更糟的是，它们将不不再被使
⽤用。 