            pmio_write(pmio_base+0,0);
        pmio_write(pmio_base+4,1);
    }
代码中的 pmio_base 的位置可以通过查看设备的 BAR 内容来确定
在内核态访问 PMIO 操作是和用户态类似的，区别在于内核态不用申请权限、头文件需要使用以下两个。
    #include  
    #include 
###  1.4 调试
**调试**
使用 gdb 附加调试运行中的 QEMU 并加载二进制文件中的符号，执行如下代码：
    sudo gdb ./qemu-system-x86_64
    attach 相应的进程号
进程号使用 ps -aux 可以看到
###  1.5 执行 EXP
执行 EXP 需要区分为两种情况，分别是本地执行和远程执行。
**1.5.1 本地执行**
这里推荐使用重新打包的方法，这种方法可以无视系统的具体环境限制
为了方便打包，我这里写了一个脚本
**uncpio**
    #!/bin/bash
    set -e
    cp $1 /tmp/core.gz
    unar /tmp/core.gz -o /tmp/
使用方式：uncpio xxx.cpio
脚本会执行：解压参数 1 中指定的 cpio 文件到 /tmp/core 目录
**encpio**
    #!/bin/sh
    set -e
    musl-gcc  -static -O2 $1 -o /tmp/core/bin/EXP
    cd /tmp/core/
    find . -print0 | cpio --null -ov --format=newc > /tmp/new.cpio
    cd -    cp /tmp/new.cpio ./new.cpio
使用方式：encpio exp.c
脚本会执行：把参数 1 中指定的 exp.c 使用 musl-gcc 编译，然后放入 uncpio 解包出的文件（在/tmp/core
）中，对其重新打包后，再把文件复制到执行目录下的 new.cpio 文件中。
修改 launch.sh 文件把加载文件替换为 new.cpio ，进入系统后执行 /bin/EXP 即可执行 EXP 代码。
**1.5.2 远程执行**
远程执行需要考虑的就是如何上传 EXP，这里提供两种方式，适用于不同的环境（如果是普通用户权限，修改代码中的 cmd 为 “$ “）
**上传脚本 1（一次性发送全部数据）**
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import os
    # context.log_level = 'debug'
    cmd = '# '
    def exploit(r):
        r.sendlineafter(cmd, 'stty -echo')
        os.system('musl-gcc  -static -O2 ./poc/exp.c -o ./poc/exp')
        os.system('gzip -c ./poc/exp > ./poc/exp.gz')
        r.sendlineafter(cmd, 'cat  exp.gz.b64')
        r.sendline((read('./poc/exp.gz')).encode('base64'))
        r.sendline('EOF')
        r.sendlineafter(cmd, 'base64 -d exp.gz.b64 > exp.gz')
        r.sendlineafter(cmd, 'gunzip ./exp.gz')
        r.sendlineafter(cmd, 'chmod +x ./exp')
        r.sendlineafter(cmd, './exp')
        r.interactive()
    # p = process('./startvm.sh', shell=True)
    p = remote('nc.eonew.cn',10100)
    exploit(p)
**上传脚本 2（分段传输）**
    #coding:utf8
    from pwn import *
    import base64
    context.log_level = 'debug'
    os.system("musl-gcc 1.c -o exp --static")
    sh = remote('127.0.0.1',5555)
    f = open('./exp','rb')
    content = f.read()
    total = len(content)
    f.close()
    per_length = 0x200;
    sh.sendlineafter('# ','touch /tmp/exploit')
    for i in range(0,total,per_length):
       bstr = base64.b64encode(content[i:i+per_length])
       sh.sendlineafter('# ','echo {} | base64 -d >> /tmp/exploit'.format(bstr))
    if total - i > 0:
       bstr = base64.b64encode(content[total-i:total])
       sh.sendlineafter('# ','echo {} | base64 -d >> /tmp/exploit'.format(bstr))
    sh.sendlineafter('# ','chmod +x /tmp/exploit')
    sh.sendlineafter('# ','/tmp/exploit')
    sh.interactive()
## 02 QEMU 逃逸题目实战
这里以我第一个在比赛中做出的 QEMU 逃逸题：”HWS2021 FastCP” 为例。
###  2.1 定位设备
我们首先查看启动命令
    #!/bin/sh
    ./qemu-system-x86_64 -initrd ./initramfs-busybox-x64.cpio.gz -nographic -kernel ./vmlinuz-5.0.5-generic -append "priority=low console=ttyS0" -monitor /dev/null --device FastCP
在启动命令的提示下，很容易就能在 qemu-system-x86_64 里面找到 FastCP 设备的具体实现，我们使用 IDA Pro
载入文件，等待加载完毕后，在右侧函数列表搜索 FastCP。
根据上文所说的，我们首先需要定位到 FastCP_class_init 来确定 vendor_id 和 device_id，并且通过这两个值来确定
lspci 的结果。
这里我们修改 v3 设备的类型为 PCIDeviceClass，再根据赋值来确定设备
执行 launch.sh，启动 QEMU 程序，启动后登陆 root 账号，并执行 lspci
    # lspci
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 00ff: dead:beef
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
确定内容为 00:04.0 这一行设备，尝试访问其对应的资源
    # ls /sys/devices/pci0000\:00/0000\:00\:04.0/
    ari_enabled               firmware_node             resource
    broken_parity_status      irq                       resource0
    class                     local_cpulist             revision
    config                    local_cpus                subsystem
    consistent_dma_mask_bits  modalias                  subsystem_device
    d3cold_allowed            msi_bus                   subsystem_vendor
    device                    numa_node                 uevent
    dma_mask_bits             power                     vendor
    driver_override           remove
    enable                    rescan
我们可以看到其存在 resource0，这意味设备存在 mmio 空间，并且不存在 resource1，这意味着设备不存在 pmio
空间。这一点与我们之前在 IDA 中搜索得到的函数列表是吻合的。
###  2.2 QEMU 设备逆向
**2.2.1 初始化函数**
确定了设备位置后，我们接下来就是看设备对象初始化函数 **FastCP_instance_init**
，为了方便观看，首先我们要还原变量类型。而变量类型实际上是储存在符号中的，我们可以通过 Shift + F1 打开 Local Types 窗口查看。
通过搜索可以定位到相关的三个类型信息，可以知道类型信息是存在的，只是 IDA 的伪代码没能够自动还原，我们可以通过按下 Tab
定位到汇编代码中给出的类型来还原。
根据图中的类型提示，分别设置参数类型为 Object_0 ，变量类型为 FastCPState ，得到的伪代码如下：
就可以很清楚的看到这个函数做了各种各样的初始化操作，之后的函数也用这种方法来还原类型信息，之后就不再赘述。
**2.2.2 MMIO READ**
知道初始化的内容后，我们就要在 mmio 操作中寻找对应的漏洞，我们首先来看 fastcp_mmio_read 函数。
这个函数用于返回几个操作值，操作值具体的意义可以根据名称大概猜出。同时需要特别注意的是这里限制的 size 的大小，size 的大小不为 8 则会直接返回
-1，这意味着我们在调用 mmio_read 操作的时候需要使用的类型是 uint64_t。
操作列表如下
地址 | 操作  
---|---  
0x8 | 读取 cp_state.CP_list_src  
0x10 | 读取 cp_state.CP_list_cnt  
0x18 | 读取 cp_state.cmd  
这个函数内容较少，逻辑清晰可见，暂时未能看出漏洞。
**2.2.3 MMIO WRITE**
在 QEMU 逃逸的题目中，主要的漏洞位置都是在 MMIO WRITE 中，所以我们需要特别关注。
操作列表如下
地址 | 操作  
---|---  
0x8 | 设置 cp_state.CP_list_src  
0x10 | 设置 cp_state.CP_list_cnt  
0x18 | 设置 cp_state.cmd 并触发 Timer  
通过操作可以了解到，关键的函数还是在时钟函数中，而且通过 cp_state.cmd 来传参
**2.2.4 CP TIMER**
此函数通过 Timer 来调用，并且通过 MMIO WRITE 设置
操作列表如下
命令 | 操作  
---|---  
1 | 当 CP_list_cnt 大于 0x10 的时候：依次遍历 CP_list_src，每个结构的 CP_cnt 作为长度，把
CP_src 先复制到 CP_buffer，再从 CP_buffer 复制到 CP_dst（相当于从 CP_src 到 CP_dst）。当
CP_list_cnt 不大于 0x10 的时候：做无意义的操作  
2 | CP_cnt 作为长度（最大 0x1000 字节），从 CP_src 读取内容写到 CP_buffer 中  
4 | CP_cnt 作为长度（最大 0x1000 字节），从 CP_buffer 写出到 CP_dst 中  
以上操作在操作前会设置 handling 为 1，操作结束后设置 handling = 0 和 cmd = 0。
漏洞还是比较明显的，在命令为 1 且 CP_list_cnt 大于 0x10 的时候，复制前没有检测 CP_cnt 是否会大于 0x1000 字节，而在
FastCPState 的结构中（结构如下）
    00000000 FastCPState     struc ; (sizeof=0x1A30, align=0x10, copyof_4530)
    00000000                                         ; XREF: pci_FastCP_uninit+23/o
    00000000                                         ; pci_FastCP_realize+59/o ...
    00000000 pdev            PCIDevice_0 ?           ; XREF: pci_FastCP_realize+9A/r
    000008F0 mmio            MemoryRegion_0 ?        ; XREF: pci_FastCP_realize+77/r
    000008F0                                         ; pci_FastCP_realize+9D/o ...
    000009E0 cp_state        CP_state ?              ; XREF: FastCP_instance_init+57/r
    000009E0                                         ; FastCP_instance_init+62/r ...
    000009F8 handling        db ?                    ; XREF: FastCP_instance_init+78/w
    000009F8                                         ; fastcp_mmio_read+55/r ...
    000009F9                 db ? ; undefined
    000009FA                 db ? ; undefined
    000009FB                 db ? ; undefined
    000009FC irq_status      dd ?                    ; XREF: pci_FastCP_realize+B4/w
    00000A00 CP_buffer       db 4096 dup(?)          ; XREF: FastCP_instance_init+23/r
    00000A00                                         ; FastCP_instance_init+2A/r ...
    00001A00 cp_timer        QEMUTimer_0 ?           ; XREF: pci_FastCP_uninit+23/o
    00001A00                                         ; pci_FastCP_realize+59/o ...
    00001A30 FastCPState     ends
CP_buffer 最大只有 0x1000 字节，在复制的中间过程中，如果设置 CP_cnt 为一个大于 0x1000 的值，就可以溢出到
cp_timer。同时如果我们利用这个功能，也可以读取到 cp_timer 上的内容。
###  2.3 利用
cp_timer 的结构（QEMUTimer）：
    00000000 QEMUTimer       struc ; (sizeof=0x30, align=0x8, copyof_1182)
    00000000                                         ; XREF: FastCPState/r
    00000000 expire_time     dq ?
    00000008 timer_list      dq ?                    ; offset
    00000010 cb              dq ?                    ; offset
    00000018 opaque          dq ?                    ; offset
    00000020 next            dq ?                    ; offset
    00000028 attributes      dd ?
    0000002C scale           dd ?
    00000030 QEMUTimer       ends
想用成功利用，需要分成两步：
  * 通过溢出的读取，泄露 cp_timer 结构体，其中存在 PIE 基址（计算出 system[@plt](https://github.com/plt "@plt") 的地址）和堆地址（整个结构的位置在堆上，计算出结构的开始位置，才能得到我们写入 system 参数的位置）。
  * 通过溢出的写入，覆盖 cp_timer 结构体控制程序执行流
触发时钟可以利用两种方式：
  * 虚拟机重启或关机的时候会触发时钟，调用 cb(opaque)
  * 在 MMOI WRITE 中可以触发时钟
system 执行内容：