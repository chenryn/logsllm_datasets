r
t
e
R
d
n
a
l
o
r
t
n
o
C
i
g
n
k
c
e
h
C
r
o
r
r
E
Transmission
Control Signals
for MUXES
Error 
Check 
Unit
Control 
Signals
Retransmission 
Control Logic
Figure 3. Proposed transmission/retransmission 
buffer architecture
Transmission 
Retransmission
Buffer
(FIFO)
CLK 0
Retransmission 
Buffer (Barrel Shifter)
H1
Link
Error Check 
Logic
Retransm. Buffer not 
shown here for clarity
D3 D2 H1
D2
h1
T4 D3 D2
H1
CLK 5
d3
d2 h1 T4
D3
D2
H1 D3 D2
Data Out
(one flit)
D2 H1
CLK 1
d2
h1 T4 D3
D2
* indicates 
error detected, 
not corrected
H1*
H1
T4 D3 D2
D3
CLK 6
t4
d3 d2 h1
T4
D3
D2 H1 D3
D3 D2 H1
NACK
DROP
h1 T4 D3
T4
CLK 2
d3
d2 h1 T4
D3
D2
H1
CLK 7
t4 d3 d2
h1
T4
D3 D2 H1
H1 D3 D2
DROP
Whole packet TXed
CLK 3
d3
d2 h1 T4
H1
D3
D2 H1
Four flits per packet assumed:
BLOCK
D2 H1 D3
H1
CLK 4
d3
d2 h1 T4
D2
H1
D3 D2 H1
H1 – Header flit
D2 – Data flit
D3 – Data flit
T4 – Tail flit
h1 – Header flit of next packet
d2 – Data flit of next packet
d3 – Data flit of next packet
t4 – Tail flit of next packet
traversal  from  router  to  router,  and  intra-router  errors 
occurring within individual router components. The latter will 
be discussed in Section 4. This section focuses on link errors, 
which  are  mostly  caused  by  channel  disturbances  such  as 
cross-talk, coupling noise and transient faults [20]. Link errors 
have been studied extensively by researchers, since they have 
so  far  been  considered  the  dominant  source  of  errors  in  on-
chip  network  fabrics.  They  have  been  tackled  within  the 
context of two central themes – correction and retransmission. 
Some degree of error correction can be achieved through the 
use  of  Error  Correcting  Codes  (ECC),  as  in  [21,  22].  These 
codes  achieve  what  is  known  as  Forward  Error  Correction 
(FEC). Similarly, retransmission schemes can also be used to 
compensate for link errors. 
Hybrid techniques [6], which provide both error correction 
and retransmission, allow for more robust protection of data. 
Hybrid  solutions  compensate  for  the  limitations  of  error 
correcting  codes.  For  example,  Single  Error  Correction  and 
Double Error Detection (SEC/DED) codes can correct at most 
one  error,  but  can  detect  double-bit  errors.  Therefore,  upon 
detection of a double-bit error, the SEC/DED unit may invoke 
a retransmission mechanism. Retransmission can occur in two 
different forms: End-to-End (E2E) or Hop-by-Hop (HBH). In 
an  E2E  scheme,  the  original  data  is  checked  only  at  the 
destination node, while in an HBH scheme, data is checked in 
all routers along the path from a source to a destination. Both 
flavors  require  dedicated  buffers,  as  opposed 
to  FEC 
techniques,  but  they  can  handle  multiple-bit  errors,  since  a 
clean copy of the data is always maintained. 
Both  FEC  techniques  and  E2E  retransmission  schemes 
suffer severely from errors in the header flit. For example, if 
the  destination  node  address  of  a  packet  is  corrupted  during 
the transfer, the packet might be routed to a wrong destination. 
Even  if  FEC  can  correct  the  error  at  the  (wrong)  destination 
node,  the  packet  should  be  sent  to  the  correct  destination 
creating  additional  network  traffic.  Similarly,  E2E  schemes 
need  to  send  a  retransmission  request  from  the  wrong 
destination  to  the  source  node.  Moreover,  if  the  source  node 
address 
the 
retransmission  request  to  the  correct  source.  Thus,  it  is  very 
important 
information  from  being 
contaminated even if the probability of header error is small. 
techniques  cannot  send 
is  corrupted,  E2E 
the  header 
to  keep 
Figure 4. HBH retransmission mechanism 
[1]  addressed  this  problem  by  adopting  HBH  header  error 
checking in both FEC and E2E schemes. Figure 5 shows that 
E2E schemes suffer from prohibitive latency penalties as error 
rates increase. E2E schemes also require larger retransmission 
buffers  to  account  for  worst  case  round-trip  delay  between  a 
source and destination [1]. 
Considering all these aspects, HBH retransmission together 
with FEC seems to be the best choice to handle link faults. To 
that  extend,  we  propose  a  minimal-overhead  flit-based  HBH 
retransmission  scheme.  The  impact  of  the  additional  buffer 
overhead  is  mitigated  by  utilizing  these  same  buffers  for  a 
newly-proposed  deadlock  recovery  mechanism,  discussed  in 
Section 3.2. 
3.1. A Flit-based HBH retransmission scheme 
Our  proposed  minimal  overhead  HBH  retransmission 
scheme requires a 3-flit-deep retransmission buffer per virtual 
channel, since a flit should be kept for 3 cycles after it leaves 
the current node. This 3 cycle delay corresponds to the sum of 
the link traversal delay (1 cycle), error checking delay at the 
adjacent  receiving  node  (1  cycle),  and 
the  Negative 
Acknowledgement (NACK) propagation delay (1 cycle). The 
retransmission buffer is implemented as a barrel-shift register. 
This  way,  a  flit  is  stored  at  the  back  of  the  buffer  upon 
transmission on the link, and it moves to the front by the time 
a possible NACK signal arrives from the receiving node. The 
simplest  type  of  transmission  buffer  is  a  First-In-First-Out 
(FIFO) buffer. Such an implementation has one input port and 
one  output  port,  and  involves  simple  control  logic.  The 
proposed architecture is shown in Figure 3. 
Conceptually,  our  proposed  scheme  works  similar  to  the 
simple retransmission schemes described in [23-25]. However, 
in terms of implementation, [23, 24] use a single transmission 
buffer that contains both sent and unsent flits together, and use 
pointers to track their positions. This requires that every buffer 
slot  has  an  exit  port  so  that  flits  can  be  transmitted  from  the 
middle  of  the  buffer.  This  complicates  the  logic  and  incurs 
wiring  overhead.  Further,  they  use  both  acknowledgement 
(ACK),  as  well  as  NACK  signals,  whereas  our  proposed 
scheme only sends NACK signals when an error is detected. 
[25] uses link-level retransmission together with the Unique-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:28:17 UTC from IEEE Xplore.  Restrictions apply. 
l
)
s
e
c
y
c
(
y
c
n
e
t
a
L
160
140
120
100
80
60
40
20
0
Latency vs. Error rate
(Inj. Rate: 0.25 flits/node/cycle)
HBH
E2E
FEC
l
)
s
e
c
y
c
(
y
c
n
e
t
a
L
50
40
30
20
10
0
Latency vs. Error rate
(Inj. Rate: 0.25 flits/node/cycle)
NR
BC
TN
)
J
n
(
y
g
r
e
n
E
1
0.8
0.6
0.4
0.2
0
Energy per message vs. Error rate
(Inj. Rate: 0.25 flits/node/cycle)
NR
BC
TN
0.00001 0.0001
0.1
Figure 5. Latency of different   
0.001
Error Rate
0.01
error handling techniques 
0.00001 0.0001
0.001
Error Rate
0.01
0.1
Figure 6. Latency overhead of the 
HBH retransmission scheme 
0.00001 0.0001
0.1
Figure 7. Energy overhead of the 
0.001
Error Rate
0.01
HBH retransmission scheme
Token  Protocol  (UTP)  to  ensure  reliability.  However,  it 
requires  at  least  two  copies  of  a  packet  at  all  times  in  the 
network,  increasing  buffer  occupancy  and  flow  control 
complexity. 
In  case  of  a  flit  error  in  the  proposed  scheme,  two 
subsequently  arriving  flits  must  be  dropped  until  the  correct 
flit arrives from the previous node upon retransmission. Once 
the  correct  flit  is  received,  all  previously  dropped  flits  must 
then  be  retransmitted.  This  scenario  is  illustrated  with  a  flit-
flow example in Figure 4. The example traces the operation of 
the HBH retransmission mechanism when the header flit H1 is 
corrupted during link traversal. A clean copy of H1 is stored 
in the retransmission buffer when H1 is sent to the link. The 
error  check  logic  detects  errors  in  H1  in  the  receiving  node 
and sends a NACK signal to the transmitting node in the next 
clock cycle. As seen in Figure 4, the receiving router drops the 
subsequent two flits (D2 and D3).   
While  this  may  seem  an  inefficient  recovery  method,  it 
should  be  noted  that  a  retransmission  event  will  be  highly 
unlikely under normal operation, since the architecture already 
employs  a  single-error  correction  scheme.  While 
the 
probability  of  a  double  (or  higher)  error  within  a  single  flit 
may not be insignificant due to crosstalk, it is still low in on-
chip  networks.  Furthermore,  the  corrected  flit  (H1  in  the 
example  of  Figure  4)  arrives  within  3  clock  cycles.  This 
implies  that  only  two  flits  need  to  be  dropped  during  a 
retransmission event. Retransmission of these two flits incurs 
a  latency  penalty  of  two  clock  cycles.  Therefore,  a  possible 
latency improvement of two clock cycles does not warrant the 
implementation of a more complex architecture, which would 
be  able  to  handle  in-situ  re-arrangement  of  flits  within  each 
router.  While  such  implementations  are  very  common  in 
macro networks, they are prohibitive in on-chip environments, 
because the latter have a much stricter area and power budget. 
The  excessive  area  and  power  penalty  imposed  by  these 
modifications,  compounded  by 
increased  wiring 
complexity,  clearly  overshadow  the  small  improvement  in 
latency during a low-probability retransmission event.   
the 
Cycle-accurate simulation of the proposed scheme with the 
three  traffic  patterns  (NR,  BC,  TN)  in  an  8x8  network 
validates  these  assertions,  as  shown  in  Figure  6.  The 
retransmission  scheme  is  so  efficient  that  average  latency 
remains  almost  constant  even  up  to  10  %  error  rate.  This 
behavior  is  a  direct  consequence  of  the  minimal  latency 
incurred  during  a  retransmission,  as  shown  in  Figure  4. 
Furthermore, 
two 
adjacent hops; this restricts movement of retransmitted flits to 
a single inter-router link, which, in turn, has  minimal impact 
retransmission  occurs  only  between 
on  overall  network  traffic.  Similarly,  Figure  7  illustrates  the 
negligible  effect  of  the  proposed  scheme  on  the  energy-per-
packet  metric.  Since  retransmission  is  done  on  a  hop-by-hop 
basis for individual flits, the power overhead  of a single-hop 
flit  transmission  is  insignificant  compared  to  the  total  power 
budget  for  complete  packet  traversal  from  a  source  to  a 
destination. 
It  should  be  noted  that  the  retransmission  buffer  also 
constitutes  an  essential  component  of  our  proposed  deadlock 
recovery  scheme,  which  is  analyzed  in  detail  in  Section  3.2. 
Utilizing  the  same  hardware  for  both  schemes  further 
subsidizes  the  area  and  power  overhead  incurred  by  the 
additional circuitry. 
3.2. Deadlock Recovery 
these  methods 
The concept of deadlock has been extensively researched in 
the  literature.  Some  researchers  use  preventive  schemes  [26, 
27],  while  others  propose  recovery  schemes  [28,  29]. 
However, 
typically  place  constraints  on 