User: 请回答以下安全问题为什么我不能让客户直接连接到我的数据库？我很确定这是一个愚蠢的想法，但我想知道为什么，请耐心等待。
后端开发人员所做的许多工作都是通过HTTP向客户提供CRUD访问，本质上是将数据从内部数据库映射到内部数据库。客户通过加密连接使用某种凭据对web服务进行授权，web服务验证数据并对后端数据库执行查询，然后将结果返回给客户端。
总的来说，这只是一种更糟糕的直接与数据库交互的方式：几乎没有人完全实现REST规范，迟早你会得到家常菜式的通用过滤、排序或分页，而SQL已经支持所有这些了。
这让我想知道：为什么不通过公开SQL端口，完全跳过HTTP API来让客户访问数据库？这有很多优点：
客户端必须使用客户端证书加密连接
我们可以使用内置在服务器中的访问控制，或者只使用每个客户的shard数据库
（我的-）SQL权限非常细粒度，所以我敢打赌不应该有任何明显的安全问题
性能应该更好，因为我们跳过了整个HTTP通信和web应用代码
新功能是数据库迁移的问题，一切都反映在模式中
为用户提供了强大的查询功能，无需付出任何额外的努力
缺点似乎包括无法支持多个模式版本，尽管我认为谨慎的弃用（可能还有客户端SDK）应该将影响降至最低。
由于似乎没有人这样做，所以肯定存在我忽略的安全风险。为什么我们不能为客户提供公共SQL访问？可能出了什么问题？（请记住，这只是出于好奇而进行的一次思想实验）

Assistant: TL，DR：不要。
（我的-）SQL权限非常细粒度，所以我敢打赌不应该有任何明显的安全问题
即使有记录级别的许可，它也很容易扩展。如果用户在表上不受SELECT限制，他们可以选择该表上的任何记录，即使是不属于他们的记录。工资表会很糟糕。如果任何用户都有DELETE或UPDATE，他们可能会忘记WHERE子句，那么您的表就不见了。它甚至发生在DBA身上，那么为什么它不会发生在用户身上呢？
性能应该更好，因为我们跳过了整个HTTP通信和web应用代码
使用应用验证、筛选、授予和拒绝访问时，您会放弃所有的安全性、审核、筛选和真正细粒度的权限控制。通常，花在事务上的大部分时间是数据库处理查询。应用代码少于此，您不会删除HTTP通信，只需将其替换为SQL通信。
新功能是数据库迁移的问题，一切都反映在模式中
这就是为什么这么多人使用“电子表格作为数据库”。当你需要协调来自多个来源的数据时，这是一场噩梦。
为用户提供了强大的查询功能，无需付出任何额外的努力
这就像把一台强大的发动机装在骨架底盘上，用螺栓固定在座位上，然后带它去参加比赛。没有多余的重量使汽车减速，所以速度很快！
这里也是一样。当然，它快速而强大，但没有应用提供的安全措施，没有会话、记录级访问控制、“用户做他们允许做的事情”或审计。
web应用上最常见的漏洞之一是SQL注入，您正在为用户提供SQL控制台。你给他们各种各样的枪，很多子弹，还有你的脚，你的手，你的头。。。他们中的一些人不喜欢你。