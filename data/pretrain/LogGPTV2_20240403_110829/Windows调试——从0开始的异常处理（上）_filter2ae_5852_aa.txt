# Windows调试——从0开始的异常处理（上）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
windows调试艺术主要是记录我自己学习的windows知识，并希望尽可能将这些东西在某些实际方面体现出来。
ps:本篇文章中的内容涉及到上次文章刚提到过的一些知识点，如果中间有不懂的地方可以参考上一篇文章
再ps：所有文中提到另外会写的……尽量不鸽（咕咕咕）
windows的异常处理一直是大家关心的重点，不管是对操作系统的学习还是windows的漏洞利用，都逃不过异常处理，这篇文章将会从windows异常的基础、维护异常信息的结构、异常的详细处理、SEH和VEH等方面来详细讨论Windows下的异常处理机制并通过《格蠹汇编》一书中的几个课后实验来说明异常在调试中的实际应用。
## 什么是异常？
简单来说异常就是对于非预期状况的处理，当我们在运行某个程序时出现了异常状况，就会进入异常处理流程
    发现异常 -> 寻找处理异常的方法 -> 恢复执行或者发生错误
异常又可以分为软件异常（由操作系统或应用程序引发的）、硬件异常（由cpu产生），其中硬件异常又和中断、系统调用等行为有着密切的联系，下面就来具体讨论一下。
###  硬件异常
硬件异常可以分为三种：
  * fault，在处理此类异常时，操作系统会将遭遇异常时的“现场”保存下来（比如EIP、CS等寄存器的值），然后将调用相应的异常处理函数，如果对异常的处理成功了（没成功的情况会在下文中提到），那就恢复到原始现场，继续执行。最经典的fault例子莫过于Page Fault了，在分页机制下，当我们读到某个还未载入到内存的页时，就会触发该异常，操作系统会将该页载入内存，然后重新执行读取该页的指令，这是分页机制实现的重要机制。
  * trap，在处理此类异常时，操作系统会将异常的“下文”保存，在处理异常后，直接执行导致异常的指令的下一条指令。我们在调试过程中常用的断点操作就是基于这类异常的，当我们在某处下断点时调试器会将原本此处的指令对应的十六进制保存下来，然后替换第一个字节替换为0xCC的，也就是int 3，造成断点异常，中断（此处的中断用的是break，而我们一般说的中断是interrupt，请读者务必区分清楚）到调试器，程序在运行到此处就会停止等待下一步的指令，而当我们继续执行时调试器就会将该指令替换为原来的指令，程序也就恢复正常执行了。不知道大家有没有注意过，在进行程序调试时经常会看见hex界面显示大量的“烫烫烫”，这其实是0xcc对应的中文字符，因为这些地址的内容程序并不想让我们访问，一旦我们访问这些地址，就会读到0xcc，程序也就“中断”了。
  * abort，中止异常，主要是处理严重的硬件错误等，这类异常不会恢复执行，会强制性退出。
在windows系统中，硬件异常和中断被不加区分的存放在了一个向量表中，也就是我们常说的IDT（interruption descriptor
table），我们可以使用windbg（注意要在内核调试状态，笔者打印的是64位的情况）的!idt指令来查看IDT，不过windbg打印出的并不是真正的IDT结构，而是经过“解析”后的，更易于我们查看。表中前面的序号代表着它对应的是第几个中断或异常，后面的函数则是对这种异常或中断的处理函数，也叫做异常处理例程。
    lkd> !idt
    Dumping IDT: fffff80743286000
    00:    fffff80740dd5100 nt!KiDivideErrorFaultShadow
    01:    fffff80740dd5180 nt!KiDebugTrapOrFaultShadow    Stack = 0xFFFFF8074328A9E0
    02:    fffff80740dd5200 nt!KiNmiInterruptShadow    Stack = 0xFFFFF8074328A7E0
    03:    fffff80740dd5280 nt!KiBreakpointTrapShadow
    04:    fffff80740dd5300 nt!KiOverflowTrapShadow
    05:    fffff80740dd5380 nt!KiBoundFaultShadow
    06:    fffff80740dd5400 nt!KiInvalidOpcodeFaultShadow
    07:    fffff80740dd5480 nt!KiNpxNotAvailableFaultShadow
    08:    fffff80740dd5500 nt!KiDoubleFaultAbortShadow    Stack = 0xFFFFF8074328A3E0
    09:    fffff80740dd5580 nt!KiNpxSegmentOverrunAbortShadow
    0a:    fffff80740dd5600 nt!KiInvalidTssFaultShadow
    0b:    fffff80740dd5680 nt!KiSegmentNotPresentFaultShadow
    0c:    fffff80740dd5700 nt!KiStackFaultShadow
    0d:    fffff80740dd5780 nt!KiGeneralProtectionFaultShadow
    0e:    fffff80740dd5800 nt!KiPageFaultShadow
    0f:    fffff80740dd62f8 nt!KiIsrThunkShadow+0x78
    10:    fffff80740dd5880 nt!KiFloatingErrorFaultShadow
    11:    fffff80740dd5900 nt!KiAlignmentFaultShadow
    12:    fffff80740dd5980 nt!KiMcheckAbortShadow    Stack = 0xFFFFF8074328A5E0
    13:    fffff80740dd5a80 nt!KiXmmExceptionShadow
    14:    fffff80740dd5b00 nt!KiVirtualizationExceptionShadow
    15:    fffff80740dd5b80 nt!KiControlProtectionFaultShadow
真正的IDT实际上是维护了多个门描述符（GD），每一项大小为8（64位为16），IDRT寄存器中保存着IDT的基地址，我们想具体找某个GD的话直接利用IDTR+8*offset即可。门描述符结构如下：
GD大致由segment
selector（段选择子）、offset（选定段后的偏移）、DPL（描述符特权级）、P（段是否存在）组成，在上一次的《windows调试艺术》中我已经详细的说明了如何通过该结构寻找GDT/IDT进而找到相应的内容，这里就不再展开说了。
当windows系统启动时，winLoad会在实模式下分配一块内存，使用CLI指令来禁止中断的使用，利用LIDT（Load
IDT）指令将IDT表的位置和长度等信息交给CPU，接着系统恢复保护模式，这时的执行权交还给了入口函数，调用SIDT（set
IDT）拿到之前存储的IDT的信息，并将其记录到PCR中，接着其他处理器也会进行初始化的操作，复制并修改自己的IDT，在一切准备就绪后，调用STL指令恢复中断的使用。调用的函数链如下：
    winLoad -> kiSystemStartup -> kiInitializePcr ->keStartAllProcessors -> kiInitProcessors
这里的PCR也就是上一次《windows调试艺术》中我们所说的Ring0下fs寄存器，我们可以使用内核调试状态下的windbg来查看相关的内容
  * 第一个字段指向的是TIB，上一篇文章具体解释过了，我们重点关注的是第一个，exception的list的地址，也就是异常处理注册链表，是我们后面的重点。
  * Prcb是指Process Control Block，实际上在操作系统将IDT的信息交付给PCR的过程中，也会交给它。
  * IRQL也就是中断请求级别，0代表当前cpu的IRQL是内核态
  * IDT和GDT分别是前面提到的两个表的地址
  * TSS是任务段地址
  * CurrentThread也就是当前线程的EThread地址
  * NextThread是下一个准备执行的线程的地址
  * idleThread是一个优先级最低的线程，也可以把它叫做空闲线程，可以简单理解为它是个在“休息”的线程
在上述过程进行完成之后，实际上我们的异常还是仅仅被“处理了一部分”而已，大多数IDT中记录的函数都只是对异常进行了包装和描述，之后还要采用异常分发机制来进一步进行异常处理。
###  软件异常
软件异常是由操作系统或应用程序产生的，它又包含了windows为我们定义好的异常处理和我们自己写的异常处理（各种编程语言中的try-catch结构）。这类异常追根溯源都是基于RaiseException这个用户态API和NtRaiseException的内核服务建立起来的。RaiseException的函数原型：
    void RaiseException(DWORD dwExceptionCode , DWORD dwExceptionFlags,DWORD nNumberofArguments,const DWORD* lpArguments);
  * dwException是异常状态码，可以在NtStatus.h中找到，应用程序也可以有自己的异常状态码
  * nNumberofArguments和lpArguments是用来定义异常的数据
函数的功能十分简单，它会将异常的相关信息传入一个维护异常的结构，叫做EXCEPTION_RECORD，然后再去调用RtlRaiseException函数，该结构定义如下：
    typedef struct _EXCEPTION_RECORD {
      DWORD                    ExceptionCode;
      DWORD                    ExceptionFlags;
      struct _EXCEPTION_RECORD *ExceptionRecord;
      PVOID                    ExceptionAddress;
      DWORD                    NumberParameters;
      ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
    } EXCEPTION_RECORD;
  * ExceptionCode为异常状态码，可以在NtStatus.h中找到，RaiseException的dwException就对应此项
  * ExceptionFlags为异常的标志，16个bit中有一部分被拿出来当作标志位，包括像是8位的栈错误、1位的异常不可恢复等等，RaiseException的dwExceptionFlags对应此项
  * ExceptionRecord是指向下一个异常的指针
  * ExceptionAddress保存了异常的发生地址
  * NumberParameters是 ExceptionInformation数组中参数的个数，RaiseException的nNumberofArguments对应该项
  * ExceptionInformation也就是异常的描述信息，RaiseException的lpArguments对应该项
之后调用的RltRaiseException会将当前的上下文保存到CONTEXT结构中，此后调用的函数会维护一个TrapFrame（即栈帧的基址）和异常的处理次数的标志，这里不再赘述，调用链如下：
    用户：RaiseException -> RltRaiseException -> NtRaiseException -> KiRaiseException 
    内核：RtlRaiseException -> NtRaiseException -> KiRaiseException
## 异常的的分发处理
上面说到了硬件异常会通过IDT去调用异常处理例程（一般为KiTrap系列函数），而软件异常则是通过API的层层调用传递异常的信息，但这都是最基础的处理，实际上最后二者是殊途同归，都会走到KiDispatchException函数来进行异常的分发。