0x00 前⾔
如有技术交流或渗透测试/代码审计/红队⽅向培训/红蓝对抗评估需求的朋友
欢迎联系QQ/VX-547006660
0x01 起因
某项⽬靶标，是⼀个⼈员管理系统，通过webpack暴露的接⼝
我们成功找到了⼀个未鉴权的密码修改接⼝，通过fuzz
我们获取到了该接⼝的参数username与password，并成功修改了admin账号密码进⼊后台
在⼀个任意上传的后台功能点，我们遇到了⻜塔WAF+流量检测设备，于是便有了本⽂
0x02 摸清检测规则
众所周知，⻜塔公司的WAF+流量检测设备还是⽐较⽜逼的，我直接尝试上传⼀个免杀webshell，毫⽆疑问直接
GG了
经过测试，上传⽆害内容1111但⽂件名为XXX.aspx也会被拦截
发现⻜塔对form表单的⽂件名和⽂件内容都有检测，我们必须得把这俩检测都安排掉才能成功上传
下⾯简述⼀下对抗思路
0x03 ⽂件名检测——根据.NET上传匹配⽂件名特性绕WAF(骗)  
.NET中常⽤context.Request.Files处理⽂件上传表单
其在匹配上传⽂件名时只匹配Content-Disposition:后的filename=xxxx，这就给了我们很⼤的绕WAF操作空
间，可以直接在Content-Disposition中注⼊脏数据来扰乱WAF的检测
这⾥我去掉分号，并使⽤emoji宽字节数据扰乱waf
如图，使⽤⽆害数据成功上传aspx⽂件
0x04 ⽂件内容检测——双图⽚夹恶意代码(偷袭)
前⾯既然直接传免杀Shell不⾏，我⼜测试了加⼊图⽚头，尝试绕过检测
例如：
发现并没有什么卵⽤，都GG了
JPEG (jpg)，⽂件头：FFD8FF
PNG (png)，⽂件头：89504E47
GIF (gif)，⽂件头：47494638
后⾯根据.NET特性，使⽤了UTF-16编码，也被拦截了，看来⻜塔对编码这块有所防范。
今天是肯德基疯狂星期四，突然⼀个想法，在我脑中闪过——“我们能不能在万绿丛中夹带⼀点红呢”
我们来试试“汉堡包法”
选取两张正常图⽚数据，中间夹带上我们的恶意代码
如图，成功上传带有恶意代码的aspx⽂件，⻜塔就此告破~
翻了⼀下后台的图⽚路径，成功拼接出shell的url路径
蚁剑加密⼀下流量，成功Getshell
0x05 总结
善⽤编码、宽字节，熟知每种开发语⾔的特性，是绕过WAF不可或缺的基本功
特殊情况下，思路灵活可以出奇制胜~