1.  Currently, the web service is using the Django development web server via the `runserver` command to provide web requests. NGINX will not be able to route traffic requests through to this development server, and instead, you will need to install the `gunicorn` application onto our Django web service for traffic to be routed via NGINX. Start by opening your `requirements.txt` file with your text editor and add the application as in the highlighted third line:
    ```
    Django>=2.0,=2.7,<3.0
    gunicorn==19.9.0
    ```
    注意
    Gunicorn 是**绿色独角兽**的缩写，用作 Python 应用的**网络服务网关接口** ( **WSGI** )。Gunicorn 被广泛用于生产环境，因为它被视为可用的最稳定的 WSGI 应用之一。
2.  要将 Gunicorn 作为网络应用的一部分运行，请调整您的`docker-compose.yml`文件。用文本编辑器打开`docker-compose.yml`文件，将*第 13 行*改为运行`gunicorn`应用，而不是 Django `manage.py runserver`命令。以下`gunicorn`命令通过其 WSGI 服务运行`chapter_nine` Django 项目，并绑定到 IP 地址和端口`0.0.0.0:8000` :
    ```
    12     image: swarm_web:latest
    13     command: gunicorn chapter_nine.wsgi:application          --bind 0.0.0.0:8000
    14     volumes:
    ```
3.  重新构建您的 web 服务，以确保 Gunicorn 应用安装在容器上并且可以运行。运行`docker-compose build`命令:
    ```
    docker-compose build
    ```
4.  Gunicorn can also run without the need of the NGINX proxy, so test the changes you have made by running the `stack deploy` command again. If you already have your services deployed, don't worry, you can still run this command again. It will simply make the relevant changes to your swarm and match the changes in your `docker-compose.yml`:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
    该命令将返回以下输出:
    ```
    Ignoring unsupported options: build
    Creating network test_swarm_default
    Creating service test_swarm_web
    Creating service test_swarm_db
    ```
5.  为了确保更改生效，请确保您打开了 web 浏览器，并在继续下一步之前验证您的 web 服务是否仍在提供 Django 测试页面。根据您的更改，页面仍应显示在`http://0.0.0.0:8000`处。
6.  要开始 NGINX 的实现，再次打开`docker-compose.yml`文件，将*第 16 行和第 17 行*从原来的`ports`命令修改为
    ```
    10   web:
    11     build: .
    12     image: swarm_web:latest
    13     command: gunicorn chapter_nine.wsgi:application          --bind 0.0.0.0:8000
    14     volumes:
    15       - .:/application
    16     ports:
    17       - 8000:8000
    18     environment:
    19       - PGPASSWORD=docker
    20     deploy:
    21       replicas: 2
    22     depends_on:
    23       - db
    ```
    暴露端口`8000`
7.  保持`docker-compose.yml`文件打开，在`compose`文件末尾添加您的`nginx`服务。现在这里的所有信息你应该都很熟悉了。*第 25 行*提供了新 NGINX 目录的位置，您将很快创建的`Dockerfile`，以及部署服务时要使用的映像的名称。*线路* *27* 和 *28* 将港口`1337`暴露于港口`80`*线路* *29* 和 *30* 显示 NGINX 需要依靠`web`服务运行:
    ```
    24   nginx:
    25     build: ./nginx
    26     image: swarm_nginx:latest
    27     ports:
    28       - 1337:80
    29     depends_on:
    30       - web
    ```
8.  现在，为服务设置 NGINX `Dockerfile`和配置。首先创建一个名为`nginx`的目录，如下命令所示:
    ```
    mkdir nginx
    ```
9.  在`nginx`目录中创建新的`Dockerfile`，用你的文本编辑器打开文件，加入这里显示的细节。`Dockerfile`是根据 Docker Hub 上最新的`nginx`映像创建的。它删除了*第 3 行*中的默认配置`nginx`文件，然后添加了一个您需要立即设置的新配置:
    ```
    FROM nginx
    RUN rm /etc/nginx/conf.d/default.conf
    COPY nginx.conf /etc/nginx/conf.d
    ```
10.  Create the `nginx.conf` file that the `Dockerfile` will use to create your new image. Create a new file called `nginx.conf` in the `nginx` directory and use your text editor to add the following configuration details:
    ```
    upstream chapter_nine {
        server web:8000;
    }
    server {
        listen 80;
        location / {
            proxy_pass http://chapter_nine;
            proxy_set_header X-Forwarded-For             $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
        }
    }
    ```
    如果您不熟悉 NGINX 配置，前面的细节只是寻找对 web 服务的请求，并将请求路由到`chapter_nine` Django 应用。
11.  现在所有的细节都准备好了，为你的`docker-compose.yml`文件中现在设置的 NGINX 服务建立你的新形象。运行以下命令构建映像:
    ```
    docker-compose build
    ```
12.  Run the `stack deploy` command again:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
    这一次，您会注意到您的输出显示`test_swarm_nginx`服务已经创建并应该运行:
    ```
    Creating network test_swarm_default
    Creating service test_swarm_db
    Creating service test_swarm_web
    Creating service test_swarm_nginx
    ```
13.  Verify that all the services are running as part of your swarm with the `stack ps` command:
    ```
    docker stack ps test_swarm
    ```
    得到的输出已经缩小到只显示八列中的四列。您可以看到`test_swarm_nginx`服务正在运行:
    ```
    NAME                  IMAGE                 NODE
      DESIRED STATE
    test_swarm_nginx.1    swarm_nginx:latest    docker-desktop
      Running
    test_swarm_web.1      swarm_web:latest      docker-desktop
      Running
    test_swarm_db.1       postgres:latest       docker-desktop
      Running
    test_swarm_web.2      swarm_web:latest      docker-desktop
      Running
    ```
14.  要证明请求是通过 NGINX 代理路由的，请使用端口`1337`而不是端口`8000`。通过使用`http://0.0.0.0:1337`的新网址，确保您的网络浏览器仍在提供网页。
15.  This has been a great addition to the services running on Swarm but is not using the correct configuration management features. You already have an NGINX configuration created previously in this exercise. Create a Swarm configuration by using the `config create` command with the name of the new configuration and the file you are going to create the configuration from. Run the following command to create the new configuration from your `nginx/nginx.conf` file:
    ```
    docker config create nginx_config nginx/nginx.conf 
    ```
    该命令的输出将为您提供创建的配置标识:
    ```
    u125x6f6lhv1x6u0aemlt5w2i
    ```
16.  Swarm also gives you a way to list all the configurations created as part of your Swarm, using the `config ls` command. Make sure the new `nginx_config` file has been created in the previous step and run the following command:
    ```
    docker config ls
    ```
    `nginx_config`已在以下输出中创建:
    ```
    ID           NAME           CREATED           UPDATED
    u125x6f6…    nginx_config   19 seconds ago    19 seconds ago
    ```
17.  View the full details of the configuration you have created using the `docker config inspect` command. Run the following command with the `--pretty` option to make sure the configuration output is in a readable form:
    ```
    docker config inspect --pretty nginx_config
    ```
    输出应该类似于您在这里看到的，显示了您刚刚创建的 NGINX 配置的详细信息:
    ```
    ID:             u125x6f6lhv1x6u0aemlt5w2i
    Name:           nginx_config
    Created at:          2020-03-04 19:55:52.168746807 +0000 utc
    Updated at:          2020-03-04 19:55:52.168746807 +0000 utc
    Data:
    upstream chapter_nine {
        server web:8000;
    }
    server {
        listen 80;
        location / {
            proxy_pass http://chapter_nine;
            proxy_set_header X-Forwarded-For             $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
        }
    }
    ```
18.  As you have now set up the configuration in Swarm, make sure the configuration is no longer built into the container image. Instead, it will be provided when the Swarm is deployed. Open the `Dockerfile` in the `nginx` directory and remove the fourth line of the `Dockerfile`. It should now look similar to the details given here:
    ```
    FROM nginx:1.17.4-alpine
    RUN rm /etc/nginx/conf.d/default.conf
    ```
    注意
    请记住，我们在这里进行的更改将确保我们不需要在每次配置更改时都构建新的 NGINX 映像。这意味着我们可以使用相同的映像，并将其部署到开发群或生产群中。我们所要做的就是改变配置来创建环境。不过，我们确实需要创建可以使用我们已经创建并存储在 Swarm 中的配置的映像。
19.  本练习的上一步对`nginx` `Dockerfile`进行了更改，因此现在重建映像以确保它是最新的:
    ```
    docker-compose build
    ```
20.  用你的文本编辑器打开`docker-compose.yml`文件来更新`compose`文件，这样我们的`nginx`服务将使用新创建的 Swarm `config`。在`nginx`服务的底部，用您之前创建的`nginx_cof`配置的源名称添加配置详细信息。请务必将其添加到正在运行的`nginx`服务中，以便容器可以使用。然后，为文件设置一个单独的配置。即使您已经在前面的步骤中手动创建了它，您的集群也需要在部署时了解它。将以下内容添加到您的`docker-compose.yml` :
    ```
    25   nginx:
    26     build: ./nginx
    27     image: swarm_nginx:latest
    28     ports:
    29       - 1337:80
    30     depends_on:
    31       - web
    32     configs:
    33       - source: nginx_conf
    34         target: /etc/nginx/conf.d/nginx.conf
    35 
    36 configs:
    37   nginx_conf:
    38     file: nginx/nginx.conf
    ```
21.  Deploy your swarm again:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
    在下面的输出中，您应该会看到一条额外的线显示`Creating config test_swarm_nginx_conf`:
    ```
    Creating network test_swarm_default
    Creating config test_swarm_nginx_conf
    Creating service test_swarm_db
    Creating service test_swarm_web
    Creating service test_swarm_nginx
    ```
22.  There is still more you can do to take advantage of Swarm, and one extra feature not used yet is the secrets function. Just as you created a configuration earlier in this exercise, you can create a `secret` with a similar command. The command shown here first uses `echo` to output the password you want as your secret value, and then, using the `secret create` command, it uses this output to create the secret named `pg_password`. Run the following command to name your new secret `pg_password`:
    ```
    echo "docker" | docker secret create pg_password –
    ```
    该命令将输出创建的机密的标识:
    ```
    4i1cwxst1j9qoh2e6uq5fjb8c
    ```
23.  View the secrets in your swarm using the `secret ls` command. Run this command now:
    ```
    docker secret ls
    ```
    你可以看到你的机密已经成功创建，名字为`pg_password`:
    ```
    ID                          NAME           CREATED
      UPDATED