以下是优化后的文本，使其更加清晰、连贯和专业：

### 字符串处理函数

- **`size_t strspn(const char *cs, const char *ct)`**
  - 返回字符串 `cs` 中包含 `ct` 中字符的前缀长度。

- **`size_t strcspn(const char *cs, const char *ct)`**
  - 返回字符串 `cs` 中不包含 `ct` 中字符的前缀长度。

- **`char *strpbrk(const char *cs, const char *ct)`**
  - 返回指向 `cs` 中首次出现 `ct` 中任意字符位置的指针；如果 `cs` 中没有与 `ct` 相同的字符，则返回 `NULL`。

- **`char *strstr(const char *cs, const char *ct)`**
  - 返回指向 `cs` 中首次出现子字符串 `ct` 位置的指针；如果 `cs` 中不包含 `ct`，则返回 `NULL`。

- **`size_t strlen(const char *cs)`**
  - 返回字符串 `cs` 的长度。

- **`char *strerror(int n)`**
  - 返回一个指向与错误编号 `n` 对应的错误信息字符串的指针。错误信息的具体内容依赖于具体实现。

- **`char *strtok(char *s, const char *ct)`**
  - `strtok` 函数在字符串 `s` 中搜索由 `ct` 中字符界定的记号。
  - 第一次调用时，`s` 为非空。它搜索 `s`，找到不包含 `ct` 中字符的第一个记号，将 `s` 中的下一个字符替换为 `\0`，并返回指向该记号的指针。
  - 随后每次调用 `strtok` 时（通过 `s` 的值是否为 `NULL` 指示），均返回下一个不包含 `ct` 中字符的记号。
  - 当 `s` 中没有这样的记号时，返回 `NULL`。每次调用时，字符串 `ct` 可以不同。

### 内存操作函数

- **`void *memcpy(void *s, const void *ct, size_t n)`**
  - 将 `ct` 中的 `n` 个字符拷贝到 `s` 中，并返回 `s`。

- **`void *memmove(void *s, const void *ct, size_t n)`**
  - 功能类似于 `memcpy`，但当对象重叠时仍能正确执行。

- **`int memcmp(const void *cs, const void *ct, size_t n)`**
  - 比较 `cs` 和 `ct` 的前 `n` 个字符，返回值与 `strcmp` 相同。

- **`void *memchr(const void *cs, int c, size_t n)`**
  - 返回一个指向 `c` 在 `cs` 中首次出现位置的指针。如果在 `cs` 的前 `n` 个字符中找不到匹配，则返回 `NULL`。

- **`void *memset(void *s, int c, size_t n)`**
  - 将 `s` 中的前 `n` 个字符替换为 `c`，并返回 `s`。

### 数学函数

- **头文件 `<math.h>` 声明了一些数学函数和宏：**
  - 宏 `EDOM` 和 `ERANGE` 是两个非零整型常量，用于指示函数的定义域错误和值域错误。
  - `HUGE_VAL` 是一个正数的 `double` 类型常量。当参数超出函数定义的作用域时，会出现定义域错误，此时全局变量 `errno` 的值被设置为 `EDOM`，函数的返回值取决于具体实现。
  - 如果函数的结果不能用 `double` 类型表示，则会发生值域错误。当结果上溢时，函数返回 `HUGE_VAL` 并带有正确的正负号，`errno` 的值被设置为 `ERANGE`。当结果下溢时，函数返回 `0`，而 `errno` 是否设置为 `ERANGE` 依赖于具体实现。

- **三角函数：**
  - `sin(double x)`: 返回 `x` 的正弦值。
  - `cos(double x)`: 返回 `x` 的余弦值。
  - `tan(double x)`: 返回 `x` 的正切值。
  - `asin(double x)`: 返回 `x` 的反正弦值，值域为 `[−π/2, π/2]`，其中 `x ∈ [−1, 1]`。
  - `acos(double x)`: 返回 `x` 的反余弦值，值域为 `[0, π]`，其中 `x ∈ [−1, 1]`。
  - `atan(double x)`: 返回 `x` 的反正切值，值域为 `[−π/2, π/2]`。
  - `atan2(double y, double x)`: 返回 `y/x` 的反正切值，值域为 `[−π, π]`。

- **双曲函数：**
  - `sinh(double x)`: 返回 `x` 的双曲正弦值。
  - `cosh(double x)`: 返回 `x` 的双曲余弦值。
  - `tanh(double x)`: 返回 `x` 的双曲正切值。

- **指数和对数函数：**
  - `exp(double x)`: 返回自然指数 `e^x`。
  - `log(double x)`: 返回自然对数 `ln(x)`，其中 `x > 0`。
  - `log10(double x)`: 返回以 `10` 为底的对数 `log10(x)`，其中 `x > 0`。

- **幂函数：**
  - `pow(double x, double y)`: 返回 `x^y`。如果 `x = 0` 且 `y ≤ 0`，或者 `x < 0` 且 `y` 不是整数，则结果未定义。

### 数值转换和内存分配函数

- **数值转换函数：**
  - `double atof(const char *s)`: 将字符串 `s` 转换为 `double` 类型，等价于 `strtod(s, (char**)NULL)`。
  - `int atoi(const char *s)`: 将字符串 `s` 转换为 `int` 类型，等价于 `(int)strtol(s, (char**)NULL, 10)`。
  - `long atol(const char *s)`: 将字符串 `s` 转换为 `long` 类型，等价于 `strtol(s, (char**)NULL, 10)`。
  - `double strtod(const char *s, char **endp)`: 将字符串 `s` 的前缀转换为 `double` 类型，并跳过前导空白符。除非 `endp` 为 `NULL`，否则将未转换部分的指针保存在 `*endp` 中。如果结果上溢，则返回带适当符号的 `HUGE_VAL`；如果结果下溢，则返回 `0`，并且 `errno` 被设置为 `ERANGE`。
  - `long strtol(const char *s, char **endp, int base)`: 将字符串 `s` 的前缀转换为 `long` 类型，并跳过前导空白符。除非 `endp` 为 `NULL`，否则将未转换部分的指针保存在 `*endp` 中。如果 `base` 在 `2` 到 `36` 之间，则假定输入是以该数为基底的；如果 `base` 为 `0`，则基底为八进制、十进制或十六进制。如果结果上溢，则根据结果的符号返回 `LONG_MAX` 或 `LONG_MIN`，并且 `errno` 被设置为 `ERANGE`。
  - `unsigned long strtoul(const char *s, char **endp, int base)`: 功能与 `strtol` 相同，但结果为 `unsigned long` 类型，错误值为 `ULONG_MAX`。

- **随机数生成函数：**
  - `int rand(void)`: 生成一个 `0` 到 `RAND_MAX` 之间的伪随机整数。`RAND_MAX` 的取值至少为 `32767`。
  - `void srand(unsigned int seed)`: 使用 `seed` 作为生成新的伪随机数序列的种子。默认种子值为 `1`。

- **内存分配函数：**
  - `void *calloc(size_t nobj, size_t size)`: 为由 `nobj` 个长度为 `size` 的对象组成的数组分配内存，并返回指向分配区域的指针；若无法满足要求，则返回 `NULL`。分配的内存初始为 `0` 字节。
  - `void *malloc(size_t size)`: 为长度为 `size` 的对象分配内存，并返回指向分配区域的指针；若无法满足要求，则返回 `NULL`。分配的内存不会初始化。
  - `void *realloc(void *p, size_t size)`: 将 `p` 指向的对象的长度修改为 `size` 个字节。如果新分配的内存比原内存大，则原内存的内容保持不变，增加的空间不进行初始化。如果新分配的内存比原内存小，则新分配内存单元不被初始化。`realloc` 函数返回指向新分配空间的指针；若无法满足要求，则返回 `NULL`，原指针 `p` 指向的单元内容保持不变。
  - `void free(void *p)`: 释放 `p` 指向的内存空间。如果 `p` 为 `NULL`，则该函数不执行任何操作。`p` 必须指向先前使用动态分配函数 `malloc`、`realloc` 或 `calloc` 分配的空间。

- **其他函数：**
  - `void abort(void)`: 终止当前程序。