               :        Assert(chunk_size >= size);
               :
               :        /*
               :         * If there is enough room in the active allocation block, we will put the
               :         * chunk into that block.  Else must start a new one.
               :         */
     2  2.8986 :        if ((block = set->blocks) != NULL)
               :        {
     2  2.8986 :                Size            availspace = block->endptr - block->freeptr;
               :
    12 17.3913 :                if (availspace size = chunk_size;
               :#ifdef MEMORY_CONTEXT_CHECKING
               :        chunk->requested_size = size;
               :        VALGRIND_MAKE_MEM_NOACCESS(&chunk->requested_size,
               :                                                           sizeof(chunk->requested_size));
               :        /* set mark to catch clobber of "unused" space */
               :        if (size size)
               :                set_sentinel(AllocChunkGetPointer(chunk), size);
               :#endif
               :#ifdef RANDOMIZE_ALLOCATED_MEMORY
               :        /* fill the allocated space with junk */
               :        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
               :#endif
               :
               :        AllocAllocInfo(set, chunk);
     4  5.7971 :        return AllocChunkGetPointer(chunk);
     3  4.3478 :}
               :
```
回收分析  
```
#opannotate -x -s -t 1 /home/digoal/pgsql9.5/bin/postgres -i AllocSetFree|less
               :/*
               : * AllocSetFree
               : *              Frees allocated memory; memory is removed from the set.
               : */
               :static void
               :AllocSetFree(MemoryContext context, void *pointer)
     7 28.0000 :{ /* AllocSetFree total:     25 100.000 */
               :        AllocSet        set = (AllocSet) context;
               :        AllocChunk      chunk = AllocPointerGetChunk(pointer);
               :
               :        AllocFreeInfo(set, chunk);
```
## 小结
1\. 写SQL时需要注意，避免产生笛卡尔积。  
2\. 这个问题已反馈给社区，看看是不是存在内存泄露。  
## 问题已修
tom lane的速度太快了，从报BUG到现在10个小时过去，已经修复  。  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/access/heap/heapam.c;h=6a27ef4140091b0c53d3a68f9d947824b2ffe8c2;hp=c63dfa0bafc606ea3dc1ee9c7427d92c28ed09d4;hb=ae4760d667c71924932ab32e14996b5be1831fc6;hpb=ca9cb940d23dc8869a635fa27a08e60837b17c07  
```
Fix small query-lifespan memory leak in bulk updates.
When there is an identifiable REPLICA IDENTITY index on the target table,
heap_update leaks the id_attrs bitmapset.  That's not many bytes, but it
adds up over enough rows, since the code typically runs in a query-lifespan
context.  Bug introduced in commit e55704d8b, which did a rather poor job
of cloning the existing use-pattern for RelationGetIndexAttrBitmap().
Per bug #14293 from Zhou Digoal.  Back-patch to 9.4 where the bug was
introduced.
Report: 
```
```
diff --git a/src/backend/access/heap/heapam.c b/src/backend/access/heap/heapam.c
index c63dfa0..6a27ef4 100644 (file)
--- a/src/backend/access/heap/heapam.c
+++ b/src/backend/access/heap/heapam.c
@@ -3802,6 +3802,7 @@ l2:
            ReleaseBuffer(vmbuffer);
        bms_free(hot_attrs);
        bms_free(key_attrs);
+       bms_free(id_attrs);
        return result;
    }
@@ -4268,6 +4269,7 @@ l2:
    bms_free(hot_attrs);
    bms_free(key_attrs);
+   bms_free(id_attrs);
    return HeapTupleMayBeUpdated;
 }
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")