### Observations and Definitions

Several types of bitstrings are observed, and these conditions will be referred to as the "enc-sig-implementation conditions." Additionally, [7] imposes specific conditions on the CoSP protocol. These conditions ensure that all encryptions and signatures are generated using fresh randomness and that secret keys are not transmitted. A protocol that meets these conditions is termed "key-safe."

### Computational Soundness

**Theorem 2 (Computational Soundness [7]):** If `Impl` satisfies the enc-sig-implementation conditions, then `Impl` is a computationally sound implementation of `Mes` for the class of key-safe protocols.

Combining Theorem 2 with Theorem 1, we derive the following lemma:

**Lemma 3:** Let `Impl` be a computational implementation satisfying the enc-sig-implementation conditions. Let `A0` be an efficiently decidable RCF expression such that `M ⊢ A0` and `ΠA0` is key-safe. If `A0σMesDY` is robustly →-safe or `A0` is robustly ;-σMesDY-safe, then `A0` is robustly computationally safe using `Impl`.

### Simplifying Key-Safety

Lemma 3 requires verifying whether `ΠA0` is key-safe. To simplify this, we introduce a library `σHighlevel` that acts as a wrapper for `σMesDY` and ensures that a program `A0` that never directly calls `σMesDY` but only uses the wrappers from `σHighlevel` will result in a key-safe `ΠA0`.

For example, `σHighlevel` provides a function `σHighlevel(encrypt)` that takes an encryption key and plaintext, chooses a fresh nonce for randomness, and invokes `σMesDY(libenc)`. This guarantees that the randomness argument of `σMesDY(libenc)` is always a fresh nonce. Similarly, `σHighlevel(enckeypair)` generates a fresh nonce to create encryption and decryption keys. The decryption key is wrapped using a private constructor `DecKey`, ensuring it can only be used as an argument to `σHighlevel(decrypt)`. This ensures that keys are generated with fresh randomness and that the output of `σMesDY(libdk)` is only used as the second argument to `σMesDY(libdec)`.

For signatures and signing keys, a similar approach is used. Functions like pairs, which are considered harmless, are simply exported by `σHighlevel` (possibly with modified calling conventions for convenience, especially for functions related to payload strings). The source code of `σHighlevel` is provided in the full version.

**Note:** This approach ensures that keys are not corrupted during protocol execution (no adaptive corruption). However, statically corrupted parties can be modeled by subsuming them into the adversary and allowing the adversary to choose their keys.

### Enforcing Key-Safety

**Lemma 4:** Let `A0` be an RCF expression with `Mes ⊢ A0`, `fv(A0) ∩ dom σMesDY = ∅`, and not containing the RCF-constructors `DecKey` and `SigKey`. Then, `ΠA0σHighlevel` is key-safe.

### Computational Soundness for Programs Using the DY Library

**Theorem 3 (Computational Soundness for σMesDY):** Let `Impl` be a computational implementation satisfying the enc-sig-implementation conditions. Let `A0` be an efficiently decidable RCF expression such that `fv(A0) ⊆ σHighlevel`, `A` is pc-free, `A` does not contain the RCF-constructors `DecKey` or `SigKey`, and the FOL/F-formulae in `A` do not contain forbidden function symbols. If `A0σHighlevelσMesDY` is robustly →-safe, then `A0σHighlevel` is robustly computationally safe using `Impl`.

**Proof:** Let `A′0 := A0σHighlevel`. Since `fv(A0) ⊆ σHighlevel` and `dom σHighlevel ∩ dom σMesDY = ∅`, `ΠA′0` is key-safe. Furthermore, `Mes ⊢ A′0` since `Mes ⊢ σHighlevel(x)` for all `x ∈ dom σHighlevel`. Hence, by Lemma 3, if `A′0` is robustly →-safe, then `A′0` is robustly computationally safe using `Impl`.

### Sealing-Based Library

In the library `σMesDY`, symbolic cryptography is internally represented as terms in some datatype. An alternative approach, used in the F7 verification framework [16], involves a library `σS` based on seals. This approach uses a global state to track encryptions and signatures produced by the protocol. We show that robust safety with respect to `σS` implies robust safety with respect to `σMesDY`. From this, we immediately get a computational soundness result for `σS`; the theorem is exactly the same as Theorem 3, except that `σMesDY` is replaced by `σS`. Details are provided in the full version.

### Conclusions

This paper presents a computational soundness result for F7, a type-checker for F# programs. We demonstrate the computational soundness of a generic DY library and a sealing-based library. The proof is conducted within the CoSP framework and focuses solely on the semantics of RCF programs, without involving any cryptographic arguments. This makes our result easily extensible to additional cryptographic primitives supported by CoSP. Our proof does not depend on a specific verification technique, thus our computational soundness result would automatically apply to refinements of the type system or different analysis techniques, as long as they use the same symbolic cryptographic libraries. To the best of our knowledge, this is the first computational soundness result for an automated verification technique of protocol implementations.

### Acknowledgments

This work was partially funded by the Cluster of Excellence “Multimodel Computing and Interaction” (German Science Foundation), the Emmy Noether Programme (German Science Foundation), the Miur’07 Project 396 SOFT (Security Oriented Formal Techniques), the ERC starting grant “End-to-end security,” and the DFG grant 3194/1-1.

### References

[1] M. Abadi, M. Baudet, and B. Warinschi. Guessing attacks and the computational soundness of static equivalence. In Proc. 9th International Conference on Foundations of Software Science and Computation Structures (FOSSACS), volume 3921 of Lecture Notes in Computer Science, pages 398–412. Springer, 2006.
...
[41] Christoph Sprenger, Michael Backes, David Basin, Birgit Pfitzmann, and Michael Waidner. Cryptographically sound theorem proving. In Proc. 19th IEEE Computer Security Foundations Workshop (CSFW), pages 153–166, 2006.