title:SigFree: A Signature-free Buffer Overflow Attack Blocker
author:Xinran Wang and
Chi-Chun Pan and
Peng Liu and
Sencun Zhu
SigFree: A Signature-free Buffer Overﬂow Attack Blocker
1Xinran Wang
2Chi-Chun Pan
2Peng Liu
1,2Sencun Zhu
1Department of Computer Science and Engineering
2College of Information Sciences and Technology
The Pennsylvania State University, University Park, PA 16802
{xinrwang, szhu}@cse.psu.edu; {cpan, pliu}@ist.psu.edu
Abstract
We propose SigFree, a realtime, signature-free, out-of-
the-box, application layer blocker for preventing buffer
overﬂow attacks, one of the most serious cyber security
threats. SigFree can ﬁlter out code-injection buffer over-
ﬂow attack messages targeting at various Internet ser-
vices such as web service. Motivated by the observation
that buffer overﬂow attacks typically contain executables
whereas legitimate client requests never contain executa-
bles in most Internet services, SigFree blocks attacks by
detecting the presence of code. SigFree ﬁrst blindly dis-
sembles and extracts instruction sequences from a re-
quest. It then applies a novel technique called code ab-
straction, which uses data ﬂow anomaly to prune useless
instructions in an instruction sequence. Finally it com-
pares the number of useful instructions to a threshold
to determine if this instruction sequence contains code.
SigFree is signature free, thus it can block new and un-
known buffer overﬂow attacks; SigFree is also immu-
nized from most attack-side code obfuscation methods.
Since SigFree is transparent to the servers being pro-
tected, it is good for economical Internet wide deploy-
ment with very low deployment and maintenance cost.
We implemented and tested SigFree; our experimental
study showed that SigFree could block all types of code-
injection attack packets (above 250) tested in our exper-
iments. Moreover, SigFree causes negligible throughput
degradation to normal client requests.
1 Introduction
Throughout the history of cyber security, buffer over-
ﬂow is one of the most serious vulnerabilities in com-
puter systems. Buffer overﬂow vulnerability is a root
cause for most of the cyber attacks such as server
breaking-in, worms, zombies, and botnets. Buffer over-
ﬂow attacks are the most popular choice in these at-
tacks, as they provide substantial control over a victim
host [37].
“A buffer overﬂow occurs during program execution
when a ﬁxed-size buffer has had too much data copied
into it. This causes the data to overwrite into adjacent
memory locations, and, depending on what is stored
there, the behavior of the program itself might be af-
fected.” [34] (Note that the buffer could be in stack or
heap.) Although taking a broader viewpoint, buffer over-
ﬂow attacks do not always carry code in their attacking
requests (or packets)1, code-injection buffer overﬂow at-
tacks such as stack smashing count for probably most of
the buffer overﬂow attacks that have happened in the real
world.
Although tons of research has been done to tackle
buffer overﬂow attacks, existing defenses are still quite
limited in meeting four highly-desired requirements:
(R1) simplicity in maintenance; (R2) transparency to ex-
isting (legacy) server OS, application software, and hard-
ware; (R3) resiliency to obfuscation; (R4) economical
Internet wide deployment. As a result, although sev-
eral very secure solutions have been proposed, they are
not pervasively deployed, and a considerable number of
buffer overﬂow attacks continue to succeed on a daily
basis.
(1B) Compiler extensions.
To see how existing defenses are limited in meeting
these four requirements, let us break down the existing
buffer overﬂow defenses into six classes which we will
review shortly in Section 2: (1A) Finding bugs in source
code.
(1C) OS modiﬁca-
tions. (1D) Hardware modiﬁcations. (1E) Defense-side
obfuscation [11,28]. (1F) Capturing code running symp-
toms of buffer overﬂow attacks [21, 37, 43, 55]. (Note
that the above list does not include binary code analysis
based defenses which we will address shortly.) We may
brieﬂy summarize the limitations of these defenses in
terms of the four requirements as follows. (a) Class 1B,
1C, 1D, and 1E defenses may cause substantial changes
to existing (legacy) server OSes, application softwares,
and hardwares, thus they are not transparent. Moreover,
USENIX Association
Security ’06: 15th USENIX Security Symposium
225
Class 1E defenses generally cause processes to be termi-
nated. As a result, many businesses do not view these
changes and the process termination overhead as eco-
nomical deployment. (b) Class 1F defenses can be very
secure, but they either suffer from signiﬁcant runtime
overhead or need special auditing or diagnosis facilities
which are not commonly available in commercial ser-
vices. As a result, Class 1F defenses have limited trans-
parency and potential for economical deployment.
(c)
Class 1A defenses need source code, but source code is
unavailable to many legacy applications.
Besides buffer overﬂow defenses, worm signatures
can be generated and used to block buffer overﬂow attack
packets [29, 42, 47]. Nevertheless, they are also limited
in meeting the four requirements, since they either rely
on signatures, which introduce maintenance overhead, or
are not very resilient to attack-side obfuscation.
To overcome the above limitations,
in this paper
we propose SigFree, a realtime buffer overﬂow attack
blocker, to protect Internet services. The idea of SigFree
is motivated by an important observation that “the na-
ture of communication to and from network services is
predominantly or exclusively data and not executable
code.” [15].
In particular, as summarized in [15], (a)
on Windows platforms, most web servers (port 80) ac-
cept data only; remote access services (ports 111, 137,
138, 139) accept data only; Microsoft SQL Servers (port
1434) accept data only; workstation services (ports 139
and 445) accept data only. (b) On Linux platforms, most
Apache web servers (port 80) accept data only; BIND
(port 53) accepts data only; SNMP (port 161) accepts
data only; most Mail Transport (port 25) accepts data
only; Database servers (Oracle, MySQL, PostgreSQL)
at ports 1521, 3306 and 5432 accept data only.
Since remote exploits are typically executable code,
this observation indicates that if we can precisely dis-
tinguish (service requesting) messages that contain code
from those that do not contain any code, we can pro-
tect most Internet services (which accept data only) from
code-injection buffer overﬂow attacks by blocking the
messages that contain code.
Http
Requests
Firewall
Proxy-based SigFree
(Application layer)
Web Server
Figure 1: SigFree is an application layer blocker between the
web server and the corresponding ﬁrewall.
Accordingly, SigFree (Figure 1) works as follows.
SigFree is an application layer blocker that typically
stays between a service and the corresponding ﬁrewall.
When a service requesting message arrives at SigFree,
SigFree ﬁrst uses a new O(N ) algorithm, where N is the
byte length of the message, to disassemble and distill all
possible instruction sequences from the message’s pay-
load, where every byte in the payload is considered as
a possible starting point of the code embedded (if any).
However, in this phase some data bytes may be mistak-
enly decoded as instructions. In phase 2, SigFree uses a
novel technique called code abstraction. Code abstrac-
tion ﬁrst uses data ﬂow anomaly to prune useless instruc-
tions in an instruction sequence, then compares the num-
ber of useful instructions to a threshold to determine if
this instruction sequence (distilled in phase 1) contains
code.
We have implemented a SigFree prototype as a proxy
to protect web servers. Our empirical study shows
that there exists clean-cut “boundaries” between code-
embedded payloads and data payloads when our code-
data separation criteria are applied. We have identiﬁed
the “boundaries” (or thresholds) and been able to de-
tect/block all 50 attack packets generated by Metasploit
framework [4], all 200 polymorphic shellcode packets
generated by two well-known polymorphic shellcode en-
gine ADMmutate [40] and CLET [23], and worm Slam-
mer, CodeRed and a CodeRed variation, when they are
well mixed with various types of data packets. Also, our
experiment results show that the throughput degradation
caused by SigFree is negligible.
relying on string-matching, SigFree is
The merits of SigFree are summarized below. They
show that SigFree has taken a main step forward in meet-
ing the four requirements aforementioned.
(cid:12) SigFree is signature free, thus it can block new and
unknown buffer overﬂow attacks
(cid:12) Without
immunized from most attack-side obfuscation methods.
(cid:12) SigFree uses generic code-data separation criteria
instead of limited rules. This feature separates SigFree
from [15], an independent work that tries to detect
code-embedded packets.
(cid:12) Transparency. SigFree is a out-of-the-box solution
that requires no server side changes.
(cid:12) SigFree has negligible throughput degradation.
(cid:12) SigFree is an economical deployment with very low
maintenance cost, which can be well justiﬁed by the
aforementioned features.
The rest of the paper is organized as follows. In Sec-
tion 2, we summarize the work related to ours. In Section
3, we give an overview of SigFree. In Sections 4 and 5,
we introduce the instruction sequence distiller compo-
nent and the instruction sequence analyzer component of
SigFree, respectively. In Section 6, we show our experi-
mental results. Finally, we discuss some research issues
in Section 7 and conclude the paper in Section 8.
226
Security ’06: 15th USENIX Security Symposium
USENIX Association
2 Related Work
SigFree is mainly related to three bodies of work.
[Category 1:] prevention/detection techniques of buffer
overﬂows; [Category 2:] worm detection and signature
generation.
[Category 3:] machine code analysis for
security purposes. In the following, we ﬁrst brieﬂy re-
view Category 1 and Category 2 which are less close to
SigFree. Then we will focus on comparing SigFree with
Category 3.
2.1 Prevention/Detection of Buffer Over-
ﬂows
Existing prevention/detection techniques of buffer
overﬂows can be roughly broken down into six classes:
Class 1A: Finding bugs in source code. Buffer over-
ﬂows are fundamentally due to programming bugs. Ac-
cordingly, various bug-ﬁnding tools [14, 24, 51] have
been developed. The bug-ﬁnding techniques used in
these tools, which in general belong to static analysis,
include but not limited to model checking and bugs-as-
deviant-behavior. Class 1A techniques are designed to
handle source code only, and they do not ensure com-
pleteness in bug ﬁnding.
In contrast, SigFree handles
machine code embedded in a request (message).
Class 1B: Compiler extensions. “If the source code
is available, a developer can add buffer overﬂow de-
tection automatically to a program by using a modi-
ﬁed compiler.” [34] Three such compilers are Stack-
Guard [22], ProPolice 2, and Return Address Defender
(RAD) [18]. In addition, Smirnov and Chiueh proposed
compiler DIRA [49] can detect control hijacking attacks,
identify the malicious input and repair the compromised
program. Class 1B techniques require the availability of
source code. In contrast, SigFree does not need to know
any source code.
Class 1C: OS modiﬁcations. Modifying some as-
pects of the operating system may prevent buffer over-
ﬂows such as Pax [9], LibSafe [10] and e-NeXsh [48].
Class 1C techniques need to modify the OS. In contrast,
SigFree does not need any modiﬁcation of the OS.
Class 1D: Hardware modiﬁcations. A main idea of
hardware modiﬁcation is to store all return addresses on
the processor [41]. In this way, no input can change any
return address.
Class 1E: Defense-side obfuscation. Address Space
Layout Randomization (ASLR) is a main component of
PaX [9]. Bhatkar and Sekar [13] proposed a compre-
hensive address space randomization scheme. Address-
space randomization, in its general form [13], can de-
tect exploitation of all memory errors.
Instruction set
randomization [11, 28] can detect all code injection at-
tacks. Nevertheless, when these approaches detect an
attack, the victim process is typically terminated. “Re-
peated attacks will require repeated and expensive appli-
cation restarts, effectively rendering the service unavail-
able.” [37]
Class 1F: Capturing code running symptoms of buffer
overﬂow attacks. Fundamentally, buffer overﬂows are a
code running symptom. If such unique symptoms can be
precisely captured, all buffer overﬂows can be detected.
Class 1B, Class 1C and Class 1E techniques can capture
some - but not all - of the running symptoms of buffer
overﬂows. For example, accessing non-executable stack
segments can be captured by OS modiﬁcations; com-
piler modiﬁcations can detect return address rewriting;
and process crash is a symptom captured by defense-
side obfuscation. To achieve 100% coverage in capturing
buffer overﬂow symptoms, dynamic dataﬂow/taint anal-
ysis/program shepherding techniques were proposed in
Vigilante [21], TaintCheck [43], and [30]. They can de-
tect buffer overﬂows during runtime. However, it may
cause signiﬁcant runtime overhead (e.g., 1,000%). To
reduce such overhead, another type of Class 1F tech-
niques, namely post-crash symptom diagnosis, has been
developed in Covers [37] and [55]. Post-crash symp-
tom diagnosis extracts the ‘signature’ after a buffer over-
ﬂow attack is detected. Recently, Liang and Sekar pro-
posed ARBOR [36] which can automatically generate
vulnerability-oriented signatures by identifying charac-
teristic features of attacks and using program context.
Moreover, ARBOR automatically invokes the recovery
actions. Class 1F techniques can block both the attack
requests that contain code and the attack requests that
do not contain any code, but they need the signatures to
be ﬁrstly generated. Moreover, they either suffer from
signiﬁcant runtime overhead or need special auditing or
diagnosis facilities which are not commonly available in
commercial services. In contrast, although SigFree could
not block the attack requests that do not contain any code,
SigFree is signature-free and does not need any changes
to real world services. We will investigate the integration
of SigFree with Class 1F techniques in our future work.
2.2 Worm Detection and Signature Gener-
ation
Because buffer overﬂows are a key target of worms
when they propagate from one host to another, SigFree is
related to worm detection. Based on the nature of worm
infection symptoms, worm detection techniques can be
broken down into three classes: [Class 2A] techniques
use such macro symptoms as Internet background ra-
diation (observed by network telescopes) to raise early
warnings of Internet wide worm infection [44]. [Class
2B] techniques use such local trafﬁc symptoms as con-
tent invariance, content prevalence and address disper-
USENIX Association
Security ’06: 15th USENIX Security Symposium
227
sion to generate worm signatures and/or block worms.
Some examples of Class 2B techniques are Earlybird
[47], Autograph [29], Polygraph [42], and TRW [27].
[Class 2C] techniques use worm code running symptoms
to detect worms. It is not surprising that Class 2C tech-
niques are exactly Class 1F techniques. Some exam-
ple Class 2C techniques are Shield [52], Vigilante [21],
COVERS [37]. [Class 2D] techniques use anomaly de-
tection on packet payload to detect worms and generate
signature. Wang and Stolfo [54] ﬁrst proposed Class
2D techniques called PAYL. PAYL is ﬁrst trained with
normal network ﬂow trafﬁc and then uses some byte-
level statistical measures to detect exploit code. Re-
cently, Wang et al. [53] proposed new features of PAYL
that based on ingress/egress anomalous payload corre-
lation to detect new worms and automatically generate
signatures. FLIPS [39] uses PAYL [54] to detect anoma-
lous inputs. If the anomaly is conﬁrmed by a detector, a
content-based signature is generated.
Class 2A techniques are not relevant to SigFree. Class
2C techniques are already discussed. Class 2D tech-
niques could be evaded by statistically mimics normal
trafﬁc [31]. Class 2B techniques rely on signatures,
while SigFree is signature-free. Class 2B techniques fo-
cus on identifying the unique bytes that a worm packet
must carry, while SigFree focuses on determining if a
packet contains code or not. Exploiting the content in-
variance property, Class 2B techniques are typically not
very resilient to obfuscation. In contrast, SigFree is im-
munized from most attack-side obfuscation methods.
2.3 Machine Code Analysis for Security
Purposes
Although source code analysis has been extensively
studied (see Class 1A), in many real world scenarios
source code is not available and the ability to analyze bi-
naries is desired. Machine code analysis has three main
security purposes: (P1) malware detection, (P2) to an-
alyze obfuscated binaries, and (P3) to identify and ana-
lyze the code contained in buffer overﬂow attack packets.
Along purpose P1, Chritodorescu and Jha [16] proposed
static analysis techniques to detect malicious patterns in
executables, and Chritodorescu et al. [17] exploited se-
mantic heuristics to detect obfuscated malware. Along
purpose P2, Lakhotia and Eric [35] used static analy-
sis techniques to detect obfuscated calls in binaries, and
Kruegel et al. [33] investigated disassembly of obfus-
cated binaries.
SigFree differs from P1 and P2 techniques in design
goals. The purpose of SigFree is to see if a message con-
tains code or not, instead of determining if a piece of
code has malicious intent or not. (Note that SigFree does
not check if the code contained in a message has mali-
cious intent.) Due to this reason, SigFree is immunized
from most attack-side obfuscation methods. Neverthe-
less, both the techniques in [33] and SigFree disassem-
ble binary code, although their disassembly procedures
are different. As will be seen, disassembly is not the ker-
nel contribution of SigFree.
Fnord [2], the preprocessor of Snort IDS, identiﬁes ex-
ploit code by detecting NOP sled. Toth and Kruegel [50]
also aim at detecting NOP sled. They employed binary
disassembly to ﬁnd the sequence of execution instruc-
tions as an evidence of a NOP sled. However, Some at-
tacks such as worm CodeRed do not include NOP sled
and, as mentioned in [15], mere binary disassembly is
not adequate. Moreover, polymorphic shellcode [23, 40]
can bypass the detection for NOP instructions by using
fake NOP zone. SigFree does not rely on the detection
of NOP sled.
Finally, being generally a P3 technique, SigFree is
most relevant to two P3 works [15, 32]. Kruegel et
al. [32] innovatively exploited control ﬂow structures to
detect polymorphic worms. Unlike string-based signa-
ture matching, their techniques identify structural simi-
larities between different worm mutations and use these
similarities to detect more polymorphic worms. The
implementation of their approach is resilient to a num-
ber of code transformation techniques. Although their
techniques also handle binary code, they perform ofﬂine
analysis. In contrast, SigFree is an online attack blocker.
As such, their techniques and SigFree are complemen-
tary to each other with different purposes. Moreover, un-
like SigFree, their techniques [32] may not be suitable to
block the code contained in every attack packet, because
some buffer overﬂow code is so simple that very little
control ﬂow information can be exploited.
Independent of our work, Chinchani and Berg [15]
proposed a rule-based scheme to achieve the same goal
of SigFree, that is, to detect exploit code in network
ﬂows. However, there is a fundamental difference be-
tween SigFree and their scheme [15]. Their scheme is
rule-based, whereas SigFree is a generic approach which
does not require any pre-known patterns. More specif-
ically, their scheme [15] ﬁrst tries to ﬁnd certain pre-
known instructions, instruction patterns or control ﬂow
structures in a packet. Then, it uses the found patterns
and a data ﬂow analysis technique called program slic-
ing to analyze the packet’s payload to see if the packet
really contains code. Four rules (or cases) are discussed
in their paper: Case 1 not only assumes the occurrence
of the call/jmp instructions, but also expects the push