40%
70%
90%
C LoC
N/A
N/A
2,373
85
149
767
270
3,379
119
467
399
138
110
529
Time
307s
349s
1,474s
8s
708s
74s
65s
134s
826s
428s
387s
85s
245s
425s
1,340
15,480
100%
78%
N/A
12,083
N/A
8,795
563s
1h 41m
MODULES IN OUR VERIFIED RECORD LAYER IMPLEMENTATION
Table II
model and represents fragments as mutable I/O buffers,
hence the transition requires copying fragments between
representations.
assembly can perform ChaCha20-Poly1305 in about one
cycle per byte and can do AES128-GCM and AES256-GCM
in less than half a cycle per byte.
Interoperability Our record implementation supports both
TLS 1.3 and 1.2 and exposes them through a common API.
We have tested interoperability for our TLS 1.2 record layer
with all major TLS implementations. For TLS 1.3 draft-
14, we tested interoperability with multiple implementations,
including BoringSSL, NSS, BoGo, and Mint, at the IETF96
Hackathon. For draft-18, we tested interoperability with the
latest version of Mint at the time of writing. In all cases,
our clients were able to connect to interoperating servers
using an ECDHE or PSK_ECDHE key exchange, then to
exchange data with one of the following AEAD algorithms:
AES256-GCM, AES128-GCM, and ChaCha20-Poly1305.
Similarly, our servers were able to accept connections from
interoperating clients that support the above ciphersuites.
Performance We evaluate the performance of our record
layer implementation at two levels. First, we compare our
implementation of AEAD encryption extracted to C using
an experimental backend for F(cid:2) to OpenSSL 1.1.0 compiled
with the no−asm option, disabling handwritten assembly
optimizations. Our test encrypts a random payload of 214
bytes with 12 bytes of constant associated data. We report
averages over 3,000 runs on an Intel Core E5-1620v3 CPU
(3.5GHz) on Windows 64-bit.
ChaCha20-Poly1305
AES256-GCM
AES128-GCM
Crypto.AEAD
13.67 cycles/byte
584.80 cycles/byte
477.93 cycles/byte
OpenSSL
9.79 cycles/byte
33.09 cycles/byte
28.27 cycles/byte
Our implementation is 17 to 18 times slower than OpenSSL
for AES-GCM and about 30% slower
for ChaCha20-
Poly1305. Note that the performance of custom assembly
implementations can be signiﬁcantly better. OpenSSL with
Next, we measure the throughput of our record layer inte-
grated into miTLS by downloading one gigabyte of random
data from a local TLS server. We compare two different
integration methods: ﬁrst, we extract the veriﬁed record layer
in OCaml, and compile it alongside the OCaml-extracted
miTLS. Then, we build an F(cid:2) interface to the C version
of our record implementation and call it from miTLS. We
compare these results with the default AEAD provider of
miTLS (based on OpenSSL 1.1.0 with all optimizations,
including hardware-accelerated AES), and curl (which uses
OpenSSL for the full TLS protocol).
OCaml
ChaCha20-
167 KB/s
Poly1305
AES256-GCM 68 KB/s
AES128-GCM 89 KB/s
C
OpenSSL
curl
183 MB/s
5.61 MB/s
5.35 MB/s
354 MB/s
398 MB/s
406 MB/s
440 MB/s
515 MB/s
571 MB/s
We observe that miTLS is not a limiting factor in these
benchmarks as its performance using the OpenSSL imple-
mentation of AEAD encryption is comparable to that of
libcurl.
Unsurprisingly, the OCaml version of our veriﬁed im-
plementation performs very poorly. This is due to the
high overhead of both memory operations and arithmetic
computations in the OCaml backend of F(cid:2) (which uses
garbage-collected lists for buffers, and arbitrary-precision
zarith integers). The C extracted version is over 30,000 times
faster, but remains two orders of magnitude slower than the
hardware-optimized assembly implementations in OpenSSL
for AES. For ChaCha20-Poly1305, we achieve 50% of the
assembly-optimized OpenSSL throughput.
Although our code is optimized for veriﬁcation and mod-
ularity rather than performance, we do not believe that
480
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
we can close the performance gap only by improving F(cid:2)
code for hardware-accelerated algorithms such as AES-
GCM—instead, we intend to selectively link our F(cid:2) code
with assembly code proven to correctly implement a shared
functional speciﬁcation. We leave this line of research for
future work.
REFERENCES
[1] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking
the TLS and DTLS record protocols,” in 2013 IEEE Sympo-
sium on Security and Privacy, 2013, pp. 526–540.
[2] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir,
“Veriﬁable side-channel security of cryptographic implemen-
tations: Constant-time MEE-CBC,” in 23rd International
Conference on Fast Software Encryption, FSE 2016, 2016,
pp. 163–184.
[3] C. Badertscher, C. Matt, U. Maurer, P. Rogaway, and B. Tack-
mann, “Augmented secure channels and the goal of the TLS
1.3 record layer,” in 9th International Conference on Provable
Security, ProvSec 2015, 2016, pp. 85–104.
[4] G. Barthe, C. Fournet, B. Grégoire, P. Strub, N. Swamy,
and S. Zanella-Béguelin, “Probabilistic relational veriﬁcation
for cryptographic implementations,” in 41st Annual ACM
Symposium on Principles of Programming Languages, POPL
2014, 2014, pp. 193–206.
[5] M. Bellare and P. Rogaway, “The security of triple encryption
and a framework for code-based game-playing proofs,” in
Advances in Cryptology – EUROCRYPT 2006, 2006, pp. 409–
426.
[6] ——, “Code-based game-playing proofs and the security
of triple encryption,” Cryptology ePrint Archive, Report
2004/331, 2004, http://eprint.iacr.org/2004/331.
[7] M. Bellare and B. Tackmann, “The multi-user security of au-
thenticated encryption: AES-GCM in TLS 1.3,” in Advances
in Cryptology – CRYPTO 2016, 2016, pp. 247–276.
[8] D. J. Bernstein, “The Poly1305-AES message-authentication
code,” in 12th International Workshopo on Fast Software
Encryption, FSE 2005, 2005, pp. 32–49.
[9] ——, “Stronger security bounds for Wegman-Carter-Shoup
authenticators,” in Advances in Cryptology – EUROCRYPT
2005, 2005, pp. 164–180.
[10] K. Bhargavan and G. Leurent, “On the practical (in-)security
of 64-bit block ciphers: Collision attacks on HTTP over TLS
and OpenVPN,” Cryptology ePrint Archive, Report 2016/798,
2016, http://eprint.iacr.org/2016/798.
[11] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and
P. Strub, “Implementing TLS with veriﬁed cryptographic
security,” in 2013 IEEE Symposium on Security and Privacy,
2013, pp. 445–459.
[12] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, , A. Pironti,
and P.-Y. Strub, “Triple handshakes and cookie cutters:
Breaking and ﬁxing authentication over TLS,” in 2014 IEEE
Symposium on Security and Privacy, 2014, pp. 98–113.
[13] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y.
Strub, and S. Zanella-Béguelin, “Proving the TLS handshake
secure (as it is),” Cryptology ePrint Archive, Report 2014/182,
2014, http://eprint.iacr.org/2014/182/.
[14] H. Böck, “Wrong results with Poly1305 functions,” https:
//mta.openssl.org/pipermail/openssl-dev/2016-March/006413,
2016.
[15] H. Böck, A. Zauner, S. Devlin, J. Somorovsky, and P. Jo-
vanovic, “Nonce-disrespecting adversaries: Practical forgery
attacks on GCM in TLS,” Cryptology ePrint Archive, Report
2016/475, 2016, http://eprint.iacr.org/2016/475.
of
[16] C. Boyd, B. Hale, S. F. Mjølsnes, and D. Stebila, “From
stateless to stateful: Generic authentication and authenticated
encryption constructions with application to TLS,” in Topics
in Cryptology – CT-RSA 2016, 2016, pp. 55–71.
[17] C. Cremers, M. Horvat, S. Scott, and T. van der Merwe,
“Automated analysis and veriﬁcation of TLS 1.3: 0-RTT,
resumption and delayed authentication,” in 2016 IEEE Sym-
posium on Security and Privacy, 2016, pp. 470–485.
[18] B. Dowling, M. Fischlin, F. Günther, and D. Stebila, “A
cryptographic analysis of the TLS 1.3 handshake protocol
candidates,” in 22nd ACM Conference on Computer and
Communications Security, 2015, pp. 1197–1210.
analysis
[19] ——,
“A cryptographic
the TLS 1.3
draft-10 full and pre-shared key handshake protocol,”
http://eprint.iacr.org/2016/081, 2016.
[20] T. Duong and J. Rizzo, “Here come the ⊕ ninjas,” Available
at http://nerdoholic.org/uploads/dergln/beast_part2/ssl_jun21.
pdf, May 2011.
[21] M. J. Dworkin, “Recommendation for block cipher modes
of operation: Galois/Counter mode (GCM) and GMAC,”
National Institute of Standards & Technology, Tech. Rep. SP
800-38D, 2007.
[22] M. Fischlin, F. Günther, G. A. Marson, and K. G. Paterson,
“Data is a stream: Security of stream-based channels,” in
Advances in Cryptology - CRYPTO 2015, 2015, pp. 545–564.
[23] M. Fischlin, F. Günther, B. Schmidt, and B. Warinschi,
“Key conﬁrmation in key exchange: A formal treatment and
implications for TLS 1.3,” in 2016 IEEE Symposium on
Security and Privacy, 2016, pp. 197–206.
[24] C. Fournet, M. Kohlweiss, and P. Strub, “Modular code-
based cryptographic veriﬁcation,” in 18th ACM Conference
on Computer and Communications Security, CCS 2011, 2011,
pp. 341–350.
[25] F. Giesen, F. Kohlar, and D. Stebila, “On the security of TLS
renegotiation,” in 2013 ACM Conference on Computer and
Communications Security, CCS 2013, 2013, pp. 387–398.
[26] P. Gutmann, “Encrypt-then-MAC for Transport Layer Secu-
rity (TLS) and Datagram Transport Layer Security (DTLS),”
IETF RFC 7366, 2014.
[27] T. Jager, F. Kohlar, S. Schäge, and J. Schwenk, “On the
security of TLS-DHE in the standard model,” in Advances
in Cryptology – CRYPTO 2012, 2012, pp. 273–293.
[28] T. Jager, J. Schwenk, and J. Somorovsky, “On the security
of TLS 1.3 and QUIC against weaknesses in PKCS#1 v1.5
encryption,” in 22nd ACM Conference on Computer and
Communications Security, 2015, pp. 1185–1196.
[29] M. Kohlweiss, U. Maurer, C. Onete, B. Tackmann, and
D. Venturi, “(de-) constructing TLS 1.3,” in Progress in
Cryptology–INDOCRYPT 2015. Springer, 2015, pp. 85–102.
[30] H. Krawczyk, “LFSR-based hashing and authentication,” in
Advances in Cryptology – CRYPTO 1994, 1994, pp. 129–139.
[31] ——, “The order of encryption and authentication for protect-
ing communications (or: how secure is SSL?),” Cryptology
ePrint Archive, Report 2001/045, 2001, http://eprint.iacr.org/
2001/045.
[32] H. Krawczyk and H. Wee, “The OPTLS protocol and TLS
1.3,” Cryptology ePrint Archive, Report 2015/978, 2015, http:
//eprint.iacr.org/2015/978.
[33] H. Krawczyk, K. G. Paterson, and H. Wee, “On the security
of the TLS protocol: A systematic analysis,” in Advances in
Cryptology – CRYPTO 2013, 2013, pp. 429–448.
[34] A. Luykx and K. G. Paterson, “Limits on authenticated
481
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
encryption use in TLS,” Personal webpage: http://www.isg.
rhul.ac.uk/~kp/TLS-AEbounds.pdf, 2015.
[35] D. McGrew and J. Viega, “Flexible and efﬁcient message
authentication in hardware and software.” Unpublished draft.
Available online at http://www.cryptobarn.com/.
[36] D. McGrew, “An interface and algorithms for authenticated
encryption,” IETF RFC 5116, 2008.
[37] B. Möller, T. Duong, and K. Kotowicz, “This POODLE Bites:
Exploiting The SSL 3.0 Fallback,” Available at https://www.
openssl.org/~bodo/ssl-poodle.pdf, 2014.
[38] Y. Nir and A. Langley, “ChaCha20 and Poly1305 for IETF
protocols,” IETF RFC 7539, 2015.
[39] K. G. Paterson, T. Ristenpart, and T. Shrimpton, “Tag size
does matter: Attacks and proofs for the TLS record protocol,”
in Advances in Cryptology – ASIACRYPT 2011, 2011, pp.
372–389.
[40] J. Rizzo and T. Duong, “The CRIME Attack,” September
2012.
[41] J. Salowey, A. Choudhury, and D. McGrew, “AES Galois
Counter Mode (GCM) cipher suites for TLS,” IETF RFC
5288, 2008.
[42] P. Sarkar, “A trade-off between collision probability and key
size in universal hashing using polynomials,” Cryptology
ePrint Archive, Report 2009/048, 2009, http://eprint.iacr.org/
2009/048.
[43] V. Shoup, “On fast and provably secure message authentica-
tion based on universal hashing,” in Advances in Cryptology
– CRYPTO 1996, 1996, pp. 313–328.
[44] B. Smyth and A. Pironti, “Truncating TLS connections
to violate beliefs
Inria, Tech.
Rep. hal-01102013, Oct. 2014. [Online]. Available: https:
//hal.inria.fr/hal-01102013
in web applications,”
[45] J. Somorovsky, “Systematic fuzzing and testing of TLS
libraries,” in 23rd ACM Conference on Computer and Com-
munications Security, CCS 2016, 2016.
[46] N. Swamy, C. Hritcu, C. Keller, A. Rastogi, A. Delignat-
Lavaud, S. Forest, K. Bhargavan, C. Fournet, P.-Y. Strub,
M. Kohlweiss, J.-K. Zinzindohoue, and S. Zanella-Béguelin,
“Dependent types and multi-monadic effects in F*,” in 43nd
ACM Symposium on Principles of Programming Languages,
POPL 2016, 2016, pp. 256–270.
[47] R.
´Swi˛ecki,
“ChaCha20/Poly1305 heap-buffer-overﬂow,”
CVE-2016-7054, 2016.
[48] P. Swire, J. Hemmings, and A. Kirkland, “Online privacy and
ISPs: ISP access to consumer data is limited and often less
than access by others,” Georgia Tech, Tech. Rep., 2016.
[49] D. Wagner and B. Schneier, “Analysis of the SSL 3.0 pro-
tocol,” in 2nd USENIX Workshop on Electronic Commerce,
WOEC 1996, 1996, pp. 29–40.
482
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply.