### 模块在我们验证的记录层实现中的应用

#### 表 II

我们的模型将片段表示为可变的 I/O 缓冲区，因此转换需要在不同表示之间复制片段。

- **互操作性**：我们的记录层实现支持 TLS 1.3 和 TLS 1.2，并通过一个通用 API 进行暴露。我们已经测试了与所有主要 TLS 实现的互操作性。对于 TLS 1.2 记录层，我们测试了与所有主要 TLS 实现的互操作性。对于 TLS 1.3 草案 14，我们在 IETF96 黑客松上测试了与多个实现（包括 BoringSSL、NSS、BoGo 和 Mint）的互操作性。对于草案 18，我们在撰写本文时测试了与最新版本 Mint 的互操作性。在所有情况下，我们的客户端能够使用 ECDHE 或 PSK_ECDHE 密钥交换连接到互操作服务器，并使用以下 AEAD 算法之一交换数据：AES256-GCM、AES128-GCM 和 ChaCha20-Poly1305。同样，我们的服务器能够接受支持上述密码套件的互操作客户端的连接。

- **性能**：我们在两个层面上评估了我们的记录层实现的性能。首先，我们将使用 F* 的实验后端提取到 C 的 AEAD 加密实现与禁用手写汇编优化的 OpenSSL 1.1.0 进行比较。我们的测试对 2^14 字节的随机负载进行加密，并带有 12 字节的常量关联数据。我们在 Intel Core E5-1620v3 CPU (3.5GHz) 上运行 Windows 64 位系统，报告了 3,000 次运行的平均值。

| 算法 | Crypto.AEAD (cycles/byte) | OpenSSL (cycles/byte) |
| --- | --- | --- |
| ChaCha20-Poly1305 | 13.67 | 9.79 |
| AES256-GCM | 584.80 | 33.09 |
| AES128-GCM | 477.93 | 28.27 |

我们的实现比 OpenSSL 慢 17 到 18 倍（对于 AES-GCM），而 ChaCha20-Poly1305 大约慢 30%。请注意，自定义汇编实现的性能可能会显著更好。OpenSSL 使用手写汇编优化可以进一步提高性能。

接下来，我们通过从本地 TLS 服务器下载一吉字节的随机数据来测量集成到 miTLS 中的记录层吞吐量。我们比较了两种不同的集成方法：首先，我们将验证过的记录层提取到 OCaml 并与其一起编译；然后，我们构建了一个 F* 接口，调用 C 版本的记录实现，并从 miTLS 中调用它。我们将这些结果与 miTLS 的默认 AEAD 提供者（基于完全优化的 OpenSSL 1.1.0，包括硬件加速的 AES）和 curl（使用 OpenSSL 实现完整的 TLS 协议）进行了比较。

| 方法 | ChaCha20-Poly1305 (KB/s) | AES256-GCM (KB/s) | AES128-GCM (KB/s) |
| --- | --- | --- | --- |
| OCaml | 167 | 68 | 89 |
| C | 183 MB/s | 5.61 MB/s | 5.35 MB/s |
| OpenSSL | 354 MB/s | 398 MB/s | 406 MB/s |
| curl | 440 MB/s | 515 MB/s | 571 MB/s |

我们观察到，在这些基准测试中，miTLS 并不是瓶颈，因为其使用 OpenSSL 实现 AEAD 加密的性能与 libcurl 相当。

不出所料，OCaml 版本的验证实现表现非常差。这是由于 F* 的 OCaml 后端中内存操作和算术计算的高开销（使用垃圾收集列表作为缓冲区，以及任意精度的 zarith 整数）。C 提取版本快了 30,000 多倍，但仍比 OpenSSL 中硬件优化的 AES 汇编实现慢两个数量级。对于 ChaCha20-Poly1305，我们实现了大约 50% 的 OpenSSL 汇编优化吞吐量。

尽管我们的代码优化是为了验证和模块化而不是性能，但我们认为仅通过改进 F* 代码无法缩小硬件加速算法（如 AES-GCM）的性能差距。相反，我们打算选择性地将 F* 代码与经过验证正确实现共享功能规范的汇编代码链接。我们将这一研究方向留作未来工作。

### 参考文献

[1] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS and DTLS record protocols,” in 2013 IEEE Symposium on Security and Privacy, 2013, pp. 526–540.

[2] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir, “Verifiable side-channel security of cryptographic implementations: Constant-time MEE-CBC,” in 23rd International Conference on Fast Software Encryption, FSE 2016, 2016, pp. 163–184.

[3] C. Badertscher, C. Matt, U. Maurer, P. Rogaway, and B. Tackmann, “Augmented secure channels and the goal of the TLS 1.3 record layer,” in 9th International Conference on Provable Security, ProvSec 2015, 2016, pp. 85–104.

...（其他参考文献省略）

[49] D. Wagner and B. Schneier, “Analysis of the SSL 3.0 protocol,” in 2nd USENIX Workshop on Electronic Commerce, WOEC 1996, 1996, pp. 29–40.