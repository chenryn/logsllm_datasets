来自 jackmasa
9.使用str.replace中的replacement可控
在过滤了"的作用下,如果这时可以通过$`取到第一个匹配前的所有字符
或者$1取到第一个匹配分组
那么即使我们传入的replacement已经过一次检查
替换后的结果中仍然可以存在"
#3.4 针对某些过滤方法的绕过。
1.如果对于某个object的属性,在检查到非法字符串的时候
使用了delete对其进行清除,那么我们可以通过向其原型传递参数的方法来进行绕过。
比如x={'name':'invalid','__proto__':{'name':'evilcode'}}
则这时如果使用__proto__进行属性的赋值
因为__proto__是x对象的原型,所以如果对name进行delete
delete x.name;
则这个语句delete x自身的属性后
x会继承其__proto__的属性
有一点像c++里的子类继承父类属性
#4 长度限制的bypass
码由于笔者自身的能力有限,所以这里也只列举三个方法
4.1 window.name跨域
使用iframe跨域的话,自身的payload长度就可以得到极大的缩短
因为你唯一需要的就是执行window.name里的代码
有在特定的场景下,window.name由于window是一个全局对象,可以直接省略window
而是用name去访问我们的window.name
而window.name能够承载的长度很大,足够我们绕过
因此我们的只需要eval(name)就可以了
使用如下payload
成功执行
4.2 jquery工厂函数
jquery的工厂函数$()需要传入的是一个完整的html标签
它会自动的构造起里面的标签,并且执行里面的代码
如果我们使用了$(location.hash)就缩短了非常多的长度
做一个小小的测试
使用的payload是这样的
" width="100%" 
height="100%" />
也能够成功的执行了代码,而且进一步缩短了payload的长度
4.3 使用短域名
曾经wooyun上的一篇文章有提到过这个问题,在payload长度相同的情况下,谁的域名越短
谁就拥有了先天的优势。
比如一些物理单位符号,可以被合法的注册,而且会被自动解析到对应的英文域名
包括之后出现的一些韩语域名,emoji域名,也许都可以用来缩短我们的payload长度
#5 构造无需交互的payload&绕过事件过滤
之所以单独的将这一问题单独列出来,是因为虽然很多时候我们确实证明了某个输出点有xss漏洞
但一个需要用户交互较少的xss payload 才称得上足够有效
但是大多数时候,能够使用的事件都被过滤了
因此,如果我们的payload还需要用户做大量的点击拖拽等操作(click jacking除外)
那完全称不上足够有效
当然最好就是无需交互,那么就让我们来看一看怎么构造出无需交互的payload
5.1 onerror/onload 事件
两个事件是最容易触发,而且无需交互的
比如如下的payload
但是这两个事件太常见了,非常容易就遭到了过滤
而且也有相当一部分标签不支持onerror等事件
5.2 onfocus与autofocus
对于等标签来说,onfocus事件使他们在获得焦点时
而autofocus则会让他们自动获得焦点
因此,很容易利用这个构造出如下的payload,使他们自动获得焦点并触发事件执行js
1"%20autofocus%20onfocus=alert(1)//
完整的html标签是这样的
可以自动的触发我们的payload
那么如果我们的onfocus属性也被过滤掉了呢?
5.3 onblur与autofocus
onblur是标签失去焦点时引发的事件,那么你可能就会问了
这和我无需交互的payload有什么关系呢
很简单,我们来看看怎么样让标签'自动'失去焦点
(1)在稍早版本的chrome中
我们构造如下payload
x=1">
有好几个标签来'竞争' autofocus的焦点,那么 只要我们的第一个带有onblur事件的input,在获得焦点后,又因为竞争而失去焦点的话,就可以触发这个payload了
(2)在最新版本中
由于上一个payload已经无法正常工作了,但是我们仍然能够通过
x=1">
来构造一个需要较少交互的xss向量
用户只要随意点击窗口里的任意一个地方就会触发我们的payload
但是非常多其他标签似乎无法触发onfocus,更不要说autofocus了
5.4 标签的ontoggle事件
如果大部分常见事件都被过滤掉了,我们仍然有办法来构造一个无需交互的xss向量
这就是标签的ontoggle属性,它会在自身的open属性不为空时触发
构造如下payload
x=1">
在chrome最新版本中有效
5.5 flash-xss的自动触发
在之前的chrome auditor bypass中,它似乎非常鸡肋
但是在存储型xss和其他浏览器的场景下,用它可以构造非常有效的攻击向量
payload构造如下
x=1">
最新版chrome/firefox均有效
5.6 任意标签的自动触发
那么如何实现任意标签的自动触发这一目标呢
这里只简单的讲一个技巧
可以用任意脚本构造出无需交互的payload
如我们所知,有很大一部分标签是"不响应"onfocus事件的
你用鼠标移动上去,他没有任何的反应
但事实上,真的如此么?
我们试着给它添加一个tabindex属性
然后为它设置id=1
最后用location.hash来定位到id=1的锚点,就可以让他获得焦点
这里我们用一个不存在于标准里的标签来测试
构造如下payload
x=1">#1
对应的标签是
于是,我们就获得了一个构造任意标签的自动触发payload的方法。
#6 CSP Bypass
CSP(内容安全策略)也是目前现代浏览器越来越重要的一种限制XSS的手段
关于如何对它进行绕过,具体参见我的文章《初探CSP Bypass 一些细节总结》
#7 XSS tricks
虽然有时候我们不一定能够通过标签和脚本的写入来实现一个xss
但是有时候一些奇思妙想也可以让我们简介的实现目标
7.1 firefox ");
?>
然后在受害者访问的网站里插入
访问后受害者的cookie被设置为hehe=tester 产生了一个固定回话漏洞
此时如果受害者尝试进行登陆,我们随后就可以用这个被认证了的cookie以用户身份使用其账号
因为chrome不允许302跳转到base64链接(如图)
所以只能在firefox下使用这个攻击手法
而且大部分网站的富文本编辑器都允许插入一张图片
因此危害还是比较大的。
7.2 利用 opener进行钓鱼
在js中可以使用window.opener (也就是当前window的父窗体)来访问到打开本窗体的页面
比如我的chrome有两个标签页,从a标签页打开了b,那么b就可以通过window.opener.location
反过来控制a标签页的地址
虽然很明显的,浏览器不允许其跳转到一个javascript地址,但是却可以跳转到一个dataURL
因此我们可以伪造一个a标签页对应网站的登陆页面,让用户以为是自己掉线了
从而实现钓鱼的功能。
#8 结语
通过本文对XSS的各类应用场景进行探讨,以笔者有限的能力剖析了一些业务场景
分析了一部分具体的xss payload和目前存在的主流绕过方法。
希望能够通过这篇文章,起到抛砖引玉的效果。
#9 参考
[1] https://html5sec.org/xssauditor/bypasses-052016
[2] https://insert-script.blogspot.co.at/2016/12/firefox-svg-cross-domain-cookie.html