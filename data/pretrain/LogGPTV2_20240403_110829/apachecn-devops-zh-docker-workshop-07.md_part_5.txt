16.  List the volumes again:
    ```
    $ docker volume ls
    ```
    您会发现卷列表现在是空的:
    ```
    DRIVER           VOLUME NAME
    ```
    这将验证临时卷是否在使用这些卷的所有容器都被移除时被移除。
在本练习中，您使用了`--volumes-from`选项在容器之间共享体积。此外，本练习证明了最佳实践是始终使用`-v`选项移除容器。只要至少有一个容器正在使用该卷，Docker 就不会删除该卷。
如果我们将这两个容器`c1`或`c2`中的任何一个提交给新映像，则保存在共享卷上的数据仍然不会上载到该新映像。任何卷上的数据，即使该卷在容器和主机之间共享，也不会上载到新映像。
在下一节中，我们将看到如何使用文件系统而不是卷将这些数据雕刻到新提交的映像中。
# 卷与文件系统和映像
请注意，卷不是映像的一部分，因此保存在卷上的数据不会与映像一起上传或下载。这些卷将被刻在映像中，但不是它的数据。因此，如果要将某些数据保存在映像中，请将其保存为文件，而不是卷。
下一个练习将演示并阐明将数据保存在卷上和保存在文件上的不同输出。
## 练习 7.10:在卷上保存文件并将其提交到新映像
在本练习中，您将运行一个带有卷的容器，在卷上保存一些数据，将容器提交到一个新映像，并基于这个新映像创建一个新容器。当您从容器内部检查数据时，您将找不到它。数据将会丢失。本练习将演示将容器提交到新映像时数据将如何丢失。请记住，卷上的数据不会刻在新映像中:
1.  创建一个新容器，其体积为:
    ```
    $docker container run --name c1 -v /newvol -it ubuntu:14.04 bash
    ```
2.  在该卷内保存一个文件:
    ```
    echo hello > /newvol/file.txt
    cd newvol
    ```
3.  导航至`newvol`卷:
    ```
    cd newvol
    ```
4.  Verify that `c1` can access `file.txt` using the `ls` command:
    ```
    ls
    ```
    您将看到文件被列出:
    ```
    file.txt
    ```
5.  View the content of the file using the `cat` command:
    ```
    cat file.txt
    ```
    这将导致以下输出:
    ```
    hello
    ```
6.  使用以下命令退出容器:
    ```
    exit
    ```
7.  将此容器提交给名为`newimage` :
    ```
    $ docker container commit c1 newimage
    ```
    的新映像
8.  Inspect the image to verify that the volume is engraved inside it:
    ```
    $ docker image inspect newimage --format={{.ContainerConfig.Volumes}}
    ```
    这将导致以下输出:
    ```
    map[/newvol:{}]
    ```
9.  根据您刚刚创建的`newimage`映像制作容器:
    ```
    $ docker container run -it newimage
    ```
10.  导航至`newvol`并列出卷中的文件及其数据。你会发现文件和单词`hello`并没有保存在映像中:
    ```
    cd newvol
    ls
    ```
11.  使用以下命令退出容器:
    ```
    exit
    ```
从本练习中，您了解到卷上的数据不会上载到映像中。要解决这个问题，请使用文件系统而不是卷。
假设单词`hello`是我们希望保存在映像内部`file.txt`中的重要数据，这样当我们从该映像制作容器时就可以访问它。在下一个练习中，您将看到如何做到这一点。
## 练习 7.11:在新的映像文件系统中保存文件
在本练习中，您将使用文件系统而不是卷。您将创建一个目录而不是卷，并将数据保存在这个新目录中。然后，您将把容器提交给一个新的映像。当您使用此映像作为基本映像创建一个新容器时，您会发现容器中的目录以及保存在其中的数据:
1.  Remove any container that you might have from previous labs. You can concatenate several Docker commands to each other:
    ```
    $ docker container rm -f $(docker container ls -aq)
    ```
    该命令将返回将要删除的容器的标识。
2.  创建一个没有体积的新容器:
    ```
    $ docker container run --name c1 -it ubuntu:14.04 bash
    ```
3.  使用`mkdir`命令创建名为`new`的文件夹，并使用`cd`命令打开它:
    ```
    mkdir new 
    cd new
    ```
4.  导航至`new`目录，将单词`hello`保存在名为`file.txt` :
    ```
    echo hello > file.txt
    ```
    的新文件中
5.  View the content of the file using the following command:
    ```
    cat file.txt
    ```
    该命令应返回`hello`:
    ```
    hello
    ```
6.  使用以下命令退出【T0:
    ```
    exit
    ```
7.  将此容器提交给名为`newimage` :
    ```
    $ docker container commit c1 newimage
    ```
    的新映像
8.  根据您刚刚创建的`newimage`映像制作容器:
    ```
    $ docker container run -it newimage
    ```
9.  List the files using the `ls` command:
    ```
    ls
    ```
    你会发现`file.txt`这次被保存了:
    ```
    bin  boot  dev  etc  home  lib  lib64  media  mnt  new  opt
    proc  root  run sbin  srv  sys  tmp  usr  var
    ```
10.  Navigate to the `new` directory and verify that the container can access `file.txt` using the `ls` command:
    ```
    cd new/
    ls
    ```
    您将看到文件被列出:
    ```
    file.txt
    ```
11.  Use the `cat` command to display the contents of `file.txt`:
    ```
    cat file.txt
    ```
    它会显示`hello`这个词被保存了:
    ```
    hello
    ```
12.  使用以下命令退出容器:
    ```
    exit
    ```
在本练习中，您看到当使用文件系统时，数据被上传到映像，而不是我们看到的数据保存在卷上的情况。
在下面的活动中，我们将看到如何在 PostgreSQL 数据库中保存容器的状态。因此，如果容器崩溃，我们将能够追溯发生的事情。它将充当一个黑匣子。此外，您将在下面的活动中使用 SQL 语句查询这些事件。
## 练习 y 7.01:在 PostgreSQL 数据库中存储容器事件(状态)数据
在 Docker 中，日志记录和监控可以通过几种方式完成。其中一种方法是使用`docker logs`命令，该命令获取单个容器内发生的事情。另一种方法是使用`docker events`子命令，它实时获取 Docker 守护程序内部发生的一切。这个特性非常强大，因为它监控发送到 Docker 服务器的所有对象事件，而不仅仅是容器。对象包括容器、映像、卷、网络、节点等。将这些事件存储在数据库中是很有用的，因为可以对它们进行查询和分析，以便在出现错误时进行调试和故障排除。
在本练习中，您需要使用`docker events --format '{{json .}}'`命令将容器事件输出的样本以`JSON`格式存储到 PostgreSQL 数据库中。
执行以下步骤完成本活动:
1.  通过删除所有 Docker 对象来清理您的主机。
2.  打开两个终端:一个看`docker events --format '{{json .}}'`生效，一个控制运行容器。
3.  在`docker events`终端点击 *Ctrl* + *C* 终止。
4.  了解 JSON 输出结构。
5.  运行 PostgreSQL 容器。
6.  创建一个表格。
7.  从第一个终端复制`docker events`子命令输出。
8.  将这个 JSON 输出插入 PostgreSQL 数据库。
9.  Query the JSON data using the SQL `SELECT` statement with the following SQL queries.
    **查询 1** :
    ```
    SELECT * FROM events WHERE info ->> 'status' = 'pull';
    ```
    您应该会得到以下输出:
    ![Figure 7.8: Output of Query 1 ](img/B15021_07_08.jpg)
图 7.8:查询 1 的输出
**查询 2** :
```
SELECT * FROM events WHERE info ->> 'status' = 'destroy';
```
您将获得如下输出:
![Figure 7.9: Output of Query 2 ](img/B15021_07_09.jpg)
图 7.9:查询 2 的输出
**查询 3** :
```
SELECT info ->> 'id' as id FROM events WHERE info ->> status'     = 'destroy';
```
最终输出应该类似于以下内容:
![Figure 7.10: Output of Query 3 ](img/B15021_07_10.jpg)
图 7.10:查询 3 的输出
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor336)找到。
在下一个活动中，我们将查看共享容器的 NGINX 日志文件的另一个示例，而不仅仅是它的事件。您还将学习如何在容器和主机之间共享日志文件。
## 活动 7 .02:与主机共享 NGINX 日志文件
正如我们之前提到的，将应用的日志文件共享给主机是很有用的。这样，如果容器崩溃，您可以很容易地从容器外部检查其日志文件，因为您将无法从容器中提取它们。这种做法对于无状态和有状态容器很有用。
在本练习中，您将与主机共享从 NGINX 映像创建的无状态容器的日志文件。然后，通过从主机访问 NGINX 日志文件来验证这些文件。
**步骤**:
1.  确认您的主机上没有`/var/mylogs`文件夹。
2.  基于 NGINX 映像运行一个容器。在`run`命令中指定主机上和容器内共享卷的路径。在容器内部，NGINX 使用`/var/log/nginx`路径来存放日志文件。在主机上指定路径为`/var/mylogs`。
3.  Go to the path of `/var/mylogs`. List all the files in that directory. You should find two files there:
    ```
    access.log       error.log
    ```
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor337)找到。
# 总结
本章讲述了 Docker 容器的生命周期和各种事件。它比较了有状态和无状态应用，以及每个应用如何保存数据。如果我们需要数据持久，我们应该使用卷。这一章讲述了卷的创建和管理。它进一步讨论了不同类型的卷，以及卷和文件系统使用之间的差异，以及当容器提交到新映像时，两者中的数据会受到怎样的影响。
在下一章中，您将了解持续集成和持续交付的概念。您将学习如何集成 GitHub、Jenkins、Docker Hub 和 SonarQube，以将您的映像自动发布到注册表中，为生产做好准备。