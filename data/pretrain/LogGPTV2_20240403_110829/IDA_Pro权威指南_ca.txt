18.3 IDA 加载器模块
IDA 使用加载器模块执行一项乏味的工作：创建新数据库的初始布局。当用户选择打开一个新的二进制文件时，就要用到加载器。加载器的工作包括：将输入文件读取到新建的数据库中，根据输入文件的结构创建节，组织数据库的布局，然后将控制权转交给处理器模块，由后者执行与反汇编有关的任务。创建数据库后，IDA 将调用初始加载器中的特殊函数，以移动数据库段和生成EXE 文件（File ▶ Produce File ▶ Create EXE File）。
一旦用户选择打开一个新的可执行文件，加载过程将立即开始（加载器并不用于加载现有的数据库）。和插件一样，加载器以共享库组件的形式构建。和插件一样，我们可以使用IDA SDK以共享库组件的形式构建加载器。加载器是第一种能够使用脚本（在 IDA 5.6 中引入）实施的 IDA扩展模块。
选择一个二进制文件后，IDA 将加载/loaders 目录中的每一个加载器模块，并要求每个模块分析该文件。能够识别新文件的格式的所有加载器将在“文件加载”对话框中列出，然后，由用户决定使用哪一个加载器加载这个文件。
18.4 使用SDK编写IDA 加载器
IDA 通过每个加载器必须声明和导出的全局 loader_t
 对象访问加载器模块。loader_t
 结构体类似于所有插件模块使用的 plugin_t
 类。在loader.hpp 中定义的loader_t
 结构体的布局如下面的代码清单所示。
struct loader_t {
   ulong version;        // api version, should be IDP_INTERFACE_VERSION  
   ulong flags;          // loader flags  
//check input file format. if recognized,  
  int (idaapi *accept_file)(linput_t *li,  
                            char fileformatname[MAX_FILE_FORMAT_NAME],  
                            int n);  
//load file into the database.  
  void (idaapi *load_file)(linput_t *li, ushort neflags,  
                           const char *fileformatname);  
//create output file from the database, this function may be absent.  
  int (idaapi *save_file)(FILE *fp, const char *fileformatname);  
//take care of a moved segment (fix up relocations, for example)  
//this function may be absent.  
  int (idaapi *move_segm)(ea_t from, ea_t to, asize_t size,  
                          const char *fileformatname);  
//initialize user configurable options based on the input file.  
//Called only when loading is done via File->New, not File->Open  
//this function may be absent.  
  bool (idaapi *init_loader_options)(linput_t *li);  
};
和plugin_t
 类一样，loader_t
 对象的行为由它的成员指向的函数（由加载器作者创建）定义。每个加载器必须导出一个名为 LDSC
 （指加载器说明）的 loader_t
 对象。loader.hpp 文件负责导出LDSC
 对象，然后由你声明和初始化。需要注意的是，有几个函数接受一个 linput_t
 （指加载器输入类型）类型的输入参数。linput_t
 是一个内部 SDK 类，它为C 标准 FILE
 类型提供不依赖于编译器的包装器。为 linput_t
 执行标准输入操作的函数在 diskio.hpp中声明。
要成功创建加载器，你必须正确初始化LDSC
 对象。下面简要说明这个对象的每个成员的作用。
version
 。这个成员的作用和 plugin_t
 类中的version
 成员的作用相同。请参阅第 17 章中对它的描述。
flags
 。加载器识别的唯一一个标志为 LDRF_RELOAD
 ，该标志在 loader.hpp 中定义。对许多加载器来说，把这个字段赋值为零就够了。
accept_file
 。这个函数的作用是为新选择的输入文件提供基本的识别功能。这个函数应利用所提供的 linput_t
 对象，从一个文件中读取足够的信息，以决定加载器是否能够解析该文件。如果该函数能够识别这个文件，加载器应将文件格式名称复制到file- formatname
 输出缓冲区中。如果无法识别文件格式，这个函数应返回0；如果它能够识别文件格式，则返回非零值。用ACCEPT_FIRST
 标志对返回值进行 OR
 处理，可要求 IDA 在文件加载对话框中首先列出这个加载器。如果几个加载器都标有ACCEPT_FIRST
 ，则首先列出最后查询的加载器。
load_file
 。这个成员是另一个函数指针。如果用户选择用你的加载器加载新选择的文件，IDA 将调用相关联的函数。这个函数接受一个应被用于读取所选文件的linput_t
 对象。neflags
 参数包含对在loader.hpp 中定义的各种NEF_XXX
 标志的按位OR
 操作。这其中的几个标志反映了文件加载对话框中各种复选框设置的状态。load_file
 函数负责执行必需的任务，如解析输入文件内容，加载和映射一些或全部文件内容到新建的数据库中。如果发现一个无法修复的错误条件，load_file
 应调用loader_failure
 ，终止加载过程。
save_file
 。这个成员选择性地指向一个函数，该函数能够响应File ▶ Produce File ▶ Create EXE File 命令，生成一个 EXE 文件。严格来说，“EXE ”有些不恰当，因为执行 save_file
 可以生成你想要的任何类型的文件。由于加载器负责将一个文件映射到数据库中，它应该也能够将这个数据库映射到原来的文件中。实际上，加载器并没有从初始输入文件中加载足够的信息来根据数据库内容生成一个有效的输出文件。例如，IDA 自带的 PE文件加载器无法由一个数据库文件重新生成一个 EXE 文件。如果你的加载器不能生成输出文件，那么，你应该将 save_file
 成员设置为 NULL。
move_segm
 。这个成员是一个指向函数的指针，当用户尝试移动数据库中一个使用这个加载器加载的段时，IDA 将调用该函数。由于加载器可能知道原始二进制文件中包含的重定位信息，因此，在移动段时，这个函数可能会考虑到重定位信息。这个函数是可选的，如果不需要这个函数（例如，如果在这种文件格式中没有重定位或修复地址），则该指针应设置为 NULL。
init_loader_options
 。这个成员是一个指向函数的指针，该函数用于通过File ▶ New 命令完成的基于向导的加载过程，设置用户指定的选项。此函数只能在 IDA 的Windows 本机GUI 版本（idag ）中使用，因为该版本是唯一提供这些向导的IDA 版本。在调用oad_file
 之前，一旦用户选择一个加载器，这个函数即被调用。如果在调用load_file
 之前，不需要对加载器进行配置，那么，你完全可以将这个成员指针设置为 NULL。
init_loader_options
 函数值得我们额外说明。需要记住的是，如果使用 File ▶ Open命令打开一个文件，这个函数绝不会被调用。在更加复杂的加载器（如 IDA 的PE加载器）中，这个函数用于初始化基于 XML的向导，这个向导帮助用户完成整个加载过程。/cfg目录保存了几个这类向导的 XML模板。但是，除了现有的模板外，没有文档资料说明如何创建你自己的向导模板。
在本章的剩余部分，我们将开发两个示例加载器，以分析一些常用的加载器操作。
18.4.1 “傻瓜式”加载器
为了说明 IDA 加载器的基本操作，我们引入一个完全虚拟的“傻瓜式”文件格式，它由下面的C 结构体定义（所有值采用小端字节顺序）：
struct simpleton {  
   uint32_t magic; //simpleton magic number: 0x1DAB00C  
   uint32_t size;  //size of the code array  
   uint32_t base;  //base virtual address and entry point  
   uint8_t code[size]; //the actual program code  
};
这个文件的格式非常简单：一个幻数文件标识符和两个描述文件结构的整数，后面是文件中的所有代码。这个文件从 code
 块的第一个字节开始执行。
一个小型“傻瓜式”文件的十六进制代码如下所示：
0000000: 0cb0 da01 4900 0000 0040 0000 31c0 5050  PI:EMAIL  
0000010: 89e7 6a10 5457 50b0 f350 cd91 5859 4151  ..j.TWP..P..XYAQ  
0000020: 50cd 9166 817f 0213 8875 f16a 3e6a 025b  P..f.....u.j>j.[  
0000030: 5853 6a09 516a 3ecd 914b 79f4 5068 6e2f  XSj.Qj>..Ky.Ph//  
0000040: 7368 682f 2f62 6989 e350 5389 e150 5153  shh/bin..PS..PQS  
0000050: b03b 50cd 91                             .;P..
SDK 提供了几个样本加载器，它们位于/ldr目录中。我们选择在样本加载器目录下的子目录中构建加载器，这里我们使用/ldr/simpleton。加载器采用以下设置：
#include "../idaldr.h"  
#define SIMPLETON_MAGIC 0x1DAB00C  
struct simpleton { 
   uint32_t magic; //simpleton magic number: 0x1DAB00C  
   uint32_t size;  //size of the code array  
   uint32_t base;  //base virtual address and entry point  
};
SDK自带的idaldr.h 头文件（/ldr/idaldr.h）是一个便捷文件，其中包含其他几个头文件，并定义了几个宏，它们常常用在加载器模块中。
下一步是声明所需的 LDSC
 对象，它指向各种实现加载器行为的函数：
int idaapi accept_simpleton_file(linput_t *, char[MAX_FILE_FORMAT_NAME], int);  
void idaapi load_simpleton_file(linput_t *, ushort, const char *);  
int idaapi save_simpleton_file(FILE *, const char *); 
loader_t LDSC = {  
  IDP_INTERFACE_VERSION,  
  0,                      // loader flags  
  accept_simpleton_file,  // test simpleton format.  
  load_simpleton_file,    // load file into the database.  
  save_simpleton_file,    // simpleton is an easy format to save  
  NULL,                   // no special handling for moved segments  
  NULL,                   // no special handling for File->New  
};
接下来，我们按照调用的顺序描述这个加载器所使用的函数，首先是accept_simpleton_ loader
 函数：
int idaapi accept_simpleton_file(linput_t *li,  
                              char fileformatname[MAX_FILE_FORMAT_NAME], int n) {  
   uint32 magic;  
   if (n || lread4bytes(li, &magic, false)) return 0;  
   if (magic != SIMPLETON_MAGIC) return 0;   //bad magic number found  
   qsnprintf(fileformatname, MAX_FILE_FORMAT_NAME, "Simpleton Executable");  
   return 1;  //simpleton format recognized  
}
这个函数的唯一目的是判断被打开的文件是否是一个“傻瓜式”文件。参数n
 是一个计数器，它统计accept_file
 函数在当前的加载过程中被调用的次数。通过使用这个参数，加载器将能够识别多种相关文件格式。IDA 将用递增的n
 值调用accept_file
 函数，直到该函数返回0 。对于加载器识别的第一种特殊格式，你应填入fileformatname
 数组并返回非零值。这里，我们通过立即返回0 ，忽略除第一次调用（当时 n
 为0 ）以外的其他调用。在 diskio.hpp 中定义的lread4bytes
 函数用于读取4 字节幻数。如果成功读取到幻数，这个函数将返回0 。lread4bytes
 函数的一个有用特性在于它能够根据它的第三个布尔参数的值，以大端或小端顺序读取字节（值为false
 则读取小端，值为 true