First discussed here: https://discourse.julialang.org/t/unnecessary-where-t-
causes-huge-performance-drop/31078
Given the following functions in a Julia 1.3rc4 session:
    function f1(x) where {T}
        return x*2
    end
    function f2(x)
        return x*2
    end
    function f3(::Type{T}, x) where {T}
        return x*2
    end
I'd assume that all of them would generate the same machine code for the same
`x`. This is however not the case:
    @btime f1(1)
      10.825 ns (0 allocations: 0 bytes)
    2
    @btime f2(1)
      0.017 ns (0 allocations: 0 bytes)
    2
    @btime f3(Bool, 1)
      0.017 ns (0 allocations: 0 bytes)
For both `f2` and `f3` the constant folding worked, but `f1` does something
differently. I also tried it using broadcasting to trick the constant folding:
    a = rand(1000);
    @btime f1.($a);
      14.736 Î¼s (2001 allocations: 39.19 KiB)
    @btime f2.($a);
      471.755 ns (1 allocation: 7.94 KiB)
    @btime f3.(Bool, $a);
      445.223 ns (1 allocation: 7.94 KiB)
There are a lot of allocations which I do not understand. Is this some kind of
a lowering bug?
Update: sorry, I did a silly mistake, v0.7 of Julia shows the same behaviour