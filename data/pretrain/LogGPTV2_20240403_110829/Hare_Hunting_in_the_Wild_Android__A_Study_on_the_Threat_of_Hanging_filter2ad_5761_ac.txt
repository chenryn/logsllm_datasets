Hub available accounts list. Once it was clicked by the user, the
app sent an implicit Intent with action com.lge.lgaccount.
action.ADD_ACCOUNT. On the device (G3), no pre-installed
apps deﬁne the action, which enabled the malware to deﬁne the ac-
tion, claiming that it could handle the Intent. The consequence is
that the user’s click on the system app (LG CloudHub) triggered a
malicious activity that masqueraded as the login page for LG Cloud
account, which was used to cheat the user into exposing her pass-
word and other credentials. Here is the demo for the attack [6].
3.3 Permission Seizure
The Hare ﬂaws can also be introduced by permissions, which
are deﬁned by system apps and utilized to control the access to
various system (e.g., GPS, audio, etc.) or app-deﬁned resources
(e.g., content providers, broadcast receivers, etc.). During the OS
customization process, the apps that specify the permissions (their
original “owners”) could be removed. In the meantime, if the re-
sources guarded by these permissions are still there, the uses of the
permissions (for protection) become hanging references. To exploit
such ﬂaws, the adversary can simply deﬁne those missing yet still
being utilized permissions to gain access to the resources they pro-
tect. This problem was also found to be extensive in our research,
present on all 97 factory images we scanned. Making this threat
particularly perilous is the fact that Google Play does not check du-
plicate permissions: all our attack apps were successfully uploaded
there. Here we describe two examples.
Getting contacts from S-Voice. The system app S-Voice includes
a content provider (com.vlingo.midas.contacts.content
provider) that maintains the information about the user’s con-
tacts, including names, email addresses, telephone number, home
addresses, etc. Access to the provider is guarded by a pair of
permissions com.vlingo.midas.contacts.permission
.READ (READ for short) and com.vlingo.midas.contacts.
permission.WRITE (WRITE). However, we found that they are
not on deﬁned on Galaxy Note 3 (phone) and Note 8.0 (tablet),
which opens the door for the exploit.
Speciﬁcally, we built an attack app for both devices, which de-
ﬁned the READ and WRITE permissions. The app was found to
be able to successfully read all the contact data from S-Voice and
also update its data managed by the content provider at will, e.g.,
changing the email address, URLs and phone number of a contact,
which could lead to information leaks and other consequences (e.g.,
causing the user to visit the adversary’s URL placed in her friend’s
contact). We post a demo on our website [6].
Cracking Link. Link is a system app that allows its user to syn-
chronize her data (ﬁles, images, audio, video, etc.) across different
devices (phone, tablet, laptop, etc.). For this purpose, on a mo-
bile device (phone or tablet), the app uses a content provider com.
mfluent.asp.datamodel.ASPMediaStoreProvider to
maintain the information about such data, together with the geolo-
cations of the user. This provider is protected by com.mfluent.
asp.permission.DB_READ _WRITE (DB_READ_WRITE for
short). However, on many factory images, we did not ﬁnd that the
permission has been deﬁned. As a result, the protection here be-
comes hanging.
We built an attack app in our research that deﬁned the DB_READ
_WRITE permission. On Galaxy Note 3 and Note 8.0, this app suc-
cessfully acquired sensitive information from the content provider,
including the user’s geolocations, all the meta-data of documents,
audio and video ﬁles (names, directory path, artist, genre, etc.).
Also, the malware was able to change the meta-data.
4. DETECTION AND MEASUREMENT
To better understand Hares and mitigate the security risks they
pose, we built a suite of tools in our research, including Harehunter,
an automatic analyzer that detects Hare ﬂaws from pre-installed
apps on factory images, and HareGuard, an app that catches the
attempts to exploit known hares on a device. Using Harehunter,
we also performed a measurement study that inspected 97 factory
OS images for popular devices like Galaxy S5, S6, Note 3, 4, 8.0,
LG G3, Nexus 7, Moto X, etc. Our study brought to light 21557
likely Hares across these devices, which demonstrates the perva-
siveness of such security-critical vulnerabilities. In the rest of the
section, we elaborate the design and implementation of these new
techniques and our ﬁndings.
4.1 Harehunter
As mentioned earlier, Harehunter is designed to identify hanging
references within system apps and can achieve a high accuracy. We
1253focus on these apps because prior research shows that pre-installed
apps are the most intensively customized components across dif-
ferent Android devices [24], and therefore the most likely sources
of Hare vulnerabilities. Our manual analysis further indicates that
the major portion of Hares indeed come from system apps. On
the other hand, framework services may also include hanging ref-
erences, so do third-party apps (e.g., Tango). Harehunter can be
directly applied to ﬁnd the problems in the third-party apps and ex-
tended (by tweaking the pre-processing step) to work on Android
services. Following we describe the idea, design of Harehunter and
its implementation.
Design. The idea behind our design is simple. For each factory im-
age, we ﬁrst run a differential analysis: extracting all the attributes
(package names, actions, activities, services, content providers and
permissions) its pre-installed apps deﬁne and all the references to
the attributes within their code and manifests, and then comparing
the references with the deﬁnitions. Any discrepancy between these
two ends indicates the possible presence of Hares. For example,
if a package name is used to start an activity (startActivity)
or bind a service (bindService) but it is not owned by any pre-
installed apps on a device, the reference to it is likely to be hang-
ing. On the other hand, such a reference could turn out to be well
guarded: for example, before referring to the package, a system
app may ﬁrst check its existence, collect its signature information
(e.g., getPackageInfo with GET_SIGNATURE ﬂag) and ver-
ify it against the signature of the authentic app. To detect a truly
vulnerable Hare, we have to analyze the code between a potential
guard (e.g., functions for signature checking) and a possible hang-
ing reference (e.g., startActivity) to ﬁnd out whether they
are indeed related. Only an unprotected reference will be reported
as a Hare.
To implement this idea, we designed a system with three key
components, Pre-processor, Differ and Guard Catcher, as illus-
trated in Figure 2: Pre-processor extracts app packages from an
OS image and converts them into the forms that can be analyzed
by follow-up steps; Differ performs the differential analysis and
reports possible hanging references; Catcher inspects the APK in-
volving such references to determine whether they have been guarded.
In the rest of the section, we describe how these components were
built in our research.
Figure 2: Design of Harehunter.
Pre-processing. From each factory image, Harehunter ﬁrst collects
all its pre-installed apps, in the forms of APK and ODEX ﬁles, and
runs Apktool to extract each app’s manifest ﬁle and Baksmali
to decompile the app into Smali code. For some devices, particu-
larly those with Samsung, a system app’s ODEX ﬁle is often sep-
arated from its APK ﬁle, for the purpose of improving its load-
ing time, while Flowdroid, the static analyzer we built our system
upon, only works on APKs. To address this issue, our pre-processor
was implemented to automatically unzip an ODEX ﬁle, decompile
it and then recompile and compress it, together with its resource
ﬁles, into a new APK ﬁle. Further complicating this process is that
for Android 5.0 Lollipop, ODEX ﬁles are replaced with OAT ﬁles,
which include native code. For the app in such a form, Harehunter
ﬁrst unzips its OAT ﬁles and then runs oat2dex to convert it to
the ODEX formate, enabling the above process to move forward.
Differential analysis. To perform a differential analysis, Differ
ﬁrst searches all extracted, decompiled code and manifest ﬁles for
the deﬁnitions of the targeted attributes. Running an XML parser,
our approach can easily collect deﬁned package, actions as well
as content providers authorities and permissions from individual
apps’ manifest ﬁle. Note that all these attributes, except the action
for receiving broadcast messages, can only be deﬁned within the
manifest. Although the action used in an Intent ﬁlter for a broadcast
receiver can be speciﬁed programmatically, it only serves to get a
message, not invoke a service or activity, and therefore its absence
will not cause a Hare hazard.
Most references to these attributes are within the code, in the
forms of various API calls. Speciﬁcally, package names and actions
are utilized through startActivity, startActivityForRe
sult, startService, etc. The authority name of a content
provider appears in various operations on the provider, such as
update, query, delete and others. Permissions are claimed
in manifests or veriﬁed through checkPermission and other
APIs. To identify these references, Differ ﬁrst locates the call sites
for all related functions from an app’s Jimple code (an intermediate
representation output by Soot [4]), and then performs a deﬁne-use
analysis from each call site to recover the targeted attribute names,
using the control-ﬂow graph (CFG) constructed by Flowdroid. An
issue here is that Flowdroid cannot create a complete CFG, miss-
ing quite a few program entry points like onHandleIntent. In
our implementation, we added back as many entries as we could
ﬁnd, but were still left with some target function calls whose related
CFGs could not be built by Flowdroid. For these calls, our current
prototype can only deal with the situation where the attribute names
are hardcoded within the related functions.
Guard detection. As mentioned earlier, references to missing at-
tributes are often protected. There are two basic ways for such pro-
tection, signature guard or feature guard. Figures 3 and 4 present
the examples for both cases. Signature guard tries to obtain the
signature of the package to be invoked, and compare it with what
is expected. In the example (Figure 3), this check is done through
extracting the signature of "com.facebook.katana" through
getPackageInfo with GET_SIGNATURES as a ﬂag and then
invoking compareSignature to compare it with that of the le-
gitimate Facebook app, before binding to the target app’s service
(bindService). The presence of the authentic package can also
ensure the correctness of action and activity names. The other way
to protect these attributes is to check the build model of the cur-
rent device, since only some of them come with certain features
(in terms of packages, content providers and others): e.g., input
methods, email apps can all be different from builds to builds; SM-
S/MMS providers may not even exist on a tablet. As an exam-
ple, Figure 4 shows that an app ﬁrst runs hasSystemFeature
to check whether the current device supports Google TV (com.
google.android.tv):
if so, it invokes the app youtube.
googletv, and otherwise, just YouTube.
To detect such protection, Guard Catcher conducts a taint anal-
ysis through both an app’s data ﬂows and control ﬂows, using the
12541
2
3
4
5
6
7
8
9
10
11
12
13
14
15
1
2
3
4
5
6
7
8
public boolean extendAccessToken(Context context,
ServiceListener servicelistener){
Intent intent = new Intent();
try{
PackageInfo pi =
context.getPackageManager().getPackageInfo
("com.facebook.katana",
PackageManager.GET_SIGNATURES);
// Compare signature to the legitimate Facebook
// app Signature
if (!compareSignatures
(pi.signatures[0].toByteArray())){
return false;
} else{
intent.setClassName("com.facebook.katana",
"com.facebook.katana.platform.
TokenRefreshService");
return context.bindService(intent, new
TokenRefreshServiceConnection(context,
servicelistener), 1);}
}catch(PackageManager.NameNotFoundException e){
return false;
}
}
Figure 3: Signature Based Guard Example
private void ViewVideo(Uri uri){
Intent intent = new
Intent("android.intent.action.VIEW", uri);
if (getPackageManager().hasSystemFeature
("com.google.android.tv")){
intent.setPackage("com.google.android.youtube.googletv");
} else{
intent.setPackage("com.google.android.youtube");
} startActivity(intent);
}
Figure 4: Feature Based Guard Example
functionalities provided by Flowdroid. Speciﬁcally, our approach
ﬁrst identiﬁes a set of guard functions like hasSystemFeature
and getPackageInfo with GET_SIGNATURES parameter and
then attempts to establish relations between them and the hang-
ing references discovered by the differential analysis, a necessary
condition for these references to be protected. For this purpose,
the outputs of these guards are set as taint sources and the refer-
ences (e.g., startActivity, bindService) are labeled as
taint sinks. Flowdroid is run to determine whether the taint can be
propagated from the former to the latter. For the sinks that cannot
be tainted, they are reported as likely Hares.
Running a full taint analysis (through both explicit and implicit
information ﬂows) for every guard and reference pair can be very
slow. To make the guard detection more scalable, Catcher takes a
multi-step hybrid strategy, combining quick property checks with
the taint analysis. Speciﬁcally, it ﬁrst inspects whether a source
and its corresponding sink are within the same method. When this
happens, in the vast majority of cases, they are related and there-
fore the reference is considered to be protected. Otherwise, our
approach further compares the package name involved in a signa-
ture check with that used for a reference. A match found between
the pair almost always indicates a protection relation. An example
is com.facebook.katana within the code snippet in Figure 3
that shows up both within getPackageInfo and setClassNa
me. Only when both checks fail, will the heavyweight taint analysis
be used. In our large-scale analysis of factory images (Section 4.2),
we found that most of the time, the guard for a reference can be
discovered in the ﬁrst two steps.
Evaluation. We evaluated the effectiveness of our implementa-
tion in a measurement study, which involves the OS images for 97
Figure 5: Distribution of Hares across Different Hare Cate-
gories
popular devices, all together over 24000 system apps. Harehunter
reported 21557 likely Hares. From all these Hares, we randomly
sampled 250 and manually analyzed their code. Only 37, i.e., 14%,
were found to be false detection: that is, falsely treating a guarded
reference as a Hare. We further measured the false negative rate of
the Guard Catcher by randomly checking likely hanging references
reported by Differ and comparing the ﬁndings with what was de-
tected by Catcher. In all 250 samples, 46 (19%) were missed by our
implementation: i.e., true Hares falsely considered to be guarded.
Looking into those false positives and negatives, we found that they
were all caused by the incomplete call graphs output by FlowDroid.
Flowdroid is known to have trouble in dealing with ICC [18] and
other issues like missing entry points and incomplete call graphs.
When this happens, a taint analysis cannot go through.
4.2 A Large-scale Measurement Study
To understand the scope and magnitude of the security hazards
caused by Hares, we performed a large-scale measurement study
on 97 factory images. The study shows that Hares are indeed per-
vasive, with a signiﬁcant impact on the Android ecosystem: over
21557 LHares were discovered and many of them could lead to the
consequences such as activity hijacking, data leakage and pollu-
tion. Following we report our ﬁndings.
OS Image collection. In our research, we collected 97 factory im-
ages from Samsung Update [3], Android Revolution [2] and physi-
cal devices, which include around 183 apps per image and 24185 all
together apps. These images are customized for 49 different phone
or tablet models, 36 countries and 23 different carriers. They oper-
ate Android versions from 4.0.3 to 5.0.2. The detailed information
is presented in Table 1. Please note that we are anonymizing ven-
dors upon their request.
Landscape. When analyzing those factory images, we found that
about 13% of their pre-installed apps could not be decompiled by
Apktool or analyzed by Flowdroid. Among those that could
be analyzed, Harehunter discovered all together 21557 ﬂaws (un-
guarded hanging references) within 3450 vulnerable apps. Note
that some of these ﬂaws might occur more than once within the
same app, and some of the vulnerable apps show up on multiple
devices. Our research reveals that every single image contains a
large number of Hare ﬂaws, ranging from 8 to 598. On average,
14.3% of pre-installed apps on 4.X and 11.7% on 5.X were found
to be vulnerable. Table 2 shows the details.
Also as we can see from the table, the problems are also perva-
sive across different device manufacturers: both Vendor A and C
have a signiﬁcant portion of their system apps involving hanging
references. By comparison, Vendor D has the smallest number of
ﬂaws (29) and the lowest ratios (8%) of faulty apps. A possible rea-
son is that the OS images its devices run are the least customized