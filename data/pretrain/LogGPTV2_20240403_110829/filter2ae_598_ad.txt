"removeChild"]  
NodeList | ["childNodes"]  
Array | ["adoptedStyleSheets"]  
FeaturePolicy | ["featurePolicy"]  
Null | ["xmlEncoding", "xmlVersion", "onreadystatechange",
"onpointerlockchange", "onpointerlockerror", "onbeforecopy", "onbeforecut",
"onbeforepaste", "onfreeze", "onresume", "onsecuritypolicyviolation",
"onvisibilitychange", "oncopy", "oncut", "onpaste", "pointerLockElement",
"fullscreenElement", "onfullscreenchange", "onfullscreenerror",
"webkitCurrentFullScreenElement", "webkitFullscreenElement",
"onwebkitfullscreenchange", "onwebkitfullscreenerror", "rootElement",
"pictureInPictureElement", "ownerDocument", "parentNode", "parentElement",
"previousSibling", "nextSibling", "nodeValue", "textContent"]  
其中，`HTMLBodyElement`/`HTMLHeadElement`/`HTMLScriptElement`
均继承自`HTMLElement`，为什么需要这些呢？因为在很多时候我们 Clobber 得到的就是一个`HTMLElement`，而 Document
某些属性得到的也是一个`HTMLElement`，所以这时候我们可以直接利用。
## Cause
我想如果能覆盖的话，应该就是在调用`document.x`的时候， Dom
树解析得到的结果要优先于`document`自己本身属性，所以产生了这样的结果，但是这里也有一个问题，就是为什么我们在覆盖`cookie`的时候却不能完全控制覆盖呢？
带着这些疑问，我特地去看了一会 chromium 的源码，简略地看了一下这些实现，主要在 chromium 的 blink
部分。由于自己知识浅薄，并没有完整地阅读过 chromium 源码，这里还可能设计到一些编译原理的知识，所以我并没有安全把整个 Chromium
产生这个问题的缘由以代码追踪的形式弄出来，如果要弄的话估计也得去 debug Chromium
，那就是另一篇文章的内容了，所以这个部分还有待继续研究，不过我把自己看的一些有用的部分写出来。如果有兴趣的朋友可以联系我一起研究看看。（虽然我很菜XD
全部代码来源于 [Chomiunm Code Search](https://source.chromium.org/)，这个平台可以比较方便审代码。
### Location
首先我们来看看`location`，我们既可以使用`window.location`也可以使用`document.location`拿到`location`，这也能说明我们为什么上文要单独
fuzz Document 特有的属性而不是全部属性了。
在 Chromium 源码中，找到`location`比较简单， Chromium
直接调用了`window`对象的`location()`，所以我们就覆盖不了。
在`third_party/blink/renderer/core/dom/document.cc`中，第 933 行中有相关定义
[Document::location()](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/document.cc;l=933?originalUrl=https:%2F%2Fcs.chromium.org%2F)
    Location* Document::location() const {
      if (!GetFrame())
        return nullptr;
      return domWindow()->location();
    }
可以看到，直接调用了`domWindow()`来获取`location`，在`third_party/blink/renderer/core/frame/dom_window.cc`中，第85行有相关定义
[DOMWindow::location()](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/frame/dom_window.cc;drc=7e3843b722bda29c236e9cb49111f3296dc2ce20;l=85)
    Location* DOMWindow::location() const {
      if (!location_)
        location_ = MakeGarbageCollected(const_cast(this));
      return location_.Get();
    }
另外，有人提过相关用其他 hook 的方式 [Issue 315760: document.domain can be
hooked](https://bugs.chromium.org/p/chromium/issues/detail?id=315760)，里面提到可以
hook 到 domain 跟 location ，但是我在目前 stable chrome 上测试只能 hook 到 domain ，至于
location 不知道是不是被修了，尽管回复的是"Browsers allow hooking these properties. It doesn't
matter"
### Cookie
这里简单看了一下 Cookie 的实现，主要是这两部分代码：
[Document::cookie](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/document.cc;l=5798)
    String Document::cookie(ExceptionState& exception_state) const {
      if (GetSettings() && !GetSettings()->GetCookieEnabled())
        return String();
      CountUse(WebFeature::kCookieGet);
      if (!GetSecurityOrigin()->CanAccessCookies()) {
        if (IsSandboxed(mojom::blink::WebSandboxFlags::kOrigin))
          exception_state.ThrowSecurityError(
              "The document is sandboxed and lacks the 'allow-same-origin' flag.");
        else if (Url().ProtocolIs("data"))
          exception_state.ThrowSecurityError(
              "Cookies are disabled inside 'data:' URLs.");
        else
          exception_state.ThrowSecurityError("Access is denied for this document.");
        return String();
      } else if (GetSecurityOrigin()->IsLocal()) {
        CountUse(WebFeature::kFileAccessedCookies);
      }
      if (!cookie_jar_)
        return String();
      return cookie_jar_->Cookies();
    }
[CookieJar::Cookies()](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/loader/cookie_jar.cc;drc=76ccbe80ceaa4529956a6a3d9d8cc9e9a44b1904;l=27?originalUrl=https:%2F%2Fcs.chromium.org%2F)
    String CookieJar::Cookies() {
      KURL cookie_url = document_->CookieURL();
      if (cookie_url.IsEmpty())
        return String();
      RequestRestrictedCookieManagerIfNeeded();
      String value;
      backend_->GetCookiesString(cookie_url, document_->SiteForCookies(),
                                 document_->TopFrameOrigin(), &value);
      return value;
    }
以及，虽然 cookie 不能被完全字符串化控制，但是可以被 Clobbered 的问题在2年前也有人报告过这个相关的问题 [document.cookie
DOM property can be clobbered using DOM node named
cookie](https://bugzilla.mozilla.org/show_bug.cgi?id=1420032)
只不过目前的主流浏览器都是"Safari, Chrome and Firefox all behave the same here"。
### Document Collection
涉及到 Collection 的 Document 部分：
[DocumentNameCollection::ElementMatches](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/html/document_name_collection.cc;l=24?originalUrl=https:%2F%2Fcs.chromium.org%2F)
    bool DocumentNameCollection::ElementMatches(const HTMLElement& element) const {
      // Match images, forms, embeds, objects and iframes by name,
      // object by id, and images by id but only if they have
      // a name attribute (this very strange rule matches IE)
      auto* html_embed_element = DynamicTo(&element);
      if (IsA(element) || IsA(element) ||
          (html_embed_element && html_embed_element->IsExposed()))
        return element.GetNameAttribute() == name_;
      auto* html_image_element = DynamicTo(&element);
      if (html_image_element && html_image_element->IsExposed())
        return element.GetNameAttribute() == name_ ||
               element.GetIdAttribute() == name_;
      if (IsA(element)) {
        const AtomicString& name_value = element.GetNameAttribute();
        return name_value == name_ ||
               (element.GetIdAttribute() == name_ && !name_value.IsEmpty());
      }
      return false;
    }
### Window Collection
涉及到 Collection 的 Window 部分：
[WindowNameCollection::ElementMatches](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/html/window_name_collection.cc;l=22?originalUrl=https:%2F%2Fcs.chromium.org%2F)
    bool WindowNameCollection::ElementMatches(const Element& element) const {
      // Match only images, forms, embeds and objects by name,
      // but anything by id
      if (IsA(element) || IsA(element) ||
          IsA(element) || IsA(element)) {
        if (element.GetNameAttribute() == name_)
          return true;
      }
      return element.GetIdAttribute() == name_;
    }
## Bouns
### Tip 1 Global Scope
由于 Dom Clobbering 利用方式之一就是 hook 全局作用域下的变量，又由于 Javascript
是一门十分神奇的语言，所以我们需要注意如下几点
#### 显式声明
#### 隐式声明
不带有 **声明关键字** 的变量，Javascript 会自动挂载到全局作用域上。
#### let & var
ES6 中新增了`let`命令，用来声明变量。它的用法类似于`var`，但是所声明的变量，只在`let`命令所在的代码块内有效。详细可以参考 [let
基本用法](https://es6.ruanyifeng.com/#docs/let#基本用法)
    {
      let a = 10;
      var b = 1;
    }
    a // ReferenceError: a is not defined.
    b // 1
上面代码在代码块之中，分别用`let`和`var`声明了两个变量。然后在代码块之外调用这两个变量，结果`let`声明的变量报错，`var`声明的变量返回了正确的值。这表明，`let`声明的变量只在它所在的代码块有效。
而且有些很奇妙的操作，比如：
    let a = b = 6;
    window.a;   //undefined
    window.b;   //6
### Tip 2 Overwrite function
虽然可以 Clobber 函数，但是目前我没找到什么方法让他执行我们 Clobber
的结果，或者说目前貌似也没有办法通过标签来定义一个函数，所以只能是引起一个报错，
虽然只能引起报错，但是在一定场景下我们可以利用这个来绕过一些判断，例如：
第一个 JS 代码块虽然引起了报错，但是不会引起 JS 完全停止执行，JS 会跳过这个报错的代码块，执行下一个代码块。
### Tip 3 Prototype Pollution
原型链污染可以吗？
我目前尝试的方法还没成功，如果师傅尝试成功了一定要跟我分享！
## Defence
  1. 最简单的是判断每个变量预期的类型以避免非预期类型的篡改，例如，可以检查 Dom 节点的 attribute 属性是否实际上是 NamedNodeMap 的实例，这样可以确保该属性是一个 attributes 属性，而不是攻击者插入的 HTMLElement。
  2. 毕竟这种攻击主要出现在全局变量这一块，所以代码规范十分重要！
  3. 使用经过测试的库，例如 DOMPurify 。
## References
[DOM FLOW UNTANGLING THE DOM FOR EASY
BUGS](https://www.blackhat.com/docs/us-15/materials/us-15-Nafeez-Dom-Flow-Untangling-The-DOM-For-More-Easy-Juicy-Bugs.pdf)
[DOM Clobbering Attack](http://d1iv3.me/2018/04/11/DOM-Clobbering-Attack/)
[DOM Clobbering strikes back](https://portswigger.net/research/dom-clobbering-strikes-back)
[DOM Clobbering](http://www.thespanner.co.uk/2013/05/16/dom-clobbering/)
[Clobbering the clobbered — Advanced DOM
Clobbering](https://medium.com/@terjanq/dom-clobbering-techniques-8443547ebe94)
[XSS in GMail’s AMP4Email via DOM
Clobbering](https://research.securitum.com/xss-in-amp4email-dom-clobbering/)
[DOM Clobbering Attack学习记录.md](https://wonderkun.cc/2020/02/15/DOM Clobbering
Attack学习记录)
[Im DOM hört Dich keiner schreien](https://cure53.de/dom)
[Dec 20: Sanitising HTML – the DOM clobbering
issue](https://fastmail.blog/2015/12/20/sanitising-html-the-dom-clobbering-issue/)
[谈谈 JavaScript 的作用域](https://juejin.im/post/5abb99e9f265da2392366824)