### Security Concerns with Embedded User-Agents

The primary security concern with using embedded user-agents, such as WebViews, is that the entire user-agent can be controlled by the host application. This means that all data involved in OAuth steps can be manipulated by the host app. As illustrated in Figure 6(b), data from step 1 to step 5, including client ID, redirect URI, user credentials, client name and icon, authorization scope, and access token, can all be manipulated. These data points are highly sensitive, and any leakage or modification can lead to severe security issues. Despite being well-studied and documented, our findings indicate that insecure OAuth implementations using WebViews remain prevalent.

### Malicious XPM Behaviors

**Finding 8: First Confirmation of Malicious XPM Behaviors**

Our study confirms for the first time the presence of Web resource manipulation behaviors with clearly malicious intent. As shown in Table 7, we identified several apps with malicious XPM behaviors. To uncover more such behaviors, we analyzed 1,414 apps that exhibit XPM behaviors. We developed scripts to prioritize XPM behaviors that manipulate top Web services like Facebook and Google, or URLs containing sensitive keywords such as "oauth," "token," and "password." From this, we selected 200 apps for manual analysis, confirming 22 malicious XPM behaviors in 21 distinct apps (listed in Appendix A). Based on their malicious aims, we classified these apps into three categories:
- **A1: Impersonating Relying Party in OAuth (2 apps)**
- **A2: Stealing User Credentials (6 apps)**
- **A3: Stealing Cookies (14 apps)**

One app, InstaView, exhibited both A1 and A2 behaviors. We reported these apps to Google Play, and most have been removed.

#### A1: Impersonating Relying Party in OAuth

Apps in this category impersonate another relying party in OAuth by providing the victim's client ID in step 1 (Figure 6(b)) and intercepting the access token in step 5. For example, InstaView, a visitor tracking app with 1,000,000-5,000,000 installations, asks users to grant permissions via OAuth in a WebView. However, it uses the client ID of Tinder. After user authorization, it intercepts the access token for Tinder using the `shouldOverrideUrlLoading` API and continues to impersonate Tinder to access user data from Instagram. By using another app's client ID and access token, InstaView bypasses registration auditing and resource usage monitoring from Instagram. Despite this, the app has received over 27,000 five-star reviews. Additionally, InstaView can modify the name and icon in step 3 to deceive users.

#### A2: Stealing User Credentials

Apps in this category inject JavaScript code into sensitive Web pages, such as login pages and OAuth authorization pages, to steal user credentials. For instance, Adkingkong, an app for buying advertisements with 500,000 to 1,000,000 installations, asks users to log in with their Google accounts in a WebView. When users input their emails and passwords, it uses the `loadUrlJs` API to inject JavaScript code and steal user credentials. The InstaView app also steals user credentials in step 2 using similar methods.

#### A3: Stealing and Abusing Cookies

Several apps use XPM to steal and abuse cookies. For example, Chatous, an app for random chatting with 10,000,000 to 50,000,000 installations, incorporates the Facebook OAuth SDK for user sign-in. If the official Facebook app is not installed, the SDK uses a WebView for OAuth. After user login, Facebook cookies are saved in the WebView's local storage. Chatous then retrieves these cookies using the `CookieManager.getCookie` API and invokes Facebook APIs to get the user's friend list and send invitation messages. Without these cookies, these APIs would be inaccessible to third-party apps. Other apps from the same developer, such as Melon, Kiwi, and Plaza, exhibit similar behaviors.

### Cross-Platform Analysis

**Finding 9: Malicious XPM Behaviors on Both Android and iOS**

For the 21 apps with malicious XPM behaviors, we searched for their iOS counterparts and found 8 apps with iOS versions. Network traffic analysis confirmed that the Chatous iOS app and three other apps from the same developers still exhibit the same malicious XPM behaviors (stealing and abusing cookies).

**Finding 10: OAuth as the Primary Target**

In our results, 18 out of 21 apps with malicious XPM behaviors targeted OAuth, indicating that OAuth is the most frequently attacked Web service.

**Finding 11: Large Number of Affected Users**

The 21 apps with malicious XPM behaviors have a total installation count ranging from 29,885,000 to 131,220,000, affecting a significant number of users.

### Implications for Mitigation

#### Risk Awareness Among Service Providers

We studied five popular Web service providers (Facebook, Twitter, Google, Weibo, and QQ) to determine if they prohibit users from accessing login and OAuth pages in WebViews. The results, shown in Table 8, indicate that all providers support user login and OAuth in WebViews, except Google, which blocks OAuth in embedded WebViews. However, our further study revealed that Google only uses the "USER-AGENT" header to identify WebViews, which can be easily manipulated by host apps. For example, in Android, apps can use the `setUserAgentString` API to change the "USER-AGENT" header to any value, such as "Google Chrome." We successfully loaded the Google OAuth page in a controlled WebView, leading to the following conclusion:

**Finding 12: Most Web Service Providers Are Unaware of Risks in Web Resource Manipulation**

Most Web service providers are unaware of the risks associated with Web resource manipulation and cannot effectively prevent users from accessing sensitive pages in WebViews.

#### Evaluating Defensive Techniques

To secure Web service integration, several techniques have been proposed. Based on our measurement results, we reevaluated these solutions and concluded the following:

**Finding 13: Complete Isolation of WebView Is Not Compatible with Most Apps**

Complete isolation, a common method to protect host programs from untrusted code, is achieved by running the WebView in a separate process. While this improves security, it is difficult to apply to existing apps because many XPM behaviors are necessary to improve usability for mobile users.

**Finding 14: Fine-Grained Access Control Is Essential**

Fine-grained access control is crucial for regulating Web resource manipulation APIs. Systems like WIREFRAME provide origin-based access control, but they treat the entire app as a single origin. Our findings show that more than 60% of XPM behaviors originate from libraries, making fine-grained access control essential to protect Web resources from abuse.

### Discussion

The cross-principal manipulation problem in mobile apps is similar to the challenges faced by Web browser extensions, as both can manipulate Web resources. The key difference is that mobile apps may manipulate content from their own servers or others, while browser extensions typically operate on external web content. Our work addresses this challenge through static analysis, code similarity, and search engines.

### Limitations and Future Work

Our static analyzer, XPMChecker, inherits limitations from existing tools and may not prevent determined attackers from evading analysis. Future work will focus on adopting more sophisticated techniques to handle evasion and automating the classification of XPM behaviors with heuristic rules and learning techniques.

### Related Work

Prior research has discussed the interplay between mobile apps, embedded browsers, and Web content, focusing on both Web-to-app and app-to-Web security. Our work is the first to empirically study Web resource manipulation in large-scale apps and confirm the threat of XPM behaviors in both Android and iOS apps.

### Conclusion

This paper presents the first empirical study on Web resource manipulation in large-scale apps, defining the threats as XPM problems. We designed XPMChecker to automatically recognize XPM behaviors and conducted a study of 80,694 top Google Play apps. Our findings highlight the prevalence and severity of XPM behaviors and provide new insights for future defense design. To facilitate further research, we released the dataset at [https://xhzhang.github.io/XPMChecker/](https://xhzhang.github.io/XPMChecker/).

### Acknowledgements

We thank the anonymous reviewers for their valuable feedback. This work was supported by the National Natural Science Foundation of China, the National Program on Key Basic Research, and other grants.