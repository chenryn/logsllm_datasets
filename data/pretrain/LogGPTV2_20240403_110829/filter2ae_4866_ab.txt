    };
2.动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse
    var body = document.getElementsByTagName('body')[0];
    var script = document.gerElement('script');
    script.src = 'http://test.com/json?callback=handleResponse';
    body.appendChild(script);
3.通过 script.src 请求   
4.后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse({"name": "twosmi1e"}) 给浏览器  
5.浏览器在接收到 handleResponse({"name": "twosmi1e"}) 之后立即执行 ，也就是执行 handleResponse
方法，获得后端返回的数据，这样就完成一次跨域请求了。
#### CORS
CORS(Cross-Origin Resource Sharing,
跨源资源共享)是W3C出的一个标准，其思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。
实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。  
大致流程：
  1. 请求方脚本从用户浏览器发送跨域请求。浏览器会自动在每个跨域请求中添加Origin头，用于声明请求方的源；
  2. 资源服务器根据请求中Origin头返回访问控制策略(Access-Control-Allow-Origin响应头)，并在其中声明允许读取响应内容的源；
  3. 浏览器检查资源服务器在Access-Control-Allow-Origin头中声明的源，是否与请求方的源相符，如果相符合，则允许请求方脚本读取响应内容，否则不允许；
##### 请求分类
浏览器将CORS请求分成两类： **简单请求（simple request）** 和 **非简单请求（not-so-simple request）**
  * 简单请求满足以下条件：
  * 使用下列方法之一：GET、HEAD、POST
  * HTTP的头信息不超出以下几种字段:Accept、Accept-Language、Content-Language、Content-Type（其值仅限于：application/x-www-form-urlencoded、multipart/form-data、text/plain）
  * 非简单请求：不满足简单请求外的请求。  
不满足简单请求条件的请求则要先进行预检请求，即使用OPTIONS方法发起一个预检请求到服务器，用于浏览器询问服务器当前网页所在的域名是否在服务器允许访问的白名单中，以及允许使用哪些HTTP方法和字段等。只有得到服务器肯定的相应，浏览器才会发送正式的XHR请求，否则报错。
##### HTTP头字段
  * Access-Control-Allow-Origin: 允许跨域访问的域，可以是一个域的列表，也可以是通配符"*"。  
注意Origin规则只对域名有效，并不会对子目录有效。不同子域名需要分开设置。
  * Access-Control-Allow-Credentials: 是否允许请求带有验证信息，这部分将会在下面详细解释
  * Access-Control-Expose-Headers: 允许脚本访问的返回头，请求成功后，脚本可以在XMLHttpRequest中访问这些头的信息(貌似webkit没有实现这个)
  * Access-Control-Max-Age: 缓存此次请求的秒数。在这个时间范围内，所有同类型的请求都将不再发送预检请求而是直接使用此次返回的头作为判断依据，非常有用，大幅优化请求次数
  * Access-Control-Allow-Methods: 允许使用的请求方法，以逗号隔开
  * Access-Control-Allow-Headers: 允许自定义的头部，以逗号隔开，大小写不敏感
## 相关的一些安全问题
### CORS漏洞
#### 漏洞原理
CORS跨域漏洞的本质是服务器配置不当，即Access-Control-Allow-Origin设置为*或是直接取自请求头Origin字段，Access-Control-Allow-Credentials设置为true。
#### 攻击过程
最近遇到的某站  
对Access-Control-Allow-Origin未做限制  
在本地做一个泛解析将
POC：
    CORS POC Exploit
    Extract SID
    Exploit
能获取到一些敏感信息甚至token。
#### 检测工具
#### CORS与CSRF的区别
CORS 机制的目的是为了解决脚本的跨域资源请求问题，不是为了防止 CSRF。
CSRF一般使用form表单提交请求，而浏览器是不会对form表单进行同源拦截的，因为这是无响应的请求，浏览器认为无响应请求是安全的。
脚本的跨域请求在同源策略的限制下，响应会被拦截，即阻止获取响应，但是请求还是发送到了后端服务器。
相同点：都需要第三方网站；都需要借助Ajax的异步加载过程；一般都需要用户登录目标站点。
不同点：一般CORS漏洞用于读取受害者的敏感信息，获取请求响应的内容；而CSRF则是诱使受害者点击提交表单来进行某些敏感操作，不用获取请求响应内容。
#### 小结
这种漏洞不痛不痒在国内日常被忽略，正则写好写严格就能很好防御，更多的一些利用方式参考
### JSONP劫持
JSONP劫持实际上也算是CSRF的一种。当某网站使用JSONP的方式来跨域传递一些敏感信息时，攻击者可以构造恶意的JSONP调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。
#### 一些案例
[苏宁易购多接口问题可泄露用户姓名、地址、订单商品（jsonp案例）](https://shuimugan.com/bug/view?bug_no=118712)  
[唯品会某处JSONP+CSRF泄露重要信息](https://shuimugan.com/bug/view?bug_no=122755)  
[新浪微博JSONP劫持之点我链接开始微博蠕虫+刷粉丝](https://shuimugan.com/bug/view?bug_no=171499)
#### 原理
JSON实际应用的时候会有两种传输数据的方式：
xmlhttp获取数据方式：  
`{"username":"twosmi1e","password":"test123"}`
当在前端获取数据的时候，由于数据获取方和数据提供方属于同一个域下面，所以可以使用
xmlhttp的方式来获取数据，然后再用xmlhttp获取到的数据传入自己的js逻辑如eval。
script获取数据方式：  
`userinfo={"username":"twosmi1e","password":"test123"}`
如果传输的数据在两个不同的域，由于在javascript里无法跨域获取数据，所以一般采取script标签的方式获取数据，传入一些callback来获取最终的数据，如果缺乏有效地控制(对referer或者token的检查)就有可能造成敏感信息被劫持。
``
简单POC：
    ＜script＞ 
    function jsonph(json){ 
    alert(JSON.stringify(json)) 
      } 
    ＜/script＞  
    ＜script src="https://target.com?callback=jsonph"＞＜/script＞
### SOME
SOME（Same Origin Method Execution），同源方式执行，不同于 XSS 盗取用户 cookie 为目的，直接劫持 cookie
经行操作，和 CSRF 攻击很类似，不同的是 CSRF 是构造一个请求，而 SOME 则希望脚本代码被执行。  
靶场：  
具体可以看：
## 总结
最近学习的这方面知识时做了些笔记，于是有了这篇文章，有什么错误请大佬们指正，前端这块还是挺有意思的。各种小的漏洞组合起来也有很多精彩的利用方式。希望以后也能挖出更多有意思的洞。
**一些比较精彩的漏洞挖掘案例** ：  
## 参考