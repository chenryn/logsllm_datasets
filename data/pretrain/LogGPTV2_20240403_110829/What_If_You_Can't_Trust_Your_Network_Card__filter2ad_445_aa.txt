title:What If You Can't Trust Your Network Card?
author:Lo&quot;ıc Duflot and
Yves-Alexis Perez and
Benjamin Morin
What if you can’t trust your network card?
Lo¨ıc Duﬂot, Yves-Alexis Perez, and Benjamin Morin
ANSSI
French Network and Information Security Agency
51 boulevard de la Tour Maubourg, 75007 Paris
PI:EMAIL
Abstract. In the last few years, many diﬀerent attacks against com-
puting platform targeting hardware or low level ﬁrmware have been
published. Such attacks are generally quite hard to detect and to de-
fend against as they target components that are out of the scope of the
operating system and may not have been taken into account in the secu-
rity policy enforced on the platform. In this paper, we study the case of
remote attacks against network adapters. In our case study, we assume
that the target adapter is running a ﬂawed ﬁrmware that an attacker may
subvert remotely by sending packets on the network to the adapter. We
study possible detection techniques and their eﬃciency. We show that,
depending on the architecture of the adapter and the interface provided
by the NIC to the host operating system, building an eﬃcient detection
framework is possible. We explain the choices we made when designing
such a framework that we called NAVIS and give details on our proof of
concept implementation.
Keywords: ﬁrmware, NIC, network adapter, runtime veriﬁcation
1
Introduction
In [8], we demonstrated how it is possible for an attacker to take full control
of a computer by exploiting a vulnerability in the network adapter1. This proof
of concept shows how it is possible for an attacker to take full control of the
adapter and to add a backdoor in the OS kernel using DMA accesses. The vul-
nerability was unconditionally exploitable when the ASF function was enabled
on the network card to any attacker that would be able to send UDP packets to
the victim.
While preventing the network card from tampering with the operating sys-
tem is possible using existing mechanisms, having a compromised network card
remains a real problem, not only because the network card is a critical compo-
nent from the security perspective, but also because a compromised device can
be used to compromise surrounding peripherals on the computer.
Possible countermeasures were considered in [8], but none of them seemed
really convincing. The best way to prevent a network card from being compro-
mised would probably consist in formally verifying that the code running in the
1 See http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0104.
ﬁrmware is correct. Considering that network adapters’ ﬁrmware code is increas-
ingly complex and generally proprietary, the prevention problem is brought down
to a detection problem. In this paper2, we propose a pragmatic approach to de-
tect network card corruptions, where the monitor is located inside the operating
system. As much as we know, the kind of attacks we are trying to detect has
not been the subject of many papers in the intrusion detection community. Still,
these attacks represent a real threat considering the privilege level an attacker
might gain in successfully exploiting the underlying vulnerabilities. Moreover,
we believe that studying a detection approach (as opposed to a prevention one)
is relevant, as the vulnerabilities reside in a component which is not completely
under user control.
Our contribution is twofold. First, we raise the community’s awareness of the
threats associated with widespread devices by illustrating the eﬀectiveness of an
attack against a network device. Second, we present a solution to this problem
in the form of an anomaly detection system called NAVIS (Network Adapter
Veriﬁcation and Integrity checking Solution). This solution is based on several
detection paradigms and aims at instantly blocking attacks against ﬁrmware em-
bedded on the target network device. Our goal is to block attacks corresponding
to a modiﬁcation of the control ﬂow of the embedded device, while maintaining
good performance and virtually avoid false positives. As an illustration of the
eﬃciency of the NAVIS framework, we focus on a particular network adapter
and developed a proof of concept implementation of our detection system.
The paper is organised as follows. In section 2, we present existing mech-
anisms to assess ﬁrmware integrity. Section 3 summarizes our previous attack
on a network card and its implications on the security of a system. Then, we
present the assumptions for our work, on which we build our ﬁrmware corruption
detection system. Our prototype implementation of the monitor is described in
section 5. Section 6 illustrates the eﬀectiveness of our approach and presents
experimental results. Before concluding and evoking future work, we discuss the
limitations of our approach.
2 Problem Statement and Related Work
2.1 Attacks against ﬁrmware
In the last few years, several researchers have examined the security of ﬁrmware
and embedded software in various devices, such as basebands [27], network
cards [25,7], keyboard controllers [6] or chipsets [24].
These attacks might enable an intruder to take full control of the component
and use it as a stepping stone to run other attacks against the OS (through DMA
attacks) or other peripherals. Even without bouncing on the component, the
attack itself might be interesting to eavesdrop data (keylogger on the keyboard
controller) or perform man in the middle stealthily (on the network card).
2 Our results have been presented in the CanSecWest 2011 conference [9].
2.2 Countermeasures
Defending a system against such attacks is diﬃcult as ﬁrmware are running out
of the scope of the operating system and potentially have a wide access on other
systems resources (like the PCI bus) and there is not much control over what
they actually do.
Patching is the most obvious countermeasure. However, one can only patch
known vulnerabilities, and patching ﬁrmware is even harder than patching appli-
cations on an operating system. Moreover, adapters often start running resident
ﬁrmware in ROM before dynamically loading a newer ﬁrmware. This resident
ﬁrmware cannot be patched, so there might be a window of opportunity before
a new, ﬁxed ﬁrmware can be safely loaded.
As we will see later, IOMMUs can help protect the system, but it is not 100%
eﬃcient as it might not protect other peripherals, as shown by Sang et al. [21].
Besides, IOMMU does not protect the aﬀected subsystem, whose corruption can
be critical, especially in the case of a network card (as previously mentioned, it
may lead to e.g., passive eavesdropping).
Many vulnerability mitigation techniques have been proposed in the litera-
ture for defending against arbitrary code execution attacks ; these include ad-
dress space layout randomization (ASLR) [22], canaries [13], W⊕X principle
(a.k.a NX bit), data tainting. However, some of them can independently be
circumvented by attackers. W⊕X techniques for can instance be circumvented
using Return oriented Programming (ROP) and canaries will fail to be eﬃcient
against ROP without returns [5], [23]. But most importantly, these defense tech-
niques are impractical in the case of ﬁrmware because these systems generally
lack the required basic features since they run on hardware-constrained devices
with embedded CPUs like MIPS.
Our approach basically consists in verifying the integrity of the ﬁrmware of
a network card at runtime in order to detect malicious control ﬂow alterations.
Generally speaking, run-time integrity veriﬁcation consists in checking that an
untrusted target is running untampered. In the remainder of this section, we
focus on two kinds of protection approaches against arbitrary code execution
attacks, namely CFI (Control Flow Integrity) and Remote ﬁrmware attestation.
2.3 Control ﬂow integrity
Classical Control Flow Integrity (CFI) [1] security policy dictates that software
must follow a path of a Control-Flow Graph determined ahead of time. The
CFG can be determined by analysis (source code analysis, binary analysis or
execution proﬁling).
In its objectives, our intrusion detection approach is similar to CFI, applied
to a ﬁrmware, as proposed by Francillon et al. [11]. We control access to mem-
ory regions, which can be seen as a form of Software Memory Access Control
(SMAC), and we use a shadow call stack to achieve detection. Our monitor uses
an execution proﬁle of the network card, which can be seen as a very coarse and
primitive form of access control policy. The proﬁle is built ahead of time and is
derived from an inspection of multiple executions of the ﬁrmware. It is used by
the monitor at runtime to detect abnormal executions.
However, our approach diﬀers from CFI in its design. First, we do not rewrite
the code of the ﬁrmware. Second, we do not have a ﬁne grained model to dy-
namically ensure that the control ﬂow remains within an expected control ﬂow
(i.e., Control Flow Graph).
Similar to CFI, software guards [4,10] use program rewriting techniques in
order to insert code elements in a host program. These elements may perform
arbitrary tasks at runtime to protect the host program against illegitimate modi-
ﬁcations (e.g., self-checksumming). They have primarily been used to implement
software cracking protections, but software guards could be used to implement
temper-resistance features inside ﬁrmwares.
2.4 Remote ﬁrmware attestation
Runtime integrity veriﬁcation can be achieved with software-based remote at-
testation [15]. The veriﬁcation is performed by a trusted veriﬁer during the
execution of the target. In our case, the target would be the network adapter
and the veriﬁer would be the operating system.
Remote device attestation is based on a classical challenge-response protocol,
where the veriﬁer ﬁrst sends a random nonce n to the target. The target then
computes a checksum over its entire memory using n as seed3 and returns the
checksum to the veriﬁer. The veriﬁer then checks the correctness of the result.
The target data and unused code memory is erased with a predictable value.
Memory is read in a pseudo-random traversal to prevent checksum precomputa-
tion. All interrupts are disabled during the computation of the checksum. The
device is reset after the checksum is returned
The veriﬁer has a copy of the expected target’s memory content and compares
the checksum returned by the target with its own computation. The veriﬁer also
checks that the computation time is within ﬁxed bounds
As discussed by several authors [3,17,12], remote ﬁrmware attestation is diﬃ-
cult. First, a malware could keep a (compressed) copy of the legitimate ﬁrmware
code in memory and redirect memory reads to compute the correct checksum. For
this reason, checksum computation time must be predictable and near-optimal in
order to detect checksum computation overheads caused by memory redirects.
Also, the veriﬁer must know the exact hardware conﬁguration of the target.
Second, data memory must be reset into a predictable state before attestation
with pseudo-random values because otherwise, data memory is unpredictable
and may contain malware code.
In [15], remote ﬁrmware attestation has been implemented on Apple Alu-
minum Keyboard ﬁrmware, which is a rather simple device. Still, attestation
takes up to two seconds, during which the peripheral is unresponsive. This leads
us to the following question : is remote ﬁrmware attestation adequate for com-
plex devices such as network adapters? Indeed, the checksum function imposes
3 The nonce is used as a seed to prevent replay attacks.
severe constraints : it requires to reset the memory of the device and block all
interrupts, which can be time consuming for the device. Moreover, the assump-
tion that the device cannot communicate with a third-party machine during
computation may not hold (especially for a network adapter...). As a summary,
we doubt whether ﬁrmware attestation is currently suited for devices with harsh
time constraints.
2.5 Other IDS-oriented protections
Other approaches have been proposed to monitor the integrity of a system at a
low level. By using a dedicated hardware coprocessor to monitor the integrity of
the memory (Copilot [18]), by using an embedded microcontroller in the chipset
(DeepWatch [2]), or by embedding the veriﬁer in System Mode Management
(HyperGuard [20], HyperCheck [26]). However, these mechanisms are primarily
designed to protect the main operating system, and it is unclear whether they
can be used to monitor the integrity of peripherals. Moreover, some require a
trusted network card for remote attestation (e.g., [26]), which is “problematic”
in our case.
3 Exploiting network adapters ﬁrmware vulnerabilities
In [8], we demonstrated how it is possible for an attacker to subvert the execution
of a network adapter by exploiting a software fault in its ﬁrmware code and then
gain control over the operating system.
Network adapters have become complex objects. Indeed, they are not only
used to process network frames and transfer them between the wire and the
operating system anymore. They are also used as out-of-band low-cost manage-
ment devices. Their position in the hardware stack (i.e., between the operating
system and the network) has led manufacturers to develop new remote adminis-
tration functions like ASF (Alert Standard Format), IPMI (Intelligent Platform
Management Interface) or AMT (Active Management Technology), which allow
network adapters to communicate with a command and control node. More-
over, those administration functions are active even with a broken, powered-oﬀ
or even absent operating system, which means that they have a very privileged
position on the motherboard and have access to other components (like System
Management Bus (SMBus), PCI bus or ACPI).
The administration functions are not handled completely in hardware but
rather using a management CPU included on adapters, which runs an embedded
ﬁrmware and performs various tasks (network frames handling, authentication,
interactions with the platform, etc.). The CPU inspects network frames before
sending them to the OS and, when the adapter is the ﬁnal destination, process
the whole packets to perform the administrative tasks.
The vulnerability that was exploited in [8] lied in the authentication part
of the ASF ﬁrmware of some Broadcom NetXtreme adapters. When ASF was
enabled, the adapter was vulnerable to remote code execution before any au-
thentication was performed, meaning that an attacker could run any code on
the embedded CPU. On the card itself it was possible to examine each and ev-
ery packet (from and to the OS), to send packets to a remote machine for later
inspection or to reconﬁgure the card itself (a proof of concept changing MAC
addresses and LED conﬁguration was done). Attacking the platform was also
possible, for example by forcing an ACPI restart through the SMBus.
Using a DMA attack, it was possible to compromise the running kernel and
insert a backdoor in it. In our attack, the backdoor basically consisted in opening
a reverse shell when certain type of ICMP packet were processed by the host.
Other attacks are conceivable, which do not require to fully compromise
the host operating system (e.g., SSLstrip-like attacks, ARP and DNS caches
poisoning, packet drops, etc.), which is why it is not suﬃcient to protect the
host from a compromised network card. We need to be able to detect network
card corruption.
4 Detecting network adapter ﬁrmware corruption
This section describes the principle of the NAVIS network adapter integrity
checker. NAVIS is a kind of anomaly detection system which checks memory
accesses performed by the NIC processor against a model of expected behaviour
based on its memory layout proﬁle. Any memory access that is outside the NIC
memory proﬁle is interpreted as an attempt to divert the ﬁrmware control ﬂow.
Of course, proﬁling the memory layout of the network card is a prerequisite to
try to detect attacks. In the remainder of this section, we ﬁrst present our basic
assumptions for our detection system before describing the memory proﬁling
approach. The anomaly detection heuristics are described in the last part of this
section. The details of implementation, the practical obstacles, and how they are
circumvented are described in the next section.
4.1 Assumptions
Our objective is to detect an adapter ﬁrmware corruption at runtime from the
host operating system. Therefore, we need to assume that the operating system
is trusted (i.e., that it cannot be compromised by the controller), as it plays
the role of the veriﬁer. We also assume that the ﬁrmware is not compromised
in the initial state of the system, i.e., we have to check the controller ﬁrmware’s
integrity at system startup. We believe that these two assumptions are realistic
by using standard mechanisms that equip current computers.
Firmware load-time integrity can be enforced using a TPM (Trusted Plat-
form Module) [14]. A TPM is a secure cryptographic chip present on most x86
platforms, whose primary goal is to allow the operating system to verify the
integrity of the platform. Speciﬁc software (including embedded software) can