In particular, at least one byte of padding must always be
added. So examples of valid byte sequences for pad are:
“0x00”, “0x01||0x01” and “0x02||0x02||0x02”. The padding
may extend over multiple blocks, and receivers must support
the removal of such extended padding.
In the encryption step, the encoded record P is encrypted
using CBC-mode of the selected block cipher. TLS 1.1 and
1.2 and both versions of DTLS mandate an explicit IV,
which should be randomly generated. TLS 1.0 and SSL use
a chained IV; our attacks work for either option. Thus, the
ciphertext blocks are computed as:
Cj = EKe
(Pj ⊕ Cj−1)
where Pi are the blocks of P , C0 is the IV, and Ke is the
key for the block cipher E. For TLS (and SSL), the data
2In fact, in DTLS, this 8-byte ﬁeld is composed from a 16-bit epoch
number and a 48-bit sequence number. We will abuse terminology and
refer throughout to the 8-byte ﬁeld as being the sequence number for both
TLS and DTLS.
529
where C is the concatenation of the ciphertext blocks Ci
(including or excluding the IV depending on the particular
SSL or TLS version). Note that the sequence number is
not transmitted as part of the message. In DTLS, the data
transmitted over the wire is the same as in TLS, except that
SQN is included as part of the record header and the CBC-
mode IV is always explicit.
Simplistically, the decryption process reverses this se-
quence of steps: ﬁrst the ciphertext is decrypted block by
block to recover the plaintext blocks:
Pj = DKe
(Cj) ⊕ Cj−1,
where D denotes the decryption algorithm of the block
cipher. Then the padding is removed, and ﬁnally, the MAC
is checked, using the header information (and,
in TLS,
a version of the sequence number that is maintained at
the receiver). Finally, in DTLS, the sequence number is
optionally checked for replays.
In reality, much more sophisticated processing than this is
needed. The receiver should check that the ciphertext size is
a multiple of the block size and is large enough to contain
at least a zero-length record, a MAC tag of the required
size, and at least one byte of padding. After decryption, the
receiver should check that the format of the padding is one
of the possible patterns when removing it, otherwise attacks
are possible [17] (SSL allows a loose padding format, while
no speciﬁc padding checks are enforced during decryption in
TLS 1.0, so both are potentially vulnerable to the attacks in
[17]). Typically this is done by examining the last byte of the
plaintext, treating it as a padding length byte padlen, and
using this to dictate how many additional bytes of padding
should be removed. But care is needed here, since blindly
removing bytes could result in an underﬂow condition: there
needs to be sufﬁcient bytes in the plaintext to remove a total
of padlen+1 bytes and leave enough bytes for at least
zero-length record and a MAC tag.
If all this succeeds, then the MAC can be recomputed
and compared to the MAC tag in the plaintext. If the
padding fails to be correctly formatted, then implementations
should continue to perform a MAC check anyway, to avoid
providing a timing side-channel of the type exploited in [5].
But since the padding format is incorrect in this case, it’s
not immediately clear where the padding ends and the MAC
tag is located: in effect, the plaintext is now unparseable.
The solution recommended in TLS 1.1 and 1.2 (and by
extension, also in DTLS 1.0 and 1.2) is to assume zero-
length padding, interpret the last t bytes of the plaintext as
a MAC tag, interpret the remainder as the record R and run
MAC veriﬁcation on SQN||HDR||R. This has been adopted
in OpenSSL and elsewhere; GnuTLS on the other hand
removes padlen + 1 bytes from the end of the plaintext,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
takes the next t bytes as the MAC, interprets what is left as
R and then runs MAC veriﬁcation on SQN||HDR||R.
For TLS, any error arising during decryption should be
treated as fatal, meaning an encrypted error message is sent
to the sender and the session terminated with all keys and
other cryptographic material being disposed of. For DTLS,
such errors may be rated non-fatal and the session would
proceed to process the next ciphertext.
It should now be apparent that implementing the basic
decryption processing of TLS and DTLS requires some
care in implementation, with there being signiﬁcant room
for coding errors and inadequate parsing. Moreover, this
should all be implemented in such a way that the processing
time does not leak anything about the plaintext (including
the padding bytes). As we shall see, this has proved to
be a challenge for implementers: no implementation we
examined gets it completely correct, and the advice from
TLS 1.1 and 1.2 that one should extract and check the
MAC tag as if the padding were of zero-length leaves an
exploitable timing side-channel.
A. Details of HMAC
As mentioned above, TLS and DTLS exclusively use the
HMAC algorithm [13], with HMAC-MD5, HMAC-SHA-
1, and HMAC-SHA-256 being supported in TLS 1.2.3 To
compute the MAC tag T for a message M with key Ka,
HMAC applies the speciﬁed hash algorithm H twice, in an
iterated fashion:
T = H((Ka ⊕ opad)||H((Ka ⊕ ipad)||M )).
Here opad and ipad are speciﬁc 64-byte values, and the
key Ka is zero-padded to bring it up to 64 bytes before the
XOR operations are performed. For all the hash functions
H used in TLS, the application of H itself uses an encoding
step called Merkle-Damg˚ard strengthening. Here, an 8-byte
length ﬁeld followed by padding of a speciﬁed byte format
are appended to the message M to be hashed. The padding
is at least 1 byte in length and aligns the data on a 64-
byte boundary. The relevant hash functions also have an
iterated structure, processing messages in chunks of 64 bytes
(512 bits) using a compression function, with the output
of each compression step being chained into the next step.
The compression function in turn involves a complex round
structure, with many basic arithmetic operations on data
being involved in each round.
In combination, these features mean that HMAC imple-
mentations for MD5, SHA-1 and SHA-256 have a distinctive
timing proﬁle. Messages M of length up to 55 bytes can
be encoded into a single 64-byte block, meaning that the
ﬁrst, inner hash operation in HMAC is done in 2 com-
pression function evaluations, with 2 more being required
3TLS ciphersuites using HMAC with SHA-384 are speciﬁed in RFC 5289
(ECC cipher suites for SHA256/SHA384) and RFC 5487 (Pre-Shared Keys
SHA384/AES) but we do not consider this algorithm further here.
530
for the outer hash operation, for a total of 4 compression
function evaluations. Messages M containing from 56 up to
64 + 55 = 119 bytes can be encoded in two 64-byte blocks,
meaning that the inner hash is done in 3 compression func-
tion evaluations, with 2 more being required for the outer
operation, for a total of 5. In general, an extra compression
function evaluation is needed for each additional 64 bytes
of message data, with the exact number needed being given
64 (cid:5) + 4, where (cid:2) is the message length
by the formula (cid:4) (cid:2)−55
in bytes. A single compression function evaluation takes
typically around 500 to 1000 hardware cycles (depending on
the hash function and details of the implementation), giving
a time in the sub-μs range for modern processors.
Recall that in TLS the MAC is computed on plaintext
after removing padding. Hence, one might expect the total
running time for decryption processing to reveal some infor-
mation about the size of the depadded plaintext, perhaps up
to a resolution of 64 bytes in view of the above discussion.
Our distinguishing attack exploits this, but we will show that
much more is possible.
III. A DISTINGUISHING ATTACK
In this section we describe a simple distinguishing attack
against the MEE-TLS-CBC construction as used in TLS.
This is a warm-up to our plaintext recovery attacks, but
we note that even a distinguishing attack against such an
important protocol would usually be regarded as a signiﬁcant
weakness.
Recall that in a distinguishing attack, the attacker gets
to choose pairs of messages (M0, M1). One of these is
encrypted, Md, say, and the resulting ciphertext is given
to the attacker. The attacker’s task is to decide the value of
the bit d. To prevent the attacker from winning trivially, we
require that M0 and M1 have the same length.
We focus on the case where b = 16, i.e. the block cipher
is AES. A variant of the attack works for b = 8. Suppose the
MAC algorithm is HMAC-H where H is either MD5, SHA-
1 or SHA-256. Let M0 consist of 32 arbitrary bytes followed
by 256 copies of 0xFF. Let M1 consist of 287 arbitrary bytes
followed by 0x00. Note that both messages have 288 bytes,
and hence ﬁt exactly into 18 plaintext blocks. Our attacker
submits the pair (M0, M1) for encryption and receives a
MEE-TLS-CBC ciphertext HDR||C. Now C consists of a
CBC-mode encryption of an encoded version of Md, where
the encoding step adds a MAC tag T and some padding
pad. Because the end of Md aligns with a block boundary,
the additional bytes T||pad are encrypted in separate blocks
from Md. The attacker now forms a new ciphertext HDR||C(cid:2)
in which C(cid:2) keeps the same 16-byte IV as C (if explicit IVs
are being used), but truncates the non-IV part of C to 288
bytes. This has the effect of removing those blocks of C
that contain T||pad.
Now the attacker submits HDR||C(cid:2) for decryption. If
the record underlying C was M0, then the plaintext P (cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
corresponding to C(cid:2) appears to end with the valid 256-
byte padding pattern 0xFF . . . 0xFF. In this case, all of these
bytes are removed, and the remaining 32 bytes of plaintext
are interpreted as a short message and a MAC tag. For
example, if H is SHA-1, then we have a 12-byte message
and a 20-byte MAC tag. The MAC veriﬁcation fails (with
overwhelming probability), and an error message is returned
to the attacker. If the underlying record was M1, then P (cid:2)
appears to end with the valid 1-byte padding pattern 0x00.
In this case, a single byte is removed, and the remaining
287 bytes of plaintext are interpreted as a long message and
a MAC tag. Again, the MAC veriﬁcation fails and an error
message is returned to the attacker.
Notice that when d = 0, so C encrypts M0, a short
message consisting of 13 bytes of header plus at most 16
bytes of message (when the hash algorithm is MD5) is
passed through the MAC algorithm. To calculate the MAC
requires 4 evaluations of H’s compression function. On the
other hand, when d = 1, C encrypts M1, and a long message
consisting of 13 bytes of header plus at least 255 bytes of
message is passed through the MAC algorithm. Then to
calculate the MAC requires at least 8 evaluations of H’s
compression function, at least 4 more than for the d = 0
case. Hence, we expect the time it takes to produce the
error message on decryption failure to be somewhat larger
if d = 1 than when d = 0, on the order of a couple of μs
for a modern processor. This timing difference then allows,
in theory, a distinguishing attack on the MEE-TLS-CBC
construction used in TLS.
A. Practical Considerations
In describing the attack, we have ignored the time taken
to remove padding. This is different for the two messages
being processed, and the difference is opposite to that for
MAC checking in that padding removal for M0 takes longer
than for M1. Similarly, we have ignored any other timing
differences that might arise during other processing steps. In
practice, as we will see in Section V, these differences turn
out to be smaller than the MAC timing difference.
The attack exploits the requirement from the (D)TLS
RFCs that
implementations be able to properly decrypt
records having variable length padding, but does not require
implementations to actually send records containing such
padding. A variant attack is possible in case only minimum-
length padding is supported, but involves a smaller timing
signal.
In TLS, the error messages are sent over the network,
and so can easily be detected by the attacker. However,
these messages are subject to network jitter, and this may
be large enough to swamp the timing difference arising
from the 4 extra compression function evaluations. On the
other hand,
the timing signal may be quite large when
the cryptographic processing is performed in a constrained
environment, e.g. on an 8-bit or 16-bit processor, or even on
a smartphone. Furthermore, the jitter may be signiﬁcantly
reduced when the adversary runs as a separate process
on the machine performing TLS decryption. This may be
possible in virtualised environments, e.g. in a cloud scenario
as explored in [22]. The attack also destroys the TLS session,
since in TLS such errors are fatal. The attack can be iterated
across L sessions, with Md being encrypted in each session,
and statistical processing used to extract the timing signal.
In DTLS, there are no error messages, but the techniques
of [1] can be applied to solve this problem. There, the
authors send a packet containing a ciphertext C closely fol-
lowed by a DTLS message, with the latter always provoking
a response message. Any timing difference arising from the
decryption of C then shows up as a difference in the arrival
time of the response messages. The signal ampliﬁcation
techniques from [1] can also be used to boost the timing
difference – here, the idea is to send multiple packets all
containing C in quick succession, to create a cumulative
timing difference (since each time C is processed, it will be
processed in the same way).
In the attack as described, we have used 288 byte mes-
sages. This ensured that
there were sufﬁcient bytes left
after the removal of padding to leave room for a message
(possibly of zero length) and a MAC tag. This ensures
that C(cid:2) passes any sanity checks that might be applied
during decryption. However, these sanity checks might be
exploitable in variants of our basic attack. For example,
an implementation that ﬁnds it does not have enough bytes
left to contain a MAC after depadding may choose to skip
MAC veriﬁcation altogether, leading to an increased timing
difference.
Note that the attack would still work as described if the
truncated MACs specifed for TLS in [11] were used, since
the full HMAC-H computation is still performed but only
certain bytes of the computed tag are compared to bytes of
the plaintext.
We report on the successful implementation of this attack
in Section V.
IV. PLAINTEXT RECOVERY ATTACKS
A. General Approach
As we have seen in the previous section, the processing
time for a (D)TLS record (and therefore the appearance
time of error messages) will depend on the amount of
padding that the receiver interprets the encoded plaintext as
containing. However, by placing a target ciphertext block at
the end of the encrypted record, an attacker can arrange that
the plaintext block corresponding to this block is interpreted
as padding, and hence make the processing time depend on
plaintext bytes. But, it seems that large amounts of valid
padding are needed to create a signiﬁcant timing difference,
and this is difﬁcult to arrange in a plaintext recovery attack.
We show that
this barrier to plaintext recovery can be
overcome under certain circumstances.
531
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
Let C∗ be any ciphertext block whose corresponding
plaintext P ∗ the attacker wishes to recover. Let C(cid:2) denote
the ciphertext block preceding C∗. Note that C(cid:2) may be the
IV or the last block of the preceding ciphertext if C∗ is the
ﬁrst block of a ciphertext. We have:
P ∗ = DKe
(C∗) ⊕ C(cid:2).
For any block B of plaintext or ciphertext, we write
B = [B0B1 . . . Bb−1], where Bi denote the bytes of B.
In particular, we have P ∗ = [P ∗
1 . . . P ∗
0 P ∗
b−1].
As usual, we assume that the attacker is capable of eaves-
dropping on the (D)TLS-protected communications and of
injecting messages of his choice into the network. For TLS,
or DTLS with sequence number checking disabled, we do
not need the ability to prevent messages from reaching their
destination. Nor do we require a chosen-plaintext capability.
B. Full Plaintext Recovery
For simplicity of presentation, in what follows, we assume
the CBC-mode IVs are explicit (as in TLS 1.1, 1.2 and
DTLS 1.0, 1.2). We also assume that b = 16 (so our
block cipher is AES). It is easy to construct variants of
our attacks for implicit IVs and for b = 8. We begin by
considering only TLS, with details for DTLS to follow.
We also assume that the TLS implementation follows the
advice in the TLS 1.1 and 1.2 RFCs about checking the
MAC as if there was a zero-length pad when the padding is
incorrectly formatted. We will examine the security of other
implementation options in Section VI. Most importantly,
and for reasons that will become clear, we assume for the
moment that t = 20 (so that the MAC algorithm is HMAC-
SHA-1). We consider t = 16 and t = 32 (HMAC-MD5 and
HMAC-SHA-256) shortly.
Let Δ be a block of 16 bytes and consider the decryption
of a ciphertext Catt(Δ) of the form
Catt(Δ) = HDR||C0||C1||C2||C(cid:2) ⊕ Δ||C∗
in which there are 4 non-IV ciphertext blocks, the penulti-
mate block C(cid:2) ⊕ Δ is an XOR-masked version of C(cid:2) and
the last block is C∗. The corresponding 64-byte plaintext is
P = P1||P2||P3||P4 in which
P4 = DKe(C∗) ⊕ (C(cid:2) ⊕ Δ)
= P ∗ ⊕ Δ.
Notice that P4 is closely related to the unknown, target
plaintext block P ∗. We consider 3 distinct cases, which
between them cover all possibilities for what can happen
during decryption of Catt(Δ):
1) P4 ends with a 0x00 byte: in this case, a single byte of
padding is removed, the next 20 bytes are interpreted
as a MAC tag T , and the remaining 64 − 21 = 43
bytes of plaintext are taken as the record R. MAC
veriﬁcation is then performed on a 13 + 43 = 56-byte
message SQN||HDR||R.
532
2) P4 ends with a valid padding pattern of length at
least 2 bytes: in this case, at least 2 bytes of padding
are removed, and the next 20 bytes are interpreted as