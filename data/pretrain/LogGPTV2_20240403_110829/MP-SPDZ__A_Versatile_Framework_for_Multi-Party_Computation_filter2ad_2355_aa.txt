title:MP-SPDZ: A Versatile Framework for Multi-Party Computation
author:Marcel Keller
MP-SPDZ: A Versatile Framework for Multi-Party Computation
Marcel Keller
CSIRO’s Data61
Australia
PI:EMAIL
PI:EMAIL
ABSTRACT
Multi-Protocol SPDZ (MP-SPDZ) is a fork of SPDZ-2 (Keller et
al., CCS ’13), an implementation of the multi-party computation
(MPC) protocol called SPDZ (Damgård et al., Crypto ’12). MP-SPDZ
extends SPDZ-2 to 34 MPC protocol variants, all of which can
be used with the same high-level programming interface based on
Python. This considerably simplifies comparing the cost of different
protocols and security models.
The protocols cover all commonly used security models (hon-
est/dishonest majority and semi-honest/malicious corruption) as
well as computation of binary and arithmetic circuits (the latter
modulo primes and powers of two). The underlying primitives em-
ployed include secret sharing, oblivious transfer, homomorphic
encryption, and garbled circuits.
The breadth of implemented protocols coupled with an accessible
high-level interface makes it suitable to benchmark the cost of
computation in various security models for researchers both with
and without a background in secure computation
This paper aims to outline the variety of protocols implemented
and the design choices made in the development of MP-SPDZ as
well as the capabilities of the programming interface.
KEYWORDS
Multi-party computation; implementation
1 INTRODUCTION
Multi-party computation allows a set of parties to compute collabo-
ratively on their private inputs without revealing anything other
than the result. A range of applications have been suggested such as
truthful auctions [BDJ+06], avoiding satellite collisions [HLOI16],
computing the gender pay gap [LVB+16], or privacy-preserving ma-
chine learning [MZ17]. After the development of the basic theory
in the 1980s [CCD88, BGW88], the first implementation in software
was created by Pinkas et al. [PSSW09] in 2009. Since then, a number
of frameworks have been created for a range of security models
and computation domains. By security model we mean the assump-
tions on the behavior of the parties, in particular how many are
assumed to behave honestly and whether dishonest parties follow
the protocol or try to gain information or compromise the result by
deviating. On the other hand, the computation domain denotes a
mathematical structure that is used to represent secret information
in the computation as required by the underlying schemes. In appli-
cations, this domain usually takes the form of a ring, that is, a set
with the two operations akin to addition and multiplication. Often
said ring is simply defined by integer operations with modulus, but
there are other examples such as the Galois fields of characteristic
two (e.g., the one defining the arithmetic structure of AES).
Almost all openly available frameworks for multi-party compu-
tation are restricted to a particular security model and computation
domain, which makes it hard to assess the cost of one security
model compared to another because one has to an implement the
same computation several times. Similarly, it is hard to compare pro-
tocols in the same security model. MP-SPDZ1 aims to change this
by providing an implementation of 30 protocol variants with the
same virtual machine, and a compiler that compiles high-level code
into bytecode to be executed by said virtual machine. This allows
one to implement a computation only once before benchmarking it
in a variety of settings.
At the core of the approach of combining many protocols in
one framework lies the intuition that, despite the differences, all
commonly used protocols for secure computation can largely be
reduced to a few operations that are similar in all of them, and these
are input, output, locally computable linear operations, one much
more involved operation like AND or multiplication, and generating
correlated randomness such as random bits. It therefore seems
natural to build a general framework facilitating this blueprint in
order to reuse components and optimizations as much as possible.
MP-SPDZ does so while still allowing specific protocols to be added
if necessary.
MP-SPDZ is based on SPDZ-2 [KRSS18, KSS13], an implementa-
tion of the SPDZ protocol [DPSZ12, DKL+13]. The infrastructure of
SPDZ-2 has been used and extended in a line works [KS14, KOS15,
KOS16, Kel17, KY18, KPR18, DEF+19]. Araki et al. [ABF+18] have
undertaken steps to integrate protocols other than SPDZ in SPDZ-2.
However, their approach is marred by overly relying on library calls
for basic operations such as share additions, and thus it is relatively
inefficient. This can be seen by how well SPDZ fares in comparison
to simpler honest-majority protocols (Figures 6-8 by Araki et al.)
because the former is natively implemented in SPDZ-2. MP-SPDZ
is not based on the work by Araki et al. but directly forked from
SPDZ-2 instead.
Hastings et al. [HHNZ19] have assessed eleven multi-party com-
putation frameworks available in the first half of 2018. They esti-
mate that creating and running three simple example programs in
all of the frameworks together took them 750 person-hours. MP-
SPDZ aims to lower the entry barrier to secure computation by
providing standalone Linux binaries for every release and extensive
documentation for the high-level language.2 In addition, it uses
a continuous integration facility, and issues filed on GitHub are
usually attended within a few days.
1https://github.com/data61/mp-spdz
2https://mp-spdz.readthedocs.org
a = sint.Array(n)
b = sint.Array(n)
a.input_from(0)
b.input_from(1)
res = sint.dot_product(a, b)
print_ln('%s', res.reveal())
Figure 1: Inner product computation in MP-SPDZ.
Paper organization. After introducing similar frameworks (with
comparison benchmarks) and basic concepts, we will proceed layer
by layer, from the underlying protocols to the high-level library.
As an anchor throughout the paper, we will use the example of
computing an inner product of two vector supplied to by two differ-
ent parties. Hastings et al. have used this as one of their examples.
The code for MP-SPDZ is shown in Figure 1.
1.1 Comparison to Other Frameworks
In the following we will consider all frameworks described by Hast-
ings et al. and the ones subsequently added to their repository
containing example programs and build environments [HHNZ20]
at the time of writing. Where available we also indicate the ap-
proximate size of the inner product example. Table 1 highlights
how MP-SPDZ compares to other frameworks. SH stands for semi-
honest security. See Section 1.2 for details.
ABY. This framework only implements two-party computation
with semi-honest security [DSZ15]. Unlike MP-SPDZ it provides
conversion between secret-sharing computation and garbled cir-
cuits, however. The inner product example takes about 60 lines of
code without comments or empty lines.
ABY3. This framework only implements three-party computa-
tion with honest majority and semi-honest security [MR18]. The
inner product example takes about 40 lines of code without com-
ments or empty lines.
CBMC-GC. This is a compiler that compiles C code to a binary
circuit description [BHWK16] to be executed by ABY. Hastings et
al. were unable to make it work with their examples.
EMP-toolkit. This framework only implements garbled circuits
in various security models [WMK16]. If not using Yao’s garbled cir-
cuits with semi-honest security, loops are unrolled at compile time.
The inner product example takes about 60 lines of code without
comments or empty lines.
FRESCO. This framework [Ale20] only implements dishonest
majority computation, with malicious security for arithmetic cir-
cuits (SPDZ and SPDZ2k ) and with semi-honest security for binary
circuits [DNNR17]. The inner product example takes about 30 lines
of code without comments or empty lines.
Frigate. This is a compiler that compiles C-like code to a binary
circuit description [MGC+16]. Unlike with MP-SPDZ, loops are
always unrolled at compile-time. The inner product example takes
about 20 lines of code without comments or empty lines.
JIFF. This JavaScript library only implements honest-majority
computation with semi-honest security as a whole [Tea20]. Unlike
Marcel Keller
MP-SPDZ it allows changing the security model between offline
and online phase. The inner product example takes about 50 lines
of code without comments or empty lines.
MPyC. This Python framework [Sch20] only implements com-
putation with semi-honest security based on Shamir’s secret shar-
ing [Sha79]. The inner product example takes about 20 lines of code
without comments or empty lines.
Obliv-C. This framework compiles an extension of C to machine
code via standard C [ZE15]. It only supports Yao’s garbled circuits
with semi-honest security. The inner product example takes about
20 lines of code without comments or empty lines.
OblivVM. This framework compiles an extension of Java to Java
bytecode [LWN+15]. It only supports Yao’s garbled circuits with
semi-honest security. The inner product example takes about 20
lines of code without comments or empty lines.
PICCO. This framework compiles an extension of C to native
binaries via standard C [ZSB13]. It only implements semi-honest
computation with an honest majority based on Shamir’s secret
sharing. The inner product example takes about 10 lines of code
without comments or empty lines.
SCALE-MAMBA. This framework [COS19] is another fork of
SPDZ-2 [KSS13, KRSS18]. Despite the common roots, the two forks
have diverged considerably since 2018. SCALE-MAMBA only im-
plements arithmetic computation modulo a prime (not modulo a
power of two), garbled circuits according to Hazay et al. [HSS17],
and binary computation based on secret sharing [FKOS15, WRK17].
All computations are implement with malicious security only, and
dishonest majority computation modulo a prime is only imple-
mented using homomorphic encryption. On the other hand, SCALE-
MAMBA implements honest-majority computation for any access
structure possible in theory.
The frontend is similar to the one in MP-SPDZ but without later
additions such as the dynamic loop optimization (Section 6.3), the
repetitive code optimization (Section 6.4), and machine learning
functionality (Section 7.3). Furthermore, the authors have started to
move away from the Python compiler in favor of a new one based
on Rust.
The inner product example takes less than 10 lines of code with-
out comments or empty lines.
Sharemind MPC. This framework implements a frontend for a
variety of backends but its own backend only uses three-party
semi-honest computation with an honest majority [BLW08]. It also
allows the use of ABY and FRESCO as backend while the proprietary
backend is not freely available. The inner product example takes
less than 10 lines of code without comments or empty lines.
TinyGarble. This framework only implements Yao’s garbled cir-
cuits with semi-honest security [SHS+15]. Hastings et al. were
unable to make it work with their examples.
Wysteria. This framework implements a domain-specific lan-
guage with only binary computation in the semi-honest setting
with dishonest majority [RHH14]. Hastings et al. were unable to
run all their examples in this framework.
MP-SPDZ: A Versatile Framework for Multi-Party Computation
Table 1: Time in seconds to compute an inner product of two 100,000-element vectors of 64-bit integers.
ABY
ABY3
EMP-toolkit
MPyC
Obliv-C
ObliVM
PICCO
SCALE-MAMBA
MP-SPDZ
SH 2-party (OT)
1.8
⊥
⊥
⊥
⊥
⊥
⊥
⊥
0.9
SH replicated 3-party
⊥
0.02
⊥
⊥
⊥
⊥
⊥
⊥
0.03
Shamir Malicious Shamir
⊥
⊥
⊥
⊥
⊥
⊥
⊥
8.3
0.4
⊥
⊥
⊥
8.45
⊥
⊥
0.10
⊥
0.08
SPDZ (HighGear) Yao’s GC (32-bit)
⊥
⊥
10
⊥
29
700
⊥
⊥
9
⊥
⊥
⊥
⊥
⊥
⊥
⊥
314
67
1.2 Benchmarks
We have benchmarked MP-SPDZ against other frameworks listed
in the previous section.3 Table 1 shows how many seconds it takes
to compute an inner product of length 100,000 on one machine
with a 7-th generation i7 processor (baseline frequency 2.8 GHz).
We have opted for a local computation because not all frameworks
support execution on different hosts.
For benchmarking, we have replaced get_input_from() with
get_raw_input_from() in the MP-SPDZ code. This is because the
former leads to inputs being read using the istream functionality
of the C++ standard library, which considerably increases the time
in some benchmarks. The examples in other frameworks either use
faster functions like atoi() or the inputs are hard-coded.
Furthermore, the timings for computation modulo a prime (Shamir
and SPDZ) have been done using a 128-bit prime because that is a
common choice given that many algorithms require a (k + s)-bit
prime for k-bit computation and security parameters s. We have
reduced all statistical security parameters in SCALE-MAMBA to
40 for a fairer comparison. Similarly, the HighGear figure excludes
key generation because the two frameworks handle this differently.
The table shows that the more sophisticated approach using a
virtual machine does not degrade performance considerably with
arithmetic computation.
In addition, we have benchmarked frameworks using Yao’s gar-
bled circuits but with 32-bit integers instead of 64 because some
examples only support the former.
Note that ⊥ means that a particular framework does not im-
plement a particular protocol, except for the case of ABY and Yao
where there is no example code available.
We have identified a number of reasons for the frameworks
performing significantly worse. MPyC and ObliVM are not im-
plemented with C/C++. For SCALE-MAMBA, we have found that
it utilizes frequent allocation/free calls due to a regular usage of
variable-length integers, and it uses a high number of relatively
expensive function calls to MPIR for fixed-length arithmetic. Fur-
thermore, it also generates more preprocessing data than necessary.
Finally, Tables 2 and 3 show our figures for the framework in a
simulated WAN setting (100 Mbit/s and 100 ms RTT) as well as the
total communication. The latter was obtained using ip -s link lo
in Docker for all other frameworks.
3The code can be found at https://github.com/mkskeller/mpc-benchmarks.
Missing frameworks. We do not provide benchmarks for various
frameworks mentioned in Section 1.1 for the following reasons:
• No working inner product example: CBMC-GC, TinyGarble,
Wysteria
• No backend executing the actual computation: Frigate
• Inner product example incomplete (without preprocessing):
• Using JavaScript: JIFF
• Software not available: Sharemind MPC
FRESCO
2 PRELIMINARIES
In this section we explain various basic concepts in secure multi-
party computation.
Security models. A core property of multi-party computation
protocols is what assumptions are made about the parties, which
happens along two axes. The first question is how many parties