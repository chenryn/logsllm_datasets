### Path Explosion Plots

**Figure 7: Path Explosion Plots for Info 06 9-12**
- (a) In-in
- (b) In-out
- (c) Out-in
- (d) Out-out

**Optimal Path Duration (s)**
- 500
- 1000
- 1500
- 2000
- 2500
- 3000
- 3500

Results for other datasets are not shown due to space constraints, but they generally exhibit similar behavior.

### Summary of Key Results

In this section, we present two key findings:
1. **Analytical Model for Path Explosion:**
   - We used a homogeneous analytical model to demonstrate how path explosion occurs.
   - Path explosion is an exponential function of both elapsed time and the contact rate \(\lambda\) of nodes.
   - This addresses the first question regarding our empirical results: how and why does path explosion occur?

2. **Effect of Inhomogeneity in Contact Rates:**
   - By examining the contact rates of source and destination nodes, we can gain insights into why the optimal path duration and the time to explosion vary.
   - These quantities can be related to the relative magnitudes of the two contact rates.

### Implications for Forwarding

In the previous sections, we developed an understanding of the types of paths available for use by routing algorithms in our setting. This lays the groundwork for understanding the performance of various forwarding algorithms in our context. In this section, we study the performance of a wide range of forwarding algorithms and relate their performance to the results from previous sections.

#### 6.1 Experiments

We conducted forwarding experiments using a trace-driven simulator. The input to our simulator was the contact traces described in Section 3. Each simulation ran for a simulated time of 3 hours, but only the first two hours of results were used to avoid end effects.

For each trace and forwarding algorithm, we generated a set of messages \((\sigma, \delta, t_1)\) uniformly at random. Messages were generated according to a Poisson process with a rate of one message per 4 seconds. As discussed in Section 4.1, we modeled nodes as having infinite buffers, and nodes carried all received messages until the end of the simulation. All results are averaged over 10 simulation runs. Our metrics are success rate \(S\) and average delay \(D\) as defined in Section 4.1.

Our goal in this section is not to determine which forwarding algorithm is "best" but to compare the performance of a wide range of algorithms and gain insight into what properties of a forwarding algorithm yield good performance. Therefore, we chose a set of algorithms designed to span a range of design choices:

- **Destination-aware vs. Destination-unaware:**
  - Destination-aware algorithms consider the choice of \(\delta\) in forwarding, while destination-unaware algorithms do not.

- **Single-hop vs. Multi-hop:**
  - Single-hop algorithms use information about the most recent contact or next expected contact; multi-hop algorithms take into account sequences of past or expected future contacts.

- **Complete history vs. Recent history vs. Future knowledge:**
  - Complete history algorithms take into account the entire past history of other nodes when forwarding.
  - Recent history algorithms consider only a limited amount of history (e.g., only the most recent encounter with the destination).
  - Future knowledge algorithms use oracles that provide knowledge of future behavior of the nodes. While not practical, these algorithms provide useful comparison cases.

#### Forwarding Algorithms

- **Epidemic Forwarding (Flooding):**
  - A node forwards all packets it has to any node it meets, unless that node already has a copy of the packet [19].
  - Epidemic Forwarding achieves the best possible performance, providing upper bounds on success rate and average delay.

- **FRESH:**
  - Node \(x_i\) forwards a message to \(x_j\) upon contact if \(x_j\) has contacted \(\delta\) more recently than \(x_i\) [6].

- **Greedy:**
  - Node \(x_i\) forwards a message to \(x_j\) upon contact if \(x_j\) has contacted \(\delta\) more times since the start of the simulation than \(x_i\). Greedy uses the entire history of contacts, unlike FRESH, which uses only the most recent contact history.

- **Greedy Total:**
  - Node \(x_i\) forwards a message to \(x_j\) upon contact if \(x_j\) has more total contacts (with all other nodes) than \(x_i\). Greedy Total is destination-unaware, while FRESH and Greedy are destination-aware. Greedy Total uses both past and future knowledge of internode contacts.

- **Greedy Online:**
  - Node \(x_i\) forwards a message to \(x_j\) upon contact if \(x_j\) has more contacts with \(\delta\) since the start of the simulation than \(x_i\). Greedy Online is destination-aware but uses only past knowledge, unlike Greedy.

- **Dynamic Programming:**
  - Node \(x_i\) calculates the average delay between all pairs of nodes and finds the optimal path. This is based on the Minimum Expected Delay algorithm [10]. Dynamic Programming uses both past and future knowledge of internode contacts.

#### 6.2 Observations

##### 6.2.1 Similarity of Performance

The most striking aspect of our results is the similarity in performance across the various forwarding algorithms. This is illustrated in Figure 8, where we plot the average delay versus success rate for each dataset and forwarding algorithm. Almost all forwarding algorithms show virtually identical performance, with the exception of epidemic routing (shown using square symbols in the plots), which shows somewhat better performance because it always finds the optimal path if one exists.

While Figure 8 shows the similarity in average delay, Figure 9 provides a more detailed view of the delay distribution. This figure shows that the performance of different algorithms is very similar across the entire range of delays.

**Figure 8: Average Delay (sec) vs Success Rate**
- (a) Infocom 06 9-12
- (b) Infocom 06 3-6
- (c) Conext 9-12
- (d) Conext 3-6

**Figure 9: Delay Distribution**
- (a) [Insert relevant data]
- (b) [Insert relevant data]

This detailed analysis helps us understand the nuances of the performance of different forwarding algorithms in our setting.