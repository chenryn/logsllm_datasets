         sub      esp, 8 
         fstp     QWORD PTR [esp] 
         push     OFFSET $SG4238 
         call     _printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 22 章  共用体（union）类型 
347 
         add      esp, 12 
         dec      esi 
         jne      SHORT $LL3@main 
         xor      eax, eax 
         pop      esi 
         ret      0 
_main   ENDP 
在使用 C++编译器编译之后，可执行程序中的函数名称彻底走样。这是编译器对函数的命名规范所决
定的。本书 51.1.1 节将详细介绍这种规范。 
如果使用 MSVC 2012 编译器进行编译，那么可执行程序则会使用面向 FPU 的 SIMD 指令。本书 27.5
节会对 SMID 指令进行单独介绍。 
22.1.2 MIPS 
指令清单 22.2  Optimizing GCC 4.4.5 
float_rand: 
var_10  
= -0x10 
var_4   
= -4 
lui   
$gp, (__gnu_local_gp >> 16) 
addiu  
$sp, -0x20 
la   
$gp, (__gnu_local_gp & 0xFFFF) 
sw   
$ra, 0x20+var_4($sp) 
sw   
$gp, 0x20+var_10($sp) 
; call my_rand(): 
jal   
my_rand 
or   
$at, $zero ; branch delay slot, NOP 
; $v0=32-bit pseudorandom value 
li   
$v1, 0x7FFFFF 
; $v1=0x7FFFFF 
and   
$v1, $v0, $v1 
; $v1=pseudorandom value & 0x7FFFFF 
lui   
$a0, 0x3F80 
; $a0=0x3F800000 
or   
$v1, $a0 
; $v1=pseudorandom value & 0x7FFFFF | 0x3F800000 
; matter of the following instruction is still hard to get: 
lui   
$v0, ($LC0 >> 16) 
; load 1.0 into $f0: 
lwc1   
$f0, $LC0 
; move value from $v1 to coprocessor 1 (into register $f2) 
; it behaves like bitwise copy, no conversion done: 
mtc1   
$v1, $f2 
lw   
$ra, 0x20+var_4($sp) 
; subtract 1.0. leave result in $f0: 
sub.s  
$f0, $f2, $f0 
jr   
$ra 
addiu  
$sp, 0x20 ; branch delay slot 
main: 
var_18  
= -0x18 
var_10  
= -0x10 
var_C   
= -0xC 
var_8   
= -8 
var_4   
= -4 
lui   
$gp, (__gnu_local_gp >> 16) 
addiu  
$sp, -0x28 
la   
$gp, (__gnu_local_gp & 0xFFFF) 
sw   
$ra, 0x28+var_4($sp) 
sw   
$s2, 0x28+var_8($sp) 
sw   
$s1, 0x28+var_C($sp) 
sw   
$s0, 0x28+var_10($sp) 
sw   
$gp, 0x28+var_18($sp) 
lw   
$t9, (time & 0xFFFF)($gp) 
or   
$at, $zero ; load delay slot, NOP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
348 
逆向工程权威指南（上册） 
jalr  
$t9 
move   
$a0, $zero ; branch delay slot 
lui   
$s2, ($LC1 >> 16) # "%f\n" 
move   
$a0, $v0 
la   
$s2, ($LC1 & 0xFFFF) # "%f\n" 
move   
$s0, $zero 
jal   
my_srand 
li   
$s1, 0x64 # 'd' ; branch delay slot 
loc_104: 
jal   
float_rand 
addiu  
$s0, 1 
lw   
$gp, 0x28+var_18($sp) 
; convert value we got from float_rand() to double type (printf() need it): 
cvt.d.s  
$f2, $f0 
lw   
$t9, (printf & 0xFFFF)($gp) 
mfc1   
$a3, $f2 
mfc1   
$a2, $f3 
jalr   
$t9 
move   
$a0, $s2 
bne   
$s0, $s1, loc_104 
move   
$v0, $zero 
lw   
$ra, 0x28+var_4($sp) 
lw   
$s2, 0x28+var_8($sp) 
lw   
$s1, 0x28+var_C($sp) 
lw   
$s0, 0x28+var_10($sp) 
jr   
$ra 
addiu  
$sp, 0x28 ; branch delay slot 
$LC1:   
.ascii "%f\n" 
$LC0:   
.float 1.0 
上述程序同样出现了无实际意义的 LUI 指令。17.5.6 节解释过这种情况了，本节不再对其进行复述。 
22.1.3 ARM (ARM mode) 
指令清单 22.3  Optimizing GCC 4.6.3 (IDA) 
float_rand 
STMFD    
SP!, {R3,LR} 
BL       
my_rand 
; R0=pseudorandom value 
FLDS   
S0, =1.0 
; S0=1.0 
BIC      
R3, R0, #0xFF000000 
BIC      
R3, R3, #0x800000 
ORR      
R3, R3, #0x3F800000 
; R3=pseudorandom value & 0x007fffff | 0x3f800000 
; copy from R3 to FPU (register S15). 
; it behaves like bitwise copy, no conversion done: 
FMSR     
S15, R3 
; subtract 1.0 and leave result in S0: 
FSUBS    
S0, S15, S0 
LDMFD    
SP!, {R3,PC} 
flt_5C           DCFS 1.0 
main 
STMFD    
SP!, {R4,LR} 
MOV      
R0, #0 
BL       
time 
BL       
my_srand 
MOV      
R4, #0x64 ; 'd' 
loc_78 
BL   
float_rand 
; S0=pseudorandom value 
LDR  
R0, =aF         ; "%f" 
; convert float type value into double type value (printf() will need it): 
FCVTDS   
D7, S0 
; bitwise copy from D7 into R2/R3 pair of registers (for printf()): 
FMRRD    
R2, R3, D7 
BL       
printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 22 章  共用体（union）类型 
349 
SUBS     
R4, R4, #1 
BNE      
loc_78 
MOV      
R0, R4 
LDMFD    
SP!, {R4,PC} 
aF    
DCB "%f",0xA,0 
通过 objdump 工具对上述程序进行分析，可看到 objdump 所显示的 FPU 指令和 IDA 所显示的指令并
不一致。这大概是因为 IDA 与 binutils 的研发人员使用的是不同的指令手册。不管原因如何，同一个 FPU
指令会有不同对应名称的情况确实存在。 
指令清单 22.4  Optimizing GCC 4.6.3 (objdump) 
00000038 : 
  38:   e92d4008        push    {r3, lr} 
  3c:   ebfffffe        bl      10  
  40:   ed9f0a05        vldr    s0, [pc, #20]     
; 5c  
  44:   e3c034ff        bic     r3, r0, #-16777216   
; 0xff000000 
  48:   e3c33502        bic     r3, r3, #8388608     
; 0x800000 
  4c:   e38335fe        orr     r3, r3, #1065353216  
; 0x3f800000 
  50:   ee073a90        vmov    s15, r3 
  54:   ee370ac0        vsub.f32        s0, s15, s0 
  58:   e8bd8008        pop     {r3, pc} 
  5c:   3f800000        svccc   0x00800000 
00000000 : 
   0:   e92d4010        push    {r4, lr} 
   4:   e3a00000        mov     r0, #0 
   8:   ebfffffe        bl      0  
   c:   ebfffffe        bl      0  
   10:  e3a04064        mov     r4, #100        ; 0x64 
   14:  ebfffffe        bl      38  
   18:  e59f0018        ldr     r0, [pc, #24]   ; 38  
   1c:  eeb77ac0        vcvt.f64.f32    d7, s0 
   20:  ec532b17        vmov    r2, r3, d7 
   24:  ebfffffe        bl      0  
   28:  e2544001        subs    r4, r4, #1 
   2c:  1afffff8        bne     14  
   30:  e1a00004        mov     r0, r4 
   34:  e8bd8010        pop     {r4, pc} 
   38:  00000000        andeq   r0, r0, r0 
在 float_rand()函数里地址 5c 处的指令和 main()函数里地址 38 处的指令都是随机噪音。 
22.2  计算机器精度 
单精度浮点数的“机器精度/machine epsilon”指的是相对误差的上限，即 FPU 操作的最小值。因此，
浮点数的数据位越多，误差越小、精度越高。故而单精度 float 型数据的最高精度为 2-23=1.19e-7，而双精度
double 型的最高精度为 2-52=2.22e-16。 
所以计算某一数值的机器精度是可能的。 
#include  
#include  
union uint_float 
{ 
        uint32_t i; 
        float f;  
}; 
float calculate_machine_epsilon(float start) 
{ 
        union uint_float v; 
        v.f=start; 
        v.i++; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
350 
逆向工程权威指南（上册） 
        return v.f-start; 
};  
void main()  
{ 
        printf ("%g\n", calculate_machine_epsilon(1.0)); 
}; 
上述程序从 IEEE 754 格式的浮点数中提取小数部分，把这部分当作整数处理并且给它加上 1。运算的中间值
是“输入值＋机器精度”。通过测算输入值（单精度型数值）与中间值的差值来测算具体 float 型数据的机器精度。 
程序使用 union 型数据结构解析 IEEE 754 格式的 float 型浮点数，并利用这种数据结构把 float 数据的
小数部分提取为整数。“1”实际上加到浮点数小数部分中去了。当然，这可能造成溢出，可能把最高位的
进位加到浮点数的指数部分。 
22.2.1 x86 
指令清单 22.5  Optimizing MSVC 2010 
tv130 = 8 
_v$ = 8 
_start$ = 8 
_calculate_machine_epsilon PROC 
        fld      DWORD PTR _start$[esp-4] 
        fst      DWORD PTR _v$[esp-4] ;冗余代码 
        inc      DWORD PTR _v$[esp-4] 
        fsubr    DWORD PTR _v$[esp-4]  
        fstp     DWORD PTR tv130[esp-4] 
;冗余代码 
        fld      DWORD PTR tv130[esp-4] 
;冗余代码 
        ret      0 
_calculate_machine_epsilon ENDP 
上述程序的第二个 FST 指令是冗余指令：没有理由把输入值在同一个地址存储两次。这是编译器的问
题：它决定把变量 v 的存储地址和传递参数所用的栈内地址分配成同一个地址。 
接下来的 INC 指令把输入值的小数部分当作整数数据处理。处理结果的中间值再被当作 IEEE 754 型
数据传递给 FPU。FSUBR 指令计算差值，最后返回值被存储到 ST0 之中。 
程序中最后两条 FSTP/FLD 指令没有实际作用。编译器没能进行相应的优化。 
22.2.2 ARM64 
把数据类型扩展为 64 位数据的程序如下所示。 