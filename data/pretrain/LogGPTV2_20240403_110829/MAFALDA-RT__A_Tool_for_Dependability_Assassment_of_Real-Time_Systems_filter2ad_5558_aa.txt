title:MAFALDA-RT: A Tool for Dependability Assassment of Real-Time Systems
author:Manuel Rodr&apos;ƒ±guez and
Arnaud Albinet and
Jean Arlat
0$)$/'$57$7RROIRU'HSHQGDELOLW\$VVHVVPHQWRI5HDO7LPH6\VWHPV
Manuel Rodr√≠guez, Arnaud Albinet and Jean Arlat
/$$6&156
$YHQXHGX&RORQHO5RFKH
7RXORXVH&HGH[¬≤)UDQFH
(PDLO^URGULJXH]DDOELQHWDUODW`#ODDVIU
$EVWUDFW
7KLV SDSHU SUHVHQWV D QHZ SURWRW\SH
WRRO FDOOHG
0$)$/'$57 0LFURNHUQHO $VVHVVPHQW E\ )DXOW LQMHFWLRQ
$QD/\VLVDQG'HVLJQ$LGIRU5HDO7LPHV\VWHPVWKDWLVDLPHG
DWWKHGHSHQGDELOLW\DVVHVVPHQWRIUHDOWLPHV\VWHPV 7KHWRRO
SURSRVHVDQRYHOPHWKRGWRFRSHZLWKWKHSUREOHPRIWHPSRUDO
LQWUXVLYHQHVVFDXVHGE\WKHXVHRI6:,),,QDGGLWLRQWRW\SLFDO
IDLOXUHPRGHVHJDSSOLFDWLRQKDQJV\VWHPKDQJH[FHSWLRQ
HWF WKH REVHUYDWLRQ FDSDELOLWLHV RI 0$)$/'$57 H[WHQG WR
WHPSRUDOPHDVXUHPHQWVFKDUDFWHUL]LQJERWKWKHH[HFXWLYHDQG
DSSOLFDWLRQOD\HUVHJWDVNSURFHVVLQJ WDVNV\QFKURQL]DWLRQ
FRQWH[WVZLWFKV\VWHPFDOOVHWF7KHXVHIXOQHVVRIWKHWRROLV
LOOXVWUDWHGE\DVHWRIUHVXOWVRIDVLJQLILFDQWFDVHVWXG\EDVHG
RQDUHDOWLPHV\VWHPFRQVLVWLQJRIWKH&KRUXVPLFURNHUQHODQG
DPLQHGUDLQDJHFRQWURODSSOLFDWLRQ
,QWURGXFWLRQ
in  memory,  SWIFI  allows  for  emulating 
Among  the  various  forms  of  fault  injection  techniques,
software-implemented fault injection (SWIFI, in short) has now
become  very  popular.  By  flipping  bits  into  processor  register
cells  or 
the
consequences  of  either  transient  hardware  faults  and  to  some
extent software faults as well [1]. SWIFI can be applied at the
various layers of the target system (processor, microkernel, OS,
middleware,  application).  Many  related  techniques  and  tools
have  been  developed  to  support  the  application  of  SWIFI
(FERRARI [2], Xception [3], MAFALDA [4], just to name a
few). Recently, an extension (quoted Scan Chain-implemented
Fault Injection, or SCIFI) has been proposed that was shown to
provide  a  ‚Äúreachability‚Äù  level  close  to  what  is  achieved  by
simulation-based  techniques  (e.g.,  VHDL  simulation)  by
making  use  of  the  testing  facilities  incorporated  into  most
recent VLSI components [5].
Nevertheless,  although  SWIFI  exhibits  many  valuable
properties, its application for assessing dependable systems with
stringent  real-time  requirements  raises the  problem  of  temporal
disturbances that are caused to the target system by the overheads
induced  by  most  SWIFI  instrumentations  currently  available.
This is also known as WHPSRUDOLQWUXVLYHQHVV or SUREHHIIHFW. The
main sources of temporal intrusiveness are i) the time related to
the injection of faults, and ii) the time related to the observation
of the system behavior.
This  paper  presents  the  main  features  of  the  prototype  tool
MAFALDA-RT  (Microkernel  Assessment  by  Fault  injection
AnaLysis and Design Aid for Real Time systems). This tool is
a  completely  new  version  of  the  MAFALDA  tool  [4].  In
particular,  it  features  two  novel  assessment  capabilities:
i) virtual  elimination  of 
intrusiveness  and
ii) enhancement  of  the  observations  in  the  temporal  domain.
Another major change concerns the management of the conduct
and exploitation of the results of a fault injection campaign that
is conveniently controlled by means of a database.
temporal 
the 
The  paper  is  organized  as  follows.  Section 2  presents  an
overview of the structure of the tool. Sections 3 and 4 focus on
two  of  the  original  features  of  MAFALDA-RT  that  are
respectively related to the temporal characteristics of the fault
injection  and  measurement  capabilities.  Section 5  provides
some examples of results and analyses that can be carried out.
Finally, Section 6 concludes the paper.
6WUXFWXUHRIWKHWRRO
The  architecture  of  MAFALDA-RT  (Figure  1)  consists  of
several  7DUJHW PDFKLQHV  (Intel  Pentium-based  PC  boards)
running the real-time system(s) under test, and a +RVWPDFKLQH
(a  Sun  workstation)  that  controls  and  analyzes  the  fault
injection  campaigns.  The  Target  machines  can  run  either  the
same system so as to speed up campaigns, or different systems
for comparison purposes.
In  the  Target  machines,  MAFALDA-RT  comprises  the
modules described hereafter:
‚Ä¢ ,QMHFWRU ,1-:  Consists  of  a  set  of  exception  handlers
performing  the  injection  of  faults.  Faults  are  based  on
WUDQVLHQW  ELW IOLSV  into  the  RAM  memory.  Fault  injection  is
targeted  to  the  FRGH VHJPHQWV  of  the  various  components
forming 
the
synchronization  manager,  the  time  manager,  etc.).  This  is
called NHUQHOLQMHFWLRQ. The corruption of the application tasks
is made with respect to the calls they issue. In this case, faults
are  targeted  to  the  memory  image  of  the  VWDFNV  where  the
parameters of the system calls are passed to the microkernel.
This is called SDUDPHWHULQMHFWLRQ.
the  microkernel 
scheduler, 
(e.g., 
the 
7DUJHWPDFKLQHV3HQWLXPV
5($/7,0($33/,&$7,21
5($/7,0(
0,&52.(51(/
+DUGZDUH
&ORFN
,1-
2%6
'(9,&(
&217
+RVWPDFKLQH681ZRUNVWDWLRQ
-DYD*8,
&DPSDLJQ
PDQDJHU
([SHULPHQW
PDQDJHU
*UDSK
PDQDJHU
64/
'$7$%$6(
5DZ
GDWD
$QDO\VLV
VFULSWV
+:5HVHW
5(/$<6
(08/$7256
VHQVRUVDFWXDWRUV
Figure 1. Architecture of MAFALDA-RT
Proceedings of the International Conference on Dependable Systems and Networks (DSN‚Äô02) 
0-7695-1597-5/02 $17.00 ¬© 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:17 UTC from IEEE Xplore.  Restrictions apply. 
‚Ä¢ 2EVHUYHU 2%6:  Consists  of  a  set  of  data  interceptors
performing  the  observation  of  the  target  system.  The
interceptors  capture  temporal  and  value  data  that  allow
determining  both  the  failure  modes  and  the  performance  of
the  target  system.  Some  of  the  intercepted  items  are:
scheduler events (like context switches), task results, signals
(like  exceptions),  beginning,  termination  and  return  code  of
system  calls,  etc.  All  intercepted  items  are  assigned  a
timestamp.
‚Ä¢ 'HYLFH FRQWUROOHU '(9,&( &217:  Consists  of  a  module
controlling  system  devices  so  as  to  eliminate  the  temporal
intrusiveness  introduced  by  the  injection  and  observation
instrumentation  of  the  SWIFI  tool  (see  Section  3).  This  is
mainly  done  by  acting  on  the  KDUGZDUH FORFN.  External
devices,  like  sensors  and  actuators,  are  also  controlled  by
acting  on  their  corresponding  HPXODWRU VRIWZDUH,  usually
available during the evaluation phase of the system.
The  core  of  MAFALDA-RT  in  the  Host  machine  is  the
'DWDEDVH  (a  SQL-based  database  called  3RVWJUH64/  [6]),
which  stores  all  information  necessary  to  the  configuration,
development and analysis of the fault injection campaigns. The
database  contains  four  main  types  of  information,  namely,
attributes  of  the  target  systems,  configuration  of  campaigns,
characterization of experiments and experimental results.
MAFALDA-RT  provides  a  Java-based  graphical  user
interface (-DYD*8,) which is connected to the Database. It is
composed of the &DPSDLJQPDQDJHU, the ([SHULPHQWPDQDJHU
and the *UDSKPDQDJHU.
The &DPSDLJQPDQDJHU allows the user to enter the attributes
of  the  target  systems  and  to  configure  the  fault  injection
campaigns:
‚Ä¢ Attributes  of  the  target  systems:  Characterize  the  targets  of
injection.  As  an  example,  a  target  microkernel  is  described
from the point of view of its componentized architecture (e.g.,
memory  addresses  of  functional  components)  and 
its
interface  (e.g.,  list  of  kernel  calls  and  parameters).  These
attributes must be specified for each new target system.
‚Ä¢ Configuration of campaigns:  Consist of parameters defining
the fault injection experiments (e.g., fault model, fault trigger,
fault duration, fault type, etc.) and the real-time applications
(e.g., executable files, target machines, etc.).
The ([SHULPHQWPDQDJHU is in charge of controlling the fault
injection experiments, but also of storing into files and filtering
into  the  Database  the  5DZ GDWD  gathered  from  the  target
machines. The filtered data correspond to both the experiment
characterization and the experimental results:
‚Ä¢ Experiment characterization: Informs of the actual activation
of  the  injected  faults,  the  memory  addresses  corrupted,  the
time of injection, the fault model, etc.
‚Ä¢ Experimental  results:  Correspond  to  the  failure  modes
(timing and value failures, error detection, etc., as defined in
Section  4)  and  the  performance  (processor  utilization,
response  times,  laxity,  etc.)  of  the  target  systems  observed
during the fault injection campaigns.
When  a  Target  machine  hangs,  only  a  KDUGZDUHUHVHW  can
reinitialize  it.  In  order  to  automate  experiments,  a  simple
relay-based integrated circuit (5(/$<6) has been implemented
to  automatically  reboot  a  Target  machine  at  the  end  of  each
experiment.
Finally, the *UDSKPDQDJHU allows the user to define under
the form of $QDO\VLVVFULSWV the different types of analyses to be
performed on the results stored in the Database (see Sections 4
and 5), which can be then graphically displayed.
&RSLQJZLWKWHPSRUDOLQWUXVLYHQHVVRI6:,),
The necessary interactions  of  SWIFI  with  the  target  system
can  considerably  impact  the  temporal  behavior  of  the  target
system.  Besides  such  a 
intrusiveness  maybe
it  might  be
acceptable 
unacceptable  when 
temporal
requirements (e.g., task deadlines, etc.) attached to a real-time
system. Indeed, in such cases special care is needed so that the
potential temporal  alterations  introduced  by  the  tool  (both  for
fault  injection  and  observation)  are  minimized  or  at  least
mastered.
in  many  practical  situations, 
assessing 
temporal 
the 
stringent 
Towards these ends, the approach supported by MAFALDA-RT
consists  in  providing  means  for  properly  controlling  the  system
devices so as to HPXODWH an ideal environment where the temporal
overhead  of  the  tool  is  eliminated.  Informally,  this  approach
consists in IUHH]LQJ the progression of time while the tool executes.
As a result, the tool execution is perceived as instantaneous by the