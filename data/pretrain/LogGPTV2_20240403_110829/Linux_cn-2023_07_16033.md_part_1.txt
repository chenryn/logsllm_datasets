---
author: Will Cohen
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1560
date: '2023-07-26 06:26:18'
editorchoice: false
excerpt: 从调试器中获取函数调用关系。
fromurl: https://opensource.com/article/23/3/gdb-debugger-call-frame-active-function-calls
id: 16033
islctt: true
largepic: /data/attachment/album/202307/26/062542j0picgf1fs6nd8qn.jpg
permalink: /article-16033-1.html
pic: /data/attachment/album/202307/26/062542j0picgf1fs6nd8qn.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 从调试器中获取函数调用关系。
tags:
- 调试
- 函数
thumb: false
title: GDB 调试器如何通过调用帧信息来确定函数调用关系
titlepic: true
translator: jrglinux
updated: '2023-07-26 06:26:18'
---
![](/data/attachment/album/202307/26/062542j0picgf1fs6nd8qn.jpg)
> 
> 从调试器中获取函数调用关系。
> 
> 
> 
在我的 [上一篇文章](https://opensource.com/article/23/2/compiler-optimization-debugger-line-information) 中，我展示了如何使用 `debuginfo` 在当前指令指针（IP）和包含它的函数或行之间进行映射。该信息对于显示 CPU 当前正在执行的代码很有帮助。不过，如果能显示更多的有关当前函数调用栈及其正在执行语句的上下文对我们定位问题来说也是十分有助的。
例如，将空指针作为参数传递到函数中而导致非法内存访问的问题，只需查看当前执行函数行，即可发现该错误是由尝试通过空指针进行访问而触发的。但是，你真正想知道的是导致空指针访问的函数调用的完整上下文，以便确定该空指针最初是如何传递到该函数中的。此上下文信息由回溯提供，可以让你确定哪些函数可能对空指针参数负责。
有一点是肯定的：确定当前活动的函数调用栈不是一项简单的操作。
### 函数激活记录
现代编程语言具有局部变量，并允许函数可以调用自身的递归。此外，并发程序具有多个线程，这些线程可能同时运行相同的函数。在这些情况下，局部变量不能存储在全局位置。对于函数的每次调用，局部变量的位置必须是唯一的。它的工作原理如下：
* 每次调用函数时，编译器都会生成函数激活记录，以将局部变量存储在唯一位置。
* 为了提高效率，处理器堆栈用于存储函数激活记录。
* 当函数被调用时，会在处理器堆栈的顶部为该函数创建一条新的函数激活记录。
* 如果该函数调用另一个函数，则新的函数激活记录将放置在现有函数激活记录之上。
* 每次函数返回时，其函数激活记录都会从堆栈中删除。
函数激活记录的创建是由函数中称为“ 序言   prologue ”的代码创建的。函数激活记录的删除由函数“ 尾声   epilogue ”处理。函数体可以利用堆栈上为其预留的内存来存储临时值和局部变量。
函数激活记录的大小可以是可变的。对于某些函数，不需要空间来存储局部变量。理想情况下，函数激活记录只需要存储调用 *该* 函数的函数的返回地址。对于其他函数，除了返回地址之外，可能还需要大量空间来存储函数的本地数据结构。帧大小的可变导致编译器使用帧指针来跟踪函数激活帧的开始。函数序言代码具有在为当前函数创建新帧指针之前存储旧帧指针的额外任务，并且函数尾声必须恢复旧帧指针值。
函数激活记录的布局方式、调用函数的返回地址和旧帧指针是相对于当前帧指针的恒定偏移量。通过旧的帧指针，可以定位堆栈上下一个函数的激活帧。重复此过程，直到检查完所有函数激活记录为止。
### 优化复杂性
在代码中使用显式帧指针有几个缺点。在某些处理器上，可用的寄存器相对较少。具有显式帧指针会导致使用更多内存操作。生成的代码速度较慢，因为帧指针必须位于寄存器中。具有显式帧指针可能会限制编译器可以生成的代码，因为编译器可能不会将函数序言和尾声代码与函数体混合。
编译器的目标是尽可能生成快速代码，因此编译器通常会从生成的代码中省略帧指针。正如 [Phoronix 的基准测试](https://www.phoronix.com/review/fedora-frame-pointer) 所示，保留帧指针会显着降低性能。不过省略帧指针也有缺点，查找前一个调用函数的激活帧和返回地址不再是相对于帧指针的简单偏移。
### 调用帧信息
为了帮助生成函数回溯，编译器包含 DWARF 调用帧信息（CFI）来重建帧指针并查找返回地址。此补充信息存储在执行的 `.eh_frame` 部分中。与传统的函数和行位置信息的 `debuginfo` 不同，即使生成的可执行文件没有调试信息，或者调试信息已从文件中删除，`.eh_frame` 部分也位于可执行文件中。 调用帧信息对于 C++ 中的 `throw-catch` 等语言结构的操作至关重要。
CFI 的每个功能都有一个帧描述条目（FDE）。作为其步骤之一，回溯生成过程为当前正在检查的激活帧找到适当的 FDE。将 FDE 视为一张表，每一行代表一个或多个指令，并具有以下列：
* 规范帧地址（CFA），帧指针指向的位置
* 返回地址
* 有关其他寄存器的信息
FDE 的编码旨在最大限度地减少所需的空间量。FDE 描述了行之间的变化，而不是完全指定每一行。为了进一步压缩数据，多个 FDE 共有的起始信息被分解出来并放置在通用信息条目（CIE）中。 这使得 FDE 更加紧凑，但也需要更多的工作来计算实际的 CFA 并找到返回地址位置。该工具必须从未初始化状态启动。它逐步遍历 CIE 中的条目以获取函数条目的初始状态，然后从 FDE 的第一个条目开始继续处理 FDE，并处理操作，直到到达覆盖当前正在分析的指令指针的行。
### 调用帧信息使用实例
从一个简单的示例开始，其中包含将华氏温度转换为摄氏度的函数。 内联函数在 CFI 中没有条目，因此 `f2c` 函数的 `__attribute__((noinline))` 确保编译器将 `f2c` 保留为真实函数。
```
#include 
int __attribute__ ((noinline)) f2c(int f)
{
    int c;
    printf("converting\n");
    c = (f-32.0) * 5.0 /9.0;
    return c;
}
int main (int argc, char *argv[])
{
    int f;
    scanf("%d", &f);
    printf ("%d Fahrenheit = %d Celsius\n",
            f, f2c(f));
    return 0;
}
```
编译代码：
```
$ gcc -O2 -g -o f2c f2c.c
```
`.eh_frame` 部分展示如下:
```
$ eu-readelf -S f2c |grep eh_frame
[17] .eh_frame_hdr  PROGBITS   0000000000402058 00002058 00000034  0 A  0   0  4
[18] .eh_frame      PROGBITS   0000000000402090 00002090 000000a0  0 A  0   0  8
```
我们可以通过以下方式获取 CFI 信息：
```
$ readelf --debug-dump=frames  f2c > f2c.cfi
```
生成 `f2c` 可执行文件的反汇编代码，这样你可以查找 `f2c` 和 `main` 函数：
```
$ objdump -d f2c > f2c.dis
```
在 `f2c.dis` 中找到以下信息来看看 `f2c` 和 `main` 函数的执行位置：