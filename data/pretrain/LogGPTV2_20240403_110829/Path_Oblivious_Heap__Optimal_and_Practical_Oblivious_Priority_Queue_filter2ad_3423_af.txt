### VII. Concrete Performance in MPC

In this section, we evaluate the concrete performance of our scheme in secure multi-party computation (MPC) scenarios.

#### Schemes to Compare With
We compare the cost incurred for MPC with the schemes proposed by Wang et al. [44], Jafargholi et al. [25], and our own scheme. The asymptotic circuit sizes for these schemes are summarized in Table I. Assuming that the key size is at least \(\log N\) bits, our scheme asymptotically outperforms Wang et al. [44] by a logarithmic factor and Jafargholi et al. [25] by a \(\log \log\) factor. Although Wang et al. [44] is asymptotically worse than Jafargholi et al. [25], our evaluation results show that Wang et al. [44] outperforms Jafargholi et al. [25] in practice. Thus, Wang et al. [44] represents the state-of-the-art in terms of concrete performance.

#### Setup and Metrics
To best contrast with prior work, we adopt the same experimental setup and evaluation metrics as Wang et al. [44]. In their work, they evaluated the concrete performance of their oblivious priority queue scheme in an MPC scenario. We consider an encrypted database scenario where Alice stores the encrypted, oblivious priority queue, and Bob makes priority queue requests. After each query, Alice receives the new state of the database without learning Bob's request or the answer.

We use FlexSC [1], an open-source, semi-honest garbled circuit backend. As noted by Wang et al. [44], the bottleneck is the cost of generating and evaluating garbled circuits; thus, the number of symmetric encryptions (AES) serves as a key performance metric. This metric is platform-independent, facilitating reproducibility. Modern processors with instruction-level AES support can compute approximately \(10^8\) AES-128 operations per second. Our evaluation assumes that the oblivious data structure is already set up in a preprocessing phase, and we focus on the online cost per request.

#### Concrete Instantiation and Parameters
For our MPC-related evaluations, we use the Circuit-variant. We adopt the same practical optimizations as suggested in the original Circuit ORAM work [42]: a bucket capacity of 2, no eviction on the path where an element has been extracted, and two evictions based on reverse-lexicographical ordering per request. In the tree-based ORAM and oblivious data structure line of work, variants with provable stochastic bounds typically perform a constant factor worse than those known for the best empirical performance. We determine concrete security parameters using a standard methodology detailed in Section VI, but this time with Circuit ORAM’s eviction algorithm. For a bucket size of 3 and using a reverse-lexicographical order for choosing eviction paths, a root-bucket size of 33 is sufficient for achieving \(2^{-80}\) security.

#### Evaluation Results
The results are shown in Figure 3. When the database contains \(2^{30}\) entries, our scheme results in 7 to 8 times fewer symmetric encryptions than the prior state-of-the-art [44]. Since our improvement is asymptotic, the speedup will increase with larger data sizes.

#### Additional Evaluation Results
We also evaluated the concrete performance of Path Oblivious Sort. Due to space constraints, these results are deferred to the online full version [37].

### References
[1] https://github.com/wangxiao1254/FlexSC.
Authorized licensed use limited to: Auckland University of Technology. Downloaded on November 03, 2020 at 00:37:42 UTC from IEEE Xplore. Restrictions apply. 
854

[2] https://github.com/data61/MP-SPDZ.
[3] M. Ajtai, J. Komlós, and E. Szemerédi. An O(n log n) sorting network. In STOC, 1983.
[4] G. Asharov, I. Komargodski, W.-K. Lin, K. Nayak, E. Peserico, and E. Shi. Optorama: Optimal oblivious RAM. Cryptology ePrint Archive, Report 2018/892, 2018. https://eprint.iacr.org/2018/892.
[5] B. Balle, J. Bell, A. Gascón, and K. Nissim. The privacy blanket of the shuffle model. In CRYPTO, 2019.
[35] C. Sahin, V. Zakhary, A. El Abbadi, H. Lin, and S. Tessaro. Taostore: Overcoming asynchronicity in oblivious data storage. In S & P, 2016.
[36] S. Sasy and O. Ohrimenko. Oblivious sampling algorithms for private data analysis. In NeurIPS, 2019.
[37] E. Shi. Path oblivious heap: Optimal and practical oblivious priority queue. Cryptology ePrint Archive, Report 2019/274, 2019. https://eprint.iacr.org/2019/274.
[38] E. Stefanov and E. Shi. Oblivistore: High performance oblivious cloud storage. In S & P, 2013.
[6] K. E. Batcher. Sorting Networks and Their Applications. AFIPS ’68 (Spring), 1968.
[7] E. Boyle and M. Naor. Is there an oblivious RAM lower bound? In ITCS, 2016.
[8] T. H. Chan, J. Katz, K. Nayak, A. Polychroniadou, and E. Shi. More is less: Perfectly secure oblivious algorithms in the multi-server setting. In ASIACRYPT, 2018.
[9] K. Chaudhuri and N. Mishra. When random sampling preserves privacy. In C. Dwork, editor, CRYPTO, 2006.
[10] A. Cheu, A. Smith, J. Ullman, D. Zeber, and M. Zhilyaev. Distributed differential privacy via shuffling, 04 2019.
[11] K.-M. Chung, Z. Liu, and R. Pass. Statistically-secure ORAM with \(\tilde{O}(\log^2 n)\) overhead. In Asiacrypt, 2014.
[12] T. T. A. Dinh, P. Saxena, E.-C. Chang, B. C. Ooi, and C. Zhang. M2R: Enabling stronger privacy in MapReduce computation. In USENIX Security, 2015.
[13] C. Dwork, F. McSherry, K. Nissim, and A. Smith. Calibrating noise to sensitivity in private data analysis. In TCC, 2006.
[14] Ú. Erlingsson, V. Feldman, I. Mironov, A. Raghunathan, K. Talwar, and A. Thakurta. Amplification by shuffling: From local to central differential privacy via anonymity. In SODA, 2019.
[15] U. Erlingsson, V. Pihur, and A. Korolova. RAPPOR: Randomized aggregatable privacy-preserving ordinal response. In CCS, 2014.
[16] A. Farhadi, M. Hajiaghayi, K. G. Larsen, and E. Shi. Lower bounds for external memory integer sorting via network coding. In STOC, 2019.
[17] J. Gehrke, M. Hay, E. Lui, and R. Pass. Crowd-blending privacy. In CRYPTO 2012, 2012.
[18] C. Gentry, K. A. Goldman, S. Halevi, C. S. Jutla, M. Raykova, and D. Wichs. Optimizing ORAM and using it efficiently for secure computation. In PETS, 2013.
[19] O. Goldreich. Towards a theory of software protection and simulation by oblivious RAMs. In STOC, 1987.
[20] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. J. ACM, 1996.
[21] M. T. Goodrich. Zig-zag sort: A simple deterministic data-oblivious sorting algorithm running in \(O(N \log N)\) time. In STOC, 2014.
[22] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of outsourced data via oblivious RAM simulation. In ICALP, 2011.
[23] S. D. Gordon, J. Katz, V. Kolesnikov, F. Krell, T. Malkin, M. Raykova, and Y. Vahlis. Secure two-party computation in sublinear (amortized) time. In CCS, 2012.
[24] R. Jacob, K. G. Larsen, and J. B. Nielsen. Lower bounds for oblivious data structures. In SODA, 2019.
[25] Z. Jafargholi, K. G. Larsen, and M. Simkin. Optimal oblivious priority queues and offline oblivious RAM. Cryptology ePrint Archive, Report 2019/237, 2019. https://eprint.iacr.org/2019/237.
[26] S. P. Kasiviswanathan, H. K. Lee, K. Nissim, S. Raskhodnikova, and A. D. Smith. What can we learn privately? In FOCS, 2008.
[27] K. G. Larsen and J. B. Nielsen. Yes, there is an oblivious RAM lower bound! In CRYPTO, 2018.
[28] Z. Li and B. Li. Network coding: The case of multiple unicast sessions. 2004.
[29] W. Lin, E. Shi, and T. Xie. Can we overcome the \(n \log n\) barrier for oblivious sorting? In SODA, 2019.
[30] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi. ObliVM: A programming framework for secure computation. In S & P, 2015.
[31] S. Lu and R. Ostrovsky. Distributed oblivious RAM for secure two-party computation. In TCC, 2013.
[32] S. Mazloom and S. D. Gordon. Secure computation with differentially private access patterns. In CCS, 2018.
[33] K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg, N. Taft, and E. Shi. GraphSC: Parallel secure computation made easy. In S & P, 2015.
[34] L. Ren, C. W. Fletcher, A. Kwon, E. Stefanov, E. Shi, M. van Dijk, and S. Devadas. Constants count: Practical improvements to oblivious RAM. In USENIX Security, 2015.
[39] E. Stefanov, M. van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas. Path ORAM – an extremely simple oblivious RAM protocol. In CCS, 2013.
[40] T. Toft. Secure data structures based on multi-party computation. In PODC, pages 291–292, 2011.
[41] J. S. Vitter. Random sampling with a reservoir. ACM Trans. Math. Softw., 11(1):37–57, Mar. 1985.
[42] X. S. Wang, T.-H. H. Chan, and E. Shi. Circuit ORAM: On tightness of the Goldreich-Ostrovsky lower bound. In CCS, 2015.
[43] X. S. Wang, Y. Huang, T.-H. H. Chan, A. Shelat, and E. Shi. SCORAM: Oblivious RAM for secure computation. In CCS, 2014.
[44] X. S. Wang, K. Nayak, C. Liu, T.-H. H. Chan, E. Shi, E. Stefanov, and Y. Huang. Oblivious Data Structures. In CCS, 2014.
[45] P. Williams, R. Sion, and A. Tomescu. PrivateFS: A parallel oblivious file system. In CCS, 2012.
[46] W. Zheng, A. Dave, J. G. Beekman, R. A. Popa, J. E. Gonzalez, and I. Stoica. Opaque: An oblivious and encrypted distributed analytics platform. In NSDI, 2017.

### Appendix A: Additional Background on Non-Recursive Path ORAM and Circuit ORAM

In this section, we review the (non-recursive) Path ORAM [39] and the Circuit ORAM [42] algorithms. The primary difference between the two algorithms lies in how path evictions are performed. Path ORAM’s eviction algorithm requires the CPU to store an entire tree path, while Circuit ORAM’s eviction can be performed by a CPU with a single register.

#### Data Structure
A non-recursive Path ORAM [39] or Circuit ORAM [42], parameterized by a security parameter \(\lambda\) and a capacity parameter \(N\), is structured as a binary tree with \(N\) leaves, where each node in the tree is called a bucket. To achieve a security failure probability of \(\text{negl}(\lambda)\), the root bucket \(B_{\text{root}}\) should be large enough to store \(\omega(\log \lambda)\) blocks, whereas every internal bucket \(B\) holds a suitable constant number of blocks. All blocks stored in the tree are either real or dummy:

- **Real Block**: A real block is of the form \((\text{addr}, \text{data}, \text{pos})\), where \(\text{addr}\) denotes the logical address of the block (\(\text{addr} \in \{0, 1, \ldots, N - 1\}\)), \(\text{data}\) denotes an arbitrary payload string, and \(\text{pos} \in \{0, 1, \ldots, N - 1\}\) denotes the position label for the block.
- **Dummy Block**: A dummy block is of the form \((\bot, \bot, \bot)\).

#### Path Invariant
The data structure always respects the following path invariant: a real block whose position label is \(\text{pos}\) must reside on the path from the root to the leaf numbered \(\text{pos}\).

#### Algorithms
The (non-recursive) Path ORAM or Circuit ORAM supports the following operations:

- **Insert(addr, data)**:
  1. Pick a random position label \(\text{pos} \in \{0, 1, \ldots, N - 1\}\) and call \(B_{\text{root}}.\text{Add}(\text{addr}, \text{data}, \text{pos})\). If the bucket \(B\) is already fully occupied, an Overﬂow exception is thrown.
  2. Pick two random eviction paths \(P\) and \(P'\) that are non-overlapping except at the root bucket. Call \(P.\text{Evict}()\) and \(P'.\text{Evict}()\).
  3. Return \(\text{pos}\).

- **Read(addr, pos)**:
  1. For each bucket \(B\) from the root to the leaf identified by \(\text{pos}\):
     - Sequentially scan through the bucket \(B\):
       - When \(\text{addr}\) is encountered, remember the \(\text{data}\) field in the client’s local cache and replace the block with a dummy block.
       - Otherwise, write the original block back for obliviousness.
  2. Call \(P.\text{Evict}()\) where \(P\) is the path defined by \(\text{pos}\).
  3. Return \(\text{data}\).

#### Path Eviction
- **Path ORAM**:
  - The CPU fetches the entire path into its local registers and locally computes a new path by packing all real blocks as close to the leaf as possible while respecting the path invariant. The CPU then writes the entire path back to memory.
  - This requires the CPU to cache the entire path, including the super-logarithmically sized root bucket, which can be costly.

- **Circuit ORAM**:
  - Circuit ORAM allows a CPU with \(O(1)\) words of private cache to perform the eviction, making only \(O(1)\) linear scans over the path. Even with \(O(1)\) CPU registers, Circuit ORAM’s eviction algorithm completes in \(O(|B_{\text{root}}| + \log N)\) time, proportional to the path length.
  - The eviction algorithm differs slightly between a Read path where an element has just been removed and a non-Read path selected for eviction.

#### Stochastic Bounds
Consider an adversary \(A\) that interacts with a challenger \(C\) and adaptively submits a sequence of requests either of the form \((\text{Insert}, \text{addr}, \text{data})\) or \((\text{Read}, \text{addr})\). It is guaranteed that for a Read request, a conforming adversary \(A\) always supplies an \(\text{addr}\) that has been added (and not removed since its addition).

- Whenever \(C\) receives a request of the form \((\text{Insert}, \text{addr}, \text{data})\) from \(A\), it calls Path ORAM’s (or Circuit ORAM’s) \(\text{pos} \leftarrow \text{Insert}(\text{addr}, \text{pos}, \text{data})\) algorithm and records the \(\text{pos}\) that is returned.
- Whenever \(C\) receives a request of the form \((\text{Read}, \text{addr})\) from \(A\), it finds the correct position label \(\text{pos}\) for \(\text{addr}\) and calls Path ORAM’s (or Circuit ORAM’s) \(\text{data} \leftarrow \text{Read}(\text{addr}, \text{pos})\) algorithm and returns \(\text{data}\) to \(A\).
- At the end of the query, \(C\) returns to \(A\) the access patterns made by the Path ORAM (or Circuit ORAM) algorithm.

The following theorem holds for both Path ORAM and Circuit ORAM (with different constants inside the \(\Omega\)-notation):

\[ \text{Theorem: } \text{Path ORAM and Circuit ORAM provide } \Omega(\log N) \text{ and } \Omega(\log \log N) \text{ security, respectively.} \]

This concludes the detailed overview of the non-recursive Path ORAM and Circuit ORAM, highlighting their key differences and performance characteristics.