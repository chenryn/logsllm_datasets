每当一个 Redis 命令需要发送数据库通知的时候，该命令的实现函数就会调用 notify-
event、keys 和 dbid 分别是事件的名称、产生事件的键，以及产生事件的数据库号
以下是另一-个例子，展示了DEL命令的实现函数 delCommand 的其中一部分代码:
当 SADD命令至少成功地向集合添加了一个集合元素之后，命令就会发送通知，该通知
例如，以下是 SADD 命令的实现函数 saddCommand 的其中一部分代码：
函数的tYpe 参数是当前想要发送的通知的类型，程序会根据这个值来判断通知是否
voi delCommand(redisClient *c) {
void saddCommand(redisclient *c) [
void notifyKeyspaceEvent (int type, char *event, robj *key, int dbid);
发送数据库通知的功能是由 notify.c/notifyKeyspaceEvent 函数实现的：
在接下来的内容中，我们来看看数据库通知功能的实现原理。
/}遍历所有输入键
int deleted=0,j;
if(
！/如果至少有一个元素被成功添加，那么执行以下程序
!...
notifyKeyspaceEvent (REDIS_NOTIFY_sET,"sadd",c->argv [1],c->db->id) ;
！1发送事件通知
!.··
(added)(
(dbDelete(c->db,c->argv[j!)) (
notifyKeyspaceEvent (REDIS_NOTIFY_GENERIC.
/1删除键成功，发送通知
！...
第9章
数
库
·115
---
## Page 120
116
9.8.2
函数的实现。
delCommand 类似，只是给定的参数不同，接下来我们来看看 notifyKeyspaceEvent
这是执行 DEL 命令所产生的通知)。
的类型为 REDIS_NOTIFY_GENERIC（表示这是一个通用类型的通知），名称为 del（表示
●第二部分单机数据库的实现
其他发送通知的函数调用 notifyKeyspaceEvent 函数的方式也和 saddCommand
notifyKeyspaceEvent 函数执行以下操作:
以下是 noti fyKeyspaceEvent 函数的伪代码实现:
def notifyKeyspaceEvent(type, event, key, dbid) :
在 delCommand 函数中，函数遍历所有输人键，并在删除键成功时，发送通知，通知
发送通知的实现
if server.notify_keyspace_events & REDIS_NOTIFY _KEYEVENT:
#发送键事件通知
if server.notify_keyspace_events & REDIs _NOTIFY_ KEYSPACE:
#发送键空间通知
if not (server.notify_keyspace_events & type)
如果给定的通知不是服务器允许发送的通知，那么直接返！
!!...
pubsubPublishMessage(chan, key)
发送通知
pubsubPublishMessage (chan, event)
#内容为键所发生的事件
return
chan
构建频道名字
#发送通知
#构建频道名字
#将通知发送给频道
!.··
keyevent@ (dbid)_: (event )". format (dbid=dbid,event=event)
"_keyspace@ (dbid) __:(key)". format (dbid=dbid, key-key)
:(pt:-daoedstax
回
---
## Page 121
9.9
pubsubPublishMessage 函数具体的实现细节可以参考第 18章。
等同于执行PUBLISH命令，订阅数据库通知的客户端收到的信息就是由这个函数发出的，
发送事件通知。
发送键空间通知，如果允许的话，程序就会构建并发送事件通知。
么函数会直接返回，不做任何动作。
events 选项所设置的值，如果给定的通知类型type 不是服务器允许发送的通知类型，那
另外，pubsubPublishMes sage 函数是 PUBLISH命令的实现函数，执行这个函数
2）如果给定的通知是服务器允许发送的通知，那么下一步函数会检测服务器是否允许
3）最后，函数检测服务器是否允许发送键事件通知，如果允许的话，程序就会构建并
口从服务器即使发现过期键也不会自作主张地删除它，而是等待主节点发来DEL命令，
口 Redis 使用惰性删除和定期删除两种策略来删除过期的键：性删除策略只在碰到过
 expires 字典的键指向数据库中的某个键,
口
口 数据库主要由 dict 和expires 两个字典构成，其中 dict 字典负责保存键值对，
口 客户端通过修改目标数据库指针，让它指向 redisServer.db 数组中的不同元素
口 Redis 服务器的所有数据库都保存在 redisServer.db 数组中，而数据库的数量则
口
D
D
10
重点回顾
当 Redis 命令对数据库进行修改之后，服务器会根据配置向客户端发送数据库通知。
删除过期键。
1
数据库的键总是一个字符串对象，而值则可以是任意一种 Redis 对象类型，包括字
1
由 redi sServer.dbnum 属性保存。
这种统一、中心化的过期键删除策略可以保证主从服务器数据的一致性。
，
当主服务器删除一个过期键之后，它会向所有从服务器发送一条DEL命令，显式地
显式地删除过期键。
当一个过期键被删除之后，服务器会追加一条DEL命令到现有AOF 文件的末尾
执行BGREWRITEAOF命令所产生的重写AOF文件不会包含已经过期的键。
期键时才进行删除操作，定期删除策略则每隔一段时间主动查找并删除过期键。
期时间是一个以毫秒为单位的UNIX时间戳。
哈希表键、集合键、列表键和有序集合键。
符串对象、哈希表对象、集合对象、列表对象和有序集合对象，分别对应字符串键、
因为数据库由字典构成，所以对数据库的操作都是建立在字典操作之上的。
而éxpires 字典则负责保存键的过期时间。
一
来切换不同的数据库。
，而值则记录了数据库键的过期时间，过
第9章数据库117
---
## Page 122
服务器的计算机停机，但只要RDB文件仍然存在，Redis 服务器就可以用它来还原数据库
原生成 RDB 文件时的数据库状态，如图 10-3所示。
个时间点上的数据库状态保存到一-个 RDB文件中，如图 10-2 所示。
数据库状态保存到磁盘里面，避免数据意外丢失。
里面，那么一旦服务器进程退出，服务器中的数据库状态也会消失不见。
法将储存在内存中的数据库状态保存到磁盘
据库状态储存在内存里面，所以如果不想办
状态。
及数据库中的键值对就是该服务器的数据库
非空数据库的 Redis 服务器，这三个数据库以
们的键值对统称为数据库状态。
空数据库中又可以包含任意个键值对，为了方便起见，我们将服务器中的非空数据库以及它
RDB 持久化既可以手动执行，也可以根据服务器配置选项定期执行，该功能可以将某
为了解决这个问题，Redis 提供了 RDB 持久化功能，这个功能可以将 Redis 在内存中的
RDB 持久化功能所生成的 RDB 文件是一个经过压缩的二进制文件，通过该文件可以还
因为 Redis 是内存数据库，它将自己的数
举个例子，图10-1展示了一个包含三个
因为 RDB 文件是保存在硬盘里面的，所以即使 Redis 服务器进程退出，甚至运行 Redis
Redis 是一个键值对数据库服务器，服务器中通常包含着任意个非空数据库，而每个非
图 10-2将数据库状态保存为 RDB文件
RDB持久化
第10章
保存为
图 10-3用 RDB文件来还原数据库状态
k3
k2
数据库0
v3
2
[v1
图10-1数据库状态示例
Redis服务器
还原RDB文件
k3
k2
k1
数据库1
k3
k2
数据库2
3
2
---
## Page 123
会以不同的方式调用这个函数，通过以下伪代码可以明显地看出这两个命令之间的区别：
后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求：
期间，服务器不能处理任何命令请求：
10.1
件的知识投人到实际应用中。
各个组成部分，并说明这些部分的结构和含义。
命令的实现方式。
状态。
在本章的最后，我们将对实际的 RDB 文件进行分析和解读，将之前学到的关于 RDB 文
本章首先介绍 Redis 服务器保存和载人 RDB文件的方法，重点说明 SAVE 命令和 BGSAVE
和 SAVE命令直接阻塞服务器进程的做法不同，BGSAVE命令会派生出一个子进程，然
SAVE 命令会阻塞 Redis 服务器进程，直到 RDB 文件创建完毕为止，在服务器进程阻塞
有两个 Redis 命令可以用于生成RDB文件，
在介绍完关于保存和载人 RDB 文件方面的内容之后，我们会详细分析 RDB 文件中的
def BGSAVE():
def SAVE():
创建 RDB 文件的实际工作由rdb.c/rdbSave函数完成，SAVE 命令和BGSAVE命令
Background saving started
redis> BGSAVE
redis> SAVE
之后，本章会继续介绍 Redis 服务器自动保存功能的实现原理。
elif pid > 0: 
#创建子进程
 RDB 文件的创建与载入
else:
if pid == 0:
pid = fork()
rdbSave ()
#创建 RDB 文件
父进程继续处理命令请求，并通过轮询等待子进程的信号
#完成之后向父进程发送信号
rdbSave ()
鲁子进程负责创建 RDB 文件
//派生子进程，并由子进程创建RDB文件
// 等待直到 RDB 文件创建完毕
一个是SAVE，另一个是BGSAVE。
第10章RDB持久化·119
---
## Page 124
120·第二部分单机数据库的实现
10.1.2
被处理。
行时，客户端发送的所有命令请求都会被拒绝。
10.1.1
之间的关系可以用图10-5 表示。
是服务器在成功载人 RDB文件之后打印的：
务器在启动时检测到 RDB 文件存在，它就会自动载人 RDB 文件。
务器启动时自动执行的，所以 Redis 并没有专门用于载人 RDB 文件的命令，只要 Redis 服
前面提到过，当 SAVE 命令执行时，Redis 服务器会被阻塞，所以当 SAVE 命令正在执
只有在服务器执行完SAVE 命令、重新开始接受命令请求之后，客户端发送的命令才会
以下是Redis 服务器启动时打印的日志记录，其中第二条日志 DBloadedfrom disk:..．就
因为 BGSAVE 命令的保存工作是由子进程执行的，所以在子进程创建 RDB 文件的过程
图 10-4服务器载人文件时的判断流程
载人 RDB文件的实际工作由 rdb.c/rdbLoad 函数完成，这个函数和 rabSave 函数
服务器判断该用哪个文件来还原数据库状态的流程如图10-4所示。
口只有在AOF 持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。
口 如果服务器开启了AOF 持久化功能，那么服务器会优先使用AOF文件来还原数据
$ redis-server
和使用SAVE 命令或者BGSAVE命令创建RDB文件不同，RDB文件的载人工作是在服
另外值得一提的是，因为AOF文件的更新频率通常比RDB文件的更新频率高，所以：
[7379]
[7379]
[7379]
库状态。
SAVE命令执行时的服务器状态
BGSAVE命令执行时的服务器状态
载人AOF文件
已开启AOF持久化功能？
6379
30Aug
30Aug
30 Aug
handle_fork_error()
#处理出错情况
执行载人程序
服务器启动
 21:07:01.289 * The server is now ready to accept connections on port
21:07:01.289 *
 21:07:01.270 # Server started, Redis version 2.9.11
载人RDB文件
百
:DB 1oaded from disk: 0.018 seconds
图10-5创建和载人 RDB文件
rdbSave
RDB文件
---
## Page 125
就会执行BGSAVE命令。
置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE命令。
保存工作，所以 SAVE 命令会阻塞服务器，而 BGSAVE 命令则不会。
现方面的主要区别：SAVE命令由服务器进程执行保存工作，BGSAVE命令则由子进程执行
10.2自动间隔性保存
10.1.3RDB 文件载入时的服务器状态
个好主意。
发出两个子进程，并且这两个子进程都同时执行大量的磁盘写人操作，这怎么想都不会是一
命令在操作方面并没有什么冲突的地方，不能同时执行它们只是一个性能方面的考虑一—并
同时执行两个BGSAVE命令也会产生竞争条件。
两个rdbSave 调用，防止产生竞争条件。
止 SAVE命令和 BGSAVE命令同时执行是为了避免父进程（服务器进程）和子进程同时执行
服务器处理SAVE、BGSAVE、BGREWRITEAOF三个命令的方式会和平时有所不同。
中，Redis 服务器仍然可以继续处理客户端的命令请求，但是，在BGSAVE命令执行期间
用户可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器
首先，在 BGSAVE 命令执行期间，客户端发送的 SAVE命令会被服务器拒绝，服务器禁
在上一节，我们介绍了SAVE 命令和 BGSAVE 的实现方法，并且说明了这两个命令在实
其次，在 BGSAVE命令执行期间，客户端发送的BGSAVE 命令会被服务器拒绝，因为
举个例子，如果我们向服务器提供以下配置：
那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行：
因为BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设
服务器在载人 RDB文件期间，会一直处于阻塞状态，直到载人工作完成为止。
因为 BGREWRITEAOF和 BGSAVE两个命令的实际工作都由子进程执行，所以这两个
口服务器在300秒之内，对数据库进行了至少10次修改
口服务器在900秒之内，对数据库进行了至少1次修改。
save 300 10
save 900 1
口如果 BGREWRITEAOF命令正在执行，那么客户端发送的 BGSAVE命令会被服务器
口如果BGSAVE命令正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到
最后，BGREWRITEAOF和BGSAVE两个命令不能同时执行：
save 60 10000
拒绝。
BGSAVE命令执行完毕之后执行。
第10章RDB持久化·121
---
## Page 126
122·第二部分单机数据库的实现
saveparam 结构都保存了一个 save 选项设置的保存条件：
结构的 saveparams 属性：
选项，如果用户没有主动设置 save 选项，那么服务器会为 save 选项设置默认条件：
10.2.1
件，自动执行 BGSAVE 命令的。
服务器自动执行BGSAVE命令时打印出来的日志：
当 Redis 服务器启动时，用户可以通过指定配置文件或者传入启动参数的方式设置 save
那么服务器状态中的 saveparams 数组将会是图10-6所示的样子。
比如说，如果save选项的值为以下条件：
struct saveparam {
saveparams 属性是一个数组，数组中的每个元素都是一个 saveparam 结构，每个
接着，服务器程序会根据 save 选项所设置的保存条件，设置服务器状态redisServer
save 60 10000
struct redisServer {
save 60 10000
在本节接下来的内容中，我们将介绍 Redis 服务器是如何根据 save 选项设置的保存条
举个例子，以下是Redis服务器在60秒之内，对数据库进行了至少10000次修改之后，
save9001
save 9001
服务器在60秒之内，对数据库进行了至少10000次修改。
：
[5085]
[5189]
[5189]