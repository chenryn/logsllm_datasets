# 八、管理和监控归档的解决方案
构建在 Docker 上的应用本质上是可移植的，并且部署过程对于每个环境都是相同的。当您通过系统测试和用户测试将您的应用提升到产品时，您将每次都使用相同的工件。您在生产中使用的 Docker 映像与在测试环境中签署的版本化映像完全相同，任何环境差异都可以在编写文件覆盖、Docker 配置对象和机密中捕获。
在后面的章节中，我将介绍持续部署如何与 Docker 一起工作，以便您的整个部署过程可以自动化。但是，当您采用 Docker 时，您将迁移到一个新的应用平台，并且生产路径不仅仅是部署过程。容器化应用的运行方式与部署在虚拟机或裸机服务器上的应用完全不同。在本章中，我将研究如何管理和监控在 Docker 中运行的应用。
当应用被移动到 Docker 时，您今天用来管理 Windows 应用的一些工具仍然可以使用，我将从查看一些示例开始。但是在容器中运行的应用有不同的管理需求和机会，本章的主要重点将是 Docker 特有的管理产品。
在本章中，我将使用简单的 Dockerized 应用向您展示如何管理容器，包括:
*   将**互联网信息服务** ( **IIS** )管理器连接到在容器中运行的 IIS 服务
*   将 Windows 服务器管理器连接到容器，以查看事件日志和功能
*   使用开源项目来查看和管理 Docker 集群
*   使用**通用控制平面** ( **UCP** )配合**Docker 企业**
# 技术要求
您将需要在 Windows 10 更新 18.09 或 Windows Server 2019 上运行 Docker 来完成示例。本章代码可在[https://github . com/six eyes/docker-on-window/tree/第二版/ch08](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch08) 获得
# 使用窗口工具管理容器
Windows 中的许多管理工具能够管理运行在远程机器上的服务。IIS 管理器、服务器管理器和 **SQL Server 管理工作室** ( **SSMS** )都可以连接到网络上的远程服务器进行检查和管理。
Docker 容器不同于远程机器，但它们可以设置为允许从这些工具进行远程访问。通常，您需要通过公开管理端口、启用 Windows 功能和运行 PowerShell cmdlets 来明确设置对该工具的访问。这些都可以在您的应用的 Dockerfile 中完成，我将介绍这些工具的设置步骤。
能够使用熟悉的工具可能会有帮助，但是你应该如何使用它们是有限制的；记住，容器是一次性的。如果您使用 IIS 管理器连接到 web 应用容器并调整应用池设置，当您使用新的容器映像更新应用时，该调整将会丢失。您可以使用图形工具检查正在运行的容器并诊断问题，但是您应该在 Dockerfile 中进行更改并重新部署。
# IIS 管理器
IIS web 管理控制台就是一个完美的例子。在 Windows 基本映像中，默认情况下不启用远程访问，但是您可以使用简单的 PowerShell 脚本进行配置。首先，需要安装 web 管理功能:
```
Import-Module servermanager
Add-WindowsFeature web-mgmt-service
```
然后，您需要使用注册表设置启用远程访问，并启动 web 管理 Windows 服务:
```
Set-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\WebManagement\Server -Name EnableRemoteManagement -Value 1
Start-Service wmsvc
```
您还需要 Dockerfile 中的`EXPOSE`指令，以允许流量进入预期端口`8172`上的管理服务。这将允许您连接，但是 IIS 管理控制台需要远程计算机的用户凭据。要支持这一点而不必将容器连接到**活动目录** ( **公元**)，您可以在设置脚本中创建用户和密码:
```
net user iisadmin "!!Sadmin*" /add
net localgroup "Administrators" "iisadmin" /add
```
There are security issues here. You need to create an administrative account in the image, expose a port, and run an additional service—all increasing the attack surface of your application. Instead of running the setup script in the Dockerfile, it would be better to attach to a container and run the script interactively if you need remote access.
我在一个映像中设置了一个简单的网络服务器，并打包了一个脚本，以便在`dockeronwindows/ch08-iis-with-management:2e`的 Dockerfile 中实现远程管理。我将从这个映像运行一个容器，发布 HTTP 和 IIS 管理端口:
```
docker container run -d -p 80 -p 8172 --name iis dockeronwindows/ch08-iis-with-management:2e
```
当容器运行时，我将在容器内执行`EnableIisRemoteManagement.ps1`脚本，该脚本使用 IIS 管理服务设置远程访问:
```
> docker container exec iis powershell \EnableIisRemoteManagement.ps1
The command completed successfully.
The command completed successfully.
Success Restart Needed Exit Code      Feature Result
------- -------------- ---------      --------------
True    No             Success        {ASP.NET 4.7, Management Service, Mana...
Windows IP Configuration
Ethernet adapter vEthernet (Ethernet):
   Connection-specific DNS Suffix  . : localdomain
   Link-local IPv6 Address . . . . . : fe80::583a:2cc:41f:f2e4%14
   IPv4 Address. . . . . . . . . . . : 172.27.56.248
   Subnet Mask . . . . . . . . . . . : 255.255.240.0
   Default Gateway . . . . . . . . . : 172.27.48.1
```
设置脚本以运行`ipconfig`结束，所以我可以看到容器的内部 IP 地址(我也可以从`docker container inspect`看到这一点)。
现在我可以在我的 Windows 主机上运行 IIS 管理器，选择开始页面|连接到服务器，并输入容器的 IP 地址。当 IIS 要求我进行认证时，我使用在设置脚本中创建的`iisadmin`用户的凭据:
![](img/789fefbf-e5c3-4b47-8fd9-1504fc86ae7e.png)
在这里，我可以像连接到远程服务器一样在应用池和网站层次结构中导航:
![](img/e325acd8-cdab-4b78-8936-40753d777478.png)
这是检查 IIS 或运行在 IIS 上的 ASP.NET 应用的配置的好方法。您可以检查虚拟目录设置、应用池和应用配置，但这应该仅用于调查。
如果我发现应用中的某些东西没有正确配置，我需要返回 Dockerfile 并修复它，而不是对运行的容器进行更改。当您将现有应用迁移到 Docker 时，这项技术非常有用。如果您在 Dockerfile 中安装了带有 web 应用的 MSI，您将看不到 MSI 实际上做了什么，但是您可以连接到 IIS 管理器并查看结果。
# SQL Server 管理工作室(SSMS)
SSMS 更简单，因为它使用标准的 SQL 客户端端口`1433`。您不需要公开任何额外的端口或启动任何额外的服务；来自微软和本书的 SQL Server 映像已经设置好了一切。您可以使用运行容器时使用的`sa`凭据使用 SQL Server 认证进行连接。
该命令运行一个 SQL Server 2019 快速版容器，向主机发布端口`1433`并指定`sa`凭证:
```
docker container run -d -p 1433:1433 `
 -e sa_password=DockerOnW!nd0ws `
 --name sql `
 dockeronwindows/ch03-sql-server:2e
```
这将发布标准的 SQL Server 端口`1433`，因此您有三个选项可以连接到容器内部的 SQL Server:
*   在主机上，使用`localhost`作为服务器名称。
*   在主机上，使用容器的 IP 地址作为服务器名称。
*   在远程机器上，使用 Docker 主机的机器名称或接入点地址。
我已经获取了我的容器的 IP 地址，所以在 SSMS 的 Docker 主机上，我只需指定 SQL 凭据:
![](img/0f7b835a-5d10-4170-ad44-d20e7d961ce5.png)
您可以使用与任何 SQL Server 相同的方式来管理此 SQL 实例—创建数据库、分配用户权限、恢复 Dacpacs 和运行 SQL 脚本。请记住，您所做的任何更改都不会影响映像，如果您希望新容器可以使用这些更改，您需要构建自己的映像。
如果您愿意，这种方法可以让您通过 SSMS 构建数据库，并在不安装和运行 SQL Server 的情况下让它在容器中工作。您可以完善您的模式，添加服务帐户和种子数据，然后将数据库导出为脚本。