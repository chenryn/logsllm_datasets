lated work below.
5.1 Web Security Vulnerabilities
Vulnerabilities can exist in both client-side browsers and
In
in the Web services with which they communicate.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
browsers, scripting languages, such as JavaScript and VB-
Script, are a major source of security ﬂaws. While individ-
ual ﬂaws can be addressed, the underlying security frame-
work of browser scripting is itself considered unsafe [2],
suggesting that ﬂaws arising from active content will be an
ongoing problem.
Java applet security is a well-studied topic [8]. Java’s
current stack-based security model [33] is signiﬁcantly
stronger its original model. However, Java applets have re-
cently taken a secondary role to on the Web other forms
of active content, such as Flash elements, ActiveX com-
ponents, and JavaScript. Tahoma uses VMs to provide
a language-independent safe execution environment for
browser instances. Even if a browser has security vulner-
abilities, Tahoma contains those ﬂaws within the VM sand-
box.
Web services are prone to attack from buffer over-
runs, SQL injection attacks, and faulty access control poli-
cies. Improving Web service security is an active research
topic [25, 13] beyond the scope of this paper.
5.2 Sandboxes
Multiple approaches for containing code within sand-
boxes [21] have been explored, including OS system call
interposition [6, 11], ﬁne-grained capability-based sys-
tems [27], intra-process domains [7], and virtual machine
monitors [4, 34] or hypervisors [19].
In addition to ex-
ploring mechanisms, researchers have explored appropri-
ate policies and usage models. MAPbox [1] deﬁnes a set
of canonical application class labels (such as compiler, net-
work client, or server) and appropriate sandboxes for them
and relies on the user to classify programs according to
those labels. WindowBox [3] provides users with durable,
isolated Windows desktops, each associated with different
roles or security levels (e.g., work, home, or play). Tahoma
uses the Xen VMM to implement virtual machine sand-
boxes, each containing one Web browser instance. No shar-
ing is permitted between browser instances except through
Tahoma’s narrow browser system call API.
GreenBorder [12] provides a sandboxed environment
within Windows for the Internet Explorer and Outlook ap-
plications. GreenBorder works by virtualizing access to
Windows resources such as the ﬁle system or the registry,
and redirecting modiﬁcations of these resources to virtual-
ized copies. By permitting users to “ﬂush” these changes,
any harmful side-effects from malicious content can be
cleaned. GreenBorder visually separate applications run-
ning within the sandbox from trusted applications, and pro-
vides some degree of auditing and reporting. Tahoma also
provides a sandboxed environment for Web browsers, but
Tahoma additionally isolates Web applications from each
other. As well, Tahoma permits Web services to customize
the browsers used to access them, and to control which re-
mote sites their browser instances can access.
5.3 Safely Executing Downloaded Appli-
cations
Tahoma shares the popular vision of making executable
content available on the Internet for users to download and
run safely.
Jaeger et al. [15] describe a distributed sys-
tem for authenticating and executing content from remote
principals. They provide a rich policy structure for assign-
ing access rights to local resources; in contrast, Tahoma
uses the shared-nothing abstraction of VMs to isolate down-
loaded browser instances from each other and from the host
OS. Web browsers support the safe execution of Java ap-
plets [8]. Applets have similarities to Tahoma browser in-
stances, though browser instances can be written in any lan-
guage, as their execution environment is a hardware VM.
The Collective project [22] encapsulates collections of
applications within VMware [29] virtual machines and
ships these compute “appliances” over the network to users.
Tahoma is similar in that browser instances are encapsulated
within VMs and downloaded to users. However, Tahoma’s
browser operating system mediates the access of browser
instances to local host resources and remote Web services.
SubOS assigns “sub-user IDs” to downloaded objects.
Processes that access these objects inherit the restricted ac-
cess rights of the associated sub-user IDs [14]. Using this
mechanism, this project re-factored a Web browser so that
isolation is delegated to SubOS rather than the browser
itself. This work has similar principles to ours, though
Tahoma uses stronger VM sandboxes, isolates browsers and
Web objects based on the Web applications to which they
belong, and provides a trusted window manager and other
user tools.
5.4 Trust and User Interfaces
Untrusted executable content can attack users by spoof-
ing the user interface of trusted executables, fooling the user
into providing sensitive information. Researchers have ex-
plored the potential for Web content to act as a trojan horse,
spooﬁng local OS interfaces or remote services [31, 9].
Modern “phishing” attacks are an increasingly prevalent
form of this attack.
The compartmented mode workstation (CMW) speciﬁ-
cation [35] provides requirements for enforcing mandatory
access control in a multi-level or compartmented security
system, and describes how to label data and windows with
sensitivity labels. The trusted paths work by Ye et al. [36]
attempts to label Web browser windows in an unforgeable
way by clearly separating graphical content provided by re-
mote servers from status information provided by the local
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
browser. To prevent remote servers from spooﬁng status in-
formation, the trusted paths architecture uses synchronized
random dynamic boundaries, in which the color of win-
dow borders is randomly shifted but synchronized with a
reference window. The EROS [28] trusted window system
(EWS) solves the complementary problem of denying un-
trusted applications the authority to disrupt trusted UI paths.
Tahoma uses many of the mechanisms and window la-
beling techniques from this body of work, but adapts them
to a virtual machine environment. Like EWS, Tahoma
browser instances use shared memory to convey pixel in-
formation to the trusted BOS window manager. Tahoma’s
windowing environment was also partially inspired by the
desktop operating environment winder server (DoPE) [10].
6 Conclusions
Over the last decade, the Web has evolved from a reposi-
tory of interconnected, static content to a delivery system
for complex, distributed applications and active content.
As a result, modern browsers now serve as de facto oper-
ating systems that must manage dynamic and potentially
malicious applications. Unfortunately, browsers have not
adapted to their new role, leaving the user vulnerable to
many potential threats.
This paper presented the architecture and implementa-
tion of Tahoma, a new Web browsing system intended to
improve safety and security for Web users. In the Tahoma
architecture, each Web application is isolated within its own
virtual machine sandbox, removing the need to trust Web
browsers and the services they access. Virtual machine
sandboxes contain the damage that can be caused by ma-
licious or vulnerable browsers. Consequently, Tahoma pro-
tects other applications, resources, and the user’s host OS
from these dangers.
We introduced a new trusted software layer in Tahoma,
the browser operating system (BOS), which manages Web
applications and their virtual machine sandboxes. To limit
damage from hijacked browsers, the BOS restricts the set
of sites with which each Web application can communicate.
The BOS gives users increased visibility and control over
downloaded Web applications. We implemented Tahoma
on the Xen virtual machine monitor. Our security evalua-
tion shows that Tahoma can prevent or contain 87% of the
vulnerabilities that have been identiﬁed in the widely used
Mozilla browser. Our performance evaluation demonstrates
that users need not sacriﬁce performance for the beneﬁts of
stronger isolation and safety.
7 Acknowledgments
The authors are grateful for the insightful feedback pro-
vided by the anonymous reviewers, and for helpful dis-
cussions with Brian Bershad, Ed Lazowska, and Andrew
Schwerin. This work was supported in part by the National
Science Foundation under grants CNS-0430477, CCR-
0326546, and ANI-0132817, by an Alfred P. Sloan Founda-
tion Fellowship, by the Wissner-Slivka Chair, by the Torode
Family Endowed Career Development Professorship, and
by gifts from Intel Corporation and Nortel Networks.
References
[1] A. Acharya and M. Raje. MAPbox: Using parameterized
behavior classes to conﬁne untrusted applications. In Pro-
ceedings of the Ninth USENIX Security Symposium, Denver,
CO, August 2000.
[2] V. Anupam and A. Mayer. Security of web browser scripting
languages: Vulnerabilities, attacks, and remedies. In Pro-
ceedings of the Seventh USENIX Security Symposium, San
Antonio, TX, January 1998.
[3] D. Balfanz and D. R. Simon. Windowbox: A simple secu-
rity model for the connected desktop. In Proceedings of the
Fourth USENIX Windows Systems Symposium, Seattle, WA,
August 2000.
[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and
the art of virtualization. In Proceedings of the 19th Sympo-
sium on Operating System Principles (SOSP 2003), Bolton
Landing, NY, October 2003.
[5] M. Bartel, J. Boyer, B. Fox, M. LaMacchia, and E. Si-
mon. XML-signature syntax and processing. W3C rec-
ommendation, published at http://www.w3.org/TR/
xmldsig-core/, February 2002.
[6] A. Berman, V. Bourassa, and E. Selberg. TRON: Process-
speciﬁc ﬁle protection for the UNIX operating system. In
Proceedings of the 1995 Winter USENIX Conference, New
Orleans, LA, January 1995.
[7] C. Cowan, S. Beattie, G. Kroach-Hartman, C. Pu, P. Wagle,
and V. Gligor. Subdomain: Parsimonious server security.
In Proceedings of the 14th USENIX Systems Administra-
tion Conference (LISA 2000), New Orleans, LA, December
2000.
[8] D. Dean, E. W. Felten, D. S. Wallach, and D. Balfanz. Java
security: Web browsers and beyond. Chapter 7 of “Internet
besieged: Countering cyberspace scofﬂaws”. ACM Press,
New York, NY, 1997.
[9] E. W. Felten, D. Balfanz, D. Dean, and D. S. Wallach. Web
spooﬁng: an Internet con game. In Proceedings of the 20th
National Information Systems Security Conference, Balti-
more, MD, October 1996.
[10] N. Feske and H. H¨artig. DOpE – a window server for real-
time and embedded systems.
In Proceedings of the 24th
IEEE International Real-Time Systems Symposium, Cancun,
Mexico, December 2003.
[11] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A
secure environment for untrusted helper applications.
In
Proceedings of the Sixth USENIX Security Symposium, San
Jose, CA, July 1996.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
[29] J. Sugerman, G. Venkitachalam, and B.-H. Lim. Virtualiz-
ing I/O devices on VMware workstation’s hosted virtual ma-
chine monitor. In Proceedings of the 2001 Annual USENIX
Technical Conference, Boston, MA, June 2001.
[30] S. L. Teal and A. I. Rudnicky. A performance model of
system delay and user strategy selection.
In Proceedings
of the SIGCHI conference on Human factors in computing
systems, Monterey, CA, May 1992.
[31] J. Tygar and A. Whitten. WWW electronic commerce and
In The Second USENIX Workshop on
Java trojan horses.
Electronic Commerce Proceedings, Oakland, CA, Novem-
ber 1996.
[32] VMware,
virtual ma-
http://www.vmware.com/vmtn/vm/
appliance
Browser
chine.
browserapp.html, October 2005.
Inc.
[33] D. S. Wallach, D. Balfanz, D. Dean, and E. W. Felten. Ex-
tensible security architectures for Java. In Proceedings of the
Sixteenth ACM Symposium on Operating Systems Principles
(SOSP ’97), Saint Malo, France, October 1997.
[34] A. Whitaker, M. Shaw, and S. D. Gribble. Scale and Per-
formance in the Denali Isolation Kernel. In Proceedings of
the 5th Symposium on Operating Systems Design and Imple-
mentation (OSDI ’02), Boston, MA, December 2002.
[35] J. P. Woodward. Security requirements for system high and
compartmented mode workstations. Technical Report MTR
9992, The MITRE Corporation, 1987.
[36] Z. Ye and S. Smith. Trusted paths for browsers.
In Pro-
ceedings of the Eleventh USENIX Security Symposium, San
Francisco, CA, August 2002.
[37] ZDNet UK.
Firefox phishing vulnerability discov-
http://news.zdnet.co.uk/internet/
ered.
security/0,39020375,39183106,00.htm.
[12] Green Border Technologies. GreenBorder desktop DMZ so-
lutions. http://www.greenborder.com, November
2005.
[13] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. T. Lee, and
S.-Y. Kuo. Securing Web application code by static analysis
and runtime protection. In Proceedings of the Thirteenth In-
ternational World Wide Web Conference (WWW 2004), New
York, NY, May 2004.
[14] S. Ioannidis and S. M. Bellovin. Building a secure Web
browser. In Proceedings of the FREENIX track of the 2001
USENIX Annual Technical Conference, Boston, MA, June
2001.
[15] T. Jaeger, A. D. Rubin, and A. Prakash. Building sys-
tems that ﬂexibly control downloaded executable content. In
Proceedings of the Sixth USENIX Security Symposium, San
Jose, CA, July 1996.
[16] R. J. Kaes and S. Young.
The tinyproxy lightweight
HTTP proxy. http://tinyproxy.sourceforge.
net, August 2004.
[17] P.-H. Kamp and R. N. Watson. Jails: Conﬁning the omnipo-
tent root. In Proceedings of the Second International System
Administration and Networking Conference (SANE), Maas-
tricht, The Netherlands, May 2000.
[18] Konqueror. http://www.konqueror.org.
[19] T. Mitchem, R. Lu, and R. O’Brien. Using kernel hypervi-
sors to secure applications. In Proceedings of the 13th An-
nual Computer Security Applications Conference (ACSAC
’97), San Diego, CA, December 1997.
[20] MPlayer. http://www.MPlayerHQ.hu.
[21] D. S. Peterson, M. Bishop, and R. Pandey. A ﬂexible con-
tainment mechanism for executing untrusted code. In Pro-
ceedings of the Eleventh USENIX Security Symposium, San
Francisco, CA, August 2002.
[22] C. Sapuntzakis and M. S. Lam. Virtual appliances in the
Collective: A road to hassle-free computing. In Proceedings
of the Ninth Workshop on Hot Topics in Operating Systems
(HotOS IX), Lihue, HI, May 2003.
[23] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and
analysis of spyware in a university environment. In Proceed-
ings of the First Symposium on Networked Systems Design
and Implementation (NSDI ’04), San Francisco, CA, March
2004.
[24] B. R. Schatz. NCSA Mosaic and the World Wide Web:
Science,
Global hypermedia protocols for the Internet.
265:841–1004, August 1994.
[25] D. Scott and R. Sharp. Abstracting application-level Web
security. In Proceedings of the Eleventh International World
Wide Web Conference (WWW 2004), Honolulu, HI, May
2002.
[26] Secunia. Microsoft Internet Explorer window injection
vulnerability. http://secunia.com/advisories/
13251/, December 2004.
[27] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: a fast
capability system. In Proceedings of the 17th ACM Sympo-
sium on Operating Systems Principles (SOSP’99), Kiawah
Island, SC, December 1999.
[28] J. S. Shaprio, J. Vanderburgh, E. Northup, and D. Chizma-
dia. Design of the EROS trusted window system. In Pro-
ceedings of the Thirteeenth USENIX Security Symposium,
San Diego, CA, August 2004.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply.