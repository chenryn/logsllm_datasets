Chapter 5 for more details on these and other attacks.
3.1.5 If the application uses the ASP.NET ViewState, test to confi rm whether
this can be tampered with or whether it contains any sensitive infor-
mation. Note that the ViewState may be used differently on different
application pages.
3.1.5.1 Use the ViewState analyzer in Burp Suite to confi rm whether
the EnableViewStateMac option has been enabled, meaning
that the ViewState’s contents cannot be modifi ed.
3.1.5.2 Review the decoded ViewState to identify any sensitive data it
contains.
3.1.5.3 Modify one of the decoded parameter values and reencode and
submit the ViewState. If the application accepts the modifi ed
value, you should treat the ViewState as an input channel for
introducing arbitrary data into the application’s processing.
Perform the same testing on the data it contains as you would
for any other request parameters.
3.2 Test Client-Side Controls Over User Input
3.2.1 Identify any cases where client-side controls such as length limits and
JavaScript checks are used to validate user input before it is submitted
cc2211..iinndddd 880011 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 802
802 Chapter 21 n A Web Application Hacker’s Methodology
to the server. These controls can be bypassed easily, because you can
send arbitrary requests to the server. For example:
...
3.2.2 Test each affected input fi eld in turn by submitting input that would
ordinarily be blocked by the client-side controls to verify whether these
are replicated on the server.
3.2.3 The ability to bypass client-side validation does not necessarily represent
any vulnerability. Nevertheless, you should review closely what vali-
dation is being performed. Confi rm whether the application is relying
on the client-side controls to protect itself from malformed input. Also
confi rm whether any exploitable conditions exist that can be triggered
by such input.
3.2.4 Review each HTML form to identify any disabled elements, such as
grayed-out submit buttons. For example:
If you fi nd any, submit these to the server, along with the form’s other
parameters. See whether the parameter has any effect on the server’s
processing that you can leverage in an attack. Alternatively, use an
automated proxy rule to automatically enable disabled fi elds, such as
Burp Proxy’s “HTML Modifi cation” rules.
3.3 Test Browser Extension Components
3.3.1 Understand the Client Application’s Operation
3.3.1.1 Set up a local intercepting proxy for the client technology under review,
and monitor all traffi c passing between the client and server. If data is
serialized, use a deserialization tool such as Burp’s built-in AMF support
or the DSer Burp plug-in for Java.
3.3.1.2 Step through the functionality presented in the client. Determine any
potentially sensitive or powerful functions, using standard tools within
the intercepting proxy to replay key requests or modify server responses.
3.3.2 Decompile the Client
3.3.2.1 Identify any applets employed by the application. Look for any of the
following fi le types being requested via your intercepting proxy:
n .class, .jar : Java
n .swf : Flash
n .xap : Silverlight
cc2211..iinndddd 880022 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 803
Chapter 21 n A Web Application Hacker’s Methodology 803
You can also look for applet tags within the HTML source code of
application pages. For example:
3.3.2.2 Review all calls made to the applet’s methods from within the invoking
HTML, and determine whether data returned from the applet is being
submitted to the server. If this data is opaque (that is, obfuscated or
encrypted), to modify it you will probably need to decompile the applet
to obtain its source code.
3.3.2.3 Download the applet bytecode by entering the URL into your browser,
and save the fi le locally. The name of the bytecode fi le is specifi ed in
thecode attribute of the applet tag. The fi le will be located in the direc-
tory specifi ed in the codebase attribute if this is present. Otherwise, it
will be located in the same directory as the page in which the applet tag
appears.
3.3.2.4 Use a suitable tool to decompile the bytecode into source code. For
example:
C:\>jad.exe input.class
Parsing input.class... Generating input.jad
Here are some suitable tools for decompiling different browser exten-
sion components:
n Java — Jad
n Flash — SWFScan, Flasm/Flare
n Silverlight — .NET Reflector
If the applet is packaged into a JAR, XAP, or SWF fi le, you can unpack
it using a standard archive reader such as WinRar or WinZip.
3.3.2.5 Review the relevant source code (starting with the implementation of
the method that returns the opaque data) to understand what processing
is being performed.
3.3.2.6 Determine whether the applet contains any public methods that can be
used to perform the relevant obfuscation on arbitrary input.
3.3.2.7 If it doesn’t, modify the applet’s source to neutralize any validation it
performs or to allow you to obfuscate arbitrary input. You can then
recompile the source into its original fi le format using the compilation
tools provided by the vendor.
3.3.3 Attach a Debugger
3.3.3.1 For large client-side applications, it is often prohibitively diffi cult to
decompile the whole application, modify it, and repackage it without
cc2211..iinndddd 880033 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 804
804 Chapter 21 n A Web Application Hacker’s Methodology
encountering numerous errors. For these applications it is generally
quicker to attach a runtime debugger to the process. JavaSnoop does this
very well for Java. Silverlight Spy is a freely available tool that allows
runtime monitoring of Silverlight clients.
3.3.3.2 Locate the key functions and values the application employs to drive
security-related business logic, and place breakpoints when the targeted
function is called. Modify the arguments or return value as needed to
affect the security bypass.
3.3.4 Test ActiveX controls
3.3.4.1 Identify any ActiveX controls employed by the application. Look for
any.cab fi le types being requested via your intercepting proxy, or look
for object tags within the HTML source code of application pages. For
example:
3.3.4.2 It is usually possible to subvert any input validation performed within
an ActiveX control by attaching a debugger to the process and directly
modifying data being processed or altering the program’s execution
path. See Chapter 5 for more details about this kind of attack.
3.3.4.3 It is often possible to guess the purpose of different methods that an
ActiveX control exports based on their names and the parameters
passed to them. Use the COMRaider tool to enumerate the methods
exported by the control. Test whether any of these can be manipu-
lated to affect the control’s behavior and defeat any validation tests
it implements.
3.3.4.4 If the control’s purpose is to gather or verify certain information about
the client computer, use the Filemon and Regmon tools to monitor the
information the control gathers. It is often possible to create suitable
items within the system registry and fi lesystem to fi x the inputs used
by the control and therefore affect its behavior.
3.3.4.5 Test any ActiveX controls for vulnerabilities that could be exploited to
attack other users of the application. You can modify the HTML used
to invoke a control to pass arbitrary data to its methods and monitor
the results. Look for methods with dangerous-sounding names, such
asLaunchExe. You can also use COMRaider to perform some basic fuzz
testing of ActiveX controls to identify fl aws such as buffer overfl ows.
cc2211..iinndddd 880044 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 805
Chapter 21 n A Web Application Hacker’s Methodology 805
4 Test the Authentication Mechanism
4.1. Understand the mechanism
Data attacks Special functions Credential handling Authentication
logic
4.2. Test password 4.5. Test account 4.8. Test username 4.13.1. Test for
quality recovery uniqueness fail-open logic
4.3. Test for 4.13.2. Test
4.6. Test “remember 4.9. Test credential
username multistage
me” predictability
enumeration processes
4.7. Test
4.4. Test for 4.10. Check for
impersonation
password guessing unsafe transmission
functions
4.11. Check for
unsafe distribution
4.12. Check for
insecure storage
4.14. Exploit vulnerabilities
Figure 21-5: Testing the authentication mechanism
4.1 Understand the Mechanism
4.1.1 Establish the authentication technologies in use (for example, forms,
certifi cates, or multifactor).
4.1.2 Locate all the authentication-related functionality (including login,
registration, account recovery, and so on).
4.1.3 If the application does not implement an automated self-registration
mechanism, determine whether any other means exists of obtaining
several user accounts.
cc2211..iinndddd 880055 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 806
806 Chapter 21 n A Web Application Hacker’s Methodology
4.2 Test Password Quality
4.2.1 Review the application for any description of the minimum quality rules
enforced on user passwords.
4.2.2 Attempt to set various kinds of weak passwords, using any self-registration
or password change functions to establish the rules actually enforced.
Try short passwords, alphabetic characters only, single-case characters
only, dictionary words, and the current username.
4.2.3 Test for incomplete validation of credentials. Set a strong and complex
password (for example, 12 characters with mixed-case letters, numerals,
and typographic characters). Attempt to log in using different varia-
tions on this password, by removing the last character, by changing a
character’s case, and by removing any special characters. If any of these
login attempts is successful, continue experimenting systematically to
identify what validation is actually being performed.
4.2.4 Having established the minimum password quality rules, and the extent
of password validation, identify the range of values that a password-
guessing attack would need to employ to have a good probability of
success. Attempt to locate any built-in accounts that may not have been
subject to the standard password complexity requirements.
4.3 Test for Username Enumeration
4.3.1 Identify every location within the various authentication functions
where a username is submitted, including via an on-screen input fi eld,
a hidden form fi eld, or a cookie. Common locations include the primary
login, self-registration, password change, logout, and account recovery.
4.3.2 For each location, submit two requests, containing a valid and an invalid
username. Review every detail of the server’s responses to each pair of
requests, including the HTTP status code, any redirects, information
displayed on-screen, any differences hidden in the HTML page source,
and the time taken for the server to respond. Note that some differences
may be subtle (for example, the same error message may contain minor
typographical differences). You can use the history function of your
intercepting proxy to review all traffi c to and from the server. WebScarab
has a function to compare two responses to quickly highlight any dif-
ferences between them.
4.3.3 If you observe any differences between the responses where a valid and
invalid username is submitted, repeat the test with a different pair of
values and confi rm that a systematic difference exists that can provide
a basis for automated username enumeration.
cc2211..iinndddd 880066 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 807
Chapter 21 n A Web Application Hacker’s Methodology 807
4.3.4 Check for any other sources of information leakage within the applica-
tion that may enable you to compile a list of valid usernames. Examples
are logging functionality, actual listings of registered users, and direct
mention of names or e-mail addresses in source code comments.
4.3.5 Locate any subsidiary authentication that accepts a username, and
determine whether it can be used for username enumeration. Pay
specifi c attention to a registration page that allows specifi cation of a
username.
4.4 Test Resilience to Password Guessing
4.4.1 Identify every location within the application where user credentials
are submitted. The two main instances typically are the main login
function and the password change function. The latter normally is a
valid target for password-guessing attacks only if an arbitrary username
can be supplied.
4.4.2 At each location, using an account that you control, manually send
several requests containing the valid username but other invalid
credentials. Monitor the application’s responses to identify any differ-
ences. After about 10 failed logins, if the application has not returned
a message about account lockout, submit a request containing valid
credentials. If this request succeeds, an account lockout policy prob-
ably is not in force.
4.4.3 If you do not control any accounts, attempt to enumerate or guess a
valid username, and make several invalid requests using this guess,
monitoring for any error messages about account lockout. Of course,
you should be aware that this test may have the effect of suspending or
disabling an account belonging to another user.
4.5 Test Any Account Recovery Function
4.5.1 Identify whether the application contains any facility for users to regain
control of their account if they have forgotten their credentials. This
is often indicated by a Forgot Your Password link near the main login
function.
4.5.2 Establish how the account recovery function works by doing a complete
walk-through of the recovery process using an account you control.
4.5.3 If the function uses a challenge such as a secret question, determine
whether users can set or select their own challenge during registration.
If so, use a list of enumerated or common usernames to harvest a list of
challenges, and review this for any that appear to be easily guessable.
cc2211..iinndddd 880077 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 808
808 Chapter 21 n A Web Application Hacker’s Methodology
4.5.4 If the function uses a password hint, perform the same exercise to har-
vest a list of password hints, and identify any that appear to be easily
guessable.
4.5.5 Perform the same tests on any account-recovery challenges that you per-
formed at the main login function to assess vulnerability to automated
guessing attacks.
4.5.6 If the function involves sending an e-mail to the user to complete the
recovery process, look for any weaknesses that may enable you to take
control of other users’ accounts. Determine whether it is possible to
control the address to which the e-mail is sent. If the message contains
a unique recovery URL, obtain a number of messages using an e-mail
address you control, and attempt to identify any patterns that may enable
you to predict the URLs issued to other users. Apply the methodology
described in step 5.3 to identify any predictable sequences.
4.6 Test Any Remember Me Function
4.6.1 If the main login function or its supporting logic contains a Remember
Me function, activate this and review its effects. If this function allows the
user to log in on subsequent occasions without entering any credentials,
you should review it closely for any vulnerabilities.
4.6.2 Closely inspect all persistent cookies that are set when the Remember Me
function is activated. Look for any data that identifi es the user explicitly
or appears to contain some predictable identifi er of the user.
4.6.3 Even where the data stored appears to be heavily encoded or obfuscated,
review this closely, and compare the results of remembering several very
similar usernames and/or passwords to identify any opportunities to
reverse-engineer the original data. Apply the methodology described
in step 5.2 to identify any meaningful data.
4.6.4 Depending on your results, modify the contents of your cookie in suit-
able ways in an attempt to masquerade as other users of the application.
4.7 Test Any Impersonation Function
4.7.1 If the application contains any explicit functionality that allows one
user to impersonate another, review this closely for any vulnerabilities
that may enable you to impersonate arbitrary users without proper
authorization.
4.7.2 Look for any user-supplied data that is used to determine the target
of the impersonation. Attempt to manipulate this to impersonate
cc2211..iinndddd 880088 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 809