I/DEBUG ( 49): a8db7a00 fbb2801a 4884621f c54c3f0a d8dc5d7b
I/DEBUG ( 49): a8db7a10 b5b09e01 b807b148 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): a8db7a20 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): a8db7a30 7a7a7a7a 00000000 0000000a 00000000
I/DEBUG ( 49): a8db7a40 7a7a7a7a 00000000 0000000a 00000000
I/DEBUG ( 49): a8db7a50 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): a8db7a60 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): a8db7a70 7a7a7a7a 41414141 00000026 0000000a
I/DEBUG ( 49): a8db7a80 b807bbd8 00000064 b807bc48 00000016
I/DEBUG ( 49): a8db7a90 00000003 a8db7a18 00000009 a8db79e8
I/DEBUG ( 49): a8db7aa0 b807bb68 00000000 c54c3f0a d8dc5d7b
I/DEBUG ( 49): a8db7ab0 a8db7ac8 af6357d0 b807b148 00000004
I/DEBUG ( 49):
...
I/DEBUG ( 49):
I/DEBUG ( 49): memory map around fault addr 41414141:
I/DEBUG ( 49): (no map below)
I/DEBUG ( 49): (no map for address)
I/DEBUG ( 49): a8b41000-a8cb8000 r-x /dev/ashmem/dalvik-jit-code
-cache (deleted)
The sequence AAAA translates to 41414141 in hex. This is used inside the supplied extra at a strategic position
and results in the CPU attempting to jump to this location, thus causing an error condition which the system
reports. This is a user-supplied address that comes directly from what we sent to this service from another
application. This basic buffer overflow vulnerability shows how the triggering of such a condition can be viewed
in logcat.
Attaching a Debugger
To start the exploitation process, attaching a debugger to the application at the time of the crash is essential.
Android contains a Just-In-Time debugging feature that you can use for this purpose. To configure this feature,
find the UID of the target application. Do this in drozer by observing the output of the app .package.info
module:
dz> run app.package.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
Application Label: Sieve
Process Name: com.mwr.example.sieve
Version: 1.0
Data Directory: /data/data/com.mwr.example.sieve
APK Path: /data/app/com.mwr.example.sieve-1.apk
UID: 10053
GID: [1028, 1015, 3003]
Shared Libraries: null
Shared User ID: null
Uses Permissions:
- android.permission.READ_EXTERNAL_STORAGE
- android.permission.WRITE_EXTERNAL_STORAGE
- android.permission.INTERNET
Defines Permissions:
- com.mwr.example.sieve.READ_KEYS
- com.mwr.example.sieve.WRITE_KEYS
You can now issue a command via an ADB shell that sets a property that causes a JIT debugger to attach to a
crashed process with UID 
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law. Type "show copying"
and "show warranty" for details.
This GDB was configured as "--host=x86_64-linux-gnu --target=arm-linux-android".
For bug reporting instructions, please see:
.
(gdb) target remote :5039
Remote debugging using :5039
0xb6f645cc in ?? ()
(gdb)
After it is successfully attached, the iterative process of crafting an exploit for this issue can begin. The
exploitation of this issue is out of the scope of this chapter. A thorough understanding of the architecture on
which you are writing the exploit (typically ARM on most Android devices) and knowledge of common
exploitation techniques is required. Chapter 8 shows the end product of exploiting an application using native
code and the tools that you can use post-exploitation. Exploiting this issue on a modern version of Android
using exploit mitigations such as stack canaries, NX, and full ASLR presents a huge challenge to any attacker.
On older versions of Android, a skilled exploit writer can still create an exploit for this issue with relative ease.
You can use other debuggers in the exploitation process. A paid option could be the android_server and
debugging capabilities provided by IDA Pro. A free debugger that has the look and feel of OllyDbg (a popular
debugger for Windows) is also available at http://www.gikir.com/. However, many exploit developers prefer to
just use GDB because it provides very powerful functionality. Beware—it is renowned for its intimidating
command-line interface for beginners.
Exploiting Misconfigured Package Attributes
Many attributes are available to set in the  tag found in the AndroidManifest.xml of an
application. All of these attributes may look harmless to the untrained eye. This section focuses on two
attributes that have a significant impact on the security of an application.
Application Backups
Since Android 4.0, backing up all applications, their data, and other shared data on the device (on an SD card for
example) on a non-rooted device is possible. The manifest attribute that controls whether a backup of the
application data is allowed or not is android:allowBackup. However, the default value of this attribute is true.
This is great from a usability point of view because application developers who are not even aware of this
attribute can still allow people using their app to back up their application data. From a security perspective, this
also means that application developers who are not aware of this attribute will allow the exposure of their
application data if physical access to a device running their application is obtained. To find applications that
allow backups to be made, use the app.package.backup drozer module. If a particular application is of interest
(like Sieve), you can use the module in the following manner:
dz> run app.package.backup -f com.mwr.example.sieve
Package: com.mwr.example.sieve
UID: 10053
Backup Agent: null
API Key: Unknown
The output shows that the android:allowBackup attribute is set to true for the application and that the contents
of its private data directory can be dumped using ADB. If the android:backupAgent attribute is set in the
manifest, it points to the class that extends BackupAgent and allows the developer to control this functionality to
a greater degree. If an application makes use of a custom backup agent, you would need to review the code of
the class stated in the manifest.
To back up an application, use the adb backup feature. To perform this action on Sieve you use the following
command:
$ adb backup com.mwr.example.sieve
Now unlock your device and confirm the backup operation.
After this, an activity launches and asks you to specify an encryption key. Leave the key field blank and tap Back
Up My Data. Figure 7.15 shows the presented activity.
Figure 7.15 The application backup activity
A file named backup.ab will be placed in your current working directory on your computer. The file format is a
TAR file that makes use of a DEFLATE algorithm for compression. This peculiar combination of algorithms has
been the subject of many forum posts. Nikolay Elenkov posted a simple way to convert an AB file back to a TAR
file at http://nelenkov.blogspot.de/2012/06/unpacking-android-backups.html. You can use the simple one-
liner provided in that article on the backup.ab file as shown here:
$ dd if=backup.ab bs=24 skip=1 | openssl zlib -d > backup.tar
88+1 records in
88+1 records out
2135 bytes (2.1 kB) copied, 0.000160038 s, 13.3 MB/s
$ tar xvf backup.tar
apps/com.mwr.example.sieve/_manifest
apps/com.mwr.example.sieve/db/database.db-journal
apps/com.mwr.example.sieve/db/database.db
apps/com.mwr.example.sieve/ef/Backup (2014-05-27 18-16-14.874).xml
This exposes all the application databases, any other files that reside in the application’s data directory, and the
contents of the application data directory on the SD card (/sdcard/Android/data/com.mwr.example.sieve/). This
once again emphasizes the importance of implementing encryption for files that remain on disk, even when
they are assumed to be protected.
WARNING
Some versions of openssl available in Linux distribution repositories have not been compiled with zlib
support. You can find an alternative one-liner in Python at http://blog.shvetsov.com/2013/02/access-
android-app-data-without-root.html; it is shown here:
$ dd if=backup.ab bs=1 skip=24 | python -c "import zlib,sys;
sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar
2135+0 records in
2135+0 records out
2135 bytes (2,1 kB) copied, 0,0037513 s, 569 kB/s
You can use a tool named Android Backup Extractor to automate this instead of using hairy one-liners. Find it at
https://github.com/nelenkov/android-backup-extractor.
In summary, an attacker with physical access to a device can get the data that resides in an application’s private
data directory provided that the application allows backups.
Debuggable Flag
During development an application needs to have a flag set in its manifest to tell the OS that a debugger is
allowed to attach to it. You can see this as an attribute in the  element in the manifest as
android:debuggable and set it to true or false. If this attribute does not exist in the manifest, the application is
not debuggable as this value defaults to false. If this value is set to true, whenever this application is active in
any form, it is looking for a UNIX socket named @jdwp-control. This socket is opened by the ADB server when
USB debugging is enabled.
To check whether an installed application is debuggable or not, in drozer use the app.package.debuggable
module. This module, as shown here, finds all debuggable packages on a device:
dz> run app.package.debuggable
...
Package: com.mwr.example.sieve
UID: 10053
Permissions:
- android.permission.READ_EXTERNAL_STORAGE
- android.permission.WRITE_EXTERNAL_STORAGE
- android.permission.INTERNET
...
Having an application that is set as debuggable is dangerous and can cause the exposure of the application’s file
as well as the execution of arbitrary code in the context of the application. This can be especially dangerous if
the debuggable application holds powerful permissions or runs as a privileged user.
In general, applications with the debuggable flag set can be exploited with physical access to a device that has
USB debugging enabled. To see which applications are active and connected to the debugging @jdwp-control
socket, use ADB as follows:
$ adb jdwp
4545
4566
This adb jdwp command gives the PIDs of the processes that you can debug. To map these to actual packages on
the device, you can use a simple combination of ps and grep:
$ adb shell ps | grep "4545\|4566"
app_115 4545 2724 147000 22612 ffffffff 00000000 S com.mwr.dz
app_115 4566 2724 144896 22324 ffffffff 00000000 S com.mwr.dz:remote
This shows that only the drozer package can actively be debugged at this time. The only reason that this shows is
because the drozer service was running at the time that the device was queried. Only applications that are active
in some way will connect to the @jdwp-control socket; you would have to manually start other debuggable
applications that are discovered to connect to the debugger. For instance, to start the Sieve application’s main
activity (we saw earlier that Sieve was debuggable) you could use the following command:
$ adb shell am start -n com.mwr.example.sieve/.MainLoginActivity
Starting: Intent { cmp=com.mwr.example.sieve/.MainLoginActivity }
TIP
To find the name of the launch activity examine the application’s manifest or use the
app.package.launchintent module in drozer. You can also launch the main activity from drozer using the
app.activity.start module.
Now if you run the adb jdwp command again and find the associated packages, Sieve is available to debug:
$ adb jdwp
4545
4566
5147
5167
$ adb shell ps | grep "5147\|5167"
app_127 5147 2724 145400 19944 ffffffff 00000000 S
com.mwr.example.sieve
app_127 5167 2724 141016 15652 ffffffff 00000000 S
com.mwr.example.sieve:remote
The easiest way to exploit a debuggable application with physical access to a device is by making use of the run-
as binary. This binary makes it possible to execute commands as the debuggable package on the device. The run-
as binary uses setresuid() and setresgid() to change from the “shell” user to the application’s user—as long as
the following conditions are met:
The caller is shell or root.
The target package does not run as system.
The target package is debuggable.
To get an interactive shell as the Sieve application user, you can use the run-as command with the full package
name as its parameter:
$ adb shell
shell@android:/ $ run-as com.mwr.example.sieve
shell@android:/data/data/com.mwr.example.sieve $
Note that as part of the initiation of the run-as binary, the user is placed inside the target application’s private
data directory. You can also use the run-as binary to execute a command and return immediately:
$ adb shell run-as com.mwr.example.sieve ls -l databases
-rw-rw---- u0_a53 u0_a53 24576 2014-05-27 19:28 database.db
-rw------- u0_a53 u0_a53 12824 2014-05-27 19:28 database.db-journal
The preceding shows the exposure of the Sieve application’s private data directory. At this point you can execute
any command and copy the crucial application files from the device or change them to be accessible from other
applications using chmod. The following is a one-liner that you can use to dump the database (provided that
sqlite3 exists and is on the path) that contains the master password as well as all the data entered into Sieve:
$ adb shell run-as com.mwr.example.sieve sqlite3 databases/database.db
.dump
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE android_metadata (locale TEXT);
INSERT INTO "android_metadata" VALUES('en_US');
CREATE TABLE Passwords (_id INTEGER PRIMARY KEY,service TEXT,username
TEXT,password BLOB,email );
INSERT INTO Passwords VALUES(1,'Gmail','tyrone',X'CC0EFA591F665110CD344C
384D48A2755291B8A2C46A683987CE13','PI:EMAIL');
INSERT INTO Passwords VALUES(2,'Internet Banking','tyrone123',X'5492FBCE
841D11EC9E610076FC302B94DBF71B59BE7E95821248374C5529514B62',
'PI:EMAIL');
CREATE TABLE Key (Password TEXT PRIMARY KEY,pin TEXT );
INSERT INTO Key VALUES('Thisismylongpassword123','1234');
COMMIT;
This shows the complete exposure of an application’s private data directory if it is debuggable. Just to reiterate
the point, normally on a non-rooted device the private data directory of the Sieve application is not accessible.
Attempting to perform even a directory listing results in the following error:
shell@android:/ $ ls -l /data/data/com.mwr.example.sieve/databases
opendir failed, Permission denied
WARNING
This technique does not work on some Android 4.1–4.3 devices because a bug existed in AOSP that
prevented the run-as binary from being able to access /data/system/packages.list on these devices and
caused it to prematurely exit with the error “Package ‘com.mwr.example.sieve’ is unknown.” This was
caused by a permission change on this file, as explained in Chapter 6. To see the bug report, go to
https://code.google.com/p/android/issues/detail?id=58373.
Another method of exploiting a debuggable application with physical access to the device is attaching a debugger
to it. Attaching a debugger to an application allows complete control over the application, including the exposure
of information being held in variables and can be extended to the execution of arbitrary code.
You can use ADB to expose a process that is debuggable over TCP so that it can be debugged using JDB (Java
Debugger). Development IDEs use this technique to provide debugging information to the development