the amount of 326.70 BTC is an upper limit.
To get a more conservative estimation of the amount of stealable Bitcoins,
we have to consider pending transactions. That is, we only considered cases
where there was no transaction in between which was not marked as RBF. As
it turns out, this was the case for 26 addresses in 119 pastes. For the remaining
cases, there was a blocking transaction in between, i.e., the paste containing
the secret key was published after the blocking transaction was distributed. For
example, one paste contained an address holding a balance of 40.84 BTC for
which a transaction was already placed in the mempool. In total, we found
that an attacker could have stolen 22.40 BTC. We excluded transaction fees in
this analysis as they are highly dynamic over time and the number of stealable
outputs was so small that the resulting fees would not be a signiﬁcant factor.
This demonstrates that an attacker can cause signiﬁcant ﬁnancial loss with
relatively simple means. This is ampliﬁed by the fact that an attacker could
expand this methodology to other cryptocurrencies and OSINT platforms.
4 Implicit Key Leaks: Incorrectly Used Cryptography
Seeing that even explicit key leaks pose a problem to Bitcoin users, in this section,
we will study how users implicitly leak secrets. To this end, we will ﬁrst describe
the most important cryptographic primitive in Bitcoin, namely ECDSA. We then
show how the incorrect use of this primitive opens severe vulnerabilities. That
is, we will systematically describe how an attacker monitoring the transactions
of the Bitcoin network can use nonce reuse to steal Bitcoins, and what amount
of damage could have been caused (or was caused) in the past by attackers.
4.1 Elliptic Curve Digital Signature Algorithm (ECDSA)
Bitcoin uses the Elliptic Curve Digital Signature Algorithm (ECDSA) to cryp-
tographically secure transactions. The scheme is based on the computational
infeasibility assumption of solving the Elliptic Curve Discrete Logarithm Prob-
lem (ECDLP), i.e., given two points Q and Qk on the curve, there is no
polynomial-time algorithm for recovering k. Bitcoin uses the secp256k1 curve,
which is based on the equation y2 = x3 + 7 over the ﬁnite ﬁeld Fp with the
630
M. Brengel and C. Rossow
256-bit prime number p = 2256 − 232 − 29 − 28 − 27 − 26 − 24 − 1. Furthermore,
secp256k1 uses a generator point G with the 256-bit group order n = 2256 −
0x14551231950B75FC4402DA1732FC9BEBF, i.e., n is the smallest number such
that Gn = 0. To create and verify signatures, we need the notion of a secret
key sk and a public key pk. In the context of elliptic curve cryptography, sk is
a randomly chosen integer from {1, . . . , n − 1} and the public key pk can be
derived by multiplying the generator G with sk, i.e., pk = Gsk. This derivation
is considered secure, as recovering sk from pk would require solving ECDLP.
To sign a message m with a secret key sk using ECDSA, the following pro-
cedure is followed: First a hash of the message h = H(m) is created using a
cryptographic hash function H. The hash h is then interpreted as a number
and truncated so that it does not contain more bits than the group order n.
In the case of Bitcoin, we have H = SHA2562, i.e., applying SHA256 twice,
which means that h will not be truncated as n is a 256-bit number. Then, a
random nonce k is chosen from {1, . . . , n − 1}. After that, the r value is com-
puted, which is the x-coordinate of the point that is yielded by multiplying the
generator point G with k, which we denote by r = (Gk)x mod n. Finally, the
value s = k−1(h + rsk) mod n is computed and the tuple (r, s) is returned as the
signature. If r = 0 or s = 0, then this procedure is repeated until both r and s are
non-zero. To verify that (r, s) is a valid signature for a message m using the public
key pk, one proceeds as follows: First the hash h = H(m) is created and truncated
as before. Then, the curve point (x, y) = (Gh+pkr)s−1 is calculated and the sig-
nature is considered valid if x = r. The correctness follows from the observation
that pk = Gsk, which implies (Gh + pkr)s−1 = G(h + skr)s−1 = Gkss−1 = Gk.
In terms of key or nonce leakage, note that the equation s = k−1(h +
rsk) mod n contains two unknowns and therefore cannot be used to leak the
secret key or the nonce. Recovering k from r = (Gk)x would require solving
ECDLP, similar to how pk = Gsk cannot be used to recover sk.
4.2 Using Duplicate Nonces to Leak Keys
It is known that ECDSA fails catastrophically if nonce reuse occurs. Nonce reuse
means that there are multiple signatures using the same nonce k, which might
allow an attacker to leak secret keys under certain circumstances. For instance, if
the same k (and thereby the same r value) and sk are used to create 2 signatures
(r, s1) and (r, s2) for two distinct messages m1 and m2, then we have1:
s1 = k−1(h1 + rsk)
s2 = k−1(h2 + rsk),
(1)
This allows leaking the secret key sk with:
s2h1 − s1h2
r(s1 − s2)
h1h2 + rh1sk − h1h2 − rh2sk
rh1 + rsk − rh2 − rsk
=
rh1sk − rh2sk
rh1 − rh2
=
= sk.
(2)
1 Note that all calculations on signatures are done modulo n, which we omit for brevity.
Identifying Key Leakage of Bitcoin Users
631
Similarly, k can be leaked with:
h1 − h2
s1 − s2
h1 − h2
=
k−1(h1 − h2 + sk(r − r))
= k.
(3)
However, not every kind of nonce reuse leads to cases where an attacker can
leak secrets. For instance, consider the case where a nonce k is used with two
diﬀerent keys sk1 and sk2 to sign two distinct messages, i.e.,:
s1 = k−1(h1 + rsk1)
s2 = k−1(h2 + rsk2).
(4)
It turns out that it is not possible in this case to leak any secrets. To get a better
understanding of this, we need to consider the fundamental underlying problem
that constitutes the act of leaking secrets in this setting. If we rewrite Eq. (1) to
look as follows:
s1k − rsk = h1
s2k − rsk = h2
it becomes evident that this is a system of linear equations. In particular, this sys-
tem consists of 2 linearly independent equations, since h1 (cid:3)= h2, and 2 unknowns,
i.e., k and sk, and is therefore uniquely solvable. On the other hand, Eq. (4) con-
sists of 2 equations and 3 unknowns, i.e., k, sk1 and sk2, and is therefore not
uniquely solvable as there are more unknowns than equations.
4.3 Beyond Single-Key Nonce Reuse
Interestingly, in some cases secrets leak even though the nonces are not reused
with the same secret key. For example, consider the following case, where two
keys sk1, sk2 are used with the same pair of nonces k1, k2, i.e.,:
s1,1 = k−1
s2,1 = k−1
1 (h1,1 + r1sk1)
2 (h2,1 + r2sk1)
s1,2 = k−1
s2,2 = k−1
1 (h1,2 + r1sk2)
2 (h2,2 + r2sk2)
Here, no nonce is used twice by the same key, but nonces have been reused
across keys. The system thus consists of 4 linearly independent equations and 4
unknowns and is thus uniquely solvable. A solution for sk2 that can be computed,
with Gaussian elimination for example, would be:
sk2 =
r1s1,2(h2,2s2,1 − h2,1s2,2) − r2s2,2(h1,2s1,1 − h1,1s1,2)
r1r2(s1,2s2,1 − s1,1s2,2)
.
In general, we can think of this problem as follows. An attacker is given
a set of signatures S = {(h1, r1, s1, pk1), . . . , (hn, rn, sn, pkn)}, which can be
extracted from the Bitcoin blockchain, for example. Each tuple (hi, ri, si, pki) ∈
S corresponds to a signature (ri = (Gki)x, si = k−1
(hi + rsk)) where pk = Gsk.
The goal of the attacker is to leak as many keys (or nonces) as possible by solving
systems of linear equations. To achieve this, an attacker has to identify subsets
of solvable systems. They can do so by reducing this problem to graph theory.
i
632
M. Brengel and C. Rossow
For instance, we build an undirected bipartite graph G = (Vpk ∪ Vr, E), where
Vpk = {pki | (·,·,·, pki) ∈ S}, Vr = {ri | (·, ri,·,·) ∈ S} and E = {{ri, pki} |
(·, ri,·, pki) ∈ S}. The graph G consists of two types of nodes, r values ri and
public keys pki, each of which corresponds to an unknown (a nonce ki and a secret
key ski). An edge {r, pk} in this graph corresponds to a signature, which in turn
corresponds to an equation in the system of linear equations that S constitutes.
As a pre-ﬁltering step, we ﬁrst collect all the r values and public keys that appear
at least twice in conjunction, i.e., we collect F = {r, pk | |{(·, r,·, pk) ∈ S}| > 1}.
Since this corresponds to the same nonce being used by the same key at least
twice, it means that we can leak the used secrets k and sk using Eqs. (3) and
(2) with the appropriate signatures. Additionally, we can leak all the secrets
which correspond to the nodes that are reachable by every public key and nonce
in F . To understand this, assume we have an r value ri ∈ F , which means
that we can leak the nonce ki as described. Now assume that there is a node
pkj ∈ Vpk such that {ri, pkj} ∈ E, which implies the existence of the equation
(hj + rskj). Since we know ki, we can leak skj with skj = sj ki−hj
sj = k−1
.
The same is analogously true if we assume a public key pki ∈ F and an r
value rj ∈ Vr such that {rj, pki} ∈ E. By applying this argument inductively, it
becomes evident that we can leak the secrets associated with all nodes that are
reachable from every ri ∈ F and every pki ∈ F .
r
i
In the next step, we need to identify the nodes and edges which can be
mapped to a solvable system of linearly independent equations. This can be
achieved by ﬁnding non-trivial cycles in G, i.e., distinct nodes r0, pk0
, . . . , rn, pkn
for n > 0 such that {ri, pki} ∈ E and {pki, ri+1 mod n} ∈ E for 0 ≤ i ≤ n. Such a
cycle contains 2(n + 1) nodes, i.e., unknowns, and 2(n + 1) edges, i.e., equations,
and thus directly implies the existence of a solvable system of linear equations.
Hence, for all such cycles we can leak the corresponding secrets, and, as before,
we can also leak the secrets of the reachable nodes. The output of this whole
r ⊆ Vr, which are the public keys and r values
process is two sets V (cid:3)
for which we have leaked the secret keys and nonces, respectively. If we remove
pk ∪ V (cid:3)
the nodes in V (cid:3)
r and their edges from G, the resulting graph should not
contain any non-trivial cycles. This means that no more secrets can be leaked
pk and V (cid:3)
and hence V (cid:3)
r are optimal with respect to their size.
pk ⊆ Vpk and V (cid:3)
There is, however, a little twist to the methodology we described here. We
consider two signatures (r1, s1) and (r2, s2) a case of nonce reuse if the r values
coincide, i.e., if r1 = r2. This is not strictly true, as the r value is only the
x-coordinate of Gk. Since elliptic curves are based on a Weierstrass equation of
the form y2 = x3 + bx + a, there are always two nonces k which lead to the same
r value2. In particular, if we have Gk = (x, y), then we have G(−k) = (x,−y).
This means that if the r values coincide, we need to take into account that one
nonce might be the additive inverse of the other rather than being equal. To
respect this, we must consider for every signature (r, s) the signature (r,−s)
as well, which is the signature that is yielded by negating k. For each such
combination we have to solve the system of linear equations and check if the
2 Recall that r (cid:2)= 0 (cf. Sect. 4.1).
Identifying Key Leakage of Bitcoin Users
633
returned solutions are correct to leak the correct keys and nonces. This can be
done by double-checking that each leaked secret key sk corresponds to the given
public key pk, which can be done by verifying the equality Gsk = pk.
4.4 Results
We will now outline our results regarding nonce reuse in the Bitcoin blockchain.
To achieve this, we downloaded a copy of the Bitcoin blockchain up until block
506071, which was mined on 2018-01-25 16:04:14 UTC. We parsed all inputs
from all P2PKH transactions to extract their ECDSA signatures.
Table 1. The 10 most frequent r values and their number of occurrences.
r value
0x00000000000000000000003b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63
0x00006fcf15e8d272d1a995af6fcc9d6c0c2f4c0b6b0525142e8af866dd8dad4b
0x1206589b08a84cb090431daa4f8d18934a20c8fa52ad534c5ba0abb3232be1d9
0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
0x2ef0d2ae4c49c37703ba16a3126e27763e124ff3338fb93577ed7bd79ed0d19e
0x06cce13d7911baa7856dec8c6358aaa1fb119b5a77d0e4d75d5a61acae05fcfb
0xd47ce4c025c35ec440bc81d99834a624875161a26bf56ef7fdc0f5d52f843ad1
0x281d3da7518241cd8ee30cd57ae3173a1bd9ee5e3b02a46ba30f25cd5b4c6aa8
0x8216f63d28f4dc0b6909a330d2af09b93df9dd3b853958c4d203d530328d8ed1
0x5d4eb477760cf19ff00fcb4bab0856de9e1ce7764d829a71d379367684712be4
Occurrences
2,276,718
7,895
265
251
91
83
76
68
64
52
In total, we extracted 647,110,920 signatures and we found 1,068 distinct r
values appearing at least twice and used by 4,433 keys. In total, these duplicate r
values make up for 2,290,850 (0.35%) of all r values. In Table 1, we show the top
10 most frequent duplicate r values along with their number of appearances. The
most frequent duplicate r value appears 2,276,671 times, which makes up 99.38%
of all duplicate occurrences. This r value is special, as it is extraordinary small,
given that its 90 most signiﬁcant bits are all 0. Additionally, the corresponding
2 mod n. As this is unlikely to be a coincidence,
nonce k for this r value is k = 1
it is believed that the designers of the secp256k1 curve chose the generator
point G based on these values. It is also believed that this r value is used on
purpose by peers to save transaction fees. Bitcoin uses the DER encoding to
serialize signatures, which can compress the leading bits of this r value, which
reduces the transaction size and leads to smaller transaction fees. If peers use
this nonce only for the “last” transaction of an address, i.e., the ﬁnal transaction
which removes all funds, then this should be secure as long as the transaction is
marked as non-replaceable. But since this transaction still leaks the secret key
of the address, the peer needs to make sure that they will never use the address
634
M. Brengel and C. Rossow
again. Our analysis revealed that this r value was primarily used in two time
periods. The ﬁrst block which contains this value is block 364,767 and the last
one is block 477,411. In total, we identiﬁed 1,550 blocks which contain this r
value. We found that the r value was used excessively in 2 time periods, which
is depicted in Fig. 1. We can see that between block 365,000 and block 366,000
and between block 374,000 and block 375,000, the value is used roughly 1 million
times each, which makes up almost all of its appearances.
s
e
c
n
e
r
r
u
c
O
f
o
r
e
b
m
u
N
d
e
t
a
l
u
m
u
c
c
A