(b) ϵ = 0.01
Figure 4: Smoothing strategy comparison for unit workload
on various streams. "MS" is MedianSmoother, "AS" is Aver-
ageSmoother and "JSS" is JSSmoother. Y-axis reports the loд10
of the average L1 error.
6.4 Unit counting query on hierarchical
aggregated streams; multiple target states
We evaluate our proposed algorithms in Section 5 for answering
unit counting query on a set of hierarchical aggregated streams
among multiple target states. We use the "Multi_5" stream from
Table 1 and consider a set of hierarchical aggregations AGG as a
binary tree on the total number of states (128 in our case). The total
levels of AGG is log2 (128) + 1 = 8.
Figure 8 shows the results under two different ϵ settings. Each
bar reports the log10 value of the average L1 error in terms of the
unit counting query on every aggregated stream at all timesteps.
 0 50 100 150 200 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp 0 50 100 150 200 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp 0 50 100 150 200 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp 0 100 200 300 400 500 600 700 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp 0 100 200 300 400 500 600 700 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp 0 100 200 300 400 500 600 700 0 1000 2000 3000 4000 5000 6000 7000 8000countstimestamp-1 -0.5 00.511.522.533.5eps	=	0.1 eps	=	0.01 Scaled	Total	L1	ErrorLMBS_1BS_5BS_10PGS-1 -0.5 00.511.522.533.5eps	=	0.1 eps	=	0.01 Scaled	Total	L1	ErrorLMBS_1BS_5BS_10PGS-1 -0.5 00.511.522.533.5eps	=	0.1 eps	=	0.01 Scaled	Total	L1	ErrorLMBS_1BS_5BS_10PGS-0.5 00.511.522.5LOW_5MED_5HIGH_5Average	L1	Error	MSASJSS-0.5 00.511.522.5LOW_5MED_5HIGH_5Average	L1	Error	MSASJSS(a) Low_5, ϵ = 0.1
(b) Med_5, ϵ = 0.1
(c) High_5, ϵ = 0.1
(d) Low_5, ϵ = 0.01
(e) Med_5, ϵ = 0.01
(f) High_5, ϵ = 0.01
Figure 5: Error for the sliding window queries. The x-axis represents the window size as 2x . The y-axis reports log10 of the
average L1 error.
(a) ϵ = .1, w = 10, δ = 100
(b) ϵ = .1, w = 10, δ = 150
(c) ϵ = .01, w = 10, δ = 100
(d) ϵ = .01, w = 10, δ = 150
(e) ϵ = .1, w = 20, δ = 100
(f) ϵ = .1, w = 20, δ = 150
(g) ϵ = .01, w = 20, δ = 100
(h) ϵ = .01, w = 20, δ = 150
Figure 6: ROC curve for detecting jumping and dropping points on stream High_5. For (a), (b), (e) and (f), ϵ = 0.1; For (c), (d),
(g) and (h), ϵ = 0.01.
The value is also the average of 20 trials. In the figure, HS-LM rep-
resents using Laplace Mechanism on answering the unit query on
each aggregated stream with ϵ
privacy budget, where h is the num-
h
ber of levels of AGG. HS-PGS is using our proposed PeGaSus with
MedianSmoother as Smoother on each aggregated stream. PHS-PGS
is the proposed Hierarchical-Stream PeGaSus with pruning (Algo-
rithm 4). As shown in the figure, both HS-PGS and PHS-PGS reduce
the average L1 error of answering unit counting query by 1 to 2
orders of magnitude compared with the data-independent HS-LM.
In addition, by doing the pruning, the utility of the results are fur-
ther improved. The average L1 error of HS-LM is over 78x (445x)
times the error of PHS-PGS, and the error of HS-PGS is over 4x (9x)
times the error of PHS-PGS for ϵ = 0.1 (0.01).
7 RELATED WORK
There is prior work focusing on continual real-time release of aggre-
gated statistics from streams [2, 4, 7, 15, 16]. Most of this literature
focuses on releasing a single continuous query with low error under
012345234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM012345234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM012345234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM0123456234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM0123456234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM0123456234567891011Average	L1	ErrorWindow	Size:	2^xSW_wPGS_MSPGS_WWSLM 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateLMPGS(a) ϵ = .1, w = 8, δ = 5
(b) ϵ = .1, w = 8, δ = 10
(c) ϵ = .01, w = 8, δ = 5
(d) ϵ = .01, w = 8, δ = 10
(e) ϵ = .1, w = 16, δ = 5
(f) ϵ = .1, w = 16, δ = 10
(g) ϵ = .01, w = 16, δ = 5
(h) ϵ = .01, w = 16, δ = 10
Figure 7: ROC curve for detecting low signal points on stream High_5. For (a), (b), (e) and (f), ϵ = 0.1; For (c), (d), (g) and (h),
ϵ = 0.01.
that the error of each release at timestamp t is O (log(t )). We did not
compare with this method because we do not consider answering
prefix counting queries.
Bolot et al. [2] also used a comparable privacy model, proposing
an algorithm for answering sliding window queries on data streams
with a fixed window size w. The basic idea is also to generate binary
trees on every consecutive w data points and perturb the nodes of
the binary trees. A sliding window query at each timestamp can
be derived as the sum of the suffix and prefix of two consecutive
binary trees. This is the state-of-the art algorithm for releasing
sliding window query answers. But the algorithm is designed for
any one fixed window size, which means we must split the budget
for answering multiple sliding window queries with different win-
dow sizes. We compare our proposed technique with this method
in Section 6 and our technique always has a better performance
on our real-world WIFI dataset when answering sliding window
queries with size not greater than 28, even if we do not split the
privacy budget for different window size by using the previous
method from [2]. Cao et al. [4] study a different task: answering
a set of special prefix sum queries with timestamps of the form
j × s, where s is the step size chosen from some pre-defined step
size set. The proposed algorithms sample some step sizes from the
step size set and then only perturb the window queries in terms of
the chosen step sizes. Then the prefix range query from the work-
load can be computed by composition of these perturbed window
queries. We did not compare with this method since it only focuses
on answering a small fixed set of prefix range queries. Kellaris et
al. first proposed another privacy model called w-event differential
privacy [16], which is a balance between user-level and event-level
differential privacy and designed algorithms for releasing private
data under w-event differential privacy.
Dwork adapted differential privacy to a continual observation
setting [9], which focused on a 0/1 stream and proposed a cascading
buffer counter for counting the number of 1s under event-level
differential privacy. Mir et al. studied pan-private algorithms for
Figure 8: Evaluation of answering unit counting query on a
set of hierarchical aggregated streams among multiple tar-
get states. Y-axis reports the log10 of the average L1 error.
differential privacy. In contrast, PeGaSus is able to support multiple
analyses on the private stream.
Fan et al. proposed Fast [15], an adaptive system to release real-
time aggregate statistics under differential privacy by using sam-
pling and filtering. Their algorithm is based on a different privacy
model, user-level differential privacy, which is not comparable to
our chosen model of event level differential privacy. In [7], Chan
et al. use a privacy model that matches the one in the present
work. But they focus on a single task: releasing prefix sums of the
streaming data counts. For an input stream with known bounded
length T , it generates a binary tree defined on the stream and per-
turbs the node counts of the binary tree. Then each prefix range
query is computed based on a set of perturbed nodes. For streams
with unbounded length, it spends half of the privacy budget on
perturbing every range query between 2i + 1 and 2i +1. Then it
generates a binary tree on every sub-stream between 2t + 1 and
2t +1 for each i = 1, 2, . . . , and perturbs the node counts with the
remaining half of the privacy budget. Any prefix sum at timestamp
k, where 2i <= k < 2i +1, can be computed based on the range
queries between 2i + 1 and 2i +1 for all i ≤ t and the noisy nodes
from the binary tree between 2t + 1 and 2t +1. The authors proved
 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1True Positive RateFalse Positive RateSW_wPGS-0.5 00.511.522.53eps	=	0.1 eps	=	0.01 Average	L1	ErrorHS-LMHS-PGSPHS-PGSestimating distinct count, moments and the heavy-hitter count on
data streams in [21], which preserves differential privacy even if
the internal memory of the algorithms is compromised. Chan et al.
studied the application of monitoring the heavy hitters across a set
of distributed streams [6].
Dwork et al. proposed a differentially private online partition
algorithm for counting under continual observations [12]. Like our
Grouper module, this algorithm also employs the Sparse Vector
Technique [13]. However, our Grouper differs from Dwork et al. in
the following important ways: (1) their algorithm is designed for
computing partitions such that total counts of each partition are
similar while ours is to find groups such that the elements in each
group share similar counts. (2) Using the deviation function helps
the Grouper to detect contiguous intervals in the stream that have a
stable value (even if the values are high). On the other hand, using
the total only lets us group together intervals that have counts close
to zero.
8 CONCLUSION
We presented PeGaSus, a new differentially private algorithm that
can simultaneously answer a variety of continuous queries at mul-
tiple resolutions on real time data streams. Our novel Perturber,
data-adaptive Grouper and query specific Smoother approach helps
release counting, sliding window and event monitoring queries
with low error on sparse or stable streams. Our empirical results
show that our approach outperforms state-of-the-art solutions spe-
cialized to individual queries.
There are some open questions for the future work. First, there
exist some parameters in our proposed algorithms required to be
set. Different setting of the parameters would affect the final out-
puts. Designing algorithms for data adaptive parameter tuning will
be useful. Second, It will be of great usefulness to design more
sophisticated Smoother that will go beyond recognizing only sparse
or stable sub-regions. It will be even better that the Smoother can
be adaptively adjusted in terms of the input streaming data.
Acknowledgements: This work was supported by the National
Science Foundation under grants 1253327, 1408982, 1409125, 1443014,
1421325, and 1409143; and by DARPA and SPAWAR under contract
N66001-15-C-4067. The U.S. Government is authorized to reproduce
and distribute reprints for Governmental purposes not withstand-
ing any copyright notation thereon. The views, opinions, and/or
findings expressed are those of the author(s) and should not be
interpreted as representing the official views or policies of the De-
partment of Defense or the U.S. Government.
REFERENCES
[1] Luigi Atzori, Antonio Iera, and Giacomo Morabito. 2010. The Internet of Things:
A Survey. Comput. Netw. 54, 15 (Oct. 2010), 2787–2805. https://doi.org/10.1016/j.
comnet.2010.05.010
[2] Jean Bolot, Nadia Fawaz, S. Muthukrishnan, Aleksandar Nikolov, and Nina Taft.
2013. Private Decayed Predicate Sums on Streams. In Proceedings of the 16th
International Conference on Database Theory (ICDT ’13). ACM, New York, NY,
USA, 284–295. https://doi.org/10.1145/2448496.2448530
[3] J. A. Calandrino, A. Kilzer, A. Narayanan, E. W. Felten, and V. Shmatikov. 2011.
"You Might Also Like:" Privacy Risks of Collaborative Filtering. In 2011 IEEE
Symposium on Security and Privacy. 231–246. https://doi.org/10.1109/SP.2011.40
[4] Jianneng Cao, Qian Xiao, Gabriel Ghinita, Ninghui Li, Elisa Bertino, and Kian-Lee
Tan. 2013. Efficient and Accurate Strategies for Differentially-private Sliding
Window Queries. In Proceedings of the 16th International Conference on Extending
Database Technology (EDBT ’13). ACM, New York, NY, USA, 191–202. https:
//doi.org/10.1145/2452376.2452400
[5] Yang Cao, Masatoshi Yoshikawa, Yonghui Xiao, and Li Xiong. 2017. Quantifying
Differential Privacy under Temporal Correlations. ICDE (2017).
[6] T.-H. Hubert Chan, Mingfei Li, Elaine Shi, and Wenchang Xu. 2012. Differentially
Private Continual Monitoring of Heavy Hitters from Distributed Streams. In
Proceedings of the 12th International Conference on Privacy Enhancing Technologies
(PETS’12). Springer-Verlag, Berlin, Heidelberg, 140–159. https://doi.org/10.1007/
978-3-642-31680-7_8
[7] T.-H. Hubert Chan, Elaine Shi, and Dawn Song. 2011. Private and Continual
Release of Statistics. ACM Trans. Inf. Syst. Secur. 14, 3, Article 26 (Nov. 2011),
24 pages. https://doi.org/10.1145/2043621.2043626
[8] Irit Dinur and Kobbi Nissim. 2003. Revealing Information While Preserving
Privacy. In Proceedings of the Twenty-second ACM SIGMOD-SIGACT-SIGART
Symposium on Principles of Database Systems (PODS ’03). ACM, New York, NY,
USA, 202–210. https://doi.org/10.1145/773153.773173
[9] Cynthia Dwork. 2010. Differential Privacy in New Settings. In Proceedings of the
Twenty-first Annual ACM-SIAM Symposium on Discrete Algorithms (SODA ’10).
Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 174–183.
http://dl.acm.org/citation.cfm?id=1873601.1873617
[10] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam Smith. 2006. Cali-
brating Noise to Sensitivity in Private Data Analysis (TCC’06). Springer-Verlag,
Berlin, Heidelberg, 265–284. https://doi.org/10.1007/11681878_14
[11] Cynthia Dwork, Moni Naor, Toniann Pitassi, and Guy N. Rothblum. 2010. Differ-
ential Privacy Under Continual Observation. In Proceedings of the Forty-second
ACM Symposium on Theory of Computing (STOC ’10). ACM, New York, NY, USA,
715–724. https://doi.org/10.1145/1806689.1806787
[12] Cynthia Dwork, Moni Naor, Omer Reingold, and Guy N. Rothblum. 2015. Pure Dif-
ferential Privacy for Rectangle Queries via Private Partitions. Springer Berlin Heidel-
berg, Berlin, Heidelberg, 735–751. https://doi.org/10.1007/978-3-662-48800-3_30
[13] Cynthia Dwork and Aaron Roth. 2014. The algorithmic foundations of differential
privacy. Foundations and Trends in Theoretical Computer Science 9, 3-4 (2014),
211–407.
[14] Cynthia Dwork and Sergey Yekhanin. 2008. New Efficient Attacks on Statistical
Disclosure Control Mechanisms. In Proceedings of the 28th Annual Conference
on Cryptology: Advances in Cryptology (CRYPTO 2008). Springer-Verlag, Berlin,
Heidelberg, 469–480. https://doi.org/10.1007/978-3-540-85174-5_26
[15] Liyue Fan and Li Xiong. 2012. Real-time Aggregate Monitoring with Differential
Privacy. In Proceedings of the 21st ACM International Conference on Information
and Knowledge Management (CIKM ’12). ACM, New York, NY, USA, 2169–2173.
https://doi.org/10.1145/2396761.2398595
[16] Georgios Kellaris, Stavros Papadopoulos, Xiaokui Xiao, and Dimitris Papadias.
2014. Differentially Private Event Sequences over Infinite Streams. Proc. VLDB
Endow. 7, 12 (Aug. 2014), 1155–1166. https://doi.org/10.14778/2732977.2732989
[17] Daniel Kifer and Ashwin Machanavajjhala. 2011. No Free Lunch in Data Privacy.
In Proceedings of the 2011 ACM SIGMOD International Conference on Management
of Data (SIGMOD ’11). ACM, New York, NY, USA, 193–204. https://doi.org/10.
1145/1989323.1989345
[18] Daniel Kifer and Ashwin Machanavajjhala. 2014. Pufferfish: A Framework for
Mathematical Privacy Definitions. ACM Trans. Database Syst. 39, 1, Article 3 (Jan.
2014), 36 pages. https://doi.org/10.1145/2514689
[19] Chao Li, Michael Hay, Gerome Miklau, and Yue Wang. 2014. A Data- and
Workload-Aware Query Answering Algorithm for Range Queries Under Differ-
ential Privacy. PVLDB 7, 5 (2014), 341–352. http://www.vldb.org/pvldb/vol7/
p341-li.pdf
[20] Changchang Liu, Supriyo Chakraborty, and Prateek Mittal. 2016. Dependence
Makes You Vulnerable: Differential Privacy Under Dependent Tuples. In NDSS.
[21] Darakhshan Mir, S. Muthukrishnan, Aleksandar Nikolov, and Rebecca N. Wright.
2011. Pan-private Algorithms via Statistics on Sketches. In Proceedings of the
Thirtieth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database
Systems (PODS ’11). ACM, New York, NY, USA, 37–48. https://doi.org/10.1145/
1989284.1989290
[22] Shuang Song, Yizhen Wang, and Kamalika Chaudhuri. 2017. Pufferfish Privacy
Mechanisms for Correlated Data. In Proceedings of the 2017 ACM International
Conference on Management of Data (SIGMOD ’17). ACM, New York, NY, USA,
1291–1306. https://doi.org/10.1145/3035918.3064025
[23] Charles Stein. 1956. Inadmissibility of the Usual Estimator for the Mean of a
Multivariate Normal Distribution. In Proceedings of the Third Berkeley Symposium
on Mathematical Statistics and Probability, Volume 1: Contributions to the Theory
of Statistics. University of California Press, 197–206. http://projecteuclid.org/
euclid.bsmsp/1200501656
[24] Yonghui Xiao and Li Xiong. 2015. Protecting Locations with Differential Privacy
Under Temporal Correlations. In Proceedings of the 22Nd ACM SIGSAC Conference
on Computer and Communications Security (CCS ’15). ACM, New York, NY, USA,
1298–1309. https://doi.org/10.1145/2810103.2813640