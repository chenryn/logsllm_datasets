(b) Vertical Parity Encoding: a vertical pari-
ty element Ei,j can be calculated by XOR
operations on selected data elements {Ei(cid:2),j(cid:2)}
satisfying the condition: (cid:2)2i(cid:2) + j(cid:3)p = j(cid:2). For
example, E1,4 := E6,2 ⊕ E3,3 ⊕ E4,5 ⊕ E1,6.
Figure 4. The Layout of HV Code with (p − 1) Disks (p = 7)
Lemma 1: We can ﬁnd a sequence of a two-integer tuple
(Tk, T (cid:4)
⎧⎨
k) (k := 0,··· , 2p − 1), where
⎩(cid:6) k−1− (−1)k +1
(cid:6) k−1− (−1)k +1
(cid:7)p,
f1−f2
f1−f2+p
2
2
(cid:7)p,
2
2
2
2
Tk :=
f1 − f2 = 2t
f1 − f2 = 2t + 1
1 + (−1)k
(3)
1 + (−1)k+1
T (cid:4)
k :=
2
2
f2
f1 +
k)}2p−1
(4)
with 1 ≤ f1 < f2 ≤ p − 1. In this sequence, all two-integer
tuples (0, f1), (0, f2),··· , (p− 1, f1), (p− 1, f2) will appear
only once.
Proof: To prove Lemma 1, we should only show that the
two-integer tuples {(Tk, T (cid:4)
k=0 in the column f1 and f2
are different from each other. Due to the page limits, we only
consider the case when f1−f2 is even and this methodology
can be applied to the other case.
Because the tuples at different columns will be easily
differentiated by T (cid:4)
k, we only need to prove the tuples at
, T (cid:4)
)
the same column are different. For the tuples (Tk1
k1
, T (cid:4)
) (assume k1 < k2) at column f1, since
and (Tk2
k2
T (cid:4)
= T (cid:4)
= f1, both k1 and k2 are chosen from the range
(1, 3,··· , 2p − 1) whose size is p. Then
k2
k1
(cid:6)T (k1) − T (k2)(cid:7)p = (cid:6) k1 − k2 + (−1)k1−(−1)k2
· f1 − f2
(cid:7)p
2
2
2
· f1 − f2
(cid:7)p
= (cid:6) k1 − k2
, f1−f2
2
2
2
Where −p < k1−k2
2
2 < 0. Because p is a prime
and f1−f2
number and is not a factor of both k1−k2
,
(cid:6)T (k1)− T (k2)(cid:7)p (cid:5)= 0, meaning that the p tuples resides on
the column f1 will appear only once (i.e., (0, f1),··· , (p −
1, f1)). Based on the same principle, the p tuples (Tk, T (cid:4)
k) on
the column f2 will be (0, f2),··· , (p−1, f2). Therefore, the
tuples (0, f1), (0, f2),··· , (p − 1, f1), (p − 1, f2) will only
appear once when 0 ≤ k ≤ 2p − 1.
(cid:2)
Theorem 1: A stripe constructed by (p − 1)-row-(p − 1)-
column of HV Code can tolerate the concurrent failures of
any two columns.
2
Proof: Before giving the detailed proof, let’s ﬁrst review
the layout of HV Code. In a stripe of HV Code, each row
and column consists of (p − 3) data elements, a horizontal
parity element and a vertical parity element. There are totally
2(p − 1) parity chains in a stripe of HV Code, including
(p − 1) horizontal parity chains and (p − 1) vertical parity
chains. If a horizontal parity element and a vertical parity
element are placed in the same column, the two parity chains
generated by them will not intersect and both of them will
go through the same (p − 2) columns. In addition, a parity
chain, no matter horizontal parity chain or vertical parity
chain, will pass through (p − 2) columns and intersect with
any column of them only once.
Suppose the two failed columns are f1 and f2, where f1
and f2 are even and satisfy the condition 1 ≤ f1 < f2 ≤
p − 1 (the proof of other cases is similar). Actually, the
failed elements on the two corrupted disks f1 and f2 can be
mapped to the sequence in Lemma 1. For the non-vertical
parity elements, the mapping Ei,fj −→ (i, fj) establishes
where (1 ≤ i ≤ p − 1, i (cid:5)= (cid:6) fj
4 (cid:7)p, j = 1, 2). The vertical
parity elements E(cid:2) fj
will be mapped to the tuples
(0, fj) where j = 1, 2. 1 Thus, we can also use the tuples
to represent the elements. For example, in Fig. 5, the data
element E1,1 and the vertical parity element E2,1 can be
represented by the tuples (1,1) and (0,1).
4 (cid:3)p,fj
According to the layout of HV Code, we can ﬁrst ﬁnd
out two parity chains (including a horizontal parity chain
and a vertical parity chain) that intersect at the column f1
but miss the column f2 and another two parity chains that
bypass the column f1 but intersect at the column f2. Then
four start elements of the recovery chains can be obtained,
4 (cid:7)p, f1) are the start elements
where ((cid:6) f1
recovered by horizontal parity chains, while ((cid:6) f2− f1
(cid:7)p, f2)
and ((cid:6) f1− f2
(cid:7)p, f1) are the ones reconstructed by vertical
parity chains. Besides the four parity chains, other parity
(cid:3)p, f1) and
4 (cid:7)p, f2) and ((cid:6) f2
1There are also another two ”virtual
(cid:3)p, f2), which do not have any usage in the double disk repair.
i.e., ((cid:2) f1
tuples”,
((cid:2) f2
2
2
4
2
2
4
555
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
related (p − 4) data elements should be ﬁrst retrieved, then
Ei,j can be repaired as:
Ei,j :=
Ei,k
k (cid:5)= j, k (cid:5)= (cid:6)4i(cid:7)p
(5)
p−1(cid:3)
k=1
p−1(cid:3)
Similarly, when reconstructing Ei,j by the vertical parity
chain, the vertical parity element Es,(cid:2)4s(cid:3)p can be obtained
ﬁrst, where (cid:6)4s(cid:7)p := (cid:6)j − 2i(cid:7)p. Then
Ei,j :=
Ek,l ⊕ Es,(cid:2)4s(cid:3)p
(6)
where l (cid:5)= j, l (cid:5)= (cid:6)4s(cid:7)p, l (cid:5)= (cid:6)8s(cid:7)p, and (cid:6)2k + 4s(cid:7)p = l.
l=1
Based on Equations (1), (2), (5), (6), if a single disk fails,
the missing elements, including data elements and parity
elements can be successfully reconstructed. If double disk
failures occur (suppose the corrupted disks are f1 and f2,
where 1 ≤ f1 < f2 ≤ p − 1), the recovery process can
follow the procedures in Theorem 1 and the detailed steps
are shown in Algorithm 1.
Algorithm 1: The Procedures to Recover The Concur-
rent Failures of Two Disk in HV Code.
1. locate the failed disks f1 and f2 (1 ≤ f1 < f2 ≤ p − 1);
2. recover the four start elements ﬁrst: ((cid:2) f2− f1
((cid:2) f1− f2
(cid:3)p, f1).
3. reconstruct other missing elements by alternately shifting between
f1 and f2.
(cid:3)p, f2), and ((cid:2) f2
(cid:3)p, f1), ((cid:2) f1
(cid:3)p, f2),
2
2
4
4
2
2
Case 1: start with the tuple ((cid:2) f2
(cid:3)p, f1) in disk f1, do
4
4
re-build the elements in disk f2 utilizing vertical parity chain
and repair the elements in disk f1 using horizontal parity chain;
until reach a parity element.
Case 2: start with the tuple ((cid:2) f1
(cid:3)p, f2) in disk f2, do
re-build the elements in disk f1 utilizing vertical parity chain
and repair the elements in disk f2 by horizontal parity chain;
until reach a parity element.
Case 3: start with the tuple ((cid:2) f1− f2
re-build the elements in disk f2 utilizing horizontal parity chain
and repair the elements in disk f1 using vertical parity chain;
until reach a parity element.
Case 4: start with the tuple ((cid:2) f2− f1
re-build the elements in disk f1 utilizing horizontal parity chain
and repair the elements in disk f2 using vertical parity chain;
until reach a parity element.
(cid:3)p, f1) in disk f1, do
(cid:3)p, f2) in disk f2, do
2
2
2
2
IV. PROPERTY ANALYSIS
1) Optimal Storage Efﬁciency: As proved above, HV
Code is an MDS code and has optimal storage efﬁciency
[19] [4].
2) Optimal Construction/Reconstruction/Update Com-
putational Complexity: For a code with m-row-by-n-
column and x data elements, P-Code [8] has deduced the
optimal XOR operations to each data element in construction
is 3x−m·n
and the minimal XOR operations to each lost
element in reconstruction is 3x−m·n
m·n−x [8].
x
Figure 5. An Example to Recover Disk #1 and Disk #3. The elements
labeling ”SH” and ”SV” indicate Start elements recovered by Horizontal
parity chains, and the Start elements reconstructed by Vertical parity chains,
respectively. The element labeling ”H” (resp, ”V”) indicates it is recovered
through Horizontal (resp. Vertical) parity chain. The arrow line assigned
with number denotes the recovery direction and its recovery order. There are
four recovery chains, such as {E5,1, E5,3} and {E3,3, E3,1, E4,3, E4,1}.
chains will intersect with both f1 and f2.
We can summarize the recovery rule as follows: For the
failed columns f1 and f2, on one hand, if data elements Ei,f1
and Ej,f2 are recovered from the involved vertical parities,
then elements Ei,f2 and Ej,f1 (may be data elements or
parity elements) could be reconstructed by following the
horizontal parity chains. On the other hand, if data elements
Ei,f1 and Ej,f2 are recovered from the involved horizontal
parities, then in the next step we can reconstruct the elements
Ei(cid:2),f2 and Ej(cid:2),f1 by utilizing the corresponding vertical
parity chains. When Ei(cid:2),f2 and Ej(cid:2),f1 are data elements,
they should satisfy the conditions (cid:6)f1 − 2i(cid:7)p = (cid:6)f2 − 2i(cid:4)(cid:7)p
and (cid:6)f2 − 2j(cid:7)p = (cid:6)f1 − 2j(cid:4)(cid:7)p, respectively. When Ei(cid:2),f2 and
Ej(cid:2),f1 are vertical parity elements, the conditions change to
(cid:6)4i(cid:4)(cid:7)p = f2 and (cid:6)4j(cid:4)(cid:7)p = f1.
By following this recovery rule, every recovery chain
will terminate at a parity element. The horizontal parity
elements are the tuples of ((cid:6) f1
2 (cid:7)p,f2), while
the vertical parity elements are (0,f1) and (0,f2). During
the reconstruction process, the recovered elements track the
(cid:2)
sequence of the two-integer tuple in Lemma 1.
2 (cid:7)p,f1) and ((cid:6) f2
D. Reconstruction
In this section, we will discuss how to perform the recon-
struction when a failure happens. We mainly consider three
basic kinds of failures: the failure of an element, the failure
of a single disk, and concurrent failures of double disk. Other
possible failure cases tolerated by RAID-6 systems (e.g.,
multiple element failures in a disk) can be covered by the
combination of these three basic failures.
There are two possibilities when an element fails, result-
ing in different construction methods. If the failed element is
a parity element, the recovery can follow either Equation (1)
or Equation (2) by using the related (p − 3) data elements.
In the case when a data element (suppose Ei,j) is broken,