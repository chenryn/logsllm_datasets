### 优化后的文本

#### 时间和数据统计
- **时间统计**：
  - 3.01小时
  - 1.38小时
  - 7.69MB (95.9%)
  - 2,229秒
  - 2.00小时
  - 7.74小时
  - 0.84小时
  - 2,258秒
  - 3.76MB (94.9%)
  - 1.47小时
  - 5.88小时
  - 1.66小时
  - 5,381秒
  - 0.33MB (95.1%)
  - 0.17小时
  - 2.07小时
  - 18.01小时 (16.46MB, 83.6%)
  - 5,238秒 (16.55小时)
  - 超时 (T.O.)
  - 19.96小时 (18.47MB, 85.1%)
  - 7,049秒 (18.00小时)
  - 超时 (T.O.)
  - 33.14小时 (40.15MB, 95.2%)
  - 5,672秒 (31.56小时)
  - 超时 (T.O.)
  - 9.16小时
  - 8.42小时
  - 1.97MB (79.3%)
  - 超时 (T.O.)
  - 2,654秒
  - 2,909秒 (39.03小时)
  - 39.84小时 (95.85MB, 91.2%)
  - 超时 (T.O.)
  - 84.31小时 (261.2MB, 96.1%)
  - 3,067秒 (83.46小时)
  - 超时 (T.O.)
  - 41.29小时 (166.3MB, 96.0%)
  - 2,825秒 (40.51小时)
  - 超时 (T.O.)
  - 62.33小时 (41.13MB, 86.1%)
  - 3,420秒 (61.38小时)
  - 超时 (T.O.)
  - 10.59小时
  - 3,326秒 (22.24小时)
  - 4.32MB (94.3%)
  - 超时 (T.O.)
  - 2,950秒 (45.69小时)
  - 46.51小时 (121.55MB, 92.6%)
  - 超时 (T.O.)
  - 20.09小时 (20.65小时, 31.75MB, 85.7%)
  - 超时 (T.O.)
  - 2,033秒
  - 20.47小时 (20.21MB, 90.5%)
  - 超时 (T.O.)
  - 4.74MB (92.3%)
  - 5.20小时
  - 超时 (T.O.)
  - 4.55小时
  - 4.31MB (96.9%)
  - 超时 (T.O.)
  - 11.46小时 (20.12MB, 91.2%)
  - 49.78小时
  - 4.01小时 (19.78MB, 90.4%)
  - 7.34小时
  - 3.23小时 (65.81MB, 91.3%)
  - 超时 (T.O.)
  - 2.98MB (76.5%)
  - 超时 (T.O.)
  - 4,904秒 (102.90小时, 104.26小时)
  - 5,899秒 (90.25小时)
  - 3.76MB (69.4%)
  - 91.89小时
  - 超时 (T.O.)
  - 96.50小时
  - 4,153秒 (95.35小时)
  - 超时 (T.O.)
  - 3.13MB (67.2%)
  - 64.37小时 (12.94MB, 75.2%)
  - 超时 (T.O.)
  - 6,593秒 (62.54小时)
  - 74.80小时 (14.60MB, 86.3%)
  - 超时 (T.O.)
  - 2,950秒 (73.98小时)
  - 83.21小时 (14.21MB, 81.1%)
  - 超时 (T.O.)
  - 2,686秒 (82.46小时)
  - 超时 (T.O.)
  - 2,995秒 (92.65小时)
  - 93.48小时 (13.76MB, 70.1%)
  - 6.00MB (53.4%)
  - 超时 (T.O.)
  - 14,335秒 (89.57小时)
  - 93.55小时
  - 7.65MB (69.8%)
  - 超时 (T.O.)
  - 14,893秒 (98.20小时, 102.34小时)
  - 3.44MB (56.7%)
  - 52.03小时
  - 超时 (T.O.)
  - 14,623秒 (47.97小时)
  - 57.47小时
  - 超时 (T.O.)
  - 16,600秒 (52.86小时)
  - 6.89MB (51.3%)
  - 99.77小时 (13.49MB, 52.6%)
  - 超时 (T.O.)
  - 14,239秒 (95.81小时)

- **其他数据**：
  - 11.50倍
  - 82.9%
  - 2,484秒 (19.78小时)
  - 4.46小时
  - 2,671秒
  - 3.83小时
  - 2,608秒
  - 93秒 (11.46小时)
  - 3.98小时
  - 106秒
  - 85秒
  - 3.22小时
  - ming4.8
  - ming4.7
  - 2016-9827 (1)
  - 2016-9829 (2)
  - 2016-9831 (3)
  - 2017-7578 (4)
  - 2017-9988 (5)
  - 2017-11728 (6)
  - 2017-11729 (7)
  - 2018-7868 (8)
  - 2018-8807 (9)
  - 2018-8962 (10)
  - 2018-11095 (11)
  - 2018-11225 (12)
  - 2018-11226 (13)
  - 2018-20427 (14)
  - 2019-9114 (15)
  - 2019-12982 (16)
  - 2020-6628 (17)
  - 2017-8846 (18)
  - 2018-11496 (19)
  - 2016-4491 (20)
  - 2016-6131 (21)
  - 2017-5969 (22)
  - 2017-9047 (23)
  - 2017-9048 (24)
  - 2017-9049 (25)
  - 2017-8392 (26)
  - 2017-8396 (27)
  - 2017-8397 (28)
  - 2017-8398 (29)
  - 2017-14940 (30)
  - 2017-16828 (31)
  - 2018-17360 (32)
  - 2017-7303 (33)
  - 2017-8393 (34)
  - 2017-8394 (35)
  - 2017-8395 (36)
  - 2018-14498 (37)
  - 38
  - 2020-13790 (39) pngimage 2018-13785
  - 2019-10872 (40)
  - 2019-10873 (41)
  - 42
  - 2019-14494 (43) pdftops 2019-10871
  - 2018-19058 (44)
  - 2018-19059 (45)
  - 46
  - 2018-19060
  - 2018-11102 (47)
  - 2018-11224 (48)
  - 2018-18829 (49)
  - 2019-14441 (50)
  - 51
  - 2019-14443
  - 平均值
  - 超时 (T.O.)：超过120小时
  - pdfdetach
  - pdftoppm
  - objdump
  - objcopy
  - avconv
  - lrzip
  - cxxfilt
  - xmllint
  - cjpeg

#### 与现有技术的比较
为了将BEACON与表I中的（定向）模糊测试工具进行比较，我们运行了这些工具以重现表III中列出的CVE漏洞。

1. **与AFLGo的比较**：
   - 表III列出了比较结果，展示了AFLGo和BEACON在重现漏洞时的时间成本，以及BEACON所使用的静态分析时间。我们观察到AFLGo在120小时内无法重现51个漏洞中的34个，而BEACON可以成功重现所有漏洞，其中23个在5小时内完成，33个在24小时内完成（包括静态分析时间）。总体而言，BEACON比AFLGo实现了1.2倍至68.5倍的速度提升，平均速度提升了11.50倍。
   - 表IV比较了AFLGo、Hawkeye和BEACON在10次重复实验中的平均结果（秒）。由于Hawkeye不是开源的，我们使用其论文中报告的数据。p值是AFLGo和BEACON之间的比较。

| CVE           | AFLGo       | Hawkeye     | BEACON      | p-value    |
|---------------|-------------|-------------|-------------|------------|
| 2016-4487/8  | 412 (x2.7)  | 177 (x1.1)  | 151         | 0.00906    |
| 2016-4489    | 567 (x3.1)  | 206 (x1.1)  | 180         | 0.00804    |
| 2016-4490    | 306 (x3.7)  | 103 (x1.2)  | 82          | 0.01596    |
| 2016-4491    | 27,880 (x5.6)| 18,733 (x3.6)| 4,985       | 0.00018    |
| 2016-4492    | 540 (x1.7)  | 477 (x1.5)  | 325         | 0.00804    |
| 2016-6131    | 21,180 (x7.3)| 17,314 (x5.7)| 3,013       | 0.00018    |

- 图8显示了AFLGo和BEACON之间的覆盖率比较。x轴是表III中列出的CVE，y轴是相对于AFLGo的覆盖率。此外，表III还列出了重现一个漏洞所需的程序执行次数，以及BEACON能够提前停止的执行比例。我们可以观察到，在大多数情况下，超过80%的执行可以在模糊测试期间提前停止，从而节省大量时间。
- 我们观察到BEACON中用于预条件分析的时间最多为5小时，在许多情况下，它可以在几分钟内完成。如上所述，即使加上静态分析时间，BEACON仍然比AFLGo快得多。实际上，我们可以通过利用其他技术（例如增量分析）进一步加速静态分析。然而，这超出了本文的范围，我们将其作为未来的工作。

除了漏洞重现实验外，我们还运行了BEACON和AFLGo来测试CVE漏洞的补丁。令人惊讶的是，BEACON在Binutils、Ming和Lrzip中分别检测到了3个、9个和2个不完整的补丁，并额外检测到了8个bug，而AFLGo仅检测到了6个不完整的补丁。我们已经向开发人员报告了这些问题，并且所有问题都得到了确认。所有bug报告链接可通过此链接获得。

此外，我们评估了在重现漏洞时达到的覆盖率。结果如图8所示。有趣的是，我们发现BEACON和AFLGo的覆盖率波动较大。一方面，对于AFLGo可重现的漏洞，BEACON需要较少的覆盖率（平均91.2%）。另一方面，在某些情况下，特别是当AFLGo无法重现漏洞时，BEACON可以实现更高的覆盖率。我们发现原因是AFLGo花费了太多时间执行不可行路径，因此执行过滤率较高（>80%），如表III所示。

2. **与Hawkeye的比较**：
   - 我们还尝试与Hawkeye进行比较，这是另一个最近的定向灰盒模糊测试工具。由于Hawkeye不是开源的，我们使用其论文中报告的数据。图10显示了BEACON和BEACON*的比较结果。x轴是表III中列出的CVE漏洞，y轴分别是重现时间和提前停止路径的比例。我们使用120小时作为最大超时预算。

#### 路径切片和预条件检查的影响
回顾一下，除了基于预条件的路径剪枝外，BEACON还利用控制流图上的常规可达性分析来切掉根本无法到达目标代码的路径。为了评估路径切片和预条件检查对BEACON时间减少的贡献，我们还设置了一个简单的BEACON变体BEACON*，禁用了预条件分析。然后，我们重新运行了之前讨论的实验，使用BEACON和BEACON*。实验结果如图10所示，我们可以观察到BEACON在重现漏洞方面比BEACON*快得多（1.1倍至18.4倍），因为它通过预条件分析显著减少了无效路径的执行。