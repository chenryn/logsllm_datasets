### 3.17.14 FETCH_ROWS

The `FETCH_ROWS` function retrieves a row from a cursor.

#### Syntax
```sql
status INTEGER := DBMS_SQL.FETCH_ROWS(c INTEGER);
```

#### Parameters
- **c**: Cursor ID of the cursor from which to fetch a row.
- **status**: Returns 1 if a row was successfully fetched, 0 if no more rows to fetch.

#### Examples
The following example fetches rows from the `emp` table and displays the results.

```sql
DECLARE
    curid INTEGER;
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    v_hiredate DATE;
    v_sal NUMBER(7,2);
    v_comm NUMBER(7,2);
    v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, comm FROM emp';
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    DBMS_SQL.DEFINE_COLUMN(curid, 1, v_empno);
    DBMS_SQL.DEFINE_COLUMN(curid, 2, v_ename, 10);
    DBMS_SQL.DEFINE_COLUMN(curid, 3, v_hiredate);
    DBMS_SQL.DEFINE_COLUMN(curid, 4, v_sal);
    DBMS_SQL.DEFINE_COLUMN(curid, 5, v_comm);
    v_status := DBMS_SQL.EXECUTE(curid);
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME HIREDATE SAL COMM');
    DBMS_OUTPUT.PUT_LINE('----- ---------- ---------- -------- --------');
    
    LOOP
        v_status := DBMS_SQL.FETCH_ROWS(curid);
        EXIT WHEN v_status = 0;
        
        DBMS_SQL.COLUMN_VALUE(curid, 1, v_empno);
        DBMS_SQL.COLUMN_VALUE(curid, 2, v_ename);
        DBMS_SQL.COLUMN_VALUE(curid, 3, v_hiredate);
        DBMS_SQL.COLUMN_VALUE(curid, 4, v_sal);
        DBMS_SQL.COLUMN_VALUE(curid, 5, v_comm);
        
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' ||
                             TO_CHAR(v_hiredate, 'yyyy-mm-dd') || ' ' ||
                             TO_CHAR(v_sal, '9,999.99') || ' ' ||
                             TO_CHAR(NVL(v_comm, 0), '9,999.99'));
    END LOOP;
    
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
/
```

**Output:**
```
EMPNO ENAME HIREDATE SAL COMM
----- ---------- ---------- -------- --------
7369 SMITH 1980-12-17 800.00 .00
7499 ALLEN 1981-02-20 1,600.00 300.00
7521 WARD 1981-02-22 1,250.00 500.00
7566 JONES 1981-04-02 2,975.00 .00
7654 MARTIN 1981-09-28 1,250.00 1,400.00
7698 BLAKE 1981-05-01 2,850.00 .00
7782 CLARK 1981-06-09 2,450.00 .00
7788 SCOTT 1987-04-19 3,000.00 .00
7839 KING 1981-11-17 5,000.00 .00
7844 TURNER 1981-09-08 1,500.00 .00
7876 ADAMS 1987-05-23 1,100.00 .00
7900 JAMES 1981-12-03 950.00 .00
7902 FORD 1981-12-03 3,000.00 .00
7934 MILLER 1982-01-23 1,300.00 .00
```

### 3.17.15 IS_OPEN

The `IS_OPEN` function provides the capability to test if the given cursor is open.

#### Syntax
```sql
status BOOLEAN := DBMS_SQL.IS_OPEN(c INTEGER);
```

#### Parameters
- **c**: Cursor ID of the cursor to be tested.
- **status**: Set to TRUE if the cursor is open, set to FALSE if the cursor is not open.

### 3.17.16 LAST_ROW_COUNT

The `LAST_ROW_COUNT` function returns the number of rows that have been currently fetched.

#### Syntax
```sql
rowcnt INTEGER := DBMS_SQL.LAST_ROW_COUNT;
```

#### Parameters
- **rowcnt**: Number of rows fetched thus far.

#### Examples
The following example uses the `LAST_ROW_COUNT` function to display the total number of rows fetched in the query.

```sql
DECLARE
    curid INTEGER;
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    v_hiredate DATE;
    v_sal NUMBER(7,2);
    v_comm NUMBER(7,2);
    v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, comm FROM emp';
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    DBMS_SQL.DEFINE_COLUMN(curid, 1, v_empno);
    DBMS_SQL.DEFINE_COLUMN(curid, 2, v_ename, 10);
    DBMS_SQL.DEFINE_COLUMN(curid, 3, v_hiredate);
    DBMS_SQL.DEFINE_COLUMN(curid, 4, v_sal);
    DBMS_SQL.DEFINE_COLUMN(curid, 5, v_comm);
    v_status := DBMS_SQL.EXECUTE(curid);
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME HIREDATE SAL COMM');
    DBMS_OUTPUT.PUT_LINE('----- ---------- ---------- -------- --------');
    
    LOOP
        v_status := DBMS_SQL.FETCH_ROWS(curid);
        EXIT WHEN v_status = 0;
        
        DBMS_SQL.COLUMN_VALUE(curid, 1, v_empno);
        DBMS_SQL.COLUMN_VALUE(curid, 2, v_ename);
        DBMS_SQL.COLUMN_VALUE(curid, 3, v_hiredate);
        DBMS_SQL.COLUMN_VALUE(curid, 4, v_sal);
        DBMS_SQL.COLUMN_VALUE(curid, 5, v_comm);
        
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' ||
                             TO_CHAR(v_hiredate, 'yyyy-mm-dd') || ' ' ||
                             TO_CHAR(v_sal, '9,999.99') || ' ' ||
                             TO_CHAR(NVL(v_comm, 0), '9,999.99'));
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Number of rows: ' || DBMS_SQL.LAST_ROW_COUNT);
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
/
```

**Output:**
```
EMPNO ENAME HIREDATE SAL COMM
----- ---------- ---------- -------- --------
7369 SMITH 1980-12-17 800.00 .00
7499 ALLEN 1981-02-20 1,600.00 300.00
7521 WARD 1981-02-22 1,250.00 500.00
7566 JONES 1981-04-02 2,975.00 .00
7654 MARTIN 1981-09-28 1,250.00 1,400.00
7698 BLAKE 1981-05-01 2,850.00 .00
7782 CLARK 1981-06-09 2,450.00 .00
7788 SCOTT 1987-04-19 3,000.00 .00
7839 KING 1981-11-17 5,000.00 .00
7844 TURNER 1981-09-08 1,500.00 .00
7876 ADAMS 1987-05-23 1,100.00 .00
7900 JAMES 1981-12-03 950.00 .00
7902 FORD 1981-12-03 3,000.00 .00
7934 MILLER 1982-01-23 1,300.00 .00
Number of rows: 14
```

### 3.17.17 OPEN_CURSOR

The `OPEN_CURSOR` function creates a new cursor. A cursor must be used to parse and execute any dynamic SQL statement. Once a cursor has been opened, it can be re-used with the same or different SQL statements. The cursor does not have to be closed and re-opened in order to be re-used.

#### Syntax
```sql
c INTEGER := DBMS_SQL.OPEN_CURSOR;
```

#### Parameters
- **c**: Cursor ID number associated with the newly created cursor.

#### Examples
The following example creates a new cursor:

```sql
DECLARE
    curid INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    -- Further processing...
END;
/
```

### 3.17.18 PARSE

The `PARSE` procedure parses a SQL command or SPL block. If the SQL command is a DDL command, it is immediately executed and does not require running the `EXECUTE` function.

#### Syntax
```sql
DBMS_SQL.PARSE(c INTEGER, statement VARCHAR2, language_flag INTEGER);
```

#### Parameters
- **c**: Cursor ID of an open cursor.
- **statement**: SQL command or SPL block to be parsed. A SQL command must not end with the semi-colon terminator, however an SPL block does require the semi-colon terminator.
- **language_flag**: Language flag provided for compatibility with Oracle syntax. Use `DBMS_SQL.V6`, `DBMS_SQL.V7`, or `DBMS_SQL.native`. This flag is ignored, and all syntax is assumed to be in EnterpriseDB Advanced Server form.

#### Examples
The following anonymous block creates a table named `job`. Note that DDL statements are executed immediately by the `PARSE` procedure and do not require a separate `EXECUTE` step.

```sql
DECLARE
    curid INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, 'CREATE TABLE job (jobno NUMBER(3), jname VARCHAR2(9))', DBMS_SQL.native);
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
/
```

The following inserts two rows into the `job` table.

```sql
DECLARE
    curid INTEGER;
    v_sql VARCHAR2(50);
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    
    v_sql := 'INSERT INTO job VALUES (100, ''ANALYST'')';
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    v_status := DBMS_SQL.EXECUTE(curid);
    DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
    
    v_sql := 'INSERT INTO job VALUES (200, ''CLERK'')';
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    v_status := DBMS_SQL.EXECUTE(curid);
    DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
    
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
/
```

**Output:**
```
Number of rows processed: 1
Number of rows processed: 1
```

The following anonymous block uses the `DBMS_SQL` package to execute a block containing two `INSERT` statements. Note that the end of the block contains a terminating semi-colon, while in the prior example, each individual `INSERT` statement does not have a terminating semi-colon.

```sql
DECLARE
    curid INTEGER;
    v_sql VARCHAR2(100);
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    
    v_sql := 'BEGIN ' ||
             'INSERT INTO job VALUES (300, ''MANAGER''); ' ||
             'INSERT INTO job VALUES (400, ''SALESMAN''); ' ||
             'END;';
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    v_status := DBMS_SQL.EXECUTE(curid);
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
/
```

### 3.18 DBMS_UTILITY

The `DBMS_UTILITY` package provides support for various utility programs.

#### Functions/Procedures

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `ANALYZE_DATABASE` | Procedure   | Analyze database tables. |
| `ANALYZE_PART_OBJECT` | Procedure | Analyze a partitioned table. |
| `ANALYZE_SCHEMA` | Procedure | Analyze schema tables. |
| `CANONICALIZE` | Procedure | Canonicalizes a string â€“ e.g., strips off white space. |
| `COMMA_TO_TABLE` | Procedure | Convert a comma-delimited list of names to a table of names. |
| `DB_VERSION` | Procedure | Get the database version. |
| `EXEC_DDL_STATEMENT` | Procedure | Execute a DDL statement. |
| `FORMAT_CALL_STACK` | Function | Formats the current call stack. |
| `GET_CPU_TIME` | Function | Get the current CPU time. |
| `GET_DEPENDENCY` | Procedure | Get objects that are dependent upon the given object. |
| `GET_HASH_VALUE` | Function | Compute a hash value. |
| `GET_PARAMETER_VALUE` | Procedure | Get database initialization parameter settings. |
| `GET_TIME` | Function | Get the current time. |
| `NAME_TOKENIZE` | Procedure | Parse the given name into its component parts. |
| `TABLE_TO_COMMA` | Procedure | Convert a table of names to a comma-delimited list. |

#### Public Variables

| Variable | Data Type | Value | Description |
|----------|-----------|-------|-------------|
| `inv_error_on_restrictions` | PLS_INTEGER | 1 | Used by the `INVALIDATE` procedure. |
| `lname_array` | TABLE | For lists of long names. |
| `uncl_array` | TABLE | For lists of users and names. |

### 3.18.1 LNAME_ARRAY

The `LNAME_ARRAY` is for storing lists of long names, including fully-qualified names.

```sql
TYPE lname_array IS TABLE OF VARCHAR2(4000) INDEX BY BINARY_INTEGER;
```

### 3.18.2 UNCL_ARRAY

The `UNCL_ARRAY` is for storing lists of users and names.

```sql
TYPE uncl_array IS TABLE OF VARCHAR2(227) INDEX BY BINARY_INTEGER;
```

### 3.18.3 ANALYZE_DATABASE, ANALYZE_SCHEMA, and ANALYZE_PART_OBJECT

The `ANALYZE_DATABASE()`, `ANALYZE_SCHEMA()`, and `ANALYZE_PART_OBJECT()` procedures provide the capability to gather statistics on tables in the database. When you execute the `ANALYZE` statement, Postgres samples the data in a table and records distribution statistics in the `pg_statistics` system table.

- **ANALYZE_DATABASE** analyzes all tables in all schemas within the current database.
- **ANALYZE_SCHEMA** analyzes all tables in a given schema (within the current database).
- **ANALYZE_PART_OBJECT** analyzes a single table.

#### Syntax

```sql
DBMS_UTILITY.ANALYZE_DATABASE(method VARCHAR2 [, estimate_rows NUMBER [, estimate_percent NUMBER [, method_opt VARCHAR2 ]]]);
DBMS_UTILITY.ANALYZE_SCHEMA(schema VARCHAR2, method VARCHAR2 [, estimate_rows NUMBER [, estimate_percent NUMBER [, method_opt VARCHAR2 ]]]);
DBMS_UTILITY.ANALYZE_PART_OBJECT(schema VARCHAR2, object_name VARCHAR2 [, object_type CHAR [, command_type CHAR [, command_opt VARCHAR2 [, sample_clause ]]]]);
```

#### Parameters - `ANALYZE_DATABASE` and `ANALYZE_SCHEMA`

- **method**: Determines whether the `ANALYZE` procedure populates the `pg_statistics` table.

This concludes the detailed explanation and examples for the `DBMS_UTILITY` package and related functions.