### First Time Seen Detection with Splunk Security Essentials

#### Overview
This detection technique is designed to identify the first occurrence of various events, such as a user logging into a new server, accessing a new database table, or sending an external email. This method is versatile and can be applied to any "first time seen" scenario.

#### Example Scenarios

1. **First Logon to New Server**
   ```spl
   sourcetype=win*security
   | stats earliest(_time) as earliest latest(_time) as latest by user, dest
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

2. **Authentication against a New Domain Controller**
   ```spl
   sourcetype=win*security
   | stats earliest(_time) as earliest latest(_time) as latest by user, dest
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

3. **Familiar Filename on a New Path**
   ```spl
   sourcetype=win*security EventCode=4688 `IncludeMicrosoftFiles`
   | stats earliest(_time) as earliest latest(_time) as latest by filename, path
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

4. **New Database Table Accessed**
   ```spl
   sourcetype=win*security OR sourcetype=database
   | stats earliest(_time) as earliest latest(_time) as latest by user, dc
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

5. **First Access to a New Source Code Repository**
   ```spl
   sourcetype=source_code_access
   | stats earliest(_time) as earliest latest(_time) as latest by user, repo
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

6. **First External Email Claiming to be Internal from Server**
   ```spl
   sourcetype=cisco:esa src_user=*@mycompany.com src!=10.0.0.0/8
   | stats earliest(_time) as earliest latest(_time) as latest by user, src
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

7. **New Interactive Logon by Service Account**
   ```spl
   sourcetype=win*security user=srv_* (Logon_Type=2 OR Logon_Type=11 OR Logon_Type=12)
   | stats earliest(_time) as earliest latest(_time) as latest by user, dest
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

8. **New Parent Process for cmd.exe**
   ```spl
   sourcetype=win*security EventCode=4688 filename=cmd.exe
   | stats earliest(_time) as earliest latest(_time) as latest by parent_process
   | eval isOutlier=if(earliest >= relative_time(now(), "-1d@d"), 1, 0)
   ```

### Time Series Detection

#### Background and Challenges
- **Objective**: Detect anomalies in user behavior, such as printing more documents, logging in more frequently, or accessing more devices than usual.
- **Power of Time Series Analytics**: These analytics are fundamental to many User and Entity Behavior Analytics (UEBA) tools and have been used in Splunk Enterprise and Enterprise Security for years.
- **Versatility**: The possibilities for time series detections are vast and depend on your data and use cases.

#### Trends among Splunk Core/ES Use Cases
- **Common**:
  - Simple to medium complexity security logic
  - Time series oriented
  - Often require tuning
- **Rare**:
  - Advanced Machine Learning driven
  - Non-time series state management
  - Identity normalization based on DHCP

#### Example UBA Splunk Core/ES Use Cases
- **First Logon to New System**
- **Unusually High Number of Connection Attempts**
- **Unusually High Number of Records Accessed/Printed/Exported**
- **Unusually High Number of Files Changed**
- **Rare SHAs, TLS Certs, etc.**
- **User Actions from Service Account (Proxy, Failed Password Changes)**
- **User Actions from Expired Account**

#### Lateral Movement Detection
- **Objective**: Identify attackers expanding their control over systems and data.
- **Approach**: Analyze the number of logins per user or the number of destinations per source IP.
- **Example**:
  - **Network Data**: If a user typically communicates with 10 hosts but suddenly starts communicating with 10,000 hosts, it should trigger an alarm.

#### Detecting Variations Visually
- **Consistently Large**: Regular behavior
- **Inconsistent**: Anomalous behavior

#### Standard Deviation in Time Series Analysis
- **Definition**: A measure of the variance for a series of numbers.
- **Example**:
  - **User | Day One | Day Two | Day Three | Day Four | Avg | Stdev**
    - Jane | 100 | 123 | 79 | 145 | 111.75 | 28.53
    - Jack | 100 | 342 | 3 | 2 | 111.75 | 160.23
  - **User | Day Five | # StDev Away from Average… aka How Unusual?**
    - Jane | 500 | 12.6
    - Jack | 500 | 2.42

#### Improving Correlation Searches
- **Example**:
  ```spl
  … | stats avg(eval(if(_time = relative_time(now(), "1d"), count, null))) as latest
     | stats avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     | stats stdev(count) as stdev
     | where latest > (stdev + average)
  ```

#### Other Variations
- **Number of Logins Per Day**
  ```spl
  index=windows OR index=login user=*
  | bin span=1d _time
  | stats count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

- **Number of Servers Logged Into**
  ```spl
  index=windows OR index=login user=*
  | bin span=1d _time
  | stats dc(host) as count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

- **Number of Pages Printed**
  ```spl
  index=windows pages printed
  | bin span=1d _time
  | stats sum(Num_Pages) as count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

- **Number of Credit Cards Viewed**
  ```spl
  index=crm_logs viewed card
  | bin span=1d _time
  | stats dc(card_id) as count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

- **Number of Files Written to USB**
  ```spl
  index=sep* api="File Write" tag=target_users `sep_write_exclude`
  | bin span=1d _time
  | stats count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

- **Number of Patient Records Viewed**
  ```spl
  index=health_logs sourcetype=record:access
  | bin span=1d _time
  | stats dc(patient_id) as count by user, _time
  | stats max(eval(if(_time >= relative_time(now(), "1d"), count, null))) as latest
     avg(eval(if(_time < relative_time(now(), "1d"), count, null))) as average
     stdev(count) as stdev
  | where latest > (stdev + average)
  ```

#### Addressing Concerns about Standard Deviation
- **Traditional Use Case**: Predicting the percentage of a population that fits into a certain fraction.
- **Security World**: Distributions are often not normal, leading to justified concerns about relying on standard deviation.
- **Rule of Thumb**:
  - **Above 3 StDev**: Anomalous
  - **Above 6 StDev**: Suspicious
  - **Anomalous Events**: Track but do not send to SOC
  - **Suspicious Events**: Send to SOC

- **Alternative Approaches**: Consider different methods for time series detection if standard deviation does not fit your dataset.