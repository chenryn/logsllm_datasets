1. S chooses s ← {0, 1}k at random. Let si denote the i-th bit of s.
2. R forms m × k matrices T0, T1 in the following way:
• For j ∈ [m], choose t0,j ← {0, 1}k and set t1,j = C(rj) ⊕ t0,j.
1 denote the i-th column of matrices T0, T1 respectively.
0, ti
Let ti
3. S and R interact with OTk
m in the following way:
• S acts as receiver with input {si}i∈[k].
• R acts as sender with input {ti
• S receives output {qi}i∈[k].
0, ti
1}i∈[k].
S forms m × k matrix Q such that the i-th column of Q is the vector qi. (Note qi = ti
.) Let qj
denote the j-th row of Q. Note, qj = ((t0,j ⊕ t1,j) · s) ⊕ t0,j. Simplifying, qj = t0,j ⊕ (C(rj) · s).
si
4. For j ∈ [m], S outputs the PRF seed ((C, s), (j, qj)).
5. For j ∈ [m], R outputs relaxed PRF output (C, j, t0,j).
Figure 2: The BaRK-OPRF protocol
5
Improving Private Set Intersection
The main application of BaRK-OPRF is to improve the performance of semi-honest-secure private set
intersection (PSI). Pinkas et al. [PSZ14] give a thorough summary of many diﬀerent paradigms for PSI
in this model.
For our purposes, we summarize only the most eﬃcient PSI protocol, which is the OT-based paradigm
of [PSZ14] including the optimizations suggested in follow up work [PSSZ15]. Hereafter we refer to their
protocol as the “PSSZ” protocol.
5.1 The OPRF Implicit in PSSZ
The main building block of PSSZ, private equality test, can be viewed as a relaxed OPRF based on random
OTs (i.e., oblivious transfers of random messages), which can be obtained eﬃciently from OT extension.
The protocol is as follows, where Bob has input r, with (cid:96) = |r|.
• The parties perform (cid:96) 1-out-of-2 OTs of random messages, with Alice as receiver. Bob acts as receiver
and uses the bits of r as his choice bits. In the ith OT, Alice learns random strings mi,0 and mi,1,
while Bob learns mi,r[i].
(cid:1), where H is a random oracle. One can then view F as a
• Deﬁne the mapping F (x) = H(cid:0)(cid:76)
i mi,x[i]
PRF whose keys are the mi,b values (known to Alice). Bob learns the output of F on r only. More
precisely, he learns relaxed output {mi,r[i]}i, for which all other outputs of F are pseudorandom.
10
In this description, we have treated r as a string of bits, and therefore use 1-out-of-2 (random) OTs.
However, when using the OT extension protocol of [KK13], the cost of a 1-out-of-2 random OT is essentially
the same as a 1-out-of-256 random OT. Hence, PSSZ interpret r as strings of characters over {0, 1}8. The
protocol uses one instance of 1-out-of-256 ROT for each byte (not bit) of r.
Regardless of whether one uses 1-out-of-2 or 1-out-of-256 OT, this OPRF protocol has cost that scales
with length of the input r, whereas ours has cost independent of the input length. Our main improvement
to PSSZ consists of replacing their OPRF with ours. The rest of the protocol is largely unchanged.
5.2 PSI from OPRF
We now describe how the PSSZ paradigm achieves PSI using an OPRF. This part of the overall PSI pro-
tocol is nearly identical between our implementation and that of [PSSZ15] (we include an additional small
optimization). For concreteness, we describe the parameters used in PSSZ when the parties have roughly
the same number n of items.
The protocol relies on Cuckoo hashing [PR04] with 3 hash functions, which we brieﬂy review now. To
assign n items into b bins using Cuckoo hashing, ﬁrst choose random functions h1, h2, h3 : {0, 1}∗ → [b] and
initialize empty bins B[1, . . . , b]. To hash an item x, ﬁrst check to see whether any of the bins B[h1(x)],
B[h2(x)], B[h3(x)] are empty. If so, then place x in one of the empty bins and terminate. Otherwise, choose
a random i ∈ {1, 2, 3}, evict the item currently in B[hi(x)], replacing it with x, and then recursively try to
insert the evicted item. If this process does not terminate after a certain number of iterations, then the ﬁnal
evicted element is placed in a special bin called the stash.
PSSZ use Cuckoo hashing for PSI in the following way. First, the parties choose 3 random hash functions
h1, h2, h3 suitable for 3-way Cuckoo hashing. Suppose Alice has a set X of inputs and Bob has a set Y ,
where |X| = |Y | = n. Bob maps his items into 1.2n bins using Cuckoo hashing and a stash of size s. At this
point Bob has at most one item per bin and at most s items in his stash — he pads his input with dummy
items so that each bin contains exactly 1 item and the stash contains exactly s items.
The parties then run 1.2n + s instances of an OPRF, where Bob plays the role of receiver and uses each
of his 1.2n + s items as OPRF input. Let F (ki,·) denote the PRF evaluated in the ith OPRF instance.
If Bob has mapped item y to bin i via cuckoo hashing, then Bob learns F (ki, y); if Bob has mapped y to
position j in the stash, then Bob learns F (k1.2n+j, y).
On the other hand, Alice can compute F (ki,·) for any i. So she computes sets of candidate PRF outputs:
H = {F (khi(x), x) | x ∈ X and i ∈ {1, 2, 3}}
S = {F (k1.2n+j, x) | x ∈ X and j ∈ {1, . . . , s}}
She randomly permutes elements of H and elements of S and sends them to Bob. Bob can identify the
intersection of X and Y as follows.
If Bob has an item y mapped to the stash, he checks whether the
associated OPRF output is present in S. If Bob has an item y not mapped to the stash, he checks whether
its associated OPRF output is in H.
Intuitively, the protocol is secure against a semi-honest Bob by the PRF property. For an item x ∈ X \ Y ,
the corresponding PRF outputs F (ki, y) are pseudorandom.
It is easy to see that security holds even if
Bob learns relaxed PRF outputs and the PRF achieves RK-PRF security, Deﬁnition 4 (i.e., Alice’s PRF
outputs are pseudorandom to an adversary who learns relaxed PRF outputs). Similarly, if the PRF outputs
are pseudorandom even under related keys, then it is safe for the OPRF protocol to instantiate the PRF
instances with related keys.
F (ki(cid:48), x(cid:48)) for x (cid:54)= x(cid:48)). Below we discuss the parameters required to prevent such collisions.
The protocol is correct as long as the PRF does not introduce any further collisions (i.e., F (ki, x) =
An Optimization.
In the protocol summary above, Bob must search for each of his OPRF outputs, either
in the set H or the set S. Furthermore, |H| = 3n and |S| = sn. Even when using a reasonable data structure
for these comparisons, they have a non-trivial eﬀect on the protocol’s running time. We now describe an
optimization that reduces this cost (by approximately 10% in our implementation). The full protocol is
described in Figure 3.
Our modiﬁcation works as follows. First, Bob keeps track of a hash index z ∈ {1, 2, 3} for each item
y ∈ Y that is not mapped to the stash. For example, if Bob’s Cuckoo hashing maps y to bin #h2(y), then
11
Bob associates z = 2 with y. If for example y is mapped to bin by two hash functions #h1(y) = #h2(y)
then Bob may choose either z = 1 or z = 2 arbitrarily.
Then in the ﬁrst 1.2n OPRF instances, Bob uses input y(cid:107)z. For the OPRF instances associated with the
stash, he does not need to append the index z. Summarizing, if Bob has mapped item to position j in the
stash, then Bob learns F (k1.2n+j, y). If he has not mapped y to the stash, then he learns F (khz(x), y(cid:107)z) for
exactly one z.
Then Alice computes the following sets:
Hi = {F (khi(x), x(cid:107)i) | x ∈ X}, for i ∈ {1, 2, 3}
Sj = {F (k1.2n+j, x) | x ∈ X}, for j ∈ {1, . . . , s}
She randomly permutes the contents of each Hi and each Sj and sends them to Bob. For each item y of Bob,
if y is not mapped to the stash then Bob can whether F (khz(y), y(cid:107)z) ∈ Hz, for the associated hash-index z.
If his Cuckoo hashing maps item y to position j in the stash, he can check whether F (k1.2n+j, y) ∈ Sj.
The reason for appending the hash-index z to the PRF input is as follows. Suppose h1(x) = h2(x) = i,
which is indeed can happen with noticeable probability, since the output range of h1, h2 is small ([1.2n]).
Without appending z, both H1 and H2 would contain the identical value F (ki, x). This would leak the fact
that a collision h1(x) = h2(x) occurred. Such an event is input-dependent so cannot be simulated.3
With our optimization: (1) All of the calls to the PRF made by Alice (to compute the Hi’s and Sj’s)
invoke the PRF on distinct key-input pairs. This ensures that the contents of these sets can be easily
simulated; (2) Bob searches for each of his PRF outputs within only one set (either an Hi or an Sj) of n
items. Contrast this with the approach described previously, where Bob must ﬁnd each OPRF output in
either a set of size 3n or sn (depending on whether the item is in the stash or not).
Recall that the protocol is correct as long as there are no spurious collisions among PRF outputs. Since
there are at most n2 opportunities for a spurious collision (Bob searches each time for a PRF output in a
set of n items), we can limit the overall probability of a spurious collision to 2−σ by using PRF outputs of
length σ + log2(n2).
5.3 Comparing OPRF Subprotocols
When comparing our protocol to that of PSSZ, the major diﬀerence is the choice of OPRF subprotocols.
Later in Section 6 we give an empirical comparison of the protocols. For now, we derive an analytical
comparison of the costs of the two OPRF subprotocols, to give a better sense of our improvement.
We focus on the communication cost associated with the OT primitives. Communication cost is an
objective metric, and it often reﬂects the bottleneck in practice (especially in these protocols where essentially
all of the cryptographic computations are precomputed). Although the computation costs of our protocols
are diﬀerent (e.g., ours requires computing the pseudorandom code, which is a cryptographic operation),
communication cost is nonetheless a good proxy for computation costs in OT extension protocols. The data
that is communicated in these protocols is a large matrix that must be transposed, and this transposition is
the primary contributor to the computational cost.
The main beneﬁt of our protocol is that its cost does not scale with the size of the items being compared.
Each instance of OPRF consumes just one row of the OT extension matrix. The width of this OT extension
matrix is exactly the length of the pseudorandom code (PRC). In Section 6.1 we describe how to compute an
appropriate length of PRC. For the range of parameters we consider, this parameter is 424–448 bits. Hence
the OT-cost of one instance of our OPRF protocol is 424–448 bits. The speciﬁc numbers are in Table 1.
The PSSZ OPRF protocol uses several instances of 1-out-of-256 ROT. With security parameter 128, the
cost of such a random OT is 256 bits using the OT extension of [KK13].
The main optimization of [PSSZ15] allows for the OPRF subprotocols to be performed on items of length
(cid:96)∗ = (cid:96) − log n (n is the number of items in the overall PSI protocol) rather than length (cid:96). Let (cid:96)∗ denote
this eﬀective item length. Then (cid:96)∗/8 instances of 1-out-of-256 ROT are needed for one OPRF instance. The
total OT-cost of their OPRF protocol is therefore 256(cid:96)∗/8 = 32(cid:96)∗ bits.
3The protocol and implementation of PSSZ do not account for such collisions among the Cuckoo hash functions. Duplicate
values will appear in H in such an event.
12
Parameters: Alice has input X; Bob has input Y , with |X| = |Y | = n. s is an upper bound on the
stash size for Cuckoo hashing.
1. Bob speciﬁes random hash functions h1, h2, h3 : {0, 1}∗ → [1.2n] and tells them to Alice.
2. Bob assigns his items Y into 1.2n bins using Cuckoo hashing. Let Bob keep track of z(y) for each
y so that: if z(y) = ⊥ then y is in the stash; otherwise y is in bin hz(y)(y). Arrange the items in
the stash in an arbitrary order.
Bob selects OPRF inputs as follows: for i ∈ [1.2n], if bin #i is empty, then set ri to a dummy
value; otherwise if y is in bin #i then set ri = y(cid:107)z(y). For i ∈ [s], if position i in the stash is y,
then set ri = y; otherwise set ri to a dummy value.
3. The parties invoke 1.2n + s OPRF instances, with Bob the receiver with inputs (r1, . . . , r1.2n+s).
Alice receives (k1, . . . , k1.2n+s) and Bob receives F (ki, ri) for all i.
4. Alice computes:
Hi = {F (khi(x), x(cid:107)i) | x ∈ X}, for i ∈ {1, 2, 3}
Sj = {F (k1.2n+j, x) | x ∈ X}, for j ∈ {1, . . . , s}
and sends a permutation of each set to Bob.
5. Bob initializes an empty set O and does the following for y ∈ Y : If z(y) = ⊥ and y is at position j
in the stash and F (k1.2n+j, y) ∈ Sj, then Bob adds y to O. If z(y) (cid:54)= ⊥ and F (khz(y)(y), y(cid:107)z(y)) ∈
Hz(y) then Bob adds y to O.
6. Bob sends O to Alice and both parties output O.
Figure 3: Our optimization to the PSSZ PSI protocol, written in terms of an OPRF functionality.
Hence, we see that our protocol has lower communication cost whenever (cid:96)∗ > 448/32 = 14. Among the
diﬀerent parameter settings reported in [PSSZ15], the only conﬁguration with (cid:96)∗ < 14 is for PSI of n ≥ 220
items of length 32 bits. For all other conﬁgurations, our PSI protocol has lower communication cost, with
the savings increasing as the items become longer. See Table 1.
Remark on pre-hashing long PSI inputs. Our improvements to PSI are most signiﬁcant for PSI of
long items. Yet, if the parties have items which are very long strings (say, thousands of bits), they can agree
on a random hash function, hash their items locally, and perform PSI on the shorter hashes instead. The
reader may rightfully wonder whether this idea make our improvements irrelevant!
For this approach (hash-then-PSI) to work, we must ensure that the hashing introduces no collisions
among the parties’ items. If the parties have n items each, and we wish to limit the probability of a collision
to 2−σ, then we must choose a hash function whose length is σ + 2 log n. When using the optimizations of
[PSSZ15], the eﬀective item length can be reduced from σ + 2 log n to σ + log n bits.
We see that pre-hashing the items cannot reduce their eﬀective length below σ bits, where σ is a sta-
tistical security parameter. Standard practice suggests σ ≥ 40, and yet our protocol outperforms [PSSZ15]
whenever the eﬀective item length is at least 14 bits. Hence hash-then-PSI does not allow one to bypass our
improvement to [PSSZ15].
On a similar note, in our experimental results we report performance of the protocols only for PSI inputs
up to 128 bits long. For statistical security parameter σ = 40, as long as the parties have at most 234 (17
billion) items, they can use hash-then-PSI with a 128-bit hash.
13
n
28
28
28
212
212
212
216
216
216
220
220
220
224
224
224
(cid:96)
32
64
128
32
64
128
32
64
128
32
64
128
32
64
128
(cid:96)∗
24
56
120
20
52
116
16
48
112
12
44
108
8