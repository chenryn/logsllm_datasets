Generated RSA key pair using the NSS database
```
这样产生一个用于主机的 RSA 秘钥组。产生 RSA
的过程要花上好几分钟，尤其是在带低熵的虚拟机上。
:::
::: para
要查看公共秘钥，以 `root`{.systemitem} 身份在指定为
["[left]{.quote}"]{.quote} 的主机上输入以下命令：
``` screen
~]# ipsec showhostkey --left
# rsakey AQOrlo+hO
leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
```
您需要这个秘钥来增加配置文件，如下文所示：
:::
::: para
以 `root`{.systemitem} 身份在指定为 ["[right]{.quote}"]{.quote}
的主机上输入以下命令：
``` screen
~]# ipsec newhostkey --configdir /etc/ipsec.d \
          --output /etc/ipsec.d/www.example.com.secrets
Generated RSA key pair using the NSS database
```
要查看公共秘钥，以 `root`{.systemitem} 身份在指定为
["[right]{.quote}"]{.quote} 的主机上输入以下命令：
``` screen
~]# ipsec showhostkey --right
# rsakey AQO3fwC6n
rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
```
您将需要把这个秘钥增加到配置文件。
:::
::: para
秘密的部分被存储在 `/etc/ipsec.d/*.db`{.filename} 文件里，也称为 ["[NSS
数据库]{.quote}"]{.quote}。
:::
::: para
要为这种主机对主机的通道建立配置文件，要把上面的行
`leftrsasigkey=`{.literal} 和 `rightrsasigkey=`{.literal} 增加到一个位于
`/etc/ipsec.d/`{.filename} 目录中的自定义配置里。要让
[**Libreswan**]{.application} 读出用户配置文件，则以 `root`{.systemitem}
身份使用编辑器来编辑主配置文件 `/etc/ipsec.conf`{.filename} ，并通过移除
`#`{.literal} 注释符来使用以下行，这一行看起来是这样：
``` synopsis
include /etc/ipsec.d/*.conf
```
:::
::: para
以 `root`{.systemitem}
身份使用编辑器，用如下格式创建一个带有合适名称的文件：
``` synopsis
/etc/ipsec.d/my_host-to-host.conf
```
按照如下方式编辑文件：
``` screen
conn mytunnel
    leftid=@west.example.com
    left=192.1.2.23
    leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
    rightid=@east.example.com
    right=192.1.2.45
    rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
    authby=rsasig
    # load and initiate automatically
    auto=start
```
您可以在左右主机上使用完全相同的配置文件。系统会自动侦测
["[left]{.quote}"]{.quote} 或
["[right]{.quote}"]{.quote}。如果其中一个主机是移动主机，致使
`IP`{.systemitem} 地址无法提前获取，那么就在移动主机上把
`%defaultroute`{.literal} 用作它的 `IP`{.systemitem}
地址。它能自动获取动态 `IP`{.systemitem}
地址。在接受了来自接入手机的连接的静态主机上，用 `%any`{.literal}
指定移动主机的 `IP`{.systemitem} 地址。
:::
::: para
确保 `leftrsasigkey`{.option} 值从 ["[left]{.quote}"]{.quote}
主机上获取，确定 `rightrsasigkey`{.option} 从
["[right]{.quote}"]{.quote} 主机上获取。
:::
::: para
重启 `ipsec`{.systemitem} 来确保它读取新的配置：
``` screen
~]# systemctl restart ipsec
```
:::
::: para
以 `root`{.systemitem} 输入以下命令来加载 `IPsec`{.systemitem} 通道：
``` screen
~]# ipsec auto --add mytunnel
```
要建立通道，在 left 或者 right，以 root 目录输入以下命令：
``` screen
~]# ipsec auto --up mytunnel
```
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Verify_Host-To-Host_VPN_Using_Libreswan}4.7.3.1. 查证使用 Libreswan 的主机对主机 VPN {.title}
:::
::: para
`IKE`{.systemitem} 协议产生于 `UDP`{.systemitem} 端口 500。
`IPsec`{.systemitem} 数据包展示为
`Encapsulated Security Payload`{.systemitem} （ESP）数据包。当 VPN
连接需要通过一个 NAT 路由器时，`ESP`{.systemitem} 数据包在端口 4500
上被打包在 `UDP`{.systemitem} 数据包里。
:::
::: para
要核实数据包正在通过 VPN 通道被发送，以 `root`{.systemitem}
身份按照以下格式输入一条命令：
``` screen
~]# tcpdump -n -i interface esp and udp port 500 and udp port 4500
00:32:32.632165 IP 192.1.2.45 > 192.1.2.23: ESP(spi=0x63ad7e17,seq=0x1a), length 132
00:32:32.632592 IP 192.1.2.23 > 192.1.2.45: ESP(spi=0x4841b647,seq=0x1a), length 132
00:32:32.632592 IP 192.0.2.254 > 192.0.1.254: ICMP echo reply, id 2489, seq 7, length 64
00:32:33.632221 IP 192.1.2.45 > 192.1.2.23: ESP(spi=0x63ad7e17,seq=0x1b), length 132
00:32:33.632731 IP 192.1.2.23 > 192.1.2.45: ESP(spi=0x4841b647,seq=0x1b), length 132
00:32:33.632731 IP 192.0.2.254 > 192.0.1.254: ICMP echo reply, id 2489, seq 8, length 64
00:32:34.632183 IP 192.1.2.45 > 192.1.2.23: ESP(spi=0x63ad7e17,seq=0x1c), length 132
00:32:34.632607 IP 192.1.2.23 > 192.1.2.45: ESP(spi=0x4841b647,seq=0x1c), length 132
00:32:34.632607 IP 192.0.2.254 > 192.0.1.254: ICMP echo reply, id 2489, seq 9, length 64
00:32:35.632233 IP 192.1.2.45 > 192.1.2.23: ESP(spi=0x63ad7e17,seq=0x1d), length 132
00:32:35.632685 IP 192.1.2.23 > 192.1.2.45: ESP(spi=0x4841b647,seq=0x1d), length 132
00:32:35.632685 IP 192.0.2.254 > 192.0.1.254: ICMP echo reply, id 2489, seq 10, length 64
```
其中 *interface* 就是用来负荷通信的接口。要停止使用
[**tcpdump**]{.application} 捕获的数据包，按下
[**Ctrl**]{.keycap}+[**C**]{.keycap}。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
[**tcpdump**]{.application} 命令完全无法和 `IPsec`{.systemitem}
互动。它仅仅识别向外的加密程序包，而不是向外的纯文档文件程序包。它可以识别进入的加密程序包和进入的解码程序包。如果可以，在两个机器之间的路由器而非其中一个终端上运行
[**tcpdump**]{.application}。
:::
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Site-To-Site_VPN_Using_Libreswan}4.7.4. 使用 Libreswan 的点对点 VPN {.title}
:::
::: para
要为 [**Libreswan**]{.application} 创建一个点对点 `IPsec`{.systemitem}
VPN，并连接两个网络，要在两个主机之间创建一个 `IPsec`{.systemitem}
通道，配置终端允许一个或者更多子网通过。所以，它们可以被看作是通向网络远程部分的门户。点对点
VPN 的配置和主机对主机 VPN
仅有的不同在于，必须在配置文件中指定一个或者更多的网络或子网。
:::
::: para
要配置 [**Libreswan**]{.application} 来创建一个点对点
`IPsec`{.systemitem} VPN，首先按照 ＜[第 4.7.3 节 "使用 Libreswan
的主机对主机
VPN"](#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Host-To-Host_VPN_Using_Libreswan){.xref}＞
所述，配置一个主机对主机 `IPsec`{.systemitem}
VPN，然后拷贝或者移动文件到一个带有适当名称的文件里，例如
`/etc/ipsec.d/my_site-to-site.conf`{.filename}。以 `root`{.systemitem}
身份使用编辑器编辑，编辑自定义配置文件
`/etc/ipsec.d/my_site-to-site.conf`{.filename} 如下：
``` screen
conn mysubnet
     also=mytunnel
     leftsubnet=192.0.1.0/24
     rightsubnet=192.0.2.0/24
conn mysubnet6
     also=mytunnel
     connaddrfamily=ipv6
     leftsubnet=2001:db8:0:1::/64
     rightsubnet=2001:db8:0:2::/64
conn mytunnel
    auto=start
    leftid=@west.example.com
    left=192.1.2.23
    leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
    rightid=@east.example.com
    right=192.1.2.45
    rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
    authby=rsasig
```
:::
::: para
要建立通道，需重启 [**Libreswan**]{.application}
或者手动加载，并初始化所有连接，以 `root`{.systemitem}
身份使用以下命令：
``` screen
~]# ipsec auto --add mysubnet
```
``` screen
~]# ipsec auto --add mysubnet6
```
``` screen
~]# ipsec auto --add mytunnel
```
``` screen
~]# ipsec auto --up mysubnet
104 "mysubnet" #1: STATE_MAIN_I1: initiate
003 "mysubnet" #1: received Vendor ID payload [Dead Peer Detection]
003 "mytunnel" #1: received Vendor ID payload [FRAGMENTATION]
106 "mysubnet" #1: STATE_MAIN_I2: sent MI2, expecting MR2
108 "mysubnet" #1: STATE_MAIN_I3: sent MI3, expecting MR3
003 "mysubnet" #1: received Vendor ID payload [CAN-IKEv2]
004 "mysubnet" #1: STATE_MAIN_I4: ISAKMP SA established {auth=OAKLEY_RSA_SIG cipher=aes_128 prf=oakley_sha group=modp2048}
117 "mysubnet" #2: STATE_QUICK_I1: initiate
004 "mysubnet" #2: STATE_QUICK_I2: sent QI2, IPsec SA established tunnel mode {ESP=>0x9414a615 0x06fe2099 0x9414a615 >0x1a8eb4ef xfrm=AES_128-HMAC_SHA1 NATOA=none NATD=none DPD=none}
```
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Verify_Site-To-Site_VPN_Using_Libreswan}4.7.4.1. 核实带有 Libreswan 的点对点VPN {.title}
:::
::: para
核实数据包正在通过 VPN 通道被发送，是和 ＜[第 4.7.3.1 节 "查证使用
Libreswan 的主机对主机
VPN"](#chap-Hardening_Your_System_with_Tools_and_Services.html#Verify_Host-To-Host_VPN_Using_Libreswan){.xref}
＞中所解释的完全一样的过程。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Site-To-Site_Single_Tunnel_VPN_Using_Libreswan}4.7.5. 使用 Libreswan 的点对点单一隧道 VPN {.title}
:::
::: para
通常，当点对点的通道创建完成，网关需要使用它们内在的 `IP`{.systemitem}
地址，而不是它们公共的 `IP`{.systemitem}
地址来互相联系。这使用单一隧道可以实现。如果名为 `west`{.systemitem} 的
left 的主机，拥有内在的 `IP`{.systemitem} 地址
`192.0.1.254`{.systemitem}，如果名为`east`{.systemitem} 的 right
的主机拥有内在的 `IP`{.systemitem} 地址
`192.0.2.254`{.systemitem}，可以使用单一隧道的配置可以被使用：
``` screen
conn mysubnet
    leftid=@west.example.com
    leftrsasigkey=0sAQOrlo+hOafUZDlCQmXFrje/oZm [...] W2n417C/4urYHQkCvuIQ==
    left=192.1.2.23
    leftsourceip=192.0.1.254
    leftsubnet=192.0.1.0/24
    rightid=@east.example.com
    rightrsasigkey=0sAQO3fwC6nSSGgt64DWiYZzuHbc4 [...] D/v8t5YTQ==
    right=192.1.2.45
    rightsourceip=192.0.2.254
    rightsubnet=192.0.2.0/24
    auto=start
    authby=rsasig
```
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Subnet_Extrusion_Using_Libreswan}4.7.6. 子网延伸使用 Libreswan {.title}
:::
::: para
经常， `IPsec`{.systemitem} 被部署在集散体系结构。每个叶节点都有
`IP`{.systemitem}
范围，它是更大范围的一部分。叶通过集线器相互联系。这被称为 "
*子网延伸*"。在下列例子中，我们使用 `10.0.0.0/8`{.systemitem}
配置总部及使用更小两个 `/24`{.systemitem} 子网的分支。
:::
::: para
在总部：