    inst = {
        0: ("exit", 0),
        1: ("push", 4),
        2: ("pop", 0),
        3: ("add", 2),
        4: ("sub", 2),
        5: ("mul", 2, ''),
        6: ("rshift", 2, ''),
        7: ("mov", 2),
        8: ("movs", 2),
        9: ("xor", 2),
        10: ("or", 2)
    }
    ip = 0
    disasm = ''
    while True:
        if ip >= len(code):
            break
        opcode = code[ip]
        if not inst.has_key(opcode):
            disasm += "invalid\n"
            continue
        mnem = inst[opcode][0]
        addition = inst[opcode][1]
        if addition == 0:
            oprand = ''
        elif addition == 4:
            num = code[ip+1] + (code[ip+2] << 8) + (code[ip+3] << 16) + (code[ip+4] << 24)
            oprand = hex(num)
        elif addition == 2 and len(inst[opcode]) != 3:
            oprand = "[%d], [%d]" % (code[ip+1], code[ip+2])
        elif addition == 2:
            oprand = "[%d], %d" % (code[ip+1], code[ip+2])
        disasm += "0x%02x: %s %s\n" % (ip, mnem, oprand)
        ip += addition+1
    print disasm
得到的汇编指令如下
    0x00: xor [4], [4]
    0x03: xor [0], [0]
    0x06: movs [1], [0]
    0x09: movs [2], [1]
    0x0c: movs [3], [2]
    0x0f: rshift [1], 4
    0x12: mul [1], 21
    0x15: mov [0], [1]
    0x18: sub [0], [3]
    0x1b: push 0x1d7ecc6b
    0x20: movs [1], [3]
    0x23: sub [0], [1]
    0x26: pop
    0x27: or [4], [0]
    0x2a: xor [0], [0]
    0x2d: movs [1], [0]
    0x30: movs [2], [1]
    0x33: movs [3], [2]
    0x36: rshift [3], 8
    0x39: mul [3], 3
    0x3c: mov [0], [3]
    0x3f: add [0], [2]
    0x42: push 0x6079797c
    0x47: movs [1], [3]
    0x4a: sub [0], [1]
    0x4d: pop
    0x4e: or [4], [0]
    0x51: xor [0], [0]
    0x54: movs [1], [0]
    0x57: movs [2], [1]