title:EASiER: encryption-based access control in social networks with efficient
revocation
author:Sonia Jahid and
Prateek Mittal and
Nikita Borisov
EASiER: Encryption-based Access Control in Social
Networks with Efﬁcient Revocation
Sonia Jahid
University of Illinois at
Urbana-Champaign
PI:EMAIL
Prateek Mittal
University of Illinois at
Urbana-Champaign
PI:EMAIL
Nikita Borisov
University of Illinois at
Urbana-Champaign
PI:EMAIL
ABSTRACT
A promising approach to mitigate the privacy risks in Online
Social Networks (OSNs) is to shift access control enforce-
ment from the OSN provider to the user by means of en-
cryption. However, this creates the challenge of key manage-
ment to support complex policies involved in OSNs and dy-
namic groups. To address this, we propose EASiER, an ar-
chitecture that supports ﬁne-grained access control policies
and dynamic group membership by using attribute-based
encryption. A key and novel feature of our architecture,
however, is that it is possible to remove access from a user
without issuing new keys to other users or re-encrypting ex-
isting ciphertexts. We achieve this by creating a proxy that
participates in the decryption process and enforces revoca-
tion constraints. The proxy is minimally trusted and cannot
decrypt ciphertexts or provide access to previously revoked
users. We describe EASiER architecture and construction,
provide performance evaluation, and prototype application
of our approach on Facebook.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security
and Protection; E.3 [Data]: Data Encryption
General Terms
Security, Algorithms
Keywords
Social Network, Access Control, Proxy, Revocation
1.
INTRODUCTION
Online Social Networks
such as Facebook,
Myspace, and Orkut are becoming one of the most popu-
lar ways for users to interact online. However, this intro-
(OSNs)
This work was supported in part by National Science Foun-
dation Grant CNS 06–27671.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
duces a privacy risk, as the provider is an attractive attack
target [6]. Insiders can also intentionally or accidentally re-
lease private information [4]. Several recent privacy com-
promises [13, 15] throw these issues into sharp focus. This
motivates researchers to consider a paradigm shift, where
instead of trusting social network operators and being de-
pendent on them to enforce privacy, users are in control of
who views their data, for example, via encryption [1, 5, 8, 9].
Fine-grained access control is a key challenge in this space;
for example, Facebook and LiveJournal have rolled out
mechanisms to specify access control policies for each post,
as the data items are usually destined for a subset of friends,
or groups. Persona [1] is a state-of-the-art design that pro-
poses the use of attribute-based encryption (ABE) [2] to
enable ﬁne-grained access control. A user can create groups
by assigning diﬀerent attributes and keys to her social con-
tacts, and then encrypt data such that only particular users
having the desired set of attributes can decrypt it. This pro-
tects the information from unauthorized users on the OSN,
third-party application developers, and above all the OSN
itself.
However, groups are dynamic and therefore user at-
tributes may change over time. This could be because of
change in location, work environment, or the nature or
strength of the relationship with a contact. Recent stud-
ies [10] have shown that the user interaction graph is much
less dense than friendship graph, indicating that users inter-
act most frequently with a small group of friends, further
validating the need for ﬁne-grained access control. More-
over, the churn rate for the interaction graph has been shown
to be quite high [10], motivating the need for access control
mechanisms to support dynamic groups. Persona and similar
designs introduce signiﬁcant overhead for group membership
changes, especially when a contact is removed from a group:
all other members of the group must receive a new key; addi-
tionally, all existing data items destined for that group must
be re-encrypted. This does not scale when groups are large
and dynamic, and when the volume of past data is high.
We propose EASiER, an architecture that enables users
to set ﬁne-grained access control policies even for dynamic
groups. To handle group churn, we leverage ideas from the
ﬁeld of eﬃcient revocation in group communications sys-
tems [12] and apply them to the ABE setting. Our design
makes use of a minimally trusted proxy that handles revoked
users and attributes. A user who revokes a contact or an at-
tribute need not issue new keys to the rest of the group,
nor re-encrypt data. We believe this feature is key for ac-
cess control in OSNs, and would also be useful in any other
context where ABE is used together with highly dynamic
group membership. The proxy cannot decrypt by itself, and
even if it were compromised, it cannot allow previously re-
voked users to decrypt either (unless the compromise crosses
a proxy re-key operation). Therefore, a centralized OSN
provider can act as a proxy without introducing signiﬁcant
privacy risks. The only assumption we hold is that the proxy
is updated with a new key each time a revocation takes place
and that it discards the old one.
We provide an overview of EASiER in Section 2 and a de-
tailed description of our construction in Section 3. Section 4
contains our performance analysis, and ﬁnally, we describe
related work in Section 5 and conclude in Section 6.
2. EASIER OVERVIEW
The primary goal of EASiER is to protect accidental or
intentional information leak in OSN through encryption,
speciﬁcally ABE, chosen for its expressiveness. Unlike tra-
ditional OSNs, which generally support one type of rela-
tionship such as friend, EASiER users deﬁne relationships
by assigning attributes and keys to each other. To pro-
tect information, users encrypt diﬀerent pieces of data such
as proﬁle information, wall posts, etc. with attribute poli-
cies. Only the contacts with keys having enough attributes
to satisfy a policy can decrypt the data. For instance, in
Figure 1, user A deﬁnes the attributes (friend, colleague,
neighbor ), generates keys k1, k2, and k3 for the combination
of attributes ‘colleague’, ‘friend, neighbor’, and ‘colleague,
neighbor’ respectively, and assigns these keys to u1, u2, and
u3 respectively. She encrypts her data with the policy ‘col-
league or (friend and neighbor)’.
Although ABE supports ﬁne-grained policies,
it leaves
open the challenge of supporting dynamic groups, and in
particular, revocation. This feature is a key functionality for
OSNs, as relationships can and do change over time: A may
want to cease its relationship with u1 and u2, and revoke
the corresponding keys, which should prevent them from
viewing A’s data encrypted with any policy that their keys
satisfy. Additionally, she may want to revoke the attribute
‘neighbor’ from k3 assigned to u3 and eﬀect a corresponding
change in access control. Traditional revocation approaches
for ABE use frequent rekeying, and cannot block access to
previously stored data without re-encrypting it.
The novel feature of EASiER is providing revocation in
ABE by introducing a minimally trusted proxy. Since the
proxy cannot decrypt the data directly, it may be imple-
mented by a centralized service with minimal risk. Each
user’s proxy is assigned a secret proxy key with revocation
information. The basic idea is, a social contact who wants
to decrypt a data, takes a part of the ciphertext (CT ) to the
proxy. The proxy uses its key to transform CT into such a
form that contains enough information that an unrevoked
user can combine with his secret key mathematically, and
successfully perform decryption, whereas a revoked user can
not do so. Upon each key revocation, the user rekeys her
proxy with the latest revocation information.
The ABE scheme used in EASiER is CP-ABE. We adopt
the revocation scheme proposed by Naor and Pinkas [12] to
support eﬃcient revocation in ABE. The ciphertext in CP-
ABE primarily consists of two parts: 1) the data blinded
with some secret, and 2) one component for each attribute
in the access structure used to encrypt the data. With-
out combining part 2 with the corresponding components
Figure 1: EASiER Architecture
in their attribute keys, users are unable to decrypt part 1.
Our approach introduces an extra blinding to the attribute
key components. The proxy key enables the unblinding of
the components during a decryption for unrevoked users; re-
voked users, on the other hand, get no help from the proxy
and are unable to decrypt any data, even if it was encrypted
before the revocation event.
However, EASiER does not allow the proxy to decrypt the
data since it does not have the attribute keys. A new proxy
key, created each time a revocation takes place, prevents
revoked users from colluding with the proxy or with each
other to get the data. We argue that this is a desirable
property: currently trusted contacts are not likely to crawl
the entire set of social network data and store it for later
use, but former friends or colleagues might try to abuse their
former status by accessing past data. Figure 1 summarizes
the whole architecture.
3. CONSTRUCTION
3.1 Assumptions and Basics
Before going into details of the construction, we present
some basic mathematical assumptions, and some details of
CP-ABE and the revocation scheme on which EASiER is
built:
Bilinear Pairing: Let G0, G1, and G2 be multiplicative
cyclic groups of prime order p, and e a map (G0 × G1 → G2).
If ∀u ∈ G0, v ∈ G1 and a, b ∈ Zp, e(ua, vb) = e(u, v)ab and
e(g0, g1) 6= 1, then e is a bilinear pairing. If G0 = G1, it is a
symmetric pairing, otherwise the pairing is asymmetric.
Secret Sharing: In Shamir’s secret sharing scheme [14],
a secret S in some ﬁeld F is shared among n parties by
creating a random polynomial P ∈ F [x] of degree t such that
P (0) = S. The i-th party gets the share (i, P (i)). Given any
t + 1 shares P (x0), . . . , P (xt), it is possible to recover P (0)
using Lagrange interpolation:
P (0) =
t
X
i=0
λiP (xi), where λi = Y
j6=i
xj
(xj − xi)
CP-ABE: We summarize the relevant CP-ABE algo-
rithms; for more details, refer to [2].
• Setup: The key authority (KA) generates a public key
P K, and a master secret key M K, for random α, β ∈
Zp, G0 = hgi:
P K = G0, g, h = gβ, e(g, g)α, M K = (β, gα)
• Encrypt(P K, M , τ ): It takes P K, the data M , and
a policy τ represented as a tree access structure. Let
random s ∈ Zp be the secret at the root of the tree, qx
be the polynomial of degree dx = kx − 1 at the node x
where kx is the threshold of x, and Y be the set of leaf
nodes in τ . The ciphertext CT is:
an extra component—D00
j —that in addition to attribute
information contains user information. Without loss of
generality, we assume user uk receives this key.
CT = (cid:0)τ, ˜C = M e(g, g)αs, C = hs,
∀y ∈ Y : Cy = gqy (0), C 0
y = H(att(y))qy (0)(cid:1)
Here, H : {0, 1}∗ → G0 is a hash function that maps a
string attribute to a random element of G0.
• KeyGen(M K, S): It takes M K, and a set of attributes
S and generates the secret key SK corresponding to S
for random r, rj ∈ Zp:
SK = (cid:0)D = g(α+r)/β,
∀j ∈ S : Dj = grH(j)rj , D0
j = grj(cid:1)
i (from SK) with Cx and C 0
• Decrypt(CT , SK): A recursive algorithm DecryptNode
pairs Di and D0
x (from
CT ), respectively, and returns e(g, g)rqx(0) for each leaf
node x in the τ in CT , iﬀ i = att(x) for some i ∈ S,
the set of attributes assigned to SK. At each non-leaf
node x, Lagrange interpolation is used on at least kx
such e(g, g)rqzj (0) from its children {zj}, to calculate
e(g, g)rqx(0). Let A = e(g, g)rqR(0) = e(g, g)rs. ˜C, C, D
and A are used in bilinear mapping to retrieve M .
Revocation Scheme of Naor and Pinkas: This scheme
consists of 2 phases:
• Initialization: The group controller generates a ran-
dom polynomial P of degree t over Zp. It sends a per-
sonal key hIu, P (Iu)i to each user u with identity Iu.
This process is performed only once for all future revo-
cations.
• Revocation: The group controller learns the identities
of t users Iu1, . . . , Iut to revoke. It then chooses a ran-
dom r, and sets the new key to be grP (0), which would
be unknown to revoked users. It broadcasts the message
gr, hIu1, grP (Iu1)i, . . . , hIut, grP (Iut)i encrypted with the
current group key. Each non revoked user can compute
grP (Iu) and combine it with the broadcast values to ob-
tain grP (0) using Lagrange interpolation. Further details
can be found in [12].
3.2 Key and Attribute Revocation in EASiER
In this section we describe how to revoke keys and at-
tributes from parties in EASiER. This construction allows
revocation of up to t users at a time for a complete key re-
vocation, or ty users for each attribute y in case of attribute
revocation, since it is based on the scheme in [12] described
before. At ﬁrst we describe key revocation.
• Setup: Our scheme requires an asymmetric pairing e :
G0 × G1 → G2 where there is no eﬃcient isomorphism
from G1 to G0. Each OSN user acts as her own KA,
and generates P K and M K for random polynomial P
of degree t (the maximum number of revoked users) over
Zp, generators g0 and g1 of G0 and G1, respectively, and
α, β ∈ Zp.
P K = G0, G1, g0, g1, h = gβ
0 , e(g0, g1)α, M K = β, gα
1 , P
• KeyGen(M K, S):
It outputs the secret key corre-
sponding to the set of attributes S, blinded by P (0),
the secret to be used after revocation. We introduce
SK = (D, ∀j ∈ S : hDj, D0
, Dj = gr
j i), where
j, D00
r+hj rj P (0)
1 · H(j)rj P (0) = g
1
,
1
D = g(α+r)/β
rj
0 , D00
j = g
D0
j = (D0
rj P (uk)
j)P (uk) = g
0
where H : {0, 1}∗ → G1 and hj = logg1 H(j) (used for
notational convenience only).
• Encrypt(P K, M , τ ): This algorithm is exactly the
same as in CP-ABE, adjusted for the use of an asym-
metric pairing:
CT = (τ, ˜C = M e(g0, g1)αs, C = hs = gβs
0 ,
∀y ∈ Y : Cy = gqy (0)
0
, C 0
y = H(att(y))qy (0) = ghy qy (0)
1
)
• ProxyRekey(P K, M K, RL): Whenever the owner
wants to revoke keys from social contacts, she creates
a list of revoked users RL with their identities ui, i ∈
{1, . . . , t}, and evaluates the corresponding P (ui) using
M K. She gives the proxy key P XK to the proxy. In case
of fewer than t revocations, the owner generates random
hx, P (x)i such that x does not correspond to any user’s
identity to pad P XK to length t.
P XK = ∀ui ∈ RL : hui, P (ui)i
• Convert(P XK, ∀y ∈ Y : Cy, uk): The proxy uses its
y as
key, and the decryptor’s identity uk to calculate C 00
follows:
λi =
uk
uk − ui Y
j6=i
uj
(uj − ui)
, ∀i, j ∈ {1, . . . , t}, k /∈ {1, . . . , t}
∀y ∈ Y : C 00
y = (C 0
y)Pt
i=1 λiP (ui) = ghy qy (0) Pt
1
i=1 λiP (ui)
Since the user’s secret key SK is blinded by P (0), she
needs C 00
y for decryption.The
proxy also calculates and gives λk to the user uk.
y in addition to Cy and C 0
• Decrypt(CT , SK): The decryption steps involve one
extra pairing than basic CP-ABE at each leaf node of the
policy. For each leaf node x, with i = att(x), if i ∈ S,
where S is the set of attributes for SK, then,
DecryptNode(CT, SK, x)
=
=
=
e(Cx, Di)
x)λk e(D0
e(D00
i , C 0
i, C 00
x )
e(g0, g1)rqx(0)+hiriP (0)qx(0)
e(g0, g1)rihiqx(0)λkP (uk)e(g0, g1)rihiqx(0) Pt
j=1 λj P (uj )
e(g0, g1)rqx(0)+hiriP (0)qx(0)
e(g0, g1)rihiqx(0)(Pt
j=1 λj P (uj )+λkP (uk))
= e(g0, g1)rqx(0)