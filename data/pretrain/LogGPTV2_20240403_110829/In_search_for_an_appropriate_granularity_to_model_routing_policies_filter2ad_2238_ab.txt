n
o
i
t
r
o
p
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
number of atoms in AS
number of prefixes in Atom
number of prefixes in AS
10
Size
100
Figure 3: Atoms structure for dataset.
To compute atoms, we use an approach similar to [21]. We put
two preﬁxes p1 and p2 in the same BGP atom if their AS-PATH is
the same, as seen by all our observation points. Figure 3 presents
the atoms structure of the dataset. The graph displays three cumu-
lative curves: the number of preﬁxes per origin AS, the number of
preﬁxes in each atom, and the number of atoms in each AS. We ob-
serve that the distribution of the number of preﬁxes per origin AS is
virtually the same as in [20] which relies only on RIPE NCC data.
More than 40% of the origin ASs advertise a single preﬁx: at least
40% of the atoms hence consist of a single preﬁx. The curve giv-
ing the number of preﬁxes per atom shows that 70% of the atoms
consist of a single preﬁx. The RIPE data used by [20] had 60% of
single preﬁx atoms.
We believe that we observe ﬁner atoms in the data compared
to [20] because our data provides a more extensive coverage of
the actual BGP paths. With an increasing number of paths, we
also observe the effect of more policies, leading to smaller atoms
due to more diverse path choices. The curve in Figure 3, show-
ing the number of atoms in each AS, conﬁrms that data used in
this study sees ASs that have more atoms than that observed us-
ing RIPE. In our data, about 30% of the ASs contain two or more
atoms, whereas [20] observed only slightly more than 25% of ASs
with two atoms or more.
3.2 Business Relationships
Business relationships rely on the coarsest granularity possible
for policies: ﬁltering rules deﬁned on a per-neighbor basis. More
details on business relationships and their inference can be found
in Appendix A.
As business relationships are the most popular model for poli-
cies in the literature, we simulate the path choices in our model,
when the only policies conﬁgured are inferred business relation-
ships. Then, we compare the paths chosen in the model with those
observed in BGP data. Customer-provider and peering relation-
ships are inferred by applying the CSP algorithm [23] to the data
(see Appendix A).
We rely on C-BGP [24, 25] to compute the outcome of the BGP
decision process and the set of learned routes at every router of
our AS-level topology. C-BGP computes the steady-state choice
of the BGP routers after the exchange of the BGP messages has
converged.2 This allows us to perform large-scale simulations for
single preﬁxes on topologies with more than 21,547 routers split
among 21,169 ASs in approximately 2 minutes with 300 MB of
memory consumption. Each quasi-router in our model corresponds
to a router in the C-BGP simulation.
AS-Paths which agree
AS-Paths which disagree
due to
route not available
route learned but not selected
14.5%
85.5%
60.9%
24.6%
Table 1: Agreement between observed and simulated routes
when business relationships are used as policies.
Table 1 shows the consistency between the path choices simu-
lated in the model with business relationships conﬁgured as poli-
cies, and the paths observed in the data. For each observed path,
we check if there is at least one quasi-router that selects the ob-
served AS path as best route in the simulation.
2We choose to assign IP addresses such that the high order 16 bits
are set to the AS number and the low order bits are a unique ID for
the quasi-router. In case of a tie-break a quasi-router prefers AS
paths announced by quasi-routers with low IP addresses.
Only 10.1% the paths agree between the simulation and the ob-
servations. For 60.9% of the paths, the corresponding path is not
even propagated to the AS that should observe that path in the sim-
ulations. Only 24.6% of the paths are learned by the right AS but
not selected as best path by any quasi-router of that AS.
We ﬁnd these results disappointing. Introducing business rela-
tionships does not seem to solve any inconsistencies between the
paths propagated in our model and the routes actually observed in
the Internet.
3.3 Atoms vs. Relationships
We believe that neither BGP atoms nor business relationships
give an ultimate answer to the problem of which granularity should
be used for modeling routing policies.
On the one hand, business relationships appear too coarse, as
they result in high inconsistencies between the paths propagated in
our model and the routes actually observed in the Internet. We want
to point out that this does not necessarily mean that business rela-
tionships are “wrong”. However, it is unclear to what extent having
per-neighbor policies is responsible for this high inconsistency.
BGP atoms, on the other hand, also have shortcomings. Two pre-
ﬁxes are put in the same atom if their AS-PATH is the same, as seen
by all our observation points. According to this deﬁnition BGP
atoms describe policies across many ASs, i.e., observation points.
We believe that relying on BGP atoms is therefore dangerous for
our study, as atoms do not discriminate different inter-domain links
and parts of the topology. For example, BGP atoms do not capture
situations where a large fraction of the policies in the Internet are
deﬁned as coarse as per-neighboring AS, while only a small subset
of ASs conﬁgure policies on a per-preﬁx level. In this case, BGP
atoms are prone to generalize and would suggest that probably all
ASs have their policies deﬁned on a per-preﬁx level.
4.
IN SEARCH FOR THE RIGHT
GRANULARITY
Given the results of Section 3, one may wonder whether business
relationships or BGP atoms are the right way to model policies in
the Internet. Therefore, we now start our search for the appropriate
granularity of policies from scratch and rely on the ﬁnest granular-
ity possible: per-preﬁx ﬁltering. We identify ﬁne-grained policies
by analyzing what we see in our data of Section 2.1 and comparing
it to the routes selected by our model without implemented poli-
cies. The motivation behind this approach is to compare the ob-
tained per-preﬁx ﬁlters with coarse-grained policies as imposed by
inferred business relationships. The gained insights will be impor-
tant in Section 5 when we propose a new abstraction for routing
policies.
As it is impossible to extract information about the implemen-
tation of policies only based on observed BGP data, we restrict
ourselves to per-preﬁx ﬁltering: if there is a disagreement between
some observed path and the corresponding route selected in our
model, a set of ﬁlter rules is identiﬁed to prevent the propagation
of “wrong” paths. Section 4.1 explains in detail how sets of ﬁlter
policies are computed. Given that we restrict ourselves to ﬁltering
policies, how much freedom do we have in placing those ﬁlters?
Filtering between different AS-level peerings may have the same
effect in terms of path propagation for the observed path. Sec-
tion 4.2 tries to estimate the amount of freedom we have in terms
of equivalent policies when trying to achieve consistency between
best routes in our model and observed AS paths. In Subsection 4.3,
we make an important step in our search for the appropriate gran-
ularity of policies. Given a large set of per-preﬁx ﬁltering rules
that has been computed exclusively based on observed data, we try
to ﬁnd out if there is possible aggregation across preﬁxes. More
precisely, we check whether there are locations on the AS connec-
tivity graph that seem to beneﬁt more frequently from a ﬁlter than
others. As we detect some very popular locations for ﬁltering in
Section 4.3, we conclude that the implementation of actual rout-
ing policies is somewhere in-between per-preﬁx and per-neighbor
policies. Therefore, we compare in Section 4.4 inferred business
relationships with the per-preﬁx ﬁlters we detected using the ap-
proach of Section 4.1.
4.1 Inferring Filters
We now we describe how to identify sets of per-preﬁx policies in
order to obtain agreement between the routes selected in our model
and those observed in the data. The guideline in this approach is
to rely only on what we see in the data. We account for this ba-
sic principle as follows: First, the physical connectivity of our AS
topology of Section 2.3 is sufﬁcient to make the propagation of
all observed AS paths possible, if policies are to be installed prop-
erly. Second, policies are introduced on a per-preﬁx basis, the ﬁnest
granularity for which policies can be conﬁgured. Third, we want to
make as weak assumptions as possible about where to place a pol-
icy. If an observed AS path is not selected in the topology model
of Section 2.3, we have a large choice about where and what policy
to introduce. Different policy types and different AS-level peer-
ings may have the same effect in terms of path propagation for the
observed AS path. Therefore, we try to identify multiple “candi-
date” policies ﬁrst and in a later step (cf. Section 4.4) we will use
heuristics to pinpoint likely policies.
The example in Figure 4 illustrates the many possible locations
for policies, if the only goal is to allow for the propagation of an
observed AS path. We observe at AS 7 an AS path 7-6-5-4-3
originated by AS 3. However, reproducing the BGP route selection
in this topology without any policies will show that AS 7 selects the
shorter path 7-2-3 to reach the preﬁx. In this case, a preference
policy at AS 7 or ﬁltering at least one link both of the paths 7-2-3
and 7-1-2-3 will have the same effect in terms of the propagation
of the observed AS path 7-6-5-4-3. Note that it is even possible
to apply an arbitrary subset of all “candidate” policies that will have
the same effect.
AS7
filter?
AS6
AS4
AS5
filter?
AS1
filter?
AS2
prefix
AS3
filter?
obs. route
sim. route
Figure 4: Filtering - Example.
In order to reproduce BGP route selection in our AS-level topol-
ogy, we again use C-BGP [24, 25]. As a consequence, we know
for every router in our model which routes it learns to reach a pre-
ﬁx and also which route is selected as best. According to the as-
signment of observed AS path sufﬁxes to quasi-routers in our AS-
topology graph (see Section 2.3), many of the routers in our model
are supposed to select a speciﬁc path to reach a certain preﬁx. How-
ever, without properly conﬁgured policies, the paths chosen by our
model might not be the same as those observed in the data. A mis-
match is referred to a situation where a quasi-router chooses an AS
path which is inconsistent with the path assignment of Section 2.3.
In our approach, each mismatch gives a hint about where policies
are required. We now distinguish between two different cases of
mismatch.
The ﬁrst case of mismatch can occur when, a router does not
select the path consistent with the assignment of Section 2.3, due
to the existence of some shorter AS paths. In this case, we will
introduce per-preﬁx BGP ﬁlters on the link from the announcing
neighbors to prevent the shorter paths from being propagated to the
router. In Figure 4, both AS 1 and AS 2 will propagate routes to
AS 7 which are shorter than the observed AS path 7-6-5- 4-3.
In the following, we denote a ﬁltering rule in our model between
AS X and AS Y , where Y does not propagate a preﬁx towards X,
by X 8 Y . Thus, conﬁguring the ﬁlter rules 7 8 1 on link 7-1 and
7 8 2 on link 7-2 can be used to obtain the observed path at AS 7.
The second case will occur if a router does not select the “cor-
rect” AS path due to a wrong “tie-breaking” decision in our model.
Provided some router receives multiple routes with equal AS path
lengths, the BGP decision process will have to break ties, e.g., by
preferring the route learned from the neighbor with the lowest IP
address. We ignore those situations since no policy is identiﬁed.
Indeed, we cannot be sure whether a policy is actually needed to
get the correct propagation. We do not want the uncertainty of the
BGP decision process and its implementation to impact our study
of the granularity of policies. Reconsidering the example in Fig-
ure 4, we see that AS 5 may not select the observed sufﬁx 5-4-3
due to a “wrong” tie-breaking decision: the C-BGP simulation will
prefer the path 5-2-3 if the router of AS 2 has a lower IP address
than the router of AS 4.
Let us now deﬁne three notions that will be used to explain the
detection of ﬁltering policies:
Candidate ﬁlter: A per-preﬁx ﬁlter rule which helps to allow the
selection of an observed path as best route in our model. In
general, several candidate ﬁlters (e.g., a ﬁltering combina-
tion) will be needed. Additionally, shorter paths do not nec-
essarily have to be ﬁltered at the location of the mismatch. To
obtain the observed path at AS 7 in Figure 4, ﬁltering on the
link 2-3 has the same effect as having ﬁlters on both 7-1
and 7-2. Altogether, we identify four candidate ﬁlters in our
example: 7 8 2, 7 8 1, 1 8 2, 2 8 3.
Filtering combination: A set of ﬁlter rules for a mismatch which
satisﬁes two conditions: (i) Applying all ﬁlters in this set
clears the mismatch, i.e., there will be agreement between
the observed sufﬁx path assigned to a quasi-router, and the
route currently selected in our model; and (ii) the set of poli-
cies in this set is minimal, i.e., if any policy from a ﬁltering
combination is removed the mismatch will not disappear. In
the example in Figure 4, there are three ﬁltering combina-
tions:
(1) 7 8 2 and 7 8 1
(2) 7 8 2 and 1 8 2
(3) 2 8 3.
However, the set of ﬁlter rules 7 8 2, 7 8 1 and 1 8 2 is
not considered as a ﬁltering combination, as either 7 8 1 or
1 8 2 can be removed while the router of AS 7 still chooses
the assigned sufﬁx 7-6-5-4-3.
Dependency graph: A data structure used to store the identi-
ﬁed ﬁlter candidates and their dependencies for a certain pre-
ﬁx. Nodes in this graph represent candidate ﬁlters or mis-
matches whereas directed edges between nodes reﬂect de-
pendencies. The direction of the edges is determined by our
algorithm. Basically, the algorithm recursively walks back
from the “mismatched AS” to the originating AS, detecting
ﬁlters along the way. Dependency edges are always directed
towards ﬁlters which are closer to the originating AS. The
idea now is that a “ﬁlter node” is not needed provided that
(i) all its children nodes or (ii) all its parent nodes in the de-
pendency graph are used or (iii) if there are no parent and
children respectively. Figure 5 shows the dependency graph
for the mismatch at AS 7 in Figure 4. There are ﬁve nodes,
with one representing the mismatch at AS 7 and the remain-
ing nodes the four candidate ﬁlters. Assume that ﬁlter 283
is used. In this case, 7 8 2 as well as 7 8 1 are redundant,
with all their children nodes (ﬁlter 2 8 3) already used.
Mismatch 
at AS 7 
7    2
7    1
2    3
1    2
Figure 5: Dependency graph for mismatch in Figure 4.
The beneﬁts of this data structure are two-fold. First, com-
pared to keeping all ﬁltering combinations, the dependency
graph scales as its size is bounded by the number of links and
ASs in our topology. Second, it prevents losing information
about possible dependencies between detected ﬁlters rules.
Our algorithm to compute a set of candidate ﬁlters for a given
preﬁx is summarized in Figure 6. It takes as input the observed
routes to a speciﬁc preﬁx, an AS topology including the assign-
ment of observed AS paths to quasi-routers (see Section 2.3) and
the routes selected in our model when simulating BGP route prop-
agation with C-BGP. For each mismatch, a set of candidate ﬁlters
is identiﬁed and inserted into the dependency graph. The result is
a dependency graph for the preﬁx, with all candidate ﬁlters being
associated to at least one mismatch.
foreach observed path p to the given preﬁx
start at originating AS and walk to observation AS
foreach hop h of path p
o = sufﬁx of p from AS h to observation AS
s = simulated path at the router assigned for sufﬁx o
olength = length of sufﬁx o
if s not equal o
add “mismatch” m to dependency graph
ﬁndCandidates(h, olength, m, 1)
sub ﬁndCandidates(hop h, length l, from_policy f f rom, depth r)
if (r > threshold) or (h == originating AS) 1
terminate
foreach physical neighbor n of h 2
nlength = length of path announced from n
if nlength < l
add “FILTER ” fnew to dependency graph
ﬁndCandidates(n, l − 1, fnew, r + 1)
add link from f f rom to fnew in dependency graph
1 not all termination criteria listed.
2 some neighbors can be skipped, not shown here.
Figure 6: Computing candidate policies for a preﬁx.
As shown in Figure 6, the algorithm proceeds by consecutively
looking at all routes observed for the preﬁx. For each route, we
walk along the AS path from the originating AS to the observation
AS and check at each hop for an inconsistency, i.e., a disagree-
ment between the observed sufﬁx path and the simulated route at
the assigned quasi-router. If there is a mismatch, the function ﬁnd-
Candidates is called recursively to identify ﬁlter candidates.
The recursion serves the purpose of considering ﬁlters that are
not directly located at the mismatch but closer to the originating
AS. The basic idea is that the function ﬁndCandidates has as a pa-
rameter the current AS hop h and recursively calls itself on neigh-
boring ASs from which it learns routes which are too short in terms
of AS path length.
To know which routes need to be ﬁltered, we use another param-
eter l, the maximum path length which an AS is allowed to propa-
gate. Provided that AS h of ﬁndCandidates selects in the simulation
a route with a strictly shorter AS path than l, a ﬁlter between h and
AS c – the AS from which this recursion has been called – will be
added to the list of candidate ﬁlters. At the same time, we insert a
dependency edge between the new ﬁlter and the candidate ﬁlter dn
found at AS c.
In general, recursion terminates when we arrive at an originating
AS or when the current AS does not select a route shorter than the