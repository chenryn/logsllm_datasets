much lower but also much more stable over time.
Starting in 2018 the naive estimate drops closer to our
improved estimate. We suppose that this is partially due to
scarcity in block space (and a corresponding rise in transac-
tion fees), which encourages intermediaries to batch multiple
payments into a single transaction, thereby eliminating some
USENIX Association
29th USENIX Security Symposium    2733
Jan2017Jan2018Jan2019Jan2020JulJulJul0M2M4M6M8M10MBTC moved per dayNaive estimateOur estimateof the self-churn that is evident in the naive estimate earlier.
Spikes in the graph, like the one in mid 2019, may represent
large intermediaries (e.g., exchanges) moving large amounts
of bitcoin to addresses with updated access control structures.
We note several caveats. First, this still likely fails to ex-
clude some transfers of value between addresses controlled by
the same entity. Without ground truth, it is hard to be certain
how good the estimate is. Second, it doesn’t count transfers of
possession that don’t touch the blockchain. When exchanges,
online wallets, and other intermediaries hold money on behalf
of users, payments and transfers of “bitcoins" might happen
even though no actual bitcoins changed hands (as only ac-
count balances in an internal database need to be updated).
Nevertheless, we believe that the metric can be a useful proxy
for understanding the use of cryptocurrencies, and possibly
for comparing between cryptocurrencies.
3.5 Other applications of BlockSci
Besides our own use, BlockSci has seen a variety of use in
both academic and industry settings. We are currently aware
of at least 9 peer-reviewed articles, 6 preprints, and 2 software
projects that use BlockSci for blockchain analysis (a full list
is available online6).
The dual topics of privacy and forensics are common
among these papers. These include information leaks from
payments and purchases through intermediaries [4], the use
of intermediaries to convert between cryptocurrencies [12], as
well as the identiﬁcation of entities and the analysis of their
behavior in the transaction graph [6, 11, 23–25]. Many of
these results are of interest to law enforcement and regulators,
and we have helped regulators use BlockSci for their own
investigations. Two other themes are issues surrounding the
security and scalability of cryptocurrencies [26–28], as well
as economic analyses of cryptocurrencies [29].
BlockSci has also been used as the foundation for spe-
cialized blockchain analysis tools. Boshmaf, Al Jawaheri,
and Al Sabah [23] have built a tagging system on top of
BlockSci, and the GraphSense blockchain analytics platform
uses BlockSci’s parser and altcoin support to generate an
address graph out of the transaction graph [30].
4 Conclusion
There is a high level of interest in blockchain analysis
among developers, researchers, and students, leading to an
unmet need for effective analysis tools. While general-
purpose in-memory graph databases exist, a tool customized
to blockchain data can take advantage of its append-only na-
ture as well as provide integrated high-performance routines
for common tasks such as address linking.
6https://citp.github.io/BlockSci/studies/
BlockSci has already been widely used as a research and
educational tool. We hope it will continue to be broadly useful,
and plan to keep maintaining it as open-source software.
Acknowledgments
We are grateful to Lucas Mayer for prototype code, Danny
Yuxing Huang, Pranay Anchuri, Shaanan Cohney, Rainer
Böhme, Michael Fröwis, Jakob Hollenstein, Jason Anasta-
sopoulos, Sarah Meiklejohn, and Dillon Reisman for useful
discussions, and Chainalysis for providing access to their Re-
actor tool. We also thank the anonymous USENIX Security
reviewers, the reviewers of the artifact evaluation process and
our shepherd Anita Nikolich for their feedback.
This work is supported by NSF grants CNS-1421689 and
CNS-1651938, a grant from the Ripple University Blockchain
Research Initiative, the European Union’s Horizon 2020 re-
search and innovation programme under grant agreement No.
740558, the Austrian FFG’s KIRAS programme under project
VIRTCRIME, and an NSF Graduate Research Fellowship un-
der grant number DGE-1148900.
References
[1] Frank McSherry, Michael Isard, and Derek Gordon
Murray. “Scalability! But at what COST?” In: Pro-
ceedings of the 15th Workshop on Hot Topics in Oper-
ating Systems (HotOS XV). May 2015. URL: https:
/ / www . usenix . org / conference / hotos15 /
workshop-program/presentation/mcsherry (vis-
ited on 06/12/2020).
[2] Facebook Database Engineering Team. RocksDB. A
persistent key-value store for fast storage environments.
Version 6.10.2. June 5, 2020. URL: https://rocksdb.
org/.
[3] Sarah Meiklejohn et al. “A Fistful of Bitcoins: Charac-
terizing Payments Among Men with No Names”. In:
Proceedings of the 2013 Internet Measurement Con-
ference (IMC). Oct. 2013. DOI: 10.1145/2504730.
2504747.
[4] Steven Goldfeder et al. “When the cookie meets the
blockchain: Privacy risks of web payments via cryp-
tocurrencies”. In: Proceedings on Privacy Enhancing
Technologies. Vol. 2018. Oct. 2018. DOI: 10.1515/
popets-2018-0038.
[5] Wenzel Jakob. Lock-free parallel disjoint set data struc-
ture. June 14, 2020. URL: https : / / github . com /
wjakob/dset.
[6] Michael Fröwis et al. “Safeguarding the Evidential
Value of Forensic Cryptocurrency Investigations”. In:
(July 28, 2019). arXiv: 1906.12221.
2734    29th USENIX Security Symposium
USENIX Association
[7] Wenzel Jakob. pybind11 — Seamless operability be-
tween C++11 and Python. Version 2.5.0. Mar. 31,
2020. URL: https : / / github . com / pybind /
pybind11.
[8] Martin Fowler. FluentInterface. Dec. 20, 2020. URL:
https : / / www . martinfowler . com / bliki /
FluentInterface.html (visited on 02/14/2020).
[9] Harry Kalodner et al. BlockSci: Design and applica-
tions of a blockchain analysis platform. Sept. 8, 2017.
arXiv: 1709.02489.
[10] Alex Biryukov and Daniel Feher. “Privacy and Linka-
bility of Mining in Zcash”. In: 2019 IEEE Conference
on Communications and Network Security (CNS). June
2019. DOI: 10.1109/CNS.2019.8802711.
[11] Danny Yuxing Huang et al. “Tracking Ransomware
End-to-end”. In: Proceedings of the 39th IEEE Sym-
posium on Security & Privacy (S&P). May 2018. DOI:
10.1109/SP.2018.00047.
[12] Haaroon Yousaf, George Kappos, and Sarah Meikle-
john. “Tracing Transactions Across Cryptocurrency
Ledgers”. In: Proceedings of the 28th USENIX Se-
curity Symposium (USENIX Security). Aug. 2019.
URL: https : / / www . usenix . org / conference /
usenixsecurity19 / presentation / yousaf (vis-
ited on 06/13/2020).
[13] Rosario Gennaro, Steven Goldfeder, and Arvind
Narayanan. “Threshold-Optimal DSA/ECDSA Sig-
natures and an Application to Bitcoin Wallet Secu-
rity”. In: Proceedings of the 14th International Confer-
ence on Applied Cryptography and Network Security
(ACNS). Vol. 9696. Lecture Notes in Computer Sci-
ence (LNCS). June 2016. DOI: 10.1007/978-3-319-
39555-5_9.
[14] Claus-Peter Schnorr. “Efﬁcient signature generation
by smart cards”. In: Journal of Cryptology 4 (1991).
DOI: 10.1007/BF00196725.
[15] Bitcoin Core. Technology roadmap - Schnorr signa-
tures and signature aggregation. URL: https : / /
bitcoincore . org / en / 2017 / 03 / 23 / schnorr -
signature-aggregation/ (visited on 06/07/2020).
[16] Yujin Kwon et al. “Bitcoin vs. Bitcoin Cash: Coexis-
tence or Downfall of Bitcoin Cash?” In: Proceedings
of the 40th IEEE Symposium on Security & Privacy
(S&P). May 2019. DOI: 10.1109/SP.2019.00075.
[17] Abraham Hinteregger and Bernhard Haslhofer. “Short
Paper: An Empirical Analysis of Monero Cross-chain
Traceability”. In: Proceedings of the 23th International
Conference on Financial Cryptography and Data Se-
curity (FC). Vol. 11598. Lecture Notes in Computer
Science (LNCS). Feb. 2019. DOI: 10.1007/978-3-
030-32101-7_10.
[18] Francisco Memoria. Bitcoin Gold Wallet Scam Sees
Fraudsters Steal $3.2 Million. CCN Markets. Nov. 24,
2017. URL: https://www.ccn.com/bitcoin-gold-
wallet- scam- nets- fraudsters- 3- 2- million-
after- stealing- users- private- keys/ (visited
on 02/14/2020).
[19] Ron Lavi, Or Sattath, and Aviv Zohar. “Redesigning
Bitcoin’s fee market”. In: Companion Proceedings of
the The Web Conference (WWW) 2019. May 2019. DOI:
10.1145/3308558.3313454.
[20] Soumya Basu et al. Towards a Functional Fee Market
for Cryptocurrencies. DOI: 10.2139/ssrn.3318327.
[21] Bitcoin Core. estimatesmartfee (0.19.0 RPC). Ver-
sion 0.19.0. URL: https://bitcoincore.org/en/
doc/0.19.0/rpc/util/estimatesmartfee/ (vis-
ited on 02/15/2020).
[22] Peter Todd. Discourage fee sniping with nLockTime.
Pull Request #2340. Dec. 19, 2014. URL: https://
github.com/bitcoin/bitcoin/pull/2340 (vis-
ited on 06/14/2020).
[23] Yazan Boshmaf, Husam Al Jawaheri, and Mashael
Al Sabah. “BlockTag: Design and Applications of a
Tagging System for Blockchain Analysis”. In: Pro-
ceedings of the 34th IFIP TC11 Information Security
Conference & Privacy Conference. June 2019. DOI:
10.1007/978-3-030-22312-0_21.
[24] Marc Jourdan et al. “Characterizing Entities in the Bit-
coin Blockchain”. In: 2018 IEEE International Confer-
ence on Data Mining Workshops (ICDMW). Oct. 2018.
DOI: 10.1109/ICDMW.2018.00016.
[25] Yury Zhauniarovich et al. Characterizing Bitcoin dona-
tions to open source software on GitHub. July 9, 2019.
arXiv: 1907.04002.
Iain Stewart et al. “Committing to quantum resistance:
a slow defence for Bitcoin against a fast quantum com-
puting attack”. In: Royal Society Open Science 5.6 (6
June 2018). DOI: 10.1098/rsos.180410.
[26]
[27] Cristina Pérez-Solà et al. “Another coin bites the dust:
an analysis of dust in UTXO-based cryptocurrencies”.
In: Royal Society Open Science 6.1 (1 Jan. 2019). DOI:
10.1098/rsos.180817.
[28] Cristina Pérez-Solà et al. Analysis of the SegWit adop-
tion in Bitcoin. URL: https://deic-web.uab.cat/
~guille / publications / papers / 2018 . recsi .
segwit.pdf (visited on 06/13/2020).
[29] Bruno Biais et al. Equilibrium Bitcoin Pricing. DOI:
10.2139/ssrn.3261063.
USENIX Association
29th USENIX Security Symposium    2735
[30] Bernhard Haslhofer, Roman Karl, and Erwin Filtz. “O
Bitcoin Where Art Thou? Insight into Large-Scale
Transaction Graphs”. In: Joint Proceedings of the
Posters and Demos Track of the 12th International
Conference on Semantic Systems and the 1st Inter-
national Workshop on Semantic Change & Evolving
Semantics (SuCCESS’16). Sept. 13, 2016. URL: http:
//ceur-ws.org/Vol-1695/paper20.pdf (visited
on 06/14/2020).
[31] Neo4j Labs. Awesome Procedures On Cypher (APOC).
May 23, 2020. URL: https://neo4j.com/labs/
apoc/ (visited on 06/14/2020).
Table 6: Bitcoin Core fee estimates are chosen such that 60 %
of past transactions were included within half of the target
interval, 85 % included within the target interval, and 95 %
within twice the target interval. The differences of actual inclu-
sion times with those targeted inclusion times of transactions
are shown below.
Target T
20 min
40 min
60 min
120 min
240 min
Difference to target (in minutes)
60 % (0.5T )
+0.48
-7.00
-13.25
-38.25
-96.53
85 % (T )
+3.63
-2.90
-2.52
-26.67
-126.35
95 % (2T )
+5.52
+18.47
+58.92
+108.64
-41.58
A Graph Database Comparison
We model a simpliﬁed transaction graph that contains all
important types of nodes but does not include many of the
properties that BlockSci provides access to (the resulting
graph thus requires less storage than a full layout would re-
quire). While many different graph layouts are conceivable,
we chose a layout that models the transaction graph as explic-
itly as possible (cf. Figure 10). There are four types of nodes:
blocks, transactions, outputs and addresses. Blocks reference
included transactions, transactions reference previous outputs
that are being spent as well as new outputs being created, and
outputs reference the address they send value to.
Table 7 shows the Cypher queries that we used. Minor
syntax changes were necessary due to the particularities of
the respective import scripts.
Table 8 contains the full measurements of our performance
analysis. All benchmarks are run on an r5.8xlarge EC2 in-
stance (32 vCPUs, 256 GiB memory, 800 GiB EBS volume).
Table 7: Cypher queries used in the graph database perfor-
mance comparison
Tx locktime > 0
MATCH (tx:Tx) WHERE tx.locktime > 0 RETURN COUNT(*)
Max output value
MATCH (o:Output) RETURN MAX(o.value)
Calculate fee
MATCH (i)(o)
WITH tx, (totalIn - SUM(o.value)) as fee
RETURN MAX(fee)
Satoshi Dice address
MATCH (a)()-[:TX_OUTPUT]->(o)
()-[:TX_OUTPUT]->(o)
(o) 0) = (tx2.locktime > 0)
WITH tx, COUNT(o) as cnt WHERE cnt = 1
RETURN COUNT(*)
Locktime change (RedisGraph)
MATCH (tx:Tx)-[:TX_OUTPUT]->(o) 0 AND tx2.locktime > 0)
WITH tx, COUNT(o) as cnt WHERE cnt = 1
RETURN COUNT(*)
Block
CONTAINS
Output
TX_INPUT
Tx
TX_OUTPUT
Output
TO_ADDRESS
Address
Figure 10: Property graph model
2736    29th USENIX Security Symposium
USENIX Association
Table 8: Average running time in seconds and standard deviation (in parentheses) over ﬁve consecutive runs for various graph
queries and data set sizes on a r5.8xlarge EC2 instance (32 vCPUs, 256 GiB memory). We used Neo4j v3.5.14, RedisGraph
v2.0.1 (running on top of Redis v5.0.7) and Memgraph v0.15.0. Fluent interface is single-threaded.
Query
12.5M transactions
Tx locktime > 0
Max output value
Calculate fee
Satoshi Dice address
Zero-conf outputs
Locktime change
25M transactions
Tx locktime > 0
Max output value
Calculate fee
Satoshi Dice address
Zero-conf outputs
Locktime change
50M transactions
Tx locktime > 0
Max output value
Calculate fee
Satoshi Dice address
Zero-conf outputs
Locktime change
100M transactions
Tx locktime > 0