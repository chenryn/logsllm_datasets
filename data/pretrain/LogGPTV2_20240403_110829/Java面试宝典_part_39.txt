第三步 - 安装你的 MySQL 数据库
更多的来看看这里 -https://github.com/in28minutes/jpa-with-hibernate#installing-and-setting-up-mysql
第四步 - 配置你的 MySQL 数据库连接
配置 application.properties
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/todo_example
spring.datasource.username=todouser
spring.datasource.password=YOUR_PASSWORD
第五步 - 重新启动，你就准备好了！
就是这么简单！
76、Spring Boot 配置的默认 H2 数据库的名字是上面？为什么默认的数据库名字是
testdb？
在 application.properties 里面，列出了所有的默认值
https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
找到下面的属性
spring.datasource.name=testdb # Name of the datasource.
如果你使用了 H2 内部存储数据库，它里面确定了 Spring Boot 用来安装你的 H2 数据库的名字。
77、如果 H2 不在类路径里面，会出现上面情况？
将会报下面的错误
Cannot determine embedded database driver class for database type NONE
把 H2 添加至 pom.xml 中，然后重启你的服务器
com.h2database
h2
runtime
78、你能否举一个以 ReadOnly 为事务管理的例子？
当你从数据库读取内容的时候，你想把事物中的用户描述或者是其它描述设置为只读模式，以便于 Hebernate 不需要再次检查实体的变
化。这是非常高效的。
79、发布 Spring Boot 用户应用程序自定义配置的最好方法是什么？
@Value 的问题在于，您可以通过应用程序分配你配置值。更好的操作是采取集中的方法。
你可以使用 @ConfigurationProperties 定义一个配置组件。
@Component
@ConfigurationProperties("basic")
public class BasicConfiguration {
private boolean value;
private String message;
private int number;
你可以在 application.properties 中配置参数。
basic.value: true
basic.message: Dynamic Message
basic.number: 100
80、配置文件的需求是什么？
企业应用程序的开发是复杂的，你需要混合的环境：
Dev
QA
Stage
Production
在每个环境中，你想要不同的应用程序配置。
配置文件有助于在不同的环境中进行不同的应用程序配置。
Spring 和 Spring Boot 提供了你可以制定的功能。
不同配置文件中，不同环境的配置是什么？
为一个制定的环境设置活动的配置文件。
Spring Boot 将会根据特定环境中设置的活动配置文件来选择应用程序的配置。
81、如何使用配置文件通过 Spring Boot 配置特定环境的配置？
配置文件不是设别环境的关键。
在下面的例子中，我们将会用到两个配置文件
dev
prod
缺省的应用程序配置在 application.properties 中。让我们来看下面的例子：
application.properties
basic.value= true
basic.message= Dynamic Message
basic.number= 100
我们想要为 dev 文件自定义 application.properties 属性。我们需要创建一个名为 application-dev.properties 的文件，并且重写我们想要
自定义的属性。
application-dev.properties
basic.message: Dynamic Message in DEV
一旦你特定配置了配置文件，你需要在环境中设定一个活动的配置文件。
有多种方法可以做到这一点：
在 VM 参数中使用 Dspring.profiles.active=prod
在 application.properties 中使用 spring.profiles.active=prod
文章来源： http://www.3xmq.com/article/1522809264295
82、我们如何使用Maven设置Spring Boot应用程序？
我们可以像在任何其他库中一样在Maven项目中包含Spring Boot。但是，最好的方法是从spring-boot-starter-parent项目继承并声明
依赖于Spring Boot启动器。这样做可以让我们的项目重用Spring Boot的默认设置。 继承spring-boot-starter-parent项目非常简单 - 我
们只需要在 pom.xml 中指定一个 parent 元素：
我们可以在Maven 中央仓库找到最新版本的 spring-boot-starter-parent。 上面的方式很方便但是并不一定符合实际需要。例如公司要
求所有项目依赖构建从一个标准BOM开始，我们就不能按上面的方式进行。 在这种情况下，我们可以进行如下引用：
83、如何禁用特定的自动配置？
如果我们要禁用特定的自动配置，我们可以使用@EnableAutoConfiguration注解的exclude属性来指示它。如下禁用了数据源自动配置
DataSourceAutoConfiguration：
如果我们使用@SpringBootApplication注解。 它具有@EnableAutoConfiguration作为元注解 - 我们同样可以配置exclude属性来禁用
自动配置：
我们还可以使用spring.autoconfigure.exclude环境属性禁用自动配置。在application.properties(也可以是application.yml)配
置文件设置如下也可以达到同样的目的：
84、Spring boot支持哪些外部配置？
Spring Boot支持外部配置，允许我们在各种环境中运行相同的应用程序。我们可以使用properties文件，YAML文件，环境变量，系统属
性和命令行选项参数来指定配置属性。 然后，我们可以访问使用这些属性@Value注释，经由绑定对象 的@ConfigurationProperties注
释或Environment环境抽象类注入。 以下是最常见的外部配置来源：
命令行属性：命令行选项参数是以双连字符开头的程序参数，例如-server.port = 8080。Spring Boot将所有参数转换为属性，并
将它们添加到环境属性集中。
应用程序属性：应用程序属性是从application.properties文件或其YAML对应文件加载的属性。默认情况下，Spring Boot会在当
前目录，类路径根或其config子目录中搜索此文件。 特定于配置文件的属性：特定于配置文件的属性从
application- {profile}
.properties文件或其YAML对应文件加载。{profile}占位符是指活性轮廓。这些文件与非特定属性文件位于相同位置，并且优先
于非特定属性文件。
85、如何对Spring Boot应用进行测试？
在为Spring应用程序运行集成测试时，我们必须有一个ApplicationContext。 为了简化测试，Spring Boot为测试提供了一个特殊的注释
@SpringBootTest。此批注从其classes属性指示的配置类创建ApplicationContext。 如果未设置classes属性，Spring Boot将搜索主
配置类。搜索从包含测试的包开始，直到找到使用@SpringBootApplication或@SpringBootConfiguration注释的类。 请注意，如果我们使
用JUnit 4，我们必须用@RunWith（SpringRunner.class）装饰测试类。
86、Spring Boot Actuator有什么用？
Spring Boot Actuator可以帮助你监控和管理Spring Boot应用，比如健康检查、审计、统计和HTTP追踪等。所有的这些特性可以通过
JMX或者HTTP endpoints来获得。 Actuator同时还可以与外部应用监控系统整合，比如 Prometheus, Graphite, DataDog, Influx,
Wavefront, New Relic等。这些系统提供了非常好的仪表盘、图标、分析和告警等功能，使得你可以通过统一的接口轻松的监控和管理你
的应用。 Actuator使用Micrometer来整合上面提到的外部应用监控系统。这使得只要通过非常小的配置就可以集成任何应用监控系统。
将Spring Boot Actuator集成到一个项目中非常简单。我们需要做的就是在pom.xml文件中包含 spring-boot-starter-actuator启动器：
Spring Boot Actuator可以使用HTTP或JMX端点公开操作信息。但是，大多数应用程序都使用HTTP，其中端点的标识和/执行器前缀形
成URL路径。 以下是Actuator提供的一些最常见的内置端点：
auditevents： 公开审计事件信息
env： 公开环境属性
health： 显示应用程序运行状况信息
httptrace： 显示HTTP跟踪信息
info： 显示任意应用程序信息
metrics： 显示指标信息
mappings： 显示所有@RequestMapping路径的列表
scheduledtasks： 显示应用程序中的计划任务
threaddump： 执行线程转储
`beans ：所有加载的spring bean
更多关于Spring Boot Actuator 的信息可查看Spring Boot 2.x 中的 Actuator 。 请注意：生产使用Actuator务必保护好这些端点，避免
未授权的访问请求。
87、SpringBoot 中静态首页默认位置可以放在哪里？
当我们应用根目录时，可以直接映射，将 index.html 放入下面的位置：
classpath:/META-INF/resources/index.html
classpath:/resources/index.html
classpath:/static/index.html
classpath:/public/index.html
89、SpringBoot 中静态资源直接映射的优先级是怎样的？
SpringBoot 静态资源直接映射为/**，可以通过根目录来访问。/META-INF/resources/webjars/映射为/webjars/，通过访问 /webjar 访
问。优先级顺序为：META-INF/resources > resources > static > public。
90、继承 WebMvcConfigurerAdapter 抽象类，常用的重写方法列举几个？
WebMvcConfigurerAdapter 实现 WebMvcConfigurer 接口，常用的可能需要重写的方法有下面几个：
/** 解决跨域问题 **/
public void addCorsMappings(CorsRegistry registry) ;
/** 添加拦截器 **/
void addInterceptors(InterceptorRegistry registry);
/** 这里配置视图解析器 **/
void configureViewResolvers(ViewResolverRegistry registry);
/** 配置内容裁决的一些选项 **/
void configureContentNegotiation(ContentNegotiationConfigurer configurer);
/** 视图跳转控制器 **/
void addViewControllers(ViewControllerRegistry registry);
/** 静态资源处理 **/
void addResourceHandlers(ResourceHandlerRegistry registry);
/** 默认静态资源处理器 **/
void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);
91、@SpringBootApplication 引入了哪3个重要的注解？
@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan。其它的 4 个 @Target、@Retention、@Documented、
@Inherited，也重要，但应该不是本题想问的知识点。
92、@SpringBootApplication 注解中的属性相当于哪几个注解？
等价于以默认属性使用 @Configuration，@EnableAutoConfiguration 和 @ComponentScan。
Spring Cloud面试题
1、什么是 Spring Cloud？
Spring cloud 流应用程序启动器是基于 Spring Boot 的 Spring 集成应用程序，提供与外部系统的集成。Spring cloud Task，一个生命周期
短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。
2、使用 Spring Cloud 有什么优势？
使用 Spring Boot 开发分布式微服务时，我们面临以下问题