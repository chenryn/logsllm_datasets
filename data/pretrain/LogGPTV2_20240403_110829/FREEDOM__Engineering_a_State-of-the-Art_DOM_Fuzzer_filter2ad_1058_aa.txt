title:FREEDOM: Engineering a State-of-the-Art DOM Fuzzer
author:Wen Xu and
Soyeon Park and
Taesoo Kim
FreeDom: Engineering a State-of-the-Art DOM Fuzzer
Wen Xu
Georgia Institute of Technology
PI:EMAIL
Soyeon Park
Georgia Institute of Technology
PI:EMAIL
Taesoo Kim
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
The DOM engine of a web browser is a popular attack surface and
has been thoroughly fuzzed during its development. A common
approach adopted by the latest DOM fuzzers is to generate new
inputs based on context-free grammars. However, such a generative
approach fails to capture the data dependencies in the inputs of a
DOM engine, namely, HTML documents. Meanwhile, it is unclear
whether or not coverage-guided mutation, which is well-known to
be effective in fuzzing numerous software, still remains to be effec-
tive against DOM engines. Worse yet, existing DOM fuzzers cannot
adopt a coverage-guided approach because they are unable to fully
support HTML mutation and suffer from low browser throughput.
To scientifically understand the effectiveness and limitations of
the two approaches, we propose FreeDom, a full-fledged cluster-
friendly DOM fuzzer that works with both generative and coverage-
guided modes. FreeDom relies on a context-aware intermediate
representation to describe HTML documents with proper data de-
pendencies. FreeDom also exhibits up to 3.74× higher throughput
through browser self-termination. FreeDom has found 24 previ-
ously unknown bugs in commodity browsers including Safari, Fire-
fox, and Chrome, and 10 CVEs has been assigned so far. With the
context-aware generation, FreeDom finds 3× more unique crashes
in WebKit than the state-of-the-art DOM fuzzer, Domato. FreeDom
guided by coverage is more effective in revealing new code blocks
(2.62%) and finds three complex bugs that its generative approach
fails to find. However, coverage-guided mutation that bootstraps
with an empty corpus triggers 3.8× fewer unique crashes than the
generative approach. The newly revealed coverage, more often
than not, negatively affects the effectiveness of DOM fuzzers in bug
finding. Therefore, we consider context-aware generation the best
practice to find more DOM engine bugs and expect further improve-
ment on coverage-guided DOM fuzzing facilitated by FreeDom.
CCS CONCEPTS
• Security and privacy → Browser security; Vulnerability
scanners.
KEYWORDS
context-aware DOM fuzzing; coverage-guided DOM fuzzing;
browser vulnerability discovery
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423340
ACM Reference Format:
Wen Xu, Soyeon Park, and Taesoo Kim. 2020. FreeDom: Engineering a State-
of-the-Art DOM Fuzzer. In Proceedings of the 2020 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’20), November 9–13, 2020,
Virtual Event, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.
1145/3372297.3423340
1 INTRODUCTION
A DOM (Document Object Model) engine is a core component of
every modern web browser, which is responsible for displaying
HTML documents in an interactive window on an end-user device.
Considering its giant code base and extraordinary complexity, a
DOM engine has always been one of the largest bug sources in a web
browser. Meanwhile, we have witnessed many high-severity DOM
engine bugs being exploited consistently in remote attacks over
the past decade. Hence, to prevent such a prominent cybersecurity
threat, all the browser vendors have been working tirelessly to
discover and patch bugs in their DOM engines [14, 15, 26, 36, 37].
Though a DOM engine has complex implementation, its input
format (i.e., HTML) has detailed specifications. Therefore, smart
fuzzing becomes the dominant approach for finding DOM engine
bugs in practice [1, 7, 11, 23, 28, 33, 34, 47, 58]. For instance, Google
has heavily fuzzed Chrome on 25,000 cores and successfully found
over 16,000 bugs, the majority of which reside in the DOM en-
gine [15]. Nevertheless, after nearly 10 years of development, state-
of-the-art DOM fuzzers still adopt an obsolete design with a missing
justification for the resistance to the latest fuzzing techniques.
Particularly, all the recent DOM fuzzers [11, 33, 34] use static
grammars that describe the DOM specification to generate random
HTML documents with correct syntax. Nevertheless, an HTML
document has rich semantics, which are mainly reflected by all sorts
of explicit and implicit data dependencies that widely exist in the
specification. However, random generation driven by context-free
grammars suffers from a chicken-and-egg problem: a predefined
grammar provides several valid options to construct every possible
document unit. Meanwhile, constructing a context-dependent unit
relies on the concrete value of another unit in a specific document,
namely, the exact option rolled for the unit, which can never be
known by the static grammar before generating the document.
Unfortunately, existing DOM fuzzers fail to completely solve this
problem and suffer from semantic errors in their output documents.
More importantly, in research communities, a conventional wis-
dom is that coverage-guided mutation, which has recently gained
popularity [18, 19, 25, 57], outperforms blackbox generation. How-
ever, there is no solid evidence that supports or objects to this claim
regarding DOM fuzzing. Unfortunately, we are unable to directly
utilize existing DOM fuzzers to address this open problem. First,
those fuzzers output textual documents without preserving inter-
mediate information. The generated documents thus can only be
further mutated by appending new data rather than by many other
Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA971CCS ’20, November 9–13, 2020, Virtual Event, USA
Wen Xu, Soyeon Park, and Taesoo Kim
operations such as data flipping and splicing. More importantly,
without sufficient context awareness, existing fuzzers still rarely
avoid semantic errors in mutation. Second, different from general
fuzzing targets, a launched browser instance never automatically
terminates unless a crash occurs. It is also difficult to know the ex-
act timing point when an input document is completely processed
because of dynamic rendering tasks (e.g., repainting, animations,
transitions, etc.) that may occur anytime. Therefore, existing DOM
fuzzers enforce every launched browser instance to exit within 5 to
10 seconds by a preset timeout. This setting results in severely low
throughput, which is not applicable in coverage-driven fuzzing.
To solve the aforementioned challenges, we present FreeDom,
the first end-to-end DOM fuzzing framework that fully supports
both document generation and coverage-guided mutation in a dis-
tributed environment. We also consider FreeDom as an ideal play-
ground for exploring the possibilities of adopting cutting-edge
techniques to fuzz DOM engines. FreeDom uses a custom inter-
mediate representation called FD-IR to describe HTML documents.
FD-IR manages to not only follow the DOM specification to record
document content in a structural manner but also preserve detailed
context information. Instead of emitting plain documents with
grammar rules, FreeDom defines various fuzzing operations based
on FD-IR, including generating new documents, fully mutating ev-
ery part of an existing document and merging two documents into a
new one. To introduce fewer semantic errors, FreeDom queries the
context information to fulfill any data dependence in a document.
In addition, FreeDom executes an optimized browser in coverage-
guided fuzzing that dynamically kills itself when the processing of
an input document mostly completes. The optimization improves
the fuzzing throughput of WebKit by 1.48–3.74× compared to using
a 5-second time limit and results in very few missed crashes.
We run FreeDom with its generative approach for fuzzing the
DOM engines of three mainstream browsers (i.e., Apple Safari,
Mozilla Firefox, and Google Chrome) and have successfully found
24 bugs, to which 10 CVEs and 65K USD bug bounty have been
awarded. In WebKit, FreeDom discovers nearly 3× more unique
crashes than the state-of-the-art DOM fuzzer, Domato, with a simi-
lar block coverage, thanks to its context awareness. When fuzzing
SVG documents in WebKit, FreeDom triggers around 8 crashes
on average, while Dharma, another recent fuzzer, fails to find any
crash. We also evaluate FreeDom with its mutation-based approach
to determine the advantages and disadvantages of coverage-guided
DOM fuzzing. Compared to FreeDom with its generative approach,
coverage-guided mutation manages to visit 2.62% more code blocks
and discover three new bugs, but meanwhile triggers 3.8× fewer
unique crashes in 24 hours. When fuzzing complex software like
a DOM engine, the generative approach manages to explore the
numerous interfaces in an incomplete but efficient manner through
large documents with intended content and thus discovers more
bugs in limited time. Nevertheless, the coverage-driven approach
is more capable of triggering the bugs that occur with a set of
restricted values in a document by incremental mutations.
In summary, this paper makes the following contributions:
• We present an open-sourced1 DOM fuzzer, FreeDom, with
a redefined design, that can run with either a generative
1https://github.com/sslab-gatech/freedom
Figure 1: An example of an HTML document. The document
is composed of three main parts that have distinct syntax
and semantics: (1) A DOM tree specifies objects to be dis-
played at the very beginning. (2) A list of CSS rules further
decorates the objects in the tree. (3) The JavaScript codes
modify the layout and effect of the objects at runtime.
approach or a coverage-guided mutational approach based
on a context-aware IR for describing HTML documents.
• We perform the first systematic study on the application
of coverage-guided mutation in DOM fuzzing and have a
detailed discussion of its opportunities and obstacles.
• We have reported 24 bugs found by FreeDom in three main-
stream browsers and gained 10 CVEs. Further, FreeDom
outperforms the most recent DOM fuzzer by discovering 3×
more unique crashes in WebKit.
2 BACKGROUND
2.1 DOM Explained
2.1.1 DOM: An HTML Document Representation. A web browser
accepts HTML documents as its input, which follows the Document
Object Model (DOM) standardized by W3C. Figure 1 presents an
example of a document that consists of the following parts:
The initial DOM Tree. The DOM logically treats a document
as a tree structure, and each tree node represents an object to be
rendered. An HTML document file specifies the initial object tree.
Most notable nodes represent elements. An element is identified by
its tag and has its own semantics. A leaf node of an element can
be another element or a text node. Moreover, each element owns a
list of attribute nodes. The attributes control various aspects of the
rendering behavior of an element. Note that for each element, the
DOM standard specifies exactly what child elements and attributes
it owns and whether it can have text in its content. For example,
the DOM tree presented in Figure 1 includes a  element that
owns two attributes and two child elements.
CSS Rules. Cascading Style Sheets (CSS) are used to specify in
which style the elements in the document are rendered. Contained
Element nodeChild element nodeAttribute node     Text     12345678910111213141516171819202122232425262728293031CSS selectorCSS RulesJavaScriptText nodeDOM TreeEvent handler CSS propertySession 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA972FreeDom: Engineering a State-of-the-Art DOM Fuzzer
CCS ’20, November 9–13, 2020, Virtual Event, USA
by , a CSS rule consists of (1) a group of CSS selectors,
which determines the elements to be styled, and (2) a group of
CSS properties, each of which styles a particular aspect of the
selected elements. For instance, Line 3 in Figure 1 requires the
 selected by .class1 to split its content into 1,264 columns.
Event Handlers. To provide the interactivity of a web page, the
DOM standard defines various events being triggered at specific
timing points or user inputs. Event handlers can be registered in
 so as to programmatically access or control the objects
in the tree at runtime. For example, in Figure 1, main() and f2()
are executed when a document is loaded and the  element
loses focus, respectively. An event handler calls DOM APIs declared
by the specification to manipulate DOM objects. Typical DOM APIs
include object property accesses and object method invocations.
Currently, all the popular browsers expose DOM APIs in JavaScript.
2.1.2 DOM Engine Bugs. A browser runs a DOM engine (e.g., We-
bKit in Apple Safari and Blink in Google Chrome), which literally
implements the DOM specification so as to interpret an HTML
document. In this work, we aim to find memory errors triggered by
a DOM engine when operating malformed documents. Such client-
side bugs result in data breaches or even remote code execution in
the context of a renderer process and therefore have always been
considered one of the most significant security threats to end users
over the past decade. Though browser vendors exert endless efforts
to eliminate DOM engine bugs [14, 15, 26, 36, 37], there still have
been quite a few full browser exploit chains that target DOM bugs
in recent years [5, 24, 49], including one developed by us based on
a bug found by FreeDom in Safari.
Caveat. In this work, we are not interested in the logical issues of
a DOM engine, such as Universal Cross-Site Scripting (UXSS). In
addition, finding the bugs that reside in the JavaScript engine used
by a DOM engine is also beyond the scope of this paper.
2.2 A Primer on DOM Fuzzing
The giant and rapidly growing DOM specification describes an
extremely complex format for an HTML document. Hence, fuzzing,
which requires minimal knowledge about the internals of the target
software, becomes the most preferable approach for finding DOM
engine bugs in practice. Over the last decade, researchers have
proposed numerous DOM fuzzers, which are summarized in Table 1.
The earliest DOM fuzzers, such as domfuzz [28] and cross_fuzz [58],
ran the fuzzer code in JavaScript together with a seed document
in the same window. At runtime, it crawled the available elements
on the page and invoked random DOM API calls to manipulate
them on-the-fly until the browser crashed. The popularity of such
dynamic fuzzers has declined because a target browser instance
ages after a long run, which results in unstable executions and
irreproducible crashes [55]. By contrast, most recent fuzzers are
static [1, 11, 34, 47] and generate syntactically correct documents
from scratch based on static rules or grammars that describe the
specification and execute every document with a fresh browser
instance for a limited amount of time. Since the rules and grammars
used by those fuzzers are not fully context-sensitive, the generated
documents suffer from semantic errors. As typical blackbox fuzzers,
they do not utilize existing testcases and feedback information for
input generation. Among the recent static DOM fuzzers, Domato
DOM fuzzer
domfuzz [28]
Bf3 [1]
cross_fuzz [58]
Dharma [34]
Avalanche [33]
Wadi [47]
Domato [11]
FreeDom
-
Year Type Method Str. Ctx. Cov. Active
2008
2010
2011
2015
2016
2017
2017
2020
G
G
G
G
G
G
G
G/M
D
S
D
S
S
S
S
S
-
✓
✓
✓
✓
✓
✓
✓
-
-
✓
Str.: Structure-aware, Ctx.: Context-aware, Cov.: Coverage-guided
✓
✓
✓
D: Dynamic, S: Static, G: Generative, M: Mutational
Table 1: The classification of existing DOM fuzzers. Dynamic
fuzzers themselves are web pages executed by the target
browser, while static fuzzers generate documents first and
then test them. As a state-of-the-art DOM fuzzer, FreeDom
is also static, which supports both blackbox generation and