问题，但是他们的请求还是能够被正常处理的。这次事故总算结束了。
在一个小时之内，所有用户流量都被导向其他的地方了。虽然用户可能面临延迟升高等
工具，以及常规的生产环境维护活动。
自动化工具全部停止，避免问题进一步发展。随后，他们停止或者暂停了更多的自动化
不久之后，全球各地数据中心都发出了报警。on-call工程师收到报警后，将整个团队的
导向了其他正常工作的地区。
因为这些机器的硬盘已经被清空了，为了避免这些请求失败，on-call工程师将用户流量
盘销毁队列中。所以按照正常流程，on-call工程师将用户流量导向了其他地区（drain）。
心的全部机器都被下线了，即将退役。工程师的调查显示，这些机器已经被转移到了磁
在第二个下线请求提交不久之后，on-call工程师收到一个警报，声称第一个小型数据中
灾难响应
第13章紧急事件响应
，不到一个小时的时
---
## Page 179
注1BIOS：系统内置的，在操作系统（OS）加载之前运行的计算机程序，负责初始化硬件。
非常重要的是，一旦紧急事件过去之后，别忘了留出一些时间书写事后报告。
事故了解得最清楚，一定要充分利用这一点。
但是要快。最高的优先级永远是将手头问题迅速解决。很多时候，触发这个事故的人对
大的范围内寻求帮助。找到更多团队成员，寻求更多的帮助，做你需要做的一切事情，
狂报警的工程师来说，它可能不是那么显而易见。如果你想不到解决办法，那么就在更
Google学到的最关键的一课是，所有的问题都有对应的解决方案，虽然对一个面对着疯
时间和经验一再证明，系统不但一定会出问题，而且会以没有人能够想到的方式出问题，
所有的问题都有解决方案
升级给了对应的开发工程师，他们很快将系统调节到了更好的性能水平上。
没有被擦除的机器上也要强制重新安装内核。为了处理这些问题，on-call工程师将问题
个问题同时也在传输文件时使用了错误的QoS设置，和错误的超时设置。而且该服务在
性能问题导致该服务只能在每台工作机器（worker）上同时并行运行两个安装操作。这
机器重装系统基础服务不能处理几千台机器的同时安装操作。这个问题主要来源于一个
时利用自动化工具重启了这些卡住的机器。
导致了安装器（installer）的负载上升。on-call工程师成功地将安装请求优先级提高，
么进入了一种重启循环（rebootcycle）状态。BIOS无法每次完成启动文件的传输，
没有很好地处理传输问题。注1在不同的网卡上，BIOS要么进入了停止状态（halt），
件传输协议（TFTP），同时使用了最差的网络质量标签（QoS）。每台机器的BIOS系统
这些机器的重新安装是非常缓慢而且不可靠的。这个问题主要由于重装过程使用了小文
起来。
时候零就等于全部。机器数据库响应了这个请求，于是其他的下线工作流开始迅速执行
上运行了一个空白过滤，导致将数据库中所有的机器都转移到了磁盘擦除队列中。有的
而是在整个机器数据库（GoogleMachineDatabase记录了生产系统中的全部机器列表）
第二次运行，获取机柜列表时得到了一个空白回应。该自动化系统没有抛弃这个回复，
这次事故的根源在于自动化系统对它发出的命令缺乏合适的合理性检查。当自动化系统
我们从中学到的
管理系统和平时的训练。所有相关的团队都参与进来，共同帮助解决问题。
很好地执行了这些流程。在事故中，整个公司的沟通和协作是一流的，多亏了应急事故
应急事故处理流程在本章提到的第一个事故出现之后很快成熟了起来，这些工程师很快
所有的问题都有解决方案
137
同
要
更
158
---
## Page 180
[159>提出那些大的，
138
每次新的失败模式发生时，应急处理者都将这些模式记录了下来；依靠这些事后报告
研究和学习过以前的事故记录。事故过后，他们都将系统改善为能更好地处理同类故障。
着共同的特点，响应者没有惊慌失措。他们在必要的时候引入了其他人的帮助。他们都
试导致，一个由配置文件改动触发，另外一个由自动化程序触发。对这些事件的处理有
上文论述了三种不同的系统失败情况。虽然三个紧急情况触发方式不同，一个由主动测
小结
起仔细监控着它们上周详细评审过的测试时出现故障呢？
分同事都还在参加黑森林中的团建时出现故障，还是希望和最可靠和最聪明的同事在一
不要依赖任何没有经过测试的假设。你是希望这个系统在星期六凌晨两点钟，公司大部
不真的了解它，以及依赖它的系统，或者它的用户会如何应对。不要预设任何假设，也
面对失败，理论和实践是两个完全不同的领域。直到你的系统真的失败的那一刻，你并
鼓励主动测试
样的事吗？
吗？如果上述所说正在发生，你能够立刻最小化灾难损失吗？坐在你旁边的人能做到同
系？谁来付钱？有对应的应急计划吗？你知道如何应对吗？你知道你的系统会如何应对
没有什么比现实更真实的测试了。我们应该提出一些大的、没有确切答案的问题。假如
好地避免未来的事故。
再次发生以同样的因素触发的同样的事故。一旦开始仔细学习过去的事故，我们就能更
在事故结束后，确保自己和其他人切实完成事故中总结的待办事项。这样能够避免未来
个人都能从中学到你所学到的知识。
找如何能在战术及战略上避免这项事故的发生。公布和维护事后报告，确保全公司的每
在记录中，请一定要诚实，一定要事无巨细。尤其重要的是，提出关键的问题。时刻寻
没有什么比过去的事故记录是更好的学习资料了。历史就是学习其他人曾经犯的错误。
为事故保留记录
向过去学习，而不是重复它
第13章紧急事件响应
甚至不可能的问题：假如……···
---
## Page 181
织架构上。
例分析是Google特有的，但是这种对待紧急事故的模式可以应用在各种不同规模的组
随着我们的系统不断发展，每次事故和测试都让系统和流程不断进步。虽然本章中的案
复了根源问题，同时在事故发生之前提前发现了其他的系统弱点。
事故发生。同时这些处理者也主动测试了他们的系统，这些测试保障了相关修改确实修
他们帮助了其他的团队学习如何更好地进行故障排除，以及加固他们的系统以避免类似
小结丨139
---
## Page 182
161>
12
的模块发生了错误，于是你决定先回滚到上一个版本。
能发生的紧急事故进行过演习，那么当事故发生时，
有效的紧急事故管理是控制事故影响和迅速恢复运营的关键因素。如果事先没有针对可
编辑：Kavita Guliani
作者：Andrew Stribblehil注1
第14章
#
注1
你呆呆地町着日志信息一直看，好像时间都停止了。几千行错误日志显示一个最近更新
过载停滞状态，彻底全坏了。
的数据中心的服务容量，它们开始过载了。还没等你做出任何反应，整个服务已经陷入
其中的3个都出现了问题。让整个情况变得更糟的是，现在用户流量已经超出了你剩下
条报警信息告诉你现在另外一个数据中心也出现了问题。接下来，总共5个数据中心
请求了。长叹一口气后，你放下了手中的咖啡，开始着手修复服务。几分钟之后，另一
开始响个不停。黑盒监控告诉你，在某个数据中心中，你的服务突然不再处理任何用户
假设你现在是Mary，某公司的on-call工程师。现在是周五下午两点，突然间你的手机
无流程管理的紧急事故
执行过程。
地进行应急事故流程管理，最后回顾了同样一个事故在良好的应急事故流程管理之下的
本章详细描述了一次没有采用紧急事故处理流程而导致失控的事故，还描绘了如何良好
紧急事故管理
本章的早期版本曾发布在；login：上（2015年4月，第40期，第2篇）。
一切管理理念都起不了作用。
---
## Page 183
调试和处理问题的工程师却没有被充分地利用起来。
事正在做什么。业务部门领导十分愤怒，最终用户正在面临服务问题，而其他可以帮忙
同样的原因，Mary根本没有时间清晰和有效地与其他人进行沟通，没有人知道他们的同
沟通不畅
以根本没有时间和精力去思考如何能够通过其他手段缓解当前服务的问题。
系统，英勇地尝试去解决服务问题一点儿也不奇怪。由于她正在忙着执行技术操作，所
我们倾向于按技术能力指标聘请像Mary这样的人。所以她在灾难过程中忙着不断改变
过于关注技术问题
的问题导致了整个事故的失控。
自己看来是这样。那么问题是怎么变得越来越糟的呢？在这次处理过程中，有几个常见
首先，我们要注意到，
对这次无流程管理的事故的剖析
重启了，读取了新配置文件，然后彻底崩溃了。
余不多的几个服务器优化一下，问题就解决了。但是在他改完配置的几秒后，这些进程
CPU黏性设置（即让进程独占某个CPU）。他自信只要他改动一点点小东西，就能将剩
Josephine 给Malcolm打了个电话。Malcom突然灵机一动，没准我们可以改改服务的
没过多久，最后两个剩余的数据中心也全挂了。在你完全不知情的情况下，睡眼松的
加缓存大小！”
根据他以前就不多的工程师经验，开始不断提出一堆难以拒绝的问题和评论，比如“增
体谅他们的愤怒之情，但是在这种情况下，你哪里还有精力？这时候，公司副总裁开始
务关键系统已经完全瘫痪”。同时，公司副总裁开始缠问你什么时候能够恢复服务，同
现在一个业务高管给你老板打了个电话，正在愤怒地质问为什么没有人通知他—
系统上尝试解决问题。“我们只是看看”，他们说道。
但是她勉强同意登录到系统上看一眼。同时你的同事Sabrina和Robin也开始从他们的
发者———Josephine。Josephine十分不愉快地接了电话，目前正是她当地时间凌晨3：30，
回滚并没有修复问题，于是你拿起电话开始呼叫这个正在进入休克状态的服务的主要开
在上面说的这个场景中，每个人都在尽力解决问题，起码在他们
对这次无流程管理的事故的剖析
141
“业
---
## Page 184
163
注2更多细节请参看http://www.fema.gov/national-incident-management-system。
事务处理团队（operationalwork）
事故总控（incident command）
们应该将一部分任务交接给其他人，有的时候这些人应该负责在事故流程管理系统中创
如果一个人目前要处理的事情太多了，该人需要向计划负责人申请更多的人力资源。他
而能够使每个人可以更独立自主地解决问题，因为他们不用怀疑和担心他们的同事都在
嵌套式职责分离
著称。
紧急事故流程管理的技巧和手段都是为了让这些富有热情的人能够真正帮上忙。Google
紧急事故的流程管理要素
发言人（communication）
以下是系统中可以分配给某个人的角色。
建更多的子事故（即用来通知公司其他相关部门等。）另外一种方式是，某个负责人可
在事故处理中，让每个人清楚自己的职责是非常重要的。有点反直觉的是，明晰职责反
Mary是故障排除的主要负责人，Malcolm的操作将服务状况变得更糟了。
Malcolm正在出于善意修改系统，但是他没有通知其他的同事一
不请自来
142
以将某个系统组件完全交给同事来处理，由该同事直接向负责人汇报情况。
干什么。
该人是本次事故处理团队的公众发言人。他的职责包括向事故处理团队和所有关心
事务处理团队负责人在与事故总控负责人充分沟通的情况下，负责指挥团队具体执行
保证其正确性和信息的及时性。
的人发送周期性通知（通常以电子邮件形式），同时可能要负责维护目前的事故文档，
合适的事务来解决问题。事务处理团队是在一次事故中唯一能够对系统做修改的团队。
请访问权限、收集联系信息等。
要的话，他们要负责协调工作，让事务处理团队可以更有效地解决问题，比如代申