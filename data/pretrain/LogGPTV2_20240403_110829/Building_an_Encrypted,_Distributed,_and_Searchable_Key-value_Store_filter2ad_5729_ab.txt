heavy workloads, new nodes are incrementally added with
moderate impact in our system. The aﬀected encrypted data
can be directly relocated via the secure data partition algo-
rithm by the corresponding nodes, while the aﬀected indexes
are moved in a client-assisted manner, i.e., being rebuilt at
the client for security considerations.
2.2 Threat Assumption
Figure 2: System architecture
query attributes and the query results.
In Figure 2, the
nodes are allocated in the oﬀ-premises public cloud. To
meet the requirements of performance and availability, they
have to be always online, and thus are vulnerable to security
breaches and unauthorized disclosures [21, 34].
On the one hand, outside unauthorized adversaries, who
compromise some or all of the nodes, gain the privilege to
access the hard disks and the physical memory. They at-
tempt to learn the sensitive information about the data. On
the other hand, cloud service providers may also be a threat.
They could faithfully maintain the nodes, and execute the
operations as required, but intentionally learn the data, or
unintentionally mishandle the data to third parties. We as-
sume that the client is in the trusted domain, and does not
collude with those adversaries. Besides, the communication
channels are assumed to be authenticated and encrypted
against eavesdropping. Our security goal is to protect data
conﬁdentiality throughout their life-cycles. User authenti-
cation and data integrity are orthogonal to our focus.
2.3 Cryptographic Primitives
A symmetric encryption scheme SE(KGen, Enc, Dec)
contains three algorithms: The key generation algorithm
KGen takes a security parameter k to return a secret key
K. The encryption algorithm Enc takes a key K and a
value V ∈ {0, 1}∗ to return a ciphertext V ∗ ∈ {0, 1}∗; The
decryption algorithm Dec takes K and V ∗ to return V . De-
ﬁne a family of pseudo-random functions F : K × X → R,
if for all probabilistic polynomial-time distinguishers Y ,
|P r[Y F (k,·) = 1|k ← K] − P r[Y g = 1|g ← {Func : X →
R}]| < negl(k), where negl(k) is a negligible function in k.
3. THE PROPOSED SYSTEM
This section elaborates on our system design. We ﬁrst in-
troduce the secure data partition algorithm which can dis-
tribute the encrypted data evenly across the nodes without
knowing the underlying value. Then we use the column-
oriented data model as the instantiation to present how our
system maps the data to encrypted KV pairs. Other data
models like graph and document data are also supported.
Subsequently, we implement two APIs for secure and fast ac-
cess of the encrypted KV store. To enable the secure query
on secondary attributes of data, we propose the construction
of encrypted local indexes. We then show how the system
scales out when new nodes are added.
3.1 Encrypted Key-value Store
In this paper, we are targeting the threats from semi-
honest adversaries. They are interested in the data, the
We ﬁrst introduce the construction of the proposed en-
crypted and distributed KV store, where each KV pair con-
1 5	
  2	
  4	
  3	
  6	
  Client	
  Dispatcher	
  Node	
  Secure Token 549sists of a pseudo-random label and an encrypted value. The
proposed encrypted store is simple yet secure, eﬃcient and
scalable. The beneﬁts are two-fold: 1) It is inherently com-
patible with the state-of-the-art data partition algorithm in
distributed systems, i.e., consistent hashing [20]; 2) Many
diﬀerent high-level data models are also supported in the
encryption domain, because the data with diﬀerent struc-
tures and formats can be readily mapped to individual KV
pairs in a privacy-preserving way.
3.1.1 Secure Data Partition Algorithm
For security, each KV pair (l, v) is protected, where the
primary key1 is kept safe by the secure pseudo-random func-
tion (PRF) denoted as l∗ and the value is encrypted via
symmetric encryption denoted as v∗.
∗
(cid:104)l
, v
∗(cid:105) = (cid:104)P (Ka, l), Enc(Kv, v)(cid:105)
where Ka, Kv are the private keys, and P is PRF. Here,
each protected pair can still be distributed to a cluster of
nodes evenly by the known consistent hashing algorithm. In
detail, the output range of a hash function wraps around to
form a ring maintained at the dispatcher shown in Figure 2.
Each node is assigned a random value as its position on the
ring. The hash of l∗ determines the location of v∗. Without
loss of generality, the ring is clockwise checked, and the ﬁrst
node with a position label larger than the hash value will be
the target location.
This algorithm allows the data to be stored across nodes
with balanced distribution. It also enables distributed sys-
tems to scale incrementally. When a node is added, only
its immediate neighbors are aﬀected, and others remain un-
changed. For the subsequent operations like request routing,
data retrieval and data update, the security is guaranteed
due to the pseudo-randomness of secure PRF and the se-
mantic security of symmetric encryption. The correctness
is also ensured, because PRF is a deterministic function,
and each encrypted value is still associated with a unique
pseudo-random label for identiﬁcation.
3.1.2 Construction with Secure Data Modeling
Building on top of the encrypted KV store, our system
needs to ﬂexibly support multiple diﬀerent data models. The
goal of secure data modeling is to design a speciﬁc mapping
of data from diﬀerent formats to encrypted key-value pairs.
Therefore, the data applications with richer data models
will continue enjoying the beneﬁts of high performance KV
stores while ensuring strong data protection. As our ﬁrst
eﬀort, the column-oriented data model is explored, which
is widely used in NoSQL systems for semi-structured data,
e.g., Cassandra [23]. In particular, the data values are stored
in structured tables such that a row name associates with a
set of column attributes, i.e., (R, C1,··· , Cn), where R is the
row name, and Ci, i = 1,··· , n, are the column attributes.
At a high level, the data in a table can be mapped to in-
dividual KV pairs, where the label is derived from the row
name and the column attribute. Here, we will give two con-
structions from two pragmatic settings of consistent hashing
respectively. The former uses the protected row name as the
input of consistent hashing to locate the target node, and
then incorporates the protected column attribute to match
the data, similar to the design in Cassandra [23]. The latter
1The term “key” here has a diﬀerent meaning in cryptogra-
phy, so we use “label” instead to avoid the ambiguity.
Figure 3: The construction of the encrypted KV store
constructs a composite label from a row name and a column
attribute for both data partition and data retrieval, similar
to the design in FoundationDB [13]. We note that the two
constructions have their performance merit in diﬀerent ap-
plication scenarios, but we choose and implement the latter
for security considerations, because it fully hides the struc-
tural information of encrypted data when the KV store is
being accessed and scales out.
Construction I: We use secure PRF to protect the row
name and determine the data partition. Each entry in the
encrypted KV store is constructed as:
(cid:104)G(P (Ka, R), P (KC , C)), Enc(Kv, v)(cid:105)
The former component is a pseudo-random label, where P
and G are PRF, Ka, KC and Kv are private keys, and v is
the data value. Note that P (Ka, R) is the token used for re-
quest routing, and thus should be encrypted and separately
stored for system scaling later. After locating the data, the
target node computes G(P (Ka, R), P (KC , C)) from another
token P (KC , C) to ﬁnd the encrypted value Enc(Kv, v).
Construction II: In this construction, we propose to use
a composite pseudo-random label for both data partition
and identiﬁcation. As shown in Figure 3, each entry is con-
structed as the format of:
(cid:104)P (Ka, R||C), Enc(Kv, v)(cid:105)
where a pseudo-random label P (Ka, R||C) is generated from
the concatenation of the row name and the column attribute.
As a result, this construction fully scrambles all the en-
crypted values in the table, but still preserves the structural
information and the relationships of the underlying data.
Besides, the one-to-one mapping property of PRF still guar-
antees a unique position for each data value on the consistent
hash ring. Therefore, one encrypted data value is always ad-
dressed and retrieved by the same pseudo-random label.
Discussion on performance: We note that two construc-
tions bring distinct performance merit. In Construction I,
the data in the same row are stored in the same node. Al-
though they are scrambled, the entire row can still be ac-
cessed eﬃciently without introducing traﬃc to other nodes.
However, if some rows are frequently accessed, the corre-
sponding node could suﬀer from heavy workloads. Construc-
tion II solves the issue by distributing the data more evenly.
Yet, using a composite label introduces more inter-node traf-
ﬁc when accessing the data values in the same row, because
these encrypted data could be stored in diﬀerent nodes.
Comparison on security: Regrading security, the pro-
posed two constructions both protect the data conﬁdential-
Val1	
  Val2	
  …	
  Val3	
  Val4	
  …	
  …	
  …	
  PRF(K,	
  Row2||Col1)	
  ENC(Val3)	
  PRF(K,	
  Row1||Col2)	
  ENC(Val2)	
  Col1	
  Col2	
  …	
  Row1	
  Row2	
  PRF(K,	
  Row1||Col1)	
  ENC(Val1)	
  …	
  …	
  PRF(K,	
  Row2||Col2)	
  ENC(Val4)	
  Node i Node j … 550Algorithm 1: Secure Put
Request: P ut(K, R, C, v)
Data: Private key: K; Row name: R; Column
attribute: C; Data value: v.
Result: true or f alse.
begin
Algorithm 2: Secure Get
Request: Get(K, R, C)
Data: Private key: K; Row name: R; Column
Result: Encrypted value: v∗.
begin
attribute: C.
client:
Ka ← H(K, “address(cid:48)(cid:48));
Kv ← H(K, C);
l∗ ← P (Ka, R||C);
v∗ ← Enc(Kv, v);
c ← 1;
dispatcher:
i ← route(l∗);
for node = i,··· , i + N : do
b ← put(l∗, v∗);
client:
if b = true then
c + +;
if c = Nw then
return true;
return f alse;
1
2
3
4
5
6
7
8
9
10
11
12
13
1
2
3
4
5
6
7
8
9
10
11
12
client:
Ka ← H(K, “address(cid:48)(cid:48));
l∗ ← P (Ka, R||C)
c ← 1;
dispatcher:
i ← route(l∗);
for node = i,··· , i + N : do
v∗ ← get(l∗);
client:
if v∗ (cid:54)= null and v∗ = v∗
i−1 then
c + +;
if c = Nr then
return v∗
i ;
v∗ ← ⊥;
return f alse;
ity because all the data are encrypted after leaving from the
client. Without the appropriate pseudo-random labels, the
encrypted data will not be correctly accessed.
However, Construction I has additional leakage, which can
be exploited for inference attacks [26]. As mentioned, the
token P (Ka, R) should be encrypted and stored to enable
data relocation. Therefore, the data that belong to the same
row are known. Besides, the data with the same column at-
tribute are known as well if they are requested, because the
same column will result in the same token P (KC , C). Then
if the adversary has a reference database which is highly cor-
related to the encrypted one, he might be able to recover the
data values via frequency analysis, i.e., recording histograms
of frequent KV pairs in two databases and inducing the un-