heartbeat communications are rarely disturbed by other activities
happening on the devices. As such, they are good indicators to
distinguish the categories or even manufacturers.
3) Protocol choices are diverse. The communication between devices
and remote services must follow certain convention, which is re-
flected in the chosen protocols. In Table 1 we show such diversified
choices in terms of packets ratio under different network protocols.
Note that we only measure protocols at network layer, transmis-
sion layer and application layer, discarding those from lower layers.
According to our statistics, most traffic captured by an attacker is
IPv4-based. For devices with large volumes of traffic, like network
camera, UDP is usually adopted. Compared with non-IoT devices,
IoT devices generate much less HTTP traffic for communication.
Though DNS is usually used by previous works for device identifica-
tion [11, 12, 37], our results show that its ratio is quite low compared
to other protocols. As such, simply relying on DNS does not guaran-
tee device identification especially when the traffic observed comes
from an incomplete session.
In short, the above observations suggest fingerprinting IoT de-
vices is feasible, even under complex network environment like
NAPT and VPN. On the other hand, a comprehensive model instead
of matching individual feature is necessary for our task.
3.2 Data Collection
While some prior works on IoT network analsyis have published
their datasets [37]. We found they cannot be used in our study, as
we focus on more complex settings with NAPT and VPN enabled in
the gateway. As such, we set up our own smart home environment
and collected the traffic by ourselves. The dataset will be published
at a public repository.
We set up the environment in a campus laboratory with 15 de-
vices, including 10 IoT and 4 non-IoT devices. Table 2 shows the
details of our devices. Our devices can be divided into six categories:
voice assistant, IoT hub, IoT kits(smart plug), network camera, in-
teractive machine and non-IoT deivces. Devices used in our paper
have different interaction modes and traffic patterns, which can be
helpful to depict the overall picture of IoT device traffic.
We use a Raspberry Pi [7] as the gateway. A typical Raspberry Pi
provides two network interface cards – eth0 and wlan0. To simulate
NAPT, we connect eth0 to the Internet and then enable the linux
service hostapd to create an access point with wlan0 network card
of Raspberry Pi. Next, we create rules for iptables so that packets
can be forwarded from wlan0 to eth0 and vice versa. For VPN, we
establish a virtual machine with DigitalOcean Droplets service [4]
and use it as our VPN server, we then setup openvpn client on our
Raspberry Pi to enable VPN tunneling.
device
echo dot
google home
tmall assist
xiaomi hub
360 camera
xiaobai camera
type
voice assistant
voice assistant
voice assistant
hub
network camera
network camera
MAC
88:71:e5:ed:be:c7
f4:f5:d8:db:61:84
18:bc:5a:19:eb:7d
78:11:dc:e1:f0:6b
b0:59:47:34:16:ff
78:11:dc:cf:c8:f1
30:20:10:fb:7c:05
b4:e6:2d:08:63:0c
78:0f:77:1b:00:8c
28:6c:07:87:54:b0
a4:50:46:06:80:43
20:a6:0c:5a:42:10
28:3f:69:05:2d:b0
44:80:eb:21:cb:95
tplink plug
orvibo plug
broadlink plug
mitu story teller
xiaomi mobile
xiaomi tablet
sony mobile
smart plug
smart plug
smart plug
interactive
non-IoT
non-IoT
non-IoT
non-IoT
Table 2: Devices used in our experiment
motorola mobile
We collect network traffic under three different settings:
• Single-device environment. We assume only one device is
active and we connect one IoT device to the gateway at a
time.
• Multi-device and noisy environment. In this case, all IoT and
non-IoT devices are connected to the gateway which has
NAPT enabled. Several devices may work simultaneously at
time, leading to traffic fusion.
• VPN environment. In addition to the above settings, we as-
sume VPN is enabled. Traffic before and after VPN are both
collected from wlan0 and eth0 at the same time.
To generate traffic, we adopt two strategies: automatic triggering
and manual triggering. Automation can relieve the burden of te-
dious repeating experimenters and manual triggering can simulate
human-machine interaction in real environments.
Automatic triggering. For devices like smart plug and network
that can be controlled by mobile apps, we use MonkeyRunner [5] to
Conference’17, July 2017, Washington, DC, USA
Shuaike Dong, Zhou Li, Di Tang, Jiongyi Chen, Menghan Sun, and Kehuan Zhang
protocol types including IP, TCP, UDP, TLS/SSL, HTTP and DNS, ac-
cording to our measurement (see Table 1). If a packet involves one
of the protocols, the corresponding bit will be set to 1, otherwise
0. We set the last position of the ‘binary string’ to be others for
the protocols beyond the previous 6 protocols. For example, a UDP-
based DNS request is represented as  and a NTP packet
is represented as . The only feature we consider beyond
metadata is the direction of packet. We use 0 and 1 for inbound
and outbound packets respectively.
Note that we do not use the domain name in DNS response
like previous works [11, 12] because DNS can be encrypted as
well [23, 24]. The destination IP is not used because it is periodically
changed when the IoT vendors run the remote server on public
cloud, which has become a popular choice [2].
In the end, we concatenate all the selected features and compose
a one-dimensional vector as the representation of a packet (), as
shown in Figure 5. Note that we compute time interval from the
epoch time between two adjacent packets and use it as feature to
model the temporal relations between packets.
Packet labeling. One key challenge in traffic pre-processing is
packet labeling, especially under VPN environment. As section 2.3
shows, packets collected outside of smart home (or between eth0
and VPN server) are all merged into a single flow (packets with the
same destination IP and port [42]), without any original identifier
of sender/receiver. To identify the VPN packets and label those with
their corresponding devices, we develop a mapping technique based
on three observations obtained through our empirical analysis: (1)
The size of a packet increases after being processed by VPN; (2)
Multiple packets with different sizes can have the same size after
the encryption performed by VPN; (3) There is a delay of packet
transmission caused by VPN, which is usually shorter than 0.02
second.
Observation (1) and (2) can be reasoned through the cryptogra-
phy algorithms used by openvpn server. It provides three symmetric
encryption algorithms – BF-CBC, AES-128-CBC and DES-EDE3-
CBC. All of them are block ciphers through which encryption in-
creases the size of packets. Observation (3) helps us reduce the
scope for linking packets before and after VPN. As a result, for
each VPN-processed packet with timestamp t, we first check its
direction. If it is inbound, we search its counterpart with smaller
packet size in the time window (t, t + 0.02]. If it is outbound, the
time window becomes [t − 0.02, t). We measure the effectiveness
of our algorithm by counting the rate of successfully pairing and
the overall accuracy is 98.8%.
Figure 4: Proportion of collected packets.
interact with the UI of mobile apps and trigger different functions of
IoT devices. For devices like voice assistants directly controlled by
human’s input, we replay the commands near them. For example,
Google Home plays songs when it hears the command “sing a
song”. We record a list of different commands and play them in a
loop with a proper interval. As smart devices may have different
responses even facing the same command, though the total amount
of recorded commands is fixed, traffic we collect may vary.
Manual triggering. The Manual triggering is used in collecting
traffic from multi-device scenario. In this setting, devices are set up
in a shared room (laboratory), people coming in and out this room
can interact with the devices as they want. The functions triggered
in this scenario and their time intervals are irregular and comply
with what may happen in a real environment. Compared with the
automatic triggering approach, manual triggering introduces more
randomness to the dataset, which is helpful to the generalization
of our models.
We adopt the popular network analysis tool tshark to monitor
wlan0 and eth0 simultaneously. The traffic collected is dumped
into files with extension “.pcapng” and is then pre-processed before
classification.
The collection lasts for 49.4 hours. In a total, we collected 4.05 GB
traffic with 7,223,282 available packets (those cannot be obtained by
our adversary model are excluded, like packets only being transmit-
ted inside the LAN). The distribution of packets is shown in Fig 4.
Note that, due to the internal functionalities of devices vary and
users’ different habits, the collected traffic does not comply with a
uniform distribution.
3.3 Traffic Pre-processing
We utilize a multi-platform packet parsing framework called PcapPlus
Plus to pre-process the traffic. The goal is to extract low-level but
useful features from the packet and compose a numerical vector
that can be processed by our models.
Feature selection. Due to the encryption enforced by the commu-
nication, we extract features from the metadata of packet headers.
We select features from different layers – frame length and epoch
time from physical layer, and destination port number from
transport layer. In addition, we use a binary sequence to repre-
sent the protocols in packet transmission. We select 6 most common
3.4 Models
In this section, we first describe the baseline model we use for
comparison and then describe our customized LSTM-RNN model.
3.4.1 Baseline Model. We consider random forest as our baseline
model as it has been widely-used in previous works on device
fingerprinting [9, 37, 42]. A typical random forest is comprised
of multiple single decision trees. During the training phase, inner
decision trees are trained with different parts of the dataset and a
final result is given based on the voting of those separate trees. In
our work, we train a random forest model with the labeled packet
Your Smart Home Can’t Keep a Secret:
Towards Automated Fingerprinting of IoT Traffic with Neural Networks
Conference’17, July 2017, Washington, DC, USA
Figure 5: An example of traffic window.
Embedding
Dropout
dimension
LSTM hidden
dimension
LSTM
layer
Learning
30
rate
0.001
64
Activation
function
ReLU
1
Optimizer
Adam
rate
0.5
Training
epochs
15
Table 3: Parameters of a LSTM-RNN model.
vectors and the model predicts the device associated with each
packet of testing dataset.
Among all the 5 features, dport needs to be processed before
being used by the baseline model, since it is a discrete value with
wide range (0∼65536) that cannot be directly learned by a machine-
learning model. We first encode dport value into a one-hot binary
string. Since most of the ports are rarely used, we use principal
component analysis (PCA) to select 50 principal components from
the string. The total variance of them is around 98.9% according
to our statistics, which means the 50 components keep most of
information involved in ports.
For the hyper-parameters of Random Forest, we set the number
of individual trees to 100 to balance training speed and performance.
3.4.2 LSTM-RNN Model. In Section 2.5, we overview the LSTM-
RNN and describe its advantage when being used to solve our
problem. Below we describe the construction of our LSTM-based
models, including a basic version and a bidirectional version.
Traffic window. After pre-processing, each packet is transformed
into a feature vector. We then group n consecutive vectors to form
a traffic window. Figure 5 shows an example of a traffic window.
With traffic windows, we are able to model the temporal relations of
adjacent packets. We show the impact of window size on evaluation
result in Section 4.2.2.
Basic LSTM. A basic version contains multiple blocks and each
block contains 4 layers:
-Embedding layer. Embedding has been widely-used in the do-
main of Natural Language Processing(NLP) [31, 41] which trans-
forms discrete values into continuous vectors. In our LSTM models,
we transform dport information into embeddings instead of the
one-hot encoding like baseline model, mainly because this embed-
ding layer can be seamless connetcted to other layers. In addition,
it is a dynamic “mini” neural network gradually updating during
the training phase. Therefore, our training data can optimize this
representation.
Figure 6: Structure of the bidirectional LSTM used in our
work.
-LSTM layer. After the processing of embedding layer, the input
will be fed into the LSTM layer. At each step, a packet is assigned to
a LSTM cell. The output of LSTM cells can be stacked into a matrix
as input of the next layer.
-Fully-connected layer. We put a hidden fully-connected layer
between LSTM layer and softmax layer with the size equal to the
number of total categories.