that has the same properties, many security proofs are based on this random oracle model.
Since one instantiation of a hash function like keccak is used by multiple protocols
and multiple users concurrently, random oracles are often modeled as global functionalities.
There are already several variants of global random oracles presented in the literature. The
most intuitive denition presented by Canetti et al. [13] is the so-called strict global random
oracle. It simply oers an interface to query values and nothing more. While this is a natural
model for cryptographic hash functions, this model is not appropriate to prove security of
some cryptographic building blocks. Canetti and Fischlin showed that a protocol that realizes
UC commitments needs a setup that gives the simulator an advantage over the environment
[12]. An overview over dierent variants of global random oracles and more details are given
in [8].
We use a global random oracle with restricted programming and observability denoted
by H to model hash functions. We state the denition in the following and refer the reader
to [8] for a detailed description.
Using a global random oracle with restricted programming and observability, the simu-
lator Sim has control over the random oracle by programming hashes to specic responses
and the ability to observe all queries made by the environment Z. This results in an advan-
tage over Z such that the restricted programmable and observable global random oracle is
a practical tool for simulation within a GUC proof.
Global Random Oracle H
The functionality H is the global random oracle with restricted programming and
observability. Internally, it stores a set Q of all legitimate queries, a set P of all
programmed inputs, and sets Qid for all sessions id of all illegitimate queries. All sets
are initially set to âˆ…. The functionality accepts queries of the following types:
Query
Upon receiving message (query, id, q) from a party of session id(cid:48), proceed as follows:
 If (id, q, r) âˆˆ Q, respond with (query, q, r).
 If (id, q, r) (cid:54)âˆˆ Q, sample r âˆˆ {0, 1}Âµ, store (id, q, r) in Q, and respond with
(query, q, r).
27
 If the query is made from a wrong session (id (cid:54)= id(cid:48)), store (q, r) in Qid.
Program
Upon receiving message (program, id, q, r) by the adversary A, check if (id, q, r(cid:48)) is
dened in Q. If this is the case, abort. Otherwise, if r âˆˆ {0, 1}Âµ, store (id, q, r) in Q
and (id, q) in P .
Upon receiving message (isProgrammed, q) from a party of session id, check if
(id, q) âˆˆ P . If this is the case, respond with (isProgrammed, 1), else respond with
(isProgrammed, 0).
Observe
Upon receiving message (observe) from the adversary of session id, respond with
(observe, Qid).
Ledger Functionality. Within our interactive fair exchange protocol, two parties transfer
money to a smart contract which locks the coins until the end of the protocol execution. In
order to model the basic functionality of transferring and locking coins, a ledger function-
ality is needed. Since the ledger can be used by multiple protocols in parallel and can be
accessed over multiple protocol executions, it should be modeled as a global functionality
[13, 8]. Our ledger functionality L is a slightly modied version of the global ledger function-
ality introduced in [15] and used by [14]. The dierences are emphasized in the following
description.
Global Ledger Functionality L
Functionality L, running with a set of parties P1, . . . ,Pn stores the balance pi âˆˆ N
for every party Pi, i âˆˆ [n] and a partial function L for frozen cash. It accepts queries
of the following types:
Update
Upon receiving message (update,Pi, p) with p â‰¥ 0 from Z, set pi = p and send
(updated,Pi, p) to every entity.
Freeze
Upon receiving message (f reeze, id,Pi, p) from an ideal functionality of session id,
check if pi > p. If this is not the case, reply with (nof unds,Pi, p). Otherwise, set
pi = pi âˆ’ p and check if (id, p(cid:48)) âˆˆ L. If this check holds, update (id, p(cid:48)) to (id, p(cid:48) + p).
Otherwise, store (id, p) in L. Finally, send (f rozen, id,Pi, p) to every entity.
Unfreeze
28
Upon receiving message (unf reeze, id,Pj) from an ideal functionality of session id,
check if (id, p) âˆˆ L. If this check holds and no message (block, id) from corrupted
party Pâˆ—
is received in the same round or beforehand, delete (id, p) from L, set
pj = pj + p, and send (unf rozen, id,Pj, p) to every entity.
j
in [14]. We modied the unfreeze-operation regarding two aspects.
The internal state and as well as the update- and freeze-methods are the same as described
First, it sends all coins locked within the smart contract to party Pj. This means the
message contains no parameter to unfreeze only part of the frozen coins. Since our construc-
tion makes no use of unfreezing only parts of the frozen coins, the model is simplied by
this adaption.
Second, corrupted parties have the ability to refuse an unfreezing in their favor by sending
a block -message in the same round or already before. The ledger functionality allows the
refusing of an unfreezing to model an abort of a corrupted party.
The more intuitive way would be to require an honest party to actively start an unfreez-
ing. However, this would lead to a lot of overhead in the protocol description of the honest
case. Therefore, the explained approach is taken to simplify the model and the protocol
description. In case no block -message was received from the corrupted party Pâˆ—
j , the un-
freeze-operation deletes the entry (id, p) from L and increases the balance pj of party Pj by
p.
To signal that an ideal functionality F has access to the global ledger functionality, it is
denoted by FL.
C Formal Protocol Description
In this section, we provide some explanation about the formal denition of the judge smart
contract and the two protocol parties, which is given in Section 3.4.
In comparison to the judge functionality used by FairSwap, GL,H
additionally contains
functions for handling the challenge-response procedure as well as timeouts. Moreover, it
supports a fourth way to nalize the protocol.
During the challenge-response procedure, the judge smart contract acts as storage for
the most recent challenge query as well as the most recent response. Each time Buyer B
sends a challenge and each time Seller S answers a response, GL,H
locks a security fee from
the Seller of the message.
jc
jc
We like to stress that GL,H
Upon receiving a challenge- or respond -message, the judge starts a timeout. As soon
as a timeout is passed, the party that is no longer engaging in the protocol is considered
malicious. Therefore, the party that sent the last message may nalize the exchange and
claim all the locked money.
does not validate each response received from S. Instead,
B is responsible for validating them and only in case he received an invalidate response,
he may complain about it. When receiving such a complain, GL,H
validates the most re-
cent response and resolves the dispute this way. Since the most recent challenge query and
response are stored within the contract, the judge is easily feasible to validate them. By
shifting the responsibility for validation to Buyer B, the judge must perform at most one
response validation.
jc
jc
D Algorithms
In this section, we present algorithms used by our OptiSwap protocol. The usage of al-
gorithms make our construction more modular and ease the description of it. A formal
description of OptiSwap is given in Appendix C.
29
D.1
Initialization
We start with the algorithm used by the Seller at the start of the protocol execution. Before
sending the selling oer to the Buyer and initializing the judge smart contract, he executes
the Presetup-algorithm. On input the circuit Ï†, the witness x, and the encryption key k, the
algorithm outputs the encrypted witness z along with some auxiliary data. This includes
commitments rz to z, rÏ† to circuit Ï†, and re to the intermediary values of the evaluation
Ï†(x). See Algorithm 1 for a formal denition.
Algorithm 1 Presetup(Ï†, x, k)
Require: Verication circuit Ï†, witness x âˆˆ ({0, 1}Î»)n, and encryption key k
Ensure: (z, rz, re, rÏ†), where z is the encrypted witness, rz, re, and rÏ† are commitments based on
Merkle trees
1: for i = 1 to n do
zi = Enc(k, xi)
2:
ei = zi
3:
4: end for
5: rz = MTHash(z)
6: for i = n + 1 to m do
7:
8:
9:
10: end for
11: re = MTHash(e)
12: rÏ† = MTHash(Ï†)
13: return (z, rz, re, rÏ†)
parse Ï†i = (i, opi, Ii)
outi = opi(outIi[1], . . . , outIi[l])
ei = Enc(k, outi)
D.2 Challenge-Response Procedure
The challenge-response procedure is part of the dispute resolution protocol. The Seller and
Buyer alternately create challenge queries and responses, respectively. To this end, the parties
execute the NextChallenge- and the GenerateResponse-algorithm.
Algorithm 2 denes the NextChallenge-algorithm which is called by the Buyer. It demands
a circuit Ï†, the set of all received responses so far R, and some helper data H as input. The
helper data contains a circuit gate in focus Ï†i, the shared encryption key k, and the tuple
of all circuit gate output values computed by Buyer himself o(cid:48) = (o(cid:48)
m). The algorithm
creates a new challenge query Q and update the helper data. It returns the tuple (Q, H(cid:48)),
where H(cid:48) denotes the updated helper data.
1, . . . o(cid:48)
Upon receiving a challenge query, the Seller is responsible for answering it. Therefore, he
calls the GenerateResponse-algorithm which outputs a response Rq. Seller provides circuit Ï†,
witness x, encryption key k, and the most recent challenge query Q as input.
30
being the updated helper data.
return ({m}, (Ï†m, k, o
(cid:48)))
Algorithm 2 NextChallenge(Ï†, R, H)
Require: Circuit Ï†, set of responses R, and helper data H = (Ï†i, k, o
(cid:48) = (o(cid:48)
put in focus, k is a shared symmetric encryption key, and o
of all circuit gate output values computed by the challenger himself.
(cid:48)), where Ï†i is the circuit gate
1, . . . , o(cid:48)
m) denotes the tuple
Ensure: (Q, H(cid:48)), where Q is a challenge query denoting the circuit gates to be challenged and H(cid:48)
1: if R = âˆ… then
2:
3: else
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end if
parse Ï†i = (i, opi, Ii)
set Ri = {j âˆˆ Ii : (j, ej,Â·) âˆˆ R}
if Ri (cid:54)= Ii then
(cid:48)))
end for
choose j âˆˆ Ii : oj (cid:54)= o(cid:48)
j
parse Ï†j = (j, opj, Ij)
(cid:48)))
return (Ij, (Ï†j, k, o
return (Ii \ Ri, (Ï†i, k, o
for j âˆˆ Ri do
else
oj = Dec(k, ej)
end if
Algorithm 3 GenerateResponse(Ï†, x, k, q)
Require: (Ï†, x, k, Q), where Ï† is the verication circuit, x is the witness, k is the encryption key
used within the Presetup-algorithm, and Q is the challenge query containing the indices of all
challenged gates
Ensure: Rq, where Rq is a set of all encrypted output values along with their Merkle proofs
challenged by the given query
outi = xi
ei = Enc(k, xi)
1: for i = 1 to n do
2:
3:
4: end for
5: for i = n + 1 to m do
6:
7:
8:
9: end for
parse Ï†i = (i, opi, Ii)
outi = opi(outIi[1], . . . , outIi[l])
ei = Enc(k, outi)
10: e = (e1, . . . , em)
11: Me = MTHash(e)
12: Rq = âˆ…
13: for i âˆˆ Q do
14:
15: end for
16: return r
Rq = Rq âˆª {(i, ei, MTProof(Me, i))}
A third algorithm exists for the challenge-response procedure. This one is called the
ValidateResponse-algorithm. In order to decrease the computational burden on the judge
smart contract, the validation of a response is not done for each one by the contract. Instead,
the Buyer is responsible for validating a received response. This includes checking if for each
challenge circuit gate a corresponding output value is provided and if all Merkle proofs
31
verify. As soon as one of these criteria does not hold, the response is invalid. To perform
these checks, Buyer executes the ValidateResponse-algorithm given by Algorithm 4. The
same algorithm is used by the judge smart contract to check the validity of the most recent
response after Buyer complained about it. The algorithm requires as in put a challenge query
Q, the corresponding response R, and the Merkle Tree root re for the intermediate values
of the evaluation Ï†(x).
Algorithm 4 ValidateResponse(Q, R, re)
Require: (Q, R, re), where Q is a challenge query, R is the corresponding response, and re is the
Merkle root for the encrypted intermediate computation values
if (cid:54) âˆƒ(i, ei, Ï€i) âˆˆ R then
Ensure: valid, where valid = true if the response is valid or false otherwise
1: for i âˆˆ Q do
2:
3:
4:
5:
6:
7: end for
8: return true
else if MTVerify(Ï€i, i, re) = 0 then
return false
return false
end if
D.3 Dispute Resolution
After the challenge-response procedure, the dispute has to be resolved eventually. Assum-
ing a cheating Seller, Buyer needs to create proof of misbehavior (PoM). This concise
proof technique was introduced in [14] and outlined in Section 2.1. Algorithm 5 states the
GenerateProof-algorithm executed by Buyer.
Finally, the judge smart contract needs to adjudicate on the correctness of the fair ex-
change. To this end, he executes the Judge-algorithm. It checks all Merkle proofs contained in
the PoM and recomputes the specied circuit gate. In case the computed value diers to the
value provided in the PoM, the proof is considered valid, otherwise it is invalid. Algorithm
6 gives a formal denition of the Judge-algorithm including all required inputs.
E Security Proof
icfe within the (GL,H