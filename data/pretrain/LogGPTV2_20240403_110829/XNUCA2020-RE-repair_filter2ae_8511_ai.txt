    solver = Solver()
    input_str = [0 for _ in range(40)]
    for i in range(40):
        input_str[i] = BitVec("input_%d" % i, 8)
        solver.add(input_str[i] = 0)
    stack = [0, 0, 0]
    ptr = 0
    while True:
        while True:
            while True:
                while True:
                    while True:
                        while True:
                            while True:
                                while True:
                                    while op_code[ptr] == 0:
                                        stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ input_str[
                                            (16975111 * (op_code[ptr + 2] + 127)) ^ stack[op_code[ptr + 2]]]
                                        ptr += 3
                                    if op_code[ptr] != 1:
                                        break
                                    stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ (
                                            (stack[op_code[ptr + 3]] ^ (16975111 * (op_code[ptr + 3] + 127)))
                                            + ((16975111 * (op_code[ptr + 2] + 127)) ^ stack[op_code[ptr + 2]]))
                                    ptr += 4
                                if op_code[ptr] != 2:
                                    break
                                stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ (
                                        (stack[op_code[ptr + 3]] ^ (16975111 * (op_code[ptr + 3] + 127)))
                                        - ((16975111 * (op_code[ptr + 2] + 127)) ^ stack[op_code[ptr + 2]]))
                                ptr += 4
                            if op_code[ptr] != 3:
                                break
                            stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ (
                                    (stack[op_code[ptr + 3]] ^ (16975111 * (op_code[ptr + 3] + 127)))
                                    * ((16975111 * (op_code[ptr + 2] + 127)) ^ stack[op_code[ptr + 2]]))
                            ptr += 4
                        if op_code[ptr] != 4:
                            break
                        stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ stack[op_code[ptr + 3]] ^ (
                                0x1030507 * (op_code[ptr + 3] + 127)) ^ (16975111 * (op_code[ptr + 2] + 127)) ^ stack[
                                                     op_code[ptr + 2]]
                        ptr += 4
                    if op_code[ptr] != 5:
                        break
                    stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ (
                            stack[op_code[ptr + 3]] ^ (0x1030507 * (op_code[ptr + 3] + 127))) & (
                                                      (0x1030507 * (op_code[ptr + 2] + 127)) ^ stack[op_code[ptr + 2]])
                    ptr += 4
                if op_code[ptr] != 6:
                    break
                stack[op_code[ptr + 1]] = (16975111 * (op_code[ptr + 1] + 127)) ^ u32(op_code[ptr + 2: ptr + 6])
                ptr += 6
            if op_code[ptr] != 7:
                break
            solver.add(stack[op_code[ptr + 1]] == 16975111 * (op_code[ptr + 1] + 127)) 
            ptr += 2
        if op_code[ptr] == 8:
            break
    print(solver.check())
    m = solver.model()
    output_str = 'flag{'
    for i in range(40):
        output_str += chr(m.eval(input_str[i]).as_long())
    print(output_str)
直接成功
    flag{repairing_control_flow_is_interesting}