                binary_stream,
                loader=None,
                is_main_bin=False,
                entry_point=None,
                arch=None,
                base_addr=None,
                force_rebase=False,
                has_memory=True,
                **kwargs):
            """
            :param binary:          The path to the binary to load
            :param binary_stream:   The open stream to this binary. The reference to this will be held until you call close.
            :param is_main_bin:     Whether this binary should be loaded as the main executable
            """
  * binary：即我们指定文件路径
  * binary_stream：我们也可以使用二进制流的形式输入
  * loader：是否已经加载
  * is_main_bin：是不是作为主文件进行加载
  * entry_point：可以指定加载的进入点
  * arch：可以指定加载的架构
  * base_addr：可以指定文件加载的基地址
  * force_rebase：是否需要重新定义基底
  * has_memory：此后端是否由Clemory支持
  * kwargs：其它参数
每个实现的后端都需要通过函数 `register_backend` 进行注册。
    ALL_BACKENDS = dict()
    def register_backend(name, cls):
        if not hasattr(cls, 'is_compatible'):
            raise TypeError("Backend needs an is_compatible() method")
        ALL_BACKENDS.update({name: cls})
## 二、一切的中间层-VEX
​ VEX-IR是一套中间语言。使用它的是 Valgrind
插桩框架工具，它的设计思想类似LLVM与QEMU，为了模拟执行已经编译好的某种架构的程序，把目标代码转化为IR中间语言，再把 IR
翻译为本机架构可执行的机器语言，实现跨架构模拟执行，多用于没有源码的二进制程序分析。分析二进制程序，例如做类似插桩的工作时，失去了高级语言的抽象表达，不得不与更底层的部分打交道，即
CPU、寄存器、虚拟内存等
​ LLVM与QEMU其实本身并不是以安全分析为出发点的平台，只是因为他们过于完善和强大，所以有很多基于他们的改进工作来做程序安全分析。而 Valgrind
则是以安全为出发点开发的插桩框架，也相对成熟流行
​ 私以为看过学习过LLVM框架中的IR语言语法，再看VEX的IR语言语法，其实可以触类旁通，这里塞一个私货关于学习LLVM
IR的入门指南建议阅读GitHub用户EvianZhang的《LLVM IR入门指南》清晰易懂，可以先看看这个再看看VEX IR。学习VEX
IR可以查看VEX的官方文档，中文资料也可以参考知乎用户王志的《angr中的中间语言表示VEX》
> ​ 一个经常的问题就是为什么有时候Angr解析出来的IR或者说Block与IDA
> Pro中看到的不一样，就是因为两者使用的中间语言不一样，Angr采用的是VEX IR而IDA Pro采用的是IDA microcode。IDA Pro
> 为代表的一些反编译软件，也是利用中间语言这一思想实现的。使用中间语言来做反编译的好处也很明显，可以摆脱复杂的设计不同处理器的指令，使得反编译可移植、适配性更广
>
> ​ IDA 自身的 IR 为 microcode，在 IDA 7.1 的时候开源。开源之前 IDA 一直在对这套 IR
> 做完善和优化，开源之后提供了相应的 API，更方便使用者利用 microcode 来开发插件做反编译的分析工作，例如应对花指令、混淆之类的情况
###  2.1 VEX简介
​ angr为了支持对多种CPU架构的二进制程序进行分析，angr采用了指令的中间表示（Intermediate
Representation）方法来描述CPU指令的操作过程。angr采用的是Valgrind的VEX中间表示方法。主要是因为VEX能将没有源码的二进制文件处理抽象成VEX的IR中间语言表示
​ 在angr项目中，PyVEX负责将二进制代码翻译成VEX中间表示。IRSB （Intermediate Representation Super-Block）是VEX中的基本块，表示一个入口和一个或多个出口的VEX语句序列（single-entry, multiple-exit code block）
​ 当处理不同的体系结构时，VEX IR会抽象出一些体系结构差异，并通过统一为标准的VEX IR语言消除这些差异，从而允许对所有结构的程序进行统一的分析：
  * 寄存器名称：寄存器的数量和名称在体系结构之间是不同的，但是现代CPU设计遵循一个共同的主题：每个CPU包含几个通用寄存器，用于保存堆栈指针的寄存器，用于存储条件标志的一组寄存器等等。IR为不同平台上的寄存器提供了一致的抽象接口，具体来说，VEX将寄存器建模为具有整数偏移量的单独存储空间。简单来说就是没有单独建立一个“寄存器”数据类型，而是将寄存器也视作一种内存，将CPU指令对寄存器的访问描述成对内存的访问，实现对寄存器操作的中间表示。VEX在内存中为寄存器分配了存储空间，为每个寄存器分配了一个索引地址
  * 内存访问：不同的体系结构以不同的方式访问内存。例如，ARM可以在小端或者大端模式下访问内存。VEX IR也同时支持对于小端序和大端序，消除了这些差异
  * 内存分段：某些体系结构（例如x86）通过使用特殊的段寄存器来支持内存分段以提供更高级的功能，VEX IR也同时支持这些功能
  * 具有副作用的指令：大多数指令都有副作用，也就是一连串的操作。例如，ARM上处于Thumb模式的大多数操作都会更新条件标志，而堆栈推入/弹出指令将更新堆栈指针。在分析中以临时方式跟踪这些副作用会很疯狂
​ VEX IR中间语言将机器代码抽象为一种统一的表示形式，旨在简化程序分析，这种表示形式的描述类型有以下5种：
  * 表达式（Expression）：表示 **数值** ，例如变量或常量的数值
  * 操作（Operation）：表示数值的 **计算** ，实现对数值的修改
  * 临时变量（Temporary Variables）：表示数值的 **存储** 位置
  * 语句（Statements）：表示数值对计算机 **状态的修改** ，例如对内存、寄存器的修改
  * 基本块（Block）：语句的 **集合** ，表示一列没有分支的语句序列
​
这5中描述类型中，首先是最基本的数值，使用表达式（Expression）来描述；其次，是数值间的计算、数值的存储，分别用操作（Operation）和临时变量（Temporary
Variable）来描述；然后，是数值对计算机状态的修改，使用语句（statement）来描述；最后，是语句的集合，表示一个包括多条语句的连续行为，使用基本块（Block）来描述
​ 我们主要介绍一些可能会经常与之交互的VEX的某些部分和它的VEX IR表达式
IR Expression | Evaluated Value | VEX Output Example  
---|---|---  
Constant | A constant value. | 0x4:I32  
Read Temp | The value stored in a VEX temporary variable. | RdTmp(t10)  
Get Register | The value stored in a register. | GET:I32(16)  
Load Memory | The value stored at a memory address, with the address specified
by another IR Expression. | LDle:I32 / LDbe:I64  
Operation | A result of a specified IR Operation, applied to specified IR
Expression arguments. | Add32  
If-Then-Else | If a given IR Expression evaluates to 0, return one IR
Expression. Otherwise, return another. | ITE  
Helper Function | VEX uses C helper functions for certain operations, such as
computing the conditional flags registers of certain architectures. These
functions return IR Expressions. | function_name()  
​ 以上是比较常用的最基础的VEX的IR表达式，接下来还有一些比较常用的部分是需要上面基本的部分组合的
IR Statement | Meaning | VEX Output Example  
---|---|---  
Write Temp | Set a VEX temporary variable to the value of the given IR
Expression. | WrTmp(t1) = (IR Expression)  
Put Register | Update a register with the value of the given IR Expression. |
PUT(16) = (IR Expression)  
Store Memory | Update a location in memory, given as an IR Expression, with a
value, also given as an IR Expression. | STle(0x1000) = (IR Expression)  
Exit | A conditional exit from a basic block, with the jump target specified
by an IR Expression. The condition is specified by an IR Expression. | if
(condition) goto (Boring) 0x4000A00:I32  
​ 总结来说CPU指令对计算机状态的修改，常见的是内存访问、寄存器访问，VEX都有对应的语句表示，我们可以再分别来看看
####  2.1.1 数值（Expression）
​ 在VEX
IR中最基础的数据类型就是数值，例如`0x4:I32`，就表示的是一个32位整数类型（I32）的0x4数值。这个就很类似LLVM的IR表示，这个在LLMV的写法应该就是`i32
0x4`
####  2.1.2 内存（memory）
​ 在VEX中内存的访问包括两种语句：读（Load）和写（Store）：
  * 读内存（Load Memory），例如`LDle:I32`和`LDbe:I64`，LD是读内存（Load Memory）的缩写，表示读内存操作；le和be表示两种字节序列，le是little endianess的缩写，表示是小端序，be是big endianess的缩写，表示是大端序；I32和I64表示的是读取的数据类型，分别表示32位整数和64位整数
  * 写内存（Store Memory），例如`STle(0x1000) = (IR Expression)`，ST是写内存（Store Memory）的缩写，le是字节序，0x1000是内存的地址，IR Expression是要写入的数值
​ 在LLVM IR中对于大小端序是在`target datalayout`字段中注明了目标汇编代码的数据分布，例如：
    target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
​ 其中的e就代表了这次编译的平台采用小端序，在LLVM IR中对于内存的读写例子：
    %1 = load i32, i32* @global_variable
    store i32 1, i32* @global_variable
####  2.1.3 寄存器（Register）
​
VEX并没有为CPU寄存器创建一个新的存储类型，而是将CPU指令对寄存器的访问描述成对内存的访问，实现对寄存器操作的中间表示。VEX在内存中为寄存器分配了存储空间，为每个寄存器分配了一个索引地址
​ 寄存器的访问包括两种语句：读（Get）和写（Put）：
  * 读寄存器（Get Register），例如`GET:I32(16)`，GET是读寄存器（Get Register）的缩写，I32是数值的类型，16是一个寄存器在内存中的索引
  * 写寄存器（Put Register），例如`PUT(16) = (IR Expression)`，PUT是写寄存器（Put Register）的缩写，16是一个寄存器在内存中的索引，IR Expression是要写入寄存器中的数值
​ 在LLVM中对于寄存器的处理是引入了虚拟寄存器的概念，对于寄存器而言，我们只需要像普通的赋值语句一样操作，但需要注意名字必须以`%`开头：
    %local_variable = add i32 1, 2
​ 因为不同架构的寄存器数量不一样，且数量都是有限的，如果所有通用寄存器都用光了，LLVM
IR会帮我们把剩余的值放在栈上，但是对我们用户而言，实际上都是虚拟寄存器，LLVM对于保留的寄存器的操作也是放入栈中。简单来说就是LLVM
IR不是把寄存器的数据都放在内存中，单独抽象了一种数据类型叫虚拟寄存器，而VEX IR并没有创建一个新的存储类型，而是将寄存器都放在了内存中
####  2.1.4 临时变量（Temporary Variable）
​ 一条CPU指令通常会被多条中间表示的语句进行描述，中间会用到一些临时变量来存储中间值
​ 临时变量包括两种操作：读（Read）和写（Write）：
  * 读临时变量（Read Temp），例如RdTmp(t10)，RdTmp是读临时变量（Read Temp）的缩写，t10是一个临时变量的名称
  * 写临时变量（Write Temp），例如WrTmp(t1) = (IR Expression)，WrTmp是写临时变量（Write Temp）的缩写，t1是临时变量的名称，IR Expression是要写入临时变量t1的数值
###  2.2 VEX实例
​ 上面介绍了很多关于VEX IR的基础语法，没有实际的操作验证也还是有些晦涩难懂的，我们通过实际操作来看看现实中的VEX IR是如何工作的
​ 首先就同上一篇文章讲到的需要获取一个基本块（block），基本块对应一个相对的IRSB中间表示基本块信息，也就是我们想要看一个代码的VEX
IR样子，得先获取一个基本块，然后再通过这个基本块去查看IRSB信息，从而获得转换后的VEX IR代码
> IRSB（Intermediate Representation Super Block）表示一个中间表示的基本块
​ 我们这次使用一个简单的例子：
    #include
    int main(){
        int a = 1;
        int b = 1;
        int c = a + b;
        return 0;
    }
    $ gcc 02.c -no-pie -g -o test2
​ 然后进行逐步调试，我们可以通过直接打印基本块的vex属性看到VEX
IR信息，bb.capstone是一个CapstoneBlock对象，bb.vex是一个IRSB对象
    >>> import angr
    >>> import monkeyhex
    >>> proj = angr.Project('./test2', auto_load_libs=False)
    >>> block = proj.factory.block(proj.entry)
    >>> type(block.capstone)
    >>> type(block.vex)
    >>> block.pp()
    0x401020:       endbr64
    0x401024:       xor     ebp, ebp
    0x401026:       mov     r9, rdx
    0x401029:       pop     rsi
    0x40102a:       mov     rdx, rsp
    0x40102d:       and     rsp, 0xfffffffffffffff0
    0x401031:       push    rax
    0x401032:       push    rsp
    0x401033:       mov     r8, 0x4011a0
    0x40103a:       mov     rcx, 0x401130
    0x401041:       mov     rdi, 0x401106
    0x401048:       call    qword ptr [rip + 0x2fa2]
    >>> print(block.vex)
    IRSB {
       t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I32 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I32 t18:Ity_I64 t19:Ity_I32 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64
       00 | ------ IMark(0x401020, 4, 0) ------       01 | ------ IMark(0x401024, 2, 0) ------       02 | PUT(rbp) = 0x0000000000000000
       03 | ------ IMark(0x401026, 3, 0) ------       04 | t23 = GET:I64(rdx)
       05 | PUT(r9) = t23
       06 | PUT(rip) = 0x0000000000401029
       07 | ------ IMark(0x401029, 1, 0) ------       08 | t4 = GET:I64(rsp)
       09 | t3 = LDle:I64(t4)
       10 | t24 = Add64(t4,0x0000000000000008)
       11 | PUT(rsi) = t3
       12 | ------ IMark(0x40102a, 3, 0) ------       13 | PUT(rdx) = t24
       14 | ------ IMark(0x40102d, 4, 0) ------       15 | t5 = And64(t24,0xfffffffffffffff0)
       16 | PUT(cc_op) = 0x0000000000000014
       17 | PUT(cc_dep1) = t5
       18 | PUT(cc_dep2) = 0x0000000000000000
       19 | PUT(rip) = 0x0000000000401031
       20 | ------ IMark(0x401031, 1, 0) ------       21 | t8 = GET:I64(rax)
       22 | t26 = Sub64(t5,0x0000000000000008)
       23 | PUT(rsp) = t26
       24 | STle(t26) = t8
       25 | PUT(rip) = 0x0000000000401032
       26 | ------ IMark(0x401032, 1, 0) ------       27 | t28 = Sub64(t26,0x0000000000000008)
       28 | PUT(rsp) = t28
       29 | STle(t28) = t26
       30 | ------ IMark(0x401033, 7, 0) ------       31 | PUT(r8) = 0x00000000004011a0
       32 | ------ IMark(0x40103a, 7, 0) ------       33 | PUT(rcx) = 0x0000000000401130
       34 | ------ IMark(0x401041, 7, 0) ------       35 | PUT(rdi) = 0x0000000000401106
       36 | PUT(rip) = 0x0000000000401048
       37 | ------ IMark(0x401048, 6, 0) ------       38 | t14 = LDle:I64(0x0000000000403ff0)
       39 | t30 = Sub64(t28,0x0000000000000008)
       40 | PUT(rsp) = t30
       41 | STle(t30) = 0x000000000040104e
       42 | t32 = Sub64(t30,0x0000000000000080)
       43 | ====== AbiHint(0xt32, 128, t14) ======