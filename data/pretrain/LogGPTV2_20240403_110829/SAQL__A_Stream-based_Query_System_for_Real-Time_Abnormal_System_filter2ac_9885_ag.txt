[57] HASSAN, W. U., LEMAY, M., AGUSE, N., BATES, A., AND
MOYER, T. Towards scalable cluster auditing through grammat-
ical inference over provenance graphs. In NDSS (2018).
[58] HOFMEYR, S. A., FORREST, S., AND SOMAYAJI, A. Intrusion
detection using sequences of system calls. J. Comput. Secur. 6, 3
(1998), 151–180.
[59] HOSSBACH, B., AND SEEGER, B. Anomaly management us-
ing complex event processing: Extending data base technology
paper. In EDBT (2013).
[60] JIANG, X., WALTERS, A., XU, D., SPAFFORD, E. H., BUCH-
HOLZ, F., AND WANG, Y.-M. Provenance-aware tracing of
worm break-in and contaminations: A process coloring approach.
In ICDCS (2006).
[61] KILLIAN, C. E., ANDERSON, J. W., BRAUD, R., JHALA, R.,
AND VAHDAT, A. M. Mace: Language support for building dis-
tributed systems. In PLDI (2007).
[62] KIM, T., WANG, X., ZELDOVICH, N., AND KAASHOEK, M. F.
Intrusion recovery using selective re-execution. In OSDI (2010).
In
[63] KING, S. T., AND CHEN, P. M. Backtracking intrusions.
SOSP (2003).
[64] KING, S. T., MAO, Z. M., LUCCHETTI, D. G., AND CHEN,
P. M. Enriching intrusion alerts through multi-host causality. In
NDSS (2005).
[65] KOLBITSCH, C., COMPARETTI, P. M., KRUEGEL, C., KIRDA,
E., ZHOU, X., AND WANG, X. Effective and efﬁcient malware
detection at the end host. In USENIX Security (2009).
[66] KRUEGEL, C., VALEUR, F., AND VIGNA, G. Intrusion detec-
tion and correlation - challenges and solutions, vol. 14. Springer,
2005.
[67] LANZI, A., BALZAROTTI, D., KRUEGEL, C., CHRISTODOR-
ESCU, M., AND KIRDA, E. AccessMiner: Using system-centric
models for malware protection. In CCS (2010).
[68] LEE, K. H., ZHANG, X., AND XU, D. High accuracy at-
tack provenance via binary-based execution partition. In NDSS
(2013).
[69] LEE, K. H., ZHANG, X., AND XU, D. LogGC: Garbage collect-
ing audit log. In CCS (2013).
[70] LIU, C., WANG, X. S., NAYAK, K., HUANG, Y., AND SHI, E.
ObliVM: A programming framework for secure computation. In
IEEE S&P (2015).
[71] LIU, Y., ZHANG, M., LI, D., JEE, K., LI, Z., WU, Z., RHEE,
J., AND MITTAL, P. Towards a timely causality analysis for en-
terprise security. In NDSS (2018).
[72] LOO, B. T., CONDIE, T., GAROFALAKIS, M., GAY, D. E.,
HELLERSTEIN, J. M., MANIATIS, P., RAMAKRISHNAN, R.,
ROSCOE, T., AND STOICA, I. Declarative networking: Lan-
guage, execution and optimization. In SIGMOD (2006).
[73] MA, S., LEE, K. H., KIM, C. H., RHEE, J., ZHANG, X., AND
XU, D. Accurate, low cost and instrumentation-free security au-
dit logging for windows. In ACSAC (2015).
[74] MA, S., ZHAI, J., WANG, F., LEE, K. H., ZHANG, X., AND
XU, D. MPI: Multiple perspective attack investigation with se-
mantic aware execution partitioning. In USENIX Security (2017).
[75] MA, S., ZHANG, X., AND XU, D. ProTracer: Towards practical
provenance tracing by alternating between logging and tainting.
In NDSS (2016).
654    27th USENIX Security Symposium
USENIX Association
[76] MURRAY, D. G., MCSHERRY, F., ISAACS, R., ISARD, M.,
BARHAM, P., AND ABADI, M. Naiad: A timely dataﬂow system.
In SOSP (2013).
[77] NING, P., CUI, Y., AND REEVES, D. S. Constructing attack
scenarios through correlation of intrusion alerts. In CCS (2002).
[78] NYSTROM, M. SQL injection defenses, 1st ed. O’Reilly, 2007.
[79] PANIGATI, E., SCHREIBER, F. A., AND ZANIOLO, C. Data
streams and data stream management systems and languages. In
Data Management in Pervasive Systems. 2015, pp. 93–111.
[80] PORTNOY, L., ESKIN, E., AND STOLFO, S. Intrusion detection
with unlabeled data using clustering. In DMSA (2001).
[81] SENATOR, T. E., GOLDBERG, H. G., MEMORY, A., YOUNG,
W. T., REES, B., PIERCE, R., HUANG, D., REARDON,
M., BADER, D. A., CHOW, E., ESSA, I., JONES, J., BET-
TADAPURA, V., CHAU, D. H., GREEN, O., KAYA, O., ZA-
KRZEWSKA, A., BRISCOE, E., MAPPUS, R. I. L., MCCOLL,
R., WEISS, L., DIETTERICH, T. G., FERN, A., WONG, W.-K.,
DAS, S., EMMOTT, A., IRVINE, J., LEE, J.-Y., KOUTRA, D.,
FALOUTSOS, C., CORKILL, D., FRIEDLAND, L., GENTZEL,
A., AND JENSEN, D. Detecting insider threats in a real corpo-
rate database of computer usage activity. In KDD (2013).
[82] SOMMER, R., VALLENTIN, M., DE CARLI, L., AND PAXSON,
V. HILTI: An abstract execution environment for deep, stateful
network trafﬁc analysis. In IMC (2014).
[83] SUNG, A. H., XU, J., CHAVEZ, P., AND MUKKAMALA, S.
Static analyzer of vicious executables (SAVE). In ACSAC (2004).
[84] THIES, W., KARCZMAREK, M., AND AMARASINGHE, S. P.
StreamIt: A language for streaming applications. In CC (2002).
[85] VALEUR, F., VIGNA, G., KRUEGEL, C., AND KEMMERER,
R. A. A comprehensive approach to intrusion detection alert cor-
relation. TDSC 1, 3 (2004), 146–169.
[86] VALLENTIN, M., PAXSON, V., AND SOMMER, R. VAST: A uni-
ﬁed platform for interactive network forensics. In NSDI (2016).
[87] VEERAMACHANENI, K., ARNALDO,
I., KORRAPATI, V.,
BASSIAS, C., AND LI, K. AI2: Training a big data machine
to defend. In BigDataSecurity (2016).
[88] XU, Z., WU, Z., LI, Z., JEE, K., RHEE, J., XIAO, X., XU, F.,
WANG, H., AND JIANG, G. High ﬁdelity data reduction for big
data security dependency analyses. In CCS (2016).
[89] YEN, T.-F., AND REITER, M. K. Trafﬁc aggregation for mal-
ware detection. In DIMVA (2008).
[90] ZHANG, H., YAO, D. D., AND RAMAKRISHNAN, N. Detection
of stealthy malware activities with trafﬁc causality and scalable
triggering relation discovery. In ASIA CCS (2014).
[91] ZHANG, Y., CHEN, R., AND CHEN, H. Sub-millisecond stateful
stream querying over fast-evolving linked data. In SOSP (2017).
Appendix
A SAQL Queries in Attack Cases Study
We present the 17 SAQL queries that we construct in the
case study, which are used detect the four major types of
attack behaviors (Section 6.2.1). For privacy purposes,
we anonymize the IP addresses and the agent IDs in the
presented queries.
A.1 APT Attack
1 proc p1["%smtp%"] read||write ip i1[srcip="XXX" &&
srcport=25 && protocol=6] as evt1[agentid = XXX]
// mail server, SMTP connection from the router
to the mail server
2 proc p2["%imap%"] read||write ip i2[srcip="XXX" &&
srcport=143 && dstip="XXX" && dstport=51962 &&
protocol=6] as evt2[agentid = XXX] // mail server
, IMAP connection from the mail server to the
client
3 proc p3["%outlook%"] read||write ip i3[srcip="XXX" &&
srcport=51960 && dstip="XXX" && dstport=143 &&
protocol=6] as evt3[agentid = XXX] // windows
client, client’s outlook reads email data
4 with evt1 -> evt2 -> evt3
5 return p1, i1, p2, i2, p3, i3, evt1.starttime, evt2.
starttime, evt3.starttime
Query 7: apt-c1
1 agentid = XXX // windows client
2 proc p1["%outlook.exe"] start proc p2["%excel.exe"]
as evt1 // outlook starts excel
3 proc p2 start proc p3["%java.exe"] as evt2 // excel
starts malware (java) process
4 proc p3 start proc p4["%notepad.exe"] as evt3 //
malware (java) starts notepad
5 proc p4 read||write ip i1["XXX"] as evt4 // notepad
connects to the attacker host
6 with evt1 -> evt2 -> evt3 -> evt4
7 return p1, p2, p3, p4, i1, evt1.starttime, evt2.
starttime, evt3.starttime, evt4.starttime
Query 8: apt-c2
1 agentid = XXX // windows domain controller
2 proc p1 read || write ip i1[srcport=445 && dstip="XXX
"] as evt1 // attacker penetrates to the DC host
using psexec protocol
3 proc p2["%powershell.exe"] write file f1["%gsecdump%"
] as evt2 // attacker transfers the DB cracking
tool gsecdump.exe
4 proc p3["%cmd.exe"] start proc p4["%gsecdump%"] as
evt3 // attacker executes gsecdump.exe to dump DB
administrator credentials
5 with evt1 -> evt2 -> evt3
6 return p1, i1, p2, f1, p3, p4, evt1.starttime, evt2.
starttime, evt3.starttime
Query 9: apt-c3
1 agentid = XXX // db server
2 proc p1["%sqlservr.exe"] read||write ip i1[srcip="XXX
" && srcport=1433 && dstip="XXX" && dstport=52038
&& protocol=6] as evt1 // attacker connects to
the SQL server using DB administrator credentials
3 proc p1 start proc p2["%cmd.exe"] as evt2 // SQL
server starts cmd
4 proc p2 read || write file f1["%hwvun.vbs"] as evt3
// cmd writes malware sbblv.exe
5 proc p3["%cscript.exe"] write file f2["%sbblv.exe"]
as evt4
6 proc p4["%sbblv.exe"] start ip i2[srcip="XXX" &&
srcport=61060 && dstip="XXX" && dstport=443 &&
protocol=6] as evt5 // malware connects back to
the attacker host
7 with evt1 -> evt2 -> evt3 -> evt4 -> evt5
8 return p1, i1, p2, f1, p3, f2, p4, i2, evt1.starttime
, evt2.starttime, evt3.starttime, evt4.starttime,
evt5.starttime
Query 10: apt-c4
USENIX Association
27th USENIX Security Symposium    655
1 agentid = XXX // db server
2 proc p1["%cmd.exe"] start proc p2["%osql.exe"] as
evt1 // attacker executes osql.exe on the sql
server
3 proc p3["%sqlservr.exe"] write file f1["%backup1.dmp"
] as evt2 // attacker dumps the DB content
4 proc p4["%sbblv.exe"] read file f1 as evt3 // malware
reads the dump
5 proc p4 read || write ip i1[dstip="XXX"] as evt4 //
malware transfers the dump to the attacker
6 with evt1 -> evt2 -> evt3 -> evt4
7 return p1, p2, p3, f1, p4, i1, evt1.starttime, evt2.
starttime, evt3.starttime, evt4.starttime, evt4.
amount
A.3 Bash Shellshock Command Injection
Attack
set_proc := set(p2.exe_name)
1 proc p1["%apache2%"] start proc p2 as evt #time(10 s)
2 state ss {
3
4 } group by p1
5 invariant[10][offline] {
6
7
8 }
9 alert |ss.set_proc diff a| > 0
10 return p1, ss.set_proc
a := empty_set // invariant init
a = a union ss.set_proc //invariant update
Query 11: apt-c5
Query 16: shellshock
1 proc p1["%excel.exe"] start proc p2 as evt #time(5
second)
set_proc := set(p2.exe_name)
2 state ss {
3
4 } group by p1, evt.agentid
5 invariant[100][offline] {
6
7
8 }
9 alert |ss.set_proc diff a| > 0
10 return p1, evt.agentid, ss.set_proc
a := empty_set
a = a union ss.set_proc
Query 12: apt-c2-invariant
1 agentid = XXX // db server
2 proc p write ip i as evt #time(10 min)
3 state[3] ss {
4
5 } group by p
6 alert (ss[0].avg_amount > (ss[0].avg_amount + ss[1].
avg_amount := avg(evt.amount)
avg_amount + ss[2].avg_amount) / 3) && (ss[0].
avg_amount > 10000)
7 return p, ss[0].avg_amount, ss[1].avg_amount, ss[2].
avg_amount
Query 13: apt-c5-timeseries
1 agentid = XXX// db server
2 proc p write ip i as evt #time(1 min)
3 state ss {
4
5 } group by p
6 cluster(points=all(ss.avg_amount), distance="ed",
avg_amount := avg(evt.amount)
method="DBSCAN(1000, 5)")
7 alert cluster.outlier && ss.avg_amount > 1000000
8 return p, ss.avg_amount
Query 14: apt-c5-outlier
A.2 SQL Injection Attack
1 agentid = XXX // sqlserver host
2 proc p["%sqlservr.exe"] read || write ip i as evt #
time(10 min)
amt := sum(evt.amount)
3 state ss {
4
5 } group by i.dstip
6 cluster(points=all(ss.amt), distance="ed", method="
DBSCAN(100000, 5)")
7 alert cluster.outlier && ss.amt > 1000000
8 return i.dstip, ss.amt
A.4 Suspicious System Behaviors
1 proc p["%dropbox%"] start ip i as evt
2 return p, i, evt.agentid, evt.starttime, evt.endtime
Query 17: dropbox
1 proc p read || write file f["%.viminfo" || "%.
bash_history" || "%.zsh_history" || "%.lesshst"
|| "%.pgadmin_histoqueries" || "%.mysql_history"]
as evt
2 return p, f, evt.agentid, evt.starttime, evt.endtime
Query 18: command-history
1 proc p read || write file f["/etc/passwd"] as evt
2 return p, f, evt.agentid, evt.starttime, evt.endtime
Query 19: password
1 proc p write file f["/var/log/wtmp" || "/var/log/
lastlog"] as evt
2 return p, f, evt.agentid, evt.starttime, evt.endtime
Query 20: login-log
1 proc p read || write file f["%.ssh/id_rsa" || "%.ssh/
id_dsa"] as evt
2 return p, f, evt.agentid, evt.starttime, evt.endtime
Query 21: sshkey
1 proc p read || write file f[bustype = "USB"] as evt
2 return p, f, evt.agentid
Query 22: usb
1 proc p start ip ipp #time(1 min)
2 group by p
3 alert freq > 100
4 return p, count(ipp) as freq
Query 23: ipfreq
Query 15: sql-injection
656    27th USENIX Security Symposium
USENIX Association