# investigation_encoded_1
Forensics, 450 points
## Description:
> We have recovered a binary and 1 file: image01. See what you can make of it. 
> NOTE: The flag is not in the normal picoCTF{XXX} format.
## Solution: 
Let's check the files we got:
```console
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# file mystery
mystery: ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=29b4dba83a1a5a26d76e122ad48d63cff886b075, not stripped
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# file output
output: Non-ISO extended-ASCII text, with no line terminators
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# xxd -g 1 output
00000000: 8e 8e ba 3b b8 ea 23 a8 eb b8 bb 8a e3 a8 eb b8  ...;..#.........
00000010: eb a2 ee e2 a2 a8 ea 80                          ........
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# ./mystery
./flag.txt not found
```
We have a binary output file, and a program which requires `flag.txt`. Let's give it a fake flag and see what happens:
```console
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# mkdir tmp
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# cp ./mystery tmp
root@kali:/media/sf_CTFs/pico/investigation_encoded_1# cd tmp
root@kali:/media/sf_CTFs/pico/investigation_encoded_1/tmp# echo test>flag.txt
root@kali:/media/sf_CTFs/pico/investigation_encoded_1/tmp# ./mystery
Error, I don't know why I crashed
```
Neither do we. Let's take a look at the Ghidra decompiler output.
The main function is:
```c
undefined8 main(void)
{
  long lVar1;
  size_t sVar2;
  undefined4 local_18;
  int local_14;
  FILE *flag_file;
  flag_file = fopen("flag.txt","r");
  if (flag_file == (FILE *)0x0) {
    fwrite("./flag.txt not found\n",1,0x15,stderr);
                    // WARNING: Subroutine does not return
    exit(1);
  }
  flag_size = 0;
  fseek(flag_file,0,2);
  lVar1 = ftell(flag_file);
  flag_size = (int)lVar1;
  fseek(flag_file,0,0);
  if (0xfffe flag.txt
root@kali:/media/sf_CTFs/pico/investigation_encoded_1/tmp# ./mystery
I'm Done, check ./output
root@kali:/media/sf_CTFs/pico/investigation_encoded_1/tmp# xxd -g 1 output
00000000: e2 2a 38                                         .*8
```
This doesn't look like a simple substitution cipher: The output is shorter than the input, and there is no obvious repetition of the `t`. We continue with the decompiler:
```c
ulong getValue(int param_1)
{
  byte bVar1;
  int iVar2;
  iVar2 = param_1;
  if (param_1 > 0x37);
  return (ulong)((int)(uint)(byte)secret[iVar2 >> 3] >>
                 (7 - (((char)param_1 + (bVar1 >> 5) & 7) - (bVar1 >> 5)) & 0x1f) & 1);
}
```
This function performs some bit-manipulation on the input (which is `current_index`) using a `secret` global variable and returns a `0` or `1` (notice the `& 1` at the end of the return statement).
The value returned by this function is then passed on to `save`:
```c
void save(byte param_1)
{
  buffChar = buffChar | param_1;
  if (remain == 0) {
    remain = 7;
    fputc((int)(char)buffChar,output);
    buffChar = '\0';
  }
  else {
    buffChar = buffChar * '\x02';
    remain = remain + -1;
  }
  return;
}
```
This function looks like it buffers the input bits in the `buffChar` global, and writes them to the output file once there are enough bits to form a byte. Now we understand the following code in `encode`:
```c
    if (flag_size  bf obj.secret
[0x000007c0]> pc @ obj.secret
#define _BUFFER_SIZE 37
const uint8_t buffer[_BUFFER_SIZE] = {
  0xb8, 0xea, 0x8e, 0xba, 0x3a, 0x88, 0xae, 0x8e, 0xe8, 0xaa,