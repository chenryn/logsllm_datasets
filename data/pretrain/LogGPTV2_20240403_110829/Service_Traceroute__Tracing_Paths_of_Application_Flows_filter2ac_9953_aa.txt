# Service Traceroute: Tracing Paths of Application Flows

**Authors:**
- Ivan Morandi
- Francesco Bronzino
- Renata Teixeira
- Srikanth Sundaresan

**Affiliations:**
- **Ivan Morandi, Francesco Bronzino, Renata Teixeira:** Inria, Paris, France
- **Srikanth Sundaresan:** Princeton University, Princeton, USA

**Contact:**
- {ivan.morandi, francesco.bronzino, renata.teixeira}@inria.fr

## Abstract
Traceroute is a common tool used to diagnose issues with Internet applications and services. However, traditional traceroute probes differ from actual application traffic, leading to potential discrepancies in the paths discovered due to load balancing and middleboxes. This paper introduces Service Traceroute, a new traceroute tool that passively monitors application traffic and issues probes that mimic the characteristics of the application flow. We extend this approach to support modern Internet services by automatically identifying flows, tracing multiple concurrent flows, and handling UDP flows. We have implemented both command-line and library versions of Service Traceroute, which are released as open-source software. Our evaluation, conducted on Web downloads from the top 1000 Alexa websites and video sessions from Twitch and YouTube, shows that Service Traceroute has no negative impact on application flows. A comparison with Paris Traceroute reveals that embedding probes within the application flow often discovers different paths than launching a new flow, highlighting the importance of our approach.

## 1. Introduction
Internet services and applications rely on distributed infrastructures to deliver content. When these services experience performance degradation or failures, service providers and advanced users often use traceroute to identify the source of the problem. Traditional traceroute works by sending probes with increasing Time-to-Live (TTL) values, causing routers along the path to send ICMP TTL-exceeded messages back to the source, thereby revealing the IP addresses of the routers [4].

However, traditional traceroute may not accurately reflect the path taken by an application's actual traffic. For example, Luckie et al. [8] demonstrated that the set of destinations and links discovered can vary depending on the type of traceroute probe (ICMP, UDP, or TCP). These differences arise due to the presence of middleboxes such as load balancers and firewalls, which make forwarding decisions based on flow characteristics. This implies that diagnosing issues in application flows requires traceroute probes that closely match the characteristics of the application's packets.

This paper presents Service Traceroute, a tool designed to discover the paths of individual application flows. Service Traceroute passively monitors application traffic and then issues probes that mimic the application's packets. While some existing tools, such as paratrace [6], TCP sidecar [13], and 0trace [5], allow probes to piggyback on TCP connections, they lack support for modern application sessions, which often involve multiple dynamic flows. These tools also do not support UDP flows, which are becoming more common with the adoption of QUIC [7].

Our contributions include:
1. Development and implementation of Service Traceroute, which we release as open-source software. Service Traceroute can automatically identify and trace the paths of multiple concurrent TCP and UDP flows.
2. A thorough evaluation showing that Service Traceroute does not negatively affect the target application in the vast majority of cases.
3. A comparison with 0Trace and Paris Traceroute, demonstrating that embedding probes within the application flow often results in different paths being discovered compared to launching a new flow.

## 2. Tool Design and Implementation
Service Traceroute follows a similar high-level logic to paratrace and 0trace but extends their capabilities. It consists of two main phases: passive observation of the target application flow and active injection of TTL-limited probes. The key difference is that Service Traceroute can automatically identify the flows to trace and supports tracing multiple concurrent flows.

### 2.1 Observation of Target Application Flow
Service Traceroute passively monitors network traffic to identify packets belonging to the target application flows. Users can specify one or more target application flows or simply describe a high-level service (e.g., YouTube). Service Traceroute uses a database of known service signatures to inspect DNS packets in real-time and identify matching flows. This database is open-source, allowing users to contribute and update signatures. A signature includes the domains and IP addresses associated with a specific service. For example, 'google.com' and its corresponding IP addresses can be used to detect Google services. The current database includes signatures for popular video streaming services like Netflix, YouTube, and Twitch. Additional flexibility is provided through command-line parameters and library API for adding custom domains and IP addresses.

### 2.2 Path Tracing
Once a packet belonging to the target application flow is identified, Service Traceroute begins the tracing phase. This phase works similarly to traditional traceroute by sending probes with increasing TTL values. However, Service Traceroute creates probes that mimic the application's packets. For TCP flows, it generates empty TCP acknowledgments that copy the 5-tuple (protocol, source and destination IP, and ports) and sequence/acknowledgment numbers. For UDP flows, it creates probes with empty payloads but the same 5-tuple. The IPID field is used to match issued probes with corresponding ICMP responses, even when tracing multiple concurrent flows. The maximum number of concurrent flows varies based on the configuration, with the IPID field dynamically sliced based on the number of probes generated. With standard traceroute parameters, Service Traceroute can trace over 600 concurrent flows.

Service Traceroute stops tracing when the target application flow closes to avoid issues with middleboxes and reduce overhead. For UDP flows, which lack an explicit end-of-flow signal, tracing stops if no further packets are detected after a configurable time interval.

### 2.3 Implementation
Service Traceroute is implemented in Go and is available as both a command-line tool and a library. The command-line version is useful for ad-hoc diagnostics, while the library version integrates easily into monitoring systems. The library outputs a JSON data structure containing discovered interfaces and round-trip times. The command-line version displays results in the traditional traceroute format, listing hops and corresponding round-trip times.

Service Traceroute is highly configurable to adapt to different applications. It offers three probing algorithms:
- **PacketByPacket:** Sends one probe at a time.
- **HopByHop:** Sends a configurable number of probes with the same TTL (default is 3).
- **Concurrent:** Sends all probes to all hops at once.

For applications with short-lived flows (e.g., web browsing), the Concurrent mode is often necessary to complete tracing within the flow duration. Users can also configure the number of probes per TTL, inter-probe time, and inter-iteration time to balance tracing speed and overhead. Additionally, Service Traceroute supports three types of stop conditions: maximum distance from the source, maximum number of non-responding hops, or explicit stop points via IP addresses. The default settings are Concurrent mode with a maximum distance of 32 and 3 probes per hop.

## 3. Evaluation Method
Our evaluation focuses on two key questions:
1. Does Service Traceroute affect the target application flows?
2. Do the paths discovered by Service Traceroute differ from those discovered by traditional traceroute tools?

To address these questions, we conducted extensive tests, which are detailed in the following sections.