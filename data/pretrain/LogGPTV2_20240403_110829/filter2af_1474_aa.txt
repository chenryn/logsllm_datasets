原文地址：
    https://blog.cobaltstrike.com/2019/08/21/cobalt-strikes-process-injection-the-details/
### 0x01 前言
在Cobalt Strike 3.14这个版本的更新中我注意到了一些进程注入方面有了新的功能变化，深得我心。
所以决定写一下我对进程注入的看法，并分享一些关于Cobalt Strike实现进程注入的技术细节，以及一些您可能希望了解的红队攻击技巧。
### 0x02 注入功能
Cobalt
Strike目前提供了一些场景下的进程注入功能，最常见的就是直接将Payload注入到新进程中去，该功能可通过您已获取到的种种会话中去执行，比如[Artifact
Kit](https://www.cobaltstrike.com/help-artifact-kit)，[Applet
Kit](https://www.youtube.com/watch?v=QvQerXsPSvc)和[Resource
Kit](https://www.cobaltstrike.com/help-resource-kit)。 本文将重点介绍了Cobalt
Strike的在Beacon会话中的进程注入。
inject和shinject命令可将代码注入到任意远程进程中,一些内置的 `post-exploitation`模块也可通过该工具注入到特定的远程进程中。
Cobalt Strike这样做是因为将shellocde注入新会话中的会比将会话直接迁移其他C2更保险。
（大概原因是直接迁移要是新会话没拉起来，原会话已经掉了就会很尴尬。）
所以Cobalt Strike的`post-exploitation`在执行时都会拉起一个临时进程，并将对应payload的DLL文件注入到进程，并通过检索命名管道来确认注入的结果。
当然，这只是进程注入的特例而已，通过这样的方式，我们可以放心的操作这些临时进程的主线程，而不用担心操作失误导致程序奔溃而导致权限丢失。
这是在学习使用Cobalt Strike注入进程时需要了解的一个非常重要细节。
* * *
原文中提到的inject命令接的第一个参数是要注入的目标程序的PID，第二个参数是目标程序的架构，不填默认为x86。
    inject 5732 x64
shinject的参数写法和inject一致，第三个参数不写的话会提示选择shellcode文件，注意需要生成的bin格式的payload。
    shinject 5732 x64 /xxx.bin
除了原文中提到的两条beacon命令之外，其实还有一个shspawn也可以，其作用是启动一个进程并将shellcode注入其中  
参数仅需选择程序架构即可。
    shspawn x64 /xxx.bin
如图，payload被注入到rundll32.exe程序中去了，这种方式比前两种要稳定得多，不怕把程序搞奔溃。
### 0x03 注入流程
Cobalt Strike的Malleable C2配置文件中的[process-inject](https://www.cobaltstrike.com/help-malleable-postex#processinject)
块是在配置进程注入的地方：
    process-inject {
        # set remote memory allocation technique
        set allocator "NtMapViewOfSection";
        # shape the content and properties of what we will inject
        set min_alloc "16384";
        set userwx    "false";
        transform-x86 {
            prepend "\x90";
        }
        transform-x64 {
            prepend "\x90";
        }
        # specify how we execute code in the remote process
        execute {
            CreateThread "ntdll!RtlUserThreadStart";
            CreateThread;
            NtQueueApcThread-s;
            CreateRemoteThread;
            RtlCreateUserThread;
        }
    }
这段代码的执行流程大致如下：
  1. 打开远程进程的句柄。
  2. 在远程进程中分配内存。
  3. 复制shellcode到远程进程。
  4. 在远程进程中执行shellcode。
#### step1：分配并复制数据到远程主机
第一步存在但是日常开发不太关注。如果我们拉起一个临时进程（如调用`post-exploitation`）;
也就是说我们已经有了远程进程的句柄，此时如果我们想将代码注入现有的远程进程...[手动狗头]，Cobalt
Strike将使用[OpenProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess)来解决这个问题。
#### step2-3
Cobalt Strike提供了两个在远程进程中分配内存并将数据复制到其中的方案。
第一个方案是经典的`VirtualAllocEx`->`WriteProcessMemory`模式，这是模式在攻击工具中很常见。值得一提的是该方案也适用于不同的流程体系结构，进程注入的应用不会仅限于注入x64目标进程。这也就意味着一个好的方案需要考虑到出现的不同极端情况（比如，x86->x64，又或者x64->x86等等）。这使`VirtualAllocEx`成了一个相对靠谱选择，Cobalt
Strike默认使用的方案也是他。如果要直接指定此模式可以把`process-inject`->`allocator`选项设置为`VirtualAllocEx`即可。
Cobalt
Strike提供的第二种方案是`CreateFileMapping`->`MapViewOfFile`->`NtMapViewOfSection`模式。此方案会先创建一个支持支持Windows系统的映射文件，然后将该映射文件的视图映射到当前进程，接着Cobalt
Strike会将注入的数据复制到与该视图关联的内存中，`NtMapViewOfSection`调用使我们的远程进程中可用的相同映射文件。如需使用该方案将`process-inject`->`allocator`设置为`NtMapViewOfSection`即可，这个方案的缺点是仅适用于`x86`->`x86`和`x64`->`x64`，涉及到跨架构注入的时候Cobalt
Strike会自动切回到`VirtualAllocEx`模式。当`VirtualAllocEx`->`WriteProcessMemory`模式注入受到杀软防御时改用本方案尝试一下也是一个不错的选择。（杀软未检测将数据复制到远程进程的其他方法时非常有用。）
#### 数据转换
上面提到步骤2和3均为假定一切正常的情况下按原始数据复制到注入的数据，真实环境中几乎不可能。为此Cobalt Strike的process-inject中加入了转换注入数据的功能，`min_alloc`选项是Beacon将在远程进程中分配的块的最小大小，`startrwx`和`userwx`选项是已分配内存的初始布尔值和已分配内存的最终权限。如需禁止数据可读可写可执行(`RWX)`，请将这些值设为`false`。
`transform-x86`和`transform-x64`支持将数据转换为另一架构的，如需预先添加数据，请确保它是对应架构可执行的代码。
在process-inject块中转换的内容其实是非常基础，因为这些选项对所有注入的内容都很安全。如果我假设我收到的是一个与位置无关的blob，也就是一个独立的程序，已知可以随意新添或追加数据，如果我假设这个与位置无关的blob不会自行修改，那么就可以在绕过没有RWX权限的情况下的显示。这些是我要使用但是一无所知的数据。关注点回到注入本身，Malleable
C2[ stage block](https://www.cobaltstrike.com/help-malleable-postex#memory)可用于修改Beacon，Malleable C2 [post-ex](https://cobaltstrike.com/help-malleable-postex#postex)用于修改Cobalt