EasyList. EasyList’s primary purpose is to block ads. All major ad-
blockers are subscribed to EasyList by default. As discussed earlier,
several sections in EasyList specifically contain anti-adblocking
filter rules. EasyList started adding anti-adblock rules in 2011. Our
analysis here focuses only on the anti-adblock sections of EasyList.
On average, the list adds or modifies 0.6 anti-adblock filter rules
every day. Figure 1(c) visualizes the temporal evolution of different
types of anti-adblock filter rules in EasyList. The filter list started
with 67 filter rules in 2011 and it has expanded to 1,317 filter rules
by July 2016. We observe a steady increase in the number of HTTP
request filter rules. It is noteworthy that the filter list contains a
relatively small fraction of HTML element filter rules. The most
recent version of the filter list has 96.3% HTTP request rules and
3.7% HTML element rules. 64.6% filter rules are HTTP request rules
with only domain anchor, 3.6% are HTTP request rules with only
domain tag, 24.6% are HTTP request rules with both domain anchor
and tag, and 3.5% are HTTP request rules without domain anchor
and tag. 3.7% filter rules are HTML element rules with domain. The
filter list does not contain any HTML element rule without domain.
3.3 Comparative Analysis of Anti-Adblock
Lists
Next, we compare and contrast different anti-adblocking filter lists.
To this end, we decide to combine EasyList and Adblock Warning
Removal List because (1) they are both managed by the EasyList
filter list project [16] and (2) they are complementary — Adblock
Alexa
Rank
1-5K
5K-10K
10K-100K
100K-1M
>1M
Anti-Adblock Combined
EasyList
Killer List
112
49
280
334
640
124
69
312
359
530
Table 1: Distribution of domains in filter lists across Alexa
rankings.
Warning Removal List mostly contains HTML element filter rules
and EasyList mostly contains HTTP request filter rules. The most
recent version of the Combined EasyList contains 1,483 rules.
Since a vast majority of filter list rules contain domain informa-
tion, we first compare the number of domains in both filter lists.
Anti-Adblock Killer List and Combined EasyList include 1,415 and
1,394 domains, respectively. To our surprise, these filter lists have
only 282 domains in common. To analyze why the filter lists are tar-
geting different sets of domains, we break down the set of domains
based on the Alexa popularity ranks and their category. Table 1
provides the breakdown of domains in both filter lists based on their
Alexa ranks. While there are some differences, popularity distribu-
tions of domains in both filter lists are fairly similar. For domain
categorization, we use McAfee’s URL categorization service [26]
and manually merge similar categories together. Figure 2 shows
the distribution of domains in both filter lists based on McAfee’s
URL categorization. We plot top 15 categories and group remaining
categories as others. Similar to the distribution of Alexa popularity
ranks, the categorization trend is also similar across both filter lists.
Below, we further investigate the differences in the filter lists by
analyzing whether they are implemented differently.
To analyze whether these filter lists are implemented differently,
we study exception and non-exception conditions in filter rules. We
label the domains as exception or non-exception on the basis of rules
in which they appeared. If the rule is an exception rule, we label
the domain as exception domain. If the rule is a non-exception rule,
we label the domain as non-exception domain. For the Combined
Combined EasyList
Anti-Adblock Killer
12
10
8
6
4
2
)
e
g
a
t
n
e
c
r
e
p
(
s
e
t
i
s
b
e
w
f
o
r
e
b
m
u
N
0
Business
Blogs/Forums
Personal Storage
Entertainment
Games
Streaming/Sharing
Illegal Software
Shareware
General News
Marketing
Internet Services
Sports
Web Ads
Malicious Sites
Pornography
Others
Figure 2: Categorization of domains in anti-adblock filter
lists.
The Ad Wars
IMC ’17, November 1–3, 2017, London, United Kingdom
EasyList, we note a ratio of approximately 4:1 for exception to non-
exception domains. For the Anti-Adblock Killer List, we note a ratio
of approximately 1:1 for exception to non-exception domains.
We next investigate the difference in proportion of exception
and non-exception domains in both filter lists. We surmise that
the Combined EasyList has many exception domains because it
works with a large number of adblock rules in the full EasyList.
For example, rule 1 in Code 7 is an adblocking rule that blocks
every URL that ends with /ads.js? and rule 2 is an exception
rule that overrides rule 1 and allows /ads.js? on numerama.com.
Our analysis revealed that numerama.com was using /numerama.
com/ads.js as a bait HTTP request. More specifically, in Code 8,
we note that canRunAds will be undefined if bait HTTP request
is blocked and adblockStatus will be set to active. Combined
EasyList has many such exception rules. In contrast, we note that
the Anti-Adblock Killer List has a larger fraction of non-exception
filter rules that block anti-adblock scripts on specific domains. Our
results highlight that these anti-adblock filter lists have different
approaches to writing filter rules.
1
2
! R u l e 1
/ a d s . j s ?
! R u l e 2
3
4 @@| | numerama.com / a d s . j s
Code 7: URL that is blocked on other websites but
allowed on numerama.com.
1
2
3
4
5
canRunAds = t r u e ;
var a d b l o c k S t a t u s = ' inactive ' ;
if ( window.canRunAds === u n d e f i n e d )
{
a d b l o c k S t a t u s = ' active ' ;
}
Code 8: Use of HTTP bait by numerama.com.
We next analyze the implementation of filter rules for 282 over-
lapping domains in the Combined EasyList and Anti-Adblock Killer
List. Domain specific rules are implemented through domain tag
(domain=), domain anchor ((cid:2)), and HTML element tag (##). Code 9
shows the filter rule implementation by both filter lists for yocast.tv
using HTML element tag. The Combined EasyList hides HTML
element with ID ra9e on yocast.tv. Whereas the Anti-Adblock
Killer List hides HTML element with ID notice on yocast.tv. Code
10 shows the filter rule implementation by both filter lists for
pagefair.com using domain anchor. The Combined EasyList blocks
all HTTP requests from pagefair.com by its general adblocking
rules and focuses on specific websites in its anti-adblocking rules.
Whereas the Anti-Adblock Killer List blocks all HTTP requests
from pagefair.com on any domain. Overall, we note that both filter
lists often have different rules to circumvent anti-adblockers even
for the same set of domains.
1
2
3
4
! Combined E a s y L i s t
y o c a s t . t v # # # r a 9 e
! A n t i − A d b l o c k K i l l e r
y o c a s t . t v # # # n o t i c e
l i s t
Code 9: Implementation of yocast.tv for the Combined
EasyList and Anti-Adblock Killer List.
1
2
3
4
! Combined E a s y L i s t
| | p a g e f a i r . c o m / s t a t i c / a d b l o c k _ d e t e c t i o n / j s /
d . m i n . j s $ d o m a i n = m a j o r l e a g u e g a m i n g . c o m
! A n t i − A d b l o c k K i l l e r
| | p a g e f a i r . c o m ^ $ t h i r d − p a r t y
l i s t
Code 10: Implementation of pagefair.com for the
Combined EasyList and Anti-Adblock Killer List.
Finally, we investigate which of these anti-adblock filter lists is
more prompt in adding new filter rules. To this end, we compare
and contrast the addition time of 282 overlapping domains in both
filter lists. We find that 185 domains appear first in the Combined
EasyList, 92 domains appear first in the Anti-Adblock Killer List,
and 5 domains appear on the same day on both filter lists. Figure
3 plots the distribution of overlapping domains in terms of the
difference in days when they appear in each list. These results
seem to indicate that the Combined EasyList is more prompt in
adding new rules. The difference can be explained in part because
the Combined EasyList is used by default in many popular anti-
adblockers, thus we expect it to get more user feedback from its
much larger user base than that for the Anti-Adblock Killer List.
We also note as a caveat that we should expect many domains to
appear in the Combined EasyList before the Anti-Adblock Killer
List because the Combined EasyList started more than two years
before the Anti-Adblock Killer List.
F
D
C
1
0.8
0.6
0.4
0.2
0
-1080
-900
-720
-540
-360
0
-180
360
Time difference (days)
180
540
720
900
1080
Figure 3: Distribution of time difference (number of days) be-
tween the Combined EasyList and Anti-Adblock Killer List
for addition of rules that target overlapping domains.
We have identified several key differences in the filter rule imple-
mentation across two popular anti-adblock filter lists. However, our
comparative analysis of filter lists provides an incomplete picture
of their behavior. First, the behavior of individual filter rules is
dependent on other rules in the filter list. Second, the effectiveness
of these filter lists is dependent on complex and often dynamic
website behavior. Therefore, to fully understand and compare the
behavior of the Combined EasyList and Anti-Adblock Killer List,
we need to run them on actual websites and see how different filter
rules are triggered.
IMC ’17, November 1–3, 2017, London, United Kingdom
Iqbal et al.
4 ANALYZING FILTER LIST COVERAGE
USING THE WAYBACK MACHINE
We now conduct a retrospective study to analyze how anti-adblock
filter lists trigger on popular websites. Our goal is to study the
evolution of anti-adblock prevalence. To collect historical snapshots
of popular websites, we rely on the Internet Archive’s Wayback
Machine [38] which has archived historic snapshots of 279 billion
web pages since 1996 [40].
We crawl Alexa top-5K websites for the last five years from the
Wayback Machine and check for the presence of anti-adblockers
using the Combined EasyList and Anti-Adblock Killer List. Figure
4 provides an overview of our measurement methodology. We first
identify domains that are not archived by the Wayback Machine. We
then request the Wayback Availability JSON API to collect the URLs
for the monthly archives of websites. We remove outdated URLs for
which the Wayback Machine does not have a snapshot close to our
requested date. We automatically crawl the remaining URLs and
store their request/responses in the HTTP Archive (or HAR) format.
We then remove partial HAR files and use the remaining to match
against anti-adblock filter lists. Below we explain our methodology
in more detail.
4.1 Crawling the Wayback Machine
The Wayback Machine archives snapshots of popular websites
several times everyday. While popular websites frequently change
their content, they much less frequently change their codebase and
dependance on third-party scripts such as anti-adblocking scripts.
This allows us to reduce the data set that we need to crawl. We
decide to only crawl one snapshot per month for a website. We
attempt to crawl a total of approximately 300K URLs from the
Wayback Machine. A serial crawler implementation would take
several months to completely crawl all URLs. To speed up crawling,
we parallelize crawlers using 10 independent browser instances.
For each of the Alexa top-5K domains, we first check whether
the domain is archived by the Wayback Machine. The Wayback
Machine may decide to not archive a domain due to that domain’s
robots.txt exclusion policy, at the request of the domain’s admin-
istrator, or for undefined reasons.1 The Wayback Machine does
not archive 153 domains because of their robots.txt exclusion pol-
icy, 26 domains because of domain’s administrator request, and 54
domains because of undefined reasons.
For the remaining domains, we request the Wayback Availability
JSON API [39] to collect the URLs for the monthly archives of the
domains’ homepages. The Wayback Availability JSON API returns a
URL that is closest to the requested date. If a website is not archived
by the Wayback Machine, an empty JSON response is returned
by the Wayback Availability JSON API. If a URL is returned we
check its timestamp and discard URLs for which the time difference
between the requested date and the actual date of URL is more than
6 months.
We open the remaining URLs in a fully functional web browser
using Selenium WebDriver [35] and collect all HTTP requests and
responses. We configure a profile of Mozilla Firefox [27] browser
with Firebug [21] and NetExport [29] plugins. For each website we
1The Internet Archive project recently announced [47] a policy change to ignore
robots.txt directives.
Top 5K Alexa domains
Remove not archived 
domains
Request Wayback 
Machine JSON API
List of Wayback URLs with timestamp
Remove outdated URLs
Automated Selenium WebDriver
Request to crawled 
Wayback URLs
Mozilla Firefox
(Firebug + NetExport)
Store requests/
responses and 
HTML content
Data Repository
Remove partial 
snapshots
Filter list matching
Figure 4: Overview of our measurement methodology to
crawl historical snapshots from the Wayback Machine and
match against anti-adblock filter lists.
visit, we store all HTTP requests/responses in a HAR file [25] and
the page content in a HTML file. We get multiple HAR files for
some websites that keep on refreshing. For such websites, we take
a union of all HTTP requests in HAR files. We get incomplete HAR
files for websites that are not completely archived by the Wayback
Machine. We discard the partial HAR files, whose size is less than
10% of the average size of HAR files over a year.
Figure 5 shows the timeseries of number of missing monthly
snapshots by the Wayback Machine. We note that the number of
missing snapshots has decreased from 1,524 in August 2011 to 984
in July 2016. Outdated URLs account for the highest proportion of
missing snapshots. The number of outdated URLs has decreased
from 1,239 in August 2011 to 532 in July 2016. However, the number
of not archived URLs has increased from 262 in August 2011 to
374 in July 2016. Our analysis of not archived URLs shows that
it is generally due to HTTP 3XX redirects. For 3XX redirects, the
Wayback Availability JSON API returns an empty JSON object.
The number of partial snapshots has also increased from 23 in
The Ad Wars
IMC ’17, November 1–3, 2017, London, United Kingdom
1500