title:NIMBUS: cloud-scale attack detection and mitigation
author:Rui Miao and
Minlan Yu and
Navendu Jain
NIMBUS: Cloud-scale Attack Detection and Mitigation
Rui Miao
Univ. of Southern California
PI:EMAIL
Minlan Yu
Univ. of Southern California
PI:EMAIL
Navendu Jain
Microsoft Research
PI:EMAIL
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network Archi-
tecture and Design
General Terms
Design, Experimentation
Keywords
Cloud attack; Software-Deﬁned Networking
1.
INTRODUCTION
Cloud services are growing rapidly and their market is expected
to reach $180 billion by 2015 [4]. Today, large cloud providers host
tens of thousands of different services, so inbound attacks targeting
the cloud can cause signiﬁcant, and sometimes spectacular, collat-
eral damage. A recent survey of datacenter operators indicates that
half of them experienced DDoS attacks, with 94% of those experi-
encing regular attacks [2].
We highlight several unique features and evolution trend among
those attacks [6, 1]: (1) Large-scale. These attacks have the vol-
ume up to hundreds of gigabits per second against a single cloud
service. (2) Diverse attacks. The attacks range from network-layer
(e.g. SYN ﬂood, UDP ﬂood) to application-layer (e.g. HTTP GET,
SQL injection) with different characteristics on volume, number of
connections, and packet header signatures (e.g., TCP ﬂag, port). (3)
Fast ramp-up rate. The attack trafﬁc ramps up quickly and affects
the target cloud service usually within one minute.
In response to the challenges above, the attack detection and mit-
igation system needs to 1) have sufﬁcient capacity to accommodate
attack volume, 2) support the detection of diverse range of attacks,
and 3) have accurate and fast attack detection with low collateral
damage to legitimate trafﬁc.
To detect attacks, cloud operators commonly adopt commercial
hardware boxes such as Firewalls, IDS, DDoS-protection appli-
ances) in the network. There are three problems in these hardware
boxes. First, these hardware boxes cannot scale up to handle at-
tacks in cloud scale. For example, Firewall and IDS examine the
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631446 .
detailed signatures and states of the trafﬁc. So they cannot handle
attacks with high volume. The DDoS-protection appliances check
only signiﬁcant trafﬁc in network-layer. So they can handle larger
attack volume but are still unable to accommodate extreme cloud-
scale attacks with up to hundreds of gigabits per second. Second,
these hardware boxes introduce unfavorable cost vs. capacity trade-
offs. For example, the DDoS-protection appliance typically cost
hundreds of thousands up to a few million dollars per box in each
year [8]. Third, since these devices run proprietary software, they
limit how operators can conﬁgure them to handle the increasing
diversity of attacks today.
There have been some commercial attack prevention services
(CloudFlare [3], Prolexic [1]) to redirect web service and enterprise
trafﬁc through a dedicated high-capacity scrubbing network for at-
tack detection and mitigation. However, the cloud operator does
not want tenant trafﬁc to be re-routed given the private concerns.
In this paper, we propose a new paradigm of attack-prevention-
as-a-service that leverages commodity VMs for attack detection
and mitigation. We propose the NIMBUS service, which combines
the elasticity of cloud computing resources with the kinds of pro-
grammability seen in software-deﬁned networks (SDN). NIMBUS
scales resource usage with trafﬁc demands, is ﬂexible to handle di-
verse attacks, and is relatively cheap and without the exposure of
private tenant trafﬁc.
2.
NIMBUS DESIGN
There are several key challenges in designing and implementing
NIMBUS:
1.
Scaling to match datacenter trafﬁc capacity at the order of
hundreds of gigabits per second. The service should auto-scale to
enable agility and cost-effectiveness.
2. Programmability to handle new and diverse types of network-
based attacks, and ﬂexibility to allow tenants/operators to conﬁgure
policies speciﬁc to the trafﬁc patterns and attack characteristics.
3. Fast and accurate detection and mitigation for attacks that ramp-
up within one minute; once the attack subsides, we should revert
the mitigation to avoid blocking legitimate trafﬁc.
4. Robustness to prevent sophisticated attacks from a wise ad-
versary, who knows our system well and want to attack either the
NIMBUS service or individual cloud service.
In response to those design challenges, we design NIMBUS as
an SDN-inspired framework, comprising a set of VM instances
that analyze trafﬁc for attack detection and an auto-scale controller
that (a) does scale-out/in of VM instances to avoid overloading,
(b) manages routing to trafﬁc ﬂows to them, and (c) dynamically
instantiates anomaly detector and mitigation modules on them, as
shown in Figure 2.
121Figure 1: Timeline of attack burst. Starting with 1 Gbps and 2 VMs, and adding 9 Gbps attack trafﬁc from 15th second.
adversary may generate on/off attack aligned with the auto-scale
mechanism to waste NIMBUS resources and cause ﬂuctuations of
state migration.
Detection and Mitigation. NIMBUS supports ﬂexible programma-
bility for diverse and new attack detection using commodity VMs.
For example, we may count throughput towards individual service
to detect DoS-like attacks. In addition, we can also track the num-
ber of distinct IP sources to identify bot-like scan. Moreover, NIM-
BUS needs to be generic to support existing detection tools and al-
gorithms (e.g., Deep Packet Inspection (DPI) [10]). One challenge
is a wise adversary may generate attacks in a short burst that are
hard to detect from the aggregated trafﬁc statistics in a measure-
ment epoch. Therefore, NIMBUS should dynamically change the
aggregation time period to make it harder for the adversary to get
around its detection while still saving cost. Once the attack char-
acteristics (e.g., IP sources, header signature, payload) have been
identiﬁed, NIMBUS controller can callback mitigation strategies to
blacklist or rate-limit the attack trafﬁc at the routers, prevent the
attacks from hitting cloud infrastructure and tenant applications.
3. PRELIMINARY RESULTS
We build our prototype using three servers acting as the trafﬁc
generator, the host of NIMBUS VMs, and the NIMBUS controller,
respectively. We connect them to a switch using 10G links. Our
preliminary experiment is to detect ﬂows with signiﬁcant volume.
The results are shown in Figure 1, where we add 9 Gbps attack burst
from 15th second. As we can see, the accuracy decreases rapidly as
the system drops lots of packets. As more VMs get started, the ac-
curacy gradually recovers and the system throughput also increases
to accommodate the attack trafﬁc. In this experiment, The system
has scaled-out to 10 VMs. With increasing number of active VMs,
the system takes around 55 seconds to recover its measurement ac-
curacy and 100 seconds to accommodate the 9 Gbps trafﬁc burst.
4. REFERENCES
[1] Q4 2013 global ddos attack report. http://goo.gl/lIyRmK, 2013.
[2] Arbor Networks. Insight Into the Global Threat Landscape.
http://goo.gl/15oOx3, February 2013.
[3] CloudFlare. https://www.cloudflare.com/.
[4] Gartner. http://www.gartner.com/newsroom/id/2562415. 2013.
[5] A. Gember, R. Viswanathan, C. Prakash, R. Grandl, J. Khalid, S. Das, and
A. Akella. OpenNF: Enabling Innovation in Network Function Control. In
Sigcomm, 2014.
[6] Google. Malware Distribution by Autonomous System.
http://goo.gl/mZQeG4, 2013.
[7] A. Kumar and J. Xu. Sketch guided sampling - using on-line estimates of ﬂow
size for adaptive data collection. In INFOCOM 2006. 25th IEEE International
Conference on Computer Communications. Proceedings, 2006.
[8] F. Networks. 2011 adc security survey global ﬁndings. In http://goo.gl/A3b2Q,
2011.
[9] A. Ramachandran, S. Seetharaman, N. Feamster, and V. Vazirani. Fast
monitoring of trafﬁc subpopulations. In Proceedings of the 8th ACM
SIGCOMM Conference on Internet Measurement, IMC ’08, 2008.
[10] Snort. http://www.snort.org/.
Figure 2: NIMBUS Architecture
Flexible sampling. NIMBUS supports ﬂexible sampling conﬁgu-
ration on different trafﬁc ﬂows, for the better accuracy of different
attack detection applications. Since trafﬁc monitoring in cloud data
center typically employs uniform sampling with very low sample
rate (e.g. 1 in 4000 packets), it is highly likely to miss median
size DDoS attacks and other types of attacks (e.g. scan, Brute-
force). Biased sampling strategies have been proposed to have dif-
ferent sampling rate for different ﬂow groups [9] or ﬂow size [7],
based on statistics over all packets in each ﬂow group (e.g. sketch).
However, those approaches need to change the hardware to support
per-packet update for sampling rate. Here, we propose a ﬂexible
sampling strategy without hardware changes, where NIMBUS es-
timates trafﬁc statistics from only trafﬁc samples, and then adjusts
the sampling rate for different ﬂows accordingly. Finally, we would
investigate an algorithm to allocate sampling resources to different
ﬂows to reduce the attack detection error for different attack types.
Autoscale. NIMBUS’s central controller communicates with routers
to direct trafﬁc samples to different VMs, each of which detects at-
tacks destined to different sets of cloud services. The VMs are
allocated from available resources shared with other cloud tenant
applications. When a VM is close to resource exhaustion under at-
tack scenario, the controller can divert some of its trafﬁc to other,
possibly newly instantiated, VMs. By doing so, NIMBUS can main-
tain accurate attack detection with sufﬁcient capacity provisioning.
One challenging is NIMBUS needs to manage the states of VMs
in scale-up/down for consistent and responsive attack detection.
Recent work [5] proposes to halt the packets of particular ﬂows
until state migration has completed. However, in an attack sce-
nario, the trafﬁc ramps up very fast and thus the VM is overloaded
during the state migration. In this sense, NIMBUS needs to balance
the trafﬁc load immediately, even before the states have completely
migrated. We need to investigate how to merge the new states and
migrated states, and how to quantify the accuracy drop during the
state migration. Further, in order to balance the cost (e.g. CPU,
memory, bandwidth) of state migration and detection responsive-
ness, we need to investigate which ﬂows to migrate and what asso-
ciated states to migrate. In addition, we need to make NIMBUS ro-
bust to the wise adversary who may generate sophisticated attacks
to degrade the effectiveness of autoscale system. For example, the
 0 2000 4000 6000 8000 10000 0 50 100 150 200Throughput (Mbps)Time (sec) 0 20 40 60 80 100 0 50 100 150 200Accuracy (%)Time (sec) 0 2 4 6 8 10 0 50 100 150 200Number of VMsTime (sec)LBVMVMVM...NIMBUS ControllerRouterLoad BalancerTenant VMsReportAutoscaleFlexible Sampling & Mitigation CallbackVMVMNIMBUS VMs...122