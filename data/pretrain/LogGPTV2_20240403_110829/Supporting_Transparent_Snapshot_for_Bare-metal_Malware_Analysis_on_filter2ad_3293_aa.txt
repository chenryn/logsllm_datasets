# Title: Supporting Transparent Snapshot for Bare-metal Malware Analysis on Mobile Devices

## Authors:
- Le Guan
- Shijie Jia
- Bo Chen
- Fengwei Zhang
- Bo Luo
- Jingqiang Lin
- Peng Liu
- Xinyu Xing
- Luning Xia

### Affiliations:
- **Le Guan, Peng Liu, Xinyu Xing:** Pennsylvania State University, USA
- **Shijie Jia, Jingqiang Lin, Luning Xia:** Data Assurance and Communication Security Research Center, CAS, China
- **Fengwei Zhang:** Wayne State University, USA
- **Bo Luo:** The University of Kansas, USA
- **Bo Chen:** Michigan Technological University, USA

**Corresponding Author: Shijie Jia**

**Also with:**
- **Shijie Jia, Jingqiang Lin, Luning Xia:** State Key Laboratory of Information Security, IIE, CAS, China

---

## Abstract
The increasing prevalence of cybercrimes targeting mobile devices necessitates an efficient malware analysis platform. With the emergence of evasive malware capable of detecting analysis in virtualized environments, bare-metal analysis has become a critical solution. Existing works primarily focus on extracting malicious behaviors during bare-metal analysis. However, it is equally important to quickly restore the system to a clean state after analysis to examine the next sample. Unfortunately, current solutions on mobile platforms can only restore the disk and require a time-consuming system reboot. Additionally, all existing methods require in-guest components, which kernel-level malware can detect.

We propose Bolt, a transparent restoration mechanism for bare-metal analysis on mobile platforms that does not require a system reboot. Bolt achieves this by simultaneously creating snapshots of both the physical memory and the disk. Memory snapshotting is enabled by an isolated operating system (BoltOS) running in the ARM TrustZone secure world, while disk snapshotting is managed by customized firmware (BoltFTL) for flash-based block devices. Both BoltOS and BoltFTL are isolated from the guest system, making them undetectable even by kernel-level malware. Importantly, Bolt does not require any modifications to the guest system, making it the first solution to achieve efficiency, isolation, and stealthiness in recovering from malware infections. We have implemented a Bolt prototype for the Android OS, and experimental results show that Bolt can restore the guest system to a clean state in just 2.80 seconds.

### Keywords
- Bare-metal Analysis
- Evasive Malware
- Snapshot
- Flash-based Block Device

### ACM Reference Format
Le Guan, Shijie Jia, Bo Chen, Fengwei Zhang, Bo Luo, Jingqiang Lin, Peng Liu, Xinyu Xing, and Luning Xia. 2017. Supporting Transparent Snapshot for Bare-metal Malware Analysis on Mobile Devices. In Proceedings of ACSAC 2017, Orlando, FL, USA, December 4â€“8, 2017, 11 pages. https://doi.org/10.1145/3134600.3134647

---

## 1. Introduction
Smartphones are increasingly becoming targets of cybercrimes, making the detection of malicious behaviors a top priority for hardware and software manufacturers as well as end users. While conventional static analysis and signature-based detection mechanisms have been effective, they fall short when dealing with obfuscated, packed, or polymorphic malware. Dynamic analysis techniques, which execute samples in sandboxed environments, overcome these limitations by capturing malicious behaviors through in-guest monitoring components (e.g., using `ptrace`) or lower-level out-of-guest monitoring components (e.g., a security monitor in a VMM). However, sophisticated or evasive malware can detect the presence of these analytic components or the emulated/virtualized environment and refrain from exposing malicious activity.

In recent years, bare-metal dynamic analysis has gained popularity. By executing malware in an unmodified operating system (OS) on actual hardware, the malware cannot detect the monitoring component, leading it to reveal its malicious behaviors. This technique faces two key challenges: (1) transparent and accurate collection of malware behaviors without auxiliary components in the guest system, and (2) quick restoration of the system to a clean state after each malware infection, which typically requires a slow system reboot. To automate and scale malware analysis, the time for system restoration must be minimized.

While many efforts have focused on behavior extraction, little attention has been given to quick restoration. Existing solutions either require modifications to the guest system, breaking transparency, or only partially restore the system state. For example, BareBox [25] can restore both memory and disk contents within four seconds but runs at the same privilege level as the guest system, making it detectable by kernel-level malware. BareDroid [30] is designed for quick restoration of the Android OS but only handles disk images and requires a full reboot, and it also cannot eliminate in-guest components.

In this paper, we propose Bolt, an OS-agnostic mechanism that can quickly restore an ARM-based device to a designated state. Bolt can create a full system snapshot (including both physical memory and disk storage) at any time during execution and restore the system state without rebooting. Compared to existing work, Bolt supports unmodified OS on the bare-metal platform, minimizing its fingerprint. Bolt achieves three goals: (1) Stealthiness, (2) Isolation, and (3) Efficiency.

To achieve these goals, we utilize two standard hardware features: ARM TrustZone and flash-based storage. ARM TrustZone provides two virtual processor cores with different privilege levels, allowing a lightweight OS in the secure world to run trusted applications. Flash-based storage, such as eMMC and SD cards, is widely used in mobile devices due to its high throughput, low energy consumption, and small size.

Leveraging TrustZone and flash memory, Bolt performs whole-system recovery without rebooting in the TrustZone secure world. For memory state, Bolt partitions physical memory into three regions: one for the secure-world trusted OS (BoltOS), one for the normal-world guest OS, and one for the guest OS snapshot. BoltOS is responsible for saving and restoring the guest OS's physical memory. For disk state, Bolt takes advantage of the out-of-place update feature in flash-based block devices, allowing restoration by backing up a small amount of metadata rather than the entire data. We also modify garbage collection and wear leveling to prevent damage to the clean-state data.

Since BoltOS operates independently of the guest OS, it is stealthy to kernel-level malware. With TrustZone, BoltOS is isolated from the guest OS, preventing interference from malware. The performance of Bolt is significantly improved by avoiding system reboots and full flash data restoration.

In summary, our main contributions are:
- We propose Bolt, a novel approach that can transparently restore the whole-system state of a running OS without rebooting. To the best of our knowledge, Bolt is the first design to achieve stealthiness, isolation, and efficiency simultaneously.
- We design a new algorithm for flash-based block storage that supports hardware-based checkpointing in conjunction with BoltOS.
- As a proof of concept, we implement Bolt using the Android OS as the guest system. Experimental results show that Bolt can make a full system recovery in 2.80 seconds, significantly outperforming state-of-the-art solutions.

### Roadmap
The rest of the paper is structured as follows. In Section 2, we provide necessary background information on Android, ARM TrustZone, and flash-based block storage. Sections 3 and 4 describe the design and implementation of Bolt, respectively. In Section 5, we evaluate the performance of the proposed system. Section 6 discusses the drawbacks of the current prototype and future work. We review related work in Section 7, and Section 8 concludes the paper.

---

## 2. Background
This section presents the necessary background information for the proposed system. We first introduce the design of the Android OS and its partitions. We then describe ARM TrustZone, a popular security extension to ARM processors, and finally, we discuss flash-based block devices, the most common form of storage media in mobile devices.

### 2.1 Android
Android is an open-source OS based on the Linux kernel, optimized for mobile devices like smartphones and tablets. Each Android application (app) is assigned a unique user ID and runs in its own virtual machine (VM) instance, which is sandboxed to prevent access to the rest of the system. Apps are written in Java, compiled to bytecode for the Java virtual machine, and then translated to a customized Dalvik Executable (DEX) format. The app package is loaded into the VM's address space along with framework libraries that can be invoked to request system services.

#### Android Partitions
The Android system organizes its non-volatile storage into several partitions, each serving a distinct role:
- **Bootloader:** A non-filesystem partition that initializes the SoC components and copies the kernel and ramdisk from the Boot partition into memory.
- **Boot:** A non-filesystem partition containing the kernel and ramdisk.
- **Recovery:** An alternative boot partition for advanced recovery and maintenance operations.
- **System:** Contains the entire operating system except the kernel and ramdisk, including the Android framework and pre-installed system apps.
- **Data:** Contains user data, such as contacts, messages, and user-installed apps. Wiping this partition performs a factory reset.

As a reboot-less system, Bolt needs to restore the non-volatile storage to a clean state, which involves recovering the content in the System and Data partitions.

### 2.2 ARM TrustZone and Its Usage in Android
ARM TrustZone is a security extension added to the ARM architecture, providing an isolated execution environment for sensitive tasks. It introduces two worlds: a normal world and a secure world. Security-critical workloads run in the secure world, while the commodity OS runs in the normal world. Tasks in different worlds have different privileges to access system resources. The secure-world components can access all system-wide resources, while normal-world components can only access non-secure resources. The current execution environment is determined by the NS (non-secure) bit in the Security Configuration Register (SCR), which can only be accessed in the secure world. Switching between worlds is managed by the SMC instruction, which traps the processor in Monitor mode, where it has ultimate privilege and can manipulate registers in both worlds.

One of the most important components in a TrustZone-based system is the Trusted Execution Environment (TEE), which runs in the secure world and provides security-critical services, such as fingerprint recognition, to the normal OS.

### 2.3 Flash-Based Block Storage
Flash-based storage, such as eMMC and SD cards, is widely used in mobile devices due to its high throughput, low energy consumption, and small size. Flash memory uses out-of-place updates, where new data is stored in newly allocated flash space, and old data remains intact until garbage collection. This feature allows Bolt to restore flash state by backing up a small amount of metadata rather than the entire data, and we modify garbage collection and wear leveling to protect the clean-state data.

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, ensuring that the content is easy to follow and understand.