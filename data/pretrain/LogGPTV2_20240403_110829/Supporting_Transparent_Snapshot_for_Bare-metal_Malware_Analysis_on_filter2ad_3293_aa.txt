title:Supporting Transparent Snapshot for Bare-metal Malware Analysis on
Mobile Devices
author:Le Guan and
Shijie Jia and
Bo Chen and
Fengwei Zhang and
Bo Luo and
Jingqiang Lin and
Peng Liu and
Xinyu Xing and
Luning Xia
Supporting Transparent Snapshot for Bare-metal Malware
Analysis on Mobile Devices
Le Guan
Pennsylvania State University, USA
Shijie Jia∗†
Data Assurance and Communication
Security Research Center, CAS, China
Fengwei Zhang
Bo Luo
Wayne State University, USA
The University of Kansas, USA
Peng Liu
Xinyu Xing
Pennsylvania State University, USA
Pennsylvania State University, USA
Bo Chen
Michigan Technological University,
USA
Jingqiang Lin‡
Data Assurance and Communication
Security Research Center, CAS, China
Luning Xia§
Data Assurance and Communication
Security Research Center, CAS, China
ABSTRACT
The increasing growth of cybercrimes targeting mobile devices
urges an efficient malware analysis platform. With the emergence
of evasive malware, which is capable of detecting that it is being an-
alyzed in virtualized environments, bare-metal analysis has become
the definitive resort. Existing works mainly focus on extracting the
malicious behaviors exposed during bare-metal analysis. However,
after malware analysis, it is equally important to quickly restore the
system to a clean state to examine the next sample. Unfortunately,
state-of-the-art solutions on mobile platforms can only restore the
disk, and require a time-consuming system reboot. In addition, all
of the existing works require some in-guest components to assist
the restoration. Therefore, a kernel-level malware is still able to
detect the presence of the in-guest components.
We propose Bolt, a transparent restoration mechanism for bare-
metal analysis on mobile platform without rebooting. Bolt achieves
a reboot-less restoration by simultaneously making a snapshot for
both the physical memory and the disk. Memory snapshot is en-
abled by an isolated operating system (BoltOS) in the ARM Trust-
Zone secure world, and disk snapshot is accomplished by a piece of
customized firmware (BoltFTL) for flash-based block devices. Be-
cause both the BoltOS and the BoltFTL are isolated from the guest
system, even kernel-level malware cannot interfere with the restora-
tion. More importantly, Bolt does not require any modifications
into the guest system. As such, Bolt is the first that simultaneously
∗Corresponding author.
†Also with State Key Laboratory of Information Security, IIE, CAS, China.
‡Also with State Key Laboratory of Information Security, IIE, CAS, China.
§Also with State Key Laboratory of Information Security, IIE, CAS, China.
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than ACM 
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a 
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12. . . $15.00
https://doi.org/10.1145/3134600.3134647
achieves efficiency, isolation, and stealthiness to recover from in-
fection due to malware execution. We have implemented a Bolt
prototype working with the Android OS. Experimental results show
that Bolt can restore the guest system to a clean state in only 2.80
seconds.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation; Hard-
ware security implementation;
KEYWORDS
Bare-metal Analysis, Evasive Malware, Snapshot, Flash-based Block
Device
ACM Reference Format:
Le Guan, Shijie Jia, Bo Chen, Fengwei Zhang, Bo Luo, Jingqiang Lin, Peng 
Liu, Xinyu Xing, and Luning Xia. 2017. Supporting Transparent Snapshot for 
Bare-metal Malware Analysis on Mobile Devices. In Proceedings of ACSAC 
2017, Orlando, FL, USA, December 4–8, 2017, 11 pages.
https://doi.org/10.1145/3134600.3134647
1 INTRODUCTION
Smartphones are increasingly becoming the targets of cybercrimes.
Therefore, detection of malicious behaviors beforehand is a top
priority for multiple stakeholders, such as the hardware/software
manufactures and end users. Although conventional static analy-
sis and signature-based detection mechanisms have been effective,
they still cannot detect all types of malware. In particular, when
techniques such as obfuscation, packing, and polymorphism are em-
ployed by the malware, static analysis methods fall short. Dynamic
analysis techniques overcome these limitations by executing the
samples in a sandboxed environment [10, 11, 14, 17, 32, 41, 48, 51].
The malicious behaviors can be captured by the in-guest1 moni-
toring components (e.g., using ptrace) or lower-level out-of-guest
monitoring components (e.g., a security monitor in VMM). Un-
fortunately, more sophisticated malware or evasive malware is
capable of detecting the existence of the analytic components or
1In this paper, as a convention, “guest” means the system in which the malware runs.
339the emulated/virtualized execution environment, and refrains from
exposing any malicious activity [5, 7, 13, 23, 36].
In recent years, the bare-metal dynamic analysis technique is
becoming popular [1, 24–26, 30, 31, 40, 49, 50, 53]. By executing the
malware in an unmodified Operating System (OS) installation that
runs on an actual hardware, the malware cannot identify the exis-
tence of the monitoring component. Hence, the malware considers
itself running on a victim device, and starts to reveal its malicious
behaviors. There are two key challenges faced by bare-metal dy-
namic analysis technique. First, without an auxiliary component in
the guest system (or a security monitor in VMM), it is difficult to
transparently and accurately collect malware behaviors. Second, un-
like virtualization based solutions, restoring the analyzing system
to a clean state after each malware infection usually requires a sys-
tem reboot, which is inherently slow. However, the ever-increasing
flood of new malware demands malware analysis solutions with
high performance and high throughput. To automate the analysis in
a scalable way, the time for system restoration must be minimized.
While many efforts have been devoted to the first aspect, i.e., be-
havior extraction [1, 24, 26, 31, 40, 50, 53], very little attention has
been paid to the aspect of quick restoration. State-of-the-art solu-
tions either require modification to the guest system, thus breaking
the transparency to malware [25, 30], or only restore part of the
system state [30]. In particular, by employing a dedicated small
OS, BareBox [25] is able to restore the system state, including both
memory and disk contents, within four seconds. However, both
the small OS and the in-guest component to assist restoration are
running at the same privilege level as the guest system. Therefore,
a kernel-level malware is able to identify that it is being analyzed,
and even disrupt the small OS. BareDroid [30] is specifically de-
signed for the quick restoration of the Android OS. However, it
only handles disk image, and hence requires a full reboot after each
malware infection. Moreover, it cannot eliminate the existence of
in-guest components either.
In this paper, we propose Bolt, an OS-agnostic mechanism which
can quickly restore an ARM-based device to a designated state. Bolt
is able to make a full system snapshot (including both the physical
memory and the disk storage) at anytime during execution, and
quickly restore the system state without rebooting. Compared to
existing work [25, 30], Bolt supports unmodified OS on the bare-
metal platform, hence the fingerprint of its presence is minimized.
In addition, Bolt achieves three goals simultaneously: (1) Stealth-
iness. The component performing the restoration is transparent
to the guest OS that runs the malware. (2) Isolation. The malware,
even with kernel privilege, cannot interfere with the restoration
component. (3) Efficiency. Bolt can directly restore the system to
a clean checkpoint, eliminating the need of rebooting.
To achieve the design goals, we novelly utilize two hardware
features – ARM TrustZone security extension and flash-based stor-
age device, both of which are standard hardware features in all
the mainstream ARM-based mobile platforms. ARM TrustZone
extends ARM processors to provide two virtual processor cores
that run with different privilege levels. Normal mobile OSes, such
as Android and iOS, run in the normal world with less privileges,
while a lightweight OS in the secure world runs trusted applica-
tions (e.g., Trustlets) that provides security-critical services, such
as fingerprint recognition to the normal OS. Another hardware
feature equipped with mobile devices is flash-based storage device.
Nowadays, flash memory in the forms of eMMC cards, SD cards,
MicroSD cards are pervasively used in mobile platforms due to its
high throughput, low energy consumption, and small size.
Leveraging TrustZone and flash memory, Bolt performs whole-
system (including both memory state and disk state) recovery with-
out rebooting in the TrustZone secure world: (1) For the mem-
ory state, Bolt partitions the physical memory into three regions
– one for the secure-world trusted OS (i.e., BoltOS), one for the
normal-world guest OS, and the other for the snapshot of the guest
OS. BoltOS runs in the secure world, and is responsible for sav-
ing/restoring the physical memory of the guest OS to/from the
snapshot region. Note that the snapshot can only be accessed by
BoltOS in the secure world. (2) For the disk state, Bolt takes ad-
vantage of a special design feature in flash-based block devices –
out-of-place update. To accommodate the unique nature of flash
memory (Section 2.3), data overwriting in flash is usually performed
“out of place”, in which the new data are always stored in the newly
allocated flash space, while the old data being over-written will
remain intact until garbage collection is performed. Utilizing this
feature, we are able to restore flash state by only backing up a small
amount of metadata rather than the entire data. This is because
the OS can only access the flash storage via the interface provided
by flash firmware, with which we can simply manipulate the OS
view of data so that the clean-state data is invisible to the malware.
Finally, we carefully modify garbage collection/wear leveling to
prevent them from damaging the clean-state data.
Since BoltOS works without assistance from the guest OS, it
is stealthy to kernel-level malware. Moreover, with TrustZone,
BoltOS can be isolated from the guest OS. Therefore, kernel-level
malware cannot disrupt it. Finally, the performance of Bolt is
greatly boosted by avoiding both system reboot and a full restora-
tion of flash data. In summary, our work makes the following main
contributions:
• We propose Bolt, a novel approach that could transparently
restore the whole-system state of a running OS without
reboot. To the best of our knowledge, Bolt is the first design
which can simultaneously achieve stealthiness, isolation and
efficiency.
• We design a new algorithm for flash-based block storage
that supports hardware-based checkpoint working in con-
junction with BoltOS.
• As a proof of concept, we implement Bolt using the Android
OS as the guest system.2 Experimental results show that the
proposed system is able to make a full system recovery in
2.80 seconds, significantly outperforming state-of-the-art
solutions.
Roadmap. The rest of this paper is structured as follows. In Sec-
tion 2, we discuss necessary background information on Android,
ARM TrustZone and flash-based block storage. Section 3 and Sec-
tion 4 describe Bolt design and implementation respectively. Then
we evaluate the performance of the proposed system in Section 5,
followed by a discussion of the drawbacks of the current prototype
2Although our system is OS-agnostic, we cannot do experiment with iOS, because iOS
devices are tightly controlled in hardware.
340and future work in Section 6. We review related work in Section 7.
Finally, Section 8 concludes the paper.
2 BACKGROUND
This section presents necessary background information of the pro-
posed system. We first briefly introduce the design of the Android
OS and its partitions. We then describe ARM TrustZone, a popular
security extension to the ARM processors. This security feature
is the root of trust in most mobile devices in the market. Finally,
we introduce flash-based block devices, the most popular forms of
storage media used in mobile devices.
2.1 Android
Android is an open-source OS based on Linux kernel. It is specifi-
cally optimized for mobile devices like smart phones and tablets.
Each Android application (i.e., app) is assigned a unique user ID, and
runs in its own virtual machine (VM) instance, which is sandboxed
to avoid accessing the rest of the system. The apps are written in the
Java programming language, which are first compiled to bytecode
for the Java virtual machine, and then translated to a customized
Dalvik Executable (DEX) format. The app package is loaded into
the address space of a VM, along with framework libraries that can
be invoked to request for system services.
Android partitions. The Android system organizes its non-
volatile storage into several partitions: /boot, /recovery, /system,
/data, /cache, /misc, etc. Each partition plays a distinct role and
facilitates different functionality of the device. We briefly describe
a few important partitions in the following:
• Bootloader: A non-filesystem partition that takes over the
system after executing the proprietary device ROM. It initial-
izes the SoC components such as DRAM, and then copies the
kernel and ramdisk from the Boot partition into the memory.
• Boot: A non-filesystem partition flashed with an image con-
• Recovery: An alternative boot partition which serves for
• System: This partition contains the entire operating system
advanced recovery and maintenance operations.
taining the kernel and the ramdisk.
except the kernel and the ramdisk. This includes the entire
Android framework and the pre-installed system apps, such
as the telephony.
• Data: This partition contains user data, e.g., user contacts,
messages and user installed apps. Assuming that the system
partition is unmodified, wiping this partition essentially per-
forms a factory reset.
As a reboot-less system, Bolt needs to restore the non-volatile
storage to a clean state, which only requires recovering the content
in the System and Data partitions.
2.2 ARM TrustZone and Its Usage in Android
TrustZone is a security extension added to the ARM architecture [2].
It provides an isolated execution environment for sensitive tasks.
In particular, it introduces two worlds, a normal world and a secure
world. The security-critical workloads run in the isolated secure
world, while the commodity OS runs in the normal world. Tasks
running in different worlds have different privileges to access sys-
tem resources. The secure-world components are allowed to access
all the resources system-wide, but the normal-world components
are only allowed to access non-secure resources. The current exe-
cution environment is determined by the NS (non-secure) bit in the
Security Configuration Register (SCR), which can only be accessed
when the processor runs in the secure world. When this bit is set,
the processor is in the normal world. Otherwise, the processor is in
the secure world. To switch to the other world, the privileged code
needs to issue an SMC instruction, which traps the processor in the
Monitor mode. In this mode, the processor has ultimate privilege.
Apart from accessing secure resources, it is able to manipulate the
registers in both worlds. As a result, the Monitor mode serves as
the gate for world-switching.
One of the most important components in a TrustZone-based