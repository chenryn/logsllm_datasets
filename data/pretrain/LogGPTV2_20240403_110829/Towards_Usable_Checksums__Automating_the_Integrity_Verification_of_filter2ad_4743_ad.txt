avoiding potential biases in the answers. The first deployment (Q1)
lasted one week and some of the questions were left as open ended.
We collected responses from around 200 participants. Qualitative
answers provided for Questions A5, A7, and A10 (see Appendix A)
were categorized at the end of the week by two coders. The code-
book was developed through inductive analysis and it was used to
define multiple-choice questions for the second deployment of the
questionnaire (Q2). We measured inter-coder agreement through
Cohen’s kappa at 0.89 and judged it sufficient. The few cases of
conflict were resolved via discussion. Before deployment of Q1, to
improve the effectiveness and readability of the questions, we con-
ducted a cognitive pretest of the questions with 5 test participants.
For instance one of the changes consisted in simplifying language.
Instead of using technical terms such as “checksums”, we mainly
used: “sequences of numbers and characters”. The questionnaire
Q2 was deployed in April 2018. It should be noted that, as for most
user surveys on security-related behavior, the information reported
by the respondents might not exactly reflect their actual behav-
iors; this fact is well documented in the literature (see for instance
Egelman et al. [17]).
5.2 Demographics and General Statistics
Two thousand valid responses were collected (N = 2,000) from
questionnaire Q2. The proportion of female respondents was 51%
and the age distribution was as follows: 18-29 (22%, or 440 respon-
dents), 30-39 (17%, or 340), 40-49 (19%, or 380), 50-59 (18%, or 360),
60+ (24%, or 480). Respondents were well distributed across the
four macro regions of the US: 22.1% (or 442) live in the Midwest,
20.1% (or 401) live in the Northeast, 34.2% (or 683) live in the South,
and 23.7% (or 474) live in the West.
The large majority of the respondents (90.6%) use a laptop or
desktop computer; the remaining 9.4% (or 189) use only a smart-
phone or tablet. Of those who use a computer, 75.9% use a computer
running Windows, 12.4% use a computer running macOS, and 2.3%
use a computer running Linux (A1). For the remaining of the sta-
tistics in this section, we will always refer to respondents who
use a computer. We found that 89.7% of the respondents owned a
smartphone, 8.5% owned a feature phone, and 1.8% did not own
a mobile phone. We leave studying downloads of mobile apps to
future work.
5.3 Results and Analysis
RQ1. In our survey (A4), 29.4% of the respondents declared to
never run any program downloaded from the Internet or to do so
from official app stores exclusively (6.1%), which could be consid-
ered a safe behavior. Out of the remaining 70.6% of the respondents,
58.6% declared downloading content from developers’ websites,
and 42.6% using P2P networks at least once a year. The majority
of respondents using computers (62.2%) declared using official app
stores (e.g., Mac App Store) for downloading programs. However,
only 6.1% of respondents used this source exclusively. These results
reveal that the large majority of Internet users are exposed to po-
tential corruption of externally hosted programs, thus confirming
the relevance of this research.
RQ2. For a final question, we asked (A9) our respondents whether
they had ever noticed checksums on websites and (A10) what they
would do with them if they ever found them when downloading
programs. We found that 23.4% of respondents remembered seeing
them on websites they used in the past. Concerning what they
would do with them, most selected responses had nothing to do
with what checksums are meant for (83% see Question A10). Inter-
estingly, for 18.2% of the respondents, displaying the checksums
on the webpage of the app would make them doubt of the website
and search for something else. Consequently, using this security
technology would be detrimental to the overall user experience.
About 11.8% of the respondents would simply ignore checksums
and continue installing the app. Regarding the purpose of check-
sums, only 5.2% of the respondents selected the correct answer (out
of 6 possible options, plus the “not sure” and “other” options), i.e.,
to check the integrity of the downloaded programs. Therefore, we
can estimate the proportion of users who know about checksums
between 1.7% and 5.2%.
5.4 Summary
The results of the large-scale survey revealed that, based on Internet
user behaviors, corruption of externally hosted programs could
have a substantial negative effect. Integrity verification offers a
defense against this. Unfortunately, only a tiny fraction of Internet
users knows about this security technology and uses it on a regular
basis. Developers, who rely on checksums, currently require users
to perform the check manually. We learned, however, that this
might be perceived negatively by less experienced users and might
lead to users preferring a different developer.
5.5 Limitations
After the deployment of the survey, we realized that some of the
terminology and the wording of the questions could have led to an
ambiguous interpretation. For instance, in question A4, we did not
provide any examples of P2P programs. Furthermore, the distinction
between ‘developer’ and ‘vendor’ might not have been entirely clear
to the respondents.
6 AUTOMATING CHECKSUM VERIFICATION
In the previous sections, we demonstrated through various surveys
and experiments that checksums currently do not fully achieve
their goals of securing web downloads. One of the main causes
is that the task of computing and verifying checksums needs to
be done manually by the users. In addition, checksums are not
widespread on the web and Internet users are unaware of their
utility and usage. In this section, we address these problems by
proposing both recommendations and technical solutions that we
designed, implemented and made available for testing (see below).
Our solutions address the problems of generating, computing and
verifying checksums.
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1262CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Mauro Cherubini et al.
6.1 Extending Subresource Integrity to Links
A direct solution for making checksum verifications automatic
is to extend the subresource integrity (SRI) feature [49], recently
introduced by the W3C and described in Section 3, to HTML a
elements (i.e., hyperlinks) that point to files to be downloaded.
Our proposal is to include an integrity attribute to the a ele-
ments, and optionally the meta and iframe elements, as web devel-
opers sometimes rely on them to trigger automatic downloads. Be-
low, we give an example hyperlink that specifies, in an integrity
attribute, the checksum of the file it points to.10
download
Upon a successful download of a file pointed to by a hyperlink that
includes an integrity attribute, the integrity of the downloaded
file should be checked by the user agent (i.e., the web browser or a
web browser extension) by comparing its (computed) checksum to
the one specified in the integrity attribute.
6.2 Checksum Verification: Browser Extension
As web browsers do not currently handle SRI for hyperlinks, to
automatically check the integrity of downloaded files, we devel-
oped a Chrome extension11. This extension should, of course, be
considered as a proof of concept and not as a final product.
Design and Implementation. Our extension supports three popu-
lar algorithms used to generate checksums: the MD5, SHA-1 and
SHA-2 hash functions,12 and PGP signatures (partially). It is imple-
mented in JS and it relies on the md5.js library for computing MD5
digests,13 the asmcrypto.js library for computing SHA digests,14
and the openpgp.js library for checking PGP signatures. In total, the
extension consists of ∼400 lines of JavaScript code (excluding the
libraries); it requires permission to access the browser’s download
manager in order to initiate and monitor downloads, as well as
read-only access to the file system in order to compute the digests
of the downloaded files.
As SRI for hyperlinks is currently not supported by web develop-
ers, our extension is also capable of extracting checksums directly
from the text of HTML pages, thus requiring no changes to existing
websites such as VLC. It operates as follows:
(1) For each visited webpage, it navigates the HTML DOM
tree and extract, by using regular expressions, hexadecimal
strings that have the same format as checksums as well as
the corresponding hash function names (e.g., SHA-1).
(2) If checksums are detected (on the webpage or in the
integrity attribute of the a element), it intercepts click
events triggered by hyperlinks. If a hyperlink points to a file
with a sensitive extension (e.g., dmg, exe, pkg) and/or mime
10For PGP, the integrity attributes include the string “pgp”, the ID and fingerprint
of the PGP key used for generating the signature, and the base-64 representation of
the detached signature of the file.
11Ideally, such verifications should be performed by the web browser. One option
would be to integrate directly in the Chromium open-source browser project.
12We chose to support the MD5 and SHA-1 functions despite their known weak-
nesses because they are still used, as mentioned in Section 4.
13https://github.com/blueimp/JavaScript-MD5
14https://github.com/asmcrypto/asmcrypto.js
Figure 1: Screenshot of the extension on the Plex download
page (https://www.plex.tv/downloads/). The checksum of
the downloaded file is computed and successfully checked
against that extracted from the webpage (highlighted).
type15 (e.g., application/x-apple-diskimage, application/x-
msdownload, application/x-debian-package),16 the down-
load is followed by the verification of the checksum, essen-
tially a comparison between the checksum that is detected
and the one computed from the downloaded file.
(3) If multiple checksums are extracted from the webpage, the
verification is considered successful, as long as the computed
checksum matches any one of them.17 The webpage is greyed
out and a pop-up message is displayed to the user, as illus-
trated in Figure 1. Additionally, if the checksum originates
from the text of the webpage, the matching text with the
checksum is revealed (if originally hidden) and highlighted.
The extension displays a general message to the user and a sta-
tus indicator (e.g., “downloading”, “computing checksum”) with
an animation. Additionally, it can show four different messages
according to the result of the verification (Figure 2), depending on
the origin of the checksum (webpage text or integrity attribute)
and on the outcome of the verification (success or failure). In the
case of failure, users are offered the option to delete the possibly
corrupted downloaded file (through a link). Clearly, there are mul-
tiple ways to communicate the result of the verification to the user,
and the UI elements have a significant effect on the usability of our
extension [7]. For the initial proof of concept, we experimented
with the four messages shown in Figure 2. A careful consideration
of alternatives that incorporate user feedback should be conducted
15The mime type is determined by issuing a HEAD request to the target of the
16The complete list was built based on the extension-mime types mappings of the
link.
Apache and nginx web servers.
17Note that this reduces only slightly the security of the verification procedure
as download pages usually contains only a few checksums (8 at most in the websites
we surveyed, i.e., for Android Studio). As part of future work, we intend to match
automatically checksums to download links by analyzing the DOM of the webpages.
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1263Automating the Integrity Verification of Web Downloads for the Masses
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
before the actual deployment in a product. We leave the careful
design of the extension user interface for future work.
Figure 2: Messages displayed by the browser extension: left
(integrity attribute) / right (text of the webpage), top (suc-
cess) / bottom (failure).
The extension can be downloaded from at the following ad-
dress: https://checksum-lab.github.io/chrome_extension.zip.18 A
test webpage can also be found at the following address: https:
//checksum-lab.github.io/. It contains test download links with and
without (valid/invalid) integrity attributes and links to the download
pages (that include checksums) of popular software (e.g., Android
Studio, Plex, VLC) on which the extension can be successfully tested.
Alternatively, a demo video can be downloaded at the following
address: https://checksum-lab.github.io/demo.mp4.
Shortcomings and Perspectives. There are several limitations and
missing features that we intend to address in the future. First, the UI
and the textual messages of the browser extension should be care-
fully designed by taking into account user feedback (see Section 7.4
for more details) and best practices for the design of security warn-
ings (see for instance [7, 8, 11, 16, 18, 21, 30, 40–42]). Second, the
extension does not handle the case of concurrent downloads from
the same tab (e.g., multiple downloads from the same webpage).
Third, the extension works only when the checksum and the direct
link to the file are on the same page; for instance, the case where
a download link redirects to a page with an automatic download
based on a meta or iframe element is not supported. Similarly, it
does not support the case where the checksums are in a separate file
linked on the download page. Furthermore, it does not include any
settings UI for managing the features, such as disabling the exten-
sion on certain websites or making the verification process silent
(e.g., do not show any message and simply delete the file in the
background if the checksum does not match). Finally, the extension
currently does not alert users when no checksums are available on
the website, for any of the downloaded files. Finding the optimal
way of informing users of such aspects is another design problem
we intend to address by reviewing the best practices for security
warning design, and by conducting additional user studies.
6.3 Checksum Generation: CMS Extension
In order for web browsers to automatically verify checksums as
described above, checksums must be embedded in download links.
Therefore, to alleviate the burden on the website administrators, we
developed a tool to automatically generate and embed checksums
in download links for websites that are managed through a Content
Management Systems (CMS).
18Instructions: Download the zip file and unzip it. In the extension tab of Chrome,
activate developer mode and load the extension by clicking on the “Load unpacked”
button and selecting the folder where the extension was unzipped.
Design and Implementation. Because a substantial fraction of
websites are powered by content management systems (CMS), and
by WordPress in particular,19 we implemented our tool in the form
of a WordPress extension.
Our WordPress extension is implemented as a hook for the
page/post update operation. Similarly to the Chrome extension,
it should be considered as a proof of concept. It consists of ∼100
lines of PHP code; it can be downloaded at the following address for
testing purposes: https://checksum-lab.github.io/wordpress_plugin.
html. The extension parses the HTML code of the page and extracts
all the links (i.e., the a elements). For each link, the extension de-
termines the mime type of the target by making a HTTP HEAD
request on the server side. If the target is downloadable (i.e., not
a webpage, or more generally, content that is not displayed in the
browser), the extension fetches it (by making a HTTP GET request
on the server side), computes the SHA-2 checksum and embeds it
in the corresponding link, i.e., in an integrity attribute of the a
element. For performance reasons, the computed checksums are
cached in a database. Yet, they can be refreshed on demand, in
order to adapt to potential changes of the linked file at different
points in time. Moreover, the extension can be further enhanced
to automatically re-compute the checksums for the target of the
links (i.e., the a element) and to alert the website administrator in
case of changes (caused by file update or corruption). It should be
noted that downloading the file on the server side could be avoided
by using the content-md5 [22] or instance digest [31] feature
of HTTP. Unfortunately, because the former is deprecated and the
latter is not standardized, neither are supported by major HTTP
servers. In the production version of the extension, we intend to
implement the download and the checksum computation in an
asynchronous fashion and to include a configuration widget in the
HTML editor that is embedded into WordPress.
7 USER EXPERIMENT
In this section, we study the usability and the effectiveness of check-
sums in the context of web downloads. More specifically, we pose
the following research questions: (RQ3) Do users thoroughly verify
checksums?, (RQ4) Can users be fooled by replacing some characters
in the middle of the checksum?, (RQ5) Does automating the checksum
verification improve general usability metrics?
In order to answer the above questions, we conducted an in situ
user experiment involving an eye-tracking screen. This methodol-
ogy has been used extensively in the last decade to study usability
of new services, programs or mobile apps as it enables the collec-
tion of accurate objective measurements of where the user looks
on the screen without obtruding or disturbing their action [32].
The two metrics extracted through this method were the total num-
ber of fixations and the total dwell time. Fixations are indicative of
the amount of processing being applied to objects at the point-of-
regard [25]. A longer dwell time indicates difficulty in extracting
information, or it means that the object is more engaging in some
way [28]. Our hypothesis was that participants who checked thor-
oughly the checksums would have to produce more fixations (and
19WordPress is the most widely used CMS; according to W3Tech (https://w3techs.