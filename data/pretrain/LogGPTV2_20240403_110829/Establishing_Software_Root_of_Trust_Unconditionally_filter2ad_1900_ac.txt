most) universal hash functions, we must prove their concrete
optimality in cWRAM evaluations. However, all concrete op-
timality results for polynomial evaluation are known only over
inﬁnite (e.g., rational) ﬁelds [9], and the gap between these
bounds and the lower bounds over ﬁnite ﬁelds (e.g., Zp) is
very large [35]. Furthermore, optimality is obtained using only
5
Horner’s Rule. Let p be a prime. Polynomial
two operations (i.e., +,×) and cannot hold in computation
models with large instruction sets like the cWRAM and real
processors. We address these problems by adopting a com-
plexity measure based on function locality [49], which enables
us to distinguish between classes of unit-time computation
instructions, and by providing an evaluation condition that
extends the unique optimality of Horner’s rule to cWRAM.
C. Unique optimality of Horner’s rule in cWRAM
Pd(x) = ad × xd + ad−1 × xd−1 + ··· + a1 × x + a0 (mod p)
is evaluated by Horner’s rule in a ﬁnite ﬁeld of order p as
Pd(x) = (··· (ad×x+ad−1)×x+···+a1)×x+a0 (mod p).
Horner-rule step and programs. A program that evaluates
ai × x + ai−1 (mod p) as a sequence of four instructions
integer multiplication (·), mod p, integer addition (add), mod p
in cWRAM, or mod(add(mod(·(ai, x), p), ai−1), p) in inﬁx
notation, is called the Horner-rule step. If arithmetic is in
mod 2w−1 where w − 1 bits represent an unsigned integer
value of a w-bit word, the Horner-rule step6 simpliﬁes to the
multiply-add sequence; i.e., add(·(ai, x), ai−1).
A cWRAM loop that executes a Horner-rule step d times to
evaluate Pd(x) is a Horner-rule program. Note that there may
be multiple encodings of a Horner-rule program that evaluate
Pd(x) in the same space and time.
Initialization. If p  3 be an integer, 2  2 is a prime
power. To illustrate, we outline it for the important case q =
2w−1. Here the Horner-rule program needs only d + 8 words
and 4d time units after initialization.
Theorem 1 answers A. M. Ostrowski’s 1954 questions
regarding the optimality of Horner’s rule [9] in a realistic
model of computation. However, both bounds t = 6d and
m = d+11 depend on d, and thus t cannot scale independently
of m. If t needs to be large, d becomes large. Hence not all
d+1 coefﬁcients of Pd could always be input at the same time;
e.g., in one packet. This would enable an adversary’s code to
pre-process the coefﬁcients that arrive early and circumvent the
optimal bounds; e.g., with pre-processing, the lower bound for
Pd’s evaluation drops from d to (d+1)/2 multiplications [61].
IV. RANDOMIZED POLYNOMIALS AND MALWARE
FREEDOM
In this section we deﬁne a family of randomized polynomi-
als, prove their space-time optimality in adversary evaluation
on cWRAM (Theorem 5), and show that they have stronger
collision-freedom properties than k-independent (almost) uni-
versal hash functions in cWRAM (Corollary). These properties
enable the veriﬁer to establish control-ﬂow integrity on a single
device (Theorem 6), and scale bounds for correct transaction
order and duration in a multi-device untrusted system. This
helps establish malware-free states (Theorem 7).
A. Randomized Polynomials – Deﬁnition
Let p be prime and d > 0, k > 1 integers. A degree-d
polynomial over Zp with k-independent (e.g., [12]), uniformly
distributed coefﬁcients si
Pd,k(·) = sd × xd + ··· + s1 × x + s0 (mod p),
is called the (d, k)-randomized polynomial 7.
If vd, . . . , v0 ∈ Zp are constants independent of si and x,
and ⊕ is the bitwise exclusive-or operation, then polynomial
Hd,k(·) = (vd⊕sd)×xd+···+(v1⊕s1)×x+(v0⊕s0) (mod p)
is called the padded8 randomized polynomial.
Each padding constant vi will be used to represent the
least signiﬁcant log p bits of a memory word i or of a special
processor-state register; whereas the k of random numbers
(which generate the si) will ﬁll the least signiﬁcant log p bits
of all general-purpose processor registers; e.g., see the device
initialization in Section IV-E1 below.
Theorem 2 below shows that Hd,k(·) is second pre-image
free, has uniform output, and is k-independent. Everywhere
below,
$←− denotes a uniform random sample.
cannot input variable numbers (i.e., d + 1) of random coefﬁcients.
7Our notion of randomized polynomial differs from Tarui’s [69] as we
8Of course, other padding schemes not based on the ⊕ operation exist,
which preserve the k-wise independence and uniform distribution of the
padded coefﬁcients.
6
Theorem 2. Let p > 2 be a prime and u ∈ Zp a constant.
$←− Zp,∃y ∈ Zp, y (cid:54)= x : Hd,k(y) = Hd,k(x)]
1. P r[x
≤ 1
(p−1)
2. P r[x
3. Hd,k(·) is k-independent.
$←− Zp : Hd,k(x) = u] = 1
p
The proofs of parts 1 and 2 follow from two notable facts.
First, let x, m be positive integers. If gcd(x, m) = 1, then
equation α · x = y (mod m) has a unique solution mod m.
Hence, for all y ∈ Zp and x ∈ Z+
p there exists a unique α such
that y = α · x mod p, and thus Hd,k(y) − Hd,k(x) becomes a
univariate polynomial in x. Second, any univariate polynomial
over Zp whose free coefﬁcient is uniformly distributed and
independent of input x has uniform output in Zp when evalu-
ated on a uniform, random x. For part 3, we evaluate Hd,k(·)
at k distinct points and obtain a system of k linear equations
with d + 1 unknowns vi ⊕ si, k of which are independent. We
ﬁx any d− k + 1 unknowns, evaluate their terms, and obtain a
system of k linear equations that has a unique solution. Now
the independence result follows by deﬁnition [74].
Below we deﬁne the k-independent uniform elements si
for a family of randomized polynomials H in the traditional
way [12], [74]. We use family H in the rest of this paper.
$←− Zp. Let v =
Family H. Let p > 2 be a prime and rj, x
vd, . . . , v0, vi ∈ Zp, be a string of constants independent of
rj and x. Family H is indexed by tuples (d, r0, . . . , rk−1, x)
denoted as (d, k, x) below.
H = {Hd,k,x(·) | Hd,k,x(v) =
(vi ⊕ si) × xi (mod p),
rj × (i + 1)j (mod p)},
si =
where vi ⊕ si is represented by a mod p integer.
k−1(cid:80)
Note that Hd,k,x(·) ∈ H has properties 1 and 2 of Hd,k(·)
$←− Zp. The proof
in Theorem 2 in a one-time evaluation on x
of its k-independence is similar to that of part 3.
d(cid:80)
j=0
i=0
Notation. For the balance of this paper, p is the largest
prime less than 2w−1, w > 4. The choices made for the
$←− H are denoted
random uniform selection of nonce Hd,k,x
$←− Zp, 0 ≤ j ≤ k − 1}.
by S = {rj, x
B. Code optimality in honest evaluation
In this section, we prove the optimal space-time bounds in
a honest one-time evaluation of Hd,k,x(·). The only reason we
do this is to set the bounds an adversary must aim to beat.
Let Horner(Hd,k,x(·)) denote a Horner-rule program for
the honest one-time evaluation of Hd,k,x(·) ∈ H on input
string v. That is, Horner(Hd,k,x(·)) is implemented by a
nested cWRAM loop using the recursive formula zi−1 =
zi × x + (vi−1 ⊕ si−1), where zd = vd ⊕ sd, z0 = Hd,k,x(v),
1  |v|, indexing in v also
requires a mod |v| instruction.
Modular indexing in v increases the instruction bound by 1
but does not affect the concrete optimality proofs since fewer
instructions cannot simulate memory addressing in cWRAM.
Furthermore, indexing to access a special processor register
(e.g., asynchronous event status bits) contained in v assumes
that the register is mapped in physical memory. When it isn’t,
accessing it via its index in v would require a couple of extra
instructions. Again, these instructions would only insigniﬁ-
cantly increase the memory and time bounds, but not affect
their optimality. Thus, for simplicity of exposition and without
loss of generality, we assume coefﬁcient padding requires only
2 instructions. Hence, 14 instructions comprising 2 nested
6-instruction loops and the 2 instructions for computing a
coefﬁcient vi ⊕ si are sufﬁcient. Thus, Horner(Hd,k,x(·))’s
time bound is t = [6(k − 1) + 2]6d = (6k − 4)6d time units.
the operands of these
instructions are evident; i.e., k + 8 data words comprising
the Hd,k,x(·)’s index in H, namely (d, r0, . . . , rk−1, x), degree
k−1, index i+1, coefﬁcient si, modulus p, output z = vd⊕sd,
and vi’s word index in v. Thus k + 8 data words and 14
instruction words, or k+22 (general-purpose processor register
and memory) words, is Horner(Hd,k,x(·))’s space bound.
By the deﬁnition of family H,
Lower bounds. The upper space-time bounds of Hd,k,x(·)
are unaffected by the excess memory and register space
required by the programs for processor-state (i.e., special
processor register) initialization, I/O, and general-purpose
register initialization (Init) in cWRAM; see Section IV-E1.
However, excess space prevents us from using Theorem 1 to
prove the lower bounds since the execution space is no longer
minimized. To avoid this technical problem, we assume these
programs are space-optimal and memory M contains only the
additional k+22 words. We also take advantage of the fact that
an honest program does not surreptitiously modify the settings
of the special processor registers after its code is committed.
The above assumption is only used to simplify the concrete-
optimality proof for the honest evaluation of Hd,k,x(·). It is
unnecessary for the optimality proof of Horner(Hd,k,x(·))
code in adversarial evaluation; see Section IV-C. There we use
the collision-freedom properties of Hd,k,x(·) in cWRAM (e.g.,
Corollary, Section IV-D) and its uniform distribution of output,
which we can avoid here thanks to the assumption made.
Theorem 3 (Optimality in Honest Evaluation). Let M
comprise space-optimal processor-state initialization, I/O, and
Init code, and k + 22 words. The honest one-time evaluation
of Hd,k,x(·) on v by Horner(Hd,k,x(·)) is optimal whenever
the cWRAM execution time and memory are simultaneously
minimized; i.e., no other programs can use both fewer than k+
22 storage words and (6k− 4)6d time units after initialization.
The proof of this theorem follows from Theorem 1, k-
independence, and honest one-time evaluation.
7
Fig. 2: Adversary goal and strategy space
C. Code optimality in adversary evaluation
Adversary Goal. By Theorem 3, the adversary’s goal is to
output Hd,k,x(v) using only m words of storage and time t
such that at least one of the lower bounds is lowered; i.e., m <
k + 22 and t = (6k− 4)6d, or m = k + 22 and t < (6k− 4)6d,
or m < k + 22 and t < (6k − 4)6d. We denote this goal by
(m, t) < (k + 22, (6k − 4)6d).
Strategy Space. We partition the adversary’s strategy space
into mutually exclusive cases 1 - 3 below, which s/he can select
at no cost, and bound the probability of success in each case.
These cases are summarized in Figure 2.
p, by Theorem 2-2.
For any evaluation that depends on nonce Hd,k,x