一般来说审计的话都可以从入口文件代码开始看起，因为从入口文件代码中可以给到非常多的信息为后面审计做好铺垫，比如根目录下的 `index.php`
基本都会为程序的入口文件。  
`index.php：`
    include(dirname(__FILE__).'/global.php');
可以看到 `index.php` 文件第一行代码就是包含了根目录下面的 `global.php` 文件，一般我的话就会继续跟入 `global.php`
这个文件里面，看看里面做了什么处理，有些师傅可能习惯将整个入口文件读完之后再去跟入所包含的文件，这样也是可以的，但是有点不好的就是如果入口文件代码一多，那么这其中很多代码有可能会在所包含的文件里面做的处理，因此可能你就不知道这个变量或者数组到底从哪来，所以推荐如果有包含的文件，根据文件名字判断重要性，随即继续跟入。  
`global.php：`
    define('APP_PATH',dirname(__FILE__).'/'); 
    define('CONFIG_PATH',APP_PATH.'/config/');
    define('DATA_PATH',APP_PATH.'/data/');
    define('LIB_PATH',APP_PATH.'/app/include/'); 
    define('TPL_PATH',APP_PATH.'/app/template/');
    define('MODEL_PATH',APP_PATH.'/model/');
    define('PLUS_PATH',DATA_PATH.'/plus/');
    define('ALL_PS','conn');
可以看到
`global.php`最顶部先是定义了非常多的常量，定义了一些配置文件或者其它文件的路径，因为在开发中在全局定义常量是为了整个项目文件都可以用到，比如后期可能会用到某个路径，这个时候直接使用常量即可，就不用继续在做一些路径的处理，继续往下看代码。
    include(CONFIG_PATH.'db.config.php');
    include_once(PLUS_PATH.'config.php');
    include(CONFIG_PATH.'db.safety.php');
在定义完常量的下方可以看到又包含了一些文件，从字面上的意思猜的是包含的 `配置文件` 以及
`全局过滤文件`，可以看到首先第一个包含的文件为：`(CONFIG_PATH.'db.config.php')` 也就是
`/config/db.config.php` 文件：
    'mysql',
          'dbhost'=>'localhost',
          'dbuser'=>'root',
          'dbpass'=>'root',
          'dbname'=>'phpyun',
          'def'=>'phpyun_',
          'charset'=>'utf8',
          'timezone'=>'PRC',
          'coding'=>'2c8c4d53878158c06481a39e6d352dbc', //生成cookie加密
        );
    ?>
这里存着数据库账号、密码、数据库名、表前缀等信息，可以看下一个文件，包含的是网站的配置信息文件，这里就不贴出来了，因为与今天所讲的漏洞没有太大联系。  
继续往下看 `(CONFIG_PATH.'db.safety.php');` 这个字面意思是可以看的出来为一个全局过滤文件，一般程序的全局过滤文件都是过滤的
`XSS`、`SQL注入`
较为多，全局过滤文件在审计中决定了我们审计到的可疑点是不是可以利用，所以如果我们知道了一个程序存在全局过滤文件的话，我们首先需要尽可能的分析这个文件的过滤流程是怎么样的。  
一般全局过滤文件将传进来的 `POST`、`GET`、`COOKIE`的参数进行过滤。  
`/config/db.safety.php：`  
这里拿 `POST` 为例，因为其它的处理流程基本都是一致。
    foreach($_POST as $id=>$v){
     if($id != 'uimage'){
      $str = html_entity_decode($v,ENT_QUOTES);
      $v = common_htmlspecialchars($id,$v,$str,$config);
      safesql($id,$v,"POST",$config);
      $id = sfkeyword($id,$config);
      $v = sfkeyword($v,$config);
     }
     if(trim($id)){
      $_POST[$id] = $v;
     }
    }
可以看到程序是将传递进来的 `POST` 数据做了一个循环遍历处理，可以将
`$_POST`看成是一个数组，比如`POST`传递进来的数据为：`content=test&user_id=1`，那么最终这段数据在`PHP`中被`$_POST`所接收呈现的样子则如下：
    Array
    (
        [content] => test
        [user_id] => 1
    )
在循环`$_POST`中会将键名每次循环时候赋值给`$id`，将值赋值给`$v`，也就是说在传递的数据为上方所展示的话，那么在这个`foreach`循环中`$id`还有`$v`的值分别如下：  
`$id`
> content  
>  user_id
`$v`
> test  
>  1
因为传递进来的数据只有两组，因此只会循环两次，每一次循环都会判断传递进来的键名是否等于`uimage`，如果不等于的话就会经过过滤处理。这里如果等于那么也仅仅对键名为：`uimage`的值不进行过滤处理，其它的参数依旧进行过滤处理。  
可以看到首先是调用了函数`html_entity_decode`，这个函数作用是将 `HTML` 实体转换为字符并且赋值给了`$str`变量，随即调用了
`common_htmlspecialchars`函数，这个时候我们可以根据这个函数里面看看做了什么处理。
    function common_htmlspecialchars($key,$str,$str2,$config){ 
     if(is_array($str)){
    //该函数先判断传递进来的值是否为数组，如果是数组的话进行一次循环，只有到最后传递进来的不是数组才会进行过滤处理。
      foreach($str as $str_k=>$str_v){
       $str[$str_k] = common_htmlspecialchars($str_k,$str_v,$str2,$config);
      }
     }else{
      $str = preg_replace('/([\x00-\x08\x0b-\x0c\x0e-\x19])/', '', $str);
    /*
    这里可以看到会先判断你传递进来的键是不是在数组里面。
    如果按照传递进来的数据：content=test&user_id=1
    那么content则会进入假区间，user_id进入真区间，因为content是在数组里面而user_id不在数组里。
    */
    if(!in_array($key,array('content','config','group_power','description','body','job_desc','eligible','other','code','intro','doc','traffic','media','packages','booth','participate'))){
      //如果不在数组里面就走进这个区间-真区间
       $str = strip_tags($str);
       $str = gpc2sql($str,$str2);//真区间只做SQL过滤处理。
      }else{
       //如果在数组里面就走进这个区间-假区间
      //假区间会做XSS过滤以及SQL过滤
       if(!isset($_SESSION)){
         session_start();
       }
       if($_SESSION['xsstooken'] != sha1($config['sy_safekey'])){
        $str = RemoveXSS(urldecode($str));
        $str = gpc2sql($str,$str2);  
       }
      }
     }
     return $str;
    }
接下来我们跟进 `RemoveXSS`、`gpc2sql`函数分别是怎么样的一个过滤规则。
    function gpc2sql($str,$str2) {
     if(preg_match("/select|insert|update|delete|load_file|outfile/is", $str)){
      exit(safe_pape());
     }
     if(preg_match("/select|insert|update|delete|load_file|outfile/is", $str2)){
      exit(safe_pape());
     }
     $arr=array("sleep"=>"Ｓleep"," and "=>" an d "," or "=>" Ｏr ","xor"=>"xＯr","%20"=>" ","select"=>"Ｓelect","update"=>"Ｕpdate","count"=>"Ｃount","chr"=>"Ｃhr","truncate"=>"Ｔruncate","union"=>"Ｕnion","delete"=>"Ｄelete","insert"=>"Ｉnsert","\""=>"“","'"=>"“","--"=>"- -",""=>"（",""=>"）","00000000"=>"OOOOOOOO","0x"=>"Ox");
     foreach($arr as $key=>$v){
         $str = preg_replace('/'.$key.'/isU',$v,$str);
     }
     return $str;
    }
首先会正则匹配传递进来的`$str`是否包含这些关键字，如果包含的话就直接终止程序并且将安全提示内容显示出来，然后判断将 `HTML`
实体转换为字符的新变量传递进来的值是否包含这些关键字，如果包含的话就直接终止程序并且将安全提示内容显示出来。  
随即定义了一个新数组，然后对这个数组进行循环遍历，在循环遍历处理过程中调用`preg_replace`函数，执行一个正则表达式的搜索和替换。也就是它会匹配如果你传递进来的字符串存在上面数组的键中，那么就会进行一个替换操作。例如你传递进来的字符串包含：`sleep`，那么最后处理完的字符串就会变成：`Ｓleep`，首字母是转换成了全角。
    function RemoveXSS($val) {
        $val = preg_replace('/([\x00-\x08\x0b-\x0c\x0e-\x19])/', '', $val);
        $search = 'abcdefghijklmnopqrstuvwxyz';
        $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $search .= '1234567890!@#$%^&*()';   
        $search .= '~`";:?+/={}[]-_|\'\\';   
        for ($i = 0; $i  0) {   
                        $pattern .= '(';
                        $pattern .= '(&#[xX]0{0,8}([9ab]);)';   
                        $pattern .= '|';
                        $pattern .= '|(&#0{0,8}([9|10|13]);)';   