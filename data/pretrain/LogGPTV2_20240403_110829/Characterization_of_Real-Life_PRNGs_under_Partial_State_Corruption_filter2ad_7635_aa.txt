# Characterization of Real-Life PRNGs under Partial State Corruption

## Authors
- Mario Cornejo
  - École Normale Supérieure & INRIA, France
  - Email: [PI:EMAIL]
- Sylvain Ruhault
  - École Normale Supérieure & Oppida, France
  - Email: [PI:EMAIL]

## Abstract
Pseudo-random number generators (PRNGs) are widely used as a randomness source in cryptographic applications. It is essential for their security that the internal state, where the entropy is accumulated, remains secret. However, this assumption is unrealistic for PRNGs implemented in software, as the internal state can be partially corrupted through memory corruption bugs such as buffer overflows or fault attacks. The recent Heartbleed bug exemplifies this vulnerability. In this work, we study several widely used PRNGs from different popular providers, including OpenSSL, OpenJDK, Android, IBM, and Bouncy Castle, and characterize how they handle their internal states. We formalize a framework based on the most recent and strongest security model, called robustness of PRNGs, to analyze these PRNGs and their implementations. This framework captures the notion of how much of the internal state must be corrupted to generate a predictable output. Using this framework, we determine the number of bits of the internal state that an attacker needs to corrupt to produce a predictable output. We also show that two of the PRNGs do not require state compromise to generate a non-random output. To the best of our knowledge, we present the first thorough characterization of an IBM implementation of a PRNG.

### Categories and Subject Descriptors
- **D.4.6 [Operating Systems]:** Security and Protection—Cryptographic controls
- **G.3 [Mathematics of Computing]:** Probability and Statistics—Random number generation

### Keywords
- Randomness
- Security models
- OpenSSL
- Android
- Java

### Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Permissions@acm.org.
CCS'14, November 3–7, 2014, Scottsdale, Arizona, USA. 
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11. . . $15.00
http://dx.doi.org/10.1145/2660267.2660377.

## 1. Introduction
In cryptography, randomness plays a crucial role in multiple applications, including key generation, masking, hiding values, nonces, and initialization vectors. The security of these cryptographic algorithms and protocols relies on a source of unbiased and uniformly distributed random bits. The unpredictability of these bits is achieved using a Pseudo-Random Number Generator (PRNG), which accumulates entropy from the environment and produces pseudo-random strings indistinguishable from the uniform distribution to a computationally-bounded adversary. PRNG designers assume that the internal state \( S \) remains secret. However, for software implementations, this may be unrealistic as the internal state can be partially compromised through memory corruption attacks such as buffer overflows or fault attacks. Different memory corruption attacks are presented by Erlingsson et al. in [20] and van der Veen et al. in [31], while faults attacks against cryptographic schemes are presented by Biham and Shamir in [12] and Boneh et al. in [13].

Recently, the Heartbleed bug [9] affected the OpenSSL cryptographic library, allowing an attacker to access the content of the memory of the OpenSSL process run by a server (or a client). Although the attacker can control the size of the compromised memory, they cannot control its location, thus gaining total or partial access to sensitive information, including the internal state of the PRNG.

Currently, numerous PRNG implementations from different providers rely on internal directives and parameters that are poorly documented or even undocumented. In most implementations, a PRNG contains a dedicated internal state \( S \) that is periodically refreshed with the entropy \( I \) collected from its environment (such as network input/output, keyboard presses, processor clock cycles) and then used to compute pseudo-random strings. The randomness collection task is more challenging and time-consuming than the output generation task; hence, PRNGs typically maintain an internal state, which is the most critical part and needs to be kept secure during updates. We provide a formal definition of a PRNG in Section 2.

Using recent theoretical results, we present a new security model and framework in Section 3. We use this framework to analyze widely used PRNGs and identify new potential vulnerabilities due to the way they handle their internal state during updates.

Only a few concrete implementations have been analyzed since Gutmann's work in 1998 [21] and the guidelines for developing PRNGs given by Kelsey et al. in [24]. Recently, Michaelis et al. in [26] described and analyzed several Java implementations, identifying some weaknesses. There has been limited research by theoretical cryptographers in the area of PRNGs. In one of the first works in this area, Desai et al. [15] modeled a PRNG as a pair of algorithms: the Seed Generation algorithm and the Output Generation algorithm. This model assumes the existence of an entropy pool, distinct from the internal state, used to refresh the internal state of the PRNG. Barak and Halevi [11] modeled a PRNG as a pair of algorithms (refresh, next) and defined a new security property called robustness based on Kelsey et al.'s design guidelines. This property assesses the behavior of a PRNG after the compromise of its internal state but fails to capture the small and gradual entropy accumulation present in most real-life implementations. Dodis et al. [16] refined the robustness property to address slow (and potentially malicious) entropy accumulation. This new property, still named robustness, captures the idea of how the entropy of the input data should be accumulated in the internal state after a state compromise. To our knowledge, this last security model is the strongest, considering the most powerful attacker against a PRNG. A recent work by Dodis et al. in [17] extends the robustness model to address the premature next attack, where the internal state has insufficient entropy and an output is generated.

Our work complements the security model of [16] in a different way than [17] does. We propose a new attacker profile that captures real-life situations where partial internal state corruption is possible. We also analyze real-life PRNGs using this security model and demonstrate how it can help identify new vulnerabilities. Specifically, we show that a full internal state corruption is not necessary to compromise a PRNG; instead, a partial one may be sufficient. We characterize how a PRNG can be attacked to produce a predictable output and identify the number of bits of the internal state required to mount an attack against the PRNG.

**Other Randomness Weaknesses:** Several recent attacks occurred due to an insufficient understanding of PRNG implementations. One example is the failure in the Debian Linux distribution, where commented code in the OpenSSL PRNG forced the only source of entropy to be the PID. Gutterman et al. [22] and Dodis et al. [16] analyzed Linux PRNGs dev/random and dev/urandom, presenting attacks related to their internal entropy estimator. Heninger et al. [23] analyzed the behavior of Linux PRNGs, explaining the generation of low-entropy keys at boot time. Dorrendorf et al. [18] analyzed the Windows PRNG CryptGenRandom, showing an attack on the forward security of the PRNG in Windows 2000. Argyros and Kiayias [10] demonstrated practical attacks on web applications exploiting randomness vulnerabilities in PHP applications. More recently, a flaw in the Android PRNG, identified by Kim et al. [25], was actively exploited against Android-based Bitcoin wallets [27]. This illustrates the need for precise evaluation of PRNG implementations based on clear security requirements.

**Our Contributions:** From a theoretical viewpoint, we formally extend the security model of [16] to capture the behavior of a PRNG against an attacker with partial access to its internal state. From a practical side, we characterize and provide a new security analysis of PRNG implementations from widely used providers in real-life applications: OpenSSL, OpenJDK, Android, Bouncy Castle, and IBM. To our knowledge, while intensively used in practice, these PRNGs have not been evaluated with respect to recent security models. Our analysis reveals new vulnerabilities in these PRNGs due to the insecure updating of their internal state during operations. Our results are summarized in Table 1, which provides the size in bits of the internal state of the PRNG and the number of bits (denoted as \( \lambda \)) that an attacker needs to compromise to mount an attack against the PRNG.

| **State Size** | **Instance** | **PRNG** | **OpenSSL** | **Android** | **OpenJDK** | **BouncyCastle** | **IBM** |
|---------------|--------------|----------|-------------|-------------|-------------|------------------|---------|
| **SHA1PRNG**  | 8576         | 3136     | 352         | 5472        | 448         | 680              |         |
| **λ(*)**      | 320          | 0        | 32          | 1056        | 0           | 32               |         |

(*) \( \lambda \) denotes the size of the part of the internal state an attacker needs to corrupt to attack the PRNG.

## 2. Preliminaries
In this section, we describe our notation and definitions, adapted from the work of Dodis et al. [16].

**Notation:**
- We denote the concatenation of bit strings \( S \) and \( I \) as \( [S||I] \).
- The length (in bits) of the bit string \( S \) is denoted as \( |S| \).
- The nth byte of \( S \) is denoted as \( S[n] \), and the extracted bytes of \( S \) from the nth to the mth are denoted as \( S[n, \ldots, m] \) or \( [S]_n^m \).
- Instructions and code references are denoted in verbatim style, such as `SecureRandom`.
- When \( X \) is a discrete distribution or a random variable following this distribution, we denote sampling \( x \) according to \( X \) as \( x \leftarrow X \).
- The min-entropy of a distribution \( X \) is denoted as \( H_\infty(X) \).

**Pseudo-Random Number Generator:**
We recall the definition of a PRNG given in [16]. It uses the following notations: a state \( S \in \{0, 1\}^n \), an input \( I \in \{0, 1\}^p \), and an output \( R \in \{0, 1\}^\ell \).

**Definition 1 (PRNG):** A PRNG is a triple of algorithms \( G = (\text{setup}, \text{refresh}, \text{next}) \) where:
- **setup:** A probabilistic algorithm that outputs some public parameters `seed`.
- **refresh:** A deterministic algorithm that, given `seed`, a state \( S \), and an input \( I \), outputs a new state \( S' = \text{refresh}(S, I, \text{seed}) \in \{0, 1\}^n \).
- **next:** A deterministic algorithm that, given `seed` and a state \( S \), outputs a pair \( (S', R) = \text{next}(S, \text{seed}) \) where \( S' \) is the new state and \( R \) is the output.

The parameter `seed` is public and common to all the above algorithms; for clarity, we write \( S' = \text{refresh}(S, I) \) instead of \( \text{refresh}(S, I; \text{seed}) \) and \( (S', R) = \text{next}(S) \) instead of \( \text{next}(S; \text{seed}) \).

**Distribution Sampler:**
As in [16], we divide the adversary into two parts: the adversary \( A \), whose goal is to distinguish the outputs of the PRNG from random, and the distribution sampler \( D \), which is used by \( A \) to produce (potentially biased) inputs.

**Definition 2 (Distribution Sampler):** A distribution sampler \( D \) is a stateful and probabilistic algorithm which, given the current state \( \sigma \), outputs a tuple \( (\sigma', I, \gamma, z) \) where:
- \( \sigma' \) is the new state for \( D \);
- \( I \in \{0, 1\}^p \) will be the next input for the `refresh` algorithm;
- \( \gamma \) is some entropy estimation of \( I \);
- \( z \) is the possible leakage about \( I \) given to \( A \).

We denote \( q \) as the upper bound on the number of executions of \( D \). The distribution sampler \( D \) is provided by the adversary \( A \) and aims to generate the inputs that will be used by \( G \) to improve the quality of its entropy with the `refresh` algorithm. The adversary must provide the definition of the distribution sampler before knowing the `seed`. The distribution sampler models the potentially adversarial environment of \( G \) with biased inputs. A distribution sampler is called legitimate if the min-entropy of every input \( I_j \) is not smaller than the entropy estimate \( \gamma_j \), even given all the additional information: \( H_\infty(I_j | I_1, \ldots, I_{j-1}, I_{j+1}, \ldots, I_q, z_1, \ldots, z_q, \gamma_1, \ldots, \gamma_q) \geq \gamma_j \), for all \( j \in \{1, \ldots, q\} \) where \( (\sigma_i, I_i, \gamma_i, z_i) = D(\sigma_{i-1}) \) for \( \sigma_0 = 0 \) and \( i \in \{1, \ldots, q\} \).

## 3. PRNG Security
In this section, we present the security model we use to analyze PRNG implementations. First, we analyze existing security models and then identify implementation details that should be considered. Finally, we illustrate our analysis on a concrete example and provide the formalism.

### 3.1 From Theory to Practice
**From Security Models to Implementations:**
We briefly discuss some interesting common points in the security models presented in [15, 11, 16] and their potential use to assess PRNG implementations. Three security models consider an adversarial environment for the PRNG. The security model in [15] does not take into account an attack in which the PRNG is refreshed with adversarial inputs, whereas this situation is considered in [11] and [16]. In [15], the internal state of the PRNG is composed of two parts, named `key` and `initial state`; the generation algorithm takes both as input and updates the `initial state`.

[Continue with the rest of the sections as needed, applying the same level of clarity and structure.]