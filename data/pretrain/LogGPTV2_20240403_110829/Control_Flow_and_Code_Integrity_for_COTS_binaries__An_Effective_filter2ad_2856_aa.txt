title:Control Flow and Code Integrity for COTS binaries: An Effective
Defense Against Real-World ROP Attacks
author:Mingwei Zhang and
R. Sekar
Control Flow and Code Integrity for COTS binaries:
An Eﬀective Defense Against Real-World ROP Attacks
Mingwei Zhang
R. Sekar
∗
Privacy and Intelligence Lab
Intel Labs
PI:EMAIL
Stony Brook University
Stony Brook
PI:EMAIL
ABSTRACT
Despite decades of sustained eﬀort, memory corruption at-
tacks continue to be one of the most serious security threats
faced today. They are highly sought after by attackers,
as they provide ultimate control — the ability to execute
arbitrary low-level code. Attackers have shown time and
again their ability to overcome widely deployed countermea-
sures such as Address Space Layout Randomization (ASLR)
and Data Execution Prevention (DEP) by crafting Return
Oriented Programming (ROP) attacks. Although Turing-
complete ROP attacks have been demonstrated in research
papers, real-world ROP payloads have had a more limited
objective: that of disabling DEP so that injected native code
attacks can be carried out.
In this paper, we provide a
systematic defense, called Control Flow and Code Integrity
(CFCI), that makes injected native code attacks impossible.
CFCI achieves this without sacriﬁcing compatibility with
existing software, the need to replace system programs such
as the dynamic loader, and without signiﬁcant performance
penalty. We will release CFCI as open-source software by
the time of this conference.
INTRODUCTION
1.
Despite decades of sustained eﬀort, memory corruption at-
tacks continue to be one of the most serious security threats
faced today. Memory corruptions are sought after by attack-
ers as they provide ultimate control — the ability to execute
low-level code of attacker’s choice. This factor makes them
popular in targeted as well as indiscriminate attack cam-
paigns.
The popularity of data execution prevention (DEP) stems
from its ability to block (the highly sought-after) arbitrary
code execution capability. This is one of the reasons why
it became the most widely deployed security feature despite
its well-known weakness against code reuse attacks such as
return-to-libc [42]. Subsequent to its deployment, attack-
ers have become increasingly skilled at attacks that reuse
existing code in order to bypass DEP. Introduction of Re-
turn Oriented Programming (ROP) [51] vastly expanded the
scope of code-reuse attacks. By crafting small snippets of
existing code (called “gadgets”), attackers could perform ar-
∗
†
0831298 and CNS-1319137) and ONR (N00014-15-1-2378).
This work was completed when he was at Stony Brook University
This work was supported in part by grants from NSF (CNS-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07 - 11, 2015, Los Angeles, CA, USA
c(cid:2) 2015 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818016
bitrary (i.e., Turing-complete) computation. While Turing
completeness is an attractive property that is often the topic
of research papers, real-world ROP attacks have had a more
limited objective: stringing together a small set of gadgets
to bypass DEP.
Control ﬂow integrity (CFI) [16] is a well-known counter-
measure against control-ﬂow hijack attacks. Such attacks
typically rely on memory corruption vulnerabilities to over-
write code pointers, e.g., return addresses on the stack, or
variables containing function pointers. CFI thwarts most
such attacks by constraining the targets of indirect control-
ﬂow transfers to be consistent with a statically computed
control-ﬂow graph. Many research eﬀorts have demonstrated
that CFI can be implemented within a compiler [46, 44] or
on binaries [66, 63], and moreover, can be applied to large
and complex software packages such as web browsers [57].
ROP attacks, as originally proposed, require repeated sub-
version of control-ﬂows, and moreover, use indirect branches
that target the midst of instructions. As a result, they can
be stopped by CFI. However, recent research eﬀorts have
shown that stealthy ROP attacks can be devised that use
only those targets that are permitted by CFI [25, 32]. These
attacks rely on the limited precision of practical CFI tech-
niques, e.g., the ability of returns to target any instruction
that follows a call instruction. In addition, researchers have
developed many evasive ROP attacks [31, 22] that thwart
other types of ROP defenses as well.
A natural approach for defeating these stealthy ROP at-
tacks is ﬁner-granularity CFI. Unfortunately, increased pre-
cision typically leads to false positives, especially on com-
plex applications — false positive mitigation was the rea-
son why coarse-grained CFI approaches were proposed in
the ﬁrst place. Moreover, precise static analyses required
for ﬁner granularity CFI are diﬃcult to achieve on binaries,
thus precluding its application to low-level code written in
assembly and third-party libraries. Finally, ﬁne granularity
CFI won’t stop all ROP because of precision loss inherent
in CFI approaches, either due to static analysis [16], or due
to the need to support dynamic loading [66, 63, 46].
The above discussion leads to the conclusion that while
measures can be developed to make ROP harder, they are
unlikely to be eliminated as a means for code-reuse attacks.
We therefore propose a hybrid approach that not only tar-
gets the means, but also the eﬀects targeted by real-world
ROP. The one eﬀect targeted by all real-world ROP attacks
that we are aware of, as well as the stealthy attacks pro-
posed against CFI techniques, is that of executing injected
native code.
In other words, these are all code-reuse-to-
code-injection (CRCI) attacks. This is because real-world
ROPs have to overcome a range of diﬃculties:
• Limited variety of gadgets. Due to defenses such as ALSR,
frequent software updates, customized compiler optimiza-
tions, version changes and others, some gadgets are elim-
91
inated, while the location of others is unknown, and re-
quires signiﬁcant eﬀort to locate. This limits the range of
attacks possible.
• Payload sizes are typically limited. The maximum size of
ROP payload is limited by the speciﬁcs of exploit con-
text. An analysis of the popular Metasploit framework
demonstrates this limit: the average maximum payload
across 946 vulnerabilities was only 1332 bytes [29]. This
constrains the length of ROP chain.
As such, it becomes impractical to achieve the entire at-
tacker’s objective in the code-reuse phase of the attack. In-
. Based on this
stead, attackers use ROP to disable DEP
observation, we develop Control Flow and Code Integrity
(CFCI), an eﬀective countermeasure to CRCI attacks.
1.1 CFCI Property and Approach
1
The DEP mechanism provided on today’s platforms is tar-
geted at native code injection attacks, but is secure only
against a weak attacker model. In particular, it is ineﬀective
against attackers that can carry out nontrivial code reuse
attacks. We therefore develop a stronger defense that pre-
vents escalation of attacks from code-reuse to code-injection
(CRCI). Speciﬁcally, our approach enforces the following:
• A program can load only a speciﬁed set of executable ﬁles.
• Only legitimate instructions in these ﬁles can ever be ex-
ecuted.
• No change can be made to any instruction during runtime.
The ﬁrst property is ensured by enforcing a code loading
policy that prevents attackers from loading/launching arbi-
trary code. The monitor allows an executable program to
have ﬂexible policies to support program debugging, test-
ing and running in special contexts. The second property
is ensured by a non-bypassable state model that governs
module loading logic. This state model is protected by the
underlying CFI and other techniques, and defeats low level
memory attacks that try to subvert code-loading logic. The
last property is achieved using code instrumentation that
handles legitimate code modiﬁcations requests without re-
ally modifying the executable code pages.
Together, these properties make native code injection im-
possible. We note that techniques such as write-protecting
binary ﬁles (or code-signing) serve to preserve the integrity
of code on the disk, but are not intended to protect code
integrity in main memory. Our approach thus provides an
important missing piece to ensure end-to-end code integrity.
We call our approach Control Flow and Code Integrity
(CFCI), highlighting the fact that it ensures the integrity of
all code, together with control-ﬂows within the code. This
contrasts with existing CFI techniques that do not consider
most attacks on code integrity:
• CRCI attacks can modify memory protection to either
overwrite existing code or make non-code (i.e., data pages
containing attacker provide payload) executable.
• CRCI attacks can load malicious or vulnerable libraries.
• Loader subversion attacks can load malicious code by ex-
ploiting vulnerabilities in the dynamic loader.
A more complete list of possible attacks thwarted by CFCI
appears in Section 2.
While CFCI aims to ensure code integrity, control ﬂow
1Such an ROP payload typically needs to make a system call to
add execute permission to a data page.
integrity as an underlying feature ensures that the policies
enforced by CFCI can’t be bypassed. Code integrity prop-
erty, in turn, protects control-ﬂow integrity by preventing
CFI checks from being bypassed by newly introduced native
code.
1.2 Contributions
Our system achieves code as well as control-ﬂow integrity
without restricting applications, or requiring the replace-
ment of system software such as the system loader or the
standard libraries. Speciﬁcally, our contributions are:
• An eﬀective code integrity primitive for COTS binaries
that defeats real-world ROP attacks by eliminating the
possibility of DEP bypass in general. It is compatible with
complex COTS binaries, and does not requires changes
to system software such as the loader or compilers.
It
works with statically-linked as well as dynamically-linked
binaries. Finally, it can defeat powerful adversaries that
have compromised multiple execution threads.
• A secure library loading/unloading state model that en-
sures that every code segment is correctly identiﬁed and
mapped for execution, and that these code segments are
never writable. An important aspect of our design is the
simplicity of this model, which increases conﬁdence in its
correct enforcement of policies for secure loading. More-
over, our approach does not require either trusting or mod-
ifying the dynamic loader.
• A library loading policy that ensures that all loaded mod-
ules have previously been transformed to enforce CFI.
Moreover, library search paths and/or individual libraries
can be limited for each application to prevent loading of
unauthorized libraries.
• Low performance overhead. Our approach adds a small
overhead over the base platform (PSI [64]) for application
start-up, and very low overheads at runtime.
• COTS binary friendly SFI protection. Although there
have been several x86 implementations of SFI [30, 60, 37,
62], they all required some level of compiler support. To
our knowledge, the approach presented in this paper has
the best compatibility for existing COTS software.
2. THREAT MODEL AND ATTACKS
Our threat model considers remote attackers that are able
to interact with network-facing applications. In particular,
attackers in our threat model can:
• defeat ASLR using information leakage (or other) attacks,
• hijack more than one thread in the victim process using
code reuse attacks, and
• use these attacks to either (a) read/write/execute arbi-
trary memory of the victim process, subject to page pro-
tection settings, or (b) load new code, e.g., malicious or
vulnerable libraries.
Below, we list the possible attacks that may be carried out
by such attackers. Most of these attacks rely on data corrup-
tion and/or code-reuse attacks that remain possible despite
protections such as CFI, ASLR and DEP.
2.1 Direct Attacks
In this case, the exploit code directly invokes the neces-
sary system calls such as mmap to map new code into mem-
ory, mprotect to change execute permissions and exec to
launch executables. Since most operating systems do not
92
block these attacks, many current exploits rely on this ap-
proach.
2.2 Loader Subversion Attacks
Successful CRCI attacks can be launched even if counter-
measures are deployed against direct attacks: even if privi-
leges relating to code loading are taken away from the ap-
plication code, the loader code that is part of the process
needs to be able to exercise these privileges. Attackers can
thus gain these privileges by subverting the loader.
2.2.1 Code-reuse attacks
These are the simplest forms of loader subversion, invok-
ing functions within the loader for mapping memory pages
for execution, or making executable memory writable.
Loading malicious libraries.
If an attacker has previ-
ously stored a malicious library on the victim system, then
she can use a code reuse attack to load this library.
There is a common misconception that statically linked bi-
naries are immune to such attacks. In reality, even statically
linked code on Linux needs some dynamic loading capabili-
ties to perform start-up initialization such as TLS (thread-
2
. Hence
local storage) setup, stack cookies, and parsing vDSO