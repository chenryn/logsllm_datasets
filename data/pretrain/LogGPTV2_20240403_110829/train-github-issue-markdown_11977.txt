While using Typescript I've encountered a problem with packaging of an
application: it is splitted into separate js files and can't be bundled into
one file because of duplication of variables and file-related modules system
used by SystemJS. I've tried AMD and CommonJS, both with the same result. For
example, there will be an error if we have some main application file and
importing another file from a folder "services", just like this:
    import {NodeXHRImpl} from 'services/NodeXHRImpl';
I've also tried to wrap my NodeXHRImpl class into a module named "services",
and import it with a "require" keyword:
    import NodeXHRImpl = require('services/NodeXHRImpl')
after that got an error sounds like "object is not a function" when tried to
instantiate an imported class. And another thing: the compiler inserts the
Reflect.decorate function that is duplicated among all compiled files and it
seem like not a good option for production.  
It will be a very handy to have some minimal application demonstrating the
modularity and, what is most important, it should be production-ready, i.e.
possible to be bundled into a single file(or a bunch of files separated by
functionality, for example).