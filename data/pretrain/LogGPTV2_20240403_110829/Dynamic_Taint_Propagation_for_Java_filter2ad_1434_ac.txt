We  wrote  a  micro  benchmark  to  measure  the  overhead  of 
instrumenting the java.lang.String class to handle tainting 
information.  The  benchmark  consisted  of  a  number  of  string 
operations repeated in a loop, and was run with strings of length 
varying  from  1  to  10000.  It  was  run  on  a  PentiumM  1.5  GhZ 
laptop with 512 MB of RAM, running Windows XP SP2, using 
version  1.5  of  the  Java  runtime.  Our  measurement  showed  no 
noticeable difference in execution time of the benchmark between 
using the original and instrumented String class. 
To  test  our  taint  propagation  framework,  we  ran  it  with  the 
WebGoat [13] set of web applications. WebGoat is a collection of 
applications  designed  to  teach  secure  programming  for  web 
applications,  and  has  a  range  of  vulnerabilities  in  it  by  design. 
One application demonstrates a command injection attack, where 
user-supplied command can be executed on the host by tampering 
with  HTTP  parameters.  Another  demonstrates  an  SQL  injection 
attack,  where  supplying  a  malicious  string  in  an  HTML  form 
results in a query being executed on the host that reveals secret 
data.  
We specified a list of sources and sinks specific to the J2EE 
framework,  and  ran  WebGoat  under  our  taint  propagation 
framework. Our implementation flagged a taint error for both the 
applications  mentioned  above,  and  prevented  the  attack  from 
being successfully carried out. 
5. 
DISCUSSION AND FUTURE WORK 
This  work  grew  out  of  our  broader  attempt  to  bring  strong 
mandatory  access  controls  (MAC)  to  the  Java  Virtual  Machine 
[12]. Our objective in that work was to explore how MAC can be 
integrated into a JVM, and at what granularity it is meaningful to 
do so, with the aim of providing greater assurance for applications 
that  require  strong  data  partitions,  and  that  need  to  track  the 
permissions and ownership of data throughout the lifetime of the 
program.  Current  access  control  mechanisms  in  Java  can  only 
control  initial  access  to  a  resource,  but  fail  to  track  data 
throughout execution, or limit how they are used once access was 
granted. We implemented a prototype JVM that performed MAC 
at  the  granularity  of  objects.  Every  object  had  a  MAC  tag 
associated with it. Based on the policy in place, this tag regulated 
how  and  if  other  objects  were  allowed  to  access  it.  Taint 
propagation  can  be  seen  as  a  special  case  of  using  MAC  in  the 
JVM.  Taint  tags  associated  with  strings  are  in  effect  a  kind  of 
access control tag. 
There are a number of avenues for future work: 
Currently  we  have  only  tested  our  implementation  with  the 
WebGoat  [13]  sample  applications.  This  is  not  a  very  realistic 
benchmark,  as 
it  was  designed  to  demonstrate  how  web 
applications  can  be  attacked,  and  has  vulnerabilities  by  design. 
We  are  currently  in  the  process  of  finding  other  realistic  web 
applications,  and  would  like  to  test  our  taint  propagation 
framework with them. 
Another  direction  for  future  work  is  to  use  our  tool  for 
logging  of  attacks  and  penetration  testing.  For  this,  it  would  be 
useful  to  have  additional  information  carried  along  with  tainted 
strings, such as which source method it came from, and what path 
(in terms of method calls) it followed from source to sink. 
We  would  also  like  to  explore  a  declarative  approach  to 
specifying valid inputs. Valid inputs for the large majority of web 
applications follow well-known rules, such as an expected format 
and the absence of certain special characters that could be used in 
an  attack.  In  spite  of  this,  every  application  developer  rewrites 
these from scratch for a given application, often leaving holes and 
bugs.  If  these  validation  rules  could  be  attached  to  sources  and 
sinks  and  executed  at  runtime,  they  would  form  an  additional 
layer of security, independent of and in addition to the checks the 
application already has. We do not expect this additional checking 
to  impose  a  significant  performance  overhead  as  most  web 
applications  are  I/O  bound,  and  CPU  time  is  usually  not  a 
bottleneck. 
Extending  this  approach  even  further,  we  could  attach  to 
sources and sinks an operation that established an invariant. This 
may require source code modification, but only of the library, not 
the application. It may even be possible to do this transparently at 
the bytecode level. The application will still be unaware of this, 
and not need to be modified. 
Currently we have only two levels of tainting associated with 
a  string  –  it  is  either  tainted  or  not.  However,  a  large  web 
application  deals  with  a  number  of  data  sources  other  than  just 
users, such as other web applications, off-site databases etc. Input 
from  these  sources  may  not  be  untrusted  to  the  same  extent  as 
input from a remote user on a client. Extending our work on MAC 
at  the  object  level,  we  would  like  to  explore  if  having  a  finer 
granularity  of  taint  levels  can  improve  the  security  of  web 
applications.  With  multiple  taint  levels,  we  could  also  enforce 
policies  and  invariants  about  how  and  when  data  from  various 
taint  levels  are  allowed  to  mix,  and  what  level  of  tainting  the 
resulting data is marked with. This might be particularly useful in 
light  of  recent  regulations  [14]  that  mandate  how  information 
from  various  departments  within  an  organization,  and  among 
organizations, is allowed to mix. 
6. 
RELATED WORK 
The original inspiration for this work is Perl’s taint mode [4]. 
When  in  taint  mode,  the  Perl  runtime  explicitly  marks  data 
originating from outside a program as tainted. This includes user 
input,  input  from  environment  variables  and  and  file  input. 
Tainted data is then prevented from being used as arguments for 
certain sensitive functions that affect the local system – such as 
running  local  commands,  creating  and  writing  files  and  sending 
data  over  the  network.  Doing  so  results  in  a  runtime  exception 
and termination of the program. Perl also provides a mechanism 
to untaint tainted data. Results of a regular expression match are 
always  considered  clean.  Hence,  if  a  tainted  string  is  matched 
against  a  regular  expression,  the  resulting  match  is  clean.  The 
programmer is trusted to have adquately checked a tainted string 
if she wrote a regular expression to filter it. Thus, taint mode is 
not a 100% guarantee for catching taint bugs. Its goal is to catch 
unintentional  programmer  errors,  such  as  passing  a  user-input 
string directly to a shell command. 
Ruby  [7]  has finer-grained taint  levels than Perl. It has safe 
levels  ranging  from  0  to  4,  each  successively  more  stringent. 
Level 0 has no checks on tainted data, whereas level 4 partitions 
program execution into two sandboxes, one with tainted objects, 
and one without. Tainting is done at the level of objects, not just 
strings. Any object that had tainted data in it at any point during 
execution is marked tainted. 
Our  work  essentially  brings  the  idea  of  taint  propagation  to 
the Java runtime. The important difference is that our approach is 
more flexible and extensible because the list of sources and sinks 
is not hard-coded into the runtime, but separately specified. This 
allows our mechanism to be used for taint checking applications 
that use various libraries, after having specified sources and sinks 
for each library once. Moreover, we can run different instances of 
the  same  application,  each  with  different  source  and  sink 
specifications.  
Nguyen-Tuong et al [2] have implemented taint propagation 
for  the  PHP  interpreter.  PHP  is  a  widely  used  web  scripting 
language.  Their  technique  mostly  mirrors  Perl’s.  However,  their 
technique  for  sanitizing  data  is  different.  Rather  than  have  an 
operation that untaints strings, they never untaint strings, and put 
strings  through  their  own  sanitizing  functions  before  they  are 
passed as arguments to sensitive functions. Once again, the list of 
these sensitive functions is not separately specified, but built into 
the PHP interpreter. 
A great deal of work has been done on static approaches to 
analyzing code security [8], and the taint problem in particular [1, 
9, 10].  
Taint propagation is an information flow problem[17]. Static 
checking  approaches  such  as  Myer’s  JFlow  system  [16]  type-
check  source  code  for  secure  information  flow.  However,  the 
programmer  needs  to  insert  source  code  annotations  explicitly 
labeling sensitive data. 
The  WebSSARI  [15]  project  analyzes  information  flow  in 
PHP  applications  statically.  It 
in 
potentially  insecure  regions  of  code.  It  differs  from  approaches 
such as JFlow in that it does not require source annotations. 
inserts  runtime  guards 
Static analysis has also been applied to C programs [9, 10]. 
Evans’  Split  static  analyzer  [10]  takes  as  input  C  source  code 
annotated  with  “tainted”  and  “untainted”  annotations.  This  is 
accompanied by rules for how objects can be converted from one 
to  the  other,  and  which  functions  expect  which  kinds  of 
arguments.  Shankar  et  al  [9]  use  a  similar  approach  in which C 
source code is annotated, but they use type-qualifiers instead. 
The  major  disadvantage  of  all  these  approaches  is  that  they 
require source code, and while useful at the time of development 
(even  though  they  might  report  a  number  of  false  positives 
requiring  manual  examination  to  clear),  they  cannot  be  applied 
transparently  to  already  deployed  applications  that  are  only 
available as binaries.   
7. 
CONCLUSIONS 
The most prevalent attacks on web applications – command 
injection,  parameter  tampering,  cookie  poisoning,  cross-site 
scripting – all have the same root cause: improperly validated user 
input.  Static  approaches  for  detecting  the  presence  of  these 
vulnerabilities  require  the  presence  of  source  code.  But  this  is 
unrealistic for deployed applications that still have bugs in them. 
In  this  paper,  we  have  proposed  a  framework  for  tagging, 
tracking  and  detecting  the  improper use of improperly validated 
user  input  (also  called  tainted  input)  in  web  applications.  We 
mark data originating from the client as tainted, and this attribute 
is  propagated  throughout  the  execution  of  the  program.  Data 
derived  from  tainted  data  is  also  marked  tainted.  Finally,  we 
prevent  tainted  data  from  being  used  improperly  in  security-
sensitive contexts. 
Our implementation runs on the Java Virtual Machine, and is 
able to prevent the improper use of tainted data. We associate a 
tainted flag with strings. Data originating from methods that get 
user input, called sources, is marked tainted. Strings derived from 
tainted  strings  are  also  marked  tainted.  Certain  string  checking 
operations mark data untainted. Here we trust the programmer to 
have  made  a  meaningful  check.  Finally,  methods  that  consume 
input or execute some form of code (scripts, SQL), called sinks, 
are prevented from taking in tainted arguments. 
Our technique applies to Java classfiles and does not require 
source  code.  Hence  it  can  be  transparently  applied  to  deployed 
web applications and increase their security in the face of attacks. 
[9]  U.  Shankar,  K.  Talwar,  J.  S.  Foster  and  D.  Wagner. 
Detecting  Format  String  Vulnerabilities  with  Type 
Qualifiers. USENIX Security Symposium. 2001. 
[10]  D.  Evans  and  D.  Larochelle.  Improving  Security  using 
Extensible  Lightweight  Static  Analysis.  IEEE  Software. 
Jan/Feb 2002. 
[11]  CERT  Advisory  CA-2000-02.  Malicious  HTML 
embedded in Client Web Requests. February 2000. 
tags 
[12]  V.  Haldar,  D.  Chandra  and  M.  Franz.  Practical,  Dynamic 
Information  Flow  for  Virtual  Machines.  Technical  Report 
05-02,  Departmnet  of  Information  and  Computer  Science, 
University of California, Irvine. February 2005. 
[13]  Open  Web  Application  Security  Project.  The  WebGoat 
Project. http://www.owasp.org/software/webgoat.html 
[14]  K. Beaver. Achieving Sarbanes-Oxley Compliance for Web 
testing. 
Applications 
http://www.spidynamics.com/support/whitepapers/WI_SO
Xwhitepaper.pdf 
through 
security 
[15]  Yao-Wen  Huang,  Fang  Yu,  Christian  Hang,  Chung-Hung 
Tsai,  Der-Tsai  Lee,  Sy-Yen  Kuo.  Securing  Web 
Application  Code  by  Static  Analysis  and  Runtime 
Protection.  Proceedings  of  the  Thirteenth  International 
World Wide Web Conference (WWW2004). May 2004. 
[16]  A. C.  Myers.  JFlow:  Practical  mostly-static  information 
flow control. In Symposium on Principles of Programming 
Languages, pages 228–241, 1999. 
[17]  A. Sabelfeld  and  A. Myers.  Language-based  information-
flow security. 21(1), 2003. 
ACKNOWLEDGEMENTS 
8. 
This material is based on research sponsored by the Air Force 
Research Laboratory under agreement number FA8750-05-2-
0216. The U.S. Government is authorized to reproduce and dis-
tribute reprints for Governmental purposes notwithstanding any 
copyright notation thereon. 
9. 
[1]  V. Benjamin Livshits and Monica S. Lam. Finding Security 
Vulnerabilities in Java Applications with Static Analysis. In 
USENIX Technology Symposium, 2005. 
REFERENCES 
[2]  Anh  Nguyen-Tuong,  Salvatore  Guarnieri,  Doug  Green, 
Jeffrey  Shirley,  David  Evans.  Automatically  Hardening 
Web Applications using Precise Tainting. In IFIP Security 
Conference, May 2005. 
[3]  Open  Web  Application  Security  Project.  Top  Ten  Most 
Critical Web Application Security Vulnerabilities. January 
2004. http://www.owasp.org/documentation/topten.html 
[4]  Larry Wall,  Tom Christiansen,  Jon Orwant.  Programming 
Perl, 3rd ed. O’Reilly. 
[5]  Moran Surf and Amichai Shulman. How safe is it out there? 
Imperva. 
2004. 
http://www.imperva.com/application_defense_center/paper
s/how_safe_is_it.html 
June 
[6]  Shigeru Chiba. Javassist: Java Bytecode Engineering Made 
Simple. Java Developer's Journal, vol. 9, issue 1, January 8, 
2004 
[7]  Dave Thomas, Chad Fowler and Andy Hunt.  Programming 
Ruby: The Pragmatic Programmer’s Guide, 2nd ed.  
[8]  B.  Chess  and  G.  McGraw.  Static  Analysis  for  Security. 
IEEE Security and Privacy, 2(6), 2004.