### Micro Benchmark for Tainting Overhead

We developed a micro benchmark to measure the overhead of instrumenting the `java.lang.String` class to handle tainting information. The benchmark consisted of a series of string operations repeated in a loop, and was executed with strings of varying lengths, from 1 to 10,000 characters. The tests were conducted on a Pentium M 1.5 GHz laptop with 512 MB of RAM, running Windows XP SP2, using Java Runtime Environment (JRE) version 1.5. Our measurements showed no significant difference in execution time between the original and the instrumented `String` class.

### Testing the Taint Propagation Framework

To evaluate our taint propagation framework, we used the WebGoat [13] suite of web applications. WebGoat is a collection of applications designed to teach secure programming practices for web applications and includes a range of intentionally introduced vulnerabilities. One application demonstrates a command injection attack, where user-supplied commands can be executed on the host by manipulating HTTP parameters. Another application showcases an SQL injection attack, where a malicious string entered in an HTML form results in a query being executed that reveals sensitive data.

We specified a list of sources and sinks specific to the J2EE framework and ran WebGoat under our taint propagation framework. Our implementation successfully flagged taint errors for both the command injection and SQL injection attacks, preventing them from being carried out.

### Discussion and Future Work

This work is part of our broader effort to integrate strong mandatory access controls (MAC) into the Java Virtual Machine (JVM) [12]. Our objective is to explore how MAC can be integrated into the JVM and at what granularity it is meaningful to do so, with the aim of providing greater assurance for applications that require strict data partitioning and need to track data permissions and ownership throughout the program's lifetime. Current access control mechanisms in Java only control initial access to resources but fail to track data throughout execution or limit how they are used once access is granted. We implemented a prototype JVM that performs MAC at the object level, with each object having a MAC tag that regulates access based on the policy in place. Taint propagation can be seen as a special case of using MAC in the JVM, where taint tags associated with strings act as a form of access control.

#### Future Directions

1. **Realistic Benchmarks**: We have only tested our implementation with the WebGoat [13] sample applications, which are not realistic benchmarks as they are designed to demonstrate vulnerabilities. We are currently in the process of finding more realistic web applications to test our taint propagation framework.
   
2. **Logging and Penetration Testing**: Another direction for future work is to use our tool for logging attacks and penetration testing. For this, it would be useful to carry additional information along with tainted strings, such as the source method and the path (in terms of method calls) from source to sink.

3. **Declarative Input Validation**: We would like to explore a declarative approach to specifying valid inputs. Most web applications follow well-known rules for valid inputs, such as expected formats and the absence of certain special characters. If these validation rules could be attached to sources and sinks and executed at runtime, they would form an additional layer of security. We do not expect this to impose a significant performance overhead as most web applications are I/O bound, and CPU time is usually not a bottleneck.

4. **Invariants and Source Code Modification**: Extending this approach further, we could attach operations to sources and sinks that establish invariants. This may require source code modification, but only of the library, not the application. It may even be possible to do this transparently at the bytecode level, without modifying the application.

5. **Fine-Grained Taint Levels**: Currently, we have only two levels of tainting for a string: tainted or not. However, large web applications deal with multiple data sources, such as other web applications and off-site databases. Input from these sources may not be untrusted to the same extent as input from a remote user. Extending our work on MAC at the object level, we would like to explore if having finer-grained taint levels can improve the security of web applications. With multiple taint levels, we could enforce policies and invariants about how and when data from various taint levels are allowed to mix, and what level of tainting the resulting data is marked with. This might be particularly useful in light of recent regulations [14] that mandate how information from various departments within an organization and among organizations is allowed to mix.

### Related Work

The original inspiration for this work is Perl’s taint mode [4]. In taint mode, the Perl runtime explicitly marks data originating from outside the program as tainted, including user input, environment variables, and file input. Tainted data is prevented from being used as arguments for certain sensitive functions, such as running local commands, creating and writing files, and sending data over the network. Perl also provides a mechanism to untaint tainted data, but this relies on the programmer to adequately check the tainted string.

Ruby [7] has finer-grained taint levels than Perl, with safe levels ranging from 0 to 4, each successively more stringent. Level 0 has no checks on tainted data, while level 4 partitions program execution into two sandboxes, one with tainted objects and one without. Tainting is done at the object level, not just strings.

Our work brings the idea of taint propagation to the Java runtime. The key difference is that our approach is more flexible and extensible because the list of sources and sinks is not hard-coded into the runtime but separately specified. This allows our mechanism to be used for taint checking applications that use various libraries, after specifying sources and sinks for each library once. Moreover, we can run different instances of the same application, each with different source and sink specifications.

Nguyen-Tuong et al. [2] have implemented taint propagation for the PHP interpreter. Their technique mirrors Perl’s, but their method for sanitizing data is different. They never untaint strings and instead put strings through their own sanitizing functions before passing them as arguments to sensitive functions. The list of sensitive functions is built into the PHP interpreter.

A significant amount of work has been done on static approaches to analyzing code security [8], and the taint problem in particular [1, 9, 10]. Taint propagation is an information flow problem [17]. Static checking approaches, such as Myer’s JFlow system [16], type-check source code for secure information flow, but require explicit source code annotations.

The WebSSARI [15] project analyzes information flow in PHP applications statically and inserts runtime guards in potentially insecure regions of code. It differs from approaches like JFlow in that it does not require source annotations.

Static analysis has also been applied to C programs [9, 10]. Evans’ Split static analyzer [10] takes C source code annotated with “tainted” and “untainted” labels, accompanied by rules for converting objects and specifying function arguments. Shankar et al. [9] use a similar approach but with type-qualifiers instead.

The major disadvantage of these approaches is that they require source code, making them impractical for already deployed applications available only as binaries.

### Conclusions

The most prevalent attacks on web applications, such as command injection, parameter tampering, cookie poisoning, and cross-site scripting, all stem from improperly validated user input. Static approaches for detecting these vulnerabilities require the presence of source code, which is unrealistic for deployed applications. In this paper, we propose a framework for tagging, tracking, and detecting the improper use of tainted input in web applications. We mark data originating from the client as tainted, and this attribute is propagated throughout the program. Data derived from tainted data is also marked tainted, and we prevent tainted data from being used in security-sensitive contexts.

Our implementation runs on the Java Virtual Machine and prevents the improper use of tainted data. We associate a tainted flag with strings, marking data from methods that get user input (sources) as tainted. Strings derived from tainted strings are also marked tainted, and certain string checking operations can mark data as untainted. Finally, methods that consume input or execute code (sinks) are prevented from taking tainted arguments.

Our technique applies to Java classfiles and does not require source code, allowing it to be transparently applied to deployed web applications to enhance their security against attacks.

### Acknowledgements

This material is based on research sponsored by the Air Force Research Laboratory under agreement number FA8750-05-2-0216. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon.

### References

[1] V. Benjamin Livshits and Monica S. Lam. Finding Security Vulnerabilities in Java Applications with Static Analysis. In USENIX Technology Symposium, 2005.

[2] Anh Nguyen-Tuong, Salvatore Guarnieri, Doug Green, Jeffrey Shirley, David Evans. Automatically Hardening Web Applications using Precise Tainting. In IFIP Security Conference, May 2005.

[3] Open Web Application Security Project. Top Ten Most Critical Web Application Security Vulnerabilities. January 2004. http://www.owasp.org/documentation/topten.html

[4] Larry Wall, Tom Christiansen, Jon Orwant. Programming Perl, 3rd ed. O’Reilly.

[5] Moran Surf and Amichai Shulman. How safe is it out there? Imperva. June 2004. http://www.imperva.com/application_defense_center/papers/how_safe_is_it.html

[6] Shigeru Chiba. Javassist: Java Bytecode Engineering Made Simple. Java Developer's Journal, vol. 9, issue 1, January 8, 2004.

[7] Dave Thomas, Chad Fowler, and Andy Hunt. Programming Ruby: The Pragmatic Programmer’s Guide, 2nd ed.

[8] B. Chess and G. McGraw. Static Analysis for Security. IEEE Security and Privacy, 2(6), 2004.

[9] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting Format String Vulnerabilities with Type Qualifiers. USENIX Security Symposium. 2001.

[10] D. Evans and D. Larochelle. Improving Security using Extensible Lightweight Static Analysis. IEEE Software. Jan/Feb 2002.

[11] CERT Advisory CA-2000-02. Malicious HTML embedded in Client Web Requests. February 2000.

[12] V. Haldar, D. Chandra, and M. Franz. Practical, Dynamic Information Flow for Virtual Machines. Technical Report 05-02, Department of Information and Computer Science, University of California, Irvine. February 2005.

[13] Open Web Application Security Project. The WebGoat Project. http://www.owasp.org/software/webgoat.html

[14] K. Beaver. Achieving Sarbanes-Oxley Compliance for Web Applications through security testing. http://www.spidynamics.com/support/whitepapers/WI_SOXwhitepaper.pdf

[15] Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai, Der-Tsai Lee, Sy-Yen Kuo. Securing Web Application Code by Static Analysis and Runtime Protection. Proceedings of the Thirteenth International World Wide Web Conference (WWW2004). May 2004.

[16] A. C. Myers. JFlow: Practical mostly-static information flow control. In Symposium on Principles of Programming Languages, pages 228–241, 1999.

[17] A. Sabelfeld and A. Myers. Language-based information-flow security. 21(1), 2003.