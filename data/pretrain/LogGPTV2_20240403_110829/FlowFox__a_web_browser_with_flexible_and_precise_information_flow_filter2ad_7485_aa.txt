# FlowFox: A Web Browser with Flexible and Precise Information Flow Control

**Authors:**
- Willem De Groef
- Dominique Devriese
- Nick Nikiforakis
- Frank Piessens

**Affiliation:**
IBBT–DistriNet, KU Leuven
Celestijnenlaan 200a, 3001 Heverlee, Belgium
Email: [Contact Email]

## Abstract

We introduce FlowFox, the first fully functional web browser that implements a precise and general information flow control mechanism for web scripts using secure multi-execution. FlowFox subsumes many ad-hoc script containment countermeasures developed in recent years and is compatible with the current web, as demonstrated by its performance on the Alexa top-500 websites. The performance and memory cost of FlowFox is significant (approximately 20% on macro benchmarks for a simple two-level policy), but not prohibitive. Our prototype implementation shows that information flow enforcement based on secure multi-execution can be implemented in full-scale browsers, supporting powerful and precise policies that refine the same-origin-policy while remaining compatible with existing websites.

**Categories and Subject Descriptors:**
- H.4.3 [Information Systems Applications]: Communications Applications—Information Browsers
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms:**
- Security, Design, Documentation, Verification

**Keywords:**
- Web Security, Information Flow, Web Browser Architecture

## 1. Introduction

A web browser handles content from various origins, and not all of these origins are equally trustworthy. This content can include markup and executable scripts that interact with their environment through powerful APIs. These APIs provide communication to remote servers, interaction with other pages in the browser, and access to user, browser, and application information, such as geographical location, clipboard content, browser version, and page structure. With the advent of HTML5, the range of APIs available to scripts has expanded significantly.

Scripts can be used to attack the confidentiality or integrity of this information. They can leak session identifiers, inject requests into ongoing sessions, sniff the user's browsing history, or track user behavior on a website. Such malicious scripts can enter a web page due to cross-site scripting vulnerabilities or because the page integrates third-party scripts like advertisements or gadgets. A recent study showed that almost all popular websites include remotely-hosted scripts.

The importance of these attacks has led to the implementation of many countermeasures in browsers. The primary defense is the same-origin-policy (SOP), which restricts interactions between scripts and data from different origins. However, the SOP has known limitations, and many attacks bypass it. Additional countermeasures have been implemented, ranging from ad-hoc security checks to elaborate research proposals.

Several researchers have proposed information flow control as a general and powerful security enforcement mechanism to address these attacks. While some prototypes have implemented limited forms of information flow control, no one has yet demonstrated a fully functional browser that enforces sound and precise information flow control for web scripts.

In this paper, we present FlowFox, the first fully functional web browser (implemented as a modified Mozilla Firefox) that enforces precise and general information flow control based on secure multi-execution. FlowFox can enforce general information flow-based confidentiality policies on interactions between web scripts and the browser API. Information entering or leaving scripts through the API is labeled with a confidentiality label, and FlowFox ensures that information can only flow upward in a script.

We report on several experiments with FlowFox, including performance and memory cost measurements, and show how FlowFox can provide the same security guarantees as many ad-hoc browser security countermeasures. We also investigate the compatibility of these policies with the top-500 Alexa websites.

While the costs incurred by FlowFox are non-negligible, our prototype provides evidence of the practicality of information flow security in the context of the web. Further improvements in design and implementation will reduce performance, memory, and compatibility costs.

**Contributions:**
- We present the design and implementation of FlowFox, the first fully functional web browser with sound and precise information flow controls for JavaScript.
- We show how FlowFox can subsume many ad-hoc security countermeasures by a suitable choice of policy.
- We evaluate the performance and memory cost of FlowFox compared to an unmodified Firefox.
- We evaluate the compatibility of FlowFox with the current web by comparing its output to that of an unmodified Firefox.

**Organization:**
- Section 2 defines our threat model and gives examples of in-scope and out-of-scope threats.
- Section 3 provides a high-level overview of the design of FlowFox.
- Section 4 discusses key implementation aspects.
- Section 5 evaluates FlowFox with respect to compatibility, security, and performance.
- Section 6 discusses related work.
- Section 7 concludes the paper.

## 2. Threat Model

Our attacker model is based on the gadget attacker, who can operate their own websites and inject content into other sites via cross-site scripting (XSS) vulnerabilities or by providing advertisements or gadgets. The attacker does not have special network privileges.

The baseline defense against information leaking through scripts is the SOP, but it is well-known that the SOP provides little protection against the gadget attacker. Scripts included by an origin have full access to all information shared between the browser and that origin and can effectively transmit that information to any third party.

For this paper, we focus on confidentiality and leave the study of enforcing integrity to future work. Users care about the confidentiality of:
- **Application Data:** Sensitive information exchanged with banking or e-government sites.
- **User Interaction Data:** Information about mouse movements, clicks, scrolling, and text selection, copying, and pasting.
- **Meta Data:** Information about the current website and the browsing infrastructure, such as cookies and screen size.

### 2.1 In-Scope Threats

- **Session Hijacking through Session Cookie Stealing:** A gadget attacker can inject a script that reads the session cookie and leaks it back to the attacker.
- **Malicious Advertisements:** Advertisement scripts can access application data, exposing user private data to the advertisement provider.
- **History Sniffing and Behavior Tracking:** Many websites use scripts to exfiltrate user interaction data and metadata, such as browsing history.

### 2.2 Out-of-Scope Threats

- **Integrity Threats:** User interface redressing attacks and cross-site request forgery (CSRF) attacks.
- **Implementation-Level Attacks Against the Browser:** Vulnerabilities in the browser code that allow an attacker to gain user-level or administrator-level privileges.
- **Threats Not Related to Scripting:** Network-level attacks and CSRF attacks that do not use scripts.

## 3. FlowFox

### 3.1 Information Flow Security

Information flow security regulates how information flows through a program. A policy is specified by labeling all input and output operations with a security label representing a confidentiality level. The goal is to enforce that information only flows upward through the program. For this paper, we consider two security labels: high (H) for confidential information and low (L) for public information.

### 3.2 Secure Multi-Execution

Secure multi-execution (SME) is a dynamic enforcement mechanism for information flow security. The core idea is to execute the program multiple times, once for each security label, while applying specific rules for input and output (I/O) operations. For the two-element lattice considered in this paper:
1. I/O operations are executed only in the executions at the same security level as the operation.
2. Output operations at other levels are suppressed.
3. High input operations in the low execution are skipped and return a default value.
4. Low input operations in the high execution wait for the low execution to perform the input and then reuse the value.

### 3.3 In-Browser SME

An important design decision in implementing SME for web scripts is how to handle the browser API exposed to scripts. One option is to multi-execute the entire browser, but this approach is too coarse-grained and imprecise. FlowFox takes the second approach, treating browser API interactions as inputs and outputs and labeling them with appropriate security labels. This approach allows for more precise and effective information flow control.

**Figure 1: Two design alternatives.**

- **Script L and Script H:** Represent the low and high security copies of the script.
- **Browser L and Browser H:** Represent the low and high security copies of the browser.
- **Operating System:** Represents the underlying system.

By treating browser API interactions as inputs and outputs, FlowFox can enforce precise information flow policies, even in complex web applications.

**Example:**
- A script reading from a specific HTML element can be labeled with a high security label if the element contains sensitive information.
- A script writing to a specific HTML element can be labeled with a low security label if the element is publicly accessible.

This approach ensures that sensitive information is protected while allowing for the necessary flexibility in web applications.

## 4. Implementation

### 4.1 Key Implementation Aspects

- **Modifications to Firefox:** We modified the source code of Mozilla Firefox to support secure multi-execution.
- **Labeling Mechanism:** We implemented a labeling mechanism to assign security labels to browser API interactions.
- **Policy Enforcement:** We designed and implemented a policy enforcement mechanism to ensure that information only flows upward in the script.

### 4.2 Performance and Memory Cost

- **Performance Overhead:** We measured the performance overhead of FlowFox compared to an unmodified Firefox. The overhead is approximately 20% on macro benchmarks for a simple two-level policy.
- **Memory Usage:** We also evaluated the memory usage of FlowFox and found that it is manageable, although higher than an unmodified Firefox.

### 4.3 Compatibility

- **Alexa Top-500 Websites:** We tested FlowFox on the Alexa top-500 websites and found that it is compatible with most of them. Some minor issues were observed, but they did not affect the overall functionality of the websites.

## 5. Evaluation

### 5.1 Compatibility

- **Output Comparison:** We compared the output of FlowFox with that of an unmodified Firefox on a set of test websites. The results showed that FlowFox is highly compatible with the current web, with only minor differences in some cases.

### 5.2 Security

- **Policy Enforcement:** We evaluated the effectiveness of FlowFox in enforcing information flow policies. The results showed that FlowFox can provide the same security guarantees as many ad-hoc browser security countermeasures.
- **Case Studies:** We conducted case studies on specific security threats, such as session hijacking and history sniffing, and found that FlowFox effectively mitigates these threats.

### 5.3 Performance

- **Benchmark Results:** We ran a series of benchmarks to measure the performance of FlowFox. The results showed that the performance overhead is significant but not prohibitive, making FlowFox a viable solution for information flow control in web browsers.

## 6. Related Work

- **Ad-Hoc Countermeasures:** Several ad-hoc countermeasures have been proposed to address specific security threats in web browsers, such as Session-Shield and AdJail.
- **Information Flow Control:** Researchers have proposed information flow control as a general and powerful security enforcement mechanism. However, no fully functional browser with precise information flow control had been implemented until now.
- **Secure Multi-Execution:** Secure multi-execution has been applied in various contexts, but its application to web browsers is relatively new and challenging.

## 7. Conclusion

FlowFox is the first fully functional web browser that implements precise and general information flow control for web scripts. Our prototype demonstrates that information flow enforcement based on secure multi-execution can be implemented in full-scale browsers, supporting powerful and precise policies that refine the same-origin-policy while remaining compatible with existing websites. Although the performance and memory costs are significant, further improvements in design and implementation will reduce these costs, making FlowFox a practical solution for web security.