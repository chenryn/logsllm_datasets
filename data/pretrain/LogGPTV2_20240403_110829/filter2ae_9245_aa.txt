**作者：Flanker  
公众号：[Galaxy Leapfrogging 盖乐世蛙跳 Pwning the Galaxy
S8](https://mp.weixin.qq.com/s?__biz=MzI3ODI4NDM2MA==&mid=2247483696&idx=1&sn=6cd0f9c9c5e5c93819b59477b7ed7346&chksm=eb581017dc2f9901fa944a1a9f680878bb116397f3168cb469fb54fbbc0bffa4b4e2f2de64bd&mpshare=1&scene=1&srcid=&sharer_sharetime=1570763241600&sharer_shareid=e441301c3c77aafdcfee7b13b86b2e66&key=e16964c072f0d5a7c29311b658815bdc181932bb2ab59834e63e52bb046d202d7a10871efb12ec8c849e6987f1382bb9b5422476096f1cfcbc925540e74bdbe4e4b9e1440f3f55a1f71c012642df2e4c&ascene=1&uin=MzM5ODEzOTY3MQ%3D%3D&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=%2F94HOhdJ9Kefm8UMxXsXdKXQNR6sA0WRJLOMpjwsLi0NlWQoWRbeojVK25gSiC29
"成为")**
在最近的一系列文章中，我会介绍这些年以来通过Pwn2Own和官方渠道所报告的在各种Android厂商设备中发现的各种CVE，包括通过fuzz和代码审计发现的各式各样的内存破坏漏洞和逻辑漏洞。第一篇文章将会介绍在2017年末我们用来远程攻破Galaxy
S8并安装应用的利用链，一个V8漏洞来获取最开始的沙箱内代码执行，和五个逻辑漏洞来最终实现沙箱逃逸和提权来安装任意应用，demo视频可以在[这里](https://v.qq.com/x/page/e0568cb5wgx.html)看到。
所有的漏洞均已经报告并以CVE-2018-10496,CVE-2018-10497,CVE-2018-10498,CVE-2018-10499,CVE-2018-10500来标示。本文将主要介绍整个利用链，V8漏洞将在另外的文章中介绍。
# Bug 0: Pwning and Examining the browser’s renderer process
通过第一个V8漏洞（CVE-2018-10496，credit to Gengming Liu and Zhen
Feng）,我们现在获得了在三星浏览器renderer沙箱的代码执行。众所周知这是一个isolated process。Isolated
process是安卓中权限最低的进程，被传统的DAC权限和SELinux context policy所严格限制。 ![sbrowser
processes](https://images.seebug.org/content/images/2019/10/11/1570780297000-1kywjd.png-w331s)
那么在S8上相应的policy会不会有问题？通过反编译S8的SELinux
policy，我们很遗憾地发现三星在这块还是做了不错的工作，相比于原版Android没有增加任何的额外allow
policy。也就是说isolated进程仍然只能访问很少量的service和IPC，更别提启动activity之类的了。 ![SELinux access
vectors](https://images.seebug.org/content/images/2019/10/11/1570780343000-2mbedp.png-w331s)
对于想从头了解三星浏览器（或者说Chrome浏览器）沙箱架构的读者朋友，可以参考我之前在CanSecWest上的[PPT](https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf)，相应内容在此就不再赘述。鉴于看起来三星并没有对isolated
process增加额外的供给面，我们还是需要用old-fashion的办法 –
审计浏览器IPC。三星浏览器虽然在界面上和Chrome看起来大相径庭，但本质上还是Chromium内核，对应的沙箱架构也和Chrome一致。
前事不忘后事之师。说到IPC漏洞，我们就会想到当年东京文体两开花中日合拍的…
# Bug 1: 东京遗珠： CVE-2016-5197修复不完全可被绕过
老读者们应该都还记得之前东京我们用来攻破Pixel的CVE-2016-5197，具体内容可以在[这里](https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf)看到。回顾当年Google给出的[补丁](https://chromium.googlesource.com/chromium/src.git/+/abd993bfcdc18d41e5ea0f34312543bd6dae081e^!/#F0)
    public class ContentViewClient {
     public void onStartContentIntent(Context context, String intentUrl, boolean isMainFrame) {
     //...
    @@ -144,6 +148,14 @@
             // Perform generic parsing of the URI to turn it into an Intent.
             try {
                 intent = Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME);
    +
    +            String scheme = intent.getScheme();
    +            if (!scheme.equals(GEO_SCHEME) && !scheme.equals(TEL_SCHEME)
    +                    && !scheme.equals(MAILTO_SCHEME)) {
    +                Log.w(TAG, "Invalid scheme for URI %s", intentUrl);
    +                return;
    +            }
    +
    //...
            try {
                context.startActivity(intent);
            } catch (ActivityNotFoundException ex) {
                Log.w(TAG, "No application can handle %s", intentUrl);
            }
        }
Google的修复是对该IPC接受的intent
string做了检查，只有特定scheme的intent才能通过，意图是只允许geo://，tel://和mailto://等隐式intent，从而禁止再传递显式string来启动activity。
然而这个修复漏掉了关键的部分：intent解析并不是只依赖于scheme部分，component参数的优先级远高于scheme解析。我们只要在之前的攻击payload头部添加”scheme=geo”，同时依然保持component，即可既绕过这个check，又继续在renderer沙箱中通过这个IPC启动任意activity，继续利用这个漏洞。如之前所述，三星浏览器是chromium内核，那么也包含相同的漏洞代码。
![Jumping from renderer
sandbox](https://images.seebug.org/content/images/2019/10/11/1570780352000-3jtcag.png-w331s)
当然受到parseUri参数的限制，我们构造出的intent只能含有string和其他基本类型参数，不能包含一些fancy的parcelable，这对后续攻击面选择提出了要求。这个activity需要能满足如下条件
  * 导出并会在webview中加载或执行攻击者通过intent指定的url或javascript
  * 接受基本参数类型，对parcelable没有强制检查
只要我们能在App的webview中执行任意代码，我们就获得了这个应用的权限。 [注1]
这个漏洞在报告后，Google分配了[issue
804969](https://bugs.chromium.org/p/chromium/issues/detail?id=804969)。幸运的是，Chrome在这个漏洞被报告前的一次无关的代码refactor中，把这个IPC整个全部去掉了…
故Chrome官方认为此问题已经不存在了，但是所有下游的Chromium内核浏览器都仍然受影响。一个奇葩的操作是三星并没有为这个漏洞单独分配CVE，而是在各个bug单独的CVE之外，又分配了CVE-2018-9140/SVE-2017-10747给整个利用链。
# Bug 2: The Email loves EML with a … XSS
在检索所有权限较高的应用过程中，我们发现了Samsung Email和它所导出的一个有趣的Activity。 ![Email
activity](https://images.seebug.org/content/images/2019/10/11/1570780375000-4yqmbx.png-w331s)
导出的`com.samsung.android.email.ui.messageview.MessageFileView`会在intent参数中接收并解析EML文件。什么是EML文件？EML文件是一个电子邮件导出格式，Samsung
Email对EML文件提供了非常完善的富文本支持 –
完善到直接用Webview来加载和渲染。这当然立即勾起了一个安全研究员的兴趣：这是否意味着接下来有XSS、脚本注入，以及对于我们的场景，代码执行的可能性。
Project
Zero的Natalie在CVE-2015-7893中报告了一个类似的漏洞，在此之后三星增加了一些检查。然而就像所有的漏洞修复第一次经常可能修不完一样，这个检查做的非常粗糙，粗糙到是对``关键字的匹配。我们只需通过`img
src document.onload=blablaba`并动态引入script即可绕过，从而导致XSS。 这个漏洞被分配了CVE-2018-10497。
# Bug 3: … 以及 file:/// 跨域
虽然在Bug 2中我们证实了这个XSS确实存在，但通过这个XSS引入js
exploit并获得代码执行权限（shell）还有一些问题。典型的是EML文件本身如果太大，将会影响WebView的堆布局，进而导致堆风水的成功率降低。但是Email应用并没有让我们失望，它开启了setAllowFileAccessFromFileUrls，这意味着我们可以将js
exploit拆分到单独的文件中，通过script src的方式引用，进而尽可能缩小EML文件的体积来提高V8漏洞的成功率。
一个小tip：Bug2和Bug3组合在一起，已经可以任意读取Email的私有文件了。 这个漏洞被分配了CVE-2018-10498
所以我们现在构造如下所示的样例攻击EML文件：
    MIME-Version: 1.0
    Received: by 10.220.191.194 with HTTP; Wed, 11 May 2011 12:27:12 -0700 (PDT)
    Date: Wed, 11 May 2011 13:27:12 -0600
    Delivered-To: PI:EMAIL
    Message-ID: 
    Subject: Test
    From: Bill Jncjkq 
    To: PI:EMAIL
    Content-Type: multipart/mixed; boundary=bcaec54eecc63acce904a3050f79
    --bcaec54eecc63acce604a3050f77
    Content-Type: text/html; charset=ISO-8859-1