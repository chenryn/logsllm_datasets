### Automation and Outsourcing of PDF Documents

PDF documents can be automated and outsourced to various services. One of the most prominent providers of validation services is DocuSign. In addition to its online validation service, DocuSign offers a cloud-based PDF viewer and a signing application widely used by Fortune 500 companies, including Dell, eBay, VISA, Microsoft, Nike, and the USENIX Association [4, 13].

We also evaluated services used in different EU countries, such as Austria [38] and Slovenia [10], to assess multiple signature types (PAdES, CAdES, and XAdES) for compliance with the eIDAS regulation [48].

### Test Setup

We evaluated each online validation service using the following procedure:
1. **Upload Validly Signed PDF**: We uploaded a validly signed PDF file (document_signed.pdf) to the service using the available upload functionality.
2. **Generate Validation Report**: The service generated a report containing details about the signature's validity status. No additional output, such as the content of the PDF file, was provided.

Next, we modified the signed PDF file using different variants of three attack classes. If any of these modifications resulted in a report indistinguishable from the original, we classified the attack as successful. An example of a successful attack is shown in Figure 11.

### Results

We analyzed eight free and publicly available validation services against all three attack classes. The signature validation could be bypassed on six of these services (see Table 2).

To summarize:
- Two services [9, 38] were vulnerable to Signature Wrapping Attacks (SWA).
- Five services [9, 10, 12, 14, 20] could be bypassed using Incremental Saving Attacks (ISA).

This is contrary to the results from the evaluation of viewer applications, where more applications were found to be vulnerable to SWA.

One interesting challenge during the evaluation was to find a clear indication in the report whether a signature is valid. For example, the DSS Demonstration WebApp [14] prints out two fields: "Indication" and "Signature Scope" (see Figure 11). The "Indication" field summarizes the results of the digital signature validation. In our case, the result was "TOTAL PASSED." For USF and SWA, we received a warning or an error message if the attacks were detected. For ISA, the "Signature Scope" field indicates whether the entire document is signed. If an ISA attack is detected, the validation service should indicate that only parts of the document are signed. According to our evaluation, version 5.2 of the DSS Demonstration WebApp is susceptible to ISA, as it returns "Full PDF" as the signature scope even if the document was modified via incremental saving in Variant 2. Among all EU validation services, DocuSign, one of the leading global cloud services, was the only service vulnerable to both ISA and SWA.

### How to Fix PDF Signatures

In this section, we propose concrete countermeasures to address the previously introduced attacks. We carefully studied the main reasons for the attacks on PDF signatures and identified two root causes:
1. **Lack of Specification**: The specification does not provide a concrete procedure for validating signatures, nor does it describe potential pitfalls and security considerations. Thus, developers must implement the validation without best-common-practice information.
2. **Error Tolerance Abuse**: The error tolerance of PDF viewers is exploited to create non-valid documents that bypass validation but are correctly displayed to the user.

#### Verification Algorithm

To address USF, ISA, and SWA without negatively affecting the error tolerance of PDF viewers, we defined the following algorithm (see Listing 2). This algorithm describes a concrete approach for computing the necessary values for verification and detecting manipulations after the PDF file was signed. It must be applied for each signature within the PDF document.

**Listing 2: Pseudo-code Preventing USF, ISA, and SWA**

```plaintext
INPUT: PDFBytes, SigObj

// ByteRange is mandatory and must be well-formatted
if (byteRange == null OR byteRange.isEmpty) return false

// Parse byteRange
if (byteRange.length != 4) return false
for each x in byteRange { if x is not an integer return false }

// Ensure ByteRange covers start of file
if (a < 0) return false

// Ensure that more than zero bytes are protected in hashpart1
if (b <= 0) return false

// Ensure that second hashpart starts after first hashpart
if (c <= b) return false

// Ensure that more than zero bytes are protected in hashpart2
if (d <= 0) return false

// Ensure ByteRange covers the entire file
if ((c + d) < PDFBytes.length) return false

// Extract PKCS#7 blob
pkcs7Blob = PDFBytes[(a+b):c]

// Prevent USF. Pkcs7Blob value is not allowed to be null or empty.
if (pkcs7Blob == null OR pkcs7Blob.isEmpty) return false

// Ensure pkcs7Blob is a hexadecimal string
if (pkcs7Blob contains other chars than [0-9,a-f,A-F]) return false

// Parse the PKCS#7 Blob
sig, cert = pkcs7.parse(pkcs7Blob)

// Select (a+b) bytes from input PDF beginning at byte a=0
hashpart1 = PDFBytes[a:(a+b)]

// Select (c+d) bytes from input PDF beginning at byte c
hashpart2 = PDFBytes[c:(c+d)]

// Verify signature
return pkcs7.verify(sig, cert, hashpart1 || hashpart2)
```

**Explanation**:
- **Line 4**: Extract the ByteRange from the signature object.
- **Lines 7-22**: Validate the values a, b, c, and d of the ByteRange.
  - Line 10 ensures exactly four values.
  - Line 11 ensures each value is an integer.
  - Lines 14-20 ensure the ByteRange satisfies the condition: 0 ≤ a < b, b > 0, c > b, and d > 0.
  - Line 22 ensures the ByteRange covers the entire file.
- **Lines 24-29**: Parse the Contents parameter of the signature object, which is a PKCS#7 blob.
- **Lines 31-32**: Extract the information for signature verification.
- **Line 41**: Call the PKCS#7 verification function and return the validity status of the signature.

**Drawback**:
- Specifying the algorithm requires a change in the PDF specification, which currently defines ByteRange as an optional parameter [21, Section 8.7]. This feature allows a more powerful attack since the attacker can create validly signed documents by injecting the signed signature dictionary without a /ByteRange.
- Additionally, the algorithm leads to a usability issue if multiple signatures are provided. Only the signature covering the entire document will be displayed as valid. This can be addressed by providing additional information to the user, similar to Adobe's approach, which shows the document revision protected by a signature.

### Responsible Disclosure

After discovering the vulnerabilities, we created a security report containing the description of the attacks, a list of affected implementations, proof-of-concept exploits for each successful attack vector, and the pseudo-code preventing the attacks [34]. On November 8th, we sent the report to the BSI-CERT team, who distributed it to all affected vendors and governmental organizations dealing with PDF [34]. During the responsible disclosure process, we supported BSI-CERT and the vendors to fix the issues. The complete information relating to our research on PDF signatures was published on February 25, 2019, at https://www.pdf-insecurity.org/. To support all vendors, we also published all available exploits. Some vendors have already integrated these files into their test environments.

### Related Work

At the beginning of our research phase, we gathered and studied existing work related to PDF and file format security. This work can be categorized into the following four areas:

1. **PDF Malware and PDF Masking**:
   - Raynal et al. (2010) provided a comprehensive study on malicious PDFs leading to Denial-of-Service (DoS), Server-Side-Request-Forgery (SSRF), and information leakage [37].
   - Hamon et al. (2012) revealed weaknesses in PDFs leading to malicious URI invocation [49].
   - Multiple vulnerabilities in Adobe Reader were reported in 2013 and 2014, abusing insecure PDF features, JavaScript, and XML [22, 40].
   - Inführ (2013) summarized the supported languages, file formats, and features in PDFs leading to security issues [23].
   - Franken et al. (2018) evaluated the security of third-party cookies policies, revealing weaknesses in PDF readers [16].
   - Multiple vulnerabilities in Adobe Reader and Microsoft products were discovered in 2018, leading to URI invocation and NTLM credentials leakage [24, 39].

2. **Content Masking**:
   - Albertini (2014) discovered new attack classes by combining a PDF and a JPEG into a single polyglot file [2].
   - Markwood et al. (2017) introduced a novel attack related to content masking using font encoding [31].

3. **PDF Malware Detection**:
   - Various security tools were implemented to detect maliciously crafted documents [8, 26, 28, 30, 41, 43].
   - Carmony et al. (2016) built a JavaScript reference extractor for detecting parsing confusion attacks [6].
   - Tong et al. (2017) introduced a concept for robust PDF malware detection based on machine learning algorithms [46, 47].
   - Maiorca et al. (2017) provided an overview of current PDF malware techniques and analyzed existing security tools [29].

4. **Digital Signature Security**:
   - Popescu et al. (2012) presented a proof-of-concept bypass for a specific digital signature [36].
   - Lax et al. (2015) documented potential security topics related to digitally signed documents [27].
   - Stevens et al. (2017) discovered an attack against SHA-1, breaking collision resistance [45].

These studies highlight the ongoing challenges and vulnerabilities in PDF security, emphasizing the need for robust and standardized validation procedures.