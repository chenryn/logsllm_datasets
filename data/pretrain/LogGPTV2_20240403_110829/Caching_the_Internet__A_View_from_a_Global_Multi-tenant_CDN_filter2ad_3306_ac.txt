increased the bytes read from origin, rendering them unusable. This is the result
78
M. Flores and H. Bedi
of the largest objects never making it into cache, forcing them to always pull from
origin. The probabilistic and 2-Hit policies had much more modest increases,
between 12 and 30%, depending on the eviction policy.
Origin traﬃc is particularly sensitive in a CDN environment, as reducing
origin traﬃc is one of the core purposes of the CDN itself. Furthermore, unlike
purpose built or in-house solutions, origin traﬃc results in increased cost for
a third party. On the other hand, ensuring a higher hit-rate provides end-users
with improved latency. CDN operators much balance these trade-oﬀs, hence, the
use of an admission policy to control the load on the cache medium may make
sense, but it must be done with extreme care, as it can undermine the CDNs
eﬃcacy, as seen in the Pr.Size case.
Figure 9c shows a CDF of the disk writes of FIFO and LRU, with and with-
out 2-Hit (we exclude S4LRU and Prob. Admission from this ﬁgure for clarity,
but note that they performed similarly to LRU and 2-Hit, correspondingly).
Importantly, origin reads and disk writes diﬀer when using a selective admis-
sion policy, since an object may be fetched from origin multiple times before it
is written to disk. Even though FIFO showed promising improvements to disk
writes when using an admission policy, the writes for FIFO were high enough
that FIFO remains an outlier. In the median case, the over 30% improvement
on disk write operations still left FIFO-2-Hit performing more write operations
than LRU.
Figure 9d shows a closeup view of the absolute origin reads achieved by each
viable algorithm grouped by eviction policy (i.e. excluding the Prob. size poli-
cies). First, we note that all three eviction policies exhibit similar impacts, con-
ﬁrming our previous ﬁndings that the eviction policy becomes less critical with
large disks. The lowest probability admission, p = .25 also shows a signiﬁcant
increase in origin reads, due to the diﬃculty for any one item to make it into
the cache. Finally, we see that 2-hit and P r.75 show similar results, nearly in
proportion to their diﬀerence in disk write savings seen in Fig. 9a.
While we have seen here that a probabilistic admission with a relatively high
probability (p = .75) and 2-Hit perform similarly, we consider a ﬁnal operation
component: in many production settings, determinism can be extremely valu-
able. Speciﬁcally, when debugging and testing, it can often be important that
the system behaves deterministically, providing consistent results, not just at
scale, but for individual requests. This need makes 2-Hit an appealing method,
despite its increase in complexity over purely probabilistic methods.
6 Load Balancer Cache
Next, we consider placing a cache in-front of the L7 load balancers. Speciﬁ-
cally, in the above studies, we considered caches which were co-located with the
caching servers. Here, we examine an arrangement where the cache sits earlier in
the request processing. This creates the opportunity to manage traﬃc at it’s ﬁrst
entry point inside of the PoP, eliminating signiﬁcant amounts of intra-datacenter
traﬃc, easing load on cache servers and intermediate appliances, further reduc-
ing request latency. This placement also demands that the caches be managed
Caching the Internet: A View from a Global Multi-tenant CDN
79
Table 2. Hit/byte-hit rate achieved by the load balancer cache.
Size Hit-rate Byte hit-rate
Method
P. size 32 KB 1GB .49
.44
P. size 16 MB
.36
P. size 256 MB
P. size 32 KB 5GB .50
.54
P. size 16 MB
.44
P. size 256 MB
.05
.01
.03
.06
.03
.09
simply: i.e. they must sit ahead of much of the complex conﬁguration logic that
drives the true disk caches. Therefore, we stick to a bare-bones eviction policy,
pursuing only FIFO systems with a Pr.Size admission policy, avoiding the need
for bloom ﬁlters or other stored state.
Moreover, this placement means that our threshold for good performance is
much diﬀerent than more traditional components of the cache hierarchy. Specif-
ically, very low cache hit rates do not necessarily mean that the cache is per-
forming poorly: even a small reduction in hit rate reduces the load that must
pass through the load balancer and land on the main caches. Even in the event
of a cache miss, the request is still backed by the underlying cache server.
Table 2 presents the hit-rates and byte hit-rates seen for two possible cache
sizes, 1 and 5 GB, and 3 size admission parameters, 32 KB, 16 MB, and 256 MB.
The hit-ratios remain relatively steady, with roughly 50% of requests being ser-
viced by the cache, excepting the smaller cache with large admission parameter.
The byte hit-rates however are very low, showing that very few bytes are served
from the cache, even when its size is increased to 5 GB. Despite this, it oﬀers
signiﬁcant potential, as the measured hit rates would correspond to 50% of con-
nections terminating at the load balancer.
7 Conclusion
We have presented a study of the caching behavior of a large scale, global, CDN.
We explored the global accessed patterns observed by the CDN, examining both
historical log behaviors and the contents of caches. While we saw signiﬁcant
variations in the access and request ﬁle size, fundamentally, the caches exhibited
similar behaviors, with the newest objects being the most popular.
We further examined behaviors of cache evictions and admission policies,
going from the bottom up: ﬁrst considering a large disk cache alone, followed by
more complex arrangements. In the disk cache we explored the trade oﬀ between
complexity and performance, where we found that with large enough disks, rel-
atively simple methods (LRU, in particular), function well, while avoiding the
pitfalls of the simplest methods (FIFO). When considering admission policies,
we again found simplicity dominated, as more complex methods had operational
80
M. Flores and H. Bedi
challenges and increased origin reads. We additionally explored how we could
reduce connections to the L7 load-balancers signiﬁcantly by introducing an in-
memory cache earlier in the network. Ultimately, our ﬁndings provide a critical
lesson in operational systems: robust and ﬂexible approaches, like LRU, provide
the best trade-oﬀ between performance and operational constraints.
References
1. Nginx http server. https://www.nginx.org
2. Redis key-value store. http://redis.io
3. Varnish http cache. https://www.varnish-cache.org
4. Albrecht, C., et al.: Janus: optimal ﬂash provisioning for cloud storage workloads.
In: Proceedings of the USENIX ATC 2013, pp. 91–102 (2013)
5. Atikoglu, B., Xu, Y., Frachtenberg, E., Jiang, S., Paleczny, M.: Workload analysis
of a large-scale key-value store. In: Proceedings of the SIGMETRICS 2012, pp.
53–64 (2012)
6. Berger, D.S., Sitaraman, R.K., Harchol-Balter, M.: AdaptSize: orchestrating the
hot object memory cache in a content delivery network. In: Proceedings of the
USENIX NSDI 2017, pp. 483–498 (2017)
7. Blankstein, A., Sen, S., Freedman, M.J.: Hyperbolic caching: ﬂexible caching for
web applications. In: Proceedings of the (USENIX ATC 2017), pp. 499–511 (2017)
8. Breslau, L., Cao, P., Fan, L., Phillips, G., Shenker, S.: Web caching and Zipf-like
distributions: evidence and implications. In: Proceedings of the INFOCOM 1999,
vol. 1, pp. 126–134, March 1999
9. C´aceres, R., Douglis, F., Feldmann, A., Glass, G., Rabinovich, M.: Web proxy
caching: the devil is in the details. In: Proceedings of the WISP 1998, pp. 11–15
(1998)
10. Calder, M., Fan, X., Hu, Z., Katz-Bassett, E., Heidemann, J., Govindan, R.: Map-
ping the expansion of Google’s serving infrastructure. In: Proceedings of the IMC
2013, pp. 313–326 (2013)
11. Cao, P., Irani, S.: Cost-aware WWW proxy caching algorithms. In: Proceedings of
the USITS 1997, p. 18 (1997)
12. Cao, P., Zhang, J., Beach, K.: Active cache: caching dynamic contents on the web.
In: Proceedings of the Middleware 1998, pp. 373–388 (1998)
13. Chankhunthod, A., Danzig, P.B., Neerdaels, C., Schwartz, M.F., Worrell, K.J.: A
hierarchical internet object cache. In: Proceedings of the USENIX ATC 1996, p.
13 (1996)
14. Chen, F., Sitaraman, R.K., Torres, M.: End-user mapping: next generation request
routing for content delivery. In: Proceedings of the SIGCOMM 2015, pp. 167–181
(2015)
15. Cidon, A., Eisenman, A., Alizadeh, M., Katti, S.: Cliﬀhanger: scaling performance
cliﬀs in web memory caches. In: Proceedings of the NSDI 2016, pp. 379–392 (2016)
16. Dilley, J., Maggs, B., Parikh, J., Prokop, H., Sitaraman, R., Weihl, B.: Globally
distributed content delivery. IEEE Internet Comput. 6, 50–58 (2002)
17. Fitzpatrick, B.: Distributed caching with memcached (2004)
18. Freedman, M.J.: Experiences with CoralCDN: a ﬁve-year operational view. In:
Proceedings of the NSDI (2010)
19. Gummadi, K.P., Dunn, R.J., Saroiu, S., Gribble, S.D., Levy, H.M., Zahorjan, J.:
Measurement, modeling, and analysis of a peer-to-peer ﬁle-sharing workload. In:
Proceedings of the SOSP 2003, pp. 314–329 (2003)
Caching the Internet: A View from a Global Multi-tenant CDN
81
20. Guo, L., Tan, E., Chen, S., Xiao, Z., Zhang, X.: The stretched exponential distri-
bution of internet media access patterns. In: Proceedings of the PODC 2008, pp.
283–294 (2008)
21. Hasslinger, G., Ntougias, K., Hasslinger, F., Hohlfeld, O.: Performance evaluation
for new web caching strategies combining LRU with score based object selection.
In: Proceedings of the ITC 2016, pp. 322–330 (2016)
22. Huang, Q., Birman, K., van Renesse, R., Lloyd, W., Kumar, S., Li, H.C.: An
analysis of Facebook photo caching. In: Proceedings of the SOSP 2013, pp. 167–
181 (2013)
23. Ihm, S., Pai, V.S.: Towards understanding modern web traﬃc. In: Proceedings of
the IMC 2011, pp. 295–312 (2011)
24. Jiang, S., Zhang, X.: LIRS: an eﬃcient low inter-reference recency set replacement
policy to improve buﬀer cache performance. In: Proceedings of the SIGMETRICS
2002, pp. 31–42 (2002)
25. Johnson, K., Carr, J., Day, M., Kaashoek, M.: The measured performance of con-
tent distribution networks. Comput. Commun. 24, 202–206 (2001)
26. Johnson, T., Shasha, D.: 2Q: a low overhead high performance buﬀer management
replacement algorithm. In: Proceedings of the VLDB 1994, pp. 439–450 (1994)
27. Jung, J., Krishnamurthy, B., Rabinovich, M.: Flash crowds and denial of service
attacks: characterization and implications for CDNs and web sites. In: Proceedings
of the WWW 2002, pp. 293–304 (2002)
28. Khakpour, A., Peters, R.J.: Optimizing multi-hit caching for long tail content.
Patent No. US8639780 B2, January 2014
29. Krishnamurthy, B., Wills, C., Zhang, Y.: On the use and performance of content
distribution networks. In: Proceedings of the IMW 2001, pp. 169–182 (2001)
30. Krishnan, R., et al.: Moving beyond end-to-end path information to optimize CDN
performance. In: Proceedings of the IMC 2009, pp. 190–201 (2009)
31. Maggs, B.M., Sitaraman, R.K.: Algorithmic nuggets in content delivery. SIG-
COMM Comput. Commun. Rev. 45, 52–66 (2015)
32. Megiddo, N., Modha, D.S.: ARC: a self-tuning, low overhead replacement cache.
In: Proceedings of the FAST 2003, pp. 115–130 (2003)
33. O’Neil, E.J., O’Neil, P.E., Weikum, G.: The LRU-K page replacement algorithm
for database disk buﬀering. In: Proceedings of the SIGMOD 1993, pp. 297–306
(1993)
34. Saroiu, S., Gummadi, K.P., Dunn, R.J., Gribble, S.D., Levy, H.M.: An analysis of
internet content delivery systems. In: Proceedings of the OSDI (2002)
35. Scellato, S., Mascolo, C., Musolesi, M., Crowcroft, J.: Track globally, deliver locally:
improving content delivery networks by tracking geographic social cascades. In:
Proceedings of the WWW 2011, pp. 457–466 (2011)
36. Shaﬁq, M.Z., Khakpour, A.R., Liu, A.X.: Characterizing caching workload of a
large commercial content delivery network. In: Proceedings of INFOCOM 2016,
pp. 1–9, April 2016
37. Shim, J., Scheuermann, P., Vingralek, R.: Proxy cache algorithms: design, imple-
mentation, and performance. IEEE Trans. Knowl. Data Eng. 11, 549–562 (1999)
38. Tang, L., Huang, Q., Lloyd, W., Kumar, S., Li, K.: RIPQ: advanced photo caching
on ﬂash for Facebook. In: Proceedings of the FAST 2015, pp. 373–386 (2015)
39. Wang, J.: A survey of web caching schemes for the internet. SIGCOMM Comput.
Commun. Rev. 29, 36–46 (1999)
40. Wendell, P., Freedman, M.J.: Going viral: ﬂash crowds in an open CDN. In: Pro-
ceedings of the IMC 2011, pp. 549–558 (2011)