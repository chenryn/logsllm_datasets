delimiter //   -- 把界定符改成双斜杠      
CREATE PROCEDURE BatchInsert2(IN init INT, IN loop_time INT)  -- 第一个参数为初始ID号（可自定义），第二个位生成MySQL记录个数      
  BEGIN      
      DECLARE Var INT;      
      DECLARE ID INT;      
      SET Var = 0;      
      SET ID = init;      
      WHILE Var  insert into employees select * from employees;    
Query OK, 27600000 rows affected (4 min 38.62 sec)    
Records: 27600000  Duplicates: 0  Warnings: 0    
mysql> insert into employees select * from employees;    
Query OK, 55200000 rows affected (11 min 13.40 sec)    
Records: 55200000  Duplicates: 0  Warnings: 0    
mysql> select count(*) from employees;    
+-----------+    
| count(*)  |    
+-----------+    
| 110400000 |    
+-----------+    
1 row in set (28.00 sec)    
mysql> select count(distinct id) from employees ;      
+--------------------+    
| count(distinct id) |    
+--------------------+    
|            2000000 |    
+--------------------+    
1 row in set (1 min 17.73 sec)    
mysql> select count(*) from (select id from employees group by id) t;      
+----------+    
| count(*) |    
+----------+    
|  2000000 |    
+----------+    
1 row in set (1 min 24.64 sec)    
```    
1.1亿全量数据更新  
```  
mysql> update employees set lname=lname||'new';  
Query OK, 110400000 rows affected, 65535 warnings (21 min 30.34 sec)  
Rows matched: 110400000  Changed: 110400000  Warnings: 220800000  
```  
1.1亿 多对一JOIN 200万, 分组,排序, 超过3小时没有查询出结果.    
```      
select t1.lname,count(*) from employees t1 join employees1 t2 using (id) group by t1.lname order by count(*) desc,lname limit 10;      
```      
1.1亿创建索引    
```    
mysql> create index idx_employees_1 on employees(id);    
Query OK, 0 rows affected (3 min 49.04 sec)    
Records: 0  Duplicates: 0  Warnings: 0    
```    
## 阿里云RDS PostgreSQL 12测试      
测试表      
```      
CREATE TABLE employees (      
  id INT NOT NULL,      
  fname VARCHAR(30),      
  lname VARCHAR(30),      
  birth TIMESTAMP,      
  hired DATE NOT NULL DEFAULT '1970-01-01',      
  separated DATE NOT NULL DEFAULT '9999-12-31',      
  job_code INT NOT NULL,      
  store_id INT NOT NULL      
);      
```      
直接使用srf快速写入20万数据      
```      
\timing      
insert into employees      
    (id, fname, lname, birth, hired, separated, job_code, store_id)       
select       
    ID, CONCAT('chen', ID), CONCAT('haixiang', ID), Now(), Now(), Now(), 1, ID       
from generate_series(1,200000) id;      
INSERT 0 200000      
Time: 355.652 ms      
```      
也可以使用和mysql一样的方法loop insert写入20万      
```      
create or replace function BatchInsert(IN init INT, IN loop_time INT)  -- 第一个参数为初始ID号（可自定义），第二个位生成记录个数      
returns void as $$      
DECLARE       
  Var INT := 0;      
begin      
  for id in init..init+loop_time-1 loop      
    insert into employees      
    (id, fname, lname, birth, hired, separated, job_code, store_id)       
    values       
    (ID, CONCAT('chen', ID), CONCAT('haixiang', ID), Now(), Now(), Now(), 1, ID);      
  end loop;      
end;      
$$ language plpgsql strict;      
db1=# select batchinsert(1,200000);      
 batchinsert       
-------------      
(1 row)      
Time: 1292.559 ms (00:01.293)      
```      
使用insert into继续批量写入      
```      
db1=> insert into employees select * from employees ;      
INSERT 0 400000      
Time: 322.335 ms      
db1=> insert into employees select * from employees ;      
INSERT 0 800000      
Time: 835.365 ms      
db1=> insert into employees select * from employees ;      
INSERT 0 1600000      
Time: 1622.475 ms (00:01.622)      
db1=> insert into employees select * from employees ;      
INSERT 0 3200000      
Time: 3583.787 ms (00:03.584)      
db1=> insert into employees select * from employees ;      
INSERT 0 6400000      
Time: 7277.764 ms (00:07.278)      
db1=> insert into employees select * from employees ;      
INSERT 0 12800000      
Time: 15639.482 ms (00:15.639)      
```      
```      
db1=> \dt+ employees       
                      List of relations      
 Schema |   Name    | Type  |  Owner  |  Size   | Description       
--------+-----------+-------+---------+---------+-------------      
 public | employees | table | user123 | 2061 MB |       
(1 row)      
```      
查询性能      
```      
db1=> select count(*) from employees ;      
  count         
----------      
 25600000      
(1 row)      
Time: 604.982 ms      
```      
求distinct性能      
```      
db1=> select count(distinct id) from employees ;      
 count        
--------      
 200000      
(1 row)      
Time: 7852.604 ms (00:07.853)      
```      
分组求distinct性能      
```      
db1=> select count(*) from (select id from employees group by id) t;      
 count        
--------      
 200000      
(1 row)      
Time: 2982.907 ms (00:02.983)      
```      
再写入200万      
```      
insert into employees      
    (id, fname, lname, birth, hired, separated, job_code, store_id)       
select       
    ID, CONCAT('chen', ID), CONCAT('haixiang', ID), Now(), Now(), Now(), 1, ID       
from generate_series(1,2000000) id;      
```      
测试表2, 写入200万.      
```      
CREATE TABLE employees1 (      
  id INT NOT NULL,      
  fname VARCHAR(30),      