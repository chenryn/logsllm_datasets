### MinimaLT: A Low-Latency, Secure Network Protocol

#### Table 4: Comparison of MinimaLT with Other Network Protocols

| Feature                            | MinimaLT | TCP | TLS | DTLS |
|------------------------------------|----------|-----|-----|------|
| Encrypt                            | Yes      | No  | Yes | Yes  |
| Key erasure after session           | Yes      | No  | No  | No   |
| User authentication                | Yes      | No  | Yes | Yes  |
| Fast (time-based) key erasure       | Yes      | No  | No  | No   |
| Robust DoS protections              | Yes      | No  | No  | No   |
| Round trips before client sends data | 1        | 3   | 2-3 | 2-3  |
| ... if server is already known      | 0        | 2   | 1-2 | 1-2  |
| ... in abbreviated case             | 0        | 2   | 1-2 | 1-2  |

**Notes:**
- *Includes one round trip for DNS/directory service lookup of unknown server.
- †Assumes protocol-specific information cached from previous connection to the same server.

#### Latency and Performance
Latency is a critical concern in protected networking, as research has shown that users are highly sensitive to delays. MinimaLT addresses this by combining directory services and tunnel establishment in a novel way, even outperforming unencrypted TCP in terms of latency.

MinimaLT's first round trip is performed only once at system boot time. The second round trip is a protected version of a DNS lookup and is required under the same circumstances as a standard DNS query. In typical scenarios, MinimaLT clients can transmit encrypted data to an end server in the very first packet sent.

#### Long-Lived Tunnels
MinimaLT establishes long-lived tunnels that can be maintained even across system suspends and network migrations, provided there are no resource constraints. This feature enhances system reliability, as recovery code needs to be executed less frequently.

#### Future Work
Future work on MinimaLT will focus on increasing tunnel establishment rates by offloading public key operations to other CPU cores. We anticipate a roughly N-fold improvement in cryptographic performance using N cores, leading to Gb/s-speed tunnel establishment with 16 cores. (When not under attack, MinimaLT would use fewer cores.) Additionally, we plan to build proxies to enable MinimaLT to communicate with legacy applications. We expect to release Ethos and our Linux MinimaLT implementation as open-source software soon.

### Acknowledgments
This research was supported by the US National Science Foundation under grants CNS-0964575 and 1018836, the European Commission under Contract ICT-2007-216676 ECRYPT II and INFSO-ICT-284833 PUFFIN, and the Netherlands Organisation for Scientific Research (NWO) under grant 639.073.005. Volker Roth provided extensive feedback, particularly on the paper’s organization. We also thank Wenyuan Fei, Yaohua Li, and Siming Chen for their reviews of initial drafts, our anonymous referees for comments on subsequent drafts, and the United States Military Academy and Army Cyber Center for their support.

### References
[1] W. Aiello, S. M. Bellovin, M. Blaze, R. Canetti, J. Ioannidis, A. D. Keromytis, and O. Reingold. Just Fast Keying: Key agreement in a hostile Internet. ACM Trans. Inf. Syst. Secur., 7(2):242–273, May 2004.
[2] N. AlFardan and K. Paterson. Lucky thirteen: Breaking the TLS and DTLS record protocols. In Proceedings of the 2013 IEEE Symposium on Security and Privacy, pages 526–540, Washington, DC, USA, May 2013. IEEE Computer Society Press.
...
[61] E. Wobber, M. Abadi, M. Burrows, and B. Lampson. Authentication in the Taos operating system. In Proceedings of the 14th Symposium on Operating System Principles, pages 256–269, New York, NY, USA, 1993. ACM.

---

This optimized version of the text provides a clear and professional presentation of the MinimaLT protocol, its features, and future work, along with the acknowledgments and references.