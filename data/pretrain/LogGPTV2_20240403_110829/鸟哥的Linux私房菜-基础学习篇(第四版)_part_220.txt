功能，那么你的画面可能呈现出服务器端提供的 3D 加速吗？ 当然不可能吧！所以啰 X Server 的目的在管理用户端的硬件设备！也就是
说：“每部用户端主机都需要安装 X Server，而服务器端则是提供 X Client 软件， 以提供用户端绘图所需要的数据数据”。
X Server / X Client 的互动并非仅有 client --> server，两者其实有互动的！从上图 23.1.1 我们也可以发现， X Server 还有一个重要的工
作，那就是将来自输入设备 （如键盘、鼠标等） 的动作告知 X Client， 你晓得， X Server 既然是管理这些周边硬件，所以，周边硬件的动作
当然是由 X Server 来管理的， 但是 X Server 本身并不知道周边设备这些动作会造成什么显示上的效果， 因此 X Server 会将周边设备的这些
动作行为告知 X Client ，让 X Client 去伤脑筋。
X Client：：负负责责 X Server 要要求求的的“事事件件”之之处处理理：：
前面提到的 X Server 主要是管理显示接口与在屏幕上绘图，同时将输入设备的行为告知 X Client， 此时 X Client 就会依据这个输入设备
的行为来开始处理，最后 X Client 会得到“ 嗯！这个输入设备的行为会产生某个图示”，然后将这个图示的显示数据回传给 X Server ， X server
再根据 X Client 传来的绘图数据将他描图在自己的屏幕上，来得到显示的结果。
也就是说， X Client 最重要的工作就是处理来自 X Server 的动作，将该动作处理成为绘图数据， 再将这些绘图数据传回给 X Server
啰！由于 X Client 的目的在产生绘图的数据，因此我们也称呼 X Client 为 X Application （X 应用程序）。而且，每个 X Client 并不知道其他 X
Client 的存在， 意思是说，如果有两个以上的 X client 同时存在时，两者并不知道对方到底传了什么数据给 X Server ， 因此 X Client 的绘图常
常会互相重叠而产生困扰喔！
举个例子来说，当我们在 X Window 的画面中，将鼠标向右移动，那他是怎么告知 X Server 与 X Client 的呢？ 首先， X server 会侦测
到鼠标的移动，但是他不知道应该怎么绘图啊！此时，他将鼠标的这个动作告知 X Client， X Client 就会去运算，结果得到，嘿嘿！其实要将
鼠标指标向右移动几个像素，然后将这个结果告知 X server ， 接下来，您就会看到 X Server 将鼠标指标向右移动啰～
这样做有什么好处啊？最大的好处是， X Client 不需要知道 X Server 的硬件配备与操作系统！因为 X Client 单纯就是在处理绘图的数据
而已，本身是不绘图的。所以，在用户端的 X Server 用的是什么硬件？用的是哪套操作系统？服务器端的 X Client 根本不需要知道～相当的先
进与优秀～对吧！ ^_^ 整个运行流程可以参考下图：用户端用的是什么操作系统在 Linux 主机端是不在乎的！
图23.1.2、X Server 用户端的操作系统与 X client 的沟通示意
X Window Manager：：特特殊殊的的 X Client ，，负负责责管管理理所所有有的的 X client 软软件件
刚刚前面提到，X Client 的主要工作是将来自 X Server 的数据处理成为绘图数据，再回传给 X server 而已， 所以 X client 本身是不知道
他在 X Server 当中的位置、大小以及其他相关信息的。这也是上面我们谈到的， X client 彼此不知道对方在屏幕的哪个位置啊！为了克服这个
问题，因此就有 Window Manager （WM, 窗口管理员） 的产生了。 窗口管理员也是 X client ，只是他主要在负责全部 X client 的控管，还包括
提供某些特殊的功能，例如：
提供许多的控制元素，包括工作列、背景桌面的设置等等；
管理虚拟桌面 （virtual desktop）；
提供窗口控制参数，这包括窗口的大小、窗口的重叠显示、窗口的移动、窗口的最小化等等。
我们常常听到的 KDE, GNOME, XFCE 还有阳春到爆的 twm 等等，都是一些窗口管理员的专案计划啦！ 这些专案计划中，每种窗口管
理员所用以开发的显示发动机都不太相同，所著重的方向也不一样， 因此我们才会说，在 Linux 下面，每套 Window Manager 都是独特存在
的，不是换了桌面与显示效果而已， 而是连显示的发动机都不会一样喔！下面是这些常见的窗口管理员全名与链接：
GNOME （GNU Network Object Model Environment）：http://www.gnome.org/
KDE （K Desktop Enviroment）：http://kde.org/
twm （Tab Window Manager）：http://xwinman.org/vtwm.php
XFCE （XForms Common Environment）：http://www.xfce.org/
由于 Linux 越来越朝向 Desktop 桌面电脑使用方向走，因此窗口管理员的角色会越来越重要！ 目前我们 CentOS 默认提供的有 GNOME
与 KDE ，这两个窗口管理员上面还有提供非常多的 X client 软件， 包括办公室生产力软件 （Open Office） 以及常用的网络功能 （firefox 浏
览器、 Thunderbird 收发信件软件） 等。 现在使用者想要接触 Linux 其实真的越来越简单了，如果不要架设服务器，那么 Linux 桌面的使用与
Windows 系统可以说是一模一样的！不需要学习也能够入门哩！ ^_^
那么你知道 X Server / X client / window manager 的关系了吗？我们举 CentOS 默认的 GNOME 为例好了， 由于我们要在本机端启动 X
Window system ，因此，在我们的 CentOS 主机上面必须要有 Xorg 的 X server 核心， 这样才能够提供屏幕的绘制啊～然后为了让窗口管理更
方便，于是就加装了 GNOME 这个计划的 window manager ， 然后为了让自己的使用更方便，于是就在 GNOME 上面加上更多的窗口应用软
件，包括输入法等等的， 最后就建构出我们的 X Window System 啰～ ^_^！所以你也会知道，X server/X client/Window Manager 是同时存在
于我们一部 Linux 主机上头的啦！
Display Manager：：提提供供登登陆陆需需求求
谈完了上述的数据后，我们得要了解一下，那么我如何取得 X Window 的控制？在本机的文本界面下面你可以输入 startx 来启动 X 系
统，此时由于你已经登陆系统了，因此不需要重新登陆即可取得 X 环境。但如果是 graphical.target 的环境呢？你会发现在 tty1 或其他 tty 的地
方有个可以让你使用图形接口登陆 （输入帐号密码） 的咚咚，那个是啥？ 是 X Server/X client 还是什么的？其实那是个 Display Manager
啦！这个 display manager 最大的任务就是提供登陆的环境， 并且载入使用者选择的 Window Manager 与语系等数据喔！
几乎所有的大型窗口管理员专案计划都会提供 display manager 的，在 CentOS 上面我们主要利用的是 GNOME 的 GNOME Display
Manager （gdm） 这支程序来提供 tty1 的图形接口登陆喔！至于登陆后取得的窗口管理员， 则可以在 gdm 上面进行选择的！我们在第四章介
绍的登陆环境， 那个环境其实就是 gdm 提供的啦！再回去参考看看图示吧！ ^_^！所以说，并非 gdm 只能提供 GNOME 的登陆而已喔！
现在我们知道要启动 X Window System 时，必须要先启动管理硬件与绘图的 X Server ，然后才载入 X Client 。 基本上，目前都是使用
Window Manager 来管理窗口接口风格的。那么如何取得这样的窗口系统呢？ 你可以通过登陆本机的文本界面后，输入 startx 来启动 X 窗口；
也能够通过 display manager （如果有启动 graphical.target） 提供的登陆画面，输入你的帐号密码来登陆与取得 X 窗口的！
问题是，你的 X server 配置文件为何？如何修改分辨率与显示器？你能不能自己设置默认启动的窗口管理员？ 如何设置默认的使用者
环境 （与 X client 有关） 等等的，这些数据都需要通过了解 X 的启动流程才能得知！ 所以，下面我们就来谈谈如何启动 X 的流程吧！ ^_^
在在文文本本界界面面启启动动 X ：：通通过过 startx 指指令令
我们都知道 Linux 是个多用户多任务的操作系统，所以啦，X 窗口也是可以根据不同的使用者而有不同的设置！ 这也就是说，每个用户
启动 X 时， X server 的分辨率、启动 X client 的相关软件及 Window Manager 的选择可能都不一样！ 但是，如果你是首次登陆 X 呢？也就是
说，你自己还没有创建自己的专属 X 画面时，系统又是从哪里给你这个 X 默认画面呢？而如果你已经设置好相关的信息，这些信息又是存放
于何处呢？
事实上，当你在纯文本界面且并没有启动 X 窗口的情况下来输入 startx 时，这个 startx 的作用就是在帮你设置好上头提到的这些动作
啰！ startx 其实是一个 shell script ，他是一个比较亲和的程序，会主动的帮忙使用者创建起他们的 X 所需要引用的配置文件而已。你可以自行
研究一下 startx 这个 script 的内容，鸟哥在这里仅就 startx 的作用作个介绍。
startx 最重要的任务就是找出使用者或者是系统默认的 X server 与 X client 的配置文件，而使用者也能够使用 startx 外接参数来取代配置
文件的内容。这个意思是说：startx 可以直接启动，也能够外接参数，例如下面格式的启动方式：
[root@study ~]# startx [X client 参参数数] -- [X server 参参数数]
# 范例：以色彩深度为 16 bit 启动 X
[root@study ~]# startx -- -depth 16
startx 后面接的参数以两个减号“--”隔开，前面的是 X Client 的设置，后面的是 X Server 的设置。 上面的范例是让 X server 以色彩深度
16 bit 色 （亦即每一像素占用 16 bit ，也就是 65536 色） 显示， 因为色彩深度是与 X Server 有关的，所以参数当然是写在 -- 后面啰，于是就
成了上面的模样！
你会发现，鸟哥上面谈到的 startx 都是提到如何找出 X server / X client 的设置值而已！ 没错，事实上启动 X 的是 xinit 这支程序， startx
仅是在帮忙找出设置值而已！那么 startx 找到的设置值可用顺序为何呢？基本上是这样的：
X server 的参数方面：
1. 使用 startx 后面接的参数；
2. 若无参数，则找寻使用者主文件夹的文件，亦即 ~/.xserverrc
3. 若无上述两者，则以 /etc/X11/xinit/xserverrc
4. 若无上述三者，则单纯执行 /usr/bin/X （此即 X server 可执行文件）
X client 的参数方面：
1. 使用 startx 后面接的参数；
2. 若无参数，则找寻使用者主文件夹的文件，亦即 ~/.xinitrc
3. 若无上述两者，则以 /etc/X11/xinit/xinitrc
4. 若无上述三者，则单纯执行 xterm （此为 X 下面的终端机软件）
根据上述的流程找到启动 X 时所需要的 X server / X client 的参数，接下来 startx 会去调用 xinit 这支程序来启动我们所需要的 X 窗口系
统整体喔！接下来当然就是要谈谈 xinit 啰～
由由 startx 调调用用执执行行的的 xinit
事实上，当 startx 找到需要的设置值后，就调用 xinit 实际启动 X 的。他的语法是：
[root@study ~]# xinit [client option] -- [server or display option]
那个 client option 与 server option 如何下达呢？其实那两个咚咚就是由刚刚 startx 去找出来的啦！ 在我们通过 startx 找到适当的 xinitrc
与 xserverrc 后，就交给 xinit 来执行。 在默认的情况下 （使用者尚未有 ~/.xinitrc 等文件时），你输入 startx ， 就等于进行 xinit
/etc/X11/xinit/xinitrc -- /etc/X11/xinit/xserverrc 这个指令一般！但由于 xserverrc 也不存在，参考上一小节的参数搜寻顺序， 因此实际上的指令
是：xinit /etc/X11/xinit/xinitrc -- /usr/bin/X，这样了了吗？
那为什么不要直接执行 xinit 而是使用 startx 来调用 xinit 呢？这是因为我们必须要取得一些参数嘛！ startx 可以帮我们快速的找到这些参
数而不必手动输入的。因为单纯只是执行 xinit 的时候，系统的默认 X Client 与 X Server 的内容是这样的：[3]
xinit xterm -geometry +1+1 -n login -display :0 -- X :0
在 X client 方面：那个 xterm 是 X 窗口下面的虚拟终端机，后面接的参数则是这个终端机的位置与登陆与否。 最后面会接一个“ -display
:0 ”表示这个虚拟终端机是启动在“第 :0 号的 X 显示接口”的意思。至于 X Server 方面， 而我们启动的 X server 程序就是 X 啦！其实 X 就是
Xorg 的链接文件，亦即是 X Server 的主程序啰！ 所以我们启动 X 还挺简单的～直接执行 X 而已，同时还指定 X 启动在第 :0 个 X 显示接口。
如果单纯以上面的内容来启动你的 X 系统时，你就会发现 tty2 以后的终端机有画面了！只是.....很丑～因为我们还没有启动 window manager
啊！
从上面的说明我们可以知道， xinit 主要在启动 X server 与载入 X client ，但这个 xinit 所需要的参数则是由 startx 去帮忙找寻的。因此，
最重要的当然就是 startx 找到的那些参数啦！ 所以呢，重点当然就是 /etc/X11/xinit/ 目录下的 xinitrc 与 xserverrc 这两个文件的内容是啥啰～ 虽
然 xserverrc 默认是不存在的。下面我们就分别来谈一谈这两个文件的主要内容与启动的方式～
启启动动 X server 的的文文件件：： xserverrc
X 窗口最先需要启动的就是 X server 啊，那 X server 启动的脚本与参数是通过 /etc/X11/xinit/ 里面的 xserverrc 。不过我们的 CentOS 7.x
根本就没有 xserverrc 这个文件啊！ 那使用者主文件夹目前也没有 ~/.xserverrc ，这个时候系统会怎么做呢？其实就是执行 /usr/bin/X 这个指令
啊！ 这个指令也是系统最原始的 X server 可执行文件啰。
在启动 X Server 时，Xorg 会去读取 /etc/X11/xorg.conf 这个配置文件。针对这个配置文件的内容， 我们会在下个小节介绍。如果一切顺
利，那么 X 就会顺利的在 tty2 以后终端环境中启动了 X 。 单纯的 X 启动时，你只会看到画面一片漆黑，然后中心有个鼠标的光标而已～
由前一小节的说明中，你可以发现到其实 X 启动的时候还可以指定启动的接口喔！那就是 :0 这个参数，这是啥？ 事实上我们的 Linux
可以“同时启动多个 X”喔！第一个 X 的画面会在 :0 亦即是 tty2 ，第二个 X 则是 :1 亦即是 tty3 。 后续还可以有其他的 X 存在的。因此，上一小
节我们也有发现， xterm 在载入时，也必须要使用 -display 来说明， 这个 X 应用程序是需要在哪个 X 载入的才行呢！其中比较有趣的是， X
server 未注明载入的接口时，默认是使用 :0 ～ 但是 X client 未注明时，则无法执行喔！
Tips
CentOS 7 的 tty 非常有趣！如果你在分析 systemd 的章节中有仔细看的话， 会发现到其实 tty 是有用到才会启动的，这与之前 CentOS 6
以前的版本默认启用 6 个 tty 给你是不同的。因此，如果你只有用到 tty1 的话， 那么启动 X 就会默认丢到 tty2 ，而 X :1 就会丢到 tty3 这样～
以此类推喔～
启动了 X server 后，接下来就是载入 X client 到这个 X server 上面啦！
启启动动 X Client 的的文文件件：： xinitrc
假设你的主文件夹并没有 ~/.xinitrc ，则此时 X Client 会以 /etc/X11/xinit/xinitrc 来作为启动 X Client 的默认脚本。xinitrc 这个文件会将很
多其他的文件参数引进来， 包括 /etc/X11/xinit/xinitrc-common 与 /etc/X11/xinit/Xclients 还有 /etc/sysconfig/desktop 。你可以参考 xinitrc 后去搜
寻各个文件来了解彼此的关系。
不过分析到最后，其实最终就是载入 KDE 或者是 GNOME 而已。你也可以发现最终在 XClient 文件当中会有两个指令的搜寻， 包括
startkde 与 gnome-session 这两个，这也是 CentOS 默认会提供的两个主要的 Window Manager 啰。 而你也可以通过修改
/etc/sysconfig/desktop 内的 DESKTOP=GNOME 或 DESKTOP=KDE 来决定默认使用哪个窗口管理员的。 如果你并没有安装这两个大家伙，
那么 X 就会去使用阳春的 twm 这个窗口管理员来管理你的环境啰。
Tips
不论怎么说，鸟哥还是希望大家可以通过解析 startx 这个 script 的内容去找到每个文件， 再根据分析每个文件来找到您 distributions
上面的 X 相关文件～ 毕竟每个版本的 Linux 还是有所差异的～