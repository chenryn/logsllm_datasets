以下是优化后的文本，使其更加清晰、连贯和专业：

---

### Page 461
#### .NET高级话题
**通过装配件构建自己的正则表达式库**

在这个示例中，我们将构建一个小型的正则表达式库。完整的程序将生成一个包含三个预定义 `Regex` 构造函数的动态链接库（DLL）：`jfriedl.Mail.Subject`、`jfriedl.Mail.From` 和 `jfriedl.CSV.GetField`。前两个构造函数非常简单，而第三个则展示了构建库时的约定。

请注意，在此过程中不需要显式设置 `RegexOptions.Compiled` 选项，因为该选项在构建装配件时已经隐含设定。关于如何使用构建好的装配件，请参阅第 434 页。

```vb
Option Explicit On
Option Strict On
Imports System.Text.RegularExpressions
Imports System.Reflection

Module BuildMyLibrary
    Sub Main()
        ' 调用 RegexCompilationInfo 提供模式、Regex 选项、类内部名称、类名以及一个布尔值来指示类是否为公共类。
        Dim RCInfo() As RegexCompilationInfo = {
            New RegexCompilationInfo(
                "^Subject:\s*(.*)", RegexOptions.IgnoreCase, "Subject", "jfriedl.Mail", True),
            New RegexCompilationInfo(
                "^From:\s*(.*)", RegexOptions.IgnoreCase, "From", "jfriedl.Mail", True),
            New RegexCompilationInfo(
                "\G(?:[^,\"]+|\"(?:[^\"]*|\"\")*\")*", RegexOptions.IgnorePatternWhitespace, "GetField", "jfriedl.Csv", True)
        }

        ' 生成 DLL 文件
        Dim AN As AssemblyName = New AssemblyName()
        AN.Name = "JfriedlsRegexLibrary"
        AN.Version = New Version("1.0.0.0")
        Regex.CompileToAssembly(RCInfo, AN)
    End Sub
End Module
```

---

### Page 462
#### 匹配嵌套结构

微软提供了一种创新功能，专门用于匹配对称结构（长期以来，正则表达式对此无能为力）。以下是一个简单的例子：

```vb
Dim R As Regex = New Regex("\((?>[^(]*|\((?<-DEPTH>)|(?<DEPTH>\()[^()]*)*\)(?(DEPTH)(?!))", RegexOptions.IgnorePatternWhitespace)
```

这个正则表达式匹配第一组正确配对的嵌套括号，例如在字符串 `before(nope(yes(here)okay)after` 中，下划线标注的部分是匹配结果。第一个开括号不会匹配，因为它没有对应的闭括号。

工作原理简述：
1. 每遇到一个左括号 `(`，嵌套深度值加1。
2. 每匹配一个右括号 `)`，`(?<-DEPTH>)` 将深度减1。
3. `(?<DEPTH>(?!))` 确保在最后的右括号匹配时，深度应为0。

---

### Page 463
#### Capture 对象

.NET 的对象模型还包括 `Capture` 对象，它提供了新的视角来观察匹配结果。`Capture` 对象几乎等价于 `Group` 对象，表示一组捕获型括号匹配的文本。与 `Group` 对象一样，它提供了 `Value`（匹配的文本）、`Length`（匹配文本的长度）和 `Index`（匹配文本在目标字符串中的偏移值，从0开始）。

例如：
```vb
Dim M As Match = Regex.Match("abcdefghijk", "^(..)+")
M.Groups(1).Captures(0).Value ' "ab"
M.Groups(1).Captures(1).Value ' "cd"
M.Groups(1).Captures(2).Value ' "ef"
M.Groups(1).Captures(3).Value ' "gh"
M.Groups(1).Captures(4).Value ' "ij"
M.Groups(1).Captures.Count ' 5
```

注意，`M.Groups(1).Value` 等同于 `M.Groups(1).Captures(M.Groups(1).Captures.Count - 1).Value`。

关于 `Capture` 对象的一些要点：
- `M.Groups(1).Captures` 是一个 `CaptureCollection`，通常通过索引直接访问，例如 `M.Groups(1).Captures(3)`。
- `Capture` 对象没有 `Success` 方法，如果需要，请测试 `Group` 的 `Success` 属性。
- `Match` 对象也有 `Captures` 属性，但用途不大。`M.Captures` 直接访问编号为0的分组的 `Captures` 属性。

尽管 `Capture` 对象是一种创新，但由于其与对象模型的高度集成，使用起来可能更复杂且令人困惑。在仔细阅读.NET文档并理解这些对象后，我认为这种做法有利有弊。

---

### Page 465
#### 第10章 PHP

PHP 在20世纪90年代末期随着Web的迅猛发展而变得流行，并一直持续至今。PHP 得以流行的原因之一是即使非专业人员也能轻松使用其基本功能。此外，PHP 还提供了许多受开发老手欢迎的高级特性和函数。PHP 支持正则表达式，并提供了至少三套独立的正则引擎：“preg”、“ereg” 和 “mb_ereg”。本书介绍的是 `preg` 引擎提供的函数，它使用 NFA 引擎，在速度和功能方面通常优于其他两者。

本章的内容强烈依赖于第1至6章介绍的基础知识。如果你只对PHP感兴趣，建议你先阅读前言和前面的章节，特别是关于NFA引擎的工作原理、匹配优先特性、回溯和效率的内容。

接下来，我将简要介绍 `preg` 引擎的历史，然后详细介绍它的正则流派。之后几节将详细考察 `preg` 函数的接口，讨论 `preg` 的效率问题，并提供一些扩展示例。

---

### Page 466
#### preg 的背景和历史

`preg` 名字来自接口函数名的前缀，代表“Perl 的正则表达式（Perl Regular Expressions）”。`preg` 引擎的创始人是 Andrei Zmievski，他对当时作为标准的 `ereg` 套件的诸多限制感到不满。`ereg` 表示“扩展的正则表达式（extended regular expressions）”，它兼容 POSIX 标准，但在今天看来功能较为有限。

Andrei 的 `preg` 套件是一组 PCRE（Perl Compatible Regular Expressions）接口，这是一个基于 NFA 的正则表达式库，完全模拟了 Perl 的语法和语义，提供了 Andrei 所需的功能。PCRE 库由剑桥大学的 Philip Hazel 编写，他发现 Perl 的正则表达式源代码过于复杂，因此编写了这套清晰、文档完备且高效的库。

随着时间的推移，Perl、PCRE 和 PHP 都不断发展。本书针对的是 PHP 版本 4.4.3 和 5.1.4，它们都兼容 PCRE 版本 6.6。需要注意的是，4.x 和 5.x 系列是分开维护和发布的，可能会出现某个 5.x 版本使用的 PCRE 版本低于更晚发布的 4.x 版本的情况。

---

### Page 467
#### PHP 的正则流派

表 10-1：PHP `preg` 的正则流派

| 功能 | 描述 |
| --- | --- |
| 字符缩略表示法 | `\a \b \e \f \n \r \t \octal \xhex \x{hex} \cchar` |
| 字符组及相关结构 | `[...]`（可包含集合运算符） |

---

希望这些优化后的文本能够更好地传达信息，并使内容更加清晰和专业。