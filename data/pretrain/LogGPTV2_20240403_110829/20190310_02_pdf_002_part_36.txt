### 4.3 Creating Triggers

The `CREATE TRIGGER` command is used to define and name a trigger that will be stored in the database.

#### Syntax
```sql
CREATE [ OR REPLACE ] TRIGGER name
{ BEFORE | AFTER | INSTEAD OF }
{ INSERT | UPDATE | DELETE }
[ OR { INSERT | UPDATE | DELETE } ] [, ...]
ON table
[ REFERENCING { OLD AS old | NEW AS new } ...]
[ FOR EACH ROW ]
[ WHEN condition ]
[ DECLARE
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
declaration; [, ...] ]
BEGIN
statement; [, ...]
[ EXCEPTION
{ WHEN exception [ OR exception ] [...] THEN
statement; [, ...] } [, ...]
]
END;
```

#### Description
- **CREATE TRIGGER**: Defines a new trigger.
- **CREATE OR REPLACE TRIGGER**: Either creates a new trigger or replaces an existing one.
- If you are creating a new trigger, ensure the name does not match any existing trigger on the same table. New triggers are created in the same schema as the table on which the triggering event is defined.
- When updating an existing trigger, use the `CREATE OR REPLACE TRIGGER` keywords.
- When using Oracle-compatible syntax to create a trigger, it runs as a `SECURITY DEFINER` function.

#### Parameters
- **name**: The name of the trigger to create.
- **BEFORE | AFTER**: Determines whether the trigger is fired before or after the triggering event.
- **INSERT | UPDATE | DELETE**: Defines the triggering event.
- **table**: The name of the table on which the triggering event occurs.
- **condition**: A Boolean expression that determines if the trigger will be executed. If the condition evaluates to `TRUE`, the trigger will fire.
- **FOR EACH ROW**: Specifies whether the trigger should be fired once for every row affected by the triggering event (row-level trigger) or just once per SQL statement (statement-level trigger).
- **PRAGMA AUTONOMOUS_TRANSACTION**: Sets the trigger as an autonomous transaction.
- **declaration**: A variable, type, REF CURSOR, or subprogram declaration.
- **statement**: An SPL program statement.
- **exception**: An exception condition name such as `NO_DATA_FOUND`, `OTHERS`, etc.

#### REFERENCING Clause
- The `REFERENCING` clause allows you to reference old and new rows.
- `OLD AS old` and `NEW AS new` are used to refer to the old and new row values, respectively.
- Identifiers other than `old` or `new` may not be used in this clause, making it incompatible with Oracle databases in some cases.

### 4.4 Trigger Variables

In the trigger code block, several special variables are available for use:

- **NEW**: A pseudo-record name that refers to the new table row for insert and update operations in row-level triggers. It is not applicable in statement-level triggers and in delete operations of row-level triggers.
  - Usage: `:NEW.column`
  - In a `BEFORE` row-level trigger, the initial content of `:NEW.column` is the value in the named column of the new row to be inserted or updated.
  - In an `AFTER` row-level trigger, this value has already been stored in the table since the action has already occurred on the affected row.
  - Assigning a value to `:NEW.column` in a `BEFORE` row-level trigger will use the assigned value in the new inserted or updated row.

- **OLD**: A pseudo-record name that refers to the old table row for update and delete operations in row-level triggers. It is not applicable in statement-level triggers and in insert operations of row-level triggers.
  - Usage: `:OLD.column`
  - In a `BEFORE` row-level trigger, the initial content of `:OLD.column` is the value in the named column of the row to be deleted or replaced.
  - In an `AFTER` row-level trigger, this value is no longer stored in the table since the action has already occurred on the affected row.
  - Assigning a value to `:OLD.column` has no effect on the action of the trigger.

- **INSERTING**: A conditional expression that returns `TRUE` if an insert operation fired the trigger, otherwise it returns `FALSE`.
- **UPDATING**: A conditional expression that returns `TRUE` if an update operation fired the trigger, otherwise it returns `FALSE`.
- **DELETING**: A conditional expression that returns `TRUE` if a delete operation fired the trigger, otherwise it returns `FALSE`.

### 4.5 Transactions and Exceptions

- A trigger is always executed as part of the same transaction within which the triggering statement is executing.
- If no exceptions occur within the trigger code block, the effects of any DML commands within the trigger are committed only if the transaction containing the triggering statement is committed.
- If an exception occurs within the trigger code block but is caught and handled in an exception section, the effects of any DML commands within the trigger are still rolled back.
- If an unhandled exception occurs within the trigger code block, the transaction that encapsulates the trigger is aborted and rolled back, causing the effects of any DML commands within the trigger and the triggering statement to be rolled back.

### 4.6 Trigger Examples

#### 4.6.1 Before Statement-Level Trigger
```sql
CREATE OR REPLACE TRIGGER emp_alert_trig
BEFORE INSERT ON emp
BEGIN
  DBMS_OUTPUT.PUT_LINE('New employees are about to be added');
END;
```
- This trigger displays a message before an insert operation on the `emp` table.

#### 4.6.2 After Statement-Level Trigger
```sql
CREATE TABLE empauditlog (
  audit_date DATE,
  audit_user VARCHAR2(20),
  audit_desc VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER emp_audit_trig
AFTER INSERT OR UPDATE OR DELETE ON emp
DECLARE
  v_action VARCHAR2(20);
BEGIN
  IF INSERTING THEN
    v_action := 'Added employee(s)';
  ELSIF UPDATING THEN
    v_action := 'Updated employee(s)';
  ELSIF DELETING THEN
    v_action := 'Deleted employee(s)';
  END IF;
  INSERT INTO empauditlog VALUES (SYSDATE, USER, v_action);
END;
```
- This trigger adds a row to the `empauditlog` table recording the date, user, and action whenever an insert, update, or delete operation occurs on the `emp` table.

#### 4.6.3 Before Row-Level Trigger
```sql
CREATE OR REPLACE TRIGGER emp_comm_trig
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
  IF :NEW.deptno = 30 THEN
    :NEW.comm := :NEW.sal * .4;
  END IF;
END;
```
- This trigger calculates the commission of every new employee belonging to department 30 that is inserted into the `emp` table.

#### 4.6.4 After Row-Level Trigger
```sql
CREATE TABLE empchglog (
  chg_date DATE,
  chg_desc VARCHAR2(30)
);

CREATE OR REPLACE TRIGGER emp_chg_trig
AFTER INSERT OR UPDATE OR DELETE ON emp
FOR EACH ROW
DECLARE
  v_empno emp.empno%TYPE;
  v_deptno emp.deptno%TYPE;
  v_dname dept.dname%TYPE;
  v_action VARCHAR2(7);
  v_chgdesc jobhist.chgdesc%TYPE;
BEGIN
  IF INSERTING THEN
    v_action := 'Added';
    v_empno := :NEW.empno;
    v_deptno := :NEW.deptno;
    INSERT INTO jobhist VALUES (:NEW.empno, SYSDATE, NULL, :NEW.job, :NEW.sal, :NEW.comm, :NEW.deptno, 'New Hire');
  ELSIF UPDATING THEN
    v_action := 'Updated';
    v_empno := :NEW.empno;
    v_deptno := :NEW.deptno;
    v_chgdesc := '';
    IF NVL(:OLD.ename, '-null-') != NVL(:NEW.ename, '-null-') THEN
      v_chgdesc := v_chgdesc || 'name, ';
    END IF;
    IF NVL(:OLD.job, '-null-') != NVL(:NEW.job, '-null-') THEN
      v_chgdesc := v_chgdesc || 'job, ';
    END IF;
    IF NVL(:OLD.sal, -1) != NVL(:NEW.sal, -1) THEN
      v_chgdesc := v_chgdesc || 'salary, ';
    END IF;
    IF NVL(:OLD.comm, -1) != NVL(:NEW.comm, -1) THEN
      v_chgdesc := v_chgdesc || 'commission, ';
    END IF;
    IF NVL(:OLD.deptno, -1) != NVL(:NEW.deptno, -1) THEN
      v_chgdesc := v_chgdesc || 'department, ';
    END IF;
    v_chgdesc := 'Changed ' || RTRIM(v_chgdesc, ', ');
    UPDATE jobhist SET enddate = SYSDATE WHERE empno = :OLD.empno AND enddate IS NULL;
    INSERT INTO jobhist VALUES (:NEW.empno, SYSDATE, NULL, :NEW.job, :NEW.sal, :NEW.comm, :NEW.deptno, v_chgdesc);
  ELSIF DELETING THEN
    v_action := 'Deleted';
    v_empno := :OLD.empno;
    v_deptno := :OLD.deptno;
  END IF;
  INSERT INTO empchglog VALUES (SYSDATE, v_action || ' employee # ' || v_empno);
END;
```
- This trigger adds a new row to the `jobhist` table for a new employee, updates the `enddate` of the latest `jobhist` row for an updated employee, and adds a row to the `empchglog` table with a description of the action.

### 5 Packages

[Next Section]

---

**Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**