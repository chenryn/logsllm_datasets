# Chakra OP_NewScObjArray Type Confusion远程代码执行漏洞分析与利用
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1.漏洞描述
漏洞编号：无  
影响版本：Chakra  r
    rax=00000033438faf18 rbx=00000000000fefa0 rcx=000001aee1be3020
    rdx=00007ff88f40c698 rsi=000001a6c2bcd960 rdi=000001aee1be3020
    rip=00007ff88ee5d224 rsp=00000033438faea0 rbp=000000000000fefa
     r8=000001aee1ce2050  r9=00007ff88f40c698 r10=000001a6c2b38568
    r11=000001aee33001b0 r12=000001aee1be3020 r13=000001aec87103c0
    r14=000001aee1be3b29 r15=00000000000009e9
    iopl=0         nv up ei pl nz na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206
    chakra!Js::DynamicProfileInfo::RecordCallSiteInfo+0x54:
    00007ff88ee5d224 450fb74802      movzx   r9d,word ptr [r8+2] ds:000001aee1ce2052=????
    0:017> kb
    RetAddr           : Args to Child                                                           : Call Site
    00 00007ff88ed5ca46 : 000001aee1be3020 000001aee33001b0 000001a6c2b3fefa 00007ff88f40c698 : chakra!Js::DynamicProfileInfo::RecordCallSiteInfo+0x54
    01 00007ff88ed5b061 : 000001aec8708580 00000033438faff0 000001aec87103c0 000001a6c2b3fefa : chakra!Js::ProfilingHelpers::ProfiledNewScObjArray+0xa6
    02 00007ff88efe8518 : 00000033438fb280 000001aee3af7c85 00000033438fb0b0 000001aee3af7c84 : chakra!Js::InterpreterStackFrame::OP_NewScObjArray_Impl >,0>+0x81
    03 00007ff88ee25e1b : 00000033438fb280 000001aee3af7c84 00000033438fb0b0 0000000000000000 : chakra!Windows::Data::Text::IUnicodeCharactersStatics::vcall'{144}'+0x1f618
    04 00007ff88ee25c55 : 00000033438fb280 0000000000000000 0000000000000001 00007ff88ed5c496 : chakra!Js::InterpreterStackFrame::ProcessUnprofiled+0x9b
    05 00007ff88ee24704 : 00000033438fb280 00000033438fb280 00000033438fb280 0000000000000001 : chakra!Js::InterpreterStackFrame::Process+0x175
    06 00007ff88ee26cdb : 00000033438fb280 000001aee3af7c68 000001aee3af7c68 0000000000000000 : chakra!Js::InterpreterStackFrame::OP_TryCatch+0x64
    07 00007ff88ee25c55 : 00000033438fb280 0000000000000000 0000000000000000 0000000000000000 : chakra!Js::InterpreterStackFrame::ProcessUnprofiled+0xf5b
    08 00007ff88ee1913d : 00000033438fb280 00000033438fb280 00000033438fbc80 000001a6c2b28760 : chakra!Js::InterpreterStackFrame::Process+0x175
    09 00007ff88ee189de : 000001aec87103c0 00000033438fbe60 000001aee1c70fba 00000033438fbe78 : chakra!Js::InterpreterStackFrame::InterpreterHelper+0x49d
    0a 000001aee1c70fba : 00000033438fbeb0 0000000000000001 00000033438fbea0 00000033438fc288 : chakra!Js::InterpreterStackFrame::InterpreterThunk+0x4e
    ....
从上面的栈帧可知是调用RecordCallSiteInfo函数时内部发生了访问异常。
### 3.2 漏洞成因
**3.2.1 pc对应的代码**
源代码如下：
    void DynamicProfileInfo::RecordCallSiteInfo(FunctionBody* functionBody, ProfileId callSiteId, FunctionInfo* calleeFunctionInfo, JavascriptFunction* calleeFunction, uint actualArgCount, bool isConstructorCall, InlineCacheIndex ldFldInlineCacheId)
    {
    ...
        if (!callSiteInfo[callSiteId].isPolymorphic) //out of bound read 
        {
            Js::SourceId oldSourceId = callSiteInfo[callSiteId].u.functionData.sourceId;
            if (oldSourceId == InvalidSourceId)
            {
                return;
            }
    ...
反汇编代码如下：
    void **__fastcall Js::DynamicProfileInfo::RecordCallSiteInfo(Js::DynamicProfileInfo *this, struct Js::FunctionBody *a2, unsigned __int16 a3, struct Js::FunctionInfo *a4, struct Js::JavascriptFunction *a5, unsigned __int16 a6, bool a7, unsigned int a8)
    {
      ...
      unsigned __int16 v12; // bp@1
      signed __int64 v13; // rbx@3
      signed __int64 v14; // r8@3
      __int16 v15; // r9@3
      ... 
      v9 = a2;
      v10 = this;
      v11 = a4;
      v12 = a3; // a3  callSiteId 
      ...
      v13 =0x10 * a3;
      v14 = v13 + *((_QWORD *)this + 1);//callSiteInfo
      v15 = *(_WORD *)(v14 + 2);//out of bound read 
      if ( v15 >= 0 )
      {
        v16 = *(_DWORD *)(v14 + 8);
        LODWORD(v17) = -4;
        if ( v16 == -4 )
          return result;
      ...
根据 3.1 步骤的漏洞异常信息时，rbp=0x000000000000fefa，及其上面的源代码与汇编代码的对比发现，callSiteId = a3 =
v12 = bp = 0xfefa。
    0:017> dq rcx  + 0x8
    000001aee1be3028  000001aee1be30b0 0000000000000000
    000001aee1be3038  0000000000000000 0000000000000000
    000001aee1be3048  0000000000000000 0000000000000000
    000001aee1be3058  000001aee1be3140 0000000000000000
    000001aee1be3068  000001aee1bf313f 0000000000000000
    000001aee1be3078  0000000000000000 0000000000000000
    000001aee1be3088  0000000000000000 0000000000000009
    000001aee1be3098  0000000000000000 ffffffff00000000
此时:
    callSiteInfo = * ((QWORD * )this + 1) => poi(rcx + 0x8) = 0x000001aee1be30b0
    r8 = (callSiteInfo + callSiteId  *  0x10) = 0x000001aee1be30b0 + 0xfefa  *  0x10 = 0x000001aee1ce2050 
    0:017> dd 000001aee1be30b0
    000001aee1be30b0  00000009 00000000 ffffffff 00000000
    000001aee1be30c0  00000009 00000000 ffffffff 00000000
    000001aee1be30d0  00000009 00000000 ffffffff 00000000
    000001aee1be30e0  00000009 00000000 ffffffff 00000000
    000001aee1be30f0  00000009 00000000 ffffffff 00000000
    000001aee1be3100  00000009 00000000 ffffffff 00000000
    000001aee1be3110  00000009 00000000 ffffffff 00000000
    000001aee1be3120  00000009 00000000 ffffffff 00000000
通过dd 0x000001aee1be30b0 命令查看callSiteInfo内容是可以访问的，初步判定崩溃是因callSiteId越界导致的内存越界读。
[](http://blogs.360.cn/post/Microsoft%20Edge%20Chakra%20OP_NewScObjArray%20Type%20Confusion%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8.html#toc-f06)**3.2.2
创建callSiteInfo对象的代码**
源代码如下：
    DynamicProfileInfo* DynamicProfileInfo::New(Recycler* recycler, FunctionBody* functionBody, bool persistsAcrossScriptContexts)
        {
            size_t totalAlloc = 0;
            Allocation batch[] =
            {
                { (uint)offsetof(DynamicProfileInfo, callSiteInfo), functionBody->GetProfiledCallSiteCount() * sizeof(CallSiteInfo) },// 计算分配callSiteInfo对象的内存大小
     ...
             };
            for (uint i = 0; i  0)
                {
                    Field(BYTE*)* field = (Field(BYTE*)*)(((BYTE*)info + batch[i].offset));
                    *field = current;
                    current += batch[i].size;
                }
            }
            info->Initialize(functionBody);
            return info;
反汇编代码如下：
    char *__fastcall Js::DynamicProfileInfo::New(struct Memory::Recycler *a1, struct Js::FunctionBody *a2)
    {
     ...
      size_t v26; // rdx@16
      char *v27; // rbx@18
    ...
      else
      {
        v26 = v25 + 144;
        if ( v25 + 144  totalAlloc + sizeof(DynamicProfileInfo) = 内存分配长度
      }
      *((_WORD *)v27 + 56) = ValueType::Uninitialized;
      v27[114] = 0;
      v27[136] = 1;
    LABEL_20:
      v28 = (signed __int64)(v27 + 144);
      v29 = 12i64;
      v30 = &v38;
      do
      {
        v31 = *((_QWORD *)v30 + 1);
        if ( v31 )
        {
          *(_QWORD *)&v27[*v30] = v28;
          v28 += v31;
        }
        v30 += 4;
        --v29;
      }
      while ( v29 );
      Js::DynamicProfileInfo::Initialize((Js::DynamicProfileInfo *)v27, (struct Js::FunctionBody *const )retaddr);
      return v27;
    }
用命令 ba chakra!Js::DynamicProfileInfo::New
在DynamicProfileInfo::New函数位置打个断点，动态调试之后，可得如下信息：
    0:017> r
    rax=00000000000100e7 rbx=0000015bce310348 rcx=00000153adba97b0
    rdx=0000000000010177 rsi=0000000000000000 rdi=0000015bce3101b0
    rip=00007ff88ef9a7c3 rsp=0000004016ffba50 rbp=0000004016ffbb50
     r8=0000000000000004  r9=0000000000000001 r10=00000153adba97b0
    r11=0000004016ffbc70 r12=0000004016ffc0a8 r13=0000000000000001
    r14=0000015bb37203c0 r15=0000000000000001
    iopl=0         nv up ei pl nz na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    chakra!Js::DynamicProfileInfo::New+0x213:
    00007ff88ef9a7c3 e8c830f0ff      call    chakra!Memory::Recycler::AllocLeafZero (00007ff8`8ee9d890)
此时可知:
    (v26 = rdx  = totalAlloc + sizeof(DynamicProfileInfo)  = 0x10177) 
    void InterpreterStackFrame::OP_NewScObjArray_Impl(const unaligned T* playout, const Js::AuxArray *spreadIndices)
    {
        // Always profile this operation when auto-profiling so that array type changes are tracked
        if (!Profiled && !isAutoProfiling)
        Assert(!Profiled);
        {
            OP_NewScObject_Impl(playout, Js::Constants::NoInlineCacheIndex, spreadIndices);
            return;
        }
        Arguments args(CallInfo(CallFlags_New, playout->ArgCount), m_outParams);
        uint32 spreadSize = 0;
        if (spreadIndices != nullptr){...}
        else
        {
            SetReg(
            (RegSlot)playout->Return,
            ProfilingHelpers::ProfiledNewScObjArray(
                GetReg(playout->Function),
                args,
                function,
                static_cast *>(playout)->profileId,//profileId   callSiteId
                static_cast *>(playout)->profileId2));
        }
        PopOut(playout->ArgCount);
        }
根据上面的红色部分，我们可知，callSiteId来自playout参数的profileId的成员变量。
**3.2.4 追溯playout参数的来源**
根据 3.1 步骤的 kb
栈回溯命令可知，playout是上层调用ProcessUnprofiled函数进来的，ProcessUnprofiled的源代码调用栈追溯路径如下：
    InterpreterLoop.inl:
    ...
    case INTERPRETER_OPCODE::MediumLayoutPrefix:
            {
                Var yieldValue = nullptr;
                ip = PROCESS_OPCODE_FN_NAME(MediumLayoutPrefix)(ip, yieldValue);==>
                CHECK_YIELD_VALUE();