# Open Geospatial Consortium, Inc. - SQL with Geometry Types

**Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.**
**OGC 06-104r4**

## 6.2.7 Geometry Values and Spatial Reference Systems

To model spatial reference system (SRS) information, each geometric object in the SQL with Geometry Types implementation is associated with a specific SRS as defined by SQL/MM. This ensures that all geometric data is properly referenced to a consistent coordinate system.

### 6.2.8 Access to Geometry Values in the SQL with Geometry Type Case

Spatial data can be accessed using the SQL query language, which is extended with routines to create and manipulate Geometry Types. These routines allow for the creation, observation, and modification of geometric attributes as specified by SQL/MM.

### 6.2.9 Text

#### 6.2.9.1 Text Object Implementation

##### 6.2.9.1.1 Text Objects

Text objects, which can be used either as feature attributes or as free-floating objects, are defined in section 7.2.20.

#### 6.2.9.2 Metadata Table (View)

The metadata table allows common information to be stored at a table level rather than for each individual record, keeping the data compact. There is no specific specification for this metadata table, but it must include the data requirements outlined in Table 3. The metadata table would look like this:

```sql
CREATE TABLE ANNOTATION_TEXT_METADATA (
    F_TABLE_CATALOG CHARACTER VARYING NOT NULL,
    F_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
    F_TABLE_NAME CHARACTER VARYING NOT NULL,
    F_TEXT_COLUMN CHARACTER VARYING NOT NULL,
    A_TEXT_DEFAULT_MAP_BASE_SCALE CHARACTER VARYING,
    A_TEXT_DEFAULT_EXPRESSION CHARACTER VARYING,
    A_TEXT_DEFAULT_ATTRIBUTES CHARACTER VARYING
);
```

The fields in this table are described as follows:

- **F_TABLE_CATALOG**: Name of the table in which the text type values are stored.
- **F_TABLE_SCHEMA**: Schema of the table.
- **F_TABLE_NAME**: Name of the table.
- **F_TEXT_COLUMN**: Name of the column in which the text type values are stored.
- **A_TEXT_DEFAULT_MAP_BASE_SCALE**: Base map scale for displaying the text.
- **A_TEXT_DEFAULT_EXPRESSION**: Allows the actual text of a text object to come from data outside the text object. If this field is null, the individual text objects may have their own embedded text or nothing will be displayed. Any embedded text overrides this expression value.
- **A_TEXT_DEFAULT_ATTRIBUTES**: Stores common text attributes such as Text Style, Layout, and Leader Line Style. Individual row values override the metadata values.

During queries, client applications should include this expression in their select list to evaluate the text without additional database round trips.

### 7 Clause Component Specifications

#### 7.1 Components — Implementation of Feature Tables Based on Predefined Data Types

##### 7.1.1 Conventions

Table components are described in the context of a `CREATE TABLE` statement. Implementations may use base tables with different names and properties, exposing these components as updateable views, provided that the base tables enforce the same constraints. Table and column names are restricted to 18 characters for broad compatibility.

##### 7.1.2 Spatial Reference System Information

###### 7.1.2.1 Component Overview

The `SPATIAL_REF_SYS` table stores information on each spatial reference system used in the database.

###### 7.1.2.2 Table Constructs

```sql
CREATE TABLE SPATIAL_REF_SYS (
    SRID INTEGER NOT NULL PRIMARY KEY,
    AUTH_NAME CHARACTER VARYING,
    AUTH_SRID INTEGER,
    SRTEXT CHARACTER VARYING(2048)
);
```

###### 7.1.2.3 Field Description

- **SRID**: Unique identifier for the spatial reference system.
- **AUTH_NAME**: Name of the standard or standards body cited for the reference system (e.g., EPSG).
- **AUTH_SRID**: ID of the spatial reference system as defined by the authority.
- **SRTEXT**: Well-known Text Representation of the spatial reference system.

###### 7.1.2.4 Exceptions, Errors, and Error Codes

Error handling is accomplished using standard SQL status returns.

##### 7.1.3 Geometry Columns Information

###### 7.1.3.1 Component Overview

The `GEOMETRY_COLUMNS` table provides information on feature tables, spatial references, geometry types, and coordinate dimensions for each geometry column in the database.

###### 7.1.3.2 Table or View Constructs

```sql
CREATE TABLE GEOMETRY_COLUMNS (
    F_TABLE_CATALOG CHARACTER VARYING NOT NULL,
    F_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
    F_TABLE_NAME CHARACTER VARYING NOT NULL,
    F_GEOMETRY_COLUMN CHARACTER VARYING NOT NULL,
    G_TABLE_CATALOG CHARACTER VARYING NOT NULL,
    G_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
    G_TABLE_NAME CHARACTER VARYING NOT NULL,
    STORAGE_TYPE INTEGER,
    GEOMETRY_TYPE INTEGER,
    COORD_DIMENSION INTEGER,
    MAX_PPR INTEGER,
    SRID INTEGER NOT NULL REFERENCES SPATIAL_REF_SYS,
    CONSTRAINT GC_PK PRIMARY KEY (F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME, F_GEOMETRY_COLUMN)
);
```

###### 7.1.3.3 Field Description

- **F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME**: Fully qualified name of the feature table containing the geometry column.
- **F_GEOMETRY_COLUMN**: Name of the column in the feature table that is the geometry column.
- **G_TABLE_CATALOG, G_TABLE_SCHEMA, G_TABLE_NAME**: Name of the geometry table and its schema and catalog.
- **STORAGE_TYPE**: Type of storage used for the geometry column (0 = normalized, 1 = binary, NULL = geometry types).
- **GEOMETRY_TYPE**: Type of geometry values stored in the column.
- **COORD_DIMENSION**: Number of ordinates used in the geometry.
- **MAX_PPR**: Points per row (only for normalized geometry).
- **SRID**: ID of the spatial reference system used for the geometry.

###### 7.1.3.4 Exceptions, Errors, and Error Codes

Error handling uses standard SQL status returns for SQL/CLI.

##### 7.1.4 Feature Tables

Feature tables define columns by feature attributes, including one or more geometric attributes. Each geometric attribute includes geometry via a foreign key to a geometry table. Features may have a unique primary key, and feature-to-feature relations can be defined as foreign key references.

General format of a feature table:

```sql
CREATE TABLE <feature_table> (
    <geometric_attribute> FOREIGN KEY REFERENCES <geometry_table>,
    ... (other attributes for this feature table),
    PRIMARY KEY <primary_key>
);
```

##### 7.1.5 Geometry Tables

###### 7.1.5.1 Component Overview

Geometry tables store geometric objects corresponding to geometry columns in feature tables. Geometric objects can be stored as individual ordinate values or as binary objects using the Well-known Binary Representation for Geometry.

###### 7.1.5.2 Geometry Stored Using SQL Numeric Types

###### 7.1.5.2.1 Table Constructs

```sql
CREATE TABLE <geometry_table> (
    GID INTEGER NOT NULL,
    ESEQ INTEGER NOT NULL,
    ETYPE INTEGER NOT NULL,
    SEQ INTEGER NOT NULL,
    X1 NUMERIC,
    Y1 NUMERIC,
    Z1 NUMERIC, -- Optional if Z-value is included
    M1 NUMERIC, -- Optional if M-value is included
    ... (repeated for each ordinate, for this Point),
    Xn NUMERIC,
    Yn NUMERIC,
    Zn NUMERIC, -- Optional if Z-value is included
    Mn NUMERIC, -- Optional if M-value is included
    CONSTRAINT GID_PK PRIMARY KEY (GID, ESEQ, SEQ)
);
```

###### 7.1.5.2.2 Field Descriptions

- **GID**: Identity of the geometric object.
- **ESEQ**: Identifies multiple components within a geometric object.
- **ETYPE**: Element type of the primitive element (1 = Point, 2 = LineString, 3 = Polygon).
- **SEQ**: Sequence of rows to define a geometric object.
- **X1, Y1, Z1, M1, ...**: Coordinates of the points.

###### 7.1.5.2.3 Exceptions, Errors, and Error Codes

Error handling uses standard SQL status returns for SQL/CLI.

###### 7.1.5.3 Geometry Stored Using SQL Binary Types

###### 7.1.5.3.1 Table Constructs

```sql
CREATE TABLE <geometry_table> (
    GID NUMERIC NOT NULL PRIMARY KEY,
    XMIN NUMERIC,
    YMIN NUMERIC,
    ZMIN NUMERIC, -- Optional if Z-value is included
    MMIN NUMERIC, -- Optional if M-value is included
    XMAX NUMERIC,
    YMAX NUMERIC,
    ZMAX NUMERIC, -- Optional if Z-value is included
    MMAX NUMERIC, -- Optional if M-value is included
    WKB_GEOMETRY BIT VARYING(<implementation size limit>)
);
```

###### 7.1.5.3.2 Field Descriptions

- **GID**: Identity of the geometric object.
- **XMIN, YMIN, ZMIN, MMIN, XMAX, YMAX, ZMAX, MMAX**: Bounding box coordinates.
- **WKB_GEOMETRY**: Well-known Binary Representation of the geometry.

**Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.**
**OGC 06-104r4**