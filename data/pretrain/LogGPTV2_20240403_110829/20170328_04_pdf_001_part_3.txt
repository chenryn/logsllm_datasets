Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
SQL functions are defined to construct instances of the above Types given Well-known Text or Binary
representations of the types. SQL functions defined on the types implement the methods described in the
Geometry Object Model.
6.2.7 Geometry values and spatial reference systems
In order to model Spatial Reference System information, each geometric object in the SQL with Geometry Types
implementation is associated with a Spatial Reference System as specified by SQL/MM.
In addition to the SQL/MM
6.2.8 Access to Geometry values in the SQL with Geometry Type case
Spatial data are accessed using the SQL query language extended with SQL routines to create Geometry Types
as well as routines to observe or mutate their attributes, as specified by SQL/MM..
6.2.9 Text
6.2.9.1 Text Object Implementation
6.2.9.1.1 Text Objects
The text object, and their component elements which can be used either as a feature attribute or as a free-floating
object, is defined in 7.2.20.
6.2.9.2 Metadata Table (View)
The metadata at a table level allows common information to be stored at a common level and not for each record.
This keep the data for each record as compact as possible. There is no specific specification for this metadata
table. But the data requirements in Table 3 must be available from the metadata store. This data if created as a
table would look like this:
CREATE TABLE ANNOTATION_TEXT_METADATA AS
{
F_TABLE_CATALOG AS CHARACTER VARYING NOT NULL,
F_TABLE_SCHEMA AS CHARACTER VARYING NOT NULL,
F_TABLE_NAME AS CHARACTER VARYING NOT NULL,
F_TEXT_COLUMN AS CHARACTER VARYING NOT NULL,
A_TEXT_DEFAULT_MAP_BASE_SCALE AS CHARACTER VARUONG,
A_TEXT_DEFAULT_EXPRESSION AS CHARACTER VARYING,
A_TEXT_DEFAULT_ATTRIBUTES AS CHARACTER VARYING
}
The fields in the table above are described in shall be a view of database administration tables and must contain
the following fields for each text column (column of a ANNOTATION_TEXT type):
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xvii
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Table 3: Text metadata attributes
FIELD DEFINITION COMMENT
F_TABLE_CATALOG Name of the table in Databases have format for this based on
which the text type SQL:1999.
F_TABLE_SCHEMA
values are stored.
F_TABLE_NAME
F_TEXT_COLUMN_NAME Name of the column in Databases have format for this based on
which the text type SQL:1999. This column in the feature table
value are stored. described above must be of type
ANNOTATION_TEXT.
A_TEXT_DEFAULT_MAP_BASE_SCALE The base map scale for
which the text will be
displayed
A_TEXT_DEFAULT_EXPRESSION This column allows the Any valid database column expression resulting
actual text of a text in a string is acceptable. The expression is
object to come from evaluated for the each row. If this field is null, the
data outside the text individual text objects may have their own
object VALUE field. embedded text or nothing shall be displayed. Any
embedded text shall override this expression
value.
During query to support display, client
applications should add this expression to their
select list so that any returned records will have
the information needed to evaluate this expression
without round tripping back to the database. .
Note that this is the one case where the data
critical to the display of text is stored outside the
text object or metadata. It should be obvious to
anyone changing the VALUE field that they are
changing the text object. It may not be obvious to
someone updating a column covered by the text
expression that they are affecting the text object
display.
A_TEXT_DEFAULT_ATTRIBUTES As many text attributes The Text Style, Layout and Leader Line Style
may be common in one described below may be stored in the metadata as
table, the database may well as the individual rows. Any values in the
store the common ones individual rows shall override the metadata
once here and allow for values. The resulting attributes are an overlay of
individual row (record) the metadata attributes and individual row
overrides. attribute values.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
7 Clause component specifications
7.1 Components — Implementation of feature tables based on predefined data types
7.1.1 Conventions
Table components are described in the context of a CREATE TABLE statement. Implementations may use base
tables with different names and properties, exposing these components as updateable views, provided that the
base tables defined by the implementation enforce the same constraints.
Table names and column names have been restricted to 18 characters in length to allow for the widest possible
implementation.
7.1.2 Spatial reference system information
7.1.2.1 Component overview
The Spatial Reference Systems table, which is named SPATIAL_REF_SYS, stores information on each spatial
reference system used in the database.
7.1.2.2 Table constructs
The following CREATE TABLE statement creates an appropriately structured SPATIAL_REF_SYS table. This table
may be an updatable view of an implementation-specific table. Implementations shall either use this table format
or provide stored procedures to create, to populate and to maintain this table
CREATE TABLE SPATIAL_REF_SYS
(
SRID INTEGER NOT NULL PRIMARY
KEY,
AUTH_NAME CHARACTER VARYING,
AUTH_SRID INTEGER,
SRTEXT CHARACTER VARYING(2048)
)
7.1.2.3 Field description
These fields are described as follows:
a) SRID — an integer value that uniquely identifies each Spatial Reference System within a
database;
b) AUTH_NAME — the name of the standard or standards body that is being cited for this reference
system. EPSG would be an example of a valid AUTH_NAME;
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xix
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
c) AUTH_SRID — the ID of the Spatial Reference System as defined by the Authority cited in
AUTH_NAME;
d) SRTEXT — The Well-known Text Representation of the Spatial Reference System.
7.1.2.4 Exceptions, errors and error codes
Error handling shall be accomplished by using the standard SQL status returns.
7.1.3 Geometry columns information
7.1.3.1 Component overview
The GEOMETRY_COLUMNS table provides information on the feature table, spatial reference, geometry type, and
coordinate dimension for each Geometry column in the database. This table may be an updatable view of an
implementation-specific table. Implementations shall either use this table format or provide stored procedures to
create, to populate and to maintain this table
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
7.1.3.2 Table or view constructs
CREATE TABLE GEOMETRY_COLUMNS (
F_TABLE_CATALOG CHARACTER VARYING NOT NULL,
F_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
F_TABLE_NAME CHARACTER VARYING NOT NULL,
F_GEOMETRY_COLUMN CHARACTER VARYING NOT NULL,
G_TABLE_CATALOG CHARACTER VARYING NOT NULL,
G_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
G_TABLE_NAME CHARACTER VARYING NOT NULL,
STORAGE_TYPE INTEGER,
GEOMETRY_TYPE INTEGER,
COORD_DIMENSION INTEGER,
MAX_PPR INTEGER,
SRID INTEGER NOT NULL
REFERENCES SPATIAL_REF_SYS,
CONSTRAINT GC_PK PRIMARY KEY
(F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME, F_GEOMETRY_COLUMN)
)
7.1.3.3 Field description
These fields are described as follows:
a) F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME — the fully qualified name of the feature table
containing the geometry column.
b) F_GEOMETRY_COLUMN — the name of the column in the feature table that is the Geometry Column. This
column shall contain a foreign key reference into the geometry table for an implementation based on
predefined data types. For a geometry types implementation, this column may contain either a foreign key to
a geometry extent table or a SQL UDT.
c) G_TABLE_CATALOG, G_TABLE_SCHEMA, G_TABLE_NAME — the name of the geometry table and its schema and
catalog. The geometry table implements the geometry column. In a geometry types implementation that
stores the geometry in the F_GEOMETRY_COLUMN, these columns will be identical to the F_TABLE_CATALOG,
F_TABLE_SCHEMA, F_TABLE_NAME column values.
d) STORAGE_TYPE — the type of storage being used for this geometry column:
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xxi
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
0 = normalized geometry implementation,
1 = binary geometry implementation (Well-known Binary Representation for Geometry).
NULL = geometry types implementation,
e) GEOMETRY_TYPE — the type of geometry values stored in this column. The use of a non-leaf Geometry class
name from the Geometry Object Model for a geometry column implies that domain of the column corresponds
to instances of the class and all of its subclasses. The suffixes "Z", "M" and "ZM" are three distinct copies of
the geometry hierarchy as presented in Figure 4. If the value is NULL, then the appropriate GEOMETRY
subtype is used consistent with the COORD_DIMENSION and SRID is implied. This code list is a subset of the
list presented in Part 1, Table 7.
Table 4: Geometry type codes
Code Geometry type Coordinates
0 GEOMETRY \\ IN X Y
1 POINT \\ IN X Y
2 LINESTRING \\ IN X Y
3 POLYGON \\ IN X Y
4 MULTIPOINT \\ IN X Y
5 MULTILINESTRING \\ IN X Y
6 MULTIPOLYGON \\ IN X Y
7 GEOMCOLLECTION \\ IN X Y
13 CURVE \\ IN X Y
14 SURFACE \\ IN X Y
15 POLYHEDRALSURFACE \\ IN X Y
1000 GEOMETRYZ \\ IN X Y Z
1001 POINTZ \\ IN X Y Z
1002 LINESTRINGZ \\ IN X Y Z
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
Code Geometry type Coordinates
1003 POLYGONZ \\ IN X Y Z
1004 MULTIPOINTZ \\ IN X Y Z
1005 MULTILINESTRINGZ \\ IN X Y Z
1006 MULTIPOLYGONZ \\ IN X Y Z
1007 GEOMCOLLECTIONZ \\ IN X Y Z
1013 CURVEZ \\ IN X Y M
1014 SURFACEZ \\ IN X Y M
1015 POLYHEDRALSURFACEZ \\ IN X Y Z
2000 GEOMETRY \\ IN X Y M
2001 POINTM \\ IN X Y M
2002 LINESTRINGM \\ IN X Y M
2003 POLYGONM \\ IN X Y M
2004 MULTIPOINTM \\ IN X Y M
2005 MULTILINESTRINGM \\ IN X Y M
2006 MULTIPOLYGONM \\ IN X Y M
2007 GEOMCOLLECTIONM \\ IN X Y M
2013 CURVEM \\ IN X Y M
2014 SURFACEM \\ IN X Y M
2015 POLYHEDRALSURFACEM \\ IN X Y M
3000 GEOMETRYZM \\ IN X Y Z M
3001 POINTZM \\ IN X Y Z M
3002 LINESTRINGZM \\ IN X Y Z M
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xxiii
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Code Geometry type Coordinates
3003 POLYGONZM \\ IN X Y Z M
3004 MULTIPOINTZM \\ IN X Y Z M
3005 MULTILINESTRINGZM \\ IN X Y Z M
3006 MultiPolygonZM \\ IN X Y Z M
3007 GEOMCOLLECTIONZM \\ IN X Y Z M
3013 CURVEZM \\ IN X Y Z M
3014 SURFACEZM \\ IN X Y Z M
3015 POLYHEDRALSURFACEZM \\ IN X Y Z M
f) COORD_DIMENSION — the number of ordinates used in the complex, usually corresponds to the number of
dimensions in the spatial reference system. If an "M" ordinate is included it shall be one greater than the
number of dimensions of the spatial reference system.
g) MAX_PPR — (This value contains data for the normalized geometry implementation only) Points per row, the
number of Points stored as ordinate columns in the geometry table. This value may be NULL only if a binary
storage or SQL geometry type implementation is used.
h) SRID — the ID of the Spatial Reference System used for the coordinate geometry in this table. It is a foreign
key reference to the SPATIAL_REF_SYS table and must be specified.
7.1.3.4 Exceptions, errors and error codes
Error handling shall be accomplished by using the standard SQL status returns for SQL/CLI.
7.1.4 Feature tables
The columns in a feature table are defined by feature attributes; one or more of the feature attributes will be a
geometric attribute. The basic restriction in this standard for feature tables is that for each geometric attribute,
they include geometry via a FOREIGN KEY to a geometry table. Features may have a feature attribute that is
unique, serving as a PRIMARY KEY for the feature table. Feature-to-feature relations may similarly be defined as
FOREIGN KEY references where appropriate.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
The general format of a feature table shall be as follows:
CREATE TABLE  (
 ,
… (other attributes for this feature table)
 ,
… (other geometry columns for this feature table)
PRIMARY KEY ,
FOREIGN KEY  REFERENCES ,
… (other geometry column constraints for this feature table)
)
The geometric attribute foreign key reference applies only for the case where the geometry table stores geometry
in binary form. In the case where geometry is stored in normalized form, there may be multiple rows in the
geometry table corresponding to a single geometry value. In this case, the geometry attribute reference may be
captured by a check constraint that ensures that the Geometry Column value in the feature table corresponds to
the geometry-ID value for one or more rows in the geometry table.
7.1.5 Geometry tables
7.1.5.1 Component overview
Each Geometry table stores geometric objects corresponding to a Geometry column in a feature table. Geometric
objects may be stored as individual ordinate values, using SQL numeric types, or as binary objects, using the
Well-known Binary Representation for Geometry. Table schemas for both implementations are provided.
7.1.5.2 Geometry stored using SQL numeric types
7.1.5.2.1 Table constructs
The following CREATE TABLE statement creates an appropriately structured table for Geometry stored as individual
ordinate values using SQL numeric types. Implementations shall either use this table format or provide stored
procedures to create, to populate and to maintain this table.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xxv
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
CREATE TABLE 
(
GID INTEGER NOT NULL,
ESEQ INTEGER NOT NULL,
ETYPE INTEGER NOT NULL,
SEQ INTEGER NOT NULL,
X1 ,
Y1 ,
Z1 ,
!Optional if Z-value is included
M1 ,
!Optional if M-value is included
... 
X ,
Y ,
Z1 ,
!Optional if Z-value is included
M1 ,
!Optional if M-value is included
...,
CONSTRAINT GID_PK PRIMARY KEY (GID, ESEQ, SEQ)
)
7.1.5.2.2 Field descriptions
These field descriptions are follows:
a. GID — identity of this geometric object;
b. ESEQ — identifies multiple components within a geometric object;
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4
c. ETYPE — element type of this primitive element for the geometric object. The following values are defined
for ETYPE:
1 Point,
2 LineString,
3 Polygon;
d. SEQ — identifies the sequence of rows to define a geometric object;
e. X1 — first ordinate of first Point;
f. Y1 — second ordinate of first Point;
g. Z1 — third ordinate of first Point;
h. M1 — fourth ordinate of first Point;
i. ...— (repeated for each ordinate, for this Point);
j. ... — (repeated for each coordinate, for this row);
k. X — first ordinate of last Point. The maximum number of Points per row ‗MAX_PPR' is
consistent with the information in the GEOMETRY_COLUMNS table;
l. Y — second ordinate of last Point;
m. .Z — third ordinate of first Point;
n. M fourth ordinate of first Point;
o. .. — (repeated for each ordinate, for this last Point);
p.  — other attributes can be carried in the Geometry table for specific feature schema.
7.1.5.2.3 Exceptions, errors and error codes
Error handling shall use the standard SQL status returns for SQL/CLI.
7.1.5.3 Geometry stored using SQL binary types
7.1.5.3.1 Table constructs
The following CREATE TABLE statement creates an appropriately defined table for Geometry stored using the Well-
known Binary Representation for Geometry. The size of the WKB_GEOMETRY column is defined by the
Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved. xxvii
OGC 06-104r4 Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.
implementation. Implementations shall either use this table format or provide stored procedures to create,
populate and maintain this table.
CREATE TABLE 
(
GID NUMERIC NOT NULL PRIMARY KEY,
XMIN ,
YMIN ,
ZMIN ,
MMIN ,
XMAX ,
YMAX ,
ZMAX ,
MMAX ,
WKB_GEOMETRY BIT VARYING(implementation size limit),
{ }*
)
7.1.5.3.2 Field descriptions
These fields are described as follows: