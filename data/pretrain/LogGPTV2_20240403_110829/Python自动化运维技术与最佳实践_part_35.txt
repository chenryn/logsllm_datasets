服务器端以Web的形式作为服务平台，以Django作为开发框架，结合rrdtool模块实
现了业务添加（rdtoolcreate）、报表绘图（rdtoolgraph）等功能。另外，项目改用直接操作
SQL方式来代替Django的ORM，为熟悉SQL的人员提供另一种选择。下面详细介绍项目
配置及功能实现方法。
15.5.1Django配置
作为一个新Django项目，第一步需要创建一个项目，操作如下：
AAR/e1ep/ p3 4
 d)ango-admin.py startproject Servermonitor
在创建的omaudit目录中修改urls.py，添加App的URL映射规则，内容如下：
from django.conf.urls.defaults inport *
urlpatterns = patterns (*webmonitor,views*,
（r^S*，*index*），晚射到index方法，实现前输首页道染
（radd/，'add'），映射到add 方法，实现新增业务页面流染
（*add_do /，*adddo*)，映射列 adddo 方法。实现新增业务提交康务器增处理
(r*monitor1ist/*, *monitorlist′),
映射到monitorli.st方法，实现首瑞扫描记录列表展示
修改项目setings-py，关键配置项如下：
inport os
BASE_DIR = os,path,dirname (os,path.abspath (_file_))
SYSTEM_NAME=”分考式质量监控平台V1.0”
定义系统名称
---
## Page 285
264第三部分案例篇
IDC={*ct*：*电等·,*cnc：*联通·,cmcc*：*多动*)
定文采集IDC
PNGPATH=BASE_DIR+*/s1te_ned1a/rrdtoo1*
RRDPATH=BASE_DIR+*/zrd*
rrdtoolzxd文件存储那徒
#rrdtool 生成png奇储路径
定义 vebnon.itor app 路径，调用 graphrrd.sh用 rrd 绘图相关参数
MAINAPPPATH=BASE_DIR+*/webmoni tor*
TIME_ALARM=1
定义“业务请求响应时同统计”图表Y独最大值，单位为秒
TIME_YMAX=1
DOWN_APSED_YMAX=8388608
定义“业务下载速度统计”图表Y轴最大值，单位为字节
项目包括两个App，其中，webmonitor为功能应用，publicclass用于提供公共方法调用。
以下结合具体功能对两个App进行介绍。
15.5.2业务增加功能
业务增加模块后台实现了两个功能点：一为将业务信息写人MySQL数据库，包括业务
名称、监控URL、告警通知方式、探测点及规则等：二为创建所选择的探测点三个图表对应
的rdtool文件，图表包括业务请求响应时间统计、业务下载速度、业务可用性统计。前端功
能截图如图15-4所示。
业务名称
SIEUFL,:
通方式:
 E 件 C MSN/Yahos
210状老码自宝文道国务
增加返日
图15-4前编功能截图
创建rrd文件功能利用了mdtool模块的createO方法实现，实现源码如下：
=#*
 创建 rxd
=create_rrd (ur1)
def create_rrd (ur1) :
domain=GetURLdomain (ur1)
URL=ur1
调用 GetURLdoma Ln () 方法获取 URL 域名都分
[1=018
cur_time=str [1nt (time,time ()))+获取当前 Linux 时间数,作为 rrdool.create 方法的
start $数g
---
## Page 286
第15章构建分布式质量监控平台265
HTD=getID (URL)
调用get.ID (1方法获取ORL对应的所有采集点ID
IGIR UT PT 30g
通历采集点 ID
try:
参数指定 zrd 文件路径。如“项目根目录 /zrd/www.baidu.con/17_time，rrd”;
step指定步长，设置为300秒，即每属5分钟收到一个值：start指定第一条记录的起
始时间，使用 cur_time 变量指定
rrd_t.ime=zrdtool, create (sett.ings.RRDPATH+*/*+str (domaln) +* / *+str (1d) + \
'_time.rrd*,*--step',*30o*,*--start*,cur_tine,
*DS:NAMEL0OKUP_TIME :GAUGB: 600 :0:U* ,
定义数据5个数据源（DS）
'DS: CONNECT_TIME:GAUGE : 600:0:U*,
GAUGE计量类型，收到数据后
直接存入RRD：
*DS: PRSTRANSFER_TIME:GAUGE: 600 :0:U*,
*600为心跳值，即两
个刻度无效时，使用
*DS:STARTTRANSFER_TIME : GAUGE : 60O : 0:U*,
UNOWN填克：0:U
输入数据的界限
*DS :TOTAL_TIME : GAUGE: 600 : 0 :U′ ,
*RRA:AVERAGE:0.5:1:600',
定义数据春放格式（RRA），分别为平均、
最大、最小合并数据
*RRA:AVERAGE: 0 5:6:700*,
方式，其他参数说明可参考3.2节案例
*RRA:AVERAGE:0 . 5:24 :775*,
源码说明
‘RRA:AVERAGE: 0 , 5:288:797 *,
'RRA:MAX: 0 .5: 1 : 600 *,
*RRA:MAX:0.5:24:775*,
*RRA:MAX: 0 . 51 6 : 700 * ,
*RRA:MAX: 0.5: 444:797*,
*RRA:MIN: 0.5:6:700*,
*RRA:MIN: 0.5:1: 600 ',
*RRA:MIN:0.5:24:775*,
*RRA:MIN: 0 .5: 444 :797*)
if rrd_tine1
（其他两张图表rrdtool.create方法类位，此处省略)
1ogging.error (rrdtool,error ())
except Exception,e:
logging,error(*create rrd error!*+str (e))
针对“www.baidu.com”业务增加成功后，执行“Ilrrd/www.baidu.com”，输出已生成
的rrd文件清单，见图15-5。前缓“17_、18_”代表不同运营商探测点ID。对采集端而言，
一个运营商被视为一个独立业务、产生的数据也是独立的。比如，在增加业务时选择了电
信、联通两个运营商探测点，对该业务做数据采集时，将产生两份数据。
totsl984
Jn2816:318..d
-n-n-1rootroot718ae3un28.16:3018.unovolable.rrg
图15-5生成不同运营商的md数据文件
---
## Page 287
266第三部分案例篇
15.5.3业务报表功能
分布式质量监控平台提供了非常丰富的报表功能，常规报表包括最近3小时、当天、当
前月、当前年：自定义报表根据选择的时间范围定制。在页面中提交前保持起始时间与结束
时间为空则为常规报表，最新3小时报表具体见图15-6。
ER9IA
交添加位月
19
图15-6输出业务“当前（最新3小时”报表
自定义报表根据选择的时间范围进行rrdtool查询，结果如图15-7所示。
交本加月
#
8t; 162)
28m
图15-7输出自定义时间报表
---
## Page 288
第15章构建分布式质量监控平台267
两种报表实现原理是通过定制graph方法的“--start”参数来实现，如常规报表中当前、
日、月、年图表对应分别为“-3h、-1day、-lmonth、-lyear”，参数“-end”为当前时间；
自定义报表采用提交的起始时间与结束时间来对应“--start”与”--end”参数。平台rrdtool
graph生成图表时要求有中文支持，但Python的mdtool模块没有封装“-font”参数，为了
解决此问题，最终采用原生mdtool 命令行方案，在Django中视图中通过os.system0方法来
调用，实现关键代码如下：
[ /data/www/Servermonitor/webmonitor/graphrrd.sh 
#1/b1n/sh
rrdfile=$1
接收rrdtool文件路径
pngfi1e=$2
接收生成png 图片路径
$=adAp1a
接收rrd 类到。区分定义的三种图表
appnane=$4
接收业务名称
S$=11e1sydexg
接收rrdtoo1起始时间
GraphEnd=$6
接收rrdtoo1 结末时间
Ls=xeu/
接收Y独最大值
Alarn=$8
接收告警红线值
定义两种字体
rrdtool_Eont_msyhbd=*/data/vvu/Servermonitor/site_media/font/msyhbd, ttf*
rrdtoo1_font_msyh=*/data/wm/Servermonitor/site_media/font/msyh.ttf*
if [ *$rrdtype* = *time" 1; then
\c0z q-00s (etgbud)s udeabtoospxx/uq/tooapxx/Teot/xem/
nTITLE:9：S（rrdtoo1_font_msyhbd]\定义标则字体
-n UNIr:8:$(rrdtoo1_font_msyh) \
定文Y轴单位字体
-n LEGEND:8:$(rrdtoo1_font_nsyh) \
定义图例字体
=n AXIs:8:$(rrdtoo1_font_msyh) \
定文坐标轴字体
-C SHADEA#808080\
左上地框期色
-C SHADEB#808080 \
右上边框期色
-c FRAME+006600 \
数据标记说明边枢期色
=C ARROW#FF000O \
#X、Y 轴骨头颜色
000000#SIXV 2-
#X、Y轴线期色
-C
0000008O3
图形所有字体期色
=c CANVASfeeffff \
西步数据区域货董期色
-c BAck+ffffff \
图形背景（不含数据区域）颜色
=V速度[秒}\
西表标
--start ${GraphStart}\
--end S(GraphEnd）\西表结京时间
图表起始时间
--1ower-1imit=0 1
限制Y轴的下限
--base=1024 \
修改1k对应的刻度，账认为1000
 S(ymax) -r \
定义Y轴最大值
DEF :NAMELOOKUP_TIME=S {r rdfi1e} :NAMELOOKUP_TIME:AVERAGE \
定义数据源及合并统计
类型力AVERAGE
DEF :CONNBCT_TIME=$ (rrdti1e) :CONNECT_TIME :AVERAGE \
DEF: PRETRANSFER_TIME=S(rrdE1e ) :PRETRANSFER_TIME:AVERAGE \
DEF :STARTTRANSFER_TINE=S (rrdfi1e) :STARTTRANSFER_TIME:AVERAGE 1
DEF : TOTAL_TIME=$(rrdfi1e) :TOTAL_7IME:AVERAGE \
---
## Page 289
268第三部分案例篇
COMMENT:* \n* \
AREA：7OTAL_TIME#0011：典时\
用“方块”的形式来绘制“总共时间”数誉
#GPRINT定义图表下方的文字说明，参数TOTAL_TIME定又数据来源变量；LAST定又合并（统计）类型。
其他部分为输出的文字及数值格式
指基示者前慎：
GPRINT:TOTAL_TIME:LAST:* 当前\:$0.21 Ss"\
GPRINT:TOTAL_TIME:AVERAGE;"平均 \:$0 ,21f 4Ss*\
GPRINT:TOTAL_TIME:MAX:" R大 \:$O.21f Ss"
GPRINT:TOTAL_TIME:KIN:*最小\:$O.21f Ss"\
COMENT:* \n" \
LINE1:NAMELOOKUP_TIMEeeee0O:城名解析\
用“线条”的形式来绘制“域名解析”数据
GPRINT:KAMEL00KUP_TIME:LAST:* 鲁前\:$0 .21f Ss*\
GPRINT:NAMELOOKUP_7IME:AVERAGE:*平均\:$0 , 21f %Ss*
GPRINT:NAMELOOKUP_TIME:MAX:*大\：0,21f Ss*\
GPRINT:NAMELOOKUP_TIME:MIN:* R小 \:%0 ,21f Ss*
COMMSNT:* \n"\
COMENT:* \n" \
COHBNT:* \n* \
COMNT:\c\c\t\t\t\t\t1t\t\t最折\：（date+Ym-d\:x*n
（其像两张图表rrdtool graph 参数类似，此处省略）
生成的图表png文件在前端页面中进行引用：
下面为准染后的 HTML 标签
<1mg src=*/site_media/rrdtoo1/vwww.baidu.com/15_time,png?,Math.random(1:*
<6S=UPTA
---
## Page 290
第16章ClyAc16
构建桌面版C/S自动化运维平台
OManager与OMServer平台实现了相同的功能，最大的区别是OManager是基于C/S结
构（桌面版本）的，OMServer是B/S结构（Web版本）的。C/S结构相对于B/S结构，具有
交互性更强、存取模式更加安全、网络通信量低、响应速度更快、利于处理大量数据、可
调用操作系统API等特点。当然，它也有局限性，比如要求相对统一的硬件、操作系统（版
本、类型）等，由于在公司内部局城网使用且使用人群比较固定，这些条件基本都可以满足。
OManager是基于Python的wxpythonGUI（图形用户界面）开发，具备跨平台的能力，比如
在Linux桌面环境，源码无须做任何改动即可直接兼容，平台支持的系统有WindowsXP、
Windows 2000或Windows 2003、Windows 7等：支持Linux 2.6或以上内核，如Redhat、
Ubuntu等发行版。下面对平台进行全面介绍。
16.1平台功能介绍
与OMServer一样，OManager同样实现了一个集中式的Linux集群管理基础平台，支持
模块扩展功能，管理员可以在OManager平台添加集群任务模块，其中客户端模块采用XRC
（XMLResource）方式动态定制，服务器端则与OMServer共享一套主控服务器编。OManager
实现日常运维远程操作、文件分发、在线升级等功能；安全方面，采用加密（RC4算法）指
令传输、操作日志记录、个性化配置等；效率方面，管理员只需选择操作目标对象及操作
模块即可完成一个现网变更任务。另外在用户体验方面，模拟Limux终端效果，接收返回
串，并使用Psyco模块对Python运行程序进行加速。任何人都可以根据自身的业务特点对
---
## Page 291
270第三部分案例篇
OManager平台进行扩展，现已支持XML与现有资产平台进行对接。平台登录、管理界面见
图16-1 和图 16-2。
管理员登录
用产名：T
建码：
长：
图16-1平台登录页面
OManager服务器管理平台2014
图16-2平台主界面
16.2系统构架设计
OManager平台采用了两层设计模式。
---
## Page 292
第16章构建桌面版C/S自动化运维平台271
第一层为客户端交互层，采用了wxpython+xrc+rpyc+MySQL等技术，实现了客户端与
主控服务器端直连通信，rpyc分布式计算框架负责传输与计算，传输采用加密（RC4算法）
方式，保证平台整体安全性：
第二层为集群主控编服务层，支持Saltstack、Ansible、Func等平台，且具备多机服务的
能力。系统架构图见图16-3。
快集台
重自服
主控域（营）
周步文用
加用产
业务服务集
rpye:11511
第二
图16-3系统架构图
从图16-3中可以看出系统两个层次的结构，首先管理员在办公电脑安装OManager客户
端软件包，作为rpye客户端向rpye服务器发送加密指令串，指令串通过“RC4+b64encode+
密钥key”进行加密，rpye服务器端同时也是Saltstack、Ansible、Func 等的主控端，主控端
将接收的数据通过“RC4+b64decode+密钥key”进行解密，解析成OManager调用的任务模