## PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级 - 数据库慢、卡死、连接爆增、慢查询多、OOM、crash、in recovery、崩溃等怎么办?怎么优化?怎么诊断?  
### 作者        
digoal        
### 日期       
2017-04-24       
### 标签       
PostgreSQL , pg_stat_statements , TOP SQL    
----        
## 背景     
数据库是较大型的应用，对于繁忙的数据库，需要消耗大量的内存、CPU、IO、网络资源。    
SQL优化是数据库优化的手段之一，优化什么SQL效果最佳呢？首先要了解最耗费资源的SQL，即TOP SQL。    
从哪里可以了解数据库的资源都被哪些SQL消耗掉了呢？    
资源分为多个维度，CPU，内存，IO等。如何能了解各个维度层面的TOP SQL呢？    
pg_stat_statements插件可以用于统计数据库的资源开销，分析TOP SQL。    
## 一、安装pg_stat_statements    
如果您使用的是云数据库，跳过安装，到create extension 部分。   
pg_stat_statements是PostgreSQL的核心插件之一。可以在编译PostgreSQL时安装，也可以单独安装。    
编译时安装    
```    
make world    
make install-world    
```    
单独安装    
```    
cd src/contrib/pg_stat_statements/    
make; make install    
```    
## 二、加载pg_stat_statements模块    
```    
vi $PGDATA/postgresql.conf    
shared_preload_libraries='pg_stat_statements'    
```    
如果要跟踪IO消耗的时间，还需要打开如下参数    
```    
track_io_timing = on    
```    
设置单条SQL的最长长度，超过被截断显示（可选）    
```    
track_activity_query_size = 2048    
```    
## 三、配置pg_stat_statements采样参数    
```    
vi $PGDATA/postgresql.conf    
pg_stat_statements.max = 10000           # 在pg_stat_statements中最多保留多少条统计信息，通过LRU算法，覆盖老的记录。    
pg_stat_statements.track = all           # all - (所有SQL包括函数内嵌套的SQL), top - 直接执行的SQL(函数内的sql不被跟踪), none - (不跟踪)    
pg_stat_statements.track_utility = off   # 是否跟踪非DML语句 (例如DDL，DCL)， on表示跟踪, off表示不跟踪    
pg_stat_statements.save = on             # 重启后是否保留统计信息    
```    
重启数据库    
```    
pg_ctl restart -m fast    
```    
## 四、创建pg_stat_statements extension    
如果您使用的是阿里云RDS PG, 从这一步开始, 不需要前面的编译配置工作.  
在需要查询TOP SQL的数据库中，创建extension    
```    
create extension pg_stat_statements;    
```    
如果您使用的是阿里云RDS PPAS数据库，请使用管理函数创建这个插件。  
https://help.aliyun.com/document_detail/43600.html   
```
  举例：
  1 创建插件 dblink
      select rds_manage_extension('create','dblink');
  2 删除插件 dblink
      select rds_manage_extension('drop','dblink');
```
## 五、分析TOP SQL    
### pg_stat_statements输出内容介绍    
查询pg_stat_statements视图，可以得到统计信息    
SQL语句中的一些过滤条件在pg_stat_statements中会被替换成变量，减少重复显示的问题。    
pg_stat_statements视图包含了一些重要的信息，例如：    
1\. SQL的调用次数，总的耗时，最快执行时间，最慢执行时间，平均执行时间，执行时间的方差（看出抖动），总共扫描或返回或处理了多少行；    
2\. shared buffer的使用情况，命中，未命中，产生脏块，驱逐脏块。    
3\. local buffer的使用情况，命中，未命中，产生脏块，驱逐脏块。    
4\. temp buffer的使用情况，读了多少脏块，驱逐脏块。    
5\. 数据块的读写时间。    
Name|   Type|   References|     Description    
---|---|---|---    
userid| oid|    pg_authid.oid|  OID of user who executed the statement    
dbid|   oid|    pg_database.oid|        OID of database in which the statement was executed    
queryid|        bigint|  -|     Internal hash code, computed from the statement's parse tree    
query|  text|    -|             Text of a representative statement    
calls|  bigint|  -|             Number of times executed    
total_time|     double precision|        -|             Total time spent in the statement, in milliseconds    
min_time|       double precision|        -|             Minimum time spent in the statement, in milliseconds    
max_time|       double precision|        -|             Maximum time spent in the statement, in milliseconds    
mean_time|      double precision|        -|             Mean time spent in the statement, in milliseconds    
stddev_time|    double precision|        -|             Population standard deviation of time spent in the statement, in milliseconds    
rows|   bigint|  -|             Total number of rows retrieved or affected by the statement    
shared_blks_hit|        bigint|  -|             Total number of shared block cache hits by the statement    
shared_blks_read|       bigint|  -|             Total number of shared blocks read by the statement    
shared_blks_dirtied|    bigint|  -|             Total number of shared blocks dirtied by the statement    
shared_blks_written|    bigint|  -|             Total number of shared blocks written by the statement    
local_blks_hit| bigint|  -|             Total number of local block cache hits by the statement    
local_blks_read|        bigint|  -|             Total number of local blocks read by the statement    
local_blks_dirtied|     bigint|  -|             Total number of local blocks dirtied by the statement    
local_blks_written|     bigint|  -|             Total number of local blocks written by the statement    
temp_blks_read| bigint|  -|             Total number of temp blocks read by the statement    
temp_blks_written|      bigint|  -|             Total number of temp blocks written by the statement    
blk_read_time|  double precision|        -|             Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)    
blk_write_time| double precision|        -|             Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)    
### 最耗IO SQL    
单次调用最耗IO SQL TOP 5    
```    
select userid::regrole, dbid, query from pg_stat_statements order by (blk_read_time+blk_write_time)/calls desc limit 5;    
```    
总最耗IO SQL TOP 5    
```    
select userid::regrole, dbid, query from pg_stat_statements order by (blk_read_time+blk_write_time) desc limit 5;    
```    
### 最耗时 SQL    
单次调用最耗时 SQL TOP 5    
```    
select userid::regrole, dbid, query from pg_stat_statements order by mean_time desc limit 5;    
```    
**总最耗时 SQL TOP 5(最需要关注的是这个)**    
```    
select userid::regrole, dbid, query from pg_stat_statements order by total_time desc limit 5;    
```    
### 响应时间抖动最严重 SQL    
```    
select userid::regrole, dbid, query from pg_stat_statements order by stddev_time desc limit 5;    
```    
### 最耗共享内存 SQL    
```    
select userid::regrole, dbid, query from pg_stat_statements order by (shared_blks_hit+shared_blks_dirtied) desc limit 5;    
```    
### 最耗临时空间 SQL    
```    
select userid::regrole, dbid, query from pg_stat_statements order by temp_blks_written desc limit 5;    
```    
## 六、重置统计信息    
pg_stat_statements是累积的统计，如果要查看某个时间段的统计，需要打快照，建议参考    
[《PostgreSQL AWR报告(for 阿里云ApsaraDB PgSQL)》](../201611/20161123_01.md)      
用户也可以定期清理历史的统计信息，通过调用如下SQL    
```    
select pg_stat_statements_reset();    
```    
例如你想了解9点到10点之间有哪些TOP SQL, 那么可以在9点时执行```select pg_stat_statements_reset();``` 然后在10点查询最耗时SQL, 得到的就是9点到10点之间的TOP SQL.   
## 慢SQL到底慢在哪里？
如果要分析慢SQL到底慢在哪里，使用数据库命令```explain (analyze,verbose,timing,costs,buffers,timing) SQL;```就可以，再加上一些开关，可以看到更加详细的信息。   
```
开关, 当前会话生效，打印更加详细的信息
set client_min_messages=debug5;
set log_checkpoints = on;
set log_error_verbosity = verbose ;
set log_lock_waits = on;                  
set log_replication_commands = off;
set log_temp_files = 0;
set track_activities = on;
set track_counts = on;
set track_io_timing = on;
set track_functions = 'all';
set trace_sort=on;
set log_statement_stats = off;
set log_parser_stats = on;
set log_planner_stats = on;
set log_executor_stats = on;
set log_autovacuum_min_duration=0;
set deadlock_timeout = '1s';
set debug_print_parse = off;
set debug_print_rewritten = off;
set debug_print_plan = off;
set debug_pretty_print = on;
如
explain (analyze,verbose,timing,costs,buffers) select count(*),relkind from pg_class group by relkind order by count(*) desc limit 1;
```
## 七、慢SQL、TOP SQL优化示例  
1、查看真实的执行计划    
```  
begin;  
set local lock_timeout='1s';  
set local statement_timeout=0;  
explain (analyze,verbose,timing,costs,buffers,timing) SQL;  -- SQL代替为要分析的SQL  
rollback;  
```  
2、从explain结果中，找到最耗时的NODE    
```  
postgres=#  explain (analyze,verbose,timing,costs,buffers) select count(*),c34 from test where c33  Seq Scan on public.test  (cost=0.00..17916667.00 rows=25253334 width=8) (actual time=0.065..74406.748 rows=24997473 loops=1)  大量耗费  
         Output: id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64  
         Filter: (test.c33 < 3)  
         Rows Removed by Filter: 75002527  过滤了大量的行，但是还有很多行需要被查询  
         Buffers: shared hit=3296 read=16663371  
 Planning Time: 0.096 ms  
 Execution Time: 79898.435 ms  
(11 rows)  
```  
3、针对NODE进行优化    
3\.1、以上例子，实际上就是扫描花费了很多时间，并且扫描后过滤的结果占比比较低，可以使用索引解决。     
```  
postgres=# create index idx on test (c33,c34);  
postgres=# explain (analyze,verbose,timing,costs,buffers) select count(*),c34 from test where c33<3 group by c34;   
                                                                    QUERY PLAN                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------  