title:From IP ID to Device ID and KASLR Bypass
author:Amit Klein and
Benny Pinkas
From IP ID to Device ID and KASLR Bypass
Amit Klein and Benny Pinkas, Bar Ilan University
https://www.usenix.org/conference/usenixsecurity19/presentation/klein
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.From IP ID to Device ID and KASLR Bypass∗
Amit Klein
Bar-Ilan University
Benny Pinkas
Bar-Ilan University
Abstract
IP headers include a 16-bit ID ﬁeld. Our work examines the
generation of this ﬁeld in Windows (versions 8 and higher),
Linux and Android, and shows that the IP ID ﬁeld enables re-
mote servers to assign a unique ID to each device and thus be
able to identify subsequent transmissions sent from that de-
vice. This identiﬁcation works across all browsers and over
network changes. In modern Linux and Android versions,
this ﬁeld leaks a kernel address, thus we also break KASLR.
Our work includes reverse-engineering of the Windows IP
ID generation code, and a cryptanalysis of this code and of
the Linux kernel IP ID generation code. It provides practical
techniques to partially extract the key used by each of these
algorithms, overcoming different implementation issues, and
observing that this key can identify individual devices. We
deployed a demo (for Windows) showing that key extraction
and machine ﬁngerprinting works in the wild, and tested it
from networks around the world.
1 Introduction
Online browser-based user tracking is prevalent. Tracking is
used to identify users and track them across many sessions
and websites on the Internet. Tracking is often performed in
order to personalize advertisements or for surveillance pur-
poses. It can either be done by sites that are visited by users,
or by third-party companies which track users across multi-
ple web sites and applications. [2] speciﬁcally lists motiva-
tions for web-based ﬁngerprinting as “fraud detection, pro-
tection against account hijacking, anti-bot and anti-scraping
services, enterprise security management, protection against
DDOS attacks, real-time targeted marketing, campaign mea-
surement, reaching customers across devices, and limiting
number of access to services”.
Tracking methods Existing tracking mechanisms are usu-
ally based on either tagging or ﬁngerprinting. With tagging,
the tracking party stores at the user’s device some informa-
tion, such as a cookie, which can later be tracked. Modern
web standards and norms, however, enable users to opt-out
from tagging. Furthermore, tagging is often speciﬁc for one
application or browser, and therefore a tag that was stored in
one browser cannot be identiﬁed when the user is using a dif-
ferent browser on the same machine, or when the user uses
∗An extended version of this paper can be found at http://www.
securitygalore.com/site3/usenix2019.
the private browsing feature of the browser. Fingerprinting
is implemented by having the tracking party measure fea-
tures of the user’s machine (for example the set of installed
fonts). Corporates, however, often install a single “golden
image” (standard set of software packages) on many iden-
tical (hardware-wise) machines, and therefore it is hard to
obtain ﬁngerprints that distinguish among such machines.
In this work we present a new tracking mechanism which
is based on extracting data used by the IP ID generator (see
Section 1.1). It is the ﬁrst tracking technique that is able to
simultaneously (a) cross the private browsing boundary (i.e.
compute the same tracking ID for a private mode tab/window
of a browser as for a regular tab/window of the browser);
(b) work across different browsers; (c) address the “golden
image” problem; and (d) work across multiple networks; all
this while maintaining a very good coverage of the platforms
involved. To our knowledge, no other tracking method (or
a combination of several tracking techniques) achieves all
these goals simultaneously. Moreover, the Windows variant
of this technique also survives Windows shutdown+startup
(but not restart).
Our techniques are realistic: for Windows we only need
to have control over 8-30 IP addresses (in 3-13 class B net-
works), and for Linux/Android, we only need to control 300-
400 IP addresses (can be in a single class B network). The
Windows technique was successfully tested in the wild.
Introduction to IP ID
1.1
The IP ID ﬁeld is a 16 bit IP header ﬁeld, deﬁned in RFC
791 [11]. It is used to facilitate de-fragmentation, by mark-
ing IP fragments that belong to the same IP datagram. The
IP protocol assembles fragments into a datagram based on
the fragment source IP, destination IP, protocol (e.g. TCP or
UDP) and IP ID. Thus, it is desirable to ensure that given the
same source address, destination address and protocol, the
IP ID does not repeat itself in short time intervals. Simulta-
neously, the IP ID should not be predictable (across different
destination IP addresses) since “[IP ID] predictability allows
trafﬁc analysis, idle scanning, and even packet injection in
speciﬁc cases” [30].
Designing an IP ID generation algorithm that meets both
requirements is not straightforward. Since IPv4 was stan-
dardized, several schemes have emerged:
• Global counter – This approach was used in the early
IPv4 days due to its simplicity and its non-repetition
USENIX Association
28th USENIX Security Symposium    1063
period of 65536 global packets. However it is extremely
predictable and thus insecure, hence abandoned.
• Counter/bucket based algorithms – This family of al-
gorithms, suggested by RFC 7739 [7, Section 5.3], is
the focus of our work. It uses a table of counters, and
a hash function that maps a combination of a source
IP address, destination IP address, key and sometimes
other elements into an index of an entry in the table. IP
ID is generated by choosing the counter pointed to by
the hash function, possibly adding to it an offset (which
may depend on the IP endpoints, key, etc.), and ﬁnally
incrementing the counter. The non-repetition period in
this family is 65536 global packets, and at the same time
knowing IP ID values for one pair of source and desti-
nation IP addresses does not reveal anything about the
IP IDs of pairs in other buckets.
• Searchable queue-based algorithm – This algorithm
maintains a queue of the last several thousand IP IDs
that were used. The algorithm draws random IDs un-
til one is found that is not in the queue. Then this ID
is used as the next IP ID, pushed to the queue, and
the least-recently used value is popped from the queue.
This algorithm ensures high unpredictability, and guar-
antees a non-repetition period as long as the queue.
Windows (version 8 and later) and Linux/Android imple-
ment variants of the counter-based algorithm. MacOS and
iOS implement a searchable queue algorithm.
Introduction to KASLR
1.2
KASLR (Kernel Address Space Layout Randomization) is
a security mechanism designed to defeat attack techniques
such as ROP (Return-Oriented Programming [27]) that rely
on the predictability of kernel code addresses. KASLR-
enabled kernels randomize the kernel image load address
during boot, so that kernel code addresses become unpre-
dictable. While, e.g.
in the Linux x64 kernel, the entropy
of the load address is 9 bits, a brute force attack is deemed
irrelevant since each failure usually ends in a system freeze
(“kernel panic”). A typical KASLR bypass enables the at-
tacker to obtain a kernel address (from which, addresses to
useful kernel code gadgets can be calculated as offsets) with-
out de-stabilizing the system.
1.3 Our Approach
The IP ID generation mechanisms in Windows and in Linux
(UDP only) both compute the IP ID as a function of the
source IP address, the destination IP address, and a key K
which is generated when the source machine is restarted and
is never changed afterwards. We run a cryptanalysis attack
which analyzes the IP ID values that are sent by a device and
extracts the key K. This key can then be used to identify
the source device, because subsequent attacks will yield the
same key value (until the device is restarted).
In more detail, IP ID generation in both systems maintains
a table of counters and uses a hash function to choose which
counter is used for each connection. It seems hard to deploy
an attack based on the value of the counter, since each IP ID
might depend on a different counter. Instead, our attack tech-
niques rely on identifying and exploiting collisions which
map two destination IP addresses to the same counter. This
enables us to extract information about the key that caused
the hash values to collide (Linux), or (in Windows) extract
information about the offset of the IP ID from the counter.
These values depend on K and therefore enable us to learn K
and identify the machine.
Our approach does not rely on an a-priori knowledge of
the counter values. Moreover, after we reconstruct K, we
can reconstruct the current counter values (in full or in part)
by sending trafﬁc to specially chosen IP addresses, obtaining
their IP ID values and with the knowledge of K, work back
the counter values that were used to generate them.
Linux/Android KASLR bypass Support
for network
namespaces (part of container technology) was introduced in
Linux kernel 4.1. With this change, the key K was extended
to include 32 bits of a kernel address (the address of the net
structure for the current namespace). Thus, reconstructing
K also reveals 32 bits of a kernel address, which sufﬁces to
reconstruct the full address and be able to bypass KASLR.1
Conclusion In general, our work demonstrates that the us-
age of a non-cryptographic algorithm for the generation of
attacker observable values such as IP ID, may be a security
vulnerability even if the values themselves are not security-
sensitive. This is due to an attacker’s ability to extract the
key used by the algorithm generating the values, and use this
key to track or attack the system.
1.4 Advantages of our Technique
Tracking machines based on the key that is used for generat-
ing the IP ID has multiple advantages:
Browser Privacy Mode: Since our technique exploits the
behavior of the IP packet generator, it is not affected if the
browser runs in privacy mode.
Cross-Browser: Since our technique exploits the behav-
ior of the IP packet generator, it yields the same device
ID regardless of the browser used. It should be noted that
browsers (like Tor browser) that relay transport protocols
through other servers are not affected by our technique.
Network change: Tracking works across different net-
works since our technique uses bits of K as a device ID, and
K does not depend on the device’s IP address or network.
1Through our IP ID attack we were also able to achieve partial KASLR
bypass, and a partial list of loaded drivers, with regards to Windows 10
RedStone 4. This attack was based on an additional initialization bug in
Windows. However, that bug was repaired in the October 2018 security
update and the corresponding KASLR bypass is not effective anymore.
1064    28th USENIX Security Symposium
USENIX Association
The “Golden Image” Challenge: Since each device gen-
erates its own key K in a random fashion at O/S restart, even
devices with identical software and hardware will most likely
have different K values and thus different device IDs.
Not easily turned off: IP ID generation is built into the
kernel, and cannot be modiﬁed or switched off by the user.
Furthermore, the Windows attack can use simple HTTP traf-
ﬁc. The Linux/Android attack requires WebRTC which can-
not be turned off for mobile Chrome and Firefox.
VPN resistant: The device ID remains the same when the
device uses an IP-layer VPN.
Windows shutdown+startup vs.
restart: The Fast
Startup feature of Windows 8 and later,2 which is enabled
by default, saves the kernel to disk on shutdown, and reloads
it from disk on system startup. Therefore, K is not re-
initialized on startup, and keeps its pre-shutdown value. This
means that the tracking technique for Windows survives sys-
tem shutdown+startup. On restart, in contrast, the kernel is
initialized from scratch, and a new value for K is generated,
i.e. the old device ID is no longer in effect.
Scalability: Our technique can support billions of devices
(Windows, Linux, newer Androids), as the device ID is
random, and thus ID collisions are only expected due to the
birthday paradox. Thus the probability of a single device not
to have a unique ID is very low.
It should be noted that in the Linux/Android case, due
to the use of 300-400 IP addresses, the need to “dwell” on
the page for 8-9 seconds, and (in newer Android devices)
the excessive attack time, there are use cases in which the
technique may be considered invasive and/or inapplicable.
Additional Contributions:
In addition to the cross-
browser tracking technique for Windows and Linux, and
the KASLR bypass with respect to Linux, we also provide
the ﬁrst full public documentation of the IP ID generation
algorithm in Windows 8 and later versions, obtained via
reverse-engineering of the relevant parts of Windows kernel
tcpip.sys driver, and a cryptanalysis of said algorithm. We
also show a demo implementation of the Windows tracking
technique and provide results from an extensive in-the-wild
experiment spanning 75 networks in 18 countries, demon-
strating the applicability of the attack.
We disclosed the vulnerabilities to Microsoft and Linux.
Microsoft ﬁxed the issue in Windows April 2019 Secu-
rity Update (CVE-2019-0688).3 Linux ﬁxed the kernel ad-
dress disclosure (CVE-2019-10639) together with partially
addressing the key-based tracking technique (by extending
the key to 64 bits) in a patch4 applied to Linux kernel ver-
2https://blogs.msdn.microsoft.com/olivnie/2012/12/14/
windows-8-fast-boot
3https://portal.msrc.microsoft.com/en-US/
security-guidance/advisory/CVE-2019-0688
for
(https://github.com/torvalds/linux/commit/
4“netns:
entropy
provide
pure
net_hash_mix()”
sions 5.1-rc4, 5.0.8, 4.19.35, 4.14.112, 4.9.169 and 4.4.179.
For 3.18.139 and 3.16.67, Linux applied a patch5 we devel-
oped, that extends the key to 64 bits. The key-based tracking
technique (CVE-2019-10638) is fully addressed in a patch,6
part of kernel version 5.2-rc1, and will be back-ported to ker-
nel versions 5.1.7, 5.0.21, 4.19.48 and 4.14.124.
Note: many non-essential details of the attack, as well as
proofs for false positive bounds for Windows, are deferred to
the extended version of the paper.
2 The Setting
We assume that device tracking is carried out over the web,
using an HTML snippet (which can be embedded by a 3rd
party site/page). The snippet forces the browser to send TCP
or UDP trafﬁc (one packet per destination IP sufﬁces) to
multiple IP addresses under the tracker’s control (8-30 ad-
dresses for Windows, 300-400 for Linux/Android). Ideally,
such transmission would be rapid. In our experiments, this
can be done in few seconds or less.
For the Windows attack, the tracker needs to choose the IP
addresses according to some trivial constraints (the Linux IP
addresses are not subject to any constraints). A discussion of
the exact constraints and their trade-offs can be found in the
extended paper. At the server side, the tracker collects the IP
ID values sent by the client to each of the IPs, and computes