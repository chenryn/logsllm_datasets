www.isecpartners.com
Information Security Partners, LLC
19
SOAP Attacks
•
Session management
–
SOAP, like HTTP, is stateless!
–
Developers need to program their own state mechanism.  Options include:
•
In-line SessionID, defined 
•
Cookie in header
–
SOAP is transport independent, so a message should be able to be passed 
without session information from the transport, such as a HTTP cookie
•
Often used, but it’s a hack 
•
Attack:  Cookies might be stripped at the web server, or not properly routed to the 
part of the app where decisions are being made.  Watch out!
–
New WS-I cryptographic standards might allow developers to bootstrap state
–
Classic state attacks work
•
Predictable IDs are still predictable
•
But, XSS can’t easily access in-band stateID
–
Attack: SOAP, being stateless, is extremely vulnerable to replay attacks
www.isecpartners.com
Information Security Partners, LLC
20
XML Introduction
•
What is XML?
–
A standard for representing diverse sets of data
•
Representing data is hard work!
–
Binary Data
–
Internationalization
–
Representing metacharacters in data
–
Defining and Validating schemas
–
Parsing mechanisms
•
Attacks
–
Source-specified code page masks malicious characters
–
Complex/large DTD takes down parser
–
Injection attacks
www.isecpartners.com
Information Security Partners, LLC
21
XML Introduction
•
Based on a few basic but strict rules:
–
Declarations 
–
Tags must open and close
–
Tags must be properly nested
–
Case sensitive
–
Must have a root node
•
Why do we care about the rules?
–
Attacking web services generally means creating valid XML
–
If your XML doesn’t parse right, it gets dropped early on
–
Fuzzing XML structure might be fun, but you’re only hitting the parser 
•
Simple example:
Toyota
Corolla
2001
blue
Excellent condition, 100K miles
www.isecpartners.com
Information Security Partners, LLC
22
XML Introduction - Parsing
•
XML Documents are defined by:
–
DTD: Old Standard
–
XSD: Current Method
–
Attack: Reference external DTD, allows tracking of document and parsing attacks
•
There are two standard types of XML parsers used across platforms
–
SAX: State-oriented, step-by-step stream parsing
•
Lighter weight, but not as intelligent
•
Attack: User controlled data overwrites earlier node.  
–
DOM: Complicated, powerful parsing
•
Attack: DoS by sending extremely complicated, but legal, XML.
–
Creates huge object in memory
•
Why use other types of floods to attack? XML parsing gives a much larger multiplier
•
XPath engines provide query interface to XML documents
–
Like other interpreted query languages, XPath injections are possible.
•
Always a bad idea: custom parsers
–
“I can use a RegEx for that”
–
It is common to simulate SAX parsers as they are simple conceptually.
–
Plenty of devils in the details: XML tags inside CDATA block, Entity substitution
www.isecpartners.com
Information Security Partners, LLC
23
XML Attacks
• Emerging attack class: XML Injection
– Occurs when user input passed to XML stream
– XML parsed by second-tier app, Mainframe, or DB
– XML can be injected through application, stored in DB
• When retrieved from DB, XML is now part of the stream
12345
Henry Ackerman
hackerman@PI:EMAIL
m
123 Disk Drive
98103
206-123-4567
SAX Parser Result: UniqueID=0
www.isecpartners.com
Information Security Partners, LLC
24
Web Services DoS
•
Like all DoS, looking for multiplier advantage
–
CPU Time
•
Extremely deep structures require CPU time to parse and search
•
References to external documents
– Cause network timeout during parsing, may block process
•
Creating a correct DOM for complex XML is not trivial
–
Memory Space
•
Deep and broad structures
•
Large amounts of data in frequently used fields will be copied several times before 
being deleted
•
Memory exhaustion can be difficult against production systems, but creating 
garbage collection / VM overhead might slow the system
–
Database Connections
•
Despite low CPU/mem load, filling the DB request queue can wait state an 
application to death
•
Need to find a good SOAP request that does not require auth, but results in a heavy 
DB query
– Perfect example: Initial User Authentication
•
Common database can be a single point of failure for multiple application servers
www.isecpartners.com
Information Security Partners, LLC
25
Web Services DoS
•
In any WS DoS case, there are important details to make the attack 
effective
–
Legality of SOAP request
•
Matches DTD/XSD Syntax.  This might not preclude embedding complex structures!
•
Matches real SOAP Method
–
Anything that “burrows” deeper into the application stack causes more load
–
Especially important when attacking databases
•
Might need a valid session ID
–
Authenticate once with a real SOAP stack, then use the SessionID/cookie into the static 
attack 
–
Speed
•
We use multiple processes
•
Making a request is relatively heavy compared to other DoS
–
Requires a real TCP connection
–
Don’t use a SOAP framework.  Most of the multiplier is lost
–
Need to listen for response for some attacks 
•
We often run into limitations of the underlying script framework
–
Native framework would increase effectiveness of DoS
•
We are currently researching more possibilities
–
Attacks against XPath equivalent to recent RegEx DoS
–
Using HTTP 1.1 pipelining to speed attack
–
SOAP equivalents of “teardrop” attacks against state: multiple fragmented requests
www.isecpartners.com
Information Security Partners, LLC
26
Web Service Discovery Methods
•
UDDI
–
Registries that list web services across multiple servers
–
Auto-magically works on some systems, such as .Net
–
Multiple authorities have created classification schemes
•
Winner is not yet clear
–
Not necessary to expose to world
•
B2B services that were always insecure were at least secret
•
Now advertised to entire world
•
UDDI servers support authentication and access control, but this is not the default (or common) 
configuration
–
Attack: UDDI points an attacker to all the information they need to attack a web service
•
UDDI Business Registry (UBR)
–
Four major servers, run by IBM, Microsoft, SAP, and NTT
–
Has beautiful, searchable interface to find targets
•
Obviously, also searchable by web services
–
Attack: No binding authentication of registry
•
New WS-Security standards are building a PKI to authenticate UBR->Provider->Service
•
Confusion might be an attackers friend
–
Who needs nmap?  UBR points you right to the source!
www.isecpartners.com
Information Security Partners, LLC
27
UBR Example
www.isecpartners.com
Information Security Partners, LLC
28
Web Service Discovery
•
Other 3rd Party Registries
–
http://www.xmethods.com/ has an excellent list of fun services
•
DISCO / WS-Inspection
–
Lightweight versions of UDDI
–
Provides information about a single server’s web services
•
We have created a discovery tool: WSMap
–
Scans a defined set of IPs for known app server URLs
–
“Tickles” WS endpoint with SOAP requests to generate telltale error
–
Looks for WSDLs
–
(Almost) identifies the application server 
www.isecpartners.com
Information Security Partners, LLC
29
Attack Tree: Tying it all Together
•
Navigate to UBR, ask for a site
•
Attach to UDDI, ask for WSDL
•
Examine WSDL, find dangerous methods
•
Use fuzzer to test methods, find XML Injection
•
Profit!
www.isecpartners.com
Information Security Partners, LLC
30
OWASP Top 10 – Still Relevant?
1. Unvalidated Input
2. Broken Access Control
3. Broken Authentication and Session Management
4. Cross Site Scripting (XSS) Flaws
5. Buffer Overflows
6. Injection Flaws
7. Improper Error Handling
8. Insecure Storage
9. Denial of Service
10.Insecure Configuration Management
The answer to all of these is yes.
www.isecpartners.com
Information Security Partners, LLC
31
Conclusion
•
Web Services are powerful, easy-to-use, and open.  
–
AKA: they are extraordinarily dangerous
–
Many crusty corporate secrets will now be exposed
•
Lots of security work still required
–
Analysis of rapidly developing Web Services standards
•
WS-Security
•
WS-Routing
•
WS-”Everything”
–
Attack Tools
•
Better proxies
•
More efficient DoS
•
Better automated discovery
–
Define best practices for development
•
“XML Firewall” vendors want this to be a hardware solution
•
Like all good security, it really needs to be baked into the product by the engineers 
closest to the work
–
PKI Infrastructure for Authentication
•
Who will control the cryptographic infrastructure?
www.isecpartners.com
Information Security Partners, LLC
32
Web Services Security
Q&A
Alex Stamos
PI:EMAIL
Scott Stender
PI:EMAIL