### Information Security Partners, LLC
#### Website: [www.isecpartners.com](http://www.isecpartners.com)

---

## SOAP Attacks

**Session Management:**
- **Statelessness of SOAP:** Similar to HTTP, SOAP is inherently stateless. Therefore, developers must implement their own state management mechanisms.
  - **Options for State Management:**
    - **In-line SessionID:** A unique identifier defined within the message.
    - **Cookie in Header:** Using cookies, although this is often considered a workaround.
  - **Transport Independence:** Since SOAP is transport-independent, session information (e.g., HTTP cookies) should not be relied upon for state management.
  - **Common Issues:**
    - **Web Server Interference:** Cookies may be stripped by the web server or not properly routed to the application's decision-making components.
    - **New Standards:** WS-I cryptographic standards may provide better state management solutions.
  - **Classic State Attacks:**
    - **Predictable IDs:** These can still be vulnerable to prediction.
    - **XSS and In-band StateIDs:** Cross-Site Scripting (XSS) attacks have limited access to in-band state identifiers.
  - **Replay Attacks:** Due to its stateless nature, SOAP is highly susceptible to replay attacks.

---

## XML Introduction

**What is XML?**
- **Standard for Data Representation:** XML is a versatile standard for representing diverse sets of data.
- **Challenges in Data Representation:**
  - **Binary Data Handling**
  - **Internationalization**
  - **Representing Metacharacters in Data**
  - **Defining and Validating Schemas**
  - **Parsing Mechanisms**

**Attacks on XML:**
- **Code Page Masking:** Source-specified code pages can mask malicious characters.
- **Complex/Large DTDs:** Large or complex Document Type Definitions (DTDs) can overwhelm parsers.
- **Injection Attacks:** Malicious input can be injected into XML documents.

**XML Rules:**
- **Basic but Strict:**
  - **Declarations**
  - **Proper Tag Opening and Closing**
  - **Nested Tags**
  - **Case Sensitivity**
  - **Root Node Requirement**

**Importance of XML Rules:**
- **Valid XML for Web Services:** Attacking web services typically requires creating valid XML. Invalid XML will be rejected early in the process.
- **Fuzzing XML Structure:** While fuzzing can be interesting, it primarily targets the parser.

**Simple Example:**
```xml
<Toyota>
  <Model>Corolla</Model>
  <Year>2001</Year>
  <Color>blue</Color>
  <Condition>Excellent condition, 100K miles</Condition>
</Toyota>
```

---

## XML Parsing

**XML Document Definitions:**
- **DTD (Document Type Definition):** An older standard.
- **XSD (XML Schema Definition):** The current method.
- **External DTD Reference:** Allowing external DTD references can enable tracking and parsing attacks.

**Types of XML Parsers:**
- **SAX (Simple API for XML):**
  - **State-Oriented, Step-by-Step Stream Parsing**
  - **Lightweight but Less Intelligent**
  - **Attack Vector:** User-controlled data can overwrite earlier nodes.
- **DOM (Document Object Model):**
  - **Complex and Powerful Parsing**
  - **Attack Vector:** Denial of Service (DoS) by sending extremely complex, yet legal, XML that creates large memory objects.

**Why Use XML Parsing for Attacks?**
- **Multiplier Effect:** XML parsing can amplify the impact of DoS attacks more effectively than other types of floods.

**XPath Engines:**
- **Query Interface to XML Documents:** Like other interpreted query languages, XPath injections are possible.

**Custom Parsers:**
- **Generally a Bad Idea:** Custom parsers, such as those using regular expressions, can introduce numerous vulnerabilities.
- **Simulated SAX Parsers:** Commonly used due to their simplicity, but they can be error-prone.
- **Details Matter:** Issues like XML tags inside CDATA blocks and entity substitution can complicate custom parsing.

---

## XML Attacks

**Emerging Attack Class: XML Injection**
- **User Input in XML Streams:** When user input is passed to an XML stream, it can be parsed by second-tier applications, mainframes, or databases.
- **Injection through Applications:** XML can be injected through an application and stored in a database.
- **Retrieval from Database:** When retrieved, the injected XML becomes part of the stream.

**Example:**
```xml
<UniqueID>12345</UniqueID>
<Name>Henry Ackerman</Name>
<Email>hackerman@PI:EMAIL</Email>
<Address>123 Disk Drive, 98103</Address>
<Phone>206-123-4567</Phone>
```
- **SAX Parser Result:** `UniqueID=0`

---

## Web Services DoS

**Objective: Multiplier Advantage**
- **CPU Time:**
  - **Deep Structures:** Require significant CPU time to parse and search.
  - **External Document References:** Can cause network timeouts during parsing, potentially blocking processes.
- **Memory Space:**
  - **Complex Structures:** Deep and broad structures can consume large amounts of memory.
  - **Frequent Field Usage:** Large data in frequently used fields can be copied multiple times before being deleted.
  - **Garbage Collection Overhead:** Memory exhaustion can be challenging against production systems, but creating garbage collection or VM overhead can slow the system.
- **Database Connections:**
  - **Request Queue Filling:** Even with low CPU and memory load, filling the database request queue can cause the application to become unresponsive.
  - **Example:** Initial User Authentication can be a heavy DB query without requiring authentication.

**Effective Attack Details:**
- **SOAP Request Legality:**
  - **Syntax Matching:** Must match DTD/XSD syntax and real SOAP methods.
  - **Deep Application Stack:** Deeper penetration into the application stack increases load, especially for database attacks.
  - **Session ID:** May require a valid session ID, obtained by authenticating once with a real SOAP stack.
- **Speed:**
  - **Multiple Processes:** Utilize multiple processes for efficiency.
  - **TCP Connection Requirement:** Making a request is relatively heavy compared to other DoS methods.
  - **Avoid SOAP Frameworks:** Most frameworks reduce the multiplier effect.
  - **Response Listening:** Some attacks require listening for responses.
  - **Script Framework Limitations:** Native frameworks can increase the effectiveness of DoS attacks.
- **Research Areas:**
  - **XPath DoS:** Similar to recent Regular Expression (RegEx) DoS.
  - **HTTP 1.1 Pipelining:** Speed up attacks.
  - **Fragmented Requests:** Equivalent to "teardrop" attacks against state.

---

## Web Service Discovery Methods

**UDDI (Universal Description, Discovery, and Integration):**
- **Web Service Registries:** UDDI lists web services across multiple servers.
- **Automatic Registration:** Works seamlessly on some systems, such as .Net.
- **Classification Schemes:** Multiple authorities have created classification schemes, but a clear winner is not yet established.
- **Security Concerns:**
  - **Insecure Exposure:** B2B services that were once secret are now advertised to the world.
  - **Authentication and Access Control:** UDDI servers support these, but it is not the default or common configuration.
  - **Attack Vector:** UDDI provides attackers with all the information needed to target web services.
- **UBR (UDDI Business Registry):**
  - **Major Servers:** Run by IBM, Microsoft, SAP, and NTT.
  - **Searchable Interface:** Easy to find targets.
  - **No Binding Authentication:** New WS-Security standards aim to build a PKI for authentication.

**Other Third-Party Registries:**
- **xmethods.com:** Provides a list of various web services.
- **DISCO / WS-Inspection:** Lightweight versions of UDDI, providing information about a single server’s web services.
- **WSMap Tool:**
  - **Discovery Tool:** Scans a defined set of IPs for known application server URLs.
  - **SOAP Requests:** Generates telltale errors to identify web service endpoints.
  - **WSDL Identification:** Looks for WSDL files.
  - **Application Server Identification:** Almost identifies the application server.

---

## Attack Tree: Tying It All Together

1. **Navigate to UBR and Request a Site.**
2. **Attach to UDDI and Request WSDL.**
3. **Examine WSDL to Find Dangerous Methods.**
4. **Use a Fuzzer to Test Methods and Identify XML Injection Points.**
5. **Exploit the Vulnerabilities.**

---

## OWASP Top 10 – Still Relevant?

1. **Unvalidated Input**
2. **Broken Access Control**
3. **Broken Authentication and Session Management**
4. **Cross Site Scripting (XSS) Flaws**
5. **Buffer Overflows**
6. **Injection Flaws**
7. **Improper Error Handling**
8. **Insecure Storage**
9. **Denial of Service**
10. **Insecure Configuration Management**

**Answer:** Yes, all of these remain relevant.

---

## Conclusion

**Web Services:**
- **Powerful, Easy-to-Use, and Open:** These characteristics also make them extraordinarily dangerous.
- **Corporate Secrets Exposed:** Many previously hidden corporate secrets will now be exposed.
- **Security Work Required:**
  - **Analysis of Standards:** Rapidly developing Web Services standards, such as WS-Security, WS-Routing, and others.
  - **Attack Tools:** Better proxies, more efficient DoS, and improved automated discovery.
  - **Best Practices:** Define and implement best practices for development.
  - **XML Firewall Vendors:** Propose hardware solutions, but security needs to be baked into the product by the engineers closest to the work.
  - **PKI Infrastructure:** Questions remain about who will control the cryptographic infrastructure.

---

## Web Services Security Q&A

**Alex Stamos: [PI:EMAIL]**
**Scott Stender: [PI:EMAIL]**

---