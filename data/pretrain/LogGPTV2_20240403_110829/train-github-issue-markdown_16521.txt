Sorry about the bug title, I don’t know exactly the best way to phrase it.
Given the following code:
    interface A {
      (key:'foo'):string;
      (key:string):void;
    }
    interface A1 extends A {
      (key:'bar'):string;
    }
    interface A2 extends A {
      (key:'baz'):string;
    }
    interface B extends A1, A2 {
      (key:'blah'):string;
    }
    var b:B;
    b('foo').length; // OK
    b('bar').length; // OK
    b('baz').length; // Error
    b('blah').length; // OK
The resulting list of overloads is:
    (key:'blah'):string;
    (key:'bar'):string;
    (key:'foo'):string;
    (key:string):void;
    (key:'baz'):string;
    (key:'foo'):string;
    (key:string):void;
As a result, calling `b('baz')` resolves to `void` type since the 4th item in
the list is the first one that matches, but this does not match the author’s
expectation. Section 7.2 of the spec doesn’t really address the case where
multiple inheritance creates an inheritance graph that splits and joins.
The author’s expectation is that the duplicate `A` superclass overload options
would be eliminated so the total overload list would look more like this:
    (key:'blah'):string;
    (key:'baz'):string;
    (key:'bar'):string;
    (key:'foo'):string;
    (key:string):string;
The expected list above starts with A2, not A1 as the current compiler seems
to do, but that part is somewhat less important than the fact that signatures
from `A` are being duplicated in the calculated overload list. At minimum I’d
hope that the compiler could reorder the list so that the non-specialized
signature in a list of specialized signatures always goes to the bottom.
Thoughts?