title:Distributed Implementation of Wide-Area Monitoring Algorithms for
Power Systems Using a US-Wide ExoGENI-WAMS Testbed
author:Jianhua Zhang and
Aranya Chakrabortty and
Yufeng Xin
1
Distributed Optimization Algorithms for Wide-Area
Oscillation Monitoring in Power Systems Using
Inter-Regional PMU–PDC Architectures
Seyedbehzad Nabavi, Student Member, IEEE, Jianhua Zhang, Student Member, IEEE, and
Aranya Chakrabortty, Senior Member, IEEE
Abstract—In this paper, we present a set of distributed algo-
rithms for estimating the electro-mechanical oscillation modes of
large power system networks using Synchrophasors. With the
number of Phasor Measurement Units (PMUs) in the North
American grid scaling up to thousands, system operators are
gradually inclining towards distributed cyber-physical architec-
tures for executing wide-area monitoring and control operations.
Traditional centralized approaches, in fact, are anticipated to
become untenable soon due to various factors such as data
volume, security, communication overhead, and failure to adhere
to real-time deadlines. To address this challenge, we propose
three different communication and computational architectures
by which estimators located at the control centers of various util-
ity companies can run local optimization algorithms using local
PMU data, and thereafter communicate with other estimators
to reach a global solution. Both synchronous and asynchronous
communications are considered. Each architecture integrates a
centralized Prony-based algorithm with several variants of Al-
ternating Direction Method of Multipliers (ADMM). We discuss
the relative advantages and bottlenecks of each architecture using
simulations of IEEE 68-bus and IEEE 145-bus power system as
well as an Exo-GENI-based software defined network.
Index Terms—Distributed optimization, Prony, phasor mea-
surement units, Alternating Direction Method of Multipliers
(ADMM)
I. INTRODUCTION
Following the Northeast blackout of 2003, Wide-Area
Measurement System (WAMS) technology using Phasor Mea-
surement Units (PMUs) has largely matured for the North
American grid [1]. However, as the number of PMUs scales up
to the thousands in the next few years under the US Department
of Energy’s smart grid demonstration initiative, Independent
System Operators (ISO) and utility companies are struggling to
understand how the resulting gigantic volumes of real-time data
can be efficiently harvested, processed, and utilized to solve
wide-area monitoring and control problems for any realistic
power system interconnection. It is intuitive that the current
state-of-the-art centralized communication and information
processing architecture of WAMS will no longer be sustainable
under such a data explosion, and a completely distributed
cyber-physical architecture will need to be developed [2]. In
the Eastern Interconnection (EI) of the US grid, for example,
about 60 PMUs are currently streaming data via the Internet
to a super phasor data concentrator (SPDC) which is handling
about 100,000 data points per second. This architecture will
S. Nabavi, J. Zhang, and A. Chakrabortty are with the Department of
Electrical and Computer Engineering, North Carolina State University, Raleigh,
NC, 27606 USA, E-mails: { snabavi, jzhang25, achakra2 } @ncsu.edu
This work is supported in part by the US Department of Energy under grant
DE-OE 0000654, and by ABB Corporate Research.
no doubt become untenable as the EI scales up to 300-400
PMUs by 2015. Research is currently being carried out by
the Data and Network Management Task Team (DNMTT)
of North American Synchrophasor Initiative (NASPI) on the
implementation of this distributed architecture with the prime
research focus being protocols, Quality-of-Service, latency,
bandwidth and security [3].
However, almost no attention has yet been paid to perhaps
the most critical consequence of this envisioned distributed
architecture - namely distributed algorithms [4]. Partly due
to a lack of a cyber-physical research infrastructure and
partly due to the priorities set forth by PMU installations,
the NASPI community has not yet delved into investigating
how the currently-used centralized algorithms for wide-area
monitoring and control [5] can be translated into a distributed
computing framework once the aforementioned decentralized
WAMS architecture is realized in the next three to four years.
Development of such algorithms will obviously be imperative
not only for increasing reliability by eliminating single-point
failures, but also for minimizing network transit. As shown
in [6], transmitting data across a wide-area communication
network (WAN) is expensive, the links can be relatively slow,
and the bandwidth-per-dollar will indeed grow slower than
other computing resources leading to distributed PMU data
processing as a natural choice.
Motivated by this challenge, in this paper we propose
three different distributed communication and computational
architectures for one of the most critical wide-area mon-
itoring applications, namely, modal estimation of electro-
mechanical oscillations. Several centralized algorithms for
solving this problem have been proposed over the past decade
including the Eigenvalue Realization Algorithm (ERA) [7],
Prony analysis [8], mode metering [9], and Hilbert-Huang
transform [10]. However, all of these algorithms are based
on offline techniques, and that too using only a handful (but
observable) set of PMUs. In contrast, we formulate the mode
estimation problem as a global consensus problem for the
coefficients of the characteristic polynomial of the system, and
then solve it using Alternating Direction Method of Multipliers
(ADMM). The communication network required to execute this
distributed estimation is shown in Fig. 1. The physical grid is
assumed to be divided into multiple balancing regions or areas,
which may or may not be coherent, but belong to different
utility companies. PMUs in each area communicate their data
in real-time to estimator(s) or Phasor Data Concentrators
(PDC) located at the local control center via a Virtual Private
Network (VPN). These local PDCs can then share information
2
a completely differential model using standard techniques of
Kron reduction [19] and arrive at a linearized state variable
model for the n-machine system as:
(cid:34)
(cid:35)
(cid:20) 0n×n
(cid:124)
(cid:123)(cid:122)
A
∆ ˙δ(t)
∆ ˙ω(t)
=
M−1L −M−1D
ωsIn
(cid:20) ∆δ(t)
∆ω(t)
(cid:21)
,
(cid:21)
(cid:125)
y(t) = [∆θ1(t), . . . , ∆θp(t)]T ,
(1)
where ∆δ = [∆δ1 ··· ∆δn]T , ∆ω = [∆ω1 ··· ∆ωn]T ,
M = diag(M1, . . . , Mn), and D = diag(D1, . . . , Dn), with
∆δi, ∆ωi, Mi, and Di being the small-signal angle deviation,
the small-signal frequency deviation, inertia, and mechanical
damping of generator i, respectively. In is the (n× n) identity
matrix, and ωs is the synchronous speed of the system. The
definition of matrix L is referred to in [17]. We consider the
output vector y(t) to be a set of phase angle measurements
∆θi(t), i = 1, . . . , p, measured by PMUs at p designated
buses. Other outputs such as bus voltages and frequencies
may also be considered but we restrict our analysis to phase
angles only. The eigenvalues of A are denoted by (−σl ±
jΩl), (j (cid:44) √−1). Our objective is to estimate these 2n
eigenvalues of A from y(t) in a distributed fashion using
multiple computational resources. For this purpose, we next
describe how the commonly used Prony algorithm for modal
estimation can be cast as a distributed optimization problem.
We first recall the centralized Prony algorithm, and thereafter
reformulate it as a distributed algorithm using three different
cyber-physical architectures.
III. MODAL ESTIMATION USING PRONY METHOD
A generic expression for the solution of ∆θi(t) in (1) can
be written as
n(cid:88)
(cid:0)rile(−σl+jΩl)t + r
ile(−σl−jΩl)t(cid:1).
∗
∆θi(t) =
(2)
l=1
Each component
in the RHS of (2) is referred to as a
mode, where ril is the residue of mode l reflected in the
ith output. Sampling ∆θi(t) with a uniform sampling period
of T , a generic expression for the z-transform of ∆θi(k) (cid:44)
∆θi(t)|t=kT , (k = 0, 1, . . . , m − 1), with m being the total
number of measured samples, can be rewritten as
∆θi(z) =
b0 + b1z−1 + b2z−2 + ··· + b2nz−2n
1 + a1z−1 + a2z−2 + ··· + a2nz−2n .
(3)
We recall that our objective is to estimate σl, Ωl, and ril in (2).
We next state three steps of the Prony algorithm by which this
can be achieved from (3) [8].
Step 1. The first step of the Prony algorithm is to find a1
through a2n by solving
∆θi(2n + 1)
 ∆θi(2n)
...
(cid:123)(cid:122)
(cid:124)
∆θi(2n + (cid:96))
(cid:125)
ci
=
 ∆θi(2n − 1)
(cid:124)
∆θi(2n + (cid:96) − 1)
∆θi(2n)
(cid:123)(cid:122)
...
Hi
··· ∆θi(0)
··· ∆θi(1)
··· ∆θi((cid:96))
...
(cid:125)
(cid:124)
−a1−a2
...−a2n
(cid:123)(cid:122)
a
(cid:125)
,
(4)
Fig. 1: Distributed architecture for wide-area PMU-PDC communications
between each other and also with a central PDC located at
the Independent System Operator (ISO) through a controllable
wide-area network such as a Software Defined Network (SDN).
The key idea is to make use of this distributed network
protocol to run local consensus at the PDCs inside each area,
iteratively generate myopic estimates of the coefficients of
the characteristic polynomial, and let the PDCs communicate
either with each other or with the central PDC to reach a
global solution using several variants of the ADMM [11]. Both
synchronous and asynchronous communications are considered.
Our proposed framework clearly demonstrates how ADMM
can be a beneficial tool for distributed mode estimation in
power systems, and what types of performance bottlenecks,
accuracy issues, and computation delays it may result in. The
innovation of this work is, therefore, in proposing a bridge
between the cyber and physical implementation of distributed
WAMS. We illustrate our algorithms via offline and real-time
simulations of two IEEE prototype power system models, and
discuss the benefits and drawbacks of each algorithm in light
of security and data privacy.
Distributed consensus algorithms in power systems have
been reported in recent papers such as [12]–[16], but mostly
in the context of distributed optimal power flow, distributed
generation, and demand-side management, and not for wide-
area oscillation monitoring. Preliminary results on the first
architecture proposed in this paper have recently been reported
in our conference papers [17], [18]. However, the results
outlined in this paper are significantly more expansive than
those in [17], [18] including two new architectures with unique
sets of distributed algorithms, a discussion of their convergence
properties, the pertinent issue of asynchronous communication
in real-world SDNs, and finally a case study of end-to-end
delay evaluation using a US-wide Exo-GENI network.
The remainder of the paper is organized as follows: Section II
presents the power system model of interest. Section III
describes the centralized Prony method. Section IV proposes
the distributed modal estimation strategies. Sections V and VI
show the simulation results. Section VII concludes the paper.
II. PROBLEM FORMULATION
We consider a power system consisting of n generator buses
and nl load buses. Each synchronous generator is modeled
by a second-order swing equation, while each load bus is
modeled by two algebraic equations for active and reactive
power balance. We convert this differential-algebraic model to
where (cid:96) is an integer satisfying 2n + (cid:96) ≤ m − 1. Let us
concatenate ci and Hi in (4) for PMU i = 1, . . . , p. One can
find a by solving a least squares (LS) problem defined as
H1
...
 a −
c1
...
(cid:107)2,
Hp
cp
min
a
(cid:107)
1
2
(5)
where (cid:107) · (cid:107) denotes the 2-norm of a vector.
Step 2. Once a is computed, the next step is to find the
roots of the discrete-time characteristic polynomial as shown
in the denominator of (3). Let these roots be denoted by zl,
l = 1, . . . , 2n. Finally, the eigenvalues of A in (1) can be
calculated as ln(zl)/T .
Step 3. The final step is to find the residues ril in (2). This
can be done by forming the following Vandermonde equation,
and solving it for the residues ri1 through rin:
 ∆θi(0)
∆θi(1)
...
 =
∆θi(m)
1
1
(z1)1/T
...
(z2)1/T
...
(z1)m/T
(z2)m/T
···
···
···
1
(z2n)1/T
...
(z2n)m/T
 .
ri1
r∗
i1
...
rin
r∗
in
(6)