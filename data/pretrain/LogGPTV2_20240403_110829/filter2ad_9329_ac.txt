  * 内存共享模型
不用限定于具体的是哪种实现方式，需要使其达到物理内存共享的效果，对其中一者（Struct A）的改动可同步影响到另一者（Struct B）。
  * 指针控制模型
指针控制这种场景的关键在于找到含有指针成员变量的结构体，且该指针将被用于read/write业务逻辑，比较理想的场景是，可通过调用系统调用稳定的触发这一read/write业务逻辑。
#### Exploitation strategies
我们在内核源码，以及公开资料中寻找适用于这两种模型的结构体，最后发现了其中的三个结构体。这些结构体像化学试剂一样，单独存在时威力有限，而一旦将其按照一定的流程组合起来将会发生奇妙的化学反应，并爆发出强大的威力。
接下来我们来具体看一下这三个结构体的特点。
**• 基于Ashmem来实现任意地址读写**
    (gdb) pt /o struct file
    /* offset  */  type = struct file {
    ...skip…
    /*  184    */    u64 f_version;
    /*  192    */    void *f_security;
    /*  200    */    void *private_data;    private_data;  private_data会被赋值给asma
        long ret = -ENOTTY;
        switch (cmd) {
        case ASHMEM_SET_NAME:
            ret = set_name(asma, (void __user *)arg);
            break;
        case ASHMEM_GET_NAME:
            ret = get_name(asma, (void __user *)arg);
            break;
        ... skip ...
        return ret;
    }
在get_name()函数中可通过(1)(2)两处代码逻辑来实现任意地址读。
    static int get_name(struct ashmem_area *asma, void __user *name)
    {
      ... skip ...
      if (asma->name[ASHMEM_NAME_PREFIX_LEN] != '\0') {
         ... skip ...
        len = strlen(asma->name + ASHMEM_NAME_PREFIX_LEN) + 1;
        memcpy(local_name, asma->name + ASHMEM_NAME_PREFIX_LEN, len);    prot_mask & prot) != prot)) {
        ret = -EINVAL;
        goto out;
      }
      /* does the application expect PROT_READ to imply PROT_EXEC? */
      if ((prot & PROT_READ) && (current->personality & READ_IMPLIES_EXEC))
        prot |= PROT_EXEC;
      asma->prot_mask = prot;    file))
        ret = -EINVAL;
      else
        strcpy(asma->name + ASHMEM_NAME_PREFIX_LEN, local_name);    private_data; count) {
            n = min(m->count, size);
            err = copy_to_user(buf, m->buf + m->from, n);    index;
        p = m->op->start(m, &pos);