I have an app with a framework very similar to Om where I always render from
the top component.  
There is no Flux store with components listening to a single Flux store event,
just a single global json state managed outside of React.
I ask this question as a follow-up to this issue, as I just noticed that
React.render takes a callback: #1931
My former Perf code looked like this:
    // 1st render
    React.addons.Perf.start();
    React.render(, document.body);
    React.addons.Perf.stop();
    React.addons.Perf.printWasted();
    // 2nd render
    React.addons.Perf.start();
    React.render(, document.body);
    React.addons.Perf.stop();
    React.addons.Perf.printWasted();
    // ... next renders
So as Render takes a callback it seems to make sens to use it instead of
considering React.render synchronous.
    // 1st render
    React.addons.Perf.start();
    React.render(, document.body),function() {
        React.addons.Perf.stop();
        React.addons.Perf.printWasted();
    });
    // 2nd render
    React.addons.Perf.start();
    React.render(, document.body),function() {
        React.addons.Perf.stop();
        React.addons.Perf.printWasted();
    });
    // ... next renders
The question that directly comes to mind is what would be the behavior if the
2nd rendering is triggered before the 1st rendering callback has been called?
In an ideal world we would have `start / stop / printWasted / start / stop /
printWasted` but it seem to me that we could also have `start / start / stop /
printWasted / stop / printWasted` which could lead to bad or duplicated
mesures, or even worse a failure if Perf does not allow to be started twice
for example...
I think my usecase is pretty common for those using React in a really pure
way, and it would be nice to explain and document how this can be achieved
without expecting weird side effects