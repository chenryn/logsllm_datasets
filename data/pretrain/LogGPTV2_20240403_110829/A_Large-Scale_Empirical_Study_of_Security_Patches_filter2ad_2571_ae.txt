### Gap Provides Attackers with Knowledge and Time to Strike

In the opposite direction, we discovered that when security issues are reported (or discovered) privately and subsequently fixed, the remedy is not immediately distributed or disclosed. This delay is often due to software release cycles. Over a third of the fixed vulnerabilities were not publicly disclosed for more than a month. While operating in silence may help limit, to a small degree, the dissemination of information about the vulnerability, it also delays informing affected parties and spurring them to remediate. Given the transparency of open-source projects, attackers can leverage this behavior by tracking the security commits of target software projects. They might do this by training classifiers or keying in on common security-related terms in commit messages. From the public visibility into these commits, attackers can identify and weaponize the underlying vulnerabilities.

However, the open-source nature of projects need not be a liability when patching vulnerabilities. Transparent bug reporting instructions, including the proper point of contact, required diagnostic information, expected remediation timeline, and potential incentives (such as bug bounties or “hall of fame” status), can expedite the vulnerability reporting process. Fixes for vulnerabilities can also be disclosed in better coordination with public disclosures. For example, the Internet Systems Consortium (ISC), the maintainer of the open-source DNS software BIND and DHCP implementations, has established explicit disclosure policies that embargo publicly revealing security patches until near the time of public disclosure [7]. Instead, ISC customers, OEMs, operating system maintainers, and other vendors who re-package ISC open-source software are privately notified about vulnerabilities and their patches prior to public disclosure. This controlled disclosure process informs some of the most heavily affected parties before public disclosure, providing adequate preparation time while reducing the leakage of vulnerability information pre-disclosure.

### Figure 14: CDFs of the Number of Functions Modified

Figure 14 shows the cumulative distribution functions (CDFs) of the number of functions modified for all security and non-security bug patches, along with the median of security fixes grouped by repository.

### 6. Discussion

In this study, we conducted a large-scale empirical analysis of security patches across over 650 projects. Here, we discuss the main takeaways, highlighting the primary results and their implications for the security community moving forward.

#### Need for More Extensive or Effective Code Testing and Auditing Processes for Open-Source Projects

Our results show that vulnerabilities can persist for years, and their patches are sometimes problematic. Using a lower bound estimation method, our exploration of vulnerability life spans revealed that over a third of all security issues were first introduced more than three years before remediation. The issues do not cease once a vulnerability is first addressed; almost 5% of security patches negatively impacted the software, and over 7% were incomplete, leaving the security hole present.

These findings indicate that the software development and testing process, at least for open-source projects, is not adequate at quickly detecting and properly addressing security issues. There are several important implications due to these shortcomings. An attacker who discovers a zero-day vulnerability can retain its viability with reasonable confidence for several years. While large-scale exploitation of a zero-day may result in its detection and subsequent remediation, targeted attacks may persist unnoticed. Similarly, a subtle backdoor inserted into a code base will likely survive for a prolonged period, with only commit code reviews (if performed) as the final barrier. The frequent occurrences of broken security patches also have negative implications on user patching behavior. Applying a patch is often viewed as risky, and negative experiences with problematic updates (particularly regressive ones) can drive users away from timely remediation of security bugs.

A natural avenue for future work is to develop more effective testing processes, particularly considering usability, as developers are unlikely to leverage methods that prove difficult to deploy or challenging to interpret. One example of such research is VCCFinder [30], a code analysis tool that assists with finding vulnerability-introducing commits in open-source projects. In addition, software developers can already make strides in improving their practices.

#### Opportunities for Leveraging Characteristics of Security Patches

Our comparison of security patches with non-security bug fixes revealed that security fixes have a smaller impact on code bases, along various metrics. They involve fewer lines of code, fewer logical changes, and are more localized in their changes. This has implications along various patch analysis dimensions.

Tying back to broken patches, the lower complexity of security patches can perhaps be leveraged for safety analysis customized for evaluating just security fixes. Also, as these remedies involve fewer changes, automatic patching systems may operate more successfully if targeting security bugs. Zhong and Su [42] observed that general patches are frequently too complex or too delocalized to be amenable to automatic generation. However, security patches may be small and localized enough. From a usability angle, we may additionally be able to better inform end users of the potential impact of a security update, given its smaller and more localized changes. The need for more exploration into the verification and automated generation of security patches is quite salient as our ability to respond to security concerns has remained relatively unchanged, while the attack landscape has grown ever more dangerous.

### 7. Conclusion

In this paper, we conducted a large-scale empirical study of security patches, evaluating over 4,000 security fixes across a diverse set of 682 software projects. The investigation centered around a dataset we collected that merges vulnerability entries from the NVD, information scraped from relevant external references, affected source code repositories, and their associated security fixes. Using these disparate data sources, we analyzed facets of the patch development life cycle. Additionally, we extensively characterized the security patches themselves, contrasting them with non-security bug fixes.

Our findings have revealed shortcomings in our ability to quickly identify vulnerabilities and reliably address them. We have also observed that the timing of public disclosure does not closely align with the date a patch is applied to the code base, providing windows of opportunity for attacker exploitation. Our characterization of security fixes shows they are less complex and more localized than other non-security bug fixes, perhaps making them more amenable to software analysis and automatic repair techniques. By leveraging these insights, we hope the security community can progress in improving the remediation process for security vulnerabilities.

### Acknowledgments

We thank Christopher Thompson and Sascha Fahl for their helpful feedback on our study. This work was supported in part by the National Science Foundation awards CNS-1237265 and CNS-1518921, for which we are grateful. The opinions expressed in this paper do not necessarily reflect those of the research sponsors.

### References

[1] American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.
[2] cgit. https://git.zx2c4.com/cgit/about/.
[3] Core Infrastructure Initiative. https://www.coreinfrastructure.org.
[4] Exuberant Ctags. http://ctags.sourceforge.net/.
[5] GitLab. https://about.gitlab.com/.
[6] GitWeb. https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb.
[7] ISC Software Defect and Security Vulnerability Disclosure Policy. https://kb.isc.org/article/AA-00861/164/ISC-Software-Defect-and-Security-Vulnerability-Disclosure-Policy.html.
[8] Open Crypto Audit Project. https://opencryptoaudit.org.
[9] Undefined Behavior Sanitizer. https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html.
[10] Steve Christey and Brian Martin. Buying Into the Bias: Why Vulnerability Statistics Suck. In BlackHat, 2013.
[11] Zakir Durumeric, Frank Li, James Kasten, Nicholas Weaver, Johanna Amann, Jethro Beekman, Mathias Payer, David Adrian, Vern Paxson, Michael Bailey, and J. Alex Halderman. The Matter of Heartbleed. In ACM Internet Measurement Conference (IMC), 2014.
[12] Forum of Incident Response and Security Teams. Common Vulnerability Scoring System v3.0: Specification Document. https://www.first.org/cvss/specification-document.
[13] Stefan Frei. End-Point Security Failures: Insights Gained from Secunia PSI Scans. In USENIX Predict Workshop, 2011.
[14] Stefan Frei, Martin May, Ulrich Fiedler, and Bernhard Plattner. Large-Scale Vulnerability Analysis. In SIGCOMM Workshops, 2006.
[15] Google. Sanitizers. https://github.com/google/sanitizers.
[16] Google Open Source Blog. Announcing OSS-Fuzz: Continuous Fuzzing for Open Source Software. https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html.
[17] Zhongxian Gu, Earl Barr, David Hamilton, and Zhendong Su. Has the Bug Really Been Fixed? In International Conference on Software Engineering (ICSE), 2010.
[18] Zhen Huang, Mariana D’Angelo, Dhaval Miyani, and David Lie. Talos: Neutralizing Vulnerabilities with Security Workarounds for Rapid Response. In IEEE Security and Privacy (S&P), 2016.
[19] Jonathan Corbet. Kernel Vulnerabilities: Old or New?, October 2010. https://lwn.net/Articles/410606/.
[20] Kees Cook. Security Bug Lifetime, October 2016. https://outflux.net/blog/archives/2016/10/18/security-bug-lifetime.
[21] Frank Li, Zakir Durumeric, Jakub Czyz, Mohammad Karami, Michael Bailey, Damon McCoy, Stefan Savage, and Vern Paxson. You’ve Got Vulnerability: Exploring Effective Vulnerability Notifications. In USENIX Security Symposium, 2016.
[22] T. J. McCabe. A Complexity Measure. In IEEE Transaction on Software Engineering, 1976.
[23] MITRE Corporation. Common Vulnerabilities and Exposures. https://cve.mitre.org/.
[24] MITRE Corporation. CWE: Common Weakness Enumeration. https://cwe.mitre.org/.
[25] Nuthan Munaiah and Andrew Meneely. Vulnerability Severity Scoring and Bounties: Why the Disconnect? In International Workshop on Software Analytics (SWAN), 2016.
[26] Emerson Murphy-Hill, Thomas Zimmermann, Christian Bird, and Nachiappan Nagappan. The Design of Bug Fixes. In International Conference on Software Engineering (ICSE), 2013.
[27] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Dumitras. The Attack of the Clones: A Study of the Impact of Shared Code on Vulnerability Patching. In IEEE Security and Privacy (S&P), 2015.
[28] Andy Ozment and Stuart E. Schechter. Milk or Wine: Does Software Security Improve with Age? In USENIX Security Symposium, 2006.
[29] Jihun Park, Miryung Kim, Baishakhi Ray, and Doo-Hwan Bae. An Empirical Study on Supplementary Bug Fixes. In Mining Software Repositories (MSR), 2012.
[30] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi, Konrad Rieck, Sascha Fahl, and Yasemin Acar. VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits. In ACM Conference on Computer and Communications Security (CCS), 2015.
[31] RhodeCode. Version Control Systems Popularity in 2016. https://rhodecode.com/insights/version-control-systems-2016.
[32] Muhammad Shahzad, M. Zubair Shafiq, and Alex X. Liu. A Large Scale Exploratory Analysis of Software Vulnerability Life Cycles. In International Conference on Software Engineering (ICSE), 2012.
[33] Jacek Sliwerski, Thomas Zimmermann, and Andreas Zeller. When Do Changes Induce Fixes. In Mining Software Repositories (MSR), 2005.
[34] Mauricio Soto, Ferdian Thung, Chu-Pan Wong, Claire Le Goues, and David Lo. A Deeper Look into Bug Fixes: Patterns, Replacements, Deletions, and Additions. In Mining Software Repositories (MSR), 2016.
[35] U.S. National Institute of Standards and Technology. CVSS Information. https://nvd.nist.gov/cvss.cfm.
[36] U.S. National Institute of Standards and Technology. National Checklist Program Glossary. https://web.nvd.nist.gov/view/ncp/repository/glossary.
[37] U.S. National Institute of Standards and Technology. National Vulnerability Database. https://nvd.nist.gov/home.cfm.
[38] U.S. National Institute of Standards and Technology. NVD Data Feed. https://nvd.nist.gov/download.cfm.
[39] Zhengzi Xu, Bihuan Chen, Mahinthan Chandramohan, Yang Liu, and Fu Song. SPAIN: Security Patch Analysis for Binaries Towards Understanding the Pain and Pills. In International Conference on Software Engineering (ICSE), 2017.
[40] Zuoning Yin, Ding Yuan, Yuanyuan Zhou, Shankar Pasupathy, and Lakshmi Bairavasundaram. How Do Fixes Become Bugs? In ACM European Conference on Foundations of Software Engineering (ESEC/FSE), 2011.
[41] Shahed Zaman, Bram Adams, and Ahmed E. Hassan. Security Versus Performance Bugs: A Case Study on Firefox. In Mining Software Repositories (MSR), 2011.
[42] Hao Zhong and Zhendong Su. An Empirical Study on Real Bug Fixes. In International Conference on Software Engineering (ICSE), 2015.

### A. Obtaining Vulnerability Public Disclosure Dates

Table 5 lists the 20 most common externally referenced sites for CVEs corresponding to our collected security Git commits. We crawled references to these sites for publication dates to better estimate vulnerability public disclosure dates, although not all web pages were still active. Note that four sites (marked with asterisks) were no longer active, did not provide publication dates, or employed anti-crawling measures.

| Domain | Num. References |
| --- | --- |
| openwall.com | 2413 |
| ubuntu.com | 2055 |
| lists.opensuse.org | 1784 |
| securityfocus.com | 1505 |
| rhn.redhat.com | 1328 |
| bugzilla.redhat.com | 1158 |
| debian.org | 830 |
| lists.fedoraproject.org | 673 |
| oracle.com* | 573 |
| mandriva.com* | 540 |
| vupen.com* | 482 |
| xforce.iss.net* | 422 |
| marc.info | 305 |
| support.apple.com | 259 |
| securitytracker.com | 235 |
| lists.apple.com | 235 |
| seclists.org | 204 |
| bugs.wireshark.org | 143 |
| bugs.php.net | 127 |
| security.gentoo.org | 102 |

Session J3: Problematic Patches
CCS’17, October 30-November 3, 2017, Dallas, TX, USA