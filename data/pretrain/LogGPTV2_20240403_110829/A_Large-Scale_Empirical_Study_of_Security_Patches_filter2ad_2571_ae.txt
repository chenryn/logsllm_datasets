gap provides attackers with the knowledge and time to strike.
In the opposite direction, we discovered that when security is-
sues are reported (or discovered) privately and fixed, the remedy is
not immediately distributed and divulged, likely due to software
release cycles. Over a third of fixed vulnerabilities were not publicly
disclosed for more than a month. While operating in silence may
help limit to a small degree the dissemination of information about
the vulnerability, it also forestalls informing affected parties and
spurring them to remediate. Given the transparency of open-source
projects, attackers may be able to leverage this behavior by track-
ing the security commits of target software projects (perhaps by
training a classifier or keying in on common security-related terms
in commit messages). From the public visibility into these commits,
attackers can identify and weaponize the underlying vulnerabilities.
However, the open-source nature of projects need not be a lia-
bility when patching vulnerabilities. Transparent bug reporting in-
structions, containing the proper point of contact, the required diag-
nostic information, the expected remediation timeline, and potential
incentives (such as bug bounties or “hall of fame” status), can expe-
dite the vulnerability reporting process. Fixes for vulnerabilities can
also be disclosed in better coordination with public disclosures. For
example, the Internet Systems Consortium (ISC), maintainer of the
open-source DNS software BIND and DHCP implementations, has
established explicit disclosure policies that embargo publicly reveal-
ing security patches until near public disclosure time [7]. Instead,
ISC customers, OEMs, operating system maintainers, and other
vendors who re-package ISC open-source software are privately
notified about vulnerabilities and their patches prior to public dis-
closure. A controlled disclosure process informs some of the most
heavily affected parties before public disclosure, providing adequate
Figure 14: CDFs of the number of functions modified, for all
security and non-security bug patches, and the median of
security fixes grouped by repository.
6 DISCUSSION
In this study, we have conducted a large-scale empirical analysis
of security patches across over 650 projects. Here we discuss the
main takeaways, highlighting the primary results developed and
their implications for the security community moving forward.
Need for more extensive or effective code testing and audit-
ing processes for open-source projects: Our results show that
vulnerabilities live for years and their patches are sometimes prob-
lematic. Using a lower bound estimation method, our exploration
of vulnerability life spans revealed that over a third of all security
issues were first introduced more than 3 years prior to remediation.
The issues do not cease once a vulnerability is first addressed; al-
most 5% of security patches negatively impacted the software, and
over 7% were incomplete and left the security hole present.
These findings indicate that the software development and test-
ing process, at least for open-source projects, is not adequate at
quickly detecting and properly addressing security issues. There
are several important implications due to these shortcomings. An
attacker who discovers a zero-day vulnerability can retain its via-
bility with reasonable confidence for on the order of years. While
large-scale exploitation of a zero-day may result in its detection and
subsequent remediation, targeted attacks may persist unnoticed.
Similarly, a subtle backdoor inserted into a code base will also likely
survive for a prolonged period, with only commit code reviews (if
performed) as the final barrier. The not infrequent occurrences of
broken security patches also have negative implications on user
patching behavior. Applying a patch has often been viewed as risky,
and negative experiences with problematic updates (particularly
regressive ones) can drive users away from remedying security
bugs in a timely fashion.
A natural avenue for future work is to develop more effective
testing processes, particularly considering usability, as develop-
ers are unlikely to leverage methods that prove difficult to de-
ploy or challenging to interpret. One example of such research
is VCCFinder [30], a code analysis tool that assists with finding
vulnerability-introducing commits in open-source projects. In addi-
tion, software developers can already make strides in improving
0100101102Number of Affected Functions (Log-Scaled)0.00.20.40.60.81.0CDFSecurity FixesMedian Per RepoSecurity FixesBug FixesSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2213time to prepare properly, while reducing the leakage of vulnera-
bility information pre-disclosure. Additionally, outreach efforts to
notify end-systems affected by a vulnerability have shown some
promise [21]. While we advocate that open-source projects should
adopt such a disclosure process, they should be transparent about
the process itself and execute it consistently, avoiding hasty and
uncoordinated disclosures such as with the Heartbleed bug [11].
Opportunities for leveraging characteristics of security
patches: Our comparison of security patches with non-security
bug fixes revealed that security fixes have a smaller impact on code
bases, along various metrics. They involve fewer lines of code, fewer
logical changes, and are more localized in their changes. This has
implications along various patch analysis dimensions.
Tying back to broken patches, the lower complexity of security
patches can perhaps be leveraged for safety analysis customized
for evaluating just security fixes. Also, as these remedies involve
fewer changes, automatic patching systems may operate more suc-
cessfully if targeting security bugs. Zhong and Su [42] observed
that general patches are frequently too complex or too delocalized
to be amenable to automatic generation. However, security patches
may be small and localized enough. From a usability angle, we
may additionally be able to better inform end users of the potential
impact of a security update, given its smaller and more localized
changes. The need for more exploration into the verification and au-
tomated generation of security patches is quite salient as our ability
to respond to security concerns has remained relatively unchanged,
while the attack landscape has grown ever more dangerous.
7 CONCLUSION
In this paper, we conducted a large-scale empirical study of security
patches, evaluating over 4,000 security fixes across a diverse set of
682 software projects. The investigation centered around a dataset
we collected that merges vulnerability entries from the NVD, infor-
mation scraped from relevant external references, affected source
code repositories, and their associated security fixes. Using these
disparate data sources, we analyzed facets of the patch development
life cycle. In addition, we extensively characterized the security
patches themselves, contrasting them with non-security bug fixes.
Our findings have revealed shortcomings in our ability to quickly
identify vulnerabilities and reliably address them. Additionally,
we have observed that the timing of public disclosure does not
closely align with the date a patch is applied to the code base,
providing windows of opportunity for attacker exploitation. Our
characterization of security fixes shows they are less complex and
more localized than other non-security bug fixes, perhaps making
them more amenable to software analysis and automatic repair
techniques. By leveraging these insights, we hope the security
community can progress in improving the remediation process for
security vulnerabilities.
ACKNOWLEDGMENTS
We thank Christopher Thompson and Sascha Fahl for helpful feed-
back on our study. This work was supported in part by the National
Science Foundation awards CNS-1237265 and CNS-1518921, for
which we are grateful. The opinions expressed in this paper do not
necessarily reflect those of the research sponsors.
[10] Steve Christey and Brian Martin. Buying Into the Bias: Why Vulnerability
Statistics Suck. In BlackHat, 2013.
[11] Zakir Durumeric, Frank Li, James Kasten, Nicholas Weaver, Johanna Amann,
Jethro Beekman, Mathias Payer, David Adrian, Vern Paxson, Michael Bailey, and
J. Alex Halderman. The Matter of Heartbleed. In ACM Internet Measurement
Conference (IMC), 2014.
[12] Forum of Incident Response and Security Teams. Common Vulnerability
https://www.first.org/cvss/
Scoring System v3.0: Specification Document.
specification-document.
[13] Stefan Frei. End-Point Security Failures: Insights gained from Secunia PSI Scans.
In USENIX Predict Workshop, 2011.
[14] Stefan Frei, Martin May, Ulrich Fiedler, and Bernhard Plattner. Large-Scale
Vulnerability Analysis. In SIGCOMM Workshops, 2006.
[15] Google. Sanitizers. https://github.com/google/sanitizers.
[16] Google Open Source Blog. Announcing OSS-Fuzz: Continuous Fuzzing
https://opensource.googleblog.com/2016/12/
for Open Source Software.
announcing-oss-fuzz-continuous-fuzzing.html.
[17] Zhongxian Gu, Earl Barr, David Hamilton, and Zhendong Su. Has the Bug Really
Been Fixed? In International Conference on Software Engineering (ICSE), 2010.
[18] Zhen Huang, Mariana D’Angelo, Dhaval Miyani, and David Lie. Talos: Neutral-
izing Vulnerabilities with Security Workarounds for Rapid Response. In IEEE
Security and Privacy (S&P), 2016.
Jonathan Corbet. Kernel Vulnerabilities: Old or New?, October 2010.
https://lwn.net/Articles/410606/.
[20] Kees Cook. Security Bug Lifetime, October 2016. https://outflux.net/blog/
[19]
archives/2016/10/18/security-bug-lifetime.
[21] Frank Li, Zakir Durumeric, Jakub Czyz, Mohammad Karami, Michael Bailey,
Damon McCoy, Stefan Savage, and Vern Paxson. You’ve Got Vulnerability:
Exploring Effective Vulnerability Notifications. In USENIX Security Symposium,
2016.
[22] T. J. McCabe. A Complexity Measure. In IEEE Transaction on Software Engineering,
[23] MITRE Corporation. Common Vulnerabilities and Exposures.
[24] MITRE Corporation. CWE: Common Weakness Enumeration.
1976.
https://cve.mitre.org/.
https://cwe.mitre.org/.
REFERENCES
[1] American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.
[2] cgit. https://git.zx2c4.com/cgit/about/.
[3] Core Infrastructure Initiative. https://www.coreinfrastructure.org.
[4] Exuberant Ctags. http://ctags.sourceforge.net/.
[5] GitLab. https://about.gitlab.com/.
[6] GitWeb. https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb.
[7]
ISC Software Defect
https://kb.isc.org/article/AA-00861/164/ISC-Software-Defect-and-Security-
Vulnerability-Disclosure-Policy.html.
and Security Vulnerability Disclosure Policy.
[8] Open Crypto Audit Project. https://opencryptoaudit.org.
[9] Undefined Behavior Sanitizer. https://clang.llvm.org/docs/UndefinedBehavior
Sanitizer.html.
[25] Nuthan Munaiah and Andrew Meneely. Vulnerability Severity Scoring and
Bounties: Why the Disconnect? In International Workshop on Software Analytics
(SWAN), 2016.
[26] Emerson Murphy-Hill, Thomas Zimmermann, Christian Bird, and Nachiappan
Nagappan. The Design of Bug Fixes. In International Conference on Software
Engineering (ICSE), 2013.
[27] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Du-
mitras. The Attack of the Clones: A Study of the Impact of Shared Code on
Vulnerability Patching. In IEEE Security and Privacy (S&P), 2015.
[28] Andy Ozment and Stuart E. Schechter. Milk or Wine: Does Software Security
Improve with Age? In USENIX Security Symposium, 2006.
Jihun Park, Miryung Kim, Baishkhi Ray, and Doo-Hwan Bae. An Empirical Study
on Supplementary Bug Fixes. In Mining Software Repositories (MSR), 2012.
[30] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi,
Konrad Rieck, Sascha Fahl, and Yasemin Acar. VCCFinder: Finding Potential
Vulnerabilities in Open-Source Projects to Assist Code Audits. In ACM Conference
on Computer and Communications Security (CCS), 2015.
[31] RhodeCode. Version Control Systems Popularity in 2016. https://rhodecode.
[29]
com/insights/version-control-systems-2016.
[33]
[32] Muhammad Shahzad, M. Zubair Shafiq, and Alex X. Liu. A Large Scale Ex-
ploratory Analysis of Software Vulnerability Life Cycles. In International Con-
ference on Software Engineering (ICSE), 2012.
Jacek Sliwerski, Thomas Zimmermann, and Andreas Zeller. When Do Changes
Induce Fixes. In Mining Software Repositories (MSR), 2005.
[34] Mauricio Soto, Ferdian Thung, Chu-Pan Wong, Claire Le Goues, and David Lo.
A Deeper Look into Bug Fixes: Patterns, Replacements, Deletions, and Additions.
In Mining Software Repositories (MSR), 2016.
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2214[35] U.S. National Institute of Standards and Technology. CVSS Information.
https://nvd.nist.gov/cvss.cfm.
[36] U.S. National Institute of Standards and Technology. National Checklist Program
Glossary. https://web.nvd.nist.gov/view/ncp/repository/glossary.
[37] U.S. National Institute of Standards and Technology. National Vulnerability
Database. https://nvd.nist.gov/home.cfm.
[38] U.S. National Institute of Standards and Technology. NVD Data Feed.
https://nvd.nist.gov/download.cfm.
[39] Zhengzi Xu, Bihuan Chen, Mahinthan Chandramohan, Yang Liu, and Fu Song.
SPAIN: Security Patch Analysis for Binaries Towards Understanding the Pain
and Pills. In International Conference on Software Engineering (ICSE), 2017.
[40] Zuoning Yin, Ding Yuan, Yuanyuan Zhou, Shankar Pasupathy, and Lakshmi
Bairavasundaram. How do Fixes become Bugs? In ACM European Conference on
Foundations of Software Engineering (ESEC/FSE), 2011.
[41] Shahed Zaman, Bram Adams, and Ahmed E. Hassan. Security Versus Perfor-
mance Bugs: A Case Study on Firefox. In Mining Software Repositories (MSR),
2011.
[42] Hao Zhong and Zhendong Su. An Empirical Study on Real Bug Fixes.
In
International Conference on Software Engineering (ICSE), 2015.
A OBTAINING VULNERABILITY PUBLIC
DISCLOSURE DATES
Domain
Num.
References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
openwall.com
ubuntu.com
lists.opensuse.org
securityfocus.com
rhn.redhat.com
bugzilla.redhat.com
debian.org
lists.fedoraproject.org
oracle.com*
mandriva.com*
vupen.com*
xforce.iss.net*
marc.info
support.apple.com
securitytracker.com
lists.apple.com
seclists.org
bugs.wireshark.org
bugs.php.net
security.gentoo.org
2413
2055
1784
1505
1328
1158
830
673
573
540
482
422
305
259
235
235
204
143
127
102
Table 5: List of the 20 most common externally referenced
sites for CVEs corresponding to our collected security Git
commits. We crawled references to these sites for publica-
tion dates to better estimate vulnerability public disclosure
dates, although not all web pages were still active. Note that
4 sites (marked with asterisks) were no longer active, did not
provide publication dates, or employed anti-crawling mea-
sures.
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2215