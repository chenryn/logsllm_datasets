be referred to by other objects [29]. Sometimes,
there
are several indirect objects between the root and the one
containing real data. These PDF objects form a reference
chain. In the sample PDF as shown in Figure 2,
there
are ten indirect objects. We extract every chain containing
at least one Javascript object on the path. We call it a
Javascript chain. This feature computes the ratio of the
objects involved in Javascript chains to the total objects
in a document. Normally, malicious documents contain few
data and many of them have only one blank page. Thus, in
malicious documents, the ratio should be relatively high.
PDF Header Obfuscation: The PDF speciﬁcations re-
quire only that the header appears somewhere within the
ﬁrst 1,024 bytes of the ﬁle [29]. Benign documents rarely
have incentives to obfuscate PDF header, but malicious
documents are more willing to do so. Actually a recent work
has proposed to manipulate the ﬁle type identiﬁers to evade
anti-virus software [30]. Another trick attackers can use is
to specify an invalid version number in header. Our system
checks if PDF header appears at the very beginning of a
document and if the header format is valid.
Figure 1: System Architecture
PDF-speciﬁc Javascript objects, both documented [20] and
undocumented like printSeps(). Finally, the proposed
defense cannot be readily deployed on a user’s system.
Meanwhile, malicious Javascript detection on the Web is
a well-studied topic and many methods have been proposed
[14] [15] [21] [22]. However, these methods are specially
designed for detecting malicious Javascript on the Web and
they are mainly based on the analysis of Javascript code
itself. Differently, our approach monitors suspicious system-
level behaviors in the context of Javascript execution.
Similar to our approach, CWSandbox [13] and PEB
heuristics [23] also detect suspicious runtime behaviors
of document readers. However, CWSandbox [13] is used
primarily for detecting traditional malware, and it can be
easily evaded by event-triggering or environment-sensitive
malicious Javascript. Polychronakis et al. [23] proposed to
execute shellcode in a CPU emulator and detect suspicious
memory accesses using four heuristics. Egele et al. [24] pre-
sented a similar method which identiﬁes potential shellcode
at runtime and tests it in libemu [25]. Compared with these
methods, we use different and more robust runtime features,
which characterize the essential operations required in the
infection process. Moreover, we neither identify shellcode,
which can be evaded by using English Shellcode [26],
nor emulate CPU, which is heavyweight. Snow et al. [27]
proposed to monitor system call sequences of document
readers. However, they didn’t model the infection process
of malicious documents and their method is context-free.
III. SYSTEM DESIGN
A. Architecture
Our system consists of two major components, front-end
and back-end, working in two phases. In Phase-I, the front-
end component statically parses the document, analyzes the
structure, and ﬁnally instruments the PDF objects containing
Javascript. Then, in Phase-II when an instrumented docu-
ment is opened, the back-end component detects suspicious
behaviors of a PDF reader process in context of Javascript
execution and conﬁnes malicious attempts. Figure 1 shows
the architecture of our system.
102102102
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
The following three features are checked for objects on
Javascript chains only.
Hexadecimal Code in Keyword: PDF standard allows
any character except NULL to be represented by its 2-
digit hexadecimal code, preceded by one or more number
signs (#). Many malicious documents use this trick to
hide keywords. For example, in object (4 0) in Figure 2,
/JavaScript is encoded as /JavaScr##69pt.
Count of Empty Objects: Object (6 0) in Figure 2 shows
a Javascript chain from a malicious PDF. In this document,
the Javascript chain ends with an empty object. Actually, the
real malicious Javascript is embedded in another chain. Our
system counts the number of empty objects in a document.
Levels of Encoding: Encoding in PDF is used primarily
for compression. Normally benign documents use only one
level of encoding since multi-encoding brings little improve-
ment. However, malicious documents tend to use multiple
levels to evade anti-virus software.
Our system records the maximal encoding levels used on
Javascript chains. Maximum, rather than average, is used
for two reasons: on the one hand, maximum is more effec-
tive; on the other hand, average is susceptible to mimicry
attacks. For example, attackers can deliberately insert many
Javascript chains with one level of encoding. In this case,
the average drops close to one.
C. Document Instrumentation
Due to its wide-spread adoption, simplicity, and strong
expressiveness, Javascript is employed by the vast majority
of malicious PDFs in the wild. Therefore, identifying and
conﬁning malicious Javascript in PDFs can effectively miti-
gate the risk they currently pose to Internet users. Motivated
by the fact that malicious Javascript behaves signiﬁcantly
different from the benign one in system-level, we propose
a context-aware detection and conﬁnement approach. The
core idea is to conﬁne operations that are deemed suspicious
based on the context of Javascript execution.
In order to implement the context-aware approach, one
of the challenges is to identify when Javascript starts to
execute and when it ﬁnishes. A simlpe solution is to extract
Javascript from documents and execute it in an emulated en-
vironment. However, the extract-and-emulate method cannot
guarantee reliable Javascript extraction, as demonstrated by
an example shellcode in object (4 0) in Figure 2. Moreover,
it can be very computationally expensive to emulate PDF-
speciﬁc objects. An alternative option is to instrument a
Javascript interpreter. For example, a snippet of monitoring
code can be inserted at the entry and exit points of the
Javascript interpreter. Although easy to implement, we do
not choose this approach for two reasons. First, interpreter
instrumentation is insecure and can be easily bypassed.
Second, interpreter instrumentation has poor portability.
To overcome the aforementioned limitations, we propose
to leverage static document instrumentation, which requires
neither Javascript extraction nor environment emulation.
Using our approach, a snippet of context monitoring code is
inserted into the document statically. Every time Javascript
gets executed and ﬁnishes execution, the context monitoring
code takes control and informs our runtime detector.
Figure 2: A Synthetic Sample of Malicious PDF. The start point
can be object (2 0), (4 0), or (5 0). Any object can be selected as
the start point, and here we assume (2 0) as the start point.
The ﬁrst step of our method is to reconstruct all Javascript
chains in a document. We use a similar technique de-
scribed in previous works [7] [8] [9] to locate Javascript.
Speciﬁcally, we scan the document for keywords /JS and
/JavaScript that indicate a string or stream containing
Javascript [29]. Next, we recursively backtrack to ﬁnd the
ancestors on a chain and forward search for the descendants.
At the end of this process, we can extract a collection of
Javascript chains. We only instrument the chains associated
with some triggering actions, such as /OpenAction and
/AA. Figure 2 illustrates the execution steps of the afore-
mentioned algorithm. This algorithm is quite robust since it
is immune to Javascript code obfuscation, and according to
[29], the keyword /JavaScript should be plain text.
Javascript in PDF can be invoked either singly or sequen-
tially (through /Next and /Names). The instrumentation
process for single Javascript
is shown in Figure 3. We
ﬁrst store the original code in a string which is passed as
argument to eval() and then we prepend and append our
context monitoring code to it. This process is quite simple
and does not require sophisticated code analysis. The only
operation we perform is to scan the code and add ’\\’ for
(cid:2) and (cid:2)(cid:2)
in the original Javascript code. When Javascript
snippets are triggered, the context monitoring code, rather
than the original script, gets executed ﬁrst and it informs
the runtime detector of the entrance and exit of Javascript
context. During this process, the context monitoring code has
to be able to communicate with the runtime detector. PDF
provides three possible channels for communication: shared
ﬁle, HTTP, and SOAP (Simple Object Access Protocol).
Shared ﬁle is inefﬁcient and insecure. The Net.HTTP
method can be invoked only outside of a document [20],
103103103
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Table II: Runtime Behaviors Monitored in Two Contexts.
Context
Out-JS-Context
JS-Context
Runtime Behaviors
Process Creation and DLL Injection
Memory Consumption, Network Access, Mapped
Memory Search, Malware Dropping, Process
Creation, and DLL Injection
Figure 3: An Example to Illustrate Instrumentation
i.e., cannot work in our context monitoring code. We select
SOAP for our implementation to avoid the pitfalls of the
other communication options. To achieve that, a tiny SOAP
server is built
into the detector enabling the communi-
cation with the context monitoring code synchronously.
A randomly generated key is used to protect the SOAP
communications. The key has two parts, Detector ID and
Instrumentation Key. Detector ID is generated when our
system is installed. In case that an already instrumented
document is downloaded, this ﬁeld can be used to ﬁlter out
communications from the invalid context monitoring code.
The second ﬁeld is randomly generated when instrumenting
a document and it uniquely identiﬁes an instrumented doc-
ument. We also maintain a mapping between instrumented
document and key. When instrumenting a ﬁle, we ﬁrst ensure
that no duplicate instrumentation is carried out on a single
document. We further discuss the security of the key in
Section IV.
For sequentially invoked scripts, the process is a little
different. We can simply insert the context monitoring code
for each separate Javascript listed in /Names dictionary
or /Next ﬁeld. However, this can incur intolerably high
overhead. A better choice is to parse the chain and enclose
all scripts invoked sequentially using one single context
monitoring code, which is taken in our system.
Finally, attackers can also dynamically add Javascript
using the methods listed in Table IV and delay the execution
of Javascript using setTimeOut(). The two cases are
specially handled in Section IV.
D. Runtime Features
When an instrumented PDF is opened, our stand-alone
detector starts to monitor suspicious behaviors of the PDF
reader and collect evidence of infection. We detect those
essential operations that compromise target systems.
To improve the chance of successful exploits given various
modern security enhancements, heap spraying has become
the preferred weapon in hackers’ arsenal. When heap is
sprayed, a vulnerability like CVE-2008-2992 can be trig-
gered to transfer the control to shellcode, which will exe-
cute the dropped malware, carry out drive-by-download, or
establish a reverse bind shell. All of these operations should
rarely occur in benign Javascript. Thus, any occurrence
of these operations in the context of Javascript execution
can be considered as suspicious. This is referred to as JS-
context monitoring. In addition, we note that unlike browsers
which normally work in multi-thread, PDF readers process
documents in single-thread. That is, during the execution
of Javascript, no other PDF objects in the same or another
document will be processed. This fact simpliﬁes our method
104104104
and we do not need to consider the potential false positives
caused by concurrency.
JS-context monitoring can effectively detect malicious
documents that exploit the vulnerabilities in Javascript in-
terpreters. However, attackers can also exploit other vulner-
abilities like CVE-2010-3654 in Flash and CVE-2010-2883
in CoolType.dll. Javascript in such malicious documents is
normally responsible for heap spraying and malformed data
crafting. In such cases, probably the JS-context monitoring
can detect only one suspicious operation, i.e., heap spraying,
which is insufﬁcient for accurate detection. To complement
JS-context monitoring, we also monitor the runtime behav-
iors after Javascript ﬁnishes (out-JS-context).
Table II lists the runtime behaviors we monitor in the two
contexts above. Each monitored behavior is deﬁned as one
runtime feature in our system. Essentially, these behaviors
are modeled as sequences of system calls. While using
system calls to detect anomaly is not new [27] [31] [32], our
method differs in two aspects. First, most previous works
focus on detecting the behavior deviations from expected
execution. But we detect the infection attempts of malicious
code. Second, although there exist works on modeling the
behaviors of malware [32], our method relies on the context-
aware monitoring which has not been explored in previous
works. Below, we continue to explain the details of each
monitored behavior.
Malware Dropping: A common practice of malicious
PDF is to drop some malware to a user’s ﬁle sys-
tem. To monitor
the malware dropping, we hook the
APIs NtCreateFile(), URLDownloadToFile*(),
and URLDownloadToCacheFile*() on Windows.
Suspicious Memory Consumption: In heap spraying,
malicious code ﬁlls the heap with a NOP sled appended with
shellcode. Subsequently, it attempts to divert the control ﬂow
to any address covered by the NOP sled that leads to the
shellcode execution. In an effort to increase the probability
of hitting a NOP, malicious code attempts to write a large
area of memory, usually more than 100 MB [33].
Suspicious memory consumption can be very promising in
detecting the presence of heap spraying, especially if mon-
itored in JS-context. The context-free monitoring can cause
many false positives, e.g., in a case that many documents
are opened simultaneously. However,
the context-aware
monitoring in our method can effectively eliminate most
noise. We check the PROCESS_MEMORY_COUNTERS_EX
structure [34] at the entry/exit of JS context and when other
in-JS sensitive APIs are captured.
Suspicious Network Access: Unlike on the Web,
Javascript in PDF rarely connects to the Internet and its
primary function is to dynamically render a document,
which rarely relies on network communications. Actually,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
the number of Javascript methods provided in PDF for
network access is limited and most of them can be used only
in restricted conditions. For example, app.mailmsg()
and app.launchURL() establish network connections
using third-party applications (email clients and browsers),
which are not monitored by our runtime detector. And,
the Net.HTTP object cannot be invoked by Javascript
embedded in a document. Thus, any network connection
generated in JS-context should be considered as suspicious.
In our system, we hook all connect and listen. Note
that we white-list the communications between the runtime
detector and the context monitoring code.
Mapped Memory Search: Besides drive-by-download,
attackers can also embed malware in a document. Such a
technique is called Egg-hunt. In [35], a malicious sample
using egg-hunt
is analyzed. One challenge of egg-hunt
is that attackers cannot know where malware is loaded
in memory and they have to search the whole address
space. However, some memory in the address space is
unallocated, and dereferencing it can lead to segmentation
fault.
to prevent access violations, attackers
have to employ some techniques to safely search the
virtual address space. Several effective techniques,
for
both Linux and Windows, are described in [36]. In our
implementation, NtAccessCheckAndAuditAlarm() ,
IsBadReadPtr(),
and
NtAddAtom() are monitored.
NtDisplayString(),
In order
Process Creation: The ﬁnal step of an attack lies in exe-