title:BeauCoup: Answering Many Network Traffic Queries, One Memory Update
at a Time
author:Xiaoqi Chen and
Shir Landau Feibish and
Mark Braverman and
Jennifer Rexford
BeauCoup: Answering Many Network Traic
eries, One Memory Update at a Time
Xiaoqi Chen, Shir Landau-Feibish, Mark Braverman, Jennifer Rexford
Princeton University
{xiaoqic,sfeibish,mbraverm,jrex}@cs.princeton.edu
ABSTRACT
Network administrators constantly monitor network trac for con-
gestion and attacks. They need to perform a large number of mea-
surements on the trac simultaneously, to detect dierent types of
anomalies such as heavy hitters or super-spreaders. Existing tech-
niques often focus on a single statistic (e.g., trac volume) or traf-
c attribute (e.g., destination IP). However, performing numerous
heterogeneous measurements within the constrained memory ar-
chitecture of modern network devices poses signicant challenges,
due to the limited number of memory accesses allowed per packet.
We propose BeauCoup, a system based on the coupon collector
problem, that supports multiple distinct counting queries simulta-
neously while making only a small constant number of memory
accesses per packet. We implement BeauCoup on PISA commodity
programmable switches, satisfying the strict memory size and ac-
cess constraints while using a moderate portion of other data-plane
hardware resources. Evaluations show BeauCoup achieves the same
accuracy as other sketch-based or sampling-based solutions using
4x fewer memory access.
CCS CONCEPTS
• Networks → Data path algorithms; Network measurement;
KEYWORDS
Streaming Algorithm, Sketching, Distinct Counting, Data Plane,
Programmable Switch, Network Measurement
ACM Reference Format:
Xiaoqi Chen, Shir Landau-Feibish, Mark Braverman, Jennifer Rexford. 2020.
BeauCoup: Answering Many Network Trac Queries, One Memory Update
at a Time. In Annual conference of the ACM Special Interest Group on Data
Communication on the applications, technologies, architectures, and protocols
for computer communication (SIGCOMM ’20), August 10–14, 2020, Virtual
Event, NY, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/
3387514.3405865
1 INTRODUCTION
Network operators constantly monitor network trac to detect
attacks, performance problems, and faulty equipment. To ensure
that networks are functioning properly, network operators often
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7955-7/20/08...$15.00
https://doi.org/10.1145/3387514.3405865
226
need to monitor for multiple kinds of problems simultaneously,
including worms, port scans, DDoS attacks, SYN oods, and heavy-
hitter ows.
A variety of network-monitoring tasks can be modelled as count-
ing the number of distinct attributes seen across a set of packets.
As the simplest example, to detect a host that is spreading a worm
we may look for a super-spreader [31], or a source IP that sends
packets to many (e.g., 1000+) distinct destinations. However, there
may be multiple hosts that are spreading worms, thus we need
to identify all the source IPs sending trac to many destinations.
Furthermore, dierent tasks may dene their keys dierently: to
identify victims of a DDoS attack, for example, we need to instead
look for destination IPs that are receiving from many distinct source
IPs. The diversity of monitoring tasks with dierent key denitions
makes executing them simultaneously even more challenging.
Emerging programmable switches can analyze trac directly
in the data plane as packets stream by, making these devices well-
suited for performing such telemetry tasks. However, the memory
and processing resources of these switches are extremely limited.
Traditionally, researchers have focused on the limited memory space
in the data plane, designing compact data structures that can com-
pute approximate answers for a single trac-monitoring query [4,
17, 20, 23, 29, 31, 32], or multiple queries over the same key [22, 32].
Extending these solutions to support multiple queries over dier-
ent keys would require instantiating multiple separate data struc-
tures. Having separate data structures would consume precious
memory space in the data plane, but this is not the only problem. To
maintain line rate, programmable switches only allow a small con-
stant number of memory accesses per packet, making it infeasible
to update multiple data structures for every packet.
Most existing techniques for handling multiple queries rely heav-
ily on software running outside of the data plane, introducing
communication overhead and latency. The simplest approach is
to randomly sample packets in the data plane [3, 8], and have the
software compute multiple statistics on the samples. While useful
for detecting high-volume ows, random sampling signicantly
reduces the accuracy for queries that count the number of distinct
attributes. To improve accuracy, several recent works collect in-
formation about all potentially relevant ows in the data plane,
and have the software compute the statistics of interest [16, 20, 25].
However, these solutions introduce a tension between the volume
of data exported from the data plane and the number and diver-
sity of queries that can be answered with reasonable accuracy in
real time.
Instead, we need new techniques that can handle numerous
heterogeneous queries directly in the data plane, despite the limited
memory space and memory access. We present BeauCoup, which
supports a general query abstraction that counts the number of
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Xiaoqi Chen, Shir Landau-Feibish, Mark Braverman, Jennifer Rexford
distinct items (i.e., with dierent attributes) seen across a set of
related packets (with the same key), and ags the keys with distinct
counts above a threshold. For example, when searching for worms,
a packet’s source IP is the key, its destination IP is the attribute,
and the threshold decides how many distinct destination IPs are
needed to ag a source IP as a worm sender. Our goal is to generate
an alarm for those source IPs, approximately, within a reasonable
error such as 20%-30% of the threshold. BeauCoup runs multiple
queries simultaneously, under a strict per-packet memory access
constraint. BeauCoup also allows users to dene arbitrary packet-
header eld tuples as query keys and attributes, providing great
expressiveness. The query set can be updated on the y without
the need to re-compile the data-plane program; re-compilation is
required only when new header eld tuples are dened.
The design of BeauCoup takes inspiration from the coupon-
collector problem [14]. Using super-spreader detection as an ex-
ample, suppose we want to know if a sender has sent packets to at
least 130 dierent destination IP addresses. Instead of recording all
destination IPs we see, we dene 32 coupons, and map each destina-
tion IP to one of the 32 coupons uniformly at random. Now, for each
packet from that sender, we extract the destination IP and collect
its associated coupon. The coupon may be a duplicate (was already
collected earlier), either because the same destination IP appears
twice, or because two destination IPs map to the same coupon. We
then wait until we have collected each of the 32 coupons at least
once to ag the sender as a super-spreader.
The coupon-collector problem asks how many random draws
(with replacement) are needed to collect all of the coupons, i.e., have
every coupon drawn at least once. With 32 coupons, we need 129.9
draws in expectation. We therefore can use a 32-coupon collector
to identify if a particular sender is sending to 130 (or more) distinct
destination IPs. Answering a query with a dierent threshold (say,
1000 destination IPs) requires tuning the coupon collector’s cong-
uration, by changing the number of coupons (AC,
3BC %,3BC%>AC }
{3BC %,3BC%>AC }
Threshold
1000
1000
100
10000
10000
5000
3BC %
BA2 %
3BC%>AC
C8AC }
if TCP SYN,
otherwise ;
Table 1: Examples of count-distinct query denitions.
In designing and implementing BeauCoup, we make the follow-
ing contributions:
• Algorithm (§2): Data-plane algorithm for multiple count-distinct
queries under memory size and access constraints.
• Compiler (§3): Method for optimizing the accuracy of a set of
queries subject to the memory constraints.
• Prototype (§4): System that translates high-level queries into
data-plane conguration that runs on a PISA hardware switch.
We evaluate our prototype in §5, discuss future work in §6, compare
with related work in §7, and conclude in §8.
Ethics Statement: This work does not raise any ethical issues.
2 THE BEAUCOUP ALGORITHM
We now show the BeauCoup algorithm for network-monitoring
queries. We rst present a query model based on distinct counting,
that supports a variety of network-monitoring tasks. Next, we
discuss how to use coupon collectors to implement these queries.
Finally, we discuss how to use coupon collectors to run multiple
queries simultaneously, under a strict per-packet memory access
constraint.
2.1 Query: Count-Distinct with Threshold
A wide variety of network-monitoring tasks can be characterized as
a query @ which (1) maps each packet 8 to a key :4~@(8), (2) counts
the number of distinct attributes 0CCA@(8) that appear for each key,
and (3) applies a threshold )@ to the count to decide whether to
report a key. That is, BeauCoup should output an alert (@, :) for
query @ and key :, when the packets in a time window , satisfy:
  {0CCA@(8) | :4~@(8) = :}   > )@.
For the super-spreader example in the Introduction, the key is the
packet’s source IP, the attribute is the destination IP, and the thresh-
old is 1000. For DDoS detection, we can instead use the destination
IP as a packet’s key, use the source IP as the attribute, and perhaps
use a higher threshold like 10000.
In Table 1, we present more examples of common network-
monitoring tasks under our query model. In particular, the special
attribute 8.C8<4BC0<? is unique across all packets, so the user may
write a query to count packets by dening 0CCA@(8) = {8.C8<4BC0<?},
i.e., counting the number of unique timestamps seen. Filtering op-
erations can also be expressed in this query formulation, as shown
in the SYN-ood example above—by mapping irrelevant packets to
a xed value, the distinct counting query eectively ignores them.
BeauCoup: Answering Many Network Traic eries
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Notation
:4~@(·)
0CCA@(·)
)@
,
 
2
(
<@
?@
=@
W@
Denition
Key denition for query @
Attribute denition for query @