# 舞动苹果核心
## 盘古安全实验室

### 关于我们
- 专业的移动安全研究团队。
- 致力于物联网时代的安全研究。
- 深耕最新安全技术。

## Apple内核101

### XNU 内核
- **XNU** 是 Mach 和 BSD 的混合体。
- 驱动程序运行在单独分离的一套框架中，即 **IOKit**（原名 DriverKit）。

### BSD 层
- XNU 最上层是 POSIX/BSD 体系。
- 基于 FreeBSD 6.0 的代码。
- 提供文件、进程/线程、信号等系统调用。
- Apple 扩展：增加了许多独有的系统调用。

### Mach 层
- 内核中的微内核部分。
- NeXTSTEP 时代的遗留产物。
- 提供任务、线程、内存管理及 IPC 通讯机制。
- 处理底层的异常、中断和陷入。

## IOKit 101

### IOKit (DriverKit)
- 自主的驱动程序环境。
- 移植自 NextSTEP 时代的 DriverKit。
- 采用面向对象且受限制的 C++ 框架。
- 使用复杂的多层机制 "IORegistry"。
- 使用其自身的 IPC 子系统 (mach)。
- 在内核中解析 XML。
- 内核中的主要攻击面。

### IOKit 运行环境
- 自包含的运行环境。
- IO* API 封装了内核态的 API。
- 驱动相对容易移植。
- C++ 运行库由 libkern 提供。
- 驱动通过 IORegistry 注册并分类。
- 用户态的 API 由 IOKit.framework 提供。
- 映射内存至用户态。
- 对 Userclient 提供方法和属性设置接口。

### IOService
- 自动向 IORegistry 注册驱动。
- 在驱动生命周期内提供回调。
- 支持通知。
- 支持中断处理。
- 提供 Userclient 机制与用户态 API 通信。

### IOKit User Clients
- 直接与用户态交互的接口。
- 并非所有驱动都提供 User Clients。
- 通过继承 IOUserClient 实现。
- 调用的方法保存在 vtable 中。
- IOKit 会校验对应方法的参数（类型、大小）。
- 结构体 / 标量（二进制数据以及整数或内存地址）。

## IOKit 漏洞举例

### 内核中的 XML 解析
- **OSUnserializeBinary** 用于反序列化二进制 XML 数据。
- OSUnserializeBinary 通过动态数组手动管理 OSobject 指针。
- 存在多个漏洞。

### CVE-2016-1828 Use-after-free 漏洞
- 当在 XML 字典中两次设置同一个 key 时，会导致前一个 key 的对象指针指向的内容被释放。
- 但 OSUnserializeBinary 内部动态数组中仍保留前一个对象的指针。
- 当该指针被引用时，导致 Use-after-free。

### CVE-2016-4655 / CVE-2016-4680 内核信息泄露漏洞
- 在处理 kOSSerializeNumber 时，二进制内容中的长度直接传递给 OSNumner::withNumber 函数。
- 实际上长度不能大于 64 字节，但代码在初始化 size 时没有对用户输入进行验证。
- 影响调用 size getter 函数 numberOfBits()/numberOfBytes()。

### is_io_registry_entry_get_property_bytes
- 该函数用于获取指定 key 的数据。
- Bytes=&offsetBytes 指向栈上的数据。
- 长度由用户控制。
- bcopy 调用会导致泄露栈上的数据（如函数返回地址、堆地址、cookie）。

### IOSurfaceRootUserClient port UAF (CVE-2017-13861)
- UserClient 异步调用时会释放一个传入的 port 结构。
- 返回至上层 MIG 代码时会继续对已经释放过的 port 进行清理操作，导致 Use-after-free。
- 详细分析见 [这里](http://blog.pangu.io/iosurfacerootuserclient-port-uaf/)。
- GP0 wake_port exploit 见 [这里](https://bugs.chromium.org/p/project-zero/issues/detail?id=1417)。

## IOKit 漏洞挖掘思路
- 堆栈溢出。
- 整数溢出。
- IOSurface 分配 surface 对象。
- 数组越界。
- 数组索引时长度由用户控制。
- TOCTTOU/Double Fetch。
- 许多 IOService 会映射一段内存与用户态进程共享，这段共享数据是否存在安全问题。
- 类型混淆。
- Race condition/Use-after-free。
- IOService 允许有多个 UserClient，是否正确设置了锁。

## 协处理器的安全问题

### 除了 AP 之外的其他处理器
- 相机。
- Wi-Fi。
- SEP（Secure Enclave Processor）。
- 固件升级流程是否存在安全问题。
- 相机固件使用 CRC32 校验。
- SEP 芯片内置 GID key。

### 协处理器架构（以 SEP 为例）
- 采用实时操作系统（RTOS）。
- 与 AP 通信采用 mailbox 机制。
- OS 之上运行各种应用。
- 指纹识别。
- 认证服务。
- 缺少一定的安全防护机制，如 ASLR。

### GP0 Wi-Fi 漏洞/Broadpwn 通过协处理器打到系统 AP
- Broadcom Wi-Fi SoC 架构。
- 运行 Broadcom 修改的 RTOS。
- 可能还能在网上找到一些相似的代码（VMG-1312）。
- 与 AP 的接口：SDIO、PCIE。
- 获得 Wi-Fi 代码芯片执行权限后，再通过 PCIE 读写物理内存。
- PCIE -> DART (Device Address Resolution Table)。
- 详细细节见 [这里](https://googleprojectzero.blogspot.co.id/2017/10/over-air-vol-2-pt-3-exploiting-wi-fi.html)。

## 感谢
感谢您的关注！

## Q&A
欢迎提问！