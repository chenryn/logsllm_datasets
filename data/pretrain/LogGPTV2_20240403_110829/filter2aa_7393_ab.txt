\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
path 单元。 用于根据文件系统上特定对象的变化来启动其他服务。参见
\fBsystemd.path\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
slice 单元。 用于控制特定 CGroup 内(例如一组 service 与 scope 单元)所有进程的总体资源占用。 参见
\fBsystemd.slice\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}
scope 单元。它与 service 单元类似，但是由 systemd 根据 D\-bus 接口接收到的信息自动创建， 可用于管理外部创建的进程。参见
\fBsystemd.scope\fR(5)
手册。
.RE
.PP
单元的名称由单元文件的名称决定， 某些特定的单元名称具有特殊的含义，详情参见
\fBsystemd.special\fR(7)
手册。
.PP
systemd 能够处理各种类型的依赖关系， 包括依赖与冲突(也就是
\fIRequires=\fR
与
\fIConflicts=\fR
指令)， 以及先后顺序(也就是
\fIAfter=\fR
与
\fIBefore=\fR
指令)。 注意， 上述两种类型的依赖关系(依赖与冲突、先后顺序)之间是相互独立的(无关的)。 举例来说，假定
foo\&.service
依赖于(Requires)
bar\&.service
但并未指定先后顺序， 那么这两个服务将被同时并行启动。 不过在两个单元之间既存在依赖关系也存在先后顺序的情形也很常见。 另外需要注意的是， 大多数依赖关系都是由 systemd 隐式创建和维护的， 因此没有必要额外手动创建它们。
.PP
应用程序和单元(透过依赖关系)可能会查询其他单元的状态变化。 在 systemd 中， 这种查询被包装为"任务"(job)并被作为"任务队列"进行管理。 任务的执行结果可能成功也可能失败， 但是任务的执行顺序是依照任务所属单元之间的先后顺序确定的。
.PP
在系统启动时，systemd 默认启动
default\&.target
单元， 该单元中应该包含所有你想在开机时默认启动的单元。 但实际上，它通常只是一个指向
graphical\&.target
(图形界面) 或
multi\-user\&.target
(命令行界面，常用于嵌入式或服务器环境， 一般是 graphical\&.target 的一个子集)的符号连接。 详见
\fBsystemd.special\fR(7)
手册。
.PP
systemd 依赖于内核提供的
\m[blue]\fBcgroups\fR\m[]\&\s-2\u[1]\d\s+2
特性控制进程的派生， 从而确保可以追踪到所有子进程。 cgroups 信息由内核负责维护， 并且可以通过
/sys/fs/cgroup/systemd/
接口进行访问。此外，还可以通过
\fBsystemd-cgls\fR(1)
或
\fBps\fR(1)
之类的工具进行查看 (\fBps xawf \-eo pid,user,cgroup,args\fR)
.PP
systemd 几乎完全兼容传统的 SysV init 系统： SysV init 脚本可以作为另一种配置文件格式被识别； 提供与 SysV 兼容的
/dev/initctl
接口； 提供各种 SysV 工具的兼容实现； 依然兼容例如
/etc/fstab
或者
utmp
之类传统的 Unix 特性。
.PP
systemd 还有一个小型的事务系统： 如果要启动或关闭一个单元， 那么该单元所依赖的 所有其他单元都会被一起加入到同一个临时事务中。 这样，就可以校验整个事务的一致性， 也就是检查是否存在循环依赖。 如果存在循环依赖， 那么 systemd 将会尝试通过 去掉弱依赖(want)来解决这个问题， 如果最终实在无法解决循环依赖的问题， 那么 systemd 将会报错。
.PP
systemd 内置了许多系统启动过程中必需的操作， 例如，设置 hostname 以及配置 loopback 网络设备， 以及挂载
/sys
和
/proc
文件系统。
.PP
在系统启动或者执行
\fBsystemctl reload \&.\&.\&.\fR
时， systemd 可以根据其他配置文件或者内核引导选项动态生成单元，参见
\fBsystemd.generator\fR(7)
手册。
.PP
如果要从容器中调用 systemd 那么必须遵守
\m[blue]\fBContainer Interface\fR\m[]\&\s-2\u[2]\d\s+2
规范。 如果要从 initrd 中调用 systemd 那么必须遵守
\m[blue]\fBinitrd Interface\fR\m[]\&\s-2\u[3]\d\s+2
规范。
.SH "目录"
.PP
系统单元目录
.RS 4
systemd 会从多个优先级不同的系统单元目录中读取系统单元， 软件包应该将系统单元文件安装在
\fBpkg\-config systemd \-\-variable=systemdsystemunitdir\fR
命令所返回的系统单元目录中(通常是
/usr/lib/systemd/system)。 此外， systemd 还会读取优先级较高的
/usr/local/lib/systemd/system
目录以及优先级较低的
/usr/lib/systemd/system
目录中的系统单元文件。 优先级最高的系统单元目录是
\fBpkg\-config systemd \-\-variable=systemdsystemconfdir\fR
命令所返回的目录(通常是
/etc/systemd/system)。 注意，软件包应该仅使用
\fBsystemctl\fR(1)
的
\fBenable\fR
与
\fBdisable\fR
命令修改上述目录中的内容。 完整的目录列表参见
\fBsystemd.unit\fR(5)
手册。
.RE
.PP
用户单元目录
.RS 4
用户单元目录所遵守的规则与系统单元目录类似， 软件包应该将用户单元文件安装在
\fBpkg\-config systemd \-\-variable=systemduserunitdir\fR
命令所返回的用户单元目录中(通常是/usr/lib/systemd/user)。 此外，因为用户单元目录还遵守
\m[blue]\fBXDG Base Directory specification\fR\m[]\&\s-2\u[4]\d\s+2
规范， 所以 systemd 还会读取
$XDG_DATA_HOME/systemd/user(仅在已设置 $XDG_DATA_HOME 的情况下) 或
~/\&.local/share/systemd/user(仅在未设置 $XDG_DATA_HOME 的情况下) 目录中的用户单元。 全局用户单元目录(针对所有用户)是
\fBpkg\-config systemd \-\-variable=systemduserconfdir\fR
命令所返回的目录(通常是/etc/systemd/user)。 注意，软件包应该仅使用
\fBsystemctl\fR(1)
的
\fBenable\fR
与
\fBdisable\fR
命令修改上述目录中的内容。 无论这种修改是全局的(针对所有用户)、还是私有的(针对单个用户)。 完整的目录列表参见
\fBsystemd.unit\fR(5)
手册。
.RE
.PP
SysV启动脚本目录(不同发行版之间差别可能很大)
.RS 4
如果 systemd 找不到指定服务所对应的单元文件， 那么就会到SysV启动脚本目录中 去寻找同名脚本(去掉
\&.service
后缀)。
.RE
.PP
SysV运行级目录(不同发行版之间差别可能很大)
.RS 4
systemd 在决定是否启用一个服务的时候， 会参照SysV运行级目录对该服务的设置。 注意， 这个规则不适用于那些已经拥有原生单元文件的服务。
.RE
.SH "信号"
.PP
\fBSIGTERM\fR
.RS 4
systemd 系统实例将会保存其当前状态， 然后重新执行它自身，再恢复到先前保存的状态。 基本上相当于执行
\fBsystemctl daemon\-reexec\fR
命令。
.sp
systemd 用户实例将会启动
exit\&.target
单元。 基本上相当于执行
\fBsystemctl \-\-user start exit\&.target\fR
命令。
.RE
.PP
\fBSIGINT\fR
.RS 4
systemd 系统实例将会启动
ctrl\-alt\-del\&.target
单元。 基本上相当于执行
\fBsystemctl start ctl\-alt\-del\&.target\fR
命令。 在控制台上按 Ctrl\-Alt\-Del 组合键即可触发这个信号。 但是，如果在2秒内连续收到超过7次这个信号，那么将会不顾一切的立即强制重启。 因此，如果系统在重启过程中僵死， 那么可以通过快速连按7次 Ctrl\-Alt\-Del 组合键来强制立即重启。
.sp
systemd 用户实例处理此信号的方式与
\fBSIGTERM\fR
相同。
.RE
.PP
\fBSIGWINCH\fR
.RS 4
systemd 系统实例将会启动
kbrequest\&.target
单元。 基本上相当于执行
\fBsystemctl start kbrequest\&.target\fR
命令。
.sp
systemd 用户实例将会完全忽略此信号。
.RE
.PP
\fBSIGPWR\fR
.RS 4
systemd 将会启动
sigpwr\&.target
单元。 基本上相当于执行
\fBsystemctl start sigpwr\&.target\fR
命令。
.RE
.PP
\fBSIGUSR1\fR
.RS 4
systemd 将会尝试重新连接到 D\-Bus 总线。
.RE
.PP
\fBSIGUSR2\fR
.RS 4
systemd 将会以人类易读的格式将其完整的状态记录到日志中。 日期的格式与
\fBsystemd\-analyze dump\fR
的输出格式相同。
.RE
.PP
\fBSIGHUP\fR
.RS 4
重新加载守护进程的配置文件。 基本上相当于执行
\fBsystemctl daemon\-reload\fR
命令。
.RE
.PP
\fBSIGRTMIN+0\fR
.RS 4
进入默认模式，启动
default\&.target
单元。 基本上相当于执行
\fBsystemctl start default\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+1\fR
.RS 4
进入救援模式，启动
rescue\&.target
单元。 基本上相当于执行
\fBsystemctl isolate rescue\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+2\fR
.RS 4
进入紧急维修模式，启动
emergency\&.target
单元。 基本上相当于执行
\fBsystemctl isolate emergency\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+3\fR
.RS 4
关闭系统，启动
halt\&.target
单元。 基本上相当于执行
\fBsystemctl start halt\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+4\fR
.RS 4
关闭系统并切断电源，启动
poweroff\&.target
单元。 基本上相当于执行
\fBsystemctl start poweroff\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+5\fR
.RS 4
重新启动，启动
reboot\&.target
单元。 基本上相当于执行
\fBsystemctl start reboot\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+6\fR
.RS 4
通过内核的 kexec 接口重新启动，启动
kexec\&.target
单元。 基本上相当于执行
\fBsystemctl start kexec\&.target\fR
命令。
.RE
.PP
\fBSIGRTMIN+13\fR
.RS 4
立即关闭机器
.RE
.PP
\fBSIGRTMIN+14\fR
.RS 4
立即关闭机器并切断电源
.RE
.PP
\fBSIGRTMIN+15\fR
.RS 4
立即重新启动
.RE
.PP
\fBSIGRTMIN+16\fR
.RS 4
立即通过内核的 kexec 接口重新启动
.RE
.PP
\fBSIGRTMIN+20\fR
.RS 4
在控制台上显示状态消息。 相当于使用
\fIsystemd\&.show_status=1\fR
内核引导选项。
.RE
.PP
\fBSIGRTMIN+21\fR
.RS 4
禁止在控制台上显示状态消息。 相当于使用
\fIsystemd\&.show_status=0\fR
内核引导选项。
.RE
.PP
\fBSIGRTMIN+22\fR, \fBSIGRTMIN+23\fR
.RS 4
将日志等级设为