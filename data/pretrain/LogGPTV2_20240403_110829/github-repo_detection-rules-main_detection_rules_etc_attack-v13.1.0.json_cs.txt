{"created": "2017-12-14T16:46:06.044Z", "created_by_ref": "", "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the net view \\\\\\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.", "external_references": [{"external_id": "T1135", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1135"}, {"description": "Wikipedia. (2017, April 15). Shared resource. Retrieved June 30, 2017.", "source_name": "Wikipedia Shared Resource", "url": "https://en.wikipedia.org/wiki/Shared_resource"}, {"description": "Microsoft. (n.d.). Share a Folder or Drive. Retrieved June 30, 2017.", "source_name": "TechNet Shared Folder", "url": "https://technet.microsoft.com/library/cc770880.aspx"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "discovery"}], "modified": "2023-03-30T21:01:46.370Z", "name": "Network Share Discovery", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Praetorian"], "x_mitre_data_sources": ["Command: Command Execution", "Process: OS API Execution", "Process: Process Creation"], "x_mitre_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["macOS", "Windows", "Linux"], "x_mitre_version": "3.1"}, {"created": "2017-05-31T21:31:28.471Z", "created_by_ref": "", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "external_references": [{"external_id": "T1120", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1120"}, {"description": "Shahriar Shovon. (2018, March). List USB Devices Linux. Retrieved March 11, 2022.", "source_name": "Peripheral Discovery Linux", "url": "https://linuxhint.com/list-usb-devices-linux/"}, {"description": "SS64. (n.d.). system_profiler. Retrieved March 11, 2022.", "source_name": "Peripheral Discovery macOS", "url": "https://ss64.com/osx/system_profiler.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "discovery"}], "modified": "2023-03-30T21:01:41.575Z", "name": "Peripheral Device Discovery", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_data_sources": ["Command: Command Execution", "Process: Process Creation", "Process: OS API Execution"], "x_mitre_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows", "macOS", "Linux"], "x_mitre_version": "1.3"}, {"created": "2020-10-02T15:49:03.815Z", "created_by_ref": "", "description": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: DNS Dumpster) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).", "external_references": [{"external_id": "T1590.004", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1590/004"}, {"description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.", "source_name": "DNS Dumpster", "url": "https://dnsdumpster.com/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "reconnaissance"}], "modified": "2021-04-15T03:33:02.476Z", "name": "Network Topology", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.\n\nDetection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2020-10-01T01:41:08.652Z", "created_by_ref": "", "description": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may develop self-signed code signing certificates for use in operations.", "external_references": [{"external_id": "T1587.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1587/002"}, {"description": "Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016.", "source_name": "Wikipedia Code Signing", "url": "https://en.wikipedia.org/wiki/Code_signing"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "resource-development"}], "modified": "2021-10-17T16:07:08.549Z", "name": "Code Signing Certificates", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Malware Repository: Malware Metadata"], "x_mitre_detection": "Consider analyzing self-signed code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, and common name. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in crafting self-signed code signing certificates.\n\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as [Code Signing](https://attack.mitre.org/techniques/T1553/002) or [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.1"}
{"created": "2020-02-04T19:17:41.767Z", "created_by_ref": "", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).", "external_references": [{"external_id": "T1222.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1222/001"}, {"description": "Hybrid Analysis. (2018, June 12). c9b65b764985dfd7a11d3faf599c56b8.exe. Retrieved August 19, 2018.", "source_name": "Hybrid Analysis Icacls1 June 2018", "url": "https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100"}, {"description": "Hybrid Analysis. (2018, May 30). 2a8efbfadd798f6111340f7c1c956bee.dll. Retrieved August 19, 2018.", "source_name": "Hybrid Analysis Icacls2 May 2018", "url": "https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110"}, {"description": "M. Satran, M. Jacobs. (2018, May 30). Access Control Lists. Retrieved February 4, 2020.", "source_name": "Microsoft Access Control Lists May 2018", "url": "https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-lists"}, {"description": "Microsoft. (2018, May 30). DACLs and ACEs. Retrieved August 19, 2018.", "source_name": "Microsoft DACL May 2018", "url": "https://docs.microsoft.com/windows/desktop/secauthz/dacls-and-aces"}, {"description": "Netsurion. (2014, February 19). Monitoring File Permission Changes with the Windows Security Log. Retrieved August 19, 2018.", "source_name": "EventTracker File Permissions Feb 2014", "url": "https://www.eventtracker.com/tech-articles/monitoring-file-permission-changes-windows-security-log/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2023-04-21T12:27:04.900Z", "name": "Windows File and Directory Permissions Modification", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_data_sources": ["Command: Command Execution", "File: File Metadata", "Active Directory: Active Directory Object Modification", "Process: Process Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.2"}, {"created": "2019-11-07T19:52:52.801Z", "created_by_ref": "", "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ", "external_references": [{"external_id": "T1137.006", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1137/006"}, {"description": "Microsoft. (n.d.). Add or remove add-ins. Retrieved July 3, 2017.", "source_name": "Microsoft Office Add-ins", "url": "https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460"}, {"description": "Knowles, W. (2017, April 21). Add-In Opportunities for Office Persistence. Retrieved July 3, 2017.", "source_name": "MRWLabs Office Persistence Add-ins", "url": "https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/"}, {"description": "Caban, D. and Hirani, M. (2018, October 3). You\u2019ve Got Mail! Enterprise Email Compromise. Retrieved April 22, 2019.", "source_name": "FireEye Mail CDS 2018", "url": "https://summit.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-technical-s03-youve-got-mail.pdf"}, {"description": "Shukrun, S. (2019, June 2). Office Templates and GlobalDotName - A Stealthy Office Persistence Technique. Retrieved August 26, 2019.", "source_name": "GlobalDotName Jun 2019", "url": "https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2021-08-16T21:26:09.296Z", "name": "Add-ins", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Windows Registry: Windows Registry Key Creation", "Process: Process Creation", "File: File Creation", "Windows Registry: Windows Registry Key Modification", "File: File Modification", "Command: Command Execution"], "x_mitre_detection": "Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.(Citation: GlobalDotName Jun 2019)(Citation: MRWLabs Office Persistence Add-ins)\n\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "User"], "x_mitre_platforms": ["Windows", "Office 365"], "x_mitre_version": "1.1"}
{"created": "2019-12-12T15:08:20.972Z", "created_by_ref": "", "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ", "external_references": [{"external_id": "T1505.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1505/002"}, {"description": "Microsoft. (2016, June 1). Transport agents. Retrieved June 24, 2019.", "source_name": "Microsoft TransportAgent Jun 2016", "url": "https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help"}, {"description": "Faou, M. (2019, May). Turla LightNeuron: One email away from remote code execution. Retrieved June 24, 2019.", "source_name": "ESET LightNeuron May 2019", "url": "https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2021-10-18T17:05:44.321Z", "name": "Transport Agent", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["ESET", "Christoffer Str\u00f6mblad"], "x_mitre_data_sources": ["Application Log: Application Log Content", "File: File Creation"], "x_mitre_detection": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["SYSTEM", "Administrator", "root"], "x_mitre_platforms": ["Linux", "Windows"], "x_mitre_version": "1.0"}
{"created": "2017-05-31T21:31:04.307Z", "created_by_ref": "", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. show version).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)", "external_references": [{"external_id": "T1082", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1082"}, {"description": "Amazon. (n.d.). describe-instance-information. Retrieved March 3, 2020.", "source_name": "Amazon Describe Instance", "url": "https://docs.aws.amazon.com/cli/latest/reference/ssm/describe-instance-information.html"}, {"description": "Google. (n.d.). Rest Resource: instance. Retrieved March 3, 2020.", "source_name": "Google Instances Resource", "url": "https://cloud.google.com/compute/docs/reference/rest/v1/instances"}, {"description": "Microsoft. (2019, March 1). Virtual Machines - Get. Retrieved October 8, 2019.", "source_name": "Microsoft Virutal Machine API", "url": "https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/get"}, {"description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.", "source_name": "20 macOS Common Tools and Techniques", "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/"}, {"description": "Phile Stokes. (2018, September 20). On the Trail of OSX.FairyTale | Adware Playing at Malware. Retrieved August 24, 2021.", "source_name": "OSX.FairyTale", "url": "https://www.sentinelone.com/blog/trail-osx-fairytale-adware-playing-malware/"}, {"description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.", "source_name": "US-CERT-TA18-106A", "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "discovery"}], "modified": "2023-03-30T21:01:40.871Z", "name": "System Information Discovery", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Maril Vernon @shewhohacks", "Praetorian", "Austin Clark, @c2defense"], "x_mitre_data_sources": ["Process: Process Creation", "Process: OS API Execution", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to gather  detailed system information with built-in features native to the network device platform.  Monitor CLI activity for unexpected or unauthorized use  commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nIn cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "IaaS", "Linux", "macOS", "Network"], "x_mitre_version": "2.5"}, {"created": "2017-05-31T21:30:56.776Z", "created_by_ref": "", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"external_id": "T1071", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1071"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2023-04-11T14:35:41.468Z", "name": "Application Layer Protocol", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Duane Michael"], "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow"], "x_mitre_deprecated": false, "x_mitre_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "2.1"}, {"created": "2020-03-13T21:14:58.206Z", "created_by_ref": "", "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)\n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.", "external_references": [{"external_id": "T1074.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1074/002"}, {"description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.", "source_name": "Mandiant M-Trends 2020", "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "collection"}], "modified": "2021-03-08T10:33:02.019Z", "name": "Remote Data Staging", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Praetorian"], "x_mitre_data_sources": ["File: File Creation", "Command: Command Execution", "File: File Access"], "x_mitre_detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "IaaS", "Linux", "macOS"], "x_mitre_version": "1.1"}
{"created": "2017-05-31T21:30:46.977Z", "created_by_ref": "", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)", "external_references": [{"external_id": "T1053", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1053"}, {"description": "Campbell, B. et al. (2022, March 21). Serpent, No Swiping! New Backdoor Targets French Entities with Unique Attack Chain. Retrieved April 11, 2022.", "source_name": "ProofPoint Serpent", "url": "https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain"}, {"description": "Microsoft. (2005, January 21). Task Scheduler and security. Retrieved June 8, 2016.", "source_name": "TechNet Task Scheduler Security", "url": "https://technet.microsoft.com/en-us/library/cc785125.aspx"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2023-03-30T21:01:52.697Z", "name": "Scheduled Task/Job", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Prashant Verma, Paladion", "Leo Loobeek, @leoloobeek", "Travis Smith, Tripwire", "Alain Homewood, Insomnia Security", "Andrew Northern, @ex_raritas", "Bryan Campbell, @bry_campbell", "Zachary Abzug, @ZackDoesML", "Selena Larson, @selenalarson"], "x_mitre_data_sources": ["File: File Modification", "Scheduled Job: Scheduled Job Creation", "Process: Process Creation", "Container: Container Creation", "Command: Command Execution", "File: File Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_effective_permissions": ["SYSTEM", "Administrator", "User"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM", "User"], "x_mitre_platforms": ["Windows", "Linux", "macOS", "Containers"], "x_mitre_remote_support": true, "x_mitre_version": "2.2"}, {"created": "2020-01-24T14:38:49.266Z", "created_by_ref": "", "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the AlwaysInstallElevated policy is enabled.(Citation: Microsoft AlwaysInstallElevated 2018)", "external_references": [{"external_id": "T1218.007", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1218/007"}, {"description": "Co, M. and Sison, G. (2018, February 8). Attack Using Windows Installer msiexec.exe leads to LokiBot. Retrieved April 18, 2019.", "source_name": "TrendMicro Msiexec Feb 2018", "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/"}, {"description": "LOLBAS. (n.d.). Msiexec.exe. Retrieved April 18, 2019.", "source_name": "LOLBAS Msiexec", "url": "https://lolbas-project.github.io/lolbas/Binaries/Msiexec/"}, {"description": "Microsoft. (2017, October 15). msiexec. Retrieved January 24, 2020.", "source_name": "Microsoft msiexec", "url": "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec"}, {"description": "Microsoft. (2018, May 31). AlwaysInstallElevated. Retrieved December 14, 2020.", "source_name": "Microsoft AlwaysInstallElevated 2018", "url": "https://docs.microsoft.com/en-us/windows/win32/msi/alwaysinstallelevated"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-04-19T17:33:16.346Z", "name": "Msiexec", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Ziv Kaspersky, Cymptom", "Alexandros Pappas"], "x_mitre_data_sources": ["Module: Module Load", "Command: Command Execution", "Network Traffic: Network Connection Creation", "Process: Process Creation"], "x_mitre_defense_bypassed": ["Digital Certificate Validation", "Application control"], "x_mitre_deprecated": false, "x_mitre_detection": "Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows"], "x_mitre_version": "2.0"}, {"created": "2017-12-14T16:46:06.044Z", "created_by_ref": "", "description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them (Citation: Adding Login Items). Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). These login items are stored in the user's ~/Library/Preferences/ directory in a plist file called com.apple.loginitems.plist (Citation: Methods of Mac Malware Persistence). Some of these applications can open visible dialogs to the user, but they don\u2019t all have to since there is an option to \u2018Hide\u2019 the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method  SMLoginItemSetEnabled  can be used to set Login Items, but scripting languages like [AppleScript](https://attack.mitre.org/techniques/T1155) can do this as well  (Citation: Adding Login Items).", "external_references": [{"external_id": "T1162", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1162"}, {"description": "Apple. (2016, September 13). Adding Login Items. Retrieved July 11, 2017.", "source_name": "Adding Login Items", "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html"}, {"description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.", "source_name": "Methods of Mac Malware Persistence", "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"}, {"description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.", "source_name": "Malware Persistence on OS X", "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"}, {"description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.", "source_name": "OSX.Dok Malware", "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/"}, {"external_id": "CAPEC-564", "source_name": "capec", "url": "https://capec.mitre.org/data/definitions/564.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2022-04-22T18:50:50.483Z", "name": "Login Item", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_deprecated": false, "x_mitre_detection": "All the login items created via shared file lists are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area (and the corresponding file locations) should be monitored and whitelisted for known good applications. Otherwise, Login Items are located in  Contents/Library/LoginItems  within an application bundle, so these paths should be monitored as well  (Citation: Adding Login Items). Monitor process execution resulting from login actions for unusual or unknown applications.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["macOS"], "x_mitre_version": "1.0"}
{"created": "2020-10-02T15:47:59.457Z", "created_by_ref": "", "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).", "external_references": [{"external_id": "T1590.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1590/003"}, {"description": "Garc\u00eda, C. (2019, April 3). Pentesting Active Directory Forests. Retrieved October 20, 2020.", "source_name": "Pentesting AD Forests", "url": "https://www.slideshare.net/rootedcon/carlos-garca-pentesting-active-directory-forests-rooted2019"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "reconnaissance"}], "modified": "2021-04-15T03:34:22.917Z", "name": "Network Trust Dependencies", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.\n\nDetection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2020-03-02T20:08:03.691Z", "created_by_ref": "", "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)", "external_references": [{"external_id": "T1498.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1498/002"}, {"description": "Marek Majkowsk, Cloudflare. (2017, May 24). Reflections on reflection (attacks). Retrieved April 23, 2019.", "source_name": "Cloudflare ReflectionDoS May 2017", "url": "https://blog.cloudflare.com/reflections-on-reflections/"}, {"description": "Cloudflare. (n.d.). What is a DNS amplification attack?. Retrieved April 23, 2019.", "source_name": "Cloudflare DNSamplficationDoS", "url": "https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/"}, {"description": "Cloudflare. (n.d.). What is a NTP amplificaiton attack?. Retrieved April 23, 2019.", "source_name": "Cloudflare NTPamplifciationDoS", "url": "https://www.cloudflare.com/learning/ddos/ntp-amplification-ddos-attack/"}, {"description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.", "source_name": "Arbor AnnualDoSreport Jan 2018", "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf"}, {"description": "Marek Majkowski of Cloudflare. (2018, February 27). Memcrashed - Major amplification attacks from UDP port 11211. Retrieved April 18, 2019.", "source_name": "Cloudflare Memcrashed Feb 2018", "url": "https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/"}, {"description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.", "source_name": "Cisco DoSdetectNetflow", "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2023-03-30T21:01:41.052Z", "name": "Reflection Amplification", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_data_sources": ["Sensor Health: Host Status", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow(Citation: Cisco DoSdetectNetflow), SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "Azure AD", "Office 365", "SaaS", "IaaS", "Linux", "macOS", "Google Workspace"], "x_mitre_version": "1.3"}, {"created": "2020-02-11T19:05:45.829Z", "created_by_ref": "", "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)", "external_references": [{"external_id": "T1556.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1556/002"}, {"description": "Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.", "source_name": "Carnal Ownage Password Filters Sept 2013", "url": "http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html"}, {"description": "Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.", "source_name": "Clymb3r Function Hook Passwords Sept 2013", "url": "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}, {"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2021-04-20T20:11:55.147Z", "name": "Password Filter DLL", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Vincent Le Toux"], "x_mitre_data_sources": ["Windows Registry: Windows Registry Key Modification", "Module: Module Load", "File: File Creation"], "x_mitre_detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.\n\nPassword filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "2.0"}, {"created": "2022-03-28T15:34:44.590Z", "created_by_ref": "", "description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop Services)\n\n[Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run as a \"generic\" process (ex: svchost.exe) load the service's DLL file, the location of which is stored in a Registry entry named ServiceDll.(Citation: Microsoft System Services Fundamentals) The termsrv.dll file, typically stored in `%SystemRoot%\\System32\\`, is the default ServiceDll value for Terminal Services in `HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\`.\n\nAdversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.(Citation: James TermServ DLL) Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal termsrv.dll functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) sessions by either patching the termsrv.dll file or modifying the ServiceDll value to point to a DLL that provides increased RDP functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.", "external_references": [{"external_id": "T1505.005", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1505/005"}, {"description": "James. (2019, July 14). @James_inthe_box. Retrieved March 28, 2022.", "source_name": "James TermServ DLL", "url": "https://twitter.com/james_inthe_box/status/1150495335812177920"}, {"description": "Microsoft. (2018, February 17). Windows System Services Fundamentals. Retrieved March 28, 2022.", "source_name": "Microsoft System Services Fundamentals", "url": "https://social.technet.microsoft.com/wiki/contents/articles/12229.windows-system-services-fundamentals.aspx"}, {"description": "Microsoft. (2019, August 23). About Remote Desktop Services. Retrieved March 28, 2022.", "source_name": "Microsoft Remote Desktop Services", "url": "https://docs.microsoft.com/windows/win32/termserv/about-terminal-services"}, {"description": "Stas'M Corp. (2014, October 22). RDP Wrapper Library by Stas'M. Retrieved March 28, 2022.", "source_name": "RDPWrap Github", "url": "https://github.com/stascorp/rdpwrap"}, {"description": "Windows OS Hub. (2021, November 10). How to Allow Multiple RDP Sessions in Windows 10 and 11?. Retrieved March 28, 2022.", "source_name": "Windows OS Hub RDP", "url": "http://woshub.com/how-to-allow-multiple-rdp-sessions-in-windows-10/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2022-04-18T20:22:44.971Z", "name": "Terminal Services DLL", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["File: File Modification", "Windows Registry: Windows Registry Key Modification", "Process: Process Creation", "Module: Module Load", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor for changes to Registry keys associated with ServiceDll and other subkey values under HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\.\n\nMonitor unexpected changes and/or interactions with termsrv.dll, which is typically stored in %SystemRoot%\\System32\\.\n\nMonitor commands as well as  processes and arguments for potential adversary actions to modify Registry values (ex: reg.exe) or modify/replace the legitimate termsrv.dll.\n\nMonitor module loads by the Terminal Services process (ex: svchost.exe -k termsvcs) for unexpected DLLs (the default is %SystemRoot%\\System32\\termsrv.dll, though an adversary could also use [Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005) on a malicious payload).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2020-03-09T14:07:54.329Z", "created_by_ref": "", "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via osascript /path/to/script or osascript -e \"script here\". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.(Citation: SentinelOne AppleScript)\n\nAppleScripts do not need to call osascript to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s\u00a0NSAppleScript\u00a0or\u00a0OSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs)", "external_references": [{"external_id": "T1059.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1059/002"}, {"description": "Apple. (2016, January 25). Introduction to AppleScript Language Guide. Retrieved March 28, 2020.", "source_name": "Apple AppleScript", "url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html"}, {"description": "Phil Stokes. (2019, December 5). macOS Red Team: Calling Apple APIs Without Building Binaries. Retrieved July 17, 2020.", "source_name": "SentinelOne macOS Red Team", "url": "https://www.sentinelone.com/blog/macos-red-team-calling-apple-apis-without-building-binaries/"}, {"description": "Phil Stokes. (2020, March 16). How Offensive Actors Use AppleScript For Attacking macOS. Retrieved July 17, 2020.", "source_name": "SentinelOne AppleScript", "url": "https://www.sentinelone.com/blog/how-offensive-actors-use-applescript-for-attacking-macos/"}, {"description": "Yerko Grbic. (2017, February 14). Macro Malware Targets Macs. Retrieved July 8, 2017.", "source_name": "Macro Malware Targets Macs", "url": "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/macro-malware-targets-macs/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2022-10-19T15:37:28.071Z", "name": "AppleScript", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Phil Stokes, SentinelOne"], "x_mitre_data_sources": ["Process: OS API Execution", "Command: Command Execution", "Process: Process Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor for execution of AppleScript through osascript and usage of the NSAppleScript and OSAScript APIs that may be related to other suspicious behavior occurring on the system. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information [Discovery](https://attack.mitre.org/tactics/TA0007), [Collection](https://attack.mitre.org/tactics/TA0009), or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["macOS"], "x_mitre_remote_support": false, "x_mitre_version": "1.1"}
{"created": "2018-01-16T16:13:52.465Z", "created_by_ref": "", "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition)\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS)\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension)\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.(Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control.(Citation: Chrome Extension C2 Malware)", "external_references": [{"external_id": "T1176", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1176"}, {"description": "Brinkmann, M. (2017, September 19). First Chrome extension with JavaScript Crypto Miner detected. Retrieved November 16, 2017.", "source_name": "Chrome Extension Crypto Miner", "url": "https://www.ghacks.net/2017/09/19/first-chrome-extension-with-javascript-crypto-miner-detected/"}, {"description": "Chris Ross. (2019, February 8). No Place Like Chrome. Retrieved April 27, 2021.", "source_name": "xorrior chrome extensions macOS", "url": "https://www.xorrior.com/No-Place-Like-Chrome/"}, {"description": "Chrome. (n.d.). What are Extensions?. Retrieved November 16, 2017.", "source_name": "Chrome Extensions Definition", "url": "https://developer.chrome.com/extensions"}, {"description": "De Tore, M., Warner, J. (2018, January 15). MALICIOUS CHROME EXTENSIONS ENABLE CRIMINALS TO IMPACT OVER HALF A MILLION USERS AND GLOBAL BUSINESSES. Retrieved January 17, 2018.", "source_name": "ICEBRG Chrome Extensions", "url": "https://www.icebrg.io/blog/malicious-chrome-extensions-enable-criminals-to-impact-over-half-a-million-users-and-global-businesses"}, {"description": "Jagpal, N., et al. (2015, August). Trends and Lessons from Three Years Fighting Malicious Extensions. Retrieved November 17, 2017.", "source_name": "Malicious Chrome Extension Numbers", "url": "https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43824.pdf"}, {"description": "Kjaer, M. (2016, July 18). Malware in the browser: how you might get hacked by a Chrome extension. Retrieved November 22, 2017.", "source_name": "Chrome Extension C2 Malware", "url": "https://kjaer.io/extension-malware/"}, {"description": "Marinho, R. (n.d.). \"Catch-All\" Google Chrome Malicious Extension Steals All Posted Data. Retrieved November 16, 2017.", "source_name": "Catch All Chrome Extension", "url": "https://isc.sans.edu/forums/diary/CatchAll+Google+Chrome+Malicious+Extension+Steals+All+Posted+Data/22976/https:/threatpost.com/malicious-chrome-extension-steals-data-posted-to-any-website/128680/)"}, {"description": "Marinho, R. (n.d.). (Banker(GoogleChromeExtension)).targeting. Retrieved November 18, 2017.", "source_name": "Banker Google Chrome Extension Steals Creds", "url": "https://isc.sans.edu/forums/diary/BankerGoogleChromeExtensiontargetingBrazil/22722/"}, {"description": "Vachon, F., Faou, M. (2017, July 20). Stantinko: A massive adware campaign operating covertly since 2012. Retrieved November 16, 2017.", "source_name": "Stantinko Botnet", "url": "https://www.welivesecurity.com/2017/07/20/stantinko-massive-adware-campaign-operating-covertly-since-2012/"}, {"description": "Wikipedia. (2017, October 8). Browser Extension. Retrieved January 11, 2018.", "source_name": "Wikipedia Browser Extension", "url": "https://en.wikipedia.org/wiki/Browser_extension"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2022-04-20T16:46:36.707Z", "name": "Browser Extensions", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Chris Ross @xorrior", "Justin Warner, ICEBRG"], "x_mitre_data_sources": ["Process: Process Creation", "Windows Registry: Windows Registry Key Creation", "Command: Command Execution", "File: File Creation", "Network Traffic: Network Connection Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.\n\nMonitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.\n\nOn macOS, monitor the command line for usage of the profiles tool, such as profiles install -type=configuration. Additionally, all installed extensions maintain a plist file in the /Library/Managed Preferences/username/ directory. Ensure all listed files are in alignment with approved extensions.(Citation: xorrior chrome extensions macOS)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.2"}, {"created": "2020-02-20T15:31:43.613Z", "created_by_ref": "", "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\n\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)\n\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012)", "external_references": [{"external_id": "T1499.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1499/002"}, {"description": "ASERT Team, Netscout Arbor. (2012, April 24). DDoS Attacks on SSL: Something Old, Something New. Retrieved April 22, 2019.", "source_name": "Arbor SSLDoS April 2012", "url": "https://www.netscout.com/blog/asert/ddos-attacks-ssl-something-old-something-new"}, {"description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.", "source_name": "Cisco DoSdetectNetflow", "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf"}, {"description": "Cloudflare. (n.d.). What is an HTTP flood DDoS attack?. Retrieved April 22, 2019.", "source_name": "Cloudflare HTTPflood", "url": "https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/"}, {"description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.", "source_name": "Arbor AnnualDoSreport Jan 2018", "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2023-03-30T21:01:43.164Z", "name": "Service Exhaustion Flood", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Application Log: Application Log Content", "Network Traffic: Network Traffic Flow", "Sensor Health: Host Status"], "x_mitre_deprecated": false, "x_mitre_detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.\n\nIn addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.\n\nExternally monitor the availability of services that may be targeted by an Endpoint DoS.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "Azure AD", "Office 365", "SaaS", "IaaS", "Linux", "macOS", "Google Workspace"], "x_mitre_version": "1.3"}, {"created": "2020-03-11T14:28:40.064Z", "created_by_ref": "", "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.", "external_references": [{"external_id": "T1195.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1195/003"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "initial-access"}], "modified": "2022-04-28T16:05:10.755Z", "name": "Compromise Hardware Supply Chain", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Sensor Health: Host Status"], "x_mitre_deprecated": false, "x_mitre_detection": "Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.1"}
{"created": "2017-05-31T21:31:17.472Z", "created_by_ref": "", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)).", "external_references": [{"external_id": "T1106", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1106"}, {"description": "Apple. (2015, September 16). Cocoa Application Layer. Retrieved June 25, 2020.", "source_name": "MACOS Cocoa", "url": "https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/CocoaApplicationLayer/CocoaApplicationLayer.html#//apple_ref/doc/uid/TP40001067-CH274-SW1"}, {"description": "Apple. (n.d.). Core Services. Retrieved June 25, 2020.", "source_name": "Apple Core Services", "url": "https://developer.apple.com/documentation/coreservices"}, {"description": "Apple. (n.d.). Foundation. Retrieved July 1, 2020.", "source_name": "macOS Foundation", "url": "https://developer.apple.com/documentation/foundation"}, {"description": "de Plaa, C. (2019, June 19). Red Team Tactics: Combining Direct System Calls and sRDI to bypass AV/EDR. Retrieved September 29, 2021.", "source_name": "OutFlank System Calls", "url": "https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/"}, {"description": "Free Software Foundation, Inc.. (2020, June 18). Creating a Process. Retrieved June 25, 2020.", "source_name": "GNU Fork", "url": "https://www.gnu.org/software/libc/manual/html_node/Creating-a-Process.html"}, {"description": "Gavriel, H. (2018, November 27). Malware Mitigation when Direct System Calls are Used. Retrieved September 29, 2021.", "source_name": "CyberBit System Calls", "url": "https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/"}, {"description": "glibc developer community. (2020, February 1). The GNU C Library (glibc). Retrieved June 25, 2020.", "source_name": "GLIBC", "url": "https://www.gnu.org/software/libc/"}, {"description": "Kerrisk, M. (2016, December 12). libc(7) \u2014 Linux manual page. Retrieved June 25, 2020.", "source_name": "LIBC", "url": "https://man7.org/linux/man-pages//man7/libc.7.html"}, {"description": "Linux Kernel Organization, Inc. (n.d.). The Linux Kernel API. Retrieved June 25, 2020.", "source_name": "Linux Kernel API", "url": "https://www.kernel.org/doc/html/v4.12/core-api/kernel-api.html"}, {"description": "MDSec Research. (2020, December). Bypassing User-Mode Hooks and Direct Invocation of System Calls for Red Teams. Retrieved September 29, 2021.", "source_name": "MDSec System Calls", "url": "https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/"}, {"description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.", "source_name": "Microsoft CreateProcess", "url": "http://msdn.microsoft.com/en-us/library/ms682425"}, {"description": "Microsoft. (n.d.). Programming reference for the Win32 API. Retrieved March 15, 2020.", "source_name": "Microsoft Win32", "url": "https://docs.microsoft.com/en-us/windows/win32/api/"}, {"description": "Microsoft. (n.d.). What is .NET Framework?. Retrieved March 15, 2020.", "source_name": "Microsoft NET", "url": "https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet-framework"}, {"description": "The NTinterlnals.net team. (n.d.). Nowak, T. Retrieved June 25, 2020.", "source_name": "NT API Windows", "url": "https://undocumented.ntinternals.net/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2022-04-19T20:30:00.118Z", "name": "Native API", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Gordon Long, Box, Inc., @ethicalhax", "Stefan Kanthak"], "x_mitre_data_sources": ["Module: Module Load", "Process: OS API Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. \n\nUtilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "macOS", "Linux"], "x_mitre_remote_support": false, "x_mitre_version": "2.1"}, {"created": "2022-06-15T18:00:04.219Z", "created_by_ref": "", "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\n\nNetwork connection history may be stored in various locations on a system. For example, RDP connection history may be stored in Windows Registry values under (Citation: Microsoft RDP Removal):\n\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\n* HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\n\nWindows may also store information about recent RDP connections in files such as C:\\Users\\\\%username%\\Documents\\Default.rdp and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`.(Citation: Moran RDPieces) Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)\n\nMalicious network connections may also require changes to network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004) or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.", "external_references": [{"external_id": "T1070.007", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1070/007"}, {"description": "freedesktop.org. (n.d.). systemd-journald.service. Retrieved June 15, 2022.", "source_name": "FreeDesktop Journal", "url": "https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html"}, {"description": "Microsoft. (2021, September 24). How to remove entries from the Remote Desktop Connection Computer box. Retrieved June 15, 2022.", "source_name": "Microsoft RDP Removal", "url": "https://docs.microsoft.com/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer"}, {"description": "Moran, B. (2020, November 18). Putting Together the RDPieces. Retrieved October 17, 2022.", "source_name": "Moran RDPieces", "url": "https://www.osdfcon.org/presentations/2020/Brian-Moran_Putting-Together-the-RDPieces.pdf"}, {"description": "rjben. (2012, May 30). How do you find the culprit when unauthorized access to a computer is a problem?. Retrieved August 3, 2022.", "source_name": "Apple Culprit Access", "url": "https://discussions.apple.com/thread/3991574"}, {"description": "Sarah Edwards. (2020, April 30). Analysis of Apple Unified Logs: Quarantine Edition [Entry 6] \u2013 Working From Home? Remote Logins. Retrieved August 19, 2021.", "source_name": "Apple Unified Log Analysis Remote Login and Screen Sharing", "url": "https://sarah-edwards-xzkc.squarespace.com/blog/2020/4/30/analysis-of-apple-unified-logs-quarantine-edition-entry-6-working-from-home-remote-logins"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-10-21T16:24:06.968Z", "name": "Clear Network Connection History and Configurations", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["CrowdStrike Falcon OverWatch"], "x_mitre_data_sources": ["File: File Modification", "Command: Command Execution", "Firewall: Firewall Rule Modification", "Process: Process Creation", "Windows Registry: Windows Registry Key Modification"], "x_mitre_deprecated": false, "x_mitre_detection": "", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows", "Network"], "x_mitre_version": "1.0"}
{"created": "2020-08-24T13:43:00.028Z", "created_by_ref": "", "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)", "external_references": [{"external_id": "T1558.004", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1558/004"}, {"description": "HarmJ0y. (2017, January 17). Roasting AS-REPs. Retrieved August 24, 2020.", "source_name": "Harmj0y Roasting AS-REPs Jan 2017", "url": "http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/"}, {"description": "Sanyal, M.. (2014, March 18). Kerberos Pre-Authentication: Why It Should Not Be Disabled. Retrieved August 25, 2020.", "source_name": "Microsoft Kerberos Preauth 2014", "url": "https://social.technet.microsoft.com/wiki/contents/articles/23559.kerberos-pre-authentication-why-it-should-not-be-disabled.aspx"}, {"description": "Jeff Warren. (2019, June 27). Cracking Active Directory Passwords with AS-REP Roasting. Retrieved August 24, 2020.", "source_name": "Stealthbits Cracking AS-REP Roasting Jun 2019", "url": "https://blog.stealthbits.com/cracking-active-directory-passwords-with-as-rep-roasting/"}, {"description": "Medin, T. (2014, November). Attacking Kerberos - Kicking the Guard Dog of Hades. Retrieved March 22, 2018.", "source_name": "SANS Attacking Kerberos Nov 2014", "url": "https://redsiege.com/kerberoast-slides"}, {"description": "Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets Using Kerberoast \u2013 Exploiting Kerberos to Compromise the Active Directory Domain. Retrieved March 22, 2018.", "source_name": "AdSecurity Cracking Kerberos Dec 2015", "url": "https://adsecurity.org/?p=2293"}, {"description": "Bani, M. (2018, February 23). Detecting Kerberoasting activity using Azure Security Center. Retrieved March 23, 2018.", "source_name": "Microsoft Detecting Kerberoasting Feb 2018", "url": "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/"}, {"description": "Microsoft. (2017, April 19). 4768(S, F): A Kerberos authentication ticket (TGT) was requested. Retrieved August 24, 2020.", "source_name": "Microsoft 4768 TGT 2017", "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4768"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2021-06-07T19:23:33.039Z", "name": "AS-REP Roasting", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Yossi Nisani, Cymptom", "James Dunn, @jamdunnDFW, EY", "Swapnil Kumbhar", "Jacques Pluviose, @Jacqueswildy_IT", "Dan Nutting, @KerberToast"], "x_mitre_data_sources": ["Active Directory: Active Directory Credential Request"], "x_mitre_detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Microsoft Detecting Kerberoasting Feb 2018)(Citation: Microsoft 4768 TGT 2017)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_system_requirements": ["Valid domain account"], "x_mitre_version": "1.0"}