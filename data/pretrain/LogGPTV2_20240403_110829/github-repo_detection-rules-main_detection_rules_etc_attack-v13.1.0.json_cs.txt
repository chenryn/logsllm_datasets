### Network Share Discovery
**Created:** 2017-12-14T16:46:06.044Z  
**Modified:** 2023-03-30T21:01:46.370Z  
**Description:**  
Adversaries may search for shared folders and drives on remote systems to identify potential sources of information for collection and to find systems of interest for lateral movement. Networks often contain shared network drives and folders that enable users to access file directories across various systems. File sharing over a Windows network typically occurs via the SMB (Server Message Block) protocol.

The `net` command can be used to query a remote system for available shared drives using `net view \\\\remotesystem`. It can also be used to list shared drives on the local system with `net share`. On macOS, the `sharing -l` command lists all shared points used for SMB services.

**External References:**
- [Wikipedia Shared Resource](https://en.wikipedia.org/wiki/Shared_resource)
- [TechNet Shared Folder](https://technet.microsoft.com/library/cc770880.aspx)

**Kill Chain Phases:**
- Discovery

**Detection:**
System and network discovery techniques should be monitored as part of a chain of behavior that could lead to other activities such as lateral movement. Monitor processes and command-line arguments for actions that could gather system and network information. Information may also be acquired through Windows system management tools like Windows Management Instrumentation (WMI) and PowerShell.

---

### Peripheral Device Discovery
**Created:** 2017-05-31T21:31:28.471Z  
**Modified:** 2023-03-30T21:01:41.575Z  
**Description:**  
Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices include keyboards, printers, cameras, smart card readers, or removable storage. This information may enhance their awareness of the system and network environment and can be used for further actions.

**External References:**
- [Peripheral Discovery Linux](https://linuxhint.com/list-usb-devices-linux/)
- [Peripheral Discovery macOS](https://ss64.com/osx/system_profiler.html)

**Kill Chain Phases:**
- Discovery

**Detection:**
Monitor processes and command-line arguments for actions that could gather system and network information. Information may also be acquired through Windows system management tools like WMI and PowerShell.

---

### Network Topology
**Created:** 2020-10-02T15:49:03.815Z  
**Modified:** 2021-04-15T03:33:02.476Z  
**Description:**  
Adversaries may gather information about the victim's network topology, including the physical and logical arrangement of both external-facing and internal network environments. This information may include details about network devices such as gateways and routers.

Adversaries may gather this information through direct collection actions like active scanning or phishing, or by accessing online data sets. This information can reveal opportunities for further reconnaissance, establishing operational resources, and initial access.

**External References:**
- [DNS Dumpster](https://dnsdumpster.com/)

**Kill Chain Phases:**
- Reconnaissance

**Detection:**
Much of this activity may have a high occurrence and false positive rate, making detection difficult. Detection efforts may focus on related stages of the adversary lifecycle, such as during initial access.

---

### Code Signing Certificates
**Created:** 2020-10-01T01:41:08.652Z  
**Modified:** 2021-10-17T16:07:08.549Z  
**Description:**  
Adversaries may create self-signed code signing certificates for use in operations. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and security tools may trust a signed piece of code more than an unsigned one, even if they don't know who issued the certificate or who the author is.

**External References:**
- [Wikipedia Code Signing](https://en.wikipedia.org/wiki/Code_signing)

**Kill Chain Phases:**
- Resource Development

**Detection:**
Analyze self-signed code signing certificates for features associated with the adversary, such as the thumbprint, algorithm used, validity period, and common name. Malware repositories can be used to identify additional samples associated with the adversary and identify patterns in crafting self-signed code signing certificates.

---

### Windows File and Directory Permissions Modification
**Created:** 2020-02-04T19:17:41.767Z  
**Modified:** 2023-04-21T12:27:04.900Z  
**Description:**  
Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory ACLs are commonly managed by the file or directory owner or users with appropriate permissions. Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).

Adversaries can interact with DACLs using built-in Windows commands such as `icacls`, `cacls`, `takeown`, and `attrib`. PowerShell cmdlets can also be used to retrieve or modify file and directory DACLs. Specific modifications may be required for techniques like persistence, boot or logon initialization scripts, or hijacking binary/configuration files.

**External References:**
- [Microsoft DACL May 2018](https://docs.microsoft.com/windows/desktop/secauthz/dacls-and-aces)
- [Microsoft Access Control Lists May 2018](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-lists)

**Kill Chain Phases:**
- Defense Evasion

**Detection:**
Monitor and investigate attempts to modify DACLs and file/directory ownership. Compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.

---

### Add-ins
**Created:** 2019-11-07T19:52:52.801Z  
**Modified:** 2021-08-16T21:26:09.296Z  
**Description:**  
Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can add functionality to Office programs and can be set to execute code when an Office application starts.

**External References:**
- [Microsoft Office Add-ins](https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460)
- [MRWLabs Office Persistence Add-ins](https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/)

**Kill Chain Phases:**
- Persistence

**Detection:**
Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins. Collect process execution information and look for abnormal chains of activity resulting from Office processes.

---

### Transport Agent
**Created:** 2019-12-12T15:08:20.972Z  
**Modified:** 2021-10-18T17:05:44.321Z  
**Description:**  
Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam or adding corporate signatures to outgoing emails.

Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by specific email events. The transport agent can be configured to carry out specific tasks based on adversary-defined criteria.

**External References:**
- [Microsoft TransportAgent Jun 2016](https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help)
- [ESET LightNeuron May 2019](https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf)

**Kill Chain Phases:**
- Persistence

**Detection:**
Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Monitor file locations associated with the installation of new application software components.

---

### System Information Discovery
**Created:** 2017-05-31T21:31:04.307Z  
**Modified:** 2023-03-30T21:01:40.871Z  
**Description:**  
Adversaries may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Tools such as `systeminfo` can be used to gather detailed system information. Adversaries with user-level access can execute the `df -aH` command to obtain currently mounted disks and available space. Adversaries may also leverage a Network Device CLI to gather detailed system information.

**External References:**
- [Amazon Describe Instance](https://docs.aws.amazon.com/cli/latest/reference/ssm/describe-instance-information.html)
- [Google Instances Resource](https://cloud.google.com/compute/docs/reference/rest/v1/instances)

**Kill Chain Phases:**
- Discovery

**Detection:**
Monitor processes and command-line arguments for actions that could gather system and network information. Information may also be acquired through Windows system management tools like WMI and PowerShell. In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information.

---

### Application Layer Protocol
**Created:** 2017-05-31T21:30:56.776Z  
**Modified:** 2023-04-11T14:35:41.468Z  
**Description:**  
Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.

**External References:**
- [University of Birmingham C2](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

**Kill Chain Phases:**
- Command and Control

**Detection:**
Analyze network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow expected standards.

---

### Remote Data Staging
**Created:** 2020-03-13T21:14:58.206Z  
**Modified:** 2021-03-08T10:33:02.019Z  
**Description:**  
Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to exfiltration. Data may be kept in separate files or combined into one file through techniques such as archiving. Interactive command shells may be used, and common functionality within `cmd` and `bash` may be used to copy data into a staging location.

In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. By staging data on one system, adversaries can minimize the number of connections made to their C2 server and better evade detection.

**External References:**
- [Mandiant M-Trends 2020](https://content.fireeye.com/m-trends/rpt-m-trends-2020)

**Kill Chain Phases:**
- Collection

**Detection:**
Monitor for processes that appear to be reading files from disparate locations and writing them to the same directory or file. Monitor publicly writable directories, central locations, and commonly used staging directories to check for compressed or encrypted data. Monitor processes and command-line arguments for actions that could be taken to collect and combine files.

---

### Scheduled Task/Job
**Created:** 2017-05-31T21:30:46.977Z  
**Modified:** 2023-03-30T21:01:52.697Z  
**Description:**  
Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.

Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account with elevated permissions.

**External References:**
- [TechNet Task Scheduler Security](https://technet.microsoft.com/en-us/library/cc785125.aspx)
- [ProofPoint Serpent](https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain)

**Kill Chain Phases:**
- Execution
- Persistence
- Privilege Escalation

**Detection:**
Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.

---

### Msiexec
**Created:** 2020-01-24T14:38:49.266Z  
**Modified:** 2022-04-19T17:33:16.346Z  
**Description:**  
Adversaries may abuse `msiexec.exe` to proxy execution of malicious payloads. `msiexec.exe` is the command-line utility for the Windows Installer and is commonly associated with executing installation packages (.msi). `msiexec.exe` can also execute DLLs. Since it may be signed and native on Windows systems, `msiexec.exe` can be used to bypass application control solutions that do not account for its potential abuse.

**External References:**
- [LOLBAS Msiexec](https://lolbas-project.github.io/lolbas/Binaries/Msiexec/)
- [TrendMicro Msiexec Feb 2018](https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/)

**Kill Chain Phases:**
- Defense Evasion

**Detection:**
Use process monitoring to monitor the execution and arguments of `msiexec.exe`. Compare recent invocations of `msiexec.exe` with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity.

---

### Login Item
**Created:** 2017-12-14T16:46:06.044Z  
**Modified:** 2022-04-22T18:50:50.483Z  
**Description:**  
macOS provides the option to list specific applications to run when a user logs in. These applications run under the logged-in user's context and will start every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them. Users have direct control over login items installed using a shared file list, which are also visible in System Preferences. These login items are stored in the user's `~/Library/Preferences/` directory in a plist file called `com.apple.loginitems.plist`.

If an adversary can register their own login item or modify an existing one, they can use it to execute their code for a persistence mechanism each time the user logs in. The API method `SMLoginItemSetEnabled` can be used to set Login Items, but scripting languages like AppleScript can do this as well.

**External References:**
- [Apple Adding Login Items](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html)
- [Methods of Mac Malware Persistence](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)

**Kill Chain Phases:**
- Persistence

**Detection:**
All the login items created via shared file lists are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area (and the corresponding file locations) should be monitored and whitelisted for known good applications. Otherwise, Login Items are located in `Contents/Library/LoginItems` within an application bundle, so these paths should be monitored as well.

---

### Network Trust Dependencies
**Created:** 2020-10-02T15:47:59.457Z  
**Modified:** 2021-04-15T03:34:22.917Z  
**Description:**  
Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include second or third-party organizations/domains that have connected (and potentially elevated) network access.

Adversaries may gather this information in various ways, such as direct elicitation via phishing for information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets. Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and/or initial access.

**External References:**
- [Pentesting AD Forests](https://www.slideshare.net/rootedcon/carlos-garca-pentesting-active-directory-forests-rooted2019)

**Kill Chain Phases:**
- Reconnaissance

**Detection:**
Much of this activity may have a very high occurrence and associated false positive rate, making detection difficult. Detection efforts may focus on related stages of the adversary lifecycle, such as during initial access.

---

### Reflection Amplification
**Created:** 2020-03-02T20:08:03.691Z  
**Modified:** 2023-03-30T21:01:41.052Z  
**Description:**  
Adversaries may attempt to cause a denial of service (DoS) by reflecting a high volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector.

Reflection attacks often take advantage of protocols with larger responses than requests to amplify their traffic, commonly known as a Reflection Amplification attack. Prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP.

**External References:**
- [Cloudflare ReflectionDoS May 2017](https://blog.cloudflare.com/reflections-on-reflections/)
- [Cloudflare DNSamplficationDoS](https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/)

**Kill Chain Phases:**
- Impact

**Detection:**
Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization.

---

### Password Filter DLL
**Created:** 2020-02-11T19:05:45.829Z  
**Modified:** 2021-04-20T20:11:55.147Z  
**Description:**  
Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies.

Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the Local Security Authority (LSA). A malicious password filter would receive these plain-text credentials every time a password request is made.

**External References:**
- [Carnal Ownage Password Filters Sept 2013](http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html)
- [Clymb3r Function Hook Passwords Sept 2013](https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/)

**Kill Chain Phases:**
- Credential Access
- Defense Evasion
- Persistence

**Detection:**
Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters and correlate then investigate the DLL files these files reference.

---

### Terminal Services DLL
**Created:** 2022-03-28T15:34:44.590Z  
**Modified:** 2022-04-18T20:22:44.971Z  
**Description:**  
Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs, enable remote terminal connections to hosts. Terminal Services allow servers to transmit a full, interactive, graphical user interface to clients via RDP.

Windows Services that are run as a "generic" process (e.g., `svchost.exe`) load the service's DLL file, the location of which is stored in a Registry entry named `ServiceDll`. The `termsrv.dll` file, typically stored in `%SystemRoot%\System32\`, is the default `ServiceDll` value for Terminal Services.

Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts. Modifications to this DLL could be done to execute arbitrary payloads while preserving normal `termsrv.dll` functionality, as well as to enable abusable features of Terminal Services.

**External References:**
- [James TermServ DLL](https://twitter.com/james_inthe_box/status/1150495335812177920)
- [Microsoft System Services Fundamentals](https://social.technet.microsoft.com/wiki/contents/articles/12229.windows-system-services-fundamentals.aspx)

**Kill Chain Phases:**
- Persistence

**Detection:**
Monitor for changes to Registry keys associated with `ServiceDll` and other subkey values. Monitor unexpected changes and interactions with `termsrv.dll`. Monitor commands, processes, and arguments for potential adversary actions to modify Registry values or modify/replace the legitimate `termsrv.dll`.

---

### AppleScript
**Created:** 2020-03-09T14:07:54.329Z  
**Modified:** 2022-10-19T15:37:28.071Z  
**Description:**  
Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.

Scripts can be run from the command line via `osascript /path/to/script` or `osascript -e "script here"`. Scripts can also be executed in numerous ways, including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding `#!/usr/bin/osascript` to the start of the script file.

AppleScripts do not need to call `osascript` to execute. However, they may be executed from within Mach-O binaries by using the macOS Native APIs `NSAppleScript` or `OSAScript`, both of which execute code independent of the `/usr/bin/osascript` command line utility.

**External References:**
- [Apple AppleScript](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html)
- [SentinelOne macOS Red Team](https://www.sentinelone.com/blog/macos-red-team-calling-apple-apis-without-building-binaries/)

**Kill Chain Phases:**
- Execution

**Detection:**
Monitor for execution of AppleScript through `osascript` and usage of the `NSAppleScript` and `OSAScript` APIs. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.

---

### Browser Extensions
**Created:** 2018-01-16T16:13:52.465Z  
**Modified:** 2022-04-20T16:46:36.707Z  
**Description:**  
Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.

Malicious extensions can be installed into a browser through malicious app store downloads, social engineering, or by an adversary that has already compromised a system. Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.

**External References:**
- [Chrome Extensions Crypto Miner](https://www.ghacks.net/2017/09/19/first-chrome-extension-with-javascript-crypto-miner-detected/)
- [xorrior chrome extensions macOS](https://www.xorrior.com/No-Place-Like-Chrome/)

**Kill Chain Phases:**
- Persistence

**Detection:**
Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.

---

### Service Exhaustion Flood
**Created:** 2020-02-20T15:31:43.613Z  
**Modified:** 2023-03-30T21:01:43.164Z  
**Description:**  
Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, but others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.

One example is a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. Another variation is a SSL renegotiation attack, which takes advantage of a protocol feature in SSL/TLS. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.

**External References:**
- [Arbor SSLDoS April 2012](https://www.netscout.com/blog/asert/ddos-attacks-ssl-something-old-something-new)
- [Cloudflare HTTPflood](https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/)

**Kill Chain Phases:**
- Impact

**Detection:**
Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization. Externally monitor the availability of services that may be targeted by an Endpoint DoS.

---

### Compromise Hardware Supply Chain
**Created:** 2020-03-11T14:28:40.064Z  
**Modified:** 2022-04-28T16:05:10.755Z  
**Description:**  
Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.

**External References:**
- [Sensor Health: Host Status](https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf)

**Kill Chain Phases:**
- Initial Access

**Detection:**
Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.

---

### Native API
**Created:** 2017-05-31T21:31:17.472Z  
**Modified:** 2022-04-19T20:30:00.118Z  
**Description:**  
Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot and carrying out tasks and requests during routine operations.

Native API functions (such as `NtCreateProcess`) may be directly invoked via system calls/syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API `CreateProcess()` or GNU `fork()` will allow programs and scripts to start other processes. Higher-level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.

Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (e.g., unhooking monitored functions via Disable or Modify Tools).

**External References:**
- [MACOS Cocoa](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/CocoaApplicationLayer/CocoaApplicationLayer.html#//apple_ref/doc/uid/TP40001067-CH274-SW1)
- [Microsoft CreateProcess](http://msdn.microsoft.com/en-us/library/ms682425)

**Kill Chain Phases:**
- Execution

**Detection:**
Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Utilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions. Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API.

---

### Clear Network Connection History and Configurations
**Created:** 2022-06-15T18:00:04.219Z  
**Modified:** 2022-10-21T16:24:06.968Z  
**Description:**  
Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.

Network connection history may be stored in various locations on a system. For example, RDP connection history may be stored in Windows Registry values. Similarly, macOS and Linux hosts may store information highlighting connection history in system logs. Malicious network connections may also require changes to network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.

**External References:**
- [Microsoft RDP Removal](https://docs.microsoft.com/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer)
- [Moran RDPieces](https://www.osdfcon.org/presentations/2020/Brian-Moran_Putting-Together-the-RDPieces.pdf)

**Kill Chain Phases:**
- Defense Evasion

**Detection:**
Monitor for changes to network connection history and configurations. This includes monitoring for changes to Registry values, system logs, and network configuration settings. Correlate these changes with other suspicious activities to identify potential adversary behavior.

---

### AS-REP Roasting
**Created:** 2020-08-24T13:43:00.028Z  
**Modified:** 2021-06-07T19:23:33.039Z  
**Description:**  
Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by password cracking Kerberos messages. Preauthentication offers protection against offline password cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.

For each account found