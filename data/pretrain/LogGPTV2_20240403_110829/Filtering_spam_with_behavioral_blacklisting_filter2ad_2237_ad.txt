in the window [t + Δt, t + 2 Δt) to validate our classiﬁcation.
Section 5.1 summarizes the data sets used in our evaluation. Sec-
tion 5.2 describes the properties of the resulting clusters and the
validation results, and Section 5.3 describes our evaluation of Spam-
Tracker’s ability to improve upon existing blacklisting and blocking
techniques by classifying spammers ahead of blacklists.
5.1 Data
Table 2 summarizes the traces, their duration, and the data ﬁelds
each trace provides. Our primary data is a set of email logs from
Trace
Date Range
Organization Mar. 1 – 31, 2007
Blacklist
Apr. 1 – 30, 2007
Fields
Received time, remote IP,
targeted domain, whether
rejected
IP address (or range), time
of listing
Table 2: Data sets used in evaluation.
a provider (“Organization”) that hosts and manages mail servers
for over 115 domains. The trace also contains an indication of
whether it rejected the SMTP connection or not. We also use the full
database of Spamhaus [37] for one month, including all additions
that happened within the month (“Blacklist”), to help us evaluate
the performance of SpamTracker relative to existing blacklists. We
choose the Blacklist traces for the time period immediately after the
email traces end so that we can discover the ﬁrst time an IP address,
unlisted at the time email from it observed in the Organization trace,
was added to Blacklist trace.
5.2 Clustering and Classiﬁcation
To study the properties of the clusters that SpamTracker com-
putes, we build the SpamTracker classiﬁer using data for a window
Δt at time t, and use it to assign a spam score S(r) senders in the
window [t + Δt, t + 2 Δt). We set Δt to be 6 hours; clustering
using different time intervals (which we intend to explore in future
work) may also help SpamTracker perform better.
Figure 6(a) shows the distribution of these scores for all IP ad-
dresses in a 6-hour window, separated into two plots based on
whether the Organization decided to reject the mail early or accept
it for delivery. A high score implies that the sending pattern for the
classiﬁed IP is similar to a known spamming pattern. The low-score
region (where S(r)  5 (from Figure 6(a)), suggesting that SpamTracker could
complement existing ﬁltering mechanisms by capturing additional
spam that existing ﬁlters miss.
6. DISCUSSION
Although the general method of behavioral blacklisting shows
promise for fast classiﬁcation of spammers, there is much room
for improvement, particularly with respect to the classiﬁcation al-
gorithms (which could, for example, incorporate other features as
input). This section proposes speciﬁc areas where the classiﬁca-
tion algorithms could be improved, surveys how ﬁltering techniques
based on behavioral blacklisting could ultimately be deployed in an
operational network, and presents our ongoing efforts to do so. We
also discuss how behavioral blacklisting scores might be integrated
into existing spam ﬁltering systems and some of the issues that may
arise in implementation and deployment.
6.1 Improving Classiﬁcation
IP addresses that are most similar to a single spamming cluster
can be classiﬁed more accurately. In order to achieve this separation
for all new IPs, we propose two improvements to SpamTracker that
may result in better clusters.
Using more features for clustering. Although SpamTracker uses
target domains to construct the initial object-feature matrix (Sec-
tion 3.2), other behavioral features may be able to better classify
spammers. Temporal patterns such as the time interval between suc-
cessive emails received from an IP (or alternatively, the sending fre-
quency of the IP) is one such feature. Botmasters often manage all
their bots using uniﬁed interfaces that may also be used to dissemi-
nate spam templates and mailing lists to bots [26], so these bots may
exhibit similar temporal behavior (perhaps spamming frequencies)
in addition to their similarity in target domains.
Improved similarity computation. In Equation 1, all columns of
IP’s “ﬁngerprint” vector, r, are weighted equally. Some domains
may be better at distinguishing one cluster of spammers from an-
other. For example, spammers targeting victims in different coun-
tries may send email to country speciﬁc domains as well as to ubiq-
uitous domains (e.g., gmail.com). In this case, the country-speciﬁc
domains may be more helpful in distinguishing the two sets of
spammers. Our ongoing work includes experimenting with an al-
gorithm that weights each column (domain) differently.
6.2 Incorporating with Existing Systems
We discuss how SpamTracker can be incorporated to comple-
ment the existing deployments of mail servers and spam ﬁlters.
We describe two possibilities below: integration with existing ﬁlters
and on the wire deployment. In either case, the back-end of Spam-
Tracker can remain the same: it only needs to run a DNS server (or
another popular query interface such as XML-RPC) that accepts re-
quests for IP addresses, retrieves the classiﬁcation score S(r) from
the SpamTracker classiﬁcation engine, and returns the score to the
client. In this sense, SpamTracker is a stand-alone system that can
even be used internally within an organization.
Option 1: Integration with existing infrastructure. SpamTracker
could be incorporated into existing ﬁltering systems on mail servers
by providing an additional “conﬁdence score” for these ﬁlters that
help them determine whether a particular piece of email is spam in
terms of sender behavior. Because SpamTracker provides a simple
interface (i.e., it takes as input an IP address and returns a score),
it can be incorporated into any existing spam ﬁltering engine (e.g.,
SpamAssassin [35], MailAvenger [23]) in the same way that any
other blacklist information would be added as a ﬁltering criterion.
Using this system would be easy: the addition of one line to the
conﬁguration of most mail ﬁltering software should allow users to
beneﬁt from SpamTracker’s ﬁltering strategy.
The disadvantage, however, is that it does not stop email trafﬁc
close to the source: the mail server that receives the spam drops
the mail only after the trafﬁc has already traversed the network and
consumed resources on the receiving mail server.
Option 2: “On the wire” deployment. Unlike most existing spam
ﬁltering or classiﬁcation systems, SpamTracker has the unique ad-
vantage that it can classify email senders solely based on the source
IP address and destination domain of the mail being sent (i.e., it
does not require examining or analyzing an email’s contents). Thus,
another possibility for deploying SpamTracker involves deploying a
network element that can examine trafﬁc “on the wire” and identify
connections to mail servers from IP addresses that fall into clusters
with high spam scores. Such a system could be deployed anywhere
in the network, not just at the receiving mail server.
The disadvantage to this strategy is that deployment involves sev-
eral additional steps: in particular, such a ﬁltering element would
need a channel to receive up-to-date information about both the
email sending clusters (i.e., their average vectors, and their “spam-
miness”) and the vector for any particular sending IP address (i.e.,
to which domains it has sent). Maintaining up-to-date information
about clusters and sending IP addresses in such a distributed, dy-
namic setting may prove challenging in practice.
6.3 Deployment Challenges
A SpamTracker deployment must be scalable (i.e., it must be able
to handle a large volume of email and a large number of senders)
and robust (i.e., it must be resistant to attack and remain highly
available). To achieve these goals, we believe that SpamTracker
could ultimately be distributed: many servers (possibly the same
ones who manage mail for various domains) report sender behavior
to a centralized location that performs the clustering. SpamTracker
must aggregate data from many domains, compute the correspond-
ing clusters of email senders, and return scores from many sources;
in doing so, it faces scalability and reliability challenges that could
be addressed with the following enhancements.
Better scalability with data compression. SpamTracker’s cluster-
ing algorithm is centralized, which raises scalability concerns, both
for bandwidth (to exchange information between domains) and in
terms of processing power (clustering complexity increases with in-
put size). We are investigating ways to reduce load by distributing
the clustering process. For example, compressing cluster informa-
tion into average rows before sending this information to a cen-
tralized server may reduce bandwidth consumption: SpamTracker
requires the full IP × domain matrix from each source to perform
clustering, but requires only the average row vectors for each cluster
(i.e., the output of the algorithm) for classiﬁcation.
Better reliability with replication and anycast. To improve avail-
ability, SpamTracker servers could be replicated and placed in dif-