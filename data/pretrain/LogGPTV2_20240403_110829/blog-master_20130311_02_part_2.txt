digoal=> insert into test values (1);  
NOTICE:  STATEMENT, BEFORE, INSERT, tg0, cnt:0  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:0  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:0  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:0  
-- after for each row看到了已经插入的数据.  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:1  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:1  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:1  
NOTICE:  STATEMENT, AFTER, INSERT, tg1, cnt:1  
INSERT 0 1  
```  
-- 插入多行数据  
```  
digoal=> insert into test values (1),(1),(1);  
NOTICE:  STATEMENT, BEFORE, INSERT, tg0, cnt:1  
-- 第一行触发以下触发器.  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:1  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:1  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:1  
-- 第2行触发以下触发器.  
-- 能够看到前面1条变更.  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:2  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:2  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:2  
-- 第3行触发以下触发器.  
-- 能够看到前面2条变更.  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:3  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:3  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:3  
-- 以下分别为3行after for each row触发的触发器.  
-- after for each row触发器是在所有的before for each row都调用完后, 也就是SQL语句的所有的行操作完成后调用的, 每行调用1次.  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:4  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:4  
-- 最后为after for each statement触发器, 可以看到所有变更.  
NOTICE:  STATEMENT, AFTER, INSERT, tg1, cnt:4  
INSERT 0 3  
```  
UPDATE :   
```  
digoal=> create trigger tg8 before update on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg9 before update on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg10 after update on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> update test set id=2;  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:4  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:4  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:3  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:3  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:2  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:2  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:1  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:1  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:0  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:0  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:0  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:0  
UPDATE 4  
digoal=> update test set id=1;  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:0  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:0  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:1  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:1  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:2  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:2  
NOTICE:  ROW, BEFORE, UPDATE, tg8, cnt:3  
NOTICE:  ROW, BEFORE, UPDATE, tg9, cnt:3  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:4  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:4  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:4  
NOTICE:  ROW, AFTER, UPDATE, tg10, cnt:4  
UPDATE 4  
```  
DELETE :   
```  
digoal=> create trigger tg12 before delete on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg13 before delete on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg14 after delete on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create or replace function tg() returns trigger as $$                                
declare  
  cnt int8;  
begin  
  select count(*) into cnt from test where id=1;  
  raise notice '%, %, %, %, cnt:%', TG_LEVEL, TG_WHEN, TG_OP, TG_NAME, cnt;  
  return old;  
end;  
$$ language plpgsql volatile;  
digoal=> delete from test where id=1;  
NOTICE:  ROW, BEFORE, DELETE, tg12, cnt:3  
NOTICE:  ROW, BEFORE, DELETE, tg13, cnt:3  
NOTICE:  ROW, BEFORE, DELETE, tg12, cnt:2  
NOTICE:  ROW, BEFORE, DELETE, tg13, cnt:2  
NOTICE:  ROW, BEFORE, DELETE, tg12, cnt:1  
NOTICE:  ROW, BEFORE, DELETE, tg13, cnt:1  
NOTICE:  ROW, AFTER, DELETE, tg14, cnt:0  
NOTICE:  ROW, AFTER, DELETE, tg14, cnt:0  
NOTICE:  ROW, AFTER, DELETE, tg14, cnt:0  
DELETE 3  
```  
触发器函数改为stable :   
重新以上测试 :   
```  
digoal=> alter function tg() stable;  
ALTER FUNCTION  
digoal=> select * from test ;  
 id   
----  
  1  
  1  
  1  
  1  
  1  
(5 rows)  
digoal=> insert into test values (1),(1),(1),(1);  
NOTICE:  STATEMENT, BEFORE, INSERT, tg0, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg2, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg3, cnt:5  
NOTICE:  ROW, BEFORE, INSERT, tg4, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg5, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg6, cnt:5  
NOTICE:  ROW, AFTER, INSERT, tg7, cnt:5  
NOTICE:  STATEMENT, AFTER, INSERT, tg1, cnt:5  
INSERT 0 4  
```  
-- 触发器函数改为stable或immutable后, 看不到SQL语句中发生的变更.  
## 13. 触发器会无限递归吗? 如何避免?  
会, 例如 :   
```  
digoal=> create table rec (id int);  
CREATE TABLE  
digoal=> create or replace function tg() returns trigger as $$                                
declare  
begin        
  -- 这里将会造成无限递归.  
  insert into rec values(2);  
  raise notice '%, %, %, %, cnt:%', TG_LEVEL, TG_WHEN, TG_OP, TG_NAME, cnt;  
  return new;                                                                
end;           
$$ language plpgsql volatile;  
CREATE FUNCTION  
digoal=> create trigger tg0 before insert on rec for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> insert into rec values (1);  
ERROR:  54001: stack depth limit exceeded  
HINT:  Increase the configuration parameter "max_stack_depth" (currently 2048kB), after ensuring the platform's stack depth limit is adequate.  
CONTEXT:  SQL statement "insert into rec values(2)"  
PL/pgSQL function tg() line 4 at SQL statement  
SQL statement "insert into rec values(2)"  
LOCATION:  check_stack_depth, postgres.c:3076  
```  
-- 不要在触发器函数中执行会再次触发触发器的SQL, 防止无限递归.  
## 14. 触发条件与性能.  
这里指的是创建触发器时在WHEN中指定的触发条件. 在上一篇BLOG中已经提到了. 如下 :   
表触发器 :   
```  
(before | after) (INSERT | UPDATE | DELETE) (FOR EACH ROW) (WHEN NEW.? and,or OLD.? ... other boolean express ....)  
(before | after) (INSERT | UPDATE | DELETE | TRUNCATE) (FOR EACH STATEMENT) (WHEN BOOLEAN express except NEW or OLD or columns)  
```  
视图触发器 :   
```  
(INSTEAD OF) (INSERT | UPDATE | DELETE) (FOR EACH ROW) (WHEN NEW.? and,or OLD.? ... other boolean express ....)  
(before | after) (INSERT | UPDATE | DELETE) (FOR EACH STATEMENT) (WHEN BOOLEAN express except NEW or OLD or columns)  
```  
使用WHEN和在触发器中使用条件控制两者的性能有什么分别呢?  
```  
A trigger definition can also specify a Boolean WHEN condition, which will be tested to see whether the trigger should be fired.   
In row-level triggers the WHEN condition can examine the old and/or new values of columns of the row.   
(Statement-level triggers can also have WHEN conditions, although the feature is not so useful for them.)   
In a BEFORE trigger, the WHEN condition is evaluated just before the function is or would be executed,   
so using WHEN is not materially different from testing the same condition at the beginning of the trigger function.   
However, in an AFTER trigger, the WHEN condition is evaluated just after the row update occurs, and it determines whether an event is queued to fire the trigger at the end of statement.   
So when an AFTER trigger's WHEN condition does not return true, it is not necessary to queue an event nor to re-fetch the row at end of statement.   
This can result in significant speedups in statements that modify many rows, if the trigger only needs to be fired for a few of the rows.   
INSTEAD OF triggers do not support WHEN conditions.  
```  
能够带来性能提升的是当SQL语句带来多行的变更时, after for each row触发器中加判断条件或者使用WHEN这两种方法的性能存在极大差异.  
因为after for each row触发器创建时的WHEN条件是在该行操作发生后进行的, 如果不为TRUE则不会把这个事件放入QUEUE中供后面的after for each row触发器使用. 并且在after for each statement触发器前, 也不需要获取已变更的行数据.  
如果不放在WHEN中, 那么每一被变更的行都需要在after for each statement触发器前, 获取已变更的行数据, 供after for each row触发器函数使用.  
例如 :   
```  
digoal=> create table perf (id int);  
CREATE TABLE  
digoal=> insert into perf select generate_series(1,10000);  
INSERT 0 10000  
digoal=> create or replace function tg() returns trigger as $$  
declare  
begin  
  raise notice '%, %, %, %, old:%', TG_LEVEL, TG_WHEN, TG_OP, TG_NAME, OLD;  
  return old;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
digoal=> create trigger tg0 after delete on perf for each row when (old.id=10) execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg1 before delete on perf for each row when (old.id=10) execute procedure tg();  
CREATE TRIGGER  
```  
-- 测试  
```  
digoal=> delete from perf where id<15 returning *;  
NOTICE:  00000: ROW, BEFORE, DELETE, tg1, old:(10)  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: ROW, AFTER, DELETE, tg0, old:(10)  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
 id   
----  
  1  
  2  
  3  
  4  
  5  
  6  
  7  
  8  
  9  
 10  
 11  
 12  
 13  
 14  
(14 rows)  
DELETE 14  
```  
-- 从上面来看好像BEFORE和AFTER FOR EACH ROW使用WHEN时都有效率提高, 实际上after 的提高更明显.   
请看如下流程 :   