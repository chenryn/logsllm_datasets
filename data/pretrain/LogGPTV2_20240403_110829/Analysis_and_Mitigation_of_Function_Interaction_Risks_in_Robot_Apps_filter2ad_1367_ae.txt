signed to an fps_monitor node to generate the processing rate of the
image recognition process. So the number of required fps_monitor
nodes depends on the number of image-related nodes. For MSRs,
the number of MSRCNs is 1, as all event-related and action-related
nodes publish corresponding messages to the MSRCN, which then
sends the action message to all related actuator driver nodes.
Table 7 lists the numbers of three types of CNs in the four ro-
bot apps. GRCNs account for a large portion of the total added
nodes. Due to a large number of RSR image-related interactions,
the autorace app has more fps_monitor nodes than the home app.
10
GRSTGRMTRSRImageRSRMax_velMSREventMSRAction010203040201312155831413518541811314233AmountofRiskInteractionsHomeAutoRaceApolloAutowareRiskTypeAnalysis and Mitigation of Function Interaction Risks
in Robot Apps
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Table 6: Examples of high-risk nodes in the Home and AutoRace apps.
Scenario
Risk Type
High-Risk Nodes
Sub Topic Name
Home
AutoRace
GR-ST
GR-MT
RSR-Image
MSR-Event
MSR-Action
GR-ST
GR-MT
RSR-Image
RSR-Max_vel
MSR-Event
MSR-Action
/move_base
/teleop_twist_keyboard
/gazebo
/gazebo
/find object 3d
/move_base
/rosbot_tts
/detect_tunnel
/rviz
/detect/lane
/detect_traffic_light
/detect_sign
/detect_parking
/core_node_controller
/detect_tunnel
-
-
-
-
/camera/rgb/image raw
/odom
-
-
-
-
-
/camera/image_compensated
-
/detect/tunnel_stamped
-
Sub Topic Type
-
-
-
-
sensor_msgs/Image
nav_msgs/Odometry
-
-
-
-
-
sensor_msgs/Image
-
std_msgs/UInt8
-
Pub Topic Name
/cmd_vel
/cmd_vel
/camera/depth/image_raw
/camera/rgb/image_raw
/objects
-
audio_common_msgs/AudioData
/move_base_simple/goal
/move_base_simple/goal
/detect/lane
/control/max_vel
/detect/traffic_sign
/control/max_vel
-
/cmd_vel
Pub Topic Type
geometry_msgs/Twist
geometry_msgs/Twist
sensor_msgs/Image
sensor_msgs/Image
std msgs/Float32MultiArray
-
/rosbot_audio/audio
geometry_msgs/PoseStamped
geometry_msgs/PoseStamped
std_msgs/Float64
std_msgs/Float64
std_msgs/UInt8
std_msgs/Float64
-
geometry_msgs/Twist
Pub Node
/gazebo
/gazebo
/find_object_3d
/find_object_3d
/search manager
-
/rosbot_audio
/move_base_simple/goal
/move_base_simple/goal
/control/lane
/control/lane
/core_mode_decider
/control_lane
-
/gazebo
Table 7: Numbers of CNs in four complex robot apps.
Scenario
Home
AutoRace
Apollo
Autoware
GRCN
Perception Planning Control
8
16
4
11
3
2
1
3
1
4
1
2
RSR
FMN CN
1
1
1
1
2
5
3
1
MSR
CN
1
1
1
1
Table 8: High-risk interacted topics and features of three
GRCN types in the home app.
CN Type
Interacted Topics
Feature
‘/explore_server/status’, ‘/move_base/status’,
‘tf’, ‘tf_static’, ‘/camera/rgb/image_raw’,
‘/camera/depth/image_raw’,
‘/move_base/global_costmap/footprint’,
‘/move_base/local_costmap/footprint’
‘/move_base/goal’, ‘/move_base/cancel’,
‘/move_base_simple/goal’
‘/cmd_vel’
Perception
Planning
Control
State
Parallelization
Goal
Queuing
Action
Preemption
Application
Node
Number
Topic
Number
4
6
6
8
10
21
25
21
38
Teleoperation [26]
Voice Interaction [33]
Mapping [25]
Navigation [24]
Exploration [23]
Home
AutoRace [30]
Apollo [7]
Autoware [6]
Table 9: Processing time of potential risk discovery.
Processing Time (s)
RSR MSR
GR
0.114
0.113
0.057
0.011
0.035
0.035
0.152
0.299
0.308
0.498
0.727
0.764
0.753
1.086
1.12
3.121
3.199
1.927
2.105
4.049
4.075
0.306
0.606
0.631
2.945
2.931
1.747
17
7
25
63
84
125
112
39
218
6.3 Performance Overhead
Offline overhead. We evaluate the risk discovery stage of RTron
in terms of processing time for identifying high-risk nodes in a robot
app. Table 9 reports the performance results of 9 robot apps with
different numbers of topics and nodes. We repeat each experiment
for 20 times to calculate the average latency. We conclude that
the risk discovery has negligible overhead as an offline process.
The results also show that the processing time is affected by the
number of topics and nodes. This is because the risk identification
depends on the traversal of either nodes or topics (Algorithm 1).
Specifically, there are two iterations in the process of both GR and
RSR discovery and one iteration of topics in the process of MSR
Figure 11: Overhead of CNs in an end-to-end data flow.
discovery. Thus, discovering GR takes similar time as RSR, which is
longer than MSR. One exception is the autorace app, which has the
largest processing time, but fewer nodes and topics than the home
app. This is because there are more high-risk GR interactions in
the autorace app (Table 7), which add extra work (i.e. related topic
type and name match) in the node iteration process.
Runtime overhead. This includes the overhead from the coor-
dination nodes and security service. The security service is only
responsible for risk monitoring and policy configuration of each
coordination node, without any interference on the execution of the
robot app. Much like IoT policy enforcement systems [42, 53], we
ignore the overhead of this process since users manually configure
the policy for each CN only at the mission launch stage or scenario
change condition. The coordination nodes are distributed among
function nodes in the robot app, which can increase the end-to-end
latency from the perception to the control stages. Although there