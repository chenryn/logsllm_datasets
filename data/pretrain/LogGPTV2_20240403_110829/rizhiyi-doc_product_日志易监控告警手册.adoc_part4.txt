== 查看告警记录
在启用状态的监控，一旦触发，会将触发告警的即时状态单独记录为一次告警事件，供事后查询。在监控列表上点击运行趋势图或告警名称，即可进入该监控的告警事件历史记录页：
image::images/alert-history.png[]
事件数和字段统计类型在历史页展示趋势图。其他类型只展示历史列表。
每条历史记录，可以有查看详情和搜索操作。告警详情浮层展现这条记录在触发时刻的触发值。点击搜索按钮，则跳转到搜索页面，打开该告警关联的已存搜索语句，并自动调整过滤时段为告警触发的开始、结束时间，您可以直接查看异常时段的事件列表或统计。
=== 监控运行记录到单独索引monitor里
除了触发阈值的告警事件，日志易还会留存监控任务每次执行计划的结果，后期可以作为时序指标使用。运行记录到单独的monitor索引里。monitor索引数据分为两个appname，一个叫 `alert_record` ，主要记录监控项当时的配置和执行计划情况；另一个叫 `alert_detail` ，主要记录监控项当时接收到的 SPL 返回数据，数据存储时，加以 `result.` 前缀。比如，常用的 `... | bucket timestamp span=1h as ts | stats count() as cnt by ts` 语句，记录的结果数据字段则为： `result.ts` 和 `result.cnt` 。
对于多行结果，`alert_detail` 会自动存成多行数据方便二次查询统计，并以 `row_count` 字段来记录本行在当次执行结果中的行号。
用户可以通过日志易manager查看是否创建monitor索引。
image::images/alert-moitor-index.png[]
也可以通过在搜索页面输入 `index=monitor *` 查看事件列表，也可以通过spl语句 `index=monitor appname:"alert_detail" | table result.* ` 查看数据，并进一步分析监控结果。
image::images/alert-search-monitor.png[]
== 维护期[[maintenance-period]]
日志易系统支持设置【维护期】功能。当故障已经明确发生，或者即将开始计划内的调整动作时，系统内的各种告警已经没有必要执行，因为数据肯定是没用的。维护期让用户主动指明现在是维护期间，维护期间影响的若干监控项实际不触发告警。维护结束，涉及的监控恢复到之前的状态。
示例：
新建一个维护期，维护周期可以选择定时或单次，定时可以选择每天，每周和每月。影响范围点击选择具体监控项，可通过标签快速过滤。
image::images/alert-new-weihuqi.png[]
可以看到维护期间，监控列表影响的监控显示‘正在维护’
image::images/alert-weihuzhong.png[]
用户在维护期间不会接收到被触发的监控。
另，不管是开始还是结束，登记的时间和操作的时间，那个晚就是那个为准。具体示例如下：
1.	用户在16:00创建一次维护期，选择维护时间为16:10-17:10；那么系统自动在16:10停止，17:10启动。
2.	用户在16:10创建一次维护期，选择维护时间为16:00-17:10，那么系统自动在16:10停止，17:10启动。
3.	用户在16:10创建一次维护期，选择维护时间为16:00-?，那么系统自动在16:10停止；等到用户在17:10再次登录，修改维护为17:00，那么系统在17:10启动。
== 告警插件开发
=== 插件管理
在监控首页右上侧，点击告警插件打开告警插件的列表页。列表中展示当前用户可读的推送插件
image::images/alert-action-list.png[]
点击“上传”按钮，可从本地上传插件。选择好插件后可识别是否存在同名文件，点击“确定”即可开始上传。
image::images/alert-action-upload.png[]
通过“上传”对话框，点击“确定”后，若无重名文件则直接新建一个插件，若有重名文件，系统可取到插件的新旧版本号进行对比，并跳出提示框，指导用户更新同名的告警推送插件。如下图：
image::images/alert-action-upgrade.png[]
列表上，还可以点击下载插件源代码，供本地参考修改。
如果是简单的修改，也可以在列表上直接点击"编辑"，在编辑弹层中调整相关 python 语句：
image:images/alert-action-editor.png[]
=== 插件约定
插件是一个python3.8版本的脚本，其可import的库只有django-2.2.28和python标准库。日志易约定告警插件需要有一个字典变量和两个函数。
==== META变量
告警插件中需定义python字典变量META。是插件与Web界面配置的接口。用户在配置界面看到的配置项列表，输入的配置项内容的格式，还有最终保存在数据库中的配置项结果，都由此定义，结构为:
* name: 插件名。注意不可与其他插件有重复
* alias: 展示名，在Web界面上下拉菜单选择告警方式时显示的名字
* configs: 配置项列表。界面上的所有配置项都是由这个configs数组指定的，显示的顺序也是这个数组里的顺序。
** name: 配置项名字，不可重名
** alias: 展示名，在Web界面告警推送配置处显示的此配置项的名字
** place_holder: 配置项填写占位提示语，在Web界面告警推送配置处显示的此配置项的填写提示文案
** presence: Boolean型，是否必填。将用于Web前端操作保存告警推送配置时候的检查项。
** value_type: 此配置项值的类型，当前只支持String。
** value: 配置项的值。默认无需填写，在Web界面保存配置后，会自动填写此值。
** default_value: 默认值。默认值也会显示在界面上。
** input_type: 输入方式类型，用于指定前端在此配置项输入时候采用何种处理。可选值如下：
*** email: 含义是用户信息中的电子邮箱，其输入交互会带有下拉选项提示，提示内容分为用户分组和用户。
*** phone: 含义是用户信息中的电话号码，其输入交互会带有下拉选项提示，提示内容分为用户分组和用户。
** style: 配置Web界面上此配置项输入框的大小
*** cols: 几个字符的宽度
*** rows: 几个字符的高度
==== 约定函数
告警插件中可以定义三个约定函数，handle、content 和 execute_reply。
handle和content来指定当告警被触发了之后的两类操作。 execute_reply指定当插件在某次特定告警历史数据上运行的操作。它们的参数是一样的：
* meta: 第一个参数meta的含义是不同告警经过用户配置后的META信息，是一个python的字典，字典的结构与上述的插件要求的常量词典META一致。用户写插件时，使用此信息进行自己需要的处理。
* alert: 第二个参数alert的含义是告警信息本身，是一个python的字典。其结构见2.4.3节中的说明。用户使用他来获取当次告警所需的所有信息。
handle函数里实现此告警的执行操作，函数的返回值约定如下：
* 返回值：空，无返回值。可抛出异常，在外围调用处有处理会记录一条错误信息，但当异常发生时，并不会重试执行。有重试等其他可靠性需求，需在handle内自行处理。
content函数实现在告警预览和告警历史中，对应告警如何显示告警内容。函数可抛出异常，在外部调用处有处理会记录一条错误信息，当异常发生时，告警预览和历史内看到的告警内容就为一条错误信息。函数的返回值约定如下：
* 返回值：String类型
execute_reply函数返回内容会在操作运行的页面上展示，其返回值约定如下：
* 返回值：String类型
=== 插件开发样例
以http_forwarder插件为例。
http_forwarder插件是将告警信息再次POST到一个用户配置的地址，用户需启动自己的服务，随后可用完整的告警信息对告警进行再处理。
==== 日志记录
从实际需求考虑，三个约定函数的主处理流程大致是一致的，只是输入输出数据在变化。所以，为了方便插件代码的编写，日志易建议使用全局变量和独立方法来统一记录插件的运行日志。
[source,python]
---------------
# -*- coding: utf-8 -*-
# PI:EMAIL
# 2016-05-19
# Copyright 2016 Yottabyte
# filename: yottaweb/apps/alert/plugins/simple_email.py
# file description: 最简单的告警，所有客户都会带着
__author__ = 'wu.ranbo'
import logging
import requests
import json
import copy
req_logger = logging.getLogger("django.request")
global reply_content
reply_content = ""
log_content = {
    logging.FATAL: re_logger.fatal,
    logging.ERROR: re_logger.error,
    logging.WARNING: re_logger.warning,
    logging.INFO: re_logger.info,
    logging.DEBUG: re_logger.debug
}
def log_and_reply(log_level, comment):
    global reply_content
    log_content.get(log_level)(comment)
    reply_content = '%s%s%s' % (reply_content, "\n", comment)
---------------
==== META
META就是一个python的字典，并无特殊之处。只要按照上述的META格式要求写就可。
内容如下：
[source,python]
---------------
META = {
    "name": "http_forwarder",
    "version": 1,
    "alias": "告警转发",
    "configs": [
        {
            "name": "address",
            "alias": "转发url地址",
            "place_holder": "转发地址支持采用模板语言",
            "presence": True,
            "value_type": "string",
            "default_value": "",
            "style": {
                "rows": 1,
                "cols": 30
            }
        }
        ]
    }
---------------
==== content
content方法就是普通的python方法。插件接口只要求此方法的入参形式和返回值为String。此插件的content是将初始的告警信息用json格式显示出来。
[source,python]
def content(params, alert):
    return json.dumps(alert, ensure_ascii=False, indent=4).encode("utf-8", "ignore")
==== handle
内容为按照用户配置的http地址，将告警信息原文发送出去。
[source,python]
def handle(params, alert):
    try:
        address = params['configs'][0]['value']
        requests.post(address, data=json.dumps(alert))
        log_and_reply(logging.DEBUG, ("alert.plugs.http_forwarder send to %s, data:%s.", address, origin_alert))
    except Exception, e:
        log_and_reply(logging.ERROR, ("alert.plugins.http_forwarder got exception %s", e))
        raise e
可以看到，在handle方法中，我们就使用了之前定义的 `log_and_reply` 方法，来记录不同情况的日志输出，包括错误输出亦可。
==== execute_reply
内容为将运行过程中的输出，返回给前端展示。
[source,python]
def execute_reply(params, alert):
    re_logger.info("reply_content start")
    handle(params, alert)
    re_logger.info("reply_content: %s" % (reply_content))
    return reply_content
这里的 `reply_content` 显然就是在调用 `handle` 方法过程中被填充好了数据。
此外，`log_and_reply` 和 `re_logger.XXX` 的区别，在于 re_logger 只记录到服务器日志中，并不返回给前端展现。您可以按需选择。