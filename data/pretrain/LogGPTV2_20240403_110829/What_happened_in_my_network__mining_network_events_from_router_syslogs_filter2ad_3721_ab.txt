syntax/semantics systems, we develop an effective signature
identiﬁcation technique in which messages are decomposed into
whitespace-separated words and a frequent word (excluding those
words denoting speciﬁc locations) sequence is considered as a
template. For example, without going into the details of the
signature identiﬁcation technique, it is intuitive to see the fol-
lowing template can be extracted: t1:
LINK-3-UPDOWN
Interface ..., changed state to down,
t2:
Interface ..., changed state to down,
LINK-3-UPDOWN Interface ..., changed state
to up,
protocol on Interface ..., changed state
to up.
LINEPROTO-5-UPDOWN Line protocol on
and
t4:
LINEPROTO-5-UPDOWN Line
t3:
474Table 2: Toy Example. Router r1’s interface Serial1/0.10/10:0 is connected to r2’s inteface Serial1/0.20/20:0.
index
m1
m2
m3
m4
m5
m6
m7
m8
m9
m10
m11
m12
m13
m14
m15
m16
timestamp
2010-01-10 00:00:00
2010-01-10 00:00:00
2010-01-10 00:00:01
2010-01-10 00:00:01
2010-01-10 00:00:10
2010-01-10 00:00:10
2010-01-10 00:00:11
2010-01-10 00:00:11
2010-01-10 00:00:20
2010-01-10 00:00:20
2010-01-10 00:00:21
2010-01-10 00:00:21
2010-01-10 00:00:30
2010-01-10 00:00:30
2010-01-10 00:00:31
2010-01-10 00:00:31
router message-type/error-code
r1
r2
r1
r2
r1
r2
r1
r2
r1
r2
r1
r2
r1
r2
r1
r2
LINK-3-UPDOWN
LINK-3-UPDOWN
LINEPROTO-5-UPDOWN
LINEPROTO-5-UPDOWN
LINK-3-UPDOWN
LINK-3-UPDOWN
LINEPROTO-5-UPDOWN
LINEPROTO-5-UPDOWN
LINK-3-UPDOWN
LINK-3-UPDOWN
LINEPROTO-5-UPDOWN
LINEPROTO-5-UPDOWN
LINK-3-UPDOWN
LINK-3-UPDOWN
LINEPROTO-5-UPDOWN
LINEPROTO-5-UPDOWN
detailed message
Interface Serial1/0.10/10:0, changed state to down
Interface Serial1/0.20/20:0, changed state to down
Line protocol on Interface Serial1/0.10/10:0, changed state to down
Line protocol on Interface Serial2/0.20/20:0, changed state to down
Interface Serial1/0.10/10:0, changed state to up
Interface Serial1/0.20/20:0, changed state to up
Line protocol on Interface Serial1/0.10/10:0, changed state to up
Line protocol on Interface Serial2/0.20/20:0, changed state to up
Interface Serial1/0.10/10:0, changed state to down
Interface Serial1/0.20/20:0, changed state to down
Line protocol on Interface Serial1/0.10/10:0, changed state to down
Line protocol on Interface Serial2/0.20/20:0, changed state to down
Interface Serial1/0.10/10:0, changed state to up
Interface Serial1/0.20/20:0, changed state to up
Line protocol on Interface Serial1/0.10/10:0, changed state to up
Line protocol on Interface Serial2/0.20/20:0, changed state to up
Historical Syslog data
router config 
Historical Syslog data
Signature
Identification
Domain Expert
Location Extraction
Signature
Matching
Location
Parsing
Historical Syslog+ data
Rule Adjustment
Rule Mining
Domain Expert
Temporal Mining
Offline Domain Knowledge Learning
Domain Knowledge Base
Message Template
Location dictionary 
Temporal Patterns
Rule set
Real-time Syslog data
Signature
Matching
Location
Parsing
Realtime Syslog+ data
Temporal
Grouping
Rule based
Grouping
Cross Router
Grouping
Prioritization
Presentation
Syslog Digest
Message grouping
Online Processing
Figure 1: SyslogDigest Architecture. Bold arrows denotes the data ﬂow. Dotted components run ofﬂine.
Second, to be able to parse the location information embedded
and hidden in syslog messages, SyslogDigest learns and builds
a “dictionary" for the locations in each router’s syslog messages
based on its conﬁguration ﬁles (i.e., router conﬁgs). One might
be tempted to parse the location information purely based on the
vendor manual description for each message. This can however
be overly expensive due to the high diversity of message formats
and large number of messages. Our solution is based on one
key observation: a router almost always writes to syslog mes-
sages only the location information it knows, i.e, those conﬁg-
ured in the router. Our solution is therefore to parse router con-
ﬁgs (much better formatted and documented than syslog messages)
to build a dictionary of its locations ofﬂine. With router con-
ﬁgs, we also build the mapping between different locations, e.g.,
from an interface name to its IP address, and the hierarchical lo-
cation relationship between interfaces, ports and linecards, and
network topology such as the interfaces connecting two routers.
These mappings enable us to group syslog messages with related
locations.
In the example shown in Table 2, the location dic-
tionary will contain interfaces r1,Serial1/0.10/10:0 and
r2,Serial1/0.20/20:0 and also the information that these
two interfaces are connected to each other.
Third,
information,
to learn the relationship among different
templates,
we ﬁrst augment each historical syslog message with addi-
tional
including message template and its loca-
tion information, by matching it with the templates and loca-
In our example, m1 is augmented as
tions previously learned.
m1|t1|r1,Serial1/0.10/10:0 (with template t1 and lo-
cation r1,Serial1/0.10/10:0 appended), and m4 is aug-
mented as m4|t2|r2,Serial1/0.20/20:0, and so on. The
resulting messages are called Syslog+ messages in our system. We
then apply association rule mining techniques to Syslog+ messages
to learn the relationships (i.e., associations) among different mes-
sages with different templates. A rule of thumb is that if two mes-
sages frequently occur close enough in time and at related locations
(postpone the details to Section 4), they are considered associated
and should be grouped together. For example, if syslog messages
in templates t1 and t2 often happen close together, the association
t1, t2 will be declared. Domain experts can be asked to comment
on and/or adjust such associations (some of which can be “puz-
zling" or even “bizarre") but this is entirely optional.
Finally, SyslogDigest learns the temporal patterns of each tem-
plate from Syslog+ message. The intuition is that messages with
same template can appear periodically (e.g., due to various network
timers), and if so, these events can be grouped together. Such kind
of periodicity can be learned ofﬂine through measurements of cor-
responding interarrival times and predictions based on their linear
regression.
The above domain knowledge learning process will be periodi-
cally run (ofﬂine) to incorporate the latest changes to router hard-
ware and software conﬁgurations, and the acquired domain knowl-
edge will be used as input to the online SyslogDigest System.
4753.2 Online SyslogDigest System
The online system takes the real-time syslog message stream as
well as the previously learned domain knowledge as input, and out-
put meaningful prioritized network events, in a two-step process.
The ﬁrst step is to augment the real-time syslog messages with
template and location information just like in the aforementioned
ofﬂine process, and output the (augmented) Syslog+ messages in
an online fashion.
The second step is to group related Syslog+ messages together to
construct meaningful network events. We propose three grouping
methods: temporal grouping, rule-based grouping and cross-
router grouping. Temporal grouping targets at messages with
the same template on the same router. It groups together messages
that have the same template and happen periodically, where such
periodicity (temporal patterns) is already detected during the ofﬂine
temporal mining. In our example, it is intuitive to see that after the
temporal grouping, m1, m5, m9, m13 (with common template t1
and common location r1,Serial1/0.10/10:0) are grouped
together. So are (m2, m6, m10, m14), (m3, m7, m11, m15),
and (m4, m8, m12, m16).
Rule-based grouping targets
the messages with different
templates on the same router.
Based on the association rules learned by the ofﬂine learn-
ing component and saved in a domain knowledge base,
this
method groups messages that have different
templates, but
happen close together in time.
In our example, after the rule-
based grouping, messages m1, m3, m5, m9, m11, m13, m15
are grouped together due to association rule {t1, t2} with
Messages
common location r1,Serial1/0.10/10:0.
m2, m4, m6, m8, m10, m12, m14, m16
to-
gether due to association rule {t3, t4} and common location
r2,Serial1/0.20/20:0. Finally, the cross-router grouping
method will group together messages with locations that are on
different routers yet closely connected (e.g.
two ends of one
link, two ends of one BGP session), determined by the location
dictionary in the domain knowledge base. They will be applied to
the Syslog+ messages in this order (justiﬁcations explained later).
After these three grouping methods are applied in the order that
they are described above to the online syslog message stream, we
obtain groups of messages, each of which is considered a single
network event, which are much smaller in number compared to the
raw syslog messages. In our example, m1 to m16 are eventually
grouped together into a single network event.
grouped
are
The ﬁnal step is to prioritize and present the network events
based on their perceived importance to network operators. Vari-
ous factors are considered together to determine the (relative) im-
portance of an event, including the number of messages the event
(group) contains, the frequency of this event type in the history and
the perceived impact of this event on network health. Each event
is presented as a well-formatted text line, with multiple ﬁelds sum-
marizing the information contained in the raw syslog messages that
are grouped into this event, including the start/end timestamps of
this event, an location ﬁeld that records where the event happens,
an event type ﬁeld that is more informative than its counterpart in
individual raw syslog messages, and an index ﬁeld that allows us to
retrieve these raw syslog messages if necessary.
The presentation of Table 2 could be 2010-01-10
00:00:00|2010-01-10 00:00:31|r1
Interface Serial1/0.10/10:0 r2 Interface
Serial1/0.20/20:0|link flap, line protocol
flap.
Table 3: The messages belong to the same message type (BGP-
5-ADJCHANGE)
m1
m2
m3
m4
m5
m6
m7
m8
m9
m10
m11
m12
m13
m14
m15
m16
m17
m19
m19
m20
neighbor 192.168.32.42 vpn vrf 1000:1001 Up
neighbor 192.168.100.194 vpn vrf 1000:1002 Up
neighbor 192.168.15.78 vpn vrf 1000:1003 Up
neighbor 192.168.108.38 vpn vrf 1000:1004 Up
neighbor 192.168.0.26 vpn vrf 1000:1004 Down Interface ﬂap
neighbor 192.168.7.6 vpn vrf 1000:1001 Down Interface ﬂap
neighbor 192.168.0.238 vpn vrf 1000:1003 Down Interface ﬂap
neighbor 192.168.2.114 vpn vrf 1000:1002 Down Interface ﬂap
neighbor 192.168.183.250 vpn vrf 1000:1002 Down BGP Notiﬁcation sent
neighbor 192.168.114.178 vpn vrf 1000:1003 Down BGP Notiﬁcation sent
neighbor 192.168.131.218 vpn vrf 1000:1001 Down BGP Notiﬁcation sent
neighbor 192.168.55.138 vpn vrf 1000:1000 Down BGP Notiﬁcation sent
neighbor 192.168.1.13 vpn vrf 1000:1000 Down BGP Notiﬁcation received
neighbor 192.168.12.241 vpn vrf 1000:1002 Down BGP Notiﬁcation received
neighbor 192.168.155.66 vpn vrf 1000:1003 Down BGP Notiﬁcation received
neighbor 192.168.254.29 vpn vrf 1000:1004 Down BGP Notiﬁcation received
neighbor 192.168.35.230 vpn vrf 1000:1004 Down Peer closed the session
neighbor 192.168.171.166 vpn vrf 1000:1001 Down Peer closed the session
neighbor 192.168.2.237 vpn vrf 1000:1002 Down Peer closed the session
neighbor 192.168.0.154 vpn vrf 1000:1003 Down Peer closed the session
Table 4: Sub message types of BGP-5-ADJCHANGE
M1
M2
M3
M4
M5
neighbor * vpn vrf * Up
neighbor * vpn vrf * Down Interface ﬂap
neighbor * vpn vrf * Down BGP Notiﬁcation sent
neighbor * vpn vrf * Down BGP Notiﬁcation received
neighbor * vpn vrf * Down Peer closed the session
4. SYSLOG-MINING METHODOLOGIES
In this section, we present the detailed methodologies used in
both the ofﬂine learning and the online digesting systems.
4.1 Ofﬂine Learning Methodologies
There are several basic aspects that we need to learn from sys-
log messages: message templates, location information, temporal
patterns of message templates and template relationship.
4.1.1 Message Template Learning
As mentioned earlier, raw syslog messages have little structure.
Although there is a message type ﬁeld to describe the characteris-
tics of messages, for each message type there can be multiple sub
types. For example in Table 3, while all messages belong to the
same type "BGP-5-ADJCHANGE" and correspond to BGP adja-
cency change in MPLS VPN, the details of these messages (and
hence their sub types) can be different. At issue is how to au-
tomatically construct such sub types and combine them with the
message type to form the template without intervention from do-
main experts. In our example, the neighboring IP addresses and the
VRF1 IDs (e.g. VRF 1000:1001 in m1) differ from one message to
another, but when these two ﬁelds are masked (i.e., replaced by the
same symbol, say asterisk, as shown in Table 4), there are only ﬁve
distinct “structure" types, or sub types as we call them. In practice,
however, it is not easy to manually ﬁnd all masked parts without
domain knowledge, because all needed-masked parts do not have
obvious pattern like IP address or VRF ID.
Our template learning approach is inspired by the signature
abstraction used in spam detection [18]. The high level idea
1VRF stands for Virtual Routing and Forwarding. It is a technology
that allows multiple instances of a routing table to co-exist within
the same router at the same time. VRF is a common technique
used in VPN environment. The VRF ID XXX:XXXX is a simple
conceptional name.
476Physical hierarchy
Logical configuration
Path
Router
Slot/Line card
Port
Multilink/Bundlelink
Logical L3 Interface
Physical L3 Interface
Figure 2: Sub type tree construction example.