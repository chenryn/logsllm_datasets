### 二叉空间分割（BSP）及其在《毁灭战士》中的应用

本文将不仅讲述约翰·卡马克和《毁灭战士》的故事，还会探讨二叉空间分割树（BSP 树）数据结构的发展历史。有趣的是，BSP 树与许多其他计算机科学领域的技术一样，最初源自军事研究领域。例如，《毁灭战士》的第一关卡 E1M1 就受到了美国空军的启发。

#### VSD 难题

BSP 树是解决计算机图形学中最具挑战性问题之一——可见面检测（VSD）的有效方法。为了渲染三维场景，渲染器必须能够区分在一个特定角度下的可见物体和不可见物体。理想情况下，实时游戏引擎每秒至少需要完成30次这样的区分任务。

迈克尔·亚伯拉什在他的著作《图形程序开发人员指南》中提到：

> 可见面检测（VSD）问题是3D图形中最棘手的问题之一。尽管纹理映射等光栅化问题相对有限且随着3D加速器的出现逐渐转移到硬件中，但VSD问题却像一个无底洞。简单的VSD方法性能会直接受到场景复杂度的影响，而场景复杂度通常以平方级或立方级增长。因此，在渲染过程中，VSD很快就会成为瓶颈。

亚伯拉什在上世纪九十年代末讨论了这些困难，这是在《毁灭战士》发行之后数年。这款游戏证明了普通用户希望在自家电脑上玩高图形要求的游戏。九十年代初，id Software 发行了一些游戏，尽管当时的计算机主要用于处理文字和表格，但id Software 必须对游戏进行编程，使其能在计算机上流畅运行。为了实现这一目标，特别是为了让《毁灭战士》之前的少数3D游戏在电脑上运行，id Software 必须做出创新。

例如，在《毁灭战士》之前，id Software 发行了《德军总部 3D 版》，该游戏的所有关卡都由与坐标轴平齐的墙壁组成。这种设计简化了卡马克为《德军总部 3D 版》编写的渲染器的工作。通过将屏幕上的光线“齐射”入虚拟游戏世界，该渲染器解决了VSD问题。由于所有的墙壁都与网格平齐，光线与墙壁相交的位置只能在网格线上，从而大大减少了计算量。

尽管当时还没有专业的图形显卡，《德军总部 3D 版》凭借这种方法得以在配置较低的个人电脑上正常运行。然而，这种方法并不适用于《毁灭战士》，因为新游戏中增加了倾斜的墙面、楼梯以及高低不一的天花板。于是，卡马克编写了一个新的渲染器。《毁灭战士》的渲染器关注的是物体，记录游戏场景中的所有物体并将其投射到屏幕上，而不是记录屏幕上的像素点。

对于强调物体的渲染器，可以使用Z缓冲区来解决VSD问题。每次将物体投射到屏幕上时，需要检查每个用于绘制的像素点。如果要绘制的物体部分比已经绘制在目标像素点上的物体更靠近玩家，则覆盖它；否则，保持像素不变。尽管方法简单，但Z缓冲区对内存的要求较高，并且渲染器可能仍需花费大量CPU资源来投射玩家永远不会看到的水平几何体。

在20世纪90年代，使用Z缓冲区的方法还存在其他缺陷。IBM兼容机搭载的是VGA显示适配器系统，在这类电脑上，将图像写入帧缓冲区的成本非常高。因此，在只会被覆盖的像素上绘制会拖慢渲染器的性能。

理想的渲染器需要首先绘制离玩家最近的物体，然后是较远的物体，直到每个像素点都写入信息。这样可以大幅缩短远处不可见物体的渲染时间。然而，这又引出了一个问题：如何确定玩家可以看到哪些物体？

最初，卡马克打算依靠《毁灭战士》的关卡布局来解决VSD问题。通过按房间顺序绘制墙壁，可以避免互相遮挡的问题。然而，这种方法在复杂的层级结构上表现不佳，尤其是在房间嵌套的情况下。这种情况在构造环形楼梯等物体时尤为常见。

当id Software团队意识到《毁灭战士》游戏引擎的速度可能过慢时，他们还面临着将《德军总部 3D 版》移植到超级任天堂游戏机的任务。超任的性能比IBM兼容机差，光线投射渲染器无法在超任上快速运行。于是，卡马克开始研究更为高效的算法，并首次研究了二叉空间分割技术。

### 二叉空间分割

二叉空间分割（BSP）会提前将3D场景分割为若干部分，使VSD问题易于解决。通过在场景上画一条线（对应三维空间中的一个平面），可以指出玩家或摄像机视角在这条线的哪一侧，在这条线另一侧的物体无法遮挡玩家所在一侧的物体。多次重复这一操作后，三维场景最终会被分割为多个区域，从而更容易确定哪些物体是可见的。

通过这种方式，BSP树不仅提高了渲染效率，还简化了VSD问题的解决方案。卡马克发现，BSP树同样可以用来解决《毁灭战士》速度过慢的问题。