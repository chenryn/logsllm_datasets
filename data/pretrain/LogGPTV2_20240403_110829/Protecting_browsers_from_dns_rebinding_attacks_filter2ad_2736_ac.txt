86.9%
24.4%
2.2%
90.6%
Table 2: Percentage of Impressions by Vulnerability
Figure 2: Duration of Successful Attacks
The experiment lasted until the user navigated away from
the advertisement, at which time we lost the ability to use
the viewer’s network connection. For privacy, we collected
only properties typically disclosed by browsers when viewing
web pages (e.g., plug-in support, user agent, and external IP
address). The experiment conformed to the terms of service
of the advertising network and to the guidelines of the in-
dependent review board at our institution. Every network
operation produced by the advertisement could have been
produced by a legitimate Flash advertisement, but we pro-
duced the operations through the Socket interface, demon-
strating the ability to make arbitrary TCP connections.
Results. We ran the ad beginning at midnight EDT on
three successive nights in late April 2007. We bid $0.50
per 1000 impressions for a variety of keywords. We spent
$10 per day, garnering approximately 20,000 impressions per
day. Due to a server misconﬁguration, we disregarded ap-
proximately 10,000 impressions. We also disregarded 19 im-
pressions from our university. We received 50,951 impres-
sions from 44,924 unique IP addresses (40.2% IE7, 32.3%
IE6, 23.5% Firefox, 4% Other).
Cumulative Duration of Successful Attacksfor 75% Shortest Duration Attacks0102030405060708090100064128192256Duration of Attack Success (secs)Successful Attacks (percent)Cumulative Duration of Successful Attacks1101001,00010,000100,0001101001000100001000001000000Duration of Attack Success (secs, logscale)Successful Attacks (logscale)We ran the rebinding experiment on the 44,301 (86.9%)
impressions that reported the Flash 9 plug-in. We did not
attempt to exploit other rebinding vulnerabilities (see Ta-
ble 2). The experiment was successful on 30,636 (60.1%)
impressions and 27,480 unique IP addresses. The attack
was less successful on the 1,672 impressions served to Mac
OS, succeeding 36.4% of the time, compared to a success
rate of 70.0% on the 49,535 (97.2%) Windows impressions.4
Mac OS is more resistant to this rebinding attack due to
some caching of DNS entries despite their zero TTL.
For each successful experiment, we measured how long an
attacker could have used the client’s network access by load-
ing the target document at exponentially longer intervals, as
shown in Figure 2. The median impression duration was 32
seconds, with 25% of the impressions lasting longer than 256
seconds. We observed 9 impressions with a duration of at
least 36.4 hours, 25 at least 18.2 hours, and 81 at least 9.1
hours. In aggregate, we obtained 100.3 machine-days of net-
work access. These observations are consistent with those
of [24]. The large number of attacks ending between 4.2 and
8.5 minutes suggests that this is a common duration of time
for users to spend on a web page.
Discussion. Our experimental results show that DNS re-
binding vulnerabilities are widespread and cost-eﬀective to
exploit on a large scale. Each impression costs $0.0005 and
54% of the impressions convert to successful attacks from
unique IP addresses. To hijack 100,000 IP addresses for a
temporary bot network, and attacker would need to spend
less than $100. This technique compares favorably to rent-
ing a traditional bot network for sending spam e-mail and
committing click fraud for two reasons. First, these applica-
tions require large numbers of “fresh” IP address for short
durations as compromised machines are quickly blacklisted.
Second, while estimates of the rental cost of bot networks
vary [44, 14, 7], this technique appears to be at least one or
two orders of magnitude less expensive.
5. DEFENSES AGAINST REBINDING
Defenses for DNS rebinding attacks can be implemented
in browsers, plug-ins, DNS resolvers, ﬁrewalls, and servers.
These defenses range in complexity of development, diﬃ-
culty of deployment, and eﬀectiveness against ﬁrewall cir-
cumvention and IP hijacking. In addition to necessary mit-
igations for Flash, Java LiveConnect, and browsers, we pro-
pose three long-term defenses. To protect against ﬁrewall
circumvention, we propose a solution that can be deployed
unilaterally by organizations at their network boundary. To
fully defend against rebinding attacks, we propose two de-
fenses: one that requires socket-level network access be au-
thorized explicitly by the destination server and another
works even if sockets are allowed by default.
5.1 Fixing Firewall Circumvention
Networks can be protected against ﬁrewall circumvention
by forbidding external host names from resolving to internal
IP addresses, eﬀectively preventing the attacker from nam-
ing the target server. Without the ability to name the tar-
get, the attacker is unable to aggregate the target server into
an origin under his or her control. These malicious bindings
4We succeeded in opening a socket with 2 of 11 PlaySta-
tion 3 impressions (those with Flash 9), but none of the 12
Nintendo Wii impressions were vulnerable.
can be blocked either by ﬁltering packets at the ﬁrewall [5]
or by modifying the DNS resolvers used by clients on the
network.
• Enterprise. By blocking outbound traﬃc on port 53, a
ﬁrewall administrator for an organization can force all
internal machines, including HTTP proxies and VPN
clients, to use a DNS server that is conﬁgured not to
resolve external names to internal IP addresses. To
implement this approach, we developed a 300 line C
program, dnswall [15], that runs alongside BIND and
enforces this policy.
• Consumer. Many consumer ﬁrewalls, such as those
produced by Linksys, already expose a caching DNS
resolver and can be augmented with dnswall to block
DNS responses that contain private IP addresses. The
vendors of these devices have an incentive to patch
their ﬁrewalls because these rebinding attacks can be
used to reconﬁgure these routers to mount further at-
tacks on their owners.
• Software. Software ﬁrewalls, such as the Windows
Firewall, can also prevent their own circumvention by
blocking DNS resolutions to 127.*.*.*. This tech-
nique does not defend services bound to the external
network interface but does protects a large number of
services that bind only to the loopback interface.
Blocking external names from resolving to internal addresses
prevents ﬁrewall circumvention but does not defend against
IP hijacking. An attacker can still use internal machines to
attack services running on the public Internet.
5.2 Fixing Plug-ins
Plug-ins are a particular source of complexity in defend-
ing against DNS rebinding attacks because they enable sub-
second attacks, provide socket-level network access, and op-
erate independently from browsers. In order to prevent re-
binding attacks, these plug-ins must be patched.
Flash. When a Flash movie opens a socket to a new host
name,
it requests a policy over the socket to determine
whether the host accepts socket connections from the origin
of the movie. Flash could ﬁx most of its rebinding vulner-
abilities by considering a policy valid for a socket connec-
tion only if it obtained the policy from the same IP address
in addition to its current requirement that it obtained the
policy from the same host name. Using this design, when
attacker.com is rebound to the target IP address, Flash
will refuse to open a socket to that address unless the tar-
get provides a policy authorizing attacker.com. This sim-
ple reﬁnement uses existing Flash policy deployments and is
backwards compatible, as host names expecting Flash con-
nections already serve policy documents from all of their IP
addresses.
Flash movies can also access ports numbers ≥ 1024 on
their origin host name without requesting a policy. Al-
though the majority of services an attacker can proﬁtably
target (e.g., SMTP, HTTP, HTTPS, SSH, FTP, NNTP)
are hosted on low-numbered ports, other services such as
MySQL, BitTorrent, IRC, and HTTP proxies are vulnera-
ble. To fully protect against rebinding attacks, Flash could
request a policy before opening sockets to any port, even
back to its origin. However, this modiﬁcation breaks back-
wards compatibility because those servers might not be al-
ready serving policy ﬁles.
Java. Many deployed Java applets expect sockets to be
allowed by default. If clients are permitted to use these ap-
plets from behind HTTP proxies, they will remain vulner-
able to multi-pin attacks because proxy requests are made
by host name instead of by IP address. A safer approach is
to use the CONNECT method, which provides a proxied socket
connection to an external machine. Typically proxies only
allow CONNECT on port 443 (HTTPS), making this the only
port available for these applets. Alternatively, proxies can
use HTTP headers to communicate IP addresses of hosts
between the client and the proxy [28, 29], but this approach
requires both the client and the proxy to implement the
protocol.
Java LiveConnect. LiveConnect introduces additional
vulnerabilities, but browsers can ﬁx the LiveConnect multi-
pin vulnerability without altering the JVM by installing
their own DNS resolver into the JVM using a standard
interface. Firefox, in particular, implements LiveConnect
through the Java Native Interface (JNI). When Firefox ini-
tializes the JVM, it can install a custom InetAddress class
that will handle DNS resolution for the JVM. This custom
class should contain a native method that implements DNS
resolution using Firefox’s DNS resolver instead of the system
resolver.
If the browser implements pinning, LiveConnect
and the browser will use a common pin database, removing
multi-pin vulnerabilities.
5.3 Fixing Browsers (Default-Deny Sockets)
Allowing direct socket access by default precludes many
defenses for DNS rebinding attacks. If browser plug-ins de-
faulted to denying socket access, as a patched Flash and
the proposed TCPConnection (speciﬁed in HTML5 [19])
would, these defenses would become viable. Java and Live-
Connect, along with any number of lesser-known plug-ins,
expect socket access to be allowed, and ﬁxing these is a chal-
lenge.
Checking Host Header. HTTP 1.1 requires that user
agents include a Host header in HTTP requests that spec-
iﬁes the host name of the server [11]. This feature is used
extensively by HTTP proxies and by web servers to host
many virtual hosts on one IP address.
If sockets are de-
nied by default, the Host header reliably indicates the host
name being used by the browser to contact the server be-
cause XMLHttpRequest [43] and related technologies are re-
stricted from spooﬁng the Host header.5 One server-side de-
fense for these attacks is therefore to reject incoming HTTP
requests with unexpected Host headers [28, 37].
Finer-grained Origins. Another defense against DNS
rebinding attacks is to reﬁne origins to include additional
information, such as the server’s IP address [28] or public
key [27, 23], so that when the attacker rebinds attacker.com
to the target, the browser will consider the rebound host
name to be a new origin. One challenge to deploying ﬁner-
grained origins is that every plug-in would need to revise its
security policies and interacting technologies would need to
hand-oﬀ reﬁned origins correctly.
5Faulty Host header restrictions have been a source of secu-
rity vulnerabilities in earlier versions of Flash 7 and 8.
• IP Addresses. Reﬁning origins with IP address [28]
is more robust than pinning in that a single browsing
session can fail-over from one IP address to another.
When such a fail-over occurs, however, it will likely
break long-lived AJAX applications, such as Gmail,
because they will be prevented from making XML-
HttpRequests to the new IP address. Users can recover
from this by clicking the browser’s reload button. Un-
fortunately, browsers that use a proxy server do not
know the actual IP address of the remote server and
thus cannot properly reﬁne origins. Also, this defense
is vulnerable to an attack using relative paths to script
ﬁles, similar to the applet relative-path vulnerability
described in Section 3.2.
• Public Keys. Augmenting origins with public keys [27,
23] prevents two HTTPS pages served from the same
domain with diﬀerent public keys from reading each
other’s state. This defense is useful when users dis-
miss HTTPS invalid certiﬁcate warnings and chieﬂy
protects HTTPS-only “secure” cookies from network
attackers. Many web pages, however, are not served
over HTTPS, rendering this defense more appropriate
for pharming attacks that compromise victim domains
than for rebinding attacks.
Smarter Pinning. To mitigate rebinding attacks, browsers
can implement smarter pinning policies. Pinning is a de-
fense for DNS rebinding that trades oﬀ robustness for secu-
rity. RFC 1035 [32] provides for small (and even zero) TTLs
to enable dynamic DNS and robust behavior in the case of
server failure but respecting these TTLs allows rebinding
attacks. Over the last decade, browsers have experimented
with diﬀerent pin durations and release heuristics, leading
some vendors to shorten their pin duration to improve ro-
bustness [13]. However, duration is not the only parameter
that can be varied in a pinning policy.
Browsers can vary the width of their pins by permitting
host names to be rebound within a set of IP addresses that
meet some similarity heuristic. Selecting an optimal width
as well as duration enables a better trade-oﬀ between se-
curity and robustness than optimizing duration alone. One
promising policy is to allow rebinding within a class C net-
work. For example, if a host name resolved to 171.64.78.10,
then the client would also accept any IP address beginning
with 171.64.78 for that host name. The developers of the
NoScript Firefox extension [26] have announced plans [25]
to adopt this pinning heuristic.
• Security. When browsers use class C network pinning,
the attacker must locate the attack server on the same
class C network as the target, making the rebinding
attack much more diﬃcult to mount. The attack is
possible only if the attacker co-locates a server at the
same hosting facility or leverages a cross-site scripting
vulnerability on a co-located server. This signiﬁcantly
raises the bar for the attacker and provides better re-
courses for the target.
• Robustness. To study the robustness of class C net-
work pinning, we investigated the IP addresses re-
ported by the 100 most visited English-language sites
(according to Alexa [3]). We visited the home page of
these sites and compiled a list of the 336 host names
used for embedded content (e.g., www.yahoo.com em-
beds images from us.i1.yimg.com). We then issued
DNS queries for these hosts every 10 minutes for 24
hours, recording the IP addresses reported.
In this experiment, 58% reported a single IP address
consistently across all queries. Note that geographic
load balancing is not captured in our data because we
issued our queries from a single machine, mimicking
the behavior of a real client. Averaged over the 42%
of hosts reporting multiple IP addresses, if a browser
pinned to an IP address at random, the expected frac-
tion of IP addresses available for rebinding under class
C network pinning is 81.3% compared with 16.4% un-
der strict IP address pinning, suggesting that class C
pinning is signiﬁcantly more robust to server failure.
Other heuristics for pin width are possible. For example,
the browser could prevent rebinding between public IP ad-
dresses and the RFC 1918 [35] private IP addresses. This
provides greater robustness for fail-overs across data centers
and for dynamic DNS. LocalRodeo [22, 45] is a Firefox ex-
tension that implements RFC 1918 pinning for JavaScript.
As for security, RFC 1918 pinning largely prevents ﬁrewall
circumvention but does not protect against IP hijacking nor
does it prevent ﬁrewall circumvention in the case where a
ﬁrewall protects non-private IP addresses, which is the case
for many real-life protected networks and personal software
ﬁrewalls.
Even the widest possible pinning heuristic prevents some
legitimate rebinding of DNS names. For example, public
host names controlled by an organization often have two IP
addresses, a private IP address used by clients within the
ﬁrewall and a public IP address used by clients on the Inter-
net. Pinning prevents employees from properly connecting
to these severs after joining the organization’s Virtual Pri-
vate Network (VPN) as those host names appear to rebind
from public to private IP addresses.
Policy-based Pinning. Instead of using unpinning heuris-
tics, we propose browsers consult server-supplied policies to
determine when it is safe to re-pin a host name from one IP
address to another, providing robustness without degrading
security. To re-pin safely, the browser must obtain a policy
from both the old and new IP address (because some at-
tacks ﬁrst bind to the attacker whereas others ﬁrst bind to
the target). Servers can supply this policy at a well-known
location, such as /crossdomain.xml, or in reverse DNS (see
Section 5.4).
Pinning Pitfalls. Correctly implementing pinning has sev-