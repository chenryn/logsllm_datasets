行此操作。它首先恢复元数据，然后插入当前有效检查点的所有行，这由
checkpoint_recovery_workers并行完成，每个行都在不同的表中工作。索引在插入过程中创
建。
在检查点时，表被分成多个16MB的块，以便多个恢复工作进程可以并行地恢复表。这
样做是为了加快检查点恢复速度，它被实现为一个多线程过程，其中每个线程负责恢复不同
的段。不同段之间没有依赖关系，因此线程之间没有争用，在更新表或插入新行时也不需要
使用锁。
WAL记录作为封装的WAL恢复的一部分进行恢复。GBase8s封装会迭代XLOG，根
据xlog记录类型执行必要的操作。如果是记录类型为MOT的条目，封装将它转发给MOT 恢
复管理器进行处理。如果XLOG条目太旧（即XLOG条目的LSN比检查点的LSN旧），
MOT恢复将忽略该条目。
在主备部署中，备用服务器始终处于Recovery状态，以便自动WAL恢复过程。
MOT恢复参数在mot.conf文件中配置，参见MOT恢复。
13.3.12MOT 查询原生编译（JIT）
MOT使您可以在执行之前以原生格式（使用PREPARE语句）准备并分析预编译的完
整查询。
这种本机格式以后可以更有效地执行（使用EXECUTE命令）。这种类型的执行效率要
高得多，因为在执行期间，本机格式绕过了多个数据库处理层。这种分工避免了重复的解析
分析操作。LiteExecutor模块负责执行预准备查询，其执行路径比封装执行的常规通用计划
要快得多。这是通过LLVM使用实时（JIT）编译来实现的。此外，以伪LLVM的形式提供
具有潜在相似性能的类似解决方案。
下面是SQL中的PREPARE语法示例：
PREPAREname[(data_type[,...])]ASstatement
下面是一个如何在Java应用程序中调用PREPARE和EXECUTE语句的示例：
conn=DriverManager.getConnection(connectionUrl,connectionUser,connectionPassword);
//Example1:PREPAREwithoutbindsettings
Stringquery="SELECT*FROMgetusers";
PreparedStatementprepStmt1=conn.prepareStatement(query);
南大通用数据技术股份有限公司
512
GBase 8s V8.8开发者手册
ResultSetrs1=pstatement.executeQuery())
while(rs1.next()){…}
//Example2:PREPAREwithbindsettings
StringsqlStmt="SELECT*FROMemployeeswherefirst_name=?andlast_namelike?";
PreparedStatementprepStmt2=conn.prepareStatement(sqlStmt);
prepStmt2.setString(1,"Mark");//firstname “Mark”
prepStmt2.setString(2,"%n%");//lastnamecontainsaletter “n”
ResultSetrs2=prepStmt2.executeQuery())
while(rs2.next()){…}
Prepare
Prepare 创建一个预处理语句。预处理语句是服务器端对象，可用于优化性能。执行
PREPARE语句时，将解析、分析和重写指定的语句。
如果查询语句中提到的表是MOT表，则MOT编译负责对象准备，并基于LLVM将查
询编译成IR字节码进行特殊优化。
每当需要新的查询编译时，都会分析查询，并使用实用程序GsCodeGen 对象和标准
LLVMJITAPI（IRBuilder）为查询生成合适的IR字节代码。完成字节代码生成后，代码将
被JIT编译到单独的LLVM模块中。编译的代码生成一个C函数指针，以后可以调用该指
针直接执行。请注意，这个C函数可以被许多线程并发调用，只要每个线程提供不同的执
行上下文（详细信息如下）。每个这样的执行上下文称为“JIT上下文”。
为了进一步提高性能，MOTJIT对其LLVM代码结果应用缓存策略，使它们能够被在
不同会话中的相同查询重用。
执行
当发出EXECUTE命令时，会计划并执行预准备语句（上文所述）。这种分工避免了重
复的解析分析工作，同时使执行计划依赖于提供的特定设置值。
当生成的执行查询命令到达数据库时，它使用相应的IR字节代码，在MOT引擎中直
接执行该代码，并且执行效率更高。这称为“轻量级执行”。
此外，为了可用性，LiteExecutor维护了一个预先分配的JIT源池。每个会话预分配自
己的会话本地JIT上下文对象池（用于重复执行预编译查询）。
JIT编译对比-GBase8s盘表与MOT表
目前，GBase8s包含针对其基于磁盘的表的JIT/CodeGen查询优化的两种主要形式：
 加速表达式计算，例如在WHERE子句、目标列表、聚合和投影中。
南大通用数据技术股份有限公司
513
GBase 8s V8.8开发者手册
 内联小函数调用。
这些优化是局部的（从某种意义上说，它们不优化整个解释的运算符树或完全替换它），
并且主要针对CPU绑定的复杂查询，通常在OLAP用例中可见。查询的执行是在使用解释
运算符树的拉模型（Volcano样式处理）中执行的。激活后，每次执行查询时都会执行编译。
目前，尚未提供生成的LLVM代码的缓存及其跨会话和查询的重用。
相反，MOTJIT优化为符合MOTJIT优化条件的整个查询提供了LLVM代码。结果代
码用于直接执行MOT表，而解释的运算符模型则完全放弃。结果实际上是为整个特定查询
执行生成的手写LLVM代码。
另一个显着的概念差异是MOTLLVM代码只在查询的PREPARE阶段为准备查询生成，
而不是在查询执行时生成。由于OLTP查询的运行时间相当短，因此这对于OLTP场景尤其
重要，这无法在每次查询执行期间生成代码和执行较长的查询编译时间。
最后，在GBase8s中，激活PREPARE意味着于同一个会话中具有不同参数的执行之
间重用生成的计划。同样，MOTJIT对其LLVM代码结果应用了缓存策略，并扩展了缓存
策略，以便在不同会话之间重用。因此，单个查询可以只编译一次，其LLVM代码可以在
多个会话中重用，这同样有利于OLTP场景。
13.3.13对比：磁盘与 MOT
下表简要对比了存储引擎和MOT存储引擎的各种特性。
表 13-8 对比：基于磁盘与MOT
特性 GBase8s 磁盘存储 GBase8sMOT引擎
英特尔x86+鲲鹏ARM 是 是
SQL和功能集覆盖率 100% 98%
纵向扩容（多核，NUMA） 低效 高效
吞吐量 高 极高
时延 低 极低
隔离级别 RC+SI RC
RR RR
序列化 RC+SI（V2版本）
南大通用数据技术股份有限公司
514
GBase 8s V8.8开发者手册
并发控制策略 悲观 乐观
数据容量（数据+索引） 不受限制 受限于DRAM
本地编译 否 是
复制、恢复 是 是
复制选项 2（同步，异步） 3（同步、异步、组提交）
其中，
 RR=可重复读取
 RC=读已提交
 SI=快照隔离
13.4附录
表 13-9 术语表
缩略语 定义描述
2PL 2阶段锁（2-PhaseLocking）
ACID 原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、
持久性（Durability）
AP 分析处理（AnalyticalProcessing）
Arm 高级RISC机器（AdvancedRISCMachine）、x86的替代硬件
架构
CC 并发控制（ConcurrencyControl）
CPU 中央处理器（CentralProcessingUnit）
DB 数据库（Database）
DBA 数据库管理员（DatabaseAdministrator）
DBMS 数据库管理系统（DataBaseManagementSystem）
DDL 数据定义语言（DataDefinitionLanguage）数据库模式管理语
南大通用数据技术股份有限公司
515
GBase 8s V8.8开发者手册
言
DML 数据修改语言（DataModificationLanguage）
ETL 提取、转换、加载或遇时锁定（Extract、Transform、 Loador
EncounterTimeLocking）
FDW 外部数据封装（ForeignDataWrapper）
GC 垃圾收集器（GarbageCollector）
HA 高可用性（HighAvailability）
HTAP 事 务 分 析 混 合 处 理 （ Hybrid Transactional-Analytical
Processing）
IoT 物联网（InternetofThings）
IM 内储存（In-Memory）
IMDB 内储存数据库（In-MemoryDatabase）
IR 源代码的中间表示（IntermediateRepresentation），用于编译
和优化
JIT 准时（JustInTime）
JSON JavaScript对象表示法（JavaScriptObjectNotation）
KV 键值（KeyValue）
LLVM 低级虚拟机（Low-LevelVirtualMachine），指编译代码或IR
查询
M2M 机对机（Machine-to-Machine）
ML 机器学习（MachineLearning）
MM 主内存（MainMemory）
MO 内存优化（MemoryOptimized）
MOT 内存优化表存储引擎（SE），读作/em//oh//tee/
MVCC 多版本并发控制（Multi-VersionConcurrencyControl）
南大通用数据技术股份有限公司
516
GBase 8s V8.8开发者手册
NUMA 非一致性内存访问（Non-UniformMemoryAccess）
OCC 乐观并发控制（OptimisticConcurrencyControl）
OLTP 在线事务处理（On-LineTransactionProcessing），多用户在
线交易类业务
PG PostgreSQL
RAW 写后读校验（Reads-After-Writes）
RC 返回码（ReturnCode）
RTO 目标恢复时间（RecoveryTimeObjective）
SE 存储引擎（StorageEngine）
SQL 结构化查询语言（StructuredQueryLanguage）
TCO 总体拥有成本（TotalCostofOwnership）
TP 事务处理（TransactionalProcessing）
TPC-C 一种联机事务处理基准
Tpm-C 每分钟事务数-C.TPC-C基准的性能指标，用于统计新订单事
务
TVM 微小虚拟机（TinyVirtualMachine）
TSO 分时选项（TimeSharingOption）
UDT 自定义类型
WAL 预写日志（WriteAheadLog）
XLOG 事务日志的PostgreSQL实现（WAL，如上文所述）
14 性能调优
14.1总体调优思路
GBase8s的总体性能调优思路为性能瓶颈点分析、关键参数调整以及SQL调优。在调
优过程中，通过系统资源、吞吐量、负载等因素来帮助定位和分析性能问题，使系统性能达
南大通用数据技术股份有限公司
517
GBase 8s V8.8开发者手册
到可接受的范围。
性能调优过程需要综合考虑多方面因素，因此，调优人员应对系统软件架构、软硬件配
置、数据库配置参数、并发控制、查询处理和数据库应用有广泛而深刻的理解。
性能调优有时候需要重启数据库，可能会中断当前业务。因此，业务上线后，当性能调
优操作需要重启数据库时，操作窗口时间需向管理部门提出申请，经批准后方可执行。
调优流程
调优流程如图14-1所示。
图 14-1 性能调优流程
调优各阶段说明，如表14-1所示。
表 14-1 性能调优流程说明
阶段 描述
确定性能调优范围 获取GBase8s节点的CPU、内存、I/O和网络资源使用情况，确
南大通用数据技术股份有限公司
518
GBase 8s V8.8开发者手册
认这些资源是否已被充分利用，是否存在瓶颈点。
系统调优指南 进行操作系统级以及数据库系统级的调优，更充分地利用机器的
CPU、内存、I/O和网络资源，避免资源冲突，提升整个系统查
询的吞吐量。
SQL调优指南 审视业务所用SQL语句是否存在可优化空间，包括：
通过ANALYZE语句生成表统计信息：ANALYZE语句可收集与
数据库中表内容相关的统计信息，统计结果存储在系统表
PG_STATISTIC中。执行计划生成器会使用这些统计数据，以确
定最有效的执行计划。
分析执行计划：EXPLAIN 语句可显示 SQL 语句的执行计划，
EXPLAINPERFORMANCE语句可显示SQL语句中各算子的执
行时间。
查找问题根因并进行调优：通过分析执行计划，找到可能存在的
原因，进行针对性的调优，通常为调整数据库级SQL调优参数。
编写更优的SQL：介绍一些复杂查询中的中间临时数据缓存、
结果集缓存、结果集合并等场景中的更优SQL语法。
14.2确定性能调优范围
数据库性能调优通常发生在用户对业务的执行效率不满意，期望通过调优加快业务执行
的情况下。正如“性能因素”小节所述，数据库性能受影响因素多，从而性能调优是一项复
杂的工程，有些时候无法系统性地说明和解释，而是依赖于DBA的经验判断。尽管如此，
此处还是期望能尽量系统性的对性能调优方法加以说明，方便应用开发人员和刚接触GBase
8s的DBA参考。
性能因素
多个性能因素会影响数据库性能，了解这些因素可以帮助定位和分析性能问题。
 系统资源
数据库性能在很大程度上依赖于磁盘的I/O和内存使用情况。为了准确设置性能指标，
用户需要了解GBase8s部署硬件的基本性能。CPU、硬盘、磁盘控制器、内存和网络接口
等这些硬件性能将显著影响数据库的运行速度。
 负载
负载等于数据库系统的需求总量，它会随着时间变化。总体负载包含用户查询、应用程
南大通用数据技术股份有限公司
519
GBase 8s V8.8开发者手册
序、并行作业、事务以及数据库随时传递的系统命令。比如：多用户在执行多个查询时会提
高负载。负载会显著地影响数据库的性能。了解工作负载高峰期可以帮助用户更合理地利用
系统资源，更有效地完成系统任务。
 吞吐量
使用系统的吞吐量来定义处理数据的整体能力。数据库的吞吐量以每秒的查询次数、每
秒的处理事务数量或平均响应时间来测量。数据库的处理能力与底层系统（磁盘I/O、CPU
速度、存储器带宽等）有密切的关系，所以当设置数据库吞吐量目标时，需要提前了解硬件
的性能。
 竞争
竞争是指两组或多组负载组件尝试使用冲突的方式使用系统的情况。比如，多条查询视
图同一时间更新相同的数据，或者多个大量的负载争夺系统资源。随着竞争的增加，吞吐量
下降。
 优化
数据库优化可以影响到整个系统的性能。在执行SQL制定、数据库配置参数、表设计、
数据分布等操作时，启用数据库查询优化器打造最有效的执行计划。
调优范围确定
性能调优主要通过查看GBase8s节点的CPU、内存、I/O和网络这些硬件资源的使用
情况，确认这些资源是否已被充分利用，是否存在瓶颈点，然后针对性调优。
 如果某个资源已达瓶颈，则：
1 检查关键的操作系统参数和数据库参数是否合理设置，进行系统调优指南。
2 通过查询最耗时的SQL语句、跑不出来的SQL语句，找出耗资源的SQL，
进行SQL调优指南。
 如果所有资源均未达瓶颈，则表明性能仍有提升潜力。可以查询最耗时的SQL语句，
或者跑不出来的SQL语句，进行针对性的SQL调优指南。
 硬件瓶颈点分析
获取GBase8s节点的CPU、内存、I/O和网络资源使用情况，确认这些资源是否已被
充分利用，是否存在瓶颈点。
 查询最耗性能的SQL
南大通用数据技术股份有限公司
520
GBase 8s V8.8开发者手册
 分析作业是否被阻塞
14.2.1 硬件瓶颈点分析
获取GBase8s节点的CPU、内存、I/O和网络资源使用情况，确认这些资源是否已被
充分利用，是否存在瓶颈点。
 CPU：通过top命令查看GBase8s内节点CPU使用情况，分析是否存在由于CPU负载
过高导致的性能瓶颈。
 内存：通过top命令查看GBase8s节点内存使用情况，分析是否存在由于内存占用率
过高导致的性能瓶颈。
 I/O：通过iostat、pidstat命令或GBase8s健康检查工具查看GBase8s内节点I/O繁忙
度和吞吐量，分析是否存在由于I/O导致的性能瓶颈。
 网络：通过sar或ifconfig命令查看GBase8s内节点网络使用情况，分析是否存在由于
网络导致的性能瓶颈。
14.2.1.1 CPU
通过top命令查看数据库节点CPU使用情况，分析是否存在由于CPU负载过高导致的