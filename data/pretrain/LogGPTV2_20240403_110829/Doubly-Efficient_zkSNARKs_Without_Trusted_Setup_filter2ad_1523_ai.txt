gdi
i
d(cid:7) (cid:14) hrβ
rβ, rδ
$← {1, . . . , qG} and sends
δ ← Com( (cid:17)d; rδ) = hrδ (cid:14)
β ← Com((cid:6)(cid:17)a, (cid:17)d(cid:7); rβ) = g
(cid:6)(cid:17)a, (cid:17)
2. V sends a challenge c $← {1, . . . , qG}.
3. P sends
i
(cid:17)z ← c · (cid:17)x + (cid:17)d,
zδ ← c · rξ + rδ,
4. V checks that
zβ ← c · rτ + rβ

(10)
(11)
ξ c (cid:14) δ ?= Com((cid:17)z; zδ) = hzδ (cid:14)
τc (cid:14) β ?= Com((cid:6)(cid:17)z, (cid:17)a(cid:7); zβ) = g
gzi
i
i
(cid:6)(cid:17)z, (cid:17)a(cid:7) (cid:14) hzβ
(12)
(13)
Figure 6—ZK vector dot-product proof (§A.2).
A.2 Proving a dot-product relationship
In the protocol of Figure 6, P convinces V that it has openings to
one multi-commitment ξ = Com((cid:17)x; rξ) and one scalar commit-
ment τ = Com(y; rτ) such that, for a supplied vector (cid:17)a it holds
that y = (cid:6)(cid:17)x, (cid:17)a(cid:7). Intuitively, this protocol works because
(cid:6)(cid:17)z, (cid:17)a(cid:7) = (cid:6)c(cid:17)x + (cid:17)d, (cid:17)a(cid:7) = c(cid:6)(cid:17)x, (cid:17)a(cid:7) + (cid:6) (cid:17)d, (cid:17)a(cid:7) = cy + (cid:6) (cid:17)d, (cid:17)a(cid:7)
The above identity is veriﬁed in the exponent in Equation (13).
Theorem 11. The protocol of Figure 6 is complete, honest-
veriﬁer perfect zero-knowledge, and special sound under the
discrete log assumption.
The proof of Theorem 11 is standard; we leave it to the full
version [106] because of space constraints.
A.3 Dot-product argument from Bulletproofs
The dot-product argument of Appendix A.2 has communication
4+n elements for a vector of length n. By adapting the Bulletproof
recursive reduction of Bünz et al. [30], we reduce this to 4+2 log n.
Figures 7 and 8 detail this protocol.
As in Appendix A.2, we have (cid:17)x, (cid:17)a, and y = (cid:6)(cid:17)x, (cid:17)a(cid:7), where n =
|(cid:17)x| = |(cid:17)a|. Given (cid:17)a and Υ = Com(cid:17)g
((cid:17)x) (cid:14) Com(y), each recursive
(cid:16)((cid:17)x(cid:16)) (cid:14) Com(y
call to bullet-reduce produces (cid:17)a(cid:16) and Υ(cid:16) = Com(cid:17)g
(cid:16))
such that y
After log n such recursive calls, we are left with a scalar ˆa and
a commitment ˆΥ = ˆg ˆxg ˆyh ˆrΥ. P can now use a Schnorr proof to
(cid:23)
convince V that ˆy = ˆx · ˆa. Expanding Equation (14) (Fig. 8),
ˆgc· ˆx (cid:14) gc· ˆy (cid:14) hc· ˆrΥ (cid:14) gd (cid:14) hrβ
ˆgc· ˆx (cid:14) gc· ˆy+d (cid:14) hc· ˆrΥ+rβ
(cid:24) (cid:17)a (cid:14) δ
(cid:24) (cid:17)a (cid:14) ˆgd (cid:14) hrδ
ˆΥc (cid:14) β
(cid:24) ˆa (cid:14) δ =
(cid:16) = (cid:6)(cid:17)x(cid:16), (cid:17)a(cid:16)(cid:7).
(cid:23)
(cid:23)
= ˆgc· ˆx· ˆa+d (cid:14) g
(cid:23)
(cid:24)
= ˆgc· ˆy+d (cid:14) g
=
ˆg (cid:14) g
ˆa
ˆa(c· ˆy+d) (cid:14) h ˆa(c·rΥ+rβ)+rδ
ˆa(c· ˆy+d) (cid:14) hz2
z1 (cid:14) hz2
=
941
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
bullet-reduce(Υ, (cid:17)a, (cid:17)g)
Inputs: Υ = hrΥ (cid:14) gy (cid:14)
n
i=1 gxi
i
, (cid:17)x, (cid:17)a ∈ Zn
qG, y, rΥ ∈ ZqG.
P knows (cid:17)x,y, and rΥ.
Deﬁne (cid:17)x1 = (x1, . . . , xn/2), (cid:17)x2 = (x1+n/2, . . . , xn) and similarly
for (cid:17)a1, (cid:17)a2, (cid:17)g1, and (cid:17)g2; and deﬁne
(g1, g2 . . .)k◦(g1+n/2, g2+n/2 . . .)(cid:4) = (gk
1. If n = 1, return (Υ, a1, g1).
2. P samples rΥ−1
$← {1, . . . , qG} and sends
2 (cid:14)g
, gk
1 (cid:14)g
, . . .)
(cid:4)
1+n/2
(cid:4)
2+n/2
, rΥ1
(cid:6) (cid:17)x1, (cid:17)a2(cid:7) (cid:14) n/2
(cid:6) (cid:17)x2, (cid:17)a1(cid:7) (cid:14) n/2
i=1
gxi
i+n/2
xi+n/2
g
i
Υ−1 ← hrΥ−1 (cid:14) g
Υ1 ← hrΥ1 (cid:14) g
i=1
3. V chooses and sends c $← {1, . . . , qG}.
4. P and V both compute
Υ(cid:16) ← Υc2−1 (cid:14) Υ (cid:14) Υc
−2
(cid:17)a(cid:16) ← c−1 · (cid:17)a1 + c · (cid:17)a2
1
−1 ◦ (cid:17)g2c = (g1, . . . , gn/2)c
−1 ◦ (g1+n/2, . . . , gn)c
(cid:16) ← (cid:17)g1c
(cid:17)g
P computes
(cid:17)x(cid:16) ← c · (cid:17)x1 + c−1 · (cid:17)x2
(cid:16) ← c2 · (cid:6) (cid:17)x1, (cid:17)a2(cid:7) + y + c−2 · (cid:6) (cid:17)x2, (cid:17)a1(cid:7)
y
Υ ← rΥ−1 · c2 + rΥ + rΥ1
r(cid:16)
· c−2
5. Return bullet-reduce(Υ(cid:16), (cid:17)a(cid:16), (cid:17)g
If y = (cid:6)(cid:17)x, (cid:17)a(cid:7), then y
(cid:16) = (cid:6)(cid:17)x(cid:16), (cid:17)a(cid:16)(cid:7), and P knows (cid:17)x(cid:16), y
(cid:16), r(cid:16)
Υ.
Figure 7—Reduction step for the protocol of Figure 8.
(cid:16)).
In total, P sends 2 log n elements during the bullet-reduce calls
and 4 elements for the ﬁnal Schnorr proof. Adapting suggestions
by Poelstra [84], V’s work computing ˆg can be reduced to one
multi-exponentiation of length n and one ﬁeld inversion, and
computing ˆΥ costs one multi-exponentiation of length 1 + 2 log n.
Lemma 12. The protocol of Figures 7–8 is complete, honest-
veriﬁer perfect ZK, and has witness-extended emulation under
the discrete log assumption.
Completeness follows from the derivation of Equation (14)
above and the completeness of bullet-reduce [30, Thm. 2,
Appx. A], and ZK follows from standard reverse-ordering tech-
niques. Witness-extended emulation follows from the properties
of Schnorr protocols and an argument similar to the proof of [30,
Thm. 2, Appx. A]. In total, the extractor requires n + 2 transcripts.
B Hyrax-I pseudocode
In this section, we provide pseudocode for Hyrax-I. Figure 10
details V’s work; Figures 9 and 11 detail P’s. Our presentation
borrows from Wahby et al. [104].
942
prooflog-of-dot-prod(ξ, τ, (cid:17)a)
Inputs: ξ = Com(cid:17)g
τ = Com(y; rτ) = gy (cid:14) hrτ . (cid:17)x, (cid:17)a ∈ Zn
P knows (cid:17)x, y, rξ, and rτ.
((cid:17)x; rξ) = hrξ (cid:14)
1. Let Υ = ξ (cid:14) τ = hrΥ (cid:14) gy (cid:14)
n
,
n
i=1 gxi
qG, y, rξ, rτ ∈ ZqG.
i
i=1 gxi
( ˆΥ, ˆa, ˆg) ← bullet-reduce(Υ, (cid:17)a, (cid:17)g) (see Fig. 7).
i where rΥ = rτ + rξ.
At this point, n = 1 and ˆΥ = ˆg ˆx (cid:14) g ˆy (cid:14) h ˆrΥ where ˆy = ˆx · ˆa.
2. P samples d, rδ, rβ
$← {1, . . . , qG} and sends
δ ← Com ˆg(d; rδ) = ˆgd (cid:14) hrδ
β ← Comg(d; rβ) = gd (cid:14) hrβ
(cid:14)
3. V chooses and sends c $← {1, . . . , qG}.
c · ˆrΥ + rβ
4. P sends z1 ← d + c · ˆy and z2 ← ˆa
5. V checks that(cid:23)
(cid:24)
(cid:23)
(cid:24) ˆa (cid:14) δ ?=
ˆΥc (cid:14) β
ˆg (cid:14) g
ˆa
z1 (cid:14) hz2
(cid:15)
+ rδ.
(14)
Figure 8—Protocol for dot-product relation based on Bulletproofs [30].
Com(cid:17)g indicates a multi-commitment over generators (cid:17)g.
μ
μ
q
(cid:16)
i
(cid:16)
0
i,1
(cid:16)
i−1
i,0 (cid:14) Y
, q0, L); 0)
// see Line 8 of Figure 10
// see Line 21 of Figure 10
, qi−1, L, qi−1, R)
for i=1,. . . ,d do
(X, Y, q
, qi, L, qi, R) ← ZK-SumCheckP(c, i, ai−1, μi−1,0, μi−1,1,
if i<d then
(μi,0, μi,1) ← ReceiveFromVeriﬁer()
ai ← X
// Commit to the rows of T via commitments T1, . . . , T|w|1/k
SendToVeriﬁer(T0, . . . , T|w|1/k −1)
// see Line 3 of Figure 10
b N ← log N, bG ← log G
(q
, q0, L) ← ReceiveFromVeriﬁer()
(cid:16)
0
μ0,0 ← 1, μ0,1 ← 0, q0, R ← q0, L
a0 ← Com( ˜Vy(q
d ← c.depth
1: function Hyrax-Prove(ArithCircuit c, input x, witness w, parameter ι)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
Figure 9—Pseudocode for P in Hyrax-I (§7). The ZK-SumCheckP
subroutine is deﬁned in Figure 11. V’s work is described in Figure 10.
For notational convenience, we assume |x| = |w|, as in Section 6.1.
// Compute Coeﬃcients of the degree bG polynomial H: H0, . . . , Hlog G
SendToVeriﬁer(Com(H0), . . . , Com(HbG
// see Line 21 of Figure 10
for i = 0, . . . , bG do
proof-of-opening (Com(Hi))
proof-of-equality (Com(H0), X)
proof-of-equality (Com(HbG
τ ← ReceiveFromVeriﬁer()
qd ← (q
(cid:16) ←|w|1/k −1
ζ = Com(HbG
R ← ( ˆχ0, ˆχ|w|1/ι , . . . , ˆχ|w|1/ι·(|w|1/ι−1))
(1−qd
prooflog-of-dot-prod (T
, (1 − τ) · qd, L + τ · qd, R)
)τlog G (cid:14) Com(HbG
// ˆχb is deﬁned in Section 6
[0]) ˜Vx (qd
−1]), R)
) (cid:14) . . . (cid:14) Com(H0), Y)
// see Line 30 of Figure 10
−1)τlog G−1 (cid:14) . . . (cid:14) Com(H0)
// ˆχb is deﬁned in Section 6
[0], ζ (cid:19) g
[1, ..., b N
ˇχ
T
i
(cid:16)qd
+bG
))
i=0
(cid:16)
d
T
i
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
μ
i,1
(cid:16)
i−1
if i<d then
(cid:16), rL, rR)
R←− F
i,0 (cid:14) Y
// see Line 5 of Figure 9
// see Line 3 of Figure 9
// see Line 14 of Figure 9
, qi−1, L, qi−1, R)
, qi, L, qi, R) ← (r
)) ← ReceiveFromProver()
(cid:16), rL, rR) ← ZK-SumCheckV(i, ai−1, q
for i=1,. . . ,d do
(X, Y, r
// X = Com(v0), Y = Com(v1)