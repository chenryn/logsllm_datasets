Trust Dies in Darkness: Shedding Light on
Samsung’s TrustZone Cryptographic Design
Alon Shakevsky, Eyal Ronen, Avishai Wool
Extended paper: https://eprint.iacr.org/2022/208.pdf
Tool + PoC: https://github.com/shakevsky/keybuster
@shakevsky
@eyalr0
PI:EMAIL
3 academic researchers 
The leading Android Vendor
What did we find?
2 High severity CVEs that affect over 100 million devices
Recover keys that were encrypted by trusted hardware
Designed using resources from Flaticon.com
Agenda
Introduction Background and motivation
Keymaster
TA Analysis Recovering hardware-protected keys
Implications Breaking higher-level protocols
Discussion Main takeaways from our research
The need for Trusted Execution Environments (TEEs)
Designed using resources from Flaticon.com
The need for Trusted Execution Environments (TEEs)
Designed using resources from Flaticon.com
Proprietary TrustZone Operating Systems (TZOS)
QSEE 
Kinibi 
TEEGRIS
TZOS
Vendors
Black Box Designs
Designed using resources from Flaticon.com
Research questions
1. Do hardware-protected cryptographic keys remain secure 
even when the Normal World (Android) is compromised?
Designed using resources from Flaticon.com
Research questions
1. Do hardware-protected cryptographic keys remain secure 
even when the Normal World (Android) is compromised?
2. Do compromised hardware-protected keys break the 
security of various protocols that rely on them?
Designed using resources from Flaticon.com
ARM TrustZone - Attack Model
Designed using resources from Flaticon.com
ARM TrustZone - Attack Model
Designed using resources from Flaticon.com
ARM TrustZone - Attack Model
Designed using resources from Flaticon.com
Android Hardware-Backed Keystore Flow
Designed using resources from Flaticon.com
Android
Keymaster TA in
TrustZone
Generate key 
B = wrap(key) 
B
Request key generation
Android Hardware-Backed Keystore Flow
Designed using resources from Flaticon.com
Android
Keymaster TA in
TrustZone
Request attestation for B
Generate key 
B = wrap(key) 
Generate attestation cert
B
cert
Request key generation
Android Hardware-Backed Keystore Flow
Designed using resources from Flaticon.com
Android
Keymaster TA in
TrustZone
Request attestation for B
Generate key 
B = wrap(key) 
Generate attestation cert
key = unwrap(B) 
result = operation(key) 
result
Request operation for B 
(e.g., encrypt/sign)
B
cert
Request key generation
Android Hardware-Backed Keystore Flow
Designed using resources from Flaticon.com
Android
Keymaster TA in
TrustZone
Request attestation for B
Generate key 
B = wrap(key) 
Generate attestation cert
key = unwrap(B) 
result = operation(key) 
result
Request operation for B 
(e.g., encrypt/sign)
B
cert
Request key generation
Plaintext key material
should never leave
the TZOS
What’s the context?
We need to protect cryptographic keys of applications
Only the Keymaster should access key material
But is it guaranteed?
Agenda
Introduction Background and motivation
Keymaster
TA Analysis Recovering hardware-protected keys
Implications Breaking higher-level protocols
Discussion Main takeaways from our research
Disclaimer
Where do you start?
Where do you start?
Download the firmware of the specific model
Where do you start?
Download the firmware of the specific model
Read public documentation and security certifications
Where do you start?
Download the firmware of the specific model
Read public documentation and security certifications
Reverse-engineer using Ghidra
Repeat for 26 firmwares
Image: Ryan Kurtz, Apache License 2.0 via Wikimedia Commons
How to interact with the Keymaster?
Designed using resources from Flaticon.com
Keybuster: tool to interact with the Keymaster
Normal World
keybuster
TrustZone device drivers 
Secure World
Keymaster TA 
TEEGRIS kernel
Secure Monitor
SMC
World
Shared
Memory
EL0 
Usermode 
EL1 
Kernelmode 
EL3
SMC
Key Blob Encryption
The Keymaster TA encrypts key material inside blobs.
Key Blob Encryption
The Keymaster TA encrypts key material inside blobs.
Key Blob Encryption
The Keymaster TA encrypts key material inside blobs.
KDF versions of key blobs
salt = SHA-256(salt_seq)
Where salt_seq is one of the following sequences:
KDF versions of key blobs
salt = SHA-256(salt_seq)
Where salt_seq is one of the following sequences:
MDFPP can explain the variations
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
Blob A
Unknown key A
Extract IV and salt
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
Blob A
Unknown key A
Known key B
Extract IV and salt
importKey Keystore API
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
Blob B
Blob A
Unknown key A
Known key B
Extract IV and salt
importKey Keystore API
Known key B
Reminder
REK = Device-unique hardware key
HDK = KDF(REK, salt)
B = AES-GCM(HDK, IV, key)
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
Blob B
Blob A
Unknown key A
Known key B
Extract IV and salt
importKey Keystore API
KB
E(HDK, IV) XOR KA
E(HDK, IV) XOR KB
Known key B
Reminder
REK = Device-unique hardware key
HDK = KDF(REK, salt)
B = AES-GCM(HDK, IV, key)
IV Reuse Attack (v15/v20-s9)
●
The Android client can control the salt -> key reuse
●
The Android client can control the IV   -> IV reuse
●
AES-GCM + key reuse + iv reuse        -> decryption
Blob B
Blob A
Unknown key A
Known key B
Extract IV and salt
importKey Keystore API
KB
E(HDK, IV) XOR KA
E(HDK, IV) XOR KB
Key A
KA
Known key B
Reminder
REK = Device-unique hardware key
HDK = KDF(REK, salt)
B = AES-GCM(HDK, IV, key)
Bypassing Authentication and Confirmation
We can bypass any key usage restriction without user presence/consent
Images from Android Developers Blog
Bypassing Authentication and Confirmation
We can bypass any key usage restriction without user presence/consent
Images from Android Developers Blog
Downgrade Attack
●
V20-s10 has randomized salt –> no trivial key reuse
Downgrade Attack
●
V20-s10 has randomized salt –> no trivial key reuse
●
Latent code allows creation of v15 blobs
Downgrade Attack
●
V20-s10 has randomized salt –> no trivial key reuse
●
Latent code allows creation of v15 blobs
●
A privileged attacker can exploit this to
force all new blobs to version v15
Android
Keymaster TA in
TrustZone
Generate key 
B = wrap(key) 
B, a v15 key blob
Request key generation 
KM_EKEY_BLOB_ENC_VER = 15 
Agenda
Introduction Background and motivation
Keymaster
TA Analysis Recovering hardware-protected keys
Implications Breaking higher-level protocols
Discussion Main takeaways from our research
FIDO2 WebAuthn
Allows passwordless authentication
FIDO2 WebAuthn
Allows passwordless authentication
Authentication keys live inside a “platform authenticator”
FIDO2 WebAuthn
Allows passwordless authentication
Authentication keys live inside a “platform authenticator”
Hard to extract the keys from the secure element
Or to clone the platform authenticator
Bypassing FIDO2 WebAuthn
Designed using resources from Flaticon.com
Trusted Server
Android
Keymaster TA in
TrustZone
BAUTH 
Request attestation for BAUTH  
cert
cert
Generate (Pub, Priv) 
BAUTH = wrap(Pub, Priv)
Create attestation
certificate chain for blob
Verify certificate, 
associate the 
public key with the user 
Request key generation
(attacker downgrades to
v15 blob)
Registration Request
FIDO2 
Registration
Bypassing FIDO2 WebAuthn
Designed using resources from Flaticon.com
Trusted Server
Android
Keymaster TA in
TrustZone
BAUTH 
Request attestation for BAUTH  
cert
cert
Generate (Pub, Priv) 
BAUTH = wrap(Pub, Priv)
Create attestation
certificate chain for blob
Verify certificate, 
associate the 
public key with the user 
Request key generation
(attacker downgrades to
v15 blob)
Registration Request
Authentication Request
Generate Challenge
Challenge
Request user consent then 
Ask to sign challenge with B 
Sign Challenge with Priv in
secure hardware 
A
A
Verify assertion A, 
if successful 
the user is signed-in
FIDO2 
Registration
FIDO2 
Assertion
Bypassing FIDO2 WebAuthn
Designed using resources from Flaticon.com
Bypassing FIDO2 WebAuthn Demo #1
Bypassing FIDO2 WebAuthn Demo #2
What did we find?
Attackers could steal cryptographic keys of applications
Attackers could steal your identity
Responsible Disclosure #1
●
May ‘21: We reported the IV reuse attack on S9 to Samsung
Responsible Disclosure #1
●
May ‘21: We reported the IV reuse attack on S9 to Samsung
●
Aug ‘21: Samsung patched Android O/P/Q devices
○
S9, J3 Top, J7 Top, J7 Duo, TabS4, Tab-A-S-Lite, A6 Plus, A9S
○
CVE-2021-25444 with High severity
○
Removed the option to add a custom IV from the API
Responsible Disclosure #1
●
May ‘21: We reported the IV reuse attack on S9 to Samsung
●
Aug ‘21: Samsung patched Android O/P/Q devices
○
S9, J3 Top, J7 Top, J7 Duo, TabS4, Tab-A-S-Lite, A6 Plus, A9S
○
CVE-2021-25444 with High severity
○
Removed the option to add a custom IV from the API
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
○
“There is no application created with the key blob version as v15. And any of the 
applications cannot change its key blob version for it to be exploitable.”
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
○
“we think that there is no practical security impact on this”
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
○
“we think that there is no practical security impact on this”
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
●
Aug ‘21: We sent the paper
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
●
Aug ‘21: We sent the paper
●
Sep ‘21: Samsung reviewed and re-investigated the impact
○
“After further review of your paper, we concluded that "Downgrade Attack" also 
has practical impact with our devices”
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
●
Aug ‘21: We sent the paper
●
Sep ‘21: Samsung reviewed and re-investigated the impact
○
“After further review of your paper, we concluded that "Downgrade Attack" also 
has practical impact with our devices”
Responsible Disclosure #2
●
Jun  ‘21: Samsung rejected the downgrade attack
●
Jul   ‘21: We reported the downgrade attack on S10, S20 and S21
●
Aug ‘21: Samsung rated the downgrade attack as “very Low severity”
●
Aug ‘21: We sent the paper
●
Sep ‘21: Samsung reviewed and re-investigated the impact
●
Oct  ‘21: Samsung patched Android P or later, including S10/S20/S21
○
CVE-2021-25490 with High severity
○
Released a patch that completely removes the legacy key blob implementation
No Security By Obscurity
Return of the IV Reuse Attack
Agenda
Introduction Background and motivation
Keymaster
TA Analysis Recovering hardware-protected keys
Implications Breaking higher-level protocols
Discussion Main takeaways from our research
Low-Level Cryptographic Issues
●
Allowing client to set IV
●
Allowing client to set encryption version
●
Latent code in security-critical application
●
Encryption version persists across “upgrades”
Low-Level Cryptographic Issues
●
Allowing client to set IV
●
Allowing client to set encryption version
●
Latent code in security-critical application
●
Encryption version persists across “upgrades”
●
Use a unique IV / misuse resistant AEAD (AES-GCM-SIV) / Tink
●
Disallow choice of encryption version
●
Reduce attack surface in security-critical application
●
Always use the latest encryption version 
The Gap in Composability
●
Key attestation does not commit to the cryptographic method
●
Closed vendor-specific implementation
The Gap in Composability
●
Key attestation does not commit to the cryptographic method
●
Closed vendor-specific implementation
●
Include encryption version in attestation certificate
●
Uniform open-standard by Google for the Keymaster HAL and TA
Image from Android Developers Blog
Conclusions
Fragmented blackbox designs -> dangerous pitfalls
Open standard design
Conclusions
Fragmented blackbox designs -> dangerous pitfalls
Open standard design
No Security By Obscurity
Formal analysis by independent researchers
Conclusions
Fragmented blackbox designs -> dangerous pitfalls
Open standard design
No Security By Obscurity
Formal analysis by independent researchers
Decades of IV reuse in AES-GCM
Misuse-resistant AEAD / cryptography library
Any questions?
Designed using resources from Flaticon.com
●
Extended paper: https://eprint.iacr.org/2022/208.pdf
●
Tool + PoC: https://github.com/shakevsky/keybuster
@shakevsky
@eyalr0
PI:EMAIL