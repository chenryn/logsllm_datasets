# Trust Dies in Darkness: Shedding Light on Samsung’s TrustZone Cryptographic Design

**Authors:** Alon Shakevsky, Eyal Ronen, Avishai Wool  
**Extended Paper:** [https://eprint.iacr.org/2022/208.pdf](https://eprint.iacr.org/2022/208.pdf)  
**Tool + Proof of Concept (PoC):** [https://github.com/shakevsky/keybuster](https://github.com/shakevsky/keybuster)  
**Contact:** @shakevsky, @eyalr0, PI:EMAIL

## Overview
- **3 Academic Researchers**
- **The Leading Android Vendor**

### Key Findings
- **2 High Severity CVEs** affecting over 100 million devices
- **Recovery of keys** encrypted by trusted hardware

### Agenda
1. Introduction and Background
2. Keymaster
3. Trusted Application (TA) Analysis
4. Recovering Hardware-Protected Keys
5. Implications and Breaking Higher-Level Protocols
6. Discussion and Main Takeaways

## The Need for Trusted Execution Environments (TEEs)
- **Proprietary TrustZone Operating Systems (TZOS)**
  - QSEE
  - Kinibi
  - TEEGRIS
- **Vendors and Black Box Designs**

## Research Questions
1. Do hardware-protected cryptographic keys remain secure even when the Normal World (Android) is compromised?
2. Do compromised hardware-protected keys break the security of various protocols that rely on them?

## ARM TrustZone - Attack Model
- **Android Hardware-Backed Keystore Flow**
  - **Keymaster TA in TrustZone**
    - **Generate key**: `B = wrap(key)`
    - **Request key generation**
    - **Request attestation for B**
    - **Generate attestation cert**
    - **key = unwrap(B)**
    - **result = operation(key)**
    - **Request operation for B** (e.g., encrypt/sign)

### Context
- **Protecting cryptographic keys of applications**
- **Only the Keymaster should access key material**
- **Is it guaranteed?**

## Methodology
- **Download the firmware of the specific model**
- **Read public documentation and security certifications**
- **Reverse-engineer using Ghidra**
- **Repeat for 26 firmwares**

### How to Interact with the Keymaster?
- **Keybuster: Tool to interact with the Keymaster**
  - **Normal World**
    - **keybuster**
  - **TrustZone device drivers**
  - **Secure World**
    - **Keymaster TA**
    - **TEEGRIS kernel**
    - **Secure Monitor**
    - **SMC**
  - **Shared Memory**
    - **EL0 (Usermode)**
    - **EL1 (Kernelmode)**
    - **EL3 (SMC)**

## Key Blob Encryption
- **Keymaster TA encrypts key material inside blobs.**
- **KDF versions of key blobs**
  - `salt = SHA-256(salt_seq)`
  - `salt_seq` is one of the following sequences:
  - **MDFPP can explain the variations**

### IV Reuse Attack (v15/v20-s9)
- **The Android client can control the salt -> key reuse**
- **The Android client can control the IV -> IV reuse**
- **AES-GCM + key reuse + iv reuse -> decryption**

#### Example
- **Blob A**: Unknown key A
- **Extract IV and salt**
- **importKey Keystore API**
- **Known key B**
- **Reminder**
  - **REK = Device-unique hardware key**
  - **HDK = KDF(REK, salt)**
  - **B = AES-GCM(HDK, IV, key)**

### Bypassing Authentication and Confirmation
- **Can bypass any key usage restriction without user presence/consent**

### Downgrade Attack
- **V20-s10 has randomized salt -> no trivial key reuse**
- **Latent code allows creation of v15 blobs**
- **A privileged attacker can exploit this to force all new blobs to version v15**

## Implications
- **FIDO2 WebAuthn**
  - **Allows passwordless authentication**
  - **Authentication keys live inside a “platform authenticator”**
  - **Hard to extract the keys from the secure element or clone the platform authenticator**

### Bypassing FIDO2 WebAuthn
- **Trusted Server**
- **Android Keymaster TA in TrustZone**
- **BAUTH = wrap(Pub, Priv)**
- **Create attestation certificate chain for blob**
- **Verify certificate, associate the public key with the user**
- **Request key generation (attacker downgrades to v15 blob)**
- **Registration Request**
- **Authentication Request**
- **Generate Challenge**
- **Sign Challenge with Priv in secure hardware**
- **Verify assertion A, if successful, the user is signed-in**

## Responsible Disclosure
- **May ‘21: Reported IV reuse attack on S9 to Samsung**
- **Aug ‘21: Samsung patched Android O/P/Q devices**
  - **S9, J3 Top, J7 Top, J7 Duo, TabS4, Tab-A-S-Lite, A6 Plus, A9S**
  - **CVE-2021-25444 with High severity**
  - **Removed the option to add a custom IV from the API**
- **Jun ‘21: Samsung rejected the downgrade attack**
- **Jul ‘21: Reported the downgrade attack on S10, S20, and S21**
- **Aug ‘21: Samsung rated the downgrade attack as “very Low severity”**
- **Aug ‘21: Sent the paper**
- **Sep ‘21: Samsung reviewed and re-investigated the impact**
- **Oct ‘21: Samsung patched Android P or later, including S10/S20/S21**
  - **CVE-2021-25490 with High severity**
  - **Released a patch that completely removes the legacy key blob implementation**

## Low-Level Cryptographic Issues
- **Allowing client to set IV**
- **Allowing client to set encryption version**
- **Latent code in security-critical application**
- **Encryption version persists across “upgrades”**

### Recommendations
- **Use a unique IV / misuse resistant AEAD (AES-GCM-SIV) / Tink**
- **Disallow choice of encryption version**
- **Reduce attack surface in security-critical application**
- **Always use the latest encryption version**

## The Gap in Composability
- **Key attestation does not commit to the cryptographic method**
- **Closed vendor-specific implementation**

### Recommendations
- **Include encryption version in attestation certificate**
- **Uniform open-standard by Google for the Keymaster HAL and TA**

## Conclusions
- **Fragmented blackbox designs lead to dangerous pitfalls**
- **Open standard design**
- **No Security By Obscurity**
- **Formal analysis by independent researchers**
- **Decades of IV reuse in AES-GCM**
- **Misuse-resistant AEAD / cryptography library**

### Any questions?

**Designed using resources from Flaticon.com**