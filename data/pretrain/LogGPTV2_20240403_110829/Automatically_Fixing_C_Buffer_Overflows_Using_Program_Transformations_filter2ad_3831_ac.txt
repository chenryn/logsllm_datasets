4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
49:
50:
return
def ← deﬁnition reaching B
if def contains heap allocation then
return
def ← deﬁnition reaching B
struct ← GETSTRUCT(B)
defStruct ← deﬁnition of struct reaching B
if defStruct is in the control ﬂow path from def to B then
(cid:2) Control Flow Analysis
(cid:2) Reaching Deﬁnition
return
else if def contains heap allocation then
return MALLOC_USABLE_SIZE(B)
else if B is element access expression then
if TYPE(B) is ArrayType then
return MALLOC_USABLE_SIZE(B)
else if def is assignment then
return GETBUFFERLENGTH(RHS(def))
else if TYPE(B) is PointerType then
if ISALIASED(B) then
else if TYPE(B) is PointerType then
if ISALIASED(B) then
else if def is assignment then
return GETBUFFERLENGTH(RHS(def))
(cid:2) Type Analysis
(cid:2) Type Analysis
(cid:2) Alias Analysis
(cid:2) Type Analysis
(cid:2) Type Analysis
(cid:2) Alias Analysis
(cid:2) Reaching Deﬁnition
return SIZEOF(B)
else
else
return SIZEOF(B)
some numeric value. The size is evaluated based on the size
of the buffer, the kind of arithmetic operator, and the numeric
value (Lines 10-15). If the parameter is a preﬁx expression,
speciﬁcally an increment or decrement expression, the size of
the parameter is computed by recursively computing the size of
the buffer and making appropriate correction for the arithmetic
(Lines 16-20). If the buffer is a cast expression, the size of the
expression being cast is recursively computed (Lines 21-22).
128128128
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Most commonly, the parameter is an identiﬁer for a buffer.
If the buffer is statically allocated, the sizeof function is used
to calculate the size (Lines 24-25). If the buffer is a pointer and
it is not aliased, the deﬁnition reaching the buffer is calculated
(Lines 26-30). If a function call to malloc family is in that
deﬁnition, the buffer is heap-allocated and its size is calculated
using malloc_usable_size (Lines 31-32). For other assignment
expressions, the algorithm recursively computes the size of
the buffer on the right side of the assignment (Lines 33-34,
following similar analysis in Lines 2-4).
Calculating the size of a buffer described by a structure
element access expression is similar (Lines 35-50). The only
difference is that the algorithm checks to see if the entire
struct is redeﬁned between the most recent deﬁnition of the
element and the unsafe function call (Lines 42-45). Since
we represent a structure as an aggregate object during alias
analysis, the deﬁnition of the structure element reaching the
destination buffer may be different from the deﬁnition of
the entire structure. If the entire struct is redeﬁned, then the
element is redeﬁned as well. The algorithm will not calculate
size if this is found (Lines 45-46).
SLR replaces six unsafe functions: strcpy, strcat, sprintf,
vsprintf, memcpy, and gets. The mechanism for replacing strcpy,
strcat, sprintf, and vsprintf are similar, so they are described
together; these are applicable to Linux programs. SLR for
memcpy and gets applies to both Linux and Windows programs.
1) Replacing strcpy, strcat, sprintf, and vsprintf: We used
safe alternatives from the glib library for these functions:
g_strcpy replaces strcpy, g_strlcat replaces strcat, g_snprintf
replaces sprintf, and g_vsnprintf replaces vsprintf. The replace-
ment follows three steps:
(1) Determine the size of the buffer following Algorithm 1.
(2) Change the name of the function and add the size of the
buffer as a new parameter to the function call.
(3) Add appropriate header or provide information of the new
library at link time.
Consider
the strcat function in libpng version 1.2.6,
minigzip.c ﬁle, line 275. SLR is applied on the strcat function.
266 char outfile[MAX_NAME_LEN];
...
275 strcat(outfile, GZ_SUFFIX);
|
| (After SLR)
V
266 char outfile[MAX_NAME_LEN];
...
275 g_strlcat(outfile, GZ_SUFFIX, sizeof(outfile));
fgets has different semantics. It
includes a terminating
newline character in the data being read, if there is one; gets
never includes it. To match their semantics, a few extra lines
of code are added after the replaced function call to remove
the terminating newline character.
Consider the gets function used in a benchmark program
of the SAMATE reference dataset.
char dest[DEST_SIZE];
char *result;
result = gets(dest);
|
| (After SLR)
V
char dest[DEST_SIZE];
char *result;
result = fgets(dest, sizeof(dest), stdin);
char *check = strchr(dest, ’\n’);
if (check) {
*check = ’\0’;
}
Here, SLR determines that dest is an array by using the
type analysis. It introduces fgets as the alternative; the size is
calculated by sizeof and the stream pointer parameter is stdin.
The last four lines remove the newline character.
3) Replacing memcpy: The memcpy function is different from
the other unsafe functions because it already takes a length
parameter that speciﬁes exactly how many bytes to write to
the destination buffer. There may still be buffer overﬂow if
the length parameter speciﬁes a size larger than the size of the
destination buffer. The transformation follows three steps:
(1) Determine the size of the destination buffer (Algorithm 1).
(2) Add a check if the speciﬁed number of bytes to be copied
is larger than the size of the destination buffer. The smaller
of the two values is the number of bytes that will be
actually copied during runtime. This is introduced as a
ternary expression as the parameter to memcpy.
(3) Terminate the destination buffer with NULL.
Consider the following:
35 size_t numlen;
...
48 num = __GMP_ALLOCATE_FUNC_TYPE (numlen+1, char);
49 memcpy (num, str, numlen);
|
| (After SLR)
V
35 size_t numlen;
...
48 num = __GMP_ALLOCATE_FUNC_TYPE (numlen+1, char);
49 numlen = malloc_usable_size(num) > numlen ? numlen :
malloc_usable_size(num);
50 memcpy (num, str, numlen);
In the example, SLR analyzes the type and determines that
outfile is an array. The size of an array can be determined by
sizeof; it becomes the third parameter of the safe library func-
tion (line 275). Information about the library (-lglib-2.0)
is added to Makeﬁle, so that it is available at link time.
2) Replacing gets: gets is replaced with another standard
library function, fgets. fgets takes two additional parameters: a
length parameter and a FILE pointer to a stream to read from.
The gets function always reads from standard input, so SAFE
LIBRARY REPLACEMENT adds stdin as the stream.
In the example, from gmp v4.3.2, ﬁle mpq/set_str.c, line
49, SLR uses malloc_usable_size to calculate the length of num
because it is a pointer that was set to the result of a heap
allocation function, in this case a macro __GMP_ALLOCATE_FUNC_TYPE
(line 48). SLR adds a new assignment expression before
the memcpy that sets numlen to the length of the buffer, if the
buffer’s length is smaller than the value of numlen. The ternary
expression prevents buffer overﬂow at runtime.
The second step is one of two options. If the existing length
parameter is used in statements that are successors in control
129129129
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
ﬂow, the length parameter is explicitly assigned before the
memcpy call. This may happen when the length parameter is used
to null terminate the buffer. Otherwise, it is directly replaced
with the ternary expression.
memcpy(dst, src, length)
---Option 1: to (length is used later)--->
length = dstLength > length ? length : dstLength
memcpy(dst, src, length)
---Option 2: to (length is not used)--->
memcpy(dst, src,
dstLength > length ? length : dstLength)
C. Mechanism of Safe Type Replacement Transformation
SAFE TYPE REPLACEMENT takes a source ﬁle and a char
pointer or array selected by a user. It returns the transformed
source ﬁle, or the original ﬁle if the preconditions are not met.
We use a modiﬁed version of the stralloc data structure and
the library used in qmail [52] (Section II-B). Our implemen-
tation of STR is applicable for Linux programs, but Windows
analogs can be implemented. The library contains functions
designed to replace common C string operations and functions.
Table II lists some of these functions.
The functions do not have one-to-one correspondence with
C functions; Table II shows that some functions replace
C expressions. Our implementation contains 18 functions.
Among these are functions designed to initialize the stralloc
variable, replace increment and decrement operations of C,
ﬁnd a substring or character at a given position in the string,
and compare two strings contained by stralloc pointers. While
these functions are relatively complex, a developer applying
STR need not be concerned with the implementation as the
transformation will automatically replace unsafe code with
semantically equivalent safe code. The functions are named
such that the developer can easily identify their purpose.
To maintain similar functionality as the char pointers,
our implementation replaces the char pointers with stralloc
pointers. Consider the following code:
char *src = "one", *dst = "two;
dst = src;
In this case, after both lines of code have executed, src and
dst point to the same location in memory. In order to maintain
this condition, it is not sufﬁcient to use stralloc variables; we
need stralloc pointers.
The following code is from zlib-1.2.5, minigzip.c ﬁle,
transformed by applying STR.
300 char buf[1024];
301 char *infile;
...
319 infile = buf;
320 strcat(infile,".gz",strlen(".gz"));
|
| (After STR)
V
300 stralloc *buf, *infile;
301 stralloc ssss_buf = {0,0,0}, ssss_infile = {0,0,0};
302 buf = &ssss_buf;
303 buf->a = 1024;
304 infile = &ssss_infile;
...
322 infile = buf;
323 stralloc_catbuf(infile,".gz",strlen(".gz"));
Two replacement patterns are demonstrated by this example.
The ﬁrst pattern is the assignment of one char pointer to another
(Line 319 of original code). The new stralloc pointers should
point to the same location in memory, so no change is needed
(Line 321 of transformed code). Line 322 of transformed code
shows a replacement pattern involving the strcat function (Line
320 of original). In this case, the function is simply replaced
with a stralloc_catbuf function from the stralloc library.
For user deﬁned functions, the stralloc library does not
have analogs. In order to continue the transformation, we
perform an inter-procedural analysis when a char pointer is
used as an argument in a call to a user-deﬁned function. It
determines, at the call site, if the function call modiﬁes the char
pointer. In such a case, the transformation is not completed.
The analysis is conservative; it may determine that a pointer
is modiﬁed even when it is not. However, it is necessary to
ensure that the transformation is safe and it does not change
behavior. Empirical results in Section IV-B show that even
with the conservative analysis, we were able to successfully
transform over 80% of char pointers in real code.
The analysis is performed inter-procedurally, but the mod-
iﬁcation is limited to the function that contained the char
pointer. This is to make the transformation usable. If the