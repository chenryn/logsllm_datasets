feature usage. We therefore, as a simplifying assumption,
treat the Alexa 10k as representative of the web in general.
ever, as Figure 5 indicates, some standards have become
extremely popular over time, while others, both recent and
old, have languished in disuse. Furthermore, it appears that
some standards have been introduced extremely recently but
have nevertheless been readily adopted by web authors.
Old, Popular Standards. For example, point AJAX depicts
the XMLHttpRequest [58], or AJAX standard, used to send
information to a server without fetching the entire document
again. This standard has been available in the browser for
almost as long as Firefox has been released (since 2004), and
is extremely popular; the standard’s most popular feature,
XMLHttpRequest.prototype.open, is used by 7,955 sites in
the Alexa 10k. Standards in this portion of the graph have
been in the browser for a long time, and appear on a large
fraction of sites. This cluster of standards have block rates
of less than 50%, considered low in this study.
Old, Unpopular Standards. Other standards, despite existing
in the browser nearly since Firefox’s inception, are much
less popular on the web. Point H-P shows the HTML:
Plugins [22] standard, a subsection of the larger HTML stan-
dard that allows document authors to detect the names
and capabilities of plugins installed in the browser (such
as Flash, Shockwave, Silverlight, etc.). The most popular
features of this standard have been available in Firefox since
2005. However, the standard’s most popular feature, Plug-
inArray.prototype.refresh, which checks for changes in
browser plugins, is used on less than 1% of current websites
(90 sites).
New, Popular Standards. Point SEL depicts the Selectors
API Level 1 [59] standard, which provides site authors with
a simpliﬁed interface for selecting elements in a document.
Despite being a relatively recent addition to the browser
(the standard was added in 2013), the most popular feature
in the standard–Document.prototype.querySelectorAll–is
used on over 80% of websites. This standard, and other
standards in this area of the graph, have low block rates.
New, Unpopular Standards. Point V shows the Vibration [30]
standard, which allows site authors to trigger a vibration in
the user’s device on platforms that support it. Despite this
standard having been available in Firefox longer than the
previously mentioned Selectors API Level 1 standard, the Vi-
bration standard is signiﬁcantly less popular on the web. The
sole method in the standard, Navigator.prototype.vibrate,
is used only once in the Alexa 10k.
Figure 5: Comparison of a standard’s availability date, and
its popularity.
5.5 Standard Blocking
5.4 Standard Popularity By Introduction Date
We also measured the relationship between when a stan-
dard became available in the browser, its popularity, and
how frequently its execution is prevented by popular blocking
extensions.
As the graph shows, there is no simple relationship between
when a standard was added to the browser, how frequently
the standard is used on the web, and how frequently the
standard is blocked by common blocking extensions. How-
Many users alter their browsing environment when visit-
ing websites. They do so for a variety of reasons, including
wishing to limit advertising displayed on the pages they read,
reducing their exposure to malware distributed through ad-
vertising networks, and increasing their privacy by reducing
the amount of tracking they experience online. These browser
modiﬁcations are typically made by installing browser exten-
sions.
We measured the eﬀect of installing two common browser
extensions, AdBlock Plus and Ghostery, on the type and
number of features that are executed when visiting websites.
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●AJAXH−PSLCV0250050007500200620082010201220142016Standard introduction dateSites using standard●●block rate < 33%33% < block rate < 66%66% < block rate1035.5.1 Popularity vs. Blocking
Ad and tracking blocking extensions do not block the use
of all standards equally; some standards are blocked far
more of often that others. Figure 6 depicts the relationship
between a standard’s popularity (represented by the number
of sites the standard was used on, log scale) and its block rate.
Since a standard’s popularity is the number of sites where a
feature in a standard is used at least once, the popularity of
the standard is equal to at least the popularity of the most
popular feature in the standard.
Each quadrant of the graph tells a diﬀerent story about
the popularity and the block rate of a standard on the web.
Popular, Unblocked Standards. The upper-left quadrant
contains the standards that occur very frequently on the web,
and are rarely blocked by advertising and tracking blocking
extensions.
One example, point CSS-OM, depicts the CSS Object
Model [43] standard, which allows JavaScript code to intro-
spect, modify and add to the styling rules in the document.
It is positioned near the top of the graph because 8,193 sites
used a feature from the standard at least once during mea-
surement. The standard is positioned to the left of the graph
because the standard has a low block rate (12.6%), meaning
that the addition of blocking extensions had relatively lit-
tle eﬀect on how frequently sites used any feature from the
standard.
Popular, Blocked Standards. The upper-right quadrant of
the graph shows standards that are used by a large percentage
of sites on the web, but which blocking extensions frequently
prevent from executing.
A representative example of such a standard is the HTML:
Channel Messaging [21] standard, represented by point H-
CM. This standard contains JavaScript methods allowing
embedded documents (iframes) and windows to commu-
nicate with their parent document. This functionality is
often used by embedded-content and pop-up windows to
communicate with the hosting page, often in the context of
advertising. This standard is used on over half of all sites by
default, but is prevented from being executed over 77% of
the time in the presence of blocking extensions.
Unpopular, Blocked Standards. The lower-right quadrant of
the graph shows standards that are rarely used by websites,
and that are almost always prevented from executing by
blocking extensions.
Point ALS shows the Ambient Light Events standard [55],
which deﬁnes events and methods allowing a website to react
to changes to the level of light the computer, laptop or mobile
phone is exposed to. The standard is rarely used on the web
(14 out of 10k sites), but is prevented from being executed
100% of the time by blocking extensions.
Unpopular, Unblocked Standards. The lower-left quadrant
of the graph shows standards that were rarely seen in our
study, and were rarely prevented from executing. Point E
shows the Encodings [57] standard. This standard allows
JavaScript code to read and convert text between diﬀerent
text encodings, such as reading text from a document encoded
in GBK and inserting it into a website encoded in UTF-8.
The Encodings [57] standard is rarely used on the web, with
only 1 of the Alexa 10k sites attempting to use it. However,
the addition of an advertising or tracking blocking extension
had no aﬀect on the number of times the standard was used;
this sole site still used the Encodings standard when AdBlock
Plus and Ghostery were installed.
5.5.2 Blocking Frequency
As discussed in 5.5.1, blocking extensions do not block
all browser standard usage equally. As Figure 6 shows,
some standards are greatly impacted by installing these
advertising and tracking blocking extensions, while others
are not impacted at all.
For example, the Beacon [20] standard, which allows web-
sites to trigger functionality when a user leaves a page, has
a 83.6% reduction in usage when browsing with blocking
extensions. Similarly, the SVG standard, which includes
functionality that allows for ﬁngerprinting users through font
enumeration2, sees a similar 86.8% reduction in site usage
when browsing with blocking extensions.
Other browser standards, such as the core DOM stan-
dards, see little reduction in use in the presence of blocking
extensions.
5.5.3 Blocking Purpose
In addition to measuring which standards were blocked
by extensions, we also distinguished which extension did
the blocking. Figure 7 plots standards’ block rates in the
presence of an advertising blocking extension (x-axis), versus
standards’ block rates when a tracking-blocking extension is
installed (y-axis).
Points on the x=y line in the graph are standards that
were blocked equally in the two cases, with points closer to
the upper-right corner being blocked more often (in general),
and points closer to the lower-left corner being blocked less
often (in general).
Points in the upper-left depict standards that were blocked
more frequently by the tracking-blocking extension than the
advertising-blocking extension, while points in the lower-right
show standards that were blocked more frequently by the
advertising-blocking extension.
As the graph shows, some standards, such as WebRTC [9]
(which is associated with attacks revealing the user’s IP ad-
dress), WebCrypto API [25] (which is used by some analytics
libraries to generate identifying nonces), and Performance
Timeline Level 2 [18] (which is used to generate high resolu-
tion time stamps) are blocked by tracking-blocking extensions
more often than they are blocked by advertisement blocking
extensions.
The opposite is true, to a lesser extent, for the UI Events
Speciﬁcation [19] standard, which speciﬁes new ways that
sites can respond to user interactions.
5.6 Vulnerabilities
Just as all browser standards are not equally popular on
the web, neither are all standards equally associated with
known vulnerabilities in Firefox. The implementations of
some standards have been associated with a large number of
vulnerabilities, while others have not been associated with
any publicly known issues. Here we investigate the link
between individual browser standards and known security
vulnerabilities (in the form of ﬁled CVEs), as well as compare
these metrics with the relative popularity and block rates of
those standards.
2The SVGTextContentElement.prototype.
getComputedTextLength method
104Standard Name
Abbreviation # Features # Sites Block Rate # CVEs
H-C
HTML: Canvas
Scalable Vector Graphics 1.1 (2nd Edition)
SVG
WEBGL
WebGL
H-WW
HTML: Web Workers
HTML5
HTML 5
WEBA
Web Audio API
WRTC
WebRTC 1.0
AJAX
XMLHttpRequest
DOM
DOM
IDB
Indexed Database API
BE
Beacon
MCS
Media Capture and Streams
WCR
Web Cryptography API
CSS-VM
CSSOM View Module
F
Fetch
GP
Gamepad
HRT
High Resolution Time, Level 2
H-WS
HTML: Web Sockets
H-P
HTML: Plugins
WN
Web Notiﬁcations
RT
Resource Timing
V
Vibration API
BA
Battery Status API
CSS-CR
CSS Conditional Rules Module, Level 3
CSS-FO
CSS Font Loading Module, Level 3
CSS-OM
CSS Object Model (CSSOM)
DOM1
DOM, Level 1 - Speciﬁcation
DOM2-C
DOM, Level 2 - Core Speciﬁcation
DOM2-E
DOM, Level 2 - Events Speciﬁcation
DOM2-H
DOM, Level 2 - HTML Speciﬁcation
DOM, Level 2 - Style Speciﬁcation
DOM2-S
DOM, Level 2 - Traversal and Range Speciﬁcation DOM2-T
DOM3-C
DOM, Level 3 - Core Speciﬁcation
DOM3-X
DOM, Level 3 - XPath Speciﬁcation
DOM Parsing and Serialization
DOM-PS
EC
execCommand
FA
File API
FULL
Fullscreen API
GEO
Geolocation API
HTML: Channel Messaging
H-CM
H-WS
HTML: Web Storage
HTML
HTML
H-HI
HTML: History Interface
MSE
Media Source Extensions
Performance Timeline
PT
PT2
Performance Timeline, Level 2
SEL
Selection API
SLC
Selectors API, Level 1
Timing control for script-based animations
TC
UIE
UI Events Speciﬁcation
UTL
User Timing, Level 2
DOM4
DOM4
Non-Standard
NS
54
138
136
2
69
52
28
13
36
48
1
4
14
28
21
1
1
2
10
5
3
1
2
1
12
15
47
31
7
11