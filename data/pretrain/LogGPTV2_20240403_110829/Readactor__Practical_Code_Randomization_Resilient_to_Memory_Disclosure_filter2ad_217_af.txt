XnR [7]
HideM [27]
Readactor execute-only
Full Readactor
Prevents disclosure of:
References to other code pages
Code pages
Return addresses
Jump table pointers
C++ vtable and function pointers
Security:
ROP [58]
JIT-ROP [59]
Blind ROP [9]
Indirect JIT-ROP (Section III)
Coverage:
Static compiled code
JIT compiled code
Efﬁciency:
Avg. Runtime
Max. Runtime
Avg. Runtime
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Direct Memory Disclosure
Indirect Memory Disclosure
SPEC CPU2006
SPEC CPU2006
V8 Benchmarks
2.5%
11%
2.2%
15%
1.5%
6.5%
2.5%
8.8%
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
6.4%
26%
7.8%
Table I: Comparison of randomizing defenses against attacks combining memory disclosure and ROP such as JIT-ROP. Readactor
offers best-in-class security and is the only mechanism that covers both statically and dynamically compiled code.
can be repeated until the disclosed code base is large enough
to perform a JIT-ROP attack. In Readactor, such an attack is
not possible by design, because code pages are always execute-
only. Further, it remains unclear how well XnR can protect
against indirect memory disclosure. First, it only assumes a code
randomization scheme without implementing and evaluating
one. Second, as we have discussed in detail in Section V,
defending against indirect code disclosure with randomization
alone (i.e., without code-pointer hiding) requires XnR to use a
very ﬁne-grained and unpractical code randomization scheme.
Moreover, in contrast to XnR, we evaluate Readactor against
complex software such as the Google Chromium web-browser
and also extend our protections to JIT-compiled code.
HideM by Gionta et al. [27] also implements execute-only
pages. Rather than supporting execute-only pages by unmapping
code pages when they are not actively executing, HideM uses
split translation lookaside buffers (TLBs) to direct instruction
fetches and data reads to different physical memory locations.
HideM allows instruction fetches of code but prevents data
accesses except whitelisted reads of embedded constants. This is
the same technique PaX [51] used to implement W⊕X memory
before processors supported RX memory natively. However,
the split TLB technique does not work on recent x86 hardware
because most processors released after 2008 contain uniﬁed
second-level TLBs.
Giuffrida et al. [28] evaluated a comprehensive, compiler-
based software diversiﬁer that allows live re-randomization
of a micro-kernel. Frequent re-randomization may render
any knowledge gleaned through memory disclosure useless.
However, the entire JIT-ROP attack can run in as little as 2.3
seconds while re-randomization at 2 second intervals add an
overhead of about 20%. Moreover, it remains unknown how
well this approach scales to complex applications containing
JIT compilers and modern operating systems with monolithic
kernels.
Whereas Oxymoron, XnR, and HideM seek to hide the
code layout, Opaque CFI (O-CFI) [44] is designed to tolerate
certain kinds of memory disclosure. Similar to Readactor, O-
CFI combines code randomization and integrity checks. It
tolerates code layout disclosure by bounding the target of
each indirect control ﬂow transfer. Since the code layout is
randomized at load time, the bounds for each indirect jump are
randomized too. The bounds are stored in a small table which is
protected from disclosure using x86 segmentation. O-CFI uses
binary rewriting and stores two copies of the program code in
memory to detect disassembly errors. Hence, it requires more
program memory than Readactor. In contrast, the trampolines
added by Readactor require very little extra memory. Apart from
the fact that O-CFI requires precise binary static analysis as it
aims to statically resolve return addresses, indirect jumps, and
calls, the adversary may be able to disassemble the code, and
reconstruct (parts of) the control-ﬂow graph at runtime. Hence,
the adversary could dynamically disclose how the control-ﬂow
is bounded.
Davi et al. [21] also propose a defense mechanism, Iso-
meron, that tolerates full disclosure of the code layout. To
do so, Isomeron keeps two isomers (clones) of all functions
in memory; one isomer retains the original program layout
while the other is diversiﬁed. On each function call, Isomeron
randomly determines whether the return instruction should
switch execution to the other isomer or keep executing code
in the current isomer. Upon each function return, the result
of the random trial is retrieved, and if a decision to switch
was made, an offset (the distance between the calling function
f and its isomer f(cid:2)) is added to the return address. Since
the attacker does not know which return addresses will have
an offset added and which will not, return addresses injected
during a ROP attack will no longer be used as is and instead,
the ROP attack becomes unreliable due to the possible addition
of offsets to the injected gadget addresses. Since Isomeron is
implemented as dynamic binary instrumentation framework its
runtime and memory overheads are substantially greater than
those of Readactor.
Lastly, our work is related to a randomization approach
speciﬁcally targeting JIT-compiled code called librando [33].
It deploys two randomization techniques: NOP insertion and
constant blinding. In fact, as we mentioned before, Readactor
can beneﬁt from librando to enforce code randomization on
776
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:24 UTC from IEEE Xplore.  Restrictions apply. 
JIT-code beyond the coarse-grained randomization offered by
the Google V8 engine. However, librando only targets JIT-code
and not static code. Further, it provides no protection against
direct disclosure attacks, and may slow down code by as much
as 3.5x.
these approaches do not protect against attacks that use ret-
terminated gadgets. Moreover, as no code randomization is
applied, the adversary can easily invoke critical functions
in complex programs that are also legitimately used by the
program.
B. Integrity-checking Defenses
After DEP, Control-ﬂow integrity (CFI) [1, 3] is the most
prominent type of integrity-based defense. CFI constrains the
indirect branches in a binary such that they can only reach a
statically identiﬁed set of targets. Since CFI does not rely on
randomization, it cannot be bypassed using memory disclosure
attacks. However, it turns out that precise enforcement of
control-ﬂow properties invariably comes at the price of high
performance overheads on commodity hardware. In addition,
it is challenging (if not impossible) to always resolve valid
branch addresses for indirect jumps and calls.
As a result, researchers have traded off security for perfor-
mance by relaxing the precision of the integrity checks. CFI
for COTS binaries [69] relies on static binary rewriting to
identify all potential targets for indirect branches (including
returns) and instruments all branches to go through a validation
routine. CFI for COTS binaries merely ensures that branch
targets are either call-preceded or target an address-taken basic
block. Similar policies are enforced by Microsoft’s security
tool called EMET [42], which builds upon ROPGuard [25].
Compact control-ﬂow integrity and randomization (CCFIR)
is another coarse-grained CFI approach based on static binary
rewriting. CCFIR collects all indirect branch targets into a
springboard section and ensures that all indirect branches target
a springboard entry. Our code-pointer hiding technique has
similarities with the use of trampolines in CCFIR but the
purposes differ. The springboard is part of the CFI enforcement
mechanism whereas our trampolines are used to prevent indirect
memory closure. Although the layout of springboard entries
is randomized to prevent traditional ROP attacks, CCFIR does
not include countermeasures against JIT-ROP.
A number of approaches have near-zero overheads because
they use existing hardware features to constrain the control-
ﬂow before potentially dangerous system calls. In particular,
x86 processors contain a last branch record (LBR) register
which kBouncer [50], and ROPecker [17] use to inspect a
small window of recently executed indirect branches.
Since CFI does not randomize the code layout, attackers
can inspect the code layout ahead of time and carefully choose
gadgets that adhere to a coarse-grained CFI policy [13, 29, 30].
SafeDispatch [36] and forward-edge CFI [63] are two
compiler-based implementations of ﬁne-grained forward CFI,
which is CFI applied to indirect calls. The former prevents
virtual table hijacking by instrumenting all virtual method call
sites to check that the target is a valid method for the calling
object. It offers low runtime overhead (2.1%) but only protects
virtual method calls. Forward CFI is a set of similar techniques
which protect both virtual method calls and calls through
function pointers. It maintains tables to store trusted code
pointers and halt program execution whenever the target of an
indirect branch is not found in one of these tables. Even though
both techniques add only minimal performance overhead,
A number of recent CFI approaches focus on analyz-
ing and protecting vtables in binaries created from C++
code [26, 52, 68]. Although these approaches do not require
source code access, the CFI policy is not as ﬁne-grained as their
compiler-based counterparts. A novel attack technique for C++
applications, counterfeit object-oriented programming (COOP),
undermines the protection of these binary instrumentation-
based defenses by invoking a chain of virtual methods through
legitimate call sites to induce malicious program behavior [56].
Code-Pointer Integrity (CPI) was identiﬁed as an alternative
to CFI by Szekeres et al. [62] and was ﬁrst implemented
by Kuznetsov et al. [39]. CPI prevents the ﬁrst step of control-
ﬂow hijacking during which the adversary overwrites a code
pointer. In contrast, CFI veriﬁes code pointers after they may
have been overwritten. CPI protects control data such as code
pointers, pointers to code pointers, etc. by separating them from
non-sensitive data. The results of a static analysis are used to
partition the memory space into a normal area and a safe region.
Code pointers and other sensitive control data are stored in the
safe region. The safe region also includes meta-data such as
the sizes of buffers. Loads and stores that may affect sensitive
control data are instrumented and checked using meta-data
stored in the safe region. By ensuring that accesses to potentially
dangerous objects, e.g., buffers, cannot overwrite control data,
CPI provides spatial safety for code pointers. In 32-bit mode,
CPI uses x86 segmentation to restrict access to the safe region,
the same is not possible in 64-bit mode so the safe region is
merely hidden from attackers whenever segmentation is not
fully supported. Evans et al. [23] demonstrated that (in 64-bit
mode) the size of the safe region is (in some implementations)
so large that an attacker can use a corrupted data pointer to
locate it and thereby bypass the CPI enforcement mechanism
using an extension of the side-channel attack by Siebert et
al. [57]. Unlike our approach, it remains to be seen whether
CPI can be extended to protect dynamically generated code
without degrading the JIT compilation latency and performance.
Recently, a new CFI solution has been proposed by Niu
and Tan that also applies CFI to JIT-compiled code [46]. Their
RockJIT framework enforces ﬁne-grained CFI policies for
static code and coarse-grained CFI policies for JIT-compiled
code. Similarly to how we double-map physical host pages
in the guest physical space, RockJIT maps the physical pages
containing JIT-compiled code twice in virtual memory: once as
readable and executable, and once as a readable and writable
for the JIT compiler to modify—a shadow code heap accessible
only to the JIT. This protects JIT-compiled code from code
injection and tampering attacks, in addition to the protections
provided by CFI enforcement. However, since only coarse-
grained CFI is applied, the adversary can still leverage memory
disclosure attacks to identify valid gadgets in JIT-compiled
code and redirect execution to critical call sites in static code
(i.e., calls that legitimately invoke a dangerous API function
or a system call) to induce malicious program behavior.
777
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:24 UTC from IEEE Xplore.  Restrictions apply. 
XII. CONCLUSION
Numerous papers demonstrate that code randomization
is a practical and efﬁcient mitigation against code-reuse
attacks. However, memory leakage poses a threat to all these
probabilistic defenses. Without resistance to such leaks, code
randomization loses much of its appeal. This motivates our
efforts to construct a code randomization defense that is not
only practical but also resilient to all recent bypasses.
We built a fully-ﬂedged prototype system, Readactor, to
prevent attackers from disclosing the code layout directly by
reading code pages and indirectly by harvesting code pointers
from the data areas of a program. We prevent direct disclosure
by implementing hardware-enforced execute-only memory and
prevent indirect disclosure through code-pointer hiding.
Our careful and detailed evaluation veriﬁes the security
properties of our approach and shows that it scales beyond
simple benchmarks to complex, real-world software such as
Google’s Chromium web browser and its V8 JavaScript engine.
Compared to prior JIT-ROP mitigations, Readactor provides
comprehensive and efﬁcient protection against direct disclosure,
is the ﬁrst defense to address indirect disclosure, and is also the
ﬁrst technique to provide uniform protection for both statically
and dynamically compiled code.
We hope that forthcoming defenses will focus on countering
return-into-libc and future variants of code reuse by building on
our foundation of memory-leakage resilient software diversity.
ACKNOWLEDGMENT
The authors thank the anonymous reviewers, Mathias
Payer, Robert Turner, and Mark Murphy for their detailed
and constructive feedback.
This material is based upon work partially supported by the
Defense Advanced Research Projects Agency (DARPA) under
contracts D11PC20024 and N660001-1-2-4014 and by gifts
from Oracle and Mozilla.
Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the authors and
do not necessarily reﬂect the views of the Defense Advanced
Research Projects Agency (DARPA), its Contracting Agents,
the National Science Foundation, or any other agency of the
U.S. Government.
This work has been co-funded by the German Science
Foundation as part of project S2 within the CRC 1119
CROSSING and the European Union’s Seventh Framework
Programme under grant agreement No. 609611, PRACTICE
project.
REFERENCES
[1] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-ﬂow integrity.
In ACM SIGSAC Conference on Computer and Communications Security,
CCS, 2005.
[2] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. A theory of secure
control ﬂow. In 7th International Conference on Formal Engineering
Methods, ICFEM, 2005.
[3] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-ﬂow integrity
principles, implementations, and applications. ACM Transactions on
Information System Security, 13, 2009.
[4] AMD. Intel 64 and IA-32 architectures software developer’s manual -
Chapter 15 Secure Virtual Machine nested paging.
http://developer.amd.com/resources/documentation-articles/developer-
guides-manuals, 2012.
[5] J. Ansel, P. Marchenko, Ú. Erlingsson, E. Taylor, B. Chen, D. L. Schuff,