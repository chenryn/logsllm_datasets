as [3, 5, 8, 9, 13, 15, 24, 25, 27, 35, 42] achieved security with honest
majority, and this is the setting we use in this paper.
While recent works [8, 19] achieve security virtually without
additional cost to semi-honest secure protocols, they do not seem
ready for practical applications. There are solutions for MPC which
are secure against any number of malicious parties, such as SPDZ [17,
1This circuit is of linear depth. We discuss later how to reduce the depth of circuits to
log 𝑛 at the cost of increasing the number of gates to 𝑂(𝑛 log 𝑛).
29, 30] and TinyOT [32]. These solutions have a fast online compu-
tation but a long preprocessing phase, and their total throughput is
worse than in the honest majority setting.
Generic MPC constructions are typically based on representing
the computed function as a circuit. Therefore, the main obstacle
with using generic MPC for computing on graphs, is that the wiring
of the circuit cannot follow the graph topology, in order to keep
the topology secret. It is therefore challenging to pass information
between connected nodes.
Secure sort. In the GraphSC work [44] sorting was imple-
1.4.2
mented using the Bitonic sort sorting network [31] with 𝑂(𝑚𝑛 log2 𝑛)
gates, where 𝑛 is the number of items and 𝑚 is the bit-length of each
item. Secure sorting can be implemented with only 𝑂(𝑚𝑛 log 𝑛)
gates, albeit with a practically large constant, by using the AKS
sorting network [1]. Randomized Shellsort [22] is a randomized
and data-independent sorting algorithm that can be implemented
with 𝑂(𝑚𝑛 log 𝑛) gates, and ZigZag sort is a determinstic data-
independent sorting algorithm with only 𝑂(𝑚𝑛 log 𝑛) gates (and a
small constant) but a large depth of 𝑂(𝑛 log 𝑛) [23].
Zhang proposed several data-oblivious sorting algorithms [53],
including bead-sort and counting-sort which use 𝑂(𝑅𝑛) compar-
isons, where 𝑅 is the range of input values. A very efficient secure
sorting protocol, based on radix sort, was presented in [14]. This
protocol is implemented in the same setting as our protocol (3
servers, honest majority), but is only secure against semi-honest
behavior.
Our secure sort protocol is based on ideas of Hamada et al. [26]
and Laur et al.[33], where the input elements are randomly shuffled,
and then a comparison-based sorting protocol is applied to the
shuffled input.
1.4.3 MPC for graph analysis. As we discussed earlier, GraphSC
[44] has initiated the work on MPC for secure analysis of graph
data, with a focus on parallel and secure computation, and semi-
honest security. Its implementation was in Java in the two-party
setting. The recent work of Mazloom et al. [41] uses a modern secure
four-party computation protocol. The gain in performance comes
from two main sources: (1) the increase in the number of parties
which is essentially a stronger trust assumption that enables more
efficient MPC, and (2) leaking data about the degrees of nodes while
guaranteeing differential privacy between neighboring graphs (two
graphs which have the same sets of nodes, have the same degree
in both graphs for all nodes except for one, and for that node have
degrees which differ by at most 1). We discuss in Appendix B the
limits of differential privacy for some graph topologies.
Enabling some leakage while guaranteeing differential privacy
enables to replace the secure sort operations with a secure shuffle.
The shuffle only leaks a histogram of the degrees of the nodes, and
therefore it is possible to add dummy edges according to a specific
distribution in order to ensure differential privacy for this data.
The implementation in [40] is in the two-party setting, while the
implementation in [41] is in the 4-party honest-majority setting,
with arithmetic circuits and full security, and scales to very large
data.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea6121.5 Our Contributions
Following is a summary of our contributions:
• Shuffling and sorting: Previous results construct efficient
shuffle protocols [33] and sorting protocols [14, 26, 33] in the
3-party setting, with semi-honest security. We present pro-
tocols which have full security against malicious behavior,
for computing a random shuffle and for computing sorting
in the 3-party setting.
In Section 5 we also present a new 3-party semi-honest shuf-
fle protocol which runs in only two rounds, rather than three
rounds (as in existing work).
• Topology-hiding computation of message-passing graph
algorithms: The GraphSC framework of [44] runs two sort
operations in each message-passing round. We improve its
performance by replacing sorting with shuffling in all but
the first round. (In our experiments shuffling is faster than
sorting by about an order of magnitude.) Our implementa-
tion is in the 3-party honest-majority setting, in which MPC
is faster than in the 2-party setting of [44] but requires a
stronger trust assumption involving three rather than two
parties.
• Implementing algorithms: We adapt to our framework an
implementation of BFS, and a modified implementation of
Luby’s probabilistic parallel algorithm for finding a maximal
independent set. This modification is more efficient for an
MPC implementation as it uses less randomness and replaces
number comparisons with OR operations.
• Implementations: We provide extremely efficient imple-
mentations of semi-honest and fully-secure shuffle, sort and
graph processing protocols in the 3-server honest-majority
setting.
2 TECHNICAL OVERVIEW
The general approach that we use can be viewed as a reduction
of graph analysis to secure computation of random shuffle, secure
computation of sorting (which is only run once), and secure com-
putation of a circuit. While in this paper we focus on using these
primitives in the 3-party honest-majority setting, and on imple-
menting the computation using binary circuits, the reduction is
general and can be used in any model, such as a 2-party setting as
in [36] or a 4-party setting with arithmetic circuits [41].
The shuffle protocol which we use implements the following
functionality: the input is an ordered set of elements of the format
(𝑢, 𝑣, 𝑑), which are shared between the servers participating in the
protocol. The output is a new random sharing of this set of ele-
ments, ordered by applying a random permutation 𝜋 to the original
order. An important property that we require is that this shuffle is
repeatable and is also reversible. Namely, that the servers can run
the protocol again on a different set of inputs, and apply to them the
same permutation 𝜋, or the reverse permutation 𝜋−1. This property
is easily achievable in the shuffle protocol that we use, since it is
composed of sequentially applying independent permutations by
each pair of the three parties (a total of three permutations). Each
party can therefore remember the permutations used by the two
pairs to which it belongs, and apply them or their inverses in future
invocations of the protocol.
The sort protocol receives a sharing of an ordered set of ele-
ments of the format (𝑢, 𝑣, 𝑑), and a definition of a field which should
be used as a key (for example, the field 𝑢). The protocol outputs a
mapping from the current order of the elements to an order which
is sorted according to this key. There is no need to generate a new
sharing of the items, or to hide the mapping which maps the origi-
nal order of the input items to the sorted order. Rather, the protocol
should only output this mapping.2
The sort protocol will use as a key either the source or the
destination fields (perhaps with some values from the 𝑑 field), and
output an ordered mapping according to the selected key. This
means that (1) the sort protocol does not need to operate on any
field except for the key, and its overhead is therefore independent
of the length of the other fields, and (2) consequently the 𝑑 field can
include values that are shared arithmetically or in another format
that is not suitable for comparisons. Although we do not use in our
instantiation a mix of binary and arithmetic sharings, this feature
can also be applied to the shuffle protocol, and then the overall
protocol can use binary sharing for keys and arithmetic sharing for
data values.
We describe in Sections 3 and 4 how to implement the shuffle
and sort primitives between three parties with an honest majority.
Shuffle instead of sort As mentioned earlier, a main contribution
of this work is that all message-passing rounds use a secure shuffle
protocol rather than a secure sort. The secure sort is only required in
an initial phase which is computed once, and its overhead therefore
does not greatly affect the overall performance. This is critical since
in our 3-party experiments secure shuffle is faster than secure sort
by about an order of magnitude (see Table 3).
2.1 The Protocol
The new protocol is composed of an initial phase and of message-
passing phases. It avoids using fresh sort operations in each round
by making use of the fact that the order of data tuples alternates
between two fixed orders (one in which the tuples are either sorted
by the source node, and one where they are sorted by the destination
node). Therefore it is sufficient to sort the tuples once by each of
these orders, and later toggle between the two using a secure shuffle.
The initial phase The initial phase of the protocol is composed
of two parts, and is depicted in Figure 1.
In the first part, the servers running the protocol compute a
random shuffle of the (𝑢, 𝑣, 𝑑) data tuples (nodes and edges together).
The result is a random sharing of this data, ordered according to
a random order which we denote as shuffle A. The servers also
compute a random shuffle of shuffle A to shuffle B. The shuffle
from the original order to shuffle A will never be repeated, but the
secure shuffles transforming shuffle A to shuffle B and backwards
will be recomputed by the servers in message-passing phases. More
accurately, given the elements ordered according to shuffle A, the
servers can compute a new random sharing of the same elements
ordered according to shuffle B, and vice versa. This is done while
keeping secret the order of the elements in shuffle A and shuffle B,
and also the transformation between the two.
2This protocol can be adapted to compute a sorted new sharing of an input set, by first
applying a random shuffle protocol to the input and then computing and applying the
mapping from the shuffled order to a sorted order.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea613The second part of the initial phase requires two secure sort
operations. No other sort operations are required in the protocol.
First, the servers apply a secure sort to shuffle A, to compute a
mapping from the order of tuples in shuffle A to an order based on
the source field of each tuple . This mapping can be made public,
since it merely maps a random permutation of the original elements
to a sorted list, and leaks no information about the relation between
the original set of input tuples and the sorted list. In a similar way,
the servers also compute a public mapping between shuffle B and
an order based on the destination field.
Figure 1: Initial phase of message-passing protocol.
Computing the message-passing phase A message-passing
round implements the scatter and gather operations. The scatter
operation requires the tuples to be sorted according to their source
field, whereas the gather operation requires them to be sorted
according to their destination field. Once the tuples are organized
in these orders, gather and scatter can be executed by an MPC
evaluating circuits implementing the corresponding computation (a
naive implementation of these circuits connects wires only between
adjacent elements; we use more efficient circuits).
The servers therefore need to move the (𝑢, 𝑣, 𝑑) tuples between
these two orders. This is done in the following way: The servers
know public mappings between the source-based order and shuf-
fle A, and between the destination-based order and shuffle B, and
therefore each server can independently apply these mappings to
its own shares. Mapping from shuffle A to shuffle B and back is
implemented by securely repeating the computation of the shuffle
between these states, as depicted in Fig. 2.
A representative algorithm – BFS The breadth-first search (BFS)
algorithm can serve as a representative case. BFS is composed
of rounds, where running it for 𝑡 rounds identifies all nodes in
distance at most 𝑡 from a source node. The algorithm is defined in
the following way: In the initial phase one source node has a value
of 1, and all other nodes have value 0 (the input can be changed
to have more than a single source node with initial value 1). In
each round, for each edge (𝑢, 𝑣), if 𝑢 has value 1 then the value of
𝑣 is also set to 1. Namely, in the scatter phase each node 𝑢 sends
its value over all outgoing edges (𝑢, 𝑣). In the gather phase, each
node 𝑣 sets its value to be the OR of its current value and the
values of all incoming edges (𝑢, 𝑣). If we open the values after 𝑡
rounds we identify all nodes in distance at most 𝑡 from the source,
without learning the actual distances. If we open the node values
after each round then we learn the sets of nodes at distance 𝑖 for
each 𝑖 = 1, . . . , 𝑡.
In Appendix E we describe how to change the scatter and gather
circuits to support other variants of this algorithm. The variants
take into account the probability of infection, and the time in which
the exposure took place (to take into account that if Alice met Bob
after Bob met Carol, there is no risk of Alice infecting Carol).
Implementing scatter and gather and reducing depth The
scatter operation assigns to each edge a value which depends on
the closest node preceding it (based on the source-based order).
Similarly, the gather operation sets to each node a value which
depends on its current value and the values of all edges which
precede it in the destination-based order. These operations must be
implemented by a circuit. It is much easier to design these circuits
if we know the location of all nodes. (This is what is done in [41],
which makes public the locations of nodes at the cost of ensuring
only differential privacy.) If node locations are indeed known, then,
for example, the scatter operation can simply copy a value from
the node to all edges which follow it in the source-based order. The
depth of that circuit is 𝑂(1).
If we do not know the location of nodes, as is the case in our pro-
tocol, then a straightforward circuit can operate on each adjacent
pair ⟨(𝑢0, 𝑣0, 𝑑0), (𝑢1, 𝑣1, 𝑑1)⟩ of elements, and update 𝑑1 based on a
value passed from the left and depends on 𝑑0, and a predicate which
depends on whether (𝑢0, 𝑣0, 𝑑0) and (𝑢1, 𝑣1, 𝑑1) represent nodes or
edges. The downside of this circuit is that its depth is linear in the
number of elements, |𝑉 |+|𝐸|. This does not affect protocols such as
Yao’s protocol, which run in a constant number of rounds.3 Circuit
depth is critical in our protocol, since we use 3-party MPC protocols
which run in a number of rounds that is equal to the depth of the
Figure 2: Message-passing round for computing scatter and
gather.
3GraphSC uses Yao’s protocol, but since that work focused on parallel execution it
demonstrated how to compute the scatter and gather operations in depth which is
logarithmic in the number of processors.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea614circuit. The effect of computing a circuit with linear depth is detri-
mental to the performance of these protocols (as we demonstrate
experimentally in Appendix A.3). We describe in Appendix D a
design of logarithmic-depth circuits for scatter and gather.
Security against malicious behavior Each of the components
of the protocol can be implemented with full security against mali-
cious behavior, and the security of the protocol follows from the
composition of these components. The scatter and gather com-
putations are based on evaluating circuits and can therefore be
implemented with full security, e.g. using the protocols of [2, 20].
We show in Section 6.2 how shuffle and sort can be implemented
with full security. The protocol also needs to verify that repeating
the shuffle protocols in different rounds always computes the same
permutations. This is ensured by a protocol described in Section 7.4.
3 TECHNIQUES FOR SECURE MPC
The security definition that we use is the standard definition used
in MPC: the computation in the real world is compared to a compu-
tation in an ideal world, where there is a trusted party. In the ideal
world, all parties send their inputs to the trusted party, which then
sends them the output of the function. Therefore all that the parties
know is their input and output. The security definition is that the
entire view of a party in the MPC execution in the real world can
be simulated given its view in the ideal world.