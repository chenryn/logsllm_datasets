x-+4 
prod  -+ 1 
sortedList -+ sort V in decreasing order of FR, ( t )  
I  t, 
where  t  is  the  response  time  requested  by  the  client.  If 
the  handler  detects  that  a  failure  has  occurred, it  updates 
its counter.  If  the frequency of timely  responses  from the 
service does not  meet  the  minimum probability  the client 
has requested  in  its QoS specification,  the handler notifies 
the client by  issuing a callback.  The client can then either 
choose to renegotiate its QoS  specification  or  issue its re- 
113 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:31 UTC from IEEE Xplore.  Restrictions apply. 
' 
requesled probability 01  timely res~onms 0.9 --+-- 
iequeafed probability of timely response8  0 0  ?$ 
requested probability 01  timely responses  0 5  ... 
120 
140 
160 
180 
200 
Client Deadline (milliseconds) 
6 -
I 
too 
I II 2 
3 
4 
5 
6 
7 
8 
Number 01  replicas 
Figure 3. Overhead of  replica selection algo- 
rithm 
Figure 4.  Comparison of  the  number of  se- 
lected replicas 
quests  to  the  service  at  a  later  time.  Note  that  when  we 
collect the  timing data as explained  above,  we  do not  re- 
quire that  the  clocks  be  synchronized  because  we  always 
measure the two end-points of a timing interval on the same 
machine. 
6. Experimental Results 
We conducted experirnents using our implementation of 
the  timing  fault  handler  in  AQUA to  analyze  the  perfor- 
mance of the selection  algorithm.  Our experimental setup 
is  composed of a set of  uniprocessor  Linux machines dis- 
tributed over a LAN. For a minimum-sized request having 
negligible service time, the minimum value we achieved for 
the response time, t, (defined in Section 5.4.2), was  about 
3.5 milliseconds.  Figure  3 shows how  the overhead of the 
selection  algorithm  varies with  the  number of  replicas for 
three different sizes of the sliding window  : 5, 10, and 20. 
These overheads include the time to compute the distribu- 
tion function and the time to select the replica subset. These 
overheads are incurred during each request. Computing the 
distribution function contributes to 90% of these overheads 
while  selecting the  replica subset  using  Algorithm  1  con- 
tributes to the remaining  10%. For our experiments below, 
we used a sliding window of size 5. 
We  also conducted experiments  to evaluate how  effec- 
tively the subset of replicas chosen by the model-based se- 
lection algorithm was able to meet a client's  deadline with 
the probability  requested by  the client.  To do this, we used 
two clients that ran on different machines and independently 
issued requests to the same service with a one second delay 
between  receiving  a response and issuing  the next request. 
The number of server replicas available for selection during 
each experiment was seven. Each server replica ran on a dif- 
ferent machine and responded with  an  integer data.  Since 
the  machines in  our  testbed  had  insignificant  background 
load on them, we simulated the load on the servers by hav- 
ing each replica respond to a request after a delay that was 
normally distributed with a mean of  100 milliseconds and a 
variance of SO milliseconds.  In  every run, each of the two 
clients issued fifty requests to the service. One of the clients 