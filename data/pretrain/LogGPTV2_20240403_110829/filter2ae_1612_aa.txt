## 0x00 前言
前段时间出现的Confluence OGNL漏洞（CVE-2021-26084）引起了我对Java
OGNL表达式注入的兴趣，当时没有时间立刻研究，近期又捡起来学习和分析，用了近半月整理了本文，如有不当之处，还请批评指正。
## 0x01 OGNL是什么？
先来看一个例子:
    Class SchoolMaster{
        String name = "wanghua";
    }
    Class School
    {
        String name = "tsinghua";
        SchoolMaster schoolMaster;
    }
    Class Student
    {
        String name = "xiaoming";
        School school;
    }
创建实例学校`school = new School()`、学生`student = new Student()`和校长`schoolMaster =
new SchoolMaster()`，将学校校长指定为`schoolMaster`实例-`school.schoolMaster =
schoolMaster`，学生的学校指定为`school`实例-`student.school =
school`，那么三者就连接起来了形成了一个对象图，对象图基本可以理解为对象之间的依赖图。通过对象图我们可以获取到对象的属性甚至对象的方法。
那么OGNL就是实现对象图导航语言，全称Object-Graph Navigation Language。通过它我们可以存取 Java对象的任意属性、调用
Java 对象的方法以及实现类型转换等。
## 0x02 OGNL三元素
OGNL基本使用方法示例：
    // 创建Student对象
    School school = new School();
    school.setName("tsinghua");
    school.setSchoolMaster(new SchoolMaster("wanghua"));
    Student student1 = new Student();
    student1.setName("xiaoming");
    student1.setSchool(school);
    Student student2 = new Student();
    student2.setName("zhangsan");
    student2.setSchool(school);
    // 创建上下文环境
    OgnlContext context = new OgnlContext();
    // 设置跟对象root
    context.setRoot(student1);
    context.put("student2", student2);
    // 获取ognl的root相关值
    Object name1 = Ognl.getValue("name", context, context.getRoot());
    Object school1 = Ognl.getValue("school.name", context, context.getRoot());
    Object schoolMaster1 = Ognl.getValue("school.schoolMaster.name", context, context.getRoot());
    System.out.println(name1 + ":学校-" + school1 + ",校长-"+schoolMaster1);
    // 获取ognl非root相关值
    Object name2 = Ognl.getValue("#student2.name", context, context.getRoot());
    Object school2 = Ognl.getValue("#student2.school.name", context, context.getRoot());
    Object schoolMaster2 = Ognl.getValue("#student2.school.schoolMaster.name", context, context.getRoot());
    System.out.println(name2 + ":学校-" + school2 + ",校长-"+schoolMaster2);
输出结果：
    xiaoming:学校-tsinghua,校长-wanghua
    zhangsan:学校-tsinghua,校长-wanghua
不难看出，OGNL getValue需要三元素：expression表达式、context上下文及root对象。那么什么是三元素：
> expression表达式：表达式是整个OGNL的核心，通过表达式来告诉OGNL需要执行什么操作；  
>  root根对象：OGNL的Root对象可以理解为OGNL的操作对象。当OGNL通过表达式规定了“干什么”以后，还需要指定对谁进行操作；  
>
> context上下文对象：context以MAP的结构、利用键值对关系来描述对象中的属性以及值，称之为OgnlContext，可以理解为对象运行的上下文环境，其实就是规定OGNL的操作在哪里。
在上面示例中，根对象是student1实例，context中设置了根对象和非根对象student2，表达式有`name`、`school.name`、`school.schoolMaster.name`和`student2.name`、`#student2.school.name`、`student2.school.schoolMaster.name`，前三个是通过表达式获取root也就是student1对象的相关属性，后三个是通过表达式获取容器变量student2对象的相关属性。
## 0x03 OGNL表达式语法
### 符号的使用：
在上一部分我们已经接触了`.`和`#`符号在表达式中的使用，通过`.`可以获取对象属性，`#`可以获取非root的Student对象。
OGNL表达式支持Java基本运算，所以运算符`+`、`-`、`*`、`/`、`%`等在OGNL都是支持的，另外还支持`in`、`eq`、`gt`等。
除了基本运算符，`.`、`@`、`#`在OGNL中都有特殊含义。
1、通过`.`获取对象的属性或方法：
    student
    student.name
    student.school
    student.school.name
    student.takingClasses("英语")
2、三种类型对象的获取：
静态对象、静态方法和静态变量：`@`
    @java.lang.System@getProperty("user.dir")
    @java.lang.Math@abs(-111)
非原生类型对象：`#`
    #student.name
    #student.takingClasses("英语")
简单对象：直接获取
    "string".lenth
    5
    true
3、`%`符号的用途是在标志的属性为字符串类型时，告诉执行环境%{}里的是OGNL表达式并计算表达式的值。
4、`$`在配置文件中引用OGNL表达式。
### 集合表达式：
`new`创建实例：
    new java.lang.String("testnew")
`{}`和`[]`的用法：
在OGNL中，可以用`{}`或者它的组合来创建列表、数组和map，`[]`可以获取下标元素。
创建list：`{value1,value2...}`
    {1,3,5}[1]
创建数组：`new type[]{value1,value2...}`
    new int[]{1,3,5}[0]
创建map：`#{key:value,key1:value1...}`
    #{"name":"xiaoming","school":"tsinghua"}["school"]
除了一些符号和集合，还支持Projection投影和Selection选择等，具体可参考官方文档： 附录Operators部分。
## 0x04 命令执行调试分析
通过上面表达式的学习我们很容易能够写出Java执行命令的表达式：
    @java.lang.Runtime@getRuntime().exec("calc")
    (new java.lang.ProcessBuilder(new java.lang.String[]{"calc"})).start()
### Ognl低版本：2.7.3测试
调试分析`Ognl.getValue("@java.lang.Runtime@getRuntime().exec(\"calc\")", context,
context.getRoot());`执行流程。下图是表达式对应的语法树（AST），下面的分析可以结合图片思考。  
Ognl.getValue()处理表达式时，会先生成一个tree，这个tree本质是SimpleNode实例，树的每个节点都是一个ASTChain实例，ASTChain继承自SimpleNode。  
当调用`node.getValue(ognlContext,
root);`时，会调用`SimpleNode.getValue()`进行处理，`SimpleNode.getValue()`会通过`SimpleNode.evaluateGetValueBody()`计算结果
    public final Object getValue(OgnlContext context, Object source) throws OgnlException {
        Object result = null;
        if (context.getTraceEvaluations()) {
            ...
        } else {
            result = this.evaluateGetValueBody(context, source);
        }
        return result;
    }
`SimpleNode.evaluateGetValueBody()`在计算非常量情况的结果时会调用子类的getValueBody，Ognl在处理节点时分为多种情况进行处理：[ASTChain](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTChain.html)、[ASTConst](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTConst.html)、[ASTCtor](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTCtor.html)、[ASTInstanceof](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTInstanceof.html)、[ASTList](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTList.html)、[ASTMethod](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTMethod.html)、[ASTStaticField](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTStaticField.html)、[ASTStaticMethod](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/ASTStaticMethod.html)等。  
首先这里最开始是一个ASTChain
`@java.lang.Runtime@getRuntime().exec("calc")`，`ASTChain.getValueBody()`在处理时，会迭代调用getValue处理子节点的结果，最终还是会调用ASTXXX方法处理节点的结果。
    protected Object getValueBody(OgnlContext context, Object source) throws OgnlException {
        Object result = source;
        int i = 0;
        // 迭代处理字子节点的结果
        for(int ilast = this._children.length - 1; i =3.1.25、Ognl>=3.2.12配置了黑名单检测，会导致上面的实验失败，提示`cannot be called from within
OGNL invokeMethod() under stricter invocation
mode`，在使用StricterInvocation模式下不允许执行`java.lang.Runtime.getRuntime()`。
对比上面2.7.3版本，在`OgnlRuntime.invokeMethod`中，添加了黑名单判断，当命中黑名单会出现上图的报错：`ClassResolver`、`MethodAccessor`、`MemberAccess`、`OgnlContext`、`Runtime`、`ClassLoader`、`ProcessBuilder`等。
    public static Object invokeMethod(Object target, Method method, Object[] argsArray) throws InvocationTargetException, IllegalAccessException {
        if (_useStricterInvocation) {