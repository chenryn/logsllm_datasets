2]
hyp
1. M(cid:48) :: Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
2 ≤ u2
2. Ψ |= u1 ≤ u(cid:48)
1 and Ψ |= u(cid:48)
3. M(cid:48) :: Σ; Ψ; E; Γ α−→ s ◦ [u(cid:48)
1, u(cid:48)
2]
4. M(cid:48) = x[M(cid:48)/x]
Case.
Ψ |= u(cid:48)
y :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2], y : s(cid:48) ◦ [u(cid:48)(cid:48)
Ψ |= u(cid:48)(cid:48)
1 ≤ u(cid:48)
2 ≤ u(cid:48)(cid:48)
1 , u(cid:48)(cid:48)
1
2
2] α−→ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2]
(Assumption)
(Premises)
(Lemma A.3 on 2 and 1)
(Deﬁnition)
hyp
35
1. y :: Σ; Ψ; E; Γ, y : s(cid:48) ◦ [u(cid:48)(cid:48)
2. y[M(cid:48)/x] = y
1, u(cid:48)(cid:48)
2] α−→ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2]
(Rule (hyp) on premises)
(Deﬁnition)
Ψ |= u(cid:48)
Case.
1
α = k, ub, ue
Ψ |= u(cid:48)
1 ≤ ub
2 ≤ u(cid:48)
Ψ |= u(cid:48)(cid:48)
1 ≤ u(cid:48)(cid:48)
y :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2], y : k(cid:48) claims r ◦ [u(cid:48)
1, u(cid:48)(cid:48)
2]
2] α−→ r ◦ [u(cid:48)(cid:48)
1, u(cid:48)
2
1. y :: Σ; Ψ; E; Γ, y : k(cid:48) claims r ◦ [u(cid:48)
2. y[M(cid:48)/x] = y
Ψ |= ue ≤ u(cid:48)
1, u(cid:48)
2] α−→ r ◦ [u(cid:48)(cid:48)
Ψ |= k(cid:48) (cid:23) k
1 , u(cid:48)(cid:48)
2]
2
claims
(Rule (claims) on premises)
(Deﬁnition)
Case.
M :: Σ; Ψ; E; (Γ, x : s ◦ [u1, u2])| k,u(cid:48)
1, u(cid:48)
2]
(pf saysI M) :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2] α−→ (k says r) ◦ [u(cid:48)
−−−−−→ r ◦ [u(cid:48)
1,u(cid:48)
2
1, u(cid:48)
2]
1. (Γ, x : s ◦ [u1, u2])| = Γ|
2. M :: Σ; Ψ; E; Γ| k,u(cid:48)
1,u(cid:48)
3. (pf saysI M) :: Σ; Ψ; E; Γ α−→ (k says r) ◦ [u(cid:48)
4. (pf saysI M)[M(cid:48)/x] = (pf saysI M)
−−−−→ r ◦ [u(cid:48)
1, u(cid:48)
2]
2
1, u(cid:48)
2]
saysI
(Deﬁnition)
(Premise and 1)
(Rule (saysI) on 2)
(x (cid:54)∈ M from 2)
M1 :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2] α−→ (k says r) ◦ [u(cid:48)
2] α−→ r(cid:48) ◦ [u(cid:48)(cid:48)
M2 :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2], y : k claims r ◦ [u(cid:48)
1 , u(cid:48)(cid:48)
2]
(pf saysE M1 ([y]M2)) :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2] α−→ r(cid:48) ◦ [u(cid:48)(cid:48)
1 , u(cid:48)(cid:48)
2]
1, u(cid:48)
1, u(cid:48)
2]
saysE
Case.
1. M1[M(cid:48)/x] :: Σ; Ψ; E; Γ α−→ (k says r) ◦ [u(cid:48)
2. M2[M(cid:48)/x] :: Σ; Ψ; E; Γ, y : k claims r ◦ [u(cid:48)
1, u(cid:48)
2]
2] α−→ r(cid:48) ◦ [u(cid:48)(cid:48)
1, u(cid:48)
1, u(cid:48)(cid:48)
2]
(i.h. on 1st premise)
3. (pf saysE (M1[M(cid:48)/x]) ([y]M2[M(cid:48)/x])) :: Σ; Ψ; E; Γ α−→ r(cid:48) ◦ [u(cid:48)(cid:48)
(i.h. on 2nd premise)
1, u(cid:48)(cid:48)
2]
(Rule (saysE) on 1 and 2)
4. (pf saysE M1 ([y]M2))[M(cid:48)/x] = pf saysE (M1[M(cid:48)/x]) ([y]M2[M(cid:48)/x]) (Deﬁnition)
Proof of (2)
Ψ |= u1 ≤ u(cid:48)
1
Case.
Ψ |= u(cid:48)
2 ≤ u2
α = k(cid:48), ub, ue
Ψ |= u1 ≤ ub
x :: Σ; Ψ; E; Γ, x : k claims s ◦ [u1, u2] α−→ s ◦ [u(cid:48)
Ψ |= ue ≤ u2
1, u(cid:48)
2]
1. M(cid:48) :: Σ; Ψ; E; Γ| k,u1,u2
2. M(cid:48) :: Σ; Ψ; E; Γ k,u1,u2
3. Ψ |= (k, u1, u2) ≥ α
−−−−→ s ◦ [u1, u2]
−−−−→ s ◦ [u1, u2]
36
Ψ |= k (cid:23) k(cid:48)
claims
(Assumption)
(Weakening on 1)
(Premises 3–5)
4. M(cid:48) :: Σ; Ψ; E; Γ α−→ s ◦ [u1, u2]
2 ≤ u2
5. Ψ |= u1 ≤ u(cid:48)
1 and Ψ |= u(cid:48)
6. M(cid:48) :: Σ; Ψ; E; Γ α−→ s ◦ [u(cid:48)
1, u(cid:48)
2]
7. x[M(cid:48)/x] = M(cid:48)
(Lemma A.1 on 2 and 3)
(Premises 1 and 2)
(Lemma A.3 on 4 and 5)
(Deﬁnition)
Case.
M :: Σ; Ψ; E; Γ|, x : k claims s ◦ [u1, u2] k(cid:48),u(cid:48)
−−−−−→ r ◦ [u(cid:48)
1,u(cid:48)
2
1, u(cid:48)
2]
(pf saysI M) :: Σ; Ψ; E; Γ, x : k claims s ◦ [u1, u2] α−→ (k(cid:48) says r) ◦ [u(cid:48)
1, u(cid:48)
2]
saysI
1. (Γ|)| = Γ|
2. M(cid:48) :: Σ; Ψ; E; (Γ|)| k,u1,u2
3. M[M(cid:48)/x] :: Σ; Ψ; E; Γ| k(cid:48),u(cid:48)
4. (pf saysI (M[M(cid:48)/x])) :: Σ; Ψ; E; Γ α−→ (k(cid:48) says r) ◦ [u(cid:48)
5. (pf saysI M)[M(cid:48)/x] = pf saysI (M[M(cid:48)/x])
−−−−→ s ◦ [u1, u2]
−−−−−→ r ◦ [u(cid:48)
1, u(cid:48)
2]
1,u(cid:48)
2
1, u(cid:48)
2]
(Deﬁnition)
(Assumption and 1)
(i.h. on premise and 2)
(Rule (saysI) on 3)
(Deﬁnition)
B Proof Veriﬁcation and Generation of Procaps
This appendix formalizes the veriﬁer for BL’s proofs that PCFS uses. Let C denote a
judgment of the form Ψ |= c (the judgment may or may not hold) and (cid:126)C denote a set
|= (cid:126)C means that for each (Ψ |= c) ∈ (cid:126)C, it is the case that Ψ |= c
of such judgments.
holds. Further let (cid:126)i denote a set of interpreted predicates. E |= (cid:126)i means that for each
i ∈ (cid:126)i, E |= i. In the following, we ﬁrst discuss a general proof veriﬁcation procedure for
BL’s proofs and then show how it is specialized to PCFS.
B.1 A General Proof Veriﬁer for BL
We construct a bidirectional proof veriﬁer for BL formalized using two veriﬁcation
judgments: M :: Σ; Ψ; E; Γ α=⇒ s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i (checking judgment), and M ::
Σ; Ψ; E; Γ α⇐= s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i (synthesis judgment). The intent of both judgments is
that if |= (cid:126)C and E(cid:48) |= (cid:126)i, then M :: Σ; Ψ; E, E(cid:48); Γ α−→ s ◦ [u1, u2] in BL’s natural deduction
system (Figures 4 and 5). However, s ◦ [u1, u2] is an input to the veriﬁcation procedure
in the checking judgment, and an output of the procedure in the synthesis judgment.
M, Σ, Ψ, E, Γ, α are inputs in both cases, whereas (cid:126)C,(cid:126)i are always outputs.
The output (cid:126)C is a non-deterministically chosen subset of the constraint judgments
on which the correctness of the proof depends. The non-determinism is deliberate; in
Section B.2 we show how the non-determinism is resolved when the veriﬁer is used in
PCFS, and use theorems from this section in that speciﬁc context. Figures 6 and 7 list
the rules for the checking judgment, whereas Figure 8 lists the rules for the synthesis
judgment. The notation (cid:126)C1 (cid:46)(cid:47) (cid:126)C2 = (cid:126)C means that (cid:126)C1 and (cid:126)C2 are a non-deterministically
chosen disjoint partition of (cid:126)C. All rules are implemented backwards: the proof term
37
M1 :: Σ; Ψ; E; Γ
α
=⇒ s1 ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
(pf conjI M1 M2) :: Σ; Ψ; E; Γ
M2 :: Σ; Ψ; E; Γ
α
=⇒ s2 ◦ [u1, u2] (cid:38) (cid:126)C2; (cid:126)i2
∧I
α
=⇒ s1 ∧ s2 ◦ [u1, u2] (cid:38) (cid:126)C1, (cid:126)C2; (cid:126)i1, (cid:126)i2
=⇒ s1 ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
α
α
=⇒ s1 ∨ s2 ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
M :: Σ; Ψ; E; Γ
(pf disjI1 M ) :: Σ; Ψ; E; Γ
M :: Σ; Ψ; E; Γ
α
=⇒ s2 ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
(pf disjI2 M ) :: Σ; Ψ; E; Γ
∨I1
∨I2
M :: Σ; Ψ; E; Γ
α⇐= s1 ∨ s2 ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
M2 :: Σ; Ψ; E; Γ, y : s2 ◦ [u1, u2]
(pf disjE M ([x]M1) ([y]M2)) :: Σ; Ψ; E; Γ
(pf topI) :: Σ; Ψ; E; Γ
α
=⇒ (cid:62) ◦ [u1, u2] (cid:38) ·; ·
(cid:62)I
α
=⇒ s1 ∨ s2 ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
M1 :: Σ; Ψ; E; Γ, x : s1 ◦ [u1, u2]
2] (cid:38) (cid:126)C3; (cid:126)i3
2] (cid:38) (cid:126)C1, (cid:126)C2, (cid:126)C3; (cid:126)i1, (cid:126)i2, (cid:126)i3
α⇐= ⊥ ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
=⇒ s(cid:48) ◦ [u(cid:48)
=⇒ s(cid:48) ◦ [u(cid:48)
=⇒ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
1, u(cid:48)
M :: Σ; Ψ; E; Γ
α
α
α
(pf botE M ) :: Σ; Ψ; E; Γ
α