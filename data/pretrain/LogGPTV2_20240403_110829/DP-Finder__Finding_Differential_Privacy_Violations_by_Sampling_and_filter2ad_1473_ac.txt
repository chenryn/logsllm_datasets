expression is true, the corresponding differentiable program evalu-
ates to a value close to 1, otherwise it evaluates to a value close to
0. For example, we transform the constraint x = 0 to the function
2
2 · x
exp(−c
), which for large enough c (we use 50) is very steep.
Similarly, we rewrite logical and (&&) to multiplication. Using these
and additional rules, DP-Finder generates a differentiable program.
1
For example, translating check
AT,{[0,0]}(x) from Fig. 4 results in
the differentiable program:
return exp(−c
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
2 · ˜y[1]2
)
y[1]==0
·(cid:124)(cid:123)(cid:122)(cid:125)&&
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
2 · ˜y[2]2
exp(−c
)
,
y[2]==0
where ˜y[1] and ˜y[2] are the differentiable functions corresponding
to y[1] and y[2] (omitted here for simplicity). We provide details in
Sec. 5.
Finally, DP-Finder feeds the resulting expression ˆϵd (x, x′, Φ) to
a numerical optimizer, which solves the problem
ˆϵd (x, x′, Φ).
arg maxx,x′,Φ
s.t. (x, x′) ∈ Neigh
For our example, DP-Finder finds the triple with x = [49.4, 49.4],
x′ = [50.4, 50.4] and Φ = {[0, 0]}, with an estimated violation of
0.05 (whose violation is larger than the violation for the initial
triple). If this triple has higher privacy violation than the recorded
one, DP-Finder updates it.
Final Step: Computing the Privacy Violation of the Returned
Triple. After completing all of its N iterations, DP-Finder returns
the triple that induced the highest (estimated) privacy violation.
However, it is possible that the estimated privacy violation for
that triple is not accurate, due to the approximations (sampling,
differentiable estimate) DP-Finder applies.
To mitigate this, DP-Finder computes the exact privacy violation
ϵ using an exact solver (PSI [16]) with the triple (x, x′, Φ) returned
by the optimizer. Note that in this case, we run the solver with
concrete inputs, not symbolic ones. If the solver does not complete
within a given timeout, DP-Finder estimates the privacy violation
using Eq. (5), with a high number of samples, yielding a guaran-
teed confidence interval. Then, it returns this triple, along with its
(estimated) privacy violation. In our evaluation, PSI never times
out.
Applications of DP-Finder. DP-Finder is a complementary ap-
proach to prior works that prove ϵ-DP of particular algorithms.
With DP-Finder, one can prove, using explicit counterexamples,
that the proved ϵ is the smallest possible. Alternatively, if DP-Finder
cannot find a triple whose violation is close to the proven bound,
this suggests that it may be possible to tighten the bound.
Another application is to use DP-Finder to find errors in ϵ-DP
proofs. For example, the generalized private threshold testing algo-
rithm was believed to be private, but follow-up work disproved it us-
ing counterexamples [9]. With DP-Finder, it is possible to come up
with new counterexamples, thereby providing a best-effort valida-
tion to new upper bounds. In fact, even without proofs, DP-Finder
can be useful for studying the privacy of algorithms. For example,
consider a (non-expert) user that tweaks a privacy algorithm and
wants to test whether the changes made have significantly affected
privacy. While DP-Finder provides no guarantees that the privacy
violation found is really the largest possible, it is the only existing
general framework that can test algorithms for differential privacy.
We also believe that DP-Finder can be used by attackers, de-
pending on the attacker model. In particular, an attacker can use
DP-Finder to find input pairs which leak a lot of information. Given
enough power, the attacker may stir the inputs towards those
that leak information. We leave the study of attacks that can use
DP-Finder to future work.
4 ESTIMATION OF PRIVACY VIOLATION
WITH CONFIDENCE
In this section, we present our approach for estimating the pri-
vacy violation ϵ (x, x′, Φ) for a given triple (x, x′, Φ). We begin by
explaining our sampling approach. Then, we explain how to deter-
mine a confidence interval for our estimate and how to reduce the
sampling effort.
4.1 Estimation of Privacy Violations
We now explain how we estimate ϵ (x, x′, Φ) as a closed-form func-
tion of (x, x′, Φ).
Recall that in Eq. (2) we defined:
′
, Φ) := log Pr [F (x ) ∈ Φ]
Pr [F (x′) ∈ Φ] .
ϵ (x, x
to estimate the probabilities Pr [F (x ) ∈ Φ] and
We want
Pr [F (x′) ∈ Φ] using sampling, yielding an estimate ˆϵ (x, x′, Φ) of
ϵ (x, x′, Φ).
Estimating Probabilities. To estimate Pr [F (x ) ∈ Φ], we sample
from a random variable S ∈ {0, 1} defined by S := checkF,Φ (x ),
meaning that S is 1 if F (x ) ∈ Φ, and 0 otherwise. Because S follows
a Bernoulli distribution, its expectation is the probability we want
to estimate:
Denoting the samples of S by S1, . . . , Sn, we estimate
E [S] = Pr [S = 1] = Pr [F (x ) ∈ Φ] .
(cid:80)n
Pr [F (x ) ∈ Φ] ≈ (cid:68)Pr [F (x ) ∈ Φ] = 1
n
i =1 Si .
Pr [F (x ) ∈ Φ] by:
F,Φ
Instead of directly sampling S,
Correlating Random Choices.
for
we first randomly sample deterministic programs checki
i = 1, . . . , n. The programs are defined by randomly sampling
values for the random variables within F from their respective
distributions. The random variables are then replaced by fixed
values to obtain each of the programs checki
. The output of
F,Φ (x ) is 1 or 0 depending on whether F (x ) produces an
checki
output in Φ, using the particular fixed randomness encoded into
checki
This allows us to correlate the outputs of checkF,Φ (x ) and
checkF,Φ (x′), by running the latter using the same fixed ran-
domness as the former, i.e., by estimating Pr [F (x′) ∈ Φ] using
checki
F,Φ
F,Φ
.
Pr [F (x′) ∈ Φ] ≈ (cid:68)Pr [F (x′) ∈ Φ] = 1
F,Φ (x′):
(cid:80)n
i =1 checki
n
F,Φ (x′).
In Sec. 4.5, we show how to leverage this correlation to reduce the
number of samples.
Estimating ϵ (x, x′, Φ). Overall, we compute the estimate
ˆϵ (x, x′, Φ) as follows:
(cid:68)Pr [F (x ) ∈ Φ]
(cid:68)Pr [F (x′) ∈ Φ] = log
(cid:80)n
(cid:80)n
i =1 checki
i =1 checki
1
n
1
n
′
ˆϵ (x, x
, Φ) = log
F,Φ (x )
F,Φ (x′)
(6)
.
F,Φ (x ) by Si, and
In the following, we often denote checki
checki
F,Φ (x′) by S′
i
.
for which the error(cid:12)(cid:12)ϵ (x, x′, Φ) − ˆϵ (x, x′, Φ)(cid:12)(cid:12) is small enough. Given
4.2 Challenge: Determining Sampling Effort
To obtain a good estimate for the privacy violation ϵ (x, x′, Φ), it is
crucial to select a suitable number of samples n. Clearly, we can ob-
tain estimates with better probabilistic guarantees by increasing the
number of samples. However, this induces a higher computational
cost in the optimization step, increasing DP-Finder’s running time.
Accordingly, we want to pick the smallest number of samples n,
a target error bound ∆ϵ that should hold with high probability, we
therefore want to select n as small as possible.
Computing Confidence Intervals for ϵ (x, x′, Φ). While com-
puting a number of samples n that achieves a specific target error
bound directly is non-trivial, it is easier to compute the error bound
∆ϵ that results from picking a specific n. Assuming we can solve the
latter, we can find an appropriate n by gradually drawing samples,
checking the resulting error bound, and increasing n (e.g., using
exponential search) while the error is too large.
In the following sections, we show three approaches to comput-
ing an error bound based on a given n. We express this bound in
terms of a confidence interval for ϵ (x, x′, Φ): we want to find ∆ϵ
such that
′
, Φ) ∈ [ˆϵ (x, x
′
, Φ) − ∆ϵ , ˆϵ (x, x
′
, Φ) + ∆ϵ ]
ϵ (x, x
with probability at least 1 − α, where α is a small constant. The
constant 1 − α is also called the confidence.
Overview of Approaches. We first show how to derive confi-
dence intervals with strong probabilistic guarantees using Hoeffd-
ing’s inequality (Sec. 4.3). This is the only approach providing
probabilistic guarantees, however, it results in confidence intervals
that are empirically larger than necessary. As a consequence, ap-
plying Hoeffding’s inequality results in a large number of samples,
especially for small probabilities, as demonstrated by Fig. 6.
F,Φ (x ) and checki
To reduce the required number of samples, we trade the guaran-
tees of the former approach against more efficiency, by estimating
the confidence interval using a heuristic inspired by the central limit
theorem (CLT, Sec. 4.4). While this already reduces the required
number of samples, it sets the stage for a drastic reduction that
we achieve by taking into account the correlation of the random
F,Φ (x′) using the multidimensional
samples checki
CLT (M-CLT, Sec. 4.5).
Fig. 6 shows the number of samples required to achieve a fixed
absolute error of ∆ϵ = 2 · 10−3 with (approximate) confidence
90%, as a function of the probability being estimated (which is the
most relevant factor influencing the required number of samples),
with each of the three presented approaches. For example, the fig-
ure shows that estimating ϵ (x, x′, Φ) to a precision of 2 · 10−3, for
Pr [F (x ) ∈ Φ] = 0.1 (i.e., 10%) and Pr [F (x′) ∈ Φ] ≈ Pr [F (x ) ∈ Φ],
requires almost 108 samples with the CLT approach. Fig. 6 demon-
strates that the M-CLT approach consistently outperforms the other
two approaches, regardless of the probability being estimated.
Combining Approaches.
DP-Finder uses the approach in
Sec. 4.5 to estimate the confidence interval, because this is the
most efficient approach. Recall that to mitigate possible impreci-
sions of ˆϵ (x, x′, Φ), DP-Finder recomputes the privacy violation
of the returned triple with a exact solver (PSI). If PSI times out,
DP-Finder can combine Sec. 4.5 with the approach in Sec. 4.3 to
get the best of both worlds: It can first use DP-Finder to search
for a triple (x, x′, Φ), using the heuristic confidence interval during
the search (empirically, this works well). To estimate the obtained
ϵ (x, x′, Φ) with strong guarantees, it can then use a higher number
of samples, such that a small confidence interval can be derived
using Hoeffding’s inequality.
4.3 Approach 1: Guaranteed Confidence
Intervals based on Hoeffding’s inequality
We can use Hoeffding’s inequality to estimate a confidence inter-
val for Pr [F (x ) ∈ Φ] and Pr [F (x′) ∈ Φ], which in turn gives us a
confidence interval for:
′
, Φ) = log Pr [F (x ) ∈ Φ]
Pr [F (x′) ∈ Φ] .
ϵ (x, x
Concretely, recall S := checkF,Φ (x ) and its expectation E [S] =
Pr [F (x ) ∈ Φ], and the samples S1, . . . , Sn are from S.
Figure 6: Number of samples needed to estimate ϵ (x, x′, Φ)
up to an error of 2 · 10−3 with empirical confidence of
90% as a function of Pr [F (x ) ∈ Φ]. Here, we assume that
Pr [F (x ) ∈ Φ] ≈ Pr [F (x′) ∈ Φ] and that the correlation coef-
ficient of checkF,Φ (x ) and checkF,Φ (x′) is ρ = 0.999.
(cid:80)n
Intuitively, Hoeffding’s inequality states that the probability that
i =1 Si and E [S] are further apart than a constant
the two values 1
n
factor is exponentially small in the number of samples n.
Theorem 4.1 (Hoeffding’s ineqality [20]). Let S be a
Bernoulli distribution, and S1, . . . , Sn ∈ {0, 1} be independent samples
from S. Let p = E [S] ∈ [0, 1] and ∆ > 0. Then,
(cid:12)(cid:12)(cid:12)(cid:12)p − 1
n
n(cid:88)
i =1
Pr
(cid:12)(cid:12)(cid:12)(cid:12) ≥ ∆
 ≤2 exp
Si
(cid:18) − 2n∆
2(cid:19)
.
Required Confidence. To compute an interval for ϵ with confi-
dence 1 − α, we apply Hoeffding’s inequality for Pr [F (x ) ∈ Φ] and
Pr [F (x′) ∈ Φ] (separately) to compute intervals with confidence
1 − α/2 for each.
Using a confidence of 1 − α/2 for both intervals allows us to
conclude that individually, each confidence interval fails to con-
tain its value (Pr [F (x ) ∈ Φ] and Pr [F (x′) ∈ Φ], respectively) with
a probability of α/2. According to the union bound, the probability
that either interval fails to contain its value is α/2 + α/2, resulting
in a confidence of 1 − α that both intervals contain their respective
value simultaneously.
Applying Hoeffding’s Inequality. To obtain an interval
dence 1 − α/2, we define ∆ as:
∆ :=
[(cid:68)Pr [F (x ) ∈ Φ] − ∆,(cid:68)Pr [F (x ) ∈ Φ] + ∆] for Pr [F (x ) ∈ Φ] with confi-
(cid:114)log(α/4)
is at most 2 exp(cid:16)−2n∆
For this choice of ∆, according to Hoeffding’s inequality, the prob-
ability that the confidence interval does not contain Pr [F (x ) ∈ Φ]
We compute the confidence interval for Pr [F (x′) ∈ Φ] analo-
= α/2.