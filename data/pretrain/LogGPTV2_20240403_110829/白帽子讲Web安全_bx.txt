18.6 小结本章介绍了安全运营的一些方法。公司安全的发展蓝图可以分为“Find andFix”、“Defend and Defer”、“Secure at the Source”三个方向，每一个方向的最终结果都需要由“安全运营”来保证。安全运营实施的好坏，将决定公司安全是否能健康地发展。只有把安全运营起来，在变化中对抗攻击，才能真正让安全成为一个持续的过程，才能走在正确的道路上。
（附）谈谈互联网企业安全的发展方向讨论范围限定在互联网公司，是为了避免和一些安全公司打口水战。我一向认为互联网公司的安全做到极致后，是不太需要购买安全软件或解决方案的，因为一个大的互联网公司发展到一定程度后，其规模和复杂程度决定了世界上没有哪一家安全公司能够提供这样的解决方案，一切都得自力更生。当然这句话也不是绝对的，一些非关键领域或者基础安全领域还是需要安全厂商的支持，比如防火墙设备、桌面安全设备、防DDOS设备等。但我今天要说的是互联网公司安全的方向。我的命题是：我们今天做了什么，做得够不够，接下来我们还需要做些什么？在过去的很长时间内，无论是漏洞挖掘者还是安全专家们，都在致力于研究各种各样的漏洞，以此为代表的是OWASP每隔几年就会公布的Top10威胁List。所以在很长一段时间内，互联网公司的安全专家们，包括安全厂商的产品专家们，都在致力于做一件事情：不管是产品还是方案，尽可能地消灭这些漏洞。因此，我把互联网公司安全的第一个目标，定义为：让工程师写出的每一行代码都是安全的！这第一个目标应该理解为互联网公司的产品安全。一个以产品（包括网站、在线服务等，在互联网公司里在线服务也被称为产品）驱动的公司，要做安全，第一件事情必然是要保证核心业务的健康发展。为了达到这个目标，微软有了SDL，基于对软件工程的改造，SDL可以帮助工程师编写出安全的代码。微软的SDL达成了“让微软的工程师写出的大部分代码都是安全的”这一目标。所以我认为SDL是伟大的创造，它在无限接近终极目标。在这个SDL中，我们就有很多东西需要去完善，也促进了相当多的衍生技术研究和技术产品。比如代码安全扫描工具的研究，仅此一项，就涉及语法分析、词法分析、数据关联、统计学等诸多问题；再比如fuzzing，则涉及各类协议或文件格式、统计学、数据处理、调试与回溯、可重用的测试环境建设等诸多复杂问题。把每一项做精，都不是件容易的事情。所以SDL是一项需要长期坚持和不断完善的工作。但是光有这个还无法100%保证不会出现安全问题，于是我定义了互联网公司安全的第二个目标：让所有已知的、未知的攻击，都能在第一时间发现，并迅速报警和追踪。这第二个目标也挺宏伟的，涉及许多IDS、IPS、蜜罐方面的研究，但光有现有的这些技术，还是远远无法完成这个目标的，因为现在已有的商业的、开源的IDS及IPS都存在着种种局限性，而互联网公司的海量数据和复杂需求，也对这些现有产品提出了严峻的挑战。只有借助大规模超强的计算能力，实施有效的数据挖掘和数据关联工作，或者建立更加立体化的模型，才能逐渐逼近这一目标。这个目标也是需要无限逼近去完成的一个宏伟目标。我目前在公司做的部分事情，就是在向着这个目标努力，所以无法在这里详谈、深谈。光前面两个目标，就不知道需要投入多少人力、时间来努力，但我还有点不满足，所以我定义了第三个目标：让安全成为公司的核心竞争力，深入到每一个产品的特性中，能够更好地引导用户使用互联网的习惯。在一开始，我们使用电脑时，是不需要安装任何杀毒软件的。但是到了今天，如果一个普通用户新买了电脑，却没有安装任何的杀毒软件或者桌面保护软件，那么大家都会担心他会不会中病毒或木马。这种需求和市场，就完全是病毒和杀毒软件厂商培养和熏陶出来的。所以在今天，很多电脑生产商甚至在电脑出厂时就会预装一个杀毒软件。前两天我去超市，看到乐事的薯片捆绑销售一盒小的番茄酱。我马上想到了肯德基和麦当劳，我不知道在它们之前是否还有别的速食品是把薯条和番茄酱配在一起销售的，但是我认为肯德基和麦当劳改变了人们吃薯条的习惯：是要蘸着番茄酱吃的。所以乐事的薯片捆绑销售番茄酱，也可以看做是被肯德基做出来的需求和市场。所以，我认为做互联网公司安全需要达成的一个目标是让安全成为深深植入产品骨髓的一个功能和特性，引导用户使用互联网的习惯，把这个需求和市场做出来。这更是一件需要长期投入和坚持的事情。我还有最后一个目标：能够观测到整个互联网安全趋势的变化，对未来一段时间内的风险做出预警。这个预警的目标也是我们部门当初草创时的目标之一，我至今还没有很好的头绪来想这些问题。但是这个目标反而是今天列举的这些目标中最容易达到的一个，因为已经有公司在做了，而且比较成功。比如McAfee和赛门铁克每隔一段时间都会有互联网威胁报告，国外一些组织比如SANS等也有类似的报告。腾讯这几年一直在做挂马检测方面的工作，所以他们也能在一定程度上预警挂马方面的趋势。由于有前人的榜样，再借助大规模的客户端或者是强力搜索引擎的海量数据，要做这件事情的路线和方法还是非常清晰的，只是要想做好，还得花上很多的时间和精力。安全技术一直是依附于技术发展的，不光是技术发展开辟了新的需要安全的领域，技术发展也能给安全技术带来更多的想象空间。比如10年前，甚至是5年前，可能我们都不需要去想手机是否需要安全这件事情。但是在今天，手机安全已经成为刻不容缓的一个战场，比如前两天报道的在澳洲传播的iPhone蠕虫，这些已经是实实在在的威胁。而手机安全反过来也促进了一些新的安全技术，比如手机认证能够起到与客户端证书类似的作用，甚至比客户端证书更进一步，因为手机不是装在电脑上的，而是放在用户的裤兜里的。类似的还有随着计算能力的提升，已经能够处理更大规模的数据，从而使得安全分析会有一些新的发展和变化，这些都是在过去不敢想象的。在互联网公司做安全一定要有想象力，同时需要紧密关注其他技术领域的发展，这样就不会止步于几种漏洞的研究，而会发现有非常多的有趣的事情正等着去做，这是一个非常宏伟的蓝图。
Table of Contents前言序言第1章 我的安全世界观1.1 Web安全简史1.1.1 中国黑客简史1.1.2 黑客技术的发展历程1.1.3 Web安全的兴起1.2 黑帽子，白帽子1.3 返璞归真，揭秘安全的本质1.4 破除迷信，没有银弹1.5 安全三要素1.6 如何实施安全评估1.6.1 资产等级划分1.6.2 威胁分析1.6.3 风险分析1.6.4 设计安全方案1.7 白帽子兵法1.7.1 Secure By Default原则1.7.1.1 黑名单、白名单1.7.1.2 最小权限原则1.7.2 纵深防御原则1.7.3 数据与代码分离原则1.7.4 不可预测性原则1.8 小结（附）谁来为漏洞买单？第2章 浏览器安全2.1 同源策略2.2 浏览器沙箱2.3 恶意网址拦截2.4 高速发展的浏览器安全2.5 小结第3章 跨站脚本攻击（XSS）3.1 XSS简介3.2 XSS攻击进阶3.2.1 初探XSS Payload3.2.2 强大的XSS Payload3.2.2.1 构造GET与POST请求3.2.2.2 XSS钓鱼3.2.2.3 识别用户浏览器3.2.2.4 识别用户安装的软件3.2.2.5 CSS History Hack3.2.2.6 获取用户的真实IP地址3.2.3 XSS 攻击平台3.2.4 终极武器：XSS Worm3.2.4.1 Samy Worm3.2.4.2 百度空间蠕虫3.2.5 调试JavaScript3.2.6 XSS构造技巧3.2.6.1 利用字符编码3.2.6.2 绕过长度限制3.2.6.3 使用标签3.2.6.4 window.name的妙用3.2.7 变废为宝：Mission Impossible3.2.7.1 Apache Expect Header XSS3.2.7.2 Anehta的回旋镖3.2.8 容易被忽视的角落：Flash XSS3.2.9 真的高枕无忧吗：JavaScript3.3 XSS的防御3.3.1 四两拨千斤：HttpOnly3.3.2 输入检查3.3.3 输出检查3.3.3.1 安全的编码函数3.3.3.2 只需一种编码吗3.3.4 正确地防御XSS3.3.5 处理富文本3.3.6 防御DOM Based XSS3.3.7 换个角度看XSS的风险3.4 小结第4章 跨站点请求伪造（CSRF）4.1 CSRF简介4.2 CSRF进阶4.2.1 浏览器的Cookie策略4.2.2 P3P头的副作用4.2.3 GET? POST?4.2.4 Flash CSRF4.2.5 CSRF Worm4.3 CSRF的防御4.3.1 验证码4.3.2 Referer Check4.3.3 Anti CSRF Token4.3.3.1 CSRF的本质4.3.3.2 Token的使用原则4.4 小结第5章 点击劫持（ClickJacking）5.1 什么是点击劫持5.2 Flash点击劫持5.3 图片覆盖攻击5.4 拖拽劫持与数据窃取5.5 ClickJacking 3.0：触屏劫持5.6 防御ClickJacking5.6.1 frame busting5.6.2 X-Frame-Options5.7 小结第6章 HTML 5安全6.1 HTML 5新标签6.1.1 新标签的XSS6.1.2 iframe的sandbox6.1.3 Link Types: noreferrer6.1.4 Canvas的妙用6.2 其他安全问题6.2.1 Cross-Origin Resource Sharing6.2.2 postMessage——跨窗口传递6.2.3 Web Storage6.3 小结第7章 注入攻击7.1 SQL注入7.1.1 盲注（Blind Injection）7.1.2 Timing Attack7.2 数据库攻击技巧7.2.1 常见的攻击技巧7.2.2 命令执行7.2.3 攻击存储过程7.2.4 编码问题7.2.5 SQL Column Truncation7.3 正确地防御SQL注入7.3.1 使用预编译语句7.3.2 使用存储过程7.3.3 检查数据类型7.3.4 使用安全函数7.4 其他注入攻击7.4.1 XML注入7.4.2 代码注入7.4.3 CRLF注入7.5 小结第8章 文件上传漏洞8.1 文件上传漏洞概述8.1.1 从FCKEditor文件上传漏洞谈起8.1.2 绕过文件上传检查功能8.2 功能还是漏洞8.2.1 Apache文件解析问题8.2.2 IIS文件解析问题8.2.3 PHP CGI路径解析问题8.2.4 利用上传文件钓鱼8.3 设计安全的文件上传功能8.4 小结第9章 认证与会话管理9.1 Who am I?9.2 密码的那些事儿9.3 多因素认证9.4 Session与认证9.5 Session Fixation攻击9.6 Session保持攻击9.7 单点登录（SSO）9.8 小结第10章 访问控制10.1 What Can I Do?10.2 垂直权限管理10.3 水平权限管理10.4 OAuth简介10.5 小结第11章 加密算法与随机数11.1 概述11.2 Stream Cipher Attack11.2.1 Reused Key Attack11.2.2 Bit-flipping Attack11.2.3 弱随机IV问题11.3 WEP破解11.4 ECB模式的缺陷11.5 Padding Oracle Attack11.6 密钥管理11.7 伪随机数问题11.7.1 弱伪随机数的麻烦11.7.2 时间真的随机吗11.7.3 破解伪随机数算法的种子11.7.4 使用安全的随机数11.8 小结（附）Understanding MD5第12章 Web框架安全12.1 MVC框架安全12.2 模板引擎与XSS防御12.3 Web框架与CSRF防御12.4 HTTP Headers管理12.5 数据持久层与SQL注入12.6 还能想到什么12.7 Web框架自身安全12.7.1 Struts 2命令执行漏洞12.7.2 Struts 2的问题补丁12.7.3 Spring MVC命令执行漏洞12.7.4 Django命令执行漏洞12.8 小结第13章 应用层拒绝服务攻击13.1 DDOS简介13.2 应用层DDOS13.2.1 CC攻击13.2.2 限制请求频率13.2.3 道高一尺，魔高一丈13.3 验证码的那些事儿13.4 防御应用层DDOS13.5 资源耗尽攻击13.5.1 Slowloris攻击13.5.2 HTTP POST DOS13.5.3 Server Limit DOS13.6 一个正则引发的血案：ReDOS13.7 小结第14章 PHP安全14.1 文件包含漏洞14.1.1 本地文件包含14.1.2 远程文件包含14.1.3 本地文件包含的利用技巧14.2 变量覆盖漏洞14.2.1 全局变量覆盖14.2.2 extract()变量覆盖14.2.3 遍历初始化变量14.2.4 import_request_variables变量覆盖14.2.5 parse_str()变量覆盖14.3 代码执行漏洞14.3.1 “危险函数”执行代码14.3.1.1 phpMyAdmin 3.4.3.1远程代码执行漏洞14.3.1.2 MyBB 1.4远程代码执行漏洞14.3.2 “文件写入”执行代码14.3.3 其他执行代码方式14.4 定制安全的PHP环境14.5 小结第15章 Web Server配置安全15.1 Apache安全15.2 Nginx安全15.3 jBoss远程命令执行15.4 Tomcat远程命令执行15.5 HTTP Parameter Pollution15.6 小结第16章 互联网业务安全16.1 产品需要什么样的安全16.1.1 互联网产品对安全的需求16.1.2 什么是好的安全方案16.2 业务逻辑安全16.2.1 永远改不掉的密码16.2.2 谁是大赢家16.2.3 瞒天过海16.2.4 关于密码取回流程16.3 账户是如何被盗的16.3.1 账户被盗的途径16.3.2 分析账户被盗的原因16.4 互联网的垃圾16.4.1 垃圾的危害16.4.2 垃圾处理16.5 关于网络钓鱼16.5.1 钓鱼网站简介16.5.2 邮件钓鱼16.5.3 钓鱼网站的防控16.5.3.1 控制钓鱼网站传播途径16.5.3.2 直接打击钓鱼网站16.5.3.3 用户教育16.5.3.4 自动化识别钓鱼网站16.5.4 网购流程钓鱼16.6 用户隐私保护16.6.1 互联网的用户隐私挑战16.6.2 如何保护用户隐私16.6.3 Do-Not-Track16.7 小结（附）麻烦的终结者第17章 安全开发流程（SDL）17.1 SDL简介17.2 敏捷SDL17.3 SDL实战经验17.4 需求分析与设计阶段17.5 开发阶段17.5.1 提供安全的函数17.5.2 代码安全审计工具17.6 测试阶段17.7 小结第18章 安全运营18.1 把安全运营起来18.2 漏洞修补流程18.3 安全监控18.4 入侵检测18.5 紧急响应流程18.6 小结（附）谈谈互联网企业安全的发展方向