Python自动化运维快速入门
1 
2 
3 Belgian Waffles
4 $5.95
5 
6 two of our famous Belgian Waffles with plenty of real maple syrup
7 
8 650
9 
10 
11 Strawberry Belgian Waffles
12 $7.95
13 
14 light Belgian waffles covered with strawberries and whipped cream
15 
16 900
17 
18 
19 Berry-Berry Belgian Waffles
20 $8.95
21 
22 light Belgian waffles covered with an assortment of fresh berries and whipped
cream
23 
24 900
25 
26 
27 French Toast
28 $4.50
29 
30 thick slices made from our homemade sourdough bread
31 
32 600
33 
34 
35 Homestyle Breakfast
36 $6.95
37 
38 two eggs, bacon or sausage, toast, and our ever-popular hash browns
39 
40 950
41 
42 
read_xml.py 内容如下：
1 #!/usr/bin/python3
2
3 import xml.sax
4
5
72
第2章 基础运维
6 class MenuHandler(xml.sax.ContentHandler):
7
8 def __init__(self):
9 self.CurrentData = ""
10 self.name = ""
11 self.price = ""
12 self.description = ""
13 self.calories = ""
14
15 # 元素开始调用
16 def startElement(self, tag, attributes):
17 self.CurrentData = tag
18 if tag == "breakfast_menu":
19 print("这是一个早餐的菜单")
20 year = attributes["year"]
21 print(f"年份 {year}\n")
22
23 # 读取字符时调用
24 def characters(self, content):
25 if self.CurrentData == "name":
26 self.name = content
27 elif self.CurrentData == "price":
28 self.price = content
29 elif self.CurrentData == "description":
30 # 如果有内容有换行，就累加字符串，输出后清空该属性
31 self.description += content
32 elif self.CurrentData == "calories":
33 self.calories = content
34 else:
35 pass
36
37 # 元素结束调用
38 def endElement(self, tag):
39 if self.CurrentData == "name":
40 print(f"name:{self.name}")
41 elif self.CurrentData == "price":
42 print(f"price:{self.price}")
43 elif self.CurrentData == "description":
44 print(f"description:{self.description}")
45 # 内容有换行时，获取字符串后清空该属性，为下一个标签准备
46 self.description = ""
47 elif self.CurrentData == "calories":
48 print(f"calories:{self.calories}")
49 else:
50 pass
51 self.CurrentData = ""
52
53
54 if __name__ == "__main__":
55 # 创建一个 XMLReader
56 parser = xml.sax.make_parser()
73
Python自动化运维快速入门
57 # 重写 ContextHandler
58 Handler = MenuHandler()
59 parser.setContentHandler(Handler)
60
61 parser.parse("example.xml")
代码说明：read_xml.py 自定义一个MenuHandler，继承自 xml.sax.ContentHandler，使用
ContentHandler 的方法来处理相应的标签。在主程序入口先获取一个 XMLReader 对象，并设
置其事件处理器为自定义的MenuHandler，最后调用parse方法来解析example.xml。运行结果
如图2.9所示。
图2.9 运行结果
SAX用事件驱动模型，通过在解析XML的过程中触发一个个的事件并调用用户定义的回
调函数来处理XML文件，一次处理一个标签，无须事先全部读取整个XML文档，处理效率
较高。其适用场景如下：
(cid:2) 对大型文件进行处理。
(cid:2) 只需要文件的部分内容，或者只须从文件中得到特定信息。
(cid:2) 想建立自己的对象模型时。
2. DOM（Document Object Model）
文件对象模型（Document Object Model，DOM）是W3C组织推荐的处理可扩展置标语言
的标准编程接口。一个 DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把
文档中的所有元素保存在内存中一个树结构里，之后可以利用 DOM 提供的不同函数来读取
或修改文档的内容和结构，也可以把修改过的内容写入xml文件。
【示例2-11】使用xml.dom.minidom解析xml文件。
74
第2章 基础运维
dom_xml.py内容如下：
1 #!/usr/bin/python3
2
3 from xml.dom.minidom import parse
4 import xml.dom.minidom
5
6 # 使用minidom解析器打开 XML 文档
7 DOMTree = xml.dom.minidom.parse("example.xml")
8 collection = DOMTree.documentElement
9 if collection.hasAttribute("year"):
10 print(f"这是一个早餐的菜单\n年份 {collection.getAttribute('year')}")
11
12 # 在集合中获取所有早餐菜单信息
13 foods = collection.getElementsByTagName("food")
14
15 # 打印每个菜单的详细信息
16 for food in foods:
17 type = food.getElementsByTagName("name")[0]
18 print("name: %s" % type.childNodes[0].data)
19 format = food.getElementsByTagName("price")[0]
20 print("price: %s" % format.childNodes[0].data)
21 rating = food.getElementsByTagName("description")[0]
22 print("description: %s" % rating.childNodes[0].data)
23 description = food.getElementsByTagName("calories")[0]
24 print("calories: %s" % description.childNodes[0].data)
代码说明：代码使用minidom解析器打开XML文档，使用getElementsByTagName方法
获取所有标签并遍历子标签，逻辑上比 SAX 要直观，运行结果如图 2.10 所示，与 SAX 运行
结果一致。
图2.10 运行结果
75
Python自动化运维快速入门
3. ElementTre
ElementTre将XML数据在内存中解析成树，通过树来操作XML。
【示例2-12】ElementTre解析XML。
ElementTre_xml.py内容如下：
1 # -*- encoding: utf-8 -*-
2 import xml.etree.ElementTree as ET
3
4 tree = ET.parse("example.xml")
5 root = tree.getroot()
6 print(f"这是一个早餐菜单\n{root.attrib['year']}")
7
8 for child in root:
9 print("name:", child[0].text)
10 print("price:", child[1].text)
11 print("description:", child[2].text)
12 print("calories:", child[3].text)
代码相当简洁，运行结果如图2.11所示。
图2.11 运行结果
2.2
系统信息监控
运维离不开对系统信息的监控，如CPU的使用率、内存的占用情况、网络、进程等相关
76
第2章 基础运维
信息都需要被监控，虽然我们可以通过操作系统提供的任务管理器或命令查看相关信息，但仍
不能简化这些日常的运维任务。如果我们通过编写程序获取以上信息，那么系统信息监控就是
一件轻松而简单的工作。
在Python中获取系统信息最便捷的模块是psutil（process and system utilities）。通过简短
的几行代码就可以获取系统相关信息，而且还是跨平台库。psutil不属于标准库，需要手动安
装。安装psutil非常简单，执行以下命令即可。
pip install psutil
如果生产环境没有联网则可以先在外网使用pip下载，再移动至生产环境安装。为了方便
显示语句运行结果，下面使用IPython解释器。在此啰嗦一下，IPython是学习Python的利器，
是让Python显得友好十倍的外套，强烈建议读者使用IPython，可通过pip install ipython安装
IPython。
下面一一列举使用方法。
【示例2-13】监控CPU信息。
In[2]: import psutil #导入psutil模拟
In[3]: psutil.cpu_times() # 获取CPU（逻辑CPU的平均）占用时间的详细信息
Out[3]: scputimes(user=44440.75, system=31407.90625000003,
idle=199354.99999999997, interrupt=1167.984375, dpc=663.15625)
In[4]: psutil.cpu_times(percpu=True) # 获取每个CPU占用时间的详细信息
Out[4]:
[scputimes(user=21201.46875, system=16264.109374999985, idle=100172.96875,
interrupt=888.203125, dpc=620.484375),
scputimes(user=23254.671875, system=15151.0625, idle=99231.75,
interrupt=280.125, dpc=43.015625)]
In[5]: psutil.cpu_count() # CPU逻辑数量
Out[5]: 2
In[6]: psutil.cpu_count(logical=False) # CPU物理数量
Out[6]: 2
In[7]: psutil.cpu_percent() #CPU占比
Out[7]: 35.0
In[8]: psutil.cpu_percent(percpu=True) #每个CPU的占比
Out[8]: [35.5, 36.0]
【示例2-14】监控内存信息。
In[11]:psutil.virtual_memory()
Out[11]: svmem(total=4196921344, available=644300800, percent=84.6,
used=3552620544, free=644300800)
这里的数值是以字节为单位显示的，如需要转成MB、GB自行转换一下即可。
【示例2-15】监控磁盘信息。
In[12]:psutil.disk_partitions()
Out[12]:
[sdiskpart(device='C:\\', mountpoint='C:\\', fstype='NTFS', opts='rw,fixed'),
77
Python自动化运维快速入门
sdiskpart(device='D:\\', mountpoint='D:\\', fstype='NTFS', opts='rw,fixed'),
sdiskpart(device='E:\\', mountpoint='E:\\', fstype='NTFS', opts='rw,fixed'),
sdiskpart(device='F:\\', mountpoint='F:\\', fstype='NTFS', opts='rw,fixed'),
sdiskpart(device='G:\\', mountpoint='G:\\', fstype='', opts='cdrom'),
sdiskpart(device='J:\\', mountpoint='J:\\', fstype='', opts='removable')]
In[13]:psutil.disk_usage('/') # 磁盘使用情况
Out[13]: sdiskusage(total=192703098880, used=124325285888, free=68377812992,
percent=64.5)
In[14]:psutil.disk_io_counters()
Out[14]: sdiskio(read_count=1374834, write_count=618746, read_bytes=57800820224,
write_bytes=32607985152, read_time=22674, write_time=3128)
【示例2-16】监控网络信息。
In[15]: psutil.net_io_counters() # 获取网络读写字节／包的个数
Out[15]: snetio(bytes_sent=97428473, bytes_recv=432067604, packets_sent=764033,
packets_recv=811013, errin=1, errout=232, dropin=1, dropout=0)
In[16]: psutil.net_if_addrs() # 获取网络接口信息
Out[16]:
{'以太网': [snic(family=, address='C8-D3-FF-DC-D2-F9',
netmask=None, broadcast=None, ptp=None),
snic(family=, address='169.254.9.109',
netmask='255.255.0.0', broadcast=None, ptp=None),
snic(family=, address='fe80::f546:b03e:6122:96d',
netmask=None, broadcast=None, ptp=None)],
'以太网 2': [snic(family=,
address='08-00-58-00-00-05', netmask=None, broadcast=None, ptp=None),
snic(family=, address='192.168.25.90',
netmask='255.255.255.0', broadcast=None, ptp=None),
snic(family=, address='fe80::b59c:a707:c281:37fa',
netmask=None, broadcast=None, ptp=None)],
'本地连接* 3': [snic(family=,
address='3E-A0-67-62-7F-91', netmask=None, broadcast=None, ptp=None),
snic(family=, address='169.254.143.17',
netmask='255.255.0.0', broadcast=None, ptp=None),
snic(family=, address='fe80::2d42:a622:9c08:8f11',
netmask=None, broadcast=None, ptp=None)],
'蓝牙网络连接': [snic(family=,
address='3C-A0-67-62-7F-92', netmask=None, broadcast=None, ptp=None),