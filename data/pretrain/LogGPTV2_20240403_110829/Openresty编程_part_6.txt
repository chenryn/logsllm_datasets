### Error Log Analysis in Nginx

If the nginx error log file contains a line with the string `[error]`, the test is deemed to have failed. Here is an example of such a failure:

```
# Failed test ‘TEST 1: simple test - pattern “[error]” should not match any line in
error.log but matches line “2016/02/01 11:59:50 [error] 1788#0: *1 lua entry
thread aborted: runtime error: content_by_lua(nginx.conf:42):2: bad”’ ….
```

This method allows for quick identification of errors by simply examining the test report.

Similar to `error_log`, this section supports Perl array values and Perl regex values through the `eval` filter.

### Grep Tests

The `error_log` and `no_error_log` sections are useful for quickly checking the presence of patterns in the NGINX error log file. However, they have limitations, such as the inability to impose constraints on the relative order of messages or their frequency.

To address these limitations, `Test::Nginx::Socket` provides an alternative using `grep_error_log` and `grep_error_log_out` sections, similar to the UNIX tool `grep`. The `grep_error_log` section specifies a pattern, and the framework scans the NGINX error log file, collecting all matching parts. This aggregated data is then compared against the expected value in the `grep_error_log_out` section.

#### Example 1: Simple Grep Test for Error Logs

```plaintext
[source,test-base]
=== TEST 1: simple grep test for error logs
--- config
location = /t {
    content_by_lua_block { 
        print("it is matched!") 
        print("it is matched!") 
        print("it is matched!") 
    }
}
--- request
GET /t
--- grep_error_log: it is matched!
--- grep_error_log_out
it is matched!
it is matched!
it is matched!
---
```

In this example, the Lua function `print()` from the `ngx_http_lua` module generates NGINX error log messages at the notice level. The test checks the number of log messages containing the string "it is matched!".

#### Example 2: Using Perl Regex in Grep Tests

```plaintext
[source,test-base]
=== TEST 1: simple grep test for error logs
--- config
location = /t {
    content_by_lua_block { 
        print("test: before sleeping…") 
        ngx.sleep(0.001) -- sleeping for 1ms 
        print("test: after sleeping…") 
    }
}
--- request
GET /t
--- grep_error_log eval: qr/test: .*?.../
--- grep_error_log_out
test: before sleeping…
test: after sleeping…
---
```

Here, a Perl regex pattern `test: .*?\.\.\.` filters out error log messages starting with "test:" and ending with "...". The test also ensures the relative order of these messages. If the order is incorrect, the test will fail with a detailed report.

### Extra Delay Before Log Checks

By default, `Test::Nginx::Socket` performs error log checks shortly after receiving the complete HTTP response. If log messages are generated after the response, the check may be too early. To handle this, use the `wait` section to introduce a delay.

#### Example: Timer-Based Log Check

```plaintext
[source,test-base]
=== TEST 1: wait for the timer
--- config
location = /t {
    content_by_lua_block { 
        local function f(premature)
            print("HERE!")
        end
        assert(ngx.timer.at(0.1, f))
    }
}
--- request
GET /t
--- error_log HERE!
--- no_error_log [error]
--- wait: 0.12
---
```

In this example, a timer is set to expire after 0.1 seconds. The `wait: 0.12` section ensures the test scaffold waits long enough for the log message to be written.

### Section Review

`Test::Nginx::Socket` offers a variety of data sections for specifying input and expected output, including NGINX configuration snippets, test requests, and expected responses. These features enhance the readability and interpretability of tests and test reports. Regularly check files like `t/servroot/conf/nginx.conf` and `t/servroot/logs/error.log` for debugging.

### Testing Error Cases

Error handling is a critical part of software development. Designing tests to cover various boundary conditions and error scenarios is essential for maximizing test coverage.

#### Expected Server Startup Errors

Sometimes, we expect the server to fail during startup, such as when using incorrect configuration instructions. Use the `must_die` section to indicate that NGINX should fail to start.

#### Example: Lua Exception in `init_by_lua_block`

```plaintext
[source,test-base]
=== TEST 1: dying in init_by_lua_block
--- http_config
init_by_lua_block { error("I am dying!") }
--- config
--- must_die
--- error_log I am dying!
---
```

If `must_die` is removed, the test will fail because NGINX will not start due to the Lua exception.

#### Expected Malformed Responses

HTTP responses should be well-formed, but sometimes they are truncated or malformed. Use the `ignore_response` section to tell the test scaffold not to check the response format.

#### Example: Truncated Response Body

```plaintext
[source,test-base]
=== TEST 1: aborting response body stream
--- config
location = /t {
    content_by_lua_block { 
        ngx.print("hello")
        ngx.flush(true)
        ngx.exit(444)
    }
}
--- request
GET /t
--- ignore_response
--- no_error_log [error]
---
```

#### Testing Timeout Errors

Timeouts are common network issues. Simulating and testing timeouts require special techniques.

##### Example: Connection Timeout

```plaintext
[source,test-base]
=== TEST 1: connect timeout
--- config
resolver 8.8.8.8;
resolver_timeout 1s;
location = /t {
    content_by_lua_block {
        local sock = ngx.socket.tcp()
        sock:settimeout(100) -- ms
        local ok, err = sock:connect("agentzh.org", 12345)
        if not ok then
            ngx.log(ngx.ERR, "failed to connect: ", err)
            return ngx.exit(500)
        end
        ngx.say("ok")
    }
}
--- request
GET /t
--- response_body_like: 500 Internal Server Error
--- error_code: 500
--- error_log failed to connect: timeout
---
```

Set a short timeout to avoid lengthy test runs. The default client timeout is 3 seconds, which can be adjusted using the `timeout` section.

```plaintext
--- timeout: 10
---
```

This approach ensures that the test suite can reliably simulate and test various timeout scenarios.