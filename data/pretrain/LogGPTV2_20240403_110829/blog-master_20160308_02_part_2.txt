语义解析，判断是否使用LDAP认证的部分：  
```  
/*    
 * Parse one tokenised line from the hba config file and store the result in a    
 * HbaLine structure, or NULL if parsing fails.    
 *    
 * The tokenised line is a List of fields, each field being a List of    
 * HbaTokens.    
 *    
 * Note: this function leaks memory when an error occurs.  Caller is expected    
 * to have set a memory context that will be reset if this function returns    
 * NULL.    
 */    
static HbaLine *    
parse_hba_line(List *line, int line_num, char *raw_line)    
{    
......    
#endif    
        else if (strcmp(token->string, "ldap") == 0)    
#ifdef USE_LDAP    
                parsedline->auth_method = uaLDAP;    
#else    
                unsupauth = "ldap";    
#endif    
......    
        /*    
         * Check if the selected authentication method has any mandatory arguments    
         * that are not set.    
         */    
        if (parsedline->auth_method == uaLDAP)    
        {    
                MANDATORY_AUTH_ARG(parsedline->ldapserver, "ldapserver", "ldap");    
                /*    
                 * LDAP can operate in two modes: either with a direct bind, using    
                 * ldapprefix and ldapsuffix, or using a search+bind, using    
                 * ldapbasedn, ldapbinddn, ldapbindpasswd and ldapsearchattribute.    
                 * Disallow mixing these parameters.    
                 */    
                if (parsedline->ldapprefix || parsedline->ldapsuffix)    
                {    
                        if (parsedline->ldapbasedn ||    
                                parsedline->ldapbinddn ||    
                                parsedline->ldapbindpasswd ||    
                                parsedline->ldapsearchattribute)    
                        {    
                                ereport(LOG,    
                                                (errcode(ERRCODE_CONFIG_FILE_ERROR),    
                                                 errmsg("cannot use ldapbasedn, ldapbinddn, ldapbindpasswd, ldapsearchattribute, or ldapurl together with ldapprefix"),    
                                                 errcontext("line %d of configuration file \"%s\"",    
                                                                        line_num, HbaFileName)));    
                                return NULL;    
                        }    
                }    
                else if (!parsedline->ldapbasedn)    
                {    
                        ereport(LOG,    
                                        (errcode(ERRCODE_CONFIG_FILE_ERROR),    
                                         errmsg("authentication method \"ldap\" requires argument \"ldapbasedn\", \"ldapprefix\", or \"ldapsuffix\" to be set"),    
                                         errcontext("line %d of configuration file \"%s\"",    
                                                                line_num, HbaFileName)));    
                        return NULL;    
                }    
        }    
......   
```  
LDAP认证方法配置的option的语义解析部分：  
```  
/*    
 * Parse one name-value pair as an authentication option into the given    
 * HbaLine.  Return true if we successfully parse the option, false if we    
 * encounter an error.    
 */    
static bool    
parse_hba_auth_opt(char *name, char *val, HbaLine *hbaline, int line_num)    
{    
......    
        else if (strcmp(name, "ldapurl") == 0)    
        {    
#ifdef LDAP_API_FEATURE_X_OPENLDAP    
                LDAPURLDesc *urldata;    
                int                     rc;    
#endif    
                REQUIRE_AUTH_OPTION(uaLDAP, "ldapurl", "ldap");    
#ifdef LDAP_API_FEATURE_X_OPENLDAP    
                rc = ldap_url_parse(val, &urldata);    
                if (rc != LDAP_SUCCESS)    
                {    
                        ereport(LOG,    
                                        (errcode(ERRCODE_CONFIG_FILE_ERROR),    
                                         errmsg("could not parse LDAP URL \"%s\": %s", val, ldap_err2string(rc))));    
                        return false;    
                }    
                if (strcmp(urldata->lud_scheme, "ldap") != 0)    
                {    
                        ereport(LOG,    
                                        (errcode(ERRCODE_CONFIG_FILE_ERROR),    
                        errmsg("unsupported LDAP URL scheme: %s", urldata->lud_scheme)));    
                        ldap_free_urldesc(urldata);    
                        return false;    
                }    
                hbaline->ldapserver = pstrdup(urldata->lud_host);    
                hbaline->ldapport = urldata->lud_port;    
                hbaline->ldapbasedn = pstrdup(urldata->lud_dn);    
                if (urldata->lud_attrs)    
                        hbaline->ldapsearchattribute = pstrdup(urldata->lud_attrs[0]);          /* only use first one */    
                hbaline->ldapscope = urldata->lud_scope;    
                if (urldata->lud_filter)    
                {    
                        ereport(LOG,    
                                        (errcode(ERRCODE_CONFIG_FILE_ERROR),    
                                         errmsg("filters not supported in LDAP URLs")));    
                        ldap_free_urldesc(urldata);    
                        return false;    
                }    
                ldap_free_urldesc(urldata);    
#else                                                   /* not OpenLDAP */    
                ereport(LOG,    
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),    
                                 errmsg("LDAP URLs not supported on this platform")));    
#endif   /* not OpenLDAP */    
        }    
        else if (strcmp(name, "ldaptls") == 0)    
        {    
                REQUIRE_AUTH_OPTION(uaLDAP, "ldaptls", "ldap");    
                if (strcmp(val, "1") == 0)    
                        hbaline->ldaptls = true;    
                else    
......   
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")