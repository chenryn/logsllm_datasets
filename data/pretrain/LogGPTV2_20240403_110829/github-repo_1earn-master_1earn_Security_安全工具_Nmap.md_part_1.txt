# Nmap
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**官网**
- https://nmap.org/
**文章 & Reference**
- [[渗透神器系列]nmap](https://thief.one/2017/05/02/1/)
- [Nmap扫描原理与用法](https://blog.csdn.net/aspirationflow/article/details/7694274)
- [Nmap 进阶使用 [ 脚本篇 ]](https://www.freebuf.com/column/149716.html)
- [Nmap在VMware NAT网络下探测主机存活误报的分析](https://www.freebuf.com/articles/terminal/199711.html)
**zenmap**
- [Zenmap](https://nmap.org/zenmap/) - 跨平台的 GUI 版 nmap bug 较多,不宜使用
**脚本**
- [smb-enum-users](https://nmap.org/nsedoc/scripts/smb-enum-users.html)
**报告模板**
- [honze-net/nmap-bootstrap-xsl](https://github.com/honze-net/nmap-bootstrap-xsl)
- [netsecli/asset](https://github.com/netsecli/asset) - NMAP 扫描网络资产自动导入到 Elasticstack 进行展示
**导图**
- Nmap 渗透测试思维导图 [png](../../../assets/img/Security/安全工具/nmap/Nmap渗透测试思维导图.png)
---
## 用法
常用 : `nmap -T4 -A -v -p- --min-rate=1000 `
TCP1 : `nmap -Pn -sS --stats-every 3m --max-scan-delay 20 -T4 -p1-65535 ip -oN `
TCP2 : `nmap -nvv -Pn -sSV -p  --version-intensity 9 -A ip -oN `
UDP : `nmap -Pn --top-ports 1000 -sU --stats-every 3m -T3 ip -oN `
组合使用(效果一般) :
```bash
ports=$(nmap -p- --min-rate=1000 -sT -T4  | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
nmap -sC -sV -p$ports -sT --min-rate=1000 
```
### 常用参数
```
-F              端口扫描
-sT             tcp 端口扫描
-sU             udp 扫描
-A              综合扫描
-O              系统扫描
-p              指定端口扫描
-T              优化时间 1-5 强度
-sV             端口对应的服务探测
-sP             发现扫描网络存活主机
-sS             半隐藏式隐蔽扫描
--iL            从主机/网络列表输入
--tr            路由跟踪模式
-P0             (无 ping)
-sP             (Ping 扫描)
-iL             读取文件作为主机/网络列表
-oN             将扫描输出到指定文件(包括报错)
-oG             将扫描结果保存到指定文件(仅结果信息)
--script=  利用脚本漏洞探测
```
**返回值**
```
| 返回状态            | 说明
| ----------------- | -----
| open               | 端口开启,数据有到达主机,有程序在端口上监控
| close              | 端口关闭,数据有到达主机,没有程序在端口上监控
| filtered           | 未到达主机,返回的结果为空,被防火墙或 IDS 过滤
| unfiltered         | 到达主机,但是不能识别端口当前状态
| open\|filtered     | 端口没有返回值,主要发生在 UDP,IP,FIN,NULL 和 Xmas 扫描
| closed\|filtered   | 只发生在 IP,ID,idle 扫描
```
**Nmap 脚本参数的规则**
```
-sC: 等价于 -script=default，使用默认类别的脚本进行扫描。
-script=: 使用某个或某类脚本进行扫描，支持通配符描述
-script-args=: 为脚本提供默认参数
-script-args-file=filename: 使用文件来为脚本提供参数
-script-trace: 显示脚本执行过程中发送与接收的数据
-script-updatedb: 更新脚本数据库
-script-help=: 显示脚本的帮助信息，其中部分可以逗号分隔的文件或脚本类别。
```
**Nmap 脚本执行格式**
```
执行单个脚本：nmap -script /path/to/script.nse
执行多个脚本：nmap -script /path/to/script.nse,/another/path/script2.nse
执行文件夹包含的所有脚本：nmap -script/path/to/folder/
```
---
### 基本操作
nmap 默认发送一个 ARP 的 PING 数据包,来探测目标主机 1-10000 范围内所开放的所有端口
`nmap `
**详细的描述输出**
`namp -vv `
**自定义扫描**
`nmap -p (range) `
**指定端口扫描**
`nmap -p (port1,port2,…) `
**ping 扫描**
`nmap -sP `
**路由跟踪**
`nmap -traceroute `
**扫描一个段**
`nmap -sP  `
**探测操作系统类型**
`nmap -0 `
**进攻性扫描**
`nmap -A `
**混合式扫描**
`nmap -vv -p1-100 -O `
**用一组 IP 地址掩盖真实地址**
`namp -D  `
**伪装 MAC 地址**
`nmap --spoof-mac  `
**指定网卡进行扫描**
`nmap -e  `
**指定源端口**
`nmap -g/--source-port  `
**扫描速度**
`nmap -T `
---
## 脚本
**脚本类型**
- auth : 与用户认证相关的 NSE 脚本
- broadcast : 使用广播收集网络信息
- brute : 暴力破解
- default : 默认,执行脚本(-sC)
- discovery : 与主机和服务发现相关的脚本
- dos : 与拒绝服务攻击有关的脚本
- exploit : 用于利用安全漏洞的脚本
- external : 此类别适用于第三方服务的脚本
- fuzzer : 专注于模糊测试的 NES 脚本