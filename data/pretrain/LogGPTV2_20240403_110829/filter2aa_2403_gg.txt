章    汇
汇编
编指
指令
令与
与屏
屏显
显字
字符
符  
82.1  EICAR 
多数反病毒软件都用EICAR进行自检。EICAR是一个可以在MS-DOS平台上运行的应用程序。它仅在
屏幕上显示“EICAR-STANDARD-ANTIVIRUS-TEST-FILE！”这样一个字符串。
①
① 请参见 https://en.wikipedia.org/wiki/EICAR_test_file。 
EICAR 最重要的特点是：它的每个字节都是可以在屏幕上显示出来的 ASCII 字符串。我们在文本编译
器里粘贴下列字符串，即可生成 EICAR 文件： 
X5O!P%@AP[4\PZX54(P^)7CC]7]$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* 
EICAR 文件的汇编指令如下： 
; initial conditions: SP=0FFFEh, SS:[SP]=0 
0100 58               pop      ax 
; AX=0, SP=0 
0101 35 4F 21        xor      ax, 214Fh 
; AX = 214Fh and SP = 0 
0104 50               push      ax 
; AX = 214Fh, SP = FFFEh and SS:[FFFE] = 214Fh 
0105 25 40 41        and       ax, 4140h 
; AX = 140h, SP = FFFEh and SS:[FFFE] = 214Fh 
0108 50               push      ax 
; AX = 140h, SP = FFFCh, SS:[FFFC] = 140h and SS:[FFFE] = 214Fh 
0109 5B               pop        bx 
; AX = 140h, BX = 140h, SP = FFFEh and SS:[FFFE] = 214Fh 
010A 34 5C           xor        al, 5Ch 
; AX = 11Ch, BX = 140h, SP = FFFEh and SS:[FFFE] = 214Fh 
010C 50               push       ax 
010D 5A               pop        dx 
; AX = 11Ch, BX = 140h, DX = 11Ch, SP = FFFEh and SS:[FFFE] = 214Fh 
010E 58               pop        ax 
; AX = 214Fh, BX = 140h, DX = 11Ch and SP = 0 
010F 35 34 28        xor        ax, 2834h 
; AX = 97Bh, BX = 140h, DX = 11Ch and SP = 0 
0112 50               push       ax 
0113 5E               pop        si 
; AX = 97Bh, BX = 140h, DX = 11Ch, SI = 97Bh and SP = 0 
0114 29 37           sub        [bx], si 
0116 43               inc        bx 
0117 43               inc        bx 
0118 29 37           sub        [bx], si 
011A 7D 24           jge        short near ptr word_10140 
011C 45 49 43 ...   db 'EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$' 
0140 48 2B word_10140      dw 2B48h  ; CD 21 (INT 21) will be here 
0142 48 2A                  dw 2A48h  ; CD 20 (INT 20) will be here 
0144 0D                     db  0Dh 
0145 0A                      db  0Ah 
笔者在上述代码里追加了各种注释，以介绍执行指令后各寄存器和栈的状态。 
本质上说，这个程序的关键指令（下文简称“核心指令”）只有： 
B4 09     MOV AH, 9 
BA 1C 01  MOV DX, 11Ch 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
812 
逆向工程权威指南（下册） 
CD 21     INT 21h 
CD 20     INT 20h 
INT 21 的第 9 号功能（AH 寄存器）的作用是显示字符串。系统中断从 DS:DX 获取字符串的指针，然
后把它输出在屏幕上。另外，这种字符串必须以“$”字符结尾。当今的操作系统显然继续兼容了这种指令。
不过这种指令属于 CP/M（Control Program for Microcomputers），来自比 MS-DOS 还要古老的磁盘操作系统。 
由此可见，EICAR 的主要功能是： 
 向寄存器（AH 和 DX）传递预定值。 
 在内存中准备 INT 21 和 INT 20 的 opcode。 
 执行 INT 21 和 INT 20。 
严格地讲，核心指令的 opcode 基本都不是屏显字符。EICAR 采用“拼凑”指令的方法，把核心指令
凑成了可存储在字符串里的屏显字符组合。这项“拼凑”技术还普遍应用于 shellcode。 
有关“可用屏显字符表示的 opcode”，请参见本书附录 A.6.5。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8833 章
章    实
实  例
例  演
演  示
示  
编写 Demo 程序不仅要求编程人员具备熟练的数学技巧、卓越的计算机绘图水平，而且还非常考验他们
手写 x86 代码的基本功。 
83.1  10PRINT CHR$(205.5+RND(1));:GOTO 10 
本节介绍的程序都是 MS-DOS 环境下的.COM 程序。 
在参考资料［a12］里，我们找到了一个非常简单的随机图案生成程序。虽然它的功能只是不停地在屏
幕上打印斜杠和反斜杠，但是这两种字符最终可构成一种几何图案，如图 83.1 所示。 
图 83.1  一种随机几何图案 
在 16 位的 x86 平台上，这种算法非常多。 
83.1.1  Trixter 的 42 字节程序 
Trixter在他的网站上
①
① http://trixter.oldskool.org/2012/12/17/maze-generation-in-thirteen-bytes/。 
公开了具备 42 字节大小的程序。笔者把它摘录出来，并标注上了自己的注释： 
00000000: B001     
  mov           al,1        
; set 40x25 video mode 
00000002: CD10     
  int           010 
00000004: 30FF     
  xor           bh,bh    
; set video page for int 10h call 
00000006: B9D007   
  mov           cx,007D0 
; 2000 characters to output 
00000009: 31C0     
  xor           ax,ax 
0000000B: 9C       
  pushf                  
; push flags 
; get random value from timer chip 
0000000C: FA       
  cli       
; disable interrupts 
0000000D: E643     
  out           043,al   
; write 0 to port 43h 
; read 16-bit value from port 40h 
0000000F: E440     
  in           al,040 
00000011: 88C4     
  mov           ah,al 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
814 
逆向工程权威指南（下册） 
00000013: E440     
  in           al,040 
00000015: 9D       
  popf   
; enable interrupts by restoring IF flag 
00000016: 86C4     
  xchg 
    ah,al 
; here we have 16-bit pseudorandom value 
00000018: D1E8     
  shr           ax,1 
0000001A: D1E8     
  shr           ax,1 
; CF currently have second bit from the value 
0000001C: B05C     
  mov           al,05C ;'\' 
; if CF=1, skip the next instruction 
0000001E: 7202     
  jc           000000022 
; if CF=0, reload AL register with another character 
00000020: B02F     
  mov   
    al,02F ;'/' 
; output character 
00000022: B40E     
  mov  
    ah,00E 
00000024: CD10     
  int   
    010 
00000026: E2E1     
  loop   
    000000009 ; loop 2000 times 
00000028: CD20     
  int  
    020        ; exit to DOS 
实际上，上述程序里的伪随机数是 Intel 8253 计时器芯片（硬件）回传过来的时间信息。它选用了零
号计时器，而时钟决定这个计时器每秒递增 18.2 次。 
向 0x43 端口发送零字节，相当于发送了“选定#0 号（通用）计数器”“计数器的输出持续可读”和“采
用二进制计数（返回值是二进制数字，而非BCD码）”这三条指令。
①
83.1.2  笔者对 Trixter 算法的改进：27 字节 
当程序执行 POPF 指令时，CPU 恢复 IF 标识的同时会恢复终端功能。 
在使用 IN 指令读取数据时，返回值必须写到 AL 寄存器里，所以后面出现了数据交换指令 xchg。 
这个程序并没有使用计时器查询确切时间，而是用它来生成伪随机数。因此，我们没有必要屏蔽系统
中断。此外，我们只需要返回值的低 8 位数据，所以读这低 8 位数据即可。 
笔者对 Trixter 的程序稍作精简，把它改进为 27 字节的程序： 
00000000: B9D007    mov     cx,007D0 ; limit output to 2000 characters 
00000003: 31C0    xor     ax,ax     ; command to timer chip 
00000005: E643    out     043,al 
00000007: E440    in      al,040     ; read 8-bit of timer 
00000009: D1E8    shr     ax,1     ; get second bit to CF flag 
0000000B: D1E8    shr     ax,1 
0000000D: B05C    mov     al,05C    ; prepare '\' 
0000000F: 7202    jc      000000013 
00000011: B02F    mov     al,02F    ; prepare '/' 
; output character to screen 
00000013: B40E    mov     ah,00E 
00000015: CD10    int     010 
00000017: E2EA    loop    000000003 
; exit to DOS 
00000019: CD20    int     020 
83.1.3  从随机地址读取随机数 
MS-DOS 系统完全没有内存保护技术的概念。换句话说，应用程序可以任意访问内存地址。不仅如此，
在使用 LODSB 指令从 DS:SI 读取单字节数据的时候，即使程序没有预先给寄存器赋值也没有问题—它
会从任意地址读取一个字节！ 
Trixter甚至在其网页里
②
① 实际上，8 位控制字相当于四条指令。因为另一个指令没有在本程序发挥作用，所以本文没有进行介绍。 
② http://trixter.oldskool.org/2012/12/17/maze-generation-in-thirteen-bytes/。 
推荐不初始化相关寄存器就直接使用LODSB指令。 
原文同时建议使用 SCASB 指令替代 LODSB 指令，因为前者可以在读取数据的同时，根据数据直接设
置标识位。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 83 章  实 例 演 示 
815 
此外，使用 DOS 系统的 syscall INT 29h 还能对程序进行进一步精简。这个中断可以在屏幕上输出
AL 寄存器里的字符。 
Peter Ferrie和Andrey“hermlt”Baranovich分别写出了 11 字节和 10 字节的程序。
①
83.1.4  其他 
指令清单 83.1  Andrey“herm1t”Baranovich: 11 bytes 
00000000: B05C       mov 
  al,05C 
  ;'\' 
; read AL byte from random place of memory 
00000002: AE 
      scasb 
; PF = parity(AL - random_memory_byte) = parity(5Ch - random_memory_byte) 
00000003: 7A02       jp 
  000000007 
00000005: B02F       mov 
  al,02F 
  ;'/' 
00000007: CD29       int 
  029  
  ; output AL to screen 
00000009: EBF5       jmp 
  000000000   ; loop endlessly 
SCASB 指令计算“AL-[随机地址]”，并设置相应标识位。JP 指令比较少见，触发 JP 转移的条件是奇偶标识
位 PF 为 1（偶数）。在这个程序里，输出的字符不再由随机字节的某个比特位决定，而是由这个字节的各个比特
位共同决定。因此，这个程序的散列程度有望更好一些。 
如果使用 x86 未公开的 SALC 指令（即 SETALC）、单指令完成“SET AL CF”，那么整个程序还可以
更短。这个指令最初出现在 NEC v20 CPU 上。用自然语言解释的话，它的功能就是“有 CF 标识位填充
AL寄存器”若 CF 为1，则 AL的值将会是0xFF；否则 AL的值就是零。受到SALC适用性的影响，任8086/8088
平台上这个程序应该跑不起来。 
指令清单 83.2  Peter Ferrie: 10 bytes 
; AL is random at this point 
00000000: AE           scasb 
; CF is set according subtracting random memory byte from AL. 
; so it is somewhat random at this point 
00000001: D6           setalc 
; AL is set to 0xFF if CF=1 or to 0 if otherwise 
00000002: 242D         and           al,02D ;'-' 
; AL here is 0x2D or 0 
00000004: 042F         add           al,02F ;'/' 
; AL here is 0x5C or 0x2F 
00000006: CD29         int           029       ; output AL to screen 
00000008: EBF6         jmps          000000000 ; loop endlessly 
因此，完全有可能彻底抛弃条件转移指令。反斜杠（“\”）和斜杠（“/”）的
ASCII 值分别是 0x5C 和
0x2F。余下的问题就是：可否根据 CF 的（伪随机）状态把 AL 寄存器的值设置为 0x5C 和 0x2F。 
实际上解决方法十分简单：无论 AL 的值是 0 还是 0xFF，我们把它和 0x2D 进行“与”运算，即可得到 0
和 0x2D。再把这个值与 0x2F 相加，就得到了 0x2F 和 0x5C。然后把 AL 寄存器里的值打印到屏幕上即可。 
应当注意的是：在 DOSBox、Windows NT 主机、甚至是 MS-DOS 主机上运行同一个程序，看到的图
案都可能是不同的。影响程序结果的因素有：模拟器对 Intel 8253 计时器的不同模拟方式、寄存器的不同
初始值，以及其他因素。 
83.2  曼德博集合 
多少年来，编程人员不懈地钻研曼德博集合
②
① 请参照 http://pferrie.host22.com/misc/10print.htm。 
② 还被译作曼德布洛特集合，英文原文是 Mandelbrot set。 
的各种算法。本文将要介绍的，是Sir_Lagsalot在 2009 年发表
异步社区会员 dearfuture(15918834820) 专享 尊重版权
816 
逆向工程权威指南（下册） 
的曼德博集合的Demo程序
①。这个程序由 30 个 16 位x86 指令构成，文件大小仅为 64 字节。 
它绘制的图案如图 83.2 所示。 
图 83.2  曼德博集合 Demo 程序绘制的图案 
本节将介绍这个程序的工作原理。 
83.2.1  理论 
复数 
复数是二元有序实数对，由实部（Re()）和虚部（Im()）两部分构成。在复数概念的二维空间里，任
意复数的实部和虚部都可表示为二维坐标，从而把该复数表示为平面的一个点。 
本节用到的复数运算的基本法则有： 
 加法：(a+bi)+(c+di)=(a+c)+(b+d)i。 
即： 
Re(sum) = Re(a) + Re(b) 
Im(sum) = Im(a) + Im(b) 
 乘法：(a + bi)(c + di) = (ac − bd) + (bc + ad)i。 
即： 
Re(product) = Re(a) • Re(c)−Re(b) • Re(d) 
Im(product) = Im(b) • Im(c) + Im(a) • Im(d) 
 平方：(a+bi)2 = (a+bi)(a+bi)=(a2 −b2)+(2ab)i。 
即： 
Re(square) = Re(a)2−Im(a)2 
Im(square) = 2 • Re(a) • Im(a) 
曼德博集合的绘制方法 
曼德博集合可以由复二次多项式来定义：对于由复数 Z() 构成的递归序列
2
n 1
n
z
z
c
+ =
+
来说，不同的参
数 c 可能使序列的绝对值逐渐发散到无限大，也可能收敛在有限的区域内。曼德博集合就是使序列不延伸
至无限大的所有复数 c 的集合。 
① http://www.pouet.net/prod.php?which=53287。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 83 章  实 例 演 示 
817 
简单地说，普通程序的做法大致如下：
①
— 计算上述值与初始值的矢量和
 把屏幕划分为像限/取值区域。 
 将每个坐标点视为一个 c 值，并验证它是否属于曼德布洛特集合。 
 验证各坐标的方法如下： 
— 将每个坐标点视为一个复数参数 c。 
— 描述该点的复数值。 
— 计算复数值的平方。 
②
2
n 1
n
z
z
c
+ =
+
。 