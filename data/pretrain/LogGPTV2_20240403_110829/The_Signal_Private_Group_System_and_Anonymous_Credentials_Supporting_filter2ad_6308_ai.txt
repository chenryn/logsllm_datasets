return Error: Invalid timestamp
return 1
FetchGroupMembers(gid , t) from uid
ensure AuthAsMember(gid , t, uid )
return TG[gid ]
// Here TG[gid] is the list of all users and
// their proﬁle keys in gid, without history
DeleteGroupMember(gid , uid
(cid:48)
, t) from uid
ensure AuthAsMember(gid , t, uid )
if TG[gid ][uid
] not deﬁned
(cid:48)
return Error: no such user
(cid:48)
Delete TG[gid ][uid
return 1
DeleteGroup(gid , t) from uid
]
Set TG[gid ].corrupt
(cid:48)
InviteToGroup(uid
, gid , t) from uid
ensure AuthAsMember(gid , t, uid )
if uid
(cid:48) ∈ TG[gid ]
return Error: user already in gid
(cid:48)
,⊥) to TG[gid ]
to TG[gid ].UIDHistory
Append (uid
(cid:48)
Append uid
if TU [uid
(cid:48)
].corrupt
Set TG[gid ].corrupt
return 1
AddGroupMember(gid , uid
(cid:48)
, K, t) from uid
ensure AuthAsMember(gid , t, uid )
if TG[gid ][uid
].ProﬁleKey (cid:54)= ⊥
(cid:48)
return Error: user exists in gid
if K (cid:54)∈ TU [uid
(cid:48)
].ProﬁleKeys
return Error: Invalid proﬁle key
Set TG[gid ][uid ].ProﬁleKey = K
Append K to TG[gid ][uid ].ProﬁleKeyHistory
if TU [uid
].corrupt
(cid:48)
Set TG[gid ].corrupt
return 1
UpdateProﬁleKey(gid , K, t) from uid
ensure AuthAsMember(gid , t, uid ) or
AuthAsInvitedMember(gid , t, uid )
if K (cid:54)∈ TU [uid ].ProﬁleKeys
return Error: Invalid proﬁle key
TG[gid ][uid ].ProﬁleKey = K
return 1
ensure AuthAsMember(gid , t, uid )
Delete TG[gid ]
return 1
48
Figure 2:
S is honest. The function CommitToAdvProﬁleKey is deﬁned in Fig. 3.
Ideal functionality for a private group system, for the case when the server
UpdateProﬁleKey(gid , K, t) from uid
Send (gid , t, uid , uid
].corrupt, set TG[gid ].corrupt = 1
if TU [uid
if TG[gid ].corrupt
(cid:48)
, TG[gid ]) to S∗
else
Send (gid , t, index(TG[gid ][uid ])) to S∗
Send index(TG[gid ][uid
(cid:48)
]) to S∗
(cid:48)
, K, t) from uid
AddGroupMember(gid , uid
(cid:48)
(cid:48)
GetAuthCred(T ) from uid
Send (uid, T ) to S∗
CommitToProﬁleKey() from uid
if TU [uid ] not deﬁned
return Error: Invalid user
Create new random K
Add K to TU [uid ].ProﬁleKeys
return K
if TG[gid ].corrupt
Send (gid , t, uid , K) to S∗
else
Send (gid , t, index(TG[gid ][uid ]) to S∗
GetProﬁleCredential(uid, K)
if TU [uid ].corrupt
Ignore this request
else
Send index of K to S∗
AuthAsMember(gid , t) from uid
if TG[gid ].corrupt
Send (gid , t, uid ) to S∗
else
Send gid , t, index(TG[gid ][uid ]) to S∗
FetchGroupMembers(gid , t) from uid
if TG[gid ].corrupt
Send (gid , t, uid ) to S∗
else
S∗ can return “no such group”
Send (gid, t, index(TG[gid ][uid ]) to S∗
S∗ speciﬁes a list of indices (i, j), F only
sends UIDs at index i from TG[gid ].UIDHistory,
with the corresponding proﬁle keys with
index j from TG[gid ][uid ].ProﬁleKeyHistory
CreateGroup(gid, K, t) from uid
Send (gid , t) to S∗
if TU [uid ].corrupt
Ignore this request
Set TG[gid ].corrupt = 0
InviteToGroup(uid
, gid , t) from uid
(cid:48)
].corrupt then set TG[gid ].corrupt = 1
if TU [uid
if TG[gid ].corrupt
Send (gid , t, uid , uid
(cid:48)
, K, TG[gid ]) to S∗
else
Send (gid , t, index(TG[gid ][uid ]) to S∗
Send index(TG[gid ][uid
]) to S∗
(cid:48)
DeleteGroupMember(gid , uid
, t) from uid
(cid:48)
if TG[gid ].corrupt
Send (gid , t, uid , uid
(cid:48)
, TG[gid ]) to S∗
else
Send to S∗ :
(gid , t, index(TG[gid ][uid ]), index(TG[gid ][uid
(cid:48)
]))
DeleteGroup(gid , t) from uid
if TG[gid ].corrupt
Send (gid , t, uid ) to S∗
else
Send (gid , t, index(TG[gid ][uid ]) to S∗
TG[gid ] is not deleted
CommitToAdvProﬁleKey(K(cid:48), uid ) from S∗
if TU [uid ].corrupt
Append K(cid:48) to T [uid ].ProﬁleKeys
Figure 3:
Ideal functionality for a private group system, for the case when the server
S∗ is malicious. We omit places where S∗ may direct F to abort, or to return arbitrary
information to uid . S∗ is always notiﬁed which type of call is being made.
49
B Security Argument
In this section we sketch a security argument for the private groups system as a whole.
The security argument is in the random oracle model, and has two main cases, depending
on whether the server is honest.
B.1 Honest server
We ﬁrst consider the case when the server is honest, and some of the users are malicious.
We’ll group the malicious users as a single adversary A. Security should be maintained for
the honest users, and the malicious users should learn no more than they would from the
same interactions with F.
We describe a simulator S that interacts with F and A, simulating the real proto-
col for A. The system is secure if A’s view when interacting with S is computationally
indistinguishable from his view when executing the real protocol.
We describe each of the server operations, and describe how S implements them. We
write uid A to denote the user ID of a user controlled by A.
S setup Generate the ServerSecretP arams and ServerPublicP arams for issuing creden-
tials. Initialize storage for proﬁle key commitments, to store a hash and proﬁle commitment
for each user, and a list of users created by A. S also initializes storage for groups, and
will store for each group the gid , the group public key, and a list of ciphertexts (one for
each member). S chooses a random proﬁle key Kbad that will be used as a placeholder,
when the adversary uses an invalid proﬁle key commitment. Since proﬁle keys are assumed
to be large, and Kbad is only used between S and F, never in the simulated real proto-
cols between A and S, Kbad will only collide with another proﬁle key in the system with
negligible probability. S initializes random oracles for all hash functions in the system.
Create User from uid A S sends ServerPublicP arams to uid A. For simplicity we assume
all UIDs are unique. S stores uid A in the list of UIDs created by A.
GetAuthCred(T ) from uid A S calls GetAuthCred(T ) as uid A to F, if F responds 0,
S aborts otherwise S replies with a set of credentials, one for each time in T .
Since S is behaving exactly as the honest server would in this function, A’s view is
identical to the real world.
CommitToAdvProﬁleKey(c) from uid A S starts by checking whether the commit-
ment c = (J1, J2, J3) is well-formed. Note that S can “decrypt” the commitment by gener-
s3 for random (s2, s3), since the
ating the system parameters Gj1 and Gj2 as Gj3
commitment is an Elgamal encryption. Since all parameters are derived from a random
oracle, S can program it accordingly. Decryption yields the pair (M3, M4), and S can test
s2 and Gj3
50
whether the commitment is well-formed by computing ProﬁleKey = DecodeFromG(M4),
and checking whether M3 = HashToG(ProﬁleKey, UID).
If c is correct, S sets K = ProﬁleKey, and sets K = Kbad otherwise. Then S sends to F:
CommitToAdvProﬁleKey(K) from uid A. S stores (uid A, H(c)) in its list of commitments.
In subsequent operations, S will ensure that Kbad is never returned to A; when issuing
proﬁle key credentials, the invalid (M3, M4) from the proﬁle key commitment are used, and
when A fetches group members, the ciphertexts he has uploaded are cached and returned.
The value Kbad is only used between S and F.
GetProﬁleCredential(uid , ProﬁleKeyV ersion) from uid A This message is received
from a user uid A controlled by A.
If S does not have a commitment recorded for uid A, or if the proﬁle key version does
not match, then S fails. From the ProﬁleKeyV ersion, S can invert the hash (using the RO
query history) to recover the commitment c (as described in CommitToAdvProﬁleKey),
and from c recover the proﬁle key K(cid:48). If c is invalid, S sets K(cid:48) = Kbad.
S sends to F: GetProﬁleCredential(uid , K(cid:48)) as uid A. If F responds 0, fail, otherwise
S executes BlindIssue with uid A, and enforces the condition that K(cid:48) is consistent with c.
Even if c is not well-formed, it is a commitment to some pair (M3, M4), and security of
BlindIssue ensures that the proﬁle credential is issued only on these attributes.
Here A’s interaction with S is indistinguishable from an honest server, because A gets
a proﬁle credential only on keys that have been previously committed (or invalid keys, if
that is the case), and because S executes blind issuance as the honest server would.
CreateGroup(gid , t) from A S receives gid , GroupPublicP arams, an AuthCredential-
Presentation and ProﬁleKeyCredentialP resentation for A. Since in the real protocol the
channel is unauthenticated, S does not get the uid . S veriﬁes the proofs and fails if any are
invalid. From the authentication proof, S extracts the UID of the user creating the group,
uid∗, and their associated proﬁle key K∗, and the group secret key sk. If decryption of
the proﬁle key would fail because (M3, M4) is invalid, S sets K∗ = Kbad. If uid∗ was not
created by A, then S fails, denote this event E1. Then S sends “CreateGroup(K∗, gid , t)
from uid∗” to F, and fails if F returns zero (denote this event E2), otherwise S stores sk
and the ciphertexts in its storage for gid .
S’s behavior might diverge from the honest server if E1 or E2 occur. If E1 occurs, A
has created an authentication credential for an honest user, breaking unforgeability of the
credential system. Event E2 occurs if t is not a valid time, gid exists or K∗ is invalid
for uid∗. The ﬁrst two are the same between S and the honest server, and for the third,
unforgeability and security of BlindIssue of proﬁle key credentials ensures that any K∗ that
S uses will have previously been sent to F for uid∗ in a call to CommitToAdvProﬁleKey.
51
AddGroupMember(gid , t) from A S’s behavior here is similar to CreateGroup. Af-
ter verifying the proofs, that gid exists, and authenticating the caller by comparing the
ciphertext (the entire EA1, EA2, EB1, EB2) to the list of ciphertexts stored for this group, S
decrypts the ciphertext to recover uid∗ and K∗, and sets K∗ = Kbad if appropriate. Then
S calls AddGroupMember(gid , uid∗, K∗, t) as uid∗. If F returns 0, S fails and otherwise S
stores the ciphertext for the new user in its storage for gid .
If the AddGroupMember call to F fails because the user already exists, S behaves