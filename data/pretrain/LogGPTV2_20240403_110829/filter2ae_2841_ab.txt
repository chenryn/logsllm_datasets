offer\]\(https://www.akamai.com/cn/zh/multimedia/documents/technical-publication/akamai-esi-developers-guide-technical-publication.pdf)也可以窥知一二。我们想要测试Akamai
ESI的实际使用情况，2017年我们联系了Akamai安全团队向它们提到我们正在研究ESI注入。由于Akamai需付费使用，我们询问是否可以获取生产环境下的测试服务器（production-grade test
image），以便我们进行各种ESI相关的测试，但被礼貌回绝了。我们没有真实环境下的ESI实例用来研究，所以我们联系销售团队想要获取预售试用产品，但销售团队没有回复我们。
最终我们决定对其[公开的Docker image](https://hub.docker.com/r/akamaiesi/ets-docker)进行测试。这个Docker image包含一个带有一个可自定义模块 _mod_esi.so_ 的Apache
Web服务器。该模块大小20mb，为ELF
32位可编译版的ESI应用。Akamai公开的说明文档非常详细地描述了ESI的使用情况，所以我们不用逆向分析这个模块包。这是一个测试image，因此我们发现的东西不能代表真实生存环境下的Akamai实例也存在。总结一下，我们发现了Akamai
server 默认不开启ESI，并且有众多保护措施，例如防御SSRF（白名单策略等）和几个可选的WAF。
话虽如此，但我们发现Akamai ETS(ESI Test Server) 仍易受上述几种攻击（SSRF，绕过HTTPonly以及绕过XSSFilter）。
例如，通过ESI includes盗取Cookie值，可以使用`HTTP_COOKIE`引用特定cookie名称：
Akamai ETS包含大量有趣的功能，例如ESI
debug模块。该模块可通过``开启，开启后HTTP响应会出现大量调试信息，例如原始文件和环境变量。
用户还可以指定`dca="xslt"`，添加基于ESI include的可扩展样式表语言转换（Extensible Stylesheet Language
Transformations，XSLT）。下面这个include语句可以使代理服务器请求XML或XSLT文件。然后XSLT文件可用于过滤XML文件。最后通过XML文件造成XML外部实体（XXE）攻击。这个bug有点鸡肋，只能用于XXE->SSRF，因为是经ESI
include执行，而它本来就可以导致SSRF。Akamai ETS底层库（Xalan）不支持解析外部DTD，攻击者也不能提取查看本地文件。
XSLT文件：
    ]>
    &xxe;
但我们可以使用XML实体，这意味着可以尝试[十几年前的亿万嘲笑攻击](https://en.wikipedia.org/wiki/Billion_laughs_attack)。它的攻击原理是通过递归引用实体，导致内存耗尽服务挂起。我在本地计算测试Akamai
ETS Docker image时，32G内存在几秒后完全耗尽服务停止。我使用的是下面这个XSLT文件：
    ]>
    &lol9;
### NodeJS' ESI
许多NodeJS模块在开发时就考虑到ESI，都支持ESI标签。它们主要用于中间件，伪代理功能或内联在源代码中。[NodeJS'
ESI](https://www.npmjs.com/package/esi)的ESI应用库也非常广泛，支持include，变量和cookie等。
通过下面这条ESI include命令，使用`HTTP_COOKIE`变量可以提取出所有cookie：
### NodeJS' nodesi
NodeJS的这个模块允许ESI include，但不允许使用ESI变量。我们在测试[NodeJS'
nodesi](https://www.npmjs.com/package/nodesi)
ESI应用安全时，发现开发者添加了白名单机制。此外，他们在ESI模块说明文档中还专门添加了[安全方面的章节](https://www.npmjs.com/package/nodesi#security)。
## 如何检测 ESI
一些代理服务器为了方便处理ESI，通常会要求请求中设置`Surrogate-Control`HTTP
标头。该标头会提醒上游服务器："[ESI标签可能存在响应中，请做好解析准备](\[ESI tags could be present in the
response\]\(https://docs.oracle.com/cd/B14099_19/caching.1012/b14046/esi.htm#i642458)"。如果你发现了HTTP响应中有类似`Surrogate-Control: content="ESI/1.0”`的标头，那你的目标极有可能是启用了ESI的应用。
然而，大部分代理和均衡负载服务器会移除该标头。某些代理服务器甚至没有该标头。因此通过标头判断目标是否使用ESI应用不是很可靠，由于ESI应用的众多特性，不能一次性就测试出目标是否存在ESI注入。攻击者需要测试各种有效载荷观察响应，以识别存在ESI注入的端点。例如，构造ESI
include语句可以造成SSRF攻击，访问攻击者的服务器，但目标应用可能有白名单策略。
## 防御性措施
产生ESI注入的根本原因是开发者忽视了清理用户输入。代理服务器盲目解析用户输入时，有可能会造成ESI注入。无论你正在使用的是什么框架或语言，建议你参考防御XSS的方法来保护你的ESI应用。原始ESI规范中没有考虑到安全问题，因此清理用户输入的重担就落到开发人员身上了。
前面已经提到过了，主机和域名的白名单策略也可以缓解ESI注入的影响。另外一点，供应商应当明确指出启用ESI的风险，并通知用户可能存在未知的ESI注入。
## 小结
本系列文章阐述了一种新型攻击向量——ESI注入，该攻击的根源是各种代理服务器中ESI功能的滥用。我们展示了易受攻击环境和三个有效载荷：窃取Cookie，SSRF和绕过XSS
Filter。接下来我们介绍了一些使用ESI的应用，使安全社区对ESI世界的糟糕有初步了解。
我们希望这项研究可以为研究其他缓存代理的人带来一些灵感，为赏金猎人们开拓一个新的攻击维度。