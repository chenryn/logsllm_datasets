# 九、使用 Kubernetes API
在[第 7 章](07.html)、*Kubernetes 简介*、[第 8 章](08.html)、*使用 Kubernetes 搭配 Java* 中，我们了解了 Kubernetes 的概念，并通过安装带有`minikube`的本地 Kubernetes 集群在实践中使用。我们知道 Kubernetes 架构的所有部分，例如荚、节点、部署和服务。我们还提到了主节点上的主要组件之一，即应用编程接口服务器。正如您从[第 7 章](07.html)*对 Kubernetes* 的介绍中所记得的，API 服务器在技术上是一个名为`kube-apiserver`的进程，它使用 JSON 接受并响应`HTTP REST`的请求。应用编程接口服务器的主要目的是验证和处理集群资源的数据，如 pod、服务或部署。应用编程接口服务器是中央管理实体。它也是唯一直接连接到`etcd`的 Kubernetes 组件，这是一个分布式键值数据存储，Kubernetes 在其中存储其所有集群状态。
在前几章中，我们已经使用了一个`kubectl`命令行工具来管理我们的集群。`Kubectl`是一个有用的工具，无论何时我们想要对集群执行命令，无论是创建、编辑还是删除资源。事实上`kubectl`也与 API 服务器进行通信；您可能已经注意到，Kubernetes 中几乎每一个改变某些东西的动作基本上都是在编辑资源。如果您想要扩大或缩小您的应用，这将通过修改部署资源来完成。Kubernetes 会在运行中获取更改，并将其应用到资源中。此外，只读操作，如列出 Pods 或部署，将执行相应的`GET`请求。
事实上，您可以看到`kubectl`命令正在进行哪些`REST`调用，如果您使用`--v=6`或`--v=9`选项以更高的详细程度运行它，我们将在本章的后面部分回到它。我们可以使用`kubectl`、`client`库或者通过`REST`请求来访问该应用编程接口。`REST` API 什么时候有用？嗯，你可以用每种编程或脚本语言创建一个`REST`调用。这创造了一个全新的灵活性级别，您可以从自己的 Java 应用、从 Jenkins 中的持续交付流或从您正在使用的构建工具(例如，让它成为 Maven)来管理 Kubernetes。可能性几乎是无穷无尽的。在本章中，我们将了解 API 概述、其结构和示例请求。我们将使用命令行工具`curl`的`REST`调用来实现这一点。本章将涵盖以下主题:
*   关于应用编程接口版本控制的说明
*   身份验证(确定谁是谁)
*   授权(决定谁能做什么)
*   通过调用一些示例来使用应用编程接口
*   OpenAPI 斯瓦格文档
让我们从应用编程接口概述开始。
# API 版本控制
Kubernetes 不断生长。它的特性改变了，这也导致了应用编程接口的改变。为了应对这些变化，并且在很长一段时间内不中断与现有客户端的兼容性，Kubernetes 支持多个 API 版本，每个版本都有不同的 API 路径，例如`/api/v1`或`/apis/extensions/v1beta1`。Kubernetes API 规范中有三个 API 级别:alpha、beta 和 stable。让我们了解一下区别。
# 希腊字母的第一个字母
默认情况下，alpha 版本级别是禁用的，就像其他软件一样，alpha 版本应该被认为是有问题的，没有准备好生产。此外，您应该注意到，alpha 版本中引入的任何功能在稳定版本中可能并不总是可用。此外，在下一个版本中，应用编程接口中的更改可能不兼容。你不应该使用`alpha`版本，除非你非常渴望测试新功能或者做一些实验。
# 贝塔
beta 级别与 API 的`alpha`级别完全不同，代码经过测试(可能还是有一些 bug，因为还不是`stable`版本)。此外，与`alpha`级别相比，`beta`中的功能在未来版本中不会被删除。如果 API 中有一个突破性的、不向后兼容的变化，Kubernetes 团队将提供如何迁移的指南。在生产环境中使用`beta`不是最好的主意，但是您可以在非业务关键型集群中安全地使用`beta`。我们也鼓励您提供使用`beta`的反馈，这将使 Kubernetes 对我们每个使用它的人更好。`beta`级别的版本名会包含`beta`这个词，比如`v1beta1`。
# 稳定的
API 的稳定级别是经过测试的、生产就绪的软件。稳定 API 中的版本名将为`vX`，其中`X`为整数，例如`v1`。
Kubernetes API 利用了 API 组的概念。已经引入了 API 组，以便将来更容易扩展 Kubernetes API。API 组在`REST`路径和调用的 JSON 负载的`apiVersion`字段中指定。目前，有几个正在使用的应用编程接口组:核心、批处理和扩展。组名是应用编程接口调用`REST`路径的一部分:`/apis/$GROUP_NAME/$VERSION`。核心组是个例外，它没有出现在`REST`路径中，例如:`/api/v1` **。**可以在 Kubernetes API 参考中找到支持的 API 组的完整列表。
通过使用应用编程接口，您几乎可以对集群做任何事情，就像您通常使用`kubectl`命令所做的那样。这可能很危险；这就是为什么 Kubernetes 支持身份验证(确定你是谁)和授权(你能做什么)。调用应用编程接口服务的基本流程如下图所示:
![](img/28efab5c-90b6-476b-8d17-7530d83790a9.png)
让我们从身份验证开始。
# 证明
默认情况下，Kubernetes API 服务器在两个端口上为`HTTP`请求提供服务:
*   **本地主机**、**非安全端口**:默认情况下，IP 地址为`localhost`，端口号为`8080`。没有 TLS 通信，此端口上的所有请求都会绕过身份验证和授权插件。这用于测试和引导，以及主节点的其他组件。这也用于其他 Kubernetes 组件，如调度器或控制器管理器，以执行 API 调用。您可以使用`--insecure-port`开关更改端口号，使用`--insecure-bind-address`命令行开关更改默认 IP。
*   **安全端口**:默认端口号为`6443`(可以用``--secure-port`开关更改)，通常是云提供商上的`443`。它使用 TLS 通信。可以用`--tls-cert-file`开关设置证书。可以通过`--tls-private-key-file`开关提供一个私有的 SSL 密钥。通过该端口的所有请求将由认证和授权模块以及准入控制模块处理。您应该尽可能使用安全端口。通过让您的应用编程接口客户端验证`api-server`提供的 TLS 证书，他们可以验证连接是加密的，并且不容易受到中间人攻击。您还应该运行`api-server`，其中不安全的端口只能由本地主机访问，因此通过网络的连接使用`HTTP`。
*   使用 minikube，要直接访问 API 服务器，您需要使用 minikube 生成的自定义 SSL 证书。客户端证书和密钥通常存储在`~/.minikube/apiserver.crt`和`~/.minikube/apiserver.key`中。当你提出`HTTP`请求时，你必须将它们加载到你的`HTTP`的客户中。如果您正在使用`curl`使用`--cert`和`--key`选项来使用`cert`和`key`文件。
The access to the API server can be simplified through the proxy, which we will start later in this chapter.
如果您想从不同的域向 Kubernetes API 发送请求，您需要在`api-server`上启用`cors`。您可以通过在`kube-apiserver`配置中添加一个`--cors-allowed-origins=["http://*"]`参数来实现，通常是在`/etc/default/kube-apiserver`文件中，然后重新启动`kube-apiserver`。
请注意，Kubernetes 集群本身并不管理用户。相反，用户被认为是由外部独立的服务管理的。Kubernetes 集群中没有代表正常用户账户的资源*。*这就是为什么不能通过 API 调用将用户添加到集群的原因。
Kubernetes does not manage user accounts by itself.
Kubernetes API 支持多种形式的身份验证:`HTTP`基本身份验证、承载令牌和客户端证书。它们被称为身份验证策略。启动`api-server`时，您可以使用命令行标志启用或禁用这些身份验证策略。让我们看看有什么可能，从最简单、最基本的授权策略开始。
# HTTP 基本身份验证
要使用这种身份验证策略，您需要使用`--basic-auth-file=`开关启动`api-server`。它应该是一个`csv`文件，每个用户都有以下条目:
```
password, user name, userid
```
您还可以指定包含组名的可选第四列，用逗号分隔。如果用户有多个组，则必须用双引号将整个列内容括起来，例如:
```
password, user, userid,"group1,group2,group3"
```
如果`api-server`使用基本身份验证策略，它将期望所有`REST`调用都使用包含编码在`BASE64`中的用户名和密码的`Authorization`头进行(类似于普通的基本身份验证保护的网络调用)，例如:
```
BASE64ENCODED(USER:PASSWORD)
```
要生成授权头值，您可以在 shell 中使用以下命令，它将为拥有密码的用户生成值:
```
echo -n "user:secret" | base64
```
请注意，对基本`auth`文件的任何更改都需要重新启动`api-server`来获取更改。
`HTTP`在云中运行 Kubernetes 时，基本身份验证通常用作默认值。例如，一旦你在谷歌容器引擎上启动了你的容器集群，你就会有一个主程序在你的 GCP 项目中的一个虚拟机上运行`api-server`。如果您运行一个`gcloud preview container clusters`列表，您将看到`api-server`监听请求的端点以及访问它所需的凭证。您将在[第 10 章](10.html)、*中找到更多关于在云中运行 Kubernetes 的信息，在云中的 Kubernetes 上部署 Java*。
# 静态令牌文件
要让`api-server`使用这个方案，需要用`--token-auth-file=`开关启动。类似于`HTTP`基本授权策略，提供的文件是一个`csv`文件，每个用户都有一条记录。记录需要采用以下格式:
```
token, user, userid, group 
```
同样，组名是可选的，如果用户有多个组，您需要用逗号将它们分开并用双引号引起来。令牌只是一个`base64`编码的字符串。在 Linux 上生成令牌的命令示例如下:
```
$ echo `dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null`
```
输出将是一个令牌，然后输入到`token`文件中，例如:
```
3XQ8W6IAourkXOLH2yfpbGFXftbH0vn,default,default
```
当使用此策略时，`api-server`将期待一个值为`Bearer `的`Authorization`标题。在我们的示例中，这看起来与以下内容相同:
```
Authorization: Bearer 3XQ8W6IAourkXOLH2yfpbGFXftbH0vn
```
令牌无限期持续，不重启 API 服务器就无法更改令牌列表。
# 客户端证书
为了使用该方案，`api-server`需要通过以下开关启动:
```
--client-ca-file=
```
`CA_CERTIFICATE_FILE`必须包含一个或多个证书颁发机构，用于验证提交给`api-server`的客户端证书。客户端证书的/CN(通用名称)用作用户名。客户端证书还可以使用组织字段指示用户的组成员身份。要为用户包含多个组成员资格，您需要在证书中包含多个组织字段。例如，使用`openssl`命令行工具生成证书签名请求:
```
$ openssl req -new -key user.pem -out user-csr.pem \
-subj "/CN=user/O=group1/O=group2"  
```
这将为用户名`user`创建一个证书签名请求，属于两个组，`group1`和`group2`。
# OpenID
OpenID connect 1.0 是 OAuth 2.0 协议之上的简单身份层。你可以在`https://openid.net/connect`在网上阅读更多关于 OpenID connect 的内容。它允许客户端基于授权服务器执行的身份验证来验证最终用户的身份，并以可互操作和类似于`REST`的方式获得关于最终用户的基本配置文件信息。包括 Azure、亚马逊和谷歌在内的所有云提供商都支持 OpenID。与`OAuth2`的主要区别在于访问令牌返回的附加字段被称为`id_token`。这个令牌是一个**JSON Web Token**(**JWT**)带有知名字段(比如用户的邮件)，由服务器签名。为了识别用户，认证者使用来自`OAuth2token`响应的`id_token`作为承载令牌。要使用 OpenID 身份验证，您需要登录您的身份提供商，该提供商将为您提供一个`id_token`(以及标准的 OAuth 2.0 `access_token`和一个`refresh_token` **)** 。
由于进行身份验证所需的所有数据都包含在`id_token`中，因此 Kubernetes 不需要对身份提供者进行额外的调用。从可伸缩性的目的来看，这非常重要，每个请求都是无状态的。
要为`kubectl`命令提供一个标记值，您需要使用`--token`标志。或者，您可以直接将其添加到您的`kubeconfig`文件中。
如果您对您的`api-server`执行`HTTP`调用，这是将发生的事情的简化流程:
*   `kubectl`将把你的`id_token`以`authorization`头发送到 API 服务器
*   API 服务器将通过检查配置中指定的证书来验证 JWT 签名
*   应用编程接口服务器将检查以确保`id_token`没有过期
*   应用编程接口服务器将确保用户获得授权，如果获得授权，将向`kubectl`返回响应
默认情况下，任何拥有`api-server`访问凭证的人都可以完全访问集群。您还可以配置更细粒度的授权策略，现在让我们来看看授权。
# 批准
身份验证成功后的下一步是检查对已验证用户允许哪些操作。截至目前，Kubernetes 支持四种类型的授权策略方案。要使用特定的授权模式，请在启动`api-server`时使用`--authorization-mode`开关。语法是:
```
$ kube-apiserver --authorization-mode   
```
``参数包含一个授权插件的有序列表，Kubernetes 应该用它来验证用户。当启用多个身份验证插件时，第一个成功验证请求的插件将使 Kubernetes 跳过执行所有剩余的插件。
默认授权模式为`AlwaysAllow`，允许所有请求。
支持以下授权方案:
*   基于属性的控制
*   基于角色的控制
*   web 手册
*   `AlwaysDeny`
*   `AlwaysAllow`
让我们一个接一个地简单描述一下。
# 基于属性的访问控制
如果使用`--authorization-mode=ABAC`选项启动`api-server`，将使用**基于属性的访问控制** ( **ABAC** )策略。此策略使用本地文件，您可以在其中以灵活的方式定义每个用户应该拥有的权限。还有一个选项可以提供策略文件:`--authorization-policy-file`，因此使用该策略的完整语法将是:
```
$ kube-apiserver --authorization-mode=ABAC \
--authorization-policy-file=  
```
请注意，对策略文件的任何更改都需要重新启动`api-server`。
正如您从[第 7 章](07.html)*对 Kubernetes* 的介绍中所记得的，Kubernetes 集群使用名称空间的概念来对相关资源进行分组，例如 Pods、部署或服务。`api-server`中的授权模式利用了这些名称空间。`ABAC`策略文件语法相当清晰易读。每个条目都是描述授权规则的 JSON 对象。考虑策略文件中的以下条目，它给予用户`john`对名称空间`myApp`的完全访问权:
```
{
 "apiVersion": "abac.authorization.kubernetes.io/v1beta1", 
 "kind": "Policy", 
 "spec": {
 "user":"john", 
 "namespace": "myApp", 
 "resource": "*", 
 "apiGroup": "*", 