Certainly! Here is a more polished and professional version of the text:

---

### Recovery of Threshold Signatures

We outline two applications here and refer to [6] for further details, where an authentication service and a trusted party for fair exchange are also described.

#### Certification Authority (CA) and Directory Service

A **Certification Authority (CA)** is a service operated by a trusted organization that verifies and confirms the validity of public keys. The issued certificates typically also confirm that the real-world user defined in the certificate controls the corresponding private key. A certificate is essentially a digital signature, generated using the CA's private signing key, on the public key and the identity (ID) claimed by the user.

The CA publishes its own public key for a digital signature scheme. When a user wants to obtain a certificate for their public key, they submit it along with their ID and credentials to the CA. The ID may include name, address, email, date of birth, and other data to uniquely identify the holder. The CA then verifies the credentials, issues a certificate if they pass, and sends the certificate back to the user. The user can verify the certificate using the CA's public key. For the certificates to be meaningful, the CA must have a clearly stated and publicized policy for validating public keys and IDs, which may change over time. We currently ignore revocation and other related issues.

A **secure directory service** maintains a database of entries, processes lookup queries, and returns authenticated answers signed with its private signing key. The corresponding signature verification key is available to all clients. Several examples of secure directories exist in distributed systems today, and more are needed in the future, such as DNS authentication.

Internally, a secure directory operates similarly to a CA: it receives a query, retrieves values from the stored database, generates a digital signature on the result, and sends both back to the client. Additional functionality is required for updating the database.

Both services can be implemented in our distributed system architecture. Requests must be delivered via atomic broadcast to ensure that all servers return the same answers. Database updates must be treated in the same way. The digital signature scheme of the service is replaced by the corresponding threshold signature scheme, which requires minimal changes to the clients, as detailed in [33]. In the server code, computing the digital signature is replaced by generating a signature share.

It is important to note that atomic broadcast is crucial for delivering any request that changes the global state. Only if a CA never changes its policy and all of its certificates are independent of each other can reliable broadcast suffice.

#### Notary Service

In its simplest form, a **digital notary service** receives documents, assigns a sequence number to them, and certifies this with its signature. Such a service could be used, for example, for assigning Internet domain names or registering patent applications. A notary must process requests sequentially and atomically, updating its internal state for each request.

In many notary applications, the content of a request must remain confidential until the notary processes it in a single atomic step. For instance, in the context of patent applications, a competitor might try to file a related patent application, have it processed first, and claim the invention for themselves.

A distributed notary can be readily realized using our architecture, as it involves a simple state machine to be replicated. Client requests must be disseminated via secure causal atomic broadcast to ensure confidentiality. If no encryption were used, a corrupted server could see the contents of the request during atomic broadcast and arrange for the service to schedule and process a related request from an adversary before the original one. The same attack is possible if the cryptosystem is not secure against adaptive chosen-ciphertext attacks.

As the notary service's response is a digitally signed message, clients receive their receipt as described in the CA example.

### Extensions

We discuss some extensions and improvements to our architecture. Although we have strived for a secure and fault-tolerant system in the given environment, security could be enhanced by using "proactive" protocols, allowing for dynamic group changes, or employing hybrid failure structures (not to be confused with generalized ones). Our atomic broadcast protocols involve considerable overhead, especially for large \( n \), because security has been our primary design principle. Among the various possible optimizations, designing "optimistic" protocols, which run very fast if no corruptions occur but may fall back to a slower mode if necessary, seems most promising.

#### Proactive Protocols

**Proactive security** is a method to protect threshold-cryptographic schemes against a mobile adversary that can corrupt all parties over the system's lifetime but never more than \( t \) at once (see [9] for a survey). Proactive protocols divide time into epochs. All parties "reshare" their cryptographic secret keys between epochs and delete old key material. The model assumes an external mechanism for detecting corruptions and "cleaning up" a party. Because all secrets seen by the adversary in the past become useless by resharing, the adversary never knows enough secret information to compromise the entire system.

Proactively secure protocols for our asynchronous system model are currently unknown. One issue to address first is how to integrate epochs into the asynchronous system model.

#### Dynamic Groups

The static nature of our system model may pose a problem for practical systems. Real systems evolve over time, growing or shrinking with the organizations that use them. Every such change would require a fresh setup of the complete system by a trusted dealer. Ideally, a system should reconfigure itself and dynamically increase or decrease the group size and thresholds. However, special care is needed to ensure the safety of all keys during these changes, so at least some resharing of keys will be necessary, similar to proactive protocols.

Similar motivation has led to the idea of view-based group communication systems that tolerate crash failures. However, dynamically changing the group seems much harder in the Byzantine model when cryptographic secrets are involved, making this an open problem.

#### Hybrid Failure Structures

Another interesting direction is to treat crash failures separately from corruptions and adapt the protocols to such hybrid failure structures. After all, crashes are more likely to occur than intrusions and are much easier to handle than Byzantine corruptions. For coping with transient server outages, the crash-recovery model seems plausible (see references in [15]). Protocols in hybrid failure models have been investigated before [17], so we expect this to be feasible.

#### Optimistic Protocols

Optimistic protocols run very fast if no malicious adversary is present and all messages are delivered promptly. If a problem is detected (typically because liveness is violated), they may switch to a more secure mode using protocols that guarantee progress. This idea is common in the literature [27, 11]. In our Byzantine context, it is essential to ensure that safety is never violated. Kursawe and Shoup [21] recently designed a protocol along these lines.

### Acknowledgments

This paper reflects the results of many discussions with Klaus Kursawe, Frank Petzold, Jonathan Poritz, Victor Shoup, and Michael Waidner; I am grateful for all their contributions.

This work was supported by the European IST Project MAFTIA (IST-1999-11583), but represents the view of the author. The MAFTIA project is partially funded by the European Commission and the Swiss Department for Education and Science.

### References

[References listed as in the original text]

---

I hope this version meets your needs!