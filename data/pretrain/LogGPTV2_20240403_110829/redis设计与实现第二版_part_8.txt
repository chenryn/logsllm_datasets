L2
L3
L4
5
L32
NULL←
*
图 5-7三个带有相同分值的跳跃表节点
NULL4***
L3
L32
图5-6从表尾向表头方向遍历跳跃表
1
→NULL
10086.0
Q
BW
L1
L2
L3
L4
NULL
Q1
1.0
BW
10086.0
L2
-
02
BW
L1
2
2.0
BW
L1
L2
10086.0
03
L1
L2
L4
L5
03
3.0
BW
第5章跳跃表43
0→NULL
NULL
NULI
NULI
NULL
NULL
NULL
NULL
NULL
NULL
---
## Page 48
44·第一部分数据结构与对象
5.2
表头节点的层高并不计算在内。
表头节点和表尾节点的复杂度为 0(1)。
 leve1属性则用于在 O(1)复杂度内获取跳跃表中层高最大的那个节点的层数量，注意
通过使用length属性来记录节点的数量，
表 5-1列出了跳跃表的所有操作 API。
header 和tail指针分别指向跳跃表的表头和表尾节点，通过这两个指针，程序定位
）zskiplist;
跳跃表 API
1/表中层数最大的节点的层数
unsigned long length;
1/表中节点的数量 
structz skiplistNode *header, *tail;
length
gel
L32
NULL SADD numbers 1 3 5 7 9
整数集合（intset）是集合键的底层实现之一，当一个集合只包含整数值元素，并且这
typedef struct intset
在这一章，我们将对整数集合及其相关操作的实现原理进行介绍。
"intset"
redis> OBJECT ENCODING numbers
(integer) 5
intset;
整数集合的实现
//保存元素的数组
uint32_t length;
//集合包含的元素数量
uint32_t encoding;
！！编码方式
整数集合
第6章
---
## Page 51
集合示例：
组并不保存任何int8_t 类型的值，contents 数组的真正类型取决于encoding 属性的值：
 encoding 属性的值为
图6-2展示了另－个整数
口因为每个集合元素都是 intl6_t 类型的整数值，所以 contents 数组的大小等于
 contents 数组按从小到大
口 length 属性的值为 5，表示
 如果 encoding 属性的值为 INTSET_ENC_INT64，那么 contents 就是一个 int64_
如果encoding属性的值为INTSET_ENC_INT32，那么contents 就是一个
如果encoding 属性的值为 INTSET_ENC_INT16，那么contents 就是一个
虽然 intset 结构将 contents 属性声明为 int8_t 类型的数组，但实际上 contents 数
口
0
length 属性记录了整数集合包含的元素数量，也即是contents 数组的长度。
的顺序保存着集合中的五个元素。
整数集合包含五个元素。
sizeof(int64_t)* 4 = 64 * 4 = 256位。
因为每个集合元素都是int64_t 类型的整数值，所以 contents 数组的大小为
contents 数组按从小到大的顺序保存着集合中的四个元素。
length 属性的值为4，表示整数集合包含四个元素。
的数组，而数组中保存的都是int64_t 类型的整数值。
表示整数集合的底层
INTSET_ENC_INT64,
sizeof(intl6_t)*
Iencoding 属性的值为 INTSET
实现为 int64_t 类型
5 = 16 *5 = 80位。
是int16_t 类型的整数值。
型的数组，而集合保存的都
的底层实现为int16_t类
ENC_INT16，表示整数集合
6-1展示了一个整数集合示例：
372 036 854 775 808，最大值为 9223372 036 854 775 807)。
t 类型的数组，数组里的每个项都是一个 int64_t 类型的整数值（最小值为-9 223
为-2147483648，最大值为2147483647)。
int32_t 类型的数组，数组里的每个项都是一个 int32_t 类型的整数值（最小值
为-32768，最大值为32767）。
int16_t 类型的数组，数组里的每个项都是一个int16_t类型的整数值（最小值
 INTSET_ENC_INT64
图 6-2
contents
length
INTSET_ENC_INT16
intset
图 6-1
一个包含四个 int16_t 类型整数值的整数集合
contents
encoding
一个包含五个int16_t 类型整数值的整数集合
length
intset
-2675256175807981027
-6370-51823314632
第6章整数集合·47
35
---
## Page 52
48·第一部分数据结构与对象
原有的三个元素 1、2、3 仍然是int16_t 类型，这些元素还保存在数组的前 48 位里面，
将是32＊4=128位，如图6-5所示。虽然程序对底层数组进行了空间重分配，但数组
因为每个 int32_t 整数值需要占用 32 位空间，所以在空间重分配之后，底层数组的大小
内），对底层数组进行空间重分配。
65 535 添加到整数集合之前，程序需要先对整数集合进行升级。
合当前所有元素的类型都要长，所以在将
因为 65 535 的类型 int32_t 比整数集
t 的整数值65535添加到整数集合里面，
合的三个元素在这 48位里的位置。
底层数组的大小为 3*16=48 位，图6-4 展示了整数集
编码的整数集合，集合中包含三个int16_t类型的元
继续维持底层数组的有序性质不变。
放置到正确的位上，而且在放置元素的过程中，需要
集合里面。
元素的类型都要长时，整数集合需要先进行升级（upgrade），然后才能将新元素添加到整数
6.2
是-2 675 256 175 807 981 027。
int64_t 类型，所以 contents 数组保存的四个整数值都是 int64_t 类型的，不仅仅
数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成
t类型来保存，不过根据整数集合的升级规则，当向一个底层为 int16_t数组的整
是真正需要用int64_t类型来保存的，而其他的1、3、5三个值都可以用int16_
素
，如图6-3所示。
整数集合目前有三个元素，再加上新元素65535，整数集合需要分配四个元素的空间，
升级首先要做的是，根据新类型的长度，以及集合元素的数量（包括要添加的新元素在
现在，假设我们要将类型为int32
3）将新元素添加到底层数组里面。
2）将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素
每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有
接下来的一节将对整数集合的升级操作进行详细介绍。
虽然 contents 数组保存的四个整数值中，只有-2 675 256 175 807981 027
因为每个元素都占用16位空间，所以整数集合
举个例子，假设现在有一个INTSET_ENC_INT16
1）根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。
升级整数集合并添加新元素共分为三步进行：