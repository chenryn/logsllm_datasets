We present StackDeﬁler a set of stack corruption attacks
that we use to bypass CFI implementations. Our novel at-
tack techniques corrupt the stack without the need for stack-
based vulnerabilities. This contradicts the widely held belief
that stack corruption is a solved problem. To the best of our
knowledge, this paper presents the ﬁrst comprehensive study
of stack-based memory disclosure and possible mitigations.
Surprisingly, we ﬁnd that ﬁne-grained CFI implementa-
tions for the two premier open-source compilers (used to
protect browsers), LLVM and GCC, are not safe from at-
tacks against our stack attacks. IFCC spills critical pointers
to the stack which we can exploit to bypass CFI checks.
We veriﬁed that a similar vulnerability exists in VTV—a
completely separate implementation of ﬁne-grained CFI in a
separate compiler. Next, we demonstrated that unprotected
context switches between the user and kernel mode can lead
to a bypass of CFI. Further, we show the challenges of im-
plementing a secure and eﬃcient shadow stack and provide
evidence that information disclosure poses a severe threat
to shadow stacks that are not protected through memory
isolation. Finally, we analyzed several stack-based defenses
and conclude they cannot counter our StackDeﬁler attack.
Based on our ﬁndings, we recommend that new defenses
should (i) consider the threat of arbitrary memory reads and
writes to properly secure a web browser and other attacker-
scriptable programs, (ii) never trust values from writable
memory, and (iii) recommend complementary approaches to
protect the stack and heap to mitigate the threat of memory
disclosure.
10. ACKNOWLEDGMENTS
The authors thank Andrei Homescu for providing insight
into the V8 JavaScript engine. We thank Ferdinand Brasser
and the anonymous reviewers for their suggestions and con-
structive feedback.
This work has been co-funded by the German Science
Foundation as part of project S2 within the CRC 1119
CROSSING, the European Union’s Seventh Framework Pro-
gramme under grant agreement No. 609611, PRACTICE
project and the Intel Collaborative Research Institute for
Secure Computing (ICRI-SC)
This material is based upon work partially supported by
the Defense Advanced Research Projects Agency (DARPA)
961under contracts D11PC20024, N660001-1-2-4014, FA8750-
15-C-0124, and FA8750-15-C-0085 as well as gifts from
Google, Mozilla, Oracle, and Qualcomm.
Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the authors
and do not necessarily reﬂect the views of the Defense Ad-
vanced Research Projects Agency (DARPA), its Contract-
ing Agents, the National Science Foundation, or any other
agency of the U.S. Government.
Mauro Conti is supported by a European Marie Curie
Fellowship (N. PCIG11-GA-2012-321980). This work is
also partially supported by the Italian MIUR PRIN Project
TENACE (N. 20103P34XC), and the University of Padua
PRAT 2014 Project on Mobile Malware.
References
[1] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-
ﬂow integrity: Principles,
implementations, and applica-
tions. In ACM SIGSAC Conference on Computer and Com-
munications Security, CCS, 2005.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. A theory
of secure control ﬂow. In Proceedings of the 7th International
Conference on Formal Methods and Software Engineering,
ICFEM’05, 2005.
[3] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-
ﬂow integrity principles, implementations, and applications.
ACM Transactions on Information System Security, 13,
2009.
[4] Aleph One. Smashing the stack for fun and proﬁt. Phrack
Magazine, 49(14), 2000.
[5] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger,
and J. Pewny. You can run but you can’t read: Pre-
venting disclosure exploits in executable code.
In ACM
SIGSAC Conference on Computer and Communications Se-
curity, CCS, 2014.
[6] M. Backes and S. N¨urnberger. Oxymoron: Making ﬁne-
grained memory randomization practical by allowing code
sharing.
In 23rd USENIX Security Symposium, USENIX
Sec, 2014.
[7] S. Bhatkar, D. DuVarney, and R. Sekar. Address obfuscation:
An eﬃcient approach to combat a broad range of memory er-
ror exploits. In 12th USENIX Security Symposium, USENIX
Sec, 2003.
[8] A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazi`eres, and
In 35th IEEE Symposium on
D. Boneh. Hacking blind.
Security and Privacy, S&P, 2014.
[9] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R.
Gross.
Control-ﬂow bending: On the eﬀectiveness of
control-ﬂow integrity. In 24th USENIX Security Symposium,
USENIX Sec, 2015.
[10] N. Carlini and D. Wagner. ROP is still dangerous: Break-
ing modern defenses. In 23rd USENIX Security Symposium,
USENIX Sec, 2014.
[11] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuf-
frida. Stackarmor: Comprehensive protection from stack-
based memory error vulnerabilities for binaries. In Sympo-
sium on Network and Distributed System Security (NDSS),
NDSS, 2015.
[12] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng.
ROPecker: A generic and practical approach for defending
against ROP attacks.
In 21st Annual Network and Dis-
tributed System Security Symposium, NDSS, 2014.
[13] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang.
StackGuard: Automatic adaptive detection and prevention
of buﬀer-overﬂow attacks. In 8st USENIX Security Sympo-
sium, USENIX Sec, 1998.
[14] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R.
Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical
code randomization resilient to memory disclosure. In 36th
IEEE Symposium on Security and Privacy, S&P, 2015.
[15] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen,
L. Davi, A.-R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz.
It’s a TRAP: Table randomization and protection against
function reuse attacks.
In ACM SIGSAC Conference on
Computer and Communications Security, CCS, 2015.
[16] T. H. Dang, P. Maniatis, and D. Wagner. The performance
cost of shadow stacks and stack canaries. In 10th ACM Sym-
posium on Information, Computer and Communications Se-
curity, ASIACCS, 2015.
[17] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and
F. Monrose. Isomeron: Code randomization resilient to (just-
in-time) return-oriented programming. In 22nd Annual Net-
work and Distributed System Security Symposium, NDSS,
2015.
[18] L. Davi, A. Sadeghi, D. Lehmann, and F. Monrose. Stitching
the gadgets: On the ineﬀectiveness of coarse-grained control-
ﬂow integrity protection. In 23rd USENIX Security Sympo-
sium, USENIX Sec, 2014.
[19] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A. Sadeghi.
Gadge me if you can: secure and eﬃcient ad-hoc instruction-
level randomization for x86 and ARM. In 8th ACM Sym-
posium on Information, Computer and Communications
Smiecurity, ASIACCS, 2013.
[20] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar,
T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and
H. Okhravi. Missing the point: On the eﬀectiveness of code
pointer integrity. In 36th IEEE Symposium on Security and
Privacy, S&P, 2015.
[21] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard,
H. Okhravi, and S. Sidiroglou-Douskos. Control jujutsu: On
the weaknesses of ﬁne-grained control ﬂow integrity. In ACM
SIGSAC Conference on Computer and Communications Se-
curity, CCS, 2015.
[22] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi.
Surgically returning to randomized lib(c). In 25th Annual
Computer Security Applications Conference, ACSAC, 2009.
[23] J. Gionta, W. Enck, and P. Ning. HideM: Protecting the con-
tents of userspace memory in the face of disclosure vulner-
abilities. In 5th ACM Conference on Data and Application
Security and Privacy, CODASPY, 2015.
[24] C. Giuﬀrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced
operating system security through eﬃcient and ﬁne-grained
address space randomization.
In 21st USENIX Security
Symposium, USENIX Sec, 2012.
[25] E. G¨oktas, E. Athanasopoulos, H. Bos, and G. Portokalidis.
Out of control: Overcoming control-ﬂow integrity. In 35th
IEEE Symposium on Security and Privacy, S&P, 2014.
[26] E. G¨oktas, E. Athanasopoulos, M. Polychronakis, H. Bos,
and G. Portokalidis. Size does matter: Why using gadget-
chain length to prevent code-reuse attacks is hard. In 23rd
USENIX Security Symposium, USENIX Sec, 2014.
[27] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. David-
son. ILR: where’d my gadgets go? In 33rd IEEE Symposium
on Security and Privacy, S&P, 2012.
[28] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and
M. Franz. Proﬁle-guided automatic software diversity.
In
IEEE/ACM International Symposium on Code Generation
and Optimization, CGO, 2013.
[29] R. Hund, C. Willems, and T. Holz. Practical timing side
channel attacks against kernel space aslr. In 34th IEEE Sym-
posium on Security and Privacy, S&P, 2013.
[30] Intel.
Intel 64 and IA-32 architectures software de-
962veloper’s manual, combined volumes 3A, 3B, and 3C:
System programming guide.
http://www.intel.com/
content/dam/www/public/us/en/documents/manuals/64-
ia-32-architectures-software-developer-system-
programming-manual-325384.pdf, 2013.
[31] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address
space layout permutation (ASLP): towards ﬁne-grained ran-
domization of commodity software. In 22nd Annual Com-
puter Security Applications Conference, ACSAC, 2006.
[32] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar,
and D. Song. Code-pointer integrity. In 11th USENIX Sym-
posium on Operating Systems Design and Implementation,
OSDI, 2014.
[33] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK:
Automated software diversity. In 35th IEEE Symposium on
Security and Privacy, S&P, 2014.
[34] C. Lattner, A. Lenharth, and V. Adve. Making context-
sensitive points-to analysis with heap cloning practical for
the real world. In Proceedings of the ACM SIGPLAN Con-
ference on Programming Language Design and Implementa-
tion, PLDI, 2007.
[35] Microsoft. Data Execution Prevention (DEP).
support.microsoft.com/kb/875352/EN-US/, 2006.
http://
[36] Microsoft.
guard.
https://msdn.microsoft.com/en-us/library/Dn919635.aspx,
2015.
Control
ﬂow
[37] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smash-
ing the gadgets: Hindering return-oriented programming us-
ing in-place code randomization. In 33rd IEEE Symposium
on Security and Privacy, S&P, 2012.
[38] V. Pappas, M. Polychronakis, and A. D. Keromytis. Trans-
parent ROP exploit mitigation using indirect branch tracing.
In 22nd USENIX Security Symposium, USENIX Sec, 2013.
[39] M. Payer, A. Barresi, and T. R. Gross. Fine-grained control-
ﬂow integrity through binary hardening. In 12th Conference
on Detection of Intrusions and Malware and Vulnerability
Assessment, DIMVA, 2015.
[40] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R.
Sadeghi, and T. Holz. Counterfeit object-oriented program-
ming: On the diﬃculty of preventing code reuse attacks in
C++ applications.
In 36th IEEE Symposium on Security
and Privacy, S&P, 2015.
[41] F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns,
M. Contag, and T. Holz. Evaluating the eﬀectiveness of cur-
rent anti-ROP defenses. In 17th International Symposium on
Research in Attacks, Intrusions and Defenses, RAID, 2014.
[42] D. Sehr, R. Muth, C. Biﬄe, V. Khimenko, E. Pasko,
K. Schimpf, B. Yee, and B. Chen. Adapting software
fault isolation to contemporary cpu architectures.
In 19th
USENIX Conference on Security, USENIX Sec, 2010.
[43] J. Seibert, H. Okhravi, and E. S¨oderstr¨om. Information leaks
without memory disclosures: Remote side channel attacks on
diversiﬁed code. In ACM SIGSAC Conference on Computer
and Communications Security, CCS, 2014.
[44] H. Shacham. The geometry of innocent ﬂesh on the bone:
return-into-libc without function calls (on the x86). In ACM
SIGSAC Conference on Computer and Communications Se-
curity, CCS, 2007.
[45] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko,
C. Liebchen, and A. Sadeghi. Just-in-time code reuse: On
the eﬀectiveness of ﬁne-grained address space layout random-
ization. In 34th IEEE Symposium on Security and Privacy,
S&P, 2013.
[46] A. Sotirov. Heap Feng Shui in JavaScript.
In Black Hat
Europe, BH US, 2007.
[47] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lach-
mund, and T. Walter. Breaking the memory secrecy assump-
tion. In 2nd European Workshop on System Security, EU-
ROSEC, 2009.
[48] The Clang Team. Clang 3.8 documentation SafeStack. http:
//clang.llvm.org/docs/SafeStack.html, 2015.
[49] C. Tice.
Improving function pointer security for virtual
In GNU Tools Cauldron Workshop,
method dispatches.
2012.
[50] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, ´U. Er-
lingsson, L. Lozano, and G. Pike. Enforcing forward-edge
control-ﬂow integrity in GCC & LLVM. In 23rd USENIX
Security Symposium, USENIX Sec, 2014.
[51] VUPEN Security.
internet
Advanced exploitation of
explorer heap overﬂow (pwn2own 2012 exploit).
http:
//www.vupen.com/blog/20120710.Advanced_Exploitation_
of_Internet_Explorer_HeapOv_CVE-2012-1876.php, 2012.
[52] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.
Eﬃcient software-based fault isolation. In 14th ACM Sym-
posium on Operating Systems Principles, SOSP, 1993.
[53] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary
stirring: self-randomizing instruction addresses of legacy x86
binary code. In ACM SIGSAC Conference on Computer and
Communications Security, CCS, 2012.
[54] Web Hypertext Application Technology Working Group
(WHATWG). Chapter 10 - Web workers, 2015.
[55] Z. Yunhai. Bypass control ﬂow guard comprehensively. In
Black Hat, BH US, 2015.
[56] B. Zeng, G. Tan, and U. Erlingsson. Strato: A retargetable
framework for low-level inlined-reference monitors. In 22nd
USENIX Security Symposium, USENIX Sec, 2013.
[57] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCa-
mant, D. Song, and W. Zou. Practical control ﬂow integrity
and randomization for binary executables.
In 34th IEEE
Symposium on Security and Privacy, S&P, 2013.
[58] M. Zhang and R. Sekar. Control ﬂow integrity for COTS
In 22nd USENIX Security Symposium, USENIX
binaries.
Sec, 2013.
963