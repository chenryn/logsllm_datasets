2. Full instrumentation
detects exploit & creates
VSEF filter
5. Exploit fails
against hardened
binary
4. VSEF binary
Instrumentation
(on each host)
execution
Figure 2. The deployment scenario for
vulnerability-speciﬁc
ﬁltering.
Upon (1) receiving an exploit of a new vul-
nerability, the (2) full instrumentation engine
detects it and creates an appropriate ﬁlter.
The ﬁlter is (3) disseminated to all hosts,
which then (4) use the ﬁlter to instrument and
produce a hardened binary. The hardened
binary cannot be then exploited (5). Note that
the exploit in step 5 may be a polymorphic
variant of step 1.
Our techniques and architecture also apply to other ad-
versarial models. Host-based privilege escalation attacks
are a serious threat that previous automatic defense systems
have mostly ignored. Our scheme can be used to harden
known vulnerable programs against such attacks until the
proper patch can be applied. Note this is especially impor-
tant for legacy systems where source code for the running
applications may no longer exist or be accessible and thus a
permanent patch may never be created.
We present a distributed architecture for efﬁciently and
securely generating, using, and sharing VSEF ﬁlters in [25].
6. Related work
Sidiroglou et. al. proposed selective emulation as part of
a reactive approach for handling software failure [33]. Their
selective emulation is similar in some aspects to our work.
Like us, they note that partial instrumentation can reduce
total monitoring overhead. However their approach for de-
fending against buffer overﬂow attacks requires source code
to instrument the binary, since it is based on a canary as
in StackGuard [12]. In addition, their instrumentation is at
function call granularity, and they use heuristics to ﬁnd out
what function calls need to be instrumented. They leave as
an open problem how to determine more precise instrumen-
tation, which we solve by using taint-based analysis.
Rinard et. al. has proposed using compiler extensions to
deal with writes to unallocated memory. The approach al-
lows a program to execute even in the presence of buffer
overﬂow attacks[30]. These techniques are aimed at in-
creasing availability for services and are not necessarily safe
and thus inappropriate as a defense mechanism.
Shield [40] provides vulnerability-speciﬁc
exploit
generic protection. However, it uses manually generated
signatures.
Costa et. al. propose a concurrent work to automatically
generated host-based input ﬁlters [11], which has greater
accuracy than network-based input ﬁlters, and can correctly
recognize some semantically equivalent inputs. However,
the approach still suffers difﬁculty when the correct classi-
ﬁcation rule is complex or needs application state, or when
input is encrypted.
IntroVirt [15] uses vulnerability-speciﬁc predicates to
detect when a vulnerability has been exploited. However,
these predicates are manually generated.
DAKODA [13] provides a quantitative analysis for a
number of exploit vectors. Their results show that network-
based ﬁlters are not speciﬁc enough for exploits against
many vulnerabilities, and that there are a number of vul-
nerabilities where the attack vector is encrypted, making
host-based input ﬁlters impractical. The paper also noted
that return addresses are not suited to be used as signatures
for polymorphic worms which were used in several existing
automatic signature generation methods [27, 20, 42].
We beneﬁt directly from the active research for increas-
ing the efﬁciency of emulation [21, 41, 2]. For example,
we use Valgrind and DynamoRIO for taint-based instru-
mentation (on Linux and Windows, respectively), while Pin
reports emulation speeds 3.3x faster than Valgrind and 2x
faster than DynamoRIO [21].
We use TaintCheck [27] to initially discover unknown
vulnerabilities. Other ﬁne-grained dynamic bug detection
tools could be used during initial ﬁlter creation, such as
program shepherding [17], libsafe [4, 6], or Nethercote-
Fitzhardinge bounds checking [23]. We chose TaintCheck
because the taint-based approach detects the widest variety
of attacks and is easy to augment to produce the taint log
needed for taint-based VSEF.
Slicing techniques [38, 43] can be used to help create or
reﬁne the VSEF ﬁlters, as discussed in Section 3.3. We plan
to investigate this approach in the future.
7. Conclusion
We propose vulnerability-speciﬁc execution ﬁltering
(VSEF), a new type of ﬁlter that recognizes and ﬁlters out
execution patterns of an exploit exercising a known vulner-
ability. VSEF is more accurate than input ﬁltering, and sig-
niﬁcantly faster than full execution monitoring. We give two
types of VSEF ﬁlters:
taint-based VSEF and destination-
based VSEF. The former is more accurate while the latter
may require less instrumentation. We show how to auto-
matically create both ﬁlters using a VSEF Filter Genera-
tor. The ﬁlters can then be used to automatically harden
a binary against the vulnerability via the VSEF Binary In-
strumentation Engine. We provide an implementation for
both components under Windows and Linux, and run ex-
periments that conﬁrm the accuracy, performance, and gen-
eration speed. In most cases the overhead of VSEF binary
hardening is only a few percent.
8. Acknowledgments
We would like to thank the following people: Jad Cham-
cham, for implementing TaintCheck on DynamoRIO [10];
Xeno Kovah, for help running experiments; Drew Bernat,
for feedback and assistance with using Dyninst; Timothy
Wong; Emery Berger; and the anonymous reviewers for
their insightful feedback.
References
[1] Dynamorio.
http://www.cag.lcs.mit.edu/
dynamorio/.
[2] Dyninst. www.dyninst.org.
[3] Metasploit. http://www.metasploit.org.
[4] K. Avijit, P. Gupta, and D. Gupta. Tied, libsafeplus: Tools
for runtime buffer overﬂow protection. In USENIX Security
Symposium, August 2004.
[5] R. Balzer. EXDAMS - extendable debugging and monitor-
ing system. Proceedings of the AFIPS SJCC, 34:567–586,
1969.
[6] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time
defense against stack smashing attacks. In USENIX Annual
Technical Conference 2000, 2000.
[7] P. Bosch, A. Carloganu, and D. Etiemble. Complete x86
In
instruction trace generation from hardware bus collect.
23rd IEEE EUROMICRO Conference, 1997.
[8] M. Burrows, S. N. Freund, and J. L. Wiener. Run-time type
checking for binary programs. In International Conference
on Compiler Construction, April 2003.
[9] CERT/CC. CERT/CC statistics 1988-2005. http://www.
cert.org/stats/cert_stats.html.
[10] J. Chamcham. Dynamic taint analysis: Protecting Win-
dows against worms and zero-day attacks. Master’s Thesis,
Carnegie Mellon University, 2005.
[11] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-end contain-
ment of internet worms.
In Proceedings of the twentieth
ACM symposium on Operating systems principles (SOSP),
Oct. 2005.
[12] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beat-
tie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stack-
Guard:
automatic adaptive detection and prevention of
buffer-overﬂow attacks. In Proceedings of the 7th USENIX
Security Symposium, January 1998.
[13] J. Crandall, Z. Su, S. F. Wu, and F. Chong. On deriving un-
known vulnerabilities from zero-day polymorphic and meta-
morphic worm exploits. In Proc. 12th ACM Conference on
Computer and Communications Security (CCS), 2005.
[14] J. R. Crandall and F. Chong. Minos: Architectural support
for software security through control data integrity. In To ap-
pear in International Symposium on Microarchitecture, De-
cember 2004.
[15] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detect-
ing past and present intrusions through vulnerability-speciﬁc
predicates. In Proceedings of the twentieth ACM symposium
on Operating systems principles (SOSP), Oct. 2005.
[16] H.-A. Kim and B. Karp. Autograph: toward automated, dis-
In Proceedings of the
tributed worm signature detection.
13th USENIX Security Symposium, August 2004.
[17] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure exe-
cution via program shepherding. In Proceedings of the 11th
USENIX Security Symposium, August 2002.
[18] C. Kreibich and J. Crowcroft. Honeycomb - creating intru-
sion detection signatures using honeypots. In Proceedings of
the Second Workshop on Hot Topics in Networks (HotNets-
II), November 2003.
[19] G. Larsen. Benchmarking performance of a query - part
http://www.databasejournal.
1 elapsed time.
com/features/mssql/article.php/3298411,
2004.
[20] Z. Liang and R. Sekar. Fast and automated generation of at-
tack signatures: A basis for building self-protecting servers.
In Proc. of the 12th ACM Conference on Computer and
Communications Security (CCS), 2005.
[21] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin:
Building customized program analysis tools with dynamic
instrumentation. In Programming Language Design and Im-
plementation (PLDI), 2005.
[22] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford,
and N. Weaver. Inside the slammer worm. In IEEE Security
and Privacy, volume 1, 2003.
[23] N. Nethercote and J. Fitzhardinge. Bounds-checking entire
programs without recompiling. In Proceedings of the Second
Workshop on Semantics, Program Analysis, and Comput-
ing Environments for Memory Management (SPACE 2004),
Venice, Italy, Jan. 2004.
(Proceedings not formally pub-
lished.).
[24] N. Nethercote and J. Seward. Valgrind: A program supervi-
sion framework. In Proceedings of the Third Workshop on
Runtime Veriﬁcation (RV’03), Boulder, Colorado, USA, July
2003.
[25] J. Newsome, D. Brumley, D. Song, M. R. Pariente, and
T. Kampouris. Efﬁcient and effective self-healing for de-
fending against exploit attacks on commodity software.
Technical Report CMU-CS-05-191, Department of Com-
puter Science, Carnegie Mellon University, May 2005.
[26] J. Newsome, B. Karp, and D. Song. Polygraph: Automati-
cally generating signatures for polymorphic worms. In Pro-
ceedings of the IEEE Symposium on Security and Privacy,
May 2005.
[27] J. Newsome and D. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of ex-
ploits on commodity software. In Proceedings of the 12th
Annual Network and Distributed System Security Sympo-
sium (NDSS), February 2005.
[28] F. Qin, S. Lu, and Y. Zhou. SafeMem: Exploiting ECC-
memory for detecting memory leaks and memory corruption
during production runs. In Proceedings of the 11th Interna-
tional Symposium on High-Performance Computer Architec-
ture, 2005.
[29] Y.
Ramin.
ATPhttpd.
http://www.redshift.com/(cid:24)yramin/atp/atphttpd/.
[30] M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu, and
W. B. Jr. Enhancing server availability and security through
failure-oblivious computing. In Operating System Design &
Implementation (OSDI), 2004.
[31] T.
J. Robbins.
libformat.
http://www.
securityfocus.com/tools/1818, 2001.
[32] P. A. Sandon, Y. Liao, T. Cook, D. Schultz, and P. M.
de Nicolas. Nstrace: A bus-driven instruction trace tool for
powerpc microprocessors. IBM Journal of Research and De-
velopment, 41(3), 1997.
[33] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D.
Keromytis. Building a reactive immune system for software
services. In USENIX Annual Technical Conference, 2005.
[34] S. Singh, C. Estan, G. Varghese, and S. Savage. The Early-
Bird system for real-time detection of unknown worms.
Technical Report CS2003-0761, University of California,
San Diego, August 2003.
[35] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the
Internet in your spare time. In 11th USENIX Security Sym-
posium, 2002.
[36] G. E. Suh, J. Lee, and S. Devadas. Secure program execution
via dynamic information ﬂow tracking. In Proceedings of
ASPLOS, 2004.
[37] P. Szor. Hunting for metamorphic. In Virus Bulletin Confer-
ence, 2001.
[38] F. Tip. A survey of program slicing techniques. Journal of
programming languages,, 3, September 1995.
[39] A. F. Tool.
http://httpd.apache.org/test/
flood.
[40] H. J. Wang, C. Guo, D. Simon, and A. Zugenmaier. Shield:
Vulnerability-driven network ﬁlters for preventing known
vulnerability exploits. In ACM SIGCOMM, August 2004.
[41] C. Williams and J. Hollingsworth. Interactive binary instru-
mentation.
In Second International Workshop on Remote
Analysis and Measurement of Software Systems (RAMSS),
2004.
[42] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Automatic
diagnosis and response to memory corruption vulnerabili-
ties, 2005.
[43] X. Zhang and R. Gupta. Cost effective dynamic program
slicing. In 2004 Programming Language Design and Imple-
mentation (PLDI) conference, 2004.
[44] P. Zhou, W. Liu, F. Long, S. Lu, F. Qin, Y. Zhou, S. Midkiff,
and J. Torrellas. AccMon: Automatically detecting memory-
related bugs via program counter-based invariants.
In The
Proceedings of 37th Annual IEEE/ACM International Sym-
posium on Micro-architecture (Micro’04), Dec. 2004.