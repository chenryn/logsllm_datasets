    import scrapy
    class MyItem(scrapy.Item):
        item1 = scrapy.Field()
        item_url = scrapy.Field()
        item_address = scrapy.Field()
        item_list = scrapy.Field()
    class MyLoader(scrapy.contrib.loader.ItemLoader):
        default_output_processor = TakeFirst()
        default_input_processor = MapCompose(unicode.strip)
        item_list_in = Identity()
        item_list_out = Identity()
    class MySpider(scrapy.Spider):
        name = 'myspider'
        start_urls = ['some-url']
        def parse(self, response):
            uls = response.xpath('//div[@id="someID"]//ul')
            for ul in uls:
                url = ul.xpath('.//li[1]/a/@href').extract()[0]
                loader = MyLoader(MyItem(), ul)
                loader.add_xpath('item1', './/li[1]/a/text()')
                loader.add_value('item_url', url)
                request = scrapy.Request(url, callback=self.parse_more)
                request.meta['item'] = loader.load_item()
                yield request
        def parse_more(self, response):
            loader = MyLoader(response.meta['item'], response=response)
            item_list = response.css('.nav-buttons.someclass').xpath('.//a/img/@alt').extract()
            loader.add_xpath('item_address', '//address//div[@class="address-info"]/text()')
            loader.add_value('item_list', item_list)
            #import pdb; pdb.set_trace()
            if loader.get_output_value('item_address') == "some address":
                 loader.add_value('address_code', 'FR')
            yield loader.load_item()
In pdb, for example, if we inspect a loader instance
    (pdb) loader.load_item()
    {'item_address': 'someval', ....}
    (pdb) type(loader.get_output_value('item_address'))
As a result, the if-block is never executing.