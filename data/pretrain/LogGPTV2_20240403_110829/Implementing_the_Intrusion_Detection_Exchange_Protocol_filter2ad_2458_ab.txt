A
L
L
Manager
Proxy
Active
Analyzer
Manager
Passive
Analyzer
Figure 1: IDWG IDS Architecture
5 Intrusion Alert Protocol (IAP)
The working group’s ﬁrst attempt to meet IDP re-
quirements was the development of the Intrusion Alert
Protocol (IAP) [5]. The design of IAP was based on the
Hypertext Transfer Protocol (HTTP) [11].
HTTP itself was deemed unsuitable for several rea-
sons. The most important was that in HTTP, the HTTP
client is always the party that initiates the TCP connec-
tion. For IDP, however, a passive analyzer should act
as a client even though it receives the TCP connection.
However, IAP still borrows many of its headers and re-
sponse codes from HTTP.
IAP uses Transport Layer Security (TLS) [8] to in-
sure conﬁdentiality, integrity, and mutual authentication.
To simplify the protocol, data only ﬂows in one direction
per connection. In other words, if a manager wanted to
send conﬁguration data to an analyzer it was already re-
ceiving alerts from, it would have to open a new connec-
tion. IAP deﬁnes a custom proxying method that exam-
ines the headers to make the initial connection, but then
acts as an octet forwarder after that. Proxies, therefore,
do not participate in security negotiation and are unable
to see or undetectably tamper with the data.
The initial development of IAP was done by Di-
pankar Gupta of Hewlett-Packard. The authors joined
him in an attempt to complete the speciﬁcation and actu-
ally implement the protocol. We assisted Dipankar with
several revisions of the speciﬁcation and were given co-
author status on the internet draft. Additionally, in the
course of our implementation, we found several ﬂaws.
One was in the speciﬁcation of the proxy method. As
originally written, a compliant implementation of the
proxy could have allowed connections to arbitrary hosts
and ports through the proxy. This is obviously undesir-
able from a security standpoint. This ﬂaw was partly
due to a related issue — the original speciﬁcation con-
tained no information about the source of the request.
This meant that in a proxied connection, the originat-
ing entity would be unknown until it presented its key
for security negotiation. This is undesirable since it re-
quires security negotiation before a proxied connection
can be refused, making DoS attacks easier. Additionally,
it requires entity information to be encoded in the key
to permit any identiﬁcation of where the message came
from. We also found and resolved several ambiguities
that could have caused interoperability problems.
Our implementation of IAP is written as a module
in Perl. Perl was chosen because its string handling ca-
pabilities and built-in HTTP header support make the
implementation clean. Furthermore, it is very easy to in-
terface a Perl module to various managers and analyzers.
We also have developed sample implementations of both
active and passive managers and analyzers, as well as a
simple proxy. Our implementation is currently undergo-
ing interoperability testing. The code can be found at:
http://www.cs.hmc.edu/clinic/projects/2000/aerospace.
Our work was presented at the 49th IETF conference
in December, 2000. At that meeting, however, the work-
ing group decided it should investigate the Blocks Ex-
tensible Exchange Protocol, or BEEP, as the basis for
the IDWG transport protocol. The authors volunteered
to spearhead this effort.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:04:41 UTC from IEEE Xplore.  Restrictions apply. 
6 Blocks Extensible Exchange Protocol
(BEEP)
The Blocks Extensible Exchange Protocol (BEEP)
[22] is a generalized framework for the development
of application-layer protocols (Figure 2). BEEP offers
asynchronous, connection-oriented, and reliable trans-
port. Thus an application level transport protocol such
as IDP can be implemented using the BEEP framework.
The key issue in such an implementation is determining
whether BEEP provides all the features required. See
[21] for a detailed discussion of application-layer proto-
col design and the development of the BEEP framework.
The following subsections borrow heavily from [22] and
[21].
Overall, BEEP supports higher level protocols by
providing the following collection of protocol mecha-
nisms:
(cid:127) Framing: how the beginning and ending of each
message is delimited.
(cid:127) Encoding: how a message is represented when ex-
changed.
(cid:127) Reporting: how errors are described.
(cid:127) Asynchrony: how independent exchanges are
handled.
(cid:127) Authentication: how the peers at each end of the
connection are identiﬁed and veriﬁed.
(cid:127) Privacy: how the exchanges are protected against
third-party interception or modiﬁcation.
Note that other necessary protocol mechanisms such
as naming and authorization are not provided by the
BEEP framework. Other than the URI [2], there is no
universal framework for naming. The naming issue rep-
resents a “domain-speciﬁc problem for each application
protocol” [21], and thus naming is intentionally not han-
dled by the BEEP framework. Likewise, authorization is
excluded from the framework. Nearly every conceivable
scheme for authorization must rely on naming to identify
principals. It follows that without naming, the frame-
work cannot provide authorization. Application pro-
tocols using the BEEP framework must explicitly deal
with the issues of naming and authorization.
6.1 Message Framing
There are three traditional approaches to the problem
of message framing, with each approach being taken by
at least one of the major IETF protocols. The Simple
Mail Transfer Protocol (SMTP) [13] uses octet-stufﬁng
for its framing requirements. This method suffers from
slower performance due to the comparison overhead of
checking for the special sequence that indicates the end
of a message. HTTP [11] uses octet-counting to deter-
mine the message delimiters. The drawback of this ap-
proach is that, unless messages can be segmented, the
entire message must be available before transmission.
The File Transfer Protocol (FTP) [18] uses connection-
blasting as its framing mechanism. However, for small
messages, the overhead of connection-blasting is high.
In addition, the endpoint-addresses of the peers must be
available at the application layer.
BEEP uses a variation of octet-counting to perform
message framing. In addition to counting the bytes of
the message to ﬁnd the delimiter, BEEP adds the use of
a trailer “END”. This was presumably done to aid in the
human comprehensibility of BEEP messages. The be-
ginning of BEEP frames are delimited by a command
line that provides the following information about the
individual frame:
(cid:127) “what kind of message is in this frame;
(cid:127) whether there’s more to the message than just
what’s in this frame (a continuation ﬂag);
(cid:127) how to distinguish the message contained in this
frame from other messages (a message number);
(cid:127) where the payload occurs in the sliding window
(a sequence number) along with how many octets
are in the payload of this frame; and,
(cid:127) which part of the application should get the mes-
sage (a channel number)” [21].
Since framing is at the core of the framework, BEEP
speciﬁes several consistency checks that catch most im-
plementation errors in the framing mechanism. The
BEEP framework’s relatively straightforward framing
mechanism, with its sequence number, octet count, and
trailer, simpliﬁes error detection.
The BEEP framework uses a ﬂow control mechanism
to allow for the multiplexing of channels over a single
transport connection. The mechanism used is the same
as the Transmission Control Protocol (TCP) [17], using
sequence numbers and a sliding window. This mech-
anism is well understood and has been proven through
extensive implementation experience with TCP.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:04:41 UTC from IEEE Xplore.  Restrictions apply. 
6.2 Message Encoding
6.5 Authentication
There are quite a few encoding mechanisms in use on
the Internet today. SMTP [13] uses its RFC 0822 style
of encoding. The Simple Network Management Proto-
col (SNMP) [6] uses the elaborate ASN.1/BER encoding
mechanism. In the BEEP framework, messages may be
arbitrary MIME [12] content. The framework’s default
content-type is application/octet-stream and its default
content transfer encoding is binary.
6.3 Reporting
Application protocols must have a method to convey
error information between peers. SMTP originally pio-
neered the use of 3-digit error codes. Many Internet pro-
tocols, including HTTP and FTP, use 3-digit error codes.
In addition to conveying reply codes, most application
protocols send textual diagnostics to aid in human inter-
pretation. In any protocol being developed for the In-
ternet, textual diagnostics should include the option for
language localization. The BEEP framework provides
for 3-digit error codes with a localized textual diagnos-
tic. During connection establishment, BEEP peers ex-
change lists of language tokens (deﬁned in [1]), ordered
by peer preference. The textual diagnostics accompa-
nying subsequent message replies will be localized with
respect to the peers’ language preferences. Additionally,
replies to messages are ﬂagged as either positive or neg-
ative. This makes the success or failure of a message
more easily determined.
6.4 Exchange Asynchrony
In the BEEP framework, “frames are exchanged in
the context of a channel. Each channel has an associated
proﬁle that deﬁnes the syntax and semantics of the mes-
sages exchanged over a channel” [21]. The concept of
channels provides the basis for the BEEP framework’s
asynchrony. Within a single BEEP session, multiple
channels can be open simultaneously. Messages are pro-
cessed synchronously within each channel, but no limi-
tations are placed on the order of processing for different
channels. For example, in a multi-threaded implementa-
tion, each channel would map to its own thread. Imple-
mentors are not required to support this, however. For
instance, an implementor may choose to use only a sin-
gle process for a BEEP session and its associated chan-
nels, thereby forcing synchrony onto the intra-channel
communications within the session. Figure 3 shows a
BEEP session between peers with three channels each
speciﬁed by a proﬁle, i.e., IDXP, syslog, and Other.
Traditionally, application-layer protocols have ig-
nored the problem of authentication. That is, the proto-
cols do not authenticate the identities of the peers or the
authenticity of the messages. Other protocols that do
provide for authentication often use a domain-speciﬁc
mechanism. For instance, FTP uses its own scheme of
user/password exchange to authenticate the client con-
nection.
With the goal of creating a standard framework for
authenticating protocol peers, the Simple Authentica-
tion and Security Layer (SASL) [14] was developed by
the IETF. With SASL, one can describe how a partic-
ular authentication mechanism functions.
It is the re-
sponsibility of the protocol using SASL to describe the
actual exchange of messages. SASL can also use infor-
mation from the underlying layer in the authentication
process. For instance, if the connection is using IPsec,
SASL can use the underlying credentials of each peer
to perform authentication. In addition to authentication,
SASL mechanisms can provide for guarantees of mes-
sage integrity and privacy.
The BEEP framework supports the use of SASL.
When a channel is authenticated, a single user identity
is established for each peer on the session. In this way,
peer authentication is done on a per-session basis. Each
session must correspond to a single user, with all open
channels being associated with that session’s peer iden-
tities.
6.6 Privacy
Transport Layer Security (TLS) [8] is the IETF stan-
dard for securing transport connections. (See Section 3
of [22] for a more in depth discussion of transport secu-
rity in BEEP and its use of TLS.)
The BEEP framework supports the use of SASL and
TLS to provide for privacy. When “a channel associated
with transport security begins the underlying negotiation
process, all channels (including channel zero) are closed
on the BEEP session. Accordingly, upon completion
of the negotiation process, regardless of its outcome, a
new greeting is issued by both BEEP peers” [22]. When
transport security negotiation on a channel is successful,
all subsequent trafﬁc on that session is secured by the
underlying transport security. Similar to BEEP authen-
tication, privacy is provided on a per-session basis.
6.7 BEEP Proﬁles
In the BEEP framework, each channel is associated
with a BEEP proﬁle. A BEEP proﬁle speciﬁes the syn-
tax and semantics of messages being exchanged over a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:04:41 UTC from IEEE Xplore.  Restrictions apply. 
channel using the proﬁle. An application-layer proto-
col (such as IDP) using BEEP would be designed as one
or more related BEEP proﬁles. Each BEEP proﬁle is
identiﬁed by its proﬁle URI [2]. These proﬁle URIs are
exchanged between the peers during the BEEP session
greeting, advertising the proﬁles that each peer is willing
to use.
There are two basic types of proﬁles, and these deter-
mine the operations a proﬁle may make on its channel
and the underlying session.
(cid:127) Tuning proﬁles: these are used to perform initial-
ization, or “tuning”, once the BEEP session is es-
tablished. For instance, proﬁles providing trans-
port security, authentication, or application-layer
tunneling would be tuning proﬁles. Thus tuning
proﬁles establish the characteristics of a channel,
such as authentication, privacy, etc..
(cid:127) Regular proﬁles: these are used to perform data
exchange. Usually, these proﬁles are used after
the initial tuning has been completed. Thus, reg-
ular proﬁles establish the actual exchange of data
between peers over the channel.
6.8 Transport Mapping
BEEP is a generalized protocol framework, and as
such it does not rely directly on any particular trans-
port protocol. Instead, BEEP speciﬁes a collection of
requirements on how an underlying transport protocol
must support a BEEP session. Then, separate “trans-