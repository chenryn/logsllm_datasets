**Title: Beauty and the Beast: Diverting Modern Web Browsers to Build Unique Browser Fingerprints**

**Authors:**
- Pierre Laperdrix, INSA-Rennes & INRIA, Rennes, France
- Walter Rudametkin, University of Lille & INRIA, Lille, France
- Benoit Baudry, INRIA, Rennes, France

**Conference:**
2016 IEEE Symposium on Security and Privacy

**Abstract:**
The number of people using the web and the time they spend online continue to grow. This growth is accompanied by rapid advancements in web technologies, which aim to enhance user experience. These advancements include more interactive web experiences (e.g., JavaScript libraries, HTML5 innovations), increased web availability (e.g., mobile devices), improved security (e.g., deprecation of Flash and NPAPI plugins), and enhanced privacy (e.g., stricter cookie legislation and privacy extensions like Ghostery and AdBlock).

However, these modern browser technologies also provide a rich ecosystem of exploitable data that can be used to build unique browser fingerprints. Our research investigates the effectiveness of browser fingerprinting in today's environment. Over the past year, we have collected 118,934 fingerprints, each composed of 17 attributes gathered using the latest web technologies. We demonstrate that HTML5 innovations, particularly the Canvas API, provide access to highly discriminating attributes. Additionally, we show that browser fingerprinting is equally effective on mobile devices as it is on desktops and laptops, albeit for different reasons due to their more constrained hardware and software environments. We also evaluate how browser fingerprinting could become less of a threat to user privacy if certain technological evolutions continue (e.g., the disappearance of plugins) or are adopted by browser vendors (e.g., standardized HTTP headers).

**Index Terms:**
- Browser fingerprinting
- Privacy
- Software diversity

**I. Introduction**
The world wide web has transformed communication in just a few decades. The number of users and the time spent on the web are constantly increasing. Consequently, the technologies that enrich the user experience are evolving rapidly. Each technology serves a specific purpose. For example, modern JavaScript libraries enable the creation of dynamic and interactive web applications, while mobile devices such as smartphones and tablets allow users to access the web on the go. Browser and protocol specifications, such as HTML5, are redefining the capabilities of web applications. The browsers themselves are rapidly changing, becoming competitive testing grounds for new technologies.

Surprisingly, once ubiquitous technologies like Flash, Silverlight, QuickTime, and Java plugins are quickly becoming obsolete. At the same time, concerned web users are becoming more aware of practices that compromise their privacy and comfort, as evidenced by the popularity of browser extensions like AdBlock, Ghostery, Disconnect, and others.

Browsers are our gateway to the web, and to provide rich, satisfying, and beautiful services, websites require detailed information about the browser and its environment. Through various APIs and technologies, modern browsers freely provide this information, allowing websites to better utilize the user's resources. Well-behaved websites only request necessary information to deliver their services, but the potential for misuse exists. Small differences in users' systems can be exploited by attackers to collect as much information as possible.

Browser fingerprinting involves collecting data about a user's browser and system configuration when they visit a website. This process can reveal a significant amount of information about the user's software and hardware environment, ultimately creating a unique identifier, or browser fingerprint. The privacy implications are significant because these fingerprints can be used to track users. Recent studies by Nikiforakis et al. [1] and Acar et al. [2] highlight the widespread adoption of browser fingerprinting. Large companies like Google implicitly acknowledge its use (e.g., Google's privacy policy update of June 2015 mentions the use of "technologies to identify your browser or device" [3], which can be interpreted as including browser fingerprinting).

Our work provides an in-depth analysis of the extent to which today's web technologies enable unique user identification through browser fingerprinting. This analysis is based on over 118,000 fingerprints collected through the AmIUnique.org website. The fingerprints include 17 attributes, some of which are accessed using the latest web technologies, such as the HTML5 canvas element and the WebGL API. We show that HTML5 innovations provide access to highly discriminating data. Additionally, we present the first extensive study of browser fingerprinting on mobile devices, which are becoming the primary platform for web browsing [5]. Despite the more constrained software environments on mobile devices, browser fingerprinting remains effective, with differentiating attributes that differ significantly from those on desktops and laptops.

Our empirical observations indicate that while recent web technologies enhance the user experience, they also provide access to a wide range of information that can be easily combined into a likely unique fingerprint. The tension between the comfort of web browsing and the desire for anonymity currently favors comfort at the expense of privacy. However, the disappearance of highly discriminating attributes on desktops (e.g., obtained through Flash) and the absence of such attributes on mobile devices suggest that it is possible to improve privacy and anonymity on the web while maintaining a modern and comfortable browsing experience. We explore possible technological evolutions in web browsers and calculate their impact on browser fingerprinting. Our scenarios range from the definitive death of Flash (49% of visitors on AmIUnique.org had Flash disabled) to the premature disappearance of JavaScript.

**Key Contributions:**
- We provide a 17-attribute fingerprinting script that uses modern web technologies.
- We perform the first large-scale study of Canvas fingerprinting, following a test reported by Acar et al. [6] along with other JavaScript attributes. We show that canvas fingerprinting is one of the most discriminating attributes.
- We demonstrate the effectiveness of mobile device fingerprinting, with 81% of unique mobile fingerprints in our dataset despite the lack of plugins and fonts. We show that the variety of mobile models (different vendors with different firmware versions) results in very rich user-agents and revealing canvas usage.
- We explore scenarios of possible technological evolutions to improve privacy and simulate their impact on browser fingerprinting using our dataset. Notably, we find that removing plugins and using generic HTTP headers could reduce desktop fingerprint uniqueness by 36%.

**Paper Organization:**
- Section II describes our script and provides descriptive statistics about our dataset.
- Section III investigates the impact of the most recent technology on fingerprint diversity.
- Section IV details the analysis of mobile fingerprint diversity.
- Section V evaluates the impact of possible future scenarios on fingerprint-based identification.
- Section VI discusses related work.
- Section VII concludes the paper.

**II. Dataset**
We launched the AmIUnique.org website in November 2014 to collect browser fingerprints for an in-depth analysis of their diversity. The first part of this section presents the set of attributes we collect in our browser fingerprinting script and the techniques we use to collect them. We then provide general descriptive statistics about the 118,934 fingerprints in our dataset. Finally, we compare our dataset with the only other available set of fingerprint statistics, provided by Eckersley in 2010 [7].

**A. AmIUnique.org**
1. **Fingerprinting Script:**
   We implemented a browser fingerprinting script that leverages state-of-the-art techniques [4], [6] and some new browser APIs. Table I lists the attributes, their sources (HTTP, JavaScript, or Flash), the number of distinct and unique values, and an example of a complete browser fingerprint. The top 10 attributes were presented by Eckersley, and the 7 attributes at the bottom of the table have been discussed in other works. We are the first to collect these 7 attributes on a large scale and combine them as part of a fingerprint. Below, we detail these 7 attributes:
   - **List of HTTP Headers:** When connecting to a server, browsers send headers such as the user-agent, desired language, and supported encoding. Some software and browser extensions modify or add headers, providing extra details about the device's configuration. These headers are defined in the HTTP protocol and can always be acquired by the server.
   - **Platform:** The value in the `navigator.platform` property provides information about the user's operating system. While this information is already in the user-agent, we collect the 'platform' value to detect modified or inconsistent fingerprints.
   - **Do Not Track/Use of an Ad Blocker:** These two attributes are directly related to privacy and help differentiate privacy-conscious users from others.
   - **WebGL Vendor and Renderer:** Described by Mowery et al. [4], these attributes provide information about the underlying GPU of the device via the HTML WebGL API.
   - **Canvas:** Introduced by Acar et al. [6], the HTML5 Canvas element allows us to perform tests on both the hardware and operating system by rendering a picture following a fixed set of instructions.

**Table I: Browser Measurements of AmIUnique Fingerprints with an Example**

| Attribute                  | Source      | Distinct Values | Unique Values | Example                                                                                      |
|----------------------------|-------------|-----------------|---------------|----------------------------------------------------------------------------------------------|
| User agent                 | HTTP header | 11,237          | 6,559         | Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36 |
| Accept                     | HTTP header | 131             | 42            | text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8                   |
| Content encoding           | HTTP header | 4,694           | 62            | gzip, deflate, sdch                                                                          |
| Content language           | HTTP header | 4,694           | 62            | en-us,en;q=0.5                                                                               |
| List of plugins            | JavaScript  | 47,057          | 39,797        | Plugin 1: Chrome PDF Viewer. Plugin 2: Chrome Remote Desktop Viewer. Plugin 3: Native Client. Plugin 4: Shockwave Flash... |
| Cookies enabled            | JavaScript  | 2               | 0             | yes                                                                                          |
| Use of local/session storage | JavaScript  | 2               | 0             | yes                                                                                          |
| Timezone                   | JavaScript  | 55              | 0             | -60 (UTC+1)                                                                                  |
| Screen color depth         | JavaScript  | 6               | 0             | 24                                                                                           |
| Screen resolution          | JavaScript  | 2,887           | 0             | 1920x1200                                                                                    |
| List of fonts              | Flash plugin | 36,202          | 31,007        | Abyssinica SIL, Aharoni CLM, AR PL UMing CN, AR PL UMing HK, AR PL UMing TW...             |
| List of HTTP headers       | HTTP headers | 1,182           | 0             | Referer X-Forwarded-For Connection Accept Cookie Accept-Language Accept-Encoding User-Agent Host |
| Platform                   | JavaScript  | 187             | 0             | Linux x86_64                                                                                 |
| Do Not Track               | JavaScript  | 7               | 0             | yes                                                                                          |
| Canvas                     | JavaScript  | 8,375           | 0             | NVIDIA Corporation                                                                           |
| WebGL Vendor               | JavaScript  | 26              | 0             | GeForce GTX 650 Ti/PCIe/SSE2                                                                 |
| WebGL Renderer             | JavaScript  | 1,732           | 0             | no                                                                                           |
| Use of an ad blocker       | JavaScript  | 2               | 0             | no                                                                                           |

It should be noted that the WebGL Vendor and WebGL Renderer attributes were added after our site was launched. We isolated the results obtained from these two attributes (values collected after fingerprint number 45,474).

We tested other attributes for inclusion in the fingerprints, but the results were inconclusive, and we decided to discard them. We designed a test that renders 3D volumes through the WebGL API, as first tested by Mowery et al. [4]. However, after analyzing more than 40,000 fingerprints, the test proved to be too brittle and unreliable, as a simple page reload with a different window size on a single device could change the value. Appendix B provides more details on this WebGL test. We also tested the collection of information based on the device's hardware performance, like the Octane JavaScript benchmark, but they proved to be too long and too intensive to execute. Finally, we included other Flash attributes that proved useful for detecting inconsistencies but did not increase fingerprint uniqueness. More details can be found in Appendix C.

2. **Data Collection:**
   AmIUnique.org is a website dedicated to browser fingerprinting, aimed at both collecting data about device diversity and raising awareness about the privacy implications of fingerprinting. All visitors are informed of our goal with links to our privacy policy and FAQ sections, and they must explicitly click a button to trigger the collection of their device's fingerprint.

   When a user initiates the connection to the page containing our fingerprinting script, the server immediately collects the HTTP headers. If the user has not blocked JavaScript, the browser runs the script to collect the bulk of the fingerprint data. If Flash is present, we collect additional data. Our script takes a few hundred milliseconds to create a fingerprint. The contents of each fingerprint depend on the browser, its configuration, and the hardware and software environment.

   We distinguish three main categories of fingerprints in our dataset:
   - Those with JavaScript and Flash activated (43% of fingerprints)
   - Those with JavaScript activated but not Flash (41%)
   - Those with no JavaScript, and hence, no Flash (16%)

   Since our work focuses on fingerprinting modern browsers and analyzing the importance of the attributes in Table I, we do not consider fingerprints with no JavaScript. Fingerprints without JavaScript only include values for the HTTP headers (i.e., 5 attributes), which drastically reduces the functionality we are studying.

   To prevent collecting multiple copies of the same fingerprint from the same user, we store a cookie on the user's device with a unique ID and keep a hashed version of the IP address. These two pieces of information allow us to identify returning devices, which represent a negligible part of our dataset.

   We communicated our website on platforms like Slashdot, Framasoft, Clubic, social media channels like Facebook and Twitter, and newspapers like Le Monde. As of February 15th, 2015, we collected 142,023 fingerprints, which were reduced to 118,934 after removing fingerprints without JavaScript. However, our visitors are likely savvy Internet users who are aware of potential online privacy issues, so our data is biased towards users who care about privacy and their digital footprint.

**B. Descriptive Statistics**
Tables I and II summarize the essential descriptive statistics of the AmIUnique dataset. Table II presents the distribution of plugins, fonts, and headers in our dataset. To obtain these numbers, we decomposed each list of values into single elements and studied how common they are by looking at the number of fingerprints in which each element is present. We divided the results from the plugins, fonts, and headers into three categories: those that belong to less than 1% of collected fingerprints, those present in less than 0.1% of fingerprints, and those that appear in only one or two fingerprints.

**Table II: Summary of Statistics**

| Attr.    | Total     | <1% FP    | <0.1% FP  | <3 FP     |
|----------|-----------|-----------|-----------|-----------|
| Plugin   | 2,458     | 2,383 (97%) | 2,195 (89%) | 950 (39%) |
| Font     | 223,498   | 221,804 (99%) | 217,568 (97%) | 135,468 (61%) |
| Header   | 222       | 205 (92%) | 182 (82%) | 92 (41%)  |

**Unique and Distinct Values:**
The 'Distinct values' column in Table I provides the number of different values observed for each attribute, while the 'Unique values' column provides the number of values that occurred only once in our dataset. For example, attributes like the use of cookies or session storage have no unique values since they are limited to "yes" and "no." Other attributes can virtually take an infinite number of values. For instance, we observed 6,559 unique values for the user-agent attribute, due to the many possible combinations of the browser, its version, and the operating system. Visitors using an exotic OS with a custom browser, such as Pale Moon on Arch Linux, will likely present a rare user-agent, increasing the likelihood of being identified with just the user-agent.

These numbers show that some attributes are more discriminating than others, but they all contribute to building a unique and coherent fingerprint.

**Plugins:**
We observed 2,458 distinct plugins, assembled in 47,057 different lists of plugins. They cover a wide range of activities, such as reading uncommon file formats in the browser (e.g., FLAC files with the VLC Browser plugin), communicating with an antivirus or download client, launching a video game directly in the browser, and site-specific plugins for added functionality. Some plugins are so specific that they leak information beyond the computer, such as the company the user works for or the brand of smartphone, camera, or printer they use. 97% of plugins appear in less than 1% of collected fingerprints, and 89% in less than 0.1%. Many plugins are created for precise and narrow uses, allowing their users to be easily identified.

**Fonts:**
We observed 221,804 different fonts, assembled in 36,202 different lists of fonts. This high number shows the incredible variety of fonts, including support for additional alphabets, fonts for web designers, drawing shapes and forms, and different languages. On average, a Windows or Mac user has two to three times the number of fonts of a Linux user. 97% of fonts appear in less than 0.1% of fingerprints, and nearly 2/3 of them are only in one or two fingerprints. These percentages show how effective a list of fonts can be for fingerprinting and how critical it can be for users who want to protect their privacy. However, this list is provided through the Flash plugin, which is gradually disappearing from the web. We will see in Section V that removing access to the list of fonts has a small impact on identification.

**HTTP Headers:**
We observed 222 different HTTP headers, assembled in 1,182 different lists of headers. New headers are added to the standardized ones for various reasons and from different sources. Examples include:
- **The browser:** For example, the Opera browser on smartphones adds an X-OperaMin-Phone-UA header, and the Pufﬁn browser adds an X-Pufﬁn-UA header.
- **A browser extension:** For example, the FirePHP extension for Firefox adds the x-FirePHP and x-FirePHP-Version headers to each HTTP request.
- **The network:** Some headers show the use of proxies or protection systems.

As indicated in Table II, 182 headers out of 222 appear in less than 0.1% of the collected fingerprints, and 92 of them come from only one or two fingerprints. These statistics mean that some HTTP headers are highly discriminating and greatly affect the uniqueness of a fingerprint.

**C. Statistical Validity of the Dataset**
This section presents a series of tests to compare our dataset with the fingerprinting statistics provided by Eckersley in 2010.

1. **Mathematical Treatment:**
   **Entropy:**
   We use entropy to quantify the level of identifying information in our dataset.