  you 
  only 
  use 
  as 
  output 
17 
Reverse 
  Lookups 
18 
How 
  reverse 
  lookups 
  work 
 Automa:c 
  lookup 
  in 
  props.conf: 
  [splunk_web_access] 	LOOKUP-ul = user_location user OUTPUT location 
  Reverse 
  lookup: 
  Search 
  for 
  location 
  rather 
  than 
  user: 	index=_internal location="Las Vegas" 
  Splunk 
  translates 
  that 
  intotranslates 
  that 
  into 
  this 
  normalizedSearch: index=_internal 
(((sourcetype=splunk_web_access) AND  ((user=Martin) OR (user=Tom)) 
)) OR (location="Las Vegas") 
19 
Actually, 
  I 
  lied… 
index=_internal (((sourcetype=splunk_web_access) AND ((((((sourcetype=A) AND ((username=Martin))) OR 
	 ((sourcetype=B) AND ((uid=Martin))) OR  
	 ((sourcetype=audittrail) AND ((uid=Martin)))) OR  (user=Martin))) OR(((((sourcetype=A) AND ((username=Tom))) OR 
	 ((sourcetype=B) AND ((uid=Tom))) OR  
	 ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom)))))) OR (location="Las Vegas") 
 Despite 
  defining 
  the 
  lookup 
  on 
  splunk_web_access, 
  other 	sourcetypes‘ 
  props.conf 
  sewngs 
  radiate 
  into 
  this 
  search 
20 
Expanding 
  to 
  more 
  sourcetypes 
 Splunk‘s 
  _internalsourcetypes 
 Splunk‘s 
  _internal 
  index 
  has 
  seven 
  sourcetypes 
  with 
  a 
  user 
  fieldindex=_internal (((sourcetype=scheduler) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND ((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR ((sourcetype=splunk_btool) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND ((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR((sourcetype=splunk_web_access) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR ((sourcetype=splunk_web_service) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND ((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR ((sourcetype=splunkd) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND ((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR((sourcetype=splunkd_access) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND ((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR (user=Tom))))) OR 
((sourcetype=splunkd_ui_access) AND ((((((sourcetype=A) AND ((username=Martin))) OR ((sourcetype=B) AND((uid=Martin))) OR ((sourcetype=audittrail) AND ((uid=Martin)))) OR (user=Martin))) OR (((((sourcetype=A) AND ((username=Tom))) OR ((sourcetype=B) AND ((uid=Tom))) OR ((sourcetype=audittrail) AND ((uid=Tom)))) OR 
(user=Tom)))))) OR (location="Las Vegas") 
21 
DEMO 
	22 
A 
  loca:on 
  with 
  more 
  than 
  two 
  users?   50 
  users 
  produce 
  a 
  72kB 
  normalizedSearch 
  that72kB 
  normalizedSearch 
  that 
  broke 
  PowerPoint  No:ceable 
  overhead 
  during 
  Parsing Job... 
  phase 
 That‘s 
  with 
  three 
  field 
  aliases 
  and 
  no 
  calculated 
  fields 
  – 
  imagine 
  20+! 
 Above 
  50 
  values 
  per 
  lookup 
  Splunk 
  will 
  revert 
  to 
  „classic“behavior: 	Load 
  all 
  events, 
  filter 
  later 
23 
Mi:ga:on 
  strategieslater 
23 
Mi:ga:on 
  strategies 
  (1) 
 Subsearch 
  using 
  inputlookup 
	index=_internal 
  [inputlookup 
  user_loca:on 
  | 
  search 
  loca:on="Las 
  Vegas" 
  | 
  fields 	user] 
 Removes 
  the 
  per-­‐sourcetype 
  duplica:on 
 Lets 
  you 
  choose 
  between 
  reverse 
  lookups 
  and 
  classic 
  behavior  Ignores 
  the 
  configured 
  knowledge 
  per 
  sourcetypeknowledge 
  per 
  sourcetype 
  More 
  effort 
  required 
  to 
  write 
  and 
  maintain 
  searches 
  Not 
  evenmype-­‐compa:ble 
 Subsearch 
  overhead 
24 
Mi:ga:on 
  strategies 
  (2) 
 Define 
  the 
  per-­‐sourcetype 
  automa:c 
  lookup 
  using 
  sourcetype-­‐	specific 
  input 
  fields 
	LOOKUP-ul = user_location user AS username 	OUTPUT location 
 Removes 
  the Removes 
  the 
  per-­‐alias 
  duplica:on 
  Transparent 
  to 
  the 
  search 
  and 
  user 
  More 
  effort 
  required 
  to 
  write 
  and 
  maintain 
  knowledge 
  objects  Retains 
  the 
  per-­‐sourcetype 
  duplica:on 
25 
Removed 
  80% 
  of 
  key-­‐value 
  pairs 
from 
  the 
  normalizedSearch! 
26 
Mi:ga:on 
  strategies 
  (3) 
 Define 
  the 
  per-­‐sourcetype Define 
  the 
  per-­‐sourcetype 
  automa:c 
  lookup 
  using 
  sourcetype-­‐	specific 
  output 
  fields 
	LOOKUP-ul = user_location user OUTPUT location 	AS sourcetype_location 
 Removes 
  the 
  per-­‐sourcetype 
  duplica:on 
  Not 
  transparent 
  at 
  all 
  More 
  effort 
  required 
  to 
  write 
  and 
  maintain 
  knowledge 
  objects  Only 
  really 
  viable 
  ifreally 
  viable 
  if 
  hidden 
  behind 
  evenmypes 
  and/or 
  tags 
 Retains 
  the 
  per-­‐alias 
  duplica:on 
27 
Mi:ga:on 
  strategies 
  (4) 
 Replace 
  per-­‐sourcetype 
  lookups 
  with 
  broader 
  props.conf 
  stanzas   Wildcards 
  on 
  source 
  or 
  host 
	[source::*access.log*] 
 Unofficial: 
  Wildcards 
  on 
  sourcetype 
	[(?::){0}splunk*] 
 Removes 
  the[(?::){0}splunk*] 
 Removes 
  the 
  per-­‐sourcetype 
  duplica:on 
  Transparent 
  to 
  the 
  search 
  and 
  user 
 Sourcetype 
  wildcards 
  are 
  neither 
  documented 
  nor 
  supported  Retains 
  the 
  per-­‐alias 
  duplica:on 
28 
70% 
  key-­‐value 
  pair 
reduc:on! 
29 
Indexed 
  tokens 
  footnote 
  The 
  normalizedSearch 
  generated 
  by 
  reverse 
  lookupsby 
  reverse 
  lookups 
  can 
  be 
  efficient: index=_internal location="Las Vegas" 
index=_internal 
(((sourcetype=splunk_web_access) AND 
 ((user=Martin) OR (user=Tom)) 
)) OR (location="Las Vegas") 
  But: 
  Splunk 
  is 
  looking 
  for 
  a 
  literal 
  location="Las Vegas"! 
  Watch 
  out 
  for 
  location=0 
  or 
  similar 
  values 
  that 
  aren‘t 
  unique-­‐ish 
  Thisaren‘t 
  unique-­‐ish 
  This 
  can 
  blow 
  up 
  your 
  scanCount 
  and 
  search 
  dura:on 
  More 
  on 
  dealing 
  with 
  indexed 
  tokens 
  aAer 
  the 
  end 
  of 
  the 
  deck 
30 
Evenmypes 
31 
How 
  evenmypes 
  work 
  Store 
  a 
  search 
  filter 
  or 
  fragments 
  thereof 
  in 
  a 
  reusable 
  box 
 No 
  pipes, 
  no 
  subsearches 
  Run 
  searchno 
  subsearches 
  Run 
  search 
  and 
  see 
  searchCanBeEventType 
  in 
  Job 
  Inspector   eventtype=foo 
  expands 
  to 
  the 
  stored 
  search 
  fragment 
  eventtype=f* 
  expands 
  to 
  an 
  OR‘d 
  list 
  of 
  matching 
  evenmypes   Events 
  that 
  match 
  an 
  evenmype 
  have 
  their 
  eventtype 
  field 
  set, 	regardless 
  of 
  whether 
  the 
  evenmypeof 
  whether 
  the 
  evenmype 
  was 
  used 
  in 
  the 
  search 
  or 
  not 
32 
What 
  are 
  evenmypes 
  good 
  at? 
 Two 
  different 
  systems 
  likely 
  don‘t 
  log 
  login 
  amempts 
  the 
  same 
  way  Define 
  evenmypes 
  for 
  each 
  system, 
  search 
  on 
  evenmypes 
	–Tag 
  your 
  evenmypes 
  and 
  search 
  on 
  tags 
 Configured 
  knowledgetags 
 Configured 
  knowledge 
  simplifies 
  searches 
  Great 
  way 
  to 
  hide 
  complexity 
  from 
  the 
  searcher 
  Add 
  systems 
  to 
  exis:ng 
  searches 
  without 
  touching 
  searches 
  Even 
  when 
  not 
  searching 
  on 
  evenmypes, 
  looking 
  at 
  the 
  eventtype 	field 
  helps 
  quickly 
  understand 
  results 
33 
Splunk 
  login 
  example33 
Splunk 
  login 
  example 
  TA-­‐splunk, 
  evenmypes.conf: 
  [splunk_access] 
search = index=_audit "action=login attempt" NOT "action=search" 
normalizedSearch: 
  ((index=_audit "action=login attempt" NOT "action=search")) 
  Note 
  how 
  Splunk 
  chose 
  not 
  to 
  use 
  action="login attempt"! 
 Avoids 
  the 
  wrath 
  of 
  calculated 
  fields 
  and 
  aliases 
  infields 
  and 
  aliases 
  in 
  the 
  search 
  Search 
  relies 
  on 
  structure 
  of 
  raw 
  events 
  instead 
  of 
  field 
  extrac:ons
  The 
  results 
  contain 
  the 
  CIM-­‐compa:ble 
  action 
  regardless 
34 
Tags 
35 
How 
  tags 
  work 
 Give 
  a 
  set 
  of 
  field=value 
  pairs 
  a 
  common 
  name  No 
  wildcarded 
  field=v* 
	–can 
  be 
  workedfield=v* 
	–can 
  be 
  worked 
  around 
  with 
  tagged 
  evenmypes
  tag=foo 
  expands 
  to 
  the 
  list 
  of 
  field=value 
  pairs 
  individually   tag=f* 
  expands 
  to 
  an 
  OR‘d 
  list 
  of 
  matching 
  tags 
  Events 
  that 
  match 
  a 
  tag 
  have 
  their 
  tag 
  field 
  set 
  accordingly   For 
  each 
  tagged 
  field, 
  addi:onally 
  set 
  tag::fieldaddi:onally 
  set 
  tag::field 
  field 
36 
What 
  are 
  tags 
  good 
  at? 
 Homogenize 
  system-­‐specific 
  values 
  to 
  allow 
  unified 
  searches 
  Great 
  in 
  combina:on 
  with 
  evenmypes: 
–Evenmypes 
  define 
  system-­‐specific 
  searches 
–Tags 
  on 
  those 
  evenmypes 
  provide 
  a 
  common 
  interface 
–Searches 
  on 
  those 
  tags 
  don‘t 
  needon 
  those 
  tags 
  don‘t 
  need 
  to 
  know 
  the 
  systems 
  par:cularly 