pubsubPattern
"book.
client-8
client
 pubsubPattern
pattern
client-8
client
图 18-10  pubsubPattern
pubsubPattern
pubsubPattern
结构示例
client-9
client
"news.*"
pattern
client-9
client
---
## Page 301
那么当客户端client-9执行命令
属性为被退订模式，并且 client 属性为执行退订命令的客户端的 pubsubPattern 结构。
个或某些模式的时候，服务器将在 pubsub_patterns 链表中查找并删除那些 pattern
18.2.2
加的 pubsubPattern 结构。
后，pubsub_patterns 链表将更至新图 18-13 所示的状态，其中用虚线包围的是新添
模式的退订命令PUNSUBSCRIBE是PSUBSCRIBE 命令的反操作：当一个客户端退订某
PUNSUBSCRIBE "news.*"
def psubscribe (*all_input_patterns) :
PSUBSCRIBE命令的实现原理可以用以下伪代码来描述：
pubsub_patterns
退订模式
for pattern in all_input_patterns:
#遍历输入的所有模式
pubsub_patterns
redisServer
redisServer
图 18-14
server.pubsub_patterns.append (pubsubPattern)
#将新的 pubsubPattern 追加到 pubsub_patterns 链表末尾
pubsubPattern.pattern = pattern
pubsubPattern.client
pubsubPattern
创建新的pubsubPattern结构
记录被订阅的模式，
图 18-13 执行 PSUBSCRIBE 命令之后的 pubsub_patterns 链表
执行 PUNSUBSCRIBE 命令之前的 pubsub_patterns 链表
pubsubPattern
以及订阅模式的客户端
pubsubPattern
"music.*"
 pattern
client-7
client
"music.*"
pattern
client-7
client
client
pubsubPattern
pubsubPattern
"book.*"
pattern
client-8
client-8
pattern
client
client
pubsubPattern
"news.*
pattern
_client-9
第18章
 pattern
client-9
client
发布与订阅·297
---
## Page 302
298·第四部分独立功能的实现
channels 字典里找到频道 channel 的订阅者名单（一个链表），然后将消息发送给名单
了将消息发送给 channel 频道的所有订阅者，PUBLISH命令要做的就是在 pubsub_
18.3.1将消息发送给频道订阅者
发送给 pattern 模式的订阅者。
发送给频道channel的时候，服务器需要执行以下两个动作：
18.3
将被删除，pubsub_patterns 链表将更新至图 18-15 所示的样子。
之后，client 属性为 client-9，pattern 属性为"news.*"的 pubsubPattern 结构
因为服务器状态中的 pubsub_channels 字典记录了所有频道的订阅关系，所以为
接下来的两个小节将分别介绍这两个动作的实现方式。
2）如果有一个或多个模式 pattern 与频道 channel相匹配，那么将消息 message
1）将消息 message 发送给channel 频道的所有订阅者。
def punsubscribe(*all_input_patterns):
PUNSUBSCRIBE命令的实现原理可以用以下伪代码来描述：
发送消息
for pattern in all_input_patterns:
遍历所有要退订的模式
for pubsubPattern in server.pubsub_patterns:
非遍历 pubsub_patterns 链表中的所有 pubsubPattern 结构 
图 18-15 执行 PUNSUBSCRIBE 命令之后的 pubsub_patterns 链表
 pubsub_patterns
if client == pubsubPattern.client and \
#如果当前客户端和 pubsubPattern 记录的客户端相同
redisServer
 Server.pubsub_patterns.remove (pubsubPattern)
那么将这个 pubsubPattern 从链表中删除
pattern == pubsubPattern.pattern:
pubsubpattern
"music.*"
pattern
client-7
client
pubsubPattern
pattern
client-8
client
---
## Page 303
送给订阅了这些模式的客户端。
历整个 pubsub_patterns 链表，查找那些与 channel 频道相匹配的模式，并将消息发
将消息发送给所有与 channel 频道相匹配的模式的订阅者，PUBLISH 命令要做的就是遍
18.3.2
client-2和client-3。
并通过遍历链表将消息"hello"发送给"news.it"频道的三个订阅者：client-1、
那么PUBLISH命令将在 pubsub_channels字典中查找键"news。it"对应的链表值,
所示。
上的所有客户端。举个例子，假设服务器 pubsub_channels 字典当前的状态如图 18-16
举个例子，假设 pubsub_patterns 链表的当前状态如图18-17所示。
因为服务器状态中的 pubsub_patterns 链表记录了所有模式的订阅关系，所以为了
PUBLISH命令将消息发送给频道订阅者的方法可以用以下伪代码来描述：
def channel_publish(channel, message) :
PUBLISH "newS.it" "hello"
如果这时某个客户端执行命令
将消息发送给模式订阅者
for subscriber in server.pubsub_channels[channel]:
#运行到这里，说明 channel频道至少有一个订阅者
if channel not in server.pubsub_channels:
#如果 channel键不存在于 pubsub_channels 字典中
将消息发送给所有订阅者
程序遍历channe1频道的订阅者链表
程序不做发送动作，直接返回
那么说明channel频道没有任何订阅者
return
send_message (subscriber, message)
 pubsub_channels
"news.business"
"news.sport"
"news.it"
图18-16 pubsub_channels 字典
client-4
client-1
client-5
→client-6
client-2client-3
第18章 
发布与订闵·299
---
## Page 304
300·第四部分独立功能的实现
诸如此类。
者模式的相关信息，比如某个频道目前有多少订阅者，又或者某个模式目前有多少订阅者，
18.4
令将消息"hello"发送给客户端client-9。
配，结果发现"news.it"频道和客户端client-9订阅的“news.*"频道匹配，于是命
PUBSUB 命令是 Redis 2.8新增加的命令之一，客户端可以通过这个命令来查看频道或
以下三个小节将分别介绍PUBSUB命令的三个子命令，以及这些子命令的实现原理，
最后，PUBLISH命令的实现可以用以下伪代码来描述：
def pattern_publish (channel, message):
那么PUBLISH命令会首先将消息"hello”发送给“news.it"频道的所有订阅者
def publish(channel, message) :
PUBLISH "news.it" "hello"
如果这时某个客户端执行命令
pubsub_patterns
查看订阅信息
pattern_publish(channel, message)
将消患发送给所有和 channel 频道相匹配的模式的订阅者
将消患发送给 channeI频道的所有订阅者
for pubsubPattern in server.pubsub_patterns:
#遍历所有棋式订阅消息
redisServer
if match(channel, pubsubpattern.pattern) :
#如果频道和模式相匹配
 send_message (pubsubPattern.client, message)
#那么将消息发送给订阅该模式的客户端
图18-17 pubsub_patterns 链表
pubsubPattern
client-
client
pubsubPattern
"book.
client-8
client
pubsubPattern
"news.
client-9
client
---
## Page 305
18.4.2
两个频道，因为只有这两个频道和"news.[is]模式相匹配：
被订阅的四个频道：
来说，执行PUBSUB CHANNELS 命令将返回服务器目前
来描述：
订阅的频道），然后记录并返回所有符合条件的频道来实现的，这个过程可以用以下伪代码
参数是可选的：
18.4.1
PUBSUB CHANNELS [patterm]子命令用于返回服务器当前被订阅的频道，其中 pattern
PUBSUBNUMSUB[channel-1 channel-2 ..channel-nJ子命令接受任意多个频道作为输
另一方面，执行 PUBSUB CHANNELS"news.[is]*”命令将返回"news.it"和"news.sport"
redis> PUBSUB CHANNELS
举个例子，对于图18-18所示的 pubsub_channels字典
return channel_list
#向客户端返回频道列表
def pubsub_channels (pattern=None) :
这个子命令是通过遍历服务器 pubsub_channels 字典的所有键（每个键都是一个被
口 如果给定 pattern 参数，那么命令返回服务器当前被订阅的频道中那些与 pattern
?
 如果不给定 pattern 参数，那么命令返回服务器当前被订阅的所有频道。
L
"news.movie"
模式相匹配的频道。
"news.business"
"news.sport"
"news.it"
 PUBSUB NUMSUB
channel_list = [] 
#一个列表，用于记录所有符合条件的频道
：遍历服务器中的所有频道
 PUBSUB CHANNELS
当以下两个条件的任意一个满足时，将频道添加到链表里面：
(pattern is None) or match(channel, pattern):
）用户没有指定pattern 参数
图 18-18
"news.business"
pubsub_channels
"news.movie"
"news.sport"
"news.it"
 pubsub_channels
字典示例
第18章发布与订阅301
---
## Page 306
302·第四部分独立功能的实现
执行PUBSUBNUMSUB命令将获得以下回复：
用以下伪代码来描述：
回订阅者链表的长度来实现的（订阅者链表的长度就是频道订阅者的数量）这个过程可以
人参数，并返回这些频道的订阅者数量，
这个子命令是通过在 pubsub_channels 字典中找到频道对应的订阅者链表，然后返
redis> PUBsUB NUMSUB news.it news.sport news.business
举个例子，对于图 18-19 所示的 pubsub_channels字典来说，对字典中的四个频道
 def pubsub_numsub(*all_input_channels):
51
"1"
"news.movie"
"2"
"news.business"
u
"news.sport"
"3"
for channel in all_input_channels:
#遍历输入的所有频道
else:
#那么说明channel频道没有任何订阅者
如果 pubsub_channeis 字典中没有 channel这个键
pubsub_channels
"news.movie"
"news.business"
"news.sport"
#订阅者链表的长度就是订阅者数量
reply_channel_name (channel)
#返回频道名
"news.it"
reply_subscribe_count(0)
#返回频道名
client-5
client-4
client-1
client-10086
client-2→client-3
client-6
 news.movie
---
## Page 307
18.5
链表来说，执行PUBSUBNUMPAT命令将返回1：
命令将返回3：
度就是服务器被订阅模式的数量，这个过程可以用以下伪代码来描述：
18.4.3
而对于图 18-21所示的 pubsub_patterns 
举个例子，对于图 18-20 所示的 pubsub_patterns 链表来说，执行 PUBSUB NUMPAT
口服务器状态在pubsub_patterns 链表保存了所有模式的订阅关系：PSUBSCRIBE
def pubsub_numpat ():
PUBSUB NUMPAT子命令用于返回服务器当前被订阅模式的数量。
口 PUBLISH 命令通过访问 pubsub_channels 字典来向频道的所有订阅者发送消息
(integer) 1
redis> PUBSUB NUMPAT
(integer) 3
redis> PUBSUB NUMPAT
pubsub_patterns
patterns 链表中的信息来实现的。
通过访问 pubsub_patterns 链表来向所有匹配频道的模式的订阅者发送消息。
责移除客户端和被退订模式在链表中的记录。
命令负责将客户端和被订阅的模式记录到这个链表中，而PUNSUBSCRIBE命令则负
负责解除客户端和被退订频道之间的关联。
命令负责将客户端和被订阅的频道关联到这个字典里面，而UNSUBSCRIBE命令则