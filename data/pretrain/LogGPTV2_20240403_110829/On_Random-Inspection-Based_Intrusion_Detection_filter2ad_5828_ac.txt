will almost guarantee to fail on another.
From the above analysis, we see that is it very likely that an injected code
will execute more than k instructions without executing any library calls. We
will further validate this assumption with our experimental results in the next
section. We now move on to the second assumption: context switch occurs very
rarely in the VVP where no library calls are made.
Since the injected code is not making any library call, it is impossible for it
to get blocked. Thus the only reason for a context switch is the expiration of a
time slice. Now consider the following very conservative ﬁgures:
1. time slice in Windows ranges from 10ms to 200ms
2. Intel Pentium processor achieves 90 million instructions per second
From these two ﬁgures, we can assume that at least 900000 instructions will be
executed on any Windows machine before a time slice expires. Let us model time-
slice expiration as a Poisson process; the probability of expiration is 1/900000
at any time. The probability that a context switch will occur in the ﬁrst k
instructions of the VVP is then given by Pswitch(0) = 1 − e
900000 . With k ≤
− k
2400, we have Pswitch(0) ≤ 0.01. Thus, we have validated our second assumption.
As a result, we have shown that any injected code that executes more than k
instructions in their VVP will be detected by WindRain with probability close
to one. Our argument also shows that this is usually true for injected code.
5 Experimental Results
In this section, we will present the results of our experiments on WindRain. The
experiments attempt to evaluate WindRain at diﬀerent inspection frequencies.
176
S.P. Chung and A.K. Mok
The evaluations focus on the following three aspects: false negative rate, false
positive rate and performance overhead.
5.1 False Negative Rates
We have tested WindRain’s ability to detect MSBlast, Sasser, SQLSlammer,
Code Red and Welchia (aka Nachi). The experiments are carried out at three
diﬀerent inspection frequencies: once every 800 instructions, once every 1600 in-
structions and once every 2400 instructions. For each inspection frequency, we
repeated each attack 5 times, and WindRain is able to detect all the attacks for
all three conﬁgurations. In addition to testing whether WindRain can detect the
attack attempts, we are also interested in verifying our assumption in the previ-
ous section, namely, that injected code executes a large number of instructions
in their VVP, without executing any library calls. We validate this assumption
by noting when WindRain ﬁrst detect each of the 15 attack trails. The results
of our experiments are presented in Table 1.
Table 1. The following table shows when WindRain ﬁrst detects the attacks when
conﬁgured at diﬀerent inspection frequencies. The three rows show the results for three
diﬀerent inspection frequencies: once every 800, 1600 and 2400 instructions respectively.
For the entries of each row, “Decode” means WindRain detects the attack when the
injected code is decoding itself. “FindLib” means the attack is detected when the
injected code is resolving the addresses of library functions needed. “Spread” means
the attack is detected when it tries to infect other hosts. Each attack is repeated ﬁve
times for each inspection frequency, the number in the bracket indicates how many
times the attack is detected in the particular stage.
MSBlast
FindLib(5)
Welchia
Sasser
Decode(3), FindLib(2) Decode(3), FindLib(2)
800
1600 Decode(2), FindLib(3)
Decode(3), FindLib(2)
2400 Decode(1), FindLib(4) Decode(2), FindLib(3) Decode(1), FindLib(4)
FindLib(5)
SQLSlammer Code Red
Spread(5) FindLib(5)
Spread(5) FindLib(5)
Spread(5) FindLib(5)
From our analysis of the above data, we are certain that the VVP of Welchia,
Sasser and CodeRed contain more than 2400 instructions. This is because both
“Decode” and “FindLib” for these worms are used exclusively in their VVP
(while “FindLib” is used outside the VVP of MSBlast also). According to our
analysis in Sect. 4, this implies a detection probability close to 1 when WindRain
performs at least one inspection every 2400 instructions executed. We are also
pretty certain that WindRain cannot detect SQLSlammer in its VVP. However,
we are very certain that WindRain will detect any instance of SQLSlammer
with probability one. This is because the injected code is the entirety of the
SQLSlammer payload and runs on the stack indeﬁnitely long. In fact, this is
also the case for CodeRed.
However, since both MSBlast and Welchia use their library-function-locating
code more than once, it is possible for future variants to use this code more eﬃ-
ciently to evade detection. This is because once the “GetProcAddress” function
in kernel32.dll is located, address of any other library functions can be resolved
On Random-Inspection-Based Intrusion Detection
177
using this function (in fact, this is the method used by Sasser and CodeRed). In or-
der to clear such doubt, we experimented with the library-function-locating code
of the two worms. In our experiments, we copied the piece of code under concern
(with arguments for searching the “GetProcAddress” function) onto the stack and
execute them. We repeated each experiment 5 times, with WindRain perform-
ing an inspection every 2400 instructions, and see if it can detect the “attack”.
WindRain successfully detects all the 10 “attacks”. Thus we are pretty certain
that WindRain can detect both MSBlast and Welchia in their VVP, even if they
are modiﬁed to make more eﬃcient use of their library-function-locating code.
Another way to increase our conﬁdence in WindRain’s ability to detect the
ﬁve worms is to decrease the inspection frequency and see if it can still achieve
100% detection rate. Since SQLSlammer and CodeRed execute in “data space”
forever, we ﬁnd it unnecessary to perform such test for these worms. For both
MSBlast and Welchia, we ﬁnd that WindRain still achieves 100% detection when
conﬁgured to perform an inspection every 24000 instructions executed (as before,
we repeated each attacks 5 times). However, for Sasser, we tested WindRain by
increasing the interval between two inspections with step of 800 instructions.
We start with an inspection frequency of once every 2400 instrctions. We ﬁnd
WindRain miss the ﬁrst attack when performing inspection once every 7200
instructions. Among the ﬁve attacks tried at this frequency, only one is missed.
In conclusion, we are very conﬁdent that WindRain can detect the ﬁve worms
tested with probability very close to one. This is true even when WindRain
is performing inspection at a low frequency of once every 2400 instructions.
Furthermore, by detecting MSBlast, Welchia, Sasser and CodeRed in their VVP,
WindRain can guarantee to detect these attacks before they can cause any real
damage to the system. This is because in Windows, kernel services are only
accessible through library functions. Thus the Windows kernel is inaccessible to
the injected code when it is still in its VVP.
Finally, it appears possible to shorten the VVP of the tested worms by im-
proving their implementation. Nonetheless, we believe the underlying decoding
and library-function-locating algorithms will continue to have linear complexity.
With this observation, an inspection frequency of once every 800 instructions
should be suﬃcient to detect future injected code that is optimized to have
short VVP. However, we shall argue in Sect. 5.3 that the best way to guard
against these threats is to complement our system with obfuscation techniques.
5.2 False Positive Rates
We have evaluated the false positive rate of WindRain by performing some
daily activities with WindRain running on the background. In all of our tests,
WindRain is conﬁgured to perform an inspection every 800 instructions. By ex-
perimenting WindRain at such high inspection frequency, we have established
a worst-case false-positive rate. We expect the false-positive rate will only drop
when we decrease the inspection frequency of WindRain. Another reason for
choosing the number 800 is that we believe this inspection frequency is high
enough to detect most attacks with very high probability.
178
S.P. Chung and A.K. Mok
The daily activities we have tested include: surﬁng the web (using IE), read-
ing PDF ﬁles, creating word documents (using MSWord and Wordpad), viewing
PowerPoint presentations, connecting to a remote machine (using Telnet), com-
piling the entire WindRain system (using the MS VisualStudio for the applica-
tion part, and the MS DDK for the device driver part), ﬁle management (under
WindowsExplorer), playing MP3s (using WindowsMediaPlayer) and Quicktime
movies (using QTPlayer) and using a bunch of GNU tools that comes with cyg-
win (including all the utilities tested in the performance analysis). Finally, we
have also tried compiling and running Java programs while WindRain is running.
The ﬁrst false positives identiﬁed are from WindowsMediaPlayer and Win-
dowsExplorer. We ﬁnd both WindowsMediaPlayer and WindowsExplorer exe-
cute small fragments of code on the heap, which cause the false alarms. The
violating code executed on the heap are thunks that pass control to some call-
back functions. This turns out to be a well documented “workaround” to pass
the “this” pointer of C++ objects to callback functions. This technique allows
instance methods to be called by the callback mechanism. To tackle this prob-
lem, we modiﬁed WindRain to recognize the structure of the thunk and make
sure it is passing control to some callback function. After the modiﬁcation, there
are no more false alarms from these applications.
We have also observed occasional false positive when Microsoft software prompts
us to activate/register their products. We believe this is a technique to avoid bypass-
ing the corresponding check and use the software without activation/registration.
The major oﬀender in this category is winlogon.exe, which keeps prompting the
user to activate Windows. No more false positives are observed after we activate
Windows.
Finally, we ﬁnd that both the compilation and execution of Java programs
will lead to false positives in WindRain. The false positives from executing Java
application is caused by the JIT compilation in the underlying JVM. When na-
tive code is generated during runtime, they are kept in writable memory areas.
This is mainly for eﬃciency reasons and allows new native code to be writ-
ten without ﬁrst unprotecting the corresponding pages. The execution of these
dynamically-generated code will lead to false positives from WindRain. For the
compilation of Java code, we observe that the Java compiler uses code from the
JVM, which may explain the problem. We believe, in general, WindRain does
not handle programs that use dynamically-generated/self-modifying code very
well. A possible solution is to perform proﬁle-based anomaly detection using the
library/function-calling pattern of the monitored program. In this solution, in-
stead of determining whether “data” is being executed, the IDS will keep track
of the function-usage pattern of the monitored program. By building a normal
proﬁle of this pattern, the IDS can check if the observed function usage is nor-
mal. Any abnormal behavior is marked as intrusion. We believe this approach is
also useful in detecting existing-code attacks.
One last point about our experiments is that by running WindRain in a
Windows system, we have implicitly tested WindRain against those Windows
system processes. For system processes, we mean processes Windows created by
On Random-Inspection-Based Intrusion Detection
179
itself, including svchost.exe, lsass.exe, etc. In fact, it seems that these processes
are the ones that needed most protection. Our results show that WindRain has
zero false positive for all these processes after the user has activated Windows
with Microsoft. Thus it is possible to modify WindRain to only report intrusions
concerning these processes. This modiﬁcation will allow WindRain to provide
very useful protection to some major threats against Windows systems, while
maintaining a zero false-positive rate.
5.3 Performance Overhead
Since WindRain does not need to keep any record about diﬀerent processes, its
memory footprint is very small and is constant. The entire device driver (includ-
ing the interrupt service routine and all other code) is just 20KB. In other words
, WindRain has minimal space overhead. However, the frequent execution of the
interrupt service routine at inspection points can cause substantial overhead in
terms of execution time. In this section, we report WindRain’s runtime overhead
when tested on several programs in the SPEC2000 benchmark suite. The eﬀect
of the inspection frequency on the runtime overhead is studied by running the
benchmarks under 9 diﬀerent WindRain conﬁgurations.
Before we present the experimental results, let us brieﬂy describe our experi-
ments. Each benchmark program is executed six times. They are executed on an
otherwise idle Windows system with all the Windows system processes running
on the background. From the execution times measured for the six runs, one
outlier is removed. This helps to avoid any ﬂuctuation in the measured values
from aﬀecting our results. We establish the base execution time of the bench-
mark program by averaging the remaining ﬁve data points. For each inspection
frequency studied, the process is repeated with WindRain running under the
corresponding conﬁguration. Again, the execution time is measured six times
for each benchmark, and one outlier is removed to obtain ﬁve data points. The
averaged execution time is compared against the base execution time to obtain
%
n
i
d
a
e
h
r
e
v
o
e
c
n
a
m
r
o
e
P
f
 55
 50
 45
 40
 35
 30
 25
 20
 15
 10
 5
 0
 800
Performance Overhead vs Inspection Frequency
link41a
gap
gzip tif