（虽然一张表对应一张TOAST，但是同一条记录的不同变长字段，它们的TOAST记录是分开存放的，并不是同一条toast记录，所以才有这样的效果。）  
那么看看info1的更新会不会影响基表.   
```  
digoal=> select pg_relation_size('storage_test');  
 pg_relation_size   
------------------  
          1368064  
(1 row)  
```  
显然影响了, storage_test基表变大了,  
```  
digoal=> select 1368064-688128;  
 ?column?   
----------  
   679936  
(1 row)  
```  
除去PAGE头信息应该刚好大一倍。  
也就是说每条TUPLE对应的TOAST发生更新之后，基表的TUPLE中指向TOAST的地址发生了变化，因此需要重新生成一条新的TUPLE。  
接下来我们把info1和info2都改到基表中存储.  
```  
digoal=> alter table storage_test alter column info1 set storage main;  
ALTER TABLE  
digoal=> alter table storage_test alter column info2 set storage main;  
ALTER TABLE  
digoal=> vacuum full storage_test ;  
VACUUM  
digoal=> select reltoastrelid,reltoastidxid from pg_class where relname='storage_test';  
 reltoastrelid | reltoastidxid   
---------------+---------------  
      19403055 |             0  
(1 row)  
digoal=> select pg_relation_size('storage_test');  
 pg_relation_size   
------------------  
         81920000  
(1 row)  
digoal=> select pg_total_relation_size('storage_test');  
 pg_total_relation_size   
------------------------  
               82173952  
(1 row)  
digoal=> select pg_relation_size(19403055);  
 pg_relation_size   
------------------  
                0  
(1 row)  
```  
修改完后, 已经确认数据现在都存储在基表了.  
接下来修改info1的内容，看看要不要把info2也拷贝一份重新生成一条记录.  
```  
digoal=> update storage_test set info1=info2 ;  
UPDATE 10000  
digoal=> select pg_relation_size('storage_test');  
 pg_relation_size   
------------------  
        163840000  
(1 row)  
digoal=> select 163840000-81920000;  
 ?column?   
----------  
 81920000  
(1 row)  
```  
storage_test变大了一倍,说明info1更新时也需要拷贝info2的内容生成一条新的记录.  
## 小结  
1\. 从前面的测试可用看出当info1和info2字段都在TOAST中存储时, 更新info1不需要拷贝info2的内容. 但是需要拷贝基表中的所有字段.   
2\. 当info1和info2 都在基表中存储时，更新任何一个字段，这两个字段的内容都需要拷贝. 如 :   
```  
digoal=> vacuum full storage_test ;  
VACUUM  
digoal=> update storage_test set id=id ;  
UPDATE 10000  
digoal=> select pg_relation_size('storage_test');  
 pg_relation_size   
------------------  
        163840000  
(1 row)  
```  
3\.   
到底一个字段的更新在插入新数据时，会不会涉及到拷贝其他字段的内容。取决于其他字段的存储方式，在基础tuple中是一个指针，还是真实数据存储在基础TUPLE中。  
在基表中存储的字段存储选项如(main)，如果字段内容大于2k, 指向这些字段的是一个指针，而不是多个指针。  
例如 :   
a表的某 tuple :   
column1(main)(3k), column2(main)(3k), column3(extended)(3k)  
```  
update a set column1=?;  
```  
这条SQL新插入的记录需要拷贝column2的内容,新增column1的内容, 但不需要拷贝column3的内容.因为column3在tuple中是一个指针.  
```  
update a set column3=?;  
```  
这条SQL新插入的记录需要新增column3的内容, 不需要拷贝column1和column2的内容. 因为column1和column2在tuple中是一个指针.  
当字段存储选项如(extended)，如果字段内容大于2k, 指向这些字段的是多个指针(每个字段一个)，而不是一个指针。  
例如 :   
a表的某 tuple :   
column1(main)(3k), column2(extended)(3k), column3(extended)(3k)  
```  
update a set column1=?;  
```  
这条SQL新插入的记录需要新增column1的内容, 不需要拷贝column2和column3的内容. 因为column2和column3在tuple中是2个指针.  
```  
update a set column2=?;  
```  
这条SQL新插入的记录需要新增column2的内容, 不需要拷贝column1和column3的内容. 因为column1和column3在tuple中是2个指针.  
4\. 对于这方面的性能优化如何考虑呢  ?   
4\.1\. 如果一个表中的大部分字段(指基表中的字段)都可能被更新时, 并且不是在一条SQL中更新多个字段, 而是在多条SQL中更新不同字段.  
那么考虑把这个表拆成多个表比较好.  
4\.2\. 由于不管怎么更新都会涉及到基表的记录重新插入，所以不建议频繁分开字段更新的表字段太多。大部分字段集中在一条SQL语句中不考虑在内。  
## 参考  
以前写过几篇关于PostgreSQL PAGE DUMP的文章 :   
Use pageinspect EXTENSION view PostgreSQL Page's raw infomation  
http://blog.163.com/digoal@126/blog/static/16387704020114273265960/  
use pg_filedump dump block contents  
http://blog.163.com/digoal@126/blog/static/163877040201142610215685/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")