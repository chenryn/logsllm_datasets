title:Finding Dependencies between Cyber-Physical Domains for Security Testing
of Industrial Control Systems
author:John Henry Castellanos and
Mart&apos;ın Ochoa and
Jianying Zhou
Finding Dependencies between Cyber-Physical Domains for
Security Testing of Industrial Control Systems
John H. Castellanos
Martín Ochoa
Singapore University of Technology
Department of Applied Mathematics
Singapore University of Technology
Jianying Zhou
and Design
Singapore
PI:EMAIL
john_castellanos@mymail.sutd.edu.
and Design
Singapore
sg
and Computer Science
Universidad del Rosario
Bogotá, Colombia
PI:EMAIL
ABSTRACT
In modern societies, critical services such as transportation, power
supply, water treatment and distribution are strongly dependent
on Industrial Control Systems (ICS). As technology moves along,
new features improve services provided by such ICS. On the other
hand, this progress also introduces new risks of cyber attacks due
to the multiple direct and indirect dependencies between cyber and
physical components of such systems. Performing rigorous security
tests and risk analysis in these critical systems is thus a challenging
task, because of the non-trivial interactions between digital and
physical assets and the domain-specic knowledge necessary to
analyse a particular system. In this work, we propose a methodology
to model and analyse a System Under Test (SUT) as a data ow graph
that highlights interactions among internal entities throughout
the SUT. This model is automatically extracted from production
code available in Programmable Logic Controllers (PLCs). We also
propose a reachability algorithm and an attack diagram that will
emphasize the dependencies between cyber and physical domains,
thus enabling a human analyst to gauge various attack vectors that
arise from subtle dependencies in data and information propagation.
We test our methodology in a functional water treatment testbed
and demonstrate how an analyst could make use of our designed
attack diagrams to reason on possible threats to various targets of
the SUT.
CCS CONCEPTS
• Security and privacy → Distributed systems security; Infor-
mation ow control; Formal security models;
KEYWORDS
Cyber-Physical Systems, ICS Security, Information ow.
ACM Reference Format:
John H. Castellanos, Martín Ochoa, and Jianying Zhou. 2018. Finding Depen-
dencies between Cyber-Physical Domains for Security Testing of Industrial
Control Systems. In 2018 Annual Computer Security Applications Conference
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274745
582
(ACSAC ’18), December 3–7, 2018, San Juan, PR, USA. ACM, New York, NY,
USA, 13 pages. https://doi.org/10.1145/3274694.3274745
1 INTRODUCTION
Modern societies are increasingly dependent on new technologies,
in particular, those that allow for automatic or semi-automatic man-
agement of critical infrastructures such as transportation, power
supply, water treatment and distribution. This group of critical in-
frastructures are known as Industrial Control Systems (ICS). ICS are
an instance of the more general concept of Cyber-Physical Systems
(CPS. Such systems must cope with strict operational conditions,
such as reliable control strategy and real-time response.
The strong interaction between cyber and physical domains
makes ICS systems susceptible to cyber attacks with severe con-
sequences in the physical world. Some well-known examples of
spectacular cyber attacks to ICS are among others the Maroochy
wastewater system in Australia [22], the Stuxnet worm [14], the
German steel mill [17], and the Ukranian blackouts in 2015 and
2016 [2].
The dierent nature of Information Technology (IT) and Op-
erational Technology (OT) domains, and the risk of performing
aggressive security tests on operational systems (because of the
potential impact in terms of cost and even human life), makes it
infeasible to do security testing in ICS environments by adopting
methodologies, tools and techniques from the classical IT domain.
Works in the literature highlight the importance of understand-
ing the interaction between cyber and physical worlds help to
predict how attacks in the cyber domain would aect physical prop-
erties in Industrial Control Systems [6, 13]. On the other hand, they
also emphasise that the loss of situational awareness and controllabil-
ity of a system will lead to severe consequences for Cyber-Physical
Systems.
In [15], Lee highlights that extracting a model of interactions
between cyber and physical domains will help to nd vulnerabilities.
In the same line of thought, we believe that an ICS can be modelled
as a group of entities that interact to keep the system operating
in a controlled manner to deliver products/services under desired
circumstances. Information ow analyses can be then applied to this
model to extract interactions between cyber and physical domains.
Our idea aims to build a model from an operational system following
a white-box analysis approach. We represent this model as a data-
ow graph that shows how the information travels throughout the
system.
We propose a reachability analysis algorithm that lets us estimate
from which points in the cyber domain, called attack points, the
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
John H. Castellanos, Martín Ochoa, and Jianying Zhou
most adverse conditions and respond reliably. Typically, con-
trollers are programmed using one of the ve standardised
languages (Ladder Diagram, Instruction List, Structured Text,
Function Block Diagram, Sequential Function Charts) [11].
• A PLC program is continuously executed, each execution
happens in a determined period called scan cycles, which
enforces the controller to respond in real-time.
• A controller delivers signals to actuators to manipulate the
physical process (the plant). Typical examples of actuators
are valves, pumps and motors. Sensors read the conditions
of the plant and transmit its state to the controller.
• These three components (controllers, sensors and actuators)
build a closed-loop system to keep the physical process con-
trolled and monitored at all time.
Depending on the purpose of modelling, design, analysis or
testing of CPS systems, engineers and scientists use dierent mod-
elling paradigms, such as continuous dynamics, state machines,
synchronous-reactive and data-ow diagrams [16]. The level of
abstraction also plays a central role in determining the modelling
paradigm to use. Models built from rst principles can often rep-
resent parts of the physical plant, while state machines model the
general control strategy of the studied CPS.
Our approach aims to model a lower level representation of a
CPS where we can extract the correlation between physical and
cyber domains.
3 APPROACH
We model a CPS as a group of highly interactive entities; we call
this set a System Under Test (SUT). Inside the SUT, some entities
translate information between domains like sensors for physical-
to-cyber and actuators for cyber-to-physical. Other entities, such
as controllers (depicted as computation blocks in Fig. 1), have a
more crucial role, they build an approximate system state of the
SUT, and execute a preprogrammed control strategy according to it.
An information ow approach can adequately describe interactions
among entities.
Inside the SUT, information travels at dierent levels (as shown
in Fig. 1). Inside platforms, where a controller gets sensor readings
from the plant, estimates the SUT’s state, takes control decisions, ex-
ecutes a control logic (computation) and delivers control commands
to actuators. In this case, information ows in the direction sensor-
controller-actuator. Another level is among platforms; controllers
share information through the network fabric. They read/modify
controller’s internal states; information ows then in the direc-
tion controller-network-controller. Finally, the last level is in the
physical plant (inside the physical domain). In this level, actu-
ators change the plant’s state, and sensors capture new physical
states. At this level, information ows in the direction actuator-
plant-sensor.
3.1 Attack points and cyber-to-physical
interfaces
From a security perspective, CPS should enforce properties such
as controllability, observability, and stability of the system in the
presence of malicious actors. If we have a model of the SUT’s
information ow, we can estimate how the manipulation of entities
Figure 1: A basic representation of a Cyber-Physical System
[16], where two networked platforms with their computing
systems, sensors and actuators, interact with a physical sys-
tem (physical plant).
system can be aected, and what would be likely consequences in
the physical domain. We call these points that aect the physical
part of the system Cy2Phy interfaces. By computing the shortest
path distance, we design attack diagrams that will help analysts to
select the best options among suitable attack points per target.
We evaluated our methodology in a six-stage water treatment
testbed. We select 30% of physical components (actuators) as targets
and demonstrate how an attacker could aect all the selected targets
using attack diagrams.
This work aims to answer the following question. "How will an
attacker’s manipulations in the cyber domain propagate throughout
a cyber-physical system until they aect components in the physical
domain?"
This paper makes the following contributions:
• A framework to perform risk-based security testing on in-
dustrial control systems, based on an automated information
ow analysis of the components of the system under test.
• A methodology to model Industrial Control Systems, based
on programs coded in standard languages.
• A reachability algorithm to identify dependencies among
internal components in CPS.
2 BACKGROUND
Cyber-Physical Systems (CPS) are complex systems that combine
computing and communication to control physical processes. They
work in feedback loops where cyber components aect physical
ones and vice versa [15].
CPS harmonically combines two domains (cyber and physical) in
a closed-loop manner. Fig. 1 shows a block diagram representation
of components from the cyber domain such as computation and
network components, and elements from the physical domain such
as the physical plant, as well as components that play a role as
interfaces between these domains such as sensors and actuators. It
also includes how those components interact.
In a nutshell, the general functionality of a CPS is described as
follows:
• Programmable Logic Controllers (PLC) are computing sys-
tems which are specially manufactured to work under the
583
Finding Dependencies between Cyber-Physical Domains
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
by external actors would aect some of these security properties of
the system.
In the SUT’s model abstraction, we dene two crucial system
components: Attack points and Cy2Phy interfaces.
Attack points are specic parts of a CPS that can be compro-
mised by an attacker. In the information ow terminology
these would be sources, or low inputs. For our study, we con-
sider communication links and sensor interfaces as attack
points. We understand that there might be more such as
internal entities in a controller or actuator signals, but we
consider those out of the scope of this paper.
Cyber-to-Physical interfaces (Cy2Phy interfaces) are the
points where the cyber domain of a CPS manipulates the
physical domain (the Plant). Usually, these are the actuator
signals.
the program as proposed by Volpano, Irvine, and Smith [23]. We
connect two nodes ( j,  k) only under the following circumstances:
(1) In the case of an explicit ow, we build a strong-link con-
nection. For example, the statement  k :=  j + 5 where the
variable  j denes the variable  k, it is depicted in DFGS as
 j
strong-link
         !  k.
(2) In the case of an implicit ow, we create a weak-link con-
nection. For example, in the statement if  j then  k := 5,
there is an implicit ow from the guard of the conditional
 j and the denition of the variable  k on its branch, we
apply same analysis for all control statements such as while
loops and case switches. This ow is depicted in DFGS as
( j
weak-link
        !  k).
3.2 Attacker prole
We use the framework proposed by Rocchetto and Tippenhauer[20]
to dene our attacker prole and capabilities. The proposed attacker
corresponds to a cybercriminal prole with additional insider ca-
pabilities. He has a medium level of the system knowledge, and he
has access to physical components in the system, his network and
software skills are high. These capabilities let him compromise mul-
tiple attack points. Additionally, his skills let him perform false data
injection attacks on sensors and intercept and manipulate network
packets in real-time.
3.3 Modelling a CPS as a Data Flow Graph
Our approach aims to model the information ow of the SUT as
a Data flow graph (DFG), the SUT’s DFG is denoted by DFGS.
DFGS describes how information travels throughout the system,
and how internal entities share information.
In this model, the SUT is a directed graph G = (V , E), where V =
{ 0, 1, . . . , n} is a set of SUT’s entities, and E = e0, e1, . . . , em a
set of edges; each 2-tuple ei = ( j , k) represents an information
ow between two vertices  j , k. We describe these aspects in
further detail in section 3.4.
Once we build the DFGS, we select attack points according to the
attacker prole and target Cy2Phy interfaces. Our hypothesis is that
using reachability analysis, we can deduce which components of the
SUT would be aected by malicious actors through attack points,
and deduce the possible consequences of an attacker’s actions in
the SUT.
3.4 White-box analysis of controller’s source
code
Besides the description of nodes and edges, we add labels to the
DFG components. Nodes have additional labels to identify to what
controller they belong to, it is because dierent variables can be
equally named in multiple controllers. Edges have two additional
labels, one identies the type of relationship between variables, and
the second one maps the interaction with the specic part of the
code (Line ID).
We build the DFG through a white-box analysis approach of
the controller’s program. We process explicit and implicit ows in
584
i f
then
else i f
( b and d )
x := 0 ;
y := c ;
then
( b and c )
x := 1 ;
1 a , b , c , d , e := get ( )
2 z := 0 ;
( a )
3
i f
4
5
6
7
8
9
10
11
12
13
14 end
15 x := z ;
16 z := y ;
( d or e )
y := 0 ;
z := 1 ;
end
i f
end
then
then
(a) Structured text sample.
a
L:5,7
x
L:7
0
L:16
L:11
e
L:8,11
L:5
L:5,7
c
L:8
b
L:8
L:7
L:11
y
L:8,11
d
L:12
L:5
1
L:12
L:15
L:2
z
L:12
L:12
variables
constants
strong-link
weak-link
(b) DFG model
Figure 2: Graph abstraction of example code.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
John H. Castellanos, Martín Ochoa, and Jianying Zhou
3.5 Extracting graphs from a controller’s code
To process controllers code, we translate the representation of the
four standard languages into a general description that we can
combine into a DFG. As a manner of clarication, we describe how
we build a DFG for toy examples from standard languages.
Structured Text and Instruction List languages. Through static
analysis, we process the structured text code on a line-by-line basis.
In each variable denition, we build graph connections, strong-links
for variables involved in the denition and weak-link for variables
that rule conditional statements.
The example in Fig. 2 shows a DFG with 8 nodes, which is built
out of a piece of structured text code. Dotted lines represent weak-
links, and solid lines refer to direct assignations in the code.
Ladder Logic language. For its similarity with the traditional
wired relay systems, engineers have adopted ladder logic as the
main PLC programming language. A set of rungs describe the be-
haviour of a Ladder Logic program (Fig. 3a). In each rung, variables
(contacts) are placed in serial/parallel combinations, and variable
states determine the value of output variables (coils).
To perform the information ow analysis, we evaluate each rung
separately. We apply a dependency analysis based on the principle
of current ow, from left to right following all paths that lead to a
particular coil. As coil values depend on contact states, we connect
all contacts involved in the rung to the particular coil using weak-
link edges (see Fig. 3b). This guarantees to produce a consistent
graph that can be composed with graphs obtained from analysing
other languages.
b
a
c
(cid:91)
(cid:48)(cid:50)(cid:57)
IN
OUT
(cid:92)
c
(cid:93)
a
c
d
b
d
(cid:93)
d
L:3
L:3
b
L:3
L:2
c
L:2
(cid:92)
variables
L:1
L:1
(cid:91)
L:1
a
L:2
strong-link
weak-link
(a) Ladder logic example
(b) Extracted DFG
Figure 3: Graph abstraction of Ladder Logic example.
Functional Block Diagram language. Groups of Blocks compose a
Functional Block Diagram (FBD) program, wires connect blocks and
describe how information ow among them. Each block contains
input pins, local control logic and output pins. Blocks read data from
input pins, execute local control logic and update the states on the
output pins. Usually, the logic control is coded in other languages
such as structured text, so to process the control logic we follow
the same method described above.
We process the FBD on a block-by-block basis. First, we build
a small graph per each block, then we connect these small graphs
following the wires among blocks, in a left-right and top-down
order. We understand wire connections as direct assignations to
variables, so we draw as strong-links in the DFG. Edges in the built
DFG keep the same direction that connections in the FBD program.
Special case: Managing functions. These languages use additional
functions such as MSG() or MOV()(see Fig. 3a). So, in this case,
each function is processed by separate, depending on how they
aect variable’s values. For example, for the case of MSG, it reads
or writes data between dierent entities. In the DFG abstraction,
we connect the variables from the two dierent entities, where the
direction depends on the action; if the action is "reading from the ex-
ternal entity", then the connection is in direction external entity !
local entity . In the case of "writing to an external entity", the di-
rection is the opposite, local entity ! external entity. This special
case describes how the information ows between entities; it helps
to integrate DFG from dierent controllers. In the case of MOV(), it
is modelled as a strong-link connection to the destination variable.
In the case of MOV(), it is modelled as a strong-link connection
to the destination variable.
System’s DFG composition. In a CPS, controllers communicate
with each other through network messages; similarly, we com-
pose the general DFGS connecting individual controller’s DFG
with "bridges" of reading/writing messages. To do so, we employ
message functions (MSG) in PLC’s codes to reference local entities
from a controller to remote entities in adjacent controllers. It let us
process the produced DFGS as a whole and perform the reachabil-
ity analysis checking how the information ows throughout the
system.
3.6 Reachability analysis
After building the DFG from all controller programs, it contains
the complete set of interaction among variables throughout the
system. We propose a reachability analysis where one can deduce
what Cy2Phy interfaces are aected by which attack points. To do
so, we propose Algorithm 1. The rst step is to assign a bit array
with unique bits that identify each attack point (see Fig. 4a). Then,
we perform a Breadth-rst search (BFS) to nd reached nodes, if we
have two connected nodes a
 ! b, we compute the new bit array
on the reached node (b) as a logical OR between the source and the
reached nodes, b = b _ a.
e
585
Finding Dependencies between Cyber-Physical Domains
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
. Set of sensors (attack point)
. Internal nodes (program’s variables)
. Set of Actuators (Cy2Phy interface)
. Set bit array to all sensor nodes
. Assign unique index per attack point
si[i] := 1
. Compute reached node’s bit array
S = {s1, s2, s3}
V = { 1,  2,  3, . . . ,  n }
A = {a1, a2, a3}
for all s 2 S do
end for
X := MAKEQUEUE(S)
while X , ; do
for all n 2 X do
Algorithm 1 Reachability algorithm
1: function R(digraph)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
end for
20:
end while
21: end function
for all m 2 next(n) do
m := n _ m
X.PUSH(m)
mark m
if m is not marked then
end if
X.DELETE(n)
end for
Once the algorithm covers the whole DFGS, each Cy2Phy in-
terface will have a bit array with corresponding indexes of attack
points as seen in Fig. 4b. Moreover, in the end, we know precisely
what attack points aect which particular Cy2Phy interfaces.
Figure 5: Attack diagram example.
target at the center, then we compute the shortest path from the
attack points and draw each of those in the diagram.
4 IMPLEMENTATION
4.1 The testbed
We use SWaT [10] as a testbed to evaluate our approach. SWaT is a
water treatment plant built for research purposes, in particular to
study the security of Cyber-Physical systems.
The system consists of a six-stage process that employs real-
world water treatment methods to provide water suitable for human
consumption. Fig. 6 describes subprocess interlocking on the water
treatment plant.
The general process is described as follows. First, In stage one
and two, the system takes raw water, and through pH, conductivity,
and Oxidation reduction potential (ORP) analysers determine how
much chemicals (HCl, NaOCl, NaCl) are added to the liquid. In
the third and fourth subprocesses, it lters the water using an
Ultraltration system and de-chlorinates the water through the
usage of UV lamps. The last phases, fth and sixth subprocesses
feed the Reverse Osmosis (RO) system with ltered water. Water
from RO system cleans the membranes in the Ultraltration system.
Each subprocess has a set of sensors and actuators to monitor
and manipulate the plant. Among sensors, the system involves
ow transmitters, pressure transmitters, pH, conductivity and ORP
analysers, and level meters. The actuators used in SWaT are water
transfer pumps, high-pressure boost pumps with variable speed
drive and motorised valves.
The brain of the system is a Supervisory Control and Data Ac-
quisition (SCADA) system, and sets of paired-PLCs in redundant
hot-standby conguration control and monitor the whole process.
(a) First step in reachability analy-
sis. It assigns bit arrays with unique
indexes per attack point. There are
three sensors for this small exam-
ple.
(b) Final step in reachability analy-
sis. Cy2Phy interfaces with bit ar-
rays with attack point’s indexes.
Figure 4: Reachability algorithm example.
3.7 Shortest path analysis and attack diagrams
After running the reachability analysis on DFGS, we get the group
of attack points that aect the Cy2Phy interfaces on the SUT. As the
number of attack points per Cy2Phy interface can vary, the question
to answer is: what is the minimum number of aack points
that a malicious actor needs to compromise to manipulate a
particular Cy2Phy interface?
We believe that a proper measurement is the shortest distance
between points in the DFGS, because if a node is near to a Cy2Phy
interface means that it has more chance to change its value. Also,
intuitively an attack at a larger distance would potentially mean
less controllability of the target since the original manipulated data
might be ltered out by additional functions on the way to the
target. So an attacker would organise the attack points according
to the distance to a particular target. To do so, the malicious actor
can use an attack diagram (see Fig. 5) and choose the nearest attack
points. The attack diagram is a circular chart where we place the
586
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
John H. Castellanos, Martín Ochoa, and Jianying Zhou
Figure 6: Testbed’s operational diagram.
(a) Count of attack points.
(b) Count of Cy2Phy interfaces.
Figure 7: Count of interaction points per controller.
PLC’s code length varies from 4,100 and to 8,500 lines of code.
In total, the testbed counts with over 100 sensors and actuators to
control and monitor the plant.
4.2 PLC code parser
A set of six-paired controllers command the testbed. The PLC code
involves programs written in dierent languages (ladder logic, struc-
tured text and functional block diagram). We export all PLC’s source
code in an XML le, the size of PLC source codes varies between
4,100 and 8,600 LOC depending on the complexity of the control
strategy. In total, we processed more than 41,000 LOC.
We code a PLC program parser in python language that reads the
XML le and produces a Data ow graph as output. A graph-based
database (neo4j [1]) stores produced ow graphs for later processing
and analyses. The parser produces a DFG with 7,328 nodes where
331 are sensor signals, 105 Actuator signals, 49 network messages,
5,472 Internal variables and 1,371 constants.
5 EVALUATION
5.1 Interactions between attack points and
Cy2Phy interfaces
After running Algorithm 1 on the produced graph, we found a
highly connected relation among attack points and Cy2Phy inter-
faces, around 2,095 interactions.
Our analysis shows that 137 attack points associated to 57 com-
ponents aect 48 Cy2Phy interfaces associated to 32 components in
SWaT, The detailed list of components is shown in Tables 5, and 4
in the appendix A.
Fig 7. shows attack points and Cy2Phy interfaces per controller.
Fig 7a describes that about 70% of the attack points are in C3, C4
and C5 with 1,472 points. These three controllers have the broadest
attack surface. On the other hand, C1, C3 and C5 have the majority
of the Cy2Phy interfaces (about 74% see Fig. 7b). It means that
processes controlled by these controllers are the most susceptible
to manipulation.
Fig 8. describes interactions among controllers. We dene inter-
action as any relationship between an attack point and a Cy2Phy
interface; it can be between dierent controllers or inside the same
Figure 8: Interactions among controllers.
Table 1: Relation attack points - Cy2Phy interfaces in depen-
dencies between controllers.
On controller
C3
C4
Attack points
Cy2Phy interface
r
e
l
l
o
r
t
n
o
c
n
O
C1
C2
C3
C4
C5
C6
C1
5
6
10
8
10
4
3
3
3
3
3
3
C2
-
7
2
3
3
-
-
9
9
2
2
-
2
6
10
2
-
4
-
-
-
5
5
-
C5
-
-
-
7
10
-
-
-
-
5
5
-
C6
2
6
10
2
-
5
3
3
3
3
-
3
7
8
8
7
-
7
-
-
-
7
10
-