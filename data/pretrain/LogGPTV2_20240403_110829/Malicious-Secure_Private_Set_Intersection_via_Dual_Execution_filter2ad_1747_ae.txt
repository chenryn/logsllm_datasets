3.7
1.3
367
13
15
5.6
5.4
82
asymptotic
4n (ro)
6n (pk)
4κn (ro)
4n log n (ro)
6σn (crh)
4n (ro)
6n (pk)
4κn (ro)
4n log n (ro)
6σn (crh)
Figure 6:
Single-threaded running time in seconds of our protocol compared to semi-honest [KKRT16]
and malicious [DKT10, RR17]. We report both the total and online running time. DE-ROM, EC-ROM
respectively denotes our dual execution and encode-commit model protocols. SM denotes the standard
model dual execution variant on input bit length σ. Cells with − denote trials that either ran out of memory
or took longer than 24 hours. (pk) denotes public key operations, (ro) denotes random oracle operations
and (crh) denotes correlation robust hash function operations. ∗ [KKRT16] is a Semi-Honest secure PSI
protocol. We show the [KKRT16] performance numbers here for comparison purposes.
Threads Protocol
4
16
64
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
28
0.61
0.15
0.14
0.14
0.14
0.15
0.33
0.15
0.14
0.14
0.14
0.15
0.11
0.14
0.14
0.14
0.14
0.15
212
6.9
0.52
0.15
0.17
0.24
0.37
2.2
0.44
0.16
0.17
0.18
0.25
1.2
0.34
0.15
0.17
0.18
0.21
Set size n
216
95
5.8
0.4
0.6
1.3
2.7
29
4.3
0.4
0.4
0.6
1.1
19
2.1
0.4
0.4
0.5
1.0
220
1539
84
4.4
7.0
17
40
458
68
3.0
3.5
7.5
14.7
315
32
3.0
2.9
6.0
14
224
24948
−
72
93
−
−
7265
−
42
34
−
−
5021
−
42
25
−
−
Figure 7: Total running times in seconds of our protocol compared to [DKT10, RR17] in the multi-threaded
setting. Cells with − denote trials that ran out of memory.
The implementation of [DKT10] uses the Miracl elliptic curve library using Curve 25519 achiev-
ing 128 bit computational security. It is in the random-oracle model and is optimized with the
Fiat-Shamir sigma proofs. This implementation also takes advantage of the Comb method for fast
exponentiation (point multiplication) with the use of precomputed tables. The [DKT10] proto-
col requires two rounds of communication over which 5n exponentiations and 2n zero knowledge
proofs are performed. To increase performance on large set sizes, all operations are performed in a
19
[KKRT16]∗
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
28
0.04
0.05
1.9
0.29
0.25
2.3
5.3
set size n
212
0.53
0.8
23
4.8
3.5
40
92
216
8
14
324
79
61
451
1317
220
127
213
4970
1322
1092
7708
22183
Oﬄine
2κ2
0
224
1956
2356
− 2κ2 + 2nκ2
22038
17875
−
−
2κ2
2κ2
2κ2 + 6σκn
asymptotic
Online
3n(β + κ)
6nφ + 6φ + nβ
2nκ log2(2nκ) + nβ
3κn + n(C + D log n + log2 n)
6κn + βn log n
σn + βn log n
Figure 8: The empirical communication cost for both parties when conﬁgured for the WAN setting, listed in
megabytes. Asymptotic costs are in bits. φ = 283 is the size of the elliptic curve elements. β ≈ λ + 2 log n− 1
bits is the size of the ﬁnal masks that each protocol sends. C ≈ 2κ bits is the communication of performing
one commitment and D ≈ κ is the size of a non-interactive decommitment.
streaming manner, where data is sent as soon as it is ready.
The [RR17] implementation is also highly optimized including techniques such as hashing OTs
on demand and aggregating several steps in their cut and choose. To ensure a fair comparison, we
borrow many of their primitives such as SHA1 and AES.
Experimental Setup. Benchmarks were performed on a server equipped with 2 multi-core Intel
Xeon processors and 256GB of RAM. The protocol was executed with both parties running on
the same server, communicating through the loopback device. Using the Linux tc command we
simulated two network settings: a LAN setting with 10 Gbps and less than a millisecond latency;
and a WAN setting with 40 Mbps throughput and 80ms round-trip latency.
All evaluations were performed with computational security parameter κ = 128 and statistical
security λ = 40. We consider the sets of size n ∈ {28, 212, 216, 220, 224}. The times reported are
the average of 10 trials. Where appropriate, all implementations utilize the hardware accelerated
AES-NI instruction set.
7.1 Results & Discussion
Execution time, single-threaded. Figure 6 shows the running time of our protocol compared
with [DKT10] and [RR17] when performed with a single thread per party. We report both the
total running time and the online time, which is deﬁned as the portion of the running time that is
input-dependent (i.e., the portion of the protocol that cannot be pre-computed).
Our experiments show that our ROM protocols’ total running times are signiﬁcantly less than
the prior works, requiring 12.6 seconds to perform a set intersection for n = 220 elements in the
LAN setting. A 11.7× improvement in running time compared to [RR17] and a 447× improvement
over [DKT10]. Increasing the set size to n = 224, we ﬁnd that our best protocol takes 239 seconds,
whereas [RR17] runs out of memory, and [DKT10] requires over 24 hours. When considering the
smallest set size of n = 28, our protocol remains the fastest with a running time of 0.13 seconds
compared to 0.21 and 1.6 for [RR17] and [DKT10] respectively. Our standard model dual execution
protocol is also faster than prior works when evaluated in the LAN setting, with a running time
2.6× faster than [RR17] for σ = 32 and 1.1× faster for σ = 64.
Our ROM protocol also scales very well in the WAN setting where bandwidth and latency are
constrained. For set size n = 28, all protocols require roughly 1 second with ours being slightly
faster at 0.9 seconds. When increasing to a set size of n = 220 the diﬀerence becomes much more
signiﬁcant. Our DE-ROM protocol requires 106 seconds compared to 1080 for [RR17], a 10×
improvement. Our standard model protocol also has a fast online phase in the WAN setting due
20
to the implementation moving a larger portion of the work to the oﬄine as compared to the ROM
protocol.
Multi-threaded performance. Figure 7 shows the total running times in the multi-threaded
LAN setting. We see that our protocol parallelizes well, due to the fact that items are hashed
into bins which can be processed more or less independently. By contrast [RR17] uses a global
Bloom ﬁlter representation for all items, which is less amenable to parallelization. For inputs of
size n = 220 and 16 threads, our protocol is 23× faster than [RR17] and 153× that of [DKT10].
Increasing the number of threads from 1 to 16 speeds up our protocol by a factor of 5×, but theirs
by a factor of only 2×.
While the Diﬃe-Hellman-based protocol of [DKT10] is easily the most amenable to paralleliza-
tion (16 threads speeding up the protocol by a factor of 12.3× for n = 220), its reliance on expensive
public-key computations leaves it still much slower than ours.
Communication cost. Figure 8 reports both the empirical and asymptotic communication over-
head of the protocols. The most eﬃcient protocol with respect to communication overhead is