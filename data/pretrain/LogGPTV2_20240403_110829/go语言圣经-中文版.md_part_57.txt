return fmt.Errorf("unsupported type: %s", v.Type())
}
return nil
}
Marshal函数是对encode的包装，以保持和encoding/...下其它包有着相似的API：
// Marshal encodes a Go value in S-expression form.
func Marshal(v interface{}) ([]byte, error) {
var buf bytes.Buffer
if err := encode(&buf, reflect.ValueOf(v)); err != nil {
return nil, err
}
return buf.Bytes(), nil
}
下面是Marshal对12.3节的strangelove变量编码后的结果：
((Title "Dr. Strangelove") (Subtitle "How I Learned to Stop Worrying and Lo
ve the Bomb") (Year 1964) (Actor (("Grp. Capt. Lionel Mandrake" "Peter Sell
ers") ("Pres. Merkin Muffley" "Peter Sellers") ("Gen. Buck Turgidson" "Geor
ge C. Scott") ("Brig. Gen. Jack D. Ripper" "Sterling Hayden") ("Maj. T.J. \
"King\" Kong" "Slim Pickens") ("Dr. Strangelove" "Peter Sellers"))) (Oscars
("Best Actor (Nomin.)" "Best Adapted Screenplay (Nomin.)" "Best Director (N
omin.)" "Best Picture (Nomin.)")) (Sequel nil))
整个输出编码为一行中以减少输出的大小，但是也很难阅读。下面是对S表达式手动格式化的
结果。编写一个S表达式的美化格式化函数将作为一个具有挑战性的练习任务；不过
http://gopl.io 也提供了一个简单的版本。
((Title "Dr. Strangelove")
(Subtitle "How I Learned to Stop Worrying and Love the Bomb")
(Year 1964)
(Actor (("Grp. Capt. Lionel Mandrake" "Peter Sellers")
("Pres. Merkin Muffley" "Peter Sellers")
("Gen. Buck Turgidson" "George C. Scott")
("Brig. Gen. Jack D. Ripper" "Sterling Hayden")
("Maj. T.J. \"King\" Kong" "Slim Pickens")
("Dr. Strangelove" "Peter Sellers")))
(Oscars ("Best Actor (Nomin.)"
"Best Adapted Screenplay (Nomin.)"
"Best Director (Nomin.)"
"Best Picture (Nomin.)"))
(Sequel nil))
和fmt.Print、json.Marshal、Display函数类似，sexpr.Marshal函数处理带环的数据结构也会陷
入死循环。
示例: 编码S表达式 440
gopl
在12.6节中，我们将给出S表达式解码器的实现步骤，但是在那之前，我们还需要先了解如何
通过反射技术来更新程序的变量。
练习 12.3： 实现encode函数缺少的分支。将布尔类型编码为t和nil，浮点数编码为Go语言的
格式，复数1+2i编码为#C(1.0 2.0)格式。接口编码为类型名和值对，例如("[]int" (1 2 3))，但
是这个形式可能会造成歧义：reflect.Type.String方法对于不同的类型可能返回相同的结果。
练习 12.4： 修改encode函数，以上面的格式化形式输出S表达式。
练习 12.5： 修改encode函数，用JSON格式代替S表达式格式。然后使用标准库提供的
json.Unmarshal解码器来验证函数是正确的。
练习 12.6： 修改encode，作为一个优化，忽略对是零值对象的编码。
练习 12.7： 创建一个基于流式的API，用于S表达式的解码，和json.Decoder(§4.5)函数功能
类似。
示例: 编码S表达式 441
gopl
12.5. 通过reflect.Value修改值
到目前为止，反射还只是程序中变量的另一种读取方式。然而，在本节中我们将重点讨论如
何通过反射机制来修改变量。
回想一下，Go语言中类似x、x.f[1]和*p形式的表达式都可以表示变量，但是其它如x + 1和f(2)
则不是变量。一个变量就是一个可寻址的内存空间，里面存储了一个值，并且存储的值可以
通过内存地址来更新。
对于reflect.Values也有类似的区别。有一些reflect.Values是可取地址的；其它一些则不可
以。考虑以下的声明语句：
x := 2 // value type variable?
a := reflect.ValueOf(2) // 2 int no
b := reflect.ValueOf(x) // 2 int no
c := reflect.ValueOf(&x) // &x *int no
d := c.Elem() // 2 int yes (x)
其中a对应的变量不可取地址。因为a中的值仅仅是整数2的拷贝副本。b中的值也同样不可取
地址。c中的值还是不可取地址，它只是一个指针 的拷贝。实际上，所有通过
&x
reflect.ValueOf(x)返回的reflect.Value都是不可取地址的。但是对于d，它是c的解引用方式生
成的，指向另一个变量，因此是可取地址的。我们可以通过调用reflect.ValueOf(&x).Elem()，
来获取任意变量x对应的可取地址的Value。
我们可以通过调用reflect.Value的CanAddr方法来判断其是否可以被取地址：
fmt.Println(a.CanAddr()) // "false"
fmt.Println(b.CanAddr()) // "false"
fmt.Println(c.CanAddr()) // "false"
fmt.Println(d.CanAddr()) // "true"
每当我们通过指针间接地获取的reflect.Value都是可取地址的，即使开始的是一个不可取地址
的Value。在反射机制中，所有关于是否支持取地址的规则都是类似的。例如，slice的索引表
达式e[i]将隐式地包含一个指针，它就是可取地址的，即使开始的e表达式不支持也没有关系。
以此类推，reflect.ValueOf(e).Index(i)对于的值也是可取地址的，即使原始的
reflect.ValueOf(e)不支持也没有关系。
要从变量对应的可取地址的reflect.Value来访问变量需要三个步骤。第一步是调用Addr()方
法，它返回一个Value，里面保存了指向变量的指针。然后是在Value上调用Interface()方法，
也就是返回一个interface{}，里面包含指向变量的指针。最后，如果我们知道变量的类型，我
们可以使用类型的断言机制将得到的interface{}类型的接口强制转为普通的类型指针。这样我
们就可以通过这个普通指针来更新变量了：
通过reflect.Value修改值 442
gopl
x := 2
d := reflect.ValueOf(&x).Elem() // d refers to the variable x
px := d.Addr().Interface().(*int) // px := &x
*px = 3 // x = 3
fmt.Println(x) // "3"
或者，不使用指针，而是通过调用可取地址的reflect.Value的reflect.Value.Set方法来更新对于
的值：
d.Set(reflect.ValueOf(4))
fmt.Println(x) // "4"
Set方法将在运行时执行和编译时进行类似的可赋值性约束的检查。以上代码，变量和值都是
int类型，但是如果变量是int64类型，那么程序将抛出一个panic异常，所以关键问题是要确保
改类型的变量可以接受对应的值：
d.Set(reflect.ValueOf(int64(5))) // panic: int64 is not assignable to int
同样，对一个不可取地址的reflect.Value调用Set方法也会导致panic异常：
x := 2
b := reflect.ValueOf(x)
b.Set(reflect.ValueOf(3)) // panic: Set using unaddressable value
这里有很多用于基本数据类型的Set方法：SetInt、SetUint、SetString和SetFloat等。
d := reflect.ValueOf(&x).Elem()
d.SetInt(3)
fmt.Println(x) // "3"
从某种程度上说，这些Set方法总是尽可能地完成任务。以SetInt为例，只要变量是某种类型
的有符号整数就可以工作，即使是一些命名的类型、甚至只要底层数据类型是有符号整数就
可以，而且如果对于变量类型值太大的话会被自动截断。但需要谨慎的是：对于一个引用
interface{}类型的reflect.Value调用SetInt会导致panic异常，即使那个interface{}变量对于整数
类型也不行。
通过reflect.Value修改值 443
gopl
x := 1
rx := reflect.ValueOf(&x).Elem()
rx.SetInt(2) // OK, x = 2
rx.Set(reflect.ValueOf(3)) // OK, x = 3
rx.SetString("hello") // panic: string is not assignable to int
rx.Set(reflect.ValueOf("hello")) // panic: string is not assignable to int
var y interface{}
ry := reflect.ValueOf(&y).Elem()
ry.SetInt(2) // panic: SetInt called on interface Value
ry.Set(reflect.ValueOf(3)) // OK, y = int(3)
ry.SetString("hello") // panic: SetString called on interface Value
ry.Set(reflect.ValueOf("hello")) // OK, y = "hello"
当我们用Display显示os.Stdout结构时，我们发现反射可以越过Go语言的导出规则的限制读取
结构体中未导出的成员，比如在类Unix系统上os.File结构体中的fd int成员。然而，利用反射
机制并不能修改这些未导出的成员：
stdout := reflect.ValueOf(os.Stdout).Elem() // *os.Stdout, an os.File var
fmt.Println(stdout.Type()) // "os.File"
fd := stdout.FieldByName("fd")
fmt.Println(fd.Int()) // "1"
fd.SetInt(2) // panic: unexported field
一个可取地址的reflect.Value会记录一个结构体成员是否是未导出成员，如果是的话则拒绝修
改操作。因此，CanAddr方法并不能正确反映一个变量是否是可以被修改的。另一个相关的
方法CanSet是用于检查对应的reflect.Value是否是可取地址并可被修改的：
fmt.Println(fd.CanAddr(), fd.CanSet()) // "true false"
通过reflect.Value修改值 444
gopl
12.6. 示例: 解码S表达式
标准库中encoding/...下每个包中提供的Marshal编码函数都有一个对应的Unmarshal函数用于
解码。例如，我们在4.5节中看到的，要将包含JSON编码格式的字节slice数据解码为我们自
己的Movie类型（§12.3），我们可以这样做：
data := []byte{/* ... */}
var movie Movie
err := json.Unmarshal(data, &movie)
Unmarshal函数使用了反射机制类修改movie变量的每个成员，根据输入的内容为Movie成员
创建对应的map、结构体和slice。
现在让我们为S表达式编码实现一个简易的Unmarshal，类似于前面的json.Unmarshal标准库
函数，对应我们之前实现的sexpr.Marshal函数的逆操作。我们必须提醒一下，一个健壮的和
通用的实现通常需要比例子更多的代码，为了便于演示我们采用了精简的实现。我们只支持S
表达式有限的子集，同时处理错误的方式也比较粗暴，代码的目的是为了演示反射的用法，
而不是构造一个实用的S表达式的解码器。
词法分析器lexer使用了标准库中的text/scanner包将输入流的字节数据解析为一个个类似注
释、标识符、字符串面值和数字面值之类的标记。输入扫描器scanner的Scan方法将提前扫描
和返回下一个记号，对于rune类型。大多数记号，比如“(”，对应一个单一rune可表示的
Unicode字符，但是text/scanner也可以用小的负数表示记号标识符、字符串等由多个字符组
成的记号。调用Scan方法将返回这些记号的类型，接着调用TokenText方法将返回记号对应的
文本内容。
因为每个解析器可能需要多次使用当前的记号，但是Scan会一直向前扫描，所以我们包装了
一个lexer扫描器辅助类型，用于跟踪最近由Scan方法返回的记号。
gopl.io/ch12/sexpr
示例: 解码S表达式 445
gopl
type lexer struct {
scan scanner.Scanner
token rune // the current token
}
func (lex *lexer) next() { lex.token = lex.scan.Scan() }
func (lex *lexer) text() string { return lex.scan.TokenText() }
func (lex *lexer) consume(want rune) {
if lex.token != want { // NOTE: Not an example of good error handling.
panic(fmt.Sprintf("got %q, want %q", lex.text(), want))
}
lex.next()
}
现在让我们转到语法解析器。它主要包含两个功能。第一个是read函数，用于读取S表达式的
当前标记，然后根据S表达式的当前标记更新可取地址的reflect.Value对应的变量v。
func read(lex *lexer, v reflect.Value) {
switch lex.token {
case scanner.Ident:
// The only valid identifiers are
// "nil" and struct field names.
if lex.text() == "nil" {
v.Set(reflect.Zero(v.Type()))
lex.next()
return
}
case scanner.String:
s, _ := strconv.Unquote(lex.text()) // NOTE: ignoring errors
v.SetString(s)
lex.next()
return
case scanner.Int:
i, _ := strconv.Atoi(lex.text()) // NOTE: ignoring errors
v.SetInt(int64(i))
lex.next()
return
case '(':
lex.next()
readList(lex, v)
lex.next() // consume ')'
return
}
panic(fmt.Sprintf("unexpected token %q", lex.text()))
}
示例: 解码S表达式 446
gopl
我们的S表达式使用标识符区分两个不同类型，结构体成员名和nil值的指针。read函数值处理
nil类型的标识符。当遇到scanner.Ident为“nil”是，使用reflect.Zero函数将变量v设置为零值。
而其它任何类型的标识符，我们都作为错误处理。后面的readList函数将处理结构体的成员
名。
一个“(”标记对应一个列表的开始。第二个函数readList，将一个列表解码到一个聚合类型中
（map、结构体、slice或数组），具体类型依然于传入待填充变量的类型。每次遇到这种情
况，循环继续解析每个元素直到遇到于开始标记匹配的结束标记“)”，endList函数用于检测结
束标记。
最有趣的部分是递归。最简单的是对数组类型的处理。直到遇到“)”结束标记，我们使用Index
函数来获取数组每个元素的地址，然后递归调用read函数处理。和其它错误类似，如果输入
数据导致解码器的引用超出了数组的范围，解码器将抛出panic异常。slice也采用类似方法解
析，不同的是我们将为每个元素创建新的变量，然后将元素添加到slice的末尾。
在循环处理结构体和map每个元素时必须解码一个(key value)格式的对应子列表。对于结构
体，key部分对于成员的名字。和数组类似，我们使用FieldByName找到结构体对应成员的变
量，然后递归调用read函数处理。对于map，key可能是任意类型，对元素的处理方式和slice
类似，我们创建一个新的变量，然后递归填充它，最后将新解析到的key/value对添加到
map。
func readList(lex *lexer, v reflect.Value) {
switch v.Kind() {
case reflect.Array: // (item ...)
for i := 0; !endList(lex); i++ {
read(lex, v.Index(i))
}