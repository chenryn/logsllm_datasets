# 【技术分享】MySQL False注入及技巧总结
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[ **Leej**](http://bobao.360.cn/member/contribute?uid=2783271953)
**预估稿费：300RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**0x01 False Injection**
**引子** **** ****
首先我们常见的注入
    1=1
    0](https://dev.mysql.com/doc/refman/5.5/en/comparison-operators.html#operator_equal-to) equality comparison operator. For NULL 
NULL, the result is true. No conversion is needed.
If both arguments in a comparison operation are strings, they are compared as
strings.
If both arguments are integers, they are compared as integers.
Hexadecimal values are treated as binary strings if not compared to a number.
If one of the arguments is a
[TIMESTAMP](https://dev.mysql.com/doc/refman/5.5/en/datetime.html) or
[DATETIME](https://dev.mysql.com/doc/refman/5.5/en/datetime.html) column and
the other argument is a constant, the constant is converted to a timestamp
before the comparison is performed. This is done to be more ODBC-friendly.
Note that this is not done for the arguments to
[IN()](https://dev.mysql.com/doc/refman/5.5/en/comparison-operators.html#function_in)! To be safe, always use complete datetime, date,
or time strings when doing comparisons. For example, to achieve best results
when using [BETWEEN](https://dev.mysql.com/doc/refman/5.5/en/comparison-operators.html#operator_between) with date or time values, use
[CAST()](https://dev.mysql.com/doc/refman/5.5/en/cast-functions.html#function_cast) to explicitly convert the values to the desired
data type.
If one of the arguments is a decimal value, comparison depends on the other
argument. The arguments are compared as decimal values if the other argument
is a decimal or integer value, or as floating-point values if the other
argument is a floating-point value.
In all other cases, the arguments are compared as floating-point (real)
numbers.
其中大致是：
如果两个参数比较，有至少一个NULL，结果就是NULL，除了是用NULLNULL 会返回1。不做类型转换
两个参数都是字符串，按照字符串比较。不做类型转换
两个参数都是整数，按照整数比较。不做类型转换
如果不与数字进行比较，则将十六进制值视为二进制字符串。
有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为时间戳
有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal
后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较
所有其他情况下，两个参数都会被转换为浮点数再进行比较
最后那一句话很重要，说明如果我是字符串和数字比较，需要将字符串转为浮点数，这很明显会转换失败
在这里我试了试如果是字符串和数字比较：
可以看到在进行类型转换的时候，将字符串转换的时候会产生一个warning，转换的结果为0，但是如果字符串开头是数字的时候还是会从数字部分截断，转换为数字。
现在可以很好理解开头说的为什么username=0会导致返回数据了，就是因为这里会将数据转换为浮点数比较，但是字符串转换会出问题，从而返回0使得0=0从而为true得到结果，而后面passwd查询少一组数据的原因就是admin的passwd字段第一个字符是2
从而返回2 并非为0。
**2、利用**
实际中我们接触到的语句都是带有引号的，类似于where username='+input+'
这样的，这时候我们就需要做一些处理来构造false注入的利用点。
**2.1、算术运算**
加：+
    '+', 拼接的语句：where username=''+''
减：-
    '-' 拼接的语句：where username=''-''
乘：*
     '*' 拼接的语句：where username=''*''
除：/
     '/6# 拼接的语句：where username=''/6#
取余：%
     '%1# 拼接的语句：where username=''%1#
**2.2、 位操作运算**
我们可以使用当字符串和数字运算的时候类型转换的问题进行利用
我们可以用的位运算符有：
和运算：&
     '&0# 拼接的语句：where username=''&0#'
或运算：|
     '|0# 拼接的语句：where username=''|0#'
异或运算：^