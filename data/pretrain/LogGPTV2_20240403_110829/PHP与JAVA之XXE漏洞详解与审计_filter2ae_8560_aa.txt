# PHP与JAVA之XXE漏洞详解与审计
​ 其实之前也写过一篇[java审计之XXE](https://2019/01/13/java审计之XXE.html),虽然PHP与java
XXE都大同小异但是本篇会更详细些，加入了PHP的归纳一些知识点和有关的一些函数，对之前的文章进行了整理与更新，从基础概念原理->利用->审计->防御。
## 1.xxe简介
XXE(XML外部实体注入、XML External
Entity），在应用程序解析XML输入时，当允许引用外部实体时，可以构造恶意内容导致读取任意文件或SSRF、端口探测、DoS拒绝服务攻击、执行系统命令、攻击内部网站等。Java中的XXE支持sun.net.www.protocol里面的所有[协议](http://www.liuhaihua.cn/archives/tag/protocol)：[http](http://www.liuhaihua.cn/archives/tag/http)，[https](http://www.liuhaihua.cn/archives/tag/https)，file，[ftp](http://www.liuhaihua.cn/archives/tag/ftp)，[mail](http://www.liuhaihua.cn/archives/tag/mail)to，jar，[netdoc](http://qclover.cn/2019/01/13/java%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%88%A9%E7%94%A8.html)
。一般利用file协议读取文件、利用http协议探测内网，没有回显时可组合利用file协议和ftp协议来读取文件。
## 2.相关基础概念
**XML &DTD**
​ XML(可扩展标记语言，EXtensible Markup Language )，是一种标记语言，用来传输和存储数据
​ DTD(文档类型定义，[Document](http://www.liuhaihua.cn/archives/tag/document) Type
Definition )的作用是定义XML文档的合法构建模块。它使用一系列的合法元素来定义文档结构。
**实体ENTITY**
​
XML中的实体类型，一般有下面几种：字符实体，命名实体（或内部实体）、外部实体（包含分为：外部普通实体、外部参数实体）。除外部参数实体外，其他实体都以字符（&）开始以字符（；）结束。
**DTD引用方式**
a)DTD 内部声明
``
b)DTD 外部引用
``
c)引用公共DTD
``
**0x1:字符实体**
​ 字符实体类似html的实体编码，形如a(十进制)或者a（十六进制）。
**0x2:命名实体（内部实体）**
​ 内部实体又叫命名实体。命名实体可以说成是变量声明，命名实体只能生命在DTD或者XML文件开始部分（语句中）。
​ 命名实体（或内部实体语法）:
_` _`
如：
    ]>
    &x;&y;
说明：
定义一个实体名称x 值为First Param!
&x; 引用实体x
知道以上语法后，可以使用名为foo的数据类型定义（DTD）构造如下请求:
request:
    POST http://example.com/xml HTTP/1.1
    ]>
      Hello &bar;
respone:
    HTTP/1.0 200 OK
    Hello World
bar元素是单词“World”的别名 。看起来这样的内部实体似乎无害，但攻击者可以使用XML实体通过在实体内的实体内嵌入实体来导致拒绝服务攻击。通常被称为“
（Billion Laughs attack）[十亿笑攻击](https://en.wikipedia.org/wiki/Billion_laughs)
”。某些XML解析器会自动限制它们可以使用的内存量。
如：
request:
    POST http://example.com/xml HTTP/1.1
    ]>
      Hello &t3;
response:
    HTTP/1.0 200 OK
    Hello World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World
0x3):外部 **普通实体**
​ 外部实体用于加载外部文件的内容。(显示XXE攻击主要利用普通实体)
​ 外部普通实体语法：
​ _`
    ]>
    &xxe;
    ]>
    &outfile;
0x4):外部 **参数实体**
    or
​
参数实体用于DTD和文档的内部子集中。与一般实体不同，是以字符（%）开始，以字符(;)结束。只有在DTD文件中才能在参数实体声明的时候引用其他实体。(Blind
XXE攻击常利用参数实体进行数据回显)
示例：
1
    %xxe;]>
    &evil;
外部evil.dtd中的内容。
``
2
        %dtd;
    ]>
    &content
combine.dtd的内容为：
_``_
说明：
上面combine.dtd中定义了一个基本实体，引用了3个参数实体：%param1;，%param2;，%param3;。
解析后`…`中的内容为Hello World。
## 3.XML外部实体的一些限制与解决办法
**error**
通常对于XXE的经典用法，用来读取文件比较直接方便，但是，也决定了能被解析的内容元素必须是XML文档。
如下面一个例子：
request:
    POST http://example.com/xml HTTP/1.1
      ;
    ]>
      &bar;
response:
通常会得到如下响应
    HTTP/1.0 500 Internal Server Error
    File "file:///etc/fstab", line 3
    lxml.etree.XMLSyntaxError: Specification mandate value for attribute system, line 3, column 15...
`/etc/fstab`是一个包含一些看起来像XML的字符的文件（即使它们不是XML）。这将导致XML解析器尝试解析这些元素，只是注意到它不是有效的XML文档。
因此，这限制了XML外部实体（XXE）在以下两个重要方面。
  * XXE只能用于获取包含“有效”XML的文件或响应
  * XXE不能用于获取二进制文件
**XML外部实体（XXE）限制解决办法**
​ 这其实也就用到了外部参数实体，解决了命名实体和普通实体所带来的一些问题。具体如下分析：
​
攻击者可以通过使用一些巧妙的技巧来解决上述限制。攻击者使用XML外部实体（XXE）攻击所面临的主要问题是，它很容易撞了南墙试图exfiltrate不是有效的XML文件（包含XML特殊字符，如例如，文件明文文件时`&`，``）。
**理论上的解决办法**
​ XML已经解决了这个问题，因为有些合法的情况可能需要在XML文件中存储XML特殊字符。`CDATA`XML解析器忽略（Character
Data）标记中的特殊XML字符。
         characters are ok in here ]]>
因此，从理论上讲，攻击者可以发送类似于以下内容的请求。
request:
        POST http://example.com/xml HTTP/1.1
      ">
    ]>
    &all;
预期response:
        HTTP/1.0 200 OK
    # /etc/fstab: static file system informa...
    #
    #    ...
    proc  /proc  proc  defaults  0  0
    # /dev/sda5
    UUID=be35a709-c787-4198-a903-d5fdc80ab2f... # /dev/sda6
    UUID=cee15eca-5b2e-48ad-9735-eae5ac14bc9...
    /dev/scd0  /media/cdrom0  udf,iso9660 ...
但实际上并不起作用，因为XML规范不允许将 **外部实体** 与 **内部实体** 结合使用。
内部实体代码示例：
    ]>
外部实体代码示例：
    ]>
        &xxe;
        mypass
参数实体
然而，攻击者仍然可以扔出手里的另一张牌—参数实体，在得到以上限制解决方法之前先理解一下以下两个重点：
重点一：
实体分为两种，内部实体和 **外部实体** ，上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用，我们看下面的代码：
还是以上代码
    ]>
        &xxe;
        mypass
重点二：
我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体）
**通用实体：**
用 &实体名:引用的实体，他在DTD 中定义，在 XML 文档中引用
**示例代码：**
    ]>
    &outfile;
**参数实体：**
(1)使用 `% 实体名`( **这里面空格不能少** ) 在 DTD 中定义，并且 **只能在 DTD 中使用**`%实体名;` **引用**  
(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体  
(3)和通用实体一样，参数实体也可以外部引用
**示例代码：**
    "> 
    %an-element; %remote-dtd;
参数实体在我们 Blind XXE 中起到了至关重要的作用
接下来怎么做？（解决办法）
除了 **一般实体** ，这是我们到目前为止所看到的，还有 **参数实体** 。
以下是参数实体的外观。它与一般实体相同，除了它存在于DTD内部并以％作为前缀开始，以指示XML解析器正在定义参数实体（不是通用实体）。在下面的示例中，参数实体用于定义通用实体，然后在XML文档内部调用该实体。
request:
    POST http://example.com/xml HTTP/1.1
    ">
      %paramEntity;
    ]>
    &genEntity;
预期的response:
    HTTP/1.0 200 OK
    bar
考虑到上面的示例，攻击者现在可以通过创建在 **attacker.com/evil.dtd上** 托管的恶意DTD，将上面的理论CDATA示例转换为工作
**攻击。**
**request:**
    POST http://example.com/xml HTTP/1.1
      %dtd;
      %all;
    ]>
    &fileContents;
**攻击者DTD（attacker.com/evil.dtd）**
    ">
    ">
解析：
当攻击者发送上述请求时，XML解析器将首先 **%dtd** 通过向 ****
发出请求来尝试处理参数实体 **。**
一旦下载了攻击者的DTD，XML解析器将加载`%file`参数实体（来自 **evil.dtd**
），在本例中是`/etc/fstab`。然后它将分别``使用`%start`和`%end`参数实体将文件的内容包装在标签中，并将它们存储在另一个名为的参数实体中`%all`。
这个技巧的核心是`%all`创建一个被调用的 **通用** 实体`&fileContents;`，它可以作为响应的一部分包含在攻击者中。
注:攻击者 **可以** 只使用DTD内参数实体，而不是内部的XML文档）
结果是回复攻击者，文件（`/etc/fstab`）的内容包含在`CDATA`标签中。
## 4.利用方式总结
**1.有回显情况，**
结合外部实体声明（实体名称 SYSTEM ”uri/url“）和参数实体（% 实体名称 SYSTEM "uri-外部dtd"）有两种方式进行注入攻击
1
    ]>
    &xxe;
2
    %xxe;]>
    &evil;
外部evil.dtd的内容
**2.无回显情况**