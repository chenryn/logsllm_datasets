在这个对话框里，懒蜗牛只是在Project
name文本框中写下了这个项目的名字，叫做testjava。其他的内容都没有改变，就单击了Next按钮。
在之后的如图7.26所示的这个页面，可以对要创建的工程进行一些设置。不过懒蜗牛同学还是新手，不知道该设置些什么，就直接单击了Finish按钮，于是，一个工程就建好了。
![alt](images/00407.jpeg){.calibre3}
图7.26 创建项目页面2
【创建包】
工程建出来之后就回到了Wordbenck界面，这时候在左侧的Package
Explorer标签中就可以看到这个项目了，不过目前这个项目下面除了有一个名叫src的空目以外，啥也没有，如图7.27所示。
![alt](images/00408.jpeg){.calibre3}
图7.27 刚刚创建好的项目
之所以什么也没有，是因为我们什么也没创建。Java项目，都是由一个一个的包，也就是常说的Package组成的，所以懒蜗牛同学现在需要创建一个Package。于是他选择了File\|New\|Package菜单，Eclipse弹出了创建Package的对话框，如图7.28所示。
![alt](images/00409.jpeg){.calibre3}
图7.28 创建package
懒蜗牛在Name文本框里面输入了包的名字：hello，并单击了Finish按钮。然后就可以看到懒蜗牛创建的testjava项目中，多了一个叫做hello的包，如图7.29这样。
![alt](images/00410.jpeg){.calibre3}
图7.29 刚刚创建的Package
【创建类】
好了，有了Package了，可是还没见到往哪写程序呀？懒蜗牛双击那个Package也没见有什么反应。这时候他才想起来：对了，这个面向对象的Java，是离不开Class，也就是类的。那就再创建个类吧。于是懒蜗牛又选择了File\|New\|Class菜单，Eclipse弹出了如图7.30所示的创建类的窗口。
![alt](images/00411.jpeg){.calibre3}
图7.30 创建类
在这个窗口中，懒蜗牛在Name文本框里填写了要创建的这个类的名称，叫做HelloWorld。然后还勾选了下边那个"public
static void main(String\[\]
args)"复选框。意思就是，让Eclipse帮忙在这个类里创建好一个main()方法------跟C语言一样，Java也需要一个main()方法，才知道程序从哪里开始执行。
选好了之后，懒蜗牛单击Finish按钮，于是又回到了Workbench界面，如图7.31所示。
![alt](images/00412.jpeg){.calibre3}
图7.31 刚刚创建的类
【编写代码并运行】
好了，这回终于看见代码了，也就是那个HelloWorld.java文件的内容。懒蜗牛同学义无反顾地向HelloWorld.java文件中写进了最关键的一行代码，完成之后，HelloWorld.Java中的全部代码如下：
![alt](images/00413.jpeg){.calibre3}
好吧，其实懒蜗牛只是写了句System.out.print(\"Hello World
Java!\")而已，这句代码的意思跟C语言里面的printf()函数差不多，就是输出一个字符串。写好代码之后，单击Workbanch界面上边的那个绿色的运行按钮，就可以看到运行的结果了，如图7.32所示。
![alt](images/00414.jpeg){.calibre3}
图7.32 运行并查看结果
成功地写出了Java的HelloWorld程序之后，我们的懒蜗牛同学终于没有去尝试更多的语言。大概是从这3个最流行的编程语言中，就已经能够体会到各种语言编程的特点了吧。
[7.4 Vim编辑器的使用]{.kai}
前面咱们曾经介绍过几种常用的文本编辑器。其中使用最广泛，功能最强大的，就要数Vim和Emacs了（可别问哪个更强大啊，省得他俩又吵起来）。于是，懒蜗牛同学打算学习一下Vim的使用，为以后写程序及写脚本做好充分的准备（懒蜗牛学习Vim的事别让Emacs知道啊，低调低调）。
7.4.1 Vim的操作模式
要学习Vim，先要理解Vim的操作模式。Vim不像gedit、kate之类的简单的文本编辑器，打开就能往里写字。如果你没有经过任何学习就在命令行中运行了Vim，很可能急得胡敲乱打都输入不了一个字符，想退出都找不到门在哪。
懒蜗牛同学通过学习了解到，Vim有3种工作模式，分别是：指令模式、输入模式、行末模式。
![alt](images/00002.jpeg){.tpzz} 指令模式：Vim运行起来之后，默认进入指令模式，如图7.33所示。在这种模式下，可以通过各种快捷键、组合键进行操作，对文本进行编辑（这个模式下，基本上满键盘都是快捷键，所以不要乱按哦）。例如可以执行复制、粘贴、删除、查找等操作。
![alt](images/00415.jpeg){.calibre3}
图7.33 Vim指令模式
![alt](images/00002.jpeg){.tpzz} 输入模式：也就是普通的向文件里输入字符的模式。在指令模式下，按i键或者Insert键即可进入输入模式。进入输入模式后，界面左下角有"插入"字样，如图7.34所示。这时就跟使用gedit之类的编辑器一样了。在输入模式按Esc键可以回到指令模式。
![alt](images/00416.jpeg){.calibre3}
图7.34 Vim的输入模式
![alt](images/00002.jpeg){.tpzz} 行末模式：这个模式下，可以在Vim界面的最下边一行输入命令（Vim的命令），并且执行，来实现各种操作，如图7.35所示。例如可以执行打开文件、保存文件、查找替换、退出等等操作。在指令模式输入"："，（也就是同时按下Shift和;键）即进入行末模式。此时光标出现在界面最后一行。行末模式执行完一条指令后自动回到指令模式（无论指令是否有效）。
![alt](images/00417.jpeg){.calibre3}
图7.35 Vim的行末模式
![alt](images/00011.jpeg){.tpzz}**提示：**[为了简洁，也有时将Vim的操作归纳为两种模式------命令模式和输入模式。即将指令模式和行末模式统称为命令模式。]{.kai1}
7.4.2 指令模式常用快捷键
了解了各种工作模式，懒蜗牛同学开始试着操作了。首先他打开了一个空的文件：
![alt](images/00418.jpeg){.calibre3}
test.txt文件是一个不存在的文件。运行这样的命令Vim并不会报错，而是会打开一个空白文件。等执行保存命令的时候，Vim就会去创建这个文件。打开之后，懒蜗牛同学按i键进入了输入模式，并且输入了一些字符。输入了一大段之后，发现第1行有个字符写错了，于是按向上的方向键，把光标移动到第1行（因为是在命令行中，无法使用鼠标直接定位），然后修改。修改之后，再按向下方向键，把光标移动到最后一行，然后继续写。刚写俩字母，发现第1行还是有错，于是再按向上方向键，把光标移动到第1行，修改完了再按向下的方向键，把光标移动到最后一行......
当懒蜗牛手指头抽筋以后，他终于意识到：应该有快捷键吧。
【定位相关快捷键】
是的，在指令模式下，有很多用于定位光标的快捷键，下面介绍几个常用的。
![alt](images/00002.jpeg){.tpzz} Home、End、PageUp、PageDown这4个键，依旧是它们原本的用途，依次是移动到行首、移动到行尾、上翻页、下翻页。这和在别的编辑器里面一样，就不多说了。
![alt](images/00002.jpeg){.tpzz} Shift+g组合键可以快速定位到指定的行。如果你想直接查看当前文件的第168行，那么就进入指令模式，直接依次在键盘上按下1、6、8这3个键（这时候输入的东西并不显示），然后按下Shift+g组合键，就可以看到光标直接跳到了168行的行首，效果如图7.36所示。另外，如果想移动到整个文件的最后一行，可以直接按两下Shift+g组合键（按住Shift敲两下g）；如果想直接移动到文件的首行，可以直接按两下g键。
![alt](images/00419.jpeg){.calibre3}
图7.36 跳转到指定行
![alt](images/00002.jpeg){.tpzz} w和b键，分别表示向后和向前移动一个单词。这在看英文的时候比较有用。移动一个单词后，光标将停在该单词的第一个字母。图7.37中描述的就是按w键的效果示意。
![alt](images/00420.jpeg){.calibre3}
图7.37 移动一个单词
【编辑相关快捷键】
文档编辑器嘛，自然少不了对文档的编辑。在编辑的过程中，也有很多快捷键可以帮忙提高效率。
![alt](images/00002.jpeg){.tpzz} 使用d键来删除指定数量的行。例如，想删除从当前光标所在行向下数3行的内容（包括当前行），则可以依次按下d、3、d这3个键，如图7.38所示；如果想删除当前行向下14行的内容，则可以依次按d、1、4、d这4个键；如果想删除当前行，则可以直接连续按两下d键。
![alt](images/00421.jpeg){.calibre3}
图7.38 删除指定数量行
![alt](images/00002.jpeg){.tpzz} 同样可以使用d键来删除指定数量的字符。依次按下d、3、向右方向键，则删除从当前字符算起，向右3个字符（包括当前字符）；依次按下d、1、4、向左方向键，则删除当前字符左侧的14个字符（不包括当前字符）。
![alt](images/00002.jpeg){.tpzz} Shift+j组合键，用于删除当前行末尾的回车。换句话说就是可以将下一行并到当前行的末尾，如图7.39所示。
![alt](images/00422.jpeg){.calibre3}