哦，没错，是我最后一次破解.NET远程处理技术的时候。但是这里的重点在于，它不仅使用了可以被破解的.NET远程处理技术，而且还以Full
TypeFilterLevel模式使用了BinaryFormatter，这意味着我们可以对任何数据进行反序列化，而不必担心各种安全限制。
该进程会通过Windows命名管道创建一个IPC通道，并且使用在命令行中传递的portName属性来指定管道的名称。该进程还会接收进程的ID，它会一直等待，直到其他进程退出为止。
因此，我们可以使用以下命令行启动AddInProcess：  
    AddInProcess.exe /guid:32a91b0f-30cd-4c75-be79-ccbd6345de11 /pid:XXXX
将XXXX替换为相应的进程ID，例如资源管理器。
我们会发现该进程创建了命名管道\\.pipe32a91b0f-30cd-4c75-be79-ccbd6345de11。
该服务的名称是通过RemotingServices.Marshal设置的，这里为AddInServer。 因此，我们可以将远程URI构建为ipc：//
32a91b0f-30cd-4c75-be79-ccbd6345de11 /
AppInServer，我们可以使用我的ExploitRemotingService工具来验证它是否可以加以利用（当然，是在非DG Windows
10机器上）。  
我们需要使用–useser标志与ExploitRemotingService工具，这样就可以不借助于MS已经修复的旧漏洞了。这个useser标志可以发送序列化对象，并从服务器返回，从而允许执行文件操作，如列出目录以及上传/下载文件等。需要注意的是，只有在TypeFilterLevel设置为Full时才这样做才有效。这表明远程通道容易受到任何反序列化的影响。所以，您可以借助我的工具，从.NET
DCOM漏洞利用代码中截取相应的字节，替换序列化的字节，这样就可以在AddInProcess的上下文中执行任意代码了。
需要注意的是：如果发送数据到这个IPC服务器的唯一方法是运行一个专门设计来与.NET远程服务通信的、我们可以运行任意代码的工具的话，那么我们就无需旁路了。由于这个通道是一个命名管道，那么，我们是否可以远程利用它呢？很可惜，.NET
Framework在这个创建命名管道的时候，使用了一个阻止网络访问的显式安全描述符。
理论上，我们可以修改权限，但就算我们找到了这样的工具，也还是需要另外一台机器——太麻烦了。那么该怎么办？幸运的是，对于我们来说，.NET远程处理协议非常简单。在连接开始时，它没有进行协商，客户端只需将正确格式化的字节集（包括头文件和序列化消息）发送到服务器即可，如果正确，那么服务器将给予响应。我们可以提前创建一个包含序列化请求的二进制文件，并将其写入命名管道。如果我们利用ExploitRemotingService封装请求，并结合之前的.NET序列化漏洞，我们就可以生成一个攻击.NET
AddInProcess服务器的二进制文件。
如果我们有一个名为request.bin的文件，则将其写入命名管道最简单的方法，就是使用CMD：
    C:> type request.bin > \.pipe32a91b0f-30cd-4c75-be79-ccbd6345de11
太好了，这的确很简单，不过……我们不能运行CMD。那么，我们还能用什么？ 当WSH被阻止时，我们仍然可以在regsvr32中运行scriptlet。
但是，脚本托管环境是开明的，在JScript / VBScript的情况下，意味着在创建的COM对象方面会受到严格的限制。
您可以创建的唯一对象是Scripting.FileSystemObject，它允许您打开任意文本文件并进行读/写操作。同时，它支持打开命名管道，并使用这一功能来处理进程输出。
因此，您可以通过下面的操作将任意数据写入命名管道。
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var pipe = "\\.\pipe\32A91B0F-30CD-4C75-BE79-CCBD6345DE11";
    // Create a new ANSI text file object to the named pipe.
    var file = fso.CreateTextFile(pipe, true, false);
    // Write raw data to the pipe.
    var data = "RAW DATA";
    file.Write(data);
    file.Close();
不过，事情没有这么简单。请求数据是任意二进制的，所以我最初尝试使用一个Unicode文本文件，这使得二进制数据的写入变得容易起来。在创建构成请求的文件时，该类首先会写入一个字节顺序标记（BOM）。所以，我开始尝试ANSI模式，但是这会将UCS-2字符从JScript转换为当前的ANSI代码页。在英文Windows系统上，这通常是代码页1252，您可以在UCS-2字符和任意8位字符之间构建映射表。但是，如果您的系统被设置为另一个代码页，例如更复杂的多字节字符集之一，如Shift-JIS，这就难办了。无论如何，我敢肯定，将来可以设法让它在更多的平台上工作，使其可以加载任何任意的.NET代码，并通过DG
Win10S强制策略执行这些代码。
我已将代码上传到我的github。您可以在另一台计算机上运行CreateAddInIpcData工具，只要提供IL-only
.NET程序集的路径和输出scriptlet文件的名称即可。确保给scriptlet文件提供一个.sct扩展名。
.NET程序集必须包含单个具有空构造函数的公共类，以在反序列化期间充当入口点。类似下面代码的C#_也可以，只需编译成一个类库程序集即可。
    public class EntryPoint {
        public EntryPoint() {
            MessageBox.Show("Hello");
        }
    }
将输出脚本文件复制到Win10S机器。使用前面的命令行启动AddInProcess（确保GUID与前面的相同，因为端点URI以序列化请求结尾），并指定PID（从任务管理器获取）。
确保AddInProcess可执行文件不会立即退出，因为这将在命令行中显示错误信息。
执行scriptlet时，可以通过在资源管理器中右键单击它，并选择“注销”，或从资源管理器的“运行”对话框中手动输入以下命令：
    regsvr32 /s /n /u /i:c:pathtoscriptlet.sct scrobj.dll
您现在应该会发现，任意.NET代码都可以在AddInProcess的上下文中执行了。这样，除了从磁盘上的文件加载未签名的.NET程序集外，您还可以随意编写自己喜欢的代码了。
好了，该说的都说了。应该清楚的是，现在UMCI和.NET搭配得还不太好，就像4年前当我用类似的技巧来攻击Windows
RT时一样。当然，我不知道Microsoft未来是否会限制从内存中加载.NET程序集。
如果您担心这种安全漏洞，您可以在DG或Applocker策略中阻止AddInProcess。然而，除非Microsoft找到了.NET应用程序混淆代理绕过CI策略的解决方案，否则，肯定还会有其他的旁路技术。如果您打算将该二进制文件添加到自己的DG策略中的话，建议您按照这篇文章中的说明进行操作。此外，不要忘了同时将AddInProcess32加入黑名单。
在后面的文章中，我们将利用这个任意代码执行漏洞来运行一些其他的分析工具，甚至可以提供反向Powershell——从这里可以看出，.NET的确是个好东东，所以你应该始终使用.NET来编写自己的工具。;-)