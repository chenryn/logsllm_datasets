### 0x00 前言
Apache Shiro is a powerful and easy-to-use Java security framework that
performs authentication, authorization, cryptography, and session management.
With Shiro’s easy-to-understand API, you can quickly and easily secure any
application – from the smallest mobile applications to the largest web and
enterprise applications.
Apache
Shiro是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。通过Shiro易于理解的API，您可以快速、轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。
Apache Shiro框架功能主要由以下几个部分组成：
  * Authentication：身份认证-登录
  * Authorization：授权-权限验证
  * Session Manager：会话管理
  * Cryptography：加密
  * Web Support：Web 支持
  * Caching：缓存
  * Concurrency：多线程
  * Testing：测试模块
  * Run As：允许一个用户假装为另一个用户
  * Remember Me：记住我-Session过期后再次登录无需再次登录
一个包含如此多功能模块的框架，我一向认为其必然存在着我们发现和未发现的安全漏洞，而事实也是如此，早在Shiro
1.2.4版本前，就被暴露了Cryptography模块因为默认AES加密key导致Remember
Me模块的反序列化漏洞，在其被修复（每次启动都生成一个新的AES加密key）的几年后，依然是这个地方，出现了令我万万没想到的Padding
Oracle漏洞，我一直以为这样的漏洞也就CTF会出现，这个洞也警醒了我，CTF每一个知识点，在真实漏洞挖掘中，都非常重要。
而本篇文章，我将会用我一贯的源码浅析方式，对Apache
Shiro的核心部分代码进行讲解，并且最后会以1.2.4版本的远古洞的触发原理，对源码进行深入的讲解，接着引出最新的Padding Oracle CBC
Attack，从而让我们在看完这篇文章后，能熟悉的写出Shiro
exploit，并对Shiro框架的主要原理聊熟于胸，还有最重要的一点是，现在网络上很多讲解漏洞的文章，都是简单的讲解漏洞，对这些框架的使用方法以及使用场景等都缺乏描述，对新手极度不友好，
### 0x01 Shiro源码浅析
在进行源码浅析之前，我们先了解一下Shiro如何在一个SpringMVC项目中简单的使用。
#### 1\. Shiro简单使用
我曾经在做Java开发的时候，我有幸为几个系统加入过Shiro框架，也对其功能不足处进行了一些简单的定制修改。
曾经有个系统后台由于不满足等保要求，需要对其后台的登录验证进行重构，在其重构的过程中，我发现该后台只有单个硬编码的用户账号，而该账号被业务方大量的运营和开发人员使用，对于后台任何的配置和功能都能进行修改，这是一个极大的安全隐患，因此，我考虑在重构的后台系统中，加入了Shiro，为后台系统加入若干的特性，使其更加的安全坚固：
  1. 多用户支持
  2. 用户数据存库
  3. 权限精细化-粒度到页面按钮
  4. 用户禁用
  5. 等等...
**多用户支持** 和 **用户数据存库**
：原系统仅有单个硬编码账号，源码泄露将会导致账号密码泄露。而运营也是一个很大的不稳定因素，如果某个运营对一些关键配置进行了修改，将会威胁到系统的稳定运行。
**权限精细化-粒度到页面按钮**
：前面也说了运营用户的潜在不稳定因素，所以加入了权限精细到页面按钮的的权限管理，可以控制每个运营人员具备的权限功能，对于一些涉及到系统安全的功能，我们就能更好的控制。
**用户禁用**
：在后台系统中，我们会对每个账号的操作进行操作日志的持久化，如果我们发现某个账号进行了大量的敏感操作，存在安全风险，我们可以通过用户禁用功能对其账号进行快速的禁用。
以上就是我对Shiro使用的一些简单总结，除此以外，还有很多，比如我曾经在某个古老的项目中使用Shiro后，没办法通过注解方式对接口方法进行权限的控制，最后得益于Shiro优秀的设计，通过一些比较特殊的方法达到方法级的权限控制等。
在简述了我对Shiro的一些使用后，我们接下来就讲讲Shiro，如何去配置使用。
##### 1.1 依赖（pom.xml）
        org.apache.shiro
        shiro-ehcache
        1.2.4
        net.sf.ehcache
        ehcache-core
        2.4.3
        org.apache.shiro
        shiro-core
        1.2.4
        org.apache.shiro
        shiro-spring
        1.2.4
        org.apache.shiro
        shiro-web
        1.2.4
##### 1.2 web配置（web.xml）
        contextConfigLocation
        classpath:applicationContext.xml,classpath:spring-shiro.xml
        spring
        org.springframework.web.servlet.DispatcherServlet
          contextConfigLocation
          classpath:spring-servlet.xml,classpath:spring-shiro.xml
        1
        spring
        /
        shiroFilter
        org.springframework.web.filter.DelegatingFilterProxy
          targetFilterLifecycle
          true
        shiroFilter
        /*
##### 1.3 shiro配置（spring-shiro.xml）
             -->
                    /html/admin/**=authc,roles[admin]
                    /html/user/**=user,roles[user]
                    /jsp/admin/**=authc,roles[admin]
                    /jsp/user/**=user,roles[user]
##### 1.4 登录和注销接口
    @Controller
    @SessionAttributes("user")
    public class LoginAndLogoutController {
        @Autowired
        private LoginAndLogoutService loginAndLogoutService;
        @RequestMapping(value = "/dologin",method = RequestMethod.POST)
        public String doLogin(User user, ModelMap model){
            System.out.println("用户"+user.getLoginName()+"正在登录........!");
            return loginAndLogoutService.doLogin(user,model);
        }
        @RequestMapping(value = "/dologout",method = RequestMethod.GET)
        public String doLogout(User user,ModelMap model){
            System.out.println("用户"+user.getLoginName()+"正在注销........!");
            return loginAndLogoutService.doLogout(model);
        }
    }
    @Service
    public class LoginAndLogoutService {
        @Autowired
        private ApplicationContext applicationContext;
        public String doLogin(User user, ModelMap model){
            UsernamePasswordToken token = new UsernamePasswordToken(user.getLoginName(),user.getPasswd());
            token.setRememberMe(true);
            Subject subject = SecurityUtils.getSubject();
            String msg;
            try {
                subject.login(token);
                if (subject.isAuthenticated()) {
                    System.out.println("登录成功！");
                    UserDao userDao = (UserDao) applicationContext.getBean("userDao");
                    List users = userDao.getUserByLoginName(user);
                    model.put("user", users.get(0));
                    if (subject.hasRole("admin")) {
                        return "redirect:/html/admin/center.html";
                    } else {
                        return "redirect:/html/user/center.html";
                    }
                }
            }catch (IncorrectCredentialsException e) {
                msg = "登录密码错误. Password for account " + token.getPrincipal() + " was incorrect.";
                model.addAttribute("message", msg);
                System.out.println(msg);
            } catch (ExcessiveAttemptsException e) {
                msg = "登录失败次数过多";
                model.addAttribute("message", msg);
                System.out.println(msg);
            } catch (LockedAccountException e) {
                msg = "帐号已被锁定. The account for username " + token.getPrincipal() + " was locked.";
                model.addAttribute("message", msg);
                System.out.println(msg);
            } catch (DisabledAccountException e) {
                msg = "帐号已被禁用. The account for username " + token.getPrincipal() + " was disabled.";
                model.addAttribute("message", msg);
                System.out.println(msg);
            } catch (ExpiredCredentialsException e) {
                msg = "帐号已过期. the account for username " + token.getPrincipal() + " was expired.";
                model.addAttribute("message", msg);
            }catch (UnknownAccountException e) {
                msg = "帐号不存在. There is no user with username of " + token.getPrincipal();