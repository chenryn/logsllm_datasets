RUN apt-get update 
RUN apt-get install -y openjdk-8-jre 
RUN apt-get install -y nodejs 
```
如果您第二次运行`docker build`，Docker 将通过从缓存中取出图层来重用这些图层。因此`apt-get update`不会被执行，因为会使用缓存的版本。实际上，您新创建的映像可能会有一个过时版本的`java`和`node.js`包。创建`RUN`指令时，应始终牢记缓存概念。在我们的例子中，我们应该总是在同一个`RUN`语句中组合`RUN apt-get update`和`apt-get install`，这将只创建一个单层；例如:
```
RUN apt-get update \
&& apt-get install -y openjdk-8-jre \
&& apt-get install -y nodejs \
&& apt-get clean
```
比这更好的是，您还可以使用一种称为“版本锁定”的技术来避免缓存问题。它只不过是为您想要安装的软件包提供一个特定的、具体的版本。
# 煤矿管理局
`CMD`指令的目的是为正在执行的容器提供默认值。稍后运行容器时，您可以将`CMD`指令视为映像的起点。这可以是一个可执行文件，或者，如果您指定了`ENTRYPOINT`指令(我们接下来将解释)，您可以省略可执行文件，只提供默认参数。`CMD`指令语法可以有两种形式:
*   `CMD ["executable","parameter1","parameter2"]`:这是一个所谓的`exec`形态。这也是首选和推荐的形式。参数是 JSON 数组，需要用方括号括起来。重要的是，当容器运行时，`exec`表单不会调用命令外壳。它只是运行作为第一个参数提供的可执行文件。如果`Dockerfile`中存在`ENTRYPOINT`指令，`CMD`为`ENTRYPOINT`指令提供一组默认参数。
*   `CMD command parameter1 parameter2`:这是指令的外壳形式。这一次，shell(如果映像中有)将处理提供的命令。指定的二进制文件将通过使用`/bin/sh -c`调用外壳来执行。这意味着如果您显示容器的主机名，例如，使用`CMD echo $HOSTNAME`，您应该使用指令的外壳形式。
我们之前说过`CMD`指令的推荐形式是`exec`形式。原因如下:通过 shell 启动的一切都将作为`/bin/sh -c`的子命令启动，不传递信号。这意味着可执行文件不会是容器的 PID 1，也不会收到 Unix 信号，所以你的可执行文件不会收到来自`docker stop `的`SIGTERM`。还有一个缺点:你的容器中需要一个外壳。如果你正在构建一个最小的映像，它不需要包含一个外壳二进制文件。使用外壳形式的`CMD`指令将会失败。
When Docker is executing the command, it doesn't check if the shell is available inside the container. If there is no `/bin/sh` in the image, the container will fail to start.
另一方面，如果我们将`CMD`更改为`exec`形式，Docker 将寻找名为`echo`的可执行文件，这当然会失败，因为`echo`是一个 shell 命令。
因为`CMD`与 Docker 引擎在运行容器时的起点相同，所以一个 Dockerfile 中只能有一条`CMD`指令。
If there are more than one `CMD` instruction in a Dockerfile, only the last one will take effect.
您可能会注意到`CMD`指令与`RUN`非常相似。它们都可以运行任何命令(或应用)。有一个关键的重要区别:执行的时间。通过`RUN`指令提供的命令在构建期间执行，而通过`CMD`指令指定的命令在通过对新创建的映像执行`docker run`启动容器时执行。与`CMD`不同的是，`RUN`指令实际上用于构建映像，在之前提交的图层上创建一个新图层。
`RUN` is a build-time instruction, the `CMD` is a runtime instruction.
信不信由你，我们现在可以将我们的 REST 示例微服务容器化了。让我们通过在[第 4 章](04.html)、*创建 Java 微服务*中创建的`pom.xml`文件上执行`mvn clean install`来检查它是否构建。成功构建后，我们应该创建一个带有`rest-example-0.1.0.jar`文件的目标目录。`target`目录中的 Spring Boot 应用 JAR 是一个可执行的胖 JAR。我们将从 Docker 容器中运行它。让我们使用我们已经知道的命令编写基本的`Dockerfile`并将其放在我们项目的根中(这将是我们的`docker build`命令的上下文):
```
FROM jeanblanchard/java:8
COPY target/rest-example-0.1.0.jar rest-example-0.1.0.jar
CMD java -jar rest-example-0.1.0.jar
```
我们现在可以运行`docker build`命令，使用`rest-example`作为映像名称，省略标签(正如您将记得的，在构建映像时省略标签将导致创建`latest`标签):
```
$ docker build . -t rest-example
```
作为第一个参数的点指定了`docker build`命令的上下文。在我们的例子中，它将只是我们的小型微服务的根目录。在构建过程中，Docker 将输出所有的步骤和层标识。请注意，几乎每个`Dockerfile`指令都会创建一个新层。如果你还记得[第一章](01.html)*对 Docker* 的介绍，Docker 利用了层缓存。如果某个特定层可以重用，它将从缓存中取出。它大大提高了构建过程的性能。最后，Docker 将输出新创建的映像的 ID，如下图所示:
![](img/2dd5ee2c-a348-4aed-95e7-4ae5cf872c1f.png)
已经创建了一个映像，因此它应该出现在可运行的映像上。要列出映像，请执行以下 Docker 命令:
```
$ docker image ls
```
从下面的截图中可以看到，我们的`rest-example`映像已经出现并准备运行:
![](img/372ff612-a546-48cb-8ca2-848ec41f0ef8.png)
目前为止，一切顺利。我们已经建立了基本的形象。虽然运行映像的过程是[第 6 章](06.html)、*用 Java 应用运行容器*的主题，但现在让我们快速运行它，以证明它是有效的。要运行映像，请执行以下操作:
```
$ docker run -it rest-example
```
过一会儿，您应该会看到熟悉的 Spring Boot 横幅，作为我们的服务正在 Docker 容器内部运行的标志:
![](img/a4710976-3418-4f75-8c9a-6ead62343c21.png)
这不是很棘手，对吧？基本的`Dockerfile`只包含三行，使用`FROM`、`COPY`将可执行 jar 传输到映像文件系统的基本映像定义，以及运行服务的`CMD`指令。
使用 Maven 构建一个应用 jar 档案，然后使用 Dockerfile `COPY`指令复制它就可以了。将构建过程委托给 Docker 守护程序本身怎么样？嗯，我们可以用我们已经知道的`Dockerfile`指令来做。使用 Docker 守护程序构建 Java 应用的缺点是，该映像将包含所有的 JDK(包括 Java 编译器)、Maven 二进制文件和我们的应用源代码。我建议构建一个单独的工件(一个 JAR 或 WAR 文件)，彻底测试它(使用面向发布的 QA 周期)，并将唯一的工件(当然还有它的依赖项)部署到目标机器上。然而，要想知道`Dockerfile`有什么可能，请看下面的例子，假设我们的应用代码在本地磁盘的`/app`文件夹中:
```
FROM java:8 
RUN apt-get update
RUN apt-get install -y maven
WORKDIR /app
COPY pom.xml /app/pom.xml
COPY src /app/src
RUN ["mvn", "package"]
CMD ["/usr/lib/jvm/java-8-openjdk-amd64/bin/java", 
"-jar", "target/ rest-example-0.1.0.jar"]  
```
在前面的例子中，Maven 构建过程将由 Docker 执行。我们只需运行`apt-get`命令安装 Maven，将我们的应用源代码添加到映像中，执行 Maven `package`命令，然后运行我们的服务。它的行为将完全相同，就好像我们只是将已经构建好的工件复制到映像的文件系统中一样。
有一个与`CMD`指令有点关联的 Dockerfile 指令:`ENTRYPOINT`。我们现在来看看。
# ENTRYPOINT
官方 Docker 文档称`ENTRYPOINT`指令允许您配置一个作为可执行文件运行的容器。不太清楚，至少第一次。`ENTRYPOINT`指令与`CMD`指令相关。事实上，一开始可能会令人困惑。原因很简单:`CMD`是先开发的，然后`ENTRYPOINT`是为了更多的定制而开发的，这两条指令之间有些功能重叠。让我们解释一下。`ENTRYPOINT`指定了一个在容器启动时将一直执行的命令。另一方面，`CMD`指定将被馈送到`ENTRYPOINT`的参数。Docker 有一个默认的`ENTRYPOINT`，即`/bin/sh -c`，但没有默认的`CMD`。例如，考虑以下 Docker 命令:
```
docker run ubuntu "echo" "hello world"
```
在这种情况下，映像将是最新的`ubuntu`，`ENTRYPOINT`将是默认的`/bin/sh -c`，传递给`ENTRYPOINT`的命令将是`echo "hello world"`。
`ENTRYPOINT`指令的语法可以有两种形式，类似于`CMD`。
`ENTRYPOINT ["executable", "parameter1", "parameter2"]`是`exec`的形态，首选，推荐。与`CMD`指令的`exec`形式完全相同，这不会调用命令外壳。这意味着正常的外壳处理不会发生。例如，`ENTRYPOINT [ "echo", "$HOSTNAME" ]`不会对`$HOSTNAME`变量进行变量替换。如果您想要 shell 处理，那么您需要使用 shell 表单或者直接执行 shell。例如:
```
ENTRYPOINT [ "sh", "-c", "echo $HOSTNAME" ]
```
使用`ENV`在 Dockerfile 中定义的变量(我们稍后将介绍这一点)将被 Dockerfile 解析器替换。
`ENTRYPOINT command parameter1 parameter2`是一个一个的贝壳形态。将进行正常的外壳处理。该表单还将忽略任何`CMD`或`docker run`命令行参数。另外，您的命令不会是 PID 1，因为它将由 shell 执行。因此，如果您接着`run docker stop `，容器将不会干净地退出，并且停止命令将被迫在超时后发送一个`SIGKILL`。
与`CMD`指令完全相同，只有 Dockerfile 中的最后一条`ENTRYPOINT`指令才会生效。在 Dockerfile 中覆盖`ENTRYPOINT`允许您在容器运行时使用不同的命令处理您的参数。如果需要更改映像中的默认外壳，可以通过更改`ENTRYPOINT`来实现:
```
FROM ubuntu ENTRYPOINT ["/bin/bash"]
```
从现在开始，所有来自`CMD`的参数，或者使用`docker run`启动容器时提供的参数，将由 Bash shell 处理，而不是默认的`/bin/sh -c`。
考虑这个基于 BusyBox 的简单`Dockerfile`。BusyBox 是一种在单个可执行文件中提供几个精简的 Unix 工具的软件。为了演示`ENTRYPOINT`，我们将使用 BusyBox 中的`ping`命令:
```
FROM busybox ENTRYPOINT ["/bin/ping"] CMD ["localhost"]
```
让我们通过执行以下命令，使用前面的 Dockerfile 构建映像:
```
$ docker build -t ping-example .
```
如果您现在使用`ping`映像运行容器，则`ENTRYPOINT`指令将处理来自所提供的`CMD`参数的参数:在我们的例子中，默认为`localhost`。让我们使用以下命令运行它:
```
$ docker run ping-example
```
因此，您将得到一个`/bin/ping localhost`命令行响应，如下图所示:
![](img/0adc3e0e-271e-489c-ab7c-f2c65401dd89.png)
`CMD`指令，正如您将从其描述中记得的，设置默认命令和/或参数，当您运行容器时，可以从命令行覆盖这些命令和/或参数。`ENTRYPOINT`不同，它的命令和参数不能用命令行覆盖。取而代之的是，所有的命令行参数将被附加在`ENTRYPOINT`参数之后。这样，您可以锁定将在容器启动期间始终执行的命令。
Unlike the `CMD` parameters, the `ENTRYPOINT` command and parameters are not ignored when a Docker container runs with command-line parameters.
因为命令行参数将被附加到`ENTRYPOINT`参数上，我们可以用传递给`ENTRYPOINT`的不同参数来运行我们的`ping`映像。让我们尝试一下，用不同的输入运行 ping 示例:
```
$ docker run ping-example www.google.com
```
这一次它的行为会有所不同。提供的参数值`www.google.com`将被追加到`ENTRYPOINT`中，而不是 Dockerfile 中提供的默认`CMD`值。将执行的总命令行为`/bin/ping www.google.com`，如下图所示:
![](img/cbc00c0f-85af-4851-a8ea-dfa2770bd432.png)
You can use the `exec` form of `ENTRYPOINT` to set fairly stable default commands and arguments and then use either form of `CMD` to set additional defaults that are more likely to be changed.
拥有`ENTRYPOINT`指令给了我们很大的灵活性。最后但并非最不重要的是，当使用`docker run`命令的`--entrypoint`参数启动容器时，`ENTRYPOINT`也可以被覆盖。请注意，您可以使用`--entrypoint`覆盖`ENTRYPOINT`设置，但这只能将二进制设置为执行(不使用`sh -c`)。如您所见，`CMD`和`ENTRYPOINT`指令都定义了在运行容器时执行什么命令。让我们总结一下我们对差异及其合作的了解:
*   一个 Dockerfile 应该至少指定一个`CMD`或`ENTRYPOINT`指令
*   只会使用文件中的最后一个`CMD`和`ENTRYPOINT`
*   当将容器用作可执行文件时，应定义`ENTRYPOINT`