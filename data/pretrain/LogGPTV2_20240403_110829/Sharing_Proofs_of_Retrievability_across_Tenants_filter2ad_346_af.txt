does not offer extractability guarantees. This proposal was
later extended in [9] to address dynamic writes/updates from
the clients. Cash et al. [17] propose a dynamic POR scheme
which relies on oblivious RAM protocols. In [35], Shi et al.
propose a dynamic POR scheme that considerably improves
the performance of [17] by relying on a Merkle hash tree.
Other contributions propose the notion of delegable veriﬁa-
bility of POR; for instance, in [29], [34], the authors describe
schemes that enable the user to delegate the veriﬁcation
of POR and to prevent their further re-delegation. In [7],
Figure 4. Latency incurred in POR w.r.t. the throughput as witnessed by
the provider.
Figure 5. Latency incurred in Store w.r.t. the ﬁle size.
ant’s tags in the store and update procedures. Here, we
also recall the time incurred on the tenants in the store
procedure for a baseline comparison. Our results show that
the overhead of store (in verifying the ﬁrst tags uploaded for
a given ﬁle) incurred on the provider slightly improves that
incurred on the tenants in spite of the fact that BLS signature
generation (performed by clients) is considerably faster than
the signature veriﬁcation process (performed by the cloud).
This is the case since SPORT leverages the homomorphism
of the underlying signature scheme in order to verify all the
tags with a single batch veriﬁcation (cf. Section 3.2). As a
result of this optimization, the overhead on the provider in
this case is approximately 4% lower than that on the tenants.
Notice that this overhead is even further reduced in the
update procedure whenever an additional tenant shares the
same ﬁle/tags. In this case, the provider does not need to
partially create the tags (i.e., to reconstruct vi as given by
Equation 6). Instead, S only needs to verify that Equation 9
holds. This veriﬁcation incurs negligible overhead on S; as
shown in Figure 3(c), this process is almost 40 times faster
than that required to construct the tags by the tenants.
Recall that the update protocol is performed only once
by clients (upon upload of a ﬁle that is already stored).
By doing so, SPORT trades the permanent storage costs
associated with the additional storage of ﬁle tags, with the
one-time use of their computational resources to update the
 0 50 100 150 200 250 1 10 100 1000 10000Latency [s]Concurrent operationsBLS SW / SPORTRSA SW 0 10 20 30 40 50 608163264128Latency [min]File Size [MB]BLS SW / SPORTRSA SWArmknecht et al. introduce the notion of outsourced proofs
of retrievability, an extension of the POR model, in which
users can task an external auditor to perform and verify POR
on their behalf with the cloud provider.
Secure Data De-duplication in Multi-tenant Settings:
In [24], Harnik et al. describe a number of threats posed
by client-side data deduplication, in which an adversary can
learn if a ﬁle is already stored in a particular cloud by guess-
ing the hashes of predictable messages. This leakage can be
countered using Proofs of Ownership schemes (PoW) [18],
[23], which enable a client to prove it possesses the ﬁle in
its entirety. PoW are inspired by Proofs of Retrievability
and Data Possession (POR/PDP) schemes [8], [32], with
the difference that PoW do not have a pre-processing step
at setup time. Halevi et al. [23] propose a PoW construct
based on Merkle trees which incurs low overhead on the
server in constructing and verifying PoW. Xu et al. [36]
build upon the PoW of [23] to construct a PoW scheme
that supports client-side deduplication in a bounded leakage
setting. Di Pietro and Sorniotti [18] propose a PoW scheme
which reduces the communication complexity of [23] at the
expense of additional server computational overhead. Blasco
et al. [12] propose a PoW based on Bloom ﬁlters which
further reduces the server-side overhead of [18].
Douceur et al. [20] introduced the notion of convergent
encryption, a type of deterministic encryption in which a
message is encrypted using a key derived from the plaintext
itself. Convergent encryption is not semantically secure [11]
and only offers conﬁdentiality for messages whose content
is unpredictable. To remedy this, a number of proposals
introduce the notion of oblivious server-aided encryption
to perform data deduplication scheme [6], [10]; here, the
encryption key is obliviously computed based on the hash
of the ﬁle and the private key of the assisting server.
In [37], Zheng and Xu propose the notion of Proof of
Storage with Deduplication (POSD). Here, POSD is intro-
duced as the combination of PDP/POR and PoW schemes.
The authors claim that publicly-veriﬁable POR/PDP can be
inherently used to verify the integrity of deduplicated ﬁles
(since the veriﬁcation can be performed by any entity).
As we mention in this paper, such schemes do not resist
collusion between malicious tenants and the cloud provider;
namely, a cloud provider which has access to the secret ma-
terial (e.g., leaked by the ﬁrst user who created ) can always
construct correct responses to the challenges issued by the
clients—even if the cloud provider deletes the oustourced
data. As far as we are aware, SPORT is the ﬁrst secure
POR instantiation which addresses multi-tenancy and data
deduplication.
6. Conclusion
We introduced the notion of multi-tenant proofs of re-
trievability (MTPOR), an extension of the traditional single-
tenant POR concept, and proposed an efﬁcient instantiation
dubbed SPORT. We implemented a prototype based on
SPORT, and evaluated its performance in a realistic cloud
setting. Our results show that our proposal incurs minimal
storage overhead on the cloud provider without deteriorat-
ing the performance witnessed by tenants and the cloud
provider when compared to existing publicly-veriﬁable POR
schemes. SPORT is provably secure in the random oracle
model under the computational Difﬁe-Hellman problem, as-
suming static corruptions. In this respect, we see the analysis
of the security of SPORT under adaptive corruption as an
interesting open question.
We argue that SPORT provides an important stepping
stone to reconciliate existing cloud integrity and security
primitives with functional requirements (such as resource
sharing and multi-tenancy) in the cloud. Namely, SPORT
provides considerable incentives (i) for end-users to obtain
guarantees about the retrievability of their ﬁles in the cloud,
and (ii) for cloud providers to offer differentiated services
while preserving the efﬁciency of their storage system.
7. Acknowledgements
This work was partly supported by the TREDISEC
project (G.A. no 644412), funded by the European Union
(EU) under the Information and Communication Technolo-
gies (ICT) theme of the Horizon 2020 (H2020) research and
innovation programme.
References
[1]
[2]
PBC Library. http://crypto.stanford.edu/pbc/, 2007.
JPBC:Java Pairing-Based Cryptography Library. http://gas.dia.unisa.
it/projects/jpbc/#.U3HBFfna5cY, 2013.
[3] Backblaze Open Sources Reed-Solomon Erasure Coding Source
Code. https://www.backblaze.com/blog/reed-solomon/, 2015.
[4] Google loses data after lightning strikes. http://money.cnn.com/2015/
[5]
[6]
[7]
08/19/technology/google-data-loss-lightning/, 2015.
F. Armknecht, J. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter.
Outsourced proofs of retrievability. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security,
Scottsdale, AZ, USA, November 3-7, 2014, pages 831–843, 2014.
F. Armknecht, J. Bohli, G. O. Karame, and F. Youssef. Transparent
In Proceedings of the 22nd ACM
data deduplication in the cloud.
SIGSAC Conference on Computer and Communications Security,
Denver, CO, USA, October 12-6, 2015, pages 886–900, 2015.
F. Armknecht, J.-M. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter.
Outsourced proofs of retrievability. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security,
CCS ’14, pages 831–843, New York, NY, USA, 2014. ACM.
[8] G. Ateniese, R. C. Burns, R. Curtmola, J. Herring, L. Kissner, Z. N. J.
Peterson, and D. X. Song. Provable data possession at untrusted
In ACM Conference on Computer and Communications
stores.
Security, pages 598–609, 2007.
[9] G. Ateniese, R. D. Pietro, L. V. Mancini, and G. Tsudik. Scalable and
efﬁcient provable data possession. IACR Cryptology ePrint Archive,
2008:114, 2008.
[10] M. Bellare, S. Keelveedhi, and T. Ristenpart. DupLESS: Server-aided
In Proceedings of the 22Nd
encryption for deduplicated storage.
USENIX Conference on Security, SEC’13, pages 179–194, Berkeley,
CA, USA, 2013. USENIX Association.
[11] M. Bellare, S. Keelveedhi, and T. Ristenpart. Message-locked en-
In Johansson and Nguyen [25],
cryption and secure deduplication.
pages 296–312.
[12] J. Blasco, R. Di Pietro, A. Orﬁla, and A. Sorniotti. A tunable
proof of ownership scheme for deduplication using bloom ﬁlters. In
Communications and Network Security (CNS), 2014 IEEE Conference
on, pages 481–489, Oct 2014.
[13] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the weil
pairing. J. Cryptology, 17(4):297–319, 2004.
[14] K. D. Bowers, A. Juels, and A. Oprea. HAIL: a high-availability and
integrity layer for cloud storage. In ACM Conference on Computer
and Communications Security, pages 187–198, 2009.
[15] K. D. Bowers, A. Juels, and A. Oprea. Proofs of retrievability: theory
and implementation. In CCSW, pages 43–54, 2009.
[16] K. D. Bowers, M. van Dijk, A. Juels, A. Oprea, and R. L. Rivest.
How to tell if your cloud ﬁles are vulnerable to drive crashes.
In
ACM Conference on Computer and Communications Security, pages
501–514, 2011.
[17] D. Cash, A. Küpçü, and D. Wichs. Dynamic Proofs of Retrievability
via Oblivious RAM. In Johansson and Nguyen [25], pages 279–295.
[18] R. Di Pietro and A. Sorniotti. Boosting efﬁciency and security in
proof of ownership for deduplication. In Proceedings of the 7th ACM
Symposium on Information, Computer and Communications Security,
ASIACCS ’12, pages 81–82, New York, NY, USA, 2012. ACM.
[19] D. Dobre, G. Karame, W. Li, M. Majuntke, N. Suri, and M. Vukoli´c.
Powerstore: Proofs of writing for efﬁcient and robust storage.
In
Proceedings of the 2013 ACM SIGSAC Conference on Computer
&#38; Communications Security, CCS ’13, pages 285–298, New
York, NY, USA, 2013. ACM.
[20] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer.
Reclaiming space from duplicate ﬁles in a serverless distributed ﬁle
system. In ICDCS, pages 617–624, 2002.
[21] E. Ghosh, O. Ohrimenko, D. Papadopoulos, R. Tamassia, and
N. Triandopoulos. Zero-knowledge accumulators and set operations.
Cryptology ePrint Archive, Report 2015/404, 2015. http://eprint.iacr.
org/2015/404.
[22] T. T. W. Group. The notorious nine: Cloud computing top threats in
2013. Report, Cloud Security Alliance, February 2013.
[23] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg. Proofs of
In Proceedings of the 18th
ownership in remote storage systems.
ACM Conference on Computer and Communications Security, CCS
’11, pages 491–500, New York, NY, USA, 2011. ACM.
[24] D. Harnik, B. Pinkas, and A. Shulman-Peleg. Side channels in cloud
services: Deduplication in cloud storage. IEEE Security & Privacy,
8(6):40–47, 2010.
[25] T. Johansson and P. Q. Nguyen, editors. Advances in Cryptology
- EUROCRYPT 2013, 32nd Annual International Conference on
the Theory and Applications of Cryptographic Techniques, Athens,
Greece, May 26-30, 2013. Proceedings, volume 7881 of Lecture Notes
in Computer Science. Springer, 2013.
[26] A. Juels and B. S. K. Jr.
PORs: Proofs Of Retrievability for
Large Files. In ACM Conference on Computer and Communications
Security, pages 584–597, 2007.
[27] D. T. Meyer and W. J. Bolosky. A study of practical deduplication. In
Proceedings of the 9th USENIX Conference on File and Stroage Tech-
nologies, FAST’11, pages 1–1, Berkeley, CA, USA, 2011. USENIX
Association.
[28] D. T. Meyer and W. J. Bolosky. A study of practical deduplication.
Trans. Storage, 7(4):14:1–14:20, Feb. 2012.
[29] Y. Ren, J. Xu, J. Wang, and J.-U. Kim. Designated-veriﬁer provable
International Journal of
data possession in public cloud storage.
Security and Its Applications, 7(6):11–20, 2013.
[30] L. Reyzin and S. Yakoubov. Efﬁcient asynchronous accumulators for
distributed pki. Cryptology ePrint Archive, Report 2015/718, 2015.
http://eprint.iacr.org/2015/718.
[31] T. Ristenpart and S. Yilek. The power of proofs-of-possession:
Securing multiparty signatures against rogue-key attacks. In Advances
in Cryptology - EUROCRYPT 2007, 26th Annual International Con-
ference on the Theory and Applications of Cryptographic Techniques,
Barcelona, Spain, May 20-24, 2007, Proceedings, volume 4515 of
Lecture Notes in Computer Science, pages 228–245. Springer, 2007.
In
[32] H. Shacham and B. Waters. Compact Proofs of Retrievability.
ASIACRYPT, pages 90–107, 2008.
[33] H. Shacham and B. Waters. Compact Proofs of Retrievability. Cryp-
tology ePrint Archive, Report 2008/073, 2008. http://eprint.iacr.org/.
[34] S.-T. Shen and W.-G. Tzeng. Delegable provable data possession
for remote data in the clouds. In S. Qing, W. Susilo, G. Wang, and
D. Liu, editors, ICICS, volume 7043 of Lecture Notes in Computer
Science, pages 93–111. Springer, 2011.
[35] E. Shi, E. Stefanov, and C. Papamanthou. Practical dynamic proofs of
retrievability. In A.-R. Sadeghi, V. D. Gligor, and M. Yung, editors,
ACM Conference on Computer and Communications Security, pages
325–336. ACM, 2013.
[36] J. Xu, E.-C. Chang, and J. Zhou. Weak leakage-resilient client-side
In Proceedings
deduplication of encrypted data in cloud storage.
of the 8th ACM SIGSAC Symposium on Information, Computer and
Communications Security, ASIA CCS ’13, pages 195–206, New York,
NY, USA, 2013. ACM.
[37] Q. Zheng and S. Xu. Secure and efﬁcient proof of storage with
In Proceedings of the Second ACM Conference on
deduplication.
Data and Application Security and Privacy, CODASPY ’12, pages
1–12, New York, NY, USA, 2012. ACM.
Appendix A.
Public SW POR
To enable any entity which does not necessarily possess
secrets to verify a POR, Shacham and Waters [32] propose
two publicly veriﬁable POR schemes based on BLS signa-
tures [13] and RSA, respectively.
Public BLS SW Scheme: The setup phase requires choos-
ing a group G with support Zp, and a computable
bilinear map e : G × G → GT . Additionally, the user
chooses a private key x ∈ Zp, the corresponding public
key v = gx ∈ G along with another generator u ∈ G.
In the storage phase, a signature on each block i is
computed σi =
. For veriﬁcation,
the challenge query Q is generated similarly to PSW
and sent to the prover who computes:
j=1 umij
j
(cid:16)
(cid:17)x
H(i)(cid:81)s
i ∈ G, µj ← (cid:88)
 (cid:89)
H(i)νi · s(cid:89)
σνi
(i,νi)∈Q
j=1
νimij ∈ Zp.
(i,νi)∈Q
 .
σ ← (cid:89)
(i,νi)∈Q
These values are sent to the veriﬁer who checks that:
e(σ, g) ?= e
uµj
j , v
(18)
Public RSA SW Scheme: The public RSA-based SW
scheme is similar to its public counterpart. Here,
the block authenticator can be computed by σi =
(H(i)umi)d mod N , where d is the private key of
the user. The cloud response is calculated similarly to
the public BLS SW scheme. Given the public RSA key
e, the veriﬁcation unfolds as follows:
σe ?=
H(i)νi uµ mod N.
(cid:89)
(i,νi)∈Q