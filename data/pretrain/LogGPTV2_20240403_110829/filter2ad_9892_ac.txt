        int async = 0;
        /* A negative encap_type indicates async resumption. */
        if (encap_type seq.input.low;
            family = x->outer_mode->afinfo->family;
            goto resume;
        }
        daddr = (xfrm_address_t *)(skb_network_header(skb) +
                       XFRM_SPI_SKB_CB(skb)->daddroff);
        family = XFRM_SPI_SKB_CB(skb)->family;
        /* if tunnel is present override skb->mark value with tunnel i_key */
        switch (family) {
        case AF_INET:
            if (XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip4) // p32
                mark = be32_to_cpu(XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip4->parms.i_key);
            break;
        case AF_INET6:
            if (XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip6)
                mark = be32_to_cpu(XFRM_TUNNEL_SKB_CB(skb)->tunnel.ip6->parms.i_key);
            break;
        }
        /* Allocate new secpath or COW existing one. */
        if (!skb->sp || atomic_read(&skb->sp->refcnt) != 1) {
            struct sec_path *sp;
            sp = secpath_dup(skb->sp);
            if (!sp) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINERROR);
                goto drop;
            }
            if (skb->sp)
                secpath_put(skb->sp);
            skb->sp = sp;
        }
        seq = 0;
        if (!spi && (err = xfrm_parse_spi(skb, nexthdr, &spi, &seq)) != 0) { //spi =0
            XFRM_INC_STATS(net, LINUX_MIB_XFRMINHDRERROR);
            goto drop;
        }
        do {
            if (skb->sp->len == XFRM_MAX_DEPTH) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINBUFFERERROR);
                goto drop;
            }
    [1]     x = xfrm_state_lookup(net, mark, daddr, spi, nexthdr, family);//找到对应的xfrm_state
            if (x == NULL) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINNOSTATES);
                xfrm_audit_state_notfound(skb, family, spi, seq);
                goto drop;
            }
            skb->sp->xvec[skb->sp->len++] = x;
            spin_lock(&x->lock);
            if (unlikely(x->km.state != XFRM_STATE_VALID)) {
                if (x->km.state == XFRM_STATE_ACQ)
                    XFRM_INC_STATS(net, LINUX_MIB_XFRMACQUIREERROR);
                else
                    XFRM_INC_STATS(net,
                               LINUX_MIB_XFRMINSTATEINVALID);
                goto drop_unlock;
            }
            if ((x->encap ? x->encap->encap_type : 0) != encap_type) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMISMATCH);
                goto drop_unlock;
            }
            //x->repl 在 xfrm_init_replay赋值，可调用xfrm_replay_check_esn
    [2]     if (x->repl->check(x, skb, seq)) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);
                goto drop_unlock;
            }
            if (xfrm_state_check_expire(x)) {//check x->lft内容
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEEXPIRED);
                goto drop_unlock;
            }
            spin_unlock(&x->lock);
            //检查tunnel参数
            if (xfrm_tunnel_check(skb, x, family)) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);
                goto drop;
            }
            //根据x->replay_esn中，seq、replay_windows关系，返回seqhi 
            seq_hi = htonl(xfrm_replay_seqhi(x, seq));
            XFRM_SKB_CB(skb)->seq.input.low = seq;
            XFRM_SKB_CB(skb)->seq.input.hi = seq_hi;
            skb_dst_force(skb);
            dev_hold(skb->dev);
            nexthdr = x->type->input(x, skb);
            if (nexthdr == -EINPROGRESS)
                return 0;
    resume:
            dev_put(skb->dev);
            spin_lock(&x->lock);
            if (nexthdr type->proto);
                    x->stats.integrity_failed++;
                }
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEPROTOERROR);
                goto drop_unlock;
            }
            /* only the first xfrm gets the encap type */
            encap_type = 0;
            // async = 0 并调用xfrm_replay_recheck_esn
            if (async && x->repl->recheck(x, skb, seq)) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);
                goto drop_unlock;
            }
            //调用xfrm_replay_advance_esn
    [3]     x->repl->advance(x, seq);
            x->curlft.bytes += skb->len;
            x->curlft.packets++;
            spin_unlock(&x->lock);
            XFRM_MODE_SKB_CB(skb)->protocol = nexthdr;
            inner_mode = x->inner_mode;
            if (x->sel.family == AF_UNSPEC) {
                inner_mode = xfrm_ip2inner_mode(x, XFRM_MODE_SKB_CB(skb)->protocol);
                if (inner_mode == NULL) {
                    XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);
                    goto drop;
                }
            }
            if (inner_mode->input(x, skb)) {
                XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);
                goto drop;
            }
            if (x->outer_mode->flags & XFRM_MODE_FLAG_TUNNEL) {
                decaps = 1;
                break;
            }
            /*
             * We need the inner address.  However, we only get here for
             * transport mode so the outer address is identical.
             */
            daddr = &x->id.daddr;
            family = x->outer_mode->afinfo->family;
            err = xfrm_parse_spi(skb, nexthdr, &spi, &seq);
            if (err type->proto, 0);
        if (err)
            goto drop;
        nf_reset(skb);
        if (decaps) {
            skb_dst_drop(skb);
            netif_rx(skb);
            return 0;
        } else {
            return x->inner_mode->afinfo->transport_finish(skb, async);
        }
    drop_unlock:
        spin_unlock(&x->lock);
    drop:
        xfrm_rcv_cb(skb, family, x && x->type ? x->type->proto : nexthdr, -1);
        kfree_skb(skb);
        return 0;
    }
在[xfrm_replay_check_esn](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L434)函数中，首先找到的还是`x->replay_esn`成员，接着检查[1]处某`bit`是否为1，否则退出。首先可以分析出该`bit`的计算方法，是`nr>>5`，即`(nr
/ 32)`，而`bitnr = nr % 32`，而`bmp`的类型为`u32`，即`bmp[i]`的大小为`4*8
bit`，不难发现，`bmp`的作用就是表示某个值是否被占用。取一个情况`bitnr = (pos - diff) %
replay_esn->replay_window`，其中`pos = (replay_esn->seq - 1) %
replay_esn->replay_window`，`diff = top - seq =replay_esn->seq - seq`，因此`bitnr
= (seq - 1 )% replay_esn->replay_window`，即`AH`中的`seq`是否被处理过。
    static int xfrm_replay_check_esn(struct xfrm_state *x,
                     struct sk_buff *skb, __be32 net_seq)
    {
        unsigned int bitnr, nr;
        u32 diff;
        struct xfrm_replay_state_esn *replay_esn = x->replay_esn;
        u32 pos;
        u32 seq = ntohl(net_seq);
        u32 wsize = replay_esn->replay_window;
        u32 top = replay_esn->seq;
        u32 bottom = top - wsize + 1;
        if (!wsize)
            return 0;
        if (unlikely(seq == 0 && replay_esn->seq_hi == 0 &&
                 (replay_esn->seq replay_window - 1)))
            goto err;
        diff = top - seq;
        if (likely(top >= wsize - 1)) {
            /* A. same subspace */
            if (likely(seq > top) || seq  top && seq = bottom)
                diff = ~seq + top + 1;
        }
        if (diff >= replay_esn->replay_window) {
            x->stats.replay_window++;
            goto err;
        }
        pos = (replay_esn->seq - 1) % replay_esn->replay_window;
        if (pos >= diff)
            bitnr = (pos - diff) % replay_esn->replay_window;
        else
            bitnr = replay_esn->replay_window - (diff - pos);
        nr = bitnr >> 5;
        bitnr = bitnr & 0x1F;
    [1] if (replay_esn->bmp[nr] & (1U stats.replay++;
    err:
        xfrm_audit_state_replay(x, skb, net_seq);
        return -EINVAL;
    }
而在[xfrm_replay_advance_esn](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L505)函数中，共有三处对`bmp`的写操作，其中在[1]处对于某一个`bit`执行`&0`，将导致某一个`bit`被置零。在[2]处，可以发现函数对从`bmp[0]`到`bmp[(replay_esn->replay_window
- 1) >> 5]`块内存均置零，而[3]处，这可以对某一个`bit`写1。
    static void xfrm_replay_advance_esn(struct xfrm_state *x, __be32 net_seq)
    {
        unsigned int bitnr, nr, i;
        int wrap;
        u32 diff, pos, seq, seq_hi;
        struct xfrm_replay_state_esn *replay_esn = x->replay_esn;
        if (!replay_esn->replay_window)
            return;
        seq = ntohl(net_seq);
        pos = (replay_esn->seq - 1) % replay_esn->replay_window;
        seq_hi = xfrm_replay_seqhi(x, net_seq);
        wrap = seq_hi - replay_esn->seq_hi;
        if ((!wrap && seq > replay_esn->seq) || wrap > 0) {
            if (likely(!wrap))
                diff = seq - replay_esn->seq;
            else
                diff = ~replay_esn->seq + seq + 1;
            if (diff replay_window) {
                for (i = 1; i replay_window;
                    nr = bitnr >> 5;
                    bitnr = bitnr & 0x1F;
    [1]             replay_esn->bmp[nr] &=  ~(1U replay_window - 1) >> 5;
                for (i = 0; i bmp[i] = 0;
            }
            bitnr = (pos + diff) % replay_esn->replay_window;
            replay_esn->seq = seq;
            if (unlikely(wrap > 0))
                replay_esn->seq_hi++;
        } else {
            diff = replay_esn->seq - seq;
            if (pos >= diff)
                bitnr = (pos - diff) % replay_esn->replay_window;
            else
                bitnr = replay_esn->replay_window - (diff - pos);
        }
        nr = bitnr >> 5;
        bitnr = bitnr & 0x1F;
    [3] replay_esn->bmp[nr] |= (1U repl->notify(x, XFRM_REPLAY_UPDATE);
    }
因此， **通过用户态空间发送一个`AH`数据包将导致，一个`bit`的内存写，或者一段空间的置零**。
# 漏洞触发与利用
## netlink套接字通信
与熟悉的驱动或内核模块所使用的系统调用或`ioctl`机制不同，本漏洞触发使用过的是`netlink`通信机制。