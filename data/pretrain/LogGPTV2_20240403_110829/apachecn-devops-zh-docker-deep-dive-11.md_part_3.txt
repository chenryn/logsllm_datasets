Figure 11.16
MACVLAN 使用标准的 Linux 子接口，你必须用它们将要连接的 VLAN 的 ID 来标记它们。在这个例子中，我们连接到 VLAN 100，所以我们用`.100` ( `etho.100`)标记子接口。
我们还使用`--ip-range`标志来告诉 MACVLAN 网络它可以分配给容器的 IP 地址子集。这个地址范围必须保留给 Docker，不要被其他节点或 DHCP 服务器使用，因为没有管理平面功能来检查重叠的 IP 范围。
`macvlan100`网络已经为容器做好了准备，所以让我们用下面的命令部署一个。
```
$ docker container run -d --name mactainer1 \
  --network macvlan100 \
  alpine sleep 1d 
```
 `现在配置如图 11.17 所示。但是请记住，底层网络(VLAN 100)看不到任何 MACVLAN 的魔力，它只看到带有 MAC 和 IP 地址的容器。考虑到这一点，“mactainer1”容器将能够 ping 通 VLAN 100 上的任何其他系统并与之通信。挺贴心的！
> **注意:**如果不能让这个工作，可能是因为主机网卡没有处于混杂模式。请记住，公共云平台通常不允许混杂模式。
![Figure 11.17](img/figure11-17.png)
Figure 11.17
在这一点上，我们已经有了一个 MACVLAN 网络，并使用它来连接一个新的容器到一个现有的 VLAN。然而，这并不止于此。Docker MACVLAN 驱动程序建立在经过测试的同名 Linux 内核驱动程序之上。因此，它支持 VLAN 中继。这意味着我们可以创建多个 MACVLAN 网络，并将同一个 Docker 主机上的容器连接到它们，如图 11.18 所示。
![Figure 11.18](img/figure11-18.png)
Figure 11.18
这几乎涵盖了 MACVLAN。Windows 为`transparent`驱动程序提供了类似的解决方案。
##### 用于故障排除的容器和服务日志
在继续服务发现之前，先快速了解连接问题的故障排除。
如果您认为您遇到了容器之间的连接问题，那么值得检查 Docker 守护程序日志以及容器日志。
在 Windows 系统上，守护进程日志存储在`~AppData\Local\Docker`下，可以在 Windows 事件查看器中查看。在 Linux 上，这取决于你使用的是什么系统。如果你正在运行一个`systemd`，日志将进入`journald`，你可以使用`journalctl -u docker.service`命令查看它们。如果您没有运行`systemd`，您应该查看以下位置:
*   运行`upstart` : `/var/log/upstart/docker.log`的 Ubuntu 系统
*   基于 RHEL 的系统:`/var/log/messages`
*   德比安:`/var/log/daemon.log`
您还可以告诉 Docker 您希望守护程序日志记录有多详细。为此，请编辑守护程序配置文件(`daemon.json`)，以便将“`debug`”设置为“`true`”并将“`log-level`”设置为以下选项之一:
*   `debug`最啰嗦的选项
*   `info`默认值和第二详细选项
*   `warn`第三个最冗长的选项
*   `error`第四个最冗长的选项
*   `fatal`最少详细选项
以下来自`daemon.json`的片段启用调试并将级别设置为`debug`。它将在所有 Docker 平台上工作。
```
{
  "debug":true,
  "log-level":"debug",
} 
```
 `对文件进行更改后，请务必重新启动 Docker。
那是守护进程日志。容器日志呢？
使用`docker container logs`命令可以查看独立容器中的日志，使用`docker service logs`命令可以查看 Swarm 服务日志。然而，Docker 支持许多日志驱动程序，它们并不都与`docker logs`命令一起工作。
除了守护程序日志的驱动程序和配置，每个 Docker 主机都有一个默认的日志驱动程序和容器配置。一些驱动因素包括:
*   `json-file`(默认)
*   `journald`(仅适用于运行`systemd`的 Linux 主机)
*   `syslog`
*   `splunk`
*   `gelf`
`json-file`和`journald`可能是最容易配置的，它们都使用`docker logs`和`docker service logs`命令。命令的格式是`docker logs `和`docker service logs `。
如果您使用其他日志驱动程序，您可以使用第三方平台的本地工具查看日志。
以下来自`daemon.json`的片段显示了配置为使用`syslog`的 Docker 主机。
```
{
  "log-driver": "syslog"
} 
```
 `您可以配置一个单独的容器或服务，从带有`--log-driver`和`--log-opts`标志的特定日志驱动程序开始。这些将覆盖`daemon.json`中设置的任何内容。
容器日志的工作前提是您的应用在容器内作为 PID 1 运行，并将日志发送到`STDOUT`，将错误发送到`STDERR`。然后，日志驱动程序将这些“日志”转发到通过日志驱动程序配置的位置。
如果您的应用登录到一个文件，可以使用符号链接将日志文件写入重定向到 STDOUT 和 STDERR。
以下是对一个名为“vantage-db”的容器运行`docker logs`命令的示例，该容器被配置为使用`json-file`日志驱动程序。
```
$ docker logs vantage-db
1:C 2 Feb 09:53:22.903 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 2 Feb 09:53:22.904 # Redis version=4.0.6, bits=64, commit=00000000, modified=0, pid=1
1:C 2 Feb 09:53:22.904 # Warning: no config file specified, using the default config.
1:M 2 Feb 09:53:22.906 * Running mode=standalone, port=6379.
1:M 2 Feb 09:53:22.906 # WARNING: The TCP backlog setting of 511 cannot be enforced because...
1:M 2 Feb 09:53:22.906 # Server initialized
1:M 2 Feb 09:53:22.906 # WARNING overcommit_memory is set to 0! 
```
 `很有可能在守护程序日志或容器日志中发现网络连接错误。
#### 服务发现
除了核心组网，`libnetwork`还提供一些重要的网络服务。
*服务发现*允许所有容器和 Swarm 服务通过名称相互定位。唯一的要求是它们在同一个网络上。
在引擎盖下，这利用了 Docker 的嵌入式 DNS 服务器和每个容器中的 DNS 解析器。图 11.19 显示了容器“c1”通过名称 pinging 容器“c2”。同样的原则也适用于群服务。
![Figure 11.19](img/figure11-19.png)
Figure 11.19
让我们一步步来。
*   **步骤 1:**`ping c2`命令调用本地域名解析器将名称“c2”解析为一个 IP 地址。所有 Docker 容器都有一个本地 DNS 解析器。
*   **步骤 2:** 如果本地解析器的本地缓存中没有“c2”的 IP 地址，它会向 Docker DNS 服务器发起递归查询。本地解析器被预先配置为知道如何到达 Docker DNS 服务器。
*   **步骤 3:**Docker DNS 服务器保存所有使用`--name`或`--net-alias`标志创建的容器的名称到 IP 的映射。这意味着它知道容器“c2”的 IP 地址。
*   **步骤 4:**DNS 服务器将“c2”的 IP 地址返回给“c1”中的本地解析器。这样做是因为这两个容器在同一个网络上——如果它们在不同的网络上，这将不起作用。
*   **步骤 5:**`ping`命令将 ICMP 回应请求数据包发送到“c2”的 IP 地址。
以`--name`标志开始的每个 Swarm 服务和独立容器将向 Docker DNS 服务注册其名称和 IP。这意味着所有容器和服务副本都可以使用 Docker DNS 服务来查找彼此。
然而，服务发现是*网络范围的*。这意味着名称解析仅适用于同一网络上的容器和服务。如果两个容器位于不同的网络上，它们将无法相互解析。
关于服务发现和名称解析的最后一点…
可以使用定制的域名系统选项来配置 Swarm 服务和独立容器。例如，`--dns`标志允许您指定一个自定义域名系统服务器列表，以备嵌入式 Docker 域名系统服务器无法解析查询时使用。这在 Docker 之外查询服务名称时很常见。您也可以使用`--dns-search`标志为针对非限定名称的查询(即当查询不是完全限定域名时)添加自定义搜索域。
在 Linux 上，这些都是通过在每个容器内的`/etc/resolv.conf`文件中添加条目来工作的。
以下示例将启动一个新的独立容器，并添加臭名昭著的`8.8.8.8`谷歌域名系统服务器，以及`nigelpoulton.com`作为搜索域，以追加到不合格的查询中。
```
$ docker container run -it --name c1 \
  --dns=8.8.8.8 \
  --dns-search=nigelpoulton.com \
  alpine sh 
```
 `#### 入口负载平衡
Swarm 支持两种发布模式，使服务可以在集群之外访问:
*   入口模式(默认)
*   主机方式
通过*入口模式*发布的服务可以从群集中的任何节点访问，甚至是运行服务副本的节点**而不是**。通过*主机模式*发布的服务只能通过点击运行服务副本的节点来访问。图 11.20 显示了两种模式的区别。
![Figure 11.20](img/figure11-20.png)
Figure 11.20
默认为入口模式。这意味着任何时候您发布带有`-p`或`--publish`的服务，它将默认为*入口模式*。要在*主机模式*下发布服务，需要使用`--publish`标志的长格式**和**添加`mode=host`。我们来看一个使用*主机模式*的例子。
```
$ docker service create -d --name svc1 \
  --publish published=5000,target=80,mode=host \
  nginx 
```
 `关于命令的几点注意事项？`docker service create`允许您使用*长格式语法*或*短格式语法*发布服务。简短的形式是这样的:`-p 5000:80`我们已经看过几次了。但是，不能使用短格式在*主机模式*下发布服务。
长型看起来是这样的:`--publish published=5000,target=80,mode=host`。这是一个逗号分隔的列表，每个逗号后面没有空格。这些选项的工作原理如下:
*   `published=5000`通过端口 5000 对外提供服务
*   `target=80`确保对`published`端口的外部请求被映射回服务副本上的端口 80
*   `mode=host`确保外部请求只有通过运行服务副本的节点进入时才会到达服务。
入口模式是您通常使用的模式。
在幕后，*入口模式*使用称为**服务网格**或**群模式服务网格**的第 4 层路由网格。图 11.21 显示了以入口模式公开的服务的外部请求的基本流量。
![Figure 11.21](img/figure11-21.png)
Figure 11.21
让我们快速浏览一下图表。
1.  顶部的命令部署了一个名为“svc1”的新 Swarm 服务。它将服务附加到`overnet`网络，并在端口 5000 上发布。
2.  像这样发布 Swarm 服务(`--publish published=5000,target=80`)将在入口网络的端口 5000 上发布。由于 swarm 中的所有节点都连接到入口网络，这意味着端口在 Swarm 范围内发布*。*
**   在集群上实现逻辑，确保通过端口 5000 上的**任何节点**到达入口网络的任何流量将被路由到端口 80 上的“svc1”服务。*   此时，部署了“svc1”服务的单个副本，并且集群具有一个映射规则，该规则表示“*”所有到达端口 5000 上的入口网络的流量都需要路由到运行“svc1”服务副本的节点*。*   红线表示流量到达端口 5000 上的`node1`，并通过入口网络路由到节点 2 上运行的服务副本。*
 *重要的是要知道传入的流量可能会到达端口 5000 上的四个 Swarm 节点中的任何一个，并且我们会得到相同的结果。这是因为服务是通过入口网络在群体范围内发布的。
同样重要的是要知道，如果有多个副本在运行，如图 11.22 所示，所有副本之间的流量将是平衡的。
![Figure 11.22](img/figure11-22.png)
Figure 11.22
### Docker 网络-命令
Docker 网络有自己的`docker network`子命令。主要命令包括:
*   `docker network ls`:列出本地 Docker 主机上的所有网络。
*   `docker network create`:创建新的 Docker 网络。默认情况下，它使用 Windows 上的`nat`驱动程序和 Linux 上的`bridge`驱动程序来创建它们。您可以使用`-d`标志指定驱动程序(网络类型)。`docker network create -d overlay overnet`将使用本地 Docker `overlay`驱动程序创建一个名为 overnet 的新覆盖网络。
*   `docker network inspect`:提供 Docker 网络的详细配置信息。
*   `docker network prune`:删除 Docker 主机上所有未使用的网络。
*   `docker network rm`:删除 Docker 主机上的特定网络。
### 章节总结
容器网络模型(CNM)是 Docker 网络的主设计文档，定义了用于构建 Docker 网络的三个主要构造— *沙箱*、*端点*和*网络*。
`libnetwork`是用 Go 写的开源库，实现了 CNM。它由 Docker 使用，是所有核心 Docker 网络代码的所在地。它还提供了 Docker 的网络控制平面和管理平面。
驱动程序通过添加代码来实现特定的网络类型，如桥接网络和覆盖网络，从而扩展 Docker 网络栈(`libnetwork`)。Docker 附带了几个内置驱动程序，但您也可以使用第三方驱动程序。
单主机桥接网络是 Docker 网络最基本的类型，适合本地开发和非常小的应用。它们不能扩展，如果您想在网络之外发布服务，它们需要端口映射。Linux 上的 Docker 使用内置的`bridge`驱动实现桥接网络，而 Windows 上的 Docker 使用内置的`nat`驱动实现桥接网络。
覆盖网络风靡一时，是优秀的仅容器多主机网络。我们将在下一章深入讨论它们。
`macvlan`驱动程序(Windows 上的`transparent`)允许您将容器连接到现有的物理网络和虚拟局域网。他们通过给容器一级公民自己的 MAC 和 IP 地址来制造容器。不幸的是，它们需要主机网卡上的混杂模式，这意味着它们无法在公共云中工作。
Docker 还使用`libnetwork`来实现基本的服务发现，以及用于入口流量的基于容器的负载平衡的服务网格。*`````````````````````*****