却是https://www.fiddler2.com/的页面。
方法3-重定向
重定向（redirect）是指通过Fiddler给客户端返回HTTP/307重定向响应，使得客户端使
用新的URL重新发送请求。因为负责重新发送请求的是客户端，所以它知道请求目标发生了
变化，因面在发送新的请求时会包含新的Host头和URL。客户端会给目标URL发送合适的
cookie，如果请求是通过HTTPS发送的，客户端期望目标服务器为新的目标URL使用合适的
证书。因为发送的新请求所包含的是新的目标URL及其匹配的Host，这种请求能够安全地通
过上游网关代理发送到期望的服务器上。
重定向请求的功能
Fiddler支持通过以下几个功能实现上述三种基础技术：
1）通过Tools菜单中的HOSTS..命令，可以把数据流从一个IP地址重路由到另一个IP
地址。
2）通过FiddlerScript或扩展，设置Session对象的X-OverrideHost标志，可以把数据流
从一个IP地址重路由到另一个IP地址。
3）通过FiddlerScript或扩展，设置Session对象的host属性或fullUrl属性，把一个URL
的请求重写到另一个URL。
4）通过FiddlerScript或某个扩展的utilCreateResponseAndBypassServer方法，可以把一
个URL重定向到另一个URL。
5）通过AutoResponder，在Action文本框中输入新的URL，可以把一个URL的请求重
写到另一个URL。
6）通过AutoResponder，在Action文本框中输入前缀*redir，可以把一个URL的请求重
定向到另一个URL。
69
---
## Page 60
第3章技巧和概念
7）通过AutoResponder，在Action文本框中输入*flag：X-OverrideHost-targethost，会把
一个URL的请求重路由到另一个URL。
3.2Session比较
调试任务中最常见的一种情形是确定为什么某个请求成功而另一个请求失败。要完成这
种任务，需要依靠具有Session比较功能的强大工具的支持。
要比较两个Session，只需要在WebSessions列表中选中这两个Session，然后从上下文菜单
中选择Compare按钮（或者按下CTRL+W键）。执行对比命令时，那两个选中的Session会被保
存到临时文件中，然后启动文件比较工具，并把两个临时文件的路径传递给它，如图3-2所示。
WinDitf
s：as2_1csenr
gent:hila/5.
con/ua.aspx 8Tir/1.
p： 8.
NT6.2:064
OHT: 1
15
rset-utf-s
图3-2
Fiddler没有自带文件对比工具，不过很多开发者安装了WinDiff、Odd、BeyondCompare、
WinMerge或其他类似的工具。如果你已经安装了WinDif工具，把它拷贝到Program
FilesFiddler2文件夹下，或者把它拷贝到系统的某个PATH路径下（如C:Windows\System32）
这样Fiddler就可以找到它。如果你没有安装任何文件对比工具，可以从http://WinMerge.org
下载WinMerge.
如果你希望在Fiddler中使用的比较工具不是WinDiff，使用QuickExec框或about:config
标签页设置三个选项偏好（Preferences）后，就可以达成所愿了，首先，提供该工具的路径：
09
---
## Page 61
3.2Session 比较
PREFS SET fiddler.config.path.differ *C:\Program Files (xB6) \Microsoft Visual
Studio 11.0\Common7\IDE\devenv.exe*
然后，配置期望安装的工具的命令行参数：
键就会执行这个命令：
借助altermate命令行功能，可以使用文件对比工具的多种模式。例如，WinDiff支持-p
命令行标志位，会在每个比较的第一个符号处断点。当你在点击“Compare”选项时按住SHIFT
键，Fiddler会把-p标志位传递给WinDif，在每个断点处会新起一行，如图3-3所示。这种方
式对于查看行长度很长的文本很有用（如URL的查询字符串）。
WinDiff
2
patiale:
UltraDiff
默认情况下，Fiddler与WinDiff这样基于行的比较工具类似，会对临时文件重新格式化，
以便查看，这个功能是通过UItraDiff实现的，它会改变两个文件中的请求头的顺序，因此在
两个Session中值完全相同的headers会显示在最前面，然后是取值不同的headers，最后面显
示的是完全不同的Session的headers。UltraDiff对请求的URL重新组织，从而保证即使两个
URL只有微小的区别（比如URL长512个字符，在该URL中间有个字符不同），这种区别
在显示上可以很容易看出来。
如果你希望Fiddler在保存请求的临时文件中不要修改其headers和URL，可以把
fiddler.differ.ultradiff选项设置为false。
同时比较多个Sessions
如果你想同时比较多个Sessions（甚至是整个SAZ文件），应该使用扩展工具Traffic
61
---
## Page 62
第3章技巧和概念
Differ，这个工具属于扩展，会在第6章中详细介绍。该扩展支持对WebSessions列表进行比
较，而且支持对列表中的每个Session做文本比较。
3.3断点调试
在传统的调试器中，你可以选择程序执行时在哪个指令处中断，这些点就是断点。当程
序在断点处停止时，你可以查看程序的状态，修改执行的内存或数据流，以改变程序的行为。
Fiddler为Web请求提供了类似的，基于断点的调试功能。Session在执行过程中有两个
可能中断的时间点：
1）从客户端读到请求后，在请求被发送给服务器之前。，
2）在服务器发回响应后，在响应返回给客户端之前。
这两个断点称为请求断点（requestbreakpoints）和响应断点（responsebreakpoints）。
当程序在请求中断点停止执行时，你可以任意修改该请求，包括URL、headers或body。
你还可以选择不发送该请求给服务器，自定义响应返回给客户端。大多数情况下，客户端
应用不知道Fiddler修改了它的请求。
同样，当程序在响应断点停止执行时，你可以任意修改响应的内容，包括headers或body。
你还可以自己生成新的响应，取代从服务器端接收到的响应。在响应断点，你“也可以”
修改任意客户端发送的请求，但是由于该请求已经发送给服务器了，这些修改只在Fiddler
中生效一服务器永远都看不到你做的这些修改。
设置断点
Fiddler支持多种断点设置方式，但实质上，它们都是通过修改Session的两个标志位
X-BreakRequest和X-BrcakResponse实现的。
通过访问菜单Rules>AutomaticBreakpoints或点击Fiddler状态栏左侧的第3个面板，都
可以很容易地对所有的请求或响应设置断点。这种设置全局性断点方式的缺点在于你很可能
会因为要手工越过那些不感兴趣的中断点而感到厌烦。
相反地，你可以采用Filters或AutoResponder标签来更精确地定位断点。Filters标签支持
对以下儿种类型的Session设置断点：1）使用POST方法：2）请求中包含查询字符串：3）通
过XMLHttpRequest方式发送：4）返回特定的Content-Type。使用AutoResponder标签，可以
62
---
## Page 63
3.3断点调试
对URL能够匹配指定文本或正则表达式的各种请求设置请求断点或响应断点。比如要创建请
求断点，可以设置规则的Action文本为*bpu：要创建响应断点，可以把文本设置为*bpafter。
如果你想要定义更复杂的断点条件，可以使用菜单栏Rules>CustomizeRules，在
FiddlerScript 的 OnBeforeRequest、OnPeekAtResponseHeaders 或OnBeforeResponse 方法中设
置X-BreakRequest或X-BreakResponse 标志位。
在默认的FiddlerScript文件中，通过QuickExec框可以很容易地设置单个请求断点和单
个响应断点，只需要输入：
bpu TextFromURL
就可以为URL包含指定文本的所有会话设置响应断点。
bpafter TextFromURL
可以为URL包含指定文本的所有会话设置响应断点。
你还可以使用特定的HTTP方法，为任意请求设置请求断点：
bpm POST
也可以为所有返回特定HTTP状态码的响应设置响应断点：
bps 307
键入任何一种不含参数的断点命令（bpu、bpafter、bpm或bps），将会清除该断点。
重新编译FiddlerScript（或重新启动Fiddler）也会清除QuickExec所设置的断点。
通过Inspectors修改
当程序在断点处停止后，可以在Inspectors中编辑请求或响应。正如在Inspectors那一章
所描述的，很多Inspectors支持Read/Write功能，你可以使用这些功能来改变请求和响应的
header或body。Inspector会自动提交在程序中断时所执行的修改。
除了使用Inspectors，你还可以复制一份之前捕获到的响应给中断了的Session。当在Web
Sessions列表中选中两个Session，其中一个Session在断点处中断，另一个Session已经完成，
这时就可以通过上下文菜单中的CloneResponse命令来复制响应，它会把已经完成的Session
的响应拷贝给中断的Session。借助这个功能，可以很容易地复制一份之前捕获的（或修改的）
响应给后面的请求。
BreakpointBar（断点栏）
当Session停止执行时，在RequestInspectors和ResponseInspectors之间会出现一个红色
63
---
## Page 64
第3章技巧和概念
的BreakpointBar。它由两个按钮和一个下拉框组成，如图3-4所示。
Requesoaders
CahirgCokiaSoNa
NoResponeDat
国
只有当程序在请求的断点处停止时，黄色的BreakonResponse按钮会处于可点击状态。
当点击该按钮，它会为当前的Session设置响应断点，然后使程序恢复执行，向服务器发送（可
能修改过的）请求。点击绿色的RuntoCompletion按钮后，程序会继续执行直至程序结束，
不会在接收到响应时中断。
在BreakpointBar右侧的下拉框中，可以选择特定的响应模板或文件作为该请求的响应，
如图3-5所示。
从下拉框中选中某个文件后，它会马上被加载到响应的Inspectors（观察窗口）中，以便在
返回给客户端之前进一步修改响应的具体内容（但不需要改变磁盘文件）。如果你在请求断点处
使用下拉框中选中的内容作为响应，该请求就不会继续发送给服务端，因为Fiddler会返回响应。
同时恢复多个Session
如果设置的断点目标不够明确，可能会存在很多断点请求，如图3-6所示你希望尽快越
过这些断点继续执行。
20ddef
200_TransPladat
302_Redrect.da
307.Redecm
303_Redrec
401_Authlasc.dat
64HTTP
70
HTTP
www.5dder2.com
71HTT
www./idder2.com
72
HTTP
里万HTTP
74HTTP
wwm.fdder2.com
www.foder2.com
图3-5
9-E B]
点击Fiddler工具栏的Resume按钮或在QuickExec输入框中键入g，所有终端的Sessions
就会立即开始继续执行。
64
---
## Page 65
配置Fiddler和客户端
4.1Fiddler选项
点击Tools>FiddlerOptions，会弹出Fiddler选项窗口，其中包含控制Fiddler行为方式
的很多基本设置。该选项窗口中的很多设置需要重启Fiddler才能够生效，尽管某些修改会
马上生效，或者在切换到Fiddler的CaptureTraffic选项时会生效。调整好选项后，点击窗
口下方的OK按钮可以保存修改，点击Cancel按钮则会放弃修改。点击下方的Help链接可
以查看选项的帮助信息。
4.1.1常用选项
常用选项卡可以对Fiddler的常用操作设置进行调整。
Checkforupdatesonstartup选项控制Fiddler在启动时连接Web服务检查是否有新版本的
Fiddler。没有选中这个选项时，点击Fiddler帮助菜单中的CheckforUpdates..选项，可以手
工检查是否有新版本的Fiddler。
ParticipateintheFiddlerImprovementProgram选项只在某些版本的Fiddler中可用（目前
只有Beta版本）。选中这个选项时，Fiddler会将用户的数据匿名上传到Web服务器上。数据
中包括系统信息和用户使用Fiddler的情况，但不包含个人隐私信息。该数据将用作改进Fiddler
的参考。
Show a message when HTTP protocol violations are encountered选项决定Fiddler 在遇到错
误的数据流时是否会弹出消息框。协议错误对客户端和服务器都会有影响，因此在调试自己
的客户端和网站时，可以打开这个选项。在WebSession列表中会使用黄色背景标记出错误的
数据流，该Session的属性中包含了一份出现了协议错误的消息的副本。
65
---
## Page 66
第4章配置Fiddler和客户端
EnableIPv6（ifavailable）选项控制Fiddler是否可以监听和尝试连接IPv6终端。即使没有
选中这个选项，如果DNS返回的地址不是IPv4地址，Fiddler还是会尝试把地址当作IPv6进
行连接。
Maprequeststooriginatingapplication选项控制Fiddler是否需要确定请求来自哪个本地运
行的程序。本地进程在WebSession列表中的Process列中显示，并保存在Session的
X-Process-lInfo标志中。当查询Windows获取网络连接列表以及与该列表相关的各个进程时，
该功能才会生效。有些请求无法成功地映射回原始的进程，值得一提的是，在外围设备或远
程客户端计算机上发起的请求相关的进程信息也无法获取。
Automaticallystreamaudio&video选项用于确定对于MIME类型为audio/*和video/*的响
应，数据是否自动发送到客户端，面不需要在Fiddler内部缓存。当设置了该选项后，就不能
再用Fiddler的Inspectors或FiddlerScript来修改音频或视频响应了。设置这个选项的优点在
于在客户端浏览器或应用中可以即时“回放”流媒体响应。要在Fiddler中流式显示所有响应，
可以点击Fiddler工具栏中的Stream按钮。
SystemwideHotkey用于设置快捷键，当Fiddler最小化或者处在非活动状态时，快捷键
可以恢复并激活Fiddler。
4.1.2HTTPS选项
HTTPS选项卡用于控制Fiddler与监测安全传输的数据流相关的设置。
CaptureHTTPSCONNECTs选项决定Fiddler是否会注册为可以接收HTTPS请求的系统
代理。如果没有选中该选项，其他所有的HTTPS选项都不可用。