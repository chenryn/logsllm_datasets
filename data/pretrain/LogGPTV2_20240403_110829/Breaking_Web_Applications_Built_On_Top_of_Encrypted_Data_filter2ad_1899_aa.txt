title:Breaking Web Applications Built On Top of Encrypted Data
author:Paul Grubbs and
Richard McPherson and
Muhammad Naveed and
Thomas Ristenpart and
Vitaly Shmatikov
Breaking Web Applications Built On Top of Encrypted Data
Paul Grubbs
Cornell University
PI:EMAIL
Richard McPherson
UT Austin
PI:EMAIL
Muhammad Naveed
PI:EMAIL
USC
Thomas Ristenpart
Cornell Tech
PI:EMAIL
Vitaly Shmatikov
Cornell Tech
PI:EMAIL
ABSTRACT
We develop a systematic approach for analyzing client-server
applications that aim to hide sensitive user data from un-
trusted servers. We then apply it to Mylar, a framework
that uses multi-key searchable encryption (MKSE) to build
Web applications on top of encrypted data.
We demonstrate that (1) the Popa-Zeldovich model for
MKSE does not imply security against either passive or ac-
tive attacks; (2) Mylar-based Web applications reveal users’
data and queries to passive and active adversarial servers;
and (3) Mylar is generically insecure against active attacks
due to system design ﬂaws. Our results show that the prob-
lem of securing client-server applications against actively
malicious servers is challenging and still unsolved.
We conclude with general lessons for the designers of sys-
tems that rely on property-preserving or searchable encryp-
tion to protect data from untrusted servers.
1.
INTRODUCTION
Many modern Web and mobile applications are built us-
ing the client-server architecture: users interact with the
application’s clients in users’ browsers or devices, while the
server is responsible for centralized storage and management
of users’ data. This design oﬀers attractive scalability and
performance but if the server is compromised, the attacker
gains access to every user’s data. Even if this data is en-
crypted at rest but decrypted when the server operates on
it, it is potentially exposed to a persistent or lucky attacker.
Client-side encryption can mitigate the damage from server
compromise by ensuring that the server only sees encrypted
users’ data and never decrypts it. Unfortunately,
if the
server acts as a “dumb” storage and communication medium,
all operations on the data must be performed by the clients,
sacriﬁcing most of the advantages of the client-server model.
A new class of client-server systems aims to solve this
conundrum [16,28,33,34,47,48,51,54,59]. We call these sys-
tems BoPETs (“Building on Property-revealing EncrypTion”).
The main idea behind BoPETs is to encrypt users’ data
before uploading it to the server using special property-
revealing encryption (PRE). The server can then execute
its part of the application’s functionality on encrypted data.
Our contributions. We develop a new approach for sys-
tematic security analysis of BoPETs. Unlike previous work
which focused on PRE schemes in isolation [9, 26, 30, 42], we
take a more holistic approach to analyzing these schemes in
the context of the systems where they are deployed.
We ﬁrst deﬁne a taxonomy of real-world threats to the
server: snapshot passive (a one-time, “smash and grab” snap-
shot of the server’s state), persistent passive (observing all
activity on the server but not interfering with its opera-
tions), and active attacks involving arbitrary malicious be-
havior. We then work backwards from these adversarial
capabilities to models. This approach uncovers signiﬁcant
challenges and security-critical decisions faced by the de-
signers of BoPETs: how to partition functionality between
the clients and the server, which data to encrypt, which ac-
cess patterns can leak sensitive information, and more.
We then apply our methodology to a recent BoPET called
Mylar [48]. Mylar is an extension to a popular Web applica-
tion framework called Meteor [39]. Unlike similar commer-
cial systems [59], Mylar is open-source, enabling a thorough
analysis. In Mylar, client data deemed sensitive is encrypted
using multi-key searchable encryption (MKSE) [49], a PRE
that supports sharing and keyword search at a low perfor-
mance cost. The MKSE scheme at the heart of Mylar is
accompanied by cryptographic proofs based on the formal
model of security deﬁned by Popa and Zeldovich in [49].
In [48], Popa et al. explicitly claim that Mylar is secure
against actively malicious servers (excluding a particular
type of passive attacks, as explained in Section 2.2).
We start by showing that the Popa-Zeldovich security def-
initions for MKSE do not imply the conﬁdentiality of queries
even against a passive server. Adapting a well-known coun-
terexample from [17], we construct an MKSE scheme that
meets the Popa-Zeldovich deﬁnitions but trivially leaks any
queried keyword. This shows that the proofs of security for
MKSE do not imply any meaningful level of security, but
does not yet mean that the actual scheme fails.
We then go on to assess Mylar itself, using the imple-
mentation released by Popa et al. as our reference, along
with four diverse Meteor apps: kChat (online chat), MDaisy
(medical appointments), OpenDNA (analysis of genetic data),
and MeteorShop (e-commerce). kChat was released with
Mylar, the other three we ported with minimal changes.
We show that all four applications suﬀer from one or more
attacks within each of our threat models—see the summary
in Table 1. Even a “smash-and-grab” attacker can compro-
mise users’ privacy by analyzing the names, sizes, static link
structure, and other unencrypted metadata associated with
encrypted objects. A persistent passive attacker can ex-
tract even more information by observing the application’s
access patterns and objects returned in response to users’ en-
crypted queries. In our case-study applications, this reveals
users’ medical conditions, genomes, and contents of shop-
ping carts. Even if this leakage is inevitable, our approach
helps guide investigation into its implications.
The most damaging attacks are application-independent
and involve Mylar’s search when the server—and possibly
some of the users—are actively malicious. We describe two
Threat type
Snapshot passive
Description
Attacker captures a one-
time snapshot of server
Persistent passive
Active
Attacker records server
operations over a period
of time
Server
can arbitrarily
misbehave, collude with
users
Found attacks
• kChat: names of principals leak information about chat room topics
• MDaisy: metadata about relationships between documents leaks pa-
tients’ medical information; size of users’ proﬁles leaks their roles
• OpenDNA: size of encrypted DNA leaks which risk groups the user is
searching for
• MDaisy: server can cluster patients by their medical procedures; if one
patient reveals information, entire cluster is compromised
• MeteorShop: users’ recently viewed items leak what they added to their
encrypted shopping carts
• Any Mylar app: malicious server can perform brute-force dic-
tionary attacks on any past, present, or future search query over
any server-hosted content
• OpenDNA: malicious server can search users’ DNA for arbitrary SNPs
Table 1: Threat models and the corresponding attacks on Mylar apps.
methods that a malicious server can use to obtain a user’s
keyword search token for a document under the server’s con-
trol, along with the ability to convert it to other documents.
The ﬁrst method involves the server forcibly giving the
user access to a document. The Mylar paper suggests a
mechanism for users to exclude documents from searches,
but it’s broken in the reference implementation. Fixing this
problem runs into challenges that appear, for Mylar’s in-
tended collaborative applications, inherent and intractable.
The second method involves the server colluding with a ma-
licious user who shares a document with an honest user.
In both cases, an honest user ends up sharing a document
with the adversary. If the user’s keyword search matches this
document, the adversary learns the keyword. This generic
attack was described in [48], but not its full impact.
In
fact, Mylar explicitly claims to protect the conﬁdentiality
of the honest user’s other documents, those that cannot be
accessed by the malicious users. But honest users’ searches
are performed over all of their documents, thus the adver-
sary learns partial information about documents to which
the malicious users do not have access.
The above attack is generic for MKSE, but we dramati-
cally increase its power by exploiting a basic design ﬂaw in
Mylar—the unsafe partitioning of functionality between the
client and the server. For eﬃciency, Mylar trusts the server
to convert search tokens. Given a keyword token for a doc-
ument for which it knows the key, the server can “cancel”
the client’s secret key from the token, enabling an eﬃcient
dictionary attack which is fundamentally diﬀerent from the
generic attack mentioned in [48]. Most importantly, this at-
tack only needs the search token and does not rely on the
server’s ability to observe matches of the user’s queries to
the existing documents. Even if Mylar completely hid all
access patterns, perhaps by running on top of ORAM [24]
or any other oblivious storage, it would remain vulnerable
to our query recovery attack.
In our simulations for kChat with real-world chat logs, the
dictionary attack recovers all user queries and nearly 70% of
the keywords in all chats stored on the server. The attacks
were experimentally conﬁrmed using the publicly available
Mylar and kChat codebase.
Our results show that the problem of securing client-server
systems against persistent passive and active attackers on
the server is very challenging and still unsolved. We con-
clude with general lessons for the designers of BoPET sys-
tems and outline open research problems.
2. BACKGROUND
2.1 BoPETs
We use the term BoPETs generically to refer to client-
server applications that encrypt clients’ data so that the
server cannot decrypt it, yet rely on special properties of
the encryption scheme to retain some of the application’s
original server functionality. BoPETs are based on one or
more property-revealing encryption (PRE) schemes, which
is the term we use for schemes that, in this setting, re-
veal to servers some plaintext properties to facilitate server-
side processing over ciphertexts. PRE schemes include so-
called property-preserving encryption (PPE) schemes whose
ciphertexts publicly reveal plaintext properties, such as equal-
ity [6] and order [2, 7, 8], as well as encryption schemes that
reveal plaintext properties only when given both a ciphertext
and a token derived from the secret key—e.g., searchable en-
cryption [17, 55] and multi-key searchable encryption [49].
BoPETs gained popularity in industry before they were
studied formally by academics. As early as 2009, prod-
ucts from Ciphercloud [16] and Navajo Systems [41] were
using hand-crafted encryption schemes to enable searching
and sorting in software-as-a-service (SaaS) cloud applica-
tions. Newer entrants to this rapidly growing market in-
clude Perspecsys [46] and Skyhigh Networks [54]. Overnest’s
Gitzero [22] is a secure Git repo that stores encrypted code
on an untrusted server and enables search using searchable
encryption. PreVeil [51] is “a version of Mylar for certain
kinds of applications” [58]. Kryptnostic [59] built Kodex,
a collaboration and chat platform that supports document
sharing and search on shared documents using MKSE. Ze-
roDB is an encrypted database system which, according to
section 3 of their whitepaper [18], uses a proxy re-encryption
scheme inspired by Mylar’s MKSE to share content encryp-
tion keys between users.
The academic literature focused on PRE schemes as iso-
lated primitives until BoPET systems such as CryptDB [47],
ShadowCrypt [28], Mimesis Aegis [34], and Mylar [48] sought
to incorporate PREs into complete client-server systems.
2.2 Mylar
Mylar [48] extends the Meteor Web application frame-
work [39]. Meteor apps include clients and servers, both
implemented in JavaScript. Meteor uses MongoDB [40] for
server-side storage. MongoDB stores data in documents
which are organized into collections. Each document con-
sists of one or more key-value pairs called ﬁelds.
Principals. A principal in Mylar is a name and a pub-
lic/private key pair that is used to encrypt and decrypt con-
ﬁdential data. Each principal is thus a unit of access control.
In addition to the principals used to encrypt documents, ev-
ery user has a principal.
The app developer speciﬁes which ﬁelds in a MongoDB
collection are conﬁdential and which principals are used to
encrypt and decrypt these ﬁelds. A principal may be used for
only one document (e.g., in MDaisy, each appointment is en-
crypted by a unique principal) or multiple documents (e.g.,
in kChat, every message sent to a chat room is encrypted
with the key of that room’s principal). Unencrypted conﬁ-
dential data exists only in users’ browsers and is ostensibly
never sent to or stored on the server.
Mylar uses certiﬁcates to protect the binding between
users’ identities and their keys. The root of Mylar’s certiﬁ-
cate graph can be either a certiﬁcate from a trusted third-
party identity provider (IDP) or a static principal whose