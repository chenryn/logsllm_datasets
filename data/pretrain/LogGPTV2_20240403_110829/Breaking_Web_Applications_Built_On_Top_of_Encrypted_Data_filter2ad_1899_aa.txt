# Title: Breaking Web Applications Built on Top of Encrypted Data

## Authors:
- Paul Grubbs, Cornell University
- Richard McPherson, UT Austin
- Muhammad Naveed, USC
- Thomas Ristenpart, Cornell Tech
- Vitaly Shmatikov, Cornell Tech

## Abstract
We present a systematic approach for analyzing client-server applications designed to protect sensitive user data from untrusted servers. We apply this methodology to Mylar, a framework that uses multi-key searchable encryption (MKSE) to build web applications on top of encrypted data.

Our analysis reveals that:
1. The Popa-Zeldovich model for MKSE does not ensure security against either passive or active attacks.
2. Mylar-based web applications can expose users' data and queries to both passive and active adversarial servers.
3. Mylar is fundamentally insecure against active attacks due to system design flaws.

These findings highlight the challenges in securing client-server applications against malicious servers and suggest that the problem remains unsolved. We conclude with general lessons for designers of systems relying on property-preserving or searchable encryption to protect data from untrusted servers.

## 1. Introduction
Many modern web and mobile applications are built using the client-server architecture, where users interact with the application's clients in their browsers or devices, and the server handles centralized storage and management of user data. This design offers scalability and performance, but if the server is compromised, an attacker gains access to all user data. Even if the data is encrypted at rest, it is potentially exposed when decrypted by the server.

Client-side encryption can mitigate this risk by ensuring the server only sees encrypted data. However, if the server acts merely as a "dumb" storage and communication medium, all operations must be performed by the clients, sacrificing the benefits of the client-server model.

A new class of client-server systems, which we call BoPETs ("Building on Property-revealing EncrypTion"), aims to address this issue. These systems encrypt user data before uploading it to the server using special property-revealing encryption (PRE). The server can then execute its part of the application's functionality on encrypted data.

### Our Contributions
We develop a new approach for systematically analyzing the security of BoPETs. Unlike previous work that focused on PRE schemes in isolation, our method takes a holistic view, considering the schemes within the context of the systems where they are deployed.

We define a taxonomy of real-world threats to the server: snapshot passive (one-time snapshot of the server's state), persistent passive (observing all activity without interference), and active (arbitrary malicious behavior). We then work backwards from these capabilities to identify significant challenges and security-critical decisions faced by BoPET designers, such as how to partition functionality between clients and the server, which data to encrypt, and which access patterns can leak sensitive information.

We apply our methodology to Mylar, an open-source extension to the Meteor web application framework. Mylar uses multi-key searchable encryption (MKSE) to encrypt client data, enabling sharing and keyword search at a low performance cost. The MKSE scheme in Mylar is accompanied by cryptographic proofs based on the Popa-Zeldovich security model.

In [48], Popa et al. claim that Mylar is secure against actively malicious servers, excluding a specific type of passive attack. We show that the Popa-Zeldovich security definitions for MKSE do not imply query confidentiality even against a passive server. We construct an MKSE scheme that meets the Popa-Zeldovich definitions but trivially leaks queried keywords, demonstrating that the security proofs do not provide meaningful security.

We then assess Mylar itself, using the implementation released by Popa et al. and four diverse Meteor apps: kChat (online chat), MDaisy (medical appointments), OpenDNA (genetic data analysis), and MeteorShop (e-commerce). We show that all four applications suffer from one or more attacks within each of our threat models, summarized in Table 1. Even a "smash-and-grab" attacker can compromise user privacy by analyzing unencrypted metadata. A persistent passive attacker can extract more information by observing access patterns and returned objects, revealing medical conditions, genomes, and shopping cart contents. Our approach helps guide the investigation into the implications of this leakage.

The most damaging attacks involve Mylar's search when the server and some users are actively malicious. We describe two methods a malicious server can use to obtain a user's keyword search token and convert it to other documents. The first method involves the server forcibly giving the user access to a document, while the second involves the server colluding with a malicious user who shares a document with an honest user. In both cases, the adversary learns partial information about documents to which the malicious users do not have access.

We also exploit a basic design flaw in Mylar, where the server is trusted to convert search tokens. Given a keyword token, the server can "cancel" the client's secret key, enabling an efficient dictionary attack. This attack recovers all user queries and nearly 70% of the keywords in all chats stored on the server, as confirmed by our simulations using real-world chat logs.

Our results show that securing client-server systems against persistent passive and active attackers remains a challenging and unsolved problem. We conclude with general lessons for BoPET designers and outline open research problems.

## 2. Background

### 2.1 BoPETs
BoPETs refer to client-server applications that encrypt client data so the server cannot decrypt it, yet rely on special properties of the encryption scheme to retain some server functionality. These systems use property-revealing encryption (PRE) schemes, which reveal plaintext properties to facilitate server-side processing over ciphertexts. PRE schemes include property-preserving encryption (PPE) schemes, searchable encryption, and multi-key searchable encryption.

BoPETs gained popularity in industry before being formally studied by academics. Products like Ciphercloud and Navajo Systems used hand-crafted encryption schemes to enable searching and sorting in SaaS cloud applications. Newer entrants include Perspecsys, Skyhigh Networks, Overnestâ€™s Gitzero, PreVeil, Kryptnostic, and ZeroDB. Academic literature focused on PRE schemes as isolated primitives until systems like CryptDB, ShadowCrypt, Mimesis Aegis, and Mylar integrated them into complete client-server systems.

### 2.2 Mylar
Mylar extends the Meteor web application framework, which includes clients and servers implemented in JavaScript. Meteor uses MongoDB for server-side storage, organizing data into collections of documents, each consisting of key-value pairs called fields.

**Principals**: A principal in Mylar is a name and a public/private key pair used to encrypt and decrypt confidential data. Each principal is a unit of access control. The app developer specifies which fields in a MongoDB collection are confidential and which principals are used to encrypt and decrypt these fields. Unencrypted confidential data exists only in users' browsers and is never sent to or stored on the server.

Mylar uses certificates to protect the binding between users' identities and their keys. The root of Mylar's certificate graph can be a certificate from a trusted third-party identity provider (IDP) or a static principal.