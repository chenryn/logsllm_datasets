### Hijacking the Encapsulating Page and Non-Pinned Mixed Content

In the case of non-pinned mixed content, an attacker would need to use a rogue certificate rather than simply modifying HTTP traffic. It is important to note that this risk differs from traditional mixed content because the ability to produce a rogue certificate can vary by target domain, whereas the ability to modify HTTP traffic is generally consistent across domains. Including non-pinned content significantly undermines the security benefits provided by pinning.

### Pinned Content and Sub-Resources

Another potential issue with pinned content is that sub-resources may be loaded over pinned HTTPS with a different pin set. This represents a vulnerability, as an attacker could obtain a rogue certificate that satisfies the sub-resource’s pin set but not the encapsulating page's pin set. Consequently, the effective pin set of the encapsulating page is the union of the pin sets of all active sub-resources. If any of these sub-resources are not pinned, the security of the page is reduced to the "implicit" set of pins consisting of all trusted root CAs, thereby negating the security benefits of pinning.

### Empirical Results

From the homepages of 271 total base domains with a pinning policy, we observed a total of 66,537 non-pinned resources being included across 10 domains. Of these, 24,477 resources at 8 domains (dropbox.com, twitter.com, doubleclick.net, crypto.cat, and torproject.org) were active content. This effectively negates the security goals of pinning for these domains.

While only 8 out of 271 pinned base domains had active mixed-pinning content, it is worth noting that 262 of the pinned domains are operated by Google. Google has been diligent in avoiding mixed content and benefits from using its own content-delivery and advertising networks.

### Types of Pinned Mixed Content Resources

| **Content Type** | **Active** | **Passive** |
|------------------|------------|-------------|
| Script           | 15,540     | -           |
| Stylesheet       | 4,725      | 41,702      |
| Link (rel=“stylesheet”) | 2,470 | 146         |
| XMLHttpRequest   | 1,515      | -           |
| Subdocument      | 170        | -           |
| Font             | 49         | -           |
| Total            | 24,477     | 42,061      |
| Image            | -          | 132         |
| Link (rel=“shortcut icon”) | - | 45          |
| Link (rel=“apple-touch-icon”) | - | 36         |
| Media            | -          | 42,061      |
| Link (rel=“image-src”) | - | 42,061      |

The fact that 5 out of the other 9 domains suffered from fatal active-mixed content problems suggests that this will be a serious issue as pinning is incrementally deployed, especially since these sites are at the forefront of security awareness.

### Sources of Mixed Content

Mixed content errors generally arise from including active web analytics or advertising resources. For example, crypto.cat loads 27 scripts on 4 pages (including crypto.cat) from get.clicky.com, a web analytics site. Content delivery networks (CDNs) were another major source of errors. At dev.twitter.com, we observed 85 loads from various subdomains of the CDN akamai.net. Dropbox was responsible for 921 mixed-content loads, including loading scripts, stylesheets (CSS), and fonts (considered active content) from cloudfront.net, another CDN.

We also observed interesting errors in "widget" iframes for pinned sites embedded in other pages. For example, Twitter’s embeddable gadget twitter.com/settings/facebook/frame loads (3 times) scripts from connect.facebook.net. Similarly, the advertising network DoubleClick loads an assortment of advertising scripts from various locations within an iframe embedded in other sites. While these iframes are meant to be included in other sites, the non-pinned scripts they load could still steal cookies and read user data. In particular, all of DoubleClick’s cookies and many of Twitter’s are not marked httponly and can therefore be read by malicious scripts.

### Impact of Subdomains

A large number of mixed content errors were due to resources loaded from subdomains of pinned domains without includeSubDomains set. Of the 9 pinned non-Google base domains, 4 domains had mixed content issues from loading a resource from a non-pinned subdomain of an otherwise pinned domain. Overall, 99.96% of the unpinned active content loads were "self-inflicted" in that they were loaded from the same base domain.

Twitter had perhaps the most issues, including loading scripts from syndication.twitter.com. Although they did set a dynamic HSTS Header to protect this resource load from this non-preloaded subdomain, this does not fix the fact that the domain isn’t pinned. Tor also included content from numerous non-pinned subdomains. Dropbox and CryptoCat both link to their blog and forum subdomain without an HSTS header, and dropbox.com loads images and other passive resources from photo-*.dropbox.com without HSTS being set. The blog.x.com subdomain was the most frequent subdomain with this issue, with two of the five domains introducing "self-imposed" mixed content on this subdomain. These findings suggest that confusion over the relationship between subdomains owned by the same entity is a major source of errors, and developers may be forgetting when includeSubDomains is in effect.

### Expanded Pin Set Mixed Content

We observed 3,032 references to resources protected by a different pin set from 8 domains. This expands the effective pin set to the union of the top-level page and all resources loaded. Of these, 42 were loaded as active content by 2 domains: Twitter and Dropbox. Twitter accounts for over 85% of the expanded pin-set resources, primarily through self-expansion. Since Twitter has two separately listed pin sets, it frequently increases its effective pin set size by loading content from the twitterCDN pin set (e.g., platform.twitter.com and api.twitter.com) on a twitterCom pin set domain. Both Twitter and Dropbox also include a script from ssl.google-analytics.com in multiple places. While this is a lower risk than including unpinned content, these findings support our expectation that mixed content handling will be more complicated for pinned content due to the multiple levels of potential risk.

### Plain HTTP Resources Loaded by Pinned Domains

We observed a further 30,642 references to resources over plain HTTP from 205 pinned domains. Only one domain, doubleclick.net, made the mistake (observed 3 times) of including active content over HTTP by including a script from http://bs.serving-sys.com/. Again, this script was only loaded in a doubleclick.net iframe we observed within another page. These numbers serve as a useful baseline for comparison and suggest that errors due to mixed pinning, particularly active content, are more common than mixed HTTP content. This suggests that this problem is not yet widely understood or appreciated, although it can completely undermine pinning.

### HSTS Mixed Content

We also briefly consider the existence of mixed content between HSTS-protected HTTPS pages and non-HSTS resources loaded over HTTPS. Unlike the case of pinning, this is not currently a significant security risk because resources referenced via a URL with the https scheme must be accessed over HTTPS, even if they are not protected by HSTS. There is an edge case which is not clearly defined by the specification [5] related to error messages. The HSTS standard requires hard failure with no warning if a connection to an HSTS domain has a certificate error but doesn’t specify if warnings can be shown for non-HSTS resources loaded by the page. This is likely a moot point, as modern browsers now typically block active content that would produce a certificate error, even from non-HSTS pages.

Still, we found references to non-HSTS resources from HSTS pages were widespread, with 171,533 references from 349 base domains, of which 87,465 from 311 domains were active content. As with the pinned mixed content errors, the vast majority were "self-inflicted" in that they were resources loaded from a common base domain, accounting for 84.73% of all mixed content and 71.96% of the active mixed content. Resources from explicit subdomains were again a major source of mixed policy, with 20,913 references from 115 base domains, of which 10,577 were active content.

### Cookie Theft

A long-standing problem with the web has been the inconsistency between the same-origin policy defined for most web content and the one defined for cookies [38]–[40]. According to the original cookie specification [38], cookies are isolated only by host and not by port or scheme. This means cookies set by a domain via HTTPS will be submitted back to the same domain over HTTP [41]. Because cookies often contain sensitive information, particularly session identifiers which serve as login credentials, this poses a major security problem. Even if a domain secure.com only serves content over HTTPS, an active attacker may inject script into any page in the browser, triggering an HTTP request to http://secure.com/non-existent, and the outbound request will contain all of the user's cookies for the domain.

### Secure Cookies

To address this problem, the secure attribute for cookies was added in 2000 by RFC 2965 [39], the first update to the cookie specification. This attribute specifies that cookies should only be sent over a "secure" connection. While this was left undefined in the formal specification, all implementations have interpreted this to limit the cookie to being sent over HTTPS [40]. A persistent issue with the secure attribute is that it protects read access but not write access. HTTP pages are able to overwrite (or "clobber") cookies even if they were originally marked secure.

### Interaction of Secure Cookies and HSTS

At first glance, it might appear that HSTS obviates the secure cookie attribute because if a browser learns of an HSTS policy and refuses to connect to a domain over plain HTTP, it won't be able to leak a secure cookie over HTTPS. Unfortunately, the different treatment of subdomains means that cookies can still be leaked. Cookies may include a domain attribute that specifies which domains the cookie should be transmitted to. By default, this includes all subdomains of the specified domain, unlike HSTS, which does not apply to subdomains by default. Even more confusingly, the only way to limit a cookie to a single specific domain is to not specify a domain parameter at all, in which case the cookie should be limited to exactly the domain of the page that set it. However, Internet Explorer violates the standard [39] in this case and scopes the cookie to all subdomains anyway [41].

### Vulnerable Cookies from HSTS Domains

| **Condition**                          | **Domains with HSTS hole** | **Domains with vulnerable cookies** | **Cookies not marked secure** |
|----------------------------------------|----------------------------|-------------------------------------|-------------------------------|
| Preloaded HSTS domains                 | 230/765                    | 182/765                             | 782/823                      |
| Percentage                            | 30.1%                      | 23.8%                               | 95.0%                        |
| Dynamic HSTS domains                   | 3,637/5,099                | 2,460/5,099                         | 10,174/10,398                |
| Percentage                            | 70.7%                      | 47.8%                               | 97.8%                        |

For example, suppose example.com, a domain that successfully sets HSTS without includeSubDomains, sets a cookie session_id=x with domain=example.com but does not set secure. This cookie will now be transmitted over HTTP to any subdomain of example.com. The browser won’t connect over HTTP to example.com due to the HSTS policy, but will connect to http://nonexistent.example.com and leak the cookie value x over plain HTTP. An active attacker can inject a reference to http://nonexistent.example.com into any page in the browser, making this cookie effectively accessible to any network attacker despite the domain’s efforts to enforce security via HSTS. Thus, we consider this to be a bug as it very likely undermines the security policy the domain administrator is hoping to enforce. HSTS does not serve as an effective replacement for secure cookies for this reason, and it is advisable that HSTS sites generally mark all cookies as secure unless they are specifically needed by an HTTP subdomain.