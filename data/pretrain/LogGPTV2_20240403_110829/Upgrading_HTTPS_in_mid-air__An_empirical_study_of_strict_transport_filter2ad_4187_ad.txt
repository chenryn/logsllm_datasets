can hijack the encapsulating page. In the case of non-pinned
mixed content, manipulation requires a rogue certiﬁcate instead
of simply modifying HTTP trafﬁc. It should be noted that
this risk is not exactly analogous to traditional mixed content
because an attacker’s ability to produce a rogue certiﬁcate
may vary by the target domain whereas the ability to modify
HTTP trafﬁc is assumed to be consistent regardless of domain.
Still, including non-pinned content substantially undermines
the security beneﬁts provided by pinning.
A further potential issue with pinned content is that sub-
resources may be loaded over pinned HTTPS with a different
pinned set. This also represents a potential vulnerability, as
an attacker may be able to obtain a rogue certiﬁcate satisfying
the subresource’s pin set but not the encapsulating page. Thus,
the effective pin set of the encapsulating page is the union of
the pin sets of all (active) subresources loaded by the page. If
any of the subresources are not pinned, security of the page is
reduced to the “implicit” set of pins consisting of all trusted
root CAs, negating the security beneﬁts of pinning completely.
Empirical results: Overall, from the homepages of 271
total base domains with a pinning policy, we observed a total
of 66,537 non-pinned resources being included across 10 do-
mains. Of these, 24,477 resources at 8 domains (dropbox.com,
twitter.com, doubleclick.net, crypto.cat, and torproject.org)
were active content. As noted above, this effectively negates
the security goals of pinning for these domains.
While only 8 of 271 pinned base domains having active
mixed-pinning content appears low at ﬁrst glance, recall that
262 of the pinned domains are operated by Google. Google has
been diligent to avoid mixed content and has the advantage
of using its own content-delivery and advertising networks.
9
TABLE V.
SELECTED TYPES OF PINNED MIXED CONTENT RESOURCES
Active
Passive
Content type
script
stylesheet
link (rel=“stylesheet”)
xmlhttprequest
subdocument
font
total
image
link (rel=“shortcut icon”)
link (rel=“apple-touch-icon”)
media
link (rel=“image-src”)
total
#
15,540
4,725
2,470
1,515
170
49
24,477
41,702
146
132
45
36
42,061
The fact that 5 of the other 9 suffered from fatal active-mixed
content problems suggests this will be a serious problem as
pinning is incrementally deployed, especially because these
sites are on the cutting edge of security awareness.
Sources of mixed content: A summary of the types of
resources involved in mixed content errors is provided in
Table V. The errors generally arise from including active
web analytics or advertising resources. For example, crypto.
cat loads 27 scripts on 4 pages (including crypto.cat) from
get.clicky.com, a Web analytics site.
Content delivery networks were another major source of
errors. At dev.twitter.com we observed 85 loads from vari-
ous subdomains of the content-delivery network akamai.net.
Dropbox was responsible for 921 of the mixed-content loads
we observed, including loading scripts, stylesheets (CSS), and
fonts (considered active content) from cloudfront.net, another
content-delivery network. They load these resources multiple
times on essentially every page we visited within the domain.
We also observed interesting errors in “widget” iframes for
pinned sites which we happened to observe embedded in other
pages in our crawl. For example, Twitter’s embeddable gad-
get twitter.com/settings/facebook/frame loads (3 times) scripts
from connect.facebook.net. Similarly, we observed the adver-
tising network DoubleClick loading an assortment of advertis-
ing scripts from various locations within an iframe embedded
in other sites. While this is meant to be included as an iframe at
other sites, the non-pinned scripts it loads could still in some
cases steal cookies and read user data. In particular, all of
DoubleClick’s cookies and many of Twitter’s are not marked
httponly and can therefore be read by malicious scripts.
Impact of subdomains: A large number of these mixed
content errors were due to resources loaded from subdomains
of pinned domains without includeSubDomains set. Of
the 9 pinned non-Google base domains, 4 domains had mixed
content issues from loading a resource from a non-pinned
subdomain of an otherwise pinned domain. Overall, 99.96%
of the unpinned active content loads were “self-inﬂicted” in
that they were loaded from the same base domain.
Twitter had perhaps the most
issues including loading
scripts from syndication.twitter.com. Although they did set a
dynamic HSTS Header to protect this resource load from this
non-preloaded subdomain, this doesn’t ﬁx the fact that the
domain isn’t pinned. Tor also included content from numerous
non-pinned subdomains. Dropbox and CryptoCat both link to
their blog and forum subdomain without an HSTS header, and
dropbox.com loads images and other passive resources from
photo-*.dropbox.com without HSTS being set. The blog.x.com
subdomain was the most frequent subdomain with this issue
with two of the ﬁve domains introducing “self-imposed”
mixed content on this subdomain. These ﬁndings suggest that
confusion over the relationship between subdomains owned by
the same entity is a major source of errors and that developers
may be forgetting when includeSubDomains is in effect.
Some of the problems may also simply come from modern
websites’ complicated structure making it difﬁcult to remember
what is pinned and what isn’t. To this end we observed many
cases of content included from non-pinned domains owned by
the same domain in practice, though not strictly subdomains.
For example, Google loads images from *.ggpht.com on many
of the major Google domains including play.google.com.
Expanded pin set mixed content: We observed 3,032
references to resources protected by a different pin set from
8 domains. As discussed above, this expands the effective
pin set to the union of the top-level page and all resources
loaded. Of these, 42 were loaded as active content by 2
domains: Twitter and Dropbox. Twitter accounts for over 85%
of the expanded pin-set resources, primarily through self-
expansion. Since Twitter has two separately listed pin sets, it
frequently increases its effective pin set size by loading content
from the twitterCDN pin set (e.g. platform.twitter.com and
api.twitter.com) on a twitterCom pin set domain. Both Twitter
and Dropbox also include a script from ssl.google-analytics.
com in multiple places. While this is a lower risk than includ-
ing unpinned content, these ﬁndings support our expectation
that mixed content handling will be more complicated for
pinned content due to the multiple levels of potential risk..
Plain HTTP resources loaded by pinned domains:
We observed a further 30,642 references to resources over
plain HTTP from 205 pinned domains. Only one domain,
(doubleclick.net), made the mistake (observed 3 times) of
including active content over HTTP by including a script from
http://bs.serving-sys.com/. Again, this script was only loaded
in a doubleclick.net iframe we observed within another page.
These numbers serve as a useful baseline for comparison
and suggest that errors due to mixed pinning, particularly
active content, are more common than mixed HTTP content.
This suggests that this problem is not yet widely understood
or appreciated, although it can completely undermine pinning.
B. HSTS Mixed Content
We also brieﬂy consider the existence of mixed content
between HSTS-protected HTTPS pages and non-HSTS re-
sources loaded over HTTPS. Unlike the case of pinning, this
is not currently a signiﬁcant security risk because resources
referenced via a URL with the https scheme must be
accessed over HTTPS, even if they are not protected by HSTS.
There is an edge case which is not clearly deﬁned by the
speciﬁcation [5] related to error messages. The HSTS standard
requires hard failure with no warning if a connection to an
HSTS domain has a certiﬁcate error but doesn’t specify if
warnings can be shown for non-HSTS resources loaded by
the page. This is likely a moot point, as modern browsers
now typically block active content which would produce a
certiﬁcate error even from non-HSTS pages.
10
Still, we found references to non-HSTS resources from
HSTS pages were widespread, with 171,533 references from
349 base domains, of which 87,465 from 311 domains were
active content. As with the pinned mixed content errors, the
vast majority were “self-inﬂicted” in that they were resources
loaded from a common base domain, accounting for 84.73%
of all mixed content and 71.96% of the active mixed con-
tent. Resources from explicit subdomains were again a major
source of mixed policy, with 20,913 references from 115 base
domains, of which 10,577 were active content.
VI. COOKIE THEFT
A long-standing problem with the web has been the in-
consistency between the same-origin policy deﬁned for most
web content and the one deﬁned for cookies [38]–[40]. Per
the original cookie speciﬁcation [38], cookies are isolated
only by host and not by port or scheme. This means cookies
set by a domain via HTTPS will be submitted back to
the same domain over HTTP [41]. Because cookies often
contain sensitive information, particularly session identiﬁers
which serve as login credentials, this poses a major secu-
rity problem. Even if a domain secure.com only serves
content over HTTPS, an active attacker may inject script
into any page in the browser triggering an HTTP request to
http://secure.com/non-existent and the outbound
request will contain all of the users cookie’s for the domain.
A. Secure cookies
To address this problem, the secure attribute for cookies
was added in 2000 by RFC 2965 [39], the ﬁrst update to
the cookie speciﬁcation. This attribute speciﬁes that cookies
should only be sent over a “secure” connection. While this was
left undeﬁned in the formal speciﬁcation, all implementations
have interpreted this to limit the cookie to being sent over
HTTPS [40]. A persistent issue with the secure attribute is
that it protects read access but not write access. HTTP pages
are able to overwrite (or “clobber”) cookies even if they were
originally marked secure.15
B. Interaction of secure cookies and HSTS
At ﬁrst glance, it might appear that HSTS obviates the
secure cookie attribute, because if a browser learns of an
HSTS policy and will refuse to connect to a domain over
plain HTTP at all it won’t be unable to leak a secure cookie
over HTTPS. Unfortunately, there the different treatment of
subdomains which means that cookies can still be leaked.
Cookies may include a domain attribute which speciﬁes
which domains the cookie should be transmitted to. By default,
this includes all subdomains of the speciﬁed domain, unlike
HSTS which does not apply to subdomains by default. Even
more confusingly, the only way to limit a cookie to a single
speciﬁc domain is to not specify a domain parameter at all, in
which case the cookie should be limited to exactly the domain
of the page that set it. However, Internet Explorer violates
the standard [39] in this case and scopes the cookie to all
subdomains anyway [41].
15In fact, HTTP connections can set cookies and mark them as secure,
in which case they won’t be able to read them back over HTTP.
11
TABLE VI.
VULNERABLE COOKIES FROM HSTS DOMAINS
Condition
Domains with HSTS hole
Domains with vulnerable cookies
Cookies not marked secure
Preloaded HSTS
domains
#
230/765
182/765
782/823
%
30.1%
23.8%
95.0%
Dynamic HSTS
domains
#
3,637/5,099
2,460/5,099
10,174/10,398
%
70.7%
47.8%
97.8%
is
is
set). For
example,
accessible
to subdomains
the default) and the cookie
Thus, a well-intentioned website may expose cook-
ies by setting HSTS but not
the secure attribute if
the HSTS policy does not specify includeSubDomains
(which is
scoped to
(which occurs whenever
be
any domain attribute
suppose
example.com, a domain which successfully sets HSTS with-
out includeSubDomains, sets a cookie session_id=x
with domain=example.com but does not set secure. This
cookie will now be transmitted over HTTP to any subdomain
of example.com. The browser won’t connect over HTTP
to example.com due to the HSTS policy, but will connect
to http://nonexistent.example.com and leak the
cookie value x over plain HTTP.
can
to
http://nonexistent.example.com into any page
in the browser, making this cookie effectively accessible to
any network attacker despite the domain’s efforts to enforce
security via HSTS. Thus, we consider this to be a bug as
it very likely undermines the security policy the domain
administrator is hoping to enforce. HSTS does not serve as
an effective replacement for secure cookies for this reason
and it is advisable that HSTS sites generally mark all cookies
as secure unless they are speciﬁcally needed by an HTTP
subdomain.
reference
An
active
inject