管道文件指述符
我们再回到上一个例子。这一次，我们将把子程序的stdin文件描述符替换为我们创建的管
道的读操作端。我们还要对文件描述符做些准备工作，好让子程序能够正确地检测到管道里数
据的“文件尾”。为了简洁起见，我们象往常一样省略了一些错误检查。
动手试试：管道和dup函数
把pipe3.c修改为pipec.5，程序清单如下所示：
#include 
include 
#include 
include 
int main()
int data_processed;
.=
int file_pipes[2];
(pid_t) fork_xesult:
if (pipe(file_pipes) 0){
ififork_result t=
fork_result = fork():
fprintfrstderr,
(pid_t}-1){
,Fork failure'};
exit (EXIT_FAILURE):
if (fork_result = [pid_t)01{
dup(file_pipes[0]);
close(0);
close(tile_pipes(1));
加入jaVa编程群：524621833
---
## Page 381
第12章进程间通信：管道
363
execlp1*od，*od.*-c*.（char *)0）:
exit (EXIT_FAILURE) :
else[
close1file_pipes[0]1;
data_processed = write(file_pipes[1], sone_data,
close(file_pipes [1]}:
strlen(some_data)1:
printf (*&d - wrote &d bytes\n*,(int)getpid(), data_processed):
exit (EXIT_SUCCESS) :
这个程序的输出情况如下所示：
$pipe5
0000000
wrote 3 bytes
0000003
1
操作注释：
程序象以前一样先创建出一个管道，再通过fork创建出一个子进程。此时，父进程和子进程
都有了能够对管道进行访问的文件描述符，一个用于读操作，另外一个用于写操作，加在一起
总共有四个打开的文件描述符。
我们先来看看子进程。子进程先用“close（0）”关闭了自已的标准输入，然后调用
"dup(file_pipes[0])"。这个调用把关联在管道读操作端的文件描述符复制为文件描述符“0"，即
标准输人。接下来，子进程关闭了原先那个用米从管道读取数据的文件描述符file_pipes[0]。因
为子进程不会向管道写数据，所以它把与管道关联着的写操作文件描述符file_pipes[1]也关闭了。
现在它只有一-个文件描述符是与管道关联着的了，即文件描述符0，它的标准输入。
接下来，子进程就能通过exec来启动运行各种从标准输人读取数据的程序了，例子里使用的
是od命令。od命令等待数据的到来，就好像它在等待来自用户终端的输人一样。事实上，如果
没有对两种情况进行判别的特殊代码，它根本就不会知道输人是来自一个管道，还是来自一个
终端。
父进程一上来先关闭了管道的读操作端
-.5
file_pipes[0]，因为它不会从管道读取数据。接
着它向管道写人数据。当数据全部写完后，它
关闭了管道的写操作端并退出了运行。现在已
经没有打开着的管道写操作文件描述符了，od
程序读出写到管道里的三个字节，但再往后的
读操作将返回“0”字节，表示已经到达文件尾。
当读操作返回“0”时，od程序退出运行。这是
进程
对在终端上运行od命令时用“Ctrl-D”组合键向
od命令发送一个文件尾这种做法的模仿。
我们用下面几个示意图把执行过程表示出
来。在调用了pipe函数之后见图12-3。
图12-3
加入jaVa编程群：524621833
---
## Page 382
364
Linux程序设计
在调用了fork函数之后（如图12-4所示）：
file_pipen[0]
file_pipes[o]
读
父远程
营道
子进程
file_pipes[1]
file_pipes[1]
图12-4
当程序做好数据传输的准备工作之后（如图12-5所示）：
标准输入
父进程
管道
标准输出
图12-5
12.5命名管道：FIFO文件
到目前为止，我们的数据传递工作还只能在相关程序之间进行，这些程序是由一个共同的
祖先进程启动的。如果我们想在不相关的进程之间交换数据，还用以前的老办法就不是很方便
了。
我们可以使用FIFO文件来做这项工作，它经常被称为命名管道。命名管道是一种特殊类型
的文件（别忘了UNIX里的一切事物都是文件！），它们在文件系统里以名字的形式存在，但它
们的行为却和我们刚才见过的没有名字的管道差不了多少。
命名管道可以从命令行上创建，也可以从程序里创建。命令行上用来创建命名管道的程序
一直沿用的是mknod，如下所示：
S mknod filename p
但mknod没有出现在X/Open技术规范的命令表里，所以它在某些UNIX系统上就不能用。推
荐的命令行方法是使用下面这个命令：
S mkfifo filename
2版）里面有mknod函数调用，但没有这个命令。Linux同时支持mknod和mkfifo两种命令。
在程序里，我们可以使用两种不同的函数，它们是：
加入jaVa编程群：524621833
---
## Page 383
第12章进程间通信：管道
365
#include 
#include 
int mkfifo（const char *filename,mode_t mode);
Int mknod(conat char *Eilenane, mode_t mode Is,IFIFO, (dev.,t) 0);
类似于mknod命令，你可以用mknod函数建立出许多特殊类型的文件来。如果要用这个函数
来创建命名管道，惟一具有可移植性的办法是把dev_t的值取为“0”，再把文件访问模式和
S_IFIFO按位或（OR）在一起。我们在下面的例子里将使用相对简单一些的mkfifo函数。
动手试试：创建一个命名管道
下面是程序fifol.c的代码清单：
include 
#include 
include 
#include 
#include 
int zainf)
if (res == O) printf(*FIFO crested\n");
int res = mkfifo(*/tnp/my_fifo*,077):
exitIEXIT_SUCCESS1 ;
我们用下面这个命令可以找到刚创建的管道：
1s-17/tap/my_fifo
prwxY ·xr -x
1rick
users
C Dee 10 :4:55 /tnp/my_f:fo]
第-个字符是“p”就表示这是一个管道。尾部的“”符号是ls命令的“-F”选项添上去的，
也表示这是一个管道。
操作注释：
这个程序通过mkfifo函数创建了一个特殊的文件。虽然我们设定的模式是“0777”，但它被
用户掩码（umask）设置（本例是“022"）给改变了，这与普通文件的创建操作是一样，文件最
终的模式是“755”。
我们可以通过rm命令来删除FIFO文件：如果想在程序里这样做，就要使用unlink系统调用。
访问一个FIFO文件
命名管道能够出现文件系统里，也可以象平常的文件名那样用在命令里，这是一个非常有
用的功能。在把我们创建的FIFO文件用到程序设计里去之前，我们先通过普通的文件命令米看
看FIFO文件的表现。
动手试试：对FIFO文件的读写操作
1）首先，读一个（空白的）FIFO文件：
$ cat /tap/my_fifo
3）如果同时对它进行读写，我们就可以让数据通过管道：
Scat /tap/ay_fifo
[1]1316
sdsdtasdf
[1]·Done
cat 
include 
include 
#include 
include 
#include 
#include 
detane FIFO_NAME */tmp/my_fifo*
int main(int arge, char *argv[1)
int res;
int open_node = 0;
if{argc\n*.*argV}:
*Usage:s <some combination of\
exit (EXIT_FAILURE) :
2）在假设程序会通过测试的前提下，我们根据命令行参数来设置open_mode的值，如下
所示：
加入jaVa编程群：524621833
---
## Page 386
368
Linux程序设计