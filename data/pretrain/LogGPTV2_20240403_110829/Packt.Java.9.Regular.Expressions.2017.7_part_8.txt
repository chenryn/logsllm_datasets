Stream Splits the given input string using this pattern and creates a stream
splitAsStream(CharSequence from the given input sequence around the matches of this pattern
input) (added in Java 8).
String[] split(CharSequence Splits the given input sequence around the matches of this pattern. It is
input) the same as String.split(String regex).
String[] split(CharSequence Splits the given input sequence around the matches of this pattern. The
input, int limit) limit parameter controls the number of times the pattern is applied and,
therefore, affects the length of the resulting array. It is the same as
String.split(String regex, int limit).
The Pattern class has a static method that can be called to match a string against a regular
expression. This is as follows:
boolean matches(String regex, CharSequence input)
It can be used instead of the following:
final Pattern p = Pattern.compile(regex);
Matcher m = p.matcher(input);
m.matches();
This is actually the JDK9 implementation of this method. Although it is simpler and shorter
to call this method instead of three lines, it is recommended to use the methods compile(),
matcher(), and matches() separately if we perform matching against the same regular
expression many times. In such a case, we can invoke compile() only the first time and
keep the compiled pattern and avoid recompilation each time the matching is performed.
Examples using the Pattern class
Let's look at a few examples to understand some of these methods.
To compile a regular expression for decimal numbers, we can use the following code
snippet:
final String decimalPattern = "^[+-]?\\d*\\.?\\d+$";
Final Pattern pattern = Pattern.compile(decimalPattern);
[ 75 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
The static method, Pattern.compile, compiles a string regex and returns a Pattern
instance.
To match text between ## and ## that may include newlines as well, we can use the
following compiled pattern:
final String re = "##.*?##";
Final Pattern pattern = Pattern.compile(re, Pattern.DOTALL);
Here, we are using two parameters: the Pattern.compile method and passing DOTALL as
a flag in the second parameter, since we want to match the newline as well as using our lazy
pattern .*?.
Note the use of lazy pattern .*? instead of greedy .* so that we match the
shortest match between ## and ##.
We can also write the preceding code snippet using the inline mode modifier, (?s):
final String re = "(?s)##.*?##";
Final Pattern pattern = Pattern.compile(re);
If we want to match a string that contains a subsequence, +-*/., surrounded by one or
more white spaces on both the sides, then we can use the following code:
package example.regex;
import java.util.*;
import java.util.regex.*;
class PatternQuoteExample
{
public static void main (String[] args)
{
String input = "Math operators: +-*/. ";
boolean result;
String quoted = Pattern.quote("+-*/.");
System.out.println(quoted);
// regex using standard escaping
result = input.matches(".*\\s+\\+-\\*/\\.\\s+.*");
System.out.println(result);
// regex Using Pattern.quote around our search string
[ 76 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
result = input.matches(".*\\s+" + quoted + "\\s+.*");
System.out.println(result);
// regex Using \Q and \E around our search string
result = input.matches(".*\\s+\\Q+-*/.\\E\\s+.*");
System.out.println(result);
}
}
After compiling and running this code, will quoted string as: "\Q+-*/.\E" and then print
true for all the three cases as the call to matches succeeds all the times. However, an
important difference is the use of Pattern.quote in the second case, which handles the
quoting of special regex characters in the search string, such as +, *, .
Then, in the third case, we just wrap our search string using \\Q and \\E, which is the same
as calling Pattern.quote with our search string.
To split an input text on two pipes or ||, we can use following code:
package example.regex;
import java.util.*;
import java.util.regex.*;
class PatternSplitExample
{
public static void main (String[] args)
{
final String input = "value1||value2||value3";
final Pattern p = Pattern.compile(Pattern.quote("||"));
// call split and print each element from generated array
// using stream API
Arrays.stream(p.split(input))
.forEach(System.out::println);
}
}
[ 77 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
Consider the following few points about this code:
We call Pattern.quote to avoid escaping double pipe string
We call Pattern.compile to compile our string regex and get back a compiled
Pattern object
We use a generated pattern instance to call the split method by supplying an
input string that we want to operate on
Java 8 added a new method, splitAsStream, which returns a stream containing the
substring from the given input sequence around the matches of this pattern. Using
splitAsStream, we can simplify the preceding class as follows:
package example.regex;
import java.util.*;
import java.util.regex.*;
class PatternSplitStreamExample
{
public static void main (String[] args) throws java.lang.Exception
{
final String input = "value1||value2||value3";
final Pattern p = Pattern.compile(Pattern.quote("||"));
// call splitAsStream and print each element from generated stream
p.splitAsStream(input)
.forEach(System.out::println);
}
}
Note the use of the splitAsStream method instead of the Arrays.stream() static
method in this class. Creating an array performs the whole split. When Pattern returns a
stream, it can do the splitting only when it is needed. If we, for example, limit the stream to
work up only the first 10 elements, then the splitting does not need to do the splitting for
further elements.
It is true even if some of the implementations just do the splitting and return an array based
stream from splitAsStream(). A different implementation of the JDK is free to use a
better solution only if we use splitAsStream() but has no choice if we use split() and
convert to stream afterward.
[ 78 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
Filtering a list of tokens using the asPredicate() method
As noted in the preceding table, the asPredicate() method creates a predicate that can be
used to match an input string. Let's look at an example code listing to understand this
method better:
package example.regex;
import java.util.List;
import java.util.stream.*;
import java.util.regex.*;
public class AsPredicateExample
{
public static void main(String[] args)
{
final String[] monthsArr =
{"10", "0", "05", "09", "12", "15", "00", "-1", "100"};
final Pattern validMonthPattern =
Pattern.compile("^(?:0?[1-9]|1[00-2])$");
List filteredMonths = Stream.of(monthsArr)
.filter(validMonthPattern.asPredicate())
.collect(Collectors.toList());
System.out.println(filteredMonths);
}
}
This code has a list of month numbers as an array of String. The valid months are between
1 and 12 with an optional 0 before the single-digit months.
We use the following regex pattern for a valid month number:
^(?:0?[1-9]|1[00-2])$
We use the return value of the asPredicate() method to filter the stream of string array
containing all the input month values.
After compiling and running, the preceding code will print the following output, which is a
filtered list from the original list containing all the valid month numbers:
[10, 05, 09, 12]
[ 79 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
The Matcher class
An instance of the Matcher class performs various match operations on a character
sequence by interpreting a compiled regular expression represented by an instance of
Pattern. This is how we use this class to match a regex:
We create a matcher instance from a pattern by invoking the pattern's matcher
method that requires the input sequence as argument
The instance of matcher is used to perform three types of match operations using
these three methods, each returning a Boolean value (true indicates success):
matches
find
lookingAt
These methods perform the matching in the following manner:
The matches method attempts to match the complete input sequence using the
matcher's pattern
The find method searches the input sequence for the next substring that matches
the pattern
The lookingAt method attempts to match the input sequence using the
matcher's pattern at the start position.
Let's list down all the important methods from the Matcher class here:
Method Signature Description
boolean find() Using the matcher's pattern attempts to find the
next matching substring of the input text.
boolean find(int start) This is the same as the previous, except that the
search starts at the start position.
boolean matches() Attempts to match the complete input text..
boolean lookingAt() Attempts to match the input text, starting at the
beginning of the region. It does not need to
match the complete input text.
String group() Returns the complete input text matched by the
previous match.
[ 80 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
String group(int group) Returns the input text captured by the specified
group number during the previous match
operation.
String group(String groupName) Returns the input text captured by the given
named group during the previous match
operation.
int groupCount() Returns the number of capturing groups in this
matcher's pattern.
int start() Returns the start index of the previous match
operation.
int start(int group) Returns the start position of the text captured by
the given group number during the previous
match operation.
int start(int groupName) Returns the start position of the text captured by
the given named group during the previous
match operation.
int end() Returns the end position of the previous match
operation.
int end(int group) Returns the end position of the text captured by
the given group number during the previous
match operation.
int end(int groupName) Returns the end position of the text captured by
the given named group during the previous
match operation.
Matcher Appends the given replacement text to the string
appendReplacement(StringBuffer buffer after the last character of the previous
buffer, String replacement) match in the string buffer.
StringBuffer appendTail(StringBuffer This method reads characters from the input text,
buffer) starting at the append position, and appends
them to the given string buffer. It is intended to
be invoked after one or more invocations of the
appendReplacement method in order to copy
the remainder of the input text to the buffer.
[ 81 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
Static String quoteReplacement(String Returns a literal replacement String for the
s) specified String. It makes backslashes and dollar
signs to be treated literally.
String replaceAll(String replacement) Using the current matcher's pattern, it replaces
all the matched substrings of the input text with
the given replacement string.
String replaceFirst(String replacement) Using the current matcher's pattern, it replaces
the first matched substring of the input text with
the given replacement string.
Matcher reset() Resets this matcher object and initializes all the
internal states.
Matcher reset(CharSequence input) Resets this matcher object with a new input text
and initializes all the internal states.
MatchResult toMatchResult() Returns the match result of the matcher that
represents state of the match. This method is
usually called after one of the
find/matches/lookingAt method calls.
Matcher usePattern(Pattern Updates the pattern used by this matcher to find
newPattern) new matches.
Examples using the Matcher class
The Matcher class represents the main regular expression engine in Java that provides all
the functionality and features required to match regular expressions against input. Let's
look at some important methods of this class with practical examples to understand their
use.
Method Boolean lookingAt()
The lookingAt()method attempts to match the input against the pattern, starting from the
beginning of the input but without requiring that the entire region be matched against the
pattern. The following code demonstrates it:
package example.regex;
import java.util.regex.*;
[ 82 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
class MatcherLookingatExample
{
public static void main (String[] args)
{
final Pattern pattern1 = Pattern.compile("master[a-z]*");
final Pattern pattern2 = Pattern.compile("master");
final Pattern pattern3 = Pattern.compile("regular");
String input = "mastering regular expressions";
Matcher matcher = pattern1.matcher(input);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.lookingAt());
// update the matcher's pattern with a new pattern
matcher.usePattern(pattern2);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.lookingAt());
// update the matcher's pattern with a new pattern
matcher.usePattern(pattern3);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.lookingAt());
}
}
Upon compiling and running, the preceding code produces following output:
[mastering regular expressions] => [master[a-z]*]: true
[mastering regular expressions] => [master]: true
[mastering regular expressions] => [regular]: false
You can see that the lookingAt()method returns true only when we supply patterns that
are at the starting of the input, such as master[a-z]* and master, but returns false
when we supply a pattern that is in the middle, such as regular.
The matches() method
The matches() method attempts to match the entire region against the pattern and returns
true only if the entire region matches against the pattern.
[ 83 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
Let's look at the following code to understand the use of this method better:
package example.regex;
import java.util.regex.*;
class MatcherMatchesExample
{
public static void main (String[] args)
{
final Pattern pattern1 = Pattern.compile("mastering");
final Pattern pattern2 = Pattern.compile("mastering.*");
final Pattern pattern3 = Pattern.compile("regular.*");
String input = "mastering regular expressions";
Matcher matcher = pattern1.matcher(input);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.matches());
// update the matcher ppattern with a new pattern
matcher.usePattern(pattern2);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.matches());
// update the matcher ppattern with a new pattern
matcher.usePattern(pattern3);
System.out.printf("[%s] => [%s]: %s%n", input, matcher.pattern(),
matcher.matches());
}
}
This will give following output after running:
[mastering regula expressions] => [mastering]: false
[mastering regula expressions] => [mastering.*]: true
[mastering regula expressions] => [regular.*]: false
As you can see, we get true only when our pattern matches the entire region from the start
to end, which is using this regex: mastering.*
[ 84 ]
Introduction to Java Regular Expression APIs - Pattern and Matcher Classes
The find() and find(int start) methods
These find methods attempt to find the next subsequence of the input sequence that
matches the pattern. These methods return true only if a subsequence of the input matches
this matcher's pattern. If multiple matches can be found in the text, then the find() method
will find the first, and then for each subsequent call to find(), it will move to the next
match.
An example code will make it clearer:
package example.regex;
import java.util.regex.*;
class MatcherFindExample
{
public static void main (String[] args)
{
final String input = "some text  anything 
here";
/* Part 1 */
final Pattern pattern = Pattern.compile("]*)>");
Matcher matcher = pattern.matcher(input);
while (matcher.find()) {