title:Flowinsight: decoupling visibility from operability in SDN data
plane
author:Yuliang Li and
Guang Yao and
Jun Bi
FlowInsight: Decoupling Visibility from Operability in SDN
Data Plane
Yuliang Li, Guang Yao, and Jun Bi
Institute for Network Sciences and Cyberspace, Tsinghua University
Department of Computer Science, Tsinghua University
Tsinghua National Laboratory for Information Science and Technology (TNList)
PI:EMAIL, PI:EMAIL, PI:EMAIL
1.
INTRODUCTION
In most designs of SDN scenarios, there is only one (cid:13)ow
table in each switch, e.g. OpenFlow 1.0. Even with the
adoption of multiple (cid:13)ow tables in later versions of Open-
Flow, this feature is still not widely used.
In the current design of OpenFlow, a controller has two
ways to get the view of a (cid:13)ow: 1) the controller passively
learns a (cid:13)ow if the (cid:13)ow is mismatched in the (cid:13)ow table; 2)
the controller proactively pulls the counters of each rule. If
only one (cid:13)ow table is used, whether the controller can see a
(cid:13)ow is wholly determined by the (cid:13)ow table, i.e. the visibility
is coupled to the operability. However, the coupling has the
following problems:
1. Invisible (cid:13)ows. The (cid:12)rst packet of the (cid:13)ows may
be required by some applications to learn the (cid:13)ows, but gets
lost due to the limitation of the design. For example (Figure
1(a)), a wildcard rule installed by a forwarding application
will mask all the matched micro-(cid:13)ows which should be visi-
ble to a (cid:12)rewall application. To ensure every micro-(cid:13)ow can
be seen by the controller, Frenetic [2] installs an exact-match
rule after each micro-(cid:13)ow’s arrival instead of installing wild-
card rules in advance, while introducing signi(cid:12)cant latency
in forwarding.
2. Unnecessary visibility. The visibility of a part of
(cid:13)ows may be unnecessary to any of the applications, but
it is provided with extra resource cost or network perfor-
mance degradation. For example (Figure 1(b)), whenever
a load-balance application queries elephant (cid:13)ows from the
(cid:13)ow table, all the mice (cid:13)ows are also unnecessarily got[1].
3. Rule explosion. Applications may query the coun-
ters of the (cid:13)ows, and the queries should be composed with
the forwarding policy. However, the composition may cause
rule explosion. For example (Figure 1(c)), in a single switch
network where the forwarding behavior are only depend on
the dstIP, the monitor wants to get the statistics from each
srcIP. Separately, The number of rules needed by the for-
warding APP and the monitor APP is respective O(n) and
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631468 .
(a) Unseen (cid:13)ows
(b) Unnecessary view
(c) Rule explosion
Figure 1: The problems introduced by the coupling
between the visibility and the operability
Figure 2: The architecture of FlowInsight
O(m). However, when they are composed into one (cid:13)ow ta-
ble, the number becomes O(nm).
These problems originate from the coupling between the
visibility and operability. In this demo, we propose FlowIn-
sight, which separates the provision of visibility and oper-
ability. Moreover, we use a 2-stage pipeline of (cid:13)ow tables
in OpenFlow 1.3 to implement a prototype, which can nat-
urally solve the rule explosion problem.
2. FLOWINSIGHT
2.1 Architecture
In the data plane, there are two pipelined tables in FlowIn-
sight: FlowOps and FlowView. Packets are processed by
FlowView and FlowOps sequentially (Figure 2).
137FlowOps determines the operations on each (cid:13)ow.
It
works the same as traditional (cid:13)ow table, i.e. matches against
packets and applies forwarding to matching packets.
FlowView de(cid:12)nes the (cid:13)ows that should be visibile to the
controller. Basically, each rule in FlowView has a match
(cid:12)eld, a priority, a view (cid:12)eld and counters. In the view (cid:12)eld,
one can specify what kinds of view of the match (cid:13)ow should
be provided to the controller. There are two kinds of views:
1. see-on-(cid:12)rst-packet. The (cid:12)rst packet of each micro-
(cid:13)ow which matches a rule with see-on-(cid:12)rst-packet should be
copied and sent to the controller. For example, in Figure
2, if two (cid:13)ows with respective src=10.0.0.1 and src=10.0.0.2
arrives, both their (cid:12)rst packets should be copied and sent to
the controller.
2. trigger-on-condition. As introduced by DevoFlow
[1], the trigger-on-condition is speci(cid:12)ed with a threshold,
and when the counter meets the threshold, the switch should
notify the controller. However, in DevoFlow, the triggers are
on the forwarding rules, so functionalities like triggers on the
aggregate of several (cid:13)ows cannot be achieved, which can be
easily achieved in FlowInsight with FlowView.
Additionally, there is another functionality called query-
by-condition. Applications can query the FlowView with
conditions. For example, applications can query (cid:13)ows whose
total bytes reach 1M, or it can query the TCP (cid:13)ows whose
destination port is 80.
2.2 Workﬂow
When a packet arrives, it is (cid:12)rst matched against the rules
in the FlowView. The rule with the highest priority updates
its counter, and performs the functionalities speci(cid:12)ed in the
view (cid:12)eld. Then the packet is matched against the rules in
the FlowOps, and is forwarded correspondingly.
The controller can send the query-by-condition to the
switches proactively, and the switches should send all (cid:13)ows
that meet the condition to the controller upon receiving the
query.
2.3 How FlowInsight solves the problems
The see-on-(cid:12)rst-packet directly solves the invisible (cid:13)ows
problem. Because the forwarding action can be installed in
FlowOps in advance without interfering the visibility, this
will not introduce latency in the forwarding. The trigger-
on-condition and query-by-condition together can solve the
unnecessary visibility problem associated with (cid:13)ow size. Fi-
nally, since the FlowView is independent from FlowOps, the
rule explosion problem is naturally solved, as shown in the
next section.
3.
IMPLEMENTATION AND DEMONSTRA-
TION
We use the feature of multi-table pipeline in OpenFlow 1.3
to implement an experiment. Since see-on-(cid:12)rst-packet and
query-by-condition are not directly supported by OpenFlow
1.3, we leave them to our future work, only having a sepa-
rate table with counters. Our experiment shows that it can
signi(cid:12)cantly reduce the number of rules compared to the
case where only one table is used, so it can solve the rule
explosion problem.
In this demo, We perform a case study, where there is
only one switch connecting 48 hosts. There are two applica-
tions. The (cid:12)rst is a learning switch, which learns the  mapping and forwards packets based on the destina-
tion MAC address. The second applications is a monitor,
which monitors the tra(cid:14)c from each source MAC address
every time unit.
In traditional implementation, for each packet 
sent to the controller, a corresponding rule with match (cid:12)eld
 should be installed. When
monitor wants to get the statistics, it should pull all the
counters, and groups them by their source addresses. In our
implementation, for each packet , the monitor
installs a rule with match (cid:12)eld  in table 0,
and the learning switch learns the in port corresponding to
the src and installs a rule with match (cid:12)eld 
and action (cid:12)eld  in table 1. When
monitor wants to get the statistics, it should pull all the
counters in table 0.
We tested the number of rules used with di(cid:11)erent num-
ber of hosts in mininet. The result is shown in Figure 3.
The number of rules needed by traditional method grows
quadratically with the number of hosts. Our methods re-
duces it down to linear growth.
4. CONCLUSION
Our contributions are, 1) presenting the problems intro-
duced by the coupling between the visibility and the oper-
ability in the data plane, 2) proposing FlowInsight to solve
the problems, and 3) implementing with OpenFlow 1.3 to
show the feasibility and e(cid:11)ectiveness of our method. In the
future, we plan to add other functionalities to fully solve the
problems.
Acknowledgment
This work is supported by the National High-tech R & D
Program ("863" Program) of China(No.2013AA013505), the
National Science Foundation of China (No.61161140454),
National Science & Technology Pillar Program of China
(No.2012BAH01B01), the National Science Foundation of
China (No. 61303194), and the China Postdoctoral Science
Foundation (No.2013M530047). Jun Bi is the corresponding
author.
5. REFERENCES
[1] A. R. Curtis, J. C. Mogul, J. Tourrilhes,
P. Yalagandula, P. Sharma, and S. Banerjee. Devo(cid:13)ow:
Scaling (cid:13)ow management for high-performance
networks. In Proc. SIGCOMM, 2011.
[2] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto,
J. Rexford, A. Story, and D. Walker. Frenetic: A
network programming language. In ACM ICFP, 2011.
138