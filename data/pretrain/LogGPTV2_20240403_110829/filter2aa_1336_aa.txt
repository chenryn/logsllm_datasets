Wesley McGrew
HORNECyber.com
An Attacker Looks at Docker:
Approaching Multi-Container Applications
Wesley McGrew, Ph.D.
Director of Cyber Operations
HORNE Cyber
PI:EMAIL
@mcgrewsecurity
Wesley McGrew
HORNECyber.com
1
An Attacker Looks at Docker: Approaching Multi-Container Applications
TABLE OF CONTENTS
Table of Contents
Introduction
Motivation
Prior Work
Attacking Application Internals
Concept
Malware
Exploitation
The Training Gap (Again)
Containerization
Concept
Taking Advantage of the Abstraction
Docker as a Target Application Platform
EXAMPLE: Basic Exploration of Docker Container Applications
Setup
Exploring the Deployed Applications
Network Controls Between Applications
Implications for Attackers
EXAMPLE: Post-Exploitation Inside Containers
Motivation
Identifying Network Information
Loading Tools into Compromised Containers
Exploiting the Outer Surface of a Multi-Container Application
Introduction
1
3
3
4
5
5
5
5
6
6
6
6
7
8
8
11
13
14
15
15
15
16
18
18
Wesley McGrew
HORNECyber.com
2
An Attacker Looks at Docker: Approaching Multi-Container Applications
TABLE OF CONTENTS
Value in Lab Environments
Vulnerabilities Brought into and Carried Along in Containers
EXAMPLE: Post-Exploitation of a Multi-Container Application
Introduction
Target Application Setup
Attacker Setup
Exploitation
Identifying Containerization
Exploring the Multi-Container Network
Attacking the Application-Internal Database Server
Conclusions
Bibliography
19
19
20
20
21
24
25
26
26
31
34
35
Wesley McGrew
HORNECyber.com
The goal of this white paper, and its associated talk, is to provide a hacker experienced in exploitation and post-
exploitation of networks of systems with an exposure to containerization and the implications it has on offensive 
operations. Docker is used as a concrete example for the case study. As a tool for enabling service-oriented 
architectural styles of development, the rise in popularity of using containers is relatively recent. While exploitation 
and manipulation of monolithic applications might require specialized experience and training in the target 
languages and execution environment, applications made up of modular services distributed amongst multiple 
containers can be effectively explored and exploited “from within” using many of the system- and network-level 
techniques in which attackers, such as penetration testers, are more commonly trained. A hacker can expect 
to leave this presentation with a practical exposure to multi-container application post-exploitation that is as 
lightweight in buzzwords as is possible with such a trendy topic among developers.
Containerization, the decomposition of applications into multiple independent containers that interact with each 
other over standard protocols, is becoming a more common and popular way of building large-scale applications 
that deal with big data. Cloud-based container services and microservice architectures are commonly used for 
large-scale services that make use of personal identity data.
The approach to hacking described in this work involves moving from attacking accessible interfaces of monolithic 
applications to leveraging vulnerabilities in components of multi-container microservice-based applications to 
explore the otherwise-inaccessible insides. Over the past decade and a half, attackers have embraced, used, and 
learned how to attack virtualization technologies to the point that the use of virtualization has become nearly muscle 
memory. The same adaptation will soon have to occur for containerization as more and more attractive targets and 
clients of penetration tests deploy large-scale applications that make use of Docker and similar platforms.
INTRODUCTION
3
MOTIVATION
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
4
PRIOR WORK
David Mortman presented a talk at DEF CON 23, Docker, Docker, Give Me the News, I Got a Bad Case of Securing 
You. Mortman’s talk provided an overview of Docker’s underlying implementation and architecture, current and 
planned security features, and presented advice for developers interested in taking positive action to make their 
containerized applications more secure[1]. Mortman linked to a Gotham Digital Science set of Docker Secure 
Deployment Guidelines that provides more guidance to those interested in development and deployment[2]. Also 
at DEF CON 23, Aaron Grattafiori went into even more detail on the Linux kernel’s capabilities for containerization 
and platforms (such as Docker) that are built to take advantage of those capabilities[3]. Grattafiori’s white paper, 
Understanding and Hardening Linux Containers, also provides interesting low-level security advice[4]. 
The Docker documentation also discusses security issues[16], and over time has addressed vulnerabilities 
described in some of the other prior works discussed here. While there are recommendations for more secure 
deployment of container-based and multi-container applications, there are two main points that attackers will 
need to keep in mind. First, unless a security measure or feature is on by default and does not represent an 
inconvenience, there will be a significant number of target application deployments that will not implement that 
feature. Second, application-level vulnerabilities may allow attackers into application-specific container networks, 
regardless of platform-level mitigations, meaning that attackers should remain very interested in post-exploitation 
tactics as applied to containers. In short, admirable progress has been made, but developers have yet to be saved 
from themselves.
On the offense-oriented side of things, at Black Hat Europe 2015, Anthony Bettini presented Vulnerability 
Exploitation in Docker Containers, that focused on a set of vulnerabilities in the Docker platform itself[5]. At Black 
Hat USA 2017, Michael Cherney and Sagie Dulce presented a set of vulnerabilities in the Docker platform that 
targeted the development environments of workstations[6].
The majority of information found on Docker security either has a target audience of those that defend Docker 
deployments or involve specific vulnerabilities that can or have been patched or mitigated. This work intends to cater 
to an audience of attackers, including penetration testers, that are interested in the implications and mechanics of 
attacking multi-container applications. The focus is on exposure to the topic in a form (in terminology, approach, 
and style) useful to that audience, and the presentation of strategies and “tips” for how to approach larger-scale 
applications that are made up of containers.
The concept and approach for this work is strongly influenced by HD Moore and Valsmith’s DEF CON 15 talk, 
Tactical Exploitation. That talk is an old favorite of this work’s author, and it had a significant impact on the way a 
lot of penetration testers approached their work[7].
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
5
ATTACKING APPLICATION INTERNALS
CONCEPT
An attacker with complete control over a target application has the opportunity to turn code against itself. With 
the ability to execute individual functions and modules within the code, the attacker can access and edit data in 
a way that is consistent with the application. This is a convenience, reducing the need for the attacker to perform 
further analysis or reverse-engineering.
MALWARE
Outside of the realm of live attacks, this advantage can be seen in the analysis of malicious software, where 
analysts allow “packed” binaries to “unpack” themselves in the normal course of execution, before dumping the 
unpacked image in memory off to disk for analysis. Frequently, strings are encoded in a way that subverts basic 
static analysis. Rather than spend time in cryptanalysis of the encoded strings or in understanding the details 
of the algorithm, the analyst can often simply identify the decoder function and call it, in the same way as the 
malware, for each encoded string. A deeper understanding of the code may be unnecessary, if the code itself can 
be leveraged towards the end goal (in this case, of understanding an undocumented binary).
EXPLOITATION
In a live attack on an application, this same technique can be used. Attacks on binary, native-code applications 
often use return-oriented programming (ROP) as a matter of necessity when attacker-controlled memory is not 
marked as executable. This exploitation technique can be used to string together segments of executable code 
already existing in the memory of the target application to achieve a goal, such as the elevation of privilege for 
an application user, or the execution of a shell[8]. It has been shown that this technique often results in a wide 
enough variety of code “gadgets” to allow for Turing-complete execution. Even if the advantages of a fully-featured 
execution environment are not possible or taken advantage of by an attacker, it can be straightforward to call 
functions in the target application to accomplish the attacker’s goal without a traditional “shell pop” [9].
Application security experts are more likely to identify creative ways of exploiting the internals of applications 
than those tasked with the tactical exploitation of networks and systems. Penetration testers are typically trained 
to be “users” of exploits, rather than developers, and are therefore limited in their ability to move around within 
applications using the methods discussed so far. “Creative” control over execution within a monolithic binary 
application is rarely exercised in the context of attacks carried out in the context of penetration testing.
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
6
THE TRAINING GAP (AGAIN)
In the author’s previous work reviewing penetration testing training material, for the purpose of identifying the 
presence or absence of OPSEC material, it was noted that binary exploitation training in penetration testing books 
and training is primarily introductory and conceptual in nature[10]. The techniques taught are useful in giving 
penetration testers the background necessary to have a basic understanding of exploits they use from third-party 
sources, such as those provided in frameworks like Metasploit or found on sites like Exploit-DB. Most sources focus 
on basic stack-overflow techniques targeting the most straightforward vulnerabilities in older applications running 
on operating systems lacking modern exploit mitigations (or that have such mitigations disabled). This training is 
not sufficient to give most penetration testers the ability to write their own exploits or payloads that target modern 
applications on modern operating systems.
Motivated, funded, and organized attackers are more likely to have “in-house” talent for developing exploits and 
payloads that are specific to their mission. A payload that calls target application functions to extract and exfiltrate 
data is more likely to evade detection and accomplish its goal with less live interaction than a general-purpose 
“back door” (such as Meterpreter). This is behavior more closely associated with nation-state and criminal threat 
actors than with typical penetration testers.
CONTAINERIZATION
CONCEPT
Containerization technology like Docker allows for the design of applications that are composed of many independent 
single-purpose services, each with a minimal set of supporting system software and libraries[11]. Each service 
represents a node on a network that has been created specifically for the application’s use. What would normally 
be a call to a local function or a linked library might now be implemented as a communication across a network, 
with a standard protocol, to another host[12].
Applications that have been developed using a Service-Oriented Architecture or microservice approach democratize 
post-exploitation manipulation and instrumentation of the application. With monolithic applications, specialist 
knowledge of the target application’s programming language, or its application binary interface, is needed to 
successfully explore and instrument the application during post-exploitation. That is the domain of application 
security and exploit development experts. In contrast, applications made up of multiple independent containers 
communicating over standard networking protocols can be easily understood and manipulated by attackers, such 
as penetration testers, that are trained in tactical exploitation of networked systems.
TAKING ADVANTAGE OF THE ABSTRACTION
A typical attack, or penetration test, on a target organization can often be described as a progression of connected 
systems that have been compromised by exploits against vulnerable services running on those systems. Each 
compromised system may lead to that system being used in the identification and exploitation of subsequent 
systems.
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
7
The additional layer of abstraction present in an application made up of independent containers is a boon for 
attackers not specifically trained in-depth on application security. Where such an attacker would otherwise be 
limited to treating each application or service on target hosts as a black box into which pre-made exploits are 
launched, a containerized, SOA/microservice application allows for an exploit of an external-facing surface to act 
as a looking glass into a wholly separate network of targets with which to interact.
Exploits for the attack surface of a multi-container application will exploit software running within a specific 
container of the application. The exploit will likely take advantage of a web application vulnerability or memory 
corruption bug in the same way as it would against a normal host running the same vulnerable application. Once 
exploitation is successful, however, the attacker now has access to a system that is connected to an internal 
network of systems and services that make up the rest of the multi-container application. Traditional attack/
penetration-testing tools, tactics, and procedures that are normally used against internal target networks can then 
be leveraged, with small modification, to explore and exploit the internals of an application. The abstraction that 
allows for loose coupling of independent application components now serves as a useful abstraction for attackers 
otherwise unfamiliar with application security analysis.
DOCKER AS A TARGET APPLICATION PLATFORM
Docker applications may be monolithic or consist of multiple containers. Monolithic applications can take 
advantage of Docker’s features that allow images to easily define and implement all of the necessary dependencies 
needed for a specific application (in isolation of potential conflicts with other applications), and by simplifying and 
standardizing the installation process. Applications such as GitLab are available as Docker images, and can be 
deployed into a single container that comprise the entirety of the application.
Attacking a monolithic container application will work in a similar way as attacking a traditional host operating 
system based installation of the same application, and code execution will give similar access to the container’s 
environment. Exploitation will be limited to that environment and not necessarily lead to exploitation of the 
container’s host.
Even monolithic container applications may provide an attacker with more post-exploitation opportunities than 
an attacker might see on a traditional network. By default (if networks are not specifically configured otherwise), 
Docker will place multiple containers on the same private network “behind” the host, regardless of the applications’ 
dependence (or lack of dependence) on each other. While you must specify which container ports are exposed to 
the outside world through the host, each of those containers on the host may talk to each other freely in the default 
configuration.
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
8
EXAMPLE: BASIC EXPLORATION OF DOCKER
CONTAINER APPLICATIONS 