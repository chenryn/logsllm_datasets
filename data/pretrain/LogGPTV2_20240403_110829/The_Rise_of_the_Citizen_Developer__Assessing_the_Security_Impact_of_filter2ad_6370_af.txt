11% of free apps in Google Play (250K apps) are already
generated by Online Services.
B. Pitfalls of the “One Size Fits All” AppGens’ Strategy
Online Services provide simple means of creating apps
without requiring any knowledge about programming or mo-
bile operating systems. This is achieved by abstracting the
implementation task to some kind of drag-and-drop assembly
of predeﬁned modules and by limiting the degree of freedom
of app customization. Such a “One Size Fits All” strategy
led to a new paradigm in app generation, distributing an apk
ﬁle with monolithic or module-dependent boilerplate code that
is statically or dynamically conﬁgured with an app-speciﬁc
conﬁg ﬁle. While this provides a convenient way to generate
and distribute applications for a large number of clients, from a
security perspective, this creates new points of failures, that, if
not considered carefully, might compromise end-user security
or even online service security.
The results in Section IV show that the majority of OAGs
that base their business model on monolithic boilerplate apps
fail to properly protect conﬁg ﬁles from tampering and eaves-
dropping. Only 2 out 8 OAGs in Table 2 correctly use HTTPS
to retrieve conﬁg ﬁles. Moreover, we found that none of
the services applied certiﬁcate pinning to prevent man-in-
the-middle attacks. Similarly, only a single service properly
protected its statically included conﬁg. However, none of
the services checked the integrity of the conﬁg ﬁle during
app launch. This opens the door for many attacks such as
reconﬁguration attacks, ad revenue theft (through replacing
API keys), and, in general, changing arbitrary app-speciﬁc
data.
Boilerplate apps that use HTML/JS for layouting (see cat-
egory A2 in Table 2) are additionally prone to code injection
and fracking attacks (P6–P8 in Table 3). This is caused by the
web-to-app bridge these services use to access the Android
API. Due to the boilerplate app pattern, these bridges expose
more functionality than typically necessary and/or are not
properly protected from being misused.
Following the principle of least privilege, Andromo and
Appinventor (see category B) generate targeted boilerplate
code based on the modules selected by the app developer.
Since their code generation model follows the traditional app
development,
they are not prone to OAG-speciﬁc security
problems such reconﬁguration attacks. However, the trade-off
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
is an additional code generation effort, when any combination
of pre-deﬁned modules must be ﬂawlessly composable. This
is why Andromo, with only 19 available modules, is at the
lower end in terms of available modules, while Appinventor
with its community support offers notable 59 modules.
C. Ampliﬁcation of Security Issues
The increasing use of online services has shifted the duty of
generating secure code from app developers to the generator
service. Users rarely have options to customize or change their
application beyond the ones provided by the service. As a
consequence, users have to fully trust the service to generate
non-vulnerable code and to not include hidden or non-obvious
user tracking or data leakage. Particularly worrisome examples
include the paid service Como,
that performs heavy user
tracking although its privacy policy explicitly emphasizes the
importance of the security of the users’ personal information
and Mobincube that silently tracks users via BLE beacons
without explicitly stating this in its terms and conditions.
The results of our security evaluation in Section VI suggest
that OAG-generated apps do hardly adhere to security best
practices and exhibit common app vulnerabilities that have
been identiﬁed by prior research. Although these ﬁndings are
in line with coding practices of traditional developers, the
worrisome aspect is the ampliﬁcation effect of online services,
putting millions of users and their private data at risk. Another
key insight is, as opposed to traditional apps, vulnerabilities in
unused boilerplate code can still be exploited when a network
attacker is able to compromise the application conﬁg and re-
conﬁgure or activate app modules with known security issues
or when ContentProviders can be queried to retrieve
internal data (see Section VI-A).
We conclude that in the current online service ecosystem the
level of security does not depend on whether it is a free or paid
service, but rather on the underlying app generation model.
For the two module-dependent code generators Andromo and
Appinventor we found the least security issues. Particularly for
Appinventor this is unsurprising, since it is open-source and
does not follow commercial interests. The boilerplate model is
not generally insecure, however, from a security perspective,
server communication and conﬁg protection require a more
careful design. This could include certiﬁcate pinning for
dynamically retrieved conﬁgs, obfuscation or encryption of
static conﬁgs, and integrity checks to prevent unauthorized
tampering.
D. Missed Opportunity for a Large-Scale Security Impact
A patch to the current situation is to inform online services
about
the discovered security issues to allow them to ﬁx
their code generation. We are currently in the process of a
responsible disclosure to allow the respective service providers
to ﬁx the security ﬂaws. However, while this is a short-term
mitigation, it does not address the root cause of these issues,
thus not producing more desirable long-lasting effects. In our
opinion, OAG services need a thorough investigation from
the research community in the way AppGens are built. This
investigation requires a solid understanding of the underly-
ing technique in use. Other areas of research from which
lessons can be learned or transferred are tailored software
stacks. Prior works have shown that the attack surface can
be considerably reduced by compile-time [30] and run-time
conﬁgurations [42].
VIII. CONCLUSION
In this paper we present the ﬁrst classiﬁcation of commonly
used online services for Android based on various character-
istics and quantify the market penetration of these AppGens
based on a corpus of 2,291,898 free Android apps from Google
Play to discover that at least 11.1% of these apps were created
using online services. Based on a systematic analysis of the
new boilerplate app generation model, we show that online
services fall short in protecting against reconﬁguration attacks
and running a secure infrastructure. A subsequent security
audit of the generated boilerplate code reveals that OAGs make
the same security mistakes as traditional app developers. But
in contrast, they carry the sole responsibility of generating
secure and privacy-preserving code. Due to their ampliﬁcation
effect—a single error by an OAG potentially affects thousands
of generated apps (250K apps in our data set)—we conclude
that Online Services currently have a negative impact on the
security of the overall app ecosystem. But, at the same time,
these services are in the unique position to turn these negative
aspects into positive ones through spending more effort into
securing their application model and infrastructure from which
ultimately millions of users beneﬁt.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for
their valuable feedback. This work was supported by the
German Federal Ministry of Education and Research (BMBF)
through funding for the Center for IT-Security, Privacy and
Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656), the
projects SmartPriv (FKZ: 16KIS0377K) and CAMRICS (FKZ:
16KIS0656) and the CISPA-Stanford Center for Cybersecurity
(FKZ: 13N1S0762).
REFERENCES
[1] “CVE-2016-2107: Padding-oracle attack against AES CBC,” Jan. 2016.
[2] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith,
“Sok: Lessons learned from android security research for appiﬁed
software platforms,” in Proc. 37th IEEE Symposium on Security and
Privacy (SP ’16).
IEEE, 2016.
[3] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A.
Halderman, N. Heninger, D. Springall, E. Thomé, L. Valenta, B. Vander-
Sloot, E. Wustrow, S. Zanella-Béguelin, and P. Zimmermann, “Imperfect
forward secrecy: How Difﬁe-Hellman fails in practice,” in Proc. 22nd
ACM Conference on Computer and Communication Security (CCS’15).
ACM, 2015.
[4] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: analyzing
the android permission speciﬁcation,” in Proc. 19th ACM Conference
on Computer and Communication Security (CCS’12). ACM, 2012.
[5] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel,
J. Steube, L. Valenta, D. Adrian, J. A. Halderman, V. Dukhovni,
E. Käsper, S. Cohney, S. Engels, C. Paar, , and Y. Shavitt, “DROWN:
Breaking TLS using SSLv2,” Mar. 2016, CVE-2016-0800.
646
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
[6] M. Backes, S. Bugiel, and E. Derr, “Reliable Third-Party Library
Detection in Android and its Security Applications,” in Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’16). ACM, 2016.
[7] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer, “R-Droid:
Leveraging Android App Analysis with Static Slice Optimization,” in
Proceedings of the 11th ACM on Asia Conference on Computer and
Communications Security (ASIA CCS ’16). ACM, 2016.
[8] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisger-
ber, “On Demystifying the Android Application Framework: Re-Visiting
Android Permission Speciﬁcation Analysis,” in Proc. 25th USENIX
Security Symposium (SEC’16). USENIX Association, 2016.
[9] M. Backes, S. Bugiel, and S. Gerling, “Scippa: System-centric ipc
provenance on android,” in Proc. 30th Annual Computer Security
Applications Conference (ACSAC’14). ACM, 2014.
[10] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P. Y. Strub, and J. K. Zinzindohoue, “A messy
state of the union: Taming the composite state machines of tls,” in Proc.
36th IEEE Symposium on Security and Privacy (SP’15).
IEEE, 2015.
[11] T. Book, A. Pridgen, and D. S. Wallach, “Longitudinal analysis of
android ad library permissions,” in MoST’13.
IEEE, 2013.
[12] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-
application communication in android,” in Proceedings of
the 9th
international conference on Mobile systems, applications, and services.
ACM, 2011, pp. 239–252.
[13] E. Chin and D. Wagner, “Bifocals: Analyzing webview vulnerabilities
in android applications,” in Proc. Information Security Applications.
Springer-Verlag, 2014.
[14] T. Duong and J. Rizzo, “Here come the ⊕ ninjas,” May 2011.
[15] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in android applications,” in Proc. 20th
ACM Conference on Computer and Communication Security (CCS’13).
ACM, 2013.
[16] W. Enck, M. Ongtang, and P. McDaniel, “Understanding Android
the IEEE International Conference on
Security,” in Proceedings of
Security & Privacy, 2009, pp. 50–57.
[17] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and
M. Smith, “Why eve and mallory love android: an analysis of android ssl
(in)security,” in Proceedings of the 2012 ACM conference on Computer
and communications security, ser. CCS ’12. New York, NY, USA:
ACM, 2012, pp. 50–61.
[18] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith, “Rethinking
ssl development in an appiﬁed world,” in Proc. 20th ACM Conference
on Computer and Communication Security (CCS’13). ACM, 2013.
[19] A. Fisher, “How companies are developing more apps with fewer
http://fortune.com/2016/08/30/quickbase-coding-apps-
developers,”
developers/, Aug. 2016, last visited: 11/29/2017.
[20] Gartner, “Gartner says citizen developers will build at least 25 percent of
new business applications by 2014,” http://www.gartner.com/newsroom/
id/1744514, Jul. 2011, last visited: 11/29/2017.
[21] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The most dangerous code in the world: validating SSL
certiﬁcates in non-browser software,” in Proc. 19th ACM Conference on
Computer and Communication Security (CCS’12). ACM, 2012.
[22] M. Georgiev, S. Jana, and V. Shmatikov, “Breaking and Fixing Origin-
Based Access Control in Hybrid Web/Mobile Application Frameworks
,” in 2014 Network and Distributed System Security (NDSS ’14), San
Diego, February 2014.
[23] Google, “Android Developers: Security Tips,” https://developer.android.
com/training/articles/security-tips.html, last visited: 11/29/2017.
[24] Google, “Android developers blog: Using cryptography to store
credentials safely,” http://android-developers.blogspot.de/2013/02/using-
cryptography-to-store-credentials.html, 2013, last visited: 11/29/2017.
[25] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic detection of
capability leaks in stock Android smartphones,” in Proc. 19th Annual
Network and Distributed System Security Symposium (NDSS’12). The
Internet Society, 2012.
[26] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, “Riskranker:
Scalable and accurate zero-day android malware detection,” in Proc. 10th
International Conference on Mobile Systems, Applications, and Services
(MobiSys’12). ACM, 2012.
[27] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proc. 5th ACM Conference
on Security and Privacy in Wireless and Mobile Networks (WiSec’12).
ACM, 2012.
[28] D. Hinchcliffe, “The advent of the citizen developer,” http://www.zdnet.
com/article/the-advent-of-the-citizen-developer/, Apr. 2016, last visited:
11/29/2017.
[29] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection
attacks on html5-based mobile apps: Characterization, detection and
mitigation,” in Proc. 21st ACM Conference on Computer and Commu-
nication Security (CCS’14). ACM, 2014.
[30] A. Kurmus, R. Tartler, D. Dorneanu, B. Heinloth, V. Rothberg,
A. Ruprecht, W. Schröder-Preikschat, D. Lohmann, and R. Kapitza, “At-
tack surface metrics and automated compile-time OS kernel tailoring,” in
Proc. 20th Annual Network and Distributed System Security Symposium
(NDSS’13). The Internet Society, 2013.
[31] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting
android apps for component hijacking vulnerabilities,” in Proc. 19th
ACM Conference on Computer and Communication Security (CCS’12).
ACM, 2012.
[32] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView
in the Android system,” in Proc. 27th Annual Computer Security
Applications Conference (ACSAC’11). ACM, 2011.
[33] B. Möller, T. Duong, and K. Kotowicz, “This POODLE Bites: Exploiting
the SSL 3.0 Fallback (Security Advisory),” Sep. 2014, CVE-2014-3566.
[34] P. Mutchler, A. Doupé, J. Mitchell, C. Kruegel, and G. Vigna, “A
Large-Scale Study of Mobile Web App Security,” in Proc. 2015 Mobile
Security Technologies Workshop (MoST’15).
IEEE, 2015.
[35] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and
Y. L. Traon, “Effective inter-component communication mapping in
android: An essential step towards holistic security analysis,” in Proc.
22nd Usenix Security Symposium (SEC’13).
USENIX Association,
2013.
[36] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna,
“Execute this! analyzing unsafe and malicious dynamic code loading
in android applications,” in Proc. 21st Annual Network and Distributed
System Security Symposium (NDSS’14). The Internet Society, 2014.
[37] A. Porter Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in Proc. 18th ACM Conference on Computer
and Communication Security (CCS’11). ACM, 2011.
[38] A. Porter Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner,
“Android permissions: user attention, comprehension, and behavior,” in
Proc. 8th Symposium on Usable Privacy and Security (SOUPS ’12).
ACM, 2012.
[39] Seattle Cloud, “Login page type tutorial,” http://seattleclouds.com/login-
page-type-tutorial, 2016, last visited: 11/29/2017.
[40] S. Son, G. Daehyeok, K. Kaist, and V. Shmatikov, “What mobile
ads know about mobile users,” in Proc. 23rd Annual Network and
Distributed System Security Symposium (NDSS’16), 2015.
[41] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “SMV-
Hunter: Large Scale, Automated Detection of SSL/TLS Man-in-the-
Middle Vulnerabilities in Android Apps,” in Proc. 21st Annual Network
and Distributed System Security Symposium (NDSS’14). The Internet
Society, 2014.
[42] K. Stengel, F. Schmaus, and R. Kapitza, “Esseos: Haskell-based tailored
services for the cloud,” in Proceedings of the 12th International Work-
shop on Adaptive and Reﬂective Middleware, ser. ARM ’13. ACM,
2013.
[43] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Investigat-
ing user privacy in android ad libraries,” in Proc. 2012 Mobile Security
Technologies Workshop (MoST’12).
IEEE, 2012.
[44] R. Wang, L. Xing, X. Wang, and S. Chen, “Unauthorized origin
crossing on mobile platforms: Threats and mitigation,” in Proc. 20th
ACM Conference on Computer and Communication Security (CCS’13).
ACM, 2013.
[45] Y. Zhou and X. Jiang, “Detecting passive content leaks and pollution in
Android applications,” in Proc. 20th Annual Network and Distributed
System Security Symposium (NDSS’13). The Internet Society, 2013.
647
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply.