22
Why Xprobe? - Cons
Limited to the ICMP and UDP protocols only 
Internet usage can be defeated (smart firewall rule base)
Failover to TCP, or a correlation with TCP needs to be done, in a smart 
manner. This will lead to a very accurate Active OS fingerprinting tool 
using very small amount of traffic to determine a remote OS. 
The Static Decision Tree is limited in adding new operating systems and 
networking devices (the static decision tree is hardcoded into the 
binary).
© 2 0 0 1     @ S T A K E ,     I N C .
23
Xprobe – Inner Working
Xprobe has 2 development trees: 0.0.x for Static decision Tree (limited in 
the number of operating systems and networking devices it supports), and 
0.1.x for Signature Dynamic DB support.
The difference is with the processing of the results from the tests. 
–
With the 0.0.x dev-tree we have a predefined static decision tree. 
Adding operating systems and networking devices is a hard task since 
it needs to be hard coded.
–
With the 0.x dev-tree we use a signature database support. This means 
that in order to add support for an operating system or a networking 
device all we need is create an entry in the signature database.
–
In a sentence: Version 0.1.x - more accurate, easier and more flexible
way to maintain and update  signatures.
Both development trees use the same Active OS fingerprinting methods 
using the ICMP protocol.
© 2 0 0 1     @ S T A K E ,     I N C .
24
Xprobe - ICMP Error Message Echoing Integrity
Each ICMP error message includes the IP Header and at least the first 8 data 
bytes of the datagram that triggered the error (the offending datagram); more 
than 8 bytes may be sent according to RFC 1122.
When sending back an ICMP error message, some stack implementations may 
alter the offending packet's IP header and the underlying protocol's data, which 
is echoed back with the ICMP error message.
If a malicious computer attacker examines the types of alternation(s) that have 
been made to the offending packet's IP header and the underlying protocol 
data, he may be able to make certain assumptions about the target operating 
system.
The only two field values we expect to be changed are the IP time-to-live field 
value and the IP header checksum. The IP TTL field value changes because the 
field is decreased by one, each time the IP Header is being processed. The IP 
header checksum is recalculated each time the IP TTL field value is decreased.
© 2 0 0 1     @ S T A K E ,     I N C .
25
Xprobe - ICMP Error Message Echoing Integrity
With Xprobe we will take advantage of ICMP Port Unreachable error messages
triggered by UDP datagrams sent to close UDP ports.  We will be examining 
several IP Header and UDP related field values of the offending packet being 
echoed with the ICMP Error message, for some types of alternation(s).
IP Total Length Field - Some operating system IP stacks will add 20 bytes to the 
original IP total length field value of the offending packet, with the one echoed 
with the IP header of the offending packet in the ICMP Error message. Some 
other operating system IP stacks will decrease 20 bytes from the original IP 
total length field value of the offending packet, with the one echoed with the IP 
header of the offending packet in the ICMP Error message. 
…And some other operating system IP stacks will echo correctly this field 
value.
IPID - Some operating system IP stacks will not echo the IPID field value 
correctly with their ICMP Error messages. They will change the bit order with 
the value echoed. 
…Other operating system IP stacks will echo correctly this field value
© 2 0 0 1     @ S T A K E ,     I N C .
26
Xprobe - ICMP Error Message Echoing Integrity
3Bits Flags and Offset Fields - Some operating system IP stacks will not 
echo the 3Bits Flags and Offset fields value correctly with their ICMP Error 
messages. They will change the bit order with these fields. Other operating 
system IP stacks will echo correctly this field value.
IP Header Checksum - Some operating system IP stacks will miscalculate 
the IP Header checksum of the offending packet echoed back with the ICMP 
error message. Some operating system IP stacks will zero out the IP 
Header checksum of the offending packet echoed back with the ICMP error 
message. Other operating system IP stacks will echo correctly this field 
value.
© 2 0 0 1     @ S T A K E ,     I N C .
27
Xprobe - ICMP Error Message Echoing Integrity
UDP Header Checksum - Some operating system IP stacks will 
miscalculate the UDP Header checksum of the offending packet echoed 
back with the ICMP error message. Some operating system IP stacks will 
zero out the UDP Header checksum of the offending packet echoed back 
with the ICMP error message. Other operating system IP stacks will echo 
correctly this field value.
Some operating system stacks will not echo correctly several field values 
with the same ICMP Error Message, and not just one. This will enable us to 
use multiple echoing integrity tests with just one ICMP Error messages sent 
by a targeted machine.
© 2 0 0 1     @ S T A K E ,     I N C .
28
Xprobe - ICMP Error Message Echoing Integrity
15:44:56.822182 ppp0 > 32.101.233.50.36196 > y.y.y.y.32132: udp 70 (DF) 
(ttl 250, id 2279)
4500 0062 08e7 4000 fa11 d99b 2065 e932
yyyy yyyy 8d64 7d84 004e 5661 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000
15:44:57.192182 ppp0  32.101.233.50: icmp: y.y.y.y udp port 
32132 unreachable Offending pkt: 32.101.233.50.36196 > y.y.y.y.32132: 
udp 70
(DF) (ttl 234, id 2279, bad cksum e99b!) (DF) (ttl 233, id 40032)
4500 0038 9c60 4000 e901 575c yyyy yyyy
2065 e932 0303 f1b1 0000 0000 4500 0076
08e7 4000 ea11 e99b 2065 e932 yyyy yyyy
8d64 7d84 004e 0000
An example with AIX 3.2
IP Total Length Field Value Echoed is 
118 while the Original was 98
IP Header Checksum Echoed  
is Miscalculated
© 2 0 0 1     @ S T A K E ,     I N C .
29
Xprobe - ICMP Error Message Echoing Integrity
15:47:25.342182 ppp0 > 32.101.233.50.53783 > y.y.y.y.32132: udp 70 (DF) 
(ttl 250, id 57568)
4500 0062 e0e0 4000 fa11 1dad 2065 e932
yyyy yyyy d217 7d84 004e 2db9 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000
15:47:25.652182 ppp0  32.101.233.50: icmp: y.y.y.y udp port 
32132 unreachable Offending pkt: 32.101.233.50.53783 > y.y.y.y.32132: 
udp 70 (DF) (ttl 238, id 57568) (ttl 241, id 61090)
4500 0038 eea2 0000 f101 5925 yyyy yyyy
2065 e932 0303 7f59 0000 0000 4500 004e
e0e0 4000 ee11 29c1 2065 e932 yyyy yyyy
d217 7d84 004e 2db9
An example with OpenBSD 2.8
IP Total Length Field Value Echoed is 
20 Bytes less than the Original
© 2 0 0 1     @ S T A K E ,     I N C .
30
Xprobe - Precedence Bits Issues
Each IP Datagram has an 8-bit field called the “TOS Byte”, which represents the 
IP support for prioritization and Type-of-Service handling.
The “TOS Byte” consists of three fields.
The “Precedence field”, which is 3-bit long, is intended to prioritize the IP 
Datagram. It has eight levels of prioritization.
The second field, 4 bits long, is the “Type-of-Service” field. It is intended to 
describe how the network should make tradeoffs between throughput, delay, 
reliability, and cost in routing an IP Datagram.
The last field, the “MBZ” (must be zero), is unused and must be zero. Routers 
and hosts ignore this last field. This field is 1 bit long.
MBZ
TOS
Precedence
0
3
4
5
1
2
6
7
© 2 0 0 1     @ S T A K E ,     I N C .
31
Xprobe - Precedence Bits Issues
RFC 1812 Requirements for IP Version 4 Routers:
"4.3.2.5 TOS and Precedence
ICMP Source Quench error messages, if sent at all, MUST have their IP 
Precedence field set to the same value as the IP Precedence field in the packet 
that provoked the sending of the ICMP Source Quench message. All other ICMP 
error messages (Destination Unreachable, Redirect, Time Exceeded, and 
Parameter Problem) SHOULD have their precedence value set to 6
(INTERNETWORK CONTROL) or 7 (NETWORK CONTROL). The IP Precedence 
value for these error messages MAY be settable".
Linux Kernel 2.0.x, 2.2.x, 2.4.x will act as routers and will set their Precedence 
bits field value to 0xc0 with ICMP error messages. Networking devices that will 
act the same will be Cisco routers based on IOS 11.x-12.x and Foundry 
Networks switches.
© 2 0 0 1     @ S T A K E ,     I N C .
32
Xprobe - ICMP Error Message Quoting Size
Each ICMP error message includes the IP Header and at least the first 8 
data bytes of the datagram that triggered the error (the offending datagram); 
more than 8 bytes may be sent according to RFC 1122.
Most of the operating systems will quote the offending packet's IP Header 
and the first 8 data bytes of the datagram that triggered the error. Several 
operating systems and networking devices will echo more than 8 data bytes.
Which operating systems will quote more?
Linux based on Kernel 2.0.x/2.2.x/2.4.x, Sun Solaris 2.x, HPUX 11.x, 
MacOS 7.x-9.x, Nokia FW boxes (and other OSs and several Networking 
Devices) are good examples.
© 2 0 0 1     @ S T A K E ,     I N C .
33
Xprobe - ICMP Error Message Quoting Size
An example with Linux Kernel 2.4.6
15:47:47.729742 ppp0 > x.x.x.x.47612 > y.y.y.y.32132: udp 70 (DF) (ttl 250, id 121)
4500 0062 0079 4000 fa11 c32d xxxx xxxx
yyyy yyyy b9fc 7d84 004e 0aed 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000
15:47:47.889742 ppp0  x.x.x.x: icmp: y.y.y.y udp port 32132 unreachable 
Offending pkt: x.x.x.x.47612 > y.y.y.y.32132: udp 70 (DF) (ttl 242, id 121) [tos
0xc0]  (ttl 245, id 45284)
45c0 007e b0e4 0000 f501 56f6 yyyy yyyy
xxxx xxxx 0303 ba40 0000 0000 4500 0062
0079 4000 f211 cb2d xxxx xxxx yyyy yyyy
b9fc 7d84 004e 0aed 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000 0000
0000 0000 0000 0000 0000 0000 0000
(1) Precedence Field Vale is 0xc0
UDP Header Information
(2) Data
Echoed
© 2 0 0 1     @ S T A K E ,     I N C .
34
Xprobe - Using Code Field Values Different Than Zero with 
ICMP Echo Requests
When an ICMP code field value different than zero (0) is sent with an ICMP 
Echo request message (type 8), operating systems that will answer our 
query with an ICMP Echo reply message that are based on one of the 
Microsoft based operating systems will send back an ICMP code field value 
of zero with their ICMP Echo Reply. Other operating systems (and 
networking devices) will echo back the ICMP code field value we were using 
with the ICMP Echo Request.
The Microsoft based operating systems acts in contrast to RFC 792 
guidelines which instruct the answering operating systems to only change 
the ICMP type to Echo reply (type 0), recalculate the checksums and send 
the ICMP Echo reply away.
© 2 0 0 1     @ S T A K E ,     I N C .
35
Xprobe - TOS Echoing
RFC 1349 defines the usage of the Type-of-Service field with the ICMP 
messages. It distinguishes between ICMP error messages (Destination 
Unreachable, Source Quench, Redirect, Time Exceeded, and Parameter 
Problem), ICMP query messages (Echo, Router Solicitation, Timestamp, 
Information request, Address Mask request) and ICMP reply messages (Echo 
reply, Router Advertisement, Timestamp reply, Information reply, Address Mask 
reply).
Simple rules are defined:
 An ICMP error message is always sent with the default TOS (0x0000)
 An ICMP request message may be sent with any value in the TOS field. 
 An ICMP reply message is sent with the same value in the TOS field as was 
used in the corresponding ICMP request message.
Some operating systems will ignore RFC 1349 when sending ICMP echo reply 
messages, and will not send the same value in the TOS field as was used in the 
corresponding ICMP request message.
© 2 0 0 1     @ S T A K E ,     I N C .
36
Xprobe - TOS Echoing