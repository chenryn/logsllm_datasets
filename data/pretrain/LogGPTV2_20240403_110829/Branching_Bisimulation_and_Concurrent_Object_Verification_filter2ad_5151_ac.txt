(cid:2)
(cid:3)≡1
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
IV. BRANCHING BISIMULATION FOR CONCURRENT
OBJECTS
In concurrency theory, there are various equivalence rela-
tions to represent a branching-time equivalence. Branching
bisimulation [32] reﬁnes Milner’s weak bisimulation [34] by
requiring two related states should preserve not only their own
branching structure but also the branching potentials of all
(invisibly reached) intermediate states that are passed through.
It turns out that branching bisimulation exactly captures max-
trace equivalence [32], in the sense that two state are branch-
ing bisimilar if and only if they are max-trace equivalent.
Let ==⇒ denote a sequence of zero or more τ-steps. Branch-
ing bisimulation for concurrent objects is given as follows.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:24:37 UTC from IEEE Xplore.  Restrictions apply. 
s
a−−→ s
a−−→ s
2) ∈ R.
(cid:2)
(cid:2)
2 such that s2
Deﬁnition 4.1: Let Δ = (S, −−→,A, s0) be an object system.
A symmetric relation R on S is a branching bisimulation if
for all (s1, s2) ∈ R, the following holds:
1) if s1
(cid:2)
1 where a is a visible action, then there exists
(cid:2)
(cid:2)
2 and (s
1, s
1, s2) ∈ R, or there exist l
(cid:2)
(cid:2)
τ−−→ s
1, then either (s
2) if s1
2 and (s1, l) ∈ R and
(cid:2)
(cid:2)
2 such that s2 ==⇒ l
τ−−→ s
and s
(cid:5)(cid:6)
2) ∈ R.
(cid:2)
(cid:2)
(s
1, s
(cid:2){R | R is a branching bisimulation}. Then ≈ is
Let ≈def=
the largest branching bisimulation and an equivalence relation.
States s1 and s2 are branching bisimilar, if s1 ≈ s2. Two
systems are branching bisimilar, if and only if their initial
states are branching bisimilar.
In the second clause of the above deﬁnition, for s2 ==⇒ l we
only require (s1, l) ∈ R, without mentioning the states that are
visited in s2 ==⇒ l. The following Lemma, quoted from [32]
guarantees the stuttering property of these intermediate states.
(cid:2) is a path such
Lemma 4.2: If r
(cid:5)(cid:6)
that r ≈ s and r
Thus, the second clause in Deﬁnition 4.1 can be alternatively
τ−−→ r1
(cid:2) ≈ s, then ri ≈ s for all i, 1 ≤ i ≤ m.
τ−−→ rm
τ−−→ ···
τ−−→ r
given as:
(cid:2)
τ−−→ s
1,
2. if s1
l1,··· , li,
ist
τ−−→ ···
τ−−→ li
2) ∈ R.
(cid:2)
(cid:2)
(s
1, s
1, s2) ∈ R, or
(cid:2)
(cid:2)
and s
2
then either (s
there ex-
i ≥ 0,
τ−−→ l1
2 and (s1, l1) ∈ R,··· , (s1, li) ∈ R,
(cid:2)
τ−−→ s
such that s2
s ≡ r if and only if s ≈ r.
A discussion on weak bisimulation is given in Section VII.
Theorem 4.3: For any states s and r in an object system,
(cid:5)(cid:6)
It has been shown that max-trace equivalence (≡) is an
adequate notion to capture state equivalence and recognize
the essential computation step that takes effect on method
calls. However computing max-trace equivalence for a large
system is hard. Its equivalent characterization – branching
bisimulation (≈) – provides us an efﬁcient way to verify
and analyze object systems. For ﬁnite-state systems, branch-
ing bisimulation equivalence can be checked in polynomial
time: the algorithm proposed in [13] has time complexity
O(|A| + |S| × | → |). This result has been recently improved
to O(|→|× log|A| + log|S|) in [14].
V. VERIFYING LINEARIZABILITY AND LOCK-FREEDOM
VIA BRANCHING BISIMULATION
In this section, we develop veriﬁcation methods for proving
linearizability and progress properties (e.g., lock-freedom) of
concurrent objects based on the (divergence-sensitive) branch-
ing bisimulation. In practice, the proposed methods are efﬁ-
cient and convenient for automatically verifying linearizability
and lock-free property of ﬁnite-state object systems.
A. Verifying linearizability
Given an object system Δ = (S, −−→,A, s0), for any s ∈ S,
let [s]≈ be the equivalence class of s under ≈, and S/≈=
{[s]≈|s∈ S} the set of equivalence classes under ≈.
system Δ = (S, −−→,A, s0),
Deﬁnition 5.1 (Quotient transition system): For an object
transition system
the quotient
Δ/≈ is deﬁned as: Δ/≈ = (S/≈, −−→≈,A, [s0]≈), where the
transition relation −−→≈ satisﬁes the following rules:
s α−−→ s(cid:3)
(1)
[s]≈ α−−→≈ [s(cid:3)]≈
(α (cid:3)= τ )
(2)
s τ−−→ s(cid:3)
[s]≈ τ−−→≈ [s(cid:3)]≈
((s, s(cid:3)) (cid:3)∈≈)
it
is easy to see that
Theorem 5.2: Δ/≈ preserves linearizability. That is, Δ is
linearizable if and only if Δ/≈ is linearizable.
Proof: Let Θsp be the corresponding speciﬁcation of Δ.
is also the corresponding speciﬁcation of Δ/≈.
Then it
trace(Δ) =
From Deﬁnition 4.1,
trace(Δ/≈). Thus, we have trace(Δ) ⊆ trace(Θsp)
iff
trace(Δ/≈) ⊆ trace(Θsp). By Deﬁnition 2.2, Δ (cid:7)tr Θsp iff
Δ/≈ (cid:7)tr Θsp. Further, by Theorem 2.3, it follows that Δ is
linearizable w.r.t. Θsp iff Δ/≈ is linearizable w.r.t. Θsp. (cid:5)(cid:6)
Theorem 5.3: An object system Δ with the corresponding
speciﬁcation Θsp is linearizable if and only if Δ/≈ (cid:7)tr
(cid:5)(cid:6)
Θsp/≈.
It is well-known that deciding trace inclusion is PSPACE-
complete, and non-blocking synchronization usually generates
a large number of interleavings. Hence verifying linearizability
in an automated manner by directly resorting to Theorem 2.3
is infeasible in practice. However, the branching bisimulation
quotient is usually much smaller than the object system since it
only involves a few steps that are responsible for taking effect
for the system. Further, branching bisimulation quotients can
be computed efﬁciently. Thus Theorem 5.3 provides us with
a practical solution to the linearizability veriﬁcation problem:
Given an object system Δ and a speciﬁcation Θsp,
ﬁrst compute their branching bisimulation quotients
Δ/≈ and Θsp/≈, then check Δ/≈ (cid:7)tr Θsp/≈.
In practice, this approach results in huge reductions of state
spaces. Our experimental results also validate the advantage
(c.f. Section VI). Another merit of this method is that verifying
linearizability does not rely on prior identifying LPs.
B. Verifying lock-freedom
We exploit divergence-sensitive branching bisimulation be-
tween a concrete and an abstract object to verify progress
properties of concurrent objects. The main result that we will
establish is that for divergence-sensitive branching bisimilar
abstract and concrete object programs, it sufﬁces to check
progress properties on the abstract object program.
Lock-freedom and wait-freedom are the most commonly
used progress properties in non-blocking concurrency. Infor-
mally, an object implementation is wait-free if it guarantees
that every thread can ﬁnish its started execution in a ﬁnite
number of steps, while an object implementation is lock-free
if it guarantees that some thread will complete its execution in
a ﬁnite number of steps [22]. Their formal deﬁnitions speciﬁed
using next-free LTL are given in [8], [26]. To obtain wait-free
object systems, we need to enforce some fairness assumption
on object systems to guarantee the fair scheduling of processes.
The most common fairness properties (e.g., strong and weak
fairness) can all be expressed in next-free LTL. In this section,
we focus on the veriﬁcation method of the lock-free property.
272
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:24:37 UTC from IEEE Xplore.  Restrictions apply. 
τ−−→ s2
a1−−→ s1
s
divergent iff s2 is divergent.
Lemma 5.6: For an inﬁnite τ-path ρ = s1
a2−−→ ··· such that (s, sj) ∈ R for all j > 0.
A lock-free object program implies that the entire system
always makes progress without inﬁnite τ-paths. An inﬁnite τ-
path that does not perform any return action is called divergent.
To distinguish inﬁnite sequences of internal transitions from
ﬁnite ones, we treat divergence-sensitive branching bisimu-
lation [1], [35]. Similar deﬁnitions are also called branching
bisimulation with explicit divergence (e.g., [32]).
Deﬁnition 5.4 ( [1]): Let Δ = (S, −−→,A, s0) be an object
system and R an equivalence relation on S.
• A state s ∈ S is R-divergent if there exists an inﬁnite path
• R is divergence-sensitive if for all (s1, s2) ∈ R: s1 is
(cid:5)(cid:6)
Deﬁnition 5.5: States s1 and s2 in object system Δ are
divergent-sensitive branching bisimilar, denoted s1 ≈div s2, if
there exists a divergence-sensitive branching bisimulation R
on Δ such that (s1, s2) ∈ R.
(cid:5)(cid:6)
This notion is lifted to object systems in the standard
manner, i.e., object systems Δ1 and Δ2 are divergent-sensitive
branching bisimilar whenever their initial states are related by
≈div in the disjoint union of Δ1 and Δ2.
τ−−→ ···
τ−−→ s1, we have si ≈ sj for any states si and sj on ρ.
τ−−→ sn
Proof: We prove si ≈ si+1 for (1 ≤ i < n) on ρ by showing
si ≡ si+1, i.e., for ∀k, si ≡k si+1. The proof proceeds by
induction on k. The base case of k = 1 is straightforward.
Now suppose si ≡k si+1 for (1 ≤ i < n). We prove that si
τ−−→ si+1, it
and si+1 are (k + 1)-trace equivalent. Since si
follows that any k-trace of si+1 is a k-trace of si. Therefore,
T k+1(si+1) ⊆ T k+1(si). Since ρ is a τ-loop, where si+1 can
reach si with only τ-steps and si ≡k si+1 for (1 ≤ i < n),
we have any k-trace of si is also a k-trace of si+1, that is,
T k+1(si) ⊆ T k+1(si+1). Hence si ≡ si+1. By Theorem 4.3,
si ≈ si+1.
(cid:5)(cid:6)
Lemma 5.7: Let Δ be a ﬁnite-state system. There is no
inﬁnite τ-path in the quotient Δ/≈.
(cid:5)(cid:6)
Divergence-sensitive branching bisimulation implies (next-
free) LTL and CTL∗-equivalence [1]. This also holds for
countably inﬁnite transition systems that are ﬁnitely branching.
Thus, O ≈div Θ implies the preservation of all next-free
LTL and CTL∗-formulas. Since the lock-freedom (and other
progress properties [8]) can be formulated in next-free LTL,
for abstract object Θ and concrete object O, it can be preserved
by the relation O ≈div Θ.
O, if O ≈div Θ, then Θ is lock-free iff O is lock-free.
Theorem 5.8: For the abstract object Θ and concrete object
(cid:5)(cid:6)
For a concrete object, its abstract object is a coarser-grained
concurrent implementation. The simplest abstract object pro-
gram is the concurrent speciﬁcation speciﬁed by one atomic
block. For the complicated algorithms such as listed in Table
I, the abstract program often needs more than one atomic
block. The advantage of this method is that, if an appropriate
abstract program for a concrete algorithm can be provided,
one can verify the progress on the abstract program, which
has a simpler program structure than the concrete algorithm.
However, constructing abstract programs is a manual pro-
cess. We give another method, which is based on the quotient,
to automatically check the lock-freedom of ﬁnite systems.
Theorem 5.9: Let Δ be a ﬁnite-state object system. If
Δ ≈div (Δ/≈), then Δ is lock-free iff (Δ/≈) is lock-free. (cid:5)(cid:6)
Theorem 5.9 can automatically check divergence. For the
ﬁnite-state system, if Δ (cid:9)≈div (Δ/≈), then by Lemma 5.7, the
original system Δ must have a τ-loop, which is a violation of
the lock-freedom. For the smaller quotient systems, off-the-
shelf model checking tools can be readily applied to check
properties such as lock-freedom. Particularly, the single atomic
block in the speciﬁcation Θsp corresponds to the computation
of the sequential speciﬁcation, which is always assumed to be
terminating. It is easy to see that Θsp is lock-free. Hence, if
(Δ/≈) and Θsp are trace equivalent, then (Δ/≈) is lock-free.
VI. EXPERIMENTS
A. Overview
To illustrate the effectiveness and efﬁciency of our meth-
ods based on branching bisimulation, we have conducted
experiments on 14 well-known concurrent data structures
using the Construction and Analysis of Distributed Processes
(CADP) [11] toolbox 2,
including 3 lock-free queues, 4
lists (1 lock-free, 3 lock-based), 4 (lock-free) stacks and
3 extended CAS operations, some of which are used in
the java.util.concurrent package (e.g., Michael-Scott
lock-free queue [25], Harris-Michael lock-free list [17]). The
experimental results are summarized in Table II. We found the
new bug violating lock-free property in the revised version
of the Treiber stack in [10] and validated a known bug of
HM lock-free list in [17]. To our knowledge, this is the ﬁrst
work which provides a novel and convenient way to check
the linearizability and lock-freedom of concurrent objects and
applies branching bisimulation techniques on such objects.
One important beneﬁt here is the fully automated veriﬁcation
procedure to check the correctness of a concrete object. All
experiments run on a server with a 4×12-core AMD CPU @
2.1 GHz and 192 GB memory under 64-bit Debian 7.6.
VERIFIED ALGORITHMS USING BRANCHING BISIMULATION.
TABLE II
Non-blocking concurrent data structures
Case study
1. Treiber stack [28]
2. Treiber stack+ HP [24]
3. Treiber stack+ HP [10]
4. MS lock-free queue [25]
5. DGLM queue [7]
6. CCAS [29]
7. RDCSS [15]
8. NewCompareAndSet
9-1. HM lock-free list [17]
9-2. HM lock-free list (revised)
10. HW queue [18]
11. HSY stack [37]
Linearizability
& Lock-freedom
××× Lock-freedom
××× Linearizability
××× Lock-freedom
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)