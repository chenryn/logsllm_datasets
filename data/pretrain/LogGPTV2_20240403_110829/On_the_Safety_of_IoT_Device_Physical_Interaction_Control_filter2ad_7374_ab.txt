potential risks of different inter-app interaction chains, we pro-
pose a risk evaluation method for quantifying inter-app interaction
chains according to their influences on the physical space.
There are two challenges to determine whether an inter-app
interaction chain is risky or not. First, we need a model to quantify
physical influences incurred by different intra/inter-app interac-
tions. Second, we need a baseline (i.e., benign interactions) for the
comparison with potentially risky interactions. To address these
challenges, we introduce a behavior modeling method that assigns
different physical channels with proper values, in order to calcu-
late the distance between them. Official applications or third-party
applications that have been verified/approved by platforms (e.g.,
Samsung SmartThings) provide a good reference for benign interac-
tions [13, 28]. Therefore, in our design, we use intra-app interactions
Figure 3: NLP for an application description: “Notify me
when the humidity rises above or falls below the given
threshold.”
description, we next calculate similarities of these entity keywords.
Then, we cluster similar entity keywords based on their similarities.
For example, if there is an entity keyword “lights” mentioned in
an application description, based on the keyword similarity, our
system is able to cluster it with another similar keyword “bulbs”.
The channel identification is based on the aggregation (i.e., the sum
of similarity scores) of an entity keyword’s similarity values within
a cluster. The entity keyword with the highest aggregated value
is considered as a representative keyword for the cluster. In the
end, we check each cluster’s representative keyword and remove
non-physical-channel related keywords.
We apply our approach to analyze applications descriptions of
official SmartThings applications and identify 217 entity keywords,
which are then clustered into 16 different clusters. We finally iden-
tify 7 reasonable physical channels. The results are summarized
in Table 1. For each identified physical channel, we give an exam-
ple application, its description, and the number of keywords in its
associated cluster.
4.3 Interaction Chain Discovery
Based on the intra-app interactions and physical channels identi-
fied in above steps, our system further discovers inter-app interac-
tion chains.
System Channel Identification. In addition to physical chan-
4.3.1
nels, we observe that there are several system channels (in the
Samsung SmartThings platform) that can be used to stitch differ-
ent intra-app interactions. These system channels can be shared
by multiple applications on the same platform. For the purpose
of completeness, we also consider these shared system channels
in our inter-app interaction chain discovery. During the intra-app
interaction analysis, if a non-physical-channel capability is used
as a trigger in one intra-app interaction and as an action in an-
other one, we consider it as a shared system variable. We identify 4
such system channels and their related capabilities in the Samsung
SmartThings platform, including time, locationMode, switch, and
lock. Same as physical channels, we treat these system channels as
connections between intra-app interactions in our analysis.
Inter-app Interaction Chain Discovery. We use a 2-element
4.3.2
tuple (trigger, action) to represent the trigger-action behavior of an
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada835Algorithm 1: Algorithm for Interaction Chain Discovery
Input: APtr,ac, sets of intra-app interactions
Cca,ch, sets of capabilities and their related
physical channels.
Sca, sets of capabilities and their related
system channels.
Output: I NT AC, sets of discovered interactions
1 foreach i ∈ APtr,ac do
2
3
foreach j ∈ APtr,ac do
if i ==j then
4
5
6
7
8
9
10
11
/* Two intra-interactions are same
continue
foreach k ∈ C do
foreach m ∈ C do
*/
/* First identify capabilities of the
*/
action and trigger
/* Then check whether their related
channels are same
if i.ac == k.ca & j.tr == m.ca & k.ch ==
m.ch ∈ j then
/* Add a physical
I NT AC ← {i, k.ch, j}
interaction chain
foreach n ∈ S do
/* Same process for
system channels
I NT AC ← {i, n, j}
if i.ac == n & j.tr == n then
*/
*/
*/
of trustworthy applications as the baseline to measure potential
risks imposed by inter-app interaction chains. Our basic idea is
that if an interaction is not in the baseline, it is likely a risky one.
More specifically, trustworthy intra-app interactions are consid-
ered as safe interaction behaviors in our method. Then, we use
the K-means [8] clustering to cluster all intra-app interactions to
obtain the baseline. Finally, we are able to calculate risk scores of
suspicious inter-app interaction chains based on the baseline. We
further propose a method for risk mitigation, which can effectively
reduce the number of risky inter-app interaction chains.
4.4.1 Behavior Modeling. For an intra-app interaction, we use the
channel tuple to represent its trigger and action related channel
information. Since an inter-app interaction chain involves multi-
ple intra-app interactions and related channels, we use vectors to
represent both inter-app and intra-app interaction behaviors. Each
vector consists of all available physical/system channels, where
each dimension/element in the vector corresponds to one chan-
nel, and the element’s value represents the channel’s status (i.e.,
whether the channel is used, and whether it is used as a trigger or
action). For instance, in our prototype implementation based on
the Samsung SmartThings platform, we identify totally 7 physical
channels, including temperature, humidity, water, smoke, illumina-
tion, motion, and presence, and 4 system channels, including switch,
lock, time, and locationMode. In this case, we use an 11-dimensional
vector to represent an interaction behavior instance.
The modeling process is summarized as follows and the first
three steps are illustrated in Figure 4.
(a) Channel Tuple Frequency Analysis: We first extract intra-app
trigger-action interactions and channel information from
applications. To analyze the risk of interactions, we first
map intra-app interactions to channel tuples based on the
physical influences of their triggers and actions, respectively.
We count the occurrence of a specific channel tuple out of
all channel tuples as its frequency.
(b) Channel Value Assignment: Given the channel tuple frequency
information, we assign values to different physical channels
in a recursive manner, starting from the most frequently used
channel. The difference in values reflects the correlations
between physical channels. Note that the value assignment
methods are different for physical and system channels.
(c) Vector Value Assignment: Based on the related channels and
channels’ values, all interactions can be mapped into a high-
dimensional vector. Each dimension represents one channel,
and the corresponding value represents its behavior (i.e.,
either a trigger or an action on this channel).
(d) Similarity Calculation: The similarity between interactions
is calculated based on the distance between corresponding
vectors. We measure the risk levels of inter-app interactions
by measuring the distances from them to the closest base-
line cluster.
Our model captures the difference between channels in terms
of the frequency of their co-occurrence in trustworthy intra-app in-
teractions. For example, in our experiment, we observe that the
temperature channel and the humidity channel more frequently
appear together in the baseline interactions than the temperature
channel and the motion channel. Therefore, according to our model,
the difference between the temperature channel and the humidity
channel should be smaller than the difference between the temper-
ature channel and the motion channel.
Value Assignment to Physical Channels: We use the chan-
nel tuple (CT , CA) to represent each intra-app interaction, where CT
is the channel related to the trigger capability, and CA denotes the
channel related to the action capability. For example, considering a
motionSensor capability as a trigger and a bulb switch capability as
an action, the corresponding channel tuple is (motion, illuminance).
To assign an initial value to each channel in an interaction behav-
ior vector, we count the frequencies of all channel tuples in the
baseline (i.e., all trustworthy intra-app interactions) as illustrated in
Figure 4 (a). The procedure of the value assignment starts from the
channel with the highest frequency in all tuples, where we assign
an initial value K (K can be an arbitrary value) to the first channel.
Then, we assign a value to the next channel, which has the highest
co-occurrence with the first assigned channel in all channel tuples.
We define a step length, denoted by λ. The next value to be assigned
is always increased by λ for each value assignment. For example,
the second assigned value will be K + λ. This process is repeated
until all channels have been assigned with values.
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada836Figure 4: An Example of Behavior Modeling
Figure 4 (b) shows an example of channel value assignment with
respect to 5 physical channels and 1 system channel. The number
besides to each channel tuple in Figure 4 (a) indicates its overall fre-
quency in intra-app interactions. In this example, the temperature
channel has the highest frequency 17 (i.e., it appears totally 17 times
in all channel tuples). Thus, we choose it as the beginning channel
and assign an initial value K (e.g., K=15) to this channel. We assign
the next value (K+λ = 30) to the humidity channel, since it has the
highest co-occurrence with the temperature channel (i.e., appears
with the temperature channel most frequently in all channel tuples).
Similarly, the third iteration assigns the presence channel value
to (K+2λ = 45). By repeating this process, we assign values to all
channels as shown in Figure 4 (b).
Value Assignment to System Channels: The physical impact
of a system channel is hard to measure based on its co-occurrence
frequency with a physical channel. A system channel may influ-
ence multiple devices, e.g., the locationMode system channel can
change the status of thermostats, lights, or heaters. Then, the sta-
tus changes of these devices further influence their corresponding
physical channels. As a result, a system channel may be indirectly
related to multiple physical channels. In our design, for value as-
signment to a system channel, we consider all its related physical
channels where its value is assigned to be the sum of all associated
physical channels’ values. For example, assume the locationMode
influences temperature and motion channels. The temperature chan-
nel’s value is 15, and the motion channel’s value is 75. In this case,
locationMode’s value is assigned to 90.
Value Assignment to Interaction Behavior Vector: Given
assigned values of individual channels, we are able to quantify
interaction behavior vectors. Note that a channel can be either a
trigger capability or action capability in a channel tuple (CT , CA).
To distinguish them in a behavior vector, as long as a channel is
associated with any trigger capability, we multiply a co-efficient
“−1” with its channel value.
We illustrate our vector-based modeling approach using a 6-
dimensional vector, including temperature, humidity, presence, illu-
minance, motion, and locationMode, as shown in Figure 4 (b). For
the channel value assignment, assume the temperature channel is
first assigned to 15, the humidity channel is assigned to 30, the illu-
minance channel is assigned to 60, and the motion is assigned to 75
(the step length is 15). The structure of the vector is shown as (tem-
perature, humidity, presence, illuminance, motion, locationMode).
Suppose there are three different interaction tuples (and each tuple
corresponds to one vector) in the baseline benign interactions: A1
(temperatureSensor -> humidifier), A2 (humiditySensor, thermo-
stat), A3 (motionSensor -> bulb). P1 represents an interaction that a
temperature sensor detects temperature changes and then turns on
a humidifier, which leads to changes in humidity. In this example,
since the temperature channel is also used as trigger capability, the
value of the temperature dimension is set to -10 in the vector value
assignment. In Figure 4 (c), the vector value of A1 is (-15, 30, 0, 0,
0, 0), where “0” indicates that the channel is not involved in A1.
Because the humidity in A2 is trigger condition, the vector of A2
is assigned as (15, -30, 0, 0, 0, 0). A3 indicates an interaction that a
motion sensor detects a user’ movement and then turns on a light.
In this example, the value of motion dimension is assigned as -75,
because it is a trigger condition. The vector value of A3 is assigned
to (0, 0, 0, 60, -75, 0).
For inter-app interaction chains, we combine the values of intra-
app interaction vectors. For the bridging channels between intra-
app interactions, we treat them as a combination of trigger condi-
tions, all of which multiply a negative coefficient in vector value
assignment. We keep all the trigger conditions rather than only the
first trigger and last action in the vector because bridging channels
represent different paths of inter-app interaction chains. For exam-
ple, assume we have two interaction chains C1 (motionSensor ->
thermostat -> window.open) and C2 (motionSensor -> smokeSensor
-> window.open). C1 and C2 have the same trigger and action, but
medium channels are different, which results in different risk level
for these chains. If we only keep the beginning trigger and final
action for the inter-app interaction chain vectors, we could not
distinguish those two different inter-app interactions’ trigger paths.
Similarity Calculation: There are many existing approaches,
such as Manhattan Distance [10], Minkowski Distance [9], and
Euclidean Distance [6], using distance for similarity calculation. In
our system, we also use distance to measure the similarity between
vectors. The shorter the distance is between two vectors, the higher
similarity is between the corresponding interactions. For simplicity,
we use Manhattan Distance in our similarity calculation. Other
distance metrics can be also applied to measure the similarity.
4.4.2 Risk Evaluation. We leverage the intra-app interactions of
trustworthy applications as the baseline to evaluate the risk of an
inter-app interaction chain. First, we cluster all baseline intra-app
interactions by using the K-means algorithm [8]. The largest dis-
tance between each cluster’s center and its boundary is considered
as the cluster radius. If a testing interaction behavior vector does
not belong to any known (trusted) cluster, we mark it as a risky
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada837related status. This can potentially prevent vulnerable applications
from being maliciously triggered by unexpected applications. For
application developers who can modify an application, IoTMon
provides recommendations to guide them in reducing the risks of
unexpected inter-app interactions. For normal users, IoTMon is
able to give them risk warnings.
Revisiting the example in Figure 1, an enhanced application
model is shown in Listing 2. The second trigger condition (high-
lighted with the gray background in Listing 2) can be added into
the application. The condition means that a presence sensor must
detect a person being at home before the temperature control appli-
cation can open the window. Hence, the heater control application
cannot directly open the windows without satisfying the added
condition.
Listing 2: Window.Open Trigger Enhancement
 threshold >
If (trigger1) && (trigger2) == true Then
1
2
3
4
5
6
5 EVALUATION
In this section, we evaluate the effectiveness and efficiency of our
IoTMon design from multiple aspects. We implement a proof-of-
concept IoTMon system based on the Samsung SmartThings plat-
form. We study totally 185 official SmartThings applications [17].
Our evaluation aims to answer the following questions:
• Whether all the 185 SmartThings applications follow the
IFTTT programing paradigm? Can we always extract trigger-
action relationships from them? Whether our application
analysis tool can successfully extract trigger-action con-
trol dependency information and discover physical chan-
nels? (§5.1)
• How many inter-app interaction chains are found in our
analysis? What is the most commonly used physical chan-
nel? (§5.2)
• Can IoTMon effectively detect high-risk interaction chains?
In our interaction behavior modeling, we assign values to
individual channels and interaction vectors. What are the im-
pacts of different value assignment schemes on the risk eval-
uation? (§5.3)
• What is the performance overhead of IoTMon system? (§5.4)
5.1 Application Analysis
Intra-app Analysis: Among the total 185 SmartThings applica-
tions, we successfully extract trigger-action relationship informa-
tion from 135 applications. For the rest 50 applications, 15 of them
follow the IFTTT programing paradigm, but claim too many capabil-
ities. Over-claimed capabilities would generate excessive intra-app
interactions and make our risk analysis inaccurate. Therefore, we
exclude these applications. Other 35 applications are either device
drivers (e.g., “Bose soundtouch connect”, “Life360 (Connect)”, and
Figure 5: An Example of Risk Evaluation
interaction. In addition, the risk score is calculated based on the
distance between the testing inter-app interaction and the closest
trusted cluster’s boundary.
Let Di (i=1,2,...,n) denote the ith cluster that contains a set of
trustworthy intra-app interaction vectors in our baseline. We have n
clusters in total. Let Ci (i=1,2,...,n) denote the center point of cluster
Di. Ti (i=1,2,...) is a vector of inter-app interaction chain to be tested
(i.e., testing vector). Our risk evaluation process is described as
follows:
Baseline Generation: First, we use K-means to cluster all trust-
worthy applications’ interactions. We set the number K empirically,
which equals the sum of all channels. As shown in Figure 5, A1 and
A2 are two trustworthy interactions in cluster D1. The radius of
cluster Ci is denoted by RCi. For example, the distance between
C1 and A2 is the radius of D1 in Figure 5. Given a testing vector Ti,
let PositionT i denote Ti’s position in the high-dimensional feature
space of our K-means clustering. PositionCi denotes the position
of cluster Di’s center point in the high-dimensional space. If the
distance between PositionT i and PositionCi is larger than RCi, we
say Ti do not belong to Di.
Risk Score: For a testing vector Ti, the risk score is calculated
min{|PositionT i − PositionCi| − RCi}, (i = 1, ..., n)
i f Ti does not belonд to any cluster
as follows:
RiskScore =
0, otherwise
(1)
If Ti belongs to any cluster Di (i=1,...,n), the risk score is set to 0
(i.e., normal case). Otherwise, it is considered as a risky case, and
its risk score is set to min{|PositionT i − PositionCi − RCi|}, which
denotes the closest distance between PositionT i and any cluster
boundary in the baseline. We use the cluster boundary rather than
the cluster center for calculating risk score. For example, in Figure 5,
suppose T1, T2, and T3 are three testing vectors. The closest cluster
center to T1 is C1, and the closest cluster center to T2 is C2. The
risk score of T3 is zero, since it locates within cluster D1. The risk
score of T1 is equal to the distance between T1 and A2, which is
(PT 1 − PC1 − RC1). Because T2 is closer to the boundary of cluster
D2, the risk score of T2 is (PT 2 − PC2 − RC2).
4.4.3 Risk Mitigation. We present a general risk mitigation method
in IoTMon, which is flexible with respect to different scenarios. The
key idea is to reduce the risks of unexpected inter-app interaction
chains by adding new trigger conditions, e.g., checking an additional
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada838Applications