# A Framework for Evaluating Software on Reduced Margins Hardware

## Authors
Konstantinos Parasyris, Panos K. Koutsovasilis, Vassilis Vassiliadis, Christos D. Antonopoulos, Nikolaos Bellas, Spyros Lalis  
Department of Electrical and Computer Engineering, University of Thessaly  
Email: {koparasy, pkoutsovasilis, vasiliad, cda, nbellas, lalis}@uth.gr

## Abstract
To improve power efficiency, researchers are experimenting with dynamically adjusting the voltage and frequency margins of systems to just above the minimum required for reliable operation. Traditionally, manufacturers did not allow reducing these margins. Consequently, existing studies use system simulators or software fault-injection methodologies, which are slow, inaccurate, and cannot be applied to realistic workloads. However, recent CPUs now allow operation outside the nominal voltage/frequency envelope. We present eXtended Margins eXperiment Manager (XM2), which enables the evaluation of software on systems operating outside their nominal margins. XM2 supports both bare-metal and OS-controlled execution using an API to control the fault injection procedure and provides automatic management of experimental campaigns. On average, XM2 requires 5.6% extra lines of code and increases the application execution time by 2.5%. To demonstrate the flexibility of XM2, we perform three case studies: two employing bare-metal execution on a Raspberry Pi, and one featuring a full-fledged software stack (including OS) on an Intel Skylake Xeon processor.

## 1. Introduction
As technology feature size scales and transistor variability increases, chip manufacturers resort to extra provisioning in terms of increased voltage margins and reduced operating frequency to guarantee correct CPU operation even under the worst possible combination of operating conditions. However, such voltage and frequency guardbanding also leads to significant power and energy overheads.

To address this problem, researchers have been investigating a variety of undervolting and overclocking techniques for statically or dynamically shaving off excessive margins. The effects on system reliability are typically modeled using system fault simulators or by injecting faults (such as bit flips) at the application level during execution. These approaches have two major drawbacks:
1. System simulators are slow and have a limited capability for executing large workloads with realistic input sets.
2. Timing errors caused by undervolting/overclocking are difficult to model analytically and are extremely sensitive to a large number of parameters, such as the number and distribution of paths in a CPU, the micro-architectural design of the CPU, the contents of the instruction and data streams, the manufacturing process, and even the ambient temperature.

The rest of the document is structured as follows: Section II describes the requirements to enable the functionality of XM2. Section III outlines the user interface, and Section IV the design and implementation of our tool. Section V presents, evaluates, and discusses the usability of XM2. Section VI presents the case studies. Section VII gives an overview of related work. Finally, Section VIII concludes the paper.

## 2. Platform Requirements
In modern CPUs, there are different sources of unreliability, which can be categorized according to the transient or permanent nature of the resulting errors. Transient errors may be induced in an attempt to improve energy efficiency or performance by explicitly setting the supply voltage or the operating CPU frequency outside the manufacturer-defined working envelope. Scaling the supply voltage below and increasing CPU frequency above nominal values is referred to as undervolting and overclocking, respectively. Figure 1 illustrates the configuration space.

### 2.1 Hardware Support
The hardware must provide support for controlling and scaling the system operating point (voltage, frequency) beyond the normal working envelope. Modern Intel x86-64 CPUs offer such capabilities, starting from the Haswell family, through the programmable Fully Integrated Voltage Regulator (FIVR). Several processors based on ARM architectures offer similar functionality. The AppliedMicro X-Gene 2 chip does so through the SLIMpro management processor included in the chip. The ARM Cortex A53 processor in Raspberry Pi 3b boards can be set to operate in non-nominal conditions via a configuration file.

### 2.2 Compiler Support
Every application using XM2 must be linked with a thin library used to notify external systems about the execution status of the application. It also manages the application and supports data exchange with external systems. The library exploits the common function attributes constructor and destructor provided by the GCC compiler.

### 2.3 Connectivity
We assume that the target (tested) system can support TCP connections to other systems. These are used to orchestrate the execution campaign, supply input data, and collect results of the computation from the target system.

### 2.4 Remote Reset Support
When operating at extended configurations, errors leading to full system failure are likely. Therefore, the target system needs to offer a hardware interface for a full/clean reset.

## 3. Tool Design and Configuration
An experimental characterization campaign on top of unreliable hardware typically involves the execution of multiple experiments under the same configuration (in terms of the underlying hardware, its voltage/frequency configuration, the input set of the application, etc.). After each experiment terminates, its results are checked and classified, depending on potential effects of faults. This experimental procedure continues until the number of experiments is sufficient to provide statistically significant results.

### 3.1 System Architecture
Figure 2 presents a high-level overview of XM2. It is structured in a distributed way, comprising a single monitoring system and one or more target systems of the same hardware architecture. The monitoring system deploys a Master daemon, which spawns a Coordinator thread for each target system. Every target system spawns a Slave daemon, which receives commands from the Coordinator and orchestrates the experimental campaign locally, through the library that manages/invokes the application.

### 3.2 Configuration File
We employ a configuration file (expConf) that allows the user to define an experimental campaign. The user defines the following parameters:
- **Target Application**: An absolute path to the binary file to be executed on the target system.
- **Target System**: The Internet Protocol (IP) or Media Access Control (MAC) addresses of the target system(s).
- **Input File**: Input of the application to be executed on the target system(s). XM2 supports only a single input file per application. If the application requires multiple inputs, they need to be combined into one file by the user.
- **Operating Configuration**: The voltage and frequency settings for the reliable (Nominal) and unreliable (unRel) configuration of the target system. Applying aggressive overclocking or undervolting settings increases the frequency of errors. Notably, the user can change simultaneously both the frequency and the supply voltage in the unRel configuration.
- **Result Classification**: XM2 comes with a default classifier, which characterizes the outcome of each experiment as:
  - **Exact**: if the result is identical to that of a nominal execution.
  - **SDC (Silent Data Corruption)**: if the result differs from that of a nominal execution.
  - **Data Abort**: if the CPU raised a data abort trap due to accessing a non-existent physical memory address.
  - **Illegal Instruction**: if the CPU raised a trap because it detected a non-existent opcode.
  - **CPU Crash**: if the execution time exceeds, by far, the time of a nominal execution.
- **Nominal Experiments**: The user defines the number of experiments to be performed by XM2 in the Nominal setting. These experiments are used to profile the execution time of the application and to obtain the error-free (golden) output files.
- **Termination Criteria**: The user may define a custom binary which is used by XM2 to determine when to terminate a campaign. The default termination checker terminates a campaign simply when reaching a predefined number of experiments, which can be set by the user via the expConf file.

### 3.3 Run-time Library API
The run-time library that accompanies XM2 offers an API that enables the application to control data exchange with the Coordinator. Table I lists the primitives of the API.

| Function | Description |
| --- | --- |
| `void readInput(void *ptr, size_t sz, size_t nmemb)` | Receives `nmemb * sz` bytes from the input file available at the Coordinator filesystem and stores them to the memory region pointed to by `ptr`. |
| `void writeOutput(void *ptr, size_t sz, size_t nmemb)` | Sends `nmemb * sz` bytes from the memory region pointed to by `ptr` to the Coordinator. |
| `void switchToRel()` | Switch to Nominal state. The implementation of the function is architecture-dependent. It is blocking â€“ the Slave daemon needs to acknowledge the state switch to the Coordinator. |
| `void switchToUnRel()` | Switch to unRel state. Similar semantics as `switchToRel()`. |

### 3.4 Example
Listing 1 provides an example of the expConf configuration file. The file initially assigns a name to the target system and specifies it using its IP and MAC address. In this example, there are two target systems (PC A, PC B). The specified Nominal operating point is used by XM2 to compute error-free outputs (golden) as well as to determine the normal execution time of the application for each target system. The configuration file also includes a list of unRel configurations. A separate experimental campaign will be executed for each of those configurations.

```json
{
  "TargetSystem": [
    {
      "idName": "PC A",
      "IPAddress": "10.0.0.1",
      "MACAddress": "AA:BB:CC:DD:EE:FF",
      "Nominal": [1.2, 1200],
      "unRel": [[1.2, 1320], [1.2, 1330], [1.0, 1320]]
    },
    {
      "idName": "PC B",
      "IPAddress": "10.0.0.2",
      "MACAddress": "AA:BB:CC:DD:EE:FE",
      "Nominal": [1.2, 1200],
      "unRel": [[1.2, 1320], [1.2, 1330], [1.0, 1320]]
    }
  ],
  "Application": {
    "Path": ["pathToExecutable", "Monitor"],
    "InputFiles": [["pathToInput", 262144, "Monitor"]],
    "Classifier": "/path/to/psnr.exe",
    "Termination": {"default": 500},
    "NominalExp": 10
  }
}
```

Listing 2 outlines the modified source code of a mini-application implementing a Sobel filter. Lines 4, 5, 7, and 8 contain function calls to the run-time library of our tool.

```c
#include <xm2.h>

void sobel(unsigned char* in, unsigned char* out);

int main(int argc, char* argv[]) {
  unsigned char in[SIZE], out[SIZE];
  readInput(in, sizeof(char), SIZE);
  switchToUnRel();
  sobel(in, out);
  switchToRel();
  writeOutput(out, sizeof(char), SIZE);
  return 0;
}
```

Finally, Listing 3 outlines a classifier which categorizes experiments as Exact, Acceptable, or SDC. Exact experiments are those that produce a bit-wise exact copy of the result of the error-free execution. Acceptable experiments produce outputs with a PSNR higher than 50.0 dB in comparison with a golden output. All other experiments are categorized as SDC. Note that the classifier is not invoked if the application terminates abruptly due to a runtime error or a crash. In this case, the framework automatically classifies the experiment as CPU Crash, Illegal Instruction, or Data Abort.

```c
#include <math.h>
#include <stdio.h>

float PSNR(unsigned char* gld, unsigned char* tst);

int main(int argc, char* argv[]) {
  float res = PSNR(gold, test);
  if (isinf(res) & 1) {
    printf("Exact\n");
  } else if (res > 50.0) {
    printf("Acceptable %f\n", res);
  } else {
    printf("SDC %f\n", res);
  }
  return 0;
}
```

## 4. Flow of a Fault Injection Campaign
The run-time library that accompanies XM2 needs to be linked with the target application. It offers an API that enables the application to control data exchange with the Coordinator. Figure 3 illustrates a simplified timeline of a fault injection campaign controlled by our tool.

1. **Initialization**:
   - The user provides the expConf file to the Master Daemon.
   - The daemon creates a new database and spawns a Coordinator thread for each of the target systems.
   - The Coordinator connects to the respective Slave daemon on the target system using the TCP protocol and transfers the Nominal configuration, the application binary, and inputs to the target system.

2. **Nominal Experiments**:
   - The Slave daemon performs the Nominal number of experiments as specified in the expConf (without transitioning to the unRel state).
   - The purpose of this step is to produce error-free golden outputs as well as to profile the time required to execute the application under nominal conditions.
   - The golden file is used by the classifier for comparison against the outputs of unreliably executed code.

3. **Experimental Campaigns**:
   - The Coordinator sends the configuration parameters of the unRel state to the Slave.
   - The Slave then spawns the application. Any requests to read input data by the application using the XM2 library are handled.
   - The application transitions to the unRel state, and the experiment continues.
   - Upon completion, the application switches back to the Nominal state, and the output is sent to the Coordinator for classification.

## 5. Conclusion
eXtended Margins eXperiment Manager (XM2) is a versatile framework for evaluating software on systems operating outside their nominal voltage and frequency margins. It supports both bare-metal and OS-controlled execution, providing an API for fault injection and automatic management of experimental campaigns. XM2 has been demonstrated through case studies on both ARM and x86-64 platforms, showcasing its flexibility and effectiveness in studying the resilience of software and hardware under reduced margins.

---

This optimized version of the text is more structured, clear, and professional, making it easier to follow and understand.