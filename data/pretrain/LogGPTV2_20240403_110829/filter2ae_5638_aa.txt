## 前言
前几天打了`HackTM CTF`，遇到了这样一道在`glibc
2.29`下的文件利用的新型题目，虽然是用了更新的glibc，但是`glibc2.29`的一个新特性使得解决方法比低版本的glibc文件利用更简单了一些，这里同大家分享一下。
## HackTM CTF 2020->trip_to_trick
### 程序分析
文件为64位程序，保护全开，逻辑很简单，开头的`gift`输出了`system`函数的libc地址，在给定libc的条件下我们可以根据其在libc中的偏移计算得到libc基地址。之后有两次地址任意写的机会，最后关闭了`stdout`、`stdin`以及`stderr`。
在程序的开头有一个`nohack`函数，可以看到出题人调用`mprotect`把从`&stdout[10]._IO_write_end`开始的0x700字节设置为了只读，避免我们修改其中的值，这块区域我们动态调试看下，发现其内容是很多形如`_IO*_jumps`的`vtable`，也就是让这些`vtable`只读不可写。
    int nohack()
    {
      if ( ((_WORD)stdout + 0x8A0) & 0xFFF )
      {
        puts("mprotect error");
        exit(1);
      }
      return mprotect(&stdout[10]._IO_write_end, 0x700uLL, 1);// 可读
    }
    gdb-peda$ p & _IO_2_1_stdout_
    $6 = (struct _IO_FILE_plus *) 0x7ffff7f6c760 
    gdb-peda$ x/8gx 0x7ffff7f6c760+0x8a0
    0x7ffff7f6d000 :      0x00007ffff7e19940      0x0000000000000000
    0x7ffff7f6d010: 0x0000000000000000      0x0000000000000000
    0x7ffff7f6d020 :       0x0000000000000000      0x0000000000000000
    0x7ffff7f6d030 :    0x00007ffff7e15ff0      0x00007ffff7e10140
    gdb-peda$ vmmap 0x7ffff7f6d000
    Start              End                Perm      Name
    0x00007ffff7f6d000 0x00007ffff7f6e000 r--p      /usr/lib/x86_64-linux-gnu/libc-2.29.so
此外程序开了沙箱，其规则如下，给`open/read/write/mmap/mprotect/brk/rt_sigreturn/exitexit_group`这些系统调用开了白名单，其余一律禁掉。
    wz@wz-virtual-machine:~/Desktop/CTF/BitsCTF/trip_to_trick1$ seccomp-tools dump ./trip_to_trick 
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x0e 0xc000003e  if (A != ARCH_X86_64) goto 0016
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A  "", 
        _IO_read_end = 0x7ffff7f6c7e3  "", 
        _IO_read_base = 0x7ffff7f6c7e3  "", 
        _IO_write_base = 0x7ffff7f6c7e3  "", 
        _IO_write_ptr = 0x7ffff7f6c7e3  "", 
        _IO_write_end = 0x7ffff7f6c7e3  "", 
        _IO_buf_base = 0x7ffff7f6c7e3  "", 
        _IO_buf_end = 0x7ffff7f6c7e4  "", 
        _IO_save_base = 0x0, 
        _IO_backup_base = 0x0, 
        _IO_save_end = 0x0, 
        _markers = 0x0, 
        _chain = 0x7ffff7f6ba00 , 
        _fileno = 0x1, 
        _flags2 = 0x0, 
        _old_offset = 0xffffffffffffffff, 
        _cur_column = 0x0, 
        _vtable_offset = 0x0, 
        _shortbuf = "", 
        _lock = 0x7ffff7f6e580 , 
        _offset = 0xffffffffffffffff, 
        _codecvt = 0x0, 
        _wide_data = 0x7ffff7f6b8c0 , 
        _freeres_list = 0x0, 
        _freeres_buf = 0x0, 
        __pad5 = 0x0, 
        _mode = 0xffffffff, 
        _unused2 = '\000' 
      }, 
      vtable = 0x7ffff7f6d560 
    }
那么我们先分析一下`fclose`的源码，其核心函数是位于`/libio/iofclose.c`的`_IO_new_fclose`函数，其大致流程是：首先检查文件结构体指针，之后使用`_IO_un_link`将文件结构体从`_IO_list_all`链表取下，`_IO_file_close_it`会最终调用系统调用关闭文件描述符，之后调用`_IO_FINISH(fp)`，如果并非`stdin/stdout/stderr`最后调用`free(fp)`释放结构体指针。关于`fclose`等函数的详细分析可以参见[raycp](https://xz.aliyun.com/t/5445)
    int
    _IO_new_fclose (FILE *fp)
    {
      int status;
      CHECK_FILE(fp, EOF);
    #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)
      /* We desperately try to help programs which are using streams in a
         strange way and mix old and new functions.  Detect old streams
         here.  */
      if (_IO_vtable_offset (fp) != 0)
        return _IO_old_fclose (fp);
    #endif
      /* First unlink the stream.  */
      if (fp->_flags & _IO_IS_FILEBUF)
        _IO_un_link ((struct _IO_FILE_plus *) fp);
      _IO_acquire_lock (fp);
      if (fp->_flags & _IO_IS_FILEBUF)
        status = _IO_file_close_it (fp);
      else
        status = fp->_flags & _IO_ERR_SEEN ? -1 : 0;
      _IO_release_lock (fp);
      _IO_FINISH (fp);
      if (fp->_mode > 0)
        {
          /* This stream has a wide orientation.  This means we have to free
         the conversion functions.  */
          struct _IO_codecvt *cc = fp->_codecvt;
          __libc_lock_lock (__gconv_lock);
          __gconv_release_step (cc->__cd_in.__cd.__steps);
          __gconv_release_step (cc->__cd_out.__cd.__steps);
          __libc_lock_unlock (__gconv_lock);
        }
      else
        {
          if (_IO_have_backup (fp))
        _IO_free_backup_area (fp);
        }
      if (fp != _IO_stdin && fp != _IO_stdout && fp != _IO_stderr)
        {
          fp->_flags = 0;
          free(fp);
        }
      return status;
    }
看一下这里的`_IO_FINISH`，会发现是一个宏，其实际上是`vtable`的函数指针
    /* The 'finish' function does any final cleaning up of an _IO_FILE object.
       It does not delete (free) it, but does everything else to finalize it.
       It matches the streambuf::~streambuf virtual destructor.  */
    typedef void (*_IO_finish_t) (FILE *, int); /* finalize */
    #define _IO_FINISH(FP) JUMP1 (__finish, FP, 0)
    #define _IO_WFINISH(FP) WJUMP1 (__finish, FP, 0)
    struct _IO_jump_t
    {
        JUMP_FIELD(size_t, __dummy);
        JUMP_FIELD(size_t, __dummy2);
        JUMP_FIELD(_IO_finish_t, __finish);
        JUMP_FIELD(_IO_overflow_t, __overflow);
        JUMP_FIELD(_IO_underflow_t, __underflow);
        JUMP_FIELD(_IO_underflow_t, __uflow);
        JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
        /* showmany */
        JUMP_FIELD(_IO_xsputn_t, __xsputn);
        JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
        JUMP_FIELD(_IO_seekoff_t, __seekoff);
        JUMP_FIELD(_IO_seekpos_t, __seekpos);
        JUMP_FIELD(_IO_setbuf_t, __setbuf);
        JUMP_FIELD(_IO_sync_t, __sync);