        DWORD   BaseOfData;  
        DWORD   ImageBase;  
        DWORD   SectionAlignment;  
        DWORD   FileAlignment;  
        WORD    MajorOperatingSystemVersion;  
        WORD    MinorOperatingSystemVersion;  
        WORD    MajorImageVersion;  
        WORD    MinorImageVersion;  
        WORD    MajorSubsystemVersion;  
        WORD    MinorSubsystemVersion;  
        DWORD   Win32VersionValue;  
        DWORD   SizeOfImage;  
        DWORD   SizeOfHeaders;  
        DWORD   CheckSum;  
        WORD    Subsystem;  
        WORD    DllCharacteristics;  
        DWORD   SizeOfStackReserve;  
        DWORD   SizeOfStackCommit;  
        DWORD   SizeOfHeapReserve;  
        DWORD   SizeOfHeapCommit;  
        DWORD   LoaderFlags;  
        DWORD   NumberOfRvaAndSizes;  
        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  
    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
  * Magic代表拓展头的类型，0x10b是32位的，0x20b是64位的。
  * MajorLinkerVersion和MinorLinkerVersion是链接器版本的高位和低位
  * SizeOfCode为代码段的总的大小
  * SizeOfInitializedData是初始化了的数据的大小
  * SizeOfUninitializedData是未初始化的数据的大小
  * AddressOfEntryPoint是程序的入口点的RVA，当然这里要说明，不同的编译器编译出来的入口点千差万别，可千万不要以为这就是main函数了
  * BaseOfCode为代码段的起始地址
  * BaseOfData为数据段的起始地址
  * ImageBase是加载的推荐基地址，前面我们在重定位表中提到过了
  * SectionAlignment，节对齐，假如这个值是0x1000，那么每个节的起始地址的低12位都为0。如果做过pwn的同学应该很熟悉
  * FileAlignment，节在文件中的对齐，由于PE从文件到内存可以看作是一个放大的过程，所以SectionAlignment的值是一定要大于FileAlignment
  * MajorOperatingSystemVersion&&MinorOperatingSystemVersion，操作系统的版本号，和上面的链接器一样，是高位和地位
  * MajorImageVersion、MinorImageVersion，pe的版本号，是开发者自己制定的
  * MajorSubsystemVersion、MinorSubsystemVersion，子系统的版本号，所谓的子系统可以看作是Windows为了兼容某些程序而特意准备的虚拟环境，在64位的Windows上使用32程序实际上就是用了WOW64（Windows-on-Windows 64-bit）的子系统
  * Win32VersionValue，保留的标志位，必须为0
  * SizeOfImage，pe占用虚拟内存的大小
  * SizeOfHeaders，所有头的大小，上面我们在修改Dos Stub的时候实际上修改过了
  * CheckSum，映象文件的校验和，我们在《Windows调试艺术——断点和反调试》中用到了相似的技巧来检测是否有断点指令0xcc，而在这实际上就是看看文件有没有被篡改过
  * Subsystem，指定的子系统，上面说过了
  * DllCharacteristics，dll文件的属性，非常复杂，现阶段不需要了解
  * SizeOfStackReserve，线程的栈的保留内存的大小
  * SizeOfStackCommit，线程的栈的占用内存的大小
  * SizeOfHeapReserve&&SizeOfHeapCommit：同上
  * LoaderFlags，保留，必须为0。
  * NumberOfRvaAndSizes，这是DataDirectory里保存的表项的数量
  * DataDirectory，上一篇《Windows调试艺术》已经详细讲过了
到这我们就详细看完了NT头的所有内容，和Dos头不同，NT头的内容确确实实和我们的程序运行密切相关，所以想和Dos头那样随心所欲的改是不可能了，但其实也正是因为它对程序的重大影响，让我们有更多的可玩空间。
还是让我们来看看NT头中有哪些可以随意修改的空间，以下为笔者测试得到的通用结果，在不同版本Windows上可能还有其他可用的，大家感兴趣的话可以在自己系统上进行尝试。
    File Header
    DWORD   TimeDateStamp;  //时间戳自然是随意修改
    DWORD   PointerToSymbolTable;  //程序运行时不需要符号
    DWORD   NumberOfSymbols;    //同上
    Optional Header
    BYTE    MajorLinkerVersion;  //链接器的版本自然和程序执行没关系
    BYTE    MinorLinkerVersion;  
    DWORD   SizeOfCode;         //大小够大就行了
    DWORD   SizeOfInitializedData;  
    DWORD   SizeOfUninitializedData;
上面对于Dos我们试了试空间扩充，那这次就来搞一下空间压缩，对于病毒来说这是至关重要的，毕竟100多m的恶意程序可太好发现了，病毒作者总是想方设法的想要缩小空间的。
最简单当然是指定对齐的大小SectionAlignment和
FileAlignment了，我们常常可以在程序中看到大片的00，这些数据实际上是用来填充实现程序的对齐的，如果我们将这个对齐的值改的小一点是不是就可以避免大量的补00了呢？我们可以通过链接器的/OPT:NOWIN98将section的对齐由标准的4k改为512字节，这样能一定程度上压缩程序大小。
合并也是常见的压缩手段，其中最重要的一种思路就是合并头，因为Dos Header和Dos
Stub其实在Windows上是不需要的，我们可以通过覆盖的方式让Dos头和Optional头合二为一。
原理很简单，就是因为DOS头的lfanew指向的是PE头，我们可以将它指定为Dos头的一部分，又因为DOS头的大部分数据是可改的，所以可以随意填充NT
Header的内容，注意lfanew所在的字段就是nt header的一部分了，所以它的位置就必须是NT头中可以随意指定的。过程如下：
  * 首先选择我们要设置lfanew的位置，该位置必须是NT头中可任意修改的，这里我们选择SizeOfCode  
  * 计算偏移值，原本的NT头从0x80开始，所以偏移为0x1c，要把它作为lfanew的话需要让它变为DOS的0x30，所以起始的NT头应该在0x20处
  * 将原来的DOS头0x20后0xF8大小（即NT头的大小）的内容全部删除，然后将复制的PE头粘贴上去  
  * 可以看到值为E0也就是SizeOfCode了，修改为0x20即可
上述操作实现的映射关系如下：
    dos.reserved  ----> NT header
    ...
    ...
    ...
    dos.lfanew   ----> Optional.SizeOfCode
当然实现怎么样的映射就全凭你喜欢了，只要遵守上面的做法即可。不过有一点需要注意——我们需要拿自己的数据去填满删除的部分，或者按照Dos头变形中的Dos
Stub扩展的方法去修改几个重要的结构，否则会因为文件偏移改变而导致程序不能执行。
###  需要注意的内容
在修改PE文件时很容易因为修改了文件大小而导致文件的偏移需要修改，比如代码本来文件中0x100的位置，你对文件变形后0x100变成了自己的数据，那就乱套了，所以有一些数据必须要十分注意，这里为大家整理出来：
    OptionalHeader:
    DWORD   AddressOfEntryPoint; 
    DWORD   BaseOfCode;  
    DWORD   BaseOfData; 
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
    DosHeader:
    LONG   e_lfanew;  
    FileHeader:
    DWORD    NumberOfSections; 
    DWORD    SizeOfOptionalHeader;