title:The Security Impact of HTTPS Interception
author:Zakir Durumeric and
Zane Ma and
Drew Springall and
Richard Barnes and
Nick Sullivan and
Elie Bursztein and
Michael Bailey and
J. Alex Halderman and
Vern Paxson
The Security Impact of HTTPS Interception
Zakir Durumeric∗∨, Zane Ma†, Drew Springall∗, Richard Barnes‡, Nick Sullivan§,
Elie Bursztein¶, Michael Bailey†,
J. Alex Halderman∗, Vern Paxson(cid:107)∨
∗ University of Michigan † University of Illinois Urbana-Champaign ‡ Mozilla
¶ Google
(cid:107) University of California Berkeley ∨ International Computer Science Institute
§ Cloudﬂare
Abstract—As HTTPS deployment grows, middlebox and an-
tivirus products are increasingly intercepting TLS connections to
retain visibility into network trafﬁc. In this work, we present a
comprehensive study on the prevalence and impact of HTTPS in-
terception. First, we show that web servers can detect interception
by identifying a mismatch between the HTTP User-Agent header
and TLS client behavior. We characterize the TLS handshakes
of major browsers and popular interception products, which
we use to build a set of heuristics to detect interception and
identify the responsible product. We deploy these heuristics at
three large network providers: (1) Mozilla Firefox update servers,
(2) a set of popular e-commerce sites, and (3) the Cloudﬂare
content distribution network. We ﬁnd more than an order of
magnitude more interception than previously estimated and with
dramatic impact on connection security. To understand why
security suffers, we investigate popular middleboxes and client-
side security software, ﬁnding that nearly all reduce connection
security and many introduce severe vulnerabilities. Drawing on
our measurements, we conclude with a discussion on recent
proposals to safely monitor HTTPS and recommendations for
the security community.
I .
I N T R O D U C T I O N
When it comes to HTTPS, the security community is work-
ing at cross purposes. On the one hand, we are striving to harden
and ubiquitously deploy HTTPS in order to provide strong end-
to-end connection security [5], [20], [22], [23], [34], [51]. At
the same time, middlebox and antivirus products increasingly
intercept (i.e., terminate and re-initiate) HTTPS connections
in an attempt to detect and block malicious content that uses
the protocol to avoid inspection [6], [12], [15], [27]. Previous
work has found that some speciﬁc HTTPS interception products
dramatically reduce connection security [7], [12], [58]; however,
the broader security impact of such interception remains unclear.
In this paper, we conduct the ﬁrst comprehensive study of
HTTPS interception in the wild, quantifying both its prevalence
in trafﬁc to major services and its effects on real-world security.
We begin by introducing a novel technique for passively de-
tecting HTTPS interception based on handshake characteristics.
HTTPS interception products typically function as transparent
proxies: they terminate the browser’s TLS connection, inspect
the HTTP plaintext, and relay the HTTP data over a new TLS
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  ﬁrst  page.  Reproduction  for  commercial  purposes  is  strictly  prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS’17,  26  February–1  March,  2017,  San  Diego,  CA,  USA
Internet Society, ISBN 1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23456
connection to the destination server. We show that web servers
can detect such interception by identifying a mismatch between
the HTTP User-Agent header and the behavior of the TLS client.
TLS implementations display varied support (and preference
order) for cipher suites, extensions, elliptic curves, compression
methods, and signature algorithms. We characterize these
variations for major browsers and popular interception products
in order to construct heuristics for detecting interception and
identifying the responsible product.
Next, we assess the prevalence and impact of HTTPS
interception by applying our heuristics to nearly eight billion
connection handshakes. In order to avoid the bias inherent in
any single network vantage point, we analyzed connections for
one week at three major Internet services: (1) Mozilla Firefox
update servers, (2) a set of popular e-commerce websites, and
(3) the Cloudﬂare content distribution network. These providers
serve different types of content and populations of users, and
we ﬁnd differing rates of interception: 4.0% of Firefox update
connections, 6.2% of e-commerce connections, and 10.9% of
U.S. Cloudﬂare connections were intercepted. While these rates
vary by vantage point, all are more than an order of magnitude
higher than previous estimates [27], [46].
To quantify the real-world security impact of the observed
interception, we establish a grading scale based on the TLS
features advertised by each client. By applying the metric
to unmodiﬁed browser handshakes and to the intercepted
connections seen at each vantage point, we calculate the
change in security for intercepted connections. While for
some older clients, proxies increased connection security, these
improvements were modest compared to the vulnerabilities
introduced: 97% of Firefox, 32% of e-commerce, and 54%
of Cloudﬂare connections that were intercepted became less
secure. Alarmingly, not only did intercepted connections
use weaker cryptographic algorithms, but 10–40% advertised
support for known-broken ciphers that would allow an active
man-in-the-middle attacker to later intercept, downgrade, and
decrypt the connection. A large number of these severely
broken connections were due to network-based middleboxes
rather than client-side security software: 62% of middlebox
connections were less secure and an astounding 58% had severe
vulnerabilities enabling later interception.
Finally, we attempt to understand why such a large number
of intercepted connections are vulnerable by testing the security
of a range of popular corporate middleboxes, antivirus products,
and other software known to intercept TLS. The default settings
for eleven of the twelve corporate middleboxes we evaluated
expose connections to known attacks, and ﬁve introduce severe
vulnerabilities (e.g., incorrectly validate certiﬁcates). Similarly,
18 of the 20 client-side security products we tested reduce
connection security, and half introduce severe vulnerabilities.
In some cases, manufacturers attempted to customize libraries
or re-implement TLS, introducing negligent vulnerabilities. In
other cases, products shipped with libraries that were years out
of date. Across the board, companies are struggling to correctly
deploy the base TLS protocol, let alone implement modern
HTTPS security features.
Our results indicate that HTTPS interception has become
startlingly widespread, and that interception products as a class
have a dramatically negative impact on connection security. We
hope that shedding light on this state of affairs will motivate
improvements to existing products, advance work on recent
proposals for safely intercepting HTTPS [26], [38], [44], [54],
and prompt discussion on long-term solutions.
I I . B A C K G R O U N D
In this section, we provide a brief background on HTTPS
interception and describe the aspects of HTTP and TLS that are
relevant to our ﬁngerprinting techniques. We refer the reader
to RFC 5280 [14] for a detailed description of TLS.
A. TLS Interception
Client-side software and network middleboxes that inspect
HTTPS trafﬁc operate by acting as transparent proxies. They
terminate and decrypt the client-initiated TLS session, analyze
the inner HTTP plaintext, and then initiate a new TLS
connection to the destination website. By design, TLS makes
such interception difﬁcult by encrypting data and defending
against man-in-the-middle attacks through certiﬁcate validation,
in which the client authenticates the identity of the destination
server and rejects impostors. To circumvent this validation,
local software injects a self-signed CA certiﬁcate into the client
browser’s root store at install time. For network middleboxes,
administrators will similarly deploy the middlebox’s CA
certiﬁcate to devices within their organization. Subsequently,
when the proxy intercepts a connection to a particular site, it
will dynamically generate a certiﬁcate for that site’s domain
name signed with its CA certiﬁcate and deliver this certiﬁcate
chain to the browser. Unless users manually verify the presented
certiﬁcate chain, they are unlikely to notice that the connection
has been intercepted and re-established.1
B. TLS Feature Negotiation
TLS clients and servers negotiate a variety of protocol
parameters during a connection handshake [14]. In the ﬁrst
protocol message, Client Hello, the client speciﬁes what TLS
version and features it supports. It sends ordered lists of
cipher suites, compression methods, and extensions—which
themselves frequently contain additional parameters, such as
supported elliptic curves and signature algorithms. The server
then selects a mutually agreeable choice from each list of
options. This extensibility facilitates the continuing evolution
of features and provides adaptability in the wake of new attacks.
1Contrary to widespread belief, public key pinning [19] —an HTTPS feature
that allows websites to restrict connections to a speciﬁc key—does not prevent
this interception. Chrome, Firefox, and Safari only enforce pinned keys when
a certiﬁcate chain terminates in an authority shipped with the browser or
operating system. The extra validation is skipped when the chain terminates in
a locally installed root (i.e., a CA certiﬁcate installed by an administrator) [34].
Internet Explorer and Edge do not support key pinning [39].
Fig. 1: HTTPS Interception—Products monitor HTTPS
connections by acting as transparent proxies that terminate
the browser TLS session, inspect content, and establish a new
connection to the destination server. These proxies use different
TLS libraries than popular browsers, which allows us to detect
interception by identifying a mismatch between the HTTP
User-Agent header and TLS client behavior.
As of early 2016, there exist more than 340 cipher suites,
36 elliptic curves, 3 elliptic curve point formats, 28 signature
algorithms, and 27 extensions that clients can advertise [29],
[30]. In practice, browsers and security products use varying
TLS libraries and advertise different handshake parameters. As
we will show in Section III, these characteristic variations allow
us to uniquely identify individual TLS implementations based
on their handshakes.
C. HTTP User-Agent Header
The HTTP protocol allows the client and server to pass
additional information during a connection by including header
ﬁelds in their messages. For example, the client can include the
Accept-Charset: utf-8 header to indicate that it expects
content to be encoded in UTF-8. One standard client header
is the User-Agent header, which indicates the client browser
and operating system in a standardized format. There has been
signiﬁcant prior study on User-Agent header spooﬁng. These
studies have largely found that end users do not spoof their own
User-Agent header [18], [45], [61]. For example, Eckersley
found that only 0.03% of connections with a Firefox User-
Agent supported features unique to Internet Explorer, indicating
spooﬁng [18]. Fingerprinting studies commonly trust the User-
Agent string [40], and we follow suit in this work.
I I I . T L S I M P L E M E N TAT I O N H E U R I S T I C S
Our methodology for identifying interception is based on
detecting a mismatch between the browser speciﬁed in the
HTTP User-Agent header and the cryptographic parameters
advertised during the TLS handshake (Figure 1). In this section,
we characterize the handshakes from popular browsers and
develop heuristics that determine whether a TLS handshake is
consistent with a given browser. We then go on to ﬁngerprint
the handshakes produced by popular security products in order
to identify the products responsible for interception in the wild.
A. Web Browsers
We captured the TLS handshakes generated by the four
most popular browsers: Chrome, Safari, Internet Explorer,
and Firefox [57]. To account for older versions, differing
2
HTTPS ProxyServerClientHelloHTTP RequestHandshake Protocol: Client Hello  Version: TLS 1.2 (0x0303)  Cipher Suites (2 suites)Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)  Extension: ec_point_formats    Elliptic curves point formats (1)EC point format: uncompressed (0)  Extension: elliptic_curves    Elliptic curves (2 curves) Elliptic curve: secp256r1 (0x0017)Elliptic curve: secp256r1 (0x0018)  Extension: Application Layer Protocol Negotiation  Extension: server_nameHandshake Protocol: Client Hello  Version: TLS 1.0 (0x0301)Cipher Suites Length: 4  Cipher Suites (2 suites)Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)    Cipher Suite: TLS_RSA_EXPORT_WITH_DES40_CBC_SHA (0x0011)  Extension: server_nameHypertext Transfer ProtocolGet / HTTP/1.1\r\n  Host: www.illinois.edu  Connection: keep-alive\r\n  User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like GeckoClientHelloRemainder of   TLS HandshakeClient operating systems, and varying mobile hardware, we generated
and captured handshakes in different environments using
BrowserStack [4], a cloud service that provides developers
with a variety of virtual machines for testing websites.2
We analyzed the non-ephemeral parameters advertised in
the TLS handshakes, ﬁnding that each browser family selects a
unique set of options, and that these options differ from those
used by both common libraries (e.g., OpenSSL) and popular
interception products.3 However, while each browser, library,
and security product produces a unique Client Hello message,
the parameters selected by browsers are not statically deﬁned.
Instead, browsers alter their behavior based on hardware support,
operating system updates, and user preferences.
Instead of generating all possible permutations, we analyzed
when browsers select different parameters and developed a set
of heuristics that determine whether a speciﬁc handshake could
have been generated by a given browser. For example, none
of the four browsers have ever supported the TLS Heartbeat
extension [53]. If a browser connection advertises its support,
we know that the session was intercepted. On the other hand,
despite the fact that all four browsers have default support for
AES-based ciphers, the lack of these ciphers does not indicate
interception, because browsers allow users to disable speciﬁc
cipher suites. This methodology has the advantage of excluding
false positives that arise from uncommon user conﬁgurations.
However, it can yield false negatives if a proxy copies TLS
parameters from the original client connection.
We describe the heuristics for each browser below:
Mozilla Firefox
Firefox was the most consistent of the four
browsers, and by default, each version produces a nearly
identical Client Hello message regardless of operating system
and platform. All parameters, including TLS extensions, ciphers,
elliptic curves, and compression methods are predetermined
and hard-coded by the browser. Users can disable individual
ciphers, but they cannot add new ciphers nor reorder them. To
determine whether a Firefox session has been intercepted, we
check for the presence and order of extensions, cipher suites,
elliptic curves, EC point formats, and handshake compression
methods. Mozilla maintains its own TLS implementation,
Mozilla Network Security Services (NSS) [42]. NSS speciﬁes
extensions in a different order than the other TLS libraries
we tested, which allows it to be easily distinguished from
other implementations. The library is unlikely to be directly
integrated into proxies because it is seldom used in server-side
applications.
Google Chrome
Chrome was one of the most challenging
browsers to ﬁngerprint because its behavior is dependent on
hardware support and operating system. For example, Chrome
prioritizes ChaCha-20-based ciphers on Android devices that
lack hardware AES acceleration [10] and Chrome on Win-
dows XP does not advertise support for ECDSA keys at all.
These optimizations result in several valid cipher and extension
2We analyzed Chrome 34–50 and Firefox 3–46 on Windows XP, 7, 8, 8.1,
and 10 and Mac OS X Snow Leopard, Lion, Mountain Lion, Mavericks,
Yosemite, and El Capitan. We additionally captured handshakes from Apple
Safari 5–9, Internet Explorer 6–11, Microsoft Edge, and the default Android
browser on Android 4.0–5.0. In total, we collected 874 ﬁngerprints.
3We compare the presence and order of cipher suites, extensions, compression
methods, elliptic curves, signature algorithms, and elliptic curve point formats.
orderings for each version of Chrome, and furthermore, users
can disable individual cipher suites. We check for ciphers and
extensions that Chrome is known to not support, but do not
check for the inclusion of speciﬁc ciphers or extensions, nor
do we validate their order. When appropriate, we check the
presence and order of elliptic curves, compression methods,
and EC point formats. We note that because Chrome uses
BoringSSL, an OpenSSL fork, connections have a similar
structure to OpenSSL. However, Chrome supports considerably
fewer options, including a subset of the default extensions,
ciphers, and elliptic curves advertised by OpenSSL.
Microsoft Internet Explorer and Edge
Internet Explorer is
less consistent than the other browsers for two reasons: (1)
administrators can enable new ciphers, disable default ciphers,
and arbitrarily reorder cipher suites through Windows Group
Policy and registry changes, and (2) IE uses the Microsoft
SChannel library, an OS facility which behaves differently
depending on both Windows updates and browser version.
Because of this additional ﬂexibility, it is hard to rule out
handshakes that include outdated ciphers, so we introduce
a third categorization, unlikely, which we use to indicate
conﬁgurations that are possible but improbable in practice (e.g.,
including an export-grade cipher suite). We note that minor
OS updates alter TLS behavior, but are not indicated by the
HTTP User-Agent header. We mark behavior consistent with
any OS update as valid. SChannel connections can by uniquely
identiﬁed because SChannel is the only TLS library we tested
that includes the OCSP status request extension before the
supported groups and EC point formats extensions.
Apple Safari Apple Safari ships with its own TLS imple-
mentation, Apple Secure Transport, which does not allow user
customization. The order of ciphers and extensions is enforced
in code. While extension order does not vary, the NPN, ALPN,
and OCSP stapling extensions are frequently excluded, and the
desktop and mobile versions of Safari have different behavior.
One unique aspect of Secure Transport is that it includes the
TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher ﬁrst,
whereas the other libraries we investigated include the cipher
last. Similar to Microsoft, Apple has changed TLS behavior in
minor OS updates, which are not indicated in the HTTP User-
Agent header. We allow for any of the updates when validating
handshakes, and we check for the presence and ordering of
ciphers, extensions, elliptic curves, and compression methods.
B. Fingerprinting Security Products
While our heuristics enable us to detect when interception is
occurring, they do not indicate what intercepted the connection.
To identify products used in the wild, we installed and
ﬁngerprinted the Client Hello messages generated by well-
known corporate middleboxes (Figure 3), antivirus software
(Figure 4), and other client-side software previously found to
intercept connections (e.g., SuperFish [8]). In this section, we
describe these products.
We generate a ﬁngerprint for each product by hashing the
non-ephemeral parameters advertised in the Client Hello mes-
sage (i.e., version, ciphers, extensions, compression methods,