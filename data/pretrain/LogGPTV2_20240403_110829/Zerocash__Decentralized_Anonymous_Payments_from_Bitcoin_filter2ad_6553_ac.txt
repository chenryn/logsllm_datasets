(cid:104)(cid:126)a, (1, y1, . . . , ym)(cid:105) · (cid:104)(cid:126)b, (1, y1, . . . , ym)(cid:105) for some (cid:126)a,(cid:126)b ∈ Fm+1. These
include addition, multiplication, negation, and constant gates.
463
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
… (c) coin commitmentrt(a) Merke tree over (cm1,cm2,…)cmCRHCRHCRHCRHCRHCRHCRHcm1cm2cm3cm4cm5cm6cm7cm8CRHCRHCRHCOMMvρ(cid:2)(cid:4)(cid:3)PRFsnPRFaddrs(cid:2)(cid:5)(cid:3)COMMr(cid:2)(cid:5)(cid:3)sn(cid:1)(d) serial numberrt = Merkle-tree rootcm = coin commitmentsn = serial numberv = coin valuer, s = commitment rand.ρ = serial number rand.(apk,pkenc) = address public key(ask,skenc) = address secret keyc = ((apk,pkenc), v, ρ, r, s, cm)(b) coincan convince the veriﬁer. Namely, b = 1 with probabil-
ity 1 − negl(λ) in the following experiment: (pk, vk) ←
KeyGen(1λ, C); π ← Prove(pk, x, a); b ← Verify(vk, x, π).
Succinctness. An honestly-generated proof π has Oλ(1) bits
and Verify(vk, x, π) runs in time Oλ(|x|). (Here, Oλ hides a
ﬁxed polynomial factor in λ.)
Proof of knowledge (and soundness).
If the veriﬁer accepts
a proof output by a bounded prover, then the prover “knows”
a witness for the given instance. (In particular, soundness
holds against bounded provers.) Namely, for every poly(λ)-
size adversary A, there is a poly(λ)-size extractor E such that
Verify(vk, x, π) = 1 and (x, a) (cid:54)∈ RC with probability negl(λ)
in the following experiment: (pk, vk) ← KeyGen(1λ, C);
(x, π) ← A(pk, vk); a ← E(pk, vk).
Perfect zero knowledge. An honestly-generated proof is per-
fect zero knowledge.7 Namely, there is a poly(λ)-size simulator
Sim such that for all stateful poly(λ)-size distinguishers D the
following two probabilities are equal:
• The probability that D(π) = 1 on an honest proof.
• The probability that D(π) = 1 on a simulated proof.
D(π) = 1
 (x, a) ∈ RC
 (x, a) ∈ RC
D(π) = 1
(x, a) ← D(pk, vk)
π ← Prove(pk, x, a)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (pk, vk) ← KeyGen(C)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (pk, vk, trap) ← Sim(C)
(x, a) ← D(pk, vk)
π ← Sim(pk, x, trap)
Pr
Pr
B. Known constructions and security
There are many zk-SNARK constructions in the literature
[9, 10, 11, 12, 13, 14, 15, 16]. We are interested in zk-SNARKs
for arithmetic circuit satisﬁability, and the most efﬁcient ones
for this language are based on quadratic arithmetic programs
[12, 11, 13, 14, 16]; such constructions provide a linear-time
KeyGen, quasilinear-time Prove, and linear-time Verify.
Security of zk-SNARKs is based on knowledge-of-exponent
assumptions and variants of Difﬁe–Hellman assumptions in
bilinear groups [9, 22, 23]. While knowledge-of-exponent
assumptions are fairly strong, there is evidence that such
assumptions may be inherent for constructing zk-SNARKs
[24, 25].
C. zk-SNARK implementations
There are three published implementations of zk-SNARKs:
(i) Parno et al. [13] present an implementation of zk-SNARKs
for programs having no data dependencies;8 (ii) Ben-Sasson
et al. [14] present an implementation of zk-SNARKs for
arbitrary programs (with data dependencies); and (iii) Ben-
Sasson et al. [16] present an implementation of zk-SNARKs
7While most zk-SNARK descriptions in the literature only mention statistical
zero knowledge, all zk-SNARK constructions can be made perfect zero
knowledge by allowing for a negligible error probability in completeness.
8They only support programs where array indices are restricted to be known
compile-time constants; similarly, loop iteration counts (or at least upper
bounds to these) must be known at compile time.
464
that supports programs that modify their own code (e.g., for
runtime code generation); their implementation also reduces
costs for programs of larger size and allows for universal key
pairs.
Each of the works above also achieves zk-SNARKs for
arithmetic circuit satisﬁability as a stepping stone towards
their respective higher-level efforts. In this paper we are only
interested in a zk-SNARK for arithmetic circuit satisﬁability,
and we rely on the implementation of [16] for such a
zk-SNARK.9 The implementation in [16] is itself based on the
protocol of Parno et al. [13]. We thus refer the interested reader
to [13] for details of the protocol, its intuition, and its proof of
security; and to [16] for the implementation and its performance.
In terms of concrete parameters, the implementation of [16]
provides 128 bits of security, and the ﬁeld F is of a 256-bit
prime order p.
III. DEFINITION OF A DECENTRALIZED ANONYMOUS
PAYMENT SCHEME
We introduce the notion of a decentralized anonymous
payment scheme (DAP scheme), extending the notion of
decentralized e-cash [8]. Later, in Section IV, we provide
a construction.
A. Data structures
We begin by describing, and giving intuition about, the data
structures used by a DAP scheme. The algorithms that use and
produce these data structures are introduced in Section III-B.
Basecoin ledger. Our protocol is applied on top of a ledger-
based base currency such as Bitcoin; for generality we refer
to this base currency as Basecoin. At any given time T , all
users have access to LT , the ledger at time T , which is a
sequence of transactions. The ledger is append-only (i.e., T <
T (cid:48) implies that LT is a preﬁx of LT (cid:48)).10 The transactions in
the ledger include both Basecoin transactions as well as two
new transaction types described below.
Public parameters. A list of public parameters pp is available
to all users in the system. These are generated by a trusted party
at the “start of time” and are used by the system’s algorithms.
Addresses. Each user generates at least one address key
pair (addrpk, addrsk). The public key addrpk is published and
enables others to direct payments to the user. The secret key
addrsk is used to receive payments sent to addrpk. A user may
generate any number of address key pairs.
Coins. A coin is a data object c, to which we associate the
following:
• A coin commitment, denoted cm(c): a string that appears
on the ledger once c is minted.
9In [16], one optimization to the veriﬁer’s runtime requires preprocessing
the veriﬁcation key vk; for simplicity, we do not use this optimization.
10In reality, the Basecoin ledger (such as the one of Bitcoin) is not perfect
and may incur temporary inconsistencies. In this respect our construction is
as good as the underlying ledger. We discuss the effects of this on anonymity
and mitigations in Section VI-C.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
• A coin value, denoted v(c): the denomination of c, as
measured in basecoins, as an integer between 0 and a
maximum value vmax (which is a system parameter).
• A coin serial number, denoted sn(c): a unique string
associated with the c, used to prevent double spending.
• A coin address, denoted addrpk(c): an address public key,
representing who owns c.
1 , snold
2 , cmnew
Any other quantities associated with a coin c (e.g., various
trapdoors) are implementation details.
New transactions. Besides Basecoin transactions, there are
two new types of transactions.
• Mint transactions. A mint transaction txMint
is a tuple
(cm, v,∗), where cm is a coin commitment, v is a coin value,
and ∗ denotes other (implementation-dependent) information.
The transaction txMint records that a coin c with coin
commitment cm and value v has been minted.
• Pour transactions. A pour transaction txPour
is a tuple
, vpub, info,∗), where rt is a root
(rt, snold
are two coin serial numbers,
of a Merkle tree, snold
are two coin commitments, vpub is a coin
, cmnew
cmnew
info is an arbitrary string, and ∗ denotes other
value,
(implementation-dependent) information. The transaction
txPour records the pouring of two input (and now consumed)
coins cold
2 ,
1 , snold
into two new output coins cnew
, with respective coin
1
commitments cmnew
, as well as a public output vpub
(which may be zero). Furthermore, txPour also records an
information string info (perhaps containing information on
who is the recipient of vpub basecoins) and that, when this
transaction was made, the root of the Merkle tree over coin
commitments was rt (see below).
2 , with respective serial numbers snold
, cmnew
1 , snold
2
1 , cold
, cmnew
2
, cnew
2
1
1
2
2
1
Commitments of minted coins and serial numbers of spent
coins. For any given time T ,
• CMListT denotes the list of all coin commitments appearing
in mint and pour transactions in LT ;
• SNListT denotes the list of all serial numbers appearing in
pour transactions in LT .
While both of these lists can be deduced from LT , it will be
convenient to think about them as separate (as, in practice,
these may be separately maintained due to efﬁciency reasons).
Merkle tree over commitments.
For any given time T ,
TreeT denotes a Merkle tree over CMListT and rtT its root.
Moreover, the function PathT (cm) gives the authentication
path from a coin commitment cm appearing in CMListT to
the root of TreeT .11 For convenience, we assume that LT also
stores rtT (cid:48) for all T (cid:48) ≤ T (i.e., it stores all past Merkle tree
roots).
B. Algorithms
A DAP scheme Π is a tuple of polynomial-time algorithms
(Setup, CreateAddress, Mint, Pour, VerifyTransaction,
Receive)
11While we refer to Mekle trees for simplicity, it is straightforward to extend
the deﬁnition to allow other data structures representing sets with fast insertion
and short proofs of membership.
with the following syntax and semantics.
System setup. The algorithm Setup generates a list of public
parameters:
Setup
• INPUTS: security parameter λ
• OUTPUTS: public parameters pp
The algorithm Setup is executed by a trusted party. The
resulting public parameters pp are published and made available
to all parties (e.g., by embedding them into the protocol’s
implementation). The setup is done only once; afterwards, no
trusted party is needed, and no global secrets or trapdoors are
kept.
Creating payment addresses. The algorithm CreateAddress
generates a new address key pair:
CreateAddress
• INPUTS: public parameters pp
• OUTPUTS: address key pair (addrpk, addrsk)
at
least one
Each user generates
address key pair
(addrpk, addrsk) in order to receive coins. The public key addrpk
is published, while the secret key addrsk is used to redeem
coins sent to addrpk. A user may generate any number of
address key pairs; doing so does not require any interaction.
Minting coins. The algorithm Mint generates a coin (of a
given value) and a mint transaction:
Mint
• INPUTS:
– public parameters pp
– coin value v ∈ {0, 1, . . . , vmax}
– destination address public key addrpk
• OUTPUTS: coin c and mint transaction txMint
A system parameter, vmax, caps the value of any single coin.
The output coin c has value v and coin address addrpk; the
output mint transaction txMint equals (cm, v,∗), where cm is
the coin commitment of c.
Pouring coins. The Pour algorithm transfers value from
input coins into new output coins, marking the input coins
as consumed. Moreover, a fraction of the input value may be
publicly revealed. Pouring allows users to subdivide coins into
smaller denominations, merge coins, and transfer ownership
of anonymous coins, or make public payments.12
Pour
• INPUTS:
– public parameters pp
– the Merkle root rt
– old coins cold
1 , cold
2
– old addresses secret keys addrold
– authentication path path1 from commitment cm(cold
sk,1, addrold
sk,2
1 ) to
root rt,
12We consider pours with 2 inputs and 2 outputs, for simplicity and (as
discussed in Section I-B) without loss of generality.
465
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
authentication path path2 from commitment cm(cold
root rt
2 ) to
2
1
, vnew
– new values vnew
– new addresses public keys addrnew
– public value vpub
– transaction string info
• OUTPUTS: new coins cnew
, cnew
1
2
pk,1, addrnew
pk,2
and pour transaction txPour
Thus, the Pour algorithm takes as input two distinct input
2 , along with corresponding address secret keys
coins cold
1 , cold
addrold
sk,1, addrold
sk,2 (required to redeem the two input coins). To
ensure that cold
2 have been previously minted, the Pour
1 , cold
algorithm also takes as input the Merkle root rt (allegedly,
equal to the root of Merkle tree over all coin commitments so
far), along with two authentication paths path1, path2 for the
two coin commitments cm(cold
2 ). Two input values
specify the values of two new anonymous coins
vnew
1
to be generated, and two input address public keys
cnew
1
2
addrnew
. A third
value, vpub, speciﬁes the amount to be publicly spent (e.g.,
to redeem coins or pay transaction fees). The sum of output
values v1 + v2 + vpub must be equal to the sum of the values
of the input coins (and cannot exceed vmax). Finally, the Pour
algorithm also receives an arbitrary string info, which is bound
into the output pour transaction txPour.
pk,2 specify the recipients of cnew
, vnew
, cnew
pk,1, addrnew
1 ), cm(cold
, cnew
2
2
1
1
1
, cmnew
2 , cmnew
, vpub, info,∗), where
The Pour algorithm outputs two new coins cnew
, cnew
and a pour transaction txPour. The transaction txPour equals
(rt, snold
1 , snold
cmnew
,
are the two coin commitments of the two output coins,
cmnew