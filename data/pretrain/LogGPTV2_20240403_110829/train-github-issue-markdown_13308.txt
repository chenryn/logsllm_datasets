Currently, Deno only sorts the imported and exported names from import and
export specifiers. The goal is to also sort the import and export specifiers
in a certain sort function.
Usually, I sort those specifiers in Node in this way,
    import 'style.css' // might be side effects module if JS
    import fs from 'fs' // default import
    import * as path from 'path' // namespace import
    import { ref } from 'vue' // normal named import
    // typed imports
    import type TypeC from 'abc'
    import type * as TypeC from 'abc'
    import type { TypeC } from 'abc'
Exports are also sorted in that way as well.
For Deno, I am thinking to sort like,
    import 'style.css' // might be side effects module if JS
    import fs from 'fs' // default import
    import * as path from 'path' // namespace import
    import { ref } from 'vue' // normal named import
    // url imports go into one section
    import fs from 'https://deno.land/std/node/fs.ts'
    /// ... the rest of imports
    // typed imports
    import type TypeC from 'abc'
    import type * as TypeC from 'abc'
    import type { TypeC } from 'abc'
    // type imports from url here
    import type { Colors } from 'https://deno.land/std/colors.ts'
I have checked that `dprint` can sort the import and export specifiers. But,
Deno hasn't enabled them. I am not familiar with the code base, so I will let
the core team decide the preferred way of sorting.
Some unresolved questions are how should `deno fmt` handle side effect
imports? Should they be left as it is and let the users sort (since they will
become one section after other imports are sorted)?
Thanks!