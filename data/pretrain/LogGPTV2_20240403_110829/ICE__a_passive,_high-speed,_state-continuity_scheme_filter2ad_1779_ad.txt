128 bytes were transferred.
cations using the TrouSerS10 open-source software stack.
We also modiﬁed the tpm tis driver to keep timing mea-
surements. Each test was run 100 times and transferred
128 bytes to/from the TPM. Figure 2 displays the median
time for each test. All operations take a signiﬁcant amount
of time to complete. Especially writing to TPM NVRAM
takes 4x longer than reading from it. Related work shows
similar results for TPM chips from other vendors [20].
We also performed a similar benchmark on CMOS mem-
ory. We performed 10,000 one-byte write operations and
measured the time using the rdtscp instruction. Writing to
CMOS takes about 3μs/byte, signiﬁcantly faster than writ-
ing to TPM NVRAM. We attribute this diﬀerence to the
fact that CMOS memory is connected to the SPI-bus [10]
and does not require a heavy communication protocol as
does the LPC-connected TPM chip.
Finally, we measured the median time of writing 10,000
128 bytes ﬁles to both HDD and SSD disks. As Figure 2
shows, accessing the SSD disk is 5.4 times faster than writing
to TPM NVRAM. Writing to a magnetic disk is more costly.
Microbenchmarks.
To measure the performance of both libice0 and libi-
cen libraries, we implemented two modules. The ﬁrst mod-
ule implements a password veriﬁcation function and lim-
its the number of attempts that can be made before the
user is locked out indeﬁnitely. The benchmark provided
this module with 10,000 wrong password guesses and mea-
sured the median time per guess. Measurements show (see
Table 2) that for a single step only 0.06ms (0.43%) were
spent on computation when the module was linked with
the libice0 library. When we used libicen’s services, two
cubes need to be created and computation time increased to
0.13ms (0.71%). To securely write guards to CMOS mem-
ory, 0.33ms were spent (2.17% and 1.82% for libice0 and
libicen resp.). This shows a much higher cost to write
guards to CMOS compared to calculation time. But most
of the time was spent committing cubes to solid state disk
(97.40% and 97.47% for libice0 and libicen resp.). libi-
cen does not spend twice the amount of time writing cubes
to disk. Cubes only need to be committed before a guard
is incremented. Hence, libicen’s cubes can be stored tem-
porarily in memory and transferred to disk together with
ice0’s new cube without modifying the algorithm (see list-
10http://trousers.sourceforge.net/
(cid:20)(cid:20)(cid:22)
SSD (in ms)
computation
writing guard
writing cubes
total
Password
Noop
-lice0
-licen
-lice0
-licen
0.06
0.33
14.61
15.00
0.13
0.33
17.42
17.87
0.07
0.33
14.65
15.05
0.14
0.33
17.19
17.65
HDD (in ms)
-lice0
-licen
-lice0
-licen
computation
writing guard
writing cubes
total
0.06
0.35
112.80
113.21
0.12
0.35
183.23
183.71
0.07
0.35
111.54
111.96
0.13
0.35
183.83
184.31
Table 2: Microbenchmarks for libice0 and libicen
the processor. Their Aegis architecture mitigates this replay
attack by storing hash trees of memory pages in a secure lo-
cation. When a memory page is loaded into the processor’s
cache, its freshness is checked by recalculating and compar-
ing the hash values. Subsequent research results also defend
against replay attacks [4, 11, 37].
Memory replay attacks diﬀer from rollback attacks in that
memory contents is replayed while the system is up and run-
ning. This enables much easier security measures.
Schellekens et al. [24] propose an embedded-systems ar-
chitecture to store a trusted module’s persistent state in
invasive-attack-resistent, non-volatile memory. Their solu-
tion implements a light-weight authenticated channel be-
tween the trusted module and non-volatile memory. Fresh-
ness of the stored data is guaranteed per read/write instruc-
tion and based on a monotonic counter. As their approach
assumes that write instructions to non-volatile memory and
increments of the monotonic counter are atomic, unexpected
loss of power enables a rollback attack. We believe that their
approach can be ﬁxed by keeping a log of instructions in se-
cure non-volatile memory that need to be completed in case
power suddenly fails. On higher-end systems however, only
the TPM NVRAM can be used for such purposes and their
approach would lead to signiﬁcant performance overhead.
ICE, in contrast, is not aﬀected by TPM performance.
Research Systems Isolating Persistent Storage.
Many architectures rely on a large TCB that includes iso-
lation of persistent storage [7, 25, 31].
In such cases pro-
tection against rollback attacks are trivial: modules/pro-
grams can overwrite their state on disk. In practice how-
ever, software vulnerabilities in their TCB may be exploited
and state-continuity support is hard to guarantee. These
systems are also not able to defend against disk clone at-
tacks.
In contrast, ICE provides strong guarantees while
only relying on a very limited TCB.
Protected-Module Architectures.
Many security architectures with minimal TCB have been
proposed that only providing strong module isolation guar-
antees [3, 11, 16, 17, 23, 28]. Persistent storage can only be
accessed via services provided by the untrusted operating
system. None of them address the issue of state continuity.
Many of these systems can be adapted to use the state-
continuity approach presented by Parno et al. [20]. This
seminal work called Memoir, is to the best of our knowl-
edge the ﬁrst and only work that addresses the issue of
state continuity in protected-module architectures. Based
on Flicker [17], Memoir uses TPM NVRAM to store fresh-
ness information upon every state update. This signiﬁcantly
limits the applicability of their solution as NVRAM is slow
and only required to support up to 100K writes. The au-
thors acknowledge this constrained and propose two solu-
tions: (1) adding capacitor-backed RAM to the TPM chip
and (2) Memoir-Opt, an alternative approach that stores
freshness information in (volatile) TPM PCR registers that
are written to NVRAM when power is lost unexpectedly.
Both solutions rely on an uninterruptible power source to
safely store freshness when power suddenly fails. Failure
in this mechanism can lead to a rollback attack.
ICE, in
contrast, is a passive state-continuity system that does not
rely on an uninterruptible power source to guarantee secu-
rity; detaching the capacitor would only prevent stateful
modules from recovering their state but states could not
be rolled back. Moreover, in ICE the speed of updates to
state-continuous modules is only limited by the processor
and (untrusted) non-volatile memory, not by the TPM chip.
Special-Purpose Applications.
Chun et al. proposed the creation of append-only mem-
ory [5] to prevent that nodes in a distributed system can
make diﬀerent statements to diﬀerent nodes. An implemen-
tation with a minimal TCB was left as future work.
Levin et al. propose TrInc [14], a specialized system to
attest successive monotonic counters, to achieve similar re-
sults. TrInc assumes a dedicated device that is able to lo-
cally store attestation requests of monotonic counters. Af-
ter power was suddenly lost, clients can request the last
signed attestations. This approach is similar to solutions
were disk space is isolated, but incurs only a limited TCB.
ICE provides a more generic, low-overhead alternative with
only limited hardware modiﬁcations.
More recently Kotla et al. proposed a system [13] that
allows oﬄine data access while guaranteeing that (1) a user
cannot deny oﬄine accesses without failing an audit and (2)
after proving that a user did not access the data, it cannot
be accessed in the future. While their solution is interesting
and does not require any software to be trusted, it only
solves state-continuity in this speciﬁc setting.
7. CONCLUSION
Providing support for state continuity is challenging as in-
cluding non-volatile memory on-chip requires modiﬁcation
of fabrication processes. But oﬀ-chip storage of freshness
information can be slow (e.g. TPM NVRAM) or vulnerable
to attack. We presented ICE, a state-continuous system and
algorithm with two important properties: (1) only at boot
time is the (slow) TPM chip accessed. State updates after
the system booted only require updates to dedicated regis-
ters backed oﬀ-chip by a capacitor and non-volatile memory.
(2) ICE is a passive security measure. An attacker interrupt-
ing the main power supply or any other source of power,
cannot break state-continuity. We believe that the impor-
tance of ICE lies in the fact that it shows that with only
limited and cheap hardware support, it enables the develop-
ment of software-only implementations of trusted computing
primitives. This presents an interesting direction for future
versions or revisions of hardware security modules (e.g., the
TPM) and may provide an interesting approach to increase
security in low-end, resource-constrained applications.
(cid:20)(cid:20)(cid:23)
Acknowledgments
The authors thank all reviewers and proofreaders of the pa-
per for their useful comments. We also thank Fr´ed´eric Vogels
and Dominique Devriese for their help with Coq.
This work has been supported in part by the Intel Lab’s
University Research Oﬃce. This research is also partially
funded by the Research Fund KU Leuven, and by the EU
FP7 project NESSoS. Raoul Strackx holds a PhD grant from
the Agency for Innovation by Science and Technology in
Flanders (IWT).
8. REFERENCES
[1] P. Agten, R. Strackx, B. Jacobs, and F. Piessens.
Secure compilation to modern processors. In CSF’12.
[2] I. Anati, S. Gueron, S. Johnson, and V. Scarlata.
Innovative technology for CPU based attestation and
sealing. In HASP’13.
[3] A. Azab, P. Ning, and X. Zhang. SICE: a
hardware-level strongly isolated computing
environment for x86 multi-core platforms. In CCS’11.
[4] D. Champagne and R. Lee. Scalable architectural
support for trusted software. In HPCA’10.
[5] B.-G. Chun, P. Maniatis, S. Shenker, and
J. Kubiatowicz. Attested append-only memory:
Making adversaries stick to their word. In OSR’07.
[6] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A
logic of secure systems and its application to trusted
computing. In 30th IEEE Symposium on Security and
Privacy, pages 221–236. IEEE, 2009.
[7] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A virtual machine-based platform
for trusted computing. In OSR’03.
[8] J. Halderman, S. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. Calandrino, A. Feldman, J. Appelbaum,
and E. Felten. Lest we remember: Cold boot attacks
on encryption keys. In USENIX’08.
[9] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and
J. Del Cuvillo. Using innovative instructions to create
trustworthy software solutions. In HASP’13.
[10] Intel Corporation. Intel 6 Series Chipset and Intel
C200 Series Chipset, 2011.
[11] Intel Corporation. Software Guard Extensions
Programming Reference, 2013.
[12] C. Jones. Tentative steps toward a development
method for interfering programs.
[13] R. Kotla, T. Rodeheﬀer, I. Roy, P. Stuedi, and
B. Wester. Pasture: secure oﬄine data access using
commodity trusted hardware. In OSDI’12.
[14] D. Levin, J. R. Douceur, J. R. Lorch, and
T. Moscibroda. Trinc: Small trusted hardware for
large distributed systems. In NSDI’09.
[15] D. Lie, T. Chandramohan, M. Mark, L. Patrick,
B. Dan, M. John, and H. Mark. Architectural support
for copy and tamper resistant software. In
ASPLOS’00.
[16] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta,
V. Gligor, and A. Perrig. TrustVisor: Eﬃcient TCB
reduction and attestation. In S&P’10.
[17] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and
H. Isozaki. Flicker: An execution infrastructure for
TCB minimization. In EuroSys’08.
[18] F. McKeen, I. Alexandrovich, A. Berenzon, C. V.
Rozas, H. Shaﬁ, V. Shanbhogue, and U. R.
Savagaonkar. Innovative instructions and software
model for isolated execution. In HASP’13.
[19] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. V.
Herrewege, C. Huygens, B. Preneel, I. Verbauwhede,
and F. Piessens. Sancus: Low-cost trustworthy
extensible networked devices with a zero-software
trusted computing base. In Usenix’13.
[20] B. Parno, J. R. Lorch, J. R. Douceur, J. Mickens, and
J. M. McCune. Memoir: Practical state continuity for
protected modules. In S&P’11.
[21] M. Patrignani, P. Agten, R. Strackx, B. Jacobs,
D. Clarke, and F. Piessens. Secure compilation to
protected module architectures. In Accepted for
publication in ACM Transactions on Programming
Languages and Systems (TOPLAS).
[22] M. Patrignani, D. Clarke, and F. Piessens. Secure
Compilation of Object-Oriented Components to
Protected Module Architectures. In APLAS’13.
[23] D. P. Sahita R, Warrier U. Protecting Critical
Applications on Mobile Platforms. Intel.
[24] D. Schellekens, P. Tuyls, and B. Preneel. Embedded
trusted computing with authenticated non-volatile
memory. In TRUST’08.
[25] L. Singaravelu, C. Pu, H. H¨artig, and C. Helmuth.
Reducing TCB complexity for security-sensitive
applications: three case studies. In EuroSys ’06.
[26] E. R. Sparks. A security assessment of trusted
platform modules. Technical report.
[27] R. Strackx, B. Jacobs, and F. Piessens. ICE: A
passive, high-speed, state-continuity scheme (extended
version). Technical report, KU Leuven, Sept. 2014.
[28] R. Strackx and F. Piessens. Fides: Selectively
hardening software application components against
kernel-level or process-level malware. In CCS’12.
[29] R. Strackx, F. Piessens, and B. Preneel. Eﬃcient
Isolation of Trusted Subsystems in Embedded
Systems. In SecureComm’10.
[30] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and
S. Devadas. AEGIS: architecture for tamper-evident
and tamper-resistant processing. In ICS’03.
[31] R. Ta-Min, L. Litty, and D. Lie. Splitting interfaces:
Making trust between applications and operating
systems conﬁgurable. In OSDI’06.
[32] C. Tarnovsky. Deconstructing a “secure” processor. In
Black Hat’10.
[33] M. Technology. Hybrid memory - bridging the gap
between DRAM speed and NAND nonvolatility.
[34] V. Technology. NV-DIMM: Achieving greater ROI
from SSDs. Technical report.
[35] Trusted Computing Group. Design Principles
Speciﬁcation Version 1.2. 2011.
[36] A. Vasudevan, S. Chaki, L. Jia, J. McCune,
J. Newsome, and A. Datta. Design, implementation
and veriﬁcation of an extensible and modular
hypervisor framework. In S&P’13.
[37] P. Williams and R. Boivie. CPU support for secure
executables. In TRUST’11.
[38] J. Winter and K. Dietrich. A hijacker’s guide to the
LPC bus. In EuroPKI’11.
(cid:20)(cid:20)(cid:24)