### Data Transfer and Performance Analysis

A total of 128 bytes were transferred using the TrouSerS open-source software stack. To measure timing, we modified the TPM TIS driver. Each test was conducted 100 times, with 128 bytes being transferred to and from the TPM. The median time for each test is displayed in Figure 2. All operations require a significant amount of time to complete, particularly writing to TPM NVRAM, which takes approximately four times longer than reading from it. Similar results have been reported for TPM chips from other vendors [20].

We also performed a similar benchmark on CMOS memory, executing 10,000 one-byte write operations and measuring the time using the RDTSCP instruction. Writing to CMOS memory took about 3 μs per byte, significantly faster than writing to TPM NVRAM. This difference can be attributed to the fact that CMOS memory is connected to the SPI bus [10] and does not require a heavy communication protocol, unlike the LPC-connected TPM chip.

Finally, we measured the median time for writing 10,000 files of 128 bytes each to both HDD and SSD disks. As shown in Figure 2, accessing the SSD disk is 5.4 times faster than writing to TPM NVRAM. Writing to a magnetic disk is more costly.

### Microbenchmarks

To evaluate the performance of both libice0 and libicen libraries, we implemented two modules. The first module implements a password verification function and limits the number of attempts before the user is locked out indefinitely. We provided this module with 10,000 incorrect password guesses and measured the median time per guess. The results (see Table 2) show that when the module was linked with the libice0 library, only 0.06 ms (0.43%) was spent on computation. When using libicen's services, two cubes need to be created, increasing the computation time to 0.13 ms (0.71%). Securely writing guards to CMOS memory took 0.33 ms (2.17% and 1.82% for libice0 and libicen, respectively). This indicates a much higher cost for writing guards to CMOS compared to the computation time. However, most of the time was spent committing cubes to the solid-state disk (97.40% and 97.47% for libice0 and libicen, respectively). Libicen does not spend twice the amount of time writing cubes to disk; cubes only need to be committed before a guard is incremented. Thus, libicen’s cubes can be stored temporarily in memory and transferred to disk along with ice0’s new cube without modifying the algorithm (see list-10).

| **Operation** | **libice0 (in ms)** | **libicen (in ms)** |
|---------------|---------------------|---------------------|
| Computation   | 0.06                | 0.13                |
| Writing Guard | 0.33                | 0.33                |
| Writing Cubes | 14.61               | 17.42               |
| Total         | 15.00               | 17.87               |

### Related Work

#### Memory Replay Attacks
Memory replay attacks differ from rollback attacks in that they replay memory contents while the system is running, enabling easier security measures. Schellekens et al. [24] propose an embedded-systems architecture to store a trusted module’s persistent state in invasive-attack-resistant, non-volatile memory. Their solution implements a lightweight authenticated channel between the trusted module and non-volatile memory, ensuring data freshness per read/write instruction based on a monotonic counter. However, their approach assumes atomicity of write instructions and increments of the monotonic counter, making it vulnerable to unexpected power loss. We believe their approach can be improved by maintaining a log of instructions in secure non-volatile memory to handle sudden power failures. On higher-end systems, only TPM NVRAM can be used, leading to significant performance overhead. In contrast, ICE is not affected by TPM performance.

#### Research Systems Isolating Persistent Storage
Many architectures rely on a large TCB that includes isolation of persistent storage [7, 25, 31]. While these systems can overwrite their state on disk to protect against rollback attacks, software vulnerabilities in their TCB may be exploited, making state-continuity support difficult. These systems are also unable to defend against disk clone attacks. ICE, on the other hand, provides strong guarantees with a very limited TCB.

#### Protected-Module Architectures
Several security architectures with minimal TCB have been proposed, focusing on strong module isolation [3, 11, 16, 17, 23, 28]. Persistent storage access is managed via untrusted operating system services, and none address state continuity. Many of these systems can be adapted to use the state-continuity approach presented by Parno et al. [20], known as Memoir. Memoir uses TPM NVRAM to store freshness information upon every state update, but this significantly limits its applicability due to the slow speed and limited write endurance of NVRAM. The authors propose two solutions: adding capacitor-backed RAM to the TPM chip and Memoir-Opt, which stores freshness information in volatile TPM PCR registers, written to NVRAM during unexpected power loss. Both solutions rely on an uninterruptible power source, and failure can lead to a rollback attack. ICE, in contrast, is a passive state-continuity system that does not rely on an uninterruptible power source, ensuring security even if the capacitor is detached.

#### Special-Purpose Applications
Chun et al. [5] proposed append-only memory to prevent nodes in a distributed system from making different statements to different nodes. Levin et al. [14] proposed TrInc, a specialized system for attesting successive monotonic counters, which assumes a dedicated device to store attestation requests. Kotla et al. [13] proposed a system for offline data access, ensuring users cannot deny offline accesses without failing an audit and preventing future access after proving no prior access. While interesting, these solutions are specific and do not provide general state-continuity support.

### Conclusion

Providing support for state continuity is challenging due to the need for on-chip non-volatile memory, which requires modifications to fabrication processes. Off-chip storage of freshness information can be slow or vulnerable to attacks. We presented ICE, a state-continuous system and algorithm with two key properties: (1) the TPM chip is accessed only at boot time, with subsequent state updates requiring only updates to dedicated registers backed by a capacitor and non-volatile memory. (2) ICE is a passive security measure, ensuring state-continuity even if the main power supply is interrupted. ICE demonstrates that with limited and inexpensive hardware support, it enables the development of software-only implementations of trusted computing primitives, providing an interesting direction for future versions or revisions of hardware security modules like the TPM and enhancing security in low-end, resource-constrained applications.

### Acknowledgments

The authors thank all reviewers and proofreaders for their valuable comments. We also thank Frédéric Vogels and Dominique Devriese for their assistance with Coq. This work was supported in part by the Intel Labs University Research Office, the Research Fund KU Leuven, and the EU FP7 project NESSoS. Raoul Strackx holds a PhD grant from the Agency for Innovation by Science and Technology in Flanders (IWT).

### References

[1] P. Agten, R. Strackx, B. Jacobs, and F. Piessens. Secure compilation to modern processors. In CSF’12.
[2] I. Anati, S. Gueron, S. Johnson, and V. Scarlata. Innovative technology for CPU based attestation and sealing. In HASP’13.
[3] A. Azab, P. Ning, and X. Zhang. SICE: a hardware-level strongly isolated computing environment for x86 multi-core platforms. In CCS’11.
[4] D. Champagne and R. Lee. Scalable architectural support for trusted software. In HPCA’10.
[5] B.-G. Chun, P. Maniatis, S. Shenker, and J. Kubiatowicz. Attested append-only memory: Making adversaries stick to their word. In OSR’07.
[6] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A logic of secure systems and its application to trusted computing. In 30th IEEE Symposium on Security and Privacy, pages 221–236. IEEE, 2009.
[7] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In OSR’03.
[8] J. Halderman, S. Schoen, N. Heninger, W. Clarkson, W. Paul, J. Calandrino, A. Feldman, J. Appelbaum, and E. Felten. Lest we remember: Cold boot attacks on encryption keys. In USENIX’08.
[9] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo. Using innovative instructions to create trustworthy software solutions. In HASP’13.
[10] Intel Corporation. Intel 6 Series Chipset and Intel C200 Series Chipset, 2011.
[11] Intel Corporation. Software Guard Extensions Programming Reference, 2013.
[12] C. Jones. Tentative steps toward a development method for interfering programs.
[13] R. Kotla, T. Rodeheffer, I. Roy, P. Stuedi, and B. Wester. Pasture: secure offline data access using commodity trusted hardware. In OSDI’12.
[14] D. Levin, J. R. Douceur, J. R. Lorch, and T. Moscibroda. Trinc: Small trusted hardware for large distributed systems. In NSDI’09.
[15] D. Lie, T. Chandramohan, M. Mark, L. Patrick, B. Dan, M. John, and H. Mark. Architectural support for copy and tamper resistant software. In ASPLOS’00.
[16] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. In S&P’10.
[17] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: An execution infrastructure for TCB minimization. In EuroSys’08.
[18] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue, and U. R. Savagaonkar. Innovative instructions and software model for isolated execution. In HASP’13.
[19] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. V. Herrewege, C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens. Sancus: Low-cost trustworthy extensible networked devices with a zero-software trusted computing base. In Usenix’13.
[20] B. Parno, J. R. Lorch, J. R. Douceur, J. Mickens, and J. M. McCune. Memoir: Practical state continuity for protected modules. In S&P’11.
[21] M. Patrignani, P. Agten, R. Strackx, B. Jacobs, D. Clarke, and F. Piessens. Secure compilation to protected module architectures. In Accepted for publication in ACM Transactions on Programming Languages and Systems (TOPLAS).
[22] M. Patrignani, D. Clarke, and F. Piessens. Secure Compilation of Object-Oriented Components to Protected Module Architectures. In APLAS’13.
[23] D. P. Sahita R, Warrier U. Protecting Critical Applications on Mobile Platforms. Intel.
[24] D. Schellekens, P. Tuyls, and B. Preneel. Embedded trusted computing with authenticated non-volatile memory. In TRUST’08.
[25] L. Singaravelu, C. Pu, H. Härtig, and C. Helmuth. Reducing TCB complexity for security-sensitive applications: three case studies. In EuroSys ’06.
[26] E. R. Sparks. A security assessment of trusted platform modules. Technical report.
[27] R. Strackx, B. Jacobs, and F. Piessens. ICE: A passive, high-speed, state-continuity scheme (extended version). Technical report, KU Leuven, Sept. 2014.
[28] R. Strackx and F. Piessens. Fides: Selectively hardening software application components against kernel-level or process-level malware. In CCS’12.
[29] R. Strackx, F. Piessens, and B. Preneel. Efficient Isolation of Trusted Subsystems in Embedded Systems. In SecureComm’10.
[30] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and S. Devadas. AEGIS: Architecture for tamper-evident and tamper-resistant processing. In ICS’03.
[31] R. Ta-Min, L. Litty, and D. Lie. Splitting interfaces: Making trust between applications and operating systems configurable. In OSDI’06.
[32] C. Tarnovsky. Deconstructing a “secure” processor. In Black Hat’10.
[33] M. Technology. Hybrid memory - bridging the gap between DRAM speed and NAND nonvolatility.
[34] V. Technology. NV-DIMM: Achieving greater ROI from SSDs. Technical report.
[35] Trusted Computing Group. Design Principles Specification Version 1.2. 2011.
[36] A. Vasudevan, S. Chaki, L. Jia, J. McCune, J. Newsome, and A. Datta. Design, implementation and verification of an extensible and modular hypervisor framework. In S&P’13.
[37] P. Williams and R. Boivie. CPU support for secure executables. In TRUST’11.
[38] J. Winter and K. Dietrich. A hijacker’s guide to the LPC bus. In EuroPKI’11.