# Hardware Backdooring: A Practical Analysis

**Presenter:** Jonathan Brossard (Toucan System)

---

## Disclaimer
- We are not "terrorists."
- We will not release our Proof of Concept (PoC) backdoor.
- The x86 architecture is burdened by legacy, a fact well-known to governments but less so to the broader industry.
- There is a need to discuss these issues to find solutions.

---

## Overview
- **Motivation:** State-level backdooring.
- **Coreboot & x86 Architecture.**
- **State of the Art in Rootkitting and ROMkitting.**
- **Introduction to Rakshasa.**
- **Epic Evil Remote Carnal Pwnage (of Death).**
- **Why Cryptography (TrueCrypt/BitLocker/TPM) Won't Save Us.**
- **Backdooring Like a State.**

### Could a State (e.g., China) Backdoor All New Computers on Earth?

#### A Bit of x86 Architecture
- **State of the Art, Previous Work:**
  - **Early 1980s:** Brain virus, targeting the Master Boot Record (MBR).
  - **1980s-1990s:** Thousands of similar viruses.
  - **2007:** John Heasman (NGS Software) at Black Hat US: Backdoored EFI bootloader.
  - **2009:** Anibal Saco and Alfredo Ortega (Core Security) at CanSecWest: Patched/flashed Phoenix-Award BIOS.
  - **2009:** Peter Kleissner at Black Hat US: Stoned bootkit, which boots Windows, TrueCrypt, and loads unsigned kernel modules.
  - **2010:** Kumar and Kumar at HITB Malaysia: Vbootkit for bootkitting Windows 7.
  - **Piotr Bania, KonBoot:** Bootkits for any Windows (32/64-bit).
  - **2012:** Snare (Syscan): EFI rootkitting.

**Demo:** Bootkitting Windows

---

## Introducing Rakshasa

### Goals
- **Persistence.**
- **Stealth (virtually undetectable).**
- **Portability (OS-independent).**
- **Remote access and updates.**
- **State-level quality:** Plausible deniability, non-attribution.
- **Cross network perimeters (firewalls, etc.).**
- **Redundancy.**

### Design
- **Core Components:**
  - Coreboot
  - SeaBIOS
  - iPXE
  - Payloads
- **Built on Free Software:**
  - Portability, non-attribution, low development cost (~4 weeks), extremely hard to detect without false positives.
  - **Payload:** Reverse-engineered/refactored KonBoot payload (2 days of work).

### Features
- **Flash the BIOS (Coreboot + PCI ROMs such as iPXE).**
- **Flash the network card or other PCI devices (redundancy).**
- **Boot a payload over the network (bootkit).**
- **Boot a payload over WiFi/WiMAX (bypassing network detection, IDS/IPS).**
- **Remotely reflash the BIOS/network card if necessary.**

### Embedded Features
- **Remove NX bit (from BIOS or PCI):** Enables executable heap/stack.
- **Remove CPU updates (microcodes).**
- **Remove anti-SMM protections:** Local root access, permanently lowering security levels.
- **Persistent even if the hard drive is removed/restored.**
- **Optionally disable ASLR (bootkitting) by patching the seed in kernel land on Windows.**

### Remote Payload
- **Bootkit future OSes.**
- **Update/remove/reflash firmwares (PCI, BIOS).**
- **Currently capable of bootkitting any version of Windows (32/64-bit).**
- **Use a minimal Linux initrd to modify the filesystem (e.g., /etc/shadow on UNIX, add new account with ADMIN privileges on Windows, enable remote desktop, etc.).**

### Stealth
- **No disk modifications:** No evidence on the filesystem.
- **Remotely boot from an alternate payload or OS:** Fake TrueCrypt/BitLocker prompts.
- **Optionally boot from a WiFi/WiMAX stack:** No network evidence on the LAN.
- **Fake BIOS menus if necessary:** Use an embedded CMOS image. Store encryption keys/backdoor states between reboots using real CMOS NVRAM.

### Why Coreboot/SeaBIOS/iPXE?
- **Portability:** Leverage existing reverse engineering.
- **Modularity:** Embed existing payloads (floppy or CD-ROM images) and PCI ROMs directly in the main Coreboot ROM.
- **Network Stack:** IP/UDP/TCP, DNS, HTTP(S), TFTP, FTP, etc. (e.g., TCP over DNS, NTP).

**Example Code:**
```asm
section .text 
;--------------------------
; BIOS Expansion ROM Header
;--------------------------
        db 0x55         ; Signature
        db 0xaa         ; Signature
        db 17           ; Number of sectors
_start:
```

**Demo:** Evil Remote Carnal Pwnage (of Death)
- **I can write blogs too... Muhahahaha...**

### Building a Botnet
- **HTTPS + Asymmetric Cryptography:** Client-side certificates, signed updates.
- **Fast Flux and/or Precomputed IP Addresses.**
- **Avoid DNS Takeovers:** Rotate C&C servers on innocent websites, use asymmetric crypto for updates.

### Why Cryptography Won't Save You
- **Fake Boot/Password Prompts:** By booting a remote OS (TrueCrypt/BitLocker).
- **Keyboard Emulation:** Once the password is known, the BIOS backdoor can emulate keyboard typing in 16-bit real mode.
- **Patch Back Original BIOS/Firmwares Remotely.**

**Demos:**
- **Example 1:** 3-year-old bootkit.
- **Example 2:** 3-year-old bootkit with a simple packer.

### Realistic Attack Scenarios
- **Physical Access:** Anyone in the supply chain can backdoor your hardware. Flash from a bootable USB stick (<3 minutes).
- **Remote Root Compromise:**
  - If (OS == Linux) { flash_bios; } else { pivot_over_MBR; }
- **Purchase Pre-Backdoored Hardware.**

### Bonus: Backdooring the Datacenter

### Remediation
- **Flash any firmware upon receipt of new hardware with open-source software.**
- **Perform checksums of all firmwares by physically extracting them (FPGA, etc.):** Costly.
- **Verify the integrity of all firmwares periodically.**
- **Update forensics best practices:**
  - Include firmwares in Scope of Work (SoW).
  - Dispose of the computer in case of intrusion.
- **Even then, not entirely satisfying:** The backdoor can flash the original firmwares back remotely.

### Side Note on Remote Flashing
- **BIOS Flashing:** Not a problem; the flasher (Linux-based) is universal.
- **PCI ROMs Flashing:** Vendor-dependent.
- **Detect Network Card Manufacturer from Remote C&C:**
  - iPXE allows scripting, e.g., sending MAC address as an URL parameter.
  - From the MAC, get the OUI number server-side.
  - Deduce the manufacturer and send the proper flashing tool as an embedded OS to the backdoor.

### Backdooring Like a State
- **Rule #1: Non-Attribution**
  - You didn't write the free software in the first place.
  - Add misleading strings, e.g., in Mandarin.
- **Rule #2: Plausible Deniability**
  - Use a known remote vulnerability in a network card firmware (e.g., Duflot's CVE-2010-0104).
  - "Honest mistake" if discovered.
  - Remotely flash the BIOS.
  - Do your evil thing.
  - Restore the BIOS remotely.

**Questions?**