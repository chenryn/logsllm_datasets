Component declaration should contain a whitelist of properties, e.g. it could
require that you list the property name under `propTypes` even if it is
assigned `null` (that could mean "any type", a broader version of
`React.PropTypes.node`).
If a property that is not defined in `propTypes` is passed to a component
declaration an error must be raised.
This would provide several benefits:
  * Would help to catch TYPOs
  * Would promote type declaration
  * Would prevent orphan properties
## Catching Typos
Suppose a component that generates a different type of input depending on a
`type` value. This component has a default `type` value "text".
    var Input = React.createClass({
        getDefaultProps: function () {
            return {
                type: 'text'
            }
        },
        render: function () {
            // Different logic defending on the type name.
            // this.props.type === 'text'
            return ;
        }
    });
If `Input` instance declaration is defined with a typo in the `type` property,
it would not be an obvious error.
Raising an error "Unknown property 'tupe'." would help to catch the error.
## Promoting Type Declaration
If property names are required to be listed under `propTypes`, it requires
little extra effort to define their types.
    var Input = React.createClass({
        propTypes: {
            type: React.PropTypes.string,
            // type: null
        },
        render: function () {
            return ;
        }
    });
Furthermore, we are used to think about _code-length_ in terms of the lines of
code. The fact that type declaration at the moment adds extra lines might be
discouraging some developers from doing it. This thought is only to boost the
importance of the earlier argument.
## Preventing Orphan Properties
This is especially relevant when using spread operator inheritance.
Suppose an instance of a simple (`Input`) component is declared using a spread
operator.
, where `generalFormProps` is an object containing many properties of which
just some apply to `Input` component. In this scenario, each `Input` instance
would have a copy of those property values (dead weight).