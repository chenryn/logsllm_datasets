# Delegatable Pseudorandom Functions and Applications

**Authors:**
- Aggelos Kiayias
  - Dept. of Informatics & Telecommunications
  - National and Kapodistrian University of Athens, Greece
  - Email: [EMAIL]
- Stavros Papadopoulos
  - Dept. of Computer Science & Engineering
  - HKUST, Hong Kong
  - Email: [EMAIL]
- Nikos Triandopoulos
  - RSA Laboratories
  - Cambridge, MA, USA
  - Email: [EMAIL]
- Thomas Zacharias
  - Dept. of Informatics & Telecommunications
  - National and Kapodistrian University of Athens, Greece
  - Email: [EMAIL]

## Abstract
We introduce the problem of delegating the evaluation of a pseudorandom function (PRF) to an untrusted proxy and propose a new cryptographic primitive called delegatable pseudorandom functions (DPRFs). A DPRF allows a proxy to evaluate a PRF on a strict subset of its domain using a trapdoor derived from the DPRF secret key. The trapdoor is constructed based on a policy predicate that determines the subset of input values on which the proxy is allowed to compute. The main challenge in constructing DPRFs is to achieve bandwidth efficiency while maintaining the pseudorandomness of unknown values against an adaptive attacker. Additionally, we introduce a property called policy privacy, where any two delegation predicates remain indistinguishable to the proxy. Achieving this introduces new design challenges as policy privacy and bandwidth efficiency are seemingly conflicting goals.

For the important class of policy predicates described as 1-dimensional ranges, we devise two DPRF constructions and rigorously prove their security. Built upon the well-known tree-based GGM PRF family, our constructions are generic and feature logarithmic delegation size in the number of values conforming to the policy predicate. At only a constant-factor efficiency reduction, our second construction also achieves policy privacy. Finally, we discuss how the new security and efficiency properties of our DPRF schemes make them particularly useful in numerous security applications, including RFID, symmetric searchable encryption, and broadcast encryption.

## Introduction
The secure delegation of computational tasks to untrusted third parties is a significant research area. Secure delegation involves designing protocols that allow controlled authorization for an untrusted party to compute a given function while achieving target security properties such as verifiability of results or privacy of inputs/outputs, and preserving protocol efficiency. While there has been extensive work on the delegation of general functionalities and specific cryptographic primitives, pseudorandom functions (PRFs), which are fundamental for emulating perfect randomness via keyed functions, have not been explicitly studied in the context of delegation. We initiate a study on this matter.

### A New PRF Concept
We introduce delegatable pseudorandom functions (DPRFs), a novel cryptographic primitive that enables the delegation of PRF evaluation to an untrusted proxy according to a given predicate. Specifically, let \( F \) be a PRF family, and \( P \) a set of predicates, called the delegation policy, defined over the domain of \( F \). A DPRF is a triplet \( (F, T, C) \) constructed with respect to \( P \), which provides the functionality shown in Figure 1. For any secret key \( k \) and a predicate \( P \in P \), the delegator computes a trapdoor \( \tau \) via algorithm \( T \), and transmits \( \tau \) to the proxy. The proxy then runs algorithm \( C \) on \( \tau \) to derive exactly the set of PRF values \( B_P = \{ f_k(x) \mid P(x) \} \), where \( f_k \in F \), enabling the evaluation of PRF \( f_k \) subject to predicate \( P \) without explicit knowledge of the secret key \( k \) or the input values \( A_P = \{ x \mid P(x) \} \).

### Motivation and Requirements
The primary motivation for DPRFs is bandwidth efficiency. As long as the trapdoor \( \tau \) is sublinear in the size \( |B_P| \) of delegated PRF values, the delegation is meaningful as the delegator conserves resources. Simultaneously, the DPRF must retain the security properties of the underlying PRF, namely, pseudorandomness for any value \( x \) conforming to the delegation predicate \( P \), and unpredictability for any non-conforming value \( x \) such that \( \neg P(x) \). Additionally, a DPRF can optionally satisfy a policy-privacy property, which prevents the proxy from inferring information about \( P \) or the delegated set \( A_P \) from the trapdoor \( \tau \).

### Our Definitional Framework
We introduce a formal definitional framework for DPRFs, capturing all the technical requirements. We define the correctness and security requirements that any DPRF should meet. Correctness ensures the proxy can successfully evaluate the PRF on exactly those inputs specified by predicate \( P \). Security ensures that the delegation capabilities do not compromise the core pseudorandomness property. This condition goes beyond the standard security definition of PRFs, as the pseudorandomness attacker may now adaptively query a trapdoor oracle for delegation on predicates of its choice. Policy-privacy captures the inability of a malicious proxy to learn any non-trivial property about the delegated set \( A_P \). Our security notion postulates that for any two predicates \( P \) and \( P' \), the corresponding trapdoors are indistinguishable, provided \( |A_P| = |A_{P'}| \) and the adversary issues no delegation queries that trivially separate \( B_P \) and \( B_{P'} \).

### GGM-Based Realization for Range Predicates
We devise two bandwidth-efficient and provably secure DPRF constructions for the case where the delegation policy contains predicates described by 1-dimensional ranges. Our first DPRF scheme, called Best Range Cover (BRC), relies on the well-known GGM PRF family. This family defines a PRF based on the hierarchical application of any length-doubling pseudorandom generator (PRG) according to the structure induced by a tree, where input values are uniquely mapped to root-to-leaf paths. By exploiting these characteristics, our BRC scheme features logarithmic delegation size in the number \( |A_P| \) of values conforming to the policy predicate, with the trapdoor \( \tau \) comprising a subset \( I_P \) of internal PRF values that optimally cover the target range \( B_P \). We provide a formal security proof for this scheme, which does not trivially follow from the GGM security proof due to the adversary's ability to employ delegation queries to learn internal PRF values.

However, our BRC scheme does not satisfy policy privacy, as the structure of the PRF values in \( I_P \) leaks information about predicate \( P \). This motivates our second construction, called Uniform Range Cover (URC). URC augments BRC to render all trapdoors corresponding to ranges of the same size indistinguishable. This is achieved by carefully having \( \tau \) comprise a subset \( I'_P \) of PRF values that cover the target range \( B_P \) less optimally. \( I'_P \) contains PRF values that are descendants of those values in \( I_P \) at a tree height that depends solely on \( |B_P| \). URC retains the asymptotic logarithmic bandwidth complexity of BRC and its DPRF security but crucially achieves a relaxed policy-privacy notion appropriate for range predicates, which we call union policy privacy.

### Main Applications
Our DPRF schemes, equipped with bandwidth efficiency, security, and policy privacy (for URC), are applicable to a wide range of information security and applied cryptography settings involving controlled authorization of PRF-based computations. Generally, DPRFs are particularly useful in applications that rely on the evaluation of (secret) key-based cryptographic primitives on specific inputs according to an underlying policy. Using a DPRF scheme allows cost-efficient, secure, and private key management for an untrusted proxy who is otherwise capable of executing a particular computational task. We outline several such applications, including authentication and access control in RFIDs, efficient batch querying in searchable encryption, and broadcast encryption. Due to the underlying GGM building component, our DPRFs are extremely lightweight, as their practical implementation entails a few repeated applications of any efficient candidate instantiation of a length-doubling PRG.

### Summary of Contributions
- **Initiation of Study:** We initiate the study of policy-based delegation of the task of evaluating a PRF on specific input values and introduce the concept of DPRFs.
- **Definitional Framework:** We develop a general and rigorous definitional framework for the new DPRF primitive, capturing properties such as bandwidth efficiency, correctness, security, and policy privacy, and offer a relaxed union policy privacy necessary for tree-wise DPRF constructions.
- **Construction Framework:** We present a framework for building DPRF schemes for the important case where the delegation policy is governed by range predicates over inputs, augmenting the generic GGM construction framework to provide two concrete DPRF schemes, BRC and URC.
- **Security Proofs:** We prove the security of our constructions in a modular way, providing the first security analysis of similar GGM-based key-delegation schemes and the union-policy privacy of URC.
- **Applications:** We describe several key applications of DPRFs in the context of efficient key-delegation protocols for authentication, access control, and encryption purposes.

### Paper Organization
- **Section 2:** Reviews related work.
- **Section 3:** Formulates the DPRF primitive.
- **Section 4:** Presents our two DPRF constructions for the case of range policies.
- **Section 5:** Elaborates on the applicability of DPRFs.
- **Section 6:** Concludes our paper with directions for future work.
- **Appendix:** Contains selected proofs.

## Related Work
### Secure Delegation of Computations
The notion of delegation of cryptographic operations is well-established, starting from early work on proxy signatures and proxy cryptography. Basic primitives such as signatures and encryption have been studied in the context of an untrusted proxy authorized to operate on signatures or ciphertexts. Recently, there has been increased interest in verifiability and privacy of outsourced computations or specific crypto-related operations. However, to the best of our knowledge, no prior work explicitly and formally examines the delegation of PRFs.

### PRF Extensions
Closer to our new DPRF primitive are known extensions of PRFs, such as verifiable PRFs (VPRFs) and oblivious PRFs (OPRFs). A VPRF provides a PRF value along with a non-interactive proof, enabling anyone to verify the correctness of the PRF value. Although such proofs are useful in third-party settings, they are not related to the delegation of the PRF evaluation without the secret key. Similarly, an OPRF is a two-party protocol that securely implements the functionality \( (k, x) \rightarrow (\perp, f_k(x)) \)—that is, a party learns nothing about the key \( k \) or the input \( x \).