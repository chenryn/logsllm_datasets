entity, and r(h1, . . . , hn) is a role name. For r(h1, . . . , hn)
to be a role name requires that r is a role identiﬁer, and that
for each i in 1..n, hi is a data term having the type of the ith
parameter of r. In RT1, a data term is either a constant or a
variable, with just one exception in the type-3 credential be-
low. We say that a credential with the head A.r(h1, . . . , hn)
deﬁnes the role A.r(h1, . . . , hn). (This choice of terminol-
ogy is motivated by analogy to name deﬁnitions in SDSI,
as well as to predicate deﬁnitions in logic programming.)
Such a credential must be issued by A, and so we call A the
issuer of this credential. In the following, we present four
types of credentials, each having a different form of body
corresponding to a different way of deﬁning role member-
ship.
• Type-1: A.r(h1, . . . , hn)←− D.
A and D are (possibly the same) entities. This cre-
dential means that A deﬁnes D to be a member of A’s
R = r(h1, . . . , hn) role. In the attribute-based view,
this credential can be read as D has the attribute A.R,
or equivalently, A says that D has the attribute R.
• Type-2: A.r(h1, . . . , hn)←− B.r1(s1, . . . , sm)
A and B are (possibly the same) entities, and R =
r(h1, . . . , hn) and R1 = r1(s1, . . . , sm) are (possibly
the same) role names.
6
This credential means that A deﬁnes its R role to in-
clude all members of B’s R1 role. In other words, A
deﬁnes the role B.R1 to be more powerful than A.R,
in the sense that a member of B.R1 is automatically a
member of A.R and thus can do anything that the role
A.R is authorized to do. The attribute-based reading
of this credential is: If B says that an entity has the
attribute R1, then A says that it has the attribute R.
• Type-3:
A.r(h1, . . . , hn)←− A.r1(t1, . . . , t‘).r2(s1, . . . , sm)
We call A.r1(t1, . . . , t‘).r2(s1, . . . , sm) a linked role.
The attribute-based reading of this credential is:
If
A says that an entity B has the attribute R1 =
r1(t1, . . . , t‘), and B says that an entity D has the at-
tribute R2 = r1(s1, . . . , sm), then A says that D has
the attribute R = r(h1, . . . , hn). If R and R2 are the
same, A is delegating its authority over R2 to anyone
who A believes to have the attribute R1. This is an
attribute-based delegation: A identiﬁes B as an author-
ity on R2 not by using (or knowing) B’s identity, but
by another attribute of B (viz., R1).
The data terms in the ﬁrst role name r1(t1, . . . , t‘) in
the linked role, i.e., t1, . . . , t‘, can be a special key-
word “this”. It has the predeﬁned type entity. The
meaning of it will be explained in section 3.3.
• Type-4: A.R←− B1.R1 ∩ B2.R2 ∩ ··· ∩ Bk.Rk
In this credential, k is an integer greater than 1. We
call B1.R1 ∩ B2.R2 ∩ ··· ∩ Bk.Rk an intersection.2
This credential means that if an entity is a member of
B1.R1, B2.R2, . . . , and Bk.Rk, then it is also a mem-
ber of A.R. The attribute-based reading of this creden-
tial is: A believes that anyone who has all the attributes
B1.R1, . . . , Bk.Rk also has the attribute R.
A variable that appears in an RT1 credential can be either
named or anonymous. A named variable takes the form of
a question mark “?” followed by an alpha-numeric string.
If a variable appears only once in a credential, it does not
need to have a name and can be anonymous. An anony-
mous variable is represented by the question mark alone.
Note that two different appearances of “?” in a credential
represent two distinct variables. When a variable occurs as
a parameter to a role name, it is implicitly assigned to have
the type of that parameter.
A variable may optionally have one or more constraints
following its name, separated by a colon. Each constraint
is given by a static value set from which possible values of
2In [20], an intersection can also contain entities or linked roles. The
restriction here does not change expressive power: one can always add
additional intermediate roles.
the variable can be drawn. The syntax of static value sets is
introduced in section 3.2.
We now introduce the notion of well-formed credentials.
In any RT system, a credential that is not well-formed is ig-
nored. An RT1 credential is well-formed if all named vari-
ables are well-typed and safe. A named variable is well-
typed if it has the same type across all appearances in one
credential. Two types are the same if they have the same
name. A variable is safe if it appears in the body. As will
be seen in section 3.3, this safety requirement ensures that
RT1 credentials can be translated into safe Datalog rules,
thus help ensures tractability of RT1.
Example 2 A company Alpha allows the manager of an
employee to evaluate an employee.
Alpha.evaluatorOf(?Y)←−Alpha.managerOf(?Y)
This policy cannot be expressed in RT0.
3.2 Data types in RT1
RT1 has the following data types.
• Integer types. An integer type is ordered. When
declaring an integer type, one can restrict its values
by optionally specifying four facets: a min (default is
−∞), a max (default is ∞), a step s (default is 1), and
a base value t (default is 0). The legal values of this
type include all integer value v’s such that v = t + ks
for some integer k and that min ≤ v ≤ max.
• Closed enumeration types. The declaration of a
closed enumeration type declares it as either ordered
or unordered, and lists the allowed values of this type.
An ordered type has a corresponding integer type; the
default is [1..n] for a type of n elements. The cor-
responding type can also be explicitly speciﬁed. The
boolean type is a predeﬁned unordered closed enumer-
ation type.
• Open enumeration types. An open enumeration type
is unordered. The allowed values of an open enumera-
tion type are not given statically; instead, each constant
that appears in a place that requires this type is a value
of this type. The entity type is a predeﬁned open enu-
meration type.
• Float types. A ﬂoat type is ordered. Deﬁning a ﬂoat
type is very similar to deﬁning an integer type. One
can optionally specify the four facets, but these facets
now take ﬂoat values: a min (default is −∞), a max
(default is ∞), a step s (default is 1.0), and a typical
value t (default is 0.0). The legal values of this type
include all values v’s such that v = t + ks for some
integer k and that min ≤ v ≤ max.
7
• Date and time types. There are predeﬁned types for
date, time, etc.These types are ordered.
For each type, one can write static value sets, which can
be used to constrain variables in credentials. A value set
is said to be static if the values in it do not depend on cre-
dentials. By contrast, a role can be viewed as a dynamic
value set of the entity type. A static value set of an ordered
type τ is represented by a set of non-intersecting ranges
{l1..u1, l2..u2, . . . , ln..un}, where li’s and ui’s are values
of τ . When li = ui, it can be written as just li. A static
value set for an unordered type takes the form {v1, . . . , vn},
where vi’s are constants of this type. Note that testing
whether a constant is in a static value set takes time at most
linear in the representation size of the value set.
Example 3 A University StateU gives special privileges to
graduates from the ﬁrst four years of its operation, no matter
which degree was conferred.
StateU.foundingAlumni ←−
StateU.diploma(?, ?Year:[1955..1958])
Here, diploma is a role identiﬁer that takes two parameters,
a degree and a year, and “?” is an anonymous variable.
3.3 Translation to logic rules and tractability
We now deﬁne a translation from each RT1 credential to
a logical rule. This translation serves both as a deﬁnition
of the semantics and also as one possible implementation
mechanism. In the output language, we use a special binary
predicate isMember, which takes an entity and a role as ar-
guments. We also use domain predicates: for each static
value set V , a unary predicate pV is introduced, in which
pV (v) is true for each value v ∈ V . These domain pred-
icates are used for translating constraints on variables into
logical atoms. Credentials are translated as follows:
1. From A.R←− D to
isMember(D, A.R).
A.R can be viewed as a shorthand for role(A, R).
2. From A.R←− B.R1 to
isMember(?z, A.R)←−
isMember(?z, B.R1),
[conditions].
In the above, ?z is a variable, which we call the implicit
variable.
The optional conditions part comes from the con-
straints on variables. For each static value set V used
as a constraint on a variable ?x in the credential, the
conditions part includes a logical atom pV (?x), which
we call an arithmetic atom. We call each logical atom
of isMember a relational atom.
In the rest of the paper, we often omit the optional
conditions part in translation formulas. Remember
that they need to be added when there are constraints
on variables.
3. From A.R←− A.R1.R2 to
isMember(?z, A.R)←−
isMember(?x, A.R1),
isMember(?z, ?x.R2).
Recall that the keyword “this” can be used as a data
term in R1. Each appearance of “this” is translated
to the implicit variable ?z. See example 4 for use of
this.
4. From A.R←− B1.R1 ∩ B2.R2 ∩ ··· ∩ Bk.Rk to
isMember(?z, A.R)←−
isMember(?z, B1.R1),
··· ,
isMember(?z, Bk.Rk).
Local access control policies take the same form as cre-
dentials. Recall that in RT , permissions are also repre-
sented as roles. When an entity D submits a request req, and
this request is governed by the role A.R, the request should
be authorized if isMember(D, A.R) is provable from sup-
porting credentials and policies. See [20] for work on col-
lecting credentials when they are stored in a distributed
fashion.
Example 4 As part of its annual review process, Alpha
gives a pay raise to an employee if someone authorized to
evaluate the employee says that his performance was good.
Alpha.payRaise ←−
Alpha.evaluatorOf(this).goodPerformance
Rules resulting from the above translation can be
straightforwardly translated into Datalog by translating
isMember(?z, A.r(h1, . . . , hn))
into
member(A, r, h1, . . . , hn, ?z).
Given a set of RT1 credentials C, let Trans(C) be the
Datalog program resulting from the translation. The im-
plications of C, deﬁned as the set of membership relation-
ships implied by C, is determined by the minimal model of
Trans(C). In the following, we show that RT1 is tractable.
Proposition 1 Given a set C of RT1 credentials, assuming
that each credential in C has at most v variables and that
each role name has at most p arguments, then computing the
implications of C can be done in time O(M N v+2), where
N = max(N0, pN0), N0 is the number of credentials in C,
and M is the size of C.
8
Proof. An obvious evaluation algorithm is as follows. First
compute Trans(C). Then compute all ground instances
of the resulting rules obtained by substituting variables by
matching-type constants. The arithmetic atoms generated
by constraints are evaluated during the instantiation process,
and ground rules are thrown away if these constraints are
not satisﬁed. Finally compute the model of the remaining
set of ground rules. Since computing the minimal model of
a set of ground Horn clauses can be done in linear time [9],
the total time this process takes is linear in the size of the
resulting ground program.
Consider the translation of one credential cred,
let
Trans(cred) be the resulting rule. Trans(cred) has up to v
variables coming from cred and up to 2 variables introduced
during the translation. For the variables from cred, the in-
stantiation process considers only the (at most pN0) con-
stants that appear as parameters to role names in the heads
of credentials in C because only these constants can appear
as the ci’s in a ground atom member(A, r, c1, . . . , cq, D) in
the minimal model of Trans(C). This follows because each
variable in the head of a credential must also appear in the
body. If cred is a type-2, 3, or 4 credential, Trans(cred)
also has an implicit variable ?z; to instantiate ?z, only the
(at most N0) entities that appear on the right-hand sides of
type-1 credentials in C need to be considered. If cred is a
type-3 credential, then in addition to ?z, Trans(cred) also
has another variable ?x, which is instantiated only to the (at
most N0) entities that appear as the issuers of credentials in
C.
Therefore, the number of variables per rule is at most
v + 2 after
the translation, and there are O(N =
max(N0, pN0)) ways to instantiate each variable. For each
rule, there are O(N v+2) ways to instantiate it, and so the
size of the ground program is O(M N v+2).
We argue that the variable bound v is typically bounded
by 2p, where p is the maximum arity of all role names in
a vocabulary. A type-1 credential has no variable; a type-2
credential has at most p variables (because each variable in
the head also appears in the body); a type-3 credential has
at most 2p variables; and a type-4 credential has at most kp
variables. The bound kp is reached when each of the in-
tersecting roles contains an almost completely different set
of variables,3 which is rarely the case in practical policies.
Also note that if one makes the restriction that each type-4
credential can have only 2 roles in the body, then the number
of variables is bounded by 2p.
3When the roles of an intersection can be partitioned into collections
containing disjoint sets of variables, the credential can be broken up into
several credentials with fewer variables per rule. However some intersec-
tions containing lots of variables cannot be broken up. An extreme case has
p2 variables arranged in a p × p matrix and 2p atoms, each atom contains
a row or a column of the matrix. See [13] and the references in it for study
on tractability of conjunctive queries.
Given a set of credentials C, the time to answer a sin-
gle request is clearly bounded by the time to compute all
the implications of C, which is polynomial is the size of
C. A trivial algorithm is to ﬁrst compute the minimal
model of Trans(C) and check whether the request is true
in the model. However, there are efﬁcient ways to answer
a query without computing the minimal model ﬁrst. There
has been extensive work in logic programming and deduc-
tive databases on how to answer queries more efﬁciently,
e.g., [22, 25].
In systems where the requester presents credentials to
prove authorization, one might be concerned about the com-
plexity of searching for conclusions of those credentials,
and potential denial-of-service attacks. To combat this, the
requester can be required to present a credential chain that is
organized into a proof of authorization, where proof check-
ing can be performed linearly.
4 RT2: Describing Logical Rights
RT2 adds to RT1 the notion of o-sets, which are used
to group logically related objects such as resources, access
modes, etc. An o-set is formed by an entity followed by an
o-set name, separated by a dot. An o-set name is formed by
applying an o-set identiﬁer (o-set id for short) to a tuple of