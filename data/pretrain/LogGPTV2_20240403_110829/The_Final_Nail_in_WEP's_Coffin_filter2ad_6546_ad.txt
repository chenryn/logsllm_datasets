Our implementation was for the FreeBSD wi driver. We
implemented the airjack functionality and also the AUX
overwriting. There were also other subtle aspects which
were encountered and needed to be resolved. For example,
the More Fragments bit needs to be set only when the over-
write is performed and not when the packet is ﬁrst queued.
Another issue is that when the WEP bit is set, it is cleared
after the ﬁrmware processing although the packet does in-
deed get transmitted using WEP. However, it is important
not to set the WEP bit when performing the re-write or
the card will not transmit. Obviously none of this is doc-
umented which caused the authors to have great fun.
The main limitation with our Prism2 implementation has
to do with the fact that reception is difﬁcult immediately
after transmission. For example it is not possible to receive
the 802.11 ACKs after each fragment is sent, reducing the
reliability of the attack in noisy environments.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Atheros [3] cards are mostly software radios, making
them ideal for packet injection. We modiﬁed the FreeBSD
ath driver in order to allow the sending and reception of
raw frames. Reception is easily achieved by simply chang-
ing the RX ﬁlter to accept all frames, including control
frames. Control frames turn out to be very useful since the
card is able to see ACKs for data being sent, making it pos-
sible to implement re-transmissions in the attack.
Atheros will readily send out WEP fragments. It does
mangle the fragment and sequence number, but the ﬁx is
simpler than with Prism2—the packet needs to be queued
with a type of ‘2’ (which indicates PS-Poll frames). In or-
der to eliminate re-transmissions from the ﬁrmware, a ﬂag
indicating that the packet requires no ACKs exists.
The only limitation with our Atheros implementation is
its inability to send ACKs in time. The temporary work-
around is to connect another wireless card and use its MAC
address while performing the attack. Its ﬁrmware will auto-
matically respond to data packets with ACKs.
3.3. Proof of Concept: wesside
We
tool
implemented a proof-of-concept
called
Its main purpose is to recover the WEP
wesside [6].
key, since we felt that was the long-term objective of most
attackers, although we have already demonstrated that it is
possible to decrypt trafﬁc even without such knowledge.
The tool will therefore use the fragmentation attack for
generating a high volume of trafﬁc in order to speed up the
weak IV attack. When launched with no command line
arguments, it does the following:
1. Channel hops looking for a WEP network.
2. It then tries to authenticate and associate. If authenti-
cation fails, it attempts to ﬁnd a MAC address to spoof
by eavesdropping associated clients.
3. After it eavesdrops a single data packet, it discovers
at least 128 bytes of keystream by sending out larger
broadcasts and intercepting the relayed packets.
4. After it eavesdrops an ARP request, it decrypts the
IP address by guessing the next four bytes of the
keystream using multicast frames.
5. It ﬂoods the network with ARP requests for the de-
crypted IP address.
6. It launches aircrack [12] (v2.1) every 100,000
packets captured for one minute and attempts to de-
crypt the key. If 3,000,000 packets have been captured
so far, the cracking time is increased to ten minutes and
cracking is started every 1,000,000 packets.
The tool could be much smarter, and it is, but only when
launched with at least one command line argument: the IP
address of an Internet host. The tool acts as described pre-
viously but with the following differences.
First, the address of the router is discovered. After the IP
network address is decrypted, an ARP request for the IP ad-
dress terminating with “.1” is sent and the reply is waited
for (the tool assumes this will be the router). Although
the ARP response is encrypted, the MAC address of the
router is all we need, and this is in clear-text in the 802.11
header. The IP address ending in “.123” is assigned to the
attacker. A full “product” could use smarter heuristics, but
these are sufﬁcient for a proof-of-concept and actually work
in most cases. As he can send trafﬁc, the dedicated attacker
might send a DHCP request and decrypt the response via
the keystream expansion technique.
Next, a pathway into the network from outside is opened.
After the MAC address of the router is obtained, a UDP
packet to the Internet host is sent every ﬁve seconds to open
a hole in any ﬁrewall or NAT. ARP requests also continue to
be sent to maintain the attacker’s IP address in the router’s
ARP cache. This allows IP trafﬁc to be forwarded back to
the attacker. Finally, depending on the attacker’s choice, the
Internet host may either send short packets to perform the
weak IV key attack, or it may send long packets to build a
keystream dictionary.
The tool also binds to a TAP interface in order to imple-
ment the dictionary attack. A TAP interface is a virtual net-
work interface, normally used by VPN software. If the user
transmits via the TAP interface, wesside will encrypt the
data using a known keystream and transmit it to the wire-
less network. If data with a known IV (an IV which has
an entry in the dictionary) traverses the network, our tool
will decrypt the packet and originate it from the TAP inter-
face. This mechanism allows the attacker to use the wireless
network (without knowing the key) as if it were connected
via the TAP network interface. Transmission will always
be possible although decryption is limited by the number of
entries in the IV dictionary and their popularity.
3.3.1. Missing Enhancements
Only a limited subset of the attacks we described have been
implemented in wesside. Our primary goal was to ex-
plore the complexity of building a fully automatic tool and
its efﬁciency in recovering the key of a WEP network.
In fact, the attacks we believe to be the most dangerous
and cunning are missing. For example there is no built-
in support for decrypting data by re-sending it to the Inter-
net. We tested this attack separately. An implementation
could be built once again by using TAP interfaces. Trans-
mission is achieved just like in wesside. For decryption,
all data packets (or those which match a ﬁlter) on the wire-
less network may be re-sent to the Internet. If the attacker
has an external Internet connection, his buddy may forward
the data back to him. The data may then be originated from
the TAP interface, just as if it were decrypted by using the
IV dictionary. The TAP interface will look exactly like a
normal wireless interface, although no WEP key is required.
The other main attack which is not directly available to
the user is decryption via keystream expansion, although
there is an API for it, as wesside uses it internally. Be-
cause of the nature of the attack (≈ 128 packets sent per
byte decrypted) ﬁlters are necessary in order to decrypt only
very speciﬁc data packets which look “interesting”. De-
cryption using this technique takes under ﬁve minutes per
packet.
The only keystream based attack implemented is the dic-
tionary attack. The main reason for including this attack
was to explore how usable its implementation would be.
Thanks to TAP interfaces and making wesside act in a
similar way to a VPN client, the resulting implementation
turned out to be very simple to use.
4. Evaluation
In this section, we show the performance that may be
achieved when using wesside. This is important, as it
establishes the degree to which real networks will be vul-
nerable. The extent to which the fragmentation attack is a
serious threat in practice will be evident from the results.
Our tests use common everyday hardware. The setup for
all the experiments uses a Linksys WRT54G AP. The “at-
tacking” host is a Pentium IV 2.4GHz laptop with 512MB
RAM and an Atheros 802.11g card. The “Internet” host is
an old Celeron 400MHz laptop with 200MB RAM. This
setup is best-case in terms of connectivity with the “In-
ternet” since the ﬂood host is connected via Ethernet to
the WAN port, effectively having a 100Mbit/s connection.
When presenting the results, we will calculate how much
bandwidth is actually being used in order to demonstrate
that this throughput could be achieved on most real Internet
links.
In all cases, once the wesside tool is started, a single
ARP request is generated by a host attached to the LAN
port of the AP. This is the requirement to bootstrap the
fragmentation attack. Although any packet type will allow
keystream determination, IP discovery has only been imple-
mented on ARP packets and for that reason such a packet
is generated. This requirement does not distort results too
much, as IP packet headers (and thus the source address)
may be decrypted in the same way as ARP packets, without
taking too long. Also, the tool could force a wireless client
to disconnect by spooﬁng a de-authentication management
frame. When the client (automatically) re-associates, it will
most likely send an ARP request for its router.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
The efﬁciency of wesside is measured in two stages.
The ﬁrst stage is bootstrapping, which involves recovering
a keystream and determining the network parameters and
conﬁguration before ﬂooding may commence. The metric
used in this stage is time—the quicker the better.
The second part of the attack either involves cracking
the key, building a dictionary, or both. In all cases, the more
data packets received, the better. For this part of the attack,
the metric used is packets received per second.
4.1. Bootstrap speed
The bootstrap of the attack includes determining a
keystream, determining an IP and determining the router’s
MAC address. All of this is independent of the key size and
its complexity, since no attacks are being performed on the
key scheduling algorithm. Thus, the metric obtained for the
bootstrapping procedure should be very similar across all
networks and conﬁgurations.
The results are as follows. From when the ﬁrst data
packet is eavesdropped, it takes one second to determine
144 bytes of keystream (using the broadcast-relay tech-
nique with fragments) for the IV the AP used in relaying
the packet. For revealing 1500 bytes of keystream, it takes
less than two seconds. It takes about six seconds to decrypt
a single byte of the IP address in a packet which uses an
unknown IV (using the multicast-guess technique) and less
than 30 seconds to decrypt the whole IP address. Finally,
determining the router’s MAC address takes less than a sec-
ond if it has an IP address ending with “.1”. This will work
in many cases. Another way of instantly forwarding packets
would be to use the AP’s MAC address as a destination—
often APs are also routers.
In short, after having eavesdropped a single ARP packet,
it takes less than a minute for an attacker to be able to trans-
mit any data and determine an IP address on a WEP wireless
network. This metric is quite network independent as no as-
sumptions are being made about the WEP key. In the next
section, we describe how much trafﬁc we were able to gen-
erate on a network after the bootstrap of the fragmentation
attack has been completed.
4.2. Flood rate
The are two main ways in which a network may be
ﬂooded. First, we can send ARP requests. This emulates
the simple ARP replay attack, which is good for establish-
ing a baseline for comparison. Alternatively, we can ﬂood
from an Internet-connected host, which this tool makes pos-
sible. From an Internet host, we have the choice of ﬂooding
using short packets, which is useful for the weak IV attack,
or ﬂooding using MTU sized packets, which are useful for
both building a dictionary and for weak IV attacks. How-
Trafﬁc source
Local 802.11b client FTP download.
ARP replay-like attack.
Internet ﬂood (short packets).
Internet ﬂood (MTU sized packets).
≈ p/s
150
350
1200
250
Table 2. Approximate packet rates reached
with different trafﬁc sources.
ever, the packet rate will be lower with larger packets. The
results of our experiments, summarized in Table 2, are as
follows.
• The simple replay attack can generate ≈ 350 unique
(no re-transmissions) packets per second.
• When Internet-ﬂooding using small packets, the maxi-
mum sustainable rate was ≈ 1200 p/s. These are UDP
packets with 5 bytes of data, so each packet will be be
47 bytes in size (including Ethernet header). Thus the
Internet trafﬁc required to support this rate is approx-
imately 440 Kb/s, which is an achievable downstream
on a typical ADSL link.
• When Internet-ﬂooding using MTU-sized packets for
populating the dictionary, we can sustain a rate of
≈ 250 p/s. This corresponds to a data rate of 2.8 Mb/s,
which is not always feasible. Such a data rate would
yield a full dictionary in ≈ 17 hours. Lower link
speeds would increase the time to construct the dic-
tionary proportionately.
If the Internet link is slow, it may still be possible to ob-
tain high ﬂood rates. For example, the Internet host may
send ICMP echo requests to a client on the wireless LAN.
This will amplify the trafﬁc by a factor of three—the AP
relays the request to the client, the client replies and the
AP relays the client’s reply. Another technique would be
sending broadcast or multicast ICMP echo requests on the
local network. A single request can cause many replies, es-
pecially on large networks. Simple replay attacks cannot
beneﬁt from these methods.
4.3. Cracking time
Although key cracking using the weak IV attack is not
the main purpose of this work, some results are presented
here. Initially, all cracking is run for less than one minute
and with the default “fudge” factor (the breadth with which
the key is searched amongst the possible candidates) of two.
Cracking is attempted every 100,000 packets captured. Af-
ter three million packets have been captured, the cracking
time is increased to ten minutes and cracking occurs every
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
 100
 75
 50
 25
l
s
e
p
m
a
s
f
o
e
g
a
t
n
e
c
r
e
P
 0
 0
28
65
93
121
148
176
204
232
Attack Time (min)
Random IV generator
Real life
Linear IV generator
 2
 4
 6
 8
 10
 12
 14
 16
Number of packets (millions)
 100
 75
 50
 25
l
s
e
p
m
a
s
f
o
e
g
a
t