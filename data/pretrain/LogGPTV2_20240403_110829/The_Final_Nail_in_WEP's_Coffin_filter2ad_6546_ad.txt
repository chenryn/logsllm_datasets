### Implementation for the FreeBSD wi Driver

Our implementation targeted the FreeBSD `wi` driver, where we incorporated the `airjack` functionality and overwrote the AUX data. We encountered and resolved several subtle issues. For instance, the More Fragments bit should only be set during the overwrite process, not when the packet is first queued. Additionally, although the WEP bit is cleared after firmware processing, the packet is still transmitted using WEP. However, it is crucial not to set the WEP bit during the rewrite, as this would prevent the card from transmitting. These details are undocumented, which added a layer of complexity to our work.

The primary limitation with our Prism2 implementation is the difficulty in receiving packets immediately after transmission. This makes it impossible to receive 802.11 ACKs after each fragment is sent, reducing the reliability of the attack in noisy environments.

### Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 

Atheros [3] cards, being mostly software radios, are ideal for packet injection. We modified the FreeBSD `ath` driver to enable the sending and reception of raw frames. Reception was achieved by changing the RX filter to accept all frames, including control frames. Control frames proved useful because the card could see ACKs for sent data, allowing us to implement retransmissions in the attack.

Atheros can easily send WEP fragments but mangles the fragment and sequence numbers. The fix is simpler than with Prism2: the packet needs to be queued with a type of '2' (indicating PS-Poll frames). To prevent retransmissions from the firmware, a flag indicating that the packet requires no ACKs is used.

The main limitation with our Atheros implementation is its inability to send ACKs in a timely manner. A temporary workaround is to connect another wireless card and use its MAC address during the attack. The firmware of this additional card will automatically respond to data packets with ACKs.

### Proof of Concept: wesside

We developed a proof-of-concept tool called `wesside` [6]. Its primary purpose is to recover the WEP key, as this is often the long-term objective of attackers. However, we have also demonstrated that it is possible to decrypt traffic even without knowing the key. The tool uses the fragmentation attack to generate a high volume of traffic, speeding up the weak IV attack. When launched with no command-line arguments, `wesside` performs the following steps:

1. **Channel Hopping:** Searches for a WEP network.
2. **Authentication and Association:** Tries to authenticate and associate. If authentication fails, it eavesdrops on associated clients to find a MAC address to spoof.
3. **Keystream Discovery:** After eavesdropping on a single data packet, it sends out larger broadcasts to discover at least 128 bytes of keystream by intercepting relayed packets.
4. **ARP Request Decryption:** Decrypts the IP address by guessing the next four bytes of the keystream using multicast frames after eavesdropping an ARP request.
5. **ARP Flooding:** Floods the network with ARP requests for the decrypted IP address.
6. **Key Cracking:** Launches `aircrack` [12] (v2.1) every 100,000 packets captured for one minute. If 3,000,000 packets have been captured, the cracking time is increased to ten minutes, and cracking is started every 1,000,000 packets.

When launched with at least one command-line argument (the IP address of an Internet host), `wesside` operates as follows:

- **Router Discovery:** Discovers the router's IP address by sending an ARP request for the IP address ending in ".1" and waits for a reply. The MAC address of the router is extracted from the 802.11 header.
- **IP Assignment:** Assigns the IP address ending in ".123" to the attacker.
- **Firewall/NAT Bypass:** Sends a UDP packet to the Internet host every five seconds to open a hole in any firewall or NAT. ARP requests are sent to maintain the attacker’s IP address in the router’s ARP cache.
- **Dictionary Attack:** Binds to a TAP interface to implement the dictionary attack. Data transmitted via the TAP interface is encrypted using a known keystream and sent to the wireless network. Packets with known IVs are decrypted and originated from the TAP interface.

### Missing Enhancements

Only a limited subset of the attacks described has been implemented in `wesside`. Our primary goal was to explore the complexity of building a fully automatic tool and its efficiency in recovering the WEP key. Some of the most dangerous and cunning attacks, such as decrypting data by resending it to the Internet, are missing. An implementation could use TAP interfaces for both transmission and decryption. Filters are necessary to decrypt specific "interesting" data packets, and decryption using this technique takes under five minutes per packet.

### Evaluation

In this section, we present the performance of `wesside` to establish the vulnerability of real networks to the fragmentation attack. Our tests use common hardware: a Linksys WRT54G AP, a Pentium IV 2.4GHz laptop with 512MB RAM and an Atheros 802.11g card, and an old Celeron 400MHz laptop with 200MB RAM connected via Ethernet to the WAN port.

#### Bootstrap Speed

The bootstrap process involves recovering a keystream, determining an IP address, and finding the router's MAC address. This process is independent of the key size and complexity. Results show that it takes about one second to determine 144 bytes of keystream, less than two seconds for 1500 bytes, and less than 30 seconds to decrypt an entire IP address. Determining the router's MAC address takes less than a second if it has an IP address ending in ".1".

#### Flood Rate

Flood rates were tested using different methods:
- **Simple Replay Attack:** Generates ≈ 350 unique packets per second.
- **Internet Flooding (Small Packets):** Sustains a rate of ≈ 1200 p/s, requiring approximately 440 Kb/s of Internet traffic.
- **Internet Flooding (MTU-sized Packets):** Sustains a rate of ≈ 250 p/s, corresponding to a data rate of 2.8 Mb/s.

If the Internet link is slow, techniques like sending ICMP echo requests can amplify the traffic. Simple replay attacks cannot benefit from these methods.

#### Cracking Time

Initial key cracking attempts are run for less than one minute with a default "fudge" factor of two. Cracking is attempted every 100,000 packets captured. After three million packets, the cracking time is increased to ten minutes, and cracking occurs every one million packets.

### Conclusion

`wesside` demonstrates the feasibility and efficiency of automated WEP key recovery and traffic decryption. The tool's performance metrics provide insights into the practical threats posed by the fragmentation attack. Future enhancements could include more sophisticated attack techniques and improved usability.