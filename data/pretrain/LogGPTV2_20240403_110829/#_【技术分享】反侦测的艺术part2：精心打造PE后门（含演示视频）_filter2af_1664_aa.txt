# 【技术分享】反侦测的艺术part2：精心打造PE后门（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：pentest.blog
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **shan66**](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：260RMB**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**传送门**
* * *
[**【技术分享】反侦测的艺术part1：介绍AV和检测的技术**
****](http://bobao.360.cn/learning/detail/3420.html)
[**【技术分享】反侦测的艺术part3：shellcode炼金术**
****](http://bobao.360.cn/learning/detail/3589.html)
本文将为读者详细介绍渗透测试人员将后门植入PE（便携式可执行文件）文件中的几种方法。要想完全掌握本文的内容，读者至少需要熟悉x86汇编知识，并精通调试器，同时还需要对PE文件格式有着全面的了解。
**引言**
现在，几乎所有的安全研究人员、渗透测试人员和恶意软件分析师每天都要跟各种后门打交道：将后门植入系统或某种流行的程序中，以便日后继续访问系统。
本文的大部分内容都是关于将后门植入32位PE文件的方法，但由于PE文件格式是Unix
COFF（通用对象文件格式）的修改版本，所以这些方法背后的逻辑，同样适用于所有其他可执行二进制文件类型。
此外，植入的后门的隐秘性，对于其存活时间来说尤其重要，所以本文将介绍各种方法，尽量设法绕过各种安全检测。
**相关术语**
**红队渗透测试：**
在与黑客攻击有关的语境中，所谓红队指的是一群白帽黑客，他们以攻击者的姿态来攻击组织的数字基础设施，以测试组织的防御措施的有效性（通常称为“渗透测试”）。包括微软在内的许多公司，都会定期进行类似的安全拉练，其中红队和蓝伍都会参与其中。这样做的好处是，可以挑战人们的先入之见，找出安全隐患，从而弄清楚敏感信息的泄露途径、漏洞的具体利用方式以及具体存在哪些安全偏见等。
**地址空间布局随机化（ASLR）：**
这是一种防止缓冲区溢出攻击的计算机安全技术。为了防止攻击者可靠地跳转到内存中的特定的被利用函数中，ASLR会对进程的关键数据区域的地址空间位置进行随机布置，其中包括可执行文件的基址以及堆、栈和程序库的地址等。
**代码洞：**
代码洞是一段代码，它将由另一个程序写入到其他进程的内存中。这段代码可以通过在目标进程内创建远程线程来执行。一般情况下，代码的代码洞是指代码中可注入自定义指令的脚本部分。例如，如果脚本的内存能够容下5个字节，但是只使用了3个字节，那么剩余的2个字节可用于添加来自该脚本之外的代码。这就是所谓的代码洞。
**校验和：**
在数据存储和数据通信领域中，用于校验目的的一组数据项的和，虽然校验和本身比较小巧，但是可用来检测数据在传输或存储期间是否出错。它通常用来检测从下载服务器下载的安装文件的完整性。就校验和来说，它通常用于独立验证数据的完整性，而无需依赖于验证数据的真实性。
**主要方法**
本文中的所有实现和示例都是针对putty
SSH客户端可执行文件的。选择putty来练习后门的制作有多个原因，其中之一是putty客户端是一个本地C++项目，它用到了多个库以及Windows
API，另一个原因是给ssh客户端植入后门不太引人耳目，因为该程序早就建立了tcp连接，所以更容易躲避蓝队的网络监控，这里使用的后门代码是来自metasploit项目中Stephen
Fever的reverse tcp meterpreter shellcode。主要目标是将meterpreter
shellcode注入到目标PE文件，同时还不能破坏该程序的实际功能。注入的shellcode将在一个新的线程上执行，并会不断尝试连接到处理程序。与此同时，另一个目标是尽量不要被检测到。
在PE文件中植入后门的常见方法，通常都包括4个主要步骤：
1）找到可以存放后门代码的地方
2）劫持执行流程
3）注入后门代码
4）恢复执行流程
当然，在每个步骤中还有许多小细节，而这些细节才是保持植入后门的一致性、耐用性和隐蔽性的关键所在。
**可用空间问题**
我们的第一步工作是找到可用的内存空间。如何在PE文件中选择合适的空间来插入后门代码是一件非常重要的事情，这个空间的选择直接影响后门的隐蔽性。
要想解决这个问题，主要有两种方法：
**1）添加新空间**
与其他方法相比，这种方法的隐蔽性要差一些，但是它的好处在于，由于附加了一个新的空间，所以对于后门代码的大小没有太多限制。
借助于反汇编程序或PE编辑器，如LordPE，我们可以通过添加一个新的节头来扩展PE文件，这里是putty可执行文件的节表，在PE编辑器的帮助下，添加了了一个新节“NewSec”，其大小为1000字节，
在创建一个新的节时，需要将节标志设置为“Read/Write/Execute”，只有这样，当PE映像映射到内存后，才能正常运行后门的shellcode。
在添加节头之后，我们还需要调整文件得大小，不过这也不是什么难事，只要根据节的大小，使用十六进制编辑器在文件末尾添加相应长度的空字节即可。  
在完成上述操作之后，新的空节就会成功地添加到该文件中了。我们建议在添加新节之后运行该文件，如果一切正常的话，就可以通过调试器来修改这个新节了。
通过为可执行文件添加一个新的代码节，虽然可以解决空间问题，但是在反侦查方面几乎没有任何优势可言，因为几乎所有的AV产品都能检测到不常用的代码节，尤其是这里还给它提供了（Read/Write/Execute），那肯定是非常可疑的。
即使向putty可执行文件添加的代码节是空的，并且不赋予任何权限，也照样会被某些AV产品标记为恶意代码。  
**2）代码洞**
解决空间问题的第二种方法是利用目标可执行文件中的代码洞。 几乎所有已编译的二进制文件都有代码洞，而这些正好可以用于存放我们的后门。
相对于添加新的代码节来说，使用代码洞不太容易引起AV产品的注意，因为使用的都是已经存在的公共代码部分。
此外，PE文件的总体大小，即使在植入后门后也不会改变，但是，该方法也有几个小缺点。  
代码洞的数量和大小会随着文件的不同而不同，但是通常来说，这与添加新节相比，可用空间的限制就会非常大。 当使用代码洞时，后门代码应尽可能小巧。
另一个缺点是节标志。
因为应用程序的执行将被重定向到代码洞所在地址，所以含有代码洞的代码节必须具有“execute”权限，除此之外，有一些shellcode（以自修改的方式编码或混淆）甚至还要求提供“write”权限，以便对代码节内的内容进行修改。
使用多个代码洞将有助于克服空间限制问题，也将后门代码分割为不同部分，按理说能够提高它的隐蔽性，但遗憾是的，修改代码节的权限将会带来更大的嫌疑。能够在运行时修改内存权限从而避免直接更改节权限的高级方法非常少，因为这些方法需要定制的shellcode、编码和IAT解析技术，对于这些内容，我们将会在后面的文章中专门加以介绍。
借助于一个名为Cminer的工具，我们可以轻松地找出二进制文件中所有的代码洞。例如，通过命令./Cminer putty.exe
300，我们可以找出putty.exe中所有长度大于300字节的代码洞