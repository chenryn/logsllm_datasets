# 第7章 搭建LNMP服务

## 7.2 Nginx负载均衡与反向代理配置

### 7.2.1 Nginx负载均衡设置

Nginx作为一款优秀的Web服务器，不仅支持基本的Web服务功能，还具备强大的负载均衡和反向代理能力。本节将详细介绍如何在Nginx中设置这些高级功能。

#### 安装与配置

首先，在安装PHP时，需要指定`--enable-fpm`参数来启用FastCGI进程管理器的支持，这允许Nginx通过FastCGI协议处理PHP请求。具体命令如下：
```shell
[root@Centos php-5.4.16]# ./configure --prefix=/usr/local/php --enable-fpm
[root@Centos php-5.4.16]# make
[root@Centos php-5.4.16]# make install
```

#### 负载均衡算法

Nginx提供了多种负载均衡策略，包括轮询、权重分配及基于IP哈希等方法。

- **轮询**：这是最简单的调度方式，它按照顺序循环地将请求分配给不同的后端服务器。
- **加权轮询**：根据每台服务器的性能差异为其分配不同的权重值，权重值越高的服务器接收更多的请求。
- **IP哈希**：根据客户端IP地址进行哈希计算，保证同一用户的所有请求都被发送到相同的后端服务器上，这对于会话保持非常重要。

示例配置文件展示了如何为一组名为`test_svr`的后端服务器设置轮询算法：

```nginx
upstream test_svr {
    server 192.168.19.79:8080;
    server 192.168.19.78:8080;
    server 192.168.19.80:8080;
}
server {
    listen 192.168.19.101:80;
    server_name www.test.com;
    location / {
        proxy_pass http://test_svr;
    }
}
```

对于加权轮询和IP哈希算法，只需在定义上游服务器时添加相应的参数即可，例如：

```nginx
upstream test_svr {
    ip_hash;
    server 192.168.19.79:8080 weight=2;
    server 192.168.19.78:8080 weight=2 max_fails=1 fail_timeout=10s;
}
```

### 7.2.2 Nginx反向代理配置

反向代理允许客户端从一个位置（通常是外部网络）访问位于另一个内部网络中的资源。通过Nginx配置反向代理可以实现更好的安全性、性能优化以及负载均衡效果。

配置文件中使用`proxy_pass`指令指向实际处理请求的目标服务器，并且可以通过设置如`proxy_set_header`等选项来定制HTTP头信息传递规则。

例如，为了设置一个基本的反向代理配置，可以在Nginx的虚拟主机配置中添加如下内容：

```nginx
location / {
    proxy_pass http://backend_servers;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}
```

这里假设`backend_servers`是之前定义的一个upstream块的名字。

---

以上是对Nginx中实现负载均衡和反向代理的基本介绍及配置实例。接下来的部分将继续探讨其他相关主题，比如更复杂的配置场景以及故障排除技巧。