■ EU：终端用户（End User），通常是指一个自然人用户，比如当
使用某个App实时定位功能时，App会通过API调用远程服务定位使用者
当前在地图上的位置，在这个过程中，使用者就是这里所描述的终端用
户。
■ RP：应答方（Relying Party），通常是指身份认证信息的消费
者。比如当操作App时，App调用API获取到的认证信息将被App使用，
那么这里的App则是应答方。在无特殊说明的情况下，通常应答方主要
是指API调用的客户端应用程序。
■ OP：OpenID认证服务提供者（OpenID Provider），当客户端发
送认证请求时的被请求方，通常也是提供EU认证服务的一方，即为
OP。OP为RP提供终端用户的身份认证信息，告诉RP身份认证信息的具
体内容。比如在传统的Web安全中，Cookie是认证信息，那么对应到这
里，OP给RP提供Cookie信息。
■ ID Token：ID令牌，是OpenID Connect在OAuth协议基础拓展出
来的组件，通常是包含终端用户身份认证信息的JWT格式的数据。
■ 
UserInfo 
Endpoint：用户信息端点，只有当RP使用访问令牌
Access Token请求时，OP才会返回授权实体用户的身份信息。这里的用
户身份信息不同于身份认证信息，是指自然人信息，比如用户的姓名、
年龄、性别等。
（2）工作流程
在OpenID Connect的核心文档中，对身份认证的工作流程有简要的
描述，如图7-2所示。
●图7-2 OpenID Connect官方核心流程
在上图7-2中，交互流程主要发生RP、OP、EU之间。
1）RP（API客户端）将请求发送到OpenID服务提供方（OP）。
2）OP验证用户信息并获得授权。
3）OP返回ID令牌给RP。
4）RP将带有访问令牌的请求发送到用户信息端点。
5）用户信息端点返回实体用户信息。
（3）ID令牌
上文中提及ID令牌是一个JWT格式的数据结构（JWT技术详细介
绍请参见第9章），典型的ID令牌数据结构样例如下所示：
ID令牌的主要字段在JWT的RFC 7519规范中给出了官方的描述，详
细如下。
■ iss=Issuer Identifier：必需字段，提供认证信息者的唯一标识，一
般是URL（不包含参数部分）。
■ sub=Subject Identifier：必需字段，iss提供的在iss范围内唯一的
EU标识，被RP用来标识唯一的用户，此字段值区分大小写。
■ 
aud=Audience(s)：必需字段，标识ID令牌消费方，必须包含
OAuth2的client_id。
■ nonce：RP发送请求时提供的随机字符串，用来减缓重放攻击，
也可以来关联ID Token和RP本身的Session信息。
■ exp = Expiration time：必需字段，过期时间，超过此时间的ID
Token将被作废，且验证无法通过。
■ iat=Issued At Time：必需字段，JWT的创建时间。
■ auth_time =AuthenticationTime：EU完成认证的时间，如果RP发
送AuthN请求时携带max_age参数，则Claim是必需的。
■ acr =Authentication Context Class Reference：可选字段，表示认证
的上下文引用值，用来标识认证上下文。
■ amr=Authentication Methods References：可选字段，表示一组认
证方法。
■ azp = Authorized party：可选字段，结合aud使用，只有在被认证
的一方和受众（aud）不一致时才使用此值，一般情况下很少使用。
除了以上字段外，ID Token通常还会包含其他属性内容。比如终端
用户的用户名、头像、生日等资料。所以，ID Token在传输前建议使用
JWS签名和JWE加密来保证身份认证的完整性、不可否认性以及保密性
（JWS签名和JWE加密的相关技术细节将在第9章为读者做详细介
绍）。
（4）用户信息端点
用户信息端点是受到保护的基础信息，通常在RP认证通过后获得
Access 
Token，再通过Access 
Token请求用户信息端点来获取用户信
息，其请求消息格式如下：
成功响应后，会返回用户信息的内容，如下所示：
2.OpenID Connect身份认证方式
OpenID Connect身份认证方式是由OAuth2的授权方式延伸而来的，
其支持的API认证包含通常所指的用户身份认证和客户端身份认证。下
面先来了解一下身份认证的相关流程。
根据OAuth2授权许可方式的不同，认证模式主要有以下3种。
■ 授权码方式（Authentication Code Flow）：使用OAuth2的授权
码流程来获得ID Token和Access Token。
■ 简化授权码方式（Implicit Flow）：使用OAuth2的简化授权码流
程获取ID Token和Access Token。
■ 混合流方式（Hybrid Flow）：前两种方式的混合使用。
在认证模式上，OpenID 
Connect与OAuth类似（OAuth协议更多细
节请读者阅读下一章），不同的是OpenID Connect依赖新增的组件ID
令牌和用户信息端点联结后端的身份认证基础组件，完成身份认证的
功能。比如后端身份认证基础组件轻型目录访问协议（Lightweight
Directory Access Protocol，LDAP）、活动目录（Active Directory，
AD）、数据库、一次性密码（One Time Password，OTP）、安全断言
标记语言（Security Assertion Markup Language，SAML）等。
业界有很多围绕OpenID 
Connect的具体产品实现，在OpenID
Connect的官方网站列举了很多开源或商业产品，下面以开源产品
Connect2id为例，带领读者一起了解OpenID Connect身份认证的详细过
程。
（1）Connect2id安装
Connect2id是企业级的身份认证与授权管理平台，满足OAuth2协
议和OpenID Connect协议要求的具体实现，支持普通Web网页、JS客
户端、移动端应用、桌面应用程序的API集成、身份认证以及授权管
理。
Connect2id的快速安装非常简单，从官方网址下载后即可以使用，
其安装步骤如下。
1）安装环境准备。Connect2id是Java语言编写的应用程序，故在其
安装的机器上需要先安装JDK，这里使用的Connect2id 9.5.1版本的环境
要求：内存至少23GB以上，JDK 11版本以上。默认前提下，认为读者
已正确安装JDK。JDK的安装方法可以查阅JDK相关配置文档。
2）下载Connect2id 9.5.1安装包后，解压安装包进入解压目录下的
相对路径connect2id-server-[version]/tomcat/bin/，执行catalina.bat start或
startup.bat，启动Connect2id的所有服务，如图7-3所示。
●图7-3 启动Connect2id Server服务
3）访问http://127.0.0.1:8080/c2id，即显示Server对外提供的各个接
口，如图7-4所示。
●图7-4 Connect2id Server提供的OpenID Connect接口列表
第一次使用Connect2id的读者，可以多花点时间仔细阅读页面上的
链接内容，以加深对Connect2id Server工作原理的了解。
4）访问http://127.0.0.1:8080/oidc-client，即显示客户端相关的配
置，如图73-5所示为客户端接入的OP配置。
●图7-5 Connect2id Server提供的OpenID Connect客户端接入配置信息
此页面涉及客户端认证相关的三类配置：客户端接入OP配置、客
户端注册信息配置、终端用户认证配置。对于页面中各个API接口，尤
其是客户端相关配置，需要读者通过页面操作加深对各个配置项的理
解。如果不想自己安装，在Connect2id的官网上也提供了在线演示
demo，读者可以访问https://demo.c2id.com/c2id/来了解Connect2id Server
服务器端的信息，访问https://demo.c2id.com/oidc-client/来了解客户端的
信息。接下来，将结合Connect2id的使用，为读者讲述OpenID Connect
的认证方式。
（2）授权码方式身份认证
授权码方式使用OAuth2协议的Authorization-Code方式来完成用户
身份认证，适用于需要用户参与的身份认证场景。典型的使用案例如各
个互联网应用中，使用QQ登录、微信登录、微博登录之类的场景。此
认证方式需要终端用户EU参与，且所有Token是通过OP的Token
EndPoint获取的，其工作流程使用Connect2id的端点表示，如图7-6所
示。
●图7-6 Connect2id OpenID Connect授权码认证流程
1）RP携带client_id，向OP发起认证请求。比如这里请求Connect2id
Server的地址为http://127.0.0.1:8080/c2id-login，此时请求参数格式如
下：
在OpenID进行身份验证时，至少要使用的请求参数信息如下。
■ response_type：对于使用授权码方式的客户端值设置为code，读
者也可查看图7-5的终端用户认证配置中的下拉选项值是否为code。
■ client_id：通常在客户端注册时获得，与API KEY签名认证中的
APPID类似，这里的值为000123。
■ redirect_uri：是将身份认证通过后的响应发送到的重定向URI，
它必须与客户端已注册重定向URI完全匹配。如果此处不是完全匹配，
则可能会有类似于33.1节中Facebook OAuth绕过的漏洞。这里为客户端
注册信息中配置的redirect_uri值。
■ 
scope：是用空格分隔的请求范围值列表，必须至少包含该
openid值。在这里，终端用户认证配置中配置的值openid和email。
■ state：随机字符串，用于维持请求和回调之间的状态，不是必选
项，但强烈建议使用此参数。
至于nonce、display、prompt、login、authSessionId等可选参数，主
要用用户会话保持、防重放攻击、客户端重新认证以及EU身份认证时
的页面展现形式，建议设计时使用这些参数，增加流程的安全性。
2）OP接收到认证请求之后，对请求参数进行校验，校验通过后进
入EU身份认证引导页面，在认证页面上，输入认证信息确认用户身
份。此处使用的用户名和密码认证的页面如图7-7所示。
●图7-7 Connect2id OpenID Connect授权码流程身份认证信息录入页面
3）身份认证确认后，页面将跳转回调地址并传递授权码和state，
此时应答跳转的请求参数格式如下：
在这一步，至少要使用的请求参数信息如下。
■ code：身份认证通过后返回的授权码。
■ state：上一步操作携带的参数，继续传递给下一步操作使用。
在Connect2id演示环境中，通过终端用户认证配置中的测试连接进
行身份认证，认证通过则返回跳转链接显示后续操作所需要的各种信
息，这一点与常规OpenID身份验证不同，读者练习时需要注意，如图7-
8页面所示。
●图7-8 Connect2id授权认证参数值
4）RP携带code值，请求Token端点，比如这里请求Connect2id
Server的API接口地址为http://127.0.0.1:8080/c2id/token。通过调用此接
口，获取ID令牌值。
5）Token端点接受请求并处理，返回应答消息。比如此处接口