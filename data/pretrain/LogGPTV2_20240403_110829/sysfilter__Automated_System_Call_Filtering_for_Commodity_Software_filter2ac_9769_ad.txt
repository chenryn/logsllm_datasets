the principle of least privilege [76], but they do interfere with
execve as they are preserved process attributes.
For example, suppose that programs P1 and P2 have
the following syscall sets. P1: 0 (read), 1 (write),
15 (exit), and 59 (execve); P2: 0 (read), 1 (write),
2 (open), 3 (close), 8 (lseek), 9 (mmap), 11 (munmap),
56 (clone), 61 (wait4), 79 (getcwd), 96 (gettimeofday),
102 (getuid), 115 (getgroups), 202 (futex), 292 (dup3),
and 317 (seccomp). If P2 is normally-invoked, then it will
operate successfully. However, if P2 is invoked via P1, then
the resulting process will not be able to issue any other syscall
than read, write, exit, and execve (the last two are not even
required by P2). To deal with this issue, sysfilter supports
two different execve modes: (a) union and (b) hierarchical.
In union mode, given a set programs {P1,P2, ...,PN}
that can be invoked in any combination, via execve, with
SY S1,SY S2, ...,SY SN being their allowed sets of syscalls,
sysfilter constructs a ﬁlter that enforces the union of
SY S1,SY S2, ...,SY SN and attaches it to all of them. This
will result in each process functioning correctly, as it has
support for the syscalls it requires, but overly-approximates
least privilege—every program effectively inherits the priv-
ileges (with respect to the syscall API) of all others in
the set. In the example above, union would result in ex-
ecuting both P1 and P2 with the following syscall set:
{0 – 3,8,9,11,15,56,59,61,79,96,102,115,202,292,317}.
In hierarchical mode, sysfilter begins with the
same approach as above, but further rectiﬁes (reduces)
syscall sets each time a process invokes execve. In our
example, this would result in executing P1 with the set
{0 – 3,8,9,11,15,56,59,61,79,96,102,115,202,292,317},
further reduced to {0 – 3,8,9,11,56,61,79,96,102,115,202,
292,317} right before execve-ing P2. Note that the hierar-
chical mode still results in certain processes being a bit more
privileged (with respect to accessing OS services), but not all.
If special treatment regarding execve is required for a par-
ticular (set of) program(s), then a recipe can be provided to the
enforcement tool, along with the respective syscall sets, which
describes how sysfilter should operate on execve calls.
If union mode is speciﬁed, then sysfilter merely splices
together a set of different syscall sets (provided via separate
JSON ﬁles), and compiles a single ﬁlter that is attached to all
programs in scope. In case of hierarchical mode, the recipe de-
scribes the (execve) relationships between callers and callees,
allowing sysfilter to construct different ﬁlters, one for each
program in scope, which adhere to the model above.
More importantly, our results (§ 5) indicate that recipe
creation can be automated, to some extent, by employing
static value-tracking analysis to resolve the ﬁrst argument of
execve calls. However, note that sysfilter is not geared to-
wards sandboxing applications that invoke arbitrary scripts or
programs (e.g., command-line interpreters, managed runtime
environments); other schemes, like Hails [21], SHILL [56],
and the Web API Manager [82], are better suited for this task.
3.3 Prototype Implementation
Our prototype implementation consists of ≈ 2.5 KLOC of
C/C++ and ≈ 150 LOC of Python, along with various shell
scripts (glue code; ≈ 120 LOC). More speciﬁcally, we imple-
mented the extraction tool atop the Egalito framework [95].
Egalito is a binary recompiler; it allows rewriting binaries
in-place by ﬁrst lifting binary code into a layout-agnostic,
machine-speciﬁc intermediate representation (IR), dubbed
EIR, and then allowing “tools” to inspect or alter it.
We implemented the extraction tool as an Egalito “pass”
(C/C++), which creates the analysis scope, constructs the
VCG, and extracts the respective syscall set, using the tech-
niques outlined in § 3.1. Note that we do not utilize the binary
rewriting features of Egalito; we only leverage the frame-
work’s API to precisely disassemble the corresponding bina-
ries and lift their code in EIR form, which, in turn, we use for
implementing the analyses required for constructing the DCG,
identifying all AT functions for building the ACG, pruning
unreachable parts of the call graph for assembling the VCG,
identifying syscall instructions, performing value-tracking,
etc. We chose Egalito over similar frameworks as it employs
the best jump table analysis to date.
The enforcement tool is implemented in Python and
is
responsible for generating the cBPF ﬁlter(s), and
libsysfilter.so, and attaching the latter to the main binary
using patchelf (see § 3.2). Lastly, during the development
of sysfilter we also improved Egalito by adding better
support for hand-coded assembly, ﬁxing various symbol res-
olution issues, and re-architecting parts of the framework to
reduce memory pressure. (We upstreamed all our changes.)
466    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Application
FFmpeg
GNU Core.
GNU M4
MariaDB
Nginx
Redis
SPEC CINT.
SQLite
Vim
GNU Wget
Version
4.2
8.31
1.14
10.3
1.16
5.0
1.2
3.31
8.2
1.20
Syscalls Tests
3756
167
672
148
236
70
153
2059
356
128
81
104
12
82
31190
139
163
255
130
107
Pass?










(124)
(100)
(1)
(156)
(1)
(6)
(12)
(7)
(3)
(1)
Table 1: Correctness Test. The numbers in parentheses count
the different binaries included in the application/package.
“Syscalls” indicates the number of system calls in the allowed
set; in case of applications with multiple binaries that number
corresponds to the unique syscalls across the syscall sets of
all binaries in the package. “Tests” denotes the number of
tests run from the validation suite of the application.
4 Evaluation
We evaluate sysfilter in terms of (1) correctness, (2) run-
time performance overhead, and (3) effectiveness.
Testbed We used two hosts for our experiments: (a) run-
time performance measurements were performed on an 8-
core Intel Xeon W-2145 3.7GHz CPU, armed with 64GB of
(DDR4) RAM, running Devuan Linux (v2.1, kernel v4.16);
(b) analysis tasks were performed on an 8-core AMD Ryzen
2700X 3.7GHz CPU, armed with 64GB of (DDR4) RAM, run-
ning Arch Linux (kernel v5.2). All applications (except SPEC
CINT2006) were obtained from Debian sid (development
distribution) [86], as it provides the latest versions of upstream
packages along with debug/symbol information [93].
Correctness We used 411 binaries from various packages/-
projects with sysfilter, including GNU Coreutils, Nginx,
Redis, SPEC CINT2006, SQLite, FFmpeg, MariaDB, Vim,
GNU M4, and GNU Wget, to extract and enforce their corre-
sponding syscall sets. The results are shown in Table 1. Once
sandboxed, we stress-tested them with ≈38.5K tests from
the projects’ validation suites. (Note that we did not include
tests that required the application to execute arbitrary external
programs, such as tests with arbitrary commands used in Vim
scripts, Perl scripts in Nginx, and arbitrary shell scripts to
load data in SQLite and M4.) In all cases, sysfilter man-
aged to extract a complete and tight over-approximation of
the respective syscall sets, demonstrating that our prototype
can successfully handle complex, real-world software.
Performance To assess the run-time performance impact of
sysfilter, we used SPEC CINT2006 (std. benchmarking
suite), Nginx (web server), and Redis (data store)—i.e., 19
program binaries in total; the selected binaries represent the
most performance-sensitive applications in our set and are
well-suited for demonstrating the relative overhead(s). We
also explored different settings and conﬁgurations, including
interpreted vs. JIT-compiled BPF ﬁlters, and ﬁlter code that
implements sandboxing using a linear search vs. ﬁlter code
that utilizes a skip list-based approach (§ 3.2). In the case
of SPEC, we observed a run-time slowdown ≤1% under all
conditions and search methods.
Figure 4 and Figure 5 illustrate the impact of sysfilter
on Nginx (128) and Redis (103)—the numbers in parentheses
indicate the corresponding syscall set sizes, while “Binary”
corresponds to skip list-based ﬁlters. We conﬁgured Nginx
to use 4 worker processes and measured its throughput us-
ing the wrk tool [23], generating requests via the loopback
interface from 4 threads, over 256 simultaneous connections,
for 1 minute. Overall, sysfilter diminishes reduction in
throughput by using skip list-based ﬁlters (compared to lin-
ear search-based ones) when JIT is disabled, with maximum
reductions in throughput of 18% and 7%, respectively. The
differences in compilation strategy appear to be normalized
by jitting, which showed a maximum drop in throughput of
6% in all conditions. We evaluated Redis similarly, using the
memtier tool [73], performing a mix of SET and GET requests
with a 1:10 req. ratio for 32 byte data elements. The requests
were issued from 4 worker threads with 128 simultaneous
connections, per thread, for 1 minute. sysfilter incurs max-
imum throughput reductions of 11% and 3%, with and without
JIT support, respectively. Lastly, toggling SECCOMP_FILTER_-
FLAG_SPEC_ALLOW [47] (for enabling the SSB mitigation)
incurs an additional ≈10% overhead in all cases.
Effectiveness To assess the security impact of syscall ﬁltering,
we investigated how sysfilter reduces the attack surface
of the OS kernel, by inquiring what percentage of all C/C++
applications in Debian sid (≈30K main binaries) can exploit
23 (publicly-known) Linux kernel vulnerabilities—ranging
from memory disclosure and corruption to direct privilege
escalation—even after hardened with sysfilter. A list of
the number of binaries in our dataset affected by each CVE is
shown in Table 2. Depending on the exact vulnerability, the
percentage of binaries that can still attack the kernel ranges
from 0.09% – 64.34%. Although sysfilter does not defend
against particular types of attacks (e.g., control- or data-ﬂow
hijacking [87]), our results demonstrate that it can mitigate
real-life threats by means of least privilege enforcement and
(OS) attack surface reduction.
5 Large-scale System Call Analysis
We conclude our work with a large scale study regarding the
syscall proﬁle of all C/C++ applications in Debian sid, re-
porting insights regarding syscall set sizes (e.g., the number of
syscalls per binary), most- and least-frequently used syscalls,
syscall site distribution (libraries vs. main binary), and more.
The results of this analysis not only justify our design, but
can also aid that of future syscall policing mechanisms.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    467
Figure 4: Impact of sysfilter on Nginx.
Figure 5: Impact of sysfilter on Redis.
Out of the total set of 347 syscalls, the maximum number
of syscalls used by one binary is only 215 syscalls, which
represents 62% of the total syscall API. We observe that this
distribution has a long tail: i.e., the median syscall count per
binary is 90 syscalls, with the 90th percentile at 145 syscalls.
With one exception, we ﬁnd that all binaries processed use
at least 40 syscalls. The sole exception is the statically-linked
binary mtcp_restart that uses only 17 syscalls—this binary
performs syscalls directly, without using any library wrappers.
In the general case, even the simplest of programs, such as
/bin/false, utilize 40 syscalls due to the paths included by
initialization functions that load shared libraries: e.g., mmap
and mprotect are ubiquitous as they are always reachable
from _start, even before main is invoked.
Syscalls from Libraries When extracting syscalls from each
binary, we record which of its shared libraries contained a
syscall instruction for each invocation. After libc, the sec-
ond most common library is libpthread (used by 68.7% of
binaries), in which we observe 40 syscalls—upon further in-
vestigation we found that this is due to glibc’s use of macros
to directly invoke syscalls. The next most common libraries
that invoke syscalls directly are libstdc++ (37% of binaries),
which invokes futex (202) directly; libnss_resolve (32%
of binaries, 3 syscalls), and libglib-2.0 (17%, 5 syscalls).
While we leave a comprehensive analysis of library syscalls
to a future study, we note a few common themes. Libraries
tend to directly invoke syscalls with no libc wrapper func-