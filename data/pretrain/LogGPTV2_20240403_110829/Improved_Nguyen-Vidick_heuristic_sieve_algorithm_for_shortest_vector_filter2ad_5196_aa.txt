title:Improved Nguyen-Vidick heuristic sieve algorithm for shortest vector
problem
author:Xiaoyun Wang and
Mingjie Liu and
Chengliang Tian and
Jingguo Bi
A Three-Level Sieve Algorithm for the Shortest
Vector Problem ⋆
Feng Zhang, Yanbin Pan, and Gengran Hu
Key Laboratory of Mathematics Mechanization,
Academy of Mathematics and Systems Science, NCMIS
Chinese Academy of Sciences, Beijing, China, 100190
fzhangfeng,PI:EMAIL, PI:EMAIL
Abstract. In AsiaCCS 2011, Wang et al. proposed a two-level heuris-
tic sieve algorithm for the shortest vector problem in lattices, which
improves the Nguyen-Vidick sieve algorithm. Inspired by their idea, we
present a three-level sieve algorithm in this paper, which is shown to have
better time complexity. More precisely, the time complexity of our algo-
rithm is 20.3778n+o(n) polynomial-time operations and the corresponding
space complexity is 20.2833n+o(n) polynomially many bits.
Keywords. Lattice, Shortest Vector Problem, Sieve Algorithm, Sphere Covering
Introduction
1
Lattices are discrete subgroups of Rn and have been widely used in cryptology.
The shortest vector problem(SVP) refers the question to ﬁnd a shortest non-zero
vector in a given lattice, which is one of the most famous and widely studied
computational problems on lattices.
It is well known that SVP is NP-hard under random reductions [2], so no
polynomial time exact algorithms for it are expected to exist. Up to now, only
approximation algorithms, such as [14, 26, 8, 9], are eﬃcient and all known exact
algorithms are proven to cost exponential time. However, almost all known ap-
proximation algorithms (such as [26, 9]) invoke some exact algorithm for solving
SVP on some low dimensional lattices to improve the quantity of their outputs.
Therefore, it is important to know how fast the best exact algorithm can be.
What’s more, algorithms for SVP play a very important role in cryptanalysis
(see [20] for a survey). For example, nearly all knapsack-based public-key cryp-
tosystems have been broken with a lattice algorithm (see [1, 15, 28]) and many
lattice-based public-key cryptosystems can be broken by solving some SVP, in-
cluding the famous NTRU [11]. Hence, better exact algorithm for SVP can also
help us to know the security of these lattice-based public-key cryptosystems
better, and choose more appropriate parameters for these cryptosystems.
⋆ This work was supported in part by the NNSF of China (No.11071285, No.11201458,
and No.61121062), in part by 973 Project (No. 2011CB302401) and in part by the
National Center for Mathematics and Interdisciplinary Sciences, CAS.
The exact algorithms for SVP can be classiﬁed into two classes by now:
deterministic algorithms and randomized sieve algorithms.
The ﬁrst deterministic algorithm to ﬁnd the shortest vector in a given lattice
was proposed by Fincke, Pohst [6, 7] and Kannan [12], by enumerating all lattice
vectors shorter than a prescribed bound. If the input is an LLL-reduced basis,
the running time is 2O(n2) polynomial-time operations. Kannan [12] also showed
the running time can reach 2O(nlogn) polynomial-time operations by choosing a
suitable preprocessing algorithm. Schnorr and Euchner [27] presented a zig-zag
strategy for enumerating the lattice vectors to make the algorithm have a better
performance in practice. In 2010, Gama, Nguyen and Regev [10] introduced an
extreme pruning technique and improved the running time in both theory and
practice. All enumeration algorithms above require a polynomial space complex-
ity. Another deterministic algorithm for SVP was proposed by Micciancio and
Voulgaris [16] in 2010. Diﬀerent from the previous algorithms, it is based on
Voronoi cell computation and is the ﬁrst deterministic single exponential time
exact algorithm for SVP. The time complexity is 22n+o(n) polynomial-time op-
erations. One drawback of the algorithm is that its space requirement is not
polynomial but 2O(n).
The randomized sieve algorithm was discovered by Ajtai, Kumar and Sivaku-
mar (AKS) [3] in 2001. The running time and space requirement were proven to
be 2O(n). Regev’s alternative analysis [23] showed that the hidden constant in
O(n) was at most 16, and it was further decreased to 5.9 by Nguyen and Vidick
[21]. Bl¨omer and Naewe [4] generalized the results of AKS to lp norms. Miccian-
cio and Voulgaris [17] presented a provable sieving variant called the ListSieve
algorithm, whose running time is 23.199n+o(n) polynomial-time operations and
space requirement is 21.325n+o(n) polynomially many bits. Subsequently, Pujol
and Stehl´e [22] improved the theoretical bound of the ListSieve algorithm to
running time 22.465n+o(n) and space 21.233n+o(n) by introducing the birthday at-
tack strategy. In the same work [17], Micciancio and Voulgaris also presented
a heuristic variant of the ListSieve algorithm, called the GaussSieve algorithm.
However, no upper bound on the running time of the GaussSieve Algorithm is
currently known and the space requirement is provably bounded by 20.41n. In
[24], Schneider analyzed the GaussSieve algorithm and showed its strengths and
weakness. What’s more, a parallel implementation of the GaussSieve algorithm
was presented by Milde and Schneider [18]. Recently, Schneider [25] presented
an IdealListSieve algorithm to improve the ListSieve algorithm for the shortest
vector problem in ideal lattices and the practical speed up is linear in the degree
of the ﬁeld polynomial. He also proposed a variant of the heuristic GaussSieve
algorithm for ideal lattice with the same speedup.
To give a correct analysis of its complexity, the AKS algorithm involves some
perturbations. However, getting rid of the perturbations, Nguyen and Vidick [21]
proposed the ﬁrst heuristic variant of the AKS algorithm, which in practice per-
forms better and can solve SVP up to dimension 50. Its running time was proven
to be 20.415n+o(n) polynomial-time operations under some nature heuristic as-
sumption of uniform distribution of the sieved lattice vectors. By introducing
a two-level technique, Wang et al. [31] gave an algorithm (WLTB) to improve
the Nguyen-Vidick algorithm. Under a similar assumption of the distribution
of sieved lattice vectors, the WLTB algorithm has the best theoretical time
complexity so far, that is, 20.3836n+o(n). Both the heuristic assumptions can be
supported by the experimental results on low dimensional lattices.
Our contribution. Observing that the WLTB algorithm involves some da-
ta structure like skip list to reduce the time complexity, we present a three-
level sieve algorithm in this paper. To estimate the complexity of the algorith-
m, it needs to compute the volume of some irregular spherical cap, which is a
very complicated and tough work. By involving a smart technique, we simpli-
fy the complicated computation and prove that the optimal time complexity
is 20.3778n+o(n) polynomial-time operations and the corresponding space com-
plexity is 20.2833n+o(n) polynomially many bits under a similar natural heuristic
assumption.
Table 1 summarizes the complexities of the heuristic variants of AKS algo-
rithm and the GaussSieve algorithm. It can be seen that the latter two algorithms
employ the time-memory tradeoﬀs that decrease the running time complexity at
the cost of space complexity.
algorithm
time complexity space complexity
GaussSieve Algorithm
-
Nguyen-Vidick Algorithm
20.415n+o(n)
20.3836n+o(n)
Our Three-Level Algorithm 20.3778n+o(n)
WLTB Algorithm
20.41n+o(n)
20.2075n+o(n)
20.2557n+o(n)
20.2883n+o(n)
Table 1. Complexities of some heuristic algorithms for SVP
A natural question is whether we can improve the time complexity by four-
level or higher-level algorithm. It may have a positive answer. However, by our
work, it seems that the improvements get smaller and smaller, whereas the anal-
ysis of the complexity becomes more and more diﬃcult when the number of
levels increases.
Road map. The rest of the paper is organized as follows. In Section 2 we
provide some notations and preliminaries. We present our three-level sieve algo-
rithm and the detailed analysis of its complexity in Section 3. Some experimental
results are described in section 4. Finally, Section 5 gives a short conclusion.
2 Notations and Preliminaries
Notations Bold lower-case letters are used to denote vectors in Rn. Denote by vi
the i-th entry of a vector v. Let ∥ · ∥ and ⟨·,·⟩ be the Euclidean norm and inner
product of Rn. Matrices are written as bold capital letters and the i-th column
vector of a matrix B is denoted by bi.
Let Bn(x, R) = {y ∈ Rn | ∥y − x∥ ≤ R} be the n-dimensional ball centered
at x with radius R. Let Bn(R) = Bn(O, R). Let Cn(γ, R) = {x ∈ Rn | γR ≤
∥x∥ ≤ R} be a spherical shell in Bn(R), and Sn = {x ∈ Rn | ∥x∥ = 1} be the
unit sphere in Rn. Denote by |Sn| the area of Sn.
2.1 Lattices
lattice L generated by the basis B is deﬁned as L(B) = {∑
Let B = {b1, b2, . . . , bn} ⊂ Rm be a set of n linearly independent vectors. The
i=1 xibi : xi ∈ Z} . n
is called the rank of the lattice. Denote by λ1(L) the norm of a shortest non-zero
vector of L.
n
2.2 The Basic Framework of Some Heuristic Sieve Algorithms
The Nguyen-Vidick algorithm and the WLTB algorithm have a common basic
framework, which can be described as Algorithm 1 [31].
S
′ ← ∅
and a number N .
Algorithm 1 Finding short lattice vectors based on sieving
′∪ sampling(B) using Klein’s algorithm [13]
Input: An LLL-reduced basis B = [b1, . . . , bn] of a lattice L, sieve factors
Output: A short non-zero vector of L.
1: S
2: for j = 1 to N do
′ ← S
3:
4: end for
5: Remove all zero vectors from S
6: Repeat
S ← S
7:
′ ← sieve(S, sieve factors) using Sieve Algorithm
8:
S
9: Remove all zero vectors from S
10: until S
= ∅
′
′
′
′
11: Compute v0 ∈ S such that ∥v0∥ = min{∥v∥, v ∈ S}
12: Return v0
′
′
′
′
In general the Sieve Algorithm in Line 8 will output a set S
of shorter
lattice vectors than those in S. When we repeat the sieve process enough times,
a shortest vector is expected to be found.
′
Denote by R
(resp. R) the maximum length of those vectors in S
(resp. S).
, the sieve algorithm usually tries to ﬁnd a set C of lattice vectors in
To ﬁnd S
S such that the balls centered at these vectors with radius R
can cover all the
lattice points in some spherical shell Cn(γ, R). By subtracting the correspond-
ing center from every lattice point in every ball, shorter lattice vectors will be
obtained, which form the set S
′
′
.
Diﬀerent ways to ﬁnd C lead to diﬀerent algorithms. Roughly speaking,
{ The Nguyen-Vidick algorithm checks every lattice point in S
sequentially
to decide whether it is also in some existing ball or it is a new vector in C
(see Figure 1 for a geometric description).
{ The WLTB algorithm involves a two-level strategy, that is, the big-ball-
level and the small-ball-level. It ﬁrst covers the spherical shell with big balls
centered at some lattice vectors, then covers the intersection of every big
ball and Cn(γ, R) with small balls centered at some lattice points in the
intersection. The centers of the small balls form C. It can be shown that
it is faster to decide whether a lattice vector is in C or not. We ﬁrst check
whether it is in some big ball or not. If not, it must be a new point in C. If
so, we just check whether it is in some small ball in the big ball it belongs
to, regardless of those small balls of the other big balls (see Figure 2 for a
geometric description).
(a)
(b)
Fig. 1. Geometric description of Nguyen-Vidick’s sieve algorithm
(a)
(b)
(c)
Fig. 2. Geometric description of WLTB’s sieve algorithm
For either the Nguyen-Vidick algorithm or the WLTB algorithm, to analyze
its complexity needs a natural assumption below.
Heuristic Assumption 1: At any stage in Algorithm 1, the lattice vectors
′ ∩ Cn(γ, R) are uniformly distributed in Cn(γ, R).
in S
3 A Three-Level Sieve Algorithm
3.1 Description of the Three-Level Sieve Algorithm
Diﬀerent from the two-level algorithm, our algorithm involves a medium-ball-
level. Simply speaking, the algorithm ﬁrst covers the spherical shell with big
balls, then covers every big ball with medium balls, and at last covers every
medium ball with small balls. Algorithm 2 gives a detailed description of the
three-level sieve algorithm.
Algorithm 2 A three-level sieve algorithm
Input: A subset S ⊆ Bn(R) of vectors in a lattice L where R ← maxv∈S ∥v∥
√
2γ3.
3
2 ,∥v − c2∥ ≤ γ2R then \C c1
,∥v − c3∥ ≤ γ3R then
′ ∪ {v − c3}
← C c1,c2
∪ {v}
2
3
\ centers of small balls \
is initialized as ∅\
\C c1,c2
is initialized as ∅\
3
and sieve factors 0.88 < γ3 < 1 < γ2 < γ1 <
′ ⊆ Bn(γ3R) ∩ L.
S
else
S
else
′ ∪ {v}
′ ← ∅, C1 ← ∅.
if ∥v∥ ≤ γ3R then
Output: A subset S
1: S
2: for v ∈ S do
3:
′ ← S
4:
5:
if ∃ c1 ∈ C1,∥v − c1∥ ≤ γ1R then
6:
if ∃ c2 ∈ C c1
7:
if ∃ c3 ∈ C c1,c2
8:
′ ← S
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end if
20: end for
21: return S
C1 ← C1 ∪ {v}
C c1
2
end if
← C c1
3
end if
∪ {v}
C c1,c2
else
end if
′
else
2
\ centers of medius balls \
\ centers of big balls \
√
In Algorithm 2, 0.88 < γ3 < 1 < γ2 < γ1 <
2γ3. The set C1 is the collection
of centers of big balls with radius γ1R in the ﬁrst level. For any c1 ∈ C1,
C c1
is the set of centers of medium balls with radius γ2R that cover the big
spherical cap Bn(c1, γ1R) ∩ Cn(γ3, R). It is clear that the elements of C c1
2
2 are
chosen from Bn(c1, γ1R) ∩ Cn(γ3, R). For c1 ∈ C1, c2 ∈ C c1
2 , C c1,c2
is the set
of centers of small balls with radius γ3R that cover the small spherical cap
Bn(c2, γ2R) ∩ Bn(c1, γ1R) ∩ Cn(γ3, R). Also the elements of C c1,c2
are chosen
3
3
from the small spherical cap.
3.2 Complexity of the Algorithm
Denote by N1, N2 and N3 the corresponding upper bound on the expected
number of lattice points in C1, C c1
(for any
c1 ∈ C1, c2 ∈ C c1
2
2 ).
(for any c1 ∈ C1) and C c1,c2
The Space Complexity. Notice that the total number of big, medium and
small balls can be bounded by N1, N1N2 and N1N2N3 respectively. As in [21]
and [31], if we sample poly(n)N1N2N3 vectors, after a polynomial number of
iterations in Algorithm 1, it is expected that a shortest non-zero lattice vector
can be obtained with the left vectors. So the space complexity is bounded by
O(N1N2N3).
3
The Time Complexity. The initial size of S is poly(n)N1N2N3. In each
iteration in Algorithm 1, steps 3–19 in Algorithm 2 repeat poly(n)N1N2N3 times,
and in each repeat, at most N1 +N2 +N3 comparisons are needed. Therefore, the
total time complexity can be bounded by O(N1N2N3(N1+N2+N3)) polynomial-
time operations.
We next give the estimation of N1, N2 and N3. Without loss of generality,
we restrict R = 1 and let Cn(γ) = Cn(γ, 1) = {x ∈ Rn | γR ≤ ∥x∥ ≤ 1} through
our proofs for simplicity.
The Upper Bound of N1. Nguyen and Vidick [21] ﬁrst gave a proof of the
upper bound N1, and a more reﬁned proof was given by Wang et al [31].
Theorem 1 (Wang et al. [31]). Let n be a non-negative integer, N be an
integer and 0.88 < γ3 < 1 < γ1 <
√
2γ3. Let
√
2πn
⌈3
3
2⌉,
N1 = cnH1
√
1 − γ2
1
where cH1 = 1/(γ1
4 ) and S a subset of Cn(γ3R) of cardinality N whose
points are picked independently at random with uniform distribution. If N1 <
N < 2n, then for any subset C ⊆ S of size at least N1 whose points are picked
ity, for all v ∈ S, there exists a c ∈ C such that ∥v − c∥ ≤ γ1R.
independently at random with uniform distribution, with overwhelming probabil-
The Upper Bound of N2. Let
{ Ωn(γ1) be the fraction of Cn(γ3) that is covered by a ball of radius γ1 centered
{ Γn(γ1, γ2) be the fraction of Cn(γ3) covered by a big spherical cap Bn(c2, γ2)∩
{ Ωn(γ1, γ2) be the fraction of Bn(c1, γ1) ∩ Cn(γ3) covered by Bn(c2, γ2) ∩
at a point of Cn(γ3),
Bn(c1, γ1)∩ Cn(γ3),
Bn(c1, γ1) ∩Cn(γ3), where c2 ∈ C c1
2 , c1 ∈ C1.
Clearly, Ωn(γ1, γ2) = Γn(γ1,γ2)
Ωn(γ1, γ2). We estimate Ωn(γ1) and Γn(γ1, γ2) respectively.
√
2γ3, then
Lemma 1 (Wang et al. [31]). Let 0.88 < γ3 < 1 < γ1 <
Ωn(γ1) . To compute N2, we need the minimal value of
√
1
2πn
3
(sin θ2)n−1
cos θ2
< Ωn(γ1) <
1√
2π(n − 1)
(sin θ1)n−1
cos θ1
,
where θ1 = arccos(1 − γ2
1
2γ2
3
), θ2 = arccos(1 − γ2
2 ).
1
Note that the proportion Γn(γ1, γ2) is diﬀerent from that of Lemma 4 in [31],
as the radius of Bn(c2, γ2) is larger than the inside radius of the shell Cn(γ3).
Thus, it leads to the slightly diﬀerent bounds of Γn(γ1, γ2) from that of Lemma
4 in [31]. If c2 lies on the sphere of a big ball Bn(c1, γ1), the fraction Γn(γ1, γ2)
is minimal. Lemma 2 gives the minimal and maximal value of Γn(γ1, γ2) when
c2 lies on the sphere of a big ball Bn(c1, γ1).
√
2γ3, where γ3 is very close to 1.
Lemma 2. Let 0.88 < γ3 < 1 < γ2 < γ1 <
Then
√
1 −
(
cdn−2
min
2πn
γ2
3
−γ2
2γ3
1 +1
,
dn−2
max
2π
3 +1−γ2
γ2
′
)2 −