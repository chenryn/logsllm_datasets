title:PGA: Using Graphs to Express and Automatically Reconcile Network
Policies
author:Chaithan Prakash and
Jeongkeun Lee and
Yoshio Turner and
Joon-Myung Kang and
Aditya Akella and
Sujata Banerjee and
Charles Clark and
Yadi Ma and
Puneet Sharma and
Ying Zhang
PGA: Using Graphs to Express and Automatically
Reconcile Network Policies
Chaithan Prakash∧ ∗ Jeongkeun Lee† Yoshio Turner◦ ∗ Joon-Myung Kang† Aditya Akella∧
Sujata Banerjee† Charles Clark‡ Yadi Ma† Puneet Sharma† Ying Zhang†
∧University of Wisconsin-Madison, †HP Labs, ◦Banyan, ‡HP Networking
ABSTRACT
Software Deﬁned Networking (SDN) and cloud automation
enable a large number of diverse parties (network operators,
application admins, tenants/end-users) and control programs
(SDN Apps, network services) to generate network policies
independently and dynamically. Yet existing policy abstrac-
tions and frameworks do not support natural expression and
automatic composition of high-level policies from diverse
sources. We tackle the open problem of automatic, cor-
rect and fast composition of multiple independently spec-
iﬁed network policies. We ﬁrst develop a high-level Pol-
icy Graph Abstraction (PGA) that allows network policies
to be expressed simply and independently, and leverage the
graph structure to detect and resolve policy conﬂicts efﬁ-
ciently. Besides supporting ACL policies, PGA also models
and composes service chaining policies, i.e., the sequence
of middleboxes to be traversed, by merging multiple ser-
vice chain requirements into conﬂict-free composed chains.
Our system validation using a large enterprise network pol-
icy dataset demonstrates practical composition times even
for very large inputs, with only sub-millisecond runtime la-
tencies.
CCS Concepts
•Networks → Programming interfaces; Network man-
agement; Middle boxes / network appliances; Network do-
mains; Network manageability; Programmable networks;
Data center networks;
Keywords
Policy graphs; Software-Deﬁned Networks
∗This work was performed while at HP Labs.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’15, August 17 - 21, 2015, London, United Kingdom
c(cid:13) 2015 ACM. ISBN 978-1-4503-3542-3/15/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2785956.2787506
1.
INTRODUCTION
Computer networks, be they ISPs, enterprise, datacenter,
campus or home networks, are governed by high-level poli-
cies derived from network-wide requirements. These net-
work policies primarily relate to connectivity, security and
performance, and dictate who can have access to what net-
work resources. Further, policies can be static or dynamic
(e.g., triggered). Traditionally, network admins translate high
level network policies into low level network conﬁguration
commands and implement them on network devices, such as
switches, routers and specialized network middleboxes (e.g.,
ﬁrewalls, proxies, etc.). The process is largely manual, often
internalized by experienced network admins over time. In
large organizations, multiple policy sub-domains exist (e.g.,
server admins, network engineers, DNS admins, different
departments) that set their own policies to be applied to the
network components they own or manage. Admins and users
who share a network have to manually coordinate with each
other and check that the growing set of policies do not con-
ﬂict and match their individually planned high level policies
when deployed together.
Given this current status of distributed network policy man-
agement, policy changes take a long time to plan and imple-
ment (often days to weeks) as careful semi-manual checking
with all the relevant policy sub-domains is essential to main-
tain correctness and consistency. Even so, problems are typ-
ically detected only at runtime when users unexpectedly lose
connectivity, security holes are exploited, or applications ex-
perience performance degradation.
And the situation can get worse as we progress towards
more automated network infrastructures, where the number
of entities that generate policies independently and dynami-
cally will increase manyfold. Examples include SDN appli-
cations in enterprise networks, tenants/users of virtualized
cloud infrastructures, and Network Functions Virtualization
(NFV) environments, details in §2.1.
In all of these settings, it would be ideal to eagerly and au-
tomatically detect and resolve conﬂicts between individual
policies, and compose them into a coherent conﬂict-free pol-
icy set, well before the policies are deployed on the physical
infrastructure. Further, having a high level policy abstraction
and decoupling the policy speciﬁcation from the underlying
physical infrastructure would signiﬁcantly reduce the burden
29on the admins/users/application developers of the network
both in crafting and implementing their policies.
In this paper, we address the open problem of automatic,
correct and fast composition of independently generated net-
work policies. Our contributions are:
1. We present a new high-level model called Policy Graph
Abstraction (PGA) for expressing network policies.
PGA is a simple and intuitive graph-based abstraction
for each sub-domain to separately express networking
policy on endpoints, independent of underlying net-
work infrastructure. PGA naturally incorporates net-
work middleboxes and enables automatic, eager com-
position.
2. We develop algorithms to automatically and scalably
compose multiple policy graphs. The composition
maintains the individually speciﬁed invariants from
each policy graph. It also systematically determines an
appropriate service order when merging service chains.
3. We present the design and implementation of the PGA
system. We leverage existing SDN programming lan-
guages (e.g., Pyretic) to represent middlebox function-
ality and analyze service chains. The system can com-
pose over 20K ACL policies from a real policy dataset
in under 600s, while incurring sub-millisecond latency
for the ﬁrst packet of a ﬂow when running reactively.
In this paper, we focus on policies related to network end-
points and decouple underlying network state information
from the PGA abstraction. PGA treats the underlying net-
work as “one big switch”, which in some cases may not re-
ﬂect all the low level policy requirements: e.g., trafﬁc en-
gineering decisions regarding speciﬁc switches/routers/net-
work path [32]. We also do not focus on run-time network
state conﬂicts, which has been recently studied in [33, 39,
13]. Occasionally, there will be a need to consider lower
layer network state in making correct overall network-wide
policy decisions. We leave this interplay between the PGA
abstraction layer and the physical infrastructure state for fu-
ture work.
2. BACKGROUND
We present three scenarios where the distributed policy
speciﬁcation and composition problem arises, followed by a
detailed example that demonstrates technical challenges.
2.1 Target Scenarios
Enterprise networks manage policies using the notion of
network compartments, which are deﬁned based on admin-
istrative domains (e.g., external access network, geograph-
ical site), application/service (e.g., DNS), network protocol
(e.g., IPv6) or network technology (e.g., WLAN). There can
be hundreds of compartments governed by special policies
that are independently speciﬁed and managed; the policies
generated by multiple compartments may be applied to the
same set of network devices.
Cloud infrastructures: tenants want to have their virtual
networks with their own policies. These policies at the vir-
tualized network level are created without any knowledge of
the underlying physical infrastructure, but must comply with
the network operator policies at runtime. A simple change
of operator policy may affect and conﬂict with thousands of
existing tenant policies.
NFV service networks aim to virtualize the service func-
tions that are today implemented on specialized hardware
middleboxes [10, 11]. A key requirement is to provide ser-
vice function chaining (SFC) in these environments, with
no or minimal knowledge of the network infrastructure and
middlebox internals. SFC can be speciﬁed as network poli-
cies where speciﬁc packets/ﬂows have to strictly follow the
chain of service functions. Multiple chains devised by dif-
ferent administrative entities may be deployed on the same
network infrastructure; the logical chains need to be com-
posed into one coherent service chain.
2.2 Challenges in Policy Composition
We use an example to illustrate the challenges that arise
in composing policies in the above scenarios. Consider the
two policies depicted graphically in Fig.1(a), inspired by a
real enterprise scenario. Suppose a company’s marketing
department wants to deploy a CRM (Customer Relationship
Management) application on some of the company’s servers.
The CRM admin speciﬁes a network policy, called P1, that
allows only marketing employees to send trafﬁc to the CRM
servers; the trafﬁc must use TCP port 7000 and must pass
through a load balancing service (LB).
Independently, the company-wide network admin speci-
ﬁes another policy, called P2, that restricts company employ-
ees to access company servers only through TCP ports 80,
334, and 7000; and the trafﬁc must pass through a ﬁrewall
service (FW). Note that Marketing employees are a subset
of all employees, just as CRM servers are a subset of all the
company servers as indicated in Fig. 1(a) by the subset sym-
bol ⊂. These independently speciﬁed policies need to be
combined into a coherent composed policy that respects the
intent of both stakeholders.
Correctly composing P1 and P2 is actually not that sim-
ple with currently available tools and languages. First, P1
and P2 contain two different types of policies: access con-
trol whitelisting (ACL) and network service chaining (FW,
LB). Since the src/dst and port range of P1 are completely
encompassed by those in P2, one may naively compose the
ACL policies by prioritizing P1 over P2, but this incorrectly
allows non-Marketing trafﬁc to reach CRM servers. In ad-
dition, assuming the intended order of the service chain is
FW followed by LB, the intent needs to be factored in for
[Mktg→CRM] trafﬁc.
Network programming frameworks such as Merlin [38]
and GBP [6] are not suitable for independent policy speci-
ﬁcation. GBP does not support composition and so a sin-
gle combined program needs to be written manually. Merlin
supports distributed but not fully independent policy speci-
ﬁcation. The network admin needs to explicitly delegate a
policy to the CRM admin. The CRM admin is only allowed
to modify that delegated policy in restricted ways, and in do-
30P1: 
Mktg. 
7000 
LB 
CRM 
CRM exclusively serves 
only Mktg. employees 
(cid:141)
(cid:141)
P2: 
Employees 
80, 334, 7000 
FW 
Servers  
if_(match(srcip=Mktg, tcp, dstport=7000, dstip=CRM), 
    FW>>LB>>route,  
    if_(match(dstip=CRM), drop, 
        if_(match(srcip=Empl, tcp, dstport=80|334|7000, dstip=Servers), 
(a) Independently specified policies.
            FW>>route, drop))) 
(b) Pyretic-style composite program.
Subject1: CRM-Access  
        tcp, dstport =7000 : Permit, FW-LB chain  
Subject2: CRM-Block  
        * : Deny  
Subject3: Server-Access  
        tcp, dstport=80|334|7000 : Permit, FW chain  
Clauses (Prioritized):  
1. Mktg --> CRM : CRM-Access  
2. * --> CRM : CRM-Block  
3. Employees --> Server : Server-Access 
(c) composite policy specified in GBP.
Mktg 
7000 
FW 
LB 
CRM 
80, 334, 7000 
80, 334, 7000 
Empl 
(cid:16)  
Mktg 
FW 
FW 
Servers 
(cid:16)  
CRM 
(d) Composed policy in a graph.
Figure 1: Policy composition example.
ing so must be exposed to and take into account the network
admin’s intent.
Other frameworks such as Frenetic [20] and Pyretic [34]
allow users to compose modular policies/programs into a
more complex control program. For example, Pyretic users
can cause two policies to be sequentially applied to an in-
coming packet using the >> operator, and this is effective
to chain multiple service functions (such as FW>>LB). The
sequential operator cannot be used to directly compose P1
and P2: e.g., P1>>P2 composition fails to allow [Empl→
Servers−CRM] trafﬁc since the trafﬁc cannot pass P1’s ACL.
Pyretic‘s parallel composition, P1+P2, will apply each pol-
icy to a different copy of the same packet and fail to block
non-Marketing trafﬁc and to create the FW>>LB chain.
From these failed attempts to combine P1 and P2, we see
that a correct composition requires carefully decomposing
each of P1 and P2 into ACL and service requirements and re-
composing them into a single program. In particular, Pyretic
supports an if _(match(), A, B) statement for ‘if match()
do A, else B’. With this, users can write a composite pro-
gram implementing P1 and P2, as shown in Fig.1(b). How-
ever, the user has to carefully consider the ﬂow space rela-
tions (P1 ⊂ P2) and manually compose the FW>>LB chain
for [Mktg→CRM], place P1’s match() classiﬁer followed
by P2, and insert if _(match(dstip = CRM ), drop, ...) in
between to implement exclusive access to CRM. A similar
manually composed program for GBP is shown in Fig.1(c).
Such manual decomposition and re-composition process
is possible when done by a human operator who clearly un-
derstands the joint intent of P1 and P2. Based on such un-
derstanding, the operator can 1) resolve, the ACL conﬂict
between P1 and P2 and 2) decide, the order between FW
and LB. P1 and P2 ACL policies do conﬂict since P1 blocks
trafﬁc from non-Mktg employees to CRM while P2 allows
the trafﬁc (by allowing its super-set). The joint intent used
to resolve this conﬂict would be P1’s exclusive access policy
overrides P2’s allow policy. Similarly, the order of the FW-
LB chain is chosen using the operator’s internal knowledge
of the service functions.
Even if such joint intents are clear to the human opera-
tor, it is impractical and error-prone to manually compose
thousands of real world policies that have more complex
super/sub-set relations and access control requirements: e.g.,
exclusive access to source/destination, conditional on other
attributes such as location and security level.
Thus, automated composition by the system, not by a hu-
man, is critical to build a practical and scalable policy frame-
work. The key to enabling automatic composition is to ex-
plicitly capture the internal intents of the individual policy
writer in each policy. Existing policy abstractions [19, 23,
38] do not support this. For instance, they cannot express
the intent that an Allow ACL rule MUST allow its speciﬁed
trafﬁc; thus, the Allow rule can be overridden by a Deny rule
from another policy it is combined with. Similarly, exist-
ing service chain policy work [38, 31] can only capture the
intent that certain service functions should be deployed on
the speciﬁed path, but they cannot capture the service func-
tions/actions that MUST NOT be applied by other policies.
Hence, a human oracle is required to manually combine ser-
vice function requirements from different policies.
Fig.1(d) shows a correct composition of P1 and P2 in a
simple graph. Only Mktg. employees can send to the CRM
servers through the FW-LB service chain. The other servers
except for CRM, expressed by a primitive set operator diff
(‘−’), accept trafﬁc from all Employee devices including
Mktg. An entire policy for any endpoint pair is expressed