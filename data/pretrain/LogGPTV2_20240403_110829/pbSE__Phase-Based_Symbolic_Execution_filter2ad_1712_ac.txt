### 优化后的文本

#### 基本块覆盖率结果
以下是KLEE和pbSE在不同测试策略下的基本块（BBs）覆盖率数据。从表格中可以看出，在10小时内，KLEE使用不同的搜索策略最多覆盖了1239个基本块，而pbSE在同一时间内可以覆盖2597个基本块。由于具体执行和阶段分析步骤所需时间不超过10分钟，因此在实验中我们不考虑超过10小时的时间成本。

pbSE首先将执行过程划分为多个阶段，结果如图4(b)所示。然后，根据第三节提到的调度策略对每个阶段进行符号执行。最终，pbSE能够覆盖KLEE未能覆盖的不同阶段的基本块，并且覆盖更多的新代码，相比KLEE的最佳结果，代码覆盖率提高了109%。

#### 第二个实验
在第二个实验中，我们将pbSE和KLEE应用于上述三个程序以评估覆盖率。对于libpng和libtiff，我们随机从项目提供的测试用例中选择种子。我们为KLEE选择了random-path和covnew两种搜索策略，因为它们通常被认为是最佳策略。

表II显示了每个程序的代码覆盖率结果。第一列表示程序名称和使用的测试驱动。第二列到第九列显示了KLEE在不同大小符号文件下使用random-path搜索策略的结果。第十列到第十七列显示了covnew策略的覆盖率结果。第十八列和第十九列表示pbSE覆盖的基本块数量。最后一列表示pbSE相对于KLEE最佳结果的提升幅度。

表II展示了代码覆盖率的结果。在libdwarf测试中，KLEE在最佳情况下覆盖了491个基本块，而pbSE覆盖了1045个基本块，比KLEE多112%。对于libpng，pbSE覆盖的基本块数量比KLEE高121%，而对于libtiff，高134%。在libpng的实验中，可以看到KLEE在1小时测试和10小时测试中的代码覆盖率几乎相同。这是因为在libpng的1小时测试中，符号执行已经进入了一个陷阱阶段，代码覆盖率自然停止增长。我们的方法可以对每个单独的阶段进行测试，因此可以覆盖更多的代码。

值得注意的是，pbSE可以识别出比以往方法更多的陷阱阶段。gif2tiff的阶段划分如图4所示，其中不同的颜色代表不同的阶段，标记的陷阱阶段用文本标识（tp表示陷阱阶段）。图4(a)显示了仅通过BBVs划分得到的阶段结果，图4(b)显示了结合BBVs和代码覆盖率得到的结果。从图中可以看出，仅通过BBVs划分得到的阶段更为分散，只能识别出两个陷阱阶段。而结合BBV和代码覆盖率后，可以识别出四个陷阱阶段，使代码分布更加连续。

#### 错误检测
由于覆盖了更多新代码，pbSE可以发现更多的错误。在我们的实验中，发现了21个未知错误，其中libpng中有2个，libtiff中有5个，readelf中有4个，libdwarf中有10个。在这21个错误中，有7个被分配了CVE ID。表III详细列出了这些错误。

第一列表示测试包的名称。第二列显示实验中使用的测试驱动。第三列（s-size）表示pbSE使用的种子大小。第四列（t-p）显示在测试中识别出的陷阱阶段数量。第五列（b-p）显示发现错误的阶段索引。最右列显示如果已分配，则显示错误的CVE ID。

下面我们描述pbSE发现的两个代表性错误，并将其与标准符号执行的错误发现能力进行比较。

**libtiff案例研究：**
libtiff是一个用于读取TIFF图像文件标签信息的库程序，包括gif2tiff、tiff2pdf、tiff2rgba等24个测试工具。这些工具通过调用libtiff来分析TIFF图像文件。我们在实验中测试的版本是libtiff-4.0.6，包含62373行代码（由cloc计算）。

在libtiff测试中，pbSE报告了超过20个错误，其中包括至少5个未知错误。其中，3个是内存越界读错误，1个是内存越界写错误，1个是整数溢出错误。这里以一个内存越界读错误为例。该错误是在测试tiff2rgba时发现的，种子是从互联网上随机选择的。

包含该错误的代码如图6所示。在函数putcontig8bitCIELab（第1647行）中，w和h值可以从文件中读取，并且在符号执行时可以是符号值。pp指向的内存大小是固定的，在我们的测试中是257字节。当h * w * 3大于257时，pp读取的内存将会越界。

我们提到这个错误是因为它很好地说明了pbSE的优势。在我们的实验中，pbSE识别出4个陷阱阶段，并在测试第三个阶段时发现了这个错误。图5(a)显示了使用正常种子的具体执行中的基本块分布和阶段划分，图5(b)显示了使用触发错误的种子的具体执行中的基本块分布。

对比图5(a)和图5(b)，可以看出直到程序执行一段时间（约4秒）后才会触发错误。从pbSE划分的阶段（图5(a)的顶部部分）可以看出，正是第三个陷阱阶段触发了错误。在使用KLEE的测试中，经过10小时的测试，KLEE只达到了第二个阶段；而pbSE在一个小时内就检测到了该错误。

**libpng案例研究：**
libpng是一个官方的PNG图像库，广泛应用于许多操作系统和应用程序。在libpng的测试中，我们使用pngtest程序作为测试驱动，并使用pngtest.png作为种子。这两个都是由项目提供的。

```c
#define DECLAREContigPutFunc(name) \
static void name(\
    TIFFRGBAImage* img, \
    uint32* cp, \
    uint32 x, uint32 y, \
    uint32 w, uint32 h, \
    int32 fromskew, int32 toskew, \
    unsigned char* pp \
) { \
    for (x = w; x-- > 0;) { \
        TIFFCIELabToXYZ(img->cielab, \
            float X, Y, Z; \
            uint32 r, g, b; \
            (void) y; \
            fromskew *= 3; \
            while (h-- > 0) { \
                // 具体实现细节
            } \
        } \
    } \
}

DECLAREContigPutFunc(putcontig8bitCIELab)
```

希望以上优化后的文本能更好地传达你的意图，并且更具清晰度和专业性。