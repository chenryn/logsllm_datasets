   Rows out:  0 rows at destination with 3.769 ms to end, start offset by 0.250 ms.  
   ->  Index Scan using idx_t_bitmap_1 on t_bitmap  (cost=0.00..200.27 rows=1 width=13)  
         Index Cond: c1 = 1  
         Rows out:  0 rows (seg0) with 0.091 ms to end, start offset by 3.004 ms.  
 Slice statistics:  
   (slice0)    Executor memory: 115K bytes.  
   (slice1)    Executor memory: 273K bytes avg x 3 workers, 273K bytes max (seg0).  
 Statement statistics:  
   Memory used: 128000K bytes  
 Total runtime: 4.110 ms  
(11 rows)  
postgres=# explain analyze select * from t_bitmap where c1  Index Scan using idx_t_bitmap_1 on t_bitmap  (cost=0.00..200.27 rows=1 width=13)  
         Index Cond: c1  ST_Transform(ST_GeomFromText('POINT(108.50000000001 22.8)', 4326), 26986) limit 10;    
```    
## 十四、内部窥视索引存储    
https://www.postgresql.org/docs/9.6/static/pageinspect.html    
通过pageinspect插件，可以读取索引页的内容。    
例子    
```    
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);    
-[ RECORD 1 ]-+-----    
blkno         | 1    
type          | l    
live_items    | 256    
dead_items    | 0    
avg_item_size | 12    
page_size     | 8192    
free_size     | 4056    
btpo_prev     | 0    
btpo_next     | 0    
btpo          | 0    
btpo_flags    | 3    
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);    
 itemoffset |  ctid   | itemlen | nulls | vars |    data    
------------+---------+---------+-------+------+-------------    
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00    
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00    
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00    
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00    
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00    
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00    
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00    
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00    
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),    
                                     'brinidx')    
       ORDER BY blknum, attnum LIMIT 6;    
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value         
------------+--------+--------+----------+----------+-------------+--------------    
        137 |      0 |      1 | t        | f        | f           |     
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}    
        138 |      4 |      1 | t        | f        | f           |     
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}    
        139 |      8 |      1 | t        | f        | f           |     
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}    
```    
## 小结  
1、btree，适合任意单值类型，可用于```=, >, =, <=```以及排序。  
选择性越好(唯一值个数接近记录数)的列，越适合b-tree。  
当被索引列存储相关性越接近1或-1时，数据存储越有序，范围查询扫描的HEAP PAGE越少。  
2、hash，当字段超过单个索引页的1/4时，不适合b-tree索引。如果业务只有```=```的查询需求，使用hash index效率更高。  
3、gin，倒排存储，（column value: row IDs tree|list）。适合多值列，也适合单值列。例如数组、全文检索、JSON、HSTORE等类型。  
多值列搜索：包含、相交、不包含。  
单值列搜索：等值。  
适合多列组合索引(col1,col2,coln)，适合任意列组合搜索。  
目前gin索引仅支持bitmap scan（按heap page id顺序搜索）。  
4、gist，适合数据有交错的场景，例如 全文检索、range类型、空间类型(点、线、面、多维对象... ...)。  
空间类型，支持几何搜索（包含、相交、上、下、左、右等）。支持KNN排序。  
全文检索类型、范围类型，支持包含搜索。  
[《PostgreSQL 黑科技 - 空间聚集存储, 内窥GIN, GiST, SP-GiST索引》](../201709/20170905_01.md)    
https://www.citusdata.com/blog/2017/10/17/tour-of-postgres-index-types/  
5、sp-gist，空间分区索引类型，适合不平衡数据集(例如xxxyyyzzz??????组成的VALUE，xxx, yyy, zzz，每个值包含一些数据集，每个数据集的数据量不平衡可能导致TREE不平衡)。  
sp-gist索引结构，可以用于解决此类不平衡数据的倾斜问题。  
适合空间数据类型。  
[SP-GiST: An Extensible Database Index for Supporting Space Partitioning Trees](20170627_01_pdf_003.pdf)  
![pic](20170627_01_pic_001.jpg)  
6、brin，块级索引，记录每个或每连续N个数据块的数据边界。  
BRIN适合单值类型，当被索引列存储相关性越接近1或-1时，数据存储越有序，块的边界越明显，BRIN索引的效果就越好。  
BRIN支持多列、单列。  
BRIN适合搜索一个范围的数据。目前只支持BITMAP扫描方式（按heap page id顺序搜索）。  
[《万亿级电商广告 - brin黑科技带你(最低成本)玩转毫秒级圈人(视觉挖掘姊妹篇) - 阿里云RDS PostgreSQL, HybridDB for PostgreSQL最佳实践》](../201708/20170823_01.md)    
7、bloom，支持被索引字段的任意组合的等值搜索。  
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)    
8、rum，支持全文检索类型，支持单值列+全文检索列，支持近似文本搜索。  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
9、zombodb，PG与ES搜索引擎结合的一种索引，在PG数据库中透明使用ES。  
[《[未完待续] PostgreSQL Elasticsearch 插件 - zomboDB》](../201710/20171001_06.md)    
10、bitmap，支持1000~10000个唯一值的列。适合多个值的 与或 条件搜索。  
[《Greenplum 最佳实践 - 什么时候选择bitmap索引》](../201705/20170512_01.md)    
11、varbitx，阿里云RDS PG提供的一种BIT类型管理插件，支持BIT的设置，搜索等操作。  
[《阿里云RDS for PostgreSQL varbitx插件与实时画像应用场景介绍》](../201705/20170502_01.md)    
12、部分索引，只检索部分列。在索引中过滤不需要被搜索，不适合建立索引的行。  
13、表达式索引，对于不同的搜索条件，支持使用表达式索引提高查询速度。例如函数索引。  
14、多索引bitmap合并扫描，多个索引可以使用BITMAP SCAN合并扫描。例如两个条件与搜索，使用BITMAP SCAN，可以跳过不需要扫描的数据块。  
[《PostgreSQL bitmapAnd, bitmapOr, bitmap index scan, bitmap heap scan》](../201702/20170221_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")