The main contribution of [19] is the separation of level
membership testing from item storage.
Instead of check-
ing for an item at a given level by reading the entire rele-
vant bucket of O(log n)-blocks, an encrypted Bloom ﬁlter is
queried ﬁrst. This indicates to the client which of two po-
tential items (the real, if there, or a speciﬁc fake, otherwise)
to retrieve. This saves a factor of O(log n) server storage, as
there is now only a single fake item per real item, instead
of O(log n). These reduced storage requirements simultane-
ously speed up level construction and querying.
More speciﬁcally, item location is encoded via a Bloom ﬁl-
ter; any given item has membership in one of log2 n Bloom
ﬁlters, corresponding to one for each level. The level corre-
sponding to the Bloom ﬁlter that contains this item is the
level where the item must be retrieved from. Bloom ﬁlters
are queried from the top down; maintaining access privacy
requires that any given lookup be performed only once on
any given Bloom ﬁlter. Once an item is found to be at a par-
ticular level, it is retrieved by its label, which is a one-way
keyed hash of the item id, level number, and the number of
times this level has been rebuilt. It is then copied up to the
top, so the request will be satisﬁed at a higher level next
time. Fake lookups are performed on those levels where the
item does not exist. These retrieve a previously stored fake
item identiﬁed by a one-way keyed hash of the level number,
the number of times this level has been rebuilt, and the cur-
rent total access count. Random Bloom ﬁlter lookups are
performed below where the item is found.
This is an interactive process requiring log2 n round trips:
the client needs to know the success of a lookup at a given
level before it can start the query at the next level. Figure
1 illustrates this process of querying.
It has been shown [14] that the security analysis of [19]
is incomplete, suggesting larger Bloom ﬁlters are needed to
obtain negligible false positive rates. They also recommend
a diﬀerent selection in the tradeoﬀ between Bloom ﬁlter size
(aﬀecting server storage and shuﬄe cost), and the number
of hash functions chosen (aﬀecting online cost). This adds a
factor of log log n to the Bloom ﬁlter construction cost. We
apply these insights in the choices of Bloom ﬁlter parameters
(number of hash functions k, and size in bits) and in the
performance analysis (Section 7) of SR-ORAM.
We also note that [19] assumes a signiﬁcant amount of
temporary client storage necessary in the reshuﬄe step. This
assumption is not suitable for our model. Instead, following
the example of others[14, 7], SR-ORAM uses an oblivious
randomized shell sort [9] to support the level reshuﬄe and
construct Bloom ﬁlters obliviously without client storage.
This reduction in client storage requirements comes with
performance penalties, as will be discussed later.
3.4 Other constant-round-trip ORAMs
Other recent approaches provide ways around the penalty
of highly interactive protocols, at the cost of additional hard-
ware or overwhelming requirements of client storage. The
main issue in constructing a single round trip ORAM is
that a request for an item depends on how recently an item
was accessed. Maintaining this information at the client re-
quires storage at least linear in the size of the outsourced
database. Moreover, retrieving this information privately
from the server is almost as diﬃcult as providing ORAM. 5
Secure Hardware. Secure hardware such as the IBM 4764
[11] can be placed server-side, using remote attestation to re-
tain security guarantees for clients [2]. Secure hardware is
typically an order of magnitude more expensive than stan-
dard processors. Due to heat dissipation diﬃculties it is typ-
ically also an order of magnitude slower. Moreover, the ne-
cessity of physical security to provide any guarantees makes
such solutions vulnerable to a diﬀerent class of attacks. Sev-
eral authors have examined the use of secure hardware in the
access privacy scenario [15, 12].
Constant-round-trip protocols using client storage.
[16] maintains item location information at the client. Al-
though at the outset, n log2 n bits of client storage seems
like a big assumption, the authors argue this is reasonable
in some situations, since the block size is typically larger
than log n. They show that in practice, the local required
client storage in practice is only a small fraction of the total
database size. The recursive construction, using a second
5With the diﬀerence that this recursive ORAM only requires
storing O(log log n) bits per item, which is enough location
information about the item to build the query.
295Figure 1: Interactive Bloom ﬁlter querying. Both the lower level Bloom ﬁlter lookups and item lookups are
dependent on the Bloom ﬁlter results of the levels above.
ORAM to store this level membership information, how-
ever, is interactive. SR-ORAM requires only O(log2 n) bits
of client storage (Section 5).
More recently, Goodrich et al. [10] introduced a constant-
round-trip protocol assuming n1/c client storage. The num-
ber of round trips depends on the amount of client storage.
The non-interactive cache-based ORAM presented in 2006
[17] relies on s client storage to provide an
by Wang et al.
amortized overhead of O(n/s). The idea is to add previously
unseen items to a cache, which gets shuﬄed back into the
remote database when it ﬁlls. The high client storage re-
quirements (and poor storage/performance tradeoﬀ) make
it unsuitable for our model. This idea is revisited under
diﬀerent assumptions by Boneh et al. [4], with security for-
malization, but still requiring client storage.
A large number of interactive ORAM solutions have been
proposed. A great review is provided by Kushilevitz et al.
[13]. A full review should also include recent interactive
de-amortized ORAMs such as the construction by Goodrich
et al. [8]. These resolve another drawback of many ORAMs
(SR-ORAM included), the disparity between average-case
and worst-case query cost.
4. A FIRST PASS
This strawman construction modiﬁes a Bloom-ﬁlter-based
ORAM presented by Williams et al. [19]. It has the struc-
ture, but not yet the performance, of the SR-ORAM con-
struction. As detailed in Section 3.3, that Bloom ﬁlter
ORAM uses encrypted Bloom ﬁlters to store level member-
ship of items. To seek an item, the querying client must
request a known fake item from each level, except from the
level containing this item: the item is requested here instead.
Which level the item is at depends only on how recently this
item was last accessed. Since the client does not have stor-
age to keep track of that, it checks the Bloom ﬁlters one at
a time to learn if the item is at each level.
As the main principle of level-based ORAMs requires each
item be sought only once per level instance, it is unsafe to
query the Bloom ﬁlters past the level where this item is
present. This explains why the checks must be interactive:
once the item is found at level i, further accesses at the levels
below (i + 1 through log2 n) entail only random Bloom ﬁlter
queries corresponding to fake item requests. Moving the
found item to the top of the pyramid guarantees that later,
it will be sought and found elsewhere, since it moves back
down to other levels only by riding a wave of level reshuﬄes.
We now turn this, safely, into a non-interactive process.
Observe that in an interactive ORAM, if the client is re-
questing a recently accessed item j that happens to be in
level 2, the access sequence will proceed as follows. This
example is also illustrated in Figure 1. We use j to denote
the item identiﬁer, and sk for the secret key, and gen to
represent the current generation of that level (a function of
the total, global number of accesses, accesscount).
1. The client checks the level 1 Bloom ﬁlter for the item:
reading the positions generated by:
Hash(sk | level=1 | gen | j )
2. Upon seeing Encrypt(0) at one or more of those posi-
tions in the Bloom ﬁlter, the client learns the item is
not at level 1. So it asks for a fake item instead, that
is labeled as:
Hash(sk | level=1 | gen | “fake” | accesscount )
3. The client now checks the level 2 Bloom ﬁlter for the
item: reading the positions indicated by:
Hash(sk | level=2 | gen | j )
4. Seeing Encrypt(1) at every position, the client learns
the item is at this level. This makes it safe to request
the item here; the client requests the block labeled
Hash(sk | level=2 | gen | “item” | j )
5. Having found the item, to maintain appearances and
not reveal this fact to the server, the client continues
to issue random Bloom ﬁlter lookups at each level i
below. At each level it requests the fake blocks labeled
Hash(sk | level=i | gen | “fake” | accesscount )
Note that there are only log2 n possible such access se-
quences, based on which level the item is found at (Figure
2). Each path starts with a real query. Active queries con-
tinue until an item is found, at which point only fake queries
are issued from there on down. This limited number of pos-
sible sequences makes non-interactive querying possible.
Since we have a ﬁnite number of these paths, our goal is
to follow one of these paths non-interactively, not knowing
296Figure 2: Left: potential query paths in unmodiﬁed BF-based ORAM. The client does not know at the time
of querying which of the log2 n possible paths will be taken; it depends on where the data is ultimately found.
As in the example used in Figure 1, the level 1 BF lookup returns false, indicating a fake should be retrieved
from level 1. The level 2 BF lookup returns true, indicating the item should be retrieved from level 2. A fake
BF query is run for level 3 since the item has already been found. Right: the query object in SR-ORAM.
The server learns the edges corresponding to exactly one path. The server will be able to decrypt one such
edge at each level, revealing the data ID, to retrieve and include in the response to the client, and decrypting
a node of the query object in the level below.
ahead of time which level the item is at (and thus which of
the log2 n paths will be followed).
To achieve this, we propose to have the Bloom ﬁlter re-
sults themselves be used in unlocking one of the two possible
edges leading to the next query. A successful lookup will un-
lock the edge leading to a “ﬁnished” set, under which only
fake queries will follow. Conversely, failure must unlock the
edge continuing down the “active” search set. Once in the
“ﬁnished” set, it is impossible to return back to the “active”
set. Most importantly, the server must not gain any ability
at identifying which path it is currently on.
One strawman idea, exponential in the number of Bloom
ﬁlter hashes k, is to make each bit in the Bloom ﬁlter a piece
of a decryption key unlocking an edge to the next node. For
each level, the client prepares 2k results, corresponding to
each possible state of the Bloom ﬁlter. The Bloom ﬁlter
keys are generated deterministically by the client using a
cryptographic hash, so that the client can eﬃciently keep
track of them with only logarithmic storage. That is, a bit
set to 1 at position pos in the Bloom ﬁlter is represented by
Tpos = Hash(sk | pos | level | gen | 1), and a bit set to 0
by Fpos = Hash(sk | pos | level | gen | 0). The server learns
only one of the two (never both).
A Bloom ﬁlter lookup involves k bit positions (k is the
number of underlying Bloom ﬁlter hash functions). For
each new level it traverses, the server needs to know the
k associated Bloom ﬁlter bit positions to retrieve, consti-
tuting this level’s query. For the ﬁrst level, these are pro-
vided by the client. For each successive level, the server
will get this information by incrementally decrypting por-
tions of a client-provided “query object” data structure.
Illustrated in Figure 2 (right), the “query object” is com-
posed of log2 n levels and is traversed by the server top-down
synchronized with the traditional ORAM traversal. The
query object allows the server to progress in its database
traversal without learning anything.
Each level in the query object (with the exception of the
root), contains two nodes: a “ﬁnished” node and an “ac-
tive” node. Each node contains the k positions deﬁning the
current level Bloom ﬁlter query. The nodes also contain a
“keying” set of 2k elements.6
After performing the Bloom ﬁlter lookup, the server will
be able to decrypt one of these elements (only). Once de-
crypted, this element contains a key to decrypt one of the
query object’s next level two nodes; it also contains the iden-
tiﬁer for a current level item to return to the client. To pre-
vent leaks, the server will be asked to return one item for
each level, since we do not want to reveal when and where
we found the sought-after real item.
In eﬀect this tells the server where to look next in the
query object—i.e., which of the query object’s next level two
nodes (“ﬁnished” or “active”) to proceed with. This guides
the server obliviously through either the “ﬁnished” or the
“active” set, as follows:
• If the current level contains the sought-after item, the
server’s work is in fact done. However, the server can-
not be made aware of this. Hence, it is made to con-
tinue its traversal down the ORAM database, via a
sequence of fake queries. The “ﬁnished” node of the
next query object level allows the server to do just
6After encryption, these elements are sent in a random order
to prevent the server from learning any information.
297that, by providing the traversal information down the
“active” set.
• If, however, the current level does not contain the sought-
after item, the server must be enabled to further query
“real” data in its traversal down the ORAM database—
it will thus receive access to “active” node of the next
query object level.
To prevent the server from decrypting more than one ele-
ment from a node’s “keying” set, a special encryption setup
is deployed. Each of the 2k elements of the “keying” set is
encrypted with a special query object element key (QOEK),
only one of which the server will be able to reconstruct cor-
rectly after its Bloom ﬁlter query.
More speciﬁcally, for a Bloom ﬁlter lookup resulting in k
bit representations (i.e., biti is the representation of the bit
7), the QOEK is deﬁned as
at position i – either Ti or Fi
QOEK = Hash(bit1 | bit2 | bit3 | ... | bitk).
The encryption setup of the “keying” set ensures that this
key decrypts exactly one of its elements. The element cor-
responding to a Bloom ﬁlter “hit” (the sought-after element
was found at this level, i.e., all the underlying Bloom ﬁlter
bits are set to 1) leads down the “ﬁnished” set, i.e., the el-
ement that QOEK decrypts now, leads down the “ﬁnished”
set in the query object’s next level.
5. EFFICIENT CONSTRUCTION
We now present an eﬃcient construction, using O(log n)
client storage, O(log n log log n) per-query online message
size, and O(log2 n log log n) amortized communication, but
still only O(1) round trips. We reduce the size of the query