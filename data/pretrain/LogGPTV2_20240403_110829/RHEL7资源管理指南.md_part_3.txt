:::
::: para
`systemd-run`{.command} 指令用于创建、启动临时 [*service*]{.emphasis} 或
[*scope*]{.emphasis} 单位，并在此单位中运行自定义指令。在 service
单位中执行的指令在后台非同步启动，它们从 [**systemd**]{.application}
进程中被调用。在 scope 单位中运行的指令直接从 `systemd-run`{.command}
进程中启动，因此从调用方继承执行状态。此情况下的执行是同步的。
:::
::: para
在一个指定 cgroup 中运行指令，请以 `root`{.systemitem} 身份输入：
:::
``` synopsis
systemd-run --unit=name --scope --slice=slice_name command
```
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *name* 代表您想要此单位被识别的名称。如果 `--unit`{.option}
    没有被指定，单位名称会自动生成。建议选择一个描述性的名字，因为它将代表
    `systemctl`{.command}
    输出中的单位。在单位运行时期间，此名字需为独一无二的。
    :::
-   ::: para
    使用可选的 `--scope`{.option} 参数创建临时 [*scope*]{.emphasis}
    单位来替代默认创建的 [*service*]{.emphasis} 单位。
    :::
-   ::: para
    `--slice`{.option} 选项，让您新近创建的 [*service*]{.emphasis} 或
    [*scope*]{.emphasis} 单位可以成为指定 slice 的一部分。用现存
    slice（如 `systemctl -t slice`{.command} 输出所示）的名字替代
    *slice_name*，或者通过传送一个独有名字来创建新
    slice。默认情况下，service 和 scope 做为 [**system.slice**]{.bold
    .bold} 的一部分被创建。
    :::
-   ::: para
    用您希望在 service 单位中运行的指令替代 *command*。将此指令放置于
    `systemd-run`{.command} 句法的最末端。这样，此指令的参数就不会与
    `systemd-run`{.command} 参数混淆。
    :::
:::
::: para
除上述选项外，`systemd-run`{.command}
也有一些其它可用参数。例如，`--description`{.option}
可以创建对单位的描述；service 进程结束后，`--remain-after-exit`{.option}
可以收集运行时信息；`--machine`{.option}
选项可以在密闭容器中执行指令。更多信息，请参阅
`systemd-run`{.command}(1) manual page。
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#Starting_a_New_Service_with_systemd-run}
**例 2.1. 用 systemd-run 来启动新 service**
::: example-contents
::: para
使用下列指令在名为 `test`{.literal} 的新 slice 的 service 单位中运行
[**top**]{.application} 实用功能。以 `root`{.systemitem} 身份输入：
:::
``` synopsis
~]# systemd-run --unit=toptest --slice=test top -b
```
::: para
如果您正确启动了 service，将显示以下信息：
:::
``` synopsis
Running as unit toptest.service
```
::: para
现在，[*toptest.service*]{.emphasis} 名称可以与 `systemctl`{.command}
指令结合，以监控或修改 cgroup。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Creating_Persistent_Cgroups}2.1.2. 创建永久 cgroup {.title}
:::
::: para
若要在系统启动时，配置一个自动启动的单位，请执行
`systemctl enable`{.command} 指令（参见《[Red Hat Enterprise Linux 7
系统管理员指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide)
· [ *使用 systemd 管理 service* ]{.emphasis}》）。自动运行此指令会在
`/usr/lib/systemd/system/`{.filename} 目录中创建单位文件。如要对 cgroup
做出永久改变，请添加或修改其单位文件中的配置参数。更多信息，请参阅〈[第 2.3.2 节
"修改单位文件"](#chap-Using_Control_Groups.html#sec-Modifying_Unit_Files){.xref}〉。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_Control_Groups.html#sec-Removing_Cgroups}2.2. 删除控制群组 {.title}
:::
::: para
临时 cgroup 所包含的进程一旦结束，临时 cgroup 就会被自动释放。通过将
`--remain-after-exit`{.option} 选项传递给
`systemd-run`{.command}，您可以在其进程结束后，让单位继续运行来收集运行时的信息。如要单位停止运行，请输入：
:::
``` synopsis
systemctl stop name.service
```
::: para
如果您希望一个 service 停止运行，请将 *name* 替换成此 service
的名字。如要终止一个或多个单位中的进程，请以 `root`{.systemitem}
身份输入：
:::
``` synopsis
systemctl kill name.service --kill-who=PID,... --signal=signal 
```
::: para
用单位名（如 [*httpd.service*]{.emphasis}）替代 *name*。使用
`--kill-who`{.option} 从 cgroup
中挑选您希望结束的进程。如要同时终止多项进程，请传送一份 PID
的逗号分隔列表。用您希望发送至指定进程的 POSIX 信号类型替代
*signal*。默认情况下是 [*SIGTERM*]{.emphasis}。更多信息，请参阅
`systemd.kill`{.systemitem} manual page。
:::
::: para
当单位被禁用并且其配置文件通过运行（下列行）被删除，永久 cgroup
会被释放：
:::
``` synopsis
systemctl disable name.service 
```
::: para
此处，*name* 代表您希望禁用的 service 名字。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_Control_Groups.html#sec-Modifying_Control_Groups}2.3. 修改 cgroup {.title}
:::
::: para
所有被 `systemd`{.systemitem} 监管的永久单位都在
`/usr/lib/systemd/system/`{.filename} 目录中有一个单位配置文件。如要修改
service 单位的参数，请修改此配置文件。可以手动完成或者从命令列界面使用
`systemctl set-property`{.command} 指令。
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Setting_Parameters_from_the_Command-Line_Interface}2.3.1. 在命令列界面设定参数 {.title}
:::
::: para
`systemctl set-property`{.command}
指令让您可以在应用程序运行时，持续修改资源管控设置。请以
`root`{.systemitem} 身份使用下列句法来完成此项操作：
:::
``` synopsis
systemctl set-property name parameter=value
```
::: para
用您希望修改的 systemd 名字来替代 *name*，希望改动的参数名称来替代
*parameter*，希望分配给此参数的新值来替代 *value*。
:::
::: para
并非所有单位参数都能在运行时被修改，但是大多数与资源管控相关的参数是可以的。如需要完整列表，请参阅〈[第 2.3.2 节
"修改单位文件"](#chap-Using_Control_Groups.html#sec-Modifying_Unit_Files){.xref}〉。提示：`systemctl set-property`{.command}
指令让您可以同时修改多项属性，所以相较于单独设定每项属性，推荐您使用此指令。
:::
::: para
改动会立即生效并被写入单位文件，并在重启后保留。您可以传递
`--runtime`{.option} 选项，让设定变成临时设定。
:::
``` synopsis
systemctl set-property --runtime name property=value
```
::: example
[⁠]{#chap-Using_Control_Groups.html#ex-Using_systemctl_set-property}
**例 2.2. 使用 systemctl set-property**
::: example-contents
::: para
如需使用命令列来限定 [*httpd.service*]{.emphasis} 的 CPU
和内存占用量，请输入：
:::
``` synopsis
~]# systemctl set-property httpd.service CPUShares=600 MemoryLimit=500M
```
::: para
如希望此更改为临时更改，请添加 `--runtime`{.option} 选项：
:::
``` synopsis
~]# systemctl set-property --runtime httpd.service CPUShares=600 MemoryLimit=500M
```
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Modifying_Unit_Files}2.3.2. 修改单位文件 {.title}
:::
::: para
systemd service
单位文件提供一系列对资源管理有帮助的高级配置参数。这些参数与必须在
kernel 中启用的 Linux cgroup 管控器通讯。您可以使用这些参数管理
CPU、内存使用量、block IO和更多精细单位的属性。
:::
#### [⁠]{#chap-Using_Control_Groups.html#br-Managing_CPU}管理 CPU
::: para
[*cpu*]{.emphasis} 管控器在 kernel 中被默认启动，这可使所有系统 service
的可用 CPU 量相同，而与其所包含进程数量无关。此项默认设定可以使用
`/etc/systemd/system.conf`{.filename} 配置文件中的
`DefaultControllers`{.option} 参数来修改。如需管理 CPU
的分配，请使用单位配置文件 [**\[Service\]**]{.bold .bold}
部分中的下列指令：
:::
::: variablelist
[`CPUShares`{.option}=*value*]{.term}
:   ::: para
    请用 CPU share 的数量代替 *value*。默认值为
    1024，您可以增加此数值来给单位分配更多
    CPU。此参数默认：`CPUAccounting`{.option} 已在单位文件中启用。
    :::
:::
::: para
`CPUShares`{.option} 参数可以控制 [*cpu.shares*]{.emphasis}
控制群组参数。 请参阅〈[Kernel
管控器专项介绍](#chap-Using_Control_Groups.html#itemlist2-Controller-Specific_Kernel_Documentation){.xref}〉对
`cpu`{.systemitem} 管控器的描述来查阅其它与 CPU 相关的控制参数。
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#ex-Limiting_CPU_Consumption_of_a_Unit}
**例 2.3. 限定一个单位的 CPU 可用量**
::: example-contents
::: para
若要为 Apache service 分配 1500 个 CPU share 而不是 1024 个，请修改
`/usr/lib/systemd/system/httpd.service`{.filename} 单位文件中的
`CPUShares`{.option} 设置：
:::
``` screen
[Service]
CPUShares=1500
```
::: para
要应用此项修改，请重新载入 systemd 的配置并重启 Apache 来让修改过的
service 文件生效：
:::
``` screen
~]# systemctl daemon-reload
~]# systemctl restart httpd.service
```
:::
:::
#### [⁠]{#chap-Using_Control_Groups.html#br-Managing_Memory}内存管理
::: para
为限定单位可用内存大小，请使用单位配置文件 [**\[Service\]**]{.bold
.bold} 部分中的下列指令：
:::
::: variablelist
[`MemoryLimit`{.option}=*value*]{.term}
:   ::: para
    对 cgroup 中执行的进程设定其可用内存的最大值，并用此值替代
    *value*。请以千字节（Kilobyte）、兆字节（Megabyte）、千兆字节（Gigabyte）、太字节（Terabyte）为计量单位并使用
    [*K*]{.emphasis}、[*M*]{.emphasis}、[*G*]{.emphasis}、[*T*]{.emphasis}
    后缀来表示。同样，`MemoryAccounting`{.option}
    参数必须在同一单元中启用。
    :::
:::
::: para
`MemoryLimit`{.option} 参数可以控制 [*memory.limit_in_bytes*]{.emphasis}
控制群组参数。更多信息，请参阅〈[Kernel
管控器专项介绍](#chap-Using_Control_Groups.html#itemlist2-Controller-Specific_Kernel_Documentation){.xref}〉中对
`memory`{.systemitem} 管控器的描述。
:::
::: example
[⁠]{#chap-Using_Control_Groups.html#ex-Limiting_Memory_Consumption_of_a_Unit}
**例 2.4. 限制一个单位的可用内存量**
::: example-contents
::: para
若要限定 Apache service 的最大可用内存为 1GB，请修改
`/usr/lib/systemd/system/httpd.service`{.filename} 单位文件中的
`MemoryLimit`{.option} 设定：
:::
``` screen
[Service]
MemoryLimit=1G
```
::: para
要应用此项修改，请重新载入 systemd 的配置并重启 Apache 来让修改过的
service 文件生效：
:::
``` screen
~]# systemctl daemon-reload
~]# systemctl restart httpd.service
```
:::
:::
#### [⁠]{#chap-Using_Control_Groups.html#br-Managing_Block_IO}管理 Block IO