# Utu: Saving the Internet with Hate

## The Grand Experiment
Utu is an innovative experiment at the intersection of sociology and computing, aimed at addressing online behavior through a combination of philosophical and technical solutions.

## Philosophical Foundations
### Strong Identity
- **Identity**: On the internet, anonymity can lead to a lack of accountability. Utu aims to establish strong, verifiable identities.
- **Reputation**: While anonymity prevails, users' reputations can still be built based on their actions and interactions.
- **Retribution**: The system allows for the implementation of consequences for negative behavior, aiming to create a more respectful online environment.

## Technical Solutions to Social Problems
- **Social Nature of the Internet**: Any content that goes on the internet is inherently social. Utu leverages this to create a more accountable and respectful online community.

## The Protocol
- **Data Transmission**:
  - Sends 2 bytes for the size (using `htons(size)`).
  - Sends the data structure.
  - That's itâ€”simple and efficient.

## Framing, Lexemes, and Grammar
- **Stackish**: A humorous XML-like format used for framing and structuring data.
  - **S-expressions with Netstrings in FORTH Stack Order**:
    - Example: `[ [ '4:test' 1234 child root ]`
    - Equivalent: `(root (child (1234 '4:test')))`

## Semantics
- **Determined by the Hub**:
  - One Stackish node for the header.
  - Another for the body.

## Data Encoding
- **ASCII Text**: All data is encoded in ASCII text.
- **BLOBs**: Binary Large Objects (BLOBs) can be used to store any type of data.

## Simplicity Is Key
- **Frame Size**: 2 bytes.
- **Header and Body**: Uses Stackish for both.
- **Ease of Implementation**: Designed to be straightforward and easy to implement.

## Security Precautions
- **Client Considered Hostile**: The client is assumed to be potentially malicious and is immediately booted if it violates rules.
- **Finite State Machine**: Controls the state transitions and enforces security policies.

## Cryptography
- **Cryptography Disclaimer**: I am not a cryptographer, but I have followed established standards.
- **Standards Used**:
  - AES 32-byte (256 bits)
  - ECC 32-byte (256 bits)
  - SHA256 hashes
  - 128-bit random nonces
  - ISO/IEC 11770-3 Mechanism 6 (without the Helsinki vulnerability)
  - CCM-based encryption with AAD
  - Fortuna PRNG

## Implementations
- **Server**: Available at utuprotocol.info
- **Client**: Available at ihate.rubyforge.org

## Secure Coding Practices
- **Valgrind**: All code is rigorously tested using Valgrind, except for Ruby code.
- **Statistical Quality Control**:
  - Collect information on Valgrind errors, unit test errors, and logged errors.
  - Analyze changes over time to identify trends and issues.

## Code Auditing
- **Code Review**: Repeatedly review the code to ensure consistency and adherence to established rules.
- **Assume It's Broken**: Always assume the code has vulnerabilities and work to mitigate them.

## C Coding Practices
- **String Library**: Use the Bstring library for string manipulation.
- **Function Validations**:
  - Asserts
  - Preconditions and postconditions
  - Extensive unit testing

## Secure Unix Server Practices
- **Chroot Jailing**: Always use chroot to isolate processes.
- **Resource Management**: Leave minimum resources open and maintain a minimal configuration.

## Practical Demonstration
- **Current Security Flaws**:
  - Sequential message numbering
  - Lack of versioning on packets
  - Cryptography not yet evaluated

## Feedback and Questions
- **Call for Assistance**: The project is entirely open-source under the GPLv3 license. Contributions and feedback are welcome.
- **Project Websites**:
  - savingtheinternetwithhate.com
  - ihate.rubyforge.org

By combining robust philosophical foundations with practical technical solutions, Utu aims to create a more accountable and respectful online environment.