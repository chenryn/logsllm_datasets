## 前言
本文首发i春秋：
本人博客：
渣渣一枚，萌新一个，会划水，会喊六六(hhhhh)
补一下关于`noxCTF`中的部分解题思路，毕竟自己太渣(Qrz),有些题目还是做不出来(QAQ),有什么错误的地方，希望各位大佬指点一下(thx)
### 一：Python for fun
欢迎来到`noxale`的在线`python`课程!!! 您可以在有限的时间内免费试用它并在`python
3`中学习基本编程：
该网站有三个不同的页面用于教`python 3`.页面是'修复代码'，'匹配签名到正文'，'代码返回'。我们感兴趣的是`'match signature
to body'`类，因为它允许我们设置`python 3`函数的参数并解释它。
我们来看看它是否容易受到攻击。
    def fun(a,b,c=print('7' * 7)):
        c = a + b
        return c
    print(fun(10, 12) == 22)
    7777777
    True
如您所见，它执行了我们的代码并打印了`7777777`。
让我们尝试列出工作目录下的文件
    def fun(a,b,c=print(__import__('os').listdir())):
    c = a + b
    return c
    print(fun(10, 12) == 22)
    ['db.sqlite3', 'learn_python', 'python_ctf_thing', 'Dockerfile', 'FLAG', 'manage.py', 'requirements.txt', 'templates']
    True
只需要使用一个`flag`就可以得到答案：
    def fun(a,b,c=print(open('FLAG','r').read())):
    c = a + b
    return c
    print(fun(10, 12) == 22)
    noxCTF{py7h0n_15_4w350m3}
    True
### 二：Read Between The Lines
下载文件后，感觉该文件是一个`gzip`压缩存档。
使用`linux`命令：
`$ file message.code`
`message.code：gzip`压缩数据，是“消息”
`$ mv message.code message.code.gz`
`$ gzip -d message.code`
查看文件的内容，我看到一些代码，我认为这些代码是常见的`JavaScript`代码
所以，让我们尝试在浏览器中运行代码，看看会发生什么。
出现错误，只能慢慢查找资料(QAQ)
[CTF中那些脑洞大开的编码和加密](https://www.tuicool.com/articles/2E3INnm)
在这个强大的资料库里面就可以找到解码的网址：
把需要解密的密文放入并单击“运行”按钮，就会得到答案：
### 三：Blind Date
通过检查文件的数据，xxd我们注意到字节是乱码的
在看了`JPEG`文件交换格式后，我们可以快速查看字节是如何被加扰的。
该文件应以字节开头，`FF D8 FF E0`然后是一个2字节的值，用于保存段长度。接下来是`JFIF`标识符`4A 46 49 46 00`。
我们注意到它们只占用了4个字节的块并将它们反转。
    f = open（'BlindDate.jpeg'，“rb”）
    s = f.read（）
    f.close（）
    data = '' 
    for i in range（0，len（s），4）：
    data + = s [i：i + 4 ] [:: -1 ]
    nf = open（'blind.jpeg'，'wb'）
    nf.write（data）
此脚本将还原的映像写入`blind.jpeg`。
字符串显示图像末尾有一些数据：
一个`base64`字符串`Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK`，它解码为：
    .. .. .. .. .. .. .. 
    。。。。。。。。  
    .. .. .. 。
文字是盲文翻译之后就会得到：`F4C3P4LM`。
接下来，我们使用`binwalk`提取`blind.jpeg`中的`zip`文件。
打开`zip`文件发现需要密码 而我们已经得到盲文翻译后的答案，尝试一下可不可以解密 就会得到一个`flag.txt`文件
此文件包含`brainfuck`代码并运行它打印最终标志。
`++++++++++[>+>+++>+++++++>++++++++++>>>++++++++++.+.+++++++++.+++.>------.---------.--------.-----.++++++++++++++++++++++++++.>----.---------.>++.>++++++.-----..+++.>--------.>++.>++++++.>+++++++++.
打开这个页面，我们得到一个简单的网站，只包含明文“你来自哪个 _**_ ？”。
通过HTML文档挖掘，我们发现了一个脚本标记链接 `/js/index.js`
在原始检查时，它是一个`ajax`函数，它根据对url的请求返回成功并可能标记或失败`/check_from_google`。
从挑战标题和`url`名称推断，`/check_from_google`我们必须将请求标头中的`HTTP Referer`字段设置为 `url
/check_from_google`。
启动`burp`就可以，捕获请求并添加带有`www.google.com`值的`referer`字段。
我们使用以下有效负载返回`HTTP 200 OK`
    bm94Q1RGe0cwb2dMM18xc180bFc0WXNfVXJfYjNTVF9SM2YzcjNuYzN9
使用base64即可进行解密：
    noxCTF{G0ogL3_1s_4lW4Ys_Ur_b3ST_R3f3r3nc3}
### 五：Chop Suey
题目描述：
`Today I ate in a Chinese restaurant and got myself a fortune cookie. These
things usually contain a note with a nice sentence or phrase, but mine had
numbers in it instead! Can you help me find the meaning of the numbers?`
    p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 
    q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 
    dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 
    dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 
    c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852
因此，如果您已经学习了中国剩余定理，那么您肯定会知道这种`RSA`优化技术。  
它指出：
    dp = d (mod p-1)
    dq = d (mod q-1)
使用这种方法比使用欧几里得中关于`RSA`的算法更快，如果没有`p`和`q`，你将需要计算更多，而现在只需要看一下维基百科中的关于RSA算
法使用中国剩余定理即可
[https://en.wikipedia.org/wiki/RSA_(cryptosystem)](https://en.wikipedia.org/wiki/RSA_\(cryptosystem)
"RSA")
由于他们已经为我们提供了`p`和`q`值！我们可以轻松地重新计算`qinv`
#### 构建qinv
    qinv = modinv(q, p)
    m2 = pow(c, dq, q)