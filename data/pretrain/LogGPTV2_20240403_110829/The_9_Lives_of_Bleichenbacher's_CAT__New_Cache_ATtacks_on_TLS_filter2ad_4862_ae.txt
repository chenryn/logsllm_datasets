### Possible Ranges and Parallelization
Böck et al. [12] discuss the potential for using multiple servers to parallelize the attack, but they do not provide a concrete method for doing so. Nguyen [52] proposes replacing the search in the Bleichenbacher attack with a lattice technique, which he claims is more intuitive. However, this lattice technique is not used for parallelization and is significantly less efficient than the method we present in this work.

### Limitations of Trivial Parallelization
A straightforward approach to parallelizing Bleichenbacher attacks involves concurrently sending multiple queries with different values for \( s_i \) in each phase of the attack. When one of the ciphertexts is found to conform, the attacker can reduce the range and proceed to the next step. Another method is to parallelize the multiple identical queries for error correction in both Bleichenbacher and Manger attacks, as mentioned in Section VI-B. The primary drawback of these approaches is that both Bleichenbacher and Manger attacks require at least \( \log_2 N \) sequential queries.

### Our Approach
In this paper, we introduce a new approach that reduces the number of sequential queries required. Essentially, we perform multiple padding oracle attacks in parallel, each starting from a different initial blinding value. We conduct some range reduction for each of the parallel attacks but stop short of completing any of them. We then use a lattice technique to combine the information learned from each attack and recover the key.

### A. Parallelization of the Manger Attack
Recall the Manger attack from Section II-D. After completing Phase 1, at each step, we know that \( m \cdot s \mod N \) is within the interval \([a, b]\), where \( m \) is the unknown plaintext, \( s \) is the known blinding value, and \( N \) is the RSA modulus. The goal is to decrease the size of the interval \([a, b]\), achieved in each adaptive attack step. When \( a = b \), we know that \( a = m \cdot s \mod N \), and can recover the original plaintext by calculating \( m = a \cdot s^{-1} \mod N \). If the attacker can approximately halve the size of the interval in each step, it is possible to complete the entire attack with \( \approx \log_2 N \) adaptive queries.

#### The Parallel Case
Consider a scenario where we run \( k \) Manger attacks in parallel, but only have time for \( i \) adaptive steps for each attack. After \( i \) steps, the interval for the \( j \)-th attack is \([a_{i,j}, b_{i,j}]\). This reduces the search space for \( m \) to the interval \([a_{i,j}, b_{i,j}]\), which roughly represents learning \( I_i = \log_2 (b_{i,j} - a_{i,j}) \) bits of information about \( m \). If after \( i \) adaptive queries, \( I_i > \log_2 N \), we can recover the value of \( m \).

At this stage, we have a set of equations of the form:
\[ m \cdot s_j - a_{i,j} \mod N < 2^{\log_2 (b_{i,j} - a_{i,j})} \]

#### Lattice Construction
This set of equations is similar to the hidden number problem [13]. Similar to past solutions [9, 13, 15, 29, 34, 53], we use a lattice technique to solve our equations. Specifically, we form the lattice \( M_i \):

\[
M_i =
\begin{pmatrix}
s_0 & s_1 & s_2 & \cdots & s_k \\
N & 0 & 0 & \cdots & 0 \\
0 & N & 0 & \cdots & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
0 & 0 & 0 & \cdots & N \\
a_{i,0} & a_{i,1} & a_{i,2} & \cdots & a_{i,k} \\
\end{pmatrix}
\]

From Equation 1, the vector \( R_i = (r_{i,1}, r_{i,2}, \ldots, r_{i,k}, -N \cdot (k-1)/k) \) is in the lattice, and assuming \( r_{i,j} < N \cdot (k-1)/k \), \( R_i \) is a short vector in the lattice \( M_i \). We can now use the LLL algorithm [45] to find a reduced basis for the lattice, and with high probability, \( R_i \) is the second vector in the reduced basis. Finally, we find \( m \) by calculating \( m = (r_{i,1} + a_{i,1}) \cdot s_1^{-1} \mod N \).

### Analyzing the Parallel Attack
We analyze the trade-off between the number of adaptive queries and the number of parallel oracles. In the Manger attack, the blinding phase requires on average 128 parallel queries and gives us 8 bits of information on the plaintext. The next two phases (steps 1 and 2 in the original paper) usually require 40–100 adaptive queries and give us 8–12 extra bits of information. After that, each adaptive query gives us approximately one bit of information. For an RSA modulus of 2048 bits, the original Manger attack without blinding requires \( \approx 2^{100} \) adaptive queries and just one oracle (which requires negligible computation). On the other extreme, a fully parallelized attack using only the blinding phase would require approximately \( 128 \times 256 = 32768 \) parallel queries, resulting in 256 equations giving us 8 bits each. Recovering the plaintext would require reducing a relatively large lattice of dimension \( \approx 256 \), which requires considerable computation. A more efficient trade-off is to run a moderate number of partial adaptive attacks in parallel.

### Parallel Manger Attack Simulation
We conducted a simulation to test the feasibility of performing a MitM attack on a TLS connection with a 2048-bit RSA using multiple parallel partial Manger attacks. Assuming we have 30 seconds before the TLS connection times out and each TLS handshake takes about 0.05 seconds (measured on a Core i7-7500U CPU @ 2.70GHz), we allow each of the parallel attacks to have 560 adaptive oracle queries, leaving two seconds for lattice reduction and finalizing the handshake. We simulate a parallel attack using five servers (the minimum number of servers required to fit at least 2048 queries in 30 seconds is four, but due to overheads, at least five servers are needed).

We start by running the blinding phase in parallel until we get five valid blinding values. We then use our remaining queries to continue the five attacks in parallel. As before, we perform 500,000 simulations of the attack, each simulation running five attacks in parallel. With a probability of 0.001, we get at least 438 bits of information from each of the five attacks, or a total of more than 2190 bits. This is more than the required number of bits to recover the plaintext. We successfully implemented and tested a proof of concept of the lattice reduction and were able to perform the plaintext recovery using the LLL algorithm in Sage [63] with a negligible runtime of less than 0.01 seconds (running on an Intel Core i7-4790 CPU @ 3.6GHz).

### B. Parallelization of the Bleichenbacher Attack
The Bleichenbacher attack can also be parallelized in the same way as we have shown for the Manger attack. We assume \( k \) parallel attacks. For each attack, we start with a different blinding value, such that for attack number \( j \), we know that \( 2B < s_{0,j} < 3B - 1 \). After \( i \) adaptive queries, we learn that \( a_i < s_{i,j} < b_i \). Using this information, we can recover the plaintext as we have done for the Manger attack.

### Recommendations for Mitigation
Implementing a completely secure and side-channel-free PKCS #1 v1.5-based RSA key exchange for TLS is challenging. We propose several approaches to reduce implementations' vulnerability to our attacks:

1. **Deprecation of RSA Key Exchange**: The safest countermeasure is to deprecate the RSA key exchange and switch to (Elliptic Curve) Diffie-Hellman key exchanges. This might be difficult due to backward compatibility issues.
2. **Certificate Separation**: If RSA key exchange support is required, it should be done with a dedicated public key that does not allow signing. To prevent downgrade attacks, support for multiple TLS versions should not reuse keys across versions. If multiple TLS servers are used, each server should use a different public key if possible to prevent parallelized attacks.
3. **Constant-Time Code and Safe API**: The decryption code should be constant-time, with no branching or memory accesses depending on the plaintext (e.g., as achieved in BoringSSL and BearSSL code). Passing the expected plaintext size to the decryption function is safer because it facilitates constant-time implementations. Side-channel leakage from code that uses the expected plaintext size results in weaker padding oracles that greatly increase the amount of time required for an attack.
4. **Using Large RSA Keys**: The minimal threshold for decryption using Bleichenbacher and Manger type attacks is higher for larger keys, making the attack less practical.

### Acknowledgments
We would like to thank Orr Dunkelman for his insights on the parallelization of the attack using LLL; Kenny Paterson for the insightful comments on the paper and the Bleichenbacher attack; and the anonymous reviewers for their helpful and constructive comments. This research was supported in part by Intel Corporation and the Robert Bosch foundation.