要安装示例应用，您需要从 GitHub 分叉*应用(我们将很快讨论这意味着什么)，这需要您有一个活动的 GitHub 帐户。如果你已经有了 GitHub 账号，可以跳过这一步，但是如果你没有账号，可以在[https://github.com](https://github.com)注册一个免费账号:*
 *![](img/1101fbe8-9871-4951-b093-dd03f0c849b0.png)
Signing up for GitHub
一旦您有了一个活跃的 GitHub 帐户，您就可以访问位于[https://github.com/docker-in-aws/todobackend](https://github.com/docker-in-aws/todobackend)的示例应用存储库。与其克隆存储库，更好的方法是*分叉存储库*，这意味着将在您自己的 GitHub 帐户中创建一个新的存储库，该帐户链接到原始的`todobackend`存储库(因此术语*分叉*)。分叉是开源社区中的一种流行模式，它允许您对分叉的存储库进行自己独立的更改。这对本书特别有用，因为您将对`todobackend`存储库进行自己的更改，添加本地 Docker 工作流以构建、测试和发布作为 Docker 映像的示例应用，并在阅读本书的过程中进行其他更改。
要分叉存储库，请单击右上角的分叉按钮:
![](img/c65f46fc-103c-4f1b-85dd-f0f4b55ad381.png)
Forking the todobackend repository
点击分叉按钮几秒钟后，应该会创建一个名为`/todobackend`的新存储库。此时，您现在可以通过单击克隆或下载按钮来克隆存储库的分叉。如果您刚刚设置了一个新帐户，请选择“使用 HTTPS 克隆”选项，并复制显示的网址:
![](img/3038ca0d-2f98-4193-88d2-522a8ec14a5c.png)
Getting the Git URL for the todobackend repository
打开一个新的终端，运行`git clone `命令，其中``是你在前面例子中复制的网址，然后进入新创建的`todobackend`文件夹:
```
> git clone https://github.com//todobackend.git
Cloning into 'todobackend'...
remote: Counting objects: 231, done.
remote: Total 231 (delta 0), reused 0 (delta 0), pack-reused 231
Receiving objects: 100% (231/231), 31.75 KiB | 184.00 KiB/s, done.
Resolving deltas: 100% (89/89), done.
> cd todobackend todobackend> 
```
在您完成本章的过程中，我鼓励您提交您经常进行的任何更改，以及清楚地标识您所做更改的描述性消息。
The sample repository includes a branch called `final`, which represents the final state of the repository after completing all chapters in this took.  You can use this as a reference point if you run into any issues by running the command `git checkout final`.  You can switch back to the master branch by running `git checkout master`.
如果您不熟悉 Git，您可以参考许多在线教程中的任何一个(例如，[https://www.atlassian.com/git/tutorials](https://www.atlassian.com/git/tutorials))，但是一般来说，在提交变更时，您需要执行以下命令:
```
> git pull
Already up to date.
> git diff
diff --git a/Dockerfile b/Dockerfile
index e56b47f..4a73ce3 100644
--- a/Dockerfile
+++ b/Dockerfile
-COPY --from=build /build /build
-COPY --from=build /app /app
-WORKDIR /app
+# Create app user
+RUN addgroup -g 1000 app && \
+ adduser -u 1000 -G app -D app
+# Copy and install application source and pre-built dependencies
> git status
On branch master
Your branch is up to date with 'origin/master'.
Changes not staged for commit:
  (use "git add ..." to update what will be committed)
  (use "git checkout -- ..." to discard changes in working directory)
  modified: src/todobackend/settings.py
  modified: src/todobackend/wsgi.py
Untracked files:
  (use "git add ..." to include in what will be committed)
  docker-compose.yml
  src/acceptance.bats
> git add -A > git commit -a -m "Some commit message"
> git push -u origin master
> git push
```
您应该经常通过运行`git pull`命令来检查您是否拥有最新版本的存储库，因为这可以避免混乱的自动合并和推送失败，尤其是当您与其他可能在您的项目上合作的人一起工作时。接下来，您可以使用`git diff`命令在内容级别显示您对现有文件所做的任何更改，而`git status`命令在文件级别显示对现有文件的更改，并标识您可能添加到存储库中的任何新文件。`git add -A`命令将所有新文件添加到存储库中，`git commit -a -m ""`命令用指定的消息提交所有更改(包括您用`git add -A`添加的任何文件)。最后，您可以使用`git push`命令推送您的更改–第一次推送时，您必须使用`git push -u origin `命令指定原点的远程分支–之后您可以使用较短的`git push`变体推送您的更改。
A common mistake is to forget to add new files to your Git repository, which may not be apparent until you clone the repository to a different machine.  Always ensure that you run the `git status` command to identify any new files that are not currently being tracked before committing your changes.
# 在本地运行示例应用
既然已经在本地下载了示例应用的源代码，现在就可以在本地构建和运行该应用了。当您将应用打包到 Docker 映像中时，您需要详细了解如何构建和运行应用，因此在本地运行应用是能够为应用构建容器的第一步。
# 安装应用依赖项
要运行应用，您需要首先安装应用所需的所有依赖项。示例应用在`src`文件夹中包含一个名为`requirements.txt`的文件，其中列出了运行应用必须安装的所有必需 Python 包:
```
Django==2.0
django-cors-headers==2.1.0
djangorestframework==3.7.3
mysql-connector-python==8.0.11
pytz==2017.3
uwsgi==2.0.17
```
要安装这些需求，请确保您已经更改到`src`文件夹，并配置画中画包管理器使用`-r`标志读取需求文件。请注意，日常开发的最佳实践是在虚拟环境中安装您的应用依赖项(参见[https://packaging . python . org/guides/installing-use-pip-and-virtualenv/](https://packaging.python.org/guides/installing-using-pip-and-virtualenv/))但是，鉴于我们安装应用主要是为了演示，因此我不会在此采用这种方法:
```
todobackend> cd src
src> pip3 install -r requirements.txt --user
Collecting Django==2.0 (from -r requirements.txt (line 1))
...
...
Successfully installed Django-2.0 django-cors-headers-2.1.0 djangorestframework-3.7.3 mysql-connector-python-8.0.11 pytz-2017.3 uwsgi-2.0.17
```
Over time, the specific versions of each dependency may change to ensure that the sample application continues to work as expected.
# 运行数据库迁移
安装应用依赖项后，您可以运行`python3 manage.py`命令来执行各种 Django 管理功能，例如运行测试、生成静态 web 内容、运行数据库迁移以及运行 web 应用的本地实例。
在本地开发环境中，您首先需要运行数据库迁移，这意味着您的本地数据库将按照应用的配置使用适当的数据库模式进行初始化。默认情况下，Django 使用 Python 附带的轻量级 *SQLite* 数据库，该数据库适用于开发目的，无需设置即可启动和运行。因此，您只需运行`python3 manage.py migrate`命令，该命令将自动为您运行应用中配置的所有数据库迁移:
```
src> python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, todo
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
  Applying todo.0001_initial... OK
```
当您运行 Django 迁移时，Django 将自动检测现有模式是否存在，如果不存在，则创建一个新模式(在前面的示例中就是这种情况)。如果您再次运行迁移，请注意 Django 检测到一个最新的模式已经存在，因此没有应用任何东西:
```
src> python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, todo
Running migrations:
  No migrations to apply.
```
# 运行本地开发 web 服务器
现在本地 SQLite 数据库已经就绪，您可以通过执行`python3 manage.py runserver`命令来运行您的应用，该命令在端口 8000 上启动本地开发 web 服务器:
```
src> python3 manage.py runserver
Performing system checks...
System check identified no issues (0 silenced).
July 02, 2018 - 07:23:49
Django version 2.0, using settings 'todobackend.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
```
如果打开浏览器到`http://localhost:8000/`，应该会看到一个标题为 **Django REST 框架**的网页:
![](img/a8d47b6d-4d23-462e-88ec-f9291951296a.png)
The todobackend application