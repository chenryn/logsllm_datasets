# HoleyBeep：原理解析及利用方法
|
##### 译文声明
本文是翻译文章，文章原作者 PIRHACK，文章来源：PIRHACK'S BLOG
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在很久以前，人们经常使用`a`字符让扬声器发出非常刺耳的蜂鸣声（beep）。
这有点烦人，特别是当我们想精心设计8bit之类的音乐时更讨厌出现这种情况。这也是为什么[Johnathan
Nightingale](https://github.com/johnath/)会去研发`beep`这款软件，这款软件非常短小精悍，我们可以根据自己的需求来微调电脑的蜂鸣声。
随着X server的到来，事情逐渐变得复杂起来。
为了让`beep`正常工作，用户必须是超级用户（superuser）或者是当前tty的所有者。也就是说，对于root用户或者本地用户，`beep`都能正常工作，但如果是非root的远程用户则不行。此外，连接到X
server的任何终端（比如xterm）都会被系统认为是远程身份，因此`beep`无法正常工作。
当然还是有办法的，比如大多数人（或者发行版）会设置`SUID`位来解决这个问题。`SUID`位是比较特殊的一个位，如果二进制程序设置了这个位，那么运行该程序时就能拥有程序所有者的权限（这里为root），而不是普通用户的权限（我们自己）。
现在这个特殊位的应用场景非常广泛，主要是为了方便起见。以`poweroff`为例，该程序需要root权限才能工作（只有root用户才能关闭计算机），但对个人计算机来说不是特别方便。如果你是公司的系统管理员，每个用户都需要请你来关闭他们的计算机，这是非常烦人的一件事情。另一方面，如果许多用户共享一台服务器，某个可疑用户具备关闭整个系统的能力也是非常严重的一个安全问题。
当然，所有`SUID`程序都是潜在的安全漏洞。如果将其应用在bash上，那么任何人都能拿到免费的root权限shell，这也是整个社区为什么会花大力气审查这类程序的原因所在。
所以，人们可能会认为像`beep`这样只有375行代码并且经过一群人审查过的程序应该足够安全，即使设置了`SUID`位也可以安装，对吧？
然而事实并非如此！
## 二、理解代码
让我们来看一下`beep`的源码，下载链接参考[此处](https://github.com/johnath/beep/blob/master/beep.c)。
程序在主函数中设置了一些signal（信号）处理函数，然后解析参数，对于每次beep请求都会调用`play_beep()`函数。
    int main(int argc, char **argv) {
      /* ... */
      signal(SIGINT, handle_signal);
      signal(SIGTERM, handle_signal);
      parse_command_line(argc, argv, parms);
      while(parms) {
        beep_parms_t *next = parms->next;
        if(parms->stdin_beep) {
          /* ... */
        } else {
          play_beep(*parms);
        }
        /* Junk each parms struct after playing it */
        free(parms);
        parms = next;
      }
      if(console_device)
        free(console_device);
      return EXIT_SUCCESS;
    }
另一方面，`play_beep()`会打开目标设备，查找设备类型，然后在循环里面调用`do_beep()`函数。
    void play_beep(beep_parms_t parms) {
      /* ... */
      /* try to snag the console */
      if(console_device)
        console_fd = open(console_device, O_WRONLY);
      else
        if((console_fd = open("/dev/tty0", O_WRONLY)) == -1)
          console_fd = open("/dev/vc/0", O_WRONLY);
      if(console_fd == -1) {
        /* ... */
      }
      if (ioctl(console_fd, EVIOCGSND(0)) != -1)
        console_type = BEEP_TYPE_EVDEV;
      else
        console_type = BEEP_TYPE_CONSOLE;
      /* Beep */
      for (i = 0; i = 0) {
          /* Kill the sound, quit gracefully */
          do_beep(0);
          close(console_fd);
          exit(signum);
        } else {
          /* Just quit gracefully */
          exit(signum);
        }
      }
    }
那么，了解这些背景后我们掌握了什么信息呢？
首先吸引我眼球的是，如果`SIGINT`以及`SIGTERM`信号同一时间发送，那么有可能存在多次`free()`的风险。但这种方法除了能导致程序崩溃以外，我找不到更好的方法来利用这一点，因为随后我们再也不会去使用`console_device`。
那么我们最想得到什么效果呢？
比如`do_beep()`中的`write()`看起来是不是非常诱人，如果可以利用它来写入任意文件将是非常酷的一件事情！
然而这种写操作受`console_type`保护，这个值必须为`BEEP_TYPE_EVDEV`。
`console_type`的值在`play_beep()`中设置，具体取决于`ioctl()`的返回值，必须满足`ioctl()`的条件才能设置为`BEEP_TYPE_EVDEV`。
道理就是这样，我们无法让`ioctl()`说谎帮我们发出蜂鸣声。如果文件不是一个设备文件，`ioctl()`就会失败，`device_type`也无法设置为`BEEP_TYPE_EVDEV`，`do_beep()`就不能调用`write()`（它会使用`ioctl()`，而据我所知，在上下文环境中这是一种人畜无害的行为）。
但我们别忘了还有一个signal处理函数，并且信号可以随时随地发生！这种情况非常适合构造竞争条件（race conditions）。
## 三、竞争条件
signal处理函数会调用`do_beep()`。如果我们恰好拥有合适的`console_fd`以及`console_type`值，那么就能具备目标文件的写入能力。
由于signal在任何时候都可以被调用，因此我们需要找到确切的位置，让这些变量不能得到应有的正确值。
还记得`play_beep()`函数吗？代码如下：
    void play_beep(beep_parms_t parms) {
      /* ... */
      /* try to snag the console */
      if(console_device)
        console_fd = open(console_device, O_WRONLY);
      else
        if((console_fd = open("/dev/tty0", O_WRONLY)) == -1)
          console_fd = open("/dev/vc/0", O_WRONLY);
      if(console_fd == -1) {
        /* ... */
      }
      if (ioctl(console_fd, EVIOCGSND(0)) != -1)
        console_type = BEEP_TYPE_EVDEV;
      else
        console_type = BEEP_TYPE_CONSOLE;
      /* Beep */
      for (i = 0; i  /tmp/x 
    $ ./exploit.py /etc/bash/bashrc # Or any shell script
    Backup made at '/etc/bash/bashrc.bak'
    Done!
    $ su
    PWND root
我们也可以使用cron计划任务，这种方法看起来更好，并且不需要root用户登录，但由于时间原因我并没有采用这种方法。
## 五、总结
这是我第一次利用0day漏洞。
刚开始时，想发现并理解这个漏洞对我来说有点困难。我需要反复查看补丁，直到理解其具体含义。
我发现signal的处理比我想象中的要复杂得多，尤其是我们应当避免使用不可重入（re-entrant）函数，禁用C库中的大部分函数。
希望本文对大家有所帮助，欢迎大家关注我的[推特](https://twitter.com/pirhack/)。