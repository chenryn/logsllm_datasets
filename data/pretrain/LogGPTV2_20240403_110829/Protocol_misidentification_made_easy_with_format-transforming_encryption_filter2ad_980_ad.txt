auto-http-downstream
auto-smb-downstream
auto-ssh-downstream
70
104
11
38
130
9
13,815
222
237
0.52
0.55
0.55
0.43
0.53
0.42
1.6
0.82
0.52
avg.
rank
(ms)
0.48
0.54
0.52
0.43
0.5
0.42
1.5
0.79
0.49
Figure 5: Average rank and unrank performance for
our downstream FTE formats.
sults of our evaluation, and illustrates that the generated
regexes achieved perfect misclassiﬁcation rates except for
the nProbe SSH classiﬁer, which had a misclassiﬁcation rate
of zero. The nProbe SSH classiﬁer requires that the ﬁrst mes-
sage in each direction be an appropriately formatted banner
message with an arbitrary length limitation of 100 bytes.
Since our regex generation method is limited to only us-
ing what it observes (in this case a single client banner and
less than ﬁve server banners), the generated regex would
have only two bits of capacity. To enhance the capacity, we
artiﬁcially generated RFC-compliant banner messages with
the optional comment ﬁeld used to carry random bytes up
to the speciﬁed maximum length of 255 bytes, which pro-
vided suﬃcient capacity and the ability to evade all classi-
ﬁers but nProbe. This highlights a natural limitation of the
simple generation process, though avenues for improvement
are possible through more advanced generalization proce-
dures or the use of multiple FTE formats within a single
connection (e.g., zero-capacity banner messages followed by
high-capacity key exchange messages).
5. PERFORMANCE
Our FTE prototype was developed in C/C++ and Python.
Performance-critical algorithms such as rank, unrank, and
BuildTable are implemented in C/C++. We use a customized
version of the re2 library for regular expression to DFA
conversion, and OpenFST for DFA minimization. Crypto-
graphic algorithms are implemented using PyCrypto. Mul-
tiple precision arithmetic is performed using GMP. Logic
for the record layer and networking is multi-threaded and
implemented in Python.
For performance benchmarks our client machine was an
AMD Opteron 8220 SE @ 2.80GHz running CentOS 6.4 and
server was an Intel Core i5-2400 @ 3.4GHz running Ubuntu
12.04. Each machine was connected to the Internet at an
academic institution.
Rank/Unrank. Recall that for FTE we must perform
unranking starting from regexes, which can require expo-
nential time in the worst case (see Section 3.1). In practice,
however, the regexes we require for misidentiﬁcation attacks
admit fast (un)ranking.
In Figure 5, we present the DFA
size and average time to perform ranking and unranking
for our intersection, manual, and automated formats over
100k trials using random integers as input. We present per-
formance results for downstream formats only. In all cases
the upstream formats perform better than their downstream
counterpart in (un)ranking benchmarks and have smaller
DFA state-spaces. The FTE format parameters used in
these benchmarks are described in Section 3.2. The DPI-
extracted intersection formats and manual formats resulted
in very compact DFAs, with no more than 130 states. We
note that the automatically generated regexes resulted in
the largest DFAs, but were still very fast even for >10, 000
state DFAs. This all evidences that the worst-case blow-up
in state sizes when converting from an NFA to DFA does
not greatly impede performance.
Web-browsing performance. We setup our FTE record
layer to proxy HTTP(S) traﬃc as described in Section 4. As
a baseline for comparison, we use a conventional encrypted
tunnel. Using OpenSSH’s integrated functionality we estab-
lished a SOCKS proxy which listened client-side, such that
all connections were routed through the SSH connection to
the remote server, and then ultimately on to the destination
IP address. We call this our socks-over-ssh conﬁguration.
We download the Alexa Top 50 websites ﬁve times each
using the socks-over-ssh setup. We do the same with the
FTE proxy for each of the intersection, manual, and auto-
matically generated regexes. Each of the four separate runs
(inclusive of socks-over-ssh) therefore resulted in 250 data
points. In our socks-over-ssh conﬁguration, websites in the
Alexa Top 50 took an average of 5.5 seconds to render the
webpage and all dependencies, and required an average of
1,164KB of data transfer including all TCP/IP overhead.
In Figure 6, we show the cumulative distribution of the la-
tency and bandwidth data points for the four diﬀerent runs.
The lowest average download time of the FTE formats was
the intersection-ssh format, which incurred no increase (5.5s
avg.) in latency compared to socks-over-ssh, and 1,348KB
(16%) increase in data transfer overhead. The highest aver-
age download time of all the formats was the automatic-http
format, with an average page-render time of 7.1s (29%) and
an average of 3,279KB (181%) transferred per website. The
increase in data transferred is due to (1) ciphertext expan-
sion and (2) Firefox generating persistent TCP connections
that cause FTE/SOCKS negotiation, but do not result in
data transfer. These latter empty connections do not use
much bandwidth in the socks-over-ssh case.
In our testing we note that engineering issues often over-
shadow the overheads of FTE. For example, the socks-over-
ssh system performed better on sites with low bandwidth
requirements and a small number of TCP connections, while
our FTE prototype actually performs better than socks-over-
ssh for websites that use a large number of TCP connec-
tions. This is because our FTE implementation uses multi-
threading more aggressively than OpenSSH, and this is bet-
ter aligned with the Firefox’s use of multiple TCP connec-
tions in parallel.
Goodput. As a goodput baseline, we performed a direct
copy of a 100MB ﬁle with SCP from our server to our client
and achieved 58Mbps on average over 100 trials. Average
round-trip latency between the client and server was 70ms.
When using SCP with the FTE record layer, our best per-
forming format was intersection-ssh and it achieved 42Mbps.
All other FTE formats with m > 0 exhibited similar perfor-
mance. For our worst performing format, automated-http,
we achieved 1.9Mbps and other formats with m = 0 had
similar goodput. The slower performance for the latter for-
mats stems from their not allowing raw AE ciphertext bytes
Figure 6: Distribution of webpage (Alexa top ﬁfty) download times (top row) and data transferred (bottom
row) for our intersection, manually-generated and automatically-generated FTE formats, compared to using
our socks-over-ssh conﬁguration.
to follow unrank output.
In our goodput tests, the FTE implementation was never
CPU bound. Hence, the performance of our (un)ranking
algorithms was not the bottleneck. Proﬁling of our FTE
prototype indicates that future performance gains could be
had by optimizing the buﬀer management and networking
logic.
Memory utilization. To determine the memory utiliza-
tion of our FTE prototype, we ﬁrst measured the mem-
ory requirements of the BuildTable algorithm, which is the
largest consumer of memory in our prototype. For all for-
mats, except auto-http, the BuildTable algorithm required at
most 2 MB of memory. The auto-http upstream format re-
quires 15 MB and the auto-http downstream format requires
184 MB. As expected, memory utilization increases linearly
with respect to DFA state space.
As an additional test we proﬁled the maximum heap us-
age, inclusive of the Python interpreter and all dependent
libraries, when browsing the web with our FTE prototype.
For all formats, except auto-http, peak heap usage never
exceed 13 MB, while auto-http used roughly 383 MB at its
peak. We can attribute this nearly two-fold increase in mem-
ory usage, compared to its BuildTable requirement, to an in-
eﬃcient copy of BuildTable’s output — this will be resolved
in the next release of our prototype.
6. CENSORSHIP CIRCUMVENTION
In the previous sections, we focused on using FTE to eval-
uate the eﬃcacy of modern enterprise-grade DPI. We showed
that not only can our FTE record layer easily force DPI mis-
classiﬁcation, but it can do so while incurring negligible per-
formance impact. This suggests that FTE can be a useful
tool for settings where one wants to circumvent DPI-enabled
censorship. Here, we experimentally investigate integrating
our FTE record layer into the Tor anonymity network as a
as a pluggable transport [2].
Integration. A pluggable transport is a record-layer mech-
anism that processes Tor messages before being transmitted
on the wire. The only currently deployed transport is obf-
sproxy [42], which applies a stream cipher to every bit out-
put by Tor using a shared key. Originally, this shared key
was a hard-coded, but a newer version (not yet deployed) re-
places this with an in-band, anonymous Diﬃe-Hellman key
exchange [43]. The result of this latter approach is a cryp-
tographic guarantee that all the bitstrings seen by a (pas-
sive) DPI are indistinguishable from random strings, so that
the obfuscated Tor messages will not have ﬁxed ﬁngerprints.
This does not, however, force protocol misclassiﬁcation, and
therefore would fail to bypass DPI that use a whitelist of
allowed protocols.
We can do better using our FTE record layer as the plug-
gable transport. Integrating it into Tor with a hard-coded
key is immediate, and it is straightforward to add key ex-
change to our record layer. Speciﬁcally, one could just initi-
ate sessions using the existing obfs3 [43] Diﬃe-Hellman key
exchange, but running the key-exchange messages through
our unranking mechanisms before being sent on the wire,
since the messages in this exchange are indistinguishable
from uniformly random bit strings, they behave like the AE
ciphertext bits in our record layer. Together with our ex-
isting library of regex formats, we arrive at a version of Tor
that can easily force misclassiﬁcation for the DPI systems
currently used in practice. Indeed we veriﬁed that misclassi-
ﬁcation rates for all the six systems in our corpus are as seen
in Section 4, but now using Tor with FTE as the pluggable
transport. We believe that FTE is an attractive pluggable
transport option for several reasons:
• Flexibility: The FTE record layer already supports a
variety of target protocols, and adding new ones re-
quires only specifying new regexes. Extending prior
steganographic systems to support many targets (see
Section 7), on the other hand, would be very labor in-
tensive.
• Suﬃciency: The FTE record layer forces misclassiﬁ-
cation by all evaluated DPIs, even DPI-X whose pro-
024681012Download Time (seconds)0.00.20.40.60.81.0cdfTarget Protocol: HTTP024681012Download Time (seconds)0.00.20.40.60.81.0Target Protocol: SMB024681012Download Time (seconds)0.00.20.40.60.81.0Target Protocol: SSH0     1000 2000 3000 4000 5000 Data Transferred (KB)0.00.20.40.60.81.0cdfTarget Protocol: HTTPTarget Protocol: SMB00     1000 2000 3000 4000 5000 Data Transferred (KB)0.00.20.40.60.81.0Target Protocol: SSHsocks-over-ssh intersection manualauto00     1000 2000 3000 4000 5000 Data Transferred (KB)0.00.20.40.60.81.0prietary classiﬁcation strategy is unknown to us and is
similar to systems used in censorship settings [36].
• Speed : The FTE record layer has essentially negligible
overhead and, when used with Tor, its overhead is lost
in the noise of the Tor network’s performance variabil-
ity.
FTE through the GFC. We set up an FTE client on
a Virtual Private Server (VPS) located within China and
an FTE server in the United States. The server was con-
ﬁgured to accept incoming connections on port 80. To set
a censorship baseline, we ﬁrst attempted to browse several
websites that are known to be censored, including YouTube
and Facebook, without using FTE to tunnel the traﬃc, and
found that these sites were blocked. We then attempted to
browse the same websites through the FTE tunnel, using
our intersection, manual, and automatic HTTP formats. In
every case, the FTE tunneled traﬃc successfully traversed
the GFC, and we were able to browse the censored websites.
Next, we considered using FTE to tunnel Tor traﬃc. Again,
to set a baseline, we attempted to connect to a private Tor
bridge listening on port 443 of our server, using the default
Tor distribution. We observed behavior consistent with the
recent analysis of the Great Firewall of China (GFC) by
Winter et al. [49]:
initial Tor connections to our private
bridge were successful, and they were followed by an active
probe from a Chinese IP address after roughly 15 minutes.
The probe performed a handshake with the bridge, then
blacklisted the (IP,port)-combination used by the bridge.
We validated the blacklisting by observing that subsequent
attempts to connect to our Tor bridge (IP,port)-combinations
resulted in a successful SYN packet from the VPS to our
bridge, followed by spoofed TCP RSTs transmitted to the
client and bridge to terminate the TCP connection.
Having established that Tor was indeed being censored,
we then attempted the same tasks through our FTE tunnel,
again using each of our intersection, manual, and automatic
HTTP formats. Despite port 443 being blacklisted from our
previous Tor tests, using FTE on port 80 was successful, and
we were able to circumvent the GFC with this FTE-tunneled
Tor circuit. After these initial tests we established a persis-
tent FTE tunnel between our FTE client and server. Every
ﬁve minutes we selected a censored URL and downloaded
it through our FTE-powered tunnel. This tunnel remained
active for one month, and successfully subverted the GFC
until the termination of our VPS account.
On detecting FTE. Censors have been aggressive at rolling
out new DPI-based mechanisms for detecting and blocking
circumvention tools. How will FTE fare in this kind of arms
race? The ﬁrst idea would be for DPI systems to obtain the
FTE regex formats and then use them to mark any traﬃc
exactly matching the regex as FTE. For most of the regexes
we consider, this would lead to prohibitively high false posi-
tive rates (e.g., 100% of HTTP traﬃc). The one exception is
the automatically generated regexes, which may not match
against other traﬃc, because of (for example) time stamps
or unique hash values that were learned from collected traﬃc
traces.
A second approach might be for DPI to perform more non-
regular checks, such as verifying correctness of length ﬁelds
for protocols that include them, e.g., the Content-Length
ﬁeld of HTTP responses. Note that actually this exam-
ple would not work for DPI in practice, as one-third of the
response messages generated when downloading the Alexa
Top 50 did not include a valid Content-Length ﬁeld despite
it being strongly recommended in the HTTP RFC. Else-
where this kind of check can be addressed by, for example,
developing formats that encode a large number of lengths
that are frequently observed in legitimate traﬃc, and for
each length ensuring appropriate length of ciphertexts. In
theory, one could also use FTE for more powerful language
classes (i.e., an algorithm for ranking unambiguous CFGs
appears in [17]).
More generally, DPI is faced with ﬁnding checks for pro-
tocol semantics or formatting with ﬁdelity beyond what is
captured by the FTE record layer. Since the latter takes a
minimalist approach, there are innumerable ways in which
FTE communications diﬀer from real target protocol runs.
The recent work of Houmansadr et al. [19], for example,
shows how to exploit discrepancies in other circumvention
systems that do much more than FTE in terms of attempt-
ing to mimic a target protocol [30, 45, 46]. However, ﬁnding
such discrepancies is easy, and the hard open question (not
addressed in [19]) is how to make such checks eﬀective—fast,
scalable, and with negligible errors—in the messy deploy-
ment environments faced by DPI and for all of the essentially
arbitrary target protocols FTE supports.
The GFC, as discussed above, also engages in active prob-
ing. For example, attempting to connect to destination sys-
tems suspected of undesirable behavior. Determining how to
resist such active attacks in practice is an ongoing research
topic (c.f., [39]). Use of FTE, however, can hope to force ac-
tive probing for all legitimate connections using the target
protocol, vastly increasing the complexity of such censorship
techniques.
7. RELATED WORK
Steganography/censorship circumvention. Stegano-
graphic systems seek to hide the existence of messages from
all observers by way of embedding the message in real cover
traﬃc such as TCP/IP connections [32], HTTP [15], email
[45], VoIP [21], or social media [9, 25]. FTE does not embed
data in real cover traﬃc, but instead ensures that cipher-
texts are formatted to include the telltale protocol ﬁnger-
prints that DPI systems look for.