Recently, @ScottPJones mentioned the use of uppercase and lowercase conversion functions. Upon reviewing our current implementation, I noticed that we are using `towupper` and `towlower`, which are C99 functions designed to work with `wchar_t` arguments. However, these functions have several limitations:

1. **Platform Incompatibility**: On Windows, where `wchar_t` is 16 bits, these functions will fail for any character outside the Basic Multilingual Plane (BMP).
2. **Inconsistent Results**: Even on platforms with a 32-bit `wchar_t`, the results can vary between different systems due to differences in Unicode table versions.
3. **Outdated Unicode Tables**: Many systems may have outdated Unicode tables, leading to incorrect conversions.
4. **Locale Dependence**: The functions are locale-dependent, which may not be desirable for our use case.

To address these issues, I propose leveraging the up-to-date upper/lower/titlecase mapping data available in utf8proc's "database" (generated from http://www.unicode.org/Public/UNIDATA/UnicodeData.txt). We could add new functions such as `utf8proc_toupper` to utf8proc, making this data accessible. This approach would ensure consistent and accurate conversions across all platforms and characters.

Additionally, we could include a check for the common case of ASCII codepoints to optimize performance. This way, we can handle both ASCII and non-ASCII characters efficiently and reliably.