tive, and then responds based on the value of c. If c is
“+”, the kernel adds a new tab to the browser. To achieve
this, it ﬁrst calls mktab to start a tab process (another
7
primitive implemented in OCaml). mktab returns a tab
object, which contains an input and output channels to
communicate with the tab process. Once the tab t is
created, the kernel sends it a Render message using the
write_msg function – this tells t to render itself, which
will later cause the tab to send a Display message to
the kernel. Finally, we return an updated kernel state
(t, t::tabs), which sets the newly created tab t as
the current tab, and adds t to the list of tabs.
In addition to “+” the kernel handles several other
cases for user input, which we omit in Figure 3. For
example, when the kernel reads keys F1 through F10,
it switches to tabs 1 through 10, respectively, if the tab
exists. To switch tabs, the kernel updates the currently
selected tab and sends it a Render message. The ker-
nel also processes mouse events delivered by the input
process to the kernel’s stdin. For now, we only han-
dle mouse clicks, which are delivered by the input pro-
cess using a single un-printable ASCII character (adding
richer mouse events would not fundamentally change our
kernel or proofs). The kernel in this case calls a primi-
tive implemented in OCaml which gets the location of
the mouse, and it sends a MouseClick message using
the returned coordinates to the currently selected tab. We
use this two-step approach for mouse clicks (un-printable
character from the input process, followed by primitive
in OCaml), so that the kernel only needs to processes a
single character at a time from stdin, which simpliﬁes
the kernel and proofs.
Request from Tab. If a tab t is ready for reading, the
kernel reads a message m from the tab using read_msg,
and then sends a response which depends on the mes-
sage. If the message is GetSoc(host, port), then the
tab is requesting that a socket be opened to the given
host/port. We apply the socket policy described in Sec-
tion 3.4, where domain_suffix t returns the domain
sufﬁx of a tab t, and safe_soc(host, domsuf) ap-
plies the policy (which basically checks that host is a
sub-domain of domsuf). If the policy allows the socket
to be opened, the kernel uses the send_socket to open
a socket to the host, and send the socket over the chan-
nel to the tab (recall that we use Unix domain sockets to
send open ﬁle descriptors from one process to another).
Otherwise, it returns an Error message.
In addition to GetSoc the kernel handles several other
cases for tab requests, which we omit in Figure 3. For
example, the kernel responds to GetURL by retrieving a
URL and returning the result. It responds to cookie store
and retrieve messages by checking the security policy
from Section 3.5 and forwarding the message to the ap-
propriate cookie process (note that for simplicity, we did
not show the cookie processes in Figure 3). The kernel
also responds to cookie processes that are sending cookie
results back to a tab, by forwarding the cookie results
to the appropriate tab. The kernel responds to Display
messages by forwarding them to the output process.
Monads in Ynot. The code in Figure 3 shows how
Ynot supports an imperative programming style in Coq.
This is achieved via monads which allow one to en-
code effectful, non-terminating computations in pure
languages like Haskell or Coq. Here we brieﬂy show
how monads enable this encoding. In the next section we
extend our discussion to show how Ynot’s monads also
enable reasoning about the kernel using pre- and post-
conditions as in Hoare logic.
We use Ynot’s ST monad which is a parameterized
type where ST T denotes computations which may per-
form some I/O and then return a value of type T. To use
ST, Ynot provides a bind primitive which has the fol-
lowing dependent type:
bind : forall T1 T2,
ST T1 -> (T1 -> ST T2) -> ST T2
This type indicates that, for any types T1 and T2, bind
will take two parameters: (1) a monad of type ST T1 and
(2) a function that takes a value of type T1 and returns a
monad of type ST T2; then bind will produce a value
in the ST T2 monad. The type parameters T1 and T2
are inferred automatically by Coq. Thus, the expression
bind X Y returns a monad which represents the compu-
tation: run X to get a value v; run (Y v) to get a value
v’; return v’.
To make using bind more
convenient, Ynot
also deﬁnes Haskell-style “do” syntactic sugar us-
ing Coq’s Notation mechanism, so that x  b), and a;b is
the
translated to bind a (fun _ => b).
Ynot
type
forall T (v: T), ST T (where again T is inferred by
Coq). Given a value v, the monad return v represents
the computation that does no I/O and simply returns v.
Finally,
library provides a return primitive of
5 Kernel Veriﬁcation
In this section we explain how we veriﬁed QUARK’s ker-
nel. First, we specify correct behavior of the kernel in
terms of traces. Second, we prove the kernel satisﬁes this
speciﬁcation using the full power of Ynot’s monads. Fi-
nally, we prove that our kernel speciﬁcation implies our
target security properties.
5.1 Actions and Traces
We verify our kernel by reasoning about the sequences of
calls to primitives (i.e., system calls) it can make. We call
such a sequence a trace; our kernel speciﬁcation (hence-
forth “spec”) deﬁnes which traces are allowed for a cor-
rect implementation as in [30].
8
Definition Trace := list Action.
Inductive tcorrect : Trace -> Prop :=
Inductive Action :=
: chan -> positive -> list ascii -> Action
: chan -> positive -> list ascii -> Action
: tab -> Action
| ReadN
| WriteN
| MkTab
| SentSoc : tab -> list ascii -> list ascii -> Action
| ...
| tcorrect_nil:
tcorrect nil
| tcorrect_step: forall tr req rsp,
tcorrect tr ->
step_correct tr req rsp ->
tcorrect (rsp ++ req ++ tr).
Definition Read c b :=
ReadN c 1 [c]
Figure 4: Traces and Actions. This Coq code deﬁnes the type of
externally visible actions our kernel can take. A trace is simply a list
of such actions. We reason about our kernel by proving properties of
the traces it can have. Traces are like other Coq values; in particular,
we can write functions that return traces. Read is a helper function to
construct a trace fragment corresponding to reading a single byte.
We use a list of actions to represent the trace the
kernel produces by calling primitives. Each action in
a trace corresponds to the kernel invoking a particular
primitive. Figure 4 shows a partial deﬁnition of the
Action datatype. For example: ReadN f n l is an
Action indicating that the n bytes in list l were read
from input channel f; MkTab t indicates that tab t was
created; SentSoc t host port indicates a socket was
connected to host/port and passed to tab t.
We can manipulate traces and Actions like any other
values in Coq. For example, we can deﬁne a function
Read c b to encode the special case that a single byte
b was read on input channel c. Though not shown here,
we also deﬁne similar helper functions to build up trace
fragments which correspond to having read or written
a particular message to a given component. For exam-
ple, ReadMsg t (GetSoc host port) corresponds to
the trace fragment that results from reading a GetSoc re-
quest from tab t.
5.2 Kernel Speciﬁcation
Figure 5 shows a simpliﬁed snippet of our kernel spec.
The spec is a predicate tcorrect over traces with two
constructors, stating the two ways in which tcorrect
can be established: (1) tcorrect_nil states that the
empty trace satisﬁes tcorrect (2) tcorrect_step
states that
if tr satisﬁes tcorrect and the kernel
takes a single step, meaning that after tr it gets a
request req, and responds with rsp,
then the trace
rsp ++ req ++ tr (where ++ is list concatenation)
also satisﬁes tcorrect. By convention the ﬁrst action
in a trace is the most recent.
The predicate step_correct deﬁnes correctness
for a single iteration of
the kernel’s main loop:
step_correct tr req rsp holds if given the past
trace tr and a request req,
the
kernel should be rsp.
The predicate has several
constructors (not all shown) enumerating the ways
the response of
Inductive step_correct :
Trace -> Trace -> Trace -> Prop :=
| step_correct_add_tab: forall tr t,
step_correct tr
(MkTab t :: Read stdin "+" :: nil)
(WroteMsg t Render)
| step_correct_socket_true: forall tr t host port,
is_safe_soc host (domain_suffix t) = true ->
step_correct tr
(ReadMsg t (GetSoc host port))
(SentSoc t host port)
| step_correct_socket_false: forall tr t host port,
is_safe_soc host (domain_suffix t) <> true ->
step_correct tr
(ReadMsg t (GetSoc host port) ++ tr)
(WroteMsg t Error ++ tr)
| ...
Figure 5: Kernel Speciﬁcation. step correct is a predicate over
triples containing a past trace, a request trace, and a response trace; it
holds when the response is valid for the given request in the context of
the past trace. tcorrect deﬁnes a correct trace for our kernel to be a
sequence of correct steps, i.e., the concatenation of valid request and
response trace fragments.
For example,
step_correct can be established.
step_correct_add_tab states that
typing “+” on
stdin leads to the creation of a tab and sending the
Render message. The step_correct_socket_true
case captures the successful socket creation case,
whereas step_correct_socket_false captures the
error case.
5.3 Monads in Ynot Revisited
In the previous section, we explained Ynot’s ST monad
as being parameterized over a single type T. In re-
ality, ST takes two additional parameters representing
pre- and post-conditions for the computation encoded by
the monad. Thus, ST T P Q represents a computation
which, if started in a state where P holds, may perform
some I/O and then return a value of type T in a state
where Q holds. For technical reasons, these pre- and post-
conditions are expressed using separation logic, but we
defer details to a tech report [24].
Following the approach of Malecha et al. [30], we de-
ﬁne an opaque predicate (traced tr) to represent the
fact that at a given point during execution, tr captures
all the past activities; and (open f) to represent the fact
that channel f is currently open. An opaque predicate
cannot be proven directly. This property allows us to
ensure that no part of the kernel can forge a proof of
(traced tr) for any trace it independently constructs.
9
Axiom readn:
forall (f: chan) (n: positive) {tr: Trace},
ST (list ascii)
{traced tr * open f}
{fun l =>
traced (ReadN f n l :: tr) *
[len l = n] * open f }.
Definition read_msg:
forall (t: tab) {tr: Trace},
ST msg
{traced tr * open (tchan t)}
{fun m =>
traced (ReadMsg t m ++ tr) * open (tchan t)} :=
...
Figure 6: Example Monadic Types. This Coq code shows the
monadic types for the readn primitive and for the read msg func-
tion which is implemented in terms of readn. In both cases, the ﬁrst
expression between curly braces represents a pre-condition and the sec-
ond represents a post-condition. The asterisk (*) may be read as normal
conjunction in this context.
Thus (traced tr) can only be true for the current trace
tr.
Figure 6 shows the full monadic type for the readn
primitive, which reads n bytes of data and returns it.
The * connective represents the separating conjunc-
tion from separation logic.
For our purposes, con-
sider it as a regular conjunction. The precondition of
(readn f n tr) states that tr is the current trace and
that f is open. The post-condition states that the trace
after readn will be the same as the original, but with
an additional (ReadN f n l) action at the beginning,
where the length of l is equal to n (len l = n is a reg-
ular predicate, which is lifted using square brackets into
a separation logic predicate). After the call, the channel
f is still open.
The full type of the Ynot bind operation makes sure
that when two monads are sequenced, the post-condition
of the ﬁrst monad implies the pre-condition of the sec-
ond. This is achieved by having bind take an additional
third argument, which is a proof of this implication. The
syntactic sugar for x 
proj_user_control tr