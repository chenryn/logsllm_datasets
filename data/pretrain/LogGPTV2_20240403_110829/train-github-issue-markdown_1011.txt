  * I tried using the `@types/xxxx` package and had problems.
  * I tried using the latest stable version of tsc. https://www.npmjs.com/package/typescript
  * I have a question that is inappropriate for StackOverflow. (Please ask any appropriate questions there).
  * Mention the authors (see `Definitions by:` in `index.d.ts`) so they can respond. 
    * Authors: @....
Mentioning @blakeembrey, @andy-ms, @alecmerdler ðŸ˜‰
Code:
    import React, { Component } from "react";
    import { connect } from "react-redux";
    import { RootState } from "@src/state/state";
    interface Props {
        normal: string;
        optional?: number;
    }
    class TestComponent extends Component {
        render() {
            return Hello;
        };
    }
    function mapStateToProps(_state: RootState) {
        return { 
            normal: "test",
            optional: 5,
        };
    }
    const Connected = connect(mapStateToProps)(TestComponent);
Error:
    [ts]
    Argument of type 'typeof TestComponent' is not assignable to parameter of type 'ComponentType>'.
      Type 'typeof TestComponent' is not assignable to type 'StatelessComponent>'.
        Type 'typeof TestComponent' provides no match for the signature '(props: { normal: string; optional: number | undefined; } & DispatchProp & { children?: ReactNode; }, context?: any): ReactElement | null'.
The problem is when the `optional` prop is marked as optional - the
`TestComponent` part of `connect(mapStateToProps)(TestComponent);` is reported
red with above error code.
For unknown reasons the inferred type is `StatelessComponent` but
`TestComponent` is a class.  
When the prop is marked as `optional: number|undefined` all is ok, so it's a
workaround for now.