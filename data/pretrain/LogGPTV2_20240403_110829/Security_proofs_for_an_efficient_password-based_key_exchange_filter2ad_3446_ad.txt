scribed in [4] and do not seem to alter the security of the
AuthA protocol. But more precise security analyses similar
to the above ones should be performed before actually using
the other modes.
4.3 Instantiating the Encryption Function
It is clear that a simple block-cipher can not be used in
place of the ideal-cipher required by the security result. We
indeed need permutations onto G for all the secret keys,
otherwise partition attacks can be mounted [10].
In spe-
ciﬁc cases where the encoding of the elements is compact,
on can use the iterated technique [1]: one encrypts the ele-
ment, and reencrypts the result, until one ﬁnally falls in the
group G. Decryption operates the same way. With well-
chosen elliptic curves, the average number of iterations can
be bounded by 2. Furthermore, the size of the blocks can
thus be less than 256 bits. However, one must be careful in
the implementation to prevent timing attacks.
A promising avenue is to also instantiate the encryption
primitive as the product of a Diﬃe-Hellman value with a
hash of the password, as suggested in AuthA [4]. Preliminary
investigations have shown that this multiplicative function
leads to a password-based key-exchange scheme secure in
the random-oracle model only [14].
5. CONCLUSION
The reductions presented in this paper are not optimal,
but our intend was to present easy to read, understand and
meaningful proofs rather than very eﬃcient ones. We think
that the terms 3qs/2N or 3qs/N can be improved to qs/N ,
but the proof would then in turn becomes very intricate.
For technical reasons the hash function H1 used to build
the authenticator has to be collision-resistant in our proofs,
but the authors of AuthA [4] suggest to use a 64-bit au-
thenticator. This may turn out to be enough in practice,
but the proof presented in the paper would then need to be
modiﬁed.
It, however, seems a bad idea to use the same
hash function H everywhere in AuthA.
Acknowledgments
The second author was supported by the Director, Oﬃce
of Science, Oﬃce of Advanced Scientiﬁc Computing Re-
search, Mathematical Information and Computing Sciences
Division, of the U.S. Department of Energy under Contract
No. DE-AC03-76SF00098. This document is report LBNL-
51868. Disclaimer available at http://www-library.lbl-
.gov/disclaimer.
As a consequence, one can claim exactly the same security
results about this scheme as the ones stated in the Theo-
rems 1 and 2. More details can be found in the full ver-
sion [13].
4.2 The AuthA Modes of Operation
When engineers choose a password-based key exchange
scheme, they take into account its security, computation and
communication eﬃciency, and easiness of integration. Since
they do not all face the same computing environment, they
may want to operate the AuthA protocol in diﬀerent ways:
encrypt both ﬂows of the basic Diﬃe-Hellman key exchange;
6. REFERENCES
[1] M. Bellare, A. Boldyreva, A. Desai, and
D. Pointcheval. Key-Privacy in Public-Key
Encryption. In Asiacrypt ’01, LNCS 2248, pages
566–582. Springer-Verlag, Berlin, 2001.
[2] M. Bellare and T. Kohno and C. Namprempre.
Authenticated Encryption in SSH: Provably Fixing
the SSH Binary Packet Protocol. In Proc. of the 9th
CCS. ACM Press, New York, 2002.
[3] M. Bellare, D. Pointcheval, and P. Rogaway.
Authenticated Key Exchange Secure Against
Client
Server
pwU
accept ← false
terminate ← false
R← [1, q − 1]
X ← gx, X (cid:8) ← X
x
Y ← DpwS (Y (cid:8)), KU ← Y x
PWU ← Y pwU
M KU ← H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU )
Auth ← H(M KU(cid:18)PWU )
skU ← H(M KU(cid:18)0)
accept ← true
terminate ← true
(cid:8)
U, X
−−−−−−−−−−−→···
←−−−−−−−−−−−···
S, Y
(cid:8)
(cid:8)
U, X
−−−−−−−−−−−→
←−−−−−−−−−−−
S, Y
(cid:8)
−−−−−−−−−−−→···
Auth
−−−−−−−−−−−→
Auth
pwS = gpwU
accept ← false
terminate ← false
R← [1, q − 1]
y
Y ← gy,
Y (cid:8) ← EpwS (Y )
X ← X (cid:8), KS ← X y
PWS ← pwS
y
M KS ← H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS)
= H(M KS(cid:18)PWS)
Auth ?
if true, accept ← true
skS ← H(M KS(cid:18)0)
terminate ← true
Figure 3: The AuthA protocol run by the client U and the server S – The session key for U is skU =
H(H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Y x)(cid:18)0). The session key for S is skS = H(H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)X y)(cid:18)0).
Dictionary Attacks. In Eurocrypt ’00, LNCS 1807,
pages 139–155. Springer-Verlag, Berlin, 2000.
[4] M. Bellare and P. Rogaway. The AuthA Protocol for
Password-Based Authenticated Key Exchange.
Contributions to IEEE P1363. March 2000. Available
from http://grouper.ieee.org/groups/1363/.
[5] M. Bellare and P. Rogaway. Random Oracles Are
Practical: a Paradigm for Designing Eﬃcient
Protocols. In Proc. of the 1st CCS, pages 62–73. ACM
Press, New York, 1993.
[6] S. M. Bellovin and M. Merritt. Encrypted Key
Exchange: Password-Based Protocols Secure against
Dictionary Attacks. In Proc. of the Symposium on
Security and Privacy, pages 72–84. IEEE, 1992.
[7] S. M. Bellovin and M. Merritt. Augmented Encrypted
Key Exchange: A Password-Based Protocol Secure
against Dictionary Attacks and Password File
Compromise. In Proc. of the 1st CCS, pages 244–250.
ACM Press, New York, 1993.
[8] S. Blake-Wilson, V. Gupta, C. Hawk, and B. Moeller.
ECC Cipher Suites for TLS, February 2002. IEEE
RFC 20296.
[9] N. Borisov, I. Goldberg, and D. Wagner. Intercepting
Mobile Communications: The Insecurity of 802.11. In
Proc. of ACM International Conference on Mobile
Computing and Networking (MobiCom’01), 2001.
[10] C. Boyd, P. Montague, and K. Nguyen. Elliptic Curve
Based Password Authenticated Key Exchange
Protocols. In ACISP ’01, LNCS 2119, pages 487–501.
Springer-Verlag, Berlin, 2001.
[11] V. Boyko, P. MacKenzie, and S. Patel. Provably
Secure Password Authenticated Key Exchange Using
Diﬃe-Hellman. In Eurocrypt ’00, LNCS 1807, pages
156–171. Springer-Verlag, Berlin, 2000.
[12] E. Bresson, O. Chevassut, and D. Pointcheval. Group
Diﬃe-Hellman Key Exchange Secure against
Dictionary Attacks. In Asiacrypt ’02, LNCS 2501,
pages 497–514. Springer-Verlag, Berlin, 2002.
[13] E. Bresson, O. Chevassut, and D. Pointcheval.
Security Proofs for an Eﬃcient Password-Based Key
Exchange. In Proc. of the 10th CCS. ACM Press, New
York, 2003. Full version available at
http://www.di.ens.fr/users/pointche.
[14] E. Bresson, O. Chevassut, and D. Pointcheval.
Encrypted Key Exchange using Mask Generation
Function. Work in progress.
[15] R. Cramer and V. Shoup. A Practical Public Key
Cryptosystem Provably Secure against Adaptive
Chosen Ciphertext Attack. In Crypto ’98, LNCS 1462,
pages 13–25. Springer-Verlag, Berlin, 1998.
[16] O. Goldreich and Y. Lindell. Session-Key Generation
Using Human Passwords Only. In Crypto ’01, LNCS
2139, pages 408–432. Springer-Verlag, Berlin, 2001.
Moreover, the session keys are random, independent from
any other data (from an information theoretical point of
view, since H2 and H3 are private random oracles). Then,
Pr[S7] = 1/2.
B. CONCLUSION OF THE PROOF
By summing up all the relations, one completes the proof.
From Equations (1), (2), (3), (4) and (5),
| Pr[S4] − Pr[S0]| ≤
q2E
+
2(q − 1)
qSqE
q − 1
+
2q2E + q2
S
2(q − 1)
+
q2
h
2(cid:9)1+1 + Pr[Encrypt4]
≤ (2qE + qS)2
2(q − 1)
+
q2
h
2(cid:9)1+1 + Pr[Encrypt4]
From Equations (6 – 8), | Pr[Encrypt7] − Pr[Encrypt4] | and
| Pr[S7] − Pr[S4]| are both upper-bounded by
6] + Pr[AskH7]
qs
2(cid:9)1 + Pr[Auth(cid:1)
2(cid:9)1 + Pr[Auth(cid:1)
≤ qs
7] + 2 Pr[AskH7].
(12)
Then,
| Pr[S7] − Pr[S0]| ≤ (2qE + qS)2
2qs
2(q − 1)
2(cid:9)1
+ Pr[Encrypt7] + 2 Pr[Auth(cid:1)
7]
+4 Pr[AskH7].
q2
h
2(cid:9)1+1 +
+
From Equations (9), (10) and (11), one gets
Pr[Encrypt7] ≤ qs
2N
7] ≤ qs
2N
Pr[Auth(cid:1)
Pr[AskH7] ≤ qhSucccdh
G (t
(cid:1)
),
(13)
which concludes the proof.
[17] J. Katz, R. Ostrovsky, and M. Yung. Eﬃcient
Password-Authenticated Key Exchange Using
Human-Memorizable Passwords. In Eurocrypt ’01,
LNCS 2045, pages 475–494. Springer-Verlag, Berlin,
2001.
[18] J. Katz, R. Ostrovsky, and M. Yung. Forward Secrecy
in Password-only Key Exchange Protocols. In Proc. of
SCN ’02, 2002.
[19] M. Steiner, P. Buhler, T. Eirich, and M. Waidner.
Secure Password-Based Cipher Suite for TLS. ACM
Transactions on Information and System Security
(TISSEC), 4(2):134–157, 2001.
[20] D. Taylor. Using SRP for TLS Authentication,
november 2002. Internet Draft.
[21] IEEE Standard 1363–2000. Standard Speciﬁcations for
Public Key Cryptography. IEEE. Available from
http://grouper.ieee.org/groups/1363, August
2000.
[22] IEEE Standard 1363.2 Study Group. Password-Based
Public-Key Cryptography. Available from
http://grouper.ieee.org/groups/1363/passwdPK.
[23] Wireless Application Protocol. Wireless Transport
Layer Security Speciﬁcation, February 2000. WAP
TLS, WAP-199 WTLS.
APPENDIX
A. PROOF OF LEMMA 1
Game G7: In this game, we compute the authenticator skU
and the session key skS using the private oracles H2 and H3
on X and Y (cid:8) only. This enables us to no longer need to
compute the values Y , KU , and KS for the simulation, but
just to compute them at the end with the actual value of
pw for deﬁning the events Encrypt7 and Auth(cid:1)
7.
The Rule U2(7), Rule S1(7) and Rule S2(7) do not need
the password along the simulation, but only make use of it
at the end of the simulation. Thus, they are not useful for
the simulation, but that they are only useful to determine
whether events Encrypt7 or Auth(cid:1)
7 occurred. They can thus
be postponed until the adversary has asked qs queries, or
time limit expired. But then, one can note that the password
pw is not used anymore, until these last rules are proceeded:
one can run the simulation, without any password, and just
choose it before processing these two rules.
Let us denote by R(U ) the set of Y (cid:8) received by a client
instance, and by R(S) the set of (H, Y (cid:8)) used by a server
instance. From an information theoretical point of view,
since we have avoided collisions in the Game G3,
[∃Y
(cid:8) ∈ R(U ), (pw ,∗, ⊥,E , Y
) ∈ ΛE ]
≤ #R(U )
» ∃(H, Y (cid:8)) ∈ R(S), Y ← Dpw (Y (cid:8)),
(1, U(cid:18)S(cid:18)X(cid:18)Y (cid:18)∗, H) ∈ ΛA
Pr[Encrypt7] = Pr
pw
Pr[Auth(cid:1)
7] = Pr
pw
–
N
(cid:8)
≤ #R(S)
N
.
By deﬁnition of the sets R(U ) and R(S), since Y (cid:8) is received
in the second query to the user, and H in the second query
to the server, the cardinalities are both upper-bounded by
qs/2.