o encryption
o routing control
 Selective field confidelity
o encryption
 Traffic flow confidelity
o encryption
o traffic padding
o routing control
 Connection integrity with recovery
o encryption
o data integrity
 Connection integrity without recovery
o encryption
o data integrity
 Connection integrity selective field
o encryption
o data integrity
 Connectionless integrity
o encryption
o digital signature
o data integrity
 Connectionless integrity selective field
o encryption
o digital signature
o data integrity
 Non-repudiation at origin
o digital signature
o data integrity
o notarisation
 Non-repudiation of receipt
o digital signature
o data integrity
o notarisation
 对等实体认证
加密
o
数字签名
o
交换验证
o
 数据源认证
加密
o
数字签名
o
 访问控制服务
访问控制列表
o
密码
o
范围列表
o
等级
o
 连接保密
密码
o
路由控制
o
 无连接的保密
密码
o
路由控制
o
 选择性字段的保密
密码
o
 传输保密
密码
o
传输填充
o
路由控制
o
 恢复连接的完整性
密码
o
数据完整性
o
 不可恢复连接的完整性
密码
o
数据完整性
o
 选择字段连接完整性
密码
o
数据完整性
o
 无连接完整性
密码
o
数字签名
o
数据完整性
o
 选择字段的无连接完整性
密码
o
数字签名
o
数据完整性
o
 接受源
数字签名
o
数据完整性
o
公正
o
 接受回执
数字签名
o
数据完整性
o
公正
o
7.3 Data integrity 数据完整性
Ensuring data integrity means supplying a means of testing that the data has not
been tampered with. Usually this is done by forming a simple number out of the bytes
in the data. This process is calledhashing and the resulting number is called
a hash or hash value.
确保数据的完整性意味着要提供一个数据未被篡改的测试方法。通常是通过字节数据生成一个简单的
数字。这个操作被称为hashing，结果数字成为hash 或者hash值。
A naive hashing algorithm is just to sum up all the bytes in the data. However, this
still allows almost any amount of changing the data around and still preserving the
hash values. For example, an attacker could just swap two bytes. This preserves the
hash value, but could end up with you owing someone $65,536 instead of $256.
有一个幼稚的hash 算法是将数据所有的字节进行总和。然而，这却仍然允许数据在保留 hash 值不
变的情况下对数据进行任意改变。例如，攻击者只需要交换两个字节。这样 hash 值没有改变，但结
果可能是你本来欠别人256 美元却变成了65535 美元。
Hashing algorithms used for security purposes have to be "strong", so that it is
very difficult for an attacker to find a different sequence of bytes with the same
hash value. This makes it hard to modify the data to the attacker's purposes. Security
researchers are constantly testing hash algorithms to see if they can break them
- that is, find a simple way of coming up with byte sequences to match a hash value.
They have devised a series of cryptographic hashing algorithms which are believed
to be strong.
用于安全目的的hash 算法必须很“强”，这样攻击者才很难在保留相同的hash 值时找到一个不同的
字节序列。这样攻击者才很难修改数据以达到目的。安全研究人员不断测试是否能攻破hash 算法 -
寻找一个简单方法，得到一个字节序列来匹配某个hash 值。他们设计了一系列被认为很强的加密
hash 算法.
Go has support for several hashing algorithms, including MD4, MD5, RIPEMD-160, SHA1,
SHA224, SHA256, SHA384 and SHA512. They all follow the same pattern as far as the
Go programmer is concerned: a functionNew (or similar) in the appropriate package
returns a Hash object from the hash package.
Go支持几个hash算法,包括MD4, MD5, RIPEMD-160,SHA1, SHA224, SHA256, SHA384 and SHA512。
它们都尽可能按照Go 程序员关注的，遵循相同的模式：在适当的包中定义New或类似的方法，返回
一个hash包中的Hash 对象。
A Hash has an io.Writer, and you write the data to be hashed to this writer. You can
query the number of bytes in the hash value by Size and the hash value by Sum.
一个Hash结构体拥有一个io.Writer接口，你可以通过writer 方法写入被hash的数据.你可以通
过Size方法获取hash 值的长度，Sum方法返回hash 值。
A typical case is MD5 hashing. This uses the md5 package. The hash value is a 16
byte array. This is typically printed out in ASCII form as four hexadecimal numbers,
each made of 4 bytes. A simple program is
MD5 算法是个典型的例子。使用md5包，hash 值是一个 16 位的数组。通常以ASCII 形式输出四个
由4 字节组成的十六进制数。程序如下
/* MD5Hash
*/
package main
import (
"crypto/md5"
"fmt"
)
func main() {
hash := md5.New()
bytes := []byte("hello\n")
hash.Write(bytes)
hashValue := hash.Sum(nil)
hashSize := hash.Size()
for n := 0; n < hashSize; n += 4 {
var val uint32
val = uint32(hashValue[n])<<24 +
uint32(hashValue[n+1])<<16 +
uint32(hashValue[n+2])<<8 +
uint32(hashValue[n+3])
fmt.Printf("%x ", val)
}
fmt.Println()
}
which prints "b1946ac9 2492d234 7c6235b4 d2611184"
输出 "b1946ac9 2492d234 7c6235b4 d2611184"
A variation on this is the HMAC (Keyed-Hash Message Authentication Code) which adds
a key to the hash algorithm. There is little change in using this. To use MD5 hashing
along with a key, replace the call to New by
在此基础上的一个变化是HMAC(Keyed-Hash Message Authentication Code)，它给 hash 算法
增加了一个key。使用时略有不同。要和key 一起使用MD5 算法时，可以通过以下形式替换New
func NewMD5(key []byte) hash.Hash
7.4 Symmetric key encryption key 对称加密
There are two major mechanisms used for encrypting data. The first uses a single
key that is the same for both encryption and decryption. This key needs to be known
to both the encrypting and the decrypting agents. How this key is transmitted between
the agents is not discussed.
数据加密有两种机制。第一种方式是在加密和解密时都使用同一个key。加密方和解密方都需要知道
这个key。此处如何在这两者之间传输这个key。
As with hashing, there are many encryption algorithms. Many are now known to have
weaknesses, and in general algorithms become weaker over time as computers get faster.
Go has support for several symmetric key algorithms such as Blowfish and DES.
目前有很多使用hash 算法的加密算法。其中很多都有弱点，而且随着时间的推移，计算机越来越快，
通用hash 算法变得越来越弱。Go 已经支持好几个对称加密算法，如Blowfish 和DES。
The algorithms are block algorithms. That is they work on blocks of data. If you
data is not aligned to the block size, then you will have to pad it with extra blanks
at the end.
这些算法都是block 算法。因为它们必须基于数据块(block)。如果你的数据不匹配block 的大小，
那就必须在最后使用空格来填充多余的空间。
Each algorith is represented by a Cipher object. This is created by NewCipher in the
appropriate package, and takes the symmetric key as parameter.
每个算法都被表示为一个Cipher对象。可通过在相应的包中使用对称key 作为参数调用NewCipher
方法来创建该对象。
Once you have a cipher, you can use it to encrypt and decrypt blocks of data. The
blocks have to be 8-bit blocks for Blowfish. A program to illustrate this is
创建cipher 对象后，就能通过它加密和解密数据块。Blowfish 需要8 位的block，详见以下程序
/* Blowfish
*/
package main
import (
"bytes"
"code.google.com/p/go.crypto/blowfish"
"fmt"
)
func main() {
key := []byte("my key")
cipher, err := blowfish.NewCipher(key)
if err != nil {
fmt.Println(err.Error())
}
src := []byte("hello\n\n\n")
var enc [512]byte
cipher.Encrypt(enc[0:], src)
var decrypt [8]byte
cipher.Decrypt(decrypt[0:], enc[0:])
result := bytes.NewBuffer(nil)
result.Write(decrypt[0:8])
fmt.Println(string(result.Bytes()))
}
Blowfish is not in the Go 1 distribution. Instead it is on the
http://code.google.com/p/ site. You have to install it by running "go get" in a
directory where you have source that needs to use it.
Blowfish 不在GO 1 中，而是在http://code.google.com/p/中。你可以在需要使用它的源码目
录下运行“go get”进行安装。
7.5 Public key encryption 公钥加密
Public key encryption and decryption requires two keys: one to encrypt and a second
one to decrypt. The encryption key is usually made public in some way so that anyone
can encrypt messages to you. The decryption key must stay private, otherwise everyon
would be able to decrypt those messages! Public key systems aer asymmetric, with
different keys for different uses.
公钥加密和解密需要两个key：一个用来加密，另一个用来解密。加密key 通常是公开的，这样任何
人都可以给你发送加密数据。解密key 必须保密，否则任何人都可以解密数据。公钥系统是非对称
的，不同的key 有不同的用途。
There are many public key encryption systems supported by Go. A typical one is the
RSA scheme.
Go 支持很多公钥加密系统，RSA 就是一个典型的例子。
A program generating RSA private and public keys is
下面是一个生成RSA 公钥和私钥的程序
/* GenRSAKeys
*/
package main
import (
"crypto/rand"
"crypto/rsa"
"crypto/x509"
"encoding/gob"
"encoding/pem"
"fmt"
"os"
)
func main() {
reader := rand.Reader
bitSize := 512
key, err := rsa.GenerateKey(reader, bitSize)
checkError(err)
fmt.Println("Privatekeyprimes",key.Primes[0].String(),key.Primes[1].String())
fmt.Println("Private key exponent", key.D.String())
publicKey := key.PublicKey
fmt.Println("Public key modulus", publicKey.N.String())
fmt.Println("Public key exponent", publicKey.E)
saveGobKey("private.key", key)
saveGobKey("public.key", publicKey)
savePEMKey("private.pem", key)
}
func saveGobKey(fileName string, key interface{}) {
outFile, err := os.Create(fileName)
checkError(err)
encoder := gob.NewEncoder(outFile)
err = encoder.Encode(key)
checkError(err)
outFile.Close()
}
func savePEMKey(fileName string, key *rsa.PrivateKey) {
outFile, err := os.Create(fileName)
checkError(err)
var privateKey = &pem.Block{Type: "RSA PRIVATE KEY",
Bytes: x509.MarshalPKCS1PrivateKey(key)}
pem.Encode(outFile, privateKey)
outFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The program also saves the certificates using gob serialisation. They can be read
back by this program:
程序通过gob序列化保存证书。也可以取回证书:
/* LoadRSAKeys
*/
package main
import (
"crypto/rsa"
"encoding/gob"
"fmt"
"os"
)
func main() {
var key rsa.PrivateKey
loadKey("private.key", &key)
fmt.Println("Privatekeyprimes",key.Primes[0].String(),key.Primes[1].String())
fmt.Println("Private key exponent", key.D.String())
var publicKey rsa.PublicKey
loadKey("public.key", &publicKey)
fmt.Println("Public key modulus", publicKey.N.String())
fmt.Println("Public key exponent", publicKey.E)
}
func loadKey(fileName string, key interface{}) {
inFile, err := os.Open(fileName)
checkError(err)
decoder := gob.NewDecoder(inFile)