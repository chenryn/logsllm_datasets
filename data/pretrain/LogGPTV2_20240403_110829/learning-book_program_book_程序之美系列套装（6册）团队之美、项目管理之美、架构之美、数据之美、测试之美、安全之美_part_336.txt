信简单一些。通过在客户端的XMPP协议实现之上创建一个小的无头
测试程序，我们可以测试后端的基本XMPP功能是否工作正确，甚至
还能在工作状态下测试复杂的协议，如会话初始化。例如，考虑例
7-12所示的测试程序。这个程序登录到服务器，获取用户的联系人
列表（也称为花名册），如果从服务器获得了花名册那么它成功返
回。通过运行这个程序，我们可以测试我们的XMIPP客户端后台的大
部分功能（网络连接、会话初始化、流压缩、流加密、发送IQ请
求、IQ响应通知等）是否工作正常。
例7-12：一个连接到服务器并请求花名册的测试程序；JID和账号密
码通过环境传递
XMPPClient*xmppClient=NULL;
boolrosterReceived=false;
int main(int argc,char*argv[])
xmppClient=new
XMPPClient(getenv("TEST_JID"),getenv("TEST_PASS"));
xmppClient->onConnected.connect(& handleConnected);0
xmppClient->connectO;return rosterReceived;
void handleConnectedO
1921
---
## Page 1923
rosterRequest->onResponse.connect(bind(&
handleRosterResponse,_1,_2);@
rosterRequest->send();
void handleRosterResponse(RosterPayload*,optionalerror)
rosterReceived=!error;
xmppClient->disconnectO);
1
0连接（并且认证）以后，调用handleConnected。
②收到对花名册请求的响应以后，调用handleRosterReceived，以响
应和状态作为参数。
③如果没有发生任何错误，那么我们正确接收到了花名册。
一个与例7-12类似的程序是Swift的自动测试套件中的一部分。我们
在每一次测试中使用不同的服务器实现，通过环境传递测试JID和每
个服务器的密码。如果ClientTest因为协议实现的缺陷而失败，那么
我们添加一个新的单元测试并修复这个缺陷。如果缺陷来自于一些
特定的协议组合没有被正确处理（不管在客户端或者服务器），我
们添加一个新的场景测试来重现这个场景，此后或者修复这个客户
端缺陷，或者客户端找到方法绕过这个特定的服务器缺陷。
当使用类似我们刚刚介绍的这个自动测试的时候，当然测试受限于
所能使用到的实现。尽管使用少数免费的XMPP服务器实现来进行测
试是可能的，但对那些来自于商业软件开发商的实现进行测试却不
总是那么容易的。为了让XMPP社区成员在相互之间测试协议实现更
容易，现在有人提议建立一个集中的环境以提供在目前所有的服务
器实现上的测试账号，包括那些商业软件口。这个提议有助于为
XMPP项目建立简单而自动化的交互性测试。
1922
---
## Page 1924
[1]遗憾的是，由于其他更紧迫的工作，这个提议目前被暂时搁置，
但相信很快就会被重新讨论。
未琢之玉：XML有效性测试
在前面节测试协议功能的时候，我们将节表示从协议的实际逻辑中
分离开以强调测试的重点所在。这个分离使得测试协议的逻辑既直
接又清爽。可惜的是，对将抽象节转换成XML以及反之的测试仍然
允长且容易出错。需要检查的一个地方是，是否每一个不同的载荷
形式都能正确转换为符合标准的XML元素。例如，对于我们前面使
用过的版本载荷，我们需要测试带有或者不带有版本号的载荷的表
示形式。反过来，对于从XML到载荷数据结构的转换，需要测试每
一种可能的符合标准的XML元素。如果我们能自动检查XML解析器
和序列化器是否能处理协议标准所允许的载荷和节的所有可能的变
化形式，那将是很方便的。
测试XML解析器和序列化器的一种方法是自动化的XML有效性验证
（XMLvalidation）。XMPP标准基金会发布的每个协议规范都带有
一个XML模式（XMLschema）。这个模式描述了在该协议中使用的
XML的语法和约束。例如，它指明了可以出现在载荷中的XML元素
的名字，这些元素的属性的名字和类型，一个元素可以出现的次数
等。这些XML模式通常用于测试依据模式所指定的规则，一段XML
代码在语法上是否有效。然而，目前XMPP模式只用于描述性的目
的，并且只用于撰写协议。这也是为什么将XMPP模式用于自动测试
过程（如有效性检查）仍然有待探索的原因。不过，最近人们已经
对制定规范的XML模式产生了兴趣，这将为改善允长的XMPP解析
和序列化测试创造更多的可能，并且，也许让测试变得更漂亮！
结论
在我们为XMPP协议的实现创建漂亮测试的探索过程中，我们从测试
简单的请求-响应协议开始。测试在最低的层次：网络流上传输的数
据上进行。发现这种测试形式缺乏良好的扩展性以后，我们将协议
抽象到一个较高的层次，直到测试只使用高级的数据结构为止。通
过在高的层次测试协议行为，我们能够为更加复杂的协议建立测试
而不降低其清晰性。对于大多数复杂的协议来说，创建场景有助于
涵盖在协议会话中可能出现的所有可能情况。最后，因为XMPP是一
个开放协议并有许多不同的实现，在真实的网络坏境中测试XMPP应
用程序是非常重要的，这样可以确保不同实现之间的互操作能力。
1923
---
## Page 1925
通过经常性地运行小的测试程序，我们能够完整地测试整个系统，
并能验证我们对协议的实现是否能与网络上的其他实体协同工作。
本章的重点主要是测试XMPP实现的协议功能，因为这也许是XMPP
质量控制中最重要的环节。然而，除了协议测试以外，XMPP世界中
同时也存在着许多其他的测试形式。例如，在XMIPP服务器世界中，
性能测试是至关重要的。像我们前面介绍的简单的测试代码可以用
于在服务器上生成大的负载，以测试服务器是否能处理越来越多的
流量。
另一方面，对于XMPP客户端程序来说，测试用户界面的功能是很重
要的。尽管我们都知道自动化的用户界面测试很难，但是许多复杂
的部分，如联系人列表，可以在隔离的环境中进行单元测试，这就
可以帮助避免客户端代码关键部分的缺陷。
尽管现在我们已经可以为XMPP的许多环节编写简单、干净、完整的
测试了，但对于完美的测试来说，仍然有许多东西等待我们去探
索。如果你有建议或想法，或者想要帮助XMIPP社区改善测试，请访
问http://xmpp.org并加入我们的讨论！
参考文献
[XML-C14n]Boyer,John.2001.Canonical
XML(http://www.w3.org/TR/xml-C14n.html).
[DOM]Le Hegaret,Philippe.2002.The W3C Document Object
Model(DOM)(http://www.w3.org/2002/07/26-dom-article.html)
[RFC 3920]Saint-Andre,Peter.2004.Extensible Messaging and Presence
Protocol:Core(http://www.ietf.org/rfc/rfc3920.txt).
[RFC 3921]Saint-Andre,Peter.2004.Extensible Messaging and Presence
Protocol:Instant Messaging and
Presence(http://www.ietf.org/rfc/rfc3921.txt)
[XEP-0092]Saint-Andre,Peter.XEP-0092:Software
[XMPPTDGJSaint-
Andre,Peter.Smith,Kevin.Troncon,Remko.2009.XMPP:TheDefinitive
1924
---
## Page 1926
Guide(http://oreilly.com/catalog/9780596157197/).Cambridge:OReilly
第8章大规模测试自动化之美
AlanPage
自动化测试不仅仅是简单地编写和运行那些不需要人为干预的测试
用例。事实上，对很多测试人员来说，自动化测试只是由一些手动
生成的、用来执行特定测试场景或一部分产品功能的测试脚本或代
码组成。对于运行测试用例的流程更是往往被放在自动化流程之后
才会被考虑到。
大部分测试人员对于自动化测试可以节省时间这样的说法很熟悉。
然而，在很多情况下，自动化测试实际上并没有节省测试人员和他
们的管理团队所期望的时间。在现实中，许多自动化的尝试之所以
会失败，是因为除了实际的执行程序以外，流程中的其他部分没有
一个实现了自动化。为了成功实施自动化，特别是对于大规模的自
动化测试，整个过程从头到尾一—从测试人员编写完测试程序到结
果被分析出来给人看，都必须被自动化。没有这个层次上的自动
化，测试人员在监控测试程序运行上所花的时间将会变成难以控制
的增长。
在我小时候，我的父母在一个烟火商店买了一包很大的烟火。我们
很热切地等到天黑，然后跑到外面的后院开始我们的烟火表演。我
们看到了各种各样的爆炸和火花，觉得十分高兴。有时候我们会觉
得在黑暗的天空寻找烟火的痕迹有一点点吃力，有些小问题也会让
我们失望，但是大部分时候我们还是非常惊喜的。
多年以后，我参加了我的第一次专业的烟火表演。那些爆炸和火光
不仅很巨大，所有的一切都比我们那次家庭烟火表演要顺畅不知多
少倍。人们对烟火的形状和跟音乐的配合赞不绝口。这不是说我们
的家庭烟火表演有什么不好，但是那场专业的表演因为其规模、复
杂度和流畅性，真的是十分美。
一个需要测试人员花费他们大部分的时间来监控测试执行，检查错
误（或者毛病），推动测试的进行，使之从一个阶段进入到下一个
阶段的系统，远远称不上美。只有当整个系统的自动化程度可以让
测试人员能集中精力在他们做得最好的事情，也即是测试软件上，
美才可能体现得出。
1925
---
## Page 1927
在我们开始前
关于这个题目，我有一些关于自动化方法的话要说。这些日子以
来，测试领域里有一些争论，主要是集中在什么情况下自动化可以
帮助测试团队，以及什么情况下自动化会阻碍他们的工作。测试人
员担心应该自动化什么，并且自动化的程度该有多少。测试经理们
则会担心他们在测试工具的开发和测试程序的编写上的投入如何能
获得最大的收益。
少力气的问题上挣扎。对于这个难题，我有一个适用于任何团队的
答案，一个可以用来衡量他们自动化工作量是否正确的准则。这个
准则对任何团队都一样，而且不像其他的衡量准则，它在任何时候
都是正确的。你应该百分之一百地自动化那些应该被自动化的测
试。这一准则本身是简单的（即使本质上不具有行动参考性），困
滩的地方在于决定哪些测试是应该被自动化的。产品架构、相关参
与者、时间表和许多其他因素都可以帮助测试团队做出正确的自动
化决定。我看到很多自动化的尝试之所以会失败，其原因在于测试
人员花太多时间进行自动化（或者试着去自动化），并把时间花在
了根本就不值得自动化的行为或场景。同样地，也可能因为测试人
员没有能够去自动化那些应该作为首先被自动化的目标的任务，自
动化测试的努力失败了。决定哪些测试应该被自动化是极其困难
的，并且依赖于测试团队和相关参与者，根据他们的特定情况来决
定（幸运的是，对于读者的注意范围来说，这点远远地超出了本章
的范畴）。
另外，值得注意的是，对于本文来说，我指的是由一个独立测试团
队所完成的测试。自动化对于由开发人员写的单元测试来说是一个
完美的、被广为接受的解决方案。关于一些测试需要被自动化的困
滩决定通常出现在这些情况下，在端对端的场景、或高级的图形用
户界面操作，或者那些当一组人的眼睛和头脑是决定成功的过程中
最大的障碍的时候。
什么是大规模测试自动化
对于一个小的软件产品，让一个测试人员坐在他的位子上去编写和
运行自动化测试，并通过电子邮件或手动更新一个网页或电子表格
来报告结果也许是可行的。测试人员也可能要负责测试中发现的任
何bug，并验证那些被解决的bug是不是真正被修复了。对于一个有
1926