r
1
q
0
p
/
o
.
n
-
m
,
l
+
k
+
k
/
o
/
o
/
o
  ::= e j 3e j  0 op  1 j :  j X(cid:0)1  j  0 S  1
Meta-variable op ranges over f^; _g. The constructs e and
3e are both atomic propositions. In particular, 3e is not
the application of the usual modal operator 3 (with the
\temporal" semantics) to formula e. Informally, the formula
e is true in a session if the event e has been observed in
that session, whereas 3e, pronounced \e is possible", is true
if event e may still occur as a future observation in that
session. The operators X(cid:0)1 (‘last time’) and S (‘since’) are
the usual past-time operators.
3.1.2 Semantics.
A structure for L(ES), where ES = (E; (cid:20); #) is an event
structure, is a non-empty local interaction history in ES,
+. We de(cid:12)ne the satisfaction relation j= between
h 2 C0
structures and policies, i.e. h j=   means that the history h
satis(cid:12)es the requirements of policy  . We will use a variation
of the semantics in linear Kripke structures: satisfaction is
de(cid:12)ned from the end of the sequence \towards" the begin-
ning, i.e. h j=   i(cid:11) (h; jhj) j=  . To de(cid:12)ne the semantics
(cid:3) with N > 0, and
of (h; i) j=  , let h = x1x2 (cid:1) (cid:1) (cid:1) xN 2 C0
1 (cid:20) i (cid:20) N . De(cid:12)ne (h; i) j=   by structural induction in  .
ES
ES
(h; i) j= e
(h; i) j= 3e
(h; i) j=  0 ^  1
(h; i) j=  0 _  1
(h; i) j= : 
(h; i) j= X(cid:0)1 
(h; i) j=  0 S  1
i(cid:11) e 2 xi
i(cid:11) e r# xi
i(cid:11) (h; i) j=  0 and (h; i) j=  1
i(cid:11) (h; i) j=  0 or (h; i) j=  1
i(cid:11) (h; i) 6j=  
i(cid:11) i > 1 and (h; i (cid:0) 1) j=  
i(cid:11) 9j (cid:20) i:(cid:2)(h; j) j=  1 and
8k:(j < k (cid:20) i ) (h; k) j=  0)(cid:3)
Remarks. There are two main reasons for restricting our-
selves to the pure-past fragment of temporal logic (PPLTL).
Most importantly, PPLTL is an expressive and natural lan-
guage for stating requirements over past behaviour, e.g. history-
based access control. Hence in our application one wants to
speak about the past, not the future. We justify this claim
further by providing (natural) encodings of several exist-
ing approaches for checking requirements of past behaviour
(c.f. Example 3.2 and 3.3 in the next section). Secondly,
although one could add future operators to obtain a seem-
ingly more expressive language, a result of Laroussinie et
al. quanti(cid:12)es exactly what is lost by this restriction [19].
Their result states that LTL can be exponentially more suc-
cinct than the pure-future fragment of LTL. It follows from
the duality between the pure-future and pure-past opera-
tors, that when restricting to (cid:12)nite linear Kripke structures,
and interpreting h j=   as (h; jhj) j=  , then our pure-past
fragment can express any LTL formula (up to initial equiva-
lence), though possibly at the cost of an exponential increase
in the size of the formula. Another advantage of PPLTL is
that, while Sistla and Clarke proved that the model-checking
problem for linear temporal logic with future- and past-
operators (LTL) is PSPACE-complete [28], there are very
e(cid:14)cient algorithms for ((cid:12)nite-path) model-checking pure-
past fragments of LTL, and (as we shall see in Section 4)
also for the dynamic policy-checking problem.
Note that we have de(cid:12)ned the semantics of the logic only
+. This means that poli-
for non-empty structures, h 2 C0
cies cannot be interpreted if there has been no previous in-
teraction.
In practice it is up to each agent to decide by
ES
other means if interaction should take place in the case of
no past history. For the remainder of this paper we shall
de(cid:12)ne (cid:15) j=   i(cid:11) ; j=  , that is we (arbitrarily) identify the
empty sequence ((cid:15)) with the singleton sequence consisting
of only the empty con(cid:12)guration. Finally, we de(cid:12)ne stan-
false (cid:17) e ^ :e for some (cid:12)xed e 2 E,
dard abbreviations:
true (cid:17) :false,  0 !  1 (cid:17) : 0 _  1, F(cid:0)1( ) (cid:17) true S  ,
G(cid:0)1( ) (cid:17) :F(cid:0)1(: ). We also de(cid:12)ne non-standard abbrevi-
ation (cid:24)e (cid:17) :3e (pronounced ‘con(cid:13)ict e’ or ‘e is impossible’).
3.2 Example Policies
To illustrate the expressive power of our language, we con-
sider a number of example policies.
Example 3.1 (eBay). Recall the eBay scenario from Sec-
tion 2, in which a buyer has to decide whether to bid on an
electronic auction issued by a seller. We express a policy for
decision ‘bid’, stating \only bid on auctions run by a seller
that has never failed to send goods for won auctions in the
past."
 bid (cid:17) :F(cid:0)1(time-out)
Furthermore, the buyer might require that \the seller has
never provided negative feedback in auctions where payment
was made." We can express this by
 bid (cid:17) :F(cid:0)1(time-out) ^ G(cid:0)1(negative ! ignore)
Example 3.2 (Chinese Wall). The Chinese Wall policy
is an important commercial security-policy [3], but has also
found applications within computer science. In particular,
Edjlali et al. [9] use an instance of the Chinese Wall pol-
icy to restrict program accesses to database relations. The
Chinese Wall security-policy deals with subjects (e.g. users)
and objects (e.g. resources). The objects are organized into
datasets which, in turn, are organized in so-called con(cid:13)ict-
of-interest classes. There is a hierarchical structure on ob-
jects, datasets and classes, so that each object has a unique
dataset which, in turn, has a unique class. In the Chinese-
Wall policy, any subject initially has freedom to access any
object. After accessing an object, the set of future accessi-
ble objects is restricted: the subject can no longer access an
object in the same con(cid:13)ict-of-interest class unless it is in a
dataset already accessed. Non-con(cid:13)icting classes may still
be accessed.
We now show how our logic can encode any instance of
the Chinese Wall policy. Following the model of Brewer
et al. [3], we let S denote a set of subjects, O a set of objects,
and L a labeling function L : O ! C (cid:2) D, where C is a
set of con(cid:13)ict-of-interest classes and D a set of datasets.
The interpretation is that if L(o) = (co; do) for an object
o 2 O, then o is in dataset do, and this dataset belongs to
the con(cid:13)ict-of-interest class co. The hierarchical structure on
objects, datasets and classes amounts to requiring that for
any o; o0 2 O if L(o) = (c; d) and L(o0) = (c0; d) then c = c0.
The following ‘simple security rule’ de(cid:12)nes when access is
granted to an object o: \either it has the same dataset as
an object already accessed by that subject, or, the object
belongs to a di(cid:11)erent con(cid:13)ict-of-interest class." [3] We can
encode this rule in our logic. Consider an event structure
ES = (E; (cid:20); #) where the events are C [ D, with (c; c0) 2 #
for c 6= c0 2 C, (d; d0) 2 # for d 6= d0 2 D, and (c; d) 2 # if
(c; d) is not in the image of L (denoted Img(L)). We take
(cid:20) to be discrete. Then a maximal con(cid:12)guration is a set
fc; dg so that the pair (c; d) is in Img(L), i.e., corresponds
to an object-access. A history is then a sequence of object-
accesses. Now stating the simple security rule as a policy
is easy: to access object o with L(o) = (co; do), the history
must satisfy the following policy:
set Cj is co-(cid:12)nite (i.e., its complement E n Cj is (cid:12)nite),
j (cid:17) :F(cid:0)1( _
 a
e2EnCj
e)
 o (cid:17) F(cid:0)1do _ G(cid:0)1:co
If instead Cj is itself (cid:12)nite, we encode
In this encoding we have one policy per object o. One may
argue that the policy  o only captures Chinese Wall for a
single object (o), whereas the \real" Chinese Wall policy is
a single policy stating that \for every object o, the simple
security rule applies." However, in practical terms this is
inessential. Even if there are in(cid:12)nitely many objects, a sys-
tem implementing Chinese Wall one could easily be obtained
using our policies as follows. Say that our proposed security
mechanism (intended to implement \real" Chinese Wall) gets
as input the object o and the subject s for which it has to
decide access. Assuming that our mechanism knows func-
tion L, it does the following.
If object o has never been
queried before in the run of our system, the mechanism gen-
erates \on-the-(cid:13)y" a new policy  o according to the scheme
above; it then checks  o with respect to the current history
of s.1 If o has been queried before it simply checks  o with
respect to the history of s. Since only (cid:12)nitely many objects
can be accessed in any (cid:12)nite run, only (cid:12)nitely many di(cid:11)erent
policies are generated. Hence, the described mechanism is
operationally equivalent to Chinese Wall.
Example 3.3 (Shallow One-Out-of-k). The ‘one-out-of-
k’ (OOok) access-control policy was introduced informally
by Edjlali et al. [9]. Set in the area of access control for
mobile code, the OOok scheme dynamically classi(cid:12)es pro-
grams into equivalence classes, e.g. \browser-like applica-
tions," depending on their past behaviour.
In the follow-
ing we show that, if one takes the set-based formalization of
OOok by Fong [11], we can encode all OOok policies. Since
our model is sequence-based, it is richer than Fong’s shallow
histories which are sets. An encoding of Fong’s OOok-model
thus provides a good sanity-check as well as a declarative
means of specifying OOok policies (as opposed to the more
implementation-oriented security automata).
In Fong’s model of OOok, a (cid:12)nite number of application
classes are considered, say, 1; 2; : : : ; k. Fong identi(cid:12)es an
application class, i, with a set of allowed actions Ci. To
encode OOok policies, we consider an event structure ES =
(E; (cid:20); #) with events E being the set of all access-controlled
actions. As in the last example, we take (cid:20) to be discrete, and
the con(cid:13)ict relation to be the maximal irre(cid:13)exive relation,
i.e. a local interaction history in ES is simply a sequence
of single events.
Initially, a monitored entity (originally,
a piece of mobile code [9]) has taken no actions, and its
history (which is a set in Fong’s formalization) is ;.
If S
is the current history, then action a 2 E is allowed if there
exists 1 (cid:20) i (cid:20) k so that S [ fag (cid:18) Ci, and the history is
updated to S [fag. For each action a 2 E we de(cid:12)ne a policy
 a for a, expressing Fong’s requirement. Assume, without
loss of generality, that the sets Cj that contain a are named
1; 2; : : : ; i for some i (cid:20) k. We will assume that each set Cj
is either (cid:12)nite or co-(cid:12)nite.
Fix a j (cid:20) i. The following formula  a
j encodes the re-
quirement that S [ fag (cid:18) Cj. There are two cases. If the
1This check can be done in time linear in the history of
subject s.
j (cid:17) G(cid:0)1( _
 a
e2Cj
e)
Now we can encode the policy for allowing action a as  a (cid:17)
Wi
j=1  a
j .
4. DYNAMIC MODEL CHECKING
The problem of verifying a policy with respect to a given
observed history is the model-checking problem: given h 2
C+
ES and  , does h j=   hold? However, our intended
scenario requires a more dynamic view. Each entity will
make many decisions, and each decision requires a model
check. Furthermore, since the model h changes as new
observations are made, it is not su(cid:14)cient simply to cache
the answers. This leads us to consider the following dy-
namic problem. Devise an implementation of the following
interface,
‘DMC ’. DMC is initially given an event struc-
ture ES = (E; (cid:20); #) and a policy   written in the basic
policy language. Interface DMC supports three operations:
DMC:new(), DMC:update(e; i), and DMC:check(). A se-
quence of non-‘check’ operations gives rise to a local inter-
action history h, and we shall call this the actual history.
Internally, an implementation of DMC must maintain infor-
mation about the actual history h, and operations new and
update are those of Section 2, performed on h. At any time,
operation DMC :check() must return the truth of h j=  .
In the full paper [17], we describe two implementations of