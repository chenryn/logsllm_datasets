greenlet之间自动切换，它还有其他许多功能。
gevent提供了socket模块的协作版本，当socket中的一些数据准备好后，会使用
greenlet自动地暂停或恢复执行。甚至有一个monkey patch功能，可自动用gevent版
本的socket来替代标准库socket。只需要通过一行额外代码就可让你的标准同步代码
魔术般地每次都异步使用socket：
from gevent import monkey; monkey.patch_all()
def application(environ，start_response):
headers = [('Content-type'，'application/json')]
start_response('200 OK'，headers)
# ...do something with sockets here...
return result
14
第1章 理解微服务
当然这种隐含的魔力是有代价的。为使gevent正常工作，所有底层代码都需要与
gevent 补丁兼容。来自社区的一些包可能因此继续阻塞或返回非期望的结果；如果这
些包使用C语言扩展，并绕过了打上gevent补丁的标准库的一些功能，这表现得尤其
明显。
不过大多数情况下都能正常工作。而且，与gevent配合良好的项目会被标记成绿
色，如果一个库不能与gevent配合，社区通常会要求库的作者修复成绿色。
例如，在Mozilla，这用来扩展Firefox Sync服务。
1.6.3 Twisted和Tornado模块
如果增加并发请求数量对你构建的微服务很重要，可尝试放弃WSGI标准，而使
用诸如Tornado(http://www.tornadoweb.org/)或Twisted(https://twistedmatrix.com/trac/)的
异步框架。
Twisted已经存在多年。要实现相同的微服务，需要编写的代码要略微长一些，如
下所示：
import time
import json
from twisted.web import server，resource
from twisted.internet import reactor，endpoints
class Simple(resource.Resource):
isLeaf = True
def render_GET(self，request):
request.responseHeaders.addRawHeader(b"content-type"，
b"application/json")
return bytes(json.dumps({'time': time.time()})，'utf8')
site = server.Site(Simple())
endpoint = endpoints.TCP4ServerEndpoint(reactor，8080)
endpoint.listen(site)
reactor.run()
虽然Twisted是一个非常健壮和高效的框架，但使用它构建HTTP微服务时，你
可能遇到下列问题：
● 必须使用从 Resource 类派生的类(该类实现了每个支持的方法)来实现微服务
的每个端点。对于简单的API来说，它增加了很多样板代码。
15
Python微服务开发
● 由于是原生异步的，Twisted代码可能很难理解和调试。
● 当你串联了很多功能，又将其逐一触发时，很容易掉进回调地狱——代码会
变得混乱。
● 很难正确测试Twisted应用，你必须使用Twisted特定的单元测试模型。
Tornado基于类似的模型，但在某些领域做得更好。它有一个量级更轻的路由系统，
并尽可能使代码更接近普通Python。Tornado也使用回调模型，所以调试难度较大。
但这两个框架都努力借助Python 3中引入的新异步功能来弥补差距。
1.6.4 asyncio模块
当Guido van Rossum开始在Python 3中添加异步功能时，社区的一部分人认为，
以同步、顺序化方式编写应用更合理一些，不必像Tornado或Twisted那样必须添加显
式回调。这些人推荐使用类似gevent的解决方案。
但Guido选择了显式技术，并在Tulip项目(该项目受到Twisted的启发)进行尝试。
最后，asyncio模块从Tulip项目中诞生，并添加到Python中。
事后看来，在Python中实现显式的事件循环机制，而非采用gevent的方式是比较
合理的。Python核心开发人员编写了asyncio，优雅地使用async和await关键字来扩
展Python语言实现协程(coroutine)，使用普通Python 3.5+构建的异步应用代码看起来
非常优雅，而且很接近同步编程。
协程是能暂停和恢复程序执行的功能。第12章将详细解释如何在Python中
实现协程以及如何使用协程。
回调语法混乱问题经常出现在Node.js和Twisted(Python 2)应用中。但通过以上方
式，Python很好地避免了此类问题。
除了协程外，Python 3还在asyncio包中引入一套完整的功能和帮助程序来构建异
步应用，详情可参阅https://docs.python.org/3/library/asyncio.html。
Python现在可像Lua这样的表达式语言一样创建基于协程的应用，现在有一些新
框架已嵌入这些功能。只有Python 3.5+版本支持此功能。
KeepSafe的aiohttp(http://aiohttp.readthedocs.io)就是其中之一，只需要几行优雅的
代码就能构建完全异步的微服务：
from aiohttp import web
import time
async def handle(request):
16
第1章 理解微服务
return web.json_response({'time': time.time()})
if __name__ == '__main__':
app = web.Application()
app.router.add_get('/'，handle)
web.run_app(app)
在这个简短示例中，实现方式非常类似于同步应用的实现方式。使用异步的唯一
提示是async关键字，async关键字用来指出handle函数是协程的。
这就是将在异步Python应用的每个级别上使用的方式。这里有另一个使用aiopg
的例子，来自asyncio的PostgreSQL库的项目文档：
import asyncio
import aiopg
dsn = 'dbname=aiopg user=aiopg password=passwd host=127.0.0.1'
async def go():
pool = await aiopg.create_pool(dsn)
async with pool.acquire() as conn:
async with conn.cursor() as cur:
await cur.execute("SELECT 1")
ret = []
async for row in cur:
ret.append(row)
assert ret == [(1,)]
loop = asyncio.get_event_loop()
loop.run_until_complete(go())
通过添加少量async和await前缀，让执行SQL查询和返回结果的函数看起来接
近于同步函数。
但基于Python 3的异步框架和库还处于兴起阶段，如果你使用asyncio或诸如aiohttp
的框架，都必须在每个需要的功能中使用特定的异步实现方式。
如果代码中需要使用非异步的库，那么需要完成一些额外的和富有挑战性的工作，
以免阻塞事件循环。
如果你的微服务处理的资源数量有限，则是可管理的。但在撰写本书期间，坚持
使用已经成熟的同步框架可能比使用异步框架更安全。让我们先享用目前成熟的程序
包的生态系统，并期盼asyncio生态系统早日走向成熟！
17
Python微服务开发
Python中有很多同步框架可用来构建微服务，如Bottle、Pyramid with Cornice、
Flask等。
本书的下一个版本很可能使用异步框架。但这一版中还是使用 Flask 框架。
Flask已经存在了一段时间，非常健壮和成熟。但请记住，无论使用什么Python
Web框架，都应能接替运行本书中的所有示例。这是因为所有构建微服务的
代码都非常接近于普通 Python，而框架的主要作用是路由请求并提供一些
帮助。
1.6.5 语言性能
前一节探讨了两种编写微服务的不同方式：异步和同步。无论使用哪种技术，
Python的速度直接影响着微服务性能。
当然，每个人都知道Python比Java和Go要慢，但执行速度并非总是最重要的。
微服务通常是一层薄薄的代码，它的大部分时间都在等待来自其他服务的网络响应。
Postgres服务器需要快速返回SQL查询结果(因为构建响应时，其中花费的时间最多)，
与此相比，对于微服务而言，内核速度就没那么重要了。
当然，让应用尽快运行是合情合理的要求。
在Python社区中，围绕语言加速的一个有争议的话题是GIL(Global Interpreter Lock)
互斥会破坏性能，因为多线程应用不能使用多个进程。
GIL的存在是有理由的，它可保护CPython解释器的非线程安全部分，也存在于
Ruby等其他语言中。到目前为止，所有试图将其删除的尝试都未能加快CPython实现
的速度。
Larry Hasting 正在研究一个名为Gilectomy(https://github.com/larryhastings/
gilectomy)的无GIL CPython项目。它的最低目标是提出一个无GIL实现，能使
单线程应用的运行速度达到CPython级别。但到撰写本书时为止，还是慢于
CPython的。跟踪这个项目，看它能否达到“速度相同”的那一天很有趣，那
时，非GIL CPython将非常有吸引力。
对于微服务，除了阻止在同一进程中使用多个内核外，GIL也会由于互斥锁带来
的系统调用开销而降低高负载时的系统性能。
然而，围绕GIL的所有关注是有益的，在过去几年，已经做了一些工作来减少解
释器中的GIL争夺，这让Python的性能在一些领域有了极大提高。
18
第1章 理解微服务
注意，即使核心团队删除GIL，由于Python是一门解释性和垃圾收集语言，也会
遭受这些特性带来的性能损失。
如果你对解释器如何分解函数感兴趣，可分析一下Python提供的dis模块。下面
的示例中，解释器将一个生成自增值的函数分解成不少于29步的指令操作序列：
>>> def myfunc(data):
... for value in data:
... yield value + 1
...
>>> import dis
>>> dis.dis(myfunc)
2 0 SETUP_LOOP 23 (to 26)
3 LOAD_FAST 0 (data)
6 GET_ITER
>> 7 FOR_ITER 15 (to 25)
10 STORE_FAST 1 (value)
3 13 LOAD_FAST 1 (value)
16 LOAD_CONST 1 (1)
19 BINARY_ADD
20 YIELD_VALUE
21 POP_TOP
22 JUMP_ABSOLUTE 7
>> 25 POP_BLOCK
>> 26 LOAD_CONST 0 (None)
29 RETURN_VALUE
用静态编译的语言编写的类似函数将大大减少生成相同结果所需的操作数。不过，
还有一些方法可加快 Python的执行速度。
一种方法是构建C语言扩展，或使用诸如Cython(http://cython.org/)的语言静态扩
展，将代码的一部分写入编译代码，但这会使代码更复杂。
另一种最有前景的解决方案是，仅使用PyPy解释器(http://pypy.org/)来运行应用。
PyPy实现了JIT(Just-In-Time)编译器，此编译器在运行时直接用CPU可使用的机
器码替换Python片段。JIT的策略是在执行前，实时检测何时编译以及如何编译。
虽然PyPy总比CPython滞后几个Python版本，但你可在生产环境中使用它，而
且它的性能惊人。我们有一个Mozilla项目需要快速执行，PyPy版本的程序几乎与Go
版本的程序一样快，因此我们在那里改用Python。
19
Python微服务开发
要了解PyPy与CPython的不同之处，PyPy Speed Center网站(http://speed.pypy.
org/)是可供访问的绝佳场所。
如果你的程序使用了C扩展，则需要针对PyPy重新编译，这是一个问题。如果
其他开发人员维护你使用的某些扩展，这尤其麻烦。
不过，如果你用一组标准库构建微服务，则很可能可直接与 PyPy 解释器一起工
作，所以这是值得一试的。
对于大多数项目而言，Python及其生态系统的好处大大超出本节描述的性能问题，
因为微服务的性能开销很少是一个问题。即使算作一个问题，微服务方法也允许你在
不影响系统其余部分的情况下，重新编写“性能关键型”组件。
1.7 本章小结
本章比较了构建Web应用所用的单体方法和微服务方法。很明显，这两个选项并
非严重对立，你并不需要在第一天就做出抉择并坚持到底。
可使用单体来启动项目，然后用微服务加以改进。随着项目逐渐成熟，部分服务
逻辑应迁移到微服务中。这是你从本章学到的有用方法，但需要小心地避免落入一些
常见陷阱。
另一个要点是，Python被认为是编写Web应用的最佳语言之一，也是编写微服务
的最佳语言之一。由于Python提供了大量成熟的框架和包，在其他领域也被经常使用。
本章简单介绍了几个同步或异步框架，在本书的后续章节，将使用Flask框架。
下一章将介绍奇妙的Flask框架，即使你之前不熟悉它，也很可能会喜欢上它。
最后，Python是一个较慢的语言，在某些特定的情况下这可能是一个问题。但通
过弄清楚是什么让它变慢，几个避免缓慢的解决方案足以让这个问题变得不再重要。
20