1
0
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 
0x1F]
Au
dit 
inf
Contains a pointer to the original security descriptor 
that was used when first creating the object. This is 
used for File Objects when auditing is enabled to 
guarantee consistency.
5 
(
0
x
ObpInf
oMask
ToOffs
et[Info
or
ma
tio
n
2
0
)
Mask 
& 
0x3F]
Ext
en
de
d 
inf
or
ma
tio
n
Stores the pointer to the object footer for objects 
that require one, such as File and Silo Context 
Objects.
6 
(
0
x
4
0
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 
0x7F]
Pa
ddi
ng 
inf
or
ma
tio
n
Stores nothing—empty junk space—but is used to 
align the object body on a cache boundary, if this 
was requested.
7 
(
0
x
8
0
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 
0xFF]
Each of these subheaders is optional and is present only under certain
conditions, either during system boot or at object creation time. Table 8-18
describes each of these conditions.
Table 8-18 Conditions required for presence of object subheaders
Na
me
Condition
Cr
The object type must have enabled the maintain type list flag. 
eat
or 
inf
or
ma
tio
n
Driver objects have this flag set if the Driver Verifier is enabled. 
However, enabling the maintain object type list global flag 
(discussed earlier) enables this for all objects, and Type objects 
always have the flag set.
Na
me 
inf
or
ma
tio
n
The object must have been created with a name.
Ha
ndl
e 
inf
or
ma
tio
n
The object type must have enabled the maintain handle count flag. 
File objects, ALPC objects, WindowStation objects, and Desktop 
objects have this flag set in their object type structure.
Qu
ota 
inf
or
ma
tio
n
The object must not have been created by the initial (or idle) 
system process.
Pro
ces
s 
The object must have been created with the exclusive object flag. 
(See Table 8-20 for information about object flags.)
inf
or
ma
tio
n
Au
dit 
Inf
or
ma
tio
n
The object must be a File Object, and auditing must be enabled for 
file object events.
Ext
en
de
d 
inf
or
ma
tio
n
The object must need a footer, either due to handle revocation 
information (used by File and Key objects) or to extended user 
context info (used by Silo Context objects).
Pa
ddi
ng 
Inf
or
ma
tio
n
The object type must have enabled the cache aligned flag. Process 
and thread objects have this flag set.
As indicated, if the extended information header is present, an object
footer is allocated at the tail of the object body. Unlike object subheaders, the
footer is a statically sized structure that is preallocated for all possible footer
types. There are two such footers, described in Table 8-19.
Table 8-19 Conditions required for presence of object footer
Name
Condition
Handle 
Revocati
on 
Informat
ion
The object must be created with ObCreateObjectEx, passing 
in AllowHandleRevocation in the 
OB_EXTENDED_CREATION_INFO structure. File and Key 
objects are created this way.
Extende
d User 
Informat
ion
The object must be created with ObCreateObjectEx, passing 
in AllowExtendedUserInfo in the 
OB_EXTENDED_CREATION_INFO structure. Silo Context 
objects are created this way.
Finally, a number of attributes and/or flags determine the behavior of the
object during creation time or during certain operations. These flags are
received by the Object Manager whenever any new object is being created, in
a structure called the object attributes. This structure defines the object name,
the root object directory where it should be inserted, the security descriptor
for the object, and the object attribute flags. Table 8-20 lists the various flags
that can be associated with an object.
Table 8-20 Object flags
Attrib
utes 
Flag
He
ade
r 
Fla
g 
Bit
Purpose
OBJ_I
NHERI
Sav
ed 
Determines whether the handle to the object will be 
inherited by child processes and whether a process can 
T
in 
the 
han
dle 
tabl
e 
entr
y
use DuplicateHandle to make a copy.
OBJ_P
ERMA
NENT
Per
ma
nen
tOb
ject
Defines object retention behavior related to reference 
counts, described later.
OBJ_E
XCLUS
IVE
Exc
lusi
ve
Obj
ect
Specifies that the object can be used only by the 
process that created it.
OBJ_C
ASE_I
NSENS
ITIVE
Not 
stor
ed, 
use
d at 
run 
tim
e
Specifies that lookups for this object in the namespace 
should be case insensitive. It can be overridden by the 
case insensitive flag in the object type.
OBJ_O
PENIF
Not 
stor
ed, 
use
d at 
run 
Specifies that a create operation for this object name 
should result in an open, if the object exists, instead of 
a failure.
tim
e
OBJ_O
PENLI
NK
Not 
stor
ed, 
use
d at 
run 
tim
e
Specifies that the Object Manager should open a 
handle to the symbolic link, not the target.
OBJ_K
ERNEL
_HAN
DLE
Ker
nel
Obj
ect
Specifies that the handle to this object should be a 
kernel handle (more on this later).
OBJ_F
ORCE
_ACCE
SS_CH
ECK
Not 
stor
ed, 
use
d at 
run 
tim
e
Specifies that even if the object is being opened from 
kernel mode, full access checks should be performed.
OBJ_K
ERNEL
_EXCL
USIVE
Ker
nel
Onl
yA
cce
ss
Disables any user-mode process from opening a handle 
to the object; used to protect the 
\Device\PhysicalMemory and \Win32kSessionGlobals 
section objects.
OBJ_I
GNOR
E_IMP
Not 
stor
ed, 
Indicates that when a token is being impersonated, the 
DOS Device Map of the source user should not be 
used, and the current impersonating process’s DOS 
ERSO
NATE
D_DE
VICEM
AP
use
d at 
run 
tim
e
Device Map should be maintained for object lookup. 
This is a security mitigation for certain types of file-
based redirection attacks.
OBJ_D
ONT_R
EPARS
E
Not 
stor
ed, 