title:Where the Wild Warnings Are: Root Causes of Chrome HTTPS Certificate
Errors
author:Mustafa Emre Acer and
Emily Stark and
Adrienne Porter Felt and
Sascha Fahl and
Radhika Bhargava and
Bhanu Dev and
Matt Braithwaite and
Ryan Sleevi and
Parisa Tabriz
Where the Wild Warnings Are:
Root Causes of Chrome HTTPS Certificate Errors
Mustafa Emre Acer
Google Inc.
Sascha Fahl
Leibniz University Hannover
Matt Braithwaite
Google Inc.
Emily Stark
Google Inc.
Radhika Bhargava
Purdue University
Ryan Sleevi
Google Inc.
Adrienne Porter Felt
Google Inc.
Bhanu Dev
International Institute of Information
Technology Hyderabad
Parisa Tabriz
Google Inc.
ABSTRACT
HTTPS error warnings are supposed to alert browser users to net-
work attacks. Unfortunately, a wide range of non-attack circum-
stances trigger hundreds of millions of spurious browser warnings
per month. Spurious warnings frustrate users, hinder the wide-
spread adoption of HTTPS, and undermine trust in browser warn-
ings. We investigate the root causes of HTTPS error warnings in
the field, with the goal of resolving benign errors.
We study a sample of over 300 million errors that Google Chrome
users encountered in the course of normal browsing. After manually
reviewing more than 2,000 error reports, we developed automated
rules to classify the top causes of HTTPS error warnings. We are
able to automatically diagnose the root causes of two-thirds of
error reports. To our surprise, we find that more than half of er-
rors are caused by client-side or network issues instead of server
misconfigurations. Based on these findings, we implemented more
actionable warnings and other browser changes to address client-
side error causes. We further propose solutions for other classes of
root causes.
1 INTRODUCTION
HTTPS certificate error warnings are supposed to protect users
by alerting them to network attacks. Instead, users see hundreds
of millions of warnings per month in the absence of real attacks.
A user might see warnings when she connects her phone to her
office’s network, or when a server administrator forgets to update
a certificate. Spurious HTTPS warnings are problematic because:
• Errors are a poor user experience. They frighten people and
• Warnings hinder adoption of HTTPS. Developers are frus-
trated when they switch a website to HTTPS and then hear
complaints from customers about errors.
prevent them from completing important tasks.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’17, , Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4946-8/17/10.
https://doi.org/10.1145/3133956.3134007
• Over time, people pay less attention to warnings if they
believe them to be false alarms [28, 30]. We want people to
pay attention for the occasion when it really is an attack.
Despite these problems, we can’t simply get rid of HTTPS error
warnings altogether. HTTPS certificate warnings are foundational
to the security of the web. When an attacker intercepts a connec-
tion, the browser detects the attacker’s invalid certificate chain and
warns the user about it. If the user clicks through the warning, then
the attacker can read and tamper with data on the website.
Browser vendors have tried to improve HTTPS error warnings
with changes to UI and storage policies [15, 16, 29]. Although their
improvements have increased warning adherence, their work is
not done: HTTPS warnings still suffer from the core problem of
false alarms [27]. Yet, the warnings must remain to protect users
under attack. Our goal is to balance both needs: remove spurious
warnings without impinging on legitimate warnings.
To address spurious warnings, we must first understand their
root causes. We investigate the most common causes of certificate
errors in a large-scale dataset of HTTPS error warnings encoun-
tered in the field. Chrome users volunteered to share HTTPS error
reports with us, averaging one million reports per day over one
year. We developed an analysis pipeline that automatically classi-
fies errors by their root cause when possible. Two-thirds of reports
can be automatically classified in this way, and we characterize the
remainder by manually reviewing a sample.
We find that more than half of certificate errors are due to non-
attack network interception or problems with the client. Previous
work focused only on the role of server misconfigurations [9, 12,
14, 18], but we show that client and network health are equally as
important. Further, two types of errors — insufficient intermedi-
ates and incorrect client clocks — are the biggest individual error
causes for Android and Windows clients. These two error classes
are good targets for mitigations that prevent unnecessary warn-
ings. We also find that government websites are disproportionately
responsible for server errors: 65% of the most-visited websites with
warnings are run by governments. The prevalence of errors on
government websites is alarming because it trains users to click
through warnings on important sites such as tax payment portals.
Many of these problems can be mitigated by building more ac-
tionable warnings in the browser or investing in other client-side
engineering solutions. We propose several mitigations and imple-
ment four of them for Google Chrome, an open source browser
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1407with over two billion active users. Altogether, we expect these four
mitigations to replace about 25% of error warnings.
Contributions. Our primary contributions are:
• We collect and analyze a large-scale, longitudinal dataset of
certificate warnings encountered in the wild. We perform
an in-depth study of each class of error.
• To our knowledge, we are the first to identify and quantify
the significant role that client and network misconfigurations
play in HTTPS error warnings.
• Among misconfigured sites, we characterize the “worst of-
fenders”: the sites that cause the most certificate warnings in
Chrome. This group is dominated by government websites.
• To our knowledge, we are the first to deploy technical mea-
sures to reduce the frequency of spurious HTTPS error warn-
ings. Additionally, we propose and discuss further mitiga-
tions for future work.
2 BACKGROUND
HTTPS protects the integrity and confidentiality of web traffic in
transit, even in the presence of an active network attacker. Historical
network attackers include governments, ISPs, roommates, criminals
on public networks, and others.
When a browser sets up an HTTPS connection with a server, the
browser must check that it’s communicating with the actual server
and not a network attacker. (Without this identity check, a network
attacker could pretend to be the server to capture the decryption
key.) At a high level, this process has three parts:
(1) At some point in the past, the server administrator obtained
a certificate signed by a Certificate Authority (CA).
(2) After setting up a TCP connection, the server provides the
signed certificate to the browser.
(3) The browser attempts to build a chain of trust from the
certificate to a root certificate on the client. The root trust
store on the client contains a set of root certificates from
trusted CAs. The browser also performs other checks, e.g. to
make sure that the certificate has the appropriate hostname
in it and that the certificate is not yet expired. Any failure
means that the browser is unsure of the identity of the server.
This step is called certificate validation.
If everything goes well, the HTTPS page loads. If a certificate
validation check fails, the browser shows an HTTPS error warning
(Figure 1) without loading any of the page content.
TLS proxies slightly complicate this story. A wide range of mid-
dleboxes (e.g., corporate network firewalls and school content fil-
ters) and software (e.g., anti-virus software and debugging tools)
want to intercept HTTPS traffic for various legitimate purposes.
This is accomplished by installing a root certificate from the TLS
proxy vendor into the client’s trust store. The proxy will then issue
new certificates for all of the client’s incoming web traffic, signed
by the proxy’s root certificate. This is a widespread but contentious
practice because TLS proxies can introduce vulnerabilities [10].
Figure 1: An HTTPS warning in Chrome 58. The checkbox
controls whether a certificate error report is uploaded when
the user encounters such a warning.
3 DATASET
Millions of Google Chrome users volunteer to upload error reports
when they encounter HTTPS or Safe Browsing warnings. Our study
is based on a large-scale sample of these reports.
3.1 Our volunteers
Users volunteer to share certificate error reports by checking a
checkbox on the HTTPS warning page (Figure 1). Once checked,
the setting is remembered in a preference associated with the user’s
Chrome profile. The user can stop participating in the program
from Chrome settings, or by un-checking the checkbox on any
subsequent warning page. The same setting can be toggled by a
similar checkbox on Safe Browsing warnings in Chrome [8].
The size of our dataset (a million reports a day) suggests that
it represents a large swath of browser users. For privacy reasons,
however, we intentionally do not analyze or retain identifying
information to try to characterize our volunteers (discussed further
in Section 3.4).
3.2 Sample dates and size
We enabled the reporting service in Google Chrome 44, which was
released to Chrome’s stable channel in July 2015. We focus most
closely on the data from April 2016 through March 2017, which
we refer to as the Annual Reports sample, containing 361,198,513
reports.1
All Google Chrome release channels (canary, dev, beta, and sta-
ble) [2] upload reports. Most users are on the stable channel, which
enjoys wide deployment. To avoid overwhelming our report pro-
cessing pipeline, stable Chrome sends a given certificate report to
the server with only 20% probability. For analysis purposes, we
restrict our discussion to reports from Chrome’s stable channel,
which we believe to be the most representative.
1Unfortunately, we cannot release the percentage of total Chrome browsing activity
that certificate warnings represent. In prior work, Akwahe et al. found a false warning
rate of 1.54% [9].
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA14083.3 Report contents
Each Chrome certificate error report contains:
to validate the certificate
• The hostname that the user was trying to access
• The certificate chain that Chrome received from the server
• The certificate chain that the client built while attempting
• The user’s local system time at the time the error occurred
• The certificate validation error(s) that Chrome encountered
(for example, the certificate was expired or did not match
the requested hostname)
• Whether Chrome customized the warning page for the par-
ticular type of error or showed a generic HTTPS warning
• Whether the user clicked through the warning to continue
• The browser’s User-Agent string
• Relevant Chrome field trials, which are Chrome features
to the site
enabled on an experimental basis [22]
Notably, each report contains two certificate chains: the chain
presented by the server, and the chain built by the client. They can
differ for a variety of reasons. One common example is that a server
presented a chain to a root certificate that a client doesn’t trust, and
the client tried to build an alternate path to a root that it does trust.
3.4 Privacy
Certificate error reports may contain private information. For ex-
ample, a certificate from an intranet might include the name of the
company’s system administrator or a testing computer’s hostname.
We take several steps to protect and respect our volunteers’ privacy.
3.4.1 No identifiers. The reports are not associated or stored
with any user or client identifiers. If someone uploads multiple
reports, we do not associate the reports with the same user.
3.4.2 Anonymous data retention. We strip all potentially private
data from the reports after they are two weeks old. We remove
all certificate chains that have not been seen publicly by Google-
bot, retaining only a SHA256 hash of the chain. We retain publicly
resolvable hostnames and generic identifiers like “localhost”; other-
wise, we replace hostnames with coarse alternatives like “Intranet
host” and “Intranet IP.” We tokenize User-Agent strings and retain
only the major version number (e.g., “58” rather than “58.0.3029.96”),
the locale, the operating system, and the platform.
3.4.3 Protection in transit. The reports are protected in transit
on the network. Because these reports are sent to help investigate
conditions that prevent the user from sending HTTPS requests,
the reports themselves cannot be reliably sent over HTTPS. For
example, if the user’s local system clock is set incorrectly, it may
prevent a report about the condition from being sent to Google over
HTTPS because the connection to Google may appear to be using
an expired certificate. Therefore, Chrome sends reports to an HTTP
URL. The report payload is encrypted with a public key that ships
with Chrome, to prevent a network attacker from eavesdropping
on private information that may appear in the reports.
3.5 Limitations
Field data has inherent limitations, some of which we are able to
mitigate (and some which we cannot). Still, we feel that the large
scale of our dataset and its in situ collection method yield results
with strong ecological and external validity.
3.5.1 Active attacks. An active network attacker could block
reports from being uploaded. The absence of active attacks in our
dataset does not mean that active attacks do not occur. For this
reason, we investigate unintentional misconfigurations, rather than
attempting to uncover active attacks.
3.5.2 Upload failures. In addition to active attacks, various net-
work conditions can prevent reports from being uploaded. If the
upload fails, Chrome does not persist or retry reports.2
3.5.3 Channel identification. We want to restrict our analysis
to the stable channel, which has the most representative user pop-
ulation. Unfortunately, we stripped the full version strings from
historical data (Section 3.4). We therefore use a heuristic to identify
reports from the stable channel: for a given date, we only consider
reports from that date’s stable release or older. (For example, the
stable release on October 1, 2016 was Chrome 53, so for that date
we analyze reports from Chrome 53 or older.) We believe that this
will filter out nearly all reports from non-stable channels, but a few
non-stable reports might remain.
3.5.4 Chromium forks. Our dataset also contains a small num-
ber of reports from other browsers based on the Chromium source
code3. Because we removed User-Agent strings, it is not possible
to remove these from the historical dataset. We throttled Chrome
stable reports to 20%, but other Chromium browsers did not. As a
result, they are over-represented in the dataset relative to reports
from official stable Chrome. By inspecting User-Agent strings from
May 2017 reports that have not yet been anonymized, we believe
that less than 2% of reports come from other Chromium browsers.