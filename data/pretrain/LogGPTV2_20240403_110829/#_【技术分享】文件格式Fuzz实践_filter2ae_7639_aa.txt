# 【技术分享】文件格式Fuzz实践

#### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义请以原文为准。

---

作者：[o0xmuhe](http://bobao.360.cn/member/contribute?uid=32403999)  
预估稿费：300RMB  
投稿方式：发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 0x00 前言
在整理去年的笔记时，我发现了使用Peach进行文件格式Fuzz的笔记。因此，经过整理后，形成了这篇文章，希望能对初学者有所帮助。我认为文件格式Fuzz相对容易上手，所以选择学习Peach来入门。在Willj师傅的指导下，我尝试对某播放器进行了Fuzz测试。尽管没有显著成果，但整个过程还算清晰，并且实现了自动化的Fuzz脚本。虽然效率有待提高，但这个项目还是一个不错的起点。

## 0x01 关于文件格式Fuzz

### 简介
文件格式Fuzz主要针对文件解析过程中的漏洞进行测试。以播放器为例，播放器支持多种视频文件格式（如FLV、MP4、MOV、AVI等）。用户将文件传递给播放器后，播放器会根据文件格式进行解析并处理。如果传入的文件是畸形的或部分结构异常，播放器能否正常工作？是否会进入异常处理或直接崩溃？这些崩溃是否可以被利用？

在我初次接触漏洞挖掘和利用时，遇到的第一个漏洞是某播放器M3U文件的栈溢出。由于缺乏对文件结构的检查，导致数据处理过程中发生栈溢出，从而可执行代码。

### 工具选择
我选择了Peach 2.3.9作为Fuzz工具，因为它用Python编写，有源码可供阅读，使用起来较为方便。Peach是一款优秀的文件格式Fuzz工具，基于模板变异工作，并且开源。尽管文档不多，但通过多摸索和学习，可以掌握其基本用法。我在查阅Peach相关资料时，首先参考了《0day2》中作者提供的示例，从编写pit文件到运行Fuzz；之后又阅读了一篇国际友人写的[Fuzzing with Peach – Part 1 « Flinkd!](http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/)，该文章涵盖了Peach 90%的语法，非常详细，适合新手入门。

## 0x02 pit文件简介

Peach根据提供的模板文件和对应的pit文件，按照pit文件定义的规则解析模板文件并对一些结构进行变异，生成新的文件。如果你的pit文件编写得非常详细，虽然解析速度会较慢，但Fuzz会更加全面。不过，Peach生成的样本可能在执行路径覆盖上不够理想，但由于数量庞大，仍然具有一定的价值。

推荐直接参考官网和一些示例。虽然官网文档较为晦涩，但结合大佬们的pit文件，可以快速上手。以下是对基本结构的简要介绍：

- **DataModel**：定义数据结构的元素，可以在其中指定哪些结构需要Fuzz，哪些不需要。
- **StateModel**：负责管理Fuzz过程的执行流。
- **Agents**：监视Fuzz过程中程序的行为，捕获程序的崩溃信息。
- **Test Block**：将StateModel和Agents等关联到一个单一的测试用例中。
- **Run Block**：定义Fuzz过程中哪些测试会被执行，并记录Agent产生的信息。

### 支持的元素
1. **DataModel**：定义数据块的结构，声明像Number和String等子元素。
2. **Block**：组合一个或多个其他元素，如Number或String。
3. **Choice**：指定任意一个子元素有效，并且只能选择其中一个。
4. **String**：定义单字节或双字节的字符串。
5. **Number**：定义长度为8、16、24、32或64位的二进制数字。
6. **Blob**：定义不明类型的数据。
7. **Flags**：定义一些以位为单位的集合，如标志位。
8. **Relation**：允许数据间的关系建模，例如“X是Y的大小”、“X是Y出现的次数”或“X是Y的偏移”。

更多基础内容，推荐参考看雪的教程[【原创】文件Fuzz教程之一：Peach语法介绍](http://bbs.pediy.com/showthread.php?t=176416)。

## 0x03 文件Fuzz的思路

简单来说，Fuzz的过程包括：
1. 构造输入
2. 传递给目标程序
3. 检测程序状态（是否崩溃）
4. 记录日志
5. 根据日志分析产生崩溃的样本

我的想法是利用Peach基于一个小文件生成大量样本，然后编写自动化脚本来进行Fuzz，并做好异常检测。

假设我们选择Adobe Flash Player SA版本，开始时只做简单的FLV文件Fuzz。以下是面临的问题及解决方案：

### FLV文件格式
FLV文件主要分为Header和Body两部分：
- **Header部分**：
  - 第1-3字节：文件标志，固定为“FLV”（0x46, 0x4C, 0x56）。
  - 第4字节：当前文件版本，固定为1（0x01）。
  - 第5字节：表示是否存在音频和视频（第6和第8位）。
  - 第6-9字节：无符号32位整数，表示从FLV Header到FLV Body的字节数，固定为9（0x00, 0x00, 0x00, 0x09）。

- **Body部分**：
  - 由多个Tag组成，Tag种类有Script、Audio和Video。每种Tag的结构不同，具体可以参考相关文档。

### 编写pit文件
了解文件格式后，接下来是编写pit文件。难点在于Tag结构，因为数目不确定且相互之间有联系。我的做法是使用类似Switch-case的结构，让Peach自己判断选择对应的结构。我编写三种Tag，并限定最大出现次数，Peach根据模板文件的Tag标志找到pit文件中对应的Tag结构，进行变异生成新样本。

### 加载fuzz.flv文件
有了样本后，问题是如何加载样本并播放。Flash不直接打开FLV文件，而是通过SWF加载。因此，需要用ActionScript编写一个SWF来加载FLV文件。每次Fuzz时，复制一个样本到工作目录并重命名，然后启动Flash加载SWF文件，进行后续工作。

### 异常检测
最简单的方法是使用调试器。如果进程崩溃，即时调试器会启动。我们只需检测进程，如果有即时调试器启动，记录日志并杀死所有Fuzz相关进程，继续下一轮Fuzz。这种方法虽然不优雅且效率低，但对于初学者来说是个不错的起点。

## 0x04 编写pit文件

### 1. FLV Header部分
- **第1-3字节**：文件标志，使用String标签。
- **第4字节**：文件版本，整合到第1-3字节中。
- **第5字节**：使用Flags标签。
- **第6-9字节**：使用Number标签。

### 2. Script Tag部分
- 查看Script Tag结构，并对比010 Editor的二进制模板编写相应的XML。

### 3. Audio Tag部分
- 查看Audio Tag结构，并对比模板编写相应的XML。

通过以上步骤，可以实现FLV文件的Fuzz测试。希望这些内容能对你有所帮助。