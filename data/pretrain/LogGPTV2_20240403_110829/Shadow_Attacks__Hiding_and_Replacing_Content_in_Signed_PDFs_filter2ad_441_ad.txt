in Adobe Acrobat,
the signing system is the only system
that contains the private key for digital signing. To sign the
PDF documents, we used the Apache PDFBox library, Adobe
Acrobat Pro 2017, and PDF-Attacker. We created 8 different
exploits for all attack variants and evaluated the manipulations
under all viewing programs on the victims’ systems.
B. Applications
We included PDF viewing applications that could correctly
process signed PDF documents. In total, we found 29 PDF
5https://fontforge.org/docs/scripting/python.html
10
Application
Version
Hide
Shadow Attack Category
Replace
Hide-and-Replace
Summary
Fixed
(Dec. 7th, 2020)
Adobe Acrobat Reader DC
Adobe Acrobat Pro 2017
Expert PDF 14
Foxit Reader
Foxit PhantomPDF
LibreOfﬁce Draw
Master PDF Editor
Nitro Pro
Nitro Reader
PDF Architect 7
PDF Editor 6 Pro
PDFelement
PDF-XChange Editor
Perfect PDF Reader
Perfect PDF 8 Reader
Perfect PDF 10 Premium
Power PDF Standard
Soda PDF Desktop
Adobe Acrobat Reader DC
Adobe Acrobat Pro 2017
Foxit Reader
Foxit PhantomPDF
LibreOfﬁce Draw
Master PDF Editor
PDF Editor 6 Pro
PDFelement
Master PDF Editor
LibreOfﬁce Draw
Okular
2019.021.20061
2017.011.30156
14.0.25.3456 64-bit
9.7.0.29455
9.7.0.29478
6.4.2.2
5.4.38, 64 bit
12.16.3.574
5.5.9.2
7.0.26.3193 64-bit
6.5.0.3929
7.4.0.4670
8.0 (Build 331.0)
V14.0.9 (29.0)
8.0.3.5
10.0.0.1
3.0 (Patch-19154.100)
11.1.09.4184 64-bit
2019.021.20061
2017.011.30156
3.4.0.1012
3.4.0.1012
6.4.2.2
5.4.38, 64 bit
6.8.1.3450
7.5.7.2895
5.4.38, 64 bit
6.4.2.2
1.9.3
s
w
o
d
n
i
W
S
O
c
a
m
x
u
n
i
L
(cid:80) 29
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
16(cid:32) 10(cid:71)(cid:35)
(cid:35) Not vulnerable.
¸
¸
o
¸
¸
¸
o
o
o
¸
o
¸
o
o
o
o
¸
¸
¸
¸
¸
¸
¸
–
–
–
o
¸
o
15¸ 11o
(cid:32) Application vulnerable.
¸ All reported vulnerabilities are ﬁxed.
12(cid:32) 6(cid:71)(cid:35) 16(cid:32) 10(cid:71)(cid:35)
(cid:71)(cid:35) Vulnerability limited.
16(cid:32) 10(cid:71)(cid:35)
o Unﬁxed application.
Table II.
10 CASES, THE APPLICATIONS SHOW THE SAME WARNING FOR AN allowed change (E.G. SIGNING THE DOCUMENT AGAIN) AND A prohibited change (E.G.
EVALUATION RESULTS. OF THE TESTED APPLICATIONS, 16 OUT OF 29 APPLICATIONS ARE VULNERABLE TO AT LEAST ONE ATTACK ((cid:32)). IN
CHANGING CONTENT). WE CALL THIS BEHAVIOR limited vulnerability ((cid:71)(cid:35)).
applications for Windows, macOS, and Linux. Even if the
version numbers do not directly indicate this, the applications
PDF Editor 6 Pro, and PDFelement were released in the latest
available version in January 2020 for macOS and Windows.
a) Excluded Applications: We only considered appli-
cations supporting signature validation. By this means, we
excluded popular Linux PDF applications, such as Evince and
Okular6. For the same reason, we excluded Sumatra (Win-
dows) as well as Preview and Skim (MacOS). We excluded
outdated applications that are no longer maintained by the
manufacturer, for example, Adobe Reader 9 for Linux. We
further excluded online signing services, such as DocuSign
and AdobeSign, because they do not provide a visibility
layer. These services output a report that denotes whether
the PDF signature is valid or invalid. However, it does not
provide any information if the shadow content is shown or not.
Since libraries do not provide the functionality to view PDF
documents, we cannot evaluate the attacks’ success. Thus, we
considered libraries out of scope.
C. Results
Overall, 16 out of 29 PDF viewing applications were
vulnerable to at least one presented attack ((cid:32)) as shown in Ta-
6Due to the chosen Linux distribution, the installed Okular version did not
support signature validation for the time we provided our evaluation. In the
meantime, this support was added. We found multiple vulnerabilities, which
we immediately reported as part of the responsible disclosure process. This
process is not ﬁnished yet.
ble II. For 12 PDF viewers, surprisingly, all three attack classes
were successful. Some applications have limited vulnerabilities
((cid:71)(cid:35)). A limited vulnerability means that the application always
throws a warning, even if a legitimate modiﬁcation, such as
signing the document a second time (e.g., used for contracts).
As a result, users do not differentiate between legitimate
changes and malicious ones, such as revealing the shadow
content.
a) Differences in Operating Systems: While we could
not ﬁnd differences for the Adobe products between Windows
and macOS versions, we identiﬁed signiﬁcant differences in
signature validation of Master PDF Editor, PDF Editor 6
Pro, and PDFelement in these operating systems. No tested
attack on the three viewing applications was successful. The
reason for these differences lies in the different validation
messages shown after opening the signed PDF. On macOS, the
three applications throw a warning stating that the signature
is invalid every time an Incremental Update is detected. In
comparison, on Windows, the viewers show that the signature
is valid and, in some cases, warn that changes have been made.
The different versions of the applications justify another
reason for the divergent results in the operating system’s
dependence. For instance, on Windows, the Foxit Reader has
version 9.7, but on macOS, it has version 3.4. This observation
leads to the assumption that both applications can vary in
the way PDFs are processed. This assumption is conﬁrmed in
Table II. Both applications vary widely regarding the signature
validation, which leads to different results concerning the
11
shadow attacks.
Interestingly, under macOS, Foxit’s appli-
cations have the unique feature that the signature status only
changes from unknown to valid if macOS’s keychain contains
the private key.
b) Hide: The Hide shadow attack class was successful
for 12 PDF viewing applications. For the exploit, the over-
lay image ﬁle was re-declared as /Subtype/XML/Type/Metadata
with /Subtype /Image /Type /XObject when using Incremental
Updates. The Adobe Acrobat applications then faded out the
image ﬁle, but at the same time, the applications conﬁrmed a
valid signature for the PDF document in UI-Layers 1 and 2. A
manually initiated signature check returns the error code 109,
but the signature status remains unaffected.
c) Replace: In total, 16 PDF viewing applications were
vulnerable to the Replace shadow attack class. They split into
two different attack variants: replace via overlay and replace
via overwrite. While Adobe viewers correctly classify the font
exchange as an unauthorized Incremental Update, the signature
remains valid when exchanging ﬁeld text within the form.
We observed the exact opposite case with PDF Editor 6 Pro
and PDFelement. While we could successfully manipulate the
fonts, the signature status changed to invalid when the ﬁeld
content was exchanged. The Foxit Reader showed another
behavior worth mentioning. After the update from version
9.5.0.20723 to 9.7.0.29455, Incremental Updates allow the
exchange of fonts without invalidating the signature. Since
LibreOfﬁce Draw ignores the fonts contained in the PDF
document, the application is immune to this type of attack.
However, it is possible to exchange the ﬁeld text without
invalidating the signature.
d) Hide-and-Replace: In 16 PDF viewing applications,
we could identify Hide-and-Replace vulnerabilities. The two
Adobe viewing applications successfully displayed the content
hidden in the document. In contrast, they displayed the signa-
ture as valid in UI-Layers 1 and 2. A manually started signature
check provides a message about an invalid node within the
page structure data, but the signature status remains unaffected.
e) Responsible Disclosure: According to the evaluation
depicted in Table II, we started the responsible disclosure pro-
cess for 26 vulnerable applications – 16 fully vulnerable and 10
with limited vulnerabilities. We cooperated with CERT-Bund
(BSI) for the responsible disclosure and created a dedicated
vulnerability report. The CERT-Bund thankfully contacted all
affected vendors and also related organisations working with
digitally signed PDFs. Some vendors responded quickly and
informed us that ﬁxes were already implemented (Adobe,
Foxit, LibreOfﬁce, Power PDF, Soda PDF). In some cases, the
vendors contacted us for technical queries. In other cases, we
got a message conﬁrmation but no feedback regarding patches
(Master PDF, Nitro, PDF Architect, PDF-XChange, Power
PDF). In four cases, we could not get any feedback, despite