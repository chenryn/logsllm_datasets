## 试用MotherDuck: DuckDB 的ServerLess/NoServer+Shareable data marketing版云服务     
### 作者                              
digoal                              
### 日期                              
2023-12-30                        
### 标签                              
PostgreSQL , PolarDB , DuckDB , MotherDuck , s3 , serverless , noserver , 数据集市 , shareable data marketing         
----                              
## 背景     
更多用法请参考motherduck手册    
- https://motherduck.com/docs/intro    
[《期望未来DuckDB的架构演变方向》](../202311/20231130_04.md)  里说到了serverless的演进方向, 想不到已经有了motherduck这样的产品.      
计算可以在motherduck完成, 也可以在本地完成, 数据可以存储在本地也可以存储在远程. 甚至可以通过创建shared数据快照将数据共享给其他人. 俨然是一个serverless/noserver版的数据分析集市.    
分享数据: https://motherduck.com/docs/key-tasks/managing-shared-motherduck-database/  
```
Create a SHARE
Retrieve a URL
Send the URL to your colleague
```
挂载并查询别人分享的数据: https://motherduck.com/docs/key-tasks/querying-a-shared-motherduck-database  
```
An attached shared database behaves just like a read-only database in every way.
ATTACH '' [AS ];
ATTACH 'md:_share/sample_data/23b0d623-1361-421d-ae77-62d701d471e6';
USE sample_data;
```  
## 准备    
1、使用最强学习镜像    
-[《2023-PostgreSQL Docker镜像学习环境 ARM64版, 已集成热门插件和工具》](../202308/20230814_02.md)         
-[《2023-PostgreSQL Docker镜像学习环境 AMD64版, 已集成热门插件和工具》](../202307/20230710_03.md)        
2、你需要1个github账号    
3、进入容器    
```    
docker exec -ti pg bash    
su - postgres    
```    
## 试用motherduck    
1、启动duckdb 0.9.2 及以上版本    
```    
./duckdb     
v0.9.2 3c695d7ba9    
Enter ".help" for usage hints.    
Connected to a transient in-memory database.    
Use ".open FILENAME" to reopen on a persistent database.    
```    
2、打开motherduck    
```    
D .open md:    
1. Please open this link to login into your account: https://auth.motherduck.com/activate    
2. Enter the following code: xxxx-xxxx    
```    
3、下载sdk并激活motherduck    
- 在电脑中使用chrome浏览器打开 : https://auth.motherduck.com/activate    
- 输入 : xxxx-xxxx     
- 根据提示注册motherduck账号, 我这里关联到1个github账号.     
成功. 你以后可以在启动`duckdb`前执行`export motherduck_token=....`, 避免每次`.open md:`都要做一次认证.      
```    
Token successfully retrieved ✅    
You can store it as an environment variable to avoid having to log in again:    
  $ export motherduck_token='xx.....xxx'    
```    
4、列出的是在motherduckl里面的数据库    
```    
D show databases;    
┌───────────────┐    
│ database_name │    
│    varchar    │    
├───────────────┤    
│ my_db         │    
│ sample_data   │    
└───────────────┘    
```    
5、查询存储在motherduck服务里的数据    
```    
D SELECT    
>    passenger_count,    
>    avg(total_amount)    
> -- reading from shared sample database    
> FROM sample_data.nyc.taxi    
> GROUP BY passenger_count    
> ORDER by passenger_count;    
┌─────────────────┬────────────────────┐    
│ passenger_count │ avg(total_amount)  │    
│     double      │       double       │    
├─────────────────┼────────────────────┤    
│             0.0 │ 20.271222848458628 │    
│             1.0 │ 21.225624974276688 │    
│             2.0 │  24.09675238862258 │    
│             3.0 │  23.21117216536006 │    
│             4.0 │ 24.267935907713383 │    
│             5.0 │  21.02734475294877 │    
│             6.0 │ 21.519300095288067 │    
│             7.0 │  76.26999999999998 │    
│             8.0 │  61.56470588235294 │    
│             9.0 │  75.68666666666667 │    
│                 │  29.30373481034481 │    
├─────────────────┴────────────────────┤    
│ 11 rows                    2 columns │    
└──────────────────────────────────────┘    
```    
6、查询存储在s3里的数据    
```    
D SET s3_region='us-east-1';    
D .timer on    
D SELECT    
>    passenger_count,    
>    avg(total_amount)    
> -- reading from AWS S3 parquet files    
> FROM read_parquet('s3://us-prd-motherduck-open-datasets/nyc_taxi/parquet/yellow_cab_nyc_2022_11.parquet')    
> GROUP BY passenger_count    
> ORDER by passenger_count;    
┌─────────────────┬────────────────────┐    
│ passenger_count │ avg(total_amount)  │    
│     double      │       double       │    
├─────────────────┼────────────────────┤    
│             0.0 │ 20.271222848458628 │    
│             1.0 │ 21.225624974276013 │    
│             2.0 │ 24.096752388622424 │    
│             3.0 │  23.21117216536007 │    
│             4.0 │ 24.267935907713316 │    
│             5.0 │  21.02734475294876 │    
│             6.0 │ 21.519300095288088 │    
│             7.0 │  76.27000000000001 │    
│             8.0 │  61.56470588235294 │    
│             9.0 │  75.68666666666667 │    
│                 │  29.30373481034313 │    
├─────────────────┴────────────────────┤    
│ 11 rows                    2 columns │    
└──────────────────────────────────────┘    
Run Time (s): real 1.709 user 1.025378 sys 0.000000    
D select count(*) FROM read_parquet('s3://us-prd-motherduck-open-datasets/nyc_taxi/parquet/yellow_cab_nyc_2022_11.parquet');    
┌──────────────┐    
│ count_star() │    
│    int64     │    
├──────────────┤    
│      3252717 │    
└──────────────┘    
Run Time (s): real 1.361 user 0.726456 sys 0.000000    
```    
7、从explain 结果来看使用的motherduck的算力而非本地算力`(L)表示本地运行, (R)表示远程即motherduck端运行.`:    
```    
D explain SELECT    
>    passenger_count,    
>    avg(total_amount)    
> FROM sample_data.nyc.taxi    
> GROUP BY passenger_count    
> ORDER by passenger_count;    
┌─────────────────────────────┐    
│┌───────────────────────────┐│    
││       Physical Plan       ││    
│└───────────────────────────┘│    
└─────────────────────────────┘    
┌───────────────────────────┐    
│    DOWNLOAD_SOURCE (L)    │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│        bridge_id: 1       │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│  BATCH_DOWNLOAD_SINK (R)  │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│        bridge_id: 1       │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│        ORDER_BY (R)       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│          ORDERS:          │    
│  taxi.passenger_count ASC │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│     HASH_GROUP_BY (R)     │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│             #0            │    
│          avg(#1)          │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│       PROJECTION (R)      │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│      passenger_count      │    
│        total_amount       │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│       SEQ_SCAN  (R)       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│            taxi           │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│      passenger_count      │    
│        total_amount       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    