title:Securing Parallel-chain Protocols under Variable Mining Power
author:Xuechao Wang and
Viswa Virinchi Muppirala and
Lei Yang and
Sreeram Kannan and
Pramod Viswanath
Securing Parallel-chain Protocols under Variable Mining Power
Xuechao Wang
University
of Illinois Urbana-Champaign
USA
PI:EMAIL
Viswa Virinchi Muppirala
University of Washington at Seattle
USA
PI:EMAIL
Lei Yang
MIT CSAIL
USA
PI:EMAIL
Sreeram Kannan
University of Washington at Seattle
USA
PI:EMAIL
Pramod Viswanath
University
of Illinois Urbana-Champaign
USA
PI:EMAIL
ABSTRACT
Several emerging proof-of-work (PoW) blockchain protocols rely on
a “parallel-chain” architecture for scaling, where instead of a single
chain, multiple chains are run in parallel and aggregated. A key re-
quirement of practical PoW blockchains is to adapt to mining power
variations over time (Bitcoin’s total mining power has increased by
a 1014 factor over the decade). In this paper, we consider the design
of provably secure parallel-chain protocols which can adapt to such
mining power variations.
The Bitcoin difficulty adjustment rule adjusts the difficulty target
of block mining periodically to get a constant mean inter-block time.
While superficially simple, the rule has proved itself to be sophisti-
cated and successfully secure, both in practice and in theory [11, 13].
We show that natural adaptations of the Bitcoin adjustment rule
to the parallel-chain case open the door to subtle, but catastrophic
safety and liveness breaches. We uncover a meta-design principle
that allow us to design variable mining difficulty protocols for three
popularPoWblockchainproposals(Prism[3], OHIE[27],Fruitchains
[21]) inside a common rubric.
The principle has three components: (M1) a pivot chain, based
on which blocks in all chains choose difficulty, (M2) a monotonicity
condition for referencing pivot chain blocks and (M3) translating
additional protocol aspects from using levels (depth) to using “dif-
ficulty levels”. We show that protocols employing a subset of these
principles may have catastrophic failures. The security of the designs
is also proved using a common rubric – the key technical challenge
involves analyzing the interaction between the pivot chain and the
other chains, as well as bounding the sudden changes in difficulty tar-
get experienced in non-pivot chains. We empirically investigate the
responsivity of the new mining difficulty rule via simulations based
Correspondence can be sent to ksreeram@uw.edu.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or
a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485254
on historical Bitcoin data, and find that the protocol very effectively
controls the forking rate across all the chains.
CCS CONCEPTS
• Security and privacy → Distributed systems security.
KEYWORDS
Proof-of-Work; Parallel-chain; Security Analysis
ACM Reference Format:
Xuechao Wang, Viswa Virinchi Muppirala, Lei Yang , Sreeram Kannan, and
Pramod Viswanath. 2021. Securing Parallel-chain Protocols under Variable
MiningPower.In Proceedings of the 2021 ACM SIGSAC Conference on Computer
and Communications Security (CCS’21), November 15–19, 2021, Virtual Event,
Republic of Korea.ACM,NewYork,NY,USA,22pages.https://doi.org/10.1145/
3460120.3485254
1 INTRODUCTION
Scaling problem. Built on the pioneering work of Nakamoto, Bit-
coin [18] is a permissionless blockchain operating on proof-of-work
based on the Nakamoto protocol. The Nakamoto longest-chain pro-
tocol was proven to be secure as long as the adversary controlled less
than 50% of the mining power in the breakthrough work [11]. Recent
works [9, 15, 24] have tried to improve the scalability of Bitcoin [5, 7],
in particular the throughput and latency, by redesigning the core
consensus protocol. A variety of approaches have been proposed, for
example hybrid consensus algorithms [14, 17, 22, 23] try to convert
the permissionless problem into a permissioned consensus prob-
lem by subselecting a set of miners from a previous epoch. While
such approaches achieve scalability, they are not natively proof-
of-work (PoW) and hence do not retain the dynamic availability,
unpredictability and security against adaptive adversaries that the
Nakamoto longest chain protocol enjoys.
Parallel-chain protocols. An emerging set of proof-of-work pro-
tocols maintain the native PoW property of Bitcoin and achieve
provable scaling by using many parallel chains. The chains run in
parallel and use an appropriate aggregation rule to construct an
ordered ledger of transactions out of the various parallel chains.
We will highlight three examples of parallel-chain protocols (PCP):
(1) Prism [3], which achieves high-throughput and low-latency us-
ing a proposer chain and many voter chains, (2) OHIE [27], which
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1700achieves high-throughput using parallel chains and (3) FruitChains
[21], which achieves fairness using two distinct types of blocks
(blocks and fruits) mined in parallel. There are other approaches
such as ledger combiners [10], which achieve some of the same goals
using different architectures.
Common structure of PCP. In all of these parallel-chain protocols
(PCP), there are multiple types of blocks (for example, in OHIE, each
type may correspond to a different chain) and we determine the
final type only after mining the block - we will term this process
as hash sortition. The idea of sortition was first formalized in [11]
called 2-for-1 PoW. All three PCPs adopt this technique to achieve
parallel mining. A miner creates a single commitment (for example, a
Merkle root) to the potential version of the different block types and
performs a mining operation. Depending on the region the hash falls,
the block is considered mined of a certain type. Different protocols
utilize different types of aggregation rules and semantics in order
to consider the final ledger out of these parallel chains.
Variable mining power problem. A key requirement of deployed
PoW blockchains is to adapt to the immense variation in mining
power. For example, the mining power of Bitcoin increased exponen-
tiallybyanastonishingfactorof1014 duringitsdecadeofdeployment.
If Bitcoin had continued to use the same difficulty for the hash puz-
zle, then the inter-block time would have fallen from the original
10 minutes to 6 picoseconds. Such a drop would have caused an
intolerable forking rate and seriously undermined the security of
Bitcoin, lowering the tolerable adversarial mining power from nearly
50% to 10−11. However, this is prevented by adjusting the difficulty
threshold of Bitcoin using a difficulty adjustment algorithm.
Bitcoin difficulty adjustment algorithm. There are three core
ideas to the Bitcoin difficulty adjustment algorithm: (a) vary the
difficulty target of block mining based on the median inter-block
time from the previous epoch (of 2016 blocks), (b) use the heaviest
chain (calculated by the sum of the block difficulties) instead of the
longest chain to determine the ledger, and (c) allow the difficulty to
be adjusted only mildly every epoch (by an upper bound of a factor of
4). While this appears to be a simple and intuitive algorithm, minor
seemingly-innocuous variants turn out to be dangerously insecure.
Difficulty adjustment terminology. Throughout the paper, we
call the hash puzzle threshold in PoW mining the target of a block.
The block difficulty of each block is measured in terms of how many
times the block is harder to obtain than using the initial target of the
systemthatisembeddedinthegenesisblock.However,forsimplicity,
we will adapt the notation of block difficulty to be the inverse of the
target of the block. The chain difficulty of a chain is the sum of block
difficultiesofallblocksthatcomprisethechain,theneachblockinthe
chain covers an interval of chain difficulty. The chain with the largest
chain difficulty is said to be the heaviest chain. We also refer the
chain difficulty of a block as the chain difficulty of the chain ending
at this block. This notation is summarised in the following table.
Target
Threshold of the hash puzzle in PoW mining
Inverse of the target of a block
Block difficulty
Sum of block difficulties of all blocks in the
Chain difficulty
chain
Difficulty adjustment requires nuanced design.Considerasim-
pler algorithm using only (b), i.e., simply let the nodes choose their
own difficulty and then use (b) the heaviest chain rule. At a first
glance, this rule appears kosher - the heaviest chain rule seems
to afford no advantage to any node to manipulate their difficulty.
However, this lack of advantage only holds in expectation, and the
variance created by extremely difficult adversarial blocks can thwart
a confirmation rule that confirms deeply-embedded blocks, no mat-
ter how deep, with non-negligible probability proportional to the
attacker’s mining power (refer to Appendix A for a detailed discus-
sion). Now consider a more detailed rule involving only (a) and (b). It
turns out that there is a difficulty raising attack (refer to Appendix A
for a detailed discussion), where the adversary creates an epoch
filled with timestamps extremely close-together, so that the diffi-
culty adjustment rule from (a) will set the difficulty extremely high
for the next epoch, at which point, the adversary can utilize the high
variance of the mining similar to the aforementioned attack. This
more complex attack is only thwarted using the full protocol that
employs (a), (b) and (c) together. The full proof of the Nakamoto
heaviest chain protocol was obtained in a breakthrough work [12].
Difficulty adjustment in PCP. When there are multiple parallel-
chains, one natural idea is to apply Bitcoin’s difficulty adjustment
algorithm to each of the chains independently. However, this idea
does not integrate well with hash sortition since the range of a par-
ticular chain will depend on the state of other chains. Instead, since
the mining power variation is the same across all chains, a natural
approach is to use the same difficulty threshold across all chains,
which is then modulated based on past evidence. How should this
common difficulty threshold be chosen? One approach is to utilize
inter-block arrival times across all the chains to get better statistical
averaging and respond faster to mining power variation. However, it
requires some sort of synchronization across the chains and breaks
the independence assumption.
General methodology. We propose a general methodology by
which to adapt parallel-chain architectures to the variable mining
rate problem. Our general methodology is comprised of three parts,
as detailed below.
• M1: Pivot-chain. Use a single chain as the pivot chain for
difficulty adjustment. Blocks mined in any other chain need
to refer to a block in the pivot chain and use the target inferred
therefrom.
• M2: Monotonicity. In a non-pivot chain, blocks can only
refer to pivot-chain blocks of non-decreasing chain difficulty.
• M3: Translation. Wherever the protocol uses the concept
of a block’s level, it is updated to refer to the block’s chain
difficulty instead.
Using M1 pivot-chain for difficulty adjustment ensures that we can
continue to use the hash-sortition method. The M2 monotonicity
rule ensures that blocks in non-pivot chain do not refer to stale/old
pivot blocks with target which is very different from expected in the
present round. Finally, the M3 translation rule ensures that other
aspects of the protocol, such as the confirmation rule are adapted
correctly to deal with the variable difficulty regime correctly. We
show in Section 3 why each of the three aspects of our methodol-
ogy is critical in designing variable difficulty for Prism by showing
attacks for subsets of M1,M2, and M3.
On the positive side, we show a concrete adaptation of our general
methodology to various schemes, in particular to Prism in Section 3,
to OHIE in Section 4 and to FruitChains in Section 5.
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1701Securityproofs.Theproblemofanalyzingthedifficultyadjustment
mechanism in Bitcoin was first addressed in [12] in the lock-step
synchronous communication model. It introduces a setting where
the number of participating parties’ rate of change in a sequence of
rounds is bounded but follows a predetermined schedule. Later two
concurrent works [6, 13] analyzed the problem in a bounded-delay
network with an adaptive (as opposed to predetermined) dynamic
participation, with different proof techniques. Following the two
later papers, we adopts the more general network and adversary
models: we assume a ∆-synchronous communication model, where
every message that is received by a honest node is received by all
other honest nodes within ∆ rounds; we allow the adversary to con-
trol the mining rate even based on the stochastic realization of the
blockchain, as long as the mining rate does not change too much
in a certain period of time. We assume that the adversarial nodes
are Byzantine and they do not act rationally. Under this general
model, we establish that our proposed modification to Prism, OHIE
and FruitChains satisfy the dual security properties of safety and
liveness. The proofs require a new understanding of how difficulty
evolution in a non-pivot chain progresses based on the difficulty
in the pivot chain - this statistical coupling presents a significant
barrier to surmount in our analysis, and differs from previous work
in this area. We show these results in Section 6.
Systems implementation. Our variable difficulty scheme does not
add significant computation and communication overhead on exist-
ing parallel-chain protocols, making our protocol an easy upgrade.
We conduct extensive simulation studies to examine how our sys-
temsrespondtovaryingminingpower.Resultsshowthatourscheme
is able to closely match the system mining power and the mining
difficulty for each individual chain, thus keeping the chain forking
rate stable. We examine adversarial behavior and how it can influ-
ence the difficulties of various chains, and confirm that our scheme is
secure against significant adversarial presence. The simulations are
based on historical Bitcoin mining power data and parameters col-
lected from real-world experiments of the Prism [26] parallel-chain
protocol, making the insights meaningful for real-world systems.
Other related works. A recently proposed blockchain protocol
Taiji [16] combines Prism with a BFT protocol to construct a dy-
namically available PoW protocol which has almost deterministic
confirmation with low latency. Since Taiji inherits the parallel-chain
structure from Prism, our meta-principles will also apply. The vul-
nerability of selfish mining has recently been discussed on several
existing blockchain projects with variable difficulty in [19]. Our pro-
posed variable difficulty FruitChains protocol guarantees fairness
of mining, thus disincentivizes selfish mining.
2 MODEL
Synchronous network. We describe our protocols in the now-
standard ∆-synchronous network model considered in [2, 13, 20] for
the analysis of proposed variable difficulty protocols, where there is
an upper bound ∆ in the delay (measured in number of rounds) that
the adversary may inflict to the delivery of any message. Observe
that notion of “rounds” still exist in the model (since we consider dis-
cretized time), but now these are not synchronization rounds within
which all messages are supposed to be delivered to honest parties.
Similar to [13, 20], the protocol execution proceeds in “round”
with inputs provided by an environment program denoted byZ(1κ)
to parties that execute the protocol Π, whereκ is a security parameter.
The adversary A is adaptive, and allowed to take control of parties
on the fly, as well as “rushing”, meaning that in any given round the
adversarygetstoobservehonestparties’actionsbeforedecidinghow
toreact.Thenetworkismodeledasadiffusionfunctionalitysimilarto
thosein[13,20]:itallowsorderofmessagestobecontrolledbyA,i.e.,
A can inject messages for selective delivery but cannot change the
contentsofthehonestparties’messagesnorpreventthemfrombeing
delivered beyond ∆ rounds of delay — a functionality parameter.
Random oracle. We abstract the hash function as a random or-
acle functionality. It accepts queries of the form (compute,x) and
(verify, x,y). For the first type of query, assuming x was never
queried before, a value y is sampled from {0,1}κ and it is entered to
a table TH . If x was queried before, the pair (x,y) is recovered from
TH . In both cases, the value y is provided as an answer to the query.
For the second type of query, a lookup operation is performed on
the table. Honest parties are allowed to ask one query per round
of the type compute and unlimited queries of the type verify. The
adversary A is given a bounded number of compute queries per
round and also unlimited number of verify queries. The bound
for the adversary is determined as follows. Whenever a corrupted
party is activated the bound is increased by 1; whenever a query is
asked the bound is decreased by 1 (it does not matter which specific
corrupted party makes the query).
Adversarial control of variable mining power. We assume no
rational node in the adversarial model. The adversary can decide
on the spot how many honest parties are activated adaptively. In a
round r, the number of honest parties that are active in the protocol
is denoted by nr and the number of corrupted parties controlled by
A in round r is denoted by tr . Note that nr can only be determined