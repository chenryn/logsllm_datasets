[18] Chromium.
Issue 456192 and CVE-2015-1217.
https://bugs.chromium.org/p/chromium/issues/
detail?id=456192, 2016.
Issue 449610 and CVE-2015-1230.
https://bugs.chromium.org/p/chromium/issues/
detail?id=449610, 2016.
Issue 497632 and CVE-2016-1612.
https://bugs.chromium.org/p/chromium/issues/
detail?id=497632, 2016.
[19] Chromium.
https://chromium.googlesource.com/chromium/
src.git/+/56.0.2915.0.
[14] Chromium. Security faq.
https://www.chromium.
org/Home/chromium-security/security-faq.
[15] Chromium. Side by side diff for issue 196343011.
https://codereview.chromium.org/196343011/
diff/20001/Source/bindings/templates/
attributes.cpp, 2016.
[16] Chromium.
Issue 395411 and CVE-2014-3199.
https://bugs.chromium.org/p/chromium/issues/
detail?id=395411, 2016.
[17] Chromium.
[20] Chromium. Issue 603748. https://bugs.chromium.
org/p/chromium/issues/detail?id=603748, 2016.
[21] Chromium. Issue 603725. https://bugs.chromium.
org/p/chromium/issues/detail?id=603725, 2016.
[22] Chromium.
Out-of-process
iframes.
https:
//www.chromium.org/developers/design-
documents/oop-iframes, 2016.
[23] Chromium.
Issue 671488: Hard crash in webkit cus-
tomelement bindings. https://bugs.chromium.org/
p/chromium/issues/detail?id=671488, 2016.
[24] Chromium. Issue 679643: Security: Use after free in
pdﬁum’s annot::name. https://bugs.chromium.org/
p/chromium/issues/detail?id=679643, 2017.
[25] Chromium. Issue 679642: Security: Use after free in
pdﬁum’s ﬁeld::page. https://bugs.chromium.org/p/
chromium/issues/detail?id=679642, 2017.
[26] D. Crockford. ADsafe: Making JavaScript safe for ad-
vertising. http://www.adsafe.org, 2008.
[27] W. De Groef, F. Massacci, and F. Piessens. Node-
sentry: least-privilege library integration for server-side
javascript. In ACSAC, Dec. 2014.
[28] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman,
M. Bailey, F. Li, N. Weaver, J. Amann, J. Beekman,
M. Payer, et al. The matter of Heartbleed. In IMC, Nov.
2014.
[29] C. Ellison and G. Rosu. An executable formal semantics
of C with applications. In POPL, Jan. 2012.
[30] B. English. <=v4: process.hrtime() segfaults on ar-
rays with error-throwing accessors. https://github.
com/nodejs/node/issues/7902.
[31] Express. Benchmarks run.
https://github.com/
expressjs/express/blob/master/benchmarks/
run.
[32] A. P. Felt, J. Weinberger, L. Zhang, N. Oskov, and
D. Cronin. Private communication, March 2017.
[33] E. F. Foundation. HTTPS everywhere. https://www.
576
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
eff.org/https-everywhere, 2017.
[34] M. Furr and J. S. Foster. Checking type safety of foreign
function calls. In PLDI, June 2005.
[35] M. Furr and J. S. Foster. Polymorphic type inference for
the JNI. In ESOP, Mar. 2006.
network/#697cbff41bca.
[52] G. Kondoh and T. Onodera. Finding bugs in Java native
interface programs. In Symposium on Software Testing
and Analysis, Apr. 2008.
[53] A. Larmuseau and D. Clarke. Formalizing a secure for-
[36] gcc.
Declaring attributes of functions.
https:
eign function interface. In SEFM, Sept. 2015.
//gcc.gnu.org/onlinedocs/gcc/Function-
Attributes.html.
[37] M. Hablich. API changes upcoming to make writing ex-
ception safe code more easy. https://groups.google.
com/forum/#!topic/v8-users/gQVpp1HmbqM.
[38] I. Haller, Y. Jeon, H. Peng, M. Payer, C. Giuffrida,
H. Bos, and E. van der Kouwe. TypeSan: Practical type
confusion detection. In ACM CCS, Oct. 2016.
[39] K. Hara.
Oilpan: GC for Blink.
https:
//docs.google.com/presentation/d/
1YtfurcyKFS0hxPOnC3U6JJroM8aRP49Yf0QWznZ9jrk,
2016.
[40] J. Harrell. Node.js at PayPal. https://www.paypal-
engineering.com/2013/11/22/node-js-at-
paypal/, November 22 2013.
[41] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. JS-
Flow: Tracking information ﬂow in JavaScript and its
APIs. In ACM SAC, Apr. 2014.
[42] S. Heule, D. Stefan, E. Z. Yang, J. C. Mitchell, and
A. Russo. IFC inside: Retroﬁtting languages with dy-
namic information ﬂow control. In POST, Apr. 2015.
[43] M. Hicks. What is memory safety? http://www.pl-
enthusiast.net/2014/07/21/memory-safety/,
2014.
[44] M. Hirzel and R. Grimm. Jeannie: Granting Java native
interface developers their wishes. In ACM SIGPLAN
Notices, volume 42:10, 2007.
[45] C. Hritcu, M. Greenberg, B. Karel, B. C. Pierce, and
G. Morrisett. All your IFCException are belong to us.
In IEEE S&P, May 2013.
[46] N. Jagpal, E. Dingle, J.-P. Gravel, P. Mavrommatis,
N. Provos, M. A. Rajab, and K. Thomas. Trends and
lessons from three years ﬁghting malicious extensions.
In USENIX Security, Aug. 2015.
[47] D. Jang, Z. Tatlock, and S. Lerner. Establishing browser
security guarantees through formal shim veriﬁcation. In
USENIX Security, Aug. 2012.
[48] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vi-
gna, and V. Paxson. Hulk: Eliciting malicious behavior
in browser extensions. In USENIX Security, Aug. 2014.
[49] P. Klinkoff, E. Kirda, C. Kruegel, and G. Vigna. Ex-
tending .NET security to unmanaged code. Journal of
Information Security, 6(6):417–428, 2007.
[50] N. Kobeissi, K. Bhargavan, and B. Blanchet. Automated
veriﬁcation for secure messaging protocols and their im-
plementations: A symbolic and computational approach.
In IEEE EuroS&P, Apr. 2017.
[51] J. Koetsier. Ad Block Plus is now...an ad network.
https://www.forbes.com/sites/johnkoetsier/
2016/09/13/adblock-plus-is-now-an-ad-
577
[54] C. Lattner and V. Adve. LLVM: A compilation frame-
work for lifelong program analysis & transformation. In
CGO, Mar. 2004.
[55] B. Lee, B. Wiedermann, M. Hirzel, R. Grimm, and K. S.
McKinley. Jinn: synthesizing dynamic bug detectors for
foreign language interfaces. In ACM SIGPLAN Notices,
volume 45:6, 2016.
[56] S. Li and G. Tan. Finding bugs in exceptional situations
of JNI programs. In ACM CCS, Nov. 2009.
[57] S. Li and G. Tan. Finding reference-counting errors in
Python/C programs with afﬁne analysis. In ECOOP, July
2014.
[58] P. Linos, W. Lucas, S. Myers, and E. Maier. A metrics
tool for multi-language software. In SEA, Nov. 2007.
[59] S. Maffeis, J. C. Mitchell, and A. Taly. An operational
semantics for javascript. In APLAS, Dec. 2008.
[60] P. Marchenko, Ú. Erlingsson, and B. Karp. Keeping sen-
sitive data in browsers safe with ScriptPolice. Technical
report, UCL, 2013.
[61] J. Matthews and R. B. Findler. Operational semantics for
multi-language programs. TOPLAS, 31(3):1–44, 2009.
[62] C. McCormack. Web IDL. World Wide Web Consortium,
2012.
[63] L. A. Meyerovich and B. Livshits. ConScript: Speci-
fying and enforcing ﬁne-grained security policies for
JavaScript in the browser. In IEEE S&P, May 2010.
[64] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic.
Softbound: Highly compatible and complete spatial
memory safety for c. In ACM SIGPLAN Notices, volume
44:6, 2009.
[65] G. C. Necula, S. McPeak, and W. Weimer. CCured:
Type-safe retroﬁtting of legacy code. In ACM SIGPLAN
Notices, volume 37:1, 2002.
[66] nodeBenchmarks.
Node.js
core
benchmarks.
https://github.com/nodejs/node/tree/master/
benchmark.
[67] Node.js.
Canary in the Gold Mine.
https://
developers.google.com/v8/embed, .
[68] Node.js. Node.js helps NASA keep astronauts safe
and data accessible. https://nodejs.org/static/
documents/casestudies/Node_CaseStudy_Nasa_
FNL.pdf, .
[69] Node.js. Node.js benchmarking branch.
https://
github.com/nodejs/node/tree/master/benchmark,
.
[70] Node.js. Node.js on ChakraCore. https://github.
com/nodejs/node-chakracore.
[71] Node.js. Node.js CITGM lookup list. https://github.
com/nodejs/citgm/blob/master/lib/lookup.json,
.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
[72] Node.js.
Canary in the Gold Mine – node.js
https://github.com/nodejs/citgm/blob/
7.0.0.
2434cceb09f2e7966cfdf70b523e0bea57be9598/
lib/lookup.json, .
[73] Node.js security working group. What is/is not a “vul-
https://github.com/
nerability”/“security issue”?
nodejs/security-wg/issues/18.
[74] B. Noordhuis.
remove
src:
methods.
unneeded
https:
error
environment
//github.com/nodejs/node/commit/
0e6c3360317ea7c5c7cc242dfb5c61c359493f34.
shrinkwrap-allows-remote-code-execution-
63e6e0a566a7#.e7an55fo2, .
[92] D. Stefan. Buffer.fill has an out of bounds (arbitrary)
memory write. https://github.com/nodejs/node/
issues/9149, 2016.
[93] D. Stefan. Buffer::Length hard crashes. https://
github.com/nodejs/node/issues/11954, 2017.
[94] D. Stefan, E. Z. Yang, P. Marchenko, A. Russo, D. Her-
man, B. Karp, and D. Mazieres. Protecting users by
conﬁning JavaScript with COWL. In OSDI, Oct. 2014.
[95] StrongLoop/IBM. Express—Node.js web application
[75] NPM. Package install scripts vulnerability. https:
framework. https://expressjs.com.
//blog.npmjs.org/post/141702881055/package-
install-scripts-vulnerability.
[76] T. npm Blog.
https:
//blog.npmjs.org/post/141577284765/kik-left-
pad-and-npm.
left-pad, and npm.
kik,
[77] D. Park, A. Stefanescu, and G. Rosu. KJS: a complete
formal semantics of JavaScript. In PLDI, June 2015.
[78] J. T. Perconti and A. Ahmed. Verifying an open compiler
using multi-language semantics. In ESOP, Apr. 2014.
[79] B. C. Pierce. Types and programming languages. MIT
Press, 2002.
[80] J. G. Politz, M. J. Carroll, B. S. Lerner, J. Pombrio, and
S. Krishnamurthi. A tested semantics for getters, setters,
and eval in javascript. In ACM SIGPLAN Notices, volume
48:2, 2013.
[81] A. Ranganathan, J. Sicking, and M. Kruisselbrink. File
API. World Wide Web Consortium, 2015.
[82] R. Rogowski, M. Morton, F. Li, K. Z. Snow, F. Monrose,
and M. Polychronakis. Revisiting browser security in
the modern era: New data-only attacks and defenses. In
IEEE EuroS&P, Apr. 2017.
[83] S. Saccone.
npm hydra worm disclosure.
https:
//www.kb.cert.org/CERT_WEB/services/vul-
notes.nsf/6eacfaeab94596f5852569290066a50b/
018dbb99def6980185257f820013f175/$FILE/
npmwormdisclosure.pdf.
[84] G. A. Security. Severity guidelines for security is-
sues. https://sites.google.com/a/chromium.org/
dev/developers/severity-guidelines.
[85] T. Sepez. Private communication, March 2017.
[86] R. Shtylman.
bcrypt.
https://www.npmjs.com/
package/bcrypt.
[87] J. Siefers, G. Tan, and G. Morrisett. Robusta: Taming
the native beast of the JVM. In ACM CCS, Oct. 2010.
[88] J. G. Siek and W. Taha. Gradual typing for functional
In Scheme and Functional Programming
languages.
Workshop, Sept. 2006.
[89] J. G. Siek and W. Taha. Gradual typing for objects. In
ECOOP, July 2007.
[90] D. Stefan.
spawnSync’s SyncProcessRunner::
getter.
segfaults with
CopyJsStringArray
https://github.com/nodejs/node/issues/9821, .
npm shrinkwrap allows remote code
https://hackernoon.com/npm-
[91] D. Stefan.
execution.
bad
[96] A. Systems. JavaScript for Acrobat api reference. http:
//wwwimages.adobe.com/content/dam/Adobe/en/
devnet/acrobat/pdfs/js_api_reference.pdf.
[97] A. Takikawa, D. Feltey, B. Greenman, M. S. New,
J. Vitek, and M. Felleisen. Is sound gradual typing dead?
In POPL, Jan. 2016.
[98] G. Tan. JNI Light: An operational model for the core
JNI. In APLAS, Nov. 2010.
[99] G. Tan and J. Croft. An empirical security study of the
native code in the JDK. In USENIX Security, July 2008.
[100] G. Tan and G. Morrisett. ILEA: Inter-language analysis
across Java and C. In ACM SIGPLAN Notices, volume
42:10, 2007.
[101] G. Tan, A. W. Appel, S. Chakradhar, A. Raghunathan,
S. Ravi, and D. Wang. Safe Java native interface. In
Secure Software Engineering, volume 97, 2006.
[102] S. Tang, H. Mai, and S. T. King. Trust and protection
in the illinois browser operating system. In OSDI, Oct.
2010.
[103] K. Thomas, E. Bursztein, C. Grier, G. Ho, N. Jag-
pal, A. Kapravelos, D. McCoy, A. Nappa, V. Paxson,
P. Pearce, et al. Ad injection at scale: Assessing decep-
tive advertisement modiﬁcations. In IEEE S&P, May
2015.
[104] V. Trifonov and Z. Shao. Safe and principled language
interoperation. In ESOP, Mar. 1999.
[105] V8.
Getting started with embedding.
https:
//github.com/v8/v8/wiki/Getting%20Started%
20with%20Embedding.
[106] walmart. Walmart. https://www.walmart.com, 2016.
[107] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choud-
hury, and H. Venter. The multi-principal OS construction
of the Gazelle Web Browser. In USENIX Security, Aug.
2009.
[108] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Or-
mandy, S. Okasaka, N. Narula, and N. Fullagar. Native
Client: A sandbox for portable, untrusted x86 native code.
In IEEE S&P, May 2009.
[109] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-
preserving browser-side scripting with BFlow. In Eu-
roSys. ACM, Apr. 2009.
[110] C. Zapponi. Programming languages and GitHub. http:
//githut.info/.
578
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply.