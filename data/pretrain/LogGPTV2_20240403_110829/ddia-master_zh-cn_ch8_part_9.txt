### 安全属性与活性属性的对比

当安全属性被破坏时，我们可以确定具体的时间点（例如，如果唯一性属性被违反，可以明确指出重复的安全令牌是何时生成的）。一旦安全属性遭到破坏，这种损害无法逆转——损失已经造成。相比之下，活性属性在某一时刻可能不成立，但始终期望在未来某个时间点能够实现（比如，一个节点发送请求后尚未收到响应，但希望最终能接收到答复）。

区分这两种属性的一个优势在于它有助于处理复杂的系统模型。对于分布式算法而言，通常要求无论在何种情况下，**必须始终保持**安全属性【88】。这意味着即使所有节点崩溃或整个网络瘫痪，算法仍需确保不会产生错误的结果。然而，对于活性属性，则需要考虑一些附加条件：例如，只有当大多数节点正常运行且网络从故障中恢复时，才能保证请求将获得响应。部分同步模型假设系统最终会回到同步状态——即任何网络中断都只会在有限时间内发生，并随后恢复正常。

#### 将系统模型映射到现实世界

虽然安全属性和活性属性以及相应的系统模型对分析分布式算法的正确性非常有用，但在实际部署过程中，现实中的复杂情况常常让这些理论变得难以应用。例如，在崩溃-恢复模型中，算法通常假定稳定存储中的数据能在崩溃后存活下来。但如果磁盘上的数据损坏或因硬件问题而丢失【91】，或者服务器存在固件错误导致重启时无法识别硬盘驱动器【92】，又该如何处理？

法定人数算法依赖于节点记住它们声称存储的数据。如果某个节点“失忆”，忘记了之前存储的信息，那么这将打破法定条件，从而影响算法的准确性。或许我们需要一个新的系统模型，在该模型中，我们假设稳定存储大多数情况下可以在崩溃后幸存，但有时也会丢失数据。不过，这样的模型会使推理变得更加困难。

理论上，某些事件可被视为不可能发生——在非拜占庭式系统中，确实需要对可能发生的故障做出假设。然而，在真实世界的实现中，仍然需要编写代码来处理这些“理论上不可能”的情况，哪怕只是简单的 `printf("Sucks to be you")` 和 `exit(666)` 语句【93】。（这可以说是计算机科学与软件工程之间的区别之一）。

这并不意味着抽象的系统模型毫无价值；相反，它们通过将实际系统的复杂性简化为可管理的错误类型，帮助我们理解和解决这些问题。尽管证明算法在某个系统模型中总是正确的并不意味着其实现必然无误，但这仍然是重要的第一步。理论分析可以揭示潜在的问题，这些问题可能在现实中长期潜伏，直到特定假设（如时间同步）因异常情况而失效。因此，理论分析与经验测试同样重要。

## 本章小结

本章探讨了分布式系统中可能出现的各种问题，包括：
- 数据包在网络传输过程中可能会丢失或延迟，同样地，响应也可能丢失或延迟，使得你无法确认消息是否成功发送。
- 节点间的时钟可能显著不同步，甚至会出现突然跳跃的情况，依赖于时钟进行同步是非常危险的。
- 进程可能在执行过程中长时间暂停（可能是由于垃圾收集等原因），然后被其他节点宣告死亡，之后再次复活，却不知道自己曾被暂停过。

这类 **部分失效** 是分布式系统的典型特征。每当软件尝试与其他节点交互时，就有可能遇到失败、变慢或无响应的情况。为了使系统能够容忍这些错误，首先需要检测它们，但即便如此也十分困难。大多数系统缺乏精确的故障检测机制，因此通常依靠超时来判断远程节点的状态。然而，超时无法区分网络故障和节点故障，并且可变的网络延迟有时会导致误判。此外，节点还可能处于降级状态，如网卡性能骤降，这种情况比完全失效更难处理。

一旦检测到故障，如何使系统容忍这些故障也是一个挑战：没有全局变量，没有共享内存，没有共同的知识，也没有任何形式的共享状态。节点之间甚至无法就当前时间达成一致。信息只能通过不可靠的网络传递，重大决策不能由单一节点独立完成，因此需要设计协议以争取多数节点的支持。

如果你习惯于在理想的单机环境中编程，那么面对分布式系统的复杂现实可能会感到震惊。然而，正如我们在第二部分介绍中讨论的那样，容错性和低延迟（通过将数据放置在离用户较近的地方）也是重要的目标，这些是单个节点无法实现的。在下一章中，我们将继续讨论解决方案，并探讨一些旨在解决分布式系统中各种问题的算法。

## 参考文献
[此处省略参考文献列表，因为原文提供了完整的引用]

通过这种方式，文本变得更加清晰、连贯和专业，同时也保留了原文的核心内容和结构。