title:Pitfalls in Designing Zero-Effort Deauthentication: Opportunistic
Human Observation Attacks
author:Otto Huhta and
Swapnil Udar and
Mika Juuti and
Prakash Shrestha and
Nitesh Saxena and
N. Asokan
Pitfalls in Designing Zero-Effort Deauthentication:
Opportunistic Human Observation Attacks
Otto Huhta∗, Prakash Shrestha†, Swapnil Udar∗, Mika Juuti∗, Nitesh Saxena† and N. Asokan‡
∗Aalto University
†University of Alabama at Birmingham
‡Aalto University and University of Helsinki
{otto.huhta, swapnil.udar, mika.juuti}@aalto.ﬁ, {saxena, prakashs}@uab.edu, PI:EMAIL
Abstract—Deauthentication is an important component of
any authentication system. The widespread use of computing
devices in daily life has underscored the need for zero-effort
deauthentication schemes. However, the quest for eliminating user
effort may lead to hidden security ﬂaws in the authentication
schemes.
As a case in point, we investigate a prominent zero-effort
deauthentication scheme, called ZEBRA, which provides an inter-
esting and a useful solution to a difﬁcult problem as demonstrated
in the original paper. We identify a subtle incorrect assumption
in its adversary model that leads to a fundamental design ﬂaw.
We exploit this to break the scheme with a class of attacks
that are much easier for a human to perform in a realistic
adversary model, compared to the na¨ıve attacks studied in the
ZEBRA paper. For example, one of our main attacks, where the
human attacker has to opportunistically mimic only the victim’s
keyboard typing activity at a nearby terminal, is signiﬁcantly
more successful compared to the na¨ıve attack that requires
mimicking keyboard and mouse activities as well as keyboard-
mouse movements. Further, by understanding the design ﬂaws in
ZEBRA as cases of tainted input, we show that we can draw on
well-understood design principles to improve ZEBRA’s security.
I.
INTRODUCTION
User authentication is critical to many on-line and off-
line services. Computing devices of all
types and sizes,
ranging from mobile phones through personal computers to
remote servers rely on user authentication. Deauthentication
– promptly recognizing when to terminate a previously au-
thenticated user session – is an essential component of an
authentication system.
The pervasive use of computing in people’s daily lives
underscores the need to design effective, yet intuitive and easy-
to-use deauthentication mechanisms. However, this remains an
important unsolved problem in information security. A promis-
ing approach to improving usability of (de)authentication
mechanisms is to make them transparent to users by reducing,
if not eliminating, the cognitive effort required from users. Al-
though such zero-effort authentication schemes are compelling,
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’16,  21-24  February  2016,  San  Diego,  CA,  USA
Copyright  2016  Internet  Society,  ISBN 1-891562-41-X 
http://dx.doi.org/10.14722/ndss.2016.23199
designing them correctly is difﬁcult. The need to minimize
additional user interactions required by the scheme is a severe
constraint that can lead to design decisions which might affect
the security of the scheme.
One prominent approach for improving usability of se-
curity mechanisms involves comparing information observed
from two different sources. Such a bilateral approach has
been proposed as part of solutions for a variety of security
problems such as deauthentication of users [23], determining
if two or more devices are co-present in the same place [28],
establishing security associations among nearby devices (“pair-
ing”) [29], [9] and authorizing transactions between co-present
devices [8]. Bilateral authentication schemes are attractive
because they can avoid imposing any cognitive load on users
(thus making them “zero-effort”), or the need to store sensitive
or user-speciﬁc information on devices [23]. However, an
adversary capable of inﬂuencing one or both sources of infor-
mation being compared in a bilateral scheme may compromise
security.
In this paper, we illustrate the problem of subtle ﬂaws in
the design of zero-effort bilateral schemes by examining an
interesting class of schemes represented by ZEBRA, a zero-
effort bilateral deauthentication scheme, proposed recently in
a premier security research venue [23]. ZEBRA is intended
for scenarios where users authenticate to “terminals” (such as
desktop computers). In such scenarios, users typically have to
either manually deauthenticate themselves by logging out or
locking the terminal, or the terminal can deauthenticate a user
automatically after a sufﬁciently long period of inactivity. The
former requires user effort while the latter sacriﬁces prompt-
ness. ZEBRA attempts to make the process of deauthentication
both prompt and transparent: once a user is authenticated to a
terminal (using say a password), it continuously, yet transpar-
ently re-authenticates the user so that prompt deauthentication
is possible without explicit user action. A user is required
to wear a bracelet equipped with sensors on his mouse-
holding hand. The bracelet
is wirelessly connected to the
terminal, which compares the sequence of events it observes
(e.g., keyboard/mouse interactions) with the sequence of events
inferred using measurements from the bracelet sensors. The
logged-in user is deauthenticated when the two sequences no
longer match.
ZEBRA is particularly compelling because of its simplicity
of design. However, the simplicity hides a design assumption
that an adversary can exploit to defeat the scheme. We show
how a more realistic adversary can circumvent ZEBRA. Since
no implementation of ZEBRA was available, we built an
end-to-end implementation and use it in our attack. We also
implemented changes needed to make ZEBRA work in real-
time.
Our primary contributions can be summarized as follows:
1) We highlight fundamental pitfalls in designing zero-
effort bilateral security schemes by studying ZEBRA,
a notable prior scheme. We identify a hidden design
choice in ZEBRA that allows us to develop an
effective attack strategy: a human attacker observing
a victim at a nearby terminal and opportunistically
mimicking only a subset of the victim’s activities
(e.g., keyboard events) at the authentication terminal
(Section III).
2) We build a end-to-end implementation1 of ZEBRA
(Section IV), and demonstrate via experiments in
realistic adversarial settings that ZEBRA as de-
signed can be defeated by our opportunistic attacker
with a (statistically) signiﬁcantly higher probability
compared to a na¨ıve attacker, also considered in [23]
(one who attempts to mimic all, keyboard and mouse,
activities) (Section V).
3) We cast ZEBRA’s design ﬂaw as a case of tainted
input, and thus draw from well-understood principles
of secure system design that may help improve the
security of ZEBRA (Section VI).
II. BACKGROUND
Since we use ZEBRA [23] as our exemplary bilateral zero-
effort deauthentication scheme, we now describe it in more
detail. It is intended for multi-terminal environments where
users frequently move between terminals. Mare et al. [23]
present a hospital environment as their motivating scenario.
Hospital staff members often use shared terminals. However,
a user must not, intentionally or unintentionally, access hospital
systems from terminals where other users have logged in.
Users may leave terminals without logging out, but may still
remain in the vicinity. Proximity-based zero-effort deauthenti-
cation schemes such as ZIA [12] or BlueProximity [5] cannot
be used because these methods are not accurate enough for
short distances. Although the motivating scenario is an en-
vironment with shared terminals, zero-effort deauthentication
schemes like ZEBRA are broadly applicable to any scenario
where users may leave their terminals unattended.
Adversary Model: ZEBRA[23] considers two types of ad-
versaries: “innocent” and “malicious”. An innocent adversary
is a legitimate user who starts using an unattended terminal
inadvertently without realizing that another user (“victim”) is
logged into that terminal. In contrast, a malicious adversary
deliberately uses an unattended terminal of the victim with
the intent of performing some action impersonating the victim.
A malicious adversary may observe the behavior and actions
of the victim (such as imitating the victim’s hand movements
made while interacting with another terminal). The goal of
ZEBRA is to quickly detect
if a previously authenticated
1Unlike [23] which only described the implementation of individual com-
ponents and off-line classiﬁcation.
session on a terminal is being used by anyone other than the
user who originally authenticated, and promptly deauthenticate
the session. Naturally, decisions made by ZEBRA should min-
imize false positives (incorrectly recognizing an adversary as
the original authenticated user, thereby failing to deauthenticate
him as well as false negatives (incorrectly concluding that
current user is not the original user, thereby deauthenticating
him.
System Architecture: Figure 1 depicts the normal (benign)
operation of ZEBRA. It correlates a user’s activities on a
terminal with measurements of user activity relayed from a
wrist-worn device (we call it a bracelet for simplicity, but it can
be a general-purpose smartwatch as in our implementation and
analysis). The goal is to continuously verify that the logged
in user is the one using the terminal and to quickly deau-
thenticate any unintended users. ZEBRA assumes terminals
with keyboard/mouse and a personal bracelet for each user
of the system. The bracelet has accelerometer and gyroscope
sensors to record wrist movements. Terminals and bracelets
securely communicate using “paired” wireless channels like
Bluetooth. In addition, a terminal knows the identity of the
bracelet associated with each authorized user. Users initially
authenticate themselves to terminals using some mechanism
external to ZEBRA (such as using a username/password). Once
a user has been authenticated, the terminal connects to that
user’s bracelet and starts receiving sensor measurements from
it.
The basic principle of operation is to compare the sequence
of user activity seen at the terminal with that inferred from
data sent by the bracelet. ZEBRA’s system architecture is
shown in Figure 2. An Interaction Extractor on the termi-
nal identiﬁes the actual interaction sequence based on input
events observed by the terminal peripherals. It deﬁnes three
different types of such interactions: typing, scrolling, and hand
movements between the mouse and keyboard (referred to as
“MKKM”)2. Interaction Extractor records the timestamps of
each event in the actual interaction sequence. A Segmenter on
the terminal receives measurement data sent by the bracelet
and segments this data according to the timestamps it receives
from Interaction Extractor. Segmenter ignores all measure-
ments that fall outside these time slots. From the segments,
a Feature Extractor extracts salient features and feeds them
to an Interaction Classiﬁer that has been trained to identify
the type of interaction from bracelet measurement data. The
classiﬁer outputs a predicted interaction sequence. Finally,
an Authenticator compares the two interaction sequences and
determines whether the current user at the terminal is the
“same” as, or “different” from, the originally authenticated
user.
Authenticator can be tuned by a number of parameters. It
compares sequences of length w (window size) at a time. In
each window, if the fraction of matching interactions exceeds a
threshold m (matching threshold), it records 1 for that window;
otherwise it records 0. If the record is 0 for g (grace period)
successive windows, the authenticator outputs “different” caus-
ing ZEBRA to deauthenticate the session. Successive windows
2ZEBRA neither cares about which key was pressed nor about what direc-
tion the mouse was scrolled. It actually cares about whether the interaction is
typing, scrolling or movement between mouse and keyboard.
2
Fig. 1: Normal operation of ZEBRA
may overlap, as determined by f (overlap fraction), with 0
signifying no overlap.
Segmenter ignores readings from the bracelet when In-
teraction Extractor detects no activity on the terminal. The
choice was motivated in [23] by privacy considerations: the
user’s activities are not monitored when nobody is using the
terminal. At ﬁrst glance, it is a natural and reasonable design
decision: if there is no terminal activity, there is reason to
deauthenticate the session (thus reducing the chances of false
negative decisions). However, as we shall see, an adversary
can exploit this subtle aspect of the design.
Validation: Mare et al. [23] validated usability of their deau-
thentication scheme by calculating false negative rates for
normal usage scenarios with different parameter settings. They
validated the security by considering three separate scenarios.
The ﬁrst two scenarios model the “innocent adversary”: the
logged in user (victim) is either walking or writing nearby
while the attacker accesses the victim’s terminal. The last
scenario models the “malicious” adversary: the victim uses
another terminal, while the attacker uses the victim’s original
terminal. The activity conducted by both victims and attackers
is ﬁlling forms. These scenarios were chosen as representative
of multi-user environments such as hospitals, where physicians
enter form-type data about their patients and routinely forget
to log out of their terminals. It is reasonable to assume there
are multiple terminals that users access and use. Similar usage
scenarios are plausible in other contexts as well, such as
in factory ﬂoors or control rooms. In [23],
the malicious
adversary is required to mimic all mouse-hand movements of
the victim. Ordinary non-expert users act as the attackers in
their analysis. Because Mare et al. [23] “realize that a real
adversary can be motivated and skilled enough to mimic user
very well, compared to our adversaries”, they tried to make