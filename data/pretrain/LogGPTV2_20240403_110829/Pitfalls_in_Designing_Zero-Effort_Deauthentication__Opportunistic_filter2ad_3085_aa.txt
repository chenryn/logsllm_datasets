# Pitfalls in Designing Zero-Effort Deauthentication: Opportunistic Human Observation Attacks

**Authors:** Otto Huhta, Prakash Shrestha, Swapnil Udar, Mika Juuti, Nitesh Saxena, and N. Asokan

- **Otto Huhta**, **Swapnil Udar**, **Mika Juuti**: Aalto University
- **Prakash Shrestha**, **Nitesh Saxena**: University of Alabama at Birmingham
- **N. Asokan**: Aalto University and University of Helsinki

**Contact:** {otto.huhta, swapnil.udar, mika.juuti}@aalto.fi, {saxena, prakashs}@uab.edu, PI:EMAIL

## Abstract

Deauthentication is a critical component of any authentication system. The widespread use of computing devices in daily life has highlighted the need for zero-effort deauthentication schemes. However, the pursuit of eliminating user effort can introduce hidden security flaws in these schemes.

We examine ZEBRA, a prominent zero-effort deauthentication scheme, which provides an innovative solution to a challenging problem. We identify a subtle incorrect assumption in its adversary model that leads to a fundamental design flaw. We exploit this flaw to break the scheme with a class of attacks that are significantly easier for a human to perform in a realistic adversary model compared to the naive attacks studied in the ZEBRA paper. For example, one of our main attacks, where the attacker opportunistically mimics only the victim’s keyboard typing activity at a nearby terminal, is more successful than the naive attack that requires mimicking both keyboard and mouse activities. By understanding the design flaws in ZEBRA as cases of tainted input, we show that well-understood design principles can be applied to improve ZEBRA’s security.

## 1. Introduction

User authentication is crucial for many online and offline services. Computing devices of all types and sizes, from mobile phones to personal computers and remote servers, rely on user authentication. Deauthentication, which involves promptly recognizing when to terminate a previously authenticated user session, is an essential component of an authentication system.

The pervasive use of computing in daily life underscores the need for effective, intuitive, and easy-to-use deauthentication mechanisms. However, designing such mechanisms remains a significant challenge in information security. Zero-effort authentication schemes, which aim to minimize or eliminate cognitive effort required from users, are compelling but difficult to design correctly. The need to minimize additional user interactions can lead to design decisions that compromise security.

One approach to improving the usability of security mechanisms is to compare information observed from two different sources. Such bilateral schemes have been proposed for various security problems, including deauthentication, co-presence detection, device pairing, and transaction authorization. Bilateral schemes are attractive because they can avoid imposing cognitive load on users and the need to store sensitive information on devices. However, an adversary capable of influencing one or both sources of information can compromise the security of these schemes.

In this paper, we illustrate the subtle design flaws in zero-effort bilateral schemes by examining ZEBRA, a recently proposed zero-effort bilateral deauthentication scheme. ZEBRA is intended for scenarios where users authenticate to terminals (e.g., desktop computers). Users typically have to manually deauthenticate themselves by logging out or locking the terminal, or the terminal can automatically deauthenticate after a period of inactivity. ZEBRA aims to make deauthentication both prompt and transparent: once a user is authenticated, it continuously re-authenticates the user without explicit action. The user wears a bracelet equipped with sensors on their mouse-holding hand, which is wirelessly connected to the terminal. The terminal compares the sequence of events it observes (e.g., keyboard/mouse interactions) with the sequence inferred from the bracelet's sensor measurements. The logged-in user is deauthenticated when the sequences no longer match.

ZEBRA is appealing due to its simplicity, but this simplicity hides a design assumption that an adversary can exploit. We demonstrate how a more realistic adversary can circumvent ZEBRA. Since no implementation of ZEBRA was available, we built an end-to-end implementation and used it in our attack. We also implemented changes needed to make ZEBRA work in real-time.

Our primary contributions are:
1. Highlighting fundamental pitfalls in designing zero-effort bilateral security schemes by studying ZEBRA.
2. Building an end-to-end implementation of ZEBRA and demonstrating via experiments in realistic adversarial settings that ZEBRA can be defeated by an opportunistic attacker with a statistically significant higher probability compared to a naive attacker.
3. Casting ZEBRA’s design flaw as a case of tainted input and drawing from well-understood principles of secure system design to improve ZEBRA’s security.

## 2. Background

### 2.1 ZEBRA Overview

ZEBRA [23] is a zero-effort bilateral deauthentication scheme designed for multi-terminal environments where users frequently move between terminals. It is particularly useful in shared terminal environments, such as hospitals, where staff members often use shared terminals. Proximity-based zero-effort deauthentication schemes like ZIA [12] or BlueProximity [5] are not accurate enough for short distances. ZEBRA is broadly applicable to any scenario where users may leave their terminals unattended.

### 2.2 Adversary Model

ZEBRA considers two types of adversaries: "innocent" and "malicious." An innocent adversary is a legitimate user who inadvertently starts using an unattended terminal without realizing another user is logged in. A malicious adversary deliberately uses an unattended terminal to impersonate the victim. The goal of ZEBRA is to quickly detect if a previously authenticated session is being used by someone other than the original user and promptly deauthenticate the session.

### 2.3 System Architecture

Figure 1 depicts the normal operation of ZEBRA. It correlates a user’s activities on a terminal with measurements from a wrist-worn device (a bracelet with accelerometer and gyroscope sensors). The terminal and bracelet communicate securely via Bluetooth. Users initially authenticate using an external mechanism (e.g., username/password). Once authenticated, the terminal connects to the user’s bracelet and receives sensor measurements.

The basic principle of operation is to compare the sequence of user activity seen at the terminal with that inferred from the bracelet's data. The system architecture includes an Interaction Extractor, Segmenter, Feature Extractor, Interaction Classifier, and Authenticator. The Authenticator compares the two interaction sequences and determines whether the current user is the same as the originally authenticated user.

### 2.4 Validation

Mare et al. [23] validated ZEBRA’s usability by calculating false negative rates for normal usage scenarios with different parameter settings. They also validated the security by considering three scenarios: the first two model an "innocent adversary" (victim walking or writing nearby), and the third models a "malicious adversary" (attacker using the victim’s terminal while the victim uses another terminal). The validation assumed that the malicious adversary must mimic all mouse-hand movements of the victim. However, a more motivated and skilled adversary can exploit the design assumptions to defeat ZEBRA.

## 3. Methodology

### 3.1 Attack Strategy

We developed an effective attack strategy by identifying a hidden design choice in ZEBRA. A human attacker can observe a victim at a nearby terminal and opportunistically mimic only a subset of the victim’s activities (e.g., keyboard events) at the authentication terminal. This attack is more successful than the naive attack that requires mimicking all activities.

### 3.2 Implementation

We built an end-to-end implementation of ZEBRA and made necessary changes to enable real-time operation. Our implementation allowed us to conduct experiments in realistic adversarial settings.

### 3.3 Experimental Results

Our experiments demonstrated that ZEBRA can be defeated by an opportunistic attacker with a statistically significant higher probability compared to a naive attacker. This highlights the need to address the design flaw in ZEBRA.

## 4. Security Improvements

### 4.1 Tainted Input

We cast ZEBRA’s design flaw as a case of tainted input. By applying well-understood principles of secure system design, we propose improvements to enhance ZEBRA’s security. These principles include:

- **Input Validation:** Ensure that input from the bracelet and terminal is validated and sanitized to prevent exploitation.
- **Behavioral Analysis:** Implement more sophisticated behavioral analysis to detect anomalies and potential attacks.
- **Multi-Factor Authentication:** Integrate additional authentication factors to strengthen the security of the deauthentication process.

## 5. Conclusion

Zero-effort deauthentication schemes like ZEBRA offer a promising approach to improving the usability of authentication systems. However, the pursuit of zero-effort can introduce hidden security flaws. By identifying and addressing these flaws, we can enhance the security of such schemes. Our study of ZEBRA highlights the importance of rigorous security analysis and the application of well-understood design principles to ensure the robustness of zero-effort deauthentication mechanisms.

---

**References:**
- [23] Mare, J., et al. "ZEBRA: Zero-Effort Bilateral Re-Authentication." NDSS 2016.
- [12] ZIA: Zero-Interaction Authentication.
- [5] BlueProximity: Proximity-Based Authentication.
- [28] Co-presence Detection.
- [29] Device Pairing.
- [8] Transaction Authorization.
- [9] Security Associations.