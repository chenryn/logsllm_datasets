title:On the Challenges of Building a BFT SCADA
author:Andr&apos;e Nogueira and
Miguel Garcia and
Alysson Bessani and
Nuno Neves
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
On the Challenges of Building a BFT SCADA
Andr´e Nogueira, Miguel Garcia, Alysson Bessani, and Nuno Neves
LASIGE, Faculdade de Ciˆencias, Universidade de Lisboa, Portugal
Abstract—In the last decade, Industrial Control Systems have
been a frequent target of cyber attacks. As the current de-
fenses sometimes fail to prevent more sophisticated threats, it is
necessary to add advanced protection mechanisms to guarantee
that correct operation is (always) maintained. In this work, we
describe a Supervisory Control and Data Acquisition (SCADA)
system enhanced with Byzantine fault-tolerant (BFT) techniques.
We document the challenges of building such system from a “tra-
ditional” non-BFT solution. This effort resulted in a prototype
that integrates the Eclipse NeoSCADA and the BFT-SMaRt open-
source projects. We also present an evaluation comparing Eclipse
NeoSCADA with our BFT solution. Although the results show a
decrease in performance, our solution is still more than enough
to accommodate realistic workloads.
Keywords—Byzantine fault tolerance, SCADA systems, State
Machine Replication, Eclipse NeoSCADA.
I. INTRODUCTION
Industrial Control Systems (ICS) security has relied on the
past years on ﬁrewalls, Intrusion Detection Systems (IDS), and
air-gapped architectures. Unfortunately, these mechanisms are
not enough: Firewalls are prone to attacks [1] and they are
typically a single-point-of-failure; IDS may fail to discover
unknown attacks as their detection is based on attack signa-
tures or anomaly detection [2]; In 2010, the Stuxnet attack [3]
was designed to overpass the air-gapped defenses using an
infected USB pen. In addition, the widespread integration
of ﬁeld and corporate networks make Supervisory Control
and Data Acquisition (SCADA) systems more exposed to the
plethora of attacks plaguing internet-based systems [4], which
may lead to operational failures.
SCADA systems are the backbone of ICSs. For example,
they monitor and manage the power grid and water sup-
ply systems machinery. Figure 1 shows a generic SCADA
architecture with its main components: the Human-Machine
Interface (HMI) is a computer that allows an operator to view
the state of the infrastructure and react to events by issuing
commands;
the SCADA Master is a server that monitors
and sends commands to Remote Terminal Units (RTU); the
Frontends work as protocol translators between the RTUs and
the SCADA Master; and the RTUs aggregate data from sensors
located in the ﬁeld, and execute commands in the actuators
based on the SCADA Master instructions.
Modern SCADA systems normally employ fault tolerance
techniques in the SCADA Master to ensure reliability, as it
is the most critical component of the system. The SCADA
Master is often deployed in a hot-standby conﬁguration, where
a primary server processes all collected data, mirroring its state
changes to the backup server. In this type of conﬁguration (i.e.,
passive replication) recovering from failures can be delayed
HMI
SCADA 
Master
Frontends
RTUs
Fig. 1. SCADA generic architecture.
while the backup server takes place as the primary. Moreover,
this type of solution fails to protect the SCADA Master from
malicious faults.
State Machine Replication (SMR) is an active replication
approach that has been employed to ensure fault tolerance of
fundamental services in modern internet-scale infrastructures
(e.g., [5], [6], [7]). Given the critical role of the SCADA
Master in the system, its design must consider correctness and
availability. In particular, to build systems capable of operating
correctly even in the presence of intrusions [8], it is necessary
to employ Byzantine fault-tolerant (BFT) SMR, a particular
case of SMR.
In this work, we describe the endeavor of making an
intrusion-tolerant SCADA Master using BFT SMR. In this
process, we have found some generic challenges that are
relevant
to other SCADA systems (e.g., [9], [10]). These
challenges result from the need to guarantee the SMR prop-
erties, i.e., determinism and coordination, in a system that
was built to be non-deterministic. One of the key decisions
of our solution was to make it as modular as possible to avoid
code modiﬁcations both on the SCADA and BFT library. In
particular, our solution results from the integration of Eclipse
NeoSCADA [11] with BFT-SMaRt [12], which are both stable
open-source projects with several years of development. Al-
though the idea of using BFT replication in a SCADA system
was initially proposed in [9], no description was made about
the challenges we are addressing in this work.
Our contributions can be summarized as follows:
• The identiﬁcation of the main challenges to make intru-
sion tolerant a “traditional” SCADA Master;
• The design and implementation of a prototype, named
SMaRt-SCADA, addressing these challenges;
• A preliminary performance evaluation to assess the over-
The remainder of the paper is organized as follows: In §II,
head introduced by our solution.
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00028
163
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
HMI
Item i
Item i
Item i
DA
Client
AE
Client
DA
AE
DA
Server
AE
Server
SCADA Master
Frontend
Item i
Item i
Item i
DA
Client
DA
DA
Server
Item i
Item i
Item i
Handlers
Storage
Fig. 2.
Internal details of the main components of Eclipse NeoSCADA.
we introduce the non-replicated SCADA solution; In §III, we
identify the challenges of making a BFT SCADA Master; In
§IV, we present our prototype solution and how it addresses
the identiﬁed challenges; In §V, we present the evaluation of
the prototype; We present the related works in §VI; Finally,
in §VII we present the conclusion and the lessons learned.
II. ECLIPSE NEOSCADA
Most of the existing SCADA solutions are commercial,
and therefore, their code is not available for inspection and
modiﬁcation. Among the few open-source SCADA available,
we decided to use the Eclipse NeoSCADA [11] in this work.
It is a multi-platform “construction kit” for SCADA systems
allowing system customizations. NeoSCADA is a project
created in 2013, and its current version supports natively the
following protocols (others can be added) Modbus TCP and
RTU, Simatic S7 PLC, and JDBC. This system has been used
in production to manage some industrial facilities [13].
A. Architecture
As can be observed in Figure 2, NeoSCADA has all
the components of a typical SCADA system. NeoSCADA
supports multiple Frontends, which are all connected to the
SCADA Master. Although RTU devices are not part of
NeoSCADA (and thus not shown in the ﬁgure),
they are
connected to the Frontends.
NeoSCADA employs two communication interfaces that
specify the operations that can be performed. The Data Access
(DA) interface deﬁnes a set of operations that permit to read or
update values. The Alarms and Events (AE) interface allows
the subscription of events that are generated when a controlled
item’s value reaches a certain threshold.
These interfaces allow the communication of the SCADA
components: The Frontend contains items that represent the
devices (e.g., Item i in Figure 2), such as sensors and actuators
in the ﬁeld, which are connected to the RTUs. Each item
is composed of a name and a value. The SCADA Master
also contains items, but these items are representations of the
items in the Frontends. To receive and send data from/to the
Frontends, the SCADA Master subscribes to the items in the
Frontends using the DA communication interface. The HMI
also contains items that are mapped inside the SCADA Master.
Similar to the SCADA Master, the HMI also uses the DA
communication interface to subscribe to the items.
In the SCADA Master, handlers can be added to the items to
obtain enhanced functionalities. Handlers are associated with
items to process their data values. NeoSCADA contains a
set of default handlers: Scale, scales the value of an item;
Override, overrides the current value of an item with a
predeﬁned value; Monitor, checks whether a value passes a
certain threshold; and Block, blocks an operation while it
waits for some condition to be veriﬁed. Every time a handler
processes data, an event may be created and saved in the
storage component. An event is created when the value is
modiﬁed or when it reaches a predeﬁned condition. To receive
events, the HMI must subscribe to the SCADA Master’s items
of interest using the AE communication interface.
B. Operational use cases
Two main use cases deﬁne how the DA and AE interfaces
are used, and the messages exchanged in the SCADA. Under-
standing these use cases is important as they will be modiﬁed
in the BFT version:
a) Item update: This case encompasses the scenario
where a Frontend is notiﬁed by a RTU about an item’s value
update, e.g., some RTU detected temperature changes. We
consider that all the items available in the Frontend were
previously subscribed by the HMI and SCADA Master. Upon
the item’s update, the Frontend informs the SCADA Master
of the update, which after processing the information tells the
HMI about the change. If the updated value raises an alarm
in the SCADA Master, the HMI is also notiﬁed of that alarm.
Figure 3 shows the messages exchanged in the described
scenario. Upon the item’s update value, the Frontend creates
an ItemUpdate(ID,val) message and sends it to the
SCADA Master’s DA client (DAC) via DA server (DAS) (1).
In the SCADA Master, the update message goes through two
different subsystems (2). One is the DA server, where the
message is forwarded to all subscribers of that item. All DA
clients that subscribed that item will receive the update (3).
The other path is through the AE server (AES), where the
handlers will process the item update. Each handler associated
with that item will process the message and, if the values are
modiﬁed or reached some condition, an event is created and
164
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
HMI
SCADA Master
(1)
DAC
ItemUpdate(ID,val)
Frontend
DAS
(2)
ItemUpdate(ID,val)
DAC
(3)
ItemUpdate(ID,val)
AEC
(3a)
EventUpdate(ID)
DAS
AES
HMI
SCADA Master
Frontend
DAC
(1)
WriteValue(ID,val)
DAS
WriteValue(ID,val)
(2)
DAS
(3)
WriteValue(ID,val)
DAC
DAS
(4) WriteResult(ID)
DAC
(5)
WriteResult(ID)
Fig. 3. Messages exchange in the Item update use case.
DAC
(6) WriteResult(ID)
AEC
(6a) EventUpdate(ID)
DAS
AES
saved in the storage. All AE clients (AEC) that subscribed to
that item will receive event notiﬁcations (3a).
b) Write value: This use case describes a scenario in
which an operator, via HMI, requests a change for an item’s
value in a RTU. The request stays blocked in the SCADA
Master waiting for a conﬁrmation stating that the item could
be modiﬁed. In the end, the HMI informs the operator if the
item’s value was successfully changed or not.
Figure 4 depicts the messages exchanged in this scenario.
When the operator performs a write,
the HMI sends a
WriteValue(ID, val) from the DA client to the DA
server, which places the write message in the DA subsystem
(1) of the SCADA Master. The message is processed by
its handlers (2), and then the SCADA Master sends the
WriteValue message to the Frontend (3). After the corre-
sponding RTU replies with a message, the Frontend returns a
WriteResult message to the SCADA Master, indicating
if the operation was successfully completed or not (4). In
the SCADA Master, the message follows two different paths,
similarly to what happens in the previous use case (5). In the
DA subsystem, the WriteResult message is forwarded to
DA client that performed the write operation (in this case,
to the HMI) (6). In the AE subsystem, the handlers will
process that write result. If some condition is activated, an
event is created and saved in the internal storage and an
EventUpdate message is sent to the HMI (6a).
In the case where there is an issue with a handler (2),
a WriteValue message may not be sent to the Frontend
(3). One of the default handlers of the SCADA Master is
the Block handler. This handler blocks the message while it
checks whether the operator can perform the write operation. If
the operation is denied, the SCADA Master replies with two
messages to the operator: The DA sends a WriteResult
informing the operator that the requested operation was not
performed, and an EventUpdate message is sent via AE.
This message contains the reason why the SCADA Master
was not able to execute the operation. The latter message is
transmitted to the operator because the Block handler creates
an event which contains recorded logging information and
saves it in internal storage.
Fig. 4. Messages exchange in the Write value use case.
III. BUILDING A BFT SCADA
In this section, we identify the main issues associated with
the integration of a BFT library with the SCADA Master.
Before we do that, we explain what is BFT replication in a
nutshell.
A. BFT replication
BFT SMR is a well-known approach to replicate a service
for Byzantine fault tolerance [14]. Typically, it is implemented
as a request-reply protocol between clients and replicated
servers. Each client
issues requests to the servers, which
process the same requests in the same order. Then, the servers
reply to the client, which waits for a sufﬁcient amount of
matching replies. The key idea is to make replicas determin-
istically execute the same sequence of requests in such a way
that, despite the failure of a fraction of the replicas, there is a
quorum of correct nodes that have the same state and ensure
the validity of the offered services.
B. Identiﬁed challenges
We have identiﬁed some generic challenges in building a
BFT SCADA. They refer to the process of making a non-
deterministic SCADA Master works as a state machine [15].
SMR requires that all replicas assure the following properties:
(1) All SCADA Masters start from the same state; (2) All
SCADA Masters execute the same sequence of messages; (3)
All SCADA Masters execute the same state transitions. The
following challenges identify the problems that we have found
that violate these properties.
a) Multiple entry points: The SCADA Master contains
multiple communication entry points. To communicate with
the Frontends, the SCADA Master uses DA clients, while
it uses a DA server and
to communicate with the HMI,
an AE server. Therefore,
the SCADA Master can receive
requests and replies from all these modules simultaneously.
For example, the SCADA Master can receive at the same
instant an ItemUpdate message from the Frontend and a
WriteValue message from the HMI. In a single SCADA
165
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
HMI
Item  i