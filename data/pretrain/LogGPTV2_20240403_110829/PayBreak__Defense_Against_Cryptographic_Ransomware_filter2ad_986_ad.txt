of our ability with a corresponding reference. Additionally,
the Defeated column identi(cid:12)es all families that have been
defeated, either by a previous technique or PayBreak.
Of the 20 active families in our dataset, PayBreak does
not defeat eight. Three of these, DXXD, PokemonGo, and
VirLock, are previously defeated and use trivial constant
keys for encryption, i.e., they are not using hybrid cryptog-
raphy. Two other families, MarsJokes and Troldesh, have
also been defeated previously. These families, contrary to
popular reason, rolled their own pseudorandom number gen-
erators instead of using the battle tested CryptGenRandom
API. Their na(cid:127)(cid:16)ve implementations lead to their defeat by
researchers [12, 13]. The remaining undefeated families, An-
drom, Razy, and TeslaCrypt use a cryptographic library that
our prototype implementation was not set up to hook. Pay-
Break can be expanded to defeat all eight of the remaining
families by hooking their respective statically linked encryp-
tion functions, and either exporting their constant keys (in
the case of the trivial families), or their session keys into
the key vault. We next discuss the robustness of the used
signatures.
Signature Robustness.
To identify statically linked crypto libraries, PayBreak
relies on signatures. Thus, one obvious concern is the ro-
bustness of these signatures against obfuscation. Identically
to all practical online anti-malware solutions, suﬃcient lev-
els of obfuscation and deception can evade the protections
aﬀorded by PayBreak. Note, however, that packers that
unpack the entire binary at runtime do not pose a problem
for PayBreak. To evaluate the robustness of our signatures,
we assess them against the syntactic changes introduced by
diﬀerent compilers and optimization levels as these charac-
teristics can be easily changed by the attacker. To this end,
we compiled 12 programs that use the Crypto++ encryp-
tion library with diﬀerent compilers and optimization set-
tings. More precisely, our sample programs statically link
Crypto++ versions 5.6.3, 5.6.2, and 5.6.1, spanning half a
decade of development of this popular cryptographic library
for Windows. Furthermore, we compiled our programs with
the tdm-gcc10 and the mingw32-gcc11 compilers, each with
disabled optimization, and maximum optimization levels.
To identify all 12 variants of the encryption functions, we
had to develop two signatures. The reason is that the diﬀer-
ences between artifacts is large when using diﬀerent compil-
ers, but smaller for diﬀerent optimization levels. In essence,
we had to create one signature per compiler, and each sig-
nature was robust across all tested optimization levels and
library versions.
File Recovery.
PayBreak is able to fully recover encrypted (cid:12)les from
twelve families. Due to the large amount of samples we’re
working with, our RADDAR system executes each sample
for 20 minutes. However, to evaluate the performance, and
ability to recover entire (cid:12)le systems we executed three ran-
somware families for four hours each in a resettable test
environment. To develop this test environment, (cid:12)rst, we
spread across the standardized document corpus, Govdocs1
threads [28], randomly across the entire (cid:12)le system of a vir-
tual machine. The document corpus contained 9,876 (cid:12)les
primarily of common oﬃce types, such as .xls, .docx, and
.pdf. For each of the (cid:12)les we recorded their original SHA1
(cid:12)le hash. By comparing these (cid:12)le hashes we can determine
if our recovered (cid:12)le is the original (cid:12)le. We then executed
a ransomware family and let it run for four hours without
intervention. After this infection, we extracted all (cid:12)les on
the system to a safe environment. PayBreak attempted re-
10TDM-GCC, http://tdm-gcc:tdragon:net/
11MinGW, http://www:mingw:org/
covery on these (cid:12)les using the key vault extracted oﬀ of the
system. We then reset the virtual machine, and repeated
this process for each family.
After ransomware encryption of the (cid:12)le system we exe-
cuted PayBreak decryption. Our system was able to re-
cover 100% of the original encrypted (cid:12)les from each of the
attacks. Comparing to the previously generated original (cid:12)le
hashes is not essential for the recovery, and using the (cid:12)le
hashes previously generated only serves as a con(cid:12)rmation of
successful (cid:12)le recovery. The Locky sample encrypted 9,821
(cid:12)les which were recovered in 360m40s. The Cryptowall sam-
ple encrypted 204 (cid:12)les from our document corpus, and (cid:12)les
were recovered in 86s. The Alma Locker sample encrypted
271 (cid:12)les from our document corpus, and the aﬀected (cid:12)les
were recovered in 26s. The Cryptowall, and Alma Locker
samples encrypted a low amount of (cid:12)les probably due to
malware software instability, i.e. they crashed during their
execution; however, nonetheless these tests prove that Pay-
Break is able to fully recover all (cid:12)les from a ransomware
attack in a short amount of time, i.e. on the scale of a few
hours for a full (cid:12)le system.
5.3 Performance Impacts
In this section we answer RQ3 which assesses performance
impacts caused by PayBreak. For this question we are
interested in two characteristics. (1) what slowdown does
PayBreak introduce for a single call to the encryption API
(i.e., micro benchmark), and (2) with what frequency are
calls to the encryption API made during regular oﬃce work-
loads (i.e., macro benchmark). We assessed performance on
a consumer grade laptop, running a Windows 7 32-bit virtual
machine, with 2GB of RAM, and 2 CPU cores at 2.20GHz.
Micro benchmark.
In order to measure the overhead of our system on Cryp-
toAPI functions hooked with Detours, we performed a micro
benchmark of 10 million invocations of the CryptEncrypt
API on a 1KB (cid:12)le. We found that it takes 4.02s without our
hooks in place. With PayBreak enabled, exporting session
keys and encryption scheme information to the key vault,
the tight encryption loop took 1,242s. Thus, on average one
call to the CryptEncrypt API takes 124(cid:22)s (i.e., a slowdown
of a factor 310x). However, the majority of the performance
impact results from the I/O operations that write to the key
vault. Omitting the disk I/O from the measurement reduces
the slowdown to a factor of 1.5x. Thus, a simple perfor-
mance optimization of PayBreak could be to perform the
write operation to the key vault in a dedicated I/O thread.
We will now show that realistic workloads suﬀer from signi(cid:12)-
cantly less performance impact than the synthetic worst-case
benchmark discussed above.
Macro benchmark.
While relative performance impact on a single invocation
of the cryptographic APIs is signi(cid:12)cant, such operations are
extremely rare in regular oﬃce workloads. For our macro
benchmark we used common Windows software on a vir-
tual machine provisioned with PayBreak. The Windows
software we executed included: 7zip, AVG, Dropbox, Fire-
fox, Gimp 2, Google Chrome, Google Drive, Internet Ex-
plorer (IE), iTunes, KeePass 2, LibreOﬃce, Microsoft Ex-
cel, Microsoft Powerpoint, Microsoft Word, Pidgin, Putty,
RealVNC, Skype, SumatraPDF, WinSCP, WinZip.
Due to space limitation, we are unable to thoroughly dis-
cuss our testing procedure for each application we tested.
However, we provide insight into the analysis of (cid:12)ve appli-
cations. We found no signi(cid:12)cant slowdown in any of the
applications, and on average less than 100 cryptographic
API calls during regular application usage. The number in
parentheses following each applications name is the number
of CryptoAPI calls we recorded stemming from the applica-
tion during its testing.
KeePass 2 (28). We created a new password database and
randomly generated 3 passwords using the application. We
deleted that database, and created a new empty database.
We then imported an old database. We noticed no slowdown
in any of these operations, and the application worked com-
pletely normally. KeePass 2 appears to be a diverse user of
the CryptoAPI, as we observed six diﬀerent functions from
the CryptoAPI being called.
Dropbox (127). We logged into a Dropbox account using
the program. We then synchronized 3 (cid:12)les from that account
previously placed there onto the local machine. We then
synchronized 5 (cid:12)les from the local machine onto the cloud
by dragging the (cid:12)les into the Dropbox folder. We noticed
no slowdown during the synchronizations, and no program
instability. Most CryptoAPI calls made by Dropbox during
our testing were to CryptGenRandom.
Putty (2). We connected to a remote SSH server. Upon
connect, we executed several commands. We then discon-
nected from the server. This application is a sparse user
of the CryptoAPI. We observed no slowdown, or program
instability.
Skype (19,418). We created a Skype account. We then
added and messaged 2 contacts. We then called 1 of those
contacts. Skype is a very heavy user of the CryptoAPI,
more than any other program that we observed. However,
even with such heavy usage, far above any other program,
we noticed no slowdown, or program instability.
Internet Explorer (3,328). We utilized the AutoIt12 pro-
gram to automate IE to visit the Alexa Top 100 most pop-
ular websites on their HTTPS front pages. We stayed on
each page for 5 seconds to allow page loading. On average,
we found 33 calls to the CryptoAPI per webpage (including
all resources). Thus, even at an unoptimized slowdown of
124(cid:22)s per cryptographic operation, this resulted in 4.1ms
overhead for page loads and is clearly below the human per-
ception threshold [37].
6. DISCUSSION AND LIMITATIONS
In this section we discuss challenges, open problems, and
limitations that exist despite or due to our system. A triv-
ial and seemingly eﬀective defense against ransomware is a
reliable backup regime. With such a system in place, users
have little to fear from a ransomware attack. All it takes to
recover is wiping and reinstalling the infected machine and
restore the data from backup. Although simple, it is fair to
assume that users who fell victim to ransomware and payed
the ransom in the past, did not have this simple mechanism
in place. Unfortunately, comprehensive use of backups by
all users seems unrealistic.
Furthermore, some recent ransomware families (e.g., Ran-
somWeb or CryptoWall) are reported to encrypt (cid:12)les imme-
diately upon infection and providing access to the data for a
12AutoIt, https://www:autoitscript:com/site/autoit/
limited amount of time (e.g., a few months) by transparently
decrypting the data when accessed [32, 26]. Once this initial
period expires, the malware destroys the key that is neces-
sary for the decryption and asks for ransom. At this point,
all backups taken since the infection (i.e., months worth)
contain only encrypted data and are thus useless to recover
from the infection.
At its core, PayBreak is a key escrow system. Govern-
ment proposed and mandated key escrow systems have con-
sistently been met with well founded criticism from the re-
search community and privacy advocates. We absolutely
sympathize with this opinion and strongly oppose govern-
ment mandated key escrow systems. However, there is a
fundamental diﬀerence between such government mandated
proposals and PayBreak.
In PayBreak there exists ex-
actly one entity who has access to the keys kept in the key
vault | the legitimate user herself. That is, besides the user
herself, there are no trusted third parties.
Our prototype implementation of PayBreak defeats ran-
somware using several dynamically or statically linked li-
braries. Ransomware authors may be tempted to roll their
own cryptographic libraries in an eﬀort to evade PayBreak;
however, this is often a recipe for easy cryptographic de-
feat (for example, simple encryption used by botmasters
made their C&C protocol easy to reverse engineer [40]).
As such, leveraging secure third party libraries is appealing
to ransomware authors. However, secure crypto libraries
are scarce, and only a limited pool to choose from exists.
Nonetheless, for our system, creating signatures for third
party libraries, or custom libraries is not any diﬀerent. Our
experience working with three diﬀerent libraries suggests
that adding support for further libraries can be achieved eas-
ily, and quickly. For example, we developed the signatures
required to detect Crypto++ within one day. Additionally,
our prototype hooks the Windows standard CSPRNG func-
tion, CryptGenRandom. By dynamically hooking, and record-
ing this system function PayBreak stores the base material
for session keys used by any ransomware leveraging many of
these alternative cryptographic libraries. Regardless what
code is used, malware analysts only have to identify the en-
cryption implementation once, and add it to PayBreak to
add support. Identi(cid:12)cation of cryptographic code does not
have to be a manual eﬀort.
Instead, the process may be
automated through a variety of means (e.g., [31]). Once
cryptographic code is identi(cid:12)ed, a wealth of work (e.g., [7,
17, 20, 27]) exists that aides in identifying similar code. To
sidestep the use of symmetric keys altogether, ransomware
authors might be tempted to encrypt data with exclusively
asymmetric primitives. While such a strategy is possible,
the high resource requirement and uncharacteristically fre-
quent use of asymmetric encryption could be addressed with
heuristics that monitor for these aspects. Despite Pay-
Break’s demonstrated eﬀectiveness against contemporary
cryptographic ransomware, a practical deployment would
have to address several issues that are out of scope for this
paper. These issues include, for example, teaching users
to keep private keys secure, or implement a secure rotation
system for the key vault to prevent unlimited growth of the
vault.
As evaluated in x5.2 PayBreak is able to recover from a
ransomware attack in hours. As described in x4.3, (cid:12)le re-
covery is independent of the ransomware family by means
of exhaustive search. This exhaustive search is an embar-
rassingly parallel workload and thus can be optimized al-
most arbitrarily with additional compute resources, such as
a cloud deployment. Furthermore, needing to recover from
a ransomware infection should be a rare and exceptional
situation. We submit that for a regular ransomware vic-
tim regaining access to encrypted data is paramount when
compared to the speed with which encrypted (cid:12)les can be
recovered.
We acknowledge that, identically to all practical online
protection systems, obfuscation and evasion can thwart the
protections aﬀorded by PayBreak. However, obfuscation
is only a concern for malware that statically links against
cryptographic libraries. Protection from families that use
the system-provided CryptoAPI is unaﬀected, as PayBreak
hooks the implementations of the API functions in the un-
obfuscated system DLLs. Furthermore, as our evaluation
shows, PayBreak is perfectly capable of protecting users
from malware that statically links cryptographic libraries, as
long as the malware is obfuscated with contemporary pack-
ers. In fact, all malware samples used for the evaluation in
this work were packed. Moreover, the samples from the Tox
family statically link the Crypto++ library. The academic
literature (e.g., [43]) and commercial sources (e.g., [14]) have
oﬀered advanced obfuscators for years. However, these ad-
vanced techniques have not gained signi(cid:12)cant traction in the
malware ecosystem at large. For example, Sun [44] reports
that 91% of the 103,392 analyzed samples were packed with
simple packers, such as UPX or ASPack, which do not in-
hibit the protections aﬀorded by PayBreak. Unfortunately,
we do not know the reasons that prevent malware authors
from making wide-spread use of more advanced obfuscation
techniques. PayBreak thus raises the bar for malware au-
thors and forces them to use evasive techniques that they so
far have resisted to employ.
Another evasive strategy that malware can implement to
evade PayBreak is to detect that PayBreak is running in
the victim’s computer, and accordingly jump over the in-
serted hooks. However, there is no reason that PayBreak
must install the hooks at the beginning of the targeted cryp-
tographic functions. We could modify PayBreak to insert
the hooks are arbitrary points in the function as long as the
relevant data structures (e.g., keys and encryption scheme
parameters) are still in scope. Similar to the obfuscation
scenario, PayBreak cannot provide guarantees against mal-
ware that speci(cid:12)cally aims to evade PayBreak. But Pay-
Break can signi(cid:12)cantly raise the bar for attackers’ success.
Finally, ransomware that is aware of PayBreak could try
to launch a denial of service attack by either corrupting the
public key used to escrow data in the vault or simply (cid:12)ll the
vault with nonsensical information. PayBreak can be mod-
i(cid:12)ed to have a dedicated (privileged i.e., running as SYSTEM)
process that appends to the vault and therefore protect the
integrity of the public key. An attack that (cid:12)lls the vault
with garbage before encrypting the victim’s (cid:12)les can only
hope to increase the time it takes to recover encrypted (cid:12)les.
The privileged process mentioned above could detect that
such an attack is ongoing and alert the user, or terminate
the oﬀending process.