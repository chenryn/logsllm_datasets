## 0x03 XSLT 安全
XSLT 因为其功能的强大导致历史中出过一些漏洞，如下两种 Payload 在被 Java XSLT 处理器解析时就会存在代码执行的问题：
所以首先尝试使用上述 Payload
进行测试，发现相关的操作已经被限制了，这其中可能会存在一些绕过方式，但并不是本次所需要关心的，这次主要在意的是作者如何通过常量池覆盖后续字节码结构，实现的
RCE 操作
## 0x04 控制常量池计数器
> 常量池：用于存放编译时期生成的各种 `字面量` 和 `符号引用`，这部分内容将在类加载后进入方法区/元空间的 `运行时常量池` 中存放
>
> 常量池计数器：从 `1` 开始，也即 `constant_pool_count=1` 时表示常量池中有 `0` 个常量项，第 `0` 项常量用于表达
> `不引用任何一个常量池项目` 的情况，常量池对于 Class 文件中的 `字段` 和 `方法` 等解析至关重要
可以使用 Java 自带的工具 `javap` 查看字节码文件中的常量池内容：`javap -v select.class`
也可以使用 [Classpy](https://github.com/zxh0/classpy) GUI
工具进行查看，该工具在点击左侧相应字段信息时会在右侧定位出相应的十六进制范围，在构造利用时提供了很大的帮助
但是这两个工具无法对首部结构正确的畸形字节码文件进行解析(只输出正确结构的部分)，并且未找到合适的解析工具
常量池表中具体存储的数据结构如下，根据 `tag` 标识来决定后续字节码所表达的含义：
尝试在 `select.xslt` 文件中添加 `` 并生成 Class 文件：
通过反编译后的 Java 代码中可以看到新增了 `AAA` 字符串
    public class select extends AbstractTranslet {
        ...
        public void template$dot$0(DOM var1, DTMAxisIterator var2, SerializationHandler var3, int var4) {
            var3.startElement("AAA");
            var3.endElement("AAA");
        }
        ...
    }
对应到常量池中实际将增加 `CONSTANT_String_info` 和 `CONSTANT_utf8_info` 两项，其中
`#092(CONSTANT_utf8_info)` 中存储着字面量 `AAA`，`#093(CONSTANT_String_info)` 的
`string_index` 则指向 `AAA` 字面量所处的下标
为了节省空间，对于相同的常量在常量池中只会存储一份，所以如下内容所生成的 Class 文件中的常量池计数器值依旧为 `139`
需要注意的是 `AA` 和 `AAA` 实际属于不同的常量，将得到的常量池计数器值为：`139+2=141`，因此：
**使用不同的字符串可以`字符串数量x2` 的形式增加常量池计数器的值**
然而在实际测试的过程中发现，通过如下方式增加常量，随着 `n` 不断的增加，所花费的时间也越来越大
    ...
解决方法是使用 `增加属性` 替代 `增加元素` 的方式增加常量池( **每增加一对属性，常量池+4** )
原因在于每新增一个 `元素(element)` 都将有 `translate()` 方法调用的开销，而新增 `属性` 只是增加一个
`Hashtable#put()` 方法调用，因此将大大减少执行时间
  * org.apache.xalan.xsltc.compiler.SyntaxTreeNode#translateContents
  * org.apache.xalan.xsltc.compiler.LiteralElement#checkAttributesUnique
除了可以通过字符串的形式增加常量池，根据漏洞作者的提示可以通过 `方法调用` 的形式添加 `数值类型` 的常量(数值需要 `> 32767`
才会存储至常量池表中)，如通过调用 `java.lang.Math#ceil(double)` 方法传入 `double` 数值类型，因为 `double`
属于基本数据类型，因此只会增加一个 `CONSTANT_Integer_info` 数据结构，所以 **每增加一个 double 数值，常量池+1**
## 0x05 Class 结构图
这里先展示一下整个 Class 文件最终构造的结构图，接下来将针对各个部分进行说明
## 0x06 利用构造说明
想详细了解 Java Class 字节码文件结构的可以参考链接：[The Class File
Format](https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4)
通过字节码结构可以看到，`constant_pool_count & 0xffff` 截断后，大于 `constant_pool_count`
部分的常量池将覆盖后续内容，从而可以完全控制整个类的结构
    ClassFile {
        u4             magic;                                // 魔术，识别 Class 格式 
        u2             minor_version;                        // 副版本号(小版本)
        u2             major_version;                        // 主版本号(大版本)
        u2             constant_pool_count;                  // 常量池计数器：用于记录常量池大小
        cp_info        constant_pool[constant_pool_count-1]; // 常量池表：0 位保留，从 1 开始写，所以实际常量数比 constant_pool_count 小 1
        u2             access_flags;                         // 类访问标识
        u2             this_class;                           // 类索引
        u2             super_class;                          // 父类索引
        u2             interfaces_count;                     // 接口计数器
        u2             interfaces[interfaces_count];         // 接口索引集合
        u2             fields_count;                         // 字段表计数器
        field_info     fields[fields_count];                 // 字段表
        u2             methods_count;                        // 方法表计数器
        method_info    methods[methods_count];               // 方法表
        u2             attributes_count;                     // 属性计数器
        attribute_info attributes[attributes_count];         // 属性表
    }
    cp_info {
        u1 tag;
        u1 info[];
    }
### access_flags & this_class
首先需要能够理解的是 **access_flags 第一个字节对应常量池的 tag** ，而 `tag` 值将决定后续的数据结构(查阅前面常量池结构表)
`access_flags` 的值决定了类的访问标识，如是否为 `public` ，是否为 `抽象类` 等等，如下为各个标识对应的 `mask` 值，当
`与操作值 != 0` 时则会增加相应的修饰符
在决定 `access_flag` 第一个字节的值(后续使用x1,x2..代替)之前，需要知道编译后的字节码会被进行怎样的处理，可以看到最终将得到
`TemplatesImpl` 对象，其中 `_bytecodes` 即为 XSLT 样式表编译后的字节码内容，熟悉 Java 反序列化漏洞的应该对
`TemplatesImpl` 类不陌生，之后 `newTransformer()` 方法调用将会触发 `defineClass()` 及
`newInstance()` 方法的调用
  * org.apache.xalan.xslt.Process#main
由于 `defineClass()` 过程无法触发类 `static{}` 方法块中的代码，所以需要借助 `newInstance()` 调用的过程来触发
`static{}`、`{}`、`构造函数` 方法块中的恶意代码，因此 **由于需要实例化类对象，所以类不能为接口、抽象类，并且需要被 public
修饰** ，所以 `access_flags` 需满足如下条件：
  * access_flags.x1 & 任意修饰符 == 0
  * access_flags.x2 & ACC_PUBLIC(0x01) != 0
这里选择设置 `access_flags.x1 = 0x08`，不选择 `access_flags.x1 = 0x01` 的原因在于字面量 `length`
变化会影响到 `bytes` 的数量，所以一旦发生变动，后续内容就会需要跟着变动，不太好控制
而 `access_flags.x2` 的值这里将其设置为 `0x07`，而不使用 `0x01`
的原因在于，其值的设定会影响到常量池的大小，根据后续构造发现常量池大小需要满足 `> 0x0600(1536)` 大小，这部分后续也会再进行说明
通过写入 `tag = 6` 的 `double` 数值常量(`java.lang.Math#ceil(double)`)，可以实现连续控制 8
个字节内容，所以 `this_class.x2 = 0x06`，根据前面可知，`this_class` 是一个指向常量池的 `常量池索引`，所以为了使得
`截断后的常量池最小`，所以这个值需要尽可能的小，由于 `0x0006` 已经占用了，所以最终确定值为 `this_class = 0x0106(262)`
在确认了 `access_flags` 的值后，接下来考虑的是如何进行设置，回看到如下这个图，`String` 类型的 `string_index`
指向前一项 `Utf8` 字面量的下标，因此 `tag = 8` `string_index = 0x0701` 则表示前一项是下标为 `0x0701 =
#1793` 的 `Utf8` 字面量，当前下标为 `#1794`，所以得出结论是 `access_flags` 之前应有 `1794(包含第 0 项)`
个常量，则 `constant_pool_count` 截断后的值固定为 `1794(0x0702)`，`access_flags.x2`
间接控制了常量池的大小
根据字节码规范要求，`this_class` 应指向一个 `CONSTANT_Class_info` 结构的常量，也即如下图中 `Class` 对应的下标
`#0006`
> The value of the this_class item must be a valid index into the
> constant_pool table. The constant_pool entry at that index must be a
> CONSTANT_Class_info structure (§4.4.1) representing the class or interface
> defined by this class file.
但是这里并不能选择常量池已有的这些 `Class常量`，原因在于这些 `Class常量` 是 XSLT 解析的过程中会使用到的类，而字节码最终会被
`defineClass()` 加载为 Class，将会导致类冲突问题
解决方法是通过如下方法调用的方式加载一些 XSLT 解析过程不会引用的类，因为类是懒加载的，只有在被使用到的时候才会被加载进 JVM，所以
`defineClass()` 调用时并不会存在
`com.sun.org.apache.xalan.internal.lib.ExsltStrings`，从而解决了类冲突的问题，之后通过在其之前填充一些常量，使得
`this_class = 0x0106(#262)` 刚好指向 `(Class):
com/sun/org/apache/xalan/internal/lib/ExsltStrings` 即可
     -->
### super_class
`super_class` 同样也需要指向 `CONSTANT_Class_info` 类型索引，并且因为 `TemplatesImpl`
的原因依旧需要继承 `org.apache.xalan.xsltc.runtime.AbstractTranslet` 抽象类，所以直接指向 `#0006`
即可(位置固定不变)
> For a class, the value of the super_class item either must be zero or must
> be a valid index into the constant_pool table. If the value of the
> super_class item is nonzero, the constant_pool entry at that index must be a
> CONSTANT_Class_info structure (§4.4.1) representing the direct superclass of
> the class defined by this class file.