title:WAPTEC: whitebox analysis of web applications for parameter tampering
exploit construction
author:Prithvi Bisht and
Timothy L. Hinrichs and
Nazari Skrupsky and
V. N. Venkatakrishnan
WAPTEC: Whitebox Analysis of Web Applications for
Parameter Tampering Exploit Construction
Prithvi Bisht
University of Illinois
Chicago, USA
PI:EMAIL
Timothy Hinrichs
University of Chicago
Chicago, USA
PI:EMAIL
Nazari Skrupsky
University of Illinois
Chicago, USA
PI:EMAIL
V.N. Venkatakrishnan
University of Illinois
Chicago, USA
PI:EMAIL
Abstract
Parameter tampering attacks are dangerous to a web application
whose server fails to replicate the validation of user-supplied data
that is performed by the client. Malicious users who circumvent
the client can capitalize on the missing server validation. In this pa-
per, we describe WAPTEC, a tool that is designed to automatically
identify parameter tampering vulnerabilities and generate exploits
by construction to demonstrate those vulnerabilities. WAPTEC
involves a new approach to whitebox analysis of the server’s code.
We tested WAPTEC on six open source applications and found
previously unknown vulnerabilities in every single one of them.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Veriﬁcation; K.4.4 [Electronic
Commerce]: Security; K.6.5 [Security and Protection]: Unau-
thorized access
General Terms
Languages, Security, Veriﬁcation
Keywords
Parameter Tampering, Exploit Construction, Program Analysis, Con-
straint Solving
1.
INTRODUCTION
Interactive processing and validation of user input is increasingly
becoming the de-facto standard for applications programmed for
the Web. With the advent of client-side scripting, there has been a
rapid transition in the last few years to process and validate user in-
put in the browser itself, before it is actually submitted to the server.
Some of the advantages of client-side processing is the elimination
of delays associated with purely server-side data validation, and re-
duction of server-side loads.
Consider the example of a shopping cart application, where in-
puts such as the items in the shopping cart, submitted by a user are
supplied as parameters to the server side. The server often makes
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–31, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
certain assumptions about those parameters, e.g., the credit card
expiration date is valid (not a past date). Most of those assump-
tions are being enforced by JavaScript on the client side, thereby
avoiding extra round trips to the server caused by incorrect data
entry. However, malicious clients often circumvent the client-side
validation (e.g., craft HTTP requests by hand), and supply invalid
data to the server. The correct way to program these applications is
to ensure that the server performs the same (or stricter) validation
checks that are performed at the client. If this is not the case with a
server, then it is vulnerable to parameter tampering attacks.
Prior work [7] identifying such vulnerabilities in web applica-
tions used a blackbox approach that involved generating opportu-
nities for potential tampering vulnerabilities. This blackbox ap-
proach, while being most suitable for testing web sites whose server
side code isn’t available, involves human labor in converting oppor-
tunities to actual exploits.
This paper improves the state-of-art by seeking a fully automated
approach to identify the presence of such vulnerabilities in a web
application, thus eliminating the need for a human in the loop.
Since there is no human in the loop, our approach must identify
such vulnerabilities without resulting in false alarms. Therefore,
our approach must include mechanisms to conﬁrm the existence of
each potential vulnerability it identiﬁes.
The basic problem of detecting parameter tampering vulnerabil-
ities is to identify validation checks that are “missing” in a server.
This can be done if we have a formal speciﬁcation of the set of
checks that must be performed by the server. Developing such
speciﬁcations is often done through a manual process, and is a dif-
ﬁcult task for legacy applications.
The key idea explored in this paper stems from the observation
that in a web application, a client code already constitutes a de-
scription of the server’s intentions regarding parameter validation
checks. We can therefore, extract a speciﬁcation directly from the
client code. This speciﬁcation can then be used to check the server
side code for vulnerabilities.
Using the above observation, we develop a new formulation of
this problem of automatically detecting parameter tampering vul-
nerabilities. In our formulation, a web application is said to be vul-
nerable when the server-side parameter validation is weaker than
client-side validation. In other words, the server performs fewer
checks than the client as to the well-formedness of the client sup-
plied input. Such weaknesses point to security vulnerabilities on
the server that can be exploited by malicious users. Whenever we
ﬁnd such a weakness, our approach automatically generates a con-
crete instance of the vulnerability in the form of an exploit.
Our approach tool that we call WAPTEC (Whitebox Analysis
for Parameter Tampering Exploit Construction), performs web ap-
plication vulnerability analysis by combining techniques from for-
575Listing 1: client.js
var q = document.getElementById("quantity");
var n = document.getElementById("name");
if(q  10){
return false; // show error, don’t submit
1 function validateForm(){
2
3
4
5
6
7
8
9
10
11 }
} else {
}
return true; // submit form
mal logic and constraint solving, symbolic evaluation and dynamic
program analysis. Our approach implementation is targeted to-
wards applications written using the LAMP (Linux, Apache, MYSQL,
PHP) stack, one of the most widely used development and deploy-
ment platforms for web applications.
Due to the inherent multi-tiered nature of a LAMP application,
the analysis that we need has to reason about the client side code
that validates user supplied inputs, the server side transaction pro-
cessing logic and (often) the database used for persistent storage.
These tiers are implemented as different modules in different lan-
guages (HTML / JavaScript, PHP and SQL), and our core analysis
needs to abstract the validation logic in each of these tiers and rea-
son about them. While the Links [9, 10] programming language
and several other frameworks [1, 8, 2] facilitate principled con-
struction of multiple tiered applications, they are not applicable to
reason across the three tiers of existing (legacy) LAMP applica-
tions.
To the best of our knowledge, this paper presents the ﬁrst anal-
ysis that presents a uniform framework to reason about the three
different tiers of an interactive LAMP application. Since our anal-
ysis spans the client, server and database, it is comprehensive and
precise about its understanding of the validation performed on web
application inputs, and identiﬁes vulnerabilities “by construction”.
We discuss the design and implementation of this framework in this
paper.
We evaluated six open source web applications using WAPTEC
and were able to ﬁnd 45 previously unknown vulnerabilities span-
ning every single one of these applications. These vulnerabilities
have serious real world consequences including privilege escalation
to an administrator account, overwriting ﬁles on the web server and
denial of service. Furthermore, we show how our approach elimi-
nates false positives and false negatives that are inherent in a black-
box approach.
This paper is organized as follows: Section 2 presents a run-
ning example used in the rest of this paper. Section 3 provides a
high-level overview of the basic ideas behind our approach. Sec-
tion 4 describes the architecture of WAPTEC and its different com-
ponents. Section 5 presents the implementation of WAPTEC. Sec-
tion 6 presents an evaluation of our approach over several open
source web applications. Section 7 presents related work. In Sec-
tion 8 we conclude.
2. RUNNING EXAMPLE
Our main thesis is that it is possible to use the client of a web
application as a speciﬁcation of the server’s intended behavior. The
basis for this thesis stems from the following observations:
• Validation checks that are implemented at a client convey the
“intention” of the server side of a web application.
Listing 2: server.php
$n = substr ($n, 10);
// generate HTML to show a
//selected card in the form
1 $ca = $_POST[’card’];
2 if($ca matches ’card-1’|’card-2’)
3
4
5
6 $n = $_POST[’name’];
7 if( strlen($n) > 10 )
8
9
10 if($_GET[’op’] == "purchase"){
11
12
13
14
15
16
17
if(isset($_POST[’discount’]))
$cost = $_POST[’quantity’] * $price + $shipping;
$cost = $cost - $_POST[’discount’] * $cost / 100;
$q = "INSERT INTO orders (‘name‘, ‘address‘, ‘card‘,
‘cost‘) ";
18
$q .= " VALUES (’$n’, ’$_POST[address]’, $ca, $cost)
;";
mysql_query($q);
if(mysql_error())
19
20
21
22
23 }
$html .= " Please specify an address";
• Server code on occasion does not replicate these intended
checks often leading to security ﬂaws.
The second point is worth further elaborating. The reason for the
omission of security checks is multi-fold: ﬁrst, not all web devel-
opers are aware of the security concerns about data received from a
client cannot be trusted to respect these intended checks and there-
fore need to be replicated. Secondly, the client and the server of-
ten originate from two different codebases, the typical example is
that a client is written in JavaScript and the server in one of the
many platforms such as PHP, ASP or Java. When there are two
codebases, improvements made to one (such as additional new val-
idation checks and maintenance updates) do not always translate to
changes to the other, leading to security violations. In this work,
our aim is to detect such mismatches through automated code anal-
ysis.
We illustrate the general ideas in this work with the help of a run-
ning example. Consider a web application that provides a shopping
checkout form with textﬁelds name, address, item quantity, a
dropdown menu displaying previously used credit cards to pick the
card for the current purchase and a hidden ﬁeld op that is set to
“purchase". (These ﬁelds assume the usual meaning as in a typical
shopping session). Listing 1 and 2 list the client side and server
side code of this application, respectively.
The client side code in Listing 1 performs its validation checks
at lines 6 through 7. The code checks if the quantity ﬁeld is a
positive integer, and if the supplied name is less than 10 characters,
and submits input to the server if these conditions are met.
The server side code shown in Listing 2 computes the cost of
purchase and inserts this into the orders database. To illustrate the
basic parameter tampering attack, notice that the validation check
for quantity is not replicated in the server. It is therefore possi-
ble that a malicious client can perform this attack by submitting a
negative quantity ﬁeld, reducing the cost computed to a low value.
In order to uncover this attack, the client JavaScript code in List-
ing 1 must be analyzed, leading to the inference that the constraint
on the quantity ﬁeld restricts it to a non-negative number. Sim-
ilarly, the server PHP code in Listing 2 must be analyzed to infer
576Figure 1: System Workﬂow
that it does not impose any constraints on this ﬁeld. In addition, the
following challenges need to be addressed as well.
Restrictive servers. While servers occasionally fail to replicate
client checks, they are often designed to be more restrictive than
clients in processing user input. In our example, note that the client
restricts the length of the name ﬁeld to 10 characters or less. On
an input that does not meet this constraint (has 11 or more charac-
ters), the server chooses to “sanitize” this ﬁeld by considering only
the ﬁrst 10 characters of the submitted value. A naive approach
that doesn’t satisfy the client restrictions and fails to consider the
effect of sanitization in reaching a sensitive operation on the server
will generate a false alarm. Our analysis is designed to factor such
changes to input and avoids generating false alarms (§4.2).
Handling database operations. Any server side analysis should
not only consider the effect of server side code, but also the ef-
fect of its database operations. For instance, database operations
may further constrain data submitted by a client through integrity
constraints. Failing to consider these constraints will also generate
false alarms. For example, say the address ﬁeld in database has an
integrity constraint that ensures that it is not null. Failing to con-
sider such constraints will generate false alarms. Our approach is
designed to correctly handle the effect of such database constraints
(§4.3).
Negative Parameter Tampering. Sometimes a server side ﬁle,
such as server.php is written to handle multiple forms. In the
above example, the server-side code additionally checks for pa-
rameter discount. While this code was intended for processing
a totally different form that contains discounts for the user, it is
not uncommon for LAMP applications to reuse the code that has
some shared processing of content. An exploit that introduces this
ﬁeld discount can result in providing unlimited discounts to the
total price. We call this negative tampering, as it is performed by
an input ﬁeld that is not present in the original form. By whitebox
analysis of server side code, we are able to identify such vulnera-
bilities. We found a zero-day negative tampering attack on the open
source application dcpportal that enables privilege escalation of
an ordinary user to an administrator (§6).
3. APPROACH OVERVIEW
WAPTEC’s basic approach to identifying parameter tampering
exploits (inputs the client rejects but the server accepts) on a web
application is a two-step process: (i) ﬁnd server control paths that
if taken result in the input being accepted, i.e., paths that lead to
sensitive operations (such as the INSERT query in line 17 of our
running example), and (ii) ﬁnd inputs leading to each such control
path that the client rejects (such as submitting a negative quantity
to the server). In WAPTEC, step (i) is accomplished using a form
of constraint-guided search that probes the server with inputs that
the server ought to accept and then analyzes the code the server
executed to determine if that control path led to a sensitive sink.
We call any input the server ought to accept that results in execu-
tion of a sensitive operation a benign input. Step (ii) is also ac-
complished by probing the server with inputs and checking for a
sensitive sink on the resulting control path, though this time the
inputs are those the server ought to reject. Any input the server
ought to reject that results in execution of a sensitive operation is a
hostile input. Hostile inputs are correct by construction parameter
tampering exploits.
Unlike many bug-ﬁnding program analysis efforts, WAPTEC
leverages the existence of client-side code (a web form) for both
steps. When searching for a benign input in step (i), WAPTEC
only generates inputs that the web form accepts and would submit
to the server; moreover, because the client code is relatively sim-