(cond. on X)
f
d0
d0
d∗
≥0
d∗
0
d∗
1
d∗
≥2
F3(u1,1)
(seq1)
1
0
0
0
1
F3(u1,1)
(seq0)
1
0
1
0
1
0
0
case D2(u1,1)
c1
c2
c3
c4
c5
c6
c7
For example, in case c3,
• D2(u1,1) = d0: When the second ORAMWrite begins, the
physical block u1,1 contains the logical block d0.
• S2(d0) = 0: When the second ORAMWrite begins, the stash
is empty.
• (FreeSet2|X) = 1: The second ORAMWrite found at least
one block in the free set S0.
• For seq0, the second write is w0. From FreeSet2 = 1, a new d0
from w0 will be written in a free block, and u1,1 containing
the old d0 is freed.
• For seq1, the second write is w1. From FreeSet2 = 1, a new
d1 from w1 will be written in a free block, but u1,1 containing
d0 is not affected.
0
Note that the first ORAMWrite in both seq0 and seq1 is the same
with w0, so D2(u1,1) and S2(d0) is identically distributed for both
seq0 and seq1. Moreover, observe that the distribution of X depends
on only u1,1 because the ORAMWrite samples U2 at random. Finally,
Pr[FreeSet2] is always the same, since the number of free blocks in
the second ORAMWrite is always the same with N .
Based on the table and the above observation, we have the fol-
lowing:
0 − p
p
1 ≥ Pr[c3 ∧ X](qy − qn) − Pr[c6 ∧ X](qy − qn)
·(cid:0) Pr[c3 ∧ X] − Pr[c6 ∧ X](cid:1)
· Pr[X] ·(cid:0) Pr[c3|X] − Pr[c6|X](cid:1)
·(cid:0) Pr[c3|X] − Pr[c6|X](cid:1)
≥
=
≥
k
2N
k
2N
k
4N
Now, let’s first calculate the lower bound on Pr[c3|X]. If the first
ORAMWrite chooses at least one block from the free set and writes
d0 in u1,1, it must be D2(u1,1) = d0 and S2(d0) = 0. Therefore,
Pr[D2(u1,1) = d0, S2(d0) = 0] ≥ 1
2 · 1
k
.
Moreover, at least probability 1
a block from the freeset, which implies that
2, the second ORAMWrite will find
Pr[c3|X] ≥ 1
4k
.
To calculate the upper bound on Pr[c6|X], observe that D2(u1,1) =
d∗
1 implies that u1,1 contained d∗
1 even before the first ORAMWrite
w0. Therefore, we have
Pr[c6|X] ≤ Pr[ u1,1 has d∗
1 before the 1st ORAMWrite] =
1
2N
.
Therefore, we have
·(cid:16) 1
4k
(cid:17)
− 1
2N
= N − 2k
4N
2
.
p
0 − p
1 ≥ k
4N
7 RELATED WORK
Oblivious RAM (ORAM) and applications. ORAM protects the
access pattern so that it is infeasible to guess which operation is
occurring and on which item. Since the seminal work by Goldreich
and Ostrovsky [9], many works have focused on improving effi-
ciency and security of ORAM (for example [18, 23, 25, 29] just to
name a few; see the references therein).
ORAM plays as an important tool to achieve secure cloud stor-
age [16, 27, 28] and secure multi-party computation [10, 14, 15, 32,
34] and secure processors [8, 13, 19]. There also have been works to
hide the access pattern of protocols accessing individual data struc-
tures, e.g., maps, priority queues, stacks, and queues and graph
algorithms on the cloud server [3, 24, 30, 33]. The work of [11]
considers obliviousness in the P2P content sharing system.
Write-only obliviousness. Blass et al. [4] considers write-only
ORAM (WoORAM), and gave a WoORAM construction much more
efficient than the traditional ORAM constructions. They applied
WoORAM to deniable storage scenarios and gave a WoORAM-based
construction of hidden volume encryption (HiVE). Aviv et al. [2]
gave a construction of oblivious synchronization and backup for the
cloud environment. They observed that write-only obliviousness is
sufficient for the scenario, since the client stores a complete local
copy of his data, and therefore read accesses are naturally hidden
from the adversary.
Deniable storage. Anderson et al. [1] proposed steganography-
based approaches, that is, hiding blocks within cover files or random
data. There are works based on his suggestion [17, 20], but they
don’t allow deniability against a snapshot adversary.
Another approach is hidden volumes. Unfortunately, existing so-
lutions such as TrueCrypt (discontinued now) [31], Mobiflage [26]
and MobiPluto [7] are secure only against a single-snapshot adver-
sary. HIVE [4] provides security even against a multiple-snapshot
adversary. DEFY [22] is the deniable log-structured file system
specifically designed for flash-based, solidstate drives; although it is
secure against a multiple-snapshot adversary, it doesn’t scale well.
8 CONCLUSION
We presented DetWoORAM, a stash-free, deterministic write-only
oblivious ORAM with sequential write patterns. This scheme achieves
asymptotic improvement in write communication costs, O(B log N),
requiring exactly 2B physical writes per logical write. We further
showed that prior schemes to improve on HiVE-WoORAM are inse-
cure. Finally, we implemented and evaluated DetWoORAM, and, for
sequential writing, it incurs only a 3-4.5x overhead on HDD and 10-
14x on SSD compared to using encryption only. It is 19x faster than
HiVE-WoORAM, the previous best, secure scheme. It is also practi-
cal; the theoretical write complexity is optimal, and DetWoORAM
with an SSD backend has similar (sometimes better) performance
compared to using encryption only on a spinning-platter HDD in a
similar price range.
ACKNOWLEDGMENTS
The authors thank the CCS program committee for their valuable
suggestions. This work is supported by the Office of Naval Re-
search under awards N0001416WX01489 and N0001416WX01645,
and by the National Science Foundation under awards 1618269 and
1319994.
REFERENCES
[1] Ross J. Anderson, Roger M. Needham, and Adi Shamir. 1998. The Steganographic
File System. In Information Hiding, Second International Workshop, Portland, Ore-
gon, USA, April 14-17, 1998, Proceedings. Springer, Berlin, Heidelberg, 73–82.
https://doi.org/10.1007/3-540-49380-8_6
[2] Adam J Aviv, Seung Geol Choi, Travis Mayberry, and Daniel S Roche. 2017.
ObliviSync: Practical Oblivious File Backup and Synchronization. In NDSS 2017
(NDSS’17). The Internet Society, San Diego, CA, USA. https://doi.org/10.14722/
ndss.2017.23188
[3] Marina Blanton, Aaron Steele, and Mehrdad Aliasgari. 2013. Data-oblivious
graph algorithms for secure computation and outsourcing. In ASIACCS 13, Kefei
Chen, Qi Xie, Weidong Qiu, Ninghui Li, and Wen-Guey Tzeng (Eds.). ACM Press,
Hangzhou, China, 207–218.
[4] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarlioglu. 2014.
Toward Robust Hidden Volumes Using Write-Only Oblivious RAM. In ACM CCS
14, Gail-Joon Ahn, Moti Yung, and Ninghui Li (Eds.). ACM Press, Scottsdale, AZ,
USA, 203–214.
[5] Anrin Chakraborti, Chen Chen, and Radu Sion. 2017. DataLair: Efficient Block
Storage with Plausible Deniability against Multi-Snapshot Adversaries. Pro-
ceedings on Privacy Enhancing Technologies 2017 (July 2017), 175–193.
Issue
3.
[6] Anrin Chakraborti, Chen Chen, and Radu Sion. 2017. DataLair: Efficient Block
Storage with Plausible Deniability against Multi-Snapshot Adversaries. CoRR
abs/1706.10276 (2017).
[7] Bing Chang, Zhan Wang, Bo Chen, and Fengwei Zhang. 2015. MobiPluto: File
System Friendly Deniable Storage for Mobile Devices. In Proceedings of the 31st
Annual Computer Security Applications Conference, Los Angeles, CA, USA, Decem-
ber 7-11, 2015. 381–390.
[8] Christopher W. Fletcher, Ling Ren, Albert Kwon, Marten van Dijk, and Srini-
vas Devadas. 2015. Freecursive ORAM: [Nearly] Free Recursion and Integrity
Verification for Position-based Oblivious RAM. In Proceedings of the Twentieth
International Conference on Architectural Support for Programming Languages and
Operating Systems, ASPLOS ’15, Istanbul, Turkey, March 14-18, 2015. 103–116.
[9] Oded Goldreich and Rafail Ostrovsky. 1996. Software Protection and Simulation
on Oblivious RAMs. J. ACM 43, 3 (1996), 431–473. https://doi.org/10.1145/233551.
233553
[10] S. Dov Gordon, Jonathan Katz, Vladimir Kolesnikov, Fernando Krell, Tal Malkin,
Mariana Raykova, and Yevgeniy Vahlis. 2012. Secure two-party computation
in sublinear (amortized) time. In ACM CCS 12, Ting Yu, George Danezis, and
Virgil D. Gligor (Eds.). ACM Press, Raleigh, NC, USA, 513–524.
[11] Yaoqi Jia, Tarik Moataz, Shruti Tople, and Prateek Saxena. 2016. OblivP2P:
An Oblivious Peer-to-Peer Content Sharing System. In 25th USENIX Security
Symposium, USENIX Security 16, Austin, TX, USA, August 10-12, 2016. 945–962.
[12] Lichun Li and Anwitaman Datta. 2013. Write-Only Oblivious RAM based
Privacy-Preserved Access of Outsourced Data. Cryptology ePrint Archive, Report
2013/694. (2013). http://eprint.iacr.org/2013/694.
[13] Chang Liu, Austin Harris, Martin Maas, Michael W. Hicks, Mohit Tiwari, and
Elaine Shi. 2015. GhostRider: A Hardware-Software System for Memory Trace
Oblivious Computation. In Proceedings of the Twentieth International Conference
on Architectural Support for Programming Languages and Operating Systems,
ASPLOS ’15, Istanbul, Turkey, March 14-18, 2015. 87–101.
[14] Chang Liu, Yan Huang, Elaine Shi, Jonathan Katz, and Michael W. Hicks. 2014.
Automating Efficient RAM-Model Secure Computation. In 2014 IEEE Symposium
on Security and Privacy. IEEE Computer Society Press, Berkeley, CA, USA, 623–
638. https://doi.org/10.1109/SP.2014.46
[15] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015.
ObliVM: A Programming Framework for Secure Computation. In 2015 IEEE
Symposium on Security and Privacy. IEEE Computer Society Press, San Jose, CA,
USA, 359–376. https://doi.org/10.1109/SP.2015.29
[16] Travis Mayberry, Erik-Oliver Blass, and Agnes Hui Chan. 2014. Efficient Private
File Retrieval by Combining ORAM and PIR. In NDSS 2014. The Internet Society,
San Diego, CA, USA.
[17] Andrew D. McDonald and Markus G. Kuhn. 1999. StegFS: A Steganographic
File System for Linux. In Information Hiding, Third International Workshop, IH’99,
Dresden, Germany, September 29 - October 1, 1999, Proceedings. 462–477.
[18] Tarik Moataz, Travis Mayberry, and Erik-Oliver Blass. 2015. Constant Commu-
nication ORAM with Small Blocksize. In ACM CCS 15, Indrajit Ray, Ninghui Li,
and Christopher Kruegel: (Eds.). ACM Press, Denver, CO, USA, 862–873.
[19] Kartik Nayak, Christopher Fletcher, Ling Ren, Nishanth Chandran, Satya Lokam,
Elaine Shi, and Vipul Goyal. 2017. Hop: Hardware makes obfuscation practical.
In 24th Annual Network and Distributed System Security Symposium, NDSS.
[20] HweeHwa Pang, Kian-Lee Tan, and Xuan Zhou. 2003. StegFS: A Steganographic
File System. In Proceedings of the 19th International Conference on Data Engineer-
ing, March 5-8, 2003, Bangalore, India. 657–667.
[21] Kenneth G. Paterson and Mario Strefler. 2015. A Practical Attack Against the Use
of RC4 in the HIVE Hidden Volume Encryption System. In ASIACCS 15, Feng Bao,
Steven Miller, Jianying Zhou, and Gail-Joon Ahn (Eds.). ACM Press, Singapore,
475–482.
[22] Timothy Peters, Mark Gondree, and Zachary N. J. Peterson. 2015. DEFY: A
Deniable, Encrypted File System for Log-Structured Storage. In NDSS 2015. The
Internet Society, San Diego, CA, USA.
[23] Ling Ren, Christopher W. Fletcher, Albert Kwon, Emil Stefanov, Elaine Shi, Marten
van Dijk, and Srinivas Devadas. 2015. Constants Count: Practical Improvements
to Oblivious RAM. In 24th USENIX Security Symposium, USENIX Security 15,
Washington, D.C., USA, August 12-14, 2015. 415–430.
[24] Daniel S. Roche, Adam J. Aviv, and Seung Geol Choi. 2016. A Practical Oblivious
Map Data Structure with Secure Deletion and History Independence. In 2016
IEEE Symposium on Security and Privacy. IEEE Computer Society Press, San Jose,
CA, USA, 178–197. https://doi.org/10.1109/SP.2016.19
[25] Cetin Sahin, Victor Zakhary, Amr El Abbadi, Huijia Lin, and Stefano Tessaro.
2016. TaoStore: Overcoming Asynchronicity in Oblivious Data Storage. In 2016
IEEE Symposium on Security and Privacy. IEEE Computer Society Press, San Jose,
CA, USA, 198–217. https://doi.org/10.1109/SP.2016.20
[26] Adam Skillen and Mohammad Mannan. 2014. Mobiflage: Deniable Storage
Encryptionfor Mobile Devices. IEEE Trans. Dependable Sec. Comput. 11, 3 (2014),
224–237.
[27] Emil Stefanov and Elaine Shi. 2013. ObliviStore: High Performance Oblivious
Cloud Storage. In 2013 IEEE Symposium on Security and Privacy. IEEE Computer
Society Press, Berkeley, CA, USA, 253–267.
[28] Emil Stefanov and Elaine Shi. 2013. ObliviStore: High Performance Oblivious
Distributed Cloud Data Store. In NDSS 2013. The Internet Society, San Diego, CA,
USA.
[29] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W. Fletcher, Ling Ren,
Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM: an extremely simple
oblivious RAM protocol. In ACM CCS 13, Ahmad-Reza Sadeghi, Virgil D. Gligor,
and Moti Yung (Eds.). ACM Press, Berlin, Germany, 299–310.
[30] Tomas Toft. 2011. Brief Announcement: Secure data structures based on multi-
party computation. In 30th ACM PODC, Cyril Gavoille and Pierre Fraigniaud
(Eds.). ACM, San Jose, CA, USA, 291–292.
[31] TrueCrypt. 2017. (discontinued). (2017). http://www.truecrypt.org/.
[32] Xiao Wang, T.-H. Hubert Chan, and Elaine Shi. 2015. Circuit ORAM: On Tightness
of the Goldreich-Ostrovsky Lower Bound. In ACM CCS 15, Indrajit Ray, Ninghui
Li, and Christopher Kruegel: (Eds.). ACM Press, Denver, CO, USA, 850–861.
[33] Xiao Shaun Wang, Kartik Nayak, Chang Liu, T.-H. Hubert Chan, Elaine Shi,
Emil Stefanov, and Yan Huang. 2014. Oblivious Data Structures. In ACM CCS
14, Gail-Joon Ahn, Moti Yung, and Ninghui Li (Eds.). ACM Press, Scottsdale, AZ,
USA, 215–226.
[34] Samee Zahur, Xiao Shaun Wang, Mariana Raykova, Adria Gascón, Jack Doerner,
David Evans, and Jonathan Katz. 2016. Revisiting Square-Root ORAM: Efficient
Random Access in Multi-party Computation. In 2016 IEEE Symposium on Security
and Privacy. IEEE Computer Society Press, San Jose, CA, USA, 218–234. https:
//doi.org/10.1109/SP.2016.21