To improve the clarity, coherence, and professionalism of the text, I have reorganized and refined it as follows:

---

### One-Way Latency Calculation
The one-way latency is derived by dividing the Round-Trip Times (RTTs) by two. The average and maximum one-way latencies are 91ms and 399ms, respectively. When the number of simulated nodes exceeds the number of measured DNS servers, we simulate multiple nodes at a single DNS server site.

### Simulation Setup
Unless otherwise specified, our results are based on a 1,024-node system. The simulation proceeds as follows: Initially, all nodes start simultaneously, and one random node is designated as the root of the tree. For a target node degree \( C_{\text{degree}} \), each node initiates connections to \( C_{\text{degree}} \) random nodes. After initialization, the average node degree is \( C_{\text{degree}} \), and all neighbors are chosen randomly. The overlay and the tree then adapt under GoCast’s maintenance protocols for 500 seconds in simulated time. After 500 seconds, multicast messages are injected into the overlay from random source nodes at a rate of 100 messages per second.

### GoCast Parameters
- **Gossip Interval (\( t \))**: 0.1 seconds (suggested by Bimodal Multicast [2]).
- **Maintenance Interval (\( r \))**: 0.1 seconds.
- **Default Target Node Degrees**:
  - \( C_{\text{rand}} = 1 \)
  - \( C_{\text{near}} = 5 \)

### Message Propagation Delay Comparison
We compare the message propagation delay under different multicast protocols. The delay is averaged over 1,000 multicast messages injected from random source nodes. Figure 3(a) shows the results for the ideal case when no node fails.

- **GoCast**: This curve represents the complete GoCast protocol, where messages propagate both through the tree and through gossips exchanged between overlay neighbors.
- **Proximity Overlay**: A simplified version of GoCast that only propagates messages through gossips exchanged between overlay neighbors. Each node maintains 5 nearby neighbors and 1 random neighbor.
- **Random Overlay**: Another simplified version of GoCast that only propagates messages through gossips exchanged between overlay neighbors. Each node maintains 6 random neighbors.
- **Gossip**: A push-based gossip protocol similar to that used in Bimodal Multicast. Every 0.1 seconds, each node sends a gossip to a random node with a fanout of 5.
- **No-Wait Gossip**: Upon receiving a multicast message, a node immediately gossips the message to 5 other nodes without waiting for the next gossip period (i.e., \( t = 0 \)).

#### Results
- **GoCast** disseminates messages significantly faster than all other protocols due to the efficient tree structure with low-latency links. On average, multicast messages reach every node within 0.33 seconds.
- **Gossip** is the slowest in message propagation. With a fanout of 5, some nodes never receive some of the 1,000 multicast messages due to the randomness of gossips.
- **No-Wait Gossip** introduces higher gossip traffic but is still not as fast as GoCast because it always sends gossips first and then the actual multicast messages upon requests, incurring extra delay.
- **Random Overlay** has a message delay similar to Gossip, but every node receives every message, guaranteed by the connectivity of the overlay.
- **Proximity Overlay** propagates messages faster than Random Overlay and Gossip due to its low-latency links.

### Stress Test with Node Failures
Figure 3(b) evaluates the protocols under a stress test where 20% of nodes fail concurrently at 500 seconds of simulated time. The failed nodes are selected uniformly at random. After node failures, multicast messages are injected, but the system does not execute any GoCast maintenance protocols to repair the overlay or the tree.

- **GoCast**, **Proximity Overlay**, and **Random Overlay** still deliver every multicast message to every live node.
- **Gossip** shows a higher fraction of live nodes not receiving some multicast messages in the face of node failures.
- **GoCast** is more sensitive to node failures because the tree is broken into fragments, and messages must propagate among the fragments through gossips.

### Scalability Evaluation
Figures 4(a) and 4(b) compare the delay of multicast messages in the complete GoCast protocol between a 1,024-node system and an 8,192-node system.

- **No Node Failures**: The difference between the two systems is small. For the 8,192-node system, a message reaches all nodes within 0.42 seconds on average.
- **20% Node Failures**: The difference becomes more significant. The 8,192-node system has a longer tail in the message delay distribution, with some nodes experiencing delays about 60% longer than the longest delay in the 1,024-node system. The larger system's tree is broken into more fragments, leading to slower message propagation through gossips.

Overall, the increase in message delay is moderate as the system size increases by eightfold, indicating that GoCast is scalable.

### Adaptation of Overlay and Tree
This experiment simulates a 1,024-node system. Initially, all nodes start simultaneously, and each node initiates three random links. After initialization, the average node degree is six. GoCast’s maintenance protocols then adapt the overlay and the tree over time, with a target random degree of one and a target nearby degree of five.

---

This revised version aims to provide a clearer and more professional presentation of the content.