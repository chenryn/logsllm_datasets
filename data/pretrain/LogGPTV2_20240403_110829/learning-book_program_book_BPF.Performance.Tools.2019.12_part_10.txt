CPUS
ne Manager
IP
Net Device
roge_
ory
DRAM
bloek
s@p:
xfa:
jbd2:
sesi:
irq1
Software Events
00110-0
pape-fgats
Figure 2-9 B
BPF event support
These event sources are explained in the following sections.
20 Cor-Paul Bezemer researched differential flan
 graphs and developed the first solution [Bezemer 15].
---
## Page 83
46
Chapter 2 Technology Background
2.7kprobes
kprobes provide kernel dynamic instrumentation, and were developed by a team at IBM based on
their DProbes tracer in 2000. However, DProbes did not get merged into the Linux kernel, while
kprobes did. kprobes arrived in Linux 2.6.9, which was released in 2004.
kprobes can create instrumentation events for any kernel function, and it can instrument
instructions within functions. It can do this live, in production environments, without needing
to either reboot the system or run the kernel in any special mode. This is an amazing capability: It
means we can instrument any of the tens of thousands of kernel functions in Linux to create new
custom metrics as needed.
The kprobes technology also has an interface called kretprobes for instrumenting when functions
return, and their return values. When kprobes and kretprobes instrument the same function,
timestamps can be recorded to calculate the duration of a function, which can be an important
metric for performance analysis.
2.7.1 How kprobes Work
The sequence for instrumenting a kernel instruction with kprobes is [40]:
A. If it is a kprobe:
1. Bytes from the target adress are copied and saved by kprobes (enough bytes to span
their replacement with a breakpoint instruction).
2. The target address is replaced with a breakpoint instruction: int3 on x86_64.
(If kprobe optimization is possible, the instruction is jmp.)
3. W'hen instruction flow hits this breakpoint, the breakpoint handler checks whether the
breakpoint was installed by kprobes, and, if it was, executes a kprobe handler.
4. The original instructions are then executed, and instruction flow resumes.
ae a on peq pardoo are saq peo ag ppau auo ou st aqod a uau s
address, and the instructions are restored to their original state.
B. If it is a kprobe for an address that Ftrace already instruments (usually function entries),
[ nspee] aas qssod aq Aeu uoezdo aqoud pseq-oen ue
1. An Ftrace kprobe handler is registered as an Ftrace operation for the traced function
2. The function executes its built-in call in the function prologue (fentry. with gcc
4.6+ and x86), which calls in to Ftrace. Ftrace calls the kprobe handler, and then returns
to executing the function.
3. When the kprobe is no longer nexded, the Ftrace-kprobe handler is removed from
Ftrace.
C. If it is a kretprobe:
1. A kprobe is created for the entry to the function.
2. When the function entry kprobe is hit, the return address is saved and then replaced
with a substitute (*°trampoline") function: kretprobe_trampoline)
---
## Page 84
2.7kprobes
47
3. W'hen the function finally calls return (e.g., the ret instruction), the CPU passes control
to the trampoline function, which executes the kretprobe handler.
4. The kretprobe handler finishes by returning to the saved return address.
5. When the kretprobe is no longer needed, the kprobe is removed
The kprobe handlers may run with preemption dlisabled or interrupts disabled, depending on the
architecture and other factors.
Modifying kernel instruction text live may sound incredibly risky, but it has been designed to
be safe. This design includes a blacklist of functions that kprobe will not instrument, which
include kprobes itself, to avoid a recursive trap condition.α* kprobes also make use of safe tech-
niques for inserting breakpoints: the x86 native int3 instruction, or stop_machine() when
the jmp instruction is used to ensure that other cores do not execute instructions as they are
being modified. The biggest risk in practice is instrumenting a kernel function that is extremely
the system while the function is instrumentedl.
frequent: if that happens, the small overhead added to each invocation can add up, slowing down
kprobes does not work on some ARM 64-bit systems where modifications to the kernel text
section are not allowed for security reasons.
2.7.2 kprobes Interfaces
The original kprobes technology was used by writing a kernel module that defined pre- and
post-handlers written in C and registering them with a kprobe API call: register_kprobe(). You
could then load your kernel module and emit custom information via system messages with calls
to printk(). You needed to call unregister_kprobe() when you were done.
I have not seen anyone use this interface directly, other than in the 2010 article *Kernel
instrumentation using kprobes° from Phrack, a security ezine, written by a researcher using the
handle EIfMaster* [41]. That may not be a failure of kprobes, since it was built to be used from
Dprobes in the first place. Nowadays, there are three interfaces for using kprobes: 
*kprobe APl: register_kprobe() etc.
 Ftrace-based, via /sys/kernel/debug/tracing/kprobe_events: where kprobes can be enabled
and disabled by writing configuration strings to this file
perf_event_open(): as used by the perf(1) tool, and more recently by BPF tracing, as support
was added in the Linux 4.17 kernel (perf_kprobe pmu)
The biggest use of kprobes has been via front-end tracers, including perf(1), SystemTap, and the
BPF tracers BCC and bpftrace.
rog pauisap aoepau ue saqod pe jueea e peq ose uogeuauadu saqod geuo au
tracing kernel function entry. Over time, we have come to understand that kprobes can meet all
requirements, and the jprobes interface was unnecessary. It was removed from Linux in 2018 by
Masami Hiramatsu, a kprobe maintainer.
21 You can exclude kermel functions from tracing by listing them with the NOKPROBE_SYMBOL0 macro
22 In an nplanned coincidence, three days after writing this sentene Imet EMaster, and he taught me many details
about ELF analysis. These include how ELF tables are stripped, which I summariee in Chapter 4,
---
## Page 85
48
Chapter 2 Technology Background
2.7.3
BPF and kprobes
kprobes provides kernel dynamic instrumentation for BCC and bpftrace, and it is used by numer
ous tools. The interfaces are:
 BCC: attach_kprobe( and attach_kretprobe()
• bpftrace: kprobe and kretprobe probe types
The kprobe interface in BCC supports instrumenting the beginning of a function and a function
plus instruction offset, whereas bpftrace currently supports instrumenting the beginning of a
function only. The kretprobe interface for both tracers instruments the return of the function.
As an example from BCC, the vfsstat(8) tool instruments key calls to the virtual file system (VFS)
interface, and prints per-second summaries:
+rfsstat
7IME
READ/s
MRITE/s CREATE/s
OPEN/s
FSYKC/s
07 :48 : 16 :
736
4209
0
24
3141
0
07 :48 : 17 :
386
14
D
07 :48 : 18 :
308
3394
0
34
 0
07:48:19:
196
3293
13
D
07:48:20:
1030
4314
17
07 :48 :21 :
316
331T
98
[.. 
The probes traced can be seen in the source to vfsstat:
+grep attach_ vfsstat.py
b, attach_kprobe (event=*vfs_read*, fn_nane=*do_read*)
b,attach_kprobe levent=*vfs_vrite*, fn_nane=*do_write*)
b.attach_kprobe (event=vfs_fsync", fn_nane=*do_aync*)
b, attach_kprobe (event=*vfs_open.*, fn_nane=*do_open*)
b, attach_kpxobe (event=*vfs_create*, fn_nane=*do_create”)
These are attach_kprobe( functions. The kernel functions can be seen after the *event=a
assignment.
As an example from bpftrace, this one-liner counts the invocations of all the VFS functions, by
matching *vfs_*":
1(14unoo = [eqoxd] 8 1 a:aqoxdx, e- eoexgdq 
Attaching 54 probes...
[kprobe:vfs_unlink] : 2
[kprobe:vfs_renane] : 2
e[kprobe:vfs_readlink] : 2
[kpzobe:vfs_statx : 88
---
## Page 86
2.8uprobes
49
e[kprobe:vfs_statx_fd] : 9]
e[kpzobe:vfs_getattr_nosec]: 247
[kprobe:vfs_getattr] : 248
e[kpzobe:vfs_open] : 320
[kprobe:vfs_xriter] : 441
[kpzobe:vfs_xx1te]: 497T
[kprebe:vfs_read] : 5581
This output shows that while tracing, the vfs_unlink( function was called twice, and the vfs,
read() function was called 5581 times.
The ability to pull call counts from any kernel function is a useful capability, and can be used for
workload characterization of kernel subsystems.23
2.7.4kprobesAdditionalReading
More sources for understanding kprobes:
• Documentation/kprobes.txt in the Linux kernel source [42]
•*An Introduction to kprobes" by Sudhanshu Goswami [40]
•*Kernel Debugging with kprobes° by Prasanna Panchamukhi [43]
2.8uprobes
uprobes provides user-level dynamic instrumentation. Work began many years earlier, with a
utrace interface similar to the kprobes interface, This eventually became the uprobes technology
that was merged in the Linux 3.5 kernel, released in July 2012 [44].
uprobes are similar to kprobes, but for user-space processes. uprobes can instrument user-level
function entries as well as instruction offsets, and uretprobes can instrument the return of
functions.
uprobes are also file based: When a function in an executable file is traced, all processes using that
file are instrumented, including those that start in the future. This allows library calls to be traced
2.8.1 How uprobes Work
onsu pae at ne pauasu s puodeauq ise y :qeodde st u saqod o reust saqoudn
tion, and it passes execution to a uprobe handler. When the uprobe is no longer needed, the
target instructions are returned to their original state. With uretprobes, the function entry is
instrumented with a uprobe, and the return address is hijacked with a trampoline function, as
 s
23 At the time of wrting, I stil tend to use Ptrace forts particular task, since it is quicker to initialie and tear dow
way to improve the speed of BPF kprobe initialzation and teardown by batching operations. I hope it wil be avallatle by
instrumentation. See my funccount(8) tool from my Ftrace perf-tools repository. As of this writing, there is work under
the time you are reading this
---
## Page 87
Chapter 2 Technology Background
You can see this in action by using a debugger. For example, disassembling the readline() function
from the bash(1) shell:
+ gdb -p 31817
[.--]
(gdb) disas readline
Iunp of assenbler code for function readline:
0x000055f7fa995610 1cnp1$0xffffffff, 0x2656f9 (%rip)# 0x55f7fabfad10
0x000055f7fa995617 1 push
xq
0x000055fTfa995618 : je
0x00055f7fa99561a : ca11q 0x55f7fa994350 
0x55f7fa99568f 
0x000055fTfa99561f : ca11q 0x55f7fa995300 
0x000055f7fa995624 : mov
0x261c8d(rip) hrax
 0x55f7fabf72b8
0x000055f7fa99562b : test 
XeIS *xeI
[.--]
And now while it is instrumented using uprobes (or uretprobes):
LT8tc d- qp6 
[...]
(gdb) disas readline
Dunp of assenbler code for function readiline
0x000055fTfa995610 : fnt3
@uo1 TT9566FLSS0000×0
$0×2656f9, tesx
0x000055fTfa995616 :
ca11q
[xqx] x0+
0x000055f7fa995619 1 jne
0x55f7fa995603 
0x000055fTfa99561b : xoE
lebp, lebp
0x000055f7fa99561d : (bad)
0x000055fTfa99561e : (bad)
0x000055f7fa99561f : ca11q
0x55f7fa995300 
0x000055f7fa995624 : m0v
0x261c8d[rip], lrax
# 0x55t7fabf72b8
[.--]
Note that the first instruction has become the int3 breakpoint (x86_64).
To instrument the readline( function, I used a bpftrace one-liner:
.1(1qumoo = 01autpeaz:qseq/ura/:aqoxdn, a- aoezgdq +
Attaching 1 pzobe...
^C
9: 4
---
## Page 88
2.8uprobes
51
This counts the invocations of readline) in all running and future bash shells invoked while
tracing, and prints the count and exits on Ctrl-C. When bpftrace stops running, the uprobe is
removed, and the original instructions are restored.
2.8.2 Uprobes Interfaces
There are two interfaces for uprobes:
•Ftrace-based, via /sys/kernel/debug/tracing/uprobe_events: where uprobes can be enabled
and disabled by writing configuration strings to this file
* perf_event_open(): as used by the perf(1) tool and, more recently, by BPF tracing, as support
was added in the Linux 4.17 kernel (with the perf_uprobe pmu)
There is also a register_uprobe_event( kernel function, similar to register_kprobe(), but it is not
Idy ue se pasodxa
2.8.3 BPF and uprobes
numerous tools. The interfaces are:
uprobes provides user-level dynamic instrumentation for BCC and bpftrace, and is used by
• BCC: attach_uprobe() and attach_uretprobe()
 bpftrace: uprobe and uretprobe probe types
The uprobes interface in BCC supports instrumenting the beginning of a function or an arbitrary
address, whereas bpftrace currently supports instrumenting the beginning of a function only. The
uretprobes interface for both tracers instruments the return of the function.
As an example from BCC, the gethostlatency(8) tool instruments host resolution calls (DNS) via
the resolver library calls getaddrinfo(3), gethostbyname(3), and so on:
 gethostlatency
TIME
PID
COMK
LATns H0ST
cur1
15.90 www,brendangzegg.con
01 :42: 37
19476
Tano
17,40 xw,netflix.con
01 :42 : 40
19481
cur1
19.38 www,netflix.con
01:42:46 10111 ts Res~ec +659
28.70 xw,google,com
The probes traced can be seen in the source to gethostlatency:
+grep attach_gethostlatency ·Py
b.attach_uprobe (nane=*c", aym=*getaddrinfo", fn_nane=*do_entzy*。 pid=args,pid]
b, attach_uprobe nane=*c", sym=*gethostbymane*, fn_nane=*do_ent.ry”,
b, attach_uprobe (nane=*c", aym=*gethostbymane2", fn_nane=*do_entzy*
b,attach_uretprobe (nane=*", sym=*getadirinfo*, fn_nane=*do_return*,
b , attach_uretprobe (nane=*c", syn=gethostbynane*, fn_nane=*do_return*
,attach_uretprobe (na
sym="gethostbymame2",fn_nam
e=*do_return"
---
## Page 89
52
Chapter 2 Technology Background
These are attach_uprobe() and attach_uretprobe() calls. The user-level functions can be seen after
the *sym=* assignment.
As an example from bpftrace, these one-liners list and then count the invocations of all the
gethost functions from the libc system library:
soua6:9osoq/nu6xmu-99x//:qoxdn,-eoxdq+
uprobe :/1ib/xB6_6411nux=gnu/11bc, so 5: getho.stbynane
uprobe:/1ib/×86_641inux=gnu/libc, so, 61gethostbyname2
uprobe:/1ib/x86_6411nux=gnu/1lbc so 5:gethostname
uprobe:/1ib/x86_641inux=gnu/libc so 61gethostid
[--. ]
[aqoxd]e 1 4soqab:9 'os'oqrt/nubxnutt-99gx/qrt/:eqoxdn, 9- eoexgdq +
Attach.ing 10 probes...
"C
e[upzobe: /11b/x86_64=1Inux=gnu/1ibe ao 6:gethostnanse : 2
This output shows that the gethostname( function was called twice during tracing.
2.8.4uprobes Overhead and Future Work
uprobes can attach to events that fire millions of times per second, such as the user-level alloca
tion routines: malloc0 and free(). Even though BPF is performance optimized, multiplying a tiny
Oaang pue (oopeu ’saseo auos ul 'dn sppe puooas sad satup po suogu fq peaqaao jo punoue
tracing, which should be go-to use cases for BPF, can slow the target application tenfold (10x) or
more. This prohibits its use in these cases; such slowdowns are acceptable only when trouble-
8[ apdeu suaua uonod uoq-peae ue u no uroaua sa e u uoous
includes a section on the frequency of operations to help you work around this limitation. You
need to be aware of which events are frequent to avoid tracing them if possible, and to look for
slower events that you can trace instead to solve the same issue.
There may be a large improvement for user-space tracing in the future—perhaps even by the time
a opu sden ypa qoeoudde saqoudn juan aug asn o Sunuuo jo peasu 'sp peau nof
kernel, a shared-library solution is being discussed, which would provide BPF tracing of user space
without the kernel mode switch. This approach has been in use by LTTng-UST for years, with
performance measured at 10x to 100x faster [45].
2.8.5uprobes Additional Reading
For more information, see Documentation/trace/uprobetracer.txt in the Linux kernel source [46].
---
## Page 90
2.9  Tracepoints
53
2.9
Tracepoints
Tracepoints are used for kernel static instrumentation. They involve tracing calls that develop
ers have inserted into the kernel code at logical places; those calls are then compiled into the
kernel binary. Developed by Mathieu Desnoyers in 2007, tracepoints were originally called Kernel
Markers, and they were made available in the Linux 2.6.32 release in 2009, Table 2-7 compares
kprobes and tracepoints.
Table 2-7 kprobes to Tracepoints Comparison
Detail
kprobes
Tracepoints
ad
Static
Rough number of events
50,000+
100+
Kernel maintenance
None
Requlred
Disabled overhead
 None
Tiny (NOPs and metadata)
Stable API
No
Yes
Tracepoints are a burden for kernel developers to maintain, and tracepoints are far more limited
in scope than kprobes. The advantage is that tracepoints provide a stable AP4: Tools written to
use tracepoints should continue working across newer kernel versions, whereas those written
using kprobes may break if the traced function is renamed or changed.
You should always try to use tracepoints first, if available and sufficient, and turn to kprobes only
as a backup.