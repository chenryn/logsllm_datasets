Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
14 
Once we’ve chosen our desired file, we see the file listed as an attachment for our email 
message.  At this point, the local file path and filename is listed in BOLD, just below the 
subject line. 
After a few seconds (depending on the size of the file and your bandwidth), the file will 
be completely uploaded to the Gmail server.  Gmail will provide an indication that the 
file is uploaded by changing the BOLD file path and filename to a filename followed by a 
italic content-type.  At this point, the file has been uploaded to Gmail’s web server! 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
15 
3. Bypassing Miscellaneous Protection Measures 
Gmail’s creators understood the dangers of allowing users to send executable content 
through their mail service.  When a user attempts to mail an executable attachment, they 
are prompted with the message shown below: 
Gmail doesn’t permit you to send the executable through their mail service, BUT at this 
point, they have already allowed you to upload the content to their server.  Your 
executable now resides on mail.google.com!  At this point, we right click the attachment 
hyperlink and note the exact HTTP GET request for our executable attachment. 
4. Sending Malicious Content to the Victim 
Now that we know the exact POST request needed to authenticate to our “throw away” 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
16 
Gmail account and we also now the exact GET request needed to pull our file from the 
Gmail server, we can go about setting up our attack.  The following example shows a 
simple way a phishing attack would be executed. 
If a user clicks the link, they will be presented with the following file download security 
warning.  A close look at the “From” field indicates that the file is being served from 
mail.google.com. 
A simplified HTML example of this attack is given in the Appendix. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
17 
Chapter 4 – Flash Based Attack 
1. Overview 
A prime example of another way we can abuse domain name based security protections 
can be found via Cross Domain Policy files used by Adobe / Macromedia Flash.  An 
excerpt from “Macromedia Flash Player 8 Security” (Page 37) by Adrian Ludwig of 
Macromedia describes some of the features of the Cross Domain Policy files used by the 
Flash Player. 
System.security.loadPolicyFile()  
The policy file allows administrators with write access to a portion of a website to grant an application read 
access to that portion (see “Policy file usage” on page 29). By default, this file is located in the root directory 
of the target server.  
Use of the default location technique is typically best, as it opens the policy file for the entire server; it is 
compatible with all versions of Flash Player 7 and higher, and it does not require applications to declare 
anything about policy files. However, if there are reasons why the policy file cannot be placed in a root 
location on the server, or the policy file needs to be served from an XMLSocket server, the alternative would 
be to use the loadPolicyFile() method. This API was introduced in Flash Player 7 (7.0.19.0) to allow 
the website to specify a nondefault location for the policy file. This mechanism is used by the Flash 
application to indicate to Flash Player where to look for a policy file that (if it exists and if it indicates 
permission) would allow that application to read data from that part of that site. An author must call this API 
prior to any operation that may require the policy file.  
We see that Flash player assumes that if a Cross Domain policy file (crossdomain.xml) 
exists on the target server, then cross domain requests via the Flash player will be 
permitted.  It seems that Adobe / Macromedia did not foresee the possibility that popular 
web servers would allow their users to “upload” their own Cross Domain policy files.  
The issue is further exacerbated by the fact the Cross Domain policy file can now (as of 
Flash player 7.0.19.0) be loaded from non default locations. 
2. Forcing Ownership of the CrossDomain.xml File 
Using the techniques similar to the ones shown above, forcing ownership of the 
crossdomain.xml file is simple.  The attacker simply uploads the crossdomain.xml file to 
the affected web server, forces the victim to authenticate the to the web server (CSRF) 
using the “throw away” account, and feeds the appropriate location to the Flash player for 
the crossdomain.xml file (which is now stored on the target server).  Once the Flash 
player finds the crossdomain.xml file on the vulnerable server, it is permitted to make 
cross domain request to that server.  The steps needed to execute this attack are described 
below. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
18 
First, the attacker logs into the web mail server with the throwaway account (in this case 
Gmail).  The attacker notes the exact HTTP POST request needed to authenticate to the 
web mail server.  .  In this example, we select the “remember me” option to create a 
persistent cookie, which also ensures the Flash player will include the appropriate session 
cookies when the request for the policy file is made.  The attacker then uploads the 
crossdomain.xml file to the affected web server.  Our crossdomain.xml looks like this: 
The attacker notes the exact HTTP GET request needed to download the file by right 
clicking the filename hyperlink and noting the HTTP GET request.  The attacker then 
creates a page that will perform a CSRF to the web mail server, passing the credentials 
for the throw away account to Gmail, forcing the user’s browser to authenticate to the 
server.  Once the CSRF is complete, and the attacker has forced an authenticated session 
with Gmail, the attacker loads the Flash object, using the loadPolicyFile() function to 
retrieve the attacker uploaded cross domain policy file.  The screenshot below shows how 
the loadPolicyFile() is used within ActionScript in a Flash object. 
The Flash object uses the browser session cookies and completes the request for the 
attacker supplied crossdomain.xml file, giving the Flash object permission to access the 
mail.google.com domain!  
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
19 
Chapter 5 – Conclusion 
Although the presented examples focused on web mail applications, many other web 
applications exhibit the same vulnerable characteristics.  The authors stress that ANY 
application that accepts files from “anonymous” users must take EXTREME caution as to 
how it serves those files and how user authentication is accomplished.  This includes 
images, avatars, spreadsheets, and simple text files.  Despite the advances in browser and 
web application security, it seems that the fundamental concepts of web application 
authentication and file attachment have remained stagnant.  The attack methods 
demonstrated in this paper are extremely simple, and the counter measures are simple as 
well.  Developers should consider implementing CSRF protections for login 
functionality.  Although this paper did not detail the necessary steps, nonce values 
contained in the login page HTML cannot be used, as they can be bypassed in more 
advanced types of attacks.  Captchas may become a necessary evil for login pages.  
CSRF protection measures should be implemented for file download functionality.  
Additionally, developers must exercise extreme caution when taking ownership of an 
external entities content / files.  When possible, this content should not be served from 
domain names that users (or applications) consider trustworthy.  Applications serving 
user controllable content/files and applications providing critical user functionality 
should not share domain names.  Lastly, developers must exercise extreme caution when 
designing applications that blindly trust domain names or content from external domains.  
Trust is a delicate matter on the WWW.  Attacks like the ones presented in this paper 
undermine trust at the user and application level.  Simple fixes can help restore some of 
this trust, but constant diligence is required.  The criteria for establishing trust on the 
WWW is limited, so we place our trust in what we can see… but we should never trust 
completely…. 
BK 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
20 
References 
Flash Player 8 Security Whitepaper – Adrian Ludwig 
http://www.macromedia.com/devnet/flashplayer/articles/flash_player_8_security.pdf 
Kicking Down the Cross Domain Door – Billy Rios & Raghav Dube 
http://media.blackhat.com/presentations/bh-europe-07/Dube-Rios/Whitepaper/bh-eu-07-
rios-WP.pdf 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
21 
Appendix A – Biting Yahoo HTML – FireFox 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
23 
Appendix B – Biting Gmail HTML – FireFox 
 Bite Gmail  