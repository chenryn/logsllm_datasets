增加，好让你知道需要在容量规划计算中添加些什么。
RabbitMQ的用户会通过以下事件来增加进程数：到服务器的新连接、创建新
---
## Page 249
11.3SSL连接
227
的信道以及队列声明。一条新的连接会创建四个新的进程；同样地，在连接上开启
一个新的信道会创建四个新的进程。队列的开销倒是最小的：只是每个队列一个进
程。表11.4清楚地进行了展示。
表11.4连接、信道和队列使用的Erlang进程数
进程数
新建连接
4
新建信道
4
队列声明
1
我们之前提过，大多数情况2"个进程数绰绰有余了；不过对消息通信架构做
一些数据规划总不会错。既然你已经充分了解了不同AMQP操作给RabbitMQ带来
的影响，那么现在该来看看如何通过设置启用SSL来保障RabbitMQ的安全了。
11.3SSL连接
当在公司封闭的网络环境中部署应用程序时，你几乎可以100%相信相关的各
个参与方。如果app_a请求连接到你的RabbitMQ服务器的话，你可以简单地假定
是由真正的apP_a 发起的请求。大部分情况下，我们没理由去怀疑这类请求；但是
当你处理一些敏感数据，譬如信用卡信息时，你可能需要限制对应用程序特定区域
的访问。由于不想泄漏这些信息，因此你需要用一种安全的方式来建立到RabbitMQ
的加密连接，并传输数据。你可以使用SSL?协议在消息通信终端（譬如在消费者和
生产者之间）传输数据。RabbitMQ支持SSL开箱可用。因此对你来说，你需要设
置所有的SSL组件来使用该基础设施。
在本节中，我们会解释如何通过SSL建立到RabbitMQ的安全连接。我们会使
用OpenSSL库，它支持大多数*nix类操作系统，同时也支持Windows。你可以在
站点www.openssl.org/上获取更多关于OpenSSL的信息。由于OpenSSL和安全是
相当广泛的议题，因此我们无法在本章中详细讨论。如果你想要详细了解如何使用
OpenSSL来保障你的网络安全的话，我们建议读一下这本书：NetworkSecurity with
OpenSSL (Viega et al., 2002, O'Reilly Media )。
2SSL代表的意思是安全套接字协议层。该加密协议允许安全的网络通信。
---
## Page 250
228
第11章提升性能，保障安全
在下一节中，你会看到如何创建一个SSL认证机构并为你的客户端和服务器创
建证书。这也就是我们经常提到的公钥基础设施（PublicKeyInfrastructure，PKI）。
最后，你将使用这些证书来建立到RabbitMQ的SSL连接。
11.3.1 SSL 证书
以安全的方式来交换信息的其中一种手段是使用公钥密钥加密（public key
cryptography）”。使用该技术，交换信息的双方拥有数学上相关的私钥和公钥，它们
可以用于交换信息的加密与解密。公钥可以被公开出去，而私钥则必须保密。这种
技术使用非对称算法，所以用来加密的密钥无法进行解密。如果用户Bob想要和
Alice交换数据，那么他们交换各自的公钥。当Alice发送数据给Bob的时候，她会
使用自己的密钥来加密该信息，然后Bob会使用Alice的公钥来解密数据。另一种
公钥的用途是签名消息。消息的数字签名是根据私钥计算出来的；通过这种方式，
接收方就可以用发送方的公钥来检测签名，从而可以判断该消息是否来自于对方。
图11.3描述了该过程。
Alice
Alice的密钥
MSG
签名/加密
网络/
文件系统/
互联网
a8253d13b.
验证/解密
Alice的公钥
MSG
Bob
图11.3公钥加密
3有关该主题的更多信息请参阅Wikipedia上的条目：http://en.wikipedia.org/wiki/Public-key.
cryptography
---
## Page 251
11.3SSL连接
229
获得对方的公钥是一回事儿，如何知道该公钥确实属于对方则是另一回事儿。
为了确保密钥确实属于它的持有者，密钥会随同证明其真实性的证书（certificate）
一同进行交换。证书是由可信的第三方作为认证中心（CertificateAuthorities，CA）
发布的。CA负责确认密钥属于其所有者。虽然这听起来过于复杂，不过在Network
照片，而且还包含了一些个人信息。这些信息使得他人可以证明照片确属其人。当
然你可以在地下室伪造一本护照，来尝试欺骗权威机构。为了防止这一点，你的护
照上包含了政府发证机关的信息。对于你的护照来说，发证机关就是CA了。当你
出国旅行时，人境办事处能够基于护照来辨认你，并能基于你所属政府添加的水印
和其他方式来证明其真实性。
为了获取有效的SSL证书，你可以花钱请信任的第三方公司来颁发一个给你。
如果你计划和公众交换数据的话，你可能会这样做。但是如果你只想要在组织内部
共享数据的话，那么你可以设置自己私有的并且绝对信任的CA。你将使用该CA
来颁发证书给RabbitMQ和其消息通信客户端，用来交换数据。在下一节中，你将
学习如何设置自己的CA并颁布证书给你的客户端和服务器，使它们之间能够建立
SSL连接。
11.3.2设置证书颁发机构
为了设置CA，你将使用openssl命令行工具。该工具接收一大堆很难记忆的
选项。为了方便起见，Opess1可以使用配置文件，而你可以在其中使用键值对来
指明选项。你也可以通过检查该配置文件来追踪曾经用于生成证书的参数。让我们
从为你的CA创建基本环境开始吧。
注意：如你所知，RabbitMQ运行在Erlang之上，所以尝试在应用程序中
使用OpenSSL之前，你需要先让Erlang支持它才行。如果你在搭建Erlang
之前就安装好了OpenSSL的话，那么你可能马上就能使用它了。如果你没
有在系统中安装OpenSSL的话，那么你需要先安装它，然后再重新安装
Erlang，同时启用OpenSSL。
你需要创建文件夹来存放证书和CA配置文件。开启终端窗口，然后输入以下
命令：
---
## Page 252
230
第11章提升性能，保障安全
$ mkdir rmqca
$cd rmqca
$ mkdir certs private
$ chmod 700 private
首先你创建了rmqca文件夹来存放文件。我们使用名称rmqca来表示
RabbitMQ认证中心。你可以随意更改该名称来适应你所在组织的需求。之后，你还
将创建两个文件夹：certs和private；前者用于存放CA产生的证书，后者用于
存放CA密钥。记住，一定不能向第三方泄漏CA私钥；因此使用chmod将private
文件夹的访问权限设置成只允许当前用户访问。
为了能生成证书，OpenSSl还需要一些文件。由于CA创建的证书无法共享序
列号，因此你需要创建一个文件来存放最近证书的序列号。每颁发一份新的证书，
OpenSSL会负责递增该数字。OpenSSL期望该数字为十六进制，并且包含至少两位。
所以当你首次创建该文件的时候，你需要为数字在左侧添加一个0，就像这样：
$echo01>serial
还有最后一个文件需要创建，OpenSSL会用该文件存放CA颁发的证书。我们
会将该文件命名为index.txt；由于尚未创建任何证书，因此该文件是空的。你可
以通过下列命令创建它：
$ touch index.txt
在拥有了OpenSSL工作的基本环境之后，你需要创建配置文件。该文件用于
为各种openssl命令提供默认值。你会用它来创建自己的CA并在稍后用来颁发证
书。你将会看到，该配置文件为每个命令分成了若干部分，因而也更便于理解。其
中一个命令叫作ca，它用于设置CA和证书废弃列表（CertificateRevocationList，
CRL）4。让我们在rmqca文件夹下创建一个叫作openssl.conf 的文件，然后把下
面的CA命令内容添加进去。
4证书废弃列表用于在CA发布的证书过期时通知客户。客户端可以从CA下载该列表，然后拒绝CRL中
过期的证书。
---
## Page 253
11.3SSL连接
231
清单11.1openssl.confCA命令配置
[ca]
1该部分
default_ca = rmqca
的名称
[rmqca ]
<2CA配置
dir =.
certificate = $dir/cacert.pem
database=$dir/index.txt
new_certs_dir = $dir/certs
private_key = $dir/private/cakey.pem
serial = $dir/serial
default_crl_days=7
<③过期配置
default_days= 365
default_md =sha1
policy = rmqca_policy
<4政策配置
x509_extensions = certificate_extensions
[ rmqca_policy ]
commonName = supplied
stateOrProvinceName = optional
countryName = optional
emailAddress = optional
organizationName = optional
organizationalUnitName=optional
[ certificate_extensions ]
5扩展部分
basicConstraints = CA:false
在该文件中，你为ca命令提供了默认选项，你仍然可以在调用openssl命令时，
通过命令行进行覆盖。可以看到，.conf文件中的每一部分是用放在一对方括号（□）
内的头进行标记的。配置文件是由一系列配置选项的键值对构成的。从声明ca部
分1开始，将默认CA的名称设置为rmqca。然后OpenSSL会查找该名称所对应的
部分，之后加载配置选项的剩余部分。
在rmqca部分②中，你设置了一个叫作dir的变量，指向和.conf文件同样
的目录。接下来的几行都会引用该变量，因而你不需要每次都输人完整的路径。你
告诉openssl证书会存放在和配置文件相同目录下的cacert.pem文件中。然后
你将数据库设置为index.txt。CA颁发的证书会存放在certs文件夹下；你的私
钥需要从private/cakey·pem文件中提取，同时用于生成证书的序列号会存储在
你之前创建的serial文件中。
然后你需要为你的证书配置过期时间3。此处证书会在一年后过期，你会每隔
---
## Page 254
232
第11章提升性能，保障安全
七天提供一个CRL文件，并且使用sha1”作为哈希函数来生成证书。
在文件的下一部分中你配置了CA策略4，告诉openss1在证书中的哪些字段
是必填的。对该CA来说，commonName是必需的，而其他字段像countryName
或emailAddress是可选的（更多详细信息，请参阅http://www.openssl.org/docs/
apps/ca.html#POLICY_FORMAT）。在该部分中，你指明了CA支持哪些x509°扩
展，这些扩展在配置文件的certificate_extensions部分中S。此处，你将
basicConstraints设置为CA：false。从根本上来说，这意味着CA颁布的证书
无法将自己作为CA一一也就是说它们无法用于签名和颁发新证书。
现在你需要配置req命令来生成证书。往openssl.conf添加一些新的键值对。
让我们把下列内容添加到openssl.conf文件中。
清单11.2openssl.confreq命令配置
【req ]
1req配置部分
default_bits=2048
default_keyfile=./private/cakey.pem
default_md= sha1
prompt = yes
distinguished_name = root_ca_distinguished_name
x509_extensions = root_ca_extensions
[ root_ca_distinguished_name ]
commonName = hostname
<②根扩展
[ root_ca_extensions ]
basicConstraints = CA:true
keyUsage = keyCertSign,cRLSign
[ client_ca_extensions ]
<3客户端扩展
basicConstraints = CA:false
keyUsage = digitalsignature
extendedKeyUsage =1.3.6.1.5.5.7.3.2
[ server_ca_extensions ]
4服务器端扩展
basicConstraints = CA:false
keyUsage =keyEncipherment
extendedKeyUsage = 1.3.6.1.5.5.7.3.1
在该部分0中，通过指明你想要为证书生成2048位的密钥来配置req命令。
如果想要让你的密钥安全的话，这是建议的最小数字；该密钥会写人，/private/
5更多有关SHA1的信息请参阅http://en.wikipedia.org/wiki/SHA-1。
---
## Page 255
11.3SSL连接
233
cakey.pem 文件，并使用 shal作为默认的哈希函数。通过将 prompt 设置为 yes,
你告诉req命令，每当它需要填写distinguished_name下的值的时候，都应
该提示你。你可以看到，distinguished_name 的内容在另一个叫作 root_ca_
distinguished_name的部分中，在那里你将hostname设置为了commonName。
在接下来的这一部分中，你为根证书提供了一些扩展2。在本例中，你将根
证书设置为可以用于签名其他证书（这是整个设置中最为关键的一点）。当设置客
户端扩展时③，客户端证书无法像CA那样使用，但是可以用于往来数据的签名。
extendedKeyUsage字段有一串特别的数字，用于说明该证书可以用于客户端认
证。最后是服务器端扩展部分4，在该示例中你想让证书用于加密数据及认证服务器。
如你所见，你用不同的一串值来设置extendedKeyUsage字段。
通过这些设定，你完成了OpenSSL的环境设置，并准备好创建证书了。虽然该
过程比较复杂，但你只需做一次即可。将配置选项放入该文件的好处就是，你不需
要用心记住所有这些设置。让我们继续前进到下一节来看看如何创建自己的证书。
11.3.3生成根证书
首先需要做的是生成一份CA证书。这是一份你绝对信任的证书。所有其他的
证书都将派生于该证书，并且它将用来在不同应用之间建立信任链（chainof trust）。
让我们运行下列命令：
$ openssl req -x509 -config openssl.conf -newkey rsa:2048 -days 365 \
-out cacert.pem -outform PEM -subj /CN=RMQCA/ -nodes
你应该看到像这样的输出：
Generating a2048bit RSAprivatekey
writing new private key to'./private/cakey.pem'
使用该命令创建的证书会存储在文件cacert.pem中。格式为PRM，使用