4.2 Modiﬁcations to SSL
Client puzzles. In order to support client puzzles, we ad-
ditionally modi(cid:12)ed the SSL protocol to carry puzzle data
where necessary. The client indicates its support of puzzles
with an extension to the ClientHello message. The puzzle
itself is sent by the server as an extension to the Server-
Hello message. The client includes its puzzle solution in a
new PuzzleSolution message.
One of the challenges in using client puzzles in SSL is
the limited interaction (cid:13)ow between client and server. Ide-
ally, the server should issue a puzzle and then receive and
verify the solution before performing any expensive opera-
tions. However, in many cipher suites, such as those using
ephemeral Di(cid:14)e-Hellman key agreement, the server must
perform an expensive private key operation in the ServerKe-
yExchange message, before having received the client’s Puz-
zleSolution message. As such, our client puzzle technique
is most applicable to cipher suites without a ServerKeyEx-
change message, such as RSA-based key transport.
FVDS cipher suite. We added a new cipher suite that
uses FVDS for client authentication, RSA for key transport,
AES128-CBC for symmetric encryption, and SHA-1 as the
hash function. This cipher suite also supports an optional
client puzzle integrated with the FVDS scheme as described
in Section 3.1.
4.3 Performance analysis of SSL with new coun-
termeasures
In order to evaluate the e(cid:11)ectiveness of the proposed coun-
termeasure, we made further modi(cid:12)cations to OpenSSL (be-
yond those in Section 3.1) to include support for a hash-
based client puzzle and for the FVDS-based authentication
protocol with built-in puzzle. We also modi(cid:12)ed the Apache
web server (version 2.2.15) as needed to support these changes.
We used the http load package [1] which can generate many
client requests over either http or https (when used with
OpenSSL); our modi(cid:12)cations ensured that http load could
use the denial of service countermeasures as well.
Our experiments involved a single server (a Linux server
with an Intel Core 2 Duo 2.53 GHz (T9400) CPU with 4 GB
of RAM, running in an x86 64 architecture) and multiple
client machines across a dedicated network with no other
tra(cid:14)c or programs running.
We compared three cipher suites. All three cipher suites
used RSA-based public key transport, AES128-CBC sym-
metric encryption, and SHA-1 as the hash function. The
di(cid:11)erence was in client authentication: one cipher suite used
no client authentication, one used RSA signatures for client
authentication, and the last used FVDS for client authenti-
cation. All public keys were 1024-bit keys.
We performed the following experiments. The results, in
connections per second, are reported in Table 3. We ran
each test 5 times and averaged the results.
(cid:15) Test 1: \no puzzle". This test established a baseline of
the number of connections per second each cipher suite
could handle without any puzzles or denial of service
countermeasures. (In other words, for the FVDS-based
cipher suite, FVDS signatures from Section 3.1 were
used for client authentication but the FVDS-puzzle
protocol of Section 3.2 was not used.)
(cid:15) Test 2: \hash:12, legitimate solutions". This test in-
cluded a simple hash-based client puzzle based on the
hash-inversion puzzle of Aura et al. [3]; the client need-
s to (cid:12)nd a preimage x such that the hash value H(x)
starts with at least 12 zero bits (where H is the SHA-1
hash function). Our clients simulate solving the puzzle
legitimately, allowing us to determine the maximum
number of legitimate connections per second the serv-
er can handle.
(cid:15) Test 3: \fvds:12, legitimate solutions". This test, only
for the FVDS-based cipher suite, is similar to Test 2
except that the hash-based puzzle is integrated with
the FVDS signature generation/veri(cid:12)cation as in Sec-
tion 3.2, with Q = 12 and D = 0.
(cid:15) Test 4: \hash:12 / fvds:12, garbage solutions". In this
test, the clients do not solve the puzzle, instead sending
as many fake requests as possible.
(cid:15) Test 5: \hash:12 / fvds:12, mix legitimate/garbage".
In this test, 100 legitimate clients are simulated, as
well as a large number of attacking clients sending fake
requests.
121
Client
with PuzzlesSupported extensiony (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
ClientHello
Server
PuzzleSolutiony
ClientCertificate*
ClientKeyExchange
CertificateVerify*
Finished
application layer data
ServerHello
with Puzzle extensiony
ServerCertificate*
ServerKeyExchange*
CertificateRequest*
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0) ServerHelloDone
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0) Finished
 (cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! application layer data
Figure 4: Messages exchanged in the SSL handshake protocol. * denotes optional messages.
messages added by us for denial of service resistance.
y denotes
Key transport (cid:0)! RSA-1024 RSA-1024 RSA-1024
RSA-1024 FVDS-1024
Client authentication (cid:0)!
none
#
1924
1911
N/A
5109
#
1621
1597
N/A
3734
#
1732
1719
1732
4030
Server con(cid:12)guration Client’s puzzle strategy
1: no puzzle
2: hash:12
3: fvds:12
4: hash:12 / fvds:12
5: hash:12 / fvds:12
legitimate solutions
legitimate solutions
garbage solutions
mix legitimate/garbage
100 legitimate
4302 garbage
100 legitimate
2767 garbage
100 legitimate
3022 garbage
Table 3: Number of SSL connections per second.
Observations.
(cid:15) Adding RSA-based client authentication results in a
16% performance decrease compared to unauthenti-
cated connections.
(cid:15) Client authentication using FVDS instead of RSA sig-
natures allows for 7% more connections per second.
While still an improvement, this is quite small com-
pared to the 6-fold increase in the number of signature
veri(cid:12)cations per second reported in Table 1: this is be-
cause signature veri(cid:12)cation is a relatively small part of
the overall server cost, which is dominated by the cost
of the RSA private key decryption operation.
(cid:15) Veri(cid:12)cation of fvds:12 puzzles (based on the protocol
in Section 3.2) does not add any cost for legitimate
connections, whereas verifying a separate hash:12 puz-
zle adds a 1.5% performance penalty for RSA-based
cipher suites.
(cid:15) In attack scenarios, FVDS-based cipher suites can han-
dle 8% more fake connections than RSA-based cipher
suites.
5. CONCLUSION
Denial of service attacks are a challenging threat that can-
not be completely prevented. There are many vectors of at-
tack, and in this paper we focused on DoS attacks that ex-
haust server resources by causing a server to perform many
expensive operations. DoS countermeasures, such as client
puzzles, can discourage attackers by increasing the resources
required to mount an attack.
Our gradual authentication scheme provides an e(cid:11)ective,
multi-layer, integrated approach to denial of service resis-
tance. Our use of fast-veri(cid:12)cation digital signatures can
provide client authentication between 6 and 20 times faster
than conventional approaches, and our integration of puzzle
veri(cid:12)cation in the signature scheme gives puzzle veri(cid:12)cation
at no additional cost.
We integrated our techniques into the SSL protocol and
tested our techniques on a dedicated network. Our experi-
mental results indicate that the proposed approach can be
e(cid:11)ective in mitigating DoS attacks on SSL servers. While
there are speed increases o(cid:11)ered by fast-veri(cid:12)cation digital
signatures, further improvements could be had if the server’s
cost of key transport was reduced, which we believe is an im-
portant subject of future research in DoS-resistant protocols
for real-world networks.
6. ACKNOWLEDGMENTS
The authors would like to thank the ASIACCS anonymous
referees for their reviews. The authors are also grateful to
Lakshmi Devi Kuppusamy for her valuable comments and
helpful advice and Hua Liu for his assistance in experiment
implementation. This work was supported by the Australia-
India Strategic Research Fund project TA020002.
7. REFERENCES
[1] ACME Labs. http load, March 2006. URL: http://
www.acme.com/software/http load/.
122
[2] T. Aura and P. Nikander. Stateless connections. In
3(4):326{333, 2006.
Y. Han, T. Okamoto, and S. Qing, editors, Proceedings
of the First International Conference on Information
and Communications Security (ICICS) 1997, volume
1334 of LNCS, pages 87{97. Springer, 1997.
[18] C. Meadows. A formal framework and evaluation
method for network denial of service. In Proc. 12th
IEEE Computer Security Foundations Workshop
(CSFW) 1999, page 4. IEEE, 1999.
[3] T. Aura, P. Nikander, and J. Leiwo. DoS-resistant
[19] C. Meadows. A cost-based framework for analysis of
denial of service networks. Journal of Computer
Security, 9(1/2):143{164, 2001.
[20] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker,
and S. Savage. Inferring internet denial-of-service
activity. ACM Transactions on Computer Systems
(TOCS), 24(2):115{139, 2006.
[21] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash
system, 2009. URL: http://www.bitcoin.org/bitcoin.
pdf.
[22] J. Smith, J. Gonz(cid:19)alez Nieto, and C. Boyd. Modelling
denial of service attacks on JFK with Meadows’s
cost-based framework. In Proceedings of the 2006
Australasian Workshops on Grid Computing and
e-research, volume 54, pages 125{134. Australian
Computer Society, Inc., 2006.
[23] J. Smith, S. Tritilanunt, C. Boyd, J. Gonz(cid:19)alez Nieto,
and E. Foo. Denial of service resistance in key
establishment. International Journal of Wireless and
Mobile Computing, 2(1):59{71, 2007.
[24] D. Stebila, L. Kuppusamy, J. Rangasamy, C. Boyd,
and J. Gonz(cid:19)alez Nieto. Stronger di(cid:14)culty notions for
client puzzles and denial-of-service-resistant protocols.
In A. Kiayias, editor, Topics in Cryptology { CT-RSA
2011 { The Cryptographers’ Track at the RSA
Conference, volume 6558 of LNCS, pages 284{301.
Springer, 2011. URL: http://eprint.iacr.org/2010/649.
pdf
[25] D. Stebila and B. Ustaoglu. Towards denial of service
resilient key agreement protocols. In C. Boyd and
J. Gonz(cid:19)alez Nieto, editors, Proceedings of the 14th
Australasian Conference on Information Security and
Privacy (ACISP) 2009, volume 5594 of LNCS, pages
389{406. Springer, 2009.
[26] S. Tritilanunt, C. Boyd, E. Foo, and J. Gonz(cid:19)alez Nieto.
Toward non-parallelizable client puzzles. In F. Bao,
S. Ling, T. Okamoto, H. Wang, and C. Xing, editors,
Cryptology and Network Security (CANS) 2007,
volume 4856 of LNCS, pages 247{264. Springer, 2007.
[27] X. Wang and M. K. Reiter. Defending against
denial-of-service attacks with puzzle auctions. In
Proceedings of the 2003 IEEE Symposium on Security
and Privacy (SP’03), pages 78{92. IEEE Press, 2003.
[28] H. Williams. A modi(cid:12)cation of the RSA public-key
encryption procedure. IEEE Transactions on
Information Theory, 26(6):726{729, 1980.
[29] E. A. Young and T. J. Hudson. The OpenSSL project,
2007. URL: http://www.openssl.org.
[30] Zona Research. The need for speed II. April, 2001.
URL: http://www.keynote.com/downloads/Zona
Need For Speed.pdf.
authentication with client puzzles. In B. Christianson,
B. Crispo, J. A. Malcolm, and M. Roe, editors,
Security Protocols: 8th International Workshop,
volume 2133 of LNCS, pages 170{177. Springer, 2000.
[4] A. Back. Hashcash: A denial-of-service
countermeasure. 2002. URL: http://www.hashcash.org
/papers/hashcash.pdf.
[5] D. J. Bernstein. A secure public-key signature system
with extremely fast veri(cid:12)cation, August 2000. URL:
http://cr.yp.to/papers.html#sigs.
[6] D. J. Bernstein. Proving tight security for
Rabin-Williams signatures. In N. Smart, editor,
Advances in Cryptology { Proc. EUROCRYPT 2008,
volume 4965 of LNCS, pages 70{87. Springer, 2008.
[7] C. Castelluccia, E. Mykletun, and G. Tsudik.
Improving secure server performance by re-balancing
SSL/TLS handshakes. In Proceedings of the 2006
ACM Symposium on Information, Computer and
Communications Security, pages 26{34. ACM, 2006.
[8] CERT. Denial of service attacks. URL: http://www.
cert.org/tech tips/denial of service.html, 3 May 2010.
[9] L. Chen, P. Morrissey, N. P. Smart, and B. Warinschi.
Security notions and generic constructions for client
puzzles. In M. Matsui, editor, Advances in Cryptology
{ Proc. ASIACRYPT 2009, volume 5912 of LNCS,
pages 505{523. Springer, 2009.
[10] C. Coarfa, P. Druschel, and D. Wallach. Performance
analysis of TLS web servers. ACM Transactions on
Computer Systems, 24(1):39{69, 2006.
[11] D. Dean and A. Stubble(cid:12)eld. Using client puzzles to
protect TLS. In Proc. 10th USENIX Security
Symposium, 2001.
[12] W. Feng, E. Kaiser, and A. Luu. Design and
implementation of network puzzles. In INFOCOM
2005. 24th Annual Joint Conference of the IEEE
Computer and Communications Societies. Proceedings
IEEE, volume 4, pages 2372{2382. IEEE, 2005.
[13] S. Goldwasser, S. Micali, and R. L. Rivest. A digital
signature scheme secure against adaptive chosen
message attacks. SIAM Journal on Computing,
17(2):281{308, April 1988.
[14] A. Juels and J. Brainard. Client puzzles: A
cryptographic countermeasure against connection
depletion attacks. In Proc. Internet Society Network
and Distributed System Security Symposium (NDSS)
1999, pages 151{165. Internet Society, 1999.
[15] P. Karn and W. A. Simpson. Photuris: Session-key
management protocol, March 1999. RFC 2522. URL:
http://www.ietf.org/rfc/rfc2522.txt.
[16] C. Kaufman. Internet Key Exchange (IKEv2)
protocol, December 2005. RFC 4306. URL: http://
www.ietf.org/rfc/rfc4306.txt.
[17] V. Laurens, A. El-Saddik, and A. Nayak.
Requirements for client puzzles to defeat the denial of
service and the distributed denial of service attacks.
International Arab Journal of Information Technology,
123