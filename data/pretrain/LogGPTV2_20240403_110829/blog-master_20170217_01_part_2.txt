				case ORA_TYPE_LONGRAW:  
					appendStringInfo(&buf, "bytea");  
					break;  
				case ORA_TYPE_DATE:  
					appendStringInfo(&buf, "timestamp(0) without time zone");  
					break;  
				case ORA_TYPE_TIMESTAMP:  
					appendStringInfo(&buf, "timestamp(%d) without time zone", (typescale > 6) ? 6 : typescale);  
					break;  
				case ORA_TYPE_TIMESTAMPTZ:  
					appendStringInfo(&buf, "timestamp(%d) with time zone", (typescale > 6) ? 6 : typescale);  
					break;  
				case ORA_TYPE_INTERVALD2S:  
					appendStringInfo(&buf, "interval(%d)", (typescale > 6) ? 6 : typescale);  
					break;  
				case ORA_TYPE_INTERVALY2M:  
					appendStringInfo(&buf, "interval(0)");  
					break;  
				case ORA_TYPE_GEOMETRY:  
					if (GEOMETRYOID != InvalidOid)  
					{  
						appendStringInfo(&buf, "geometry");  
						break;  
					}  
					/* fall through */  
				default:  
					elog(DEBUG2, "column \"%s\" of table \"%s\" has an untranslatable data type", colname, tabname);  
					appendStringInfo(&buf, "text");  
			}  
```  
[Mapping Oracle to PostgreSQL data types](https://www.openscg.com/2017/08/mapping-oracle-to-postgresql-data-types/)  
### PostgreSQL与Oracle多国语言映射关系  
server_encoding对应的为PostgreSQL字符集  
charset对应的为Oracle字符集  
```  
	if (nls_lang == NULL)  
	{  
		server_encoding = pstrdup(GetConfigOption("server_encoding", false, true));  
		/* find an Oracle client character set that matches the database encoding */  
		if (strcmp(server_encoding, "UTF8") == 0)  
			charset = "AL32UTF8";  
		else if (strcmp(server_encoding, "EUC_JP") == 0)  
			charset = "JA16EUC";  
		else if (strcmp(server_encoding, "EUC_JIS_2004") == 0)  
			charset = "JA16SJIS";  
		else if (strcmp(server_encoding, "EUC_TW") == 0)  
			charset = "ZHT32EUC";  
		else if (strcmp(server_encoding, "ISO_8859_5") == 0)  
			charset = "CL8ISO8859P5";  
		else if (strcmp(server_encoding, "ISO_8859_6") == 0)  
			charset = "AR8ISO8859P6";  
		else if (strcmp(server_encoding, "ISO_8859_7") == 0)  
			charset = "EL8ISO8859P7";  
		else if (strcmp(server_encoding, "ISO_8859_8") == 0)  
			charset = "IW8ISO8859P8";  
		else if (strcmp(server_encoding, "KOI8R") == 0)  
			charset = "CL8KOI8R";  
		else if (strcmp(server_encoding, "KOI8U") == 0)  
			charset = "CL8KOI8U";  
		else if (strcmp(server_encoding, "LATIN1") == 0)  
			charset = "WE8ISO8859P1";  
		else if (strcmp(server_encoding, "LATIN2") == 0)  
			charset = "EE8ISO8859P2";  
		else if (strcmp(server_encoding, "LATIN3") == 0)  
			charset = "SE8ISO8859P3";  
		else if (strcmp(server_encoding, "LATIN4") == 0)  
			charset = "NEE8ISO8859P4";  
		else if (strcmp(server_encoding, "LATIN5") == 0)  
			charset = "WE8ISO8859P9";  
		else if (strcmp(server_encoding, "LATIN6") == 0)  
			charset = "NE8ISO8859P10";  
		else if (strcmp(server_encoding, "LATIN7") == 0)  
			charset = "BLT8ISO8859P13";  
		else if (strcmp(server_encoding, "LATIN8") == 0)  
			charset = "CEL8ISO8859P14";  
		else if (strcmp(server_encoding, "LATIN9") == 0)  
			charset = "WE8ISO8859P15";  
		else if (strcmp(server_encoding, "WIN866") == 0)  
			charset = "RU8PC866";  
		else if (strcmp(server_encoding, "WIN1250") == 0)  
			charset = "EE8MSWIN1250";  
		else if (strcmp(server_encoding, "WIN1251") == 0)  
			charset = "CL8MSWIN1251";  
		else if (strcmp(server_encoding, "WIN1252") == 0)  
			charset = "WE8MSWIN1252";  
		else if (strcmp(server_encoding, "WIN1253") == 0)  
			charset = "EL8MSWIN1253";  
		else if (strcmp(server_encoding, "WIN1254") == 0)  
			charset = "TR8MSWIN1254";  
		else if (strcmp(server_encoding, "WIN1255") == 0)  
			charset = "IW8MSWIN1255";  
		else if (strcmp(server_encoding, "WIN1256") == 0)  
			charset = "AR8MSWIN1256";  
		else if (strcmp(server_encoding, "WIN1257") == 0)  
			charset = "BLT8MSWIN1257";  
		else if (strcmp(server_encoding, "WIN1258") == 0)  
			charset = "VN8MSWIN1258";  
		else  
		{  
			/* warn if we have to resort to 7-bit ASCII */  
			charset = "US7ASCII";  
			ereport(WARNING,  
					(errcode(ERRCODE_WARNING),  
					errmsg("no Oracle character set for database encoding \"%s\"", server_encoding),  
					errdetail("All but ASCII characters will be lost."),  
					errhint("You can set the option \"%s\" on the foreign data wrapper to force an Oracle character set.", OPT_NLS_LANG)));  
		}  
		lc_messages = pstrdup(GetConfigOption("lc_messages", false, true));  
		/* try to guess those for which there is a backend translation */  
		if (strncmp(lc_messages, "de_", 3) == 0 || pg_strncasecmp(lc_messages, "german", 6) == 0)  
			language = "GERMAN_GERMANY";  
		if (strncmp(lc_messages, "es_", 3) == 0 || pg_strncasecmp(lc_messages, "spanish", 7) == 0)  
			language = "SPANISH_SPAIN";  
		if (strncmp(lc_messages, "fr_", 3) == 0 || pg_strncasecmp(lc_messages, "french", 6) == 0)  
			language = "FRENCH_FRANCE";  
		if (strncmp(lc_messages, "ja_", 3) == 0 || pg_strncasecmp(lc_messages, "japanese", 8) == 0)  
			language = "JAPANESE_JAPAN";  
		if (strncmp(lc_messages, "pt_", 3) == 0 || pg_strncasecmp(lc_messages, "portuguese", 10) == 0)  
			language = "BRAZILIAN PORTUGUESE_BRAZIL";  
		if (strncmp(lc_messages, "tr_", 3) == 0 || pg_strncasecmp(lc_messages, "turkish", 7) == 0)  
			language = "TURKISH_TURKEY";  
		if (strncmp(lc_messages, "zh_CN", 5) == 0 || pg_strncasecmp(lc_messages, "chinese-simplified", 18) == 0)  
			language = "SIMPLIFIED CHINESE_CHINA";  
		if (strncmp(lc_messages, "zh_TW", 5) == 0 || pg_strncasecmp(lc_messages, "chinese-traditional", 19) == 0)  
			language = "TRADITIONAL CHINESE_TAIWAN";  
		appendStringInfo(&buf, "NLS_LANG=%s.%s", language, charset);  
	}  
	else  
	{  
		appendStringInfo(&buf, "NLS_LANG=%s", nls_lang);  
	}  
```  
## 参考  
http://api.pgxn.org/src/oracle_fdw/oracle_fdw-1.5.0/oracle_fdw.c  
不在这里的通过orafce插件，扩展。  
[《PostgreSQL Oracle 兼容性系列之 - orafce介绍》](../201512/20151221_01.md)    
[《PostgreSQL Oracle兼容性之 - orafce (包、函数、DUAL)》](../201507/20150703_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")