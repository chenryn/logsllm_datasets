### Limitations of System Logs

**Space and CPU Cycles:**
Previous approaches often result in the wastage of space and CPU cycles [41]. More importantly, these methods do not fully leverage the broader value of application semantics as forensic evidence, beyond the bare minimum required for identifying work units.

**Semantic Gap:**
Existing system-level provenance logs provide a broad view of system activity but lack detailed knowledge of application-specific behaviors, which are crucial for reconstructing attacks. For instance, in our motivating example, information such as failed login attempts, HTTP headers, WordPress plugin behavior, and SQL queries cannot be extracted from system logs. This information is typically found in the siloed event logs of each application, such as PostgreSQL, which records all SQL queries, and HAProxy, which logs HTTP request headers. However, reliably associating these event descriptions with system records post-hoc is challenging due to multi-threaded activity and ambiguous or incomplete information within the application event logs.

Prior work has attempted to address the semantic gap through instrumentation-based techniques [57], [28], [55]. These approaches involve statically or dynamically instrumenting function calls to disclose function names, arguments, and return values. However, these systems have several limitations:
1. **Domain Knowledge Requirement:** Developers must specify which functions to instrument, imposing a domain knowledge requirement.
2. **Per-Application Basis:** The logging information is captured on a per-application basis, making it difficult to connect information flow between different applications.
3. **High-Level Semantic Events:** High-level semantic events may not always be effectively captured at the function call level.

### Our Approach

Recent research in application logging [25], [65], [64], [21], [49] has demonstrated the effectiveness of application logs in program understanding, debugging, and profiling. OmegaLog builds on these efforts, aiming to better leverage event logs during attack investigations. The key insight behind OmegaLog is that developers have already encoded high-level application semantics in the form of event logging statements. These statements not only contain relevant forensic information but also mark the boundaries of execution units in the program. The insertion of event logging statements is a natural byproduct of sound software engineering practices, allowing developers and users to better understand programs' runtime behavior. Thus, it is possible to enrich system logs with application semantics without further instrumentation or profiling. Additionally, these application logs can be used to identify execution units.

Applying this intuition to our motivating example yields the provenance graph in Figure 3a, generated using OmegaLog. The administrator can associate the malicious SQL query with a specific system call event (read). By performing execution partitioning on PostgreSQL using OmegaLog's logging behavior analysis, the administrator can trace back to system calls issued and received by Apache httpd, which are also annotated with application events describing the vulnerable web form. Iteratively, OmegaLog uses execution partitioning again to trace back to the correct unit of work within HAProxy to identify the IP address of the attacker. After determining how user data and login credentials were stolen via SQL injection, the investigator can then use a backward-tracing query on the index.html file to deduce that the attacker used a WordPress file manager plugin to deface the website, as shown in Figure 3b.

### Threat Model & Assumptions

This work considers an attacker whose primary goal is to exploit a security vulnerability in an application running on a system and exfiltrate or manipulate sensitive information. We make typical assumptions about the integrity of the operating system, kernel-layer auditing framework, audit logs, and application event logs, all of which are part of our trusted computing base (TCB) (cf., [39], [42], [41], [36], [30], [38], [58], [16]). These assumptions are made more reasonable through system-hardening techniques designed to mitigate threats to system logs. Like all prior work on execution partitioning, we also assume the integrity of applications' control flows (further discussed in §X). Hardware-layer trojans, side-channel attacks, and backdoors are out of scope for this paper.

### Application Logging Behavior

Our approach to partition long-running programs into execution units and overcome the dependence explosion problem relies on the pervasiveness of event-logging behavior in these applications. The importance of logging in applications is well-established [33]. Most open-source applications print event log messages at four levels of verbosity: FATAL, ERROR, INFO, and DEBUG. Higher levels include messages from lower levels (i.e., FATAL ⊆ ERROR ⊆ INFO ⊆ DEBUG).

To partition successful executions of an application into its units, we require log messages with verbosity levels of INFO or DEBUG to be present inside event-handling loops. We studied a large number of popular open-source applications to investigate this behavior. We collected a list of 79 long-running Linux applications across various categories, written in C/C++, Java, Python, and Erlang. Our results, summarized in Table II, show that 39 applications print log messages with both INFO and DEBUG levels (IN+DE) inside event-handling loops, while 8 applications only log at INFO level and 17 applications only log at DEBUG level.

During our study, we found 15 applications that do not have any information about event logs in their source code or man pages. These applications are categorized as light-weight applications and GUI applications. Light-weight applications, such as thttpd (Web server) and skod (FTP client), are designed to keep a minimal resource footprint and do not print log messages for new events. GUI applications, such as PDF readers, often do not print log messages for forensically important events like opening a new PDF file.

Our study suggests that sufficient logging information is present inside the event-handling loops of long-running applications, allowing us to automatically identify the unit boundaries of these programs. For further evaluation, we consider only the applications listed in Table III, selected based on their popularity and category. We exclude applications that do not print meaningful log messages for new events and those that use asynchronous I/O with callbacks, which are currently not handled by OmegaLog (described more in §X).

### Design Overview

#### Definitions

- **Whole-System Provenance Graph:** A graph generated from system-level audit logs, where vertices represent system subjects (processes) and system objects (files and socket connections), and edges represent causal dependency events. Edges are annotated with timestamps and event types, such as read or execute.
- **Causality Analysis:** Forensic investigators use the whole-system provenance graph to find the root causes and ramifications of an attack by performing backward and forward causality analysis. Given a symptom of an attack, an investigator can issue a backward-tracing query to find the root cause by traversing the ancestry of the symptom event. A forward-tracing query, starting from the root cause, returns all causally connected events in the progeny, explaining the ramifications of the attack.
- **Properties of Causality Analysis:**
  - **Validity:** The provenance graph correctly describes the system's execution, ensuring no edge is added between entities that are not causally related.
  - **Soundness:** The provenance graph respects the happens-before relationship during backward and forward tracing queries.
  - **Completeness:** The provenance graph is self-contained and fully explains the relevant events.

#### Design Goals

The limitations of prior work motivated the following high-level goals for our solution:
- **Semantics-Aware:** Our threat investigation solution must be cognizant of the high-level semantic events that occurred within the contexts of each attack-related application.
- **Widely Applicable:** Our solution must be immediately deployable on a broad set of applications commonly found in enterprise environments. Therefore, the solution must not depend on instrumentation or developer annotations and should be agnostic to the specific application.