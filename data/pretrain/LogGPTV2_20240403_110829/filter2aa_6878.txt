# True zero (RE, 477p, 2 solved)
In this challenge we get a [binary](truezero) and [encrypted flag](flag.enc).
After reversing the binary, we can see that the input is a PNG file, and that the encryption is doing basically:
```python
def encrypt(flag, key, rounds_number):
    for i in range(rounds_number):
        flag = xor(flag, key)
        flagbin = "".join("{:08b}".format(ord(c)) for c in flag)
        flag = "\x01" + xor(flagbin[1:], flagbin[:-1])
        flag = xor(flag, "0" * len(flag))
        flag = "".join(chr(int(flag[i:i + 8], 2)) for i in range(0, len(flag), 8))
    return flag
```
So it's xoring the `flag` bytes with `key`, then xors this with flag shifted by 1 bit, repeats this for many rounds, and at the end puts `1` at the highest bit.
Number of rounds is unknown, up to 1337.
Key has unknown length, but it's repeated many times to match the plaintext.
First observation we can make is about the encrypted file itself.
At one point of the file we have a long repeating pattern of bytes.
Once we compared this with the flag PNG from `helix` challenge, we noticed that at pretty much the same offsets the file has palette definition, which in that case was all `0`.
Our assumption is that also in this case, those pattern bytes are basically encrypted zeros.
Since this part has only `0` as flag, it means it contains only the `key` part.
We can use this, to unxor the `key` from the encrypted flag.
See sanity test:
```python
def sanity2():
    flag = os.urandom(512)
    key = os.urandom(16)
    while len(key) > 1)
    one = (1  1:
                print(results)
                break
            known = known + chr(results[0])
            known = known[1:]
            flag_s = flag_s[1:]
            full_result += chr(results[0])
            if condition(full_result):
                print('match for', round_number)
                break
if __name__ == '__main__':
    freeze_support()
    solve(range(1,1338), lambda x: "tRNS" in x, 64)
```
From this we know that it matched for rounds `116+k*128`.
For those rounds we now extend the search 256 bytes further to look for `IDAT`, and we find that `IDAT` was found for `244` rounds -> `solve([116 + k*128 for k in range(10)], lambda x: "IDAT" in x, 64+260)`.
Now we can finally recover the real plaintext (except for the part before palette), using the same code, just this time going all the way to the end, with no stop conditions.
It takes a while, but eventually we get back [the file](out.bin).
Now what's left is to recover the actual PNG, eg. by decopressing the IDAT, guessing the sizes and displaying the raw pixels.
Eventually we get:
![](flag.png)