                num = (num + 1) % pd.size();
            }
            randlist.append(num);
        }
        void Randlist::randpd(QVector &pd){
            int idlist;
            int begin_index = 0;
            int idpd = begin_index;
            do{
                idlist = randlist.indexOf(idpd);
                std::swap(pd[idlist], pd[begin_index]);
                idpd = idlist;
            }while(idpd != begin_index);
        }
程序流程是，获取输入后先用x09补全长度到5的倍数。之后是CBC加密，这里没有使用初始IV。key="Cirno"，5个字符一组，先和将每一个字符的高4位和低4位交换，再和key异或。除第一组外每组再和前一组异或。最后使用上面的代码和最初(补全后)的输入生成奇怪的位置字典，重排CBC后的字串，进行`strcmp`。
**Re200**
re200是一个完(zhi)整(zhang)的文件加密器。当然，解密器我没有写。这题本来是想玩SMC的…但是后来发现写好的SMC对逆向无任何干扰，反而是signal坑了不少人。
程序在main函数执行前(init)先运行了sub_8048901，用sig ==
ppid检测了是否被调试，如果是的话就直接将一个后面用到的表填充为错误数值。之后是取得分页大小，将sub_8048AC3所在的内存设置为RWX。最后设置signal(SIGUSR1,
sub_80489FB)。以上这些除了sysconf()，都是int 0x80实现的。
main函数执行，再一次检测是否有调试(有的话直接exit)，获得用户输入，补全为偶数长度，拷贝字符串到全局变量，然后用kill(0,
SIGUSR1)触发了之前设置的signal，跳转到sub_80489FB。将补全后的字符串分为两个一组，循环调用sub_8048A7B。在sub_8048A7B中根据((a>>2)&0x3)和之前的表得到一个函数地址，调用sub_8048AC3。
sub_8048AC3在初始化时被设置为RWX…利用sub_8048A7B中的函数地址进行SMC，跳转到取得的函数中。在之后的函数就是对这组字符的移位和异或加密。
signal处理完成，回到正常流程中，再再一次检测是否有调试(出题人:求不打)。对加密完的字串做base16。最后用维吉尼亚算法加密文件，输出。
解题时，维吉尼亚直接在线解密就可以，然后得到key.明文是小说《基督山伯爵》里面随意选的一段话，只是为了帮助进行维吉尼亚解密，并没有实际意义。解密得到key后，程序就和一个crackme没什么区别了…分析算法逆出orignal
key即可。测试时是正向暴力破解，反推也没问题。
orignal key = H4ck1ngT0TheGate
此外：
main函数的前后分别会执行init和finit。本题源码中的init声明如下
    void init_game(void) __attribute__((constructor));
objdump和gdb分析ELF时都需要Section header table，但是ELF文件的执行只需要Program header
table。程序编译完之后直接覆盖了Section header table，导致gdb直接GG。但是对IDA无效。section header
table也是可以重建的，但是…之后还是有反调试拦着(逃)。
因为char类型的符号问题，在逆推时会有点小问题。但是这并不重要…逆推也是可解的。
测试脚本：
    char *strkey = "ieedcpgdhkedddfenkfaifgggcgbbbgf";
        char all_a;
        char all_b;
        int main(int argc, char const *argv[])
        {
            boom();
            return 0;
        }
        void zero(){
            char c;
            //c = a
            c = (all_a & 0xF0) | (all_b & 0x0F);
            all_b = (all_a & 0x0F) | (all_b & 0xF0);
            all_a = c;
            all_a = all_a ^ 0x99;
            all_b = all_b ^ 0x55;
        }
        void one(){
            all_a = all_a ^ all_b;
            all_b = ((all_b >> 4) & 0x0F) | ((all_b > 4) & 0x0F) | (all_b & 0xF0);
            all_a = c;
        }
        void three(){
            //and 0xF0 ?
            all_a = all_a ^ (all_a > 2) & 0x3;
                        switch(map){
                            case 0: zero();break;
                            case 1: one();break;
                            case 2: two();break;
                            case 3: three();break;
                        }
                        tmp_1 = all_a;
                        tmp_2 = all_b;
                        end_1 = (tmp_1 & 0x0F) + 0x61;
                        end_2 = ((tmp_1 >> 4) & 0x0F) + 0x61;
                        end_3 = (tmp_2 & 0x0F) + 0x61;
                        end_4 = ((tmp_2 >> 4) & 0x0F) + 0x61;
                        if((end_1 == strkey[i]) && (end_2 == strkey[i+1]) && (end_3 == strkey[i+2]) && (end_4 == strkey[i+3])){
                            printf("%c%cn", a, b);
                        }    
                    }
                }
            }
        }
**Re300**
Re300原本的出题人跑路了，我临时帮他出题。随手找了个DDoS木马。本着不互相伤害的原则。没有用MIPS版本，没有去掉符号表。所以就很easy了。
首先，题目提供一个ELF可执行文件（re300）和抓的包（dump.pcap）。提示信息flag(ip:port)，那自然是找被打的ip和端口号了。关于此马的详细分析可参考
因为使用AES加密数据包，遂家族命名为AES.DDoS。本样本产自China的变种台风ddos，支持多平台MIPS，Windows，Linux等。
首先观察数据包，就那么几条。显然C&C IP为192.168.168.133，上线端口48080，而Victim IP
为192.168.168.148（由第4个数据包可以确定）。那么可以确定第16个数据包，为中控IP像肉鸡发送的指令包。
懂得人自然懂。数据包的格式一般为【指令号+数据内容】在`_ConnectServerA`函数里，106行接收buffer，前4个字节表示指令号，当其为6时（118行），执行
**DealwithDDoS** :
ok，接下来我们可以发现程序使用AES算法开始解密，同时注意到数据包中存在重复的数据`7df76b0c1ab899b33e42f047b91b546f`，很容易联想到分组加密的ECB（电码本）模式，并且分组长度是16，这点从key0也可以辅证。
由此我们可以解密出数据包。接下来就是找到数据包中表示ip和port的字段。这个看一下DealwithDDoS（128行）这个函数。数据包的偏移位置0x184表示attackMode(SYN,TCP,UDP…)，那0x188处就是轮数了吧。
随便挑一个mode跟进，SYN_Flood函数。40行和41行分别取出port，ip。至此，题目想要的数据已经分析出来了。
最后就是写脚本啦：
    from Crypto.Cipher import AES
    from struct import unpack
    from hashlib import md5
    with open('./re300') as fp:
        fp.seek(0xe81ff)
        key = fp.read(16)