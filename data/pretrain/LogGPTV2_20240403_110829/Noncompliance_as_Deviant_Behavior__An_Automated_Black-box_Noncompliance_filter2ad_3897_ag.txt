### Custom Termination Conditions for Model Learning

To balance scalability and coverage, custom termination conditions for model learning are employed. Additionally, the removal of deviation-inducing transitions in disconnected FSMs helps identify other noncompliance instances within the same diversity class. However, there is an inherent limitation: DIKEUE cannot detect noncompliance instances when both implementations under test are noncompliant to the standard but are equivalent.

DIKEUE performs pairwise checks on the equivalence of devices drawn from 14 different UE models belonging to 5 vendors, resulting in 91 pairwise comparisons. Given this extensive testing, it is highly unlikely that all devices deviate from the standard in the same way. If one device deviates from the standard differently than the rest, our equivalence checker can identify it.

### Property Agnosticism

DIKEUE is considered property-agnostic, even though predicates (e.g., `is_null_security(m)`) of messages might be seen as properties. In this context, we follow the typical notion of properties [12, 19, 30, 32], which refers to stateful end-to-end guarantees of a system. Since DIKEUE does not require any such properties to identify noncompliance instances between any two implementations, we consider it to be property-agnostic.

### Applicability to 5G

To the best of our knowledge, there is no open-source protocol stack for the standalone 5G core network that can be used to develop a 5G-adapter. Therefore, testing 5G cellular devices with DIKEUE is left for future work. Our LTE-specific insights, based on LTE protocol invariants, are equally applicable to 5G. For example, similar to LTE, 5G has a multi-layer design with most procedures unchanged. Thus, the multi-layer protocol handling, context-checker, and other insights will largely remain the same when adopting DIKEUE to 5G.

### Parallelizing Model Learning and Automatic Exploit Generation

We discuss parallelizing model learning and automatic exploit generation from deviant behavior in Appendix A.4.

### Conclusion and Future Work

We present DIKEUE, a tool that can automatically infer the FSMs of 4G LTE UE implementations and identify deviant behaviors among them in a property-agnostic way. To demonstrate its viability, we applied DIKEUE to 14 COTS devices from 5 vendors, uncovering 15 deviant behaviors, 11 of which are exploitable. We have responsibly disclosed these vulnerabilities to the affected stakeholders, who have acknowledged our findings.

**Future Work:**
- Accommodate session management and other data layer protocols.
- Port DIKEUE to 5G.
- Develop an automated attack strategy generator to provide end-to-end attack scenarios from deviating behavior traces.

### Acknowledgements

This work is supported by NSF grants IIS-2112471, CNS-2006556, DARPA YFA D19AP00039, and Intel. We thank GSMA and the baseband vendors and manufacturers for coordinating with us during the vulnerability disclosure process.

### References

[References are listed here, following the provided format and links.]

### Appendix

#### A.1 NAS and RRC Layer Procedures

##### A.1.1 NAS Layer Procedures

We briefly discuss the NAS layer procedures most relevant to our paper, as shown in Figure 7.

### Device Specifications

| **Device** | **Baseband** | **OS Version** |
|------------|--------------|----------------|
| Motorola Nexus 6 | Exynos 7420 Octa | Android 7.1.1 |
| HTC One E9+ | Mediatek MT6795M Helio X10 | Android 6.0 |
| Samsung Galaxy S6 | Qualcomm APQ8084 Snapdragon 805 | Android 8.0 |
| HTC Lifestyle | Qualcomm MSM8928 Snapdragon 400 | Android 6.0 |
| Huawei Nexus 6P | Qualcomm MSM8994 Snapdragon 810 | Android 8.0 |
| Samsung Galaxy S8+ | Qualcomm MSM8998 Snapdragon 835 | Android 9.0 |
| Google Pixel 3 XL | Qualcomm SDM845 Snapdragon 845 | Android 9.0 |
| Huawei Y5 Prime | - | - |
| Honor 8X | - | - |
| Huawei P8lite | - | - |
| Xiaomi Mi A1 | - | - |
| Apple iPhone XS | - | - |
| Yoidesu 4G LTE USB WiFi Modem | - | - |
| Fibocom L860-GL | - | - |

Figure 7: LTE control plane procedures. NAS and RRC layer procedures are shown in black and blue, respectively.