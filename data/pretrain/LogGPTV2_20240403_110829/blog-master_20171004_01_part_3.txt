Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.  
### ST_Within  
与 ```ST_Contains``` 含义相反。  
```  
ST_Within(A, B)  
```  
Returns true if the geometry A is completely inside geometry B  
### 区别  
```  
@ 和 ~的操作并不是直接针对几何对象，而是针对A和B的bound box的，也就是说包含对象的左下和右上的点组成的BOX。  
ST_Within和ST_Contains是针对几何对象的，但是从GiST索引搜索角度来看，是需要先用BOUND BOX去搜索，再通过CPU进行计算来判断的。  
```  
### 例子  
![pic](20171004_01_pic_004.jpg)  
```  
A @ Polygon，返回真  
B @ Polygon，返回真  
C @ Polygon，返回真  
ST_Contains(Polygon, A)，返回假  
ST_Contains(Polygon, B)，返回真  
ST_Contains(Polygon, C)，返回假  
```  
## ST_Subdivide
http://postgis.net/docs/manual-2.4/ST_Subdivide.html  
ST_Subdivide也是分割函数，可以将一个空间对象，分割成多个空间对象。   
## 小结  
空间搜索的两个可以优化的点，原理如下：  
1、空间数据在存储时乱序存放，导致搜索一批数据时扫描的数据块很多。（点查感觉不到这个问题。）  
2、PostGIS的GiST空间索引，采用了BOUND BOX作为KEY，搜索时也是使用对象的BOUND BOX进行搜索，因此当对象是长条条时，可能造成大量的BOUND BOX空洞，放大了扫描范围（对st_contains, st_within来说），增加了CPU过滤的开销。  
优化手段1：空间聚集，解决IO放大问题。  
优化手段2：对输入条件（长条条的多边形）进行SPLIT，降低BOUND BOX放大引入的扫描范围（对st_contains, st_within来说）放大的问题。  
数据量：1000万。  
点面判断（长条形多边形，或者离散多个多边形对象覆盖的空间对象）。   
对比 | 优化前 | 优化1（空间聚集） | 优化1,2(SPLIT多边形)  
---|---|---|---
访问数据块数量 | 35323 | 1648 | 243
被过滤的无效记录条数 | 26590 | 26590 | 0
## 参考  
[《通过空间思想理解GiST索引的构造》](../201708/20170825_01.md)    
[《PostgreSQL 黑科技 - 空间聚集存储》](../201709/20170905_01.md)    
[《Greenplum 空间(GIS)数据检索 b-tree & GiST 索引实践 - 阿里云HybridDB for PostgreSQL最佳实践》](../201708/20170824_02.md)    
[《PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_01.md)    
[《PostGIS 空间数据学习建议》](../201708/20170809_01.md)    
[《PostgreSQL 空间切割(st_split)功能扩展 - 空间对象网格化》](../201710/20171005_01.md)   
http://postgis.net/docs/manual-2.4/ST_Within.html  
http://postgis.net/docs/manual-2.4/ST_Contains.html  
http://postgis.net/docs/manual-2.4/ST_Geometry_Contained.html  
http://postgis.net/docs/manual-2.4/ST_Geometry_Contain.html  
http://postgis.net/docs/manual-2.4/ST_Split.html  
http://postgis.net/docs/manual-2.4/ST_Snap.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")