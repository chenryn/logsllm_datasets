注解：
第一行：定义用户别名 SYSADER 下有成员beinan、linuxsir 和beinan 用户组下的成员，用户组前面必须加%号；
第二行：定义用户别名DISKADER，成员有lanhaitun
第三行：定义Runas用户，也就是目标用户的别名为OP，下有成员root
第四行：定义 SYSCMD 命令别名，成员之间用,号分隔，最后的t/usr/bin/passwd root 表示不能通过 passwd 来更改root 密
码：
---
## Page 37
第五行：定义命令别名DSKCMD，下有成员parted和fdisk：
第六行：表示授权SYSADER下的所有成员，在所有可能存在的主机名的主机下运行或禁止SYDCMD和DSKCMD下定义
的命令。更为明确遥说，beinan、Iinuxsir 和beinan用户组下的成员能以 root 身份运行chown、chmod、adduser、passwd，
但不能更改root的密码：也可以以root 身份运行 parted和 fdisk，本条规则的等价规则是：
beinan, 1inuxsir, %beinan ALL=/bin/chown, /bin/chmod, /usr/sbin/aduser, /usr/bin/passrd
[AZaz]α, 1/usr/bin/passed root, /sbin/parted, /sbin/fdisk
第七行：表示授权DISKADER 下的所有成员，能以OP的身份，来运行DSKCMD，不需要密码：更为明确的说lanhaitun
能以 root 身份运行 parted 和 fdisk 命令：其等价规则是：
lanhaitunALL=(root)/sbin/parted, /sbin/fdisk
加在哪里为好？理解下面的例子吧，能明白的：
SYSADER  ALL= NOPASSWD:  SYDCMD, NOPASSKD: DSKCMD
3.4.5、/etc/sudoers中其它的未尽事项；
在授权规则中，还有 NOEXEC：和 EXEC的用法，自已查man sudoers 了解：还有关于在规则中通配符的用法，也是需要了
解的。这些内容不多说了，毕竞只是一个人性的文档。soduers 配置文件要多简单就有多简单，要多难就有多难，就者目己
的应用了。
3.4.6、sudo的用法：
我们在前面讲的/etc/sudoers的规则写法，最终的目的是让用户通过sudo 读取配置文件中的规则来实现匹配和授权，以便替
换身份来进行命令操作，进面完成在其权限下不可完成的任务：
我们只说最简单的用法：更为详细的请参考man sudo
sudo[参数选项]命令
-列出用户在主机上可用的和被禁止的命令：一般配置好/etc/sudoers 后，要用这个命令来查看和测试是不是配置正确的：
-验证用户的时间截：如果用户运行 sudo后，输入用户的密码后，在短时间内可以不用输入口令来直接进行 sudo 操作：
用-v可以跟踪最新的时间截：
-U指定以以某个用户执行特定操作：
k删除时间截，下一个sudo命令要求用求提供密码：
举列：
首先我们通过visudo 来改/etc/sudoers 文件，加入下面一行；
beinan, linuxsir, %beinan ALL=/bin/choxn, /bin/chmod, /usr/sbin/adduser, /usr/bin/passwd
[AZaz], 1/usr/bin/passed root, /sbin/parted, /sbin/fdisk
然后列出 beinan 用户在王机上通过 sudo 可以切换用户所能用的命令或被禁正用的命令;
[beinan@localhost~]$sudo-1注：列出用户在主机上能通过切换用户的可用的或被禁止的命令：
Password:注：在这里输入您的用户密码：
User beinan may run the following commands on this host:
(root)/bin/chow注：可以切换到root下用chow 命令;
（root）/bin/chmod注：可以切换到root 下用chmod 命令：
(root)/usr/sbin/adduser 注：可以切换到 root 下用 adduser 命令;
(root)/usr/bin/passvd[A-Za-z]*注：可以切换到 root 下用 passvd 命令：
---
## Page 38
(root）!/usr/bin/passwd root注：可以切换到root 下，但不能执行 passnd root 来更改 root 密码：
(root）/sbin/parted注：可以切换到root 下执行 parted;
(root)/sbin/fdisk注：可以切换到root 下执行fdisk :
通过上面的 sudo-I列出可用命令后，我想通过chown 命令来改变/opt目录的属主为beinan：
[beinan0localhost ]$ 1s -1d /opt注：查看/opt 的属主;
drvxr-xrx26rootroot 409610月27 10:09/opt注：得到的答案是归属root用户和root用户组；
[beinan@localhost ]$ sudo chown beinan:beinan /opt注：通过 chown *改变属主为 beinan用户和 beinan用户组;
[beinan@localhost]$ 1s-1d/opt注：查看/opt属主是不是已经改变了：
drvxr-xrx26 beinan beinan 4096 10 月 27 10:09 /opt
我们通过上面的例子发现beinan用户能切换到root 后执行改变用户口令的 passwd 命令：但上面的 sudo-I输出又明文写着
不能更改root的口令：也就是说除了root的口令，beinan用户不能更改外，其它用户的口令都能更改。下面我们来测试：
对于一个普通用户来说，除了更改自身的口令以外，他不能更改其它用户的口令。但如果换到root身份执行命令，则可以更
改其它用户的口令：
比如在系统中有nuxsir这个用户，我们想尝试史改这个用户的口令，
[beinan@localhost ]$ passvd linuxsir注：不通过 sudo 直接运行passvd 来更改 linuxsir 用户的口令;
passvd:Only root can specify a user name.注：失败，提示仅能通过 root 来更改：
[beinan@localhost ]$ sudo passwd linuxsir注： 我们]通过/etc/sudoers 的定义, 让 beinan 切换到 root 下执行 passed
命令来改变linuxsir的口令：
Changing password for user linuxsir.
Nev LNIX password:注：输入新口令：
Retype new UNIX passvord:注：再输入—次;
passed:all authentication tokens updated successfully.注: 改变成功;
后记：
是管理用户的工具介绍：当然我还会写用户查询工具等与用户管理相关的
4、权限命令
4.1、chmod
文件或者目录的用户能够使用chmod命令修改文件的权限。Chmod命令有两种方式：一种是字符方
式，使用字符来修改文件的权限：另外一种是数字方式，使用3个数字的组合来修改文件的权限。
使用方式 : chmod [-cfvR] [-help] [version] mode file..
说明：Linux/Unix的档案调用权限分为三级：档案拥有者、群组、其他。利用chmod可以借以控制档
案如何被他人所调用。
参数：
mode：权限设定字串，格式如下：[ugoa...[+-][rwxX]..]，其中
u表示该档案的拥有者，g表示与该档案的拥有者属于同一个群体（group)者，o表示其他以外的人，a表
示这三者皆是。
+表示增加权限、－表示取消权限、·表示唯一设定权限。
“表示可读取，W表示可写入，X表示可执行，X表示只有当该档案是个子目录或者该档案已经被设定
过为可执行。
-C：若该档案权限确实已经更改，才显示其更改动作
---
## Page 39
-f：若该档案权限无法被更改也不要显示错误讯息
-V：显示权限变更的详细资料
-R：对目前目录下的所有档案与子目录进行相同的权限变更（即以递回的方式逐个变更)
--help：显示辅助说明
--version：显示版本
范例：
将档案file1.txt设为所有人皆可读取：chmod ugo+rfile1.txt
将档案file1.txt设为所有人皆可读取：chmoda+rfile1.txt
将档案file1.txt与fle2.txt设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不
可写入 : chmod ug+w,o-w file1.txt file2.txt
将ex1.py设定为只有该档案拥有者可以执行：chmodu+xex1.py
将目前目录下的所有档案与子目录皆设为任何人可读取：chmod-Ra+r*
数字方式的基本语法是：chmod nnn文件
其中第1、2、3个n分别表示用户、组成员和所有其它用户。各个位置上的n要么是一个0，或者是一
个由赋予权限的相关值相加得到的单个阿拉伯数字之和。这些数字的意义如表1所示。
值
表示的意义
4
表示文件或者目录的读权限
2
表示文件或者目录的写权限
1
表示文件或者目录的执行权限
很显然，当使用数字方式时，这3个数字必须为0至7中的一个。
若要rwx属性则4+2+1=7;
若要rw-属性则4+2=6:
若要r-x属性则4+1=7.
范例：
chmod a=rwxfile 和 chmod 777 file 效果相同]
chmod ug=rwx,o=x file 和 chmod 771 file 效果相同
若用 chmod 4755 filename 可使此程序具有root 的权限
4.2、umask
很显然，系统中各种文件的权限设置对特定用户的数据安全有很大影响。但是要求用户逐一明确设
置系统中每个文件的权限也是不现实的，为此，需要使用umask命令，该命令可以为用户账号中新文
件的创建进行缺省设置。系统管理员必须要为你设置一个合理的umask值，以确保你创建的文件具有
所希望的缺省权限，防止其他非同组用户对你的文件具有写权限。具体来说，umask是用来设置权限掩
码的，权限掩码由3个数字组成，将现有的存取权限减掉权限掩码后，即可产生建立文件时默认的权限。
语法：umask[-S][权限掩码]
补充说明：umask可用来设定[权限掩码]。[权限掩码]是由3个八进制的数字所组成，将现有的存
取权限减掉权限掩码后，即可产生建立文件时预设的权限。
参
数：
-S以文字的方式来表示权限掩码。
登录之后，可以按照个人的偏好使用umask命令来改变文件创建的缺省权限。相应的改变直到退
出该shell或使用另外的umask命令之前一直有效。一般来说，umask命令是在/etc/profile
文件中设置的，每个用户在登录时都会引用这个文件，所以如果希望改变所有用户的umask，可以在
该文件中加入相应的条目。如果希望永久性地设置自己的umask值，那么就把它放在自己SHOME
目录下的.profile或.bash_profile文件中。
如何计算 umask值
---
## Page 40
umask命令允许你设定文件创建时的缺省模式，对应每一类用户（文件属主、同组用户、其他用
户）存在一个相应的umask值中的数字。对于文件来说，这一数字的最大值分别是6。系统不允许你
在创建一个文本文件时就赋予它执行权限，必须在创建后用chmod命令增加这一权限。目录则允许
设置执行权限，这样针对目录来说，umask中各个数字最大可以到7.该命令的一般形式为：
umask nnn
其中nnn为umask置000-777.
计算umask值：可以有儿种计算umask值的方法，通过设置umask值，可以为新创建的文
件和目录设置缺省权限。
例如，对于umask值002，相应的文件和目录缺省创建权限是什么呢？
第一步，我们首先写下具有全部权限的模式，即777（所有用户都具有读、写和执行权限）。
第二步，在下面一行按照umask值写下相应的位，在本例中是002。
第三步，在接下来的一行中记下上面两行中没有匹配的位。这就是目录的缺省创建权限。稍加练习
就能够记住这种方法。
第四步，对于文件来说，在创建时不能具有文件权限，只要拿掉相应的执行权限比特即可。
这就是上面的例子，其中umask值为002：
1)文件的最大权限rwx rwxrwx(777)
2) umask值为 00 2-....--W-
3）目录权限rwxrwxr-x(775）这就是目录创建缺省权限
4）文件权限rw-rw-r--(664)这就是文件创建缺省权限
系统默认的umask 码是0022也就是：目录755(rwx,rx,rx)，文件：644(rw,r)。
umask 码的换算
0022+0755=0777对应默认目录权限反之0777-0755=0022
0022+0644+0111=0777 对应默认文件权限反之0777-0111-0644=0022
哈哈~~简单吧！假如我们要将默认目录权限设置为744那么对应的umask是0777-0744=
0033，然后执行umask 0033命令就将umask码改成0033了。
下面是另外一个例子，假设这次umask值为022：
1）文件的最大权限rwx rwxrwx(777)
2 ) u m a s k 值为 0 2 2 --- -W--W-
3）目录权限rwxr-xr-x[755）这就是目录创建缺省权限
4）文件权限rw-r--r-(644）这就是文件创建缺省权限
下面是常用的umask值及对应的文件和目录权限
umask值目录
文件
0 2 2
7 5 5
6 4 4
0 2 7
7 5 0
6 4 0
0 0 2
7 7 5
6 6 4
0 0 6
7 7 1
6 6 0
0 0 7
7 70
6 6 0
如果想知道当前的umask值，可以使用umask命令：如果想要改变umask值，只要使用uma
sk命令设置一个新的值即可：
$ umask 002
确认一下系统是否已经接受了新的umask值：在使用umask命令之前一定要弄清楚到底希望
值设置为600，那么所创建的文件/目录的缺省权限就是066！除非你有特殊需要，否则没有必要去管
他，系统默认的值“022”umask是用的掩码，至于掩码的概念，从基础学吧，这里不说了。
---
## Page 41
linux中的文件/目录许可是用4位八进制数表示的。其中第一个八进制数用来表示特殊许可设置，
第二个数字用来设置文件所有者的许可，第三个数字用来设置组许可，第四个数字用来设置所有人的许
可。
例如，root的权限为777，若权限掩码设为022，那么两都相减后可得755。下面是在我的系统更
改umask的一些情况：
[root@linuxserver root]# umask
022
上述命令显示表示我的系统的umask值为022，
[root@linuxserver root]# umask -S
u=rwx,g=rx,o=x
当umask值为022时，默认情况下各用户的权限。注意这里的参数“S”是大写。
[root(@linuxserver root]# umask 177
[root(@linuxserver root]# umask -S
u=rw,g=,o=
上述两行命令把umask值改为177，结果只有文件所有者具有读写文件的权限，其它用户不能访问
该文件。这显然是一种非常安全的状态。
4.3、chown
chown命令用途更改与文件关联的所有者或组。
语法 chown[  -f ] [ -h] [  -R Owner [ :Group { File .. | Directory .- }
描述chown命令将File参数指定的文件的所有者更改为Owner参数指定的用户。Owner参数的值可
以是可在/etc/passwd文件中找到的用户标识或登录名。还可以选择性地指定组。Group参数的值可以是可
在/etc/group文件中找到的组标识或组名。
只有root用户可以更改文件的所有者。只在您是root用户或拥有该文件的情况下才可以更改文件的
组。如果拥有文件但不是root用户，则只可以将组更改为您是其成员的组。
虽然-H、-L和-P标志是互斥的，指定不止一个也不认为是错误。指定的最后一个标志确定命令拟稿
将演示的操作。
参数：
-f禁止除用法消息之外的所有错误消息。
h更改遇到的符号链接的所有权，而非符号链接指向的文件或目录的所有权。当遇到符号链接而您未
指定-h标志时，chown命令更改链接指向的文件或目录的所有权，而非链接本身的所有权。如果指定
号链接在命令行上指定，chown变量会更改由符号引用的目录的用户标识（和组标识，如果已指定）
和所有在该目录下的文件层次结构中的所有文件。
-L如果指定了-R选项，并且引用类型目录的文件的符号在命令行上指定或在遍历文件层次结构期间遇
到，chown命令会更改由符号链接引用的目录的用户标识（和组标识，如果已指定）和在该目录之下
的文件层次结构中的所有文件。
支持该操作，则chown命令会更改符号链接的所有者标识（和组标识，如果已指定）。chown命令不
会执行至文件层次结构的任何其它部分的符号链接。
-R递归地降序目录，更改每个文件的所有权。当遇到符号链接并且链接指向目录时，更改该目录的所
有权，但不进一步遍历目录。不过-h、-H、-Lor-P标志也未指定，则当遇到符号链接并且该链接指向
到目录时，该目录的组所有权更改但不会进一步遍历目录。安全性访问控制：此程序应该作为"可信计
算基"中的正常用户程序安装。退出状态该命令返回以下出口值：0命令执行成功并已执行所有请求的
更改。>0发生错误。
---
## Page 42
示例：
要更改文件program.c的所有者：chownjim program.cprogram.c的用户访问权限现在应用到jim。作
为所有者，jim 可以使用chmod命令允许或拒绝其他用户访问program.c。
要将目录/tmp/src 中所有文件的所有者和组更改为用户 john和组build：chown-Rjohn:build
/tmp/src 文件
将档案file1.txt 的拥有者设为users 群体的使用者 jessie：
chown jessie:users file1.txt
将目前目录下的所有档案与子目录的拥有者皆设为users群体的使用者lamport：
chmod -R lamport:users *
4.4、chgrp
功能说明：变更文件或目录的所属群组。
a]a] [s]u] 
考文件或目录>][--version][文件或目录..]
补充说明：在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用chgrp指
令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。
参
数：
-c或--changes效果类似"-v"参数，但仅回报更改的部分。
-f或-quiet或--silent不显示错误信息。
-h或--no-dereference只对符号连接的文件作修改，而不更动其他任何相关文件。
-R或--recursive递归处理，将指定目录下的所有文件及子目录一并处理。
-v或--verbose显示指令执行过程。
--help在线帮助。
--reference=把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相
同。
-version
显示版本信息。
范例：
[root@linux ~]# chgrp users install.log
[root@linux ~]#ls =1
-rw-r--r-- 1 root users 28490 Jun 25 08:53 install.log
[root@linux ~]#chgrptesting install.log
chgrp:invalidgroup name‘testing’<=出现错误信息～找不到这个用户组名～
发现了吗？文件的用户组被改成了users了，但要改成testing的时候，就会发生错误。注意，出现错误信
息后，要检查错误信息的内容。
五、目录结构
目录结构及主要内容“/”根目录部分有以下子目录：
/usr目录包含所有的命令、程序库、文档和其它文件。这些文件在正常操作中不会被改变的。这个
目录也包含你的Linux发行版本的主要的应用程序，警如，Netscape。