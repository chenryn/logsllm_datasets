# SAML存在漏洞影响多款产品
|
##### 译文声明
本文是翻译文章，文章原作者 Kelby Ludwig，文章来源：duo.com/blog
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
本文介绍了一个新的漏洞，该漏洞可以影响基于SAML的单点登录（single sign-on，SSO）系统。具备访问认证权限的攻击者可以利用这个漏洞，在不知道受害者密码的前提下，让SAML系统以受害者身份进行认证。
作为Duo Security的高级研究团队，[Duo Labs](https://duo.com/labs)发现有多个厂商受此漏洞影响，如下所示：
    OneLogin - python-saml - CVE-2017-11427
    OneLogin - ruby-saml - CVE-2017-11428
    Clever - saml2-js - CVE-2017-11429
    OmniAuth-SAML - CVE-2017-11430
    Shibboleth - CVE-2018-0489
    Duo Network Gateway - CVE-2018-7340
如果用户需要使用基于SAML的SSO方案，我们建议用户更新受影响的软件以修补此漏洞。如果你是Duo Security的客户，正在使用Duo Network
Gateway（DNG），你可以参考我们的[产品安全公告](https://duo.com/labs/psa/duo-psa-2017-003)了解更多信息。
## 二、SAML Responses简介
SAML的全程是Security Assertion Markup Language（安全声明标记语言），是单点登录系统常用的一种标准。Greg
Seador写了一篇很好的教学[指南](https://duo.com/blog/the-beer-drinkers-guide-to-saml)来介绍SAML，如果你对此不甚了解，我强烈建议你阅读这篇指南。
为了理解这个漏洞，我们需要了解SAML `Response`对服务提供商（Service
Provider，SP）的意义以及具体处理过程，这是一个重要概念。`Response`处理起来有许多细节之处，但可以简化为如下步骤：
1、用户向身份提供商（Identity Provider，IdP）发起认证请求，IdP（比如Duo或者GSuite）会生成经过签名的SAML
`Response`。用户浏览器随后会将response转发给某个SP（如Slack或者Github）；
2、SP验证SAML `Response`的签名；
3、如果签名有效，则通过SAML `Response`中用于身份标识的某个字符串（如`NameID`）来识别出需要对哪个用户进行认证。
一个非常简单的SAML `Response`结构如下所示：
        https://idp.com/
                PI:EMAIL
                some base64 data that represents the signature of the assertion
上面这个示例省略了许多信息，但省略的这些信息对于这个漏洞而言并不重要。上述XML数据中，最重要的两个元素为`Assertion`以及`Signature`。`Assertion`元素表达的意思是：“Hey，我是IdP，认证了`[PI:EMAIL](mailto:PI:EMAIL)`这个用户”。`Assertion`元素会对应一个签名，作为`Signature`元素的一部分存放在XML结构中。
如果`Signature`元素准确无误，应该能阻止对`NameID`的篡改。由于SP很有可能会使用`NameID`来判断需要对哪个用户进行身份认证，因此该签名就能阻止攻击者将他们自己的`NameID`信息从`[PI:EMAIL](mailto:PI:EMAIL)`修改为`[PI:EMAIL](mailto:PI:EMAIL)`。如果攻击者能够在不破坏签名的前提下修改`NameID`字段，那么这将是非常糟糕的一件事情（敲黑板，划重点）。
## 三、XML规范化
与XML签名有关的另一个方面是XML规范化（canonicalization）。XML规范化可以让逻辑上相等的两个XML文档在字节上拥有相同的表现形式。比如：
    some text
以及
    some text
这两个XML文档拥有不同的字节表现形式，但传达的是相同的意思（也就是说这两者逻辑上相同）。
XML规范化操作先于签名操作进行，这样可以防止XML文档中一些无意义的差异导致不同的数字签名。这点很重要，所以我在这里强调一下：多个不同但相似的XML文档可以具备相同的签名。大多数情况下这是一件好事，具体哪些差异比较重要由规范化算法所决定。
在上面那个SAML
Response中，你可能会注意到`CanonicalizationMethod`这个元素，该元素指定了签名文档之前所使用的规范化算法。[XML签名规范](https://www.w3.org/TR/xmldsig-core1/#sec-c14nAlg)中列出了几种算法，但实际上最常用的算法貌似是`http://www.w3.org/2001/10/xml-exc-c14n#`（我将其缩写为`exc-c14n`）
`exc-c14n`还有另一种变体，即`http://www.w3.org/2001/10/xml-exc-c14n#WithComments`。这款变体并不会忽略注释信息，因此前面我们给出的两个XML文档会得到不同的规范化表示形式。这两种算法的区别也是非常重要的一点。
## 四、XML API
该漏洞之所以存在，原因之一就在于不同的XML库（如Python的`lxml`或者Ruby的`REXML`）存在一些微妙且意料之外的处理方法。比如，考虑如下`NameID`
XML元素：
    kludwig
如果你想从该元素中提取用户身份信息，在Python语言中，你可能会使用如下代码：
    from defusedxml.lxml import fromstring
    payload = "kludwig"
    data = fromstring(payload)
    return data.text # should return 'kludwig'
这段不难理解吧，`.text`方法会提取出`NameID`元素所对应的文本。
现在，如果我稍微修改一下，往该元素中添加一点注释，会出现什么情况呢：
    from defusedxml.lxml import fromstring
    doc = "kludwig"
    data = fromstring(payload)
    return data.text # should return ‘kludwig’?
如果你觉得即使添加了注释我们也能得到一样的结果，那么你和我还有很多人看到结果后都会大吃一惊，事实上`lxml`中的`.text`
API返回的是`klud`！这是为什么呢？
我认为这里`lxml`的处理方式在技术层面上是正确的，虽然并不是那么直观。如果我们将XML文档看成一棵树，那么`XML`文档看上去如下所示：
    element: NameID
    |_ text: klud