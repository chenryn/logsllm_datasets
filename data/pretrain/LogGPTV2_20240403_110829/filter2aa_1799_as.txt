    [+0x2d4] QueueIndex
: IoPoolUntrusted (1) [Type: _EXQUEUEINDEX]
    [+0x2d8] AllThreadsExitedEvent : 0x0 [Type: _KEVENT *]
86 
CHAPTER 8 System mechanisms
All exceptions, except those simple enough to be resolved by the trap handler, are serviced by a 
kernel module called the exception dispatcher
handler that can dispose of the exception. Examples of architecture-independent exceptions that the 
-
TABLE 8-12 x86 exceptions and their interrupt numbers
Interrupt Number
Exception
Mnemonic
0
Divide Error
1
Debug (Single Step)
2
Non-Maskable Interrupt (NMI)
-
3
Breakpoint
4
5
Bounds Check (Range Exceeded)
6
Invalid Opcode
7
NPX Not Available
8
9
NPX Segment Overrun
-
10
Invalid Task State Segment (TSS)
11
Segment Not Present
12
13
General Protection
14
15
Intel Reserved
-
16
17
Alignment Check
18
Machine Check
19
20
Virtualization Exception
21
Control Protection (CET)
encountering a breakpoint while executing a program being debugged generates an exception, which 
the kernel handles by calling the debugger. The kernel handles certain other exceptions by returning 
an unsuccessful status code to the caller.
CHAPTER 8 System mechanisms
87
frame-based exception handlers to deal with these ex-
ceptions. The term frame-based
activation. When a procedure is invoked, a stack frame representing that activation of the procedure 
is pushed onto the stack. A stack frame can have one or more exception handlers associated with it, 
each of which protects a particular block of code in the source program. When an exception occurs, 
the kernel searches for an exception handler associated with the current stack frame. If none exists, the 
kernel searches for an exception handler associated with the previous stack frame, and so on, until it 
exception handlers.
frame-based technology has been proven to be attackable by malicious users). Instead, a table of 
handlers for each function is built into the image during compilation. The kernel looks for handlers as-
sociated with each function and generally follows the same algorithm we described for 32-bit code.
Structured exception handling is heavily used within the kernel itself so that it can safely verify 
whether pointers from user mode can be safely accessed for read or write access. Drivers can make 
use of this same technique when dealing with pointers sent during I/O control codes (IOCTLs).
Another mechanism of exception handling is called vectored exception handling. This method can be 
Microsoft Docs at https://docs.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling.
When an exception occurs, whether it is explicitly raised by software or implicitly raised by hard-
ware, a chain of events begins in the kernel. The CPU hardware transfers control to the kernel trap 
handler, which creates a trap frame (as it does when an interrupt occurs). The trap frame allows the 
system to resume where it left off if the exception is resolved. The trap handler also creates an excep-
tion record that contains the reason for the exception and other pertinent information.
If the exception occurred in kernel mode, the exception dispatcher simply calls a routine to locate a 
frame-based exception handler that will handle the exception. Because unhandled kernel-mode excep-
exception handler. Some traps, however, do not lead into an exception handler because the kernel al-
ways assumes such errors to be fatal; these are errors that could have been caused only by severe bugs 
in the internal kernel code or by major inconsistencies in driver code (that could have occurred only 
fatal errors will result in a bug check with the UNEXPECTED_KERNEL_MODE_TRAP code.
If the exception occurred in user mode, the exception dispatcher does something more elabo-
rate. The Windows subsystem has a debugger port (this is actually a debugger object, which will be 
processes. (In this case, by “port” we mean an ALPC port object, which will be discussed later in this 
dispatcher takes is to see whether the process that incurred the exception has an associated debugger 
88 
CHAPTER 8 System mechanisms
process. If it does, the exception dispatcher sends a debugger object message to the debug object associ-
ated with the process (which internally the system refers to as a “port” for compatibility with programs 
that might rely on behavior in Windows 2000, which used an LPC port instead of a debug object).
Trap
handler
Debugger
(first chance)
Frame-based
handlers
Debugger
(second chance)
Environment
subsystem
Windows Error
Reporting
Debugger
port
Debugger
port
Exception
port
Error
port
Kernel default
handler
Exception
record
Function call
ALPC
Exception
dispatcher
FIGURE 8-24 Dispatching an exception.
the exception dispatcher switches into user mode, copies the trap frame to the user stack formatted 
as a CONTEXT-
tured or vectored exception handler. If none is found or if none handles the exception, the exception 
dispatcher switches back into kernel mode and calls the debugger again to allow the user to do more 
debugging. (This is called the second-chance notification.)
was registered by the environment subsystem that controls this thread. The exception port gives the 
environment subsystem, which presumably is listening at the port, the opportunity to translate the 
-
sage to a systemwide error port that Csrss (Client/Server Run-Time Subsystem) uses for Windows Error 
Reporting (WER)—which is discussed in Chapter 10—and executes a default exception handler that 
simply terminates the process whose thread caused the exception.
CHAPTER 8 System mechanisms
89
Unhandled exceptions
All Windows threads have an exception handler that processes unhandled exceptions. This exception 
handler is declared in the internal Windows start-of-thread function. The start-of-thread function runs 
when a user creates a process or any additional threads. It calls the environment-supplied thread start 
CreateThread call.
The generic code for the internal start-of-thread functions is shown here:
VOID RtlUserThreadStart(VOID) 
{ 
    LPVOID StartAddress = RCX;   // Located in the initial thread context structure 
    LPVOID Argument = RDX;   // Located in the initial thread context structure 
    LPVOID Win32StartAddr; 
    if (Kernel32ThreadInitThunkFunction != NULL) { 
Win32StartAddr = Kernel32ThreadInitThunkFunction; 
    } else { 
Win32StartAddr = StartAddress; 
    } 
    __try 
    {  
DWORD ThreadExitCode = Win32StartAddr(Argument); 
RtlExitUserThread(ThreadExitCode);  
    } 
    __except(RtlpGetExceptionFilter(GetExceptionInformation())) 
    {   
NtTerminateProcess(NtCurrentProcess(), GetExceptionCode()); 
    }  
}
EXPERIMENT: Viewing the real user start address for Windows threads
The fact that each Windows thread begins execution in a system-supplied function (and not 
the user-supplied function) explains why the start address for thread 0 is the same for every 
Windows process in the system (and why the start addresses for secondary threads are also the 
same). To see the user-supplied function address, use Process Explorer or the kernel debugger.
Because most threads in Windows processes start at one of the system-supplied wrapper 
functions, Process Explorer, when displaying the start address of threads in a process, skips the 
initial call frame that represents the wrapper function and instead shows the second frame on the 
EXPERIMENT: Viewing the real user start address for Windows threads
The fact that each Windows thread begins execution in a system-supplied function (and not 
the user-supplied function) explains why the start address for thread 0 is the same for every 
Windows process in the system (and why the start addresses for secondary threads are also the 
same). To see the user-supplied function address, use Process Explorer or the kernel debugger.
Because most threads in Windows processes start at one of the system-supplied wrapper 
functions, Process Explorer, when displaying the start address of threads in a process, skips the 
initial call frame that represents the wrapper function and instead shows the second frame on the 
90 
CHAPTER 8 System mechanisms
Process Explorer does display the complete call hierarchy when it displays the call stack. 
Notice the following results when the Stack button is clicked:
Process Explorer does display the complete call hierarchy when it displays the call stack. 
Notice the following results when the Stack button is clicked:
Stack button is clicked:
Stack
CHAPTER 8 System mechanisms
91
this case, kernel32, because you are dealing with a Windows subsystem application. The third 
frame (line 18) is the main entry point into Notepad.exe.
Configure Symbols menu item located in the Options menu. 
System service handling
calls. In the preceding sections, you saw how interrupt and exception handling work; in this section, 
result of executing an instruction assigned to system service dispatching. The instruction that Windows 
uses for system service dispatching depends on the processor on which it is executing and whether 
User mode
Kernel mode
System
service call
System service 2
0
1
2
3
n
•••
System
service
dispatcher
System service
dispatch table
FIGURE 8-25 System service dispatching.
this case, kernel32, because you are dealing with a Windows subsystem application. The third 
frame (line 18) is the main entry point into Notepad.exe.
Configure Symbols menu item located in the Options menu. 
92 
CHAPTER 8 System mechanisms
Architectural system service dispatching
On most x64 systems, Windows uses the syscall instruction, which results in the change of some of the 
key processor state we have learned about in this chapter, based on certain preprogrammed model 
specific registers (MSRs):
I 
0xC0000081, known as STAR (SYSCALL Target Address Register)
I 
0xC0000082, known as LSTAR (Long-Mode STAR)
I 
Upon encountering the syscall instruction, the processor acts in the following manner:
I 
The Code Segment (CS) is loaded from Bits 32 to 47 in STAR, which Windows sets to 0x0010
I 
The Stack Segment (SS) is loaded from Bits 32 to 47 in STAR plus 8, which gives us 0x0018
I 
The Instruction Pointer (RIP) is saved in RCX, and the new value is loaded from LSTAR, which
Windows sets to KiSystemCall64
or KiSystemCall64Shadow otherwise. (More information on the Meltdown vulnerability was
provided in the “Hardware side-channel vulnerabilities” section earlier in this chapter.)
I 
I 
user-space values.
Therefore, although the instruction executes in very few processor cycles, it does leave the processor in an 
insecure and unstable state—the user-mode stack pointer is still loaded, GS is still pointing to the TEB, but 
the Ring Level, or CPL, is now 0, enabling kernel mode privileges. Windows acts quickly to place the pro-
happen on legacy processors, these are the precise steps that KiSystemCall64 must perform:
By using the swapgs instruction, GS now points to the PCR, as described earlier in this chapter.
The current stack pointer (RSP) is saved into the UserRsp
been loaded, this can be done without using any stack or register.
The new stack pointer is loaded from the RspBase
part of the PCR).
Now that the kernel stack is loaded, the function builds a trap frame, using the format described earlier 
in the chapter. This includes storing in the frame the SegSs set to KGDT_R3_DATA (0x2B), Rsp from the 
UserRsp in the PCR, EFlags from R11, SegCs set to KGDT_R3_CODE (0x33), and storing Rip from RCX. 
how syscall operates.
CHAPTER 8 System mechanisms
93
a syscall) be placed in RCX—yet the syscall instruction overrides RCX with the instruction pointer of the 
caller, as shown earlier. Windows is aware of this behavior and copies RCX into R10 before issuing the 
syscall 
The next steps have to do with processor mitigations such as Supervisor Mode Access Prevention 
(SMAP)—such as issuing the stac instruction—and the myriad processor side-channel mitigations, such 
as clearing the branch tracing buffers (BTB) or return store buffer (RSB). Additionally, on processors 
-
chronized correctly. Beyond this point, additional elements of the trap frame are stored, such as various 
nonvolatile registers and debug registers, and the nonarchitectural handling of the system call begins, 
which we discuss in more detail in just a bit.
different instruction is used, which is called sysenter
spend too much time digging into this instruction other than mentioning that its behavior is similar—a 
certain amount of processor state is loaded from various MSRs, and the kernel does some additional 
work, such as setting up the trap frame. More details can be found in the relevant Intel processor 
manuals. Similarly, ARM-based processors use the svc instruction, which has its own behavior and OS-
level handling, but these systems still represent only a small minority of Windows installations.
There is one more corner case that Windows must handle: processors without Mode Base Execution 
Controls (MBEC) operating while Hypervisor Code Integrity (HVCI) is enabled suffer from a design issue 
that violates the promises HVCI provides. (Chapter 9 covers HVCI and MBEC.) Namely, an attacker could 
allocate user-space executable memory, which HVCI allows (by marking the respective SLAT entry as 
the virtual address appear as a kernel page. Because the MMU would see the page as being kernel, 
Supervisor Mode Execution Prevention (SMEP) would not prohibit execution of the code, and because 
The attacker has now achieved arbitrary kernel-mode code execution, violating the basic tenet of HVCI.
versus user executable bits in the SLAT entry data structures, allowing the hypervisor (or the Secure 
kernel non executable but user execut-
able. Unfortunately, on processors without this capability, the hypervisor has no choice but to trap all 
code privilege level changes and swap between two different sets of SLAT entries—ones marking all 
user physical pages as nonexecutable, and ones marking them as executable. The hypervisor traps CPL 
changes by making the IDT appear empty (effectively setting its limit to 0) and decoding the underly-
ing instruction, which is an expensive operation. However, as interrupts can directly be trapped by the 
hypervisor, avoiding these costs, the system call dispatch code in user space prefers issuing an interrupt 
if it detects an HVCI-enabled system without MBEC-like capabilities. The SystemCall bit in the Shared 
User Data structure described in Chapter 4, Part 1, is what determines this situation.
Therefore, when SystemCall is set to 1, x64 Windows uses the int 0x2e instruction, which results in a 
trap, including a fully built-out trap frame that does not require OS involvement. Interestingly, this 
happens to be the same instruction that was used on ancient x86 processors prior to the Pentium Pro, 
94 
CHAPTER 8 System mechanisms
and continues to still be supported on x86 systems for backward compatibility with three-decade-old 
software that had unfortunately hardcoded this behavior. On x64, however, int 0x2e can be used only 
Regardless of which instruction is ultimately used, the user-mode system call dispatching code always 
stores a system call index in a register—EAX on x86 and x64, R12 on 32-bit ARM, and X8 on ARM64—