# Oracle Simulation: A Technique for Protocol Composition with Long-Term Shared Secrets

## Authors
- Hubert Comon
- Charlie Jacomme
- Guillaume Scerri

## Affiliations
- **Hubert Comon, Charlie Jacomme**: LSV, CNRS & ENS Paris-Saclay & Inria & Université Paris-Saclay
- **Guillaume Scerri**: Université Versailles Saint-Quentin & Inria

## Date
August 10, 2020

## Abstract
We present a composition framework and a series of composition theorems that facilitate the security proof of an unbounded number of sessions in a compound protocol. These theorems allow the decomposition of complex security proofs into simpler subgoals. While various proof techniques can be applied to these subgoals, our model is particularly well-suited for the Computationally Complete Symbolic Attacker (CCSA) model.

Our framework addresses both sequential and parallel composition, including state passing and long-term shared secrets between protocols. We also provide tools to reduce multi-session security to single-session security, considering a stronger attacker. This enables, for the first time, the performance of proofs in the CCSA model for an unbounded number of sessions.

To achieve this, we introduce the concept of O-simulation: a simulation by a machine with access to an oracle O. By carefully managing access to long-term secrets, we can reduce the security of a composed protocol, such as \(P \parallel Q\), to the security of \(P\) (or \(Q\)) with respect to an attacker simulating \(Q\) (or \(P\)) using an oracle O. Our case studies demonstrate that the oracle is often generic and simple.

These results yield straightforward formal proofs for composed protocols, such as multiple sessions of key exchanges, and multiple sessions of protocols using the exchanged keys, even when all parts share long-term secrets (e.g., signing keys). We also provide a concrete application to the SSH protocol with a modified forwarding agent, a complex case involving long-term shared secrets, which we formally prove secure.

## Table of Contents
1. **Introduction**
   1.1 Our Contributions
   1.2 Related Works
2. **Protocols and Indistinguishability**
   2.1 Syntax and Semantics of Terms
   2.2 Syntax of the Protocols
   2.3 Semantics of the Protocols
   2.4 Stateless Oracle Machines
   2.5 Computational Indistinguishability
3. **Simulatability**
   3.1 Protocol Simulation
   3.2 Generic Oracles for Tagged Protocols
4. **Main Composition Theorems**
   4.1 Composition without State Passing
   4.2 Composition with State Passing
   4.3 Unbounded Replication
5. **Unbounded Sequential Replication**
6. **Applications to Key Exchange**
   6.1 Our Model of Key Exchange
   6.2 Proofs of Composed Key Exchange Security
7. **Basic Diffie-Hellman Key Exchange**
8. **Extension to Key Confirmations**
   8.1 Proofs with Key Confirmations
9. **Application to SSH**
   9.1 The SSH Protocol
   9.2 Security of SSH
   9.3 SSH with Forwarding Agent
10. **Oracles in the CCSA Logic**
    10.1 Syntax and Semantics
    10.2 Oracle Soundness
11. **Computational Soundness of the Logic**
    11.1 Protocols
    11.2 Introduction of Attacker's Functions
12. **Extension to the Model for Unbounded Replication**

## Part I: The Framework
### Introduction
This paper addresses the security proofs of composed protocols, a topic extensively studied over the past two decades. Approaches like Universal Composability (UC) and simulation-based reductions [1–6] and other game-based composition methods [7–10] have been developed. UC and similar methods follow a bottom-up approach, constructing secure complex protocols from secure components, while game-based methods take a top-down approach, deriving sufficient security properties for components from the desired security of a complex protocol.

We adopt the top-down approach, aiming to design a general methodology for the management of formal security proofs in the Computationally Complete Symbolic Attacker (CCSA) model [11]. As a side result, our work provides a way to prove the security of an arbitrary number of sessions (dependent on the security parameter) in the CCSA model.

The main challenge in decomposing security properties lies in the fact that different protocols may share secrets, such as in multiple sessions of the same protocol or key exchange protocols that establish a shared secret used in another protocol. Protocols may also share long-term secrets, like a common signing key. An example is the SSH protocol with the agent forwarding feature [12], where signatures with a long-term secret key are sent over a channel established using the same key.

Existing composition results following the top-down approach cannot handle both state passing and shared long-term secrets. For instance, in [10], the same public key cannot be used by several protocols, which is crucial for reducing the security of multiple sessions to that of one session.

### 1.1 Our Contributions
We provide a composition framework that reduces the security of a compound protocol to the security of its components, allowing both state passing and shared long-term secrets. We remain within the CCSA model.

The core idea is that to prove the security of a composed protocol \(P \parallel Q\), it suffices to prove the security of \(P\) against an attacker that can simulate \(Q\) with the help of an oracle. If \(n\) are the secrets shared by \(P\) and \(Q\), the simulation must be independent of the distribution of \(n\). This is similar to the key-independence of [8].

We introduce the notion of O-simulation, where an oracle \(O\) holds the shared secrets. If \(Q\) is O-simulatable and \(P\) is secure against an attacker with access to \(O\), then \(P \parallel Q\) is secure. The oracle defines an interface for using the secrets (e.g., obtaining signatures of well-tagged messages).

We extend this to arbitrary parallel and sequential compositions and unbounded replication. For unbounded copies of the same protocol, the security of a single copy of \(P\) against an attacker with an oracle to simulate the other copies requires distinguishing the various copies. Unlike the universal composability framework, we use implicit session identifiers, similar to [13].

Our main composition theorems are generic and well-suited for the CCSA model, which allows computational proofs of real-life protocols [14–16] using first-order logic and cryptographic axioms. Many such axioms can be generalized to be sound with respect to an attacker with access to oracles.

A proof using these axioms is valid for an attacker with access to an environment, abstracting all details of the environment and its interactions with the attacker. Our uniform reductions from one session to multiple sessions enable proofs in the CCSA model for a number of sessions parameterized by the security parameter, addressing a limitation in previous CCSA papers.

We illustrate our composition results by splitting the security of any multi-session key exchange with shared long-term secrets into smaller proofs. We complete the formal proof of security for a Diffie-Hellman key exchange (ISO 9798-3 [17]) for any number of sessions in parallel.

We generalize the application to key exchanges performing key confirmations, as in TLS. The generalization is simple, demonstrating the usability of our framework.

Finally, we use our results to prove the security of the SSH [12] protocol with a modified agent forwarding, a complex example involving key confirmation and long-term shared secrets. The modification, adding a tag to specify if the signature was performed remotely, is necessary for the protocol to satisfy natural security properties related to agent forwarding.

### 1.2 Related Works
Our composition problem is introduced through a process algebra, where protocols are either building blocks (defined, e.g., with a transition system) or composed using parallel and sequential composition and replication. This avoids committing to any specific programming language while maintaining a clean operational semantics, similar to [10].

The idea of proving a component with respect to a stronger attacker that has access to the context is not new and is the basis of many works, including [8–10, 18]. However, these works do not support long-term shared secrets used in different components. Our notion of simulatability allows sharing long-term secrets by granting the attacker access to oracles that depend on the secrets (e.g., signing oracles).

For specific problems, such as key exchanges, there are composition results allowing the independent proof of the key exchange protocol and the protocol using the exchanged key [8, 9, 13, 18, 19]. The difficulty arises from the shared secret, especially with key confirmation. In [8], the authors define key-independent reduction, where if an attacker can break a protocol for some key distribution, they can break the primitive for the same distribution. This is related to our notion of simulatability, as interactions with shared secrets are captured by an oracle for fixed values of the key.

The UC framework [1, 3, 4, 6] follows a bottom-up approach, requiring protocols to be secure in any context, often leading to very strong security properties. Handling multiple sessions of a protocol using a shared secret requires joint-state theorems and distinct session identifiers. Relaxing this condition, [20] uses implicit session identifiers, continued in [13] for Diffie-Hellman key exchanges.

Our composition is not universal but depends on the context, allowing us to relax security properties and prove the compositional security of protocols that cannot be proven secure in the UC sense. We also rely on implicit session identifiers to prove the security of multiple sessions.

In [5], the authors address the flexibility of UC by using "predicates" to restrict the order and contents of messages from the environment, defining conditional composability. Assuming joint-state conditional composability, secret sharing between the environment and the protocol can be handled by restricting accepted messages to the expected use of the shared secrets. However, the framework does not cover how to prove the required properties of the environment.

Protocol Composition Logic (PCL) [21] is designed for proving the security of protocols in a "Dolev-Yao model." Its computational semantics is far from the usual game-based semantics, making its guarantees unclear [22]. Some limitations of PCL are detailed in [23].

The compositional security of SSH, in the sense of [18], has been studied in [24], but without the agent forwarding feature. SSH has also been studied in [25] without agent forwarding, where the implementation is derived from a secure modeling in CryptoVerif [26].

In summary, our work builds on previous composition results and captures analogues of implicit disjointness of local session identifiers [20], single session games [18], key-independent reductions [8], and the classical proof technique based on pushing part of a protocol inside an attacker [10]. We additionally allow sharing long-term secrets through O-simulatability, fitting with the CCSA model and enabling the formal proofs of composed protocols to be broken into formal proofs of components. This is illustrated by a proof of SSH with a modified agent forwarding.

## Part II: Protocols and Indistinguishability
### 2.1 Syntax and Semantics of Terms
To enable composition with long-term shared secrets, we need to specify the shared randomness between protocols precisely. We use symbols from an alphabet of names to represent random samplings. The same symbol used twice represents the same (shared) randomness. These names can be seen as pointers to a specific randomness, where all the protocols can refer to the same name to use the same randomness.

[Continued in the next section...]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.