• Function task_for_pid requires same euid, so we can not inject a privileged process for escalation
• A root process is still restricted because of System Integrity Protection
• Inject com.apple.rootless.* entitled processes to bypass rootless
• For example, com.apple.rootless.install.heritable entitlement can access restricted files, and the entitlement is inherited by its child processes
Triggering the bug
• Target app is written in Swift
• Use symbols to inspect the target app
• Use -printDemangling flag to trigger dylib hijack
• symbols [pid] -printDemangling
12
libdyld.dylib
0x00007fff5178ad86 dlopen + 86
13
com.apple.CoreSymbolication
0x00007fff3d800332 invocation function for block in call_external_demangle(char const*) + 348
14
libdispatch.dylib
0x00007fff5174fe08 _dispatch_client_callout + 8
15
libdispatch.dylib
0x00007fff5174fdbb dispatch_once_f + 41
16
com.apple.CoreSymbolication
0x00007fff3d7a380f demangle + 298
17
com.apple.CoreSymbolication
0x00007fff3d7a35e3 TRawSymbol::name() + 75
18
com.apple.CoreSymbolication
0x00007fff3d7a888e CSSymbolGetName + 166
19
symbols 
0x000000010ffc386a 0x10ffb7000 + 51306
20
symbols 
0x000000010ffc3cbe 0x10ffb7000 + 52414
21
com.apple.CoreSymbolication
0x00007fff3d7eba37 TRawSymbolOwnerData::symbols_in_address_range(CSCppSymbolOwner*, TRange, void (_CSTypeRef) 
block_pointer) + 127
22
symbols 
0x000000010ffc3c8e 0x10ffb7000 + 52366
23
com.apple.CoreSymbolication
0x00007fff3d7eb890 TRawSymbolOwnerData::regions_in_address_range(CSCppSymbolOwner*, TRange, void (_CSTypeRef) 
block_pointer) + 124
24
symbols 
0x000000010ffc3b6f 0x10ffb7000 + 52079
25
com.apple.CoreSymbolication
0x00007fff3d7c6c6a CSSymbolOwnerForeachSegment + 92
26
symbols 
0x000000010ffc3af2 0x10ffb7000 + 51954
27
com.apple.CoreSymbolication
0x00007fff3d7adbee CSSymbolicatorForeachSymbolOwnerAtTime + 95
28
symbols 
0x000000010ffc25b1 0x10ffb7000 + 46513
29
symbols 
0x000000010ffc00ee 0x10ffb7000 + 37102
Problem: Library Validation
• Library Validation is a protection that prohibits a process to load dynamic libraries without a digital signature issued by same team id
• SamplingTools on High Sierra are signed with Library Validation flag, which prohibits loading modules that are not signed by Apple
System Integrity Protection: enabled
Crashed Thread:
0
Dispatch queue: com.apple.main-thread
Exception Type:
EXC_BAD_ACCESS (Code Signature Invalid)
Exception Codes:
0x0000000000000032, 0x000000010d745000
Exception Note:
EXC_CORPSE_NOTIFY
Termination Reason:
Namespace CODESIGNING, Code 0x2
kernel messages:
External Modification Warnings:
Process used task_for_pid().
VM Regions Near 0x10d745000:
MALLOC_LARGE
000000010d70a000-000000010d745000 [
236K] rw-/rwx SM=PRV
--> mapped file
000000010d745000-000000010d746000 [
4K] r-x/r-x SM=PRV
Object_id=2929ab85
mapped file
000000010d748000-000000010d762000 [
104K] r--/r-- SM=ALI
Object_id=2af85085
Application Specific Information:
dyld: in dlopen()
/var/folders/4d/1_vz_55x0mn_w1cyjwr9w42c0000gn/T/tmp.0b5SeUjh/Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib
12 libdyld.dylib 0x00007fff66c9fd86 dlopen + 86
13 com.apple.CoreSymbolication 0x00007fff52d15332 invocation function for block in call_external_demangle(char const*) + 348
14 libdispatch.dylib 0x00007fff66c64e08 _dispatch_client_callout + 8
15 libdispatch.dylib 0x00007fff66c64dbb dispatch_once_f + 41
16 com.apple.CoreSymbolication 0x00007fff52cb880f demangle + 298
17 com.apple.CoreSymbolication 0x00007fff52cb85e3 TRawSymbol::name() + 75
18 com.apple.CoreSymbolication 0x00007fff52cbd88e CSSymbolGetName + 166
“I’m old, not obsolete”
High Sierra
El Capitan
➜
bin codesign -dvvv symbols
Identifier=com.apple.SamplingTools
Format=Mach-O thin (x86_64)
CodeDirectory v=20100 size=812 flags=0x0(none) hashes=32+5 
location=embedded
Platform identifier=1
Hash type=sha1 size=20
➜
bin codesign -dvvv symbols
Identifier=com.apple.SamplingTools
Format=Mach-O thin (x86_64)
CodeDirectory v=20100 size=1384 flags=0x2000(library-validation)
hashes=36+5 location=embedded
Platform identifier=4
Hash type=sha256 size=32
An old binary grabbed from previous OS X does not have this flag!
Exploit
• Craft the Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib
• Invoke sandbox_init_with_parameters to drop access to the legit swift libraries
• Set the DEVELOPER_DIR environment variable to redirect access to our payload
• Copy the symbols binary from El Capitan and spawn the process
• Payload libswiftDemangle.dylib will be loaded in to the entitled process, who can task_for_pid for restricted processes and obtain arbitrary entitlement
rootless
SIP bypass
Protected
Resources
Entitled
Process
Other Processes
sandbox
Sampling Tools
Evil dylib
Legit dylib
attach
PART 03
To the Kernel
Rule the Kernel
• Kickstart mach service com.apple.KernelExtensionServer (/usr/libexec/kextd)
• Get the task port to hijack the entitlements of kextd
• Since kextd is not library validation protected, just use the old school dylib injection
• Directly ask kernel to load the extension
• Plan A: Use kext_request to send a manually crafted MKEXT packet
• Plan B: Patch the user space checks, then call IOKit!OSKextLoadWithOptions to compose the packet
Kernel Code Execution without actually touching XNU
XNU
kextd
kernel
userspace
Other Processes
sandbox
Sampling Tools
Evil dylib
Legit dylib
kext_request
attach
💥
0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF
00000000  4d 4b 58 54 4d 4f 53 58 00 01 96 61 12 d4 f8 fe
MKXTMOSX...a....
00000010  02 00 20 01 00 00 00 01 01 00 00 07 00 00 00 03
.. .............
00000020  00 01 8e a4 00 00 00 00 00 00 07 bd 00 00 00 00
................
00000030  00 01 8e 70 cf fa ed fe 07 00 00 01 03 00 00 00
...p............
00000040  0b 00 00 00 08 00 00 00 a8 03 00 00 85 00 00 00
................
00000050  00 00 00 00 19 00 00 00 38 01 00 00 5f 5f 54 45
........8...__TE
00000060  58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00
XT..............
......
00018ea0  00 00 00 00 3c 64 69 63 74 3e 3c 6b 65 79 3e 4b  ....K
00018eb0  65 78 74 20 52 65 71 75 65 73 74 20 50 72 65 64  ext Request Pred
00018ec0  69 63 61 74 65 3c 2f 6b 65 79 3e 3c 73 74 72 69  icateLoad
00018ee0  3c 6b 65 79 3e 4b 65 78 74 20 52 65 71 75 65 73  Kext Reques
00018ef0  74 20 41 72 67 75 6d 65 6e 74 73 3c 2f 6b 65 79  t ArgumentsStar
......
00019640  44 52 45 46 3d 22 32 22 2f 3e 3c 2f 64 69 63 74  DREF="2"/>
00019660  00                                               .
MKEXT Packet
mkext2_header
mkext2_file_entry
plist
mkext2_file_entry
…
#define MKEXT_MAGIC 0x4D4B5854 /* 'MKXT' */
#define MKEXT_SIGN
0x4D4F5358 /* 'MOSX' */
typedef struct mkext2_header {
// #define MKEXT_HEADER_CORE
uint32_t
magic;       // always 'MKXT'
uint32_t
signature;   // always 'MOSX'
uint32_t
length;      // the length of the whole file
uint32_t
adler32;     // checksum from &version to end of file
uint32_t
version;     // a 'vers' style value
uint32_t
numkexts;    // how many kexts are in the archive
cpu_type_t
cputype;     // same as Mach-O
cpu_subtype_t cpusubtype;  // same as Mach-O
uint32_t plist_offset;
uint32_t plist_compressed_size;
uint32_t plist_full_size;
} mkext2_header;
typedef struct mkext2_file_entry {
uint32_t
compressed_size;  // if zero, file is not compressed
uint32_t
full_size;        // full size of data w/o this struct
uint8_t
data[0];          // data is inline to this struct
} mkext2_file_entry;
The Kill-Switch
• KEXT Validations
• Code Signature
• KEXT Staging
• SKEL
rootless_check_trusted_class
OSKextIsAuthentic
-[SPKernelExtensionPolicy canLoadKernelExtensionInCache:error]
csr_check
Load completely unsigned kext on macOS 10.13.6 (17G65)
(chained with CVE-2019-8565 Apple Feedback Assistant local 
root privilege escalation)
PoC
• You can grab the source code here
https://github.com/ChiChou/sploits/tree/master/ModJack
PART 04
Patch and Mitigation
The (unintended?) patch
• The buggy code has been removed. It only loads a 
hard-coded path now
• Released in the Developer Preview of macOS 
Mojave, before I noticed the bug on High Sierra. 
Looks more like code refactoring than a security fix
void ____ZL22call_external_demanglePKc_block_invoke(void) {
char *bDoNotDemangleSwift;
void *handle;
bDoNotDemangleSwift = _getenv("CS_DO_NOT_DEMANGLE_SWIFT");
if ((bDoNotDemangleSwift == NULL) ||
(((byte)(*bDoNotDemangleSwift - 0x30U) > ((ulong)(byte)(*bDoNotDemangleSwift - 0x30U) & 0x1f) & 1) != 0)))) {
handle = _dlopen("/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib",1);
if (handle != 0) {
__ZL25demanglerLibraryFunctions.0 = _dlsym(handle,"swift_demangle_getSimplifiedDemangledName");
}
}
return;
}
Wait, there’s another bug
• But actually there’s another dylib hijacking that still present on macOS 
Mojave 10.14.2
• Directly triggered without any sandbox or environment string trick
➜
~ sudo fs_usage | grep swift
10:29:53
stat64
/Applications/IINA.app/Contents/Frameworks/libswiftRemoteMirror.dylib
0.000020 
stringdups
10:29:53
stat64
/Applications/IINA.app/Contents/Frameworks/libswiftRemoteMirrorLegacy.dylib
0.000010 
stringdups
10:29:53
stat64
/Applications/IINA.app/Contents/libswiftRemoteMirror.dylib
0.000010 
stringdups
10:29:53
stat64
/Applications/IINA.app/Contents/libswiftRemoteMirrorLegacy.dylib
0.000008 
stringdups
10:29:53
stat64
/Applications/IINA.app/Contents/Resources/libswiftRemoteMirrorLegacy.dylib
0.000017 
stringdups
10:29:53
stat64
/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libswiftDemangle.dylib
0.001133 
stringdups
➜
~ stringdups IINA
Process: 
IINA [99806]
Path:
/Applications/IINA.app/Contents/MacOS/IINA
Load Address:
0x10a422000
Identifier:
com.colliderli.iina
BOOL __cdecl -[VMUObjectIdentifier _dlopenLibSwiftRemoteMirrorFromDir:](VMUObjectIdentifier *self, SEL a2, NSString* directory) {
if (!directory)
return NO;
if (!self->_libSwiftRemoteMirrorHandle) {
handle = dlopen([[NSString stringWithFormat:@"%@/libswiftRemoteMirror.dylib", directory] UTF8String], RTLD_LAZY);
...
if (!self->_libSwiftRemoteMirrorLegacyHandle) {
handle = dlopen([[NSString stringWithFormat:@"%@/libswiftRemoteMirrorLegacy.dylib", directory] UTF8String], RTLD_LAZY);
...
Another dylib Hijack
• Bug location: /System/Library/PrivateFrameworks/Symbolication.framework
-[VMUObjectIdentifier _dlopenLibSwiftRemoteMirrorFromDir:]
• Triggered when gathering Swift runtime information with these commands
• heap [pid]
• stringdups [pid]
Mitigation
• The variant doesn’t work anymore on macOS Mojave
• Hardened Runtime has been applied
• The old SamplingTools binary copied from El Capitan will be enforced to have library validation, even they are signed without that flag
• Only the binaries entitled with com.apple.security.cs.disable-library-validation can bypass
• com.apple.SamplingTools have been renamed to have their unique identifiers (e.g. com.apple.SamplingTools.vmmap), and have a new entitlement 
com.apple.system-task-ports.safe
Thanks
@CodeColorist