### Privilege Escalation and Bypassing Protections on macOS

#### Overview
This document discusses various techniques and vulnerabilities that can be exploited to escalate privileges and bypass security protections on macOS, specifically focusing on High Sierra and Mojave. The primary methods include injecting privileged processes, bypassing System Integrity Protection (SIP), and exploiting dynamic library (dylib) loading mechanisms.

#### Key Points

1. **Function `task_for_pid` Restriction**:
   - The `task_for_pid` function requires the same effective user ID (euid), making it impossible to inject a privileged process for escalation.
   - A root process is still restricted by System Integrity Protection (SIP).

2. **Bypassing SIP with Entitled Processes**:
   - Injecting processes with specific entitlements, such as `com.apple.rootless.*`, can bypass SIP.
   - For example, the `com.apple.rootless.install.heritable` entitlement allows access to restricted files and is inherited by child processes.

3. **Triggering the Bug**:
   - The target application is written in Swift.
   - Use symbols to inspect the target application.
   - Use the `-printDemangling` flag to trigger a dylib hijack.
   - Example command: `symbols [pid] -printDemangling`

4. **Library Validation**:
   - Library Validation is a protection mechanism that prevents a process from loading dynamic libraries without a digital signature issued by the same team ID.
   - On High Sierra, SamplingTools are signed with the Library Validation flag, which prohibits loading modules not signed by Apple.

5. **Exploit Steps**:
   - Craft a custom `libswiftDemangle.dylib`.
   - Use `sandbox_init_with_parameters` to drop access to legitimate Swift libraries.
   - Set the `DEVELOPER_DIR` environment variable to redirect access to the payload.
   - Copy the `symbols` binary from El Capitan and spawn the process.
   - The payload `libswiftDemangle.dylib` will be loaded into an entitled process, which can use `task_for_pid` for restricted processes and obtain arbitrary entitlements.

6. **Kernel Exploitation**:
   - Kickstart the `com.apple.KernelExtensionServer` (kextd) service.
   - Obtain the task port to hijack the entitlements of kextd.
   - Since kextd is not protected by Library Validation, use traditional dylib injection.
   - Directly ask the kernel to load the extension using either:
     - Plan A: Manually craft and send an MKEXT packet using `kext_request`.
     - Plan B: Patch user space checks and call `IOKit!OSKextLoadWithOptions` to compose the packet.

7. **MKEXT Packet Structure**:
   - The MKEXT packet structure includes a header and file entries.
   - Definitions and structures for the MKEXT packet are provided.

8. **Patch and Mitigation**:
   - The buggy code has been removed in the Developer Preview of macOS Mojave.
   - The hardened runtime enforces library validation even for binaries signed without the `com.apple.security.cs.disable-library-validation` entitlement.
   - New entitlements, such as `com.apple.system-task-ports.safe`, have been introduced to further secure the system.

9. **Additional Vulnerability**:
   - Another dylib hijacking vulnerability exists in `/System/Library/PrivateFrameworks/Symbolication.framework` in the `-[VMUObjectIdentifier _dlopenLibSwiftRemoteMirrorFromDir:]` method.
   - This can be triggered when gathering Swift runtime information using commands like `heap [pid]` and `stringdups [pid]`.

#### Conclusion
This document provides a detailed overview of the techniques and vulnerabilities that can be exploited to escalate privileges and bypass security protections on macOS. It also highlights the steps taken to mitigate these vulnerabilities in newer versions of the operating system.

#### Acknowledgments
- Special thanks to @CodeColorist for their contributions and insights.

---

This revised version aims to provide a clear, coherent, and professional presentation of the information, making it easier to understand and follow.