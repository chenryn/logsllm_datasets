To solve the aforementioned problems, we apply two ﬁl-
tering steps to the candidate missions. First, we discard all
infrequent missions appearing less than a threshold (ηM ).
The rationale behind this is that infrequent missions are
coincidentally-correlated activities or temporary missions.
We call the parameter ηM the mission threshold. The re-
maining missions are called frequent missions.
To address the second problem mentioned above, we check
each frequent mission to see whether it is part (a subset)
of a larger mission.
If this is the case, we compute how
many unique appearances each mission has. The number
of unique appearances for a mission is the number of TI
periods in which it appears and no other supersets of this
mission appear. We then discard all missions with unique
appearances less than ηM . The reason for this is that some
remaining candidate missions may be parts/subsets of other
candidate missions, and, therefore, they do not provide any
additional information.
3.3 Statistical Analysis for Service Dependency
Detection
Given two activity distributions with zero real correla-
tion, D1 = N (μ1, σ1) and D2 = N (μ2, σ2), and two samples
of size n, S1
n}, the
following distribution (t) follows approximately t-distribution
2
A maximal clique is a clique on the graph that cannot be
n} and S1
1, s2
2, . . . , s2
= {s2
= {s1
1, s1
2, . . . , s1
extended by including one more adjacent vertex.
with n − 2 degrees of freedom: t =
r(cid:4)
1−r2
n−2
, where r is the
Pearson correlation of two samples [11]. We use this prop-
erty to compute a signiﬁcance value for a correlation coef-
ﬁcient threshold. The null hypothesis (H0) is that the two
distributions have real correlation of less than or equal to
zero. The alternative (H1) is that the two distributions have
positive correlation. Using this formula, it is easily shown
that correlation threshold ηC = 0.49726 when the number of
TI
sample points is n =
Δ = 12 corresponds to the correlation
coeﬃcient with signiﬁcance value of p − value = 0.05.
Moreover, we use mission threshold ηM to select depen-
dencies that occur at least ηM times. Here we calculate
the probability that a random set of three services will have
Pearson correlation value higher than or equal ηC for ηM
times or more. We deﬁne p as the probability of false detec-
tion of correlation between three services in a single period:
p = (p − value)
is the number of time-series in-
tervals in the analysis period.
× pi × (1 − p)N −i is the proba-
F (ηM ; N, p) =
bility that a random set of three non-correlated services ap-
pears as correlated in ηM or more time-series intervals. This
probability for our thresholds, ηM = 24, N = 24 × 30, and
p = 0.000125, is F = 8.02641 × 10
3.4 Clustering Network Services
. N =
(cid:2)N
TE
TI
(cid:3)
(cid:4)
i=ηM
−50
N
i
3
.
To detect services of the same type, Paris performs an
analysis of the network traﬃc (ﬂows) for each service. The
basic intuition is that similar services will create ﬂows with
similar characteristics. That is, services of the same type
will have almost the same number of connections of speciﬁc
types. As an example, type A services have 50% long dura-
tion ﬂows with a high number of packets and a small number
of bytes and 25% of short lived burst ﬂows (high number of
packets with high number of bytes), and 25% of short lived
duration ﬂows (low number of packets and high number of
bytes). One diﬃculty of clustering services in this way is as-
signing the ﬂows to these meaningful (carrying information)
classes. To solve this problem, we cluster the ﬂows. To make
our approach less sensitive to the clustering parameters, we
use fuzzy clustering for ﬂows. This way each ﬂow will have
a membership value in each ﬂow class.
Paris implements a three-step process. First, the sys-
tem generates models for the traﬃc (ﬂows) for each service.
Next, these models are clustered. Finally, Paris assigns a
type to each service, based on the cluster(s) that its ﬂows
belong to. This three-step process is described below.
Modeling network ﬂows. For each network connection,
the system extracts the following ﬁve features:
• F1: the number of packets sent by the client,
• F2: the number of packets sent by the server,
• F3: the number of bytes sent by the client,
• F4: the number of bytes sent by the server, and
• F5: the time duration of the ﬂow.
The ﬁve features are represented as a feature vector x ∈
R5
, such that x = (a1, ..., a5) and ai ∈ R is the value of
feature Fi for that ﬂow. This results in N feature vectors,
where N is the number of ﬂows during the analysis period
TE.
Clustering network ﬂows. Paris classiﬁes network ﬂows
based on their feature vectors, by using a fuzzy c-means
(FCM) algorithm [6]. Fuzzy clustering provides weighted
membership for each network connection; i.e., each connec-
tion can be a member of multiple clusters with diﬀerent
weights. This makes the clustering less sensitive to the
choice of clustering parameters, as compared to the stan-
dard k-means clustering algorithm [25]. As an example, two
ﬂows that belong to the same k-mean cluster might move to
diﬀerent clusters by a slight change in the parameters of the
k-means algorithm. For fuzzy clustering, however, slightly
changing the algorithm parameters modiﬁes the membership
weights only slightly, keeping the similarity of the ﬂows. K-
means clustering, on the other hand, provides single mem-
bership for each clustered ﬂow, which is not required here
since the clustered ﬂows information is not used directly (it
is used for clustering the services). Given that N is the to-
tal number of ﬂows, FCM runs an optimization algorithm to
cluster the N feature vectors into C clusters such that the
following fuzzy c-means cost function is minimized:
J(U, V ) =
C(cid:5)
N(cid:5)
j=1
i=1
(μi,j)
m(cid:4)xi − vj(cid:4)2
(3)
j=1 μi,j = 1
In Equation 3, V = {vi|i = 1, . . . , C} is the set of cluster
centers, and U = {μi,j|i = 1, . . . , N, j = 1, . . . , C} is the
fuzzy partition matrix. In other words, μi,j represents the
degree of membership between the feature set xi and the
jth cluster, subject to the constraints that μi,j ∈ [0, 1], and
(cid:2)C
(∀j ∈ {1, . . . , N }). Our choice of the pa-
rameter C does not signiﬁcantly change our ﬁnal results for
service clustering (we chose C = 100). We particularly want
C to be as small as possible because C is the number of di-
mensions of our next step in the clustering process. We also
want it to be large enough to convey enough information
about diﬀerent connections. We have 5 features for each
connection, and if each of these features could get 3 values
(small, average, and big) we would have 3
= 243 diﬀerent
types of connections. Similarly if each feature could get two
values, we can have 2
= 32 connection types. We selected
100 as a value that represents a compromise between these
two numbers.
The parameter m ∈ [0, ∞] is the weighting exponent, spec-
ifying the fuzziness of the clusters, and di,j = (cid:4)xi − vj(cid:4) is
the Euclidean distance between the feature set xi and the
cluster center vi.
5
5
Finding network services of the same type. Finally,
Paris identiﬁes the same type network services using a sec-
ond clustering algorithm. This is done by grouping network
services based on the similarity of their network ﬂows. To
this end, for each service Si, the system analyzes the X Si ,
which is the set of all feature vectors xSi related to that
service. More precisely, Paris examines all ﬂows related to
a service to compute an average fuzzy membership (AFM)
vector μSi for Si. Intuitively, the AFM vector captures how
the ﬂows associated with a single service are distributed over
the diﬀerent types of network traﬃc (clusters) computed in
the previous step.
More formally, to derive μSi , which is a length-C vector,
we compute the average of the rows of U that correspond to
the members of X Si :
44
jn|xjn ∈X Si(cid:5)
μjn
Ni
μS
i =
(4)
where Ni is the size of X Si , and μi is the ith row of the
fuzzy partition matrix U .
Once the system has computed one AFM vector per ser-
vice, we use a k-means clustering algorithm [25], with k =
20, to classify them. We selected k as the expected num-
ber of diﬀerent services we would expect to see in the target
network.
3.5 Meta-Missions
A meta-mission is an abstraction of the network mission.
For instance, a web mail service composed of an IMAP ser-
vice, an SMTP service, an LDAP service, and an HTTP ser-
vice would be considered a meta-mission. This meta-mission
can be instantiated as a (concrete) mission by specifying the
actual (concrete) network services involved. In other words,
a meta-mission represents a mission type. It is often useful
to know how many diﬀerent types of missions are run in a
network.
To extract meta-missions from previously-identiﬁed con-
crete missions, Paris identiﬁes all sets of missions that are
composed of the same number of services with the same
types. Paris identiﬁes the service type by clustering the
services, as described above.
i ∈ M1, there is a service S2
Finding meta-missions. Using the information about
types of services, Paris can determine meta-missions. More
precisely, Paris considers two equal-sized missions M1 and
M2 to be instances of the same meta-mission M if, for any
service S1
j ∈ M2 such that S1
i
and S2
j are of the same type. Two services S1 and S2 are
considered of the same type, if either they are in the same
service cluster, or they use the same port number.
3.6 Detecting Backups
Backup services are frequently deployed to ensure the avail-
ability of critical network services. Given that there might
be more than a single administrator responsible for a large
network, and people might move on after having deployed
backup services, it would be beneﬁcial for a situation aware-
ness system to automatically identify backups. Also, by au-
tomatically ﬁnding backup services, one can relieve admin-
istrators from having to specify their presence manually.
Knowledge about backup services is important, because
these services might not produce a lot of traﬃc (since they
are inactive for most of the time). Therefore, they might be
discarded by tools that focus solely on traﬃc and activity
volume. However, they are often critical components for
network missions and should receive attention similar to the
primary (currently active) services.
We distinguish two kinds of backup services: active/passive
(A/P) backups and active/active (A/A) backups.
In the
case of A/P backups, one server acts as the main server,
while the other(s), i.e., the backup(s), only becomes active
when the main server experiences diﬃculties.
In the case
of an A/A backup scenario, two (or more) servers provide
the service simultaneously, sharing the service load. Failing
one of the A/A servers shifts the service load to the other
backup(s).
3.6.1 Detection of A/P Backups
Paris uses a combination of two approaches, negative cor-
relation and failure correlation, to detect A/P backup ser-
vices.
Negative activity correlation. Negative correlation in-
dicates the degree to which two services activities are in-
versely related. This captures the activity behavior of the
A/P backup services, because a backup service becomes ac-
tive only when the main service is not functioning. We deﬁne
the negative correlation of two services Si and Sj as:
NC(Si, Sj) = max{C P
(RSi , RSj ), C P
C P
(PSi , PSj ),
(BSi , BSj )}
(5)
where C P (·, ·) is the Pearson product-moment correlation,
deﬁned previously in Equation (2). As before, for a service
S, the time sequences R(S), P (S) and B(S) are the number
of requests, the number of packets, and the number of bytes
processed by S, respectively, evaluated for non-overlapping
evaluation slots (Δ). Paris declares two services to be A/P
backups if their negative correlation is less than a threshold
ηNC (we set ηNC to -0.49726. We looked into the correlation
matrix from diﬀerent time periods of normal network oper-
ation and veriﬁed that even though the correlation becomes
negative in some cases, it does not exceed -0.49726).
3.6.2 Detection of A/A Backups
If two (concrete) missions are instances of the same meta-
mission, and they share a large fraction of common services,
the uncommon services are likely to be active/active backup
services. Consider the case where Paris detects two con-
crete instances of a meta-mission where most services are
the same, and, in addition, the services that are diﬀerent
are of the same type. The fact that the additional services
are of the same type and always appear together with the
remaining services indicates that these services are an inte-
gral part of the mission. Yet, the multiple services do not
appear to work together. Hence, we assume that they are
replacements for each other; which is exactly the case with
A/A backups.
Paris examines every pair of missions M1 and M2. When
these missions belong to the same meta-mission and they
share at least 60% of the same services, the remaining ser-
vices are checked for the presence of A/A backups. More
formally, we deﬁne SMi−Mj as the set of services that be-
long to the mission Mi but not to the mission Mj. Paris
declares two services S1 ∈ SM1−M2 and S2 ∈ SM2−M1 to
be A/A backups if either they have the same type (they be-
long to the same service cluster) or they use the same port
number.
4. RANKING NETWORK SERVICES
In this section, we discuss how our system ranks network
services based on their importance. The ranking process
operates in two steps. First, we compute initial importance
scores for each service. These initial scores are then updated
based on dependencies between services.
4.1
Initial Importance Scores
In the ﬁrst phase, we compute an initial importance score
for each network service. To this end, we use the following
service features:
45
• F1–F4: the number of bytes and packets sent and re-
ceived by the service,
• F5: the number of requests handled by the service,
• F6: the number of network missions the service has
been involved in,
• F7: the number of failures of the service (if available).
• F8: the number of clients of the service (if available).
The features F1–F5 are directly taken from the corre-
sponding service proﬁles. A service is considered more im-
portant when it is involved in more activity. Here, the ac-
tivity is based on simple, network-level statistics. The sixth
feature F6 leverages information about relationships with
other services. In particular, when a service is involved in
more missions, we expect its importance score to increase.
The last feature F7 captures the number of failures that a
certain service has experienced during the analysis period.
To count the number of failures, we leverage the informa-
tion from network health monitoring devices. If this data
is not available, the value for this feature is zero for all ser-
vices. We consider services that fail more often to be more
“important.”
3
We normalize each feature value Fi into the range of [0, 1].
We then use a simple, weighted sum over all feature values
for a service S to determine this service’s initial importance
score ˆI s:
ˆI s(S) =
8(cid:5)
m=1
αiF N
i (S)
(6)
αi is the weight for the ith feature and F N
i (S) is the nor-
malized value of Fi for the service S (we currently set all
weights to 1, leaving the identiﬁcation of possibly better
weights to future work).
4.2 Final Importance Scores
In this step, we compute the ﬁnal importance scores for
network services. To this end, we use the detected service
dependencies and backup relations to build a service rela-