owned by other users with whom the primary user has shared
access to the cloud service. We assume clients can become
malicious or unavailable for a variety of reasons. They can
become malicious due to infection by malware, compromise or
theft. Likewise, they can become unavailable due to software
failure, loss of network connectivity, loss of battery power or
system sleep to conserve power. In cases where impending
unavailability is known beforehand, such as a system sleep
or battery depletion, the client can warn the other devices
allowing them to take actions to mitigate the effect of the
unavailability.
We assume that each client has a public-private key pair
that can be used for digital signatures, and that the public
keys of clients are known to other clients and to the cloud
provider. To protect against man-in-the-middle attacks, we
assume public keys are either distributed using a protected
channel or a PKI exists to certify their authenticity. Each user
also has an encryption key that is used to encrypt the user’s
data to protect it from disclosure to the cloud service. We also
assume a secure key distribution mechanism for the shared
encryption key so that it is only shared with the user’s clients
and the clients that the user is sharing data with.
We assume that clients have reasonably synchronized
clocks. The degree of clock synchronization required depends
on the accuracy at which the user wants to detect a mali-
cious cloud server. While previous work has shown that very
highly synchronized clocks are possible [11], for storage with
personal data, we believe that limiting clock skews to several
milliseconds, such as that which can be achieved using NTP,
should be sufﬁcient.
Network. We assume a network model that provides connec-
tivity between each client and the cloud service, but does not
882
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
provide direct connectivity between clients. In addition, the
network may fail to transmit messages between client and the
cloud service and clients cannot distinguish between a failure
of the network and a failure of the cloud service. Assuming
that all communication between clients must traverse the cloud
service enables clients to communicate even if both are not
online simultaneously [12].
Cloud Service. The cloud service promises a certain consis-
tency model for data stored on the cloud service. An honest
cloud service will respond to requests for data from various
clients according to the promised model. Caelus further as-
sumes that cloud services offer a time bound on consistency
models, which means that operations are guaranteed to become
visible to all clients within some visibility time bound, which
is speciﬁed by the cloud service provider in SLA. In practice,
consistency models that are not bounded are less useful be-
cause it is very hard to reason about the data when developing
client software. Furthermore, unbounded consistency models
can result in unresolvable conﬂicts. As a result, recent work
has shown that in practice, most systems that claim to be
weakly consistent are still bounded [13]. In fact, there are
a number of proposals in the literature that enable users to
measure the time bound that a cloud service offers [14]–[20].
Thus, bounded consistency models are realistic and we believe
cloud service providers may even be motivated to claim shorter
time bounds than their competitors.
In our security model, a malicious cloud service’s goal is
to violate the promised consistency model and trick the user
into unknowingly using inconsistent data, or alternatively, to
claim a consistency model stronger than what they offer and
hope that the user won’t notice the discrepancy. A malicious
cloud service can selectively omit, replay, reorder or delay
the results of operations by clients. In addition, since all
client communication goes through the cloud service, the cloud
service can also selectively fake client failures by preventing
operations made by a client from becoming visible to one
or more other clients. However, we assume that standard
cryptographic assumptions hold – a malicious cloud provider
cannot decrypt data for which it doesn’t know the key, nor
can it forge cryptographic signatures. In other words, we use
the Dolev-Yao attack model for a malicious cloud service.
Similar to clients, we assume that the cloud service has a
public-private key pair and that the public key is well-known
to all clients. Thus, the cloud service’s response signed with
cloud’s private key is non-repudiable.
Collusion. As we will discuss in Section III-B, Caelus makes
security guarantees against both a malicious cloud service
and malicious clients. Caelus assumes that malicious clients
can collude and defends against them. However, if the clients
and cloud provider are both malicious and collude, it would
be difﬁcult to make any guarantees since there are no non-
malicious components left in the system. As a result, we
weaken the security model slightly by assuming that clients
are cloud-secure, meaning that they can be compromised and
act maliciously, but are always secure against compromise by
the cloud service. For example, the cloud-secure assumption
holds if clients are infected with malware or have been stolen,
so long as that malware or the thief is not under the control
of the cloud service.
We believe this assumption is realistic for several reasons.
First, many cloud services provide APIs for developers to
develop their own client software [21]. For example, there
exist a plethora of 3rd party DropBox clients that enable users
to automatically backup their ﬁles, synchronize data or use
multiple backup services [22]. As a result, the provenance of
the client software is largely independent of the cloud service
provider.
Second, in cases where the user is using a client provided by
the cloud provider, there can still be independence if the client
software and cloud storage service are hosted on separate
systems. Thus, an attacker who compromises the cloud storage
service does not automatically get the ability to corrupt or
control the client software.
B. Security guarantees
We now state the security guarantees that Caelus provides.
Because our security model allows for both a malicious
cloud service and malicious clients, we separately describe
the guarantees that hold against each of these.
Caelus provides the following security guarantees against a
malicious cloud service:
SRV1:A malicious cloud provider cannot read user data.
SRV2:A malicious cloud provider cannot tamper with user
data without being detected.
SRV3:A malicious cloud provider that responds inconsis-
tent data will be detected within a ﬁnite time bound
deﬁned by TCaelus.
Against malicious clients, Caelus provides a different set of
guarantees. Since devices have the ability to read and modify
data, Caelus cannot protect
the conﬁdentiality or integrity
of data on the cloud against a malicious device. This could
be somewhat mitigated by access control, but the amount
of protection would still be dependent on the access control
policy so it cannot provide complete protection for data
conﬁdentiality and integrity. We thus leave the integration of
access controls into Caelus for future work.
However, since all operations must be signed, Caelus does
guarantee that operations by clients are non-repudiable. In
addition, a malicious client may attempt to falsely accuse
the cloud provider of violating consistency guarantees. Caelus
guarantees that such false accusations can be invalidated using
an audit procedure. In summary, Caelus provides the follow-
ing guarantees against malicious clients (including multiple
colluding clients):
CLT1:Malicious clients cannot repudiate modiﬁcations they
have made to data on the cloud.
CLT2:Malicious clients cannot falsely accuse the cloud
service of violating the promised consistency model.
loss of data against a
malicious cloud provider. A malicious cloud provider can
Caelus does not protect against
883
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
Although it is under the control of the cloud service and is
not trusted by the user, the history server plays a crucial role
in Caelus. Instead of having the devices assemble a view of all
operations that have taken place and check the consistency of
each operation, the history server has the cloud service declare
the history of operations it has performed. Then, all the devices
have to do is verify that 1) the declared history conforms to
the promised consistency model and that 2) all the operations
they have performed are reﬂected in the log. This considerably
simpliﬁes the consistency veriﬁcation procedure, enables it
to be distributed across devices and eliminates the need for
devices to communicate directly with each other. The main
guarantee that Caelus must provide then is that all devices
perceive the same declared history from the cloud service.
Clients read and write data from the cloud service with Get
and Put operations. Each cloud server forwards the operations
from clients connected to it to the key-value store. The history
server records a log of all operations that have occurred on
the cloud service. Cloud servers forward Gets to the history
server as soon as they are received from clients. However,
the key-value store is globally distributed so there is a delay
between the time that a cloud server accepts a Put from a
client and forwards it to the key-value store and the time that
the result of the Put has been made visible to all other cloud
servers. Thus, Puts are only logged by the history server
when it has been notiﬁed by the key-value store that they
have been made globally visible. If the key-value store is not
capable of such notiﬁcations, the history server can also log
the Puts on behalf of the key-value store after the visibility
time bound has passed. The order that operations are logged
on the history server is unimportant – instead, clients rely on
embedded timestamps in operations to reconstruct order. The
history server is also responsible for storing control messages
that are sent between clients, such as attestations and selection.
We begin by describing a basic system that uses a single
monolithic attestor and provides all the security guarantees
described in Section III-B. However, the basic protocol is
not battery-friendly so we then describe an enhanced battery-
friendly system that uses attestor-partitioning to enable devices
that are not being actively used to sleep and conserve energy.
Finally, we will discuss some operating parameters of Caelus.
B. Basic system
We describe our basic system in four steps. First, we
describe how Put and Get operations are implemented by
the cloud server. Second, we describe the attestation procedure
Caelus uses to ensure that every client has an identical view of
the history of operations. Third, we describe how each client
veriﬁes that its local view of operations is consistent with the
attested history of operations. Finally, we describe how clients
join and leave the Caelus system. The major elements of the
Caelus protocol are illustrated in Figure 2.
Operations. Each Get and Put operation transmits the
following meta-data in the header: operation type (Get or
Put), key value, client ID, a timestamp, a sequence number
and a hash of the data if it is a Put operation. The entire
Fig. 1. Caelus architecture.
always drop a user’s request or destroy data after receiving
it. Similarly, a malicious client can overwrite data or refuse to
perform its duties, thus affecting the durability and availability
of user data. However, in the absence of benign failures or
malicious activity, Caelus provides the following guarantee:
AV1: Under normal operation where clients and the cloud
service are free of failures and malicious activity,
Caelus will not cause delays or unavailability of the
cloud service.
Since Guarantee AV1 doesn’t hold if there are any malicious
parties, it should be clear that it is really more of a perfor-
mance guarantee rather than a security guarantee. However, we
believe this guarantee is still important since to be practical,
Caelus’ security guarantees should impose little or no cost
under normal (non-malicious) circumstances.
IV. DESIGN
A. System overview
Caelus is a set of enhancements that can be added to
a cloud service that uses a distributed key-value store. We
select this storage architecture because essentially all cloud
storage services are based on key-value stores at their lowest
level [23]. The architecture of a typical Caelus system is
illustrated in Figure 1. The existing cloud service contains a set
of geographically distributed cloud servers. Clients connect to
a cloud server that is close to them for low latency. Aside from
clients, cloud servers communicate with two components:
an existing globally distributed key-value store that provides
some consistency guarantees and a new centralized history
server that is added by Caelus. Enhancing an existing cloud
service to support Caelus generally entails adding the history
server and modiﬁcations to the cloud servers and clients,
but does not require changing the distributed key-value store.
Moreover, deploying the Caelus client to customer devices
can be accomplished by having users install client software
equipped with the Caelus veriﬁcation scheme. The security of
their data is one of the main concerns cloud users have, and as
a result, we believe cloud service providers may be motivated
to deploy Caelus to convince users that their data is safe, and
to remove legal liability from themselves as Caelus guarantees
hold even if the cloud infrastructure is compromised
884
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:39 UTC from IEEE Xplore.  Restrictions apply. 
READ_HISTORY
WRITE_ATTEST
Cloud 
Service
READ_ATTEST
SELECT
GET & PUT
WRITE_ATTEST
READ_HISTORY
Select
Attestor 
(Root 
Attestor)
Active 
Attestor
VERIFICATION
Regular Clients
Fig. 2. The Caelus protocol. The Root Attestor, selects the Active Attestor
using the Select operation. The Active Attestor then reads the history us-
ing Read_History, and signs the history to produce attestations, which are
written back using Write_Attest. When no Active Attestor is available,
the Root Attestor can perform attestation itself (shown in gray). Regular clients
perform Get and Put operations and verify these operations by reading
attestations using Read_Attest and running the veriﬁcation procedure on
the attested histories.
header is signed with a private key speciﬁc to each client,
and whose matching public key is known to all other clients.
The sequence number and hash are used to detect omissions,
replay and tampering of data. The timestamp is used by
clients to reconstruct the order and timing of events. Any
data transmitted in a Put is encrypted by the device to
enforce Guarantee SRV1 and both the header and any data
are signed by the device to enforce Guarantee SRV2 and
Guarantee CLT1.
The cloud servers do not buffer any data; their main purpose
is to provide a single interface to the clients and hide the
details of the key-value store and history server from the
clients. Client Put and Get requests are directly forwarded
to the globally distributed key-value store and the results of
Gets are returned back to clients by the cloud servers. Gets
forwarded to the history server are logged immediately while
Puts are only logged after the key-value store notiﬁes it that
the results of the Put have become globally visible or the
visibility time bound has passed. The history server assigns
global sequence numbers to logged operations, which are only
used as a way for clients to request sections of the log. Puts
that have been received but are not yet logged are not assigned
global sequence numbers and are not yet visible to every
client. While the history server is shown as a single machine
in the Figure 1 it need not be. However, if distributed, one