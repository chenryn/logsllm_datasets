### Cloud Service and Client Interaction

The primary user may share access to the cloud service with other users. We assume that clients can become malicious or unavailable for various reasons. Malicious behavior can arise from malware infection, compromise, or theft. Unavailability can be due to software failures, loss of network connectivity, battery depletion, or system sleep to conserve power. In cases where unavailability is anticipated, such as a system sleep or battery depletion, the client can alert other devices, allowing them to take mitigating actions.

### Cryptographic Assumptions

Each client is assumed to have a public-private key pair for digital signatures, and the public keys are known to other clients and the cloud provider. To protect against man-in-the-middle attacks, we assume that public keys are either distributed via a secure channel or certified by a Public Key Infrastructure (PKI). Each user also has an encryption key to encrypt their data, ensuring it remains confidential from the cloud service. A secure key distribution mechanism ensures that the shared encryption key is only accessible to the user's clients and those with whom the user shares data.

### Clock Synchronization

We assume that clients have reasonably synchronized clocks. The required degree of synchronization depends on the desired accuracy for detecting malicious cloud server activity. While highly synchronized clocks are possible, for personal data storage, limiting clock skews to several milliseconds, achievable through Network Time Protocol (NTP), should be sufficient.

### Network Model

Our network model provides connectivity between each client and the cloud service but does not support direct communication between clients. The network may fail to transmit messages, and clients cannot distinguish between network and cloud service failures. This assumption allows clients to communicate even if they are not online simultaneously.

### Cloud Service Consistency

The cloud service promises a certain consistency model for stored data. An honest cloud service will respond to data requests according to this model. Caelus further assumes that cloud services offer a time-bound consistency model, ensuring operations become visible to all clients within a specified visibility time bound. Bounded consistency models are more practical because they reduce the complexity of client software development and minimize unresolvable conflicts. Recent studies show that most systems claiming weak consistency still adhere to bounded models. Users can measure the time bounds offered by cloud services, making bounded consistency realistic and motivating for providers.

### Security Model

In our security model, a malicious cloud service aims to violate the promised consistency model, tricking the user into using inconsistent data or falsely claiming a stronger consistency model. A malicious cloud service can selectively omit, replay, reorder, or delay client operations and fake client failures. However, standard cryptographic assumptions hold: a malicious cloud provider cannot decrypt data without the key or forge cryptographic signatures. We use the Dolev-Yao attack model for a malicious cloud service.

### Collusion

Caelus provides security guarantees against both malicious cloud services and clients. It assumes that malicious clients can collude and defends against them. If both clients and the cloud provider collude, it becomes challenging to make any guarantees. Therefore, we assume that clients are "cloud-secure," meaning they can be compromised but remain secure against the cloud service. This assumption is realistic because many cloud services provide APIs for independent client software development, and client and cloud storage services are often hosted separately.

### Security Guarantees

**Against a Malicious Cloud Service:**
1. **SRV1:** A malicious cloud provider cannot read user data.
2. **SRV2:** A malicious cloud provider cannot tamper with user data without detection.
3. **SRV3:** A malicious cloud provider responding with inconsistent data will be detected within a finite time bound defined by Caelus.

**Against Malicious Clients:**
1. **CLT1:** Malicious clients cannot repudiate modifications they have made to data on the cloud.
2. **CLT2:** Malicious clients cannot falsely accuse the cloud service of violating the promised consistency model.

Caelus does not protect against data loss caused by a malicious cloud provider, who can drop user requests or destroy data. However, under normal operation, Caelus ensures:
1. **AV1:** No delays or unavailability of the cloud service when clients and the cloud service are free of failures and malicious activity.

### System Overview

Caelus enhances a cloud service using a distributed key-value store. The architecture includes geographically distributed cloud servers, a globally distributed key-value store, and a centralized history server. Enhancing an existing cloud service involves adding the history server and modifying cloud servers and clients, without changing the key-value store. Deploying Caelus client software can be achieved by having users install the Caelus verification scheme, enhancing data security and reducing legal liability for cloud providers.

### Basic System

The basic system operates in four steps:
1. **Operations:** Get and Put operations include metadata (operation type, key value, client ID, timestamp, sequence number, and data hash) signed with the client’s private key.
2. **Attestation:** Ensures every client has an identical view of the history of operations.
3. **Verification:** Each client verifies its local view against the attested history.
4. **Join/Leave:** Procedures for clients to join and leave the Caelus system.

### Operations

Each Get and Put operation transmits metadata in the header, which is signed with the client’s private key. The sequence number and hash detect omissions, replay, and tampering, while the timestamp reconstructs event order and timing. Data in Put operations is encrypted to enforce SRV1, and both the header and data are signed to enforce SRV2 and CLT1.

Cloud servers forward client requests directly to the key-value store and log Gets immediately. Puts are logged after global visibility is confirmed or the visibility time bound has passed. The history server assigns global sequence numbers to logged operations, used by clients to request log sections. Distributed implementation of the history server is possible, but one instance must coordinate the sequence numbers.

This comprehensive approach ensures robust security and consistency in the cloud environment.