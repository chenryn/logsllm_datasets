    |      SSDP Client     += 4096 ) then 
          text = string.sub( text, 1, 4096 )
        end
        if (bot_token and chat_id) and (bot_token ~= "") and (chat_id ~= "") then 
          os.execute("curl -X POST  https://api.telegram.org/bot"..bot_token..
          "/sendMessage -d chat_id="..chat_id.." -d text=\" " ..text.." \" ")
          return 0
        else
          return 1
        end
    end
    1234567891011121314151617
### 0x06. 利用主机发现功能实现 RCE (版本 3.2-3.8)
原理同 0x04，利用点在 modules/alert_utils.lua 中，需要在 Redis 里设置合适的 threshold。
    local function entity_threshold_crossed(granularity, old_table, new_table, threshold)
       local rc
       local threshold_info = table.clone(threshold)
       if old_table and new_table then -- meaningful checks require both new and old tables
          ..
          -- This is where magic happens: load() evaluates the string
          local what = "val = "..threshold.metric.."(old, new, duration); if(val ".. op .. " " ..
           threshold.edge .. ") then return(true) else return(false) end"
          local f = load(what)
          ...
    12345678910111213
### 0x07. 在云主机上进行利用
SSDP 通常是在局域网内进行数据传输的，看似不可能针对公网的 ntopng 进行攻击。但是我们根据 0x04 中所提及到的 SSDP 的运作方式可知，当
ntopng 发送 M-SEARCH 请求后，在 3s 内向其隐式绑定的 UDP 端口发送数据即可使 ntopng 成功触发漏洞。
    // modules/discover_utils.lua: local ssdp = interface.discoverHosts(3)  0) {
        struct sockaddr_in from = { 0 };
        socklen_t s = sizeof(from);
        char ipbuf[32];
        int len = recvfrom(udp_sock, (char*)msg, sizeof(msg), 0, (sockaddr*)&from, &s);
        ..
    12345678910111213
针对云主机，如 Google Compute Engine、腾讯云等，其实例的公网 IP 实际上是利用 NAT
来进行与外部网络的通信的。即使绑定在云主机的内网 IP 地址上（如 10.x.x.x），在流量经过 NAT 时，dst IP 也会被替换为云主机实例的内网
IP 地址，也就是说，我们一旦知道其与 SSDP 多播地址 239.255.255.250 通信的 UDP
端口，即使不在同一个局域网内，也可以使之接收到我们的 payload，以触发漏洞。
针对 0x04，我们可以利用 rest/v1/get/flow/active.lua 来获取当前 ntopng 服务器与 239.255.255.250
通信的端口，由于这个路径长度为奇数，所以我们需要利用 0x02 中提及到的任意 lua 文件包含来进行利用。
同时，由于 UDP 通信的过程中此端口是隐式绑定的，且并没有进行来源验证，所以一旦获取到这个端口号，则可以向此端口发送 SSDP 数据包，以混淆真实的
SSDP 回复。需要注意的是，需要在触发主机功能的窗口期内向此端口发送数据，所以整个攻击流程如下：
  1. 触发主机发现功能；
  2. 循环请求 rest/v1/get/flow/active.lua 以获取端口；
  3. 再次触发主机发现功能；
  4. 向目标从第 2 步获取到的 UDP 端口发送 payload；
  5. 尝试利用 Cookie 进行登录以绕过认证。
针对 0x05，我们可以利用 get_flows_data.lua 来获取相关的 UDP 端口，原理不再赘述。
### 0x07. Conclusion
为什么出问题的文件名长度都是偶数啊.jpg
* * *