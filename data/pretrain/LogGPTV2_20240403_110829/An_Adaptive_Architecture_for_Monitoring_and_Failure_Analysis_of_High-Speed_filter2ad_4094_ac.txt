In the current version, the injector operates within the
Myrinet LAN. After verifying the ability of the injector to
communicate (i.e., accept commands) via a serial interface
with the external system, the performance impact of the
fault injector in pass-through mode was evaluated.
Both Myrinet control and data packets were transferred
seamlessly through the device. This allowed the device to
be transparent
to the network structure, as routes are
correctly mapped through in both directions. The fault
injector caused no observable impact on the data transfer
rate. Data passed through the fault injector at the same rate
it would have if the fault injector had not been in the data
path.
Measurements of the latency introduced were taken by a
standard ping-pong packet-sending technique.
Table 1
shows data gathered for the latency calculations. One
million small user datagram protocol (UDP) packets were
sent per side, with each side waiting for the other's packet
before sending a packet. The data indicates that the latency
lies somewhere between 75 and 1400 ns. The uncertainty is
likely due to the small size of the added latency: the actual
latency interval is getting lost in the granularity caused by
the computer's interrupt handler. Therefore, this data should
be used only to provide a general idea as to added latency2.
2 The latency depends greatly on the VHDL designer's ability to meet
timing constraints without pipelining the inject logic excessively. The
current VHDL code pipelines the inject operation for three clock cycles
but keeps a few more 32-bit segments in the FIFO before sending it. At
a data rate of 640 Mb/s, this translates to about a 250-ns latency. Add
to this the latency caused by the extra 1m of cable (which is negligible)
and the Myricom FI3 chips (which is unknown), and this would be the
true latency.
Table 1: Latency Measurements. Each run passed two million
small UDP packets in ping-pong fashion.
Run Time per packet w/o
injector [ns]
235213
235805
235220
234973
235426
1
2
3
4
5
Time per packet
with injector [ns]
235926
235730
236107
236380
236134
latency
[ns]
713
75
887
1407
708
4. Myrinet fault injection campaign
4.1. Experimental setup
After the fault
injector was tested and its operation
confirmed, we ran a fault injection campaign on a Myrinet
network. This campaign had two goals: first, to exercise the
fault injector in a useful scenario, and second, to provide
some insight into the response of a Myrinet network to low-
level faults, especially in its control and routing logic. We
first describe the salient details of the Myrinet technology,
and the test-bed network that was used.
4.1.1. Myrinet. The Myrinet network is designed around
packet switching and communication technology used in
massively parallel processors [1]. It connects hosts and
switches of arbitrary topology with point-to-point, full-
duplex links.
Packets are routed with relative addressing. At each
switch, the first byte of the header designates the outgoing
port. Once the packet is routed, the byte used by the current
switch is stripped off. The source route component of the
header packet
is sequentially consumed en route to the
destination. After each byte is removed, the trailing CRC-8
is recomputed. Thus, a Myrinet packet consists of an
arbitrarily long source route, a 4-byte packet
type, an
arbitrarily long payload, and a single byte of CRC.
The Myrinet host interface is connected to the host I/O
bus, and views it as an external device (Figure 6). The
interface also contains a 32-bit SRAM chip that holds the
Myrinet Control Program (MCP). The MCP is responsible
for sending messages between the network and the host.
Each MCP on a network is given a unique 64-bit address,
and the MCP with the highest address is responsible for
mapping the network, a process which is performed once
every second.
Network mapping is done by first sending a scout
message to all other ports of the switch to which the
mapping node connects. If the mapper does not receive a
response from a port, it assumes there is another switch, and
sends a second scout message thus configured. This is done
recursively until the entire network is mapped.
A Myrinet channel uses control symbols,
interleaved
with standard data to perform various "maintenance" tasks
like packet framing and flow control. These control symbols
are distinguished from data by a Data/Control bit separate
from the 8-bit data path. This D/C bit is 1 for data, and 0 for
control symbols.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8: Topography of the test-bed network
4.2. Fault injection targets
The key objective of the error injection experiments was
to study the Myrinet LAN in the presence of several types
of errors, especially those that are difficult to replicate using
traditional software-based techniques. We used the fault
injector’s ability to determine the exact local state of the
network to inject precise bit flips into the control logic of
the Myrinet.
the fault
injection focused on the impact of faults in the hardware-
generated control packets that are inaccessible to software-
based injectors. The goal was to determine what types of
errors propagate from such faults, and to determine the
effects of transient faults in the system.
In this campaign specifically,
The fault injection campaign focused on three main fault
categories: 1) corruption of Myrinet control symbols via
precise bit flips, 2) corruption of Myrinet control packets
used by the network hardware, and 3) low level data-link
layer faults resulting in the corruption of physical addresses.
We also verified the performance of the fault injector by
looking at UDP packet corruption.
Myrinet control symbols are generated by the network
interface, and are not seen by software running at a higher
level. Myrinet control packets are sent along the normal 8-
bit data path, and are used mainly to configure the network.
Because these packets are also generated by the Myrinet
interface, they are inaccessible to normal software injection
techniques. Address corruption, on the other hand, can be
simulated with software, but it is more difficult, and we
believe a hardware-based campaign like the one discussed
in this paper provides a simpler and more accurate result.
UDP packet corruption, of course, is easily simulated at
higher levels.
Network loads were simulated using a simple UDP
packet generation program, running concurrently with the
standard Unix ping program with the flood option to
generate a large amount of traffic. The status of the
network and the associated information (like routing tables
and control registers) were monitored with the Myrinet
monitoring program mmon.
To ensure the repeatability of the experiments, each
campaign began with the network in a known good state, in
which all routing information was correct and every node
was correctly participating in the network.
4.3. Results
4.3.1. Myrinet control symbol corruption. The goal of
the experiment was to test the response of the Myrinet
Figure 6: Myrinet interface design (from www.myri.com)
Packets are separated by a GAP control symbol, which
tells the Myrinet interface that the previous packet was a
packet tail, and that the next data packet will be the head of
a new packet. There can be any positive number of GAP
packets between data packets. However, GAP packets are
not allowed to appear within packets.
Flow control is managed by a slack buffer, as shown in
Figure 7. When it reaches the high water mark, the buffer
generates a STOP control symbol. Correspondingly,
it
generates a GO symbol upon reaching the low water mark.
Figure 7: Myrinet slack buffer design
Fault
4.1.2. Test-bed network setup.
injections were
performed on a three-node network consisting of one PC
(with a 200MHz Pentium Pro processor) running a 2.0.36
Linux kernel and two SUN UltraSPARC workstations (each
with a 170MHz UltraSPARC processor), and an 8-port
Myrinet switch. Each node had a 1.2+1.2 Gbps host
interface card installed.
The topology of the test-bed
network is shown in Figure 8.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
control logic to errors in the GAP, GO, and STOP control
symbols. Specifically, can errors in flow control logic cause
underflows and overflows in the slack buffer? Because the
injector can represent and respond to the precise local state
of the network, we were able to intercept and corrupt these
symbols in real time.
It should be noted, however, that the control symbols are
implemented so that there is a Hamming distance of at least
two between any two control symbols. (STOP is represented
as 0x0F, GO as 0x03, and GAP as 0x0C). Additionally,
symbols that suffer single 1 to 0 faults will still be detected
correctly; for example, 0x08 will still be recognized as
STOP, while 0x02 will be interpreted as GO. This means
that the control symbols are well-protected against many
simple errors. However, burst errors will still corrupt
control symbols, and this campaign looked at those cases.
For the control symbols GAP, GO, and STOP, a fault
injection campaign was conducted detailing the corruption
from one control symbol to another. We noticed an average
throughput reduction of around 85%, as erroneous flow
control symbols caused, for example, empty buffers to issue
STOP commands. Additionally, about 10% of the data
packets that were sent during these campaigns were lost due
to buffer overflows and misinterpretation of packet tails and
headers.
Corruption of GO and STOP symbols. The Myrinet can
recover from corrupted GO and STOP symbols using its
short-period timeout counter. The timeout counter is set to
16 character periods (at 80MB/s, a character period is
roughly 12.5ns). If a symbol is received, the counter is reset.
If the counter times out, the sender transitions itself to the
GO stage. Thus, if the sender has been placed in the STOP
state because it received an erroneous STOP symbol, it will
recover fairly quickly by acting as if it received a GO
symbol. However, we observed faulty STOP conditions to
cause a significant decrease in network performance. In one
test run, the test program received 5038 messages in a one
minute period, a decrease of almost 90% from the 48000
messages received under normal conditions.
if
source blocking can occur
Corruption of GAP symbols. Errors in GAP symbols are
especially interesting. In general, a Myrinet uses destination
blocking when the channel is occupied by another packet, or
if there is a deadlock caused by misaddressed packets.
However,
the packet-
terminating GAP symbol is not transmitted or is lost in
transmission. In this event, the path followed by the packet
will remain occupied, since it is normally reclaimed with
the terminating GAP. The network will recover from this
occurance with a long-period timeout, which occurs after
roughly four million character transmission periods (~50ms
at a data rate of 80MB/s). The sending host will
then
terminate the packet and consume the remainder of the
unsent packet. This timeout process causes the throughput
of the network to drop significantly when faults are injected
into the control stream,
to around 12% of the normal
throughput.
The results for all of the control symbol injections are
summarized in Table 2. The Original column denotes the
control symbol that was corrupted, and the Replacement
column shows the control symbol that it was corrupted to
be. During all of these runs, the network was operating at
full capacity and every node was running a message-
sending program.
The messages were UDP packets designed in such a way
that the symbol mask we corrupted did not appear in the
message itself. For example, while searching for 0x0F
(STOP), there were no occurrences of 0x0F in the message
body. Thus, we can be certain that any dropped packets are
the result of errors in the control symbols, and not in the
data packets. A packet was reported as received if it was
received correctly by the application, with no errors and a
correct CRC.
Table 2: Results of control symbol corruption campaign
Original Replacement Msgs sent Msgs received Loss rate
STOP
STOP
STOP
GAP
GAP
GAP
GO
GO
GO
IDLE
GAP
GO
GO
IDLE
STOP
IDLE
GAP
STOP
4064
4092
4015
3132
3378
3983
2564
3483
3720
3705
3445
3694
2785
3022
3607
2199
3108
3322
8%
15%
7%