The following example demonstrates an issue where only one test fails when using a loop in a `@testset`:

```julia
julia> @testset "foo $i" for i = 1:3
           @test 2 == 3 + i
       end
Test Failed at REPL[44]:2
  Expression: 2 == 3 + i
   Evaluated: 2 == 4
Stacktrace:
 [1] macro expansion at .\REPL[44]:2 [inlined]
 [2] macro expansion at .\test.jl:921 [inlined]
 [3] anonymous at .\?

Test Summary: | Fail  Total
foo 1         |    1      1

ERROR: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
```

However, if you manually write out the tests, all three are executed and fail as expected:

```julia
julia> @testset "foo" begin
           @test 2 == 3 + 1
           @test 2 == 3 + 2
           @test 2 == 3 + 3
       end
Test Failed at REPL[46]:2
  Expression: 2 == 3 + 1
   Evaluated: 2 == 4
Stacktrace:
 [1] macro expansion at .\REPL[46]:2 [inlined]
 [2] macro expansion at .\test.jl:860 [inlined]
 [3] anonymous at .\?

Test Failed at REPL[46]:3
  Expression: 2 == 3 + 2
   Evaluated: 2 == 5
Stacktrace:
 [1] macro expansion at .\REPL[46]:3 [inlined]
 [2] macro expansion at .\test.jl:860 [inlined]
 [3] anonymous at .\?

Test Failed at REPL[46]:4
  Expression: 2 == 3 + 3
   Evaluated: 2 == 6
Stacktrace:
 [1] macro expansion at .\REPL[46]:4 [inlined]
 [2] macro expansion at .\test.jl:860 [inlined]
 [3] anonymous at .\?

Test Summary: | Fail  Total
foo           |    3      3

ERROR: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.
```

This behavior does not seem to be intended. For further discussion, see [issue #21594](https://github.com/JuliaLang/julia/issues/21594). If this is indeed the intended behavior, it should be better documented.