# SoC漏洞挖掘技术之MediaTek BootROM篇
|
##### 译文声明
本文是翻译文章，文章原作者 Jeremy Boone，文章来源：research.nccgroup.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
在本文中，我们将为读者介绍针对片上系统SoC的电压毛刺漏洞的利用与防御技术。
这项研究是由我们的实习生Ilya Zhuravlev完成的，她已经回到学校，但毕业后将重新回归我们的安全团队；同时，在该研究的进行过程中，NCC
Group的Hardware & Embedded Systems Practice部门的同事Jeremy Boone提供了许多宝贵的建议。
随着经济实惠的工具链（如ChipWhisperer）的出现，故障注入已不再是只有资金充足、技能高超的攻击者才能实施的一种攻击手段。同时，由于现代设备比以往嵌入了更多的机密信息，因此，当前它们需要更加细致全面的保护。当然，这些机密信息不仅包括加密的用户数据，也包括专有的供应商机密数据。
电压毛刺是一种故障注入攻击，它可以通过改变目标设备的电源电压，从而导致设备执行非预期的行为。通常情况下，这需要将处理器内核电压轨对地短暂短路，以便破坏处理器的内部执行状态。虽然电压毛刺攻击的副作用难以准确预测，但通过观察系统的行为，并仔细调整毛刺参数，还是能够达到令系统跳过某些指令的执行或破坏数据的提取操作的目的的。通常情况下，这些类型的故障可以使攻击者绕过由低层软件执行的关键安全操作，例如，当引导加载程序在将执行控制权传递给后续固件映像之前对其进行签名验证时，如果发动这种攻击，攻击者就有机会绕过签名验证操作。
过去，大多数故障注入方面的研究都集中在低功耗微控制器上，例如最近对STM32系列MCU、NXP
LPC和ESP32的攻击方法。鉴于这些类型的微控制器很少出现在功能更强大的手机或物联网设备中，因此，我们在本文中将试图证明，当这种攻击应用于更复杂的处理器时，攻击者仍然能够得手。
在本文中，我们不仅为读者详细介绍如何探索MediaTek MT8163V片上系统（64位ARM
Cortex-A）的引导过程，同时，还会演示如何设计一种能够可靠地对SoC发动故障注入攻击的设备。最终，我们的研究结果表明，MediaTek
BootROM容易受到电压毛刺的影响，使得攻击者可以利用这种攻击方法绕过预加载器的签名验证。这样的话，攻击者就可以绕过所有的安全引导功能，执行未签名的预加载器映像，从而彻底破坏硬件信任根。
当然，我们的工作主要集中在MT8163V芯片组上，并且没有测试该攻击针对最新的SoC变体的有效性。然而，我们知道，对于许多MediaTek
SoC来说，从BootROM到preloader执行流程都是一样的。因此，我们怀疑（目前尚未测试）该漏洞会影响MediaTek公司目前在市场上流通的其他型号的SoC。鉴于该平台的流行程度，这个漏洞可能影响到使用MediaTek芯片的各种嵌入式设备，包括平板电脑、智能手机、家庭网络产品、物联网设备等。
由于该漏洞位于掩模只读存储器（mask
ROM）中，因此，根本无法为所有已经发售的产品修复该漏洞。然而，这个安全问题的严重性在很大程度上取决于产品的威胁模型。由于电压毛刺攻击需要对目标设备进行物理访问，所以，在假设允许进行物理访问的威胁模型中，例如对于经常丢失或被盗的移动设备，该漏洞的风险最高；相反，对于攻击者无法物理访问的产品，则该漏洞带来的威胁程度相对较低。
## 选择硬件目标
我们选择了一款使用MediaTek
MT8163V片上系统的流行平板设备作为研究对象。当然，我们在目标的选择方面，主要考虑其价格、广泛的可用性以及PCB裸露面积和带有标签的测试点，以力图简化电路板的逆向过程，并让电路板的探测和干扰变得更加轻松。
## MediaTek片上系统的引导过程
许多MediaTek的移动和平板SoC都遵循一个通用的引导过程，具体如下图所示。我们的故障注入攻击是针对BootROM设计的，因为它会加载和验证预加载器的可执行文件。
BootROM是引导过程中不可改变的第一阶段，并充当SoC的硬件信任根。与典型的情况一样，这些SoC都包含一个efuse
bank，可以在OEM设备制造过程中对其进行配置，以实现安全启动并指定预加载器签名证书的哈希值。在启动过程中，BootROM将读取这些fuse，以确定配置的安全引导策略。接下来，BootROM将把预加载器从eMMC加载到RAM中，并在执行前验证其签名。
MediaTek的预加载器是引导过程中的第二个阶段，也是第一段可变代码。预加载器被存储在BOOT0
eMMC分区上。如eMMC规范的第7.2节所述，引导分区是一些特殊的硬件分区，与主用户数据分区相互独立。
## 引导过程分析
MediaTek
SoC在BOOT0中存储了两个预加载器的副本。如果第一个映像损坏（即没有通过签名验证检查），那么BootROM将加载第二个映像。如果两个副本都损坏了，那么BootROM将进入下载模式，这一点可以通过UART发送的字符串“[DL]
00009C40 00000000 010701”看出来。
为了将预加载器从闪存加载到RAM中，将使用eMMC的引导模式功能。不过，BootROM不会发送单独的READ命令，而是将eMMC重置为“alternative
boot mode”。这是通过发送两条GO_IDLE_STATE(CMD0)命令来实现的：首先，会发送参数为0xF0F0F0F0的命令，使其进入“pre-idle”状态；然后，发送参数为0xFFFFFFFA的命令，使其进入引导状态。
在接收到第二条命令后，eMMC便开始以1位模式通过DAT0线传输BOOT0分区的内容。接收整个分区的内容大约需要100ms。
##
当BootROM从BOOT0分区接收到第一个预加载器映像的全部内容后，就会通过发送GO_IDLE_STATE复位命令中断该过程。
根据我们的观察：如果第一个预加载器映像是有效的，那么，从传输预加载器的最后一个字节到观察到预加载器发出的第一条eMMC命令之间大约需要2秒时间。
另一方面，如果第一个预加载器映像无效（也就是说，它未通过签名验证），则重复此过程。但是，直到收到第二个预加载器副本后，BootROM才发送复位命令。在这种情况下，BootROM加载第一个和第二个预加载器映像之间的间隔，只有700ms左右。
因此，我们假设在最初的700ms左右的时间里，BootROM是在忙着解析预加载器映像的结构，并执行签名验证；而在接下来的1.2s的时间内，则主要忙于初始化预加载器的代码。据此我们可以判断出，电压毛刺攻击应以eMMC读取预加载器后的第一个700ms窗口为攻击目标。
## 搭建FPGA触发器
为了注入具有精确时序的电压毛刺，我们通过廉价的FPGA（Sipeed Tang Nano）实现了一个自定义触发器。该FPGA被连接到eMMC
CLK和DAT0线（虽然图中还连接了CMD引脚，但是它只是供逻辑分析仪进行调试之用）。
虽然FPGA的逻辑电平默认为3.3V，但它也能够在1.8 V输入下工作，而无需对电路板进行任何修改。FPGA的输出为3.3
V的触发信号，并连接到ChipWhisperer的触发输入引脚。
Verilog触发器代码非常简单：FPGA由eMMC时钟信号提供时钟，代码使用DAT0实现移位寄存器，以跟踪线路上传输的最后4个字节。当观察到既定的模式时，它将在512个eMMC时钟周期内产生触发输出信号：
    always@ (posedge emmc_clk or negedge sys_rst_n) begin
    capture  0) begin
    counter  div0.c:line 41 0
    [2213] [platform] ERROR: PL fatal error...
    [2214] [platform] PL delay for Long Press Reboot
## 暴力搜索正确的毛刺参数
如前所述，我们假定签名检查是在最后的GO_IDLE_STATE命令之后的700ms窗口内进行的。为了覆盖整个700ms的时间段，我们使用了一种渐进式的暴力破解方法。
首先，将未修改且经过正确签名的预加载器加载到eMMC
BOOT0分区中。然后，在偏移范围[25400，100000]内执行粗略的暴力搜索，这里以200个循环为步长。同时，我们假设有用的毛刺偏移会导致设备崩溃（在UART上看不到输出），或者令其进入DL模式（在UART上将观察到“
[DL] 00009C40 00000000 010701”输出字符串）。
通过这个实验，我们发现尝试的大多数偏移量都不会导致设备行为发生明显的变化，并且预加载器已正常加载并运行。但是，在运行这个第一阶段的暴力破解几个小时之后，发现了多个感兴趣的区间，并对其应用了更精细的暴力搜索。具体来说，这种细粒度的方法将使用20个周期作为步长值，而不再是200个周期。
同时，我们还通过修改调试字符串篡改了预加载器映像。BootROM应该会因为签名检查失败而拒绝加载这个被篡改的映像。但是，如果这个被篡改的映像被加载并执行，就说明我们的毛刺攻击成功了。之后，我们再次缩小了感兴趣的区间，并继续对毛刺参数进行暴力搜索。经过大约2个小时的搜索后，终于找到了几个成功的毛刺。然而，这些成功的案例并不十分可靠，因此还需要进一步的微调。
接下来，围绕着这些特定的偏移和宽度，我们继续通过暴力搜索进行微调，以寻找完美的毛刺参数。有了合适的参数，再加上几天的暴力搜索，我们绕过签名检查的成功率逐渐提高到15-20%。下表给出了我们的统计输出，其中有多组参数（宽度和偏移量）能够实现成功的毛刺攻击：
##
请注意，所有成功的毛刺都聚集在狭窄的范围内：宽度范围为93-130，而偏移量的范围为41428-41438。这些值可以与本文结尾处提供的ChipWhisperer脚本一起使用。
## 执行Payload
当然，我们的目标绝不是简单的篡改调试字符串，而是执行任意代码。所以接下来，我们在预加载器二进制代码中注入了一个payload，以替换部分字符串。同时，我们还对预加载器进行了相应的修改，使其直接跳转到payload处，从而跳过原本执行GPT解析的代码。之所以选择这个位于预加载器后期的位置，是因为毛刺攻击成功后，必须用不同的波特率参数重新配置UART，而这是需要一定的时间的，所以会导致预加载器的早期输出丢失。
注入的payload会打印一条日志信息，然后读取BootROM内存和EFUSE内容。下面的UART输出表明毛刺攻击成功了：
    Dry run
    Dry run done, go!
    105 41431 b'\x00[DL] 00009C40 00000000 010701\n\r'
    105 41433 b'\x00'
    99 41432 b'\x00\n\rF0: 102B 0000\n\rF3: 4000 0036\n\rF3: 0000 0000\n\rV0: 0000 0000 [0001]\n\r00: 0007 4000\n\r01: 0000 0000\n\rBP: 0000 0209 [0000]\n\rG0: 0190 0000\n\rT0: 0000 038B [000F]\n\rJump to BL\n\r\n\r\xfd\xf0'
    Glitched after 10.936420202255249s, reopening serial!