                {
                    BYTE* cookieAddr = (BYTE*)MemInfo.BaseAddress + 0x80;
                    // 自己写一个for循环的来实现复制
                    for (int i = 0; i  dt nt!_HEAP d62f960000
    [...]
    +0x010 SegmentSignature : 0xffeeffee
    [...]
    +0x080 Encoding         : _HEAP_ENTRY
    [...]
我dump了几个`_HEAP`的数据, 发现他们的0x10处都为`0xffeeffee`, 所以依据此可以判断此内存块存放`_HEAP`结构.
接着通过下面的这张图:
![Desktop
heap](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_5.png-w331s)
Desktop heap会有一份堆映射到user space, 也就是我们可以用virtualAlloc可以查询到的, 每一个Desktop
heap在kernel中的地址和映射到内核中的地址是固定的, 如果满足`user space address + offset = kernel space
address`. 说明到了Desktop heap对应的`_HEAP`结构, 接着偏移0x80的地方存放的是我们的`cookie`值.
### 伪造怎样的tagWND: 漏洞如何利用
我们前面讲过, tagWND里会有一个strName, 与NtUserSetText函数关联,
期间strName是一个`nt!_LARGE_UNICODE_STRING`结构体.
    kd> dt _LARGE_UNICODE_STRING
        win32k!_LARGE_UNICODE_STRING
        +0x000 Length           : Uint4B ==> windows text的长度
        +0x004 MaximumLength    : Pos 0, 31 Bits ==> 最大长度
        +0x004 bAnsi            : Pos 31, 1 Bit 
        +0x008 Buffer           : Ptr64 Uint2B ==> 指向字符串的指针
我们知道我们差的是`write_what_where`:
    [+] where: 把这个值写入strName.buffer对应的指针
    [+] what: 使用NtUserSetText将what数据写入 
这就是我们整体的利用思路, 举个例子, 我们不是要写`nt!halDispatchTagble+0x8`的值为`shellcode`么.
    [+] 假设nt!halDispatchTable+0x8的值为0xFFFFFFFFFF
    [+] 篡改strName.buffer值为0xFFFFFFFFFF
    [+] 把NtUserSetText的第二个参数改为ShellCode Address
ok, 现在我们的剩下的唯一问题就是我们如何把布局变成我们想要的布局.
### fengshui布局
很多时候名字是一个有意思的事, 比如fengshui布局. 光从一个名字我们能得到什么.
    [+] 我不是学风水的, 所以在我眼里风水就是指周围环境很适合做某事.
对于这个漏洞利用来说, 什么样的环境是我们需要的呢. 前面我们说过.
    [+] 首先漏洞触发窗口的psbinfo
    [+] 其次是一个windows text, 以便于我们覆盖它的_HEAP_ENTRY. 
    [+] 最后放一个tagWND. 利用它的strName.buffer进行任意地址的读写.
所以我们期望的布局图示如下.
![feng shui
布局成果](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_6.png-w331s)
我在风水布局上面花了相当长的一段时间. 因为对两个地方理解有误导致.
    [+] 存储tagWND最好是0x180
    [+] desktop和pool不一样.
如果听不懂就对了. 我们来搞懂他.(这一部分建议看看我的源码, 虽然很丑)
首先. 由前面我们知道.
    memset(o1str, '\x40', 0x1e0 - _HEAP_BLOCK_SIZE);
    RtlInitLargeUnicodeString(&o1lstr, (WCHAR*)o1str, (UINT)-1, 0x1e0 - _HEAP_BLOCK_SIZE - 2);
    NtUserDefSetText(sprayWnd_1[i], &o1lstr);
通过上面的代码片段我们分配了0x1e0大小的桌面堆块, `NtUserDefSetText`函数是我进行堆喷射的接口.
通过它我们能够的到任意大小的heap.
于是, 为了实现上面的堆分配. 我一开始分配了0x300个`0x1e0`Desktop heap.
![feng shui
布局](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_7.png-w331s)
之后为了防止堆块合并, 我进行了隔一个进行free.
![feng shui
布局](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_8.png-w331s)
free之后, 我通过两次填充, 布局如下:
![feng shui
布局](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_9.png-w331s)
很好, 我们释放此0x1b0的数据, 接着先填充0x180, 在填充0x30的数据. 在释放0x180之后, 我们申请`tagWND`, 如下:
![feng shui
布局](https://images.seebug.org/content/images/2019/04/01/1554100026000-blog_10.png-w331s)
接着隔一释放我们另外的0x1e0的数据块, 一堆循环重复之后, 我们实现了我们想要的布局.
很抱歉, 这一部分实在讲的不够好. 一个是我实在不会做gif图, 那种彩色图实在是不会做, 如果后面我学会了, 这一部分会重新更新. 另外一部分,
我总感觉绕了很多的弯路, 幸运的是, 他是可靠的.
我依据的原则如下:
    [+] tagWND适合0x180, 这一部分通过调试验证来的
    [+] 当一个块处于free态, 另外一个分配的内核块会往前面挤
    [+] 如果一个块大小为0x30. 那么先分配0x20, 再去分配0x10. 如果不这样做, 很容易0x10+0x10+0x10
    [+] Desktop heap 用heap来fengshui, 和pool不一样
    [+] NtUserDefSetText ==> 分配任意大小heap的接口函数
    [+] DestoryWindow ==> free heap块的接口
在实现了布局之后, 我们的漏洞利用就结束了. 只要构造一个假的`tagWND`, 改变其`strname.buffer`值, 就能够实现我们的任意地址读写.
## 总结
### exp总结
在我学习heap cookie的过程中, 我查阅资料的时候发现, 这是ddctf的第二题… 于是, 我看到出题的keenjoy98师傅说.
    [+] 来自 Pangu 的 Slipper 和 360 Vulcan 的 "我叫0day谁找我_" 先后提交了第一道题目的答案，虽然 ExpCode 还需打磨，但两位同学的答案都是合格的。恭喜他们！(不远万里前来欺负在校大学生 :P)
那一瞬间觉得整个人都凉了, 因为我的代码, 何止需要打磨, 简直需要回炉重造. 一开始还是有代码组织的, 后来自从`heap cookie`开始,
每一天想的都是如何实现功能, 根本没有想组织的心情. 所以那是一份相当不堪入目的代码.
另外一个问题是死锁, 如果你观察我的代码, 能看到很多的Sleep函数, 原因来源于, 其实exp的开发很久以前就完工了. 但是有个很奇怪的事,
当我运行在调试某些地方写入`__debugbreak()`的时候, 我在最后运行的时候, 我可以运行`cmd`,
但是去掉这些`__debugbreak()`, 在调试器当中我打印出Token已经被替换了. 但是就是没有cmd产生.
于是我dump了一下此时卡住时候的堆栈. 发现是由于windows的消息卡住了. 于是我花费了三四天的时间在研究如何绕过死锁.
最后实在没有找到方法(因为操作系统实在是太菜了). 有一天, 我想, 既然我那么多个`__debugbreak()`可以抛出`cmd`,
那么我是不是能够通过模仿`__debugbreak`的行为来绕过死锁呢. 我一开始选取了for循环, 但是在vs 万恶的优化下, 自动帮我去掉了,
所以我最后选取了`Sleep(5000)`函数, 成功的帮我绕过了死锁.
### win32k tips总结.
首先, 这一部分只算是我自己的想法. 所以不算是教科书般的定义… 所以请把他当作是一种讨论, 不要当作教条.
#### 关于逆向代码
`win32k`是一个很大很大的东西, 也就是说, 就算给了你源代码写了详细的注释, 可能你都得花一辈子的时间去理解阅读,
估计是比等名侦探柯南完结更久的时间. 所以, 尽量少去静态逆向`win32k`的代码. 很多时候, 动态调试能帮你省去很多时间. 我自己做的过程中,
必须需要逆向的代码, 体现在漏洞触发的时候, 我需要理解代码如何才能抵达漏洞触发的那个点的位置. 基于这种情况下. 一般的有用的资料是.
    [+] RectOS: 一个开源项目, 仿照写windows NT
    [+] windows NT 4.0: windows NT源码泄露的版本, github能搜到.
    [+] 汇编代码: 通过阅读汇编代码进行调试分析, 分析关键处寄存器内存等的值.
说到底, 我只是想写提权而已. 每一年都有无数个win32k漏洞被爆出来, 每次的漏洞的函数都不一样, 存在很大的可能性, 在你一年之后,
回想一年前的代码你已经忘记的干干净净了. 所以, 纠结于这个函数到底干嘛, 这个结构体到底在干嘛, 我觉得并不一定是合适. 相反, 与我而言. 更重要的是.
    [+] 我拿到一个POC ==> 能定位到关键代码么
    [+] 定位到关键代码之后 ==> 我能确定我要利用的是哪一个部分么.
    [+] 知道利用的点之后 ==> 我知道哪里找资料获取相关的信息抵达这个利用点么.
拥有能力我觉得是比使用能力更重要的事. 因为如果你有能力, 剩下的过程不过是循环往复, 调试改正. 这样.
#### 关于windows内核提权exp的编写.
可能看了上面的东西你有点小小的难受, SMEP, heap cookie… 这都啥啥啥…. 但是一个好消息. 如果你阅读完全文之后, 你会发现.
其实大多数是依赖于操作系统. 和你此次的利用哪一个漏洞代码其实无关. 也就是说, 这一部分的东西, 你只要学习一次就好. 我觉得这是一个很好的消息.
意味着,如果你是一个懒惰的人, 大可以翻翻有没有开源的库, 别人已经编写好的代码直接用就好了. 类似于这样.
    #include "exploit_wjllz.h"
    int main()
    {
        SmepBypass();   //SMEP绕过
        exploit();
    }
但是我们都做到内核来了, 了解原理可能是基于习惯吧… 所以前面浪费了大多数的篇幅.
另外一个方面, 在我exp的开发过程中, 大多数时候都借用了调试器和虚拟机的特性.
    [+] windbg: 可以帮我模拟SMEP绕过. heap cookie, write_what_where
    [+] 虚拟机镜像: 可以帮我模拟绕过KASLR
也就是, 我可以通过这个来先验证自己的思路对不对, 剩下的知识都是死知识, 不断地去补充调试就好了.
#### 关于windows内核win32k
win32k的漏洞的本质(我认为的), 因为自己也是学习的过程, 所以只能给出探讨, 无法给出结论. 希望你不要介意.
    [+] user callback
这个地方一直是我师父给我讲的, 开发者假设和攻击者假设的区别.
    [+] 开发者假设: 我的内核数据很重要, 最好全部由我来管理. 外部的数据只能通过我提供的接口来进行相应的修改.
    [+] 攻击者假设: 基于某种可能, 我能够利用user callback的函数, 使本来应该运行在内核中的程序流. 回到我的callback. 在这里, 我能依据漏洞点. 修改数据. 突破开发者假设.
### 实验结果验证
如下:
### 相关链接
  * sakura师傅博客: 
  * 小刀师傅的博客: 
  * 我的博客: 
  * 本文exp地址: 
  * ncc gruop: 
  * cve-2015-0057: 
  * keenjoy98老师: 
  * smep绕过: 
* * *