设置Servlet环境其实不在一本设计模式书的范围内，至少这本书不应该为
Servlets&JSP
Head First
了这个而篇幅大增。
用你的浏览器去逛一下ApacheJakarta Tomcat网页，网址在http://jakarta
口
apache.org/tomcat/，这里有相当详细的信息和资料。
你可能也会想要看看我们HeadFirst系列的另一本书：Bryan Bashham、
Kathy Sierra和IBert Bates所著的《Head First Servlets & JSP》。
你现在的位置
551
---
## Page 588
Model2控制器Servlet
步骤一：模型
请记得在MVC中，模型对视图和控制器一无所知。换句话说，它们之间
是完全解耦的。模型只知道，有一些观察者它需要通知。这正是观察者
模式美妙的地方。模型还提供一些接口，供视图和控制器获得并设置状
态。
我们现在需要修改它以用于Web环境，但是由于它不依赖任何外部类，
所以实在是没有什么需要修改的地方。我们可以直接使用BcatModel，真
高效。直接进人步骤二吧！
步骤二：控制器Servlet
别忘了，Servlet将扮演控制器。它将收到来自Web浏览器的请求，并将其
转换成作用于模型的动作。
然后，由于Web工作的方式，我们需要将一个视图返回给浏览器。所以我
们需要把控制权交给视图（也就是JSP）。我们把这部分留到步骤三。
下面是Servlet的轮廊，下一页我们会看到完整的实现。
我们扩展HctpSenvet类，以便做
Servlet的事情（C比如接收HTTP请
求）。
当Senulet第一次创建时，
public class DJView extends HttpServlet (
init()方法金被调用。
public void init() throws ServletException(
BeatModel beatModel = new BeatModel();
我们先创建一个BetModel对
beatModel.initialize () ;
getServletContext().setAttribute("beatModel",beatModel);
象.….
/
…然后传入一个
//这里是doPost方法
beatModel的引用给
public void doGet (HttpServletRequest request,
SeruletContext.好让
HttpServletResponse response)
SerletContext可以访问
throws IOException,ServletException
beatModel,
//实现写在这里
doGet（）方法是事情真正发生的地方.下一页我们金实
现此方法。
552
第12章
---
## Page 589
复合模式
前一页的doGetO方法，是这么实现的：
我们先从Servlet
public void doGet(HttpServletRequest request,
Context中抓取模
HttpServletResponse response)
型，稍后金用到。
throws IoException,ServletException
BeatMode1 beatModel =
(BeatModel)getServletContext().getAttribute("beatModel");
String bpm = request.getParameter("bpm");
if (bpm == null) {
接下来，取出所有的
HTTP会参数…
1
如果命今是set.我们就找出
String set = request.getParameter("set");
if （set != null)(
set的值，并告诉模型。
int bpmNumber = 90;
bpmNumber = Integer.parseInt(bpm) ;
beatModel. setBPM (bpmNumber) ;
、
if (decrease != null){
beatMode1.setBPM(beatModel.getBPM()-1);
为了递增或递减，我们从模型获得
当前BPM并调整模型。
String increase =
request.getParameter("increase");
if (increase != null){
beatMode1.setBPM(beatModel.getBPM() + 1);
String on = request.getParameter("on");
如果取得on/oss命令，就告诉模
if (on != null){
型开始或停止。
beatModel.start ();
1
String off - request.getParameter("off");
控制器的责任已了，让视图
if (off != null){
接手创建HTML视图。
beatModel.stop () ;
request.setAttribute("beatModel",beatModel);
根据Model2的定义，把Bean传给
2SP.此Bean包含着模型的状态。
RequestDispatcher dispatcher =
但是这里的做法是：我们把真实
dispatcher.forward(request, response);
的模型直接传给2SP，因为这个模
型别好就是一个Bean。
你现在的位置
553
---
## Page 590
Model2视图
现在我们需要一个视图·····
我们现在需要一个视图，我们的浏览器版本节拍产生器已经快完成
了！在Model2中，视图其实就是JSP。JSP只知道它会从控制器收到一
个Bean。在我们的这个例子中，Bean其实就是模型，而且JSP只用到
这个Bean的BPM属性。现在，JSP可以创建视图和用户界面控件了。
这就是我们的Bean，是
Servlet传给我们的。
开始写HTML！
用模型Bean提取BPM属性。
DJ View
DJ View
现在我们产生
Beats per minutes =
当前的BPM。
BPM:">
&nbsp;
视图还具有一些控件部分。
>">
我们有一个文本输入框以及递
增/递减、丹/关按钮。
HTML的结束。
注意：就和MUC一样，在Model2中.视图
没有改变模型（这是控制器的工作），只
使用了模型的状态。
554
第12章
---
## Page 591
复合模式
进行Model2的测试......
打开你的Web浏览器，连到DJViewServlet..
DjView
c+
http://localhost:8080/
Q-Coogle
Apple
YahoolLocal
DjVi
DJView
这是模型的视图。
（1）用户点击on按
钮。
Beats per minutes = ofline
（2）通过HTTP.请求被送
这些是控件，对
BPM:0
set
到控制器。
任何控件的摄作，
off
（3）节拍开始
都金通过HTTP送
BPM默认设置为
到Serulet控制器进
90。
行处理。
（4）通过HTTP，视图
被返回到览器并被
DJView
显示出来。
Beats per minutes = 90
（5）用户在文本框输
入BPM的值。
BPM:150
set
onoff
（6）用户点击
“Set”按钮。
（7）发出HTTP请求。
你现在的位置
555
---
## Page 592
Model2要做的事
800
DJView
+http://localhost:B080/djvQ-Google
（8）控制器把模型
addvAoogssauppy
的BPM改成150。
DIView
DJView
Beats per minutes = 150
（9）能图返HTML
反映它前模型。
BPM:
set
要做的事
①首先，链接到网页，你会看到BPM是0，单击“on”按钮继续。
②现在你会看到BPM的值是默认设置：90。你会听到Server所运行的机器上有节拍的声
音。
③输入一个BPM值（比方说120），单击“set”按钮，网页会刷新成120BPM（你应该听
到节拍加快）。
④利用“>”按钮上下调整节拍。
③想想看，每一步系统是如何工作的。HTML界面对Servlet（控制器）发出请求，
Servlet解析用户输入，并对模型做出请求。Servlet把控制权交给JSP（视图），产生
HTML视图并返回浏览器显示。
556
第12章
---
## Page 593
复合模式
设计模式和Model2
利用Model2实现Web版本的DJ控制之后，你可能想知道模式去哪里了。我们的视图是JSP产生的
HTML，而这个视图不再是模型的监听者。我们的控制器是Servlet，它会接收HTTP请求，但是策
略模式好像不见了。至于组合模式，好像也没个影子。我们有HTML的视图显示在网页浏览器上，
这还算是组合模式吗？
Model2是MVC在Web上的调整
虽然Model2看起来不像是“教科书”上的MVC，但其各部分都还在，只是为了反映Web浏览器模型
的特质而经过了调整。让我们来看一看
观察者
网页
浏览器
视图不再是经典意义上的模型的
观察者，它没有向模型注册以接
有一个新网页要
收状态改变通知。
显示。
但是当模型改变时，视图的确
用户做了一些事。
间接地从控制器收到了相当于
通知的东西。控制器甚至把
Bean送给视图，这允许视图可
bean
以取得模型的状态。
更新显示，这是新的
如果你考虑到浏览器模型，视图
模型状态。
在HTTP响应返回到浏览器时只
需要一个状态信息的更新，随时
JSP/HTML
控制器
的通知是没有意义的。只有当页
视图
面被创建和返回时，创建视图并
好，我改变我的状态。
结合模型状态才有意义。
在有页面请求的时候。
而不是在每次模型状
态改变的时候，视图
改变你的状态。
从控制器接收通知。
ono
setBPMOoffO
etBPMO
你现在的位置
557
---
## Page 594
Model2模式
策略
在Model2中，策略对象依然
组合
是控制器Servlet，但它不像
像我们的SwingGUI，视
传统的做法那样直接和视图
图是利用许多图形组件一
结合。就是说，策略对象为
层一层叠起来的。但是在
视图实现行为，当我们想要
这里，则是由网页浏览器
有不同的行为时，可以直接
呈现HTML描述。尽管如
把控制器换掉。
网页
此，内部还是很类似一个
浏览器
形成组合的对象系统。
有一个新网页要
显示。
用户做了一些事。
控制器还是提供视图
的行为，只不过它不
bean
再用对象组合直接和
更新显示，这是新的
视图结合在一起。
模型状态。
JSP/
控制器
HTML视图
好，我改变我的状态。
改变你的状态。
ono
setBPMO offO
PDG
getBPMO
558
第12章
---
## Page 595
复合模式
theregare_Jo
问：
DumbQuestions
视图一定要向模型询问
式在MVC中的地位。组合模式真的
状态吗？为什么不在更新通知时用推
在MVC中吗？
送（push）模型，顺便把模型状态
合：
当取MVC名字时，他们
送过去呢？
合：
是的，组合模式真的在
需要一个字头为“M”的单词，否则
MVC中。但是，这的确是一个不错
就不能叫做MVC了。
合：
当然可以在通知的时候
的问题。今天的GUI库，像Swing，
把状态送过去，事实上，如果你再
正经一点，我们同意你的看法，一开
变得如此复杂，以至于我们很难注意
看一次JSP/HTML视图就会发现，
始大家都会挠头、搞不懂模型是什
到它的内部结构、也很难注意到它是
这正是我们在做的。我们把模型状
么。但是大家也都逐渐地发现，除了
利用组合进行构造与更新显示的。甚
态包成Bean发送，然后视图就用
模型、还真是找不到更恰当的词汇。
至，测览器可以将标记语言转变成用
Bean属性来访问状态。更早之前的
户界面，这更是让我们难以想象其中
问：