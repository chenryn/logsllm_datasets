Figure 10: Analysis of HTTPS related ABBs
browsers which have started showing negative indicators for pages
served over HTTP [12, 14, 33].
Due to the increased focus on HTTPS, in this section, we briefly
focus on the HTTPS-related ABBs of the ones shown in Table 1. In
Figure 10, we compare how different HTTPS-related ABBs affect
browser APKs and browser families. We find that although less than
17% APKs and browser families are vulnerable to favicon-padlock
placement (ABB # 20) and self-signed certificates ABBs (ABB # 23,
ABB # 27), over 50% of them execute the code originating from the
mixed inclusion (ABB #26). Moreover, we observe that more than
90% browser APKs and families do not use different indicators to
help users differentiate between HTTPS websites with no mixed
inclusions and those with mixed inclusions. We argue that, even for
browsers that block mixed content, this is an undesirable behavior
because it allows mixed inclusions to go by unnoticed for a longer
period of time thereby increasing the window of exploitation for
users who happen to utilize browsers that render mixed content.
5.5 Patterns of Vulnerability
The longitudinal analysis presented in the Section 5.2 demonstrates
that most browser families are either consistently vulnerable to
the same number of attacks or, worse, become more vulnerable
with every passing year. At the same time, one may still wonder
whether the vulnerabilities that Hindsight allows us to quantify
were “always” part of a browser’s code (present in the oldest version
of the browser available in our dataset) or were added during some
0%25%50%75%100%12345678910111213Rank of installs% of affected APKsEvent routingURLAddress barSecurity indicatorsContentAny0%25%50%75%100%12345678910111213Rank of installs% of affected APKs0%25%50%75%100%ChromeFirefoxUC BrowserOperaDolphinOpera MiniPopular browsers0%25%50%75%100%FaviconplacementMixed contentwarning (image)Mixed contentload (image)Self−signedwebsite loadMixed contentwarning (JS)Mixed contentload (JS)JS executionin self−signedwebsiteTest description% of affected APKs/ browsersAPKsBrowser familiesto develop an emulation-backed version of Hindsight, experiment
with a large array of emulated devices and configurations, and
compare our results with the ones reported in this paper.
A separate limitation is that all security assessments are based
on our collection of 27 ABBs automatically evaluated by Hindsight.
It is definitely possible that browsers that are performing poorly
against our evaluated attacks would perform better in the presence
of a different set of tests. As such, we do not intend for our results
to be used as an authoritative guide for identifying the most secure
mobile browser. Instead, we hope that our results will motivate the
vendors of mobile browsers to revisit the design of their UIs and
strengthen their browsers against attacks.
7 RELATED WORK
To the best of our knowledge this paper is the first systematic
study of the evolution of UI attacks in mobile browsers, spanning
thousands of browser versions and hundreds of browser families.
The motivation to design and build Hindsight came from realizing
that all the novel results published in prior work were destined
to always be outdated since the attacks were performed manually
against a limited number of browser families and versions. We
briefly discuss this prior work below.
Attacks against mobile browsers. In 2008, Niu et al. were the
first to identify the security problems associated with browsers
used in devices with small screens [30], well before the current
commercial success of smartphones. The authors evaluated the Sa-
fari mobile browser available in the original iPhone and the Opera
browser available in two Nintendo gaming consoles finding issues,
such as, URL truncation (browsers showing the beginning and end
of a long URL skipping the middle), the automatic hiding of the URL
bar by programmatically scrolling by a single pixel, or the altogether
absence of the URL bar. In 2010, Rydstedt et al. discovered that many
mobile versions of popular websites were lacking frame-busting
code and introduced “tapjacking”, a mobile equivalent of clickjack-
ing which could be abused to, among others, steal a home router’s
WPA keys [32]. Felt and Wagner, in 2011, investigated the threat of
phishing attacks on mobile devices by exploring the transitions be-
tween websites and apps and the difficulty of ascertaining whether
a login prompt originates from a trusted website/app versus a mali-
cious one that is spoofing a trusted one [15]. Many of our attack
building blocks were inspired by the work of Amrutkar et al. [2–5]
who manually evaluated ten smartphone and three tablet browsers
and compared them to traditional desktop browsers. The authors
identified the issues of unexpected event routing, the ballooning of
iframes, the absence of a URL bar after an iframe-originating redi-
rection, and inconsistencies in terms of security indicator presence
and location, despite W3C guidelines [38].
WebView Security. Both Android and iOS provide a WebView
class (UIWebView in iOS) which apps can use to show web content
to users. Prior research has identified a number of security issues
with WebView APIs that allow both malicious apps to attack be-
nign websites as well as malicious websites to abuse benign but
vulnerable apps that render them using WebView [10, 26, 27, 29].
In our work, we chose to treat each mobile browser as a black box,
launching generic UI attacks and observing their outcome. As such,
Figure 11: Patterns of vulnerability for browser families
allows for continuous vulnerability assessment. Fortunately, next
to the aforementioned undesirable patterns, we also observe stable
trends of desirable “yesNO” and “NO” patterns for particular ABBs.
6 DISCUSSION
Summary of findings. The results that we were able to retrieve
using Hindsight against 2,324 browser APKs belonging to 128 dif-
ferent browser paint a fairly disconcerting picture of mobile web
security. We found that 98.6% of the evaluated APKs were vulner-
able to at least one of our 27 attack building blocks, with 50% of
APKs being vulnerable to more than 12 building blocks (Section 5.1).
By performing longitudinal measurements, we observed that many
browsers become less secure as years go by (Section 5.2) and that
popular browsers are often more vulnerable to our building blocks
than less popular ones (Section 5.3).
Ethical Disclosure. Even though all of our ABBs can be used to
craft attacks against users, they are not vulnerabilities that could
lead to drive-by exploitations. That is, most of our ABBs can be used
to increase the success chances of social engineering attacks (like
phishing or the user-initiated installation of malware) but they can
not be weaponized to compromise mobile devices automatically at a
large scale. Despite not fitting the mold of traditional vulnerabilities,
we are currently in the process of reaching out to the vendors of
mobile browsers to ethically disclose our findings and understand
to what extent they are aware of the uncovered issues and how
they intend to address them.
Limitations and Future Work. Hindsight is currently utilizing
real smartphones, each of which is running a different version of
the Android operating system and SDK version. Even though this
choice was a conscious one motivated by the desire to experiment
on real devices so that our findings are free from emulation artifacts,
we also understand the limitations of our approach in terms of
scalability, i.e. how fast can we evaluate any given browser against a
series of attacks, and in terms of applicability, i.e. do the same attacks
work against the same browser when that is installed on a tablet
that is equipped with a larger screen? For these reasons, we intend
Evolution Pattern:UnknownnoYESnoyesNOyesnoYESyesNONOYESContentSecurity indicatorsURL032649612803264961280326496128109872322212027262524Attack building block #Event Routing0326496128  6  5  4  3  2  1Address bar0326496128191817161514131211Number of affected browser familieswhile WebView-specific vulnerabilities could be straightforwardly
added as new attack building blocks to Hindsight, we consider them
out of scope for this specific paper.
Inconsistencies across desktop browsers. Researchers have in
the past identified inconsistencies in the implementations of secu-
rity mechanisms across browsers which could be abused to attack
them. Singh et al. investigated access control inconsistencies among
popular browsers in terms of principal labeling and its effect on,
among others, the Same-Origin Policy [35]. Zheng et al. investigated
the handling of cookies in modern browsers and identified imple-
mentation quirks in the cookie handling and cookie storing code of
certain browsers that enabled network attackers to perform cookie
injection attacks [39]. Hothersall-Thomas et al. presented Browser-
Audit, a website that performs 400 checks of security mechanisms
and used it to test the correctness of modern desktop browsers [23].
Even though Hindsight and BrowserAudit are conceptually similar,
our work focuses on testing thousands of mobile browser versions
(with all the difficulties associated with automatically installing
them and dealing with splash screens, ads, and crashes) and UI
attacks whose success cannot be ascertained by the attack website,
requiring us to develop the mechanisms discussed in Section 4.
8 CONCLUSION
As mobile devices increase in popularity and, for some, replace
the need for a desktop computer, it is important that we under-
stand their security posture and what areas we need to improve
upon. In this paper, we investigated the seemingly forgotten prob-
lem of UI vulnerabilities in mobile browsers where attackers can
take advantage of mobile browser idiosyncrasies to better social
engineer users and exfiltrate their data. Motivated by the desire
to move away from snapshot-based measurements (i.e., where re-
searchers study what is available to them at the time of their experi-
ments) we collected thousands of mobile browser versions spanning
hundreds of browser families and developed Hindsight, the first
dynamic-analysis, browser-agnostic testing framework for gauging
the vulnerability of mobile web browsers to UI attacks. Using Hind-
sight, we were able to quantify the vulnerability of mobile browsers
through time, finding, among others, that i) the vast majority of web
browsers are vulnerable to one or more of our evaluated attacks,
ii) mobile browsers seem to be getting less secure as years go by,
and iii) the popularity of a browser and security are not necessarily
correlated. Our hope is that this study will motivate the building
of more security-friendly UIs for mobile web browsers and the
reviewing of some of the existing design decisions that attackers
can straightforwardly abuse to victimize users.
Acknowledgments:
We thank the reviewers for their valuable feedback. This work
was supported by the Office of Naval Research (ONR) under grant
N00014-17-1-2541 and by the National Science Foundation (NSF)
under grants CNS-1617593 and CNS-1527086. Some of our exper-
iments were conducted with equipment purchased through NSF
CISE Research Infrastructure Grant No. 1405641.
Any opinions, findings, and conclusions or recommendations
expressed in this material are those of the authors and do not
necessarily reflect the views of the Office of Naval Research or the
National Science Foundation.
REFERENCES
[1] AdGuard. 2009–2017. ad blocker and anti-tracker. https://adguard.com/en/
welcome.html. (2009–2017).
[2] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2011. On
the Disparity of Display Security in Mobile and Traditional Web Browsers. Technical
Report. Georgia Institute of Technology.
[3] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2012.
VulnerableMe: Measuring systemic weaknesses in mobile browser security. In
International Conference on Information Systems Security. Springer, 16–34.
[4] Chaitrali Amrutkar, Patrick Traynor, and Paul C Van Oorschot. 2012. Measur-
ing SSL indicators on mobile browsers: Extended life, or end of the road?. In
International Conference on Information Security. Springer, 86–103.
[5] Chaitrali Amrutkar, Patrick Traynor, and Paul C Van Oorschot. 2015. An empirical
evaluation of security indicators in mobile Web browsers. IEEE Transactions on
Mobile Computing 14, 5 (2015), 889–903.
[6] Chaitrali Vijay Amrutkar. 2014. Towards secure web browsing on mobile devices.
Ph.D. Dissertation. Georgia Institute of Technology.
[7] Zineb Ait Bahajji and Gary Illyes. 2014. Google Webmaster Blog: HTTPS
https://webmasters.googleblog.com/2014/08/
as a ranking signal.
https-as-ranking-signal.html. (2014).
[8] Bugzilla@Mozilla. 2010. URL Display of Title instead of the URL Enables Phishing
Attacks via URL Spoofing. https://bugzilla.mozilla.org/show_bug.cgi?
id=605206. (2010).
[9] Ping Chen, Nick Nikiforakis, Christophe Huygens, and Lieven Desmet. 2013. A
Dangerous Mix: Large-scale analysis of mixed-content websites. In Proceedings
of the 16th Information Security Conference (ISC).
[10] Erika Chin and David Wagner. 2013. Bifocals: Analyzing webview vulnerabili-
ties in android applications. In International Workshop on Information Security
Applications. Springer, 138–159.
[11] CVE 2014. CVE-2014-6041 : The Android WebView in Android before 4.4 allows
remote attackers to bypass the Same Origin Policy via a crafted attributes. http:
//www.cvedetails.com/cve/CVE-2014-6041/. (2014).
[12] Peter Dolanjski and Tanvi Vyas. 2017. Mozilla Security Blog: Communicating the
Dangers of Non-Secure HTTP. https://blog.mozilla.org/security/2017/
01/20/communicating-the-dangers-of-non-secure-http/. (2017).
[13] Tesseract Open Source OCR Engine. 2017. Google. https://github.com/
tesseract-ocr/tesseract. (2017).
[14] Adrienne Porter Felt, Robert W Reeder, Alex Ainslie, Helen Harris, Max Walker,
Christopher Thompson, Mustafa Embre Acer, Elisabeth Morant, and Sunny Con-
solvo. 2016. Rethinking connection security indicators. In Twelfth Symposium on
Usable Privacy and Security (SOUPS).
[15] Adrienne Porter Felt and David Wagner. 2011. Phishing on mobile devices. In
Proceedings of the Web 2.0 Security and Privacy Workshop.
[16] Anthony Y Fu, Xiaotie Deng, Liu Wenyin, and Greg Little. 2006. The methodology
and an application to fight against unicode attacks. In Proceedings of the second
symposium on Usable privacy and security. ACM, 91–101.
[17] Google Play store. 2017. CM Browser - Adblock Download. https://play.
google.com/store/apps/details?id=com.ksmobile.cb. (2017).
[18] Google Play store. 2017. Dolphin - Best Web Browser. https://play.google.
com/store/apps/details?id=mobi.mgeek.TunnyBrowser. (2017).
[19] Google Play store. 2017. Google Play store: Fastest Mini Browser. https://
play.google.com/store/apps/details?id=com.mmbox.browser. (2017).
[20] Google Play store. 2017. Google Play store: Ghostery Privacy Browser.
https://play.google.com/store/apps/details?id=com.ghostery.
android.ghostery. (2017).
[21] Google Play store. 2017. Opera Mini - fast web browser. https://play.google.
com/store/apps/details?id=com.opera.mini.native. (2017).
[22] Google Play store. 2017. UC Browser - Fast Download. https://play.google.
com/store/apps/details?id=com.UCMobile.intl. (2017).
[23] Charlie Hothersall-Thomas, Sergio Maffeis, and Chris Novakovic. 2015. Browser-
Audit: Automated Testing of Browser Security Features. In Proceedings of the
International Symposium on Software Testing and Analysis (ISSTA).
Android
Update.
[24] Jason
Kersey.
2013.
Chrome
for
http://googlechromereleases.blogspot.com/2013/11/
chrome-for-android-update.html. (2013).
(2017).
[25] Let’s Encrypt - Free SSL/TLS Certificates. 2017. https://letsencrypt.org/.
[26] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin. 2011. Attacks
on WebView in the Android system. In Proceedings of the 27th Annual Computer
Security Applications Conference. ACM, 343–352.
[27] Tongbo Luo, Xing Jin, Ajai Ananthanarayanan, and Wenliang Du. 2013. Touch-
jacking attacks on web in android, ios, and windows phone. In Foundations and
Practice of Security. Springer, 227–243.
[28] Moxie Marlinspike. 2009. More tricks for defeating SSL in practice. Black Hat
[29] Matthias Neugschwandtner, Martina Lindorfer, and Christian Platzer. 2013. A
USA (2009).
View to a Kill: WebView Exploitation.. In LEET.
[30] Yuan Niu, Francis Hsu, and Hao Chen. 2008. iPhish: Phishing Vulnerabilities on
Consumer Electronics. In Proceedings of the Usability, Psychology, and Security
Workshop (UPSEC).
[31] Google Cloud Platform. 2017. Cloud Vision API Documentation. https://cloud.
google.com/vision/docs/. (2017).
[32] Gustav Rydstedt, Baptiste Gourdin, Elie Bursztein, and Dan Boneh. 2010. Framing
attacks on smart phones and dumb routers: tap-jacking and geo-localization
attacks. In Proceedings of the 4th USENIX Workshop On Offensive technologies
(WOOT). USENIX Association, 1–8.
Google Security Blog: Moving towards a
more
https://security.googleblog.com/2016/09/
moving-towards-more-secure-web.html. (2016).
[34] Selenium. 2017. Selenium Webdriver. http://www.seleniumhq.org/projects/
webdriver/. (2017).
[33] Emily Schechter. 2016.
secure web.
[35] Kapil Singh, Alexander Moshchuk, Helen J Wang, and Wenke Lee. 2010. On the
incoherencies in web browser access control policies. In Security and Privacy (SP),
2010 IEEE Symposium on. IEEE, 463–478.
[36] Suphannee Sivakorn, Jason Polakis, and Angelos D. Keromytis. 2016. The Cracked
Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information. In
In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P ’16).
[37] Joshua Sunshine, Serge Egelman, Hazim Almuhimedi, Neha Atri, and Lorrie Faith
Cranor. 2009. Crying Wolf: An Empirical Study of SSL Warning Effectiveness..
In USENIX security symposium. 399–416.
[38] W3C. 2010. Web Security Context: User Interface Guidelines. https://www.w3.
org/TR/wsc-ui/. (2010).
[39] Xiaofeng Zheng, Jian Jiang, Jinjin Liang, Haixin Duan, Shuo Chen, Tao Wan, and
Nicholas Weaver. 2015. Cookies Lack Integrity: Real-World Implications. In 24th
USENIX Security Symposium (USENIX Security 15).
[40] Yuchen Zhou and David Evans. 2010. Why aren’t HTTP-only cookies more
widely deployed. Proceedings of 4th Web 2 (2010).