头人进程会使用更多的计算资源，尤其是网络容量。这是因为，领头人进程会发送带有
我们已经讨论过很多分布式共识系统采用领头人机制来提高性能。然而这里要注意，领
图23-11：领头人进程放置在一起会导致不均衡的带宽使用
少了33%
出带宽占用很大
领头人运行的数据中心外
高数
副本
据中心中运行每个共识组
高度分片的共识系统在三个
共识组集群
Leader
分布式共识系统的部署
共识组集群
共识组集群
Repica
Replica
267
30
---
## Page 310
310
洋的流量对比的时候。如果考虑跨越北美洲和欧洲部署的某个系统：试图平均分布副本
地理位置的分布可能会给这种做法造成一定难处，尤其是当跨大陆与跨大西洋和跨太平
的系统性能，不管该组的领头人被放在了何处（在无领头人的协议中，各个成员性能也
的情况下（如负载、硬件、网络性能等），这种分布应该会在各个地区都形成相对固定
当决定在哪里放置共识组的副本时，另外一个重要因素是要考虑地理位置的分布（或者
然而，这种场景也可能由于自动化领头人选举机制造成，例如：
图23-12：当放置在一起的领头人进程同时迁移时，
中心的网络流量会突然增大。这时如果发现数据中心之间的带宽不够，那么就太不幸了。
268
应该类似）。
一个做法是将副本分布得最均匀化，使得副本之间的RTT基本类似。在其他因素都相同
更准确地说，副本直接的网络延迟）对性能的影响。
仲裁组的组成
·领头人选举算法可能会优先运行时间长的进程。如果软件更新是按数据中心来发
·某个算法可能会将领头人置于性能最好的机器上。这里的问题在于，如果三个数
。
其中一个出现故障
中心中运行每个共识组的副本，
高度分片的共识系统在三个数据
Shared con
布的，那么长时间运行的进程很可能会聚集在一起。
性，以及机器的能力。
有剧烈的网络流量变动。为了避免这个问题，该算法必须同时考虑到分布的均衡
据中心中的某个数据中心有更好的机器，那么当这个数据中心出现问题时，将会
能会采用这个信息。
客户端通常在领头人距离更近时，有更好的延迟。那么选择领头人位置的算法可
第23章
mnsuscausters
管理关键状态：利用分布式共识来提高可靠性
网络流量的使用率会大幅变化。
共识集群
心
共识集群
Leader
带宽不足
经考验的数据中心：出现
领头人进程迁移到一个未
---
## Page 311
央组仍有两个可用副本，仍可以参与仲裁。
这意味着一个副本可以在中央组中出现故障，而不会对系统整体性能产生影响，因为中
每组3个。仲裁过程可以由多数组完成，而每个组只有在多数成员可用的情况下才可用。
况下，层级型的仲裁过程可能更有用。如图23-15所示，9个副本可能会被部署为3组，
这种情况是简单多数型仲裁过程在成员RTT非常不同的时候的一个关键弱点。在这种情
物理距离和网络延迟都会受到很大影响。
中部的RTT影响，也就是比之前有50%的增加。在这种情况下，距离最近的仲裁组的
中部到东部的RTT影响，或者欧洲到东海岸的RTT影响，现在则会成为受欧洲到美国
如图23-14所示，该副本的故障可能会导致系统延迟大幅改变：以前系统主要是受美国
图23-13：两个重叠的仲裁组使用一个副本作为连接
仲裁组的关键轴，将两个组连接在了一起。
欧洲起始的共识过程可以仅仅跟美国东海岸的副本完成。东海岸的副本就像两个可能的
这样分布可基本保证共识过程在北美洲的副本上完成，而不需要等待欧洲的回复。而从
个副本，将其中2个副本放置于美国中心地带，1个放置于东海岸，另外两个放置于欧洲，
然而，如图23-13所示，为了将系统流量分布得更为均匀，系统设计者可以考虑采用
路速度慢。无论如何，在某个区域中的操作都要跨越大西洋进行一次共识操作。
是不可能的，系统中永远会有一段延迟高的链路，因为跨大西洋的链路要比跨大洲的链
分布式共识系统的部署
269
312
311
---
## Page 312
270
[Bur06]、[Cor12]和[Shu13])。所有的重要生产系统为了更好地检测故障或者进行故障
正如上文所述，分布式共识算法是很多Google关键系统的核心（参见文献[Ana13]、
对分布式共识系统的监控
统中总共的进程数量不会改变。
填充的系统中，我们可以通过使用更少的共识组来应对这种成本。这样的策略意味着系
当然，运行更多数量的副本需要更高的成本。在高度分片、大量读操作可以被副本服务
图23-15：层级型仲裁过程可以用来减少对中央副本的依赖程度
图23-14：链接性副本的故障会立刻导致任何仲裁组的RTT大幅增加
第23章
管理关键状态：利用分布式共识来提高可靠性
---
## Page 313
为了更好地理解系统性能，以及帮助进行故障排查，我们还要监控以下几点：
共识交易记录数字
领头人角色变化的次数
领头人角色是否存在
始终落后的副本
每个共识组中的成员数量，以及每个成员的状态（健康或不健康）
下几项。
排除，都需要监控。经验告诉我们，分布式共识系统的某些区域需要特别关注，包括以
吞吐量和延迟
系统中的提议数量，以及系统中被接受的提议数量
某个进程可能仍在运行，但是却由于某种原因（硬件因素）无法工作。
理解。
虽然这并不具体针对某个分布式共识系统，
这些数字可以显示当前系统是否在正确运行。
识交易数字来代表目前系统的进度。这个数字在系统健康时应该随着时间不断增长。
系统管理员需要知道目前系统是否正在处理交易。大多数共识算法采用一个递增的共
视图编号的降低，可能预示着软件中的一个严重Bug。
改变意味着领头人正在快速变换（flapping），可能是由于网络连接问题导致的。而
标记领头人角色的变动，所以这可能是一个比较好的监控指标。领头人角色的快速
头人角色变化的次数应该被监控。共识算法通常使用新的租约或者新的视图编号来
领头人角色的快速变化会影响那些使用稳定领头人角色的共识系统的性能，所以领
头人存在，因为如果系统不存在领头人角色，系统则不可用。
基于类似复合Paxos算法的系统使用领头人角色，该角色必须被监控，
状态，或者是当前组的领头人角色。
处恢复状态信息，或者相比仲裁组成员始终处于落后状态，或者目前处于完全参与
健康的共识组成员可能仍然处于不同的状态中。某个组成员可能是在启动时从同伴
·针对提议接收时间的延迟分布。
系统每秒处理的字节数。
接收者在持久化日志上花费的时间。
系统不同部分之间观察到的网络延迟
但这些特性都应该被系统管理员监控和
对分布式共识系统的监控
，以便保障领
313
---
## Page 314
314
272
方案都是系统中的一枚定时炸弹，随时可能爆炸。
头人选举、关键共享状态，或者分布式锁的时候，
题类型，以及使用类似心跳机制而不是分布式共识机制所造成的问题。每当读者见到领
如果读者仅仅从本章中学到一件事，那么就应该记住分布式共识系统可以用来解决的问
章则会使读者不管在使用今天可用的分布式协调工具时，以及未来的软件时都能用得上。
技术正在飞速发展，这些信息会很快过时，但是这里讨论的基础知识，以及所引用的文
本章故意避开了关于特定算法、协议和实现的深入讨论。分布式协调系统和对应的底层
以及这些系统对应的性能特点和部分运维重点。
本章我们探索了分布式共识问题的定义，同时展示了几种常见的分布式共识系统架构，
小结
第23章管理关键状态：利用分布式共识来提高可靠性
一定要想起分布式共识：任何其他的
---
## Page 315
注1本文曾在ACMQueue（2015年3月，第13期，第3篇）中发表。
可以执行很多种类型的任务，例如垃圾回收类任务和周期性的数据分析任务。最常见的
注2这里不会讨论每个具体任务自身原因导致的失败。
的任务来说却不是这样。例如，某个垃圾回收任务定于每5分钟运行一次，