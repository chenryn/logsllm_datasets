to the notification of registered callback routines.
To obtain this call stack, use WinDbg to set a breakpoint (bp) on  
nt!PspCallProcessNotifyRoutines(), the internal kernel function that notifies 
drivers with registered callbacks of process-creation events. When the 
breakpoint is hit, the k command returns the call stack for the process 
under which the break occurred.
2: kd> bp nt!PspCallProcessNotifyRoutines
2: kd> g
Breakpoint 0 hit
nt!PspCallProcessNotifyRoutines:
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   35
fffff803`4940283c 48895c2410  
mov 
qword ptr [rsp+10h],rbx
1: kd> k
 # Child-SP  
RetAddr  
Call Site
00 ffffee8e`a7005cf8 fffff803`494ae9c2  
nt!PspCallProcessNotifyRoutines
01 ffffee8e`a7005d00 fffff803`4941577d  
nt!PspInsertThread+0x68e
02 ffffee8e`a7005dc0 fffff803`49208cb5  
nt!NtCreateUserProcess+0xddd
03 ffffee8e`a7006a90 00007ffc`74b4e664  
nt!KiSystemServiceCopyEnd+0x25
04 000000d7`6215dcf8 00007ffc`72478e73  
ntdll!NtCreateUserProcess+0x14
05 000000d7`6215dd00 00007ffc`724771a6  
KERNELBASE!CreateProcessInternalW+0xfe3
06 000000d7`6215f2d0 00007ffc`747acbb4  
KERNELBASE!CreateProcessW+0x66
07 000000d7`6215f340 00007ff6`f4184486  
KERNEL32!CreateProcessWStub+0x54
08 000000d7`6215f3a0 00007ff6`f4185b7f  
cmd!ExecPgm+0x262
09 000000d7`6215f5e0 00007ff6`f417c9bd  
cmd!ECWork+0xa7
0a 000000d7`6215f840 00007ff6`f417bea1  
cmd!FindFixAndRun+0x39d
0b 000000d7`6215fce0 00007ff6`f418ebf0  
cmd!Dispatch+0xa1
0c 000000d7`6215fd70 00007ff6`f4188ecd  
cmd!main+0xb418
0d 000000d7`6215fe10 00007ffc`747a7034  
cmd!__mainCRTStartup+0x14d
0e 000000d7`6215fe50 00007ffc`74b02651  
KERNEL32!BaseThreadInitThunk+0x14
0f 000000d7`6215fe80 00000000`00000000  
ntdll!RtlUserThreadStart+0x21
Listing 3-1: A process-creation call stack
Whenever a user wants to run an executable, cmd.exe calls the 
cmd!ExecPgm() function. In this call stack, we can see this function calling 
the stub used to create a new process (at output line 07). This stub ends up 
making the syscall for ntdll!NtCreateUserProcess(), where control is transi-
tioned to the kernel (at 04).
Now notice that, inside the kernel, another function is executed (at 00). 
This function is responsible for letting every registered callback know that a 
process is being created.
Registering a Process Callback Routine
To register process callback routines, EDRs use one of the following two 
functions: nt!PsSetCreateProcessNotifyRoutineEx() or nt!PsSetCreateProcess
NotifyRoutineEx2(). The latter can provide notifications about non-Win32 
subsystem processes. These functions take a pointer to a callback function 
that will perform some action whenever a new process is created or termi-
nated. Listing 3-2 demonstrates how a callback function is registered.
NTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING pRegPath)
{
NTSTATUS status = STATUS_SUCCESS;
--snip--
status = 1 PsSetCreateProcessNotifyRoutineEx2(
PsCreateProcessNotifySubsystems,
(PVOID)ProcessNotifyCallbackRoutine,
FALSE
);
--snip--
}
Evading EDR (Early Access) © 2023 by Matt Hand
36   Chapter 3
2 void ProcessNotifyCallbackRoutine(
 PEPROCESS pProcess,
 HANDLE hPid,
 PPS_CREATE_NOTIFY_INFO pInfo)
{
 if (pInfo)
 {
 }
}
Listing 3-2: Registering a process-creation callback routine
This code registers the callback routine 1 and passes three arguments 
to the registration function. The first, PsCreateProcessNotifySubsystems, indi-
cates the type of process notification that is being registered. At the time 
of this writing, “subsystems” is the only type that Microsoft documents. 
This value tells the system that the callback routine should be invoked for 
processes created across all subsystems, including Win32 and Windows 
Subsystem for Linux (WSL).
The next argument defines the entry point of the callback routine to 
be executed when the process is created. In our example, the code points to 
the internal ProcessNotifyCallbackRoutine() function. When process creation 
occurs, this callback function will receive information about the event, 
which we’ll discuss momentarily.
The third argument is a Boolean value indicating whether the callback 
routine should be removed. Because we’re registering the routine in this 
example, the value is FALSE. When we unload the driver, we’d set this to TRUE 
to remove the callback from the system. After registering the callback rou-
tine, we define the callback function itself 2.
Viewing the Callback Routines Registered on a System
You can use WinDbg to see a list of the process callback routines on your 
system. When a new callback routine is registered, a pointer to the routine is 
added to an array of EX_FAST_REF structures, which are 16-byte aligned pointers 
stored in an array at nt!PspCreateProcessNotifyRoutine, as shown in Listing 3-3.
1: kd> dq nt!PspCreateProcessNotifyRoutine
fffff803`49aec4e0 ffff9b8f`91c5063f ffff9b8f`91df6c0f
fffff803`49aec4f0 ffff9b8f`9336fcff ffff9b8f`9336fedf
fffff803`49aec500 ffff9b8f`9349b3ff ffff9b8f`9353a49f
fffff803`49aec510 ffff9b8f`9353acdf ffff9b8f`9353a9af
fffff803`49aec520 ffff9b8f`980781cf 00000000`00000000
fffff803`49aec530 00000000`00000000 00000000`00000000
fffff803`49aec540 00000000`00000000 00000000`00000000
fffff803`49aec550 00000000`00000000 00000000`00000000
Listing 3-3: An array of EX_FAST_REF structures containing the addresses of process-cre-
ation callback routines
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   37
Listing 3-4 shows a way of iterating over this array of EX_FAST_REF struc-
tures to enumerate drivers that implement process-notification callbacks.
1: kd>  dx ((void**[0x40])&nt!PspCreateProcessNotifyRoutine)
.Where(a  => a != 0)
.Select(a  => @$getsym(@$getCallbackRoutine(a).Function))
 [0]  
: nt!ViCreateProcessCallback (fffff803`4915a2a0)
 [1]  
: cng!CngCreateProcessNotifyRoutine (fffff803`4a4e6dd0)
 [2]  
: WdFilter+0x45e00 (fffff803`4ade5e00)
 [3]  
: ksecdd!KsecCreateProcessNotifyRoutine (fffff803`4a33ba40)
 [4]  
: tcpip!CreateProcessNotifyRoutineEx (fffff803`4b3f1f90)
 [5]  
: iorate!IoRateProcessCreateNotify (fffff803`4b95d930)
 [6]  
: CI!I_PEProcessNotify (fffff803`4a46a270)
 [7]  
: dxgkrnl!DxgkProcessNotify (fffff803`4c116610)
 [8]  
: peauth+0x43ce0 (fffff803`4d873ce0)
Listing 3-4: Enumerating registered process-creation callbacks
Here, we can see some of the routines registered on a default system. 
Note that some of these callbacks do not perform security functions. 
For instance, the one beginning with tcpip is used in the TCP/IP driver. 
However, we do see that Microsoft Defender has a callback registered: 
WdFilter+0x45e00. (Microsoft doesn’t publish full symbols for the WdFilter.
sys driver.) Using this technique, we could locate an EDR’s callback routine 
without needing to reverse-engineer Microsoft’s driver.
Collecting Information from Process Creation
Once an EDR registers its callback routine, how does it access information? 
Well, when a new process is created, a pointer to a PS_CREATE_NOTIFY_INFO 
structure is passed to the callback. You can see the structure defined in 
Listing 3-5.
typedef struct _PS_CREATE_NOTIFY_INFO {
 SIZE_T 
 Size;
  union {
  ULONG Flags;
  struct {
   ULONG FileOpenNameAvailable : 1;
   ULONG IsSubsystemProcess : 1;
   ULONG Reserved : 30;
  };
  };
  HANDLE 
 ParentProcessId;
  CLIENT_ID  
 CreatingThreadId;
  struct _FILE_OBJECT *FileObject;
  PCUNICODE_STRING  ImageFileName;
  PCUNICODE_STRING  CommandLine;
  NTSTATUS  
 CreationStatus;
} PS_CREATE_NOTIFY_INFO, *PPS_CREATE_NOTIFY_INFO;
Listing 3-5: The definition of the PS_CREATE_NOTIFY_INFO structure
Evading EDR (Early Access) © 2023 by Matt Hand
38   Chapter 3
This structure contains a significant amount of valuable data relating to 
process-creation events on the system. This data includes:
ParentProcessId  The parent process of the newly created process. This 
isn’t necessarily the one that created the new process.
CreatingThreadId  Handles to the unique thread and process responsible 
for creating the new process.
FileObject  A pointer to the process’s executable file object (the image 
on disk).
ImageFileName  A pointer to a string containing the path to the newly 
created process’s executable file.
CommandLine  The command line arguments passed to the creating process.
FileOpenNameAvailable  A value that specifies whether the ImageFileName 
member matches the filename used to open the new process’s execut-
able file.
One way that EDRs commonly interact with the telemetry returned 
from this notification is through Sysmon’s Event ID 1, the event for process 
creation, shown in Figure 3-1.
Figure 3-1: Sysmon Event ID 1 showing process  
creation
In this event, we can see some of the information from the PS_CREATE 
_NOTIFY_INFO structure passed to Sysmon’s callback routine. For example, the 
Image, CommandLine, and ParentProcessId properties in the event translate to 
the ImageFileName, CommandLine, and ParentProcessId members of the structure, 
respectively.
You may be wondering why there are so many more properties in this 
event than there are in the structure received by the callback. The driver col-
lects these supplemental pieces of information by investigating the context of 
the thread under which the event was generated and expanding on members 
of the structure. For instance, if we know the ID of the process’s parent, we 
can easily find the parent’s image path to populate the ParentImage property.
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   39
By leveraging the data collected from this event and the associated struc-
ture, EDRs can also create internal mappings of process attributes and relation-
ships in order to detect suspicious activity, such as Microsoft Word spawning a 
powershell.exe child. This data could also provide the agent with useful context 
for determining whether other activity is malicious. For example, the agent 
could feed process command line arguments into a machine learning model to 
figure out whether the command’s invocation is unusual in the environment.
Thread Notifications
Thread-creation notifications are somewhat less valuable than process-cre-
ation events. They work relatively similarly, occurring during the creation 
process, but they receive less information. This is true despite the fact that 
thread creation happens substantially more often; after all, nearly every 
process supports multithreading, meaning that there will be more than one 
thread-creation notification for every process creation.
Although thread-creation callbacks pass far less data to the callback, 
they do provide the EDR with another datapoint against which detections 
can be built. Let’s explore them a little further.
Registering a Thread Callback Routine
When a thread is created or terminated, the callback routine receives 
three pieces of data: the ID of the process to which the thread belongs, the 
unique thread ID, and a Boolean value indicating whether the thread is 
being created. Listing 3-6 shows how a driver would register a callback rou-
tine for thread-creation events.
NTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING pRegPath)
{
NTSTATUS status = STATUS_SUCCESS;
--snip--
 1 status = PsSetCreateThreadNotifyRoutine(ThreadNotifyCallbackRoutine);
--snip--
}
void ThreadNotifyCallbackRoutine(
HANDLE hProcess,
HANDLE hThread,
BOOLEAN bCreate)
{
 2 if (bCreate)
{
--snip--
}
}
Listing 3-6: Registration of a thread-creation notification routine
Evading EDR (Early Access) © 2023 by Matt Hand
40   Chapter 3
As with process creation, an EDR can receive notifications about thread 
creation or termination via its driver by registering a thread-notification 
callback routine with either nt!PsSetCreateThreadNotifyRoutine() or the 
extended nt!PsSetCreateThreadNotifyRoutineEx(), which adds the ability to 
define the notification type.
This example driver first registers the callback routine 1, passing in 
a pointer to the internal callback function, which receives the same three 
pieces of data passed to process callback routines. If the Boolean indicat-
ing whether the thread is being created or terminated is TRUE, the driver 
performs some action defined by the developer 2. Otherwise, the callback 
would simply ignore the thread events, as thread-termination events (which 
occur when a thread completes its execution and returns) are generally less 
valuable for security monitoring.
Detecting Remote Thread Creation
Despite providing less information than process-creation callbacks, 
thread-creation notifications offer the EDR data about something other 
callbacks can’t detect: remote thread creation. Remote thread creation occurs 
when one process creates a thread inside another process. This technique 
is core to a ton of attacker tradecraft, which often relies on changing the 
execution context (as in going from user 1 to user 2). Listing 3-7 shows 
how an EDR could detect this behavior with its thread-creation callback 
routine.
void ThreadNotifyCallbackRoutine(
HANDLE hProcess,
HANDLE hThread,
BOOLEAN bCreate)
{
if (bCreate)
{
 1 if (PsGetCurrentProcessId() != hProcess)
  {
--snip--
  }
}
}
Listing 3-7: Detecting remote thread creation
Because the notification executes in the context of the process creat-
ing the thread, developers can simply check whether the current process 
ID matches the one passed to the callback routine 1. If not, the thread 
is being created remotely and should be investigated. That’s it: a huge 
capability, provided through one or two lines of code. It doesn’t get much 
better than that. You can see this feature implemented in real life through 
Sysmon’s Event ID 8, shown in Figure 3-2. Notice that the SourceProcessId 
and TargetProcessId values differ.
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   41
Figure 3-2: Sysmon Event ID 8 detecting  
remote thread creation
Of course, remote thread creation happens under a number of legiti-
mate circumstances. One example is child process creation. When a process 
is created, the first thread executes in the context of the parent process. To 
account for this, many EDRs simply disregard the first thread associated 
with a process.
Certain internal operating system components also perform legitimate 
remote thread creation. An example of this is Windows Error Reporting 
(werfault.exe). When an error has occurred on the system, the operating 
system spawns werfault.exe as a child of svchost.exe (specifically, the WerSvc 
service) and then injects into the faulting process.
Thus, the fact that a thread was created remotely doesn’t automatically 
make it malicious. To determine this, the EDR has to collect supplemental 
information, as shown in Sysmon Event ID 8.
Evading Process- and Thread-Creation Callbacks
Process and thread notifications have the most associated detections of all 
callback types. This is partly due to the fact that the information they pro-
vide is critical to most process-oriented detection strategies and is used by 
almost every commercial EDR product. They’re also generally the easiest to 
understand. This isn’t to say that they’re also easy to evade. However, there 
is no shortage of procedures we can follow to increase our chances of slip-
ping through the cracks somewhere.
Command Line Tampering
Some of the most commonly monitored attributes of process-creation 
events are the command line arguments with which the process was 
invoked. Certain detection strategies are even built entirely around spe-
cific command line arguments associated with a known offensive tool or 
piece of malware.
EDRs can find arguments in the CommandLine member of the structure 
passed to a process-creation callback routine. When a process is created, 
its command line arguments are stored in the ProcessParameters field of 
its process environment block (PEB). This field contains a pointer to an 
RTL_USER_PROCESS_PARAMETERS structure that contains, among other things, 
Evading EDR (Early Access) © 2023 by Matt Hand
42   Chapter 3
a UNICODE_STRING with the parameters passed to the process at invocation. 
Listing 3-8 shows how we could manually retrieve a process’s command line 
arguments with WinDbg.
0:000> ?? @$peb->ProcessParameters->CommandLine.Buffer
wchar_t * 0x000001be`2f78290a