[26] S. Embleton, S. Sparks, and C. C. Zou. SMM rootkit: a new breed of OS in-
dependent malware. Security and Communication Networks, 6(12):1590–1605,
2013.
[27] C. W. Fletcher, M. v. Dijk, and S. Devadas. A Secure Processor Architecture for
Encrypted Computation on Untrusted Programs. In Proceedings of the Seventh
ACM Workshop on Scalable Trusted Computing, pages 3–8. ACM, 2012.
[28] J. A. Goguen and J. Meseguer. Security Policies and Security Models. In 1982
IEEE Symposium on Security and Privacy, Oakland, CA, USA, April 26-28, 1982,
pages 11–20, 1982.
[29] D. Grawrock. Dynamics of a Trusted Platform: A building block approach. Intel
[30] C. Hawblitzel, J. Howell, J. R. Lorch, A. Narayan, B. Parno, D. Zhang, and B. Zill.
Ironclad Apps: End-to-End Security via Automated Full-System Verification.
In Proceedings of the 11th USENIX conference on Operating Systems Design and
Implementation, pages 165–181, 2014.
[31] M. P. Herlihy and J. M. Wing. Linearizability: A Correctness Condition for
Concurrent Objects. ACM Transactions on Programming Languages and Systems,
12(3):463–492, July 1990.
[32] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo. Using Innovative
Instructions to Create Trustworthy Software Solutions. In Proceedings of the 2nd
International Workshop on Hardware and Architectural Support for Security and
Privacy, HASP, volume 13, 2013.
[33] Intel Software Guard Extensions Programming Reference. Available at https:
//software.intel.com/sites/default/files/329298-001.pdf.
[34] G. Irazoqui, T. Eisenbarth, and B. Sunar. S$A: A Shared Cache Attack That Works
across Cores and Defies VM Sandboxing – and Its Application to AES. In IEEE
Symposium on Security and Privacy, pages 591–604, May 2015.
[35] Joanna Rutkowska. Red Pill... or how to detect VMM using (almost) one CPU
instruction. https://github.com/Cr4sh/ThinkPwn.git.
[36] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe,
K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4:
Formal Verification of an OS Kernel. In Proceedings of the ACM SIGOPS 22nd
Symposium on Operating Systems Principles, SOSP ’09, pages 207–220, New York,
USA, 2009.
[37] P. C. Kocher. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS,
and Other Systems. In Proceedings of the 16th Annual International Cryptology
Conference on Advances in Cryptology, CRYPTO ’96, pages 104–113, London, UK,
UK, 1996. Springer-Verlag.
[38] S. Lee, M. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring Fine-grained
Control Flow Inside SGX Enclaves with Branch Shadowing. CoRR, abs/1611.06952,
2016.
[44] F. Liu and R. B. Lee. Random Fill Cache Architecture.
[39] R. Leslie-Hurd, D. Caspi, and M. Fernandez. Verifying Linearizability of Intel®
Software Guard Extensions. In Computer Aided Verification - 27th International
Conference, CAV 2015, San Francisco, CA, USA, July 18-24, 2015, Proceedings, Part
II, pages 144–160, 2015.
[40] X. Li, V. Kashyap, J. K. Oberg, M. Tiwari, V. R. Rajarathinam, R. Kastner, T. Sher-
wood, B. Hardekopf, and F. T. Chong. Sapper: A Language for Hardware-Level
Security Policy Enforcement. In Architectural Support for Programming Languages
and Operating Systems, ASPLOS ’14, Salt Lake City, UT, USA, March 1-5, 2014,
pages 97–112, 2014.
[41] X. Li, M. Tiwari, J. Oberg, V. Kashyap, F. T. Chong, T. Sherwood, and B. Hardekopf.
Caisson: A Hardware Description Language for Secure Information Flow. In
Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI 2011, San Jose, CA, USA, June 4-8, 2011, pages
109–120, 2011.
[42] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz.
Architectural support for copy and tamper resistant software. ACM SIGPLAN
Notices, 35(11):168–177, 2000.
[43] F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas, G. Heiser, and R. B. Lee. CATalyst:
Defeating Last-Level Cache Side Channel Attacks in Cloud Computing. In 2016
IEEE International Symposium on High Performance Computer Architecture (HPCA),
Mar 2016.
In 2014 47th Annual
IEEE/ACM International Symposium on Microarchitecture (MICRO). IEEE, 2014.
[45] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-Level Cache Side-Channel
Attacks Are Practical. In Proceedings of the 2015 IEEE Symposium on Security and
Privacy, pages 605–622, Washington, DC, USA, 2015. IEEE Computer Society.
[46] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic, J. Kubiatowicz, and
D. Song. Phantom: Practical oblivious computation in a secure processor. In
Proceedings of the 2013 ACM SIGSAC conference on Computer & communications
security, pages 311–324. ACM, 2013.
[47] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue,
and U. R. Savagaonkar. Innovative Instructions and Software Model for Isolated
Execution. HASP, 13:10, 2013.
Journal of Computer Security, 1:37–58, 1992.
The Power of Cache Attacks. CoRR, abs/1703.06986, 2017.
[50] G. Morrisett, G. Tan, J. Tassarotti, J. Tristan, and E. Gan. RockSalt: better, faster,
stronger SFI for the x86. In ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI ’12, Beijing, China - June 11 - 16, 2012, pages
395–404, 2012.
[51] T. Murray, D. Matichuk, M. Brassil, P. Gammie, T. Bourke, S. Seefried, C. Lewis,
X. Gao, and G. Klein. seL4: From General Purpose to a Proof of Information
Flow Enforcement. In Security and Privacy (SP), 2013 IEEE Symposium on, pages
415–429. IEEE, 2013.
[52] M. Neugschwandtner, C. Platzer, P. M. Comparetti, and U. Bayer. dAnubis -
Dynamic Device Driver Analysis Based on Virtual Machine Introspection. In De-
tection of Intrusions and Malware, and Vulnerability Assessment, 7th International
Conference, DIMVA 2010, Bonn, Germany, July 8-9, 2010. Proceedings, pages 41–60,
2010.
[53] T. Nipkow, L. C. Paulson, and M. Wenzel. Isabelle/HOL: A Proof Assistant for
Higher-Order Logic, volume 2283. Springer Science & Business Media, 2002.
[54] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. Van Herrewege, C. Huygens,
B. Preneel, I. Verbauwhede, and F. Piessens. Sancus: Low-cost Trustworthy
Extensible Networked Devices with a Zero-software Trusted Computing Base.
In Proceedings of the 22Nd USENIX Conference on Security, SEC’13, pages 479–494,
Berkeley, CA, USA, 2013. USENIX Association.
[55] O. Ohrimenko, F. Schuster, C. Fournet, A. Mehta, S. Nowozin, K. Vaswani, and
M. Costa. Oblivious Multi-Party Machine Learning on Trusted Processors. In
25th USENIX Security Symposium (USENIX Security 16), pages 619–636, Austin,
TX, 2016. USENIX Association.
[56] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis. The Spy in the
[48] J. Mclean. Proving Noninterference and Functional Correctness Using Traces.
[49] A. Moghimi, G. Irazoqui, and T. Eisenbarth. CacheZoom: How SGX Amplifies
Sandbox - Practical Cache Attacks in Javascript. CoRR, abs/1502.07373, 2015.
[57] B. Parno, J. R. Lorch, J. R. Douceur, J. Mickens, and J. M. McCune. Memoir:
Practical State Continuity for Protected Modules. In Proceedings of the 2011 IEEE
Symposium on Security and Privacy, SP ’11, pages 379–394, Washington, DC, USA,
2011. IEEE Computer Society.
[58] R. Pass, E. Shi, and F. Tramèr. Formal Abstractions for Attested Execution Secure
Processors. IACR Cryptology ePrint Archive, 2016:1027, 2016.
[59] M. Patrignani, P. Agten, R. Strackx, B. Jacobs, D. Clarke, and F. Piessens. Secure
Compilation to Protected Module Architectures. ACM Trans. Program. Lang.
Syst., 37(2):6:1–6:50, 2015.
[60] M. Patrignani and D. Clarke. Fully abstract trace semantics for low-level isolation
mechanisms. In Symposium on Applied Computing, SAC 2014, Gyeongju, Republic
of Korea - March 24 - 28, 2014, pages 1562–1569, 2014.
[61] M. Patrignani and D. Clarke. Fully abstract trace semantics for protected module
architectures. Computer Languages, Systems & Structures, 42:22–45, 2015.
[62] A. W. Roscoe. CSP and determinism in security modelling. In Proceedings of
the 1995 IEEE Symposium on Security and Privacy, Oakland, California, USA, May
8-10, 1995, pages 114–127, 1995.
[63] J. M. Rushby. Proof of separability: A verification technique for a class of a
security kernels. In International Symposium on Programming, 5th Colloquium,
Torino, Italy, April 6-8, 1982, Proceedings, pages 352–367, 1982.
[64] J. Rutkowska. Security challenges in virtualized environments.
[65] A. Sabelfeld and A. C. Myers. Language-based information-flow security. IEEE
Journal on Selected Areas in Communications, 21(1):5–19, 2003.
[66] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard. Malware Guard
Extension: Using SGX to Conceal Cache Attacks. CoRR, abs/1702.08719, 2017.
[67] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim. SGX-Shield: Enabling
address space layout randomization for SGX programs. In 23nd Annual Network
and Distributed System Security Symposium, NDSS 2017, San Diego, California,
USA, February 26-Marc 1, 2017, 2017.
[68] M.-W. Shih, S. Lee, T. Kim, and M. Peinado. T-SGX: Eradicating Controlled-
Channel Attacks Against Enclave Programs. In Proceedings of the 2017 Annual
Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2017.
[69] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing Page Faults
from Telling Your Secrets. In Proceedings of the 11th ACM on Asia Conference on
Computer and Communications Security, AsiaCCS 2016, Xi’an, China, May 30 -
June 3, 2016, pages 317–328, 2016.
[70] R. Sinha, M. Costa, A. Lal, N. P. Lopes, S. K. Rajamani, S. A. Seshia, and K. Vaswani.
A Design and Verification Methodology for Secure Isolated Regions. In Proceed-
ings of the 37th ACM SIGPLAN Conference on Programming Language Design
and Implementation, PLDI 2016, Santa Barbara, CA, USA, June 13-17, 2016, pages
665–681, 2016.
[71] R. Sinha, S. K. Rajamani, S. A. Seshia, and K. Vaswani. Moat: Verifying Confiden-
tiality of Enclave Programs. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, Denver, CO, USA, October 12-6, 2015,
pages 1169–1184, 2015.
[72] T. Skolem. Logico-combinatorial investigations in the satisfiability or provability
of mathematical propositions: a simplified proof of a theorem by L. Löwenheim
and generalizations of the theorem. From Frege to Gödel. A Source Book in
Mathematical Logic, 1879-1931, pages 252–263, 1967.
[73] G. Smith and D. M. Volpano. Secure Information Flow in a Multi-Threaded
Imperative Language. In POPL ’98, Proceedings of the 25th ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages, San Diego, CA, USA, January
19-21, 1998, pages 355–364, 1998.
[74] R. Strackx and F. Piessens. Fides: Selectively Hardening Software Application
Components Against Kernel-level or Process-level Malware. In Proceedings of
the 2012 ACM Conference on Computer and Communications Security, CCS ’12,
pages 2–13, New York, NY, USA, 2012. ACM.
[75] P. Subramanyan, R. Sinha, I. Lebedev, S. Devadas, and S. A. Seshia. Models and
Proofs for the Trusted Abstract Platform (TAP), Intel SGX and MIT Sanctum.
https://github.com/0tcb/TAP.
[76] G. E. Suh, D. Clarke, B. Gassend, M. Van Dijk, and S. Devadas. AEGIS: architecture
for tamper-evident and tamper-resistant processing. In Proceedings of the 17th
annual international conference on Supercomputing, pages 160–171. ACM, 2003.
[77] T. Terauchi and A. Aiken. Secure Information Flow as a Safety Problem. In Static
Analysis Symposium (SAS ’05), LNCS 3672, pages 352–367, 2005.
[78] E. Tromer, D. A. Osvik, and A. Shamir. Efficient Cache Attacks on AES, and
Countermeasures. J. Cryptology, 23(1):37–71, 2010.
[79] M. Vijayaraghavan, A. Chlipala, Arvind, and N. Dave. Modular Deductive Veri-
fication of Multiprocessor Hardware Designs. In Computer Aided Verification -
27th International Conference, CAV 2015, San Francisco, CA, USA, July 18-24, 2015,
Proceedings, Part II, pages 109–127, 2015.
[80] D. Volpano, C. Irvine, and G. Smith. A Sound Type System for Secure Flow
Analysis. Journal of Computer Security, 4(2-3):167–187, Jan. 1996.
[81] A. Waterman, Y. Lee, R. Avizienis, D. A. Patterson, and K. Asanović. The RISC-V
Instruction Set Manual Volume II: Privileged Architecture Version 1.9.1. Tech-
nical Report UCB/EECS-2016-161, EECS Department, University of California,
Berkeley, Nov 2016.
[82] A. Waterman, Y. Lee, D. A. Patterson, and K. Asanović. The RISC-V Instruction
Set Manual, Volume I: User-Level ISA, Version 2.0. Technical Report UCB/EECS-
2014-54, EECS Department, University of California, Berkeley, May 2014.
[83] Y. Xu, W. Cui, and M. Peinado. Controlled-Channel Attacks: Deterministic Side
Channels for Untrusted Operating Systems. In 2015 IEEE Symposium on Security
and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015, pages 640–656, 2015.
[84] Y. Yarom and K. Falkner. FLUSH+RELOAD: A High Resolution, Low Noise,
L3 Cache Side-Channel Attack.
In Proceedings of the 23rd USENIX Security
Symposium, San Diego, CA, USA, August 20-22, 2014., pages 719–732, 2014.
[85] D. Zhang, Y. Wang, G. E. Suh, and A. C. Myers. A Hardware Design Language
for Timing-Sensitive Information-Flow Security. In Proceedings of the Twentieth
International Conference on Architectural Support for Programming Languages
and Operating Systems, ASPLOS ’15, Istanbul, Turkey, March 14-18, 2015, pages
503–516, 2015.
15
Symbol
N
B
λx . expr
m[i]
ite(c, x, y)
rec.fld
VA
PA
ACL
Tag
Eid
EM
Σ
;
init
σ , σ0, σ1, . . .
σi ; σj
π , π0, π1, . . .
π[0]
π[i]
σ (expr)
e, e1, e2, . . .
Ee (σ )
Ie (σ )
I R
e (σ )
IU
e (σ )
Oe (σ )
Ae (σ )
I P (σ )
µ (e)
(cid:74)e(cid:75)
Table 5: Glossary of Symbols
Description
Natural numbers.
Booleans (B = {true, false}).
Function with argument x; computes expr.
Element i in map m.
If-then-else operator: evaluates to x if c is true, y otherwise.
Field fld in record rec.
Virtual addresses.
Physical addresses.
Permissions for virtual address (Readable/Writeable/eXecutable etc.)
Cache tags.
Type of enclave “ids” (integer/pointer).
Enclave metadata type.
Set of all TAP states.
TAP transition relation.
TAP initial state.
TAP states. (σ ∈ Σ).
TAP steps from state σj to σj.
Traces of the TAP.
Initial state of trace π.
ith state of in trace π.
Expression expr evaluated in state σ.
Enclave programs.
Enclave e’s state when in platform state σ.
Enclave e’s input when in platform state σ.
Randomness component of enclave e’s input.
Untrusted component of enclave e’s input.
Enclave e’s output when in platform state σ.
Adversary’s state when in platform state σ.
Non-deterministic component of platform state.
Measurement of enclave e.
Set of all traces of e.
Physical address for virtual address v in virtual to physical mapping m.
Is virtual address v is mapped to some physical address in the virtual to physical mapping m?
m[v]PA
valid (m[v])
executable(m[v]) Does virtual address v has execute permissions in the virtual to physical mapping m.
ΣL
;L
initL
s, s0, s1, . . .
si ;L sj
m1||m2
PKk
SKk
{m}SKk
Set of all implementation states.
Implementation transition relation.
Implementation initial state.
Implementation states. (s ∈ ΣL).
Implementation steps from state σj to σj.
m1 concatenated with m2.
Public key k.
Secret key k.
Msg m encrypted/signed with key SKk.
.
16