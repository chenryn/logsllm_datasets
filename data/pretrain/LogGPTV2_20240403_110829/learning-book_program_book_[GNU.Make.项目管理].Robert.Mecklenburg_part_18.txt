述符以及由make传递的环境变量。
当一个subshell被创建时，make会将若干变量加入环境：
MAKEFLAGS
MFLAGS
MAKELEVEL
MAKEFLAGS变量包含了你传递给make的命令行选项。MFLAGS变量的内容是
MAKEFLAGS的镜像副本，存在的理由是为了旧版的兼容性。MAKELEVEL变量的内容代
表嵌套的make调用的次数。也就是说，当make递归调用make时，MAKELEVEL变量
的值就会加1。对make而言，具单一父进程的子进程将会具有一个值为1的MAKELEVEL
变量。这些变量通常会被用来管理递归式make（recursivemake）。请参考“递归式make”
一节。
当然，用户可以通过export指令将任何变量加人子进程的环境之中。
make用来执行命令的当前工作目录就是上层make的工作目录。这个目录通常就是你
用来执行make程序的目录，不过你可以通过--directory=directory（或-C）命令
行选项加以变更。请注意，仅使用--file来指定不同的makefile并无法变更当前目录，
这只会影响所读取的makefile。
---
## Page 121
命令
111
make所衍生（spawn）的每个子进程都会继承三个标准的文件描述符：stdin、stdout和
stderr。这并没有任何值得特别注意的地方，除了命令脚本可以读取它的stdin这件事，
地被执行。不过用户一般不会通过这种交互的方式来运行makefile。用户通常会希望这
么做：启动make，“走完”每个步骤，返回稍后要检查的结果。当然，能够读取stdin将
有助于与“基于cron的自动编译过程”进行交互。
makefile中一个常见的错误就是意外地读取了stdin：
$(DATA_FILE):S(RAW_DATA)
grep pattern $(RAW_DATA_PILES)>S@
此处，当我们以变量来为grep指定输入文件的时候，误用了变量名称。如果变量扩展之
后空无一物，grep将会读取stdin，但不会显示提示符或指示为何make“死掉了”。这个
问题的一个简单的解决方案就是，总是在命令行上使用/dev/null作为额外的“文件”：
S(DATA_FILE):$(RAW_DATA)
grep pattern $(RAw_DATA_FILES)/dev/null>$@
现在，这个grep命令一定不会去读取stdin。当然，如果要对makefile调试，这么做也
很恰当！
对命令脚本求值
命令脚本的处理过程历经四个步骤：读取程序代码、扩展变量、对make表达式求值以及
执行命令。现在让我们来看看，如何将这些步骤应用在复杂的命令脚本上。以下面这个
（有点不自然的）makefile为例。当目标文件被链接成一个应用程序之后，我们可以选择
是否要删掉符号，以及是否使用upx这个可执行文件封装程序（executablepacker）进
行压缩的动作：
#S（call strip-program,file)
define strip-program
strip s1
endef
compiex_script:
ifdef STRIP
$(call strip-program,S@)
endif
$（if s（PACK),upx--best S@）
S(warning Final size:$(shell ls -s S@))
---
## Page 122
112
第五章
命令脚本的求值动作将会延后到它们被执行的时候进行，不过ifdef指令的处理将会在
它们被读进make的时候立即进行。因此，make在读取命令脚本的时候会忽略并存储其
所读到的每一行，直到它读进ifdefSTRIP这一行。它会对条件表达式进行求值的动
作，如果STRIP未定义，make会读取并丢弃接下来的所有文本，直到它读进作为结束
的endif。然后make会读取并存储命令脚本的其余部分。
当命令脚本被执行时，make首先会扫描命令脚本中是否存在需要被扩展和求值的make
语法结构。当宏被扩展时，make会为其中的每一行添加一个前导的跳格符。如果你不打
算这么做，那么在任何命令执行之前所进行的扩展及求值动作，可能会导致非预期的执
行顺序。在我们的例子中，命令脚本的最后一行是错误的。在应用程序被链接之前，
shell和warning已经先被执行了。因此，在文件的检查动作被更新之前，1s命令将
会被执行。这说明了为何我们在“解析命令”一节中所看到的输出顺序会“乱掉”。
此外，请注意，make会在读取这个makefile的时候对ifdefSTRIP那一行进行求值动
作，不过它会在complex_script的命令被执行之前立即对s（if...）那一行进行求值
动作。使用if函数可让你的代码较具灵活性，因为通过变量的定义，你可以获得更多
的控制机会，不过它非常不适合用来管理大型的文本块。
如此例所示，我们必须随时注意当前是哪个程序在对表达式进行求值动作（例如make
或shel1），以及何时会进行求值动作：
这个回旋式的命令脚本可用来链接一组目标文件。以下列出这个命令脚本的求值顺序，
并在圆括号中提示执行此动作的程序：
1.扩展SALL（make）。
2.对if求值（make）。
3.对wildcard求值，假设ALL并非空值（make）。
4.对shell求值（make）。
5.执行find（sh）。
6.完成make语法结构的扩展和求值动作之后，执行链接命令（sh）。
命令行的长度限制
开发大型项目的时候，你偶尔会遇到make所要执行的命令过长的问题。命令行的长度限
制因操作系统的不同有很大的差异。RedHat9GNU/Linux的长度限制大约为128K个
---
## Page 123
命令
113
字符，而WindowsXP则具有32K的限制，因此所产生的错误信息也不相同。在Windows
上使用Cygwin的人，如果为1s指定过长的参数列表，将会看到如下的信息：
C:\usr\cygwin\hi-oash:/usr/bin/1s:Invalid argument
使用RedHat9的人则会看到如下的信息：
/bin/ls:argumentlisttoolong
虽然32K的限制听起来好像比较长的，但是当你的项目在100个子目录中包含了3000
个文件，而你想要对它们进行操作时，就会超过此限制。
有两项基本的操作会让你陷人此泥潭：使用shell工具扩展某个基本的值，或是使用make
本身为一个变量设定很长的值。举例来说，假设我们想在单一命令行上编译所有的源文
件：
compile_all:
$（JAvAC)$(wildcard s（addsuffix/*.java,$（source_dirs)))
make变量source_dirs可能只包含了几百个单词，但是为Java文件添加通配符以及使
用wildcard扩展它之后，此文件列表很容易就会超过系统的命令行长度限制。顺便说
一下，make本身并没这样的限制，只要有足够的存储空间，make就会让你使用你会用
到的任何数据量。
当发现自已身处于此状况时，你会觉得仿佛坠入了迷雾中。举例来说，你可能会想要使
用xargs来解决上面的问题，因为xargs可以根据系统的长度限制来分割其参数：
echo $（wildcard $（addsuffix/*.java,S（source_dirs)))1\
xargs $(JAVAC)
可惜，这么做只是将命令行的长度限制问题从javac命令行转移到echo命令行。同样
地，我们也无法使用echo或printf将数据写人一个文件（假定编译器可以从一个文
件读取文件列表）。
处理此状况的方法就是避免一次将文件列表定全。我们可以使用shell一次处理一个目
录：
compile_all:
for d in S（source_dirs);\
do
$（JAVAC)$$d/*.java;\
done
我们还可以将文件列表使用管道转至xargs，以较少的执行次数来完成相同的工作：
---
## Page 124
114
第五章
compile_al1:
for d in $（source_dirs）;\
do
echo ssd/*.java;
done1
xargs S(JAVAC)
可惜，这些命令脚本也无法在编译期间正确处理错误。一个比较好的做法就是存储完整
的文件列表并将它提供给编译器，如果编译器可以从一个文件读取它的参数的话。Java
编译器支持此功能：
compile_a1l: $(FILE_LIST)
S(JAVA)@Ss@
注意for循环中的微妙错误。如果目录列表中的任何目录并未包含Java文件，字符串
*.java将会被包含在文件列表中，于是Java编译器就会产生“Filenotfound”的错
误信息。我们可以通过设定nullglob选项的方式，让bash将不匹配的文件名模式扩
展成空字符串。
compile_all: S(FILE_LIST)
S(JAVA)@$s9
许多项目都必须建立文件列表。下面的宏中包含了一个用来产生文件列表的bash脚本。
这个宏的第一个参数就是所要切换的根目录，列表中的所有文件都将会相对于这个根目
录。第二个参数就是用来搜索匹配文件的目录列表。第三和第四个参数则是选项，代表
文件的扩展名。
#$（call collect-names,root-dir,dir-list,suffix1-opt,suffix2-opt)
define collect-names
echo Making s@ from directory list...
cd $1:
shopt -s nullglob;
for f in S（foreach file,S2,'S（file)');do
files=（$sfs（if $3./*.(S3s（if $4,$（comma)$4)))）:
---
## Page 125
命令
115
if（（S$（#files[@]）>0））:
then
printf 'gs"\n'SS(files[@]);
else :;fi;
done
endef
下面是用来创建图像文件列表的模式规则：
.images:
@S（call collect-names,S（SoURCE_DIR).$~,gif,jpeg）>$@
这个宏的执行过程会被隐藏起来，因为此脚本太长了，而且需要转贴此内容的机会并不
多。目录列表是由必要条件提供。切换至根目录后，此脚本允许空文件的匹配（null
globbing）。其余的是用来处理我们想要搜索的每个目录的for循环。文件搜索表达式
就是参数S2所传人的单词列表。此脚本将会使用单引号来保护文件列表中的单词，因
为其中可能会包含shell特殊字符。尤其是，有些语言（比如Java）的文件名可能会包含
美元符号：
for f in $（foreach file,$2,*$（file)'):do
我们将会通过将文件名匹配的结果填入files数组来搜索一个目录。如果files数组
中包含了任何的元素，我们就会使用printf为其所输出的每个单词添加一个换行符号。
使用数组的好处是，可让宏正确处理内置空格的路径。这也是为何printf需要为文件
名加上双引号的原因。
文件列表由下面这一行所产生：
files=( ssfs（if $3./*.($3s(if $4,s(comma)s4）))）;
sSf就是此宏的目录或文件参数。接下来的表达式是make的if函数，用来测试第三个
参数是否为非空值，这就是你用来实现可选用参数的方法。如果第三个参数是空的，它
就会假设第四个参数也是这样。在此情况下，用户所传递的文件应该就包含在文件列表
中。这让此宏可以在通配模式不相符的时候，为所有文件建立列表。如果提供了第三个
参数，if函数会为根文件添加/*.（S3）；如果提供了第四个参数，它会在S3之后添
加，$4。注意我们为通配模式插人逗号的方法：我们会使用comma这个make变量来规
避解析器的处理，否则该逗号将会被解译成if函数的参数的分隔符。comma变量的定义
很简单：
comma:=
前面所有的for循环也都会受到命令行长度的限制，因为它们都进行了通配符扩展的动
作。差别在于，针对单一目录的内容进行通配符扩展的动作不太可能会超过此限制。
---
## Page 126
116
第五章
你可能会问：如果有一个make变量包含了很长的文件列表，要如何处理？嗯，这实在很
麻烦。我只找到了两种可以把一个内容很长的make变量传递给subshell的方法。第一种
方法就是过滤变量的内容，只将变量内容的子集传递给任何一次的subshell调用。
compile_all:
$(JAVAC) $(wordlist 1,499,S（all-source-fi1es))
$（JAVAC) $(wordlist 500,999,$（all-source-files))
S(JAVAC)S(word1ist 1000,1499.S（a11-source-files))
你也可以使用filter函数，不过会有比较多的不确定性，因为这么做所选出的文件数
目与你所选用的模式空间的分布有关。我们可以根据英文字母来选择模式：
compile_al1:
S（JAVAC) $（filter a&,S（all-source-files))
S（JAVAC) $(filter bs,S(all-source-files))
或是根据文件名本身的特征来选取模式。
请注意，要进一步将此做法自动化并不容易。我们试着把这个以英文字母为模式的做法
封装在foreach循环中：
compile_all:
$（foreachl.abcde....
S（if S(filter Sle,$（all-source-files)),
S(JAvAC) S（filter $1s,S（all-source-files));))
但这么做并不可行。make会将它扩展成单行文本，因此会掺杂行长度限制的问题。我们
可以改用eval：
compile_all:
$（foreachl,a bcde....
S（if s(filter Sl$,$(all-source-files)),\
$(eval
$（shell
$(JAvAC) S（filter $18,$（all-source-files));))))
这么做可行是因为eval会立即执行shell命令，而且会被扩展成空值。所以foreach
循环会被扩展成空值。它的问题是错误报告在此语境中是无意义的，所以编译错误将不
会被正确传送至make。
wordlist的做法更糟。由于make的数值能力有限，所以你无法将wordlist封装在
循环中。一般来说，对于无限长的文件列表，几平找不到能够处理它的方法。
---
## Page 127
第二部分
高级与特别的议题
在第二部分中，我们将以面向问题的观点来审视make。将make应用在实际问题（例