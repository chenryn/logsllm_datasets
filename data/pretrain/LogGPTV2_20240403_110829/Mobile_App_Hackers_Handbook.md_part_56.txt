device but does have network access on a desktop or laptop system. Instructions for installing Store apps via
sideloading are available at the Windows Phone site (http://www.windowsphone.com/en-gb/how-
to/wp8/apps/how-do-i-install-apps-from-an-sd-card).
In Windows Phone 8.1, you also have the option of installing an app directly to an SD card, as opposed to simply
installing it onto the device from the SD card.
Company App Sideloading/Distribution
For applications developed for internal use at organizations, a distribution method known as “Company app
distribution” allows the Store and Microsoft certification to be bypassed and apps to be published directly to the
company’s employees. This method is available on Windows Phone 8 and 8.1.
This distribution and installation scheme requires companies to register a company account on the Windows
Phone Dev Center and acquire an enterprise certificate for signing their apps. The company then develops its
applications and signs them using the enterprise certificate it obtained. Many companies also develop a
“Company Hub” application to act as a portal from which to download their internal apps.
Employees then enroll their phone for app distribution from their company, and at that point they’ll be able to
install the internal apps signed with their company’s enterprise certificate. The full process has been
documented in detail by Microsoft (see http://msdn.microsoft.com/en-
us/library/windowsphone/develop/jj206943(v=vs.105).aspx for more information).
Targeted Application Distribution
Targeted app distribution is a means for publishing your application via the Dev Center while hiding your app
from view in the Windows Phone Store.
All apps published via targeted app distribution are subject to the same vetting and certification process as
regular Store apps. When Microsoft approves and certifies your app, you are then able to give users you select a
link to the app so they can install it. Because the app will not be visible in the Store, yet is downloadable by users
with a particular link, it is possible to allow downloads from only the users you choose, such as members of a
common organization, club, or user group. The apps publisher can unhide an app published in this way so that
any Store user can find and download it.
As with other distribution methods, Microsoft has official documentation on target app distribution on MSDN.
Note that applications containing company-sensitive information would probably be more securely distributed
via Company Application Distribution than by this method, because even when an app is targeted and therefore
hidden in the Store, if users somehow find the app’s link, they will be able to download it as any normal app.
Developer Sideloading
Sideloading applications using developer functionality is the most general and easily available way of installing
apps without code signing. Having this ability is practically a necessity as well from the standpoint of a
developer, because truly knowing whether apps work on real phones without actually testing them is very
difficult.
Installing applications as a developer requires the user to register for a developer account, and then register her
device, thereby attaining “developer unlock.” The process is quick and easy and is carried out using the Windows
Phone Developer Registration application (explained at http://msdn.microsoft.com/en-
us/library/windowsphone/develop/ff769508(v=vs.105).aspx), which comes as part of the WP8 and WP8.1
SDKs. Each developer account is capable of unlocking three devices. One device can be developer unlocked
without having a developer account—all that is needed is a Live ID.
After the user has unlocked her device for development she can deploy application packages to it using the
Application Deployment tool, which also comes bundled with Windows Phone SDKs. Applications being
deployed do not need to be signed in any way; users are free to create app packages and distribute them to other
users with developer-unlocked devices, and likewise install unsigned apps created by other developers,
bypassing the Store and enterprise distribution. From a hacker’s point of view this is extremely useful for
researching and developing capability unlock methods and subsequently developing home-brew applications for
personal use and the rest of the Windows Phone hacking community.
Developer unlocking and sideloading (via the Application Deployment tool), and how it is carried out is
discussed in more detail later in the “Developer Unlocking Your Device” section, where we discuss how to build
an environment suitable for penetration testing, exploring, and reverse engineering Windows Phone
applications.
Building a Test Environment
As with all penetration testing and exploratory activities having a setup that facilitates a certain degree of
probing into an application’s internals is necessary. Likewise, being well equipped with essential tools and
familiar with how to use them and how they can be of use in your assessments is important.
Having the tools and knowledge is even more essential when assessing applications that are running on mobile
platforms. Whereas standard desktop applications can usually be disassembled (that is, using IDA Pro) and their
behavior observed using debugging, instrumentation utilities, most modern mobile operating systems are far
less open.
To serve as an example, consider an application installed on a desktop Windows system, such as Windows 8. A
penetration tester can trivially attach a debugger of his choice (Windbg, OllyDbg) and analyze the app’s behavior
using tools like ProcMon.
Similarly, a user on Linux can attach and debug using GDB or Valgrind and can use strace, ltrace, and lsof to
observe various behaviors.
Testers in more open computing environments have far greater insight into how applications are behaving on
the dynamic level and getting at binaries for static analysis is somewhat easier for them.
Most recent mobile operating systems are much more closed, and even though you may consider yourself the
device’s owner and administrator you are still dealing with a closed-computing platform—at least in comparison
to most desktop environments.
To assess the security aspects, having more involved access to a device than users were supposed to be able to
have—for example, when we do not have source code available for the app being tested—is therefore beneficial
and oftentimes necessary. This generally involves bypassing the blackbox nature that Windows Phone devices
are intended to be by overcoming some of the security controls put in place by the vendor. In many cases the
tester is more fortunate and will have access to source code of the application. Whichever is the case, the tester
will be in much better stead to carry out assessment from a solid test environment with the right tools, and with
favorable privileges and conditions.
This section guides you through the process of building such an environment, from obtaining SDK tools such as
Visual Studio and the emulators, to unlocking application capabilities and getting access to the filesystem of a
device.
SDK Tools
SDK tools are core to development and security review activities on Windows Phone 8.x. Two of the most
important tools included in the Windows Phone SDKs are Visual Studio and the emulator. You’re likely to find
use of these tools in reviewing code (either original or reversed code) and running apps from source,
respectively. In the next few sections we’ll discuss how to obtain these tools and give a general introduction to
them.
Obtaining the Development Tools
SDKs are made available for Windows Phone 8 and Windows Phone 8.1 development by Microsoft for free of
charge.
Choosing a suitable SDK package equipped for use in Windows Phone work depends on the version of Windows
Phone that you are interested in; for Windows Phone 8.1, Microsoft provides a free Visual Studio Express 2013
package that includes the Phone 8.1 SDK, emulators, and other WP8.1 development tools, in addition to
development environments for other types of apps.
For exclusively Windows Phone 8 activities that don’t include Windows Phone 8.1, Microsoft provides a free
SDK 8.0 bundle that includes Visual Studio Express 2012 for Windows Phone, the complete SDK, emulators,
and additional WP8 developer tools.
These two SDK options are available from http://dev.windowsphone.com/en-us/downloadsdk, but we’ll just
briefly summarize the differences between these two SDKs in the next three passages.
You should install the Windows Phone 8.1 SDK, because Windows Phone 8.1 SDK is equipped for both
Windows Phone 8 and 8.1 development, and it’s likely that you will want to deal with both WP8 and WP8.1
applications. The Windows Phone 8.1 SDK is equipped for development of both WP8 and WP8.1 apps, but the
converse is not true. It should be noted that the Windows Phone 8.1 SDK requires Windows 8.1 or later to be
installed. Windows 8 is not supported.
The complete Windows Phone 8.1 SDK can be obtained by visiting the following link:
http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-8. Alternatively, if
you already have Visual Studio 2013 installed, you can simply install Update 3, which contains material needed
for Windows Phone development, via this link: http://www.visualstudio.com/en-us/downloads#d-visual-
studio-2013-update. Both of these packages require at least Windows 8.1 x86 to be installed for Windows
Phone 8.1 development; however, the emulators require at least Windows 8.1 Professional (x64) and a processor
that supports Client Hyper-V and Second Level Address Translation.
If you aim to review only Windows Phone 8 applications, you can just download the Windows Phone SDK 8.0
directly from this URL: http://go.microsoft.com/fwlink/p/?LinkId=265772, and you can also download and
install any updates that are also available under the Windows Phone 8 heading on
http://dev.windowsphone.com/en-us/downloadsdk. Installation of the Windows Phone 8 SDK requires at least
Windows 8 or later, and the emulators require a processor that supports Client Hyper-V and Second Level
Address Translation.
Whichever package you choose, it will be downloaded as an MSI installer. Installation should be simple,
assuming you have the necessary system specifications. Installation of any of the packages with the standard
options is quite sufficient.
Visual Studio
Visual Studio is Microsoft’s official integrated development environment, and it’s used for development of
virtually all applications that use Microsoft technologies or run on Windows platforms. Windows Phone is no
exception.
In addition to being ready for the development of the several kinds of standard Windows projects, the Visual
Studio packages mentioned previously also integrate several features that are useful specifically for Windows
Phone development. For example, various project templates are available when creating a new project via File
New Project, as shown in Figure 10.6.
Figure 10.6 Creating a new WP8 project
Existing solutions and projects are easy to open in the same way as other Visual Studio projects; either by
double-clicking the solution or project file (for example, .sln) in Explorer or by locating the solution using File
Open Project.
You are likely to make extensive use of Visual Studio in your security assessments, particularly in the following
areas:
Manually reviewing source code
Running projects from source on an emulator and devices
Using Visual Studio’s debugging tools on source codebases
Creating test cases and test harnesses for suspect code fragments
Developing security-related testing tools for developer sideloading
For example, after a codebase has been developed or otherwise loaded into Visual Studio, running the
application in the emulator with debugging (F5) or without debugging (Ctrl+F5) is a trivial task.
If the app is launched with debugging, any breakpoints set will be active, and the offending line of code will be
shown with the runtime and/or register state if an unhandled exception occurs.
Having a working development and build environment at hand is useful for prototyping and testing code
fragments. When testing and code reviewing applications from a security standpoint being able to observe
exactly what happens when a certain piece of code executes is often handy, because API behavior can often be
unclear from documentation and having proof of behavior generally serves to eliminate any doubt about
whether suspect code is actually buggy.
A thorough introduction to Visual Studio’s many features is beyond the scope of this book, but Microsoft has
many online resources discussing the software, its usage, and use of its features. See
http://msdn.microsoft.com/en-gb/vstudio/aa718325(v=vs.110).aspx and http://www.visualstudio .com/ for
further references.
Emulator
The Windows Phone emulators are invaluable tools that come bundled as standard with the WP8 and 8.1 SDKs.
If you installed either or both of the SDK packages described in the previous section, you will now have the
emulator for WP8, WP8.1, or both. In both cases the emulators are applications that provide Windows Phone
environments using Microsoft’s native hypervisor, Hyper-V.
The execution environment provided by the emulators closely matches the environment you would typically
find when executing applications on real Windows Phone devices. The emulator is not an emulator or simulator,
like the iPhone simulator is, for example, but is in fact a genuine Windows Phone instance, albeit one running
in a virtual machine instead of on a mobile device. So, for example, all the same sandbox and capabilities
restrictions apply in the emulator just as they do when an app is deployed to a device.
There are two primary ways of running applications in the emulator:
As mentioned in the earlier section, “Visual Studio,” you can build applications from source in Visual Studio
and launch them in the emulator. To build and launch with debugging, you can use the F5 shortcut, and to
run without, use Ctrl+F5. These two actions can also be carried out using the Debug menu, and using the
green Play button on the toolbar.
You can also deploy prebuilt application packages (non-Store), XAP and APPX files, to the emulator using
the SDK’s Application Deployment tool, shown in Figure 10.7. The Application Deployment tool bundled
with the 8.1 developer tools/SDK is capable of deploying both XAP and APPX files, whereas the tool found in
the 8.0 SDK deals only with XAP packages.
Figure 10.7 Application Deployment tool
After the Application Deployment application has been launched, the tool allows you to choose a target device,
which includes several different emulator options. The user can then browse the filesystem and select which
application package to deploy, and then click Deploy to install the app and launch the emulator.
Note that applications that have been downloaded from the Store cannot be run on the emulators, because they
are DRM protected; these files can only be deployed to real devices. The emulator is useful in scenarios where
you have access to a project’s source code, or you have been given an application package for testing that has
been built and given to you without being put through Store certification first.
Developer Unlocking Your Device
When carrying out experiments and security assessments, having the ability to run code on your device without
having to get it signed first is important. This is where developer unlock is useful, as mentioned earlier in the
“Developer Sideloading” section. Developer unlocking your device enables you to sideload unsigned apps onto
your device.
However, reasons exist for why developer unlocking a device is useful from a security testing perspective. We
mentioned earlier that having abilities that are not normally offered by the OS, such as being able to view the
filesystem, is often necessary in mobile application assessments. Because things like “full” access to the
filesystem are not normally offered by Windows Phone, hacker-types must exploit weaknesses in the OS and
OEM software to obtain these kinds of abilities. However, to exploit such bugs, you need to be able to run code
on the device that would certainly not be approved by the Store vetting process.
Figure 10.8 Developer Registration tool
The next section (“Capability Unlocking and Beyond”) covers how exactly to gain these advanced abilities, but
first we explain how to achieve developer unlock on your device, because it is a necessary precursor as we
implied earlier. Follow these steps to developer unlock your WP8 or WP8.1 device:
1. Launch the Windows Phone Developer Registration or Windows Phone Developer Registration 8.1
application, depending on the version of Windows Phone running on your device.
2. Make sure your device’s screen is unlocked and the device is plugged into your computer via the microUSB
cable. The time and date on the device must also be correct, and the device must be connected to the
Internet. When the device is detected the Register button becomes clickable.
3. Click Register (see Figure 10.8). A login dialog box appears.
4. Log in with the credentials for your Windows Live or Developer account.
If everything goes smoothly, the tool should successfully developer unlock the phone.
Because the device is now unlocked, you’re free to deploy unsigned application packages via the Application
Deployment tool. This leads nicely into the next section, where we delve into gaining the sort of access and
capabilities on the device that are necessary or at least helpful for in-depth exploration and security
assessments.
Capability Unlocking Your Device
To make a device useful for penetration testing activities, you need certain abilities. Since Windows Phone is a
closed computing platform, users are not provided with a way to carry out explorative activities like browsing
the filesystem, or viewing the registry.
Having a device that affords you these luxuries is absolutely essential to conducting a thorough and successful
security review of an app, since having the ability to access the device’s filesystem allows you to extract an
application’s assets from the device, including but not limited to its .NET assemblies, its binaries, and its
manifest file. Extracted files can then be analyzed and reverse-engineered, and code-reviewed in the case of
extracted .NET assemblies. A security assessment turns from being a blackbox app review, to a whitebox or code
review.
In addition, full access to the underlying filesystem allows a penetration tester to discover what an application is
storing on the filesystem, such as cookies, web cache, sensitive files that are unencrypted, and credentials in
cleartext files. Having the ability to know what an app is storing on the filesystem, and whether such data is
encrypted, is a vital part of a mobile app security assessment.
Having the ability to browse the registry is also very useful when reviewing non-third-party apps, such as those
written by OEM vendors, because many such apps will have the ID_CAP_INTEROPSERVICES capability and use that
capability to write to the registry.
Gaining the ability to sideload applications with those not intended for third-party applications is known as
“capability unlocking”. The ability to sideload arbitrary apps with the ID_CAP_INTEROPSERVICES capability is
particularly interesting because it grants sufficient privileges to browse most of the registry, and edit and add to
large parts of it.
Capabilities such as ID_CAP_INTEROPSERVICES were never intended to be granted to third-party apps; instead,
they are normally accessible to OEM and first-party applications. Unlocking ID_CAP_INTEROPSERVICES is known
in the Windows Phone hacking community unanimously as interop unlock. Unlocking various high privilege
capabilities also allows various community and homegrown hacking tools to be installed on your device that are
useful whilst carrying out penetration tests.
Gaining access to privileged capabilities and gleaning filesystem access is possible on some Windows Phone
devices on the market, in three general ways:
By flashing a custom ROM/ROM modification to the device
Exploiting a software vulnerability
By hardware means, such as via an unprotected JTAG interface
How you unlock high-privileged capabilities and gain filesystem and registry access depends on the brand and
version of device you have, and the version of Windows Phone that is installed on the device.
At present, the following devices have been hacked to the point that at least the ID_CAP_INTEROPSERVICES
capability is available (to third-party apps), and filesystem access has been gained:
Samsung Ativ GT-I8750 running Windows Phone 8
Samsung Ativ GT-I8750 running Windows Phone 8.1
Huawei Ascend W1 running Windows Phone 8
Huawei Ascend W1 running Windows Phone 8.1
lordmaxey from XDA-Developers has also reportedly unlocked a Nokia Lumia for all capabilities provided by the
OS, while the device was running Windows Phone 8. Readers who are well-versed in electronics may be able to
reproduce these results, but we do not recommend it. The relevant thread on XDA-Developers is available at:
http://forum.xda-developers.com/showthread .php?t=2713098.
For penetration testing and other explorative purposes, we recommend that you obtain either a Samsung Ativ S
GT-I8750 or a Huawei Ascend W1-U00. Both of these devices can be interop or fully unlocked, and filesystem
access can be gained, on devices running both Windows Phone 8 and Windows Phone 8.1.
Since the latest release of Windows Phone at the time of this writing is 8.1, we strongly recommend that your
testing device be running Windows Phone 8.1. This makes sense because an increasing number of app
developers do and will continue to release their apps to target only 8.1 and higher (as APPX packages). With that
being said, we advise following the instructions in the “Samsung Ativ Interop Unlock and Filesystem Access on
Windows Phone 8.1 via Custom MBN” section (for readers with a Samsung Ativ I8750) or the “Huawei Ascend
W1 Interop Unlock and Filesystem Access on Windows Phone 8.1” section (for readers with a Huawei Ascend
W1).
We will, however, still give instructions and advice on preparing a device of these two models that is running
Windows Phone 8.
We will now discuss how to prepare Samsung Ativ GT-I8750 and Huawei Ascend W1 devices for penetration
testing activities, in the following few sections.
Samsung Ativ Full Capability Unlock and Filesystem Access on Windows Phone 8
If you’re intent upon using a device running Windows Phone 8 (and not 8.1), the following instructions will
unlock all capabilities provided by the OS, and will allow full filesystem access to the device via USB mass
storage. Our recommendation, however, is that you upgrade to Windows Phone 8.1 and transform your device
into a penetration testing-ready device via flashing an MBN (see “Samsung Ativ Interop Unlock and Filesystem
Access on Windows Phone 8.1 via Custom MBN” later in this chapter).