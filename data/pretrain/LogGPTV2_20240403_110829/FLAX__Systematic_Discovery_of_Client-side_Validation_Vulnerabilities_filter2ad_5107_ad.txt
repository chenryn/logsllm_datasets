### Injection Vulnerabilities, Origin Mis-Attribution, and Cookie-Sink Vulnerability

In our implementation, the acceptor slices are converted back to JavaScript form for further analysis. The size of the acceptor slices increases by a factor of up to 4 compared to the numbers reported in column 7.

#### Table 1: Applications with Untrusted Data Flow into Critical Sinks

| Name                | # of Verified Taint Sinks | # of Vuln. | Total Inputs | Size of Acceptor Inputs | Trace Size (# of insns) | Avg. size of AS | # of Tests to Find 1st Vuln. | Vulnerability Type |
|---------------------|---------------------------|------------|--------------|------------------------|------------------------|-----------------|------------------------------|--------------------|
| Plaxo               | 178                       | 1          | 151          | 127                    | 557,442                | 36              | Code injection               |
| Academia            | 44                        | 1          | 334          | 78                     | 156,621                | 286             | Origin Mis-attribution       |
| Facebook Chat       | 20                        | 3          | 127          | 28                     | 6,460,591              | 1,151           | Code injection, Application Command Injection |
| ParseURI            | 1                         | 1          | 78           | 26                     | 55,179                 | 638             | Cookie Sink                  |
| AjaxIM              | 1                         | 1          | 28           | 26                     | 223,504                | 517             | Code injection               |
| AskAWord            | 6                         | 0          | 26           | 26                     | 59,480                 | 611             | -                            |
| Block Notes         | 3                         | 1          | 496          | 27                     | 11,539                 | 766             | Code injection               |
| Birthday Reminder   | 1                         | 0          | 632          | 632                    | 2,178,927              | 664             | -                            |
| Calorie Watcher     | 6                         | 1          | 586          | 26                     | 449,214                | 733             | Code injection               |
| Expenses Manager    | 3                         | 0          | 412          | 60                     | 522,788                | 1,454           | -                            |
| MyListy             | 1                         | 1          | 21           | 127                    | 17,054                 | 1,468           | Code injection               |
| Notes LP            | 5                         | 0          | 127          | 62                     | 144,829                | 3,327           | -                            |
| Progress Bar        | 1                         | 1          | 28           | 28                     | 118,108                | 475             | Code injection               |
| Simple Calculator   | 1                         | 0          | 27           | 27                     | 72,475                 | 4               | -                            |
| Todo List           | 2                         | 1          | 632          | 40                     | 647,849                | 1,181           | Code injection               |
| TVGuide             | 1                         | 1          | 586          | 66                     | 24,144,843             | 188             | Code injection               |
| Word Monkey         | 5                         | 0          | 237,837      | 99                     | -                      | -               | -                            |
| Zip Code Gas        | 1                         | 0          | 410,951      | 248                    | -                      | -               | -                            |

**Note:** The top 5 applications are websites, and the rest are iGoogle gadgets.

### Confirmed Vulnerabilities

We confirmed that all reported vulnerabilities were true positives by manually inspecting the JavaScript code and evaluating them with exploit inputs. The severity of the vulnerabilities varied by application and source of untrusted input, which we discuss in section 5.2.3.

### Effectiveness

We quantitatively measure the benefits of taint-enhanced blackbox fuzzing over vanilla taint-tracking and random fuzzing from our experimental results.

#### False Positives Comparison

The second column in Table 1 shows the number of distinct flows of untrusted data into critical sink operations observed; only a fraction of these are true positives. Each of these distinct flows is an instance where a conservative taint-based tool would report a vulnerability. In contrast, the subsequent step of sink-aware fuzzing in FLAX eliminates the spurious alarms, and a vulnerability is reported (column 3 of Table 1) only when a witness input is found. It should be noted that FLAX can have false negatives and could have missed bugs, but completeness is not an objective for FLAX.

We manually analyzed the taint sinks reported as safe by FLAX and, to the best of our ability, found them to be true negatives. For instance, most of the sinks reported for the Plaxo case were due to code that output the length of the untrusted input to the DOM, which executed repeatedly each time the user typed a character in the text box. Many of the true negatives we manually analyzed employed sufficient validation. For example, the Facebook Chat application correctly validates the origin property of every postMessage event it receives during execution. Several other applications validate the structure of the input before using it in a JavaScript eval statement or strip dangerous characters before using it in HTML code evaluation sinks.

#### Efficiency of Sink-Aware Fuzzing

Table 1 (column 8) shows the number of test cases FLAX generated before it found the vulnerability for the cases it deems unsafe. Part of the reason for the small number of cases on average is that our fuzzing leverages knowledge of the sink operations. Column 4 of Table 1 shows that the size of the original inputs for most applications is in the range of 100-1000 characters. Slicing on the tainted data prunes away a significant portion of the input space, as seen from column 5 of Table 1. We report an average reduction of 55% from the original input size to the size of the test input used in acceptor slices.

Furthermore, the average size of an acceptor slice (reported in column 7 of Table 1) is smaller than the original execution trace by approximately 3 orders of magnitude. These reductions in test program size for sink-aware fuzzing allow it to work with much smaller abstractions of the original application, thereby significantly improving the efficiency of this step.

#### Qualitative Comparison to Other Approaches

Figure 10 shows one of several examples that FLAX generates, which cannot be directly expressed to the languages supported by off-the-shelf existing string decision procedures [21, 25], which FLAX deems as safe. We believe that even human analysis for such cases is tedious and error-prone.

```javascript
function acceptor(input) {
    //input = '{"action":"","val":""}';
    must_match = '{]:],]:]}';
    re1 = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    re2 = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    re3 = /(?:^|:|,)(?:\s*\[)+/g;
    rep1 = input.replace(re1, "@");
    rep2 = rep1.replace(re2, "]");
    rep3 = rep2.replace(re3, "");
    if (rep3 == must_match) { return true; }
    return false;
}
```

### Security Implication Evaluation and Examples

To gain insight into their severity, we further analyzed the vulnerabilities reported by FLAX and created proof-of-concept exploits for a few of them to validate the threat. All vulnerabilities were disclosed to the developers either through direct communication or through CERT.

#### Origin Mis-Attribution in Facebook Connect

FLAX reported an origin mis-attribution vulnerability for academia.edu, a popular academic collaboration and document-sharing website used by several academic universities. FLAX reported that the application was vulnerable due to a missing validation check on the origin property of a received postMessage event. We manually created a proof-of-concept exploit that demonstrates that any remote attacker could inject arbitrary script code into the vulnerable web application. On further analysis, we found that the vulnerability existed in the code for the Facebook Connect library, which was used by academia.edu as well as several other web applications. We disclosed the vulnerability to Facebook developers on December 15th, 2009, and they released a patch for the vulnerability within 6 hours of the disclosure.

#### Code Injection

FLAX reported 8 code injection vulnerabilities (DOM-based XSS) in our target applications, where untrusted values were written to code evaluation constructs in JavaScript (such as eval, innerHTML). One DOM-based XSS vulnerability was found on each of the following: 6 distinct iGoogle gadgets, an AJAX chat application (AjaxIM), and one URL parsing libraryâ€™s demonstration page. We manually verified that all of these were true positives and resulted in script execution in the context of the vulnerable domains when the untrusted source was set with a malicious value. Four of the code injection vulnerabilities were exploitable when remote attackers enticed the user into clicking a link of the attacker's choice. The affected web applications were also available as iGoogle gadgets, and we discuss a gadget overwriting attack using the CSV vulnerabilities below. The remaining 4 code injection vulnerabilities were self-XSS vulnerabilities as the untrusted input source was user-input from a form field, a text box, or a text area. As explained in section 2.1, these vulnerabilities do not directly empower a remote attacker without additional social engineering (such as enticing users into copy-and-pasting text). All gadget developers we were directly able to communicate with positively acknowledged the concern and agreed to patch the vulnerabilities.

#### Gadget Overwriting Attacks

In a gadget overwriting attack, a remote attacker compromises a gadget and replaces it with the content of their choice. We assume the attacker is an entity that controls a website and has the ability to entice the victim user into clicking a malicious link. We describe a gadget overwriting attack with an example of how it can be used to create a phishing attack layered on the gadgetâ€™s CSV vulnerability. In a gadget overwriting attack, the victim clicks an untrusted link, just as in a reflected XSS attack, and sees a page such as the one shown in Figure 11 in their browser. The URL bar of the page points to the legitimate iGoogle website, but the gadget has been compromised and displays the attackerâ€™s contents: in this example, a phishing login box that tempts the user to give away their credentials for Google.

If the user enters their credentials, they are sent to the attacker rather than Google or the gadgetâ€™s website. The attack mechanics are as follows. First, the victim visits the attackerâ€™s link, which points to the vulnerable gadget domain (typically hosted at a subdomain of gmodules.com). The link exploits a code injection CSV vulnerability in the gadget, and the attack payload is executed in the context of the gadgetâ€™s domain. The attackerâ€™s payload then spawns a new window that points to the full iGoogle webpage (http://www.google.com/ig) containing several gadgets, including the vulnerable gadget in separate iframes. Lastly, the attackerâ€™s payload replaces the content of the vulnerable gadgetâ€™s iframe in the new window with contents of their choice. This cross-window scripting is a powerful technique for compromising the integrity of the iGoogle platform.