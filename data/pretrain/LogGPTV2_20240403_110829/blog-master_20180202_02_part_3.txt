 Append  (cost=149.08..961.21 rows=22896 width=48)  
   ->  Merge Join  (cost=149.08..240.30 rows=5724 width=48)  
         Merge Cond: (aaa0.order_id = bbb0.order_id)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: aaa0.order_id  
               ->  Seq Scan on aaa0  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=8)  
               Sort Key: bbb0.order_id  
               ->  Seq Scan on bbb0  (cost=0.00..20.70 rows=1070 width=8)  
   ->  Merge Join  (cost=149.08..240.30 rows=5724 width=48)  
         Merge Cond: (aaa1.order_id = bbb1.order_id)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: aaa1.order_id  
               ->  Seq Scan on aaa1  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=8)  
               Sort Key: bbb1.order_id  
               ->  Seq Scan on bbb1  (cost=0.00..20.70 rows=1070 width=8)  
   ->  Merge Join  (cost=149.08..240.30 rows=5724 width=48)  
         Merge Cond: (aaa2.order_id = bbb2.order_id)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: aaa2.order_id  
               ->  Seq Scan on aaa2  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=8)  
               Sort Key: bbb2.order_id  
               ->  Seq Scan on bbb2  (cost=0.00..20.70 rows=1070 width=8)  
   ->  Merge Join  (cost=149.08..240.30 rows=5724 width=48)  
         Merge Cond: (aaa3.order_id = bbb3.order_id)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: aaa3.order_id  
               ->  Seq Scan on aaa3  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=8)  
               Sort Key: bbb3.order_id  
               ->  Seq Scan on bbb3  (cost=0.00..20.70 rows=1070 width=8)  
(33 rows)  
```  
## 性能对比  
对比单表、分区表（智能JOIN）的性能。  
数据量1亿，HASH分区，32个分区。大家都使用并行，并行度一样。  
1、单表  
```  
create table a(id int, info text);  
alter table a set (parallel_workers =32);  
insert into a select generate_series(1,100000000), md5(random()::text);  
```  
2、分区表  
```  
CREATE TABLE b (id int, info text) PARTITION BY HASH (id);  
do language plpgsql $$  
declare  
begin  
  for i in 0..31 loop  
    execute format('CREATE TABLE b%s PARTITION OF b FOR VALUES WITH (MODULUS 32, REMAINDER %s)', i, i);  
    execute format('alter table b%s set (parallel_workers=32)', i);  
  end loop;  
end;  
$$;  
insert into b select generate_series(1,100000000), md5(random()::text);  
```  
3、性能对比  
```  
set parallel_setup_cost =0;  
set parallel_tuple_cost =0;  
set min_parallel_table_scan_size =0;  
set min_parallel_index_scan_size =0;  
set max_parallel_workers_per_gather =32;  
```  
单表  
```  
explain analyze select count(*) from a t1 join a t2 using (id) group by mod(hashtext(t1.info), 32);  
postgres=# explain analyze select count(*) from a t1 join a t2 using (id) group by mod(hashtext(t1.info), 32);  
                                                                          QUERY PLAN                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=2263558.48..6833369.72 rows=81819969 width=12) (actual time=13693.081..14677.473 rows=63 loops=1)  
   Group Key: (mod(hashtext(t1.info), 32))  
   ->  Gather Merge  (cost=2263558.48..5106069.86 rows=100000064 width=12) (actual time=13679.757..14676.917 rows=2079 loops=1)  
         Workers Planned: 32  
         Workers Launched: 32  
         ->  Partial GroupAggregate  (cost=2263557.65..2333870.19 rows=3125002 width=12) (actual time=13537.336..14481.211 rows=63 loops=33)  
               Group Key: (mod(hashtext(t1.info), 32))  
               ->  Sort  (cost=2263557.65..2271370.15 rows=3125002 width=4) (actual time=13523.386..14056.543 rows=3030303 loops=33)  
                     Sort Key: (mod(hashtext(t1.info), 32))  
                     Sort Method: external merge  Disk: 33920kB  
                     Worker 0:  Sort Method: external merge  Disk: 41224kB  
                     Worker 1:  Sort Method: external merge  Disk: 44792kB  
                     Worker 2:  Sort Method: external merge  Disk: 38296kB  
                     Worker 3:  Sort Method: external merge  Disk: 35640kB  
                     Worker 4:  Sort Method: external merge  Disk: 44672kB  
                     Worker 5:  Sort Method: external merge  Disk: 42608kB  
                     Worker 6:  Sort Method: external merge  Disk: 47680kB  
                     Worker 7:  Sort Method: external merge  Disk: 47040kB  
                     Worker 8:  Sort Method: external merge  Disk: 36960kB  
                     Worker 9:  Sort Method: external merge  Disk: 47288kB  
                     Worker 10:  Sort Method: external merge  Disk: 38896kB  
                     Worker 11:  Sort Method: external merge  Disk: 43032kB  
                     Worker 12:  Sort Method: external merge  Disk: 41184kB  
                     Worker 13:  Sort Method: external merge  Disk: 37392kB  
                     Worker 14:  Sort Method: external merge  Disk: 41448kB  
                     Worker 15:  Sort Method: external merge  Disk: 48344kB  
                     Worker 16:  Sort Method: external merge  Disk: 38712kB  
                     Worker 17:  Sort Method: external merge  Disk: 45608kB  
                     Worker 18:  Sort Method: external merge  Disk: 38904kB  
                     Worker 19:  Sort Method: external merge  Disk: 37448kB  
                     Worker 20:  Sort Method: external merge  Disk: 44784kB  
                     Worker 21:  Sort Method: external merge  Disk: 40408kB  
                     Worker 22:  Sort Method: external merge  Disk: 39904kB  
                     Worker 23:  Sort Method: external merge  Disk: 43144kB  
                     Worker 24:  Sort Method: external merge  Disk: 35720kB  
                     Worker 25:  Sort Method: external merge  Disk: 48360kB  
                     Worker 26:  Sort Method: external merge  Disk: 41960kB  
                     Worker 27:  Sort Method: external merge  Disk: 42416kB  
                     Worker 28:  Sort Method: external merge  Disk: 37712kB  
                     Worker 29:  Sort Method: external merge  Disk: 45280kB  
                     Worker 30:  Sort Method: external merge  Disk: 45752kB  
                     Worker 31:  Sort Method: external merge  Disk: 36072kB  
                     ->  Parallel Hash Join  (cost=915854.55..1877609.41 rows=3125002 width=4) (actual time=9832.233..12171.841 rows=3030303 loops=33)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Seq Scan on a t1  (cost=0.00..864584.03 rows=3125002 width=37) (actual time=0.022..772.247 rows=3030303 loops=33)  
                           ->  Parallel Hash  (cost=864584.03..864584.03 rows=3125002 width=4) (actual time=3674.043..3674.043 rows=3030303 loops=33)  
                                 Buckets: 131072  Batches: 2048  Memory Usage: 3232kB  
                                 ->  Parallel Seq Scan on a t2  (cost=0.00..864584.03 rows=3125002 width=4) (actual time=0.027..723.891 rows=3030303 loops=33)  
 Planning time: 0.130 ms  
 Execution time: 21241.336 ms  
(50 rows)  
```  
分区表  
```  
set enable_partition_wise_join =on;  
explain analyze select count(*) from b t1 join b t2 using (id) group by mod(hashtext(t1.info), 32);  
postgres=# explain analyze select count(*) from b t1 join b t2 using (id) group by mod(hashtext(t1.info), 32);  
                                                                                 QUERY PLAN                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=614852193.02..614852244.02 rows=200 width=12) (actual time=7204.477..7204.930 rows=63 loops=1)  
   Group Key: (mod(hashtext(t1_19.info), 32))  
   ->  Sort  (cost=614852193.02..614852209.02 rows=6400 width=12) (actual time=7204.463..7204.642 rows=2079 loops=1)  
         Sort Key: (mod(hashtext(t1_19.info), 32))  
         Sort Method: quicksort  Memory: 194kB  
         ->  Gather  (cost=614851785.41..614851788.41 rows=6400 width=12) (actual time=7203.693..7204.108 rows=2079 loops=1)  
               Workers Planned: 32  
               Workers Launched: 32  
               ->  Partial HashAggregate  (cost=614851785.41..614851788.41 rows=200 width=12) (actual time=7015.166..7015.178 rows=63 loops=33)  
                     Group Key: mod(hashtext(t1_19.info), 32)  
                     ->  Result  (cost=28593.10..469548988.58 rows=29060559366 width=4) (actual time=3619.535..6398.725 rows=3030303 loops=33)  
                           ->  Parallel Append  (cost=28593.10..33640598.09 rows=29060559366 width=32) (actual time=3619.533..5727.722 rows=3030303 loops=33)  
                                 ->  Parallel Hash Join  (cost=28802.97..1931500.70 rows=1712811342 width=32) (actual time=1866.954..2706.440 rows=1564195 loops=2)  
                                       Hash Cond: (t1_19.id = t2_19.id)  
                                       ->  Parallel Seq Scan on b19 t1_19  (cost=0.00..27104.65 rows=103465 width=36) (actual time=0.020..369.823 rows=1564195 loops=2)  
                                       ->  Parallel Hash  (cost=27104.65..27104.65 rows=103465 width=4) (actual time=847.192..847.192 rows=1564195 loops=2)  
                                             Buckets: 131072  Batches: 64  Memory Usage: 2976kB  
                                             ->  Parallel Seq Scan on b19 t2_19  (cost=0.00..27104.65 rows=103465 width=4) (actual time=0.023..783.139 rows=3128390 loops=1)  
                                 ->  Parallel Hash Join  (cost=28797.52..1930765.83 rows=1712154401 width=32) (actual time=1836.637..2732.267 rows=1563871 loops=2)  
                                       Hash Cond: (t1_23.id = t2_23.id)  
                                       ->  Parallel Seq Scan on b23 t1_23  (cost=0.00..27099.45 rows=103445 width=36) (actual time=0.015..745.650 rows=3127742 loops=1)  
                                       ->  Parallel Hash  (cost=27099.45..27099.45 rows=103445 width=4) (actual time=840.882..840.882 rows=1563871 loops=2)  
                                             Buckets: 131072  Batches: 64  Memory Usage: 2976kB  
                                             ->  Parallel Seq Scan on b23 t2_23  (cost=0.00..27099.45 rows=103445 width=4) (actual time=0.025..762.816 rows=3127742 loops=1)  
                                 ->  Parallel Hash Join  (cost=28792.08..1930183.67 rows=1711497585 width=32) (actual time=1808.072..2566.087 rows=1563583 loops=2)  
                                       Hash Cond: (t1_21.id = t2_21.id)  
                                       ->  Parallel Seq Scan on b21 t1_21  (cost=0.00..27094.26 rows=103426 width=36) (actual time=0.011..727.971 rows=3127166 loops=1)  