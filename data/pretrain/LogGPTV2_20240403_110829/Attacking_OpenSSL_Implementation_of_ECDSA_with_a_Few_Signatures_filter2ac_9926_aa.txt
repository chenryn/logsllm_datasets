title:Attacking OpenSSL Implementation of ECDSA with a Few Signatures
author:Shuqin Fan and
Wenbo Wang and
Qingfeng Cheng
Attacking OpenSSL Implementation of ECDSA with a Few
Signatures
State Key Laboratory of
Luoyang University of Foreign
School of Computer Science
Wenbo Wang
Qingfeng Cheng
Shuqin Fan
Cryptology
P.O. Box 5159
Beijing, 100878, P.R.China
PI:EMAIL
Languages
Luoyang, Henan, P.R.China
&
State Key Laboratory of
Cryptology
P.O. Box 5159
and Technology
Xidian University
Xi’an, Shanxi, P.R.China
&
Luoyang University of Foreign
Languages
Beijing, 100878,P.R.China
wangwenbo0305@-
Luoyang, Henan, P.R.China
PI:EMAIL
sina.com
ABSTRACT
In this work, we give a lattice attack on the ECDSA imple-
mentation in the latest version of OpenSSL, which imple-
ment the scalar multiplication by windowed Non-Adjacent
Form method. We propose a totally di(cid:11)erent but more ef-
(cid:12)cient method of extracting and utilizing information from
the side-channel results, remarkably improving the previous
attacks. First, we develop a new e(cid:14)cient method, which can
extract almost all information from the side-channel results,
obtaining 105.8 bits of information per signature on average
for 256-bit ECDSA. Then in order to make the utmost of our
extracted information, we translate the problem of recover-
ing secret key to the Extended Hidden Number Problem,
which can be solved by lattice reduction algorithms. Final-
ly, we introduce the methods of elimination, merging, most
signi(cid:12)cant digit recovering and enumeration to improve the
attack. Our attack is mounted to the secp256k1 curve, and
the result shows that only 4 signatures would be enough to
recover the secret key if the Flush+Reload attack is im-
plemented perfectly without any error,which is much better
than the best known result needing at least 13 signatures.
CCS Concepts
•Security and privacy → Digital signatures; Crypt-
analysis and other attacks; Side-channel analysis and
countermeasures;
Keywords
ECDSA; OpenSSL; lattice attack; windowed Non-Adjacent
Form; Extended Hidden Number Problem; Flush+Reload
attack
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c⃝ 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978400
1.
INTRODUCTION
The Elliptic Curve Digital Signature Algorithm (ECDSA)
[14] which was (cid:12)rst proposed by Scott Vanstone [27] in 1992,
is the most popular signature scheme due to its small key
size and high security. It was included in many standards,
including the ISO standard, the ANSI standard, the IEEE
standard, and FIPS, etc. ECDSA has been widely used in
many cases, such as the Austrian Citizen Card { Austrian e-
ID [11], the Apple’s CommonCrypto framework (as included
in iOS versions 7.1.2 through 8.3), OpenSSL[1], etc. The
Bitcoin [19], a decentralized electronic currency system, also
relies on ECDSA to authenticate transactions.
The mathematical basis for the security of ECDSA is the
computational intractability of the elliptic curve discrete log-
arithm problem (ECDLP). However, most real-world cryp-
tographic vulnerabilities do not stem from a weakness in
the hardness assumption, but rather from implementations
issues such as side-channel attacks, software bugs or design
(cid:13)aws.
One of the most popular software implementations of ECD-
SA is the OpenSSL [1] implementation. As a commonly used
open-source cryptographic library, OpenSSL has been wide-
ly used to implement Secure Sockets Layer (SSL) protocol
and Transport Layer Security (TLS) protocol, as well as
OpenPGP and other cryptographic standards. In the lat-
est version of OpenSSL (version 1.0.2h, published in May 3,
2016), the scalar multiplication in ECDSA is implemented
using the windowed non-adjacent form (wNAF) algorithm
[16, 7, 24] by default.
After the seminal work of side-channel attack by Kocher
et al. [15], more recent works [22, 2, 4, 25, 5, 30, 13] focus
on cache side-channel attacks on software implementations.
In 2013, Yarom and Falkner [29] proposed a new method of
cache side-channel attack, the Flush+Reload attack.
It
targets the Last Level Cache (LLC) so that the attack can
be mounted between di(cid:11)erent cores. The Flush+Reload
attack can be used to observe the execution of ECDSA in
OpenSSL, being able to get the sequence of point additions
and doubling (denoted as the double-and-add chain) used
to executes the scalar multiplication, which can be further
utilized to recover the ECDSA secret key. In fact, a small
leakage of information on the scalar (the ephemeral key k) in
1505each signature can be combined to obtain the entire secret
key.
Generally speaking, there are mainly three aspects that
may a(cid:11)ect the attacks on ECDSA implementation: the (cid:12)rst
one is the implementation of scalar multiplication, which in-
cludes the method of wNAF representation, the double-and-
add method, the sliding-window method, etc.; the second
one is the method of side-channel attack determining what
information can be achieved; the third one is the way of ex-
tracting and utilizing the achieved information. Take the
Flush+Reload attack for example. If the double-and-add
method is used, then obtaining the double-and-add chain
using the Flush+Reload attack means that the scalar it-
self can be fully recovered; if the sliding-window method is
used, then according to [10], the secret key can be easily
broken since the double-and-add chain helps to directly de-
termine some discrete bits of the ephemeral key. For the
wNAF representation, as it converts a scalar into a chain of
signed digit, it is not easy to obtain direct information on
the bits of the scalar from the double-and-add chain due to
the existence of negative digits.
In this paper, we focus on the ECDSA implementation
of OpenSSL using the wNAF representation, assuming that
the Flush+Reload attack is used to obtain the double-and-
add chain of the scalar multiplication. Then here comes the
question:
Question: How can we take the utmost of the double-
and-add chain in order to extract the information of the
ephemeral key as much as possible? How should we fully
utilize the extracted knowledge so that we can recover the
ECDSA secret key using as few signatures as possible?
Analysis: Though it is not easy to obtain direct informa-
tion of the ephemeral key with the wNAF method, several
works give the methods of extracting and utilizing infor-
mation from the double-and-add chain. In 2014, Benger et
al. extracted several least signi(cid:12)cant bits (LSBs) from the
double-and-add chain [3]. But the number of bits extracted
from each signature is very small, only average number of 2
bits (
sults in more than 200 signatures needed to recover a 256-bit
secret key.
∑∞
i=1 i/2i ≈ 2) information can be obtained, which re-
In 2015, van de Pol et al. derived a more e(cid:11)ective way
of exacting information from the double-and-add chain [26].
As they stated that, it is able to extract average 47.6 bits per
signature, recovering the secret key of the secp256k1 curve
with 13 signatures, assuming a perfect Flush+Reload at-
tack without error. Their method of extracting information
relies on the property of some special curves, i.e., the order
q of the base point is a pseudo-Mersenne prime, which can
be expressed as 2n − ε, where |ε|  256). Due to the
limited capabilities of computation and lattice reduction al-
gorithms, the best result we can get is that 4 signatures are
enough to recover the secret key. Comparisons of our attack
with the attack of [3] and [26] are presented in Table 1. As
1506Table 1: Comparison of our results and the results
of [3] and [26]
(Nsig denotes number of signatures assuming perfect
Flush+Reload attack results are obtained; p denotes the
success probability; Nsig/p denotes the ratio of the number
of signatures and the success probability)
[3]
[26]*
Attack Nsig
200
460
13
4
5
6
7
ours*
p
Nsig/p
3.5% 5714.28
92%
54%
8%
900
24.07
50
37.5%
90%
94%
13.33
6.67
7.45
(*Note: Assuming perfect Flush+Reload attack results
are obtained)
we can see that, both the number of signatures we need to
recover a 256-bit ECDSA secret key and the ratio of the
number of signatures and the success probability of our at-
tack is much smaller, which indicates that our attack is far
more e(cid:14)cient.
Roadmap. The rest of the paper is organized as follows:
In Section 2, we brie(cid:13)y introduce the background of ECD-
SA, OpenSSL implementation using wNAF and the Flush+
Reload side-channel attack, the EHNP is also introduced
as it is the basis of our attack. Then in Section 3, our lattice
attack method is introduced based on the EHNP and the w-
NAF representation, with knowledge of perfect side-channel
attack results. We further introduce some improvements to
our attack, including the methods of elimination, merging,
MSD recovering and enumeration.
In Section 4, the con-
crete experiment results are stated, concerning the success
probability and consuming time.
2. PRELIMINARIES
In this section we describe the basic knowledge of ECD-
SA and its implementation in OpenSSL using the wNAF
representation, as well as the Flush+Reload attack. The
EHNP is also introduced for it is an important tool of our
attack.
2.1 The Elliptic Curve Digital Signature Al-
gorithm
The Elliptic Curve Digital Signature Algorithm (ECDSA)
[14] is the elliptic curve analogue of the Digital Signature
Algorithm (DSA) [8], adapting one step of the DSA from the
multiplicative group of a (cid:12)nite (cid:12)eld to the group of points
on an elliptic curve.
Let E be an elliptic curve de(cid:12)ned over a (cid:12)nite (cid:12)eld Fp
where p is prime and G ∈ E be a (cid:12)xed point of a large prime
order q. Both G and q are publicly known. The secret key
of a signer is an integer 0  2w then
ei = ei − 2w+1
1: i = 0
2: while k > 0 do
3:
4:
5:
6:
7:
8:
9:
10:
end if
11:
k = k/2
12:
13:
i = i + 1