n
):
i)i∈[n]) ← Setup′(1λ, F m,X,Y
Setup(1λ, F m,X,Y
(pk′, msk′, (ek′
(IP.eki, IP.mski) ← IP.Setup(1λ, gpk, F m,X,Y
msk := (msk′,{IP.mski}i∈[n]).
Return (pk, msk,{eki}i∈[n]).
Enc(pk, eki, xi, ℓ):
[cℓ,i] ← Enc′(pk′, ek′
Return Cℓ,i := IP.Enc(gpk, IP.eki, [cℓ,i])
i, xi, ℓ)
IP
), gpk ← IP.GSetup(1λ, F m,X,Y
IP
for all i ∈ [n],
i, pk := (pk′, gpk,{IP.eki}i∈[n]),
),
:= ek′
), eki
KeyGen(pk, msk, y := y1k···kyn):
dk′
Return dky := (dk′
y,{dkyi}i∈[n]).
Parse dky = (dk′
y ← KeyGen′(pk′, msk′, y), and for all i ∈ [n]: dkyi ← IP.KeyGen(gpk, IP.mski, yi).
Dec(cid:0)pk, dky,{Cℓ,i}i∈[n], ℓ):
y = (y, d). For all i ∈ [n], compute [αℓ,i] ←
IP.Dec(gpk, Cℓ,i, dkyi). Then [uℓ] = H(ℓ), [α] = [Pi αℓ,i] − [uℓ]⊤d. Finally, it returns the dis-
crete logarithm α ∈ Zp.
Figure 6.5: MCFE, a many-AD-IND-weak secure MCFE for inner product. Here, MCFE ′
:=
(Setup′, Enc′, KeyGen′, Dec′) is the one-AD-IND-weak secure from Section 6.1, and IPFE :=
(IP.GSetup, IP.Setup, IP.Enc, IP.KeyGen, IP.Dec) is a many-AD-IND secure, public-key, single-input inner
product FE. Here, H denotes the hash function that is part of pk′.
y,{dkyi}i∈[n]), where dk′
input slot i ∈ [n] and label ℓ. In the many-AD-IND-weak security game, however, we may
have many such queries, and we use an index j ∈ [Qi,ℓ] to enumerate over such queries, where
Qi,ℓ denotes the number of queries to OEnc which contain the input i ∈ [n] and the label ℓ.
That is, we call (xj,0
i ) the j’th query to OEnc on label ℓ and slot i. The proof goes in two
steps:
, xj,1
i
i
) + x1,1
1 , . . . , x1,0
i − x1,0
n to those of x1,1
• We ﬁrst switch encryptions of x1,0
n all at once, and for
the remaining ciphertexts, we switch from an encryption of xj,0
to
that of (xj,0
. We can do so using the one-AD-IND-weak security of MCFE,
and the fact that its encryption algorithm is linear homomorphic. In particular, given
i − x1,0
an encryption of x1,β
), we can produce (only
with the public key) an encryption of (xj,0
. Thus, we can generate all the
challenge ciphertexts only from the security game where there is only a single ciphertext
in each slot and label.
for β ∈ {0, 1}, and the vector (xj,0
) + x1,β
i − x1,0
i − x1,0
1 , . . . , x1,1
i = (xj,0
) + x1,0
i
i
i
i
i
i
i
• Then, we switch from encryptions of
(x2,0
i − x1,0
i
) + x1,1
i
to those of
, . . . , (xQi,0
i − x1,0
i
) + x1,1
i
(x2,1
i − x1,1
i
) + x1,1
i
, . . . , (xQi,1
i − x1,1
i
) + x1,1
i
.
To carry out the latter hybrid argument, we use the fact that the queries must satisfy the
constraint:
[c⊤
i + xj,0
i + xj,1
0,iyi] = [x1,1
= [x1,1
= [c1,i]⊤yi,
i − x1,0
i − x1,1
i
i
]⊤yi + [Siuℓ]⊤yi
]⊤yi + [Siuℓ]⊤yi
126
Chapter 6. Multi-Client Inner Product Functional Encryption
i
i
i
, ℓ).
i, x1,1
i + xj,b
i − x1,b
i − x1,1
i − x1,0
, yii = hxj,1
the restriction imposed by the security game (see Remark 7).
where Enc′ denotes the encryption algorithm of MCFE ′ from Figure 6.2, and for all b ∈ {0, 1},
[cb,i] := Enc′(pk′, ek′
The second equality is equivalent to hxj,0
, yii, which follows from
Thus, we can use the many-AD-IND security of the single-input FE IPFE for n instances
(which is implied by the single instance many-AD-IND security, see Lemma 5), to switch
simultaneously all the challenge ciphertexts for all slots i ∈ [n]. As explained in the beginning
of this section, the construction is essentially the same construction than multi-input FE for
inner product as in Section 5.4, except we replace the perfectly, one-time secure MIFE used in
the inner layer, by the one-time secure MCFE from Figure 6.2.
Proof of Theorem 16. We proceed via a series of games, described in Figure 6.6. Let A be
a PPT adversary. For any game G, we denote by AdvG(A) the probability that the game G
outputs 1 when interacting with A. Note that we have:
Advmany-AD-IND-weak
MCFE,A
(λ) = |AdvG0(A) − AdvG2(A)|,
according to Deﬁnition 25.
is as game G0, except we replace the challenge ciphertexts to ctj
Game G1:
xj,0
i − x1,0
Namely, we prove in Lemma 40 that there exists a PPT adversary B1 such that:
i = Enc(pk, eki,
) for all i ∈ [n] and j ∈ [Qi], using the one-AD-IND-weak security of MIFE ′.
i + x1,1
i
AdvG0(A) − AdvG1(A) ≤ Advone-AD-IND-weak
MCF E ′,B1
(λ).
Game G2: we replace the challenge ciphertexts to ctj
) =
Enc(pk, eki, xj,1
i ) for all i ∈ [n] and j ∈ [Qi], using the many-AD-IND security of IPFE for
n instances, which is implied by the single-instance security (see Lemma 5). We prove in
Lemma 41 that there exists a PPT adversary B2 such that:
i = Enc(pk, eki, xj,1
i − x1,1
i + x1,1
i
Adv1(A) − Adv2(A) ≤ Advmany-AD-IND
IPFE,B2,n (λ).
Putting everything together, we obtain:
Advmany-AD-IND-weak
MCFE,A
(λ) ≤ Advone-AD-IND-weak
MCF E ′,B1
(λ) + Advmany-AD-IND
IPFE,B2,n (λ).
Lemma 40: Game G0 to G1
There exists a PPT adversary B1 such that
|AdvG0(A) − AdvG1(A)| ≤ Advone-AD-IND-weak
MCFE ′,B1
(λ).
, ℓ) = Enc(pk, eki, x1,0
Proof of Lemma 40. In game G1, which is described in Figure 6.6, we replace Enc(pk, eki,
xj,0
), ℓ) for all
i
i ∈ [n], j ∈ [Qi]. This is justiﬁed by the following properties:
), ℓ) with Enc(pk, eki, x1,1
i − x1,0
i − x1,0
i + (xj,0
i + (xj,0
i
i
• one-AD-IND-weak security of MCFE ′;
• the fact that Enc′ is linearly homomorphic. Namely, for all i ∈ [n], given Enc′(pk′, ek′
i,
i − x1,0
)
x1,β
i
(corresponding to challenge ciphertexts in slot i in game Gβ).
and pk′, we can create an encryption Enc′(pk′, ek′
i − x1,0
i + xj,0
i, x1,β
), xj,0
i
i
The adversary B1 proceeds as follows.
6.2 From one to many ciphertext for MCFE
127
Games G0, G1 , G2 :
(pk, msk, (eki)i∈[n]) ← Setup(1λ, F m,X,Y
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·)(pk,{eki}i∈CS)
Return α if condition 1 and extra condition from Deﬁnition 25 of many-AD-IND-weak
security are satisﬁed; otherwise, return 0.
)
n
i
, xj,1
OEnc(i, (xj,0
i ), ℓ):
ctj
i := Enc(pk, eki, xj,0
ctj
i := Enc(pk, eki, xj,0
i := Enc(pk, eki, xj,1
ctj
Return ctj
i .
i
i − x1,0
i − x1,0
i − x1,1
i + x1,0
)
i + x1,1
)
i + x1,1
)
i
i
OKeygen(y1k···kyn):
Return KeyGen(pk, msk, y1k···kyn).
OCorrupt(i):
Return eki.
Figure 6.6: Games for the proof of Theorem 16.
-Simulation of pk:
The adversary B samples gpk ← GSetup(1λ, F m,X,Y
IP.Setup(1λ, gpk, F m,X,Y
pk := (pk′, gpk,{IP.eki}i∈[n]) to A.
).
IP
IP
It receives a public key pk′ from its own experiment.
), and for all i ∈ [n], (eki, mski) ←
It returns
i
, xj,1
i ), ℓ):
i, x1,β
i ] := Enc′(pk′, ek′
-Simulation of OEnc(i, (xj,0
If j = 1, that is, it is the ﬁrst query for slot i ∈ [n] and label ℓ, then B1 queries its own
oracle to get [c1
, ℓ), where β ∈ {0, 1}, depending on the experiment
If j > 1, B1 uses the fact that MCFE ′ is linearly homomorphic to
B1 is interacting with.
generate all the remaining ciphertexts ctj
i for i ∈ [n], j ∈ {2, . . . , Qi} by combining cti =
i, x1,β
Enc′(pk′, ek′
i +
xj,0
i − x1,0
, ℓ), which matches the challenge ciphertexts in Game Gβ. Note that this can be
done using pk′ only. Moreover, there is no need to rerandomize the challenge ciphertext, since
the encryption is deterministic in MCFE ′. Then, for all i ∈ [n] and all j ∈ [Qi], B1 computes
ctj
i := IP.Enc(gpk, IP.eki, [cj
to obtain an encryption Enc′(pk′, ek′
, ℓ) with the vector xj,0
i − x1,0
i, x1,β
i
i
i
i