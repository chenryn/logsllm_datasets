zerocoins to fresh ones before the old parameters expire.
For our prototype implementation, we chose to use 1024 bit
parameters on the assumption that commitment parameters
could be regenerated periodically. We explore the possibility
of extensions to Zerocoin that might enable smaller groups
in Section IX.
Accumulator RSA key. Because generating a new accumulator
requires either a new trusted setup phase or generating a
new RSA UFO [26], we cannot re-key very frequently. As a
result, the accumulator is long lived, and thus we truly need
long term security. Therefore we currently propose an RSA
key of at least 3072 bits. We note that this does not greatly
affect the size of the coins themselves, and, because the proof
of accumulator membership is efÔ¨Åcient, this does not have
a large adverse effect on the overall coin spend proof size.
Moreover, although re-keying the accumulator is expensive,
it need not reduce the anonymity of the system since the new
parameters can be used to re-accumulate the existing coin
set and hence anonymize spends over that whole history.
Zero-knowledge proof security Œªzkp. This parameter affects
the anonymity and security of the zero-knowledge proof. It
also greatly affects the size of the spend proof. Thankfully,
since each proof is independent, it applies per proof and
therefore per spend. As such, a dishonest party would have
to expend roughly 2Œªzkp effort to forge a single coin or could
link a single coin mint to a spend with probability roughly
2Œªzkp . As such we pick Œªzkp = 80 bits.
VII. PERFORMANCE
1
To validate our results, we conducted several experiments
using the modiÔ¨Åed bitcoind implementation described
in Section V. We ran our experiments with three different
18Note that this conversion need not involve a full spend of the coins.
The user may simply reveal the trapdoor for the old coin, since the new
zerocoin will still be unlinkable when properly spent.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
 !"
!#$
%












	







!
&!
'
(

































	

(a) Times for a single Zerocoin operation measured in seconds. These
operations do not include the time required to compute the accumulator.
(b) Zerocoin proof sizes measured in bytes as a function of RSA
modulus size.



	

	
		












	







!
!
!	






 















 !












	

	



(c) Time required to accumulate x elements. Note, this cost is amortized
when computing the global accumulator.
(d) Transaction veriÔ¨Åcations per minute as a function of the percentage
of Zerocoin transactions in the network (where half are mints and half
are spends). Note, since we plot the reciprocal of transaction time, this
graph appears logarithmic even though Zerocoin scales linearly.
Figure 3: Zerocoin performance as a function of parameter size.
parameter sizes, where each corresponds to a length of the
RSA modulus N: 1024 bits, 2048 bits, and 3072 bits.19
We conducted two types of experiments: (1) microbench-
marks that measure the performance of our cryptographic
constructions and (2) tests of our whole modiÔ¨Åed Bitcoin
client measuring the time to verify Zerocoin carrying blocks.
The former gives us a reasonable estimate of the cost of
minting a single zerocoin, spending it, and verifying the
resulting transaction. The latter gives us an estimate of
Zerocoin‚Äôs impact on the existing Bitcoin network and the
computational cost that will be born by each node that veriÔ¨Åes
Zerocoin transactions.
All of our experiments were conducted on an Intel Xeon
E3-1270 V2 (3.50GHz quad-core processor with hyper-
threading) with 16GB of RAM, running 64-bit Ubuntu Server
11.04 with Linux kernel 2.6.38.
19These sizes can be viewed as roughly corresponding to a discrete
logarithm/factorization security level of 280, 2112, and 2128 respectively.
Note that the choice of N determines the size of the parameter p. We select
|q| to be roughly twice the estimated security level.
A. Microbenchmarks
To evaluate the performance of our Mint, Spend, and
Verify algorithms in isolation, we conducted a series of
microbenchmarks using the Charm (Python) implementation.
Our goal in these experiments was to provide a direct estimate
of the performance of our cryptographic primitives.
Experimental setup. One challenge in conducting our mi-
crobenchmarks is the accumulation of coins in C for the
witness in Spend(. . .) or for the global accumulator in both
Spend(. . .) and Verify(. . .). This is problematic for two
reasons. First, we do not know how large C will be in
practice. Second, in our implementation accumulations are
incremental. To address these issues we chose to break our
microbenchmarks into two separate experiments. The Ô¨Årst
experiment simply computes the accumulator for a number of
possible sizes of C, ranging from 1 to 50,000 elements. The
second experiment measures the runtime of the Spend(. . .)
and Verify(. . .) routines with a precomputed accumulator
and witness (A, œâ).
We conducted our experiments on a single thread of the
processor, using all three parameter sizes. All experiments
406
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
were performed 500 times, and the results given represent
the average of these times. Figure 3a shows the measured
times for computing the coin operations, Figure 3b shows
the resulting proof sizes for each security parameter, and
Figure 3c shows the resulting times for computing the
accumulator. We stress that accumulation in our system is
incremental, typically over at most the 200‚àí500 transactions
in a block (which takes at worst eight seconds), and hence
the cost of computing the global accumulator is therefore
amortized. The only time one might accumulate 50,000 coins
at one time would be when generating the witness for a very
old zerocoin.
B. Block VeriÔ¨Åcation
How Zerocoin affects network transaction processing de-
termines its practicality and scalability. Like all transactions,
Zerocoin spends must be veriÔ¨Åed Ô¨Årst by the miner to make
sure he is not including invalid transactions in a block and
then again by the network to make sure it is not including an
invalid block in the block chain. In both cases, this entails
checking that Verify(. . .) = 1 for each Zerocoin transaction
and computing the accumulator checkpoint.
We need to know the impact of this for two reasons. First,
the Bitcoin protocol speciÔ¨Åes that a new block should be
created on average once every 10 minutes.20 If veriÔ¨Åcation
takes longer than 10 minutes for blocks with a reasonable
number of zerocoins, then the network cannot function.21
Second, while the cost of generating these blocks and
verifying their transactions can be offset by transaction
fees and coin mining, the cost of verifying blocks prior to
appending them to the block chain is only offset for mining
nodes (who can view it as part of the cost of mining a new
block). This leaves anyone else verifying the block chain
with an uncompensated computational cost.
Experimental setup. To measure the effect of Zerocoin on
block veriÔ¨Åcation time, we measure how long it takes our
modiÔ¨Åed bitcoind client to verify externally loaded test
blocks containing 200, 400, and 800 transactions where 0,
10, 25, 75, or 100 percent of the transactions are Zerocoin
transactions (half of which are mints and half are spends).
We repeat this experiment for all three security parameters.
Our test data consists of two blocks. The Ô¨Årst contains z
Zerocoin mints that must exist for any spends to occur. The
second block is our actual test vector. It contains, in a random
order, z Zerocoin spends of the coins in the previous block,
z Zerocoin mints, and s standard Bitcoin sendToAddress
transactions. We measure how long the processblock
call of the bitcoind client takes to verify the second
block containing the mix of Zerocoin and classical Bitcoin
20This rate is maintained by a periodic network vote that adjusts the
difÔ¨Åculty of the Bitcoin proof of work.
21For blocks with unreasonable numbers of Zerocoin transaction we can
simply extend bitcoind‚Äôs existing anti-DoS mechanisms to reject the
block and blacklist its origin.
transactions. For accuracy, we repeat these measurements
100 times and average the results. The results are presented
in Figure 3d.
C. Discussion
Our results show that Zerocoin scales beyond current
Bitcoin transaction volumes. Though we require signiÔ¨Åcant
computational effort, veriÔ¨Åcation does not fundamentally
threaten the operation of the network: even with a block
containing 800 Zerocoin transactions ‚Äî roughly double the
average size of a Bitcoin block currently ‚Äî veriÔ¨Åcation
takes less than Ô¨Åve minutes. This is under the unreasonable
assumption that all Bitcoin transactions are supplanted by
Zerocoin transactions.22 In fact, we can scale well beyond
Bitcoin‚Äôs current average of between 200 and 400 transactions
per block [29] if Zerocoin transactions are not the majority
of transactions on the network. If, as the graph suggests, we
assume that veriÔ¨Åcation scales linearly, then we can support
a 50% transaction mix out to 350 transactions per minute
(3,500 transactions per block) and a 10% mixture out to 800
transactions per minute (8,000 per block).
One remaining question is at what point we start running a
risk of coin serial number collisions causing erroneous double
spends. Even for our smallest serial numbers ‚Äî 160 bits ‚Äî
the collision probability is small, and for the 256 bit serial
numbers used with the 3072 bit accumulator, our collision
probability is at worst equal to the odds of a collision on a
normal Bitcoin transaction which uses SHA-256 hashes.
We stress several caveats about the above data. First, our
prototype system does not exploit any parallelism either for
verifying multiple Zerocoin transactions or in validating an
individual proof. Since the only serial dependency for either
of these tasks is the (fast) duplicate serial number check, this
offers the opportunity for substantial improvement.
Second, the above data is not an accurate estimate of
the Ô¨Ånancial cost of Zerocoin for the network: (a) it is an
overestimate of a mining node‚Äôs extra effort when verifying