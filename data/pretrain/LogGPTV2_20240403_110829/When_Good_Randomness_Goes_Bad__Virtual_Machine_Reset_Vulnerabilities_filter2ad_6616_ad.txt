described above except Hedge is replaced by an arbitrary
keyed PRF. His security notion is orthogonal to that of [19],
meaning meeting one does not imply meeting the other (and
vice versa). Our hedging framework was inspired by these
works.
Hedged security. Formally, a PKE scheme consists of a
triple of algorithms (Kg, Enc, Dec). Key generation Kg
uses randomness to generate a public key, secret key pair
(pk, sk). Encryption Enc takes inputs a public key pk,
message M , and randomness R and outputs a ciphertext.
We denote this computation by Enc(pk, M ; R). Decryp-
tion Dec takes inputs a secret key sk and a ciphertext C
and outputs either a message M or a distinguished er-
ror symbol ⊥. We denote computing this by Dec(sk, C).
We hedge a scheme PKE by replacing Enc(pk, M ; R)
with Enc(pk, M ; Hedge(R, pk, M )). As before, decryp-
tion need not be modiﬁed.
Since we specify that Hedge be both a secure keyed PRF
and an ideal hash function, hedging a PKE scheme simul-
taneously achieves the security goals of [19] and of [52].
Indeed, the analyses given by Bellare et al. and Yilek apply
directly, and so for the (lengthy) technical details we refer
the reader to these papers [19, 52].
6.3. Symmetric Encryption
Symmetric encryption (SE) schemes are used to provide
message privacy and authenticity when two parties share
a secret key. Many schemes have randomized encryption
algorithms.
In this context the randomness used is of-
ten called the IV (initialization vector). When the IV is
repeated, existing schemes leak partial information about
plaintexts (e.g., CBC-based modes [44], OCB [47]) or even
leak plaintexts completely (e.g., CTR-based modes [44] in-
cluding GCM [40]).
Symmetric encryption robust to randomness failure was
ﬁrst proposed by Rogaway and Shrimpton [48] where they
formalize misuse-resistant authenticated encryption. They
provide new cryptographic schemes that meet this stronger
goal. A viewpoint inherent in their work is that of nonce-
based symmetric encryption due to Rogaway [46], where
the IV is an explicit input to encryption. We inherit this
viewpoint as well. Kamara and Katz [37] also suggest a
form of SE that survives some kinds of randomness failures,
but these goals and schemes handle more limited random-
ness threats. Applying our hedging framework to a tradi-
tional authenticated-encryption scheme results in the same
security levels achieved in [48], while retaining backwards
compatibility.
Informally, the achieved security prevents
Initialize:
K ∗ ←$ Kg
b ←$ {0, 1}
Enc(M, R):
C ← EncH(K ∗, M ; R)
If b = 1 then Ret C
C ′ ←$ {0, 1}|C|
Ret C ′
Dec(C):
If b = 1 then Ret Dec(K ∗, C)
Ret ⊥
Finalize(b′):
Ret (b = b′)
Game MRAESE
H(X):
If H[X] = ⊥ then
H[X] ←$ {0, 1}r
Ret H[X]
Figure 5. Security game for symmetric encryption (MRAE).
leaking anything but plaintext equality no matter how bad
the randomness.
Hedged security. Formally, an SE scheme is a triple of
algorithms (Kg, Enc, Dec). Key generation Kg uses ran-
domness to generate a key. Encryption Enc takes as input
a key K, message M , and uses randomness R to gener-
ate a ciphertext (or ⊥). We say that SE has randomness
length r when Enc only accepts R with |R| = r.
(This
check will always be implicit.) We denote executing en-
cryption by Enc(K, M ; R). Decryption Dec takes as in-
put a key K and ciphertext C and outputs either a message
M or distinguished error symbol ⊥. We denote this pro-
cess by Dec(K, C). We hedge a scheme SE by replacing
Enc(K, M ; R) with
Enc(K, M ; Hedge(R, K, M )) .
Decryption works as before.
We utilize the notions of security due to Rogaway and
Shrimpton [48] for misuse-resistant authenticated encryp-
tion. Here we measure an adversary’s ability to distinguish
between two pairs of oracles, one pair being an encryption
oracle and a decryption oracle and the other pair being an
oracle that returns an appropriately long string of random
bits and an oracle that always returns ⊥. Let SE be a sym-
metric encryption scheme with randomness length r. Game
MRAESE in Figure 5 deﬁnes security, in the random oracle
model [23], in the sense of misuse-resistant authenticated
encryption (MRAE). The notation EncH means that Enc
might use access to the random oracle implemented by pro-
cedure H. An MRAE adversary A takes no inputs, never re-
peats an encryption query or H query, and never queries Dec
on a value returned by Enc. Its advantage against scheme
SE is deﬁned by
Advmrae
(A) = 2·Pr(cid:2) MRAEA
SE ⇒ true(cid:3) − 1 .
We deﬁne the traditional notion of symmetric encryption
security via game AESE (not shown) which is the same as
MRAESE except that there is no input R to Enc and in-
stead this value is picked uniformly at random upon each
encryption query. (We omit random oracles here since we
will not need them.) An AE adversary A takes no inputs and
never queries Dec on a value returned by Enc. Its advantage
SE
against scheme SE is deﬁned by
is
SE
fact
Advae
SE(A) = 2·Pr(cid:2) AEA
that Advmrae
SE ⇒ true(cid:3) − Pr(cid:2) MRAE0A
the challenge bit b is set
that
The same holds for Advae
SE ⇒ true(cid:3) − 1 .
(A)
=
A
standard
Pr(cid:2) MRAE1A
SE ⇒ false(cid:3)
where MRAE1 (resp. MRAE0) is the same as game
to one
MRAE except
SE(A) =
(resp. zero).
Pr(cid:2) AE1A
Let SE
let MsgSp be the set of all messages
be any scheme,
SE handles, and let SE+ be the hedged version of it.
We implement Hedge via the appropriate unambiguous
encoding of the triple (R, K, M ) into a value X that is then
queried to the random oracle H. (For simplicity, we ignore
algorithm identiﬁers.) We have the following theorem.
SE ⇒ true(cid:3) − Pr(cid:2) AE0A
SE ⇒ false(cid:3).
Theorem 6.2 Let A be an MRAE adversary making at
most qh hash queries, qe < |MsgSpSE| encryption queries,
and qd decryption queries. Then there exists an AE adver-
sary B such that Advmrae
SE(B). Moreover,
B runs in time at most T(A) + qhT(Enc), makes the same
number of encryption queries, and makes at most qh + qd
decryption queries. (cid:3)
SE+ (A) ≤ 2· Advae
Note that our reduction is not entirely tight. We believe a
tighter analysis can be given, at the cost of a slightly more
involved reduction than the one we give.
Proof: We use a sequence of games to prove the theo-
rem. Let game G0 work exactly like MRAE1SE+ except
that we set a ﬂag bad if A makes a query to H encoding
a triple (R, K ∗, M ) for some R, M . Let G1 be the same
as G0 except that Enc now implements Enc instead of the
hedged function. That is, it uses true randomness and does
not query the random oracle. We have by the fundamental
lemma of game playing [25] that
Pr(cid:2) G0A ⇒ true(cid:3) − Pr(cid:2) G1A ⇒ true(cid:3)
≤ Pr(cid:2) G1A sets bad(cid:3)
where “G1A sets bad” is the event that A forces bad to be
set in game G1. Game G2 works like G1 except that Enc
queries are responded to with randomness of equal length
(i.e., using the Enc procedure of game AE0SE) and all Dec
queries are responded to with ⊥. We have that G2 is equiv-
alent to MRAE0SE+ , meaning that Pr[G2A ⇒ true] =
Pr[MRAE0SE+ ⇒ true]. Moreover we can build an ad-
versary B′ such that
Pr(cid:2) G1A ⇒ true(cid:3) − Pr(cid:2) G2A ⇒ true(cid:3)
≤ Advae
SE(B′) .
The adversary B′ just runs G1A except implementing Enc
and Dec using its oracles instead. All that remains is to
bound the setting of bad in game G1. This event indicates
that A managed to query the secret key K ∗ when given an
encryption oracle for Enc (using real randomness) and de-
cryption oracles. We will bound Pr[G1A sets bad] by an ae
adversary B′′ against SE.
The adversary B′′ works as follows.
Run A, simulating its oracles by
Enc(M, R):
M ∪← M ; C ← Enc′(M ); C ∪← C; return C
return Dec′(C)
Dec(C):
H(R, K, M ): K ∪← K; return Y ←$ {0, 1}r
A halts with output b′
Choose M /∈ M
Foreach K ∈ K do
C ←$ Enc(K, M ); If C ∈ C then Output 0
M ′ ← Dec(C); If M ′ = M then Output 1
Output 0
That is B′′ simulates G1A except using its own oracles Enc′
and Dec′ to reply to A’s encryption and decryption queries.
At the end it checks what set of oracles it has by using
the keys queried by A to H. We have that Pr[QueryK] =
Pr[G1A sets bad] where “QueryK” is the event that K ∗ is
queried by A in the event space deﬁned by AEB ′′
. More-
⇒ true | QueryKi = 1 be-
over, we have that Prh AE1B ′′
cause if the key is queried then one of Ki will pass the
decryption check B′′ executes. Moreover Pr[AE0B ′′
⇒
false] = 0 because in AE0 the decryption oracle always
returns ⊥. By conditioning on QueryK we derive that
Advae
SE(B′′) ≥ Pr[QueryK] = Pr[G1A sets bad]. Letting
B be the adversary B′ or B′′ with better advantage gives
the theorem statement.
This property of DSA was exploited by our attacks in
Section 3. Such attacks also affect many schemes built us-
ing the Fiat-Shamir transform [29].
Note that there is a folklore technique for removing ran-
domization from signature schemes (e.g. see [38]). It in-
volves adding to the secret key of a randomized signature
scheme a key for a secure PRF (e.g. HMAC). To sign a
message, then, one generates randomness for the Sign al-
gorithm deterministically by applying the PRF to the input
message. Our hedged construction follows this in spirit, but
crucially does not require modifying the description of the
secret key. Moreover, the security achieved when random-
ness is fresh is better than that obtained by the folklore tech-
nique, because the assumption on Hedge is milder.
Hedged security. Formally, a randomized DS scheme con-
sists of a triple of algorithms (Kg, Sign, Vf). Key gener-
ation Kg uses randomness to generate a (public) veriﬁca-
tion key, signing key pair (pk, sk). Signing Sign takes in-
puts a signing key sk, message M , and randomness R and
outputs a signature. We denote computing a signature by
Sign(sk, M ; R). Veriﬁcation Vf takes inputs a veriﬁca-
tion key pk, a message M , and a signature σ and outputs a
bit. We denote veriﬁcation of a signature by Vf(pk, M, σ).
We hedge a scheme DS by replacing Sign(sk, M ; R) with
Sign(sk, M ; Hedge(R, sk, M )). Veriﬁcation remains un-
modiﬁed.
DS schemes should be what is called existentially un-
forgeable against chosen message attacks (UF-CMA) [34].
Intuitively, this means that an adversary should not be able
to forge a signature on a new message, even after seeing
signatures on many chosen messages. We extend this def-
inition to treat chosen message and chosen randomness at-
tacks. Game UFCMRA in Figure 6 speciﬁes UF-CMRA se-
curity in the random oracle model. A uf-cmra adversary A
takes input a public key, never repeats a query to the ran-
dom oracle H, and outputs a bit. Game UFCMA is the
same as UFCMRA except that R is not chosen by adver-
saries for Sign queries, but rather chosen freshly at random
each for each query. We deﬁne the uf-cmra advantage of an
adversary A against signature scheme DS and the uf-cma
advantage of an adversary B also against DS by
Advuf-cmra
Advuf-cma
DS
DS
(A) = Pr(cid:2) UFCMRAA ⇒ true(cid:3)
(B) = Pr(cid:2) UFCMAB ⇒ true(cid:3) .
and
6.4. Digital Signatures
A digital signature (DS) scheme is used to sign a mes-
sage in an unforgeable manner. Many DS schemes use
randomized signing algorithms. Randomness failures cause
signiﬁcant security problems for these schemes. For exam-
ple, well-known secret key recovery attacks work against
DSA when repeated or predictable randomness is used.
For any digital signature scheme DS, let DS+ be the hedged
version of it where the hedge function is modeled by the
random oracle. Then we have the following theorem.
Theorem 6.3 Let DS be a digital signature scheme and
DS+ be its hedged version. Let A be a uf-cmra adversary
against DS+ making at most qh hash queries. Then there
exists a uf-cma adversary B such that Advuf-cmra
(A) ≤
DS+
Initialize:
(pk∗, sk∗) ←$ Kg
S ← ∅
Ret pk
Sign(M, R):
σ ← SignH(sk∗, M ; R)
Ret σ
Finalize(M, σ):
If Vf(pk∗, M, σ) = 1 then
Ret true
Ret false
Game UFCMRADS
H(X):
If H[X] = ⊥ then
H[X] ←$ {0, 1}r
Ret H[X]
Figure 6. Security game for digital signatures (UFCMRA).
DS
2 · Advuf-cma
(B). Adversary B makes the same number
of signing queries as A and runs in time that of A plus the
time to compute qh signatures and verify each. (cid:3)
Proof: Let B work as follows. On input public key pk∗ it
runs A(pk∗). When A makes a random oracle query X, ad-
versary B parses X as a triple (R, sk, M ) and then use sk
to a sign a new message M ′ not before queried and see if it
veriﬁes under pk∗. If so, halt and output the forgery. Oth-
erwise return a random value to A. When A makes signing
queries, Adversary B answers A’s signing queries using its
own oracle (and ignoring the queried value R). When A
halts outputting a forgery attempt, B outputs it.
We can see that
Pr(cid:2) UFCMRAA
DS+ ⇒ true(cid:3) ≤
Pr(cid:2) UFCMRAA
+ Pr(cid:2) UFCMRAA
DS+ ⇒ true | QuerySK(cid:3)
DS+ ⇒ true | QuerySK(cid:3)
that A
where the event QuerySK represents the event
queries challenge sk to H and QuerySK is its comple-
ment. But the right hand terms are both bounded by
Advuf-cma
(B) since, in the ﬁrst case, B succeeds using
the secret key and, in the second case, B simulates A’s ex-
periment.
DS
6.5. Key Exchange
A key exchange (KE) protocol involves two parties,
which we’ll call a client and server. The goal is for the
client and server to privately agree on a secret session