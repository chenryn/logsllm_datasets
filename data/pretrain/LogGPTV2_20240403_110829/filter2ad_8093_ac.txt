上述这段代码直接导致了Fomo3d薅羊毛事件的诞生。真实世界损失巨大，超过数千eth。
所以在合约中关于这样的应用时，考虑更合适的生成方式和合理的利用顺序非常重要。
这里提供一个比较合理的随机数生成方式 **hash-commit-reveal**
，即玩家提交行动计划，然后行动计划hash后提交给后端，后端生成相应的hash值，然后生成对应的随机数reveal，返回对应随机数commit。这样，服务端拿不到行动计划，客户端也拿不到随机数。
有一个很棒的实现代码是[dice2win](https://etherscan.io/address/0xD1CEeeefA68a6aF0A5f6046132D986066c7f9426)的随机数生成代码。
但 **hash-commit-reveal**
最大的问题在于服务端会在用户提交之后短暂的获得整个过程中的所有数据，如果恶意进行选择中止攻击，也在一定程度上破坏了公平性。详细分析见[智能合约游戏之殇——Dice2win安全分析](https://paper.seebug.org/717/)
当然 **hash-commit** 在一些简单场景下也是不错的实现方式。即玩家提交行动计划的hash，然后生成随机数，然后提交行动计划。
### 真实世界事件
Fomo3d薅羊毛
  * 
  * [8万笔交易“封死”以太坊网络，只为抢夺Fomo3D大奖？](https://mp.weixin.qq.com/s/5nrgj8sIZ0SlXebG5sWVPw)
Last Winner
  * 
## (8) 变量覆盖问题
**在合约中避免array变量key可以被控制**
    map[uint256(msg.sender)+x] = blockNum;
在EVM中数组和其他类型不同，因为数组时动态大小的，所以数组类型的数据计算方式为
    address(map_data) = sha3(key)+offset
其中key就是map变量定义的位置，也就是1，offset就是数组中的偏移，比如map[2]，offset就是2.
map[2]的地址就是`sha3(1)+2`，假设map[2]=2333，则`storage[sha3(1)+2]=2333`。
这样一来就出现问题了，由于offset我们可控，我们就可以向storage的任意地址写值。
这就可能覆盖storage的任意地址的值，影响代码本身的逻辑，导致进一步更严重的问题。
详细的原理可以看
  * [以太坊智能合约 OPCODE 逆向之理论基础篇](https://paper.seebug.org/640/#3)
  * 
# 5、编码问题隐患
## (1) 语法特性问题
**在智能合约中小心整数除法的向下取整问题**
在智能合约中，所有的整数除法都会向下取整到最接近的整数，当我们需要更高的精度时，我们需要使用乘数来加大这个数字。
该问题如果在代码中显式出现，编译器会提出问题警告，无法继续编译，但如果隐式出现，将会采取向下取整的处理方式。
错误样例
    uint x = 5 / 2; // 2
正确代码
    uint multiplier = 10;
    uint x = (5 * multiplier) / 2;
## (2) 数据私密问题
**注意链上的所有数据都是公开的**
在合约中，所有的数据包括私有变量都是公开的，不可以将任何有私密性的数据储存在链上。
## (3) 数据可靠性
**合约中不应该让时间戳参与到代码中，容易受到矿工的干扰，应使用block.height等不变的数据**
uint someVariable = now + 1;
if (now % 2 == 0) { // now可能被矿工控制
}
## (4) gas消耗优化
**对于某些不涉及状态变化的函数和变量可以加constant来避免gas的消耗**
    contract EUXLinkToken is ERC20 {
        using SafeMath for uint256;
        address owner = msg.sender;
        mapping (address => uint256) balances;
        mapping (address => mapping (address => uint256)) allowed;
        mapping (address => bool) public blacklist;
        string public constant name = "xx";
        string public constant symbol = "xxx";
        uint public constant decimals = 8;
        uint256 public totalSupply = 1000000000e8;
        uint256 public totalDistributed = 200000000e8;
        uint256 public totalPurchase = 200000000e8;
        uint256 public totalRemaining = totalSupply.sub(totalDistributed).sub(totalPurchase);
        uint256 public value = 5000e8;
        uint256 public purchaseCardinal = 5000000e8;
        uint256 public minPurchase = 0.001e18;
        uint256 public maxPurchase = 10e18;
## (5) 合约用户
**合约中，应尽量考虑交易目标为合约时的情况，避免因此产生的各种恶意利用**
    contract Auction{
        address public currentLeader;
        uint256 public hidghestBid;
        function bid() public payable {
            require(msg.value > highestBid);
            require(currentLeader.send(highestBid));
            currentLeader = msg.sender;
            highestBid = currentLeader;
        }
    }
上述合约就是一个典型的没有考虑合约为用户时的情况，这是一个简单的竞拍争夺王位的代码。当交易ether大于合约内的highestBid，当前用户就会成为合约当前的"王"，他的交易额也会成为新的highestBid。
    contract Attack {
        function () { revert(); }
        function Attack(address _target) payable {
            _target.call.value(msg.value)(bytes4(keccak256("bid()")));
        }
    }
但当新的用户试图成为新的“王”时，当代码执行到`require(currentLeader.send(highestBid));`时，合约中的fallback函数会触发，如果攻击者在fallback函数中加入`revert()`函数，那么交易就会返回false，即永远无法完成交易，那么当前合约就会一直成为合约当前的"王"。
## (6) 日志记录
**关键事件应有Event记录，为了便于运维监控，除了转账，授权等函数以外，其他操作也需要加入详细的事件记录，如转移管理员权限、其他特殊的主功能**
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
        emit OwnershipTransferred(owner, newowner);
        }
## (7) 回调函数
**合约中定义Fallback函数，并使Fallback函数尽可能的简单**
Fallback会在合约执行发生问题时调用（如没有匹配的函数时），而且当调用`send`或者`transfer`函数时，只有2300gas
用于失败后fallback函数执行,2300 gas只允许执行一组字节码指令，需要谨慎编写，以免gas不够用。
部分样例：
    function() payable { LogDepositReceived(msg.sender); }
    function() public payable{ revert();};
## (8) Owner权限问题
**避免owner权限过大**
部分合约owner权限过大，owner可以随意操作合约内各种数据，包括修改规则，任意转账，任意铸币烧币，一旦发生安全问题，可能会导致严重的结果。
关于owner权限问题，应该遵循几个要求： 1、合约创造后，任何人不能改变合约规则，包括规则参数大小等 2、只允许owner从合约中提取余额
## (9) 用户鉴权问题
**合约中不要使用tx.origin做鉴权**
tx.origin代表最初始的地址，如果用户a通过合约b调用了合约c，对于合约c来说，tx.origin就是用户a，而msg.sender才是合约b，对于鉴权来说，这是十分危险的，这代表着可能导致的钓鱼攻击。
下面是一个范例:
    pragma solidity >0.4.24;
    // THIS CONTRACT CONTAINS A BUG - DO NOT USE
    contract TxUserWallet {
        address owner;
        constructor() public {
            owner = msg.sender;
        }
        function transferTo(address dest, uint amount) public {
            require(tx.origin == owner);
            dest.transfer(amount);
        }
    }
我们可以构造攻击合约
    pragma solidity >0.4.24;
    interface TxUserWallet {
        function transferTo(address dest, uint amount) external;
    }
    contract TxAttackWallet {
        address owner;
        constructor() public {
            owner = msg.sender;
        }
        function() external {
            TxUserWallet(msg.sender).transferTo(owner, msg.sender.balance);
        }
    }
当用户被欺骗调用攻击合约，则会直接绕过鉴权而转账成功，这里应使用msg.sender来做权限判断。
## (10) 条件竞争问题
**合约中尽量避免对交易顺序的依赖**
在智能合约中，经常容易出现对交易顺序的依赖，如占山为王规则、或最后一个赢家规则。都是对交易顺序有比较强的依赖的设计规则，但以太坊本身的底层规则是基于矿工利益最大法则，在一定程度的极限情况下，只要攻击者付出足够的代价，他就可以一定程度控制交易的顺序。开发者应避免这个问题。
### 真实世界事件
Fomo3d事件
  * [智能合约游戏之殇——类 Fomo3D 攻击分析](https://paper.seebug.org/681/)
## (11) 未初始化的储存指针
**避免在函数中初始化struct变量**
在solidity中允许一个特殊的数据结构为struct结构体，而函数内的局部变量默认使用storage或memory储存。
而存在storage(存储器)和memory(内存)是两个不同的概念，solidity允许指针指向一个未初始化的引用，而未初始化的局部stroage会导致变量指向其他储存变量，导致变量覆盖，甚至其他更严重的后果。
    pragma solidity ^0.4.0;
    contract Test {
            address public owner;
            address public a;
            struct Seed {
                    address x;
                    uint256 y;
            }
            function Test() {
                    owner = msg.sender;
                    a = 0x1111111111111111111111111111111111111111;
            }
            function fake_foo(uint256 n) public {
                    Seed s;
                    s.x = msg.sender;
                    s.y = n;
            }
    }
上面代码编译后，s.x和s.y会错误的指向ownner和a。
攻击者在执行`fake_foo`之后，会将owner修改为自己。
上述问题在最新版的0.4.25版本被修复。
# 以太坊合约审计checkList审计系列报告
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码隐患”影响分析报告》](https://paper.seebug.org/732/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约规范问题”影响分析报告》](https://paper.seebug.org/663/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约设计缺陷问题”影响分析报告》](https://paper.seebug.org/679/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码安全问题”影响分析报告》](https://paper.seebug.org/696/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码设计问题”影响分析报告》](https://paper.seebug.org/707/)
# REF
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *