# Smashing the Browser: From Vulnerability Discovery to Exploit

## Speaker
Chen Zhang (@demi6od)  
NSFOCUS Security Team  
Email: [PI:EMAIL]  
GitHub: [https://github.com/demi6od](https://github.com/demi6od)  
Date: August 19, 2014

## Agenda
1. **Introduction**
   - Who am I
2. **Stage 1: Browser Fuzzing Technology**
3. **Stage 2: Advanced Browser Exploitation Techniques**
4. **Stage 3: IE 11 0-day Exploit Development**
5. **Q&A**

### Who am I
- **Education:**
  - Shanghai Jiao Tong University
    - Information Security: 4 + 3 years
- **Professional Experience:**
  - NSFOCUS Security Team
    - Security Researcher: 2+ years
- **Research Interests:**
  - Browser security
  - Vulnerability analysis, discovery, and exploitation
  - APT/0-day detection R&D
  - Little science (e.g., novel ideas in security)

### Browser Fuzzing Introduction
#### Vulnerability Discovery
- **White Box Methods:**
  - Code review
    - MWR Labs: Chrome type confusion
    - Pinkie Pie: 2012 Pwnium, 2013 Mobile Pwn2Own, Automated code review
    - Tools: Fortify, RATS
- **Black Box Methods:**
  - Fuzzing

#### Fuzzing Technologies
- **Static Fuzzing:**
  - Mutation
    - Document
    - Multimedia
    - bf3
  - Generation
    - Browser-specific generation
    - Testcase generation
- **Dynamic Fuzzing:**
  - Fuzzing frameworks
    - Grinder, CrossFuzz, ndujaFuzz, NodeFuzz, X-Fuzzer, jsFunFuzz
  - Testcase reconstruction
  - Heisenberg principle

**Example of Dynamic Fuzzing:**
```javascript
switch (rand(2)) {
  case 0:
    // Fuzz procedure 1;
    break;
  case 1:
    // Fuzz procedure 2;
    break;
}
```

**Example of Static Fuzzing:**
```javascript
// Fuzz procedure 1;
// Fuzz procedure 2;
```

#### Google ClusterFuzz
- **AddressSanitizer:**
  - Clang, LLVM, Linux, and Mac
- **Test Cases:**
  - Large number of test cases

#### How to Write a Fuzzer
- **Collect PoCs (Proofs of Concept)**
- **Specifications:**
  - W3C, MDN, MSDN
- **Definitive Guides:**
  - JavaScript, HTML, CSS
- **Novel Ideas:**
  - StateFuzzer

### My Fuzzer Framework
- **Supported Browsers:**
  - IE 11, Google Chrome
- **Code Base:**
  - JavaScript: 4000+ lines (core and utilities)
  - Dictionary: 2000+ entries
  - Python: Automated Grinder compatibility, duplicate removal, null pointer dereference, completion, and minimization
  - Pydbg, D&C (Divide and Conquer), BFS (Breadth-First Search), O(log(n)) ~ O(n)

### Strategy
- **Data vs. Relationship**
- **Data Type Oriented vs. Logic Oriented**
- **Code Path Coverage → Browser States Coverage:**
  - DOM Tree states
  - Render Forest states
  - Layout states
  - Event Handling states
  - Multiple pages states

### Aim
- **UAF (Use After Free)**
- **Construct → Fuzz → Free → Use**
- **Freed node → No reference**

### Traverse Node
- **Traverse:**
  - Save references (id[index])
  - DOM operation (document.all[index])
- **Node References:**
  - Caching
  - Clearing tree nodes
  - Recursively clearing subtree

### Get Property
- **Dynamical Getting:**
  - Properties, Functions, Events
- **Caching:**
  - for...in, typeof

### Fuzz Property
- **Smart Values:**
  - Based on specifications
- **Random Values:**
  - No dictionary

**Example:**
```javascript
if (bNormalProp && percent(demicm.PROP_NORMAL_PER)) {
  if (inArr(demicm.specialProps, prop) && getTagName(fuzzObj) != 'none') {
    var rNormalVal = randItem(demicm[prop][getTagName(fuzzObj)]);
  }
  eval(fuzzObjStr + '["' + prop + '"] = rNormalVal;');
} else if (percent(demicm.PROP_RANDOM_PER)) {
  var randValTable = {};
  randPropfVal(rIds[1], rIdRs[1], 'prop', randValTable);
  var rVal = bNormalProp ? randValTable[demicm.propDic[prop].type] : randValTable[typeof fuzzObj[prop]];
}
```

### Fuzz Function
- **Functional Programming + eval()**
- **Example:**
```javascript
console.log('var retVal = ' + logObjStr + '["' + func + '"](' + paramLogStr + ');');
eval('var retVal = ' + fuzzObjStr + '["' + func + '"](' + paramStr + ');');
```

### Set Environment
- **HTMLElement Properties:**
  - ContentEditable, Direction, etc.

**Example:**
```javascript
function setEnv() {
  if (percent(demicm.ENV_PER)) {
    document.documentElement.contentEditable = 'true';
  }
  if (percent(demicm.ENV_PER)) {
    document.documentElement.dir = 'rtl';
  }
  // More environment settings
}
```

### DOM Tree Construction
- **Base DOM Tree:**
  - Random nodes
  - Random tree generation algorithm
  - For loop, createElement, appendChild
- **Smarter Structure:**
  - Form, Table, Map, List, Audio, Video, SVG
  - Network: XMLHttpRequest, WebSocket

### Prelude
- **TextNode, Special Nodes:**
  - Window, Document, Attribute, NamedNodeMap
- **Groups:**
  - Range, Selection, NodeIterator, TreeWalker
- **Multiple Pages:**
  - Iframe, window.open, recursively nested iframes
- **Web Workers & SharedWorkers:**
  - Multiple threads

### Event Handler
- **"ATM"**
- **CSS:**
  - Pseudo-classes & pseudo-elements
  - Render forest
- **Initial Properties:**
  - Start states

### Fuzzing
- **DOM Node:**
  - Properties, Functions, Styles

**Example:**
```javascript
if (percent(demicm.PROP_PER)) {
  propfMan([rId], 'prop', 'node');
}
if (percent(demicm.FUNC_PER)) {
  propfMan([rId], 'func', 'node');
}
if (percent(demicm.STYLE_PER)) {
  styleMan(rId);
}
```

### Fuzzing Recursively
- **Return Value → Fuzzing List:**
  - Normal, Dirty, Random, Return
- **Force Layout:**
  - Node.offsetParent

**Example:**
```javascript
for (var p in fuzzObj) {
  if (fuzzObj[p]) {
    if (percent(demicm.PROP_REC_PER)) {
      propStack.push(p);
      propfMan(recDepth - 1, 'prop', objType);
      recWide++;
    }
    if (percent(demicm.FUNC_REC_PER)) {
      propStack.push(p);
      propfMan(recDepth - 1, 'func', objType);
      recWide++;
    }
    // More recursive fuzzing
  }
}
```

### Clear DOM Subtree
- **innerHTML, outerHTML, innerText, outerText**
- **Clear Whole DOM Tree:**
  - write, writeln, open, documentElement.innerHTML

### Modify DOM Tree
- **appendChild, insertBefore, insertAdjacentElement, insertAdjacentHTML, insertAdjacentText, removeChild, replaceChild, cloneNode**

### Special Node Manipulation
- **Crazy Manipulations:**
  - execCommand
- **Mutual Manipulation:**
  - Multiple pages

This presentation aims to provide a comprehensive overview of browser fuzzing and exploitation techniques, with a focus on practical examples and real-world applications.