Smashing	
  The	
  Browser: 
From	
  Vulnerability	
  Discovery	
  To	
  Exploit 
Chen	
  Zhang	
  (@demi6od) 
NSFOCUS	
  Security	
  Team 
PI:EMAIL 
h>ps://github.com/demi6od 
Date:	
  2014	
  August	
  19th 
Agenda 
•  Who	
  am	
  I	
•  Stage1	
  -­‐	
  Browser	
  Fuzzing	
  Technology	
•  Stage	
  2	
  -­‐	
  Advance	
  Browser	
  ExploitaTon	
  Techniques	
•  Stage	
  3	
  -­‐	
  IE	
  11	
  0day	
  Exploit	
  Development	
•  Q&A	
Who	
  am	
  I 
•  Shanghai	
  Jiao	
  Tong	
  University	
–  InformaTon	
  Security:	
  4	
  +	
  3	
  years	
•  NSFOCUS	
  Security	
  Team	
–  Security	
  Researcher:	
  2+	
  years	
•  Research	
  Interests	
–  Browser	
  security	
–  Vulnerability	
  analysis,	
  discovery	
  and	
  exploit	
–  APT/0	
  day	
  detecTon	
  R&D	
–  Li>le	
  science	
Who	
  am	
  I 
•  Shanghai	
  Jiao	
  Tong	
  University	
–  InformaTon	
  Security:	
  4	
  +	
  3	
  years	
•  NSFOCUS	
  Security	
  Team	
–  Security	
  Researcher:	
  2+	
  years	
•  Research	
  Interests	
–  Browser	
  security	
–  Vulnerability	
  analysis,	
  discovery	
  and	
  exploit	
–  APT/0	
  day	
  detecTon	
  R&D	
–  Li>le	
  science	
Browser	
  Fuzzing	
  IntroducTon 
Vulnerability	
  discovery: 
•  White	
  box 
–  Code	
  review 
•  MWR	
  labs 
–  Chrome	
  type	
  confusion 
•  Pinkie	
  Pie 
–  2012	
  Pwnium	
–  2013	
  Mobile	
  Pwn2Own 
–  Automated	
  code	
  review 
•  ForTfy	
•  RATS 
•  Black	
  box 
–  Fuzzing 
Browser	
  Fuzzing	
  IntroducTon 
Two	
  fuzzing	
  technology 
•  StaTc	
  fuzzing	
–  MutaTon 
•  Document 
•  MulTmedia	
•  bf3 
–  GeneraTon 
•  Browser	
–  Achilles'	
  heel	
•  Testcase	
  generaTng 
Browser	
  Fuzzing	
  IntroducTon 
•  Dynamic	
  fuzzing 
–  Fuzzing	
  framework 
•  Grinder 
–  Fuzzer 
•  CrossFuzz 
•  ndujaFuzz 
•  NodeFuzz 
•  X-­‐Fuzzer 
•  jsFunFuzz	
–  Achilles'	
  heel	
•  Testcase	
  reconstrucTng	
•  Heisenberg	
  principle 
DynamicFuzz.js:	
switch	
  (rand(2))	
  {	
  case	
  0:	
  //	
  Fuzz	
  procedure	
  1;	
  break;	
  case	
  1:	
  //	
  Fuzz	
  procedure	
  2;	
  break;	
}	
StaLcFuzz1.js:	
//	
  Fuzz	
  procedure	
  1;	
StaLcFuzz2.js:	
//	
  Fuzz	
  procedure	
  2;	
Browser	
  Fuzzing	
  IntroducTon 
Google	
  ClusterFuzz 
•  AddressSaniTzer 
– Clang	
– LLVM	
– Linux	
  and	
  Mac 
•  Tons	
  of	
  test	
  cases 
Browser	
  Fuzzing	
  IntroducTon 
•  How	
  to	
  write	
  fuzzer? 
–  Collect	
  PoCs 
–  SpeciﬁcaTon	
•  W3C	
•  MDN	
•  MSDN	
–  DeﬁniTve	
  guides	
•  Javascript	
•  HTML	
•  CSS 
–  Novel	
  ideas 
StateFuzzer 
My	
  Fuzzer	
  Framework 
•  IE	
  11	
  +	
  Google	
  Chrome 
•  Code	
  base: 
–  Javascript 
•  Core	
  and	
  uTliTes:	
  4000+	
•  DicTonary:	
  2000+ 
–  Python 
•  Automated	
  Grinder	
  compaTble 
•  Automated	
  remove	
  duplicate	
  and	
  null	
  pointer	
  deference 
•  Automated	
  complete	
  +	
  minimize	
–  Pydbg	
–  D&C	
  +	
  BFS	
–  O(log(n))	
  ~	
  O(n),	
  O(log(n)) 
Strategy 
•  Data	
  vs	
  RelaTonship 
•  Data	
  Type	
  Oriented	
  vs	
  Logic	
  Oriented 
•  Code	
  path	
  coverage	
  -­‐>	
  Browser	
  states	
  coverage 
–  DOM	
  Tree	
  states 
–  Render	
  Forest	
  states 
–  Layout	
  states 
–  Event	
  Handle	
  states	
–  MulTple	
  pages	
  states 
–  … 
Aim 
•  Aim	
  -­‐>	
  UAF	
•  Construct	
  -­‐>	
  Fuzz	
  -­‐>	
  Free	
  -­‐>	
  Use	
•  Freed	
  node	
  -­‐>	
  No	
  reference 
Traverse	
  Node 
•  Traverse 
– Save	
  references	
  (id[idex]) 
– DOM	
  operaTon	
  (document.all[index])	
•  Node	
  references	
– Caching	
– Clearing	
  tree	
  node	
– Recursively	
  clearing	
  subtree	
– … 
Get	
  Property 
•  Dynamical	
  geong	
–  ProperTes	
–  FuncTons	
–  Events	
•  Caching	
•  for…in	
•  typeof 
Fuzz	
  Property 
•  Smart	
  values	
  -­‐>	
  SpeciﬁcaTon 
•  Random	
  values	
  -­‐>	
  No	
  dicTonary 
//	
  Set	
  normal	
  value	
if	
  (bNormalProp	
  &&	
  percent(demicm.PROP_NORMAL_PER))	
  {	
  if	
  (inArr(demicm.specialProps,	
  prop)	
  &&	
  getTagName(fuzzObj)	
  !=	
  'none')	
  {	
  var	
  rNormalVal	
  =	
  randItem(demicm[prop][getTagName(fuzzObj)]);	
  }	
  eval(fuzzObjStr	
  +	
  '["'	
  +	
  prop	
  +	
  '"]	
  =	
  rNormalVal;');	
//	
  Set	
  random	
  value	
}	
  else	
  if	
  (percent(demicm.PROP_RANDOM_PER))	
  {	
  var	
  randValTable	
  =	
  {};	
  randPropfVal(rIds[1],	
  rIdRs[1],	
  'prop',	
  randValTable);	
  var	
  rVal	
  =	
  bNormalProp	
  ?	
  randValTable[demicm.propDic[prop].type]	
  :	
randValTable[typeof	
  fuzzObj[prop]]; 
Fuzz	
  FuncTon 
•  FuncTonal	
  programming	
  +	
  eval()	
console.log('var	
  retVal	
  =	
  '	
  +	
  logObjStr	
  +	
  '["'	
  +	
  func	
  +	
  '"]('	
  +	
  paramLogStr	
  +	
  ');');	
eval('var	
  retVal	
  =	
  '	
  +	
  fuzzObjStr	
  +	
  '["'	
  +	
  func	
  +	
  '"]('	
  +	
  paramStr	
  +	
  ');'); 
Set	
  Environment 
•  HTMLElement	
  ProperTes 
funcLon	
  setEnv()	
  {	
  if	
  (percent(demicm.ENV_PER))	
  {	
  document.documentElement.contentEditable	
  =	
  'true';	
  }	
  if	
  (percent(demicm.ENV_PER))	
  {	
  document.documentElement.dir	
  =	
  'rtl';	
  }	
  …	
} 
DOM	
  Tree	
  Construct 
•  Base	
  DOM	
  tree	
– random	
  nodes	
– random	
  tree	
  generaTon	
  algorithm	
– for	
  loop	
– document.createElement	
– node.appendChild 
DOM	
  Tree	
  Construct 
•  Smarter	
  structure	
–  Form	
–  Table	
–  Map	
–  List	
–  Audio	
–  Video	
–  Svg	
•  Network 
–  XMLH>pRequest 
–  WebSocket 
Prelude 
•  TextNode 
•  Special	
  nodes 
–  Window 
–  Document 
–  A>ribute	
–  NamedNodeMap 
•  Group 
–  Range 
–  SelecTon 
–  NodeIterator 
–  TreeWalker 
Prelude 
•  MulTple	
  Pages 
– Iframe 
– Window.open	
– Recursively	
  nested	
  iframes 
– Renderer	
  process	
  Instance 
•  Web	
  Worker	
  &	
  SharedWorker	
– MulTple	
  threads 
Prelude 
•  Event	
  handler	
– “ATM” 
•  CSS	
– Pseudo-­‐classes	
  &	
  pseudo-­‐elements	
– Render	
  forest 
•  IniTal	
  properTes	
– Start	
  states 
Fuzzing 
•  DOM	
  Node	
–  ProperTes 
–  FuncTons 
–  Styles 
if	
  (percent(demicm.PROP_PER))	
  {	
  propfMan([rId],	
  'prop',	
  'node');	
}	
if	
  (percent(demicm.FUNC_PER))	
  {	
  propfMan([rId],	
  'func',	
  'node');	
}	
if	
  (percent(demicm.STYLE_PER))	
  {	
  styleMan(rId);	
}	
Fuzzing	
  recursively 
for	
  (var	
  p	
  in	
  fuzzObj)	
  {	
  if	
  (fuzzObj[p])	
  {	
  if	
  (percent(demicm.PROP_REC_PER))	
  {	
  propStack.push(p);	
  propfMan(recDepth	
  -­‐	
  1,	
  'prop',	
  objType);	
  recWide++;	
  }	
  if	
  (percent(demicm.FUNC_REC_PER))	
  {	
  propStack.push(p);	
  propfMan(recDepth	
  -­‐	
  1,	
  'func',	
  objType);	
  recWide++;	
  }	
  …. 
Fuzzing 
•  Return	
  value	
  -­‐>	
  Fuzzing	
  list 
•  Fuzzing	
  Values 
– Normal	
– Dirty 
– Random	
– Return 
•  Force	
  Layout 
– Node.oﬀsetParent 
Fuzzing 
•  Clear	
  DOM	
  Sub	
  Tree 
–  innerHTML 
–  outerHTML 
–  innerText 
–  outerText 
•  Clear	
  whole	
  DOM	
  Tree 
–  write 
–  writeln 
–  open 
–  documentElement.innerHTML 
Fuzzing 
•  DOM	
  Tree	
  Modify 
– appendChild 
– insertBefore 
– insertAdjacentElement 
– insertAdjacentHTML	
– insertAdjacentText 
– removeChild 
– replaceChild 
– cloneNode 
Fuzzing 
•  Special	
  node	
  manipulate	
–  Crazy 
•  Group	
  manipulate 
–  execCommand 
•  MulTple	
  pages	
–  Mutual	
  manipulate 