## 沉浸式学习PostgreSQL|PolarDB 4: 跨境电商场景, 快速判断商标|品牌侵权    
### 作者        
digoal        
### 日期        
2023-08-25      
### 标签        
PostgreSQL , PolarDB , 数据库 , 教学     
----        
## 背景       
非常欢迎数据库用户提出场景给我, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 一起来建设沉浸式数据库学习教学素材库, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 这个系列课程的核心是教怎么用好数据库, 而不是怎么管理数据库或者怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.   
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31)来完成.      
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 跨境电商场景, 快速判断商标|品牌侵权     
很多业务场景中需要判断商标侵权, 避免纠纷. 例如   
- 电商的商品文字描述、图片描述中可能有侵权内容. 特别是跨境电商, 在一些国家侵权查处非常严厉.   
- 注册公司名、产品名时可能侵权.  
- 在写文章时, 文章的文字内容、视频内容、图片内容中的描述可能侵权.   
而且商标侵权通常还有相似的情况, 避免不法分子蹭大品牌的流量, 导致大品牌名誉受损.  
例如postgresql是个商标, 如果你使用posthellogresql、postgresqlabc也可能算侵权.    
以跨境电商为力, 为了避免侵权, 在发布内容时需要商品描述中出现的品牌名、产品名等是否与已有的商标库有相似.    
对于跨境电商场景, 由于店铺和用户众多, 商品的修改、发布是比较高频的操作, 所以需要实现高性能的字符串相似匹配功能.    
### 实现和对照      
创建一张品牌表, 用于存储收集好的注册商标(通常最终转换为文字).   
```  
create unlogged table tbl_ip (   -- 测试使用unlogged table, 加速数据生成  
  id serial primary key,  -- 每一条品牌信息的唯一ID  
  n text  -- 品牌名  
);  
```  
使用随机字符模拟生成1000万条品牌名.  
```  
insert into tbl_ip (n) select md5(random()::text) from generate_series(1,10000000);  
```  
再放入几条比较容易识别的:  
```  
insert into tbl_ip(n) values ('polardb'),('polardbpg'),('polardbx'),('alibaba'),('postgresql'),('mysql'),('aliyun'),('apsaradb'),('apple'),('microsoft');  
```  
```  
postgres=# select * from tbl_ip limit 10;  
 id |                n                   
----+----------------------------------  
  1 | f4cd4669d249c1747c1d31b0b492d84e  
  2 | 2e29f32460485698088f4ab0632d86b7  
  3 | a8460622db4a3dc4ab70a8443a2c2a1a  
  4 | c4554856e259d3dfcccfb3c9872ab1d0  
  5 | b3a6041c5838d70d95a1316eea45bea3  
  6 | fc2d701eca05c74905fd1a604f072006  
  7 | f3dc443060e33bb672dc6a3b79bc1acd  
  8 | 1305b6092f9e798453e9f60840b8db2a  
  9 | 9b07cad251661627e15f239e5b122eaf  
 10 | 8b5d2a468435febe417b17d0d0442b86  
(10 rows)  
postgres=# select count(*) from tbl_ip;  
  count     
----------  
 10000010  
(1 row)  
```  
#### 传统方法 设计和实验       
传统方法只能使用like全模糊查询, 但是局部侵权的可能性非常多, 使用模糊查询需要很多很多组合, 性能会非常差.  
例如postgresql是个商标, 如果用户使用了一个字符串为以下组合, 都可能算侵权:    
- post  
- postgres  
- sql  
- gresql  
- postgresql  
- postgre  
写成SQL应该是这样的  
```  
select * from tbl_ip where  
  n like '%post%' or  
  n like '%postgres%' or  
  n like '%sql%' or  
  n like '%gresql%' or  
  n like '%postgresql%' or  
  n like '%postgre%';  
```  
结果  
```  
    id    |     n        
----------+------------  
 10000005 | postgresql  
 10000006 | mysql  
(2 rows)  
```  
耗时如下  
```  
                                                                                  QUERY PLAN                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on tbl_ip  (cost=0.00..333336.00 rows=5999 width=37) (actual time=2622.461..2622.463 rows=2 loops=1)  
   Filter: ((n ~~ '%post%'::text) OR (n ~~ '%postgres%'::text) OR (n ~~ '%sql%'::text) OR (n ~~ '%gresql%'::text) OR (n ~~ '%postgresql%'::text) OR (n ~~ '%postgre%'::text))  
   Rows Removed by Filter: 10000008  
 Planning Time: 1.381 ms  
 JIT:  
   Functions: 2  
   Options: Inlining false, Optimization false, Expressions true, Deforming true  
   Timing: Generation 1.442 ms, Inlining 0.000 ms, Optimization 1.561 ms, Emission 6.486 ms, Total 9.489 ms  
 Execution Time: 2624.001 ms  
(9 rows)  
```  
#### PolarDB|PG新方法1 设计和实验  
使用pg_trgm插件, gin索引, 以及它的字符串相似查询功能,   
创建插件  
```  
postgres=# create extension if not exists pg_trgm;  
NOTICE:  extension "pg_trgm" already exists, skipping  
CREATE EXTENSION  
```  
创建索引  
```  
postgres=# create index on tbl_ip using gin (n gin_trgm_ops);  
```  
设置相似度阈值, 仅返回相似度大于0.9的记录  
```  
postgres=# set pg_trgm.similarity_threshold=0.9;  
SET  
```  
使用相似度查询  
```  
select *,   
  similarity(n, 'post'),  
  similarity(n, 'postgres'),  
  similarity(n, 'sql'),  
  similarity(n, 'gresql'),  
  similarity(n, 'postgresql'),  
  similarity(n, 'postgre')  
from tbl_ip   
where  
  n % 'post' or  
  n % 'postgres' or  
  n % 'sql' or  
  n % 'gresql' or  
  n % 'postgresql' or  
  n % 'postgre';  
```  