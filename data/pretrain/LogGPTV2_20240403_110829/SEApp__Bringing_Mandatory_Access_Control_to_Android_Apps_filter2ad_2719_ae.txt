Several proposals have been made to enhance the security properties of Android. In this section, we will discuss those that specifically address application isolation and modularity, highlighting the key differences with our methodology.

Our approach shares similarities with Secure Application INTeraction (Saint) proposed by Ongtang et al. [60], where the authors also aimed to allow developers to define policies that can be verified at both installation time and runtime, to better specify permissions for each component of their app. However, since Saint was published in 2010, it could not leverage SEAndroid [65], which was introduced later. As a result, the authors had to define their own Android security middleware, which is not compatible with the current Android architecture [58].

FlaskDroid [37] introduces a versatile middleware and kernel-layer policy language based on Userspace Object Managers (USOMs), which control access to services, intents, and data stored in Content Providers. However, FlaskDroid does not focus on intra-app compartmentalization, a central aspect of our proposal.

ASM [53] and ASF [34] advocate for a programmable interface that could serve as a flexible ecosystem for various security solutions. The generality of these solutions, however, requires significant changes to the current Android security model.

AppPolicyModules [31] is another proposal that allows app developers to create dedicated policy modules. The authors focus more on how apps can use SEAndroid to better protect their resources from the system and other apps, with limited attention to internal compartmentalization.

DroidCap [39], a recent contribution by Dawoud and Bugiel, proposes replacing Android's UID-based ambient authority (DAC) with per-process Binder object capabilities. This approach enables security compartmentalization between different app components. To introduce capability-based access control on files, DroidCap integrates Capsicum for Linux [50] into Android. Overall, DroidCap is a well-engineered solution that shares similar objectives with ours, and the two could work in parallel without interfering with each other. However, our proposal relies on SELinux and SEAndroid, which are already part of the Android security framework, making our architecture more aligned with the natural evolution of the Android ecosystem.

Boxify [35] is a virtualization environment for Android apps, designed to achieve a higher level of privacy and better control over app permissions. The authors describe how their solution can compartmentalize Ads libraries to reduce the risk of sensitive information leakage. However, since the virtualization environment acts as a mediator between the applications and the system, it increases the set of trusted components the app must rely on.

AFrame [71] and CompARTist [55] propose compartmentalizing third-party libraries from their host app using a separate process with a dedicated UID. AFrame modifies the Android Manifest with library-specific permissions, while CompARTist uses compile-time app rewriting. Both proposals do not extend protection to the Mandatory Access Control (MAC) level.

To summarize, the main differences that characterize our proposal are: (i) we propose a natural extension of the role of SELinux to apps, leveraging what is already used to protect the system itself, thus minimizing the impact on it, and (ii) we empower developers while limiting the amount of changes an application must undergo to take advantage of our solution.

### 9. Conclusions

In this paper, we proposed an extension to the current MAC solution (SELinux) available in Android. Developers can use SELinux to define domains internal to their apps, thereby leveraging the modules that already provide protection to the system. By mapping SELinux domains to activities and services, developers can limit the impact that a vulnerability has on the app processes and files. We described the changes we introduced into Android, and our experimental evaluation shows that the overhead introduced by our proposal is compatible with the additional security guarantees.

### Acknowledgments

We thank our shepherd Sven Bugiel and the anonymous reviewers for their valuable comments and feedback. This work was supported in part by the European Commission under grant agreement No 825333 (MOSAICrOWN), and by the 2015 Google Faculty Research Award Program.

### Availability

The implementation source and artifacts produced for the evaluation of our proposals are freely available at: https://github.com/matthewrossi/seapp

### References

[References remain unchanged and are listed as provided.]

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.