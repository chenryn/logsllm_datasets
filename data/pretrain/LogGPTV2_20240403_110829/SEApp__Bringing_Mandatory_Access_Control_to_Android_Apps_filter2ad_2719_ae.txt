and several proposals aiming at strengthen its security proper-
ties. In the following we discuss the ones that try to address
app isolation and modularity, underlining the key differences
with our methodology.
Our approach presents similarities with Secure Application
INTeraction (Saint) proposed by Ongtang et al. in [60], in
which the authors also try to address the issue of allowing
developers to deﬁne policies that can be veriﬁed at both in-
stallation time and runtime, to better specify the permissions
for each component of their app. However, since the paper
has been published in 2010, Saint could not leverage SEAn-
droid [65], which was introduced later, thus the authors had to
deﬁne their own Android security middleware, which would
not ﬁt into the current Android architecture [58].
FlaskDroid [37] deﬁnes a versatile middleware and kernel
layer policy language. It is based on Userspace Object Man-
agers (USOMs), which control access to services, intents and
data stored in Content Providers. However, FlaskDroid does
not focus on intra-app compartmentalization, a central aspect
in our proposal.
ASM [53] and ASF [34] promote the need for a pro-
grammable interface that could serve as a ﬂexible ecosystem
for different security solutions. The generality of these solu-
tions, however, requires to introduce several changes to the
current Android security model.
AppPolicyModules [31] is another proposal that allows app
developers to create dedicated policy modules. The authors
USENIX Association
30th USENIX Security Symposium    3625
focus more on how apps could use SEAndroid to better protect
their resources from the system and from other apps, paying
limited attention to internal compartmentalization.
DroidCap [39] is a recent contribution proposed by Da-
woud and Bugiel, in which the authors propose to replace An-
droid’s UID-based ambient authority (DAC) with per-process
Binder object capabilities. The proposal is interesting as it
permits to achieve security compartmentalization between
different app components. To introduce capability-based ac-
cess control on ﬁles, DroidCap had to integrate Capsicum
for Linux [50] in Android. Overall, DroidCap is a nicely en-
gineered solution, which shares similar objectives with ours,
and the two could work in parallel as they do not interfere
with each other. However, as our proposal relies on SELinux
and SEAndroid, which are already part of the Android secu-
rity framework, our architecture appears to be more aligned
with the natural evolution of the Android ecosystem.
Boxify [35] is a virtualization environment for Android
apps, which could be used to achieve a higher level of privacy
and better control over app permissions. The authors also
describe how their solution could be used to compartmental-
ize Ads libraries to reduce the risk of sensible information
leakage. Yet, since the virtualization environment acts as a
mediator between the applications and the system, it extends
the set of trusted components the app has to rely on.
AFrame [71] and CompARTist [55] propose to compart-
mentalize third-party libs from their host app using a separate
process with a dedicated UID. In AFrame the Android Man-
ifest is modiﬁed with the introduction of library ad-hoc per-
missions, while CompARTist uses compile time app rewriting.
Both proposals do not extend the protection at the MAC level.
To summarize, the main differences that characterize our
proposal are: (i) we propose a natural extension of the role of
SELinux to apps leveraging what is already used to protect
the system itself, thus minimizing the impact on it, and (ii) we
empower the developers while limiting the amount of changes
an application must undergo in order to take advantage of our
solution.
9 Conclusions
In this paper we proposed an extension to the current MAC
solution (SELinux) already available in Android. Developers
can use SELinux to deﬁne domains that are internal to their
apps, in such a way that it is possible to leverage the mod-
ules that are already providing protection to the system. By
mapping SELinux domains to activities and services, devel-
opers can limit the impact that a vulnerability has on the app
processes and ﬁles. We described in the paper the changes
that we introduced into Android, and our experimental evalu-
ation shows that the overhead introduced by our proposal is
compatible with the additional security guarantees.
Acknowledgments
We thank our shepherd Sven Bugiel and the anonymous re-
viewers for their valuable comments and feedback. This work
was supported in part by the European Commission under
grant agreement No 825333 (MOSAICrOWN), and by the
2015 Google Faculty Research Award Program.
Availability
The implementation source and artifacts produced for the
evaluation of our proposals are freely available at this URL:
https://github.com/matthewrossi/seapp
References
[1] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and
M. Smith. SoK: Lessons learned from Android security re-
search for appiﬁed software platforms. In IEEE S&P, 2016.
[2] Android. Google Play Protect. https://www.android.com/
play-protect/, 2021.
[3] Android Developers.
adb install.
https:
//developer.android.com/studio/command-line/
adb#move, 2021.
[4] Android Developers.
Android App Bundles.
https:
//developer.android.com/platform/technology/app-
bundle, 2021.
[5] Android Developers. Android Interface Deﬁnition Language.
https://developer.android.com/guide/components/
aidl, 2021.
[6] Android Developers.
android:isolatedProcess.
https://developer.android.com/guide/topics/
manifest/service-element#isolated, 2021.
[7] Android Developers.
Bound services
overview.
https://developer.android.com/guide/components/
bound-services#Creating, 2021.
[8] Android Developers.
isolated_app.te.
https:
//android.googlesource.com/platform/system/
sepolicy/+/refs/heads/master/private/
isolated_app.te, 2021.
[9] Android Open Source Project. Enable per-user isolation for
https://android.googlesource.com/
normal apps.
platform/external/sepolicy/+/
a833763ba04147e840fd054b613f759395bada35, 2014.
[10] Android Open Source Project.
SELinux for Android
https://source.android.com/security/selinux/
8.0.
images/SELinux_Treble.pdf, 2017.
[11] Android Open Source Project.
Android 9 release
https://source.android.com/setup/start/p-
notes.
release-notes#per-app_selinux_sandbox, 2018.
3626    30th USENIX Security Symposium
USENIX Association
[12] Android Open Source Project.
ActivityManager-
https://android.googlesource.com/
Service.
platform/frameworks/base/+/refs/heads/master/
services/core/java/com/android/server/am/
ActivityManagerService.java, 2021.
[13] Android Open Source Project. Android Debug Bridge (adb).
https://developer.android.com/studio/command-
line/adb, 2021.
[14] Android Open Source Project.
Android Permissions.
https://developer.android.com/guide/topics/
permissions/overview, 2021.
[15] Android Open Source Project. Android Runtime. https:
//developer.android.com/guide/platform#art, 2021.
[16] Android Open Source Project. App manifest overview.
[28] Android Open Source Project.
untrusted_app_all.te.
https://android.googlesource.com/platform/
system/sepolicy/+/refs/heads/master/private/
untrusted_app_all.te, 2021.
[29] Android Open Source Project.
Zygote.
https:
//android.googlesource.com/platform/frameworks/
base.git/+/master/core/java/com/android/
internal/os/Zygote.java, 2021.
[30] Ars Technica.
The Android 11 interview.
https:
//arstechnica.com/gadgets/2020/09/the-android-
11-interview-googlers-answer-our-burning-
questions/, 2020.
[31] E. Bacis, S. Mutti, and S. Paraboschi. AppPolicyModules:
Mandatory access control for third-party apps. In ASIACCS,
2015.
https://developer.android.com/guide/topics/
manifest/manifest-intro, 2021.
[17] Android Open Source Project.
Binder.
[32] E. Bacis, S. Mutti, and S. Paraboschi. Policy specialization to
https:
support domain isolation. In SafeConﬁg, 2015.
//developer.android.com/reference/android/os/
Binder, 2021.
[18] Android Open Source Project. Implementing SELinux. https:
//source.android.com/security/selinux/implement,
2021.
[19] Android Open Source Project.
init.
https:
//android.googlesource.com/platform/system/core/
+/refs/heads/master/init/main.cpp, 2021.
installd.
[20] Android Open Source Project.
https:
//android.googlesource.com/platform/frameworks/
native/+/refs/heads/master/cmds/installd/, 2021.
[21] Android Open Source Project.
Intent and intent ﬁlters.
https://developer.android.com/guide/components/
intents-filters, 2021.
[22] Android Open Source Project. Mounting partitions early.
https://source.android.com/devices/architecture/
kernel/mounting-partitions-early, 2021.
[23] Android Open Source Project.
PackageManager-
https://android.googlesource.com/
Service.
platform/frameworks/base/+/refs/heads/master/
services/core/java/com/android/server/pm/
PackageManagerService.java, 2021.
[24] Android Open Source Project.
Policy compatibil-
https://source.android.com/security/selinux/
ity.
compatibility, 2021.
[25] Android Open Source Project.
restorecond ser-
https://android.googlesource.com/
vice.
platform/external/selinux/+/refs/heads/master/
restorecond/restorecond.service, 2021.
[26] Android Open Source Project.
secilc.
https:
//android.googlesource.com/platform/external/
selinux/+/refs/heads/master/secilc/, 2021.
[27] Android Open Source Project.
SELinuxMMAC.
https://android.googlesource.com/platform/
frameworks/base/+/refs/heads/master/services/
core/java/com/android/server/pm/SELinuxMMAC.java,
2021.
[33] M. Backes, S. Bugiel, and E. Derr. Reliable third-party library
detection in Android and its security applications. In CCS,
2016.
[34] M. Backes, S. Bugiel, S. Gerling, and P. von Styp-Rekowsky.
Android security framework: Extensible multi-layered access
control on Android. In ACSAC, 2014.
[35] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. Von
Styp-Rekowsky. Boxify: Full-ﬂedged app sandboxing for
stock Android. In USENIX Security, 2015.
[36] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks
on Android. In NDSS, 2012.
[37] S. Bugiel, S. Heuser, and A.R. Sadeghi. Flexible and ﬁne-
grained mandatory access control on Android for diverse secu-
rity and privacy policies. In USENIX Security, 2013.
[38] H. Chen, N. Li, W. Enck, Y. Aafer, and X. Zhang. Analysis of
SEAndroid policies: Combining MAC and DAC in Android.
In ACSAC, 2017.
[39] A. Dawoud and S. Bugiel. DroidCap: OS support for capability-
based permissions in Android. In NDSS, 2019.
[40] S. Demetriou, W. Merrill, W. Yang, A. Zhang, and C.A. Gunter.
Free for all! Assessing user data exposure to advertising li-
braries on Android. In NDSS, 2016.
[41] M. Diamantaris, E.P. Papadopoulos, E. Markatos, S. Ioannidis,
and J. Polakis. REAPER: Real-time app analysis for augment-
ing the Android permission system. In CODASPY, 2019.
[42] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study
of Android application security. In USENIX Security, 2011.
[43] W. Enck, M. Ongtang, and P. McDaniel. Understanding An-
droid security. IEEE S&P Magazine, 2009.
[44] A.P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
Permissions demystiﬁed. In CCS, 2011.
[45] A.P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wag-
ner. Android Permissions: User attention, comprehension, and
behavior. In SOUPS, 2012.
USENIX Association
30th USENIX Security Symposium    3627
[46] F. Fischer, K. Böttinger, H. Xiao, C. Stransky, Y. Acar,
M. Backes, and S. Fahl. Stack overﬂow considered harm-
ful? The impact of copy paste on Android application security.
In IEEE S&P, 2017.
[47] Y. Fratantonio, A. Bianchi, W. Robertson, M. Egele, C. Kruegel,
E. Kirda, and G. Vigna. On the security and engineering impli-
cations of ﬁner-grained access controls for Android developers
and users. In DIMVA, 2015.
[48] Free Software Foundation.
GNU M4.
https:
//www.gnu.org/savannah-checkouts/gnu/m4/manual/
m4-1.4.18/index.html, 2016.
[49] V. Ganapathy, T. Jaeger, and S. Jha. Retroﬁtting legacy code
for authorization policy enforcement. In IEEE S&P, 2006.
[50] Google. Capsicum object-capabilities on Linux. https://
github.com/google/capsicum-linux, 2017.
Android app
[51] Google Play Protect.
overview of
classes:
and
A whirlwind
privacy
ity
security
in Android
https://static.googleusercontent.com/media/
www.google.com/en//about/appsecurity/play-
rewards/Android_app_vulnerability_classes.pdf,
2021.
problems
vulnerabil-
common
apps.
[52] Google Play Store.
Android top apps.
https://
play.google.com/store/apps/top, 2021.
[53] S. Heuser, A. Nadkarni, W. Enck, and A.R. Sadeghi. ASM:
A programmable interface for extending Android security. In
USENIX Security, 2014.
[54] R. Hicks, S. Rueda, D. King, T. Moyer, J. Schiffman, Y. Sreeni-
vasan, P. McDaniel, and T. Jaeger. An architecture for enforcing
end-to-end access control over web applications. In SACMAT,
2010.
[55] J. Huang, O. Schranz, S. Bugiel, and M. Backes. The ART of
app compartmentalization: Compiler-based library privilege