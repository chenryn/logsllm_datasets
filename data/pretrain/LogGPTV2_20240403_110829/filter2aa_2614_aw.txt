简化授权模式是授权码模式的简化授权流程，与授权码模式相比跳
过了客户端应用程序向授权服务器获取授权码的步骤，适用于无Server
端的客户端应用程序授权验证的场景，典型特点如下。
■ 客户端应用程序通常无Server端，仅仅是单一客户端架构的应用
程序。如移动端应用、桌面客户端应用、浏览器插件以及基于JavaScript
等脚本客户端脚本语言实现的应用。
■ 授权过程依赖于浏览器和JavaScript语言去运行。
■ 
采用简化授权模式获取Access 
Token时，不会返回Refresh
Token。
简化授权模式的工作流程如图8-4所示。
●图8-4 简化授权模式工作流程
1）用户操作客户端应用程序，如未授权访问，则客户端应用程序
重定向至授权服务器，重定向请求报文格式与授权码模式下的第23）步
类似，但参数response_type的值为token，此时请求报文格式如下所示：
2）显示用户授权确认页面。
3）用户确认给客户端应用程序授权，并提交授权服务器。
4）授权服务器接收授权许可后，在第13）步的redirect_uri的参数后
追加访问令牌Access Token。其响应格式如下所示：
5）与授权码模式第73）步一致，客户端应用程序授权处理追加的
访问令牌Access 
Token，处理成功后携带Access 
Token访问受保护资
源，资源服务器向授权服务器验证Access Token的正确性与时效性。
6）访问令牌验证通过，资源服务器开放受保护资源的访问权限。
（4）密码模式和客户端凭证模式
密码模式是将用户或资源所有者的用户名和密码直接交给客户端应
用程序，由客户端应用程序向授权服务器进行授权认证，此种方式下认
证凭据的安全性较差，逐渐被客户端凭证模式取代，这节将以介绍客户
端凭证模式内容为主。
考虑到密码模式的不安全性，客户端凭证模式通过应用公钥、私
钥、证书等方式充当客户端应用程序的身份凭据，授权服务器通过验证
客户端身份颁发Access Token，适用于任何与用户类型无关的客户端应
用程序授权验证场景，其典型特点如下。
■ 过程简洁，无须用户参与，非常适用于纯后端应用程序。
■ 认证凭据的安全性依赖于应用程序的安全保护措施。
其工作流程如图8-5所示。
●图8-5 客户端凭证模式工作流程
1）客户端应用程序携带客户端凭证向授权服务器发起请求。此时
的请求报文格式如下：
这个请求中有两个地方需要注意。
■ grant_type：这里的参数值为固定值，填入client_credentials。
■ Authorization：在header字段中，表示身份认证的方式与认证凭
据，比如上述样例为HTTP BASIC基础认证，认证凭据是Base64编码后
的值。
对于API请求，互联网厂商通常使用应用程序注册平台生成的
APPID和API KEY作为认证凭据。不同的厂商对此类授权采用的认证方
式的附加参数虽各不相同，但必需的参数是一致的。
2）授权服务器验证认证凭据，颁发访问令牌和刷新令牌，其响应
消息格式和其他授权方式一致。
3）与授权码模式第73）步一致，客户端应用程序授权处理追加的
访问令牌Access 
Token，处理成功后携带Access 
Token访问受保护资
源，资源服务器向授权服务器验证Access Token的正确性与时效性。如
果访问令牌Access Token验证失败，则可以使用刷新令牌重新申请访问
令牌Access Token。
4）访问令牌验证通过，资源服务器开放受保护资源的访问权限，
响应资源信息。
（5）设备码模式
设备码模式是OAuth协议拓展部分专门面向缺少浏览器的设备而提
供的授权方式，比如智能电视、打印机、多媒体控制设备等。这类设备
的特点是缺少像普通的笔记本计算机、智能手机类设备所拥有的浏览器
处理能力，无法进行类似于授权码模式下的用户、授权服务器之间的重
定向、跳转之类的操作，取而代之的是在设备上提示用户，用笔记本计
算机、智能手机类的设备访问授权服务器，完成授权操作过程。其工作
流程如图8-6所示。
●图8-6 设备码模式工作流程
1）设备客户端携带设备ID请求授权服务器。此时请求的消息格式
如下所示：
这个请求中有两个参数需要注意。
■ client_id：是指应用程序注册时，平台生成的ID值。
■ scope：可选值，表示授权的范围，如这里的API可读值api-read。
2）授权服务器响应设备信息，这里的响应信息包含的内容格式如
下：
对于授权服务器响应的设备JSON对象，其中各个参数的含义如
下。
■ device_code：设备授权时携带验证码，必填值。
■ user_code：用户授权时录入的验证码，必填值。
■ verification_uri：用户通过此uri进行授权许可确认，必填值。
■ verification_uri_complete：包含user_code的verification_uri值，可
选值。
■ expires_in：表示device_code和user_code的有效期，以s为单位，
必填值。
■ interval：表示请求间隔，以s为单位，可选值。其含义是如果使
用了该值，则设备客户端请求在第5）步时的请求间隔为此值，比如此
处为5s。
3）设备客户端显示授权链接或访问方式，比如供智能手机扫描的
二维码、供用户输入的验证码。
4）用户使用智能终端、Pad、笔记本计算机等，访问链接并录入验
证信息，确认授权许可。比如根据第2）步的响应信息，用户访问
verification_uri地址https://example.com/device，录入user_code的值
WDJB-MJHT，验证身份后确认授权许可。如果设备支持二维码扫描，
则用户扫描二维码即可操作。
5）设备客户端程序不停请求授权服务器，获取访问令牌，直到授
权服务器接收到用户确认授权为止。请求消息格式如下所示：
请求的URL中包含3个必填参数，各个参数的含义如下。
■ 
grant_type：授权类型，必须是urn:ietf:params:oauth:grant-
type:device_code。
■ device_code：第2）步响应消息中的device_code值。
■ client_id：设备客户端程序注册时生成的ID值。
6）当授权服务器接收到上一步用户确认的授权许可后，响应设备
客户端程序请求，颁发访问令牌给设备客户端，响应消息格式和授权码
模式一致。至于接下来的第73）和第83）这两步，和其他授权方式也完
全一致。
通过上述章节对OAuth协议中5种不同授权方式的详细介绍，读者
可以明白不同的API使用环境在OAuth的授权方式中都能找到对应的解
决方案，比如无Server端的应用程序选择简化授权模式，普通Web应用
程序选择授权码模式，纯后端应用程序选择客户端凭据授权模式，IoT
设备选择设备码授权模式等。但从API的交互来看，至少包含两个层面
的授权：一个是功能级或资源级的授权，这是OAuth授权协议所擅长解
决的问题；另一个是某个功能或资源中包含的数据级授权，这在OAuth
中往往不能彻底解决，在实际应用中往往需要依赖于RBAC模型，做更
细粒度的权限访问控制，下面就和读者一起来看看RBAC模型的相关知
识。
8.2.2 RBAC模型
RBAC是Role-Based Access Control的缩写，含义为基于角色的访问
控制模型，此模型是20世纪90年代在美国第十五届全国计算机安全大会
上提出的，后逐步被业界广泛使用，至2004年形成了ANSI/INCITS标
准。时至今日，RBAC访问控制模型已经渗入IT领域的多个方面，有传
统技术方面的操作系统、数据库、中间件Web服务器，有新兴技术方面
的Kubernetes、Puppet、OpenStack等。RBAC访问控制模型能得到如此
丰富而广泛的使用，得益于它基于用户与角色关系分配权限进行访问控
制的核心理念。
1.RBAC模型相关概念
一家企业或组织中存在着多个不同的角色，不同的角色做着不同的
事情。RBAC模型的核心理念是，为企业或组织创建多个角色，每一个
角色分配特定的权限，再给企业中的成员分配特定的角色。通过管理成
员角色的方式来管理权限，大大简化了操作的难度。
在RBAC模型中，定义了三条主要规则，其基本含义如下。
■ 角色分配：是指只有为某个用户（用户是指真实自然人或应用程
序）分配了该角色后，才具有该角色对应的权限。
■ 角色授权：对应于安全设计原则中的最小特权原则，即用户被授
予某个角色之后，仅能完成所授予权限内的活动。
■ 权限授权：是指仅当某个角色被授予权限后，该角色被分配的用
户才具有此角色所授予的权限。
这三条规则之间，构成了一个用户→角色→权限的关系链，这个链
上的任何一个环节出了问题，均无法完成正确的授权访问，这是RBAC
模型的核心授权思路。用户、角色、权限这三者的关系用E-R图表示，
如图8-7所示。
●图8-7 用户、角色、权限三者关系
在这三者关系中，一个用户对应多个角色，同样，一个角色也可
以分配给多个用户；一个角色可以分配多个权限，同样一个权限可以
分配给多个角色。它们之间，都是多对多的关系。
为了满足业务发展的需求，RBAC模型在上述核心授权思路上做了
相应的拓展，被称为RBAC1、RBAC2、RBAC3。RBAC1模型主要增加
了角色继承的概念，很多业务场景中，角色存在上下级关系。比如银行
业务中省行的行长和地市分行的行长之间的关系、大型集团公司业务中
大区经理和片区经理之间的关系；RBAC2模型主要增加了责任分离关
系，面向授权访问添加了诸多约束，这也是为了满足业务的需要。比如
在企业内部，出纳和会计是两个不同的角色，这两个角色如果由一个人
来担任，则可能会出现资金流失而无人知晓的情况，所以在RBAC模型
实现时，通过授权约束，限制同一个人被授予出纳和会计这两个角色，
以规避风险；RBAC3模型是RBAC1和RBAC2的组合，既添加了角色继
承，又有访问控制约束，以满足更加复杂的业务需求。
在实际的互联网应用中，大多数场景下RBAC3能满足业务需求，
但随着近些年数据安全监管和业务风控的需要，很多企业在RBAC3的
基础上做了进一步的延伸，下面就和读者一起来看看此模型的技术实
现。
2.RBAC3模型技术实现
在调用API的可视化组件中，最常见的是前端Web页面。通常来
说，一个前端Web页面包含以下元素。
■ 模块：是指多个业务功能相近的功能组合，比如用户管理模块中
有用户注册、用户信息修改、用户注销、用户锁定等。
■ 菜单：通常对应某个具体的业务功能页面，有上级菜单和子菜单
的区别。