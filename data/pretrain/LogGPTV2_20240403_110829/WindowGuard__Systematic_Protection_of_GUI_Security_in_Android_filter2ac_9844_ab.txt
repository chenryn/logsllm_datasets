Window: Conceptually, window is a visual area on screen
that shows the GUI of the program it belongs to. In an app
activity, a window instance is a container that holds hierarchi-
cal GUI elements (view hierarchy) to be displayed on screen.
In Window Manager Service, each window is represented by a
WindowState instance, which contains all the parameters about
the window such as size, location, transparency, and z-order
etc. There are usually multiple windows at the same time and
the system composes them into one frame to be displayed on
screen. Android system deﬁnes three classes of windows: (1)
App window: the top-level window that is associated with an
activity; (2) System window: a set of windows that are used for
special purposes, e.g., status bar, navigation bar, and key guard
etc. (3) Sub-window: the window that is attached to the other
two classes of windows. It is noteworthy that although system
windows are mainly used by the system, third-party app can
also launch system windows as long as it is granted certain
permission (as we will see in Section II-B). For example,
method input or wall paper windows could come from third-
party packages.
B. GUI Architecture Overview
Figure 1 shows the architecture of Android GUI system and
illustrates how an app’s activity manages to display its window
on screen. The process involves the following steps from a high
level: (1) AMS launches a new activity of an app. (2) The new
activity then creates a window for itself during initialization
and registers the window to the WMS. WMS creates a new
WindowState instance that represents the new window and add
it to a window stack, which contains all available WindowState
instances in the system. (3) On behalf of the app, WMS then
asks the SurfaceFlinger to create a drawing surface for the
window, i.e. a buffer containing graphical data. The drawing
surface, also known as layer, is in turn shared with the app
by passing a handler back to the app. Meanwhile, WMS also
provides the window parameters to SurfaceFlinger such that
the latter can later use this information to compose the ﬁnal
App ActivityPhone WindowActivity Manager ServiceWindows Manager ServiceSurfaceFlingerH/WComposerTasksWindowStackLayerStackTextViewImageDecorViewView HierarchyApplicationSystem ServicesMobile DisplayUser12345Fig. 2. A snapshot of system states in AMS and WMS
through the window stack, calculate the new parameters for
all windows, and pass the new information to SurfaceFlinger,
which would compose all updated layers and ﬁnally reﬂect the
changes on screen.
As shown in Figure 2, the window stack ranks windows
by a numeric value called z-order. A window with higher z-
order resides higher in the stack, which means that the window
will appear on top of others if window overlap occurs. A
preliminary z-order is ﬁrst assigned to a window based on
its type. For example, app windows have lower z-order values
while system windows (such as status and navigation bar) have
higher values and hence are shown on top of screen. The ﬁnal
z-order is further determined based on a variety of factors,
such as window function, order of creation, etc. For instance,
the z-order of an input method window is always set to be
a bit higher than the app window (B1 window) that requests
the input keyboard, but not higher than the window that is
originally above the app window.
A window can either be visible or hidden, and there are
usually multiple visible windows simultaneously. Figure 2 ex-
hibits the visible windows in WMS and their window areas on
screen. Here, visibility does not refer to whether being visible
by naked eye. Instead, visibility is a window state. if “visible”,
it indicates that the window is ready for display. Nevertheless,
whether the window will ﬁnally be shown on screen depends
on the location, transparency and z-order of other “visible”
windows. That is, if the window area is completely overlaid
by other windows higher in the window stack, the window is
in fact hidden “behind” the foreground windows even if the
state is “visible”. For example, although the visibility of the
launcher’s wallpaper window in Figure 2 is always set to be
“visible”, it is completely overlayed by other visible windows
(because it resides at the bottom of the window stack) and is
in fact invisible on display. On the other hand, if visibility is
set to “hidden”, a window will not be displayed at all.
Given the windows in window stack, WMS is able to
quickly and reliably identify the owner of each window
by using WindowToken and AppWindowToken. As its name
implies, a WindowToken is a type of binder token (will be
discussed in Section II-C) that is used to uniquely identify a
group of related windows in the system. AppWindowToken
is similar to WindowToken, except that all windows in the
group are associated with the same activity. In other words,
an AppWindowToken is a representation of its corresponding
activity instance in AMS. Given these two types of tokens, we
classify all windows in the system into two categories. As we
will see, it is important to make such distinction for the design
of GUI security scheme.
1)
2)
Activity window: the window that is associated with
an activity. It may be a top level app window or a sub
window attached to the app window. An activity may
have multiple windows. These windows are grouped
into a list under the corresponding AppWindowTo-
ken, which uniquely identify the activity in AMS.
Free window: a window that is not associated with
any activity. A free window is either a system window
or a sub-window attached to the system window.
Figure 2 shows all available WindowTokens, and App-
WindowTokens including their one-to-one mappings to Activ-
ityRecord instances in AMS. Notably, two activity windows
are visible and both belong to token A2: one sub window in
the foreground (a progress dialog “A2 Sub”), and another app
window (”A2 Win”) beneath it. They are emplaced above all
other activity windows by WMS when activity A2 becomes
the focused activity. In addition, an activity window is always
started by an activity. On the other hand, both the system and
third-party apps can directly launch free windows by making
an addView() API call to WMS, e.g., app A is free to start
a toast window (one type of system window) on top of other
windows in Figure 2.
C. Security Mechanisms
There are three security mechanisms that play critical roles
for GUI security in Android: app sandboxing, binder token,
and permission scheme.
In Android, every app is given a unique Linux UID and
runs in a separate process by default, which effectively isolates
one app from the others. From GUI’s perspective, sandboxing
guarantees the isolation of the graphic information in each app
window, e.g., preventing an app from modifying the drawing
surface of another app, given that the system itself is not
compromised.
In reality, an app crosses process boundaries and communi-
cate with system services to enable its proper functionality by
using an important IPC mechanism called binder. In this client-
service communication, it is crucial for the system services
turns out
to securely identify who the client
is. It
that a
binder object has a unique property that
is supported by
4
Task	B	Task	A	AMS	Task	L	Wallpaper	Win	Launcher	Win	B1	Win	A1	Win	A2	Win	A2	Sub	Win	Input	Win	Toast	Win	Keyguard	Win	Status	Bar	Win	B1	Launch	A1	A2	Input	Sys	WMS	Window	stack	Z-order	A2	A1	B1	Launcher	Ac0vity	Record		Focused	Ac0vity	Record		WindowToken		AppWindowToken		Visible	Window		Invisible	Window	Wall	paper	NavigaBon	Bar	Win	App	A	A1	A2	S	R	App	B	B1	Launcher	L	Ac0vity		App	Service		Broadcast	Receiver	addView()	Apps																																																				System		Services																																																									Mobile	Display	Back	Stacks	the binder driver: each binder object maintains a globally
unique identiﬁer across all processes. This property makes
a binder object ideal for app authentication purpose, i.e., a
binder object
is used as a security token shared between
client and system service. Speciﬁcally, AMS and WMS create
app/window tokens (e.g. AppWindowToken and WindowTo-
ken) and share them with a client app. When a client app
(or its enclosed activity) asks for service, the system services
require the client to identify itself by including the given token
in its request. This authentication scheme is a cornerstone of
Android security architecture. It prevents system services from
being spoofed by the attacker, e.g., mistakenly modifying the
window states of another app, or delivering user inputs given
on a window to the wrong app.
Moreover, Android provides ﬁner-grained security enforce-
ment based on its permission mechanism. Apps must explicitly
declare the permission they need for additional capabilities. For
example, an app can launch certain system windows only if it
has obtained the SYSTEM_ALERT_WINDOW permission. Per-
mission can also be declared to protect activity. During activity
launch, AMS enforces access control by consulting Package
Manager Service, which checks the permission requirement of
the callee activity (if there is any) and returns the check result
to AMS.
D. Security Risks
Although the current security model works especially well
in many aspects, it performs poorly in protecting the GUI
system against existing attacks. The fundamental problem is,
in the GUI context, it is the user session - a list of GUIs that
an user has visited in a time series when doing a particular
job - that requires security guarantees and protection. The
security of app sandboxing is only enforced on process/app
boundaries,
leaving the user sessions vulnerable to being
arbitrarily interrupted or manipulated by attacker, e.g. popping
up a phishing window, or redirecting the user to a different
task during app navigation.
Unfortunately, this problem is further exaggerated by the
uniqueness of GUI in mobile environment. First, unlike the
desktop machines, the screen of a mobile device is relatively
small and usually only shows one app at a time. To save space,
there is generally no app identiﬁer on screen, e.g. a task bar
or a window title bar like in desktop OSes. Because of this
limitation, it is cumbersome for a user to constantly verify
the real identity of the current GUI. Although a user can
resort to the recent button for the name of the current task,
the displayed information is untrustworthy as the recent task
list is subject to manipulation by attackers [28]. Therefore, for
a normal user reliably identifying the current GUI becomes
infeasible. Secondly, the GUI design and the norm of app
navigation makes GUI attacks more likely to succeed. For
example, because the user has been accustomed to the default
app navigation behaviors, one might be easily spoofed if these
default behaviors are maliciously tampered. Due to the lack
of user control to the screen, it is troublesome for the user to
escape a lock screen (e.g., a non-escapable system window)
in a denial-of-service attack. Thirdly, Android provides app
developers with great ﬂexibility to control the window states
in the system without being strictly disciplined. For example,
Category
Attack Vector
Conseq-
uences
Window
Overlay
Task
Hijacking
UI interception attack [13]
Tapjacking attack [19], [25], [29]
Toast message [19], [25]
Phishing attack [2], [7], [13], [29]
Immersive full screen attack [2]
Denial of Service
Adware
Back button hijacking [2], [28]
App launch spooﬁng [28]
Denial of Service [28]
User monitoring attack [28]
moveTaskTo APIs [2]
A
B
A, B
A, C
A, C
D
D, E
A, C
A, C
D
F
A, C
EXISTING KNOWN GUI ATTACK VECTORS IN PRIOR WORK.
TABLE I.
THE CONSEQUENCES ARE: A - SENSITIVE DATA STOLEN; B - USER INPUT
EAVESDROPPING; C - USER SPOOFING; D - LOSS OF AVAILABILITY; E -
MALWARE INFECTION; F - USER PRIVACY INFRINGEMENT
a normal app can freely launch new activities, add high z-
order system windows on screen, or modify other apps’ back
stacks. Originally intending to promote the platform features
for app developers, these features inadvertently enrich the GUI
attack vectors and facilitate the mal-behaviors. In fact, Google
has long realized the security issues of the over-ﬂexible GUI
features, and has taken steps to remedy the problems in newer
Android releases, e.g. adding security attributes to GUI com-
ponents, requiring explicit user consent to certain permissions,
enforcing runtime permission, etc. However, many security
features are barely used by unwitting developers (even Google
apps themselves). Even if they are fully employed, the ad-
hoc protection cannot systematically mitigate all attacks. On
the other hand, removing or modifying the longstanding GUI
features will break a bulk of existing apps.
As a result, the Android GUI system becomes particularly
vulnerable to a variety of GUI attacks that can be easily
launched without conﬁnement. This is proven by both the prior
research ﬁndings and the rapidly growing real-world threats.
To the best of our knowledge, Table I shows a full list of
known GUI attacks. Depending on attack vectors, all attacks
are classiﬁed into two categories:
• Window overlay attack: attacks that render a window
on top of screen, partially or completely overlaying
other windows.
Task hijacking attack: a class of malicious behaviors
that trick the system to modify the app navigation
behavior or the tasks (back stacks) in the system.
•
Both categories of attacks can cause serious consequences
as shown in the last column of Table I. In summary, we
consider a threat model as follows:
Threat Model: We consider a harmful app has been installed
on the user’s Android device. Like most real-world malware,
the harmful app does not have system privilege, e.g., running
with a system UID. Instead, it may seem harmless, requiring a
minimal set of permissions needed for the malicious purpose.
We assume that
the system itself is un-compromised and
trustworthy. We also assume that one window involves one
principal. In the cases when a window is composed of elements
from different principals, e.g., the app itself and an embedded
third-party ad library, we consider the principal to be the owner
of the window. In order to achieve its malicious purpose,
5
Fig. 3. Multiple activity sessions in the system.
the attacker’s goal is clear: affect a normal user session to
the attacker’s advantage using windows or activities under
attacker’s control.
III. ANDROID WINDOW INTEGRITY
As discussed, the existing security model is not designed
to cope with GUI attacks. The fundamental limitation is, GUI
attack targets a normal user session, a series of windows that
user has visited, which is beyond the scope of app sandboxing
protection. Motivated by the challenges and serious threats,
we propose a new security model - Android Window Integrity
(AWI) - to ﬁll in this important security gap. AWI is a generic
model for Android GUI security. It redeﬁnes a user session as
a chain of activities starting from the launcher, speciﬁes the
capabilities of various principals in the system, and describes
the criteria of how the GUI system should be kept valid from
one state to the next.
A. Display Owner and Activity Session
The key principle of AWI is that, no application, by default,
has permission to perform any operations that would adversely
affect the user session of other apps or the system UI. At the
center of the model are display owner and activity session,
which are the basic entities to be protected in AWI, just like
an app process in the app sandboxing.
that
As discussed in Section II-D, mobile display is an unique
time sharing resource that
is shared by different apps at
different time. We introduce display owner, the one and only
one principal
is more privileged than other apps and
“owns” the mobile display at a time. In AWI, we specify the
display owner to be the app of the currently focused activity.
It means that the app of the focused activity is more privileged
than others in terms of GUI-related operations, and its windows
and user session is protected under the AWI model (although
the display owner is still disciplined by the existing security