# Availability Study on Cloud Computing Environments: Live Migration as a Rejuvenation Mechanism

**Authors:**
- Matheus D'Eça Torquato de Melo
- Paulo Romero Martins Maciel
- Jean Araujo
- Rúbens de Souza Matos Júnior
- Carlos Araújo

**Affiliation:**
Informatics Center, Federal University of Pernambuco, Recife, Brazil

**Email:**
{mdetm, prmm, jcta, rsmj, cjma}@cin.ufpe.br

## Abstract
The increasing adoption of cloud computing environments has made high availability studies more significant. Software rejuvenation is a crucial mechanism for improving system availability. This paper presents a comprehensive availability model to evaluate the use of live migration for enabling VMM (Virtual Machine Monitor) rejuvenation with minimal service interruption. Live migrations are triggered based on a time-based policy. We evaluate five different scenarios with varying time intervals for triggering rejuvenation. The results show that live migration can significantly reduce system downtime.

**Keywords:** Cloud computing, software aging and rejuvenation, live migration, availability.

## 1. Introduction
Virtualization offers benefits such as better resource utilization and fault tolerance, making it essential for various platforms and a key enabler of the cloud computing paradigm [1]. A critical feature of cloud systems is the ability to move virtual machines (VMs) from one physical host to another, known as VM migration [2].

Many cloud-based systems require near-continuous service, making system availability a major concern. In this context, software rejuvenation is a promising technique to achieve high availability [3]. In cloud environments, VMs run on a Virtual Machine Monitor (VMM), also called a hypervisor. This component is susceptible to failures or hangs due to software aging. Continuous application execution can lead to performance degradation and increased failure rates [4]. In such cases, software rejuvenation can be used as a preventive measure.

In cloud environments, applications are hosted on VMs. Rejuvenation actions on the VMM can cause VM paralysis or termination, reducing system availability. Therefore, the rejuvenation process must align with required availability levels. To minimize downtime, VMs can be moved to another host using live migration before applying rejuvenation actions. If live migration is intensive, however, it may also degrade availability.

This paper proposes a comprehensive availability model for a cloud computing environment with time-based rejuvenation supported by live migration. The primary objective is to evaluate the impact of different rejuvenation policies on steady-state availability. We created five scenarios with different rejuvenation policies and evaluated them to determine steady-state availability and expected annual downtime. The models also consider non-aging-related failures. Sensitivity analysis shows that steady-state availability is substantially improved with the appropriate trigger interval for rejuvenation actions.

## 2. Software Aging and Rejuvenation
Software aging is defined as the gradual degradation of a software's internal state during its operational life [5]. It is caused by the cumulative effect of software faults activation during runtime [4]. In long-running systems, software aging increases the failure rate due to the accumulation of errors, leading to issues such as data inconsistency, numerical errors, and resource exhaustion [5].

Studies have characterized software aging in various systems, including cloud environments [7, 8, 9]. These studies demonstrated the occurrence of faults in private cloud infrastructures due to memory leaks and increased CPU utilization, which can degrade application performance and lead to service unavailability.

To mitigate aging effects, software rejuvenation techniques can be applied. These techniques aim to reduce the impact of aging during runtime until the underlying causes (e.g., software bugs) are permanently fixed. Common rejuvenation approaches include software restarts or system reboots, which, while effective, can cause service downtime. In [11], rejuvenation strategies were proposed to mitigate downtime in the Eucalyptus cloud computing framework.

## 3. System Architecture
The system under study consists of three main components: Main Node, Standby Node, and Management Server. The Main Node hosts the VMM and runs the VM with the desired application. The Standby Node serves as a spare host that takes over the Main Node's role during VM migration, similar to warm standby replication [12]. The Management Server controls the entire cloud environment using a specific cloud management tool.

The system architecture is shown in Figure 1. Additionally, there is a remote storage volume accessed by the VM and managed by the Management Server. All components are interconnected in a private network.

![System Architecture](fig1.png)

### Operational Mode
- The Main Node and its VM must be running and working properly.
- The Management Server must be up and running to control the environment.
- If the Standby Node fails, the system does not stop, but migration is disabled.
- The roles of the Standby Node and Main Node are swapped when the VM migrates, making host availability essential for system availability after migration.

### Failure and Rejuvenation
- The VMM is affected by software aging, which can lead to hangs or total system failures.
- Non-aging failures in the Main Node or Standby Node clear all aging effects because repair mechanisms involve restarting related components.
- To clear aging effects, a rejuvenation process is periodically scheduled, supported by VM live migration to minimize downtime. When a VM migration is requested, the Main Node moves the VM to the Standby Node. After the migration, the Standby Node becomes the new Main Node, and the previous Main Node undergoes rejuvenation. Once rejuvenation is complete, the original Main Node assumes the Standby Node role.

## 4. Availability Models
The availability models are built using extended Deterministic Stochastic Petri Nets (SPNs) [14, 15] and Reliability Block Diagrams (RBD) [16]. We consider both non-aging and aging-related failures to analyze the rejuvenation impact on the system.

### RBD Models
- **Node RBD (Figure 2a)**: A node fails if either the hardware (HW) or the operating system (OS) fails.
- **Management Server RBD (Figure 2b)**: The Management Server fails if the hardware, operating system, or management tool fails.

![RBD Models](fig2.png)

### SPN Model
Our SPN model assesses the impact of the rejuvenation process on the system's steady-state availability. The model includes three sub-models:
- **ManagementServer Model**: Represents the behavior of the Management Server, with times to failure and repair derived from the RBD model.
- **Clock Model**: Manages the rejuvenation schedule, firing the `Trigger` transition after a deterministic time and depositing a token in the `ReadyToMigrate` place. The `ResetClock` transition enables the next cycle after migration.
- **System Model**: Represents events related to the Main Node, Standby Node, and VM. The `MN_UP` place indicates that the Main Node and its VM are running properly. Transitions like `MN_fail`, `MN_repair`, `VM_fail`, and `VM_repair` handle non-aging failures. The VMM aging is modeled using a 3-phase Erlang sub-net, representing an increasing failure rate. The `DoLiveMigration` transition starts the live migration, which requires both nodes to be running and the clock to signal readiness.

## 5. Model Analysis and Results
We conducted an availability study to evaluate the impact of different rejuvenation policies based on live migration. Five scenarios with varying rejuvenation policies were created to determine steady-state availability and annual downtime. The appropriate trigger interval for rejuvenation was also identified for each scenario. Previous studies show that the time to aging-related failure (TTARF) depends on the workload [13]. Therefore, we evaluated the model using different TTARF values.

### Scenarios and Results
- **Scenario 1**: Trigger interval = 1 hour
- **Scenario 2**: Trigger interval = 2 hours
- **Scenario 3**: Trigger interval = 4 hours
- **Scenario 4**: Trigger interval = 8 hours
- **Scenario 5**: Trigger interval = 16 hours

The results indicate that live migration significantly reduces system downtime, with the optimal trigger interval balancing between frequent rejuvenation and minimal service interruption.

## 6. Conclusion and Future Work
This paper presented a comprehensive availability model for evaluating the use of live migration for VMM rejuvenation in cloud computing environments. The results show that live migration can effectively reduce system downtime. Future work will focus on optimizing the trigger interval and exploring other rejuvenation techniques to further enhance system availability.

---

**Figures:**
- Figure 1: System Architecture
- Figure 2: RBD Models (Node and Management Server)
- Figure 3: SPN Model

**References:**
[1] - [17] (Include full references here)