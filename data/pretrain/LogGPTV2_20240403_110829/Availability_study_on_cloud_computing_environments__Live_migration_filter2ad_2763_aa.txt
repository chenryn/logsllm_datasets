title:Availability study on cloud computing environments: Live migration
as a rejuvenation mechanism
author:Matheus D'Eça Torquato de Melo and
Paulo Romero Martins Maciel and
Jean Araujo and
R&apos;ubens de Souza Matos J&apos;unior and
Carlos Ara&apos;ujo
Availability Study on Cloud Computing
Environments: Live Migration as a Rejuvenation
Mechanism
Matheus Melo, Paulo Maciel, Jean Araujo, Rubens Matos and Carlos Ara´ujo
Informatics Center, Federal University of Pernambuco
Email: {mdetm, prmm, jcta, rsmj, cjma}@cin.ufpe.br
Recife, Brazil
Abstract—With the increasing adoption of cloud computing
environments, studies about high availability in those systems
became more and more signiﬁcant. Software rejuvenation is
an important mechanism to improve system availability. This
paper presents a comprehensive availability model to evaluate
the utilization of the live migration mechanism to enable VMM
rejuvenation with minimum service interruption. Live migrations
are performed observing a time-based trigger. We evaluate ﬁve
different scenarios, with distinct time intervals for triggering
the rejuvenation. The results show that the live migration can
signiﬁcantly reduce the system downtime.
Keywords—Cloud computing, software aging and rejuvenation,
live migration, availability.
I.
INTRODUCTION
Virtualization brings some beneﬁts like better utilization
of resources and fault tolerance. Due to these capabilities,
virtualization became essential for various types of platforms,
and leveraged the cloud computing paradigm [1]. An impor-
tant feature for cloud systems is the ability to move virtual
machines (VMs) from one physical host
to another. This
characteristic is called VM migration [2].
Many systems which rely on cloud computing platforms
require nearly uninterrupted service. Therefore system avail-
ability is an important concern for cloud platforms. In this
context, software rejuvenation is an auspicious technique to
achieve high availability [3]. In cloud environments the VMs
run on a Virtual Machine Monitor (VMM), also called hy-
pervisor. This component is liable to suffer failures or hangs
due to software aging. When an application goes continuously,
its performance may degrade and failure rate may increase
[4]. In this situation, software rejuvenation mechanism can be
performed as a fault prevention action.
On cloud computing environments, the applications are
hosted on VMs. Rejuvenation actions directed on the VMM
lead to VMs paralysis or termination. Therefore, the system
availability will decrease due to VMM rejuvenation. So, the
rejuvenation process needs to conform with the required avail-
ability levels. To achieve minimum downtime rejuvenation, we
have virtual machine migration, which consists to move VM
to other host before apply rejuvenation actions. If the VM is
moved using live migration [2] the downtime reaches minimum
levels. However, if the live migration is intensive on a cloud
environment, the availability may degrade as well.
This paper proposes a comprehensive availability model of
a cloud computing environment with time-based rejuvenation
supported by the live migration mechanism. The main objec-
tive is to evaluate the impact that different rejuvenation policies
based on live migration produce on the steady-state availability.
For this purpose, we created ﬁve scenarios with different
rejuvenation policies and evaluated them to ﬁnd steady-state
availability and expected annual downtime. The models also
consider some non-aging-related failures. Sensitivity analysis
shows that steady-state availability is substantially improved
with the appropriate trigger interval for the rejuvenation ac-
tions.
The remaining sections are organized as follows. Section
II explains the fundamental concepts of software aging and
rejuvenation. Section III describes the architecture of the pri-
vate cloud system analyzed in this paper, whereas Section IV
exposes the models developed to represent the cloud system.
Section V presents the results obtained through model analysis,
with focus on the availability metrics for each scenario. Section
VI concludes the paper, presenting also some possible future
works.
II. SOFTWARE AGING AND REJUVENATION
Software aging can be deﬁned as a growing degradation
of software’s internal state during its operational life [5]. The
causes of software aging have been veriﬁed as the accumulated
effect of software faults activation [6] during the system
runtime [4]. Aging in a software system is an accumulative
process.
In long-running execution, a system suffering from soft-
ware aging increases its failure rate due to the accumulation
of successive errors that degrade the system internal state in-
tegrity. Problems such as data inconsistency, numerical errors,
and exhaustion of operating system resources are examples
of software aging consequences [5]. Since the notion of
software aging was introduced [4], many researches have been
conducted in order to characterize this phenomenon in many
kinds of systems.
The software aging effects in cloud computing environ-
ments were addressed in [7] and [8]. These paper demonstrated
the occurrence of faults in a private cloud infrastructure due to
the accumulation of memory leaks in some software compo-
nents of the Eucalyptus platform. [9] also shows that there is
an increase of CPU utilization during consecutive attachments
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:48 UTC from IEEE Xplore.  Restrictions apply. 
of remote block storage volumes by means of Eucalyptus
commands. Such an aging effect degrades the performance
of applications running on Eucalyptus-based clouds and may
lead to service unavailability.
Once the aging effects are detected, mitigation mechanisms
might be applied in order to reduce their impact on the
applications or the operating system. The employment of such
mitigation mechanisms is known as software rejuvenation [10].
Since the aging effects are typically caused by hard to track
software faults, rejuvenation techniques look for reducing the
aging effects during the software runtime, until
the aging
causes (e.g., a software bug) are ﬁxed permanently. Examples
of rejuvenation approaches may be software restart or system
reboot, which are effective actions but may cause service
downtime, since the application or system is unavailable during
the execution of these actions. In [11], rejuvenation strategies
have been proposed for mitigating the downtime caused by the
aging effects in the Eucalyptus cloud computing framework.
III. SYSTEM ARCHITECTURE
This study considers a system with three main components:
Main Node, Standby Node and Management Server. The Main
Node represents the main host of the environment, containing a
VMM which runs the VM with a desired application. Standby
Node is a spare host which assumes Main Node role when
a VM migrates to it. This mechanism is similar to an warm
standby replication [12]. Management Server is a component
responsible for controlling the entire cloud environment, by
means of a speciﬁc cloud management tool.
The system’s organization is presented on the ﬁgure 1.
Besides the mentioned three main components,
there is a
remote storage volume which is accessed by the VM and
managed by the Management Server. All components are
interconnected in a private network.
properly. Management Server needs to be up and running,
because it controls the whole environment. If the Standby Node
fails, the system does not stop, only the migration is disabled.
It is worth highlighting that the roles of Standby Node and
Main Node are swapped when the VM migrates, therefore the
host availability becomes essential to system availability as
soon as an incoming migration is completed.
The study considers that the VMM is affected by software
aging [13]. The consequences of software aging comprises
hangs to total system failures. When the Main Node is up
and running, the VMM is aging (what can lead to failure),
and the VM or the other Main Node components (hardware
and operating system) may also fail. The Standby Node can
fail if its hardware or operating system goes down. If the Main
Node or Standby Node suffer a non-aging failure, all the aging
effects are cleared because all the repair mechanisms involve
restart of related components, and subsequently the restart of
the VMM.
In order to clear aging effects on VMM, a rejuvenation
is periodically scheduled, supported by VM live migration to
minimize the downtime. When a VM migration is requested,
the Main Node moves the VM to the Standby Node. As the VM
migration completes, the Standby Node assumes the role of
the Main Node and a rejuvenation process is performed on the
previous Main Node. When this process ﬁnishes, the original
Main Node assumes the Standby Node role. The rejuvenation
process allows to clear aging status, taking the VMM on the
node to a fresh state, ready to receive the VM again when
needed.
IV. AVAILABILITY MODELS
The availability models are built using extended Determin-
istic Stochastic Petri Nets (SPNs) [14] [15] and Reliability
Block Diagrams (RBD) [16] formalisms. We consider the
occurrence of both, non-aging and aging-related failures in the
system. Such a characteristic enables the analysis of the reju-
venation impact on the whole system. For the hosting nodes
(MainNode and StandbyNode) and the ManagementServer, we
obtained the mean time to failure (MTTF) and mean time to
repair (MTTR) through the analysis of RBD models described
in Figures 2(a) and 2(b). These RBD models consider only
the non-aging failures. Figure 2(a) shows that a node fails
if either the hardware (HW) or the operating system (OS)
fails. Figure 2(b) shows that besides hardware and operating
system, a failure in the management tool may also bring the
Management Server down.
(a) RBD Node
Fig. 1. System Architecture
The system operational mode is described as follows.
The MainNode and its VM need to be running and working
(b) RBD MS (Management Server)
Fig. 2. RBDs MS and Node
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:48 UTC from IEEE Xplore.  Restrictions apply. 
Our SPN model is intended to assess the impact of rejuve-
nation process on the steady-state availability of the system. On
the evaluations performed the model does not take into account
failure detection times and details of the VM live migration
process. Failures of the Remote Storage Volume and network
problems are also neglected.
Figure 3 contains the SPNs model for the system under
study. The model is composed for three sub-models: a) Man-
agementServer Model, b) Clock Model and c) System Model.
The ManagementServer Model is a simple availability model
which represents the behavior of the Management Server of
the cloud. Times to failure and repair for this sub-model
(MS_fail and MS_repair, respectively) are retrieved from
RBD Model depicted in Figure 2(b). The Clock Model employs
an idea that is similar to that presented in [3]. This model repre-
sents the rejuvenation schedule for the system. The transition
Trigger ﬁres after an established deterministic time, and
deposits a token in the place ReadyToMigrate. At last, we
have the ResetClock transition which has a guard function
enabling the transition only when the migration process is
over. The System Model represents the main events related
to the Main Node, Standby Node, and the VM. The place
MN_UP represents that the Main Node and its VM (see ﬁgure
1) are running properly. From this point several transitions can
be ﬁred. MN_fail ﬁres when a internal (non-aging) failure
occurs on the Main Node. As the VM depends on the node, the
system fails when this transition is ﬁred. The recovery is given
by a two-step process. First, the Main Node is repaired, aiming
to solve this problem. After that, the VM needs to be restarted
to the system become operational again. The time values for
the transitions MN_fail and MN_repair are retrieved from
the RBD model depicted in Figure 2(a).
Another possibility when the system is running properly is
the VM failure. In the model, this is represented by ﬁring the
transition VM_fail, which deposits one token in the VM_DW
place. This place represents that the VM is failed. At this point,
two events are possible. Either the VM is repaired, so the
system returns to operating state, or the Main Node also fails.
If the second possibility occurs, ﬁrst the problem on the Main
Node is solved, thus allowing the repair of the VM. In any case,
the system only goes up when both (VM and Main Node) are
working.
To model the VMM aging phenomenon we used a 3-
phase Erlang sub-net. This kind of net is adopted because we
are handling a process which has an increasing failure rate.
This behavior can be seen in the bathtub curve, where the
failure rate increases after a certain stable period of life [5].
The transitions Aging and Aging2 represent the phases of
the sub-net. The transitions ClearAging, ClearAging2
and ClearAging3 represent events which clear the aging
effects of the VMM. The model consider that these events
occur when the Main Node or the VM fails, since the respective
repair actions involve rejuvenation actions, and there is no
reason to accumulate aging when the VM is not working.
When a live migration is performed the VM is moved to a fresh
VMM environment, therefore justifying the removal of aging
effects. If none of these events occur, the VMM achieves a
critical age, that leads to a failure (transition FailureAging
ﬁres). After that, the node reaches an inactive state (MN_Dead)
where it needs a recovery from aging effects (transition Re-
coverFromAging) so the system returns to an up state.
When there is a token in SN_up this means the spare
machine is up and can receive a VM by live migration.
However, if SN_fail is ﬁred, the Standby Node reaches an
inactive state and needs to be repaired to return to active state
(SN_repair is ﬁred). The time values for the transitions
SN_fail and SN_repair are retrieved from the RBD
model depicted in Figure 2(a). It is important to mention that
if the Standby Node fails, the system only fails if the Main
Node or the Management Server also fail.
follows. The
The behavior of
the rejuvenation supported by the
live migration is modeled as
transition
DoLiveMigration represents the start of live migration
event that can only occurs if some conditions are observed.
MainNode and StandbyNode must be running properly and
the clock have to announce that is the time to migrate (token
in place ReadyToMigrate of Clock Model). If only one
of these two conditions is satisﬁed the migration cannot occur.
When both conditions are satisﬁed, DoLiveMigration ﬁres
and puts a token on LiveM place. Live Migration consists to
move the VM to another host with a very small downtime [17]
which is represented in the model by the MigrationTime
transition. Thus, while a token remains on LiveM place, the
system is down. After the end of live migration, the source
node will undergo a rejuvenation process, the Standby Node
takes role of Main Node, and the system is up again. Therefore,
in this model the VM live migration is used to avoid a long
downtime during the rejuvenation action. The main goal is
to keep a spare machine with clear aging status ready to
receive the migrated VM. So, with a aging cleared machine the
VM can continue running, while the rejuvenation is applied
to the node which suffered software aging. The process of
rejuvenation is the RejuvenationNode transition. When
the node is under the rejuvenation process no migration is
allowed.
V. MODEL ANALYSIS AND RESULTS
We conducted an availability study on the system described
and modeled in the previous sections. The main objective
is to evaluate the impact that different rejuvenation policies
based on live migration will produce on the steady-state
availability. For this purpose we created ﬁve scenarios with
different rejuvenation policies and evaluated them to ﬁnd
steady-state availability and annual downtime. The appropriate
trigger interval for the rejuvenation is also found for each
scenario. Previous software aging studies on cloud platforms
show that the time to aging related failure (TTARF) depends
on the workload submitted for environment [13]. Therefore
we evaluated the model using different values of TTARF to