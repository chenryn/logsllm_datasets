echo \$i;
?\>
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\[root@proxy lnmp_soft\]# mv test.php /usr/local/nginx/html/
\[root@proxy lnmp_soft\]# php /usr/local/nginx/html/test.php #执行测试
t.php
33\[root@proxy lnmp_soft\]# #测试成功
\[root@proxy \~\]# netstat -ntulp \| grep 9000
tcp 0 0 127.0.0.1:9000 0.0.0.0:\* LISTEN 5757/php-fpm: maste
\[root@proxy \~\]# netstat -ntulp \| grep 80
\[root@proxy \~\]# nginx
\[root@proxy \~\]# netstat -ntulp \| grep 80
tcp 0 0 0.0.0.0:80 0.0.0.0:\* LISTEN 5986/nginx: master
\[root@proxy \~\]# netstat -ntulp \| grep 3306
tcp 0 0 0.0.0.0:3306 0.0.0.0:\*
### 4）源码安装Nginx（如果前面课程中已经安装Nginx，则忽略这一步）
\[root@proxy \~\]# useradd -s /sbin/nologin nginx
\[root@proxy \~\]# tar -xvf nginx-1.12.2.tar.gz
\[root@proxy \~\]# cd nginx-1.12.2
\[root@proxy nginx-1.12.2\]# ./configure \\
\> \--user=nginx \\
\--group=nginx \\
\> \--with-http_ssl_module
\[root@proxy \~\]# make && make install
修改Nginx配置文件:
第一个server里面有模板,取消#即可 ,为实验方便,将证书与私钥行给注释掉,
如果是动态,转发给9000端口
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
location \~ \\.php\$ {
root html;
fastcgi_pass 127.0.0.1:9000; #如果访问的是.php 转发给9000端口
fastcgi_index index.php;
\# fastcgi_param SCRIPT_FILENAME /scripts\$fastcgi_script_name;
include fastcgi.conf
}
:#将 fastcgi_param 行注释掉
include:是
参数由fastcgi_params改成 fastcgi.conf
,以前的版本是使用fastcgi_params,新版本使用fastcgi_conf
\[root@proxy \~\]# nginx -s reload #修改后重新加载配置
## 步骤二：启动服务
### 启动Nginx服务
（如果已经启动nginx，则可以忽略这一步）
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
\[root@proxy \~\]# systemctl stop httpd //如果该服务存在则关闭该服务
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx //启动Nginx服务
\[root@proxy \~\]# netstat -utnlp \| grep :80
tcp 0 0 0.0.0.0:80 0.0.0.0:\* LISTEN 32428/nginx
### 2）启动MySQL服务
\[root@proxy \~\]# systemctl start mariadb //启动服务器
\[root@proxy \~\]# systemctl status mariadb //查看服务状态
\[root@proxy \~\]# systemctl enable mariadb //设置开机启动
### 3）启动PHP-FPM服务
\[root@proxy \~\]# systemctl start php-fpm //启动服务
\[root@proxy \~\]# systemctl status php-fpm //查看服务状态
\[root@proxy \~\]# systemctl enable php-fpm //设置开机启动
### 4）设置防火墙与SELinux（非必需操作，如果有则关闭）
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
\[root@proxy \~\]# setenforce 0
# 2 案例2：构建LNMP平台
2.1 问题
沿用练习一，通过调整Nginx服务端配置，实现以下目标：
配置Fast-CGI支持PHP网页
创建PHP测试页面，测试使用PHP连接数据库的效果
2.2 方案
使用2台RHEL7虚拟机，其中一台作为LNMP服务器（192.168.4.5）、另外一台作为测试用的Linux客户机（192.168.4.10），如图-1所示。
![image001](media/image14.png){width="5.1402777777777775in"
height="1.882638888888889in"}
Nginx结合FastCGI技术即可支持PHP页面架构，如图-2所示。
![image002](media/image15.png){width="5.8625in"
height="2.4256944444444444in"}
因此本案例，需要延续练习一的实验内容，通过修改Nginx及php-fpm配置文件实现对PHP页面的支持。
注意，FastCGI的内存消耗问题，一个PHP-FPM解释器将消耗约25M的内存。
## 步骤一：查看php-fpm配置文件
\[root@proxy \~\]#vim /etc/php-fpm.d/www.conf #本实验中不需要修改
\[www\]
listen = 127.0.0.1:9000 //PHP端口号
pm.max_children = 32 //最大进程数量
pm.start_servers = 15 //最小进程数量
pm.min_spare_servers = 5 //最少需要几个空闲着的进程
pm.max_spare_servers = 32 //最多允许几个进程处于空闲状态
\[root@proxy \~\]# firefox 192.168.4.5/test.php #访问测试
## 步骤二：修改Nginx配置文件并启动服务
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
location / {
root html;
index index.php index.html index.htm;
#设置默认首页为index.php，当用户在浏览器地址栏中只写域名或IP，不说访问什么页面时，服务器会把默认首页index.php返回给用户
}
location \~ \\.php\$ {
root html;
fastcgi_pass 127.0.0.1:9000; #将请求转发给本机9000端口，PHP解释器
fastcgi_index index.php;
#fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
include fastcgi.conf;
}
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
## 步骤三：创建PHP页面，测试LNMP架构能否解析PHP页面
### 创建PHP测试页面1，
可以参考lnmp_soft/php_scripts/test.php：
\[root@proxy \~\]# vim /usr/local/nginx/html/test1.php
\
### 2）创建PHP测试页面,连接并查询MariaDB数据库。
可以参考lnmp_soft/php_scripts/mysql.php:
\[root@proxy \~\]# vim /usr/local/nginx/html/test2.php
\query(\$sql);
while(\$row = \$result-\>fetch_array()){
printf(\"Host:%s\",\$row\[0\]);
printf(\"\\");
printf(\"Name:%s\",\$row\[1\]);
printf(\"\\");
}
?\>
### 3）客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
\[root@client \~\]# firefox http://192.168.4.5/test1.php \[root@client
\~\]# firefox http://192.168.4.5/test2.php
### 4）LNMP常见问题
Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
PHP默认错误日志文件为/var/log/php-fpm/www-error.log
如果动态网站访问失败，可用参考错误日志，查找错误信息。
### 总结:
1.  安装nginx mariadb： mariadb-server mariadb-devel Php： php-fpm
    php-mysql
2.  启动nginx systemctl start mariadb systemctl start php-fpm
3.  修改配置nginx.conf
4.  修改配置php-fpm
5.  访问测试
6.  查看报错:用tailf #tailf 动态查看
Nginx默认访问日志:/usr/local/nginx/logs/access.log
Nginx报错日志:/usr/local/nginx/logs/error.log
PHP默认错误日志文件:/var/log/php-fpm/www-error.log
测试数据库
\[root@proxy php_scripts\]# cp mysql.php /usr/local/nginx/html/
\[root@proxy php_scripts\]# firefox 192.168.4.5/mysql.php
# 3 案例3：地址重写
rewrite 重写
rewrite 访问的地址 跳转到的地址
3.1 问题
沿用练习二，通过调整Nginx服务端配置，实现以下目标：
1.  所有访问a.html的请求，重定向到b.html;
2.  所有访问192.168.4.5的请求重定向至www.tmooc.cn；
3.  所有访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面；
4.  实现firefox与curl访问相同页面文件，返回不同的内容。
3.2 方案
关于Nginx服务器的地址重写，主要用到的配置参数是rewrite：
-   rewrite regex replacement flag
-   rewrite 旧地址 新地址 \[选项\]
## 步骤一：修改配置文件(访问a.html重定向到b.html)
### 1）修改Nginx服务配置：
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
rewrite /a.html /b.html; #rewrite 访问的地址 跳转到的地址
location / {
root html;
index index.html index.htm;
}
}
\[root@proxy \~\]# echo \"BB\" \> /usr/local/nginx/html/b.html
### 2）重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
### 3）客户端测试
\[root@client \~\]# firefox http://192.168.4.5/a.html
## 步骤二：访问a.html重定向到b.html（跳转地址栏）
### 1）修改Nginx服务配置：
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
rewrite /a.html /b.html redirect; #rewrite 访问的地址 跳转到的地址
重写类型
location / {
root html;
index index.html index.htm;
}
}
访问的地址：可以是字符串或者正则来表示想匹配的目标url
跳转到的地址：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用\$index来表示正则里的捕获分组
重写类型：
-   last
    ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变
-   break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变
-   redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址
-   permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
简单例子实例一：
server {
rewrite /last.html /index.html last; \# 访问 /last.html
的时候，页面内容重写到 /index.html 中
rewrite /break.html /index.html break;
#访问/break.html的时候，页面内容重写到/index.html中，并停止后续的匹配
rewrite /redirect.html /index.html redirect;
#访问/redirect.html的时候，页面直接302定向到/index.html中
rewrite /permanent.html /index.html permanent;
#访问/permanent.html的时候，页面直接301定向到/index.html中
rewrite \^/html/(.+?).html\$ /post/\$1.html permanent; \# 把
/html/\*.html =\> /post/\*.html ，301定向
rewrite \^/search\\/(\[\^\\/\]+?)(\\/\|\$) /search.html?keyword=\$1
permanent; \# 把 /search/key =\> /search.html?keyword=key
}
简单例子实例二：
www.168cd.cn和168cd.cn永久重定向到www.siyuanv.com,包括下面的子页面
server {
listen 80;
server_name www.168cd.cn 168cd.cn;
return 301 https://www.siyuanv.com\$request_uri;
location / {
root /opt/syqkl/html;
index index.html index.htm;
}
}