roles Acct, Audit, and TechSupport can be revoked from a
user by the administrator Alice.
We point out that so long as ra has at least one user,
the rule can potentially ﬁre as a state change. If ra has no
users, we remove the corresponding can assign rule from the
system as it has no eﬀect on error ﬁnding. One of the conse-
quences of this relates to what has been called the separate
administration restriction. We discuss this in Section 2.2
below.
We have omitted some other details that are in the original
speciﬁcation for URA [36] because those details are incon-
sequential to the error-ﬁnding problem we address in this
paper. For example, the original speciﬁcation allows for the
target role to be speciﬁed as a set or range of roles. We
assume that it is a single role, rt. A rule that has a set or
range as its component for the target role can be rewritten
as a rule for every role in that set or range. We know that
roles in a range do not change, as we assume that changes to
roles may be eﬀected only by trusted administrators. Policy
veriﬁcation is not used for such changes.
2.2 The error-ﬁnding problem
The error-ﬁnding problem in the context of access-control
policies arises because state changes may be eﬀected by users
that are not fully trusted, but an organization still wants
to ensure that desirable security properties are met. The
reason such problems can be challenging is that state-change
rules are speciﬁed procedurally, but security properties of
interest (e.g., Alice should never be able to read a particular
ﬁle) are declarative [24].
A basic error-ﬁnding problem is safety analysis.
In the
context of RBAC and ARBAC, a basic safety question is:
can a user u become a member of a role r? We call such a
situation (in which the safety question is true), an error.
In the remainder of this paper, when we refer to ARBAC,
There are two reasons that the basic safety question such
165its original, then the reﬁnements restrict the abstraction’s
behavior on each iteration, so that it has fewer behaviors,
until in the limit the abstraction equals the original. If the
abstraction is an under approximation, i.e., the abstraction
has fewer behaviors compared to its original, then the re-
ﬁnements relax the abstraction’s behavior on each iteration,
so that it has more behaviors, until in the limit the abstrac-
tion equals the original. Both techniques keep the errors
one sided. In the case of over approximation, correctness of
the abstraction corresponds with the original. In the case of
under approximation, an error detected in the abstraction
corresponds with the original.
Mohawk uses an under approximation strategy [6].
Therefore, any error detected in an abstract policy exists
in the original policy. Figure 2 illustrates the architecture of
Mohawk. Mohawk accepts an ARBAC Policy (cid:104)U, R, U A,
can assign, can revoke(cid:105) and a safety query (cid:104)u, r(cid:105) as input.
Mohawk reports an error if it ﬁnds one. Otherwise, Mo-
hawk terminates and reports that it could not ﬁnd any er-
rors. In the following, we will refer to the role in the safety
query as the query role. Brieﬂy, Mohawk works on the
input as follows:
• Input Transformation (§3.2): Mohawk transforms
the policy and safety query into an intermediate rep-
resentation (IR). The IR maintains a priority queue
of roles based on how they are related to the query
role, and uses this stratiﬁcation to incrementally add
roles, can assign, and can revoke rules in the reﬁne-
ment steps as necessary.
• Abstraction Step (§3.3): Mohawk performs an ini-
tial abstraction step to produce an abstract policy.
• Veriﬁcation (§3.4): In this step, Mohawk invokes
the NuSMV bounded model checker on the ﬁnite-state
machine representation of the current abstract policy.
If a counter example is produced by NuSMV, Mohawk
terminates and reports the error found. A counter ex-
ample, in model-checking parlance, is a sequence of
state transitions from the initial state to an error state
of the input ﬁnite-state machine. For Mohawk, the
counter example reported corresponds to an error in
the policy and is essentially a sequence of actions that
enable the unauthorized user referred in the safety
query to reach the query role.
• Reﬁnement Step (§3.5): If no counter example is
found in the previous step, Mohawk reﬁnes the ab-
stract policy.
If no further reﬁnements are possible,
Mohawk terminates and reports that it could not ﬁnd
any errors. Mohawk may execute the verify-reﬁne
loop multiple times, until either Mohawk identiﬁes
an error or no further reﬁnements are possible.
strategy is
Conﬁgurability of Abstraction-Reﬁnement. Mohawk’s
abstraction-reﬁnement
In
abstraction-reﬁnement techniques, there is an interplay be-
tween three factors, namely aggressiveness of the abstrac-
tion step, veriﬁcation eﬃciency, and number of reﬁnement
steps. Aggressive abstraction-reﬁnement makes the veriﬁca-
tion eﬃcient at the cost of increasing the number of reﬁne-
ments. A less aggressive abstraction-reﬁnement may reduce
conﬁgurable.
Figure 2: Mohawk Architecture
as the one from above has received considerable attention in
the literature [21, 30, 39, 46]. One is that it is natural in its
own right. The reason for asking such a question is that u
should not be authorized to r. If the analysis reveals that he
may be, by some sequence of state changes, then we know
that there is a problem with the security policy. Another
reason is that several other questions of interest, such as
those related to separation of privilege, can be reduced to
the basic safety question. This observation has been made
before [21, 46].
An instance of an error-ﬁnding problem, in the context
of this paper, speciﬁes an ARBAC access control system,
It is of the form (cid:104)γ, ψ, u, r(cid:105). We
a user, and a role.
ask whether u may become a member of r given the ini-
tial state γ = (cid:104)U , R, UA(cid:105), and state-change rule ψ =
(cid:104)can assign, can revoke(cid:105).
The separate administration restriction. In the context
of the error-ﬁnding problem, the separate administration re-
striction excludes administrative roles from the error-ﬁnding
problem instance, i.e., administrative roles are not admin-
istered by the same rules as “regular” roles. We adopt the
separate administration restriction in this paper. Some pre-
vious work [46] has considered subcases of when this restric-
tion is lifted. We do not consider those subcases in this
paper. We adopt the restriction because the original spec-
iﬁcation on ARBAC [36] adopts this restriction. Moreover,
the separate administration restriction does not aﬀect the
complexity of the error-ﬁnding problem [40].
The role hierarchy. We assume that an RBAC state has no
role hierarchy. The reason is that there is a straightforward,
eﬃcient reduction that has been presented in prior work
from an error ﬁnding instance that has a role hierarchy to
an error ﬁnding instance with no role hierarchy [39].
3. ARCHITECTURE OF MOHAWK
In this section, we describe Mohawk’s architecture (§3.1-
§3.6), and illustrate our approach using an example (§3.7).
3.1 Abstraction Reﬁnement in Mohawk
The general idea in an abstraction-reﬁnement [6] tech-
nique is to ﬁrst abstract (over or under approximate) a sys-
tem represented typically as a logic formula, and check if
a desired property holds in the abstraction, and iteratively
reﬁne as necessary. If the abstraction is an over approxima-
tion, i.e., the abstraction has more behaviors compared to
MohawkAbstractionStepNuSMVBounded Model CheckerRefinement StepConvert toIntermediateRepresentation(IR)No ErrorFoundErrorFoundARBACPolicySafetyQuery12345  1, 3 : Intermediate Representation2: First Abstraction      4 : Refined Policy 5: Abstract policy166the number of reﬁnements at the cost of making the veriﬁ-
cation harder. A key aspect of our approach is that, Mo-
hawk enables the user to control the aggressiveness of the
abstraction and reﬁnement steps. A conﬁgurable parameter
k determines the number of queues of roles from the pri-
ority queues that are added to the abstract policy at each
reﬁnement step. The default value for k is one (The most
aggressive setting for k).
3.2 Input Transformation
Figure 3 illustrates how a policy is speciﬁed in Mohawk’s
input language. The “Roles”, “Users”, “UA”, “CA”, and “CR”
keywords identify the lists of roles, users, user-role assign-
ments, can assign rules, and can revoke rules respectively.
The “ADMIN” key word identiﬁes the list of admin users.
In the example, Alice is the admin user and is assigned to
Admin, which is the administrative role assumed in all the
can assign and can revoke rules. The SPEC keyword iden-
tiﬁes the safety query. In the example, the safety query is
asking whether user Bob can be assigned to BudgetCom-
mittee. In the intended policy, Bob cannot be assigned to
BudgetCommittee. However, he can be assigned to the role
in policy speciﬁed in Fig 3 because of the error we intro-
duced in the can assign rule. In Section 3.7, we show how
Mohawk identiﬁes the error.
Mohawk transforms the policy in the input into an inter-
mediate representation, which enables eﬃcient querying of
the policy to facilitate the abstraction and reﬁnement steps.
Related-by-Assignment. A role r1 is said to be Related-
by-Assignment to a role r2, if r2 = r1 or r2 appears in
the precondition of at least one of the can assign rules that
have r1 as their target role. Related-by-Assignment does
not distinguish between positive and negative preconditions.
The Related-by-Assignment relationship describes whether a
user’s membership to one role can aﬀect the membership to
another role. The Related-by-Assignment relationship be-
tween roles can be represented using a tree as shown in Fig-
ure 4, in which all nodes correspond to roles and a role r2
appears as a child node of role r1, if and only if the r2 is
Related-by-Assignment to r1.
Mohawk identiﬁes all the roles Related-by-Assignment
to the query role by performing a breadth-ﬁrst search of
the associated can assign rules. The algorithm ﬁrst as-
signs the highest priority to the query role and adds it to a
work queue. While the work queue is not empty, the algo-
rithm picks the next role in the work queue, and considers
the can assign rules that have the role being analyzed as
their target role. All the roles in the preconditions in the
can assign rules are added to the work queue, and also added
to the priority queue at the next lower priority compared to
the role being analyzed. At the end of the analysis, we have a
priority queue, in which all the roles Related-by-Assignment
to the query role are inserted in the queues based on their
priorities. Roles that directly aﬀect the membership to the
query role have the highest priority, while roles aﬀecting the
membership to roles that are Related-by-Assignment to the
query role have a lesser priority.
• U(cid:48) contains the user in the safety query and admin
users.
• R(cid:48) contains the administrative roles, and roles from
the ﬁrst k queues in the priority queue.
• U A(cid:48) = {(u, r) | (u, r) ∈ U A ∧ u ∈ U(cid:48) ∧ r ∈ R(cid:48)}
• can assign(cid:48) contains only can assign rules in the input
policy whose precondition roles and target roles are
members of R(cid:48).
• can revoke(cid:48) contains only can revoke rules from the in-
put policy whose target roles are members of R(cid:48).
3.4 Veriﬁcation
In the veriﬁcation step, Mohawk veriﬁes the safety query
in the abstract policy. On each veriﬁcation step, Mohawk
translates the abstract policy to a ﬁnite-state-machine spec-
iﬁcation in the SMV language and the safety query to a
LTL (Linear Temporal Logic) formula. If the model checker
identiﬁes a state in which the user is assigned to the role,
it provides a counter example. The counter example corre-
sponds to a sequence of assignment and revocation actions
from initial authorization state that will result in the user
being assigned to the role. On identifying a counter exam-
ple, Mohawk reports the error and terminates. Otherwise,
Mohawk reﬁnes the abstract policy in the reﬁnement step.
In each step, the abstract policy contains a subset of the
roles, U A, can assign, and can revoke rules in the complete
policy. Therefore, the abstract policy permits only a subset
of the administrative action sequences accepted in the full
policy. Each action in the action-sequence identiﬁed by the
counterexample corresponds to a can assign or can revoke
rule that exists in both the abstract and original policies.
Therefore, the counter example is true in the original policy
also.
3.5 Reﬁnement Step
as follows. (We use “←” to represent instantiation.)
An abstract policy veriﬁed in the previous step is reﬁned
• R(cid:48) ← R(cid:48) ∪ R(cid:48)(cid:48), where R(cid:48)(cid:48) is the set of roles from the
next k queues from the priority queue.
• U A(cid:48) ← U A(cid:48) ∪ U A(cid:48)(cid:48), where U A(cid:48)(cid:48) is the user’s member-
ship for the roles in R(cid:48)(cid:48), if there are any.
• can assign(cid:48) ← can assign(cid:48) ∪ can assign(cid:48)(cid:48), where
can assign(cid:48)(cid:48) is the additional set of can assign rules
from the input policy whose preconditions and target
roles are members of the updated R(cid:48).
• can revoke(cid:48) ← can revoke(cid:48) ∪ can revoke(cid:48)(cid:48), where
can revoke(cid:48)(cid:48) is the additional set of can revoke rules
from the input policy whose target roles are members
of R(cid:48)(cid:48).
If no additional reﬁnements are possible, Mohawk reports
that no error was found.
3.6 On Completeness
3.3 Abstraction Step
In the initial abstraction step, Mohawk constructs an ab-
stract policy (cid:104)U(cid:48), R(cid:48), U A(cid:48), can assign(cid:48), can revoke(cid:48)(cid:105), where
Our abstraction-reﬁnement technique is complete — we
are no worse than conventional model-checking from the
standpoint of completeness. If we do not ﬁnd any errors at a
particular reﬁnement step, we can always continue to reﬁne
167Roles BudgetCommitee Finance Acct Audit
TechSupport IT Admin;
Users Alice Bob;
UA   ;
CR  
;
CA 
;
ADMIN Alice;
SPEC Bob BudgetCommittee;
Figure 3: An ARBAC policy in the Mohawk’s input language
Steps
Abstraction
step
Users
Alice,
Bob
Roles
BudgetCommittee,
Admin
UA
(Alice, Admin)
Reﬁnement 1 Alice,
Bob
BudgetCommittee,
Admin, Finance
(Alice, Admin)
Reﬁnement 2 Alice,
BudgetCommittee,
(Alice, Admin)
Bob
Admin, Finance,
(Bob, Acct)
Acct, Audit
(Bob, Audit)
Figure 4: Related-by-assignment (RBA) relationship
between roles with respect to BudgetCommittee.
can assign
can revoke
Result
No counterexample
No counterexample
(cid:104)Admin, Acct(cid:105)
(cid:104)Admin, Audit(cid:105)
Counterexample
found
(cid:104)Admin, Finance, Budget-
Committee, (cid:105)
(cid:104)Admin,
BudgetCommittee(cid:105)
(cid:104)Admin,
Finance(cid:105)
(cid:104)Admin, TRUE, Acct(cid:105)
(cid:104)Admin, TRUE, Audit(cid:105)
Finance,
Acct∧Audit,
Table 1: Illustrating abstraction-reﬁnement steps for the running example in Figure 3
till we check the entire policy. We can improve this approach
further by incorporating techniques from the literature on
estimating the completeness threshold for bounded model
checking [7, 27]. Our main point here is that in our tech-
nique, we are optimistic about ﬁnding errors, and therefore,
for a policy that, for example, has no errors, the abstraction-
reﬁnement steps that we undergo translate to pure overhead.
However, in the case that errors do exist, it is likely that we
will ﬁnd them faster than conventional approaches. Our
empirical results (see Section 5) bear this out.
3.7 Example
To illustrate Mohawk’s operations, we introduce an er-
ror in the policy of our running example in Fig 1. In the
can assign rule with target role Finance, we change c from
Acct∧¬Audit to Acct∧Audit. The intent of the original pol-
icy is to assign the role Finance only to users who are in the
Acct role and not in the Audit role. The error we intro-