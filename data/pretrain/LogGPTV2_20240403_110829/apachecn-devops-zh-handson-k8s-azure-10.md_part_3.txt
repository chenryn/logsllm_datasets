Azure 提供了一个符合行业标准的密钥和机密存储解决方案，称为 Azure 密钥库。这是一项托管服务，可以轻松创建、存储和检索密钥和机密，并提供对密钥和机密访问的审核。
Kubernetes 社区维护着一个名为 Kubernetes 机密商店 CSI 驱动程序([https://github.com/kubernetes-sigs/secrets-store-csi-driver](10.html))的项目。该项目允许您通过 CSI 驱动程序将外部机密存储与 Kubernetes 中的卷集成在一起。容器存储接口是 Kubernetes 中与存储系统接口的一种标准化方式。机密存储 CSI 驱动程序有多种实现。在撰写本文时，当前的实现是 Hashicorp Vault、谷歌云平台和 Azure Key Vault。
微软维护机密存储 CSI 驱动程序的密钥库实现，该驱动程序被命名为机密存储 CSI 驱动程序的 Azure 密钥库提供程序。此实现允许您作为用户从 Kubernetes 内部访问密钥库机密。它还与 pod 身份集成在一起，以限制对机密的访问。可选地，该实现还可以将密钥库机密与 Kubernetes 机密同步，以便您可以在需要时将它们用作环境变量。
#### 注意
为了简洁起见，我们将机密存储 CSI 驱动程序的 Azure 密钥库提供程序称为密钥库的 CSI 驱动程序。
在撰写本文时，Key Vault 的 CSI 驱动程序仅作为一个开源项目提供，您可以将其安装在集群上。值得注意的是，该解决方案可能会在未来作为 AKS 的托管附加组件引入。更多最新详情，请参考[https://github.com/Azure/AKS/issues/1876](10.html)GitHub 上的本期。
要使用密钥库的 CSI 驱动程序，您需要做两件事。首先，您需要在集群上设置驱动程序本身。这是本节的目标。其次，您需要在 Kubernetes 中为您需要访问的密钥库中的每个机密创建一个名为 **SecretProviderClass** 的对象。在下一节中，您将了解到更多这方面的信息。
在本节中，您将为密钥库设置 CSI 驱动程序。首先，您将创建一个新的用户分配的托管身份。之后，您将创建一个新的密钥库，并将用户分配的托管身份权限授予该密钥库。最后，您将在集群上设置密钥库的 CSI 驱动程序。
让我们从创建新的托管身份开始。
### 创建托管身份
密钥库的 CSI 驱动程序支持从密钥库中获取数据的不同方式。建议您使用托管身份将 Kubernetes 集群链接到密钥库。为此，您可以使用在上一章中设置的 AAD pod 管理的身份插件。在本节中，您将在 Azure 中创建新的托管身份，以便以后与密钥库一起使用:
1.  Let's create a new managed identity. You will use the Azure portal to do this. To start, look for **managed identity** in the Azure search bar, as shown in *Figure 10.16*:
    ![Searching for Managed Identity in the Azure search bar](img/B17338_10_16.jpg)
    图 10.16:在 Azure 搜索栏中查找托管身份
2.  In the resulting pane, click the + New button at the top. To organize the resources for this chapter together, it's recommended to create a new resource group. In the resulting pane, click the Create new button to create a new resource group. Call it **csi-key-vault**, as shown in *Figure 10.17*:
    ![Creating a new resource group for creating a new managed identity](img/B17338_10_17.jpg)
    图 10.17:创建新的资源组
3.  Now, select the region you created your cluster in as the region for your managed identity and give it a name, **csi-key-vault** if you follow the example, as shown in *Figure 10.18*. To finish, click the Review + create button and in the final window, click the Create button to create your managed identity:
    ![Providing Instance details for the managed identity](img/B17338_10_18.jpg)
    图 10.18:提供实例细节
4.  Once the managed identity has been created, hit the Go to resource button to go to the resource. Here, you will need to copy the resource ID that will be used later in the next step. You can find that in the Properties pane of the managed identity, as shown in *Figure 10.19*:
    ![Fetching the resource ID from the Properties pane of the managed identity](img/B17338_10_19.jpg)
    图 10.19:获取托管身份的资源标识
5.  Now you are ready to link the managed identity to your AKS cluster. To do this, you will run a command in cloud shell as you did in the previous chapter. Afterward, you will verify that the identity is available in your cluster. Let's start with linking the identity:
    az aks pod-身份添加-资源-组 rg-handsonaks \
    - cluster-name handsonaks -命名空间默认值\
    -名称 csi-to-key-vault \
    -身份-资源-id
6.  You can verify that your identity was successfully linked to your cluster by running the following command:
    忽必烈得到了 azureidentity
    这将产生类似于图 10.20 的输出:
![Verifying that your identity is successfully linked to your cluster](img/B17338_10_20.jpg)
图 10.20:验证集群中身份的可用性
在本节中，您创建了一个新的托管身份，并使用 AAD Pod 托管身份插件将其链接到您的 Kubernetes 集群。在下一节中，您将创建一个密钥库，并赋予您创建的新身份访问机密的权限。最后，您将在密钥库中创建一个机密，稍后尝试从集群中访问它。
### 创建密钥库
在上一节中，您设置了密钥库的 CSI 驱动程序将使用的托管身份。在本节中，您将创建将使用的密钥库:
1.  To start the creation process, look for **Key vaults** in the Azure search bar:
    ![Navigating to Key Vault services from the Azure portal](img/B17338_10_21.jpg)
    图 10.21:通过 Azure 门户导航到关键存储库
2.  Click the + New button to start the creation process:
    ![Creating a new key vault](img/B17338_10_22.jpg)
    图 10.22:单击添加按钮开始创建密钥库
3.  Provide the details to create the key vault. Create the key vault in the resource group you created in the previous step. The key vault's name has to be globally unique, so consider adding your initials to the name. It is recommended that you create the key vault in the same region as your cluster:
    ![Providing Subscription and Instance details to create the key vault](img/B17338_10_23.jpg)
    图 10.23:提供创建密钥库的细节
4.  After you have provided the details for your key vault, click the Next: Access policy > button to give the managed identity access to secrets. Click on the + Add Access Policy to give permission to your managed identity, as shown in *Figure 10.24*:
    ![Adding a new access policy](img/B17338_10_24.jpg)
    图 10.24:添加访问策略
    在结果窗格中，选择“机密管理”模板，单击“选择主体”下的“未选择”按钮，然后在结果窗格中查找您之前创建的 **csi-to-key-vault** 。最后，点击屏幕下方的选择，然后点击添加，如图*图 10.25* :
    ![Assigning the Secret Management template in the access policy to the csi-to-key-vault managed identity](img/B17338_10_25.jpg)
    图 10.25:将机密管理模板分配给被管理的身份
5.  一旦您提供了对此托管身份的权限，请点击“审阅+创建”按钮来审阅和创建您的密钥库。点击创建按钮完成创建过程。
6.  It will take a couple of seconds to create your key vault. Once the vault is created, click on the Go to resource button, go to Secrets, and hit the Generate/Import button to create a new secret as shown in *Figure 10.26*:
    ![Creating a new Secret within the key vault](img/B17338_10_26.jpg)
    图 10.26:创建新的机密
7.  在机密创建向导中，提供关于您的机密的详细信息。为了让这个演示更容易理解，使用名称 **k8s-secret-demo** 。给这个机密一个值得纪念的价值，比如**来自钥匙库的机密**。单击屏幕底部的创建按钮创建密码:
![Configuring the Secret](img/B17338_10_27.jpg)
图 10.27:提供新机密的细节
现在您在密钥库中有了一个机密，您可以继续在集群中安装密钥库的实际 CSI 驱动程序。
### 安装密钥库的 CSI 驱动程序
在本节中，您将为集群中的密钥库设置 CSI 驱动程序。这将允许您在下一节中从密钥库中检索机密。安装是一个短暂的过程，您将在这里看到:
1.  The easiest way to install the CSI driver for Key Vault is to use Helm, as you've done before. Note that this feature may be available as an add-on after the release of this book. To do this, add the repo for the CSI driver for Key Vault:
    helm repo 添加 CSI-机密-商店-提供商-azure \
    [https://raw . githubuser content . com/Azure/secrets-store-CSI-driver-provider-Azure/master/charts](10.html)
2.  Once the repo has been added, you can install the actual CSI driver for Key Vault using the following command:
    helm 安装 CSI-机密\
    CSI-机密-商店-提供商-azure/CSI-机密-商店-提供商-azure
3.  To verify that the installation succeeded, you can verify that the SecretProviderClass CRD has been added to your cluster via the following command:
    忽必烈得到 crd
    这将向您显示一个包含 SecretProviderClass CRD 的输出，如图 10.28 所示:
![Verifying that the SecretProviderClass CRD has been added to your cluster](img/B17338_10_28.jpg)
图 10.28:secretprovider 类 CRD 已经添加到集群中
密钥库的 CSI 驱动程序设置到此结束。在本节中，您首先创建了一个托管身份，然后创建了一个包含机密的密钥库，最后在集群上为密钥库设置了 CSI 驱动程序。
您现在可以使用密钥库的 CSI 驱动程序了，这将在下一节中进行。
## 使用机密存储 CSI 驱动程序的 Azure 密钥库提供程序
既然已经在集群上设置了密钥库的 CSI 驱动程序，您就可以开始使用它了。在本节中，您将浏览两个使用密钥库的 CSI 驱动程序的示例。首先，您将使用它在 Kubernetes 中挂载一个机密文件。之后，您还将使用它来将密钥库机密同步到 Kubernetes 机密，并将它们用作环境变量。
让我们从第一个示例开始，如何将密钥库机密装载为文件。
### 将密钥库机密作为文件挂载
在第一个示例中，您将在集群中创建一个新的 SecretProviderClass。此对象将允许您将密钥库中的一个机密链接到 Kubernetes 的一个 pod。之后，您将创建一个使用 SecretProviderClass 的容器，并在该容器中装载机密。让我们开始吧:
1.  The SecretProviderClass requires you to know your Azure Active Directory tenant ID. To get this, run the following command:
    az 帐户显示-查询 tenantId
    这将向您显示类似于图 10.29 的输出。复制粘贴该值，并将其存储在您以后可以参考的文件中:
    ![Fetching the tenant ID for creatingthe SecretProviderClass](img/B17338_10_29.jpg)
    图 10.29:获取您的租户标识
    接下来，您将创建 SecretProviderClass 类。在本章的代码文件中，在**secretprovider class-file . YAML**文件中提供了一个例子:
    1 API version:secret store . CSI . x-k8s . io/v1 alpha 1 机密存储库
    2 种:SecretProviderClass
    3 元数据:
    4 名称:密钥-保管库-机密-文件
    5 规格:
    6 提供商:azure
    7 个参数:
    8 usePodIdentity:“真”
    9 keyvaultname 名称:“”
    10 个对象:|
    11 阵列:
    12          - |
    13 对象名称:k8s-机密-演示
    14 对象类型：机密
    15 顽强:“T0”
    让我们调查一下这个文件:
    *   **第 2 行**:这里，你定义你正在创建一个 **SecretProviderClass** 。
    *   **第 6 行**:这里，你创造一个 Azure 的机密。正如在介绍中提到的，机密存储项目支持多种实现。
    *   **第 8 行**:您将该密码配置为使用 pod 身份进行认证。稍后，您会将 pod 身份链接到您的 pod。
    *   **第 9 行**:钥匙库的名称。
    *   **第 10-14 行**:这里指的是需要访问的机密。在这个例子中，你只能访问一个机密，但是你可以在一个 **SecretProviderClass** 中访问多个机密。
    *   **第 15 行**:你的 AAD 租户的 AAD 租户 ID。
    请确保使用适合您环境的值对其进行编辑。
2.  You can create this **SecretProviderClass** using the following command:
    忽必烈 create-f secret providerclass . YAML 文件
3.  Once the SecretProviderClass has been created, you can go ahead and create a pod that references that SecretProviderClass. An example has been provided in the **pod-keyvault-file.yaml** file:
    1 个孩子:Pod
    2 apiVersion: v1
    3 元数据:
    4 名称:CSI-演示-文件
    5 个标签:
    6 aadpodidbinding:“CSI-to-key-vault”
    7 规格:
    8 个容器:
    9 -名称:nginx
    10 映像:nginx
    11 卷安装:
    12 -名称:keyvault
    13 mount path:"/mnt/secrets-store "
    14 只读:真
    15 卷:
    16 -名称:keyvault
    17 csi: