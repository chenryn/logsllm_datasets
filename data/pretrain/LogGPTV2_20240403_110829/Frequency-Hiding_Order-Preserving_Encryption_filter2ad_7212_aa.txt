title:Frequency-Hiding Order-Preserving Encryption
author:Florian Kerschbaum
Frequency-Hiding Order-Preserving Encryption
Florian Kerschbaum
SAP
Karlsruhe, Germany
ﬂPI:EMAIL
ABSTRACT
Order-preserving encryption allows encrypting data, while
still enabling eﬃcient range queries on the encrypted data.
This makes its performance and functionality very suitable
for data outsourcing in cloud computing scenarios, but the
security of order-preserving is still debatable. We present
a scheme that achieves a strictly stronger notion of security
than any other scheme so far. The basic idea is to randomize
the ciphertexts to hide the frequency of plaintexts. Still, the
client storage size remains small, in our experiments up to
1/15 of the plaintext size. As a result, one can more securely
outsource large data sets, since we can also show that our
security increases with larger data sets.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Cryptographic controls; H.2.0 [Database Management]:
General—Security, integrity, and protection
Keywords
Order-Preserving Encryption; Randomization; Indistinguisha-
bility
1.
INTRODUCTION
Order-preserving encryption [5, 9, 10, 23, 30, 34] is a pop-
ular tool to encrypt data before outsourcing it. It allows to
perform eﬃcient range queries on the encrypted data. This
makes it very suitable for achieving security and privacy in
cloud computing.
The security of order-preserving encryption is still much
debated. In their extended formal analysis [10] of their ﬁrst
scheme [9] Boldyreva et al. write that their work should
not be interpreted as saying their scheme is “secure” or “in-
secure”. Yet, we can make some observations about the
security of order-preserving encryption. When encrypting
only one plaintext order-preserving encryption can be per-
fectly secure (e.g. [23]) against a ciphertext-only attack, but
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813629.
when more plaintexts are encrypted (deterministic) order-
preserving grows less secure. In any (deterministic) order-
preserving encryption scheme the availability of ciphertexts
for all (distinct) plaintexts lead to a simple attack. The
sorted ciphertexts are mapped one-to-one to the sorted plain-
texts.
This type of attack seems hard to prevent, since it is en-
abled by the ordering information implicit in the type of
encryption. Furthermore, the ordering information is neces-
sary for eﬃcient search. This presents a problem for prac-
titioners, since it is often hard to predict the ﬁnal size of a
data set and the number of distinct plaintexts and therefore
there is no lower bound on the security of the encryption. In
other cases it is known that all plaintexts in the domain will
be encrypted and hence (deterministic) order-preserving is
pointless.
In this paper we discuss a new option for increasing the
security of order-preserving encryption: randomizing the ci-
phertexts. Our scheme is a new trade-oﬀ. We clearly in-
crease security while preserving the functionality for most
queries relying on the ordering information. However, we
also increase client storage size and introduce a small error
in some queries.
We proceed as follows. First, we present a new deﬁnition
of security of order-preserving encryption:
indistinguisha-
bility under frequency-analyzing ordered chosen plaintext at-
tack. As we show in Section 7.2 the security captured in this
deﬁnition is likely to increase when the data set size increases
instead of decreasing. Our security notion is strictly stronger
than indistinguishability under ordered chosen plaintext at-
tack [9].
Second, we present a scheme that implements our secu-
rity notion in Section 5 and prove it secure in Section 7.1.
The basic idea is to randomize ciphertexts, such that no fre-
quency information from repeated ciphertexts leaks. Note
that randomized order-preserving encryption should still pre-
serve the order of the plaintexts and hence any deﬁnition
(and scheme) must take this information into account.
Third, we signiﬁcantly reduce the client storage size by
only approximating the security notion. This ﬁnal scheme
– we call imperfect frequency-hiding – has stronger security
than any scheme before this paper, but also very accept-
able client storage requirements. The ciphertexts in this
scheme approximate a uniform distribution and hence im-
prove against frequency-analyzing attacks. Furthermore, it
is still indistinguishable under ordered chosen plaintext at-
tack and the client storage size in our experiments was less
than 0.1% of the database size.
We call an encryption scheme mutable, if its ciphertexts
can or must be changed after initial encryption. Any scheme
secure in our notion must be stateful and mutable. Consider
the simplest order-preserving encryption scheme, namely the
order itself as the ciphertexts, i.e. the plaintexts 5, 12, 7 are
encrypted as 1, 3, 2. Given these ciphertexts and a new
plaintext 8, the ciphertext 3 of plaintext 12 needs to be
updated. Popa et al. [30] have shown that such updates are
unavoidable for any scheme with polynomial ciphertext size
secure against ordered chosen plaintext attacks.
With these kind of novel trade-oﬀs – security under an in-
creasing data set size, limited client storage cost and preser-
vation of most order-based queries – we present a new option
to the cloud security practitioner. Order-preserving encryp-
tion can be more trusted and yet remain practical. We sum-
marize our contributions as follows.
• A deﬁnition of a new, stronger security notion for order-
preserving encryption than indistinguishability under
chosen plaintext attack.
• A scheme implementing this notion including compres-
sion mechanisms.
• An evaluation of security and client storage cost of this
new scheme.
The remainder of the paper is structured as follows.
In
Section 2 we review related work, before we describe the
problem in detail in Section 3. We deﬁne the security in Sec-
tion 4 and explain our algorithms in Section 5. We present
the ﬁnal, practical scheme in Section 6.
In Section 7 we
summarize the results of evaluation – including the security
proof – and present our conclusions in Section 8.
2. RELATED WORK
2.1 Order-Preserving Encryption Schemes
OPE scheme
[5]
[9]
[10]
[34]
[30]
[23]
[17]
[35]
Section 5
Section 6
IND-OCPA secure
frequency-hiding
No
No
No
No
Yes
Yes
No
No
Yes
Yes
No
No
No
No
No
No
Maybe
Maybe
Yes
Imperfect
Table 1: Overview of order-preserving encryption
(OPE) scheme
Order-preserving encryption has been invented in the database
community [5]. Agrawal et al. developed the ﬁrst order-
preserving encryption scheme. They assume that the distri-
bution of the plaintexts is known. They then modify this
distribution to match a ﬁxed or randomly chosen distribu-
tion. While this also appears to be (somewhat) frequency-
hiding it provides no formal security guarantees. We show
that we can provably hide the information about the plain-
text distribution.
The ﬁrst formal security guarantee of order-preserving en-
cryption has been provided by the cryptography commu-
nity [9]. Boldyreva et al. introduce the notion of indistin-
guishability under ordered chosen plaintext attack. They
also prove that no stateless scheme can achieve this notion
and settle for an encryption scheme with the weaker secu-
rity of a random order-preserving function. This scheme
requires only storing a key on the client. Later they show
that a random order-preserving function also achieves the
security property of window one-wayness [10]. Furthermore,
they give a scheme that achieves IND-OCPA security, but
requires all plaintexts to be known in advance. Of course,
if all plaintexts are known in advances, their order can be
determined.
Teranishi et al. [34] present another order-preserving en-
cryption scheme that is stateless, i.e. only requires storing a
key on the client. Their idea is to introduce random large
gaps in the ciphertexts and can show that their scheme us-
ing this technique can achieve a stronger notion than ran-
dom order-preserving functions of partial-plaintext indis-
tinguishability. Still, since they are stateless, they cannot
achieve IND-OCPA security.
The ﬁrst IND-OCPA secure order-preserving encryption
scheme has been presented by Popa et al. [30]. Their scheme
is stateful and requires storing information on an OPE server
that we assume is ideally placed at the client site. They run
a multi-round protocol which makes their scheme very in-
eﬃcient due to the network delay. The size of the stored
information is linear in the number of distinct plaintexts.
Furthermore, their scheme is mutable, i.e. they need to up-
date the order (and hence half of the ciphertexts), on almost
any encryption operation. This has performance implica-
tions on the database server (operated in the cloud).
Kerschbaum and Schr¨opfer [23] provide the ﬁrst eﬃcient
IND-OCPA secure order-preserving encryption scheme. They
remove the need for a separate server, but also store infor-
mation linear in the number of distinct plaintexts. Further-
more, they are able to reduce the probability of mutation to
be negligible in n and reduce the number of rounds in the
protocol between client and server to be constant instead
of logarithmic in the number of distinct plaintexts. Their
scheme has constant encryption cost in the average case.
So far, all mentioned order-preserving encryption schemes
have been deterministic. Hildenbrand et al. [17] provide the
ﬁrst order-preserving encryption scheme which introduces
some randomization. They divide the plaintext domain into
disjoint sets and encrypt each set order-preservingly, but un-
der a diﬀerent key. They provide no formal security analysis,
yet, since their scheme is stateless, it cannot even be IND-
OCPA secure. We also note that their scheme has signiﬁcant
implications on the necessary rewriting of range queries on
encrypted data. Wozniak et al. also add more randomization
to a stateless order-preserving encryption scheme, but pro-
vide no security guarantee beyond random order-preserving
functions [35].
Table 1 presents an overview of the discussed order-preserving
encryption schemes. There is also a large number of other
order-preserving encryption schemes [4, 19, 20, 24, 25, 26,
28, 38] which provide no formal, but rather ad-hoc secu-
rity analysis, including the original proposal by Agrawal et
al. [5]. Xiao et al. [37] deﬁne a notion based on nearby val-
ues, but it remains unclear how to enforce this in a practical
setting.
2.2 Applications
Order-preserving encryption has many applications. Most
notably database-as-a-service (DAS) [5, 15, 16, 31]. In DAS
the database is outsourced to the cloud and values stored
are encrypted before sent to the cloud. The database then
performs its queries over encrypted data. Order-preserv-
ing encryption enables to perform range queries over an en-
crypted database without any changes to the database man-
agement system. CryptDB [31] has put forth the notion
of adjustable encryption for databases which wraps around
order-preserving encryption. Besides databases order-preserving
encryption has many applications in general cloud software-
as-a-service and web applications, e.g., business software and
e-mail [1, 2].
2.3 Related Cryptographic Schemes
Order-preserving encryption is a special case of property-
preserving encryption [6, 29]. Due to its applications to sort-
ing and searching the order is a particularly useful property
to preserve.
Searches on encrypted data can also be performed using
other cryptographic schemes using modiﬁed, usually encryption-
scheme speciﬁc search algorithms. Such cryptographic schemes
are searchable, functional and homomorphic encryption.
Searchable encryption [33] achieves a stronger notion of
security than order-preserving encryption. Searchable en-
cryption for range queries has been presented in [12, 27, 32].
It uses a token of range boundaries generated by the secret
key to match ciphertexts which are within the range of this
token. Without the token ciphertexts are indistinguishable
under chosen plaintext attack. Yet, searchable encryption
schemes require a linear scan of the data, unless additional
indexing information is provided. Lu [27] presents a search-
able encryption scheme for ranges with logarithmic time-
complexity, but its indexing information makes it as vul-
nerable as order-preserving encryption, since the proposed
sorted tree reveals the order of all elements.
Searchable encryption is a special case of functional en-
cryption. Functional encryption allows the evaluation of any
function on a set of ciphertexts, such that the result of the
function is revealed. Recently, functional encryption has
been designed for general functions [14]. Speciﬁc functions,
such as the inner product, have been proposed before [21].
Functional encryption can also reveal only the order while
else remaining semantically secure [11].
Searching can also be implemented using homomorphic
encryption where the search result remains unknown to the
service provider. This implies if the result size is unbounded,
the entire database needs to be transferred for any query.
Fully homomorphic encryption [13] enables arbitrary search
functions.
3. PROBLEM
Our scheme targets an outsourced, property-preserving
encrypted database as an application. Consider the follow-
ing example of this scenario: A owner of population data
stored in a database encrypts his data using order-preserving
encryption [5, 9, 10, 23, 30, 34] before outsourcing it to the
cloud. The database can have the ﬁelds “ﬁrst name”, “last
name”, “birthday” and “gender” (and many more). When
he wants to perform a range query, he sends the encrypted
boundaries for the search term to the cloud service provider.
The service provider performs a regular range query as he
would on plaintext data using the encrypted boundaries,
since the order of the plaintexts is preserved in the cipher-
texts. The result is the set of encrypted data values in the
queried range.
The performance and implementation ﬂexibility advan-
tages of order-preserving encryption are clear. In order for
the server to perform a range query on a set of ciphertexts
the client sends the ciphertexts for upper and lower bound
of the range to the client. Range query on the server is
then very eﬃcient and can be performed in the same way
as on plaintexts. All ciphertexts included in the range of
the encrypted bounds correspond to plaintexts that are in
the range. Furthermore, the server can optimize the query
using all data structures for plaintext range queries. Hence
such queries can, for example, be eﬀortlessly integrated into
existing database management systems [5, 31].
The original order-preserving encryption proposal [5] was
designed for this scenario, but its security – and its security
deﬁnition – leaves a lot to be desired. Obviously order-
preserving encryption cannot be as strong as standard en-
cryption, since by its deﬁnition information about the order
is revealed. Some security researchers [10, 34] have shown
that this ordering information also necessarily implies par-
tial information about the distance of two plaintexts. Other
security researchers [36] have argued that at least half of the
bits leak. A complete characterization of the cryptanalytic
implications of ordering information is still lacking.
If we consider the described outsourced database, i.e. struc-
tured data, another security problem of order-preserving en-
cryption becomes apparent.
In this case, each column of
a database table is encrypted separately. For example, in
a typical database table about people we would ﬁnd ﬁelds