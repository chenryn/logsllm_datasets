strings of length arity instantiates arity elements of BitMUX
in define_sub_components(), and connects their input and
output wires in connect_wires().
Classes Switch and UniSwitch. Creating a component
from classes Switch and UniSwitch is even simpler than class
Circuit. In the case of UniSwitch, we only need to imple-
ment a method returning an instance of the sub component.
In a Switch, on the other hand, each sub component can be
from a diﬀerent class, so like in define_sub_components(),
we instantiate all the sub components, and connect them
using a Bus, or a Splitter when necessary.
5. PERFORMANCE
We analyze VMCrypt performance on circuits which have
been developed without modifying VMCrypt source code.
Each circuit has diﬀerent structural properties and was tested
on inputs of increasing length to show that performance does
not depend on size or structure. We are not aware of such
rigorous analysis in prior work.
All tests were executed on a Thinkpad X301 laptop with 3
GB RAM and a 1.6 GHz Intel Core2 Duo processor running
Ubuntu Linux. Two Java Virtual Machines (JVM) were
run on this computer; one for each party. To guarantee
that performance is measured in a standard setting, we did
not conﬁgure the JVM (e.g., by increasing the size of the
heap). Parties communicated through the loopback network
interface. Running the parties side by side means that the
same machine was stressed with twice the amount of work,
for both TCP (packet handling, checksums, etc.) and Yao’s
protocol.
Encryption was implemented with SHA-1 modeled as a
random oracle, which provides much better performance
compared to number theoretic based pseudo-random gen-
erators (PRGs). Wire label length was 120 bits. We remark
that our communication complexity is exactly four encryp-
tions (one lookup table) per gate and one OT per wire. This
is the absolute minimum. By maintaining party state, we
avoid sending metadata (describing what is being sent), gate
numbers, wire index, etc. Thus, any other protocol can only
722number of records
in database
106
106
2
104
31MB
0.31
1.5
GB
13.4
GB3
total time
in minutes
26.7
set size
106
106
2
104
0.3
28MB
1.4
GB
22.2
2.7GB
total time
in minutes
44.5
Figure 8: Running time of secure minimum.
set size
1581
1000
158
MB32
0.31
1.3 GB
10.3
3.2GB
total time
in minutes
25.1
Figure 9: Running time of secure set intersection.
Our next test was the minimum component, implemented
in VMCrypt as class MIN (Figure 3). This component takes
N integers (of length 20 bits each) and outputs their mini-
mum. In our experiment, half of the integers belong to the
client and half belong to the server. We remark that, in prac-
tice, parties will have shares of the integers, and the function
would ﬁrst add the shares and then ﬁnd the minimum.
The running time (in minutes) and communication com-
plexity of the protocol for secure minimum are given in Fig-
ure 8. These are linear in N because, as with the DBSearch
component, the underlying (non-secure) algorithm runs in
linear time. On average, parties used 5% of the memory (in-
dependently of N ), and VMCrypt overhead was 10%. Notice
that the running time is almost double that of the DBSearch
component. This is because half of the inputs required obliv-
ious transfer, and the number of lookup tables was almost
double (the MIN component with 1 million inputs had 110
million gates and 90 million lookup tables).
Our last test was the set intersection component, imple-
mented as class SetIntersection (Figure 4). This com-
ponent takes two sets of size N and M , and outputs their
intersection. We ﬁxed the bit length of set elements to 20
bits. To simplify the presentation we chose N = M . The
running time (in minutes) and communication complexity of
the protocol for secure set intersection are given in Figure 9.
Notice that, unlike previous tests, the size of the set in-
tersection component is quadratic in N due to the underly-
ing (non-secure) algorithm it implements. For comparability
with previous tests, we chose values of N ranging from 158
= 104 and the
component has 1 million gates and 0.5 million lookup tables.
= 106 and the com-
ponent has 100 million gates and 50 million lookup tables.
On average, parties used 5% of the memory (independently
of N ), and VMCrypt overhead was 15%.
to 1581. Thus, when N = 158 we have N 2 ∼
Similarly, when N = 1581 we have N 2 ∼
Figure 7: Running time of secure database search.
have equivalent or worse communication complexity. For-
mally, the communication complexity is exactly 4n∗L+k∗|x|
bytes, where n is the number of non-XOR gates in the cir-
cuit, L is the byte length of a ciphertext (encryption), |x|
is the length of the input of the evaluator, and k is a small
constant that depends on the OT communication complex-
ity.
We start with the database search function. The input to
this function is an array of records ⟨xi, pi⟩ and a string y,
where xi and pi are viewed as columns in a database table.
In VMCrypt it is
The output is all pi for which xi = y.
implemented as component DBSearch.
In Fairplay [21] it
was implemented as Keyed Database Search (KDS).
Since Fairplay circuit parameters are passed at compile
time, the compiler must be run in each execution. Thus,
we compared the performance of our full protocol with that
of the Fairplay compiler [21] alone (ignoring the time and
memory it takes to actually execute the Fairplay protocol).
Since the time and memory complexity of the Fairplay com-
piler are not reported in the literature, we carried our own
test on a table where the length of each of xi, pi and y is 20
bits. When the table size is N = 20 records, the compiler
runs for 10 seconds. When N = 40 the running time is 50
seconds. Obviously, this is not linear. When N = 55 the
compiler runs for 3 minutes and then crashes with a Java Out
Of Memory Error. In the case of N = 40, memory consump-
tion climbs gradually to 23% of the RAM. When N = 55, it
reaches 26%.
In VMCrypt, when N = 10, 000 the running time of the
secure database search protocol is 19 seconds. Figure 7 de-
scribes the running time (in minutes) and communication
complexity for values of N up to 1 million. The component
with 1 million records has 100 million gates and 60 million
lookup tables (the number of non-XOR gates).
We discuss Figure 7 and other statistics. First and fore-
most, although the full hardware description of the circuit
for database search is linear in N , the client and the server
each used the same amount of memory, namely, 4.8% RAM.
Secondly, the running time is linear in the database size.
This was not the case with earlier versions of VMCrypt, and
therefore should not be taken for granted (see discussion in
Section 3). Thirdly, the very large amounts of data sent
conﬁrm that parallelizing Yao’s protocol yields signiﬁcant
savings on disk read and writes. Finally, 84% of the run-
ning time was consumed by cryptographic operations and
communication (this was measured by comparing with the
running time of calculating the component). In other words,
VMCrypt overhead was only 16% . Other implementations
also have an overhead, but unfortunately such statistics are
not provided in the literature.
7236. REFERENCES
[1] M. Barni, T. Bianchi, D. Catalano, M. D. Raimondo,
R. D. Labati, and P. Faillia. Privacy-preserving
ﬁngercode authentication. In MM&Sec’, Roma, Italy,
2010. ACM.
[2] A. Ben-David, N. Nisan, and B. Pinkas. Fairplaymp: a
system for secure multi-party computation. In ACM
Conference on Computer and Communications
Security, pages 257–266, 2008.
[3] D. Bogdanov, S. Laur, and J. Willemson. Sharemind:
A framework for fast privacy-preserving computations.
In ESORICS, pages 192–206, 2008.
[4] I. Damg˚ard, M. Geisler, M. Krøigaard, and J. B.
Nielsen. Asynchronous multiparty computation:
Theory and implementation. In Public Key
Cryptography, pages 160–179, 2009.
[5] I. Damg˚ard and M. Jurik. A generalisation, a
simpliﬁcation and some applications of paillier’s
probabilistic public-key system. In Public Key
Cryptography, pages 119–136, 2001.
[6] I. Damg˚ard and C. Orlandi. Multiparty computation
for dishonest majority: From passive to active security
at low cost. In CRYPTO, pages 558–576, 2010.
[7] Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser,
I. Lagendijk, and T. Toft. Privacy-preserving face
recognition. In Privacy Enhancing Technologies, pages
235–253, 2009.
[8] D. Evans, Y. Huang, J. Katz, and L. Malka. Eﬃcient
privacy-preserving biometric identiﬁcation. In
Proceedings of the 17th conference Network and
Distributed System Security Symposium, NDSS 2011.
[9] D. Evans, Y. Huang, J. Katz, and L. Malka. Faster
secure two-party computation using garbled circuits.
To appear in the 20th USENIX Security Symposium.
[10] C. Gentry. Fully homomorphic encryption using ideal
lattices. In STOC, pages 169–178, 2009.
[11] W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider,
and I. Wehrenberg. Tasty: Tool for automating secure
two-party computations. In ACM Conference on
Computer and Communications Security, 2010.
[12] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank.
Extending oblivious transfers eﬃciently. In CRYPTO,
pages 145–161, 2003.
[13] S. Jha, L. Kruger, and V. Shmatikov. Towards
practical privacy for genomic computation. In IEEE
Symposium on Security and Privacy, pages 216–230,
2008.
[14] V. Kolesnikov, A.-R. Sadeghi, and T. Schneider.
Improved garbled circuit building blocks and
applications to auctions and computing minima. In
CANS, pages 1–20, 2009.
[15] V. Kolesnikov and T. Schneider. Improved garbled
circuit: Free XOR gates and applications. In ICALP
’08: Proceedings of the 35th international colloquium
on Automata, Languages and Programming, Part II,
pages 486–498, Berlin, Heidelberg, 2008.
Springer-Verlag.
[16] Y. Lindell and B. Pinkas. A proof of security of yao’s
protocol for two-party computation. J. Cryptology,
22(2):161–188, 2009.
[17] Y. Lindell, B. Pinkas, and N. P. Smart. Implementing
two-party computation eﬃciently with security against
malicious adversaries. In SCN, pages 2–20, 2008.
[18] P. D. MacKenzie, A. Oprea, and M. K. Reiter.
Automatic generation of two-party computations. In
ACM Conference on Computer and Communications
Security, pages 210–219, 2003.
[19] L. Malka. VMCrypt 1.4 developers manual.
http://www.lior.ca/publications/
VMCrypt Manual Rev1.0.pdf.
[20] L. Malka. VMCrypt - modular software architecture
for scalable secure computation. EPrint report
2010/584, 2010.
[21] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella.
Fairplay—a secure two-party computation system. In
SSYM04: Proceedings of the 13th conference on
USENIX Security Symposium, pages 20–20, Berkeley,
CA, USA, 2004. USENIX Association.
[22] M. Naor and B. Pinkas. Eﬃcient oblivious transfer
protocols. In SODA, pages 448–457, 2001.
[23] J. D. Nielsen and M. I. Schwartzbach. A
domain-speciﬁc programming language for secure
multiparty computation. In PLAS, pages 21–30, 2007.
[24] M. Osadchy, B. Pinkas, A. Jarrous, and B. Moskovich.
Sciﬁ - a system for secure face identiﬁcation. In IEEE
Symposium on Security and Privacy, pages 239–254,
2010.
[25] P. Paillier. Public-key cryptosystems based on
composite degree residuosity classes. In
EUROCRYPT’99: Proceedings of the 17th
international conference on Theory and application of
cryptographic techniques, pages 223–238, Berlin,
Heidelberg, 1999. Springer-Verlag.
[26] A. Paus, A.-R. Sadeghi, and T. Schneider. Practical
secure evaluation of semi-private functions. In ACNS,
pages 89–106, 2009.
[27] B. Pinkas, T. Schneider, N. P. Smart, and S. C.
Williams. Secure two-party computation is practical.
In ASIACRYPT, pages 250–267, 2009.
[28] A.-R. Sadeghi, T. Schneider, and I. Wehrenberg.
Eﬃcient privacy-preserving face recognition. In ICISC,
pages 229–244, 2009.
[29] N. P. Smart and F. Vercauteren. Fully homomorphic
encryption with relatively small key and ciphertext
sizes. In Public Key Cryptography, pages 420–443,
2010.
[30] M. van Dijk, C. Gentry, S. Halevi, and
V. Vaikuntanathan. Fully homomorphic encryption
over the integers. In EUROCRYPT, pages 24–43,
2010.
[31] A. C.-C. Yao. How to generate and exchange secrets
(extended abstract). In FOCS, pages 162–167, 1986.
724