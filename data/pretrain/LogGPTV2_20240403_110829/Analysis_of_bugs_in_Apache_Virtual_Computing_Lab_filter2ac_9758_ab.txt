feature in a speciﬁc version of VCL), the report contains
several entries, such as issue description, status of the issue,
assignee, reporter, date when the issue was found and when
it was solved, code modiﬁcation. Among all issues, we only
consider resolved bugs, in order to gather stable information.
Moreover, while some of the bugs are well described with
many details, others are minimally described, duplicates or
sub-problems of main bugs, or their ﬁxes are included in
the one of the main bugs. For our analysis we ﬁltered 146
bugs out of 202 bugs from the beginning of notiﬁcation in
January 2009 until May 2012. Hence, in this case, elements
of T are the 146 dates (year, month, day, hour, minutes)
when each report was created.
V. ANALYSIS OF CLASSIFIED BUGS
In this section we describe the analysis of the classiﬁed
bugs in Apache VCL. First, we analyze bugs over time and
show their percentage across the elements of a classiﬁcation
set. Then, the relations among the different classiﬁcation sets
are described.
A. Bugs Found Over Time
Figure 3 illustrates the number of bugs per month. Black
lines indicate when a new version of the software was
released. The number of bugs found is maximum during
the initial release. On the contrary, the period with less bugs
found is the one after September 2011, when the testing of
the last release (2.3) started (but it was not released yet).
Figure 4 shows the cumulative number of bugs found for
each release of Apache VCL. It decreases from the oldest
version to the most recent one. The initial slope of curves
decreases as well, indicating a reduction of bug discovery
frequency from version 2.0 to 2.3.
B. Component Percentages
Figure 5a shows the percentage of bugs across the com-
ponents of the generic Cloud model. FE is the component in
which most of the bugs are discovered. It is interesting to ob-
serve the break down of bugs found among the components
that constitute the back end of a Cloud platform. Among
these, PE is the one with most of the bugs. Such a result
may be due to the fact that PE has to interact with third-
party components (e.g., hypervisors) and to comply with
vendor speciﬁc requirements. Moreover, in VCL, PE also
performs typical functionalities of SS and NM, which are
not implemented separately (see Section IV-A).
C. Phase Percentages
The percentage of bugs found across the phases of the
Cloud service is shown in Figure 5b. Most of the bugs are
discovered while using management functionalities. This can
be due to the fact that many bug reporters are developers
and administrators of academic systems based on VCL
that largely use management functionalities (which are not
used by the consumer). Another reason may be the number
of functionalities performable during this phase. A large
percentage of bugs is also discovered after the service is
made available to the consumer, i.e., during the operational
phase. Across all phases, deprovisioning is the one during
which the least number of bugs is found. It is worth noting
that only 23% of bugs are discovered during authentication
or submission phase. Intuitively, these phases are linked to
the FE component. Nevertheless, 42% of bugs are found
in FE, as shown in Figure 5a. This indicates that, apart
from authentication or submission phase, bugs in FE are
discovered during the other phases of the service life cycle
as well. More details on the relations among the elements
of component and phase sets are provided in Section V-E.
D. Defect Type Percentages
As shown in Figure 5c, 33% of the bugs are algorithm
defects. 14% of analyzed bugs require a design change of
the software system (function defect type). In total 51% of
the bugs need changes to assignments or checkings only.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(c)
Figure 5: Percentages of bugs found across generic Cloud components (a), generic Cloud service phases (b), and ODC Defect Types.
F E
RM
Component
Table II: Conditional probabilities that a bug is discovered during a
Cloud service phase, given that it is in a speciﬁc Cloud component.
In square brackets the 95% conﬁdence intervals.
Probability
0.181 [0.104; 0.295]
0.213 [0.129; 0.331]
0.098 [0.046; 0.199]
0.098 [0.046; 0.199]
0.410 [0.295; 0.535]
0.230 [0.082; 0.503]
0.308 [0.127; 0.576]
0.154 [0.043; 0.422]
0.154 [0.043; 0.422]
0.154 [0.043; 0.422]
0.111 [0.039; 0.281]
0.593 [0.407; 0.754]
0.148 [0.059; 0.325]
0.074 [0.021; 0.234]
0.074 [0.021; 0.234]
0.175 [0.070; 0.371]
0.783 [0.581; 0.903]
0.044 [0.008; 0.210]
0.067 [0.012; 0.298]
0.133 [0.037; 0.379]
0.200 [0.070; 0.452]
0.067 [0.012; 0.298]
0.533 [0.301; 0.752]
0.286 [0.082; 0.641]
0.143 [0.026; 0.513]
0.143 [0.026; 0.513]
0.428 [0.158; 0.750]
Phase
AN
SB
P T
OP
M T
SB
P T
P V
OP
M T
SB
P V
OP
DP
M T
P V
OP
M T
SB
P V
OP
DP
M T
SB
P T
OP
M T
M E
P E
SE
DB
Timing/Serialization, Build/Package/Merge, and Documenta-
tion types are not found. Interestingly, similar percentages
of bugs among possible defect types are shown in [13] and
[23], while analyzing the bugs of different kinds of software.
E. Relations among the Classiﬁcation Sets
Components and Phases. The relations among the elements
in the component set and in the phase set can be used
to ﬁgure out how a bug in a component is likely to be
discovered during a certain phase of the Cloud service. In
Table II, column Probability reports the conditional proba-
bilities that a bug is discovered during a Cloud service phase
Figure 6: Cumulative number of bugs found per component over
time. m is the slope of the line ﬁtting the increasing part of the
curve.
given that it is in a speciﬁc Cloud component (percentage
of the bugs found in the component Ci during the phase
Pj). As observed in Section V-C, bugs in FE are discovered
not only during authentication and submission phases, but
signiﬁcantly also during management phase. This suggests
to carefully test the management functionalities of the FE
component. For PE, apart from provisioning phase, submis-
sion and operational phases are also important. In contrast,
percentage of bugs discovered during the deprovisioning and
the management phases is very small for PE. Nevertheless,
the relations among phases and ODC defect
types, and
components and ODC defect types (not reported for space
limitations) show that 22% of bugs found in PE require de-
sign changes, and that about 12% of bugs discovered during
the management phase require design changes. Hence, the
few bugs in PE found during management operations might
require signiﬁcant effort for debugging. Such information
can be used to properly select the developers for the debug-
ging of management functionalities.
Components and Time. The cumulative number of bugs
found per component, shown in Figure 6, can be used to
gain additional information on components that may still
require testing efforts [14]. The cumulative number of bugs
found in PE appears to level off over time, while the trend of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply. 
thank Prof. D. Cotroneo, Prof. S. Russo, Prof. M. Vouk, and
A. Peeler for their help during various phases of this project.
REFERENCES
[1] A. Mockus et al., “Two case studies of open source software
development: Apache and mozilla,” ACM Trans. on Software
Engineering and Methodology, jul 2002.
[2] “Apache VCL,” 2008, https://cwiki.apache.org/VCL/.
[3] A. Wood, “Predicting software reliability,” Computer, nov
1996.
[4] W. Jenkins et al., “Framework for testing cloud platforms and
infrastructures,” in Proc. of Int. Conf. on Cloud and Service
Computing (CSC), 2011.
[5] N. Fenton and N. Ohlsson, “Quantitative analysis of faults
and failures in a complex software system,” IEEE Trans. on
Software Engineering, 2000.
[6] M. Sullivan and R. Chillarege, “Software defects and their
impact on system availability - a study of ﬁeld failures in
operating systems,” in Proc. of Int. Symp. on Fault-Tolerant
Computing, 1991.
[7] N. Palix, G. Thomas, S. Saha, C. Calv`es, J. Lawall, and
ten years later,” SIGARCH
G. Muller, “Faults in linux:
Comput. Archit. News, 2011.
[8] P. Ascione et al., “Automated logging of mobile phones
failures data,” in IEEE Int. Symp. on Object and Component-
Oriented Real-Time Distributed Computing, 2006.
[9] A.K. Maji et al., “Characterizing failures in mobile oses: A
case study with android and symbian,” Proc. of IEEE Int.
Symp. on Software Reliability Engineering (ISSRE), 2010.
[10] M. Grottke et al., “An empirical investigation of fault types
in space mission system software,” Proc. of IEEE/IFIP Int.
Conf. on Dependable Systems and Networks (DSN), 2010.
[11] Z. Yin, X. Ma, J. Zheng, Y. Zhou, L. N. Bairavasundaram,
and S. Pasupathy, “An empirical study on conﬁguration errors
in commercial and open source systems,” in SOSP ’11, 2011.
[12] R. Chillarege et al., “Defect type and its impact on the growth
curve,” Proc. of IEEE Int. Conf. on Software Engineering
(ICSE), 1991.
[13] ——, “Orthogonal defect classiﬁcation-a concept for in-
process measurements,” IEEE Trans. on Software Engineer-
ing, nov 1992.
[14] J.D. Musa et al., Software reliability. McGraw-Hill New
York, 1987.
[15] K. Trivedi et al., “SREPT: Software Reliability Estimation
and Prediction Tool,” Performance Evaluation, 2000.
[16] “CloudStack,” 2012, http://cloudstack.org/.
[17] “Nimbus,” 2012, http://www.nimbusproject.org/.
[18] “OpenNebula,” 2012, http://opennebula.org/.
[19] “OpenStack,” 2012, http://openstack.org/.
[20] M. A. Vouk et al., “Using VCL technology to implement
distributed reconﬁgurable data centers and computational
services for educational institutions,” IBM J. of Research and
Development, 2009.
[21] “Issue and Project Tracking Software - Atlassian JIRA,” 2012,
http://www.atlassian.com/software/jira.
[22] “Vcl
issue
browse/VCL.
reports,” 2012, https://issues.apache.org/jira/
[23] J. A. Duraes and H. S. Madeira, “Emulation of software
faults: A ﬁeld data study and a practical approach,” IEEE
Trans. on Software Engineering, 2006.
Figure 7: Cumulative number of bugs found in FE over time per
release. m is the slope of the line ﬁtting the increasing part of the
curve; vertical lines indicate release of versions 2.1 and 2.2.
the curve for FE is still growing (polynomial ﬁtting is very
close to a line with slope m = 1.44). Hence, more testing
effort is required for the FE where, in next release, most of
the bugs are likely to be discovered. As a matter of fact,
considering the cumulative number of bugs found in FE for
releases from 2.0 to 2.2 (Figure 7), lines ﬁtting the initial
part of the curves are quite parallel (slopes are similar). This
means that, in VCL, the reliability of FE is not signiﬁcantly
changed from a version to another one, pushing the release
manager to additional testing and debugging activities before
releasing a new version [3].
VI. CONCLUSIONS AND FUTURE RESEARCH
We presented an empirical bug analysis of Apache VCL,
a representative open source Cloud. The classiﬁcation and
analysis of the software bugs are performed based on
components, phases, defect types, date when reporting, and
relations among them. Field data of the considered Cloud
platform provide useful hints to its responsible organization
and to developers for improving development and testing
activities. The analysis identiﬁes the components where bugs
are likely to be found in future releases of VCL, the phases
of the service life cycle during which such bugs may be
discovered, and the modiﬁcations required to solve them.
Interestingly, the percentages of ODC defect types found for
Apache VCL are in harmony with the previously reported
results on different software systems. In future, we will apply
the proposed approach to other open source Cloud platforms
in order to compare results and to identify bug trends.
ACKNOWLEDGMENT
Research by Flavio Frattini and Marcello Cinque has
been partially supported by the TENACE PRIN Project
(n. 20103P34XC) funded by the Italian Ministry of Edu-
cation, University and Research and by the MINIMINDS
PON Project (n. B21C12000710005) funded by the Italian
Ministry of University and Research. Authors would like to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply.