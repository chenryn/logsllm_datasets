            mv.visitLabel(l2);
            mv.visitLocalVariable("this", "Lcom/lucifaer/test_agentmain/TestAgentMain;", null, l0, l2, 0);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
            classfileBuffer = cw.toByteArray();
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream("agent.class");
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            try {
                assert fos != null;
                fos.write(classfileBuffer);
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return classfileBuffer;
        }
        public void retransform() throws UnmodifiableClassException {
            LinkedList retransformClasses = new LinkedList();
            Class[] loadedClasses = inst.getAllLoadedClasses();
            for (Class clazz : loadedClasses) {
                if ("com.lucifaer.test_agentmain.TestAgentMain".equals(clazz.getName())) {
                    if (inst.isModifiableClass(clazz) && !clazz.getName().startsWith("java.lang.invoke.LambdaForm")) {
                        inst.retransformClasses(clazz);
                    }
                }
            }
        }
    }
结果如下：
这里尝试添加一个public方法是直接失败的，原因就在于原生的JVM在运行时时为了程序的线程及逻辑安全，禁止向运行时的类添加新的public方法并重新定义该类。JVM默认规则是只能修改方法体中的逻辑，所以这就意味着会有这么一个问题：
**当多次attach时，代码会重复插入** ，这样是不符合热部署逻辑的。
当然目前市面上也有一定的解决方案，如[JRebel](https://zeroturnaround.com/software/jrebel/)和[Spring-Loaded](https://github.com/spring-projects/spring-loaded)，它们的实现方式是在`method
call`和`field access`的方法做了一层代理，而这一点对于RASP来说，无疑是加重了部署难度，反而与热部署简单快捷的方式背道而驰。
### 0x04 OpenRASP的具体实现方式
以上大致将Java RASP的相关内容介绍完毕后，这部分来深入了解一下OpenRASP的Java RASP这一部分是怎么写的，执行流是如何。
#### 4.1 OpenRASP执行流
OpenRASP的执行流很简单主要分为以下几部分：
  1. agent初始化
  2. V8引擎初始化
  3. 日志配置模块初始化
  4. 插件模块初始化
  5. hook点管理模块初始化
  6. 字节码转换模块初始化
其中具体实现管理hook点以及添加hook点的部分主要集中于5、6这一部分，这里同样是我们最为关注的地方。
#### 4.2 初始化流程
在这一部分不会对OpenRASP流程进行一步步的跟踪，只会将其中较为关键的点进行分析。
##### 4.2.1 agent初始化
通过前面几节的介绍，其实是可以发现RASP类的编写共同点的——其入口就是`premain`或`agentmain`方法，这些都会在`META-INFO/MANIFEST.MF`中标明：
所以其入口就是`com.baidu.openrasp.Agent`：
这里在模块加载前做了一个非常重要的操作—— **将Java agent的jar包加入到BootStrap class path中**
，如果不进行特殊设定，则会默认将jar包加入到System class
path中，对于研究过类加载机制的朋友们来说一定不陌生，这样做得好处就是可以将jar包加到`BootStrapClassLoader`所加载的路径中，在类加载时可以保证加载顺序位于最顶层，这样就可以不受到类加载顺序的限制，拦截拦截系统类。
当将jar包添加进BootStrap class path后，就是完成模块加载的初始化流程中，这里会根据指定的jar包来实例化模块加载的主流程：
这里的ENGINE_JAR是`rasp-engine.jar`，也就是源码中的engine模块。这里根据配置文件中的数值通过反射的方式实例化相应的主流程类：
然后就可以一目了然的看到模块初始化主流程了：
在主流程中，我们重点关注红框部分，这一部分完成了hook点管理模块初始化，以及字节码转换模块的初始化。
##### 4.2.2 hook点管理模块初始化
hook点管理的初始化过程非常简单，就是遍历`com.baidu.openrasp.plugin.checkerCheckParameter`的Type，将其中的元素添加进枚举映射中：
在Type这个枚举类型中，定义了不同类型的攻击类型所对应的检测方式：
##### 4.2.3 字节码转换模块初始化
字节码转换模块是整个Java
RASP的重中之重，OpenRASP是使用的Javassist来操作字节码的，其大致的写法和ASM并无区别，接下来一步步跟进看一下。
在`com.baidu.openrasp.EngineBoot#initTransformer`中完成了字节码转换模块的初始化：
这里可以看到在实例化了`ClassFileTransformer`实现的`CustomClassTransformer`后，调用了一个自己写的`retransform`方法，在这个方法中对`Instrumentation`已加载的所有类进行遍历，将其进行类的重新转换：
这里主要是为了支持`agentmain`模式对类进行重新转换。
在解释完了`retranform`后，我们来整体看一下OpenRASP是如何添加hook点并完成相应hook流程的。这一部分是在`com.baidu.openrasp.transformer#CustomClassTransformer`中：
我们都清楚`inst.addTransformer`的功能是在类加载时做拦截，对输入的类的字节码进行修改，也就是具体的检测流程插入都在这一部分。但是OpenRASP的hook点是在哪里加入的呢？其实就是在`addAnnotationHook`这里完成的：
这里会到`com.baidu.openrasp.hook`下对所有的类进行扫描，将所有由`HookAnnotation`注解的类全部加入到`HashSet`中，例如OgnlHook：
至此就完成了字节码转换模块的初始化。
#### 4.3 类加载拦截流程
前文已经介绍过RASP的具体拦截流程是在`ClassFileTransformer#transform`中完成的，在OpenRASP中则是在`CustomClassTransformer#transform`中完成的：
可以看到先检测当前拦截类是否为已经注册的需要hook的类，如果是hook的类则直接利用javassist的方式创建`ctClass`，想要具体了解javassist的使用方式的同学，可以直接看javassist的官方文档，这里不再过多表述。
可以看到在创建完`ctClass`后，直接调用了当前hook的`transformClass`方法。由于接下来涉及到跟进具体的hook处理类中，所以接下来的分析是以跟进`OgnlHook`这个hook来跟进的。
`OgnlHook`是继承于`AbstractClassHook`的，在`AbstractClassHook`中预定义了很多虚方法，同时也提供了很多通用的方法，`transformClass`方法就是在这里定义的：
这里直接调用了每个具体hook类的`hookMethod`方法来执行具体的逻辑，值得注意的是这里的最终返回也是一个`byte`数组，具体的流程和ASM并无两样。跟进`OgnlHook#hookMethod`：
这里首先生成需要插入到代码中的字节码，然后调用其自己写的`inserAfter`来将字节码插入到hook点的后面（其实就是决定是插在hook方法最顶部，还是return前的最后一行，这决定了调用顺序）。
可以简单的看一下插入的字节码是如何生成的：
很简单，就是插入一段代码，这段代码将反射实例化当前hook类，调用`methodName`所指定的方法，并将`paramString`所指定的参数传入该方法中。所以接下来看一下`OgnlHook#checkOgnlExpression`方法所执行的逻辑：
判断获取的表达式是不是`String`类型，如果是，将表达式放入`HashMap`中，然后调用`HookHandler.doCheck`方法：
在这里说一句题外话，可以看到在这里的逻辑设定是当服务器cpu使用率超过90%时，禁用全部的hook点。这也是RASP要思考解决的一个问题，当负载过高时，一定要给业务让步，也就一定要停止防护功能，不然会引发oom，直接把业务搞崩。所以如何尽量的减少资源占用也是RASP需要解决的一个大问题。
这里就是检测的主要逻辑，主要完成：
  * 检测计时
  * 获取检测结果
  * 根据检测结果判断是否要进行拦截
具体看一下如何获取的检测结果：
这里的`checkers`是在hook点管理模块初始化时设置的枚举类映射，所以这里调用的是：
`V8Checker().check()`方法，继承树如下：
所以具体的实现是在`AbstractChecker#check`中：
也就是`V8Checker#checkParam`：
这里就一目了然了，是调用JS插件来完成检测的：
easygame，就是在JS插件（其实就是个js文件）中寻找相应的规则进行规则匹配。这个js文件在`OpenRASP根目录/plugins/official/plugin.js`中：
如果符合匹配规则则返回block，完成攻击拦截。
至此整个拦截流程分析完毕。
#### 4.4 小结
从上面的分析中可以看出OpenRASP的实现方式还是比较简单的，其中非常有创新点的是利用js来编写规则，通过V8来执行js。
**利用js来编写规则的好处是更加方便热部署以及规则的通用性，同时减少了为不同语言重复制定相同规则的问题** 。
同样，OpenRASP也不免存在RASP本身存在的一些缺陷，这些缺陷将在“缺陷思考”这一节中具体的描述。
### 0x05 缺陷思考
虽然Java RASP是以Java
Instrumentation的工作方式工作在JVM层，可以通过hook引发漏洞的关键函数，在关键函数前添加安全检查，这看上去像是一个“all in
one”的通用解，但是其实存在很多问题。
#### 5.1 “通用解”的通用问题
**所有“通用解”的最大问题都出现在通用性上**
。在真实场景中RASP的应用环境比其在实验环境中复杂的多，如果想要一个RASP真正的运行在业务上就需要从乙方和甲方的角度双向思考问题，以下是我想到的一些问题，可能有些偏颇，但是还是希望能给一些参考性的意见：
##### 5.1.1 语言环境的通配适用性
企业内部的web应用纷繁复杂，有用Java编写的应用，有用Go编写的，还有用PHP、Python写的等等...，那么如何对这些不同语言所构建的应用程序都实现相应的防护？
对于甲方来说，我购置一套安全防护产品肯定是要能起到通用防护的作用的，肯定不会只针对Java购进一套Java RASP，这样做未免也太亏了。
对于乙方来说，每一种语言都有不同的特性，都要用不同的方式构建RASP，对于开发和安全研究人员来说工作量是相当之大的，强如OpenRASP团队目前也只是支持PHP和Java两个版本的。
这很大程度上也是影响到RASP推广的一个原因。看看传统的WAF、旁路流量监测等产品，它并不受语言的限制，只关心流量中是否存在具有威胁的流量就好，巧妙的减少了一个变量，从而加强了泛用性，无论什么样的环境都可以快速部署发挥作用，对于企业来说，肯定是更愿意购入WAF的。
##### 5.1.2 部署的通配适用性
由于开发人员所擅长的技能不同或不同项目组的技能树设定的不同，企业内部往往会存在使用各种各样框架实现的代码。而在代码部署上，如果没有一开始就制定严格的规范的话，部署环境也会存在各种各样的情况。就拿Java来说，企业内部可能存在Struts2写的、Spring写的、RichFaces写的等等...，同时这些应用可能部署在不同的中间件上：Tomcat、Weblogic、JBoss、Websphere等等...，不同的框架，不同的中间件部署方式都或多或少的有所不同，想要实现通配，真的不容易。
##### 5.1.3 规则的通用性
这一点其实已经被OpenRASP较好的解决了，统一利用js做规则，然后利用js引擎解析规则。所以这一点不多赘述。
#### 5.2 自身稳定性的问题
“安全产品首先要保证自己是安全的”，这句话说出来感觉是比较搞笑的，但是往往很多的安全产品其自身安全性就很差，只是仗着黑盒的不确定性才保持自己的神秘感罢了。对于RASP来说这句话更是需要严格奉行。因为RASP是将检测逻辑插入到hook点中的，只要到达了相应的hook点，检测逻辑是一定会被执行的，如果这个时候RASP实现的检测逻辑本身出现了问题，严重的话会导致整个业务崩溃，或直接被打穿。
##### 5.2.1 执行逻辑稳定性
就像上文所说的一样，如果在RASP所执行的逻辑中出现了严重的错误，将会直接将错误抛出在业务逻辑中，轻则当前业务中断，重则整个服务中断，这对于甲方来说就是严重的事故，甚至比服务器被攻击还严重。
简单来举个例子（当然在真实写RASP的时候不会这么写，这里只是展示严重性），如果在RASP的检测逻辑中存在`exit()`这样的利用，将直接导致程序退出：
这也就是为什么很多甲方并不喜欢RASP这种方式，因为归根到底，RASP还是将代码插入到业务执行流中，不出问题还好，出了问题就会影响业务。相比来说，WAF最多就是误封，但是并不会down掉业务，稳定性上是有一定保障的。
##### 5.2.2 自身安全稳定性
试想一个场景，如果RASP本身存在一定的漏洞，那是不是相当的可怕？即使原来的应用是没有明显的安全威胁的，但是在RASP处理过程中存在漏洞，而恰巧攻击者传入一个利用这样漏洞的payload，将直接在RASP处理流中完成触发。
举个实际的例子，比如在RASP中使用了受漏洞影响的FastJson库来处理相应的json数据，那么当攻击者在发送FastJson反序列化攻击payload的时候就会造成目标系统被RCE。
这其实并不是一个危言耸听的例子，OpenRASP在某版本使用的就是FastJson来处理json字符串，而当时的FastJson版本就是存在漏洞的版本。所以在最新的OpenRASP中，统一使用了较为安全的Gson来处理json字符串。
RASP的处理思路就决定了其与业务是联系非常紧密的，可以说就是业务的“一部分”，所以如果RASP自己的代码不规范不安全，最终将导致直接给业务写了一个漏洞。
##### 5.2.3 规则的稳定性
RASP的规则是需要经过专业的安全研究人员反复打磨并且根据业务来定制化的，需要尽量将所有的可能性都考虑进去，同时尽量的减少误报。但是由于规则贡献者水平的参差不齐，很容易导致规则遗漏，从而根本无法拦截相关的攻击，或产生大量的攻击误报。这样对于甲方来说无疑是一笔稳赔的买卖——花费大量时间进行部署，花费大量服务器资源来启用RASP，最终的安全效果却还是不尽如人意。
如果想要尽量的完善规则，只能更加贴近业务场景，针对不同的情况做不同的规则判别。所以说规则和业务场景是分不开的，对乙方来说不深入开发、不深入客户是很难做好安全产品的，如果只是停留在实验阶段，是永远没有办法向工程化和产品化转换的。
#### 5.3 部署复杂性的问题
在0x03以及0x04中不难看理想中最佳的Java
RASP实践方式是使用`agentmain`模式进行无侵入部署，但是受限于JVM进程保护机制没有办法对目标类添加新的方法，所以就会造成多次attach造成的重复字节码插入的问题。目前主流的Java
RASP推荐的部署方式都是利用`premain`模式进行部署，这就造成了必须停止相关业务，加入相应的启动参数，再开启服务这么一个复杂的过程。
对于甲方来说，重启一次业务完成部署RASP的代价是比较高的，所以都是不愿意采取这样的方案的。而且在甲方企业内部存在那么多的服务，一台台部署显然也是不现实的。目前所提出的自动化部署方案也受限于实际业务场景的复杂性，并不稳定。
### 0x06 总结
就目前来说RASP解决方案已经相对成熟，除非JDK出现新的特性，否则很难出现重大的革新。
目前各家RASP厂商主要都是针对性能及其他的辅助功能进行开发和优化，比如OpenRASP提出了用RASP构建SIEM以及实现被动扫描器的思路，这其实是一个非常好的思路，RASP配合被动扫描器能很方便的对企业内部的资产进行扫描，从而实现一定程度上的漏洞管控。
但是RASP不是万能的，并不能高效的防御所有的漏洞，其优劣势是非常明显的，应当正确的理解RASP本身的司职联合其他的防御措施构建完整的防御体系才能更好的做好安全防护。
个人认为RASP的最佳实践场所是甲方内部，甲方可以通过资产梳理对不同的系统进行相应的流量管控，这样RASP就能大大减少泛性检测所带来的的误报，同时更进一步的增加应用的安全性。
总体来说RASP是未来Web应用安全防护的方向，也同时是一个Web安全的发展趋势，其相较于传统安全防护产品的优势是不言而喻的，只要解决泛用性、稳定性、部署难等问题，可以说是目前能想出的一种较为理想方案了。
### 0x07 Reference
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *