title:An analysis of browser domain-isolation bugs and a light-weight transparent
defense mechanism
author:Shuo Chen and
David Ross and
Yi-Min Wang
An Analysis of Browser Domain-Isolation Bugs  
and A Light-Weight Transparent Defense Mechanism 
Shuo Chen 
Microsoft Research 
One Microsoft Way 
Redmond, WA 98052 
1-425-722-8238 
David Ross 
Security Technology Unit, Microsoft 
One Microsoft Way 
Redmond, WA 98052 
1-425-705-2116 
PI:EMAIL 
Yi-Min Wang 
Microsoft Research 
One Microsoft Way 
Redmond, WA 98052 
1-425-706-3467 
PI:EMAIL 
PI:EMAIL 
ABSTRACT 
Browsers’ isolation mechanisms are critical to users’ safety 
and privacy on the web. Achieving proper isolations, however, is 
very difficult. Historical data show that even for seemingly simple 
isolation  policies,  the  current  browser  implementations  are 
surprisingly  error-prone.  Isolation  bugs  have  been  exploited  on 
most  major  browser  products.  This  paper  presents  a  focused 
study  of  browser  isolation  bugs  and  attacks.  We  found  that 
because of the intrinsic complexity of browser components, it is 
impractical to exhaustively examine the browser implementation 
to  eliminate  these  bugs.  In  this  paper,  we  propose  the  script 
accenting  mechanism  as  a  light-weight  transparent  defense  to 
enhance the current domain isolation mechanism. The basic idea 
is  to  introduce  domain-specific  “accents”  to  scripts  and  HTML 
object names so that two frames cannot communicate/interfere if 
they have different accents. The mechanism has been prototyped 
on  Internet  Explorer.  Our  evaluations  showed  that  all  known 
attacks  were  defeated,  and  the  proposed  mechanism  is  fully 
transparent to existing web applications. The measurement about 
end-to-end browsing time did not show any noticeable slowdown. 
We also argue that accenting could be a primitive that is general 
enough for implementing other domain-isolation policies.  
Categories and Subject Descriptors 
D.4.6  [Operating  Systems]:  Security  and  Protection  –  invasive 
[Computer-Communication  Networks]: 
software;  C.2.0 
Security and Protection 
General Terms: Security 
Keywords 
browser, domain isolation bug, accenting, same-origin policy 
1.  INTRODUCTION 
Web browsers can render contents originated from different 
Internet  domains.  A  major  consideration  of  web  security  is  the 
appropriate enforcement of the same-origin principle: although it 
has  never  been  strictly  defined,  this  principle  can  be  loosely 
interpreted as “a script originated from one Internet domain  
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA. 
Copyright 2007 ACM 978-1-59593-703-2/07/0010...$5.00. 
should  not  be  able  to  read,  manipulate  or  infer  the  contents 
originated  from  another  domain”,  which  is  essentially  the  non-
interference property [9] in the web security context. Failures to 
enforce this principle result in severe security consequences, e.g., 
a  script  from  an  arbitrary  website  can  steal  the  user’s  banking 
information  or  perform  unintended  money  transfers  from  the 
user’s account. The malicious script can do almost anything that 
the victim user can do on the browser. 
found 
that  even 
for  a  well-specified  policy, 
Same-origin-principle  violations  can  be  due  to  insufficient 
script-filtering  of  the  web  application  on  the  server,  or  due  to 
flaws  in  the  browser  domain-isolation  mechanisms:  1)  Script-
filtering flaws are commonly referred to as cross-site scripting (or 
XSS) bugs [17]. By exploiting these bugs, malicious scripts from 
attacker websites can survive the filtering and later be executed in 
the  same  security  context  of  the  authentic  web  application.  A 
wealth of work in the security literature addresses prevention and 
defense techniques against XSS attacks. We do not focus on XSS 
in  this  paper;  2)  On  the  browser  side,  the  same-origin-principle 
violations are due to the improper isolation of the contents from 
different domains, which is one of the biggest security problems 
faced by browser developers. Although at the policy-specification 
level,  certain  isolation  policies  still  need  to  be  standardized  to 
support  more  browser  functionalities  while  preserving  security, 
we 
the 
implementation  of 
the  enforcement  mechanism  can  be 
surprisingly  hard  and  error-prone.  For  example,  the  most  well-
known  isolation  policy  is  the  cross-frame  same-origin  policy, 
which states that scripts running inside a frame of http://a.com is 
not allowed to access objects inside a frame of http://b.com. Bugs 
in  the  enforcement  mechanism  of  this  seemingly  simple  policy 
have  been  discovered  on  major  browsers,  including  Internet 
Explorer (IE), Firefox, Opera and Netscape Navigator [1][2][3].  
Although  browser  vendors  are  aware  of  real-world  attacks 
against browser isolation mechanisms, there is little work in the 
academic literature about this serious security problem. In order 
to better understand the problem space, we conducted a focused 
study of IE’s domain-isolation bugs and real attacks discovered in 
the  past.  The  study  shows  that  browser’s  flaws  in  the  isolation 
mechanism  are  due  to  many  convoluted  factors,  including  the 
navigation  mechanism, 
excessive 
expressiveness  of  navigation  methods,  the  semantics  of  user 
events and IE’s interactions with other system components. The 
exploitations of these flaws, which we will explain in details, are 
highly  heterogeneous,  and  thus  it  would  be  very  challenging  to 
exhaustively  reason  about  every  scenario  that  the  isolation 
mechanism  may  encounter.  Of  course,  the  unsolved  challenge 
suggests  that  the  browser  may  have  new  bugs  of  this  type 
discovered in the future, similar to the situation that we have with 
aliasing, 
function 
buffer overrun bugs – individual bug patches would not solve the 
problem as a whole. 
The  prevalence  of  browser  isolation  bugs  in  all  major 
browser  products  naturally  calls  for  a  comprehensive  defense 
technique.  However,  two  practical  constraints  need  to  be 
considered  when  we  design  the  defense  technique:  1)  the 
technique must be transparent to existing browser functionalities. 
A large volume of web applications have been developed based 
on  existing  browser  functionalities.  It  would  be  a  significant 
deployment  hurdle 
these 
applications;  2)  we  have  only  limited  understanding  of  the 
browser implementation. Browser products have very large code 
bases. The comprehensiveness of the defense should only rely on 
the  correct  understanding  of  a  small  subset  of  the  source  code, 
and thus should be straightforward.  
if  a  defense  mechanism  broke 
In this paper, we propose a light-weight transparent defense 
technique with the consideration of the above practical constraints.  
The technique is based on the notion of “script accenting”. The 
basic  idea  is  analogous  to  the  accent  in  human  languages,  in 
which the accent is essentially an identifier of a person’s origin 
that is carried in communications. To implement this, we slightly 
modified a few functions at the interface of the script engine and 
the  HTML  engine  so  that  (1)  each  domain  is  associated  with  a 
random “accent key”, and (2) scripts and HTML object names are 
in  their  accented  forms  at  the  interface.  Without  needing  an 
explicit  check  for  the  domain  IDs,  the  accenting  mechanism 
naturally  implies  that  two  frames  cannot  interfere  if  they  have 
different accent keys. 
The concept of script accenting provides a higher assurance 
for the implementation of the browser isolation mechanism. We 
are able to confidently define the script ownership and the object 
ownership,  which  are  easily  followed  in  our  implementation 
without  any  confusion.  A  prototype  of  the  technique  has  been 
implemented on IE. The evaluation showed that all known cross-
frame  attacks  were  defeated.  Moreover,  because  the  accenting 
mechanism only slightly changes the interface between the script 
engine  and  the  HTML  engine,  it  is  fully  transparent  to  web 
applications.  Our  stress 
test  showed  a  3.16%  worst-case 
performance  overhead,  but  the  measurement  of  the  end-to-end 
browsing time did not show any noticeable slowdown.  
The  rest  of  the  paper  is  organized  as  follows:  Section  2 
discusses  related  work.  We  briefly  introduce  the  basics  of  IE’s 
domain-isolation  mechanism  in  Section  3.  Section  4  presents  a 
case  study  of  real-world  attacks.  We  discuss  the  design  and the 
implementation of the script accenting mechanism in Section 5, 
followed  by  experimental  evaluations  in  Section  6.  Section  7 
concludes the paper. 
2.  RELATED WORK 
Researchers have been studying security issues related to the 
same-origin principle, among which the cross-site scripting (XSS) 
problem has attracted much attention. Although it is not the focus 
of  this  paper,  we  summarize  a  few  interesting  projects  here. 
Livshits  and  Lam  proposed  a  static  analysis  technique  to  find 
XSS  bugs  in  Java  applications  [14].  Johns  studied  XSS  attacks 
and identified the prerequisites for the attacks to hijack sessions. 
He  proposed 
the 
prerequisites  to  protect  browser  sessions  [11].  Because  XSS 
attacks are due to the failures of script filtering, Xu et al proposed 
using  taint  tracking  to  detect  the  attacks  [15].  The  attacks 
discussed  in  this  paper  are  a  different  type  of  attacks.  They 
the  SessionSafe  approach 
that  removes 
exploit flaws in the browser isolation mechanism, not the input-
filtering bugs on the web applications. 
[16]  and  JSONRequest 
Interesting  research  has  also  led  to  the  proposals  of  new 
policies of the browser isolation mechanism. Significant effort is 
spent on the discussion and the standardization of the browser’s 
mechanisms to securely retrieve data from servers, among which 
XMLHTTPRequest 
the 
representatives.  In  addition  to  the  effort  on  data  retrieval 
mechanisms, researchers also found that the timing characteristics 
of caches and the coloring of visited links allow malicious scripts 
to  infer  certain  browser  states  and  thus  track  users’  browsing 
histories. Accordingly, they specified the same-origin policies for 
browser caches and visited links [4][8][10]. In this paper, we do 
not  discuss  how  to  specify  better  policies,  but  focus  on  how  to 
correctly and securely implement those that are well-specified. 
[7]  are 
The  isolation  bugs  that  we  discuss  are  at  the  HTML  and 
Javascript  level,  rather  than  the  OS  process  level.  One  can 
imagine that if the IE process is compromised by buffer overrun 
or other binary code attacks, then the malicious binary code can 
directly  access  pages  from  different  domains  without  exploiting 
any  domain-isolation  bugs  at  the  HTML/Javascript  level.  These 
attacks  can  be  thwarted  by  OS-level  process  isolations.  For 
example,  Tahoma  is  a  web  browsing  system  based  on  virtual 
machine monitor (VMM) [6]. It implements a browser operating 
system (BOS) to guarantee that each web application runs inside 
its own virtual machine. Therefore, even when a browser instance 
in  a  web  application  is  compromised,  it  cannot  interfere  with 
other web applications. It should be noted that HTML/Javascript 
isolation and OS-level process isolation are very much orthogonal 
in  today’s  browsers  because  no  matter  how  the  underlying 
processes are isolated, the HTML/Javascript semantics require the 
capabilities  of  cross-domain  navigations,  frame-hosting,  event 
capturing, etc, which are the source of isolation bugs discussed in 
this paper. 
3.  THE BASIC MECHANISM FOR 
DOMAIN ISOLATION OF IE 
This section gives a short introduction of IE’s basic isolation 
mechanism  –  the  frame-based  isolation.  In  IE,  each  HTML 
document is hosted in a frame (or an inline frame)1. A browser 
window  is  the  top-level  frame,  which  hosts  the  top-level 
document  that  may  contain  other  frames.  IE  implements  a 
security mechanism to guarantee that scripts from one frame can 
access documents in another frame if and only if the two frames 
are from the same domain. 
Figure  1  shows  Frame1  and  Frame2  that  represent  two 
frames in the browser. The document in Frame1 is downloaded 
from http://a.com. The objects in the frame are stored in a DOM 
tree (i.e., a Document Object Model tree). The root of the DOM 
tree  is  a  window  object.  Note  that  “window”  in  the  DOM 
terminology actually represents a frame, which is not necessarily 
the  entire  browser  window.  The  children  of  window  include: 
location, which is the URL of the document; event, which 
is  the  event  received  by  this  frame;  document,  which  is  the 
parsed  HTML  document  contents;  history,  which  is  a 
collection  of  the  URLs  having  been  visited  in  this  frame.  The 
objects  body  and  scripts  have  the  common  parent  object 
1 The  security  aspect  of  inline  frames  is  very  similar  to  that  of 
regular frames. In the rest of this paper, the term “frame” refers to 
regular frames and inline frames. 
document.  The  body  object  contains  primarily  the  static 
contents to be rendered in the frame. Scripts is a collection of 
scripts  that  manipulate  the  DOM  tree  of  its  own  frame  and 
communicate with other frames. These scripts are compiled from 
the script source text embedded in the HTML file or passed from 
another  frame.  They  are  in  a  format  of  “byte-code”,  essentially 
the instruction set of the script engine. 
Frame1: from http://a.com
Frame2: from http://b.com
DOM
window 
DOM
windowProxy1: 
To service Frame2
windowProxy2:
To service Frame1
window 
location event document
history
location
event
document
history
body
scripts
Text box
anchor
button
image
body
input
scripts
font