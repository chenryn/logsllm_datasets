    logFile: None
    os: None
    col: None
    skipStatic: False
    proxyCred: None
    verbose: 1
    isDba: False
    encoding: None
    privEsc: False
    forceDns: False
    getAll: False
    api: True
    url: http://10.20.40.95/sql-labs/Less-4/?id=1
    invalidBignum: False
    regexp: None
    getDbs: False
    freshQueries: False
    uCols: None
    smokeTest: False
    udfInject: False
    invalidString: False
    tor: False
    forceSSL: False
    beep: False
    noEscape: False
    configFile: None
    scope: None
    authFile: None
    torType: SOCKS5
    regVal: None
    dummy: False
    checkInternet: False
    safePost: None
    safeFreq: None
    skipUrlEncode: False
    referer: None
    liveTest: False
    retries: 3
    extensiveFp: False
    dumpTable: False
    getColumns: False
    batch: True
    purge: False
    headers: None
    authCred: None
    osCmd: None
    suffix: None
    dbmsCred: None
    regDel: False
    chunked: False
    sitemapUrl: None
    timeSec: 5
    msfPath: None
    dumpAll: False
    fileRead: None
    getHostname: False
    sessionFile: None
    disableColoring: True
    getTables: False
    listTampers: False
    agent: None
    webRoot: None
    exclude: None
    lastChar: None
    string: None
    dbms: None
    dumpWhere: None
    tamper: None
    ignoreRedirects: False
    hpp: False
    runCase: None
    delay: 0
    evalCode: None
    cleanup: False
    csrfUrl: None
    secondUrl: None
    getBanner: False
    profile: False
    regRead: False
    bulkFile: None
    db: None
    dumpFormat: CSV
    alert: None
    harFile: None
    nullConnection: False
    user: None
    parseErrors: False
    getCount: False
    data: None
    regAdd: False
    ignoreProxy: False
    database: /tmp/sqlmapipc-lI97N8
    mobile: False
    googleDork: None
    saveConfig: None
    sqlShell: False
    tech: BEUSTQ
    textOnly: False
    cookieDel: None
    commonColumns: False
    keepAlive: False
#### 总结
基于 HTTP 的接口模式用起来可能比较繁琐，但是对于程序调用接口还是很友善的。总之该模式的流程是：
1、通过GET请求 /task/new 这个地址，创建一个新的扫描任务；
2、通过POST请求 /scan//start 地址，并通过json格式提交参数，开启一个扫描；通过GET请求
scan//status 地址，即可获取指定的taskid的扫描状态。这个返回值分为两种，一种是 run
状态（扫描未完成），一种是 terminated 状态（扫描完成）；
3、扫描完成后获取扫描的结果。
# 使用 Python3 编写 sqlmapapi 调用程序
下面就来编写一个 sqlmapapi 调用程序，首先我们得再次明确一下流程：
1、通过 sqlmapapi.py -s -H "0.0.0.0" 开启sqlmap
api的服务端。服务端启动后，在服务端命令行中会返回一个随机的admin
token值，这个token值用于管理taskid（获取、清空操作），在这个流程中不需要amin
token这个值，可以忽略。之后，服务端会处于一个等待客户端的状态。
2、通过GET请求 /task/new
这个地址，即可创建一个新的扫描任务，在响应中会返回一个随机的taskid。这个taskid在这个流程中尤为重要，因此需要通过变量存储下来，方便后面程序的调用。
3、通过POST请求 /scan//start
地址，并通过json格式提交参数(待扫描的HTTP数据包、若存在注入是否获取当前数据库用户名)，即可开启一个扫描任务，该请求会返回一个enginedid。
4、通过GET请求 scan//status
地址，即可获取指定的taskid的扫描状态。这个返回值分为两种，一种是run状态（扫描未完成），一种是terminated状态（扫描完成）。
5、判断扫描状态，如果扫描未完成，再次请求 scan//status 地址 ，直到扫描完成。
6、扫描完成后获取扫描的结果，是否是SQL注入，若不存在SQL注入，data字段为空，若存在SQL注入，则会返回数据库类型、payload等等。
明确了流程后，为了可维护性好和 main.py 文件代码量少，笔者首先是写了一个类，代码如下：
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    # wirter:En_dust
    import requests
    import json
    import time
    class Client():
        def __init__(self,server_ip,server_port,admin_token="",taskid="",filepath=None):
            self.server = "http://" + server_ip + ":" + server_port
            self.admin_token = admin_token
            self.taskid = taskid
            self.filepath = ""
            self.status = ""
            self.scan_start_time = ""
            self.scan_end_time = ""
            self.engineid=""
            self.headers = {'Content-Type': 'application/json'}
        def create_new_task(self):
            '''创建一个新的任务，创建成功返回taskid'''
            r = requests.get("%s/task/new"%(self.server))
            self.taskid = r.json()['taskid']
            if self.taskid != "":
                return self.taskid
            else:
                print("创建任务失败!")
                return None
        def set_task_options(self,url):
            '''设置任务扫描的url等'''
            self.filepath = url
        def start_target_scan(self,url):
            '''开始扫描的方法,成功开启扫描返回True，开始扫描失败返回False'''
            r = requests.post(self.server + '/scan/' + self.taskid + '/start',
                          data=json.dumps({'url':url,'getCurrentUser':True,'getBanner':True,'getCurrentDb':True}),
                          headers=self.headers)
            if r.json()['success']:
                self.scan_start_time = time.time()
                #print(r.json())
                #print(r.json()['engineid'])
                return r.json()['engineid']
            else:
                #print(r.json())
                return None
        def get_scan_status(self):
            '''获取扫描状态的方法,扫描完成返回True，正在扫描返回False'''
            self.status = json.loads(requests.get(self.server + '/scan/' + self.taskid + '/status').text)['status']
            if self.status == 'terminated':
                self.scan_end_time = time.time()
                #print("扫描完成!")
                return True
            elif self.status == 'running':
                #print("Running")
                return False
            else:
                #print("未知错误！")
                self.status = False
        def get_result(self):
            '''获取扫描结果的方法，存在SQL注入返回payload和注入类型等，不存在SQL注入返回空'''
            if(self.status):
                r = requests.get(self.server + '/scan/' + self.taskid + '/data')
                if (r.json()['data']):
                    return r.json()['data']
                else:
                    return None
        def get_all_task_list(self):
            '''获取所有任务列表'''
            r = requests.get(self.server + '/admin/' + self.admin_token + "/list")
            if r.json()['success']:
                #print(r.json()['tasks'])
                return r.json()['tasks']
            else:
                return None
        def del_a_task(self,taskid):
            '''删除一个任务'''
            r = requests.get(self.server + '/task/' + taskid + '/delete')
            if r.json()['success']:
                return True
            else:
                return False
        def stop_a_scan(self,taskid):
            '''停止一个扫描任务'''
            r = requests.get(self.server + '/scan/' + taskid + '/stop')
            if r.json()['success']:
                return True
            else:
                return False
        def flush_all_tasks(self):
            '''清空所有任务'''
            r =requests.get(self.server + '/admin/' + self.admin_token + "/flush")
            if r.json()['success']:
                return True
            else:
                return False
        def get_scan_log(self):
            '''获取log'''
            r = requests.get(self.server + '/scan/' + self.taskid + '/log')
            return r.json()
main.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    # wirter:En_dust
    from Service import Client
    import time
    from threading import Thread
    def main():
        '''实例化Client对象时需要传递sqlmap api 服务端的ip、port、admin_token和HTTP包的绝对路径'''
        print("————————————————Start Working！—————————————————")
        target = input("url:")
        task1 = Thread(target=set_start_get_result,args=(target,))
        task1.start()
    def time_deal(mytime):
         first_deal_time = time.localtime(mytime)
         second_deal_time = time.strftime("%Y-%m-%d %H:%M:%S", first_deal_time)
         return  second_deal_time
    def set_start_get_result(url):
        #/home/cheng/Desktop/sqldump/1.txt
        current_taskid =  my_scan.create_new_task()
        print("taskid: " + str(current_taskid))
        my_scan.set_task_options(url=url)
        print("扫描id:" + str(my_scan.start_target_scan(url=url)))
        print("扫描开始时间：" + str(time_deal(my_scan.scan_start_time)))
        while True:
            if my_scan.get_scan_status() == True:
                print(my_scan.get_result())
                print("当前数据库:" + str(my_scan.get_result()[-1]['value']))
                print("当前数据库用户名:" + str(my_scan.get_result()[-2]['value']))
                print("数据库版本:" + str(my_scan.get_result()[-3]['value']))
                print("扫描结束时间：" + str(time_deal(my_scan.scan_end_time)))
                print("扫描日志：\n" + str(my_scan.get_scan_log()))
                break
    if __name__ == '__main__':
        my_scan = Client("127.0.0.1", "8775", "c88927c30abb1ef6ea78cb81ac7ac6b0")
        main()
Github 地址：
* * *