# The Difference Between Volatility2 and Volatility3

## Volatility2
In Volatility2, the process of creating a profile is recommended to be done on `CentOS 7` to avoid lengthy dependency resolution issues that may arise on other Linux systems, such as Ubuntu.

### Profiles in Volatility2
A **Profile** in Volatility2 is a collection of `VTypes`, unions, and object types specific to a particular operating system version and hardware architecture (e.g., x86, x64, ARM).

- **VTypes**: These are data structure definitions and parsers used by the Volatility framework. Since most operating systems are written in C, which heavily uses data structures, VTypes allow these structures to be represented in Python.
- **Metadata**: This includes the name of the operating system (e.g., "windows", "mac", "linux"), the kernel version, and the build number.
- **System Call Information**: This includes the index and names of system calls.
- **Constant Values**: These are global variables that can be found at hard-coded addresses in some operating systems.
- **System Mappings**: These include addresses of key global variables and functions (available for Linux and Mac).

## Volatility3
In Volatility3, the concept of profiles has been replaced with an extended symbol table library called `Symbols`. For most Windows memory images, Volatility3 can generate new symbol tables based on the memory image itself. This allows the symbol table to contain specific offsets based on the location of the operating system (symbol location), making it easier and faster to identify structures within the OS using known offsets from official debugging information.

### Symbol Tables in Volatility3
Symbol tables, used for analyzing relevant OS data, are stored in JSON format. They can be plain `.json` files or compressed as `.json.gz` or `.json.xz`. Volatility3 automatically decompresses them when needed and caches their contents in the user's home directory under `.cache/volatility3`.

#### Types of Symbol Tables
1. **Windows Symbol Tables**
   - **Composition**: The symbol table string consists of the `GUID` and `Age` of the required `PDB` file.
   - **Process**: Volatility3 searches for all files in the configured windows subdirectory and matches metadata containing the `pdb` name, `GUID`, and `Age`. If not found, it downloads the relevant `PDB` file from Microsoft's official symbol server, converts it to the appropriate JSON format, and stores it in the correct location.
   - **Manual Construction**: You can manually build Windows symbol tables using the `pdbconv.py` tool, which is included in Volatility3. The command to run this tool is:
     ```sh
     python3 ./volatility3/framework/symbols/windows/pdbconv.py
     ```
   - **Download**: Official Windows symbol tables can be downloaded from [here](https://downloads.volatilityfoundation.org/volatility3/symbols/windows.zip).

2. **Linux/Mac Symbol Tables**
   - **Mac**: There are only a limited number of kernels, and updates are infrequent due to the time-consuming nature of the process. Mac symbol tables can be downloaded from [here](https://downloads.volatilityfoundation.org/volatility3/symbols/mac.zip).
   - **Linux**: Linux symbol tables are not comprehensive because Linux kernels are easy to compile and unique, making it difficult to provide a complete set. Standard kernels are stripped of debugging information, so you need to obtain debug symbols separately. Linux symbol tables can be generated using the `dwarf2json` tool, which converts `DWARF` files to JSON. Only the `--elf` option is currently supported in Volatility3.
     ```sh
     ./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux-4.4.0-137-generic > output.json
     ```
   - **Download**: Partial Linux symbol tables can be downloaded from [here](https://downloads.volatilityfoundation.org/volatility3/symbols/linux.zip).

# LiME: Linux Memory Extractor
LiME (Linux Memory Extractor) is a loadable kernel module (LKM) for Linux that allows for the extraction of temporary memory (RAM) from Linux-based devices, including Android. It was the first tool to enable full memory capture on Android devices, minimizing interaction between user and kernel space processes, resulting in more reliable memory captures.

### Compiling LiME
To compile LiME, follow these steps:

```sh
[root@localhost CentOS]# tar -zxvf LiME.tar.gz
[root@localhost CentOS]# cd /home/yunwei/Desktop/malware/LiME/src/
[root@localhost src]# make
```

### Capturing Memory
To capture memory, use the following commands:

```sh
## Enter kernel mode to capture memory
[root@localhost src]# insmod lime-`uname -r`.ko path=/home/yunwei/Desktop/malware/centos5.lime format=lime

## Exit kernel mode before capturing memory again
[root@localhost src]# rmmod lime
```

### Generating Metadata
#### Using `dwarf2dump`
1. **Install `dwarfdump`**:
   - **Download and compile libdwarf**:
     ```sh
     [root@localhost src]# git clone https://github.com/tomhughes/libdwarf.git
     [root@localhost src]# tar -zxvf libdwarf.tar.gz
     [root@localhost src]# cd /media/CentOS_5.5_Final/CentOS/
     [root@localhost src]# rpm -ivh /media/CentOS_5.5_Final/CentOS/elfutils-libelf-0.137-3.el5.x86_64.rpm 
     [root@localhost libdwarf]# rpm -ivh elfutils-libelf-devel-static-0.137-3.el5.x86_64.rpm elfutils-libelf-devel-0.137-3.el5.x86_64.rpm elfutils-libelf-0.137-3.el5.x86_64.rpm
     [root@localhost CentOS]# cd /home/yunwei/Desktop/malware/libdwarf
     [root@localhost CentOS]# ./configure
     [root@localhost libdwarf]# make
     [root@localhost dwarfdump]# make install
     cp dwarfdump /usr/local/bin/dwarfdump
     cp ./dwarfdump.conf /usr/local/lib/dwarfdump.conf
     cp ./dwarfdump.1 /usr/local/share/man/man1/dwarfdump.1
     [root@localhost dwarfdump]# dwarfdump -h
     ```

2. **Generate Memory Image**:
   ```sh
   [root@localhost malware]# tar -zxvf volatility.tar.gz
   [root@localhost malware]# cd volatility/tools/linux/
   ```

This should provide a clear and coherent guide to the differences between Volatility2 and Volatility3, as well as the process of using LiME for memory extraction and generating metadata.