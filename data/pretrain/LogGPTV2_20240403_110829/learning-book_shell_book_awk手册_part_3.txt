1012 7:46
1025 7:27
1028 7:49
1029 7:57
1034 7:26
1042 7:59
1051 7:51
1052 8:05
1101 7:32
[说明：]
awk程序由三个主要部分构成：
[i.] Pattern { Action}指令
 s1）xx：]
[ii.]Comment（以#开头识别之）
awk的输入指令getline，每次读取一列数据.若getline之后
未接任何变量，则所读入之资料将以s0记录，否则以所指定的变量储存之
[以本例而言]：
执行“date"getline后，S0之值为"2007年09月21日星期五14:28:02CST"，当$0之值被
更新时，awk将自动更新相关的内建变量，如：$1,$2.,NF.故S2之值将为"09月"，S3之值将
为"21日"
（有少数旧版的awk不允许即使用者自行更新（update)So的值，或者更新so时，它不会自动更
新S1.S2.NF.这情况下，可改用gawk或nawk.否则使用者也可自行以awk字符串函数splitO
来分隔$O上的数据）
本程序中printfO指令会被执行12次（因为有arrdat中有12行数据），但读者不用担心数据
被重复sort了12次.当awk结束该程序时才会close这个pipe，此时才将这12行数据一次
送往系统,并呼叫"sort-k1>>today_rpt2"处理之.
awk提供另一个调用Shell命令的方法，即使用awk函数system("shell命令")
例如：
$ awk
BEGIN{
system("date > date,dat")
getline  480 ? "*": "*) I"sort =k 1 >>
today_rpt3"
total += arrival
END(
close("today_rpt3")
---
## Page 18
(.81d1>
"today_rpt3"
function HM_to_M( hour, min ){
return hour*60 + min
并执行如下指令：
$/reformat3 arr, dat
执行后，文件today_rpt3的内容如下：
Todayis09月21日
ID Number Arrival Tine
1005 8:12 *
1006 7:45
1008 8:01 *
1012 7:46
1025 7:27
1028 7:49
1029 7:57
1034 7:26
1042 7:59
1051 7:51
1052 8:05 *
11017:32
Average arrival time : 7:49
[说明：]
awk中亦允许使用者自定函数.函数定义方式请参考本程序，function为awk的保留字
HM_to_M（）这函数负责将所传入之小时及分钟数转换成以分钟为单位.使用者自定函数时，
还有许多细节须留心，如data scope..（请参考第十节RecursiveProgram)
awk中亦提供与C语言中相同的ConditionalOperator上式printfO中使用arrival>480？"*"：
""即为一例若arrival大于480则return"*"，否则returmn""
NR(NumberofRecord)为awk的内建变量.表示awk执行该程序后所读入的记录笔数
awk中提供的close(）指令，语法如下(有二种)：
close( filename)
close(置于pipe 之前的command)
为何本程序使用了两个close（）指令：
指令 close("sort-k1>>today_rpt3"),其意思为close 程序中置于"sort-k1>>today_rpt3"之
前的Pipe，并立刻调用Shell来执行"sort-k1>>today_rpt3".(若未执行这指令，awk必须于
结束该程序时才会进行上述动作;则这12笔sort后的数据将被append到文件today_rpt3中
"Average arrival time:.."的后方)
---
## Page 19
因为Shell排序后的数据也要写到today_rpt3，所以awk必须先关闭使用中的today_rpt3以
使Shell正确将排序后的数据追加到today_rpt3否则2个不同的process同时打开一个文件
进行输出将会产生不可预期的结果
读者应留心上述两点，才可正确控制数据输出到文件中的顺序
指令close("sort-k1>>today_rpt3")中字符串"sort+0n>>today_rpt3"必须与pipe|后方的
Shell Command名称一字不差，否则awk将视为二个不同的pipe
读者可于 BEGIN{中先令变量Sys_call="sort +On>>today_rpt3"，
程序中再一律以Sys_call代替该字符串.
>使用getline来读取数据
[范例：]承上题，从文件中读取当月迟到次数，并根据当日出勤状况更新迟到累计数按不
同的月份累计于不同的文件）
[分析：]
程序中自动抓取系统日期的月份名称，连接上"late.dar"，形成累计迟到次数的文件名称（如：
09月late..dat..)，并以变量late_file记录该文件名
累计迟到次数的文件中的数据格式为：员工代号（ID)迟到次数
例如，执行本程序前文件09月late.dat的内容为：
1012 0
1006 1
1052 2
1034 0
1005 0
1029 2
1042 0
1051 0
1008 0
11010
1025 1
1028 0
编写程序reformat4如下：
#!/bin/sh
awk
BEGIN
d.1KepResult
print “=ssssss
================* > Result
as 0 ) cnt[$1]= $2
close( late_file )
已更改字段切割方式，$2表小时数，$3表分钟数
arrival = HM_to_M($2, $3)
if( arrival > 480 )(
mark=“”#若当天迟到.应再增加其迟到次数，且令mark为”*"
cnt[$1]++)
else mark = * "
#message用以显示该员工的迟到累计数，若未曾迟到message为空字符串
message = cnt[$1] ? cnt[$1]“ times":“
printf("%s %2d:%2d %5s %s\n", $1, $2, $3, mark, message ) | Sys_Sort
total += arrival
END(
close( Result )