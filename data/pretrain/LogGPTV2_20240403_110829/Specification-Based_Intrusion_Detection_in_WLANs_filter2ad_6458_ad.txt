pected frame, unexpected frame ﬂood and Zero alarms.
All attacks were classiﬁed correctly by the State-
Transition-Processor for all captures. On the other
hand, Snort-Wireless-Default had the same detection
rate (on all three sensors) as in Set1 experiments.
For the ﬁrst part of Set3 experiments, where a
normal RSN data transfer was monitored, the State-
Transition-Processor did not raise any alarms for cap-
tures obtained from Sensor1 and Sensor2. However, the
capture from Sensor3 led to generation of false alarms
of type Pos and noSA. ForOpen Network traﬃc moni-
toring, the State-Transition-Processor raised alarms of
type nonCompliantNetwork and noSA for captures ob-
tained from all sensors. The capture from Sensor3 also
led to generation of false alarms of type Pos. In both
cases, Snort-Wireless-Default raised no alarms apart
from the macspoof alarms which were ignored as noise.
Attack
Deauthentication Broadcast Flood DoS
Targeted Deauthentication DoS
Client Initiated Targeted
Deauthentication DoS
Authentication Flood
Sensor1
√
√
√
√
Sensor2
√
√
√
√
Sensor3
×
√
√
√
Alarms
deauthFlood
deauthFlood
deauthFlood
authFlood
Table 3. Snort-Wireless-Default attack detec-
tion and alarms for Set1 experiments
5.4. Analysis
The State-Transition-Processor was able to detect
all the attacks launched in experimentation Set1 and
Set2 correctly by monitoring the state changes in the
state transition model described in Section 4.1. It also
successfully detected policy violations in Set3 by ap-
plying site security constraints and demonstrated a low
rate of false positives.
5.4.1 Attack Detection
The State-Transition-Processor was not only success-
ful in detecting all attacks in Set1 and Set2, it also
classiﬁed the detected attacks correctly in all cases by
simply using the type-subtype of the last frame caus-
ing an increment in one of the indices of suspicion and
examining the address ﬁelds of the frame. In Set1 and
Set2 experiments, the alarm type of Zero was correctly
raised in all ﬂooding attacks and in instances where
there were numerous unsuccessful attempts by the STA
to establish SA with the AP, the alarm type of Neg was
also correctly raised indicating a DoS attack. When-
ever a data frame was detected to/from a MAC ad-
dress that had not completed its SA, a noSA alarm
was raised. MAC address spooﬁng attacks (alarm type
Spooﬁng) were also correctly detected whenever a pos-
itive state shift was detected immediately following a
negative state shift or a -ve frame. In these experiments
an alarm type of Spooﬁng was raised whenever the sen-
sor detected a data frame to/from the entity that had
just received a -ve frame or had undergone a nega-
tive shift. As described in Section 4.2, the frames that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006would not normally be processed by a real STA/AP
in a particular state were ﬂagged by raising the unex-
pected frame alarm type. The unexpected frame ﬂood
alarm type was raised whenever a threshold number of
the unexpected frames was detected.
There were some unexpected frame transitions that
occurred in the Set1 and Set2 experiments. For in-
stance, in Set1 experiments, the EAP-Failure attack
led to the generation of additional alarms of type un-
expected frame and unexpected frame ﬂood. This was
caused because on receiving an EAP-Failure frame, the
STA sends a deauthentication frame to the AP, hence
transitioning the observed state to 0. Hence every sub-
sequent EAP-Failure frame led to the generation of an
unexpected frame alarm as the STA was in state 0. A
complete list can be seen in Table 2. However none
of these unexpected transitions aﬀected the successful
classiﬁcation/identiﬁcation of the real attack.
In all experiments the use of indices of suspicion in
the State-Transition-Processor assisted in eliminating
the majority of sources of false positives and multiple
alerts for the same attack, while maintaining a null
false negative rate. In Set3 experiments, the captures
obtained from Sensor3 led to the generation of a num-
ber of false positives. As expected, the most common
false positives generated were alarms of type Pos and
noSA as these alarms are directly related to frame loss.
The rate of false positives appears to be directly pro-
portional to the rate of frame loss and Sensor3, being
the furthest away from the AP and the STA, experi-
enced the most frame losses. No false positives were
generated by Sensor1 or Sensor2. By correlating the
alarms generated by diﬀerent sensors, most of the false
positives can easily be eliminated. All false positives
generated in Set3 experiments were eliminated when
results from the three sensors were correlated. In the
correlation process, perhaps more weight can be placed
on the alarms generated by the sensors located in close
proximity of the AP and the STA4.
In Set3 experiments, the State-Transition-Processor
correctly detected violation of the site security policy
by simply using the state transition model and related
constraints (provided via a conﬁg ﬁle). The IE of the
new WLAN did not match the expected IE and the
state transition model did not expect data transfer to
occur before state 8 is reached. In Open Networks data
transfer can occur after state 4. This led to generation
of the nonCompliantNetwork and noSA alarms.
4This scheme will have to be assisted by some ﬂavor of loca-
tion aware infrastructure
5.4.2 Comparative Analysis
In the experiments, Snort-Wireless-Default was only
able to detect the authentication ﬂood attacks and the
various deauthentication ﬂood attacks and was unsuc-
cessful in detecting attacks violating the site security
policy; whereas State-Transition-Processor successfully
detected all the launched attacks (see Table 3 and Sec-
tion 5.3). A noticeable drawback in Snort-Wireless-
Default is that it does not provide any DoS attack
detection apart from ﬂooding attacks, which is fur-
ther limited to just authentication and deauthentica-
tion ﬂood attacks. Also its deauthﬂood and authﬂood
preprocessors require the injected frames to arrive at a
certain rate (which is conﬁgurable) for successful detec-
tion of ﬂooding attacks. For instance Snort-Wireless-
Default did not detect the deauthentication broadcast
ﬂood attack in the traﬃc capture obtained from Sen-
sor3 since, due to frame loss, Sensor3’s capture ﬁle did
not represent the attack incoming at a high rate (see
Table 3). State-Transition-Processor has no such pre-
conditions and is capable of detecting ﬂooding attacks
without any dependence on the rate of frame injection.
Besides ﬂooding attacks, State-Transition-Processor
is also capable of detecting spooﬁng/MITM/session hi-
jacking attacks by checking for a positive state shift im-
mediately following a negative state shift or a -ve frame.
This detection mechanism is much more reliable and ro-
bust than the one used by Snort-Wireless-Default i.e.
detecting gaps in sequence numbers of frames (mac-
spoof preprocessor). State-Transition-Processor can
even detect stealthy DoS attacks such as when an at-
tacker monitors a legitimate STA passively and injects
a DoS attack frame into the WLAN every time the
STA reaches half way through establishing SA with
the AP. However, Snort-Wireless-Default has no means
of detecting similar attacks. Snort-Wireless-Default is
also not capable of detecting random injection attacks
aimed at consuming network bandwidth such as the
injection of data frames with random STA source ad-
dresses and injection of random frames which will have
no impact on the state of the STA (i.e. unexpected
frames). The State-Transition-Processor would detect
this as anomalous activity. Snort-Wireless-Default re-
quires a separate preprocessor to detect each kind of
attack, while State-Transition-Processor can detect at-
tacks without requiring any additional algorithms or
preprocessors 5. State-Transition-Processor does not
require constant code updates/patches to detect new
attacks and has a very small footprint and hence can
be easily deployed on a large scale without the need of
5The authors however acknowledge the ﬂexibility provided by
the design of Snort-Wireless which enables pre-processors to be
readily plugged in for enhanced functionality
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[3] M. Chirumamilla and B. Ramamurthy. Agent based
intrusion detection and response system for wireless
LANs.
In IEEE ICC ’03. Volume: 1 , 11-15 May,
pages 492–496, 2003.
[4] H. Debar and J. Viinikka. Intrusion detection: Intro-
duction to intrusion detection and security informa-
tion management. In FOSAD 2004/2005, 2005.
[5] R. Gill, J. Smith, and A. Clark. Experiences in Pas-
sively Detecting Session Hijacking Attacks in IEEE
802.11 Networks. In R. Safavi-Naini, C. Steketee, and
W. Susilo, editors, Fourth Australasian Information
Security Workshop (Network Security) (AISW 2006),
volume 54 of CRPIT, pages 221–230, Hobart, Aus-
tralia, 2006. ACS.
[6] F. Guo and T. Chiueh. Sequence number-based MAC
address spoof detection. In A. Valdes and D. Zamboni,
editors, RAID, volume 3858 of LNCS, pages 309 – 329.
Springer, 2005.
[7] C. He and J. C. Mitchell. Security analysis and im-
provements for IEEE 802.11i.
In Proceedings of the
12th Annual Network and Distributed System Security
Symposium, Feb 2005.
[8] IEEE Std 802.11i–2004. WLAN Security Standard.
IEEE Standards Association, 23rd July 2004.
[9] K. Ilgun, R. A. Kemmerer, and P. A. Porras. State
transition analysis: A rule-based intrusion detection
approach. IEEE Trans. Software Eng., 21(3):181–199,
1995.
[10] C. C. W. Ko. Execution Monitoring of Security-
Critical Programs
A
Speciﬁcation-based Approach. PhD thesis, U.C. Davis,
1996.
in a Distributed System:
[11] Y.-X. Lim, T. Yer, J. Levine, and H. Owen. Wire-
less intrusion detection and response. In Information
Assurance Workshop. IEEE Systems, Man and Cyber-
netics Society, 18-20 June, pages 68–75, 2003.
[12] A. Mishra and W. Arbaugh. An Initial Security Anal-
ysis of the IEEE 802.1X Standard. Technical report,
2003.
[13] R. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Ti-
wari, H. Yang, and Z. S. Speciﬁcation-based anomaly
detection: a new approach for detecting network in-
trusions. In V. Atluri, editor, ACM CCS, pages 265 –
274. ACM, 2002.
[14] D. Stanley, J. Walker, and B. Aboba. Extensible au-
thentication protocol (EAP) method requirements for
wireless LANs. Technical report, IETF, 2005. RFC
4017.
[15] J. Wright. Detecting wireless LAN MAC address
spooﬁng, 2003. White paper.
extensive computing power.
6. Conclusions And Future Work
In this work we have presented an approach for con-
structing an IDS for infrastructure WLANs using a
speciﬁcation-based approach. This system implements
both attack detection and policy compliance monitor-
ing, a unique contribution of this work. The speci-
ﬁcation used by the system comprised a state tran-
sition model and set of constraints. Construction of
the state transition model was based on the underlying
network protocol speciﬁcations (IEEE 802.11, 802.1X,
and EAP). Constraints were derived from an example
security policy.
The IDS constructed using these techniques was im-
plemented as a Snort-Wireless preprocessor and its ac-
curacy and sensitivity were evaluated. The technique
proved capable of passively detecting all known attacks
and eﬀective at monitoring for policy compliance. Ex-
perimental analysis demonstrated that the technique,
when combined with the use of indices of suspicion was
able to detect all intrusions with a minimal number of
false positives (i.e. the technique is accurate) and no at-
tacks went undetected (i.e. the technique is suﬃciently
sensitive). The system meets the requirement of being
maintainable. As an implementation of an anomaly
based approach, the system does not require updates
as new attacks, or variants of attacks emerge. The use
of runtime conﬁguration parameters permits the con-
straints used by the system to be easily updated as the
network security policy changes.
In future work, we aim to evaluate the attack re-
sistance of the approach to conﬁrm that it is able to
reliably report intrusions in the presence of attackers
that are attempting to exhaust the resources of the
monitor, by instantiating a large amount of state on
the monitor for example. We also aim to study more
complicated and complex algorithms to determine the
values for indices of suspicion. We would also like to
study the eﬀects of tuning these thresholds on the false
positives and false negatives.
References
[1] J. Bellardo and S. Savage. 802.11 denial-of-service
attacks: Real vulnerabilities and practical solutions.
In Proceedings of the USENIX Security Symposium.
Washington D.C., USA, 2003.
[2] C.-Y. Chin-Yang Tseng, B. P., C. Ko, R. Limprasitti-
porn, J. Rowe, and K. N. Levitt. A speciﬁcation-based
intrusion detection system for AODV. In S. Setia and
V. Swarup, editors, SASN, pages 125–134. ACM, 2003.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006