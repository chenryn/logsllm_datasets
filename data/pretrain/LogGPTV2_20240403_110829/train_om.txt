these functions calculate the complex square root of
.ir z ,
with a branch cut along the negative real axis.
(that means that \ficsqrt(\-1+eps*i)\fp will be close to i while
\ficsqrt(\-1\-eps*i)\fp will be close to \-i, \fiif eps\fp is a small positive
real number.)
.sh versions
these functions first appeared in glibc in version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br csqrt (),
.br csqrtf (),
.br csqrtl ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
c99, posix.1-2001, posix.1-2008.
.sh see also
.br cabs (3),
.br cexp (3),
.br complex (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) tom bjorkholm & markus kuhn, 1996
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 1996-04-01 tom bjorkholm 
.\"            first version written
.\" 1996-04-10 markus kuhn 
.\"            revision
.\"
.th sched_rr_get_interval 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sched_rr_get_interval \- get the sched_rr interval for the named process
.sh synopsis
.nf
.b #include 
.pp
.bi "int sched_rr_get_interval(pid_t " pid ", struct timespec *" tp );
.fi
.sh description
.br sched_rr_get_interval ()
writes into the
.i timespec
structure pointed to by
.i tp
the round-robin time quantum for the process identified by
.ir pid .
the specified process should be running under the
.b sched_rr
scheduling policy.
.pp
the
.i timespec
structure has the following form:
.pp
.in +4n
.ex
struct timespec {
    time_t tv_sec;    /* seconds */
    long   tv_nsec;   /* nanoseconds */
};
.ee
.in
.pp
if
.i pid
is zero, the time quantum for the calling process is written into
.ir *tp .
.\" fixme . on linux, sched_rr_get_interval()
.\" returns the timeslice for sched_other processes -- this timeslice
.\" is influenced by the nice value.
.\" for sched_fifo processes, this always returns 0.
.\"
.\" the round-robin time quantum value is not alterable under linux
.\" 1.3.81.
.\"
.sh return value
on success,
.br sched_rr_get_interval ()
returns 0.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
problem with copying information to user space.
.tp
.b einval
invalid pid.
.tp
.b enosys
the system call is not yet implemented (only on rather old kernels).
.tp
.b esrch
could not find a process with the id
.ir pid .
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
posix systems on which
.br sched_rr_get_interval ()
is available define
.b _posix_priority_scheduling
in
.ir  .
.ss linux notes
posix does not specify any mechanism for controlling the size of the
round-robin time quantum.
older linux kernels provide a (nonportable) method of doing this.
the quantum can be controlled by adjusting the process's nice value (see
.br setpriority (2)).
assigning a negative (i.e., high) nice value results in a longer quantum;
assigning a positive (i.e., low) nice value results in a shorter quantum.
the default quantum is 0.1 seconds;
the degree to which changing the nice value affects the
quantum has varied somewhat across kernel versions.
this method of adjusting the quantum was removed
.\" commit a4ec24b48ddef1e93f7578be53270f0b95ad666c
starting with linux 2.6.24.
.pp
linux 3.9 added
.\" commit ce0dbbbb30aee6a835511d5be446462388ba9eee
a new mechanism for adjusting (and viewing) the
.br sched_rr
quantum: the
.i /proc/sys/kernel/sched_rr_timeslice_ms
file exposes the quantum as a millisecond value, whose default is 100.
writing 0 to this file resets the quantum to the default value.
.\" .sh bugs
.\" as of linux 1.3.81
.\" .br sched_rr_get_interval ()
.\" returns with error
.\" enosys, because sched_rr has not yet been fully implemented and tested
.\" properly.
.sh see also
.br sched (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2005 robert love
.\" and copyright (c) 2008, michael kerrisk 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 2005-07-19 robert love  - initial version
.\" 2006-02-07 mtk, minor changes
.\" 2008-10-10 mtk: add description of inotify_init1()
.\"
.th inotify_init 2 2020-04-11 "linux" "linux programmer's manual"
.sh name
inotify_init, inotify_init1 \- initialize an inotify instance
.sh synopsis
.nf
.b #include 
.pp
.b "int inotify_init(void);"
.bi "int inotify_init1(int " flags );
.fi
.sh description
for an overview of the inotify api, see
.br inotify (7).
.pp
.br inotify_init ()
initializes a new inotify instance and returns a file descriptor associated
with a new inotify event queue.
.pp
if
.i flags
is 0, then
.br inotify_init1 ()
is the same as
.br inotify_init ().
the following values can be bitwise ored in
.ir flags
to obtain different behavior:
.tp
.b in_nonblock
set the
.br o_nonblock
file status flag on the open file description (see
.br open (2))
referred to by the new file descriptor.
using this flag saves extra calls to
.br fcntl (2)
to achieve the same result.
.tp
.b in_cloexec
set the close-on-exec
.rb ( fd_cloexec )
flag on the new file descriptor.
see the description of the
.b o_cloexec
flag in
.br open (2)
for reasons why this may be useful.
.sh return value
on success, these system calls return a new file descriptor.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
.rb ( inotify_init1 ())
an invalid value was specified in
.ir flags .
.tp
.b emfile
the user limit on the total number of inotify instances has been reached.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enomem
insufficient kernel memory is available.
.sh versions
.br inotify_init ()
first appeared in linux 2.6.13;
library support was added to glibc in version 2.4.
.br inotify_init1 ()
was added in linux 2.6.27;
library support was added to glibc in version 2.9.
.sh conforming to
these system calls are linux-specific.
.sh see also
.br inotify_add_watch (2),
.br inotify_rm_watch (2),
.br inotify (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/system_data_types.7
.\" copyright 1993 mitchum dsouza 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified, PI:EMAIL, 1999-11-08
.\" modified, aeb, 2000-04-07
.\" updated from glibc docs, c. scott ananian, 2001-08-25
.\" modified, aeb, 2001-08-31
.\" modified, wharms 2001-11-12, remark on white space and example
.\"
.th strptime 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
strptime \- convert a string representation of time to a time tm structure
.sh synopsis
.nf
.br "#define _xopen_source" "       /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "char *strptime(const char *restrict " s ", const char *restrict " format ,
.bi "               struct tm *restrict " tm );
.fi
.sh description
the
.br strptime ()
function is the converse of
.br strftime (3);
it converts the character string pointed to by
.i s
to values which are stored in the
"broken-down time"
structure pointed to by
.ir tm ,
using the format specified by
.ir format .
.pp
the broken-down time structure
.i tm
is defined in
.ir 
as follows:
.pp
.in +4n
.ex
struct tm {
    int tm_sec;    /* seconds (0\-60) */
    int tm_min;    /* minutes (0\-59) */
    int tm_hour;   /* hours (0\-23) */
    int tm_mday;   /* day of the month (1\-31) */
    int tm_mon;    /* month (0\-11) */
    int tm_year;   /* year \- 1900 */
    int tm_wday;   /* day of the week (0\-6, sunday = 0) */
    int tm_yday;   /* day in the year (0\-365, 1 jan = 0) */
    int tm_isdst;  /* daylight saving time */
};
.ee
.in
.pp
for more details on the
.i tm
structure, see
.br ctime (3).
.pp
the
.i format
argument
is a character string that consists of field descriptors and text characters,
reminiscent of
.br scanf (3).
each field descriptor consists of a
.b %
character followed by another character that specifies the replacement
for the field descriptor.
all other characters in the
.i format
string must have a matching character in the input string,
except for whitespace, which matches zero or more
whitespace characters in the input string.
there should be white\%space or other alphanumeric characters
between any two field descriptors.
.pp
the
.br strptime ()
function processes the input string from left
to right.
each of the three possible input elements (whitespace,
literal, or format) are handled one after the other.
if the input cannot be matched to the format string, the function stops.
the remainder of the format and input strings are not processed.
.pp
the supported input field descriptors are listed below.
in case a text string (such as the name of a day of the week or a month name)
is to be matched, the comparison is case insensitive.
in case a number is to be matched, leading zeros are
permitted but not required.
.tp
.b %%
the
.b %
character.
.tp
.br %a " or " %a
the name of the day of the week according to the current locale,
in abbreviated form or the full name.
.tp
.br %b " or " %b " or " %h
the month name according to the current locale,
in abbreviated form or the full name.
.tp
.b %c
the date and time representation for the current locale.
.tp
.b %c
the century number (0\(en99).
.tp
.br %d " or " %e
the day of month (1\(en31).
.tp
.b %d
equivalent to
.br %m/%d/%y .
(this is the american style date, very confusing
to non-americans, especially since
.b %d/%m/%y
is widely used in europe.
the iso 8601 standard format is
.br %y\-%m\-%d .)
.tp
.b %h
the hour (0\(en23).
.tp
.b %i
the hour on a 12-hour clock (1\(en12).
.tp
.b %j
the day number in the year (1\(en366).
.tp
.b %m
the month number (1\(en12).
.tp
.b %m
the minute (0\(en59).
.tp
.b %n
arbitrary whitespace.
.tp
.b %p
the locale's equivalent of am or pm.
(note: there may be none.)
.tp
.b %r
the 12-hour clock time (using the locale's am or pm).
in the posix locale equivalent to
.br "%i:%m:%s %p" .
if
.i t_fmt_ampm
is empty in the
.b lc_time
part of the current locale,
then the behavior is undefined.
.tp
.b %r
equivalent to
.br %h:%m .
.tp
.b %s
the second (0\(en60; 60 may occur for leap seconds;
earlier also 61 was allowed).
.tp
.b %t
arbitrary whitespace.
.tp
.b %t
equivalent to
.br %h:%m:%s .
.tp
.b %u
the week number with sunday the first day of the week (0\(en53).
the first sunday of january is the first day of week 1.
.tp
.b %w
the ordinal number of the day of the week (0\(en6), with sunday = 0.
.tp
.b %w
the week number with monday the first day of the week (0\(en53).
the first monday of january is the first day of week 1.
.tp
.b %x
the date, using the locale's date format.
.tp
.b %x
the time, using the locale's time format.
.tp
.b %y
the year within century (0\(en99).
when a century is not otherwise specified, values in the range 69\(en99 refer
to years in the twentieth century (1969\(en1999); values in the
range 00\(en68 refer to years in the twenty-first century (2000\(en2068).
.tp
.b %y
the year, including century (for example, 1991).
.pp
some field descriptors can be modified by the e or o modifier characters
to indicate that an alternative format or specification should be used.
if the
alternative format or specification does not exist in the current locale, the
unmodified field descriptor is used.
.pp
the e modifier specifies that the input string may contain
alternative locale-dependent versions of the date and time representation:
.tp
.b %ec
the locale's alternative date and time representation.
.tp
.b %ec
the name of the base year (period) in the locale's alternative representation.
.tp
.b %ex
the locale's alternative date representation.
.tp
.b %ex
the locale's alternative time representation.
.tp
.b %ey
the offset from