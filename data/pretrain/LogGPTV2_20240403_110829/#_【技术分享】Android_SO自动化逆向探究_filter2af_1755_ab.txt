            'object' : 'jobject',
            'void' : 'void'
    }
然后，写一个Java层方法类型转换成JNI类型的方法，代码如下：
    def get_jnitype(java_type):
        postfix = ''
        jtype = java_type.lower()
        if jtype.endswith('[]'):
            postfix = 'Array'
            jtype = jtype[:-2]
        tp = ''
        if jtype not in jni_types:
            tp = 'jobject'
        else:
            tp = jni_types[jtype] + postfix
        return tp
小小的测试一下：
    def test_jnitype():
        print get_jnitype('int')
        print get_jnitype('Int')
        print get_jnitype('long')
        print get_jnitype('Long')
        print get_jnitype('void')
        print get_jnitype('String')
        print get_jnitype('String[]')
        print get_jnitype('boolean')
        print get_jnitype('ArrayList')
        print get_jnitype('Object[]')
        print get_jnitype('byte[]')
        print get_jnitype('FileEntry')
输出如下：
    jint
    jint
    jlong
    jlong
    void
    jstring
    jstringArray
    jboolean
    jobject
    jobjectArray
    jbyteArray
    jobject
稳！单个方法的签名解析没问题了，那将整个方法的类型转化为JNI接受的类型也没多大问题，代码如下：
    def get_args_type(java_args):
        if len(java_args) == 0:
            return 'JNIEnv* env, jobject thiz'
        jargs = java_args.lower()
        args = jargs.split(', ')
        #print 'arg count:', len(args)
        full_arg = 'JNIEnv* env, jobject thiz, '
        i = 1
        for java_arg in args:
            java_type = java_arg.split(' ')[0]
            full_arg += get_jnitype(java_type)
            full_arg += ' arg'
            full_arg += str(i)
            full_arg += ', '
            i += 1
        return full_arg[:-2]
最后是编写get_jni_sig方法，实现一个Java的native方法签名转成IDA Pro能接受的签名信息。具体看代码，这里就不占篇幅了。
**自动化设置方法信息**
前两步没问题，到这里问题就不大了。下面是写IDAPython代码，来完成一个jni_helper.py脚本工具。
首先是IDA Pro分析SO时候，并不会自动的导入 **JNINativeInterface** 与 **JNIInvokeInterface**
结构体信息。这就需要自己来完成了。
**JNINativeInterface** 的方法字段忒多，我不打算自己手写，容易出错还效率低下。我使用IDA Pro的导出功能，点击菜单 **File->Produce File->DUMP typeinfo to IDC file…**，然后一个idc文件，然后复制IDC中的内容，简单修改就完成了
**add_jni_struct()** 方法，代码如下：
    def add_jni_struct():
        if BADADDR == GetStrucIdByName("JNINativeInterface"):
            AddStrucEx(-1, "JNINativeInterface", 0)
            id = GetStrucIdByName("JNINativeInterface")
            AddStrucMember(id, "reserved0", 0, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "reserved1", 0X4, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            ......
            AddStrucMember(id, "GetDirectBufferAddress", 0X398, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "GetDirectBufferCapacity", 0X39C, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            #SetStrucAlign(id, 2)
            idc.Eval('SetStrucAlign({}, 2);'.format(id))
        if BADADDR == GetStrucIdByName("JNIInvokeInterface"):
            AddStrucEx(-1, "JNIInvokeInterface", 0)
            id = GetStrucIdByName("JNIInvokeInterface")
            AddStrucMember(id, "reserved0", 0, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "reserved1", 0X4, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "reserved2", 0X8, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "DestroyJavaVM", 0XC, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "AttachCurrentThread", 0X10, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "DetachCurrentThread", 0X14, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "GetEnv", 0X18, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            AddStrucMember(id, "AttachCurrentThreadAsDaemon", 0X1C, 0x25500400, 0XFFFFFFFF, 4, 0XFFFFFFFF, 0, 0x000002)
            #SetStrucAlign(id, 2)
            idc.Eval('SetStrucAlign({}, 2);'.format(id))
            # idaapi.run_statements('auto id; id = GetStrucIdByName("JNIInvokeInterface"); SetStrucAlign(id, 2);')
比较有趣的是，在IDC中有这么一句：
    SetStrucAlign(id, 2)
这个 **SetStrucAlign()** 方法在IDAPython中并没有，要想调用它，可以使用如下方法：
    idc.Eval('SetStrucAlign({}, 2);'.format(id))
导入完成后，下一步的工作是获取SO中所有的 **Java_com_xxx_yyy()** 类型的方法信息，这个好办，代码如下：
    addr = get_code_seg()
    symbols = []
    for funcea in Functions(SegStart(addr)):
        functionName = GetFunctionName(funcea)
        symbols.append((functionName, funcea))
symbols现在存放了所有的方法，只需要判断是否以“ **Java_** ”开头就能区分native方法了。
接着是读取前面生成的方法签名文件，读取它的所有方法签名信息，这里我使用如下方法：
    sig_file = AskFile(0, '*.*', 'open sig file')
**AskFile()** 方法会弹出一个文件选择框来让用户选择生成的文件，我觉得这种交互比直接写死文件路径要优雅，虽然这里会让你参与进来，可能会使你烦燥。
我们传入获取到的第一条Java方法签名给上一步的 **get_jni_sig()** 方法，来生成对应的JNI方法签名。最后，调用
**SetType()** 来设置它的方法签名信息。
至此，所有的工作都完成了。完整的工程见： 。