```  
The frontend must now initiate a SASL negotiation, using the SASL mechanism specified in the message.   
The frontend will send a PasswordMessage with the first part of the SASL data stream in response to this.   
If further messages are needed, the server will respond with AuthenticationSASLContinue.  
```  
AuthenticationSASLContinue  
```  
This message contains the response data from the previous step of SASL negotiation   
(AuthenticationSASL, or a previous AuthenticationSASLContinue).   
If the SASL data in this message indicates more data is needed to complete the authentication, the frontend must send that data as another PasswordMessage.   
If SASL authentication is completed by this message, the server will next send AuthenticationOk to indicate successful authentication or ErrorResponse to indicate failure.  
```  
报文如下  
https://www.postgresql.org/docs/devel/static/protocol-message-formats.html  
```  
AuthenticationSASL (B)  
Byte1('R')  
Identifies the message as an authentication request.  
Int32  
Length of message contents in bytes, including self.  
Int32(10)  
Specifies that SASL authentication is started.  
String  
Name of a SASL authentication mechanism.  
AuthenticationSASLContinue (B)  
Byte1('R')  
Identifies the message as an authentication request.  
Int32  
Length of message contents in bytes, including self.  
Int32(11)  
Specifies that this message contains SASL-mechanism specific data.  
Byten  
SASL data, specific to the SASL mechanism being used.  
```  
## postgresql.conf 配置  
默认依旧是md5封装  
```  
#password_encryption = md5     # md5, scram or plain  
```  
## 测试  
wget https://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2  
安装略  
修改配置  
```  
vi postgresql.conf  
port=1922  
unix_socket_directories = '.'  
log_destination = 'csvlog'  
#password_encryption = md5              # md5, scram or plain  
```  
修改认证方式为scram  
```  
vi pg_hba.conf  
host    all             all             127.0.0.1/32            scram  
```  
创建md5秘钥存储用户  
```  
psql -h $PGDATA -p 1922 -U postgres postgres  
postgres=# create role digoal01 encrypted password 'digoal' login;  
CREATE ROLE  
```  
创建scram秘钥存储用户  
```  
postgres=# set password_encryption =scram;  
SET  
postgres=# create role digoal02 encrypted password 'digoal' login;  
CREATE ROLE  
```  
查看md5和scram存储的区别  
```  
postgres=# select rolname,rolpassword from pg_authid;  
      rolname      |                                                                              rolpassword     
-------------------+-----------------------------------------------------------------------------------------------  
 digoal01          | md59f88b70376618eb719e58f630eee13ad  
 digoal02          | scram-sha-256:wEroBV0GNfOIZw==:4096:6149c711825bfc6b0c0e61f3cee1341b8eeab770f784fe670af133a70d6a7cdf:1ca9859b95eb138c0606bfb59414e70eec83a3d05ef3c9bfa7e76353e9032e52  
```  
scram认证测试  
```  
  -> psql -h 127.0.0.1 -p 1922 -U digoal01 postgres  
Password for user digoal01:   
psql: error received from server in SASL exchange: invalid-proof  
  -> psql -h 127.0.0.1 -p 1922 -U digoal02 postgres  
Password for user digoal02:   
psql (10devel)  
Type "help" for help.  
postgres=>   
```  
恢复为md5认证  
```  
vi pg_hba.conf  
host    all             all             127.0.0.1/32            md5  
pg_ctl reload  
  -> psql -h 127.0.0.1 -p 1922 -U digoal01 postgres  
Password for user digoal01:   
psql (10devel)  
Type "help" for help.  
postgres=> \q  
  -> psql -h 127.0.0.1 -p 1922 -U digoal02 postgres  
Password for user digoal02:   
psql: FATAL:  password authentication failed for user "digoal02"  
```  
这个patch的讨论，详见邮件组，本文末尾URL。  
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。    
## 小结  
1\. PostgreSQL模块化的认证方法，给PostgreSQL的安全加固提供了很好的便利。  
2\. SCRAM相比MD5，可以避免因为数据库存储的加密秘钥都是，客户端可以篡改认证协议连接数据库的危险。  
3\. scram认证方法和md5认证方法是不兼容的，二者选一，旧的客户端不支持scram认证。  
4\. PostgreSQL 10.0 通过扩展认证协议，引入了一个全新的通用SASL认证方法，目前基于SASL，已加入SCRAM-SHA-256算法的支持，未来可以支持更多的算法。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")