Online Memory Leak Detection in the
Cloud-based Infrastructures
Anshul Jindal1[0000−0002−7773−5342], Paul Staab2, Jorge
Cardoso2[0000−0001−8992−3466], Michael Gerndt1[0000−0002−3210−5048], and
Vladimir Podolskiy1[0000−0002−2775−3630]
1 Chair of Computer Architecture and Parallel Systems,
Technical University of Munich, Garching, Germany
PI:EMAIL, PI:EMAIL, PI:EMAIL
2 Huawei Munich Research Center, Huawei Technologies Munich,Germany
{paul.staab, jorge.cardoso}@huawei.com
Abstract. A memory leak in an application deployed on the cloud can
affect the availability and reliability of the application. Therefore, to
identifyandultimatelyresolveitquicklyishighlyimportant.However,in
theproductionenvironmentrunningonthecloud,memoryleakdetection
is a challenge without the knowledge of the application or its internal
object allocation details.
Thispaperaddressesthischallengeofonlinedetectionofmemoryleaksin
cloud-basedinfrastructurewithouthavinganyinternalapplicationknowl-
edge by introducing a novel machine learning based algorithm Precog.
Thisalgorithmsolelyusesonemetrici.ethesystem’smemoryutilization
onwhichtheapplicationisdeployedforthedetectionofamemoryleak.
The developed algorithm’s accuracy was tested on 60 virtual machines
manuallylabeledmemoryutilizationdataprovidedbyourindustrypart-
nerHuaweiMunichResearchCenteranditwasfoundthattheproposed
algorithmachievestheaccuracyscoreof85%withlessthanhalfasecond
prediction time per virtual machine.
Keywords: memoryleak·onlinememoryleakdetection·memoryleak
patterns · cloud· linear regression
1 Introduction
Cloud computing is widely used in the industries for its capability to provide
cheapandon-demandaccesstocomputeandstorageresources.Physicalservers
resources located at different data centers are split among the virtual machines
(VMs) hosted on it and distributed to the users [5]. Users can then deploy their
applications on these VMs with only the required resources. This allows the
efficient usage of the physical hardware and reducing the overall cost. However,
withalltheadvantagesofcloudcomputingthereexiststhedrawbackofdetecting
a fault or an error in an application or in a VM efficiently due to the layered
virtualisationstack[1,4].Asmallfaultsomewhereinthesystemcanimpactthe
performance of the application.
2 Jindal et al.
An application when deployed on a VM usually requires different system re-
sources such as memory, CPU and network for the completion of a task. If an
application is mostly using the memory for the processing of the tasks then this
applicationiscalledamemory-intensiveapplication[8].Itistheresponsibilityof
the application to release the system resources when they are no longer needed.
When such an application fails to release the memory resources, a memory
leak occurs in the application [14]. Memory leak issues in the application can
cause continuous blocking of the VM’s resources which may in turn result in
slower response times or application failure. In software industry, memory leaks
aretreatedwithutmostseriousnessandpriorityastheimpactofamemoryleak
could be catastrophic to the whole system. In the development environment,
theseissuesarerathereasilydetectablewiththehelpofstaticsourcecodeanal-
ysis tools or by analyzing the heap dumps. But in the production environment
running on the cloud, memory leak detection is a challenge and it only gets
detected when there is an abnormality in the run time, abnormal usage of the
system resources, crash of the application or restart of the VM. Then the reso-
lution of such an issue is done at the cost of compromising the availability and
reliability of the application. Therefore it is necessary to monitor every applica-
tion for memory leak and have an automatic detection mechanism for memory
leak before it actually occurs. However, it is a challenge to detect memory leak
of an application running on a VM in the cloud without the knowledge of the
programming language of the application, nor the knowledge of source code nor
the low level details such as allocation times of objects, object staleness, or the
object references [10]. Due to the low down time requirements for the appli-
cations running on the cloud, detection of issues and their resolutions is to be
done as quickly as possible. Therefore, this challenge is addressed in this paper
by solely using the VM’s memory utilization as the main metric and devising a
novel algorithm called Precog to detect memory leak.
The main contribution of this paper are as follows:
– Algorithm: We propose an online novel machine learning based algorithm
Precog for accurate and efficient detection of memory leaks by solely using
the VM’s memory utilization as the main metric.
– Effectiveness: Our proposed algorithm achieves the accuracy score of 85%
on the evaluated dataset provided by our industry partner and accuracy
score of above 90% on the synthetic data generated by us.
– Scalability:Precog’spredictfunctionalityislinearlyscalablewiththenum-
ber of values and takes less than a second for predicting in a timeseries with
100,000 values.
Reproducibility: our code and synthetic generated data are publicly available
at: https://github.com/ansjin/memory leak detection.
2 Related Work
Memoryleakdetectionhasbeenstudiedovertheyearsandseveralsolutionshave
been proposed. Sor et al. reviewed different memory leak detection approaches
Online Memory Leak Detection in the Cloud-based Infrastructures 3
based on their implementation complexity, measured metrics, and intrusiveness
and a classification taxonomy was proposed [11]. The classification taxonomy
broadly divided the detection algorithms into (1) Online detection, (2) Offline
detection and (3) Hybrid detection. The online detection category uses either
staleness measure of the allocated objects or their growth analysis. Offline de-
tection category includes the algorithms that make use of captured states i.e
heap dumps or use a visualization mechanism to manually detect memory leaks
or use static source code analysis. Hybrid detection category methods combine
the features offered by online and offline methods to detect memory leaks. Our
work falls in the category of online detection therefore, we now restrict our dis-
cussion to the approaches related to the online detection category only.
Based on the staleness measure of allocated objects, Rudaf et al. proposed
”LeakSpot”fordetectingmemoryleaksinwebapplications[9].ItlocatesJavaScript
allocation and reference sites that produce and retain increasing numbers of
objects over time and uses staleness as a heuristic to identify memory leaks.
Vladimir Sˇor et al. proposes a statistical metric called genCount for memory
leak detection in Java applications [12]. It uses the number of different gener-
ations of the objects grouped by their allocation sites, to abstract the object
staleness - an important attribute indicating a memory leak. Vilk et al. pro-
posed a browser leak debugger for automatically debugging memory leaks in
webapplicationscalledas”BLeak”[13].Itcollectsheapsnapshotsandanalyzes
these snapshots over time to identify and rank leaks. BLeak targets application
source code when detecting memory leaks.
Based on the growth analysis objects, Jump et al. proposes ”Cork” which
finds the growth of heap data structure via a directed graph Type Points-From
Graph - TPFG, a data structure which describes an object and its outgoing
reference [6]. To find memory leaks, TPFG’s growth is analyzed over time in
terms of growing types such as a list. FindLeaks proposed by Chen et al. tracks
object creation and destruction and if more objects are created than destroyed
per class then the memory leak is found [2]. Nick Mitchell and Gary Sevitsky
proposed ”LeakBot”, which looks for heap size growth patterns in the heap
graphs of Java applications to find memory leaks [7]. ”LEAKPOINT” proposed
byClauseetal.usesdynamictaintingtotrackheapmemorypointersandfurther
analyze it to detect memory leaks [3].
Most of the online detection algorithms that are proposed focus either on
the programming language of the running application or on garbage collection
strategies or the internals of the application based on the object’s allocation,
references, and deallocation. To the best of our knowledge, there is no previous
workthatsolelyfocusesonthedetectionofmemoryleaksusingjustthesystem’s
memory utilization data on which application is deployed. The work in this
paper, therefore, focuses on the detection of a memory leak pattern irrespective
oftheprogramminglanguageoftheapplicationortheknowledgeofapplication’s
source code or the low-level details such as allocation times of objects, object
staleness, or the object references.
4 Jindal et al.
Table 1: Symbols and definitions.
Symbol Interpretation
t a timestamp
x the percentage utilization of a resource (for example memory
t
or disk usage) of a virtual machine at time t
N Number of data points
x={x ,x ,...,x } a VM’s memory utilization observations from the Cloud
1 2 N
T time series window length
x a sequence of observations {x ,x ,...,x } from
t−T:t t−T t−T+1 t
time t−T to t
U percentage memory utilization threshold equal to 100.
C critical time
3 Methodology for Memory Leak Detection
In this section, we present the problem statement of memory leak detection and
describes our proposed algorithm’s workflow for solving it.
3.1 Problem Statement
Table 1 shows the symbols used in this paper.
We are given x = {x ,x ,...,x }, an N1 dataset representing the memory
1 2 N
utilization observations of the VM and an observation x ∈R is the percentage
t
memory utilization of a virtual machine at time t. The objective of this work
is to determine whether or not there is a memory leak on a VM such that an
observation x at time t reaches the threshold U memory utilization following a
t
trend in the defined critical time C. Formally:
Problem 1. (Memory Leak Detection)
– Given: a univariate dataset of N time ticks, x={x ,x ,...,x }, represent-
1 2 N
ing the memory utilization observations of the VM.
– Output: an anomalous window for a VM consisting of a sequence of obser-
vations x such that these observations after following a certain trend
t−T:t
will reach the threshold U memory utilization at time t+M where M ≤C.
Definition 1. (Critical Time) It is the maximum time considered relevant for
reporting a memory leak in which if the trend line of memory utilization of VM
is projected, it will reach the threshold U.
3.2 Illustrative Example
Fig. 1 shows the example memory utilization of a memory leaking VM with
the marked anomalous window between t and t . It shows that the memory
k n
utilization of the VM will reach the defined threshold (U = 100%) within the
Online Memory Leak Detection in the Cloud-based Infrastructures 5
Fig.1:ExamplememoryutilizationofamemoryleakingVMwiththemarkedanoma-
lous window.
defined critical time C by following a linearly increasing trend (shown by the
trend line) from the observations in the anomalous window. Therefore, this VM
is regarded as a memory leaking VM.
Our developed approach can be applied for multiple VMs as well. We also
have conducted an experiment to understand the memory usage patterns of
memory leak applications. We found that, if an application has a memory leak,
usuallythememoryusageoftheVMonwhichitisrunningincreasessteadily.It
continuestodosountilalltheavailablememoryofthesystemisexhausted.This
usually causes the application attempting to allocate the memory to terminate
itself. Thus, usually a memory leak behaviour exhibits a linearly increasing or
”sawtooth” memory utilization pattern.
3.3 Memory Leak Detection Algorithm: Precog
The Precog algorithm consists of two phases: offline training and online detec-
tion. Fig. 2 shows the overall workflow of the Precog algorithm.
Offline training:Theprocedurestartsbycollectingthememoryutilization
dataofaVMandpassingittoDataPre-processing module,wherethedatasetis
firsttransformedbyresamplingthenumberofobservationstooneeverydefined
resampling time resolution and then the time series data is median smoothed
over the specified smoothing window. In Trend Lines Fitting module, firstly, on
the whole dataset, the change points P ={P ,P ,...,P }, where k ≤n−1, are
1 2 k
detected. By default, two change points one at the beginning and other at the
end of time series data are added. If the change points are not detected, then
the algorithm will have to go though each data point and it will be compute
intensive, therefore these points allows the algorithm to directly jump from one
change point to another and selecting all the points in between the two change
points. Trend Lines Fitting module selects a sequence of observations x
t−L:t
between the two change points: one fixed P and other variable P where r ≤k
1 r
andalineisfittedonthemusingthelinearregression.TheR-squaredscore,size
of the window called as duration, time to reach threshold called exit time and
6 Jindal et al.
Fig.2: Overall workflow of Precog algorithm.
slope of line are calculated. This procedure is repeated with keeping the fixed
change point the same and varying the other for all other change points. Out of
all the fitted lines, the best-fitted line based on the largest duration and highest
slopeisselectedforthefixedchangepoint.Ifthisbest-fittedlines’timetoreach
threshold falls below the critical time then its slope and duration are saved as
historic trends.
This above procedure is again repeated by changing the fixed change point
to all the other change points. At the end of this whole procedure, we get for
each change point, a best-fitted trend if it exists. Amongst the captured trends,
maximumdurationandthemaximumslopeofthetrendsarealsocalculatedand
saved. This training procedure can be conducted routinely, e.g., once per day or
week. The method’s pseudocode is shown in the algorithm’s 1 Train function.
Online detection: In the Online Detection phase, for a new set of observa-
tions{x ,x +1,x +2,...,x +t−1x +t}fromtimek totwheret−k ≥P
k k k k k min
belongingtoaVMafterpre-processingisfedintotheTrend Lines Fitting mod-
ule. In Trend Lines Fitting module, the change points are detected. A sequence
of observations x between the last two change points starting from the end
t−L:t
ofthetimeseriesareselectedandalineisfittedonthemusingthelinearregres-
sion. The R-squared score, slope, duration and exit time to reach threshold of
the fitted line is calculated. If its slope and duration are greater than the saved
maximumcounterpartsthenthatwindowismarkedanomalous.Otherwise,the
valuesarecomparedagainstallthefoundtrainingtrendsandiffitted-line’sslope
and duration are found to be greater than any of the saved trend then, again