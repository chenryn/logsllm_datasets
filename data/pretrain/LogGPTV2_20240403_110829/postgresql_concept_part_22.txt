198 CHAPTER17. PROGRAMMINGINTERFACES
#!/usr/local/bin/perl
#
# Perl sample program
#
use Pg; # load database routines
$conn = Pg::connectdb("dbname=test"); # connect to the database
# did the database connection fail?
die $conn->errorMessage unless PGRES_CONNECTION_OK eq $conn->status;
print "Enter a state code: "; # prompt user for a state code
$state_code = ;
chomp $state_code;
$result = $conn->exec( # send the query
"SELECT name \
FROM statename \
WHERE code = ’$state_code’");
# did the query fail?
die $conn->errorMessage unless PGRES_TUPLES_OK eq $result->resultStatus;
while (@row = $result->fetchrow) { # loop through all rows returned
print @row, "\n"; # print the value returned
}
Figure17.9: Perlsampleprogram
• Nocompilationrequired
• Morepowerfulcommands
• Automaticcreationofvariables
• Variablesthatcanholdanytypeofdata
17.10 Perl
Figure17.9showsourstatecodeapplicationinPerl. Perlisagoodchoiceforwritingscriptsand
smallapplications. ItispopularforprocessingtextfilesandgeneratingdynamicWebpagesusing
CGI(CommonGatewayInterface). APerl/DBIinterfaceisalsoavailable.
17.11. TCL/TK(PGTCLSH/PGTKSH) 199
#!/usr/local/pgsql/bin/pgtclsh
#
# pgtclsh sample program
#
set conn [pg_connect test] ;# connect to the database
puts -nonewline "Enter a state code: " ;# prompt user for a state code
flush stdout
gets stdin state_code
;# send the query
set res [pg_exec $conn \
"SELECT name \
FROM statename \
WHERE code = ’$state_code’"]
set ntups [pg_result $res -numTuples]
for {set i 0} {$i . Bycontrast,PHPcodebeginswith. The PHP interfacedoes not ship with POSTGRESQL, but can be downloadedfrom
http://www.php.net.
17.14 Installing Scripting Languages
Theinterpretedlanguagesdescribedinthischapterallrequireadatabaseinterfacetobeinstalled
intothelanguage. Thistaskisdonebyeitherrecompilingthelanguageordynamicallyloadingthe
interfaceintothelanguage. Thefollowinglistgivesdetailsabouteachinterface:
Perl UseloadsthePOSTGRESQLinterfaceintothePerlinterpreter.
TCL/TK TCL/TKoffersthreeinterfaceoptions:
17.15. SUMMARY 201
/pg/sample2.phtml?state_code" method="POST">
Client Number:
"
maxlength=2 size=2>
Figure17.12: PHPsampleprogram—input
• AprebuiltTCLinterpretercalledpgtclsh
• AprebuiltTCL/TKinterpretercalledpgtksh,likeTCL/TK’swish
• Aloadablelibrarycalledlibpgtcl
Python ImportloadsthePOSTGRESQLinterfaceintothePythoninterpreter.
PHP PHPmustberecompiledtoaccessPOSTGRESQL.
17.15 Summary
Allinterfacesourcecodeislocatedinpgsql/src/interfaces. Eachinterfaceincludessamplesource
codeforuseinwritingyourownprograms.
These interfaces allow the creation of professional databaseapplications. Each interface has
certain advantages. Some are easier, some are faster, some are more popular, and some work
betterincertainenvironments. Choosinganinterfaceisoftenadifficulttask. Theinformationin
thischaptershouldmakethatchoiceeasier.
202 CHAPTER17. PROGRAMMINGINTERFACES
";
}
?>
Figure17.13: PHPsampleprogram—output
Chapter 18
Functions and Triggers
Chapter17focusedonclient-sideprogramming—programsthatrunontheuser’scomputerandin-
teractwiththePOSTGRESQLdatabase. Server-sidefunctions,sometimescalledstoredprocedures,
runinsidethedatabaseserverratherthanintheclientapplication.
Severalgood usesfor server-sidefunctionsexist. For example,ifafunctionisusedbymany
applications, it can be embedded into the database server. With this approach, each application
no longer needs a copy of the function. Whenever the function is needed, the client can simply
callit. Unlikeclient-sidefunctions, server-sidefunctionscanbecalledwithin SQLqueries. Also,
functionscentrallyinstalledintheserverareeasilymodified. Whenafunctionischanged,allclient
applicationsimmediatelystartusingthenewversion.
Table9.3onpage113listsmanypreinstalledserver-sidefunctions,likeupper()anddate_part().
Thischaptershowshowtocreateyourownfunctions. Italsocoversspecialserver-sidefunctions
calledtriggers,whicharecalledautomaticallywhenatableismodified.
18.1 Functions
Server-sidefunctionscanbewritteninseverallanguages:
• SQL
• PL/PGSQL
• PL/TCL
• PL/Perl
• C
SQL and PL/PGSQL functions are covered in this chapter. C functions are more complex and are
coveredinChapter19.
203
204 CHAPTER18. FUNCTIONSANDTRIGGERS
test=> CREATE FUNCTION ftoc(float)
test-> RETURNS float
test-> AS ’SELECT ($1 - 32.0) * 5.0 / 9.0;’
test-> LANGUAGE ’sql’;
CREATE
test=> SELECT ftoc(68);
ftoc
------
20
(1 row)
Figure18.1: SQLftocfunction
18.2 SQL Functions
SQL functions allow you to name queries and store them in the database for later access. This
sectiondescribesavarietyof SQLfunctionsofincreasingcomplexity.
FunctionsarecreatedwiththeCREATEFUNCTIONcommandandremovedwithDROPFUNCTION.
CREATEFUNCTIONrequiresthefollowinginformation:
• Functionname
• Numberoffunctionarguments
• Datatypeofeachargument
• Functionreturntype
• Functionaction
• Languageusedbythefunctionaction
Figure18.1showsthecreationofasimpleSQLfunctiontoconvertatemperaturefromFahrenheit
tocentigradedegrees. ItsuppliesthefollowinginformationtoCREATEFUNCTION:
• Functionnameisftoc
• Functiontakesoneargumentoftypefloat
• Functionreturnsafloat
• FunctionactionisSELECT($1-32.0)*5.0/9.0;
• FunctionlanguageisSQL
18.2. SQLFUNCTIONS 205
test=> CREATE FUNCTION tax(numeric)
test-> RETURNS numeric
test-> AS ’SELECT ($1 * 0.06::numeric(8,2))::numeric(8,2);’
test-> LANGUAGE ’sql’;
CREATE
test=> SELECT tax(100);
tax
------
6.00
(1 row)
Figure18.2: SQLtaxfunction
Although most functions return only one value, SQL functions can return multiple values using
SETOF. Function actions can also contain INSERTs, UPDATEs, and DELETEs as well as multiple
queriesseparatedbysemicolons.
The function action in ftoc() uses SELECT to perform a computation. It does not access any
tables. The$1intheSELECTisautomaticallyreplacedbythefirstargumentofthefunctioncall. If
asecondargumentwerepresent,itwouldberepresentedas$2.
WhenthequerySELECT ftoc(68) isexecuted,itcallsftoc(). Thisfunctionreplaces$1with68
and then makes the computation. In a sense, it executes a SELECT inside a SELECT. The outer
SELECTcallsftoc(),andftoc()usesitsownSELECTtoperformthecomputation.
Constantsinthefunctioncontaindecimalpoints,sofloating-pointcomputationsareperformed.
Without them, division would be performed using integers. For example, the query SELECT 1/4
returns0,whereasSELECT 1.0/4.0returns0.25.
Figure 18.2 shows an SQL server-side function to compute a tax. The casts to NUMERIC(8,2)
arerequiredbecausetheresultof thecomputation mustberoundedto twodecimalplaces. This
functionusesthemorecompactdouble-colonformof typecasting,ratherthanCAST. Section 9.3
provides more information about type casting. SELECT tax(100) performs a simple computation,
similartoftoc().
Onepowerfuluseof server-sidefunctionsistheirusein SQL queries. Figure 18.3 showsthe
useoftax()withtheparttablefromFigure6.3. Inthisfigure,threerowsareinsertedintothetable,
thenaSELECTdisplayscolumnsfromtheparttablewithadditionalcomputedcolumnsshowingthe
taxandthecostplustax.
Figure 18.4 shows a more complex function that computes shippingcharges. This function
usesCASEtocomputeshippingchargesbasedonweight. Itcallsshipping()togenerateadetailed
analysisofthetaxandshippingchargesassociatedwitheachpart. Itprintsthepartnumber,name,
cost,tax,subtotalofcostplustax,shippingcharge,andtotalofcost,tax,andshippingcharge. The
SELECTusestrim()toremovetrailingspacesandnarrowthedisplayedresult.
206 CHAPTER18. FUNCTIONSANDTRIGGERS
test=> CREATE TABLE part (
test(> part_id INTEGER,
test(> name CHAR(30),
test(> cost NUMERIC(8,2),
test(> weight FLOAT
test(> );
CREATE
test=> INSERT INTO part VALUES (637, ’cable’, 14.29, 5);
INSERT 20867 1
test=> INSERT INTO part VALUES (638, ’sticker’, 0.84, 1);
INSERT 20868 1
test=> INSERT INTO part VALUES (639, ’bulb’, 3.68, 3);
INSERT 20869 1
test=> SELECT part_id,
test-> name,
test-> cost,
test-> tax(cost),
test-> cost + tax(cost) AS total
test-> FROM part
test-> ORDER BY part_id;
part_id | name | cost | tax | total
---------+--------------------------------+-------+------+-------
637 | cable | 14.29 | 0.86 | 15.15
638 | sticker | 0.84 | 0.05 | 0.89
639 | bulb | 3.68 | 0.22 | 3.90
(3 rows)
Figure18.3: Recreationoftheparttable
18.2. SQLFUNCTIONS 207
test=> CREATE FUNCTION shipping(numeric)
test-> RETURNS numeric
test-> AS ’SELECT CASE
test’> WHEN $1  WHEN $1 >= 2 AND $1  WHEN $1 >= 4 THEN CAST(6.00 AS numeric(8,2))
test’> END;’
test-> LANGUAGE ’sql’;
CREATE
test=> SELECT part_id,
test-> trim(name) AS name,
test-> cost,
test-> tax(cost),
test-> cost + tax(cost) AS subtotal,
test-> shipping(weight),
test-> cost + tax(cost) + shipping(weight) AS total
test-> FROM part
test-> ORDER BY part_id;
part_id | name | cost | tax | subtotal | shipping | total
---------+---------+-------+------+----------+----------+-------
637 | cable | 14.29 | 0.86 | 15.15 | 6.00 | 21.15
638 | sticker | 0.84 | 0.05 | 0.89 | 3.00 | 3.89
639 | bulb | 3.68 | 0.22 | 3.90 | 5.00 | 8.90
(3 rows)
Figure18.4: SQLshippingfunction
208 CHAPTER18. FUNCTIONSANDTRIGGERS
test=> CREATE FUNCTION getstatename(text)
test-> RETURNS text
test-> AS ’SELECT CAST(name AS TEXT)
test-> FROM statename
test-> WHERE code = $1;’
test-> LANGUAGE ’sql’;
CREATE