### 优化后的文本

#### 1. 数据集与评估结果
以下是数据集 `Dataset_ROM_GT` 和 `Dataset_Apps` 上 BSCOUT 工具的有效性结果。表中的数字表示总测试时间和平均测试时间。

| 序号 | 总测试时间 (s) | 平均测试时间 (s) |
|------|-----------------|------------------|
| 1    | 8.39            | 0.342            |
| 2    | 4.70            | 0.19             |
| 3    | 1.08            | 0.04             |
| 4    | 6.83            | 0.22             |
| 5    | 9.01            | 0.18             |
| 6    | 3.34            | 0.10             |
| 7    | 1.53            | 0.17             |
| 8    | 7.17            | 0.24             |
| 9    | 6.33            | 0.23             |
| 10   | 7.72            | 0.29             |
| 11   | 4.53            | 0.13             |
| 12   | 6.91            | 0.21             |
| 13   | 9.37            | 0.16             |
| 14   | 5.44            | 0.15             |
| 15   | 3.78            | 0.13             |

例如，8.39 表示总测试时间，而 0.342 表示平均测试时间。

#### 2. 有效性结果
以下是 BSCOUT 在 `Dataset_ROM_GT` 和 `Dataset_Apps` 上的详细结果。

| 工具       | TP | TN | FN | FP | 准确率 (Acc.) | FPR |
|------------|----|----|----|----|---------------|-----|
| BSCOUT     | 0  | 100% | 291 | 410 | 0             | 100.0% | 0.0% |
| BSCOUT*    | 266 | 177 | 31 | 0  | 93.5%         | 286 | 410 | 5  | 297 | 177 | 0  | 100.0% | 96.9% | 0.0% |

#### 3. 实验设置
为了构建地面真实情况，我们从 F-Droid 下载了 4,561 个开源 Android 应用程序，并通过解析 Gradle 构建文件识别每个应用程序使用的库。然后，我们查询 NVD 收集这些库的所有已报告漏洞，并随机选择了影响 11 个库的 15 个 CVE。我们进一步发现这些库被包含在 261 个应用程序中，其中 123 个应用程序可以在 Google Play 中找到，81 个应用程序启用了 ProGuard。类似地，我们收集了 12 个服务器应用程序和 16 个桌面应用程序进行实验，发现它们包含了受 29 个 CVE 影响的 12 个 Java 库。我们将这 289 个应用程序标记为 `Dataset_Apps`。对于每个 CVE，我们手动标记这些应用程序的修补状态。总共，我们为 Android 应用程序和桌面/服务器应用程序分别构建了 364 和 337 个 App-CVE 对作为地面真实情况。

#### 4. 版本锁定工具的结果
版本锁定工具可以从未知目标中定位最相似的可执行文件。尽管这些工具不直接测试补丁存在，但我们使用 OSSPolice 和 LibScout 进行实验以评估其在补丁存在测试中的效果。

| 工具       | 无法给出结果 | 数量 | 比例 | 可以给出结果 | TP | TN | FP | FN | 准确率 (Acc.) | FPR |
|------------|--------------|------|------|--------------|----|----|----|----|---------------|-----|
| LibScout   | 455          | 5    | 96.0% | 1.1%         | 12 | 1  | 69 | 168 | 0             | 6   | 6   | 68.4% | 0%  | 226 | 50.5% | 3.5% |
| OSSPolice | 5            |      | 5    |              |    |    |    |    |               |     |     |       |     |     |       |     |

#### 5. 函数级相似性测试的结果
函数级相似性测试常用于定位易受攻击的函数克隆。我们使用 centroid 算法来测量函数级相似性，并通过调整相似性阈值来评估其在补丁存在测试中的效果。

| 相似性阈值 | 可以给出结果的比例 | 可以给出正确结果的比例 |
|------------|--------------------|-----------------------|
| 0.00       | 82%                | 不显著增加           |
| 0.05       |                   |                       |
| 0.10       |                   |                       |
| 0.15       |                   |                       |
| 0.20       |                   |                       |

#### 6. 经验研究
为了了解现实世界中的补丁应用实践，我们在 150 个 Android 框架 CVE 和来自 7 家厂商（Google、Samsung、Meizu、Xiaomi、Oppo、Vivo 和 Huawei）的 2,506 个 ROM 上进行了大规模研究。我们标记这个数据集为 `Dataset_ROM_Large`。

| 厂商       | 手机型号 | 构建时间 | 数量 | 版本 |
|------------|----------|----------|------|------|
| Google     | 14       | 569      | 4.4.4-8.1.0 | 2014.06-2019.05 |
| Samsung    | 24       | 468      | 5.0.0-8.1.0 | 2016.10-2018.09 |
| Meizu      | 44       | 481      | 5.0.1-8.1.0 | 2015.06-2019.07 |
| Xiaomi     | 45       | 464      | 4.4.4-8.1.0 | 2016.02-2019.08 |
| Oppo       | 31       | 281      | 4.4.4-8.1.0 | 2014.11-2019.08 |
| Vivo       | 46       | 152      | 5.0.2-8.1.0 | 2015.11-2019.05 |
| Huawei     | 31       | 91       | 6.0.0-7.0.0 | 2016.01-2017.10 |

**RQ1：漏洞的严重程度是否影响其补丁应用状态？**
我们发现最严重的 CVE 并没有最低的未修补比率。通过对不同 CVSS 分数下的未修补比率进行 t-test 检验，我们发现除了 CVSS 分数为 10 的 CVE 外，其他 CVE 的未修补比率分布没有显著差异。这表明开发者可能并未完全意识到漏洞的严重性，或者漏洞严重性尚未成为评估补丁必要性的良好指标。

希望这些改进使文档更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！