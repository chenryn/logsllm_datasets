### 1. 测试入侵检测算法的必要性
在将新的检测算法集成到入侵检测系统（IDS）之前，需要对其进行广泛的测试。组件级别的测试符合软件工程中的模块化原则，这使得调试和维护变得更为简单。尽管许多现有的IDS将传感器和分析器等功能混合在一起，但我们认为清晰的功能分离对IDS是有益的。

### 2. 开发入侵检测算法的需求
对于致力于开发入侵检测算法的研究人员来说，一个灵活的平台来评估他们的算法是必不可少的。目前，很多研究人员使用由麻省理工学院林肯实验室提供的数据集来测试其算法。然而，有研究者报告称该数据集中包含的入侵数据有限，并且无法插入新的入侵数据。我们试图提供一种替代工具，以实现入侵行为的灵活模拟。

### 3. 分布式入侵检测的重要性
为了检测分布式入侵（例如分布式拒绝服务攻击），攻击关联显得尤为重要。一个能够灵活模拟分布式攻击的平台将会吸引那些开发入侵关联算法的研究人员。理想的测试平台应满足以下要求：
- 产生足够且真实的背景数据。
- 允许灵活地模拟各种不同类型的入侵活动。
- 测试环境应确保不会因模拟攻击而受到任何潜在的危害。
- 所有被测算法应接收相同的数据集，以便比较它们的分析结果。

### 4. 当前方法的局限性及我们的解决方案
现有方法存在如下局限：
- 背景流量要么完全通过模拟生成，要么从现实世界中记录并重放，导致不够真实或充足，或者记录与重放的负担过重。
- 破坏性入侵不能被仿真，因为它们可能危及实验环境的安全。

为解决上述问题，我们设计并实现了一个名为IntruDetector的软件平台，用于通过混合仿真技术测试网络入侵检测算法。IntruDetector允许在真实环境中直接进行测试，同时不影响正常系统操作。代表正常系统活动的背景数据直接从实际环境中收集，而入侵数据则通过混合仿真生成。破坏性入侵通过虚拟仿真进行，而非破坏性入侵可以通过实际仿真生成。入侵数据与正常数据混合后发送至中央存储库，在那里被入侵检测算法检索并分析。所有被测算法都能保证对数据有一致的看法，从而可以基于相同的基准进行结果比较。

### 5. 文章结构概述
本文其余部分安排如下：
- 第2节讨论了测试环境，并解释了混合仿真技术。
- 第3节介绍了IntruDetector的架构与实现。
- 第4节描述了我们使用IntruDetector进行的一些初步实验结果。
- 最后一节概述了未来研究的方向。

### 6. 实验环境选择
入侵检测算法的测试可以在真实环境或实验环境中进行。每种方法都有其优缺点，我们将在此详细讨论，并介绍我们的选择。

#### 6.1 在真实环境中测试
在真实环境中测试IDS可以让大量真实用户通过使用各种网络服务（如邮件、FTP、Telnet等）产生大量的背景流量。此方法的优势在于背景流量非常真实。

#### 6.2 在实验环境中测试
由于在真实环境中测试风险较高，大多数研究人员选择在实验环境中进行测试。挑战在于如何在实验环境中生成真实的背景流量。通常有三种方式：人工手动生成、通过仿真脚本生成以及从真实环境中捕获并复制。

#### 6.3 我们的方法
我们在真实环境中进行了测试，基于以下原因：
- 背景流量必须足够真实，否则测试结果会不准确。
- 如果测试环境配置得当，遭受内外部攻击的风险较低，且背景流量中包含入侵活动的可能性不大。

### 7. 混合仿真的应用
计算机仿真在许多研究领域中发挥着重要作用。虽然仿真技术已广泛应用于计算机科学的多个领域，但在入侵检测系统的测试方面的工作相对较少。为了应用仿真技术，我们需要在精确仿真和抽象仿真之间做出选择。我们希望结合两者的优点，根据具体情况应用不同的仿真方法。对于不会干扰正常用户活动或影响测试环境运行的攻击，我们采用精确仿真；而对于具有破坏性的攻击，则使用抽象仿真。这种组合方法被称为混合仿真。

### 8. SYN-Flooding 攻击示例
我们以SYN-Flooding拒绝服务攻击为例，说明混合仿真的工作原理。我们还展示了虚拟仿真在测试检测算法时功能上等同于实际仿真，但具有保护正常系统操作不受破坏的优点。