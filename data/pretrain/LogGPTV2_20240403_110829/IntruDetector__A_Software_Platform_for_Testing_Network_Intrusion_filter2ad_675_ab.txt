tection  algorithm  needs  extensive  tests  before  being
integrated  into  an IDS.
(2)  Testing  an IDS  component  by component  con-
in  software  en-
forms  to  the  principal  of  modularity 
gineering. 
It  makes  it  easy  to  debug  and  maintain
an  IDS.  Although  many  existing  IDSs  mix  together
the  functionalities  of  components  like  sensors and  an-
alyzers,  we  think  a clear  separation  of  functionalities
among  IDS  components  is  beneficial.
(3)  Researchers who  are  interested  in  developing
intrusion  detection  algorithms  need  a  flexible  plat-
form  to  evaluate  their  algorithms.  Currently,  many
researchers  are  using  the  data  set  provided  by  MIT's
Lincoln  Labs  to  test  their  algorithms.  However,  some
researchers  [12] have  reported  that  the  intrusive  data
contained  in  that  data  set  are limited,  and  there  is no
way  for  them  to  insert  new  intrusive  data.  We try  to
provide  an  alternative 
tool  for  flexible  simulation  of
intrusions.
(4)  To  detect  distributed 
intrusions  (for  example,
Distributed  Denial  of Services) , attack  correlation  is of
extreme  importance.  A  platform  allowing  for  flexible
simulation  of  distributed  attacks  shall  be  interesting
to  the  developers  of  intrusion  correlation  algorithms.
A 
testbed 
for 
to  the  following 
intrusion  detection  algorithms
require-
should  fulfill  but  not  limit 
(1)  It  should  produce  sufficient  and  realistic
ments: 
background  data;  (2)  It  allows  for  flexible  simulation
of  a variety  of different  intrusive  activities;  (3)  Testing
environment  should  be  free  from  any  potential  dan-
gers caused by  simulated  attacks;  (4)  The  tested  algo-
rithms  should  be  fed  with  the  same data  set  so  that
their  analysis  results  are comparable.  The  limitations
of current  methodologies  are:  (1) Background  traffic  is
either  purely  simulated  or  recorded  from  a real  world
and  replayed  in  the  experimental  environment.  As  a
result,  it  is  not  realistic  or  sufficient,  or  the  overload
of  recording  and  replaying  is  heavy.  (2)  Destructive
intrusions  can  not  be  emulated  since  they  may  com-
promise  the  experimental  environment.
To  address the  limitations  as stated  above, we de-
signed  and  implemented  a  software  platform,  called
IntruDetector, 
for  testing  network  intrusion  detection
algorithms  by  applying  the  technique  of  hybrid  simu-
lation. 
IntruDetector  allows  for  test  to  be  conducted
directly 
in  a  real  environment  without  compromising
normal  system  operations.  Background  data  repre-
senting  normal  system  activities  are collected  directly
from  a  real  environment,  and  intrusive  data  are  gen-
erated  by  hybrid  simulation.  Destructive 
intrusions
intrusions
are virtually  simulated  and  non-destructive 
can  be  generated  by  real  simulation. 
Intrusive  data,
mixed  with  normal  data,  are  sent  to  a  central  repos-
itory  where  they  will  be  retrieved  and  analyzed  by
intrusion  detection  algorithms.  All  algorithms  under
test  are  ensured  to  have  a consistent  view  of  data,  so
their  analysis  results  are comparable  on  the  same ba-
SIS.
The  rest  of  the  paper  is  organized  in  the  follow-
is
ing  manner. 
In  Section  2,  the  testing  environment 
is
discussed  and  the  technique  of  hybrid  simulation 
explained.  The  architecture  and  implementation  of
IntruDetector  are  presented  in  Section  3.  In  Section
4,  we describe  some preliminary 
results  of  the  experi-
ments  we have  conducted  with  IntruDetector.  Topics
for  future  research are outlined  in  the  last  section.
directly  collected  from  the  real  environment,  and  in-
trusive  activities  are emulated  by  exploit  scripts.  The
advantage  of  the  method  is  that  background  traffic  is
sufficiently  realistic. 
It  also eliminates  the  need to  an-
alyze  the  pattern  of  normal  user  activities  and  the  ef-
fort  to  develop  corresponding  simulation  tools.  There-
fore,  the  workload  of tests can be significantly  reduced.
However,  the  method  has the  following  drawbacks:
.The 
testing  environment  is  exposed to  the  risk  of
attacks  from  both  inside  and  outside.  Since  the
test  is  performed  in  a  real  environment  which  is
normally  connected  to  the  Internet  and  is  tech-
nically  accessible  from  anywhere  at  anytime, 
it
could  be  compromised  by  attacks  from  both  in-
side  and  outside.
.It 
is possible  that  background  traffic  may  contain
intrusive  data  as  attacks  against  the  testing  en-
vironment  could  occur  during  the  time  frame  of
testing.  This  possibility  could  increase  the  inac-
curacy  of  test  results.  For  example,  if  the  attacks
similar  to  those contained  in  the  background  traf-
tic are emulated  to test  an anomaly  detection  algo-
rithm, 
they  may  not  be flagged  as abnormal  since
they  are part  of  the  training  data.  To experiment
misuse detection  algorithms  with  the  background
traffic  containing  intrusive  data,  we may  deem the
reports  of  these attacks  as false alarms  since their
occurrence  is  unknown  to  us.
.Normal 
system  operation  could  be interrupted  by
simulated  attacks.  To  test  an  algorithm,  we need
to  emulate  as many  intrusions  as possible  to  test
its  ability  to  identify  them  from  background  traf-
fic.  When  destructive  attacks  are  emulated,  the
normal  system  operation  could  be compromised.
2
Testing 
Environment
Testing  of  intrusion  detection  algorithms  can  be  per-
formed  either  in  a real  environment  or  an  experimen-
tal  environment.  The  advantages  and  disadvantages
of  each method  are discussed below  and  our  choice is
then  presented.
2.1
Testing 
in  a  Real  Environment
Testing  IDSs  can  be  conducted  in  a live  environment
where  many  real  users produce  significant  background
traffic  by using  a variety  of network  services, e.g., mail,
ftp,  telnet,  etc.  In  this  method,  background  traffic  is
2.2
Testing  in  an  Experimental  Envi-
ronment
Due  to  the  high  risk  to  perform  testing  in  a real  envi-
ronment,  most  researchers perform  their  tests in exper-
imental  environments  [8, 19, 22].  The  challenge of  this
method  is  how  to  produce  realistic  background  traffic
in  an experimental  environment.  Three  ways of gener-
ating  background  traffic  are  summarized  here.  First,
the  background  traffic  can  be  manually  produced  by
employing  persons  to  perform  whatever  occurred  in  a
real  environment.  Second, it  can  be  obtained  by  sim-
ulation  scripts  which  generate  data  conforming  to  the
statistical  distribution  of  background  traffic  occurred
in  a  real  environment.  Third,  background  traffic  can
be  dumped  from  a  real  environment  and  replicated
3
in  the  experimental  environment. 
In  order  to  emu-
late  intrusions,  software  packages can  be  used  to  de-
velop  scripts  to  explore  system  vulnerabilities.  Exploit
scripts  are  then  run  in  the  experimental  environment
to  emulate  intrusive  activities.
The  disadvantages  of  this  method  are
.The 
in  an  experimental  environment 
overload  to  manually  produce  background
is  heavy
traffic 
as  there  are  normally  hundreds  or  thousands  of
users in  a real  environment.
.The  behavior  of  real  users are  difficult 
to  model,
and the  statistical  distribution  of background  traf-
tic  is not  agreed.  Some researchers claimed  that  it
conforms  to  Gaussian  distribution,  but  some oth-
ers found  it  is not  [13].
2.3 Our  Approach
We  performed  testing  in  a real  environment  based on
the  following  reasons.
( 1)  Background 
traffic  must  be  sufficiently 
real-
istic.  One  of  the  important 
testing  objectives  is  to
measure the  ability  of  detection  algorithms  to  identify
intrusions 
realistic
test  results  would  be  inaccurate.
background  traffic, 
However,  it  is difficult  to  generate realistic  background
traffic  in  an experimental  environment  as stated  above.
from  normal  activities.  Without 
(2)  If  the  testing  environment 
is  configured  very
carefully,  the  risk  of exposing  it  to  attacks  from  inside
and outside  is low,  and the  inaccuracy  of testing  results
brought  by  the  possibility  that  background  traffic  may
contain  intrusive  activities  is  not  significant.
The  main  challenge of conducting  testing  in  a real
environment 
is  how  to  protect  normal  system  opera-
tions  from  being  compromised  when  attacks  are  sim-
ulated.  This  is  where  the  idea  of  hybrid  simulation
fits.
Computer  simulation  plays  a fundamental  role  in
many  research fields.  It  is utilized  for  a variety  of dif-
ferent  reasons, mainly  because either  the  cost  or  risk
is prohibitively  high,  or  it  is completely  impossible  to
do  an  experiment 
in  a  real  environment.  Although
simulation  has  been  widely  applied  to  many  areas of
computer  science,  such  as  network  protocol  design,
routing  algorithm  development,  performance  evalua-
tion,  among others,  limited  work  has been done in  the
field  of  testing  intrusion  detection  systems.
4
In  order  to  apply  the  technique  of simulation,  we
need to  choose from  exact  simulation  or  abstract  simu-
lation.  There  are  always  trade-offs  between  these  two
approaches.  Exact  simulation  can  produce  detailed
and  realistic  results,  but  abstract  simulation  can  sim-
plify  the process and concentrate  on the certain  level of
interest.  We would  like  to  take  the  advantages of both
approaches,  and  apply  them  to  different  scenarios  ac-
cordingly.  To  simulate  attacks  which  do  not  interrupt
the  activity  of  normal  users or  affect  the  operation  of
testing  environment,  exact  simulation 
is  utilized.  We
can  develop  exploit  scripts  by  software  tools,  such  as
UNIX  shell,  Expect,  Tcl,  etc.  We can  also borrow  in-
trusive  tools  used  by  attackers.  Simulated  intrusive
traffic  along  with  the  background  traffic  will  be  cap-
tured  by a sensor.  The  sensor then  generates high  level
synthesized  events  and  passes them  to  detection  algo-
rithms 
is  also
called  real  simulation  here  since it  generates  real  net-
work  traffic.  To  simulate  intrusions  which  are destruc-
tive  to  the  testing  environment,  abstract  simulation  is
used.  Abstract  simulation 
is  also  called  virtual  simu-
lation  since  it  emulates  intrusions  in  a high  level  and
does  not  produce  any  real  network  traffic.  To  virtu-
ally  simulate  an  intrusion,  we  need  to  study  the  sys-
tem  vulnerability 
it  explores  and  the  pattern  of traffic
it  generates.  From  there,  a simulator  which  can gener-
ate a high  level of events corresponding  to the  intrusive
activity  shall  be  built.  The  outputs  of  virtual  simula-
tors  and  the  outputs  of  the  sensor are  mixed  together
in  a  central  place  where  detection  algorithms  will  re-
trieve  them  and  perform  analysis.  This  combination
approach  is  called  hybrid  simulation.
for  further  analysis.  Exact  simulation 
We use SYN- Flooding  [24} denial  of service attack
the operation  of hybrid  sim-
as an example  to  illustrate 
ulation.  We also show  that  virtual  simulation 
is func-
tionally  equivalent  to  real  simulation  when  being  used
to  test  detection  algorithms,  but  with  the advantage  of
protecting  normal  system  operations  from  being  com-
promised.
SYN-Flooding 
is a denial  of service  attack. 
It  ex-
plores  a weakness of TCP /IP.  In  TCP /IP,  a three-way
handshake  protocol  is  used for  establishing  a connec-
tion.  The  initiator  sends out  a  SYN  segment  to  the
receiver  to  build  a  connection.  After 
receiving  the
SYN  packet,  the  receiver  will  send  back  a  SYN  ACK
segment.  At  the  same  time,  some  memory  space  is