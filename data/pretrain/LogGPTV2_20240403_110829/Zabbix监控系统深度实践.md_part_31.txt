---
## Page 262
○ state：当前item 的状态，“0”表示正常，“1”表示“not supporte”状态。
 inventory_link：如果这个 Item的值要作为 Host的 Inventory，这里填写的是对应的
inventoryid。
 description:Item 配置界面上的“Description"。
port：使用 SNMP监控时使用的端口。
① interfaceid：当使用 host 类型Item3 时生效，用来选择 Host上不同的 interface。
 flags：“0”表示一个普通的 Item，“4”表示的是 discover生成的 Item。
mtime：对log和logrt 有效，记录了日志文件修改的时间。
 privatekey：在使用 SSH类型 Item 时有效，但是只有当 authtype 设置为使用 publickey 时
 publickey：在使用 SSH类型 Item 时有效，但是只有当 authtype设置为使用 publickey 时
password：在使用 SSH类型Item 时有效，SSH登录的密码。
usermame：在使用SSH类型Item时有效，SSH登录的用户名。
O authtype：在使用 SSH类型 Item 时有效，选择 SSH登录的类型。
O data_type：Item 配置界面中的“Data type"，选择 Item返回的数据类型。
①ipmi_sensor：使用IPMI类型Items需要设定的参数。
 params：当需要额外参数 Item 时，记录这些参数的地方。比如执行 SQL 的 Item 会在这
O delay_flex：Item 配置界面中“Fexible interval”的内容。
0 valuemapid：Item 配置界面中选择的 valuemap 的 id。
templateid：看名字肯定认为记录的是templateid，其实不是。
logtimefmt：针对log和logrt 有效，配置的日志中时间的格式。
 lastlogsize：针对log和 logrt类型 Items 使用的，记录上一次读取时日志文件的大小。
error：Item的错误信息。
才有效。
才有效。
里记录需要执行的SQL。
的Item的itemid。
有一个存在于Template上的父Item，这里记录的就是 Host上 Item 对应的在 Template 上
Template的时候，会把Template上的所有Item复制到Host上。那么Host上的Item就
第16章Zabbix数据库表结构解析
当一个Host关联一个
·247
---
## Page 263
●248°
思，笔者相信大多数读者朋友到这里已经有这个能力了。
对应的 tiggers 表则相对复杂，它和其他表的关联关系很强，需要仔细分析。
表都是非常平面的表，结构简单，Host 和Item 的属性在表中一目了然。而Trigger在数据库中
而且Trigger 相对 Host 和 Item 来说，更加复杂。Host和 Item 在数据库中对应的 hosts 表和 items
16.4Trigger在数据库中的结构
Zabbix监控系统深度实践
Trigger是 Zabbix 的重要部分，平时在工作中,除了 Host 和 Item,接触最多的就属 Trigger了。
如果还有读者一下没看出来，可以找Trigger看一下，如图16-1所示。
经过前面几节对于hosts 表和 items 表的分析，看到这些字段，应该马上就能猜出是什么意
mysql> desc triggers;
----
下面看看 triggers的表结构：
flags
Field
-----
state
type
templateid
error
comments
lastchange
priority
value
status
url
description
expression
triggerid
Iint(11)
int(11）
|int(11)
1varchar(255)
varchar(2048)
1bigint(20) unsigned |NO
IType
bigint(20)unsigned |
int(11)
int(11)
varchar(128)
text
int(11)
int(11)
varchar(255)
！
1
|Null1KeylDefaultlExtra
NO
NO
NO
YES
NO
NO
NO
NO
|MUL|NULL
IMUL10
|PRI丨NULL
|NULL
C
0
+-------+
---
## Page 264
memory.
templateid:
lastchange: 1392535037
expression:(13191) select * from expressions\G;
我们可以看到这一串逻辑是属于“Expression”属性的，笔者曾经想当然地认为数据
再看看图中设置Trigger 逻辑的部分，如图16-2所示。
expression:^los
expression: ^(btrfslext2lext3lext4ljfs|reiser|xfs|ffs|ufsljfsljfs2|vxfs
regexpid:
regexpid:
Expression
2
2
Expression constructor
KHostABC:syst
row
em.swap.sizeLpfreej.last（o)) select * from functions where functionid=13191;
Network interfaces for discovery
我们再看个复杂的：expression是“(HostABC:agent.ping.last（）}=O丨{HostABC:system.cpu.
确定expressions 表是对应这个的了。那我们要寻找的 13191是什么呢？答案是function,
Filesystems for discovery
Name
现在大家应该能明白Triggers是怎么设置的了吧。
------
I 23777 | Free swap space in % | system.swap.size[,pfree] |
+-------
itemid|name
+--------+---
+-----------
131911237771
+
十
1>ext4 [Result is TRUE]
1*~(Physical memory\Virtual memory|Memory bulffers|Cachedmemory|Swap space)$s[Result is FALSE)
11o$
1
2>^ext[Result is TRUE]
1>（btrfs|ext2|ext3/ext4ljfslreiser|xfs|ffs|ufsljfs|ifs2|vxfs|hfs|ntfs|fat32|zfs)$[Result isTRUE}
Expressions
--+-----------+----------+-----------
13588 1 last
+
1key_
图16-3
***************************
[Result is FALSE]
I
+
---
## Page 268
events 表的表结构：
否触发 Action，都会生成一个Event。这一节中，我们看看Event 在数据库中的存储。首先看
16.5
description:
templateid:NULL
lastchange: 1394205728
expression:
mysql> desc events;
每当 Zabbix server 获取到一个数据，它就会检查跟这个Item 相关的Trigger，然后无论是
Field
可以发现，
comments:
priority:
acknowledged1int(11)
value
clock
objectid
object
source
eventid
error:
status:
Events表
flags:
state:
type:0
value:
url:
1
，再复杂的 expression也是由多个function拼成的。
testl
0
0
{13204}=01{13205}=0
int(11)
IType
int(11)
bigint(20) unsigned|
int(11)
int(11)
bigint(20)unsigned |No
1
丨Null丨Key|Default|Extra
NO
MUL
PRI INULL
第16章Zabbix数据库表结构解析
0
0
·253°
---
## Page 269
·254°
的应该都能理解。下面进行详细说明。
Zabbix监控系统深度实践
value：和 object字段类似，根据 source 的不同，这里的值有不同的含义。
 source：Event 可能由多种源头生成，source 就记录了Event 是由什么事件而生成的。分