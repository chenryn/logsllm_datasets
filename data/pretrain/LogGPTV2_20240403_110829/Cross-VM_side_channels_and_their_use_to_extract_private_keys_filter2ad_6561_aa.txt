title:Cross-VM side channels and their use to extract private keys
author:Yinqian Zhang and
Ari Juels and
Michael K. Reiter and
Thomas Ristenpart
Cross-VM Side Channels and Their Use to Extract
Private Keys
Yinqian Zhang
University of North Carolina
Chapel Hill, NC, USA
PI:EMAIL
Michael K. Reiter
University of North Carolina
Chapel Hill, NC, USA
PI:EMAIL
Ari Juels
RSA Laboratories
Cambridge, MA, USA
PI:EMAIL
Thomas Ristenpart
University of Wisconsin
Madison, WI, USA
PI:EMAIL
ABSTRACT
This paper details the construction of an access-driven side-
channel attack by which a malicious virtual machine (VM)
extracts ﬁne-grained information from a victim VM running
on the same physical computer. This attack is the ﬁrst such
attack demonstrated on a symmetric multiprocessing sys-
tem virtualized using a modern VMM (Xen). Such systems
are very common today, ranging from desktops that use vir-
tualization to sandbox application or OS compromises, to
clouds that co-locate the workloads of mutually distrust-
ful customers. Constructing such a side-channel requires
overcoming challenges including core migration, numerous
sources of channel noise, and the diﬃculty of preempting
the victim with suﬃcient frequency to extract ﬁne-grained
information from it. This paper addresses these challenges
and demonstrates the attack in a lab setting by extracting
an ElGamal decryption key from a victim using the most
recent version of the libgcrypt cryptographic library.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protec-
tion—Information ﬂow controls
General Terms
Security
Keywords
Side-channel attack, cross-VM side channel, cache-based side
channel
1.
INTRODUCTION
Modern virtualization technologies such as Xen, HyperV,
and VMWare are rapidly becoming the cornerstone for the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
security of critical computing systems. This reliance stems
from their seemingly strong isolation guarantees, meaning
their ability to prevent guest virtual machines (VMs) run-
ning on the same system from interfering with each other’s
execution or, worse, exﬁltrating conﬁdential data across VM
boundaries. The assumption of strong isolation underlies the
security of public cloud computing systems [6, 39] such as
Amazon EC2, Microsoft Windows Azure, and Rackspace;
military multi-level security environments [29]; home user
and enterprise desktop security in the face of compromise [20];
and software-based trusted computing [22].
VM managers (VMMs) for modern virtualization systems
attempt to realize this assumption by enforcing logical iso-
lation between VMs using traditional access-control mech-
anisms. But such logical isolation may not be suﬃcient
if attackers can circumvent them via side-channel attacks.
Concern regarding the existence of such attacks in the VM
setting stems from two facts. First, in non-virtualized, cross-
process isolation contexts, researchers have demonstrated a
wide variety of side-channel attacks that can extract sensi-
tive data such as cryptographic keys on single-core archi-
tectures [1–3, 5, 8, 36, 43]. The most eﬀective attacks tend
to be so-called “access-driven” attacks that exploit shared
microarchitectural components such as caches. Second, Ris-
tenpart et al. [39] exhibited coarser, cross-VM, access-driven
side-channel attacks on modern symmetric multi-processing
(SMP, also called multi-core) architectures. But their at-
tack could only provide crude information (such as aggregate
cache usage of a guest VM) and, in particular, is insuﬃcient
for extracting cryptographic secrets.
Despite the clear potential for attacks, no actual demon-
strations of ﬁne-grained cross-VM side-channels attacks have
appeared. The oft-discussed challenges [39, 46] to doing so
stem primarily from the facts that VMMs place more lay-
ers of isolation between attacker and victim than in cross-
process settings, and that modern SMP architectures do not
appear to admit ﬁne-grained side-channel attacks (even in
non-virtualized settings) because the attacker and victim are
often assigned to disparate cores. Of course a lack of demon-
strated attack is not a proof of security, and so whether
ﬁne-grained cross-VM side-channel attacks are possible has
remained an important open question.
In this paper, we present the development and applica-
tion of a cross-VM side-channel attack in exactly such an
environment. Like many attacks before, ours is an access-
305driven attack in which the attacker VM alternates execution
with the victim VM and leverages processor caches to ob-
serve behavior of the victim. However, we believe many
of the techniques we employ to accomplish this eﬀectively
and with high ﬁdelity in a virtualized SMP environment
are novel. In particular, we provide an account of how to
overcome three classes of signiﬁcant challenges in this envi-
ronment: (i) inducing regular and frequent attacker-VM ex-
ecution despite the coarse scheduling quanta used by VMM
schedulers; (ii) overcoming sources of noise in the informa-
tion available via the cache timing channel, both due to
hardware features (e.g., CPU power saving) and due to soft-
ware ones (e.g., VMM execution); and (iii) dealing with core
migrations, which give rise to cache “readings” with no in-
formation of interest to the attacker (i.e., the victim was
migrated to a core not shared by the attacker). Finally, we
customize our attack to the task of extracting a private de-
cryption key from the victim and speciﬁcally show how to
“stitch together” these intermittent, partial observations of
the victim VM activity to assemble an entire private key.
As we demonstrate in a lab testbed, our attack establishes
a side-channel of suﬃcient ﬁdelity that an attacker VM can
extract a private ElGamal decryption key from a co-resident
victim VM running Gnu Privacy Guard (GnuPG) [24], a pop-
ular software package that implements the OpenPGP e-mail
encryption standard [14]. The underlying vulnerable code
actually lies in the most recent version of the libgcrypt
library, which is used by other applications and deployed
widely. Speciﬁcally, we show that the attacker VM’s moni-
toring of a victim’s repeated exponentiations over the course
of a few hours provides it enough information to reconstruct
the victim’s 457-bit private exponent accompanying a 4096-
bit modulus with very high accuracy—so high that the at-
tacker was then left to search fewer than 10, 000 possible
exponents to ﬁnd the right one.
We stress, moreover, that much about our attack general-
izes beyond ElGamal decryption (or, more generally, discov-
ering private exponents used in modular exponentiations)
in libgcrypt.
In particular, our techniques for preempt-
ing the victim frequently for observation and sidestepping
several sources of cache noise are independent of the use to
which the side-channel is put. Even those components that
we necessarily tune toward ElGamal private-key extraction,
and the pipeline of components overall, should provide a
roadmap for constructing side-channels for other ends. We
thus believe that our work serves as a cautionary note for
those who rely on virtualization for guarding highly sensitive
secrets of many types, as well as motivation for the research
community to endeavor to improve the isolation properties
that modern VMMs provide to a range of applications.
2. BACKGROUND
Side-channel attacks and their use to extract cryptographic
keys from a victim device or process have been studied in
a variety of settings. These attacks are generally catego-
rized into one of three classes. A time-driven side-channel
attack is possible when the total execution times of cryp-
tographic operations with a ﬁxed key are inﬂuenced by the
value of the key, e.g., due to the structure of the crypto-
graphic implementation or due to system-level eﬀects such
as cache evictions. This inﬂuence can be exploited by an at-
tacker who can measure many such timings to statistically
infer information about the key (e.g., [4, 11, 13, 26]). In the
context of our work, the most relevant research of this type
is due to Weiß et al. [46]. This work mounted a time-driven
attack against an embedded uniprocessor device virtualized
by the L4 microkernel. Their techniques do not translate to
the style of attack we pursue (see below) or the virtualized
SMP environment in which we attempt it.
A second class of side-channel attacks is trace-driven. These
attacks continuously monitor some aspect of a device through-
out a cryptographic operation, such as the device’s power
draw (e.g., [25]) or electromagnetic emanations (e.g., [21,
38]). The ability to continuously monitor the device makes
these attacks quite powerful but typically requires physical
proximity to the device, which we do not assume here.
The third class of side-channel attack, of which ours is
an example, is an access-driven attack, in which the at-
tacker runs a program on the system that is performing the
cryptographic operation of interest. The attacker program
monitors usage of a shared architectural component to learn
information about the key, e.g., the data cache [36, 43], in-
struction cache [1,2], ﬂoating-point multiplier [5], or branch-
prediction cache [3]. The strongest attacks in this class, ﬁrst
demonstrated only recently [2, 8], are referred to as asyn-
chronous, meaning that they do not require the attacker
to achieve precisely timed observations of the victim by ac-
tively triggering victim operations. These attacks leverage
CPUs with simultaneous multi-threading (SMT) or the abil-
ity to game operating system process schedulers; none were
shown to work in symmetric multi-processing (SMP) set-
tings. The contribution of this paper is to extend the class
of asynchronous, access-driven attacks to VMs running on
virtualized SMP systems.
The closest work in this area is due to Ristenpart et al. [39],
who gave an access-driven data-cache side channel suﬃcient
for learning coarse-grained information, such as the current
load, of a co-resident victim VM. They did not oﬀer any ev-
idence, however, that ﬁne-grained information such as keys
could be extracted through cross-VM side-channels. Sub-
sequent work [48, 49] showed how to build various covert
channels in cross-VM SMP settings, but these require coop-
erating VMs and so cannot be used as a side-channel attacks.
Also of interest is work of Owens and Wang [34], who gave
an access-driven attack for ﬁngerprinting the OS of a victim
VM by leveraging memory deduplication in the VMWare
ESXi hypervisor. They did not show how to extract ﬁne-
grained information such as cryptographic keys.
To our knowledge, no prior works have demonstrated cross-
VM side-channels with suﬃcient ﬁdelity to extract crypto-
graphic keys, however; this is what we show here. Moreover,
as discussed next, the features of virtualized SMP systems
are such that new techniques are required to succeed.
3. OVERVIEW AND CHALLENGES
Attack setting. The setting under consideration is the use
of conﬁdential data, such as cryptographic keys, in a VM.
Our investigations presume an attacker that has in some
manner achieved control of a VM co-resident on the same
physical computer as the victim VM, such as by compromis-
ing an existing VM that is co-resident with the victim.
We focus on the Xen virtualization platform [9] running
on contemporary hardware architectures. Our attack setting
is inspired not only by public clouds such as Amazon EC2
and Rackspace, but also by other Xen use cases. For ex-
306ample, many virtual desktop infrastructure (VDI) solutions
(e.g., Citrix XenDesktop) are conﬁgured similarly, where vir-
tual desktops and applications are hosted in centralized dat-
acenters on top of a XenServer hypervisor and delivered re-
motely to end user devices via network connections. Another
representative use case separates operating systems into sev-
eral components with diﬀerent privilege levels and that are
isolated by virtualization [20, 37]. An example of such sys-
tems is Qubes [41], which is an open source operating system
run as multiple virtual machines on a Xen hypervisor.
In terms of computer architecture, we target modern multi-
core processors without SMT capabilities or with SMT dis-
abled. This choice is primarily motivated by contemporary
processors used in public clouds such as Amazon AWS and
Microsoft Azure, whose SMT features are intentionally dis-
abled, if equipped, since SMT can facilitate cache-based side
channel attacks [28].
We assume the attacker and victim are separate Xen DomU
guest VMs, each assigned some number of disjoint virtual
CPUs (VCPUs). A distinguished guest VM, Dom0, handles
administrative tasks and some privileged device drivers and
is also assigned some number of VCPUs. The Xen credit
scheduler [16] assigns VCPUs to the physical cores (termed
PCPUs in Xen’s context), with periodic migrations of VC-
PUs amongst the cores.
Our threat model assumes that Xen maintains logical iso-
lation between mutually untrusting co-resident VMs, and
that the attacker is unable to exploit software vulnerabili-
ties that allow it to take control of the entire physical node.
We assume the attacker knows the software running on the
victim VM and has access to a copy of it.
The attack we consider will therefore uses cross-VM side-
channels to reveal a code path taken by the victim applica-
tion. We will use as a running example—and practically rel-
evant target—a cryptographic algorithm whose code-path is
secret-key dependent (look ahead to Fig. 2). However, most
steps of our side-channel attack are agnostic to the purpose
for which the side-channel will be used.
Constructing such a side channel encounters signiﬁcant
challenges in this cross-VM SMP setting. We here discuss
three key challenge areas and overview the techniques we
develop to overcome them.
Challenge 1: Observation granularity. The way Xen
scheduling works in our SMP setting makes spying on a vic-
tim VM challenging, particularly when one wants to use
per-core microarchitectural features as a side channel. For
example, the L1 caches contain the most potential for dam-
aging side-channels [36], but these are not shared across dif-
ferent cores. An attacker must therefore try to arrange to
frequently alternate execution on the same core with the
victim so that it can measure side-eﬀects of the victim’s ex-
ecution. This strategy has been shown to be successful in
single-core, non-virtualized settings [8, 32, 43] by attackers
that game OS process scheduling. But no gaming of VMM
scheduling suitable for ﬁne-grained side-channels has been
reported, and the default scheduling regime in Xen would
seem to bar frequent observations: the credit scheduler nor-
mally reschedules VMs every 30ms, while even a full 4096-
bit modular exponentiation completes in about 200ms on a
modern CPU core (on our local testbed, see Sec. 6). This
leaves an attacker with the possibility of less than 10 side-
channel observations of it.
In Sec. 4, we overcome this challenge to use the L1 in-
struction cache as a vector for side-channels. We demon-
strate how to use interprocess interrupts (IPIs) to abuse the
Xen credit scheduler in order to arrange for frequent inter-
ruptions of the victim’s execution by a spy process running
from within the attacker’s VM. This takes advantage of an
attacker having access to multiple VCPUs and allows the
spy to time individual L1 cache sets. The scheduling nu-
ances abused are a vulnerability in their own right, enabling
degradation-of-service attacks and possibly cycle-stealing at-
tacks [44, 50].
Challenge 2: Observation noise. Even with our IPI-
based spying mechanism, there exists signiﬁcant noise in the
measured timings of the L1 instruction cache. Beyond the
noise involved in any cache-based measurements, the VMM
exacerbates noise since it also uses the L1 cache when per-
forming scheduling. Manual analysis failed to provide sim-
ple threshold-based rules to classify cache timings as being
indicative of particular victim operations.
In Sec. 5.1, we use a support vector machine (SVM) to
relate L1 cache observations to particular operations of the
victim. A critical challenge here is gathering accurate train-
ing data, which we accomplish via careful hand instrumen-
tation of the target victim executable. Still, the SVM is