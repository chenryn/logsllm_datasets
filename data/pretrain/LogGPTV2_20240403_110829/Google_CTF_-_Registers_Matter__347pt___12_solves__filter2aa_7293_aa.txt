# Google CTF - Registers Matter (347pt / 12 solves)
We have an unknown remotely accessible board that hides the flag. Try to debug it to steal the flag!
Files:
- debugger.zip
## 1. Investigating the `debugger.py`
We quickly realised that `debugger.py` was a helpful client, allowing to interact with the server via simple text-based protocol. Client provided nice interface for debugging facilities (e.g. pretty-printing register info). 
After connecting to the server, we've been asked to enter one of 2 modes: 
- **debug** - which starts application in debug mode, accepting debugger commands like adding breakpoints, reading/modifying registers and stepping through instructions
- **challenge** - in which the flag was available, but without access to debugger
After running the application, it shows a menu and asks for a command:
```
Menu:
1. Read the EEPROM
2. Magic function
0. Exit
Choice (do not enter more than 5 chars):
```
### 1.1 Reading EEPROM
First command asks for starting sector and number of sectors to read. Unfortunately, there comes the first limitation: we're able to read only 0x800-0x1000 region. After choosing lower sector number, we're getting an error message:
```
Menu:
1. Read from EEPROM
2. Magic function
0. Exit
Choice (do not enter more than 5 chars): 1
Enter start sector (16-31, 0 to exit): 1
### DENIED: access to software-protected area!
```
This suggests that flag is contained in the lower part of EEPROM memory. The higher part contains only `Hello there!` string with other bytes zeroed.
```
Enter start sector (16-31, 0 to exit): 16
Enter number of sectors to read (1-16): 16
=== EEPROM dump (0x800 - 0x1000) ===
0800: 48 65 6C 6C 6F 20 74 68  65 72 65 21 00 00 00 00  |  Hello there!....
0810: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0820: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0FF0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
```
### 1.2. Magic function
Second command asks for two "Magic component" numbers A and B.
```
Menu:
1. Read from EEPROM
2. Magic function
0. Exit
Choice (do not enter more than 5 chars): 2
Enter Magic component number A and then B:
0
1
Wheee: 0, 1!
Enter Magic component number A and then B:
1
2
No magic for 1, 2 :(
Enter Magic component number A and then B:
2
2
You are not a Wizard for Real magic of 2, 2 :(
```
Output seemed to depend mostly on the first component value, showing one of three response variants.
### 1.3. Debugger
After choosing debugger mode in the first menu, we're getting simple debugger shell.
```
Please choose mode of operation:
 D - debug session
 C - challenge mode
Choice: D
DBG> help
Available commands:
  step [COUNT]
  input STR
  cont
  trace
  pause SECS
  reg [ ] ... [ ]
  break [delete|toggle N] | [ADDR]
  write RAW-COMMAND
  quit|exit
```
Debugger allows to set breakpoints, single-stepping, reading/modifying the registers and turning on the "trace" mode which prints processor state after each instruction.
Let's turn on the `trace`. After short time we're getting the input reading loop:
```
 pc = 00014A  gp0 = 20   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DCA    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = DE  gp13 = 1D  gp14 = 00  gp15 = 02
flg = 80     gp16 = DE  gp17 = 1D  gp18 = 03  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000001F9E2 gp24 = 01  gp25 = 02  gp26 = 00  gp27 = 02  gp28 = 00  gp29 = 02  gp30 = 9B  gp31 = 00  gp32 = 000006
 pc = 00014A  gp0 = 20   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DCA    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = DE  gp13 = 1D  gp14 = 00  gp15 = 02
flg = 80     gp16 = DE  gp17 = 1D  gp18 = 03  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000001F9E2 gp24 = 01  gp25 = 02  gp26 = 00  gp27 = 02  gp28 = 00  gp29 = 02  gp30 = 9B  gp31 = 00  gp32 = 000006
...
```
Machine underneath uses 32 general purpose registers (8-bit `gp0-31` and 24-bit `gp32`), stack pointer `sp`, flag register `flg`, program counter `pc` and unlabeled register keeping the count of executed instructions.
After short trace analysis we found that `gp32` depends on `sp` and shows three bytes from stack: `sp-1`, `sp` and `sp+1`.
It also turned out that application was performing a lot of loops even during printing output characters, which made output from tracing a lot harder to read. Knowing all of this we decided to focus our attention on read EEPROM functionality first to read other EEPROM sectors.
## 2. Dumping EEPROM
By analyzing a trace, we found two points that seemed nice for putting a breakpoint:
- `0x14a` when application waits for input
- `0x12c` when application sends output character
Debugger allows us to change the value of `gp` registers, so let's find the actual "EEPROM read" operation. We've used breakpoints above to automate the interaction with server and trace it only during the actual command execution.
First, we've looked for instruction that puts "Hello there!" subsequent bytes to the registers (load from EEPROM). We've found a good candidate @ 0x778:
```
PC=000778 SP=1DE3 FLAGS=20
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E3,03,03,00,00,00,00,00,E3,03,D6,00,00,00,E3,03,001DEA
PC=00077A SP=1DE3 FLAGS=20
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E3,03,03,00,00,00,00,00,4D,03,D6,00,00,00,E4,03,001DEA
                                                                             ^^
--
PC=000778 SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E4,03,03,00,00,00,00,02,00,00,00,02,00,00,E4,03,CA1DEA
PC=00077A SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E4,03,03,00,00,00,00,02,65,00,00,02,00,00,E5,03,CA1DEA
                                                                             ^^
--
PC=000778 SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E5,03,03,00,00,00,00,02,00,00,00,02,00,00,E5,03,CA1DEA
PC=00077A SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E5,03,03,00,00,00,00,02,6E,00,00,02,00,00,E6,03,CA1DEA
                                                                             ^^
--
PC=000778 SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E6,03,03,00,00,00,00,02,00,00,00,02,00,00,E6,03,CA1DEA
PC=00077A SP=1DE3 FLAGS=22
REGS=20,00,00,00,00,00,00,00,00,00,00,00,17,04,FA,1D,E6,03,03,00,00,00,00,02,75,00,00,02,00,00,E7,03,CA1DEA
                                                                             ^^
```
In trace presented above, it loads next bytes of `Menu` string from `0x3E3-0x3E6` (`gp31:gp32 => gp24`) and increments address in `gp31:gp32` registers. At first sight, it looked to be the "load operation" we're looking for. 
```python
def read_from_addr(addr, len):
    buf = []
    r = remote("registers.2020.ctfcompetition.com", 1337)
    # Enter debugger
    r.recvuntil("&M")
    r.sendline("&D")
    # Set breakpoint at 778
    r.sendline("*B+%04X" % 0x778)
    for l in range(len):
        memaddr = addr + l
        # Continue
        r.sendline("*C")
        # Wait for hit
        r.recvuntil("*B|0001")
        r.sendline(zero_regs + ",30=%04X,31=%04X$" % (memaddr & 0xff, (memaddr >> 8) & 0xff))
        r.sendline("*S")
        regs = r.recvuntil("$")
        memread = int(regs.split("|")[1].split(",")[28], 16)
        buf.append(chr(memread))  
        print(hex(memaddr), chr(memread), regs)  
    r.close()
    return ''.join(buf)
```
After probing various regions, we've found that 0x200-0x500 region contains strings used by application.
```
\x00\x00\x00\x00\x92\x00\x00\x00\x00\x00heee: %d, %d!
\x00o magic for %d, %d :(
\x00== EEPROM dump (0x%02X - 0x%02X) ===
\x00## ERROR: read beyond flash boundaries
\x0002X \x00|  \x00%04X: \x00ou are not a Wizard for Real magic of %d, %d :(
\x00nter start sector (16-31, 0 to exit): \x00-> wrong start sector number\x00## DENIED: access to software-protected area!\x00nter number of sectors to read (1-16): \x00-> wrong sectors number\x00-> read beyound flash boundaries\x00nter Magic component number A and then B:\x00nknown choice.\x00enu:\x00. Read from EEPROM\x00. Magic function\x00. Exit\x00hoice (do not enter more than 5 chars): \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
```
Unfortunately, it wasn't "load from EEPROM" instruction but data memory load (RAM). Using this instruction, 0x800-0x1000 region was returning just zeroes.
We've tried to put different sector numbers/length to compare the traces and possibly find the next instruction. Then we've found the 0xBAA when evaluated starting section address has been put into the register. Let's try to change that value using debugger to read the "reserved" area.
```
DBG> b 2986
DBG> cont
Choice (do not enter more than 5 chars): 1
Enter start sector (16-31, 0 to exit): 16
Enter number of sectors to read (1-16): ^C
DBG> 
Cycles passed: 14230405
DBG> b t 1