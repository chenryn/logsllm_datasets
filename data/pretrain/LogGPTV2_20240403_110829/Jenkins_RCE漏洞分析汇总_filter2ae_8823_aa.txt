# Jenkins RCE漏洞分析汇总
## 0x01 前言
之前针对Jenkins没注意看过，看到廖师傅kcon会议上讲的Java沙箱逃逸就涉及到了Jenkins，包括今年开年时候orange发的Jenkins的组合拳，拖拖拉拉到了年底还没看，所以准备开始看。
这里根据Jenkins的漏洞触发点做了一个归类，一种是通过cli的方式触发，一种是通过我们常见的http方式触发。
## 0x02 环境搭建
    在catalina.sh添加，或者catalina.bat内容不动用如下命令开启，默认是开启8000端口
    用如下命令开启
    catalina.bat jpda start（Windows）
    catalina.sh jpda start（linux）
## 0x03 漏洞分析
### Cli方式触发
#### CVE-2015-8103
最早开始公开Java 反序列化的时候，何使用 Apache Commons Collections 这个常用库来构造 POP
链（类ROP链），这个在Jenkins上的例子就是这个编号，但是网上对于这个调用链的过程都没有进行分析，所以这里分析一下。
先看看之前那些exp的脚本，这里可以看到漏洞触发已经是和Jenkins的cli有关系，且这里走tcp socket通信的。
    response = requests.get(jenkins_web_url, headers=i_headers)
    cli_port = int(response.headers['X-Jenkins-CLI-Port'])
    print('[+] Found CLI listener port: "%s"' % cli_port)
    sock_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = urlparse.urlparse(jenkins_web_url).netloc
    try:
        host, port = host.split(':')
    except:
        host = host
    cli_listener = (socket.gethostbyname(host), cli_port)
    print('[+] Connecting CLI listener %s:%s' % cli_listener)
    sock_fd.connect(cli_listener)
跟进一下看看。
##### 漏洞分析
Jenkins cli的入口在这 **hudson.TcpSlaveAgentListener#ConnectionHandler**
，这个run构造方法，我们看到调用了p.handle方法。
handle也是一个抽象方法，这里根据前面的Protocol选择相关协议，这里的协议有两个一个是Cli，另一个是 **JnlpSlaveAgent**
。我们关注的其实是Cli这个东西。
跟进 **hudson.cli.CliProtocol#handle** ，这里实例化 **CliProtocol.Handler**
来处理，并且调用其中的run构造方法
    public void handle(Socket socket) throws IOException, InterruptedException {
            (new CliProtocol.Handler(this.nio.getHub(), socket)).run();
        }
继续 **hudson.cli.CliProtocol$Handler.run** ，这里调用 **runcli** 针对socket连接进行处理。
继续跟进 **hudson.cli.CliProtocol$Handler.runCli** ，这的关键是下图标红色的地方。
这里调用 **hudson.remoting.ChannelBuilder#build** 来处理传入的buffer缓冲区的数据，跟进这个看看。
    public Channel build(InputStream is, OutputStream os) throws IOException {
            return new Channel(this, this.negotiate(is, os));
        }
这里主要是调用 **this.negotiate** 来处理is和os，而is和os分别使我们缓冲区的输入和输出，跟进一下
**hudson.remoting.ChannelBuilder.negotiate**
**negotiate** 会检查所有发往Jenkins CLI的命令中都包含某种格式的前导码（preamble），前导码格式通常为： **rO0ABXNyABpodWRzb24ucmVtb3RpbmcuQ2FwYWJpbGl0eQAAAAAAAAABAgABSgAEbWFza3hwAAAAAAAAAH4=**,
该前导码包含一个经过base64编码的序列化对象，我们抓个包看到这个前导码，也看到发序列化头部base64编码之后的关键字 **rO0A** 。
然后继续循环往下走，调用 **Capability.read** 处理buffer中的内容。
跟进 **hudson.remoting.Capability#read** ，标准的反序列化的输入点了，之后就是调用 **Commons
Collections** 执行反序列化下一步的命令执行操作了。
##### 修复方式
**hudson.remoting.ClassFilter#check** 会检查是否在黑名单中。
目前默认的黑名单如下所示
    private static final String[] DEFAULT_PATTERNS = new String[]{
    "^bsh[.].*", 
    "^com[.]google[.]inject[.].*", 
    "^com[.]mchange[.]v2[.]c3p0[.].*", 
    "^com[.]sun[.]jndi[.].*", 
    "^com[.]sun[.]corba[.].*", 
    "^com[.]sun[.]javafx[.].*", 
    "^com[.]sun[.]org[.]apache[.]regex[.]internal[.].*", 
    "^java[.]awt[.].*", 
    "^java[.]rmi[.].*", 
    "^javax[.]management[.].*", 
    "^javax[.]naming[.].*", 
    "^javax[.]script[.].*", 
    "^javax[.]swing[.].*", 
    "^org[.]apache[.]commons[.]beanutils[.].*", "^org[.]apache[.]commons[.]collections[.]functors[.].*", 
    "^org[.]apache[.]myfaces[.].*", 
    "^org[.]apache[.]wicket[.].*", 
    ".*org[.]apache[.]xalan.*", 
    "^org[.]codehaus[.]groovy[.]runtime[.].*",
    "^org[.]hibernate[.].*", 
    "^org[.]python[.].*", 
    "^org[.]springframework[.](?!(\\p{Alnum}+[.])*\\p{Alnum}*Exception$).*", 
    "^sun[.]rmi[.].*",
    "^javax[.]imageio[.].*", 
    "^java[.]util[.]ServiceLoader$", 
    "^java[.]net[.]URLClassLoader$"};
#### CVE-2017-1000353
##### 漏洞分析
>   * 漏洞编号： CVE-2017-1000353
>   * 漏洞简述： Jenkins 未授权远程代码执行漏洞, 允许攻击者将序列化的Java SignedObject对象传输给Jenkins
> CLI处理，反序列化ObjectInputStream作为Command对象，这将绕过基于黑名单的保护机制, 导致代码执行。
>   * 影响版本： Jenkins-Ci Jenkins LTS 
所以从上面这段引用可以看到，漏洞触发还是和cli有关系，我们来详细看看，首先入口在 **hudson.cli.CLIAction**
中，代码根据HTTP头部中的 **side** 的值来区分是 **download** 还是 **upload** 操作，然后根据http头部中
**session** 里面的 **uuid** 的值来区分不同的会话通道。
先跟进看一下 **download** 操作，位置在 **hudson.model.FullDuplexHttpChannel#download**
，下图中已经将重要部分代码标红了，如果没有接收到 **upload** 请求，那么这时候 **download**
操作就会阻塞等待，直到upload操作过来，然后建立新的 **channel** 对象，来处理 **upload** 接收到的请求和响应。
所以这里就要跟进Channel，前面我们说过针对cli方式触发的时候，会调用 **negotiate**
来检查格式是否正确，所以这里进入构造方法，实际上是下图中的代码。
    Channel(ChannelBuilder settings, InputStream is, OutputStream os) throws IOException {
            this(settings, settings.negotiate(is, os));
        }
跟进 **hudson.remoting.ChannelBuilder#negotiate** ，这里会调用 **makeTransport** 方法。
跟进 **makeTransport** 方法，位置在 **hudson.remoting.ChannelBuilder#makeTransport**
，这个方法会根据cap是否支持Chunking来返回不同的对象，分别是 **ChunkedCommandTransport** 和
**ClassicCommandTransport** 。
然后又进去 **hudson.remoting.Channel** 中的下图代码进行操作，这里红框圈出部分关键代码。这里会调用
**transport.setup** 处理对象 **CommandReceiver** 。
而setup也是一个抽象类，会调用 **hudson.remoting.SynchronousCommandTransport#setup**
这个回启东一个 **ReaderThread** 线程来处理传入的 **CommandReceiver** 对象。
    public void setup(Channel channel, CommandReceiver receiver) {
            this.channel = channel;
            (new SynchronousCommandTransport.ReaderThread(receiver)).start();
        }
跟进 **hudson.remoting.SynchronousCommandTransport#ReaderThread** ，这个方法会调用
**SynchronousCommandTransport.this.read**
而这里的read是个抽象类，目前这个流程中，他的实现方法在 **hudson.remoting.ClassicCommandTransport** 中。
    public final Command read() throws IOException, ClassNotFoundException {
            try {
                Command cmd = Command.readFrom(this.channel, this.ois);
                if (this.rawIn != null) {
                    this.rawIn.clear();
                }
                return cmd;
            } catch (RuntimeException var2) {
                throw this.diagnoseStreamCorruption(var2);
            } catch (StreamCorruptedException var3) {
                throw this.diagnoseStreamCorruption(var3);
            }
        }
那么再跟进 **hudson.remoting.Command#readFrom** 就找到反序列化的触发点了。
##### 修复方式
[补丁地址](https://github.com/jenkinsci/jenkins/commit/36b8285a41eb28333549e8d851f81fd80a184076)
我们可以看到本次修复，实际上引入了 **CVE-2015-8103** 的黑名单，并且将 **java.security.SignedObject**
本次的反序列化绕过方法加入这个黑名单中。
### HTTP方式触发
#### CVE-2018-1000861
##### 动态路由分析
首先 **Jenkins** 会将所有请求交给`org.kohsuke.stapler.Stapler`来进行处理。
      Stapler
      org.kohsuke.stapler.Stapler
        default-encodings