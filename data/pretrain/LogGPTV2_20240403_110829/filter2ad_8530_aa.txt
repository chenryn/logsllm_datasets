**Author : Kai Song(exp-sky)、hearmen、salt、sekaiwu of Tencent Security Xuanwu
Lab  
来源：[腾讯安全玄武实验室](https://xlab.tencent.com/cn/2018/11/09/pay-attention-to-the-ethereum-hash-collision-problem-from-the-stealing-coins-incident/
"腾讯安全玄武实验室")**
### “盗币”
十一月六日，我们观察到以太坊上出现了这样一份[合约](https://etherscan.io/address/0x5170a14aa36245a8a9698f23444045bdc4522e0a#code
"合约")，经调查发现是某区块链安全厂商发布的一份让大家来“盗币”的合约。
    pragma solidity ^0.4.21;
    contract DVPgame {
        ERC20 public token;
        uint256[] map;
        using SafeERC20 for ERC20;
        using SafeMath for uint256;
        constructor(address addr) payable{
            token = ERC20(addr);
        }
        function (){
            if(map.length>=uint256(msg.sender)){
                require(map[uint256(msg.sender)]!=1);
            }
            if(token.balanceOf(this)==0){
                //airdrop is over
                selfdestruct(msg.sender);
            }else{
                token.safeTransfer(msg.sender,100);
                if (map.length =1*(10**18));
            require(blockNum>block.number);
            if(token.allowance(msg.sender,address(this))>0){
                token.safeTransferFrom(msg.sender,address(this),1*(10**18));
            }
            if (map.length  map[uint256(msg.sender)+x]);
            require(block.blockhash(map[uint256(msg.sender)+x])!=0);
            uint256 answer = uint256(keccak256(block.blockhash(map[uint256(msg.sender)+x])))%10000;
            if (x == answer) {
                token.safeTransfer(msg.sender,token.balanceOf(address(this)));
                selfdestruct(msg.sender);
            }
        }
    }
经过观察之后，我们在这个合约中，发现了我们之前研究的一个 EVM 存储的安全问题，即 EVM 存储中的 hash 碰撞问题。
首先，针对上面的合约，如果构造出 `x ==
uint256(keccak256(block.blockhash(map[uint256(msg.sender)+x])))%10000` 即可在
lottery 方法中获取到该合约中的以太币，但是这个 x 的值，只能通过不断的猜测去得到，并且概率微乎其微。
然后，我们发现在合约的 fallback 函数中，也存在一个 selfdestruct 函数可以帮助我们完成“盗币”任务，但是要求本合约地址在 token
合约中的余额为 0。
根据我们之前对于 EVM 存储的分析，我们发现在 guess 函数中存在对 map 类型数据任意偏移进行赋值
`map[uint256(msg.sender)+x] = blockNum;`，由于在 EVM 中，map 类型中数据存储的地址计算方式为
`address(map_data) = sha(key,slot)+offset`，这就造成了一个任意地址写的问题，如果我们能够覆盖到token
变量，就能向 token 写入我们构造的合约，保证 DVPgame 合约在我们构造合约中的余额为 0，这样就能执行 DVPgame 合约的
selfdestruct 函数完成“盗币”。
token 变量的地址为0，溢出之后可以达到这个值，即我们需要构造 `sha(msg.sender,slot)+x==2**256(溢出为0)`即可。
#### 深入分析
其实早在六月底的时候，经过对 ETH 以及其运行时环境 EVM 的初步研究，我们已经在合约层面和虚拟机层面分别发现了一些问题，其中变量覆盖以及Hash
碰撞问题是非常典型的两个例子。
### 变量覆盖
在某些合约中，我们发现在函数内部对 struct 类型的临时变量进行修改，会在某些情况下覆盖已有的全局变量。
    pragma solidity ^0.4.23; 
    contract Locked {
        bool public unlocked = false;    
        struct NameRecord { 
            bytes32 name;
            address mappedAddress;
        }
        mapping(address => NameRecord) public registeredNameRecord; 
        mapping(bytes32 => address) public resolve;
        function register(bytes32 _name, address _mappedAddress) public {
            NameRecord newRecord;
            newRecord.name = _name;
            newRecord.mappedAddress = _mappedAddress; 
            resolve[_name] = _mappedAddress;
            registeredNameRecord[msg.sender] = newRecord; 
            require(unlocked); 
        }
    }
合约的源码如上面所示，在正常情况下，由于合约并没有提供修改 unlocked
的接口，因此不太可能达到修改它的目的。但是实际上我们在测试中发现，只要调用合约的 register 方法就可以修改 unlocked。
### Hash 碰撞
经过对 EVM 的存储结构分析，我们发现 EVM 的设计思路中，在其存储某些复杂变量时可能发生潜在的 hash 碰撞，覆盖已有变量，产生不可预知的问题。
    pragma solidity ^0.4.23; 
    contract Project
    {
        mapping(address => uint) public balances; // records who registered names 
        mapping(bytes32 => address) public resolve; // resolves hashes to addresses
        uint[] stateVar;
        function Resolve() returns (bytes32){
            balances[msg.sender] = 10000000;   
            return sha3(bytes32(msg.sender),bytes32(0));
        }
        function Resize(uint i){
            stateVar.length = i;
        }
        function Rewrite(uint i){
            stateVar[i] = 0x10adbeef; 
        }
    }
上面的代码就存在类似的 hash 碰撞问题。查看合约源代码可以看到 balances 字段只能通过 Reslove 接口进行访问，正常情况下 balance
中存放的值是无法被修改的。但是在这个合约中，调用函数 Rewrite 对 stateVar 进行操作时有可能覆盖掉 balances 中的数据
### 背景分析
在 EVM 中存储有三种方式，分别是 memory、storage 以及 stack。
  1. memory : 内存，生命周期仅为整个方法执行期间，函数调用后回收，因为仅保存临时变量，故GAS开销很小
  2. storage : 永久储存在区块链中，由于会永久保存合约状态变量，故GAS开销也最大
  3. stack : 存放部分局部值类型变量，几乎免费使用的内存，但有数量限制
首先我们分析一下各种对象结构在 EVM 中的存储和访问情况
#### MAP
首先分析 map 的存储，
        struct NameRecord { 
            bytes32 name; 
            address mappedAddress;
        }
        mapping(bytes32 => address) public resolve; 
        function register(bytes32 _name, address _mappedAddress) public {
            NameRecord newRecord;
            newRecord.name = _name;
            newRecord.mappedAddress = _mappedAddress; 
            resolve[_name] = _mappedAddress;
        }
    }
我们在调试 storage 中 map 结构时发现，map 中数据的存储地址其实是 map.key 以及 map 所在位置 map_slot 二者共同的
hash 值，这个值是一个 uint256。即
    address(map_data) = sha(key,slot) 
并且我们同时发现，如果 map 中存储的数据是一个结构体，则会将结构体中的成员分别依次顺序存入 storage 中，存储的位置为 sha(key,slot)
+ offset，即是直接将成员在结构体中的偏移与之前计算的 hash 值相加作为存储位置。
这种 hash + offset 的 struct 存储方式会直接导致 sha3 算法的 hash 失去意义，在某些情况下产生
`sha(key1,slot) + offset == sha(key2,slot)` ，即 hash 碰撞。
#### ARRAY
接下来我们看一下 Array 的情况
调试中发现全局变量的一个定长 Array 是按照 index 顺序排列在 storage 中的。
如果我们使用 new 关键字申请一个变长数组，查看其运行时存储情况
        function GetSome() returns(uint){
            stateVar = new uint[](2);
            stateVar[1] = 0x10adbeef;
            //stateVar = [1,2,4,5,6]; // 这种方式和 new 是一样的
            return stateVar[1];
        }
调试中发现如果是一个变长数组，数组成员的存储位置就是根据 hash 值来选定的了, 数组的存储位置为
sha3(address(array_object))+index。数组本身的 slot 中所存放的只是数组的长度而已，这样也就很好理解为什么存放在
storage 中的变长数组可以通过调整 length 属性来自增。
变长数组仍依照 hash + offset 的方式存储。也有可能出现 hash 碰撞的问题。
#### ARRAY + STRUCT
如果数组和结构体组合起来，那么数据在 storage 中的索引将如何确定呢
        struct Person {
            address[] addr;
            uint funds;
        }    
        mapping(address => Person) public people;   
        function f() {
            Person p;
            p.addr = [0xca35b7d915458ef540ade6068dfe2f44e8fa733c,0x14723a09acff6d2a60dcdf7aa4aff308fddc160c];
            p.funds = 0x10af;
            people[msg.sender] = p;
        }
Person 类型的对象 p 第一个成员是一个动态数组 addr，存储 p 对象时，首先在 map 中存储动态数组：
    storage[hash(msg_sender,people_slot)] = storage[p+slot]
接着依次存储动态数组内容:
    storage[hash(hash(msg_sender,people_slot))] = storage[hash(p_slot)]; storage[hash(hash(msg_sender,people_slot))+1] = storage[hash(p_slot)+1];
最后存储 funds：
    storage[hash(msg_sender,people_slot)+1]