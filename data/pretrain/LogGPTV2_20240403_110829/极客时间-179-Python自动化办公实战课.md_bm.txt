# 返回取得的所有参数        return  parser.parse_args()    if __name__ == "__main__":        
# args 对象包含所有参数，属性是命令行参数的完整名称        args = args_opt()                
# 调用重命名函数，将命令行参数作为重命名函数的参数        rename(args.path, "."+args.ext)                
# 输出改名之后的结果        print(os.listdir(args.path))通过重构后，代码的整体结构就变成了导入库、函数定义、函数调用三个部分，对经常需要变动的替换路径和扩展名，也从修改变量改为命令行参数，无论从阅读代码还是后续继续扩展代码，整体结构都要比顺序执行代码逻辑更清晰。小结最后让我来为你总结一下，这一讲我为你讲解了使用 Python如何实现批量改名，以及如何对越写越长的代码进行重构。批量改名属于操作系统中的文件相关操作，这类功能在编程语言中往往会提供事先定义好的编程接口，无需自己实现从应用层到操作系统的全部代码，建议你在遇到这类需求时，先从标准库中搜索相关模块，再从第三方库搜索，尽量避免手工编写，提高工作效率。为了让批量改名的脚本逻辑更清晰，也更方便执行，我对代码还进行了三个方面的重构：1.       通过使用函数增加代码的逻辑性。        2.       通过"        **name**        "变量增加了程序入口，便于你直接找到程序开始执行的位置。        3.       通过增加命令行参数，让你不用修改代码，就能实现函数的参数的修改。        增加程序的可读性、提高执行便利性也能为以后编写代码效率提升带来改进，这些改进会在后续章节代码越来越多的时候起到更明显的效果。我把这节课的相关代码都放在了 GitHub上，供你学习参考。思考题最后我来为你留一道比较有趣的思考题，你能否通过命令行为代码指定两个参数，当这两个参数为整数时，脚本自动计算这两个参数的"和"和"差"，并将执行结果打印到屏幕上。欢迎把你的思考和想法写在评论区，我们一起交流讨论。此外，你还可以点击课程详情页的"戳我进群"，然后扫描二维码，加入我们的课程读者群，我也会在群里为你解疑答惑。我们下节课再见！