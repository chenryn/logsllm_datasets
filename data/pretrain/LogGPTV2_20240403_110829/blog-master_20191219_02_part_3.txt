- base_nb_num：邻居数，第0层 ```2 * base_nb_num:```，高层为base_nb_num:。要达到order by limit N的最好效果时， base_nb_num最好大于N     
- ef_build：   build索引的时候第0层的堆长度（构图时，0层邻居点来构图，上层都是1个点），越大效果越好，build越慢。```不是最终索引存的内容，只是build时构图的一个参数。```  要达到较好的构图效果，建议ef_build大于base_nb_num，否则要到下层去提取满足base_nb_num个数的邻居点，精度就没有那么高了。        
- ef_search：  查询的堆长度，越大效果越好，search性能越差，可在查询时指定，该处为默认值。 查询时从上层往下查，查到第一层为止（第0层存的是heap table ctid(s)），返回第0层的ctids。   如果要保证order by limit N可以返回N条记录， ef_search要大于N       
- base64_encoded：数据输入输出格式是否采用base64编码格式。     
搜索时从上层往下搜索，一直搜索到第1层，返回第0层的ctids。     
## ivfflat 索引存储结构介绍    
![pic](20191219_02_pic_002.jpg)    
IVFFlat算法  
IVFFlat是IVFADC[2]的简化版本，适合于召回精度要求高，但对查询耗时要求不严格（100ms级别）的场景。相比其他算法，IVFFlat算法具有以下优点：  
- 如果查询向量是候选数据集中的一员，那么IVFFlat可以达到100%的召回率。  
- 算法简单，因此索引构建更快，存储空间更小。  
- 聚类中心点可以由使用者指定，通过简单的参数调节就可以控制召回精度。  
- 算法参数可解释性强，用户能够完全地控制算法的准确性。  
IVFFlat的算法原理参考下图。  
![pic](20191219_02_pic_003.png)    
算法流程说明：  
1、高维空间中的点基于隐形的聚类属性，按照kmeans等聚类算法对向量进行聚类处理，使得每个类簇有一个中心点。  
2、检索向量时首先遍历计算所有类簇的中心点，找到与目标向量最近的n个类簇中心。  
3、遍历计算n个类簇中心所在聚类中的所有元素，经过全局排序得到距离最近的k个向量。  
说明  
- 在查询类簇中心点时，会自动排除远离的类簇，加速查询过程，但是无法保证最优的前k个向量全部在这n个类簇中，因此会有精度损失。您可以通过类簇个数n来控制IVFFlat算法的准确性，n值越大，算法精度越高，但计算量会越大。  
- IVFFlat和IVFADC[2]的第一阶段完全一样，主要区别是第二阶段计算。IVFADC通过积量化来避免遍历计算，但是会导致精度损失，而IVFFlat是暴力计算，避免精度损失，并且计算量可控。  
## hnsw 索引存储结构介绍    
![pic](20191219_02_pic_001.jpg)    
HNSW算法  
HNSW（Hierarchical Navigable Small World）算法适合超大规模的向量数据集（千万级别以上），并且对查询延时有严格要求（10ms级别）的场景。  
HNSW基于近邻图的算法，通过在近邻图快速迭代查找得到可能的相近点。在大数据量的情况下，使用HNSW算法的性能提升相比其他算法更加明显，但邻居点的存储会占用一部分存储空间，同时召回精度达到一定水平后难以通过简单的参数控制来提升。  
HNSW的算法原理参考下图。  
![pic](20191219_02_pic_004.png)    
算法流程说明：  
1、构造多层图，每层图都是下层图的一个缩略，同时构成下层图的跳表，类似高速公路。  
2、从顶层随机选中一个点开始查询。  
3、第一次搜索其邻居点，把它们按距离目标的远近顺序存储在定长的动态列表中，以后每一次查找，依次取出动态列表中的点，搜索其邻居点，再把这些新探索的邻居点插入动态列表，每次插入动态列表需要重新排序，保留前k个。如果列表有变化则继续查找，不断迭代直至达到稳态，然后以动态列表中的第一个点作为下一层的入口点，进入下一层。  
循环执行第3步，直到进入最底层。  
说明：  
- HNSW算法是在NSW算法的单层构图的基础上构造多层图，在图中进行最近邻查找，可以实现比聚类算法更高的查询加速比。  
两种算法都有特定的适用业务场景，例如IVFFlat适合高精图像对比场景，HNSW适合搜索推荐的召回场景。后续会陆续集成业界领先的算法实现到PASE中。  
## 如何生成图片多维向量    
开源很多支持图片转向量的，注意要转化为归一化向量。例如Tensflow提供了图像转向量的接口。        
## 注意事项
因为在创建索引时需要有模板数据来构建图或聚集，所以一定要在表里有一定数据量之后再创建索引， 例如有10万条记录之后再去创建。 如果你的表本身就没多少记录， 那么可以在导入后再创建索引。   
索引创建完后， 新插入记录， 不需要再建索引。   
## 思考    
数据库内置图像识别有什么火花?      
图像以外的内容，例如其他字段属性，可以同时用于查询过滤。减少交互次数提高效率。         
计算存储一起效率高，图像识别重查询轻更新，通过读写分离很容易扩展。         
## 参考    
[《PostgreSQL 多维、图像 欧式距离、向量距离、向量相似 查询优化 - cube,imgsmlr - 压缩、分段、异步并行》](../201811/20181129_01.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 3 - citus 8机128shard (4亿图像)》](../201809/20180904_04.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)      
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 1 - 单机单表 (4亿图像)》](../201809/20180904_02.md)      
[《PostgreSQL 相似搜索插件介绍大汇总 (cube,rum,pg_trgm,smlar,imgsmlr,pg_similarity) (rum,gin,gist)》](../201809/20180904_01.md)      
[《PostgreSQL 多维空间几何对象 相交、包含 高效率检索实践 - cube》](../201810/20181015_01.md)      
[《PostgreSQL 相似人群圈选，人群扩选，向量相似 使用实践 - cube》](../201810/20181011_01.md)      
[《PostgreSQL cube 插件 - 多维空间对象》](../201709/20170902_01.md)      
[《17种文本相似算法与GIN索引 - pg_similarity》](../201705/20170524_01.md)      
[《从相似度算法谈起 - Effective similarity search in PostgreSQL》](../201612/20161222_02.md)      
了解向量索引：    
https://www.milvus.io/en/    
https://www.milvus.io/blog/    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")