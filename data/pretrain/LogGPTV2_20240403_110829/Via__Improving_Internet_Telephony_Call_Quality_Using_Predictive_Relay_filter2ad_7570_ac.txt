together with the observation on the relatively low persis-
tence of poor performance (Figure 6), suggests that the relay
selection should be done dynamically, rather than statically.
4 VIA Relay Selection
Having shown that relaying through VIA could provide sig-
niﬁcant gains, we now devise a practical algorithm for relay
selection. We begin by formulating the problem of relay se-
lection. We describe two classes of strawman approaches
— purely predictive and exploration-based — and highlight
limitations of both classes. We then present the core intu-
ition behind our relay selection algorithm, called prediction-
guided exploration and then describe the solution.
4.1 Problem formulation
Our goal is to assign each call to a particular relaying op-
tion as discussed in §3.1. Recall that a relaying option can
use the default path, use a speciﬁc one-hop relay node (i.e.,
bouncing relaying), or use a speciﬁc pair of relay nodes (i.e.,
transit relaying). Let C denote the set of calls we want to op-
 0 20 40 60 80 100RTTLossJitter% of reductionMedian90th%99th% 0 10 20 30 40 50 60RTTLossJitterAt leastone bad% Reduction of PNR 0 0.2 0.4 0.6 0.8 0 5 10 15 20CDFDuration (days) in which the best relayingoption remain the same for a src-dst AS pairRTTLossJittertimize and let R denote the set of available relaying options.
We use c ∈ C and r ∈ R to denote a speciﬁc call and re-
laying option, respectively. Let Q(c, r) denote the expected
value of a network metric for c when using r (a smaller value
is better). We assume that the relaying decisions for calls are
independent; i.e., the performance of a call is not impacted
by the relaying decisions made for other calls.
The goal of VIA is to assign optimal relaying options for
each c ∈ C. Let Assign : C → R denote the assignment
function output by some algorithm and let Assign(c) be the
relaying option assigned for call c ∈ C. Formally, our ob-
jective is to ﬁnd the optimal assignment
(cid:88)
c∈C
arg min
Assign∈RC
Q(c, Assign(c))
This is a minimization problem because a lower value is bet-
ter for each of our network quality metrics Q.
4.2 Strawman approaches
We can consider two classes of approaches for the optimal
assignment of relaying options to calls:
1. Exploration-based: One approach is to set aside a frac-
tion of the calls for measurement-based exploration of
the performance of each possible relaying option for
every source-destination pair. For instance, for every
AS-pair and every possible relaying option r, we will
explicitly use some of the calls to explore the option
and measure the performance, Q(c, r).
2. Prediction-based: An alternative to the exploration-
based approach is to use the recent history of observed
call performance. Suppose, VIA has available as in-
put call records with measured performance H. Then,
we can use suitable prediction algorithms to predict the
performance Q(c, r) for every combination, and select
the option that has the best predicted performance.
Unfortunately, we observe in practice that both classes of
approaches individually have very poor accuracy in predict-
ing Q(c, r). This ultimately results in a poor assignment
strategy and poor call quality. There are two key reasons.
First, there is a fundamental problem because of skew
in data density. Speciﬁcally, there is a substantial differ-
ence in the number of call samples available across differ-
ent source-destination pairs, both for the direct path and for
the various relayed paths. This variability arises because
of the large space of choices: N end-points and M relay
strategies lead to O(N 2M ) choices. Furthermore, certain
end-points make/receive fewer calls, yielding fewer samples.
Second, there is inherent variability in the observed perfor-
mance. Consequently, to estimate Q(c, r), we need a sig-
niﬁcant number of samples before the empirically observed
values can converge to the true values.
The skew and the variability make prediction inaccurate
and exploration ineffective and/or expensive (in terms of the
effort to be expended).
Figure 10: Overview of VIA relay selection based on
prediction-guided exploration.
4.3 Overview of our approach
The key intuition behind our solution is the empirical ob-
servation that even though a prediction-based approach may
not predict the optimal choice, the optimal is likely in the top
few of its predictions. In other words, if we look at the top-k
choices (those who have the best predicted performances),
the optimal choice will likely be a member of that set.
We can exploit this observation to prune the search space
for our exploration step. That is, the exploration approach
does not need to blindly explore the set R of all possible
strategies, but instead can focus on a much smaller set of
top-k predictions. We refer to this as a prediction-guided ex-
ploration approach. The top-k pruning is not to be confused
with a similar machine learning problem which seeks to ﬁnd
k best options (e.g., [11]). In contrast, we care more about
the best relaying option – our top-k candidates may have
bad options, but the best relaying option is very likely to be
among them, and can be found by exploration techniques.
Figure 10 depicts the main stages in VIA, and Algorithm 1
shows the pseudocode. In a nutshell, the logical stages are:
1. gathering performance information from call history,
2. using network tomography to expand the coverage of
the information from call history,
3. using the (expanded) history information to predict per-
formance and prune all but the most promising top-k
relaying options, and
4. perform exploration-exploitation on the top-k relay-
ing options as well as all relaying options using multi-
armed bandit (MAB) techniques.
Finally, the observed performance of each call will be
stored in call history, i.e., fed back to stage 1. Stages 2 and
3 (shown in light blue) are performed at a periodicity of T
hours (by default 24 hours), i.e., the pruned list of candidate
relaying options are refreshed every T hours. Stages 1 and 4
(shown in light green) are performed on a per-call basis. We
discuss these stages in the sub-sections that follow.
4.4 Prediction-based pruning
Using call history data, VIA proceeds to predict, with conﬁ-
dence intervals, the performance between a source-destination
pair over each relaying option: direct paths, and each transit
and bouncing relay.
Real%time)relay)selection)(§4.6)Runs+per+callPrediction%based)Pruning)(§4.5)Updates+every+ThoursCall+historyStage)1:)Feedback+of+performance+informationStage)2:)TomographyCbased+coverageexpansionStage)3:)Selection+of+top+kchoices+based+on+predictionStage)4a:)Guided+exploration+on+the+top+k+choicesStage)4b:)General+Exploration+on+all+choicesFeedback+of+performance+information*/
*/
*/
*/
*/
Input: Set of calls C to be assigned to relaying options R,
Output: A relay assignment, Assign, where each call c ∈ C is
and set of historical calls H
assigned a relay option Assign(c) ∈ R
/* Stage 2:
Tomography-based performance
predictor trained from H
1 Pred ← BuildPredictor(H)
/* Stage 3:
Pick Top-k candidates based on
history-based prediction.
2 Assign ← ∅
3 for (s, d) do
4
TopK← GetTopK(s, d, R, Pred)
/* See Algorithm 2
for c ∈ C do
if RandomF loat(0, 1)  h then
else
break
h ← Predhigh(s, d, r)
Remained ← Remained \ {r}
TopK ← TopK ∪ {r}
return TopK
Algorithm 2: Predicting the top-k choices.
process assigns a fraction of calls to explore different re-
lay options (-greedy) and the rest to exploit the best de-
cision.3 As brieﬂy mentioned earlier, standard exploratory
approaches are slow to converge (§4.2) and often fail to se-
lect the best decision (§5.3). This is because exploring in
presence of high variability requires a lot of samples, which
is infeasible due to data sparseness and skew.
Algorithm 3 shows the pseudocode of our approach. Here,
we choose the UCB1 algorithm [9] as our basic starting point.
UCB1 is well-suited for our purpose because it does not re-
quire explicitly specifying the fraction of samples for explo-
ration. Instead, it transparently combines both exploration
as well as its exploitation decisions. We make two modiﬁca-
tions to the basic algorithm in order to make it work well in
our context.
1. UCB1 normalizes rewards (i.e., performance) from each
bandit (i.e., relay option) to be between 0 and 1. In
our situation, however, normalizing based on the full