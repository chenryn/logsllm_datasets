(cid:48)
(cid:48)
2[0]
1[1] + β · c
C2[1] = (1 − β) · c
(cid:48)
(cid:48)
2[1]
1 + (1 − β) · c(cid:48)
Observe for this shuﬄe trick C1 = β · c(cid:48)
2 = β · c(cid:48)
Therewith, we can now derive the Groth and Sahai representation:
1 + c(cid:48)
2 − β · c(cid:48)
2.
1. Correctness of C1[0]
secret: x1 = c(cid:48)
public: γ1 = O, γ2,1 = 0, γ2,2 = 1, γ2,3 = −1, Γ = ( 1 −1 0 ), t = O
2[0], x3 = C1[0], y1 = β
1[0], x2 = c(cid:48)
2. Correctness of C1[1]
secret: x1 = c(cid:48)
public: γ1 = O, γ2,1 = 0, γ2,2 = 1, γ2,3 = −1, Γ = ( 1 −1 0 ), t = O
2[1], x3 = C1[1], y1 = β
1[1], x2 = c(cid:48)
24
3. Correctness of C2[0]
secret: x1 = c(cid:48)
public: γ1 = O, γ2,1 = 1, γ2,2 = 0, γ2,3 = −1, Γ = ( −1 1 0 ), t = O
2[0], x3 = C2[0], y1 = β,
1[0], x2 = c(cid:48)
4. Correctness of C2[1]
secret: x1 = c(cid:48)
public: γ1 = O, γ2,1 = 1, γ2,2 = 0, γ2,3 = −1, Γ = ( −1 1 0 ), t = O
2[1], x3 = C2[1], y1 = β,
1[1], x2 = c(cid:48)
Equations above are for proving a single crossbar switch. Proof ProofShuﬄe
for n ciphertexts is simply the concatenation of proofs of the n·log n− n
2 crossbar
switches in the permutation network. The last sequence of crossbar switches in
the permutation network outputs shuﬄed ciphertexts: in the equations above,
there will be no secret x3 = C, but instead public t will be C.
Function Benes we use in Section 4.3 to shuﬄe ciphertexts of vi’s bits outputs
both shuﬄed ciphertexts Cj and the proof of shuﬄe for the whole permutation
(n · log n − n
2 proofs of crossbar switches).
5.4.4 Proving a Shuﬄe of Ciphertext Sequences (ProofShuﬄe∗ )
outputs C(cid:48) = {(Cπ(j),i,π(cid:48)
With function Benes, we generate and prove a shuﬄe of (cid:96) ciphertexts which are
encryptions of bits vi,j. We extend the idea behind this proof to also prove the
shuﬄe of n − 1 DGK evaluations in Round 3 (Algorithm 4). With this shuﬄe
), Pi shuﬄes sequence C = {(Cj,i,1, . . . , Cj,i,(cid:96))}∀j(cid:54)=i. Sequence C
∗
(called Shuﬄe
comprises n − 1 elements which are sub-sequences, each of (cid:96) ciphertexts. The
shuﬄe shuﬄes both indices j and positions of encrypted bits for each Cj,i,u. So,
j ((cid:96)))}∀j(cid:54)=i for randomly chosen
∗
Shuﬄe
permutations π and π(cid:48)
j.
To shuﬄe C using a Beneˇs permutation network, our idea is, ﬁrst, to treat
a sequence of (cid:96) ciphertexts (Cj,i,1, . . . , Cj,i,(cid:96)) as a single input to a crossbar
switch. Again, each crossbar switch will ﬂip its two inputs, two sequences of
(cid:96) ciphertexts each, depending on a single random bit β as above.
If β = 0,
the switch swaps the two sequences. Before the actual shuﬄe, we need to blind
each ciphertext Cj,i,u by multiplying both sides of the ciphertext with a random
j (1), . . ., Cπ(j),i,π(cid:48)
$← Zp.
∗
Function Benes
Rj,i,u
takes as an input sequence C and outputs blinded, shuf-
ﬂed sequence C(cid:48) together with a ZK proof of correctness ProofShuﬄe∗ . We
construct ProofShuﬄe∗ as a simple concatenation of proofs ProofBlind and then
(n − 1) · log (n − 1) − n−1
2 ProofShuﬄe for the individual crossbar switches of the
permutation network. Therewith, we realize and prove correctness of the ﬁrst
permutation π and blinding of all ciphertexts. We then also shuﬄe and prove
positions of encrypted bits within sequences (Cπ(j),i,1, . . . , Cπ(j),i,(cid:96)) using n − 1
diﬀerent Beneˇs permutation networks of (cid:96) inputs, each. Thus, we generate and
∗
prove correctness of permutations π(cid:48)
includes
the n − 1 proofs of an (cid:96) input Beneˇs permutation network for that, too.
j. The output of function Benes
To enable veriﬁcation of ProofShuﬄe∗ , note that we need to publish commit-
ments to all β and all random Rj,i,u on the blockchain. We also prove on the
25
blockchain that the β are bits using ProofBit and prove correct blinding using
ProofBlind. To help readability, we have omitted repeating details of these proofs
in Algorithm 4.
5.4.5 Arbitrary n
While the above standard Beneˇs permutation networks require the input set size
to be a power of 2, there exist extensions for arbitrary sizes. They are eﬃcient
and require only up to (cid:98)n · log n − n
without putting constraints on bit length (cid:96) or the number of parties n.
2(cid:99) crossbar switches [22]. So, we can shuﬄe
5.5 Proving Decryption Proof Decrypt
Pi proves that a ciphertext Cﬁnal = C[0] · ski for the left-hand side of another
ciphertext C and its secret key ski. Again, this is just a Groth and Sahai proof
of knowledge of exponent for ECDLP.
1. Cﬁnal
secret: y = ski
public: γ1 = C[0], t = Cﬁnal
6 Security Analysis
We prove Theorem 1 using a simulation-based proof in the hybrid model [42]. In
the hybrid model, simulator S generates messages of honest parties interacting
with malicious parties and the trusted third party T T P , but we treat ZK proofs
([36, 50]) as oracle functionalities. Simulator S does not use inputs of honest
parties (except for forwarding to the T T P which does not leak any information),
so the protocol does not reveal any information except the result, i.e., the output
of the T T P . Messages generated by S must be indistinguishable from messages
in the real execution of BOREALIS.
Proof of Theorem 1. Let P be the set of all Parties and P be the parties con-
trolled by adversary A. We prove
IDEALFkth-Ideal,S (v1, . . . , vn) ≡ REALΠBOREALIS,A(v1, . . . , vn).
I) In the ﬁrst round of the protocol, malicious parties Pi commit to their
input, including their public key pki, an encryption of Epki(vi,j) and ZK proofs
of proper integer encryption (ProofBit and ProofEnc) and correct VSS shares Y
ProofVSS. If veriﬁcation of either of the ZK proofs ProofBit, ProofEnc, ProofVSS
fails, we treat the value vi = ⊥, since it is non-recoverable by honest parties and
exclude Pi from further participation in the protocol. If the veriﬁcation succeeds,
S extracts vi from the oracle functionality of the ZK proof ProofEnc and sends
it to the T T P . Since S forwards the honest parties’ input to T T P , it receives
the output OU T P U T of Fkth-Ideal from the T T P .
If the veriﬁcation of any
further ZK proof, in this or a subsequent step, fails, we invoke an input recovery
protocol for vi using VSS shares Y. S can simulate messages from honest parties,
26
since they are either semantically-secure ciphertexts under honest parties’ keys,
computationally-hiding commitments or ZK proofs.
II) In the second round, malicious parties Pi need to prove correctness of
their messages in ZK. As before, we invoke an input recovery protocol on failure.
S simulates messages from the honest parties as follows. The ciphertexts
under the malicious parties’ keys are simulated with random plaintexts which
match comparison results from OU T P U T ; they are the comparison results be-
tween vi and vj from the honest parties encrypted under the malicious parties’
public keys pki. The remainder are ZK proofs or computationally-hiding com-
mitments.
III) In the third round, malicious parties Pi need to again prove the correct-
ness of their messages in ZK. S simulates messages from the honest parties, since
revealed plaintext information, ι, and the comparison of vj from the honest par-
ties to vι can be derived from OU T P U T . S then simulates the corresponding
ZK proofs and computationally-hiding commitments.
7 Evaluation
In each round of BOREALIS, each party’s computation time is dominated by
preparing and publishing Groth and Sahai ZK proofs. To indicate BOREALIS’
practicality in real-world scenarios, we have therefore implemented and bench-
marked the ZK proofs of this paper. The source code is available for download
at [17]. In the following, our goal is estimating for up to which number of sup-
pliers n and bit length (cid:96) BOREALIS is practical. That is, for which values
of n, (cid:96) each party’s total computation time is below Bitcoin’s or Ethereum’s
block intervals.
All proofs are implemented on top of Bazin [7]’s general framework for Groth
and Sahai proofs. For its underlying cryptographic primitives, this framework
employs the MIRACL library [46]. Our benchmarks were run with Fp254BNb,
i.e., a standard 128 bit security Barreto-Naehrig Type-3 elliptic curve, Ate pair-
ing, and SHA256 as hash function. Being a Type-3 curve, the SXDH assump-
tion holds. Benchmarks were performed on a Linux laptop with 2.20 GHz Intel
i7-6560U CPU. Table 1, which we have moved to Appendix A due to space con-
straints, summarizes benchmark results. For each ZK proof, we measure proof
computation time, averaged over 100 runs, and total proof size. Note that our
CPU features 4 cores, so we can independently compute 4 ZK proofs at the
same time. Also note that total time and size of a Groth and Sahai system
of equations is linear in the number of equations and variables (cf. Figure 3
in [36]). So, total time and size for each party in each round is a simple linear
combination of the individual proofs from Table 1.
First round: Pi computes one ProofECDLP for their private key, (cid:96) ProofBit for its
own input integer vi, (n − 1) · ((cid:96) · log (cid:96) − (cid:96)
2 ) ProofBit for the β, and (cid:96) ProofEnc to
prove correct encryption. Our variation of Schoenmakers’s ProofVSS corresponds
to one ProofECDLP.
27
Second round: Pi computes (cid:96) · (n − 1) ProofDGK. Yet, computation time of
ProofDGK itself increases linearly in (cid:96). Table 1 shows computation time for a
2 bit proof, so we have to multiply this computation time by l
2 to estimate time
2 · (n− 1) times ProofDGK of Table 1.
for arbitrary (cid:96). So, Pi is busy computing (cid:96)2
In addition, Pi computes (n − 1) · ((cid:96) · log (cid:96) − (cid:96)
Third round: Here, Pi computes a single ProofShuﬄe∗ . This comprises (cid:96) · (n −
1) · (log (n − 1) − n−1
2 ) ProofShuﬄe to shuﬄe all length (cid:96) ciphertext sequences,
(n− 1)· log (n − 1)− n−1
2 ProofBit for the individual crossbar switches, (n− 1)· (cid:96)
ProofBlind to blind all ciphertexts, and then (n − 1) · ((cid:96) · log (cid:96) − (cid:96)
2 ) ProofShuﬄe
2 ) ProofBit for the n − 1 permutation networks. Finally,
plus (n − 1) · ((cid:96) · log (cid:96) − (cid:96)
Pi computes up to (cid:96) ProofDecrypt.
2 ) ProofShuﬄe.
Due to ProofDGK and ProofShuﬄe∗ , computation times in the second and third
rounds are signiﬁcantly higher than in the ﬁrst round. As ProofDGK computa-
tion time is quadratic in (cid:96), either the second or the third round take longest.
Therefore, Figure 1 depicts the maximum time of these two rounds for various
combinations of the number of parties n and typical bit lengths (cid:96). Both axes are
scaled logarithmically. The ﬁgure also shows block interval times for Ethereum
(≈ 15 s [30]) and Bitcoin (≈ 10 min [13]).
In scenarios with low resolution integers ((cid:96) = 8), our prototypical, non-
optimized implementation of BOREALIS is very practical, supporting several
hundreds of parties (n ≈ 800) with Bitcoin, and n ≈ 30 parties with Ethereum.
Even in the other extreme with ﬁne-grained, high precision integers ((cid:96) = 32),
BOREALIS remains practical and copes with ≈ 200 parties for Bitcoin. Only
in the worst-case situation with (cid:96) = 32 bit and Ethereum’s low block interval
times, our implementation is practical for only a small number of parties, e.g.,
n up to 8.
8 Conclusion
In this paper, we have built BOREALIS, a generic, eﬃcient building block for
sealed bid auctions on blockchains. We perform secure comparisons of integer
bids and enable ZK proofs of the kth-rank of an integer among n parties. BORE-
ALIS completes in a constant number of only 3 (in case of malicious behavior 4)
rounds. Moreover, its computational requirements suit several dozens of parties
and large integers. Such a low number of rounds permits running more complex
auctions on blockchains. We achieve these properties by carefully engineering
several cryptographic primitives, like ECC Elgamal, homomorphic comparisons,
and Groth and Sahai proofs.
Acknowledgments: This work was partially supported by NSERC grants RGPIN-
05849, RGPAS-507908, and DGDND-00085.
28
References
[1] G. Aggarwal, N. Mishra, and B. Pinkas. Secure computation of the kth-
ranked element. In International Conference on the Theory and Applica-
tions of Cryptographic Techniques (EUROCRYPT), pages 40–55, 2004.
[2] G. Aggarwal, T. Feder, K. Kenthapadi, R. Motwani, R. Panigrahy,
D. Thomas, and A. Zhu. Anonymizing tables. In International Confer-
ence on Database Theory, pages 246–258, 2005.
[3] M. Ajtai, J. Koml´os, and E. Szemer´edi. An o(n log n) sorting network. In
Proceedings of the 15th Annual ACM Symposium on Theory of Computing,
25-27 April, 1983, Boston, Massachusetts, USA, pages 1–9, 1983.
[4] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek. Secure
multiparty computations on bitcoin. In Security and Privacy (SP), 2014
IEEE Symposium on, pages 443–458, 2014.
[5] T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. High-throughput
semi-honest secure three-party computation with an honest majority. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Com-
munications Security, pages 805–817, 2016.
[6] Auctionity. The world’s largest blockchain auction house for NFTs, 2019.
https://www.auctionity.com/.
[7] R. Bazin. Eﬃcient implementation of the Non-Interactive Zero-Knowledge
proofs invented by Groth and Sahai , 2016. https://github.com/baz1/
GS-NIZK.
[8] D. Beaver, S. Micali, and P. Rogaway. The round complexity of secure
protocols. In Proceedings of the twenty-second annual ACM symposium on
Theory of computing, pages 503–513, 1990.
[9] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for
non-cryptographic fault-tolerant distributed computation. In Proceedings
of the twentieth annual ACM symposium on Theory of computing, pages
1–10, 1988.
[10] V.E. Beneˇs. Optimal rearrangeable multistage connecting networks. The
Bell System Technical Journal, 43(4):1641–1656, 1964. ISSN 0005-8580.