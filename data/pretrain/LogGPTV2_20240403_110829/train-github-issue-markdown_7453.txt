### 问题描述

在使用 Axios 版本 0.19.x 时，通过 `axios.create` 创建的自定义配置在拦截器中丢失。

### 代码示例

```javascript
const client = axios.create({
  custom1: 'xxx'
});

client.interceptors.response.use((res) => {
  // 在这里，config.custom1 是 undefined
  // 但是 config.custom2 是 'xxx'
  console.log(res.config.custom1); // 输出: undefined
  console.log(res.config.custom2); // 输出: xxx
  return res.data;
});

client.get('/xxx', { custom2: 'xxx' });
```

### 问题分析

在上述代码中，`axios.create` 创建了一个新的 Axios 实例，并传递了自定义配置 `custom1: 'xxx'`。然而，在响应拦截器中，`res.config` 对象并没有包含 `custom1` 属性，而是只包含了请求时传递的 `custom2` 属性。

### 解决方案

要确保自定义配置在拦截器中可用，可以在创建 Axios 实例时将自定义配置添加到默认配置中，并在拦截器中进行访问。

#### 修改后的代码

```javascript
const client = axios.create({
  custom1: 'xxx',
  // 其他默认配置...
});

// 请求拦截器
client.interceptors.request.use((config) => {
  // 确保自定义配置在请求配置中
  config.custom1 = client.defaults.custom1;
  return config;
});

client.interceptors.response.use((res) => {
  // 在这里，config.custom1 和 config.custom2 都是可用的
  console.log(res.config.custom1); // 输出: xxx
  console.log(res.config.custom2); // 输出: xxx
  return res.data;
});

client.get('/xxx', { custom2: 'xxx' });
```

### 总结

通过在请求拦截器中将自定义配置添加到请求配置中，可以确保这些配置在响应拦截器中仍然可用。这样可以避免自定义配置在拦截器中丢失的问题。