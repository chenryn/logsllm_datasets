Docker 能够在单台机器上运行，或者作为所有运行 Docker 的机器集群中的一个节点运行。这个集群叫做**蜂群**，在蜂群模式下运行不需要额外安装任何东西。你在一组机器上安装 Docker 在第一台机器上，你运行`docker swarm init`来初始化集群，在其他机器上，你运行`docker swarm join`来加入集群。
我将在[第 7 章](07.html)、*中深入介绍集群模式，用 Docker Swarm、*编排分布式解决方案，但在进一步了解 Docker 平台内置的高可用性、安全性、可扩展性和弹性之前，了解这一点很重要。您的 Docker 之旅将有望引导您走向生产，在那里您将受益于所有这些属性。
在集群模式下，Docker 使用完全相同的工件，因此您可以在一个 20 节点的集群中跨 50 个容器运行您的应用，并且功能将与您在笔记本电脑上的单个容器中运行时相同。在 swarm 上，您的应用性能更高，对故障的容忍度更高，您将能够自动滚动更新到新版本。
群集中的节点对所有通信使用安全加密，对每个节点使用可信证书。您也可以将应用机密作为加密数据存储在群中，这样就可以安全地保存数据库连接字符串和应用编程接口密钥，群只会将它们传递给需要它们的容器。
Docker 是一个成熟的平台。它在 2016 年是 Windows Server 的新版本，但在 Linux 上发布了四年后才出现在 Windows 上。Docker 是用 Go 编写的，Go 是一种跨平台语言，只有少数代码是 Windows 特有的。当您在 Windows 上运行 Docker 时，您运行的是一个已经在生产中成功使用多年的应用平台。
# 库比涅斯的笔记
Docker Swarm 是一个非常受欢迎的容器编排器，但它不是唯一的一个。Kubernetes 是一个增长巨大的替代方案，现在大多数公共云都提供托管的 Kubernetes 服务。在撰写本书时，Kubernetes 是一个只支持 Linux 的编排器，Windows 支持仍处于测试阶段。在您的容器之旅中，您可能会听到很多关于 Kubernetes 的信息，因此了解它与 Docker Swarm 的比较是值得的。
首先是相似性——他们都是容器编排者，这意味着他们是负责大规模生产中运行容器的机器集群。它们都运行 Docker 容器，您可以对 Docker Swarm 和 Kubernetes 使用相同的 Docker 映像。它们都是基于开源项目构建的，并且符合**开放容器倡议** ( **OCI** )，因此无需担心供应商锁定。您可以从 Docker Swarm 开始，然后转到 Kubernetes，反之亦然，而无需更改您的应用。
区别在于。Docker Swarm 非常简单；您可以用几行标记来描述在 swarm 上的容器中运行的分布式应用。要在 Kubernetes 上运行相同的应用，您的应用描述将是标记的四倍，甚至更多。Kubernetes 比 swarm 有更多的抽象和配置选项，所以有些事情你可以用 Kubernetes 做，但不能用 swarm 做。这种灵活性的代价是复杂性，Kubernetes 的学习曲线比 swarm 陡峭得多。
Kubernetes 将很快支持 Windows，但在一段时间内，它不太可能在 Linux 服务器和 Windows 服务器之间提供完全的功能兼容性。在此之前，使用 Docker Swarm 很好——Docker 有数百个企业客户在 Docker Swarm 上运行他们的生产集群。如果你确实发现 Kubernetes 有一些你需要的额外功能，一旦你对 swarm 有了很好的理解，学习 Kubernetes 就会容易得多。
# 在 Windows 上运行 Docker
在 Windows 10 上安装 Docker 很容易，使用*Docker Desktop*–一个 Windows 软件包，它设置了所有先决条件，部署了 Docker 社区引擎的最新版本，并为您提供了一个 UI，其中包含一些管理映像库和远程集群的有用选项。
在生产中，您应该理想地使用没有用户界面的安装。这减少了攻击面和服务器需要的 Windows 更新数量。如果您将所有应用移动到 Docker，则不需要安装任何其他 Windows 功能；您将只需要让 Docker 引擎作为 Windows 服务运行。
我将介绍这两个安装选项，并向您展示在 Azure 中使用虚拟机的第三个选项，如果您想尝试 Docker，但无法访问 Windows 10 或 Windows Server 2019，这将非常有用。
There is a fantastic online Docker playground called Play with Docker at [https://dockr.ly/play-with-docker](https://dockr.ly/play-with-docker). Windows support is expected soon, and it's a great way to try Docker without having to make any investment – you just browse the site and get started.
# Docker 桌面
Docker Desktop 可从 Docker Hub 获得–您可以通过导航至[https://dockr.ly/docker-for-windows](https://dockr.ly/docker-for-windows)找到它。您可以在**稳定频道**和**边缘频道**之间进行选择。这两个频道都为您提供了社区 Docker Engine，但 Edge 频道遵循每月发布周期，您将获得实验性功能。稳定频道跟踪 Docker 引擎发布周期，每季度更新一次。
You should use the Edge channel in development if you want to work with the latest features. In test and production, you will use Docker Enterprise, so you need to be careful that you don't use features in development, which are not yet available in Enterprise. Docker recently announced **Docker Desktop Enterprise**, which lets developers run the exact same engine locally as their organization is running in production.
您需要下载并运行安装程序。安装程序将验证您可以在安装程序中运行 Docker，并将配置支持 Docker 所需的 Windows 功能。当 Docker 正在运行时，您将在通知栏中看到一个鲸鱼图标，您可以右键单击该图标以获得选项:
![](img/3b868f4a-752c-4445-94c1-93403f042d4a.png)
您需要选择切换到窗口容器...在你做其他事情之前。Windows 上的 Docker Desktop 可以通过在机器上的 Linux 虚拟机中运行 Docker 来运行 Linux 容器。这非常适合测试 Linux 应用，看看它们如何在容器中运行，但是这本书完全是关于 Windows 容器的——所以切换一下，Docker 将来会记住这个设置。
当窗口 Docker 正在运行时，您可以打开命令提示符或 PowerShell 会话并开始使用容器。首先，通过运行`docker version`来验证一切是否按预期运行。您应该会看到类似以下代码片段的输出:
```
> docker version
Client: Docker Engine - Community
 Version:           18.09.2
 API version:       1.39
 Go version:        go1.10.8
 Git commit:        6247962
 Built:             Sun Feb 10 04:12:31 2019
 OS/Arch:           windows/amd64
 Experimental:      false
Server: Docker Engine - Community
 Engine:
  Version:          18.09.2
  API version:      1.39 (minimum version 1.24)
  Go version:       go1.10.6
  Git commit:       6247962
  Built:            Sun Feb 10 04:28:48 2019
  OS/Arch:          windows/amd64
  Experimental:     true
```
The output tells you the version of the command-line client and the Docker Engine. The operating system field should read *Windows* for both; if not, then you may still be in Linux mode, and you'll need to switch to Windows containers.
现在使用 Docker 命令行界面运行一个简单的容器:
```
docker container run dockeronwindows/ch01-whale:2e
```
这使用了 Docker Hub 上的一个公共映像——这本书的示例映像之一，Docker 将在您第一次使用它时提取该映像。如果您没有任何其他映像，这将需要几分钟时间，因为它还将下载微软纳米服务器映像，我的映像用作基础。当容器运行时，它会显示一些 ASCII 艺术，然后退出。再次运行相同的命令，您会看到它执行得更快，因为映像现在已经在本地缓存了。
Docker Desktop 会在启动时检查更新，并在更新完成时提示您下载新版本。您可以通过在 Docker 工具发布时安装新版本来保持它们的最新状态。您可以通过从任务栏菜单中选择**关于 Docker 桌面**来检查您已经安装的当前版本:
![](img/fdd0cd57-b688-4ead-9e85-e97216e4d720.png)
这就是你需要的全部设置。Docker Desktop 还包含我将在本书后面使用的 Docker Compose 工具，因此您已经准备好跟随代码示例了。
# Docker 引擎
Docker Desktop 非常适合在 Windows 10 上使用容器进行开发。对于没有用户界面的无头服务器的生产环境，可以安装 Docker 引擎，使用 PowerShell 模块作为后台 Windows 服务运行。
在新安装的 Windows Server 2019 Core 上，使用`sconfig`工具安装所有最新的 Windows 更新，然后运行以下 PowerShell 命令安装 Docker 引擎和 Docker CLI:
```
Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
Install-Package -Name docker -ProviderName DockerMsftProvider
```
这将为服务器配置必要的 Windows 功能，安装 Docker，并将其设置为作为 Windows 服务运行。根据安装的 Windows 更新数量，您可能需要重新启动服务器:
```
Restart-Computer -Force
```
当服务器在线时，确认 Docker 正在使用`docker version`运行，然后从本章的示例映像中运行一个容器: