如果你打算创建一个类的许多实例且所有实例都打算带有对同一个对象的引用，比如一个共享的
继承得到的:reader、:writer和:accessor选项不会包含在合并了的槽描述符中，因为由
Common Lisp处理这些情形的方式是，将来自新类和所有其基类的同名描述符合并在一起,
在Common Lisp中，一个给定对象只能拥有一个带有给定名字的槽。尽管如此，一个给定类
最后，:allocation选项和：initform一样，由指定该槽的最相关的类决定。这样，有可
另一方面，：initargs不需要是互斥的，槽描述符中的每个：initarg选项都将创建一个可用
正如我在前面章节里讨论的，类通过广义函数机制继承了来自其基类的行为，即一个在类A
当实例化类bar时，你可以使用继承了的初始化参数:a来为槽a指定值，事实上必须这样做
例如你有下面的类：
(defclass bar (foo)
(defclass foo ()
ta
槽和继承
initform 
:accessor a)
www.TopSage.com
17.7  槽和继承
187
---
## Page 205
可以像下面这样定义它：
货币市场账户组合了来自支票账户和储蓄账户的特征：客户可以填写支票，也可以挣得利息。你
序出现在不同类的类优先级列表中。
要注意并不存在所有类的全序。每个类都有其自己的类优先级列表，而同一个类可能以不同的顺
先级列表（class precedence list），它可被用于检测某个基类是否比其他基类更相关。尽管如此，
列表中后面的类更相关。这条规则被认为有些随意，但确实可以允许每个类都有一个线性的类优
DEFCLASS的直接基类列表中列出的顺序来排序不相关的基类，更早出现在列表中的类被认为比
更加相关这一规则不足以排序所有的基类。因此，CommonLisp提供了第二条规则，根据
一个类是另一个类的子类，那么你不会同时需要它们的直接子类。在这种情况下，子类比其基类
一直上溯到T。但是当一个类有多个直接基类时，这些基类通常是彼此互不相关的。确实，如果
所有基类可以排序成一条直线，从该类开始，后接它的直接基类，然后是后者的直接基类，最后
于构造一个广义函数的有效方法以及合并继承的槽描述符时，会变得更加复杂。
个基类。多重继承带来的问题是一个类可以有超过一个的直接基类。这使得类的特化性概念在用
经带有多个基类，因为它们全部扩展至STANDARD-OBJECT，而后者扩展了T，所以它们至少有两
一个类可以有多个直接基类，从所有这些类中继承可应用的方法和槽描述符。
17.8
你可以使用即将在第21章里学到的包（package）系统，来避免互不相关的代码中的名字冲突。
个扩展了这些类的类上时，它们可能最终操作在同一个槽上。这实际上并不是太大的问题，因为
有相同名字的无关的槽会被合并成新类中的单一的槽。这样，当在不同类上特化的方法应用在一
义函数b的方法来访问，也可以使用直接在bar上特化的广义函数the-b的新方法来访问。为了访
选项，指定的值将保存在由bar的所有实例共享的槽中。同样的槽既可以使用在foo上特化的广
用继承的初始化参数：b或者新的初始化参数：the-b。不过，由于bar中的b槽带有：allocation
为了了解它是如何工作的，我们向银行应用中添加一个类money-market-account。一个
这就是说，如果每个类都只有一个直接基类，那么决定类的特化性将极其简单。一个类及其
通常，合并槽定义可以工作得很好。尽管如此，你需要关注当使用多重继承时，两个巧带
188
多重继承并没有在本质上改变任何目前为止我所谈及的继承机制——每个用户定义的类已
money-market-account的类优先级列表如下所示：
(defclass money-market-account
到目前为止，你看到的所有类都只有单一的直接基类。CommonLisp也支持多重继承一
savings-account
(money-market-account
standard-object
bank-account
checking-account
多重继承
第17章重新审视面向对象：类
www.TopSage.com
(checking-account savings-account)())
大
U
弘网
---
## Page 206
为根据money-market-account的类优先级列表，它将是下一个最相关的方法。
化的方法。当后者再调用cALL-NExT-METHOD时，它将会运行savingS-account上的方法，因
market-account上特化的方法将使用cALL-NExT-METHOD来调用在checking- account上特
print-statement方法直接调用。
码分解成单独的函数，它随后可同时被money-market-account和savings-account的
法。因此，如果你想要重用那些打印对账单中savings-account部分的代码，就需要将那些代
个方法，就没有办法来调用一个特定的不太相关的方法，例如在savings-account上特化的方
NExT-METHoD来“向上”调用下一个最相关方法时，也就是在checking-account上特化的那
新行为，但可能需要比我即将讨论的其他选项要求更多的新代码。问题在于，当你可以使用CALL
接的方式是定义一个在money-market-account上特化的新的主方法。这可以让你更好地控制
支票账户和储蓄账户对账单的元素。
不过，这并不一定可以给你想要的行为，因为你可能希望货币市场账户的对账单中同时含有来自
market-account上调用print-statement,则在checking-account上特化的方法将被使用.
account在money-market-account的类优先级列表中出现在savings-account之前。
account上特化的方法被认为比在savings-account上特化的方法更加相关，因为checking-
方法。这两个方法对于money-market-account实例来说都是可应用的，
账单。假设已经有了在checking-account和savings-account上特化的print-statement
级列表将发挥其作用。例如，假设银行应用定义了一个广义函数print-statement来生成月对
列表。
继承用于计算利息的槽和行为。你不需要为只从一个或另一个基类继承的方法和槽担心类优先级
account将从checking-account中继承用于处理支票的槽和行为,而从savings-account中
bank-account中两次继承相同的槽描述符是不会有什么问题的。?
account对象上。由于同一个槽的所有槽描述符都被合并了，因此money-market-account从
其基类的槽。同样，任何应用在类优先级列表中的任何类上的方法也将应用在money-market-
account和savings-account按照DEFcLAss中指定的顺序出现。
假设继承到的方法都是主方法并且你还没有定义任何其他方法，那么如果你在money
① 换句话说，Common Lisp不会遇到像C++那样的宝石继承（diamond inheritance）问题。在C++中，当一个类子类
另一种可能性是，编写所有三个类的主方法去调用cALL-NEXT-METHOD，然后在money·
尽管如此，也有可能从不同的基类中继承同一广义函数的不同方法。在这种情况下，类优先
可以用儿种方式来修改用于money-market-accout的print-statement的行为。一种直
当不同的基类提供了完全无关的槽和行为时，多继承最容易理解。例如，money-market·
该类没有定义自己的槽，但是它会继承来自其两个直接基类的槽，包括两个直接基类继承自
注意该列表是怎样同时满足两条规则的：每个类都出现在它所有基类之前，并且checking-
了两个同时从公共基类继承了一个成员变量的类时，底下的类继承了成员变量两次，这导致了大量的混乱。
www.TopSage.com
17.8
多重继承
：但在checking
189
二
---
## Page 207
难懂的FORMAT函数。
面向对象理论，转而学习另一个相当不同的主题：如何更好地使用CommonLisp强大但有时嗨涩
在那里你将看到这些特性在实践中的使用方法的一些示例。不过，目前你需要暂且放下所有这些
学的书，并在接下来的六个月里埋头苦读就好了。”或者你可以阅读本书后面的一些实用章节，
本书的讨论范围。或者正如Perl的对象系统手册页中所写：“现在你只需买一本面向对象设计方法
那么就可能需要花费一些时间来吸取面向对象的思想。遗憾的是，这个主题相当大，已经超出了
看到Common Lisp的特性是怎样来实现好的面向对象设计的。不过，如果你缺乏面向对象经验，
17.9好的面向对象设计
法，这样它们中正规和细化的对帐单部分的顺序将是相同的。
statement广义函数，你可以将这两个函数都实现为bank-account的不同子类上的:after方
附加方法可能刚好合适。例如，如果在print-statement之外还有一个print-detailed-
为的手段，那么你可能需要重新考虑你的设计。
方法和继承的槽。一般而言，如果你发现自己纠结于把直接基类列表的顺序作为调节特定方法行
须改变money-market-account，子类化这些类的顺序。但这种改变相当大，可能会影响其他
如果你想要对账单中的checking-account部分在savings-account部分之前打印，那么就必
附加的一点儿功能变得非常清楚了。其缺点在于，你无法良好地控制这些附加方法的运行顺序。
在money-market-account上特化的:after方法，它将在最后运行。
方法输出的细节。如果你想要添加特定于money-market-account的细节，那么可以定义一个
出的基本账户对账单，接着是由在savings-account和checking-account上特化的:after
些方法定义成:after方法，同时在bank-account上定义单一的主方法。然后，调用在money-
checking-account和savings-account定义print-statement之上的主方法，还可以将这
可应用的方法都能在某一点处运行，那么应该考虑使用附加方法。在这种情况下，除了为
另一方面，如果你并不关心具体的顺序，而只想让它在多个广义函数中是一致的，那么使用
190
使用附加方法的优点在于，它使得哪个方法对于实现广义函数负主要责任，哪个方法只贡献
以上就是Common Lisp对象系统的主要特性。如果你有丰富的面向对象编程经验，那么就能
第17章 重新审视面向对象：类
www.TopSage.com
---
## Page 208
是Lisp几乎和FORTRAN一样老的象征之一。事实上，一些可以用来在定长字段中打印浮点值的
以及使用插入的值生成人类可读的消息。现在将表格中的数据作为文本打印已经有些过时了，它
章将讨论的用来抛出各种状况的函数，都使用FORMAT风格的控制字符串来生成输出。
有必要先知道它究竟能干什么。理解FORMAT的基础也是重要的，因为其他标准函数，诸如下-
估计出这段代码的用途，那么这是立即可以做到的。
输出打印list：
向标准输出打印list的内容。另一方面，你可以立即说出下面的表达式正在以某种形式向标准
下面这样：
还不致使事情变得太糟。例如，假设你想要将一个列表中的值以逗号分隔打印出来，可以写成
的输出生成代码。尽管FORMAT的控制字符串可能是嗨涩难懂的，但至少单一的FORMAT表达式
些CommonLisp程序员们的欢迎，他们希望能够生成少许人类可读的输出而无需手工编写大量
和不透明性而讨厌它。复杂的FORMAT控制字符串有时就像是一行乱码，但FORMAT仍然受到一
进一步说，FORMAT支持三种相当不同类型的格式化：打印表中的数据，美化输出S-表达式，
不管怎么说，你应当至少可以读懂FORMAT，并且在你加人支持或反对FORMAT的阵营之前，
①当然，多数人认识到不值得在一门编程语言里将它实现出来，并且可以没有障碍地使用或不使用它。另一方面，
如果你关心该输出的具体形式，那么需要仔细分析控制字符串；但如果你只是想要第一时间
(sT"{~‘~~}~euoJ)
这还不算太糟，但任何读到这些代码的人不得不在大脑里解析它，然后发现它所做的无非是
(loop for cons on list
FORMAT的爱好者们因为它的强大威力和简洁而喜欢它，它的反对者们则由于其潜在的误用
Lisp化”这一常见批评恰恰反映了Lisp程序员们真的很喜欢S-表达式语法。
字符串的语法是基于字符的，而扩展的LOOP宏采用了由LOOP关键字所描述的语法。对于FORMAT和LOOP“不够
有趣的是CommonLisp所实现的这两种特性，本质上是使用了不基于S-表达式语法的领域相关语法。FORMAT控制
响的两个特性。对于FORMAT函数，有些人喜欢它，而另一些人讨厌它。
when (cdr cons）do (format t“，“))
ommon Lisp的FORMAT函数和扩展的LOOP宏，是CommonLisp在许多用户中引起强烈反
一些FORMAT秘诀
www.TopSage.com
---
## Page 209
情况下跳过特定参数。在讨论特定指令之前，我们首先了解一下指令的一般语法。
用超过一个参数。有个指令甚至允许你在参数列表中跳动从而多次处理同一个参数，或是在特定
以导致FORMAT产生一个换行而不会使用任何参数。而其他的指令，如同你将要看到的，可以使
优化的。这就是为什么一个复杂的FORMAT控制字符串可以最终看起来像是一行乱码。
是Lisp风格的—其基本语法是基于字符而不是S-表达式的，并且它是为简洁性而非易于理解而
了FORMAT在目的地是NIL时返回一个字符串以外，其他情况下FORMAT均返回NIL。
指针的字符串，那么格式化的输出将被追加到字符串的结尾，并且填充指针也会作适当调整。除
中并随后返回。“如果目的地是一个流，那么输出将写到该流中。而如果目的地是一个带有填充
令并插入到输出中的值。我把这些参数称为格式化参数（format argument）。
另一个是含有字面文本和嵌入指令的控制字符串。任何附加的参数都提供了用于控制字符串中指
度完全取决于你自己。
使用少量FORMAT用法通常就够了。我将首先描述FORMAT最重要的特性，究竞对它理解到何种程
以这种方式限定范围，仍然谈及大量内容。你不必要求自己记住本章中所描述的每一个细节。只
在日常编程中并不常用。
的块结构数据，其中需要变长的缩进和动态添加的断行。它在需要的时候是非常有用的东西，但
题。简单地说，Common Lisp精美打印器是一个可定制的系统，用来打印包括但不限于S-表达式
18.1
此我不会讨论FORMAT的这些方面。
长字段的数据列。不过，将Common Lisp作为FORTRAN的替代品来使用超出了本书的范围，因
指令相当直接地来源于FORTRAN的编辑描述符，它们在FORTRAN中用来读取和打印组织成定
多数FORMAT指令简单地以一种或另一种形式将参数插入到输出中。某些指令，诸如~名，可
第二个参数，控制字符串，在本质上是一段用FORMAT语言写成的程序。FORMAT语言完全不
FORMAT的第一个参数，用于输出的目的地，它可以是T、NIL、一个流或一个带有填充指针
② 稍有混淆的一点是，许多其他的I/O函数也接受T和NIL作为流标识符，但带有不同的语义：作为流标识符，T代表
①对于精美打印器感兴趣的读者可以阅读Richard Waters的论文“XP:ACommonLisp Pretty Printing System”。它是
如同你在前面章节里看到的，FORMAT函数接受两个必要的参数：一个是用于输出的目的地，
因此，我将聚焦在FORMAT中可以使用插入的值来生成人类可读字符串的那部分内容。即便
192
美化输出同样超出了本书的范围一
双向流*TERMINAL-IO*，而NIL 在作为输出流时代表*STANDARD-OUTPUT*，作为输人流时代表
edu/ai-publications/pdf/AIM-1102a.pdf下载它。
一个对后来合并到Common Lisp中的精美打印器的描述。你可以从 ftp://publications.ai.mit.
*STANDARD-INPUT*。
FORMAT 函数
第18章 
一些FORMAT 秘诀
www.TopSage.com
一并不是因为它们过时，而只是因为这是一个太大的主
---
## Page 210
带上加号。
输出整数的~D指令将在输出数字时每三位用逗号分隔，而“@”修饰符可以使~D在数字为正时
令的标识字符之前。这些修饰符可以细微地改变指令的行为。例如，使用冒号修饰符，以十进制
将数字打印为五个十进制位，那么可以写成这样：
一个参数来控制需要打印的数的十进制位，但这是第二个参数而不是第一个。如果你想要使用～F