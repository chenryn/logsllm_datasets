## PostgreSQL 对象权限如何在元数据中获取 - 权限解读、定制化导出权限  
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-06-20                                                            
### 标签                                                               
PostgreSQL , 权限导出 , 定制化权限 , 元数据  
----                                                               
## 背景       
在PostgreSQL中，如何查询出指定用户的：系统权限、角色权限，以及其他用户的对象权限？  
实际上PostgreSQL中所有权限都以ACL的形式存储在元数据中，所以权限并不是在某一张与用户挂钩的元数据表里面，而是分散在不同类型的对象的元数据中，以一个ACL字段存在。  
## 导出与某个用户相关的权限方法1  
用pgdump，导出DDL，以及PRIVILETE， 然后在导出文本中根据关键字filter  
## 导出与某个用户相关的权限方法2  
[《PostgreSQL 逻辑结构 和 权限体系 介绍》](../201605/20160510_01.md)    
根据数据库的逻辑结构与权限体系，直接从元数据中获取对象权限。  
### 1 数据库中有哪些对象可以赋权  
通过grant命令可以看到，可以赋权的对象包括：  
表、视图、物化视图、序列、外部表、数据库、域、类型、fdw、FS、函数、存储过程、routine、函数语言、大对象、SCHEMA、表空间、成员关系。  
```  
postgres=# \h grant  
Command:     GRANT  
Description: define access privileges  
Syntax:  
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON { [ TABLE ] table_name [, ...]  
         | ALL TABLES IN SCHEMA schema_name [, ...] }  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )  
    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }  
    ON [ TABLE ] table_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { { USAGE | SELECT | UPDATE }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON { SEQUENCE sequence_name [, ...]  
         | ALL SEQUENCES IN SCHEMA schema_name [, ...] }  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }  
    ON DATABASE database_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON DOMAIN domain_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON FOREIGN DATA WRAPPER fdw_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON FOREIGN SERVER server_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { EXECUTE | ALL [ PRIVILEGES ] }  
    ON { { FUNCTION | PROCEDURE | ROUTINE } routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]  
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON LANGUAGE lang_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }  
    ON LARGE OBJECT loid [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }  
    ON SCHEMA schema_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { CREATE | ALL [ PRIVILEGES ] }  
    ON TABLESPACE tablespace_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON TYPE type_name [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
where role_specification can be:  
    [ GROUP ] role_name  
  | PUBLIC  
  | CURRENT_USER  
  | SESSION_USER  
GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]  
```  
### 2 获取对象OWNER  
owner 拥有对象的所有权限.  
不同的对象类型，元数据在不同的元数据表里面，元数据里面包括了OWNER，OID，ACL等  
1、表、视图、物化视图、序列、外部表、  
```  
pg_class  
```  
2、数据库、  
```  
pg_database  
```  
3、域、类型、  
```  
pg_type  
```  
4、fdw、  
```  
pg_foreign_data_wrapper  
```  
5、FS、  
```  
pg_foreign_server  
```  
6、函数、存储过程、routine、  
```  
pg_proc  
```  
7、函数语言、  
```  
pg_language  
```  
8、大对象、  
```  
pg_largeobject_metadata  
```  
9、SCHEMA、  
```  
pg_namespace  
```  
10、表空间、  
```  
pg_tablespace  
```  
11、成员关系。  
```  
pg_auth_members  
角色，角色中有哪些成员.   
```  
从以上所有元数据中，可以获取到所有对象对应的OWNER。  
### 3 获取对象的，已赋予给指定角色的权限  
方法与2相同，从不同对象的元数据中，获取对象对应的ACL的信息。  
```  
pg_class 权限 (SEQUENCE, TABLE, 视图, 物化视图)  
pg_database 权限 (DATABASE)  
pg_type 权限 (DOMAIN, TYPE)  
pg_foreign_data_wrapper 权限 (FOREIGN DATA WRAPPER)  
pg_foreign_server 权限 (FOREIGN SERVER)  
pg_proc 权限 (FUNCTION | PROCEDURE | ROUTINE)  
pg_language 权限 (LANGUAGE)  
pg_largeobject_metadata 权限 (LARGE OBJECT)  
pg_namespace 权限 (SCHEMA)  
pg_tablespace 权限 (TABLESPACE)  
pg_auth_members 权限 (MEMBER SHIP)  
```  
ACL解读含义如下   
https://www.postgresql.org/docs/current/static/sql-grant.html  
```  
rolename=xxxx -- privileges granted to a role  
        =xxxx -- privileges granted to PUBLIC  
            r -- SELECT ("read")  
            w -- UPDATE ("write")  
            a -- INSERT ("append")  
            d -- DELETE  
            D -- TRUNCATE  
            x -- REFERENCES  
            t -- TRIGGER  
            X -- EXECUTE  
            U -- USAGE  
            C -- CREATE  
            c -- CONNECT  
            T -- TEMPORARY  
      arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)  
            * -- grant option for preceding privilege  
        /yyyy -- role that granted this privilege  
```  
### 4 获取对象的，已赋予给PUBLIC角色的权限  
实际上方法还是与2相同，只是解读ACL时，需要注意：  
PUBLIC角色代表所有用户，在ACL中显示为等号前面没有角色名。  
```  
rolename=xxxx -- privileges granted to a role  
        =xxxx -- privileges granted to PUBLIC  
            r -- SELECT ("read")  
            w -- UPDATE ("write")  
            a -- INSERT ("append")  
            d -- DELETE  
            D -- TRUNCATE  
            x -- REFERENCES  
            t -- TRIGGER  
            X -- EXECUTE  
            U -- USAGE  
            C -- CREATE  
            c -- CONNECT  
            T -- TEMPORARY  
      arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)  
            * -- grant option for preceding privilege  
        /yyyy -- role that granted this privilege  
```  
### 5 获取系统的默认权限  
1、首先如何赋予将来创建的对象的默认权限  
```  
postgres=# \h alter default  
Command:     ALTER DEFAULT PRIVILEGES  
Description: define default access privileges  
Syntax:  
ALTER DEFAULT PRIVILEGES  
    [ FOR { ROLE | USER } target_role [, ...] ]  
    [ IN SCHEMA schema_name [, ...] ]  
    abbreviated_grant_or_revoke  
where abbreviated_grant_or_revoke is one of:  
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON TABLES  
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]  
GRANT { { USAGE | SELECT | UPDATE }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON SEQUENCES  
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]  
GRANT { EXECUTE | ALL [ PRIVILEGES ] }  
    ON { FUNCTIONS | ROUTINES }  
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | ALL [ PRIVILEGES ] }  
    ON TYPES  
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]  
GRANT { USAGE | CREATE | ALL [ PRIVILEGES ] }  
    ON SCHEMAS  
    TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]  
REVOKE [ GRANT OPTION FOR ]  
    { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON TABLES  
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]  
    [ CASCADE | RESTRICT ]  
REVOKE [ GRANT OPTION FOR ]  
    { { USAGE | SELECT | UPDATE }  
    [, ...] | ALL [ PRIVILEGES ] }  
    ON SEQUENCES  