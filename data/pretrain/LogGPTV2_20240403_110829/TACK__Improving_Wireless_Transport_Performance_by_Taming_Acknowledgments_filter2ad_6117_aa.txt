title:TACK: Improving Wireless Transport Performance by Taming Acknowledgments
author:Tong Li and
Kai Zheng and
Ke Xu and
Rahul Arvind Jadhav and
Tao Xiong and
Keith Winstein and
Kun Tan
TACK: Improving Wireless Transport Performance by Taming
Acknowledgments
Tong Li
Huawei
Kai Zheng
Huawei
Ke Xu
Rahul Arvind Jadhav
Tsinghua University &
Huawei
PI:EMAIL
PI:EMAIL
BNRist & PCL
PI:EMAIL
PI:EMAIL
Tao Xiong
Huawei
Keith Winstein
Stanford University
Kun Tan
Huawei
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
High-throughput transport over wireless local area network
(WLAN) becomes a demanding requirement with the emer-
gence of 4K wireless projection, VR/AR-based interactive
gaming, and more. However, the shared nature of the wireless
medium induces contention between data transport and back-
ward signaling, such as acknowledgement. The current way
of TCP acknowledgment induces control overhead which is
counter-productive for TCP performance especially in WLAN
scenarios.
In this paper, we present a new acknowledgement called
TACK (‚ÄúTame ACK‚Äù), as well as its TCP implementation
TCP-TACK. TCP-TACK works on top of commodity WLAN,
delivering high wireless transport goodput with minimal con-
trol overhead in the form of ACKs, without any hardware
modification. To minimize ACK frequency, TACK abandons
the legacy received-packet-driven ACK. Instead, it balances
byte-counting ACK and periodic ACK so as to achieve a
controlled ACK frequency. Evaluation results show that TCP-
TACK achieves significant advantages over legacy TCP in
WLAN scenarios due to less contention between data packets
and ACKs. Specifically, TCP-TACK reduces over 90% of
ACKs and also obtains an improvement of ‚àº 28% on good-
put. We further find it performs equally well as high-speed
TCP variants in wide area network (WAN) scenarios, this is
attributed to the advancements of the TACK-based proto-
col design in loss recovery, round-trip timing, and send rate
control.
CCS CONCEPTS
‚àô Networks ‚Üí Transport protocols; Wireless local
area networks.
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first
page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists,
requires prior specific permission and/or a fee. Request permissions
from permissions@acm.org.
SIGCOMM ‚Äô20, August 10‚Äì14, 2020, Virtual Event, NY, USA
c‚óã 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7955-7/20/08. . . $15.00
https://doi.org/10.1145/3387514.3405850
KEYWORDS
acknowledgement mechanism, ACK frequency, periodic ACK,
instant ACK
ACM Reference Format:
Tong Li, Kai Zheng, Ke Xu, Rahul Arvind Jadhav, Tao Xiong,
Keith Winstein, and Kun Tan. 2020. TACK: Improving Wireless
Transport Performance by Taming Acknowledgments. In Annual
conference of the ACM Special Interest Group on Data Com-
munication on the applications, technologies, architectures, and
protocols for computer communication (SIGCOMM ‚Äô20), August
10‚Äì14, 2020, Virtual Event, NY, USA. ACM, New York, NY,
USA, 16 pages. https://doi.org/10.1145/3387514.3405850
1 INTRODUCTION
Wireless local area networks (WLANs) are ubiquitous and
readily getting employed in scenarios such as ultra-high-
definition (UHD) streaming, VR/AR interactive gaming, and
UHD IP video. The implications of video growth raise sig-
nificant bandwidth demands with the video application re-
quirements. Particularly, the peak bandwidth requirement
might reach 206.9 Mbps for a 8K video [45]. However, the
average WLAN connection speed worldwide (e.g., 30.3 Mbps
in 2018 and predicted to be 92 Mbps by 2023 [24]) is far
from satisfactory for these UHD-video-based applications
(see S3.1).
It is well-studied that medium acquisition overhead in
WLAN based on the IEEE 802.11 medium access control
(MAC) protocol [11] can severely hamper TCP throughput,
and TCP‚Äôs many small ACKs are one reason [53, 69]. Ba-
sically, TCP sends an ACK for every one or two packets
(i.e., received-packet-driven) [7, 15]. ACKs share the same
medium route with data packets, causing similar medium
access overhead despite the much smaller size of the ACK-
s [8, 31, 36, 50, 58]. Contentions and collisions, as well as
the wasted wireless resources by ACKs, lead to significant
throughput decline on the data path (see S3.2).
The WLAN bandwidth can be expanded by hardware mod-
ifications, such as 802.11ac and 802.11ax, in which channel
binding is extended, or more spatial streams and high-density
modulation are used. However, a faster physical (PHY) rate
makes the MAC overhead problem even worse. This is be-
cause delay associated with medium acquisition wastes time
and a higher PHY rate also proportionally increases ACK
SIGCOMM ‚Äô20, August 10‚Äì14, 2020, Virtual Event, NY, USA
Tong Li et al.
frequency for legacy TCP. Consequently, rethinking the way
of TCP acknowledgement that reduces medium acquisition
overhead in WLAN, so as to improve transport throughput,
would be a relevant contribution.
The ACK frequency can be decreased by sending an ACK
for every ùêø (ùêø ‚â• 2) incoming packets [8, 31, 50, 67] (i.e., byte-
counting ACK ) or by sending an ACK for every large time
interval (i.e., periodic ACK ). However, simply reducing ACK
frequency not only disturbs the packet clocking algorithms
(e.g., send pattern, send window update and loss detection)
and round-trip timing [47], but also impairs the feedback
robustness (e.g., more sensitive to ACK loss). The challenge
here is that legacy TCP couples the high ACK frequency
with transport controls such as robust loss recovery, accurate
round-trip timing, and effective send rate control (see S4.3).
This paper presents TACK (‚ÄúTame ACK‚Äù), a type of ACK
that minimizes ACK frequency by balancing byte-counting
ACK and periodic ACK. To decouple the high ACK frequen-
cy from transport requirement, we propose the TACK-based
acknowledgement mechanism, in which we use TACKs to
sync the statistics (such as receipts, losses, available band-
width, delays, etc.) between endpoints, and we also introduce
Instant ACK (IACK), driven by instant events (e.g., loss,
state update, etc.), to assure timely signaling. For example,
on detecting loss, an IACK will be sent to proactively pull
missing packets at the receiver‚Äôs buffer. TACKs and IACKs
are complementary, as IACKs assure rapid feedback while
TACKs assure feedback robustness (see S4.4).
We further design TCP-TACK, the TACK-based TCP
works on top of WLAN. TCP-TACK revisits the current di-
vision of labor between senders and receivers. It compensates
for sending fewer ACKs by integrating the receiver-based loss
detection, round-trip timing and send rate control. These
components are not exactly new but are co-designed ex-
pressly to be part of the TACK-based protocol design. This
cooperation between TACK and receiver-based paradigm not
only minimizes the ACK frequency required, but also assures
effective transport control under network dynamics (see S5).
Real-world deployment experiences demonstrate TACK‚Äôs
significant advantages over legacy way of acknowledgements
in WLAN scenarios. Goodput improvement is attributed to
the reduction of contention between data packets and ACKs.
Furthermore, reducing ACK frequency without disturbing
transport performance validates the idea of decoupling high
ACK frequency from transport requirement (Figure 1 gives
a preview of the results).
2 RELATED WORK
Reducing ACK frequency. In order to improve transport
performance over IEEE 802.11 wireless links, Salameh et
al. [69] proposed HACK by changing Wi-Fi MAC to carry
TCP ACKs inside link-layer ACKs, this eliminates TCP
ACK medium acquisitions and thus improves TCP goodput.
We clarify the differences between TACK and HACK in
three aspects. (1) TACK reduces the ACKs end-to-end while
HACK only reduces the ACKs over wireless links. TACK
is more general in this aspect and can be used to solve
Figure 1: Percentage of goodput improvement of
TCP-TACK over TCP-BBR in WLAN. Full results
are in S6.3.
problems in asymmetric networks where the ACK path is
congested [13, 28, 34, 42, 64]. (2) HACK requires network
interface card (NIC) changes but no TCP changes while
TACK requires TCP changes but no NIC changes. (3) Since
the trigger time of the link-layer ACK and the transport-layer
ACK is usually asynchronous, HACK is likely to result in
ACK delays. However, HACK does not solve the transport
challenges such as enlarged delay in loss recovery, biased
round-trip timing, burst send pattern, and delayed send
window update.
Apart from the link-layer solutions, the study of delaying
more than two ACKs was first carried out by Altman and
Jim¬¥enez [8], followed by a line of ACK thinning technolo-
gies [3, 9, 19, 20, 31, 57, 58, 67] on the transport layer. Among
them, some studies reduce ACK frequency by dropping se-
lected ACKs on an intermediate node (e.g., a wireless AP or
gateway). Due to information asymmetry, this intermediate
management unavoidably makes endpoints take untimely or
wrong actions. Under these circumstances, some studies adop-
t the end-to-end solutions, which fall into two categories: (1)
Byte-counting ACK that sends an ACK for every ùêø (ùêø ‚â• 2)
incoming full-sized packets. (2) Periodic ACK that sends an
ACK for each time interval (or send window). Both fail to
match the number of ACKs to the frequency that a transport
required in the network with time-varying data rate. This
paper proposes TACK that combines these two approaches,
achieving a controlled ACK frequency under different network
scenarios.
Compensating for sending fewer ACKs. Compared with
the studies that explore how to reduce the ACK frequency,
much fewer studies explore how to compensate for sending
fewer ACKs. To overcome the hurdles created by excessive
ACK decrease, Allman [6] proposed the appropriate byte
counting (ABC) algorithm and limited the number of packets
sent (i.e. two) in response to each incoming ACK to deal
with feedback lags and traffic bursts. Landstr¬®om et al. [50]
integrated a modified fast recovery scheme and a form of the
ABC algorithm to improve the TCP bandwidth utilization
when ACK frequency is reduced to two or four per send
window. The limitation of these algorithms, however, is that
they only solve part of the problems. For example, Allman‚Äôs
solution did not consider the feedback robustness under ex-
cessive ACK losses. Landstr¬®om‚Äôs solution resulted in large
router buffer occupation without smoothing the traffic bursts.
Both solutions did not address the interference on the round-
trip timing caused by the delayed ACKs. This paper aims
to provide a complete framework that defines more types of
ACKs and carries more information in ACKs, to minimize the
802.11b90.5%Number of ACKs reducedGoodput improved802.11g802.11n802.11ac20.0%95.4%99.4%99.8%26.3%28.1%27.7%TACK: Improving Wireless Transport Performance by Taming Acknowledgments
SIGCOMM ‚Äô20, August 10‚Äì14, 2020, Virtual Event, NY, USA
ACK frequency required but still achieve effective feedback.
In the context of TACK, this paper co-designs the receiver-
based transport control to address the challenges caused by
sending fewer ACKs. The receiver-based paradigm is also
validated by the recent work such as pHost [35], RCC [75],
ExpressPass [22], NDP [40] and Homa [56] in datacenter
environments.
TACK vs delayed ACK. Transport protocols, such as
TCP and QUIC [51], also alternatively adopt delayed ACK [7,
15, 46]. Delayed ACK falls into the category of byte-counting
ACK except that an extra timer prevents ACK from being
excessively delayed. For full-sized data packets, it turns to
byte-counting ACK when ùëèùë§ is large and falls back to per-
packet ACK when ùëèùë§ is small (see Equation (5)). TACK
differs from delayed ACK by mandatorily sending ACKs
periodically when ùëèùë§ is large (see Equation (3)). In particular,
TACK applies periodic ACK when ùëèùëëùëù is large and falls back