# TACK: Improving Wireless Transport Performance by Taming Acknowledgments

## Authors
- Tong Li, Huawei
- Kai Zheng, Huawei
- Ke Xu, Tsinghua University & Huawei
- Rahul Arvind Jadhav, Tsinghua University & Huawei
- Tao Xiong, Huawei
- Keith Winstein, Stanford University
- Kun Tan, Huawei

## Abstract
High-throughput transport over wireless local area networks (WLANs) is increasingly important with the emergence of 4K wireless projection, VR/AR-based interactive gaming, and other high-bandwidth applications. However, the shared nature of the wireless medium often leads to contention between data packets and acknowledgments (ACKs), which can degrade TCP performance. This paper introduces TACK ("Tame ACK"), a new acknowledgment mechanism, and its TCP implementation, TCP-TACK. TCP-TACK operates on commodity WLANs, delivering high goodput with minimal control overhead without requiring any hardware modifications. TACK minimizes ACK frequency by balancing byte-counting ACKs and periodic ACKs, thereby reducing contention. Evaluation results show that TCP-TACK significantly outperforms legacy TCP in WLAN scenarios, reducing over 90% of ACKs and improving goodput by approximately 28%. Additionally, TCP-TACK performs comparably to high-speed TCP variants in wide area network (WAN) scenarios, thanks to advancements in loss recovery, round-trip timing, and send rate control.

## CCS Concepts
- Networks → Transport protocols; Wireless local area networks.

## Keywords
Acknowledgment mechanism, ACK frequency, periodic ACK, instant ACK

## ACM Reference Format
Tong Li, Kai Zheng, Ke Xu, Rahul Arvind Jadhav, Tao Xiong, Keith Winstein, and Kun Tan. 2020. TACK: Improving Wireless Transport Performance by Taming Acknowledgments. In Proceedings of the ACM Special Interest Group on Data Communication (SIGCOMM '20), August 10–14, 2020, Virtual Event, NY, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3387514.3405850

## 1. Introduction
Wireless local area networks (WLANs) are ubiquitous and are being increasingly used for ultra-high-definition (UHD) streaming, VR/AR interactive gaming, and UHD IP video. These applications place significant bandwidth demands, with peak requirements reaching up to 206.9 Mbps for 8K video. However, the average global WLAN connection speed (e.g., 30.3 Mbps in 2018, predicted to be 92 Mbps by 2023) is insufficient for such UHD-video-based applications.

It is well-known that the medium acquisition overhead in WLANs, based on the IEEE 802.11 MAC protocol, can severely hamper TCP throughput. TCP's frequent small ACKs contribute to this issue, as they share the same medium route as data packets, causing similar medium access overhead. Contentions, collisions, and wasted wireless resources by ACKs lead to significant throughput decline on the data path.

While hardware modifications like 802.11ac and 802.11ax can expand WLAN bandwidth, a faster physical (PHY) rate exacerbates the MAC overhead problem. A higher PHY rate increases ACK frequency, making it even more critical to reduce medium acquisition overhead. Therefore, rethinking the way TCP acknowledgments are handled to improve transport throughput is a relevant contribution.

The ACK frequency can be reduced by sending an ACK for every \( L \) (where \( L \geq 2 \)) incoming packets (byte-counting ACK) or by sending an ACK at regular time intervals (periodic ACK). However, simply reducing ACK frequency can disrupt packet clocking algorithms and round-trip timing, and impair feedback robustness. The challenge is to decouple high ACK frequency from transport controls such as loss recovery, accurate round-trip timing, and effective send rate control.

This paper presents TACK, a type of ACK that minimizes frequency by balancing byte-counting and periodic ACKs. To decouple high ACK frequency from transport requirements, we propose the TACK-based acknowledgment mechanism, which uses TACKs to synchronize statistics between endpoints and Instant ACKs (IACKs) for timely signaling. IACKs ensure rapid feedback, while TACKs ensure feedback robustness.

We further design TCP-TACK, a TACK-based TCP implementation for WLANs. TCP-TACK revisits the division of labor between senders and receivers, compensating for fewer ACKs by integrating receiver-based loss detection, round-trip timing, and send rate control. This cooperation between TACK and the receiver-based paradigm minimizes ACK frequency and ensures effective transport control under network dynamics.

Real-world deployment experiences demonstrate TACK's significant advantages over legacy acknowledgment methods in WLAN scenarios, attributed to the reduction of contention between data packets and ACKs. Reducing ACK frequency without disturbing transport performance validates the idea of decoupling high ACK frequency from transport requirements.

## 2. Related Work
### Reducing ACK Frequency
To improve transport performance over IEEE 802.11 wireless links, Salameh et al. [69] proposed HACK by carrying TCP ACKs inside link-layer ACKs, eliminating TCP ACK medium acquisitions and improving goodput. TACK differs from HACK in three key aspects:
1. TACK reduces ACKs end-to-end, whereas HACK only reduces ACKs over wireless links.
2. HACK requires NIC changes but no TCP changes, while TACK requires TCP changes but no NIC changes.
3. HACK may result in ACK delays due to asynchronous trigger times, whereas TACK addresses transport challenges such as delay in loss recovery, biased round-trip timing, burst send patterns, and delayed send window updates.

Other studies have explored delaying more than two ACKs, including Altman and Jiménez [8] and subsequent ACK thinning technologies [3, 9, 19, 20, 31, 57, 58, 67]. Some reduce ACK frequency by dropping selected ACKs at intermediate nodes, leading to untimely or incorrect actions. End-to-end solutions, such as byte-counting ACKs and periodic ACKs, fail to match ACK frequency to the required transport needs in varying network conditions. TACK combines these approaches to achieve controlled ACK frequency.

### Compensating for Fewer ACKs
Fewer studies explore how to compensate for sending fewer ACKs. Allman [6] proposed the appropriate byte counting (ABC) algorithm, limiting the number of packets sent in response to each incoming ACK to handle feedback lags and traffic bursts. Landström et al. [50] integrated a modified fast recovery scheme and a form of the ABC algorithm to improve TCP bandwidth utilization when ACK frequency is reduced. However, these solutions only partially address the issues, such as feedback robustness and round-trip timing interference. This paper aims to provide a complete framework that defines more types of ACKs and carries more information, minimizing ACK frequency while achieving effective feedback.

In the context of TACK, this paper co-designs receiver-based transport control to address the challenges of sending fewer ACKs. Recent work in datacenter environments, such as pHost [35], RCC [75], ExpressPass [22], NDP [40], and Homa [56], also validate the receiver-based paradigm.

### TACK vs. Delayed ACK
Transport protocols like TCP and QUIC [51] use delayed ACK, which falls into the category of byte-counting ACKs with an extra timer to prevent excessive delays. For full-sized data packets, it turns to byte-counting ACK when bandwidth is large and falls back to per-packet ACK when bandwidth is small. TACK differs by mandatorily sending ACKs periodically when bandwidth is large, applying periodic ACK when buffer depth is large and falling back to byte-counting ACK when buffer depth is small.