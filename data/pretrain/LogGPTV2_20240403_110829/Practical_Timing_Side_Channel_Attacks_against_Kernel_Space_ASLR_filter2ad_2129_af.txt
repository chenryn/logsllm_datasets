Return-into-libc without Function Calls (on the x86),” in ACM
Conference on Computer and Communications Security (CCS),
2007.
[11] H. Bojinov, D. Boneh, R. Cannings, and I. Malchev, “Address
Space Randomization for Mobile Devices,” in ACM Conference
on Wireless Network Security (WiSec), 2011.
[12] M. Russinovich, “Inside the Windows Vista Kernel: Part 3,”
http://technet.microsoft.com/en-us/magazine/2007.04.vistakernel.
aspx, 2007.
[13] Charles Miller and Dion Blazakis and Dino Dai Zovi and Stefan
iOS
Esser and Vincenzo Iozzo and Ralf-Phillipp Weinmann,
Hacker’s Handbook.
John Wiley & Sons, Inc., 2012, p. 211.
[14] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis, “kGuard:
Lightweight Kernel Protection Against return-to-user Attacks,” in
USENIX Security Symposium, 2012.
[15] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “Enhanced op-
erating system security through efﬁcient and ﬁne-grained address
space randomization,” in USENIX Security Symposium, 2012.
[16] T. Durden, “Bypassing PaX ASLR Protection,” Phrack Magazine,
vol. 59, no. 9, 2002.
[17] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund,
and T. Walter, “Breaking the Memory Secrecy Assumption,” in
European Workshop on System Security (EuroSec), 2009.
[18] M. Jurczyk, “Windows Security Hardening Through Kernel Ad-
dress Protection,” http://j00ru.vexillium.org/?p=1038, 2011.
[19] P. Akritidis, “Cling: A Memory Allocator to Mitigate Dangling
Pointers,” in USENIX Security Symposium, 2010.
[20] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy Bounds
Checking: An Efﬁcient and Backwards-Compatible Defense
against Out-of-Bounds Errors,” in USENIX Security Symposium,
2009.
[21] H. Shacham, M. Page, B. Paff, E. jin Goh, N. Modadugu, and
D. Boneh, “On the Effectiveness of Address-Space Randomiza-
tion,” in ACM Conference on Computer and Communications
Security (CCS), 2004.
[22] K. Mowery, S. Keelveedhi, and H. Shacham, “Are AES x86
Cache Timing Attacks Still Feasible?” in ACM Cloud Computing
Security Workshop (CCSW), 2012.
[23] O. Aciic¸mez, B. B. Brumley, and P. Grabher, “New Results
on Instruction Cache Attacks,” in Workshop on Cryptographic
Hardware and Embedded Systems (CHES), 2010.
[24] D. Gullasch, E. Bangerter, and S. Krenn, “Cache Games –
Bringing Access-Based Cache Attacks on AES to Practice,” in
IEEE Symposium on Security and Privacy, 2011.
[25] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient Cache Attacks
on AES, and Countermeasures,” J. Cryptol., vol. 23, no. 2, Jan.
2010.
[26] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address Space
Layout Permutation (ASLP): Towards Fine-Grained Random-
ization of Commodity Software,” in Annual Computer Security
Applications Conference (ACSAC), 2006.
[27] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler, “An Em-
pirical Study of Operating Systems Errors,” in ACM Symposium
on Operating Systems Principles (SOSP), 2001.
[28] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving
the Reliability of Commodity Operating Systems,” ACM Trans.
Comput. Syst., vol. 23, no. 1, 2005.
[29] W. A.-K. Abu-Sufah, “Improving the Performance of Virtual
Memory Computers,” Ph.D. dissertation, University of Illinois at
Urbana-Champaign, 1979.
[30] Intel Corporation, “Intel: 64 and IA-32 Architectures Soft-
ware Developer’s Manual,” 2007, http://www.intel.com/products/
processor/manuals/index.htm.
[31] Intel,
“TLBs,
Invalidation,”
processors/architectures-software-developer-manuals.html.
Paging-Structure
Their
http://www.intel.com/content/www/us/en/
Caches,
and
[32] John L. Hennessy and David A. Patterson, Computer Architec-
ture: A Quantitative Approach. Elsevier, Inc., 2012, p. 118.
[33] D. Levinthal,
“Performance Analysis Guide
for
Intel
processors,”
i7 Processor
Core
http://software.intel.com/sites/products/collateral/hpc/vtune/
performance analysis guide.pdf.
Intel Xeon
5500
and
[34] Invisible Things Lab,
Years!”
from-slides-to-silicon-in-3-years.html, 2011.
“From Slides
3
http://theinvisiblethings.blogspot.de/2011/06/
to Silicon
in
[35] R. Hund, T. Holz, and F. C. Freiling, “Return-Oriented Rootkits:
Bypassing Kernel Code Integrity Protection Mechanisms,” in
USENIX Security Symposium, 2009.
[36] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit
hardening made easy,” in USENIX Security Symposium, 2011.
[37] Giuffrida, Cristiano and Kuijsten, Anton and Tanenbaum, Andrew
S., “Enhanced Operating System Security Through Efﬁcient and
Fine-grained Address Space Randomization,” in Proceedings of
the 21st USENIX conference on Security symposium, ser. Secu-
rity’12. USENIX Association, 2012.
[38] J. Aas, “Understanding the Linux 2.6.8.1 CPU Scheduler,” http:
//joshaas.net/linux/linux cpu scheduler.pdf, 2005.
[39] Microsoft, “Description of Performance Options in Windows,”
http://support.microsoft.com/kb/259025/en-us, 2007.
[40] M. Basseville and I. V. Nikiforov, Detection of Abrupt Changes:
Theory and Application. Prentice-Hall, 1993.
[41] P. C. Kocher, “Timing Attacks on Implementations of Difﬁe-
Hellman, RSA, DSS, and Other Systems,” in International Cry-
tology Conference (CRYPTO), 1996.
[42] M. Weiss, B. Heinz, and F. Stumpf, “A cache timing attack on
aes in virtualization environments,” in Financial Cryptography
and Data Security (FC), 2012.
[43] O. Aciic¸mez, “Yet another MicroArchitectural Attack:: exploiting
I-Cache,” in ACM Workshop on Computer Security Architecture
(CSAW), 2007.
204
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:20 UTC from IEEE Xplore.  Restrictions apply. 
[44] O. Aciic¸mez, W. Schindler, and C¸ etin Kaya Koc¸, “Improving
Brumley and Boneh timing attack on unprotected SSL implemen-
tations,” in ACM Conference on Computer and Communications
Security (CCS), 2005.
[45] D. Brumley and D. Boneh, “Remote Timing Attacks are Practi-
cal,” in USENIX Security Symposium, 2003.
[46] D. X. Song, D. Wagner, and X. Tian, “Timing Analysis of
Keystrokes and Timing Attacks on SSH,” in USENIX Security
Symposium, 2001.
[47] S. Chen, R. Wang, X. Wang, and K. Zhang, “Side-Channel Leaks
in Web Applications: A Reality Today, a Challenge Tomorrow,”
in IEEE Symposium on Security and Privacy, 2010.
[48] E. W. Felten and M. A. Schneider, “Timing Attacks on Web
Privacy,” in ACM Conference on Computer and Communications
Security (CCS), 2000.
[49] C. V. Wright, L. Ballard, S. E. Coull, F. Monrose, and G. M.
Masson, “Spot Me if You Can: Uncovering Spoken Phrases in
Encrypted VoIP Conversations,” in IEEE Symposium on Security
and Privacy, 2008.
[50] A. M. White, A. R. Matthews, K. Z. Snow, and F. Monrose,
“Phonotactic Reconstruction of Encrypted VoIP Conversations:
Hookt on Fon-iks,” in IEEE Symposium on Security and Privacy,
2011.
[51] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey,
you, get off of my cloud: exploring information leakage in third-
party compute clouds,” in ACM Conference on Computer and
Communications Security (CCS), 2009.
[52] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter, “Homealone:
Co-residency detection in the cloud via side-channel analysis,” in
IEEE Symposium on Security and Privacy, 2011.
[53] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM
Side Channels and Their Use to Extract Private Keys,” in ACM
Conference on Computer and Communications Security (CCS),
2012.
[54] J. Bonneau and I. Mironov, “Cache-Collision Timing Attacks
Against AES,” in Cryptographic Hardware and Embedded Sys-
tems (CHES), 2006.
[55] C. Percival, “Cache Missing for Fun and Proﬁt,” http://www.
daemonology.net/hyperthreading-considered-harmful/, 2005.
APPENDIX A.
ADDRESS RESOLUTION
Figure 8 illustrates the address resolution for regular pages
(upper part) and large pages (lower part) on PAE systems.
Notice that in the ﬁrst case, the resulting PTE points to one
single frame. In the second case, the PDE points to the ﬁrst one
of a set of adjacent frames, that in sum span the same size as
a large page.
APPENDIX B.
DOUBLE PAGE FAULT
Figure 9 shows the double page fault measurements on an
Intel i7-870 (Bloomﬁeld) processor. It is not possible to use a
simple threshold value to tell apart allocated from unallocated
pages without introducing a large amount of faulty results. In
the zoomed version in Figure 10, one can see that it is still
possible to distinguish unallocated from unallocated pages. Note
that this ﬁgure uses lines instead of dots to stress the focus on
transitions from high to low values (or vice versa). We therefore
use a change point detection (CPD) algorithm [40] in this case.
32 bit Virtual Address – Regular Page 
3
1 
3
0 
2
5 
2
2 
2
9 
2
8 
2
7 
2
6 
2
4 
2
3 
2 
9 
PDP 
PDP Tables 
PDE 
PTE 
2
1 
2
0 
1
9 
1
8 
1
7 
1
6 
9 
1
5 
1
4 
1
3 
1
2 
1
1 
1
0 
9 
8 
7 
6 
5 
4 
3 
2 
1 
0 
12 2
Frame 
Frame
Page Directories 
Page Tables 
Physical Memory 
32 bit Virtual Address – Large Page 
3
2
2 
1 
3
0 
2
9 
2
7 
2
6 
2
8 
2
5 
2
4 
2
3 
2
1 
2
0 
1
9 
1
8 
1
7 
1
6 
1
5 
1
4 
1
3 
1
2 
1
1 
1
0 
9 
8 
7 
6 
5 
4 
3 
2 
1 
0 
2 
9 
PDP 
PDP Tables 
PDE 
21 1
1st Frame 
st Fram
… 
Page Directories 
Physical Memory 
Figure 8. Address resolution for regular and large pages on PAE systems
Figure 9.
processor
Double page fault measurements on Intel i7-870 (Bloomﬁeld)
Figure 10. Zoomed-in view of Figure 9
205
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:20 UTC from IEEE Xplore.  Restrictions apply.