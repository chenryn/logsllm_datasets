## Page 361
func （q *IndexMaxPQ) less(i，j int) bool {
func (q *IndexMaxPQ) exch(i，j int） {
func (q *IndexMaxPQ) swim(n int)
func (q *IndexMaxPQ)
func (q *IndexMaxPQ) Remove(key int)
// Remove define
q-qp[q-pq[j]]
q.qp[q-pq[i]] =
for n>１{ 
for 2*n t了，说明该把左边界往右移动了(能这样移动
扫完整个数组，判断每个和j，判断是否满足题意。j在循环的过程中注意判断剪枝条件“
，并且i-jl≤。
for j O { 
return 0
if node.Right != nil {
if node.Left != nil {
node := queue[0]
Right *TreeNode
Left *TreeNode
Val int 
queue = append(queue, node.Right)
 queue = append(queue, node.Left)
 nextLevelNum++
---
## Page 367
Assume that the total area is never beyond the maximum possible value of int.
Example:
Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.
 a e  sa aa o  pa ae  a 
题目
223. Rectangle Area
Note:
output: 45
Input: A = -3， B = 0， C = 3， D = 4,E = 0, F = -1, G = 9, H = 2 
(A, B) : (-3, 0)
return res
if curNum == O { 
curNum = nextLevelNum
queue = queue[1:]
nextLevelNum = 0 
res += nextLevelNum
curNum-
 nextLevelNum++
0 (0.0)
(E, F) : (0.,-1)
(C, D) :(3, 4)
(G, H) : (9. 2)
X
---
## Page 368
Example 2: 
Example 1: 
, non-negative integers and empty spaces .
The expression string may contain open  and closing parentheses D, the plus ± or minus sign
Implement a basic calculator to evaluate a simple expression string.
题目
224. Basic Calculator
代码
解题思路
标表示，如图所示。说明：假设矩形面积不会超出 int 的范围。
在二维平面上计算出两个由直线构成的矩形重叠后形成的总面积。每个矩形由其左下顶点和右上顶点坐
题目大意
Output:2
Input: "1 + 1" 
·几何题，由于只有2个矩形，所以按照题意做即可。先分别求两个矩形的面积，加起来再减去两
·给出两个矩形的坐标，求这两个矩形在坐标轴上覆盖的总面积。
func area(x0, y0, xl, yl int) int {
func computeArea(A int, B int,C int,D int,E int,F int,G int,H int） int {
package leetcode
return 1 * h 
if l=‘0’{//获取一段数字
 i++ 
base,v := l0, int(s[i]-'0')
V = v*base + int(s[i+l]-'0') 
算式中有空格，需要跳过
---
## Page 370
func calculatel(s string) int {
//解法二
stack.Remove(stack.Back()).(int)
return calculatestr(string(stack)) 
fmt.Printf("stack = %v\n", string(stack))
for i := O; i = O; index-- {
result = 0 
result += v * sign
 stack = append(stack, res[j])
if stack[index] == '(' {
 break
---
## Page 371
225. Implement Stack using Queues
func calculatestr(str string) int {
return res
fmt.Printf("s = %v nums = %v res = %v\n", string(s), nums, res)
for i := O; i  0 && s[len(s)-1] == '+' && str[i] == '-' {
if len(s) > 0 && s[len(s)-1] == ‘+' && str[i] == ‘+' {
} else {
 tmpstr += string(str[i]]
continue 
res += nums[i+l]
s = append(s, str[i])
s = append(s, str[i])
res -= nums[i+1]
num,
s[len(s)-i] =
else if len(s) > 0 && s[len(s)-l] == '-' && str[i] == '-' {
continue
else if len(s) > 0 && s[len(s)-1] == '-'&& str[i] == '+' {
nums = append(nums, num) 
s[len(s)-1] :
 := strconv.Atoi(tmpstr)
'+`
-+得-
---
## Page 372
代码
按照题目要求实现即可。
解题思路
题目要求用队列实现一个栈的基本操作：push(x)、pop()、top()、empty()。
题目大意
Example:
Implement the following operations of a stack using queues.
Note:
题
● You must use only standard operations of a queue -- which means only push to back,
stack.empty(); // returns false
stack.pop();
stack.push(1);
MyStack stack = new MyStack();
● push(x) -- Push element x onto stack.