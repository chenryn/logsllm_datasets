GROUP BY observation_month;
```
`date_trunc('month'，timestamp)` 函式用于确定包含 `timestamp` 的日历月份，并返回代表该月份开始的另一个时间戳。换句话说，它将时间戳舍入成最近的月份。
这个查询首先过滤观察记录，以只显示鲨鱼家族的物种，然后根据它们发生的日历月份对观察记录果进行分组，最后将在该月的所有观察记录中看到的动物数目加起来。
同样的查询用 MongoDB 的 MapReduce 功能可以按如下来表述：
```js
db.observations.mapReduce(function map() {
        var year = this.observationTimestamp.getFullYear();
        var month = this.observationTimestamp.getMonth() + 1;
        emit(year + "-" + month, this.numAnimals);
    },
    function reduce(key, values) {
        return Array.sum(values);
    },
    {
        query: {
          family: "Sharks"
        },
        out: "monthlySharkReport"
    });
```
* 可以宣告式地指定一个只考虑鲨鱼种类的过滤器（这是 MongoDB 特定的 MapReduce 扩充套件）。
* 每个匹配查询的文件都会呼叫一次 JavaScript 函式 `map`，将 `this` 设定为文件物件。
* `map` 函式发出一个键（包括年份和月份的字串，如 `"2013-12"` 或 `"2014-1"`）和一个值（该观察记录中的动物数量）。
* `map` 发出的键值对按键来分组。对于具有相同键（即，相同的月份和年份）的所有键值对，呼叫一次 `reduce` 函式。
* `reduce` 函式将特定月份内所有观测记录中的动物数量相加。
* 将最终的输出写入到 `monthlySharkReport` 集合中。
例如，假设 `observations` 集合包含这两个文件：
```json
{
  observationTimestamp: Date.parse(  "Mon, 25 Dec 1995 12:34:56 GMT"),
  family: "Sharks",
  species: "Carcharodon carcharias",
  numAnimals: 3
}
{
  observationTimestamp: Date.parse("Tue, 12 Dec 1995 16:17:18 GMT"),
  family: "Sharks",
  species:    "Carcharias taurus",
  numAnimals: 4
}
```
对每个文件都会呼叫一次 `map` 函式，结果将是 `emit("1995-12",3)` 和 `emit("1995-12",4)`。随后，以 `reduce("1995-12",[3,4])` 呼叫 `reduce` 函式，将返回 `7`。
map 和 reduce 函式在功能上有所限制：它们必须是 **纯** 函式，这意味著它们只使用传递给它们的资料作为输入，它们不能执行额外的资料库查询，也不能有任何副作用。这些限制允许资料库以任何顺序执行任何功能，并在失败时重新执行它们。然而，map 和 reduce 函式仍然是强大的：它们可以解析字串、呼叫库函式、执行计算等等。
MapReduce 是一个相当底层的程式设计模型，用于计算机丛集上的分散式执行。像 SQL 这样的更高阶的查询语言可以用一系列的 MapReduce 操作来实现（见 [第十章](ch10.md)），但是也有很多不使用 MapReduce 的分散式 SQL 实现。须注意，SQL 并没有限制它只能在单一机器上执行，而 MapReduce 也并没有垄断所有的分散式查询执行。
能够在查询中使用 JavaScript 程式码是高阶查询的一个重要特性，但这不限于 MapReduce，一些 SQL 资料库也可以用 JavaScript 函式进行扩充套件【34】。
MapReduce 的一个可用性问题是，必须编写两个密切合作的 JavaScript 函式，这通常比编写单个查询更困难。此外，宣告式查询语言为查询最佳化器提供了更多机会来提高查询的效能。基于这些原因，MongoDB 2.2 添加了一种叫做 **聚合管道** 的宣告式查询语言的支援【9】。用这种语言表述鲨鱼计数查询如下所示：
```js
db.observations.aggregate([
  { $match: { family: "Sharks" } },
  { $group: {
    _id: {
      year:  { $year:  "$observationTimestamp" },
      month: { $month: "$observationTimestamp" }
    },
    totalAnimals: { $sum: "$numAnimals" } }}
]);
```
聚合管道语言的表现力与（前述 PostgreSQL 例子的）SQL 子集相当，但是它使用基于 JSON 的语法而不是 SQL 那种接近英文句式的语法；这种差异也许只是口味问题。这个故事的寓意是：NoSQL 系统可能会意外发现自己只是重新发明了一套经过乔装改扮的 SQL。
## 图资料模型
如我们之前所见，多对多关系是不同资料模型之间具有区别性的重要特征。如果你的应用程式大多数的关系是一对多关系（树状结构化资料），或者大多数记录之间不存在关系，那么使用文件模型是合适的。
但是，要是多对多关系在你的资料中很常见呢？关系模型可以处理多对多关系的简单情况，但是随著资料之间的连线变得更加复杂，将资料建模为图形显得更加自然。
一个图由两种物件组成：**顶点**（vertices，也称为 **节点**，即 nodes，或 **实体**，即 entities），和 **边**（edges，也称为 **关系**，即 relationships，或 **弧**，即 arcs）。多种资料可以被建模为一个图形。典型的例子包括：
* 社交图谱
  顶点是人，边指示哪些人彼此认识。
* 网路图谱
  顶点是网页，边缘表示指向其他页面的 HTML 连结。
* 公路或铁路网路
  顶点是交叉路口，边线代表它们之间的道路或铁路线。
可以将那些众所周知的演算法运用到这些图上：例如，汽车导航系统搜寻道路网路中两点之间的最短路径，PageRank 可以用在网路图上来确定网页的流行程度，从而确定该网页在搜寻结果中的排名。
在刚刚给出的例子中，图中的所有顶点代表了相同型别的事物（人、网页或交叉路口）。不过，图并不局限于这样的同类资料：同样强大地是，图提供了一种一致的方式，用来在单个数据储存中储存完全不同型别的物件。例如，Facebook 维护一个包含许多不同型别的顶点和边的单个图：顶点表示人、地点、事件、签到和使用者的评论；边表示哪些人是好友、签到发生在哪里、谁评论了什么帖子、谁参与了什么事件等等【35】。
在本节中，我们将使用 [图 2-5](../img/fig2-5.png) 所示的示例。它可以从社交网路或系谱资料库中获得：它显示了两个人，来自爱达荷州的 Lucy 和来自法国 Beaune 的 Alain。他们已婚，住在伦敦。
![](../img/fig2-5.png)
**图 2-5 图资料结构示例（框代表顶点，箭头代表边）**
有几种不同但相关的方法用来构建和查询图表中的资料。在本节中，我们将讨论属性图模型（由 Neo4j，Titan 和 InfiniteGraph 实现）和三元组储存（triple-store）模型（由 Datomic、AllegroGraph 等实现）。我们将检视图的三种宣告式查询语言：Cypher，SPARQL 和 Datalog。除此之外，还有像 Gremlin 【36】这样的图形查询语言和像 Pregel 这样的图形处理框架（见 [第十章](ch10.md)）。
### 属性图