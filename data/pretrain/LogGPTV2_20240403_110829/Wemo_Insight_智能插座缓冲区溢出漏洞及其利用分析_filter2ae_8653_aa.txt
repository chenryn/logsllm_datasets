# Wemo Insight 智能插座缓冲区溢出漏洞及其利用分析
|
##### 译文声明
本文是翻译文章，文章来源：securingtomorrow.mcafee.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
物联网可以让我们的生活更轻松。想要远程打开和关闭灯和电器，并在线监控它们？一个简单的方法是，你需要一个“智能插座”，一个Wi-Fi连接的插座。但是，如果没有适当的安全保护，物联网设备就会变成攻击向量。
McAfee实验室高级威胁研究团队致力于发现软件和硬件方面的安全问题，帮助他们的开发者为企业和消费者提供更安全的产品。我们最近调查了Belkin公司生产的一种产品。通过对Wemo
Insight智能插座的研究，我们在libUPnPHndl.so库中发现了一个未报告的缓冲区溢出漏洞。这个漏洞（CVE-2018-6692）允许攻击者执行远程代码。根据[我们的披露政策](https://www.mcafee.com/enterprise/en-us/threat-center/advanced-threat-research/disclosure.html)，我们于5月21日向Belkin报告了这项研究。
这个漏洞能导致有用的攻击吗？智能插座本身的影响很小。攻击者可能会关闭开关，或者在最坏的情况下让交换机过载。但是，如果插座与其他设备联网，潜在的威胁就会增加。这个插座现在可以成为一个更大的攻击的入口点。在报告的后面，我们将会讨论一次可能的攻击。
## 寻找攻击面
按照使用手册的建议，我们使用Wemo
phone应用来安装插座。安装之后，我们可以远程打开和关闭插座。然后，我们测试了软件，包括端口扫描，监测网络流量，以及查阅一些研究。Wemo监听UPnP端口tcp
49152和tcp 49153端口。手册、拆卸图和GPL都可以在线查看，它们提供了有关CPU体系结构、操作系统和应用程序的信息。
之后我们转向硬件，拆卸了插座。我们在主板上识别出了芯片，找到了与插座通信的插头，并从闪存中取出内存。我们的在线研究提供了主板上每个芯片的数据表。
我们在板上找到了通用异步收发传输器(UART)，并通过文档确认了它们。我们用锡线连接到这些插头上，看看它们是否在主动传输。为了测试与设备的通信，我们使用了Exodus
XI Breakout板，如图所示：
[](https://p3.ssl.qhimg.com/t0102ad4516d69ca723.png)
通过暴力破解，我们能够通过UART接口获得调试信息。UART还提供了一个登录提示；然而，无论是通过网上的资料还是简单的猜测，我们都没有找到一个可用密码。
## 提取和固件分析
在主板上发现的闪存芯片是Maxronix的MX25L12835F，flashrom支持这种芯片。flashrom是一种著名的用于提取固件的开源工具。我们使用flashrom和XI
Breakout板从Wemo插座中提取固件。在获得插座附带的原始固件映像之后，我们使用Wemo
phone应用更新它。一旦设备被更新，我们再次从设备中提取固件，提供第二个映像。我们使用新固件进行了基本的健全检查，确保我们早期的软件侦察没有改变。
在提取固件后，我们使用开源二进制分析工具binwalk对固件进行了分析。binwalk从固件中提取文件系统以便进行进一步的检查。通过对文件系统的访问，我们可以检查系统配置和访问二进制文件。
## 查找漏洞
网络或远程漏洞比本地漏洞更危险，因此我们仔细研究了侦听本地网络的UPnP端口。在这个阶段，我们的首席分析师参加了一门关于Exodus智能嵌入式开发的课程，其中一位老师Elvis
Collado([@b1ack0wl](https://github.com/b1ack0wl "@b1ack0wl"))正在开发一个UPnP
Fuzzer，并表示愿意协助我们的工作。使用这个工具，我们开始对打开的UPnP端口进行模糊测试，同时监视Wemo上的UART端口。过了一会儿，我们在UART界面上看到崩溃出现了。
    11:37:16.702 stuntsx0x46ac6 STUN client transaction destroyed
    sending SIGSEGV to wemoApp for invalid write access to
    464d4945 (epc == 2ac1fb58, ra == 2ac1fccc)
    Cpu 0
    $ 0 : 00000000 00000001 0000006d 464d4945
    $ 4 : 31d2e654 31d2e770 00000003 00000001
    $ 8 : 0000007c fffffff8 00000007 00000002
    $12 : 00000200 00000100 00000807 00000800
    $16 : 31d2e6f0 31d2e898 004a1cb8 00000002
    $20 : 31d2e638 31d2e6c0 004a1388 31d2e640
    $24 : 00000400 2ac1fb30
    $28 : 2ac77d40 31d2e600 31d2e648 2ac1fccc
    Hi : 00000008
    Lo : 00000000
    epc : 2ac1fb58 Tainted: P
    ra : 2ac1fccc Status: 0100fc13 USER EXL IE
    Cause : 8080000c
    BadVA : 464d4945
    PrId : 0001964c
    Modules linked in: softdog rt_rdm rt2860v2_ap(P) raeth
    Process wemoApp (pid: 2157, threadinfo=80fa0000, task=802c87f0)
    Stack : 2a0000d0 fffffffe 31d2e6f0 31d2e770 31d2e76f 31d2e6f0 31d2e6f0 31d2e770
    00000000 31d2e604 00000000 00000000 2ac77d40 00000000 4f464751 4a484d4c
    4e444241 47454f49 50464658 45414d42 43445044 464d4945 5552414c 46495048
    4b524141 41445a4f 44534e4a 4e4e494c 44434357 494a4855 44515455 44494b45
    55584a44 584e4f52 545a5247 51545954 595a4c42 4e594a45 484f5158 46474944
    …
    Call Trace:
    Code: 80a20000 50480004 a0600000  a0620000 a0600000 10a00006 24840004 24a50001
    thready: Destructor freeing name “ChildFDTask”.
    Aborted
经过多次重复和观察实验，我们确定崩溃是由以下数据包造成的：
    POST /upnp/control/basicevent1 HTTP/1.1
    Host: 192.168.225.183:49154
    User-Agent: python-requests/2.9.1
    Accept: */*
    Connection: keep-alive
    SOAPAction: “urn:Belkin:service:basicevent:1#UpdateInsightHomeSettings”
    Content-Type: text/xml
    Accept-Encoding: gzip, deflate
    Content-Length: 3253
    210236KWWZWIVYBQZKDGSSAAPBCQVQQFAVYZEOEUFIDXXQPDYGESTOD
    GIJFERXZNMYAFJQLUZPSIJXFQSPADCRIVHDAJLLPQMPLAVECIQUWLXDLIGPLBKCROGPOCVUI
    KTSLIIXULOEBVFKWIERCFGHWHCBBDLWFBKBZXAVGRKTDALDNRPOFQJDXAEOC(…snip…)XHU
    OUZPCHUBFGLLWSJBFYFOMCGZZMJIQIUVCDETFBRBZVDVKNBVZFBRSVBSZPAYKZYNQZEQPDV
    DWSZNDUPUDCPAVWNFBFBTYMXTBNCWTBJPKORUBHBSCQBPOPOBZNVADMGWRI
由于大小原因，一些payload已被删除。(“EnergyPerUnitCostVersion”的原始数据为2828个字符)。在检查崩溃数据和数据包后，这似乎是缓冲区溢出，其中数据被覆盖到堆栈中。我们继续进行模糊测试，现在专注于“EnergyPerUnitCost”字段，我们发现只需要32个字符就可以让程序崩溃。
虽然崩溃转储为我们提供了很多有价值的信息，但仍然有很多信息我们不知道。例如，崩溃发生在“WemoApp”，并为我们提供了一个偏移量，但是这个库的基地址是什么呢？堆栈上覆盖了什么？如果没有在运行时访问应用，这些问题很难回答。因为我们已经获得了文件系统，所以我们可以静态地分析WemoApp二进制文件；但是我们仍然无法很容易地确定崩溃的确切点。
要回答这些问题，有两种途径。我们可以虚拟化Wemo固件或二进制程序来继续测试；或者，如果我们能够在UART端口上确定根密码，就可以在设备本身上进行调试。一般来说，虚拟化固件并不简单，有时会导致不准确的测试结果，最好是在设备上进行调试。有了我们在测试过程中发现的所有信息，我们似乎有希望绕过根密码。(我们确实花了一些时间试图虚拟化WemoApp，但没有成功。)
## 绕过根密码
从提取的文件系统中，我们了解到Wemo运行嵌入式Linux系统OpenWRT，用户帐户信息保存在/etc/passwd或/etc/shadow文件中。我们从/etc/passwd中提取根密码的哈希值，并将其提交到一个破解平台。事实证明这种方法在合理的时间内是无效的。
我们能够读取闪存芯片，现在我们有一个很好的机会去烧写芯片。除非在固件上进行校验和或验证，否则我们可以用已知的密码替换/etc/passwd文件。
为了验证这个想法，我们必须重新打包固件。因为Wemo的GPL是公开的，所以我们使用开发人员使用的相同工具。使用GPL，我们用Izma编译了相同版本的squash
tools
3.0，并使用修改后的/etc/passwd文件重新打包了固件文件系统。然后增加了填充，确保固件部分与原始大小相同。然后，使用“dd”将新的文件系统段插入到固件二进制文件中。在此过程中，我们发现使用binwalk提取固件不能正确地重新打包固件。通过binwalk提供的信息，我们使用“dd”来提取用于重新打包的固件二进制文件的正确部分。
有了新的固件二进制文件，我们使用XI Breakout板和flashrom在板上把固件写到闪存芯片。重新启动设备后，我们就可以使用新密码登录了。
## 分析崩溃
有了Wemo的根访问权限，我们可以在UPnP