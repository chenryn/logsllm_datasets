registers than Microsoft's version, using RDI, RSL, RDX, RCX, R8, R9 registers
to pass the first six parameters, and right-to-left push into stack for the rest.
5. local variables
When writing programs, programmers often use local variables. But in assembly
there are only registers, stacks, writable segments, and heaps, where should the local
variables of a function will be store? It is important to note that local variables are
"volatile”: once the function returns, all local variables are invalid. Considering this
property, local variables are stored on the stack, and each time a function is called,
the program allocates a space on the stack for storing the local variables.
Each function is executed with a region of local variables, a region for storing
return addresses, and a region for arguments, as shown in Fig. 5.2.
This area of each function’s own stack is called frame, also called stack frames.
However, the memory area of the stack is not fixed, and the location of the stack
frame varies with the path of call, so how can we reference local variables correctly?
Although the content of the stack changing with push and pop, the offset of local
variable in function relative to the function’s stack frame is fixed. Therefore, it is
time to introduce ebp, which is a register to store the position of the current stack
frame, specifically as a frame pointer. The program assigns ebp to a location in the
stacks frame during function initialization, so all local variables can be referenced
with ebp. Since ebp is also used by the parent function, it is necessary to save ebp at
the beginning of the function and then assign ebp to its own stack frame, which is a
classic combination in assembly code.
---
## Page 317
5.1 Basics of Revese Engineering
303
push ebp
mov ebp, esp
The stack frame of function consists of four parts: local variables, the value of the
parent stack frame, the return address, and parameters. It can be seen that ebp points
to the storage location of the parent stack frame address after initialization. Thus,
*ebp forms a link table that represents the chain of function calls.
With compilation techniques evolve, compilers can also use esp to reference local
variables by tracing the position of the stack when instruction executing, instead of
using ebp. This saves time to save ebp and increases the number of usable general
purpose registers, which can improve program performance.
There are two types of functions: functions with frame pointers and functions
optimized without frame pointers. Modern analysis tools such as IDA Pro will use
advanced stack pointer tracing methods to analyize both types of functions, so local
variables can be handled correctly.
5.1.4Introduction toCommonTools
This section introduces the tools commonly used in software reverse engineering-
1. IDA Pro
IDA (Interactive DisAssembler Pro) is a powerful tool for static analysis and
dynamic debugging executable files. Which including but not limited to x86/x64,
ARM, MIPS, PE, ELF, etc. IDA integrates Hex-Rays, which a powerful decompiler
reduce the workload when analyzing programs, and its interface is shown in
provides decompilation of pseudo-code from assembly language to C, can greatly
Figs. 5.3 and 5.4.
2. OllyDbg and x64dbg
OllyDbg is an excellent debugger for Windows 32-bit environments, and the most
powerful feature is its extensibility. However, OllyDbg is no longer available for
64-bit environments, and many people switched to x64dbg.
The interface between OllyDbg and x64dbg is shown in Figs. 5.5 and 5.6.
3. GNU Binary Utilities
The GNU Binary Utilities (binutils) is a collection of binary file analysis tools
provided by GNU. The tools included are shown in Table 5.4. Figures 5.7 and 5.8
show examples of simple applications of the tools in binutils.
4. GDB
GDB (GNU Debugger) is a GNU command-line debugger with powerful debugging
features and supports source-level debugging for programs with debug symbols. It
also supports extensions written in Python such as gdb-peda, pef and pwndbg.
---
## Page 318
304
5  Reverse Engineering
Fig, 5.4 IDA decompiler interface
Figure 5.9 shows the prompt message when starting GDB and Fig. 5.10 shows the
command line interface when using the gef plugin.
---
## Page 319
5.2Static Analysis
305
..
Fig, 5.5 OllyDbg interface
Fig, 5.6 X64dbg interface
5.2 Static Analysis
The most basic method of reverse engineering is static analysis. Which is not
running a binary, but directly analyzing various information such as machine
instructions in a binary. Currently, the most used tool for static analysis is IDA
Pro. This section introduces the general methods of static analysis based on IDA Pro.
5.2.1Introduction to IDA Use
The file required for this section is 1-helloworld.
---
## Page 320
306
5  Reverse Engineering
Table 54 GUN binary utilities
Con
ndsFeatures
1ds
as
Assembler
nm
Display symbols in the target
Copy the target file and
file
Id
Agile
modify it during the process.
gprof
Perform
ureod [o, ssqjquy a
objdump
Displays infoemation about
the target file and can be
Generate indexes for static
disassembled.
addr2line
Get the line mumber or symbol of the
ranlib
file from the virtual address of the
target fle.
libraries
ar
Create, modify and retrieve static
libraries.
readelf
Displaying the contents of an
Decoding Symbols n C++
ELF fie
c++filt
size
List the size of the file and
List binary displayable string
section
[0oIP
strings
gold
Another Linker
strip
Remove symbols from the
Generating Windows Mes-
target file
nlmcoev
Module target file format.
Converted to NetWare Loadable
windmc
Windows Resource
sage Resources
windres
Compiler
are 28 section hea
aders, starting at offset @x2e3a0:
[Nr]
Type
Address
offset
Size
EntSize
Info
Align
[ e]
NULL
interp
900
PROGBITS
[1]
8206
9
e01c
OG810
[2]
note.ABI-tag
NOTE
A
80254
1
0254
[ 3]
NOTE
E
0024
[4]
GNU_HASH
4
Bec
90090
-dynsym
DYNSYM
[ 5]
df8
90018
6
.dynstr
8
[6]
e682
STRTAB
01180
01180
[7]
.gnu.version
VERSYM
A
01802
00001802
1
vers
912a
A
2
Fig, 5.7 The example of readelf
---
## Page 321
5.2 Static Analysis
307
f11e f
at e2f64-x86-64
 ef
section ,Inst
ce
,4
@p1t-exle)
131
39 83 c4 08
c3
of
17401
pushq
1746:
1 25 62
lele
175e:
np4
1740
Fig, 5.8 The example of objdump
GNU gdb（GDB)8.2
This is free software:you are free to change and redistribute it.
.html>
Type
.
For help.type"help".
Iype"apropos word"to search for com
Fig, 5.9 The prompt message when starting GDB
1. open the file
IDA Pro is one of the most mature and advanced disassembly tools in the industry,
using the recursive descent disassembly algorithm, and this section will provide an
simple introduction to the use of IDA Pro.
After installation, the License window will pop up and you can enter the Quick
Start interface by following the instructions on the GUI, see Fig. 5.11.
Click the New button in the UI and select the file you want to open in the dialog
box. You can also click the Go button and drag the file into the open interface. Also,
---
## Page 322
308
5 Reverse Engineering
07ffff7c7552d
（）from /usr/1ib/1ibc.so.6
Modified
register
1Heap
|Stack|string]
rax
oxffftffafe
reglsters
0x0
0711117c75528
0x7b77fffff0003d48（*H=*7)
rdx
0x0
0X0
0x000000
000000400
0x0000000000000000
rs
ox00007fffffffcb10
0x0000000000000001
：0x1
rIp
：0x0
0X00
00o7fffffffca40
ox0o0o7fffffffca90
-0x00000000000
：0x0
0x246
Fig, 5.10 GEF plugin
IDA:QuIck start
N
Disassemble a new file
Go
Tork on your own
Previous
Load the old disassenbly
 Display at startup
Fig, 5.11 Quick Start interface
---
## Page 323
5.2 Static Analysis
309
toad c neu fite
Lead f11e D:
esanp1es1he11owor1d1-he11owor1d as
ELF60 for xB6-64 （Shared object) [elf.dlL]
Binorv file
Processer type
MetaPC (disassemble all opcodes)[netape]
Set
Leading segnent 0000
Analysis
 Enabled
Kernel options 1Kernel options 2
Loading offset 0000
 Indieator
enab1ed
Processor options
Options
 Loading aptions
 Loed zesources
 Fi1l segment gaps
 Renane DLL entries
 Create segsent.s
Maeua1 1oad
 Create FLAT group
 Create inports seg
OK
Cancel
Heip
Fig, 5.12 "Load a new file? dialog box
you can click the “Previous" button, double-click a list item to quickly open a
previously opened file.
Note that you need to select the correct architecture version (32 bit/64 bit) before
you open the file. You can view the file architecture information through tools such
as *file'", but a more convenient solution is open IDA with any architecture, and then
you will know the file architecture information when you load it, see Fig. 5.12, IDA
shows that this file is an ELF64 file with x86-64 architecture in the *Load a new file"
dialog box.
2. Loading files
The options in the “Load a new file” dialog box are mainly for advanced users,
beginners can use the default settings without changing them, click the “OK" button
to load the file and enter IDA. A dialog box may pop up to select whether to use the
“Proximity Browser", click the “No" button to enter the normal disassembly inter-
face. IDA will generate a database (IDB) for the file and store the entire file’s
required contents in it at this time, see Fig. 5.13, so access to the input file is no
longer required for future analysis, and all modifications to the database are inde-
pendent of the input file.
---
## Page 324
310
5  Reverse Engineering
-al frst
4
Fig, 5.13 IDA interface
The interface in Fig. 5.13 is divided into several parts, which are described below.
• Navigation bar: shows the distribution of different data types in the program
(common functions, data, undefined, etc.).
The main disassembly window: It displays the results of disassembly, control
flow diagrams, etc. which can be dragged and selected.
• Function window: Displays all function names and addresse (can be seen by
dragging the scroll bar below), which can be filtered by Ctrl+F.
• Output window: Displays IDA's logs during running, and you can enter com-
mands in the input box and execute them.
•Status Indicator: If it displays “AU: idle”, which means IDA has completed the
automated analysis of the program.
In the disassembly window, use right-click menu or space to switch between control
flow diagram and text interface disassembly, see Fig. 5.14.
3. Data type manipulation
One of the highlights of IDA is that the user is free to control the disassembly process
through interface interaction. IDA has done its best to automatically define a large
number of locations for user during the process. For example, IDA has correctly
labeled most of the data in code segment as code type and disassembled it and
labeled some of the locations in special segments as 8-byte integer qword. But IDA's
---
## Page 325
5.2 Static Analysis
311
-X>
1id 33
Fig, 5.14 IDA text interface
.text:eeeeeeeee
nov
rsp, FFFFFFFFFFFFOh
rdx,rsp
and
；ubp_av
text:ee8e000eee000539;
text:eee
text:e0
00530
9053E
db
5eh