# 前言
在计算机语言中整数类型都有一个宽度,我们常见的整数类型有8位（单字节字符、布尔类型）、16位（短整型）、32位（长整型）等,也就是说，一个整数类型有一个最大值和一个最小值;如歌把一个数据放入了比它本身小的存储空间中，从而出现了溢出;而通常一个数据的溢出,往往影响的是一个堆或者栈的申请,最终导致堆或栈的溢出....  
我这里是通过分析Linux kernel 4.20的BPF来进行学习的,环境我仍然放在了[github](https://github.com/cc-sir/ctf-challenge/tree/master/Linux%20kernel%204.20%20BPF%20%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA)上面了,需要的话可以自行下载学习....  
分析的代码为`linux-4.20-rc3`版本：
,因为该漏洞影响`Linux Kernel 4.20rc1-4.20rc4`，主要Linux发行版并不受其影响....
# 简介
`BPF`的全称是`Berkeley Packet
Filter`,字面意思意味着它是从包过滤而来,该模块主要就是用于用户态定义数据包过滤方法;从本质上我们可以把它看作是一种内核代码注入的技术,`BPF`最大的好处是它提供了一种在不修改内核代码的情况下，可以灵活修改内核处理策略的方法,这使得在包过滤和系统tracing这种需要频繁修改规则的场合中非常有用....
# 漏洞分析
首先这个漏洞的触发流程是这样的:
    SYSCALL_DEFINE3() -> map_create() -> find_and_alloc_map() -> queue_stack_map_alloc()
首先`BPF`是通过系统调用来触发的,[源码](https://elixir.bootlin.com/linux/v4.20-rc3/source/kernel/bpf/syscall.c#L2466):
    SYSCALL_DEFINE3(bpf, int, cmd, union bpf_attr __user *, uattr, unsigned int, size)
    {
        union bpf_attr attr = {};
        int err;
        if (sysctl_unprivileged_bpf_disabled && !capable(CAP_SYS_ADMIN))
            return -EPERM;
        err = bpf_check_uarg_tail_zero(uattr, sizeof(attr), size);
        if (err)
            return err;
        size = min_t(u32, size, sizeof(attr));
        /* copy attributes from user space, may be less than sizeof(bpf_attr) */
        if (copy_from_user(&attr, uattr, size) != 0)
            return -EFAULT;
        err = security_bpf(cmd, &attr, size);
        if (err map_flags);
        if (f_flags = nr_node_ids ||
             !node_online(numa_node)))
            return -EINVAL;
        /* find map type and init map: hashtable vs rbtree vs bloom vs ... */
        map = find_and_alloc_map(attr);         //根据map的类型分配空间
        if (IS_ERR(map))
            return PTR_ERR(map);
        err = bpf_obj_name_cpy(map->name, attr->map_name);
        if (err)
            goto free_map_nouncharge;
        atomic_set(&map->refcnt, 1);
        atomic_set(&map->usercnt, 1);
        ... ...
        free_map:
        bpf_map_release_memlock(map);
    free_map_sec:
        security_bpf_map_free(map);
    free_map_nouncharge:
        btf_put(map->btf);
        map->ops->map_free(map);
        return err;
    }
其中`find_and_alloc_map`函数会根据map的类型给map分配空间,`find_and_alloc_map`中首先会根据`attr->type`，寻找所对应的处理函数虚表，然后根据处理函数虚表的不同，调用不同的函数进行处理,[源码](https://elixir.bootlin.com/linux/v4.20-rc3/source/kernel/bpf/syscall.c#L108):
    static struct bpf_map *find_and_alloc_map(union bpf_attr *attr)
    {
        const struct bpf_map_ops *ops;
        u32 type = attr->map_type;
        struct bpf_map *map;
        int err;
        if (type >= ARRAY_SIZE(bpf_map_types))
            return ERR_PTR(-EINVAL);
        type = array_index_nospec(type, ARRAY_SIZE(bpf_map_types));
        ops = bpf_map_types[type];      //根据type的值寻找所对应的处理函数虚表
        if (!ops)
            return ERR_PTR(-EINVAL);
        if (ops->map_alloc_check) {
            err = ops->map_alloc_check(attr);
            if (err)
                return ERR_PTR(err);
        }
        if (attr->map_ifindex)
            ops = &bpf_map_offload_ops;
        map = ops->map_alloc(attr);         //调用虚函数
        if (IS_ERR(map))
            return map;
        map->ops = ops;
        map->map_type = type;
        return map;
    }
而在虚函数当中有一个`queue_stack_map_alloc`函数,[源码](https://elixir.bootlin.com/linux/v4.20-rc3/source/kernel/bpf/queue_stack_maps.c#L62):
    static struct bpf_map *queue_stack_map_alloc(union bpf_attr *attr)
    {
        int ret, numa_node = bpf_map_attr_numa_node(attr);
        struct bpf_queue_stack *qs;
        u32 size, value_size;
        u64 queue_size, cost;
        size = attr->max_entries + 1;      ////会产生整数溢出
        value_size = attr->value_size;
        queue_size = sizeof(*qs) + (u64) value_size * size;
        cost = queue_size;
        if (cost >= U32_MAX - PAGE_SIZE)
            return ERR_PTR(-E2BIG);
        cost = round_up(cost, PAGE_SIZE) >> PAGE_SHIFT;
        ret = bpf_map_precharge_memlock(cost);
        if (ret map, attr);
        qs->map.pages = cost;
        qs->size = size;
        raw_spin_lock_init(&qs->lock);
        return &qs->map;
    }
这个函数就是我们整数溢出漏洞的关键函数了;  
因为这里`size`的类型是u32:
    u32 size, value_size;
        u64 queue_size, cost;
而`attr->max_entries`是我们用户传入进来的参数,是可控的;  
因为`size = attr->max_entries +
1;`如果`attr->max_entries=0xffffffff`，那么`attr->max_entries+1`的时候就会发生整数溢出使得`size=0`了;  
然后因为后续在函数`bpf_map_area_alloc`中会申请一块大小为`queue_size`的堆内存,而`queue_size`的大小由`queue_size
= sizeof(*qs) + (u64) value_size *
size;`表达式计算得到的;所以最后我们分配的堆的大小只有`sizeof(*qs)`了....
## 整数溢出
这里我们可以通过动态调试来定位到关键代码处,从会汇编层面可以更加清晰的看到漏洞点:  
这里就看到了`eax`寄存器就相当于是`size`,长度为32位,当执行加1操作后,`eax`的值就会被溢出置为`0`:  
这个时候又会用`rdx`的值去乘以`rdx`的值,当然最终得到的结果仍然是`0`;
## 申请过小的堆
然后这里的汇编代码就对应了:
    if (ret  BPF_EXIST)
            return -EINVAL;
        raw_spin_lock_irqsave(&qs->lock, irq_flags);
        if (queue_stack_map_is_full(qs)) {
            if (!replace) {
                err = -E2BIG;
                goto out;
            }
            /* advance tail pointer to overwrite oldest element */
            if (unlikely(++qs->tail >= qs->size))
                qs->tail = 0;
        }
        dst = &qs->elements[qs->head * qs->map.value_size];
        memcpy(dst, value, qs->map.value_size);     //堆溢出
        if (unlikely(++qs->head >= qs->size))
            qs->head = 0;
    out:
        raw_spin_unlock_irqrestore(&qs->lock, irq_flags);
        return err;
    }
这里`memcpy`函数中的`dst`就是上面申请的`queue
stack`区域，而`src`是由用户态拷入的大小为`qs->map.value_size`的`buffer`,
拷贝长度由创建`queue_stack`时用户提供的`attr.value_size`所决定的，所以拷贝长度也是用户可控的;`sizeof(struct
bpf_queue_stack)`就有`256`个字节，如果当`value_size > 256 - (&qs->elements -&qs)`时,就会发生越界拷贝了;
# 漏洞利用
综上所述,我们可以利用一个整数溢出漏洞造成一个堆溢出漏洞,但是这里我们有限定条件:
  1. 申请堆块的大小是0x100;
  2. 可以向相邻堆块溢出;  
不过在这个模块中刚好有一个数据结构我们可以使用`bpf_queue_stack`:
        struct bpf_queue_stack {
     struct bpf_map map;
     raw_spinlock_t lock;
     u32 head, tail;
     u32 size; 
     char elements[0] __aligned(8);
    };
其中`struct bpf_map`为:
        struct bpf_map {
     const struct bpf_map_ops *ops ____cacheline_aligned;    //虚表
     struct bpf_map *inner_map_meta;
     void *security;
     enum bpf_map_type map_type;
     u32 key_size;
     u32 value_size;
     u32 max_entries;
     u32 map_flags;