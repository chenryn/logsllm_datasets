```shell
#加密
openssl enc -blowfish -in out.txt -out p.txt -pass pass:123456 -iter 100 -pbkdf2
```
**对称加密-chacha20**
```shell
#加密
openssl enc -chacha20 -in out.txt -out p.txt -pass pass:123456 -iter 100 -pbkdf2
```
**对称加密-rc4**
一种流加密算法
```shell
#加密
openssl enc -rc4 -in out.txt -out p.txt -pass pass:123456 -iter 100 -pbkdf2
```
**非对称加密-rsa**
用于数据加密与签名
```shell
#生成未经对称加密保护的RSA密钥对
openssl genrsa -out RSA.pem
#生成经AES加密后的RSA密钥对
openssl genrsa -out rsa.pem -aes128 -passout pass:123456 1024
#将RSA密钥对进行一次DES3加密处理
openssl rsa -in RSA.pem -des3 -passout pass:123456 -out E_RSA.pem
#从RSA密钥对中分离出公钥
openssl rsa -in RSA.pem -passin pass:123456 -pubout -out RSA_pub.pem
#加密
openssl rsautl -encrypt -pubin -inkey RSA_pub.pem -in plain.txt -out enc.txt
#解密
openssl rsautl -decrypt -inkey RSA.pem -in enc.txt -out plain.txt
#签名
openssl rsautl -sign -inkey RSA.pem -in plain.txt -out enc.sig
#验签
openssl rsautl -verify -pubin -inkey RSA_pub.pem -in enc.sig -out plain.txt
```
### 1.4 密码安全
为了实现数据的机密性，加密技术是必须考虑的问题。现代加密不同于古典加密，对数据的加解密都依赖密钥，密钥失窃就会引起安全问题。因此密码安全是数据安全中非常重要的一环。
密码安全的可以大致分为两部分，密码设计与密码管理。
#### 1.4.1 密码设计 
结构上的安全要求密码的创建满足以下特点：
（1）密码长度长、字符集复杂度高；
（2）实用性高，避免记不住；
（3）单一独特性，密码不混用；
（4）匿名化，防社工字典碰撞；
（5）定期更换。
密码在平时存储时要求不可明文存储，更不能放到公开网络中，需要放到具有一定私密性的空间中，最好经过重新加密后再存储。
#### 1.4.2 密码管理
##### 1.4.2.1 KeePassXC
KeePassXC是这方面做的比较好的开源密钥管理软件，它是KeePassX的升级版(KeePassX不再维护了)，这个工具稳定，跨平台，久经考验，特别适合对敏感密钥的存储。
工具实现了对密钥条目的分类管理，支持生成高强度的密钥，支持内部导入各种类型的敏感文件附件（如公私钥、证书等），还记录操作历史方便密钥修改后撤回，功能非常强大。
**下载地址**
```shell
#官方地址
https://keepassxc.org/download/
#Linux
apt-get install keepassxc
#windows
https://github.com/keepassxreboot/keepassxc/releases/download/2.6.6/KeePassXC-2.6.6-Win64-Portable.zip
```
**使用**
KeepassXC较它的前作KeePassX加密方面的特性改动了不少，它支持对密钥库更高强度的加密，加密算法及分组加密位数也开放给用户进行选择。
对于对密码学不够了解的人，最直观判断加密强度强不强看的是解密花费的时间，解密时间越长说明消耗的资源越多，运算量越大。因此工具直观的通过解密耗时数来让用户感知到密钥库的加密强度到底如何。对于懂行的人，KeePassXC用一种更专业的方式让用户选择加密算法的类型以及密钥派生及转化的参数。
![2021-06-19_104053](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_104053.png)
![2021-06-19_104244](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_104244.png)
KeePass还支持对密钥库设置多种类型的访问密钥，只有同时满足才能解密，形成了双因素验证，增强了安全性。
![2021-06-19_104518](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_104518.png)
内部以条目树的形式实现对密码的管理，对于每一个条目，在保留前作支持生成随机的高强度的密码外，还支持生成适用于虚拟货币领域常用到的随机口令。
![2021-06-19_112058](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_112058.png)
![2021-06-19_111822](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_111822.png)
### 1.4 数据销毁
#### 1.4.1 物理销毁
使用酸蚀、高温、粉碎等方式，彻底破坏存储设备的可读性，使得司法取证时无法进行数据恢复。
#### 1.4.2 擦写销毁 
首先，删除不等于销毁，格式化亦不等于销毁。无论是Windows、Linux、Mac，任何对文件的简单删除并不破坏文件在存储空间内的存储结构。格式化也同理。因此通过一定的技术手段，均能从存储设备上恢复出原来的数据。不论是机械硬盘、固态硬盘以及其他生活中常见的存储设备，想要实现对数据的彻底销毁，多次重复对扇区数据的写入操作，覆盖掉原数据是最有效的数据销毁手段（机械硬盘HDD是靠磁介质的磁场方向，固态硬盘SSD是靠存储单元带电量的多少，这是可能存在中间状态的。因此擦0并不能保证完全擦0，擦1也不能保证完全擦1。必须要多次擦除）。
作为一种低成本但可行性极高实现方案，使用Linux Live系统进行数据擦写非常合适。Linux下自带dd命令，输入如下命令可对指定的硬盘进行写数据操作。重复多次即可达到彻底销毁数据的效果。数据擦写销毁往往需要消耗大量的时间，时间成本确实比物理销毁要高。
```shell
dd if=/dev/urandom of=/dev/hda1
```
### 1.5 定期安全检测
可以定期使用具有高口碑的有良知的杀毒软件对全系统进行扫描，可以扫描完成后卸载掉。使用前一定要配好相关目录白名单、关闭开机自启动、关闭未知样本上传功能。
## 2 网络安全
### 2.1 邮件安全
#### 2.1.1 加密安全
邮件数据的隐私性是邮件安全首要考虑的因素。任何时候邮箱都不应直接传递敏感数据，敏感的内容及附件需要加密。关于邮件内容加密通信，现在已经有了一套相对成熟的方案，GPG工具常用于的邮件内容加密，只要使用方法得当，能够有效的抵御中间人对邮件内容的窥视与篡改。
下面介绍如何使用gpg对邮件内容进行加密。
##### 2.1.1.1 gpg邮件加密
**step1**：获得某人对外发布的公钥，导入该公钥到gpg中。在这一过程中要注意发布的公钥的格式。
常见的对外发布的公钥是以文本及文件形式存在的。如果是以可见字符ascii形式（也就是gpg的--armor参数）存在的，则内容形式形如如下所示:
```shell
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG 
v1mQENBGDMWxgBCACgtdOB293iBw5tS0TgED85oImKq62i6azbkk4p/Ueq0ctXX5Do
................................................................
................................................................
................................................................
................................................................
Cqu8i2ILRvMCMqP0rY/HJdgrwYIRs96zu4xTXgpQWkCoSPAg00bBii/cuBLm7BENdr
9YuBSP1AtFPzvCNvb5asDEcZUa+iRTYNpdLwHJehlbcbIhUHYG9CZyGg==
=z44q
-----END PGP PUBLIC KEY BLOCK-----
```
```shell
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQINBFS7wI8BEAChYhCa6QqmhpZkM63GN78qq4OI7MYvz+rIVo2At1zBu4TNmHqr
................................................................
................................................................
................................................................
................................................................
mBwe169oZ6C2n3SNQFYE7QgwOlu69JbQZ+KrdFi8oZng/lJBFwcCe3gesly6MPJ1M
3NQDCz+b/8UNQbBWF+okwobdl869P06GZtOgG0eh88=
=s1R6
-----END PGP PUBLIC KEY BLOCK-----
```
具体导入公钥时，图形化类工具的导入都千篇一律。
![2021-06-19_114927](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_114927.png)
命令行导入也很简单。
![2021-06-19_115246](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_115246.png)
step2：准备好以下3部分内容，将他们通过对方的公钥加密后发送给对方。
```shell
1.自己想要告知对方的内容
2.自己的公钥。(gpg --armor --output public-key.asc --export PI:EMAIL)
3.前两部分内容的签名。[可选](gpg --sign --armor data12.txt)
```
下面是具体的3部分消息组合起来的内容：
![2021-06-19_115922](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_115922.png)
使用对方公钥加密后的内容如下：
![2021-06-19_120021](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_120021.png)
step3：对方收到来信后，用自己的私钥可以解密出密件内容。从而获得了我们的公钥。收件方也可以用这个公钥尝试对签名进行验签，验证我们这个密钥对的有效性。
![2021-06-19_120624](https://raw.githubusercontent.com/aplyc1a/blogs_picture/master/2021-06-19_120624.png)