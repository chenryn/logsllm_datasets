## 6.5 日志留存策略
随着系统的运行，日志数据会与日俱增，这些数据应该如何进行处理呢？是留存还是删除呢？这是一个策略问题。日志处理系统通常会提供若干个策略选项供用户选择，如Kafka就提供了数据老化机制，具有delete和compact两种留存类型。用户应根据实际情况和自身需求，设置不同的日志留存策略。本节根据Kafka的留存策略及普通日志的基本留存策略，给出三个策略维度，以供读者参考。
### 6.5.1 空间策略维度
日志不断积累带来的最大问题就是大量占用磁盘空间。当磁盘空间严重不足时，会影响系统的正常运行。可以根据系统大体所需的磁盘空间，或者用户自身对磁盘空间的统筹规划，设置空间阈值。一旦达到这个阈值，就按照日期，从最早的日志开始删除，以控制剩余可用的磁盘空间，保障系统正常运行。
### 6.5.2 时间策略维度
可以从时间维度控制日志留存量，即设置一个日志保留时间。例如，设置日志保留时间为3天，则当天产生的日志将在3天后被清除，或者说，系统需要每天删除3天前的所有日志。由于每天产生的日志量在一个可控的范围内，因而这种方式也能有效地控制磁盘的可用空间。
### 6.5.3 起始位移策略维度
前两种留存策略比较常见，而起始位移策略可用于无法使用前两种策略的场合，并且需要用户手动清除日志。例如，在Kafka的流处理应用中需要存储中间消息的日志，以便下游进行处理。处理之后，又需要清除大量无用日志，以释放磁盘空间。由于无法预知未处理的消息量，故而无法使用空间策略来设置空间阈值；由于无法预知消息处理完成的时间，故而无法使用时间策略来设置时间阈值。这时，只能通过外界（下游系统或人工）的判断来确定哪些日志需要删除，哪些日志需要保留。
此外，还可以根据日志的级别、权限等，设置不同的留存策略。例如，系统全局日志保留30天，而各个模块的日志保留5天。
## 6.6 日志搜索引擎
日志存储通常伴随着日志搜索，二者相辅相成。存储的方式得当，搜索的难度就会相应降低，效率也会相应提升。目前市面上有很多日志搜索引擎，有开源项目，也有商业项目；有国外研发产品，也有国产自研产品。本节主要介绍与日志相关的实时搜索引擎。
### 6.6.1 日志搜索概述
日志用于记录系统运行情况。利用保存的日志可以追溯系统运行历史、用户操作记录，还可以通过统计分析，定位系统故障。有时需要收集多个系统的日志，大量数据的汇总对搜索能力是不小的挑战。在很多情况下，故障诊断的效率和时效极其重要，尤其是碰到严重问题时，需要及时通知运维人员进行修复，否则后果不堪设想。这对搜索的准确性和时效性提出了要求。
日志搜索的方式有很多，如普通查找、模糊搜索、数据挖掘、机器学习等。规范地输出日志，合理地存储日志，也能为日志搜索提供便利和帮助。
### 6.6.2 实时搜索引擎
1\. Elasticsearch
Elasticsearch（ES）是一个实时的分布式搜索和分析引擎，可用于全文搜索和结构化搜索。要想实时搜索最新的数据，必须采用倒排索引。存储数据要用磁盘，因此磁盘的读写速度也会成为一个瓶颈。ES中使用了缓存，先将新增的文件数据放到缓存中，再通过一系列机制与磁盘同步。为此，ES提供了reflush接口，默认1秒刷新一次，用户可以根据需要自定义刷新间隔。
1）优点
（1）分布式存储。
（2）接近实时搜索。
（3）多租户配置简单。
（4）集群存储，支持备份功能，容错性好。
2）缺点
（1）支持的索引格式较少，通常只支持JSON格式。
（2）管理和维护成本较高，修改和增加数据需要同步更新索引等。
2\. Solr
Solr是一个基于Lucene的高性能开源企业搜索平台。Solr不具备采集能力，其主要功能包括全文搜索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理等。Solr提供实时搜索和近实时搜索（Near
Real Time
Searching），实时搜索只能根据文档ID进行搜索，近实时搜索意味着文档可以边入库边搜索。在创建索引后，可以立即查询到文档。Solr是高度可扩展的，它是目前最流行的企业级搜索引擎之一。
1）优点
（1）有成熟的开发团队、用户群体和社区，便于维护。
（2）稳定性好。
（3）索引格式多样化，支持JSON、XML、CSV、HTML、PDF、Office系列等格式。
（4）在不同时进行搜索和创建索引时，搜索速度快。
2）缺点
如果在创建索引的同时进行搜索，搜索效率会大幅下降。
3\. 日志易
日志易是一个国产自研、简单易用的日志分析和管理工具，既提供云端SaaS服务，也提供本地部署版。它主要有日志采集、日志集中管理、准实时搜索、统计分析、可视化和监控等功能。日志易团队自研了一个实时搜索和分析引擎Beaver，用C++语言开发，针对日志搜索场景做了大量优化，搜索速度更快，内存控制更优，可节省50%以上的开发和维护成本。
1）优点
（1）搜索速度快，以C++语言开发，搜索速度优于Java语言。
（2）实时性高，内存控制借鉴了Linux内核的内存管理算法，既灵活又可保证速度。
（3）Beaver采用全程异步的方式，且并发度可以调节，I/O和CPU消耗更低，写入速度大大提高。
（4）节省硬件成本，Beaver对Replica策略进行了调整，大幅减少了因副本导致的资源消耗。
2）缺点
有少量索引格式还未获得支持。
上述日志搜索引擎各有特点和优、缺点，而且有各自的优势领域。用户可根据自身情况及成本预算，选择合适的日志搜索引擎。
## 6.7 小结
本章介绍了日志存储的相关内容，包括日志存储格式、日志存储方式、日志物理存储、日志留存策略及日志搜索引擎等。用户了解了不同存储技术的特点，就可以在实际应用中合理地进行选择。
第7章 日志分析
>  概述
>
>  日志分析现状
>
>  日志分析解决方案
>
>  常用分析方法
>
>  日志分析案例
>
>  SPL简介
>
>  小结
## 7.1 概述
本章主要对日志分析现状、日志分析解决方案、常用分析方法等内容进行介绍，同时结合日志分析工具进行案例实操。
## 7.2 日志分析现状
### 7.2.1 对日志的必要性认识不足
目前，国内日志分析行业总体起步较晚，国内企业对日志的认识多数还停留在《网络安全法》或信息安全等级保护合规要求，即留存重要日志数据，满足180天存储要求，并且能够进行审计。当问及具体审计内容或日志数据挖掘的细节时，很多人都回答不上来。
### 7.2.2 缺乏日志分析专业人才
从事日志分析工作需要丰富的知识储备。企业安全运营的方方面面都涉及日志，了解业务、技术、设备等方面的知识对日志分析效果起到决定性的作用。常用知识有安全知识、网络知识、系统运维知识、业务运维知识、业务逻辑知识和统计学知识等。
日志分析最大的难点是日志格式不统一。业务系统日志或厂家通用设备日志格式不同，若没有厂家技术文档支持，则很难做好日志分析。
就以上两个方面而言，国内真正做到既懂业务、安全、运维，又了解日志的专业人才非常少。
### 7.2.3 日志体量大且分散，问题定位难
目前，金融行业如银行的日志单日增量可达数十TB，这些日志分散在各种应用系统或设备上。面对如此海量数据，很多企业运维人员还采用逐个设备申请权限并登录的方式查看日志，通过Linux
grep或awk命令进行日志筛选。这样做不仅效率低下，而且耗时长。
### 7.2.4 数据外泄
企业内部业务系统大多是由多个厂家共同开发的。在没有驻场运维的情况下，当业务系统出现故障时，厂家通常会要求企业发送日志到厂家进行排障。但是，日志中通常包含很多用户的敏感信息，外传数据易导致信息泄露。
### 7.2.5 忽略日志本身的价值
许多企业仅仅考虑满足信息安全等级保护合规要求或行业监管要求，而忽略了日志本身的价值，没有深入挖掘日志中有用的信息。
## 7.3 日志分析解决方案
### 7.3.1 数据集中管理
对于日志分析而言，首先要对企业内部所有的日志数据做集中管理，解决日志分散问题，然后根据需求定制解析规则，优化日志分析结果。日志采集示意如图7-1所示。
![](media/image5.tiff){width="3.8220450568678914in"
height="2.1676377952755908in"}
图7-1 日志采集示意
首先对企业内部的日志进行统一收集，主要方式为Rsyslog或Agent；然后在智能日志中心进行解析和分析，并将结果推送给其他数据消费者。
（1）智能运维：智能运维需要高质量的底层数据，日志的实时性及内容的翔实性都能很好地满足智能运维的需求，只需要在智能日志中心做好数据解析工作。
（2）告警推送：日志具有实时性，先定义好异常特征，如错误关键字、错误码等，然后对异常特征频次进行统计和告警。告警事件可以通过接口方式对接到告警平台，或者由智能日志中心进行告警展示。
（3）数据湖：日常业务交易报文中通常包含交易详细信息或用户详细信息。通过解析、提取与挖掘，可以获得高质量的用户特征或交易特征，这些数据资源对大数据部门做用户推广是非常有价值的。
（4）BI：通过对不同的日志进行分析，可以形成可靠的数据报告，用于安全、运维方面的分析与改善。
（5）UEBA：当系统或应用遭到暴力破解时，在短期内会出现大量的登录失败的情况或错误日志。通过日志可以发现异常用户行为。
（6）安全态势：如果企业已有防火墙、WAF、IPS、IDS等系统，那么企业网络一定是安全的吗？不一定。还需要一个综合平台对各系统的告警信息进行预处理和分析，然后提供给运维或安全管理人员。这就是安全态势方面的工作。
### 7.3.2 日志分析维度
日志分析可从图7-2所示的4个维度展开。
![](media/image6.tiff){width="4.1299212598425195in"
height="2.236017060367454in"}
图7-2 日志分析维度
1\. 运维增效
利用先进的日志分析工具提高运维效率，快速定位故障，找到性能瓶颈。通过定义运维过程中常见的异常事件进行自助监控。
2\. 安全事件追踪
企业发生安全事件需要进行溯源分析，日志分析是有效的途径之一。有些攻击或漏洞是安全设备发现不了或无法拦截的，此时日志分析就是必不可少的手段。因此，日志分析可以作为企业安全防护的重要手段之一。
3\. 业务运营支撑
交易日志中存在很多与用户特征和用户行为有关的数据，结合业务特点深入挖掘这些数据的价值对业务运营和市场战略规划具有深远的意义。
4\. 合规审计
日志分析可满足国家和行业监管机构的要求。
## 7.4 常用分析方法
### 7.4.1 基线
基线的基本原理是通过计算标准误差和置信区间来实现动态离群值检测（见图7-3）。然而，运维分析中的故障有可能是多因素的连锁反应。应用基线还要假定日志数据符合正态分布。该方法可以考虑应用在交易量、耗时等指标的监控上。
![](media/image9.png){width="5.763888888888889in"
height="1.820138888888889in"}
图7-3 动态离群值检测
### 7.4.2 聚类
日志种类多样，即使同一台设备产生的日志类型也有差别。日志分析涉及各种不同类型的事件，通过聚类可以对这些事件进行自动分类，聚类示例如图7-4所示。
![](media/image7.tiff){width="5.315in" height="2.3533333333333335in"}
图7-4 聚类示例
### 7.4.3 阈值
阈值有两种，一种是经验阈值，另一种是基线阈值。例如，某应用具备自动重连功能，当出现逻辑问题时会自动尝试在15秒内多次重连，重连失败超过30次，则相关业务就不能恢复。在这种情况下，可以设置成如下模式：在15秒内失败20次则告警，在15秒内失败25次则提高告警级别。如果通过日志分析发现一般重连15次就可以自动恢复，那么就要考虑调整阈值。
### 7.4.4 异常检测
异常检测一般分为两种情况，一种是对从未出现过的情况进行监控，另一种是定义关键字。
通常可以通过聚类或其他方法快速检测出某个错误码，或者某个用户在最近一个月内没有出现或没有登录。
当采用定义关键字的方式检测业务系统时，如果该关键字出现，就意味着系统存在严重错误。在这种情况下，有必要实时监控业务日志。
### 7.4.5 机器学习
近年来，智能运维发展火热，其中一些分析算法得到了很好的应用。在日志分析过程中使用的主要是机器学习算法，常用机器学习算法见表7-1。将机器学习算法应用到日志分析中，可以实现智能化的异常检测及故障预测，这也是智能运维领域的一个重要研究方向，本书第11章将重点介绍智能运维的相关知识。
表7-1 常用机器学习算法
  -------------------------- --------------------------------------------
  类 型                      算法名称