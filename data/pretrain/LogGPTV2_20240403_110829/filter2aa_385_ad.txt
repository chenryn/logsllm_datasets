Goprogramminglanguageandprovideafoundationnecessary
forunderstandingtheconceptswithinthisbook.Thisincludes
anabridgedreviewofbasicGosyntaxandidioms.Wediscuss
theGoecosystem,includingsupportingtools,IDEs,
dependencymanagement,andmore.Readersnewtothe
programminglanguagecanexpecttolearnthebarenecessities
ofGo,whichwillallowthemto,hopefully,comprehend,
implement,andextendtheexamplesinlaterchapters.
Chapter2:TCP,Scanners,andProxies
ThischapterintroducesbasicGoconceptsandconcurrency
primitivesandpatterns,input/output(I/O),andtheuseof
interfacesthroughpracticalTCPapplications.We’llfirstwalk
youthroughcreatingasimpleTCPportscannerthatscansa
listofportsusingparsedcommandlineoptions.Thiswill
highlightthesimplicityofGocodecomparedtoother
languagesandwilldevelopyourunderstandingofbasictypes,
userinput,anderrorhandling.Next,we’lldiscusshowto
improvetheefficiencyandspeedofthisportscannerby
introducingconcurrentfunctions.We’llthenintroduceI/Oby
buildingaTCPproxy—aportforwarder—startingwithbasic
examplesandrefiningourcodetocreateamorereliable
solution.Lastly,we’llre-createNetcat’s“gapingsecurity
hole”featureinGo,teachingyouhowtorunoperatingsystem
commandswhilemanipulatingstdinandstdoutandredirecting
themoverTCP.
Chapter3:HTTPClientsandRemoteInteraction
withTools
HTTPclientsareacriticalcomponenttointeractingwith
modernwebserverarchitectures.Thischaptershowsyouhow
tocreatetheHTTPclientsnecessarytoperformavarietyof
commonwebinteractions.You’llhandleavarietyofformats
tointeractwithShodanandMetasploit.We’llalso
demonstratehowtoworkwithsearchengines,usingthemto
scrapeandparsedocumentmetadatasoastoextract
informationusefulfororganizationalprofilingactivities.
Chapter4:HTTPServers,Routing,andMiddleware
Thischapterintroducestheconceptsandconventions
necessaryforcreatinganHTTPserver.We’lldiscusscommon
routing,middleware,andtemplatingpatterns,leveragingthis
knowledgetocreateacredentialharvesterandkeylogger.
Lastly,we’lldemonstratehowtomultiplexcommand-and-
control(C2)connectionsbybuildingareverseHTTPproxy.
Chapter5:ExploitingDNS
ThischapterintroducesyoutobasicDNSconceptsusingGo.
First,we’llperformclientoperations,includinghowtolook
forparticulardomainrecords.Thenwe’llshowyouhowto
writeacustomDNSserverandDNSproxy,bothofwhichare
usefulforC2operations.
Chapter6:InteractingwithSMBandNTLM
We’llexploretheSMBandNTLMprotocols,usingthemasa
basisforadiscussionofprotocolimplementationsinGo.
UsingapartialimplementationoftheSMBprotocol,we’ll
discussthemarshalingandunmarshalingofdata,theusageof
customfieldtags,andmore.We’lldiscussanddemonstrate
howtousethisimplementationtoretrievetheSMB-signing
policy,aswellasperformpassword-guessingattacks.
Chapter7:AbusingDatabasesandFilesystems
Pillagingdataisacriticalaspectofadversarialtesting.Data
livesinnumerousresources,includingdatabasesand
filesystems.Thischapterintroducesbasicwaystoconnectto
andinteractwithdatabasesacrossavarietyofcommonSQL
andNoSQLplatforms.You’lllearnthebasicsofconnectingto
SQLdatabasesandrunningqueries.We’llshowyouhowto
searchdatabasesandtablesforsensitiveinformation,a
commontechniqueusedduringpost-exploitation.We’llalso
showhowtowalkfilesystemsandinspectfilesforsensitive
information.
Chapter8:RawPacketProcessing
We’llshowyouhowtosniffandprocessnetworkpacketsby
usingthegopacketlibrary,whichuseslibpcap.You’lllearnhowto
identifyavailablenetworkdevices,usepacketfilters,and
processthosepackets.Wewillthendevelopaportscanner
thatcanscanreliablythroughvariousprotectionmechanisms,
includingsyn-floodandsyn-cookies,whichcausenormalport
scanstoshowexcessivefalsepositives.
Chapter9:WritingandPortingExploitCode
Thischapterfocusesalmostsolelyoncreatingexploits.It
beginswithcreatingafuzzertodiscoverdifferenttypesof
vulnerabilities.Thesecondhalfofthechapterdiscusseshow
toportexistingexploitstoGofromotherlanguages.This
discussionincludesaportofaJavadeserializationexploitand
theDirtyCOWprivilegeescalationexploit.Weconcludethe
chapterwithadiscussiononcreatingandtransforming
shellcodeforusewithinyourGoprograms.
Chapter10:GoPluginsandExtendableTools
We’llintroducetwoseparatemethodsforcreatingextendable
tools.Thefirstmethod,introducedinGoversion1.8,uses
Go’snativeplug-inmechanism.We’lldiscusstheusecases
forthisapproachanddiscussasecondapproachthatleverages
Luatocreateextensibletools.We’lldemonstratepractical
examplesshowinghowtoadopteitherapproachtoperforma
commonsecuritytask.
Chapter11:ImplementingandAttacking
Cryptography
Thischaptercoversthefundamentalconceptsofsymmetric
andasymmetriccryptographyusingGo.Thisinformation
focusesonusingandunderstandingcryptographythroughthe
standardGopackage.Goisoneofthefewlanguagesthat,
insteadofusingathird-partylibraryforencryption,usesa
nativeimplementationwithinthelanguage.Thismakesthe
codeeasytonavigate,modify,andunderstand.
We’llexplorethestandardlibrarybyexaminingcommon
usecasesandcreatingtools.Thechapterwillshowyouhowto
performhashing,messageauthentication,andencryption.
Lastly,we’lldemonstratehowtobrute-forcedecryptanRC2-
encryptedciphertext.
Chapter12:WindowsSystemInteractionand
Analysis
InourdiscussiononattackingWindows,we’lldemonstrate
methodsofinteractingwiththeWindowsnativeAPI,explore
thesyscallpackageinordertoperformprocessinjection,and
learnhowtobuildaPortableExecutable(PE)binaryparser.
ThechapterwillconcludewithadiscussionofcallingnativeC
librariesthroughGo’sCinteroperabilitymechanisms.
Chapter13:HidingDatawithSteganography
Steganographyistheconcealmentofamessageorfilewithin
anotherfile.Thischapterintroducesonevariationof
steganography:hidingarbitrarydatawithinaPNGimage
file’scontents.Thesetechniquescanbeusefulforexfiltrating
information,creatingobfuscatedC2messages,andbypassing
detectiveorpreventativecontrols.
Chapter14:BuildingaCommand-and-ControlRAT
Thefinalchapterdiscussespracticalimplementationsof
command-and-control(C2)implantsandserversinGo.We’ll
leveragethewisdomandknowledgegainedinprevious
chapterstobuildaC2channel.TheC2client/server
implementationwill,bynatureofbeingcustom-made,avoid
signature-basedsecuritycontrolsandattempttocircumvent
heuristicsandnetwork-basedegresscontrols.
1
GOFUNDAMENTALS
Thischapterwillguideyouthroughtheprocessofsettingup
yourGodevelopmentenvironmentandintroduceyoutothe
language’ssyntax.Peoplehavewrittenentirebooksonthe
fundamentalmechanicsofthelanguage;thischaptercovers
themostbasicconceptsyou’llneedinordertoworkthrough
thecodeexamplesinthefollowingchapters.We’llcover
everythingfromprimitivedatatypestoimplementing
concurrency.Forreaderswhoarealreadywellversedinthe
language,you’llfindmuchofthischaptertobeareview.
SETTINGUPADEVELOPMENT
ENVIRONMENT
TogetstartedwithGo,you’llneedafunctionaldevelopment
environment.Inthissection,we’llwalkyouthroughthesteps
todownloadGoandsetupyourworkspaceandenvironment
variables.We’lldiscussvariousoptionsforyourintegrated
developmentenvironmentandsomeofthestandardtooling
thatcomeswithGo.
DownloadingandInstallingGo
StartbydownloadingtheGobinaryreleasemostappropriate
toyouroperatingsystemandarchitecturefrom
https://golang.org/dl/.BinariesexistforWindows,Linux,and
macOS.Ifyou’reusingasystemthatdoesn’thaveanavailable
precompiledbinary,youcandownloadtheGosourcecode
fromthatlink.
Executethebinaryandfollowtheprompts,whichwillbe
minimal,inordertoinstalltheentiresetofGocorepackages.
Packages,calledlibrariesinmostotherlanguages,contain
usefulcodeyoucanuseinyourGoprograms.
SettingGOROOTtoDefinetheGoBinaryLocation
Next,theoperatingsystemneedstoknowhowtofindtheGo
installation.Inmostinstances,ifyou’veinstalledGointhe
defaultpath,suchas/usr/local/goona*Nix/BSD-based
system,youdon’thavetotakeanyactionhere.However,in
theeventthatyou’vechosentoinstallGoinanonstandard
pathorareinstallingGoonWindows,you’llneedtotellthe
operatingsystemwheretofindtheGobinary.
Youcandothisfromyourcommandlinebysettingthe
reservedGOROOTenvironmentvariabletothelocationofyour
binary.Settingenvironmentvariablesisoperating-system
specific.OnLinuxormacOS,youcanaddthistoyour
~/.profile:
setGOROOT=/path/to/go
OnWindows,youcanaddthisenvironmentvariable
throughtheSystem(ControlPanel),byclickingthe
EnvironmentVariablesbutton.
SettingGOPATHtoDeterminetheLocationofYour
GoWorkspace
UnlikesettingyourGOROOT,whichisnecessaryinonlycertain
installationscenarios,youmustalwaysdefineanenvironment
variablenamedGOPATHtoinstructtheGotoolsetwhereyour
sourcecode,third-partylibraries,andcompiledprogramswill
exist.Thiscanbeanylocationofyourchoosing.Onceyou’ve
chosenorcreatedthisbaseworkspacedirectory,createthe
followingthreesubdirectorieswithin:bin,pkg,andsrc(more
onthesedirectoriesshortly).Then,setanenvironment
variablenamedGOPATHthatpointstoyourbaseworkspace
directory.Forexample,ifyouwanttoplaceyourprojectsina
directorycalledgocodelocatedwithinyourhomedirectoryon
Linux,yousetGOPATHtothefollowing:
GOPATH=$HOME/gocode
Thebindirectorywillcontainyourcompiledandinstalled
Goexecutablebinaries.Binariesthatarebuiltandinstalled
willbeautomaticallyplacedintothislocation.Thepkg
directorystoresvariouspackageobjects,includingthird-party
Godependenciesthatyourcodemightrelyon.Forexample,
perhapsyouwanttouseanotherdeveloper’scodethatmore
elegantlyhandlesHTTProuting.Thepkgdirectorywill
containthebinaryartifactsnecessarytoconsumetheir
implementationinyourcode.Finally,thesrcdirectorywill
containalltheevilsourcecodeyou’llwrite.
Thelocationofyourworkspaceisarbitrary,butthe
directorieswithinmustmatchthisnamingconventionand
structure.Thecompilation,build,andpackagemanagement
commandsyou’lllearnaboutlaterinthischapterallrelyon
thiscommondirectorystructure.Withoutthisimportantsetup,
Goprojectswon’tcompileorbeabletolocateanyoftheir
necessarydependencies!
AfterconfiguringthenecessaryGOROOTandGOPATH
environmentvariables,confirmthatthey’reproperlyset.You
candothisonLinuxandWindowsviathesetcommand.Also,
checkthatyoursystemcanlocatethebinaryandthatyou’ve
installedtheexpectedGoversionwiththegoversioncommand:
$goversion
goversiongo1.11.5linux/amd64
Thiscommandshouldreturntheversionofthebinaryyou
installed.
ChoosinganIntegratedDevelopmentEnvironment
Next,you’llprobablywanttoselectanintegrateddevelopment
environment(IDE)inwhichtowriteyourcode.Althoughan
IDEisn’trequired,manyhavefeaturesthathelpreduceerrors
inyourcode,addversion-controlshortcuts,aidinpackage
management,andmore.AsGoisstillafairlyyounglanguage,
theremaynotbeasmanymatureIDEsasforotherlanguages.
Fortunately,advancementsoverthelastfewyearsleave
youwithseveral,full-featuredoptions.We’llreviewsomeof
theminthischapter.ForamorecompletelistofIDEoreditor
options,checkouttheGowikipageat
https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins/
.ThisbookisIDE/editoragnostic,meaningwewon’tforce
youintoanyonesolution.
VimEditor
TheVimtexteditor,availableinmanyoperating-system
distributions,providesaversatile,extensible,andcompletely
opensourcedevelopmentenvironment.Oneappealingfeature
ofVimisthatitletsusersruneverythingfromtheirterminal
withoutfancyGUIsgettingintheway.
Vimcontainsavastecosystemofplug-insthroughwhich
youcancustomizethemes,addversioncontrol,define
snippets,addlayoutandcode-navigationfeatures,include
autocomplete,performsyntaxhighlightingandlinting,and
much,muchmore.Vim’smostcommonplug-inmanagement
systemsincludeVundleandPathogen.
TouseVimforGo,installthevim-goplug-in
(https://github.com/fatih/vim-go/)showninFigure1-1.
Figure1-1:Thevim-goplug-in
Ofcourse,touseVimforGodevelopment,you’llhaveto
becomecomfortablewithVim.Further,customizingyour
developmentenvironmentwithallthefeaturesyoudesire
mightbeafrustratingprocess.IfyouuseVim,whichisfree,
you’lllikelyneedtosacrificesomeoftheconveniencesof
commercialIDEs.
GitHubAtom
GitHub’sIDE,calledAtom(https://atom.io/),isahackable
texteditorwithalargeofferingofcommunity-driven
packages.UnlikeVim,AtomprovidesadedicatedIDE
applicationratherthananin-terminalsolution,asshownin
Figure1-2.
Figure1-2:AtomwithGosupport
LikeVim,Atomisfree.Itprovidestiling,package
management,versioncontrol,debugging,autocomplete,anda
myriadofadditionalfeaturesoutoftheboxorthroughtheuse
ofthego-plusplug-in,whichprovidesdedicatedGosupport
(https://atom.io/packages/go-plus/).
MicrosoftVisualStudioCode
Microsoft’sVisualStudioCode,orVSCode
(https://code.visualstudio.com),isarguablyoneofthemost
feature-richandeasiestIDEapplicationstoconfigure.VS
Code,showninFigure1-3,iscompletelyopensourceand
distributedunderanMITlicense.
Figure1-3:TheVSCodeIDEwithGosupport
VSCodesupportsadiversesetofextensionsforthemes,
versioning,codecompletion,debugging,linting,and
formatting.YoucangetGointegrationwiththevscode-go
extension(https://github.com/Microsoft/vscode-go/).
JetBrainsGoLand
TheJetBrainscollectionofdevelopmenttoolsareefficientand
feature-rich,makingbothprofessionaldevelopmentand
hobbyistprojectseasytoaccomplish.Figure1-4showswhat
theJetBrainsGoLandIDElookslike.
GoLandistheJetBrainscommercialIDEdedicatedtothe
Golanguage.PricingforGoLandrangesfromfreefor
students,to$89annuallyforindividuals,to$199annuallyfor
organizations.GoLandoffersalltheexpectedfeaturesofa
richIDE,includingdebugging,codecompletion,version
control,linting,formatting,andmore.Althoughpayingfora
productmaynotsoundappealing,commercialproductssuch
asGoLandtypicallyhaveofficialsupport,documentation,
timelybugfixes,andsomeoftheotherassurancesthatcome
withenterprisesoftware.
Figure1-4:TheGoLandcommercialIDE
UsingCommonGoToolCommands
Goshipswithseveralusefulcommandsthatsimplifythe
developmentprocess.Thecommandsthemselvesare
commonlyincludedinIDEs,makingthetoolingconsistent
acrossdevelopmentenvironments.Let’stakealookatsomeof
thesecommands.
ThegorunCommand
Oneofthemorecommoncommandsyou’llexecuteduring
development,gorunwillcompileandexecutethemainpackage
—yourprogram’sentrypoint.
Asanexample,savethefollowingcodeunderaproject
directorywithin$GOPATH/src(remember,youcreatedthis
workspaceduringinstallation)asmain.go:
packagemain
import(
"fmt"
)
funcmain(){
fmt.Println("Hello,BlackHatGophers!")
}
Fromthecommandline,withinthedirectorycontaining
thisfile,executegorunmain.go.YoushouldseeHello,BlackHat
Gophers!printedtoyourscreen.
ThegobuildCommand
Notethatgorunexecutedyourfile,butitdidn’tproducea
standalonebinaryfile.That’swheregobuildcomesin.Thego
buildcommandcompilesyourapplication,includingany
packagesandtheirdependencies,withoutinstallingtheresults.
Itcreatesabinaryfileondiskbutdoesn’texecuteyour
program.Thefilesitcreatesfollowreasonablenaming
conventions,butit’snotuncommontochangethenameofthe
createdbinaryfilebyusingthe-ooutputcommandlineoption.
Renamemain.gofromthepreviousexampletohello.go.In
aterminalwindow,executegobuildhello.go.Ifeverythinggoes
asintended,thiscommandshouldcreateanexecutablefile
withthenamehello.Nowenterthiscommand:
$./hello
Hello,BlackHatGophers!
Thisshouldrunthestandalonebinaryfile.
Bydefault,theproducedbinaryfilecontainsdebugging
informationandthesymboltable.Thiscanbloatthesizeof
thefile.Toreducethefilesize,youcanincludeadditional
flagsduringthebuildprocesstostripthisinformationfromthe
binary.Forexample,thefollowingcommandwillreducethe
binarysizebyapproximately30percent:
$gobuild-ldflags"-w-s"
Havingasmallerbinarywillmakeitmoreefficientto
transferorembedwhilepursuingyournefariousendeavors.
Cross-Compiling
Usinggobuildworksgreatforrunningabinaryonyourcurrent
systemoroneofidenticalarchitecture,butwhatifyouwantto
createabinarythatcanrunonadifferentarchitecture?That’s
wherecross-compilingcomesin.Cross-compilingisoneof
thecoolestaspectsofGo,asnootherlanguagecandoitas
easily.Thebuildcommandallowsyoutocross-compileyour
programformultipleoperatingsystemsandarchitectures.
ReferencetheofficialGodocumentationat
https://golang.org/doc/install/source#environment/forfurther
detailsregardingallowablecombinationsofcompatible
operatingsystemandarchitecturecompilationtypes.
Tocross-compile,youneedtosetaconstraint.Thisisjust
ameanstopassinformationtothebuildcommandaboutthe
operatingsystemandarchitectureforwhichyou’dliketo
compileyourcode.TheseconstraintsincludeGOOS(forthe
operatingsystem)andGOARCH(forthearchitecture).
Youcanintroducebuildconstraintsinthreeways:viathe
commandline,codecomments,orafilesuffixnaming
convention.We’lldiscussthecommandlinemethodhereand
leavetheothertwomethodsforyoutoresearchifyouwish.
Let’ssupposethatyouwanttocross-compileyourprevious
hello.goprogramresidingonamacOSsystemsothatitruns
onaLinux64-bitarchitecture.Youcanaccomplishthisviathe
commandlinebysettingtheGOOSandGOARCHconstraints
whenrunningthebuildcommand:
$GOOS="linux"GOARCH="amd64"gobuildhello.go
$ls
hellohello.go
$filehello
hello:ELF64-bitLSBexecutable,x86-64,version1(SYSV),staticallylinked,not
stripped
Theoutputconfirmsthattheresultingbinaryisa64-bit
ELF(Linux)file.
Thecross-compilationprocessismuchsimplerinGothan