to “symbolic” values whenever the input is processed. When
a branch condition is encountered, the simulation is forked
into two paths: one path where the branch condition evalu-
ates to true and the other where it evaluates to false. The
premise behind symbolic execution is that all code is avail-
able for simulation. However, in practice this may not hold,
e.g. for system calls, which execute at OS kernel level.
Concolic execution stands for concrete + symbolic exe-
cution and it solves the issue of missing code by assigning
concrete values to system call arguments and dynamically
executing them [32, 12]. The concrete return values and
side eﬀects of system calls are then used to continue sym-
bolic execution. Concrete value assignments are obtained by
querying a satisﬁability modulo theories (SMT) solver using
the path constraints for a certain path [28]. An SMT solver
tries to ﬁnd an assignment of concrete values to symbolic
variables, which will satisfy all path constraints [9]. Other
analysis techniques which improve on classical symbolic ex-
ecution have been developed over the last decade also under
the name dynamic symbolic execution [11, 45, 50]. In this
paper we will use the term symbolic execution to refer to
all of the techniques which employ a mix between dynamic
analysis and symbolic execution.
2.4 Code Tampering Attacks
Up to this point we have mainly discussed passive analysis
attacks, where the attacker may only observe the code of a
program statically and/or dynamically. However, for several
attacker goals we must also consider active analysis attacks,
where the attacker can modify the code statically or while
loaded in process memory [43, 42] a.k.a. tampering attacks.
In particular, the subgoal of identifying self-checking code
instructions is necessarily followed by the subgoal of dis-
abling those instructions by modifying the code [43]. Also
the goal of bypassing a license check may also be achieved
by disabling the conditional instruction(s) which compare(s)
the input to the license key [42]. Therefore, an eﬀective ob-
fuscation transformation should not only hamper white-box
test case generation, but also hamper active attacks. For in-
stance, data obfuscation techniques such as (cryptographic)
hash functions are most eﬀective against passive attackers.
However, they are easy to disable by tampering attacks [55].
Hence, we expect control-ﬂow obfuscation techniques [21] to
be more successful against active attacks. Basile et al. [10]
Input Size
Mean
StdDev
1 byte
0.20
0.52
16 bytes
4.85
13.54
Depth
Mean
StdDev
1
0.05
0.10
2
2.63
9.55
# Ifs
Mean
StdDev
1
0.01
0.00
2
0.02
0.01
# Input Dep. Ifs
Mean
StdDev
0
0.01
0.00
1
0.01
0.00
2
0.02
0.01
#Loops
Mean
StdDev
1
0.03
0.03
2
3.63
11.42
#Input Len. Dep. Loops
Mean
StdDev
0
0.01
0.01
1
0.03
0.03
2
0.05
0.04
#Input Dep. Loops
Mean
StdDev
0
0.02
0.02
1
1.51
5.90
2
1.50
1.42
Table 1: KLEE execution time (in seconds) of original programs w.r.t. code characteristics of 1st dataset.
and Varia [54] note the strong relation between obfuscation
and resistance against tampering attacks. They provide for-
mal models for tamper-resistance.
3. CASE STUDY
In this section we probe existing code obfuscation trans-
formations against state-of-the-art symbolic execution en-
gines. We created 2 datasets of programs2. Using the ﬁrst
dataset we analyze the symbolic execution slowdown of ob-
fuscated programs, w.r.t. their unobfuscated counterparts,
for the attacker who wishes to attain 100% reachable code
coverage (§ 3.2), e.g. to simplify the CFG or to identify and
disable self-checks. Our goal in § 3.2 is to determine which
obfuscation transformations from 2 freely available obfusca-
tion tools are more resilient against symbolic execution and
which transformations should be used in combination with
each other. Using the second dataset of programs our goal
is to compare diﬀerent symbolic execution engines (§ 3.3)
which simulate the attacker that wants to reach a certain
path, e.g. to bypass a license check.
3.1 Obfuscator and Analysis Implementations
Commercial obfuscation tools such as Themida3, Code
Virtualizer4, VMProtect5 and ExeCryptor6 operate exclu-
sively on the Microsoft portable executable (PE) format.
However, implementations of state-of-the-art test case gen-
erators for PEs such as Microsoft SAGE [34] are not pub-
licly available. Other tools such as KLEE [11], angr [50]
and Triton [45] have no or limited support for analyzing
PEs. BitBlaze Vine [51] and S2E [17] (based on KLEE),
support the analysis of PEs, however, as existing work [57]
already points out, they have issues analyzing code obfus-
cated by the commercial tools mentioned above. There-
fore, in this work we use the Tigress C Obfuscator [18] and
Obfuscator-LLVM [37], which operate at the C source code
level, respectively LLVM intermediate representation level.
We used KLEE7 with LLVM version 3.4 and the POSIX
runtime provided by its custom klee-uclibc8 and the STP9
SMT solver [28]. Additionally to using KLEE, in § 3.3 we
also use angr version 4.6 and Triton version 0.3.
3.2 Experiments with First Dataset
The ﬁrst dataset contains 48 manually written C programs
consisting of only one function. These programs have be-
2https://github.com/tum-i22/obfuscation-benchmarks
3http://oreans.com/themida.php
4http://oreans.com/codevirtualizer.php
5http://vmpsoft.com/products/vmprotect/
6http://www.strongbit.com/execryptor.asp
7Rev https://github.com/klee/klee/commit/58f9473
8Rev https://github.com/klee/klee-uclibc/commit/a8af87c
9Rev https://github.com/stp/stp/commit/3785148
tween 11 and 24 lines of code including: control-ﬂow state-
ments, integer arithmetic and system calls to printf. We
have deliberately designed these programs to be small for the
following 2 reasons: (1) the size of the obfuscated versions of
these small programs increases between 53 and 2918 lines of
code and (2) we wanted to run a symbolic execution engine
on each program and all of its obfuscated versions without
any timeout, 10 times each, in order to check variability of
the results. For these 48 programs we varied the following
code characteristics (not all possible combinations) in order
to increase the heterogeneity of the programs. The values
of these code characteristics are listed in the headers of the
sub-tables from Table 1: (1) the size of the input of the pro-
gram measured in bytes; (2) the depth of nested control ﬂow
instructions (conditional branches and loops); (3) the total
number of if-statements; (4) the number of if-statements de-
pendent on the value of the input (as an integer); (5) the
total number of loops; (6) the number of loops depending
on the length of the input (in bytes); and (7) the number of
loops depending on the value of the input (as an integer).
For the experiments presented in this subsection we used
KLEE to generate test suites that cover all the code in each
program. We have used a machine with an Ubuntu 14.04
64-bit operating system with 16GB of physical memory and
an Intel Core i7-3520M CPU with 4 logical cores each having
a frequency of 2.90GHz.
Experiment 1: We ran KLEE on every original program
10 times and we analyzed the average values across these 10
runs. In this and all the of following experiments (including
those with angr from § 3.3) the coeﬃcient of variation cv
(i.e. standard deviation divided by the mean) of the symbolic
execution time of the same program did not exceed 40% for
any program. Moreover, cv was less than 25% for over 90%
of the symbolically executed programs. In other words the
execution times for the same program can be considered
roughly constant.
Table 1 shows execution time of KLEE for obtaining 100%
code coverage on the original (unobfuscated) programs w.r.t.
the previous 7 code characteristics. It is important to note
that the high standard deviation w.r.t. the mean, is com-
puted over all programs from the dataset and denotes the
heterogeneity of the dataset, which is crucial in order to have
some degree of generality for our ﬁndings. The top-left sub-
table in Table 1 indicates that the time needed for symbolic
execution increases with the size of the symbolic input. The
following sub-tables indicate that programs containing only
if statements were faster to symbolically execute than pro-
grams which contain loops. Moreover, nesting if-statements
inside loops and nested loops lead to higher symbolic ex-
ecution times. Finally, making the branch condition of if-
statements or loops dependent on the value of the input also
increases symbolic execution time.
Experiment 2: We obfuscated each of the 48 programs
Figure 1:
Impact of obfuscation on the KLEE symbolic execution for programs in 1st dataset. X-axis
labels to the left of the vertical bar are Tigress transformations; those to the right are Obfuscator LLVM
transformations. Right Y-axis is linear and applies only to “% Time waiting for solver” (solid line).
using the following 30 diﬀerent conﬁgurations of Tigress:
3. BogusControlFlow (BCF): similar to the AddOpaque
1. EncodeLiterals (EncL): replaces constant strings and
integers by code which dynamically generates these
constants during execution.
2. EncodeArithmetic (EncA): replaces arithmetic expres-
sions with more complex equivalent expressions.
3. Flatten (Flat): transforms the control-ﬂow of a func-
tion into a ﬂat-hierarchy of basic blocks that all have
the same predecessor and successor basic blocks.
4. Virtualize (Virt): transforms a function into an inter-
preter for a random language L, translates the func-
tion’s code into L and saves it as bytecode.
5-8. AddOpaque (AddO): inserts opaque predicates i.e. bran-
ch conditions that are either always true or always false
at runtime, but whose value is diﬃcult to analyze stat-
ically. UpdateOpaque (UpdO): assigns new values to
the variables used in opaque predicates, at runtime.
We used 4 and 16 AddO, with and without UpdO.
9-28. Ordered combinations of every possible couple of the
previous transformations, except for combinations with:
AddO4, AddO4-UpdO and AddO16-UpdO.
29-30. Flatten and Virtualize were each applied 2 times con-
secutively on the same program.
Note that the only Tigress options used were those indi-
cating the transformation type and the number of opaque
predicates. For all other Tigress options we used the default
values in order to limit the number of obfuscated programs
that we then used as inputs to symbolic execution engines.
Also some options of Tigress introduce goto instructions and
in-line assembly instructions not supported by KLEE.
Each of the 48 programs were also obfuscated using the
following 9 diﬀerent conﬁgurations of Obfuscator LLVM:
1. InstructionSubstitution (ISub): replaces arithmetic and
boolean expressions with a sequence of expressions which
evaluate to the same result. This transformation is
similar to the EncodeLiterals transformation of Tigress.
2. ControlFlowFlattening (CFF): similar to the Flatten
transformation of Tigress.
transformation of Tigress.
4-9. Ordered combinations of every possible couple of the
previous transformations.
All of the obfuscated programs corresponding to the ﬁrst
dataset were executed using KLEE. We recorded the SMT
queries corresponding to every path using the -write-smt2s
option. The value of the command line option -sym-arg in-
dicates the length of the symbolic input argument passed
to the program, this was changed accordingly for programs
with input arguments having 1 byte and 16 bytes. We exe-
cuted KLEE on every obfuscated program 10 times and we
analyzed the average values across the 10 executions.
We computed the slowdown of symbolic execution of an
obfuscated program w.r.t. its unobfuscated counterpart by:
dividing the time needed for KLEE to analyze the obfus-
cated program by the time needed to analyze the corre-
sponding original program. Figure 1 presents the average
slowdown (using circles) in ascending order from left to right
w.r.t. each employed transformations (X-axis) for the pro-
grams obfuscated using Tigress (left of vertical bar in Fig-
ure 1) and Obfuscator LLVM (right of vertical bar in Fig-
ure 1). Figure 1 also shows: the average increase in program
size (plus signs), the percentage of time KLEE spent waiting
for the SMT solver to answer all queries (solid line, only line
that uses linear Y-axis on right of Figure 1), the average in-
crease in total queries issued to the SMT solver (dashed line)
and the average query size measured as number of nodes in
the abstract syntax tree of an SMT query (dotted line). We
make the following observations from Figure 1.
Observation 1: The EncL and AddO transformations of
Tigress (even when employed together or in conjunction with
UpdO), have a small impact on the slowdown of symbolic
execution compared to the other obfuscation transforma-
tions. The reason for this small slowdown is the fact that
the additional control-ﬂow instructions introduced by these
transformations are not input dependent and they can easily
be solved by the SMT solver. This observation also applies
to the corresponding transformations of Obfuscator LLVM,
i.e. ISub, respectively BCF.
Observation 2: EncL in conjunction with any of the 3
transformations: EncA, Flat and Virt, does not increase the
slowdown more than simply employing those transforma-
15105010050010005000OrigEncLAddO4−UpdOAddO4EncL−AddO16AddO16−UpdOAddO16AddO16−EncLFlat−AddO16Virt−EncLVirtEncL−VirtEncA−EncLEncAEncL−EncAVirt−AddO16EncA−AddO16AddO16−VirtFlat−VirtVirt−EncAFlat−EncLEncL−FlatFlatFlat x2Flat−EncAEncA−VirtVirt−FlatAddO16−FlatEncA−FlatAddO16−EncAVirt x2ISubBCF−ISubBCFISub−BCFISub−CFFCFF−ISubCFFCFF−BCFBCF−CFF0255075100125150Mean program size increase (factor)Mean KLEE slowdown (factor)% Time waiting for solverMean number of added queries (factor)Mean query size increase (factor)tions alone. The reason is that EncL only splits constant
literals (e.g. from print statements) into a sequence of in-
structions, which are concretely executed by KLEE. This
observation also applies to the corresponding transforma-
tions of Obfuscator LLVM, i.e. combining ISub with CFF
does not increase the slowdown more than CFF alone.
Observation 3: Resilience increases when applying Virt
and Flat after any other transformation. The reason for
this is that both of these 2 transformations construct an
interpreter-like structure whose complexity is proportional
to the size of the given source code. The other 3 transforma-
tions of Tigress tend to add more code to the input program,
hence applying them before Virt and Flat results in larger
interpreter-like structures. This observation also applies to
the CFF transformation in Obfuscator LLVM. Moreover, ap-