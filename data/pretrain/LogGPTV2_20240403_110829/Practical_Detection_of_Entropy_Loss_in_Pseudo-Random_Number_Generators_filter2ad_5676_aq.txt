### 3. Repeat Step 2 for \( S_u \) Instead of \( S_r \)

By hypothesis, \( H_{\infty}(S_{39}^u) = 1024 \). After this process, by hypothesis, \( H_{\infty}(S_{39}) = 6144 \) is maximal.

### 4. Process for G

For the generator \( G \), let \( S_t \) denote the successive states of the internal state. We implemented the following process, starting from a compromised internal state \( S_0 \) of size 489 bits (or 579, 705 bits), and using successive inputs \( I_t \) of the same size:

1. **Refresh \( S_0 \) with \( I_0, \ldots, I_7 \):**
   \[
   S_i = S_{i-1} \cdot X + I_{i-1}
   \]
   After this process, by Theorem 10, \( H_{\infty}(S_8) = 489 \) (or 579, 705 bits) is maximal.

### CPU Cycles for Accumulation

The number of CPU cycles required to perform these processes on LINUX and \( G \) (with an internal state size of 705 bits) are presented in Figure 4.10. We first implemented 100 complete accumulation processes for both LINUX and \( G \), and compared each accumulation one by one. As shown in the left part of Figure 4.10, a complete accumulation in the internal state of \( G \) requires, on average, half the CPU cycles compared to a complete accumulation in the internal state of LINUX. 

Next, we analyzed one accumulation in detail for both LINUX and \( G \). As shown in the right part of Figure 4.10, a complete accumulation in the internal state of LINUX requires more CPU cycles due to the transfers between the input pool and the two output pools in steps 2 and 3. It also shows that the refresh function of \( G \) is similar to the mixing function \( M \) of LINUX.

### 4.6.2 Benchmarks on the Generation Process

We conducted further benchmarks on the generation process. We simulated the generation of 2048-bit keys \( K \) for both LINUX and \( G \).

- **For \( G \):** 16 calls to `next` are necessary, as each call outputs 128 bits.
- **For LINUX:** Each call to `next` outputs 80 bits, so 12 calls are necessary, followed by transferring 1024 bits from the input pool to the output pool, and then 12 more calls to `next`.

### Key Generation Process for LINUX

Starting from an internal state \( (S_0^r, S_0^i, S_0^u) \), where at least 1024 bits of entropy are accumulated in the output pool \( S_0^r \) and 4096 bits of entropy are accumulated in the input pool \( S_0^i \):

1. **Set \( R_0 = F \circ H \circ M(S_0^r, S_0^u) \)**
2. **Repeat step 1. 12 times and set \( K_0 = [R_0 || \ldots || R_{12}]_{1024} \)**
3. **Transfer 1024 bits from \( S_0^r \) to \( S_0^i \).** This transfer is done in blocks of 80 bits, requiring 13 transfers. Each transfer involves:
   - Generating intermediate data \( T_0 \) from \( S_0^i \) using \( T_0 = M(S_1^r, H(S_1^i)) \)
   - Updating \( S_1^i = F \circ H \circ M(S_0^i, H(S_0^r)) \)
   - Mixing \( S_0^r \) with \( T_0 \) to get \( S_1^r = M(S_0^r, H(S_0^r)) \)
   - By hypothesis, \( H_{\infty}(S_{13}^i) = 1024 \)
4. **Set \( R_{13} = F \circ H \circ M(S_{13}^r, H(S_{13}^r)) \)**
5. **Repeat step 1. 12 times and set \( K_1 = [R_{13} || \ldots || R_{25}]_{1024} \)**
6. **Set \( K = [K_0 || K_1] \)**

After this process, \( H_{\infty}(K) = 2048 \).

### Key Generation Process for G

Using the Practical Efficiency Optimization presented in Section 4.3, starting from an internal state \( S_0 \) of size 489 bits (or 579, 705 bits), where at least \( \gamma^* = 449 \) (or 529, 641 bits) of entropy are accumulated:

1. **Set \( U = [S_0 \cdot X_0]_{128} \) and \( (S_1, R_0) = (AES_U(0), \ldots, AES_U(4)) \) (or \( AES_U(5), AES_U(6) \)) and set the Boolean flag `last = true`.**
2. **Set \( (U, R) = (AES_U(0), AES_U(1)) \) and \( [S_1]_{128} = U \).**
3. **Repeat step 2. 14 times.**

After this process, \( H_{\infty}(K) = 2048 \).

### CPU Cycles for Key Generation

The number of CPU cycles required to perform these processes on LINUX and \( G \) (with an internal state size of 705 bits) are presented in Figure 4.11. We first implemented the generation of 100 2048-bit keys and compared each generation one by one. As shown in the left part of Figure 4.11, 2048-bit key generation with \( G \) requires, on average, ten times fewer CPU cycles than with LINUX. 

As shown in the right part of Figure 4.11, a 2048-bit key generation needs more CPU cycles for LINUX.

---

### Chapter 5: Robustness Against Memory Attacks

#### 5.1 Model Description

In this chapter, we provide a syntactic formalization for the security of pseudo-random number generators with input against memory attacks. All statements are part of [CR14]. We use Definition 27 for pseudo-random number generators with input throughout this chapter.

We propose a modification of the robustness security model from Chapter 4 to identify the specific parts of the internal state \( S \) that an adversary needs to compromise to attack the generator. To capture this idea, we consider the internal state as a concatenation of several binary strings (referred to as its decomposition). We model the adversarial capability of an adversary \( A \) with two new functions, `M-get` and `M-set`, which allow \( A \) to set or get a part of the internal state defined by a mask \( M \). We assume that the adversary \( A \) knows the decomposition of \( S \) and can choose \( M \) adaptively.

The only differences between our security game and the original game ROB are that we replace the procedures `get-state` and `set-state` with new procedures `M-get-state` and `M-set-state`, allowing the adversary to get/set a part of the internal state identified by the mask.

#### Security Game Procedures

- **Initialize:**
  \[
  \text{seed} \leftarrow \text{setup}; \quad \sigma \leftarrow 0; \quad S \leftarrow n; \quad c \leftarrow n; \quad \text{corrupt} \leftarrow \text{true}; \quad b \leftarrow \{0, 1\}
  \]
  Output: seed

- **Finalize:**
  \[
  \text{IF } b = b^* \text{ RETURN } 1 \quad \text{ELSE RETURN } 0
  \]

- **D-refresh:**
  \[
  (\sigma, I, \gamma, z) \leftarrow D(\sigma); \quad S \leftarrow \text{refresh}(S, I)
  \]
  \[
  \text{IF } c < \gamma^* \quad c \leftarrow \min(c + \gamma, n)
  \]
  Output: \((\gamma, z)\)

- **M-set-state:**
  \[
  S \leftarrow \text{M-set}(S, M, J); \quad c \leftarrow \max(0, c - \lambda)
  \]
  \[
  \text{IF } c < \gamma^*, \quad c \leftarrow 0
  \]

- **M-get-state:**
  \[
  c \leftarrow \max(0, c - \lambda)
  \]
  \[
  \text{IF } c < \gamma^*, \quad \text{OUTPUT M-get}(S, J); \quad c \leftarrow 0
  \]

- **Next-ror:**
  \[
  (S, R_0) \leftarrow \text{next}(S)
  \]
  \[
  \text{IF } c < \gamma^*, \quad c \leftarrow 0
  \]
  Output: \( R_b \)

#### Definitions

- **Decomposition:**
  A decomposition of a binary string \( S \in \{0, 1\}^n \) is a sequence of disjoint binary strings \((S_1, \ldots, S_k)\) such that \( S = [S_1 || \ldots || S_k] \). Two binary strings \( S \) and \( M \) have the same decomposition if \( M = [M_1 || \ldots || M_k] \) and \( |S_i| = |M_i| \) for \( i \in \{1, \ldots, k\} \).

- **M-get / M-set:**
  - Function `M-get` takes as input a couple \((S, J)\), where \( S = [S_1 || \ldots || S_k] \) and \( J \subset \{1, \ldots, k\} \), then \(\text{M-get}(S, J) = (S_j)_{j \in J}\).
  - Function `M-set` takes as input a triple \((S, M, J)\), where \( S, M \in \{0, 1\}^n \) have the same decomposition \( S = [S_1 || \ldots || S_k] \), \( M = [M_1 || \ldots || M_k] \), and \( J \subset \{1, \ldots, k\} \), then \(\text{M-set}(S, M, J) = S\), where \( S_j = M_j \) for \( j \in J \).

These functions are adversarially provided, and their goal is to let \( A \) choose the mask \( M \) over the internal state. If the mask is too large (making \( G \) insecure), the security game will require new input to be collected. These procedures model memory attacks against the generator.

#### Security Model

We now describe our security model, adapted from the security game ROB(\(\gamma^*\)) that defines the robustness of a pseudo-random number generator with input. The parameters of the security game are:

- **Integer \(\gamma^*\):** Defines the minimum entropy required in \( S \) for the generator to be secure.
- **Integer \( c \):** Defines the estimate of the amount of collected entropy.
- **Integer \(\lambda \leq n\):** Defines the size of the mask \( M \).
- **Boolean flag `corrupt`:** Set to true if \( c < \gamma^* \) and false otherwise.
- **Boolean \( b \):** Used to challenge the adversary \( A \).

Our security game uses the procedures described in Figure 5.1. The procedure `initialize` sets the parameter `seed` with a call to the algorithm `setup`, the internal state \( S \) of the generator, and parameters \( c \) and \( b \). We initially set \( c \) to \( n \) and \( S \) to a random value to avoid giving any knowledge of \( S \) to the adversary \( A \). After all oracle queries, \( A \) outputs a bit \( b^* \), given as input to the procedure `finalize`, which compares the response of \( A \) to the challenge bit \( b \).

- **Procedure `D-refresh`:** \( A \) calls the distribution sampler \( D \) for a new input and uses this input to refresh \( G \). The estimated entropy given by \( D \) is used by the procedure to update the counter \( c \) (i.e., \( c \leftarrow c + \gamma \)), and if \( c \geq \gamma^* \), the flag `corrupt` is set to false.
- **Procedure `M-set-state`:** Used by \( A \) to set a part of \( S \). First, \( A \) calls the function `M-set` to update a part of the internal state. Then, the counter value \( c \) is decreased by \(\lambda\), the size of the mask \( M \) (i.e., \( c \leftarrow c - \lambda \)), and if \( c < \gamma^* \), \( c \) is reset to 0.
- **Procedure `M-get-state`:** Used by \( A \) to get a part of \( S \). First, \( A \) calls the function `M-get`. Then, the counter value \( c \) is decreased by \(\lambda\), the size of the mask \( M \) (i.e., \( c \leftarrow c - \lambda \)), and if \( c < \gamma^* \), \( c \) is reset to 0.
- **Procedure `next-ror`:** Challenges \( A \) on its capability to distinguish the output of \( G \) from random, where the real output \( R_0 \) of \( G \) is obtained with a call to the algorithm `next` and the random string \( R_1 \) is sampled uniformly at random by the challenger. Attacker \( A \) responds to the challenge with a bit \( b^* \).

The security definitions of a pseudo-random number generator with input against memory attacks are given in Definition 34.

- **Definition 34 (Security of a Pseudo-Random Number Generator with Input against Memory Attacks [CR14]):** A pseudo-random number generator with input \( G = (setup, refresh, next) \) is called \((T = (t, q_r, q_n, q_s), \gamma^*, \epsilon)\)-robust (resp. resilient, forward-secure, backward-secure) against memory attacks, if for any adversary \( A \) running in time at most \( t \), making at most \( q_r \) calls to `D-refresh`, \( q_n \) calls to `next-ror`, and \( q_s \) calls to `M-get-state` or `M-set-state`, and any legitimate distribution sampler \( D \) inside the `D-refresh` procedure, the advantage of \( A \) in game MROB(\(\gamma^*, \lambda\)) (resp. MRES(\(\gamma^*\)), MFWD(\(\gamma^*, \lambda\)), MBWD(\(\gamma^*, \lambda\))) is at most \(\epsilon\), where:
  - **MROB(\(\gamma^*, \lambda\)):** The unrestricted game where \( A \) is allowed to make the above calls and corrupt at most \(\lambda\) bits of \( S \).
  - **MRES(\(\gamma^*\)):** The restricted game where \( A \) makes no calls to `M-get-state`/`M-set-state` (i.e., \( q_s = 0 \) and \(\lambda = 0\)).
  - **MFWD(\(\gamma^*, \lambda\)):** The restricted game where \( A \) makes no calls to `M-set-state` and a single call to `M-get-state` (i.e., \( q_s = 1 \)), which is the very last oracle call \( A \) is allowed to make to corrupt \(\lambda\) bits of \( S \).
  - **MBWD(\(\gamma^*, \lambda\)):** The restricted game where \( A \) makes no calls to `M-get-state` and a single call to `M-set-state` (i.e., \( q_s = 1 \)), which is the very first oracle call \( A \) is allowed to make to corrupt \(\lambda\) bits of \( S \).

Hence, resilience protects the security of the generator when it is not corrupted against arbitrary distribution samplers \( D \); forward security protects past generator outputs in case of a memory attack; backward security ensures that the generator can successfully recover from a memory attack, provided enough fresh entropy is injected into the system; robustness ensures security against arbitrary combinations of the above.

Examples of the entropy traces for the procedures defined in our new model are provided in Figure 5.2, which should be compared with the traces presented in Figure 4.3. Here, calls to `M-set-state` and `M-get-state` only decrease the counter by \(\lambda\), unless \( c < \gamma^* \) (in which case \( c \) is reset to 0). Also note that, as in Figure 4.3, we illustrated two `next-ror` calls: the first one where \( c \geq \gamma^* \) and the second one where \( c < \gamma^* \).