3. Repeat step 2. for Su instead of Sr. By hypothesis, H∞(S39
u ) = 1024.
After this process, by hypothesis, H∞(S39) = 6144 is maximal.
For G, denoting St the successive states of the internal state, we implemented the following
process, starting from a compromised internal state S0, of size 489 bits (resp.
579, 705 bits),
and using successive inputs I t, of size 489 bits (resp. 579, 705 bits): Refresh S0 with I0,··· , I7:
Si = Si−1 · X + I i−1. After this process, by Theorem 10, H∞(S8) = 489 (resp. 579, 705 bits)
is maximal.
The number of CPU cycles to perform these processes on LINUX and G (with internal state
size 705 bits) are presented in Figure 4.10. We ﬁrst implemented 100 complete accumulations
processes for LINUX and G and we compared one by one each accumulation. As shown on the
left part of Figure 4.10, a complete accumulation in the internal state of G needs on average
two times less CPU cycles than a complete accumulation the internal state of LINUX. Then
we analyze one accumulation in detail or LINUX and G. As shown on the right part of Figure
4.10, a complete accumulation in the internal state of LINUX needs more CPU because of the
transfers between the input pool and the two output pools done in steps 2. and 3, it also shows
that the refresh function of G is similar as the Mixing function M of LINUX.
4.6.2 Benchmarks on the Generation Process
Second benchmarks are done on the generation process. We simulated the generation of 2048-
bits keys K for LINUX and G. For G, 16 calls to next are necessary, as each call outputs 128 bits.
For LINUX, each call to next outputs 80 bits, therefore 12 calls are ﬁrst necessary, then 1024
bits need to be transfered from the input pool to the output pool, then 12 new calls to next are
— 74 —
4.6. Benchmarks
LINUX
CPU Cycles
8 ×106
6 ×106
4 ×106
2 ×106
LINUX
CPU Cycles
8 ×106
6 ×106
4 ×106
2 ×106
0
0
25
50
75
100
100 key generations for LINUX and G
G(705)
# of gen.
0
0% 25% 50% 75% 100%
One key generation for LINUX and G
G(705)
% of gen.
Figure 4.11 – Benchmarks on the Generation Process
necessary.
For LINUX, denoting Rt the successive ouputs, we implemented the following process, starting
r , S0
from an internal state (S0
i , S0
u), where we suppose at least 1024 bits of entropy are accu-
mulated in the output pool S0
r and 4096 bits of entropy are accumulated in the input pool
S0
i :
1. Set R0 = F ◦ H ◦ M(S0
2. Repeat step 1. 12 times and set K0 = [R0|| . . .||R12]1024
3. Transfer 1024 bits from S0
r. The transfer is made by blocks of 80 bits, therefore, 13
transfers are necessary. Each transfer is done in two steps: ﬁrst LINUX generates from S0
an intermediate data T 0
r, giving the
i = M(S1
new states S1
r) = 80.
After repeating these steps 12 times, by hypothesis, H∞(S13
i = F ◦ H ◦ M(S0
i , H(S1
i )) and S1
i )) and then it mixes it with S0
r , T 0
i ). Then by hypothesis, H∞(S1
i , H(S0
r = M(S0
r , H(S0
r))
i to S0
r ) = 1024.
i
.
1
4. Set R13 = F ◦ H ◦ M(S13
5. Repeat step 1. 12 times and set K1 = [R13|| . . .||R25]1024
6. Set K = [K0||K1]
r , H(S13
r ))
1
.
After this process, H∞(K) = 2048.
For G, we implemented the following process (using the Practical Eﬃciency Optimization pre-
sented in Section 4.3, starting from an internal state S0, of size 489 bits (resp. 579, 705 bits),
where we suppose at least γ∗ = 449 (resp. 529, 641 bits) bits of entropy are accumulated:
1. Set U = [S · X0]128
1
and (S1, R0) = (AESU(0), . . . , AESU(4)) (resp. AESU(5)), AESU(6))
and set the Boolean ﬂag last = true.
2. Set (U, R) = (AESU(0), AESU(1)) and set [S]128
3. Repeat step 2. 14 times.
1 = U.
After this process, H∞(K) = 2048.
The number of cycles to perform these processes on LINUX and G (with internal state size 705
bits) are presented in Figure 4.11. We ﬁrst implemented the generation of 100 2048-bits keys
— 75 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
and we compared one by one each generation. As shown on the left part of Figure 4.11, 2048-bits
key generation with G needs on average ten times less CPU cycles than with LINUX. Then we
analyze one accumulation in detail or LINUX and G. As shown on the right part of Figure 4.11,
a 2048-bits key generation needs more CPU for LINUX.
— 76 —
Chapter 5
Robustness Against Memory Attacks
5.1 Model Description
In this chapter we give a syntactic formalization for security of pseudo-random number genera-
tors with input against memory attacks. All statements are part of [CR14]. We use Deﬁnition
27 for pseudo-random number generator with input in all this chapter.
We propose a modiﬁcation of the robustness security model of Chapter 4 to identify exactly the
part of S that an adversary needs to compromise to attack a pseudo-random number generator
with input. To capture this idea, we consider the internal state as a concatenation of several
binary strings (named hereafter its decomposition). We model the adversarial capability of an
adversary A with two new functions named M-get and M-set that allow A to set or get a part
of the internal state of the pseudo-random generator with input deﬁned with a mask M. We
assume that the adversary A knows the decomposition of S and is able to choose M adaptively.
The only diﬀerences between our security game and the original game ROB is that we replace the
procedures get-state and set-state, with new procedures M-get-state and M-set-state, allowing
the adversary to get/set a part the internal state identiﬁed by the mask.
$← {0, 1}n;
proc. initialize(D)
seed $← setup;
σ ← 0;
S
c ← n;
corrupt ← true;
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. D-refresh
(σ, I, γ, z) $← D(σ)
S ← refresh(S, I)
IF c < γ∗
c ← min(c + γ, n)
OUTPUT (γ, z)
proc. M-set-state(S, M, J)
S ← M-set(S, M, J)
c ← max(0, c − λ)
IF c < γ∗,
c ← 0
proc. M-get-state(S, J)
c ← max(0, c − λ)
IF c < γ∗,
OUTPUT M-get(S, J)
c ← 0
proc. next-ror
(S, R0) ← next(S)
IF c < γ∗,
c ← 0
OUTPUT R0
ELSE
$← {0, 1}‘
R1
OUTPUT Rb
Figure 5.1 – Procedures in Security Game MROB(γ∗, λ)
Deﬁnition 32 (Decomposition). A decomposition of a binary string S ∈ {0, 1}n is a sequence
of disjoint binary strings (S1,··· , Sk), such that S = [S1||···||Sk]. Two binary strings S and
M have the same decomposition if M = [M1||···||Mk] and |Si| = |Mi| for i ∈ {1,··· , k}.
Deﬁnition 33 (M-get / M-set). Function M-get takes as input a couple (S, J), where S =
[S1||···||Sk] and J ⊂ {1,··· , k}, then M-get(S, J) = (Sj)j∈J. Function M-set takes as input
a triple (S, M, J), where S, M ∈ {0, 1}n have the same decomposition S = [S1||···||Sk], M =
[M1||···||Mk] and J ⊂ {1,··· , k}, then M-set(S, M, J) = S, where Sj = Mj, for j ∈ J.
— 77 —
Chapter 5. Robustness Against Memory Attacks
These functions are adversarially provided, and their goal is to let A choose the mask M over
the internal state. Note that if the mask is too large (so that G becomes insecure), the security
game will require that new input is collected. These procedures model the memory attacks
against the generator.
Security Model. We now describe our security model. It is adapted from the security game
ROB(γ∗) that deﬁnes the robustness of a pseudo-random number generator with input. We
describe brieﬂy the parameters of the security game:
• Integer γ∗: Deﬁnes the minimum entropy that is required in S for the generator to be
secure.
• Integer c: Deﬁnes the estimate of the amount of collected entropy.
• Integer λ ≤ n: Deﬁnes the size of the mask M.
• Boolean ﬂag corrupt: Is et to true if c < γ∗ and false otherwise.
• Boolean b: Is used to challenge the adversary A.
Our security game uses procedures described in Figure 5.1. The procedure initialize sets the
parameter seed with a call to algorithm setup, the internal state S of the generator, as well as
parameters c and b. Note that we initially set c to n and S to a random value, to avoid give any
knowledge of S to the adversary A. After all oracle queries, A outputs a bit b∗, given as input
to the procedure ﬁnalize, which compares the response of A to the challenge bit b. The other
procedures are deﬁned below:
• Procedure D-refresh: A calls the distribution sampler D for a new input and uses this
input to refresh G. The estimated entropy given by D is used by the procedure to update
the counter c (c ← c + γ) and if c ≥ γ∗, then the ﬂag corrupt is set to false.
• Procedure M-set-state: Is used by A to set a part of S. First A calls function M-set to
update a part of the internal state. Then the counter value c is decreased by λ, the size of
the mask M (c ← c − λ) and as in the initial set-state procedure, if c < γ∗, c is reset to 0.
• Procedure M-get-state: Is used by A to get a part of S. First A calls the function M-get.
Then the counter value c is decreased by λ, the size of the mask M (c ← c − λ) and as in
the initial get-state procedure, if c < γ∗, c is reset to 0.
• Procedure next-ror: Challenges A on its capability to distinguish the output of G from
random, where the real output (R0) of G is obtained with a call to algorithm next and
the random string (R1) is ampled uniformly at random by the challenger. Attacker A
responds to the challenge with a bit b∗
The security deﬁnitions of a pseudo-random number generator with input against memory at-
tacks is given in Deﬁnition 34.
Deﬁnition 34 (Security of a Pseudo-Random Number Generator with Input against Memory
Attacks [CR14]). A pseudo-random number generator with input G = (setup, refresh, next) is
called (T = (t, qr, qn, qs), γ∗, ε)-robust (resp. resilient, forward-secure, backward-secure), against
memory attacks, if for any adversary A running in time at most t, making at most qr calls to
D-refresh, qn calls to next-ror and qs calls to M-get-state or M-set-state, and any legitimate
distribution sampler D inside the D-refresh procedure, the advantage of A in game MROB(γ∗, λ)
(resp, MRES(γ∗), MFWD(γ∗, λ), MBWD(γ∗, λ)) is at most ε, where:
— 78 —
5.2. Limitation of the Initial Security Property
• MROB(γ∗, λ) is the unrestricted game where A is allowed to make the above calls and
corrupt at most λ bits of S.
• MRES(γ∗) is the restricted game where A makes no calls to M-get-state/M-set-state (i.e.,
qs = 0 and λ = 0).
• MFWD(γ∗, λ) is the restricted game where A makes no calls to M-set-state and a single
call to M-get-state (i.e., qs = 1) which is the very last oracle call A is allowed to make to
corrupt λ bits of S.
• MBWD(γ∗, λ) is the restricted game where A makes no calls to M-get-state and a single
call to M-set-state (i.e., qs = 1) which is the very ﬁrst oracle call A is allowed to make to
corrupt λ bits of S.
Hence, resilience protects the security of the generator when it is not corrupted against arbitrary
distribution samplers D; forward security protects past generator outputs in case of a memory
attack; backward security security ensures that the generator can successfully recover from a
memory attack, provided enough fresh entropy is injected into the system; robustness ensures
security against arbitrary combinations of the above.
Examples of the entropy traces for the procedures deﬁned in our new model are provided in
Figure 5.2 (which shall be compared with the traces presented in Figure 4.3). Here, calls to
M-set-state and M-get-state only decrease the counter to λ, unless c < γ∗ (in this case c is reset
to 0). Also note that as in Figure 4.3, we illustrated two next-ror calls, the ﬁrst one where c ≥ γ∗
and the second one where c < γ∗.
entropy estimate c
threshold γ∗
state length n
y
p
o
r
t
n
e
d
e
t
a
m
i
t
s