One of the more esoteric aspects of COM is the naming and
usage of the different threading models. The naming alone is
designed to bewilder: a COM object can be “single threaded”,
“apartment threaded”, “free threaded”, and “both.” Each of these
models deals with a different set of synchronization and thread-
ing issues. 
The default "apartment" threading model works quite well
for almost all applications.  Apartment threading allows COM
programmers to effectively ignore threading issues in most cases.
There are however, some cases where design and performance
problems conspire to require a more precise level of control. In
this chapter we will explore the different options so that you can
make intelligent threading decisions. 
Synchronization and Marshaling
If you've worked with multi-threaded applications before, then
you're well aware of the complexities involved. The difficulty is
synchronization - ensuring that things happen in the correct
order. When COM objects communicate with clients and each
other, they face a variety of synchronization issues. COM objects
152    Chapter 10 •
COM Threading Models 
can run in in-process, out-of-process, and remote servers - each
of these has its own unique set of constraints.
COM defines a set of “models” for dealing with threading
issues. By following these models, we can ensure synchronized
communication. By the use of the word “model”, we can assume
that things aren't going to be completely automatic. The proper
implementation of threading, especially free threading, is going
to take some knowledge on the part of the developer.
Marshaling is the process of packaging data and sending it
from one place to another. COM handles all data transfer
through method calls. COM marshaling involves the packaging
of data in parameter lists. Marshaling can take place at many lev-
els. At its simplest level, it can mean the transfer of data between
individual threads. More complex marshaling may involve send-
ing data between different processes, or even across a network.
Marshaling is one of the important factors in synchronization.
Process • An application or program running on the system. A process has its own separate address
space, program code, and (heap) allocated data. A process can contain one or more threads of execution.
Thread • A piece of code that can be run by a single CPU. Each thread has its own stack and program
registers and is managed by the operating system. All threads in an application share the same address
space and global data, as well as other resources. Multiple threads can be run independently of each
other and the operating system schedules their execution. On multi-CPU computers, more than one thread
may be running simultaneously.
Fibers • A type of 'lightweight' thread. Similar to threads except that they have to be manually sched-
uled for execution. Not commonly used. Currently there is no COM analog to fibers.
Thread local storage • In general, threads share memory with the rest of their process. There is a spe-
cial  type of memory called thread local storage (TLS), that is only available to the thread that creates it.
TLS is accessed through the TLS API, which includes the functions TlsAlloc, TlsGetValue, TlsSetValue, and
TlsFree
SOME QUICK DEFINITIONS................
Threading Models
153
Additonal Information and Updates: http://www.iftech.com/dcom
Threading Models
COM servers have two general threading models. This includes
Apartment Threaded and Free Threaded objects. To understand
what these threading models mean, let's first look at the way
Windows handles threads.
In the world of Windows programming, we customarily deal
with two types of threads - user interface threads and worker
threads. The distinction between the two deals primarily with
the existence of a message loop. 
Worker threads are the simplest type of thread. A worker
thread does not have to handle user input. It starts at the begin-
ning and continues until it's finished processing. A typical
worker thread would be used to compute a value, or to perform
database access, or to do anything that takes a substantial
amount of time to complete. 
If worker threads do communicate with other threads, it is
through mutexes, events, semaphores, and other synchronization
or IPC methods. Worker threads are very useful for long compu-
tational tasks which don't need any user interaction. A typical
program would create a worker thread by calling CreateThread.
The worker thread has a main function, called a THREADPROC,
and can have subsidiary functions as well called by the
THREADPROC. The THREADPROC executes as if it were an
independent program. The thread is given a block of data to
work on, and it churns until it's done. When the worker thread is
complete, it usually signals its caller and exits. 
By contrast, all interactive Windows programs run as 'user
interface threads'. A user interface thread has the special con-
straint that it must always be responsive to user input. Whenever
the user resizes a window, or clicks the minimize button, the
program must respond.  Regardless of what it's doing, it must be
able to redraw itself when it's window is uncovered or moved.
This means that the program must break it's processing up into
small manageable chunks which complete quickly and allow the
program to respond.
User Interface threads have a message loop to process user
and system events. All windows programs are based on the con-
154    Chapter 10 •
COM Threading Models 
cept of the message loop. Each window has a user interface
thread that monitors the message queue and processes the mes-
sages it receives. A typical message loop looks like this:
MSG msg;
while(GetMessage(&msg,NULL,0,0))
{
    TranslateMessage( &msg );
    DispatchMessage( &msg );
}
Windows uses this method to ensure that a program pro-
cesses its input in a sequential manner. Messages are always pro-
cessed in the order they are received. Each window has only a
single thread, and this thread must handle all user-input events.
When the program receives a message, such as a "Close Win-
dow" (WM_CLOSE) message, it dispatches the message to a spe-
cific function.
The message loop continues until it receives a WM_QUIT
message. Notice that the 'while' statement in the message loop
tests the return value of GetMessage. The WM_QUIT message
causes GetMessage to return FALSE, which exits the loop. After
the message loop is finished, the thread typically shuts itself
down and closes all its windows.
The Windows operating system handles the overall routing
of messages. It handles the hardware generation of events such
as mouse moves, and ensures that each window receives the
appropriate messages.
The big advantage of a User Interface thread is that it breaks
up its processing into a series of compact functions, each of
which handles a specific message. For example, the message
might be WM_CLOSE, and it would be sent to the function called
OnClose(). When the application is finished processing a mes-
sage, it returns to the message loop and responds to the next
message. Because messages are queued up as they arrive, the UI
thread is never processing more than one message at a time.
This is a very safe, but somewhat inefficient, method of process-
ing requests while still remaining responsive to input.
Apartment, Free, and Single Threads
155
Additonal Information and Updates: http://www.iftech.com/dcom
Apartment, Free, and Single Threads 
In the COM world we use a different terminology to describe
threads: User Interface threads are called "Apartment" threads.
Worker threads are called "Free" threads. Although not identical
to their Win32 counterparts, there are quite a few similarities.
The third type of thread is a 'single' thread. Single threads are
really just a special type of apartment threads.
Actually, the terminology is somewhat more confusing.
You'll often see apartment threads called 'single threaded apart-
ments', or STAs. The 'free' threaded counterpart is commonly
called a 'multi-threaded apartment', or MTA. While this it may be
Figure 10–1
User Interface thread model
Message Handlers
OnClose()
etc.
GetMessage()
PutMessage()
User Interface (UI) Thread
156    Chapter 10 •
COM Threading Models 
technically accurate, I avoid the STA and MTA nomenclature
because it is more confusing. I'll use Apartment, single, and free
threading in my examples. 
The term "apartment" is purely conceptual. The apartment is
the environment that the thread "lives in" - it separates the thread
from the rest of a process. In many ways, the threading model is
really a set of rules describing how the thread will behave.
The ATL Wizard and Threading Models
The ATL object wizard makes it extremely easy to define an
object’s threading model. In a Win32 environment, the two
options Single and Apartment behave similarly. Although each
of these options represents real concepts, they don't generate
different code under ATL. The designation is really just a flag for
the COM subsystem. The COM subsystem will use these values
to determine how to marshal calls between threads. This behav-
ior is not reflected anywhere in the source code of the coclass or
server. The Both and Free options are similarly identical.  
COM determines threading model in two different ways,
depending on the type of server.  For out-of process (EXE) serv-
ers, the threading model is set when you initialize COM. You
specify the model by the call to CoInitialize and CoInitial-
Figure 10–2
ATL Threading Models
The ATL Wizard and Threading Models
157
Additonal Information and Updates: http://www.iftech.com/dcom
izeEx. Let's look at the extended version of the initialization rou-
tine.
HRESULT CoInitializeEx( 
void * pvReserved, //Reserved, always 0
DWORD dwCoInit );//COINIT value - threading model
The second parameter specifies the threading model. The
dwCoInit argument is a COINIT enumeration, which is described
in the  header. The COINIT enumeration determines
the threading model. There are several other values of the enu-
meration, but they aren't commonly used.
When you call the default version of CoInitialize(0), it is the
same of specifying COINIT_APARTMENTTHREADED. CoInitial-
ize remains for compatibility reasons, but the extended version
(CoInitializeEx) is the recommended form.
The behavior of a threading model is often determined by
server implementation. A remote (EXE) server behaves differ-
ently from an In-process server (DLL). COM looks at the thread-
ing modes of the client and server, and determines how to
access the object.  
In-process servers don't always call CoInitialize() for each
COM object. COM needs a way to determine the threading
requirements of the object. This is accomplished by using a reg-
istry key that describes the COM object. This registry key deter-
mines the threading model of the in-process object. 
Under 
HKEY_CLASSES_ROOT\CLSID, 
each 
in-process
server can have a key named InprocServer32. Under this key
COINIT enumeration 
Value 
Description 
COINIT_APARTMENTTHREADED 
2 
Initializes the thread for apart-
ment-threaded object concur-
rency. 
COINIT_MULTITHREADED 
0 
Initializes the thread for multi-
threaded object concurrency.
Table 10.1
COINIT enumerations used by CoInitializeEx 
158    Chapter 10 •
COM Threading Models 
there is a named valued called "ThreadingModel". The threading
model can be "Single", "Apartment", "Free", or "Both".
Apartment Threads
In any threading diagram, an “apartment” is the box around the
message loop and the COM object’s methods. The apartment is a
logical entity that does not map directly to either threads or
memory. The apartment defines the context of the executing
COM object and how it handles multi-threading issues.
An apartment thread has a message loop and a hidden win-
dow. Whenever COM needs to communicate with an apartment
threaded object, it posts a message to the object’s hidden win-
dow. The message gets placed in the object’s message queue.
This is done with PostThreadMessage(). 
The message queue ensures that all COM requests are pro-
cessed sequentially. This means that if you are programming an
apartment threaded server, you don't have to worry about
threading issues. Each method call waits until the previous call is
100% completed with its processing. The COM subsystem auto-
matically takes care of posting messages in the correct thread. 
Regardless of what thread a client uses to access an apart-
ment threaded object, the processing will be done on a single
designated thread. This is true even if the client and server are
running in the same process (as in an In-Process server).
When you create the server, you specify "Threading Model:
Apartment" in the ATL Object Wizard. The apartment threaded
object is implemented through the ATL template class . Here is the header generated by the ATL
object wizard. 
class ATL_NO_VTABLE CMyObject : 
public CComObjectRootEx,
public CComCoClass,
public IDispatchImpl
...
Single Threads
159
Additonal Information and Updates: http://www.iftech.com/dcom
COM does all the work of setting up the object and its apart-
ment and message loop. You can then write your COM object’s
code without worrying about thread safety. A COM server can
have multiple apartment threaded objects running simulta-
neously. The limitation is that each object is always accessed
through the same apartment thread. Always. If the server creates
a new object, it creates a new apartment for that individual
object.
Single Threads
Single threaded servers have a specialized type of apartment
model. A single threaded server has only a single apartment
thread. That means that all COM objects are processed by the
Figure 10–3
An Appartment Threaded COM Object
COM Object
methods
GetMessage()
PutMessage()
Connection
s
COM Apartment
CoInitialize(0)
CoUninitialize()
160    Chapter 10 •
COM Threading Models 
same thread. When the server creates a new COM object, it re-
uses the one-and-only apartment thread to execute methods on
that object. You can imagine the traffic jam this will cause on a
busy server. Back in the early days of COM and OLE, this was
the only model available.
Free Threaded Servers
Free threaded (or Multi-Threaded Apartment) servers in some
cases offer advantages over Apartment threaded servers. Because
they are not thread-safe, they can be much more complicated to
code. 
A free threaded server is similar to a worker thread. It has
no message loop, and does nothing to ensure thread safety. We
say the COM object has an 'Apartment', but in this case, the
apartment does nothing to limit thread access. 
When the client application makes a call to the object in a
free thread, COM processes that request on the thread that called
it. Remember that COM calls are often made through a Proxy/
Stub. On the server side, the COM call arrives on the Stub's
thread, and it will be processed on the same thread. If two cli-
ents call the same free threaded object, both threads will access
the object at the same time. The potential for data corruption, or
even server crashes, is very real if you do not manage synchroni-
zation properly. However, the problems encountered in a free
threaded COM server are no different from those found in any
multi-threaded application.
ATL implements a free threaded object with the ATL tem-
plate class .
class ATL_NO_VTABLE CMyObject : 
public CComObjectRootEx,
public CComCoClass,
public IDispatchImpl
Both
161
Additonal Information and Updates: http://www.iftech.com/dcom
Both
A value of 'both' for in-process servers means the object can be
loaded in both free and apartment threads. This option is stored
in the registry under CLSID/InprocServer32 as Threading-
Model="Both". 
This object is free-threaded, and must handle all the thread-
safety issues of a free threaded model. By marking itself Thread-
ingModel=Both, the object can be loaded directly into an in-pro-
cess apartment thread without the overhead of creating a proxy
object.
 Normally, when an apartment thread loads a free threaded
object, it automatically creates a proxy to marshal the object’s
interface. The "Both" model allows the loading apartment some-
what faster access without this proxy. 
Figure 10–4
Free Threaded Server
COM Object
methods
MTA Object
Thread
1
Thread
2
CoInitialize()
CoUninitialize()
162    Chapter 10 •
COM Threading Models 
Marshaling Between Threads
Now that you understand the three COM threading models, you
need to know more about marshaling. The two topics are closely
tied together. As you recall, marshaling is the process of making
calls and copying data between COM clients and servers. The
whole concept of an apartment is based on not only the execu-
tion and synchronization of COM objects, but on the marshaling
of data between clients, servers, and threads.
One of the features of MIDL is that it automatically builds all
the marshaling code for an object and its client. This marshaling
code is doing some complex things to ensure that data and
method calls are working properly. COM's marshaling methods
need to take into account many factors, especially  threading
models. 
The other factor that we've discussed is synchronization. All
calls in an apartment threaded environment are synchronized.
Calls in a free threaded environment aren't. Here are some rules
that describe how COM will behave when communicating
between threads.
COM Access
Synchronization
Marshaling
To the same thread.
None required. 
None required. All calls are 
made directly. Pointers can be 
passed.
Any thread to an 
Apartment thread.
All calls automatically 
synchronized through a 
message loop.
COM marshals all calls into an 
apartment thread. (This is 
done by posting messages.)
Any free thread to a 
free thread.
Not synchronized. The 
programmer ensures 
synchronized access.
No marshaling within the 
same process. Between pro-
cesses, all calls are marshaled. 
Apartment to Free
Not synchronized.
Marshaled.
Table 10.2
COM communication between threads
Using Apartment Threads
163
Additonal Information and Updates: http://www.iftech.com/dcom
Using Apartment Threads
Apartment threads are by far the easiest type to work with. You
can effectively ignore all the complexities of multi-threaded
access to your COM object. The message queue ensures that
methods are called serially.  For most applications, the perfor-
mance is quite good.  In fact, you'll probably not get any advan-
tage from free threading. 
Commonly, the client thread creates a single object that it
always accesses. In other words, there is a one-to-one corre-
spondence between client thread and server thread. In this case,
there is never a wait for access to the object. In this case, there
would be no advantage to free threading.
There are some disadvantages to apartment threads. The
foremost of these is that your COM object will be unresponsive
when it is executing a method. If you have multiple clients or
multiple client threads accessing the same object, they will have
to wait for each other.  If your object has lengthy processing to
perform, performance will suffer. This is not as common as you