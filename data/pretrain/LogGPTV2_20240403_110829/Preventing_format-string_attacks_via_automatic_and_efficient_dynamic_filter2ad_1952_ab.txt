function deeper in the call stack that does know this infor-
mation must do the registration (i.e., we must register at the
call site of the function whose arguments are pointed to by
the va_list). As the next section shows, we can automate
this process with a simple static analysis.
3. AUTOMATIC WHITE-LIST
MAINTENANCE
We have implemented a fully automatic source-to-source
transformation that inserts calls to __register_word (and
__unregister) for any argument of type int* or unsigned*
that might be passed to a printing function (either directly
or via a va_list).3 Section 3.1 describes the basic approach.
Section 3.2 discusses trickier issues (function pointers and
non-local va_list values). Section 3.3 considers separate
compilation (when not all source code is available). Sec-
tion 3.4 describes some important automatic optimizations
for avoiding unnecessary API calls. Finally, Section 3.5 con-
siders manual optimizations.
3.1 Basic Approach
We built our transformation using the freely available
CIL [20, 4] system for manipulating C programs. CIL takes
a program, performs a number of meaning-preserving sim-
plifying transformations, and produces an Abstract Syntax
Tree (AST). The CIL system is easily extensible, and pro-
vides code to simplify the process of creating static analyses
and source transformations. The CIL system also has the
capability to merge separate source ﬁles (with the --merge
command line ﬂag), which greatly simpliﬁes the construc-
tion of whole-program analyses. For our purposes, whole-
program analysis is not strictly necessary, but leads to more
precise results (see Section 3.3). Extending CIL also makes
it easy for programmers to use our approach:
they can
simply use cilly --merge --doautoWhitelist as their “C
compiler”, and the transformation and subsequent C com-
pilation will happen seamlessly.
3We chose the more secure policy here of only registering in-
teger pointer arguments, because we felt that it was unlikely
that programmers would intend to use other types with a %n.
Our mechanism will also support more permissive policies
that register other types of arguments. There is a trade-
oﬀ here, however, because more registration means a larger
white-list, which in turn means less security.
The actual transformation we perform involves function
calls: For each call e0(e1,e2,...,en) and argument ei
(where i ≥ 1), we determine if:
1. ei is passed to the callee as a variable argument (which
we can tell from the type of e0)
2. ei is a pointer to an integer (which we can tell from
the type of ei)
3. e0 is a printing routine or its variable arguments may
be passed to a printing routine.
If all three facts hold, we surround the function call with
__register_word(ei) and __unregister(). Of course, we
may register and unregister multiple arguments. Figure 1a
contains an example program, with printf calls and with
wrapper functions calling vprintf. We also include a printf
with a constant format string. This call is not rewritten nor
are its arguments registered, as explained in Section 3.4.
Figure 1b shows the result of transforming the example with
our tool.
Because we duplicate the registered expressions, we must
be sure that they have no side-eﬀects. For example, if we
need to register argument p++, we must ensure that our
transformation does not increment the pointer p twice. For-
tunately, we can exploit a transformation that already hap-
pens automatically in CIL. This transformation replaces
all function arguments with eﬀect-free expressions (such as
variables). For example, foo(p++) will get transformed to:
tmp = p++;
foo(tmp);
Our transformation will then register the temporary vari-
able, rather than p++, thus avoiding the duplication of side
eﬀects.
The only necessary question that is not directly answered
by CIL (or by any system that type-checks C code) is whether
fact (3) holds. The arguments passed to a printing function
may come from two diﬀerent sources. They may be supplied
directly at the call site (as in the case of printf, syslog,
fprintf, etc.), or they may be part of another function’s
variable-argument list, and passed via a va_list (as in the
case of vprintf, vsyslog, vfprintf, etc.). If the arguments
are supplied directly, we can simply register (and unregis-
ter) them at the call site. However, if the arguments are
passed from elsewhere, we must determine which functions
they could have come from. We can then register arguments
at the call sites of those functions. We identify those func-
tions with a conventional, whole-program dataﬂow analysis.
As Section 4.2 shows, this analysis is tractable even for large
programs.
In particular, our analysis determines the contents of two
sets of functions. The ﬁrst set, S1, contains exactly those
functions whose integer-pointer arguments must be regis-
tered. Speciﬁcally, these are the variable-argument printing
functions (printf, sprintf, etc.), and the functions that
create a va_list that may be passed to a va_list printing
function (vprintf, vsprintf, etc.). The second set, S2, con-
tains those functions that take a va_list as an argument,
and that may eventually pass that va_list to a vprintf-
style function. They may either pass the va_list directly, or
they may pass it through other functions that (transitively)
pass it to vprintf. Note S2 also includes the vprintf-style
functions themselves.
Our analysis proceeds as follows. We initialize S1 with the
printf-style functions, and S2 with the vprintf-style func-
tions. We then iterate over every function in the program.
For each function f:
1. If f is a variable-argument function that passes a
va_list to a function in S2, then we must add f to
S1. (The function in S2 may pass f’s arguments to
vprintf, so we must register them.)
2. If f has a va_list argument and calls a function in
S2, then we must add f to S2. (The function in S2
may pass f’s va_list to a vprintf, so f needs to be
in S2 as well.)
The above cases handle va_lists that are created in f, or
passed into f. The other possibility—that the va_list is
drawn from some data structure—is discussed in Section 3.2.
We repeatedly iterate over all the functions until no new
functions are added to either set. At this point, S2 will con-
tain all the functions that can (transitively) pass a va_list
argument to a vprintf-style function. The set S1 will con-
tain all the variable-argument functions that call any of the
functions in S2, plus the original variable-argument print-
ing functions. Thus S1 will contain the functions whose
arguments must be registered. Note that there is nothing
unusual here: It is a “textbook example” of a dataﬂow anal-
ysis. We also expect it to be tractable for even the largest
programs because only functions with a variable number of
arguments or an argument of type va_list are relevant: We
can precompute that the vast majority of functions are irrel-
evant and need not be considered when the analysis iterates.
Having precomputed the two sets as just described, it is
trivial to determine if part (3) holds, provided e0 is the name
of a function. Speciﬁcally, part (3) holds if e0 is in S1.
In practice, this basic approach has suﬃced for every ap-
plication we have investigated. Nonetheless, it is not quite
suﬃcient for arbitrary C programs, or for programs where
some of the source code is unavailable. We now consider
these complications.
3.2 Function Pointers and Data Structures
In the previous section, we assumed that function expres-
sions (i.e., e0) were function names, and that every va_list
was either a local variable or a function argument. In prac-
tice these assumptions hold for printing functions, but in
theory they might not.
If we cannot statically determine the function pointed
to by a variable-argument function pointer, we can instead
“guess” whether or not its arguments should be registered.
Guessing yes means we will not risk aborting a program that
is using %n correctly. On the other hand, guessing no is more
secure because the white-list stays smaller. Our current sys-
tem errs on the side of more security, and thus always guesses
no. However, this is a question of policy—our mechanism
can support either choice.
We can also do arbitrary things with a va_list, such
as storing it in a data structure or a global variable.
In
this case, we may not be able to determine at compile-time
whether the program might subsequently pass the va_list
to a printing routine; so again we “guess”. As before, we
err on the side of more security and guess no. However, our
mechanism could easily support a policy of guessing yes. We
would simply treat any function that assigns a va_list to a
void wrapper1(char *fmt, va_list args){
void wrapper1(char *fmt, va_list args){
vprintf(fmt, args);
__vprintf_Checked(fmt, args);
}
}
void wrapper2(char *fmt, ...){
void wrapper2(char *fmt, ...){
va_list args;
va_start(args, fmt);
wrapper1(fmt, args);
va_end(args);
}
va_list args;
va_start(args, fmt);
wrapper1(fmt, args);
va_end(args);
}
int main(int argc, char **argv){
int main(int argc, char **argv){
char str[100] = "Hello%n world!";
int x;
int *y = &x;
printf(str, y);
wrapper2(str, y);
printf("Hello world!");
}
(a)
char str[100] = "Hello%n world!";
int x;
int *y = &x;
__register_word(y);
__printf_Checked(str, y);
__unregister();
__register_word(y);
wrapper2(str, y);
__unregister();
printf("Hello world!");
}
(b)
Figure 1: Example code (a) before and (b) after automatic white-listing.
“strange place” (such as a struct ﬁeld or global variable) as
though that function might call vprintf with the va_list.
Doing so will cause our analysis to trace the va_list back
to its source.
3.3 Separate Compilation
Our iterative program analysis assumes that all the source
code is available (except for the standard library). CIL
makes it easy to provide all the source code, as long as it
is available to the programmer. If it is not, then we can-
not know whether a function taking variable arguments (or
a va_list) might use them for printing. Programmers can
write stub functions to provide the answer, or the tool can
“guess”. Once again, we choose to err on the side of more
security and guess no. However, as before, this is a matter of
the policy that we chose for our prototype. The mechanism
of white-listing can easily support either policy choice. Sim-
ilarly, annotations such as gcc’s printf attribute can guide
the guesses.
3.4 Optimizations
In many cases, we can avoid the run-time overhead asso-
ciated with registration and white-list checking. In particu-
lar, we can circumvent registration and white-list checking
whenever the format string is immutable. Format string
attacks involve inserting unexpected format speciﬁers into
user-supplied format strings. Thus static format strings are
not vulnerable.
Alternatively,
if we also wanted to provide protection
against incorrect uses of %n-speciﬁers by programmers, we
could instead treat constant format strings as follows: For
each %n-speciﬁer (typically none) in the format string, check
statically that the corresponding actual argument is an in-
teger pointer. Then, as above, circumvent registration and
white-list checking.
The constant-string optimization requires two versions of
each printf-style function (one that checks the white-list
and one that does not). However, as we will see in sec-
tion 4.2, the performance beneﬁt more than makes up for
this small amount of code duplication.
Another possible optimization, which we have not yet
implemented, would be to transform calls where no argu-
ments follow the format string into calls with a constant
format string. In particular, we can replace calls of the form
printf(buf) with printf("%s", buf), as long as no argu-
ments appear after buf. If buf contains no format speciﬁers,
these two calls are identical. On the other hand, if buf does
contain format speciﬁers, the behavior of printf(buf) is
undeﬁned (because there are no corresponding arguments).
Thus a C compiler can do whatever it chooses—including
the proposed replacement.4 The new form has a constant
format string, and thus we can apply the previous optimiza-
tion.
3.5 Manual registration
Explicit white-list maintenance allows the programmer to
control the cost of registering address ranges. For example,
consider this code fragment, where we assume that each el-
ement of arr is a string of the form "...
%d ...
%n":
int total = 0, x = 0, i = 0;
for(; i < arr_len; ++i) {
__register_word(&x);
printf(arr[i], i, &x);
__unregister();
total += x;
}
4It is debatable whether using program rewriting to mask a
potential error is worthwhile. In the interest of security, we
believe it is.
int main(int argc, char **argv) {
int i;
char buf[50];
for (i=0; i < 10000000; i++) {
sprintf(buf, "butter");
}
}
int main(int argc, char **argv) {
int i,j,k;
char buf[50];
for (i=0; i < 10000000; i++) {
sprintf(buf, "butter%n%n", &j, &k);
}
}
Figure 2: The ﬁrst performance microbenchmark.
In this test, the format string contains no format
speciﬁers.