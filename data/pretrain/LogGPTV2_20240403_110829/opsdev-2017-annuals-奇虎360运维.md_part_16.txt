紧处理问题，
投入到战斗中，又或者在凌晨2点，在熟睡中感受到了“报警风暴”，你要抗争着爬起来，赶
警惕，可能你已经准备开香槟庆祝这一天顺利度过了，突然出了问题，你需要马上收拾心情，
预知的，就会给人一种不知道“靴子什么时候掉落”的感觉，他要时刻保持高度警惕，神经紧
问题、程序问题等等，他必须有快速判断和处理的能力，还有一点是，故障发生的时间是不可
在他的值班周期内，他要承担全部的问题风险，必须尽快解决一切问题。
值班人的烦恼
120 读SRE Google运维解密有感（三）－运维开发
但是缺点也是显而易见的，值班人是单点，他处理问题的能力，身体状态，心情好坏可能
总之值班让人感觉是很“苦逼”的工作，几乎没人喜欢值班，本人觉得通过制度的改进，
第二个烦恼是抵抗人的“惰性”，如果今天一直都没有报警，没有出现问题，你就会放松
另一个问题是，
一天还是一周
首先值班人是“一个人”还是“两个人”或者多个人，这是一个值得探讨的问题。如果是
一个人还是两个人
上面简单说了怎样值班和值班人的烦恼，下面再说下值班制度中面临的一些问题。
第三个烦恼是“一直在线”，有些团队值班是保证“电话在线，随时处理”即可，在没有
所以第一个烦恼就是“心理压力”，线上的问题各种各样，网络问题，IDC问题，服务器
这些都是对值班人的考验。
值班人的值班周期是“一天”还是“一周”或者更长时间。
---
## Page 126
SRE 的一些启示
和工具提升值班效率。
种“一抓就紧，一放就松”的恶性循环。
方法，比如开会强调，奖惩措施，这种方式短期内有效果，时间长了又开始变的松懈，造成一
来越慢了，问题处理也不及时。
力，就是值班同学“够不够勤快”，而人都是有惰性的，时间长了就会心理疲劳，响应速度越
责任心误区
的心态，要尽力帮助他解决问题。
同学说，值班的同学不是超人，他不能搞定所有事情，不能说你今天不值班就有一种“不关我事”
要“个人英雄主义”，觉得靠自己都能搞定。该汇报汇报，该求助求助。另一方面也是对不值班的
效率。
生的问题，处理好突发事件是基础，更重要的是，通过从根本上解决问题,优化系统以提升团队工作
么会驱动他从根本上解决问题。
下，扛到第二天，值班人就不是我了，而下一个同学也这么做，这样问题得不到根本解决
有做好充分的交接，很多常见故障得不到根除。
体也扛不住啊，每天轮值的好处是值班人只要坚守 24小时就行了，不至于太疲惫，而坏处是如果没
上面说了这么多，现在我说说 SRE 值班中的一些手段，或许能给你一些启示。
这样就陷入到了责任心的误区，值班的好坏不等于责任心的强弱，更好的方式是通过制度
这个时候，我们就觉得是值班同学的“责任心”不强，我们开始用一些提高“责任心”的
值班并不是一个技术活，响应速度够不够快，处理的够不够好，更多的是考验人的响应能
值班制度是为了解决“突发事件响应”这个问题而生的，核心是解决问题，不可本末倒置。
如何判断值班的好坏？值班报告或许只是一种手段，但是它不能代表全部。记录好值班期间发
那么如果值班时间拉长到一周或者更长，值班同学会想，现在不根除，我第二天还得处理，那
值班人不是超人，
值班人不是超人
如何判断值班的好坏
比如有个常见问题，每天值班的同学都会收到报警，而当天值班的同学可能会想临时先处理一
对于值班人是一个人的情况，大多数都会是每天轮值，原因很简单，一个人连续值班好几天身
一方面是对值班同学说的，在遇到突发情况，解决问题是第一位的，干万不
运维开发－读SREGoogle运维解密有感（三）121
---
## Page 127
本文链接：https:/lopsdev.cn/post/sre-read-think-3.html
避人性的弱点，提升工作效率。
122 读SRE Google运维解密有感（三）－运维开发
所以 SRE 更多考虑的是通过制度，流程，工具的优化，让值班更加美好。好的制度就是要规
·多地团队配合值守，让大家“日出而做，日落而息”，当然这是因为谷歌全球都有分公司。
助
·格式化沟通，
大部分问题。
·通过流程化判断问题的方式，减轻值班人应对问题心理压力，让他们认为按照流程走能解决
●值班长度为一周，可更长时间跟踪问题。
急情况，并且副值班人也可以是业务团队或者上下游联系紧密的相关人员。
·SRE中的值班方式是分为“主，副”两个人，主值班人处理紧急情况，副值班人处理非紧
，对事不对人，永远以解决问题为第一优先级。
 确定沟通流程，不在写邮件排版上浪费时间，同时也能快速扩散消息,寻求帮
扫一扫查看文章详情
口
日
---
## Page 128
之前，先要明确以下两点。
排查问题犹如破案
出具体通过啥经验排查出了问题，最后让排查问题逐渐变成了一门玄学。
排查问题不是玄学
点事。
过很多“稀奇古怪”的线上故障和问题，结合SRE中给出的一些方法，来说说“问题排查”那
【读SREGOOGLE运维解密有感（四）
，运营商网络和IP转换，负载均衡，服务器硬件，虚拟机/容器，视业务逻辑的复杂程度，可能
“靠经验”，然后感觉这个逼装的自己还算满意。
“你是怎么想到问题出现在xxx的？又是怎么确认根本原因是xxx的？”，我只能淡淡地说：
排查线上问题，就和侦探破案一样，就是一个不停分析线索，推理的过程，在你准备破案
其实这个“靠经验”说的很模糊，一直以来，大家都觉得排查问题要靠经验，但是又说不
I Jul. 3rd 2017 BY 许斯亮
排查出线上问题，并找到根本原因加以解决，是一件很有成就感的事情，曾经有人问过我
系统异常是正常的，正常是特例
今天我们来聊聊“问题排查”这个话题，本人到目前为止还在参与一线运维的工作，遇到
你们对玄学一无所知
运维开发－读SRE Google运维解密有感（四）123
---
## Page 129
歪了”，先要用怀疑的态度，分析每个人的证词。
题，但是最后是代码调用一处动态配置造成的。
反馈我们虚拟机有问题，有些虚拟机接口返回异常，有些正常，他就让我们帮查查虚拟机的问
无重大调整。获取到有价值的信息，对于排查问题至关重要。
反馈服务器有问题，不要漏掉看似无关紧要的线索，把这些线索先整理下来，后面一并分析。
题，还是很多业务线都出现问题，评估出案情的大小，是普通的民事案件，还是刑事案件。
异常是正常的，正常是特例”。
的，大大增加了的排查问题的难度，所以出现问题后，不要着急，保持好心态，要认为“系统
还要调用其它组件，存储，数据库，缓存等。每个环节都可能出现问题，有的组件又是分布式
124 读SRE Google运维解密有感（四）－运维开发
很多反馈的信息描述，是经过描述者过滤加工过的信息，他的排查和分析有可能把你“带
分析用户反馈的现象，数据是可信的，有时候人说的是不可信的，举个例子，之前有开发
分析证词
查看监控，细看某个监控项的变化，
尽可能扩大你接受到的信息量，
扩大信息量
理清目前得到的线索和信息，比如监控上有网络报警，有用户反馈无法访问，有开发人员
理清线索
所以，你要坚信真相只有一个。
计算机是一门科学，而且计算机是由01组成的世界，在这个世界里只有“是或否”，没有
真相只有一个
先评估出这个问题的影响范围，是全网用户不可用，还是某些用户、是某条业务线出现问
明确案情
所以，恢复线上系统是首要任务，而不是找到它发生的原因。
，相比保证乘客与飞机安全着陆，故障定位和排除是次要目标。－-SRE
在初级飞行员的课程中见到，在紧急情况中，飞行员的首要任务是保持飞机飞行
飞行员首要任务是保持飞机飞行
，比如问询一下开发人员今天有没有做线上改动，网络组有
，追踪日志和调试信息都是扩大信息量的手段。
---
## Page 130
故障不是洪水猛兽
逐一排除，逐步缩小问题范围。“从上到下”，先从现象发生的顶端调用链逐一排查，逐步向下深
卡跑满了。
不要轻易的排除掉某项原因，比如“宇宙射线导致某个电路信号出错”。
入o
SRE给出了一些方法可以借鉴：
我们之前有个 MySQL连接异常的问题，查了很久，做了很多调优都没有解决，最后发现是网
下次遇到问题，使用以上方法试试看，让问题排查不再是“很玄妙的东西”。
●提供丰富的诊断和监控工具。
·确定“最后一个修改”发生的时间。
·什么，哪里和为什么，找出系统正在执行“什么”，询问系统“为什么”执行这些操作，以
·问题排查的几个步骤：定位，检查，诊断，测试/修复，治愈。
排查步骤，先“从大到小”，先看比如运营商网络，机房状态等比较宏观的地方是否有问题，
从大到小，从上到下
排查问题不要先入为主，有时候你觉得极其简单看似非常不可能发生的事情，可能就是原因，
当你听到蹄子声响时，应该先想到马，而不是斑马
运维开发－读SREGoogle运维解密有感（四）125
---
## Page 131
本文链接：https://opsdev.cn/post/sre-read-think-4.html
维职能的结合，极大地加快了业务应用迭代周期，提升了IT对业务的支撑能力。
悉，易于处理程序上线过程中遇到的问题。总之，作为 Google 的DevOps 实践，SRE 非常注重开发和运
预；再者，按照SRE的约定，开发人员自行负责程序上线部署更新，毕竟开发人员对自己开发的程序更熟
少编程工作，来实现各种工具用以自动解决问题和故障，SRE强调的是对问题和故障的自动处理而非人工干
对应用程序的设计实现方式、依赖库、运行时的资源消耗都有严格的规约；其次，SRE工程师本身也要做不
A：SRE和传统的IT 运维有很大区别，SRE 真正实现了 DevOps：首先，SRE深度参与开发阶段工作,
Q：SRE和传统的IT运维有什么区别呢?
面对面：
126读SRE Google运维解密有感（四）－运维开发
一扫查看文章详情
?
L
4
---
## Page 132
有一个以上的文件比 target 文件新，recipe 中的内容就会被执行
建的具体过程了，通常是一些 shell命令。
目录下。
Quick primer on make
脚本。这样我们就可以丢掉 shell脚本了。
工具等等。你可以在外部工具中获得依赖关系跟踪，在需要时并行执行 build，生成简单的 Cl
test 也会做很多测试。那我们为什么还需要Makefile？
Why we need Makefile
我们做了很多事情，大大降低了编写 Makefile 的难度，这对于我们来说是个好消息。
IMAKEFILES FOR GOLANG
符，但仍然建议使用 tab.
有一点必须要牢记，Makefile 中的缩进必须是 tab.如果 Makefile 使用空格或tab 
 Makefile 核心:make 会跟踪 prerequisites 中文件的最新修改时间，只要 prerequisites 
target 是要构建的文件名称， prerequisites 是构建 target 时依赖的文件，recipe 就是构
1 Sep. 4th 2017 BY 高广鹏
、空格混合组合当做缩进，
Makefiles 通常由一些 rules 组成，像这样:
make 是一个构建工具，构建的过程会通常会写到一个叫 Makefile 文件中，放到项目的根
因为它是可执行文档。
make 是一个功能强大的 build 工具，但学习成本也比较高。幸运的是 Go 的工具链已经帮
target: prerequisites 
Introduction
recipe
，它能描述如何 build 项目，运行什么样的测试以及项目依赖的外部
，会出现一些诡异的错误。虽然可以修改默认的缩进字
运维开发 － Makefiles for Golang127
---
## Page 133
三者都可以包含变量
abc。可以看到 xyz 是在 abc 之前运行的。
的目标。
128 Makefiles for Golang － 运维开发
我们先来写一条测试rule。
Let's write Makefile
simple example: 
make中的变量很简单，声明key := vaule，引l用 $(key)。traget、prerequisites、recipe 
variables
noting to do，xyz、abc 文件已经存在。
再次运行结果：
第一次运行结果如下：
这个 Makefile 包含了 2个rule，abc 依赖于xyz。同时它们都有各自的 recipe，达到各自
simple example: 
xyz:
$(FILE): xyz 
FILE := abc
make: 'abc' is up to date.
$make
echo "abc" 
echo "xyz" > xyz
$make
xyz:
abc: xyz
zKx "something"
zKx abc 
>abc
。所有的依赖都被满足，不需要再做什么事了。
---
## Page 134
要执行 make 即可。
运行，但不会生成文件。只要有这个声明，要运行 test 这个target，只能 make test。
每次执行 test 前先运行 lint，如果 lint 运行失败，test 也同样失败。我们不需要记住细节，只
linting before testing
lint 这个 rule 执行了 gometalinter 命令。
.PHONY 来显式地指明一个目标是伪目标，向 make 说明，不管是否有这个文件
义了。为了避免和文件重名的这种情况，我们可以使用一个特殊的标记
让其生效。当然，伪目标的取名不能和文件名重名，不然其就失去了伪目标的意
生成它的依赖关系和决定它是否要执行。我们只有通过显式地声明这个目标才能
伪目标并不是一个文件，只是一个标签，由于伪目标不是文件，所以 make 无法
$(shell..) 是 shell code，这个应该很熟悉了 。
PKGS := $(shell go list ./ ... I grep -v /vendor)
linting
这里有个叫 test 的 rule，而.PHONY:test 显式声明 test 是个伪目标。意味着 test 每次都会
Running test 
test: lint
.PHONY: test
lint:
PHONY: lint 
test:
.PHONY: test 