title:TLS Record Protocol: Security Analysis and Defense-in-depth Countermeasures
for HTTPS
author:Olivier Levillain and
Baptiste Gourdin and
Herv&apos;e Debar
TLS Record Protocol: Security Analysis and
Defense-in-depth Countermeasures for HTTPS
Olivier Levillain
ANSSI
PI:EMAIL
PI:EMAIL
Baptiste Gourdin
Sekoia
Hervé Debar
Télécom SudParis
herve.debar@telecom-
sudparis.eu
ABSTRACT
TLS and its main application HTTPS are an essential part
of internet security. Since 2011, several attacks against the
TLS Record protocol have been presented. To remediate
these ﬂaws, countermeasures have been proposed. They
were usually speciﬁc to a particular attack, and were some-
times in contradiction with one another. All the proofs of
concept targeted HTTPS and relied on the repetition of
some secret element inside the TLS tunnel. In the HTTPS
context, such secrets are pervasive, be they authentication
cookies or anti-CSRF tokens. We present a comprehensive
state of the art of attacks on the Record protocol and the as-
sociated proposed countermeasures. In parallel to the com-
munity eﬀorts to ﬁnd reliable long term solutions, we pro-
pose masking mechanisms to avoid the repetition of sensitive
elements, at the transport or application level. We also as-
sess the feasibility and eﬃciency of such defense-in-depth
mechanisms. The recent POODLE vulnerability conﬁrmed
that our proposals could thwart unknown attacks, since they
would have blocked it.
1.
INTRODUCTION
SSL (Secure Sockets Layer) is a cryptographic protocol
designed by Netscape in 1995 to protect the conﬁdential-
ity and integrity of HTTP connections. Since 2001, the
protocol has been maintained by the IETF (Internet En-
gineering Task Force) and renamed TLS (Transport Layer
Security). Designed in 2008, the current version of the pro-
tocol is TLS 1.2 [9]. The original objective of SSL/TLS was
to secure online-shopping and banking web sites. With the
deployment of web services using the so-called Web 2.0, its
use has broadened drastically.
TLS typical use consists of two consecutive phases: the
Handshake protocol negotiates the cryptographic algorithms
and keys, and authenticates the server to the client us-
ing certiﬁcates; the second phase, the Record protocol, pro-
tects the conﬁdentiality and integrity of subsequent mes-
sages, called records, carrying the application data. In this
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714592.
article, we only consider attacks on TLS Record layer, letting
aside handshake-related subtleties such as session resump-
tion, renegotiation or client authentication.
Depending on the handshake outcome, the records can
be protected using one of the three following cryptographic
schemes: MAC-then-encrypt with a streamcipher, available
since SSL inception (as of today, only RC4 is standardized);
MAC-then-encrypt with a blockcipher using CBC mode, avail-
able since SSL inception; AEAD (Authenticated Encryp-
tion with Additional Data), available from TLS 1.2 only
(e.g. AES using GCM mode). Optionally, the plaintext can
be compressed before cryptographic transformations occurs.
Fig. 1 describes the three possible workﬂows.
Figure 1: TLS Record protocol (streamcipher mode,
CBC mode and AEAD mode).
Since 2011, several researchers have presented attacks af-
fecting the Record protocol conﬁdentiality. Each time, to
prove the applicability of their ﬁndings, they implemented
attacks against HTTPS. Typical HTTP secrets are cookies
and anti-CSRF tokens.
If stolen, they enable attacks like
message replay, session highjacking or web site compromis-
ing. Fundamental to state maintenance in web applications,
they are usually transmitted several times both within ses-
sions and across diﬀerent sessions. As a matter of fact, each
proof of concept relied on one of these secret elements re-
peatedly transmitted inside TLS connections. Thus, a way
to thwart attacks exploiting this kind of repetitions, exist-
ing or still unknown, is to mask the secrets so the attacks
  Stream cipher modePlaintext PCompressed CCMACAuthenticated andEncrypted record|P| < 214|C| < |P| + 1024Compression    (optional)      MAC'ed thenEncrypted recordMAC'ed then Paddedthen Encrypted recordCMACCMACPadEncryption     (XOR)      CMACPadding                  Encryption     (CBC)       CBC modeMACMACAEAD     stepAEAD modebecome ineﬃcient in practice. In this article, we focus on
cookie protection. HTTP Basic/Digest Authentication, and
server-side attacks are discussed in the appendices.
Sec. 2 describes several recent attacks, and the proposed
countermeasures. Sec. 3 presents our attacker model and
the masking principle. Two proofs of concept have been
implemented to assess the applicability and eﬃciency of our
proposals. Sec. 4 describes those implementations, whereas
Sec. 5 analyses the eﬀectiveness of the proposed mechanisms,
as well as their impact on performance.
Our contribution is threefold: ﬁrst, we propose a compre-
hensive analysis of recent attacks on TLS Record layer with
their countermeasures; then we present a new defense-in-
depth approach to the problem, orthogonal to the current
eﬀorts towards long-term solutions, and illustrate them with
two proofs of concepts; ﬁnally, we analyse those implemen-
tations, security- and performance-wise.
2. ATTACKS ON THE RECORD PROTOCOL
This section describes ﬁve recent attacks published be-
tween 2011 and 2014, targeting a session cookie sent by the
client.
2.1 BEAST: implicit IV in CBC mode
In 1995, Rogaway described an adaptive chosen plaintext
attack against the CBC mode with a predictable IV [30].
In 2002 [21], it was noticed that TLS used predictable IVs,
since the last encrypted block of a record is used as the next
record IV. However, this attack was deemed impractical at
the time, or at least challenging citeBard04–tls-cpa,Bard06–
tls-cpa, since it was an adaptive chosen plaintext attack.
The situation changed in 2011 when Duong and Rizzo pre-
sented BEAST (Browser Exploit Against SSL/TLS) [10], a
proof of concept of the vulnerability. Fig. 2 (left-side) de-
tails the ”Encryption (CBC)” step presented in Fig. 1, when
implicit IV is used.
Using the notations of Fig. 2, the attacker can ”guess” that
the value of P1 is equal to some P (cid:63) and check the validity
of her guess. Indeed, after the two records have been sent,
she knows C5 will be the next record IV. Thus she sends
P6 = P (cid:63) ⊕ C5 ⊕ C0 as the next plaintext block, and observes
C6 = E(P6⊕C5) = E(P (cid:63)⊕C0). If the guess was correct (i.e.
P1 is P (cid:63)), C6 = C1, which is observable. The corresponding
encryption step is given on the right side of the ﬁgure.
Furthermore, to avoid having to guess a whole block, the
proof of concept cleverly aligns the blocks so that the block
to guess only contains one unknown byte. For instance,
if the attacker knows P1 is ":SESSION_TOKEN=?" where ?
is unknown, she only needs at most 256 attempts (128 on
average) to recover the byte (or even less, if the targeted
byte belongs to a constrained charset).
Finally, to send the chosen plaintext data in the same TLS
session as the target web application, the Same Origin Policy
(SOP1) [4] must be bypassed. Due to the complexity of the
web ecosystem, vulnerabilities allowing SOP violations are
regularly found on standard browsers and web applications2.
1SOP is a fundamental security property implemented in
web browsers, intended to prevent scripts loaded from a
given site from communicating freely with another site
2Early BEAST implementations used WebSockets. Authors
had to use a Java bug when WebSockets were randomised.
Hypotheses and prerequisites
• The connexion uses CBC mode with an implicit IV;
• The ciphertext is observable;
• The plaintext is partially controlled, adaptively;
• Multiple connections containing the same secret can
be triggered.
Proposed countermeasures
Switch to TLS 1.1. This is the long term solution, since
TLS 1.1 introduces an explicit (and unpredictable) IV for
each record. Yet, TLS 1.1 is still not widely deployed, as
shown by diﬀerent studies [28, 19]. What is worse, to accom-
modate broken implementations, up-to-date browsers use a
fallback strategy when a TLS connection fails, and retry us-
ing older versions (TLS 1.0 or SSLv3).
Use TLS 1.2 AEAD suites. AES-GCM or AES-CCM
are not vulnerable to this attack, but they are only available
with TLS 1.2. As for TLS 1.1, this protocol version is not
widely deployed, and may be subject to a downgrade attack.
Use RC4 to avoid CBC mode. With TLS 1.0 and
earlier versions, this is an eﬃcient way to counter this attack,
and it can be deployed easily and reliably (but Sec. 2.4 shows
this is not an overall acceptable solution).
Randomize the IV by splitting the record. By split-
ting the records to send in two records, the ﬁrst one contain-
ing the ﬁrst byte of the original record, and the second one
the remaining data, the attack still works, but only on the
ﬁrst byte. This so-called ”1/n − 1 split” is eﬃcient and im-
plemented in major browsers3.
Fix SOP violations and XSS bugs. To mount the
attack, forged requests must be sent to the target, either by
bypassing the SOP or by exploiting a Cross Site Scripting
(XSS) vulnerability. It is obviously desirable to ﬁx all these
bugs, but the ever-evolving web ecosystem makes this goal
diﬃcult to reach.
2.2 CRIME & TIME: client-side compression
In 2012, Duong and Rizzo published another attack against
TLS named CRIME (Compression Ratio Info-leak Made
Easy) [29]. Again, their objective was to recover a secret
cookie. The attack is based on the compression step in the
Record protocol and assumes the attacker is able to choose
part of the cleartext, e.g.
the URL path. The following
year, another research team presented the TIME (Timing
Info-leak Made Easy) attack [32], a variant of the CRIME
attack, relying on a diﬀerent feedback method.
Let’s assume the secret cookie, SESSION_ID, is an hex-
adecimal string, and that the attacker can trigger successive
HTTPS connections while controlling part of the cleartext
(typically the URL path). This does not violate the Same
Origin Policy, and the resulting HTTP requests will con-
tain both the forged URL (www.target.com/SESSION_ID=X
in our example, X being an hexadecimal character) and the
cookies corresponding to the target. When these requests
are compressed, the redundancy will be maximum when the
attacker has guessed the secret correctly, which should re-
3Initially, a ”0/n split” had been implemented in OpenSSL,
but it proved to break some implementations, despite empty
ApplicationData records being licit.
Figure 2: [Left] CBC with implicit IV in SSL/TLS before TLS 1.1: IV is generated during the handshake,
[Right] To check whether P1 = P (cid:63), the attacker
then all records are encrypted as a continuous CBC ﬂow.
encrypts a record starting with plaintext block P6, and compares the output C6 to C1, previously observed.
sult in a better compression. To make this phenomenon
observable, the attacker needs the record to get smaller4.
CRIME and TIME propose two diﬀerent methods to ob-
serve the impact of compression on the plaintext. CRIME
simply relies on the encrypted packet sizes, assuming the
attacker is able to capture the victim’s traﬃc. TIME uses
a diﬀerent feedback method: the variation of transmission
time between a correct guess (where compression is more
eﬃcient) and an incorrect one5. To amplify the eﬀect of a
compressed plaintext being one byte shorter, the idea behind
TIME is to forge a plaintext such that the encrypted packet
just crosses the TCP window size and requires a TCP ACK
from the server before sending the remaining byte. This
way, when the attacker guesses the correct character, the
compression kicks in and the encrypted data contains one
byte less, which does not require to wait a Round Trip Time
for the ACK. This diﬀerence in timing is observable from
the client-side script launching the requests.
Hypotheses and prerequisites
• TLS compression is activated;
• The ciphertext length is observable, e.g. via packet
sizes or timing leaks;
• Plaintext can be loosely controlled by the attacker;
• Multiple connections containing the same secret can
be triggered.
Proposed countermeasures
Disable TLS compression. This blocks the attack com-
pletely, and has no signiﬁcant impact on performance.
Randomize the packet length. Several proposals were
made to add random-length padding to application mes-
sages (adding random bytes or slicing the HTTP content
4To this aim, some parameters need to be tuned, like the
block alignment (with CBC encryption) and a way to reset
the compression dictionary (the main compression algorithm
in TLS, Defalte, is stateful).
5TIME authors also described an attack to recover server-
sent anti-CSRF tokens. Appendix B presents details on
server-side compression attacks and countermeasures.
in chunks). Unless the added data is signiﬁcant enough
(which is equivalent in practice to disabling compression),
these proposals essentially force the attacker to collect more
data, but do not fundamentally invalidate the attack.
Restrictions on cross-site requests. If cross-site re-
quests were forbidden (or at least excluded sensitive infor-
mation like authentication cookies), the attacker would ﬁrst
need to exploit an XSS to mount this attack, but many web
applications would also break.
2.3 Lucky 13: CBC padding oracle
In TLS, when a blockcipher is used with CBC, the plain-
text is MAC’ed then padded and encrypted, which allows
for attacks exploiting padding oracles, ﬁrst introduced by
Vaudenay in 2002 [33]. As soon as an attacker can distin-
guish between a MAC error and a CBC padding error, be it
through an out-of-band message or a timing diﬀerence, she
can gain information about the plaintext.
Figure 3: CBC encryption and decryption, in the
light of a padding oracle exploitation. Blocks C, C (cid:63)
(in particular its last byte g) and IV are known.
  MAC'ed & paddedrecordP0P1P2IVEkEkEkC0C1C2MAC'ed & paddedrecordP3P4P5EkEkEkC3C4C5TLSHandshakeFirst recordsentSecond recordsentTimeline  C5MAC'ed & paddedRecord, with P6chosen by the attackerP6P7P8EkEkEkC6C7C8Third recordsentP1EkC0C1To be compared to the previous sequence:With P6 = P* xor C0 xor C5PIVCEkCC...gC*...Padding check and removal(OK if g xor pn-1 xor IVn-1 = 0)MAC verificationP      IVEk-1P      IVP      IVNormal encryptionTampered decryptiong     pn-1        IVn-1When decrypting a CBC-encrypted record, the recovered
plaintext should end with a valid padding: p bytes all valued
p−1 (for example, blocks ending with 00, 0101, 020202, etc.
are correctly padded). Let P = p0p1 ··· pn−1 be a plaintext
block, and C = c0c1 ··· cn−1 be the corresponding ciphertext
(see Fig. 3, on the left side). To guess the value of pn−1, the
attacker can send a fake ciphertext containing two blocks:
C (cid:63)C, with C being the ciphertext block to recover and C (cid:63) a
random block, ending with c(cid:63)
n−1 = g (the decryption of the
second block is described in Fig. 3, on the right side). If the
guessed byte g is indeed equal to pn−1 ⊕ IVn−1, the output
−1
of E
k will end with a null byte, the padding will be correct,
and this will lead to a MAC error (since the attacker can not
create a valid MAC). Otherwise, if the guess is incorrect, the
padding will be incorrect, with overwhelming probability6.
If the attacker can distinguish between MAC errors and
CBC padding errors, she can use the resulting padding or-
acle to guess the content of a block, one byte at a time.
Indeed, once the attacker has identiﬁed the last byte pn−1,
she can try and ﬁnd whether pn−2 = g with C (cid:63) ending this
time with (g ⊕ 01)|(pn−1 ⊕ 01), and so on.
The initial speciﬁcations of SSL/TLS stated that both
error cases (invalid MAC and padding error) should lead
to diﬀerent alert messages. However, this was not directly
useful from the attacker point of view, since the alert was
encrypted. Another way to diﬀerentiate the two error cases
is to measure the time needed to reject the invalid packet.
When no MAC is performed, the answer is returned faster.
That is why TLS 1.1 [8] contains a note stating that im-
plementations MUST ensure that record processing time is
essentially the same whether or not the padding is correct.
Moreover, such attacks were initially considered imprac-
tical against TLS since modiﬁed records would eventually
trigger a MAC error, be rejected, and cause the whole ses-
sion to close. In 2012, Paterson et al. studied the applicabil-
ity of this attack to DTLS [23]. Datagram TLS (DTLS) [27]
is a cryptographic protocol similar to TLS relying on UDP
instead of TCP; since UDP is not a reliable transport layer,
datagrams may be lost or corrupted. Furthermore, DTLS
does not close a session when a MAC error is encountered
(nor does it emit a warning). The authors identiﬁed a timing
attack that made it possible to distinguish a padding error
from a MAC error (to amplify the timing info-leak, several
identical consecutive packets are sent on the wire).
In case of a padding error, the standard implementation
of TLS CBC decryption assumes a ﬁxed-length pad, which,
according to the implementation note quoted earlier, leaves
a small timing channel, since MAC performance depends to
some extent on the size of the data fragment, but it is not be-
lieved to be large enough to be exploitable. It was established
in 2013 that this small info-leak was in fact exploitable in
TLS to obtain a padding oracle [2]. Moreover, when the