Getting on a hook
or PostgreSQL extensibility
Alexey Kondratov
Postgres Professional
PostgreSQL @ FOSDEM’21, February 6-7
PostgreSQL extensibility
o Custom types, operators.
}
o Access methods.
o PL/pgSQL scripting language. A lot of info in the docs [1].
o Functions, triggers, extensions and so on.
o …
[1] https://www.postgresql.org/docs/current/extend.html 2
PostgreSQL extensibility
o Custom types, operators.
}
o Access methods.
o PL/pgSQL scripting language. A lot of info in the docs [1].
o Functions, triggers, extensions and so on.
o …
o Hooks (and callbacks).
[1] https://www.postgresql.org/docs/current/extend.html 3
What is a hook?
o Function or more precisely a global pointer to a function.
o Being defined it will be called by PostgreSQL at some specific
moment.
o Scattered all over the PostgreSQL core.
o Extensions (shared libraries) can set these hooks to peek into the
PostgreSQL internal state.
4
Hooks: pointer
execMain.c
Executed if defined
5
Hooks: installation
pg_stat_statements.c: _PG_init()
1) Remember previously defined value 2) Register your own function
6
Hooks: design
pg_stat_statements.c
Do not forget to call your predecessor!
7
Hooks: overview
ClientAuthentication_hook(port, status)
[1]
post_parse_analyze_hook(pstate, query)
planner_hook(parse, query_string, …)
ExecutorStart_hook(queryDesc, eflags)
ExecutorEnd_hook(queryDesc)
[1] Original diagram is from http://www.interdb.jp/pg/pgsql03.html. 8
Hooks: unofficial documentation
o GitHub repo: https://github.com/AmatanHead/psql-hooks
o Lists hook arguments.
o Has text description.
o pgPedia: https://pgpedia.info/h/hooks.html
o There is an interesting change history
with commit reference per hook.
o A bit outdated Guillaume Lelarge’s slides from PGCon 2012.
9
What is a callback?
o Very similar to the hooks.
o But initially designed to be set by multiple users.
o Usually installed by Register*Callback() setter functions:
RegisterXactCallback(), RegisterSubXactCallback(),
, etc.
RegisterExprContextCallback()
o Yet, there are others like: .
before_shmem_exit(), on_shmem_exit()
o Mostly for internal usage.
10
Callbacks: registration
postgres_fdw/connection.c
Run setter function to register your own callback
11
Callbacks: setter function
xact.c
Keeps a list of registered callbacks
12
Example time
13
Distributed PostgreSQL
14
Distributed DDL
o Broadcast specific (or all) DDL across a number of PostgreSQL nodes.
o Create distributed (sharded / partitioned) tables with familiar interface
→
extend CREATE TABLE statement syntax.
o This operation should be atomic, i.e. either committed or aborted on all
PostgreSQL instances use two-phase commit (2PC).
→
o Do everything from the extension no core modifications!
→
15
Standard DDL processing
o Get query from the client.
o Parse and plan it.
o Pass it to the
standard_ProcessUtility().
16
Distributed DDL: broadcast
Utility hook receives:
o Raw text of the statement.
o Planned statement.
o So it can decide whether
to send this DDL to
other servers or not [1].
[1] Source code of broadcast example can be found on GitHub postgrespro/shardman. 17
Distributed DDL: syntax extension
We would like to add some additional parameters to
CREATE TABLE syntax (e.g. number of partitions,
partitioning column name).
18
Distributed DDL: syntax extension
Luckily, not a ‘syntax error’, so parameters
are not processed by the parser itself!
19
Distributed DDL: syntax extension
1. Notice, remember and
remove known additional
parameters.
2. Process statement taking into
account the specified parameters
(i.e. add partitioning info, create
partitions as well, do broadcast).
20
Distributed DDL: atomicity
o Without 2PC, transaction might end up COMMITTED on some nodes
and ABORTED on others.
o 2PC introduces an intermediate state — PREPARED.
o PostgreSQL already has a 2PC infrastructure.
21
Distributed DDL: transaction
Transaction (xact) callback
is used by postgres_fdw to:
1. Commit all foreign
transactions first.
2. Proceed to local commit.
22
Distributed DDL: 2PC
At stage (1) it is too late to
abort local transaction and if
we will fail to commit all
remote xacts, then some of
them may be left in the
PREPARED state (2). In this
case some additional process
(resolver) have to either
commit them or abort based
on the coordinator state.
Simple patch prototype, which adds 2PC into postgres_fdw can be found in the pgsql-hackers mailing list. 23
Feedback
If you have any questions or comments:
o PI:EMAIL
o github.com/ololobus
o twitter.com/ololobuss
Thank you!
24