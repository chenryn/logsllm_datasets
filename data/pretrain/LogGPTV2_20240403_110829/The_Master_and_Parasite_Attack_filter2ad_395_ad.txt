Click Jacking
Ad Injection
DDoS
Web mail, social networks,
WhatsApp Web ...
Crypto-currency mining,
crack hashes, distributed
scraper...
Attack noninﬂected sites
Inject ads in websites
the victims visit
Attack other sites
JS CPU Cache & Spectre
Rowhammer
0-day on Demand
Attack Insecure Routers
and internal IoT Devices
DDoS Internal Systems
Attack the CPU cache via timing
Attack the RAM
Exploit the System of the client.
Attack devices in the internal
network of the victim
Overload devices in the
targeted internal network.
We harvest data out of the chat app, then use the DOM to send
personalized phishing to the contacts of the user as well as read
previous email communication from the DOM.
We use the CPU / GPU to perform computations.
We have complete access to the DOM,
so we can run click jacking attacks
We can target revolvers which have many
website users on them. Then inject ads in
websites the victims visit.[38]
Use web based requests (images, web sockets...)
to overload servers [25]. An infected network cache, like CDN
edge server can be exploited for DDoS.
Attacker uses timing side channels to read data in cache [23, 22]
Exploits charges leak of memory cells
the exploits use privilege escalation [14]
The parasite loads 0-day exploits to the client and launches them.
Use WebRTC and JS to scan and attack
devices in the internal network
of the victim (sonar.js)
Use infected clients to overload devices
in the targeted internal network.[25]
TABLE V
Requirements
→ if the user is not logged
in we wait till he logs in and
→ if the user is logged in
we show him a fake login
form in the DOM.
no additional requirements
Authorization by an
attacked domain
no additional requirements
no additional requirements
No out-of-band transaction
detail conﬁrmation is used,
or is ignored by the user.
No out-of-band transaction
detail conﬁrmation is used,
or is ignored by the user.
The application to attack must
be open (in a tab) for sending
the phishing. It sufﬁces for a
browser to be open and used
on different sites.
no additional requirements
no additional requirements
no additional requirements
no additional requirements
no additional requirements
Lack of HW techniques to
prevent the rowhammer
no additional
no additional requirements
no additional requirements
C
I
A
C
I
I
A
Victim
Browser
Victim
OS
Victim
Network
EVALUATION OF ATTACKS AGAINST POPULAR APPLICATIONS, TARGETING (C)ONFIDENTIALITY, (I)NTEGRITY AND (A)VAILABILITY.
’connect-src’ being used, 17 used a wildcard here and are
therefore not properly conﬁgured.
Fig. 5. CSP statistics, connect-src frequently used if CSP is supplied. Pie-
chart: Used CSP version, where X-CSP and X-Webkit-CSP are deprecated.
CSP has to be conﬁgured correctly to ensure, that only
trusted origins are used for remote resources like images or
WebSockets. Even if all the servers are conﬁgured correctly
(which is not done often [42]), not all browsers are supporting
CSP and there are also bypasses for CSP, which ampliﬁes the
problem [20]. In order to draw awareness to these headers,
browsers should display warnings. Another way to enforce
these headers could be that major search engines use them to
rank search results, as is done with HTTPS.
It is also recommended to check the integrity of the included
resources via the Subresource Integrity (SRI)4 security feature.
4https://developer.mozilla.org/en-US/docs/Web/Security/Subresource
Integrity
However neither CSP nor SRI provide security during the
active injection phase by eavesdropping attacker. Since the
attacker spoofs the response from the server, it also controls
all the headers and the delivered documents. CSP can deliver
limited protection when the victim is not exposed to the
attacker any more, by eliminating the persistence and the
C&C.
IX. CONCLUSIONS
We develop a botnet which is based on sandboxed scripts,
we call parasites, with a remote attacker which controls them.
Our methodology of injecting the scripts is based on cam-
ouﬂaging the malicious script as appearing to originate from
a genuine website, this allows us to bypass SOP restrictions.
Our work demonstrates that the common belief that sandboxed
scripts pose an ephemeral threat, which applies only during
the visit to the malicious website, is risky. We show that
the caches can be forced to store the scripts even after the
victim stops visiting the website whose object was infected
with a parasite, and even after the victim moves to a different
network. We evaluate experimentally the fraction of objects
on popular websites that can be exploited for such persistent
attacks.
The main contribution of our work is to experimentally
evaluate the attack surface introduced by such parasite scripts
on to applications and caches.
ACKNOWLEDGEMENTS
This research has been funded by the German Federal
Ministry of Education and Research and the Hessen State
Ministry for Higher Education, Research and Arts within their
joint support of the National Research Center for Applied
Cybersecurity ATHENE, and co-funded by the DFG as part
of project S3 within the CRC 1119 CROSSING.
REFERENCES
[1] Alharbi, F., Chang, J., Zhou, Y., Qian, F., Qian, Z., Abu-Ghazaleh,
N.: Collaborative client-side dns cache poisoning attack. In: IEEE
INFOCOM 2019-IEEE Conference on Computer Communications. pp.
1153–1161. IEEE (2019)
[2] appliansys: CACHEBOX on
Italian Cruise
(2015),
https:
//www.appliansys.com/italian-isp-caches-on-cruises-to-save-
bandwidth-and-improve-connectivity/
[3] Barth, A., Weinberger, J., Song, D.: Cross-origin javascript capability
leaks: Detection, exploitation, and defense. In: USENIX security sym-
posium. pp. 187–198 (2009)
[4] Birge-Lee, H., Sun, Y., Edmundson, A., Rexford, J., Mittal, P.: Bamboo-
zling certiﬁcate authorities with {BGP}. In: 27th {USENIX} Security
Symposium ({USENIX} Security 18). pp. 833–849 (2018)
[5] Brandt, M., Dai, T., Klein, A., Shulman, H., Waidner, M.: Domain
Validation++ For MitM-Resilient PKI. In: Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security. pp.
2060–2076. ACM (2018)
[6] BuiltWith: Google Analytics Usage Statistics
trends.builtwith.com/analytics/Google-Analytics
(2019), https://
[7] Bursztein, E., Gourdin, B., Rydstedt, G., Boneh, D.: Bad memories
(2010)
[8] Chen, S., Ross, D., Wang, Y.M.: An analysis of browser domain-isolation
bugs and a light-weight transparent defense mechanism. In: Proceedings
of the 14th ACM conference on Computer and communications security.
pp. 2–11 (2007)
[9] Chen, W., Qian, Z.: Off-path {TCP} exploit: How wireless routers
can jeopardize your secrets. In: 27th {USENIX} Security Symposium
({USENIX} Security 18). pp. 1581–1598 (2018)
[10] Citrix: Citrix NetScaler Documentation (2019), https://docs.citrix.com/
en-us/netscaler/12/getting-started-with-netscaler/secure-trafﬁc-using-
ssl.html
[11] Dehling, F., Mengel, T., Iacono, L.L.: Rotten cellar: Security and privacy
of the browser cache revisited. In: Nordic Conference on Secure IT
Systems. pp. 20–36. Springer (2019)
[12] Eskandari, S., Leoutsarakos, A., Mursch, T., Clark, J.: A ﬁrst look at
browser-based cryptojacking. In: 2018 IEEE European Symposium on
Security and Privacy Workshops (EuroS&PW). pp. 58–66. IEEE (2018)
[13] Gilad, Y., Herzberg, A., Shulman, H.: Off-path hacking: The illusion
of challenge-response authentication. IEEE Security & Privacy 12(5),
68–77 (2013)
[14] Gruss, D., Maurice, C., Mangard, S.: Rowhammer.
js: A remote
software-induced fault attack in javascript. In: International conference
on detection of intrusions and malware, and vulnerability assessment.
pp. 300–321. Springer (2016)
[15] Herzberg, A., Shulman, H.: Security of patched dns. In: European
Symposium on Research in Computer Security. pp. 271–288. Springer
(2012)
[16] Herzberg, A., Shulman, H.: Fragmentation Considered Poisonous: or
one-domain-to-rule-them-all.org. In: IEEE CNS 2013. The Conference
on Communications and Network Security, Washington, D.C., U.S.
IEEE (October 2013)
[17] Herzberg, A., Shulman, H.: Socket overloading for fun and cache-
poisoning. In: Proceedings of the 29th Annual Computer Security
Applications Conference. pp. 189–198. ACM (2013)
[18] Jia, Y., Chua, Z.L., Hu, H., Chen, S., Saxena, P., Liang, Z.: ”the we-
b/local” boundary is fuzzy: A security study of chrome’s process-based
sandboxing. In: Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security. pp. 791–804 (2016)
[19] Klein, A., Shulman, H., Waidner, M.: Internet-wide study of dns cache
injections. In: IEEE INFOCOM 2017-IEEE Conference on Computer
Communications. pp. 1–9. IEEE (2017)
[20] Magazinius, J., Rios, B.K., Sabelfeld, A.: Polyglots: crossing origins by
crossing formats. In: Proceedings of the 2013 ACM SIGSAC conference
on Computer & communications security. pp. 753–764 (2013)
[21] Man, K., Qian, Z., Wang, Z., Zheng, X., Huang, Y., Duan, H.: Dns
cache poisoning attack reloaded: Revolutions with side channels. In:
Proceedings of the 2020 ACM SIGSAC Conference on Computer and
Communications Security. pp. 1337–1350 (2020)
[22] Noack, L., Reichert, T.: Exploiting speculative execution (spectre) via
javascript. Advanced Microkernel Operating Systems p. 11 (2018)
[23] Oren, Y., Kemerlis, V.P., Sethumadhavan, S., Keromytis, A.D.: The
spy in the sandbox: Practical cache attacks in javascript and their
implications. In: Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security. pp. 1406–1418 (2015)
[24] Papadopoulos, P., Ilia, P., Polychronakis, M., Markatos, E.P., Ioannidis,
S., Vasiliadis, G.: Master of web puppets: Abusing web browsers for
persistent and stealthy computation. arXiv preprint arXiv:1810.00464
(2018)
[25] Pellegrino, G., Rossow, C., Ryba, F.J., Schmidt, T.C., W¨ahlisch, M.:
Cashing out
the great cannon? on browser-based ddos attacks and
economics. In: 9th {USENIX} Workshop on Offensive Technologies
({WOOT} 15) (2015)
[26] Qian, F., Quah, K.S., Huang, J., Erman, J., Gerber, A., Mao, Z., Sen,
S., Spatscheck, O.: Web caching on smartphones: ideal vs. reality. In:
Proceedings of the 10th international conference on Mobile systems,
applications, and services. pp. 127–140. ACM (2012)
[27] Qian, Z., Mao, Z.M.: Off-path tcp sequence number inference attack-
how ﬁrewall middleboxes reduce security. In: 2012 IEEE Symposium
on Security and Privacy. pp. 347–361. IEEE (2012)
[28] Ramanan, B.A., Drabeck, L.M., Haner, M., Nithi, N., Klein, T.E.,
Sawkar, C.: Cacheability analysis of http trafﬁc in an operational lte
network. In: 2013 Wireless Telecommunications Symposium (WTS).
pp. 1–8. IEEE (2013)
[29] Rogowski, R., Morton, M., Li, F., Monrose, F., Snow, K.Z., Polychron-
akis, M.: Revisiting browser security in the modern era: New data-only
attacks and defenses. In: 2017 IEEE European Symposium on Security
and Privacy (EuroS&P). pp. 366–381. IEEE (2017)
[30] Ruderman, J.: Same origin policy for javascript. Mozilla Developer
Network, https://develope r. mozilla. org/ko/docs/Web/Security/Same-
origin po licy (accessed April 13, 2017) (2009)
[31] Rula, J.P., Newman, J., Bustamante, F.E., Kakhki, A.M., Choffnes,
D.: Mile high wiﬁ: A ﬁrst look at in-ﬂight internet connectivity. In:
Proceedings of the 2018 World Wide Web Conference. pp. 1449–1458.
International World Wide Web Conferences Steering Committee (2018)
[32] Services, A.C.: Flight Airworthiness Support Technology (2002),
https://www.airbus.com/content/dam/corporate-topics/publications/fast/
FAST30.pdf
[33] Shulman, H., Waidner, M.: Fragmentation considered leaking: port
inference for dns poisoning. In: International Conference on Applied
Cryptography and Network Security. pp. 531–548. Springer (2014)
[34] Shulman, H., Waidner, M.: Towards security of internet naming infras-
tructure. In: European Symposium on Research in Computer Security.
pp. 3–22. Springer (2015)
[35] Shusterman, A., Kang, L., Haskal, Y., Meltser, Y., Mittal, P., Oren, Y.,
Yarom, Y.: Robust website ﬁngerprinting through the cache occupancy
channel. In: 28th {USENIX} Security Symposium ({USENIX} Security
19). pp. 639–656 (2019)
[36] Stamm, S., Sterne, B., Markham, G.: Reining in the web with content
security policy. In: Proceedings of the 19th international conference on
World wide web. pp. 921–930 (2010)
[37] Team, S.R., et al.: Emotet exposed: looking inside highly destructive
malware. Network Security 2019(6), 6–11 (2019)
[38] Thomas, K., Bursztein, E., Grier, C., Ho, G., Jagpal, N., Kapravelos,
A., McCoy, D., Nappa, A., Paxson, V., Pearce, P., et al.: Ad injection at
scale: Assessing deceptive advertisement modiﬁcations. In: 2015 IEEE
Symposium on Security and Privacy. pp. 151–167. IEEE (2015)
[39] Vallentin, M., Ben-David, Y.: Persistent browser cache poisoning (2010)
[40] Van Kesteren, A., et al.: Cross-origin resource sharing. W3C Working
Draft WD-cors-20100727, latest version available at¡ http://www. w3.
org/TR/cors (2010)
[41] Peter Van
via
de Venne Director
the
tions
https://thedigitalship.com/conferences/presentations/2014rotterdam/
08 Peter Van de Venne-Director of IT-Spliethoff.pdf
“limited-capability”
IT, S.: Data-hungry
network
satellite
applica-
(2014),
[42] Weichselbaum, L., Spagnuolo, M., Lekies, S., Janc, A.: Csp is dead,
long live csp! on the insecurity of whitelists and the future of content
security policy. In: Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security. pp. 1376–1387 (2016)
[43] Zhang, K., Leng, S., He, Y., Maharjan, S., Zhang, Y.: Cooperative
content caching in 5g networks with mobile edge computing. IEEE
Wireless Communications 25(3), 80–87 (2018)
[44] Zheng, X., Lu, C., Peng, J., Yang, Q., Zhou, D., Liu, B., Man, K.,
Hao, S., Duan, H., Qian, Z.: Poison over troubled forwarders: A
cache poisoning attack targeting {DNS} forwarding devices. In: 29th
{USENIX} Security Symposium ({USENIX} Security 20). pp. 577–
593 (2020)