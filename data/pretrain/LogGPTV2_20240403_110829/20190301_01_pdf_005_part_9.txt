### Procedure Characteristics and Attributes

- **IMMUTABLE**: This characteristic ensures that the procedure, when given the same argument values, does not perform database lookups or use information not directly present in its argument list. If this clause is included, any call to the procedure with all-constant arguments can be immediately replaced with the procedure's return value.

- **[NOT] LEAKPROOF**: A LEAKPROOF procedure has no side effects and does not reveal any information about the values used to call it. The `NOT` keyword can be used to indicate that the procedure is not leakproof.

- **CALLED ON NULL INPUT**:
  - **RETURNS NULL ON NULL INPUT (STRICT)**: Indicates that the procedure will always return `NULL` if any of its arguments are `NULL`. In such cases, the procedure is not executed; instead, a `NULL` result is assumed automatically.
  - **CALLED ON NULL INPUT (default)**: Indicates that the procedure will be called normally even if some of its arguments are `NULL`. It is the author's responsibility to check for `NULL` values and handle them appropriately.

- **[EXTERNAL] SECURITY DEFINER / [EXTERNAL] SECURITY INVOKER**:
  - **SECURITY DEFINER**: Specifies that the procedure will execute with the privileges of the user who created it. The `EXTERNAL` keyword is optional and allowed for SQL conformance.
  - **SECURITY INVOKER**: Specifies that the procedure will execute with the privileges of the user who calls it. The `EXTERNAL` keyword is optional and allowed for SQL conformance.

- **AUTHID DEFINER / AUTHID CURRENT_USER**:
  - **AUTHID DEFINER**: Synonym for `[EXTERNAL] SECURITY DEFINER`. The rights of the procedure owner are used to determine access privileges to database objects.
  - **AUTHID CURRENT_USER**: Synonym for `[EXTERNAL] SECURITY INVOKER`. The rights of the current user executing the procedure are used to determine access privileges.

- **PARALLEL {UNSAFE | RESTRICTED | SAFE}**:
  - **UNSAFE**: The procedure cannot be executed in parallel mode, forcing a serial execution plan. This is the default setting if the `PARALLEL` clause is omitted.
  - **RESTRICTED**: The procedure can be executed in parallel mode, but the execution is restricted to the parallel group leader. If any part of the query is parallel restricted, the relation won't be chosen for parallelism.
  - **SAFE**: The procedure can be executed in parallel mode without any restrictions.

- **COST execution_cost**: A positive number giving the estimated execution cost for the procedure, in units of `cpu_operator_cost`. If the procedure returns a set, this is the cost per returned row. Larger values cause the planner to try to avoid evaluating the function more often than necessary.

- **ROWS result_rows**: A positive number giving the estimated number of rows that the planner should expect the procedure to return. This is only allowed when the procedure is declared to return a set. The default assumption is 1000 rows.

- **SET configuration_parameter {TO value | = value | FROM CURRENT}**: This clause sets the specified configuration parameter to the specified value when the procedure is entered and restores it to its prior value when the procedure exits. `SET FROM CURRENT` saves the session's current value of the parameter as the value to be applied when the procedure is entered.

- **PRAGMA AUTONOMOUS_TRANSACTION**: This directive sets the procedure as an autonomous transaction.

### Notes
- The `STRICT`, `LEAKPROOF`, `PARALLEL`, `COST`, `ROWS`, and `SET` keywords provide extended functionality for Advanced Server and are not supported by Oracle.
- The `IMMUTABLE`, `STABLE`, `STRICT`, `LEAKPROOF`, `COST`, `ROWS`, and `PARALLEL {UNSAFE | RESTRICTED | SAFE}` attributes are only supported for EDB SPL procedures.
- By default, stored procedures are created as `SECURITY DEFINERS`; stored procedures defined in `plpgsql` are created as `SECURITY INVOKERS`.

### Examples

#### Example 1: Listing Employees
```sql
CREATE OR REPLACE PROCEDURE list_emp
IS
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    CURSOR emp_cur IS
        SELECT empno, ename FROM emp ORDER BY empno;
BEGIN
    OPEN emp_cur;
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    LOOP
        FETCH emp_cur INTO v_empno, v_ename;
        EXIT WHEN emp_cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    CLOSE emp_cur;
END;

EXEC list_emp;
```
Output:
```
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
```

#### Example 2: Using IN OUT and OUT Arguments
```sql
CREATE OR REPLACE PROCEDURE emp_job (
    p_empno IN OUT emp.empno%TYPE,
    p_ename IN OUT emp.ename%TYPE,
    p_job OUT emp.job%TYPE
)
IS
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
BEGIN
    SELECT ename, job INTO v_ename, v_job FROM emp WHERE empno = p_empno;
    p_ename := v_ename;
    p_job := v_job;
    DBMS_OUTPUT.PUT_LINE('Found employee # ' || p_empno);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        BEGIN
            SELECT empno, job INTO v_empno, v_job FROM emp WHERE ename = p_ename;
            p_empno := v_empno;
            p_job := v_job;
            DBMS_OUTPUT.PUT_LINE('Found employee ' || p_ename);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Could not find an employee with number, ' || p_empno || ' nor name, ' || p_ename);
                p_empno := NULL;
                p_ename := NULL;
                p_job := NULL;
        END;
END;

DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
BEGIN
    v_empno := 0;
    v_ename := 'CLARK';
    emp_job(v_empno, v_ename, v_job);
    DBMS_OUTPUT.PUT_LINE('Employee No: ' || v_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
END;
```
Output:
```
Found employee CLARK
Employee No: 7782
Name : CLARK
Job : MANAGER
```

#### Example 3: Using AUTHID DEFINER and SET Clauses
```sql
CREATE OR REPLACE PROCEDURE update_salary(id INT, new_salary NUMBER)
SET SEARCH_PATH = 'public' SET WORK_MEM = '1MB'
AUTHID DEFINER IS
BEGIN
    UPDATE emp SET salary = new_salary WHERE emp_id = id;
END;
```
This example sets the procedure's search path to `public` and the work memory to `1MB`. The `AUTHID DEFINER` clause temporarily grants privileges to a role that might otherwise not be allowed to execute the statements within the procedure. To use the privileges associated with the role invoking the procedure, replace `AUTHID DEFINER` with `AUTHID CURRENT_USER`.

### See Also
- `DROP PROCEDURE`

---

### CREATE PROFILE

#### Name
- **CREATE PROFILE**: Creates a new profile.

#### Synopsis
- **CREATE PROFILE profile_name [LIMIT {parameter value} ...]**: Creates a new profile with specified rules.

#### Description
- **CREATE PROFILE** creates a new profile. The `LIMIT` clause and one or more space-delimited parameter/value pairs specify the rules enforced by Advanced Server.
- Advanced Server creates a default profile named `DEFAULT`. When you use the `CREATE ROLE` command to create a new role, the new role is automatically associated with the `DEFAULT` profile.
- You must be a superuser to use `CREATE PROFILE`.

#### Parameters
- **profile_name**: The name of the profile.
- **parameter**: The password attribute that will be monitored by the rule.
- **value**: The value the parameter must reach before an action is taken by the server.

#### Supported Parameters
- **FAILED_LOGIN_ATTEMPTS**: Specifies the number of failed login attempts before the account is locked. Supported values: `INTEGER > 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_LOCK_TIME**: Specifies the length of time the account is locked after failed login attempts. Supported values: `NUMERIC >= 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_LIFE_TIME**: Specifies the number of days the current password may be used before a new one is required. Supported values: `NUMERIC >= 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_GRACE_TIME**: Specifies the grace period after a password expires until the user is forced to change their password. Supported values: `NUMERIC >= 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_REUSE_TIME**: Specifies the number of days a user must wait before reusing a password. Supported values: `NUMERIC >= 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_REUSE_MAX**: Specifies the number of password changes that must occur before a password can be reused. Supported values: `INTEGER >= 0`, `DEFAULT`, `UNLIMITED`.
- **PASSWORD_VERIFY_FUNCTION**: Specifies a PL/SQL function for password complexity. Supported values: `function name`, `DEFAULT`, `NULL`.
- **PASSWORD_ALLOW_HASHED**: Specifies whether encrypted passwords are allowed. Supported values: `BOOLEAN TRUE/FALSE`, `DEFAULT`.

#### Notes
- Use `DROP PROFILE` to remove a profile.

#### Examples
- **Creating a Profile with Failed Login Attempts and Lock Time**:
  ```sql
  CREATE PROFILE acctg LIMIT
  FAILED_LOGIN_ATTEMPTS 5
  PASSWORD_LOCK_TIME 1;
  ```
- **Creating a Profile with Password Life Time and Grace Time**:
  ```sql
  CREATE PROFILE sales LIMIT
  PASSWORD_LIFE_TIME 90
  PASSWORD_GRACE_TIME 3;
  ```
- **Creating a Profile with Password Reuse Rules**:
  ```sql
  CREATE PROFILE accts LIMIT
  PASSWORD_REUSE_TIME 180
  PASSWORD_REUSE_MAX 5;
  ```
- **Creating a Profile with a Password Verification Function**:
  ```sql
  CREATE PROFILE resources LIMIT
  PASSWORD_VERIFY_FUNCTION password_rules;
  ```

### See Also
- `DROP PROFILE`

---

### CREATE QUEUE

#### Name
- **CREATE QUEUE**: Creates a queue.

#### Synopsis
- **CREATE QUEUE name QUEUE TABLE queue_table_name [ ( {option_name option_value} [, ...] ) ]**: Defines a new queue.

#### Description
- **CREATE QUEUE** allows a database superuser or a user with the `aq_administrator_role` privilege to create a new queue in the current database.
- If the queue name is schema-qualified, the queue is created in the specified schema. Otherwise, it is created in the current schema.
- A queue must be created in the same schema as the queue table, and the queue name must be unique within the schema.

#### Parameters
- **name**: The name (optionally schema-qualified) of the queue to be created.
- **queue_table_name**: The name of the queue table associated with the new queue.
- **option_name option_value**: The name of any options associated with the new queue and the corresponding value. Duplicate option names will cause an error.

#### Supported Options
- **TYPE**: Specify `normal_queue` or `exception_queue`. An exception queue only accepts dequeue operations.
- **RETRIES**: An `INTEGER` value specifying the maximum number of attempts to process a message.
- **RETRYDELAY**: A `DOUBLE PRECISION` value specifying the delay between retry attempts.
- **RETENTION**: A `DOUBLE PRECISION` value specifying the retention period for messages in the queue.

#### Notes
- Use `DROP QUEUE` to remove a queue.

#### Examples
- **Creating a Normal Queue**:
  ```sql
  CREATE QUEUE my_queue QUEUE TABLE my_queue_table TYPE normal_queue;
  ```
- **Creating an Exception Queue**:
  ```sql
  CREATE QUEUE my_exception_queue QUEUE TABLE my_queue_table TYPE exception_queue;
  ```
- **Creating a Queue with Retries and Retry Delay**:
  ```sql
  CREATE QUEUE my_queue QUEUE TABLE my_queue_table RETRIES 5 RETRYDELAY 30;
  ```

### See Also
- `DROP QUEUE`