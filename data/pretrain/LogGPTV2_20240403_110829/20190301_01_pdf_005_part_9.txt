given the same argument values; it does not do database lookups or otherwise use
information not directly present in its argument list. If you include this clause,
any call of the procedure with all-constant arguments can be immediately
replaced with the procedure value.
[ NOT ] LEAKPROOF
A LEAKPROOF procedure has no side effects, and reveals no information about the
values used to call the procedure.
CALLED ON NULL INPUT
RETURNS NULL ON NULL INPUT
STRICT
CALLED ON NULL INPUT (the default) indicates that the procedure will be called
normally when some of its arguments are NULL. It is the author's responsibility to
check for NULL values if necessary and respond appropriately.
RETURNS NULL ON NULL INPUT or STRICT indicates that the procedure always
returns NULL whenever any of its arguments are NULL. If these clauses are
specified, the procedure is not executed when there are NULL arguments; instead a
NULL result is assumed automatically.
[ EXTERNAL ] SECURITY DEFINER
SECURITY DEFINER specifies that the procedure will execute with the privileges
of the user that created it; this is the default. The key word EXTERNAL is allowed
for SQL conformance, but is optional.
[ EXTERNAL ] SECURITY INVOKER
The SECURITY INVOKER clause indicates that the procedure will execute with the
privileges of the user that calls it. The key word EXTERNAL is allowed for SQL
conformance, but is optional.
AUTHID DEFINER
AUTHID CURRENT_USER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 102
Database Compatibility for Oracle® Developers
Reference Guide
The AUTHID DEFINER clause is a synonym for [EXTERNAL] SECURITY
DEFINER. If the AUTHID clause is omitted or if AUTHID DEFINER is specified,
the rights of the procedure owner are used to determine access privileges to
database objects.
The AUTHID CURRENT_USER clause is a synonym for [EXTERNAL] SECURITY
INVOKER. If AUTHID CURRENT_USER is specified, the rights of the current user
executing the procedure are used to determine access privileges.
PARALLEL { UNSAFE | RESTRICTED | SAFE }
The PARALLEL clause enables the use of parallel sequential scans (parallel mode).
A parallel sequential scan uses multiple workers to scan a relation in parallel
during a query in contrast to a serial sequential scan.
When set to UNSAFE, the procedure cannot be executed in parallel mode. The
presence of such a procedure forces a serial execution plan. This is the default
setting if the PARALLEL clause is omitted.
When set to RESTRICTED, the procedure can be executed in parallel mode, but
the execution is restricted to the parallel group leader. If the qualification for any
particular relation has anything that is parallel restricted, that relation won't be
chosen for parallelism.
When set to SAFE, the procedure can be executed in parallel mode with no
restriction.
COST execution_cost
execution_cost is a positive number giving the estimated execution cost for
the procedure, in units of cpu_operator_cost. If the procedure returns a set,
this is the cost per returned row. Larger values cause the planner to try to avoid
evaluating the function more often than necessary.
ROWS result_rows
result_rows is a positive number giving the estimated number of rows that the
planner should expect the procedure to return. This is only allowed when the
procedure is declared to return a set. The default assumption is 1000 rows.
SET configuration_parameter { TO value | = value | FROM CURRENT }
The SET clause causes the specified configuration parameter to be set to the
specified value when the procedure is entered, and then restored to its prior value
when the procedure exits. SET FROM CURRENT saves the session's current value
of the parameter as the value to be applied when the procedure is entered.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 103
Database Compatibility for Oracle® Developers
Reference Guide
If a SET clause is attached to a procedure, then the effects of a SET LOCAL
command executed inside the procedure for the same variable are restricted to the
procedure; the configuration parameter's prior value is restored at procedure exit.
An ordinary SET command (without LOCAL) overrides the SET clause, much as it
would do for a previous SET LOCAL command, with the effects of such a
command persisting after procedure exit, unless the current transaction is rolled
back.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the procedure as
an autonomous transaction.
Note: The STRICT, LEAKPROOF, PARALLEL, COST, ROWS and SET keywords provide
extended functionality for Advanced Server and are not supported by Oracle.
Note: The IMMUTABLE, STABLE, STRICT, LEAKPROOF, COST, ROWS and PARALLEL {
UNSAFE | RESTRICTED | SAFE }attributes are only supported for EDB SPL
procedures.
Note: By default, stored procedures are created as SECURITY DEFINERS; stored
procedures defined in plpgsql are created as SECURITY INVOKERS.
Examples
The following procedure lists the employees in the emp table:
CREATE OR REPLACE PROCEDURE list_emp
IS
v_empno NUMBER(4);
v_ename VARCHAR2(10);
CURSOR emp_cur IS
SELECT empno, ename FROM emp ORDER BY empno;
BEGIN
OPEN emp_cur;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cur INTO v_empno, v_ename;
EXIT WHEN emp_cur%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
END LOOP;
CLOSE emp_cur;
END;
EXEC list_emp;
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 104
Database Compatibility for Oracle® Developers
Reference Guide
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
The following procedure uses IN OUT and OUT arguments to return an employee‟s
number, name, and job based upon a search using first, the given employee number, and
if that is not found, then using the given name. An anonymous block calls the procedure.
CREATE OR REPLACE PROCEDURE emp_job (
p_empno IN OUT emp.empno%TYPE,
p_ename IN OUT emp.ename%TYPE,
p_job OUT emp.job%TYPE
)
IS
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
BEGIN
SELECT ename, job INTO v_ename, v_job FROM emp WHERE empno = p_empno;
p_ename := v_ename;
p_job := v_job;
DBMS_OUTPUT.PUT_LINE('Found employee # ' || p_empno);
EXCEPTION
WHEN NO_DATA_FOUND THEN
BEGIN
SELECT empno, job INTO v_empno, v_job FROM emp
WHERE ename = p_ename;
p_empno := v_empno;
p_job := v_job;
DBMS_OUTPUT.PUT_LINE('Found employee ' || p_ename);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Could not find an employee with ' ||
'number, ' || p_empno || ' nor name, ' || p_ename);
p_empno := NULL;
p_ename := NULL;
p_job := NULL;
END;
END;
DECLARE
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
BEGIN
v_empno := 0;
v_ename := 'CLARK';
emp_job(v_empno, v_ename, v_job);
DBMS_OUTPUT.PUT_LINE('Employee No: ' || v_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
END;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 105
Database Compatibility for Oracle® Developers
Reference Guide
Found employee CLARK
Employee No: 7782
Name : CLARK
Job : MANAGER
The following example demonstrates using the AUTHID DEFINER and SET clauses in a
procedure declaration. The update_salary procedure conveys the privileges of the
role that defined the procedure to the role that is calling the procedure (while the
procedure executes):
CREATE OR REPLACE PROCEDURE update_salary(id INT, new_salary NUMBER)
SET SEARCH_PATH = 'public' SET WORK_MEM = '1MB'
AUTHID DEFINER IS
BEGIN
UPDATE emp SET salary = new_salary WHERE emp_id = id;
END;
Include the SET clause to set the procedure's search path to public and the work
memory to 1MB. Other procedures, functions and objects will not be affected by these
settings.
In this example, the AUTHID DEFINER clause temporarily grants privileges to a role that
might otherwise not be allowed to execute the statements within the procedure. To
instruct the server to use the privileges associated with the role invoking the procedure,
replace the AUTHID DEFINER clause with the AUTHID CURRENT_USER clause.
See Also
DROP PROCEDURE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 106
Database Compatibility for Oracle® Developers
Reference Guide
2.3.26 CREATE PROFILE
Name
CREATE PROFILE – create a new profile
Synopsis
CREATE PROFILE profile_name
[LIMIT {parameter value} ... ];
Description
CREATE PROFILE creates a new profile. Include the LIMIT clause and one or more
space-delimited parameter/value pairs to specify the rules enforced by Advanced
Server.
Advanced Server creates a default profile named DEFAULT. When you use the CREATE
ROLE command to create a new role, the new role is automatically associated with the
DEFAULT profile. If you upgrade from a previous version of Advanced Server to
Advanced Server 10, the upgrade process will automatically create the roles in the
upgraded version to the DEFAULT profile.
You must be a superuser to use CREATE PROFILE.
Include the LIMIT clause and one or more space-delimited parameter/value pairs to
specify the rules enforced by Advanced Server.
Parameters
profile_name
The name of the profile.
parameter
The password attribute that will be monitored by the rule.
value
The value the parameter must reach before an action is taken by the server.
Advanced Server supports the value shown below for each parameter:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 107
Database Compatibility for Oracle® Developers
Reference Guide
FAILED_LOGIN_ATTEMPTS specifies the number of failed login attempts that a user
may make before the server locks the user out of their account for the length of time
specified by PASSWORD_LOCK_TIME. Supported values are:
 An INTEGER value greater than 0.
 DEFAULT - the value of FAILED_LOGIN_ATTEMPTS specified in the
DEFAULT profile.
 UNLIMITED – the connecting user may make an unlimited number of failed
login attempts.
PASSWORD_LOCK_TIME specifies the length of time that must pass before the server
unlocks an account that has been locked because of FAILED_LOGIN_ATTEMPTS.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LOCK_TIME specified in the DEFAULT
profile.
 UNLIMITED – the account is locked until it is manually unlocked by a
database superuser.
PASSWORD_LIFE_TIME specifies the number of days that the current password may
be used before the user is prompted to provide a new password. Include the
PASSWORD_GRACE_TIME clause when using the PASSWORD_LIFE_TIME clause to
specify the number of days that will pass after the password expires before
connections by the role are rejected. If PASSWORD_GRACE_TIME is not specified, the
password will expire on the day specified by the default value of
PASSWORD_GRACE_TIME, and the user will not be allowed to execute any command
until a new password is provided. Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LIFE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password does not have an expiration date.
PASSWORD_GRACE_TIME specifies the length of the grace period after a password
expires until the user is forced to change their password. When the grace period
expires, a user will be allowed to connect, but will not be allowed to execute any
command until they update their expired password. Supported values are:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 108
Database Compatibility for Oracle® Developers
Reference Guide
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_GRACE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The grace period is infinite.
PASSWORD_REUSE_TIME specifies the number of days a user must wait before re-
using a password. The PASSWORD_REUSE_TIME and PASSWORD_REUSE_MAX
parameters are intended to be used together. If you specify a finite value for one of
these parameters while the other is UNLIMITED, old passwords can never be reused.
If both parameters are set to UNLIMITED there are no restrictions on password reuse.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_REUSE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_REUSE_MAX specifies the number of password changes that must occur
before a password can be reused. The PASSWORD_REUSE_TIME and
PASSWORD_REUSE_MAX parameters are intended to be used together. If you specify a
finite value for one of these parameters while the other is UNLIMITED, old passwords
can never be reused. If both parameters are set to UNLIMITED there are no
restrictions on password reuse. Supported values are:
 An INTEGER value greater than or equal to 0.
 DEFAULT - the value of PASSWORD_REUSE_MAX specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_VERIFY_FUNCTION specifies password complexity. Supported values
are:
 The name of a PL/SQL function.
 DEFAULT - the value of PASSWORD_VERIFY_FUNCTION specified in the
DEFAULT profile.
 NULL
PASSWORD_ALLOW_HASHED specifies whether an encrypted password to be allowed
for use or not. If you specify the value as TRUE, the system allows a user to change
the password by specifying a hash computed encrypted password on the client side.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 109
Database Compatibility for Oracle® Developers
Reference Guide
However, if you specify the value as FALSE, then a password must be specified in a
plain-text form in order to be validated effectively, else an error will be thrown if a
server receives an encrypted password. Supported values are:
 A BOOLEAN value TRUE/ON/YES/1 or FALSE/OFF/NO/0.
 DEFAULT – the value of PASSWORD_ALLOW_HASHED specified in the
DEFAULT profile.
Note: The PASSWORD_ALLOW_HASHED is not an Oracle-compatible parameter.
Notes
Use DROP PROFILE command to remove the profile.
Examples
The following command creates a profile named acctg. The profile specifies that if a
user has not authenticated with the correct password in five attempts, the account will be
locked for one day:
CREATE PROFILE acctg LIMIT
FAILED_LOGIN_ATTEMPTS 5
PASSWORD_LOCK_TIME 1;
The following command creates a profile named sales. The profile specifies that a user
must change their password every 90 days:
CREATE PROFILE sales LIMIT
PASSWORD_LIFE_TIME 90
PASSWORD_GRACE_TIME 3;
If the user has not changed their password before the 90 days specified in the profile has
passed, they will be issued a warning at login. After a grace period of 3 days, their
account will not be allowed to invoke any commands until they change their password.
The following command creates a profile named accts. The profile specifies that a user
cannot re-use a password within 180 days of the last use of the password, and must
change their password at least 5 times before re-using the password:
CREATE PROFILE accts LIMIT
PASSWORD_REUSE_TIME 180
PASSWORD_REUSE_MAX 5;
The following command creates a profile named resources; the profile calls a user-
defined function named password_rules that will verify that the password provided
meets their standards for complexity:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 110
Database Compatibility for Oracle® Developers
Reference Guide
CREATE PROFILE resources LIMIT
PASSWORD_VERIFY_FUNCTION password_rules;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 111
Database Compatibility for Oracle® Developers
Reference Guide
2.3.27 CREATE QUEUE
Advanced Server includes extra syntax (not offered by Oracle) with the CREATE QUEUE
SQL command. This syntax can be used in association with DBMS_AQADM.
Name
CREATE QUEUE – create a queue.
Synopsis
Use CREATE QUEUE to define a new queue:
CREATE QUEUE name QUEUE TABLE queue_table_name [ ( {
option_name option_value} [, ... ] ) ]
where option_name and the corresponding option_value can be:
TYPE [normal_queue | exception_queue]
RETRIES [INTEGER]
RETRYDELAY [DOUBLE PRECISION]
RETENTION [DOUBLE PRECISION]
Description
The CREATE QUEUE command allows a database superuser or any user with the system-
defined aq_administrator_role privilege to create a new queue in the current
database.
If the name of the queue is schema-qualified, the queue is created in the specified
schema. If a schema is not included in the CREATE QUEUE command, the queue is
created in the current schema. A queue may only be created in the schema in which the
queue table resides. The name of the queue must be unique from the name of any other
queue in the same schema.
Use DROP QUEUE to remove a queue.
Parameters
name
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 112
Database Compatibility for Oracle® Developers
Reference Guide
The name (optionally schema-qualified) of the queue to be created.
queue_table_name
The name of the queue table with which this queue is associated.
option_name option_value
The name of any options that will be associated with the new queue, and the
corresponding value for the option. If the call to CREATE QUEUE includes
duplicate option names, the server will return an error. The following values are
supported:
TYPE Specify normal_queue to indicate that the queue is a normal queue, or
exception_queue to indicate that the queue is an exception queue. An
exception queue will only accept dequeue operations.
RETRIES An INTEGER value that specifies the maximum number of attempts to