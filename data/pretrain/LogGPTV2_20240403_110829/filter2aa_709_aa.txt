### Windows Process Injection in 2019
**Authors: Amit Klein, Itzik Kotler  
Institution: SafeBreach Labs**

#### Introduction
Process injection on Windows is a well-documented topic, with numerous techniques available for injecting code from one process to another. Malware often employs these techniques to evade detection and bypass security measures by running malicious logic within legitimate processes. This can help malware perform sensitive operations, such as network access, under the guise of a trusted process.

In late 2018, we undertook a detailed study of process injection in modern Windows environments, focusing on Windows 10 x64 (builds 1803 and later) and 64-bit processes. Our research aimed to address several key issues:

- **Comprehensive List**: There was no single, comprehensive resource listing all known injection techniques.
- **Clarity and Focus**: Many existing texts mix "true" injection techniques with related but distinct methods like process hollowing and stealthy process spawning.
- **Granularity**: Descriptions often combine writing and execution techniques, even when only one aspect is novel.
- **Platform Relevance**: Many techniques were designed for 32-bit processes or older versions of Windows, making their applicability to modern 64-bit systems unclear.
- **Privilege Requirements**: Some techniques require elevated privileges, which are not always feasible or desirable.
- **Security Features**: The impact of new Windows 10 security features, such as Control Flow Guard (CFG) and Code Integrity Guard (CIG), was often overlooked.
- **Proof of Concept (PoC)**: Existing PoCs were often overly complex, making it difficult to isolate and understand the core technique.

This paper addresses these issues by providing a comprehensive catalog of true process injection techniques for 64-bit processes on Windows 10 x64. We categorize each technique into write primitives and execution methods, test them against modern security features, and provide minimalistic PoC code to clearly illustrate each technique. Additionally, we introduce a new injection technique that inherently bypasses CFG.

#### Classes of Injection Techniques
We classify process injection techniques into three main categories:

1. **Process Spawning**: These methods create a new process instance of a legitimate executable binary and modify it before it starts. This approach is noisy and easily detected, making it less stealthy.
2. **Injecting During Process Initialization**: These methods inject code into processes as they start, typically by modifying registry keys or using mechanisms like AppInit DLLs. Such techniques often require User Account Control (UAC) elevation and are mitigated by the Extension Point Disable Policy.
3. **Injecting into Running Processes ("True Process Injection")**: These are the most interesting and relevant techniques, which are the focus of this paper. They involve preparing memory in the target process and executing the injected code.

#### Modern Landscape: Windows 10 x64 and New Security Features
The shift to Windows 10 and the x64 architecture has significantly impacted process injection techniques:

- **x64 Architecture**: In x64, the calling convention places the first four arguments in registers (RCX, RDX, R8, R9), while the rest go on the stack. This makes designing payloads more challenging, as they must control multiple registers.
- **New Security Features**:
  - **Control Flow Guard (CFG)**: This feature checks the validity of indirect call targets, requiring both the caller and callee modules to support CFG.
  - **Dynamic Code Prevention**: Prevents the use of `VirtualAlloc` with `PAGE_EXECUTE_*`, `MapViewOfFile` with `FILE_MAP_EXECUTE`, and `VirtualProtect` with `PAGE_EXECUTE_*`.
  - **Code Integrity Guard (CIG)**: Only allows modules signed by Microsoft, the Microsoft Store, or WHQL to be loaded into the process memory.
  - **Extension Point Disable Policy**: Disables extensions that load DLLs into the process space, such as AppInit DLLs, Winsock LSP, Global Windows Hooks, and IMEs.

#### Defining Our Scope
Our research focuses on true process injection techniques for Windows 10 x64, specifically:

- **Windows 10 x64 (Builds 1803/1809/1903)**
- **64-bit Processes (Injector and Target)**
- **Medium Integrity Level**
- **Target Process Already Running**
- **No Privilege Elevation Required**
- **Evaluation Against Fully Protected or Vanilla Processes**

#### Bypassing Windows Protection Mechanisms
Microsoft provides APIs like `SetProcessValidCallTargets` and `SetProcessMitigationPolicy` to manage security features. However, these APIs have limitations and may not always be effective, especially in newer versions of Windows.

- **SetProcessValidCallTargets**: Allows whitelisting an arbitrary address for CFG.
- **SetProcessMitigationPolicy**: Can turn off certain protections, but this method stopped working in Windows 10 version 1809.

#### Steps in True Process Injection
Typical process injection involves three steps:

1. **Memory Allocation**: Allocate memory in the target process.
2. **Memory Writing**: Write the payload to the allocated memory.
3. **Execution**: Execute the injected code.

#### Evaluation Criteria
We evaluate memory write primitives and execution methods based on:

- **Prerequisites**
- **Limitations**
- **CFG/CIG-readiness**
- **Control over Registers**
- **Cleanup Required**

#### A Note on Memory Allocation
Memory allocation can be done in two ways:

1. **Using VirtualAllocEx**: Allocate new memory in the target process.
2. **Overwriting Existing Memory**: Use the stack, data sections of DLLs, or heap memory.

#### Survey and Analysis of Injection Techniques

##### Notation
- **Standard Microsoft Visual Studio coloring scheme**
- **Bold+Italics**: User parameters (e.g., `payload`, `target_payload`, `process_id`, `thread_id`)
- **Bold (ntdll!NtXXX or ntdll!ZwXXX)**: Dynamically linked functions
- **Yellow Background**: Cleanup code

##### Techniques (in chronological order, where known):

1. **Classic WriteProcessMemory Write Primitive**
   - **Description**: Allocate memory and write data using `WriteProcessMemory`.
   - **Code**:
     ```c
     HANDLE h = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_OPERATION, FALSE, process_id);
     LPVOID target_payload = VirtualAllocEx(h, NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
     WriteProcessMemory(h, target_payload, payload, sizeof(payload), NULL);
     ```
   - **Evaluation**:
     - **Prerequisites**: None
     - **Limitations**: None
     - **CFG/CIG-readiness**: Not affected
     - **Controlled vs. Uncontrolled Write Address**: Fully controlled
     - **Stability**: Stable

2. **Classic DLL Injection Execution Method**
   - **Description**: Write a malicious DLL to disk, inject its path, and execute it using `CreateRemoteThread`.
   - **Code**:
     ```c
     HANDLE h = OpenProcess(PROCESS_CREATE_THREAD, FALSE, process_id);
     CreateRemoteThread(h, NULL, 0, (LPTHREAD_START_ROUTINE)LoadLibraryA, target_DLL_path, 0, NULL);
     ```
   - **Evaluation**:
     - **Prerequisites**: Malicious DLL, memory write primitive, thread in alertable state (if using APC)
     - **Limitations**: DllMain runs with loader-lock, imposing restrictions
     - **CFG/CIG-readiness**: CIG prevents loading non-Microsoft-signed DLLs
     - **Control over Registers**: None (typically not a problem due to linking)
     - **Cleanup Required**: None

3. **CreateRemoteThread Execution Method**
   - **Description**: Write raw code to memory and execute it using `CreateRemoteThread`.
   - **Code**:
     ```c
     HANDLE h = OpenProcess(PROCESS_CREATE_THREAD, FALSE, process_id);
     CreateRemoteThread(h, NULL, 0, (LPTHREAD_START_ROUTINE)target_execution, RCX, 0, NULL);
     ```
   - **Evaluation**:
     - **Prerequisites**: Target address must be RX
     - **Limitations**: None
     - **CFG/CIG-readiness**: Target entry point must be CFG-valid
     - **Control over Registers**: RCX
     - **Cleanup Required**: None

4. **APC Execution Method**
   - **Description**: Write raw code to memory and execute it using `QueueUserAPC` or `NtQueueApcThread` (thread must be in alertable state).
   - **Code**:
     ```c
     HANDLE h = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
     QueueUserAPC((LPTHREAD_START_ROUTINE)target_execution, h, RCX);
     ```
   - **Evaluation**:
     - **Prerequisites**: Target address must be RX, thread in alertable state
     - **Limitations**: None
     - **CFG/CIG-readiness**: Target entry point must be CFG-valid
     - **Control over Registers**: RCX (and RDX, R8 if using `NtQueueApcThread`)
     - **Cleanup Required**: None

5. **Thread Execution Hijacking (Suspend-Inject-Resume)**
   - **Description**: Suspend the target thread, inject code, and resume execution.
   - **Code**:
     ```c
     HANDLE t = OpenThread(THREAD_SET_CONTEXT, FALSE, thread_id);
     SuspendThread(t);
     CONTEXT ctx;
     ctx.ContextFlags = CONTEXT_CONTROL;
     ctx.Rip = (DWORD64)target_execution;
     SetThreadContext(t, &ctx);
     ResumeThread(t);
     ```
   - **Evaluation**:
     - **Prerequisites**: Execution target must be RX
     - **Limitations**: None
     - **CFG/CIG-readiness**: RSP must be within stack limits
     - **Control over Registers**: Volatile registers (RAX, RCX, RDX, R8-R11) may be ignored in some processes
     - **Cleanup Required**: Yes, original thread context must be restored

#### Conclusion
This paper provides a comprehensive and structured overview of process injection techniques for Windows 10 x64, addressing the gaps and complexities in existing literature. By categorizing and evaluating these techniques, we aim to offer a clear and practical guide for researchers and security professionals.