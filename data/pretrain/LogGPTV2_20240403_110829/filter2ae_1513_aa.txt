翻译自：  
翻译：聂心明
# 可预测的伪随机数发生器
漏洞特征：PREDICTABLE_RANDOM  
在某些关键的安全环境中使用可预测的随机数可能会导致漏洞，比如，当这个值被作为：
  * csrf token；如果攻击者可以预测csrf的token值的话，就可以发动csrf攻击 
  * 重置密码的token（通过邮件发送）；如果重置密码的token被替换的话，那么就会导致用户账户被接管，因为攻击者会猜测到重置密码的链接。 
  * 其他包含秘密的信息 
修复这个漏洞最快的方式是用强随机数生成器（ 比如：`java.security.SecureRandom` ）替换掉  
`java.util.Random`
有漏洞的代码：
    String generateSecretToken() {
        Random r = new Random();
        return Long.toHexString(r.nextLong());
    }
解决方案
    import org.apache.commons.codec.binary.Hex;
    String generateSecretToken() {
        SecureRandom secRandom = new SecureRandom();
        byte[] result = new byte[32];
        secRandom.nextBytes(result);
        return Hex.encodeHexString(result);
    }
引用：
[Cracking Random Number Generators - Part 1
(http://jazzy.id.au)](http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html)  
[CERT: MSC02-J. Generate strong random
numbers](https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers)  
[CWE-330: Use of Insufficiently Random Values
](http://cwe.mitre.org/data/definitions/330.html)  
[Predicting Struts CSRF Token (Example of real-life vulnerability and
exploitation)](http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html)
# 可预测的伪随机数发生器（Scala）
漏洞特征：PREDICTABLE_RANDOM_SCALA  
在某些关键的安全环境中使用可预测的随机数可能会导致漏洞，比如，当这个值被作为：
  * csrf token；如果攻击者可以预测csrf的token值的话，就可以发动csrf攻击 
  * 重置密码的token（通过邮件发送）；如果重置密码的token被替换的话，那么就会导致用户账户被接管，因为攻击者会猜测到重置密码的链接。 
  * 其他包含秘密的信息 
修复这个漏洞最快的方式是用强随机数生成器（ 比如：`java.security.SecureRandom` ）替换掉  
`java.util.Random`  
有漏洞的代码：
    import scala.util.Random
    def generateSecretToken() {
        val result = Seq.fill(16)(Random.nextInt)
        return result.map("%02x" format _).mkString
    }
解决方案：
    import java.security.SecureRandom
    def generateSecretToken() {
        val rand = new SecureRandom()
        val value = Array.ofDim[Byte](16)
        rand.nextBytes(value)
        return value.map("%02x" format _).mkString
    }
[Cracking Random Number Generators - Part 1
(http://jazzy.id.au)](http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html)  
[CERT: MSC02-J. Generate strong random
numbers](https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers)  
[CWE-330: Use of Insufficiently Random Values
](http://cwe.mitre.org/data/definitions/330.html)  
[Predicting Struts CSRF Token (Example of real-life vulnerability and
exploitation)](http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html)
# 没有做任何安全检查的servlet 参数
漏洞特征：SERVLET_PARAMETER  
Servlet 会从各种函数中获取到GET和POST的值。这些被获取的值肯定是不安全的。在进入到敏感的api函数之前你可能需要验证和过滤这些值：
  * sql 查询 （可能导致sql注入） 
  * 文件操作 （ 可能会导致目录穿越 ） 
  * 命令执行 （ 可能会导致命令注入 ） 
  * html解析 （可能会导致xss) 
  * 其他的 
引用：  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 没有做任何安全检查Content-Type 头
漏洞特征：SERVLET_CONTENT_TYPE  
服务器端程序通过客户端收集http的Content-Type的值。这个值可能会影响影响应用的安全性
引用：  
[CWE-807: Untrusted Inputs in a Security
Decision](http://cwe.mitre.org/data/definitions/807.html)
# 没有做任何安全检查Hostname 头
漏洞特征： SERVLET_SERVER_NAME  
服务器端程序通过客户端收集http的hostname
的值。这个值可能会影响影响应用的安全性。`ServletRequest.getServerName()`和
`HttpServletRequest.getHeader("Host")`的行为很相似，都是从http头部中获取到host的值
    GET /testpage HTTP/1.1
    Host: www.example.com
    [...]
默认情况下，web容器可能会直接将请求重定向到你的应用程序中。这就允许用户把恶意的请求放入http的host头中。我建议你不要信任来自客户端的任何输入。
引用：  
[CWE-807: Untrusted Inputs in a Security
Decision](http://cwe.mitre.org/data/definitions/807.html)
# 没有做任何安全检查的session cookie值
漏洞特征： SERVLET_SESSION_ID  
`HttpServletRequest.getRequestedSessionId()` (
)
)函数返回cookie中JSESSIONID的值。这个值通常被session 管理器访问，而不是开发者代码。  
传递给客户端的值通常是字母数字（ 例如：JSESSIONID=jp6q31lq2myn
），无论如何，这个值可以被客户端改变，下面的http请求展示了潜在的危险
    GET /somePage HTTP/1.1
    Host: yourwebsite.com
    User-Agent: Mozilla/5.0
    Cookie: JSESSIONID=Any value of the user's choice!!??'''">
像这样，JSESSIONID应该仅被使用判断是否与存在的session ID相匹配，如果不存在对应的session
ID，那么这个用户就可能会是未授权用户。此外， session
ID的值应该从来不被记录，如果记录了，那么日志文件中就会包含有效的且在激活状态的session
IDs，这样就会允许内部员工可以通过日志记录来劫持任意在线用户。
引用：
[OWASP: Session Management Cheat
Sheet](https://www.owasp.org/index.php/Session_Management_Cheat_Sheet)  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 没有做任何安全检查的查询字符串
漏洞特征： SERVLET_QUERY_STRING  
查询字符串是get请求中参数名和参数值的串联，可以传入预期之外的参数。 比如URL请求：/app/servlet.htm?a=1&b=2
，查询字符串就是a=1&b=2  
通过函数 HttpServletRequest.getParameter() 接收每一个传递进来的参数的值，通过
HttpServletRequest.getQueryString()
这个函数获取到的值应该被看做不安全的。你应该在查询字符串进入敏感函数之前去充分的效验和过滤它们。
引用：  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 没有做任何安全检查的HTTP头
漏洞特征：SERVLET_HEADER  
http请求头很容易会被用户所修改。通常，不要假想请求来自于没有被黑客修改的常规浏览器。我建议你，不要相信客户端传递进来的http头部值
引用：  
[CWE-807: Untrusted Inputs in a Security
Decision](http://cwe.mitre.org/data/definitions/807.html)
# 没有做任何安全检查的Referer值
漏洞特征：SERVLET_HEADER_REFERER  
行为：
  * 如果请求来自于恶意用户，那么Referer的值会是任意的情况。 
  * 如果请求来自于另一个安全的源（https），那么Referer头就是空的。 
建议：
  * 访问控制不应该基于此标头的值。 
  * csrf保护不应该仅基于此值。（ [因为这个选项](http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14) ） 
引用：  
[CWE-807: Untrusted Inputs in a Security
Decision](http://cwe.mitre.org/data/definitions/807.html)
# 没有做任何安全检查的User-Agent值
漏洞特征： SERVLET_HEADER_USER_AGENT  
"User-Agent" 很容易被客户端伪造，不建议基于不同的User-Agent（比如爬虫的UA）来适配不同的行为。
引用：  
[CWE-807: Untrusted Inputs in a Security
Decision](http://cwe.mitre.org/data/definitions/807.html)
# 潜在的cookie中包含敏感数据
漏洞特征： COOKIE_USAGE  
存储在客户端中cookie的数据不应该包含敏感数据或者与session相关的数据。大多数情况下，敏感数据应该仅仅存储在session中，并且通过通过用户的session值去访问。详细请看HttpSession
(HttpServletRequest.getSession())  
客户端cookie应该是比特定会话维持时间更长且独立于特殊会话
引用：  
[CWE-315: Cleartext Storage of Sensitive Information in a
Cookie](http://cwe.mitre.org/data/definitions/315.html)
# 潜在的路径穿越（文件读取）
漏洞特征：PATH_TRAVERSAL_IN  
一个文件被打开，然后读取文件内容，这个文件名来自于一个输入的参数。如果没有过滤这个传入的参数，那么本地文件系统中任意文件都会被读取。  
这个规则识别潜在的路径穿越漏洞。在许多场景中，用户无法控制文件路径，如果有工具报告了这个问题，那么这个就是误报  
有漏洞代码：
    @GET
    @Path("/images/{image}")
    @Produces("images/*")
    public Response getImage(@javax.ws.rs.PathParam("image") String image) {
        File file = new File("resources/images/", image); //Weak point
        if (!file.exists()) {
            return Response.status(Status.NOT_FOUND).build();
        }
        return Response.ok().entity(new FileInputStream(file)).build();
    }
解决方案：
    import org.apache.commons.io.FilenameUtils;
    @GET
    @Path("/images/{image}")
    @Produces("images/*")
    public Response getImage(@javax.ws.rs.PathParam("image") String image) {
        File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix
        if (!file.exists()) {
            return Response.status(Status.NOT_FOUND).build();
        }
        return Response.ok().entity(new FileInputStream(file)).build();
    }
引用：  
[WASC: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  