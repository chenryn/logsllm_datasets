title:ORIGEN: Automatic Extraction of Offset-Revealing Instructions for
Cross-Version Memory Analysis
author:Qian Feng and
Aravind Prakash and
Minghua Wang and
Curtis Carmony and
Heng Yin
Origen: Automatic Extraction of Offset-Revealing
Instructions for Cross-Version Memory Analysis
Qian Feng†
Aravind Prakash♦
Minghua Wang†$
Curtis Carmony†
Heng Yin†
†Department of EECS, Syracuse University, USA
♦Computer Science Department, Binghamton University
†{qifeng,ccarmony,heyin}@syr.edu ♦PI:EMAIL $PI:EMAIL
$Baidu Security Lab, Baidu Inc.
ABSTRACT
Semantic gap is a prominent problem in raw memory anal-
ysis, especially in Virtual Machine Introspection (VMI) and
memory forensics. For COTS software, common memory
forensics and VMI tools rely on the so-called “data struc-
ture proﬁles” – a mapping between the semantic variables
and their relative oﬀsets within the structure in the binary.
Construction of such proﬁles requires the expert knowledge
about the internal working of a speciﬁed software version.
At most time, it requires considerable manual eﬀorts, which
often turns out to be a cumbersome process. In this paper,
we propose a notion named “cross-version memory analy-
sis”, wherein our goal is to alleviate the process of proﬁle
construction for new versions of a software by transferring
the knowledge from the model that has already been trained
on its old version. To this end, we ﬁrst identify such Oﬀset
Revealing Instructions (ORI) in a given software and then
leverage the code search techniques to label ORIs in an un-
known version of the same software. With labeled ORIs, we
can localize the proﬁle for the new version. We provide a
proof-of-concept implementation called ORIGEN. The eﬃ-
cacy and eﬃciency of ORIGEN have been empirically ver-
iﬁed by a number of softwares. The experimental results
show that by conducting the ORI search within Windows
XP SP0 and Linux 3.5.0, we can successfully recover data
structure proﬁles for Windows XP SP2, Vista, Win 7, and
Linux 2.6.32, 3.8.0, 3.13.0, respectively. The systematical
evaluation on 40 versions of OpenSSH demonstrates ORI-
GEN can achieve a precision of more than 90%. As a case
study, we integrate ORIGEN into a VMI tool to automati-
cally extract semantic information required for VMI. We de-
velop two plugins to the Volatility memory forensic frame-
work, one for OpenSSH session key extraction, the other
for encrypted ﬁlesystem key extraction. Both of them can
achieve the cross-version analysis by ORIGEN.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897850
1.
INTRODUCTION
Memory analysis aims at extracting security-critical infor-
mation from a memory snapshot of a running system or a
program. It has many security applications, such as virtual
machine introspection [16], malware detection and analy-
sis [21], game hacking [3], digital forensics [12,38], etc. Most
of these applications require retrieving desired information
from a memory snapshot of a running software or system,
so we refer to them as memory analysis tools in general.
For all these memory analysis applications, we need to
have the precise knowledge about data structures that are
relevant to the speciﬁc analysis purpose. Most of existing
memory analysis tools usually build a data structure proﬁle,
i.e. a mapping between data structures to their oﬀsets in the
target binary, to derive analysis decisions. The data struc-
ture proﬁle is constructed to incorporate precise knowledge
about data structures. For instance, we may build a precise
data structure proﬁle about the oﬀset values of important
ﬁelds, such as the process name, process ID, and the pointer
to the next EPROCESS structure, in the EPROCESS data struc-
ture in order to retrieve running processes from a memory
snapshot for Windows OS.
The creation and maintenance of the data structure proﬁle
is a nontrivial problem, especially for COTS binaries.
It
requires the expert knowledge about the internal working of
the target software. Existing work, such as Volatility [38],
VMST [13] and Virtuoso [9], have made a big progress on
automatic introspection code generation. Their techniques
work well when the target software is open-source [9, 38], or
when the well-deﬁned code pieces are provided, which can
be reused for introspection [13].
For COTS software, however, existing memory analysis
tools still rely on cumbersome reverse engineering techniques
to build the proﬁle. In most cases, the proﬁle generation still
depends on the manual eﬀort. Unfortunately, the daunting
proﬁle creation task is not a one-time eﬀort.
It is tightly
coupled to the speciﬁc version of the software being ana-
lyzed, and needs to be constantly rebuilt for new versions
of the software. As a result, the eﬀort spent on building
the analysis proﬁle for one particular version of a program
could not be applicable to its future versions. For exam-
ple, a memory analysis tool, such as Volatility [38], has to
create a proﬁle for every version of a COTS software to be
analyzed. Once the version is changed, the proﬁle has to be
manually updated for the exact same software so that the
analysis can proceed correctly.
Figure 1: The OpenSSH example. It shows code snippets to retrieve the session key for openssh in two
versions. Oﬀset-Revealing Instructions (ORIs) are highlighted in both versions. Given the abstract proﬁle,
the proﬁle localization determines the oﬀsets from the identiﬁed ORIs and produces a localized proﬁle for
each version.
In this paper, we propose a novel notion of “cross-version
memory analysis”. That is, the data structure proﬁle used in
one version can be adapted to other versions of the same soft-
ware without manual eﬀorts. With the cross-version mem-
ory analysis property, we can automatically build proﬁles
for new versions of a software by transferring the knowledge
from the proﬁle that has already been trained for its old
version. Our intuition is that adjacent versions of the same
software tend to be similar. The experimental results in
Section 6.2 substantiate this claim. Based on this idea, we
can transfer the relevant knowledge from an already trained
proﬁle to build the proﬁle for an unseen new version. The
less diﬀerent a new version is from the previous version, the
more accurately the proﬁle can proceed the analysis .
To achieve the cross-version memory analysis, we combine
program analysis and code searching techniques to automat-
ically transfer the data structure proﬁle across diﬀerent ver-
sions of a software. We observed that some instructions, at
the binary level, reveal the actual oﬀsets (as constant values)
for the speciﬁed data structure ﬁelds and global variables,
as these oﬀsets have been statically determined at compile
time. We name these instructions “oﬀset-revealing instruc-
tions” (in short, ORI). Given a trained proﬁle on one version,
we label ORIs in the binary of this version by program anal-
ysis techniques. With the knowledge of learned ORIs in this
version, we can identify semantically-equivalent ORIs in its
new versions by the code searching technique, and localize
the introspection proﬁle by updating oﬀset values for corre-
spondent data structure ﬁelds based on identiﬁed ORIs.
We have developed a prototype system called ORIGEN
and evaluated its capability on a number of software fam-
ilies including Windows OS kernel, Linux OS kernel, and
OpenSSH. Particularly, we systematically evaluate it on 40
versions of OpenSSH, released between 2002 and 2015. The
experimental results show that ORIGEN can achieve a pre-
cision of about 90% by transferring relevant knowledge in
the proﬁle of a diﬀerent version automatically. The results
suggest that ORIGEN advances the existing memory anal-
ysis methods by reducing the manual eﬀorts while maintain-
ing the reasonable accuracy. We further have developed two
plugins to the Volatility memory forensic framework [38] and
integrated them in ORIGEN, one for OpenSSH session key
extraction, and the other for encrypted ﬁlesystem key ex-
traction. We show that each of the two plugins can construct
a localized proﬁle and then can perform speciﬁed memory
forensic tasks on the same memory dump, without the need
of manual eﬀort in creating the corresponding proﬁle.
Certainly, we admit that ORIGEN may not work when
our assumption does not hold, i.e. when a software version
is signiﬁcantly diﬀerent from the base version on which the
ORI signatures are generated. For these cases, we can gen-
erate a new proﬁle to cover its ORI signatures and apply to
many other similar versions. Nevertheless, ORIGEN intro-
duces a promising solution for cross-version memory analy-
sis and demonstrates an empirically validated approach to
greatly reducing the manual eﬀort for proﬁle creation. The
research along this direction is important because it could
streamline the memory analysis process, with minimal man-
ual intervention required.
In summary, the contribution of this paper is threefold:
• we propose a novel notion of cross-version memory
analysis. We made the ﬁrst attempt to conduct the
OpenSSH6.4OpenSSH6.5Older Versions0808A8B0    sub_808A8B0     proc near           0808A8B3                 0808A8B6                0808A8B9                0808A8BB                 0808A8BD                0808A8C3                 0808A8C9                                  0808A8DA               0808A8DF    loc_808A8DF:                            0808A8DF    mov     eax, ds:dword 80C3530 -- ORI0808A8E4     mov     eax, [eax+224h]  -----ORI0808A8EB    retn0808A8EB    sub_808A8B0     endpsub     esp, 18hmov   eax, [ebp+dest]test     eax, eaxjz       short loc_808A8DFmov    edx, ds:dword_80C3530 --ORIlea       ecx, [edx+204h]     ----ORImov    edx, [edx+224h]     ----ORI...  call    _memcpy 000452E0         sub_452E0       proc near         000452E4                000452E7                  000452EA                 000452EF                  000452F5               000452F7                  000452F9                 000452FF                  00045305                                00045316                   0004531B         loc_4531B:                              0004531B         mov     eax, ds:(dword AD1D0 - 0AB910h)[ebx]  ---ORI 00045321          mov     eax, [eax+324h]    -------- ORI 0004532C         retn 0004532C         sub_452E0       endpsub     esp, 14hmov   eax, [ebp+arg_0]call    sub_7837add    ebx, 66621htest     eax, eaxjz        short loc_4531Bmov    esi, ds:(dword  AD1D0 - 0AB910h)[ebx] --ORIlea      ecx, [esi+304h]    ------ORImov    esi, [esi+324h]    ------ORI...  call    _memcpyORIGENinputORIGENsession_state:{ssh1_key: [0x304, [u_int64_t[]]],ssh1_keylen:[0x324, [u_int32_t]]} ;global:{active_state:[0xAD1D0, [pointer, session_state]]}session_state:{ssh1_key: [0x204, u_int64_t[]],ssh1_keylen:[0x224, u_int32_t]} ;global:{active_state:[0x80C3530, [pointer, session_state]]}outputinputinputinputoutputNewer Versionssession_state :{ssh1_key: [u_int64_t],ssh1_keylen: [u_int32_t]};global:{active_state:[pointer, session_state]};Figure 2: The overview of ORIGEN
memory analysis across diﬀerent versions of the soft-
ware. Our study demonstrates that the across-version
memory analysis can be achieved with a minimal or
reduced human intervention.
• we developed a prototype system ORIGEN, which
combines the program analysis and code search tech-
nique to address the new problem domain.
• we systematically evaluated the accuracy of ORIGEN
under 40 versions of the OpenSSH family, and the eval-
uation results show that ORIGEN can achieve a pre-
cision of more than 90%. The case studies also demon-
strate ORIGEN can successfully recover the oﬀsets for
key semantic ﬁelds across diﬀerent versions of OpenSSH,
Windows, Linux, a loadable kernel module for Linux.
2. OVERVIEW
We utilize a running example in Figure 1 to demonstrate
our problem. Although we target at the memory analysis for
the COTS software, for clarity, we utilize the open-source
software OpenSSH to demonstrate our basic idea. Figure 1
shows code snippets for two versions of OpenSSH (6.4 and
6.5), where several highlighted instructions are used to ac-
cess ssh1_key and ssh1_keylen ﬁelds in the structure of
session_state, and a global variable active_state, which
points to the structure session_state. The constant val-
ues carried by these instructions indicate the exact oﬀsets
of these ﬁelds inside the data structure. Therefore, these
highlighted instructions are ORIs.
In this case, there are three symbols shared by OpenSSH
(6.4 and 6.5). We utilize the abstract proﬁle to denote these
common symbols. Given this abstract proﬁle, we develop
an SSH key extraction tool that can locate encryption keys
for active SSH sessions in a memory snapshot in the cross-
version manner. ORIGEN will automatically identify ORIs
in OpenSSH6.4, and transfer the proﬁle for OpenSSH6.4 to
a localized proﬁle for OpenSSH6.5 based on identiﬁed ORIs
in the older version. Using this localized proﬁle, the SSH
key extraction can immediately work for OpenSSH6.5, with-
out any code modiﬁcation. This demonstrates the nature of
cross-version memory analysis for ORIGEN.
Problem Statement.
In this paper, we aim to achieve the cross-version memory
analysis. That is, we can automatically generate proﬁles for
new versions of a software by transferring the knowledge
from the model that has already been trained on its old
version. Given an abstract proﬁle that a memory analysis
tool relies on and a base version of target software, ORIGEN
locates ORIs in the base version and searches these ORIs in
the target version. With newly identiﬁed ORIs in the target
version, we can localize the proﬁle for the new version.
More speciﬁcally, when provided a diﬀerent version of the
same software, we aim to achieve the following goals: 1)
identify instructions that are semantically equivalent to the
ORIs identiﬁed from the base version; 2) extract the oﬀsets
from these instructions; 3) generate a localized proﬁle for
the new software version. In summary the challenge is to
ﬁnd ORIs in the target program of a given base version.
If we have the source code for the program to be analyzed,
a straightforward way would be to use the compiler tool-
chain to output such information directly while the compiler
generates the binary code. In many cases, the source code
is often not available (e.g., VMI for Microsoft Windows).
Therefore, we need to develop a binary analysis technique
to extract this information from binary code.
System Overview.
Figure 2 illustrates an overview of our solution. It involves
the ORI labeling and the proﬁle localization.
In general, ORI labeling takes a base binary as the in-
put, and performs dynamic and static analysis to ﬁnally
output all labeled ORIs in the base binary. Proﬁle localiza-
tion searches a target binary for the instructions that are
semantically equivalent to labeled ORIs in the base binary,
and localize the proﬁle for the target binary. The details
will be discussed in latter sections.
3. ORI SIGNATURE GENERATION
3.1 ORI Signature Deﬁnition
An ORI is an instruction that has a constant ﬁeld that
reveals the oﬀset of a ﬁeld in the data structure deﬁnition,
or the location of a global variable within the data section.
The deﬁnition is as follows:
Deﬁnition 1. Oﬀset Revealing Instruction (ORI) is a
tuple of (p, c, t, f ), where p is the program counter, c is the
constant ﬁeld within the instruction, t indicates the data
structure type, and f denotes the ﬁeld name within the data
v4 v5v6v4Dynamic LabelingStatic RefinementORI Searchingvotingv5v6v1v3v2COTSCOTSProfilesORI GenerationProfile LocalizationFigure 3: The demo of the session state object tracing log.
structure deﬁnition. For a global variable, t is “data section”,
and f is the name of the global variable.
3.2 ORI Labeling
In this section, we describe how we label ORIs in a binary
It can be
and generate signatures for the labeled ORIs.
considered as a learning stage. At this stage, we attempt to
learn ORI signatures which will be used for latter version-
independent memory analysis.
ORIs for Global Variables.
It is straightforward to identify ORIs for global variables.
Once the exact location is determined for a global variable
in the base version, we can simply scan the binary code
to identify all the instructions that refer to this location.
The location for a global variable often has a distinct value,
because it is located in the data section of the binary module.
For the running example, we can see that active_state is a
global variable and we can ﬁnd its address 0x80C3530 from
the debug symbol. Through scanning in the binary, we can
label the 0x808ABD as an ORI directly.