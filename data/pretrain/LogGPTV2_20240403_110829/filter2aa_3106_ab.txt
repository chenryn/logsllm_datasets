for each of remaining segment registers DS, ES, FS,
GS and SS.
• TR parameter. The task register TR refers to a
segment, so similarly to segment registers above,
it consists of segment selector, and segment limit
attributes, represented the selector and limit of the
TSS segment, respectively.
Note that unlike segment registers, we do not con-
sider the segment base as an attribute of TR, be-
cause the TSS can locate anywhere in the memory,
thus its base does not represent the OS character.
Our experiments with various OS-es conﬁrm this
fact.
• GDT parameter: The GDT can be located by the
its base and limit. However, similar to TR above, we
ignore the GDT base, and simplify this parameter
by having the limit as its only attribute.
• IDT parameter: Similarly to GDT, the IDT param-
eter has IDT limit as its only attribute.
3
• Feature parameters: we consider each of the fol-
lowing OS features a feature parameter: 64-bit (re-
ﬂecting that the OS is 64-bit1), fast-syscall (reﬂect-
ing that the OS uses fast-syscall facility), and NX
(reﬂecting that the OS uses non-executable facility).
When present, these parameters reﬂect that the cor-
responding facilities are supported by the OS.
All these OS parameters of each guest VM can be re-
trieved from the VM’s context, thanks to the interface
provided by the hypervisor, usually come in the shape of
some APIs. These APIs can be executed from the host
VM.
3.3
UFO Fingerprinting Method
We observe that to some extent, the protected mode of In-
tel platform enforces no constraint on how the OS is im-
plemented, so the developers can freely design their OS
to their desire. Our UFO method relies on the fact that
most, if not all, modern OS-es spend very little time in
real-mode after booting up, then they all quickly switch
to protected mode, and mostly stay in this mode until
shutdown. After entering the protected mode, each OS
has different way to setup its low level facilities, such
as GDT and IDT table, how it uses its registers, and
whether or not it supports modern features like 64-bit,
fast-syscall, and NX. Indeed, we can see that the limits
of GDT and IDT tables, the value of segment registers
and special registers, like TR, are signiﬁcantly different
between OS variants, and sometimes even between ver-
sions of the same OS. On the other words, each OS has
different OS parameters, deﬁned above.
Below are several cases on how some OS-es setup
their OS parameters:
• Windows OS uses a GDT with the limit of 0x3FF,
while Linux 2.6 kernel has a GDT’s limit of 0xFF.
Minix setups its IDT’s limit of 0x3BF, but Plan9’s
IDT has the limit of 0x7FF.
• Sun Solaris uses selectors 0x158 and 0x16B for
its ring 0 and ring 3 code segments, respectively.
Meanwhile, Haiku uses selectors 0x8 and 0x1B for
its ring 0 and ring 3 code segments.
• The 32-bit version of OpenBSD does not use the
full address range for data segment like other OS-
es, but dedicates the last part of 4GB address space
for trapping security exploitation in W-xor-X tech-
nique. Therefore, its data segment of ring 3, rep-
resented by DS3 parameter, has the limit of 0xCF-
BFDFFF, rather than usual 0xFFFFFFFF.
1Without this feature, the OS is in 32-bit mode
• Neither NetBSD nor FreeBSD uses fast-syscall fea-
ture. Meanwhile Linux started to use that from 2.6
kernel version, and Windows only started to take
advantage of this feature from Windows XP.
• Windows only started to use NX feature from XP-
SP2. All the prior versions did not take advantage
of this modern facility.
The list of examples can go on, and it shows that the
OS parameters can represent an OS. Based on these de-
viation of the OS parameters, we can recognize the OS
variants, and even exact OS versions in various cases.
Because the OS parameters can identify the OS, we con-
sider the set of all parameters of an OS its OS signature,
or signature in short.
To perform ﬁngerprinting, we have to prepare signa-
tures for all the OS-es we want to identify. We generate
a signature for each OS, and put them into a database of
signatures, called signature database. Then at run-time,
we retrieve the OS parameters from the target VM, using
hypervisor API discussed above, and match them against
each signature in the signature database, as followings:
we match each VM parameter against a corresponding
parameter in the signature. One OS parameter matches
the corresponding signature parameter if all of their at-
tributes match each other.
A special case must be handled regarding the segment
parameters: for each segment parameter, the correspond-
ing signature parameter is the segment parameter of the
ring level that the VM segment parameter is functioning
in. For example, with code segment parameter CS, if the
VM is operating in ring 0 at the time the OS parameters
are retrieved, we have to match it against the CS0 param-
eter in the OS signature. To be matched, all attributes (ie.
segment selector, segment base and segment limit) of the
VM’s CS parameter must match with corresponding at-
tributes of CS0 parameter in the signature.
Regarding the feature parameters (64-bit, fast-syscall
and NX) of the VM, a parameter is considered matched
if it contains the list of features of the signature.
Ideally, the ﬁngerprinting process would return the ex-
act OS as the result. However, in fact we might not al-
ways ﬁnd the deﬁnite answer, either due to missing sig-
nature of the related OS, or the OS has some special
customizations deviating its parameters from its signa-
ture. To deal with this problem, we propose a fuzzy ﬁn-
gerprinting method: for each VM parameter matching
the corresponding parameter in a signature, we give it 1
point. Otherwise, we give it 0 point.
We conclude the matching process for each signature
by summing up all the points, and consider that the score
of this signature. We repeat the matching with all the
signatures in the database, and the signatures having the
4
highest score will be reported as the potential OS of the
VM.
We can see that in case we have the exact signature
of the VM, UFO will ﬁnd that and report it as the 100%
matched signature, thus identify the 100% correct OS,
corresponding to that signature. More than one signature
that has 100% match score is possible, and all will be
reported.
In case the OS signature is either unavailable, or the
OS is customized to a particular extent, so that its signa-
ture is not 100% matched any more, this fuzzy matching
method can give a good guess on the OS by reporting the
best matched OS-es with highest scores.
The design of UFO solves the outstanding problems of
current OSF methods, and satisfy all of our six require-
ments proposed in section 2 above: (1) UFO can give
a very accurate answer on the VM’s OS. Experiments
shows that UFO always report the OS variant correctly.
The OS is also identiﬁed with details on OS version. (2)
We never rely on the content of OS code to recognize
the OS, so our method is independent of the compiler us-
ing to compile the OS. (3) Normal OS tweaking does not
change how OS uses its OS parameters, and in general,
OS has no option to affect their values, either. (4) Typ-
ically OS has no option to change the way it setups the
low level facilities such as OS parameters. Consequently,
while it is not impossible to modify these parameters, it is
not trivial to fool UFO. Indeed, all the available anti-OSF
solution do not work against UFO. (5) Because it takes
a very little time to retrieve OS parameters from the VM
and match them against the signature database, UFO is
extremely fast. Moreover, we never create any network
trafﬁc like in network-based OSF approach, thus avoid-
ing the possible problem of wasting the network band-
width. (6) The way we generate the signatures and use
them to perform matching does not depend on the hy-
pervisors. Consequently, the same method and signature
database can be used for all kind of hypervisors, as long
as they provide the interface to retrieve the OS parame-
ters of the guest VM at run-time.
3.4
Generate OS signatures
An OS signature must include all the values of its param-
eters. A naive approach to gather all the possible param-
eters is to have a tool running in host VM, and this tool
periodically queries the targeted VM for its OS param-
eters. However, this solution has a major ﬂaw: it is not
guaranteed that such an external tool can collect all the
possible values of all OS parameters, especially because
some parameter values only appear at a particular mo-
ment, in a particular condition, and in a very short time.
Even we can reduce the time interval of taking snapshot
at the guest VM, we can never be sure that no event is
missed.
To solve the above problem, we developed a method
to guarantee that we do not miss any OS parameters, as
long as it happens during the proﬁling time: We run the
target OS in a special system emulator, which is instru-
mented at the right places to inform us when the OS starts
to perform an activity that can generate a new value of a
particular OS parameter. Our emulator then captures the
new value, and records it for later processing. This pro-
ﬁling process is done from when the OS boots up, enters
and processes in normal operating stage, until it is shut-
down later.
After the OS is shutdown, the instrumented emulator
processes all the collected OS parameters, then automat-
ically generates the signature for the OS. This proﬁling
process is repeated for all the OS variants and OS ver-
sions that we want UFO to be able to recognize, and
all the generated signatures are put into the signature
database.
This ”dummy” method of proﬁling OS to create its
signature offers a major advantage: it does not depend
on prior knowledge on particular OS, and it should work
blindly against all kind of OS-es, while requiring no un-
derstanding about the OS internals.
Because the OS behaves in the same way under
different hypervisors, our signatures are hypervisor-
independent, and can be reused by all the hypervisors.
4
Implementation
To generate the OS signatures, we have a tool to named
UFO-proﬁler. We implemented UFO-proﬁler based on
the QEMU emulator, version 0.11.1 [3]. QEMU is suit-
able because it supports all the facilities and features
such as 64-bit, fast-syscall and NX, like other hypervi-
sors. UFO-proﬁler instruments QEMU to record every
time the related OS parameters change their values. The
OS is run in UFO-proﬁler, and the proﬁling process starts
when the VM switches to protected mode, and ends when
the VM shutdowns. During the proﬁling, we run several
usual applications in the VM to simulate the production
systems, so we can trigger as much execution paths of
the OS as possible. The output data is then processed to
produce the ready-to-use signature.
On Intel platform, a lot of instructions and system
events can change the OS parameters, either by directly
modifying the OS parameters, or indirectly inﬂuencing
their values. Speciﬁcally, the following Intel instructions
are instrumented by UFO-proﬁler: mov, int, sysenter, sy-
sexit, syscall, sysret, jmp far, call far, lds, les, lfs, lgs,
lgdt, lidt, ltr, wrmsr, loadall, and iret.
Besides the above instructions, UFO-proﬁler must
also instrument to monitor some low level activities that
modiﬁes OS parameters. The interested events are task
5
switching and interrupt handling: the task switching in-
volves a lot of operations that affect OS parameters, such
as loading the new selector into TR register, switch to
new segments in another privilege levels. Meanwhile,
the interrupt handling process leads to new values are
loaded into segment registers such as CS and SS.
QEMU dynamically translates all the instructions and
events, so UFO-proﬁler simply instruments at the right
places, when above instructions and events happen. At
that time, the new value of related OS parameters is
record, with all of its attributes. With all the saved pa-
rameters, we also record the time of the event, so we
know the relative time of every events since when we
start proﬁling the OS.
After the OS in the emulator is shutdown, the signa-
ture can be generated. It contains all the values of OS
parameters we saved, with repeated values eliminated.
The signature includes all the captured values of OS pa-
rameters, except the segment parameters: unlike other
parameters, segment parameters might have a lot of val-
ues, which results in a big signature. The reason is that
some segments might switch to different segment base,
or set different limits for different purposes. We reduce
the size of the segment parameters by combining them,
if the segment base or limit attributes of all the param-
eters share the same postﬁx. In that case, the postﬁx is
used to represent the attribute. For example, a base of
0x3F0BC0 and a base of 0X412BC0 share the postﬁx of
0XBC0. Combining segment attributes has another ben-
eﬁt: the postifx can also match the segment attributes we
do not encounter at proﬁling time.
When proﬁling various OS-es to generate their signa-
tures, we observed that every OS must go through mul-
tiple steps of setup, until it reaches the stable stage. We
simply deﬁne the ”stable stage” the time when OS is al-
ready in normal operation mode, and from there it does
not change the setup of OS parameters such as GDT,
IDT and MSR-EFER anymore, or only change them for