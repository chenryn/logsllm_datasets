17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32 }
map_key_hash *hsh_a = map->hsh_a;
//@ map_key_hash *hsh_b = map->hsh_b;
//@ assert [?x]is_map_key_hash(hsh_b, kp2, hsh2);
//@ close [x]hide_map_key_hash(map->hsh_b, kp2, hsh2);
int hash = hsh_a(key);
//@ open [x]hide_map_key_hash(map->hsh_b, kp2, hsh2);
int res = map_get(map->bbs_a, map->kps_a, map->khs_a,
map->inds_a, key, map->eq_a,
hash, index, map->keys_capacity);
fvp, bvp, rof, vsz,
vk1, vk2, rp1, rp2, m); @*/
fvp, bvp, rof, vsz,
vk1, vk2, rp1, rp2, m); @*/
/*@ close dmappingp(map, kp1, kp2, hsh1, hsh2,
return res;
Figure 8: Top-level get method in the libVig flow table data
type. index is an output parameter for the index of the en-
try whose first key matches key. The method returns 1 if the
entry is found, 0 otherwise.
Implementation: In Vigor, we use the VeriFast proof checker [28],
which works for C programs annotated with pre-conditions and
post-conditions written in separation logic [51]. Annotating code
is not an easy task, especially for non-experts. However, separation
logic is relatively friendly: It is an extension of classic Hoare logic
designed for low-level imperative programs that use shared mutable
data structures. It has a good notion of memory ownership, which
makes it easy to express transfer of ownership through pointers.
Separation logic supports local reasoning [44], in that specifications
and proofs of a method refer only to the memory used by that
method, not the entire global state.
libVig contains 2.2 KLOC of C, 4K lines of pre- and post-conditions
and accompanying definitions, and 21.8K lines of proof code (in-
lined annotations). The human effort of writing the proof is about
2 person-months. VeriFast verifies the proof in less than 1 minute.
Symbolic models for libVig data types. Symbolic execu-
tion [6, 9, 14, 27, 33, 50] is the method we use for verifying VigNAT’s
low-level properties (P2) in §5.2.1. This approach entails having a
symbolic execution engine execute the NF with symbolic rather
than concrete values. A symbolic value represents simultaneously
5.1.4
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
A. Zaostrovnykh, S. Pirelli, L. Pedrosa, K. Argyraki, and G. Candea
multiple possible values (e.g., an unconstrained symbolic packet
header represents all possible packet headers). Assignment state-
ments are functions of their symbolic arguments, while conditional
statements split execution into two paths, each with symbolic state
correspondingly constrained by the branch condition.
When symbolically executing the VigNAT stateless code, which
calls into libVig, we do not wish to also symbolically execute the
libVig implementation, because that would lead to path explosion.
Therefore, we abstract libVig with a symbolic model that simulates
the effect of calling into libVig and keeps track of the side effects
in a per-execution-path manner. The symbolic model differs from
the formal contracts in two ways: it is executable code, and it may
be imperfect—it might miss some possible behaviors of the libVig
implementation, or exhibit behaviors that could never occur.
As we discuss in the next section, writing a good symbolic model
is hard, and our lazy proof technique helps deal with this challenge:
it tolerates imperfections in a symbolic model while at the same
time formally guaranteeing that accepted imperfections do not
affect the overall proof of the NF.
5.2 Lazy Proofs
Our proposed lazy proofs technique glues together a symbolic ex-
ecution engine (SEE) with a proof checker to produce proofs of
NF properties that were previously out of reach. Together with the
stateful/stateless separation described earlier, this constitutes the
cornerstone of how we verify VigNAT.
The main idea is to use an SEE to enumerate all execution paths
through the stateless NF code, and (a) record for each path a sym-
bolic trace of how the stateless code interacted with the outside
world and with libVig; and (b) verify that P2 (low-level properties)
holds on each path. The Validator then transforms the symbolic
traces (i.e., a representation of all possible observable behaviors of
VigNAT’s stateless code) into mechanically checkable proofs that
P4, P5, and ultimately P1 (NAT semantics) hold.
Not only do lazy proofs allow us to use the right tool for each
desired property but they also resolve the modeling challenge: writ-
ing a symbolic model of libVig requires reconciling two conflicting
objectives. On the one hand, the model must remove enough details,
i.e., be abstract enough to make symbolic execution terminate in
useful time—after all, it is abstraction that reduces the number of
paths to explore symbolically. On the other hand, the model must
be detailed enough to capture enough libVig behaviors to be faithful
to the libVig implementation in the context of the properties being
verified. How good the model is depends directly on which details
are relevant to the proof vs. not, which in turn depends both on
the properties to be proven and on the code that uses the model.
Thus, devising a good model is often an iterative process that con-
verges after multiple attempts onto a good model customized to
the code and the property to be proven. Spending time proving the
faithfulness (P5) of draft models before actually knowing that they
are fit for proving P2 would be wasteful. With lazy proofs, we can
now first attempt the proof of P2 assuming the model is OK and,
if the model indeed helps prove the desired property, only then
invest in validating the model (P5). From a practical standpoint, this
approach makes it cheap to write models, because we don’t need to
spend time ironing out the very last bugs; instead we rely on Vigor
to surface these bugs over time.
Said differently, lazy proofs exploit the fact that an application
typically uses only a subset of the semantics offered by its libraries.
So, instead of proving that the libVig model accurately captures all
of libVig’s semantics, we only prove that it does so for the semantics
used by VigNAT.
We now describe the proof of P2—low-level properties (§5.2.1),
the Vigor Validator and how it uses symbolic traces to prove P1—
correctness of VigNAT’s semantics (§5.2.2), and finally how the
Validator proves correctness of the libVig symbolic model (§5.2.3)
and correctness of how libVig is used by the stateless code (§5.2.4).
5.2.1 Proving that VigNAT satisfies low-level properties. Low-
level coding mistakes, like the misuse of memory, can cause a pro-
gram to crash or behave erratically, so proving the absence of such
mistakes is essential to proving higher level semantic properties.
As described in §4.2, the desired low-level properties refer to the ab-
sence of bugs such as buffer over/underflow, out-of-bounds memory
accesses, double free, arithmetic over/underflow, and others.
To prove the absence of such bugs, Vigor performs exhaustive
symbolic execution (ESE), using an SEE to enumerate all execution
paths through the stateless part of the NF. The SEE explores all
feasible branches at conditional statements, therefore ESE is fully
precise: it enumerates only feasible paths, i.e., paths for which
there exists a set of inputs that takes the program down that path,
and does not miss any feasible paths. Low-level properties are
stated as asserts, and for each feasible execution path the SEE
reasons symbolically about whether there exists an input that could
violate the assert. In order to make this approach feasible, Vigor
first replaces all calls to libVig with calls to the libVig model; this
abstracts away all state handling code, thereby removing almost all
constructs that lead to path explosion, such as loosely constrained
symbolic pointers. Next, we make the SEE aware of loop bounds
by marking the loop guard of an infinite loop with VIGOR_LOOP and
providing loop invariants, so that the SEE can transform the loops
to avoid unnecessary loop unrolling (e.g., by havocing [1]). This
eliminates the last source of path explosion in VigNAT.
If the assert for each low-level property holds on every feasible
path during ESE, then we have a proof that that stateless code is
free of low-level bugs, since ESE reasons about all possible inputs
without enumerating those inputs. The formal proof that libVig
behaves according to its interface contracts (§5.1.3) guarantees that
libVig too is free of low-level bugs, otherwise its proof would not
verify. This means that all VigNAT code satisfies the low-level
properties. If this was not stateless code but a stateful program, ESE
would likely not complete. Yet, in our case, the SEE checks all 108
paths through VigNAT’s stateless code in less than 1 minute.
Of course, the proof makes certain basic assumptions, like com-
piler correctness (more in §5.4), and most importantly it assumes
that the libVig model is correct (P5) and the stateless code uses
VigNAT data structures correctly (P4). Verifying these assumptions
a posteriori requires a Validator and symbolic traces, which we
describe in the next subsection.
Implementation. In Vigor we use the KLEE SEE [9]. It checks
out-of-the-box several low-level properties, and we add the checks
8
A Formally Verified NAT
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
from LLVM’s undefined behavior sanitizers [42, 43, 57]. We modi-
fied KLEE in several ways: First, we added loop invariant support,
and we enabled KLEE to automatically find the variables that may
change inside a loop and havoc [1] them. The NF developer still
has to manually insert the assertions and assumptions for the loop
invariants, but KLEE can now use them to avoid enumerating un-
necessary paths. Second, we added dynamic pointer access control
by providing primitives that allow libVig developers to enable/dis-
able dereferenceability of a pointer between libVig calls. Third, we
added the ability to record symbolic traces, described next.
1 loop_invariant_produce(ring=[..]) ==> []
2 ring_full(ring=[..]) ==> true
3 ring_empty(ring=[..]) ==> false
4 can_send() ==> true
5 ring_pop_front(ring=[..],
6
7 send(packet={.port=:y:}) ==> []
8 loop_invariant_consume(ring=[..]) ==> []
9 --- constraints ---
10 :y: != 9
packet={.port=:x:} --> {.port=:y:}) ==> []
5.2.2 Proving that VigNAT satisfies NAT RFC semantics. We
think of the formalized NAT semantics as “trace properties”: given
a trace of the interaction between an NF and the outside world,
what must hold true of the trace for it to have been generated by
a correct NAT NF? More specifically, the NAT properties (shown
in §4.1 and Fig. 6) are in the form of pre- and post-conditions for
actions triggered by the arrival of a packet. The pre-conditions, ex-
pressed on the abstract NAT state plus the incoming packet, select
which action applies. The corresponding post-condition states what
must hold of the abstract state and the potential outgoing packet
after the action is completed.
In order to verify that the desired properties hold, Vigor collects
from the SEE a trace of each explored execution path. This trace
summarizes how the VigNAT code interacted, during symbolic
execution, with (a model of) the outside world, be it the libVig
library or the DPDK framework. Since the traces have common
prefixes, they form a tree—the NF’s execution tree. In the context of
this section, a symbolic trace is a path from the root of the execution
tree to a node in the tree, be it an internal or a leaf node. In other
words, the set of symbolic traces considered by Vigor consists of
all execution path traces and all their prefixes.
Each trace has two parts: a sequence of calls that were made
across the traced interface, and a set of constraints on symbolic
program state. Fig. 9 shows a simple example of a trace for the code
in Fig. 1 using the ring data structure. The seven calls in this trace
result from the execution of lines 8→9→12→13→14→16 in Fig. 1.
loop_invariant_produce and loop_invariant_consume are markers
indicating the beginning and the end of a loop iteration. In the
ring_pop_front call, packet is an output parameter pointing to the
popped packet; the trace records its initial and final value.
The constraints section shows the relationship between the dif-
ferent symbols. In this simple example there is only one constraint:
y (cid:44) 9 is the result of the application of packet_constraints (Fig. 2)
in the ring model. The initial value x is unconstrained.
The Validator now takes each trace, weaves into it the properties
to be proven, and turns it into a verification task. This is a C pro-
gram that contains the sequence of calls from the trace, enriched
with metadata on the symbolic variables used as arguments and
return values, as well as the constraints that describe the relation-
ships between these symbolic variables at each point in the trace.
The Validator also inserts lemmas into the trace, to help the proof
checker. In essence, the Validator translates each symbolic trace
into a proof that the trace satisfies the desired properties. It then
passes the proof to the proof checker to verify it.
Figure 9: Symbolic trace for a path through the code in Fig. 1.
Colons (:val:) designate a symbol, --> separates the input
and output value of a pointer argument, ==> marks the re-
turn value of a function call, [..] indicates omitted details.
Fig. 10 shows the Validator-transformed version of Fig. 9. The
seven calls are now on lines 6, 8, 10, 12, 15, 18, and 22. The uninitial-
ized arg1 and arg2 variables are unconstrained symbols initially. The
constraints on return values recorded in Fig. 9 turn into the @assume
statements on lines 9,11, and 13. The symbolic constraint from l.10
in Fig. 9 turns into the @assume on l.17 of the proof. These four
@assume statements constitute the pre-condition of this symbolic
trace. In order to set up the post-condition that needs to be verified,
the Validator initializes special handle variables packet_is_sent and
sent_packet on lines 19 and 20 to capture externally visible effects
immediately after the send() call. Then it inserts the NF specifica-
tion (semantic property) into the trace on ll. 24-26:
assert(sent_packet->port != 9);
1 if (packet_is_sent) {
2
3 }
Vigor verifies that the NF spec holds after every loop iteration.
Once the proof checker completes all verification tasks received
from the Validator, we have a proof that the trace properties weaved
in by the Validator hold for all possible executions of the stateless
code. Vigor proves that VigNAT satisfies the NAT specification by
weaving the properties of §4.1 into the symbolic traces, similarly
to ll. 24-26 in Fig. 10. Trace verification is highly parallelizable:
to verify all 431 traces resulting from the 108 execution paths of
stateless VigNAT takes 38 minutes on a single core and 11 minutes
on a 4-core machine. As will be noted later, this verification time
includes not only proving P1 but also P4 and P5.
5.2.3 Validating the libVig symbolic model. We say a symbolic
model is valid if the behavior it exhibits is indistinguishable from
the behavior of the libVig implementation captured by the formal
interface contracts4. Any behaviors of the model that are not ob-
served during ESE are irrelevant to its validity for this particular
proof. This is the insight behind our lazy proof technique: it doesn’t
matter whether a model is universally valid, but rather what mat-
ters is whether the parts of the model used during symbolic execution
are valid—this is a much weaker property than universal validity,