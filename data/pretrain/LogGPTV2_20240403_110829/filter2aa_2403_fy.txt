.text:005410CA     pop     esi 
.text:005410CB     pop     ebp 
.text:005410CC     pop     ebx 
.text:005410CD     add     esp, 40h 
.text:005410D0     retn 
.text:005410D0 rotate1         endp 
虽然上述代码通过 set_bit()函数把内部数组里的数据复制到了全局数组里，但是数组的排列顺序完全
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
775 
不一样。第一层循环的循环控制变量从 7 逐渐变为 0，呈递减的变化趋势。 
通过上面的分析，我们可整理出 rotate1()的源代码如下： 
void rotatel (int v) 
{ 
        bool tmp[8][8];//internal array 
        int i, j; 
        for (i=0; i24) 
        q-=24; 
int quotient=q/3; // in range 0..7 
int remainder=q % 3; 
switch (remainder) 
{ 
    case 0: for (int i=0; i 
#include  
#include  
#define IS_SET(flag, bit)        ((flag) & (bit)) 
#define SET_BIT(var, bit)        ((var) |= (bit)) 
#define REMOVE_BIT(var, bit)     ((var) &= ~(bit)) 
static BYTE cube[8][8]; 
void set_bit (int x, int y, int z, bool bit) 
{ 
        if (bit) 
                SET_BIT (cube[x][y], 1>z)&1==1) 
                return true; 
        return false; 
}; 
void rotate_f (int row) 
{ 
        bool tmp[8][8]; 
        int x, y; 
        for (x=0; x='a' && c24) 
                                q-=24; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
779 
                        int quotient=q/3; 
                        int remainder=q % 3; 
                        switch (remainder) 
                        { 
                        case 0: for (int i=0; i<v; i++) rotate_f (quotient); break; 
                        case 1: for (int i=0; i<v; i++) rotate_t (quotient); break; 
                        case 2: for (int i=0; i<v; i++) rotate_l (quotient); break; 
                        }; 
                }; 
                p++; 
        }; 
}; 
void crypt (BYTE *buf, int sz, char *pw) 
{ 
        int i=0; 
        do 
        { 
                memcpy (cube, buf+i, 8*8); 
                rotate_all (pw, 1); 
                memcpy (buf+i, cube, 8*8); 
                i+=64; 
        }; 
        while (i<sz); 
}; 
void decrypt (BYTE *buf, int sz, char *pw) 
{ 