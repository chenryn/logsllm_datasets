is to rely on remote attestation and trusted computing techniques to
ensure that the cloud handles the data per the user’s expectations.
Maniatis et al. provide an overview of all the related techniques in
this direction [31]. We are not aware of work in this direction that
speciﬁcally targets web applications.
Data breaches and privacy violating information ﬂows in web
applications can occur due to bugs (such as missing access checks).
A large body of research aims to improve the developer’s ability to
reason about data ﬂow in web applications: Gifﬁn et al. provide a
comprehensive survey of research in the system’s community [17].
Yang et al. [50] present Jeeves, a new language mechanism for en-
forcing access checks as well as survey research in the programming
languages community.
These techniques typically require application rewrites and only
protect the user from unintentional developer mistakes. In contrast,
ShadowCrypt does not require application rewrite and aims to put
the user back in control—intentional or unintentional violations of
user expectation by the developer notwithstanding.
ShadowCrypt aims to provide a secure, isolated UI widget inline
to an application. Roesner et al. propose secure widgets as a permis-
sion granting mechanism [41]. Huang et al. discuss a secure defense
against clickjacking attacks [25].
9. CONCLUSION
We presented ShadowCrypt, a system for transparently switch-
ing to encrypted text for web applications. In contrast to previous
approaches, ShadowCrypt does not trust any part of a web applica-
tion with the user data. Instead, ShadowCrypt puts the user back
6We were unable to conduct a security review of Privly’s isolation
mechanism because it is currently invitation-only. We did not ﬁnd a
publication detailing its technical architecture.
in control by sharing keys with the principals she wants. We also
highlighted the functionality and usability challenges of switching
to encrypted data in modern applications. Future work can focus on
extending the ShadowCrypt design to protect against active attack-
ers.
ShadowCrypt’s secure infrastructure and usable interface de-
sign provide a basis for implementing wide variety of encryp-
tion schemes. We are currently working on supporting additional
schemes that can work transparently such as Format Preserving
Encryption (FPE) [4] and Attribute-based Encryption [5, 42] (ABE).
The former allows us to textual and non-textual ﬁelds that place
constraints on its format (e.g., images) and the latter enables easier
key management. In the longer run, we aim to support encryption
schemes that rely on modiﬁcations to existing web applications to
work, such as Searchable Encryption [7,44], or Fully Homomorphic
Encryption [16].
ShadowCrypt’s contribution lies in providing the user the choice
of encrypting arbitrary ﬁelds—the user can enable/disable (random
or deterministic) encryption as she desires. ShadowCrypt also sup-
ports manifest ﬁles that identify ﬁelds to encrypt/not-encrypt and the
algorithm to use for a particular application. We envision seeding
ShadowCrypt with sane default manifests for popular applications.
10. ACKNOWLEDGEMENTS
We would like to thank our shepherd Graham Steel, Joel Wein-
berger, Prateek Saxena, Matthew Finifter, Ashley Thomas, and
Jassiem Iﬁll for their useful feedback. This material is based upon
work supported by the National Science Foundation under Grants
No. 0831501 and 1239166. This material is based upon work sup-
ported by the Air Force Ofﬁce of Scientiﬁc Research (AFOSR)
under MURI award FA9550-09-1-0539. This work is partially sup-
ported by the Ofﬁce of Naval Research under MURI Grant No.
N000140911081. This research was supported by Intel through the
ISTC for Secure Computing. This research is partially funded by
the National Science Foundation under grant CNS-1314857, a Sloan
Research Fellowship, as well as a Google Faculty Research Award.
11. REFERENCES
[1] 6WUNDERKINDER. Let’s talk comments for wunderlist and
our 5+ million users. http://goo.gl/PcjOR6.
[2] AGARWAL, N., RENFRO, S., AND BEJAR, A. Phishing
forbidden. Queue 5, 5 (2007), 28–32.
[3] AGARWAL, N., RENFRO, S., AND BEJAR, A. Yahoo!’s
sign-in seal and current anti-phishing solutions. In
Proceedings of Web 2.0 Security & Privacy Workshop (2007).
[4] BELLARE, M., RISTENPART, T., ROGAWAY, P., AND
STEGERS, T. Format-preserving encryption. In Selected Areas
in Cryptography (2009), pp. 295–312.
[5] BETHENCOURT, J., SAHAI, A., AND WATERS, B.
Ciphertext-policy attribute-based encryption. In Proceedings
of the 2007 IEEE Symposium on Security and Privacy (2007),
SP ’07, pp. 321–334.
[6] BONEH, D., SAHAI, A., AND WATERS, B. Functional
encryption: Deﬁnitions and challenges. In Proceedings of the
8th Conference on Theory of Cryptography (2011), TCC’11,
pp. 253–273.
[7] CASH, D., JARECKI, S., JUTLA, C. S., KRAWCZYK, H.,
ROSU, M.-C., AND STEINER, M. Highly-scalable searchable
symmetric encryption with support for boolean queries. In
CRYPTO (2013), pp. 353–373.
[8] CHEN, A. Gcreep: Google engineer stalked teens, spied on
chats. http://gawker.com/5637234/.
[9] CHRISTODORESCU, M. Private use of untrusted web servers
via opportunistic encryption. W2SP 2008: Web 2.0 Security
and Privacy 2008 (2008).
[10] CONSTANTIN, L. Mega: Bug bounty programme resulted in
seven vulnerabilities ﬁxed so far, Feb. 2013. http://www.
computerworld.co.nz/article/488585/.
[11] CONSTINE, J. Twitter and linkedin manage tasks with asana,
new api means robots can too. http://goo.gl/M8monn.
[12] Cryptocat blog: Xss vulnerability discovered and ﬁxed, Aug.
2012. http://goo.gl/Nq7tVk.
[13] Dromaeo: Javascript performance testing.
http://dromaeo.com/.
[14] FAHL, S., HARBACH, M., MUDERS, T., AND SMITH, M.
Conﬁdentiality as a service–usable security for the cloud. In
Trust, Security and Privacy in Computing and
Communications (TrustCom), 2012 IEEE 11th International
Conference on (2012), IEEE, pp. 153–162.
[15] GALLAGHER, J. Thanks a million!
http://blog.trello.com/thanks-a-million/.
[16] GENTRY, C. Fully homomorphic encryption using ideal
lattices. In STOC (2009), pp. 169–178.
[17] GIFFIN, D. B., LEVY, A., STEFAN, D., TEREI, D.,
MAZIERES, D., MITCHELL, J., AND RUSSO, A. Hails:
Protecting data privacy in untrusted web applications. In 10th
Symposium on Operating Systems Design and Implementation
(OSDI) (2012), pp. 47–60.
[18] GLAZKOV, D. [shadow]: Consider isolation. https://www.
w3.org/Bugs/Public/show_bug.cgi?id=16509.
[19] GLAZKOV, D. Shadow dom. http://goo.gl/G4j3L4.
[20] GOEL, V., AND WYATT, E. Facebook privacy change is
subject of f.t.c. inquiry. http://nyti.ms/19IWMV8.
[21] GOLDREICH, O., AND OSTROVSKY, R. Software protection
and simulation on oblivious RAMs. J. ACM (1996).
[22] GOOGLE. Content scripts. http://goo.gl/G2r47g.
[23] GORDON, S. D., KATZ, J., KOLESNIKOV, V., KRELL, F.,
MALKIN, T., RAYKOVA, M., AND VAHLIS, Y. Secure
two-party computation in sublinear (amortized) time. In ACM
Conference on Computer and Communications Security (CCS)
(2012).
[24] HEIDERICH, M., NIEMIETZ, M., SCHUSTER, F., HOLZ, T.,
AND SCHWENK, J. Scriptless attacks: stealing the pie without
touching the sill. In Proceedings of the 2012 ACM conference
on Computer and communications security (2012), ACM,
pp. 760–771.
[25] HUANG, L.-S., MOSHCHUK, A., WANG, H. J.,
SCHECHTER, S., AND JACKSON, C. Clickjacking: Attacks
and defenses. In Proceedings of the 21st USENIX Conference
on Security Symposium (Berkeley, CA, USA, 2012),
Security’12, USENIX Association, pp. 22–22.
[26] JAIN, A., AND TIKIR, M. Is the web getting faster?
http://goo.gl/kFXL7r.
[27] KEYBASE. Keybase. https://keybase.io/.
[28] KURT OPSAHL. Facebook’s eroding privacy policy: A
timeline. http://goo.gl/BkRknm.
[29] Lastpass blog: Cross site scripting vulnerability reported,
ﬁxed, Feb. 2011. http://goo.gl/4MDNjU.
[30] LU, S., AND OSTROVSKY, R. How to garble ram programs.
In EUROCRYPT (2013).
[31] MANIATIS, P., AKHAWE, D., FALL, K., SHI, E.,
MCCAMANT, S., AND SONG, D. Do you know where your
data are?: Secure data capsules for deployable data protection.
In Proceedings of the 13th USENIX Conference on Hot Topics
in Operating Systems (Berkeley, CA, USA, 2011), HotOS’13,
USENIX Association, pp. 22–22.
[32] MAONE, G., HUANG, D. L.-S., GONDROM, T., AND HILL,
B. User interface security directives for content security
policy. http://www.w3.org/TR/UISecurity/.
[33] MCGREGOR, S. Zerobin. http://goo.gl/blY1zx.
[34] MEENAN, P. Webpagetest - website performance and
optimization test. http://www.webpagetest.org/.
[35] MOZILLA DEVELOPER NETWORK, AND INDIVIDUAL
CONTRIBUTORS. Xpconnect wrappers.
http://goo.gl/8eZzQ8.
[36] PARNO, B., MCCUNE, J., AND PERRIG, A. Bootstrapping
trust in commodity computers. In Security and Privacy (SP),
2010 IEEE Symposium on (2010), pp. 414–429.
[37] POPA, R. A., REDFIELD, C. M. S., ZELDOVICH, N., AND
BALAKRISHNAN, H. Cryptdb: Protecting conﬁdentiality with
encrypted query processing. In Proceedings of the
Twenty-Third ACM Symposium on Operating Systems
Principles (New York, NY, USA, 2011), SOSP ’11, ACM,
pp. 85–100.
[38] POPA, R. A., STARK, E., VALDEZ, S., HELFER, J.,
ZELDOVICH, N., AND BALAKRISHNAN, H. Securing web
applications by blindfolding the server. NDSI (2014).
[39] PRIVLY. Privly. http://priv.ly/.
[40] RECURITY LABS GMBH. Openpgp.js.
http://openpgpjs.org/.
[41] ROESNER, F., KOHNO, T., MOSHCHUK, A., PARNO, B.,
WANG, H. J., AND COWAN, C. User-driven access control:
Rethinking permission granting in modern operating systems.
In Security and Privacy (SP), 2012 IEEE Symposium on
(2012), IEEE, pp. 224–238.
[42] SAHAI, A., AND WATERS, B. Fuzzy identity-based
encryption. In EUROCRYPT (2005), pp. 457–473.
[43] Shadowcrypt code release.
http://shadowcrypt-release.weebly.com/.
[44] SONG, D. X., WAGNER, D., AND PERRIG, A. Practical
techniques for searches on encrypted data. In Proceedings of
the 2000 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2000), IEEE Computer Society.
[45] STARK, E., HAMBURG, M., AND BONEH, D. Symmetric
cryptography in javascript. In Computer Security Applications
Conference, 2009. ACSAC’09. Annual (2009), IEEE,
pp. 373–381.
[46] STONE, P. Pixel perfect timing attacks with html5.
[47] THE CHROMIUM AUTHORS. Design plans for out-of-process
iframes. http://goo.gl/VqR4sv.
[48] Virtru. http://www.virtru.com.
[49] WIKIPEDIA. Global surveillance disclosures (2013–present).
http://goo.gl/3YWjY9.
[50] YANG, J., YESSENOV, K., AND SOLAR-LEZAMA, A. A
language for automatically enforcing privacy policies. ACM
SIGPLAN Notices 47, 1 (2012), 85–96.
[51] YAO, A. C.-C. How to generate and exchange secrets. In
IEEE symposium on Foundations of Computer Science
(FOCS) (1986).
[52] ZALEWSKI, M. Postcards from the post-xss world.
http://lcamtuf.coredump.cx/postxss/.
APPENDIX
A. THE SHADOW DOM BOUNDARY
host.shadowRoot. The host has a dedicated property that
provides access to its shadow tree through the shadow tree’s root.
shadowRoot.olderShadowRoot. Shadow DOM allows
one element to host multiple shadow trees. The shadowRoot
property returns the “youngest” shadow tree (the one registered
last), and the olderShadowRoot property on each shadow tree
provides access to the next “older” shadow tree.
insertionPoint.getDistributedNodes(). Shadow
DOM deﬁnes a mechanism for combining an older shadow tree’s
content with younger shadow tree’s content. When this happens,
the getDistributedNodes() method provides access to the
content taken from the older shadow tree.
We harden the encapsulation by removing the host element’s
shadowRoot property and preventing the creation of any more
shadow trees on the element.
B. SUPPORTING HTML TEXT INPUTS
In Section 3.2.2, we focused mainly on the HTML input
type=text widget. HTML also deﬁnes two other ways to declare
inputs: the textarea element and the contenteditable at-
tribute on any element (for rich input). In this section, we detail how
our Chrome implementation handles these elements.
Recall that the browser notiﬁes ShadowCrypt’s mutation observer
about everything that the application puts in the document tree. To
ﬁnd all text input widgets, ShadowCrypt uses querySelectorAll()
(with the CSS selector input,textarea,[contenteditable])
to ﬁnd candidate text inputs in the added subtree. It then examines
the candidate elements for more detailed criteria: input elements
must be of text type, and elements with the contenteditable
attribute must have it set to true.
Next, it proceeds with the transformation described in Section 3.2.1,
creating a shadow input. ShadowCrypt privately annotates the orig-
inal element to prevent further attempts to rewrite it, in case the
application removes the element and adds it back later.
ShadowCrypt needs to support bidirectional data ﬂow between the
application (which has the ciphertext) and the shadow tree (which
has the cleartext). First, when the user modiﬁes the cleartext in
the shadow tree, ShadowCrypt needs to update the corresponding
ciphertext in the document. When the user types into Shadow-
Crypt’s created input element, the browser dispatches input events.
ShadowCrypt registers an event listener that encrypts the new data
and updates the original element with the ciphertext.
In the other direction, the application’s JavaScript code can set
the value of an input widget, and ShadowCrypt needs to update
the corresponding cleartext. For input and textarea elements,
ShadowCrypt deﬁnes a custom setter on the value property on
the web page’s DOM object. This custom setter exists in the appli-
cation’s JavaScript environment. When the application assigns a
new value to this property, the custom setter notiﬁes ShadowCrypt’s
JavaScript environment by dispatching a custom event carrying the
new value. An event listener in ShadowCrypt’s environment de-
crypts the ciphertext string provided by the application and updates
the shadow input with the clear text.
For elements with the contenteditable attribute, the ap-
plication sets the value by modifying the element’s descendants.
This triggers ShadowCrypt’s document mutation observer, and
ShadowCrypt updates the shadow input with the decrypted data.
Recall that ShadowCrypt privately annotates input widgets having a
shadow tree. This allows ShadowCrypt to differentiate changes to
contenteditable inputs from other document mutations.