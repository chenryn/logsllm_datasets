title:On the Security of PAS (Predicate-Based Authentication Service)
author:Shujun Li and
Hassan Jameel Asghar and
Josef Pieprzyk and
Ahmad-Reza Sadeghi and
Roland Schmitz and
Huaxiong Wang
2009 Annual Computer Security Applications Conference
On the Security of PAS (Predicate-based Authentication Service)
Shujun Li‚àó, Hassan Jameel Asghar‚Ä†, Josef Pieprzyk‚Ä†, Ahmad-Reza Sadeghi‚Ä°, Roland Schmitz¬ß and Huaxiong Wang¬∂
‚àóDepartment of Computer and Information Science, University Konstanz, Germany
‚Ä†Center for Advanced Computing ‚Äì Algorithms and Cryptography, Macquarie University, Australia
‚Ä°System Security Group, Ruhr-University of Bochum, Germany
¬ßDepartment of Computer Science and Media, Stuttgart Media University, Germany
¬∂Division of Mathematical Sciences, Nanyang Technological University, Singapore
Abstract‚ÄîRecently a new human authentication scheme
called PAS (predicate-based authentication service) was pro-
posed, which does not require the assistance of any supple-
mentary device. The main security claim of PAS is to resist
passive adversaries who can observe the whole authentication
session between the human user and the remote server.
In this paper we show that PAS is insecure against both
brute force attack and a probabilistic attack. In particular, we
show that its security against brute force attack was strongly
overestimated. Furthermore, we introduce a probabilistic at-
tack, which can break part of the password even with a very
small number of observed authentication sessions. Although
the proposed attack cannot completely break the password,
it can downgrade the PAS system to a much weaker system
similar to common OTP (one-time password) systems.
authentication; Matsumoto-Imai
threat
model; attack; security; usability; OTP (one-time password);
Keywords-PAS;
I. Introduction
An important and foremost requirement of every security
system is user authentication. A user authentication method
enables a system to give access to legitimate users while
denying access to impersonators. Roughly speaking, user au-
thentication methods can be divided into the following basic
three categories according to how the veriÔ¨Åer authenticates
a user: 1) ‚Äúwhat you know‚Äù ‚Äì via a secret shared between
the legitimate user and the veriÔ¨Åer; 2) ‚Äúwhat you possess‚Äù
‚Äì via a physical token the user possesses; 3) ‚Äúwho you are‚Äù
‚Äì via an inherent characteristic of the user. Typical exam-
ples of user authentication systems belonging to the above
three categories include password-based systems (‚Äúwhat you
know‚Äù), smart card based systems (‚Äúwhat you possess‚Äù) and
biometrics-based systems (‚Äúwho you are‚Äù).
Different user authentication methods are designed to
be secure under different
threat models. One important
threat model involves adversaries who can eavesdrop on
or even tamper communications between the user and the
veriÔ¨Åer. Apparently, Ô¨Åxed passwords are not secure under
this threat model, since they can be simply recorded and
replayed later by an adversary to impersonate the protected
identities. As possible solutions, dynamic passwords like
one-time passwords (OTP) or more complicated challenge-
response user authentication protocols have to be adopted.
Figure 1. Matsumoto-Imai threat model: the red area shows the information
source available to the adversaries, and the arrows denote information Ô¨Çow.
To assist human users to calculate the one-time passwords
or correct responses to dynamic challenges, some special-
purpose hardware/software is often a must.
In a stronger threat model described by Matsumoto &
Imai in [1], it is assumed that the human user does not have
access to any special-purpose hardware/software. Instead,
the only resource a human user can use is his/her own brain.
There are two types of adversaries in this threat model ‚Äì
passive and active adversaries as shown in Figure 1. Passive
adversaries can observe all the user‚Äôs interaction with the
terminal and/or all the communications between the terminal
and the remote server. In comparison, active adversaries can
further modify the communications between the terminal
(i.e., the user) and the remote server. A lot of practical
attacks belong to or have close link to the above threat
model, such as shoulder-surÔ¨Ång attack, key/screen-logger at-
tack, phishing/pharming attack, malware-based attack, man-
in-the-middle attack, and so forth. In the literature, the term
‚Äúobserver attack‚Äù, ‚Äúobservation attack‚Äù and ‚Äúpeeping attack‚Äù
are also used to cover attacks under this threat model [2].
Generally speaking, a secure user authentication system
under Matsumoto-Imai threat model is a challenge-response
1063-9527/09 $26.00 ¬© 2009 IEEE
DOI 10.1109/ACSAC.2009.27
209
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
	

			

	protocol based on a secret shared between the user and the
server. The user has to make correct responses to a number
of challenges dynamically generated by the server to prove
his/her identity. There are several design goals of such a
challenge-response user authentication protocol:
1) Usability: the correct response to each challenge is
easy for a legitimate user to calculate mentally.
2) Security against passive adversaries: it is computa-
tionally infeasible to derive the secret or part of it
from a number of observed authentication sessions.
3) Security against active adversaries: it is computation-
ally infeasible to choose some challenges to ease the
derivation of the secret or part of it.
Since the 1990s there have been a number of attempts
at designing user authentication systems which are secure
against passive adversaries, which will be introduced in Sec-
tion II. A recent design was predicate-based authentication
service (PAS) proposed in [3], which was designed to resist
passive adversaries. In this paper, we show that the original
security claims given by Bai et al. in [3] are not correct. A
probabilistic attack is proposed to partially break the secret
shared between the user and the server, which downgrades
the PAS scheme to a much weaker authentication system.
The rest of the paper is organized as follows. Some related
work is introduced in the next section. Then, we brieÔ¨Çy
describe how the PAS scheme works in Section III. A re-
evaluation of security and usability of the PAS scheme is
given in Section IV, and a probabilistic attack is proposed
in Section V. The last section concludes the paper.
II. Related Work
To the best of our knowledge, the earliest attempt was made
by Matsumoto and Imai after they introduced the threat
model [1]. Wang et al. showed that the Matsumoto-Imai
protocol was not secure enough against active adversaries
[4]. Wang et al. also proposed a modiÔ¨Åed scheme, but its
usability is too low for common users in practice. In [5]
Matsumoto proposed several new protocols based on the dot
product of two vectors. According to [2], these dot-product-
based protocols are not sufÔ¨Åciently secure against passive
adversaries, in the sense that the secret can be revealed
with a linear (in the size of the secret) number of observed
authentication sessions (which was also pointed out in [6]).
In [7] Li and Teng proposed a new protocol based on
lexical shifting and matching. No cryptanalysis was reported
on Li-Teng protocol, but its usability is doubtful since the
user has to remember three different kinds of secrets, each
of which is of a considerable length.
Two protocols based on hard mathematical problems were
proposed by Hopper and Blum in [6]. The main problem
with Hopper-Blum protocols is again about usability: the
password has to be long enough to ensure security, which
makes usability relatively low. One Hopper-Blum protocol
also requires the user to make intentional errors with prob-
ability Œ∑, which may not be an easy task for many common
users. According to the user study on a prototype system
reported in [6], the average login time is around 160 seconds,
which may be too long for a practical system.
In [8], Li and Shum suggested some principles and two
general structures of designing challenge-response protocols
secure under Matsumoto-Imai threat model, which are based
on making balanced errors and hiding direct responses to
challenges, respectively. A graphical implementation was
designed. No cryptanalysis has been reported on this work,
but the usability of the graphical implementation is also
questionable, since the login time is considerably long.
Jameel et al. proposed a new image-based solution [9] and
shortly after extended it for devices with limited display [10].
This solution is based on a hidden rule classifying images
into two categories. One problem with this design is how
the server collects images in different categories, since the
hidden rule is generally not executable by a computer. If
the image classiÔ¨Åcation task has to be done manually by the
user, it is doubtful if the solution can offer an acceptable
balance between usability and security.
In [11] Weinshall proposed two new solutions based on
image recognition capabilities of humans. However, Golle
and Wagner showed that both solutions are insecure against
SAT (satisÔ¨Åability solver) attack [12]. This attack is very
effective, since it requires only a small number of observed
authentication sessions. The usability of these solutions is
also questionable, since the user has to remember 30 ‚Äì 80
pictures, which may not be an easy task even with training.
Besides the above proposed solutions, there is also quite a
lot of work aiming at the weakest type of passive adversaries
‚Äì shoulder surfers [13]‚Äì[18]. The main goal is to avoid
password leaking from a few number of authentication
sessions observed by a shoulder surfer. Since the security
level is considerably relaxed, it becomes much easier to
design practical solutions secure against shoulder surfers.
While most designs try to hide the password or correct re-
sponses from being observed by attackers, recently Sasamoto
et al. proposed to hide part of the challenges [19]. In this
speciÔ¨Åc design called UnderCover, the hidden challenge is
realized in a way such that the user‚Äôs palm resting on a
haptic device obscures any external observation. While this
solution does not ask the user to bring any special-purpose
hardware, the terminal equipped with the haptic device has
to be trustable, which cannot be ensured in some real attacks.
The main difÔ¨Åculty of designing a user authentication
protocol secure under Matsumoto-Imai threat model is to
Ô¨Ånd an acceptable balance between security and usability.
Many solutions can be made secure by merely increasing the
password size, but this makes the systems unusable in prac-
tice. Another noticeable difÔ¨Åculty is the imbalance between
the human users and the potential adversaries. While human
users can depend only on their brains, adversaries generally
210
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
The Prover P
A shared password S = (S1, . . . , Sp)
The VeriÔ¨Åer V
A claimed identity
A predicate index I
Calculate the p-predicate vector
(Pred1, . . . , Predp) from the password
S = (S1, . . . , Sp) and the predicate index
A challenge with l challenge tables and a response
table with 2pl cells
Calculate p hidden responses B1, . . . , Bp
and Ô¨Ånd the cell at position (B1, . . . , Bp)
in the response table
Repeat nr times
The character string in the cell (B1, . . . , Bp)
Accept/Reject P by checking if
all the responses are correct
Figure 2. The authentication process of the PAS scheme.
have access to more powerful computational resources.
III. Introduction to PAS
In this section, we try to keep the original notations used in
[3], but some of them are changed to avoid potential confu-
sion and to maintain consistency among different notations.
In PAS, the prover P (the human user) and the veriÔ¨Åer V
(the PAS server) share a password S composed of p secrets
S1, . . . , Sp. Each secret Si consists of a 2-D secret cell index
(ui, vi) and a secret word of size len Wi = wi[1]¬∑¬∑¬∑ wi[len].
The 2-D index denotes a cell at position (ui, vi) in an m√ón
2-D grid, so 1 ‚â§ ui ‚â§ m and 1 ‚â§ vi ‚â§ n. Each character of
the secret word belongs to an alphabet H of size H. Since the
2-D index can be transformed to a 1-D index ci = (ui ‚àí 1)¬∑
n + vi ‚àà {1, . . . , M = mn}, in this paper we will analyze
the PAS system by replacing (ui, vi) with the equivalent
1-D index ci ‚àà {1, . . . , M}. That is, each secret will be
represented as Si = (ci, Wi) = (ci, wi[1]¬∑¬∑¬∑ wi[len]). A
password with parameter p = 2, len = 7, M = 25 looks
like ‚Äú(12, catchme; 25, beathim)‚Äù.
PAS is a challenge-response protocol, in which the veriÔ¨Åer
V raises a number of challenges and the provers P must
give correct responses to all challenges in order to pass the
authentication process. To achieve security against passive
adversaries, p ‚Äúpredicates‚Äù (instead of the password S) are
used to make responses to challenges. The p predicates are
dynamically calculated by the prover P from the secret S
and a predicate index I, which is sent from V to P at
the beginning of each authentication session. The prover
P calculates ÀÜI = (I mod len) + 1 and generates the p
predicates as follows: i = 1, . . . , p, Predi = (ci, hi), where
hi = wi[ÀÜI]. In this paper, Pred = (Predi)p
i=1 is called a p-
predicate vector and also a predicate pair when p = 2. The
predicate pair derived from the password ‚Äú(12, catchme; 25,
211
beathim)‚Äù and I = 2 will be ‚Äú(12, a; 25, e)‚Äù.
Each challenge raised by the veriÔ¨Åer V includes l chal-
lenge tables, each of which contains M cells Ô¨Ålled with a
certain number of distinct characters in H. To ensure that
each character occurs in each cell with probability 0.5, the
number of characters in each cell is always H/2 when H
is even, and is (H ‚àí 1)/2 or (H + 1)/2 with probability
Œ≤ = 0.5 when H is odd. In this paper we assume H is even
and so each cell always contains H/2 characters. Note that
in the default setting of the PAS scheme H = 26. In addition
to the l challenge tables, the veriÔ¨Åer V also sends a p-
dimensional response table to the prover P. Each dimension
of the response table has 2l possible values, so there are 2pl
cells in the response table. All the cells are Ô¨Ålled with 2l
distinct character strings, each of which occurs exactly in
2(p‚àí1)l cells. See Figs. 1 and 2 in [3] for examples of the
challenge and the response table.
The prover P constructs a response to each challenge
based on the response table and p hidden responses gen-
erated from the p predicates. For the i-th predicate Predi =
(ci, hi), the corresponding hidden response is an l-bit integer
Bi = bi[1]¬∑¬∑¬∑ bi[l], where bi[j] = 1 if hi occurs in the ci-
th cell of the j-th challenge table and bi[j] = 0 otherwise.
With the p hidden responses, the prover P Ô¨Ånds the cell at the
position (B1, . . . , Bp) in the response table, and sends the
character string in that cell as the response to the challenge.
A step-by-step description of the authentication process
of the PAS scheme is shown in Fig. 2.
In [3], it is not clearly explained how the predicate index
I should be generated. Instead, there is a discussion on
the number of authentication sessions (denoted by t) each
predicate index ÀÜI can be used. The maximal number tmax
turns out to be 1 for the default setting of the PAS scheme.
This means that each possible value of ÀÜI is used for one
authentication session only, and the password has to be
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
renewed after all the len possible values are exhausted.
The predicate indices of the len authentication sessions
may simply be chosen as 1, . . . , len or a permutation of
the len values. In this paper, we assume the PAS scheme
runs in a ‚Äúrandom permutation mode‚Äù, in which a random
permutation of 1, . . . , len determines the predicate index
used for each authentication session.
indices in each secret Si.
In [3] the above basic PAS scheme is also extended
to allow k > 1 cell
In
this case, the i-th secret in the password is redeÔ¨Åned as
Si = (ci,1, . . . , ci,k, Wi). Accordingly, k predicate indices
I1, . . . , Ik will be sent from V to P for each authentication
session. The prover P calculates the i-th predicate Predi as
a set of k sub-predicates {Predi,j}k
j=1, where Predi,j =
, hi,j), hi,j = wi[ÀÜIj,len], ÀÜIj,k = (Ij mod k) + 1 and
(ci, ÀÜIj,k
ÀÜIj,len = (Ij mod len) + 1. With this extended predicate
containing k sub-predicates, the hidden response Bi of the
i-th predicate is obtained as follows:
the prover P Ô¨Årst
calculates k hidden sub-responses Bi,1, . . . , Bi,k for the k
sub-predicates in the same way as in the basic PAS scheme,
and then determines Bi as the bitwise OR of the k hidden
sub-responses: Bi = Bi,1 ‚à® ¬∑¬∑¬∑ ‚à® Bi,k. To ensure uniform
distribution of Bi over {0, . . . , 2l ‚àí 1},
the number of
distinct characters in each cell of each challenge table and
the corresponding probability Œ≤ should be determined by
Eqs. (6) and (8) in [3], respectively.
A list of the parameters and notations involved in the
description of the PAS scheme is given in Table I. The
default parameters used in [3] are: p = 2, len = 10,
H = {A, . . . , Z} (so H = 26), l = 2, M = 25, nr = 5,
k = 1. We omit notations of the extended scheme (except for
k) to save space. All of them can be obtained by extending
the basic notations as described above.
In [3], the security of the PAS scheme was analyzed
against three different possible attacks: brute force attack,
random guess attack and SAT (satisÔ¨Åablity solver) attack.