  * ASTStaticField
    * 表现形式
      * `@one@two`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
调用`OgnlRuntime.getStaticField()`方法
      * `public boolean isNodeConstant(OgnlContext)`  
如果字段名称为“class”或类是Enum类型，直接返回true，否则通过反射判断是否为静态字段，返回判断结果
  * ASTStaticMethod
    * 表现形式
      * `@one@two()` _（无参方法）_
      * `@one@two(three, four)` _（含参方法）_
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算，结果放入args数组变量，并传入`OgnlRuntime.callStaticMethod()`方法，返回执行结果
  * ASTVarRef
    * 表现形式
      * `#one`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
调用`OgnlContext.get()`方法
      * `protected void getValueBody(OgnlContext, Object, Object)`  
调用`OgnlContext.set()`方法
  * ASTRootVarRef
    * 表现形式
      * `#root`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
调用`OgnlContext.getRoot()`方法
      * `protected void setValueBody(OgnlContext, Object, Object)`  
调用`OgnlContext.setRoot()`方法
  * ASTThisVarRef
    * 表现形式
      * `#this`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
调用`OgnlContext.getCurrentObject()`方法
      * `protected void setValueBody(OgnlContext, Object, Object)`  
调用`OgnlContext.setCurrentObject()`方法
_ASTNode中的ExpressionNode和它的子类，表示的是各种运算、关系表达式，对本文结论的影响不是特别大，因此就先搁置不再进行仔细分析了，感兴趣的同学继续加油努力，可以考虑共享成果:)_
### OGNL Accessor
在问题3中，还提到了Accessor类型的差异，也会影响OGNL最终的执行结果，因为大多时候 _（Property赋值/取值，Method调用）_
，是由它们去处理执行真正的操作，因此再坚持一下，简单快速的来看看这些Accessor。
OGNL中大致分为Method、Property和Elements三类Accessor，而XWork主要针对Method和Property两类进行了实现，下文以Struts2为主，罗列一下其中主要的Accessor类型。
_本部分以xwork-core-2.3.33为分析对象，主要描述关系，其中的逻辑细节就不在本文描述了，老版本的xwork在包结构上差异较大，请自行比对_
还是从爸爸开始：
  * PropertyAccessor
    * 类型
      * 接口
    * 主要方法
      * `Object getProperty(Map, Object, Object)`
      * `void setProperty(Map, Object, Object, Object)`
  * MethodAccessor
    * 类型
      * 接口
    * 主要方法
      * `Object callStaticMethod(Map, Class, String, Object[])`
      * `Object callMethod(Map, Object, String, Object[])`
  * ObjectPropertyAccessor
    * 类型
      * 实现了PropertyAccessor
    * 主要方法
      * `public Object getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
      * `public Class getPropertyClass(OgnlContext, Object, Object)`
  * ObjectMethodAccessor
    * 类型
      * 实现了MethodAccessor
    * 主要方法
      * `public Object callStaticMethod(Map, Class, String, Object[])`
      * `public Object callMethod(Map, Object, String, Object[])`
一小波儿子们：
  * CompoundRootAccessor
    * 类型
      * 实现了PropertyAccessor、MethodAccessor
    * 实现/重写方法
      * `public void getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
      * `public Object callMethod(Map, Object, String, Object[])`
      * `public Object callStaticMethod(Map, Class, String, Object[])`
  * ObjectAccessor
    * 类型
      * 型继承于ObjectPropertyAccessor
    * 实现/重写方法
      * `public void getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
  * ObjectProxyPropertyAccessor
    * 类型
      * 实现了PropertyAccessor
    * 实现/重写方法
      * `public void getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkCollectionPropertyAccessor
    * 类型
      * 继承于SetPropertyAccessor _（继承于ObjectPropertyAccessor）_
    * 实现/重写方法
      * `public void getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkEnumerationAccessor
    * 类型
      * 继承于EnumerationPropertyAccessor _（继承于ObjectPropertyAccessor）_
    * 实现/重写方法
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkIteratorPropertyAccessor
    * 类型
      * 继承于IteratorPropertyAccessor _（继承于ObjectPropertyAccessor）_
    * 实现/重写方法
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkListPropertyAccessor
    * 类型
      * 继承于ListPropertyAccessor _（继承于ObjectPropertyAccessor，实现了PropertyAccessor）_
    * 实现/重写方法
      * `public Object getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkMapPropertyAccessor
    * 类型
      * 继承于MapPropertyAccessor _（实现了PropertyAccessor）_
    * 实现/重写方法
      * `public Object getProperty(Map, Object, Object)`
      * `public void setProperty(Map, Object, Object, Object)`
  * XWorkMethodAccessor
    * 类型
      * 继承于ObjectMethodAccessor _（实现了MethodAccessor）_
    * 实现/重写方法
      * `public Object callMethod(Map, Object, String, Object[])`
      * `public Object callStaticMethod(Map, Class, String, Object[])`
  * XWorkObjectPropertyAccessor
    * 类型
      * 继承于ObjectPropertyAccessor
    * 实现/重写方法
      * `public Object getProperty(Map, Object, Object)`
#### 设置和获取
在跟踪分析S2-005解决问题3的过程中，发现XWork框架初始化 _（Struts2框架初始化流程中）_
时，在`DefaultConfiguration.reloadContainer()`方法中调用了`DefaultConfiguration.createBootstrapContainer()`方法，后者在创建完一堆工厂后调用`ContainerBuilder.create()`方法，随后触发OgnlValueStackFactory中配置了`@Inject`的`setContainer()`方法，它很重要的一部分逻辑就是将在XWork中定义的Accessor按类型设置进OgnlRuntime中的三个静态变量`_methodAccessors`、`_propertyAccessors`和`_elementsAccessors`中
_（请注意：当前调试环境为S2-005影响的struts2-core-2.1.8和xwork-core-2.1.6，版本较老，只为简单描述过程，新版如有差异，请自行比对）_ ：
当然，在上述过程中，只设置了一个：
  * PropertyAccessor
    * `com.opensymphony.xwork2.util.CompoundRoot` -> `CompoundRootAccessor`
而OgnlRuntime会为常见数据类型设置对应的Accessor _（OGNL原生）_
，这是OgnlRuntime类初始化阶段的工作，基于Java的类加载机制可知，它将会在上述过程中的第一次`OgnlRuntime.setPropertyAccessor()`之前完成。
当XWork框架初始化流程继续执行到`StrutsObjectFactory.buildInterceptor()`方法时，又调用了`ObjectFactory.buildBean()`方法，后者也触发了`OgnlValueStackFactory.setContainer()`方法，进行了下面的设置
_（实际调用链较长，只描述关键点，感兴趣的可以跟踪一下）_ ：
  * PropertyAccessor
    * `java.util.Enumeration` -> `XWorkEnumerationAccessor`
    * `java.util.ArrayList` -> `XWorkListPropertyAccessor`
    * `java.util.Iterator` -> `XWorkIteratorPropertyAccessor`
    * `java.lang.Object` -> `ObjectAccessor`
    * `java.util.Map` -> `XWorkMapPropertyAccessor`
    * `java.util.List` -> `XWorkListPropertyAccessor`
    * `java.util.HashSet` -> `XWorkCollectionPropertyAccessor`
    * `com.opensymphony.xwork2.util.CompoundRoot` -> `CompoundRootAccessor`
    * `java.util.Set` -> `XWorkCollectionPropertyAccessor`
    * `java.util.HashMap` -> `XWorkMapPropertyAccessor`
    * `java.util.Collection` -> `XWorkCollectionPropertyAccessor`
    * `com.opensymphony.xwork2.ognl.ObjectProxy` -> `ObjectProxyPropertyAccessor`
  * MethodAccessor
    * `java.lang.Object` -> `XWorkMethodAccessor`
    * `com.opensymphony.xwork2.util.CompoundRoot` -> `CompoundRootAccessor`
至此，Accessor的设置工作结束。
Accessor的获取则是根据需要调用OgnlRuntime中对应的`getter()`方法即可，如`getPropertyAccessor()`方法。
三个静态变量都是ClassCacheImpl类型 _（实现了ClassCache接口）_
，其中内置的`_table`字段用于存储实际内容，是一个Entry类型，类似于Map的key-value形式，默认大小512，key为Class类型，value为Object类型，按key的HashCode相对位置计算值
_（key.hashCode() & (512 - 1)）_顺序存储 _（可参考Hash Table数据结构，解决位置冲突的方案也类似Linked
Lists，每个Entry类型中包含一个next字段，可用于在位置冲突时指向存储在同位置的下一个元素）_
，类型本身线程不安全，OgnlRuntime在包装put/get操作时加了锁。
因此，Accessor的put/get操作基本可以参考Map类型。
### 结语
OGNL作为XWork框架的底层核心基石之一，它强大的功能特性让依托于XWork的Struts2成为当时非常流行的JavaEE开发框架。
因此，了解OGNL特性和内部处理逻辑，以及它与上层框架之间的交互逻辑，会对我们在Struts2，甚至XWork框架的安全研究工作上有非常大的帮助，例如本文主体讨论的表达式求值，就被很巧妙的利用在了S2-003以及之后的很多漏洞上，而且时间轴还非常靠前。
> 这就是一个安全研究员的内功修为，请这些大牛们收下一个身为程序员的我的膝盖。
### 参考
  1. [CVE-2010-1870: Struts2/XWork Remote Command Execution](http://blog.o0o.nu/2010/07/cve-2010-1870-struts2xwork-remote.html)
  2. [CVE-2011-3923 Yet another Struts2 Remote Command Execution](http://blog.o0o.nu/2012/01/cve-2011-3923-yet-another-struts2.html)
  3. [OGNL Language Guide](http://commons.apache.org/proper/commons-ognl/language-guide.html)
  4. [OGNL Expression Compilation](http://struts.apache.org/docs/ognl-expression-compilation.html)