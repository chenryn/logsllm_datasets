Eternal Exploits
Reverse Engineering of FuzzBunch and MS17-010
zerosum0x0
August 1983
Warning!
Presentation may contain classified information. 
Those with active security clearances are forewarned.
TOP SECRET//SI/TK//NOFORN//ICATION//4201337//REL TO DEF CON
Spot The Fed
Champ 2018
Agenda
●
Recap
(~2 mins)
○
Equation Group (NSA)
○
Shadow Brokers
●
SMBv1 Internals
(~5 mins)
○
Network packets
○
Driver structures
●
Exploits 
(~40 mins)
○
Blue
○
Champion
○
Romance
○
Synergy
●
Payloads
(~10 mins)
○
DoublePulsar
○
DarkPulsar
○
DanderSpritz
SMBv1 Internals
SMB Background
●
Server Message Block
●
1983 - Invented by Barry Feigenbaum (IBM)
○
Also, NetBIOS
●
Used EXTENSIVELY by Windows
○
"LanMan"
○
File Shares
●
Extensible protocol
○
Transport for DCE/RPC
■
psexec
Server Message Block (v1)
●
Header Block
○
Command
○
Flags (request/reply, unicode)
○
Errno
○
Signature
○
UID/TID/PID/MID
Server Message Block (v1)
●
Header Block
○
Command
○
Flags (request/reply, unicode)
○
Errno
○
Signature
○
UID/TID/PID/MID
●
Parameter Block
○
Contains a struct specific to the command
■
Fixed size WORD count
Server Message Block (v1)
●
Header Block
○
Command
○
Flags (request/reply, unicode)
○
Errno
○
Signature
○
UID/TID/PID/MID
●
Parameter Block
○
Contains a struct specific to the command
■
Fixed size WORD count
●
Data Block
○
Misc. arbitrary info for the command
■
Variable size BYTE count
SMBv1 Dialects
●
PC NETWORK PROGRAM 1.0
●
MICROSOFT NETWORKS 1.03
●
MICROSOFT NETWORKS 3.0
●
LANMAN1.0
●
Windows for Workgroups 3.1a
●
LM1.2X002
●
LANMAN2.1
●
NT LM 0.12  
●
Cairo
Srv.sys - SMBv1
●
SrvWorkQueues
●
SrvBlockingWorkQueues
○
Any operation that may take awhile
■
SMB is designed for speed
Srv.sys - SMBv1
●
SrvWorkQueues
●
SrvBlockingWorkQueues
○
Any operation that may take awhile
■
SMB is designed for speed
●
WORK_CONTEXT
○
C union mega-struct SMB info
Srv.sys - SMBv1
●
SrvWorkQueues
●
SrvBlockingWorkQueues
○
Any operation that may take awhile
■
SMB is designed for speed
●
WORK_CONTEXT
○
C union mega-struct SMB info
●
SMB may be “restarted” multiple times
○
Send to a blocking thread
○
Wait for more data
○
Change FspStartRoutine, re-queue
■
Back of the line...
SrvNet.sys - SMBv1/2/3 Networking
●
Added in Vista+
●
Handles the networking (WSK)
○
139 - NetBIOS
○
445 - SMB Direct
●
Registered handlers (undocumented, but trivial)
○
Srv.sys
○
Srv2.sys
●
Library exports
○
Memory look-aside lists
○
Auth checks
SMB Messages (of Interest)
●
Negotiate
●
Session Setup
●
Tree Connect
●
NT Create
●
Transactions
struct CONNECTION
{
// ...
SMB_DIALECT 
SmbDialect;
// ...
UNICODE_STRING 
ClientOSType;
UNICODE_STRING 
ClientLanManType;
// ...
};
struct SESSION
{
// ...
PCONNECTION 
Connection;
// ...
UNICODE_STRING 
UserName;
UNICODE_STRING 
UserDomain;
// ...
USHORT 
MaxBufferSize;
USHORT 
Uid;
// ...
BOOLEAN 
IsNullSession;
BOOLEAN 
IsAdmin; 
// ...
};
Administrative Trees (Shares)
●
$ = generally hidden from UI
●
C$
●
D$
●
ADMIN$
○
C:\Windows\
○
Administrator login required
●
IPC$
○
Interprocess Communication Share
■
i.e. also, sometimes access to certain named pipes
○
Often, anonymous login allowed
struct TREECONNECT
{
// ...
USHORT 
Tid;
// ...
};
Transaction Life Cycle
●
“IOCTL”
○
Perform variety of functions
■
Mostly file-system related
●
Can be too large for one SMB
○
Primary
■
Intermediary response
○
Secondary(s) 
●
"Executed" once all parts are received
○
Like db transactions
○
Final response
Transaction Packet Layout
●
An SMB inside an SMB
○
In addition to SMB Parameter/Data Blocks:
■
Transaction Setup
●
For Primary trans
■
Transaction Parameter
■
Transaction Data
Transaction Type Processing
●
Trans (Trans1)
○
Mailslots
○
MS-RAP
●
Trans2
○
>8.3 shortnames
○
OS/2 to NT file stuff
○
Processed similar to Trans1
●
NT Trans
○
Transaction Parameter/Data sizes
■
USHORT -> ULONG
●
WriteAndX
Primary Transaction Data+Parameter
●
Offset
○
How far into this SMB the TRANS data/parameter blocks begin
ParameterOffset
DataOffset
Primary Transaction Data+Parameter
●
Offset
○
How far into this SMB the TRANS data/parameter blocks begin
●
Count
○
How much is in this particular SMB 
ParameterOffset
DataOffset
ParameterCount
DataCount
Primary Transaction Data+Parameter
●
Offset
○
How far into this SMB the TRANS data/parameter blocks begin
●
Count
○
How much is in this particular SMB 
●
TotalCount
○
How much will be sent over all Primary/Secondary SMB
ParameterOffset
DataOffset
ParameterCount
DataCount
TotalParameterCount
TotalDataCount
Primary Transaction Data+Parameter
●
Offset
○
How far into this SMB the TRANS data/parameter blocks begin
●
Count
○
How much is in this particular SMB 
●
TotalCount
○
How much will be sent over all Primary/Secondary SMB
●
MaxCount
○
Maximum client buffer size to reserve for TRANS response
ParameterOffset
DataOffset
ParameterCount
DataCount
TotalParameterCount
TotalDataCount
MaxParameterCount
MaxDataCount
Secondary Transaction Data+Parameter
●
Offset
○
How far into this SMB the TRANS data/parameter blocks begin
●
Count
○
How much is in this particular SMB  
●
TotalCount
○
"MAY" be less than or equal to Primary SMB
●
Displacement
○
An offset where to begin write operation into the server buffer
■
Generally, the cumulative total of preceding Primary+Secondary Count(s)
ParameterDisplacement
DataDisplacement
struct TRANSACTION
{
// ...
PCONNECTION
Connection;
PSESSION
Session;
PTREECONNECT
TreeConnect;
// ...
PCHAR
InParameters;
PCHAR
OutParameters;
// often: = InParameters
PCHAR
InData;
PCHAR
OutData;
// often: = InData
// ...
USHORT 
Tid;
USHORT 
Pid;
USHORT 
Uid;
USHORT 
OtherInfo;
// MID (...or, FID)
// ...
};
_TRANSACTION Memory
●
SrvAllocateTransaction()
○
MIN alloc size = 0x5000
■
Except, Trans1.Setup == 0
○
MAX alloc size = 0x10400
■
STATUS_INSUFF_SERVER_RESOURCES
_TRANSACTION Memory
●
SrvAllocateTransaction()
○
MIN alloc size = 0x5000
■
Except, Trans1.Setup == 0
○
MAX alloc size = 0x10400
■
STATUS_INSUFF_SERVER_RESOURCES
●
SrvFindTransaction()
○
UID  - server, const
○
TID  - server, const
○
PID  - client, const
○
OtherInfo
■
MID  - client, arbitrary
■
FID  - server, const
Reference Counted Memory Blocks
●
WORK_CONTEXT
●
CONNECTION
●
SESSION
●
TREECONNECT
●
TRANSACTION
EternalBlue
Extended Attributes (EA)
●
Name/Value key-pair
○
Metadata attached to files
Extended Attributes (EA)
●
Name/Value key-pair
○
Metadata attached to files
●
OS/2 v1.2
○
Joint Microsoft/IBM OS
○
HPFS
Extended Attributes (EA)
●
Name/Value key-pair
○
Metadata attached to files
●
OS/2 v1.2
○
Joint Microsoft/IBM OS
○
HPFS
●
Windows NT
○
NTFS
■
Alternate Data Streams
○
WSL
■
Linux filesystem emulation
●
permissions, i.e. 0777
●
Case-sensitivity
Extended Attributes (EA)
●
Name/Value key-pair
○
Metadata attached to files
●
OS/2 v1.2
○
Joint Microsoft/IBM OS
○
HPFS
●
Windows NT
○
NTFS
■
Alternate Data Streams
○
WSL
■
Linux filesystem emulation
●
permissions, i.e. 0777
●
Case-sensitivity
●
FEA vs. GEA
○
FEA = name+value
○
GEA = name
OS/2 FEA
struct FEA
{
BYTE
fEA;
// "Flags" = 0x0 or 0x80
BYTE
cbName;
WORD
cbValue;
// CHAR
szName[cbName];
// null-terminator
// BYTE
chValue[cbValue];
// no null-terminator
};
#define FEA_SIZE(ea) \
(sizeof(FEA) + (ea)->cbName + 1 + (ea)->cbValue)
OS/2 FEALIST
struct FEALIST
{
ULONG
cbList;
// 32-bit size 
FEA
list[];
// Loop over all using NEXT_FEA()
};
#define NEXT_FEA(ea) \
(char*)ea + FEA_SIZE(ea)
NT FEA
struct FILE_FULL_EA_INFORMATION
{
ULONG
NextEntryOffset;
UCHAR
Flags;
// 0x0 or 0x80
UCHAR
EaNameLength;
USHORT
EaValueLength;
// CHAR
EaName[EaNameLength];
// null-terminated
// BYTE
EaValue[EaValueLength];
// not
// BYTE
Alignment[+3 & ~3];
// align DWORD
};
NT FEA(LIST)
struct FILE_FULL_EA_INFORMATION
{
ULONG
NextEntryOffset;
// Parse list until == 0
UCHAR
Flags;
// 0x0 or 0x80
UCHAR
EaNameLength;
USHORT
EaValueLength;
// CHAR
EaName[EaNameLength];
// null-terminated
// BYTE
EaValue[EaValueLength];
// not
// BYTE
Alignment[+3 & ~3];
// align DWORD
};
Bug #1 - Integer Cast Error
ULONG FEALIST.cbList;
SmbPutUshort(&FeaList->cbList, PTR_DIFF_SHORT(fea, FeaList));
Bug #1 - Integer Cast Error
ULONG FEALIST.cbList;
SmbPutUshort(&FeaList->cbList, PTR_DIFF_SHORT(fea, FeaList));
Win7
HIDWORD
LODWORD
Attacker
0001 
0000
Valid Size
Vuln Size
NT Buffer Size
Bug #1 - Integer Cast Error
ULONG FEALIST.cbList;
SmbPutUshort(&FeaList->cbList, PTR_DIFF_SHORT(fea, FeaList));
Win7
HIDWORD
LODWORD
Attacker
0001 
0000
Valid Size
0000 
ff5d
Vuln Size
NT Buffer Size
Bug #1 - Integer Cast Error
ULONG FEALIST.cbList;
SmbPutUshort(&FeaList->cbList, PTR_DIFF_SHORT(fea, FeaList));
Win7
HIDWORD
LODWORD
Attacker