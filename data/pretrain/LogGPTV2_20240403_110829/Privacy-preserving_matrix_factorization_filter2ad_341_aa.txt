title:Privacy-preserving matrix factorization
author:Valeria Nikolaenko and
Stratis Ioannidis and
Udi Weinsberg and
Marc Joye and
Nina Taft and
Dan Boneh
Privacy-Preserving Matrix Factorization
Stratis Ioannidis
Technicolor
Udi Weinsberg
Technicolor
Valeria Nikolaenko
Stanford University
PI:EMAIL
PI:EMAIL
PI:EMAIL
Marc Joye
Technicolor
PI:EMAIL
Nina Taft
Technicolor
PI:EMAIL
Dan Boneh
Stanford University
PI:EMAIL
ABSTRACT
Recommender systems typically require users to reveal their
ratings to a recommender service, which subsequently uses
them to provide relevant recommendations. Revealing ra-
tings has been shown to make users susceptible to a broad
set of inference attacks, allowing the recommender to learn
private user attributes, such as gender, age, etc.
In this
work, we show that a recommender can proﬁle items with-
out ever learning the ratings users provide, or even which
items they have rated. We show this by designing a system
that performs matrix factorization, a popular method used
in a variety of modern recommendation systems, through
a cryptographic technique known as garbled circuits. Our
design uses oblivious sorting networks in a novel way to
leverage sparsity in the data. This yields an eﬃcient im-
plementation, whose running time is Θ(M log2 M ) in the
number of ratings M . Crucially, our design is also highly
parallelizable, giving a linear speedup with the number of
available processors. We further fully implement our sys-
tem, and demonstrate that even on commodity hardware
with 16 cores, our privacy-preserving implementation can
factorize a matrix with 10K ratings within a few hours.
Categories and Subject Descriptors
K.4.1 [Computers and Society]: Public Policy Issues—pri-
vacy; H.2.8 [Database Management]: Database Applications—
data mining, algorithms, design, performance; G.1.6 [Numerical
Analysis]: Optimization—gradient methods
Keywords
Garbled circuits; matrix factorization; multi-party computation;
privacy; recommender systems
1.
INTRODUCTION
A great deal of research and commercial activity in the
last decade has led to the wide-spread use of recommenda-
tion systems. Such systems oﬀer users personalized recom-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516751.
mendations for many kinds of items, such as movies, TV
shows, music, books, hotels, restaurants, and more. To re-
ceive useful recommendations, users supply substantial per-
sonal information about their preferences, trusting that the
recommender will manage this data appropriately.
Nevertheless, earlier studies [49, 37, 47, 1, 46] have iden-
tiﬁed multiple ways in which recommenders can abuse such
information or expose the user to privacy threats. Recom-
menders are often motivated to resell data for a proﬁt [6],
but also use it to extract information beyond what is in-
tentionally revealed by the user. For example, even records
of user preferences typically not perceived as sensitive, such
as movie ratings or a person’s TV viewing history, can be
used to infer a user’s political aﬃliation, gender, etc., [61].
The private information that can be inferred from the data
in a recommendation system is constantly evolving as new
data mining and inference methods are developed, for ei-
ther malicious or benign purposes. In the extreme, records
of user preferences can be used to even uniquely identify a
user : Naranyan and Shmatikov strikingly demonstrated this
by de-anonymizing the Neﬂix dataset [49]. As such, even if
the recommender is not malicious, an unintentional leakage
of such data makes users susceptible to linkage attacks [46].
Because we cannot always foresee future inference threats,
accidental information leakage, or insider threats (purpose-
ful leakage), it is appealing to consider how one might build
a recommendation system in which users do not reveal their
personal data in the clear.
In this work, we study a widely used collaborative ﬁltering
technique known as matrix factorization [31, 5], that was in-
strumental in winning the Netﬂix prize competition [35], and
is a core component in many real world recommendation sys-
tems. It is not a priori clear whether matrix factorization can
be performed in a privacy-preserving way; there are several
challenges associated with this task. First, to address the
privacy concerns raised above, matrix factorization should
be performed without the recommender ever learning the
users’ ratings, or even which items they have rated. This re-
quirement is key: earlier studies [61] show that even knowing
which movie a user has rated can be used to infer, e.g., her
gender. Second, such a privacy-preserving algorithm ought
to be eﬃcient, and scale gracefully (e.g., linearly) with the
number of ratings submitted by users. The privacy require-
ments imply that our matrix factorization algorithm ought
to be data-oblivious: its execution ought to not depend on
the user input. Moreover, the operations performed by ma-
trix factorization are non-linear; thus, it is not a-priori clear
how to implement matrix factorization eﬃciently under both
801of these constraints. Finally, in a practical, real-world sce-
nario, users have limited communication and computation
resources, and should not be expected to remain online after
they have supplied their data. We thus seek a “send-and-
forget” type solution, operating in the presence of users that
move back and forth between being online and oﬄine from
the recommendation service.
We make the following contributions.
• We design a protocol that meets all of the above goals for
privacy, eﬃciency and practicality. Our protocol is hy-
brid, combining partially homomorphic encryption with
Yao’s garbled circuits.
• We propose and use in our design a novel data-oblivious
algorithm for matrix factorization.
Implemented as a
garbled circuit, it yields complexity O(M log2 M ), where
M the number of submitted ratings. This is within a
log2 M factor of matrix factorization complexity in the
clear. We achieve this by using Batcher sorting networks,
allowing us to leverage sparsity in submitted ratings.
• Crucially, using sorting networks as a core component of
our design allows us to take full advantage of the paral-
lelization that such sorting networks enable. We incor-
porate this and several other optimizations in our design,
illustrating that garbled circuits for matrix factorization
can be brought into the realm of practicality.
• Finally, we implement our entire system using the FastGC
framework [24] and evaluate it with real-world datasets.
We modiﬁed the FastGC framework in two important
ways, by enabling parallelized garbling and computation
across multiple processors, and by reducing the memory
footprint by partitioning the circuit in layers. Further ad-
ditional optimizations, including reusing sorting results,
and implementing operations via free xor gates [34], al-
low us to run matrix factorization over 104 ratings within
a few hours. Given that recommender systems execute
matrix factorization on, e.g., a weekly basis, this is ac-
ceptable for most real-life applications.
To the best of our knowledge, we are the ﬁrst to enable
matrix factorization over encrypted data. Although sorting
networks have been used before for simple computations, our
work is the ﬁrst to apply sorting networks to leverage matrix
sparsity, especially in a numerical task as complex as matrix
factorization. Overcoming scalability and performance chal-
lenges, our solution is close to practicality for modern day
recommendation services.
The remainder of this paper is organized as follows. Sec-
tion 2 outlines the problem of privacy-preserving matrix fac-
torization. Our solution is presented in Section 3. We dis-
cuss extensions in Section 4 and our implementation and
experimental results in Sections 5 and 6, respectively.
2. PROBLEM STATEMENT
2.1 Matrix Factorization
In the standard “collaborative ﬁltering” setting [35], n users
rate a subset of m possible items (e.g., movies). For [n] :=
{1, . . . , n} the set of users, and [m] := {1, . . . , m} the set of
items, we denote by M ⊆ [n] × [m] the user/item pairs for
which a rating has been generated, and by M = |M| the
total number of ratings. Finally, for (i, j) ∈ M, we denote
by rij ∈ R the rating generated by user i for item j.
In a practical setting, both n and m are large numbers,
typically ranging between 104–106. In addition, the ratings
provided are sparse, that is, M = Θ(n + m), which is much
smaller than the total number of potential ratings n·m. This
is consistent with typical user behavior, as each user may
rate only a relatively small number of items (not depending
on m, the “catalogue” size).
Given the ratings in M, a recommender system wishes
to predict the ratings for user/item pairs in [n] × [m] \ M.
Matrix factorization performs this task by ﬁtting a bi-linear
model on the existing ratings. In particular, for some small
dimension d ∈ N, it is assumed that there exist vectors
ui ∈ Rd, i ∈ [n], and vj ∈ Rd, j ∈ [m], such that
rij = (cid:104)ui, vi(cid:105) + εij
where εij are i.i.d. Gaussian random variables. The vectors
ui and vj are called the user and item proﬁles, respectively.
i ]i∈[n] ∈ Rn×d for the n× d
We will use the notation U = [uT
matrix whose i-th row comprises the proﬁle of user i, and
j ]i∈[m] ∈ Rm×d for the m × d matrix whose j-th row
V = [vT
comprises the proﬁle of item j.
Given the ratings {rij : (i, j) ∈ M}, the recommender typ-
ically computes the proﬁles U and V by performing the fol-
lowing regularized least squares minimization:1
(rij−(cid:104)ui, vj(cid:105))2 +λ
(cid:107)ui(cid:107)2
2 +µ
(cid:107)vj(cid:107)2
2
(1)
(cid:88)
i∈[n]
(cid:88)
j∈[m]
(cid:88)
min
U,V
1
M
(i,j)∈M
for some positive λ, µ > 0. The computation of U, V through
(1) is a computationally intensive task even in the clear, and
is typically performed by recommenders in “batch-mode”,
e.g., once a week, using ratings collected thus far. These
proﬁles are subsequently used to predict ratings through:
ˆrij = (cid:104)ui, vj(cid:105),
i ∈ [n], j ∈ [m] .
(2)
The regularized mean square error in (1) is not a convex
function; several methods for performing this minimization
have been proposed in literature [35, 31, 5]. We focus on gra-
dient descent [35], a popular method used in practice, which
we review below. Denoting by F (U, V ) the regularized mean
square error in (1), gradient descent operates by iteratively
adapting the proﬁles U and V through the adaptation rule
ui(t) = ui(t − 1) − γ∇ui F (U (t − 1), V (t − 1)) ,
vi(t) = vi(t − 1) − γ∇vi F (U (t − 1), V (t − 1)) ,
where γ > 0 a small gain factor and
∇ui F (U, V ) = −2(cid:80)
∇vj F (U, V ) = −2(cid:80)
j:(i,j)∈M vj(rij − (cid:104)ui, vj(cid:105)) + 2λui ,
i:(i,j)∈M ui(rij − (cid:104)ui, vj(cid:105)) + 2µvi ,
(3)
(4)
where U (0) and V (0) consist of uniformly random norm 1
rows (i.e., proﬁles are selected u.a.r. from the norm 1 ball).
2.2 Setting
Figure 1 depicts the actors in our privacy-preserving ma-
trix factorization system. Each user i ∈ [n] wants to keep
her ratings {rij : (i, j) ∈ M} private. The recommender sys-
tem (RecSys), performs the privacy-preserving matrix fac-
torization, while a crypto-service provider (CSP), enables
this private computation.
1Assuming Gaussian priors on the proﬁles U and V , the
minimization (1) corresponds to maximum likelihood esti-
mation of U and V .
802{r1j :(1,j)∈M}
{r2j :(2,j)∈M}
x
x
...x
RecSys
CSP
V
{rnj :(n,j)∈M}
Figure 1: The parties in our ﬁrst protocol de-
sign.
The recommender system learns nothing
about users’ ratings, other than the model V .
Our objective is to design a protocol that allows the Rec-
Sys to execute matrix factorization while neither the RecSys
nor the CSP learn anything other than the item proﬁles,2
i.e., V (the sole output of RecSys in Fig. 1). In particular,
neither should learn a user’s ratings, or even which items
she has actually rated. Clearly, a protocol that allows the
recommender to learn both user and item proﬁles reveals too
much: in such a design, the recommender can trivially infer
a user’s ratings from the inner product (2). As such, our