(21)
s)u=1
tSA
=
βutibu =
βu(k1
αibukwk
(22)
+ (k1 + k(A)
φr )απwπ + PRF(k2, i||bu))
m)k=1
T PA checks SA using skT PA = (k2, k3 = k1 + kφ) by veri-
fying whether the following equation holds:
βu · PRF(k2, i||bu)
+
s!u=1
?= k3cSA
tSA
s!u=1
m!k=1
?= (k1+kφ)
m!k=1
βu(k1
βu(
αibukwk+απwπ)+
βu·PRF(k2, i||bu)
s!u=1
?=
This equation holds if and only if k(A)
i=1 r(A)
s!u=1
i Bi and kφ =!z
αibukwk + (k1 + kφ)απwπ + PRF(k2, i||bu))
φr =
i=1 riBi, the equation holds if and
only if ri = r(A)
,∀i ∈ [1, z]. Thus, the probability that the
equation holds is 1/qz. If q is chosen large enough (i.e., 160
bits), the probability is 1/2160z, which is negligible.
φr = kφ. Since k(A)
!z
i
m)k=1
s)u=1
6. EFFICIENCY ANALYSIS
6.1 Theoretical Analysis
Besides the feature comparison described in Table 1, the
eﬃciency comparison between [24–26] and our proposed ELAR
48
q
.
scheme is given in Table 3. Let ξ denote the size of an ele-
ment in Fq in term of bits (ξ = log2 q). A coded block size
is (z + m)ξ because cij ∈ Fz+m
We can observe in the Table 3 that the encode costs in
In the check phase,
all the schemes are almost the same.
while [24] does not support public authentication (no T PA),
[25,26] and ELAR do support it. Thus, the computation cost
on the client-side in [24] is not O(1) as [25, 26] and ELAR.
Furthermore, [26] lacks of spot-checking; thus, its compu-
tation cost on the server-side is larger than the cost in [25]
and ELAR. In the repair phase, [24] does not support direct
repair and [25] only supports uncompleted-direct-repair (as
mentioned in Section 1); thus their computation costs on
the client-side are not O(1) as [26] and ELAR. As a result,
the communication costs in [24, 25] are also larger than the
costs in [26] and ELAR. In addition, [26] does not have spot-
checking during the repair phase; thus its computation cost
on the healthy-server-side is larger than the cost in ELAR.
In summary, ELAR has the lowest costs for all the phases
under complexity analysis.
Implementation
6.2
In this section, we evaluate the computation performance
of our scheme. A program written by Python 2.7.11 is ex-
ecuted using a MacBook Pro Intel Core i5 processor, 2.7
GHz, 16 GB of RAM, OS X EI Capitan version 10.11.3.
The prime q is set to be 256 bits. The number of servers is
set to be 10 (n = 10). The number of coded blocks stored
in each server is set to be 10 (d = 10). The number of spot
checks for each server is set to be a half of d (s = d/2).
Since |F| = m ×| vk| (where |F|, m and |vk| denote the
ﬁle size, the number of ﬁle blocks, and the ﬁle block size,
respectively), the implementation is divided into 2 cases:
• Case 1 - ﬁx m and change |vk| according to |F|: In
this case, we ﬁx m = 80. The experiment results can
be observed with four sets of computation performance
(keygen, encode, check and repair) in Fig. 3 by varying
ﬁle size |F|.
• Case 2 - ﬁx |vk| and change m according to |F|: In this
case, we ﬁx ﬁle block size |vk| = 223 bits (1 MB). The
experiment results can be observed with four sets of
(a) Init, Keygen
(b) Encode
(c) Check
(d) Repair
Figure 3: Case 1 - ﬁx number of ﬁle blocks and change ﬁle block size (Note: init, keygen and encode are executed
only one time in the beginning while check and repair are executed often during the system lifetime)
(a) Init, Keygen
(b) Encode
(c) Check
(d) Repair
Figure 4: Case 2 - ﬁx ﬁle block size and change number of ﬁle blocks (Note: init, keygen and encode are executed
only one time in the beginning while check and repair are executed often during the system lifetime)
(a) Init, Keygen
(b) Encode
(c) Check
(d) Repair
Figure 5: Case 1 vs. case 2 with ﬁle size |F| = 1 GB (Note: keygen and encode are executed only one time in the
beginning while check and repair are executed often during the system lifetime)
computation performance (keygen, encode, check and repair)
in Fig. 4 by varying ﬁle size |F|.
Case 1 vs. Case 2: Through the experiment results, we
recommend case 2 because of the following reasons:
• In keygen phase, case 1 (Fig. 3 (a)) has lower time than
case 2 (Fig. 4 (a)) but it is exponential while case 2
(Fig. 4 (a)) is linear. Therefore, for |F| = 1 GB (Fig. 5
(a)), the time in case 1 is much higher than case 2.
• In encode phase, the time in case 1 (Fig. 3 (b)) and
case 2 (Fig. 4 (b)) are almost the same. Therefore, for
|F| = 1 GB (Fig. 5 (b)), the time in case 1 and case 2
is not so diﬀerent.
• In check phase, while the time in case 1 (Fig. 3 (c)) is
linear, the time case 2 (Fig. 4 (c)) is constant. There-
fore, for |F| = 1 GB (Fig. 5 (c)), the time in case 1 is
dominant to case 2.
• In repair phase, similar to check phase, while the time
in case 1 (Fig. 3 (d)) is linear, the time in case 2 (Fig. 4
(d)) is constant. Therefore, for |F| = 1 GB (Fig. 5 (d)),
the time case 1 is dominant to case 2.
Remark that the keygen and encode phases are ex-
ecuted only one time in the beginning while check
and repair phases are executed very often during the
system lifetime. We are thus attentive to the perfor-
mances of check and repair phases. For 1 GB in case 2,
the check time is merely 0.002 seconds for challenging, 0.61
seconds for responding and 0.78 seconds for verifying; and
the repair time is only 0.84 seconds for the new server and
0.61 seconds for other servers. The above results show that
the ELAR is very eﬃcient and applicable in a real system.
7. CONCLUSION AND FUTURE WORK
In this paper, we present ELAR, a network-coding-based
POR scheme that practically addresses data audit and data
repair of today’s cloud backup storage. ELAR not only al-
lows a third party auditor (T PA) to check the cloud servers
periodically without using an asymmetric-key cryptography,
but also provides a direct repair process when a server is
corrupted. The client is thus free from data audit and
data check. The implementation results show that the audit
phase and repair phase are eﬃcient. ELAR is thus very ap-
plicable for a real cloud system. Future work is investigated
to deal with ﬁle updates and malicious T PA.
49
Acknowledgement
This work was partly supported by Grant-in-Aid for Scien-
tiﬁc Research (C) (16K00183).
8. REFERENCES
[1] R. Curtmola, O. Khan, R. Burns and G. Ateniese.
MR-PDP: Multiple-Replica Provable Data Possession.
In: Proceedings of the 28th Distributed Computing
Systems Conference - ICDCS’08, pp. 411-420, 2008.
[2] K. Bowers, A. Juels, and A. Oprea. HAIL: A
high-availability and integrity layer for cloud Storage.
In: Proceedings of the 16th ACM Computer and
communications security Conference - CCS’09, pp.
187-198, 2009.
[3] H. Lin, and W. Tzeng. A Secure Erasure Code-Based
Cloud Storage System with Secure Data Forwarding.
In: IEEE Transactions on Parallel and Distributed
Systems, vol. 23, no. 6, pp. 995-1003, 2012.
[4] R. Ahlswede, N. Cai, S. Li and R. Yeung. Network
information ﬂow. In: IEEE Transactions on
Information Theory, vol. 46, no. 4, pp. 1204-1216,
2000.
[5] S. Li, R. Yeung and N. Cai. Linear Network Coding.
In: IEEE Transactions on Information Theory, vol.
49, no. 2, pp. 371-381, 2003.
[6] R. Koetter and M. Muriel. An Algebraic Approach to
Network Coding. In: IEEE/ACM Transactions on
Networking (TON), vol. 11, no. 5, pp. 782-795, 2003.
[7] A. Dimakis, P. Godfrey, Y. Wu, M. Wainwright and
K. Ramchandran. Network coding for distributed
storage systems. In: IEEE Transactions Information
Theory, vol. 56, no. 9, pp. 4539-4551, 2010.
[8] H. Chen, Y. Hu, P. Lee, and Y. Tang. NCCloud: A
Network-Coding-Based Storage System in a
Cloud-of-Clouds. In: IEEE Transactions on
Computers, vol. 63, no. 1, pp.31-44, 2013.
[9] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L.
Kissner, Z. Peterson, and D. Song. Provable Data
Possession at Untrusted Stores. In: Proceedings of the
14th ACM Conference on Computer and
Communications Security - CCS’07, pp. 598-609, 2007.
[10] G. Ateniese, R.D. Pietro, L.V. Mancini, and G.
Tsudik. Scalable and Eﬃcient Provable Data
Possession. In: Proceedings of the 4th Conference on
Security and Privacy in Communication Networks -
SecureComm’08, article no. 9, 2008.
[11] A. Juels and B. Kaliski B PORs. Proofs of
retrievability for large ﬁles. In: Proceedings of the 4th
ACM Conference on Computer and Communications
Security - CCS’07, pp. 584-597, 2007.
[12] H. Shacham and B. Waters. Compact Proofs of
Retrievability. In: Proceedings of the 14th
International Conference on the Theory and
Application of Cryptology and Information Security -
ASIACRYPT’08, pp. 90-107, 2008.
[13] K. Bowers, A. Juels and A. Oprea. Proofs of
retrievability: theory and implementation. In:
Proceedings of the 1st ACM workshop on Cloud
computing security - CCSW’09, pp. 43-54,2009.
[14] D. Cash, A. Kupcut, and D. Wichs. Dynamic Proofs
of Retrievability via Oblivious RAM. In: Proceedings
of the 32nd Annual International Conference on the
Theory and Applications of Cryptographic Techniques
- EUROCRYPT’13, pp. 279-295, 2013.
[15] Q. Zheng, and S. Xu. Fair and Dynamic Proofs of
Retrievability. In: Proceedings of the 1st ACM
conference on Data and application security and
privacy - CODASPY’11, pp. 237-248, 2011.
[16] C. Wang, S. Chow, Q. Wang, and K. Ren.
Privacy-Preserving Public Auditing for Secure Cloud
Storage. In: IEEE Transactions on Computers, vol.
62, no. 2, pp. 362-375, 2011.
[17] C. Wang, Q. Wang, K. Ren, and W. Lou.
Privacy-Preserving Public Auditing for Data Storage
Security in Cloud Computing. In: Proceedings of the
29th Conference Computer Communications -
INFOCOM’10, pp. 525-533, 2010.
[18] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou.
Enabling Public Veriﬁability and Data Dynamics for
Storage Security in Cloud Computing. In: Proceedings
of the 14th European Symposium on Research in
Computer Security - ESORICS’09, pp. 355-370, 2009.
[19] L. Wei, H. Zhu, Z. Cao, X. Dong, W. Jia, Y. Chen,
and A. Vasilakos. Security and privacy for storage and
computation in cloud computing. In: Srpinger Journal
on Information Sciences, vol. 258, 2014, pp. 371-386.
[20] K. Yang, and X. Jia. An Eﬃcient and Secure Dynamic
Auditing Protocol for Data Storage in Cloud
Computing. In: IEEE Transactions on Parallel and
Distributed Systems, vol. 24, no. 90, pp. 1717-1726,
2012.
[21] B. Wang, Ba. Li, and Hui Li. Panda: Public Auditing
for Shared Data with Eﬃcient User Revocation in the
Cloud. In: IEEE Transactions on Services Computing,
vol. 8, no. 1, pp. 92-106, 2013.
[22] Q. Wang, C. Wang, K. Ren, W. Lou, and J. Li.
Enabling Public Auditability and Data Dynamics for
Storage Security in Cloud Computing. In: IEEE
Transactions on Parallel and Distributed Systems, vol.
22, no. 5, pp. 847-859, 2011.
[23] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of
Retrievability via Hardness Ampliﬁcation. In:
Proceedings of the 6th Theory of Cryptography
Conference on Theory of Cryptography - TCC’09, pp.
109-127, 2009.
[24] B. Chen, R. Curtmola, G. Ateniese and R. Burns.
Remote Data Checking for Network Coding-based
Distributed Storage Systems. In: Proceedings of the
2nd ACM Cloud Computing Security Workshop -
CCSW’10, pp. 31-42, 2010.
[25] A. Le, and A. Markopoulou. NC-Audit: Auditing for
network coding storage. In: Proceedings of
International Symposium on Network Coding
(NetCod), pp. 155-160, 2012.
[26] K. Omote, and T. Thao, “MD-POR: Multi-source and
Direct Repair for Network Coding-based Proof of
Retrievability”. In: Journal of Distributed Sensor
Networks (IJDSN) on Advanced Big Data
Management and Analytics for Ubiquitous Sensors -
IJDSN, vol. 2015, article ID: 586720, 2015.
[27] W. Yana, M. Yanga, L. Lia, and H. Fang. Short
signature scheme for multi-source network coding. In:
Journal Computer Communications, vol. 35, no. 3, pp.
50
344-351, 2012.
[28] B. Wang, B. Li, and Hui Li. Knox: Privacy-Preserving
Auditing for Shared Data with Large Groups in the
Cloud. In: Proceedings of the 10th International
Conference on Applied Cryptography and Network
Security - ACNS’12, pp. 507-525, 2012.
[29] F. Chen, T. Xiang, Y. Yang, and S. Chow. Secure
cloud storage meets with secure network coding. In:
Proceedings IEEE Conference on Computer
Communications - INFOCOM’14, pp. 673-681, 2014.
[30] B. Chen, and R. Curtmola. Towards Self-Repairing
Replication-Based Storage Systems Using Untrusted
Clouds. In: Proceedings of the 3rd ACM conference on
Data and application security and privacy -
CODASPY, pp. 377-388, 2013.
[31] S. Agrawal, and D. Boneh. Homomorphic MACs:
MAC-Based Integrity for Network Coding. In:
Proceedings of the 7th Applied Cryptography and
Network Security Conference - ACNS’09, pp. 292-305,
2009.
[32] A. Le, and A. Markopoulou. On detecting pollution
attacks in inter-session network coding. In:
Proceedings of the 31st IEEE Conference on Computer
Communications - INFOCOM’12, pp. 343-351, 2012.
51