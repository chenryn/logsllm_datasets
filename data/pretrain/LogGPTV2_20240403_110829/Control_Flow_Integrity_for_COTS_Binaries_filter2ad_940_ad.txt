system calls, and stores the address of the signal handlers
speciﬁed by these calls in a table. The signal handler ar-
gument is then changed so that control will be transferred
to a wrapper function, which contains code that jumps
to the user-speciﬁed handler. Since this wrapper will be
instrumented as usual, instrumented version of the user-
speciﬁed handler will be invoked.
Improving Branch Prediction (BP)
6 Optimizations
6.1
Modern processors use very deep pipelines, so branch
prediction misses can greatly decrease performance. Un-
fortunately, our translation of returns (into a combination
of pop and jmp) leads to misses. When a return instruc-
tion is used, the processor is able to predict the target by
maintaining a stack that keeps track of calls. When it is
replaced by an indirect jump, especially one that is al-
ways made from a single trampoline routine, prediction
fails.
To address this problem, we modiﬁed the transforma-
tion of calls and returns as shown in Figures 4 and 5.
The original call is transformed into another call into stub
code that is part of the instrumentation. There is a unique
stub for each call site. The code in the stub adjusts the
return address on the stack so that it will have the same
value as in the untransformed program. This requires
addition of a constant that represents the offset between
the call instructions in the original and transformed code.
Similarly, at the time of return, the return address on the
stack is translated from its original value to the corre-
sponding value in the transformed program, after which
a normal return can be executed.
USENIX Association  
22nd USENIX Security Symposium  345
9
060d1:
ret
.... #address translation
add $4, %esp
mov %edx, (%esp)
ret
Figure 5: Optimized instrumentation of returns
The key point about this transformation is that the pro-
cessor sees a return in Figure 5 that returns from the call
it executed (Figure 4, label L_060b1). Although the ad-
dress on the program stack was adjusted (Figure 4, la-
bel S_060b1), this is reversed by address translation in
Figure 5. As a result, the processor’s predicted return
matches the actual return address on the stack.
6.2 Avoiding Address Translation (AT)
We explored three optimizations aimed at eliminating ad-
dress translation overheads in the following cases:
AT.1 jump tables
AT.2 PIC translation
AT.3 return target speculation
For the ﬁrst optimization, instead of computing an orig-
inal code address and then translating it into new ad-
dresses, we create a new table that contains translated
addresses. The content of the table is copied from the
original table, and then each value is translated (at in-
strumentation time) into the corresponding new address.
A catch here is that we don’t know the size of the original
table. Note, however, that we have a good guess, based
on the CC computation technique from Section 3.2. We
ﬁrst check that the index variable is within this range, and
if so, use the new table. Otherwise, we use the old table,
and translate the jump address at runtime.
PIC has several code patterns,
including a call to
get pc thunk and a call to the next instruction. The ba-
sic function of the pattern is getting the current PC and
copying it into a general purpose register. In the trans-
lated code, however, get pc thunk introduces an address
lookup for return. This extra translation could be avoided
by translating this version into a call of the next instruc-
tion. No returns are used in this case, thereby avoiding
address translation overhead. (It is worth noting that us-
ing a call/pop combination does not affect branch pre-
diction for return instructions. The processor is able to
correct for minor violations of call/return discipline.
In the third case, if a particular ICF transfer tends to
target the same location most of the time, we can speed
it up by avoiding address translation for this location. In-
stead, a comparison is introduced to determine if the tar-
get is this location, and if so, introducing a direct jump.
In our implementation, we choose to apply it only to re-
turn instruction. We used proﬁling to determine if the
return frequently targets the same location.
6.3 Violating Transparency (VT)
Using static analysis results, we can safely avoid some
of the overheads associated with full transparency. The
following are two optimizations we use:
VT.1 no saving of eﬂags
VT.2 use non-transparent calls
To achieve, VT.1, we analyze all potential indirect and
direct control targets. If there is no instruction that uses
eﬂags prior to all instructions that deﬁne it, then we can
safely use VT.1. In fact, we discover that eﬂags is live
only in a few jump tables.
When VT.2 is enabled, all return addresses are within
the new code. Note that VT.2 is always enabled on PIC
patterns, i.e., call of get pc thunk and call of next in-
struction. This is because it is simple to analyze this pat-
tern and determine that non-transparent mode will not
lead to any problems, as long as the offset added to ob-
tain data address is appropriately adjusted.
7 Evaluation
We ﬁrst evaluate functionality of our system, focusing on
disassembly, and compatibility with different compilers.
Next, we evaluate its effectiveness in terms of the AIR
metric and attack defense. Then, we evaluate its runtime
and memory overheads, Finally, we summarize the lim-
itations of the approach and its current implementation.
Module
Package
libxul.so
gimp-console-2.6
libc.so
libnss3.so
libmozsqlite3.so
libfreebl3.so
libsoftokn3.so
libnspr4.so
libssl3.so
libm.so
libnssdbm3.so
libsmime3.so
ld.so
gimpressionist
script-fu
libnssckbi.so
libtestcrasher.so
gﬁg
libpthread.so
libnsl.so
map-object
libresolv.so
libnssutil3.so
Total
ﬁrefox-5.0
gimp-2.6.5
glibc-2.13
ﬁrefox-5.0
ﬁrefox-5.0
ﬁrefox-5.0
ﬁrefox-5.0
ﬁrefox-5.0
ﬁrefox-5.0
glibc-2.13
ﬁrefox-5.0
ﬁrefox-5.0
glibc-2.13
gimp-2.6.5
gimp-2.6.5
ﬁrefox-5.0
ﬁrefox-5.0
gimp-2.6.5
glibc-2.13
glibc-2.13
gimp-2.6.5
glibc-2.13
ﬁrefox-5.0
Size
26M
7.7M
8.1M
4.1M
1.8M
876K
756K
776K
864K
620K
570K
746K
694K
403K
410K
733K
676K
442K
666K
448K
257K
275K
311K
58M
# of Ins-
tructions
4.3M
385K
301K
235K
128K
66K
50K
41K
40K
35K
34K
30K
28K
21K
21K
19K
17K
17K
15K
15K
15K
13K
13K
5.84M
Figure 6: Disassembly Correctness
# of
Errors
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
346  22nd USENIX Security Symposium 
USENIX Association
10
Application Name
Wireshark v1.6.2
gedit v3.2.3
lyx v2.0.0
acroread9
mplayer 4.6.1
ﬁrefox 5 (no JIT)
perl
vim
gimp-2.6
lynx 2.8.8dev
ssh 5.8p1
evince 3.2.1
Experiment
capture packets on LAN for 20 minutes
open multiple ﬁles; edit; print; save
open a large report; edit; convert to pdf/dvi/ps
open 20 pdf ﬁles; scroll;print;zoom in/out
play an mp3 ﬁle
open web pages
execute a complex script, compare the output
open ﬁle, copy/paste, search, edit
load jpg picture, crop, blur, sharpen, etc.
open web pages
login to a remote server
open a large pdf ﬁle
Figure 7: Real World Program Functionality Test
7.1 Functionality
Testing transformed code. We tested the SPEC CPU2006
programs (Figure 8). This benchmark comes with scripts
to verify outputs, thus simplifying functionality testing.
We also tested many real world programs in-
cluding coreutils-8.16 and binutils-2.22, and medium
to large programs such ssh, scp, wireshark, gedit,
mplayer, perl, gimp, ﬁrefox, acroread,
lyx as well
as all
the shared libraries used by them includ-
ing libc.so.6, libpthread.so.0, libQtGui.so.4,
libQtCore.so.4.
Altogether, we had to transform 786 shared libraries
during testing. The total code transformed was over 300
MB, of which the libraries were about 240MB and exe-
cutables were about 60MB. We tested each of these pro-
grams and ensured that they worked correctly. A subset
of these tests is shown in Figure 7.
Correctness of Disassembly. Since testing explores
only a fraction of program paths, we undertook a more
complete evaluation of disassembly correctness. For this,
we recompiled several large programs, including Firefox
5, GIMP-2.6 and glibc-2.13 to obtain the assembly code
generated by the compiler. Speciﬁcally, we turned on
the option --listing-lhs-width=4 -alcdn of GNU as-
sembler to generate listing ﬁles containing both machine
code and assembly. This was then compared with disas-
sembly.
Note that multiple object ﬁles are combined by the
linker to produce an executable or library. We intercept
the linker ld to record address ranges in the code that
correspond to each object ﬁle. This information is used
to compare compiler-produced assembly for each object
ﬁle with the corresponding part of the disassembler out-
put.
Figure 6 shows the results of our disassembly testing.
About 58MB of executable ﬁles including code and data,
corresponding to a total of about 6M instructions have
been tested, with no errors reported.
Testing Code Generated by Alternative Compilers. We
applied our instrumentation to two programs compiled
using LLVM. In particular, we used Clang 2.9 to com-
pile two programs in the OpenSSH project, ssh and scp.
Experiments shows that both LLVM generated ssh and
scp function correctly when we used them to login to a