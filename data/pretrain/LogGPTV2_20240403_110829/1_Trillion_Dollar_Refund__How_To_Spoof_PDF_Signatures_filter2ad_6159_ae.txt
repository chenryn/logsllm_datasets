### Digital Signature Verification in PDF: Security Analysis and New Research Directions

#### Introduction
In his master's thesis, Stefan et al. [44] provided an in-depth analysis of PDF signatures and implemented a library to verify them. However, their security considerations were limited to known attacks related to PDFs and did not cover the attack classes discovered in this study.

#### Signature Bypasses in Different Data Structures
In 2002, Kain et al. [25] addressed potential threats related to digitally signed documents such as MS Word, MS Excel, and PDFs. These threats included issues with Public Key Infrastructure (PKI), dynamic content loaded from websites, and code execution within documents. The authors briefly mentioned the possibility of creating an unsigned PDF that is visually identical to a signed one but did not provide a proof-of-concept or evaluate its feasibility.

In 2005, Buccafurri et al. [5] described a file format attack where an attacker could force two different views of the same signed document, depending on the file extension. For example, the document could be interpreted as an image (BMP) or HTML code. While PDF files were mentioned as a possible target, no specific attack vectors were described.

#### General Concept of Signature Wrapping Attacks (SWA)
The general concept of SWA, which involves relocating the hashed part of a document, has been applied to XML-based messages. In 2005, McIntosh and Austel [32] described an XML rewriting attack on SOAP web services, and this was later adapted to SAML-based Single Sign-On in 2012 [42]. However, adapting SWA to PDFs is more complex because the hashed part of a PDF is located using a byte range rather than an object identification number, and this has not been explored in previous work.

#### PDF Signatures
While reviewing related work, we identified a gap in the existing security analysis of PDF signatures. Only a few articles directly address the security of PDF signatures. Grigg et al. [18, 19] in 2008 and 2012 discussed the risks associated with electronic signatures, focusing on the absence of cryptographic signatures that allow attackers to forge any signature.

Attacks that exclude a document’s signature have been applied to SAML [42] and JSON [33]. Unlike our Universal Signature Forgery (USF) attack, these vulnerabilities simply remove the signature of the document to bypass validation logic. This approach would also work for PDFs, but it would likely raise suspicion as users expect to see signature information when opening a signed file. Therefore, USF is a more sophisticated variant of signature exclusion tailored for PDFs.

#### New Research Directions
This paper provides the first step into the security analysis of PDF signatures, uncovering new potential targets and research directions.

##### PKCS-based Attacks
The signature value in a PDF can be either a DER-encoded PKCS#1 or PKCS#7 binary data object. Given the complexity of these formats, there is a question about the correctness of their verification implementation. PKCS-based attacks aim to create an always valid object, allowing any modification of the signed document. Additionally, the PKCS object contains the certificates used during verification. If untrusted certificates are used, security warnings are displayed to the user. Future research should focus on certificate validation and explore ways to force the acceptance of untrusted certificates.

##### Transformation Method Attacks
The PDF specification defines three transformation methods applied before signing a document: DocMDP, UR, and FieldMDP. These methods determine which objects are included and excluded in the computation of digital signatures. We focused on the DocMDP transformation, which allows changes like filling in forms, instantiating page templates, and signing, while other modifications invalidate the signature. Future research should investigate if these restrictions are correctly applied and if they can be bypassed. The UR and FieldMDP transformations, which protect defined usage rights and detect changes in form fields, respectively, should also be analyzed.

##### PDF Advanced Electronic Signatures (PAdES)
Motivated by eGovernment initiatives, the European Union published the PAdES specification, which extends the PDF signature specification. It is crucial to analyze the current PAdES specification and existing implementations due to the significance of sensitive documents exchanged within governmental services. Our evaluation revealed vulnerabilities in online validation services when applying our attack vectors to PAdES documents. Future research should carefully analyze the PAdES specification and evaluate its security.

##### Content Masking
Markwood et al. [31] introduced techniques to bypass topic matching algorithms, plagiarism detection, and document indexing by creating malicious fonts and constructing new word and character maps to mask malicious content. In the context of signed PDFs, content masking attacks exploit differences between the signed and displayed content. For example, by defining new fonts, an attacker can change the presentation of characters, such as altering an IBAN in an invoice.

Another attack idea is to abuse the error tolerance of PDF viewers. During our tests, we observed presentation differences of the same document across different viewers. An attacker could sign one document, such as a contract, and distribute it to multiple parties. If these parties use different viewers, they may accept different versions of the contract.

##### Verification UI Forgery
Similar to content masking, an attacker can create a UI that forges the view of a signed document. The PDF specification supports interactive forms like button fields, rich text strings, and form actions, which can be used to imitate a signature panel. This can make a malicious document appear trustworthy upon opening. Such attacks have been described in the web context by Zalewski [54]. Researchers should focus on the features defined in Section 12 of the PDF specification [21].

#### Conclusion
The PDF specification is a complex standard, and it lacks concrete implementation guidelines and best practices, especially regarding cryptography and digital signatures. Our investigation reveals that almost all desktop applications fail to validate PDF signatures correctly. We identified three main reasons for this:
1. The specification does not enforce a strict policy, allowing SWA and relocation of signed content.
2. PDF applications are error-tolerant and process non-standard compliant documents, which can be exploited.
3. Even if the above aspects are handled correctly, programming mistakes can still break the cryptography, as seen in the case of USF.

Our evaluation of PDF viewer applications and online validation services shows alarming results. In 95% of all analyzed viewer applications and 75% of online validation services, at least one of the identified problems occurs, allowing an attacker to stealthily manipulate the contents of a signed PDF. We responsibly disclosed our findings via the BSI-CERT to all vendors and proposed a validation algorithm to prevent these attacks.

Given the digitalization of offices and eGovernment, there is a strong need to improve the PDF specification and best practices. PDF security related to cryptographic features has been overlooked for too long. We have outlined new research directions in the field of PDF security to address this issue.

#### Acknowledgements
We thank the CERT-Bund team for their support during the responsible disclosure process. This research was supported by the European Commission through the FutureTrust project (grant 700542-Future-Trust-H2020-DS-2015-1) and by the German Research Foundation (DFG) within the Excellence Strategy of the Federal and State Governments – EXC 2092 CASA.

#### References
[References listed here as in the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.