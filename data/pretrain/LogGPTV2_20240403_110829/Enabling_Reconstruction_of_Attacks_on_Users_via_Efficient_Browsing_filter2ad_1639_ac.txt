complex web pages contain a potentially large number of frames
(e.g., an iframe for each ad embedded in the page), the full
process of serializing and saving the MHTML content can be
quite expensive, lasting from hundreds of milliseconds to a few
seconds. Therefore, using the existing code to take a DOM
snapshot synchronously with each user input would violate our
efﬁciency requirements.
One of the reasons why the above process is highly inefﬁcient
is that for each IPC that is received, the Renderer creates a Task,
which will (asynchronously) run on the Render Thread, at a time
decided by the Renderer Scheduler [35]. As mentioned in [36],
“the render thread is a pretty scary place,” due to its complexity.
Its execution “routinely stalls for tens to hundreds of milliseconds
[...] on ARM, stalls can be seconds long” [36]. The reason is that
there are many different types of tasks that share the same Render
Thread processing time. For example, execution commonly stalls
due to the execution of “long” javascript code [44]. Therefore,
each task related to a frame’s MHTML seralization could easily
ﬁnd itself starving for CPU time, thus bloating the overall time
needed to complete the full DOM snapshot.
To address the above challenges and dramatically reduce
the overhead related to taking DOM snapshots, we use the
following approach. Instead of calling GenerateMHTML, thus
generating multiple IPC messages to the Renderer speciﬁcally
dedicated to MHTML serialization, we send only one IPC
message to the Renderer. In fact, we piggyback the “take DOM
snapshot” message from the Browser onto the input-passing IPC
message that the Browser already must send to the Renderer
to communicate the user input (see Figure 2). To this end,
we modify the IPCSend(input) IPC message to also carry
a ﬁle descriptor parameter, fd, which is related to a ﬁle we
explicitly open to allow the Renderer to save the DOM snapshot.
In addition, we instrument the input-processing task that would
normally only process the user input, so that when its Task
2This approach will be useful in the future, once the out-of-process-iframes
project is completed and the functionality is turned on by default, as discussed
later in the paper.
is executed it will ﬁrst serialize the page into MHTML format,
and then simply continue with the regular user input processing,
as shown on the right side of Figure 2. This guarantees that the
DOM snapshot is taken synchronously with the related user input
event, and before any input-driven DOM changes can occur.
There is one remaining question: how can we serialize
both the main page and all embedded frames, considering that
the original GenerateMHTML code needed to send multiple
IPC messages? To solve this problem, we write new MHTML
serialization code to explicitly traverse the entire frame tree from
the Render Thread, sequentially serialize each frame, and save
the entire DOM snapshot into the ﬁle previously opened by the
Browser (in Section VIII we discuss how this process could be
further adapted in the future, once out-of-process-iframes [41]
become enabled by default).
V. ALTERNATIVE IMPLEMENTATION USING EXTENSIONS
In this section, we discuss whether webshots could be
captured using Chrome’s extension API [7]. An extension-
based implementation would be appealing, because it does not
require any browser instrumentation and can easily be added
to existing browser releases. However, we will show that an
extension-based implementation of ChromePic is not a viable
alternative in practice, due to the constraints imposed by the
browser’s extension API itself and to the higher average overhead
associated with webshots produced via the extension. In the
following, we refer to the extension-based version of ChromePic
as ChromePicExt.
A. ChromePicExt Overview
Because our forensic rigor requirement (see Section I) dictates
that webshots must be taken synchronously with the user input,
the content javascript component of ChromePicExt
must intercept user inputs before any page javascript code. This
goal can be achieved in two steps: (1) by setting the run_at
property in the extension’s manifest ﬁle to document_start;
and (2) by registering an event listener for user input events
(e.g., mousedown, keydown, etc.) on the window object as
soon as the content javascript starts being executed.
listeners are registered with the
All ChromePicExt’s event
useCapture option set
to true,
the
content javascript will be the ﬁrst to capture and handle
the event, before any page javascript has a chance to receive the
same event. In the following, we will use cnt.js to refer to
the extension’s content javascript.
to guarantee that
During the interaction between the user and the browser, if
a particular event that ChromePicExt is listening on is ﬁred,
our listener captures it ﬁrst and passes the event object to
the handler function implemented by the extension. At this
point, ChromePicExt’s cnt.js needs to temporarily stop the
propagation of the event object to any other listeners, including
listeners registered by the web page with which the user is
interacting, until a full browsing snapshot is taken. This is crucial
to ensure that the other event listeners will not have an opportunity
to change the appearance of the web page before the screenshot
and DOM snapshot are recorded. Notice also that because the
execution of javascript code within each renderer process is
single-threaded3 [43], the input event cannot be processed by
3Notice that WebWorkers cannot directly change the DOM.
6
any other listener until cnt.js “yields.” Furthermore, because
cnt.js runs in an isolated world4, the page javascript cannot
observe or interfere with the extension’s event processing.
is received,
Once a triggering event
to take a screen-
shot of the rendered content cnt.js needs to call
the
captureVisibleTab API accessible via the background
extension component. At the same time, cnt.js also needs
to produce a snapshot of the current page’s DOM tree, which
could be achieved for example by asking the background
component to call the pageCapture.saveAsMHTML API.
Once both the screenshot and DOM snapshot are taken, the event
can be released so that the browser can propagate it to other
listeners.
Challenges. In Chrome, the content javascript compo-
nent of an extension has limited direct access to the extension API.
The full extension API can be accessed via the background
component. In the following, we refer to the background
extension component as bgnd.js, for short. The cnt.js
and bgnd.js components can communicate via message
passing. For instance, immediately after a user input is captured,
cnt.js can use sendMessage and ask bgnd.js to call
captureVisibleTab, thus producing a screenshot of the
current page with which the user is interacting. Unfortunately,
the simple approach described above does not satisfy the
forensic rigor requirement for webshots, because bgnd.js
runs in the extension process [6], rather than the renderer
process where cnt.js runs, and the screenshot is therefore
taken asynchronously. Similarly, to take a full DOM snapshot
bgnd.js can make use of saveAsMHTML, but this also causes
the DOM snapshot to be taken asynchronously w.r.t. the user input.
In other words, if the cnt.js simply captures a user event, asks
bgnd.js to take a webshot (using captureVisibleTab
and saveAsMHTML) and then immediately “yields,” the event
can be propagated by the browser to other listeners. Therefore,
there is no guarantee that the page javascript will not change
the page (DOM and rendering) before the webshot is actually
logged.
Possible Solutions. One possible approach to make the webshot
taking functionality synchronous may be for cnt.js to actively
wait (e.g., loop) until bgnd.js communicates that the webshot
request has been processed via a callback function. However,
because JavaScript execution within each process is single-
threaded5, this would prevent cnt.js from yielding to the
callback function, because it would need to run in the renderer
process where cnt.js is actively waiting. Therefore, this would
stall the renderer process and thus the web page (we have
empirically veriﬁed all observations). Another solution could be
to “sleep,” instead of actively waiting, for example by leveraging
setTimeout or setInterval. However, this would not
solve the problem, because while cnt.js “sleeps,” it effectively
“yields” and the captured user event will trickle down to the
next listeners, thus again violating the requirement that webshots
must be taken synchronously.
One may think that cnt.js could simply capture an event
object, say e, and (1) make a deep copy of the object, thus
creating e(cid:48) = e; (2) cancel the propagation of e to the remaining
4https://developer.chrome.com/extensions/content scripts
5WebWorkers cannot be used in the scenario we are considering.
7
Fig. 4. Simpliﬁed cnt.js source code.
listeners6; (3) wait until the callback from bgnd.js indicates
that the webshot has been taken; and (4) re-dispatch the event
by injecting e(cid:48), so that the browser will propagate the user event
to the remaining listeners. Unfortunately, this will cause the
isTrusted property of e(cid:48) to be set to false, thus potentially
preventing some listeners from correctly processing the event. In
addition, the value of isTrusted would allow an attack page
to infer the presence of ChromePicExt, and perhaps stop the
attack to prevent it from being logged/analyzed, thus violating
the transparency requirement (see Section I).
B. Our Approach
To solve the above problems, we proceed as follows. First,
we will focus only on how to synchronously take a screenshot,
and then discuss how to take a DOM snapshot.
Once a message has been sent to bgnd.js to ask for a
screenshot to be taken, cnt.js actively waits for the screenshot
to be completed. However, as mentioned earlier, cnt.js cannot
actively wait for a callback from bgnd.js, as this would
bring cnt.js to stall. Instead, what cnt.js can do is: (1)
explicitly choose the name of the ﬁle where the screenshot
should be stored; (2) pass this information to bgnd.js (via
sendMessage) and at the same time ask it to concretely start
the screenshot capturing process; (3) actively probe the ﬁle
system using a synchronous XMLHttpRequest to the local
URL 7 to test whether the screenshot ﬁle has been saved (via
captureVisibleTab).
Figure 4 shows a simpliﬁed code snippet that implements
the approach outlined above. The synchronous XMLHttpRequest
will raise an exception if the ﬁle does not exist. In this case,
cnt.js will try again, until the ﬁle can be found on disk
(or a maximum number of attempts have been exhausted, as
a safeguard to avoid waiting indeﬁnitely in case of failure at
the extension process side). After cnt.js exits the active wait
loop, the user input event will effectively be “released” and
passed by the browser to the remaining listeners, thus allowing
the processing of the event to continue (e.g., this could trigger
some DOM modiﬁcation by the underlying page javascript).
Unfortunately, the approach described above cannot be used
to synchronously take a DOM snapshot using saveAsMHTML.
The reason is that while the call to saveAsMHTML happens
6Using Event.stopPropagation()
7Notice that this can be enabled in the extension’s manifest ﬁle, via the
web_accessible_resources parameter.
 1. // Save "shallow" DOM snapshot  2. var domSnapshot = document.head.outerHTML + document.body.outerHTML; 3. chrome.runtime.sendMessage(command: "save_dom", dom: domSnapshot); 4. 5. // Take screenshot 6. var md_time = Date.now(); 7. var filename = "snapshots/"+md_time+".png"; 8. var xhr_request = new XMLHttpRequest(); 9.10. chrome.runtime.sendMessage(command: "take_screenshot", file: filename);11. while(true) {12.   try {13.     xhr_request.open('GET', chrome.extension.getURL(filename), false);14.     xhr_request.send(null); // send synchronous request15.     break;16.   } catch (err) {17.      // Synchronous XMLHttpRequest has failed18.   }19. }    Fig. 5. Some of the screenshots captured by ChromePic during an in-the-wild social engineering “fake-AV-like” attack on Android.
asynchronously via bgnd.js, which runs within the extension
process, ultimately saveAsMHTML will delegate the respon-
sibility of producing and saving the mhtml representation of
the DOM to the same Renderer process where cnt.js also
runs, within the Render Thread (see Section IV-E). Therefore,
if cnt.js actively waits for the mhtml ﬁle to be saved it
will simply wait indeﬁnitely, as the mhtml ﬁle cannot be
produced until cnt.js “releases control” of execution on the
renderer’s main thread. One way to avoid this problem is to
simply program cnt.js to save the DOM structure, as shown
at the top of Figure 4. However, this is a much more limited,
“shallow” representation of the DOM, compared to what can be
obtained with saveAsMHTML, because embedded objects (e.g.,
the content of images or iframes) are not saved.
The cnt.js could be extended to produce a result that is
more similar to saveAsMHTML. For instance, the content of
images can be accessed by ﬁrst loading them into a canvas and
then reading the content of the canvas [27]. But this is a quite
cumbersome and inefﬁcient operation. Also, while cumbersome,
it would be possible to communicate (e.g., via postMessage)
to the cnt.js running in the context of the embedded frames8
to produce a DOM snapshot, which could then be combined to
the DOM of the main page to produce a more comprehensive,
“deep” snapshot of the page.
It should be apparent by now that the extension-based
approach to taking synchronous webshots is sort of a “hack,” in
that it bypasses some of the restrictions imposed by the browser
on cnt.js and its inability to directly access the extension
APIs. Furthermore, screenshots cannot be made fully transparent
to the user, because every time a screenshot is taken the browser
visually indicates that a ﬁle is being downloaded (on the bottom
of the browser window). In Section VII, we will also show
that the extension-based implementation of ChromePic imposes
a higher overhead, compared to the browser instrumentation
approach described in Section IV. Overall, this demonstrates
that extensions are not suitable for meeting all of ChromePic’s
design requirements.
VI. RECONSTRUCTING ATTACKS ON USERS
In this section, we report on a number of experiments that
demonstrate how ChromePic can capture attacks on users, and
enable their post-mortem reconstruction. Speciﬁcally, we will
discuss three attacks, an in-the-wild social engineering download
attack on Android, a phishing attack, and two clickjacking attacks
proposed in [1].
A. Social Engineering Download Attack
During our user study (see Section VII-B), we encountered
an in-the-wild social engineering download attack. Here is how a
user arrived to this attack: (1) The user visits www.google.com
and searches for “wolf of wall street”; (2) after scrolling the
results, the user modiﬁes the search terms by adding the letter
“f” to the search string (see Figure 5a); (3) the search engine
suggests “wolf of wall street full movie” as the top search
suggestion, which is clicked (with a touch screen tap) by the
user; (4) the user then clicks on the top search result, which
redirects the browser to a site called fmovies[.]to; (5) as the
site loads, with no interaction from the user, an advertisement
embedded in the page forces the browser to open a new tab
where a page is loaded from us.intellectual-82[.]xyz; (6) an alert
popup window is immediately shown, which warns the user that
the device is infected by multiple viruses; (7) clicking on the
OK button makes the alert window disappear, but the user now
sees the us.intellectual-82[.]xyz page (which was previously in
the background) claiming that the Android device is “28.1%
DAMAGED because of 4 harmful viruses” (see Figure 5c) and
recommends the user to download an application called “DU
Cleaner”; (8) clicking on a “REPAIR FAST NOW” button, the
user is redirected to the Google Play store, and speciﬁcally to
information about an app called GO Speed9 (not DU Cleaner,
as stated on the attack page).
Using ChromePic, we were able to record all main steps of
the attack. In fact, the screenshots in Figure 5 were all taken
by ChromePic and conﬁrm that using the recorded webshots,
the social engineering attack described above can indeed be
reconstructed by tracing back the user-browser interactions,
including tapping on the “REPAIR FAST NOW” button on
the attack page. Naturally, after the user clicks on this download
button and control is passed to the Google Play app, ChromePic
could not follow the next user actions (e.g., whether the app was
installed or not on the device). This is expected, as ChromePic
is meant to reconstruct all steps of web-based attacks that unfold