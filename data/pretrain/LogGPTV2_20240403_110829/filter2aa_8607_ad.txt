Some operating systems (notably, systems that
use \fImmap\fR\|(2) for allocating large chunks of memory) can
reclaim memory that is no longer used, but on such systems,
perl must be configured and compiled to use the \s-1OS\s0's malloc,
not perl's.
.PP
然而，在使用你的变数时，明智地用 my()来定义执行范围，可让 Perl在脱离该范围后 将它们所占的空间释放给其它部份的程式。 (注：my()的变数也比全域变数执行起来快 10%。)当然，一个全域变数永远没有超出范围的时候，所以你无法将它占用的空间自动重新分配，不过，把它 undef() 或／和 delete()会有相同的效果。总之，在 Perl里，你并不能／应该去担心太多有关记忆体定址与解除这件事，而我们连添加这项功能（资料形态的预先定址），目前都已在进行中。
.Sh "如何让我的 CGI脚本 (script)执行起来更有效率?"
.IX Subsection "How can I make my CGI script more efficient?"
除了使一般 Perl程式加快或缩小的平常手段外，一个 CGI 程式还有其他的顾虑。也许它每秒会被执行好几次。每次它执行时，重新编译所花的时间、加上定址所需的 1 MB以上的系统记忆体，就是一个大杀手。光是编译成 C 是没啥帮助的 ，因为瓶颈在于整个程序开始时所负担的包袱 (start-up overhead) 。
.PP
最起码有两种较流行的方法可以避免这些包袱。一种解法是将 mod_perl 或是 mod_fastcgi其中一个模组加在你所执行的 Apache HTTP server。
.PP
有了 mod_perl 和 Apache::*模组 (从 CPAN取得)，httpd执行时会带起一个内 嵌的 Perl直译器，而它会预先编译你的程式，并在不产生其它子程序的情况下用同一个定址空间来执行。Apache 扩充模组亦给 Perl一个连通 server API 的管道，所以用 Perl写的模组可以做到任何 C写的模组所具备的功能。详情请参阅 http://perl.apache.org/
.PP
而有了 FCGI模组 (自 CPAN取得) 和 mod_fastcgi 模块(从 http://www.fastcgi.com/取得)，每个 Perl 程序将成为一个永久的 CGI 守护进程。
.PP
这些方法对你的系统与你撰写 CGI程式的方法都有超乎想像之外的影响，所以请小心地使用它们。
.PP
参见 http://www.cpan.org/modules/by\-category/15_World_Wide_Web_HTML_HTTP_CGI/ .
.PP
A non\-free, commercial product, ``The Velocity Engine for Perl'',
(http://www.binevolve.com/ or http://www.binevolve.com/velocigen/ )
might also be worth looking at.  It will allow you to increase the
performance of your Perl programs, running programs up to 25 times
faster than normal \s-1CGI\s0 Perl when running in persistent Perl mode or 4
to 5 times faster without any modification to your existing \s-1CGI\s0
programs. Fully functional evaluation copies are available from the
web site.
.Sh "如何隐藏 Perl程式的原始码?"
.IX Subsection "How can I hide the source for my Perl program?"
删除它。 :-) 说真的，有一些具有不同“安全”等级的方法(大部分都不能令人满意)。
.PP
首先，你 不能拿走读取权，不然你的程式怎么被解译或是编译呢? (不过那也并不表示一个 CGI程式的原始码可以被使用者读取。)所以你得让档案权限停留在 0755这个友善的阶段。
.PP
有些人认为这是个安全上的漏洞。不过若你的程式作的是不安全的事情，光仰赖别人看不见这些漏洞、不知从何下手，那么它依然是不安全的。其实对有些人来说他们并不需要看见程式原始码便可能判定并揭露这些不安全的部份。透过隐瞒达到的安全，就是不修正臭虫反而隐藏它们，实际上是没有安全性可言的。
.PP
你可以试着透过原始码过滤模组 (CPAN中的 Filter::*)来替原始码加密。但高手也许有办法将其解密还原。你也可以用下面提到的 byte code 编译器与直译器，但高手也有可能反解译它。你可以试试后面提到的原生码编译器 (native-code compiler)，但高手也有可能反组译它。这些手段都需要不同难度的技巧才能让别人拿到你的原始码，但没有一种能够很确定地隐藏它。(这对每种语言来说都为真，不是只有 Perl)
.PP
很容易从 Perl 程序中恢复出源码。只要将程序作为 perl 解释器的参数，并且使用 B:: 中的模块就可以了。B::Deparse 模块足以恢复大多数隐藏的代码。再次的，这不是 Perl 特有的东西。
.PP
如果你所担心的是别人自你的程式码中获利，那么一纸权限执照是能提供你法律上安全的唯一途径。注册你的软体并且写份权限说明，再加上一些具威胁性的句子像“这是 XYZ公司未出版的专有软体。你能撷取它并不代表你具有使用的权限...”之类云云。当然，我们不是律师，所以若你想要你的执照中每一句话在法庭上都站得住脚，就去见个律师吧。
.Sh "如何把我的 Perl程式码编译成 byte code或 C?"
.IX Subsection "How can I compile my Perl program into byte code or C?"
Malcolm Beattie已经写了一个多功能的后端编译器，可以从 CPAN取得，它就能做到这两项功能。它包含在 perl5.005 发布中，但是仍然是测试版。这代表着若你是个程式设计 员而非寻找万灵解药的人，那么参与其测试就会充满趣味。
.PP
请了解光是编译成 C 其本身或在本质上并不能保证它就会跑得快更多。那是因为除了在运气好的状况中有一堆可以衍生成出来的原生形态外，平时的 Perl 执行系统环境依然存在因此依然会花差不多长的执行时间与占用差不多大小的记忆空间。大多数程式能省下来的不过是编译时间，这使执行速度顶多快 10-30%。有些罕见的程式能真正从中受利 (例如增快好几倍)，但这还得配合原始码的微调。
.PP
你或许会惊讶地发现，现行版本的编译器做出来的执行档大小跟你的 Perl直译器一样大，有时更大些。那是因为依照现在的写法，所有的程式皆转成一个被 eval()的大叙述。只要建造一个动态连结的 libperl.so程式库，并将之连结起来，你就可以戏剧性地减少这 种浪费。参看 perl原始码套件中的 INSTALL pod档案以获得更详尽的讯息。如果你用这方法连结你主要的 perl执行档，就能使它变得很渺小。举例来说，在作者之一的系 统里， /usr/bin/perl只有 11k“小”而已!
.PP
In general, the compiler will do nothing to make a Perl program smaller,
faster, more portable, or more secure.  In fact, it can make your
situation worse.  The executable will be bigger, your \s-1VM\s0 system may take
longer to load the whole thing, the binary is fragile and hard to fix,
and compilation never stopped software piracy in the form of crackers,
viruses, or bootleggers.  The real advantage of the compiler is merely
packaging, and once you see the size of what it makes (well, unless
you use a shared \fIlibperl.so\fR), you'll probably want a complete
Perl install anyway.
.Sh "How can I compile Perl into Java?"
.IX Subsection "How can I compile Perl into Java?"
You can also integrate Java and Perl with the
Perl Resource Kit from O'Reilly and Associates.  See
http://www.oreilly.com/catalog/prkunix/ .
.PP
Perl 5.6 comes with Java Perl Lingo, or \s-1JPL\s0.  \s-1JPL\s0, still in
development, allows Perl code to be called from Java.  See jpl/README
in the Perl source tree.
.ie n .Sh "如何才能让 "#!perl" 在 [MS-DOS,NT,...] 下起作用?"
.el .Sh "如何才能让 "#!perl" 在 [MS-DOS,NT,...] 下起作用?"
.IX Subsection "How can I get #!perl to work on [MS-DOS,NT,...]?"
OS/2下只要用：
.PP
.Vb 1
\&    extproc perl -S -your_switches
.Ve
.PP
当作 \f(CW\*(C`*.cmd\*(C'\fR 档案的第一行 (\f(CW\*(C`\-S\*(C'\fR 是因 cmd.exe中其 `extproc'处理的臭虫才要的)。DOS使用者应先制作一个相对的 batch 档案然后将它以 ALTERNATIVE_SHEBANG 的方式写成程式。(更多讯息在原始码版本的 INSTALL档案里)
.PP
The Win95/NT installation, when using the ActiveState port of Perl,
will modify the Registry to associate the \f(CW\*(C`.pl\*(C'\fR extension with the
perl interpreter.  If you install another port, perhaps even building
your own Win95/NT Perl from the standard sources by using a Windows port
of gcc (e.g., with cygwin or mingw32), then you'll have to modify
the Registry yourself.  In addition to associating \f(CW\*(C`.pl\*(C'\fR with the
interpreter, \s-1NT\s0 people can use: \f(CW\*(C`SET PATHEXT=%PATHEXT%;.PL\*(C'\fR to let them
run the program \f(CW\*(C`install\-linux.pl\*(C'\fR merely by typing \f(CW\*(C`install\-linux\*(C'\fR.
.PP
麦金塔的 perl程式将会有适当的创造者与形态 (Creator and Type)，所以双击它们就会执行这些 perl 应用程式。
.PP
重要:不论你做什么，请千万不要因为觉得沮丧，就把 perl 直译器丢到你的 cgi-bin目录下，好让你的 web 伺服器能执行你的程式。这是一个非常大的安全漏洞。花点时间想想怎样才是正确的做法吧。
.Sh "我能利用命令行写出有用的程式吗?"
.IX Subsection "Can I write useful Perl programs on the command line?"
可以。详情请看 perlrun。以下有些范例 (假设用的是标准的 Unix shell引言规则)。
.PP
.Vb 2
\&    # 把第一栏和最后一栏相加
\&    perl -lane 'print $F[0] + $F[-1]' *
.Ve
.PP
.Vb 2
\&    # 辨别是否为文字档
\&    perl -le 'for(@ARGV) {print if -f && -T _}' *
.Ve
.PP
.Vb 2
\&    # 移除 C程式中的说明
\&    perl -0777 -pe 's{/\e*.*?\e*/}{}gs' foo.c
.Ve
.PP
.Vb 2
\&    # 让档案年轻一个月，躲避 reaper daemons
\&    perl -e '$X=24*60*60; utime(time(),time() + 30 * $X,@ARGV)' *
.Ve
.PP
.Vb 2
\&    # 找出第一个未用的 uid
\&    perl -le '$i++ while getpwuid($i); print $i'
.Ve
.PP
.Vb 3
\&    # 显示合理的使用说明路径 (manpath)
\&    echo $PATH | perl -nl -072 -e '
\&        s![^/+]*$!man!&&-d&&!$s{$_}++&&push@m,$_;END{print"@m"}'
.Ve
.PP
好吧，最后一个例子事实上是“perl程式困惑化”竞赛 (Obfuscated Perl)的 参赛作品。 :-)
.Sh "为何一行的 perl 程式无法在我的 DOS/Mac/VMS系统上运作?"
.IX Subsection "Why don't Perl one-liners work on my DOS/Mac/VMS system?"
问题通常出在那些系统的命令解译器对于参数的引用与 Unix shells 所作的解释不同，而后者很不幸的是这些一行 perl 的生父。在某些系统，也许你得把单引号改成双引号，但这却是你万万 不可在 Unix或 Plan9系统上作的事。你也许还得把一个 %改成 %%。
.PP
例如：
.PP
.Vb 2
\&    # Unix
\&    perl -e 'print "Hello world\en"'
.Ve
.PP
.Vb 2
\&    # DOS 和其他机器
\&    perl -e "print \e"Hello world\en\e""
.Ve
.PP
.Vb 3
\&    # Mac
\&    print "Hello world\en"
\&     (然后运行 "Myscript" 或按 Shift-Command-R)
.Ve
.PP
.Vb 2
\&    # MPW
\&    perl -e 'print "Hello world\en"'
.Ve
.PP
.Vb 2
\&    # VMS
\&    perl -e "print ""Hello world\en"""
.Ve
.PP
问题是，这些方法没有一个是完全可靠的：它都得看命令解译器的脸色。在 Unix中，前两者通常可以用。在 DOS下，两者可能都没有用。若 4DOS是命令解译器，下面此法可能比 较有希望：
.PP
.Vb 1
\&  perl -e "print "Hello world\en""
.Ve
.PP
在 Mac 下，端视你所用的环境为何。 MacPerl所附的 shell，或是 MPW， 其所支援的参数格式有不少都蛮像 Unix shells的，除了它自在地使用 Mac 的非 ASCII字元当成控制字元。
.PP
Using \fIqq()\fR, q(), and \fIqx()\fR, instead of \*(L"double quotes\*(R", 'single
quotes', and `backticks`, may make one-liners easier to write.
.PP
恐怕我得说这问题并没有一般解。白话一点说，它真是一团乱。
.PP
[部份答案是由 Kenneth Albanowski 所提供的。]
.Sh "我得去哪里学 Perl的 CGI或是 Web程式设计呢?"
.IX Subsection "Where can I learn about CGI or Web programming in Perl?"
就模组来说，去 CPAN抓 CGI 和 LWP 两个模组。就书本来看，参考关于书那部份里特别和 web 相关的问题。若有与 web相关的疑难杂症，像“为何我收到 500错误”或“它在命令列模式下跑得好好的，怎么不能在浏览器下正常执行”时，请参看：
.PP
.Vb 1
\&        http://www.perl.org/CGI_MetaFAQ.html
.Ve
.Sh "从哪里可以学习面向对象的 Perl 编程？"
.IX Subsection "Where can I learn about object-oriented Perl programming?"
perltoot是个好开始，然后你可以再参考 perlobj 和 perlboot，Perltoot，perltooc 以及 perlbot (如果你使用老版本的 Perl，你可能没有这些。去 http://www.perldoc.com/ 下载吧，但是首先考虑一下升级你的 perl)
.PP
有本好书关于 Perl 中的 \s-1OO\s0 是 \*(L"Object\-Oriented Perl\*(R"
作者是 Damian Conway ，出版社为 Manning Publications,
http://www.manning.com/Conway/index.html
.Sh "从哪里可以学习将 Perl 与 C 连接？[h2xs, xsubpp]"
.IX Subsection "Where can I learn about linking C with Perl? [h2xs, xsubpp]"
若你要从 Perl程式呼叫 C，就自 perlxstut开始向 perlxs ，xsubpp ，及 perlguts前进。反之，则读 perlembed ，perlcall ，及 perlguts 。别忘了你可以从各模组的作者如何写他们的模组及解决他们的问题中学到很多。
.Sh "我已经阅读了 perlembed,perlguts 等等，但是还是不能在我的 C 程序中嵌入 perl；我作错了什么？"
.IX Subsection "I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?"
自 CPAN 下载 ExtUtils::Embed 套件，然后执行 `make test'。如果测试成功，就一遍又一遍地读那些 pod 说明档案。若它失败了，参看 perlbug并送一份内有 \f(CW\*(C`make test TEST_VERBOSE=1\*(C'\fR 与 \f(CW\*(C`perl \-V\*(C'\fR 输出的报告。
.Sh "我试着运行我的脚本时，看到了这样的消息。它是什么意思？"
.IX Subsection "When I tried to run my script, I got this message. What does it mean?"
perldiag有一份完整的 perl错误与警告讯息列表，并附有说明文字。你也可以用 splain程式 (伴随 perl而来)去解释这些错误讯息：
.PP
.Vb 2
\&    perl program 2>diag.out
\&    splain [-v] [-p] diag.out
.Ve
.PP
更改你的程式让它替你解释这些讯息也可以：
.PP
.Vb 1
\&    use diagnostics;
.Ve
.PP
或
.PP
.Vb 1
\&    use diagnostics -verbose;
.Ve
.Sh "什么是 What's MakeMaker?"
.IX Subsection "What's MakeMaker?"
此模组 (亦为标准 perl 套件之一部份)设计的目的是要替一个模组从一个 Makefile.PL 中自动撰写出一个 Makefile。详情请看 ExtUtils::MakeMaker。
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples here are in the public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the \s-1FAQ\s0 would
be courteous but is not required.
.SH "译者"
陈彦铭，萧百龄，两只老虎工作室