### Message Flow in Hybster and Troxy-backed Hybster

1. **Message Flow in Hybster:**
   - This section describes the message flow in the original Hybster system.

2. **Message Flow in Troxy-backed Hybster (Client Connected to Leader Replica):**
   - When the client is connected to the leader replica, an additional message delay is introduced. The corresponding Troxy collects and compares the replies to the client’s request to determine the correct result.

3. **Message Flow in Troxy-backed Hybster (Client Connected to Follower Replica):**
   - For clients connected to follower replicas, an additional phase is necessary to transmit the request to the leader, as only the leader can initiate the agreement process for requests.

**Figure 5.** Comparison of the message flows in Hybster and Troxy-backed Hybster.

### Intel SGX and Enclave Attestation

Intel provides a remote attestation service to ensure the validity of enclaves. This service securely computes a hash of the enclave's memory pages and sends it to the remote attestation service, allowing the user to verify that the enclave has been initialized correctly. Once the enclave is attested, it can be provisioned with cryptographic keys and secrets, such as the private key used by Troxy to establish secure connections with clients.

The enclave code and data are stored in the Enclave Page Cache (EPC), a protected region of memory. The current implementation of Intel SGX limits this memory area to a maximum size of 128MB. Accessing memory beyond the EPC results in costly paging, where pages need to be encrypted and integrity-protected before being evicted to main memory. To minimize performance overhead, we limit memory allocations and store data in an encrypted manner outside the enclave when necessary. This data is validated by comparing it against a securely stored hash inside the Troxy.

### Bidirectional TLS Authentication

Troxy provides bidirectional TLS authentication for all messages exchanged between clients and replicas. It uses the TaLoS library, which securely executes the TLS logic inside an Intel SGX enclave. TaLoS runs in a completely encapsulated manner, with no external calls to the untrusted environment.

### Troxy-backed Hybster

To provide fault tolerance, our prototype implementation relies on Hybster, a BFT replication protocol based on a hybrid fault model. Hybster requires 2f + 1 replicas to tolerate f Byzantine faults. It is implemented in Java and uses Intel SGX for trusted subsystems. Hybster achieves high performance through parallelization, scaling well with the number of NICs and CPU cores. The trusted subsystem of Hybster is also used by Troxy for trusted authentication during the ordering phase. The interaction between the untrusted part of the replica and the SGX enclave is handled via the Java Native Interface (JNI).

Hybster is a leader-based BFT protocol, where a special node proposes an ordering on the requests received from clients. Figure 5 illustrates the message flow in the resulting Troxy-backed system. Compared to the original Hybster, introducing Troxy adds one message delay for clients connected to the leader replica. For clients connected to follower replicas, an additional phase is necessary to transmit the request to the leader. In a setting where replicas are hosted in different fault domains within the same data center, the additional messages have a minor impact on overall latency.

### Key Advantages of Troxy

1. **Reduced Data Transmission:**
   - Clients receive only a single reply per request, reducing the amount of data sent over long-distance links, which is especially beneficial for low-bandwidth clients.

2. **Improved Response Time:**
   - During periods of unstable network conditions, the response time of the service improves because the latency experienced by the client no longer depends on the arrival of the slowest matching replies.

3. **Transparency:**
   - The BFT replication system becomes transparent to clients, simplifying their interaction with the service.

### Evaluation

#### Microbenchmark

We evaluate the performance of Troxy compared to Hybster using microbenchmarks and an HTTP service. The results show:

1. **Local Network Performance:**
   - For ordered small-payload messages, Troxy has an overhead of at most 43% due to extra communication steps and trusted environment transitions.
   
2. **Network Delay Performance:**
   - For larger messages with network delay, Troxy improves performance by up to 70%.
   
3. **Read-Heavy Workloads:**
   - The fast-read cache optimization improves throughput by 130% even in the presence of conflicting write requests.
   
4. **HTTP Service:**
   - Troxy almost hides the replication cost, allowing clients to observe similar latency as for a non-replicated service.

#### Experimental Setup

Measurements were conducted on a cluster of five identical machines, each equipped with an SGX-capable Intel Core i7-6700 quad-core processor, 24 GB of memory, and four 1 Gbps Ethernet NICs. Three machines are dedicated to replicas (f = 1 faults), and two are running as clients. All machines run 64-bit Ubuntu 16.04 with a Linux kernel 4.4.0, OpenJDK 1.8, and the Intel SGX SDK v1.9. We compare the performance of our Troxy-backed Hybster variant with the original Hybster protocol (baseline).

#### Security Analysis

1. **Performance Attacks:**
   - A malicious replica could return old cache entries, slowing down the protocol. Troxy selects f random replicas to reply to a fast-read query and monitors the cache miss ratio to address such attacks.
   
2. **Side-Channel Attacks:**
   - Side-channel attacks are out of scope, but Troxy can implement existing techniques to limit such attacks inside an SGX enclave.
   
3. **Bypassing Troxy:**
   - A malicious replica could bypass Troxy to break the safety of the system. Secure connections using TLS prevent this, with session keys securely stored inside the Troxy.
   
4. **Interface Attacks:**
   - The enclave interface has been hardened to prevent attacks aimed at accessing secrets stored inside the Troxy.
   
5. **Denial-of-Service and Flooding:**
   - Troxy leverages existing techniques to prevent Denial-of-Service and flooding attacks.

#### Microbenchmark Results

We created a microbenchmark to evaluate the full capacity of Troxy and investigate the overhead of relocating the traditional client-side library to the server side and using the trusted subsystem for protection. A configured number of clients issue asynchronous requests, and the average throughput and latency are measured over 60 seconds. Batching is not used as it is an orthogonal approach.

Secure socket connections are applied to client-to-replica communication for both the baseline and Troxy, while replica-to-replica communication uses plain sockets and HMACs for message authentication. Clients only connect to the leader in the baseline system, while Troxy allows connections to any replica.

We ran experiments in three scenarios:
1. **Totally Ordered Requests:**
   - Write requests of different sizes (256 B, 1 KB, 4 KB, 8 KB) with a 10 B reply size.
   - Two implementations of Troxy in C/C++ are compared: ctroxy (untrusted environment without SGX) and etroxy (inside an enclave).
   - Figure 6 shows the measurement results for handling write requests in the local network. With a small request payload size (256 B), etroxy shows about 43% performance loss due to trusted and untrusted environment transitions and extra processing steps. As the payload size increases, ctroxy and etroxy provide similar performance, with etroxy reaching the baseline at 8 KB.
   
2. **Network Delay:**
   - Figure 7 illustrates the performance with a 100± 20 ms network delay. The server-side reply voter brings a significant advantage to Troxy, leading to up to 60% performance gain for different request payload sizes.

**Figure 6.** Throughput (1,000 requests per second) for different request sizes in the local network.

**Figure 7.** Throughput (1,000 requests per second) for different request sizes with network delay.