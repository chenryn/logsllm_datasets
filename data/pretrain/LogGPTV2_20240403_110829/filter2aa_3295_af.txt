Host: website.name.com
Referer: www.someothersite.com
and
GET images/1.jpg HTTP/1.1
Host: website.name.com
Referer: www.someothersite.com
3.4.1 Evidence
For both of those requests, the web server returned the image requested.  To
ensure that the site was seeing the correct request with the correct referrer
string, I viewed the access log of the server, and found the request.  The sani-
tized version is shown below:
my.ip.address.here - - [01/Apr/2004:23:42:15 -0400] "GET
/go.gif HTTP/1.1" 200 1124 website.name.com
"www.someothersite.com" "-" "-"
This shows that the server correctly received the referrer, claiming to be a differ-
ent web site, and that the result code was 200, indicating a successful request for
the file.
As the testing was performed through a telnet window, there was no way to view
the image file that the server actually sent.  There remained the option that the
site was configured to send a different image in this case.  Some web hosts that
offer free web hosting do this automatically; any requests for images that do not
come from pages hosted on their site are sent a tiny graphic that explains that
this form of linking is not allowed.
Therefore, I then set up a test web page on another web server, so that I could
verify the contents of the actual image.  I created a web page that had those two
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
38
test graphics above, linked directly to the images on AuditApp.  Viewing that
page in a web browser verified that the web server was sending the actual im-
ages requested.
3.4.2 Findings
Because all images were successfully retrieved even when the server was told—
through the referrer string—they were linked to from a different web site, there
are shown to be no safeguards against bandwidth theft on AuditApp.
RESULT: FAIL
3.5 Scan for Sample Files or Scripts
As described in the testing procedures from section 2.5, I performed a Nessus
scan of AuditApp with only the “CGI Abuses” option selected.  The scan com-
pleted successfully with no error messages.
3.5.1 Evidence
The Nessus scan results are included here:
Nessus Scan Report
------------------
SUMMARY
 - Number of hosts which were alive during the test : 1
 - Number of security holes found : 0
 - Number of security warnings found : 0
 - Number of security notes found : 1
TESTED HOSTS
 web.site.name.com
DETAILS
+ web.site.name.com :
 . List of open ports :
   o ftp (21/tcp)
   o ssh (22/tcp)
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
39
   o http (80/tcp)
   o general/tcp (Security notes found)
 . Information found on port general/tcp
    Nmap found that this host is running Linux Kernel 2.4.0
- 2.4.17 (X86)
------------------------------------------------------
This file was generated by the Nessus Security Scanner
3.5.2 Findings
This scan shows no holes of any kind.  The only result is a note to indicate Nes-
sus’ guess at what operating system the web site is running.  No additional test-
ing was necessary.
RESULT: PASS
3.6 Test Backup Procedures
First I interviewed the site owner to determine the current backup procedures.
Following this, we both performed a test of the backup.
3.6.1 Evidence
The site owner does all development on a staging Linux server at his home.  All
code development is done there, and tested on a local copy of the database,
before he deploys the updated code to the production web site.  Nightly backups
of the local server’s files and MySQL database are done automatically, using tar
to backup the files and mysqldump to backup the database.  Old backups are
kept indefinitely.
Since the most important copy of the database is the one on the live web site, a
scheduled job on the live web server also performs a mysqldump command
nightly to create backups of the database’s data.  The directory on the web
server containing these nightly backups is manually mirrored to the local staging
server periodically.  This is done with the same script that copies the access logs
to the owner’s local machine for analysis.  He estimates that this is done twice a
day, on average.  The database backups from the live server are occasionally
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
40
used to replace all content in the staging server’s database, for two reasons.
First, this allows the owner to test the backups; if there are any problems with
these backups from the live server, he will discover this when he attempts to im-
port them into his database server.  Second, it allows him to do site testing with
database contents that very closely resemble the contents of the live site, minus
any changes that occurred more recently than the last import.
We then proceeded to test the backups.  First, we deleted the database on the
development server (using a DROP DATABASE database-name command in
the MySQL console interface), and attempted to view the AuditApp home page.
As expected, we received a MySQL error, as it was unable to find the database
being requested in the code.  Next, we deleted the root directory of the web
server, and again attempted to view the site’s home page.  This time, we simply
received Apache’s default “page not found” page.  We were therefore able to
verify that both the site’s HTML and PHP code, along with the database contents,
had been deleted.
The site owner then extracted the contents of the previous night’s tar file backup
to a newly created root directory for the web site.  Following this, he uncom-
pressed the previous night’s mysqldump backup file, manually created a new
empty database in MySQL, and then imported the SQL commands in the backup
file into the new database.  I then viewed the AuditApp home page in my web
browser, and confirmed that it was fully functional.
We then took a closer look at the data stored in the database, and confirmed that
it did come from the most recent database backup.
3.6.2 Findings
Nightly backups are sufficiently frequent for this site.  The restore procedure was
able to successfully restore the site from the most recent backups available with
no errors.
The only concern is that the site owner is manually copying the backups of the
live site to the local server.  This raises the possibility of these backups occurring
infrequently if the site owner forgets or is unable to copy the backups at some
point.  However, given that this copying procedure is a necessary step for the
owner to analyze the site’s access statistics, it is likely to occur fairly often.  In
addition, the only way to automate this would be to include a copy of the SSH
password in the script, which would bring up other security issues.  Therefore,
while this is a concern, it is not a major one.
RESULT: PASS
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
41
3.7 Unsafe Hidden Form Elements
As described in the testing procedure, I used wget to make a local copy of all
files on the server, and searched them for hidden form elements.  In addition, I
obtained the original PHP files and searched those as well.
3.7.1 Evidence
I found eleven different hidden form elements in use on this site.  Four of these
are only available through the administrative interface, and therefore were not
analyzed further.  Those administrative pages all check the user’s access level
before displaying the page, so the user must be logged into an account with ad-
ministrative privileges to receive the hidden elements on the page.  As a result,
there is no further privilege escalation for them to attempt; these users already
have full access to the database.
The seven remaining hidden elements available to the public are described be-
low:
• One is on the change password page.  It takes an authentication string the
user passed in the URL of the page, and includes it in a form submission to a
second page.  The reason for this design is so the user account details can
be accessed using that string from the second page.  As this is simply pro-
viding user input to a second form, this is safe.
• Two hidden elements are on the page that displays the full details and all
content for an item in the database.  These two elements on this page are
both identical, simply used in different branches of the PHP code, and there-
fore will be treated as a single element.  They are located in a form that al-
lows the user to submit information about the item, and includes the item
number used in the database as a hidden field.  This is not a value previously
provided by the user, as they have no reason to know the internal database
ID for that item.  However, it does not provide any security risks.  The users
are permitted to provide information about any item in the database, and
therefore changing this internal identification number would have the same
effect as if they had gone to a different item’s page before submitting their in-
formation.  Therefore, these two hidden elements are safe.
• A fourth hidden element is on a different page that allows the user to enter a
different set of information about an item in the database.  This has the exact
same function as the previous two hidden elements.  The only effect changing
this hidden data would have is to add the user input to a different item, which
they could have done through legitimate means via the web site’s interface.
Therefore, this is safe.
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
42
• The remaining three hidden elements are all on the same page, which allows
users to enter new items into the database.  The process of entering new
items is a two-step process; the application first asks for three pieces of basic
information, and then creates a second page for the user to continue entering
information.  In order to provide the data entered on this first screen to the fi-
nal page that actually adds the information to the database, these three items
are included on the second page as hidden form elements.  This is safe, as
the hidden elements are items that the user provided previously.  Changing
the values hidden in the form would have the same effect as entering different
information on the first page.
3.7.2 Findings
All hidden elements in forms on the site have been shown to be safe.  However,
in every one of the cases examined above, a better solution would be to use
sessions.  The web site is already using session management to hold user data
such as username and access level.  Expanding the session variables to include
the data that would otherwise be stored in a hidden form element would be a
preferable solution to using these hidden elements.  As all of these uses are
safe, though; this suggestion merely is a preferred implementation.  Therefore,
the site passes this test.
RESULT: PASS
3.8 Ensure Directory Browsing Settings Are Correct
From earlier tests, I already had a full list of all directories on the web server.
This includes two directories that should never be visible to the public.  The test-
ing procedures described in the audit checklist were performed on all of these
directories.  This allowed me to test both the directory browsing settings as well
as any other protection mechanisms in place to prevent the public from access-
ing protected portions of the site.
For example, phpMyAdmin is installed on the live web site.  This is a web-based
interface to MySQL, giving the site owner a front-end that allows him to view,
modify, or delete any item in any table in the database.  It also allows any query
to be pasted in a plain text query window.  As a result, if an unauthorized user
was able to access phpMyAdmin, he/she would have full access to the site’s da-
tabase.  Obviously, this directory should be well-protected from unauthorized us-
ers.
3.8.1 Evidence
The following directories were checked:
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
43
Directory
Result
/images
The web server returned an HTTP 403 error page, which
means the request was forbidden.
/css
The web server returned an HTTP 403 error page, which
means the request was forbidden.
/backup
The web server asked for a username and password us-
ing basic authentication.  When none was given, the web
server returned an HTTP 401 error page, which means
authorization is required to view the page.
/logs
The web server asked for a username and password us-
ing basic authentication.  When none was given, the web
server returned an HTTP 401 error page, which means
authorization is required to view the page.
/phpmyadmin
The web server asked for a username and password us-
ing basic authentication.  When none was given, the web
server returned an HTTP 401 error page, which means
authorization is required to view the page.
Screenshots of the pages returned are not included here, as they were the de-
fault pages created by the web hosting company, and therefore would divulge
information about the web host in use for this site.
3.8.2 Findings
Browsing the first two directories—/css and /images—was denied because the
web server is configured to not automatically create index pages, even though
the user is allowed to view files contained in those directories.  This is the main
configuration item I was testing here, and the site passed.
Accessing the other three directories requires additional authentication.  This is
correct, as these directories should not be accessible to the public.
The site passes the test.  As a side note, it is recommended that the site owner
replace the stock error pages supplied by the web host with custom pages that
are more useful to the user.  While it is unrelated to the security of the site, it
would give the site a more professional feel.
RESULT: PASS
3.9 Attempt to Brute Force Administrative Account
Brutus was launched and configured for the login page for this site.  I also cre-
ated a custom user list that contained only the one administrative account that is
currently in use on the web site.  The word list was created from a list of common
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
44
passwords, a dictionary file, and “The Jargon File”23, and contained slightly more
than 30,000 entries.  The scan was performed against the development server
and database rather than the live site.  Before starting the test the site owner and
I verified that the user list on the development database was identical to the one
on the live database.
3.9.1 Evidence
The results are shown below:
The “Positive Authentication Results” section is empty, which indicates that Bru-
tus was unable to find a password that successfully logged into the site.
3.9.2 Findings
Brutus was unable to guess the password to the administrative account.  There-