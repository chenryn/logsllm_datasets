### 3.4.1 Evidence

For both of the following requests, the web server returned the requested image:

**Request 1:**
```
GET images/1.jpg HTTP/1.1
Host: website.name.com
Referer: www.someothersite.com
```

**Request 2:**
```
GET /go.gif HTTP/1.1
Host: website.name.com
Referer: www.someothersite.com
```

To ensure that the server correctly received and processed the requests with the correct referrer strings, I examined the access log. The sanitized version of the log entry is as follows:

```
my.ip.address.here - - [01/Apr/2004:23:42:15 -0400] "GET /go.gif HTTP/1.1" 200 1124 "website.name.com" "www.someothersite.com" "-" "-"
```

This log entry confirms that the server received the request with the specified referrer and responded with a 200 OK status code, indicating a successful request.

Since the testing was conducted through a telnet window, it was not possible to view the actual image sent by the server. To verify the content of the image, I set up a test web page on another server. This page included links to the images on `AuditApp`. When viewed in a web browser, the page confirmed that the server was indeed sending the correct images.

### 3.4.2 Findings

The server successfully delivered the images even when the referrer string indicated that they were linked from a different site. This demonstrates that there are no safeguards against bandwidth theft on `AuditApp`.

**Result: FAIL**

### 3.5 Scan for Sample Files or Scripts

As described in the testing procedures (section 2.5), I performed a Nessus scan of `AuditApp` with only the “CGI Abuses” option selected. The scan completed without any errors.

#### 3.5.1 Evidence

The Nessus scan results are as follows:

**Nessus Scan Report:**
- **Number of hosts alive during the test:** 1
- **Number of security holes found:** 0
- **Number of security warnings found:** 0
- **Number of security notes found:** 1

**Tested Host:**
- **web.site.name.com**
  - **Open ports:**
    - FTP (21/tcp)
    - SSH (22/tcp)
    - HTTP (80/tcp)
    - General/TCP (Security note found)
  - **Information on port general/tcp:**
    - Nmap detected the host is running Linux Kernel 2.4.0 - 2.4.17 (X86)

**Summary:**
- This file was generated by the Nessus Security Scanner.

#### 3.5.2 Findings

The scan did not identify any security holes or warnings. The only result was a note indicating Nessus' guess at the operating system. No additional testing was necessary.

**Result: PASS**

### 3.6 Test Backup Procedures

I interviewed the site owner to determine the current backup procedures and then performed a test of the backup process.

#### 3.6.1 Evidence

The site owner performs all development on a staging Linux server at his home. Code development and testing are done on a local copy of the database before deployment to the production site. Nightly backups of the local server’s files and MySQL database are automated using `tar` and `mysqldump`, respectively. Old backups are retained indefinitely.

A scheduled job on the live web server also performs a nightly `mysqldump` to back up the database. These backups are periodically mirrored to the local staging server using a script that also copies the access logs. The site owner estimates this mirroring occurs twice daily on average.

The live server's database backups are occasionally used to replace the staging server’s database for two reasons:
1. To test the backups.
2. To allow testing with database contents closely resembling the live site.

To test the backups, we:
1. Deleted the database on the development server and verified that the AuditApp home page displayed a MySQL error.
2. Deleted the root directory of the web server and verified that the home page displayed an Apache "page not found" error.
3. Restored the site from the previous night’s backups, confirming that the site was fully functional.

We also confirmed that the restored data matched the most recent backup.

#### 3.6.2 Findings

Nightly backups are sufficient for this site, and the restore procedure was successful. The only concern is the manual copying of backups from the live site to the local server, which could be infrequent if the site owner forgets. However, given the necessity of this step for access statistics analysis, it is likely to occur regularly. Automating this process would introduce other security issues, so this concern is minor.

**Result: PASS**

### 3.7 Unsafe Hidden Form Elements

As per the testing procedure, I used `wget` to make a local copy of all files on the server and searched them for hidden form elements. I also obtained the original PHP files and searched those.

#### 3.7.1 Evidence

I found eleven hidden form elements, four of which are only available through the administrative interface and were not further analyzed. The remaining seven public hidden elements are as follows:

1. **Change Password Page:**
   - Contains an authentication string passed via the URL and included in a form submission. This is safe as it provides user input to a second form.

2. **Item Details Page:**
   - Two identical hidden elements used in different branches of the PHP code. They include the item number in the database as a hidden field. This is safe as changing the internal ID would have the same effect as accessing a different item.

3. **Different Item Information Page:**
   - A hidden element with the same function as the previous two. Changing this hidden data would only add user input to a different item, which can be done through legitimate means. This is safe.

4. **New Item Entry Page:**
   - Three hidden elements on the same page, used in a two-step process to enter new items into the database. These elements store basic information provided by the user. Changing these values would have the same effect as entering different information on the first page. This is safe.

#### 3.7.2 Findings

All hidden form elements on the site are safe. However, a better solution would be to use session management, which the site already uses for storing user data. Expanding session variables to include the data stored in hidden form elements would be preferable. As all uses are safe, the site passes this test.

**Result: PASS**

### 3.8 Ensure Directory Browsing Settings Are Correct

From earlier tests, I had a full list of all directories on the web server, including two that should never be visible to the public. I tested the directory browsing settings and other protection mechanisms for all directories.

#### 3.8.1 Evidence

The following directories were checked:

- **/images:**
  - Returned an HTTP 403 Forbidden error.

- **/css:**
  - Returned an HTTP 403 Forbidden error.

- **/backup:**
  - Requested a username and password using basic authentication. Without credentials, an HTTP 401 Unauthorized error was returned.

- **/logs:**
  - Requested a username and password using basic authentication. Without credentials, an HTTP 401 Unauthorized error was returned.

- **/phpmyadmin:**
  - Requested a username and password using basic authentication. Without credentials, an HTTP 401 Unauthorized error was returned.

Screenshots of the pages are not included to avoid divulging information about the web host.

#### 3.8.2 Findings

Browsing `/css` and `/images` was denied because the server is configured to not automatically create index pages. Accessing `/backup`, `/logs`, and `/phpmyadmin` requires additional authentication, which is correct. The site passes this test. It is recommended to replace the default error pages with custom ones for a more professional appearance.

**Result: PASS**

### 3.9 Attempt to Brute Force Administrative Account

I used Brutus to attempt a brute force attack on the administrative account. The word list contained common passwords, a dictionary file, and entries from “The Jargon File,” totaling over 30,000 entries. The scan was performed on the development server and database, which was verified to have the same user list as the live site.

#### 3.9.1 Evidence

The results showed that Brutus was unable to find a password that successfully logged into the site.

#### 3.9.2 Findings

Brutus was unable to guess the password for the administrative account, indicating strong password security.

**Result: PASS**