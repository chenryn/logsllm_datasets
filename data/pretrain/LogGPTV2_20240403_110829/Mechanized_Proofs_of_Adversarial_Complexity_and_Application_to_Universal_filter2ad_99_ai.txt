n]
memΓ(abort)
memΓ(x ← e)
memΓ(s1; s2)
=
=
∅
{x} ⊔ vars(e)
memΓ(skip)
$←− d)
memΓ(x
memΓ(while e do s)
=
=
=
∅
{x}
vars(e) ⊔ memΓ(s)
= memΓ(s1) ⊔ memΓ(s1)
memΓ(if e then s1 else s2) = vars(e) ⊔ memΓ(s1) ⊔ memΓ(s1)
memΓ(x ← call p.f ((cid:174)e ))
memΓ(p)
= {x} ⊔ memΓ(p.f ) ⊔ vars((cid:174)e )
= ⊔f ∈procs
Γ(p) memΓ(p.f )
memΓ(p.f )
= (memΓ(s) ∪ vars(r))\{(cid:174)v ; (cid:174)vl}
When f-resΓ(p.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = { var ((cid:174)vl : (cid:174)τl); s; return r }):
When f-resΓ(p.f ) = (absK x)((cid:174)p0).f , K = open and Γ(x) = absK : func(_) sig _ restr θ end:
= θ[f ] ⊔ memΓ((cid:174)p0)
memΓ(p.f )
When f-resΓ(p.f ) = (absparam x)((cid:174)p0).f :
memΓ(p.f )
= memΓ((cid:174)p0)
Figure 18: Additional typing rules and operations.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2559Module path resolution resΓ(p) to module expression
resΓ(p)
resΓ(p.x)
resΓ(p(p′)) = resΓ(m0[x (cid:55)→ p′])
resΓ(p(p′)) = (absK x)((cid:174)p0, p′)
= resΓ( ¯m)
(if Γ(p) = ¯m : _)
= resΓ(m)
(if resΓ(p) = struct st1; module x = m : M; st2 end)
(if resΓ(p) = func(x : M) m0)
(if resΓ(p) = (absK x)((cid:174)p0))
Module expression resolution resΓ( ¯m)
resΓ(struct st end) = struct st end
resΓ(func(x : M) m) = func(x : M) m
resΓ((absK x)((cid:174)p)) = (absK x)((cid:174)p)
Module procedure resolution f-resΓ(m.f )
(note that this includes resolution for function paths f-res
Γ(p.f ))
f-resΓ(p.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = body)
(if Γ(p.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = body))
f-resΓ(m.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = body)
(if resΓ(m) = struct st1; proc f ((cid:174)v : (cid:174)τ) → τr = body; st2 end)
f-resΓ(m.f ) = (absK x)((cid:174)p).f
(if resΓ(m) = (absK x)((cid:174)p))
Figure 19: Resolution functions for paths, module expres-
sions and module procedure.
defined as Eµ[µ′] = b ∈ B (cid:55)→
#(µ′) = b (cid:55)→
If µ ∈ D(A) and µ′ ∈ A → D(B), the expected distribution of
µ′ ∈ D(B) when ranging over µ, written Ex∼µ[µ′(x)] or Eµ[µ′], is
a∈A µ(a) µ′(a)(b). For µ′ ∈ D(A)
and f : A → B, the marginal of µ′ w.r.t. f , written f
#(µ′) ∈ D(B),
#
1 (resp.
is defined as f
#
2 ) for resp. the first and second marginal — i.e. when f is resp. the
π
first and second projection. For any base type τ ∈ B, we assume an
interpretation domain Vτ . We let V be the set of all possible values
∪τ ∈BVτ . A memory ν ∈ M is a function from V to V. We write
ν[x] for ν(x). For ν ∈ M and v ∈ V, we write ν[x ← v] for the
memory that maps x to v and y to ν[y] for y (cid:44) x.
a∈A|f (a)=b µ′(a). We write π
Expressions semantics. For any operator f ∈ FE with type τ1 ×
· · ·×τn → τ, we assume given its semantics(cid:76)f(cid:77) : Vτ1 ×· · ·× Vτn (cid:55)→
Vτ , and the cost of its evaluation cE(f ,·) : Vτ1 ×· · ·× Vτn (cid:55)→ N. The
semantics(cid:76)e(cid:77)ν : M → V of a well-typed expression e in a memory
ν is defined inductively by:
(cid:40)
(cid:76)e(cid:77)ν =
ν(x)
(cid:76)f(cid:77)((cid:76)e1(cid:77)ν , . . . ,(cid:76)en(cid:77)ν)
if e = x ∈ V
if e = f (e1, . . . , e1)
And the cost of the evaluation of a well-typed expression cE(e,·) :
M (cid:55)→ N is defined by:
ν
ν
ν
(cid:74)skip(cid:75)E, ρ
(cid:74)abort(cid:75)E, ρ
(cid:74)s1; s2(cid:75)E, ρ
(cid:74)x ← e(cid:75)E, ρ
(cid:74)x
$←− d(cid:75)E, ρ
(cid:74)if e then s1 else s2(cid:75)E, ρ
(cid:74)while e do s(cid:75)E, ρ
ν
ν
ν
ν
where
and
loope,s
loope,s
= 1(ν,0)
= 0
′]
ν
[(cid:74)s2(cid:75)E, ρ
ν′ ⊕ c
= E(ν′,c′)∼(cid:74)s1(cid:75)E, ρ
= 1(ν[x←(cid:76)e(cid:77)ν ],cE(e,ν))
(cid:74)s1(cid:75)E, ρ
= Ev∼(cid:76)d(cid:77)ν [1(ν[x←v],cD(d,ν))]
(cid:74)s2(cid:75)E, ρ
n(cid:55)→∞(cid:74)loope,s
n (cid:75)E, ρ
n+1 = if e then (s; loope,s
0 = if e then abort else skip
⊕ cE(e, ν)
⊕ cE(e, ν)
= lim
=
ν
ν
ν
n ) else skip
if(cid:76)e(cid:77)ν (cid:44) 0
otherwise
Moreover, if f-resE(m.f ) = proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; return r }:
ν
=
(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ
let ν0 = ν[(cid:174)v ←(cid:76)(cid:174)e(cid:77)ν] in
[1ν′[x←(cid:76)r(cid:77)ν′],c′+cE((cid:174)e,ν)+cE(r,ν′)]
E(ν′,c′)∼(cid:74)s(cid:75)E, ρ
And if f-resE(m.f ) = (absopen x)((cid:174)p).f :
(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ
=(cid:74)x ← call ρ(x)((cid:174)p).f ((cid:174)e )(cid:75)E, ρ
Figure 20: (E, ρ)-denotational semantics(cid:74)_(cid:75)E, ρ
ν0
ν
ν
ν
.
For technical reasons, we assume that there exists one operator
with a non-zero cost.12
For any distribution operator d ∈ FD with type τ1×· · ·×τn → τ,
we assume given its semantics(cid:76)d(cid:77) : Vτ1 × · · · × Vτn (cid:55)→ D(Vτ ), and
the cost of its evaluation cD(d,·) : Vτ1 × · · · × Vτn (cid:55)→ N. We define
similarly(cid:76)d(cid:77)ν : M → D(V) and cD(d,·) : M (cid:55)→ N.
Environment and E-pre-interpretation. To give the semantics of
a program in an environment E, we need an interpretation of E’s
abstract modules. A E-pre-interpretation is a function ρ from E’s
abstract modules to module expressions, with the correct types,
except for complexity restrictions. We will specify what it means for
a module expression to verify a complexity restriction later, after
having defined the semantics of our language.
Definition D.1. Let erasecompl(M) be the module signature M
where every complexity restriction λc has been erased, by replacing
it by ⊤. Then ρ is a E-pre-interpretation if and only if for every
x such that E = E1; module x = absopen : Ml; E2, we have E1 ⊢ϵ
ρ(x) : erasecompl(Ml).
Note that we type ρ(x) in E1, which lets the interpretation of x
use any module or abstract module declared before x in E.
cE(e, ν) =
1
cf +1≤i ≤n cE(ei , ν)
if e = x ∈ V
if e = f (e1, . . . , en)
and cf = cE(f ,(cid:76)e1(cid:77)ν , . . . ,(cid:76)en(cid:77)ν)
Programs semantics. If µ ∈ D(M × N) and n ∈ N, we write µ ⊕ n
#(µ) where f : (m, c) (cid:55)→ (m, c + n). Let E be a
for the distribution f
well-typed environment, and s be a well-typed instruction in E, i.e.
12Some of our lemmas do not hold if all programs have a cost of zero.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2560ν
ν
ν
ν
ν
ν
ν
′]
= 1(ν,0)
= 0
[y.д(cid:74)s2(cid:75)E, ρ
ν′ ⊕ c
y.д(cid:74)skip(cid:75)E, ρ
y.д(cid:74)abort(cid:75)E, ρ
y.д(cid:74)s1; s2(cid:75)E, ρ
y.д(cid:74)x ← e(cid:75)E, ρ
y.д(cid:74)x
$←− d(cid:75)E, ρ
y.д(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ
y.д(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ
y.д(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ
y.д(cid:74)if e then s1 else s2(cid:75)E, ρ
y.д(cid:74)while e do s(cid:75)E, ρ
Figure 21: Function call counting semantics y.д(cid:74)_(cid:75)E, ρ
= E(ν′,c′)∼y.д(cid:74)s1(cid:75)E, ρ
= 1(ν[x←(cid:76)e(cid:77)ν ],0)
= Ev∼(cid:76)d(cid:77)ν [1(ν[x←v],0)]
= let ν0 = ν[(cid:174)v ←(cid:76)(cid:174)e(cid:77)ν] in
[1(ν′[x←(cid:76)r(cid:77)ν′],c′)]
E(ν′,c′)∼y.д(cid:74)s(cid:75)E, ρ
(if f-resE(m.f ) = proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; return r })
= y.д(cid:74)x ← call ρ(x)((cid:174)p).f ((cid:174)e )(cid:75)E, ρ
⊕ 1
(if f-resE(m.f ) = (absopen x)((cid:174)p).f and x.f = y.д)
= y.д(cid:74)x ← call ρ(x)((cid:174)p).f ((cid:174)e )(cid:75)E, ρ
y.д(cid:74)s1(cid:75)E, ρ
(if f-resE(m.f ) = (absopen x)((cid:174)p).f and x.f (cid:44) y.д)
if(cid:76)e(cid:77)ν (cid:44) 0
y.д(cid:74)s2(cid:75)E, ρ
y.д(cid:74)loope,s
n (cid:75)E, ρ
= lim
n(cid:55)→∞
otherwise
⊕ 0
⊕ 0
=
ν0
ν
ν
ν
ν
ν
ν
ν
ν
ν
.
ν
ν
under the memory ν and E-pre-interpretation ρ, written(cid:74)s(cid:75)E, ρ
such that E ⊢ s. The E-denotational semantics of an instruction s
∈
D(M × N), is defined in Figure 20.
We give the semantics for an extended syntax, which allows
procedure calls to be of the form x ← call m.f ((cid:174)e ) where m is a
module expression. Note that this subsumes the syntax of state-
ments, since a module expression m can be a module path p. This
allows to concisely define the semantics of a call to an abstract
procedure (absopen x)((cid:174)p).f as the semantics of a call to ρ(x)((cid:174)p).f .
The E-cost of an instruction s under memory ν and E-pre-
interpretation ρ, denoted by costE, ρ
(s) ∈ N ∪ {+∞}, is defined as:
ν
costE, ρ
ν
(s) = sup(supp(π
#
2((cid:74)s(cid:75)E, ρ
ν
)))
where supp is the support of a distribution (this definition is equiv-
alent to the one given in Section 4.3).
D.2 Instrumented Semantics
We present two other instrumented semantics: y.д(cid:74)s(cid:75)E, ρ
the number of times s calls an abstract procedure y.д; and i(cid:74)s(cid:75)E, ρ
measures the intrinsic cost of an instruction (i.e. without counting
the cost of function calls in a functor parameters).
counts
ν
ν
y.д(cid:74)s(cid:75)E, ρ
Function call counting. The function call counting semantics
, given in in Figure 21, evaluates the instruction s under
the memory ν and E-pre-interpretation ρ, counting the number of
calls to the abstract procedure y.д.
ν
The maximum number of calls of an instruction s or module