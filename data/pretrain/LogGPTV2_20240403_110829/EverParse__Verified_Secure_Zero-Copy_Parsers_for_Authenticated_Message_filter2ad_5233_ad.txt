let count_ciphersuites (input: bytes): UInt32.t =
match clientHello_parser32 input with
| None → 0ul
| Some ch → List.length ch.ciphersuites
let compute_extensions conﬁg: (l: list extension {...} ) = ...
let hello (cfg: conﬁg) : bytes =
clientHello_serializer32 {
version = TLS_1p3;
random = conﬁg.random;
...;
extensions = compute_extensions conﬁg; }
This code and its supporting parsers and formatters op-
erate on immutable bytestrings. Although it can be safely
extracted to C, it is inefﬁcient, and the implicit allocations and
copies mandate the use of a garbage-collector. For example,
clientHello_parser32 allocates 4 lists and brieﬂy uses only one.
4.4 Low-Level Accessors and Readers
To provide more efﬁcient implementations, QuackyDucky
also generates code for a lower-level API that enables in-place
processing of messages in their binary formats.
We begin with a low-level alternative to parsing. For each
parser speciﬁcation p, QuackyDucky provides functions that
operate on an input buffer. A validator reads the input buffer
and returns either the number of bytes that p would consume
by successfully parsing its contents, or an error code. Thus,
successful validation ensures the existence of a high-level
message in binary format, but does not construct it. Assuming
the input buffer is valid, then, for each ﬁeld of the message,
an accessor computes the position of the ﬁrst byte in its
binary representation. This guarantees in particular that this
representation of this element of the message is also valid.
Accessor computations are similar to pointer arithmetic in
C, or “get element pointer” computations in LLVM, but they
sometimes require reading the lengths of intermediate parts in
order to skip them. For each base type (e.g. 16-byte unsigned
integers), a reader takes an input buffer and position and
actually parses and returns a value of that type.
Continuing with our example, QuackyDucky produces a
validator for clientHello and an accessor for every ﬁeld (shown
below only for its cipherSuites).
val clientHello_validator : validator clientHello_parser
val accessor_clientHello_cipherSuites :
accessor
clientHello_parser
clientHello_cipherSuites
clientHello_cipherSuites_parser
The type deﬁnitions validator and accessor are still parameter-
ized by parser speciﬁcations, but they are more complex, since
they describe functions that operate on pointers to mutable
buffers. We represent their input as a slice, that is, a Low(cid:63)
buffer (§4.1) and its length, and a position within this slice.
(Experimentally, computations on integer positions based on
a single pointer are simpler to verify, and better optimized
by C compilers.) Accordingly, our validators return either the
ﬁnal position in the slice after successful validation, or an
error coded as a large integer. We illustrate their use by re-
implementing the count_cipherSuites example of §4.3 in Low(cid:63).
let count_ciphersuites_inplace (input:slice) (pos:UInt32.t) =
let pos_ﬁnal = clientHello_validator input pos in
if max_length 
t{M..N}
Data Type
Unsigned integer within 0..2N − 1
Fixed-size array of ts of length N
List of ts, of variable length M..N
List of ts of variable element count M..N
struct{t1 x1; . . .; tn xn;}
Record with n ﬁelds named (xi) of type (ti)
struct {. . .; uintN x; t y[x]; . . .}
enum {E1(N1), . . ., En(Nn), (M)}
struct {t x; select(x) {
case E1: t1; . . .; case En: tn } y}
Variable-length ﬁeld y preﬁxed by its length x
Constant integer enumeration
(with maximal value M = 2N − 1)
Tagged union (t must be an enum type)
Parser Combinator
parse_uN
plist[p] truncN
vldata(plist[p], M, N)
(parse_uk ﬁlter (n (cid:55)→ M ≤ n ≤ N)) (cid:46) (n (cid:55)→ pn)
where k = 8× log256 N
(p1 ×···× pn) synth
((v1, . . . ,vn) (cid:55)→ {x1 = v1; . . .;xn = vn})
vldata(p,0,256N/8 − 1)
penum(parse_uN, [(E1,N1); . . .; (En,Nn)])
p (cid:46) f q where f (Ei,x) = Ei
and q(Ei) = pi synth (y (cid:55)→ (Ei,y))
Figure 8: The QuackyDucky input language and the corresponding LowParse combinators: everywhere in this table, pi is the
parser for type ti. All lengths are counted in bytes except otherwise mentioned.
speciﬁcation level and their security properties, then discuss
more brieﬂy their implementations. For each speciﬁcation
combinator, we prove non-malleability and inverse properties;
for each implementation combinator, we prove both safety and
correctness. All properties are veriﬁed by typing the library.
Figure 8 summarizes the QuackyDucky input language
and the corresponding LowParse combinators. We designed
QuackyDucky and LowParse in a modular way, making it easy
to extend the surface syntax of QuackyDucky by providing
additional combinators. For instance, the t x{M..N} syntax for
variable-size lists preﬁxed with their number of elements is a
late addition to support the Bitcoin application in §6.2 but is
not required for TLS.
We ﬁrst deﬁne the properties attached to the speciﬁcations
of §4.2. We prove a stronger version of non-malleability than
the one given in §2.1, extending the deﬁnition there to handle
parsers that may not consume all their input.
Deﬁnition 1 A parser p for type t is non-malleable if, when-
ever it succeeds and returns the same parsed value on two
inputs, it also returns the same number of consumed bytes,
and the two inputs coincide of these bytes.
We also rely on the following no-lookahead property:
Deﬁnition 2 A parser p has the strong preﬁx property when,
if it succeeds on an input and consumes (cid:96) bytes, then it returns
the same result on any inputs with the same ﬁrst (cid:96) bytes.
For a serializer to exist for a format that requires concate-