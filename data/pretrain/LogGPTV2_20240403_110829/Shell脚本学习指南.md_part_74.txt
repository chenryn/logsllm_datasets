# Bash Shell 起始与终结文件处理

### Bash Shell 的起始和终结文件
- **.bash_profile** 文件位于 `/home/bones/` 目录下，用于设置用户的环境变量。当用户登录系统时，此文件会被读取。
  ```bash
  $ exit
  Logout
  终结通信期
  DEBUG: This is /home/bones/.bash_logout
  ```
- **交互式会话**：仅引用一个配置文件。
  ```bash
  $ bash
  DEBUG: This is /home/bones/.bashrc
  开始交互式通信期
  $ exit
  终结通信期
  ```
- **非交互式会话**：通常不加载任何启动文件。
  ```bash
  $ echo pwd | bash
  在bash下执行命令
  /home/bones
  ```
  - 如果设置了 `BASH_ENV` 环境变量，则指定的脚本会被加载。
    ```bash
    $ echo pwd | BASH_ENV=~/bashenv bash
    DEBUG: This is /home/bones/bashenv
    在bash下执行命令
    /home/bones
    ```

### Z-Shell (zsh) 的起始与终结
Z-Shell (`zsh`) 可以模拟为 Bourne Shell 或 Korn Shell，并且在启动时会尝试读取多个配置文件，具体取决于会话类型。

#### 启动文件
1. **所有会话**：
   - 检查并读取 `/etc/zshenv`
   - 如果设置了 `ZDOTDIR` 变量，则检查并读取 `$ZDOTDIR/.zshenv`
   - 否则，检查并读取 `$HOME/.zshenv`
2. **登录会话**：
   - 检查并读取 `/etc/zprofile`
   - 如果设置了 `ZDOTDIR` 变量，则检查并读取 `$ZDOTDIR/.zprofile`
   - 否则，检查并读取 `$HOME/.zprofile`
3. **交互式会话**：
   - 检查并读取 `/etc/zshrc`
   - 如果设置了 `ZDOTDIR` 变量，则检查并读取 `$ZDOTDIR/.zshrc`
   - 否则，检查并读取 `$HOME/.zshrc`
4. **登录会话**（续）：
   - 检查并读取 `/etc/zlogin`
   - 如果设置了 `ZDOTDIR` 变量，则检查并读取 `$ZDOTDIR/.zlogin`
   - 否则，检查并读取 `$HOME/.zlogin`

#### 结束文件
- **登录会话**：
  - 检查并读取 `$ZDOTDIR/.zlogout` （如果设置了 `ZDOTDIR` 变量）
  - 否则，检查并读取 `$HOME/.zlogout`
  - 最后，检查并读取 `/etc/zlogout`

### 示例
- **登录会话**：
  ```bash
  $ login
  起始新的登录通信期
  login: zabrak
  Password:
  DEBUG: This is /etc/zshenv
  DEBUG: This is /home/zabriski/.zshenv
  DEBUG: This is /etc/zprofile
  DEBUG: This is /home/zabriski/.zprofile
  DEBUG: This is /home/zabriski/.zshrc
  DEBUG: This is /etc/zshrc
  DEBUG: This is /etc/zlogin
  DEBUG: This is /home/zabriski/.zlogin
  DEBUG: This is /home/zabriski/.zlogout
  DEBUG: This is /etc/zlogout
  $ exit
  终结通信期
  ```

- **交互式会话**：
  ```bash
  $ zsh
  开始一个新的交互式通信期
  DEBUG: This is /etc/zshenv
  DEBUG: This is /home/zabriski/.zshenv
  DEBUG: This is /home/zabriski/.zshrc
  DEBUG: This is /etc/zshrc
  $ exit
  静默：未读取任何终结文件
  终结通信期
  ```

- **非交互式会话**：
  ```bash
  $ echo pwd | zsh
  在zsh下执行命令
  DEBUG: This is /etc/zshenv
  /home/zabriski
  ```

### 小结
POSIX 标准提高了可移植性脚本的可能性，但真实世界中的 Shell 实现往往有额外的扩展。Bash 和 ksh93 提供了许多有用的扩展，如 `select` 循环、模式匹配、进程替换等。编写安全的 Shell 脚本需要注意路径、环境变量、输入验证等多个方面。