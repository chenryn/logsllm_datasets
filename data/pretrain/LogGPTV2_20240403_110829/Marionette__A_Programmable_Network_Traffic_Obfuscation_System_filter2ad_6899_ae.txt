We then invoked Marionette with our three new for-
mats and scanned each of the listening instances with our
ﬁngerprinting tools. In order to claim success, we require
two conditions. First, the three ﬁngerprinting tools in
our evaluation must report the exact same ﬁngerprint as
the target. Second, we require that a Marionette client
must be able to connect to the server and relay data,
as described in prior sections. We achieved this for all
USENIX Association  
24th USENIX Security Symposium  379
Section
7.1
7.2
7.3
7.4
Protocol
HTTP, SSH, etc.
FTP, POP3
HTTP
HTTP
Percent of Time Blocking
on Network I/O
Server
50.1%
80.5%
96.8%
98.8%
Client
56.9%
90.1%
84.0%
65.5%
Figure 11: Summary of case study formats and time spent
blocking on network I/O for both client and server.
nine conﬁgurations (three protocols, three ﬁngerprinting
tools) and we summarize our results in Figure 10.
7.6 Performance
In our experiments, the performance of Marionette was
dominated by two variables:
(1) the structure of the
model speciﬁcation and (2) the client-server latency in
our testbed. To illustrate the issue, consider our FTP for-
mat in Section 7.2 where we require nine back-and-forth
messages in the FTP command channel before we can
invoke a PASV FTP connection. This format requires
a total of thirteen round trips (nine for our messages and
four to establish the two TCP connections) before we can
send our ﬁrst downstream ciphertext. In our testbed, with
a 75ms client-server latency, this means that (at least)
975ms elapse before we send any data. Therefore, a dis-
proportionately large amount of time is spent blocking
on network I/O.
In Figure 11 we give the percentage of time that our
client and server were blocked due to network I/O, for
each of the Marionette formats in our case studies. In
the most extreme case, the Marionette server for the
HTTP speciﬁcation in Section 7.4 sits idle 98.8% of the
time, waiting for network events. These results sug-
gest that that certain Marionette formats (e.g., HTTP in
Section 7.4) that target high-ﬁdelity mimicry of protocol
behaviors, network effects can dominate overall system
performance. Appropriately balancing efﬁciency and re-
alism is an important design consideration for Marionette
formats.
8 Conclusion
The Marionette system is the ﬁrst programmable ob-
fuscation system to offer users the ability to control
trafﬁc features ranging from the format of individual
application-layer messages to statistical features of con-
nections to dependencies among multiple connections.
In doing so, the user can choose the strategy that best
suits their network environment and usage requirements.
More importantly, Marionette achieves this ﬂexibility
without sacriﬁcing performance beyond what is required
to maintain the constraints of the model. This provides
the user with an acceptable trade-off between depth of
control over trafﬁc features and network throughput. Our
evaluation highlights the power of Marionette through
a variety of case studies motivated by censorship tech-
niques found in practice and the research literature. Here,
we conclude by putting those experimental results into
context by explicitly comparing them to the state of the
art in application identiﬁcation techniques, as well as
highlighting the open questions that remain about the
limitations of the Marionette system.
DPI.
The most widely used method for application
identiﬁcation available to censors is DPI, which can
search for content matching speciﬁed keywords or regu-
lar expressions. DPI technology is now available in a va-
riety of networking products with support for trafﬁc vol-
umes reaching 30Gbps [11], and has been demonstrated
in real-world censorship events by China [41] and Iran
[7]. The Marionette system uses a novel template gram-
mar system, along with a ﬂexible plugin system, to con-
trol the format of the messages produced and how data
is embedded into those messages. As such, the system
can be programmed to produce messages that meet the
requirements for a range of DPI signatures, as demon-
strated in Sections 7.1 and 7.2.
Proxies and Application Firewalls. Many large en-
terprise networks implement more advanced proxy and
application-layer ﬁrewall devices that are capable of
deeper analysis of particular protocols, such as FTP,
HTTP, and SMTP [39]. These devices can cache data
to improve performance, apply protocol-speciﬁc content
controls, and examine entire protocol sessions for indi-
cations of attacks targeted at the application.
In many
cases, the proxies and ﬁrewalls will rewrite headers to en-
sure compliance with protocol semantics, multiplex con-
nections for improved efﬁciency, change protocol ver-
sions, and even alter content (e.g., HTTP chunking). Al-
though these devices are not known to be used by nation-
states, they are certainly capable of large trafﬁc vol-
umes (e.g., 400TB/day [6]) and could be used to block
most current obfuscation and mimicry systems due to the
changes they make to communications sessions. Mar-
ionette avoids these problems by using template gram-
mars and a resilient record layer to combine several inde-
pendent data-carrying ﬁelds into a message that is robust
to reordering, changes to protocol headers, and connec-
tion multiplexing. The protocol compliance and proxy
traversal capabilities of Marionette were demonstrated in
Sections 7.2 and 7.3, respectively.
380  24th USENIX Security Symposium 
USENIX Association
papers
Recent
[20] and Geddes et al.
Advanced Techniques.
by
Houmansadr et al.
[17]
have presented a number of passive and active tests
that a censor could use to identify mimicry systems.
The passive tests include examination of dependent
communication channels that are not present in many
mimicry systems, such as a TCP control channel in
the Skype protocol. Active tests include dropping
packets or preemptively closing connections to elicit
an expected action that the mimicked systems do not
perform. Additionally, the networking community have
been developing methods to tackle the problem of trafﬁc
identiﬁcation for well over a decade [9], and speciﬁc
methods have even been developed to target encrypted
network trafﬁc [44].
To this point, there has been no evidence that these
more advanced methods have been applied in practice.
This is likely due to two very difﬁcult challenges. First,
many of the trafﬁc analysis techniques proposed in the
literature require non-trivial amounts of state to be kept
on every connection (e.g., packet size bi-gram distribu-
tions), as well as the use of machine learning algorithms
that do not scale to the multi-gigabit trafﬁc volumes of
enterprise and backbone networks. As a point of com-
parison, the Bro IDS system [28], which uses DPI tech-
nology, has been known to have difﬁculties scaling to
enterprise-level networks [35]. The second issue stems
from the challenge of identifying rare events in large vol-
umes of trafﬁc, commonly referred to as the base-rate fal-
lacy. That is, even a tiny false positive rate can generate
an overwhelming amount of collateral damage when we
consider trafﬁc volumes in the 1 Gbps range. Sommer
and Paxson [32] present an analysis of the issue in the
context of network intrusion detection and Perry [29] for
the case of website ﬁngerprinting attacks.
Regardless of the current state of practice, there may
be some cases where technological developments or a
carefully controlled network environment enables the
censor to apply these techniques. As we have shown in
Section 7.4, however, the Marionette system is capable
of controlling multiple statistical features not just within
a single connection, but also across many simultaneous
connections. We also demonstrate how our system can
be programmed to spawn interdependent models across
multiple connections in Section 7.2. Finally, in Section
7.5, we explored the use of error transitions in our mod-
els to respond to active probing and ﬁngerprinting.
Future Work. While the case studies described in the
previous section cover a range of potential adversaries,
we note that there are still many open questions and po-
tential limitations that have yet to be explored. For one,
we do not have a complete understanding of the capa-
bilities of the probabilistic I/O automata to model long-
term state. These automata naturally exhibit the Markov
property, but can also be spawned in a hierarchical man-
ner with shared global and local variables, essentially
providing much deeper conditional dependencies. An-
other area of exploration lies in the ability of template
grammars to produce message content outside of sim-
ple message headers, potentially extending to context-
sensitive languages found in practice. Similarly, there
are many questions surrounding the development of the
model speciﬁcations themselves since, as we saw in Sec-
tion 7.6, these not only impact the unobservability of the
trafﬁc but also its efﬁciency and throughput.
References
[1] Lantern. https://getlantern.org/.
[2] metasploit. http://www.metasploit.com/.
[3] Nessus. http://www.tenable.com/.
[4] Nmap. https://nmap.org/.
[5] uproxy. https://uproxy.org/.
[6] Apache trafﬁc server. http://trafficserver.apache.
org/.
[7] Simurgh Aryan, Homa Aryan, and J. Alex Halderman. Internet
censorship in iran: A ﬁrst look. In Presented as part of the 3rd
USENIX Workshop on Free and Open Communications on the
Internet, Berkeley, CA, 2013. USENIX.
[8] Chad Brubaker, Amir Houmansadr, and Vitaly Shmatikov.
Cloudtransport: Using cloud storage for censorship-resistant net-
working.
In Proceedings of the 14th Privacy Enhancing Tech-
nologies Symposium (PETS 2014), July 2014.
[9] A. Callado, C. Kamienski, G. Szabo, B. Gero, J. Kelner, S. Fer-
nandes, and D. Sadok. A survey on internet trafﬁc identiﬁcation.
Communications Surveys Tutorials, IEEE, 11(3):37–52, rd 2009.
[10] Jin Cao, William S. Cleveland, Yuan Gao, Kevin Jeffay, F. Donel-
son Smith, and Michele Weigle. Stochastic models for generating
synthetic http source trafﬁc. In IN PROCEEDINGS OF IEEE IN-
FOCOM, 2004.
[11] Cisco
sce
http:
8000
service
control
engine.
//www.cisco.com/c/en/us/products/
collateral/service-exchange/
sce-8000-series-service-control-engine/
data_sheet_c78-492987.html, June 2015.
[12] Weidong Cui, Vern Paxson, Nicholas Weaver, and Randy H.
Katz. Protocol-independent adaptive replay of application dia-
log. In Proceedings of the 13th Annual Network and Distributed
System Security Symposium (NDSS), February 2006.
[13] Holly Dagres. Iran induces internet ’coma’ ahead of elections.
http://www.al-monitor.com/pulse/originals/
2013/05/iran-internet-censorship-vpn.html,
May 2013.
[14] Roger Dingledine, Nick Mathewson, and Paul Syverson. Tor:
In In Proceedings of the
The second-generation onion router.
13th USENIX Security Symposium, 2004.
[15] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and Thomas
Shrimpton. Protocol misidentiﬁcation made easy with format-
transforming encryption. In Proceedings of the 20th ACM Con-
ference on Computer and Communications Security, November
2013.
USENIX Association  
24th USENIX Security Symposium  381
[35] Matthias Vallentin, Robin Sommer, Jason Lee, Craig Leres, Vern
Paxson, and Brian Tierney. The nids cluster: Scalable, stateful
network intrusion detection on commodity hardware. In Recent
Advances in Intrusion Detection, pages 107–126. Springer, 2007.
[36] Qiyan Wang, Xun Gong, Giang Nguyen, Amir Houmansadr, and
Nikita Borisov. CensorSpoofer: Asymmetric Communication us-
ing IP Spooﬁng for Censorship-Resistant Web Browsing. In The
19th ACM Conference on Computer and Communications Secu-
rity, 2012.
[37] Michele C. Weigle, Prashanth Adurthi, Félix Hernández-
Campos, Kevin Jeffay, and F. Donelson Smith. Tmix: A tool
for generating realistic tcp application workloads in ns-2. SIG-
COMM Comput. Commun. Rev., 36(3):65–76, July 2006.
[38] Zachary Weinberg, Jeffrey Wang, Vinod Yegneswaran, Linda
Briesemeister, Steven Cheung, Frank Wang, and Dan Boneh. Ste-
gotorus: a camouﬂage proxy for the tor anonymity system.
In
ACM Conference on Computer and Communications Security,
2012.
[39] D. Wessels and k. claffy. ICP and the Squid web cache. IEEE
Journal on Selected Areas in Communications, 16(3):345–57,
Mar 1998.
[40] Brandon Wiley. Dust: A blocking-resistant internet transport
protocol. Technical report, School of Information, University of
Texas at Austin, 2011.
[41] Philipp Winter and Stefan Lindskog. How the Great Firewall of
China is Blocking Tor. In Free and Open Communications on the
Internet, 2012.
[42] Philipp Winter, Tobias Pulls, and Juergen Fuss. Scramblesuit:
a polymorphic network protocol to circumvent censorship.
In
Proceedings of the 12th ACM workshop on Workshop on privacy
in the electronic society, pages 213–224. ACM, 2013.
[43] Charles V. Wright, Christopher Connelly, Timothy Braje, Jesse C.
Rabek, Lee M. Rossey, and Robert K. Cunningham. Generat-
ing client workloads and high-ﬁdelity network trafﬁc for control-
lable, repeatable experiments in computer security.
In Somesh
Jha, Robin Sommer, and Christian Kreibich, editors, Recent Ad-
vances in Intrusion Detection, volume 6307 of Lecture Notes in
Computer Science, pages 218–237. Springer Berlin Heidelberg,
2010.
[44] Charles V. Wright, Fabian Monrose, and Gerald M. Masson.
On inferring application protocol behaviors in encrypted network
trafﬁc. Journal on Machine Learning Research, 7, December
2006.
[45] Sue-Hwey Wu, Scott A Smolka, and Eugene W Stark. Compo-
sition and behaviors of probabilistic i/o automata. Theoretical
Computer Science, 176(1):1–38, 1997.
[46] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Transport
Layer Protocol. RFC 4253 (Proposed Standard), January 2006.
[47] Wenxuan Zhou, Amir Houmansadr, Matthew Caesar, and Nikita
Borisov. Sweet: Serving the web by exploiting email tunnels.
HotPETS. Springer, 2013.
[16] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter,
P. Leach, and T. Berners-Lee. Hypertext Transfer Protocol –
HTTP/1.1. RFC 2616 (Draft Standard), June 1999.
[17] John Geddes, Max Schuchard, and Nicholas Hopper. Cover your
acks: Pitfalls of covert channel censorship circumvention. In Pro-
ceedings of the 20th ACM Conference on Computer and Commu-
nications Security, pages 361–372. ACM, 2013.
[18] Andrew Grifﬁn. Whatsapp and imessage could be banned under
new surveillance plans. The Independent, January 2015.
[19] Seung-Sun Hong and S. Felix Wu. On interactive internet trafﬁc
replay.
In Proceedings of the 8th International Conference on
Recent Advances in Intrusion Detection, RAID’05, pages 247–
264, Berlin, Heidelberg, 2006. Springer-Verlag.
[20] Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov. The
Parrot is Dead: Observing Unobservable Network Communica-
In The 34th IEEE Symposium on Security and Privacy,
tions.
2013.
[21] Amir Houmansadr, Thomas Riedl, Nikita Borisov, and Andrew
Singer. I Want my Voice to be Heard: IP over Voice-over-IP for
Unobservable Censorship Circumvention. In Proceedings of the
Network and Distributed System Security Symposium - NDSS’13.
Internet Society, February 2013.
[22] Christopher M. Inacio and Brian Trammell. Yaf: yet another
ﬂowmeter. In Proceedings of the 24th international conference
on Large installation system administration, LISA’10, 2010.
[23] Sheharbano Khattak, Mobin Javed, Philip D. Anderson, and Vern
Paxson. Towards illuminating a censorship monitor’s model to
facilitate evasion. In Presented as part of the 3rd USENIX Work-
shop on Free and Open Communications on the Internet, Berke-
ley, CA, 2013. USENIX.
[24] Shuai Li, Mike Schliep, and Nick Hopper. Facet: Streaming over
videoconferencing for censorship circumvention.
In Proceed-
ings of the 12th Workshop on Privacy in the Electronic Society
(WPES), November 2014.
[25] Jeroen Massar, Ian Mason, Linda Briesemeister, and Vinod Yeg-
neswaran. Jumpbox–a seamless browser proxy for tor pluggable
transports. Security and Privacy in Communication Networks.
Springer, page 116, 2014.
[26] Hooman Mohajeri Moghaddam, Baiyu Li, Mohammad Der-
akhshani, and Ian Goldberg. Skypemorph: protocol obfuscation
for tor bridges. In Proceedings of the 2012 ACM conference on
Computer and communications security, 2012.
[27] Katia Moskvitch. Ethiopia clamps down on skype and other in-
ternet use on tor. BBC News, June 2012.
[28] Vern Paxson. Bro: a system for detecting network intruders in
real-time. In Proceedings of the 7th conference on USENIX Secu-
rity Symposium - Volume 7, SSYM’98, 1998.
[29] Mike Perry. A critique of website trafﬁc ﬁngerprinting attacks.
https://blog.torproject.org/, November 2013.
[30] J. Postel and J. Reynolds. File Transfer Protocol. RFC 959 (Stan-
dard), October 1985. Updated by RFCs 2228, 2640, 2773, 3659.
[31] Sam Small, Joshua Mason, Fabian Monrose, Niels Provos, and
Adam Stubbleﬁeld. To catch a predator: A natural language ap-
proach for eliciting malicious payloads.
In Proceedings of the
17th Conference on Security Symposium, 2008.
[32] R. Sommer and V. Paxson. Outside the closed world: On using
machine learning for network intrusion detection. In Security and
Privacy (SP), 2010 IEEE Symposium on, 2010.
[33] Tcpreplay. http://tcpreplay.synfin.net/.
[34] Tor Project. Obfsproxy. https://www.torproject.org/
projects/obfsproxy.html.en, 2015.
382  24th USENIX Security Symposium 
USENIX Association