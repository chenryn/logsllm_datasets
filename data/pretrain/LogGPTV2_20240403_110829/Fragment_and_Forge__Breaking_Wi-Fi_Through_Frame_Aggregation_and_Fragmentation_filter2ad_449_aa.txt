title:Fragment and Forge: Breaking Wi-Fi Through Frame Aggregation and Fragmentation
author:Mathy Vanhoef
Fragment and Forge: Breaking Wi-Fi Through 
Frame Aggregation and Fragmentation
Mathy Vanhoef, New York University Abu Dhabi
https://www.usenix.org/conference/usenixsecurity21/presentation/vanhoef
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Fragment and Forge: Breaking Wi-Fi Through
Frame Aggregation and Fragmentation
Mathy Vanhoef
New York University Abu Dhabi
PI:EMAIL
Abstract
In this paper, we present three design ﬂaws in the 802.11
standard that underpins Wi-Fi. One design ﬂaw is in the frame
aggregation functionality, and another two are in the frame
fragmentation functionality. These design ﬂaws enable an
adversary to forge encrypted frames in various ways, which in
turn enables exﬁltration of sensitive data. We also discovered
common implementation ﬂaws related to aggregation and
fragmentation, which further worsen the impact of our attacks.
Our results affect all protected Wi-Fi networks, ranging from
WEP all the way to WPA3, meaning the discovered ﬂaws
have been part of Wi-Fi since its release in 1997. In our
experiments, all devices were vulnerable to one or more of our
attacks, conﬁrming that all Wi-Fi devices are likely affected.
Finally, we present a tool to test whether devices are affected
by any of the vulnerabilities, and we discuss countermeasures
to prevent our attacks.
1 Introduction
In the last few years, major improvements have been made to
the security of Wi-Fi. Most notably this includes the discov-
ery and prevention of key reinstallation in WPA2 [18, 57, 58],
and the standardization of WPA3 which, among other things,
prevents ofﬂine dictionary attacks [60]. Additionally, extra
defenses have been standardized, such as operating channel
validation and beacon protection, which further increases the
security of Wi-Fi networks [54, 55]. These recent improve-
ments are a welcome addition to Wi-Fi since it continues to be
one of the main methods used to access the Internet. Addition-
ally, Wi-Fi is used in home networks to prevent outsiders from
accessing personal printers, security cameras, smart home
devices, and so on. In enterprise networks, Wi-Fi plays an
equally important role since it authenticates users, it protects
access to internal services, and it secures content while being
transmitted to, for instance, local ﬁle servers, smart presenta-
tion screens in meeting rooms, and so on.
Despite the recent advances in Wi-Fi security, we found
design issues that went unnoticed for more than two decades.
These issues were discovered by analyzing open source Wi-Fi
stacks and systematically inspecting the 802.11 standard. Our
results affect all protected Wi-Fi networks, including old net-
works using Wired Equivalent Privacy (WEP), up to and in-
cluding the latest Wi-Fi Protected Access 3 (WPA3). Since
even WEP is affected, this implies the root cause of several
design ﬂaws has been part of Wi-Fi since its release in 1997.
Equally worrisome is that every single device we tested was
vulnerable to at least one of our attacks.
The most trivial design ﬂaw is in 802.11’s frame aggrega-
tion functionality: by ﬂipping an unauthenticated ﬂag in the
header of a frame, the encrypted payload will be parsed as
containing one or more aggregated frames instead of a nor-
mal network packet. We abuse this to inject arbitrary frames,
and then intercept a victim’s trafﬁc by making it use a mali-
cious DNS server. Practically all devices that we tested were
vulnerable to this attack.
Another two design ﬂaws are in 802.11’s frame fragmenta-
tion feature which splits large frames into smaller fragments.
First, although all fragments of a frame are always encrypted
under the same key, receivers are not required to check that
this is indeed the case. We show that an adversary can abuse
this missing check to forge frames and exﬁltrate data by mix-
ing fragments encrypted under different keys. Second, a re-
ceiver is not required to remove (incomplete) fragments from
memory when connecting to a different network. We abuse
this to inject malicious fragments into the fragment cache, i. e.,
memory, of the victim and thereby inject arbitrary packets.
Most devices were affected by at least one of these attacks.
Apart from design ﬂaws we also discovered widespread
implementation vulnerabilities related to frame aggregation
and fragmentation. These vulnerabilities can either be ex-
ploited on their own or make it signiﬁcantly easier to abuse
the discovered design issues. The most common implementa-
tion vulnerability is that receivers do not check whether all
fragments belong to the same frame, meaning an adversary
can trivially forge frames by mixing the fragments of two
different frames. Against certain implementations it is also
possible to mix encrypted and plaintext fragments, to inject
USENIX Association
30th USENIX Security Symposium    161
plaintext aggregated frames by masquerading them as hand-
shake messages, and to inject plaintext fragmented (broadcast)
frames. Several other implementation ﬂaws have also been
discovered, and we created a tool to test for all of them [1].
We believe that the discovered design ﬂaws went unnoticed
for so long for two main reasons. First, some of the func-
tionality that we abuse is generally not considered as part of
the core cryptographic functionality of Wi-Fi and therefore
has received no rigorous or formal analysis. Second, patched
drivers or ﬁrmware are needed to conﬁrm the fragmentation-
based vulnerabilities in practice. When using normal drivers,
certain ﬁelds of injected frames may be overwritten without
the programmer realizing this. This causes attacks to fail, and
as a result researchers may mistakenly conclude that devices
are secure, while in reality they are vulnerable.
Because our ﬁndings affect all Wi-Fi devices, we contacted
the Industry Consortium for Advancement of Security on
the Internet (ICASI) to help with a multi-party coordinated
disclosure. We are also collaborating with the Wi-Fi Alliance
to distribute information to vendors.
To summarize, our main contributions are:
• We present a design ﬂaw in 802.11’s frame aggregation
functionality that can be abused to inject arbitrary frames
and demonstrate resulting attacks in practice (Section 3).
• We present a design ﬂaw in 802.11’s frame fragmen-
tation feature where a receiver accepts fragments en-
crypted under different keys. We show how this can be
abused to forge frames and exﬁltrate data (Section 4).
• We present another design ﬂaw where we poison the
fragment cache of a receiver and abuse this to inject
packets and exﬁltrate data (Section 5).
• We discover widespread implementation ﬂaws and cre-
ated a tool to test for all vulnerabilities in this paper [1].
Our tool can test both clients and Access Points (APs)
and covers more than 45 test cases (Section 6).
Finally, we discuss related work, all our countermeasures, and
our results in Section 7, and we conclude in Section 8.
2 Background
This section introduces the 802.11 standard [31] and gives a
high-level description of the design ﬂaws that we discovered.
2.1 Frame layout and packet aggregation
Figure 1 shows the layout of an 802.11 frame and we start
with explaining its general-purpose ﬁelds. First, the Frame
Control (FC) ﬁeld contains several ﬂags and deﬁnes the type
of a frame, e. g., whether it is a data or management frame.
This is followed by three MAC addresses deﬁning the receiver,
sender, and the destination or source of the frame. The Quality
of Service (QoS) ﬁeld deﬁnes the priority of the frame, which
is called the Trafﬁc Identiﬁer (TID) in 802.11. The payload
FC Addr1/2/3 Frag. No.
Seq. No. QoS PN payload
Type ... More Frag. Protected
TID A-MSDU ﬂag
Figure 1: Layout of an encrypted 802.11 frame. Our aggre-
gation attack abuses the ﬁeld in blue, and our fragmentation
attacks the ﬁelds in red. Only the payload ﬁeld is encrypted.
Normal:
LLC/SNAP
IP header
TCP header
Data
A-MSDU: Destination Source Length
packet1
. . .
This subframe is repeated for every packet
Figure 2: Contents of the payload ﬁeld in a normal frame with
an example TCP/IP header (top), and the contents of a frame
with the A-MSDU ﬂag set meaning it contains one or more
aggregated packets (bottom).
ﬁeld of a normal frame contains the transported packet, which
starts with an LLC/SNAP header—sometimes also called an
rfc1042 header [44]—that deﬁnes the type of the packet, e. g.,
whether it is an IP or ARP packet (see Figure 2).
When the packet is small it is more efﬁcient to aggregate
multiple packets into one larger frame. The 802.11n amend-
ment deﬁnes two aggregation methods [33], and we focus on
Aggregate MAC Service Data Units (A-MSDUs), which all
802.11n-capable devices are required to support. The layout
of an A-MSDU frame is similar to a normal frame as shown
in Figure 1, except that the A-MSDU ﬂag in the QoS ﬁeld is
set, and that the payload ﬁeld contains one or more A-MSDU
subframes as shown in Figure 2. Each subframe starts with
the equivalent of an 802.3 header: the destination and source
MAC address of the packet, followed by the length of the
packet. Note that the packet itself starts with an LLC/SNAP
header, just like in a normal frame. Finally, each subframe
except the last is padded so that its length is a multiple of 4.
When a receiver sees that the A-MSDU ﬂag is set in the
QoS ﬁeld, it will extract all A-MSDU subframes and convert
them into Ethernet frames with the destination and source
addresses speciﬁed in the subframe. The problem is that, al-
though the QoS ﬁeld is authenticated, by default the A-MSDU
ﬂag is masked to zero, meaning this ﬂag is not actually authen-
ticated. As a result, an adversary can intercept a normal frame,
set the A-MSDU ﬂag, and the receiver will now incorrectly
interpret the payload as containing A-MSDU subframes. In
Section 3 we show how to abuse this to inject arbitrary frames.
2.2 Frame fragmentation
In noisy environments it can be more efﬁcient to split large
frames into smaller fragments, so that if a fragment gets cor-
rupted, only that fragment has to be retransmitted. The layout
of a fragment, also called a MAC Protocol Data Unit (MPDU),
162    30th USENIX Security Symposium
USENIX Association
is identical to a normal frame and illustrated in Figure 1. Be-
cause of their similarity, we use the term frame to refer to both
a normal frame and an MPDU, while the term fragment will
be used to explicitly refer to an MPDU. When a frame is split
into multiple fragments, each one is assigned an incremental
4-bit fragment number (Frag. No. in Figure 1). This means
a frame can be split into at most 24 fragments. To allow a
receiver to determine when all fragments have been received,
every fragment except the last has the more fragments ﬂag set
in its frame control ﬁeld. Finally, all fragments of a speciﬁc
frame have the same 12-bit sequence number (Seq. No. in Fig-
ure 1). Only unicast data frames are (de)fragmented, and such
frames can be recognized by the type subﬁeld in the frame
control ﬁeld and by the receiver MAC address (Addr1). In
this paper, we use the notation Fragx(s) to denote a fragment
with fragment number x and sequence number s. For instance,
Frag1(9) denotes a 2nd fragment with sequence number 9.
By default, a frame is only split into fragments when it is
larger than the conﬁgured fragmentation threshold. This frag-
mentation threshold is independent of the maximum packet
size, i. e., the Maximum Transmission Unit (MTU). When
a device supports dynamic fragmentation, which is part of
802.11ax, a transmitter can split a frame into fragments in-
dependent of the fragmentation threshold [30]. In particular,
when a client is assigned a ﬁxed-duration transmit opportu-
nity, called a resource unit in 802.11ax, it can ﬁll the last part
of this duration with a fragmented frame.
2.3 Authentication and encryption
In both protected home and enterprise Wi-Fi networks, the
client will eventually use the 4-way handshake to negotiate a
pairwise session key with the AP. This session key is used to
encrypt data frames. At any point in time, the AP can start a
new 4-way handshake to renew the session key.
When the (AES-)CCMP or GCMP data-conﬁdentiality pro-
tocol is used, frames larger than the fragmentation threshold
are ﬁrst split into fragments, and all fragments are then en-
crypted in the same way as normal frames: the payload ﬁeld is
authenticated and encrypted, and selected metadata is also au-
thenticated. This metadata encompasses, among other things,
all MAC addresses in the header, the fragment number, and
the more fragments ﬂags. The sequence number is not authen-
ticated because its value is only known immediately before
the station is able to transmit [39]. Note that encrypted frames
can be recognized by the protected ﬂag in the FC ﬁeld. Every
encrypted frame also has a strictly increasing Packet Num-
ber (PN), commonly called a nonce, which is used to prevent
replay attacks, and is implicitly authenticated by the data-con-
k{ f} to denote
ﬁdentiality protocol. We use the notation Encn
the encryption of frame f using key k and packet number n.
A receiver ﬁrst checks if the PN is increasing and otherwise
drops the fragment (or frame). Then it decrypts the fragment
and stores it until all fragments are received [31, Fig. 5-1].
On reception of the last fragment, all decrypted fragments
are reassembled into the original frame. Since the fragment
number and more fragments ﬂag are authenticated, an adver-
sary cannot change the number of fragments or their relative
position. Additionally, to prevent an adversary from forging a
frame by combining fragments of different frames, a receiver
must drop all fragments if their PNs are not consecutive.
The older, but not deprecated [48], WPA-TKIP data-conﬁ-
dentiality protocol does not authenticate the fragment number
and more fragments ﬂag, and does not check that the PNs
of the fragments are consecutive. Instead, the reassembled
frame is authenticated using the Michael algorithm. When
using the broken and deprecated WEP protocol, the fragment
number and more fragments ﬂag are not authenticated, and
the reassembled frame is not separately authenticated. This re-
sults in a novel attack against WEP where an attacker can mix
and reorder fragments of different frames (see Section 4.5).
2.4 Attack techniques and scenarios
Although exploiting each discovered design ﬂaw requires a
different threat model, which is described at the start of every
section, there are similarities between most threat models. In
particular, several attacks rely on a multi-channel machine-
in-the-middle (MitM) position, some also rely on a relaxed
BEAST threat model, and one attack targets hotspot-type
networks. We therefore introduce these concepts ﬁrst:
Multi-Channel MitM Many (known) attacks require the
ability to block, modify, or delay encrypted frames sent be-
tween the client and AP. To reliably do this, Vanhoef and
Piessens introduced the multi-channel MitM position [56]. In
this MitM technique, the adversary clones the real AP on a dif-
ferent channel, forces the client into connecting to the rogue
AP on the cloned channel, and forwards frames between the
client and the real AP. The adversary can then modify frames
before forwarding them or not forward them at all. Recently
a defense against this MitM has been ratiﬁed into the draft
802.11 standard, called operating channel validation [55], but
it is not yet used in practice. As a result, the multi-channel
MitM position can be reliably established in practice: the
only requirement is that the adversary possesses two Wi-Fi
antennas and is within radio range of the client and AP.
BEAST threat model The BEAST attack against TLS
introduced a novel threat model where the victim is tricked
into executing malicious JavaScript code [20]. This can for
example be accomplished by social engineering the victim
into visiting a website under control of the adversary, and
enables the adversary to make the victim send a large amount
of trafﬁc. Other attacks against TLS also relied on this threat
model [3, 5, 12, 20, 22, 42, 46, 47], and we call it the BEAST
threat model. In a relaxed version of this threat model, we only
require that the victim connects to a server of the adversary
without requiring the execution of malicious JavaScript code.
USENIX Association
30th USENIX Security Symposium    163
Hotspot security Hotspots used to be synonymous with
open and insecure Wi-Fi networks. However, this is no longer
the case. In modern hotspot-type networks such as eduroam,
and Hotspot 2.0 networks where users can, e. g., authenticate
using their mobile SIM card [6], each user owns unique au-