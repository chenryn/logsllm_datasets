title:On a New Class of Pulsing Denial-of-Service Attacks and the Defense
author:Xiapu Luo and
Rocky K. C. Chang
On a New Class of Pulsing Denial-of-Service Attacks and the Defense
Xiapu Luo and Rocky K. C. Chang
Department of Computing
The Hong Kong Polytechnic University
Kowloon, Hong Kong, SAR, China
{csxluo,csrchang}@comp.polyu.edu.hk
Abstract
In this paper we analyze a new class of pulsing denial-
of-service (PDoS) attacks that could seriously degrade
the throughput of TCP ﬂows. During a PDoS attack,
periodic pulses of attack packets are sent
to a vic-
tim. The magnitude of each pulse should be signiﬁcant
enough to cause packet losses. We describe two spe-
ciﬁc attack models according to the timing of the at-
tack pulses with respect to the TCP’s congestion window
movement: timeout-based and AIMD (additive-increase-
multiplicative-decrease)-based. We show through an
analysis that even a small number of attack pulses can
cause signiﬁcant throughput degradation. The second
part of this paper is a novel two-stage scheme to detect
PDoS attacks on a victim network. The ﬁrst stage is based
on a wavelet transform used to extract the desired fre-
quency components of the data trafﬁc and ACK trafﬁc.
The second stage is to detect change points in the ex-
tracted components. Through both simulation and test-
bed experiments, we verify the feasibility and effectiveness
of the detection scheme.
1
Introduction
Starting from the most well-known denial-of-service
(DoS) attacks in February 2000 against a number of very
popular web sites, such as Yahoo, Amazon, and eTrade,
DoS attacks continue to plague the Internet. The most re-
cent one is the attack against Akami’s DNS servers, which
disrupted their services for hours. Unlike other system-
speciﬁc attacks, DoS attacks are more generic in nature.
Therefore, their impact can be very signiﬁcant in scope
and damage.
Conventional DoS attacks are ﬂooding-based [8]. That
is, an attacker sends out an unusually large number of
packets to a victim via a single host or multiple infected
hosts. These attack packets either exhaust the victim’s
bandwidth, e.g. DNS reply ﬂooding, or exhaust the vic-
tim’s system resources, e.g. SYN ﬂooding. Based on
an anomalous rise in the trafﬁc rate, these ﬂooding-based
attacks can be easily detected at the victim’s side. The
response to the detection is usually to ask the upstream
provider to drop the attack packets inscribed with the
victim’s address. Since the attack packets usually con-
tain spoofed source IP addresses, various detection mech-
anisms based on other signatures have been proposed,
such as the statistical distribution of source addresses [14],
source and destination addresses [18], and the TTL values
[6].
In this paper, we consider a new generation of DoS at-
tacks, called pulsing DoS attacks (PDoS). PDoS attacks
are not entirely new, having been reported by Asta Net-
works in 2001 [9]. Based on a six-month period of ana-
lyzing the trafﬁc in the Internet2 Abilene backbone, they
have discovered the presence of pulsing zombies.
In-
stead of generating a ﬂood of attack packets, these zom-
bies sent out short bursts of attack packets to a victim.
Kuzmanovic and Knightly have recently proposed a low-
rate TCP-based attack that also involves sending pulses of
packets [13].
In this paper, we propose and analyze a class of PDoS
attacks against TCP-based applications. This class of new
attacks can be further categorized into timeout-based at-
tacks and AIMD-based attacks (AIMD stands for Addi-
tive Increase and Multiplicative Decrease), depending on
the timing of the attack pulses with respect to the TCP’s
congestion window movement. As will be explained later,
there are also variants within each category. It turns out
that the low-rate attack proposed in [13] is a speciﬁc case
of the timeout-based attacks.
The PDoS attacks are much more sophisticated and ef-
fective than the traditional ﬂooding-based attacks. First of
all, by adjusting the parameters in the attack tool, differ-
ent levels of damage can be launched. On one extreme,
the result can be the same as the ﬂooding-based attacks.
On the other, it can create a degradation-of-service at-
tack, i.e., the victim’s performance will be degraded but
not to the extent of being denied of service. Second, the
amount of attack trafﬁc required to achieve a DoS attack
is also much lower than in ﬂooding-based attacks. Conse-
quently, the PDoS attack can elude the detection methods
designed for ﬂooding-based attacks. Finally, the number
of attack sources can be very small in a PDoS attack, as
compared with a conventional distributed DoS (DDoS) at-
tack. Therefore, the packet ﬁelds in the attack packets can
be set with correct values in order to escape the detection
methods proposed in [14, 18, 6].
We believe that this work is the ﬁrst to formally address
and analyze PDoS attacks. Therefore, our contributions is
two-fold. First, we identify and formally describe a new
class of PDoS attacks against TCP-based applications. We
also model them and analyze their properties and effec-
tiveness. Second, we propose a novel two-stage scheme
to detect the attacks on the victim’s side. The methods
of detection are designed based on two key observations:
(1) the PDoS attack causes the rate of incoming trafﬁc to
ﬂuctuate more severely than would normally be the case,
and (2) the outgoing TCP ACKs will decline after an at-
tack has been launched. We have employed a wavelet
transform in the ﬁrst stage to extract relevant information,
which is then fed into a nonparametric CUSUM algorithm
for detecting abrupt changes.
The rest of the paper is organized as follows. In sec-
tion 2, we describe and analyze the new class of PDoS
attacks. In section 3, we describe a two-stage detection
scheme for the PDoS attacks. In section 4, we evaluate the
performance of the detection system based on the ns-2
simulation and a testbed. Section 5 concludes this paper.
2 Modelling and analyzing of the PDoS at-
tacks
One can view the ﬂooding-based attack as a brute-force
attack, which exploits the ﬁniteness of network and sys-
tem resources. However, the PDoS attack is more so-
phisticated in the sense that it exploits a transport proto-
col’s congestion control mechanism. There are two main
mechanisms in a typical end-to-end congestion control al-
gorithm. The ﬁrst is the generation of a congestion sig-
nal that serves to notify the sender of possible congestion.
The second is the sender’s response to the receipt of such
a congestion signal. Table 1 summarizes the mechanisms
used in TCP.
In essence, a PDoS attacker generates a sequence of
false congestion signals to a TCP sender using attack
pulses, so that the sender’s cwnd is constrained to a low
value. Therefore, the magnitudes of the attack pulses must
be signiﬁcant enough to cause packet drops in a router. We
formally model the sequence of attack pulses by using the
following:
A(TExtent(n), SExtent(n), TSpace(n), N),
where,
• N is the total number of pulses sent during an attack.
• TExtent(n), n = 0, 1, . . . , N − 1, is the duration of
the nth attack pulse.
• SExtent(n), n = 0, 1, . . . , N − 1, determines the
shape of the nth attack pulse. If SExtent(n) is a con-
stant, the attack pulse is rectangular.
• TSpace(n), n = 0, 1, . . . , N − 2, measures the time
between the end of the nth attack pulse and the be-
ginning of the (n + 1)th attack pulse. If TSpace(n) =
0,∀n, the PDoS attack is the same as a ﬂooding-
based attack.
Back to Table 1, a TCP sender’s response to the re-
cipient of three duplicate ACKs is generally known as
a additive-increase, multiplicative-decrease (AIMD) al-
gorithm. Although TCP is the prime target for such
PDoS attacks in the Internet today, it is useful to exam-
ine more general AIMD algorithms in a similar manner
as in [24]. That is, we denote an AIMD algorithm by
AIM D(a, b), a > 0, 1 > b > 0.
In this general
AIMD algorithm, a sender will decrease its cwnd from
W to b × W whenever it enters the fast recovery state,
and then it will increase its cwnd from W to W + a per
round-trip time (RTT) until receiving another congestion
signal.
Depending on the type of the false congestion signal
received, a PDoS attack can force a victim TCP sender to
frequently enter the timeout state or to frequently enter the
fast recovery state. The result is a persistently low value
of cwnd, which translates into a very low throughput for
the victim TCP connection. Accordingly we classify the
PDoS attacks into timeout-based attacks and AIMD-based
attacks, to be presented next.
2.1 Timeout-based attacks
In a timeout-based attack, the attack pulses are severe
enough to cause a victim TCP sender to frequently enter
the timeout state. Without receiving (or without a sufﬁ-
cient number of) ACKs, the sender eventually timeouts
and the retransmission timeout value (RT O) is computed
by Eq. (1) [19], as follows:
RT O = max{RT Omin, SRT T +max(G, 4×V RT T )},
(1)
where RT Omin, the lower bound on RT O, is recom-
mended to be 1 second for the purpose of avoiding spu-
rious retransmissions [2], and G is the clock granularity.
Table 1. TCP’s network congestion signals and responses
Congestion Signals
Sender’s Responses
1 Retransmission timer expired Reduce the congestion window (cwnd) to one and perform a slow start
2 Three duplicate ACKs
received
(the sender is said to enter the timeout state).
Halve the cwnd and increase the cwnd by one per round-trip time
(the sender is said to enter the fast recovery state).
SRT T is the smoothed RTT and V RT T is the RTT vari-
ation, which are updated according to Eq. (2) and Eq. (3)
upon receiving a new RTT measurement rtt, respectively.
SRT T = 7/8 × SRT T + 1/8 × rtt.
V RT T = 3/4 × V RT T + 1/4 × |SRT T − rtt|.
(2)
(3)
2.1.1 Synchronous timeout-based attacks
The ﬁrst type of timeout-based attacks is synchronous
with the RT O value. That is, if the attacker knows the
RT O value of the targeted TCP sender and is able to
cause every retransmitted packet to drop, then the victim
TCP sender’s cwnd always stays at 1, and the throughput
is equal to 0. This type of attack is shown in Fig. 1, which
shows that the attack epoches coincide with the retrans-
mission epoches.
Proposition 1 (Attack epoches for synchronous time-
out-based attacks). Let tn, n = 0, . . . , be the nth attack
epoch. The ﬁrst attack starts at t0, and for n > 0, the nth
attack epoch in a synchronous timeout attack is given by
1 ≤ n ≤ Nmax
if Nmax  0, 1 > b > 0. If an at-
tack pulse is able to cause some packet losses in a TCP
connection, but a sufﬁcient number of duplicate ACKs
can still be received by the sender, the cwnd will drop by
(1 − b)%. After that, the cwnd will increase by an MSS
every RTT. Moreover, many TCP implementations do not
send an ACK for every received packet.
Instead, they
send a delayed ACK after receiving d consecutive full-
size packets, where d is typically equal to 2 [15]. In this
case the sender’s cwnd is only increased by a
d per RTT.
The case of d = 1 corresponds to the ACK-every-packet
strategy. TCP Tahoe, TCP Reno, and TCP new Reno use
Attack epoches
cwnd
1
d per RTT. Let Wn, n = 0, 1, 2, . . . , be the cwnd
by a
value of a victim TCP connection just before the nth at-
tack epoch. Therefore, W0 is the cwnd value just be-
fore the attack. Suppose that an attack epoch always oc-
curs at the instant when the cwnd rises from Wn−1 to
f × Wn−1, n ≥ 1, 1 ≥ f > b after a multiplicative de-
crease. The attack epoches for this type of synchronous
AIMD-based attack are given in Proposition 2.
RTO
2*RTO
4*RTO
time
Figure 1. An example of the synchronous
timeout-based PDoS attack.
Attack epoches
cwnd
1
minRTO
minRTO
minRTO
minRTO
time
Figure 2. An example of a timeout-based
PDoS attack with ﬁxed periods.
a
AIM D(1, 0.5).
× W number of RTTs
Since it will take at least (1−b)×d
to restore the cwnd to W after a decrease from W to
bW , the cwnd value could drop continuously if the attack
pulses are launched frequently enough. Moreover, when
the cwnd is dropped to a certain level, there may not be
enough duplicate ACKs to trigger the fast recovery pro-
cess. Thus, the AIMD-based attack can also achieve a
similar effect as the timeout-based attack without causing
timeouts at the beginning of the attack. On the other hand,
the AIMD-based attack could also launch a degradation-
of-service attack by lowering the attack frequency. Sim-
ilar to the timeout-based attacks, there are two types of
AIMD-based attacks.
2.2.1 Synchronous AIMD-based attacks
synchronous
Proposition 2 (Attack epoches
AIMD-based attack). For the synchronous AIMD-based
attack just described, the number of attack pulses required
to reduce the cwnd to 2 (the minimum value) is given by
log(2/W0)
for
logf
Assume that the RTT value is ﬁxed. Let t0 be the ﬁrst
attack epoch. For n > 0, the nth attack epoch is then
given by
.
1 − f n
1 − f
× (f − b) × d × W0
tn = t0 +
× RT T, n ≥ 1.
(5)
Proof. Since the cwnd is decreased from W to f × W
at each attack epoch, cwnd = f n × W0 after the nth at-
tack. Hence, the attack will bring down the cwnd to 2 by
launching a sequence of log(2/W0)
According to the attack strategy, before the arrival of the
nth (n ≥ 1) attack pulse the cwnd can only be increased
× RT T
to (f − b) × Wn−1, which takes (f−b)×d×Wn−1
amount of time, according to the AIMD algorithm. There-
fore, the nth attack epoch should take place at
attack pulses.
logf
a
a
(f − b) × d × Wn−1
× RT T, n ≥ 1. (6)
tn = tn−1 +
Furthermore, by substituting Wn = f × Wn−1 into Eq.
(6),
a
tn = tn−1+
(f − b) × d × f (n−1) × W0
×RT T, n ≥ 1.
(7)
We can therefore obtain Eq. (5) by a repeated substitution
of tn−1.
a
Fig. 3 shows an example of a synchronous AIMD-based
attack. The solid line depicts the trajectory of cwnd con-
trolled by AIM D(1, 0.5). The dashed line, on the other
hand, depicts the trajectory of cwnd when the TCP sender
is experiencing a synchronous AIMD-based attack.
This type of AIMD-based attacks is referred to as syn-
chronous in the sense that the attack epoches always co-
incide with a ﬁxed set of cwnd values. For example,
consider a general AIMD algorithm AIM D(a, b),where
a > 0, 1 > b > 0, and the sender’s cwnd is increased
2.2.2 Asynchronous AIMD-based attacks
Similar to the case of synchronous timeout-based attacks,
it is difﬁcult to launch a synchronous AIMD-based attack
because of the difﬁculty in estimating the attack epoches.
cwnd
Normal
Attack
the cwnd value is given by
Wn+1 = b × Wn + a
× TAIM D
RT T
d
= bn+1 × W0 + a
× 1 − bn+1
1 − b
d
× TAIM D
RT T
.(9)
2
Attack epoches
Figure 3. An example of a synchronous
AIMD-based attack against AIM D(1, 0.5).
time
Normal
Attack
cwnd
2
Attack epoches
time
Figure 4. An example of a AIMD-based at-
tack with ﬁxed periods.
Therefore, we remove the synchronization requirement,
and consider a AIMD-based attack with a ﬁxed period of
TAIM D = TSpace + TExtent. Proposition 3 presents the
steady-state value of cwnd in the midst of such an attack.
After that, Proposition 4 gives the minimum number of at-
tack pulses for reducing the cwnd to the steady-state value.
Proposition 3 (Convergence of the cwnd). Consider a
AIMD-based attack with a ﬁxed period of TAIM D against
a TCP connection using AIM D(a, b). If the cwnd of the
victim connection will converge during the attack, then the
converged value is given by
WC =
a
(1 − b) × d
× TAIM D
RT T
.
(8)
Proof. Just before the arrival of the (n+1)th attack pulse,
If the cwnd converges, Wn+1 = Wn for some n. There-
fore, by substituting Wn+1 = Wn into Eq. (9), we obtain
the result.
Proposition 4 (Minimum number of attack pulses).
Consider a AIMD-based attack with a ﬁxed period of
TAIM D against AIM D(a, b). Let W0 = WC + δ, where
δ > 0. Moreover, if Wn − WC < , where  is a small
value, Wn is considered the same as WC. Then, the mini-
mum number of attack pulses required to reduce the cwnd
from W0 to WC is given by
Nattack <
log − logδ
logb
.
(10)
Proof. From Eq. (8) and Eq. (9), we have Wn = bn ×
W0 + (1 − bn)WC. By substituting W0 = WC + δ
into the equation and solving for n, we obtain n =
log(Wn−WC )−log δ
. Since Wn is considered to be the same
as WC if Wn − WC < , we obtain Eq. (10).
log b
In Fig. 5 we plot Eq. (10) for different values of b. The
ﬁgure shows that the ﬂow throughput of a typical TCP
(b = 1/2) can be brought to the converged value using
fewer than 10 attack pulses. With a higher value of b,
more attack pulses will be required to achieve the same
effect, because the cwnd drops with a slower rate in these
cases. With a higher value of δ, it will also take a longer
time for cwnd to converge.
2.2.3 A comparison of the two PDoS attacks
It is now useful to point out a major and important dif-
ference between the timeout-based attacks and AIMD-
based attacks. Recall from section 2.1 that the timeout-
based attack can effectively deny service to TCP ﬂows
whose RT Os are less than the RT Omin. That is, an at-
tacker can launch the attack epoches using Eq. (4) and
RT O = RT Omin in a synchronous attack and, as ex-
plained before, the attack period is deterministic in an
asynchronous attack. On the other hand, other TCP ﬂows
may survive the timeout-based attack. The simulation re-
sults presented in [13] have indeed shown that those ﬂows
with an RTT higher than 180ms are less affected under
the proposed low-rate attack. However, this is not the case
with AIMD-based attacks. In a periodic AIMD-based at-
tack, Proposition 3 indicates that all ﬂows, regardless of
their RTTs, will be adversely affected by the AIMD-based
attack by limiting their cwnd to a low value of WC.
2
)
To drive the point further, in Fig. 6 we use Eq. (8) to
show the relationship between WC and TAIMD
RT T for a TCP
ﬂow and a TCP-friendly ﬂow (AIM D(0.31, 0.875)) with
d = 2. According to [24], a ﬂow with AIM D(a, b)
is considered to be TCP-friendly if its parameters satisfy
a = 4×(1−b
. Therefore, the converged cwnd value for a
× TAIMD
TCP-friendly ﬂow is given by WC = 4×(1+b)
RT T .
3×d
The ﬁgure also shows a lower bound and an upper bound
on WC.
3
The ﬁgure shows that if TAIMD
RT T is small, the ﬂow’s cwnd
will be constrained to a very low value that will severely
limit the ﬂow’s throughput. For example, consider those
ﬂows with RTT between 200ms and 500ms. In [13], the
simulation results have shown that these ﬂows will survive
a periodic timeout-based attack. However, Fig. 6 shows
that a periodic AIMD-based attack with a period of 1s is
sufﬁcient to degrade their throughput to the extent that the
cwnd will be conﬁned within (4/3, 20/3). Note that the
TCP fast recovery algorithm usually requires three dupli-
cate ACKs. Therefore, even if the cwnd value is given by
the upper bound, it is very likely that the fast recovery pro-
cedure cannot be started and that a timeout will therefore
occur.
3 A two-stage detection scheme for PDoS
attacks
We propose in this section a novel two-stage scheme
for detecting PDoS attacks. In so doing, we assume that
both the timeout-based and AIMD-based attacks can be
launched. Since a successful PDoS attack does not require
a sustained high attack packet rate, the feasible location
for detecting such an attack is at the victim network. The
patterns of both incoming trafﬁc and outgoing trafﬁc are
then under surveillance. Moreover, since the PDoS attack
can be effectively launched even by a single source, our
detection system is based on the detection of trafﬁc pattern
anomalies.
We have discovered a total of two anomalies that were
incurred by a PDoS attack. The ﬁrst is that the incom-
ing data trafﬁc will ﬂuctuate in a more extreme manner
during an attack. The abnormal ﬂuctuation is a combined
result of two different kinds of anomalous events caused
by the attack. The ﬁrst kind is obviously the introduc-
tion of the attack pulses, and the other is a fast decline in
the trafﬁc volume of the affected TCP ﬂows. For AIMD-
based attacks, the unusually high level of trafﬁc ﬂuctua-
tions can immediately be observed at the beginning of the
attack. The ﬂuctuation may even continue after the cwnd
k
c
a
t
t
a
N
45
40
35
30
25