of IRP logs collected as part of our preliminary analysis.
Dataset of Unseen Samples. In addition to the cross-
validation experiments on 383 samples, which already show
the predictive and genralization capabilities of ShieldFS,
we obtained 305 novel, working ransomware samples and
let them run for 60 minutes on the machines protected by
ShieldFS. This dataset (Table 6) is completely disjoint from
the training dataset and was collected from VirusTotal as
of May 2016.
Interestingly, seven families (Locky, Cryp-
toLocker, TorrentLocker, DirtyDecrypt, PayCrypt, Troldesh,
ZeroLocker) are not present in the training dataset.
Detection of Unseen Samples. ShieldFS prevented mali-
cious encryption in 100% of the cases, by restoring the 97,256
compromised ﬁles, and correctly detected 298 (97.70%) of
the samples without any false positive. The top-tier, process-
centric model contributed to detecting 95.2% of the samples,
the incremental models were eﬀective mainly in the case of
ransomware performing code injections (4.3%), as expected.
In one case, the incremental process-centric models identiﬁed
the malicious process as suspicious and ShieldFS invoked the
system-centric model to take a ﬁnal decision. CryptoFinder
contributed to the detection of 69.3% of the samples.
Causes of False Negatives. Seven samples remained in-
active for most of our analysis and encrypted just few ﬁles
(less than 30). Fortunately, thanks to our conservative ﬁle-
Table 5: 10-fold Cross-Validation: Choice of K.
K
FPR
TPR IRPs
1
2
3
4
5
6
35664
0.208%
0.076%
43822
0.038% 100% 67394
100%
100%
0.019% 99.74% 80782
0.019% 99.74% 104340
0.000% 99.74% 135324
]
×
[
d
a
e
h
r
e
v
O
]
×
[
d
a
e
h
r
e
v
O
]
×
[
d
a
e
h
r
e
v
O
Sequence 1 = Open + Read
Sequence 2 = Open + Write (and backup)
File size
Sequence 3 = Open + Write (no backup)
0.6
0.4
0.2
0
4
2
0
1.5
1
0.5
0
B
K
1
B
K
2
B
K
4
B
K
8
B
K
6
1
B
K
2
3
B
K
4
6
B
K
8
2
1
B
K
6
5
2
B
K
2
1
5
B
M
1
B
M
2
B
M
4
B
M
8
B
M
6
1
B
M
2
3
B
M
4
6
B
M
8
2
1
Figure 6: Micro Benchmark: Average overhead.
shadowing strategy, ShieldFS had copied the original ﬁles,
allowing their recovery. We investigated the cause of false
negatives in the detection of cryptographic primitives and
we found no evidence showing that the remaining samples
were using AES. Therefore, we conclude that CryptoFinder’s
detection capability of AES key schedule is 100%.
5.4 System Overhead
We evaluated the performance overhead and additional stor-
age space requirements of ShieldFS.
User-Perceived Overhead. Our goal is to quantify, with
good approximation, how much would ShieldFS slow down
the typical user’s tasks, on average. To this end, we dis-
tributed to 5 users a new version of IRPLogger that collected
ﬁle-size information in addition to the usual IRP logs. Then,
we reconstructed 6 hours worth of sequences of high-level
system calls by analyzing about one month of low-level IRPs.
For example, one IRP_MJ_CREATE followed by one or more
IRP_MJ_READ corresponds to a FileRead call, and so on, by
abstraction. Then, we estimated the perceived overhead for
a user-level task as the average overhead due to all the ﬁlesys-
tem calls executed during such task, taking into account the
size of the aﬀected ﬁles. We ﬁxed 10 minutes as the duration
of a user-level task, that is, while the user is interacting
with the computer uninterruptedly. Figure 7 shows that
the average estimated overhead is 0.26×. Indeed, we barely
perceived it while using a machine protected by ShieldFS.
Table 6: Dataset of 305 unseen samples of 11 diﬀerent
ransomware families.
Ransomware
Family
Locky
TeslaCrypt
CryptoLocker
Critroni
TorrentLocker
CryptoWall
Troldesh
CryptoDefense
PayCrypt
DirtyDecrypt
ZeroLocker
Total
No. Detection
Rate
Samples
154 (50.5%)
73 (23.9%)
20 (6.6%)
17 (5.6%)
12 (3.9%)
8 (2.6%)
8 (2.6%)
6 (2.0%)
3 (1.0%)
3 (1.0%)
1 (0.3%)
305
150/154
72/73
20/20
17/17
12/12
8/8
7/8
5/6
3/3
3/3
1/1
298/305
Backup happens (T = 3h)
]
×
[
d
a
e
h
r
e
v
O
0.4
0.2
0
0
100
200
300
Time [min]
Figure 7: Average (and standard deviation) perceived
overhead introduced by ShieldFS on 5 real-users ma-
chines.
Runtime Overhead: Micro Benchmarks. We also eval-
uated the in-the-small performance impact of ShieldFS. We
considered three sequences of ﬁlesystem operations on a se-
ries of 1,800 ﬁles of 18 varying sizes (from 1 KB to 128 MB):
(1) open and read the ﬁles, (2) open and write them when
they are not backed up already, and (3) open and write them
when they are already backed up. We run each sequence 100
times on a Windows 10 machine equipped with a rotational
hard disk drive, with and without ShieldFS, rebooting the
machine after each test to avoid caching side eﬀects. Figure 6
shows the overhead of each sequence. The overhead is higher
(1.8–3.8×) when ﬁles need to be backed up, and remarkably
lower (0.3–0.9×) when ﬁles are already backed up.
Storage Space Requirements. During our experiments
we kept track of the storage space required by ShieldFS
to keep secure copies. Table 7 shows that with T = 3h, in
the worst case (i.e., all ﬁles need to be backed up within T ),
ShieldFS requires 14.73 GB of additional storage space (i.e.,
$44.2¢).
Parameter Setting. The T parameter determines how of-
ten ShieldFS creates copies of the ﬁles that require to be
shadowed. Table 8 shows the average overhead and storage
space required for T ∈ [1, 4] hour(s) measured during our
experiments. We can conclude that T does not signiﬁcantly
inﬂuence the overall performance overhead. Thus, as further
discussed in Section 6, we advise to set it as high as to match
the on-premise, long-term backup schedule.
6 DISCUSSION OF LIMITATIONS
From the results of our experiments we discuss the following
list of limitations, in decreasing order of importance.
Susceptibility to Targeted Evasion. Ticks are essentially
the “clock” of ShieldFS. At each tick, a decision is made.
Since ticks are not based on time, but on the percentage of
ﬁles accessed, an adversary may be interested in preventing
to trigger the ticks, so to avoid detection. However, the only
way to do it is to access zero or very few ﬁles, which is clearly
against the attacker’s goal. Alternatively, in order not to
cause a signiﬁcant change in the feature values after code
injection, an adversary may try to ﬁnd an existing, benign
Table 7: Measured storage space requirements on real-
users machines (T = 3h) and cost estimation considering
$3¢/GB.
User Period Storage Required Storage Overhead Max Cost
[hrs] Max [GB] Avg. [GB] Max [%] Avg [%]
1
2
4
5
7
34
87
122
47
8
14.73
0.62
9.11
2.41
1.00
0.63
0.19
0.73
0.56
0.39
4.29
0.95
8.53
5.49
3.35
0.18
0.29
0.68
1.29
1.28
[USD]
44.2¢
1.86¢
27.3¢
7.23¢
3.00¢
host process that has already accessed about as many ﬁles as
the attacker wants to encrypt. This is very unlikely because,
by design, such process can exist only if it has not already
triggered the detection (otherwise ShieldFS would have
already killed it already). That is, only if it has accessed a
large number of ﬁles without violating the other features (e.g.,
mainly read operations, low entropy ﬁles). Assuming that the
malware can ﬁnd such a benign process to inject its malicious
code, the process’ features will start to change as soon as the
malicious code will start encrypting the aforementioned ﬁles.
At some point, the malicious code cannot avoid performing
many write operations of high-entropy content.
If the malware knows precisely the thresholds of the clas-
siﬁers and value of the parameter T , it could attempt to
perform a mimicry attack [18] encrypting few ﬁles so as to
remain below the thresholds until T hours. In this way, it will
be identiﬁed as benign and the victim will loose the original
copies. However to remain unaccountable, a ransomware
cannot encrypt all the ﬁles in one round, so it would need
to repeat this procedure every T hours. Setting T to large
values will raise the bar, by forcing the attacker to wait for
long. On the other hand, setting T very low guarantees
that the recent (benign) modiﬁcations are accounted in the
secondary drive. In this way, if a restore is needed, a very
recent (up to T ) copy is available. In other words, T allows
to trade oﬀ mimicry resilience versus data freshness.
Multiprocess Malware. Ransomware injecting malicious
code into many benign processes, each of them performing