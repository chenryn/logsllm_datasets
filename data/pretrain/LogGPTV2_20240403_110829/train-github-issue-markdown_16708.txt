# Summary of the new feature/enhancement
When using the `backgroundImage` profile setting, the image is anchored to the
center of the `TermControl`. Background images that have a primary point of
interest that is _not_ the center are not aesthetically pleasing when
either... a large part of this focus is cut off via `uniformToFill`, or the
image is centered via `uniform` or `none` and there is a abrupt end to the
image before the border of the terminal control.
### Image Example
Here is a background designed for anchoring to the bottom right. If we rely on
`uniformToFill`, then we run the risk of the image's focus getting completely
cut off. If we use `none` or `uniform`, then the image will display in the
middle and abruptly end on the right while the console display has more room.
Alignment anchoring would allow us to display the background image as it is
intended.
![Preview Figure A \(Left\) and Figure B
\(Right\)](https://camo.githubusercontent.com/8319211505781ccf2fd385320b9f8d050be7ec9ee9b20d03a5f30e7877f59073/68747470733a2f2f692e696d6775722e636f6d2f6b5554504c39502e706e67)
_Figure A (Left), shows an image making use of alignment. Figure B (Right),
shows the outcome of using the same background without alignment._
# Proposed technical implementation details (optional)
Changes would require two additional profile settings shown below, (with
center being the default for both).
    "backgroundImageHorizontalAlignment": "center" | "left" | "right",
    "backgroundImageVerticalAlignment":   "center" | "top"  | "bottom",
These settings will be needed only once, in this location:
terminal/src/cascadia/TerminalControl/TermControl.cpp
Lines 273 to 276 in 02e8389
|  Media::Imaging::BitmapImage image(imageUri);  
---|---  
|  _bgImageLayer.Source(image);  
|  _bgImageLayer.HorizontalAlignment(HorizontalAlignment::Center);  
|  _bgImageLayer.VerticalAlignment(VerticalAlignment::Center);  
Here, `HorizontalAlignment::Center` and `VerticalAlignment::Center` will be
replaced with their respective parsed settings of
`backgroundImageHorizontalAlignment` and `backgroundImageVerticalAlignment`.
These two settings will need constant definitions for of their JSON/serialized
values, and `Parse`/`Serialize` methods for the enums (in `Profile.cpp`).
## Alternative Setting
One enum setting that combines the flags of `HorizontalAlignment` and
`VerticalAlignment` could be used. The setting and values would be as follows:
    "backgroundImageAlignment": "none" | "left" | "top" | "right" | "bottom"
                     | "topLeft" | "topRight" | "bottomLeft" | "bottomRight"
_A value of`none`, or missing axis alignment, implies that the default action
of centering is used. Alternatively `none` could be labeled `center` to make
this clearer._
There are pros and cons to this alternative. The pros being the setting name
is shorter, and can be fully modified from a single line in `profiles.json`.
The longer enum value names are still relatively simple and easy to remember.
The cons being we are not referring to a real existing enum anymore, but a
combination of enums. We also require more enum definitions and handling cases
than if we made each setting separate. Lastly the implied _centering_ with the
values of `none`, `left`, `top`, `right`, and `bottom` are not as user-
friendly.