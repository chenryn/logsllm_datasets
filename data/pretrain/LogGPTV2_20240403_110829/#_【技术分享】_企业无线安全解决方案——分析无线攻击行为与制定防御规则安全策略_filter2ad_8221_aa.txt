# 【技术分享】 企业无线安全解决方案——分析无线攻击行为与制定防御规则安全策略
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
****
作者：[icecolor](http://bobao.360.cn/member/contribute?uid=775238387)
稿费：600RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【技术分享】基于检测防御企业无线安全威胁的WIPS设计**](http://bobao.360.cn/learning/detail/3150.html)
**前言**
****
之前发了个WIPS设计，写的不太好，不太清楚。前些日子听说新等保将无线安全列为合规性需求。那就来一发详细的吧。我之前写的那个包含了关于WIPS的介绍：
可以把上一篇当作是一个入门。重复的我就不提了，想了解的大家可以参照上一篇。其实感觉WIPS以后的作用点会高起来，例如在军队、政府、公司、机场、酒店、城市、学校、等等人员密集的地方都可以。
**传感器**
传感器（Sensor）是WIPS很重要的一部分。它起到一个监控扫描并执行的作用。
真正看过传感器的人应该挺少的，我找了个，大家随意感受下：
其实就长这德行，跟个路由器差不多，当然，你可以做成帅点的。传感器的布局呢，要根据你传感器信号有效距离和防护区域而部署。用OepnWrt自己就可以搞一个简单的模型试试，或者是公司自己有硬件工程师物联网工程师的可以自己搞个特制的。需要注意的就是：
1一个传感器要支持802.11的主流协议如g/n/a
2要支持2.4 GHz频段和 5 GHz频段
3然后支持跳频扫描。
5最好弄的结实点，不管室内还是室外。
6你也可以弄支持多一点的功能，例如支持下其他无线协议。或者是能识别到伪基站、无人机、RF干扰什么之类的。
这篇主要讨论检测规则和识别策略，传感器怎么搞大家自己定吧。
**开源WIDS**
Snort大家应该都挺熟悉，一个轻量级的开源IDS。其实在里面它也扩展了无线模块，只不过很少人用而已，一般的企业简单点的话，都将Snort+Kismet作为无线告警系统的首选。不过这仅仅也就是起到告警作用。而且现在感觉已经过时了。毕竟IDS和IPS区别还是挺大的。
Snorby（Loganalyzer Console、BASE
Console）+Snort+Barnyard2。当然了，前端控制台那个漂亮用那个。看一张Snort运行的界面。这是国外的人搞的一个，没有搞到OpenWrt上，也没有用Kismet。估计就是个测试。不过Snorby的前端我挺喜欢，开源IDS多了，大同小异吧，没啥新鲜的。
其实也没啥，感觉Snort在无线防御方面研究也就做个入门用，这里就不写搭建过程了，有想研究的可以私下交流下，我的Q：2191995916
简单扯一下，关于Kismet，很多人都以为它是个扫描工具，其实它是一个802.11数据包捕获和协议分析的框架，最NB的是你可以用Kismet生成KML文件，然后在“Google
Earth”上读取，就可以读取GPS数据，并且还可以通过“GISKismet”进行可视化。
**  
**
**De-Authentication Flood 攻击行为分析**
Deauth是一种身份验证洪水攻击，是无线网络的拒绝服务攻击。当Client与AP建立连接时，通过广播插入伪造的取消身份验证报文，Client认为报文来自AP，然后断开连接。
该方法不仅仅可以把AP打掉造成无限重连，而且在针对于WPA-WPA2/企业Radius+WPA架构中达到抓取Hash进行离线破解攻击。还有就是配合Fake
AP进行攻击，达到更深一层的破坏。
这是在MDK3下面做的一个测试，可以看出大量的Deauth报文。
遭受Deauth攻击的无线网络。
在Wireshark的Filter中进行针对Deauth Frame进行过滤：
    “wlan.fc.type ==0 && wlan.fc.type_subtype ==0x0c”
Reason Code 是Deauth Frame中的一个原因代码。
根据802.11给的 Reaon Code一段代码表：
可知，上述原因（0X0001）是由于未知情况造成的。所以间接可以排除掉其他“正常”状态下的断开连接，缩小排查范围。
其实DOS攻击还有很多种，例如什么ASSOC Attack，Auth Attack，针对802.1x的EAPOL
下面就是个Auth Attack与EAPOL Attack的报文：
Auth Flood攻击
EAPOL Flood 攻击
**  
**
**De-Authentication 策略规则检测方法**
主流的攻击呢就一个Deauth，但是不只是这一个，真正去做无线防御的时候所有的DOS攻击方式都要进行规则检测，因为攻击者者可能都会用到，这里就举这一例。
在WiFi Deauth
DoS攻击检测的典型的方法是在网络流量监控和调用一个阈值为deauth帧数量的观察。如果观察到的数据包的数目是在此阈值以上，然后生成警报。在许多情况下，这个阈值是由人们的经验，选一个最佳流量值。这个值通常由正常帧的发送基准进行设定。超过这个级别的任何值被归类为异常。
802.11协议 是一个二层网络协议，无线协议只定义了 OSI 架构中物理层和数据链路层（MAC 子层）两层的内容， 其它层的内容和有线网络是一样的。
1层攻击不好识别，2层攻击可以通过监测帧来识别。
所以说，我们只要检测帧控件内容，对每个802.11帧、帧控件包含的Type、Subtype、 Management
Type，包括Beacon、Disassociation、Deauth
Subtypes，和这些CTS和RTS类型。将使用这些类型和子类型来过滤帧。检测需要过滤的类型与子类型为：
    “ Management Frames (wlan.fc.type eq 0)”
    “Deauthentication (wlan.fc.type_subtype eq 12)”
其实这个脚本倒是很好搞，原理不很难。最难的是对于阈值的判断，因为阈值的设定关系到了检测的精准度。Deauth攻击的误报是很烦的。阈值设定跟好多因素有关，例如你的AP部署环境、客户端、架构等等小细节有关。所以说我有个想法就是将阈值根据部署前的环境进行检测，然后设置成动态的。这是我在家里自己测试的Deauth
攻击检测算法。识别还是挺快的，但是偶尔也有点小问题，正在修正。但我的环境有限，在家里终跟企业环境不一样。企业又跟城市不一样，以后有了大环境可以实验的时候我在搞搞别的。
（我之前提供过一个老外的脚本，非常抱歉当时没测试，只是眼看了下判断过程就贴了，那个脚本有点问题，我自己正在搞一些严密点的检测规则，以后可能会发出来。）
其实IEEE的工程师解决过这个问题，就是搞了一个叫做
802,11W，加密auth握手过程，协议思路是从判Deauth是AP还是攻击者来做的，所以搞了802.11wAP过来的管理帧都是加密的攻击者不知道加密，所以发过来节点都不认。但是这个802.11W要求条件需要客户端AP都支持，并且兼容性不好，一直没啥人注意。在WIN8和8.1是强制开启的应该。不过看样子是跟着WIN8一起死掉了。
之前我脑洞大开还想了个能不能根据AP重连的时间设定阈值，后来翻看协议指南发现与信道竞争有关，这个不是一个绝对值，用户数的多少会影响重连时间。
所以说，我也试图曾经增加条件来识别Deauth，但是增加条件或许可以减少误报，但是会影响识别率。
其实针对Deauth的话，除了Flood攻击让人头疼之外，还有就是针对HASH和HandShake的攻击。因为攻击者会使用Deauth对AP和Client进行数据包窃取。这个攻击其实是防不掉的。抓到握手包的条件跟
Ap信号的好坏，和所在AP客户端的多少是有关系的。也就是说只要是条件好，Deauth攻击可以瞬间拿到握手包。也就是说你的识别策略就算是精确到百分百也会比它慢。就算是识别阻断掉了危险AP，你的Handshak还是已经被人拿了。不过，我想过一个策略就是：
“当WIPS识别到Deauth攻击时，切断AP后，立刻向控制台进行告警，控制台通知该用户立刻修改密码。将源MAC加入黑名单并记录。（虽然可能是伪造，但是也要进行取证）并且将Calient
MAC地址暂时存入黑名单，防止攻击者修改MAC地址趁设备掉线加入其内网。WIPS应该配备密码检测工具来检测员工密码的强弱。”
**Fake AP攻击行为分析**
其实伪AP是在Wlan中最直接，也是最致命，最普及的一种攻击。原理也很简单，攻击者自己建立一个“Hack
AP”然后用DOS攻击强制你与合法AP断连并连接到“Hack AP”从而窃取你的帐号密码，以及各种隐私。
针对非企业Radius架构下的攻击原理示意图：
我之前用Easy-Creds做过一次。当然了，这种脚本有好多，不一一列举了，看下攻击效果。
劫持帐号密码