①单层操作系统（单块操作）：所有的操作系统进程在内核模式下运行。(MS-DOS)
②分层操作系统 THE(Technische Hogeschool Eindhoven 多程序设计系统)：所有的操作
系统进程使用分层模式在内核模式下运行。THE 有 5 层：0 层访问 CPU；1 层管理存储器；2 层
提供进程间的通信；3 层处理 I/O 设备；4 层驻留应用程序。
分层或环形的安全模型，只分了 4 层：
 0 环：安全内核，1 环、2 环设备驱动，3 环执行应用，4 环以上不存在。
③微内核操作系统：关键操作系统进程在内核模式下运行，其余在用户模式运行。通过限
制运行在内核模式下的进程的数量，使系统更为安全，减少复杂性，增加操作系统的可移植性。
④混合微内核操作系统(hybrid microkemel architecture)：所有操作系统进程在内核模
式下运行，关键操作系统运行在微内核，其他使用客户端\服务器模式运行。操作系统服务是
服务器，应用程序进程是客户端。
2.CPU 的 2 种操作模式：
问题状态/用户模式 User Mode：执行应用程序代码，支持部分指令，处理部分资源。
管理状态/特权模式 Privileged Mode/内核模式 kernel mode：执行操作系统代码，支持
全部指令，处理全部资源。
这两模式在后面的环式模型里也讲到了。
3.信息系统的 2 处理方式：
—70—
①单一状态 Single State systems。系统一次只能处理同一个安全等级的信息。这确实
简单、安全，反正高密的、低密的都进不来。不过效率低了点。
②多态 Multistate systems。不同安全等级的信息和操作同时在运行，不过都被互相隔
离了。这个虽然系统运行效率高了，但安全方面的投入成本很很大，还不如多部署几套系统呢。
4.计算机的处理方式
有三种保护机制：保护环、进程状态、安全模式
①保护环 Protection Rings。
最内部的环 0，有最高的特权级别.，可以访问任何资源，是操作系统的内核(kernel)。
这个内核是指操作系统始终驻留在内存中的部分。环 1 是操作系统中没有常驻内存，用时才读
入的部分。环 2 是 I/O 驱动程序和系统工具，可以访问外围设备和特殊文件。环 3 是一般应用
程序什么的。环 0、1、2 被称为内核模式或特权模式，属于系统级的访问；环 3 以外被称为用
户模式，属于应用级的访问。
外围环使用内部环的服务必须要提出申请，这部称为居间访问模型 mediated-access
Model。（这个居间是对 mediated 的翻译，指位于中间的人，即起到协调作用的中介。）通过
居间访问调用高级别的资源时，系统会检查并确认访问全体的身份和授权。
②进程状态
前面讲过进程有 3 种状态：就绪、运行和等待/阻塞。其中运行状态也被称为“问题状态”
（problem state），是指计算机正在处理和解决某个问题，也指这个计算过程中是可能发生
问题或错误的。
其实，进程还有 2 种状态：
监管 Supervisory：进程要使用比运行状态更高级别的资源（更改系统配置、安装驱动程
序、更改安全设置什么的）时，就要使用监管状态。也就是环 3 模式（用户模式）或运行状态
里不具备的功能，都要到监管状态下才有。
停止 Stopped：进程被终止，释放内存等资源。
E.1 基于客户端 （例如： 小程序、本地缓存）
这里讲针对单机的攻击和漏洞。
1.Applets
在本地单机安装的客户端软件（浏览器插件），为了更好的使用 WEB 服务，提供更多的功
—71—
能。有 2 种常用的：基于 JAVA 的 Java Applet 和基于微软.NET 的 ActiveX 控件。Java applet
和 ActiveX 控件的主要区别是 Java 为代码运行建立一个沙箱，并且限制代码访问用户计算机
系统上的资源。ActiveX 使用依赖于数字签名和信任认证授权的身份验证码技术。尽管两者都
是很好而有趣的技术，但是它们都存在内在的缺陷。Java 不能保证所有代码都在沙箱中运行，
这容易引起几种类型的安全危害，这些危害都是恶意软件的示例。ActiveX 不一定提供安全性，
事实上，它总是向用户弹出讨厌的警告对话框
2.本地缓存 Local Caches
①ARP 缓存中毒
ARP 协议是将 IP 地址解析为 MAC 地址的协议。这种攻击使客户端传输的数据流发送给不
是预期的其它系统（另一个 MAC 地址），这种攻击也被用来做中间人攻击。动态 ARP 缓存：攻
击者回应 ARP 广播查询并发送伪造的回复，这样 ARP 缓存一起缓存，直到超时（通常是 10 分
钟）。静态 ARP 缓存：本地执行 ARP 命令，这需要通过木马、缓冲区溢出或社会工程攻击才能
在客户端运行。
②DNS 缓存中毒
另一个比较流行的中间人攻击方式，类似于 ARP 缓存，让主机访问别的地址。主要手段有：
主机中毒、授权 DNS 服务器攻击、缓存 DNS 服务器攻击、DNS 查找地址改变以及 DNS 查询欺骗。
主机文件 HOSTS file：将常用的或访问过的域名（域名也被称为 FQDN：fully qualified
domain name）与 IP 地址的映射存储在本地，方便下次上网用，提高速度。修改这个文件就可
以让访问重新定向。
授权 DNS 服务器攻击 Authorized DNS server：直接修改权威 DNS 服务器（根服务器）的
数据库，于是全网的域名解析都被篡改了，很严重，所以很快会被发现并纠正的。
缓存 DNS 服务器攻击 caching DNS servers：运营商或企业为了速度，缓存了从其他 DNS
服务器获得的 DNS 信息，搞它要容易多了，也不易被发现。
DNS 查找地址改变 DNS lookup address changing：这个很直接，通过修改 DHCP 服务器或
修改本地静态 IP 地址，篡改主机的 DNS 地址，让主机到另一个伪造的 DNS 服务器上去查询。
DNS 查询欺骗 DNS query spoofing：这个有点难，但也经常发生。攻击者截获主机的 DNS
查询请求，然后发回错误的结果，让主机访问错误的网站，把 DNS 服务器屏蔽了。
③Internet 临时文件中毒
上网浏览时，所有网站的内容都被缓存到本地的临时文件夹里。被植马的网站页面文件（图
片、HTML 什么的）会被缓存到本地，然后就等待被调用或激活。
E.2 基于服务器端 （例如：数据流控制）
服务器的攻击和漏洞，大部分是针对传输的数据流的。这里没啥内容。
E.3 数据库安全 （例如： 数据推理、 数据聚合、数据挖掘、数据分析、 数据仓库）
数据库安全必考，基础内容看第八域 A 章节。
1.聚合 Aggregation
聚集攻击是通过收集大量的低安全级别的或低价值的数据，将它们结合起来，创造较高安
全级别或有价值的信息。对于数据库来讲，就必须严格控制对聚合函数的访问并且充分估计可
—72—
能展示给未授权个体的潜在信息，这些对数据库安全管理员来说是特别重要的。
SQL 就供了许多可从一个或多个表中组合记录并生成有用信息的函数包括 count，mm，
mate，sum，avg 等，这一过程就是聚合。数据库管理员应该严格控制聚合函数的访问，并且
可以使用视图(view)的访问方式。防范聚合的对策有：
①基于内容的访问控制(Content-dependent access control)：根据数据本身的敏感度来
管理访问控制。
②数据库分区技术可以防止聚合和推理。每个分区都具有唯一的、不同安全级别的内容。
③视图可以防止聚合攻击。在数据库中实现多级安全性的一种途径是使用数据库视图。视
图可以整理来自多个表的数据、聚合单独的记录或限制用户访问数据库属性和/或记录的有限
子集。在数据库中，视图被存储为 SQL 语旬，而不是被存储为数据表。这样可以减少所需的数
据库空间，并且允许视图违反应用于数据表的规格化规则。因为视图非常灵活，所以许多数据
库管理员将视图作为一种安全工具使用，就是允许用户只与受限的视图交互，而非与作为视图
基础的原始数据表交互。
④结合严格访问控制、“需知”和最小特权原则来预防聚合攻击。
2.推理 Inference
推理与聚合有点像，推理攻击利用几个非敏感信息片的组合，从而获得对应该属于更高级
分类的信息。推理需要利用人的推断能力，而聚合只是简单的叠加。对于推理攻击的最好的防
范是对有特权的个人用户保持持续的警惕。此外，数据的故意混淆可以被用来防止对敏感信息
的推理。最后，你可以使用数据库分区帮助降低这些攻击。防范推理攻击的方法有：
①单元抑制(cell suppression)：隐藏特定存储单元的内容，限制用户对特定内容的访问。
②数据库分隔/分区(database partition)：把数据库逻辑分区，用视图来提供访问。
③噪声与扰动(noise and perturbation)：在数据库中插入伪造信息，误导和迷惑攻击者。
④基于上下文的访问控制(Contest-dependent access control)：根据访问的状态或者顺
序来限制对某些内容的访问，需要一定的学习功能。
⑤基于内容的访问控制(Content-dependent access control)：根据数据本身的敏感度来
管理访问控制。（信息分级）
⑥多实例（Plolyinstantiation）在同一个关系数据库表中两行或更多行（无组）具有相
同的主键，且为不同密级的用户提供不同的数据查询结果，就是多实例。主要防范推理攻击。
（这个点经常考到）
下面这些内容在第八域的数据库与数据仓库小节里详述。
3.数据挖掘 Data Mining
数据挖掘可用来揭示数据仓库中隐藏的关系、模式和趋势。很简单，不解释。讲下元数据
的概念：就是描述数据的数据，或者关于数据的数据，也就是信息的数据。
4.数据仓库 Data Warehousing
将异构的，广泛分布的，很多的，独立的数据库关联到一起就成了数据仓库。
5.大数据、数据分析
联机事务什么的，没啥好说的。
E.4 大型并行数据系统
—73—
没啥考的。
E.5 分布式系统 （例如：云计算、 网格计算、 对等计算）
1.云计算 Cloud Computing
美国国家标准和技术研究所 NIST 把云计算定义为一种模型，包括五个基本特点、三个服
务模型和四个配备模型组成。
五个基本特点：
①按需自助；②宽带网络访问；③资源池化；④快速弹性；⑤可计量的服务。
三个服务模型：
①软件即服务(SaaS)应用软件云：为用户提供直接可以使用的网络软件服务，一般基于浏
览器。它的灵活性是比较低的，有什么用什么，综合性的比较少。
②平台即服务(PaaS)/平台开发云：为用户提供一个托管平台，承载用户自己的应用。在
云基础设施上部署自己开发或采购的各种服务，必须遵守该平台的接口和环境如编程框架、数
据存储模型等。
③基础设施即服务(IaaS)/基础设施云：为用户提供的是底层的、接近于直接操作底层服
务接口，可以使用计算机资源、存储资源和网络资源等更多的基础资源。但软件全要用户自己
来开发。
四个配备模型：
①专有云；②社区云；③公共云；④混合云。
2.网格计算 Grid Computing
网格计算是并行分布处理的一种形式。类似于通信里的自组网，联网单机只要空闲就可以
加入网格群来完成个小任务。不过网络计算是全公开的，这并不安全，有的单机也可能出现问
题而影响整个计算进度。
网格计算常常被与“集群计算”混为一谈，它们的区别是：
①这两种计算都涉及用两台或多台计算机来解决问题，但网格计算是异质的，而集群计算
是同质的。
②网格计算机可以配备不同的操作系统、硬件和软件。
③网格计算机还具备多任务同时处理功能(一台计算机既是一个配有空闲CPU 资源的网格
的组成部分，同时又可执行常规台式机功能)，而集群只用于一项任务。
④集群常通过连接节点的快速总线或网络把物理位置拉近，而网格则是在地理上散布的。
E.6 密码系统
看本域的第 I 章节。
E.7 工业控制系统 （例如：SCADA）
工业控制系统(ICS)
工业控制系统（ICS）Industrial Control Systems 是一种用于控制工业生产过程和机器
的计算机管理设备。工业系统和关键基础设施通常由叫做工业控制系统(ICS)的简单计算机监
测和管理。ICS 建立在标准嵌入式系统平台上，往往使用商业现货软件。ICS 是用于控制制造、
产品处理、生产、配送等工业流程的。
—74—
ICS 类型包括：
①监测控制和数据采集/数据采集与监控系统(SCADA)系统。
②分布式控制系统/集散控制系统(DCS)。
③可编程逻辑控制器(PLC)。
④可编程逻辑器件(PLD)Programmable Logic Device，就是可编程的数字集成电路，可以
完成大量的组合逻辑运算（与、或）。
其中 SCADA 用的最多，这个很厉害的，“震网”病毒就是通过它搞坏硬件基础设施，这里
不多讲了。
F.评估和减缓基于 Web 系统的脆弱性（例如：XML,OWASP）
1.可扩展标记语言(XML)
XML 是万维网络联盟（W3C)的文本文件数据结构化标准，目的是使数据格式和数据可以在
内联网和 Web 上共享。
标记语言，如超文本标记语言(HTML)，只是用于识别文档结构(格式)的一种符号和规则系
统。XML 被称作可扩展，是因为符号是无限的，可由用户或作者定义。XML 格式可用独立于数