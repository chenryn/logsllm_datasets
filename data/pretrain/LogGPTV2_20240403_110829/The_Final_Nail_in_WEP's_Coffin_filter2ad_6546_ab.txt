of decryption is what distinguishes attacks.
We begin by presenting a further design ﬂaw in WEP—
layer 2 fragmentation. We illustrate how it may be used on
its own in order to compromise a network. Following this,
we discuss how fragmentation can interplay with other at-
tacks. We group attacks into two classes: those that fully
compromise a network without recovering the WEP key,
and those that recover the key.
2.1. Known Plain-text in Packets
Our fragmentation attack requires knowledge of a small
portion of keystream. After that, transmission of arbi-
trary data may occur. Many keystream based attacks were
thought impractical because they required plain-text knowl-
edge. Our attack will have a different fate since such knowl-
edge can be as minimal as a couple of bytes, which turn out
to be readily available.
The initial portion of 802.11 packets is virtually con-
stant. A packet commences with an LLC header followed
by SNAP as shown in Figure 2. These two headers occupy
the ﬁrst eight bytes of a packet. The only “unknown” ﬁeld is
the ethertype which occurs at the end of the SNAP header.
The ethertype will normally be either ARP or IP. ARP pack-
ets are easily distinguished by their ﬁxed size of 36 bytes
and are usually destined to a broadcast address. Some hard-
ware pads short packets to a minimum length, making ARP
packets longer. By inspecting the MAC address preﬁx of
the AP, one can determine the hardware being used [16] and
may judge whether or not short packets are being padded.
Since we can differentiate between IP and ARP based on
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
}
}
Data
abcd efgh
CRC32
1234
Original plain-text & CRC.
Fragments & CRC.
Keystream (IV x).
Encrypted frags.
x
abcd 1983
⊕
1234 5678
=
IV
}
x
2911 8305
efgh 1914⊕
1234 5678
=
1337 6667
Figure 3. Transmitting a single logical packet
in multiple 802.11 fragments.
the length of the packet, we assume that for each packet at
least the ﬁrst eight bytes of plain-text is known.1
By intercepting a packet and knowing the ﬁrst eight
bytes of plain-text, eight bytes of keystream may be cal-
culated by performing clear-text ⊕ cipher-text. By using
this keystream, it is now possible to send eight bytes of en-
crypted payload. The payload will be composed of four
bytes of data followed by its CRC32. Nothing practical can
be achieved by sending four data bytes since the LLC/SNAP
header alone requires eight bytes. Therefore, this result was
never considered to be an issue.
2.2. Fragmentation in 802.11
Little scrutiny has been done on how WEP interacts with
the rest of the 802.11 protocol. Most of the past attacks
focused solely on WEP’s weak cryptographic properties.
However, it is exactly in this interaction that WEP’s largest
ﬂaw emerged—802.11 may be used against WEP.
The 802.11 standard speciﬁes fragmentation at the MAC
layer and each fragment is encrypted independently. It is
possible to send multiple 802.11 fragments (up to a max-
imum of 16) each using the same keystream. By sending
payloads in eight byte fragments, it is possible to inject
4×16 = 64 bytes of data (each payload requires a CRC32).
Therefore, after snooping one data packet, the attacker is
able to recover at least eight bytes of keystream. By using
802.11 fragmentation, the attacker may immediately trans-
mit up to 64 bytes of arbitrary data. Figure 3 illustrates
802.11 fragmentation.
The 802.11i standard motivates the TKIP MIC by noting
that WEP was vulnerable to “Fragmentation attacks” [19].
We still wonder what exactly they referred to, and whether
they knew about this attack. All we know is that we in-
formed CERT about this issue back in 2003, although we
were never properly followed up.
1In reality much more is known. For example, ARP packets contain
plenty of known information, especially because MAC addresses are clear-
text in the 802.11 header.
2.3. Pure Fragmentation Attack
We now analyze how the fragmentation technique may
be used alone in attacking WEP networks connected to the
Internet. Broadly speaking, an attacker desires two things:
to be able to transmit and decrypt data. Fragmentation per-
mits both.
Transmission is trivial and does not require Internet con-
nectivity. The attacker needs to eavesdrop one data packet
and recover eight bytes of keystream. This is easily accom-
plished since the ﬁrst eight bytes of clear-text are known
and the cipher-text has been intercepted. After that, the at-
tacker may use 802.11 fragmentation for transmitting data
of up to 64 bytes. IP fragmentation may be used on top for
sending larger packets.
Trafﬁc may also be decrypted in real-time using 802.11
fragmentation, provided that the 802.11 network is con-
nected to the Internet. To do this, an attacker can use the
AP to decrypt. Suppose that the attacker has eavesdropped
an encrypted packet x and wishes to decrypt it. Clearly the
AP knows the encryption key, and if the attacker replayed
the packet, the AP would decrypt it. By itself, this would
not be useful, as the replayed packet would simply be for-
warded to its original destination. However, the attacker can
use fragmentation to simply prepend an additional IP header
to the front of the eavesdropped packet. With 802.11, only
the data portion is encrypted, and there is no sanity check in
order to ensure that what was originally a complete payload
cannot be replayed as a fragment. Upon reception, the AP
will decrypt both the new header and the original packet x,
and reassemble them into a single packet. If the new header
contains an Internet address, the AP will send the packet
there in clear-text (WEP protects only the wireless link). If
the attacker controls the Internet host the packet was sent to,
he can recover the clear-text of x.
This may be accomplished by constructing an IP header
in four byte fragments using the recovered eight bytes of a
keystream, followed by a further larger fragment containing
the entire unmodiﬁed encrypted payload x. The AP will
decrypt, de-fragment, and send off the data to the Internet
in the clear. Figure 4 illustrates this process, although for
clarity, only one fragment is drawn for the IP header.
In
the following sections, we will address some of the details
regarding the decryption strategy of this attack.
2.3.1. Forwarding to the Internet
To transmit to an Internet host, two pieces of information
are required: the router’s MAC address and a source IP ad-
dress. Obtaining the router’s MAC address is not difﬁcult,
especially since the 802.11 header which contains MAC ad-
dresses is always in clear-text. Often, the AP itself will act
as a router and its MAC address may be obtained from the
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
}
}
IV
x
Data
5138 3770
y
IP Header
x
5138 3770
Encrypted
payload.
IP header &
payload frags.
IP Header
seib ello
De-crypt, reassemble
& send to Internet.
Figure 4. Decryption by using the AP to re-
send data in clear-text to the Internet.
802.11 header in its Beacon frames. Another possibility is
determining which MAC address seems the most popular
and infer it being an Internet gateway.
Depending on the network conﬁguration, a correct
source IP address may not be needed for transmission.
Some public IP networks allow IP spooﬁng, and many
NATs translate all packets they route, regardless of their
source address.
In Section 2.4.2, we present other tech-
niques for obtaining the router’s MAC address and a source
IP address.
2.3.2. Redirecting MTU Packets
Decrypting data by prepending an IP header will not work
for packets which will exceed the Maximum Transmission
Unit (MTU) size. Only packets no longer than 28 bytes less
than the MTU may be re-sent, since at least 20 bytes are
required for prepending the IP header, and the decrypted
payload will include the LLC/SNAP header.
In practice,
this is not a limitation. Firstly, attackers will want to decrypt
authentication data, which is normally transmitted in short
packets (e.g. POP3 credentials). Secondly, many APs act as
routers and will IP fragment the larger than MTU payload
when forwarding it. For completeness though, we discuss
techniques which may be used to re-direct even MTU-sized
packets.
Bit-ﬂip destination address. The ﬁrst technique is to bit-
ﬂip the destination IP address in the original payload
directly. The problem is knowing the original desti-
nation and IP checksum. For TCP ﬂows, the attacker
could intercept the SYN (≈ 40 bytes) and redirect it to
the Internet using our technique. If the attacker has an
out-of-band reverse channel, such as GPRS, then the
original IP addresses are now known. The techniques
presented by Borisov et al. may then be used to bit-ﬂip
the destination address of future packets [8].
It is also possible to receive this information back
using covert signaling from the attacker’s Internet
“buddy” host. Although the attacker does not know the
contents of the now-encrypted incoming messages, he
may see their length which can be used to encode data.
To do this, the attacker must choose a valid source
address—in Section 2.4.2 we will show how this too
can be achieved.
Chop-Chop. There is a mechanism by which packets may
be truncated while still keeping them valid [22]. This
proceeds a byte at a time by dropping a byte, guessing
its clear-text, and calculating the change to the payload
which yields a valid message. The payload change is
dependent only on the byte being chopped. For each
≤ 256 packets sent, the payload can be truncated by
one byte. By chopping 28 bytes from the tail of the
message, it is now possible to prepend an IP header
and a new LLC/SNAP header.
ICMP “packet too big”. With Path MTU Discovery [26],
TCP packets are sent with the Don’t Fragment bit set.
If a router with a low MTU needs to fragment such a
packet, it drops it and sends back an ICMP “packet too
big” message. The TCP sender will reduce its Maxi-
mum Segment Size to the new path-MTU as indicated
in the ICMP message and send future data in smaller
chunks.
The ICMP message contains 64 bits of the TCP header
of the packet that was too large. In theory, the sender
might check some of these bits. However, in our ex-
periments with Linux 2.6, FreeBSD 5.4, Windows XP
SP1 and MacOS X Tiger, none of the implementations
did any real sanity checking on this information, so
long as the encapsulated destination IP address was
correct. We can decrypt the IP header directly by re-
laying the small TCP SYN packet. None of the re-
maining TCP information in the ICMP message needs
to be valid.
It is therefore trivial to spoof such an ICMP message
and lower the MTU for a particular destination. Since
the victim will now transmit arbitrarily smaller packets
for that destination, an IP header may be prepended to
them allowing them to be decrypted.
2.3.3. Summary of Fragmentation-only Attack
In short, after eavesdropping a single packet, it is possible
to send arbitrary data immediately. In the case that the net-
work is connected to the Internet, and the attacker knows the
router’s MAC address and the network’s IP preﬁx, it is pos-
sible for the attacker to capture data and re-send it to the In-
ternet, where it will arrive in clear-text. Therefore, frequent
WEP re-keying, even on a per-minute basis, is not sufﬁcient
to prevent this attack completely since it may be performed
in real-time. We summarize the attack as follows:
Requirements. For decryption, the network must be con-
nected to the Internet. The router’s MAC address and
a source IP address are needed. Techniques for obtain-
ing these parameters are discussed in Section 2.4.2.
Recover Keystream. Eavesdrop a packet. If the packet’s
length is 36 bytes,2 its type is ARP, otherwise it is
IP. Recover eight bytes of keystream by performing
a XOR of the ﬁrst eight bytes of cipher-text and the
known plain-text for ARP or IP (depending on the
packet’s length).
Transmit. Transmit data by sending multiple eight-byte
802.11 fragments, using the keystream recovered. If
a large IP packet needs to be sent, IP fragmentation
may be used in conjunction.
Decrypt. Eavesdrop a packet to decrypt.
Send an IP
header, destined to a controlled Internet host, in multi-
ple 802.11 fragments using a known keystream. Send
the eavesdropped packet as the last fragment. The In-
ternet host will receive the payload as clear-text.
2.4. Keystream Based Attacks
The limitation of the pure fragmentation attack is that
it requires co-operation of an Internet host for decrypting
data. It is not applicable to private networks. In the fol-
lowing sections, we illustrate how fragmentation may aid
keystream based attacks. These allow compromising net-
works, even without Internet connectivity.
The basic idea is to discover either all possible
keystreams (dictionary attack) or speciﬁc ones. If a packet
is eavesdropped and the attacker knows its corresponding
keystream, he may XOR the two and obtain the plain-text.
2.4.1. Discovering Keystreams
The practical problem with past keystream based attacks is
that there was no immediate method for recovering a single
full (1500 byte) keystream. Furthermore, since a network
uses at most 224 keystreams, attacks which built a dictio-
nary of all these keystreams were considered impractical
since one would need to know 16M cipher-text and plain-
text pairs. With fragmentation, recovering a single full
keystream takes seconds. One could then use this knowl-
edge to recover other keystreams.
Consider sending a large broadcast frame in small frag-
ments. The AP will reassemble it and relay it as a single
large frame, since it has no need to fragment it. If the at-
tacker originated such a frame, the clear-text is obviously
known to him. By eavesdropping the frame relayed by the
AP, the attacker can recover the keystream for the new IV
chosen by the AP. This process is illustrated in Figure 5.
2See Section 2.1 regarding hardware which pads short packets.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Encrypted frags.
IV
}
x
CRC
Data
}
}
8305
2911
x
1337 6667
Dst. MAC addr. in
802.11 header.
Keystream used to
encrypt payload.
}
}
Send to AP
01:00:5E:00:00:00
12345678 00
{
Known
Guess
De-crypt & reassemble.
Calculate entire CRC.
Keystream for IV y.
abcd efgh⊕ 1234
3141 5926 5358
=
Relayed payload.
y