# Enhanced Certificate Transparency and End-to-End Encrypted Mail

**Author: Mark D. Ryan**  
**Affiliation: University of Birmingham, UK; CloudTomo Ltd.**

## Abstract
The certificate authority (CA) model for authenticating public keys of websites has faced numerous attacks in recent years, leading to several proposals aimed at reinforcing it. This paper develops and extends the concept of certificate transparency to efficiently handle certificate revocation. We demonstrate how this extension can be used to build a secure end-to-end email or messaging system using Public Key Infrastructure (PKI) without requiring users to trust CAs or rely on complex peer-to-peer key-signing arrangements like PGP. This makes end-to-end encrypted mail possible with minimal additional usability issues compared to unencrypted mail, as users do not need to understand or manage keys or certificates. Our approach is underpinned by a new attacker model, which we term "malicious-but-cautious," appropriate for cloud computing environments.

## 1. Introduction

### 1.1 Background and Motivation
Public-key cryptography relies on entities being able to obtain authentic copies of other entities' public keys. For example, when a user logs into their bank account via a web browser, the session is secured using the bank's public key. If the browser accepts an incorrect public key, an attacker can intercept and manipulate the traffic, including login credentials.

To prevent such attacks, CAs are used to assure entities about the public key of another. In the given example, the browser receives a public key certificate for the bank, which is digitally signed by a CA. The browser is pre-configured to accept certificates from known CAs. However, the CA model faces two significant problems:

1. **Trustworthiness of CAs**: CAs must be assumed to be trustworthy. If a CA is compromised or dishonest, it can issue certificates for fake keys, leading to security breaches. For instance, in 2011, Comodo and DigiNotar were compromised, resulting in the issuance of illegitimate certificates for high-profile sites.

2. **Key Revocation**: If a certificate owner loses control of their private key, they need to revoke the certificate before its expiration date. Current methods, such as on-the-fly revocation checking, are inefficient and can be defeated by attackers. Additionally, these methods have privacy implications for web users.

Several solutions have been proposed to address these issues, including certificate pinning, crowd-sourcing techniques, and certificate transparency. Certificate transparency aims to make the activities of CAs visible to users and observers by maintaining a public, append-only log of all issued certificates. A certificate is accepted only if it is accompanied by a proof that it has been inserted into the log.

### 1.2 Extending Certificate Transparency
Certificate transparency solves the problem of requiring CAs to be trusted by using public logs and optionally gossip protocols to ensure that CAs leave persistent evidence of all issued certificates. However, it does not handle revocation efficiently. An informal proposal for handling revocation exists but significantly reduces the efficiency of certificate transparency.

We extend certificate transparency to handle revocation efficiently. In our extension, proofs that a key is current (i.e., issued and not revoked) are as efficient as proofs of issuance in certificate transparency. Proofs of absence (i.e., proofs that a CA has not issued any certificates for a subject) are also efficient. This makes all the proofs that browsers request efficient in our extension.

### 1.3 End-to-End Encrypted Mail
We apply our extended certificate transparency to address the problem of end-to-end encrypted email. By using our extension, an untrusted provider can act both as a CA and as a provider of the email service. This allows users to send encrypted mail without understanding anything about keys or certificates and without relying on any trusted parties.

### 1.4 Our Contribution
We develop and extend the idea of certificate transparency and apply it to email encryption. Specifically:

- We rework certificate transparency to handle revocation efficiently, with space/time complexity logarithmic in the number of revocations.
- We show how it can be used to build a secure email or messaging service using PKI with no trusted parties.
- We introduce a new attacker model, "malicious-but-cautious," appropriate for cloud computing.

## 2. Background

### 2.1 Merkle Trees
A Merkle tree is a tree in which every node is labeled with the hash of the labels of its children nodes and possibly some other values. Merkle trees allow efficient proofs that they contain certain data. To prove that a certain data item is part of a Merkle tree requires an amount of data proportional to the log of the number of nodes in the tree.

### 2.2 Certificate Transparency
Certificate transparency is a technique invented by Google to prevent TLS certificate authorities from issuing public key certificates for a domain without being visible to the domain owner. It maintains a public, append-only log of all issued certificates. Auditors can obtain proofs that the log contains a given certificate and that a snapshot of the log is an extension of another snapshot.

### 2.2.1 Revocation Transparency
Revocation transparency is an extension of certificate transparency that aims to deal with revocation. One method stores revocations in a sparse Merkle tree, where most leaves are zero. Unfortunately, this method is inefficient for checking whether a certificate has been revoked, as it requires tracking revocations linearly in the number of revocations.

## 3. Extension to Certificate Transparency

### 3.1 Certificate Issuance and Revocation Transparency (CIRT)
We extend certificate transparency to handle revocation efficiently. Our extension, called Certificate Issuance and Revocation Transparency (CIRT), ensures that proofs of current and absent certificates are efficient. This makes all the proofs that browsers request efficient in our extension.

## 4. Application to Email

### 4.1 Secure Email Service
We apply CIRT to build a secure email or messaging service using PKI with no trusted parties. Users can send encrypted mail without understanding anything about keys or certificates and without relying on any trusted parties. This makes end-to-end encrypted mail possible with minimal additional usability issues compared to unencrypted mail.

## 5. Attacker Model

### 5.1 Malicious-But-Cautious Attacker
We introduce a new attacker model, "malicious-but-cautious," appropriate for cloud computing. This model assumes that attackers are cautious and will not perform actions that could easily be detected and traced back to them.

## 6. Conclusion
In conclusion, we have developed and extended the concept of certificate transparency to efficiently handle certificate revocation. We have shown how this extension can be used to build a secure end-to-end email or messaging system using PKI without requiring users to trust CAs or rely on complex key-signing arrangements. Our approach is underpinned by a new attacker model, "malicious-but-cautious," which is appropriate for cloud computing environments.