title:Practical Aggregate Signature from General Elliptic Curves, and Applications
to Blockchain
author:Yunlei Zhao
Practical Aggregate Signature from General Elliptic Curves,
and Applications to Blockchain
Yunlei Zhao
School of Computer Science, Fudan University
Shanghai, China
PI:EMAIL
ABSTRACT
Aggregate signature (AS) allows non-interactively condensing mul-
tiple individual signatures into a compact one. Besides faster veri-
fication, it is useful to reduce storage and bandwidth, and is espe-
cially attractive for blockchain and cryptocurrency. In this work,
we first demonstrate the subtlety of achieving AS from general
groups, by a concrete attack that actually works against the natural
implementations of AS based on almost all the variants of DSA
and Schnorr’s. Then, we show that aggregate signature can be de-
rived from the Γ-signature scheme proposed by Yao, et al. To the
best of our knowledge, this is the first aggregate signature scheme
from general elliptic curves without bilinear maps (in particular,
the secp256k1 curve used by Bitcoin). The security of aggregate
Γ-signature is proved based on a new assumption proposed and jus-
tified in this work, referred to as non-malleable discrete-logarithm
(NMDL), which might be of independent interest. When applying
the resultant aggregate Γ-signature to Bitcoin, the storage volume
of signatures reduces about 49.8%, and the signature verification
time can even reduce about 72%. Finally, we specify in detail the
application of the proposed AS scheme to Bitcoin, with the goal
of maximizing performance and compatibility. We adopt a Merkle-
Patricia tree based implementation, and the resulting system is also
more friendly to segregated witness and provides better protection
against transaction malleability attacks.
CCS CONCEPTS
• Security and privacy → Digital signatures.
KEYWORDS
aggregate signature, blockchain, elliptic curves
ACM Reference Format:
Yunlei Zhao. 2019. Practical Aggregate Signature from General Elliptic
Curves, and Applications to Blockchain. In ACM Asia Conference on Com-
puter and Communications Security (AsiaCCS ’19), July 9–12, 2019, Auckland,
New Zealand. ACM, New York, NY, USA, 10 pages. https://doi.org/10.1145/
3321705.3329826
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329826
1 INTRODUCTION
Bitcoin [51], with the introduction of the blockchain technology,
was originally proposed by Nakamoto Satoshi in 2008. The key
characteristics of blockchain consist in decentralization, openness,
unforgeability, and anonymity. After about ten years of rapid de-
velopment, blockchain has been more and more popular, and more
applications are advocated into finance, healthcare, storage, edu-
cation industries, etc. Nevertheless, there are still quite a lot of
deficiencies to overcome. Taking Bitcoin as an example, below we
review some deficiencies or bottlenecks it faces now.
Currently, due to the 1M-byte limitation of block size, about 7
transactions are conducted per second in the Bitcoin system. This
leads to, in particular, longer confirmation latency, relatively higher
transaction fees, and easier target of spam attacks [53].
As the crucial elements of a global consensus system, kept in
check by the ability for every participant to validate all updates to
the ledger, the size of signatures and the computational cost for ver-
ifying them are the primary limiting factors for its scalability [48].
Bitcoin uses the EC-DSA signature scheme [38] over the secp256k1
curve [23]. According to Bitcoin Stack Exchange, in a standard “pay
to public key hash" (P2PKH) transaction or a “pay to script hash"
(P2SH) transaction, the signatures occupy about 40% of transcript
size.1 In addition, an EC-DSA signature involves non-linear combi-
nation of ephemeral secret-key and static secret-key, which is the
source for relative inefficiency and for the cumbersome in exten-
sions to multi-signatures [9, 48], scriptless scripts [67], etc. As a
consequence, recently there is also renewed interests in deploying
Schnorr’s signature with Bitcoin in the future.
Aggregate signature (AS) [18] can essentially mitigate the above
deficiencies or bottlenecks faced by Bitcoin (and actually almost
all blockchain-based systems). An AS scheme is a digital signature
scheme with the following additional property: multiple individual
signatures {σ1,· · · , σn}, where σi is a signature on message mi
under public-key pki, 1 ≤ i ≤ n and n ≥ 2, can be non-interactively
collected and condensed into a compact aggregate signature σ.
Here, in general, for any i, j such that 1 ≤ i (cid:44) j ≤ n, it is assumed
that (pki , mi) (cid:44) (pkj , mj). There is a corresponding aggregate veri-
fication process that takes input {(pk1, m1),· · · ,(pkn, mn), σ}, and
accepts if and only if all the individual signatures are valid. Aggre-
gate signature is useful to reduce bandwidth and storage volume,
and is especially attractive for blockchain where communication
and storage are more expensive than computation.
1In more detail, for a standard P2PKH or P2SH transaction with n inputs and m
outputs, its size is about 146n + 33m + 10 bytes where the signatures occupy 72n
bytes. For P2SH multi-signature transactions, the size of signatures may further scale
up.
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand529The differences between aggregate signature and multi-signature
should be noted. With a multi-signature scheme [4, 9, 14, 17, 35, 36,
40, 41, 43, 48, 49, 52, 58], multiple signers sign the same message,
and more importantly they need interactive cooperation. Practical
multi-signature schemes were built from general groups on which
the discrete logarithm problem is hard [9, 48], in the plain public-
key model where no trusted setup or proof-of-possession of secret
key is needed. However, the known efficient aggregate signature
schemes in the plain public-key model were all built from gap
groups with bilinear maps [8, 18]. Aggregate signatures can also
be built assuming: signer cooperation and interaction [41, 42], or
trusted setup [49], or proof-of-possession of secret key [58], or
synchronous communications [35]. But these assumptions are, in
general, less realistic for decentralized blockchain systems like the
Bitcoin.
1.1 Contributions
In this work, we investigate the applicability of the Γ-signature
scheme proposed by Yao and Zhao [70]. Akin to Schnorr’s, Γ-
signature is generated with linear combination of ephemeral secret-
key and static secret-key, and enjoys almost all the advantages
of Schnorr’s signature. Besides, Γ-signature has advantageous fea-
tures in online/offline performance, stronger provable security, and
deployment flexibility with interactive protocols like IKE. In this
work, we identify one more key advantage of Γ-signature in signa-
ture aggregation, which is particularly crucial for applications to
blockchain and cryptocurrency.
We first demonstrate the subtlety of achieving aggregate signa-
tures from general elliptic curves (EC). This is illustrated with a
concrete attack against a natural implementation of aggregating
Schnorr’s signatures. The attack is a type of ephemeral rogue-key
attack, and actually works against the natural implementations of
AS from almost all the variants of DSA and Schnorr’s. It serves as a
good warm-up for achieving aggregate signature from general EC
groups without bilinear maps.
Then, we show that aggregate signature can be derived from
the Γ-signature scheme. To the best of our knowledge, this is the
first aggregate signature scheme from general groups without bi-
linear maps in the plain public-key model. The security of aggre-
gate Γ-signature is proved based on a new assumption proposed
and justified in this work, referred to as non-malleable discrete-
logarithm (NMDL), which might be of independent interest. We
provide the implementation of aggregate Γ-signature, with source
code (anonymously) available from github 2. When applying the
resultant aggregate Γ-signature to Bitcoin, the storage volume of
signatures reduces about 49.8%, and the signature verification time
can even reduce about 72%.
Finally, we specify in detail the implementation of aggregate
Γ-signature for Bitcoin. The goal is to maximize performance and
compatibility with the existing Bitcoin system. Towards this goal,
we adopt a Merkle-Patricia tree (MPT) aided implementation of our
aggregate signature scheme. The implementation only brings mini-
mal modifications, which are, in turn, more friendly to segregated
witness (SegWit), and provide better protection against transaction
malleability attacks [20].
2https://github.com/AggregateGammaSignature/source
2 PRELIMINARIES
For prime number q, denote by Zq the additive group of integers
modulo q, by Z∗
q the multiplicative group of integers modulo q.
If S is a finite set then |S| is its cardinality, and x ← S is the
operation of picking an element uniformly at random from S. If α is
neither an algorithm nor a set then x ← α is a simple assignment
statement. A string or value α means a binary one, and |α| is its
binary length. If α and β are two strings, α||β is their concatenation.
If A is a probabilistic algorithm, A(x1, x2,· · · ; ρ) is the result of
running A on inputs x1, x2,· · · and random coins (i.e., random bits)
ρ. Let y ← A(x1, x2,· · · ; ρ) denote the experiment of picking ρ
at random and letting y be A(x1, x2,· · · ; ρ). By Pr[E : R1;· · · ; Rn]
we denote the probability of event E, after the ordered execution
of random processes R1,· · · , Rn. A function ε(l) is negligible if for
every c > 0 there exists an lc such that ε(l)  lc. Let
PPT stand for probabilistic polynomial-time.
A digital signature scheme consists of three algorithms KeyGen,
Siдn and V eri f y, where the key generation algorithm KeyGen
takes a security parameter l as input and randomly outputs a key
pair (sk, pk). The signature algorithm Siдn takes sk, m as input
and outputs a signature σ. The signature verification algorithm
V eri f y takes pk, m, σ as input and outputs ACCEPT or RE J ECT .
Usually, the algorithms KeyGen and Siдn are probabilistic, while
the algorithm V eri f y is deterministic. The completeness of a signa-
ture scheme requires that V eri f y(pk, m, Siдn(sk, m)) = ACCEPT
always holds for any m ∈ {0, 1}∗, as long as (sk, pk) is a valid key
pair generated by running KeyGen.
Bitcoin uses the secp256k1 curve [23]: y
2.1 Elliptic Curve for Bitcoin
We consider signature implementations over elliptic curve groups.
Let E(F) be the underlying elliptic curve group defined over finite
field F, and the point P generates a cyclic group of prime order q on
which the discrete logarithm problem is assumed to be hard, where
|q| = l is the security parameter. The order of E(F) is tq, where t is
called the cofactor that is usually a small constant. Denote by ∞
the identity element in E(F).
3 + 7 defined over
Fp for prime number p = 2256−232−29−28−27−26−24−1. For the
secp256k1 curve, both p and q have the same length of 256 bits, i.e.,
l = log q = 256, and the cofactor t = 1. For a point on the secp256k1
curve, it can be represented with 257 bits as (x, b), where x ∈ Zp is
its x-coordinate and b ∈ {0, 1} indicates the sign of its y-coordinate.
Thanks to the fact that p = 2256 − 232 − 29 − 28 − 27 − 26 − 24 − 1 = 7
mod 8, recovering y from (x, b) is very efficient for the secp256k1
curve [34, 44]. We remark that compact representation of public
key has already been being employed in the Bitcoin system.
2 = x
2.2 Schnorr Signature
The Schnorr signature scheme is proposed in [61], and is proven
secure in the random oracle model based on the discrete loga-
rithm assumption [55]. At a high level, Schnorr’s signature is an
instantiation of the Fiat-Shamir transformation [28] being applied
to Σ-protocols (i.e., three-round public-coin honest-verifier zero-
knowledge protocols) in the random oracle model. Let H : {0, 1}∗ →
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand530Zq be a cryptographic hash function, and m ∈ {0, 1}∗ be the mes-
sage to be signed, Schnorr’s signature scheme is briefly reviewed
in Table 1.
KeyGen(1l)
x ← Z∗
q
X := xP
return(x, X)
Verify(X , m, σ = (e, z))
R := zP − eX
if H(R, m) (cid:44) e then
return RE J ECT
else
return ACCEPT
Sign(X , x, m)
r ← Zq
R := rP
e := H(R, m)
z := r + ex mod q
return σ = (e, z)
Table 1: Schnorr’s signature
2.3 Γ-Signature
Under the motivation for achieving signature schemes of better
online/offline performance, flexible and easy deployments (particu-
larly with interactive protocols like IKE), and stronger security, Yao
and Zhao introduced a new paradigm in [70]. Specifically, they pro-
posed a special case of Σ-protocol, which is referred to as Γ-protocol,
and a transformation called Γ-transformation that transforms any