### Table 4: CPU User Times on a Subset of the Trace (Seconds; Averaged Over 3 Runs Each; Standard Deviation < 13s)

In summary, for this configuration, we can achieve nearly the full potential of the PIA architecture (examining all packets, reassembling, and matching the first 4KB) with a performance cost of approximately 13.8% compared to Stock-Bro. While this overhead is noticeable, we argue that the enhanced detection capabilities justify the additional resource expenditure. The most significant performance impact stems from applying signature matching to a large number of packets, which could potentially be mitigated by leveraging specialized hardware to speed up the process. Additionally, because our approach involves dynamic protocol analysis on a per-connection basis, it is well-suited for front-end load-balancing.

### 6.2 Detection Performance

To evaluate the effectiveness of the PIA architecture's multi-step analysis process, we ran PIA-Bro with all adapted analyzers (HTTP, FTP, IRC, SMTP) on a 24-hour mwn-full-packets trace, relying solely on bidirectional PIA-signatures for protocol detection, without using port-based identification. (Note that these signatures differ from the L7-signatures used in §3, making the results not directly comparable.) PIA-Bro verifies the detection as discussed in §4.3, i.e., when the connection has either run for 30 seconds or transferred 4KB of data (or terminated).

Our goal is to understand the quality of detection in terms of false positives and false negatives. We aim to minimize false positives, as our experience in §5 indicates that network operators strongly prefer actionable information when reporting suspected bot hosts or surreptitious servers.

Table 5 breaks down PIA-Bro’s detections as follows:

- **First Column:** Shows the number of times a protocol detection signature flagged the given protocol as running on a non-standard port, and the corresponding analyzer verified the detection. These detections are likely to provide actionable information.
- **Second Column:** Lists the number of times the analyzer did not agree with the detection and rejected the connection as exhibiting the given protocol on a non-standard port. This column highlights the role of the analyzer in reducing false positives.
- **Third Column:** Lists the number of times the analyzer rejected the connection as exhibiting the given protocol on a standard port. This raises questions about the extent to which our protocol detection might miss instances of given protocols.

| Protocol | Detected and Verified (Non-Std. Port) | Rejected by Analyzer (Non-Std. Port) | Rejected by Analyzer (Std. Port) |
|----------|---------------------------------------|--------------------------------------|----------------------------------|
| HTTP     | 1,283,132                             | 21,153                               | 146,202                          |
| FTP      | 14,488                                | 180                                  | 1,792                            |
| IRC      | 1,421                                 | 91                                   | 3                                |
| SMTP     | 69                                    | 0                                    | 1,368                            |

While we detect a large number of verified connections on non-standard ports—primarily due to various P2P applications—for this trace, the only instance we found of a different protocol running on a privileged standard port was a benign IRC connection on 80/tcp. On unprivileged ports used for IRC, we found a private Apache HTTP server, several video-on-demand servers, and three FTP servers used for (likely illicit) music-sharing. (Note that, unlike in §3.2, when looking for protocols running on standard ports, we can only detect instances of FTP, HTTP, IRC, and SMTP; protocols running on top of HTTP on port 80 are not reported.)

Finally, Figure 5 illustrates the diversity of non-standard ports used by different types of servers. The x-axis shows the port number, and the y-axis shows the number of connections whose servers resided on that port (log-scaled). The 22,647 HTTP servers we detected used 4,024 different non-standard ports, with some involving more than 100,000 connections. We checked the top ten HTTP ports (accounting for 88% of the connections) and found that most are due to PlanetLab hosts (ports 312X, 212X), but a significant number are also due to P2P applications, with Gnutella (port 6346) contributing the largest number of distinct servers. Similar observations, but in smaller numbers, hold for IRC, FTP, and SMTP, for which we observed 60, 81, and 11 different non-standard server ports, respectively. These variations, along with the security violations discussed in §5, highlight the need for dynamic protocol detection.

### 7. Conclusion

In this paper, we have developed a general NIDS framework that overcomes the limitations of traditional, port-based protocol analysis. The need for this capability arises because an increasing share of today’s network traffic resists correct classification using TCP/UDP port numbers. For a NIDS, such traffic is particularly interesting, as a common reason to avoid well-known ports is to evade security monitoring and policy enforcement. However, current NIDSs rely exclusively on ports to decide which higher-level protocol analysis to perform.

Our framework introduces a dynamic processing path that adds and removes analysis components as required. The scheme uses protocol detection mechanisms as triggers to activate analyzers, which can subsequently decline to process the connection if they determine the trigger was in error. The design of the framework is independent of any particular detection scheme and allows for the addition/removal of analyzers at arbitrary times. The design provides a high degree of modularity, allowing analyzers to work in parallel (e.g., to perform independent analyses of the same data) or in series (e.g., to decapsulate tunnels).

We implemented our design within the open-source Bro NIDS, adapting several key components, including the protocol analyzers for HTTP, IRC, FTP, and SMTP, and leveraging Bro’s signature engine for efficient initial protocol detection, which is then verified by Bro’s analyzers.

Prototypes of our extended Bro system currently run at the borders of three large-scale operational networks. Our example applications—reliable recognition of uses of non-standard ports, payload inspection of FTP data transfers, and detection of IRC-based botnet clients and servers—have already exposed a significant number of security incidents at these sites. Due to its success, the MWN site has integrated our bot-detection into dynamic blocking of production traffic.

In the near future, we will migrate the remainder of Bro’s analyzers to the new framework. Based on our experiences to date, it appears clear that using dynamic protocol analysis operationally will significantly increase the number of security breaches we can detect.

### 8. Acknowledgments

We would like to thank the Lawrence Berkeley National Laboratory, the Leibniz-Rechenzentrum, München, and the University of California, Berkeley. We would also like to thank Deti Fliegl, John Ives, Jason Lee, and Brian Tierney. This work was supported by a fellowship within the Postdoc-Programme of the German Academic Exchange Service (DAAD), by the US National Science Foundation under grants ITR/ANI-0205519 and NSF-0433702, and by a grant from the Bavaria California Technology Center, for which we are grateful.

### References

[1] T. H. P. . R. Alliance. Know your enemy: Tracking botnets. http://www.honeynet.org/papers/bots, 2005.
[2] S. A. Baset and H. Schulzrinne. An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol. In Proc. IEEE Infocom 2006, 2006.
[3] CERT Advisory CA-2003-20 W32/Blaster worm.
[4] BleedingSnort. http://bleedingsnort.com.
[5] BitTorrent. http://www.bittorrent.com.
[6] T. Choi, C. Kim, S. Yoon, J. Park, B. Lee, H. Kim, H. Chung, and T. Jeong. Content-aware Internet Application Traffic Measurement and Analysis. In Proc. Network Operations and Management Symposium, 2004.
[7] Clam AntiVirus. http://www.clamav.net.
[8] C. Dewes, A. Wichmann, and A. Feldmann. An Analysis Of Internet Chat Systems. In Proc. ACM Internet Measurement Conference, 2003.
[9] S. Dharmapurikar and V. Paxson. Robust TCP Stream Reassembly In the Presence of Adversaries. In Proc. USENIX Security Symposium, 2005.
[10] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Operational Experiences with High-Volume Network Intrusion Detection. In Proceedings of ACM CCS, 2004.
[11] DSniff. www.monkey.org/~dugsong/dsniff.
[12] J. Early, C. Brodley, and C. Rosenberg. Behavioral Authentication of Server Flows. In Proc. Annual Computer Security Applications Conference, 2003.
[13] ENDACE Measurement Systems. http://www.endace.com.
[14] Enterasys Networks, Inc. Enterasys Dragon. http://www.enterasys.com/products/ids.
[15] Freechal P2P. http://www.freechal.com.
[16] D. Fliegl, T. Baur, and H. Reiser. Nat-O-Mat: Ein generisches Intrusion Prevention System. In Proc. 20. DFN-Arbeitstagung über Kommunikationsnetze, 2006.
[17] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS: Automated Construction of Application Signatures. In Proc. ACM Workshop on Mining Network Data, 2005.
[18] M. Handley, C. Kreibich, and V. Paxson. Network Intrusion Detection: Evasion, Traffic Normalization, and End-to-End Protocol Semantics. In Proc. 10th USENIX Security Symposium, 2001.
[19] The Internet Corporation for Assigned Names and Numbers. http://www.iana.org.
[20] McAfee IntruShield Network IPS Appliances. http://www.networkassociates.com.
[21] The IPP2P project. http://www.ipp2p.org/.
[22] C. Kalt. Internet Relay Chat: Client Protocol. RFC 2812, 2000.
[23] T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC: Multilevel Traffic Classification in the Dark. In Proc. ACM SIGCOMM, 2005.
[24] Application Layer Packet Classifier for Linux. http://l7-filter.sourceforge.net.
[25] libmagic — Magic Number Recognition Library.
[26] M. Mai. Dynamic Protocol Analysis for Network Intrusion Detection Systems. Master’s thesis, TU München, 2005.
[27] S. McCanne and V. Jacobson. The BSD Packet Filter: A New Architecture for User-level Packet Capture. In Proc. Winter USENIX Conference, 1993.
[28] A. Moore and K. Papagiannaki. Toward the Accurate Identification of Network Applications. In Proc. Passive and Active Measurement Workshop, 2005.
[29] A. Moore and D. Zuev. Internet Traffic Classification Using Bayesian Analysis Techniques. In Proc. ACM SIGMETRICS, 2005.
[30] Linux NetFilter. http://www.netfilter.org.
[31] V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. Computer Networks, 31(23–24):2435–2463, 1999.
[32] V. Paxson and S. Floyd. Wide-Area Traffic: The Failure of Poisson Modeling. IEEE/ACM Transactions on Networking, 3(3):226–224, June 1995.
[33] T. Ptacek and T. Newsham. Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, Inc., 1998.
[34] M. Roesch. Snort: Lightweight Intrusion Detection for Networks. In Proc. Systems Administration Conference, 1999.
[35] M. Roughan, S. Sen, O. Spatscheck, and N. Duffield. Class of Service Mapping for QoS: A Statistical Signature Based Approach To IP Traffic Classification. In Proc. ACM Internet Measurement Conference, 2004.
[36] S. Sen, O. Spatscheck, and D. Wang. Accurate, Scalable In-Network Identification of P2P Traffic Using Application Signatures. In Proc. World Wide Web Conference, 2004.
[37] R. Sommer. Viable Network Intrusion Detection in High-Performance Environments. PhD thesis, TU München, 2005.
[38] R. Sommer and V. Paxson. Enhancing Byte-Level Network Intrusion Detection Signatures with Context. In Proc. 10th ACM Conference on Computer and Communications Security, 2003.
[39] K. Tan and B. Collie. Detection and classification of TCP/IP network services. In Proc. Annual Computer Security Applications Conference, 1997.
[40] K. Xu, Z.-L. Zhang, and S. Bhattacharyya. Profiling Internet Backbone Traffic: Behavior Models and Applications. In Proc. ACM SIGCOMM, 2005.
[41] Y. Zhang and V. Paxson. Detecting Backdoors. In Proc. USENIX Security Symposium, 2000.