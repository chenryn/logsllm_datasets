3716
3795
Table 4: CPU user times on subset of the trace (secs; averaged over 3 runs each; standard deviation always < 13s).
In summary, for this conﬁguration we can obtain
nearly the full power of the PIA architecture (examin-
ing all packets, reassembling and matching on the ﬁrst
4KB) at a performance cost of about 13.8% compared to
Stock-Bro. While this is noticeable, we argue that the
additional detection power provided merits the expendi-
ture. We also note that the largest performance impact
stems from applying signature matching to a large num-
ber of packets, for which we could envision leveraging
specialized hardware to speed up. Finally, because we
perform dynamic protocol analysis on a per-connection
basis, the approach lends itself well to front-end load-
balancing.
6.2 Detection Performance
We ﬁnish with a look at the efﬁcacy of the PIA archi-
tecture’s multi-step analysis process. To do so, we ran
PIA-Bro with all adapted analyzers (HTTP, FTP, IRC,
SMTP) on the 24-hour mwn-full-packets trace, re-
lying only our bidirectional PIA-signatures for protocol
detection, i.e., no port based identiﬁcation. (Note that as
these signatures differ from the L7-signatures used in §3,
the results are not directly comparable.) PIA-Bro veri-
ﬁes the detection as discussed in §4.3, i.e., when the con-
nection has either run for 30 seconds or transferred 4 KB
of data (or terminated).
Our goal is to understand the quality of its detection
in terms of false positives and false negatives. In trad-
ing off these two, we particularly wish to minimize false
positives, as our experience related in §5 indicates that
network operators strongly desire actionable informa-
tion when reporting suspected bot hosts or surreptitious
servers.
Table 5 breaks down PIA-Bro’s detections as fol-
lows. The ﬁrst column shows how often (i) a protocol
detection signature ﬂagged the given protocol as running
on a non-standard port, for which (ii) the corresponding
analyzer veriﬁed the detection. With strong likelihood,
these detections reﬂect actionable information.
The second and third columns list how often the an-
alyzer did not agree with the detection, but instead re-
jected the connection as exhibiting the given protocol, for
Detected and
veriﬁed
non-std. port
1,283,132
14,488
1,421
69
Rejected
by analyzer
non std. port
21,153
180
91
0
Rejected
by analyzer
std. port
146,202
1,792
3
1,368
HTTP
FTP
IRC
SMTP
Table 5: # of connections with detection and veriﬁcation.
non-standard and standard ports, respectively. Thus, the
second column highlights the role the analyzer plays in
reducing false positives; had we simply employed signa-
tures without subsequent veriﬁcation, then in these cases
we would have derived erroneous information.
The third column, on the other hand, raises questions
regarding to what degree our protocol detection might
be missing instances of given protocols. While we have
not yet systematically assessed these rejections, those we
have manually inspected have generally revealed either
a signiﬁcant protocol failure, or indeed an application
other than that associated with the standard port. Ex-
amples of the former include errors in HTTP headers,
non-numeric status codes in FTP responses, mismatches
in SMTP dialogs between requests and responses, use of
SMTP reply codes beyond the assigned range, and ex-
tremely short or mismatched IRC replies.
While we detect a large number of veriﬁed con-
nections on non-standard ports—with the huge num-
ber of HTTP connections primarily due to various P2P
applications—for this trace the only instance we found of
a different protocol running on a privileged standard port
was a (benign) IRC connection running on 80/tcp. On
the unprivileged ports used for IRC, however, we found
a private Apache HTTP server, a number of video-on-
demand servers, and three FTP servers used for (likely
illicit) music-sharing. (Note that, different than in §3.2,
when looking for protocols running on standard ports,
we can only detect instances of FTP, HTTP, IRC, and
SMTP; also, protocols running on top of HTTP on port
80 are not reported.)
Finally, Figure 5 shows the diversity of the non-
standard ports used by different types of servers. The
270
Security ’06: 15th USENIX Security Symposium
USENIX Association
M
1
K
0
0
1
K
0
1
0
0
0
1
0
0
1
0
1
3
1
s
n
o
i
t
c
e
n
n
o
c
f
o
r
e
b
m
u
n
IRC
FTP
SMTP
s
n
o
i
t
c
e
n
n
o
c
f
o
r
e
b
m
u
n
0
0
0
1
0
0
1
0
1
4
2
1
0
10000
20000
30000
40000
50000
60000
0
10000
20000
30000
40000
50000
60000
destination port
destination port
Figure 5: Connections using the HTTP (left) and the IRC, FTP, SMTP (right) protocol.
x-axis gives the port number used and the y-axis the num-
ber of connections whose servers resided on that port
(log-scaled). The 22,647 HTTP servers we detected used
4,024 different non-standard ports, some involving more
than 100,000 connections. We checked the top ten HTTP
ports (which account for 88% of the connections) and
found that most are due to a number of PlanetLab hosts
(ports 312X, 212X), but also quite a large number are
due to P2P applications, with Gnutella (port 6346) con-
tributing the largest number of distinct servers. Similar
observations, but in smaller numbers, hold for IRC, FTP,
and SMTP, for which we observed 60, 81, and 11 differ-
ent non-standard server ports, respectively. These varia-
tions, together with the security violations we discussed
in §5, highlight the need for dynamic protocol detection.
7 Conclusion
In this paper we have developed a general NIDS frame-
work which overcomes the limitations of traditional,
port-based protocol analysis. The need for this capability
arises because in today’s networks an increasing share of
the trafﬁc resists correct classiﬁcation using TCP/UDP
port numbers. For a NIDS, such trafﬁc is particularly in-
teresting, as a common reason to avoid well-known ports
is to evade security monitoring and policy enforcement.
Still, today’s NIDSs rely exclusively on ports to decide
which higher-level protocol analysis to perform.
Our framework introduces a dynamic processing path
that adds and removes analysis components as required.
The scheme uses protocol detection mechanisms as trig-
gers to activate analyzers, which can subsequently de-
cline to process the connection if they determine the trig-
ger was in error. The design of the framework is inde-
pendent of any particular detection scheme and allows
for the addition/removal of analyzers at arbitrary times.
The design provides a high degree of modularity, which
allows analyzers to work in parallel (e.g., to perform in-
dependent analyses of the same data), or in series (e.g.,
to decapsulate tunnels).
We implemented our design within the open-source
Bro NIDS. We adapted several of the system’s key com-
ponents to leverage the new framework, including the
protocol analyzers for HTTP, IRC, FTP, and SMTP, as
well as leveraging Bro’s signature engine as an efﬁcient
means for performing the initial protocol detection that
is then veriﬁed by Bro’s analyzers.
Prototypes of our extended Bro system currently run
at the borders of three large-scale operational networks.
Our example applications—reliable recognition of uses
of non-standard ports, payload inspection of FTP data
transfers, and detection of IRC-based botnet clients and
servers—have already exposed a signiﬁcant number of
security incidents at these sites. Due to its success, the
MWN site has integrated our bot-detection into dynamic
blocking of production trafﬁc.
In the near future, we will migrate the remainder of
Bro’s analyzers to the new framework. From our experi-
ences to date, it appears clear that using dynamic proto-
col analysis operationally will signiﬁcantly increase the
number of security breaches we can detect.
8 Acknowledgments
We would like to thank the Lawrence Berkeley National
Laboratory; the Leibniz-Rechenzentrum, M¨unchen; and
the University of California, Berkeley. We would also
like to thank Deti Fliegl, John Ives, Jason Lee, and Brian
Tierney. This work was supported by a fellowship within
the Postdoc-Programme of the German Academic Ex-
change Service (DAAD), by the US National Science
Foundation under grants ITR/ANI-0205519 and NSF-
0433702, and by a grant from the Bavaria California
Technology Center, for which we are grateful.
USENIX Association
Security ’06: 15th USENIX Security Symposium
271
References
[1] T. H. P. . R. Alliance. Know your enemy: Tracking
botnets. http://www.honeynet.org/papers/
bots, 2005.
[2] S. A. Baset and H. Schulzrinne. An Analysis of the Skype
Peer-to-Peer Internet Telephony Protocol. In Proc. IEEE
Infocom 2006, 2006.
[3] CERT Advisory CA-2003-20 W32/Blaster worm.
[4] BleedingSnort. http://bleedingsnort.com.
[5] BitTorrent. http://www.bittorrent.com.
[6] T. Choi, C. Kim, S. Yoon, J. Park, B. Lee, H. Kim,
H. Chung, and T. Jeong. Content-aware Internet Applica-
tion Trafﬁc Measurement and Analysis. In Proc. Network
Operations and Management Symposium, 2004.
[7] Clam AntiVirus. http://www.clamav.net.
[8] C. Dewes, A. Wichmann, and A. Feldmann. An Analysis
Of Internet Chat Systems. In Proc. ACM Internet Mea-
surement Conference, 2003.
[9] S. Dharmapurikar and V. Paxson. Robust TCP Stream
In Proc.
Reassembly In the Presence of Adversaries.
USENIX Security Symposium, 2005.
[10] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Op-
erational Experiences with High-Volume Network Intru-
sion Detection. In Proceedings of ACM CCS, 2004.
[11] DSniff. www.monkey.org/∼dugsong/dsniff.
[12] J. Early, C. Brodley, and C. Rosenberg. Behavioral Au-
thentication of Server Flows. In Proc. Annual Computer
Security Applications Conference, 2003.
[13] ENDACE Measurement Systems.
http://www.
endace.com.
[14] Enterasys Networks, Inc. Enterasys Dragon. http://
www.enterasys.com/products/ids.
[15] Freechal P2P. http://www.freechal.com.
[16] D. Fliegl, T. Baur, and H. Reiser. Nat-O-Mat: Ein gener-
In Proc. 20. DFN-
isches Intrusion Prevention System.
Arbeitstagung ¨uber Kommunikationsnetze, 2006.
[17] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS:
In
Automated Construction of Application Signatures.
Proc. ACM Workshop on Mining Network Data, 2005.
[18] M. Handley, C. Kreibich, and V. Paxson. Network In-
trusion Detection: Evasion, Trafﬁc Normalization, and
End-to-End Protocol Semantics. In Proc. 10th USENIX
Security Symposium, 2001.
[19] The Internet Corporation for Assigned Names and Num-
bers. http://www.iana.org.
[20] McAfee IntruShield Network IPS Appliances. http:
//www.networkassociates.com.
[21] The IPP2P project. http://www.ipp2p.org/.
[22] C. Kalt. Internet Relay Chat: Client Protocol. RFC 2812,
2000.
[23] T. Karagiannis, K. Papagiannaki, and M. Faloutsos.
BLINC: Multilevel Trafﬁc Classiﬁcation in the Dark. In
Proc. ACM SIGCOMM, 2005.
[24] Application Layer Packet Classiﬁer for Linux. http:
//l7-filter.sourceforge.net.
[25] libmagic — Magic Number Recognition Library.
[26] M. Mai. Dynamic Protocol Analysis for Network Intru-
sion Detection Systems. Master’s thesis, TU M¨unchen,
2005.
[27] S. McCanne and V. Jacobson. The BSD Packet Filter: A
New Architecture for User-level Packet Capture. In Proc.
Winter USENIX Conference, 1993.
[28] A. Moore and K. Papagiannaki. Toward the Accurate
Identiﬁcation of Network Applications. In Proc. Passive
and Active Measurement Workshop, 2005.
[29] A. Moore and D. Zuev. Internet Trafﬁc Classiﬁcation Us-
ing Bayesian Analysis Techniques. In Proc. ACM SIG-
METRICS, 2005.
[30] Linux NetFilter. http://www.netfilter.org.
[31] V. Paxson. Bro: A System for Detecting Network Intrud-
ers in Real-Time. Computer Networks, 31(23–24):2435–
2463, 1999.
[32] V. Paxson and S. Floyd. Wide-Area Trafﬁc: The Failure
IEEE/ACM Transactions on Net-
of Poisson Modeling.
working, 3(3):226–224, June 1995.
[33] T. Ptacek and T. Newsham. Insertion, Evasion, and Denial
of Service: Eluding Network Intrusion Detection. Tech-
nical report, Secure Networks, Inc., 1998.
[34] M. Roesch. Snort: Lightweight Intrusion Detection for
Networks. In Proc. Systems Administration Conference,
1999.
[35] M. Roughan, S. Sen, O. Spatscheck, and N. Dufﬁeld.
Class of Service Mapping for QoS: A Statistical Signa-
ture Based Approach To IP Trafﬁc Classiﬁcation. In Proc.
ACM Internet Measurement Conference, 2004.
[36] S. Sen, O. Spatscheck, and D. Wang. Accurate, Scalable
In-Network Identiﬁcation of P2P Trafﬁc Using Applica-
tion Signatures.
In Proc. World Wide Web Conference,
2004.
[37] R. Sommer. Viable Network Intrusion Detection in High-
Performance Environments. PhD thesis, TU M¨unchen,
2005.
[38] R. Sommer and V. Paxson. Enhancing Byte-Level Net-
work Intrusion Detection Signatures with Context.
In
Proc. 10th ACM Conference on Computer and Commu-
nications Security, 2003.
[39] K. Tan and B. Collie. Detection and classiﬁcation of
TCP/IP network services. In Proc. Annual Computer Se-
curity Applications Conference, 1997.
[40] K. Xu, Z.-L. Zhang, and S. Bhattacharyya. Proﬁling In-
ternet Backbone Trafﬁc: Behavior Models and Applica-
tions. In Proc. ACM SIGCOMM, 2005.
[41] Y. Zhang and V. Paxson. Detecting Backdoors. In Proc.
USENIX Security Symposium, 2000.
272
Security ’06: 15th USENIX Security Symposium
USENIX Association