often have stringent latency or throughput requirements.
Ideally, one would like the dis-
tributed encryption/decryption protocols to not be signiﬁcantly more expensive than their
non-distributed counterparts. In particular, the protocols should have low computation and
bandwidth cost, and require minimal interaction.
General-purpose multi-party computation protocols can also be used to solve the same
problems by computing standard symmetric-key encryption schemes inside an MPC (e.g. see
[RSS17, dya]). While this approach has the beneﬁt of preserving the original non-interactive
5
Server-2
sk2
Server-1
sk1
t
k1
Server-3
sk3
Client
Server-4
sk4
t
k4
t
k5
Server-5
sk5
Contacted
Not contacted
DistEnc(m):
− t ← commit(m)
− k1, k4, k5 ←
query(t, {1,4,5})
− k ← combine(k1, k4, k5)
− c ← Enc(k, m)
Figure 1: The ﬂow of our distributed encryption protocol for n = 5 and t = 3. Client contacts servers
1, 4 and 5 to encrypt a message m. Servers do not communicate with each other. We show client
separate from the servers for simplicity. A simpliﬁed outline of the encryption protocol is given in the
box. See Figure 2 for the actual steps. The ﬂow of decryption protocol is similar to encryption but
the steps involved are diﬀerent.
algorithm, the resulting protocols would be prohibitively interactive, bandwidth-intensive,
and would become increasingly expensive for larger number of parties.
In this paper, we
aim for two-round protocols where one server sends a message to other servers and receives
a response, while other servers need not exchange any messages. This minimal interaction
model minimizes coordination between the servers and is ideal for low-latency applications.
We review the MPC-based solutions and other related work on protecting cryptographic
secrets through splitting them among multiple parties (i.e. secret sharing, threshold PKE
and threshold PRFs) in the related work section (Section 3).
1.2 Our Contribution
We formalize, design and implement new protocols for distributed symmetric-key encryption.
Our contributions can be summarized as follows:
New security deﬁnitions. We initiate a formal study of authenticated encryption in the
distributed setting. We propose novel message privacy and ciphertext integrity deﬁnitions for
threshold authenticated encryption that captures the unique issues that arise in this setting,
in presence of a malicious adversary that corrupts a subset of parties.
Simple and lightweight protocols. We put forward a generic construction based on any
distributed pseudorandom function (DPRF) in the standard model. The construction only
assumes one-way functions.
− When we instantiate with multiple eﬃcient DPRF constructions from Naor et al. [NPR99]
and our enhanced variants, we derive a number of threshold authenticated encryption
6
protocols with diﬀerent security guarantees and eﬃciency levels (see Figure 8). All our
protocols are light-weight: they require only two rounds of communication and incur
minimal computation and bandwidth cost. Speciﬁcally, the party interested in encryp-
tion or decryption sends one request message to other parties and receives one response
message in return (see Figure 1 for a visual depiction).1 In the most eﬃcient instantia-
tion, there are no public-key operations as parties only make PRF calls and hashing.
− We provide the ﬁrst formal analysis for both the PRF-based and the DDH-based instan-
tiations of the DPRF constructions given in Naor et al. [NPR99] by proposing a strong
pseudo-randomness property. We also formalize correctness of DPRFs in presence of
malicious corruption and extend their DDH-based construction to satisfy this notion.
− Our protocols allow for an arbitrary threshold t such that only t − 1 other parties need
to be contacted to encrypt or decrypt. At the same time, the protocols are resilient to
the corruption of t − 1 parties (clearly, this is the best one could hope for).
Implementation and Evaluation. We implement several variants of our protocols in
C++ and perform extensive experiments to evaluate their performance for applications with
high-throughput and low-latency requirements. Our most eﬃcient instantiation achieves a
throughput of upto 1 million encryptions/decryptions per seconds, or alternatively a sub-
millisecond latency with upto 18 participating parties. We achieve this high level of perfor-
mance through a variety of cryptographic optimization and system level engineering such as
full use of hardware accelerated AES and instruction vectorization. The result is a lightweight
challenge-response protocol where only one message is sent and received by the participating
parties.
2 Technical Overview
2.1 Security Requirements
A primary contribution of this work is to present a formal treatment of symmetric-key au-
thenticated encryption in the distributed setting.
Our deﬁnitions are inspired by the traditional game-based notions of message privacy
and ciphertext integrity for standard (i.e. non-interactive) symmetric-key encryption [BN00,
KY01, RS06]. We intentionally avoid the Universal Composability framework [Can01] be-
cause such deﬁnitions, proposed in prior work for standard symmetric-key encryption, are
cumbersome to work with (e.g. see [KT09]).
We remark that over the past two decades, a large body of work has considered various
notions of security for standard authenticated encryption [BN00, Rog02, RS06, Rog13, RS06,
GL15, HRRV15, FFL12, BHT18, HKR15, BT16, BK11, PW12] to address many practical
issues such as concrete security, nonce-misuse resistance, online security, and multi-user secu-
rity. As the ﬁrst work to formalize distributed authenticated encryption, we choose to focus
on the traditional notion of AE security (i.e. message privacy + ciphertext integrity) as even
extending this important notion to the threshold setting raises many new subtleties (as we
will see shortly) that do not exist in the non-interactive setting. We leave it for future work
to extend threshold AE to the more advanced notions mentioned above.
1This is in contrast with two-round MPC protocols (e.g. [MW16]) where typically in each round every
participant broadcasts messages to everyone else.
7
In the distributed setting, we consider an attacker who controls a
The Attack Model.
subset of parties and behaves arbitrarily malicious while the honest parties are connected
via point-to-point secure channels. Moreover, to capture a more realistic scenario, we let the
adversary choose its corruption set after receiving the public parameters of the scheme. As
we will see shortly, this requires additional care in both the constructions and the security
proof.
Threshold Symmetric-key Encryption. Analogous to its non-interactive counterpart,
we deﬁne a threshold symmetric-key encryption (TSE) scheme consisting of a setup algorithm
Setup and two protocols, DistEnc and DistDec, for distributed encryption and decryption, re-
spectively. The scheme is parameterized by two positive integers n and t, with n ≥ t ≥ 2
where n denotes the total number of parties and t the threshold. We allow at most t−1 corrup-
tions which is clearly optimal in this setting. Setup generates n private keys sk1, sk2, . . . , skn,
one for each party, and some public parameters pp. In DistEnc, one of the parties, called the
encryptor, who holds a message, sends a request message to any t−1 other parties in the pro-
tocol. The participating parties use their respective secret-keys to compute their individual
responses. At the end of the protocol, only the encryptor learns a ciphertext. Analogously,
in DistDec, one of the parties (decryptor) with a ciphertext performs a similar process and
learns the corresponding message. Note that we do not assume that the same party plays
the role of encryptor and decryptor. Our consistency property requires that any subset of t
parties should be able to encrypt or decrypt.
Correctness. The natural correctness requirement in the non-interactive setting is that a
ciphertext c generated by running an encryption algorithm on a message m must decrypt
to m. But in the threshold setting where the adversary is malicious, deﬁning correctness
becomes more subtle. Informally, correctness requires that a ciphertext that is generated by
an honest encryptor but may involve corrupt parties in the encryption protocol can only be
decrypted (by an honest decryptor) to the correct message or results in an abort (i.e. ⊥) even
if the decryption involves corrupted parties. This notion may already be suﬃcient for many
applications. We also formalize a stronger notion wherein any execution of an encryption
protocol that potentially involves malicious parties either produces a correct ciphertext (by
correct we mean that an honest decryption produces the original message) or results in
an abort.
In other words, a valid ciphertext carries an implicit guarantee that an honest
decryption/veriﬁcation will always be successful. Looking ahead, if we do not impose the
stronger correctness requirement, our instantiation is signiﬁcantly faster—since to achieve
the stronger form of correctness we need non-interactive zero-knowledge proofs (NIZK) that
require more expensive public-key operations.
Message Privacy. As discussed earlier, our deﬁnition has two components, message pri-
vacy and ciphertext integrity (also called authenticity). In the non-interactive case, message
privacy is deﬁned via a chosen plaintext attack (CPA) game where the adversary can engage
in encryption queries before and after the challenge phase where the challenge stage consists
of guessing between the ciphertexts for two adversarially chosen messages.
In the threshold setting, we allow for two types of encryption queries in the message pri-
vacy game. First, the adversary can initiate its own encryption queries using messages of its
choice and obtain both the ﬁnal ciphertext as well as the transcripts of the parties it corrupts
(and inﬂuence their actions during encryption). Second, we allow the adversary to perform
8
indirect encryption queries where it invokes an honest party to initiate an encryption query
using an adversary-chosen message and let the adversary learn the ciphertext (despite the
fact that the TSE encryption would not necessarily leak the ciphertext to the adversary).
This captures scenarios where the application using the service may unintentionally leak ci-
phertexts to the adversary (e.g. a cloud storage compromise or authentication token leakage).
We then observe that this is not suﬃcient to capture full message privacy in the distributed
setting.
In particular, even decryption queries initiated by honest parties should preserve
message privacy in presence of a malicious adversary who corrupts a subset of parties. Note
that this issue does not arise in the non-interactive case where decryption queries always
reveal the message. Hence, we allow these indirect decryption queries in our message privacy
game and do not reveal the decrypted message to the adversary. In particular, an adversary
could provide its challenge ciphertext to such an indirect decryption query and still should
not be able to win the message privacy game.
Ciphertext Integrity.
In the ciphertext integrity game, the adversary engages in both
encryption and decryption queries, and then needs to create a new valid ciphertext (forgery).
Several subtleties arise when deﬁning a valid forgery. Let us start with the diﬀerent types of
encryption/decryption queries.
Similar to the message privacy game, both standard and indirect encryption queries are
allowed. The ciphertexts resulting from the former are naturally not considered forgeries
since the corrupt party is intended to learn it. However, in the indirect case where an honest
party initiates the encryption, the security game does not provide the adversary with the
resulting ciphertext. As such, the adversary is allowed to output the ciphertext of an indirect
encryption query as a valid forgery if it manages to acquire one. Therefore the TSE scheme
is required to prevent such attacks by making them unpredictable to him even while actively
participating in the protocols.
Interestingly, we allow three types of decryption queries in the ciphertext integrity game.
The adversary (i) either makes a standard decryption query where it initiates the decryption
using a ciphertext of its choice and learns the decryption and transcripts of all corrupted
parties; or (ii) it makes an indirect decryption query where an honest party initiates the
decryption query using a ciphertext provided by the adversary; or (iii) makes an indirect
decryption query using a ciphertext it does not know but that was previously generated
via an indirect encryption protocol initiated by an honest party. The purpose of the third
type (called targeted decryption queries) is to ensure that the decryption protocol initiated
by an honest party does not leak the computed ciphertext to the adversary if it is the
result of an earlier encryption by an honest party. To capture this, we do not count these
ciphertexts towards adversary’s forgery budget; in particular, the adversary wins the game
if it outputs one of them as a forgery. In fact, the only decryption queries that we count
towards adversary’s forgery budget are of the ﬁrst type, i.e. those initiated by the adversary
itself. See Remark 6.11 for a more detailed discussion and how even this can be avoided at
the cost of more expensive constructions.
One-More Ciphertext Integrity. To deﬁne a successful forgery in the usual non-interactive
setting, one could just say that the adversary must produce a ciphertext that is diﬀerent from
the ones it receives from the encryption oracle [BN00, KY01]. Alternatively, in the case of
uniﬁed deﬁnitions [RS06], the adversary is restricted from querying the decryption oracle
9
with a ciphertext it received from the encryption oracle2. Unfortunately, one cannot take a
similar approach in the distributed setting. If the adversary initiates an encryption session
that involves malicious parties, the output of the session (a ciphertext) may not be available
to the honest parties even if they are involved. Thus, it is not clear how to explicitly deﬁne
the ciphertext learned by the adversary and therefore no straightforward way to prevent the
adversary from claiming such ciphertext as a valid forgery.
To circumvent the problem while keeping the deﬁnition simple, we keep track of the
maximum number of ciphertexts, say k, the adversary could learn (in an ideal sense) by
interacting with honest parties and require that as his forgery, he outputs k + 1 distinct
ciphertexts that successfully decrypt. This implies that at least one of the ciphertexts he
outputs is a new and valid ciphertext.
Two Notions of Authenticity. Our deﬁnition also needs to specify how the forged ci-
phertexts are decrypted to check their validity. The ﬁrst option is to use an honest decryption
(where all parties behave honestly). This is suﬃcient in applications where an external service
would perform the decryption using the whole key (e.g.
in case of single-sign-on access to
a service). We refer to this variant as authenticity as it resembles the standard authenticity
notions studied in the non-interactive setting. A second (and stronger) option is to continue
using the distributed decryption protocol (where adversary actively controls a subset of par-
ties) to decrypt the forged ciphertexts too. We refer to this variant as strong authenticity.
We design and implement protocols meeting both notions trading oﬀ eﬃciency for higher
security.
2.2 Our Generic Construction
We provide a brief overview of our main construction but before doing so, we discuss a few
attempts that fail to meet our eﬃciency or security requirements. A more detailed discussion
on the failed attempts can be found in Appendix B.
DPRF. All the constructions we discuss in this section use a Distributed Pseudorandom
Function (DPRF) as a building block. A DPRF is a distributed analog of a standard PRF.
It involves a setup where each party obtains their secret-key and the public parameters.
Evaluation on an input is performed collectively by any t parties where t (≤ n) is a threshold.
Importantly, at the end of the protocol, only one special party (evaluator) learns the output.
A DPRF should meet two main requirements: (i) consistency: the evaluation should be
independent of the participating set, and (ii) pseudorandomness: the evaluation’s output
should be pseudorandom to everyone else but the evaluator even if the adversary corrupts all
other t − 1 parties and behaves maliciously.
In the malicious case, one can think of a slightly stronger property, called (iii) correctness,
where after an evaluation involving up to t − 1 malicious corruptions, an honest evaluator
either receives the correct output or can detect the malicious behavior.3 Naor et al. [NPR99]
2Under the uniﬁed deﬁnition, the adversary is supposed to distinguish between two worlds, a ‘real’ world
where access to both encryption and decryption oracle is provided, and an ‘ideal’ world where the encryption
oracle is replaced with one that just returns random bits and the decryption oracle is replaced with one that
just returns ⊥.
3Looking ahead, our TSE protocol achieves strong authenticity, in which the adversary is involved in the
decryption of the forgery, only if the underlying DPRF achieves correctness.
10
propose two very eﬃcient (two-round) instantiations of DPRF, one based only on symmetric-
key cryptography and another based on the DDH assumption. We provide the ﬁrst formal