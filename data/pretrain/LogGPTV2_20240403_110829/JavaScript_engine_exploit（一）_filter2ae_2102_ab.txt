### JavaScript对象的内部表示

在不同的JavaScript引擎中，对于对象内部结构的称呼有所不同。例如，在JavaScriptCore（JSC）中被称为“_Structures_”，而在SpiderMonkey中则称为“_Shapes_”。根据ECMAScript规范，所有JavaScript对象都定义为一个由字符串键映射到属性值的字典。正如MDN所描述的那样：“对象是一组属性的集合，而每个属性则是名称（或称键）与值之间的关联。”

然而，如果将这些作为键的字符串存储在每个对象的内存中，将会非常浪费空间，因为这意味着每次创建新对象时都会复制一份相同的键。实际上，在JavaScript中，许多对象共享相同的属性是很常见的现象，从某种角度来看，可以认为这些对象具有相同的形状（Shapes）或者说是相同的结构（Structure）。比如下面的例子：

```javascript
const object1 = { x: 1, y: 2 };
const object2 = { x: 3, y: 4 };
```

尽管`object1`和`object2`是两个独立的对象实例，但它们拥有完全相同的属性名。因此，在JavaScriptCore中可以看到这两个对象具有相同的StructureID。

当需要访问对象属性时，JSC会先通过StructureID定位到对应的Structure，接着找到相应的属性名，并读取该属性在内联存储或butterfly中的偏移量，最后获取属性值。如果此时向`object2`添加一个新的属性`z`，那么JSC会在现有的Structure链表中查找是否已存在仅包含`x`, `y`, `z`这三个属性的Structure；如果没有，则会创建一个新的并分配一个新的StructureID。

### Just-In-Time (JIT) 编译器

之前提到过JIT编译技术，但实际上并没有深入讨论其工作原理。简而言之，JIT也是一种编译器，它能够将JavaScript代码直接转换成机器码执行。在JavaScriptCore中，JIT被分为四个层级：

1. **LLInt (Low-Level Interpreter)** - 这是最基础的解释层，负责初步解析和运行JavaScript字节码。
2. **Baseline JIT Compiler** - 当某个函数被频繁调用后，会被视为"热点"函数，此时LLInt会触发OSR机制将其切换至Baseline JIT进行优化。
3. **DFG JIT** - 如果Baseline JIT中的函数执行次数达到一定阈值，则进一步升级到DFG JIT，以实现更深层次的优化。
4. **FTL JIT** - 最新的加入者，旨在让JavaScript执行速度接近C语言水平，它重用了部分DFG组件，特别是类型推断系统。

#### LLInt

LLInt是JSC虚拟机的基础组成部分之一，其核心逻辑相对简单，主要通过一系列switch-case语句来处理不同类型的指令。

#### Baseline JIT Compiler

当检测到某段代码变得足够热时（即执行频率很高），LLInt就会启动OSR机制，将控制权转移到Baseline JIT上，后者会对这部分代码做初步优化。

#### DFG JIT

一旦Baseline JIT中的代码达到了更高的执行频次标准，JSC便会启用DFG JIT来进行更加复杂的优化过程。DFG首先会将字节码转换成一种中间形式（DFG CPS），然后利用收集到的数据流信息做出关于变量类型的猜测，并基于此插入最少数量的类型检查点，随后应用传统编译器优化技术生成最终的机器码。

#### FTL JIT

FTL JIT是最新引入的技术，目标是大幅提高JavaScript程序的执行效率。它不仅复用了DFG的许多阶段，还增加了对LLVM IR的支持，从而能够利用LLVM的强大优化能力生成高效机器码。

### 搭建调试环境

官方提供了详细的构建指南：[Building WebKit](https://webkit.org/building-webkit/)。虽然我使用的是macOS系统，但WebKit同样支持Windows和Linux平台上的编译。以下是针对macOS用户的构建步骤概述：

- 确保已经安装了Xcode及其命令行工具。
- 克隆WebKit仓库。
- 切换至所需的开发分支。
- 在WebKit根目录下运行构建脚本。

完成上述步骤后，您就可以开始使用JSC提供的REPL界面进行交互式编程了。此外，还可以结合lldb等调试工具来帮助诊断问题。

### 参考资料

由于原文档未提供具体参考链接，请自行查阅相关文献和技术文档以获得更多细节。