  two	
  users	
  exchange	
  their	
  respecAve	
  checksums	
  via	
  verbal	
  communicaAon.	
  Step	
  4:	
  The	
  transcriber	
  compares	
  the	
  checksum	
  (i.e.,	
  “automated	
  checksum	
  comparison”)	
  and	
  the	
  two	
  users	
  opAonally	
  verify	
  the	
  other	
  user’s	
  voice	
  (i.e.,	
  “manual	
  speaker	
  veriﬁcaAon”).	
  They	
  should	
  accept	
  the	
  call	
  since	
  the	
  two	
  checksums	
  match	
  and	
  are	
  spoken	
  by	
  legiAmate	
  enAAes.	
  4-­‐	
  OpAonally	
  verify	
  the	
  speaker	
  4-­‐	
  OpAonally	
  verify	
  the	
  speaker	
  Insecure	
  Channel	
  Human	
  Voice	
  Channel	
  Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1330Figure 3: Data MITM
Figure 4: Voice MITM
(2) Comprehensive Security-Usability Evaluation via an On-
line User Study: To evaluate the security and usability benefits
provided by CCCP, we design a human factors online study
(with N = 66 Amazon Mechanical Turk participants), that mim-
ics a realistic VoIP scenario and feeds several challenges to the
participants having matching and mismatching 4-word and 8-
word spoken in the legitimate user’s voices, different speaker’s
voices and automatically synthesized voices. We transcribe this
comprehensive data set consisting of 1188 audio files spoken
by a wide variety of speakers in real-life conditions. Our study
results demonstrate that, by using our automated checksum
comparison, CCCP can: (1) drastically reduce the chances of
false positives under data MITM to 0% (leading to a security level
equivalent to what is promised by the underlying cryptographic
protocol), and (2) reduce the false negatives down to about 5%,
much lower than traditional designs (Figure 9).
When further considering the optional, more powerful security
model involving voice MITM, we find that CCCP can reduce
the false positives under different speaker voice MITM attack
down to around 12% and under synthesized voice MITM attack
down to around 20%, which may be significantly lower than
the traditional approach as shown in Figure 9.
2 BACKGROUND
2.1 Protocol and Threat Model
Many checksum-based key exchange protocol exist [44, 50, 52, 62]
that Crypto Phones implementations may adopt. A checksum-based
key exchange protocol is an authenticated key exchange protocol
(over IP channel) which allows Alice and Bob to agree upon a key,
based on checksum validation over an auxiliary channel (e.g., the
human voice channel as in Crypto Phones). The protocol results in
a Short Authenticated String (SAS) checksum per party, commonly
encoded into words or numbers (e.g., “skydive amulet”). Compare-
Confirm is the most popular SAS Checksum Comparison method
[60]. In this method, the checksum is displayed on each party’s
screen, they verbally exchange their respective checksums, and
both accept or reject the connection by comparing the checksums.
Copy-Confirm, is another approach in which one party reads the
checksum to the other party, who types it onto his/her device and
gets notified whether the checksum is correct or not.
In the security model of Crypto Phones, devices are connected
via a remote, high-bandwidth bidirectional (Vo)IP channel, and are
assumed to be trusted or uncompromised. An MITM adversary
Mallory attacking the protocol has full control over the channel,
namely, she can eavesdrop and tamper with messages transmitted.
Due to the inherent nature of the Crypto Phones key exchange
protocol, matching checksums imply the successful secure associa-
tion, whereas non-matching checksums imply an MITM attack. The
MITM attacker’s goal is to intercept or tamper with the communi-
cations; not to prevent the users from communicating (or denial of
service). The protocol limits the success probability of the attack to
2−k for k-bit checksums1.
The simplest form of attack against the Crypto Phones key ex-
change protocol is a data-based man-in-the-middle or data MITM
attack. The data MITM attacker acts as an MITM on the data chan-
nel and interferes with the key exchange in an attempt to establish
impersonated sessions with the two parties (Figure 3). As a result of
the attack, the generated checksums do not match at the two parties.
However, if the users erroneously accept mismatching checksums,
the data MITM attack will succeed.
Another type of attack against the Crypto Phones key exchange
protocol was introduced in [58], in which the attacker can tamper
with the voice channel (apart from the data channel). We refer to
this attack as voice MITM (Figure 4). The voice MITM attack utilizes
current advancement in voice synthesis/conversion [5, 21]. In this
attack, after tampering with the key exchange protocol (i.e., running
the data MITM attack), the attacker inserts his/her own voice (i.e.,
“different speaker attack”), or a morphed/converted voice of the
1Current implementation of Crypto Phones usually keeps the checksum short. This
is because: (1) short checksums give practical level of security (i.e., 2−16 success
probability of the attack for a 16-bit checksum), and (2) verifying long checksums is
harder for the users. Some Crypto Phones use a different variation of the key exchange
protocol, where the checksum is long, like a 160-bit collision-resistant hash of the
public keys of two parties [36, 37]. Nevertheless, the main functionality remains the
same in terms of the human tasks.
3
1-­‐	
  Key	
  Exchange	
  3-­‐	
  SASB	
  3-­‐	
  SASA	
  2-­‐	
  SASB	
  2-­‐	
  SASA	
  4-­‐	
  compare	
  the	
  checksum	
  and	
  op=onally	
  verify	
  the	
  speaker	
  Step	
  1:	
  The	
  MITM	
  aFacker	
  interferes	
  in	
  the	
  key	
  exchange	
  protocol,	
  which	
  results	
  in	
  two	
  diﬀerent	
  checksums	
  at	
  the	
  two	
  sides.	
  Step	
  2:	
  The	
  two	
  devices	
  show	
  their	
  respec=ve	
  checksums.	
  Step	
  3:	
  The	
  two	
  users	
  exchange	
  their	
  respec=ve	
  checksums	
  via	
  verbal	
  communica=on.	
  Step	
  4:	
  The	
  two	
  users	
  are	
  asked	
  to	
  compare	
  their	
  checksum	
  with	
  the	
  one	
  provided	
  by	
  the	
  other	
  party	
  (i.e.,	
  “checksum	
  comparison”),	
  and	
  to	
  op=onally	
  verify	
  the	
  other	
  user’s	
  voice	
  (i.e.,	
  “speaker	
  veriﬁca=on”).	
  Due	
  to	
  MITM,	
  checksums	
  do	
  not	
  match	
  and	
  therefore	
  protocol	
  should	
  be	
  rejected.	
  AFack	
  will	
  not	
  be	
  detected	
  if	
  users	
  make	
  errors.	
  1-­‐	
  Key	
  Exchange	
  4-­‐	
  compare	
  the	
  checksum	
  and	
  op=onally	
  verify	
  the	
  speaker	
  Insecure	
  Channel	
  Human	
  Voice	
  Channel	
  1-­‐	
  Key	
  Exchange	
  4-­‐	
  SASB	
  4-­‐	
  SASA	
  2-­‐	
  SASB	
  2-­‐	
  SASA	
  5-­‐	
  compare	
  the	
  checksum	
  and	
  verify	
  the	
  speaker	
  5-­‐	
  compare	
  the	
  checksum	
  and	
  verify	
  the	
  speaker	
  Step	
  1:	
  The	
  MITM	
  aDacker	
  interferes	
  in	
  the	
  key	
  exchange	
  protocol,	
  which	
  results	
  in	
  two	
  diﬀerent	
  SAS	
  at	
  the	
  two	
  sides.	
  Step	
  2:	
  The	
  two	
  devices	
  show	
  their	
  respecJve	
  checksums	
  as	
  a	
  result	
  of	
  SAS	
  protocol	
  execuJon.	
  Step	
  3:	
  The	
  two	
  users	
  exchange	
  their	