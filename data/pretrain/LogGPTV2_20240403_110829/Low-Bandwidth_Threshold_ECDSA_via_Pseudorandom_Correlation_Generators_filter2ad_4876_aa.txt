title:Low-Bandwidth Threshold ECDSA via Pseudorandom Correlation Generators
author:Damiano Abram and
Ariel Nof and
Claudio Orlandi and
Peter Scholl and
Omer Shlomovits
9
5
5
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Low-Bandwidth Threshold ECDSA
via Pseudorandom Correlation Generators
Damiano Abram∗
Ariel Nof†
∗Department of Computer Science
Aarhus University
Aarhus, Denmark
{damiano.abram, orlandi, peter.scholl}@cs.au.dk
Claudio Orlandi∗
Peter Scholl∗
Omer Shlomovits‡
†Department of Computer Science
Technion
Haifa, Israel
PI:EMAIL
†ZenGo X
Tel Aviv, Israel
PI:EMAIL
Abstract—Digital signature schemes are a fundamental compo-
nent of secure distributed systems, and the theft of a signing-key
might have huge real-world repercussions e.g., in applications
such as cryptocurrencies. Threshold signature schemes mitigate
this problem by distributing shares of the secret key on several
servers and requiring that enough of them interact to be able to
compute a signature. In this paper, we provide a novel threshold
for ECDSA, arguably the most relevant signature
protocol
scheme in practice. Our protocol
is the ﬁrst one where the
communication complexity of the preprocessing phase is only
logarithmic in the number of ECDSA signatures to be produced
later, and it achieves therefore a so-called silent preprocessing.
Our protocol achieves active security against any number of
arbitrarily corrupted parties.
Index Terms—threshold ECDSA; multi-party computation;
pseudorandom correlation generators
I. INTRODUCTION
Threshold signatures allow a set of n servers to produce
digital signatures, while ensuring that no subset of up to t < n
colluding servers can forge valid signatures on their own.
Threshold signatures can be used to provide an additional
layer of security in a cryptographic application, by removing
the single point of failure that comes from storing the signing
key in one place. There has recently been a renewed interest
in building threshold signatures for ﬁnancial applications,
particularly for the case of protecting the secret key in a
cryptocurrency wallet used to authorise transactions.
The elliptic curve digital signature algorithm, or ECDSA,
is one of the most popular signature schemes used today. This
is in part due its use in the Bitcoin protocol, where it is
deployed with the secp256k1 curve. Unlike with Schnorr
signatures, ECDSA also happens to be a more challenging
scheme to make work in the threshold setting, so there have
been a number of works in recent years designing new and
improved protocols for threshold ECDSA such as [Lin17],
[GG18], [DKLs18], [LNR18], [CCL+19], [DKLs19], [ST19],
[CCL+20], [DOK+20], [CGG+20], [DJN+20], [KMOS21].
Most of these works have been in the dishonest majority
setting and with active security, where up to t = n − 1 of the
servers may be maliciously corrupted, and this is the setting
we focus on in this paper.
Moreover, several of these protocols work in the prepro-
cessing model, consisting of a preprocessing phase, which is a
protocol used to generate correlated randomness needed for the
signing phase. In ECDSA, we sometimes also consider a pre-
signing phase, where the message-independent component of
a signature is produced, possibly before the message is known.
Each invocation of the (pre)-signing phase requires fresh pre-
processing material, so in large-scale applications, a signiﬁcant
quantity of correlated randomness must be ﬁrst generated, and
then stored for later use. Generating this correlated randomness
is typically quite expensive, involving heavy cryptographic
machinery like homomorphic encryption and zero-knowledge
proofs; however, this cost can be mitigated by executing it
ahead of time and in large batches. In contrast, the signing
phase is often relatively simple, with a cost not much larger
than that of signing in the clear.
A. Our Contributions
In this work, we present a new protocol for threshold
ECDSA with silent preprocessing, by building on recent work
on pseudorandom correlation generators (PCGs) [BCG+19b].
In a silent preprocessing phase, the parties ﬁrst interact to
obtain a small amount of correlated randomness, called the
PCG seeds, which can later be locally expanded to produce
a much larger amount of correlated randomness of the right
form. Compared with other approaches, using PCGs allows
for a preprocessing phase with greatly reduced communication
and storage costs among the servers, when amortised over a
large number of signatures.
Furthermore, we can obtain a non-interactive signing phase,
where, after receiving the message to be signed in the on-
line phase, each server only needs to send a single mes-
sage to obtain the digital signature. Similar to previous
works [DOK+20], [CGG+20], we do this by revealing the
message-independent part of the signature in the pre-signing
phase. This requires assuming the enhanced unforgeability
property of ECDSA, namely, that unforgeability still holds
when these nonces are seen in advance (see the discussion
in Section III-C).
We have implemented our protocol, for the simpliﬁed setting
where the PCG seeds are distributed to the servers by a dealer
© 2022, Damiano Abram. Under license to IEEE.
DOI 10.1109/SP46214.2022.00128
2554
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
in a trusted setup phase. This model is meaningful in practical
applications in which, for instance, a client generates its own
ECDSA secret key and then distributes it to a number of
servers. In this case it is meaningful to ask the client to
(also) generate the (short) PCG seeds that will be used in
the protocol.
We also describe a cryptographic protocol that can be used
to replace the dealer, with security against a static, malicious
adversary. but have not implemented this.
B. Technical Overview
1) Background: ECDSA algorithm: Let G be an elliptic
curve group with order q and generator G. Recall that an
ECDSA signature on a message m is a pair (r, s), where r
is the x-coordinate of x · G, for a random nonce x ∈ Fq,
and s = x−1 · (H(m) + r · sk). Here, H is a cryptographic
hash function into Fq, and sk ∈ Fq is the secret key. As
noted in previous work, the reason why turning ECDSA into
a threshold algorithm is challenging is mainly the fact that the
signing algorithm requires computing the inverse of x, which
is a highly non-linear operation.
2) Threshold ECDSA with ECDSA Tuples: We start by
describing a simple, passively secure version of our ECDSA
protocol and the preprocessing material it uses.
Suppose the parties start with an extended variant of addi-
tively secret-shared multiplication triple, that is, each party Pi
has random shares xi, yi, zi, di ∈ Fq, satisfying
zi = x · y,
di = sk · y where x =
xi, y =
yi
i=1
i=1
and where sk is the ECDSA signing key. We denote these
sharings by [x], [y], [z], [d]. (Note, the secret value x will take
the role of the random nonce in the signature.)
i
i
We refer to this correlated randomness setup as an ECDSA
tuple. Such a tuple can be used very easily for threshold
ECDSA, as follows. In the ﬁrst round, the parties can recon-
struct x·G by simply broadcasting the shares xi·G, and adding
these. Then, given the x-coordinate r of x · G, each Pi can
compute shares of
[τ ] := H(m) · [y] + r · [d]
Notice that, since z = xy and d = sk · y, computing τ · z−1
gives the correct s component of the signature. Therefore, to
obtain the signature, it is enough for each party Pi to broadcast
the shares zi and τi in the second round.
The above approach roughly follows the method of Smart
and Talibi [ST19] and Dalskov et al. [DOK+20], who showed
how to perform the signing operation using generic MPC
operations over the ﬁeld Fq. However, by using specialised
ECDSA tuples instead of regular multiplication triples, our
protocol reduces the number of rounds in the preprocessing
phase. We can then obtain different variants for our protocol:
we can get a non-interactive signing phase, with a one-round
pre-signing stage (to open r), or a non-interactive pre-signing
n(cid:88)
n(cid:88)
(cid:88)
(cid:88)
stage (with silent preprocessing) and a two-round online phase.
this can be turned into an amortised
Note moreover that
one-round protocol by performing the pre-signing step for
signature i + 1 (i.e., opening r) together with the i-th signing
phase (i.e., the opening of s).
Active Security: In the above sketch, a corrupt party may
lie about its shares xi · G, zi, τi, violating correctness and
potentially harming security. To mitigate this, [DOK+20] uses
a generic, actively secure MPC protocol, for instance, by en-
hancing the additive secret sharing with information-theoretic
MACs as in the BeDOZa [BDOZ11] and SPDZ [DPSZ12],
[DKL+13] protocols. Unfortunately, for our goal of thresh-
old ECDSA with silent preprocessing, this approach is too
expensive: while there are efﬁcient PCGs for authenticated
multiplication triples [BCG+20], the best construction only
works in the two-party setting, and although this was recently
extended to the multi-party setting, the concrete costs are much
higher [AS21].
Instead of authenticating the entire shared ECDSA tuple,
we observe that this is actually unnecessary, and it is enough
to only authenticate the shares of x. The MACs on x are
used to verify the reconstruction of x · G, while for z and τ,
we allow corrupt parties to introduce errors. We show that
any error in either of these values will always lead to an
abort, which can be reliably detected by verifying the ﬁnal
signature with the ECDSA public key. This simpliﬁcation of
the preprocessing phase allows us to take advantage of efﬁcient
PCG constructions to realise the preprocessing phase with very
low communication costs.
3) Silent Preprocessing: When including the MACs on x,
the complete correlated randomness we need for our ECDSA
tuple is a set of additive sharings over Fq:
[x], [y], [x · y],
[y · sk], (Mi,j, Kj,i)i,j∈[n]
1.
where sk is the ECDSA signing key and (Mi,j, Ki,j) is a
BeDOZa-like MAC on xi w.r.t. Pj’s MAC key αj
To realise the preprocessing phase to produce ECDSA
tuples with low communication, we adopt techniques based
on the LPN and ring-LPN assumptions (and a random oracle
to generate public LPN matrix) which were used previ-
ously to construction PCGs for vector-OLE [BCGI18] and
OLE [BCG+20], respectively. The main technique is a method
of sparse vector compression, which, roughly speaking, allows
for succinctly compressing two-party additive shares of a
sparse vector, using distributed point functions (DPFs). For
a vector of length m with t non-zero coordinates, the size of
the compressed shares is roughly tλ log m bits.
Our approach to compressing ECDSA tuples is to sample
long, sparse vectors ui, vi, for each party Pi, which will
later be used as a seed to expand into pseudorandom vectors
xi, yi ∈ FN
q via the LPN assumption, which will make up
the shares of the x and y values. Note that if ui, vj have
t non-zero coordinates, then the tensor product ui ⊗ vj has
1Mi,j = Ki,j + αj · xi, where Mi,j and xi belong to Pi and Ki,j and
αj are known only to Pj.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
22555
at most t2, and can also be shared between (Pi, Pj) with the
sparse vector compression technique. This then allows the two
parties to locally obtain shares of the component-wise products
of xi and yj, by applying linear maps based on the LPN
assumption. By repeating this between all pairs of parties, we
can obtain secret shares of the x·y values in the ECDSA tuples.
The drawback of this approach is that computing the full
shared tensor product ui ⊗ vj has O(N 2) complexity, which
is prohibitively expensive when N is large. To avoid this cost,
we instead use the ring-LPN based approach from [BCG+20];
this replaces the tensor product with a constant number of
polynomial multiplications over Fq, an O(N log N ) operation,
while relying on a variant of LPN over polynomial rings.