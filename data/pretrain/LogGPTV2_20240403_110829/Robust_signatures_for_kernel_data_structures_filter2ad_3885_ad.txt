### 5.1 Testing the Virtual Machine and Application

To ensure that the virtual machine (VM) and the application are functioning correctly after a modification, we perform the following tests:

1. **Ping Response**: Verify if the VM responds to ping requests.
2. **Port Check**: Confirm that the application is still accepting connections on port 31337.
3. **File Existence**: Use the VMware Tools API to check for the existence of the file written by the application.

If all these tests pass, the function \(\phi\) returns `true`, indicating that the modification did not affect the OS or program functionality. If \(\phi\) returns `false`, it indicates that either the OS has crashed or some aspect of the program associated with our EPROCESS instance has stopped functioning. This result suggests that the OS does not accept arbitrary values for the field, and provides evidence that we can safely build a signature based on this field.

### 5.2 Signature Generation and Evaluation

We generated a signature using the method described in Section 4.3. The features chosen were the 15 most robust, as determined by the fuzzing stage. For each of these fields, we extracted from our corpus of memory images (our training set) a list of the values it contained for all processes found in the image. The four images in the training set were taken from systems running the 32-bit version of Windows XP, Service Pack 2, and were not infected by malware. Processes were located in the memory image by traversing the operating system’s process list, which serves as the "ground truth" for the list of valid process data structures in the absence of maliciously hidden processes.

The signature generator then identified constraints on the observed values and produced a plugin for Volatility that can be used to search for a data structure matching the constraints in a memory image.

### 5.3 Experimental Validation

The generated scan plugin was used to search for processes in several memory images, including two provided by the NIST Computer Forensic Reference Data Sets (CFReDS) project [27] and a paused virtual machine where a process had been hidden by our custom rootkit. We measured the number of false positives and negatives for each test and compared the results against two existing signature-based tools: PTFinder [36] and Volatility’s psscan2 module.

Our custom malware, a slightly modified version of the FU Rootkit [7], hides processes using Direct Kernel Object Manipulation (DKOM) and additionally attempts to evade known process signatures by zeroing non-essential fields in the process data structure. The fields modified, shown in Table 2, were chosen by identifying those fields used by common scanners but deemed unused by the OS according to our initial structure profiling.

### 6. Results

#### 6.1 Profiling

After profiling twenty different applications, we confirmed that some fields in the EPROCESS data structure are rarely accessed. Of the 221 fields, 32 were never accessed during the execution of the profiled programs. Conversely, 72 fields were accessed by every application and are strong candidates for a process signature. The remaining 117 fields were accessed by some programs but not others, as detailed in Figure 6(a).

Among the 32 fields that were never accessed, three are used by PTFinder to locate processes in memory dumps, and four are only accessed by a subset of the profiled programs (Figure 6(b)). Since PTFinder's signature is conjunctive and the attacker can control three of the fields, this signature can be trivially evaded. This demonstrates that human judgment alone may not be sufficient to determine appropriate fields for use in data structure signatures.

#### 6.2 Fuzzing

We fuzzed the 72 fields identified as always accessed using four different data patterns (zero, random, random primitive, and random aggregate), modifying each field five times with each pattern, resulting in 1,440 distinct tests. The overall number of failed tests for each field is shown in Figure 7. Table 3 provides a sample of the fuzzing results, detailing the number of times a given test caused \(\phi\) to return `false`.

We found that there are many essential fields upon which we can base our signature. Five fields failed every attempt at manipulation, and a further 12 failed more than half of the tests. This gives us a set of robust features large enough to minimize false positives.

#### 6.3 Signature Accuracy

Using the list of robust features, our signature generator inferred constraints on the values of each feature. The field values were collected from 184 processes across the four images in our training set, and constraints were inferred using the templates described in Section 5.2, producing the constraints shown in Table 4. The signature generator produced a plugin for Volatility that uses these constraints to search for EPROCESS instances in memory images.

We evaluated the accuracy of three process scanners: our automatically generated scanner, Volatility’s psscan2 module, and PTFinder [36]. Each scanner was used to search for EPROCESS data structures in the three memory images listed in Section 5.2. The output was compared against the OS’s list of running processes (found by walking the linked list of process data structures using Volatility’s pslist module). In the case of the non-NIST image, we also checked for the presence of our hidden process, which was not visible in the standard OS process list.

All three scanners performed equally well on the NIST images, detecting every process data structure with no false positives. However, only our scanner detected the hidden process in the third image, demonstrating that an attacker could potentially evade both psscan2 and PTFinder with minimal effort. Our signature is resistant to evasion by real-world attackers because the features it uses are demonstrably difficult for an attacker to alter.

Additionally, we noted discrepancies between the three scanners regarding terminated processes whose EPROCESS structure was still in memory but had not yet been overwritten. PTFinder and psscan2 found these terminated processes, which our scanner missed. By modifying our scanner to report the result of each constraint for terminated processes, we found that Windows appears to zero the `Token.Object` and `Token.Value` fields when a process exits. Removing these fields from the signature improved the detection of terminated processes without introducing false positives.

### Table 2: Fields Zeroed by Our Modified FU Rootkit
| Field | Used by |
| --- | --- |
| ThreadListHead.Blink | Volatility (psscan2) |
| Pcb.Header.Type | PTFinder |
| Pcb.Header.Size | PTFinder |
| WorkingSetLock.Header.Type | PTFinder |
| WorkingSetLock.Header.Size | PTFinder |
| AddressCreationLock.Header.Type | PTFinder |
| AddressCreationLock.Header.Size | PTFinder |

### Table 3: Selected EPROCESS Fields and Fuzzing Results
| Field | Z | R | P | A | Total |
| --- | --- | --- | --- | --- | --- |
| ActiveProcessLinks.Flink | 20 | 5 | 5 | 18 | 5 |
| Pcb.DirectoryTableBase[0] | 5 | 5 | 5 | 12 | 5 |
| Pcb.ThreadListHead.Flink | 5 | 5 | 5 | 1 | 12 |
| Token.Value | 5 | 5 | 5 | 5 | 5 |
| Token.Object | 5 | 5 | 5 | 5 | 5 |
| VadHint | 5 | 5 | 5 | 5 | 5 |
| UniqueProcessId | 5 | 5 | 5 | 5 | 5 |

### Table 4: Constraints Found for Robust EPROCESS Fields
| Field | Constraint |
| --- | --- |
| Pcb.ReadyListHead.Flink | `val & 0x80000000 == 0x80000000 && val % 0x8 == 0` |
| Pcb.ThreadListHead.Flink | `val & 0x80000000 == 0x80000000 && val % 0x8 == 0` |
| WorkingSetLock.Count | `val == 1 && val & 0x1 == 0x1` |
| Vm.VmWorkingSetList | `val & 0xc0003000 == 0xc0003000 && val % 0x1000 == 0` |
| VadRoot | `val == 0 || (val & 0x80000000 == 0x80000000 && val % 0x8 == 0)` |
| Token.Value | `val & 0xe0000000 == 0xe0000000` |
| AddressCreationLock.Count | `val == 1 && val & 0x1 == 0x1` |
| VadHint | `val == 0 || (val & 0x80000000 == 0x80000000 && val % 0x8 == 0)` |
| Token.Object | `val & 0xe0000000 == 0xe0000000` |
| QuotaBlock | `val & 0x80000000 == 0x80000000 && val % 0x8 == 0` |
| ObjectTable | `val == 0 || (val & 0xe0000000 == 0xe0000000 && val % 0x8 == 0)` |
| GrantedAccess | `val & 0x1f07fb == 0x1f07fb` |
| ActiveProcessLinks.Flink | `val & 0x80000000 == 0x80000000 && val % 0x8 == 0` |
| Peb | `val == 0 || (val & 0x7ffd0000 == 0x7ffd0000 && val % 0x1000 == 0)` |
| Pcb.DirectoryTableBase.0 | `val % 0x20 == 0` |

The operators in the constraints have the same meaning as in C; `%` stands for the modulo operation, and `&` represents bitwise AND. `&&` and `||` are the boolean operators for "and" and "or," respectively.