For example, one browser may assume that, in line with its own security
model, it is safe to pass certain URLs to external applications or to store or
read back certain types of data from disk. For each such assumption, there
likely exists at least one browser that strongly disagrees, expecting other
* The primary seven varieties, as discussed throughout Part II of this book, include the security
policy for JavaScript DOM access; XMLHttpRequest API; HTTP cookies; local storage APIs; and
plug-ins such as Flash, Silverlight, or Java.
16 Chapter 1
parties to follow its rules instead. The exploitability of these issues is greatly
aggravated by vendors’ desire to get their foot in the door and try to allow
web pages to switch to their browser on the fly without the user’s informed
consent. For example, Firefox allows pages to be opened in its browser by
registering a firefoxurl: protocol; Microsoft installs its own .NET gateway plug-
in in Firefox; Chrome does the same to Internet Explorer via a protocol
named cf:.
NOTE Especially in the case of such interactions, pinning the blame on any particular party
isa fool’s errand. In a recent case of a bug related to firefoxurl:, Microsoft and half of
the information security community blamed Mozilla, while Mozilla and the other half
of experts blamed Microsoft.7 It did not matter who was right: The result was still a
very real mess.
Another set of closely related problems (practically unheard of in the
days before the Web) are the incompatibilities in superficially similar security
mechanisms implemented in each browser. When the security models differ,
a sound web application–engineering practice in one product may be inade-
quate and misguided in another. In fact, several classes of rudimentary tasks,
such as serving a user-supplied plaintext file, cannot be safely implemented
in certain browsers at all. This fact, however, will not be obvious to develop-
ers unless they are working in one of the affected browsers—and even then,
theyneed to hit just the right spot.
In the end, all the characteristics outlined in this section contribute to
awhole new class of security vulnerabilities that a taxonomy buff might call a
failure to account for undocumented diversity. This class is very well populated
today.
The Breakdown of the Client-Server Divide
Information security researchers enjoy the world of static, clearly assigned
roles, which are a familiar point of reference when mapping security inter-
actions in the otherwise complicated world. For example, we talk about Alice
and Bob, two wholesome, hardworking users who want to communicate, and
Mallory, a sneaky attacker who is out to get them. We then have client software
(essentially dumb, sometimes rogue I/O terminals that frivolously request
services) and humble servers, carefully fulfilling the clients’ whim. Develop-
ers learn these roles and play along, building fairly comprehensible and test-
able network-computing environments in the process.
The Web began as a classical example of a proper client-server architec-
ture, but the functional boundaries between client and server responsibilities
were quickly eroded. The culprit is JavaScript, a language that offers the HTTP
servers a way to delegate application logic to the browser (“client”) side and
gives them two very compelling reasons to do so. First, such a shift often
results in more responsive user interfaces, as servers do not need to synchro-
nously participate in each tiny UI state change imaginable. Second, server-
side CPU and memory requirements (and hence service-provisioning costs)
can decrease drastically when individual workstations across the globe chip
in to help with the bulk of the work.
Security in the World of Web Applications 17
The client-server diffusion process began innocently enough, but it
wasonly a matter of time before the first security mechanisms followed to the
client side too, along with all the other mundane functionality. For example,
what was the point of carefully scrubbing HTML on the server side when the
data was only dynamically rendered by JavaScript on the client machine?
In some applications, this trend was taken to extremes, eventually leav-
ing the server as little more than a dumb storage device and moving almost
all the parsing, editing, display, and configuration tasks into the browser
itself. In such designs, the dependency on a server could even be fully sev-
ered by using offline web extensions such as HTML5 persistent storage.
A simple shift in where the entire application magic happens is not
necessarily a big deal, but not all security responsibilities can be delegated to
the client as easily. For example, even in the case of a server acting as dumb
storage, clients cannot be given indiscriminate access to all the data stored
on the server for other users, and they cannot be trusted to enforce access
controls. In the end, because it was not desirable to keep all the application
security logic on the server side, and it was impossible to migrate it fully to the
client, most applications ended up occupying some arbitrary middle ground
instead, with no easily discernible and logical separation of duties between
the client and server components. The resulting unfamiliar designs and
application behaviors simply had no useful equivalents in the elegant and
wholesome world of security role-play.
The situation has resulted in more than just a design-level mess; it has
led to irreducible complexity. In a traditional client-server model with well-
specified APIs, one can easily evaluate a server’s behavior without looking
atthe client, and vice versa. Moreover, within each of these components, it
ispossible to easily isolate smaller functional blocks and make assumptions
about their intended operation. With the new model, coupled with the
opaque, one-off application APIs common on the Web, these analytical
tools,and the resulting ease of reasoning about the security of a system,
havebeen brutally taken away.
The unexpected failure of standardized security modeling and testing
protocols is yet another problem that earns the Web a very special—and
scary—place in the universe of information security.
18 Chapter 1
Global browser market share, May 2011
Vendor Browser Name Market Share
Microsoft Internet Explorer 6 10%
Internet Explorer 7 7%
52%
Internet Explorer 8 31%
Internet Explorer 9 4%
Mozilla Firefox 3 12%
22%
Firefox 4+ 10%
Google Chrome 13%
Apple Safari 7%
Opera Software Opera 3%
Source: Data drawn from public Net Applications reports.1
PART I
A N A T O M Y O F T H E W E B
The first part of this book focuses on the principal
concepts that govern the operation of web browsers,
namely, the protocols, document formats, and pro-
gramming languages that make it all tick. Because all
the familiar, user-visible security mechanisms employed
in modern browsers are profoundly intertwined with
these inner workings, the bare internals deserve a fair
bit of attention before we wander off deeper into the
woods.
I T S T A R T S W I T H A U R L
The most recognizable hallmark of the Web is a simple
text string known as the Uniform Resource Locator (URL).
Each well-formed, fully qualified URL is meant to con-
clusively address and uniquely identify a single resource
on a remote server (and in doing so, implement a cou-
ple of related, auxiliary functions). The URL syntax is
the cornerstone of the address bar, the most important
user interface (UI) security indicator in every browser.
In addition to true URLs used for content retrieval, several classes of
pseudo-URLs use a similar syntax to provide convenient access to browser-level
features, including the integrated scripting engine, several special document-
rendering modes, and so on. Perhaps unsurprisingly, these pseudo-URL
actions can have a significant impact on the security of any site that decides
to link to them.
The ability to figure out how a particular URL will be interpreted by the
browser, and the side effects it will have, is one of the most basic and com-
mon security tasks attempted by humans and web applications alike, but it can
be a problematic one. The generic URL syntax, the work of Tim Berners-Lee,
is codified primarily in RFC 3986;1 its practical uses on the Web are outlined
in RFCs 1738,2 2616,3 and a couple of other, less-significant standards. These
documents are remarkably detailed, resulting in a fairly complex parsing
model, but they are not precise enough to lead to harmonious, compatible
implementations in all client software. In addition, individual software ven-
dors have chosen to deviate from the specifications for their own reasons.
Let’s have a closer look at how the humble URL works in practice.
Uniform Resource Locator Structure
Figure 2-1 shows the format of a fully qualified absolute URL, one that specifies
all information required to access a particular resource and that does not
depend in any way on where the navigation began. In contrast, a relative URL,
such as ../file.php?text=hello+world, omits some of this information and must
be interpreted in the context of a base URL associated with the current
browsing context.
scheme://login.password@address:port/path/to/resource?query_string#fragment
 Scheme/protocol name
 Indicator of a hierarchical URL (constant)
 Credentials to access the resource (optional)
 Server to retrieve the data from “Authority”
 Port number to connect to (optional)
 Hierarchical Unix path to a resource
 “Query string” parameters (optional)
 “Fragment identifier” (optional)
Figure 2-1: Structure of an absolute URL
The segments of the absolute URL seem intuitive, but each comes with
aset of gotchas, so let’s review them now.
Scheme Name
The scheme name is a case-insensitive string that ends with a single colon,
indicating the protocol to be used to retrieve the resource. The official
registry of valid URL schemes is maintained by the Internet Assigned Numbers
Authority (IANA), a body more widely known for its management of the IP
address space.4 IANA’s current list of valid scheme names includes several
dozen entries such as http:, https:, and ftp:; in practice, a much broader set of
schemes is informally recognized by common browsers and third-party appli-
cations, some which have special security consequences. (Of particular inter-
est are several types of pseudo-URLs, such as data: or javascript:, as discussed
later in this chapter and throughout the remainder of this book.)
24 Chapter 2
Before they can do any further parsing, browsers and web applications
need to distinguish fully qualified absolute URLs from relative ones. The
presence of a valid scheme in front of the address is meant to be the key
difference, as defined in RFC 1738: In a compliant absolute URL, only the
alphanumerics “+”, “-”, and “.” may appear before the required “:”. In prac-
tice, however, browsers deviate from this guidance a bit. All ignore leading
newlines and white spaces. Internet Explorer ignores the entire nonprintable
character range of ASCII codes 0x01 to 0x1F. Chrome additionally skips 0x00,
the NUL character. Most implementations also ignore newlines and tabs in the
middle of scheme names, and Opera accepts high-bit characters in the string.
Because of these incompatibilities, applications that depend on the abil-
ity to differentiate between relative and absolute URLs must conservatively
reject any anomalous syntax—but as we will soon find out, even this is not
enough.
Indicator of a Hierarchical URL
In order to comply with the generic syntax rules laid out in RFC 1738, every
absolute, hierarchical URL is required to contain the fixed string “//” right
before the authority section. If the string is missing, the format and function
of the remainder of the URL is undefined for the purpose of that specifica-
tion and must be treated as an opaque, scheme-specific value.
NOTE An example of a nonhierarchical URL is the mailto: protocol, used to specify
emailaddresses and possibly a subject line (mailto:PI:EMAIL?subject=
Hello+world). Such URLs are passed down to the default mail client without making
any further attempt to parse them.
The concept of a generic, hierarchical URL syntax is, in theory, an ele-
gant one. It ought to enable applications to extract some information about
the address without knowing how a particular scheme works. For example,
without a preconceived notion of the wacky-widget: protocol, and by applying
the concept of generic URL syntax alone, the browser could decide that
http://example.com/test1/ and wacky-widget://example.com/test2/ reference the
same, trusted remote host.
Regrettably, the specification has an interesting flaw: The aforementioned
RFC says nothing about what the implementer should do when encountering
URLs where the scheme is known to be nonhierarchical but where a “//”
prefix still appears, or vice versa. In fact, a reference parser implementation
provided in RFC 1630 contains an unintentional loophole that gives a counter-
intuitive meaning to the latter class of URLs. In RFC 3986, published some
years later, the authors sheepishly acknowledge this flaw and permit imple-
mentations to try to parse such URLs for compatibility reasons. As a conse-
quence, many browsers interpret the following examples in unexpected ways:
 http:example.com/ In Firefox, Chrome, and Safari, this address may be
treated identically to http://example.com/ when no fully qualified base
URL context exists and as a relative reference to a directory named
example.com when a valid base URL is available.
It Starts with a URL 25
 javascript://example.com/%0Aalert(1) This string is interpreted as a valid
nonhierarchical pseudo-URL in all modern browsers, and the JavaScript
alert(1) code will execute, showing a simple dialog window.
 mailto://PI:EMAIL Internet Explorer accepts this URL as a valid
nonhierarchical reference to an email address; the “//” part is simply
skipped. Other browsers disagree.
Credentials to Access the Resource
The credentials portion of the URL is optional. This location can specify a
username, and perhaps a password, that may be required to retrieve the data
from the server. The method through which these credentials are exchanged
is not specified as a part of the abstract URL syntax, and it is always protocol
specific. For those protocols that do not support authentication, the behav-
ior of a credential-bearing URL is simply undefined.
When no credentials are supplied, the browser will attempt to fetch the
resource anonymously. In the case of HTTP and several other protocols, this
means not sending any authentication data; for FTP, it involves logging into
a guest account named ftp with a bogus password.
Most browsers accept almost any characters, other than general URL
section delimiters, in this section with two exceptions: Safari, for unclear rea-
sons, rejects a broader set of characters, including “”, “{”, and “}”, while
Firefox also rejects newlines.*
Server Address
For all fully qualified hierarchical URLs, the server address section must spec-
ify a case-insensitive DNS name (such as example.com), a raw IPv4 address (such
as 127.0.0.1), or an IPv6 address in square brackets (such as [0:0:0:0:0:0:0:1]),
indicating the location of a server hosting the requested resource. Firefox
will also accept IPv4 addresses and hostnames in square brackets, but other
implementations reject them immediately.
Although the RFC permits only canonical notations for IP addresses, stan-
dard C libraries used by most applications are much more relaxed, accepting
noncanonical IPv4 addresses that mix octal, decimal, and hexadecimal nota-
tion or concatenate some or all of the octets into a single integer. As a result,
the following options are recognized as equivalent:
 http://127.0.0.1/ This is a canonical representation of an IPv4 address.
 http://0x7f.1/ This is a representation of the same address that uses a
hexadecimal number to represent the first octet and concatenates all the
remaining octets into a single decimal value.
 http://017700000001/ The same address is denoted using a 0-prefixed
octal value, with all octets concatenated into a single 32-bit integer.
* This is possibly out of the concern for FTP, which transmits user credentials without any
encoding; in this protocol, a newline transmitted as is would be misinterpreted by the server
asthe beginning of a new FTP command. Other browsers may transmit FTP credentials in
noncompliant percent-encoded form or simply strip any problematic characters later on.
26 Chapter 2
A similar laid-back approach can be seen with DNS names. Theoretically,
DNS labels need to conform to a very narrow character set (specifically, alpha-
numerics, “.”, and “-”, as defined in RFC 10355), but many browsers will happily
ask the underlying operating system resolver to look up almost anything, and
the operating system will usually also not make a fuss. The exact set of charac-
ters accepted in the hostname and passed to the resolver varies from client to
client. Safari is most rigorous, while Internet Explorer is the most permissive.
Perhaps of note, several control characters in the 0x0A–0x0D and 0xA0–0xAD
ranges are ignored by most browsers in this portion of theURL.
NOTE One fascinating behavior of the URL parsers in all of the mainstream browsers is their
willingness to treat the character “ ” (ideographic full stop, Unicode point U+3002)
identically to a period in hostnames but not anywhere else in the URL. This is report-
edly because certain Chinese keyboard mappings make it much easier to type this symbol
than the expected 7-bit ASCII value.
Server Port
This server port is an optional section that describes a nonstandard network
port to connect to on the previously specified server. Virtually all application-
level protocols supported by browsers and third-party applications use TCP
or UDP as the underlying transport method, and both TCP and UDP rely on
16-bit port numbers to separate traffic between unrelated services running
on a single machine. Each scheme is associated with a default port on which
servers for that protocol are customarily run (80 for HTTP, 21 for FTP, and
so on), but the default can be overridden at the URL level.
NOTE An interesting and unintended side effect of this feature is that browsers can be tricked
into sending attacker-supplied data to random network services that do not speak the
protocol the browser expects them to. For example, one may point a browser to http://
mail.example.com:25/, where 25 is a port used by the Simple Mail Transfer Protocol
(SMTP) service rather than HTTP. This fact has caused a range of security problems
and prompted a number of imperfect workarounds, as discussed in more detail in
PartII of this book.
Hierarchical File Path