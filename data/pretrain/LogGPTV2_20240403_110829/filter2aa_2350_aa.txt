# Investigating PowerShell Attacks

**Presented by:**
© Mandiant, A FireEye Company. All rights reserved.

**DefCon 22, 2014**
August 8, 2014
Ryan Kazanciyan, Matt Hastings

## Background Case Study

- **Client**: Fortune 100 organization
- **Compromise Duration**: Over 3 years
- **Environment**:
  - Active Directory
  - Authenticated access to corporate VPN
  - Command-and-control via various protocols
  - Scheduled tasks
  - Local execution of PowerShell scripts
  - PowerShell Remoting

**Network and Hosts Involved:**
- **Attacker** connects to the **Victim** through a **VPN**.
- **Protocols Used**: WinRM, SMB, NetBIOS
- **Targets**: Victim workstations and servers

## Why PowerShell?

PowerShell is a versatile tool that can perform a wide range of actions, including:
- Executing commands
- Reflectively loading or injecting code
- Downloading files from the internet
- Enumerating files
- Interacting with the registry
- Managing services
- Examining processes
- Retrieving event logs
- Accessing the .NET framework
- Interfacing with the Win32 API

## PowerShell Attack Tools

- **PowerSploit**: 
  - Reconnaissance
  - Code execution
  - DLL injection
  - Credential harvesting
  - Reverse engineering
- **Nishang**: 
  - Various PowerShell-based attack modules
- **Posh-SecMod**: 
  - Security and penetration testing tools
- **Veil-PowerView**: 
  - Obfuscation and evasion techniques
- **Metasploit**: 
  - Integration with PowerShell for exploitation
- **More to come...**

## PowerShell Malware in the Wild

[Insert details about specific malware samples and their characteristics]

## Investigation Methodology

### Sources of Evidence
- **Local PowerShell Script (evil.ps1)**
- **Persistent PowerShell Backdoor (backdoor.ps1)**
- **Registry**
- **File System**
- **Event Logs**
- **Memory**
- **Network Traffic**
- **WinRM and PowerShell Remoting**

### Attacker Assumptions
- The attacker has administrative (local or domain) privileges on the target system.
- The attacker has network access to the necessary ports on the target system.
- The attacker can use other remote command execution methods to:
  - Enable the execution of unsigned PowerShell scripts
  - Enable PowerShell remoting

## Version Reference

| Windows Version | Default PowerShell Version |
|-----------------|----------------------------|
| 2.0             | 2.0                        |
| 3.0 (R2)        | 3.0                        |
| 4.0 (SP1)       | 4.0                        |
| 4.0 (R2 SP1)    | 4.0                        |
| Requires WMF 4.0 Update | 4.0                       |
| Requires WMF 3.0 Update | 3.0                       |

## Memory Analysis

- **What remains in memory?**
- **How to find it?**
- **How long does it persist?**

### Scenario
- **Attacker interacts with the target host through PowerShell remoting.**

### WinRM Process Hierarchy
- **Client**:
  - `wsmprovhost.exe` (invokes `c:\evil.exe`)
- **Victim**:
  - `svchost.exe` (DcomLaunch)
  - `wsmprovhost.exe` (executes PS code)
  - `evil.exe`
  - `Invoke-Command` (e.g., `Get-ChildItem C:\`, `Invoke-Mimikatz.ps1 -DumpCreds –ComputerName “victim"`)

### Remnants in Memory
- **Processes**:
  - `wsmprovhost.exe`
  - `svchost.exe` (DcomLaunch)
  - `evil.exe`
  - `svchost.exe` (WinRM)
- **Remnants**:
  - WinRM SOAP messages
  - Command history
  - Kernel memory
  - Pagefile

### How Long Will Evidence Remain?
- **Retention**:
  - Single remoting session: End of session
  - Multiple sessions: Varies with number of sessions
  - Memory utilization: Varies with usage
  - Max Lifetime: Reboot
  - Fragments may persist beyond reboot

### Example: In-Memory Remnants
- **SOAP in WinRM service memory** after an interactive PsSession with the command: `echo teststring_pssession > c:\testoutput_possession.txt`
- **WinRM service memory** after executing `Invoke-Mimikatz.ps1` remotely on the target host

### What to Look For?
- **WSMan & MS PSRP Syntax**
- **Known attacker filenames**
- **Context around hits**
- **Example**: 
  ```xml
  <rsp:Command xmlns:rsp="http://schemas.microsoft.com/wbem/wsman/1/windows/shell">C80927B1-C741-4E99-9F97-CBA80F23E595prompt</rsp:Command>
  ```

### Memory Analysis Summary
- **Timing is crucial**
- **Challenging to recover evidence**
- **Many variables**:
  - System uptime
  - Memory utilization
  - Volume of WinRM activity

## Event Logs

- **Which event logs capture activity?**
- **Level of logging detail?**
- **Differences between PowerShell 2.0 and 3.0?**

### Scenario
- **Attacker interacts with the target host through local PowerShell script execution or PowerShell remoting.**

### PowerShell Event Logs
- **Application Logs**:
  - `Windows PowerShell.evtx`
  - `Microsoft-Windows-PowerShell/Operational.evtx`
  - `Microsoft-Windows-WinRM/Operational.evtx`
- **Analytic Logs**:
  - `Microsoft-Windows-PowerShell/Analytic.etl`
  - `Microsoft-Windows-WinRM/Analytic.etl`

### Local PowerShell Execution
- **Event ID 400**: Engine state changes from None to Available.
- **Event ID 403**: Engine state changes from Available to Stopped.
- **Event ID 40961**: PowerShell console starts up.
- **Event ID 4100**: Error message indicating a script cannot be loaded.
- **Event ID 7937**: Command execution starts.

© Mandiant, A FireEye Company. All rights reserved.