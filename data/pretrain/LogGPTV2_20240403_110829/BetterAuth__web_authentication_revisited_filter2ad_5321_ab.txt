attaches the target domain’s cookies to all HTTP requests
that are created this way. This circumstance leads to an
attack vector known as Cross-site Request Forgery (CSRF):
It is possible for any Web site which is rendered in the user’s
browser to send authenticated HTTP requests to all other
Web sites, which currently maintain an authentication con-
text with the browser.
To prevent third parties abusing this capability to initiate
state-changing actions under the user’s identity, the devel-
oper has to protect all sensitive interfaces of his application.
This can be done either using secret nonces [33] or through
strict checking of the origin request header [3].
Clickjacking: While being only partially related to au-
thentication tracking, Clickjacking [15] (also known as “UI
Redressing”) is a class of attacks in the CSRF family. Click-
jacking exploits the fact, that due to the cookie rules, for-
eign sites can load authenticated, crossdomain content into
iframes. Using cascading style sheets, these iframes can
be hidden from the user (e.g, by making them completely
transparent) and, thus, the user can be tricked to interact
with them via clicks or drag’n’drop.
To protect users from such attacks, the developer has to
utilize JavaScript framebusting code [35] or the X-Frame-
Options response header [27].
2.2.3 Phishing
A further serious threat is known by the term “Phish-
ing” [30]. Phishing attacks aim to steal the user’s password
through simple decoy: A site under the control of the at-
tacker imitates domain name and design of the target Web
site. The user is tricked to enter his password into the forged
site under the assumption that he interacts with the legit-
imate application. As HTTP transports the password in
cleartext to the communication partner, the attacker is able
to obtain and abuse it. A similar approach is followed by
“Pharming” [39], a variant of phishing, which utilizes com-
promised DNS responses.
Due to its social engineering component, there is no straight
forward technical solution to combat phishing, as long as the
passwords are still sent over the wire. To mitigate the threat,
browsers currently check visited URLs for known phishing
sites and warn if such a page is accessed [14].
2.3 Summary
To sum the up the previous sections: The current praxis
of Web application authentication and authentication track-
ing is secure if (and only if) the following holds:
• The password is transmitted over an uncompromised
SSL/TLS connection in which the authenticity of the
Web server has been veriﬁed. This requires among oth-
ers robust defense against SSL-stripping attacks [26],
e.g., utilizing the HSTS HTTP response header [17].
171
read access by the HTTPonly cookie attribute [28].
• All further requests, both belonging to the current ses-
sion as well as all future sessions, are transmitted over
an uncompromised SSL/TLS connection, as long as
the authenticated cookie is valid.
• The authenticated cookie is secured against JavaScript
• The value of the authenticated cookie is changed ev-
ery time the authorization level of the user changes to
combat potential session ﬁxation vulnerabilities [21].
• State-changing interfaces are secured against CSRF
using server-side checking of security nonces [33] or
strict enforcement of matching origin HTTP response
header [3].
• UI redressing attacks are avoided by framing preven-
tion [27, 35].
All these measures have to be explicitly introduced and are
realized at diﬀerent positions and abstraction levels within
the application architecture, spanning from securing the low-
level transport layer via SSL to application layer anti-CSRF
prevention (see Table 1 for an overview). Furthermore, even
mitigation measures that are positioned at the same level
within the application architecture often have to be imple-
mented at separate places in the application’s code.
And even if all these factors hold, the basic interaction
pattern is still susceptible to phishing attacks, as the current
scheme requires sending the password to the server as part
of each login process.
3. PROTOCOL DESIGN
As discussed above, the current state exposes numerous
In this section, we present Better-
security shortcomings.
Auth, an improved password scheme which is tailored to the
Web’s inherent characteristics and addresses the identiﬁed
problems of the current scheme.
3.1 Design goals
Before we explain the technical aspects of BetterAuth, we
brieﬂy state our design goals:
Secure by default: BetterAuth is designed to mitigate the
weaknesses of the current approach (see Sec. 2). In particu-
lar, these security goals are realized without explicit enabling
steps by the developer.
No mandatory reliance on non-existing browser features:
BetterAuth is designed in a fashion that allows an imple-
mentation for today’s browsers. This allows an immediate
deployment without the need to wait for browser vendors to
implement native support.
No security regression: Regardless of the form of imple-
mentation (browser-based or pure JavaScript), BetterAuth
has to be at least as secure as the current approach. This
means a (re-)introduction of security problems, which are
not currently present, is not acceptable.
3.2 High-level overview
Our proposed scheme consists of two steps, implemented
as subprotocols:
An initial mutual authentication protocol with integrated
key negotiation: The browser and the server both prove
their knowledge of the password and jointly generate a per-
session, shared secret which is used for further authentica-
tion tracking.
And an authentication tracking scheme which is based on
request signing: Every further request from the browser to
the server is signed using the freshly generated shared se-
cret, if the request satisﬁes certain criteria (see Sec. 3.5 for
details). Only requests with such a signature are regarded
by the server as authenticated.
In the following sections, we give details on the realization
of the two subprotocols.
3.3 Initial mutual authentication
As motivated above, one of BetterAuth’s pillars is a mu-
tual authentication step, which results in a shared crypto-
graphic session key. Such mutual authentication schemes
have received considerable attention in the past. In the given
scenario both parties already share a textual secret (i.e., the
password). Hence, a suiting choice for this task is a mem-
ber of the password authenticated key exchange (PAKE)
family [12]. PAKE protocols utilize well established cryp-
tographic building blocks, such as the Diﬃe-Hellman key
creation, and protect the communication against active net-
work attackers using the pre-shared password.
While various protocols match our requirements, we se-
lected [32] for our implementation, a scheme which is cur-
rently under active standardization by the IETF and, thus,
has the potential for future adoption by the browser vendors.
The protocol works as follows (see Figs. 1 and 2):
1. Initial Handshake: The browser sends a request tar-
geted at the restricted resource. Along with this re-
quest, it sends the user’s ID (UID, e.g., the user name).
This causes the server to create the server-side partial
key (SPK) for the Diﬃe-Hellmann key generation. The
value is encrypted with the password1, which has been
set for the given UID.
2. Key exchange: The encrypted SPK is sent back to the
browser as part of a 401 response. The browser creates
the client-side Diﬃe-Hellmann partial key (BPK). The
browser is now able to calculate the session key SSK
using SPK and BPK. In addition BPK is encrypted
with the password and added to the next request to
the server.
3. Mutual authentication: The browser signs (see Sec. 3.4)
the BPK carrying request using SSK. The server re-
ceives the request, calculates SSK himself and veriﬁes
the request signature. As the browser can only cor-
rectly compute SSK, if it knows the password, the cor-
rectness of the signature is used as authentication proof
by the server. Hence, the server sends the restricted
resource to the browser. Furthermore, the server also
signs the response using SSK, to let the browser verify
the server’s knowledge of the password.
3.4 Request Signing
After the ﬁrst protocol step has concluded successfully,
both parties share a fresh symmetric key SSK, which from
now on will serve as the basis for authentication tracking.
Our authentication tracking mechanism is realized by
HMACs [24], a well established Message Authentication Code
scheme which utilizes cryptographic hash functions.
The client attaches an HMAC-based signature to all fur-
ther requests to the server which satisfy the criteria given in
Sec. 3.5, closely mimicking the current practice of automat-
ically adding cookie headers to outgoing requests. For GET
requests, the URL in a normalized form and selected request
1NB: This step can also be done with salted passwords.
172
(cid:3)(cid:24)(cid:23)(cid:31)(cid:25)(cid:16)(cid:24)(cid:1)
(cid:10)(cid:16)(cid:24)(cid:30)(cid:16)(cid:24)(cid:1)
(cid:2)(cid:11)(cid:9)(cid:14)(cid:12)(cid:7)(cid:11)(cid:1)
(cid:4)(cid:7)(cid:11)(cid:13)(cid:7)(cid:11)(cid:1)
(cid:6)(cid:4)(cid:11)(cid:1)(cid:4)(cid:3)(cid:2)(cid:1)
(cid:6)(cid:4)(cid:11)(cid:1)(cid:4)(cid:3)(cid:2)(cid:1)
(cid:39)(cid:36)(cid:37)(cid:1)(cid:12)(cid:22)(cid:13)(cid:29)(cid:26)(cid:18)(cid:23)(cid:24)(cid:19)(cid:34)(cid:16)(cid:15)(cid:1)(cid:1)
(cid:38)(cid:36)(cid:36)(cid:1)(cid:5)(cid:23)(cid:29)(cid:22)(cid:15)(cid:1)
(cid:1)
(cid:8)
(cid:16)
(cid:33)
(cid:16)
(cid:32)
(cid:14)
(cid:18)
(cid:13)
(cid:22)
(cid:17)
(cid:16)
(cid:1)
(cid:9)(cid:4)(cid:3)(cid:18)(cid:1)(cid:6)(cid:10)(cid:1)
(cid:9)(cid:4)(cid:3)(cid:1)
(cid:6)(cid:10)(cid:1)
(cid:12)(cid:15)(cid:11)(cid:19)(cid:8)(cid:6)(cid:5)(cid:20)(cid:6)(cid:10)(cid:1)(cid:1)
(cid:12)(cid:15)(cid:11)(cid:19)(cid:2)(cid:6)(cid:5)(cid:20)(cid:6)(cid:10)(cid:16)(cid:1)(cid:7)(cid:12)(cid:16)(cid:8)(cid:14)(cid:13)(cid:1)
(cid:7)(cid:12)(cid:17)(cid:8)(cid:14)(cid:13)(cid:18)(cid:1)(cid:3)(cid:7)(cid:12)(cid:10)(cid:9)(cid:8)(cid:12)(cid:7)(cid:1)(cid:5)(cid:9)(cid:6)(cid:15)(cid:1)(cid:1)
(cid:1)
(cid:16)
(cid:20)
(cid:13)
(cid:18)
(cid:25)
(cid:15)
(cid:22)
(cid:13)
(cid:7)
(cid:1)
(cid:21)
(cid:13)
(cid:29)
(cid:26)
(cid:29)
(cid:9)
(cid:1)
(cid:22)
(cid:23)
(cid:27)
(cid:13)
(cid:14)
(cid:27)
(cid:22)
(cid:16)
(cid:18)
(cid:26)
(cid:29)
(cid:2)
Figure 1: Initial auth. (HTTP communication)
Figure 2: Initial auth. (cryptographic values)
headers are signed, for POST requests, also the POST pa-
rameters are included in the signature. Only requests, for
which the server can successfully validate the correctness
of the HMAC are recognized to be properly authenticated.
This way, both the authenticity as well as the integrity of
the received requests are ensured.
3.5 Context-Dependent Authentication
As discussed in Sec. 2.2.2, several security problems - most
notably Cross-Site Request Forgery - are caused by the fact
that currently all requests that originate from an authenti-
cated browser are automatically equipped with the authen-
tication credentials, i.e., the authentication cookies.
Our approach breaks from this troublesome behavior and
instead only signs outgoing requests if the request’s origin,
i.e. the Web page which initiated the request, is already in
an authenticated state with the server. Hence, we enforce
in-application authentication tracking. All requests that are
generated in the browser from outside of the Web applica-
tion, i.e., from third party Web sites, are not signed and, in
consequence, not treated as authenticated by the server.
3.6 Public Interfaces
social Web bookmarking services,
While a strict enforcement of context-dependent authenti-
cation would provide robust security guarantees, it is too in-
ﬂexible to cater to all existing usage patterns of the Web. For
example,
such as
delicious.com provide one-click interfaces to add book-
marks from external pages. Such requests need to be pro-
cessed in the user’s authentication context, as they commit
state changing actions to the user’s data. However, as they
are generated from outside of the Web application’s authen-
tication context, they would not receive a signature. There-
fore, to enable such scenarios, our approach supports the
declaration of public interfaces. Such a public interface is a
URL for which the server opts in to receive authenticated
requests, even if they originate from outside of the applica-
tion’s authentication context. A Web application’s public
interfaces, if they exist, are communicated to the browser
during the initial key exchange using a simple policy for-
mat.
3.7 Resulting Authentication Tracking Logic
In consequence, the decision process which requests to sign
works as follows:
1. Test: Check that the target URL of the request points
to a domain, for which currently a valid BetterAuth
authentication context exists. Such a context exists, if
in the key storage a valid SSKapp key could be found,
which is assigned to the domain value and that has not
yet expired.
This means, check:
2. Test: Verify that the request is entitled to be signed.
• Was the request generated within the application?
This means that the HTML element which was re-
sponsible for creating the request (e.g. hyperlink-
navigation, form submission, or JavaScript ac-
tion) is rendered within the browser in the origin
of the authenticated application.
• Or, is the target of the request contained in the
applications’s list of public interfaces?
3. Action: Normalize the request data (Method, URL,
selected HTTP headers, request body) and create an
HMAC signature using SSKapp as signature key.
4. Action: Attach the resulting request signature in an
Authorization header to the request.
4.
IMPLEMENTATION
In this section, we present our experiences on practically
implementing BetterAuth. We created two diﬀerent client-
side implementations: For one, we built a Firefox browser
extension in order to be able to assess how applications
would behave, if the BetterAuth-protocol was implemented
as a native part of the Web browser (see Sec. 4.1). Further-
more, we implemented BetterAuthcompletely in standard
JavaScript (see Sec. 4.2). Using this implementation, Web
applications could utilize the protocol during a transitional
phase, in which only a subset of browsers support the ap-
proach natively.
4.1 Native Implementation
As mentioned above, we approximated a native browser
implementation by realizing our approach in the form of a
Firefox extension. The extension hooks itself as an observer
into the browser’s rendering process and monitors the out-