# Title: Extract Me If You Can: Abusing PDF Parsers in Malware Detectors

## Authors:
- Curtis Carmony, Syracuse University
- Xunchao Hu, Syracuse University
- Heng Yin, Syracuse University
- Abhishek Vasisht Bhaskar, Syracuse University
- Mu Zhang, NEC Laboratories America and Syracuse University

## Abstract
Due to the widespread use of the PDF format and the continued exploitation of Adobe Reader, detecting malicious PDFs remains a significant concern. Current detection techniques rely on PDF parsers, but the complexity of the PDF format leaves ample room for parser confusion. To quantify the differences between these parsers and Adobe Reader, we developed a reference JavaScript extractor by directly interfacing with Adobe Reader using an automated binary analysis technique. By comparing the output of this reference extractor with several open-source JavaScript extractors on a large dataset from VirusTotal, we identified hundreds of samples that existing extractors fail to correctly process. Analyzing these samples revealed several weaknesses in each of the extractors. Based on these findings, we applied various obfuscations to a malicious PDF sample, which successfully evaded all tested malware detectors. We term this evasion technique a "PDF parser confusion attack." Finally, we demonstrate that our reference JavaScript extractor improves the accuracy of existing JavaScript-based classifiers and can be used to mitigate parser limitations in real-world settings.

## 1. Introduction
Despite the increased security measures in Adobe Reader, such as the sandbox [5], new exploits continue to be discovered, with 44 CVEs published in 2014 [1] and 128 in 2015 [2]. The ubiquity of the PDF format and the ongoing exploitation of Adobe Reader make the detection of malicious PDFs a critical issue. Kaspersky reported that Adobe Reader was the third most exploited target in 2014, accounting for 5% of overall attacks [18].

Commercial anti-virus products often rely on signature detection, which is insufficient for zero-day exploits or advanced persistent threats. Two classes of systems have been proposed to address this: 1) structure and metadata-based detectors [29, 32, 38] and 2) JavaScript-based classifiers [23, 25, 37, 26].

### 1.1 Background
#### 1.1.1 Metadata and Structural Features Based Detection
Signature-based detection methods are vulnerable to polymorphism [16, 17, 34]. Therefore, systems like PDF Malware Slayer [29] and PDFrate [32] use structural features and metadata to classify PDFs. However, these methods can be easily evaded by mimicry attacks [39, 38] and reverse mimicry attacks [28], which hide malicious code in files that exhibit benign structural features.

#### 1.1.2 JavaScript Based Detection
JavaScript is the most common malicious content in PDFs due to vulnerabilities in the Adobe JavaScript APIs and its use in advanced exploitation techniques [23]. Prior work has focused on parsing PDFs to extract and analyze embedded JavaScript. However, these methods are limited by their reliance on incomplete and oversimplified parsers. For example, Liu et al. [25] and MDScan [37] only associate JavaScript with specific keywords and do not account for various encoding methods. PJScan [23] uses a third-party parser, Poppler [10], which does not fully implement the Adobe Reader specifications.

### 1.2 Contributions
This paper makes the following contributions:
- **Automated Tap Point Identification**: We propose a mostly-automatic, platform-independent technique to identify tap points related to JavaScript parsing and execution in Adobe Reader, enabling the development of a reference JavaScript extractor.
- **Systematic Evaluation**: Using our reference extractor, we systematically evaluate the shortcomings of existing JavaScript extraction tools, identifying hundreds of PDF samples (both benign and malicious) that existing extractors fail to process. We manually investigate many of these samples to identify root causes.
- **PDF Parser Confusion Attacks**: We construct several PDF parser confusion attacks by combining obfuscations identified in our analysis. These evasions effectively evade all tested malware detectors.
- **Mitigation Techniques**: We discuss several mitigation techniques, demonstrating that our reference JavaScript extractor significantly increases the detection rate of an existing classifier from 68% to 96% on our sample set. We also present a possible deployment scenario for the reference extractor.

We plan to release the complete dataset and launch a public service for our reference JavaScript extractor to support further research. A list of MD5 hash values for part of the dataset is available at https://goo.gl/qtbuOC.

## 2. Background
### 2.1 Metadata and Structural Features Based Detection
Signature-based detection methods are susceptible to polymorphism [16, 17, 34]. Systems like PDF Malware Slayer [29] and PDFrate [32] use structural features and metadata for classification. However, these methods are fundamentally susceptible to evasion through mimicry and reverse mimicry attacks [38, 39, 28].

### 2.2 JavaScript Based Detection
Prior work has focused on extracting and analyzing embedded JavaScript. Liu et al. [25] and MDScan [37] have limitations in their JavaScript extraction, while PJScan [23] relies on a third-party parser, Poppler [10], which does not fully implement the Adobe Reader specifications. These detectors are limited by their inability to accurately parse and extract all JavaScript components, especially those that are obfuscated.

## 3. Methodology
### 3.1 Reference JavaScript Extractor
We developed a reference JavaScript extractor by directly interfacing with Adobe Reader using an automated binary analysis technique. This extractor provides a high-fidelity representation of the JavaScript content in PDFs.

### 3.2 Differential Analysis
We performed a differential analysis on our reference extractor and several popular extractors using over 160,000 PDFs from VirusTotal. We identified hundreds of samples that existing extractors failed to process correctly.

### 3.3 Obfuscation Techniques
By analyzing the discrepancies, we identified several new obfuscation techniques. Combining these obfuscations, we demonstrated that a malicious PDF can evade all tested malware detectors, including signature-based, structure/metadata-based, and JavaScript-based detectors.

### 3.4 Mitigation
We discuss several mitigation techniques, including the deployment of our reference JavaScript extractor. Our experiments show that replacing the original parser with our reference extractor significantly improves the detection rate of PJScan [23] from 68% to 96%.

## 4. Conclusion
This paper presents a systematic study of PDF parser confusion attacks and proposes a reference JavaScript extractor to improve the accuracy of JavaScript-based classifiers. Our findings highlight the importance of high-fidelity parsing in detecting malicious PDFs and provide a practical solution to mitigate parser limitations.