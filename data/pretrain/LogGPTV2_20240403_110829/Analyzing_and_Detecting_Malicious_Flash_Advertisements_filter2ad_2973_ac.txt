with strings.) For instance, string manipulation methods
made up 95% of total method invocations in some obfus-
cated Flash applications that we found in the wild.
Network Activity. All actions and methods that result
in network activity are logged, along with the arguments
passed to them. This provides an overview of how the Flash
ﬁle is interacting with the outside world. In the case of
methods that result in a redirection of the users’ browser,
these actions will reveal the destination URL to where the
browser is eventually being redirected.
Referenced URLs. Another important piece of data that
is extracted from the execution trace is all the referenced
URLs in the Flash ﬁle. This includes all URLs used in
network activity, but also all URLs that exist in the Flash
ﬁle but are not necessarily used during execution, such as
unused URL constants or URLs dynamically created on
the stack through deobfuscation routines. Collecting unused
URLs is important because it can provide hints about the
actions that
the Flash ﬁle may potentially perform but
were not executed while being analyzed. For instance, it is
common for malicious advertisements to ﬁrst deobfuscate
the malicious URL that is the target of redirection even
though, for reasons described in Section II-A, the actual
redirect code is deactivated. In this case, the malicious URL
will appear in the report, indicating that the Flash application
could be malicious despite the lack of the execution of a
forceful redirect. All detected URLs will be displayed on the
analysis report and also compared to a blacklist of domains
that have been previously associated with malware [13].
Environment-Aware Functionality. The execution trace
is also analyzed for any action that allows the Flash ap-
plication to become aware of its environment. This could
include the Flash application accessing the runtime URL it
was served from, and the current date and time zone of the
computer the Flash ﬁle is being executed on. This is signif-
icant because it could indicate that the Flash application’s
behavior could be modiﬁed depending on its environment.
Creating execution traces with Gnash adds a substan-
tial amount of overhead compared to execution using the
standard Adobe Flash Player. Malicious code that may
otherwise take a matter of seconds to execute may take
minutes when using Gnash, due to the amount of data that
must be logged to create the execution trace. The problem
is often made worse by the amount of obfuscation used,
because each method and data access by the malicious Flash
application may require an expensive deobfuscation routine
to be executed. This results in more ActionScript actions
that must be executed, thus increasing the amount of data
that is logged. It is not unusual for these execution traces to
reach sizes of several gigabytes.
C. Classiﬁcation
to get
OdoSwiff was initially created to identify malicious Flash
advertisements, and, as such, much of its classiﬁcations
revolves around what exactly deﬁnes a malicious adver-
tisement. OdoSwiff deﬁnes as malicious any advertisement
that redirects the user’s web browser without any actions
initiated by the user. Typically, malicious advertisements
redirect the user to phishing or drive-by download sites
that attempt
the user to download an executable
binary that contains malware. Thus, in our system, any Flash
application that automatically redirects the web browser or
opens a window without any user interaction is classiﬁed
as malicious. In addition, the malicious classiﬁcation is also
given to a Flash ﬁle if CVE-2007-0071 exploits are detected,
shellcode is found, detected URLs have known associations
with malware, or if ActionScript 3.0 malicious signatures are
found. If the Flash application is not found to be malicious,
it is classiﬁed as benign.
While the classiﬁcations revolve around malicious adver-
tisement, the reports can still be useful for other Flash ap-
plications. For example, our reports contain information on
what sort of network connections were made, any referenced
URLs, and executed action summaries. This provides a good
overview of what the Flash application is doing internally.
IV. SYSTEM EVALUATION
OdoSwiff has been made publicly available as part of a
system designed to detect and analyze web-based malware
called Wepawet. With the help of OdoSwiff, Wepawet
supports malware detection in Flash, JavaScript, and PDF
ﬁles. Figure 10 shows the online ﬁle submission page for
Wepawet and Figure 11 shows the report generated by
OdoSwiff for the malicious advertisement in Section II-A.
The Wepawet web service has been publicly available since
Figure 10: The public online submission form for Wepawet.
Figure 11: The Summary and Details sections of the gener-
ated report for the malicious Flash advertisement described
in Section II-A.
late 2008. At the time of this writing, 3,060 Flash applica-
tions have been submitted to Wepawet by third parties, and
over 600 of them were found to be malicious.
We evaluated our system by crawling for Flash ad-
vertisements on the Internet and then by analyzing them
with the previously described techniques. The results were
then compared with mainstream virus scanners using the
VirusTotal service [14], and also with adopstools [15],
a system designed to scan and identify malicious Flash
advertisements.
Flash advertisements were collected using the following
method. A list containing the Alexa Top 500 Global Sites [5]
was created and a crawler was designed to view each of
these sites periodically. All Flash applications that were
Figure 12: Number of crawled Flash advertisements by Flash
version.
loaded upon each viewing were saved. Flash advertisements
were separated from non-advertisement Flash content by
checking the ﬁle name to see if it contained a width
and height. It is a common naming convention with ad-
vertisements to include the size of the advertisement in
pixels in the ﬁle name, e.g., 300x250_Product.swf or
Company_Product_160x600.swf. This makes it easy
to separate advertisements from other Flash content, such as
embedded video players and interactive menus.
A total of 2,492 Flash advertisements were collected
from 190 sites out of the Alexa Top 500 Global Sites.
Figure 12 shows a breakdown of the crawled advertisements
by Flash version. Each advertisement was submitted to
OdoSwiff, VirusTotal, and adopstools. Our system classi-
ﬁed each advertisement as either benign or malicious. The
VirusTotal report for each advertisement speciﬁes how many
of 40 different virus scanners gave a positive match to a
malicious signature. If any of the virus scanners indicated
a positive match to a malicious signature, the advertisement
was marked as malicious, otherwise it was marked as benign.
The adopstools classiﬁcations, like OdoSwiff, simply consist
of benign or malicious.
The system evaluation results are found in Figure 13.
Out of 2,492 advertisements, our system classiﬁed 5 as
malicious, VirusTotal
indicated 71 were malicious, and
adopstools detected 4 malicious advertisements. The mali-
cious advertisements were manually analyzed to determine
if there were any false positives. OdoSwiff and adopstools
both produced one false positive. They detected the same
malicious advertisements except that OdoSwiff detected one
additional advertisement. Our conjecture is that adopstools
was unable to detect this sample due to its reliance on
static signatures. A signature must ﬁrst be created before
 0 200 400 600 800 1000 1200 1400 1600 5 6 7 8 9 10CountFlash VersionFlash AdvertisementsOut of the 179 Flash applications that took advantage of
ActionScript 3.0, our system detected 14% more samples
than VirusTotal (by successfully detecting 174 as being
malicious versus the 151 that VirusTotal detected.) The
OdoSwiff results did contain 5 false negatives though due
to new obfuscation techniques being used that OdoSwiff
did not have signatures for at the time of evaluation. CVE-
2007-0071 detection rates were identical with both systems,
detecting all 126 Flash ﬁles that contained exploits. This can
be attributed to the ease of detecting the integer overﬂow
discussed in Section III-A. Detection results for adopstools
were lower due to its lack of ActionScript 3.0 support. How-
ever, it was able to detect 21 of the malicious applications
that contained CVE-2007-0071 exploits.
V. RELATED WORK
As discussed in Section IV, anti-virus companies have
included Flash signatures in their scanner applications, and
have achieved some success in detecting malicious Flash
applications. However, not all anti-virus companies maintain
Flash signatures. Out of all the malicious Flash applications
that were successfully detected by VirusTotal in our eval-
uation, only an average of 9.8 out of 40 scanners actually
detected the malicious sample.
There have also been a couple of tools created speciﬁcally
to scan Flash applications. HP released its SWFScan [16]
tool in March 2009 to detect security vulnerabilities in Flash
applications. It focuses on application-level vulnerabilities
that may result from coding errors rather than applications
that have malicious intent. SWFScan operates by ﬁrst de-
compiling ActionScript code and then applying static anal-
ysis techniques to the decompiled code to identify possible
vulnerabilities. Some of the vulnerabilities SWFScan will
detect are cross-site scripting vulnerabilities, insecure Flash
System.allowDomain usage, and embedded sensitive
data such as passwords, social security numbers, credit card
numbers, database connection strings, etc.
OWASP SWFIntruder is another tool designed to scan
Flash applications that was released in 2007 [17]. Like HP
SWFScan, it does not detect malicious applications, but
instead looks for ﬂaws in Flash applications that could be
utilized to deliver cross-site scripting attacks. SWFIntruder
executes Flash applications within a web browser to dynam-
ically determine what external variables it uses, and if any
of them can be used to deliver a cross-site scripting attack.
As discussed in Section IV, adopstools is another tool
designed to scan Flash ﬁles [15]. Unlike the other tools
mentioned, it was speciﬁcally designed to scan Flash adver-
tisements for possible malicious behavior. It is implemented
as an online service and generates reports that give general
Figure 13: Detection results for crawled Flash advertise-
ments.
Figure 14: ActionScript 3.0 and CVE-2007-0071 detection
results.
adopstools is able to detect new malicious Flash ads. All
of the advertisements that VirusTotal indicated as malicious
were actually false positives; it failed to detect any of the
malicious advertisements that our system and adopstools
detected.
Crawling for Flash advertisements only tested OdoSwiff’s
ability to detect malicious Flash advertisements; however,
we also wanted to test the system’s capability to detect
other types of Flash exploits such as CVE-2007-0071 ex-
ploits and Flash applications that utilize ActionScript 3.0
for exploits. To accomplish this, 305 malicious Flash ﬁles
were collected from samples submitted to the Wepawet
web service. The malicious Flash applications were then
scanned with OdoSwiff, VirusTotal, and adopstools. 179 of
these malicious Flash ﬁles contained ActionScript 3.0 related
exploits while the other 126 contained CVE-207-0071-based
exploits. The detection results are shown in Figure 14.
 1 10 100OdoSwiffVirusTotaladopstoolsMalicious Flash AdvertisementsFalse PositiveMalicious 0 20 40 60 80 100 120 140 160 180OdoSwiffVirusTotaladopstoolsMalicious Flash ApplicationsActionScript 3.0CVE-2007-0071Flash information, tag list, getURL usage, and a dump of
detected ActionScript 2.0 code. However, it does not support
ActionScript 3.0 at the time of writing and the lack of
dynamic analysis does not allow it to provide reports as
detailed as the ones provided by our system, especially when
dealing with malicious ﬁles that use various obfuscation
techniques.
VI. CONCLUSIONS
This paper described a new system, called OdoSwiff, to
detect malicious Flash applications and advertisements using
a combination of dynamic and static analysis techniques.
OdoSwiff was evaluated on a large collection of Flash ﬁles
that contained different types of Flash exploits. We showed
that detection rates were favorable compared to existing sys-
tems that scan Flash applications. The system classiﬁes each
Flash application as benign or malicious. Flash applications
that are marked as malicious contain code that can redirect
the user’s browser to a malicious site and/or infect the user’s
machine with malware. If no malicious behavior is detected,
the Flash application is marked as benign. In addition to
these classiﬁcations, our system generates a full report to
indicate the reasons why its decision was formed.
An area of weakness of the current system and a source of
future work is the lack of ability to obtain execution traces
for ActionScript 3.0, which limits the detection of malicious
Flash 9 and 10 applications. Our system does implement
static analysis checks for these applications, which has been
shown to be effective in Section IV. However, continued
effective detection requires constant updating of these signa-
tures when new threats are discovered. We attempt to detect
known decryption routines and various techniques used to
obfuscate embedded Flash ﬁles, but these signatures can be
easily evaded by new malware techniques.
Obtaining execution traces, and even better, being able
to instrument an ActionScript 3.0 virtual machine would
allow the system to easily obtain the data passed to
Loader.loadBytes and analyze it for maliciousness,
such as executing forceful redirection code or perhaps an
embedded CVE-2007-0071 exploit. In addition, an execution
trace would allow the system to apply all
the dynamic
analysis techniques for ActionScript 2.0 to Flash ﬁles that
use newer versions of the language.
Acknowledgments
The research was partially supported by the National Sci-
ence Foundation (grant CNS-0831408) and Secure Business
Austria (SBA).
REFERENCES
[1] YouTube, “YouTube Fact Sheet,” http://www.youtube.com/t/
fact sheet.
[2] Adobe Systems Inc, “Flash Player Statistics,” http://www.
adobe.com/products/player census/ﬂashplayer/.
[3] M. Polychronakis, P. Mavrommatis, and N. Provos, “Ghost
turns zombie: exploring the life cycle of web-based malware,”
in LEET’08: Proceedings of the 1st Usenix Workshop on
Large-Scale Exploits and Emergent Threats. Berkeley, CA,
USA: USENIX Association, 2008, pp. 1–8.
[4] S. Hardmeier,
spywaresucks/.
“Spyware
Sucks,”
http://msmvps.com/
[5] Alexa Internet, Inc, “Alexa Top 500 Global Sites,” http:
//alexa.com/topsites/.
[6] Adobe Systems Inc, “SWF ﬁle format speciﬁcation,” http:
//www.adobe.com/devnet/swf/.
[7] CVE MITRE,
“CVE-2007-0071,”
http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2007-0071.
[8] M. Dowd, “Application-Speciﬁc Attacks: Leveraging the
http://documents.iss.net/
ActionScript Virtual Machine,”
whitepapers/IBM X-Force WP ﬁnal.pdf, 2008.
[9] I. Kogan, “ﬂasm,” http://www.nowrap.de/ﬂasm.html.
[10] ——, “ﬂare,” http://www.nowrap.de/ﬂare.html.
[11] Adobe Labs and Mozilla, “Mozilla Tamarin,” http://www.
mozilla.org/projects/tamarin/.
[12] “Gnash Project,” http://www.gnashdev.org/.
[13] “DNS-BH - Malware Domain Blocklist,” http://www.
malwaredomains.com/.
[14] Hispasec Sistemas, “VirusTotal,” http://www.virustotal.com/.
[15] S. Loirat, “adopstools,” http://www.adopstools.net/.
[16] Hewlett-Packard Development Company,
“SWFScan,”
https://h30406.www3.hp.com/campaigns/2009/wwcampaign/
1-5TUVE/index.php?key=swf\&jumpid=go/swfscan.
[17] S. D. Paola,
“SWFIntruder,”
http://code.google.com/p/
swﬁntruder/wiki/SWFIntruder.