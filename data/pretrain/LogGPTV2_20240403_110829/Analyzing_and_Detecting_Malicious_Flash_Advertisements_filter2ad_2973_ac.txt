### String Manipulation
String manipulation methods constitute 95% of total method invocations in some obfuscated Flash applications we discovered in the wild.

### Network Activity
All actions and methods that result in network activity are logged, along with the arguments passed to them. This provides an overview of how the Flash file interacts with the external world. For methods that cause a browser redirection, these actions will reveal the destination URL to which the browser is being redirected.

### Referenced URLs
Another critical piece of data extracted from the execution trace is all the referenced URLs in the Flash file. This includes URLs used in network activity as well as those that exist in the Flash file but are not necessarily used during execution, such as unused URL constants or URLs dynamically created through deobfuscation routines. Collecting unused URLs is important because it can provide insights into potential actions that the Flash file may perform, even if they were not executed during analysis. For example, malicious advertisements often first deobfuscate the target malicious URL, even though the actual redirect code might be deactivated. In this case, the malicious URL will appear in the report, indicating that the Flash application could be malicious despite the lack of a forceful redirect. All detected URLs are displayed in the analysis report and compared against a blacklist of domains known to be associated with malware [13].

### Environment-Aware Functionality
The execution trace is also analyzed for any action that allows the Flash application to become aware of its environment. This could include accessing the runtime URL from which the Flash file was served, and the current date and time zone of the computer on which the Flash file is being executed. This is significant because it could indicate that the Flash application's behavior is modified based on its environment.

Creating execution traces with Gnash adds substantial overhead compared to using the standard Adobe Flash Player. Malicious code that might take seconds to execute using the Adobe Flash Player can take minutes with Gnash due to the extensive logging required. The problem is exacerbated by the amount of obfuscation, as each method and data access by the malicious Flash application may require expensive deobfuscation routines. This results in more ActionScript actions being executed, thus increasing the amount of logged data. It is not uncommon for these execution traces to reach several gigabytes in size.

### Classification
OdoSwiff was initially developed to identify malicious Flash advertisements. Therefore, much of its classification revolves around what defines a malicious advertisement. OdoSwiff classifies as malicious any advertisement that redirects the user’s web browser without user initiation. Typically, such malicious advertisements redirect users to phishing or drive-by download sites that attempt to get the user to download an executable binary containing malware. Thus, in our system, any Flash application that automatically redirects the web browser or opens a window without user interaction is classified as malicious. Additionally, a Flash file is classified as malicious if CVE-2007-0071 exploits are detected, shellcode is found, detected URLs are known to be associated with malware, or if ActionScript 3.0 malicious signatures are identified. If the Flash application is not found to be malicious, it is classified as benign.

While the classifications focus on malicious advertisements, the reports are still useful for other Flash applications. For example, our reports contain information on network connections made, referenced URLs, and summaries of executed actions, providing a comprehensive overview of the Flash application's internal activities.

### System Evaluation
OdoSwiff has been made publicly available as part of Wepawet, a system designed to detect and analyze web-based malware. With the help of OdoSwiff, Wepawet supports malware detection in Flash, JavaScript, and PDF files. Figures 10 and 11 show the online file submission page for Wepawet and the report generated by OdoSwiff for the malicious advertisement described in Section II-A, respectively. The Wepawet web service has been publicly available since late 2008. As of this writing, 3,060 Flash applications have been submitted to Wepawet by third parties, and over 600 of them were found to be malicious.

We evaluated our system by crawling for Flash advertisements on the Internet and then analyzing them using the previously described techniques. The results were compared with mainstream virus scanners using the VirusTotal service [14] and adopstools [15], a system designed to scan and identify malicious Flash advertisements.

Flash advertisements were collected using the following method: a list of the Alexa Top 500 Global Sites [5] was created, and a crawler was designed to periodically view each site. All Flash applications loaded upon each viewing were saved. Flash advertisements were separated from non-advertisement Flash content by checking the file name for width and height. It is common for advertisements to include the size in pixels in the file name, e.g., `300x250_Product.swf` or `Company_Product_160x600.swf`. This makes it easy to separate advertisements from other Flash content, such as embedded video players and interactive menus.

A total of 2,492 Flash advertisements were collected from 190 sites out of the Alexa Top 500 Global Sites. Figure 12 shows a breakdown of the crawled advertisements by Flash version. Each advertisement was submitted to OdoSwiff, VirusTotal, and adopstools. Our system classified each advertisement as either benign or malicious. The VirusTotal report for each advertisement specifies how many of the 40 different virus scanners gave a positive match to a malicious signature. If any virus scanner indicated a positive match, the advertisement was marked as malicious; otherwise, it was marked as benign. The adopstools classifications, like OdoSwiff, consist of benign or malicious.

The system evaluation results are shown in Figure 13. Out of 2,492 advertisements, our system classified 5 as malicious, VirusTotal indicated 71 were malicious, and adopstools detected 4 malicious advertisements. The malicious advertisements were manually analyzed to determine if there were any false positives. OdoSwiff and adopstools both produced one false positive. They detected the same malicious advertisements except that OdoSwiff detected one additional advertisement. We conjecture that adopstools was unable to detect this sample due to its reliance on static signatures, which must be created before detection can occur.

Out of the 179 Flash applications that used ActionScript 3.0, our system detected 14% more samples than VirusTotal (by successfully detecting 174 as being malicious versus the 151 that VirusTotal detected). However, OdoSwiff results contained 5 false negatives due to new obfuscation techniques that OdoSwiff did not have signatures for at the time of evaluation. CVE-2007-0071 detection rates were identical for both systems, detecting all 126 Flash files that contained exploits. This can be attributed to the ease of detecting the integer overflow discussed in Section III-A. Detection results for adopstools were lower due to its lack of ActionScript 3.0 support. However, it was able to detect 21 of the malicious applications that contained CVE-2007-0071 exploits.

### Related Work
As discussed in Section IV, anti-virus companies have included Flash signatures in their scanner applications and have achieved some success in detecting malicious Flash applications. However, not all anti-virus companies maintain Flash signatures. Out of all the malicious Flash applications successfully detected by VirusTotal in our evaluation, only an average of 9.8 out of 40 scanners actually detected the malicious sample.

Several tools have been created specifically to scan Flash applications. HP released SWFScan [16] in March 2009 to detect security vulnerabilities in Flash applications. It focuses on application-level vulnerabilities that may result from coding errors rather than applications with malicious intent. SWFScan operates by decompiling ActionScript code and applying static analysis techniques to identify possible vulnerabilities, such as cross-site scripting vulnerabilities, insecure `System.allowDomain` usage, and embedded sensitive data like passwords, social security numbers, credit card numbers, and database connection strings.

OWASP SWFIntruder [17] is another tool designed to scan Flash applications, released in 2007. Like HP SWFScan, it does not detect malicious applications but looks for flaws in Flash applications that could be exploited for cross-site scripting attacks. SWFIntruder executes Flash applications within a web browser to dynamically determine what external variables they use and if any can be used to deliver a cross-site scripting attack.

Adopstools [15] is another tool designed to scan Flash files, specifically for Flash advertisements. Unlike the other tools mentioned, it generates reports that provide general Flash information, tag lists, `getURL` usage, and a dump of detected ActionScript 2.0 code. However, it does not support ActionScript 3.0 and lacks dynamic analysis, making its reports less detailed, especially for malicious files using various obfuscation techniques.

### Conclusions
This paper describes OdoSwiff, a new system for detecting malicious Flash applications and advertisements using a combination of dynamic and static analysis techniques. OdoSwiff was evaluated on a large collection of Flash files containing different types of Flash exploits. We showed that detection rates were favorable compared to existing systems that scan Flash applications. The system classifies each Flash application as benign or malicious. Malicious Flash applications contain code that can redirect the user’s browser to a malicious site and/or infect the user’s machine with malware. If no malicious behavior is detected, the Flash application is marked as benign. In addition to these classifications, our system generates a full report to indicate the reasons for its decision.

An area of weakness in the current system and a source of future work is the inability to obtain execution traces for ActionScript 3.0, which limits the detection of malicious Flash 9 and 10 applications. Our system implements static analysis checks for these applications, which has been effective. However, continued effective detection requires constant updating of signatures when new threats are discovered. We attempt to detect known decryption routines and various obfuscation techniques, but these signatures can be easily evaded by new malware techniques.

Obtaining execution traces, and even better, being able to instrument an ActionScript 3.0 virtual machine, would allow the system to easily obtain the data passed to `Loader.loadBytes` and analyze it for maliciousness, such as executing forceful redirection code or an embedded CVE-2007-0071 exploit. An execution trace would also enable the system to apply all dynamic analysis techniques for ActionScript 2.0 to Flash files using newer versions of the language.

### Acknowledgments
This research was partially supported by the National Science Foundation (grant CNS-0831408) and Secure Business Austria (SBA).

### References
[1] YouTube, “YouTube Fact Sheet,” http://www.youtube.com/t/fact_sheet.
[2] Adobe Systems Inc, “Flash Player Statistics,” http://www.adobe.com/products/player_census/flashplayer/.
[3] M. Polychronakis, P. Mavrommatis, and N. Provos, “Ghost turns zombie: exploring the life cycle of web-based malware,” in LEET’08: Proceedings of the 1st Usenix Workshop on Large-Scale Exploits and Emergent Threats. Berkeley, CA, USA: USENIX Association, 2008, pp. 1–8.
[4] S. Hardmeier, “Spyware Sucks,” http://msmvps.com/spywaresucks/.
[5] Alexa Internet, Inc, “Alexa Top 500 Global Sites,” http://alexa.com/topsites/.
[6] Adobe Systems Inc, “SWF file format specification,” http://www.adobe.com/devnet/swf/.
[7] CVE MITRE, “CVE-2007-0071,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0071.
[8] M. Dowd, “Application-Specific Attacks: Leveraging the ActionScript Virtual Machine,” http://documents.iss.net/whitepapers/IBM_X-Force_WP_final.pdf, 2008.
[9] I. Kogan, “flasm,” http://www.nowrap.de/flasm.html.
[10] ——, “flare,” http://www.nowrap.de/flare.html.
[11] Adobe Labs and Mozilla, “Mozilla Tamarin,” http://www.mozilla.org/projects/tamarin/.
[12] “Gnash Project,” http://www.gnashdev.org/.
[13] “DNS-BH - Malware Domain Blocklist,” http://www.malwaredomains.com/.
[14] Hispasec Sistemas, “VirusTotal,” http://www.virustotal.com/.
[15] S. Loirat, “adopstools,” http://www.adopstools.net/.
[16] Hewlett-Packard Development Company, “SWFScan,” https://h30406.www3.hp.com/campaigns/2009/wwcampaign/1-5TUVE/index.php?key=swf&jumpid=go/swfscan.
[17] S. D. Paola, “SWFIntruder,” http://code.google.com/p/swfintruder/wiki/SWFIntruder.