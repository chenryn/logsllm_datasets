1 collector = defaultint(int)
2
3 def analyze_single(shm):
4
while not shm.empty()
5
6
7
8
9 def calculate_prob(n_runs):
10
11
12
13
‚Äô‚Äô‚Äô
:param n_runs: The total number of runs
‚Äô‚Äô‚Äô
return max(collector.values()) / n_runs
(b) A global analysis of the Adjacent module
Figure 2: Pseudocode for the HardsHeap‚Äôs Adjacent module. For a
brief explanation, we used Python to represent pseudocode; how-
ever, our actual prototype is written in C to avoid accidental uses of
heap allocators.
Using HardsHeap, we implemented seven modules that evaluate
various security properties in secure allocators. As shown in Table 2,
their security properties are highly related to security features in
secure allocators; however, they are externally feasible to evaluate
unlike these features. Thanks to HardsHeap‚Äôs extensible frame-
work, it is easy to build a module; we only need hundreds of lines for
building modules. The most complex module is ArcHeap [49], which
discovers heap exploitation techniques (e.g., overlapping chunks)
in the presence of heap vulnerabilities. It shows the extensibility of
HardsHeap by supporting a complex module such as ArcHeap in
our framework.
In the following, we explain each module and show how to im-
plement it using the Adjacent module as an example. Our repository
also contains our prototype implementations for other modules.
Adjacent. The Adjacent module checks whether an attacker can
achieve adjacent chunks reliably. We present its pseudocode in
Figure 2. Many secure allocators make it challenging to achieve
adjacent chunks to mitigate overflow in corrupting sensitive data
(e.g., a function pointer) in the next chunk. To evaluate this security
property, the module‚Äôs local analysis installs a hooking function
at allocation (Figure 2a). This function iterates over all chunk ob-
jects and checks whether the other chunks are adjacent to the just
allocated one. If it discovers such chunks, it records their indices
to the shared memory for the global analysis (Lines 15‚Äì16). At the
end of the local analysis, the global analysis records the number
of adjacent chunks (Lines 3‚Äì7). Our analysis is aware of chunk
indices; they are required to identify a victim and a vulnerable
object in exploitation. As noted in ¬ß5.3, HardsHeap allows the
module to specify its actions to generate. For efficient exploration,
the Adjacent module only generates allocation and deallocation
(Line 1) After sampling ùëõ experiments (ùëõ = 100 in our prototype),
the module computes the probability of adjacent chunks; it simply
divides the number of executions of adjacent chunks by the total
number of executions (Line 13). If this probability is beyond our
threshold (0.25), HardsHeap stores it and later generates the PoC
code after reduction.
Reclaim. The Reclaim module validates whether a dangling object
is reliably reclaimable in secure allocators. To use memory effi-
ciently, secure allocators should reclaim unused memory; however,
an attacker can abuse this behavior to exploit use-after-free bugs.
In particular, an attacker can reclaim a dangling object to modify
its data and use it to cause undefined behaviors. To stop this, secure
allocators often prohibit reclaiming of a dangling object (e.g., MarkUs
and ffmalloc) or make reclamation unreliable. To test whether this
mechanism works as intended, our module checks whether a newly
allocated object can occupy the already freed object while randomly
allocating and deallocating objects. Note that all freed objects in
HardsHeap are naturally dangled; HardsHeap holds these objects
in its data structure for analysis regardless of whether the objects
Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea384are freed or not. Therefore, if a secure allocator can distinguish a
dangling object from a normal one (e.g., MarkUs), it should consider
an object from HardsHeap as dangled.
CheckOnFree. The CheckOnFree module validates whether secure
allocators can detect overflow at free. Even though this mechanism
is limited in blocking overflow due to its specific spot to check
(i.e., free), it is quite widely used thanks to its straightforward im-
plementation and low performance overhead. Similar to the stack
canary, we can support this mechanism by placing a random value
(i.e., canary) between heap objects and checking their corruptions
by inspecting the canary at free. This also helps to debug by early
detecting overflows; however, HardsHeap only focuses on its use-
fulness in mitigating exploitation. For that, HardsHeap randomly
allocates objects, deallocates them, and triggers an overflow. At al-
location, it zeros out an object. Then, before deallocation, it checks
whether the object is still filled with zeros. Otherwise, it implies that
this object is corrupted due to overflow, which is only permitted to
modify heap object‚Äôs contents. Subsequently, CheckOnFree verifies
whether a program is still running even after free; this indicates
that an allocator fails to detect this corruption, which shows failures
in the check-on-free mechanism.
Uninitialized. The Uninitialized module checks whether an at-
tacker can leak metadata from uninitialized memory. Such a tech-
nique is widely used in exploitation because the metadata often
contain secret values for security (e.g., canary). To evaluate this,
this module randomly allocates objects and deallocates memory
while checking whether the allocated memory is zero-initialized.
It relies on the internal behavior of Linux (or other operating sys-
tems) that newly allocated memory from the kernel (i.e., pages) is
always zero-initialized. Therefore, if a memory contains a non-zero
value, we conclude that it is part of the metadata from an allocator.
Unfortunately, HardsHeap cannot determine the severity of this
leakage. Therefore, this finding could have no security implication
unlike the other module‚Äôs one. We discuss such an invulnerable
case in ¬ß10.
Spray. The Spray module checks whether an attacker can guess
any recurrent address from the secure allocators. In this regard,
the module randomly allocates and deallocates objects and checks
whether a recurrent address exists among multiple executions. Un-
like other modules, which can validate a security violation locally,
it requires global analysis because the recurrent address is only
calculable with multiple instances. To this end, in its local analysis,
this module records only object information ‚Äî its start address and
size. Then, in its global analysis, it computes the recurrent address
and its corresponding probability.
SizeCheck. The SizeCheck module checks whether an allocator
holds its intrinsic invariant; the actual size of a heap object should
be greater than or equal to the request size. This invariant is often
broken if an allocator is vulnerable to an integer overflow. It is
worth noting that HardsHeap maintains both the request size and
the actual size of an object in its data structure for analysis. To
check this invariant, this module hooks the allocation and checks
whether the invariant holds using HardsHeap‚Äôs data structure for
sizes.
ArcHeap. We also port ArcHeap as a module of HardsHeap. In
short, ArcHeap attempts to detect the violation of other intrinsic
Component
Core Library
Minimizer
Modules
AFL modification
Total
LoC Language
1,697 C/C++
269
Python
1,306 C/C++
191
3,463
C
Table 3: HardsHeap‚Äôs components and their Lines of Code (LoC).
We further describe each module‚Äôs LoC in Table 2.
invariants of heap allocators; heap allocators should not 1) modify
non-heap regions and 2) return a chunk that overlaps with other
memory regions. To verify this, the ArcHeap module randomly gen-
erates all heap actions (i.e., allocation, deallocation, memory writes,
and bug invocation) while validating whether the invariants hold
using shadow memory and HardsHeap‚Äôs object information [49].
7 IMPLEMENTATION
We implemented the HardsHeap‚Äôs prototype in 3,463 lines of code.
Table 3 shows HardsHeap‚Äôs components with corresponding lines
of code; each module‚Äôs complexity can be estimated through its lines
of code in Table 2. As specified in ¬ß5.2, HardsHeap‚Äôs core library
is built on ArcHeap [49], which supports heap action generation.
We used American Fuzzy Lop (AFL) [50] as our underlying binary
fuzzer. HardsHeap implemented the SSDD minimizer in Python.
We utilized scipy [43] for statistical analysis, such as Student‚Äôs t-
test. It is worth noting that it is important to limit heap usage in
modules except for intended behaviors for reproducibility. More
specifically, implicit heap usage may differentiate the behavior of
allocators in an analysis phase and its PoC code, thereby making
PoC difficult to reproduce. Thus, we used C to write our module
to eliminate the accidental use of dynamic memory. In a global
analysis, we support C++ and its Standard Template Library (STL)
for convenient development. Moreover, instead of using a shared
library, we built each module as a dedicated binary because we
found that a shared library leverages a large volume of dynamic
allocations that affect an allocator‚Äôs behaviors. In AFL, we increased
its default timeout from 1 second to 10 seconds because one module
executes multiple local analyses internally (i.e., 100 by default) for
sampling; therefore, we found that HardsHeap occasionally suffers
from numerous timeouts and fails to observe meaningful behaviors.
8 EVALUATION
To evaluate HardsHeap, this section attempts to answer the fol-
lowing questions.
‚Ä¢ How effective is HardsHeap in evaluating the security prop-
‚Ä¢ How effective HardsHeap‚Äôs SSDD in reducing test cases?
(¬ß8.2)
‚Ä¢ How many PoCs of HardsHeap can be reproduced? (¬ß8.3)
Evaluation Setup. We performed every experiment on Intel Xeon
Gold 6248R with 256 GB RAM running on Ubuntu 20.04. We used 16
random strings for our seed files, and according to our experience,
their values are unimportant in our evaluation because HardsHeap
erties of secure allocators? (¬ß8.1)
Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea385Abbr. Allocators
Version Patch (LoC)
DI
FF
FR
GU
HA
IS
MA
MI
SC
SL
DieHarder [28]
ffmalloc [45]
FreeGuard [37]
Guarder [38]
hardened_malloc [12]
isoalloc [33]
MarkUs [1]
mimalloc-secure [25]
Scudo(non-standalone) [22]
SlimGuard [21]
6cf204ec
9e1e5825
bfdf6d9a
9e85978a
v5
a683f427
4c75ffd5
v1.7.0
v11.0.0
237d842a
+17
+17
+36, -1
Table 4: Secure allocators that are used for evaluating HardsHeap.
To specify versions for allocators, we use git commit hash or their
own version strings, which start with v. As we can see from the Patch
column, we insert(+) or delete(-) codes in some allocators to support
malloc_usable_size() API or to optimize initialization for evaluation.
quickly converges because of its smaller search space compared to
that of classical software testing.
Secure allocators. To evaluate HardsHeap, we used 10 se-
cure allocators as shown in Table 4. To comprehensive evaluate
HardsHeap, we attempted to include as many secure allocators
as possible; we collected them from both academic projects [1, 21,
28, 37, 38, 45] and industrial projects [12, 22, 25, 33]. Because our
tool, HardsHeap, can only analyze a standalone allocator without
any program dependencies, we excluded secure allocators that are
customized for special applications, such as PartitionAlloc [11]
for the Chromium browser. Moreover, we also exclude memory
safety solutions that require modification of programs (i.e., instru-
mentation) [20, 35, 42], which are also outside the scope of this
project.
We patched some allocators (see Table 4) before the evaluation
for several reasons. First, we patched allocators with no support
for malloc_usable_size API, which HardsHeap used to obtain an
object‚Äôs size. This API is fairly straightforward to implement be-
cause all allocators already have internal routines to determine an
object size from a heap object for realloc. In particular, allocators
use an object size to optimize realloc by avoiding additional allo-
cation when an old object‚Äôs size is already greater than a newly
requested size. Therefore, we simply modified allocators to call the
internal routine in the malloc_usable_size API. Second, we patched
SlimGuard to improve its initialization. The original SlimGuard‚Äôs ini-
tialization is extremely slow because it writes NULL to its data
structures, which invokes many page copies because of copy-on-
write mechanisms in Linux. To resolve this, we modify SlimGuard
to write NULL to the data structure‚Äôs field only if its old value was
not NULL. By doing so, we could avoid redundant page copies,
thereby improving SlimGuard‚Äôs initialization by an order of magni-
tude. Finally, we also patched a weak randomness issue in Guarder
and FreeGuard. We found that this rendered our analysis inaccurate
due to its unusual random behavior. These allocators are globally
random but not locally within one second because they use times-
tamps as their random source. This seriously violates their security
guarantee. We further discuss this issue in ¬ß9.2.
1 // 0x80000 = 512KB
2 // 0x80000 + 0x1000(+1 page) - 0x10(metadata)
3 void* p0 = malloc(0x81000 - 0x10);
4 void* p1 = malloc(0x81000 - 0x10);
5 assert(p1 + 0x81000 == p0);
Figure 3: A way to make adjacent chunks reliably in Guarder.
8.1 Evaluating Security Properties
To evaluate security properties in secure allocators, we applied
HardsHeap‚Äôs modules (Table 2) to 10 secure allocators and one
baseline allocator (Table 4) for 24 hours. For the baseline allocator,
we used the default allocator in Ubuntu 20.04 that is ptmalloc2 in
glibc 2.31. Table 5 shows the maximum probability of each module‚Äôs
finding. We also show whether all findings of HardsHeap can
be reproduced deterministically (i.e., in 100%). This allows us to
understand the impact of each violation and whether the violation
is probabilistic, deterministic, or both.
In total, HardsHeap identified 56 interesting test cases in 10
secure allocators. Most of our findings demonstrate security issues
in secure allocators. However, since HardsHeap only observes
the external behaviors of allocators without reasoning, it is com-
pletely possible that HardsHeap‚Äôs results have no security impli-
cations. We discuss this limitation in ¬ß10, which is related to the
Uninitialized module.
For the baseline allocator (ptmalloc2), HardsHeap found deter-
ministic test cases in all modules, except for SizeCheck and Spray.
This is reasonable because 1) ptmalloc2 has no randomized mech-
anisms, resulting in deterministic behaviors, and 2) unexpected
behaviors from SizeCheck and Spray often relate to implementation
bugs, which ptmalloc2 is unlikely to have. In particular, unexpected
behaviors from the SizeCheck module imply an integer overflow
in an allocator, and those from the Spray module imply the weak
entropy of ASLR in heap.
In the remainder of this section, we discuss our findings in secure
allocators and their underlying reasons for all modules.
Adjacent. HardsHeap found that all secure allocators cannot stop
adjacent chunks completely [38]; it still allows making adjacent
chunks reliably in several extraordinary situations. This happens
for two reasons. First, we found that most secure allocators fail
to provide sufficient entropy in large objects. It is a well-known
behavior of DieHarder [38]; DieHarder does not provide protection
for large object allocations, as these are just diverted to mmap and
munmap. However, we discovered that even Guarder suffers from this
issue despite its claim of stable entropy (see Figure 3). In particular,
Guarder uses a raw mmap without specifying its start address if an
object size is larger than 512 KB. Unfortunately, mmap returns the
adjacent addresses in subsequent calls in Linux. Note that the mmap‚Äôs
behavior is dependent on the underlying operating system. Linux,
which we used for our evaluation, returns the adjacent addresses
in the subsequent mmap calls, while OpenBSD returns random ad-
dresses to ensure enough entropy among mappings. However, as
mentioned in DieHarder [28], we believe that secure allocators need
to work securely regardless of their underlying operating systems.
Therefore, we believe that the secure allocator is responsible for
this issue. Recently, Entroprise [39] evaluated Guarder‚Äôs allocation
entropy; however, it failed to discover this issue due to its fixed
workload (i.e., 32-byte objects) even though Entroprise could have
Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea386D
P
100 √ó
100 √ó
ptmalloc2 DieHarder
D
P
100 ‚úì
100 ‚úì
100 ‚úì
100 ‚úì
100 ‚úì
100 ‚úì
100 ‚úì
100 √ó
100 ‚úì
D
FreeGuard Guarder MarkUs
P
D
100 √ó
100 ‚úì
P
D