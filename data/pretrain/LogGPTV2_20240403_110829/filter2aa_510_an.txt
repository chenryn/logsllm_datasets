### NAT Service Log Location
The default location for the NAT service log is:
```
/var/log/alias.log
```

### Chapter 13: Working With Network Services

#### VPN Service
##### Starting and Stopping the VPN Service
- **To start the VPN service:**
  ```sh
  $ sudo serveradmin start vpn
  ```
- **To stop the VPN service:**
  ```sh
  $ sudo serveradmin stop vpn
  ```

##### Checking the Status of the VPN Service
- **To see a summary status of the VPN service:**
  ```sh
  $ sudo serveradmin status vpn
  ```
- **To see a detailed status of the VPN service:**
  ```sh
  $ sudo serveradmin fullstatus vpn
  ```

##### Viewing VPN Service Settings
- **To list all VPN service configuration settings:**
  ```sh
  $ sudo serveradmin settings vpn
  ```
- **To list a specific setting:**
  ```sh
  $ sudo serveradmin settings vpn:setting
  ```

##### Changing VPN Service Settings
- **To change a single setting:**
  ```sh
  $ sudo serveradmin settings vpn:setting = value
  ```
- **To change multiple settings:**
  ```sh
  $ sudo serveradmin settings
  vpn:setting = value
  vpn:setting = value
  vpn:setting = value
  [...]
  Control-D
  ```

**Parameters:**
- **setting:** A specific VPN service setting. To view a list of available settings, use:
  ```sh
  $ sudo serveradmin settings vpn
  ```
  or refer to "List of VPN Service Settings" on page 146.
- **value:** An appropriate value for the setting.

#### List of VPN Service Settings
Use the following parameters with the `serveradmin` command to change settings for the VPN service.

| Parameter (vpn:Servers:) | Description | Default |
|--------------------------|-------------|---------|
| com..ppp.l2tp:Server:VerboseLogging | Verbose logging level | 1 |
| com..ppp.l2tp:Server:MaximumSessions | Maximum number of sessions | 128 |
| com..ppp.l2tp:Server:LogFile | Path to the log file | /var/log/ppp/vpnd.log |
| com..ppp.l2tp:L2TP:IPSecSharedSecretEncryption | IPSec shared secret encryption | Key |
| com..ppp.l2tp:L2TP:IPSecSharedSecretValue | IPSec shared secret value | "" |
| com..ppp.l2tp:L2TP:IPSecSharedSecret | IPSec shared secret | "" |
| com..ppp.l2tp:L2TP:Transport | Transport method | IPSec |
| com..ppp.l2tp:enabled | Enable L2TP | no |
| com..ppp.l2tp:IPv4:DestAddressRanges | Destination address ranges | _empty_array |
| com..ppp.l2tp:IPv4:OfferedRouteMasks | Offered route masks | _empty_array |
| com..ppp.l2tp:IPv4:OfferedRouteAddresses | Offered route addresses | _empty_array |
| com..ppp.l2tp:IPv4:OfferedRouteTypes | Offered route types | _empty_array |
| com..ppp.l2tp:IPv4:ConfigMethod | Configuration method | Manual |
| com..ppp.l2tp:DNS:OfferedSearchDomains | Offered search domains | _empty_array |
| com..ppp.l2tp:DNS:OfferedServerAddresses | Offered DNS server addresses | _empty_array |
| com..ppp.l2tp:DSACL:Group | DSACL group | "" |
| com..ppp.l2tp:Interface:SubType | Interface subtype | L2TP |
| com..ppp.l2tp:Interface:Type | Interface type | PPP |
| com..ppp.l2tp:PPP:LCPEchoFailure | LCP echo failure count | 5 |
| com..ppp.l2tp:PPP:DSACLEnabled | DSACL enabled | no |
| com..ppp.l2tp:PPP:VerboseLogging | PPP verbose logging level | 1 |
| com..ppp.l2tp:PPP:AuthenticatorPlugins:_array_index:n | Authenticator plugins | DSAuth |
| com..ppp.l2tp:PPP:LCPEchoInterval | LCP echo interval | 60 |
| com..ppp.l2tp:PPP:LCPEchoEnabled | LCP echo enabled | 1 |
| com..ppp.l2tp:PPP:IPCPCompressionVJ | IPCP compression VJ | 0 |
| com..ppp.l2tp:PPP:AuthenticatorProtocol:_array_index:n | Authenticator protocols | MSCHAP2 |
| com..ppp.l2tp:PPP:LogFile | PPP log file path | /var/log/ppp/vpnd.log |

#### List of PPTP Service Settings
| Parameter (vpn:Servers:) | Description | Default |
|--------------------------|-------------|---------|
| com..ppp.pptp:Server:VerboseLogging | Verbose logging level | 1 |
| com..ppp.pptp:Server:MaximumSessions | Maximum number of sessions | 128 |
| com..ppp.pptp:Server:LogFile | Path to the log file | /var/log/ppp/vpnd.log |
| com..ppp.pptp:enabled | Enable PPTP | no |
| com..ppp.pptp:IPv4:DestAddressRanges | Destination address ranges | _empty_array |
| com..ppp.pptp:IPv4:OfferedRouteMasks | Offered route masks | _empty_array |
| com..ppp.pptp:IPv4:OfferedRouteAddresses | Offered route addresses | _empty_array |
| com..ppp.pptp:IPv4:OfferedRouteTypes | Offered route types | _empty_array |
| com..ppp.pptp:IPv4:ConfigMethod | Configuration method | Manual |
| com..ppp.pptp:DNS:OfferedSearchDomains | Offered search domains | _empty_array |
| com..ppp.pptp:DNS:OfferedServerAddresses | Offered DNS server addresses | _empty_array |
| com..ppp.pptp:DSACL:Group | DSACL group | "" |
| com..ppp.pptp:Interface:SubType | Interface subtype | PPTP |
| com..ppp.pptp:Interface:Type | Interface type | PPP |
| com..ppp.pptp:PPP:CCPProtocols:_array_index:n | CCP protocols | MPPE |
| com..ppp.pptp:PPP:LCPEchoFailure | LCP echo failure count | 5 |
| com..ppp.pptp:PPP:MPPEKeySize128 | MPPE key size 128 | 1 |
| com..ppp.pptp:PPP:DSACLEnabled | DSACL enabled | no |
| com..ppp.pptp:PPP:VerboseLogging | PPP verbose logging level | 1 |
| com..ppp.pptp:PPP:AuthenticatorPlugins:_array_index:n | Authenticator plugins | DSAuth |
| com..ppp.pptp:PPP:MPPEKeySize40 | MPPE key size 40 | 0 |
| com..ppp.pptp:PPP:LCPEchoInterval | LCP echo interval | 60 |
| com..ppp.pptp:PPP:LCPEchoEnabled | LCP echo enabled | 1 |
| com..ppp.pptp:PPP:CCPEnabled | CCP enabled | 1 |
| com..ppp.pptp:PPP:IPCPCompressionVJ | IPCP compression VJ | 0 |
| com..ppp.pptp:PPP:AuthenticatorProtocol:_array_index:n | Authenticator protocols | MSCHAP2 |
| com..ppp.pptp:PPP:LogFile | PPP log file path | /var/log/ppp/vpnd.log |

#### List of `serveradmin` Commands for Managing the VPN Service
- **To view the latest entries in the log:**
  ```sh
  $ tail log-file
  ```
- **To find the current location of the VPN service log:**
  ```sh
  $ sudo serveradmin command vpn:command = getLogPaths
  ```
  **Output:**
  ```sh
  vpn:vpnLog = /var/log/vpnd.log
  ```

**Command:**
- **getLogPaths:** Find the current location of the VPN service log.
- **writeSettings:** Equivalent to the standard `serveradmin settings` command, but also returns a setting indicating whether the service needs to be restarted. See “Determining Whether a Service Needs to be Restarted” on page 19.

**Default:**
- The default location for the VPN service log is:
  ```sh
  /var/log/vpnd.log
  ```

### IP Failover
IP failover allows a secondary server to acquire the IP address of a primary server if the primary server ceases to function. Once the primary server returns to normal operation, the secondary server relinquishes the IP address. This ensures that your website remains available on the network even if the primary server is temporarily offline.

**Note:**
- IP failover only allows a secondary server to acquire a primary server’s IP address. Additional software tools such as `rsync` are required to mirror the primary server’s data on the secondary server. Refer to the `rsync` man pages for more information.

#### Requirements
- **Hardware:**
  - Primary server
  - Secondary server
  - Public network (servers must be on the same subnet)
  - Private network between the servers (additional network interface card)

**Note:**
- Both servers must have IP addresses on the same subnet of the public network and the private network because IP failover uses broadcast messages.

- **Software:**
  - Unique IP addresses for each network interface (public and private)
  - Software to mirror primary server data to the secondary server
  - Scripts to control failover behavior on the secondary server (optional)

#### Failover Operation
- When IP failover is active, the primary server periodically broadcasts a brief message confirming normal operation on both the public and private networks. This message is monitored by the secondary server.
  - **If the broadcast is interrupted on both networks, the secondary server initiates the failover process.**
  - **If the broadcast is interrupted on only one network, the secondary server sends an email notification of a network anomaly but does not acquire the primary server’s IP address.**

- Email notifications are sent when the secondary server detects a failover condition, a network anomaly, and when the IP address is relinquished back to the primary server.

#### Enabling IP Failover
1. **On the primary server, add the following line to `/etc/hostconfig`:**
   ```sh
   FAILOVER_BCAST_IPS="10.0.0.255 100.0.255.255"
   ```
   Substitute the broadcast addresses used on your server for the public and private networks. This tells the server to send broadcast messages over relevant network interfaces that the server at those IP addresses is functioning.

2. **Restart the primary server so that your changes can take effect.**

3. **Disconnect the primary server from both the public and private networks.**

4. **On the secondary server, add the following lines to `/etc/hostconfig`:**
   ```sh
   FAILOVER_PEER_IP="10.0.0.1"
   FAILOVER_PEER_IP_PAIRS="en0:100.0.0.10"
   FAILOVER_EMAIL_RECIPIENT="PI:EMAIL"
   ```
   - In the first line, substitute the IP address of the primary server on the private network.
   - In the second line, enter the local network interface that should adopt the primary server’s public IP address, a colon, then the primary server’s public IP address.
   - (Optional) In the third line, enter the email address for notification messages regarding the primary server status. If this line is omitted, email notifications are sent to the root account on the local machine.

5. **Restart the secondary server so your changes can take effect and allow the secondary server to acquire the primary’s public IP address.**

**Important:**
- Before enabling IP failover, verify on both servers that the port used for the public network is at the top of the Network Port Configurations list in the Network pane of System Preferences. Also, verify that the port used for the private network contains no DNS configuration information.

6. **Reconnect the primary server to the private network, wait fifteen seconds, then reconnect the primary server to the public network.**

7. **Verify that the secondary server relinquishes the primary server’s public IP address.**

#### Configuring IP Failover
- You configure failover behavior using scripts. The scripts must be executable (e.g., shell scripts, Perl, compiled C code, or executable AppleScripts). Place these scripts in `/Library/IPFailover/` on the secondary server.
- Create a directory named with the public IP address of the primary server to contain the failover scripts for that server. For example:
  ```sh
  /Library/IPFailover/100.0.0.10
  ```

**Notification Only:**
- Use a script named `Test` located in the failover scripts directory to control whether, in the event of a failover condition, the secondary server acquires the primary’s IP address or simply sends an email notification.
  - If no script exists, or if the script returns a zero result, the secondary server acquires the primary’s IP address.
  - If the script returns a non-zero result, the secondary server skips IP address acquisition and only sends an email notification of the failover condition.

- A simple way to set up this notification-only mode is to copy the script located at `/usr/bin/false` to the directory named with your primary server IP address and then change the name of the script to `Test`. This script always returns a non-zero result.

- Using the `Test` script, you can configure the primary server to monitor the secondary server and send email notification if the secondary server becomes unavailable.

**Pre and Post Scripts:**
- You can configure the failover process with scripts that can run before acquiring the primary IP address (preacquisition), after acquiring the IP address (postacquisition), before relinquishing the primary IP address (prerelinquish), and after relinquishing the IP address back to the primary server (postrelinquish).
- These scripts reside in the `/Library/IPFailover/` directory on the secondary server.
- The scripts use these four prefixes:
  - **PreAcq:** Run before acquiring the IP address from the primary server
  - **PostAcq:** Run after acquiring the IP address from the primary server
  - **PreRel:** Run before relinquishing the IP address back to the primary server
  - **PostRel:** Run after relinquishing the IP address back to the primary server

**Important:**
- Always ensure that the primary server is up and functioning normally before activating IP failover on the secondary server. If the primary server isn’t sending broadcast messages, the secondary server will initiate the failover process and acquire the primary’s public IP address.

- You may have more than one script at each stage. The scripts in each prefix group are run in the order their file names appear in a directory listing using the `ls` command.

- For example, your secondary server may perform other services on the network such as running a statistical analysis application and distributed image processing software. A preacquisition script quits the running applications to free up the CPU for the Web server. A postacquisition script starts the Web server. Once the primary is up and running again, a prerelinquish script quits the Web server, and a postrelinquish script starts the image processing and statistical analysis applications. The sequence of scripted events might look like this:
  ```sh
  Test (if present)
  PreAcq10.StopDIP
  PreAcq20.StopSA
  PreAcq30.CleanupTmp
  PostAcq10.StartTimer
  PostAcq20.StartApache
  PreRel10.StopApache
  PreRel20.StopTimer
  PostRel10.StartSA
  PostRel20.StartDIP
  PostRel30.MailTimerResultsToAdmin
  ```

### Enabling PPP Dial-In
You can use the `pppd` command to set up Point-to-Point Protocol (PPP) dial-in service. For more information, see the man page. The "Examples" section of the man page shows an example of setting up dial-in service.

### Chapter 14: Working With Open Directory

#### General Directory Tools
- **Testing Your Open Directory Configuration:**
  - Use the `dscl` utility to test your directory services configuration. For more information, type `man dscl` to see the man page.

- **Modifying an Open Directory Node:**
  - Use the `dscl` utility to create, modify, or delete directory information in an Open Directory node.

- **Testing Open Directory Plugins:**
  - Use the `dsperfmonitor` tool to check the performance of the protocol-specific plugins used by Open Directory. It can list the API calls being made to plugins, how long the plugins take to reply, and recent API call errors.
  - For more information, type `man dsperfmonitor` to see the man page.

- **Directory services API support:**
  - Provided by the `DirectoryService` daemon. For more information, type `man DirectoryService` to see the man page.
  - For information on the data types used by directory services, type `man DirectoryServiceAttributes` to see the man page.
  - For information on the internals of Open Directory and its plugins, including source code you can examine or adopt, follow the Open Directory link at [www.apple.com/darwin](http://www.apple.com/darwin).

#### Registering URLs With Service Location Protocol (SLP)
- Use the `slp_reg` command to register service URLs using the Service Location Protocol (SLP).
- For more information, type `man slp_reg` to see the man page.
- SLP registration is handled by the SLP daemon `slpd`. For more information, type `man slpd` to see the man page.

#### Changing Open Directory Service Settings
- Use the following parameters with the `serveradmin` command to change settings for the Open Directory service.
- Be sure to add `dirserv:` to the beginning of any parameter you use. For example, to see the role that the server is playing in the directory hierarchy, you would type:
  ```sh
  $ serveradmin settings dirserv:LDAPServerType
  ```

| Parameter (dirserv:) | Description | Default |
|----------------------|-------------|---------|
| replicationUnits | Replication units | days |
| replicaLastUpdate | Last update time for the replica | "" |
| LDAPDataBasePath | Path to the LDAP database | "" |
| replicationPeriod | Replication period | 4 |
| LDAPSearchBase | Base DN for LDAP searches | "" |
| passwordOptionsString | Password options string | usingHistory=0 usingExpirationDate=0 usingHardExpirationDate=0 requiresAlpha=0 requiresNumeric=0 expirationDateGMT=12/31/69 hardExpireDateGMT=12/31/69 maxMinutesUntilChangePassword=0 maxMinutesUntilDisabled=0 maxMinutesOfNonUse=0 maxFailedLoginAttempts=0 minChars=0 maxChars=0 passwordCannotBeName=0 |
| NetInfoRunStatus | NetInfo run status | "" |
| LDAPSSLCertificatePath | Path to the SSL certificate | "" |
| masterServer | Master server | "" |
| LDAPServerType | Type of LDAP server | standalone |
| NetInfoDomain | NetInfo domain | "" |
| replicationWhen | Replication timing | periodic |
| useSSL | Use SSL | YES |
| LDAPDefaultPrefix | Default prefix for LDAP | dc=,dc=com |
| LDAPTimeoutUnits | Timeout units for LDAP | minutes |
| LDAPServerBackend | Backend for the LDAP server | BerkeleyDB |

#### LDAP
- **Configuring LDAP:**
  - The following tools are available for configuring LDAP. For more information, see the man page for each tool.
  - **slapconfig**