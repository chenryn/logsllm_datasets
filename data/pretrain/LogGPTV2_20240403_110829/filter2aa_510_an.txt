The location of the NAT service log.
Default = /var/log/alias.log
LL2354.book  Page 144  Monday, October 20, 2003  9:47 AM
Chapter 13    Working With Network Services
145
VPN Service
Starting and Stopping VPN Service
To start VPN service:
$ sudo serveradmin start vpn
To stop VPN service:
$ sudo serveradmin stop vpn
Checking the Status of VPN Service
To see summary status of VPN service:
$ sudo serveradmin status vpn
To see detailed status of VPN service:
$ sudo serveradmin fullstatus vpn
Viewing VPN Service Settings
To list VPN service configuration settings:
$ sudo serveradmin settings vpn
To list a particular setting:
$ sudo serveradmin settings vpn:setting
Changing VPN Service Settings
To change a setting:
$ sudo serveradmin settings vpn:setting = value
To change several settings:
$ sudo serveradmin settings
vpn:setting = value
vpn:setting = value
vpn:setting = value
[...]
Control-D
Parameter
Description
setting
A VPN service setting. To see a list of available settings, type
$ sudo serveradmin settings vpn
or see “List of VPN Service Settings” on page 146.
value
An appropriate value for the setting.
LL2354.book  Page 145  Monday, October 20, 2003  9:47 AM
146
Chapter 13    Working With Network Services
List of VPN Service Settings
Use the following parameters with the serveradmin command to change settings for 
VPN service.
Parameter (vpn:Servers:)
Description
com..ppp.l2tp:
Server:VerboseLogging
Default = 1
com..ppp.l2tp:
Server:MaximumSessions
Default = 128
com..ppp.l2tp:
Server:LogFile
Default = "/var/log/ppp/vpnd.log"
com..ppp.l2tp:
L2TP:IPSecSharedSecretEncryption
Default = "Key"
com..ppp.l2tp:
L2TP:IPSecSharedSecretValue
Default = ""
com..ppp.l2tp:
L2TP:IPSecSharedSecret
Default = ""
com..ppp.l2tp:
L2TP:Transport
Default = "IPSec"
com..ppp.l2tp:
enabled
Default = no
com..ppp.l2tp:
IPv4:DestAddressRanges
Default = _empty_array
com..ppp.l2tp:
IPv4:OfferedRouteMasks
Default = _empty_array
com..ppp.l2tp:
IPv4:OfferedRouteAddresses
Default = _empty_array
com..ppp.l2tp:
IPv4:OfferedRouteTypes
Default = _empty_array
com..ppp.l2tp:
IPv4:ConfigMethod
Default = "Manual"
com..ppp.l2tp:
DNS:OfferedSearchDomains
Default = _empty_array
com..ppp.l2tp:
DNS:OfferedServerAddresses
Default = _empty_array
com..ppp.l2tp:
DSACL:Group
Default = ""
com..ppp.l2tp:
Interface:SubType
Default = "L2TP"
com..ppp.l2tp:
Interface:Type
Default = "PPP"
com..ppp.l2tp:
PPP:LCPEchoFailure
Default = 5
LL2354.book  Page 146  Monday, October 20, 2003  9:47 AM
Chapter 13    Working With Network Services
147
com..ppp.l2tp:
PPP:DSACLEnabled
Default = no
com..ppp.l2tp:
PPP:VerboseLogging
Default = 1
com..ppp.l2tp:
PPP:AuthenticatorPlugins:
_array_index:n
Default = "DSAuth"
com..ppp.l2tp:
PPP:LCPEchoInterval
Default = 60
com..ppp.l2tp:
PPP:LCPEchoEnabled
Default = 1
com..ppp.l2tp:
PPP:IPCPCompressionVJ
Default = 0
com..ppp.l2tp:
PPP:AuthenticatorProtocol:
_array_index:n
Default = "MSCHAP2"
com..ppp.l2tp:
PPP:LogFile
Default = "/var/log/ppp/vpnd.log"
com..ppp.pptp:
Server:VerboseLogging
Default = 1
com..ppp.pptp:
Server:MaximumSessions
Default = 128
com..ppp.pptp:
Server:LogFile
Default = "/var/log/ppp/vpnd.log"
com..ppp.pptp:
enabled
Default = no
com..ppp.pptp:
IPv4:DestAddressRanges
Default = _empty_array
com..ppp.pptp:
IPv4:OfferedRouteMasks
Default = _empty_array
com..ppp.pptp:
IPv4:OfferedRouteAddresses
Default = _empty_array
com..ppp.pptp:
IPv4:OfferedRouteTypes
Default = _empty_array
com..ppp.pptp:
IPv4:ConfigMethod
Default = "Manual"
com..ppp.pptp:
DNS:OfferedSearchDomains
Default = _empty_array
com..ppp.pptp:
DNS:OfferedServerAddresses
Default = _empty_array
com..ppp.pptp:
DSACL:Group
Default = ""
Parameter (vpn:Servers:)
Description
LL2354.book  Page 147  Monday, October 20, 2003  9:47 AM
148
Chapter 13    Working With Network Services
com..ppp.pptp:
Interface:SubType
Default = "PPTP"
com..ppp.pptp:
Interface:Type
Default = "PPP"
com..ppp.pptp:
PPP:CCPProtocols:_array_index:n
Default = "MPPE"
com..ppp.pptp:
PPP:LCPEchoFailure
Default = 5
com..ppp.pptp:
PPP:MPPEKeySize128
Default = 1
com..ppp.pptp:
PPP:DSACLEnabled
Default = no
com..ppp.pptp:
PPP:VerboseLogging
Default = 1
com..ppp.pptp:
PPP:AuthenticatorPlugins:
_array_index:n
Default = "DSAuth"
com..ppp.pptp:
PPP:MPPEKeySize40
Default = 0
com..ppp.pptp:
PPP:LCPEchoInterval
Default = 60
com..ppp.pptp:
PPP:LCPEchoEnabled
Default = 1
com..ppp.pptp:
PPP:CCPEnabled
Default = 1
com..ppp.pptp:
PPP:IPCPCompressionVJ
Default = 0
com..ppp.pptp:
PPP:AuthenticatorProtocol:
_array_index:n
Default = "MSCHAP2"
com..ppp.pptp:
PPP:LogFile
Default = "/var/log/ppp/vpnd.log"
Parameter (vpn:Servers:)
Description
LL2354.book  Page 148  Monday, October 20, 2003  9:47 AM
Chapter 13    Working With Network Services
149
List of VPN serveradmin Commands
You can use the following commands with the serveradmin application to manage 
VPN service.
Viewing the VPN Service Log
You can use tail or any other file listing tool to view the contents of the VPN service 
log.
To view the latest entries in the log:
$ tail log-file
You can use the serveradmin getLogPaths command to see where the current VPN 
service log is located.
To display the log path:
$ sudo serveradmin command vpn:command = getLogPaths
Output
vpn:vpnLog = 
Command
(vpn:command=)
Description
getLogPaths
Find the current location of the VPN service log. See “Viewing the 
VPN Service Log” on this page.
writeSettings
Equivalent to the standard serveradmin settings command, 
but also returns a setting indicating whether the service needs to 
be restarted. See “Determining Whether a Service Needs to be 
Restarted” on page 19.
Value
Description
The location of the VPN service log.
Default = /var/log/vpnd.log
LL2354.book  Page 149  Monday, October 20, 2003  9:47 AM
150
Chapter 13    Working With Network Services
IP Failover
IP failover allows a secondary server to acquire the IP address of a primary server if the 
primary server ceases to function. Once the primary server returns to normal operation, 
the secondary server relinquishes the IP address. This allows your website to remain 
available on the network even if the primary server is temporarily offline.
Note:  IP failover only allows a secondary server to acquire a primary server’s IP address. 
You need additional software tools such as rsync to provide capabilities such as 
mirroring the primary server’s data on the secondary server. See the rsync man pages 
for more information.
Requirements
IP failover isn’t a complete solution; it is one tool you can use to increase your server’s 
availability to your clients. To use IP failover, you will need to set up the following 
hardware and software.
Hardware
IP failover requires the following hardware setup:
• Primary server
• Secondary server
• Public network (servers must be on same subnet)
• Private network between the servers (additional network interface card)
Note:  Because IP failover uses broadcast messages, both servers must have IP 
addresses on the same subnet of the public network. In addition, both servers must 
have IP addresses on the same subnet of the private network.
Software
IP failover requires the following software setup:
• Unique IP addresses for each network interface (public and private)
• Software to mirror primary server data to secondary server
• Scripts to control failover behavior on secondary server (optional)
Failover Operation
When IP failover is active, the primary server periodically broadcasts a brief message 
confirming normal operation on both the public and private networks. This message is 
monitored by the secondary server.
• If the broadcast is interrupted on both public and private networks, the secondary 
server initiates the failover process.
• If status messages are interrupted on only one network, the secondary server sends 
email notification of a network anomaly, but doesn’t acquire the primary server’s IP 
address.
Email notification is sent when the secondary server detects a failover condition, a 
network anomaly, and when the IP address is relinquished back to the primary server.
LL2354.book  Page 150  Monday, October 20, 2003  9:47 AM
Chapter 13    Working With Network Services
151
Enabling IP Failover
You enable IP failover by adding command lines to the file /etc/hostconfig on the 
primary and the secondary server. Be sure to enter these lines exactly as shown with 
regard to spaces and punctuation marks.
To enable IP failover:
1 At the primary server, add the following line to /etc/hostconfig:
FAILOVER_BCAST_IPS="10.0.0.255 100.0.255.255"
Substitute the broadcast addresses used on your server for the public and private 
networks. This tells the server to send broadcast messages over relevant network 
interfaces that the server at those IP addresses is functioning.
2 Restart the primary server so that your changes can take effect.
3 Disconnect the primary server from both the public and private networks.
4 At the secondary server, add the following lines to /etc/hostconfig:
FAILOVER_PEER_IP="10.0.0.1"
FAILOVER_PEER_IP_PAIRS="en0:100.0.0.10"
FAILOVER_EMAIL_RECIPIENT="PI:EMAIL"
In the first line substitute the IP address of the primary server on the private network.
In the second line enter the local network interface that should adopt the primary 
server’s public IP address, a colon, then the primary server’s public IP address.
(Optional) In the third line, enter the email address for notification messages regarding 
the primary server status. If this line is omitted, email notifications are sent to the root 
account on the local machine.
5 Restart the secondary server so your changes can take effect and allow the secondary 
server to acquire the primary’s public IP address.
Important:  Before you enable IP Failover, verify on both servers that the port used for 
the public network is at the top of the Network Port Configurations list in the Network 
pane of System Preferences. Also verify that the port used for the private network 
contains no DNS configuration information.
6 Reconnect the primary server to the private network, wait fifteen seconds, then 
reconnect the primary server to the public network.
7 Verify that the secondary server relinquishes the primary server’s public IP address.
LL2354.book  Page 151  Monday, October 20, 2003  9:47 AM
152
Chapter 13    Working With Network Services
Configuring IP Failover
You configure failover behavior using scripts. The scripts must be executable (for 
example, shell scripts, Perl, compiled C code, or executable AppleScripts). You place 
these scripts in /Library/IPFailover/ on the secondary server.
You need to create a directory named with the public IP address of the primary server 
to contain the failover scripts for that server. For example:
/Library/IPFailover/100.0.0.10
Notification Only
You can use a script named “Test” located in the failover scripts directory to control 
whether, in the event of a failover condition, the secondary server acquires the 
primary’s IP address, or simply sends an email notification. If no script exists, or if the 
script returns a zero result, then the secondary server acquires the primary’s IP address. 
If the script returns a non-zero result, then the secondary server skips IP address 
acquisition and only sends email notification of the failover condition. The test script is 
run to determine whether the IP address should be acquired and to determine if the IP 
address should be relinquished when the primary server returns to service.
A simple way to set up this notification-only mode is to copy the script located at 
/usr/bin/false to the directory named with your primary server IP address and then 
change the name of the script to “Test”. This script always returns a non-zero result.
Using the Test script, you can configure the primary server to monitor the secondary 
server, and send email notification if the secondary server becomes unavailable.
Pre and Post Scripts
You can configure the failover process with scripts that can run before acquiring the 
primary IP address (preacquisition), after acquiring the IP address (postacquisition), 
before relinquishing the primary IP address (prerelinquish), and after relinquishing the 
IP address back to the primary server (postrelinquish). These scripts reside in the 
/Library/IPFailover/ directory on the secondary server, as previously 
discussed. The scripts use these four prefixes:
• PreAcq  –  run before acquiring IP address from primary server
• PostAcq  –  run after acquiring IP address from primary server
• PreRel  –  run before relinquishing IP address back to primary server
• PostRel  –  run after relinquishing IP address back to primary server
Important:  Always be sure that the primary server is up and functioning normally 
before you activate IP failover on the secondary server. If the primary server isn’t 
sending broadcast messages, the secondary server will initiate the failover process and 
acquire the primary’s public IP address.
You may have more than one script at each stage. The scripts in each prefix group are 
run in the order their file names appear in a directory listing using the ls command.
LL2354.book  Page 152  Monday, October 20, 2003  9:47 AM
Chapter 13    Working With Network Services
153
For example, your secondary server may perform other services on the network such as 
running a statistical analysis application and distributed image processing software. A 
preacquisition script quits the running applications to free up the CPU for the Web 
server. A postacquisition script starts the Web server. Once the primary is up and 
running again, a prerelinquish script quits the Web server, and a postrelinquish script 
starts the image processing and statistical analysis applications. The sequence of 
scripted events might look like this:
Test (if present)
PreAcq10.StopDIP
PreAcq20.StopSA
PreAcq30.CleanupTmp
PostAcq10.StartTimer
PostAcq20.StartApache
PreRel10.StopApache
PreRel20.StopTimer
PostRel10.StartSA
PostRel20.StartDIP
PostRel30.MailTimerResultsToAdmin
Enabling PPP Dial-In
You can use the pppd command to set up Point-to-Point Protocol (PPP) dial-in service. 
For more information, see the man page. The “Examples” section of the man page 
shows an example of setting up dial-in service.
LL2354.book  Page 153  Monday, October 20, 2003  9:47 AM
LL2354.book  Page 154  Monday, October 20, 2003  9:47 AM
14
155
14 Working With Open Directory
Commands you can use to manage the Open Directory 
service in Mac OS X Server.
This chapter includes descriptions of general directory tools and tools for working with 
LDAP, NetInfo, and the Password Server.
General Directory Tools
Testing Your Open Directory Configuration
You can use the dscl utility to test your directory services configuration. For more 
information, type man dscl to see the man page.
Modifying an Open Directory Node
You can also use the dscl utility to create, modify, or delete directory information in an 
Open Directory node.
Testing Open Directory Plugins
You can use the dsperfmonitor tool to check the performance of the protocol-specific 
plugins used by Open Directory. It can list the API calls being made to plugins, how 
long the plugins take to reply, and recent API call errors.
For more information, type man dsperfmonitor to see the man page.
Directory services API support is provided by the DirectoryService daemon. 
For more information, type man DirectoryService to see the man page.
For information on the data types used by directory services, type man 
DirectoryServiceAttributes to see the man page.
Finally, for information on the internals of Open Directory and its plugins, including 
source code you can examine or adopt, follow the Open Directory link at 
www.apple.com/darwin.
LL2354.book  Page 155  Monday, October 20, 2003  9:47 AM
156
Chapter 14    Working With Open Directory
Registering URLs With Service Location Protocol (SLP)
You can use the slp_reg command to register service URLs using the Service Location 
Protocol (SLP).
For more information, type man slp_reg to see the man page.
SLP registration is handled by the SLP daemon slpd. For more information, type man 
slpd to see the man page.
Changing Open Directory Service Settings
Use the following parameters with the serveradmin command to change settings for 
the Open Directory service. 
Be sure to add dirserv: to the beginning of any parameter you use. For example, to 
see the role that the server is playing in the directory hierarchy, you would type 
serveradmin settings dirserv:LDAPServerType.
Parameter (dirserv:)
Description
replicationUnits
Default = "days"
replicaLastUpdate
Default = ""
LDAPDataBasePath
Default = ""
replicationPeriod
Default = 4
LDAPSearchBase
Default = ""
passwordOptionsString
Default = "usingHistory=0 usingExpirationDate=0 
usingHardExpirationDate=0 requiresAlpha=0 
requiresNumeric=0 expirationDateGMT=12/31/69 
hardExpireDateGMT=12/31/69 
maxMinutesUntilChangePassword=0 
maxMinutesUntilDisabled=0 
maxMinutesOfNonUse=0 maxFailedLoginAttempts=0 
minChars=0 maxChars=0 passwordCannotBeName=0"
NetInfoRunStatus
Default = ""
LDAPSSLCertificatePath
Default = ""
masterServer
Default = ""
LDAPServerType
Default = "standalone"
NetInfoDomain
Default = ""
replicationWhen
Default = "periodic"
useSSL
Default = "YES"
LDAPDefaultPrefix
Default = "dc=,dc=com"
LDAPTimeoutUnits
Default = "minutes"
LDAPServerBackend
Default = "BerkeleyDB"
LL2354.book  Page 156  Monday, October 20, 2003  9:47 AM
Chapter 14    Working With Open Directory
157
LDAP
Configuring LDAP
The following tools are available for configuring LDAP. For more information, see the 
man page for each tool.
slapconfig