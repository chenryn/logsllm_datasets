> 
> 
> MIT 许可证（MIT）
> 
> 
> 
“MIT 许可证”不是一个单一的许可证，而是根据 麻省理工学院   Massachusetts Institute of Technology （MIT）为发行版本准备的语言衍生出来一系列许可证形式。多年来，无论是对于使用它的原始项目，还是作为其他项目的范本，它经历了许多变化。Fedora 项目一直保持着 [收藏 MIT 许可证的好奇心](https://fedoraproject.org/wiki/Licensing:MIT?rd=Licensing/MIT)，以纯文本的方式记录了那些平淡的变化，如同泡在甲醛中的解剖标本一般，追溯了它的各种演变。
幸运的是，   开放源码倡议组织    Open Source Initiative （OSI） 和    软件数据包交换    Software Package Data eXchange 组织（SPDX）已经将一种通用的 MIT 式的许可证形式标准化为“ MIT 许可证   The MIT License ”。OSI 反过来又采用了 SPDX 通用开源许可证的标准化 [字符串标志符](http://spdx.org/licenses/)，并将其中的 “MIT” 明确指向了标准化形式的“MIT 许可证”。如果你想为一个新项目使用 MIT 式的条款，请使用其 [标准化的形式](http://spdx.org/licenses/MIT)。
即使你在 `LICENSE` 文件中包含 “The MIT License” 或 “SPDX:MIT”，任何负责的审查者仍会将文本与标准格式进行比较，以确保安全。尽管自称为“MIT 许可证”的各种许可证形式只在细微的细节上有所不同，但所谓的“MIT 许可证”的松散性已经诱使了一些作者加入麻烦的“自定义”。典型的糟糕、不好的、非常坏的例子是 [JSON 许可证](https://spdx.org/licenses/JSON)，一个 MIT 家族的许可证被加上了“本软件应用于善，而非恶”。这件事情可能是“非常克罗克福特”的（LCTT 译者注，Crockford 是 JSON 格式和 [JSON.org](http://JSON.org) 的作者）。这绝对是一件麻烦事，也许这个玩笑本来是开在律师身上的，但他们却笑得前仰后合。
这个故事的寓意是：“MIT 许可证”本身就是模棱两可的。大家可能很清楚你的意思，但你只需要把标准的 MIT 许可证文本复制到你的项目中，就可以节省每个人的时间。如果使用元数据（如包管理器中的元数据文件）来指定 “MIT 许可证”，请确保 `LICENSE` 文件和任何头部的注释都使用标准的许可证文本。所有的这些都可以 [自动化完成](https://www.npmjs.com/package/licensor)。
#### 版权声明
> 
> Copyright (c)
> 
> 
> 
> 
> 版权 (c)  
> 
> 
> 
在 1976 年（美国）《版权法》颁布之前，美国的版权法规要求采取具体的行动，即所谓的“手续”来确保创意作品的版权。如果你不遵守这些手续，你起诉他人未经授权使用你的作品的权力就会受到限制，往往会完全丧失权力，其中一项手续就是“ 声明   notice ”。在你的作品上打上记号，以其他方式让市场知道你拥有版权。“©” 是一个标准符号，用于标记受版权保护的作品，以发出版权声明。ASCII 字符集没有 © 符号，但 `Copyright (c)` 可以表达同样的意思。
1976 年的《版权法》“落实”了国际《 伯尔尼公约   Berne Convention 》的许多要求，取消了确保版权的手续。至少在美国，著作权人在起诉侵权之前，仍然需要对自己的版权作品进行登记，如果在侵权行为开始之前进行登记，可能会获得更高的赔偿。但在实践中，很多人在对某个人提起诉讼之前，都会先注册版权。你并不会因为没有在上面贴上声明、注册它、向国会图书馆寄送副本等而失去版权。
即使版权声明不像过去那样绝对必要，但它们仍然有很多用处。说明作品的创作年份和版权属于谁，可以让人知道作品的版权何时到期，从而使作品纳入公共领域。作者或作者们的身份也很有用。美国法律对个人作者和“公司”作者的版权条款的计算方式不同。特别是在商业用途中，公司在使用已知竞争对手的软件时，可能也要三思而行，即使许可条款给予了非常慷慨的许可。如果你希望别人看到你的作品并想从你这里获得许可，版权声明可以很好地起到归属作用。
至于“ 版权持有人   copyright holder ”。并非所有标准形式的许可证都有写明这一点的空间。最新的许可证形式，如 [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) 和 [GPL 3.0](https://www.gnu.org/licenses/gpl-3.0.en.html)，发布的许可证文本是要逐字复制的，并在其他地方加上标题注释和单独文件，以表明谁拥有版权并提供许可证。这些办法巧妙地阻止了对“标准”文本的意外或故意的修改。这还使自动许可证识别更加可靠。
MIT 许可证是从为机构发布的代码而写的语言演变而来。对于机构发布的代码，只有一个明确的“版权持有人”，即发布代码的机构。其他机构抄袭了这些许可证，用他们自己的名字代替了 “MIT”，最终形成了我们现在拥有的通用形式。这一过程同样适用于该时代的其他简短的机构许可证，特别是加州大学伯克利分校的最初的    四条款 BSD 许可证    four-clause BSD License  成为了现在使用的 [三条款](https://spdx.org/licenses/BSD-3-Clause) 和 [两条款](https://spdx.org/licenses/BSD-2-Clause) 变体，以及 MIT 许可证的变体 互联网系统联盟   Internet Systems Consortium 的 [ISC 许可证](http://www.isc.org/downloads/software-support-policy/isc-license/)。
在每一种情况下，该机构都根据版权所有权规则将自己列为版权持有人，这些规则称为“[雇佣作品](http://worksmadeforhire.com/)”规则，这些规则赋予雇主和客户在其雇员和承包商代表其从事的某些工作中的版权所有权。这些规则通常不适用于自愿提交代码的分布式协作者。这给项目监管型基金会（如 Apache 基金会和 Eclipse 基金会）带来了一个问题，因为它们接受来自更多不同的贡献者的贡献。到目前为止，通常的基础方法是使用一个单一的许可证，它规定了一个版权持有者，如 [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) 和 [EPL 1.0](https://www.eclipse.org/legal/epl-v10.html)，并由 贡献者许可协议   contributor license agreements  [Apache CLA](https://www.apache.org/licenses/#clas) 以及 [Eclipse CLA](https://wiki.eclipse.org/ECA) 为后盾，以从贡献者中收集权利。在像 GPL 这样的 左版   copyleft 许可证下，将版权所有权收集在一个地方就更加重要了，因为 GPL 依靠版权所有者来执行许可证条件，以促进软件自由的价值。
如今，大量没有机构或商业管理人的项目都在使用 MIT 风格的许可条款。SPDX 和 OSI 通过标准化不涉及特定实体或机构版权持有人的 MIT 和 ISC 之类的许可证形式，为这些用例提供了帮助。有了这些许可证形式，项目作者的普遍做法是在许可证的版权声明中尽早填上自己的名字...也许还会在这里或那里填上年份。至少根据美国的版权法，由此产生的版权声明并不能说明全部情况。
软件的原始所有者保留其工作的所有权。但是，尽管 MIT 风格的许可条款赋予了他人开发和更改软件的权利，创造了法律上所谓的“衍生作品”，但它们并没有赋予原始作者对他人的贡献的所有权。相反，每个贡献者在以现有代码为起点所做的任何作品都拥有版权，[即使是稍做了一点创意](https://en.wikipedia.org/wiki/Feist_Publications,_Inc.,_v._Rural_Telephone_Service_Co.)。
这些项目大多数也对接受 贡献者许可协议   contributor license agreements （CLA）的想法嗤之以鼻，更不用说签署版权转让协议了。这既幼稚又可以理解。尽管一些较新的开源开发人员认为，在 GitHub 上发送 拉取请求   Pull Request ，就会“自动”根据项目现有的许可证条款授权分发贡献，但美国法律不承认任何此类规则。强有力的版权保护是默认的，而不是宽松许可。
> 
> 更新：GitHub 后来修改了全站的服务条款，包括试图至少在 [GitHub.com](http://GitHub.com) 上改变这一默认值。我在 [另一篇文章](https://writing.kemitchell.com/2017/02/16/Against-Legislating-the-Nonobvious.html) 中写了一些对这一发展的想法，并非所有想法都是积极的。
> 
> 
> 
为了填补法律上有效的、有据可查的贡献权利授予与完全没有纸质痕迹之间的差距，一些项目采用了    开发者原创证书    Developer Certificate of Origin ，这是贡献者在 Git 提交中使用 `Signed-Off-By` 元数据标签暗示的标准声明。开发者原创证书是在臭名昭著的 SCO 诉讼之后为 Linux 内核开发而开发的，该诉讼称 Linux 的大部分代码源自 SCO 拥有的 Unix 源代码。作为创建显示 Linux 的每一行都来自贡献者的书面记录的一种方法，开发者原创证书的功能良好。尽管开发者原创证书不是许可证，但它确实提供了大量证据，证明提交代码的人希望项目分发其代码，并让其他人根据内核现有的许可证条款使用该代码。内核还维护着一个机器可读的 `CREDITS` 文件，其中列出了贡献者的名字、所属机构、贡献领域和其他元数据。我做了 [一些](https://github.com/berneout/berneout-pledge) [实验](https://github.com/berneout/authors-certificate)，把这种方法改编成适用于不使用内核开发流程的项目。
### 许可证授权
> 
> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
> 
> 
> 
> 
> 特此免费授予任何获得本软件副本和相关文档文件（下称“软件”）的人
> 
> 
> 
MIT 许可证的实质是许可证（你猜对了）。一般来说，许可证是一个人或法律实体（“ 许可人   licensor ”）给予另一个人（“ 被许可人   licensee ”）做一些法律允许他们起诉的事情的许可。MIT 许可证是一种不起诉的承诺。
法律有时将许可证与给予许可证的承诺区分开来。如果有人违背了提供许可证的承诺，你可以起诉他们违背了承诺，但你最终可能得不到许可证。“ 特此   Hereby ”是律师们永远摆脱不了的一个矫揉造作、老生常谈的词。这里使用它来表明，许可证文本本身提供了许可证，而不仅仅是许可证的承诺。这是一个合法的 [即调函数表达式（IIFE）](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)。
尽管许多许可证都是授予特定的、指定的被许可人的，但 MIT 许可证是一个“ 公共许可证   public license ”。公共许可证授予所有人（整个公众）许可。这是开源许可中的三大理念之一。MIT 许可证通过“向任何获得……软件副本的人”授予许可证来体现这一思想。稍后我们将看到，获得此许可证还有一个条件，以确保其他人也可以了解他们的许可。
在美国式法律文件中，括号中带引号的首字母大写词汇是赋予术语特定含义的标准方式（“定义”）。当法庭看到文件中其他地方使用了一个已定义的大写术语时，法庭会可靠地回顾定义中的术语。
#### 授权范围
> 
> to deal in the Software without restriction,
> 
> 
> 
> 
> 不受限制地处置该软件的权利，
> 
> 
> 