# 【技术分享】如何利用类型篡改漏洞从模板沙盒中逃逸
|
##### 译文声明
本文是翻译文章，文章来源：snyk.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
解释型语言（如JavaScript和Ruby等）的一个关键要素是使用动态类型，也就是说变量类型可以在运行时动态确定和更新。虽然动态类型也有缺点，但它可以使软件更加灵活，研发更为快速。不幸的是，动态类型语言容易遭受类型篡改（Type
Manipulation）漏洞影响，攻击者可以通过篡改给定变量的类型来实施攻击行为。
本文是类型篡改漏洞的第一篇文章，这一系列文章以现实世界的攻击事件为例，分析了类型篡改可以引发的漏洞利用方式，解释了相应的防御方法。使用真实案例可以让读者了解到所使用的软件包中是否存在这些漏洞，也可以帮助读者从中学习经验，避免自己代码中存在类似错误。
本文中我们将重点关注如何利用类型篡改漏洞从模板沙盒中逃逸。这些模板中通常存在一些内置的保护机制，在本文中，我们可以看到这类保护机制并非十全十美。我们的分析案例以LinkedIn的Dust.js以及Mozilla的Nunjucks模板框架为主，捎带提及了Angula。
**二、LinkedIn Dust.js远程命令执行漏洞分析**
本文重点分析的是Dust.js模板框架中存在的漏洞。[Dust.js](http://www.dustjs.com/)是一个流行的模板框架，由LinkedIn发布和使用。PayPal也使用了Dust.js框架，正是在PayPal上，[研究人员](https://artsploit.blogspot.co.il/2016/08/pprce2.html)发现了类型篡改漏洞可以导致[远程命令执行](https://snyk.io/vuln/npm:dustjs-linkedin:20160819)。
漏洞最早于2015年1月9日披露，在[2.6.0版本](https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4)得到修复，漏洞细节于2016年9月14公布。如果你正在使用Dust.js，请[确保在用版本不受此漏洞影响](https://snyk.io/add)。
Dust.js存在以下两类问题。
**（一）显示依赖于变量类型**
与大多数模板库一样，Dust.js在模板中支持条件判断语句，如下代码根据device参数的值来判断如何渲染HTML页面：
    {@if cond="'{device}' == 'desktop'"}
      Desktop version
    {:else}
      Mobile Version
    {/if}
Dust.js稍后会使用eval()函数来判断这些条件语句的真假，这也是模板支持复杂条件所使用的一种简单方法。以下是Dust.js中if函数的一段代码，其中用户提供的params变量与开发人员提供的静态con变量结合在一起，生成最终需要判断的条件语句：
    "if": function( chunk, context, bodies, params ){
      ...
        var cond = params.cond;
        cond = dust.helpers.tap(cond, chunk, context);
        // eval expressions with given dust references
        if(eval(cond)){
          ...
        }
    }
由于条件语句中可能包含用户输入（比如device参数），Dust.js使用sanitisation函数来避免以代码形式执行恶意参数值。以下是sanitisation函数的代码片段：
    dust.escapeHtml = function(s) {
      if (typeof s === 'string') {
        if (!HCHARS.test(s)) {
          return s;
        }
      return s.replace(AMP,'&amp;').replace(...) // more char replacements
      }
      return s;
    }
这段代码非常简洁、完整，能够拦截当前已知的可以破坏字符串引用的所有特殊字符。另外，读者还可以在代码中看到HCHARS.test(s)函数仅用于处理字符串，避免在处理未定义值时出现错误。
虽然这段代码可以避免一些错误情况，但它却无法阻止类型篡改攻击。如果攻击者成功将s强制转化为数组（或任意非字符串类型）对象，整个检查过程就会被完全绕过。在随后的代码中，当条件语句传递给eval函数时，数组对象会被显示转化为字符串对象，最终导致远程JavaScript代码执行。
**（二）字符串可以转为数组**
攻击者的下一步骤是尝试篡改变量类型。对于API驱动的应用而言，攻击者可以通过修改JSON载荷来尝试篡改变量类型，正如之前[Mongoose的Buffer漏洞](https://snyk.io/vuln/npm:mongoose:20160116)一样。然而，由于Dust.js是一个Web模板平台，我们会专注于如何通过qs包来篡改变量类型。
[qs包](https://www.npmjs.com/package/qs)是解析查询字符串时最常用的一个JavaScript包，也是express、request和其他流行包中默认使用的包。qs能够将查询字符串转化为JavaScript对象，以便程序处理。以下是qs的常见用法：
    qs.parse('a');          // {a : ''}
    qs.parse('a=foo');      // {a : 'foo'}
    qs.parse('a=foo&b=bar');// {a : 'foo', b: 'bar'}
    qs.parse('a=foo&a=bar');// {a : ['foo', 'bar']}
    qs.parse('a[]=foo');    // {a : ['foo']}