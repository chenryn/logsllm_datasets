# An Approach for Automatically Repairing Compromised Network Systems

**Authors:**
- Julian B. Grizzard, Sven Krasser, Henry L. Owen
  - School of Electrical and Computer Engineering
  - Georgia Institute of Technology
  - Atlanta, Georgia 30332–0250, USA
  - {grizzard, sven, owen}@ece.gatech.edu
- Gregory J. Conti, Eric R. Dodson
  - College of Computing
  - Georgia Institute of Technology
  - Atlanta, Georgia 30332-0280, USA
  - {conti, edodson}@cc.gatech.edu

## Abstract
The conventional method for repairing a compromised system is to wipe the system clean and reinstall it. However, we propose an alternative approach where systems can automatically recover from compromises. Our proposed solution involves a repair agent that resides in an isolated area on the system, using a virtual machine (VM) to ensure isolation. The repair agent should be capable of rolling back undesirable changes, identifying the point of entry, and preventing further compromise.

## 1. Introduction
Conventional wisdom suggests that once a system has been compromised, it can no longer be trusted. Attackers who have compromised a system can modify any state within it, making it difficult to determine the extent of the modifications. The only accepted method to re-establish trust in a compromised system is to completely reinstall the operating system from known good media.

We propose that systems can be designed to automatically repair themselves after a compromise. Such systems, which we call self-healing systems, use a repair agent to restore the system to a trusted state. In addition to repairing the system, the repair agent must re-establish trust in the compromised system so that users can again trust it.

Re-establishing trust in a compromised system is challenging, particularly because traditional systems lack a true trusted computing base. To address this, we propose a Trusted Immutable Kernel Extension (TIKE). TIKE provides a secure foundation for the self-repair agent.

In this work, we use a virtual machine approach as a proof of concept. The host operating system runs directly on the physical machine and is considered TIKE, while the guest operating system runs on virtual hardware and is considered untrusted. The guest operating system accesses the physical hardware via proxy calls through the host operating system.

We discuss how self-healing systems can be integrated into the TIKE framework to enable automatic recovery from compromises. We also provide an overview of the challenges and details of such systems.

## 2. Motivation
With the proliferation of exploits targeting modern computer systems, attackers can compromise a large number of systems. Once a system is compromised, attackers often install rootkits to maintain access even if the original security hole is patched. For example, we set up a Red Hat 6.2 system on the Georgia Tech honeynet, and within days, an attacker had compromised the system and installed a rootkit.

We propose an approach for automatically repairing compromised systems, even if a rootkit has been installed. This raises three important questions:

- **Why repair rather than prevent?**
  - As the complexity of computer systems increases, preventing all software or human errors becomes more difficult. It may not be possible to completely prevent system compromises, so we need to explore methods for dealing with them.

- **Why repair rather than reinstall?**
  - In some cases, it may be more economically efficient to repair part of a system rather than reinstall the entire system. Automated repairs can minimize downtime, damage, and administrative overhead.

- **Why explore methods other than reinstallation?**
  - While it is commonly accepted that the only solution for a compromised system is to wipe and reinstall, we believe that alternative methods should be explored to determine if they offer advantages over complete reinstallation.

## 3. Design Principles and Architecture
We propose a repair agent that exists as part of a production system, focusing on servers and clusters of workstations. The design principles for the repair agent are simplicity, isolation, trust, visibility, and adaptation.

1. **Simplicity**: The repair agent must be as simple as possible to ensure its correctness.
2. **Isolation**: The repair agent must be isolated from the production operating system to prevent alteration, disablement, or bypass.
3. **Trust**: The repair agent must be trusted, with assurance that it operates as expected.
4. **Visibility**: The system must have complete visibility of the production system to restore any state to a trusted state.
5. **Adaptation**: The repair agent must consume minimal resources during normal operation but can use more resources when an attack occurs to repair the damage.

### 3.1. System Operation
The initial setup of our proposed self-healing system involves installing the repair agent and the production operating system. The repair agent establishes a known good baseline for the production system and initializes its components, including the scheduler, intrusion detection system (IDS), self-repair mechanism, and maintainer.

When the system is powered on, the repair agent takes control, verifies the integrity of the production system, and boots it. The repair agent then enters a cyclic algorithm to ensure system stability and integrity. The system cycles through three modes: normal operation, system validation, and self-repair.

### 3.2. Trusted Immutable Kernel Extension (TIKE)
The core mechanism for the repair agent is TIKE, which serves as a safe haven for intrusion detection and self-repair. The repair agent resides within TIKE.

### 3.3. Repair Agent
The repair agent consists of a scheduler, IDS, self-repairing mechanism, and maintainer.

#### 3.3.1. Scheduler
The scheduler controls the execution of the repair agent's components. It provides an API to adjust the priority of these components based on the system's alert level, which is managed by the IDS.

#### 3.3.2. Intrusion Detection System (IDS)
The IDS scans the production system for compromises. If a compromise is detected, it generates a report and sends it to the self-repair mechanism. The IDS monitors memory, file system, and other states.

#### 3.3.3. Self-Repairing Mechanism
The self-repairing mechanism performs actions to repair the system based on the compromise report and condition policy rules (CPR). It is only scheduled when there are outstanding compromise events.

#### 3.3.4. Maintainer
The maintainer keeps a copy of the known good system state up to date, maintaining the trusted hash table and updating it when the system state changes due to upgrades.

## 4. Further Approach Details
Several details need further exploration, including system validity, state monitoring, root access, entry point identification, adaptation, and denial of service.

- **System Validity**: Determined through hashing and attestation. Reattestation is performed after the repair agent repairs the system.
- **State Monitoring**: The repair agent monitors memory, file systems, and other states.
- **Root Access**: Even if the attacker gains root access to the production operating system, the repair agent remains inaccessible due to the VM approach.
- **Entry Point Identification**: Using frameworks like BackTracker to find the entry point of an attack and prevent further attacks.
- **Adaptation and Performance**: The system should adapt to increasing threats but maintain high performance when the threat level is low.
- **Denial of Service**: The repair agent should minimize the denial of service experienced by the user after a system compromise.

## 5. Approach Limitations
Our approach faces several limitations and challenges, including recognizing system compromises, false positives and negatives in intrusion detection, physical access threats, and data compromise. 

- **Recognition of Compromise**: Intrusion detection can suffer from false positives and negatives. Our approach uses signatures for known good state with attestation and hashing to mitigate this.
- **Physical Access Threats**: If an attacker has physical access to the system, they can bypass our system. Implementing TIKE in hardware could enhance protection.
- **Data Compromise**: Once a system is compromised, sensitive data may be accessed. Our approach aims to minimize damage by automatically discovering and addressing the compromise.
- **Performance Trade-offs**: Some performance may be lost, but the trade-off may be acceptable given the increased security.
- **Assumptions**: The repair agent itself must not be compromised. This assumption is based on the premise that the repair agent is less complex and easier to verify than the entire operating system.

## 6. Conclusions
We have discussed an approach to building systems capable of automatically recovering from system compromises. While the feasibility of such systems is still being determined, our approach is a step in the right direction. As computer systems become more complex and security more critical, approaches to recoverable systems should continue to be explored.

We have built part of the system described in our work. Future work will include expanding our prototype to better understand the feasibility of self-healing systems and testing it on the Georgia Tech honeynet as self-healing honeypots. Based on our experience, we will refine, add to, and draw more conclusions from our approach.

## References
[1] J. G. Levine, J. B. Grizzard, and H. L. Owen, “A methodology to characterize kernel level rootkit exploits that overwrite the system call table,” in Proceedings of IEEE SoutheastCon. IEEE, March 2004, pp. 25–31.

[2] (2004, June) Georgia Tech honeynet research project. http://users.ece.gatech.edu/∼owen/Research/HoneyNet/HoneyNet home.htm.

[3] J. B. Grizzard, E. R. Dodson, G. J. Conti, J. G. Levine, and H. L. Owen, “Towards a trusted immutable kernel extension (TIKE) for self-healing systems: a virtual machine approach,” in Proceedings of Fifth IEEE Information Assurance Workshop. IEEE, June 2004, pp. 444–446.

[4] S. T. King and P. M. Chen, “Backtracking intrusions,” in Proceedings of the nineteenth ACM symposium on Operating systems principles. ACM Press, 2003, pp. 223–236.