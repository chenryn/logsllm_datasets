be thought of as an ambiguity-set reduction process, where 
the ambiguity-set of a piece of data is the set containing all 
possible values of the data that are indistinguishable to the 
attacker. How effectively the attacker can reduce the size of 
the  ambiguity-set  quantifies  the  amount  of  information 
leaked out from the communications – if the ambiguity-set 
can be reduced to 1/ℜ of its original size, we say that log2ℜ 
bits  of  entropy  of  the  data  are  lost.  Similar  modeling  of 
inference  attack  was  also  discussed  in  prior  research,  for 
example, elimination of impossible traces in [8]. 
Following we present a model of web applications and 
their  side-channel  leaks.  The  objective  is  to  make  explicit 
the  key  conditions  under  which  application  data  can  be 
inferred.  We  then  correlate  these  conditions  to  some 
pervasive properties of web applications.  
A.  Model Abstraction 
A web application can be modeled as a quintuple (S, (cid:520), 
(cid:303), f, V),  where S is a set of program states that describe the 
application  data  both  on  the  browser,  such  as  the  DOM 
(Document Object Model) tree and the cookies, and on the 
web server. Here we treat back-end databases as an external 
resource  to  a  web  application,  from  which  the  application 
receives inputs. (cid:520) is a set of inputs the application accepts, 
which  can  come  from  the  user  (e.g.,  keystroke  inputs)  or 
back-end databases (e.g., the account balance). A transition 
from one state to another is driven by the input the former 
receives,  which  is  modeled  as  a  function  (cid:303):  S  ×  (cid:520)(cid:314)  S.  A 
state transition in our model always happens with web flows, 
whose observable attributes, such as packet sizes, number of 
packets,  etc.,  can  be  used  to  characterize  the  original  state 
and its inputs. This observation is modeled as a function f: S 
× (cid:520)(cid:314) V, where V is a set of web flow vectors that describe 
the observable characteristics of the encrypted traffic. A web 
flow vector v is a sequence of directional packet sizes, e.g., a 
193
50-byte  packet  from  the  browser  and  a  1024-byte  packet 
from the server are denoted by “(50(cid:206), (cid:205)1024)”. 
B.  Inference of Sensitive Inputs 
The  objective  of  the  adversary  can  be  formalized  as 
follows. Consider at time t an application state st to accept 
an input (from the user or the back-end database). The input 
space is partitioned into k semantically-disjoined sets, each 
of which brings the application into a distinct state reachable 
from st. For example, family incomes are often grouped into 
different  income  ranges,  which  drive  a  tax  preparation 
application into different states for different tax forms. All k 
such  subsequent  states  form  a  set  St+1⊂S.  The  attacker 
intends to figure out the input set containing the data that the 
application  receives  in  st,  by  looking  at  a  sequence  of 
vectors  (vt ,  vt+1,  …  ,  vt+n-1)  caused  by  n  consecutive  state 
transitions  initiated  from  st  .  This  process  is  illustrated  in 
Figure 1. It is evident that a solution to this problem can be 
applied  recursively,  starting  from  s0,  to  infer  the  sensitive 
inputs of the states that the web application goes through. 
Before observing the vector sequence, the attacker has 
no knowledge about the input in st: all the k possible input 
sets constitute an ambiguity set of size k.  Upon seeing vt, 
the attacker  knows that only  transitions to a subset of St+1, 
denoted  by  Dt+1,  can  produce  this  vector,  and  therefore 
infers that the actual input can only come from k/(cid:302) sets in 
the input space, where (cid:302)∈[1,k) is the reduction factor of this 
state  transition.  The  new  ambiguity  set  Dt+1 can  further  be 
reduced  by  the  follow-up  observations  (vt+1,  …  ,  vt+n-1). 
Denote the ratio of this reduction by (cid:533), where (cid:533)∈[1,∞).  In 
the  end,  the  attacker  is  able  to  identify  one  of  the  k/((cid:302)(cid:533)) 
input sets, which the actual input belongs to. 
vt+2
vt+n-1
St+2
…
vt+1
qt+2,1
qt+2,2
St+1
vt
st
qt+1,1
Dt+1
qt+1,3
qt+1,2
δ1δ2 δ3 δk-1 δk
qt+2,3 qt+2,4 qt+2,5 qt+2,6
…
qt+1,k-1 qt+1,k
Figure 1: Ambiguity set reduction 
C.  Threat Analysis over Web Application Properties  
leaks 
information 
The above analysis demonstrates the feasibility of side-
in  web  applications.  The 
channel 
magnitude  of  such  a  threat  to  a  specific  web  application, 
however,  depends  on  the  size  of  the  input  space  of  the 
sensitive data and the reduction factors incurred by its state 
transitions. The former determines whether it is possible for 
the attacker to efficiently test input values to identify those 
that produce the web traffic matching the observed attribute 
vectors. The latter indicates the amount of the information 
the attacker can learn from such observations. In this section, 
we  show  that  some  prominent  features  of  today’s  web 
application design often lead to low entropy inputs and large 
reduction factors, making the threat realistic.   
194
input 
for  better 
Low  entropy 
interactions.  State 
transitions  of  a  web  application  are  often  caused  by  the 
input data from a relatively small input space. Such a low-
entropy input often come as a result of the increasing use of 
highly  interactive and dynamic  web interfaces, based upon 
the techniques such as AJAX (asynchronous JavaScript and 
XML).  Incorporation  of  such  techniques  into  the  GUI 
widgets of the application makes it highly responsive to user 
inputs: even a single mouse click on a check box or a single 
letter  entered  into  a  text  box  could  trigger  web  traffic  for 
updating  some  DOM  objects  within  the  application’s 
browser-side  interface.  Examples  of  such  widgets  include 
auto-suggestion  or  auto-complete  that  populates  a  list  of 
suggested contents in response to every letter the user types 
into  a  text  box,  and  asynchronously  updating  part  of  the 
HTML page according to every mouse click.  Such widgets 
have  been  extensively  used 
in  many  popular  web 
applications  hosted  by  major  web  content  providers  like 
Facebook, Google and Yahoo.  They are also supported by 
mainstream  JavaScript 
for  web  application 
development: Appendix A lists 14 such libraries.  Moreover, 
the  interfaces  of  web  applications  are  often  designed  to 
guide  the  user  to  enter  her  data  step  by  step,  through 
interacting  with 
their  server-side  components.  Those 
features cause the state transitions within a web application 
to be triggered by even a very small amount of input data, 
and as a result, enable the attacker to enumerate all possible 
input values to match the observed web flow vector. 
libraries 
The  user  data  that  a  web  application  reads  from  its 
back-end database can also be low entropy: for example, the 
image representations of some types of user data have only 
enumerable  possibilities.  This  can  result  in  disclosure  of 
sensitive user information, such as the mutual fund choices 
of one’s investment, as elaborated in Section IV.C.  
Stateful  communications.  Like  desktop  applications, 
web  applications  are  stateful:  transitions  to  next  states 
depend  both  on  the  current  state  and  on  its  input.  To 
distinguish the input data in Figure 1, the attacker can utilize 
not only vt but also every vector observed along the follow-
up  transition  sequences.  This  increases  the  possibility  of 
distinguishing  the  input.  For  example,  a  letter  entered  in  a 
text box affect all the follow-up auto-suggestion contents, so 
the  attributes  of  the  web  traffic  (for  transferring  such 
contents)  associated  with  both  the  current  letter  and  its 
follow-up inputs can be used to infer the letter. Although the 
reduction factor for each transition may seem insignificant, 
the  combination  of  these  factors,  which  is  application-
specific, can be really powerful. We will show through real 
application  scenarios  that  such  reduction  powers  are  often 
multiplicative,  i.e.,  (cid:533)  =  (cid:533)t+1  •…  •(cid:533)t+n,  where  (cid:533)x  is  the 
reduction factor achieved by observing vector vx.  
Significant  traffic  distinctions.  Ultimately  the  attacker 
relies  on  traffic  distinctions  to  acquire  the  reduction  factor 
from each web flow.  Such distinctions often come from the 
objects  updated  by  browser-server  data  exchanges,  which 
usually  have  highly  disparate  sizes.    As  an  example,  we 
collected  image  objects,  HTML  documents  and  JavaScript 
objects  from  five  popular  websites,  and  studied 
the 
distributions  of  their  sizes.    The  outcome,  as  presented  in 
Table  I,  shows  that  the  sizes  of  the  objects  hosted  by  the 
same website are so diverse that their standard deviations ((cid:305)) 
often come close or even exceed their means ((cid:541)). 
Table I. 
SIZES OF OBJECTS ON FIVE POPULAR WEBSITES 
(In bytes) 
cnn.com 
5385 
health.state.pa.us  12235 
medicineNet.com  3931 
nlm.nih.gov 
WashingtonPost 
.com 
JPEG 
(cid:305) 
(cid:541) 
HTML code 
(cid:541) 
(cid:305) 
Javascript  
(cid:305) 
(cid:541) 
7856 
7374 
2239 
73192  25862  6453  6684 
49917  10591  N/A  N/A 
49313  14472  22530 28184
11918  48897  22581  15430  4934  5307 
12037  15122  90353  35476  13413 36220
On the other hand, cryptographic protocols like HTTPS, 
WPA and WPA2, cannot cover such a large diversity. We 
will explain later that WPA/WPA2 do not hide packet sizes 
at all. HTTPS allows websites to specify ciphers. If a block 
cipher is used, packet sizes will be rounded-up to a multiple 
of  the  block  size.  We  checked  22  important  HTTPS 
websites in Appendix B. All of them use RC4 stream cipher, 
except two: VeriSign, which uses AES128 block cipher for 
some  communications  and  RC4  for  others,  and  GEICO, 
which uses Triple-DES block cipher (64 bits). No AES256 
traffic was observed on any website. This indicates that the 
vast  majority  of  the  websites  adopts  RC4,  presumably 
because  it  is  considerably  faster  than  block  ciphers.  Note 
that we simply state the fact that most websites today have 
absolutely  no  side-channel  protection  at  the  HTTPS  layer, 
not advocating block ciphers as a cure. We will show later 
that  for  most  application  features,  the  rounding-effects  of 
block  ciphers  offer  very  marginal  or  no  mitigation  at  all 
because the traffic distinctions are often too large to hide. 
In Section IV,  we use a  metric density to describe the 
extent to which packets can be differentiated by their sizes. 
Let ℘be a set of packet sizes. We define density(℘) = |℘| / 
[max(℘)-min(℘)], which is the average number of packet(s) 
for  every  possible  packet  size.  A  density  below  1.0  often 
indicates that the set of packets are easy to distinguish. 
Summary. The above analysis shows that the root cause 
of  the  side-channel  vulnerability  in  web  applications  are 
actually  some  of  their  fundamental  features,  such  as 
frequent  small  communications,  diversity  in  the  contents 
exchanged in state transitions, and stateful communications.  
Next, we describe the problem in real-world applications.    
IV.  ACTUAL INFORMATION LEAKS IN HIGH-PROFILE 
APPLICATIONS 
As  discussed  in  the  previous  section,  some  pervasive 
design features render web applications vulnerable to side-
channel information leaks.  This section further reports our 
study  on  the  gravity  of  the  problem  in  reality,  through 
195
analyzing  the  side-channel  weaknesses  in  a  set  of  high-
profile web applications. 
We found that these applications leak out private user 
data  such  as  health  information,  family  income  data, 
investment  secrets  and  search  queries.  Both  user  surveys 
and  real  life  scenarios  show  that  people  treat  such  data  as 
highly  confidential.  For  example,  a  study  conducted  by 
BusinessWeek “confirms that Americans care deeply about 
their  privacy.  …  35%  of  people  would  not  be  at  all 
comfortable  with  their  online  actions  being  profiled,  but 
82% are not at all comfortable with online activities being 
merged  with  personally  identifiable  information,  such  as 
your  income,  driver's  license,  credit  data,  and  medical 
status [5].” In another survey, which was about sex practices 
in the U.S. (the topic in itself was sensitive), the respondents 
identified  family  income  as  the  most  sensitive  question  in 
the  survey  [1].  Besides  the  public  perception  reported  by 
those  surveys,  the  impact  of  such  information  can  also  be 
observed in real life. For example, the public was concerned 
about the true health condition of a big company’s CEO. It 
is thought that his health matter could affect the company’s 
stock  price  by  20%-25%  [21].  Similarly,  details  of  fund 
holdings are secret information of big investors: for example, 
a major hedge fund management firm was reported to worry 
that the government’s auditing might leak out its investment 
strategies and hurt its competitive edge [11].  
In  the  rest  of  this  section,  we  elaborate  how  such 
information  is  leaked  out  from  these  leading  applications. 
Before we come to the details of our findings, it is important 
to  notice  that  identification  of  a  running  web  application 
remotely  can  be  practically  achieved 
through  de-
anonymizing web traffic [16] [7]. When Ethernet sniffing is 
possible, the application can usually be easily identified by 
nslookup using its server’s IP address.  
A.  OnlineHealthA 
OnlineHealthA is a personal health information service. 
It is developed by one of the most reputable companies of 
online services. OnlineHealthA runs exclusively on HTTPS. 
Once  logged  in,  a  user  can  build  her  health  profile  by 
entering her medical information within several categories, 
including  Conditions,  Medications,  Procedures,  etc.  The 
user can also find doctors with different specialties. In our 
research,  we constructed an attack program to demonstrate 
that an eavesdropper is able to infer the medications the user 
takes, the procedures she has, and the type of doctors she is 
looking for.  
1)   “Add Health Records”  
One of the  main functionalities of OnlineHealthA is to 
add various types of health records. Figure 2 illustrates the 
user  interface.  On  the  top  of  the  page  are  the  tabs  that 
specify the types of the records to be entered. In the figure, 
the  tab  “Conditions”  has  been  selected,  which  allows  the 
user to input a condition (i.e., symptom/illness). The record 
can be entered through typing, which is assisted by an auto-
suggestion  widget,  or  by  mouse  selection.  Other  types  of 
records can be entered in the similar way.  
“Add” button
Input box
tabs
AAAAAA
AAAAAA
The tab 
“Conditions” 
clicked
“W” clicked
Figure 2: User interface for adding health records 
“Add” 
links
This tab design already leaks out information about the 
type  of  the  record  being  added  because  every  tab  click 
generates a web flow vector (1515±1(cid:206), 266±1(cid:206), (cid:205)583±1, 
(cid:205)x),  where  x  takes  4855,  30154,  20567,  1773,  2757  and 
2299,  for  Conditions,  Medications,  Allergies,  Procedures, 
Test  Results  and  Immunizations,  respectively.  The  density 
of  the  tab-clicks  is  6/(30154-1773)=  0.000211.  (Note  that 
some  packets  in  the  vector  have  small  deviations  for 
different user accounts, so we use symbol ± to denote them.) 
Once a tab has been selected, the user further interacts with 
the application in one of the following two ways. 
Input by typing – the caveat of auto suggestion. As the 
user  types,  a  suggestion  list  appears  under  the  input  box. 
The  list  contains  at  most  ten  items  and  is  updated  in 
response  to  every  keystroke1.  Figure  2  shows  the  list  after 
the user types “ac” in the box. The user can continue typing, 
or select one of the items from the list and click “Add”.  
Interestingly,  the  auto-suggestion  in  fact  causes  a 
catastrophic  leak  of  user  input,  because  the  attacker  can 
effectively disambiguate the  user’s actual input after every 
keystroke by matching the size of the response carrying the 
suggestion list. More specifically, every keystroke generates 
a web flow vector (253±1(cid:206), (cid:205)581, (cid:205)x), where x precisely 
indicates the size of the suggestion list, and is same across 
all users (i.e., the attacker and the victims). 
The  communications  are  stateful:  each  keystroke 
produces  a  web  flow  determined  by  not  only  the  current 
letter being typed but also all other letters entered prior to it 
(i.e., its prefix). As discussed in Section III.B, such stateful 