# Dependable Initialization and Recovery in Distributed Systems

## 1. Introduction
Dependable initialization is a critical process in distributed systems, ensuring that the system can quickly recover from failures and resume normal operation. This document outlines the steps for constructing a recovery graph and discusses the impact of recovery actions on overall system initialization time.

## 2. Recovery Graph Construction

### 2.1. Overview
A recovery graph is dynamically constructed based on the types of dependencies in the interdependency graph and the execution state of initialization tasks. The graph includes all tasks associated with failed entities, as well as any completed or partially completed tasks that have operational dependencies on these failed tasks.

### 2.2. Detailed Steps
1. **Initialization Tasks Associated with Failed Entities:**
   - All initialization tasks associated with failed entities are added to the recovery graph.
   
2. **Already-Completed Tasks:**
   - Completed tasks must be included in the recovery graph if they:
     - Have operational dependencies on tasks associated with failed entities.
     - Are depended upon by tasks that need to be re-executed.
   
3. **Partially Completed Tasks:**
   - Partially completed tasks are added to the recovery graph if they have operational dependencies on tasks that need to be re-executed.
   - Execution of these tasks must be stopped, and cleanup operations must be performed to allow for re-execution.

4. **Unexecuted and In-Progress Tasks:**
   - Unexecuted tasks and in-progress tasks that do not depend on any tasks already in the recovery graph are added to the graph.
   - Dependencies among tasks in the recovery graph are the same as those in the original interdependency graph.

### 2.3. Example
Consider the example in Figure 1. Suppose component A has completed executing task A3, and components B and C are executing tasks B7, B8, and C4, respectively. If process P2 containing component C fails, all tasks associated with P2 and C become part of the recovery graph. 

- Task B7 has an operational dependency on B4, which in turn depends on C2 (a failed task). Therefore, B4 and B2 (which depends on C1) must be added to the recovery graph.
- Task B7, having a dependency on B4, must also be re-executed.
- Similarly, task B8, which depends on B5, does not need to be re-executed since B5 does not depend on any failed tasks.
- Task D4, which does not have dependencies on any tasks in the recovery graph, is allowed to continue to completion.
- Unexecuted tasks B9, B10, and D5, along with in-progress task D4, are added to the recovery graph.

The resulting recovery graph is shown in Figure 2, where shaded tasks represent those that must be re-executed.

## 3. Recovery Graph Computation Algorithm

### 3.1. Algorithm Overview
The `ComputeRecoveryGraph` algorithm, shown in Figure 3, consists of four key steps:

1. **Step 1:**
   - Place all initialization tasks associated with failed entities into the recovery graph.

2. **Step 2.1:**
   - Recursively add already-executed tasks to the recovery graph if they have operational dependencies on other tasks already in the graph.

3. **Step 2.2:**
   - Add currently executing tasks to the recovery graph if they have operational dependencies on any tasks inserted in the previous steps.

4. **Step 3:**
   - Add in-progress or unexecuted tasks to the recovery graph.

5. **Step 4:**
   - Incorporate dependencies into the recovery graph by copying them from the original interdependency graph.

### 3.2. Algorithm Details
```plaintext
ComputeRecoveryGraph(G, {FailedEntities})
// FailedEntities: set of failed entities 
// OD(Ti, Tj): true if the dependency from task Ti to task Tj in the original interdependency graph is an operational dependency
// R(v): set of tasks in the recovery graph
// R(e): dependency arcs in the recovery graph

0. R(v) := ∅;
1. For each entity e in FailedEntities:
    1.1. For each task Ti associated with e:
        1.1.1. R(v) := R(v) ∪ Ti;
2.1. IdentifyCompletedTasksToReExec(R, Ti);
2.2. If there exists Tj in R such that OD(Tj, Ti):
    2.2.1. R(v) := R(v) ∪ Ti;
3. R(v) := R(v) ∪ unfinished tasks in G;
4. R(e) := all edges from the original interdependency graph corresponding to tasks in R(v);

IdentifyCompletedTasksToReExec(R, Ti)
// Ti: current execution task associated with a fault-free entity
1. If there exists Tj not in R such that OD(Tj, Ti) and there exists Tk in R such that OD(Tk, Tj):
    1.1. R := R ∪ Tj;
    1.2. IdentifyCompletedTasksToReExec(R, Tj);
```

## 4. Deciding When to Recover Failed Entities

### 4.1. Overview
The goal of dependable initialization is to bring a distributed system to a point where it can perform its normal function as quickly as possible, even in the presence of failures. However, immediate recovery may not always be the best approach, as deferring recovery until a later stage in the initialization procedure can sometimes lead to shorter overall initialization times.

### 4.2. Example
Consider the example in Figure 4, where components A and B execute within process P1, and component C executes within process P2. Initialization is complete once A2, B2, and C2 have all completed.

- Suppose tasks P1-0 and P2-0 take negligible time, tasks A1, B1, and C1 take ten seconds each, tasks A2 and B2 require two minutes, and task C2 takes eight minutes.
- Failure detection time is five seconds, and a component is recovered by restarting the process (negligible time, but all components must re-execute their initialization tasks).
- At t=9.05 minutes, component A fails when C is using B’s services.

In this scenario, deferring recovery until a later stage can result in shorter overall initialization times compared to immediate recovery.

## 5. Conclusion
Understanding and implementing a reliable recovery graph construction and management strategy is crucial for maintaining the dependability of distributed systems. By carefully considering the timing and scope of recovery actions, system administrators can minimize the impact of failures and ensure that the system returns to normal operation as quickly as possible.

---

This revised text provides a clear, coherent, and professional explanation of the concepts and processes involved in dependable initialization and recovery in distributed systems.