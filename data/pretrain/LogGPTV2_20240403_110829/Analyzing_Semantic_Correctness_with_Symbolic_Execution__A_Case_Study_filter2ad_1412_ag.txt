conﬁrmed that the fake signatures generated actually work.
3 and k2
5) Signature forgery (4) against strongSwan: Similarly,
the forgery attack exploiting trailing bytes after OID could
also beneﬁt from the absence of padding, as an O(cid:48) like the
followings would be accepted by strongSwan:
/** all numbers below are hexadecimals **/
00 01 00 30 7B 30 63 06
5F 2B 0E 03 02 1A
GARBAGE 05 00 04 16 SHA-1(m’)
The length of algorithm OID 0x5F is calculated based on |n|
(in this case 1024 bits) and the size of hash. The attack against
Openswan would work here as well, simply by adjusting what
3 represent. Signature forgery would again easily
k1
succeed given e = 3 and |n| ≥ 1024 bits. We have also
implemented this new attack variant and conﬁrmed that the
fake signatures generated indeed work.
3 and k2
6) Signature forgery (1) against axTLS: Given that there
exist performance incentives in using small exponents with the
kinds of resource-constrained platforms that axTLS targets, a
practical signature forgery attack as described in [27] could
be made possible by the ﬂaw of accepting trailing bytes.
Speciﬁcally, when |n| = 1024, assuming e = 3 and SHA-
1 hashes, the expected number of trials before a successful
forgery is reported to be around 217 iterations, which takes
only several minutes on a commodity laptop [27]. As a larger
|n| would allow for more trailing bytes, hash algorithms that
yield longer hashes could be attacked similarly, e.g., assuming
e = 3 and SHA-256 hashes, a modulus with |n| = 2048 bit
should easily yield a successful forgery. Similarly, such an
attack would also work against a larger public exponent with
an accordingly longer modulus.
7) Signature forgery (2) against axTLS: Separately, the
weakness of ignoring ASN.1 metadata as shown in Snippet 3,
can also be exploited for a low-exponent signature forgery.
Due to the majority of AS being skipped over, axTLS would
accept an O(cid:48) like this:
/** all numbers below are hexadecimals **/
00 01 FF FF FF FF FF FF
GARBAGE 04 16 SHA-1(m’)
FF FF 00 30 5D 30 5B
where the lengths 0x5D and 0x5B are calculated based on
|n| and size of hash to make sure the skipping would happen
correctly. Then the forgery attack against Openswan described
before can be easily adapted to work here by adjusting what
3 represent. Given |n| ≥ 1024, forgery should
k1
easily succeed. We have tested the adapted attack script and
the forged signatures it generates indeed worked on axTLS.
3 and k2
8) Signature forgery (3) against axTLS: Knowing that
axTLS also ignores preﬁx bytes as shown in Snippet 2, the sig-
nature forgery (1) described above which exploits unchecked
trailing bytes can be made even easier to succeed, by making
the ﬁrst 11 bytes all 0 (including the end of padding indicator).
Adapting the analysis from previous work [27], the signature
value O is essentially a number less than 2935 (assuming
|n| = 1024, the ﬁrst 88 bits are all zeros, with 2 additional zero
bits from the ﬁrst 0x30 byte of AS). The distance between
two consecutive perfect cubes in this range is
k3 − (k − 1)3 = 3k2 − 3k + 1 < 3 · 2624 − 3 · 2312 + 1
(∵ k3 < 2935)
< 2626
(1)
which is less than the 656 bits that an attacker can choose
arbitrarily (46 bytes are ﬁxed, due to the 35-byte AS containing
a desired SHA-1 hash and the 11 bytes in front), so a signature
forgery should easily succeed, by preparing an attack input
O(cid:48) containing hash of an attacker-chosen m(cid:48), and the attack
signature S(cid:48) can be found by simply taking the cubic root of
O(cid:48). Once the veriﬁer running axTLS 2.1.3 received S(cid:48), it would
compute O(cid:48) := S(cid:48)3 mod n, and despite O(cid:48) being malformed,
the veriﬁcation would go through.
9) Signature forgery (4) against axTLS: Furthermore,
the weakness of ignoring ASN.1 metadata, can be exploited
together with the previous attack, to make the signature forgery
even easier. The intuition is that, knowing the parsing code
would skip over the ASN.1 preﬁx (the two 0x30 ASN.1
SEQUENCE) according to the length declared, an attacker can
spend the minimal number of bytes on AS to keep the parser
entertained, with an O(cid:48) like this:
13
/** all numbers below are hexadecimals **/
00 00 00 00 00 00 00 00
H().size
TRAILING
H(m’)
00 00 00 30 00 30 00 04
and spend the gained extra free bytes at the end as trailing
ones. While for SHA-256 and |n| = 1024, a signature forgery
attack exploiting only trailing bytes has the expected iterations
of about 2145 [27], however, if we use this joint attack strategy
instead, this bound can be pushed down much lower and the
attack becomes practical. Speciﬁcally, assuming SHA-256, the
joint attack strategy would have 11 + 6 + 32 = 49 bytes ﬁxed,
and 79 trailing bytes (632 bits) at the end that the attacker
can choose arbitrarily, more than the bound of 626 bits on the
distance between two perfect cubes from eq. (1), so a forgery
should easily succeed by taking the cubic root as described
before. We have implemented attack scripts and successfully
performed this new variant of signature forgery on axTLS 2.1.3
with e = 3,|n| = 1024 and for both SHA-1 and SHA-256.
10) Denial of Service against axTLS: We further note that
because of the trusting nature of the parser in axTLS, an illegal
memory access attack against axTLS with absurd length values
is also possible, which might crash the veriﬁer and result in
a loss of service. Speciﬁcally, following the previous forgery
attack, we prepared an attack script that generates signatures
which would yield a z (the length of hash) of 0x84, and
the illegal memory access induced by this absurd value had
successfully crashed the veriﬁer in our experiments.
We further note that such a denial of service attack can be
even easier to mount than a signature forgery in the context of
certiﬁcate chain veriﬁcation. This is due to the fact that axTLS
veriﬁes certiﬁcate chains in a bottom-up manner, which con-
tributes to an attacker’s advantage: even if low-exponent public
keys are rarely used by real CAs in the wild, to crash a veriﬁer
running axTLS, one can purposefully introduce a counterfeit
intermediate CA certiﬁcate that uses a low-exponent as the j-
th one in the chain, and forge a signature containing absurd
length values as described above and put it on the (j + 1)-
th certiﬁcate. Due to the bottom-up veriﬁcation, before the
code traverses up the chain and attempts to verify the j-th
counterfeit certiﬁcate against the (j − 1)-th one, it would have
already processed the malicious signature on the (j + 1)-th
certiﬁcate and performed some illegal memory access. While a
bottom-up certiﬁcate chain veriﬁcation is not inherently wrong,
but because of the weaknesses in the signature veriﬁcation, the
bottom-up design has an unexpected exploitable side effect.
This highlights why a signature veriﬁcation code needs to
be robust regardless of the choice of e.
11) Signature forgery (1) against libtomcrypt: Just like
the ﬂaw of accepting trailing bytes in axTLS, the same ﬂaw
in libtomcrypt 1.16 can also be exploited in a signature forgery
attack if the e is small enough and |n|
is large enough,
following the same attack algorithm described in [27].
12) Signature forgery (2) against libtomcrypt: We note
that the ﬂaw of accepting less than 8 bytes of padding found
in libtomcrypt 1.16 also has serious security implications.
Combining this with the attack exploiting trailing bytes, the
low-exponent signature forgery can be made even easier.
Speciﬁcally, an attacker can craft an O(cid:48) like this:
/** all numbers below are hexadecimals **/
00 01 00 || AS || TRAILING || EXTRA TRAILING
The intuition behind is that one can shorten the padding
as much as possible, and spend the extra bytes at the end.
Assuming |n| = 1024, e = 3 and H() is SHA-1, this attack
has 38 bytes ﬁxed, and hence 1024 − 38 · 8 = 720 bits
that the attacker can choose arbitrarily. Since in this case, O(cid:48)
is essentially a number < 21010, the distance between two
consecutive perfect cubes in this range is
k3 − (k − 1)3 = 3k2 − 3k + 1 < 3 · 2674 − 3 · 2337 + 1
< 2676
(∵ k3 < 21010),
which is less than the 720 bits that can be chosen arbitrarily,
so a signature forgery would succeed easily. We have imple-
mented an attack script and veriﬁed the success of such a
signature forgery attack against libtomcrypt 1.16.
13) Other weaknesses: We note that not all the weaknesses
found can immediately lead to a practical Bleichenbacher-
style low-exponent signature forgery attack. For example,
even though the other weaknesses in mbedTLS 2.4.2, Ma-
trixSSL 3.9.1 and libtomcrypt 1.16 regarding lax length vari-
able checks allow for some bits to take arbitrary any values,
given that the number of free bits gained due to those weak-
nesses appear to be somewhat limited, it is not immediately
clear how to exploit them for signature forgery. Nevertheless,
those implementations are accepting signatures that should
otherwise be rejected, which is less than ideal and might
potentially be taken advantage of when combined with some
other unexpected vulnerabilities in a speciﬁc context.
VII. DISCLOSURE AND FIXES
In an effort of responsible disclosure, we have notiﬁed
vendors of the weak implementations so that they can have
their signature veriﬁcations hardened. CVEs are requested and
assigned selectively on the basis that a weakness can lead
to immediate practical attacks as outlined above. Developers
of MatrixSSL have acknowledged and conﬁrmed our ﬁndings,
and are currently implementing ﬁxes. strongSwan has ﬁxed the
problems since version 5.7.0 and released further patches for
older versions. Openswan has ﬁxed the exploitable weakness
since their 2.6.50.1 release and incorporated one of our forged
signatures into their unit tests. libtomcrypt developers have
created a ticket regarding the parser weakness and are currently
investigating it. We developed a patch for axTLS and tested
it with our approach before releasing it, and our patch has
been incorporated by the ESP8266 port of axTLS. At the
time of writing, we are awaiting responses from the vendor
of mbedTLS and upstream maintainer of axTLS.
VIII. RELATED WORK
Attacking PKCS#1 v1.5 implementations. Variants of imple-
mentation ﬂaws in signature veriﬁcation which enable possible
forgery attacks have been found in a variety of software over
the years [3], [5], [13], [20], [24], [25], [27], though the code-
level analysis and discovery process were mostly based on
manual inspection. We learn from these previous discoveries
and demonstrate how a principled approach can be used to ﬁnd
subtle veriﬁcation weaknesses and new variants of ﬂaws.
Another class of prominent attacks on PKCS#1 v1.5 im-
plementations is the padding oracle attacks (POAs) [8], [10],
[11], [22]. The two classes of attacks capitalize on different
14
issues. Signature forgery is made possible primarily due to
overly permissive input parsing logic that deviates from what
the speciﬁcation mandates, an example of semantic correctness
issues. POAs typically exploit the leakage provided by some
error messages observable by the adversary. Padding oracles
have also been found on deployments of symmetric key block
ciphers [6], [8]. Speciﬁcations are often implicit and sometimes
underspeciﬁed on how to prevent padding oracles.
Testing semantic correctness. As tools like libFuzzer and AFL
as well as infrastructures like OSS-Fuzz are becoming proliﬁc
at ﬁnding memory access and runtime errors, the research
community has seen an increased interests on identifying
semantic level defects. In the absence of a test oracle that
generates a correct output given an input [9], many research
efforts resort to the principle of differential testing [19].
Fuzzing has been used to analyze the semantic correctness
of TLS implementations [9]. Fuzzing can also be combined
with the L* algorithm to extract ﬁnite state machines (FSM)
out of TLS implementations, and semantic ﬂaws can be found
by analyzing the FSM [17]. There is also a framework that
enable ﬂexible conﬁguration of message variables and se-
quences for evaluating TLS libraries and servers [29]. Fuzzing
with differential testing has also been used to investigate the
semantic correctness of implementations of X.509 certiﬁcate
chain validation [12], [16]. The most relevant effort to this
paper is SymCerts [15], where symbolic execution is used with
differential testing to analyze implementations of X.509 cer-
tiﬁcate chain validation. However, their test case concretization
strategy is not directly applicable to PKCS#1 v1.5.
IX. CONCLUSION
In this paper, we propose to enhance symbolic execution
with meta-level search and constraint provenance tracking, for
automatically generating concolic test cases and easier root-
cause analysis. As a demonstration, we analyzed 15 open-
source implementations of PKCS#1 v1.5 signature veriﬁcation
and found semantic ﬂaws in 6 of them. We plan to publicly
release the relevant source code and artifacts like extracted
path constraints, so other researchers and practitioners can re-
produce our work and leverage it to test other implementations.
Acknowledgments. We thank the reviewers, especially our
shepherd Deian Stefan, for their insightful comments and
suggestions. Special thanks to Durga Keerthi Mandarapu of IIT
Hyderabad for analyzing some of the attack algorithms with us.
This work was supported in part by NSF grant CNS-1657124,
United States ARO grant W911NF-16-1-0127, as well as a
grant from the NSA-sponsored Science of Security Lablet at
North Carolina State University.
REFERENCES
[1]
[2]
“OSDI’08 Coreutils Experiments,” http://klee.github.io/docs/coreutils-
experiments.
“Tutorial on How to Use KLEE to Test GNU Coreutils,” https://
klee.github.io/tutorials/testing-coreutils.
[3] CVE-2006-4790, 2006 (accessed Aug 01, 2018), https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2006-4790.
[6] CVE-2016-0736, 2016 (accessed Nov 01, 2018), https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2016-0736.
[7] Ubuntu Manpage: ipsec rsasigkey, (accessed Aug 21, 2018), http:
//manpages.ubuntu.com/manpages/bionic/man8/ipsec rsasigkey.8.html.
[8] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J.-K.
Tsay, “Efﬁcient padding oracle attacks on cryptographic hardware,” in
Advances in Cryptology – CRYPTO 2012, 2012, pp. 608–625.
[9] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue, “A messy
state of the union: Taming the composite state machines of TLS,” in
IEEE Symposium on Security and Privacy, 2015.
[10] D. Bleichenbacher, “Chosen ciphertext attacks against protocols based
on the RSA encryption standard PKCS# 1,” in Annual International
Cryptology Conference. Springer, 1998, pp. 1–12.
[11] H. B¨ock, J. Somorovsky, and C. Young, “Return of bleichenbacher’s
oracle threat (ROBOT),” in 27th USENIX Security Symposium, 2018.
[12] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov, “Using
frankencerts for automated adversarial testing of certiﬁcate validation
in SSL/TLS implementations,” in IEEE S&P, 2014, pp. 114–129.
[13] Bugzilla, RSA PKCS#1 signature veriﬁcation forgery is possible due to
too-permissive SignatureAlgorithm parameter parsing, 2014 (accessed
Jul 18, 2018), https://bugzilla.mozilla.org/show bug.cgi?id=1064636.
[14] C. Cadar, D. Dunbar, and D. R. Engler, “Klee: Unassisted and automatic
generation of high-coverage tests for complex systems programs.” in
OSDI, 2008, pp. 209–224.
[15] S. Y. Chau, O. Chowdhury, E. Hoque, H. Ge, A. Kate, C. Nita-Rotaru,
and N. Li, “SymCerts: Practical Symbolic Execution For Exposing
Noncompliance in X. 509 Certiﬁcate Validation Implementations,” in
IEEE S&P, 2017, pp. 503–520.
[16] Y. Chen and Z. Su, “Guided differential testing of certiﬁcate validation
in ssl/tls implementations,” in ESEC/FSE 2015, pp. 793–804.
J. De Ruiter and E. Poll, “Protocol state fuzzing of TLS implementa-
tions,” in USENIX Security Symposium, 2015, pp. 193–206.
[17]
[18] A. Delignat-Lavaud, M. Abadi, A. Birrell, I. Mironov, T. Wobber, and
Y. Xie, “Web PKI: Closing the Gap between Guidelines and Practices.”
in NDSS, 2014.
[19] R. B. Evans and A. Savoia, “Differential testing: A new approach to
change detection,” in ESEC-FSE companion ’07, 2007, pp. 549–552.
[20] H. Finney, Bleichenbacher’s RSA signature forgery based on implemen-
tation error, 2006 (accessed Jul 06, 2018), https://www.ietf.org/mail-
archive/web/openpgp/current/msg00999.html.
J. Galea, S. Heelan, D. Neville, and D. Kroening, “Evaluating manual
intervention to address the challenges of bug ﬁnding with KLEE,”
2018. [Online]. Available: http://arxiv.org/abs/1805.03450
[21]
[23]
[22] S. Gao, H. Chen, and L. Fan, “Padding Oracle Attack on PKCS#1 V1.5:
Can Non-standard Implementation Act As a Shelter?” in Proceedings of
the 12th International Conference on Cryptology and Network Security
- Volume 8257, 2013, pp. 39–56.
INSIDE Secure, MatrixSSL Developers Guide, 2017 (accessed
Jul 21, 2018), https://github.com/matrixssl/matrixssl/blob/master/doc/
matrixssl dev guide.md#debug-conﬁguration.
Intel Security: Advanced Threat Research, BERserk Vulnerability – Part
2: Certiﬁcate Forgery in Mozilla NSS, 2014 (accessed Jul 06, 2018),
https://bugzilla.mozilla.org/attachment.cgi?id=8499825.
[24]
[25] S. Josefsson, [gnutls-dev] Original analysis of signature forgery prob-
lem, 2006 (accessed Jul 21, 2018), https://lists.gnupg.org/pipermail/
gnutls-dev/2006-September/001240.html.
J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[26]
[27] U. K¨uhn, A. Pyshkin, E. Tews, and R. Weinmann, “Variants of
bleichenbacher’s low-exponent attack on PKCS#1 RSA signatures,” in
Sicherheit 2008: Sicherheit, Schutz und Zuverl¨assigkeit. Konferenzband
der 4. Jahrestagung des Fachbereichs Sicherheit der Gesellschaft f¨ur
Informatik e.V. (GI), 2.-4. April 2008 im Saarbr¨ucker Schloss., 2008.
[4] OpenSSL Security Advisory [5th September 2006], 2006 (accessed Aug
02, 2018), https://www.openssl.org/news/secadv/20060905.txt.
[29]
[5] CVE-2006-4340, 2006 (accessed Jul 18, 2018), https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2006-4340.
15
[28] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efﬁcient state
merging in symbolic execution,” in ACM PLDI ’12, pp. 193–204.
J. Somorovsky, “Systematic fuzzing and testing of tls libraries,” in
Proceedings of the 2016 ACM CCS, 2016, pp. 1492–1504.