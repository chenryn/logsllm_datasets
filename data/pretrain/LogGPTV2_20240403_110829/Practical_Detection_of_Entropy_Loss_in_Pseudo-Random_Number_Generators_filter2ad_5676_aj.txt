### Leakage-Resilient Cryptography: Defining Reasonable Restrictions

A fundamental issue in leakage-resilient cryptography is to define reasonable restrictions on the leakage functions. We propose the following key restrictions:

1. **Only Computation Leaks**:
   - Based on the axiom "Only Computation Leaks" by Micali and Reyzin [MR04], we assume that only the data being manipulated during a computation can leak. The adversary cannot learn information about stored but unmanipulated data, as observed in [AGV09, DKL09].
   - This formalization is widely accepted [FPS12, YS13, ABF13] and aligns with practical observations.
   - It allows for the cryptographic primitives to be split into smaller, independently leaking blocks, and the adversary can choose a different leakage function for each block. This model is referred to as granular.
   - However, this model does not capture all leakage attacks, such as the cold-boot attack, where all memory contents leak, even if they were never accessed.

2. **Bounded Leakage per Iteration**:
   - Following previous works [DP08, Pie09, YSPY10, FPS12, YS13, ABF13], the adversary can choose polynomial-time leakage functions with a restriction on the output size.
   - Without this restriction, the adversary could use the identity function to recover the entire secret state in one observation.
   - Therefore, the output length of the leakage functions is bounded by a parameter \(\lambda\), which depends on the security parameter of the cryptographic primitives.
   - Rivain and Prouff [PR13] consider noisy leakage functions with a bound on the statistical distance between the distribution of the secret and the distribution given the leakage.

3. **Non-Adaptive Leakage**:
   - The third assumption is based on the practical observation that leakage functions are inherent to the device.
   - Some authors [DP08, Pie09] allow adaptive leakage functions, giving the adversary more power to adaptively choose the leakage function based on previous invocations.
   - This leads to unrealistic scenarios, as the adversary can predict further steps of the algorithm. In practice, the leakage function is related to the device and not to previous computations.
   - For these reasons, we, like many others [YSPY10, FPS12, YS13, ABF13], consider only non-adaptive leakage functions.

### Leakage Security of Stateful Pseudo-Random Number Generators

To model the potential leakage of sensitive information in a stateful pseudo-random number generator (key, next), we use leakage functions, collectively denoted as \( f \). Since the leakage is non-adaptive, the leakage functions \( f \) are determined before the security game starts and are not chosen by the adversary during the game.

#### Procedures in Security Game LPR(f)

- **proc. leak-next**:
  - \( L \leftarrow f(S) \)
  - \( (S, R) \leftarrow \text{next}(S) \)
  - OUTPUT \((L, R)\)

- **proc. next-ror**:
  - \( (S, R_0) \leftarrow \text{next}(S) \)
  - \( b \leftarrow \{0, 1\} \)
  - RETURN \( R_b \)

- **proc. initialize**:
  - \( S \leftarrow \text{key} \)
  - \( b \leftarrow \{0, 1\} \)

- **proc. finalize(b*)**:
  - IF \( b = b^* \) RETURN 1
  - ELSE RETURN 0

The objective of the adversary \( A \) is to distinguish the output of the generator at one round from a uniformly distributed random value, given the successive outputs and leakages for the previous rounds. The security game is described in Figure 3.10, similar to the standard security definition for a stateful pseudo-random number generator, with the additional procedure `leak-next`. The length of the output of the leakage functions is denoted by \(\lambda\).

#### Definition of (t, ε, f)-Leakage Resilience

A stateful pseudo-random number generator \( G = (\text{key}, \text{next}) \) is \((t, \epsilon, f)\)-leakage resilient for the leakage function \( f \) if for any attacker \( A \) running in time at most \( t \), the advantage of \( A \) in game LPR(f) is at most \(\epsilon\).

It is important to note that security is not achievable for all leakage functions. For example, if the leakage function \( f \) is defined as \( f(S) = \text{next}(\text{next}(S)) \), no construction can be proven secure. Therefore, a clear definition of the leakage function is a prerequisite for any security statement.

### Constructions of Leakage-Resilient Stateful Pseudo-Random Number Generators

Several constructions of leakage-resilient stateful pseudo-random number generators have been proposed. We present three notable ones:

1. **Construction from [YSPY10]**:
   - The internal state consists of three randomly chosen values: a secret key \( S_0 \in \{0, 1\}^n \) and two public parameters \( (p_0, p_1) \in \{0, 1\}^{2n} \).
   - It uses a weak pseudo-random function \( F \) that alternates between \( p_0 \) and \( p_1 \): at round \( i \), the generator computes \(\text{next}(S_{i-1}) = (S_i, R_i) = F(S_{i-1}, p_{i-1 \mod 2})\).

2. **Construction from [FPS12]**:
   - Similar to the previous construction, but the key algorithm generates a secret state \( K_0 \) and a sequence of public values \( p_0, p_1, \ldots \) used as input to the weak pseudo-random function \( F \).
   - This construction addresses a subtle flaw in the proof of [YSPY10] and ensures independence between the inputs of \( F \). However, it requires a large amount of public randomness, making it impractical.

3. **Construction from [YS13]**:
   - The internal state consists of two randomly chosen values: a secret key \( S_0 \in \{0, 1\}^\mu \) and a public parameter seed \( \in \{0, 1\}^\mu \).
   - The construction has two stages:
     - **Upper Stage**: A (non-leakage-resilient) pseudo-random function \( F_0 : \{0, 1\}^\mu \times \{0, 1\}^\mu \to \{0, 1\}^\mu \) is processed in counter mode to expand the seed into uniformly random values \( p_0, p_1, \ldots \).
     - **Lower Stage**: A (non-leakage-resilient) pseudo-random function \( F : \{0, 1\}^\mu \times \{0, 1\}^\mu \to \{0, 1\}^{2\mu} \) generates outputs \( R_i \) and updates the secret \( S_i \) so that it is never used more than twice with the public values \( p_{i-1} \).

### Analysis of Security Models

We summarize the features and differences of the security models presented in this chapter. Table 3.1 outlines the different security properties, including the pseudo-random number generator definition, attacker capabilities, and whether there exists a secure construction and its security parameters.

| Pseudo-Random Number Generator Definition | Security Property | Attacker Capabilities | Construction |
|--------------------------------------------|-------------------|-----------------------|--------------|
| \( S \leftarrow \text{key} \)               | CIA               | next-ror, get-state   | G / F Extract |
| \( (S_0, R) \leftarrow \text{next}(S) \)    | CSA               | getinput, get-state, setinput | G / F Extract |
| \( (K, S) \leftarrow \text{key}() \)        | KKA               | getinput, get-key     | G / F Extract |
| \( (S_0, R) \leftarrow \text{next}(S, K, I) \) | BY-FWD           | getinput, get-state, set-state | G / F Extract |
| \( \text{Extract(seed, I)} \leftarrow (\text{seed, I}) \) | BST-RES(τ)       | F                     | G / F Extract |
| \( S_0 \leftarrow \text{refresh}(S, I) \)   | BH-ROB(H)         | good-refresh, bad-refresh | G / F Extract |
| \( (S_0, R) \leftarrow \text{next}(S) \)    | LPR(f)            | next-ror, leak-next   | G / F Extract |

### Comparison of Security Notions

- **State Compromise**:
  - [KSWH98, Gut98] model a pseudo-random number generator with input as a stateful algorithm, allowing an adversary to interact with and compromise the internal state.
  - [Gut98] suggests implementing countermeasures in the environment rather than in the design.
  - [KSWH98] and [DHY02] propose protection against state compromise, ensuring that an adversary with access to the state or collected randomness cannot gain information about the next state.
  - [BY03] and [BH05] formalize forward security, preventing an adversary from recovering past outputs after state compromise.
  - [BH05] introduces backward security and robustness, allowing the generator to recover from a state compromise at any time.

- **Entropy Source**:
  - [BST03] assumes a high-rate entropy source and focuses on extraction, without considering stateful generators or state compromise.

This analysis highlights the different approaches and requirements for securing pseudo-random number generators against various types of attacks and compromises.