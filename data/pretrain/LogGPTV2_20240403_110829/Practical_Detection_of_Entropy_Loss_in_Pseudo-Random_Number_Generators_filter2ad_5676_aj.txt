guaranteed (one simple attack would be to leak the complete secret or the next iteration of the
generator). Yet a fundamental issue in the context of leakage-resilient cryptography is to deﬁne
reasonable restrictions on the leakage functions. We propose to base our work on the following
restrictions:
• Only Computation Leaks. From the axiom ’Only Computation Leaks’ of Micali and
Reyzin [MR04], one ﬁrst assumption is to assume that only the data being manipulated in
a computation can leak during this computation. That is, the adversary cannot learn in-
formation on a stored but not manipulated data as in [AGV09,DKL09]. This formalization
is very classical [FPS12, YS13, ABF13] and close to the practical observations. From this
consideration, it is possible (a) to split the cryptographic primitives into smaller blocks
that leak independently on functions of their speciﬁc manipulated inputs and (b) to allow
the adversary to choose a diﬀerent leakage function for each small block. This model is
referred to as granular. However note that in this model some leakage attacks are not
captured, such as the cold-boot attack, where all memory contents leak information, even
if they were never accessed.
• Bounded Leakage per Iteration. As most previous works [DP08, Pie09, YSPY10,
FPS12,YS13,ABF13], the adversary can choose the polynomial time leakage functions with
a restriction on the size of the output. Without this restriction, the adversary could choose
the identity function and recover the entire secret state in one observation. Therefore,
one second assumption is to bound the output length of the leakage functions with a
parameter λ depending on the security parameter of the cryptographic primitives. Note
that another choice has been made by Rivain and Prouﬀ in [PR13]. They consider noisy
leakage functions with a bound not on the output length but on the statistical distance
between the distribution of the secret and the distribution of the secret given the knowledge
of the leakage.
• Non-Adaptive Leakage. The third assumption is based on the practical observation
whereby leakage functions completely depend on the inherent device. Another point of
view is followed by some authors [DP08,Pie09] who give a stronger power to the adversary
by authorizing adaptive leakage functions. The adversary is then allowed to adaptively
choose the leakage function according to its current knowledge acquired from the previous
invocations. Even if this model aims to be more general, this choice leads to unrealistic
— 44 —
3.7. Leakage Resilient Stateful Pseudo-Random Number Generators
scenarios since the adversary is then able to predict further steps of the algorithm. And
as said above, in practice, the leakage function is related to the device and not on the
previous computations. For these reasons, this work, as many others before [YSPY10,
FPS12,YS13,ABF13], consider only non-adaptive leakage functions.
Let us now describe the leakage security of a stateful pseudo-random number generator (key, next),
as in Deﬁnition 17. To model the potential leakage of sensitive information, we use leakage func-
tions that we globally name f. Note that, as we mention earlier, the leakage is non-adaptive,
therefore the leakage functions f are a parameter of the game: they are determined before the
security game starts and not chosen by the adversary during the game.
(
)
proc. leak-next
L ← f(S)
(S, R) ← next(S)
OUTPUT (L, R)
proc. next-ror
(S, R0) ← next(S)
$← {0, 1}‘
R1
RETURN Rb
proc. initialize
S
$← key;
$← {0, 1}
b
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
Figure 3.10 – Procedures in Security Game LPR(f)
The objective of the adversary A is to distinguish the output of the generator at one round
from a uniformly distributed random value, given the successive outputs and leakages for the
previous rounds. Formally, the security game is described in Figure 3.10 and is similar as the
one that deﬁnes the standard security of a stateful pseudo-random number generator, with the
additional procedure leak-next. We denote the length of the output of the leakage functions with
λ.
Deﬁnition 26. A stateful pseudo-random number generator G = (key, next) is (t, ε, f)-leakage
resilient for the leakage function f if for any attacker A running in time at most t, the advantage
of A in game LPR(f) is at most ε.
It is important to note that the security targeted in this security model is not reachable for all
leakage functions. Consider for example the leakage function f : f(S) = next(next(S)). Then
with this leakage function, no construction can be proven secure. Therefore, a clear deﬁnition
of the leakage function is a pre-requisite for any security statement.
3.7.2 Constructions
Several onstructions of leakage resilient stateful pseudo-random number generators have been
proposed. We choose to present three of them, among all the existing ones, because we will use
them as a basis to build a leakage resilient robust pseudo-random number generator with input,
in Chapter 6. The ﬁrst one is the construction from Yu, Standaert, Perreira and Yung [YSPY10].
The second one is a binary tree pseudo-random function introduced by Faust, Pietzrak and
Schipper [FPS12] and the third one is a sequential stateful pseudo-random number generator
with minimum public randomness proposed by Yu and Standaert [YS13]. We also focus on the
presentation of their design and contrary to the previous presentations, we do not give precise
statements and security bounds because we will use these constructions in a black-box way.
Construction from [YSPY10]. The ﬁrst construction was proposed in [YSPY10].
It is
illustrated in Figure 3.11. The stateful pseudo-random number generator (key, next) comes with
an internal state made of three randomly chosen values: a secret key S0 ∈ {0, 1}n and two public
parameters (p0, p1) ∈ {0, 1}2n. It uses a weak pseudo-random function F, that uses the values
— 45 —
Chapter 3. Security Models for Pseudo-random Number Generators
p1
p0
S0
key
F
S1
R1
F
S2
R2
F
S3
R3
F
S4
R4
···
Figure 3.11 – Construction from [YSPY10]
p0 and p1 in an alternative way: at round i, the generators computes next(Si−1) = (Si, Ri) =
F(Si−1, pi−1 mod 2).
···
p1
p0
S0
key
F
S1
R1
F
S2
R2
···
Figure 3.12 – Construction from [FPS12]
Construction from [FPS12]. The second solution was proposed in [FPS12]. It is illustrated
It is similar to the previous construction, with the diﬀerence that the key
in Figure 3.12.
algorithm generates a secret state K0 and a sequence of public values p0, p1,··· that are used as
input to the weak pseudo-random function F. This construction was proposed as an extension
of the previous one because they identiﬁed a subtle ﬂaw in the proof of [YSPY10] and they
therefore proposed a proven construction with independence between the inputs of the weak
pseudo-random function F. However, in the proposed construction, the needed large amount of
public randomness prevents its practical use.
Construction from [YS13]. Yu and Standaert propose an extension of the previous construc-
tions where the issue raised by the needed large amount of public randomness prevent from their
practical use. The stateful pseudo-random number generator comes with an internal state made
of two randomly chosen values: a secret key S0 ∈ {0, 1}µ and a public parameter seed ∈ {0, 1}µ.
The construction is made of two stages. In the upper stage, a (non leakage-resilient) pseudo-
random function F0 : {0, 1}µ × {0, 1}µ → {0, 1}µ is processed in counter mode to expand seed
into uniformly random values p0, p1, . . . . In the lower stage, a (non leakage-resilient) pseudo-
random function F{0, 1}µ × {0, 1}µ → {0, 1}2µ generates outputs Ri and updates the secret Si
so it is never used more than twice with the public values pi−1 . This two-stage construction is
illustrated in Figure 3.13.
— 46 —
3.8. Analysis
seed
0
key
S0
F
p0
F0
F
p1
F0
1
S1
R1
2
S2
R2
···
···
Figure 3.13 – Construction from [YS13]
3.8 Analysis
In this section, we summarize the features and diﬀerences of the security models presented in
this chapter.
We present the diﬀerent security properties seen in this chapter with Table 3.1. The security
properties are given (CIA, CSA, KKA, BY-FWD, BST-RES, BH-ROB, LPR) and for each property,
we precise (a) the pseudo-random number generator deﬁnition (b) the attacker capabilities (c)
if there exists a secure construction and its security parameters. Note that [KSWH98, Gut98]
do not give a secure construction.
Table 3.1 – Security Properties of Pseudo-Random Number Generators
Pseudo-Random Number
Generator Deﬁnition
S ← key
(S0, R) ← next(S)
(K, S) ← key()
(S0, R) ← next(S, K, I)
Extract(seed, I) ← (seed, I)
S0 ← refresh(S, I)
(S0, R) ← next(S)
(S0, R) ← next(S)
S ← key
Security
Property
BY-FWD
CIA
CSA
KKA
BST-RES(τ)
BH-ROB(H)
LPR(f)
Attacker
Capabilities
next-ror, get-state
getinput, get-state, setinput
getinput, get-state, set-state
getinput, get-key
F
good-refresh, bad-refresh
get-state, next-ror
next-ror, leak-next
Construction
G / F Extract










: The construction involves a standard pseudo-random number generator G and / or a pseudo-random
function F and / or a randomness extractor Extract.
We give now a comparison between these security notions.
State compromise. The ﬁrst important feature of [KSWH98, Gut98] is the modelling of a
pseudo-random number generator with input as a stateful algorithm. This modelling is also
used in [BY03, DHY02, BH05]. The choice of stateful algorithms actually allows to deﬁne an
adversary that interacts with the generator and can compromise its internal state: in all these
— 47 —
Chapter 3. Security Models for Pseudo-random Number Generators
models, the adversary A has access to the current value of the internal state S with a procedure
named get-state.
The response to state compromise, however, is speciﬁc to each model.
In [Gut98], it is not
considered that this attack should be taken into account in the design of the pseudo-random
number generator, but countermeasures should be implemented by its environment. However,
in [KSWH98], it is taken into account, and therefore a pseudo-random number generator should
be protected against it by design. An adversary that gets access to the state S but not to
the collected randomness, and an adversary that gets the collected randomness but not to the
state S, should both be unable to get information about the next state. The same protection
is also proposed in [DHY02], although the pseudo-random number generator deﬁnition is a bit
diﬀerent, as it involves a third component named key. The main idea that is implicit here is
that a generator is not protected against a joint compromise of the internal state and of the
randomness source, but only against a compromise of one or another.
In [KSWH98], an adversary that gets access to the state S should not be able to recover past
outputs. This protection, named Forward Security, is formalized in [BY03], although the com-
promise of the randomness source is not considered here. Forward security is also captured
in [BH05], in a similar way than in [BY03]: attacker A has access to two procedures get-state
and set-state that allow her to get or to set the content of the internal state. As in [BY03],
the call to either get-state or set-state shall be the last call that A is allowed to make. How-
ever, in [BY03], no additional security property is required once the state gets compromised and
the model does not deﬁne how the generator shall recover from a compromise. This recover-
ing property is deﬁned in [BH05] through the notion of backward security and more generally
through the notion of robustness. In [BH05], a pseudo-random number generator with input is
backward secure if it starts with a compromised state and then recovers from its compromise.
More generally, in [BH05], a pseudo-random number generator is robust if it can recover from a
state compromise that occurs at any time (not only at a last stage or in a ﬁrst stage). Similarly,
in [DHY02], a compromise of the state S can be ’repaired’ with the use of a non compromised
auxiliary input while a compromise of the key can not be repaired. This recovering behavior,
which is the starting point of backward security, is therefore not captured by [DHY02].
The model of [BST03] does not concern stateful pseudo-random number generators. Hence, the
state compromise is not considered in the security model and it is assumed that the entropy
source produces random bits at a high rate, as the only operation that is done is the extraction.
Once extracted, the output can be used directly by a consuming application or by a standard
pseudo-random number generator, however this operation is not described. The full description
of a pseudo-random number generator with input with both an extraction phase and a genera-