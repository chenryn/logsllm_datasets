A revision history can be built at the system level or ap-
plication level. In fact, it does exist in the system log or ap-
plication level. For example, some system logs record dif-
ferent versions of data objects written at different times. A
history of a bank account is also a revision history.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:34:29 UTC from IEEE Xplore.  Restrictions apply. 
Besides the revision history, the system needs to record
which versions a speciﬁc task reads and which versions the
task writes, recording this information is also implemented
in modern workﬂow systems.
4.2. Architecture
The architecture of an attack recovery system for work-
ﬂows is shown in Figure 2.
IDS
... ...
Recovery Analyzer
... ...
Intrusion Alerts
Recovery tasks
Scheduler
... ...
New tasks
Figure 2. Processing Structure of an Attack
Recovery System
In this architecture, there are two independent processing
parts, the recovery analyzer and the task scheduler. An inde-
pendent Intrusion Detection System (IDS) reports malicious
tasks to the system by periodically putting IDS alerts in a
queue. The recovery analyzer processes IDS alerts one by
one. It determines the amount of damage and generates re-
covery tasks. The recovery tasks are sorted and put into an-
other queue. The tasks scheduler schedules recovery tasks
and normal tasks concurrently.
4.3. Algorithms
The recovery analyzer runs the following algorithm.
1. Wait until the queue of IDS alerts is not empty. Get one
IDS alert and continue.
2. Determine all damage caused by the attack that the IDS
reported and generate undo tasks according to Theo-
rem 2. Abort and block all running tasks that are de-
pendent on damaged tasks.
3. Generate redo tasks according to Theorem 3. For all
Ti : undo(Ti) ∈ R, if redo(Ti) /∈ R, mark undo(Ti)
as undo(Ti)b. Otherwise, mark redo(Ti) as redo(Ti)b.
4. Set up precedence orders among recovery tasks ac-
cording to Theorem 4.
5. Sort recovery tasks and put them into the queue of re-
covery tasks.
6. Goto step 1.
There is no special order that needs to be satisﬁed while
scheduling normal and recovery tasks. After a recovery task
Tb is done, release tasks that are blocking on it and provide
them data objects with revision number tm if the number
exists, otherwise with revision number tm−1.
5. Evaluation
5.1. Impacts on the System by the IDS
Our techniques do not depend on timely reporting by the
IDS. As long as the damage is reported, whether it is re-
ported by the IDS or the administrator of a system, our tech-
niques work out all affected tasks and repair them. However,
if the reporting delay is signiﬁcant, more tasks in the system
will be affected before recovery, which leads to more time
being spent on recovery. Any system that has an IDS suffers
with this problem, except intrusion masking systems [15].
Since we cannot guarantee that an IDS is 100% accu-
rate, we have to depend on the administrator of a system to
compensate for the inaccuracy. The administrator may re-
vise the damaged-task set B according to further investiga-
tion. Consequently, the recovery system repairs the damage
newly reported by the administrator. Since our techniques
do not depend on timely reporting, the delay from the ad-
ministrator is acceptable.
5.2. Performance
There are two queues in the system. The analyzer and
the scheduler work independently if both queues are not
full. Suppose the arrival of IDS alerts has a Poisson distri-
bution with rate λ1, the time distribution of processing IDS
alerts is exponentially distributed with parameter µ1, and
the time distribution of executing recovery tasks is also ex-
ponentially distributed with parameter µ2. The system be-
haves like a tandem Jackson network.
while considering the loss probability of IDS alerts.
We are interested in relationships among λ1, µ1 and µ2
While µ2 ≤ µ1, the queue of recovery tasks becomes
the bottleneck of the system. The queue of recovery tasks
will be full and no further recovery tasks could be gener-
ated. Therefore, no further IDS alerts could be processed.
This situation should be avoided.
While µ1 < µ2, the queue of IDS alerts becomes the bot-
tleneck of the system. The loss probability of IDS alerts is
determined by the processing rate µ1. Consider the buffer
size of the queue is K. According to our assumptions the
queue becomes a M/M/1/K-queue [14, 12]. The steady
state probability for such a queue is given by:
1 − ρ
1 − ρK+1
p0 =
pk = p0ρk
(1)
(2)
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:34:29 UTC from IEEE Xplore.  Restrictions apply. 
i
t
s
u
o
c
p
s
u
s
f
i
o
r
e
b
m
u
N
s
k
s
a
i
t
s
u
o
c
p
s
u
s
f
i
48
46
44
42
40
0
45
40
35
30
25
20
15
10
5.3. Integrity Level
o
r
e
b
m
u
N
where 1 ≤ k ≤ K, ρ = λ1
µ1 , and pk indicates that there
are k IDS alerts in the queue. Let us assume λ1 < µ1 < µ2,
ρ < 1. We have
E[N] =
K(cid:2)
k=0
kpk = ρ
1 − ρ
− K + 1
1 − ρK+1
ρK+1
(3)
Thus,
E[T ] = E[N]
λ1
=
1
µ1 − λ1
− K + 1
µ1 − λ1ρk
ρk
(4)
Suppose the expected delay time of IDS reports is E[T (cid:1)],
the total time an IDS alert exists in the system is E[T (cid:1)] +
E[T ]. During that time, l = µ3(E[T (cid:1)] + E[T ]) tasks have
been executed, where µ3 is the executing rate of normal
tasks. In fact, l is the number of tasks that the analyzer is
supposed to scan in the system log. The larger l is, the more
unidentiﬁed bad tasks there are, and the longer time the an-
alyzer takes to scan the log.
l describes the integrity level of the system. In other
words, how many tasks exist where it is unknown whether
they are infected or not. Although reducing µ3 improves in-
tegrity, it will enlarge the degradation of performance simul-
taneously. An extreme situation is where µ3 = 0, in other
words, stop service to normal tasks. Then no further dam-
age occurs. We can also reduce the delay time of IDS re-
ports and increase the processing speed of IDS alerts to im-
prove the integrity level of the system without sacriﬁcing
the performance µ3, which is what we usually do.
Another parameter affecting the integrity level of the sys-
tem is loss probability of IDS alerts. The loss probability is
given by:
54
52
s
k
s
a
50
48
47
46
45
44
43
42
41
i
i
s
k
s
a
t
s
u
o
c
p
s
u
s
f
o
r
e
b
m
u
N
15
20
40
0
1
5
10
µ
1
(a)
4
5
2
λ
1
3
(b)
s
k
s
a
i
t
s
u
o
c
p
s
u
s
f
i
o
r
e
b
m
u
N
s
s
o
l
P
220
200
180
160
140
120
100
80
60
40
5
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0
0
15
20
10
µ
3