### Revision History and System Logging

A revision history can be maintained at both the system and application levels. In fact, such histories often exist within system logs or at the application level. For instance, some system logs record different versions of data objects written at various times. Similarly, a bank account's transaction history is an example of a revision history.

**Source:** Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003), 1063-9527/03 $17.00 Â© 2003 IEEE. Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 07:34:29 UTC from IEEE Xplore. Restrictions apply.

### Additional Recording Requirements

Beyond maintaining a revision history, the system must also track which versions of data are read and written by specific tasks. This functionality is commonly implemented in modern workflow systems.

### 4.2. Architecture

The architecture of an attack recovery system for workflows is illustrated in Figure 2.

```
IDS
... ...
Recovery Analyzer
... ...
Intrusion Alerts
Recovery Tasks
Scheduler
... ...
New Tasks
```

**Figure 2. Processing Structure of an Attack Recovery System**

This architecture consists of two independent processing components: the recovery analyzer and the task scheduler. An independent Intrusion Detection System (IDS) periodically reports malicious tasks by placing IDS alerts in a queue. The recovery analyzer processes these alerts one by one, determining the extent of damage and generating recovery tasks. These tasks are then sorted and placed into another queue. The task scheduler concurrently schedules both recovery and normal tasks.

### 4.3. Algorithms

The recovery analyzer follows the following algorithm:

1. **Wait for IDS Alerts:** Wait until the queue of IDS alerts is not empty. Retrieve one alert and proceed.
2. **Determine Damage and Generate Undo Tasks:** Identify all damage caused by the reported attack and generate undo tasks based on Theorem 2. Abort and block all running tasks that depend on damaged tasks.
3. **Generate Redo Tasks:** According to Theorem 3, for all \( T_i \): if \( \text{undo}(T_i) \in R \) and \( \text{redo}(T_i) \notin R \), mark \( \text{undo}(T_i) \) as \( \text{undo}(T_i)b \). Otherwise, mark \( \text{redo}(T_i) \) as \( \text{redo}(T_i)b \).
4. **Set Precedence Orders:** Establish precedence orders among recovery tasks according to Theorem 4.
5. **Sort and Queue Recovery Tasks:** Sort the recovery tasks and place them into the queue of recovery tasks.
6. **Repeat Process:** Return to step 1.

There is no specific order required for scheduling normal and recovery tasks. After a recovery task \( T_b \) is completed, release any blocked tasks and provide them with data objects using the latest revision number \( t_m \) if it exists; otherwise, use the previous revision number \( t_{m-1} \).

### 5. Evaluation

#### 5.1. Impact of IDS Reporting

Our techniques do not rely on timely reporting by the IDS. As long as the damage is reported, whether by the IDS or the system administrator, our methods can identify and repair affected tasks. However, significant reporting delays can lead to more tasks being affected before recovery, increasing the time needed for recovery. Any system with an IDS faces this issue, except for intrusion masking systems [15].

Since we cannot ensure 100% accuracy from the IDS, we rely on the system administrator to correct inaccuracies. The administrator may update the set of damaged tasks \( B \) based on further investigation, allowing the recovery system to address newly reported damage. Given that our techniques do not require timely reporting, delays from the administrator are acceptable.

#### 5.2. Performance

The system has two queues: one for IDS alerts and one for recovery tasks. The analyzer and scheduler operate independently as long as both queues are not full. Assume the arrival of IDS alerts follows a Poisson distribution with rate \( \lambda_1 \), the processing time for IDS alerts is exponentially distributed with parameter \( \mu_1 \), and the execution time for recovery tasks is exponentially distributed with parameter \( \mu_2 \). The system behaves like a tandem Jackson network.

We are interested in the relationships among \( \lambda_1 \), \( \mu_1 \), and \( \mu_2 \):

- **When \( \mu_2 \leq \mu_1 \):** The queue of recovery tasks becomes the bottleneck. If this queue is full, no further recovery tasks can be generated, and no additional IDS alerts can be processed. This situation should be avoided.
- **When \( \mu_1 < \mu_2 \):** The queue of IDS alerts becomes the bottleneck. The loss probability of IDS alerts is determined by the processing rate \( \mu_1 \). Assuming the buffer size of the queue is \( K \), the queue can be modeled as an M/M/1/K-queue [14, 12]. The steady-state probability for such a queue is given by:
  \[
  p_0 = \frac{1 - \rho}{1 - \rho^{K+1}}
  \]
  \[
  p_k = p_0 \rho^k \quad \text{for} \quad 1 \leq k \leq K
  \]
  where \( \rho = \frac{\lambda_1}{\mu_1} \) and \( p_k \) indicates the probability of having \( k \) IDS alerts in the queue. Assuming \( \lambda_1 < \mu_1 < \mu_2 \) and \( \rho < 1 \), the expected number of IDS alerts in the queue is:
  \[
  E[N] = \sum_{k=0}^{K} k p_k = \frac{\rho}{1 - \rho} - \frac{K + 1 - \rho^{K+1}}{1 - \rho^{K+1}}
  \]
  Thus, the expected delay time of IDS reports is:
  \[
  E[T] = \frac{E[N]}{\lambda_1} = \frac{1}{\mu_1 - \lambda_1} - \frac{K + 1 - \rho^{K+1}}{\mu_1 - \lambda_1 \rho^k}
  \]

Suppose the expected delay time of IDS reports is \( E[T'] \). The total time an IDS alert exists in the system is \( E[T'] + E[T] \). During this time, \( l = \mu_3 (E[T'] + E[T]) \) tasks are executed, where \( \mu_3 \) is the execution rate of normal tasks. \( l \) represents the number of tasks the analyzer needs to scan in the system log. A larger \( l \) means more unidentified bad tasks and longer scanning times.

\( l \) describes the integrity level of the system, indicating the number of tasks whose infection status is unknown. Reducing \( \mu_3 \) improves integrity but degrades performance. An extreme case is \( \mu_3 = 0 \), meaning no service to normal tasks, preventing further damage. Alternatively, reducing the delay time of IDS reports and increasing the processing speed of IDS alerts can improve the integrity level without sacrificing performance.

Another factor affecting the integrity level is the loss probability of IDS alerts, given by:
\[
P_{\text{loss}} = \frac{\lambda_1 - \mu_1}{\lambda_1}
\]

### 5.3. Integrity Level

The integrity level of the system is influenced by the number of tasks that are uncertain regarding their infection status. While reducing the execution rate \( \mu_3 \) can improve integrity, it also degrades performance. An optimal balance is achieved by minimizing the delay in IDS reports and enhancing the processing speed of IDS alerts.