# spring-beans RCE
## 漏洞概述
### 漏洞概述
该漏洞的本质类似于变量覆盖漏洞，利用变量覆盖，修改`tomcat`的配置，并修改`tomcat`的日志位置到根目录，修改日志的后缀为jsp，达到木马文件写入的效果
值得一提的是该漏洞是`CVE-2010-1622`的绕过，详情可以参考 
### 影响范围
  * `spring-beans`版本`5.3.0 ~ 5.3.17`、`5.2.0 ~ 5.2.19`
  * `JDK 9+`
  * `Apache Tomcat`
  * 传参时使用`参数绑定`，且为`非基础数据类型`
### 漏洞核心
该漏洞的关键点，在于`JDK内省机制`以及`Spring属性注入`，在后文中都有详细的解析
## 内省机制
### JavaBean
#### 什么是JavaBean
  * JavaBean是一种特殊的类，其内部没有功能性方法，主要包含信息字段和存储方法，因此JavaBean通常用于传递数据信息
  * JavaBean类中的方法用于访问私有的字段，且方法名符合一定的命名规则
一般来说满足如下条件的，可以称为一个JavaBean
  * 所有属性为`private`
  * 提供默认的无参构造方法
  * 提供`setter&getter`方法，让外部可以`设置&获取`JavaBean的属性
#### JavaBean的命名规则
  1. JavaBean中的方法，去掉set/get前缀，剩下的就是属性名
**method:** `getName()` \--> **property:** `name`
  1. 去掉前缀，剩下的部分中第二个字母是大写/小写，则剩下的部分应全部大写/小写
`getSEX()`
#### JavaBean内省
一个类被当作javaBean使用时，JavaBean的属性是根据方法名推断出来的，使用它的程序看不到JavaBean内部的成员变量
内省即：当一个类是满足JavaBean条件时，就可以使用特定的方式，来获取和设置JavaBean中的属性值
### API
Java中提供了一套API来访问某个属性的setter/getter方法，一般的做法是通过`Introspector.getBeanInfo()`方法来获取某个对象的`BeanInfo`
，然后通过
`BeanInfo`来获取属性的描述器`PropertyDescriptor`，通过`PropertyDescriptor`就可以获取某个属性对应的`getter/setter`方法，然后通过反射机制来调用这些方法。
#### Introspector
除了JDK的`Introspector`，还有`Apache BeanUtils`，这里仅介绍前者
`Introspector`类位于`java.beans`包下
##### Introspector api
该类中的主要方法`getBeanInfo`都是静态方法
    // 获取 beanClass 及其所有父类的 BeanInfo
    BeanInfo getBeanInfo(Class beanClass)
    // 获取 beanClass 及其指定到父类 stopClass 的 BeanInfo 
    BeanInfo getBeanInfo(Class beanClass, Class stopClass)
##### beaninfo api
    // bean 信息
    BeanDescriptor beanDescriptor = beanInfo.getBeanDescriptor();
    // 属性信息
    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
    // 方法信息
    MethodDescriptor[] methodDescriptors = beanInfo.getMethodDescriptors();
##### demo
有这样一个JavaBean，尝试用Introspector来获取其属性
**UserInfo**
    public class UserInfo {
        private String id;
        private String name;
        public String getSex() { return null; }
        public String getId() { return id; }
        public void setId(String id) { this.id = id; }
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
    }
**IntrospectorTest**
这里调用`Introspector.getBeanInfo`，不使用带有`stopClass`的重载方法，会让JDK连父类一并进行内省操作
    public class IntrospectorTest {
        public static void main(String[] args) throws IntrospectionException {
            BeanInfo beanInfo = Introspector.getBeanInfo(UserInfo.class);
            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
            for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
                System.out.println("Property: " + propertyDescriptor.getName());
            }
        }
    }
**output**
Property:class  
Property:id  
Property:name  
Property:sex
**预期内的结果**
  * id (有getter方法)
  * name (有getter方法)
  * sex (虽然没有该属性，但是有getter方法，内省机制就会认为存在sex属性)
**非预期内的结果**
  * class
这里出现了一个非常有意思的点，也是导致整个漏洞的关键因素之一，为什么会出现class呢
因为在Java中，所有的类都会默认继承`Object`类
而在`Object`中，又存在一个`getClass()`方法，内省机制就会认为存在一个class属性
尝试再获取class属性的beaninfo
`Introspector.getBeanInfo(Class.class);`
Property:annotatedInterfaces  
Property:annotatedSuperclass  
Property:annotation  
Property:annotations  
Property:anonymousClass  
Property:array  
Property:canonicalName  
Property:class  
Property:classLoader  
Property:classes  
Property:componentType  
Property:constructors  
Property:declaredAnnotations  
Property:declaredClasses  
......
已经可以看到熟悉的`classLoader`了
## 参数绑定
该漏洞的原理类似变量覆盖漏洞，通过传参修改tomcat日志的路径以及后缀等，本质其实是`SpringMVC`的参数绑定
简单介绍一下`SpringMVC`的参数绑定
### 基本类型、包装类型
基本类型int
    @RequestMapping("/index")
    @ResponseBody
    public String baseType(int age) {
            return "age: " + age;
    }
包装类型
    @RequestMapping("/index")
    @ResponseBody
    public String packingType(Integer age) {
        return "age: " + age;
    }
包装类型主要是为了规避参数为空的问题，因为其不传值就赋null，但是int类型却不能为null
### 对象
#### 多层级对象
    public class UserInfo {
        private Integer age;
        private String address;
        ......补充其 get set toString 方法
    }
在 User 类中引入这个类，这种情况该如何绑定参数呢
    public class User {
        private String id;
        private String name;    
        private UserInfo userInfo;
    }
[http://localhost:8080/index?id=1&name=Steven&userInfo.age=20&userInfo.address=BeiJing](http://localhost:8080/index?id=1&name=Steven&userInfo.age=20&userInfo.address=BeiJing)
#### 同属性对象
如果我们想要直接接收两个对象，有时候免不了有相同的成员，例如我们的`User`和`Student`类中均含有
`id` 、`name`两个成员，我们试着请求一下
    @RequestMapping("/index")
    @ResponseBody
    public String objectType2(User user, Student student) {
        return user.toString() + " " + student.toString();
    }
[http://localhost:8080/index?id=0&name=t4r](http://localhost:8080/index?id=0&name=t4r)
返回结果：User{id='0', name='t4r'} Student{id='0', name='t4r'}
可以看到，两个对象的值都被赋上了，但是，大部分情况下，不同的对象的值一般都是不同的，为此，我们还有解决办法
@InitBinder 注解可以帮助我们分开绑定，下面的代码也就是说分别给`user`、`student`指定一个前缀
    @InitBinder("user")
    public void initUser(WebDataBinder binder) {
        binder.setFieldDefaultPrefix("user.");
    }
    @InitBinder("student")
    public void initStudent(WebDataBinder binder) {
        binder.setFieldDefaultPrefix("stu.");
    }
[http://localhost:8080/index?user.id=1&name=t4r&stu.id=002](http://localhost:8080/index?user.id=1&name=t4r&stu.id=002)
### 数组
    @RequestMapping("/index")
    @ResponseBody
    public String arrayType(String[] name) {
        StringBuilder sb = new StringBuilder();
        for (String s : nickname) {
            sb.append(s).append(", ");
        }
        return sb.toString();
    }
[http://localhost:8080/index?name=Alice&name=Bob](http://localhost:8080/index?name=Alice&name=Bob)
返回结果：Alice, Bob
### 集合
#### List类型
集合是不能直接进行参数绑定的，所以我们需要创建出一个类，然后在类中进行对`List`的参数绑定
控制层方法中，参数就是这个创建出来的类
    @RequestMapping("/index")
    @ResponseBody
    public String listType(UserList userList) {
        return userList.toString();
    }
[http://localhost:8080/index?users[0].id=1&users[0].name=Alice&users[1].id=2&users[1].name=Bob](http://localhost:8080/index?users\[0\].id=1&users\[0\].name=Alice&users\[1\].id=2&users\[1\].name=Bob)
如果`Tomcat`版本是高于7的 ，执行上述请求就会报`400`错误
这是因为Tomcat高的版本地址中不能使用`[`和`]` ，我们可以将其换成对应的16进制，即 `[` 换成 `%5B`，`]` 换成`%5D`
[http://localhost:8080/index?users%5B0%5D.id=1&users%5B0%5D.name=Alice&users%5B1%5D.id=2&users%5B1%5D.name=Bob](http://localhost:8080/index?users%5B0%5D.id=1&users%5B0%5D.name=Alice&users%5B1%5D.id=2&users%5B1%5D.name=Bob)
或者直接用`post`请求也可以
#### Map类型
map 类型是一样的套路，我们先创建一个 UserMap类，然后在其中声明 `private Map users` 进而绑定参数
    @RequestMapping("/index")
    @ResponseBody
    public String mapType(UserMap userMap) {
        return userMap.toString();
    }
[http://localhost:8080/index?users['userA'].id=1&users['userA'].name=Alice&users['userB'].id=2&users['userB'].name=Bob](http://localhost:8080/mapType.do?users\['userA'\].id=1&users\['userA'\].name=Alice&users\['userB'\].id=2&users\['userB'\].name=Bob)
同样 `[]` 会遇到上面的错误，所以如果想要在地址栏请求访问，就需要替换字符，或者发起一个`post`请求
## 属性注入
### BeanWrapper
  * `PropertyEditorRegistry` PropertyEditor 注册、查找
  * `TypeConverter` 类型转换，其主要的工作由 TypeConverterDelegate 这个类完成的
  * `PropertyAccessor` 属性读写
  * `ConfigurablePropertyAccessor` 配置一些属性，如设置`ConversionService`、是否暴露旧值、嵌套注入时属性为 null 是否自动创建
  * `BeanWrapper` 对 bean 进行封装
  * `AbstractNestablePropertyAccessor` 实现了对嵌套属性注入的处理
#### 获取BeanWrapper实例
从上图可知，获取BeanWrapper实例可以通过其唯一实现类BeanWrapperImpl获取
    BeanWrapper beanWrapper = new BeanWrapperImpl(对象);
#### 属性注入
    beanWrapper.setPropertyValue(属性名, 属性值);
    beanWrapper.setPropertyValue("name", "t4r");
也可以通过PropertyValue
    PropertyValue propertyValue = new PropertyValue("age", "80");
    beanWrapper.setPropertyValue(propertyValue);
上述代码可以将属性值自动转换为适配的数据类型，过程如下
下图是跟踪`BeanWrapperImpl#setPropertyValue(实际调用的就是父类AbstractNestablePropertyAccessor#setPropertyValue)`到`AbstractNestablePropertyAccessor#processLocalProperty`的代码
可以总结一下`processLocalProperty`函数主要做了两件事:
  * **类型转换：**`convertForProperty`利用`JDK`的`PropertyEditorSupport`进行类型转换
  * **属性设置：**`setValue`使用反射进行赋值，`BeanWrapperImpl#BeanPropertyHandler#setValue`
`setValue`最终通过反射进行属性赋值，如下
#### 嵌套属性注入