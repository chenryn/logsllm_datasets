enum divmod_result
[intobject.c]
statie Pyobiect*int classic_div（PyIntObject *x,PyIntobject *y)
[intobject.c]
乍一看，这个PyExc_ZeroDivisionError就是我们苦苦寻找的那个异常。我们说过，
现在，我们终于可以好好看看异常抛出的瞬间。当iaivmod发现除数居然是0时，
现在我们可以确定，在_aivmod中，抛出了异常，并且返回了一个不是DIVMD_OK
7/抛出异常的瞬间
long xdivy
DIVMOD_ERROR
DEVMOD_OVERFLOW,
DIVMOD_OK
default:
caSe DIVMOD_OVERFLOW:
case
CONVERT_TO_LONGIY
CONVERT TOLONGIX,
long.
Iong xi,yi;
swiucn
return NULL
retuEnDIVMOD_ERROR:
PyErn_SetString(PyExc_ZeroDlvisionError,
DIVMOD_OK:
d
一切东西都是对象，异常自然也不能例外。那么在Pyhon的对象体系中，这
xmody:
yils
Exception
yi,
(Pyobject)y）;
d，&m
10.4Python虚拟机中的异常控制流
Python源码剖析
again using longs */
一深度探索动态语言核心技术
—DIVMOD_ERROR
199
---
## Page 230
Python源码剖析
10.4.1.2
200
的地方：
指向Pyhon创建的异常类型对象，从而指明发生了什么异常。
void PyErr_Setobject (Pyobject
void PyErr_Restore(Pyobject
[errors.a]
Eyobject
Pyobject
Pyobjeot
PyObject
[pyerrors.h]
个指针：
直到达PyErr_Restore。在PyErr_Restore中，Pyhon将这个异常放置到了一个安全
[pyerrors.h]
PyErr_Restore(exception, value,(RyObjeot *)NULl):
Py_XINCREF(except ion);
Py_XDEOREF (oldtraceback)
Py_XDECREF(oldtype)；
oldtraceback
在i_divmoa之后，Python的执行路径会沿着pyErr_SetString、PyErr_Setobect，
7/抛弃以前的异常信息
tatate->curexc
//设置当前的并常信息
尽管它们都是再简单不过的Pyobject*，但是在Pyhon运行环境初始化时，它们会
在pyerrorsh中，同时还定义了许多在异常机制中使用的pyobject*：
tatate-
第10章
保存以前的异常信息
在线程状态对象中记录异常信息
_XINCREF(Value)
深度探索动态语言核心技术
#RyExc_SyntaxError;
PyExc_KeyboardInterrupt;
*PyExc_ZeropivlsionError:
*PyExc_NotImplementedError;:
*PyExc_NameErron;
Python虚拟机中的控制流
=tstate-
>curexo_type;
curexc
*oldvalue,
valge;
*type,Pyobject *value,Pyobjecttracebaak)
*exception,
value;
*oldtraceback;
Pyobject
*value)
---
## Page 231
integer division or modulo by zero
虚拟机存放在线程状态对象中的异常信息。下面的例子展示了这个接口的使用：
动线程关联的线程状态对象。
PyThreadstate对象，并将其赋给_PyThreadState_Current，这个对象就是和当前的活
后，就将异常信息存放到线程状态对象中。
应的PyThreadState对象可以通过pyThreadState_GET获得，在得到了线程状态对象之
为线程准备的在Pyhon虚拟机一级保存线程状态信息的对象。在这里，当前活动线程对
常这样的信息。这些信息显然没法由操作系统提供，而PyThreadstate对象正是Python
是Python虚拟机在运行中总需要另外一些与线程相关的状态和信息，比如是否发生了异
操作系统提供的线程中运行。真实的线程及其状态当然是由操作系统来维护和管理的，但
而curexc_value中存放下了在i_divmod中设定的那个跟随PyExc_ZeroDivisionError
type
onwin32
[pystate.c]
#define PyThreadState_GET() （PyThreadState Current)
[pystate.h]
在Python的sys标准库中，提供了一个接口，使我们能够在异常发生时，访问Python
在Python 启动，进行初始化的时候，会调用PyThreaastate_New创建一个新的
我们在前面已经介绍了PyThreadstate对象，Python无论它多么强悍，总会在一
最后，在PyThreadstate的curexc_type中存放下了PyExc_ZeroDivisionError
PY_XDEcREF(value):
Pyobieet*value
'exceptions.ZeroDivisionError>7/sys.exe_info) [o]的结果
1/0
print sys.exc_info()[]
print
import
Exceptiion:
"cobyright",
sys.exc_info()1oj
sys
ject(exception, value);
=Pystring_FromString(string)
"creditsor "license" for more information
//获得tstate->curexo_value
10.4
Python源码剖析
//sys.exc_info()1]的结果
Python虚拟机中的异常控制流
一深度探索动态语言核心技术
---
## Page 232
Python源码剖析
10.4.1.3
202
样就形成了一条PyFrameObject对象的链表。
对象（栈顿），并通过该对象中的E_back连接到调用者对应的ryFrameobject对象。这
拟，当发生函数调用时，Python虚拟机会创建一个与被调用函数对应的ryFrameobject
PyFrarmeObject对象时，我们提到，PyFrameobject对象是Python虚拟机中对栈帧的模
会涉及我们介绍PyFrameObject对象时所提到的那个PyFrameObject对象链表。在介绍
过程中发生了异常。
中，有异常被抛出了。注意，到了这里，Pyhon的虚拟机才开始获得了这个信息，即执行
一切正常，没有错误发生；而设置成了WHY_EXCEPTION之后，表示在执行字节码的过程
的是Pyhon虚拟机中执行字节码指令的那个for循环内的状态。当为WHY_Nor时，表示
的结果，我们刚才看到，在抛出了异常之后，这个x就成了NDLL变量why实际上维护
后的跳出。那么Pyhon虚拟机将如何区分呢？
那个巨大的switch块的原因可能是执行完了字节码之后正常的跳出，
了分派字节码指令的switch块之后，发生了什么动作。这里还存在一个问题，导致跳出
Pyobjeot
在Pyhon虚拟机意识到有异常发生后，它就要开始进入异常处理的流程，这个流程
前面我们在考察异常时并没有涉及函数调用，现在我们考虑一下如果函数调用时发生
在跳出了switch之后，首先会通过检查x的值，如果x为NULL，表示有异常情况发
我们看到异常已经被记录在了线程的状态对象中了。那么现在可以回头看看，在跳出
第10章Python虚拟机中的控制流
//ena ofFor（）
展开栈帧
一深度探索动态语言核心技术
[T//(LONXHM=AUM)
尝试捕提异常
break;
PyEval_EvaIFrameEx(PyFrameobjecE *E)
/设置why
Py_None:
(err
continue//没有异常情况发生：执行下一条字节码指令
WHYNOT)
通知虚拟机，异常发生了
也可能是发生异常
---
## Page 233
Object对象链表：
录异常发生时活动栈帧的状态：
在Python虚拟机开始处理异常时，
状态可视化，
象中记录栈帧链表的信息，Pyhon虚拟机利用这个对象来将栈帧链表中每一个栈帧的当前
系？没错，在Pyhon虚拟机处理异常的流程中，涉及了一个traceback对象，在这个对
现出一种链状的结构，如同图10-12中所展示的栈帧链表一样，这两者之间难道有什么联
函数，调用了什么函数，这些信息是如何得来的呢？同时我们注意到，输出的信息俨然呈
defh(：
了异常：
PyobiectPyEval_EvalFrameEx(PyFrameObject
[ceval.c]
defg:
回到我们的例子，
可以看到，在输出的信息中，出现了函数调用的信息：比如在源代码的哪一行调用了
图10-13给出了这个脚本运行时产生的输出：
图10-12展示了当Python虚拟机执行到函数h中的1/0表达式时，所形成的pyFrame-
h0
170
这个可视化的结果就是图10-13中输出的信息。
seroDivisionError: integerdivision or modulo by zero
Ttaceback (most rocent
py文件
运行时栈
File
File
File
，当异常发生时，当前活动的栈帧是图10-12中函数h对应的栈帧。
h()
",lime2.inh
"",
,1ine 1in
图10-12
back
图10-13异常在函数调用中发生
虚拟机执行函数h时的栈帧链表
运行时楼
它首先的行为就是创建一个traceback对象，用于记
f（）
line2.
iine
10.4
Python源码剖析
2
Python虚拟机中的异常控制流
if
运行时栈
*)
一深度探索动态语言核心技术
运行时栈
h()
203
---
## Page 234
Python源码剖析
204
应该跟pyFrameobject对象的链表结构是同构的，即一个pyFrameobject对象应该对应
象一样，是一个链表结构。我们进一步猜测，这个PyTracebackobject 对象的链表结构
象究竟长得是个什么样：
了一个怎样的traceback对象。
这个值都是NULL，所以我们不考虑它。这里我们的重点在于考察Pyhon虚拟机究竟创建
[traceback.h]
int PyTraceBack_Here(PyFrameObject *frame)
个pyTracebackobject对象。我们来看看这个链表是怎么产生的：
[traceback.c]
PyTracebalckobject;
原来traceback对象是保存在线程状态对象之中的，
这里的tstate还是我们之前提到的那个与当前活动线程对应的线程对象，其中的
第10章Python虚拟机中的控制流
一看到tb_next，我们就恍然大悟了，
int
struct
return O:
//将新的traceback对象交给线程状态对象
PyTracebackobject *tb
1/创建新的traceback对象
tstate->curexc_traceback;
PyTracebackobject
/保存线程状态对象中现在维护的raceback对象
//获得线程状态对象
for
//end of for(）
XDECREF(oldtb);
tb_lineno;
七b
(WhY==WHY_EXCEPDION）
struct
eadstate
一深度探索动态语言核心技术
Lframe *tb_frame;
PyTraceBack_Here(f);
//创建七raceback对象
asti:
call_exc_trace(tstate->c_tracefunc,tstate->e_traceobj,f);
(tstate
traceback[
*tstate
*olatb
newtracebackobject(oldtb,frame):
(PyTracebackobject*)
原来traceback对象也跟PyrameObject对
我们来看看这个tractback对
---
## Page 235
代码清单10-3
对象。这个回退的动作在PyEval_EvalFrameEx的最后完成（见代码清单10-3）。
即是从函数h对应的PyFrameObject对象沿着f_back回退到函数g对应的PyFrameObject
虚拟机将退出当前的活动栈帧，并沿着栈帧链表向上回退到上一个栈帧。在图10-12中，
中寻找except语句，以寻找开发人员指定的捕捉异常的动作，如果没有找到，那么Pyhon
frame->f_1asti所指示的字节码指令在源代码中对应的行号。
还存储了当前最后执行的一条字节码指令及其在源代码中对应的行号。还记得pyCodeobject
traceback对象中，还利用tb_trame与其对应的PyFrameObjece对象建立了联系。另外，
newtracebackobject中，两个traceback对象被链接了起来。同时，在新创建的
Pyobject*
PyMracebackobject*
[traceback.c]
Pylracebackobjeot
Pyhon虚拟机意识到有异常抛出，并创建了traceback对象之后，它会在当前栈帧
前面我们看到，这里的next正是从线程状态对象中得到的traceback对象，在
return retval;
//[3]：将线程状态对象中的活动帧设置为当前栈帧的上一个栈赖，完成栈顿回退的动作
瑞
tb
/申请内存，
=PyObgect_GCNew(EyTracebackobject; &PyTraceBack_Type);
retval