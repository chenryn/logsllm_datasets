 600
Replica 4 joins the system
Replica 3 crashes
Replica 3 recovers
Replica 4 leaves the system
 120
 240
 360
Time (seconds)
ckpt
 480
 600
Fig. 7: Throughput evolution across time and events, vinit = {0, 1, 2, 3}.
)
s
d
n
o
c
e
s
(
e
m
T
i
 50
 40
 30
 20
 10
 0
no-ckpt
500-ckpt
1000-ckpt
2000-ckpt
 0
 1
 2
 3
 5
 4
 6
# blocks (x 103)
 7
 8
 9
 10
Fig. 8: Time demanded to update a replica.
implementation of blockchain durability. However,
the re-
cent popularization of small-scale permissioned blockchains
(e.g., [1]–[4], [54]) and their use as distributed transaction plat-
forms [55], [56], calls for a better understanding of blockchain
durability. However, to the best of our knowledge, this subject
was not yet explored in both academic and industrial works.
One of the best known blockchain platforms is Hyperledger
Fabric [1]. The platform is designed to support pluggable
implementations of different components, such as the ordering
and membership services. Fabric’s key innovation is the exe-
cution of transactions before establishing a total order among
(blocks of) them. Only after such order is established the
blocks are validated by the peers and then written to stable
storage. Fabric durability guarantees are not well documented,
but the lack of coordination between peers during blockchain
writing suggest that the system offers guarantees at most like
SMARTCHAIN weak persistence.
Tendermint is another notorious permissioned platform that
implements a variant of the PBFT protocol [3], making its
design more similar to SMARTCHAIN than Fabric. However,
Tendermint has two distinguished features:
it uses a gos-
sip protocol to propagate transactions among nodes, and it
adopts a leader rotation mechanism similar to Spinning [9].
In terms of persistence, Tendermint writes the block before
and after operation execution, making it less efﬁcient than
SMARTCHAIN (as evidenced by our experimental results),
without further coordination between the replicas. The conse-
quence is that the system supports only weak persistence for
its blockchain.
b) Consortium reconﬁguration: Some works have also
tackled the challenges of supporting group reconﬁguration in
SMR [13], [15], [45]–[47]. ComChain [57], Hybrid Consen-
sus [13], and Solida [15] are the ones that most resemble our
solution since they support fully autonomous reconﬁguration.
Similarly to our approach, ComChain allows reconﬁgurations
to be deﬁned by application-speciﬁc criteria but does not
deal with forks. Hybrid Consensus determines the committee
members using Bitcoin’s (PoW-based) protocol while using
a traditional consensus protocol among current committee
members to order transactions. On the other hand, our solution
is entirely derived from a classic BFT state machine protocol.
Moreover, Solida is designed to operate in the synchronous
system model and uses a variant of the PBFT protocol adapted
to such model. Our solution is still able to operate in an
eventually synchronous model, like most SMR protocols in
the literature.
Fabric and Tendermint also support consortium reconﬁgu-
rations. Fabric only allows reconﬁguration with the help of a
trusted network administrator [58]. Tendermint, in principle,
supports decentralized reconﬁgurations if the application de-
ﬁnes how this should be done [59]. However, none of these
systems deal with the potential forks that might arise with
multiple reconﬁgurations.
VIII. CONCLUSIONS
This paper discussed some misalignments between the state
machine replication approach and the permissioned blockchain
requirements and proposed several
techniques to address
them. The identiﬁed issues concern the low performance
of blockchain applications,
the lack of strong blockchain
persistence guarantees, and the possibility of forks due to
consortium reconﬁgurations. We propose a set of consensus-
agnostic techniques materialized in a blockchain layer that
can be integrated into SMR frameworks to mitigate these
issues. To validate our approach, we implemented these tech-
niques on SMARTCHAIN, a proof-of-concept permissioned
blockchain on top of BFT-SMART. Experimental results show
that SMARTCHAIN improves the performance of a simple
digital coin application by 8× when compared with running it
on top of BFT-SMART, and by 8× and 33× when compared
with Tendermint and Hyperledger Fabric, respectively.
Acknowledgements: We thank Michael Davidson, Vincent
Gramoli, Dragos-Adrian Seredinschi, the anonymous review-
ers, and our shepherd, Heming Cui, for their comments that
signiﬁcantly improved this paper. This work was supported
by FCT through projects IRCoC (PTDC/EEI-SCR/6970/2014),
ThreatAdapt (FCT-FNR/0002/2018), and the LASIGE Re-
search Unit (UIDB/00408/2020 and UIDP/00408/2020), by
FAPDF/Brazil
through Edital 05/2018, and by the Swiss
National Science Foundation (project number 175717).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
434
REFERENCES
[1] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis, A. D.
Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich, S. Mu-
ralidharan, C. Murthy, B. Nguyen, M. Sethi, G. Singh, K. Smith,
A. Sorniotti, C. Stathakopoulou, M. Vukolic, S. W. Cocco, and J. Yellick,
“Hyperledger fabric: A distributed operating system for permissioned
blockchains,” in Proceedings of
the 13th ACM SIGOPS European
Conference on Computer Systems, Porto, Portugal, 2018.
[2] “Chain protocol whitepaper,” 2014. [Online]. Available: https://chain.
com/docs/1.2/protocol/papers/whitepaper
[3] E. Buchman, “Tendermint: Byzantine fault
tolerance in the age of
blockchains,” Master’s thesis, University of Guelph, 2016.
[4] W. Martino,
“Kadena: The ﬁrst
performance
private blockchain,” 2016. [Online]. Available: http://kadena.io/docs/
Kadena-ConsensusWhitePaper-Aug2016.pdf
scalable,
high
[5] M. Castro and B. Liskov, “Practical Byzantine fault
tolerance,” in
Proceedings of the USENIX Symposium on Operating Systems Design
and Implementation, New Orleans, Louisiana, USA, 1999.
[6] J. Cowling, D. Myers, B. Liskov, R. Rodrigues, and L. Shrira, “HQ-
Replication: A hybrid quorum protocol for Byzantine fault tolerance,”
in Proceedings of 7th Symposium on Operating Systems Design and
Implementation, Seattle, Washington, 2006.
[7] R. Kotla, L. Alvisi, M. Dahlin, A. Clement, and E. Wong, “Zyzzyva:
Speculative Byzantine fault
the 21st
ACM SIGOPS Symposium on Operating Systems Principles, Stevenson,
Washington, USA, 2007.
tolerance,” in Proceedings of
[8] Y. Amir, B. Coan, J. Kirsch, and J. Lane, “Prime: Byzantine replication
under attack,” IEEE Transactions on Dependable and Secure Computing,
vol. 8, no. 4, pp. 564–577, 2011.
[9] G. S. Veronese, M. Correia, A. N. Bessani, and L. C. Lung, “Spin
one’s wheels? Byzantine fault tolerance with a spinning primary,” in
Proceedings of
the 28th IEEE Symposium on Reliable Distributed
Systems, Niagara Falls, NY, USA, 2009.
[10] G. Veronese, M. Correia, A. Bessani, L. C. Lung, and P. Verissimo,
“Efﬁcient Byzantine fault-tolerance,” IEEE Transactions on Computers,
vol. 62, no. 1, pp. 16–30, 2013.
[11] P.-L. Aublin, S. B. Mokhtar, and V. Qu´ema, “RBFT: Redundant Byzan-
tine fault tolerance,” in Proceedings of the 33rd International Conference
on Distributed Computing Systems, Philadelphia, PA, USA, 2013.
[12] C. Cachin and M. Vukolic, “Blockchain consensus protocol in the wild
(invited paper),” in Proceedings of the 31th International Symposium on
Distributed Computing, Vienna, Austria, 2017.
[13] R. Pass and E. Shi, “Hybrid Consensus: Efﬁcient Consensus in the Per-
missionless Model,” in Proceedings of the 31st International Symposium
on Distributed Computing, Vienna, Austria, 2017.
[14] E. Kokoris-Kogias, P. Jovanovic, N. Gailly, I. Khofﬁ, L. Gasser, and
B. Ford, “Enhancing bitcoin security and performance with strong
consistency via collective signing,” in Proceedings of the 25th USENIX
Conference on Security Symposium, Austin, TX, USA, 2016.
[15] I. Abraham, D. Malkhi, K. Nayak, L. Ren, and A. Spiegelman, “Solida:
A Blockchain Protocol Based on Reconﬁgurable Byzantine Consensus,”
in Proceedings of the 21st International Conference on Principles of
Distributed Systems, Lisboa, Portugal, 2017.
[16] J. Yu, D. Kozhaya, J. Decouchant, and P. Esteves-Verissimo, “Repucoin:
Your reputation is your power,” IEEE Transactions on Computers,
vol. 68, no. 8, pp. 1225–1237, 2019.
[17] A. Miller, Y. Xia, K. Croman, E. Shi, and D. Song, “The honey badger
of BFT protocols,” in Proceedings of the 23rd ACM SIGSAC Conference
on Computer and Communications Security, Vienna, Austria, 2016.
[18] S. Duan, M. K. Reiter, and H. Zhang, “BEAT: Asynchronous BFT
made practical,” in Proceedings of the 25th ACM SIGSAC Conference
on Computer and Communications Security, Toronto, Canada, 2018.
[19] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in Proceedings of
the 26th Symposium on Operating Systems Principles, Shanghai, China,
2017.
[20] G. Golan-Gueta, I. Abraham, S. Grossman, D. Malkhi, B. Pinkas, M. K.
Reiter, D. Seredinschi, O. Tamir, and A. Tomescu, “SBFT: a scalable
decentralized trust infrastructure for blockchains,” in Proceedings of the
49th IEEE/IFIP International Conference on Dependable Systems and
Networks, Portland, OR, USA, 2019.
[21] Y. Yang, “Linbft: Linear-communication byzantine fault
tolerance
for public blockchains,” CoRR, vol. abs/1807.01829, 2018. [Online].
Available: https://arxiv.org/abs/1807.01829
[22] J. Liu, W. Li, G. O. Karame, and N. Asokan, “Scalable byzantine
consensus via hardware-assisted secret sharing,” IEEE Transactions on
Computers, vol. 68, no. 1, pp. 139–151, 2019.
[23] T. Crain, V. Gramoli, M. Larrea, and M. Raynal, “DBFT: Efﬁcient
leaderless Byzantine consensus and its application to blockchains,” in
Proceedings of the 17th International Symposium on Network Comput-
ing and Applications, Cambridge, MA, USA, 2018.
[24] R. Guerraoui, J. Hamza, D.-A. Seredinschi, and M. Vukolic, “Can
100 machines agree?” CoRR, vol. abs/1911.07966, 2019. [Online].
Available: http://arxiv.org/abs/1911.07966
[25] A. Bessani, J. Sousa, and E. Alchieri, “State machine replication for
the masses with BFT-SMART,” in Proceedings of the 44th IEEE/IFIP
International Conference on Dependable Systems and Networks, Atlanta,
GA, USA, 2014.
[26] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2009.
[Online]. Available: http://bitcoin.org/bitcoin.pdf
[27] R. Tamassia, “Authenticated data structures,” in Proceedings of the 11th
Annual European Symposium on Algorithms, Budapest, Hungary, 2003.
[28] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Proceedings of the 34th Annual Inter-
national Conference on the Theory and Applications of Cryptographic
Techniques, Soﬁa, Bulgaria, 2015.
[29] M. Vukoli´c, “The quest for scalable blockchain fabric: Proof-of-work
vs. BFT replication,” in Open Problems in Network Security - IFIP WG
11.4 International Workshop, Zurich, Switzerland, 2015.
[30] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger,” 2015. [Online]. Available: http://gavwood.com/Paper.pdf
[31] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Proceedings of
the 37th Annual International Cryptology Conference, Santa Barbara,
CA, USA, 2017.
[32] L. Lamport, “Time, clocks, and the ordering of events in a distributed
system,” Communications of the ACM, vol. 21, no. 7, pp. 558–565, 1978.
[33] F. Schneider, “Implementing fault-tolerant service using the state ma-
chine aproach: A tutorial,” ACM Computing Surveys, vol. 22, no. 4, pp.
299–319, 1990.
[34] V. Hadzilacos and S. Toueg, “Fault-tolerant broadcasts and related
problems,” in Distributed Systems (2nd Ed.), S. Mullender, Ed. ACM
Press/Addison-Wesley Publishing Co., 1993, pp. 97–145.
[35] J. Sousa and A. Bessani, “From Byzantine consensus to BFT state ma-
chine replication: A latency-optimal transformation,” in Proceedings of
the 9th European Dependable Computing Conference, Sibiu, Romania,
2012.
[36] C. Cachin, “Yet another visit to Paxos,” IBM Research Zurich, Tech.
Rep. RZ 3754, 2009.
[37] A. Bessani, M. Santos, J. Felix, N. Neves, and M. Correia, “On the
efﬁciency of durable state machine replication,” in Proceedings of the
2013 USENIX Annual Technical Conference, San Jose, CA, USA, 2013.
[38] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence of
partial synchrony,” Journal of ACM, vol. 35, no. 2, pp. 288–323, Apr.
1988.
[39] M. K. Aguilera, “A pleasant stroll through the land of inﬁnitely many
creatures,” SIGACT News, vol. 35, no. 2, pp. 36–59, Jun. 2004.
[40] J. Sousa, A. Bessani, and M. Vukolic, “A byzantine fault-tolerant
ordering service for the hyperledger fabric blockchain platform,” in
Proceedings of the 48th Annual IEEE/IFIP International Conference
on Dependable Systems and Networks, Luxembourg City, Luxembourg,
2018.
[41] T. Crain, C. Natoli, and V. Gramoli, “Evaluating the Red Belly
blockchain,” CoRR, vol. abs/1812.11747, 2018. [Online]. Available:
http://arxiv.org/abs/1812.11747
[42] D. Malkhi and M. Reiter, “Byzantine quorum systems,” Distributed
Computing, vol. 11, no. 4, pp. 203–213, 1998.
[43] M. Abd-El-Malek, G. Ganger, G. Goodson, M. Reiter, and J. Wylie,
“Fault-scalable Byzantine fault-tolerant services,” in Proceedings of
the 20th ACM SIGOPS Symposium on Operating Systems Principles,
Brighton, UK, 2005.
[44] J. Behl, T. Distler, and R. Kapitza, “Hybrids on steroids: SGX-based high
performance BFT,” in Proceedings of the 12th ACM SIGOPS European
Conference on Computer Systems, Belgrade, Serbia, 2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
435
[45] J. R. Lorch, A. Adya, W. J. Bolosky, R. Chaiken, J. R. Douceur,
J. Howell, J. J. Douceur, J. Lorch, and B. Bolosky, “The SMART
way to migrate replicated stateful services,” in Proceedings of the 1th
ACM/SIGOPS European Conference on Computer Systems, Leuven,
Belgium, 2006.
[46] R. Rodrigues, B. Liskov, K. Chen, M. Liskov, and D. Schultz, “Au-
tomatic reconﬁguration for large-scale reliable storage systems,” IEEE
Transactions on Dependable and Secure Computing, vol. 9, no. 2, pp.
145–158, March 2012.
[47] D. Ongaro and J. Ousterhout, “In search of an understandable consensus
the 2014 USENIX Annual Technical
algorithm,” in Proceedings of
Conference, Philadelphia, PA, USA, 2014.
[48] J.-P. Martin and L. Alvisi, “A framework for dynamic Byzantine
storage,” in Proceedings of the International Conference on Dependable
Systems and Networks, Florence, Italy, 2004.
[49] Y. Amoussou-Guenou, A. D. Pozzo, M. Potop-Butucaru, and S. Tucci-
Piergiovanni, “Correctness of Tendermint-Core Blockchains,” in Pro-
ceedings of the 22nd International Conference on Principles of Dis-
tributed Systems, Hong Kong, China, 2018.
[50] E. Buchman, J. Kwon, and Z. Milosevic, “The latest gossip on BFT
consensus,” CoRR, vol. abs/1807.04938, 2018. [Online]. Available:
http://arxiv.org/abs/1807.04938
[51] S. Rusch, K. Bleeke, and R. Kapitza, “Bloxy: Providing transparent and
generic BFT-based ordering services for blockchains,” in Proceedings
of the 38th IEEE Symposium on Reliable Distributed Systems, Lyon,
France, 2019.
[52] B. Chart, “Number of unspent transaction outputs,” 2019. [Online].
Available: https://www.blockchain.com/charts/utxo-count
[53] Etherscan, “Ethereum full node sync default chart,” 2019. [Online].
Available: https://etherscan.io/chartsync/chaindefault
[54] D. Voell and P. M. Nielsen, “Quorum whitepaper,” 2016. [Online].
Available: https://github.com/jpmorganchase/quorum-docs/blob/master/
Quorum/%20Whitepaper/%20v0.1.pdf
[55] S. Nathan, C. Govindarajan, A. Saraf, M. Sethi, and P. Jayachandran,
“Blockchain meets database: Design and implementation of a blockchain
relational database,” VLDB Endowment, vol. 12, no. 11, pp. 1539–1552,
2019.
[56] A. Sharma, F. M. Schuhknecht, D. Agrawal, and J. Dittrich, “Blurring
the lines between blockchains and database systems: The case of
hyperledger fabric,” in Proceedings of the 2019 International Conference
on Management of Data, Amsterdam, Netherlands, 2019.
[57] G. Vizier and V. Gramoli, “ComChain: A blockchain with Byzantine
fault-tolerant reconﬁguration,” Concurrency and Computation: Practice
and Experience, vol. 32, no. 12, p. e5494, 2020.
[58] Fabric Documentation,
https://hyperledger-fabric.readthedocs.io/en/
release-1.4/conﬁg update.html.
[59] Tendermint Documentation, https://godoc.org/github.com/tendermint/
tendermint/lite#hdr-How We Track Validators.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
436