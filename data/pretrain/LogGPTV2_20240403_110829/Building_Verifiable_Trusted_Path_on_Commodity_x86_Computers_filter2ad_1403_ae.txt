can only execute with system privileges (CPU Ring 0). Sec-
ond, device drivers sometimes need to perform operations di-
rectly on physical memory addresses (e.g., to manipulate de-
vice registers), but drivers running unprivileged within a PE do
not have access to the mappings between virtual addresses and
physical addresses. Third, some of the physical memory pages
are protected so that only privileged system code (running at
CPU Ring 0) can access them.
During program endpoint implementation, we minimize in-
vocations of the HV for the above operations, while still main-
4http://www.dwheeler.com/sloccount/
Table 2: Trusted-path setup and tear-down overhead.
Average (in ms) of 10,000 trials.
Trusted-path Setup
Trusted-path Tear-down
TrustVisor
1.752±1.7% 1.925±2.2%
0.436±1.9% 0.528±1.8%
HV
taining the isolation of the PE from the OS. For example, the
graphics card in VGA mode provides an MMIO memory re-
gion where software writes the contents that are displayed on
the screen. To perform memory writes to this physical mem-
ory region, the PE reserves a region in its virtual memory space
and then makes a hypercall to the HV. The HV re-maps the re-
served PE memory pages to the VGA display memory region.
After this hypercall, the PE has direct access to that memory
region without any additional hypercalls.
Note that the hypervisor still needs to emulate some privi-
leged instructions, e.g., when the DE interrupt handler ﬁnishes
execution and returns control back to the PE, the interrupt han-
dler should run a return-from-interrupt (IRET) instruction. The
HV provides a hypercall that emulates this IRET instruction.
9.3 Micro-benchmarks
We present micro-benchmark results to demonstrate: (1) the
overhead of trusted-path establishment and tear-down is rea-
sonable, and (2) our optimized PE implementation can achieve
good performance by minimizing invocations of the HV.
Trusted-path Setup and Tear-down.
To measure the HV
overhead for trusted-path establishment, we compared the time
required for the creation of a PE’s isolated environment and a
trusted path between a PE and a DE with the time required to
create only a PE’s isolated environment using TrustVisor. As
shown in Table 2, TrustVisor took about 1.752 milliseconds to
create the isolated environment, while our HV took about 1.925
milliseconds to create the same environment and establish the
trusted-path. Thus, trusted-path establishment adds about 9.8%
overhead to the original TrustVisor implementation.
We also measured the HV overhead incurred in trusted-path
tear-down after the PE completes all of its operations. In 10,000
trials, TrustVisor tore down the isolated environment of the
PE in approximately 0.436 milliseconds, while HV tore down
the same isolated environment and the trusted path in approx-
imately 0.528 milliseconds. Thus, the trusted-path tear-down
adds approximately 21% overhead to the original TrustVisor
implementation. This is because it takes much less time to tear-
down an isolated environment than to create one, while set-
ting up and protecting the APICs and graphics controller con-
ﬁguration during trusted-path establishment takes roughly the
same time as restoring and unprotecting them during trusted-
path tear-down.
In our experiments, both the latency overhead of trusted-path
establishment and tear-down were negligible compared to the
duration of an ordinary TP session, which often lasts for sec-
onds or more.
626
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
Table 3: DE device driver performance. Average latency
overhead (in µs) of 100,000 trials.
Direct Access
Invoking HV
I/O Port Access (INB)
I/O Port Access (OUTB)
VGA Display Memory Write
18±6.2%
19±5.4%
15±3.2%
40±3.4%
40±3.7%
39±2.7%
Device Driver Performance. We measure the HV overhead
in emulating the INB and OUTB operations to a device (PS/2
keyboard in this case study) and data writes to MMIO memory
(VGA display memory region in this case study), since these
are common operations for most trusted-path applications. The
measurements in Table 3 illustrate that our optimized imple-
mentation of user-level DE drivers can achieve good perfor-
mance by minimizing the frequency of HV invocations for op-
erations that require system-level privileges. Our optimized PE
implementation took only 18 microseconds to perform INB and
19 microseconds for OUTB. In contrast, invoking the HV and
performing a same operation would take around 40 microsec-
onds. PE writes to VGA display memory take approximately
15 microseconds, but it would take more than 39 microseconds
to invoke the HV to perform the same operation. This implies
that a context switch between the trusted-path program end-
point and the hypervisor takes roughly 23 microseconds.
10 Related Work
We ﬁrst compare our trusted-path system with closely related
work; i.e., the Uni-directional Trusted Path (UTP) [22] system,
the DriverGuard system [11], and hypervisors with a structured
root domain [14, 47]. Then we review other trusted-path pro-
posals. None of the related work achieves all of our trusted-
path isolation and TCB reduction properties (Table 4), for the
following three reasons. (1) Most proposals rely on large TCBs
and sacriﬁce assurance.
(2) Some proposals employ crypto-
graphic channels and require special devices and key manage-
ment functions. These solutions are often impractical and have
fundamental usability issues. (3) Device virtualization-based
solutions often fail to provide device isolation and/or program
endpoint isolation.
10.1 Closely Related Work
The UTP system [22] proposes an isolated software module
to control user-centric I/O devices (e.g., keyboard and display)
and enables a remote server to verify that a transaction sum-
mary is conﬁrmed by a local user’s keyboard input. However,
the UTP system does not provide local, user-veriﬁable evidence
of the output trusted path; i.e., malicious code can display a
fake transaction output to the user. Unfortunately, UTP does
not defend against all the attacks we address, e.g., MMIO map-
ping attack, MSI spooﬁng, IPI spooﬁng, and attacks that exploit
the DMA request ambiguity.
The DriverGuard system [11] protects the conﬁdentiality of
the I/O ﬂows between commodity peripheral devices and some
Privileged Code Blocks (PCBs) in device driver code. Our sys-
tem protects both the conﬁdentiality and integrity of the I/O
data. Moreover, DriverGuard does not claim that they protect
the I/O data from MMIO mapping attacks. Thus, the I/O data
in PCBs may still be revealed to a potentially compromised OS.
In addition, DriverGuard’s I/O port access isolation is incom-
plete. PCBs are in a higher privilege level than the OS kernel,
and thus can access any I/O ports of any other devices.
Hypervisors with structured root domains can assign differ-
ent device drivers to separate virtual machines (VMs) and se-
curely associate them with application VMs [14, 47]. These hy-
pervisors isolate the I/O ports and the memory address-space of
a device driver domain from other domains. However, their de-
vice driver VM isolation mechanisms are incomplete. A single
malicious VM driver may still exploit the device-isolation in-
adequacies of commodity I/O hardware discussed above (e.g.,
MMIO mapping attack, MSI spooﬁng, IPI spooﬁng, and DMA
request ambiguity) to compromise other device VMs. Our so-
lutions defend against all of these attacks. Moreover, a program
endpoint in an application VM typically communicates with the
device VM via a guest OS [14, 47], and the device driver inside
a device VM is also not fully isolated from the OS in that device
VM [47]. This greatly swells their trusted-path TCBs (Table 4).
10.2 Other Trusted-Path Proposals
Large TCB Requirements. Trusted path on the DirectX sys-
tem [38] and the Trusted Input Proxy system [9] reserve dedi-
cated areas of the screen to output the identity and status of the
current applications. These systems are built atop large operat-
ing systems. The Not-a-Bot system [29] implements a software
module to capture human keyboard inputs and to use them to
identify human-triggered network trafﬁc. This system builds a
small code module upon a reduced version of the Xen hypervi-
sor and mini-OS kernel, which is still around 30K SLoC. Saroiu
and Wolman propose a system that runs a root virtual machine
(e.g., a dom0 in Xen) to read a mobile device’s sensors [50].
This design trusts a full virtual machine monitor, and only pro-
tects data integrity. Similarly, Gilbert et al. propose a trustwor-
thy mobile sensing architecture [27] that enables a remote data
receiver to verify that the sensed data is from the intended sen-
sors and has only been manipulated by trusted software (e.g.,
the intended sensing application, trusted OS, and VMM).
Cryptographic Channels and Special Devices.
Saroiu et
al. [50] propose another sensor reading protection system based
on the assumption that the reading is digitally signed by a TPM
on the sensor (c.f. [17]). The Zone Trusted Information Chan-
nel (ZTIC) is a dedicated device with a display, buttons and
cryptographic primitives [39, 64]. ZTIC enables users to se-
curely conﬁrm their banking transactions via the dedicated dis-
play and button, completely bypassing the user’s computer,
which may be infected by malware. The Bumpy system re-
quires a special keyboard that supports cryptographic primi-
tives including encryption and certiﬁcate validation [45].
Solutions using cryptographic channels and special devices
627
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
Table 4: A comparison of trusted-path components in different architectures. “Dom0” denotes the monolithic root domain in
the “split-driver” model [8]. “Structured dom0” represents the root domain in the hypervisor model where each device driver is
separated into a VM domain (“Dev VMs” in this table).
TP Program Endpoint
TP Device Driver
Other TP Components
TCB Size (SLoC)
Monolithic
OS/hypervisor
Hypervisor
with dom0
Hypervisor with
device pass-through
Hypervisor with
structured dom0
app
VM(OS+app)
VM(OS+app)
OS/hypervisor
dom0
OS
VM(OS+app)
VM per device
Our
Solution
app
app
hypervisor
hypervisor+dom0
hypervisor+Dev VMs
small hypervisor
>10M
>1.2M
>1.2M
>1.2M
≈16K
with cryptographic primitives often require the protection of
secrets in user-level programs and/or commodity I/O devices,
which is often impractical and raises fundamental usability
concerns for commodity platforms. How could a user securely
set or change the secret key within a trusted-path program end-
point without using some trusted path to reach that program?
Device Virtualization.
Hypervisors that are based on the
“split-driver” model [8] move device management from the hy-
pervisor to a root domain, dom0, which is frequently large and
unstructured [14]. Hence, it merely exposes the trusted-path to
a different set of attacks from those possible in a monolithic
OS (e.g., Windows) or VMM (e.g., VMware Workstation), but
does not eliminate these attacks. Equally undesirable is that
a program endpoint typically communicates with the DE of a
trusted path via the untrusted guest OS upon which it runs.
Hypervisors with device pass-through support [42] (e.g.,
Xen, KVM) or para-passthrough support (e.g., BitVisor [56])
enable exclusive assignment of I/O devices to a speciﬁc guest
VM. However, the driver of the pass-through device is still in
the guest VM and co-exists with the guest OS. There is no de-
vice driver isolation in this mechanism. Also, a compromised
root domain, dom0, can still break the device isolation and
communication path isolation. For example, typically the user
must explicitly “hide” the pass-through devices from dom0 via
some administrative settings in dom0.
11 Applicability to New I/O Architectures
QuickPath/HyperTransport.
Intel’s QuickPath Architec-
ture [33] provides high-speed, point-to-point interconnects be-
tween microprocessors and external memory, and between mi-
croprocessors and an I/O hub. This architecture is designed to
reduce the number of system buses (e.g., replace the front-side
bus between the CPU and memory), and to improve intercon-
nect performance between CPU, memory, and I/O peripherals.
However, QuickPath is not intended to, and indeed does not,
solve the communication-path isolation and device isolation
problems for the I/O devices of a trusted path any more than the
commodity x86-based I/O architecture. Although we present a
trusted-path design for the latter, our design is easily adapted
for the former. The changes are only in the composition of the
communication path: for the x86 architecture, a northbridge
and a southbridge are involved, whereas in the QuickPath ar-
chitecture, a QuickPath controller and an I/O hub are used. In
addition, memory management units are directly embedded in
QuickPath-enabled CPUs. Our trusted-path design is equally
applicable to other similar I/O architectures, including AMD’s
HyperTransport [31].