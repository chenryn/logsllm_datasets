```
deploy:
  placement:
    constraints:
      - 'node.role == worker' 
```
 `布局约束是影响调度决策的一个很好的方式。Swarm 目前允许您针对以下所有内容进行计划:
*   节点标识。`node.id == o2p4kw2uuw2a`
*   节点名。`node.hostname == wrk-12`
*   角色。`node.role != manager`
*   发动机标签。`engine.labels.operatingsystem==ubuntu 16.04`
*   自定义节点标签。`node.labels.zone == prod1`
注意`==`和`!=`都是支持的。
###### appserver 服务
`appserver`服务使用一个映像，连接到三个网络，并安装一个机密。它还在`deploy`键下引入了几个附加功能。
```
appserver:
  image: dockersamples/atsea_app
  networks:
    - front-tier
    - back-tier
    - payment
  deploy:
    replicas: 2
    update_config:
      parallelism: 2
      failure_action: rollback
    placement:
      constraints:
        - 'node.role == worker'
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s
  secrets:
    - postgres_password 
```
 `让我们仔细看看`deploy`键下的新东西。
首先，`services.appserver.deploy.replicas = 2`将服务的副本数量设置为 2。如果省略，默认值为 1。
如果您需要在部署服务后更改副本的数量，您应该声明性地这样做。这意味着用新值更新栈文件中的`services.appserver.deploy.replicas`字段，然后重新部署栈。我们稍后会看到这一点，但是重新部署栈不会影响您尚未更改的服务。
`services.appserver.deploy.update_config`告诉 Docker 在更新服务时如何行动。对于此服务，Docker 将一次更新两个副本(`parallelism`)，如果检测到更新失败，将执行“回滚”。回滚将根据服务的先前定义启动新的副本。`failure_action`的默认值是`pause`，这将停止更新更多副本。另一个选择是`continue`。
```
update_config:
  parallelism: 2
  failure_action: rollback 
```
 `您可以指定其他选项作为`update_config`的一部分。其中包括插入一个`delay`、一个故障`monitor`周期，并控制`order`在终止旧副本之前启动更新副本，反之亦然。
`services.appserver.deploy.restart-policy`对象告诉 Swarm 如何在副本(容器)失败时重启它们。如果复制副本以非零退出代码(`condition: on-failure`)停止，则此服务的策略将重新启动复制副本。它将尝试重新启动失败的副本 3 次，并等待 120 秒来决定重新启动是否有效。它将在三次重启尝试之间等待 5 秒钟。
```
restart_policy:
  condition: on-failure
  delay: 5s
  max_attempts: 3
  window: 120s 
```
 `###### 视觉型的人
可视化工具服务引用映像、映射端口、定义更新配置和定义放置约束。它还安装了一个卷，并为容器停止操作定义了自定义宽限期。
```
visualizer:
  image: dockersamples/visualizer:stable
  ports:
    - "8001:8080"
  stop_grace_period: 1m30s
  volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
  deploy:
    update_config:
      failure_action: rollback
    placement:
      constraints:
        - 'node.role == manager' 
```
 `当 Docker 停止一个容器时，它向容器内 PID 为 1 的应用进程发出`SIGTERM`。然后，应用有 10 秒的宽限期来执行任何清理操作。如果不处理信号，10 秒后用`SIGKILL`强行终止。`stop_grace_period`房产优先于这 10 秒的宽限期。
`volumes`键用于将预先创建的卷和主机目录装载到服务复制副本中。在这种情况下，它从 Docker 主机将`/var/run/docker.sock`装载到每个服务副本的`/var/run/docker.sock`中。这意味着对复制副本中`/var/run/docker.sock`的任何读写都将传递到主机中的同一目录。
`/var/run/docker.sock`恰好是 Docker 守护程序公开其所有 API 端点的 IPC 套接字。这意味着给予容器对它的访问权限，使容器能够向 Docker 守护程序发出命令。这有很大的安全隐患，不建议在现实世界中使用。幸运的是，这只是一个实验室环境中的演示应用。
该服务需要访问 Docker 守护程序的原因是因为它提供了 Swarm 上服务的图形表示。为此，它需要能够查询管理器节点上的 Docker 守护程序。为了实现这一点，放置约束将所有服务副本强制放在管理器节点上，Docker 套接字绑定到每个服务副本中。
###### 支付网关
`payment_gateway`服务指定一个映像，安装一个机密，连接到一个网络，定义一个部分部署策略，然后强加一些放置约束。
```
payment_gateway:
  image: dockersamples/atseasampleshopapp_payment_gateway
  secrets:
    - source: staging_token
      target: payment_token
  networks:
    - payment
  deploy:
    update_config:
      failure_action: rollback
    placement:
      constraints:
        - 'node.role == worker'
        - 'node.labels.pcidss == yes' 
```
 `除了放置约束中的`node.label`之外，我们以前见过所有这些选项。节点标签是通过`docker node update`命令添加到群集节点的自定义标签。因此，它们只适用于 Swarm 中节点角色的上下文(您不能在独立容器上或 Swarm 之外利用它们)。
在这个例子中，`payment_gateway`服务执行的操作要求它在一个已经强化到 PCI DSS 标准的群节点上运行。为此，您可以将自定义*节点标签*应用于满足这些要求的任何群节点。我们将在构建实验室以部署应用时这样做。
由于此服务定义了两个放置约束，副本将仅部署到两者都匹配的节点。即带有`pcidss=yes`节点标签的**工人**节点。
现在我们已经完成了对栈文件的检查，您应该已经很好地理解了应用的需求。如前所述，栈文件是一个很好的应用文档。我们知道该应用有 5 项服务、3 个网络和 4 个机密。我们知道哪些服务连接到哪些网络，哪些端口需要发布，哪些映像是必需的，我们甚至知道有些服务需要在特定的节点上运行。
让我们部署它。
#### 部署应用
在部署应用之前，有几个先决条件需要注意:
*   **Swarm 模式:**我们将应用部署为 Docker Stack，而 Stack 需要 Swarm 模式。
*   **标签:**其中一个 Swarm 工作节点需要自定义节点标签。
*   **机密:**该应用使用需要预先创建的机密，然后才能部署。
##### 为示例应用构建实验室
在本节中，我们将构建一个三节点的基于 Linux 的 Swarm 集群，满足应用的所有先决条件。一旦我们完成了，实验室就会变成这样。
![Figure 14.2 Sample lab](img/figure14-2.png)
Figure 14.2 Sample lab
我们将完成以下三个步骤:
*   创建新的群
*   添加节点标签
*   创造机密
让我们创建一个新的三节点 Swarm 集群。
1.  Initialize a new Swarm.
    在要成为群管理器的节点上运行以下命令。
    ```
     $ docker swarm init
     Swarm initialized: current node (lhma...w4nn) is now a manager.
    ```
`*   Add worker nodes.
    复制上一条命令输出中显示的`docker swarm join`命令。将其粘贴到要作为工作人员加入的两个节点中。
    ```
     //Worker 1 (wrk-1)
     wrk-1$ docker swarm join --token SWMTKN-1-2hl6...-...3lqg 172.31.40.192:2377
     This node joined a swarm as a worker.
     //Worker 2 (wrk-2)
     wrk-2$ docker swarm join --token SWMTKN-1-2hl6...-...3lqg 172.31.40.192:2377
     This node joined a swarm as a worker. 
    ```
    `*   Verify that the Swarm is configured with one manager and two workers.
    从管理器节点运行此命令。
    ```
     $ docker node ls
     ID            HOSTNAME   STATUS     AVAILABILITY    MANAGER STATUS
     lhm...4nn *   mgr-1      Ready      Active          Leader
     b74...gz3     wrk-1      Ready      Active
     o9x...um8     wrk-2      Ready      Active 
    ```
    `` 
 ```蜂群现在准备好了。
`payment_gateway`服务有一组放置约束，强制其只在带有`pcidss=yes`节点标签的**工作节点**上运行。在这一步中，我们将把节点标签添加到`wrk-1`中。
在现实世界中，在标记它之前，您应该将至少一个 Docker 节点强化到 PCI 标准。然而，这只是一个实验室，所以我们将跳过硬化步骤，只需将标签添加到`wrk-1`。
从 Swarm 管理器运行以下命令。
1.  Add the node label to `wrk-1`.
    ```
     $ docker node update --label-add pcidss=yes wrk-1
     wrk-1 
    ```
     `节点标签仅适用于群内。` 
`*   验证节点标签。
    ```
     $ docker node inspect wrk-1
     [
     {
         "ID": "b74rzajmrimfv7hood6l4lgz3",
         "Version": {
             "Index": 27
         },
         "CreatedAt": "2020-05-04T12:06:18.221580486Z",
         "UpdatedAt": "2020-05-04T12:08:17.335295528Z",
         "Spec": {
             "Labels": {
                 "pcidss": "yes"
             },
    ```
    ` 
 ```wrk-1`工作节点现在已经配置好，可以为`payment_gateway`服务运行副本。
该应用定义了四个机密，所有这些机密都需要在部署应用之前创建:
*   `postgress_password`
*   `staging_token`
*   `revprox_cert`
*   `revprox_key`
从管理器节点运行以下命令来创建它们。
1.  Create a new key pair.
    其中三个机密将被加密密钥填充。我们将在这一步中创建密钥，然后在接下来的步骤中将它们放入 Docker 机密中。
    ```
     $ openssl req -newkey rsa:4096 -nodes -sha256 \
       -keyout domain.key -x509 -days 365 -out domain.crt 
    ```
     `在您当前的目录中将有两个新文件。我们将在下一步中使用它们。` 
`*   创造`revprox_cert`、`revprox_key`和`postgress_password`的机密。