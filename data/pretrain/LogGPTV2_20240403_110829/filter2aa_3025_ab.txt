  of	
  a	
network’s	
  inbound	
  and	
  outbound	
  communication.	
  Further,	
  successful	
  compromise	
  of	
  the	
  gateway	
device	
  opens	
  the	
  opportunity	
  to	
  attack	
  internal	
  systems	
  that	
  previously	
  were	
  not	
  exposed.	
Analyzing the Target Device 
Inspection	
  of	
  the	
  target	
  device’s	
  firmware	
  is	
  an	
  excellent	
  place	
  to	
  begin	
  analysis.	
  There	
  is	
  a	
  wealth	
  of	
intelligence	
  to	
  be	
  found	
  in	
  the	
  manufacturer’s	
  firmware	
  update	
  file.	
  Although	
  the	
  process	
  of	
  unpacking	
and	
  analyzing	
  firmware	
  is	
  beyond	
  the	
  scope	
  of	
  this	
  paper,	
  Craig	
  Heffner	
  has	
  provided	
  on	
  his	
  website2	
  an	
excellent	
  explanation	
  of	
  the	
  tools	
  and	
  techniques	
  involved.	
  Having	
  downloaded3	
  and	
  unpacked	
  the	
firmware	
  update	
  file,	
  we	
  can	
  now	
  verify	
  that	
  this	
  device	
  runs	
  a	
  Linux-­‐based	
  operating	
  system:	
1	
  At	
  the	
  time	
  of	
  writing,	
  this	
  device	
  is	
  widely	
  available	
  online	
  for	
  approximately	
  USD$100.	
2	
  http://www.devttys0.com/2011/05/reverse-­‐engineering-­‐firmware-­‐linksys-­‐wag120n/ 
3	
  http://support.netgear.com/app/products/model/a_id/19278	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
3 
Figure 1 Verifying the Linux kernel in the vendor’s firmware update file. 
Any	
  device	
  that	
  runs	
  Linux	
  is	
  an	
  ideal	
  candidate	
  for	
  analysis,	
  since	
  there	
  are	
  ample	
  tools	
  and	
  techniques	
readily	
  available	
  for	
  working	
  with	
  Linux	
  systems.	
Often,	
  simply	
  having	
  a	
  copy	
  of	
  the	
  firmware	
  is	
  sufficient	
  for	
  discovering	
  vulnerabilities	
  and	
  developing	
working	
  exploits	
  against	
  them.	
  However,	
  being	
  able	
  to	
  interact	
  directly	
  with	
  the	
  hardware	
  can	
  aid	
analysis	
  greatly.	
  In	
  the	
  case	
  of	
  the	
  WNDR3700,	
  it	
  is	
  easy	
  to	
  modify	
  its	
  internals	
  by	
  attaching	
  a	
  UART	
header	
  so	
  we	
  can	
  interact	
  with	
  the	
  running	
  device	
  via	
  a	
  serial	
  console	
  application	
  such	
  as	
  minicom.	
  I	
won’t	
  detail	
  the	
  specifics	
  of	
  hardware	
  modification	
  in	
  this	
  paper.	
  This	
  is	
  adequately	
  addressed	
  on	
various	
  hobbyist	
  websites	
  and	
  forums.	
  However,	
  terminal	
  access	
  to	
  the	
  device	
  is	
  essential	
  for	
  the	
investigations	
  I	
  describe.	
In	
  addition	
  to	
  the	
  serial	
  port,	
  the	
  WNDR3700v3	
  has	
  another	
  feature	
  that	
  aids	
  analysis:	
  a	
  USB	
  port.	
  This	
device	
  is	
  intended	
  for	
  use	
  as	
  a	
  Network	
  Attached	
  Storage	
  (NAS)	
  device,	
  and	
  will	
  automatically	
  mount	
  a	
USB	
  storage	
  device	
  when	
  it	
  is	
  plugged	
  in.	
  This	
  makes	
  it	
  easy	
  to	
  load	
  tools	
  onto	
  the	
  device	
  for	
  dynamic	
analysis.	
  Also,	
  system	
  files	
  such	
  as	
  executables,	
  libraries,	
  configuration	
  files,	
  and	
  database	
  files	
  may	
  be	
copied	
  from	
  the	
  device	
  for	
  offline	
  analysis.	
Although	
  the	
  DLNA	
  server	
  functionality	
  requires	
  external	
  USB	
  storage	
  in	
  order	
  to	
  serve	
  digital	
  media,	
  the	
vulnerabilities	
  detailed	
  in	
  this	
  paper	
  do	
  not.	
  The	
  vulnerable	
  DLNA	
  server	
  functionality	
  remains	
  running	
on	
  the	
  device	
  even	
  if	
  the	
  user	
  does	
  not	
  connect	
  a	
  USB	
  storage	
  device.	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
4 
Target Application: MiniDLNA server 
The	
  application	
  included	
  in	
  the	
  WNDR3700’s	
  firmware	
  providing	
  DLNA	
  capabilities	
  is	
  called	
‘minidlna.exe’.	
  The	
  minidlna	
  executable	
  can	
  be	
  found	
  in	
  the	
  unpacked	
  firmware:	
Figure 2 Locating minidlna.exe in upacked firmware. 
Running	
  the	
  ‘strings’	
  command	
  on	
  the	
  minidlna.exe	
  executable,	
  grepping	
  for	
  ‘Version’	
  reveals	
  that	
this	
  build	
  is	
  version	
  1.0.18:	
Figure 3 Verifying version of MiniDLNA found in vendor’s firmware update file. 
A	
  Google	
  search	
  reveals	
  that	
  Netgear	
  has	
  released	
  MiniDLNA	
  as	
  an	
  open	
  source	
  project	
  on	
Sourceforge.com.	
  This	
  is	
  potentially	
  a	
  lucky	
  find.	
  Source	
  code	
  significantly	
  reduces	
  time	
  and	
  effort	
involved	
  in	
  analyzing	
  the	
  target	
  application.	
Analyzing MiniDLNA 
Vulnerability 1: SQL Injection  
Having	
  downloaded	
  and	
  unpacked	
  the	
  corresponding	
  source	
  code	
  for	
  MiniDLNA	
  version	
  1.0.18,	
  there	
are	
  easy	
  indicators	
  to	
  look	
  for	
  which	
  may	
  point	
  to	
  vulnerabilities.	
  A	
  grep	
  search	
  yields	
  valuable	
evidence:	
Figure 4 A search for candidates for SQL injection vulnerability. 
Looking	
  for	
  potential	
  SQL	
  injections,	
  we	
  grep	
  for	
  SQL	
  queries	
  constructed	
  using	
  improperly	
  escaped	
strings	
  (the	
  ‘%s’	
  format	
  character).	
  There	
  are	
  21	
  lines	
  matching	
  this	
  pattern	
  in	
  the	
  MiniDLNA	
  source.	
The	
  ones	
  shown	
  above	
  are	
  representative.	
  In	
  addition	
  to	
  being	
  potential	
  SQL	
  injections,	
  there	
  are	
  also	
possibly	
  buffer	
  overflows,	
  due	
  to	
  the	
  use	
  of	
  an	
  unbounded	
  sprintf().	
Let’s	
  look	
  at	
  the	
  upnphttp.c,	
  line	
  1174,	
  where	
  ALBUM_ART	
  is	
  queried:	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
5 
Figure 5 Location in MiniDLNA source code where album art is queried by ID field. 
We	
  see	
  that	
  ‘sql_buf’	
  is	
  a	
  256-­‐byte	
  character	
  array	
  placed	
  on	
  the	
  stack.	
  There	
  is	
  an	
  unbounded	
sprintf()	
  into	
  it.	
This	
  may	
  be	
  a	
  buffer	
  overflow.	
  A	
  grep	
  through	
  the	
  source	
  reveals	
  there’s	
  only	
  a	
  single	
  call-­‐site	
  for	
SendResp_albumArt().	
  Let’s	
  look	
  at	
  where	
  it’s	
  called	
  from	
  upnphttp.c:	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
6 
Figure 6 Analyzing call-site of SendResp_albumArt().  This appears to be no buffer overflow candidate, but may be a 
SQL injection candidate. 
We	
  can	
  see	
  the	
  caller,	
  ProcessHttpQuery_unpnphttp(),	
  sends	
  a	
  string	
  512	
  (or	
  fewer)	
  bytes	
  in	
  length	
  to	
SendResp_albumArt().	
  Unfortunately,	
  since	
  there	
  is	
  a	
  1500-­‐byte	
  character	
  array	
  on	
  the	
  stack	
  in	
SendResp_albumArt()	
  above	
  sql_buf,	
  we	
  cannot	
  overwrite	
  the	
  saved	
  return	
  address	
  with	
  an	
overflow.	
Nonetheless,	
  this	
  seems	
  to	
  be	
  an	
  ideal	
  candidate	
  for	
  SQL	
  injection.	
  If	
  there	
  is	
  a	
  dash	
  character	
  in	
  the	
requested	
  ‘object’,	
  the	
  dash	
  and	
  everything	
  after	
  is	
  trimmed.	
  What	
  remains	
  of	
  the	
  ‘object’	
  string	
  is	
transformed	
  into	
  a	
  SQL	
  query.	
It	
  isn’t	
  safe	
  to	
  assume	