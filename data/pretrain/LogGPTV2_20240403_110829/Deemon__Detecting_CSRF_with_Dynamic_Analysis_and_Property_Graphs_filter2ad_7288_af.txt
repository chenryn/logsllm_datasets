by an attacker. MyBB uses a secret user-unique API key which
authenticates the user when performing state-changing requests.
If the key is valid, then the operation is executed. While for regular
users, in our model this key is correctly labeled unique per user,
for the administrator, the key is labeled constant. In our analysis,
we used traces from a single administrator user, as MyBB has no
concept of multiple administrator accounts. Thus, all these traces
contained the same key, causing our type inference algorithm to
infer the constant type. Accordingly, the key is included in our
tests. The server-side program veri(cid:27)es that the key belongs to the
administrator and executes the requested operation.
9 ANALYSIS
Despite its popularity and severity, our results show that the risk
posed by aCSRF vulnerabilities is overlooked or even misunder-
stood. An analysis of our results exposes three distinct classes of
developer awareness—complete, partial and nonexisting:
Complete Awareness—At one end of the awareness spectrum, we
have full awareness, in which developers deploy aCSRF counter-
measures for all state-changing operations. Examples of this group
are Horde, Oxid, and Prestashop. For example, in the case of Oxid,
all 33 tests failed when omitting an anti-CSRF token.
Unawareness—At the other end, we have complete unawareness.
Developers may still not be aware of aCSRF nor of the security
implications of successful exploitations. As a result, developers may
leave state-changing operations unguarded. Simple Invoices is an
example of such a case, in which all state-changing operations are
vulnerable to aCSRF attacks.
Partial Unawareness—We observed two interesting cases in which
protections are deployed in a selective manner. From our testbed,
we can distinguish two clear cases.
Role-based Protections: Examples for this case are OpenCart and
AbanteCart, which treat regular users and administrators di(cid:29)er-
ently. Our tests showed that administrator operations are protected
by anti-CSRF tokens. Omitting these tokens results in rejected state-
changing operations. This shows that developers are aware of the
security risks and that they deployed adequate countermeasures.
However, user operations are not equally protected. As we have
seen, even critical operations, such as password change, are ex-
posed to severe attacks leading to customer account takeover. We
speculate that this may be the result of an inadequate or incomplete
risk analysis and threat modeling during the design phase.
Operation-based Protections: As opposed to the previous case, the
distinction is not based on the role of the user, but on the type of
operation. In general, web applications o(cid:29)er operations to create,
delete, and update elements in a database. Elements can be anything
including users, contacts, and products. In Mautic, we observed that
creation and updating are guarded by anti-CSRF tokens. Deemon
veri(cid:27)ed that when a token is omitted, a test fails. Similarly for the
cases of AbanteCart and OpenCart, this behavior shows that the
developers may be aware of the security risks. However, deletion
operations are not protected, allowing attackers to compromise
the database. In contrast to role-based protections, this may not be
caused by inadequate threat modeling. We believe that developers
just overlooked this operation.
10 DISCUSSION AND FUTURE WORK
Scalability of the Model—Our assessment showed that a modern
workstation can e(cid:28)ciently handle a single graph database instance
with three million nodes. We believe that this would be an average
use case of our tool. However, property graphs can scale to hundreds
of millions of nodes [3]. In these scenarios, Deemon can also be
run on servers, exploiting the availability of additional hardware
resources.
Performance—The main bottleneck of our approach is the interac-
tion with a running web application. In our experiments, we used
one virtual machine at a time, but, we plan to improve performance
by spawning parallel, multiple virtual machine instances of the
same web application.
Generality of the Approach—Our evaluation was conducted on
PHP-based web applications using a MySQL database. While these
are popular among web developers, web applications can use dif-
ferent SQL databases or can be written in other programming lan-
guages. The modeling framework is independent from the program-
ming language. However, instrumentation and sensors may require
new connectors in order to acquire traces.
Detection Power—Deemon was conceived to target aCSRF. How-
ever, as for CSRF, other classes of severe vulnerabilities have been
neglected by the security community, e.g., session management
issues and race conditions. The lowest common denominator of
these classes is that they are much more complex to detect when
compared to XSS and SQLi. The detection of these classes require
learning in-depth behaviors of a program and synthesizing the
relevant aspects in models. From this point of view, our modeling
paradigm has to be seen as an initial e(cid:29)ort toward this long-term
goal. Deemon provides a uni(cid:27)ed representation for artifacts and
models used in dynamic analysis, and furthermore, it provides a
semantic of the relationships between them. However, our repre-
sentation may not be su(cid:28)cient to capture relevant aspects for the
detection of other classes of vulnerabilities.
11 RELATED WORK
To the best of our knowledge, this is the (cid:27)rst work proposing a
technique for the detection of aCSRF vulnerabilities. Existing work
focused mainly on defense techniques, proposing new HTTP head-
ers (See, e.g., [6, 20, 21, 25]) and new CSRF-based attacks (e.g., [38]).
As opposed to these works, Deemon does not protect from exploita-
tion, but it allows discovery of CSRF during the testing phase of
the development of web applications.
Property Graphs and Vulnerability Detection—Our approach
relies on graph databases for the representation and composition
of models. Similar to our idea, Yamaguchi et al. [42] and Backes et
al. [3] combined di(cid:29)erent code representations in a property graph.
While these works focused on static source code representations,
we model dynamic behaviors of the application. Furthermore, these
works, similarly to others in the area of web security, focused on
input validation vulnerabilities. In contrast, our work presented a
technique to discover aCSRF.
Dynamic Analysis—Research on dynamic analysis has been very
active over the last decade, proposing new techniques and tools to
detect a variety of vulnerabilities. For example, unsupervised web
application scanners are very popular tools routinely used to detect
vulnerabilities in web applications. Starting from a URL, a web ap-
plication scanner crawls a web application and then, for each discov-
ered input, it probes the application with crafted input strings. There
are plenty of commercial and non-commercial scanners, including
tools proposed by the research community [10, 17, 23, 27, 33]).
While web scanners are e(cid:29)ective in the detection of XSS and SQLi,
they still perform poorly or even fail in the detection of more so-
phisticated vulnerabilities, including aCSRF vulnerabilities [7, 11].
Compared to web scanners, Deemon does not include a crawler com-
ponent. Crawlers use breadth- or depth-(cid:27)rst algorithms which are
not adequate to reach security-relevant state-changing requests.
As opposed to this technique, Deemon—similarly to other dynamic
approaches (See, e.g., [26, 32])—follows a di(cid:29)erent approach in
which input traces are used to explore in depth the functionalities
of web applications. Other approaches have been proposed in or-
der to address more complex (cid:30)aws, e.g., user authentication (see,
e.g., [4, 44]), and logic vulnerabilities (e.g., [32]), often combining
model inference with dynamic testing. These approaches analyze
components and functionalities that are speci(cid:27)c to the vulnerability
being targeted, thus making them inherently limited in the ability
to reason about the presence of CSRF vulnerabilities.
Static Analysis—Static program analysis has been used to detect
several classes of vulnerabilities, e.g., input validation vulnera-
bilities [3, 9, 18, 22], authorization vulnerabilities [28], and logic
(cid:30)aws [39]. Similarly as for dynamic techniques, none of the existing
approaches target CSRF vulnerabilities. Second, more and more
web applications tend to use programming languages and coding
patterns, e.g., runtime second-order function calls [14, 15] and SQL
query construction [1], that are hard to treat statically. Static an-
alyzers often address these shortcomings by calculating over- or
under-approximations that can cause high rates of false positives [3].
In these scenarios, dynamic techniques such as Deemon are a valid
alternative; however, existing approaches lack the sophistication to
detect CSRF.
12 CONCLUSION
We presented Deemon, to the best of our knowledge the (cid:27)rst security
testing framework that can detect aCSRF vulnerabilities. At the core
of Deemon is a new modeling paradigm based on property graphs
that de(cid:27)nes (i) searchable model components to represent multiple
aspects of web applications, and (ii) a query language that allows
expression of suspicious or vulnerable behaviors. Our experiments
detected 14 severe aCSRF vulnerabilities a(cid:29)ecting four web appli-
cations that can be used to take over websites, or user accounts,
and compromise database integrity. Finally, we assessed the current
awareness level of the aCSRF vulnerabilities and showed alarming
behaviors in which security-sensitive operations are protected in
a selective manner. This work has successfully demonstrated the
capabilities of our paradigm, which comprehensively captures non-
trivial, cross-tier aspects of modern web applications. In the near
future, we intend to leverage the opportunities provided by our
paradigm and extend the approach towards additional vulnerability
classes.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their valuable
feedback and our shepherd Adam Doupé for his support in ad-
dressing reviewers’ comments. We would like also to thank Benny
Rolle and Florian Loch for their contribution to the development
of Deemon. This work was supported by the German Federal Min-
istry of Education and Research (BMBF) through funding for the
Center for IT-Security, Privacy and Accountability (CISPA) (FKZ:
16KIS0345, 16KIS0656), the CISPA-Stanford Center for Cybersecu-
rity (FKZ: 13N1S0762), and the project BOB (FKZ: 13N13250).
REFERENCES
[1] David Anderson and Mark Hills. 2017. Query Construction Patterns in PHP. In
IEEE 24th International Conference on Software Analysis, Evolution and Reengi-
neering, SANER 2017, Klagenfurt, Austria, February 20-24, 2017. 452–456. DOI:
https://doi.org/10.1109/SANER.2017.7884652
[2] Marc Andreessen. 1993. proposed new tag: IMG. [Posting to the www-talk
mailing list], http://1997.webhistory.org/www.lists/www-talk.1993q1/0182.html.
(February 1993).
[3] Michael Backes, Konrad Rieck, Malte Skoruppa, Ben Stock, and Fabian Yamaguchi.
2017. E(cid:28)cient and Flexible Discovery of PHP Application. In 2nd European
Symposium on Security & Privacy (EuroS&P 2017) (to appear).
[4] Guangdong Bai, Jike Lei, Guozhu Meng, Sai Sathyanarayan Venkatraman, Prateek
Saxena, Jun Sun, Yang Liu, and Jin Song Dong. 2013. AUTHSCAN: Automatic
Extraction of Web Authentication Protocols from Implementations. In 20th An-
nual Network and Distributed System Security Symposium, NDSS 2013, San Diego,
California, USA, February 24-27, 2013.
[5] A. Barth. 2011. The Web Origin Concept. RFC 6454 (Proposed Standard). (Dec.
2011). http://www.ietf.org/rfc/rfc6454.txt
[7]
[6] Adam Barth, Collin Jackson, and John C. Mitchell. 2008. Robust Defenses for
Cross-site Request Forgery. In Proceedings of the 15th ACM Conference on Com-
puter and Communications Security (CCS ’08). ACM, New York, NY, USA, 75–88.
DOI:https://doi.org/10.1145/1455770.1455782
Jason Bau, Elie Bursztein, Divij Gupta, and John Mitchell. 2010. State of the
Art: Automated Black-Box Web Application Vulnerability Testing. In 2010 IEEE
Symposium on Security and Privacy. 332–345. DOI:https://doi.org/10.1109/SP.
2010.27
[8] Bitnami. 2016. Bitnami Applications. (2016). https://bitnami.com/stacks
[9]
Johannes Dahse and Thorsten Holz. 2014. Static Detection of Second-Order
Vulnerabilities in Web Applications. In 23rd USENIX Security Symposium (USENIX
Security 14). USENIX Association, San Diego, CA, 989–1003.
[10] Adam Doupé, Ludovico Cavedon, Christopher Kruegel, and Giovanni Vigna.
2012. Enemy of the State: A State-Aware Black-Box Web Vulnerability Scanner.
In Presented as part of the 21st USENIX Security Symposium (USENIX Security 12).
USENIX, Bellevue, WA, 523–538.
[11] Adam Doupé, Marco Cova, and Giovanni Vigna. 2010. Why Johnny Can’T
Pentest: An Analysis of Black-box Web Vulnerability Scanners. In Proceedings
of the 7th International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA’10). Springer-Verlag, Berlin, Heidelberg, 111–
131.
[12] Dave Ferguson. 2009. Net(cid:30)ix CSRF Revisited.
[online], http://appsecnotes.
blogspot.de/2009/01/net(cid:30)ix-csrf-revisited.html. (January 2009).
[16]
[13] Robert M. Hierons, Kirill Bogdanov, Jonathan P. Bowen, Rance Cleaveland,
John Derrick, Jeremy Dick, Marian Gheorghe, Mark Harman, Kalpesh Kapoor,
Paul Krause, Gerald Lüttgen, Anthony J. H. Simons, Sergiy Vilkomir, Martin R.
Woodward, and Hussein Zedan. 2009. Using Formal Speci(cid:27)cations to Sup-
port Testing. ACM Comput. Surv. 41, 2, Article 9 (Feb. 2009), 76 pages. DOI:
https://doi.org/10.1145/1459352.1459354
[14] Mark Hills. 2015. Evolution of dynamic feature usage in PHP. In 22nd IEEE
International Conference on Software Analysis, Evolution, and Reengineering,
SANER 2015, Montreal, QC, Canada, March 2-6, 2015. 525–529. DOI:https:
//doi.org/10.1109/SANER.2015.7081870
[15] Mark Hills, Paul Klint, and Jurgen J. Vinju. 2013. An empirical study of PHP fea-
ture usage: a static analysis perspective. In International Symposium on Software
Testing and Analysis, ISSTA ’13, Lugano, Switzerland, July 15-20, 2013. 325–335.
DOI:https://doi.org/10.1145/2483760.2483786
John E. Hopcroft, Rajeev Motwani, and Je(cid:29)rey D. Ullman. 2006. Introduction to
Automata Theory, Languages, and Computation (3rd Edition). Addison-Wesley
Longman Publishing Co., Inc., Boston, MA, USA.
[17] Yao-Wen Huang, Chung-Hung Tsai, Tsung-Po Lin, Shih-Kun Huang, D. T. Lee,
and Sy-Yen Kuo. 2005. A Testing Framework for Web Application Security
Assessment. Comput. Netw. 48, 5 (Aug. 2005), 739–761. DOI:https://doi.org/10.
1016/j.comnet.2005.01.003
[18] Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai, Der-Tsai Lee,
and Sy-Yen Kuo. 2004. Securing Web Application Code by Static Analysis and
Runtime Protection. In Proceedings of the 13th International Conference on World
Wide Web (WWW ’04). ACM, New York, NY, USA, 40–52. DOI:https://doi.org/
10.1145/988672.988679
[19] Martin Johns. 2007. The three faces of CSRF.
talk at the DeepSec2007
conference, https://deepsec.net/archive/2007.deepsec.net/speakers/index.html#
martin-johns. (November 2007).
[20] Martin Johns and Justus Winter. RequestRodeo: client side protection against
session riding. In in Proceedings of the OWASP Europe 2006 Conference, refereed
papers track, Report CW448. 5–17.
[21] Nenad Jovanovic, Engin Kirda, and Christopher Kruegel. 2006. Preventing Cross
Site Request Forgery Attacks.. In SecureComm. IEEE, 1–10.
[22] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: A Static
Analysis Tool for Detecting Web Application Vulnerabilities (Short Paper). In
Proceedings of the 2006 IEEE Symposium on Security and Privacy (SP ’06). IEEE
Computer Society, Washington, DC, USA, 258–263. DOI:https://doi.org/10.1109/
SP.2006.29
[23] Stefan Kals, Engin Kirda, Christopher Kruegel, and Nenad Jovanovic. 2006. Se-
cuBat: A Web Vulnerability Scanner. In Proceedings of the 15th International
Conference on World Wide Web (WWW ’06). ACM, New York, NY, USA, 247–256.
DOI:https://doi.org/10.1145/1135777.1135817
[24] Florian Kerschbaum. 2007. Simple cross-site attack prevention. In 2007 Third
International Conference on Security and Privacy in Communications Networks
and the Workshops - SecureComm 2007. 464–472. DOI:https://doi.org/10.1109/
SECCOM.2007.4550368
[25] Ziqing Mao, Ninghui Li, and Ian Molloy. 2009. Defeating Cross-Site Request
Forgery Attacks with Browser-Enforced Authenticity Protection. Springer Berlin
Heidelberg, Berlin, Heidelberg, 238–255.
[26] Sean Mcallister, Engin Kirda, and Christopher Kruegel. 2008. Leveraging User
Interactions for In-Depth Testing of Web Applications. In Proceedings of the
11th International Symposium on Recent Advances in Intrusion Detection (RAID
’08). Springer-Verlag, Berlin, Heidelberg, 191–210. DOI:https://doi.org/10.1007/
978-3-540-87403-4_11
[27] Ali Mesbah, Arie van Deursen, and Stefan Lenselink. 2012. Crawling Ajax-
Based Web Applications Through Dynamic Analysis of User Interface State
Changes. ACM Trans. Web 6, 1, Article 3 (March 2012), 30 pages. DOI:https:
//doi.org/10.1145/2109205.2109208
[28] Maliheh Monshizadeh, Prasad Naldurg, and V. N. Venkatakrishnan. 2014. MACE:
Detecting Privilege Escalation Vulnerabilities in Web Applications. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’14). ACM, New York, NY, USA, 690–701. DOI:https://doi.org/10.1145/
2660267.2660337
[29] Neo Technology, Inc. 2017. The Cypher Query Language. (2017). http://tinkerpop.
[30] OWASP. 2017. OWASP Testing Guide v4. (2017). https://www.owasp.org/index.
apache.org/
php/OWASP_Testing_Project
[31] OWASP. 2017. The OWASP Top 10 Project (from 2007 to 2013). (2017). https:
//www.owasp.org/index.php/Category:OWASP_Top_Ten_Project
[32] Giancarlo Pellegrino and Davide Balzarotti. 2014. Toward Black-Box Detection
of Logic Flaws in Web Applications. In 21st Annual Network and Distributed
System Security Symposium, NDSS 2014, San Diego, California, USA, February
23-26, 2014.
[33] Giancarlo Pellegrino, Constantin Tschürtz, Eric Bodden, and Christian Rossow.
2015. jÄk: Using Dynamic Analysis to Crawl and Test Modern Web Applications.
Springer International Publishing, Cham, 295–316. DOI:https://doi.org/10.1007/
978-3-319-26362-5_14
[34] Petko D. Petkov. 2007. Google GMail E-Mail Hijack Technique. (2007). http:
//www.gnucitizen.org/blog/google-gmail-e-mail-hijack-technique/
[35] Derick Rethans. 2017. Xdebug Extension for PHP. (2017). https://xdebug.org/
[36] Thomas Schreiber. 2004. Session Riding - A Widespread Vulnerability in Today’s
Web Applications. (2004). http://www.securenet.de/papers/Session_Riding.pdf
[37] Selenium Committers. 2017. SeleniumHQ. (2017). http://www.seleniumhq.org/
[38] Avinash Sudhodanan, Roberto Carbone, Luca Compagna, Nicolas Dolgin,
Alessandro Armando, and Umberto Morelli. 2017. Large-Scale Analysis & De-
tection of Authentication Cross-Site Request Forgeries. In 2017 IEEE European
Symposium on Security and Privacy, EuroS&P 2017, Paris, France, April 26-28, 2017.
350–365. DOI:https://doi.org/10.1109/EuroSP.2017.45
[39] Fangqi Sun, Liang Xu, and Zhendong Su. 2014. Detecting Logic Vulnerabilities
in E-commerce Applications. In 21st Annual Network and Distributed System
Security Symposium, NDSS 2014, San Diego, California, USA, February 23-26, 2014.
[40] Anne van Kesteren, Julian Aubourg, Jungkee Song, and Hallvord R. M. Steen. 2016.
XMLHttpRequest Level 1. (2016). https://www.w3.org/TR/XMLHttpRequest/
[41] Rui Wang, Shuo Chen, and XiaoFeng Wang. 2012. Signing Me Onto Your Ac-
counts Through Facebook and Google: A Tra(cid:28)c-Guided Security Study of Com-
mercially Deployed Single-Sign-On Web Services. In Proceedings of the 2012 IEEE
Symposium on Security and Privacy (SP ’12). IEEE Computer Society, Washington,
DC, USA, 365–379. DOI:https://doi.org/10.1109/SP.2012.30
[42] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling
and Discovering Vulnerabilities with Code Property Graphs. In Proceedings of the
2014 IEEE Symposium on Security and Privacy (SP ’14). IEEE Computer Society,
Washington, DC, USA, 590–604. DOI:https://doi.org/10.1109/SP.2014.44
[43] William Zeller and Edward W. Felten. 2008. Cross-Site Request Forgeries: Ex-
ploitation and Prevention. (2008). http://www.cs.utexas.edu/~shmat/courses/
cs378/zeller.pdf
[44] Yuchen Zhou and David Evans. 2014. SSOScan: Automated Testing of Web
Applications for Single Sign-on Vulnerabilities. In Proceedings of the 23rd USENIX
Conference on Security Symposium (SEC’14). USENIX Association, Berkeley, CA,
USA, 495–510. http://dl.acm.org/citation.cfm?id=2671225.2671257