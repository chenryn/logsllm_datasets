### MyBB API Key Authentication

MyBB employs a secret, user-unique API key to authenticate users when they perform state-changing requests. If the provided key is valid, the operation is executed. In our model, for regular users, this key is correctly labeled as unique per user. However, for administrators, the key is labeled as constant. This is because, in our analysis, we used traces from a single administrator user, as MyBB does not support multiple administrator accounts. Consequently, all these traces contained the same key, leading our type inference algorithm to infer it as a constant. Therefore, the key is included in our tests. The server-side program verifies that the key belongs to the administrator and then executes the requested operation.

### Analysis of aCSRF Vulnerabilities

Despite the prevalence and severity of aCSRF vulnerabilities, our results indicate that the risk posed by these vulnerabilities is often overlooked or misunderstood. Our analysis reveals three distinct levels of developer awareness: complete, partial, and non-existent.

1. **Complete Awareness**: At one end of the spectrum, developers fully understand the risks and deploy aCSRF countermeasures for all state-changing operations. Examples include Horde, Oxid, and PrestaShop. For instance, in Oxid, all 33 tests failed when an anti-CSRF token was omitted.

2. **Unawareness**: At the other end, developers may be completely unaware of aCSRF and its security implications. As a result, state-changing operations remain unguarded. Simple Invoices is an example where all state-changing operations are vulnerable to aCSRF attacks.

3. **Partial Unawareness**: We observed two interesting cases where protections are selectively deployed:
   - **Role-based Protections**: OpenCart and AbanteCart treat regular users and administrators differently. Our tests showed that administrator operations are protected by anti-CSRF tokens, and omitting these tokens results in rejected state-changing operations. However, user operations, including critical ones like password changes, are not equally protected. This suggests an inadequate or incomplete risk analysis and threat modeling during the design phase.
   - **Operation-based Protections**: Unlike role-based protections, the distinction here is based on the type of operation. Web applications generally offer operations to create, delete, and update elements in a database. In Mautic, creation and updating operations are guarded by anti-CSRF tokens, but deletion operations are not. This oversight allows attackers to compromise the database. This may be due to developers overlooking specific operations rather than inadequate threat modeling.

### Discussion and Future Work

**Scalability of the Model**: Our assessment showed that a modern workstation can efficiently handle a single graph database instance with three million nodes, which we consider an average use case for our tool. Property graphs can scale to hundreds of millions of nodes, and Deemon can be run on servers to exploit additional hardware resources.

**Performance**: The main bottleneck in our approach is the interaction with a running web application. In our experiments, we used one virtual machine at a time, but we plan to improve performance by spawning parallel, multiple virtual machine instances of the same web application.

**Generality of the Approach**: Our evaluation was conducted on PHP-based web applications using a MySQL database. While these are popular, web applications can use different SQL databases or be written in other programming languages. The modeling framework is language-agnostic, but instrumentation and sensors may require new connectors to acquire traces.

**Detection Power**: Deemon was designed to target aCSRF. However, other severe vulnerabilities, such as session management issues and race conditions, are also often neglected. These classes of vulnerabilities are more complex to detect compared to XSS and SQLi. Detecting them requires in-depth learning of program behaviors and synthesizing relevant aspects into models. Our modeling paradigm is an initial effort toward this long-term goal, providing a unified representation for artifacts and models used in dynamic analysis and a semantic of their relationships. However, our representation may not be sufficient to capture all relevant aspects for detecting other vulnerability classes.

### Related Work

To our knowledge, this is the first work proposing a technique for the detection of aCSRF vulnerabilities. Existing work has focused mainly on defense techniques, such as new HTTP headers and CSRF-based attacks. Deemon, however, does not protect against exploitation but allows the discovery of CSRF during the testing phase of web application development.

**Property Graphs and Vulnerability Detection**: Our approach uses graph databases for model representation and composition. Similar to our idea, Yamaguchi et al. [42] and Backes et al. [3] combined different code representations in a property graph. While these works focused on static source code, we model dynamic behaviors of the application. Additionally, these works, like others in web security, focused on input validation vulnerabilities, whereas our work presents a technique to discover aCSRF.

**Dynamic Analysis**: Research on dynamic analysis has been active, proposing new techniques and tools to detect various vulnerabilities. Unsupervised web application scanners, for example, are popular for detecting vulnerabilities like XSS and SQLi. However, they perform poorly for more sophisticated vulnerabilities, including aCSRF. Deemon does not include a crawler component, as breadth- or depth-first algorithms are not adequate for reaching security-relevant state-changing requests. Instead, Deemon uses input traces to explore web application functionalities in depth, similar to other dynamic approaches.

**Static Analysis**: Static program analysis has been used to detect several vulnerability classes, such as input validation, authorization, and logic flaws. None of the existing approaches target CSRF vulnerabilities. Moreover, many web applications use programming languages and coding patterns that are difficult to analyze statically, leading to high false-positive rates. In such scenarios, dynamic techniques like Deemon are a valid alternative, although existing approaches lack the sophistication to detect CSRF.

### Conclusion

We presented Deemon, the first security testing framework to detect aCSRF vulnerabilities. At its core, Deemon introduces a new modeling paradigm based on property graphs, defining searchable model components and a query language to express suspicious or vulnerable behaviors. Our experiments detected 14 severe aCSRF vulnerabilities affecting four web applications, which can be used to take over websites, user accounts, and compromise database integrity. We also assessed the current awareness level of aCSRF vulnerabilities, revealing alarming behaviors where security-sensitive operations are selectively protected. This work successfully demonstrates the capabilities of our paradigm, which comprehensively captures non-trivial, cross-tier aspects of modern web applications. In the near future, we intend to extend our approach to additional vulnerability classes.

### Acknowledgments

We thank the anonymous reviewers for their valuable feedback and our shepherd Adam Doupé for his support in addressing reviewers’ comments. We also thank Benny Rolle and Florian Loch for their contributions to the development of Deemon. This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656), the CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762), and the project BOB (FKZ: 13N13250).

### References

[References listed as in the original text]