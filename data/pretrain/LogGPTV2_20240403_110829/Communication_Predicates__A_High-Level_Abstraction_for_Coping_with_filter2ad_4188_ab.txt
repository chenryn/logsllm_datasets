### 优化后的文本

#### 3.1. 通信谓词
在通信封闭的轮次模型中定义了通信谓词。该模型中的算法包括每个轮次 \( r \) 和进程 \( p \in \Pi \) 的发送函数 \( S_r^p \) 和转换函数 \( T_r^p \)。在每一轮 \( r \) 开始时，每个进程向所有其他进程发送消息，并根据收到的消息更新其状态。

**术语说明**：本文中的“传输故障”一词取自文献 [21]，其中考虑了同步系统中的传输故障。

**终止条件**：要求所有进程最终做出决定；稍后将讨论一个较弱的条件。共识算法的一个示例见算法 1。发送函数在第 4-5 行指定。当调用转换函数（第 6-13 行）时，确保 HO 集上的谓词成立。通过算法 1 和表 1 中给出的通信谓词 \( \text{Potr} \)，可以解决共识问题。

**定理 1**：对 \( \langle \text{算法 1, Potr} \rangle \) 解决共识问题。

**证明**：算法 1 不会违反共识的安全属性，即完整性和一致性。对于一致性，如果某个进程在第 \( r \) 轮的第 13 行决定值 \( v \)，那么在任何 \( r' \geq r \) 的轮次中，只能将 \( v \) 分配给 \( x_p \)，因此只能决定 \( v \)。谓词 \( \text{Potr} \) 确保了共识的活性属性（终止）。\( \text{Potr} \) 的第一部分，即存在某个轮次 \( r_0 \)，使得所有进程 \( \Pi \) 的 HO 集等于某个足够大的集合 \( \Pi_0 \)，保证在轮次 \( r_0 \) 结束时，所有进程 \( \Pi \) 采用相同的 \( x_p \) 值。第二部分则强制每个进程 \( p \in \Pi \) 在轮次 \( r_p \) 结束时做出决定。

注意，\( \text{Potr} \) 允许某些轮次没有接收到任何消息。

#### 3.2. 限制范围的通信谓词
第 2.3 节介绍了“传输故障”抽象，涵盖了各种类型的故障。一种实例化是假设传输故障抽象链接故障、发送遗漏故障和接收遗漏故障，但不包括进程崩溃（即进程不会崩溃）。在这种情况下，表达必须对所有进程 \( p \in \Pi \) 成立的谓词 \( \text{Potr} \) 是完全适用的。这种传输故障的解释与要求所有进程做出决定的共识终止条件一致。

现在假设传输故障还包括进程崩溃（无恢复）。如文献 [6] 所述，从 HO 算法的角度来看，这仍然不是问题，因为崩溃的进程不会发送任何消息，因此无法与那些接收所有消息但不发送消息的进程区分开来。然而，如果我们在允许进程表现出各种良性故障的系统中实现 HO 机器，则会出现问题。可以通过将 \( \text{Potr} \) 的范围限制到子集 \( \Pi_0 \) 来解决这个问题，详见表 1 中的 \( \text{P restr}_{otr} \)。

谓词 \( \text{P restr}_{otr} \) 只对 \( \Pi_0 \) 中的进程设置要求，从而仅确保 \( \Pi_0 \) 中的进程终止。如果 \( \Pi_0 \) 中的进程不崩溃，而 \( \Pi \setminus \Pi_0 \) 中的进程崩溃，则 \( \langle \text{算法 1, P restr}_{otr} \rangle \) 允许所有未崩溃的进程做出决定。因此我们有：

**定理 2**：对 \( \langle \text{算法 1, P restr}_{otr} \rangle \) 确保共识的有效性和一致性。此外，所有 \( \Pi_0 \) 中的进程最终都会做出决定。

**证明**：通过将 \( \Pi \) 替换为 \( \Pi_0 \) 来证明定理 1。

#### 3.3. 崩溃恢复模型
带有谓词 \( \text{P restr}_{otr} \) 的算法 1 可以解决崩溃停止（crash-stop）、链接故障、发送遗漏和接收遗漏故障的共识问题。在第 2.1 节中指出了解决崩溃停止模型与崩溃恢复模型中的共识问题之间的差距。使用传输故障抽象和通信谓词后，这一差距消失。

无需任何更改，算法 1 可以用于崩溃恢复模型。恢复处理在较低层完成（参见第 4 节）。

#### 4. 在良好时期内实现谓词 \( \text{P restr}_{otr} \)
我们现在讨论在第 3 节中引入的通信谓词 \( \text{P restr}_{otr} \) 的实现。图 1 显示了算法 HO 层、当前讨论的谓词实现层以及这两层之间由通信谓词定义的接口。该图还显示了谓词的实现依赖于底层系统的假设（这些假设定义了故障和同步假设）。请注意，“传输故障”是一个与上层相关的抽象，在下层中不出现。

在我们的实现模型中，系统交替经历良好时期和不良时期。在良好时期，同步和故障假设成立；在不良时期，系统行为任意（但排除恶意行为）。这里的想法是计算能够实现通信谓词的良好时期的最短持续时间，即允许算法 1 解决共识问题的良好时期的最短持续时间。

#### 4.1. 系统模型
我们的系统模型受 [12] 启发，不同之处将在本节末尾指出。我们考虑一个消息传递系统，并假设存在一个虚拟的全局实时时钟，该时钟以实数值测量时间（参见下页的备注，了解为什么考虑实数值而不是整数值的原因）。时钟仅用于分析，进程无法访问。进程执行一系列原子步骤，这些步骤要么是发送步骤，要么是接收步骤。正如 [12] 中所述，步骤不耗时（原子步骤），但在步骤之间会有时间流逝。网络可以采取一个准备就绪步骤，以区分准备接收的消息和传输中的消息：(i) 每个进程有两个消息集合，称为网络 \( p \) 和缓冲区 \( p \)；(ii) 准备就绪步骤将消息从第一个集合转移到第二个集合。发送步骤、接收步骤和准备就绪步骤被定义为适当地模拟实际系统：

- **发送步骤**：进程 \( p \) 向单个进程或所有其他进程发送消息，并进行一些本地计算。更具体地说，如果 \( p \) 执行 \( \text{send}_p(m) \) 到所有进程，则 \( m \) 被放入所有 \( s \in \Pi \) 的网络 \( s \) 中。
- **准备就绪步骤**：网络将某些消息从网络 \( p \) 转移到缓冲区 \( p \)。更具体地说，如果网络执行 \( \text{make-ready}_p(M) \) 对于某个子集 \( M \subseteq \text{network}_p \)，则所有 \( m \in M \) 从网络 \( p \) 中移除并放入缓冲区 \( p \)。缓冲区 \( p \) 中的消息准备好由进程 \( p \) 接收。
- **接收步骤**：进程 \( p \) 在时间 \( t \) 执行接收步骤时，可以从缓冲区 \( p \) 中接收一条在时间 \( t \) 存在的消息，并进行一些本地计算。因此，需要 \( n \) 个接收步骤来接收 \( n \) 条消息。如果缓冲区 \( p \) 在接收步骤时为空，则接收空消息 \( \lambda \)。进程 \( p \) 可以指定任何策略来选择缓冲区 \( p \) 中的消息进行接收（例如，“先接收具有最大轮次号的消息”）。

我们认为系统交替经历良好时期和不良时期。在不良时期，进程可能崩溃和恢复，并遭受发送和接收遗漏故障；此外，链接可能丢失消息。我们区分三种类型的良好时期，从最强到最弱。所有这些定义都涉及 \( \Pi \) 的一个子集 \( \pi_0 \)。在这三种定义中，良好时期内 \( \pi_0 \) 中的进程满足以下性质 \( \pi_0\text{-sync} \)：

- **\(\pi_0\text{-sync}\)**：子系统 \( \pi_0 \) 是同步的，即进程速度有一个已知的上下界，且 \( \pi_0 \) 中进程间的通信延迟有一个已知的上界。形式上：
  - 设 \( I \) 是一个连续的时间区间，\( R \) 是一次运行。如果存在 \( \Phi^+, \Phi^-, \Delta \in \mathbb{R} \) 使得：
    - 在 \( I \) 的任何长度为 \( \Phi^+ \) 的连续子区间中，\( \pi_0 \) 中的每个进程至少执行一步。
    - 在 \( I \) 的任何长度为 \( \Phi^- \) 的开连续子区间中，\( \pi_0 \) 中的每个进程最多执行一步。
    - 考虑两个进程 \( p, q \in \pi_0 \)。如果进程 \( p \) 在时间 \( t \in I \) 执行 \( \text{send}_p(m) \)，则 \( m \) 在时间 \( t + \Delta \) 时出现在 \( q \) 的缓冲区中，前提是 \( t + \Delta \in I \)。
  
  良好时期的长度为 \( |I| \)。如果 \( I \) 从时间 0 开始，我们称 \( I \) 为初始良好时期。记 \( \Pi \setminus \pi_0 \) 为 \( \pi_0 \)。

  我们现在定义三种类型的良好时期：
  1. **\(\Pi\)-良好时期**：性质 \( \pi_0\text{-sync} \) 对 \( \pi_0 = \Pi \) 成立。所有进程都在运行，这些进程在良好时期内不会崩溃。
  2. **“\(\pi_0\)-down”良好时期**：性质 \( \pi_0\text{-sync} \) 对 \( \pi_0 \subseteq \Pi \) 成立。\( \pi_0 \) 中的进程不会崩溃。\( \pi_0 \) 中的进程处于关闭状态且不会恢复（在良好时期内）。此外，在良好时期内，\( \pi_0 \) 中的进程没有任何在传输中的消息。
  3. **“\(\pi_0\)-任意”良好时期**：性质 \( \pi_0\text{-sync} \) 对 \( \pi_0 \subseteq \Pi \) 成立。对 \( \pi_0 \) 中的进程和到 \( \pi_0 \) 中进程的链接没有限制（在良好时期内，\( \pi_0 \) 中的进程可以崩溃、恢复、异步；到 \( \pi_0 \) 中进程的链接可以丢失消息、异步）。

  情况 2 包含情况 1，情况 1 导致与情况 2 相同的实现。因此，我们只区分情况 2 和情况 3。为了简单起见，我们将所有值 \( \Phi^+, \Phi^-, \Delta, t \) 乘以 \( 1/\Phi^- \)，并使用 \( \phi = \Phi^+ / \Phi^- \) 作为归一化的进程速度上限，\( \delta = \Delta / \Phi^- \) 作为归一化的传输延迟，以及 \( \tau = t / \Phi^- \) 作为归一化时间。请注意，\( \phi \) 和 \( \delta \) 是“已知”的值，并且这些值是无单位的。

**备注**：为了建模，我们选择了实数时钟来表示时间。考虑情况 3，假设使用整数时钟值。根据 \( \Phi^+ \) 的定义，\( \pi_0 \) 中最慢的进程在任何长度为 \( \Phi^+ \) 的区间内至少执行一步。然而，使用整数时钟值时，无论 \( \Phi^- \) 选择多小，任何进程在长度为 \( \Phi^+ \) 的区间内最多只能执行 \( \Phi^+ \) 步。因此，在情况 3 中，\( \pi_0 \) 中的进程不能相对于 \( \pi_0 \) 中的进程无限快。换句话说，使用整数时钟值时，\( \pi_0 \) 中的进程与 \( \pi_0 \) 中的进程之间存在某种同步关系，这是我们希望在情况 3 中排除的。

**与 DLS [12] 的系统模型的不同之处**：
- [12] 中的时钟取整数值。我们已经解释了为何考虑实数时钟的原因。
- [12] 中的发送步骤只允许进程向单一目的地发送消息。我们的发送原语允许广播消息，例如 UDP 多播提供的功能。
- [12] 中的接收步骤允许进程接收多条消息。我们的接收原语只允许从单个进程接收一条消息，这反映了 UDP 的特性。逐条接收消息导致我们引入了准备就绪步骤。
- [12] 考虑了两种同步假设：(i) 同步界限已知但仅最终成立；(ii) 同步界限未知但从一开始就成立。我们考虑了选项 (i)，这是为了计算良好时期的最小长度（在实现通信谓词的背景下）。在选项 (i) 的背景下，[12] 假设良好时期最终永远成立且同步假设在整个系统中成立。我们考虑系统在良好时期和不良时期之间交替，并且同步假设仅在子集 \( \pi_0 \) 上成立。我们还假设了更一般的崩溃恢复模型，而 [12] 考虑了崩溃停止模型。另一方面，与我们的故障模型不同，[12] 还考虑了拜占庭故障。

#### 4.2. 实现 \( \text{P restr}_{otr} \)
我们现在给出在 \( \pi_0\)-down 和 \( \pi_0\)-任意良好时期实现谓词 \( \text{P restr}_{otr} \) 的算法。结果表明，这两种良好时期的定义自然地导致实现比 \( \text{P restr}_{otr} \) 更强的谓词。我们定义：

- **\(\text{Psu}(\Pi_0, r_1, r_2)\)**：对于所有 \( p \in \Pi_0 \) 和 \( r \in [r_1, r_2] \)，\( \text{HO}(p, r) = \Pi_0 \)。
- **\(\text{Pk}(\Pi_0, r_1, r_2)\)**：对于所有 \( p \in \Pi_0 \) 和 \( r \in [r_1, r_2] \)，\( \text{HO}(p, r) \supseteq \Pi_0 \)。
- **\(\text{P}^2_{otr}(\Pi_0)\)**：存在 \( r_0 > 0 \)，使得 \( \text{Psu}(\Pi_0, r_0, r_0) \) 成立。
- **\(\text{P}^{1/1}_{otr}(\Pi_0)\)**