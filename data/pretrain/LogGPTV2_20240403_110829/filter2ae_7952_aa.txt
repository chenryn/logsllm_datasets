# XSS Game
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
过年期间玩了一下国外的一个 XSS GAME，收获颇丰，记录一下学习过程。本人对于 JavaScript
以及前端的理解不深，水平也不高，如果文章有疏漏之处，还请师傅们斧正。
## Introduction
所有题目的目标都是实现alert(1337)即可，有着不同的难度
## Area 51
        var input = (new URL(location).searchParams.get('debug') || '').replace(/[\!\-\/\#\&\;\%]/g, '_');
        var template = document.createElement('template');
        template.innerHTML = input;
        pwnme.innerHTML = " DEBUG: " + template.outerHTML + "  -->";
题目源代码如上，题目代码比较简单，首先对用户传入的 debug 参数进行关键字过滤转换，对于!-/#&;%符号都会被下划线替代，然后创建一个
template 标签，标签的 HTML 内容为我们传入的内容，最后在一个 div 中，把构建好的 template 标签输出在一个注释当中。
所以我们的主要得绕过注释符的限制，由于中的>进行转义。所以基本上我们可以“直接“闭合的思路是行不通的。
首先我们需要知道 HTML 解析顺序，首先先解析 HTML 部分代码，再用 JS 解释器 JS 代码，JS解释器会边解释边执行，对于 innerHTML
会使用 HTML parser 解析其中的代码。本题会利用到一些 HTML parser 的知识，建议配合 W3 文档 [The HTML
syntax](https://www.w3.org/TR/html52/syntax.html)，不想看英文的话也可以凑合凑合看看本菜之前写的 关于
HTML 编码 的水文。
## Easy Version
我们先来看看第一个简单的版本，当时由于出题者比较疏忽，并没有过滤&#;，导致了我们可以用 HTML 实体编码进行绕过，直接闭合注释进而实现 alert
，例如，在没有过滤&#;的情况，我们可以这么做：
    1
使用 HTML 编码将我们的 payload 进行编码绕过
    -->
但是这里我们并不能直接传入 HTML 编码绕过，得需要加一个 img 标签利用其属性进行绕过，为什么呢？
因为这里其实有两次 HTML
解码的操作，第一个是template.innerHTML，第二个是pwnme.innerHTML，第一个解码操作会直接把我们传入的参数进行解码，并且对其中的<>进行转义，也就是说，实际上第一个得到的是如下内容：
    --&gt;&lt;svg/onload=alert()&gt;
在第二步渲染的时候就自然不可能闭合注释了，只能得到如下代码：
     DEBUG: --&gt;&lt;svg/onload=alert()&gt;  -->
所以当我们借助 img 属性进行绕过的时候，第一步得到的实际上是：
    ">1
HTML parser不会将 title 属性内的字符串进行转义，所以第二步当直接输出到页面的时候
     DEBUG: "&gt;1  --&gt;
然后当 HTML parser 解析这段代码时，首先由 DEBUG: 让 HTML parser 进入到了[Comment End
State](https://www.w3.org/TR/html52/syntax.html%23comment-end-state)，根据 W3 文档：
8.2.4.51. Comment end state
Consume the [next input
character](https://www.w3.org/TR/html52/syntax.html%23next-input-character):
  * U+003E GREATER-THAN SIGN (>)
  * Switch to the [data state](https://www.w3.org/TR/html52/syntax.html%23tokenizer-data-state). Emit the comment token.
接着我们就进入到了 [data state](https://www.w3.org/TR/html52/syntax.html%23tokenizer-data-state)，也就是结束了注释解析状态回到了最开始的 HTML 解析状态，这样就导致我们就成功逃逸了注释符。
## Difficult Version
再过滤了实体编码&#;之后我们要怎么绕过呢？我们先给出一个 Trick ，在这里我们可以使用，存在–>可以将注释闭合。可是这是为什么呢？
在template.innerHTML = input的时候，会解析input，然后使用 HTML parser 解析，根据 W3 文档
Implementations must act as if they used the following state machine to
tokenize HTML. The state machine must start in the [data
state](https://www.w3.org/TR/html52/syntax.html%23tokenizer-data-state).
解析到)
  * Switch to the [data state](https://www.w3.org/TR/html52/syntax.html%23tokenizer-data-state). Emit the comment token.
  * EOF
  * Emit the comment. Emit an end-of-file token.
  * U+0000 NULL
  * Append a U+FFFD REPLACEMENT CHARACTER character to the comment token’s data.
  * Anything else
  * Append the [current input character](https://www.w3.org/TR/html52/syntax.html%23current-input-character) to the comment token’s data.
下一个字符是 anything else，会将这个字符插入到刚刚的 comment
中，也就是我们上图看到的，例如输入是aaaccc的时候，解析到第 i 个字符时，innerHTML 的结果是这样的：
    a
    aa
    aaa
    aaa
    aaa
    aaa
    aaa
    aaa
    aaac
    aaacc
    aaaccc
直到该状态遇到了>为止，回到 data state。注意这个 Bogus comment state 解析到>的时候会直接回到 data state，也就是
HTML parser 最开始解析的状态，这个时候我们就可以插入 HTML 代码了。
当我们传入时，第一步template.innerHTML我们得到的是
第二步pwnme.innerHTML我们得到的是
     DEBUG:   --&gt;
这时候 HTML parser 解析与我们在 Easy Version 分析差不多，只有遇到–>的时候结束 Comment State 相关状态回到
data state，所以我们就成功执行了 XSS。
## Keanu
    Solved it?
        /* Input */
        var number = (new URL(location).searchParams.get('number') || "7")[0],
            name = DOMPurify.sanitize(new URL(location).searchParams.get('name'), { SAFE_FOR_JQUERY: true });
        $('number#number').html(number);
        $('#welcome').html(`Welcome ${name || "Mr. Wick"}!`);
        /* Greet */
        $('#keanu').popover('show')
        setTimeout(_ => {
            $('#keanu').popover('hide')
        }, 2000)
        /* Check Magic Number */
        var magicNumber = Math.floor(Math.random() * 10);
        var number = eval($('number#number').html());
        if (magicNumber === number) {
            alert("You're Breathtaking!")
        }