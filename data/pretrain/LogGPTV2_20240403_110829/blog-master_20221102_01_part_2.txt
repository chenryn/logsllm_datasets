:warning: **注意**：walminer_contents是walminer自动生成的unlogged表(之前是临时表，由于临时表在清理上有问题，引起工具使用不便，所以改为unlogged表)，在一次解析开始会首先创建或truncate walminer_contents表。  
#### 7. 结束walminer操作  
该函数作用为释放内存，结束日志分析，该函数没有参数。  
```sql  
select walminer_stop();  
```  
### 场景二：从非WAL产生的数据库中执行WAL日志解析  
:warning: 要求执行解析的PostgreSQL数据库和被解析的为同一版本  
#### 于生产数据库  
##### 1.创建walminer的extension  
```sql  
create extension walminer;  
```  
##### 2.生成数据字典  
```sql  
select walminer_build_dictionary('/opt/proc/store_dictionary');  
-- 注：参数可以为目录或者文件  
```  
#### 于测试数据库  
##### 1. 创建5walminer的extension  
```sql  
create extension walminer;  
```  
##### 2. load数据字典  
```sql  
select walminer_load_dictionary('/opt/test/store_dictionary');  
-- 注：参数可以为目录或者文件  
```  
##### 3. add wal日志文件  
```sql  
-- 增加wal文件：  
select walminer_wal_add('/opt/test/wal');  
-- 注：参数可以为目录或者文件  
```  
##### 4. remove wal日志文件  
```sql  
-- 移除wal文件：  
select walminer_wal_remove('/opt/test/wal');  
-- 注：参数可以为目录或者文件  
```  
##### 5. list wal日志文件	  
```sql  
-- 列出wal文件：  
select walminer_wal_list();  
-- 注：参数可以为目录或者文件  
```  
##### 6. 执行解析  
同上	  
##### 7. 解析结果查看  
```sql  
select * from walminer_contents;  
```  
##### 8.结束walminer操作,该函数作用为释放内存，结束日志分析，该函数没有参数。  
```sql  
select walminer_stop();  
```  
:warning: **注意**：walminer_contents是walminer自动生成的unlogged表(之前是临时表，由于临时表在清理上有问题，引起工具使用不便，所以改为unlogged表)，在一次解析开始会首先创建或truncate walminer_contents表。  
### 场景三：自apply解析（开发中的功能,慎用）  
场景一和场景二中的解析结果是放到结果表中的，场景三可以将解析结果直接apply到解析数据库中。命令执行的流程与场景一和场景二相同。  
```sql   
-- 参数意义参考walminer_by_lsn()接口  
select walminer_apply(startlsn, endlsn,'true', reloid);  
```  
#### 此功能可以处理主备切换延迟数据  
当主库A发生故障，从库B切换为主库之后。  
1. B库将A库未通过流复制apply的wal日志拷贝到B库可以获取的路径（这一步目前需要DBA自行处理，尚未纳入本功能）  
2. 在B库加载wal日志，执行walminer_apply()解析，其中：  
   startlsn选取未能apply到B库的lsn的开始值  
   endlsn参数写NULL  
   'true'这里最好填写‘true’，就不要写‘false’了  
   reloid是可选参数  
3. walminer_apply()完成后,可以看到延迟的数据已经写到B库了  
#### 自apply解析功能说明  
   1. 目前处于coding中，后续会添加严格的txid限制，避免错误修改数据，现在是尝鲜测试版  
   2. 对于有冲突的项目，会把冲突sql存放到`$PGDATA/pg_walminer/wm_analyselog/apply_failure`文件中，供DBA自行判断处理  
   3. 保持事务性，同一个事务中的一条SQLapply失败后，整个事务都会apply失败  
   4. 看大家需求，后续可能考虑增加远程apply功能  
### 场景四：DDL解析  
**系统表变化解析**  
目前walminer支持解析系统表的变化。也就是说如果在PG执行了DDL语句，walminer可以分析出DDL语句引起的系统表的变化。  
```sql  
-- 在执行解析之前，先执行如下语句，即可开启系统表解析功能  
select wal2sql_with_catalog();  
```  
**DDL解析**  
```sql  
-- 在执行解析之前，先执行如下语句，即可开启DDL解析功能  
select wal2sql_with_ddl();  
```  
:warning:`系统表变化解析`和`DDL解析`不共存，总是接受最新确定的状态。  
:warning:walminer对DML数据的解析是要求没有系统表变化的，因此存在DDL变化时，可能导致DML解析不出来的情况。  
### 使用限制  
1. 本版本解析DML语句。DDL语句解析功能正在不断开发。  
3. 只能解析与数据字典时间线一致的wal文件  
4. 当前walminer无法处理数据字典不一致问题，walminer始终以给定的数据字典为准，  
   对于无法处理的relfilenode，那么会丢弃这一条wal记录(会有一个notice在解析结果中没有体现)  
5. complete属性只有在wallevel大于minimal时有效  
6. xid解析模式不支持子事务  
7. 同时只能有一个walminer解析进程，否则会出现解析混乱  
## 使用方法-数据页挽回(坏块修复)  
#### 1. 环境搭建  
创建extension，创建数据地点，加载wal日志的方法与[SQL解析]中描述的方法一致。  
#### 2. 执行数据挽回  
```sql  
select page_collect(relfilenode, reloid, pages)  
```  
relfilenode：需要解析的wal日志中的relfilenode  
reloid：解析库中存在的表的OID，此命令将会将从wal中找到的page覆盖到reloid制定的表中  
pages：是字符串类型，制定想要挽回的目标page。格式为'0,1,2,7'或者'all'。  
具体使用方法可以从pc_base.sql测试用例文件中获取。  
**此功能持续开发中，后续会添加基于基础备份的数据页挽回**  
### 使用限制  
1.将部分page恢复到其他表后，查询时可能会出现报错的情况。这是因为恢复后的page可能依赖其他page数据，而其依赖的page没有恢复到这个表中。  
2.执行此命令后请立即备份，因为此命令对数据的操作不会记录在wal中。  
## 联系我  
发现bug或者有好的建议可以通过邮箱（PI:EMAIL）联系我。  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")