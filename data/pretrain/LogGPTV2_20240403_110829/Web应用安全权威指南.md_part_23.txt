        ```
        问题出在 example.jp 后面的 / 没有得到检验。检验 Referer
        时，必须要使用前方一致检索检验绝对 URL，包括域名后的 /。
        另一方面，检验 Referer
        方法所需的代码量是最少的。因为其他两种方法都需要在 2
        个页面中追加处理，而检验 Referer
        方法只需要在执行关键处理的页面上追加处理即可。
        综上所述，通过检验 Referer 来防范 CSRF
        漏洞的方法，其适用范围应该被限定在对公司的内部系统等能够限定用户环境的既有应用实施安全隐患对策的情况。
    -   **CSRF 防范策略的比较**
        这里，我们对以上讲述的三种 CSRF 防范策略加以比较归纳，如表 4-12
        所示。
        **表 4-12 CSRF 防范策略的比较**
          ------------------ -------------------------------------- ---------------------------------------- ------------------------------------------------
                             嵌入令牌                               再次输入密码                             确认 Referer
          开发耗时           中                                     中 ^\*1^                                 小
          对用户的影响       无                                     增加了输入密码的麻烦                     关闭了 Referer 的用户无法 正常使用
          能否用于手机网站   可                                     可                                       不可
          建议使用的地方     最基本的防御策略，所有情况下均可使用   需要防范他人伪装或者确认需求很强的页面   用于能够限定用户环境的既有应用的 CSRF 防范策略
          ------------------ -------------------------------------- ---------------------------------------- ------------------------------------------------
        ^\*1\ 如果作为既有系统的\ CSRF\ 防范策略而从后期添加的话，因为需要修改页面，所以可能会非常耗时。^
-   **CSRF 的辅助性对策**
    执行完关键处理后，建议向用户注册的邮箱发送有关处理内容的通知邮件。
    发送通知邮件虽然不能防范 CSRF 攻击，但是在万一遭受了 CSRF
    攻击的情况下能在第一时间让用户知情，从而将损害降到最低。
    另外，除了 CSRF 攻击之外，在攻击者通过 XSS
    攻击伪装成用户操作关键处理时，发送通知邮件也能够使用户尽早发现，可谓大有裨益。
    但是，由于邮件是未经加密的明文传输，因此，最好不要在邮件中添加重要信息，而只是通知用户有人恶意执行了关键处理。而如果用户想要了解详情的话，可以登录
    Web 应用查看购买历史或发送历史等内容。
-   **对策总结**
    CSRF 漏洞的根本性防范策略如下。
    -   筛选出需要防范 CSRF 的页面
    -   确认是正规用户自愿发起的请求
    其中，确认请求确实由用户自愿发起的方法有以下三种。三种方法的比较请参考表
    4-12。
    -   嵌入机密信息（令牌）
    -   再次输入密码
    -   检验 Referer
    另外，作为 CSRF 漏洞的辅助性对策，可以执行以下操作。
    -   执行完关键处理后，向用户注册的邮箱发送通知邮件
[29]{.注释编号下} "添加到购物车"页面也需要防范
CSRF。不过，即使被第三方随意添加了购入商品，用户在付款前也应该能够察觉到。因此，如果作为一种营销模式而允许外界添加商品的话，就可以选择不对该页面执行
CSRF 防范策略。
[30]{.注释编号下} HTTP/1.1 的规格文档 RFC2616
中记载了含有更新处理的页面不应使用 GET 方法（9.1.1
节），由此可见，需要防范 CSRF 的页面本来就不应该使用 GET，而应当使用
POST 方法。
[31]{.注释编号下}
注销处理对安全性的影响度较低，所以很多情况下会容许存在隐患。而且，就算针对注销处理采取
CSRF 防范策略，注销前让用户再次输入密码也会让人感觉极不自然。
## **4.6 不完善的会话管理** {#text00000.html#nav_point_29}
Web
应用中经常使用会话管理机制来记忆认证结果等当前状态。当今主流的会话管理机制为，使用
Cookie 等记忆会话 ID 这个标识符，而此会话 ID
的作用就相当于获取服务器端信息的钥匙。
接下来，本节就将讲述会话管理机制以及使用方法不妥善而产生的安全隐患。
### **4.6.1 会话劫持的原因及影响** {#text00000.html#nav_point_30}
如果由于某些原因，某用户的会话 ID
被第三方得知的话，就会出现他人伪装成该用户访问应用的危险。第三方恶意利用会话
ID 来伪装成他人的攻击手段就被称为会话劫持。
第三方获取会话 ID 的手段有如下 3 类。
> -   预测会话 ID
>
> -   窃取会话 ID
>
> -   挟持会话 ID
下面我们就来分别看一下以上 3 种手段的概况。
-   **预测会话 ID**
    如果生成会话 ID 的方法不妥善，用户的会话 ID
    就可能会被第三方预测成功，进而造成会话劫持。第 3
    章中所介绍的连续数值就是一种不妥善的会话
    ID，除此之外，基于日期时间或用户名生成的会话 ID
    也不安全。开源软件等生成会话 ID
    的逻辑对外公开的情况下，外界就能根据代码中的逻辑推测出会话
    ID，而源代码或逻辑不公开的情况下外界也有可能稍费时日从而破解出会话
    ID 的生成方法。
-   **窃取会话 ID**
    如果会话 ID 被外界窃取，就有可能造成会话劫持。窃取会话 ID
    的方法有如下几种。
    -   生成 Cookie 时的属性设置不妥善而遭泄漏（参考第 3 章）
    -   会话 ID 在网络上被监听（参考 7.3 节）
    -   由于跨站脚本等应用中的安全隐患而遭泄漏（后述）
    -   由于 PHP 或浏览器等平台的安全隐患而遭泄漏
    -   会话 ID 保存在 URL 中时经由 Referer 消息头泄漏（参考 4.6.3 节）
    应用中能被用于窃取会话 ID 的代表性安全隐患有以下几种。
    -   跨站脚本（XSS）（参考 4.3.1 节）
    -   HTTP 消息头注入（参考 4.7.2 节）
    -   嵌入在 URL 中的会话 ID（参考 4.6.3 节）
    关于各隐患的详情请参考各个章节。
-   **挟持会话 ID**
    除了窃取会话 ID 这种方式外，如果能将会话 ID
    强制设置到用户的浏览器中，攻击者也就相当于"得知"了用户的会话
    ID，因此也就能够形成会话劫持。这种攻击被称为"会话固定攻击"（Session
    Fixation Attack）。会话固定攻击在第 3
    章已经做过概述，其防范策略等详情将于 4.6.4 节讲述。
-   **会话劫持的方法总结**
    接下来，我们将以上介绍的会话劫持的方法加以归纳，如下表所示。
    **表 4-13 会话劫持总结**
      ------------- ---------- ------------------ ------------------------------ ----------
      分类          攻击对象   攻击方法           安全隐患                       解说
      预测会话 ID   应用程序   预测会话 ID        自制会话管理机制中的安全隐患   4.6.2 节
                    中间件     推测会话 ID        中间件的安全隐患               7.1 节
      窃取会话 ID   应用程序   XSS                XSS 漏洞                       4.4.1 节
                               HTTP 消息头注入    HTTP 消息头注入漏洞            4.7.2 节
                               恶意利用 Referer   嵌入在 URL 中的会话 ID         4.6.3 节
                    中间件     同应用程序         中间件的安全隐患               7.1 节
                    网络       网络监听           Cookie 的安全属性不完善等      4.8.2 节
      挟持会话 ID   应用程序   会话固定攻击       会话 ID 固定漏洞               4.6.4 节
      ------------- ---------- ------------------ ------------------------------ ----------
    由上表可知，造成会话劫持的安全隐患多种多样，因此，应对会话劫持就需要将这些安全隐患各个击破。而本节所要讲述的就是生成会话
    ID 时产生的如下安全隐患。
    -   会话 ID 可预测
    -   会话 ID 嵌入 URL
    -   固定会话 ID
    其他安全隐患请参考表中"解说"所示页的内容。
-   **会话劫持的影响**
    用户被会话劫持后，他人就能伪装成该用户，进而造成如下影响。
    -   查看用户的重要信息（个人信息、邮件等）
    -   利用用户的权限进行操作（转账、购物等）
    -   使用用户的账号发送邮件、发布文章、更改设置等
### **4.6.2 会话 ID 可预测** {#text00000.html#nav_point_31}
#### **概要**
如果 Web 应用中会话 ID 的生成规则不完善，用户的会话 ID
就有可能被他人成功预测，从而造成会话劫持。
会话 ID 被他人预测成功所造成的影响，同前面讲述的会话劫持的影响一样。
为了避免生成可预测的会话 ID
而引入安全隐患，应当停止自己实现会话管理机制，而使用久经考验的编程语言或中间件（PHP、Java/J2EE、ASP.NET
等）提供的会话管理机制。
**会话 ID 可预测漏洞总览**
![{%}](Image00093.jpg)
#### **攻击手段与影响**
首先我们来看一下针对会话 ID 可预测漏洞的典型的攻击模式及其影响。
针对会话 ID 可预测漏洞的攻击有以下三个步骤。
> 1\. 收集对象应用的会话 ID
>
> 2\. 推测会话 ID 的生成规则
>
> 3\. 在对象应用中试验推测出的会话 ID
-   **常见的会话 ID 生成方法**
    为了预测会话 ID 的生成规则，首先就需要对常见的会话 ID
    生成规则有所了解。由于本书并非攻击指导书，因此不会详细说明推测会话
    ID 的方法。但就笔者多年来诊断安全隐患的经验来说，会话 ID
    的生成大多都是基于以下项目。
    -   用户 ID 或邮箱地址
    -   远程 IP 地址
    -   日期与时间（UNIX 时间戳或年月日时分秒的字符串）
    -   随机数
    生成会话 ID
    时，有时会原封不动地使用上述值，有时也会选取几种组合使用，然后再进行加密（十六进制或
    Base64）或者散列函数处理。图 4-51 即展示了常见的会话 ID 的生成方法。
    ![{%}](Image00094.jpg)
    **图 4-51 常见的会话 ID 生成方法**
    其中，用户 ID
    和日期时间是外界能够得知的数据，而这也就是造成安全隐患的根源。
    针对会话 ID 可预测漏洞展开攻击时，攻击者会基于已知信息推导会话 ID
    的生成规则，将收集到的会话 ID 按照图 4-51 的模型逐个进行验证。
-   **使用推测出的会话 ID 尝试伪装**
    攻击者推测出会话 ID
    之后，就会在对象应用中试用。如果攻击取得成功，会话就会处于有效的状态，因此攻击者能立刻得到攻击是否成功的反馈。
-   **伪装造成的影响**
    攻击者成功伪装成用户后，就能够以用户的权限使用对象应用中的所有功能，如查看重要信息、发布
    / 更新 / 删除数据或文章、购物、转账等。
    但是，那些浏览前需要再次输入密码的页面，即使伪装成功后也无法访问。因为会话劫持的攻击者并不知道用户的密码。因此，关键处理前要求用户再次输入密码（再认证），是防范会话劫持的辅助性对策。
    另一方面，如果更改密码时不需要输入当前密码，攻击者就能够通过更改密码而掌握用户的密码，这时攻击将造成更大的危害。
#### **安全隐患的产生原因**
正如前面所说，产生会话 ID 可预测漏洞的技术性原因，主要在于会话 ID
是基于可预测的信息生成的。而更深层的原因，则可以说是源于在应用中自制会话管理机制。通常情况下，在
Web 应用开发中，特意去开发生成会话 ID 的程序毫无意义。原因如下。
-   主流的 Web 应用开发工具中提供有会话管理机制
-   开发能够生成安全的会话 ID 的程序有很高的技术要求
而且，即使主流的 Web 应用开发工具中生成会话 ID
的部分存在漏洞，也肯定会有安全性方面的专家指出而使其得到完善。因此，如果是普通用途的
Web 应用，都应当使用开发工具中提供的会话管理机制。
#### **对策**
防范会话 ID 可预测漏洞最现实以及最有效的对策，就是使用 Web
应用开发工具中提供的会话管理机制。