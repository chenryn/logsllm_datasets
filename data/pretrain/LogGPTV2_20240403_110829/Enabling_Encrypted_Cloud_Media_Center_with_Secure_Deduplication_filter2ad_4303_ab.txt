In this section, we present our secure deduplication frame-
work that can protect users’ videos in the bounded leak-
age setting, and defend oﬀ-line brute-force attacks over pre-
dictable videos, respectively. We start with describing our
design intuition to address the threats mentioned in Sec-
tion 2.2, and then elaborate on the detailed construction.
We note that the framework is suitable for generic data,
e.g., textual ﬁles and images.
4.1 Design Intuition
Our system targets secure client-side deduplication over
encrypted videos. First, we consider secure client-side dedu-
plication in a strong security model, i.e., the bounded leak-
age setting ﬁrst proposed by Xu et al. in [25], where a cer-
tain amount of deterministically and eﬃciently extractable
information of the plaintext data could be leaked. Under this
setting, CE is not appropriate for use in our system since its
data encryption key is not leakage resilient. Speciﬁcally, the
private key in CE is derived from the data plaintext in a
deterministic way and could be leaked before the encryption
process. For similar reasons, using the plaintext hash as a
proxy for the ownership of data can also be insecure under
the leakage setting.
To address the threat posed by the bounded leakage set-
ting, the following treatment inspired by [25] could be adopted.
Firstly, deduplication is achieved by using the hash value
H(V ) of the video V for duplicate check. Secondly, the
video encryption key τ is selected randomly by the initial
uploader, who also creates a one-time message-derived mask
via a keyed hash function, i.e., Fs(·), to hide it, where s is a
random string. Note that because τ is randomly generated,
even the hash value of V is possibly leaked, the video is still
protected as long as τ is hidden from cloud. Moreover, this
type of masking can enable all the subsequent users who
own the same video copies to obtain the random key τ and
further prove to cloud that they indeed own the videos, by
running a proofs-of-ownership (PoW) protocol with cloud.
Although the above treatment is resistant to the bounded
leakage setting, it is not directly suitable for use in our sys-
tem to provide strong protection for video conﬁdentiality.
In particular, the above treatment is vulnerable to oﬀ-line
brute-force attacks over predictable videos. This vulnerabil-
ity originates from the fact that the hash value is directly
exposed to cloud for duplicate check and the random encryp-
tion key τ is only protected by V , which will be analyzed in
detail shortly. In order to get rid of this vulnerability while
still maintaining the security strength of the above treat-
ment in the bounded leakage setting, we resort to an agency
for assistance in our system, inspired by [2]. Speciﬁcally,
we leverage the agency to securely produce message-derived
tag α and label β via a RSA-OPRF protocol similar to [2].
The message-derived tag α is used for secure duplicate check
and prevents cloud from directly accessing the video hash,
while the message-derived label β is embedded in the mask
during the initial upload and assists the recovery of the ran-
65dom key τ during the subsequent upload. We note that
through this careful enhancement design, our system can
also eﬀectively prevent cloud from mounting oﬀ-line brute-
force attacks over predictable videos and thus provide strong
protection for video conﬁdentiality, which will be analyzed
in detail in Section 6.
4.2 Secure Deduplication Framework
We are now ready to present the detailed construction
of the proposed secure deduplication framework. The work
ﬂow is illustrated in Figure 2. As shown, before uploading
a video V , the user ﬁrst needs to engage in the RSA-OPRF
protocol with the agency to derive the message-derived tag
α and label β of V , i.e., α = OPRFRSA
(H(V )) and β =
OPRFRSA
(H(V )), where k1 and k2 are two diﬀerent secret
keys of the agency for signing (we refer readers to Appendix
for the details of the RSA-OPRF protocol). Then α is sub-
mitted to cloud for duplicate check. If it does not exist at
the cloud side, the user is considered as the initial uploader
of V ; otherwise, the user is considered as the subsequent
uploader.
k1
k2
Suppose user u is the initial one who uploads the video V
after duplicate check. User u ﬁrst encrypts V with a ran-
dom key τ and produces the video ciphertext CV . Then u
generates a masked key r via using a keyed hash function
F (s, V (cid:107) β) to protect τ , where s is a random string, which
will enable all subsequent users who indeed owns V to re-
cover τ for correct decryption. Besides, τ is encrypted under
u’s private key sk to produce the ciphertext Cτ . Finally, u
sends {CV , s, r, Cτ} to cloud, and H(CV ) is computed by
cloud for the later use of PoW protocol. Suppose u(cid:48) is a
subsequent user who tries to upload V after the duplicate
check. User u(cid:48) has to run a PoW protocol with cloud to
prove that she indeed owns V . Speciﬁcally, u(cid:48) will request
(r, s) from cloud, and utilizes V and β to recover the correct
encryption key τ . Then u(cid:48) encrypts V with τ to produce
the ciphertext CV and also computes H(CV ). After that,
H(CV ) is sent to cloud for equality checking. After veriﬁ-
cation, u(cid:48) is admitted as the owner of CV . Finally, u(cid:48) uses
her private key sk(cid:48) to encrypt the recovered τ and stores
it at the cloud side. During the retrieval process, the user
ﬁrst downloads CV and Cτ from cloud, and then uses its
private key sk to decipher Cτ and further decrypt CV with
the recovered τ .
Diﬀerences compared with prior works.
In the pro-
posed deduplication framework, the message-derived tag α is
used for duplicate check, and the random key τ is protected
by a mask derived from the video V and the message-derived
label β. Note that in [25], the hash value of data is directly
exposed to cloud for duplicate check and the random key
is only protected by the data. Therefore, if this approach
is adopted for secure client-side deduplication, cloud can
launch oﬀ-line brute-force attacks over predictable videos.
Given the ciphertext CV and knowing that its underlying
video V is drawn from a dictionary DV = {V1, V2, . . . , Vn},
cloud can launch the following two types of oﬀ-line brute-
force attacks to recover V .
In the ﬁrst attack, cloud can
simply compare the received (stored) hash H(V ) with the
computed hash of each Vi (i ∈ [1, n]) in DV , and then re-
cover the target video V when two hashes are found equal.
In the second attack, cloud may ﬁrst use each Vi in DV to
decrypt the masked random key and get a key candidate set
µset = {µ1, µ2, . . . , µn}. Then for each i ∈ [1, n], cloud can
Initial upload
Cloud
α
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65)
2. Check
if α exists
No Duplicate
(cid:68)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)
User(u)
1. α = OPRFRSA
k1
(H(V )),
β = OPRFRSA
k2
(H(V ))
3. τ ← KGen(1λ) ∈ {0, 1}λ
4. CV ← Encτ (V )
5. s
6. r = hs(V (cid:107) β) ⊕ τ
7. Cτ = Encsk(τ )
$← {0, 1}λ
(CV , s, r, Cτ )
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65) 8. Compute
H(CV )
Subsequent upload
/*Running PoW*/
User(u(cid:48))
1. α = OPRFRSA
k1
(H(V )),
β = OPRFRSA
k2
(H(V ))
3. τ ← hs(V (cid:107) β) ⊕ r
4. CV ← Encτ (V )
5. Compute H(CV )
If T RU E,
7. C(cid:48)
τ = Encsk(cid:48) (τ )
Cloud
2. Check
if α exists
α
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65)
Duplicate
(cid:68)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)
(s, r)
H(CV )
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65) 6. Verify
H(CV )
T RU E/
(cid:68)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)
F ALSE
C(cid:48)
τ
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65)
Retrieval
User(u)
Cloud
Download Req.
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65)
(CV , Cτ )
(cid:68)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)
1. τ = Decsk(Cτ )
2. V = Decτ (CV )
Figure 2: Overview of the system work ﬂow. Here
E = (KGen, Enc, Dec) is a deterministic symmetric en-
cryption scheme with λ bits long key length and
hK : {0, 1}∗ → {0, 1}λ is a key-ed hash function. Note
that it is omitted that a user runs KGen to derive the
private key sk at the system setup.
use µi to decrypt the target video ciphertext CV and com-
pare the decryption result with Vi in the dictionary DV to
ﬁnd the matched target video.
66To securely use server-side deduplication and defend oﬀ-
line brute-force attacks over predictable data, Bellare et
al. [2] propose an improved design based on CE. They resort
to a semi-trusted party named key server for obliviously em-
bedding a secret in the data hash used for encryption and
do not consider any data leakage setting. Thus, if directly
applied for secure deduplication in the bounded leakage set-
ting, the data encryption key could be leaked as long as
the hash is leaked [25]. Diﬀerent from [2], our system tar-
gets client-side deduplication which saves both storage and
bandwidth. Meanwhile, our design randomly selects keys
for video encryption and protects them by masks derived
from both users’ videos and the blind signed hashes. Thus,
the encryption key is well protected in the bounded leakage
setting.
5. STRUCTURE-AWARE DEDUPLICATION
OVER ENCRYPTED SVC VIDEOS
In this section, we exploit the internal structure of SVC
videos to enforce layer-level deduplication under the pro-
posed secure deduplication framework. We ﬁrst motivate
the importance of layer-level deduplication for SVC videos
and then present the detailed construction.
5.1 Layer-Level Deduplication
The traditional ﬁle-level deduplication and block-level dedu-
plication are not suitable for SVC videos. This misﬁt can be
demonstrated by an intuitive and practical scenario. Sup-
pose that a user, say ua, owns the base layer and an en-
hancement layer for a source content, while another user,
say ub, only owns the base layer for the same source con-
tent. And ua and ub both used some cloud storage service
with deduplication. Then, by ﬁle-level deduplication, the
two diﬀerent SVC videos of ua and ub can not be dedupli-
cated since they have diﬀerent contents at the ﬁle level. On
the other hand, directly splitting a SVC video into blocks
and performing block-level deduplication is not a desirable
choice since the layers in a SVC video are formatted in a
special structure [19,21] and applying block-level deduplica-
tion may destroy the structure of SVC video. To address the
above challenges, we propose to exploit the layered nature of
SVC videos to enforce layer-level deduplication, which treats
each layer of a SVC video as a unit for deduplication.
5.2 Construction
Before presenting our construction of secure layer-level
deduplication over encrypted SVC videos, we give two im-
portant observations that facilitate our design. First, we
note that the base layer is the foundation of a SVC video
and it also serves as the reference basis for higher enhance-
ment layers [19]. This vital observation indicates that two
SVC videos can hardly have duplicate layers if they do not
have the same base layer, which inspires us to utilize the
base layer for the duplicate check for a given SVC video.
Second, users having the same base layer may possess dif-
ferent numbers of enhancement layers for the same source
content under their heterogeneous devices and network en-
vironments.
Based on these important observations, the main idea
for enforcing secure layer-level deduplication over encrypted
SVC videos is introduced as follows: Before uploading a
SVC video, the message-derived tag α1 of the base layer
and the number of layers are sent to cloud for duplicate
check. If a match for α1 is not found, it is considered that
the SVC video does not contain any duplicate layers and
thus all layers should be uploaded by the user. Otherwise,
a SVC version with the same base layer has already been
stored in cloud and thus the user’s SVC video may con-
tain a certain number of duplicate layers.
In this case, if
the user’s SVC video has fewer layers than the SVC version
in cloud, the PoW protocol needs to be run over all layers
of the SVC video. Otherwise, the user only needs to run
the PoW protocol over the duplicate layers contained in her
SVC video and also uploads the additional layers.
In our
proposed secure deduplication framework, the construction
with layer-level deduplication includes three phases which
are described as follows:
Interaction with the agency. Before uploading a SVC
video SV = {m1, m2, . . . , mn} to cloud, the user ﬁrst needs
to engage in the RSA-OPRF protocol with the agency to
derive the message-derived tag α1 of the base layer and a