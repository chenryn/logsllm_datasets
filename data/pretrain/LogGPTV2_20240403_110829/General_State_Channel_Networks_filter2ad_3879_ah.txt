i
version. Notice that this execution is in a state channel of length
ideal functionality Fch := F (cid:98)L(∆)
strictly less than i and hence will be handled by the trusted hybrid
(i − 1, VSCCi(C) ∪ C). The contract
ch
function RegisterInstanceC
is defined in such a way that it first
i
verifies the validity of γ .Alice’s contract instance version, and if all
checks pass, it stores (cid, νA) together with a time-stamp in the
auxiliary attribute preRegistered.
The intermediary γ .Ingrid upon receiving the information about
the execution of cidA on the function RegisterInstanceC
with in-
put parameters (cid, νA) can now symmetrically request execution
of cidB on RegisterInstanceC
with input (cid, νA). We empha-
size that γ .Ingrid only needs the information that cidA is being
executed and does not need to wait to start the execution until the
execution of cidA is completed.
Once γ .Bob is notified about the execution request of cidB on
RegisterInstanceC
with input parameters (cid, νA), he immedi-
i
ately submits ν B, his own off-chain contract instance version, by
executing cidB on the contract function RegisterInstanceC
with
input parameters (cid, ν B). If γ .Bob’s version of the contract in-
stance with identifier cid was submitted in time and is valid, the
contract function RegisterInstanceC
compares the two submit-
i
ted versions of cid and stores the one with higher version number
in the attribute cspace(cid). Otherwise, νA will be considered as
the registered one. Note that once honest γ .Bob learns about νA
and submits ν B, he knows whose contract instance version will be
registered in cidB. Thus, he can mark (id, cid) as registered in ΓB
aux
and update his channel space accordingly without waiting for the
execution of cidB to be completed. We emphasize that there is no
particular order in which parties can register state and our protocol
can handle all possible variants.
Once γ .Alice receives the information about γ .Bob’s version of
the contract instance, she already knows whose contract instance
version will be registered in cidA. Thus, analogously to γ .Bob, she
can mark (id, cid) as registered ΓA
aux and update her channel space
accordingly without waiting for the execution of cidA to be com-
pleted. If γ .Alice does not receive any information about γ .Bob’s
version until certain round (because γ .Bob is corrupt and did not
reveal his version to γ .Ingrid or because γ .Ingrid is corrupt and did
not execute cidA with γ .Bob’s version in time), she can conclude
that νA will be the registered contract instance version in cidA and
hence mark (id, cid) as registered in ΓA
aux.
To conclude, the registration procedure of a virtual state channel
of length i can take up to TimeReg(i) := 4 · TimeExeReq(⌈i/2⌉)
rounds. This follows by inspection of the functionality Fch and our
assumption that both subchannels have length at most ⌈i/2⌉.
Update a contract instance in a virtual state channel. As long as
both end-users of a virtual state channel follow the protocol, they
can update a contract instance exactly the same way as if it would
be a ledger state channel. The differences between updates in a
ledger state channel and in a virtual state channel appears only
when end-users of the state channel run into dispute, i.e., when
the parties run the contract instance registration procedure, which
was defined above. The pessimistic time complexity of updating a
virtual state channel of length i is equal to TimeReg(i) + 2.
i
ch
Execute a contract instance in a virtual state channel. In order to
execute a contract instance in a virtual state channel γ with identi-
fier id, the environment sends a message (execute, id, cid, f , z) to
one of the end-users of the virtual state channel. Let us assume
for now that this party is γ .Alice and let τ0 be the round when she
received the message from the environment. The party γ .Alice first
tries to execute the contract instance “peacefully”, exactly as if γ
would be a ledger state channel (see description above). In case
the peaceful execution fails, γ .Alice needs to register the contract
instance cid by calling the subproderure Registeri(γ .Alice, id, cid)
and execute the contract instance “forcefully” via the intermediary
γ .Ingrid. Since the intermediary is not trusted, execution must be
performed by executing the contract instances with code VSCCi(C)
stored in the underlying subchannels of γ (recall that the con-
tract instance in the subchannel γ .subchan(γ .Alice) is stored under
the identifier cidA := γ .Alice||γ .id and the contract instance in
the state channel γ .subchan(γ .Bob) is stored under the identifier
cidB := γ .Bob||γ .id). Since both subchannels are state channels of
length strictly less than i, the execution of their contract instances
Fch := F (cid:98)L(∆)
is handled by recursion via the trusted hybrid ideal functionality
The first attempt to design the force execution protocol would be
to let γ .Alice execute cidA on the function ExecuteInstanceC
with
parameters param = (cid, γ .Alice, τ0, f , z, sA), where sA is γ .Alice’s
signature on the tuple (cid, γ .Alice, τ0, f , z). The contract function
ExecuteInstanceC
would be defined such that it verifies the exe-
i
cution request (for example, checks that γ .Alice’s signature is valid,
etc.) and then executes the contract instance with identifier cid.
After successful execution of cidA, γ .Ingrid symmetrically executes
cidB on the same contract function ExecuteInstanceC
with the
same input parameters param.
(i − 1, VSCCi(C) ∪ C).
Therefore, the contract function ExecuteInstanceC
i
Unfortunately, this straightforward solution does not work since
we allow parties to interact fully concurrently. To illustrate the prob-
lem consider an example where while the execution between γ .Alice
and γ .Ingrid is running, γ .Bob also wants to forcefully execute the
contract instance with identifier cid on different inputs. This means
that before γ .Ingrid has time to execute cidB on γ .Alice’s request,
γ .Bob executes cidB on the function ExecuteInstanceC
with his
own parameters param′ = (cid, γ .Bob, τ ′
0, f ′, z′, sB). Consequently,
the order of executions of the contract instance cid is different in
cidA and cidB. Depending on the contract code of cid, this asym-
metry may lead to γ .Ingrid losing money.
is defined
in such a way that it verifies the validity of the submitted contract
instance execution request as before and if all checks pass, then it
only stores the execution request in an auxiliary attribute toExecute.
In other words, during the lifetime of the virtual state channel γ,
the contract instances cidA and cidB in the subchannels of γ only
collect information about the force executions of cid but they do not
perform any of them. All the internal executions are postponed until
the virtual state channel is being closed and the contract instance
cidA and cidB are being terminated. If γ .Ingrid behaves honestly
and always mimics requests from cidA to cidB and vice versa, then,
after the last accepted force execution, the set toExecute stored in
cidA is equal to the set toExecute stored in cidB. This implies that
i
i
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada965cidA and cidB terminate with the same money distribution and
hence γ .Ingrid can not lose money.
Since internal executions are postponed until the virtual state
channel closure, end-users of the virtual state channel cannot wait
until they learn the result of force execution of cid from the hybrid
ideal functionality Fch but they have to derive it themselves. They
proceed as follows. Party γ .Alice, after initiating the force execution,
waits for 2 · TimeExe(⌈i/2⌉) + 5 rounds to be sure that γ .Bob did
not initiate force execution of cid that should be performed before
her own force execution request. After the waiting is over, she
performs her execution of cid locally and outputs the result to the
environment. The other party acts similarly. Once γ .Bob learns
about γ .Alice’s force execution, he checks if he has some pending
execution requests that should take place before the one requested
by γ .Alice. If this is the case then he locally executes them first.
Thereafter, he locally executes the newly requested by γ .Alice and
outputs the result to the environment.
Execution of a contract instance in a virtual state channel of
length i as described above would take in the pessimistic case up
to 5 + TimeReg(i) + 2 · TimeExe(⌈i/2⌉) rounds.
Unfortunately, it turns out that the above time complexity is
polynomial in the length of the virtual state channel. In order to
achieve linear pessimistic time complexity, we make two important
observations which optimize our protocol. First note that party
γ .Ingrid does not need to wait until execution of cidA is completed
in order to initiate the execution of cidB. Similarly, γ .Bob does not
need to wait until execution of cidB is completed to locally execute
the contract instance cid and output the result to the environment.
This reduces the time complexity to 5 + TimeReg(i) + 2 · TimeExe
Req(⌈i/2⌉) rounds. This time complexity can further be improved
by running the registration subprocedure in parallel with the force
execution phase to:
TimeExe(i) := 5 + 4 · TimeExeReq(⌈i/2⌉).
(1)
A more detailed analysis of how this improved time complexity is
achieved is given in the full version of this paper.
Close a virtual state channel. Recall that in case of ledger state
channels, the environment instructs one party to close the ledger
state channel. The parties of the ledger state channel have some
time to register all contract instances that were opened in the ledger
state channel offline. If thereafter there is a contract instance in the
ledger state channel which is not terminated, then the ledger state
channel is not closed.
For virtual state channels the situation is different. We require
that the closing procedure of a virtual state channel γ always
starts in round γ .validity and always results in γ being closed. In
other words, both contract instances with code VSCCi(C) that were
opened in the subchannels of γ must be terminated. This ensures
that virtual state channels can never infinitely block closure of
ledger state channels. Let us now explain how the protocol “Close
a virtual state channel” works.
In round γ .validity both end-users of the virtual state chan-
nel start registering the contract instance if it has been created
in the virtual state channel γ but has never been registered be-
fore. Thereafter, γ .Alice requests execution of the contract instance
cidA := γ .Alice||γ .id stored in the subchannel γ .subchan(γ .Alice),
on the contact function CloseC
. In case γ .Alice is corrupt and does
i
not request execution of cidA on the function CloseC
, γ .Ingrid can
request it herself after certain time has passed. We proceed similar
for γ .Bob.
The contract function CloseC
i
is defined in such a way that it
first (if necessary) finalizes registration of a contract instance. This
step is needed in case one party initiated registration of a contract
instance with identifier cid but the other party did not react. As
a next step the function CloseC
internally executes all the force
i
execution requests stored in toExecute.
Let us now discuss what happens if there exists a registered
contract instance cid which is however not terminated (the amount
of locked coins is not equal to zero). The first idea would be to
let CloseC
ignore the contract instance. However, this would lead
i
to the problem that the intermediary of the virtual state channel,
γ .Ingrid, loses money (because some money may still be locked
in the contract) without ever having the chance to react to virtual
state channel closing. Instead, the contract function CloseC
gives
i
all the locked coins in the contract instance to the intermediary.
This implies that end-users of a virtual channels are responsible
to open a contract instance only if they are certain that they can
terminate it before the channel validity expires since otherwise
they will lose money.
Finally, the contract function verifies that the current value of the
attribute cash is non-negative for both users and that the amount
of coins that were originally invested into the virtual state channel
is equal to the current amount of coins in the virtual state channel.
If this is the case, CloseC
unlocks for each user the current amount
i
of coins it holds in the channel contract. If one of the users have
negative balance in the virtual state channel or the amount of
invested coins is not equal to the current amount of coins, then
any trading that happened between the end-users of γ is reverted
by CloseC
. This again guarantees that γ .Ingrid cannot lose money
i
when γ .Alice and γ .Bob are malicious.
The time complexity of closing a virtual state channel of length i
can be computed as 2·TimeExeReq(⌈i/2⌉)+2·TimeExe(⌈i/2⌉). This
follows from the simple observation that in case parties need to reg-
ister a contract instance before closing the channel, both end-users
should initiate the registration procedure in the same round (i.e.
Registeri(γ .Alice, id, cid) and Registeri(γ .Bob, id, cid) are run
in parallel) which reduces the time complexity of the registration
phase.
i
Let us briefly explain one additional technicality. Recall that in
case γ .Ingrid is corrupt, it can happen that the contract instances
with code VSCCi(C) are opened in the subchannels of γ although
the virtual state channel γ was not successfully created. This in
particular means that the coins needed to create γ are locked in
the subchannels and can be unlocked only after round γ .validity
by executing the contact function CloseC
i
.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada966