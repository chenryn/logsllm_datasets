### Sender \( P_2 \)'s Inputs and Outputs

**Inputs:**
- Sets \(\{X_j\}_{j \in [\beta]}\), where \(|X_j(i)| = \sigma\) for all \(i\).

**Outputs:**
1. For each \(j \in [\beta]\), sample \(w_j\) uniformly from \(\{0, 1\}^\sigma\).
2. For each \(j \in [\beta]\):
   - If \(q_j \in X_j\), set \(y_j = w_j\).
   - Otherwise, sample \(y_j\) uniformly from \(\{0, 1\}^\sigma\).
3. Return \(\{y_j\}_{j \in [\beta]}\) to \(P_1\) and \(\{w_j\}_{j \in [\beta]}\) to \(P_2\).

### Weak PSM Functionality \(F_{\beta, \sigma, N}^{wPSM}\)

We consider three instantiations of this functionality using primitives from the line of Oblivious Pseudorandom Functions (OPRFs) [51]. The details are provided in Appendix B, and their costs are summarized below:

1. **Polynomial-based Batch-OPPRF [65]:**
   - Communication cost: \(3.5\lambda\beta + N\sigma\)
   - Round complexity: 2

2. **Table-based OPPRF [51]:**
   - Assumes an upper-bound on the size of individual sets, derived specific to its application.
   - Let \(d \in \mathbb{N}\) be the minimum value such that the upper-bound is bounded by \(2^d\).
   - Communication cost: \((4.5\lambda + 2d\sigma)\beta\)
   - Round complexity: 2

3. **Relaxed Batch OPPRF [13]:**
   - Instantiates \(F_{\beta, \sigma, N}^{wPSM}\) by invoking a relaxed batch OPPRF followed by a table-based OPPRF [51].
   - Communication cost: \((8\lambda + 4\sigma)\beta + 1.31N\sigma\)
   - Round complexity: 4

### Execution Cost

The instantiations of the \(F_{\beta, \sigma, N}^{wPSM}\) functionality using the above three approaches provide trade-offs between computation and communication [13, 51, 65]. Different protocols are more efficient in different experimental settings, as evident from the empirical results in Section 6.

### Multiparty Functionalities

Our protocols invoke several \(n\)-party functionalities in the honest majority setting. These functionalities can be realized using the protocols from [21, 52].

**Notation:**
- Let \(F(+, \cdot)\) be a finite field.
- Let \(n\) be the number of parties.
- Let \(t < n/2\) be the corruption threshold.
- Let \(p > 2^\sigma\) be a prime.
- Additions and multiplications in the protocol are over the field \(F_p\).

**Input:**
- Each party \(P_i\) has an input set \(X_i = \{x_{i1}, \ldots, x_{im}\}\), where \(x_{ij} \in \{0, 1\}^\sigma\).
- Element size can always be made \(\sigma\) bits by first hashing the elements using an appropriate universal hash function.

**Protocol:**

1. **Pre-processing (Randomness generation required for Step 4):**
   - \(P_1, \ldots, P_n\) compute \([s_1], \ldots, [s_\beta] \leftarrow \text{Random}_F(n, t, \beta)\).

2. **Hashing:**
   - Parties agree on hash functions \(h_1, h_2, h_3: \{0, 1\}^\sigma \to [\beta]\).

3. **Invoking the \(F_{\beta, \sigma, N}^{wPSM}\) functionality:**
   - \(P_1\) does stash-less cuckoo hashing on \(X_1\) using \(h_1, h_2, h_3\) to generate Table1 and inserts dummy elements into empty bins.
   - For \(i \in \{2, \ldots, n\}\), \(P_i\) does simple hashing of \(X_i\) using \(h_1, h_2, h_3\) into Table\(i\). If the three locations are not distinct, insert dummy elements in Table\(i\).
   - \(P_i\) is the sender with input \(\{Table_i[j]\}_{j \in [\beta]}\).
   - \(P_1\) is the receiver with input \(\{Table_1[j]\}_{j \in [\beta]}\).
   - \(P_1\) receives the outputs \(\{y_{ij}\}_{j \in [\beta]}\) and \(P_i\) receives \(\{w_{ij}\}_{j \in [\beta]}\).

4. **Evaluation:**
   - For \(j \in [\beta]\):
     - \(P_1\) computes \(\langle a_j \rangle_1 = \sum_{i=2}^n (-y_{ij} \mod p)\).
     - For \(i \in \{2, \ldots, n\}\), \(P_i\) sets \(\langle a_j \rangle_i = (w_{ij} \mod p)\).
     - \(P_1, \ldots, P_n\) compute \([a_j] \leftarrow \text{ConvertShares}_F(n, t, \langle a_j \rangle)\).
     - \(P_1, \ldots, P_n\) invoke the following multiparty functionalities:
       - \([v_j] \leftarrow \text{Mult}_F(n, t, [a_j], [s_j])\).
       - \(v_j \leftarrow \text{Reveal}_F(n, t, [v_j])\).

5. **Output:**
   - \(P_1\) computes the intersection as \(Y = \{Table_1[j] \mid v_j = 0\}\), permutes its elements, and announces to all parties.

### Figure 4: Multiparty PSI Protocol

In this protocol, \(P_1\)'s output for bin \(j\) is 0 if and only if \(Table_1[j]\) belongs to the intersection. The circuit is as follows:
- For each \(j \in [\beta]\), \(P_1\) adds the negation of the query outputs from its interaction with each \(P_i\) (for each \(i = 2, \ldots, n\)) in Step 3 to get its additive share \(\langle a_j \rangle_1\).
- For each \(i = 2, \ldots, n\), \(P_i\) sets its additive share \(\langle a_j \rangle_i\) as its response from the same interaction in Step 3.
- Observe that \(a_j = 0\) if and only if \(Table_1[j]\) is in the intersection.