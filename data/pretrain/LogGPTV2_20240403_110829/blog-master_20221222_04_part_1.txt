## 使用 PolarDB 开源版 和 imgsmlr 存储图像特征值以及快速的进行图像相似搜索  
### 作者    
digoal    
### 日期    
2022-12-22    
### 标签    
PostgreSQL , PolarDB , gist , imgsmlr , 图像相似 , 图像识别     
----    
## 背景    
PolarDB 的云原生存算分离架构, 具备低廉的数据存储、高效扩展弹性、高速多机并行计算能力、高速数据搜索和处理; PolarDB与计算算法结合, 将实现双剑合璧, 推动业务数据的价值产出, 将数据变成生产力.    
本文将介绍使用 PolarDB 开源版 和 imgsmlr 存储图像特征值以及快速的进行图像相似搜索  
测试环境为macOS+docker, PolarDB部署请参考下文:    
- [《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB简单部署》](../202209/20220908_02.md)    
## 原理   
- [《弱水三千,只取一瓢,当图像搜索遇见PostgreSQL(Haar wavelet)》](../201607/20160726_01.md)    
图像数字化的方法很多, 例如将图像划分为`N^2`的宫格, 每个宫格由几个三原色和灰度进行表述, 然后层层缩小(例如从81宫格缩小到9宫格), 把全副图像再压缩到一个格子, 形成另一个更小的`N^2`宫格数组.  
在进行图像相似搜索时, 实际上是比对2个`N^2`宫格数组的向量距离.    
使用GIST索引接口, 可以实现这种向量相似搜索的快速收敛, 例如以中心点为桶的数据划分, 多图层缩略图的压缩搜索算法等. (参考本文后半部分pase)  
本文将介绍使用 PolarDB 开源版 和 imgsmlr 存储图像特征值以及快速的进行图像相似搜索.  
1、新增2个数据类型, 一个是详图向量, 一个是签名向量(占用空间更小, 查询效率更高). 通常先使用签名向量过滤第一道, 然后再使用详图向量精筛.    
Datatype|	Storage length|	Description  
---|---|---  
pattern	|16388 bytes|	Result of Haar wavelet transform on the image  
signature|	64 bytes	|Short representation of pattern for fast search using GiST indexes  
2、新增几个图像转换函数接口  
Function	|Return type	|Description  
---|---|---  
jpeg2pattern(bytea)	|pattern	|Convert jpeg image into pattern  
png2pattern(bytea)	|pattern	|Convert png image into pattern  
gif2pattern(bytea)	|pattern	|Convert gif image into pattern  
pattern2signature(pattern)	|signature	|Create signature from pattern  
shuffle_pattern(pattern)	|pattern	|Shuffle pattern for less sensitivity to image shift  
3、新增2个向量距离计算操作符和索引排序支持  
Operator	|Left type	|Right type	|Return type	|Description  
---|---|---|---|---  
``	|pattern	|pattern	|float8	|Eucledian distance between two patterns  
``	|signature	|signature	|float8	|Eucledian distance between two signatures  
## 部署 imgsmlr on PolarDB  
1、安装png和jpeg的图像库依赖  
```  
sudo yum install -y libpng-devel  
sudo yum install -y libjpeg-turbo-devel  
sudo vi /etc/ld.so.conf  
# add  
/usr/lib64  
sudo ldconfig  
```  
2、安装gd库, 用于将jpeg,png,gif等图像的序列化转换.  
```  
git clone --depth 1 https://github.com/libgd/libgd  
cd libgd/  
mkdir build  
cd build  
cmake -DENABLE_PNG=1 -DENABLE_JPEG=1 ..  
make  
sudo make install  
...  
-- Installing: /usr/local/lib64/libgd.so.3.0.16  
-- Installing: /usr/local/lib64/libgd.so.3  
...  
sudo vi /etc/ld.so.conf  
# add  
/usr/local/lib64  
sudo ldconfig  
export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH  
```  
3、安装imgsmlr   
```  
git clone --depth 1 https://github.com/postgrespro/imgsmlr  
cd imgsmlr/  
USE_PGXS=1 make  
USE_PGXS=1 make install  
```  
```  
ldd /home/postgres/tmp_basedir_polardb_pg_1100_bld/lib/imgsmlr.so  
	linux-vdso.so.1 =>  (0x00007ffc25d52000)  
	libgd.so.3 => /usr/local/lib64/libgd.so.3 (0x00007fd7a4463000)  
	libc.so.6 => /lib64/libc.so.6 (0x00007fd7a3ee5000)  
	libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007fd7a3bdd000)  
	libm.so.6 => /lib64/libm.so.6 (0x00007fd7a38db000)  
	libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007fd7a36c5000)  
	/lib64/ld-linux-x86-64.so.2 (0x00007fd7a42b3000)  
```  
4、加载插件  
```  
psql  
create extension imgsmlr ;  
```  
## 场景模拟和架构设计实践    
生成测试图像  
```  
cd imgsmlr  
USE_PGXS=1 make installcheck  
```  
图像导入、向量化、图像相似搜索测试  
```  
psql  
-- 创建插件  
CREATE EXTENSION imgsmlr;  
-- 创建存储原始图像二进制的表  
CREATE TABLE image (id integer PRIMARY KEY, data bytea);  
-- 创建临时表用于导入  
CREATE TABLE tmp (data text);  
-- 导入图像  
\copy tmp from 'data/1.jpg.hex'  
INSERT INTO image VALUES (1, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/2.png.hex'  
INSERT INTO image VALUES (2, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/3.gif.hex'  
INSERT INTO image VALUES (3, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/4.jpg.hex'  
INSERT INTO image VALUES (4, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/5.png.hex'  
INSERT INTO image VALUES (5, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/6.gif.hex'  
INSERT INTO image VALUES (6, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/7.jpg.hex'  
INSERT INTO image VALUES (7, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/8.png.hex'  
INSERT INTO image VALUES (8, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/9.gif.hex'  
INSERT INTO image VALUES (9, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/10.jpg.hex'  
INSERT INTO image VALUES (10, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/11.png.hex'  
INSERT INTO image VALUES (11, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
\copy tmp from 'data/12.gif.hex'  
INSERT INTO image VALUES (12, (SELECT decode(string_agg(data, ''), 'hex') FROM tmp));  
TRUNCATE tmp;  
-- 将原始图像转换为图像特征向量和图像签名, 导入新表中  
CREATE TABLE pat AS (  
    SELECT  
        id,  
        shuffle_pattern(pattern)::text::pattern AS pattern,  
        pattern2signature(pattern)::text::signature AS signature  
    FROM (  
        SELECT   
            id,  
            (CASE WHEN id % 3 = 1 THEN jpeg2pattern(data)  
                  WHEN id % 3 = 2 THEN png2pattern(data)  
                  WHEN id % 3 = 0 THEN gif2pattern(data)  
                  ELSE NULL END) AS pattern   
        FROM   
            image  
    ) x   
);  
-- 添加PK  
ALTER TABLE pat ADD PRIMARY KEY (id);  
-- 在图像签名字段创建索引  
CREATE INDEX pat_signature_idx ON pat USING gist (signature);  
-- 自关联, 查询图像相似性(欧氏距离)  
SELECT p1.id, p2.id, round((p1.pattern  p2.pattern)::numeric, 4) FROM pat p1, pat p2 ORDER BY p1.id, p2.id;  
SELECT p1.id, p2.id, round((p1.signature  p2.signature)::numeric, 4) FROM pat p1, pat p2 ORDER BY p1.id, p2.id;  
-- 使用索引, 快速搜索相似图像  
SET enable_seqscan = OFF;  
SELECT id FROM pat ORDER BY signature  (SELECT signature FROM pat WHERE id = 1) LIMIT 3;  
SELECT id FROM pat ORDER BY signature  (SELECT signature FROM pat WHERE id = 4) LIMIT 3;  
SELECT id FROM pat ORDER BY signature  (SELECT signature FROM pat WHERE id = 7) LIMIT 3;  
SELECT id FROM pat ORDER BY signature  (SELECT signature FROM pat WHERE id = 10) LIMIT 3;  
```  
结果截取:  
```  