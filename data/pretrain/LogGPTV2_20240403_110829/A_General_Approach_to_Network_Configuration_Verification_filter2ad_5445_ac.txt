the con(cid:27)guration determines the initial metric that the router will
use. The router id (rid) is used to break ties among equally-good
routes. Other protocol-speci(cid:27)c attributes such as the BGP multi-exit
discriminator (med), and whether a BGP route was learned via iBGP
(bgpInternal), are included in each such symbolic record. Finally,
every record contains one special boolean (cid:27)eld, called valid. If valid
is true, then a message is present and the remaining contents of the
record are meaningful; otherwise, they are not meaningful (e.g., no
message arrives at this location).
Because we are interested in the behavior with respect to a single
symbolic packet, we only want to consider control plane messages
for pre(cid:27)xes that impact this packet. The valid (cid:27)eld of a control
if e4.valid ∧ failedR1,R2 = 0 then
if ¬ (FBM(e4.pre(cid:27)x, 192.168.0.0, 16) ∧
then
16 ≤ e4.length ≤ 32)
in4.valid = true
in4.lp = 120
in4.ad = e4.ad
in4.pre(cid:27)x = e4.pre(cid:27)x
in4.length = e4.length
in4.bgpInternal = true
...
else in4.valid = false
else in4.valid = false
Figure 4: Translation of the R1 to R2 BGP import (cid:27)lter
plane record will be true if and only if i) a message is present (e.g.,
advertised from a neighbor and not (cid:27)ltered), and ii) the control
plane destination pre(cid:27)x applies to the data plane destination IP of
the packet of interest. We capture the latter dependence with the
following constraint:
e.valid =⇒ FBM(e.pre(cid:128)x, dstIP, e.length)
The function FBM ((cid:27)rst bits match) tests for equality of the
(cid:27)rst e.length bits of the pre(cid:27)x (e.pre(cid:27)x) and destination IP, thus
capturing the semantics of pre(cid:27)x-based forwarding.2
(4) Encoding import (cid:27)lters. Each router con(cid:27)guration de(cid:27)nes
(possibly per neighbor) (cid:27)lters that can either drop or modify proto-
col messages. As an example, consider the following con(cid:27)guration
fragment for router R1.
ip prefix_list L deny 192.168.0.0/16 le 32
ip prefix_list L allow
route-map M 10
match ip address prefix-list L
set local-preference 120
This fragment blocks control plane announcements for any pre(cid:27)x
that matches the (cid:27)rst 16 bits of 192.168.0.0, and has pre(cid:27)x length
between 16 and 32. It sets the local preference attribute to 120
for any other pre(cid:27)x. Assuming R1’s BGP process is con(cid:27)gured
with this fragment as an import (cid:27)lter, we use it to constrain the
relationship between the symbolic records e4 and in4 in Figure 2(c).
More speci(cid:27)cally, the (cid:27)lter is realized by the formula shown in
Figure 4. The (cid:27)rst line in this formula ensures that there can be an
advertisement at in4 only if R2 exports an advertisement to e4 and
the R1–R2 link is not failed. The second condition implements the
import (cid:27)lter. If the two conditions are met, then information from
R2 will arrive at R1. Hence, we set the valid bit of in4, constrain
the local preference to 120, and constrains in4’s other (cid:27)elds to be
the same as e4’s. In all other cases, no advertisement arrives at R1,
so its valid bit is set to false.
2The constraint FBM(p1,p2,n) is surprisingly tricky to encode e(cid:28)ciently. A naive
solution that represents p1 and p2 as bit-vectors of size 32 is slow. See §6 for an
e(cid:28)cient solution.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Ryan Becke(cid:29), Aarti Gupta, Ratul Mahajan, and David Walker
if bestBGP.valid ∧ failedR1,R2 = 0 then
if ¬ bestBGP.bgpInternal ∧ bestBGP.length + 1 ≤ 255
then
out3.valid = true
out3.lp = bestBGP.lp
out3.ad = bestBGP.ad
out3.pre(cid:27)x = bestBGP.pre(cid:27)x
out3.length = bestBGP.length + 1
...
else out3.valid = false
else out3.valid = false
Figure 5: Translation of the R1 to R2 BGP export (cid:27)lter
Such translation of import (cid:27)lters to symbolic constraints can
also capture route redistribution between protocols. Users can set
custom metric and administrative distance values for route redistri-
bution, which would be updated as before.
(5) Encoding route selection. Each protocol instance selects a
best route for each IP pre(cid:27)x among those available.3 For example,
the routes available to R1BGP include routes from its neighbors
and thus de(cid:27)ned by the status of the symbolic records in2, in4, in5,
and in7. The available routes are ordered by the decision process
in a standard way. For instance, BGP (cid:27)rst prefers the route with
the highest administrative distance, and if those are equal, the
highest local preference, then highest metric, etc. We implement
this ordering via a relation r1 (cid:22) r2, which may be read as “r1 is at
least as preferred as r2.” The selected route is the one that is both
available (the valid bit is set) and highest in the ordering. Logically,
our encoding introduces a new symbolic record bestprot for each
protocol instance prot. Each such record is equated with the highest
available route in the order. For instance, for R1BGP, if no input ini
is valid then bestBGP is not valid. Otherwise:
bestBGP (cid:22) ini ∧ (cid:95)
bestBGP = ini
i∈{2,4,5,7}
(cid:94)
i∈{2,4,5,7}
This constraint states that best record is less than or equal to all
alternatives and equal to at least one of them.
Each router installs only one route in its data plane, which is
then used to forward tra(cid:28)c. Thus, it chooses a best route among
all routing protocols. Once again, this can be modeled with a new
symbolic record bestoverall, which is similarly constrained to be the
best among all the bestprot records.
To represent the (cid:27)nal forwarding decision of the router, we
introduce a new boolean variable controlfwdx,y for each edge in
the network between routers x and y. The variable indicates that
router x decides to forward tra(cid:28)c for the destination to router
y. Intuitively, router x will decide to forward to router y if the
message received from y is equal to the best choice. For example, to
determine if R1 will forward to R2, we use the following constraint:
controlfwdR1,R2 = (e4.valid ∧ e4 = bestoverall)
3Assume for now that a single best route is selected. We outline the extension for
multipath routing in §4.
(6) Encoding route export. After selecting a best route, each
protocol will export messages to each of its peers after potentially
processing these messages through peer-speci(cid:27)c export (cid:27)lters. Fig-
ure 5 shows the route export constraint for R1BGP’s export to R2BGP
assuming the default export (cid:27)lter. The encoding of route export is
similar to that of an import (cid:27)lter, but with some di(cid:29)erences. First,
the export constraint will connect the record for the protocol’s
best route (bestBGP) with a record on an outgoing edge of a router
(e.g., out3). Second, the route export constraint accounts for the fact
that iBGP routes should not be re-exported to other iBGP peers by
checking if the best route was learned via iBGP. Third, the path
metric is updated according to the protocol (e.g., adding 1 for BGP).
Finally, the route is only exported if the new path metric does not
over(cid:30)ow the maximum protocol path length (e.g., 255 for BGP).
(7) Encoding data plane constraints. Although routers decide
how to forward packets in the control plane through their decision
process, the actual data plane forwarding behavior can di(cid:29)er due
to the presence of an access control list (ACL), which lets a router
block tra(cid:28)c directly in the data plane. To handle ACLs, we create
additional variables to represent the (cid:27)nal data plane forwarding
behavior of the network. For each variable controlfwdx,y, we create
a corresponding datafwdx,y variable. The data plane forwarding
will be the same as the control plane forwarding modulo any ACLs.
For example, consider the following ACL:
172.10.1.0 0.0.0.255
access-list 1 deny ip
The mask 0.0.0.255 signi(cid:27)es the wildcard bits for the match. This
ACL will thus block any packets that match destination IP 172.10.1.*
in the data plane. This constraint is captured by (cid:27)rst translating
the ACL to a formula and then conjoining it with the control plane
decision in the following way:
datafwdR1,R2 = controlfwdR1,R2 ∧ ¬ FBM(dstIP, 172.10.1.0, 24)
(8) Encoding properties. While the model above captures the
joint impact of all possible network interactions, to verify properties
of interest we can instrument it with additional variables as needed.
For example, suppose we wish to check that router R3 can reach
N1 regardless of any advertisements received from neighbors N2
and N3. For each router x in the network, we add a variable reachx
representing that x can reach the destination subnet. For R1, which
is directly connected to N1, we add:
canReachR1 ⇐⇒ datafwdR1,N1
For every other router, we say it can reach N1 if it can forward to
some neighbor that can reach N1. For router R3:
canReachR3 ⇐⇒ (cid:95)
R∈{R1}
(datafwdR3,R ∧ canReachR)
Since we are interested in checking that the property holds for
any possible packet, we leave the packet (cid:27)elds (e.g., dstIp) uncon-
strained. Finally, we would assert the negation of the property we
are interested in, namely ¬canReachR3 and ask the solver to prove
unsatis(cid:27)ability, thereby ensuring that the property holds for all
packets and environments.
A General Approach to Network Configuration Verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
4 GENERALIZING THE MODEL
This section describes how we encode several additional features
of network con(cid:27)gurations.
Link-state protocols. In link-state protocols, such as OSPF and
ISIS, routers share information about the cost and state (up or down)
of each link. Each router then builds a global view of the network
and computes the least-cost path to each destination. These least-
cost paths are a special case of stable paths. Each router along the
shortest path will send tra(cid:28)c to a neighbor only if that neighbor
has a path to the destination and no other neighbor o(cid:29)ers a lower
cost path. Based on this observation, we model link-state protocols
the same way as path-vector protocols, using con(cid:27)gured link costs.
Distance-vector protocols. Like link-state protocols, distance-
vector protocols such as RIP also compute a shortest path tree.
However, unlike link-state protocols, they do so without maintain-
ing a global view of the network, instead passing information about
path length to the destination between neighbors. We can model the
solution to a distance vector protocol the same way as for link-state
protocols but where each link has a weight of 1.
Static routes. Static routes are used to tell a router to always for-
ward to a particular next hop IP address, or out a particular in-
terface. As with connected routes, we model static routes as their
own routing instance that makes forwarding decisions based on
the destination IP address. By modeling static routes this way, we
can treat them similarly to other protocols and easily model route
redistribution where static routes are injected into other protocols.
Aggregation. Aggregation, in which routers announce a less-speci(cid:27)c
pre(cid:27)x that covers many, more-speci(cid:27)c pre(cid:27)xes, helps reduce the
size of the routing tables. We model aggregation as a modi(cid:27)cation
to the pre(cid:27)x length attribute. If a pre(cid:27)x is valid for the destination IP
address before aggregation, it remains valid after aggregation, but
with a shorter pre(cid:27)x length. For example, if a /24 pre(cid:27)x is relevant
for the packet’s destination IP then so is its aggregated /16 pre(cid:27)x.
Multipath routing. The encoding in §3 assumed that routers se-
lect a single best path, but multipath routing, where tra(cid:28)c is spread
over multiple equally-good routes to balance load, is common in
modern networks. To encode multipath routing, we relax the best
route comparison so that it does not compare the router ID. This
relaxation no longer requires a total ordering of preferred routes,
and any route as good as the best route will be used.
BGP communities. BGP communities are strings that can be at-
tached to (or removed from) route advertisements. We model com-
munities using a new variable communityx,c for each router x and
community c that appears in some router’s con(cid:27)guration. Vendors
allow community values to be added or removed arbitrarily by any
router. We encode the semantics of these transformations simply by
updating the value of communityx,c according to the import/export
(cid:27)lters at the router.
iBGP. Modeling iBGP is challenging because it introduces cross-
destination dependencies through recursive lookup. In order to
determine the forwarding behavior for a particular packet p over
a network using iBGP, one (cid:27)rst has to determine the forwarding
behavior for each user-de(cid:27)ned next-hop destination IP address
con(cid:27)gured between iBGP peers. For example, if router A has no
IGP route to router B’s iBGP-con(cid:27)gured next-hop IP address, then
the peers can not exchange BGP advertisements about packet p.
To model iBGP, we create N additional copies of the network
where N is the number of routers con(cid:27)gured to run iBGP. Each
copy of the network encodes the forwarding behavior for a packet
destined to the next-hop IP address associated with one of the
iBGP-con(cid:27)gured routers. We add the constraint that router A only
propagates routes to router B over an iBGP connection if A can
reach B in the network copy corresponding to B’s con(cid:27)gured next-
hop destination IP address.
The variable (bgpInternal) indicates whether or not a route was
learned from an iBGP peer. Routes learned via iBGP are allowed to
be exported to eBGP peers but not to other iBGP peers. If a router