have seen so far, we can generate the following payload.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.105
2.4.1.4 Array Data Types
Take Advantage of Superglobals
Supposing we can send the custom header ( ) to
MyHeader
inject our payload on the server-side, we have the following
code to evaluate our payload as PHP code:
echo  variable name
▪ $$var > variable of $var variable
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.108
2.4.1.5 Variable Variables
Simple Example
$x = 'Love'; //Variable
$$x = 'Beer'; //Variable variable
echo $x; //> Love
echo $$x; //> Beer
echo $Love; //> Beer
echo ${Love}; //> Beer
echo ${"Love"}; //> Beer
echo "$x ${$x}"; //> Love Beer
echo "$x ${Love}"; //> Love Beer
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.109
2.4.1.5 Variable Variables
It is also possible to add more Dollar Signs.
With this way, it is very easy to create code very hard to
read, like the examples in the upcoming slides.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.110
2.4.1.5 Variable Variables
Chained Dollar Signs
$x = "I"; $I = "Love"; $Love = "Beer"; $Beer = "So"; $So = "Much";
echo $x; //>I
echo $$x; //>Love
echo $$$x; //>Beer
echo $$$$x; //>So
echo $$$$$x; //>Much
echo $x.$$x.$$$x.$$$$x.$$$$$x; //>ILoveBeerSoMuch
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.111
2.4.1.5 Variable Variables
$_SERVER Superglobal
This is a way to access the $_SERVER superglobal:
$$$$$$$$$$s = '_SERVER';
var_dump($$$$$$$$$$s); //> NULL
var_dump($$$$$$$$$$$s); //> string(7) "_SERVER"
var_dump($$$$$$$$$$$$s); //> the $_SERVER array
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.112
2.4.1.5 Variable Variables
Of course, using these basic techniques the ways to
obfuscate your payload are countless. It is all up to your
imagination!
In any case, knowing how to obfuscate your payload using
alternative ways is a valuable skill.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.113
2.4.2 Non-Alphanumeric Code
Let’s now put some "magic" in this PHP chapter!
Like in JavaScript, in PHP it is possible to write non-
alphanumeric encoded code. The mechanism is similar but
not the same, which is simply due to the fact that PHP
obviously lacks some of the JavaScript functions and
properties.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.114
2.4.2 Non-Alphanumeric Code
The first explanation of this techniques was made by
Gareth Hayes in a blog post "Non alphanumeric code in
PHP”. He also wrote a tutorial "PHP nonalpha tutorial".
Without going too deep into this topic, let’s see some
interesting behaviors at the base of this technique to
generate strings.
http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/ WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.115
http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/
2.4.2.1 Strings Generation
Arithmetic Operators
PHP follows Perl's convention when dealing with arithmetic
operations on character variables. For example:
$§ = 'a';
$§++; //$§ = 'b'
$§ = 'z';
$§++; //$§ = 'aa'
$§ = 'A';
$§++; //$§ = 'B'
$§ = 'a1';
$§++; //$§ = 'a2'
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.116
http://php.net/manual/en/language.operators.increment.php
2.4.2.1 Strings Generation
Arithmetic Operators
Character variables can only be incremented and not
decremented. Only plain ASCII alphabets and digits ( ,
a-z A-Z
and ) are supported:
0-9
$§ = 'a';
$§--; //$§ = 'a'
$§ = 'è';
$§++; //$§ = 'è'
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.117
2.4.2.1 Strings Generation
Bitwise Operators
It is also possible to use Bitwise Operators on strings. For
example:
echo A&B; //> @
echo A|B; //> C
echo A^B; //U+0003 END OF TEXT
echo ~A; //U+00BE VULGAR FRACTION THREE QUARTERS> ¾
echo A 0
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.118
http://www.php.net/manual/en/language.operators.bitwise.php
2.4.2.1 Strings Generation
Using String Output of Native PHP Objects
If we want to start from a string, we can use the Array
native object as follows:
$a = []; // Create an empty array object
$a = $a.!![]; // Convert the array to string > "Array"
$_ = $__ = ![]&!![]; // true & false generates the int(0) > 0
$__++; // Increment int(0) by one > 1
$_§ = $__§ = $a[$_]; // Access the position 0 of the "Array" string > "A"
$__§++; // Get the next char after A > "B"
echo $_§|$__§; // Echoes A|B > "C"
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.119
2.4.2.1 Strings Generation
Now, try to imagine how code like the curly syntax or others
we have seen (in the basic section) could be useful with
this technique. Now, try to write your own shellscript!
Here’s a little hint:
$_="{"; #XOR char
echo ($_^";").($_^"/"); #XOR Magic.. > GET
…
Source> http://web.archive.org/web/20160526025218/http://www.spentera.com/2011/09/non- WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.120
alphanumeric-php-simple-backdoor/
2.4.2.2 Hackvertor.co.uk
phpinfo()
Hackvector.co.uk provides two
options to encode php in non-
alphanumeric code.
This next example is a
command encoded
phpinfo();
with the first option:
phpnonalpha
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.121
2.4.2.2 Hackvertor.co.uk
phpinfo()
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.122
References
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.123
References
Google URL Shortener
http://goo.gl/DpJnCq+
Preview of TinyURL.com/ph7xh4m
http://preview.tinyurl.com/ph7xh4m
Non-alphanumeric PHP Simple Backdoor | Spentera
http://web.archive.org/web/20160526025218/http://www.spentera.com/2011/09/non-
alphanumeric-php-simple-backdoor/
GitHub: JSFuck list
https://github.com/aemkei/jsfuck/blob/master/jsfuck.js
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.124
References
How to Preview Shortened URLs (TinyURL, bit.ly, is.gd, and more)
http://security.thejoshmeister.com/2009/04/how-to-preview-shortened-urls-tinyurl.html
t.co (Twitter)
http://t.co/
RFC 3986
http://tools.ietf.org/html/rfc3986#page-16
Hack.me
https://hack.me/
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.125
References
IP Converter
http://www.silisoftware.com/tools/ipconverter.php
New XSS vectors/Unusual Javascript
http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/read.php?2,15812,p
age=14
jjencode demo
http://utf-8.jp/public/jjencode.html
aaencode demo
http://utf-8.jp/public/aaencode.html
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.126
References
JSFuck
http://www.jsfuck.com/
YAUC Less chars needed to run arbitrary JS code = 6! (JS GREAT WALL)
http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/read.php?24,32930
Examples of malicious javascript
http://aw-snap.info/articles/js-examples.php
http://code.jquery.com/jquery-2.1.0.min.js
http://code.jquery.com/jquery-2.1.0.min.js
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.127
References
What is the Closure Compiler?
https://developers.google.com/closure/compiler/
YUI Compressor
http://yui.github.io/yuicompressor/
JSMin
http://crockford.com/javascript/jsmin
Packer
http://dean.edwards.name/packer/
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.128
References
PHP Type Casting
http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting
Non alphanumeric code in PHP
http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/
PHP nonalpha tutorial
http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/
Incrementing/Decrementing Operators
http://php.net/manual/en/language.operators.increment.php
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.129
References
Bitwise Operators
http://www.php.net/manual/en/language.operators.bitwise.php
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.130