### WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.4.1.4 Array Data Types
To take advantage of superglobals, we can send a custom header (e.g., `MyHeader`) to inject our payload on the server-side. The following code evaluates the payload as PHP code:

```php
echo $$var; // Outputs the value of the variable whose name is stored in $var
```

#### 2.4.1.5 Variable Variables
**Simple Example:**
```php
$x = 'Love'; // Variable
$$x = 'Beer'; // Variable variable
echo $x; // Output: Love
echo $$x; // Output: Beer
echo $Love; // Output: Beer
echo ${Love}; // Output: Beer
echo ${"Love"}; // Output: Beer
echo "$x ${$x}"; // Output: Love Beer
echo "$x ${Love}"; // Output: Love Beer
```

**Chained Dollar Signs:**
```php
$x = "I"; 
$I = "Love"; 
$Love = "Beer"; 
$Beer = "So"; 
$So = "Much";

echo $x; // Output: I
echo $$x; // Output: Love
echo $$$x; // Output: Beer
echo $$$$x; // Output: So
echo $$$$$x; // Output: Much
echo $x.$$x.$$$x.$$$$x.$$$$$x; // Output: ILoveBeerSoMuch
```

**Accessing the `$_SERVER` Superglobal:**
```php
$s = '_SERVER';
var_dump($s); // Output: NULL
var_dump($$s); // Output: string(7) "_SERVER"
var_dump($$$s); // Output: the $_SERVER array
```

**Obfuscation Techniques:**
Using these basic techniques, you can obfuscate your payload in countless ways. It all depends on your imagination. Knowing how to obfuscate your payload using alternative methods is a valuable skill.

#### 2.4.2 Non-Alphanumeric Code
In PHP, similar to JavaScript, it is possible to write non-alphanumeric encoded code. While the mechanism is similar, there are differences due to the fact that PHP lacks some JavaScript functions and properties.

**Introduction:**
Gareth Hayes introduced this technique in his blog post "Non alphanumeric code in PHP" and a tutorial "PHP nonalpha tutorial."

- [Non alphanumeric code in PHP](http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/)
- [PHP nonalpha tutorial](http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/)

**2.4.2.1 Strings Generation**

**Arithmetic Operators:**
PHP follows Perl's convention for arithmetic operations on character variables:
```php
$§ = 'a';
$§++; // $§ = 'b'
$§ = 'z';
$§++; // $§ = 'aa'
$§ = 'A';
$§++; // $§ = 'B'
$§ = 'a1';
$§++; // $§ = 'a2'
```
Character variables can only be incremented, not decremented. Only plain ASCII alphabets and digits (a-z, A-Z, and 0-9) are supported:
```php
$§ = 'a';
$§--; // $§ = 'a'
$§ = 'è';
$§++; // $§ = 'è'
```

**Bitwise Operators:**
Bitwise operators can also be used on strings:
```php
echo 'A' & 'B'; // Output: @
echo 'A' | 'B'; // Output: C
echo 'A' ^ 'B'; // Output: U+0003 END OF TEXT
echo ~'A'; // Output: U+00BE VULGAR FRACTION THREE QUARTERS (¾)
```

**Using String Output of Native PHP Objects:**
```php
$a = []; // Create an empty array object
$a = $a . !![]; // Convert the array to string > "Array"
$_ = $__ = ![] & !![]; // true & false generates int(0) > 0
$__++; // Increment int(0) by one > 1
$_§ = $__§ = $a[$_]; // Access the position 0 of the "Array" string > "A"
$__§++; // Get the next char after A > "B"
echo $_§ | $__§; // Echoes A|B > "C"
```

**Curly Syntax and Other Techniques:**
Try to imagine how the curly syntax or other techniques we have seen could be useful with this method. Here’s a hint:
```php
$_ = "{";
echo ($_ ^ ";") . ($_ ^ "/"); // XOR Magic.. > GET
```

**2.4.2.2 Hackvertor.co.uk**
Hackvertor.co.uk provides two options to encode PHP in non-alphanumeric code. The following example encodes `phpinfo();` using the `phpnonalpha` option.

### References
- [Google URL Shortener](http://goo.gl/DpJnCq+)
- [Preview of TinyURL.com/ph7xh4m](http://preview.tinyurl.com/ph7xh4m)
- [Non-alphanumeric PHP Simple Backdoor | Spentera](http://web.archive.org/web/20160526025218/http://www.spentera.com/2011/09/non-alphanumeric-php-simple-backdoor/)
- [GitHub: JSFuck list](https://github.com/aemkei/jsfuck/blob/master/jsfuck.js)
- [How to Preview Shortened URLs (TinyURL, bit.ly, is.gd, and more)](http://security.thejoshmeister.com/2009/04/how-to-preview-shortened-urls-tinyurl.html)
- [t.co (Twitter)](http://t.co/)
- [RFC 3986](http://tools.ietf.org/html/rfc3986#page-16)
- [Hack.me](https://hack.me/)
- [IP Converter](http://www.silisoftware.com/tools/ipconverter.php)
- [New XSS vectors/Unusual Javascript](http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/read.php?2,15812,page=14)
- [jjencode demo](http://utf-8.jp/public/jjencode.html)
- [aaencode demo](http://utf-8.jp/public/aaencode.html)
- [JSFuck](http://www.jsfuck.com/)
- [YAUC Less chars needed to run arbitrary JS code = 6! (JS GREAT WALL)](http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/read.php?24,32930)
- [Examples of malicious javascript](http://aw-snap.info/articles/js-examples.php)
- [jQuery 2.1.0 minified](http://code.jquery.com/jquery-2.1.0.min.js)
- [What is the Closure Compiler?](https://developers.google.com/closure/compiler/)
- [YUI Compressor](http://yui.github.io/yuicompressor/)
- [JSMin](http://crockford.com/javascript/jsmin)
- [Packer](http://dean.edwards.name/packer/)
- [PHP Type Casting](http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting)
- [Non alphanumeric code in PHP](http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/)
- [PHP nonalpha tutorial](http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/)
- [Incrementing/Decrementing Operators](http://php.net/manual/en/language.operators.increment.php)
- [Bitwise Operators](http://www.php.net/manual/en/language.operators.bitwise.php)

---

This optimized version maintains the original content while improving clarity, coherence, and professional presentation.