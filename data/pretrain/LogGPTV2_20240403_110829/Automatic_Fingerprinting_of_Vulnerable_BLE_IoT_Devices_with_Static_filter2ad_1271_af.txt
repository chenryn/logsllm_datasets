leverage them to fingerprint the device, the time window for the
attack is quite narrow. After the first connection is established (Step
3), a dynamic UUID will be generated (Step 4). Since there are nearly
2128 possible UUIDs in theory, a random function would be able to
generate a sufficient random UUID (impossible to be brute forced).
The generation can be deployed on mobile app, device firmware,
or even cloud server. In our design, we choose to generate the
dynamic UUIDs on the app side, since it is more cost-effective
(generation on firmware or cloud can bring additional energy or
network consumption).
(2) App-Device synchronization. When the dynamic UUIDs are
successfully generated, the next step is to synchronize them on
both the app and the device so that they can agree on using them
for future broadcast and communication. To achieve this, the app
sends the dynamic UUIDs to the device (Step 5). When the device
receives the dynamic UUID, it responses back to the app to inform
the success of synchronization, and starts to use dynamic UUIDs
for broadcast and communication instead of the default UUIDs fin-
gerprintable by attackers (Step 6). Similarly, if the dynamic UUIDs
are generated on the device or cloud, the synchronization can be
implemented correspondingly.
(3) Cloud synchronization. In typical IoT scenarios, a BLE device
usually needs to be connected with multiple companion apps, since
an IoT device (e.g., a smart home device) can have several legiti-
mate users. Therefore, we introduce a cloud synchronization step
to save the dynamic generated UUIDs to the cloud (Step 7). Multiple
apps can share a BLE device by using the same dynamic UUIDs on
the cloud. As a result, in order to establish a connection after the
dynamic UUIDs have been generated, an app will first synchronize
the dynamic UUIDs and leverage them to establish a connection
(Step 8-11). Moreover, cloud synchronization also prevents regen-
erate dynamic UUIDs for each connection, which is vulnerable to
fingerprinting attack as previously discussed.
Implementation and Deployment. To prove the above scheme
is viable, we have implemented a prototype using a real BLE chip
in a software development board with series number “nRF52-DK”.
Specifically, this chip provides programming interfaces to configure
UUIDs for advertisement packets, services, characteristics, and
descriptors. It should be quite common for chip manufactures to
provide such an interface, since each specific IoT device vendor
needs to configure the UUIDs during the firmware development.
With less than 500 LOC in both the mobile app and device firmware,
we implemented the above proposed scheme, and tested it works as
expected. To deploy our scheme, it requires software updates at both
mobile apps and device firmware. This is actually consistent with
today’s IoT software ecosystem in which both app and firmware
can be upgraded.
Figure 6: A practical dynamic UUID defense without hard-
ware modification.
8 DISCUSSION
8.1 Limitation and Future Work
While BleScope has identified a great number of UUIDs and vul-
nerable IoT apps, there are still limitations that can be improved.
First, when recognizing flawed authentication in mobile apps, Ble-
Scope applies a very strict rule which requires all the data to be sent
should be hardcoded. As a matter of fact, this causes false negatives
since we are not able to identify which data is the authentication
credential. As a result, although some apps allow external input
to be sent to the peripherals, it does not necessarily mean that the
data is for authentication. For example, some network return data
is only for firmware update, but unfortunately we cannot figure out
in an automatic way to distinguish them. With a more sophisticated
approach in the future, we may be able to precisely identify these
vulnerable apps as well.
In addition, our backward slicing attempts to exhaustively ex-
plore all possible branches, which may cause branch explosion. If
so, we will terminate our analysis for such apps, leading to another
false negatives. One cause for the branch explosion is that Android
apps are developed using object-oriented programming, with which
the callers of some inherited object instances can only be deter-
mined at run-time. Therefore, our algorithm has to exhaustively
search for all potential callers from its super classes in these cases,
thereby causing branch explosion. One of our future works will
attempt to address this problem.
Finally, in our scanning experiment we only obtained the public
service UUIDs from the advertisement packets for fingerprinting.
As a result, the fingerprint results we have obtained are not that
precise, since in §5 we mention that hierarchy of UUIDs could
precisely determine a device in the field test. Due to ethical reasons,
it is impossible for us to reconstruct the hierarchy of UUIDs because
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1481it requires connection to devices. However, the attack is still possible
for real attackers since they do not have ethical considerations.
8.2 Ethics Consideration
Since our experiment is conducted on real IoT devices which contain
sensitive and private user information, we never exploit any of the
vulnerabilities due to ethics consideration. Also, we never actively
connect with any of the devices and only passively scanned the
advertised packets to obtain UUIDs, which is public to all. As a result,
as stated in §6.2, we only collected those service UUIDs exposed
in the advertised BLE packets. Therefore, we never evaluated the
hierahical UUIDs for the fingerprinting (only tested with our own
BLE devices), since it requires connection to fetch the next layer
UUIDs from the device.
Responsible Disclosure. We have reported the BLE IoT device
fingerprinting with static UUIDs to the Bluthooth SIG. We have
also reported the vulnerabilities to the developers of the vulnerable
apps based on their contact information from Google Play.
9 RELATED WORK
IoT security. Recently, there were significant amount of efforts
in IoT security. These efforts have uncovered numerous vulnera-
bilities of various IoT devices including BLE ones such as bands,
watches, smart locks, and smart homes [14–18, 21, 23, 25, 36, 42].
Typical vulnerabilities are pairing credential leakage [16, 17], un-
changed address [14, 18], unencrypted channel [42], information
leakage [18], privilege misconfiguration [21, 23], and even memory
corruptions [15]. These insecure devices expose attack surfaces to
nearby attackers with various attacks such as man-in-the-middle
(MITM), denial-of-service (DoS), location tracking, and even gain
unauthorized access. Compared to these efforts, which usually focus
on several devices of the same category with a relatively small scale,
our research systematically studies all kinds of BLE IoT devices in
the market from the perspective of companion mobile apps.
There are also defenses against the emerging security problems
in the IoT area, such as SmartAuth [34], FlowFence [22], a gateway
based system [19] and BLE-Guardian [20], which defend against
MITM attacks, information leakage, and unauthorized accesses.
BleScope is inspired by these works and we enrich them with more
systematic countermeasures.
BLE security. While there are a great amount of effort on IoT secu-
rity, only a handful of them focused on BLE security. In particular,
Ryan et al. studied the insecure pairing protocol for the LE legacy
connection in BLE 4.0 and 4.1, and demonstrated that it is vulnera-
ble to eavesdropping [30], which made the Bluthooth SIG patch this
vulnerability in later versions [1]. More recently, researches have
targeted latest BLE generations to uncover vulnerabilities, such
as the MITM attack on Passkey Entry pairing protocol [32, 33],
brute-force attack to calculate long term key [41]. In our work, we
study a unique and interesting problem: fingerprinting BLE devices
with static UUIDs available in mobile apps.
Vulnerability discovery based on mobile apps analysis. In the
past several years, there are tremendous efforts of uncovering vul-
nerabilities based on mobile app analysis by using techniques such
as taint analysis. The vulnerabilities discovered could be just in the
phone (e.g., privacy sensitive data such as address book leakage
by Flowdroid [11] and Amandroid [37]), or in the server (e.g., vul-
nerable authentication [44] and authorization [45], or cloud data
leakage [43], or missing security check [28], or lack of software
updates [10]) to which the app communicates. BleScope comple-
ments with these works by identifying vulnerabilities in both BLE
IoT devices and companion mobile apps.
10 CONCLUSION
We have presented BleScope, a tool to fingerprint BLE devices
by using static UUIDs extracted from the companion mobile apps.
As a side product, it also identifies the vulnerable apps that do
not have any user authentication with the devices. We have tested
BleScope with 18, 166 apps from Google Play, and it discovered
168, 093 UUIDs (13, 566 unique) and 1, 757 vulnerable apps among
them. With the harvested UUIDs and vulnerable apps, we conducted
a field test in a 1.28 square miles area, and BleScope discovered
5, 822 BLE devices and fingerprinted 5, 509 (94.6%) of them. Among
the identified devices, 431 (7.4%) of them are vulnerable to attacks
including sniffing and unauthorized access.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their helpful
feedbacks. This research was supported in part by NSF awards
1718084, 1750809, 1834215, and 1834216. Any opinions, findings,
conclusions, or recommendations expressed are those of the authors
and not necessarily of the NSF.
REFERENCES
[1] 2014. BLUETOOTH SPECIFICATION Version 4.2. https://www.bluetooth.org/
DocMan/handlers/DownloadDoc.ashx?doc_id=286439.
[2] 2017. Bluetooth Pairing Part 4: LE SecureConnections. https://www.bluetooth.
com/blog/bluetooth-pairing-part-4/.
[3] 2019. 16 Bit UUIDs for Members. https://www.bluetooth.com/specifications/
assigned-numbers/16-bit-uuids-for-members/.
[4] 2019. BLE Advertising Primer. https://www.argenox.com/library/bluetooth-low-
energy/ble-advertising-primer/.
[5] 2019. BluetoothDevice | Android Developers. https://developer.android.com/
[6] 2019.
reference/android/bluetooth/BluetoothDevice.
BluetoothGatt | Android Developers.
specifications/gatt/generic-attributes-overview/.
https://www.bluetooth.com/
[7] 2019. GATT Overview | Bluetooth Technology Website. https://developer.android.
com/reference/android/bluetooth/BluetoothGatt.
[8] 2019. Parani-UD100 Bluetooth 4.0 Class1 USB Adapter. http://www.senanetworks.
com/ud100-g03.html.
[9] 2019. Soot - a framework for analyzing and transforming java and android
applications. http://sable.github.io/soot/.
[10] Omar Alrawi, Chaoshun Zuo, Ruian Duan, Ranjita Kasturi, Zhiqiang Lin, and
Brendan Saltaformaggio. 2019. The Betrayal At Cloud City: An Empirical Analysis
Of Cloud-Based Mobile Backends. In 28th USENIX Security Symposium (USENIX
Security 19).
[11] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flow-
Droid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint
Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI ’14). ACM, New
York, NY, USA, 259–269. https://doi.org/10.1145/2594291.2594299
[12] Gogul Balakrishnan and Thomas Reps. 2004. Analyzing memory accesses in x86
executables. In International conference on compiler construction. Springer, 5–23.
[13] BlueBorne. 2019. The Attack Vector "BlueBorne" Exposes Almost Every Con-
nected Device. https://armis.com/blueborne/.
[14] Redjem Bouhenguel, Imad Mahgoub, and Mohammad Ilyas. 2008. Bluetooth
security in wearable computing applications. In 2008 international symposium on
high capacity optical networks and enabling technologies. IEEE, 182–186.
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1482[15] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan
Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through App-
based Fuzzing.. In NDSS.
of security vulnerabilities in wearable devices. (2017).
[16] Brian Cusack, Bryce Antony, Gerard Ward, and Shaunak Mody. 2017. Assessment
[17] Britt Cyr, Webb Horn, Daniela Miao, and Michael Specter. 2014. Security analysis
of wearable fitness devices (fitbit). Massachusets Institute of Technology (2014), 1.
[18] Aveek K Das, Parth H Pathak, Chen-Nee Chuah, and Prasant Mohapatra. 2016.
Uncovering privacy leakage in ble network traffic of wearable fitness trackers. In
Proceedings of the 17th International Workshop on Mobile Computing Systems and
Applications. ACM, 99–104.
[19] Charalampos Doukas, Ilias Maglogiannis, Vassiliki Koufi, Flora Malamateniou,
and George Vassilacopoulos. 2012. Enabling data protection through PKI en-
cryption in IoT m-Health devices. In 2012 IEEE 12th International Conference on
Bioinformatics & Bioengineering (BIBE). IEEE, 25–29.
[20] Kassem Fawaz, Kyu-Han Kim, and Kang G Shin. 2016. Protecting Privacy of
BLE Device Users. In 25th USENIX Security Symposium (USENIX Security 16).
1205–1221.
[21] Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. 2016. Security analysis
of emerging smart home applications. In 2016 IEEE symposium on security and
privacy (SP). IEEE, 636–654.
[22] Earlence Fernandes, Justin Paupore, Amir Rahmati, Daniel Simionato, Mauro
Conti, and Atul Prakash. 2016. Flowfence: Practical data protection for emerging
iot application frameworks. In 25th USENIX Security Symposium (USENIX Security
16). 531–548.
[23] Grant Ho, Derek Leung, Pratyush Mishra, Ashkan Hosseini, Dawn Song, and
David Wagner. 2016. Smart locks: Lessons for securing commodity internet of
things devices. In Proceedings of the 11th ACM on Asia conference on computer
and communications security. ACM, 461–472.
[24] Sławomir Jasek. 2016. Gattacking Bluetooth smart devices. In Black Hat USA
Conference.
[25] Arun Cyril Jose and Reza Malekian. 2015. Smart home automation security.
SmartCR 5, 4 (2015), 269–285.
[26] Raghavan Komondoor and Susan Horwitz. 2001. Using slicing to identify du-
plication in source code. In International static analysis symposium. Springer,
40–56.
[27] TAL MELAMED. 2018. An Active Man-in-the-middle Attack On Bluetooth Smart
Devices. Safety and Security Studies (2018), 15.
[28] Abner Mendoza and Guofei Gu. 2018. Mobile Application Web API Reconnais-
sance: Web-to-Mobile Inconsistencies and Vulnerabilities. In Proceedings of the
39th IEEE Symposium on Security and Privacy (SP’18).
[29] William Oliff, Avgoustinos Filippoupolitis, and George Loukas. 2017. Evaluat-
ing the impact of malicious spoofing attacks on Bluetooth low energy based
occupancy detection systems. In Software Engineering Research, Management and
Applications (SERA), 2017 IEEE 15th International Conference on. IEEE, 379–385.
[30] Mike Ryan. 2013. Bluetooth: With Low Energy Comes Low Security. In Proceed-
ings of the 7th USENIX Conference on Offensive Technologies (WOOT’13). USENIX
Association, Berkeley, CA, USA, 4–4. http://dl.acm.org/citation.cfm?id=2534748.
2534754
[31] Pallavi Sivakumaran and Jorge Blasco. 2018. A Study of the Feasibility of Co-
located App Attacks against BLE and a Large-Scale Analysis of the Current
Application-Layer Security Landscape.
[32] Pallavi Sivakumaran and Jorge Blasco Alis. 2018. A Low Energy Profile: Analysing
Characteristic Security on BLE Peripherals. In Proceedings of the Eighth ACM
Conference on Data and Application Security and Privacy. ACM, 152–154.
[33] Da-Zhi Sun, Yi Mu, and Willy Susilo. 2018. Man-in-the-middle attacks on Secure
Simple Pairing in Bluetooth standard V5. 0 and its countermeasure. Personal and
Ubiquitous Computing 22, 1 (2018), 55–67.
[34] Yuan Tian, Nan Zhang, Yueh-Hsun Lin, XiaoFeng Wang, Blase Ur, Xianzheng
Guo, and Patrick Tague. 2017. Smartauth: User-centered authorization for the
internet of things. In 26th USENIX Security Symposium (USENIX Security 17).
361–378.
[35] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and
Dinghao Wu. 2018. Software protection on the go: A large-scale empirical study
on mobile app obfuscation. In Proceedings of the 40th International Conference on
Software Engineering. ACM, 26–36.
[36] Xueqiang Wang, Yuqiong Sun, Susanta Nanda, and XiaoFeng Wang. 2019. Look-
ing from the Mirror: Evaluating IoT Device Security through Mobile Companion
Apps. In 28th USENIX Security Symposium (USENIX Security 19). 1151–1167.
[37] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise
and general inter-component data flow analysis framework for security vetting
of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 1329–1341.
[38] Mark Weiser. 1981. Program slicing. In Proceedings of the 5th international
conference on Software engineering. IEEE Press, 439–449.
[39] Tae-Hun Woo, Hwa-Ju Jo, Yong-Hwan Lee, and Sung-Young Kim. 2017. Infant
Body Temperature Monitoring System using Temperature Change Detection
Algorithm. In Proceedings of the 2017 International Conference on Computer Science
and Artificial Intelligence. ACM, 270–274.
[40] Bin Yu, Lisheng Xu, and Yongxu Li. 2012. Bluetooth Low Energy (BLE) based mo-
bile electrocardiogram monitoring system. In 2012 IEEE International Conference
on Information and Automation. IEEE, 763–767.
[41] Wondimu K Zegeye. 2015. Exploiting Bluetooth low energy pairing vulnerability
in telemedicine. In International Telemetering Conference Proceedings. Interna-
tional Foundation for Telemetering.
[42] Qiaoyang Zhang and Zhiyao Liang. 2017. Security analysis of bluetooth low
energy based smart wristbands. In Frontiers of Sensors Technologies (ICFST), 2017
2nd International Conference on. IEEE, 421–425.
[43] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. 2019. Why Does Your Data
Leak? Uncovering the Data Leakage in Cloud From Mobile Apps. In Proceedings
of the 2019 IEEE Symposium on Security and Privacy. San Francisco, CA.
[44] Chaoshun Zuo, Wubing Wang, Rui Wang, and Zhiqiang Lin. 2016. Automatic
Forgery of Cryptographically Consistent Messages to Identify Security Vul-
nerabilities in Mobile Services. In Proceedings of the 23rd Annual Network and
Distributed System Security Symposium (NDSS’16). San Diego, CA.
[45] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. 2017. AuthScope: Towards
Automatic Discovery of Vulnerable Authorizations in Online Services. In Pro-
ceedings of the 24th ACM Conference on Computer and Communications Security
(CCS’17). Dallas, TX.
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1483