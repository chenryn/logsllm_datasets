title:How to Choose Suitable Secure Multiparty Computation Using Generalized
SPDZ
author:Toshinori Araki and
Assi Barak and
Jun Furukawa and
Marcel Keller and
Kazuma Ohara and
Hikaru Tsuchida
Poster: How to Choose Suitable Secure Multiparty Computation
Using Generalized SPDZ
Toshinori Araki
NEC
PI:EMAIL
Marcel Keller
Data61
PI:EMAIL
Assi Barak
Bar-Ilan University
PI:EMAIL
Kazuma Ohara
NEC
PI:EMAIL
Jun Furukawa
NEC Israel Research Center
PI:EMAIL
Hikaru Tsuchida
NEC
PI:EMAIL
ABSTRACT
A variety of secure multiparty computation (MPC) protocols have
been proposed up to now. Since their performance characteristics
are incomparable, the most suitable MPC protocol may be com-
pletely different depending on the given computational task and
environment. It is tedious work to compare all the possibility to
choose the most suitable MPC. The paper “ Generalizing the SPDZ
Compiler For Other Protocols” in this ACM-CCS 2018 shows a
framework for adding MPC protocols to a development tool of
MPC program called “SPDZ”, which enables to compare multiple
protocols easily. This poster and demo show how this framework
is useful for choosing the suitable protocol for given target compu-
tation and environment.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; Cryp-
tography;
KEYWORDS
Secure multiparty computation; implementation
1 INTRODUCTION
Secure multiparty computation (MPC) enables a set of parties to
securely compute a joint function of their private inputs without
revealing anything but its output. In the past few years, MPC pro-
tocols have increased its efficiency by leaps and bounds. These
improvements enabled to carry out large-scale privacy-preserving
computations such as a Kerberos authentication for a huge number
of clients. However, each MPC computation requires a dedicated
boolean or arithmetic circuit, and its design requires expertise in
optimizing MPC.
To simplify this design process, several projects enabled to com-
pile from a high-level language, such as C, Python, or domain-
specific language, into an MPC circuit. SPDZ-2 is one of them, and
it consists of two components. One is a compiler that compiles
an extended Python code into an MPC circuit, while the other is
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5693-0/18/10.
https://doi.org/10.1145/3243734.3278510
a runtime that runs the compiled MPC circuit. Although SPDZ-2
is an effective tool, it is limited to protocols of SPDZ family. The
limitation was unfortunate because a variety of MPC protocols with
various performance characteristics have been proposed in recent
years. The best MPC protocol may be different depending on the
given computation and environment.
Therefore, we have generalized SPDZ-2 in two directions [1].
First, the compiler can now compile the same extended Python code
into circuits suited for different MPC protocols. Second, the runtime
can now run several different MPC protocols, such as a field-based
scheme [4], a ring-based scheme [1, 5, 6], and SPDZ-BMR [7]. This
allows to compare the performance of these protocols under the
same source code in various environments.
In [1], we demonstrated a limited comparison of protocols where
the ring/based scheme with a certain bit-decomposition protocol
performs better than others when the network features high band-
width and low delay. However, the comparison may be different
depending on the computation and the conditions. In this poster,
we are going to demonstrate how we can take advantage of our
generalized compiler to compare the same program, which the
developer can easily write in Python, in different protocols and
different network settings. This permits to easily choose the right
protocol for a given computation in a given environment from the
result of the comparison. With a little more engineering work, we
may even automatically change this choice when the environment
changes.
Besides what we demonstrate on site, we present one example of
comparison where different bit-decomposition (and its reverse) pro-
tocols are employed for various computations in different network
environments. Bit-decomposition protocols allow to convert from
a ring-based secret sharing, which is useful to represent integers,
fixed-point numbers, etc., to a bit-based secret sharing. This is a
very useful protocol in practical computation since both arithmetic
and binary circuits have their own advantages and disadvantages.
We presented several variants of bit-decomposition protocols in [1].
Since they have a different number of rounds and amount of com-
munication, it is natural that the performance of these protocols
differs considerably depending on the computational task and the
deployed network. The comparison shows the importance of the
choice of the bit-decomposition protocol as well as the suggestion
of the right choice.
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada21982 COMPARED RING-BASED PROTOCOLS
2.1 Ring-Based Protocols with
Bit-Decomposition and Recomposition
The family of ring-based protocols consists following operations
Ring Operations in Z2n : These are addition, multiplication,
and scalar multiplication of shared values in Z2n .
Bit Operations in Z2: These are XOR, AND, scalar AND op-
erations in Z2.
Bit-Decomposition of Z2n → (Z2)n: This converts a secret
sharing of x ∈ Z2n into a secret sharing of {x0, . . . , xn−1} ∈
Bit-recomposition of (Z2)n → (Z2n): This is the reverse op-
eration of bit-decomposition, which converts a secret sharing
of {x0, . . . , xn−1} ∈ Z2 into a secret sharing of x ∈ Z2n such
Bit-Injection of Z2 → (Z2n): This converts a secret sharing
Z2 such that x =n−1
that x =n−1
i =1 xi ∗ 2i.
i =1 xi ∗ 2i.
of x ∈ Z2 into a secret shared x ∈ Z2n .
Ring operations in Z2n require much less communication for addi-
tion and multiplication in Z2n compared to the same operation by
bit operations. However, operations such as comparison, division,
fixed-point multiplication, and many more cannot be directly re-
duced to the ring operations in Z2n . Bit-decomposition/recomposition
are very useful for carrying out these operations as they can con-
verts shares between Z2n and Z2. We understand that the above non-
trivial operations are rather crucial and are can quickly dominate
many computational tasks. We presented multiple bit-decomposition
and recomposition protocols with different performance character-
istics in [1].
x ∈ Z2 can be shared between three parties as x1, x2 and x3
such tath x = x1 ⊕ x2 ⊕ x3. The shares can be understood as
elements of Z2n , but the they will not necessarily sum up to x in
Z2n . Nevertheless, we can compute the canonical inclusion of x in
Z2n as follows:
x = x1 ⊕ x2 ⊕ x3
= x1 + x2 + x3 − 2x1x2 − 2x2x3 − 2x3x1 + 4x1x2x3
= x1 + x2 + x3 − 2x1(x2 + x3 − 2x2x3) − 2x2x3
This computation requires only two multiplications in Zn. There-
fore, we can construct a 2-round bit recomposition scheme (Bit-
Recomp2) by executing this bit injection scheme n times.
Table 1 summaries the costs of semihonest secure MPC protocols
for rings and various bit-decomposition and recomposition schemes.
For these protocols to be secure in the presence of malicious parties,
the technique introduced in [6] needs to be applied, which increases
the communication by a factor of seven.
Clearly, the relation between bandwidth and delay determines
the most efficient protocol.
Total comm. Rounds
Ring
Z264
Z2
Operation
Add/Sub
Muitiply
Scalar Mult.
XOR
AND
0 bit
192 bit
0 bit
0 bit
3 bit
378 bit
1, 344 bit
765 bit
378 bit
24, 576 bit
384 bit
0
1
0
0
3
64
8
13
64
2
2
Z264 → (Z2)64
Bit-Decomp. (1)
Z264 → (Z2)64
Bit-Decomp. (2)
Z264 → (Z2)64
Bit-Decomp. (3)
(Z2)64 → (Z64
2 ) Bit-Recomp. (1)
2 ) Bit-Recomp. (2)
(Z2)64 → (Z64
Z2 → (Z64
2 )
Bit-Injection
Table 1: Complexity of the ring based protocols (n=64)
effective. This is especially true for MPC programs because it allows
to batch the network communication. In CCS’16, Araki, et al. [5]
shows that a SIMD implementation for MPC protocols is efficacious
for achieving high throughput on Kerberos authentication. We
extended the SPDZ-2 runtime so that it can run in parallel by SIMD
approach.
We will now describe how we extended the program and show
its contribution to the performance by experiment.
2.2.1 Bytecodes and Compilation. The SPDZ compiler converts
the high-level program into an MPC circuit described as a sequence
of opcodes and operands. For example, we consider the following
simple addition of two secrets.
Listing 1: add.mpc
1
2
3
4
x = sint (10)
y = sint (20)
z = x+y
a = z. reveal () # a =10+20=30
The type name “sint” stands for “secret integer”, which means it
conceals the value by a secret sharing scheme. “z = a + b” instructs
MPC runtime to add “x” and “y”, and “reveal()” instructs it to re-
construct the resulting secret. The runtime stores the result in the
value “a“. Then, our generalized SPDZ compiler in [1] converts this
program into the following.
Listing 2: add.bc
1
2
3
4
5
ldsi s0 10
ldsi s1 20
adds s2 s0 s1
startopen s2
stopopen c0
2.2 Parallel Processing
It is common for an application to process a large number of the
same computation with different data. For example, a database often
filters a number of rows by the same rule within one or multiple
SQL queries. Similarly, an authentication server often identifies
multiple numbers of clients in a short time. For such simultaneous
processing, a “Single Instruction Multiple Data (SIMD)” approach is
The opcode “ldsi” instructs to load secret from an immediate. This
means that the constant values are assigned to the “s0” and “s1”,
which are virtual registers in the runtime. The opcode “adds” then
instructs to add the secrets. The opcodes for reconstructions are sep-
arated into two opcodes: startopen and stopopen, since this instruc-
tion requires communication between parties. The two opcodes ex-
ecute before-communication processing and after-communication
processing.
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada21992.2.2 Data Structure. For SIMD processing, the runtime reinter-
preted each register as of multiple data to be processed in parallel.
By this change of interpretation, the runtime can process multi-
ple inputs for a single instruction without recompilation of MPC
program.
The MPC runtime program takes the above same opcodes. Each
register used by opcodes are now of the class “Share” where T is
the appropriate implementation of mathematical structure required
for the MPC protocols. The following listing sketches the code of
the SIMD-compatible data structure for the ring-based protocol [1].
Listing 3: Share.cpp
class Share  {
T share1 [ MAX_BATCH_SIZE ];
T share2 [ MAX_BATCH_SIZE ];
int batch_size ; // actual # of values
...
}
1
2
3
4
5
6
Here, the share class has two fields for shares since the secret
sharing scheme for our ring-based protocol requires two elements
for sharing one value, and each of these two fields holds multiple
elements for the SIMD setting.
2.3 Experiment and Result
We ran US Census SQL query with 10 inputs [1] 1, 8, 32, and 64
times in parallel. To do so, we employed the bit-decomposition
protocols of (1), (2), (3) and bit-recomposition protocols of (1), (2)
in Table 1. The experiments were run with three servers connected
in two type of networks. One is a LAN of 10 Gbps with an average
ping latency of 0.16 msec. The other is a WAN of 50 Mbps with an
average ping latency of 100 msec (simulated by using Linux tc tool).
Each server has a Intel(R) Xeon(R) CPU E5-2697 v4 @ 2.30GHz with
128GBit memory. Figure 1 shows the dependency of processing
time on the number of batch size in the LAN environment, and
Figure 2 shows it in the WAN environment.
Figure 1: US Census SQL query with 10 inputs in LAN Envi-
ronment
According to Figure 1, in the LAN environment, bit-decomposition
(1) and bit-recomposition (1), i.e., communication-efficient proto-
cols, are more desirable. On the other hand, Figure 2 shows that
Figure 2: US Census SQL query with 10 inputs in WAN Envi-
ronment
bit-decomposotions (2), (3) and bit-recomposition (2), i.e., round-
efficient protocols in the WAN environment are more preferable for
small batches. However, Figure 2 also shows that communication-
efficient protocols are still more efficient when the batch size is
large even in the WAN environment.
3 CONCLUSION AND DEMO
Our experiments show how to choose the most suitable algorithm
by using the generalized SPDZ framework and comparing the per-
formance, This demonstrates how the proposed framework is useful
for finding the most efficient MPC protocol for a particular compu-
tation and setting. We are going to directly demonstrate at the demo
that we can easily edit, compile the program in various settings,
run the compiled programs by MPC and compare the performance.
We believe this demo demonstrates how easy the engineers can
evaluate their program in MPC environments.
REFERENCES
[1] T. Araki, A. Barak, J. Furukawa, M. Keller, Y. Lindell, K. Ohara and H. Tsuchida.
Generalizing the SPDZ Compiler For Other Protocols. To appear at ACM CCS
2018.
[2] Bristol Cryptography Group. Multiparty computation with SPDZ, MASCOT, and
Overdrive offline phases https://github.com/bristolcrypto/SPDZ-2
[3] I. Damgård, V. Pastro, N.P. Smart and S. Zakarias. Multiparty Computation from
Somewhat Homomorphic Encryption. In CRYPTO 2012, pages 643–662, 2012.
[4] Y. Lindell and A. Nof. A Framework for Constructing Fast MPC over Arithmetic
Circuits with Malicious Adversaries and an Honest-Majority. In the 24th ACM
CCS, pages 259–276, 2017.
[5] T. Araki, J. Furukawa, Y. Lindell, A. Nof and K. Ohara. High-Throughput Semi-
Honest Secure Three-Party Computation with an Honest Majority. In the 23rd
ACM CCS, pages 805–817, 2016.
[6] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman
and O. Weinstein. Optimized Honest-Majority MPC for Malicious Adversaries -
Breaking the 1 Billion-Gate Per Second Barrier. In the 38th IEEE Symposium on
Security and Privacy, pages 843–862, 2017.
[7] Marcel Keller, Valerio Pastro, and Dragos Rotaru. Overdrive: Making SPDZ great
again. In EUROCRYPT 2018, Springer (LNCS 10822), pages 158–189, 2018.
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2200