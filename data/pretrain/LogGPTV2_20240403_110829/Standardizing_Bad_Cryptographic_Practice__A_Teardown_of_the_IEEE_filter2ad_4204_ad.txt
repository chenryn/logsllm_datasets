tive in the first two bytes and start-comment directives in the last
two bytes, it allows us to insert any Verilog code in the rest of the
twelve bytes. We insert the Verilog code for the Trojan in these
twelve bytes in an incremental manner until the entire code is in-
serted. After that, we append the original ciphertext blocks. Note
that, we use the same C1 block for all victim blocks. Instead, we
could use any ciphertext block, provided we know its correspond-
ing plaintext. The Trojan-inserted ciphertext is given as follows.
C = IV ′ ∥ C1 ∥ A1 ∥ V1 ∥ A2 ∥ V2... ∥ Am ∥ Vm ∥ C2 ∥ ...Cn. Here, V1
= ... = Vm = C1, and m, n represent the number of attack/victim
blocks and original ciphertext blocks, respectively.
Defense. The defenses recommended for the SOA provide integrity
checks on the Data Block in particular, and the entire IP in general.
Hence, these defenses would stop the integrity attacks.
4.2 Trojan Insertion in Crypto-accelerator - II
In a global design process, authentication of participating IP authors
is of paramount importance. The P1735 standard does not address
this issue. Thus, it is trivial for an adversarial IP author (a rogue
employee of the SoC integrator) to insert a Trojan in its own IP.
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1541However, it can also target security-critical IP’s belonging to non-
adversarial IP authors.
In this attack, we first extract the plaintext IP, P using one of our
confidentiality attacks. Then we insert the Trojan, T in the plaintext
IP at any desired position. We then chose a random session key, K′,
and encrypt P′ (trojan-inserted IP) under the session key to get the
encrypted Data Block. After that, we encrypt the session key under
the public key of the tool to get the Key Block. The Data Block and
the Key Block are bundled together as per the standard to get the
digital envelope.
To defend against this, it would be sufficient to prevent the
recovery of the plaintext IP, i.e., apply the suggestions from Sec-
tion 3.
5 LICENSING ATTACKS
The standard specifies a rights management mechanism that can
control the amount of information the tool outputs during process-
ing of the encrypted IP, such as names and location of protected
variables during error reporting, output signals during simulation,
etc. It also describes a licensing mechanism that controls such
rights based on whether the IP user has the corresponding license
or not. The standard describes a protocol to implement the licensing
scheme. The protocol consists of 4 sub-protocols. Some of these
sub-protocols are vague, and give way to trivial attacks due to use
of AES-CBC with fixed IVs, and a poor authentication mechanism
of the license-request and license-response messages.
Threat model. The principals in this threat model are the IP user,
a proxy server controlled by the IP author, and the tool that parses
the IP for licenses to make license requests on behalf of the IP user.
The IP author and the tool are trustworthy entities; the IP user is
an adversary who does not have the valid license(s) and tries to get
access to protected sections of the IP cores.
The licensing protocol. The licensing protocol can be divided
into four sub-protocols: key exchange, license request, license re-
sponse, and heartbeat. The protocol as whole proceeds as follows.
The tool creates a socket connection with the proxy server and
runs a key exchange protocol to establish a shared key (K). For
each new license, it creates a new license id (LId), encrypts the
license request under the shared secret key (K) and license id as
the initialization vector, prepends the encrypted message with the
license id, and sends the message to the proxy server. The proxy
performs license validation and sends back a license grant/deny
response. The license id, which is unique for each license request,
is used by the proxy, as well as the tool, to distinguish between
multiple licenses.
The license-request, license-grant and license-deny messages
are prepended with the command byte ‘N’, ‘G’ and ‘D’ respectively,
before carrying out the encryption. In plaintext, these messages are
identical, except the optional application-specific string or denial
message that is appended to the grant/deny message. The resultant
encrypted text is referred to as “symbolic encrypted message” (de-
noted by L in Figure 8). The tag (‘N’, ‘G’ and ‘D’) in the first byte of
the plaintext makes the symbolic encrypted messages different, de-
spite being identical in the rest of the plaintext bytes. The standard
Figure 8: Format of different messages in the licensing protocol. (a)
Format of a symmetric key encrypted message. ‘X’ represents the
command byte, and can have values like ‘N’, ‘G’, or ‘D’. L represents
the symbolic encryption of license-abc. (b) and (c) show possible
formats for (I) new license-request, (II) license-grant, and (II) license-
deny messages. While in (b), the license id is prepended to the
encrypted message, in (c), it is prepended to the symbolic encrypted
message.
cites authentication of the request message in the grant or deny
response as the reason behind this design choice [13, Section 8].
A potential attack. In all protocols for license management, the
(symmetric-key encrypted) messages that are exchanged between
the proxy server and the tool have a specific format. See Figure
8(a). As per the standard, the license id should be prepended to
the “encrypted message” in each license-request, license-deny or
license-grant message. For example, the license-request message
(LR) for license-abc can be syntactically represented as LR ←
LId ∥ ELId
K (N ∥ license-abc), which can either be the symbolic en-
crypted message (L) or the entire encrypted message (L.Hi ∥ L.Lo
∥ ‘S’ ∥ Lid ∥ L). This is shown in Figure 8(b), and 8(c). A similar
situation holds for license-grant and license-deny messages, too.
Keep in mind tha E is CBC-mode over a particular blockcipher
(likely AES).
In Figure 8(b), the license id is prepended to the entire encrypted
message. As mentioned earlier, the license id is used to distinguish
between multiple licenses. So, while processing the license-request
message, the tool could parse the first two bytes to get the license id,
check if it is a replay, and close the socket in that case. This prevents
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1542further processing of the “symbolic encrypted message” (L). Other-
wise, if it is a new request, the proxy would call its decryption API
for symmetric messages. The API decrypts L, and returns the plain-
text (N ∥ license-abc) to the caller function. Next, the proxy checks
whether license-abc is valid, and sends an LG/LD message back to
the tool. Note that this decryption API for symmetric messages can
be used in other protocols as well.
Since, the symmetric message format ensures that the IV (=
license id) is always prepended to the “symbolic encrypted message”,
one could avoid prepending the IV to the entire encrypted message.
See Figure 8(c). However, the license id is used for detecting replays
and validating license requests. In this case, the decryption API for
symmetric messages has to be overloaded to return the decrypted
text and the IV. The IV, which is same as the license id, would be
used by the calling function to check for replays and validation.
While the two formats might seem alike in terms of securing the
socket communication, it is not the case. The format in Figure 8(b)
is susceptible to a simple man-in-the-middle attack, where the IP
author could intercept an LD message from the proxy, and convert
(xor first byte of license id in the IV field of the LD message with
D ⊕ G) it into an LG message, and hence get through the license
check without actually having the particular license. Note that this
is a simple exploitation of CBC with fixed IV. On the contrary, the
format in Figure 8(c), inadvertently enforces an integrity check on
the IV (by checking the license-id for replays or modifications).
More attacks. The standard is also vague in the processing of
license grant/deny response sent by the proxy. It allows the proxy
server to send optional application-specific strings concatenated
with the license grant/deny response. But, it does not specify secu-
rity checks that need to be performed on these strings. Since there
is no integrity check on the CBC encrypted messages, an adversary
(say, a competing IP user) can append any number of random cipher
text blocks with the LG/LD responses. If the tool does not check the
length of the LG/LD messages, the tool could crash due to memory
overflow.
The standard requires that the proxy and the tool send periodic
heartbeats to each other to know whether the receiver is alive or
not. But, it does not specify how the heartbeat protocol behaves
after the tool sends a license request. If the proxy and the tool send
periodic heartbeats till the tool receives an LG/LD response from
the proxy, and the proxy gets back a license release or a new license
request, an adversary can cause a denial-of-service by just dropping
these response messages.
Defense. The standard could recommend the use of TLS 1.2 (or
higher version numbers) to exchange license requests and responses.
Also, it must explicitly define protocols for all stages - handshake,
license request, license response (grant and denial), and heartbeat.
6 EVALUATIONS
In this section, we evaluate the efficiency and accuracy of the
padding-oracle attack and the syntax-oracle attack on the P1735
standard. We used open source semiconductor IPs from OpenCores
[2], which is the largest site/community for the development of
open source semiconductor IPs. We chose the following IPs for
our benchmark — flipflop (FF), square-root arithmetic core (SQRT),
SHA-256 digest core (SHA), Fast Fourier Transform DSP core (FFT),
AES-128 crypto core (AES), Reed Solomon ECC core (RS), memory
controller core (MC), and CISC processor (CISC). These IPs have
different functionalities and range from small to industrial scale in
size. Some of these IPs are generally procured/licensed from third
party IP developers. We also selected the c7552 ISCAS benchmark
which represents a firm IP. Note that the POA and SOA work on
any semiconductor IP encrypted using the P1735 standard.
In the first step, we encrypted these IPs using the P1735 stan-
dard with an encryption script provided by Synopsys [3]. We then
execute our padding-oracle and syntax-oracle attacks. We ran our
experiments with Synopsys’ Synplify Premier EDA tool (Version
L-2016.09) installed on a CentOS virtual machine with 4 Intel core
processors (each with a clock speed of 2.2GHz), and 8GB RAM.
Padding-oracle attack. We ran the padding-oracle attack with
the optimizations that are inspired by the syntax-oracle attack (see
Section 3.3). The aim of this attack was to decrypt the Data Block
of the encrypted IP, which acts as the ciphertext in this case. The
ciphertext was broken down into modules similar to the ABAO
optimization process in the SOA, except each module consisted of
two encrypted blocks instead of four. Since decryption precedes
syntax-check, padding errors are never concealed due to any syntax
errors. So, the target ciphertext block and its previous block are
sufficient to generate appropriate padding in the targeted plaintext
blocks.
In our experiment, the Synplify tool did not report any padding
error when the ciphertext blocks were tampered as per the padding-
oracle attack. But, it gives the warning “encrypted data mangled”.
We use this warning message to design our padding oracle. For
each guess, the ciphertext is modified and fed to the Synplify tool
for a syntax check. The tool writes all errors and warnings in the
“syntax.log” file. The presence/absence of the warning “encrypted
data mangled” in the log file is used as the padding oracle.
Table 2 shows the summary of the optimized POA on the 9
benchmark IPs. Figure 9(a) (red plot) shows the evaluation of time
as a function of the number of ciphertext blocks in a loglog plot,
whereas, Figure 9(b) (red plot) shows the accuracy of the POA. With
the ABAO optimization, the algorithmic complexity of the attack is
O (N ), where N is the number of ciphertext blocks in the encrypted
IP. When the number of ciphertext blocks increases beyond 1,000
the tool seems to slow down, and this can be seen as a change in
slope of the plot after 1,000 blocks. We can overcome this partially
by breaking down a large IP into chunks of say, < 2, 000 blocks and
running the attack multiple times with these chunks. We did this
for the CISC and c7522 benchmark (last two points in the plot). The
accuracy, on the other hand, is nearly 100% for all the IPs.
Syntax-oracle attack. We ran our SOA with the ABAO optimiza-
tion on the nine benchmark IPs. Table 2 summarizes the result.
Figure 9(a) (blue plot) shows the evaluation of time as a function of
the number of ciphertext blocks. The plot has similar attributes as
the POA, except it is around 13 times faster. This can be observed
as the nearly constant width between the two plots in Figure 9.
Figure 9(b) shows the accuracy as a function of lines of code (LOC)
for SOA with ABAO optimization. In this case, the average accu-
racy is 85.3% with a standard deviation of 4.4%. We note that if we
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1543Table 2: Results for SOA and POA attacks.
# of Blocks
# of Lines
Time (sec)
Accuracy (%)
Time (sec)
Accuracy (%)
4
7
54.7
76.6
706.7
100
53
51
60.0
87.9
798.8
100
467
614
130.3
85.1
1677.4
100
653
440
165.9
87.3
1888.6
100
958
712
228.4
91.5
2484.3
100
1268
1374
287.3
84.6
3203.1
100
2225
1854
439.2
82.3
5575.0
100
SOA
POA
5071
2083
1065
83.1
100
9183
3858
2524
89.9
100
12990.163
25454.234
The authors show how an encrypted IP from FPGA technology can
be mapped to an ASIC technology. The proposed technique takes
the encrypted RTL code and synthesizes it to the plaintext netlist
using FPGA primitive. This FPGA implementation is then mapped
to an ASIC implementation. This technique does not reveal any
weakness of the P1735 standard as the authors did not consider
the fact that the IEEE P1735 standard has guidelines to encrypt the