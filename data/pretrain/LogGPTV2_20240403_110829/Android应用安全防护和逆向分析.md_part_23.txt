1）动态链接器通过call_array调用init_getString。
2）Init_getString首先调用getLibAddr方法，得到so文件在内存中的起始地址。
3）读取前52字节，即ELF头。通过e_shoff获得.mytext内存加载地址，ehdr.e_entry获取.mytext大小和所在内存块。
4）修改.mytext所在内存块的读写权限。
5）将\[e_shoff，e_shoff+size\]内存区域数据解密，即取反操作：\*content=\~（\*content）。
6）修改回内存区域的读写权限。
这里是对代码段的数据进行解密，需要写权限。如果对数据段的数据解密，是不需要更改权限而直接操作的。
[]{#084.xhtml}
#### 14.2 基于对so中的函数加密实现so加固 {.bodycontent-title2}
上一节介绍了对so中指定的section进行加密来实现对so加固方案。延续之前的内容来介绍一下如何对函数进行加密来实现加固。
##### 14.2.1 技术原理 {.bodycontent-title3}
本节内容和上一节有很多类似的地方，这里就不做太多的解释了。和上一节内容唯一的不同点就是如何找到指定的函数的偏移地址和大小。
那么先来了解一下so中函数的表现形式：在so文件中，每个函数的结构描述是存放在.dynsym段中的。每个函数的名称保存在.dynstr段中的，类似于之前说过的每个section的名称都保存在.shstrtab段中，所以在上一节中找到指定section的时候，就是通过每个section的sh_name字段到.shstrtab中寻找名字即可，而且知道.shstrtab这个section在头文件中是有一个index的，就是在所有段列表中的索引值，所以很好定位.shstrtab。
但是在本节内容中可能遇到一个问题，就是不能按照这种方式去查找指定函数名了，如下所示：
::: bodypic-c
![](OEBPS/Images/221-i.jpg){.calibre547}
:::
可能有的人意识到一个方法，就是可以通过section的type来获取.dynsym和.dynstr。看到上图中.dynsym类型是：DYNSYM，.dynstr类型是STRTAB，但是这种方法是不行的，因为这个type不是唯一的，也就说不同的section，type可能相同，没办法区分，比如.shstrtab和.dynstr的type都是STRTAB.其实从这里就知道这两个段的区别了：.shstrtab值存储段的名称，.dynstr是存储so中的所有符号名称。
那么该怎么办呢？这时候再去看一下so文件格式说明（参见第4章）。看到有一个.hash段，在上图中也可以看到的：由Elf32_Word对象组成的哈希表支持符号表访问。下面的例子有助于解释哈希表组织，如图14-8所示。
::: bodypic-c
![](OEBPS/Images/14a8-i.jpg){.calibre548}
:::
图14-8 符号表索引\
bucket数组包含nbucket个项目，chain数组包含nchain个项目，下标都是从0开始。bucket和chain中都保存符号表索引。chain表项和符号表存在对应。符号表项的数目应该和nchain相等，所以符号表的索引也可用来选取chain表项。哈希函数能够接受符号名并且返回一个可以用来计算bucket的索引。因此，如果哈希函数针对某个名字返回了数值X，则bucket\[X%nbucket\]给出了一个索引y，该索引可用于符号表，也可用于chain表。如果符号表项不是所需要的，那么chain\[y\]则给出了具有相同哈希值的下一个符号表项。可以沿着chain链一直搜索，直到所选中的符号表项包含了所需要的符号，或者chain项中包含值STN_UNDEF。
上面的描述感觉有点复杂，其实说的简单点就是：用目标函数名在用hash函数得到一个hash值，然后再做一些计算就可以得到这个函数在.dynsym段中这个函数对应的条目了。关于这个hash函数是公用的，在Android中的bonic/linker.c源码中也是可以找到的：
::: bodypic-c
![](OEBPS/Images/222-i.jpg){.calibre549}
:::
那么只要得到.hash段即可，但是怎么获取到这个section中呢？so中并没有对这个section进行数据结构的描述，有人可能想到了在上图中看到.hash段的type是HASH，那么再通过这个type来获取？但是之前说了，这个type不是唯一的，通过它来获取section是不靠谱的？那么该怎么办呢？这时候就要看一下程序头信息了，如下所示：
::: bodypic-c
![](OEBPS/Images/222-2-i.jpg){.calibre550}
:::
程序头信息是最后so被加载到内存中的映像描述，这里看到有一个.dynamic段。再看看so文件的装载视图和链接视图，如图14-9所示。
在之前也说过，so被加载到内存之后，就没有section了，对应的是segment，也就是程序头中描述的结构，而且一个segment可以包含多个section，相同的section可以被包含到不同的segment中。.dynamic段一般用于动态链接，所以.dynsym和.dynstr，.hash肯定包含在这里。可以解析了程序头信息之后，通过type获取到.dynamic程序头信息，然后获取到segment的偏移地址和大小，再进行解析成elf32_dyn结构。下面代码就是程序头的type类型和dyn结构描述，可以在elf.h中找到：
::: bodypic-c
![](OEBPS/Images/223-i.jpg){.calibre551}
:::
::: bodypic-c
![](OEBPS/Images/14a9-i.jpg){.calibre552}
:::
图14-9 so文件的装载视图和链接视图
这里的三个字段含义如下：
·d_tag：标示，标示这个dyn是什么类型，是.dynsym还是.dynstr等。
·d_val：section的大小。
·d_ptr：section的偏移地址。
细心的读者可能会发现一个问题，就是在这里寻找.dynamic也是通过类型的，然后再找到对应的section。这种方式和之前说的通过type来寻找section有两个不同之处：
·在程序头信息中，type标示.dynamic段是唯一的，所以可以通过type来进行寻找。
·看到上面的链接视图和装载视图发现，这种通过程序头中的信息来查找.dysym等section靠谱点，因为当so被加载到内存中，就不存在了section了，只有segment了。
##### 14.2.2 实现方案 {.bodycontent-title3}
本节用一个案例来展示so加固方法，即编写native程序直接返回字符串给Java层进行展示。需要做的是对Java_com_example_shelldemo2_MainActivity_getString函数进行加密。加密和解密都是基于装载视图实现。注意，被加密函数如果用static声明，那么函数是不会出现在.dynsym中，是无法在装载视图中通过函数名找到进行解密的。当然，也可以采用取巧方式，类似上节，把地址和长度信息写入so头中实现。Java_com_example_shelldemo2_MainActivity_getString需要被调用，那么一定是能在.dynsym找到的。
###### 1.加密流程 {.section-subtitle}
1）读取文件头，获取e_phoff、e_phentsize和e_phnum信息。
2）通过Elf32_Phdr中的p_type字段，找到DYNAMIC。从下图可以看出，其实DYNAMIC就是.dynamic
section。从p_offset和p_filesz字段得到文件中的起始位置和长度。
3）遍历.dynamic，找到.dynsym、.dynstr、.hash
section文件中的偏移和.dynstr的大小。在我的测试环境下，fedora
14和windows7 Cygwin
x64中elf.h定义.hash的d_tag标示是：DT_GNU_HASH；而安卓源码中的是：DT_HASH。
4）根据函数名称，计算hash值。
5）根据hash值，找到下标hash%nbuckets的bucket；根据bucket中的值，读取.dynsym中对应索引的Elf32_Sym符号；从符号的st_name索引找到在.dynstr中对应的字符串与函数名进行比较。若不等，则根据chain\[hash%nbuckets\]找下一个Elf32_Sym符号，直到找到或者chain终止为止。这里叙述得有些复杂，直接上代码表示：
::: bodypic-c
![](OEBPS/Images/224-i.jpg){.calibre553}
:::
6）找到函数对应的Elf32_Sym符号后，即可根据st_value和st_size字段找到函数的位置和大小。
7）后面的步骤就和上节相同了，这里就不赘述。
###### [2.解密流程]{.yanse} {.section-subtitle}
解密流程为加密逆过程，大体相同，只有一些细微的区别，具体如下：
·找到so文件在内存中的起始地址。
·通过so文件头找到Phdr；从Phdr找到PT_DYNAMIC后，需取p_vaddr和p_filesz字段，并非p_offset，这里需要注意。
·对内存区域数据的解密，也需要注意读写权限问题。
##### 14.2.3 代码实现 {.bodycontent-title3}
###### 1.native程序 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/224-2-i.jpg){.calibre554}
:::
::: bodypic-c
![](OEBPS/Images/225-i.jpg){.calibre555}
:::
代码逻辑和前一节的加密section中的代码类似，只是在寻找函数的地方有点不同，在加密的代码中说明一下。
###### 2.加密程序 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/225-2-i.jpg){.calibre556}
:::
::: bodypic-c
![](OEBPS/Images/226-i.jpg){.calibre557}
:::
解密程序需要说明一下。
1）定位到.dynamic的segment，解析成elf32_dyn结构信息：
::: bodypic-c
![](OEBPS/Images/226-2-i.jpg){.calibre364}
:::
::: bodypic-c
![](OEBPS/Images/227-i.jpg){.calibre558}
:::
这里有一个解析elf32_dyn结构：
::: bodypic-c
![](OEBPS/Images/227-2-i.jpg){.calibre559}
:::
需要注意的是，elf32_dyn中用到了联合体union结构，Java中是不存在这个类型的，所以需要了解这个联合体的含义，虽然是三个字段，但是大小是8个字节，而不是12字节。dyn.d_val和dyn.d_val是在一个联合体中的。
2）计算目标函数的hash值，得到函数的偏移值和大小：
::: bodypic-c
![](OEBPS/Images/227-3-i.jpg){.calibre560}
:::
::: bodypic-c
![](OEBPS/Images/228-i.jpg){.calibre561}
:::
逻辑有点绕，了解原理即可。其中nbucket和nchain、bucket\[i\]和chain\[i\]都是4个字节，它们的值就是目标函数在.dynsym中的位置。
上面对so中的函数加密成功了，那么下面来验证加密，直接使用IDA进行查看，如图14-10所示。
可以看到，加密的函数内容已经面目全非了，看不到信息了。比较加密前的文件，如图14-11所示。
[提示：]{.yanse}案例下载地址为[http://download.csdn.net/detail/jiangwei0910410003/9289009](http://download.csdn.net/detail/jiangwei0910410003/9289009){.calibre32
.pcalibre}
###### 3.测试Android项目 {.section-subtitle}
用加密之后的so文件来测试一下：
::: bodypic-c
![](OEBPS/Images/228-2-i.jpg){.calibre562}
:::
::: bodypic-c
![](OEBPS/Images/229-i.jpg){.calibre563}
:::
::: bodypic-c
![](OEBPS/Images/229-2-i.jpg){.calibre564}
:::
::: bodypic-c
![](OEBPS/Images/14a10-i.jpg){.calibre565}
:::
图14-10 IDA查看so文件
::: bodypic-c
![](OEBPS/Images/230-i.jpg){.calibre566}
:::
::: bodypic-c
![](OEBPS/Images/14a11-i.jpg){.calibre567}
:::
图14-11 加密前so的内容
运行结果如图14-12所示。
::: bodypic-c
![](OEBPS/Images/14a12-i.jpg){.calibre546}
:::
图14-12 运行结果\
[]{#085.xhtml}
#### 14.3 本章小结 {.bodycontent-title2}
本章主要介绍了通过加密so中的section和函数来实现加固功能，有了这个so加固方案之后，可以让App开发更加安全，破解难度加大。但是也不能说是绝对安全了，比如现在破解者在init_getString函数下断点，然后动态调试一下，就可以很轻易地破解了，而且通过dump出内存中运行的dex也是可以做到的。所以，没有绝对的安全，只有相对的攻防。
[]{#086.xhtml}
## 工具篇 {.bodycontent-title}
第15章 Android逆向分析基础
第16章 反编译神器apktool和Jadx
第17章 Hook神器Xposed
第18章 脱壳神器ZjDroid
第19章 Native层Hook神器Cydia Substrate
[]{#087.xhtml}
### 第15章 Android逆向分析基础 {.bodycontent-title1}
Android逆向技术不是陌生的话题，网上已经有很多资料，本章主要介绍一下关于逆向分析apk的时候需要做些什么。在逆向之前必须有好工具，其次是还需要掌握逆向的基本知识：smali语法和arm指令，能够大致读懂程序。
[]{#088.xhtml}
#### 15.1 逆向工具 {.bodycontent-title2}
这里介绍几个工具，而且这几个工具在后面的章节中都会用到。
###### 1.反编译利器apktool {.section-subtitle}
这个工具用Java语言写的，而且也是开源的，同时它是逆向的金钥匙，所以非常重要，而且现在很多apk为了防止被这个工具反编译，就针对这个工具的漏洞做了一层防护策略，如果要成功反编译各个apk的话，那么就必须看懂它的源码，然后针对具体反编译异常具体分析，修复异常即可。
###### 2.反编译姐妹花dex2jar+jd-gui {.section-subtitle}
这两个工具其实是辅助使用的，一般是直接解压apk得到classes.dex文件，使用dex2jar转化成jar文件，使用jd-gui来直接查看Java源码。
###### 3.反编译友好工具JEB和Jadx {.section-subtitle}
这两个工具其实是整合了上面两个工具的功能，让反编译实现了可视化操作，而且高效快捷，适合在快速分析apk内部信息的场景，也是不可或缺的工具。
###### 4.Hook神器Xposed框架 {.section-subtitle}
这个工具主要用于编写游戏外挂，获取应用关键数据此工具也可以算得上神器，有了它，逆向App就是手到擒来的事，用它可以把每个App的关键逻辑分析得非常清楚。
###### 5.Native Hook神器Cydia Substrate {.section-subtitle}
这个工具和上面的Xposed框架非常类似，但是这个工具除了可以Hook
Java层功能，还可以很方便地Hook
Native层功能。对于一些游戏和应用有so文件，可以利用这个框架进行hook
so中的指定函数功能。
###### 6.脱壳神器ZjDroid工具 {.section-subtitle}
现在很多应用为了安全，做了加固策略，那么逆向中有一个技术是脱壳就是针对加固策略的。所谓脱壳就是要把原本加固的应用进行解密，那么ZjDroid工具就是一款脱壳神器。这个工具其实是基于前面的Xposed框架编写的。
###### 7.堪称神器的工具IDA {.section-subtitle}
这个工具不用多解释了，如果说搞逆向不知道这个工具，那就等于还没有进入逆向的大门，比较可惜的是它是收费的。这个工具最厉害的地方就是它能够分析so文件，同时可以动态调试so，而且可以打开apk文件，dex文件也是不在话下的。
[]{#089.xhtml}