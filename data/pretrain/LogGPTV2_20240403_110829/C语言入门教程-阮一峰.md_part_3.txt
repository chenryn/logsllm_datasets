{}
⽤域⾥⾯声明的变量，只在当前代码块有效，代码块外部不可⻅。
int a = 12;
if (a == 12) {
int b = 99;
printf("%d %d\n", a, b);
}
printf("%d\n", a);
printf("%d\n", b);
上⾯例⼦中，变量 是在 代码块⾥⾯声明的，所以对于⼤括号外⾯的代码，这个变量是不存在的。
b if
代码块可以嵌套，即代码块内部还有代码块，这时就形成了多层的块作⽤域。它的规则是：内层代码块可
以使⽤外层声明的变量，但外层不可以使⽤内层声明的变量。如果内层的变量与外层同名，那么会在当前
作⽤域覆盖外层变量。
{
int i = 10;
{
int i = 20;
printf("%d\n", i);
}
printf("%d\n", i);
}
上⾯示例中，内层和外层都有⼀个变量 ，每个作⽤域都会优先使⽤当前作⽤域声明的 。
i i
最常⻅的块作⽤域就是函数，函数内部声明的变量，对于函数外部是不可⻅的。 循环也是⼀个块作⽤
for
域，循环变量只对循环体内部可⻅，外部是不可⻅的。
for (int i = 0; i 
⼩于运算符
=
⼩于等于运算符
 b;
a = b;
关系表达式通常返回 或 ，表示真伪。C 语⾔中， 表示伪，所有⾮零值表示真。⽐如， 返
0 1 0 20 > 12
回 ， 返回 。
1 12 > 20 0
关系表达式常⽤于 或 结构。
if while
if (x == 3) {
printf("x is 3.\n");
}
注意，相等运算符 与赋值运算符 是两个不⼀样的运算符，不要混淆。有时候，可能会不⼩⼼写出下
== =
⾯的代码，它可以运⾏，但很容易出现意料之外的结果。
if (x = 3) ...
上⾯示例中，原意是 ，但是不⼩⼼写成 。这个式⼦表示对变量 赋值 ，它的返回值为
x == 3 x = 3 x 3
，所以 判断总是为真。
3 if
为了防⽌出现这种错误，有的程序员喜欢将变量写在等号的右边。
if (3 == x) ...
这样的话，如果把 误写成 ，编译器就会报错。
== =
if (3 = x) ...
另⼀个需要避免的错误是，多个关系运算符不宜连⽤。
i  20)
printf("Doing something!\n");
上⾯示例中，只有 和 同时为真， 才会为真。
x  20 x  20
下⾯是否运算符的例⼦。
if (!(x = 12)
对于逻辑运算符来说，任何⾮零值都表示真，零值表示伪。⽐如， 会返回 ， 会返回
5 || 0 1 5 && 0
。
0
逻辑运算符还有⼀个特点，它总是先对左侧的表达式求值，再对右边的表达式求值，这个顺序是保证的。
如果左边的表达式满⾜逻辑运算符的条件，就不再对右边的表达式求值。这种情况称为 “短路”。
if (number != 0 && 12/number == 2)
上⾯示例中，如果 左侧的表达式（ ）为伪，即 等于 时，右侧的表达式