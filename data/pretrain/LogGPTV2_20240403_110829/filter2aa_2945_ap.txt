{
    Console.WriteLine(i);
    i++;
}
while (i < 10);
The break and continue statements
In Chapter 4, you saw how to use the break statement to jump out of a
switch statement. You can also use a break statement to jump out of the
body of an iteration statement. When you break out of a loop, the loop
exits immediately, and execution continues at the first statement that
follows the loop. Neither the update nor the continuation condition of
the loop is rerun.
In contrast, the continue statement causes the program to perform the
next iteration of the loop immediately (after reevaluating the Boolean
expression). Here’s another version of the example that writes the
Download from finelybook PI:EMAIL
215
values 0 through 9 to the console, this time using break and continue
statements:
Click here to view code image
int i = 0;
while (true)
{
    Console.WriteLine(i);
    i++;
    if (i < 10)
        continue;
    else
        break;
}
This code is absolutely ghastly. Many programming guidelines
recommend using continue cautiously or not at all because it is often
associated with hard-to-understand code. The behavior of continue is
also quite subtle. For example, if you execute a continue statement from
within a for statement, the update part runs before performing the next
iteration of the loop.
In the following exercise, you will write a do statement to convert a
positive decimal whole number to its string representation in octal notation.
The program is based on the following algorithm, which follows on a well-
known mathematical procedure:
Click here to view code image
store the decimal number in the variable dec
do the following
    divide dec by 8 and store the remainder
    set dec to the quotient from the previous step
while dec is not equal to zero
combine the values stored for the remainder for each calculation in
reverse order
For example, suppose that you want to convert the decimal number 999 to
octal. You perform the following steps:
1. Divide 999 by 8. The quotient is 124 and the remainder is 7.
2. Divide 124 by 8. The quotient is 15 and the remainder is 4.
Download from finelybook PI:EMAIL
216
3. Divide 15 by 8. The quotient is 1 and the remainder is 7.
4. Divide 1 by 8. The quotient is 0 and the remainder is 1.
5. Combine the values calculated for the remainder at each step in reverse
order. The result is 1747. This is the octal representation of the decimal
value 999.
Write a do statement
1. Using Visual Studio 2017, open the DoStatement solution, which is
located in the \Microsoft Press\VCSBS\Chapter 5\DoStatement folder in
your Documents folder.
2. Display the MainPage.xaml form in the Design View window.
The form contains a text box called number in which the user can enter a
decimal number. When the user clicks the Show Steps button, the octal
representation of the number entered is generated. The text box to the
right, called steps, shows the results of each stage of the calculation.
3. Display the code for MainPage.xaml.cs in the Code and Text Editor
window and locate the showStepsClick method.
This method runs when the user clicks the Show Steps button on the
form. Currently, it is empty.
4. Add the following statements shown in bold to the showStepsClick
method:
Click here to view code image
private void showStepsClick(object sender, RoutedEventArgs e)
{
    int amount = int.Parse(number.Text);
    steps.Text = "";
    string current = "";
}
The first statement converts the string value in the Text property of the
number text box into an int by using the Parse method of the int type
and stores it in a local variable called amount.
The second statement clears the text displayed in the lower text box by
Download from finelybook PI:EMAIL
217
setting its Text property to the empty string.
The third statement declares a string variable called current and
initializes it to the empty string. You will use this string to store the
digits generated at each iteration of the loop that is used to convert the
decimal number to its octal representation.
5. Add the following do statement (shown in bold) to the showStepsClick
method:
Click here to view code image
private void showStepsClick(object sender, RoutedEventArgs e)
{
    int amount = int.Parse(number.Text);
    steps.Text = "";
    string current = "";
    do
    {
        int nextDigit = amount % 8;
        amount /= 8;
        int digitCode = '0' + nextDigit;
        char digit = Convert.ToChar(digitCode);
        current = digit + current;
        steps.Text += current + "\n";
    }
    while (amount != 0);
}
The algorithm used here repeatedly performs integer arithmetic to divide
the amount variable by 8 and determine the remainder. The remainder
after each successive division constitutes the next digit in the string
being built. Eventually, when amount is reduced to 0, the loop finishes.
Notice that the body must run at least once. This behavior is exactly
what is required because even the number 0 has one octal digit.
Look more closely at the code; you will see that the first statement
executed by the do loop is this:
int nextDigit = amount % 8;
This statement declares an int variable called nextDigit and initializes it
to the remainder after dividing the value in amount by 8. This will be a
number somewhere between 0 and 7.
Download from finelybook PI:EMAIL
218
The next statement in the do loop is
amount /= 8;
This is a compound assignment statement and is equivalent to writing
amount = amount / 8;. If the value of amount is 999, the value of
amount after this statement runs is 124.
The next statement is this:
int digitCode = '0' + nextDigit;
This statement requires a little explanation. Characters have a unique
code according to the character set used by the operating system. In the
character sets frequently used by the Windows operating system, the
code for character “0” has integer value 48. The code for character “1” is
49, the code for character “2” is 50, and so on, up to the code for
character “9,” which has integer value 57. With C#, you can treat a
character as an integer and perform arithmetic on it, but when you do so,
C# uses the character’s code as the value. So the expression ‘0’ +
nextDigit actually results in a value somewhere between 48 and 55
(remember that nextDigit will be between 0 and 7), corresponding to the
code for the equivalent octal digit.
The fourth statement in the do loop is
Click here to view code image
char digit = Convert.ToChar(digitCode);
This statement declares a char variable called digit and initializes it to
the result of the Convert.ToChar(digitCode) method call. The
Convert.ToChar method takes an integer holding a character code and
returns the corresponding character. So, for example, if digitCode has
the value 54, Convert.ToChar(digitCode) returns the character ‘6’.
To summarize, the first four statements in the do loop have determined
the character representing the least-significant (rightmost) octal digit
corresponding to the number the user entered. The next task is to
prepend this digit to the string to be output, like this:
current = digit + current;
Download from finelybook PI:EMAIL
219
The next statement in the do loop is this:
steps.Text += current + "\n";
This statement adds to the steps text box the string containing the digits
produced so far for the octal representation of the number. It also
appends a newline character so that each stage of the conversion appears
on a separate line in the text box.
Finally, the condition in the while clause at the end of the loop is
evaluated:
while (amount != 0);
Because the value of amount is not yet 0, the loop performs another
iteration.
In the final exercise of this chapter, you will use the Visual Studio 2017
debugger to step through the previous do statement to help you understand
how it works.
Step through the do statement
1. In the Code and Text Editor window displaying the MainPage.xaml.cs
file, move the cursor to the first statement of the showStepsClick
method:
Click here to view code image
int amount = int.Parse(number.Text);
2. Right-click anywhere in the first statement, and then click Run To
Cursor.
3. When the form appears, type 999 in the number text box on the left, and
then click Show Steps.
The program stops, and you are placed in Visual Studio 2017 debug
mode. A yellow arrow in the left margin of the Code and Text Editor
window and yellow highlighting on the code indicates the current
statement.
4. In the window below the Code and Text Editor window, click the Locals
Download from finelybook PI:EMAIL
220
tab, as highlighted in the following image.
The Locals window displays the name, value, and type of the local
variables in the current method, including the amount local variable.
Notice that the value of amount is currently 0.
5. Display the Debug toolbar if it is not visible. (On the View menu, point
to Toolbars, and then click Debug.)
Download from finelybook PI:EMAIL
221
Note The commands on the Debug toolbar are also available on
the Debug menu displayed on the menu bar.
6. On the Debug toolbar, click the Step Into button.
The debugger runs the following statement:
int amount = int.Parse(number.Text);
The value of amount in the Locals window changes to 999, and the
yellow arrow moves to the next statement.
7. Click Step Into again.
The debugger runs this statement:
steps.Text = "";
This statement does not affect the Locals window because steps is a
control on the form and not a local variable. The yellow arrow moves to
the next statement.
8. Click Step Into.
The debugger runs the statement shown here:
string current = "";
The yellow arrow moves to the opening brace at the start of the do loop.
The do loop contains three local variables of its own: nextDigit,
digitCode, and digit. Notice that these local variables now appear in the
Locals window. The value of all three variables is initially set to 0.
9. Click Step Into.
The yellow arrow moves to the first statement within the do loop.
10. Click Step Into.
Download from finelybook PI:EMAIL
222
The debugger runs the following statement:
int nextDigit = amount % 8;
The value of nextDigit in the Locals window changes to 7. This is the
remainder after dividing 999 by 8.
11. Click Step Into.
The debugger runs this statement:
amount /= 8;
The value of amount changes to 124 in the Locals window.
12. Click Step Into.
The debugger runs this statement:
int digitCode = '0' + nextDigit;
The value of digitCode in the Locals window changes to 55. This is the
character code of the character “7” (48 + 7).
13. Click Step Into.
The debugger continues to this statement:
char digit = Convert.ToChar(digitCode);
The value of digit changes to “7” in the Locals window. The Locals
window shows char values using both the underlying numeric value (in
this case, 55) and also the character representation (“7”).
Note that in the Locals window, the value of the current variable is still
“”.
14. Click Step Into.
The debugger runs the following statement:
current = current + digit;
The value of current changes to “7” in the Locals window.
Download from finelybook PI:EMAIL
223
15. Click Step Into.
The debugger runs the statement shown here:
steps.Text += current + "\n";"
This statement displays the text “7” in the steps text box, followed by a
newline character to cause subsequent output to be displayed on the next
line in the text box. (The form is currently hidden behind Visual Studio,
so you won’t be able to see it.) The cursor moves to the closing brace at
the end of the do loop.
16. Click Step Into.
The yellow arrow moves to the while statement to evaluate whether the
do loop has completed or whether it should continue for another
iteration.
17. Click Step Into.
The debugger runs this statement:
while (amount != 0);
The value of amount is 124, the expression 124 != 0 evaluates to true,
so the do loop performs another iteration. The yellow arrow jumps back
to the opening brace at the start of the do loop.
18. Click Step Into.
The yellow arrow moves to the first statement within the do loop again.
19. Repeatedly click Step Into to step through the next three iterations of the
do loop and watch how the values of the variables change in the Locals
window.
20. At the end of the fourth iteration of the loop, the value of amount is 0
and the value of current is “1747”. The yellow arrow is on the while
condition at the end of the do loop:
while (amount != 0);
Because the value of amount is now 0, the expression amount != 0
Download from finelybook PI:EMAIL
224
evaluates to false, and the do loop should terminate.
21. Click Step Into.
The debugger runs the following statement:
while (amount != 0);
As predicted, the do loop finishes, and the yellow arrow moves to the
closing brace at the end of the showStepsClick method.
22. On the Debug menu, click Continue.
The form appears, displaying the four steps used to create the octal
representation of 999: 7, 47, 747, and 1747.
23. Return to Visual Studio 2017. On the Debug menu, click Stop
Debugging.
Summary
In this chapter, you learned how to use the compound assignment operators to
Download from finelybook PI:EMAIL
225
update numeric variables and append one string to another. You saw how to
use while, for, and do statements to execute code repeatedly while some
Boolean condition is true.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 6, “Managing errors and exceptions.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Add an amount to a variable
Use the compound addition
operator. For example:
variable += amount;
Subtract an amount from a variable
Use the compound subtraction
operator. For example:
variable -= amount;
Run one or more statements zero or more
times while a condition is true
Use a while statement. For
example:
Click here to view code image
int i = 0; while (i < 10)
{
    Console.WriteLine(i);
    i++;
}
Alternatively, use a for
statement. For example:
Click here to view code image
for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}
Download from finelybook PI:EMAIL
226
Repeatedly execute statements one or
more times
Use a do statement. For
example:
Click here to view code image
int i = 0;
do
{
    Console.WriteLine(i);
    i++;
}
while (i < 10);
Download from finelybook PI:EMAIL
227
CHAPTER 6
Managing errors and exceptions
After completing this chapter, you will be able to:
Handle exceptions by using the try, catch, and finally statements.
Control integer overflow by using the checked and unchecked
keywords.
Raise exceptions from your own methods by using the throw keyword.
Ensure that code always runs, even after an exception has occurred, by
using a finally block.
You have now seen the core C# statements that you need to know to
perform common tasks such as writing methods, declaring variables, using
operators to create values, writing if and switch statements to run code
selectively, and writing while, for, and do statements to run code repeatedly.
However, the previous chapters haven’t considered the possibility (or
probability) that things can go wrong.
It is very difficult to ensure that a piece of code always works as expected.
Failures can occur for a large number of reasons, many of which are beyond
your control as a programmer. Any applications that you write must be
capable of detecting failures and gracefully handling them, either by taking
the appropriate corrective actions or, if that is not possible, by reporting the
reasons for the failure in the clearest possible way to the user. In this final
chapter of Part I, you’ll learn how C# uses exceptions to signal that an error
has occurred and how to use the try, catch, and finally statements to catch and
handle the errors that these exceptions represent.
Download from finelybook PI:EMAIL
228
By the end of this chapter, you’ll have a solid foundation in all the
fundamental elements of C#, and you will build on this foundation in Part II.
Coping with errors
It’s a fact of life that bad things sometimes happen. Tires are punctured,
batteries run down, screwdrivers are never where you left them, and users of
your applications behave in unpredictable ways. In the world of computers,
hard disks become corrupt, other applications running on the same computer
as your program run amok and use up all the available memory, wireless
network connections disappear at the most awkward moment, and even
natural phenomena such as a nearby lightning strike can have an impact if it
causes a power outage or network failure. Errors can occur at almost any
stage when a program runs, and many errors might not actually be the fault of
your own application, so how do you detect them and attempt to recover?
Over the years, a number of mechanisms have evolved. A typical
approach adopted by older systems such as UNIX involved arranging for the
operating system to set a special global variable whenever a method failed.
Then, after each call to a method, you checked the global variable to see
whether the method succeeded. C# and most other modern object-oriented
languages don’t handle errors in this manner; it’s just too painful. Instead,
they use exceptions. If you want to write robust C# programs, you need to
know about exceptions.
Trying code and catching exceptions
Errors can happen at any time, and using traditional techniques to manually
add error-detecting code around every statement is cumbersome, time-
consuming, and error-prone in its own right. You can also lose sight of the
main flow of an application if each statement requires contorted error-
handling logic to manage each possible error that can occur at every stage.
Fortunately, C# makes it easy to separate the error-handling code from the
code that implements the primary logic of a program by using exceptions and
exception handlers. To write exception-aware programs, you need to do two
things:
Download from finelybook PI:EMAIL
229
Write your code within a try block (try is a C# keyword). When the
code runs, it attempts to execute all the statements in the try block, and
if none of the statements generates an exception, they all run, one after
the other, to completion. However, if an error condition occurs,
execution jumps out of the try block and into another piece of code
designed to catch and handle the exception—a catch handler.
Write one or more catch handlers (catch is another C# keyword)
immediately after the try block to handle any possible error conditions.
A catch handler is intended to capture and handle a specific type of
exception, and you can have multiple catch handlers after a try block,
each one designed to trap and process a specific exception. This
enables you to provide different handlers for the different errors that
could arise in the try block. If any one of the statements within the try
block causes an error, the runtime throws an exception. The runtime
then examines the catch handlers after the try block and transfers
control directly to the first matching handler.
Here’s an example of a try block that contains code that attempts to
convert strings that a user has typed in some text boxes on a form to integer
values. The code then calls a method to calculate a value and writes the result
to another text box. Converting a string to an integer requires that the string
contain a valid set of digits and not some arbitrary sequence of characters. If
the string contains invalid characters, the int.Parse method throws a
FormatException and execution transfers to the corresponding catch handler.