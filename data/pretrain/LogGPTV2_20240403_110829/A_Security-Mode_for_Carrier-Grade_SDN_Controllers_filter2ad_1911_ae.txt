### 9. 结论

本文提出了一种方法，以解决在最新的分布式、运营商级网络操作系统（NOS）架构中，SDN应用缺乏安全策略表达和执行的问题。这项研究的动机在于帮助NOS操作员审核第三方应用程序的权限需求，并对这些应用程序施加新的约束。我们引入了开发者指定的策略，这些策略定义了API需求，并在SDN应用清单中进行表达；同时，我们也引入了操作员指定的策略，以减少部署时同级应用之间的运行时冲突。

我们介绍了正在进行的工作，即集成首个分布式NOS安全子系统，以ONOS为参考平台。我们将对ONOS的安全模式扩展称为SM-ONOS。本文详细讨论了SM-ONOS的设计与实现，并对其性能进行了评估。结果表明，安全模式对性能的影响适中，在从1到7个NOS集群的策略执行机制测试中，观察到5%到20%的性能开销。SM-ONOS项目的完整实现已在ONOS Emu版本中提供。

### 致谢

本研究得到了三星电子有限公司软件研发中心的支持。
本材料基于美国国家科学基金会资助项目（资助号：1446426）。本文中的观点、发现及结论或建议仅代表作者个人观点，不一定反映美国国家科学基金会的观点。

### ONOS 应用权限

表1列出了ONOS应用权限的完整列表。更多详细信息请参阅[16]。

| 权限类型         | 描述                                      | 关联服务                       |
|------------------|-------------------------------------------|-------------------------------|
| APP_READ         | 读取应用信息的权限                          | Application Service            |
| APP_WRITE        | 注册新应用的权限                            | Core Service                   |
| APP_EVENT        | 接收应用生命周期事件的权限                  | Core Service                   |
| CONFIG_READ      | 读取配置属性的权限                          | ComponentConfig Service        |
| CONFIG_WRITE     | 写入配置属性的权限                          | NetworkConfig Service          |
| CLUSTER_READ     | 读取集群信息的权限                          | Cluster(Metadata) Service      |
| CLUSTER_WRITE    | 修改集群的权限                              | Leadership Service             |
| CLUSTER_EVENT    | 接收集群事件的权限                          | Mastership(Term) Service       |
| DEVICE_READ      | 读取设备信息的权限                          | Device (Clock) Service         |
| DEVICE_EVENT     | 接收设备事件的权限                          | Device Service                 |
| FLOWRULE_READ    | 读取流规则信息的权限                        | Flow Rule Service              |
| FLOWRULE_WRITE   | 添加/删除流规则的权限                       | Flow Rule Service              |
| FLOWRULE_EVENT   | 接收流规则事件的权限                        | Flow Objective Service         |
| GROUP_READ       | 读取组信息的权限                            | Group Service                  |
| GROUP_WRITE      | 修改组的权限                                | Group Service                  |
| GROUP_EVENT      | 接收组事件的权限                            | Group Service                  |
| HOST_READ        | 读取主机信息的权限                          | Host (Clock) Service           |
| HOST_WRITE       | 修改主机的权限                              | Host Service                   |
| HOST_EVENT       | 接收主机事件的权限                          | Host Service                   |
| INTENT_READ      | 读取意图信息的权限                          | Intent (Extention,Partition,Clock) Service |
| INTENT_WRITE     | 发布/移除意图的权限                         | Intent (Extention) Service     |
| INTENT_EVENT     | 处理意图事件的权限                          | Intent (Partition) Service     |
| LINK_READ        | 读取链路信息的权限                          | Link (Resource) Service        |
| LINK_WRITE       | 修改链路信息的权限                          | Label Resource Service         |
| LINK_EVENT       | 处理链路事件的权限                          | Link (Resource) Service        |
| PACKET_READ      | 读取数据包信息的权限                        | Packet Context                 |
| PACKET_WRITE     | 发送/阻塞数据包的权限                       | Packet Service                 |
| PACKET_EVENT     | 处理数据包事件的权限                        | Packet Context                 |
| PARTITION_READ   | 读取分区属性的权限                          | Partition Service              |
| PARTITION_EVENT  | 处理分区事件的权限                          | Partition Service              |
| REGION_READ      | 读取设备区域的权限                          | Region Service                 |
| RESOURCE_READ    | 读取资源信息的权限                          | Resource Service               |
| RESOURCE_WRITE   | 分配/释放资源的权限                         | Resource Service               |
| RESOURCE_EVENT   | 处理资源事件的权限                          | Resource Service               |
| STATISTIC_READ   | 访问流统计信息的权限                        | Statistic Service              |
| TOPOLOGY_READ    | 读取路径和拓扑信息的权限                    | Topology Service               |
| TOPOLOGY_EVENT   | 处理拓扑事件的权限                          | Topology Service               |
| TUNNEL_READ      | 读取隧道信息的权限                          | Tunnel Service                 |
| TUNNEL_WRITE     | 修改隧道属性的权限                          | Tunnel Service                 |
| TUNNEL_EVENT     | 处理隧道事件的权限                          | Tunnel Service                 |
| STORAGE_WRITE    | 修改存储的权限                              | Storage Service                |

### 参考文献

[1] Onos system test. https://wiki.onosproject.org/display/ONOS/System+Tests.

[2] A Linux Foundation Collaborative Project. OpenDaylight SDN Controller. http://www.opendaylight.org.

[3] A. Al-Shabibi, M. De Leenheer, M. Gerola, A. Koshibe, G. Parulkar, E. Salvadori, and B. Snow. Openvirtex: Make your virtual sdns programmable. In Proceedings of the Third Workshop on Hot Topics in Software Defined Networking, HotSDN ’14, pages 25–30, New York, NY, USA, 2014. ACM.

[4] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide, B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, et al. ONOS: towards an open, distributed SDN OS. In Proceedings of the third workshop on Hot topics in software defined networking, pages 1–6. ACM, 2014.

[5] Z. Cai, A. L. Cox, and T. S. Eugene. Maestro-platform. https://code.google.com/p/maestro-platform/.

[6] B. Chandrasekaran and T. Benson. Tolerating sdn application failures with legosdn. In Proceedings of the 13th ACM Workshop on Hot Topics in Networks, HotNets-XIII, pages 22:1–22:7, New York, NY, USA, 2014. ACM.

[7] D. Erickson. The beacon openflow controller. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking, pages 13–18. ACM, 2013.

[8] FloodLight. Open SDN Controller. http://floodlight.openflowhub.org/.

[9] L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers. Going beyond the sandbox: An overview of the new security architecture in the java development kit 1.2. In USENIX Symposium on Internet Technologies and Systems, pages 103–112, 1997.

[10] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McKeown, and S. Shenker. NOX: Towards an Operating System for Networks. In Proceedings of ACM SIGCOMM Computer Communication Review, July 2008.

[11] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis: Static checking for networks. In Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12), pages 113–126, 2012.

[12] A. Khurshid, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: verifying network-wide invariants in real time. In Proceedings of the first workshop on Hot topics in software defined networks, HotSDN ’12, 2012.

[13] F. Klaedtke, G. O. Karame, R. Bifulco, and H. Cui. Access control for sdn controllers. In Proceedings of the Third Workshop on Hot Topics in Software Defined Networking, HotSDN ’14, pages 219–220, New York, NY, USA, 2014. ACM.

[14] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu, R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, et al. Onix: A Distributed Control Platform for Large-scale Production Networks. In OSDI, volume 10, pages 1–6, 2010.

[15] Open Networking Laboratory. Gossip Protocols. https://wiki.onosproject.org/display/ONOS/Network+Topology+State.

[16] Open Networking Laboratory. Security-Mode ONOS Wiki. https://wiki.onosproject.org/display/ONOS/Security-Mode+ONOS.

[17] The Apache Software Foundation. Apache Karaf. http://karaf.apache.org.

[18] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: enabling innovation in campus networks. SIGCOMM Comput. Commun. Rev., 38, March 2008.

[19] M. Monaco, O. Michel, and E. Keller. Applying Operating System Principles to SDN Controller Design. In Proceedings of the Twelfth ACM Workshop on Hot Topics in Networks, HotNets-XII, pages 2:1–2:7, New York, NY, USA, 2013. ACM.

[20] D. Ongaro and J. Ousterhout. In search of an understandable consensus algorithm. In Proceedings of the 2014 USENIX Conference on USENIX Annual Technical Conference, USENIX ATC’14, pages 305–320, Berkeley, CA, USA, 2014. USENIX Association.

[21] OSGi Alliance. Osgi specification. http://www.osgi.org/Specifications.

[22] N. Peter Loscocco. Integrating flexible support for security policies into the Linux operating system. In Proceedings of the FREENIX Track:... USENIX Annual Technical Conference, page 29. The Association, 2001.

[23] P. Porras, S. Cheung, M. Fong, K. Skinner, and V. Yegneswaran. Securing the Software-Defined Network Control Layer. In Proceedings of the 2015 Network and Distributed System Security Symposium (NDSS), February 2015.

[24] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A security enforcement kernel for OpenFlow networks. In Proceedings of the first workshop on Hot topics in software defined networks, HotSDN ’12, 2012.

[25] R. Sherwood, G. Gibb, K. K. Yap, and G. Appenzeller. Can the production network be the testbed. In Proceedings of USENIX Operating System Design and Implementation, OSDI, 2010.

[26] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran, J. Noh, and B. B. Kang. Rosemary: A robust, secure, and high-performance network operating system. In Proceedings of the 21th ACM Conference on Computer and Communications Security (CCS’14), November 2014.

[27] The Apache Software Foundation. Apache felix framework security. http://felix.apache.org/documentation/subprojects/apache-felix-framework-security.html.

[28] X. Wen, B. Yang, Y. Chen, C. Hu, Y. Wang, B. Liu, and X. Chen. SDNShield: Reconciliating configurable application permissions for SDN app markets. In