[13] describe an access control scheme for managing resources in
a network operating system. However, they provide limited im-
plementation details and do not consider the diverse permission
models discussed in this paper.
9 CONCLUSION
This paper presents an approach to addressing the existing ab-
sence of security policy expression and enforcement over SDN
applications within the latest breed of distributed, carrier-grade,
NOS architectures. This work is motivated by the need to assist
NOS operators in vetting the privilege requirements of third-party
applications and then imposing novel constraints on these appli-
cations. We introduce developer specified policies that define API
requirements, which are expressed in an SDN-application mani-
fest, and operator-specified policies that can reduce deployment-
specific runtime conflicts among peer applications. We then present
our ongoing efforts to integrate the first distributed NOS security
subsystem, using ONOS as a reference platform. We refer to our
security-mode extensions to ONOS as SM-ONOS. We discuss the
design and implementation of SM-ONOS, and present an evalu-
ation of its performance. Our results indicate that security-mode
imposes a reasonably moderate performance impact. In evaluations
that exercise the policy enforcement mechanisms from 1 to 7 NOS
clusters, we observe a 5 to 20% performance overhead. The full
implementation of the SM-ONOS project was made available in the
ONOS Emu release.
ACKNOWLEDGMENTS
This research was supported by Software R&D Center, Samsung
Electronics Co., Ltd.
This material is based upon work supported by the National Science
Foundation under Grant No. 1446426. Any opinions, findings, and
conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of
the National Science Foundation.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
A ONOS APPLICATION PERMISSIONS
C. Yoon et al.
Permission type
APP_READ
APP_WRITE
APP_EVENT
CONFIG_READ
CONFIG_WRITE
CLUSTER_READ
Description
Permission to read information about applications
Permission to register new application
Permission to receive application lifecycle events
Permission to read configuration properties
Permission to write configuration properties
Permission to read cluster information
CLUSTER_WRITE
CLUSTER_EVENT
Permission to modify the cluster
Permission receive cluster events
DEVICE_READ
DEVICE_EVENT
FLOWRULE_READ
FLOWRULE_WRITE
FLOWRULE_EVENT
GROUP_READ
GROUP_WRITE
GROUP_EVENT
HOST_READ
HOST_WRITE
HOST_EVENT
INTENT_READ
Permission to read device information
Permission receive device events
Permission to read flow rule information
Permission to add/remove flow rules
Permission receive flow rule events
Permission to read group information
Permission to modify groups
Permission to receive group events
Permission to read host information
Permission to modify host
Permission receive host events
Permission to read intent information
INTENT_WRITE
INTENT_EVENT
LINK_READ
LINK_WRITE
LINK_EVENT
PACKET_READ
Permission to issue/remove intents
Permission handle intent events
Permission to read link information
Permission to modify link information
Permission to handle link events
Permission to read packet information
PACKET_WRITE
Permission to send/block packet
PACKET_EVENT
PARTITION_READ
PARTITION_EVENT
REGION_READ
RESOURCE_READ
RESOURCE_WRITE
RESOURCE_EVENT
STATISTIC_READ
TOPOLOGY_READ
Permission to handle packet events
Permission to read partition properties
Permission to handle partition events
Permission to read region of devices
Permission to read resource information
Permission to allocate/release resource
Permission to handle resource events
Permission to access flow statistic information
Permission to read path and topology information
Associated services
Application Service
Core Service
Core Service
Application Service
ComponentConfig Service
NetworkConfig Service
ComponentConfig Service
NetworkConfig Service
Leadership Service
Cluster(Metadata) Service
Mastership(Term) Service
Leadership Service
Mastership Service
Leadership Service
Cluster Service
Mastership Service
Device (Clock) Service
Device Service
Flow Rule Service
Flow Rule Service
Flow Objective Service
Flow Rule Service
Group Service
Group Service
Group Service
Host (Clock) Service
Host Service
Host Service
Intent (Extention,Partition,Clock)
Service
Partition Service
Intent (Extention) Service
Intent (Partition) Service
Link (Resource) Service
Label Resource Service
Link Resource Service
Label Resource Service
Link (Resource) Service
Label Resource Service
Packet Context
Proxy Arp Service
Packet Service
Packet Context
Packet Service
Proxy Arp Service
Edge Port Service
Packet Service
Partition Service
Partition Service
Region Service
Resource Service
Resource Service
Resource Service
Statistic Service
Flow Statistics Service
Path Service
Topology Service
Edge Port Service
Topology Service
Tunnel Service
Tunnel Service
Tunnel Service
Storage Service
TOPOLOGY_EVENT
TUNNEL_READ
TUNNEL_WRITE
TUNNEL_EVENT
STORAGE_WRITE
Permission to handle topology events
Permission to read tunnel information
Permission to modify tunnel properties
Permission to handle tunnel events
Permission to modify storage
Table 1: ONOS Application Permissions (A complete list of the application permissions can be found on [16]).
A Security-Mode for Carrier-Grade SDN Controllers
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
Dependable Systems and Networks (DSN), 2016 46th Annual IEEE/IFIP International
Conference on, pages 121–132. IEEE, 2016.
REFERENCES
[1] Onos system test. https://wiki.onosproject.org/display/ONOS/System+Tests.
[2] A Linux Foundation Collaborative Project. OpenDaylight SDN Controller. http:
//www.opendaylight.org.
[3] A. Al-Shabibi, M. De Leenheer, M. Gerola, A. Koshibe, G. Parulkar, E. Salvadori,
and B. Snow. Openvirtex: Make your virtual sdns programmable. In Proceedings
of the Third Workshop on Hot Topics in Software Defined Networking, HotSDN ’14,
pages 25–30, New York, NY, USA, 2014. ACM.
[4] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide, B. Lantz,
B. O’Connor, P. Radoslavov, W. Snow, et al. ONOS: towards an open, distributed
SDN OS. In Proceedings of the third workshop on Hot topics in software defined
networking, pages 1–6. ACM, 2014.
[5] Z. Cai, A. L. Cox, and T. S. Eugene. Maestro-platform. https://code.google.com/
p/maestro-platform/.
[6] B. Chandrasekaran and T. Benson. Tolerating sdn application failures with
legosdn. In Proceedings of the 13th ACM Workshop on Hot Topics in Networks,
HotNets-XIII, pages 22:1–22:7, New York, NY, USA, 2014. ACM.
[7] D. Erickson. The beacon openflow controller. In Proceedings of the second ACM
SIGCOMM workshop on Hot topics in software defined networking, pages 13–18.
ACM, 2013.
[8] FloodLight. Open SDN Controller. http://floodlight.openflowhub.org/.
[9] L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers. Going beyond the
sandbox: An overview of the new security architecture in the java development
kit 1.2. In USENIX Symposium on Internet Technologies and Systems, pages 103–112,
1997.
[10] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McKeown, and S. Shenker.
In Proceedings of ACM
NOX: Towards an Operating System for Networks.
SIGCOMM Computer Communication Review, July 2008.
[11] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis: Static
checking for networks. In Presented as part of the 9th USENIX Symposium on
Networked Systems Design and Implementation (NSDI 12), pages 113–126, 2012.
[12] A. Khurshid, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: verifying network-
wide invariants in real time. In Proceedings of the first workshop on Hot topics in
software defined networks, HotSDN ’12, 2012.
[13] F. Klaedtke, G. O. Karame, R. Bifulco, and H. Cui. Access control for sdn controllers.
In Proceedings of the Third Workshop on Hot Topics in Software Defined Networking,
HotSDN ’14, pages 219–220, New York, NY, USA, 2014. ACM.
[14] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu, R. Ra-
manathan, Y. Iwata, H. Inoue, T. Hama, et al. Onix: A Distributed Control
Platform for Large-scale Production Networks. In OSDI, volume 10, pages 1–6,
2010.
[15] Open Networking Laboratory. Gossip Protocols. https://wiki.onosproject.org/
display/ONOS/Network+Topology+State.
[16] Open Networking Laboratory.
Security-Mode ONOS Wiki.
https://wiki.
onosproject.org/display/ONOS/Security-Mode+ONOS.
[17] The Apache Software Foundation. Apache Karaf. http://karaf.apache.org.
[18] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford,
S. Shenker, and J. Turner. OpenFlow: enabling innovation in campus networks.
SIGCOMM Comput. Commun. Rev., 38, March 2008.
[19] M. Monaco, O. Michel, and E. Keller. Applying Operating System Principles to
SDN Controller Design. In Proceedings of the Twelfth ACM Workshop on Hot
Topics in Networks, HotNets-XII, pages 2:1–2:7, New York, NY, USA, 2013. ACM.
[20] D. Ongaro and J. Ousterhout. In search of an understandable consensus algo-
rithm. In Proceedings of the 2014 USENIX Conference on USENIX Annual Technical
Conference, USENIX ATC’14, pages 305–320, Berkeley, CA, USA, 2014. USENIX
Association.
[21] OSGi Alliance. Osgi specification. http://www.osgi.org/Specifications.
[22] N. Peter Loscocco.
Integrating flexible support for security policies into the
Linux operating system. In Proceedings of the FREENIX Track:... USENIX Annual
Technical Conference, page 29. The Association, 2001.
[23] P. Porras, S. Cheung, M. Fong, K. Skinner, and V. Yegneswaran. Securing the
Software-Defined Network Control Layer. In Proceedings of the 2015 Network
and Distributed System Security Symposium (NDSS), February 2015.
[24] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A security
enforcement kernel for OpenFlow networks. In Proceedings of the first workshop
on Hot topics in software defined networks, HotSDN ’12, 2012.
[25] R. Sherwood, G. Gibb, K. K. Yap, and G. Appenzeller. Can the production net-
work be the testbed.
In Proceedings of USENIX Operating System Design and
Implementation, OSDI, 2010.
[26] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran, J. Noh,
and B. B. Kang. Rosemary: A robust, secure, and high-performance network
operating system. In Proceedings of the 21th ACM Conference on Computer and
Communications Security (CCS’14), November 2014.
[27] The Apache Software Foundation. Apache felix framework security. http://felix.
apache.org/documentation/subprojects/apache-felix-framework-security.html.
[28] X. Wen, B. Yang, Y. Chen, C. Hu, Y. Wang, B. Liu, and X. Chen. Sdnshield:
Reconciliating configurable application permissions for sdn app markets. In