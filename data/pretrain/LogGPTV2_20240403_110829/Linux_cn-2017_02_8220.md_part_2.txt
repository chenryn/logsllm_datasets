随便查下相关资料，你就可以了解编程语言的复杂性了，然后再根据自己的能力水平来决定先学习哪种编程语言。
选择编程语言的另一个方式是根据你的使用目的来决定，看看你身边的同事使用哪种编程语言。如果你是为了开发桌面环境的工具，你应该学习 C 语言和 Vala 语言，或者 C++ 语言。
总之，不要在各种编程语言之间不知所措。编程语言之间都是相通的。当你学好一种编程语言并能用它来解决工作中的一些实际问题的时候，你会发现学习另外一种编程语言更容易。毕竟，编程语言只是一些语法和相关规则的集合；学会一种编程语言后，再使用同样的方法去搞懂另外一种语言完全不是个事。
主要目的还是学会一种编程语言。选择一个比较适合自己或者你感兴趣的编程语言，或者是你的朋友在用的编程语言，或者是选择文档比较丰富，并且你理解起来也容易的编程语言，但是，最好是只关注并先学会其中的一种编程语言。
### 这是一个开源项目吗？
无论你是编程新手还是一个老司机，在你进入到开源新世界之前，你需要搞明白做开源软件的重要一点就是“开放源代码”。
最近一些厂商惯用的市场营销策略就是宣称他们的软件是开源的。然而，有些厂商只是发布了一个公共的 API 或者表示他们愿意接受其它开源用户提交的代码而已。“开源”这个词不是一个商标，并且也没有任何组织来决定怎么使用这个词。但是， Debian Linux 创造人 Ian Murdock 联合成立的   开放源代码促进会    （    Open Source Initiative    ） 对开源这个词进行了[定义](https://opensource.org/licenses)（授权“允许软件被用户自由地使用、随意修改及分享”），并且被正式批准和[授予](https://opensource.org/licenses/category)许可证的软件才属于真正的开源软件。
给你的软件代码应用一个开源许可证，你就成为一名开源程序员了。恭喜你！
### 开源社区
![](/data/attachment/album/201702/20/000909x23c6wp8skwmbkwm.png)
咨询任何开源软件爱好者，他们会告诉你开源软件最关键的是人。没有积极的开源贡献者，软件开发就会中止。计算机需要用户、提交缺陷的人、设计师及程序员。
如果你想加入全球开源社区为开源软件做贡献，你同样需要成为该社区的一个成员，即使你并不善于社交也不要紧。这通常包括订阅邮件列表、加入 IRC 频道，或者在论坛里表现活跃，从最低级别开始。任何成熟的开源社区都已经存在了足够长的时间，见惯了来来往往的人们，所以，在你真正融入这个世界、在他们接纳你之前，你需要证明出你并非流星一逝般的过客，如果你想要做成一件大事，那就得有长期投身于其中的打算。
如果你只是想给他们提供一些小的帮助，这也是可以接受的。我自己也提交一些小的补丁到一些项目中，有时候项目管理者会觉得这个更新比较好，有时候他们也会拒绝我提交的代码补丁。但是，如果这个被拒绝的补丁对我很重要，我就会为我自己和客户维护它，并一直维护下去。
这就是参与到开源项目。
但是这些社区在哪里呢？这个跟开源项目有关。有些项目有专职的社区管理员，他们会把所有的社区参与者招集到一个打大家都能访问的地方。有些项目则围绕论坛运行，他们使用邮件列表，或者使用问题追踪器与参与者联系。找到这些开源社区对你来说也不是个事儿。
还有个重要的事情就是研究他们的源代码。“开源”就是开放“源代码”，所以你可以把他们的代码拿来瞅瞅。尽管要全面了解他们的项目可能超乎你的能力，但是你可以知道这个项目是如何管理的，他们最可能需要帮助的是什么。关于代码是如何组织的？这些代码有注释吗？它们使用统一的程序风格吗？这些问题你可以查阅相关文档，尤其是 README、 LICENSE ，或者是 COPYING 这几个文件。
不要低估遵守开放源代码承诺的重要性。这是你被允许参与进来到开源项目来的原因，因此，你得深入地考虑下你能从中学习到什么，以及你将如何为该项目提供帮助。
找到最佳的开源社区更像是约妹子，尤其是更像在[《偷天情缘》](https://en.wikipedia.org/wiki/Groundhog_Day_(film))里的约会。这需要时间，并且刚开始那几次有可能会失败。你参与这样的聚会越多，你就越了解这些开源项目。最后，你会更了解自己，当你找到了与其它参与者融为一体的方式时，你就已经成功了。总之，你得要有耐心，一切顺其自然。
### 行动比语言更重要
![](/data/attachment/album/201702/20/000910ui0fmfwaimf9fw81.png)
作为一名开源程序员最重要的是写代码（开源中的“源”），任何想法都没多少意义。关键是把你的想法变成实际的东西。你要让大家都知道你在做什么、知道你不怕苦不怕累，也愿意在开源项目上花时间，并且能够通过编程的方式来实现自己的各种想法。
为了更高效地完成那些工作，你需要对开源项目做做功课，包括项目怎么样才能听取你的建议、哪个分支是稳定的哪个是开发的等等。
从下面几点开始：
* 熟悉一个项目及其协作开发的氛围，并且接受这种氛围。
* 编写软件升级包、缺陷修复包，或者一些小的功能需求，并且提交它们。
* 如果你提交的补丁被拒绝了，也不要难过。他们拒绝的不是你个人，而是开发小组在针对你提交的代码进行评估后作出的一个反馈。
* 如果你提交的代码被改得面目全非后才被接受也不要泄气。
* 从头再来，不断努力，再接受更大的挑战。
在开源项目中不应该开设排行榜。然而，有些开源社区却弄了个贡献排名，其实这没必要。大家只需要积极参与、奉献，贡献你的才智、提交你的代码，这样就可以了。
### 开发软件
![](/data/attachment/album/201702/20/000910qwf5k4yy2lefl99l.png)
编程不管在那种情况下都关乎于你自身的发展。无论你是否为了寻找解决问题的新方法，寻找优化代码的方式，学习新的编程语言，或者是学习如何更好的与其它人员合作，你都不会停止成长。你自己成长得越多，对开源项目越有帮助。
个人成长和职业技能的提升是你参与开源项目的终极目标，但是实际上这是一个贯穿整个项目的持续过程。成为一个开源程序员跟得到一份公务员工作不同；这是一个持之以恒的过程。学习、分享、再学习，或许你会去编写一个[“康威生命游戏”](https://en.wikipedia.org/wiki/Conway's_Game_of_Life)，然后你会学到越来越多。
这就是开源的过程：自由地开发，每一行代码。因此，发现你的技能树，激发潜能，付出努力，不断提高自己的技能，并最终参与其中。
（题图素材修改自：[woot.com](http://shirt.woot.com/derby/entry/78479/turtles-all-the-way-down)）
---
作者简介：
Seth Kenlon —— Seth Kenlon 是一位独立多媒体艺术家，开源文化倡导者， Unix 极客。他还是 Slackware 多媒体产品项目的维护人员之一，官网： 。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 译者：[rusking](https://github.com/rusking) 校对：[Bestony](https://github.com/Bestony), [wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出