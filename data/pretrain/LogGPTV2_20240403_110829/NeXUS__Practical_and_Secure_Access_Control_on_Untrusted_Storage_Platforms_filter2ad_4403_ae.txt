uploading the ﬁle on the server, and then distributing the key
to authorized users. Because NEXUS ensures encryption keys
never escape the enclave boundary, revocation becomes as
simple as re-encrypting the metadata with a new key. For
instance, consider the scenario in which a user is revoked from
the directory containing the SFLD workload mentioned above.
For 10MB of ﬁle data, NEXUS will have to re-encrypt and
update about 95KB of metadata (recall access control is stored
in the dirnode). Whereas, in the LFSD workload, the metadata
payload drops to 3.2KB for 3.2GB of ﬁle data.
F. Takeaway Discussion
The results of our evaluation demonstrate the ability of
NEXUS to meet the demands of standard user workloads.
While our approach does necessarily introduce additional over-
heads, these are predominately encountered during metadata
modifying operations that generally do not fall on the critical
path for most personal data workloads. In general, interactive
programs exhibit less than ×2 performance degradation, which
we believe is acceptable in practice for the majority of users.
Moreover, NEXUS is designed to operate within a multi-
user environment that offers standard ﬁle sharing capabilities.
Although our evaluation occurs within a single machine, we
document the costs of providing sharing as follows: (1) The
asynchronous rootkey exchange (Section IV-B) requires a
single ﬁle write. (2) Adding/removing users (Section IV-C)
is not unlike revocation, which has been shown to require
a singe metadata update. (3) Although policy enforcement
(Section IV-C) scales with the number of ACL entries, its cost
is dominated by the initial metadata fetch.
VIII. RELATED WORK
SGX-Enabled Storage: Since its release, SGX has gener-
ated considerable research aimed at achieving secure remote
storage [18, 16, 17, 27, 39, 40, 41]. PESOS [18] enforces
custom server-side access control on top of untrusted storage,
but its prototype requires a LibOS [42] that severely impacts
the TCB. ZeroTrace [17] and OBLIVIATE [16] use an ORAM
protocol to protect ﬁle contents and access patterns from the
server, but do not consider ﬁle sharing. Moreover, because
these solutions require server-side SGX support, they have
limited applicability in the personal cloud storage setting. We
circumvent this by running the NEXUS enclave on the client.
SGX-FS [41] is an enclave-protected userspace ﬁlesystem, but
does not provide any sharing capabilities.
IBBE-SGX [43] proposes a computationally efﬁcient IBBE
scheme [44] for achieving scalable access control. However,
unlike NEXUS, its access control model restricts all group
membership operations to an administrator.
Cryptographic Filesystems: By encrypting user ﬁles
before uploading the ciphertext to the server, cryptographic
ﬁlesystems [10, 11, 12, 14] have been proposed as a ﬂexible
solution for secure data sharing. Unfortunately, pure encryption
techniques are plagued by issues of bulk ﬁle re-encryption
on user revocation. This incurs a signiﬁcant performance
overhead which, according to Garrison et al. [15] is con-
siderable even with modest access policy updates. Although
mitigating schemes such as lazy encryption [45] and proxy
re-encryption [46] have been proposed, concerns remain on
how practical they perform under real world environments. By
having the NEXUS enclave mediate access to all encryption
keys, we offer superior user key management and obviate the
necessity of bulk ﬁle re-encryption on policy updates.
IX. CONCLUSIONS
The protection of user data on cloud storage remains an
active research area, however existing works either require
substantial changes to server/client, or impose severe data
management burdens on the user. We presented NEXUS, a
stackable ﬁlesystem that protects ﬁles on untrusted storage,
while providing secure ﬁle sharing under ﬁne-grained access
control. NEXUS is a performant and practical solution: it
requires no server-side changes, and imposes minimal key
management on users. NEXUS uses an SGX enclave to encrypt
ﬁle contents on the client, and then attaches metadata that
ensures the encryption keys are enclave-bound. Access control
is enforced at each user’s local machine, and ﬁle sharing
is enabled using SGX remote attestation. We implemented
a prototype that runs on top of AFS, which achieves good
performance on ﬁle I/O operations and incurs modest overheads
on workloads that involved bulk metadata.
tar-xdugreptar-ccpmv10−1100101102103Latency(logscale/s)153.51s0.79s102.15s428.01s6.66s0.35s124.44s0.39s67.46s208.44s3.84s0.30slarge-file-small-dirtar-xdugreptar-ccpmv136.68s0.56s85.85s303.56s1.17s0.35s117.75s0.39s56.38s181.71s0.70s0.31smedium-file-medium-dirtar-xdugreptar-ccpmv14.06s0.48s4.11s4.36s0.45s0.39s3.29s0.37s2.39s2.71s0.31s0.30ssmall-file-large-diropenafsnexusAcknowledgements: This work was supported in part by the
National Science Foundation under awards CNS–1704139 and
CNS–1253204.
REFERENCES
[1] Business Insider. Google Drive now hosts more than 2 tril-
lion ﬁles. http://www.businessinsider.com/2-trillion-ﬁles-
google-drive-exec-prabhakar-raghavan-2017-5, 2017.
[3] SC Media.
[2] Dropbox. Celebrating half a billion users.
https://
blogs.dropbox.com/dropbox/2016/03/500-million/, 2016.
4
records.
breach
million Time Warner Cable
https://www.scmagazine.com/data-breach-exposes-
about-4-million-time-warner-cable-customer-records/
article/686592/, 2017.
exposes
customer
about
Data
[4] CNBC. Credit reporting ﬁrm Equifax says data breach
could potentially affect 143 million US consumers.
https://www.cnbc.com/2017/09/07/credit-reporting-ﬁrm-
equifax-says-cybersecurity-incident-could-potentially-
affect-143-million-us-consumers.html, 2017.
[5] ZDNet. Yet another trove of sensitive US voter records has
leaked. http://www.zdnet.com/article/yet-another-trove-
of-sensitive-of-us-voter-records-has-leaked/, 2017.
[6] Dropbox Terms of Service. https://www.dropbox.com/
terms, 04 2018.
terms, 2017 10.
[7] Google Terms of Service. https://policies.google.com/
[8] Microsoft
Services
Agreement.
//www.microsoft.com/en-us/servicesagreement,
2018.
https:
8
[9] Privacy Rights ClearingHouse. Data Breaches. https:
//www.privacyrights.org/data-breaches, 2017.
[10] Eu-Jin Goh, Hovav Shacham, Nagendra Modadugu, and
Dan Boneh. SiRiUS: Securing Remote Untrusted Storage.
In NDSS, volume 3, pages 131–145, 2003.
[11] Aniello Castiglione, Luigi Catuogno, Aniello Del Sorbo,
Ugo Fiore, and Francesco Palmieri. A secure ﬁle sharing
service for distributed computing environments. The
Journal of Supercomputing, 67, 2014.
[12] Erel Geron and Avishai Wool. CRUST: Cryptographic
Remote Untrusted Storage without Public Keys. Inter-
national Journal of Information Security, 8(5):357–377,
2009.
[13] Ethan Miller, Darrell Long, William Freeman, and Ben-
jamin Reed. Strong security for distributed ﬁle systems.
In IEEE International Conference on Performance, Com-
puting, and Communications., pages 34–40. IEEE, 2001.
[14] Atul Adya, William J Bolosky, Miguel Castro, Gerald
Cermak, Ronnie Chaiken, John R Douceur, Jon Howell,
Jacob R Lorch, Marvin Theimer, and Roger P Wattenhofer.
FARSITE: Federated, available, and reliable storage for
an incompletely trusted environment. ACM SIGOPS
Operating Systems Review, 36, 2002.
[15] William C Garrison, Adam Shull, Steven Myers, and
Adam J Lee. On the practicality of cryptographically
enforcing dynamic access control policies in the cloud.
In Security and Privacy (SP), 2016 IEEE Symposium on,
pages 819–838. IEEE, 2016.
[16] Adil Ahmad, Kyungtae Kim, Muhammad Ihsanulhaq
Sarfaraz, and Byoungyoung Lee. OBLIVIATE: A Data
In 25th Annual
Oblivious Filesystem for Intel SGX.
Network and Distributed System Security Symposium,
NDSS 2018, San Diego, California, USA, February 18-21,
2018, 2018.
[17] Sajin Sasy, Sergey Gorbunov, and Christopher W. Fletcher.
ZeroTrace : Oblivious Memory Primitives from Intel SGX.
In 25th Annual Network and Distributed System Security
Symposium, NDSS 2018, San Diego, California, USA,
February 18-21, 2018, 2018.
[18] Robert Krahn, Bohdan Trach, Anjo Vahldiek-Oberwagner,
Thomas Knauth, Pramod Bhatotia, and Christof Fetzer.
Pesos: Policy Enhanced Secure Object Store. In Proceed-
ings of the Thirteenth EuroSys Conference, EuroSys ’18,
pages 25:1–25:17, New York, NY, USA, 2018. ACM.
[19] Intel Software Guard Extensions Programming Reference,
2017. https://software.intel.com/en-us/sgx-sdk.
[20] The OpenAFS Foundation, Inc. http://www.openafs.org/,
2018.
[21] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent
Scarlata. Innovative technology for CPU based attestation
In Proceedings of the 2nd international
and sealing.
workshop on hardware and architectural support for
security and privacy, volume 13, 2013.
[22] David Goltzsche, Signe Rüsch, Manuel Nieke, Sébastien
Vaucher, Nico Weichbrodt, Valerio Schiavoni, Pierre-
Louis Aublin, Paolo Cosa, Christof Fetzer, Pascal Felber,
et al. Endbox: Scalable middlebox functions using client-
side trusted execution. In 2018 48th Annual IEEE/IFIP
International Conference on Dependable Systems and
Networks (DSN), pages 386–397. IEEE, 2018.
[23] Bijun Li, Nico Weichbrodt, Johannes Behl, Pierre-Louis
Aublin, Tobias Distler, and Rüdiger Kapitza. Troxy:
Transparent access to byzantine fault-tolerant systems.
In 2018 48th Annual IEEE/IFIP International Conference
on Dependable Systems and Networks (DSN), pages 59–
70. IEEE, 2018.
[24] Mark Russinovich.
Azure conﬁdential computing.
https://azure.microsoft.com/en-us/blog/azure-
conﬁdential-computing/, 5 2018.
[25] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter,
and Emmett Witchel. Ryoan: a distributed sandbox
In 12th
for untrusted computation on secret data.
USENIX Symposium on Operating Systems Design and
Implementation (OSDI 16), 2016.
[26] Seong Min Kim, Juhyeng Han, Jaehyeong Ha, Taesoo
Kim, and Dongsu Han. Enhancing Security and Privacy
of Tor’s Ecosystem by Using Trusted Execution Environ-
ments. In NSDI, pages 145–161, 2017.
[27] Pierre-Louis Aublin, Florian Kelbert, Dan O’Keeffe, Di-
vya Muthukumaran, Christian Priebe, Joshua Lind, Robert
Krahn, Christof Fetzer, David Eyers, and Peter Pietzuch.
LibSEAL: Revealing Service Integrity Violations Using
In Proceedings of the Thirteenth
Trusted Execution.
EuroSys Conference, EuroSys ’18, pages 24:1–24:15, New
York, NY, USA, 2018. ACM.
[28] Mahesh Kallahalla, Erik Riedel, Ram Swaminathan, Qian
Wang, and Kevin Fu. Plutus: Scalable secure ﬁle sharing
on untrusted storage. In Fast, volume 3, 2003.
[29] Shay Gueron and Yehuda Lindell. GCM-SIV: Full nonce
misuse-resistant authenticated encryption at under one
cycle per byte. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security,
2015.
[30] Ittai Anati, Frank McKeen, Shay Gueron, H Haitao,
Simon Johnson, Rebekah Leslie-Hurd, Harish Patil, Carlos
Rozas, and Hisham Shaﬁ. Intel software guard extensions
(Intel SGX). In Tutorial at International Symposium on
Computer Architecture (ISCA), 2015.
[31] SSL Library mbed TLS / PolarSSL. https://tls.mbed.org/,
mar 2019.
[32] Shay Gueron, Adam Langley, and Yehuda Lindell. AES-
https://github.com/Shay-
GCM-SIV implementations.
Gueron/AES-GCM-SIV/, 2018.
[33] Yu-Yuan Chen, Pramod A Jamkhedkar, and Ruby B Lee.
A software-hardware architecture for self-protecting data.
In Proceedings of the 2012 ACM conference on Computer
and communications security, pages 14–27. ACM, 2012.
[34] David Mazieres and Dennis Shasha. Building secure ﬁle
systems out of byzantine storage. In Proceedings of the
twenty-ﬁrst annual symposium on Principles of distributed
computing, pages 108–117. ACM, 2002.
[35] Jinyuan Li, Maxwell N Krohn, David Mazieres, and
Dennis E Shasha. Secure Untrusted Data Repository
(SUNDR). In OSDI, volume 4, pages 9–9, 2004.
[36] Intel. Intel(R) Software Guard Extensions for Linux* OS.
https://github.com/intel/linux-sgx, 2018.
[37] LevelDB. https://www.leveldb.org, 2018.
[38] SQLite. SQLite Home Page. https://www.sqlite.org, 2018.
[39] S. Shinde, S. Wang, P. Yuan, A. Hobor, A. Roychoudhury,
and P. Saxena. BesFS: Mechanized Proof of an Iago-Safe
Filesystem for Enclaves. ArXiv e-prints, July 2018.
[40] Ju Chen Yuzhe (Richard) Tang. LPAD: Building Secure
Enclave Storage using Authenticated Log-Structured
Merge Trees.
Cryptology ePrint Archive, Report
2016/1063, 2016. https://eprint.iacr.org/2016/1063.
[41] Dorian Burihabwa, Pascal Felber, Hugues Mercier, and
Valerio Schiavoni. SGX-FS: Hardening a File System in
User-Space with Intel SGX. In 2018 IEEE International
Conference on Cloud Computing Technology and Science
(CloudCom), pages 67–72. IEEE, 2018.
[42] Chia-Che Tsai, Donald E Porter, and Mona Vij. Graphene-
SGX: A practical library OS for unmodiﬁed applications
on SGX. In 2017 USENIX ATC, 2017.
[43] Stefan Contiu, Rafael Pires, Sébastien Vaucher, Marcelo
Pasin, Pascal Felber, and Laurent Réveillère.
IBBE-
SGX: Cryptographic Group Access Control Using Trusted
Execution Environments. 2018 48th Annual IEEE/IFIP
International Conference on Dependable Systems and
Networks (DSN), pages 207–218, 2018.
[44] Cécile Delerablée. Identity-based broadcast encryption
In
with constant size ciphertexts and private keys.
ASIACRYPT, 2007.
[45] Michael Backes, Christian Cachin, and Alina Oprea. Lazy
revocation in cryptographic ﬁle systems. In Security in
Storage Workshop, 2005. SISW’05. Third IEEE Interna-
tional, pages 11–pp. IEEE, 2005.
[46] Zhiguang Qin, Hu Xiong, Shikun Wu, and Jennifer
Batamuliza. A survey of proxy re-encryption for secure
data sharing in cloud computing. IEEE Transactions on
Services Computing, 2016.