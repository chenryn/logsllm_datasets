connective is deﬁned by the following rules.
Γ; ∆, F true ` A aﬃrms G
Γ; ∆, (A says F ) true ` A aﬃrms G
(saysL)
Γ; ∆ ` A aﬃrms F
Γ; ∆ ` (A says F ) true
(saysR)
The saysR rule states that A says F is true whenever
A aﬃrms F . The saysL rule states that if we have an as-
sumption (A says F ) true, then we are justiﬁed in assum-
ing A true while we are trying to prove some afﬁrmation
made by A. It turns out that we never need assumptions of
the form A aﬃrms F in Γ or ∆ because these can imme-
diately be replaced by assumptions (A says F ) true.
While it is useful to reason about what Alice says, there
are times when we would like to enforce that a statement
actually came directly from Alice rather than as the conclu-
sion of some other statements. This direct afﬁrmation is
written as Alice signed F . This can also be thought of
as the sequence of bits resulting from Alice signing the for-
mula F with her private key, using a standard cryptographic
signature.
Since A signed F stands for direct evidence of A af-
ﬁrming F , it cannot be established by means of a proof.
Hence it never occurs to the right of `. There are two rules
governing this judgment.
Γ; ∆, F true ` A aﬃrms G
Γ; ∆, A signed F ` A aﬃrms G
(signed)
Γ, A signed F ; ∆, A signed F ` G true
Γ, A signed F ; ∆ ` G true
(copy0)
The rule signed is best thought of as saying that if A
digitally signs the statement F , then we can assume that F
is true while we are reasoning about an afﬁrmation made by
A. The second rule is similar to the rule copy and permits
an indeﬁnite number of copies of A signed F to be made
if A signed F occurs in Γ.
Delegation is discussed in terms of the speaksfor and
delegate predicates. Alice speaksfor Bob indicates that
Bob has delegated to Alice his authority to make access-
control decisions about any resource or action. delegate
(Bob, Alice, action) transfers to Alice only the authority to
perform the particular action called action. delegate and
speaksfor can be deﬁned in terms of other connectives as
follows.
delegate (A, B, U ) ≡ ∀P .∀N.(B says action(U, P, N )
−→ A says action(U, P, N ))
A speaksfor B ≡ ∀U.∀P .∀N.(B says action(U, P, N )
−→ A says action(U, P, N ))
With these deﬁnitions we can derive the following rules
which govern their use.
Γ; ∆1 ` B says (action(U, P, N )) true
Γ; ∆2, A says (action(U, P, N )) true ` F
Γ; ∆1, ∆2, delegate (A, B, U ) true ` F
(delegate)
Γ; ∆1 ` B says (action(U, P, N )) true
Γ; ∆2, A says (action(U, P, N )) true ` G
Γ; ∆1, ∆2, (B speaksfor A) true ` G
(speaksfor)
The speaksfor rule states that if we can conclude that
B says F , and assuming A says F we can conclude G,
then assuming A says (B speaksfor A), we can also
conclude G. The delegate rule is very similar, except the
U variable must match in all three expressions.
3.2. Consuming Credentials
We would now like to consider how to utilize this lin-
ear access-control logic in a distributed system implemen-
tation. In the access-control context, the hypotheses of a
proof are credentials, and the proof shows that a policy (the
proved formula) is satisﬁed by the credentials. The primary
challenge introduced when this proof involves consumable
hypotheses is enforcing their consumption. Within the con-
text of a single proof this is straightforward, as the reference
monitor that is checking the proof can employ a linear proof
checker which understands the distinction between environ-
ments and treats them appropriately.
In the scenarios that motivate our study, however, con-
sumption of resources should not be limited to one proof,
but rather should be global. In particular, these scenarios
are populated by principals who issue credentials, generate
proofs, and verify proofs that they have communicated to
each other. A proof generated by one principal is typically
sent to a second principal as part of a request to access a
resource controlled by that principal.
In these scenarios,
we must prevent not only the proﬂigate use of a particular
consumable credential within a single proof, but also such
a credential’s use in arbitrarily many different proofs that
may be created or veriﬁed by different principals.
This cannot be enforced through locally checking a proof
alone; some distributed coordination must take place. More
fundamentally, the moment of “use” at which the creden-
tial should be “consumed” is a subtle design decision with
signiﬁcant ramiﬁcations. One possibility is to consume a
credential when a proof containing it is veriﬁed by a ref-
erence monitor. However, this makes it impossible to de-
termine whether a proof is valid or invalid by simple ex-
amination; rather, validity becomes a temporal notion. An-
other alternative would be to consume the credential during
proof construction when the linear inference rule (hyp) is
used. However, proof construction is a distributed search
process that explores numerous potential paths for proving
a result,2 terminating when one of these paths succeeds [9].
Since most of the explored paths do not lead to success-
ful proofs, consuming credentials upon each application of
2The proof search process is a necessary ingredient for such a system,
though since tractable, application-speciﬁc solutions to the search problem
in such systems exists (e.g., [26]), we do not discuss it further here.
linear inference rules in this search process would quickly
consume most credentials without any beneﬁt being real-
ized from them.
For these reasons, we reject both of these design options,
and explore a third option in this paper. In this design, hy-
pothesis consumption occurs as a step after the main search
process for constructing a proof is completed, but before the
proof is checked. Intuitively, the proving process prior to
this step proceeded under the implicit assumption that the
consumable credentials ∆ used in the proof are true. The
last stage of the proving process is then to explicitly verify
that the consumable credentials are in fact available and to
mark their uses, and, if appropriate, render the credentials
unavailable for future proofs. We call this step ratiﬁcation.
4. Ratiﬁcation
Ratiﬁcation is an extra-logical step which we use to en-
force the linearity of our consumable credentials. Instead of
the standard certiﬁcates, consumable credentials are created
with respect to a ratiﬁer that monitors their use and enforces
their consumption. While the cryptographic signature does
not differ between regular credentials and consumable cre-
dentials, we denote consumable credentials in the logic as
A signedA0 F . The ratiﬁer (A0) who is named in the log-
ical representation, will later need to be contacted in order
to ratify the consumable credential. Naturally there is also
a new inference rule for dealing with such credentials.
Γ; ∆, F true ` A aﬃrms G
Γ; ∆, A signedA0 F ` A aﬃrms G
(signedL)
This rule can be used along the following lines of reason-
ing: if A signedA0 F is available as a certiﬁcate, we can
assume that F is true as long as we are reasoning about
afﬁrmations by A. Whether the resulting proof can actually
be used in contingent upon the later ratiﬁcation by A0.
4.1. Ratiﬁcation Properties
There are two properties which must be enforced by our
ratiﬁcation mechanism. Suppose that each consumable cre-
dential δ is created with an allowed number of uses #δ.
Then the following safety condition must hold.
Bounded Use Let formulas F1, F2, . . . be those formulas
proved in the system, and let ∆1, ∆2, . . . be the linear
environments used in those proofs. Then, the multiset
Si ∆i contains at most #δ instances of δ.
Informally, the system must enforce that the global num-
ber of uses of a consumable credential does not exceed the
allowable uses as speciﬁed by the ratiﬁer. How this is ac-
complished in a distributed setting will be discussed in more
detail later.
While Bounded Use deals with bounding from above the
number of uses of a consumable credential, we must also
worry about ensuring the availability of valid consumable
credentials. By this we mean to say that the system can-
not waste consumable resources in a non-productive man-
ner. This becomes immediately obvious in a system where
consumable credentials are used to implement a form of
currency. If money just disappeared out of your bank ac-
count because the system was able to waste resources, you
would very quickly ﬁnd a new system.
In a distributed proving environment, the risk of resource
waste occurs after a proof has been completed, but before
it has been ratiﬁed or checked. Suppose you construct a
proof to purchase a ticket to the movies. The movie theater
promised you a seat and you promised the money to pay
for that seat. However, during ratiﬁcation, your money is
consumed, but there are no longer any seats available in the
theater. Clearly, ratiﬁcation must also enforce some sort of
atomicity to ensure the previous scenario does not occur.
This is captured in our second condition.
Atomicity The ratiﬁcation protocol is atomic, in that ei-
ther the ratiﬁer for each consumable credential δ ∈ ∆
records each of the uses of δ in the proof of F —and
in this case the veriﬁcation of F succeeds—or none of
the ratiﬁers records any such uses.
Again, informally, the process of ratiﬁcation must either
occur for all credentials, or none of them. Either is an ac-
ceptable output from the system designer perspective, but
there is no middle ground on which to stand.
4.2. Implementation
Bounded Use While ratiﬁcation is an extra-logical mech-
anism, it is intrinsically tied to the logic. After the proof
has been completed using consumable credentials, it must
be sent to the applicable ratiﬁers who will certify that the
consumable credentials are still valid. This is done by is-
suing ratiﬁcation credentials which the ratiﬁers sign. These
credentials are then appended to the reusable and consum-
able credentials gathered during proof search and sent to the
reference monitor with the proof for veriﬁcation.
Once the reference monitor receives the proof and cor-
responding digitally signed certiﬁcates, it ﬁrst checks the
cryptographic signatures on each credential. If the signa-
tures are correct, it then populates both the reusable and
linear environments, ensuring that ∆ is only populated with
consumable credentials if the corresponding ratiﬁcation cre-
dentials are available.
Because of the Bounded Use requirement above, ratiﬁ-
cation credentials cannot be made with respect to only the
credential they are ratifying. If that were the case, once a
credential was ratiﬁed, the consumable credential and the
ratiﬁcation credential could be copied and used in the con-
struction of a later proof without contacting the ratiﬁer to
register another use. This is clearly unacceptable as the
number of uses could not be controlled.
To overcome this, the ratiﬁcation credential is not only
created with respect to the consumable credential it is ratify-
ing, but also with respect to the proof in which it is included.
To this end, the proof generator, after completing the proof,
sends the entire proof term, M , the proved formula F , and
the credentials in both Γ and ∆ to the ratiﬁers.
Since each ratiﬁcation credential is issued with respect
to the current proof and proof goal, each ratiﬁer can inspect
the proof before consenting to the use of a consumable cre-
dential within that proof. The ratiﬁer can also count and
record the number of uses of a consumable credential in the
proof, and give or withhold its consent accordingly. If the
ratiﬁer is willing to sign off on the uses of the consumable
credential for which it is responsible it will issue a ratiﬁca-
tion credential with respect to both M and F .
has
form
hC, F, M iA0, denoting the signature by A0 on the consum-
able credential C, the proof statement F , and the proof term
M . Because the proof formula F contains a nonce, the
returned ratiﬁcation credential uniquely identiﬁes a proof
instance and cannot be reused, either in the same proof at a
later time, or as a piece of a different proof.
ratiﬁcation
The
credential
then
the
Atomicity To deal with the issue of Atomicity, we borrow
from work in contract signing. Recall that each ratiﬁer pro-
duces a digitally signed ratiﬁcation credential to ratify each
use of the consumable credential for which it is responsible.
Implementing the contribution of these digital signatures
atomically for the goal F can be achieved by running a mul-
tiparty contract-signing protocol (e.g., [12, 29]) among the
ratiﬁers for the consumable credentials used in the proof of
F . Informally, a contract-signing protocol is one in which
either all honest signing parties obtain a contract bearing all
parties’ signatures, or no one does. In our context, each rati-
ﬁer participates in a contract-signing protocol with the other
ratiﬁers to contribute its ratiﬁcation credential. Each ratiﬁer
engages in the protocol only if the consumable credential
for which it is responsible is not yet consumed, and regis-
ters a use of the credential if and only if the contract-signing
protocol succeeds.
There are many contract-signing protocols that can
achieve our requirements. That said, the particular protocol
in use may require that the veriﬁer know something about
the protocol.
In particular, deterministic contract signing
protocols typically employ a trusted third party to settle
disputes among the signers.3 The trusted party generally
3There are probabilistic protocols for performing contract signing that
do not employ a trusted third party, but they have an error bound at least
linear in the number of rounds [14].
has the power to either “force” a signature from a partici-
pant who has promised in previous rounds to sign the con-
tract, or terminate the protocol and ensure no one receives
a signed contract. So-called “optimistic” protocols seek to
avoid contacting the third party except in exceptional cases.
Such contract-signing protocols can be distinguished by
whether or not the contract output by the protocol enables
a veriﬁer to determine if a party’s signature was forced by
the third party. If so, then the third party is visible in the
protocol (e.g., [11]); if not, it is invisible (e.g., [29]4). If the
protocol ensures an invisible third party, then the veriﬁer
need not separately accommodate runs in which the third
party is consulted and runs in which it is not. However, if
the third party is visible, then the veriﬁer must be willing to
accept one of two possible signatures, one for the case when
the third party is not consulted and one for the case in which
it is. This latter disjunct is protocol-dependent and so we do
not detail the alternatives here, but formulating this disjunct
is straightforward for the third-party-visible contract sign-
ing protocols of which we are aware.
An issue in the use of a contract-signing protocol that
employs a third party is the question of what third party to
use. While this choice is orthogonal to our techniques, we
caution the reader against using the prover in this role, i.e.,
the component requesting access in the context of assem-
bling a proof. In most applications, this component would
gain greater authority (e.g., unlimited use of a consumable
credential) by misbehaving in the role of the third party in
the contract signing protocol. For this reason, better choices
include utilizing the reference monitor that will check the