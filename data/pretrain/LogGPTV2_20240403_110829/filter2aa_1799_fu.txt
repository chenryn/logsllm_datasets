Hvloader.dll, 811
IUM (Isolated User Mode), 371–372
Ntevt.dll, 497
for Wow64, 104–105
DMA (Direct Memory Access), 50, 584–585
DMTF, WMI (Windows Management 
Instrumentation), 486, 489
DPC (dispatch or deferred procedure call) inter-
rupts, 54–61, 71. See also software interrupts
DPC Watchdog, 59
dps (dump pointer symbol) command, 102–103
drive-letter name resolution, 620
\Driver directory, 161
driver loading in safe mode, 848–849
driver objects, 451
driver shims, 560–563
\DriverStore(s) directory, 161
dt command, 7, 47
DTrace (dynamic tracing)
ETW provider, 533–534
FBT (Function Boundary Tracing) provider, 
531–533
initialization, 529–530
internal architecture, 528–534
overview, 525–527
PID (Process) provider, 531–533
symbol server, 535
syscall provider, 530
type library, 534–535
dtrace command, 527
.dump command, LiveKd, 545
dump files, 546–548
Dump method, 141
.dumpdebug command, 547
Duplicate object service, 136
DVRT (Dynamic Value Relocation Table), 
23–24, 26
dx command, 7, 35, 46, 137, 150, 190
Dxgk* objects, 129
dynamic memory, tracing, 532–533
dynamic partitioning, NTFS, 646–647
E
EFI (Extensible Firmware Interface), 777
EFS (Encrypting File System)
architecture, 712
BitLocker encryption offload, 717–718
decryption process, 715–716
described, 640
first-time usage, 713–715
information and key entries, 713
online support, 719–720
overview, 710–712
recovery agents, 714
EFS information, viewing, 716
EIP program counter, 8
enclave configuration, dumping, 379–381
866 
Index
encrypted files
encrypted files
backing up, 716–717
copying, 717
encrypting file data, 714–715
encryption NTFS, 640
encryption support, online, 719–720
EnergyTracker object, 130
enhanced timers, 78–81. See also timers
/enum command-line parameter, 786
.enumtag command, 547
Error Reporting. See WER (Windows Error 
Reporting)
ETL file, decoding, 514–515
ETW (Event Tracing for Windows). See also trac-
ing dynamic memory
architecture, 500
consuming events, 512–515
events decoding, 513–515
Global logger and autologgers, 521
and high-frequency timers, 68–70
initialization, 501–502
listing processes activity, 510
logger thread, 511–512
overview, 499–500
providers, 506–509
providing events, 509–510
security, 522–525
security registry key, 503
sessions, 502–506
system loggers, 516–521
ETW provider, DTrace (dynamic tracing), 533–534
ETW providers, enumerating, 508
ETW sessions
default security descriptor, 523–524
enumerating, 504–506
ETW_GUID_ENTRY data structure, 507
ETW_REG_ENTRY, 507
EtwConsumer object, 129
EtwRegistration object, 129
Event Log provider DLL, 497
Event object, 128
Event Viewer tool, 288
eventvwr command, 288, 449
ExAllocatePool function, 26
exception dispatching, 85–91
executive mutexes, 196–197
executive objects, 126–130
executive resources, 197–199
exFAT, 606
explicit file I/O, 619–622
export thunk, 117
!exqueue command, 83
F
F5 key, 124, 397
fast I/O, 585–586. See also I/O system
fast mutexes, 196–197
fast repair and check-disk, NTFS recovery sup-
port, 707–710
Fast Startup and hibernation, 840–844
FAT12, FAT16, FAT32, 603–606
FAT64, 606
Fault Reporting process, WER (Windows Error 
Reporting), 540
fault tolerance and data redundancy, NTFS, 
629–630
FCB (File Control Block), 571
FCB Headers, 201
feature settings and values, 22–23
FEK (File Encryption Key), 711
file data, encrypting, 714–715
file names, NTFS on-disk structure, 664–666
file namespaces, 664
File object, 128
file record numbers, NTFS on-disk structure, 660
file records, NTFS on-disk structure, 661–663
file system drivers, 583
file system formats, 566
file system interfaces, 582–585
File System Virtualization, 248
Index 
867
HKEY_PERFORMANCE_TEXT
file systems
CDFS, 602
data-scan sections, 624–625
drivers architecture, 608
exFAT, 606
explicit file I/O, 619–622
FAT12, FAT16, FAT32, 603–606
filter drivers, 626
filter drivers and minifilters, 623–626
filtering named pipes and mailslots, 625
FSDs (file system drivers), 608–617
mapped page writers, 622
memory manager, 622
NTFS file system, 606–607
operations, 618
Process Monitor, 627–628
ReFS (Resilient File System), 608
remote FSDs, 610–617
reparse point behavior, 626
UDF (Universal Disk Format), 603
\FileSystem directory, 161
fill buffers, 17
Filter Manager, 626
FilterCommunicationPort object, 130
FilterConnectionPort object, 130
Flags, 132
flushing mapped files, 595–596
Foreshadow (L1TF) attack, 16
fragmented file, 643
FSCTL (file system control) interface, 688
FSDs (file system drivers), 608–617
FsTool, /debug switch, 734
fsutil resource command, 693
fsutil storagereserve findById command, 687
G
g command, 124, 241
gadgets, 15
GDI/User objects, 126–127. See also 
user-mode debugging
GDT (Global Descriptor Table), 2–5
Get-FileStorageTier command, 649
Get-VMPmemController command, 737
Gflags.exe, 554–557
GIT (Generic Interrupt Timer), 67
\GLOBAL?? directory, 161
global flags, 554–557
global namespace, 167
GPA (guest physical address), 17
GPIO (General Purpose Input Output), 51
GSIV (global system interrupt vector), 32, 51
guarded mutexes, 196–197
GUI thread, 96
H
HAM (Host Activity Manager), 244, 249–251
!handle command, 149
Handle count, 132
handle lists, single instancing, 165
handle tables, 146, 149–150
handles
creating maximum number of, 147
viewing, 144–145
hard links, NTFS, 634
hardware indirect branch controls, 21–23
hardware interrupt processing, 32–35
hardware side-channel vulnerabilities, 9–17
hibernation and Fast Startup, 840–844
high-IRQL synchronization, 172–177
hive handles, 410
hives. See also registry
loading, 421
loading and unloading, 408
reorganization, 414–415
HKEY_CLASSES_ROOT, 397–398
HKEY_CURRENT_CONFIG, 400
HKEY_CURRENT_USER subkeys, 395
HKEY_LOCAL_MACHINE, 398–400
HKEY_PERFORMANCE_DATA, 401
HKEY_PERFORMANCE_TEXT, 401
868 
Index
HKEY_USERS
HKEY_USERS, 396
HKLM\SYSTEM\CurrentControlSet\Control\
SafeBoot registry key, 848
HPET (High Performance Event Timer), 67
hung program screen, 838
HungAppTimeout, 839
HVCI (Hypervisor Enforced Code Integrity), 358
hybrid code address range table, dumping, 
117–118
hybrid shutdown, 843–844
hypercalls and hypervisor TLFS (Top Level 
Functional Specification), 299–300
Hyper-V schedulers. See also Windows 
hypervisor
classic, 289–290
core, 291–294
overview, 287–289
root scheduler, 294–298
SMT system, 292
hypervisor debugger, connecting, 275–277
hypervisor loader boot module, 811–813
I
IBPB (Indirect Branch Predictor Barrier), 22, 25
IBRS (Indirect Branch Restricted Speculation), 
21–22, 25
IDT (interrupt dispatch table), 32–35
!idt command, 34, 38, 46
images starting automatically, 837
Import Optimization and Retpoline, 23–26
indexing facility, NTFS, 633, 679–680
Info mask, 132
Inheritance object service, 136
integrated scheduler, 294
interlocked operations, 172
interrupt control flow, 45
interrupt dispatching
hardware interrupt processing, 32–35
overview, 32
programmable interrupt controller 
architecture, 35–38
software IRQLs (interrupt request levels), 
38–50
interrupt gate, 32
interrupt internals, examining, 46–50
interrupt objects, 43–50
interrupt steering, 52
interrupt vectors, 42
interrupts
affinity and priority, 52–53
latency, 50
masking, 39
I/O system, components of, 652. See also 
Fast I/O
IOAPIC (I/O Advanced Programmable Interrupt 
Controller), 32, 36
!ioapic command, 38
IoCompletion object, 128
IoCompletionReserve object, 128
Ionescu, Alex, 28
IRPs (I/O request packets), 567, 583, 585, 619,
621–624, 627, 718
IRQ affinity policies, 53
IRQ priorities, 53 
IRQL (interrupt request levels), 347–348. 
See also software IRQLs (interrupt request 
levels)
!irql command, 41
IRTimer object, 128
iSCSI, booting from, 811
isolation, NTFS on-disk structure, 689–690
ISR (interrupt service routine), 31
IST (Interrupt Stack Table), 7–9
IUM (Isolated User Mode)
overview, 371–372
SDF (Secure Driver Framework), 376