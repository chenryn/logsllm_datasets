**作者：Longofo@知道创宇404实验室**  
**时间：2020年3月27日**  
**英文版本：**
之前在CODE WHITE上发布了一篇关于[Liferay Portal JSON Web Service
RCE](https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html)的漏洞，之前是小伙伴在处理这个漏洞，后面自己也去看了。Liferay Portal对于JSON Web
Service的处理，在6.1、6.2版本中使用的是
[Flexjson库](http://flexjson.sourceforge.net/)，在7版本之后换成了[Jodd
Json](https://jodd.org/json/)。
**总结起来该漏洞就是：Liferay Portal提供了Json Web
Service服务，对于某些可以调用的端点，如果某个方法提供的是Object参数类型，那么就能够构造符合Java
Beans的可利用恶意类，传递构造好的json反序列化串，Liferay反序列化时会自动调用恶意类的setter方法以及默认构造方法**
。不过还有一些细节问题，感觉还挺有意思，作者文中那张向上查找图，想着idea也没提供这样方便的功能，应该是自己实现的查找工具，文中分析下Liferay使用JODD反序列化的情况。
#### JODD序列化与反序列化
参考[官方使用手册](https://jodd.org/json/)，先看下JODD的直接序列化与反序列化：
TestObject.java
    package com.longofo;
    import java.util.HashMap;
    public class TestObject {
        private String name;
        private Object object;
        private HashMap hashMap;
        public TestObject() {
            System.out.println("TestObject default constractor call");
        }
        public String getName() {
            System.out.println("TestObject getName call");
            return name;
        }
        public void setName(String name) {
            System.out.println("TestObject setName call");
            this.name = name;
        }
        public Object getObject() {
            System.out.println("TestObject getObject call");
            return object;
        }
        public void setObject(Object object) {
            System.out.println("TestObject setObject call");
            this.object = object;
        }
        public HashMap getHashMap() {
            System.out.println("TestObject getHashMap call");
            return hashMap;
        }
        public void setHashMap(HashMap hashMap) {
            System.out.println("TestObject setHashMap call");
            this.hashMap = hashMap;
        }
        @Override
        public String toString() {
            return "TestObject{" +
                    "name='" + name + '\'' +
                    ", object=" + object +
                    ", hashMap=" + hashMap +
                    '}';
        }
    }
TestObject1.java
    package com.longofo;
    public class TestObject1 {
        private String jndiName;
        public TestObject1() {
            System.out.println("TestObject1 default constractor call");
        }
        public String getJndiName() {
            System.out.println("TestObject1 getJndiName call");
            return jndiName;
        }
        public void setJndiName(String jndiName) {
            System.out.println("TestObject1 setJndiName call");
            this.jndiName = jndiName;
    //        Context context = new InitialContext();
    //        context.lookup(jndiName);
        }
    }
Test.java
    package com.longofo;
    import jodd.json.JsonParser;
    import jodd.json.JsonSerializer;
    import java.util.HashMap;
    public class Test {
        public static void main(String[] args) {
            System.out.println("test common usage");
            test1Common();
            System.out.println();
            System.out.println();
            System.out.println("test unsecurity usage");
            test2Unsecurity();
        }
        public static void test1Common() {
            TestObject1 testObject1 = new TestObject1();
            testObject1.setJndiName("xxx");
            HashMap hashMap = new HashMap();
            hashMap.put("aaa", "bbb");
            TestObject testObject = new TestObject();
            testObject.setName("ccc");
            testObject.setObject(testObject1);
            testObject.setHashMap(hashMap);
            JsonSerializer jsonSerializer = new JsonSerializer();
            String json = jsonSerializer.deep(true).serialize(testObject);
            System.out.println(json);
            System.out.println("----------------------------------------");
            JsonParser jsonParser = new JsonParser();
            TestObject dtestObject = jsonParser.map("object", TestObject1.class).parse(json, TestObject.class);
            System.out.println(dtestObject);
        }
        public static void test2Unsecurity() {
            TestObject1 testObject1 = new TestObject1();
            testObject1.setJndiName("xxx");
            HashMap hashMap = new HashMap();
            hashMap.put("aaa", "bbb");
            TestObject testObject = new TestObject();
            testObject.setName("ccc");
            testObject.setObject(testObject1);
            testObject.setHashMap(hashMap);
            JsonSerializer jsonSerializer = new JsonSerializer();
            String json = jsonSerializer.setClassMetadataName("class").deep(true).serialize(testObject);
            System.out.println(json);
            System.out.println("----------------------------------------");
            JsonParser jsonParser = new JsonParser();
            TestObject dtestObject = jsonParser.setClassMetadataName("class").parse(json);
            System.out.println(dtestObject);
        }
    }
输出：
    test common usage
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setName call
    TestObject setObject call
    TestObject setHashMap call
    TestObject getHashMap call
    TestObject getName call
    TestObject getObject call
    TestObject1 getJndiName call
    {"hashMap":{"aaa":"bbb"},"name":"ccc","object":{"jndiName":"xxx"}}
    ----------------------------------------    TestObject default constractor call
    TestObject setHashMap call
    TestObject setName call
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject setObject call
    TestObject{name='ccc', object=com.longofo.TestObject1@6fdb1f78, hashMap={aaa=bbb}}
    test unsecurity usage
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setName call
    TestObject setObject call
    TestObject setHashMap call
    TestObject getHashMap call
    TestObject getName call
    TestObject getObject call
    TestObject1 getJndiName call
    {"class":"com.longofo.TestObject","hashMap":{"aaa":"bbb"},"name":"ccc","object":{"class":"com.longofo.TestObject1","jndiName":"xxx"}}
    ----------------------------------------    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setHashMap call
    TestObject setName call
    TestObject setObject call
    TestObject{name='ccc', object=com.longofo.TestObject1@65e579dc, hashMap={aaa=bbb}}
在Test.java中，使用了两种方式，第一种是常用的使用方式，在反序列化时指定根类型（rootType）；而第二种官方也不推荐这样使用，存在安全问题，假设某个应用提供了接收JODD