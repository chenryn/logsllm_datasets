title:Mining in Logarithmic Space
author:Aggelos Kiayias and
Nikos Leonardos and
Dionysis Zindros
Mining in Logarithmic Space
Nikos Leonardos
University of Athens
Dionysis Zindros
University of Athens
Aggelos Kiayias
University of Edinburgh
IOHK
ABSTRACT
Blockchains maintain two types of data: Application data and con-
sensus data. Towards long-term blockchain scalability, both of these
must be pruned. While a large body of literature has explored the
pruning of application data (UTXOs, account balances, and con-
tract state), little has been said about the permanent pruning of
consensus data (block headers). We present a protocol which al-
lows pruning the blockchain by garbage collecting old blocks as
they become unnecessary. These blocks can simply be discarded
and are no longer stored by any miner. We show that all miners can
be light miners with no harm to security. Our protocol is based on
the notion of superblocks, blocks that have achieved an unusually
high difficulty. We leverage them to represent underlying proof-
of-work without ever illustrating it, storing it, or transmitting it.
After our pruning is applied, the storage and communication re-
quirements for consensus data are reduced exponentially.
We develop new probabilistic mathematical methods to analyze
our protocol in the random oracle model. We prove our protocol is
both secure and succinct under an uninterrupted honest majority
assumption for 1/3 adversaries. Our protocol is the first to achieve
always secure, always succinct, and online Non-Interactive Proofs of
Proof-of-Work, all necessary components for a logarithmic space
mining scheme. Our work has applications beyond mining and also
constitutes an improvement in state-of-the-art superlight clients
and cross-chain bridges.
CCS CONCEPTS
• Security and privacy → Cryptography; Distributed systems
security; Domain-specific security and privacy architectures;
KEYWORDS
blockchains; proof-of-work; logspace mining; superlight clients;
NIPoPoWs; superblocks
ACM Reference format:
Aggelos Kiayias, Nikos Leonardos, and Dionysis Zindros. 2021. Mining in
Logarithmic Space . In Proceedings of Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security, Virtual Event, Re-
public of Korea., November 15–19, 2021 (CCS ’21), 15 pages.
https://doi.org/10.1145/3460120.3484784
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author(s).
CCS 21, November 15-19, 2021, Virtual Event, Republic of Korea.
©2021 Copyright is held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484784
1 INTRODUCTION
Will blockchain [39] systems handle the whole world’s economic
data for the centuries to come? While such lofty visions are of-
ten ubiquitous in the cryptocurrency space, it is a practical reality
that today’s blockchain technology simply does not scale [2]. One
aspect of scalability difficulty stems from the data required to be
stored and sent over the network when blockchain nodes synchro-
nize with each other or bootstrap from the network for the first
time.
These data contains two pieces of information: First, the appli-
cation data. This includes transactions, account balances, smart
contract [12, 43] state evolution, and everything else that is in-
cluded in the block data itself. Secondly, the consensus data. This
includes consensus-critical information such as proof-of-work [18]
(or proof-of-stake) and nonces required to discover the longest
chain among a sea of shorter forks — everything that is part of
the block header. Nodes also need to reach consensus on the ap-
plication data and ensure it follows the protocol rules for valid-
ity, but the application data is not what makes consensus happen.
While application data can grow (or shrink) depending on the im-
plementation, consensus data grows unboundedly at a constant lin-
ear rate in time. For example, in Bitcoin, while items can be added
or removed from the UTXO [8], the number of block headers that
need to be stored and communicated to newly bootstrapping nodes
grows at a constant rate of 1 block header per 10 minutes in expec-
tation [16]. Similarly, in Ethereum, while smart contracts can be
added or destroyed [24], and smart contract state variables added
or removed, block headers still grow at a constant rate of 1 block
header per 12.5 seconds in expectation.
In the present paper, we focus on proof-of-work chains and con-
sensus data (i.e., block headers) in particular. We put forth a mecha-
nism to permanently prune the consensus data in a way that main-
tains the blockchain’s security, without introducing any additional
assumptions beyond honest computational majority. Our protocol
compresses the amount of consensus data that needs to be stored
and exchanged by nodes from linear to polylogarithmic — an expo-
nential improvement. These reductions affect full nodes and min-
ers alike, and, to our knowledge, are the first of their kind. Our pro-
tocol is the first to suggest that nodes need not hold onto chains
at all; instead, full nodes and miners collectively only hold a small
sample of blocks. The rest of the blocks are lost for ever, unless
maintained by archival nodes, and are not necessary for achieving
consensus or bootstrapping new nodes. We note here that our pro-
posed scheme is not a sharding-based solution. All the miners of
our protocol will store the same data. Sharding solutions can be
composed with our solution in a per-shard basis to achieve even
better scalability.
ACM Reference Format: Aggelos Kiayias, Nikos Leonardos, and Dionysis Zindros. 2021. Mining in Logarithmic Space. In Proceedings of Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS ’21), November 15-19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA. 15 pages. https://doi.org/10.1145/3460120.3484784   This work is licensed under a Creative Commons Attribution International 4.0 License. CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea. © 2021 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-8454-4/21/11. https://doi.org/10.1145/3460120.3484784  Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3487To achieve these reductions securely, we develop a mathemat-
ical framework for the analysis of blockchain systems under sup-
pression attacks in which an adversary attempts to silence the gen-
eration of selected blocks. For our system to work correctly, it is
imperative that the adversary faces difficulty in suppressing our
high-value sample blocks, which we call superblocks. These repre-
sent the compression of proof-of-work. We prove that, in the ran-
dom oracle model [6], these blocks cannot be silenced by any mi-
nority mining adversary. Our framework is an extension built on
top of the blockchain backbone model [20, 21] and can be indepen-
dently useful for analyzing other protocols.
Our contributions. In summary, our contributions in this paper
are as follows:
(1) We put forth a mechanism which provides exponential im-
provements in the consensus data stored and exchanged
between full nodes and miners in proof-of-work settings.
Our protocol requires the storage and exchange of only
polylogarithmic data, even when a new miner is bootstrap-
ping from genesis.
(2) We develop a mathematical framework for the analysis of
suppression attacks, and analyze the security of our proto-
col therein. Our protocol is secure under honest majority
assumptions (a 1/3 adversary) in the random oracle model.
Related work. Our work focuses on compressing consensus data,
i.e., the proof-of-work headers exchanged and stored. There has
been significant work in compressing application data in a way that
maintains consensus. Such examples include moving transactions
and smart contract execution off-chain in Layer 2 constructions
such as payment channels [3, 4, 30, 41] and networks, rollups of
the optimistic [42] or zero-knowledge [7] kind, and sidechains [28,
33, 40]. Other systems allow compressing multiple transactions
into fewer, such as in the case of EDRAX [14], which creates trees
of transactions, or bulletproofs [9], which aggregate signatures.
These systems do not compress consensus state; all proof-of-work
headers must still be sent and stored, even though the actual ap-
plication data is reduced. Any long-term scalability solution must
include a compression of both application data and consensus data.
Our protocol can be composed with any of these.
Similar techniques to our consensus compression techniques
have been previously used to create superlight clients, wallets that
can quickly synchronize with the rest of the network. Such tech-
niques include superblock [29, 38] NIPoPoWs [27, 31, 32, 46] and
FlyClient NIPoPoWs [10]. However, these still require that miners
maintain the whole blockchain so that they can help light clients
synchronize. They cannot be readily adapted to logarithmic space
mining scenarios. Specifically, superblock NIPoPoWs in their pre-
vious form cannot be both always secure and always succinct, while
FlyClient NIPoPoWs cannot be built on top of previous NIPoPoWs
in an online fashion. All of these properties are required for log-
arithmic space mining. Our protocol is heavily inspired by these
protocols and the core idea is based on superblock NIPoPoWs, al-
beit with critical changes that ensure security, succinctness, and the
proofs being online.
Lastly, CODA [36] has been suggested to compress both consen-
sus and application data together, but the mechanism requires a
trusted setup, has no treatment of security loss due to zero-knowl-
edge recursivity, and may prove impractical in terms of proof sizes
or generation times.
Structure. We present our construction in stages. First, we discuss
how an existing miner can compress their full state. Next, we dis-
cuss how a newly booting miner can bootstrap from genesis using
only the compressed state. Subsequently, we show how a miner
with only the compressed state can mine new blocks, giving rise
to both light and full miners. Finally, we assemble our complete
protocol, in which all miners are light miners. These constructions
are accompanied by high-level security arguments, building an in-
tuitive understanding of why the protocol works. After the full
construction has been presented, the formal security analysis in
the random oracle and backbone model follows. This analysis part
is also where our mathematical framework for the treatment of
suppression attacks is put forth. We conclude by discussing the
limitations and shortcomings of our protocol.
2 CONSENSUS AND APPLICATION DATA
Application state. Blockchain systems maintain certain applica-
tion state. This state can be used to, for example, determine who
owns how much money. There are two primary ways of represent-
ing ownership in today’s blockchains: A UTXO-based system, in
which the application state is comprised of the unspent transaction
outputs that remain available for spending; and an accounts-based
system, in which the application state is comprised of accounts and
their balances. The first one is used primarily by Bitcoin, while the
second one is used by Ethereum.
The application state evolves over time when transactions are
applied to it. A transaction is a state evolution operator applied
on the application state. Given a previous application state and a
transaction, a new application state can be computed. Each block
in the chain contains multiple transactions in a particular order.
As such, a block is itself a state evolution operator which applies
multiple transactions in order. By applying a block to a previous
application state, a new application state can be computed.
There are two schools of thought regarding what should be stored
in a block. In the first school of thought, only transactions (deltas)
are stored. The application state at the end of the blockchain can
be computed by starting at the genesis application state (an empty
application state) and traversing the blockchain, applying the state
evolution described by each block, in order, and arriving at the fi-
nal application state. This is what Bitcoin does. The other school
of thought proposes storing both transactions and the state after
these transactions have been applied, a so-called snapshot, in each
block. In such systems, if one holds the longest chain, the applica-
tion state at the end of the chain does not need to be computed by
applying any deltas. Instead, a block near the end of the chain can
simply be inspected and the application state within it extracted.
It is possible to apply either school of thought to either applica-
tion state model. Bitcoin keeps only deltas for a UTXO-based appli-
cation state. However, nothing prevents Bitcoin from committing
to the newly computed UTXO in every block [13, 17, 35], and in fact
some Bitcoin forks have already done so. On the other hand, Ethe-
reum keeps both deltas and snapshots in blocks. While the snap-
shots are not necessary, they are helpful. For the rest of this paper,
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3488we assume a proof-of-work blockchain in which each block commits
to an application state snapshot. The exact application state format
(UTXO, accounts, or something else) is irrelevant for our purposes.
In both schools of thought, it is imperative that the validity of
the application data (deltas or snapshots) is verified before a block
can be accepted as valid. For example, in a snapshotted system,
miners must check that the snapshot committed to a block was
obtained by applying the transactions to the previous snapshot.
Blocks in chains store the application data —transactions and
snapshots— in their body. This data is organized into an authenti-
cated data structure, such as a Merkle Tree [37], and placed into
a block header, which contains the consensus data. The consensus
data consist of the commitment 𝑥 to the application data; a proof-
of-work nonce 𝑐𝑡𝑟; and a reference 𝑠 to the previous block. It may
also contain additional metadata such as timestamps. These data
are hashed together using a hash function 𝐻 to obtain the blockid
𝐻(𝑐𝑡𝑟 ∥ 𝑥 ∥ 𝑠), which is used as the reference 𝑠′ in the next block.
Bootstrapping. Let us now discuss how a bootstrapping node can
synchronize with the rest of the network. A bootstrapping node is
a node holding only the genesis block and booting for the first time.
A wallet node is interested in the current application state that con-
cerns it. For example, it is interested to learn which UTXOs it owns,
or how much money is in its own accounts. The custodial history
of how these assets came to belong to it is irrelevant [17], beyond
archival purposes, as long as it can be sure that the assets it holds
correspond to the correct application state based on the history
that took place. Inspecting or having access to this history itself is
not important for consensus purposes. As such, this node can syn-
chronize with the rest of the network using the SPV method [39]: It
downloads only the block headers to determine which chain is the
longest one. It then inspects a block near the end of the chain and
extracts the balance from the Merkle tree leaf for its own accounts,
or for its UTXOs. This is sufficient to know the assets that it owns.
In case some nodes are interested in the history of the blockchain,
this history can be maintained by special archival nodes or block
explorers, but is not necessary for the maintenance of the security
of the network.
A miner bootstrapping their node can function in a similar man-
ner: Download only the block headers to determine the longest
chain, then inspect a block near the end of the chain to obtain the