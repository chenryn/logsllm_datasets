blver(unbl(blsign(bl(x, z), sk(y)), z), x, pk(y)) = true
blmsg(unbl(blsign(bl(x, z), y), z))
eq(x, x)
∧(true, true)
∨(true, x)
∨(x, true)
= x
= true
= true
= true
= true
3.1 An Underlying Cryptographic Base
Theory
The base equational theory we consider in this paper is
given in Table 3. (Note again though that any other base the-
ory would work as well.) First, it consists of functions for
constructing and destructing pairs, encrypting and decrypt-
ing messages by symmetric and asymmetric cryptography,
signing messages and verifying signatures, modelling pub-
lic and private keys, hashing, and constructing and verifying
blind signatures. In blind signature schemes, the content of
a message is disguised before it is signed while still ensur-
ing public veriﬁability of the signature against the unmodi-
ﬁed message. These functions have received prior investiga-
tion within the applied pi-calculus, e.g., to analyze the JFK
protocol [3] and the electronic voting protocol FOO 92 [23].
Second, the theory contains three binary functions eq, ∧,
and ∨ for modelling equality test, conjunction, and dis-
junction, respectively; these functions allow for modelling
monotone Boolean formulas. In our example theory, we do
not consider additional functions for, e.g., negation or spec-
ifying explicit inequalities. We shall often write = instead
of eq and use inﬁx notation for the functions eq, ∧, and ∨.
(cid:9)
Table 4 Equational theory for zero-knowledge
ΣZK = Σbase ∪
ZKi,j, Veri,j, Publici, Formula,
αi, βi, true | i, j ∈ N
(cid:10)
ZKi,j of arity i + j + 1, Veri,j of arity 2, Publici and Formula of
arity 1, αi, βi and true of arity 0.
EZK is the smallest equational theory satisfying the equations of
Ebase and the following equations deﬁned over all terms (cid:11)M , (cid:12)N , F :
Publicp(ZKi,j((cid:11)M , (cid:12)N , F )) = Np
Formula(ZKi,j((cid:11)M , (cid:12)N , F )) = F
Veri,j(F, ZKi,j((cid:11)M , (cid:12)N , F )) = true
1) EZK (cid:6) F {(cid:11)M /(cid:12)α}{(cid:12)N /(cid:12)β} = true
with p ∈ [1, j]
iff
2) F is an (i, j)-formula
3.2 The Equational Theory for Zero-
Knowledge
Our equational theory for abstractly reasoning about
non-interactive zero-knowledge proofs is given in Table 4;
its components are explained in the following. A non-
interactive zero-knowledge proof is represented as a term
quences M1, . . . , Mi and N1, . . . , Nj of terms, respectively,
and where F constitutes a formula over those terms, see be-
low. Hence ZKi,j is a function of arity i + j + 1. We shall
of the form ZKi,j((cid:11)M , (cid:12)N , F ), where (cid:11)M and (cid:12)N denote se-
often omit arities and write this statement as ZK((cid:11)M ; (cid:12)N ; F ),
statement will keep secret the terms (cid:11)M , called the state-
ment’s private component, while the terms (cid:12)N , called the
letting semicolons separate the respective components. The
statement’s public component, will be revealed to the veri-
ﬁer and to the adversary. The formula F constitutes a con-
stant without names and variables, which is built upon dis-
tinguished nullary functions αi and βi with i ∈ N.
Deﬁnition 2 ((i, j)-formulas) We call a term an (i, j)-
formula if the term contains neither names nor variables,
and if for every αk and βl occurring therein, we have
k ∈ [1, i] and l ∈ [1, j].
The values αi and βj in F constitute placeholders for the
terms Mi and Nj, respectively. For instance,
ZK( k ; m, encsym(m, k) ; β2 = encsym(β1, α1))
denotes a zero-knowledge proof that the term encsym(m, k)
is an encryption of m with k. More precisely, the state-
ment reads: “There exists a key such that the ciphertext
encsym(m, k) is an encryption of m with this key”. As men-
tioned before, encsym(m, k) and m are revealed by the proof
while k is kept secret. This is formalized in general terms
by the following inﬁnite set of equational rules:
205
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
Publicp(ZKi,j((cid:11)M , (cid:12)N , F )) = Np with p ∈ [1, j]
Formula(ZKi,j((cid:11)M , (cid:12)N , F )) = F
where Publicp and Formula constitute functions of arity 1.
Since there is no destructor associated to the statement’s pri-
vate component, the terms (cid:11)M are kept secret. This models
We deﬁne a statement ZKi,j((cid:11)M , (cid:12)N , F ) to hold true if F is
the zero-knowledge property discussed in the introduction.
an (i, j)-formula and the formula obtained by substituting
all αk’s and βl’s in F with the corresponding values Mk
and Nl is valid. Veriﬁcation of a statement ZKi,j with re-
spect to a formula is modelled as a function Veri,j of arity
2 that is deﬁned by the following equational rule:
Veri,j(F, ZKi,j ((cid:11)M , (cid:12)N , F )) = true
1) EZK (cid:5) F {(cid:11)M /(cid:12)α}{(cid:12)N/(cid:12)β} = true
iff
2) F is an (i, j)-formula
where {(cid:11)M /(cid:12)α}{(cid:12)N/(cid:12)β} denotes the substitution of each αk
with Mk and of each βl with Nl.
Intuitively, this rule
guarantees in the abstract model the soundness and correct-
ness of zero-knowledge protocols. A formal computational
soundness result for a similar, but simpler abstraction of
zero-knowledge proofs has recently been proven in [8].
3.3 An Illustrating Example
We illustrate the zero-knowledge abstraction by means
of the following example protocol. We keep the protocol
simplistic in order to focus on the usage of zero-knowledge
proofs; in particular, we ignore vulnerabilities due to replay
attacks and corresponding countermeasures such as nonces
and timestamps.
A
B
Si
A,B
{A,B}kSi
ZK
Party B receives a signed message {A, B} from some
server Si ∈ {S1, . . . , Sn}.
(This signed message might,
e.g., serve as a certiﬁcate that allows B to prove that he has
been authorized to contact A.) While B should be able to
convince A that he owns a signature on this message issued
by one of the possible n servers, the protocol should ensure
that A does not learn which server Si in fact issued the sig-
nature. This prevents B from simply forwarding the signed
message to A. Instead, B proves knowledge of such a sig-
nature by a non-interactive zero-knowledge proof ZK.
We now carefully examine the proof of knowledge ZK.
We aim at formalizing the following statement: “There
exists α such that α is a signature of A and B, and
this signature was created using one of the signature keys
kS1
, . . . , kSn”. Coming up with a formalization of this state-
ment ﬁrst requires us to tell the secret terms from the terms
leaked to the veriﬁer. The identiﬁers of A and B clearly
have to be revealed since the proof intends to allow B to
prove that he has been authorized to contact A. The signa-
),
ture itself and the corresponding veriﬁcation key pk(kSi
however, have to be kept secret to preserve the anonymity
of Si. These requirements are cast in our zero-knowledge
notation as follows:
ZK(sign(pair(A, B), sk(kSi
))) =
⎛
⎜⎜⎝ sign(pair(A, B), sk(kSi
(cid:16) (cid:17)
), . . . , pk(kSn
α2 = βi
pk(kS1
(cid:18)
ZK2,n+1
)), pk(kSi
);
), pair(A, B);
∧ ver(α1, βn+1, α2))
⎞
⎟⎟⎠
i=1,n
the
that
statement
signature
captures
This
)) and the public key pk(kSi
)
sign(pair(A, B), sk(kSi
used in the veriﬁcation are kept secret (i.e., the identity of
Si is not revealed) while the proof reveals the public keys
of all servers (this includes pk(kSi
) but does not tell it from
the remaining public keys) as well as the identiﬁers of A
and B. The formula states that the veriﬁcation key of the
)}, and
signature belongs to the set {pk(kS1
that the signed message consists of a pair composed of the
identiﬁers of A and B. We obtain the following description
of a single protocol run:
), . . . , pk(kSn
A
B
(cid:2) a(y).if Test then b(cid:3)ok(cid:4) else b(cid:3)badA(cid:4)
)))
(cid:2) a(x).if (ver(x, pair(A, B), pk(kSi
then a(cid:3)ZK(x)(cid:4) else b(cid:3)badB (cid:4)
))(cid:4)
Si
Prot (cid:2) νkA.νkB.νkS1
(cid:2) a(cid:3)sign(pair(A, B), sk(kSi
. . . . .νkSn
.
)(cid:4). . . . .a(cid:3)pk(kSn
a(cid:3)pk(kS1
)(cid:4).(A | B | Si)
where Test constitutes the following condition:
(cid:16)(cid:16) (cid:17)
(cid:18)
(cid:18)
(cid:22)
Ver2,n+1
α2 = βi
∧ ver(α1, βn+1, α2), y
= true
i=1,n
Publici(y) = pk(kSi
) ∧ Publicn+1(y) = pair(A, B)
i=1,n
We wrote Test using conjunctions only to increase readabil-
ity; Test can be straightforwardly encoded in the syntax of
the calculus by a sequence of conditionals.
4 Towards a Mechanized Analysis of Zero-
Knowledge
The equational theory EZK deﬁned in the previous sec-
tion is not suitable for existing tools for mechanized secu-
rity protocol analysis. The reason is that the number of
possible formulas, and thus the number of equational rules
206
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
/
/
o
o
o
o
in EZK, is inﬁnite. In this section, we specify an equivalent
equational theory in terms of a convergent rewriting system.
This theory turns out to be suitable for ProVerif [10], a well-
established tool for mechanized veriﬁcation of different se-
curity properties of cryptographic protocols speciﬁed in a
variant of the applied pi-calculus.
4.1 A Finite
Knowledge
Speciﬁcation
of Zero-
The central idea of our equivalent ﬁnite theory is to fo-
cus on the zero-knowledge proofs used within the process
speciﬁcation and to abstract away from the additional ones
that are possibly generated by the environment. This makes
ﬁnite both the signature and the speciﬁcation of the equa-
tional theory.
Pinning down this conceptually elegant and appealing
idea requires to formally characterize the zero-knowledge
proofs generated, veriﬁed, and read in the process speciﬁca-
tion. First, we track the zero-knowledge proofs generated or
veriﬁed in the process speciﬁcation by a set F of triples of
the form (i, j, F ), where i is the arity of the private compo-
nent, j the arity of the public component, and F the formula.
Second, we record the arity h (resp. l) of the largest private
component (resp. public component) of zero-knowledge
proofs used in the process speciﬁcation. For terms M and
processes P , we let terms(M ) denote the set of subterms of
M and terms(P ) denote the set of terms in P . We can now
formally deﬁne the notion of (F , h, l)-validity of terms and
processes.
Deﬁnition 3 (Process Validity) A term Z is (F , h, l)-valid
if and only if the following conditions hold:
every ZKi,j((cid:11)M , (cid:12)N , F )
Veri,j (F, M ) ∈ terms(Z),
1. for
∈
terms(Z) and
(a) F is an (i, j)-formula and (i, j, F ) ∈ F,
(b) F ∈ TΣbase∪{αk,βl |k∈[1,i],l∈[1,j]},
(c) and for every (i, j, F (cid:4)) ∈ F such that EZK (cid:5)
F = F (cid:4), we have F = F (cid:4).
2. For every k ∈ N, αk and βk occur in Z only inside of
the last argument of some ZKi,j or Veri,j function.
3. for every (i, j, F ) ∈ F, we have i ∈ [0, h] and j ∈
[0, l].
4. for every Publicp(M ) ∈ terms(Z), we have p ∈ [1, l].
A process P is (F , h, l)-valid if and only if M is (F , h, l)-
valid for every M ∈ terms(P ).
We check that each zero-knowledge proof generation and
veriﬁcation is tracked in F (condition 1a). For the sake of
simplicity, we prevent the occurrence of zero-knowledge op-
erators within formulas in the process speciﬁcation (condi-
tion 1b). Without loss of generality, we also require that
equivalent formulas occurring in zero-knowledge proofs of
the same arity are syntactically equal (condition 1c) and that
the αi’s and βj’s only occur within formulas (condition 2).
Finally, we check that the arity of private and public compo-
nents of zero-knowledge proofs used in the process speciﬁ-
cation is less or equal than h and l, respectively (conditions
3 and 4).
Given an (F , h, l)-valid process, we can easily deﬁne a
ﬁnite equational theory EF ,h,l
FZK for (F , h, l)-valid terms by
a convergent rewriting system. For any (i, j, F ) ∈ F, we
include in the signature ΣF ,h,l
F
i,j
F
i,j of arity i + j and 1, respectively. We then replace
and Ver
every term ZKi,j((cid:11)M , (cid:12)N , F ) and Veri,j (F, M ) in the pro-
FZK the function symbols ZK
i,j((cid:11)M , (cid:12)N ) and Ver
F
F
i,j(M ), respec-
cess speciﬁcation by ZK
F
tively. Since formulas are uniquely determined by the ZK
i,j
function symbol, they can be omitted from the protocol
speciﬁcation. Furthermore, we need in the equational the-
ory only those functions αi and βj that satisfy i ∈ [1, h] and
j ∈ [1, l]; the remaining ones can be safely omitted since
they do not offer the adversary any additional capabilities.
For ﬁnitely modelling the veriﬁcation of zero-knowledge
proofs, we include in ΣF ,h,l
F
i,j
of arity i + j + 1. A term ZK
PZK
ing a ﬁnite description, since the number of formulas in the