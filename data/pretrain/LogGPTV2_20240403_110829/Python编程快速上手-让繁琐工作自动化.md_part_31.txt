### 优化后的文本

#### 遍历文件夹树并压缩文件
```python
import os
import zipfile

def backupToZip(folder):
    # 创建一个唯一的ZIP文件名
    number = 1
    while True:
        zip_filename = os.path.basename(folder) + '_' + str(number) + '.zip'
        if not os.path.exists(zip_filename):
            break
        number += 1

    # 创建一个新的ZIP文件
    print(f'Creating {zip_filename}...')
    backupZip = zipfile.ZipFile(zip_filename, 'w')

    # 遍历整个文件夹树
    for foldername, subfolders, filenames in os.walk(folder):
        print(f'Adding files in {foldername}...')
        
        # 将当前文件夹添加到ZIP文件
        backupZip.write(foldername)
        
        # 添加该文件夹中的所有文件到ZIP文件
        for filename in filenames:
            newBase = os.path.basename(folder) + '_'
            if filename.startswith(newBase) and filename.endswith('.zip'):
                continue  # 跳过备份的ZIP文件
            
            backupZip.write(os.path.join(foldername, filename))

    backupZip.close()
    print('Done.')

backupToZip('C:\\delicious')
```

#### 代码解释
- `os.walk()` 函数用于遍历文件夹树。在每次迭代中，它返回当前文件夹名称、子文件夹列表和文件名列表。
- 在外部 `for` 循环中，当前文件夹被添加到 ZIP 文件。
- 内部 `for` 循环遍历 `filenames` 列表中的每个文件，并将它们添加到 ZIP 文件中，但会跳过之前生成的备份 ZIP 文件。

#### 运行示例
如果运行该程序，输出如下：
```
Creating delicious_1.zip...
Adding files in C:\delicious...
Adding files in C:\delicious\cats...
Adding files in C:\delicious\waffles...
Adding files in C:\delicious\walnut...
Adding files in C:\delicious\walnut\waffles...
Done.
```

第二次运行时，它会在 `C:\delicious` 中创建一个名为 `delicious_2.zip` 的新 ZIP 文件，以此类推。

#### 其他类似程序的想法
你可以在其他程序中遍历目录树并将文件添加到压缩的 ZIP 归档文件中。例如：
- 遍历一个目录树，将特定扩展名的文件（如 `.txt` 或 `.py`）归档，并排除其他文件。
- 遍历一个目录树，将除 `.txt` 和 `.py` 文件以外的其他文件归档。
- 在目录树中查找包含最多文件数或使用最大磁盘空间的文件夹。

#### 小结
即使是有经验的计算机用户，有时也需要处理大量文件。`os` 和 `shutil` 模块提供了复制、移动、重命名和删除文件的功能。在删除文件时，可以使用 `send2trash` 模块将文件移动到回收站或垃圾箱，而不是永久删除。在编程处理文件时，建议先注释掉实际操作文件的代码，并添加 `print()` 调用来验证程序的行为。

通常，你需要对整个文件夹及其子文件夹执行这些操作。`os.walk()` 函数可以帮助你遍历文件夹，使你可以专注于对其中文件的操作。`zipfile` 模块提供了一种方法，用 Python 压缩和解压 ZIP 归档文件。结合 `os` 和 `shutil` 模块中的文件处理函数，可以轻松地将硬盘上任意位置的一些文件打包成 ZIP 文件，便于上传到网站或作为电子邮件附件发送。

#### 习题
1. `shutil.copy()` 和 `shutil.copytree()` 之间的区别是什么？
2. 什么函数用于文件重命名？
3. `send2trash` 和 `shutil` 模块中的删除函数之间的区别是什么？
4. `ZipFile` 对象有一个 `close()` 方法，类似于 `File` 对象的 `close()` 方法。`ZipFile` 对象的什么方法等价于 `File` 对象的 `open()` 方法？

#### 实践项目
1. **选择性拷贝**：编写一个程序，遍历一个目录树，查找特定扩展名的文件（如 `.pdf` 或 `.jpg`），并将它们复制到一个新的文件夹中。
2. **删除不需要的文件**：编写一个程序，遍历一个目录树，查找特别大的文件或文件夹（例如超过 100MB 的文件），并将这些文件的绝对路径打印到屏幕上。
3. **消除缺失的编号**：编写一个程序，在一个文件夹中找到所有带指定前缀的文件（如 `spam001.txt`, `spam002.txt` 等），并定位缺失的编号。让该程序对所有后面的文件重命名，以消除缺失的编号。作为附加挑战，编写另一个程序，在一些连续编号的文件中，空出一些编号，以便加入新的文件。

#### 第 10 章 调试
随着你编写更复杂的程序，可能会遇到不那么简单的缺陷。本章介绍了一些工具和技巧，帮助你找到程序中缺陷的根源，并更快更容易地修复它们。

#### 抛出异常
当 Python 尝试执行无效代码时，会抛出异常。你可以使用 `raise` 语句在代码中抛出自己的异常。`raise` 语句包含以下部分：
- `raise` 关键字；
- 对 `Exception` 函数的调用；
- 传递给 `Exception` 函数的字符串，包含有用的错误信息。

例如：
```python
raise Exception('This is the error message.')
```

如果没有 `try` 和 `except` 语句覆盖抛出异常的 `raise` 语句，程序就会崩溃并显示异常的错误信息。

#### 反向跟踪
反向跟踪是异常发生时显示的调用栈信息。它显示了导致异常的函数调用顺序。例如：
```python
def spam():
    bacon()

def bacon():
    raise Exception('This is the error message.')

spam()
```

输出：
```
Traceback (most recent call last):
  File "errorExample.py", line 7, in 
    spam()
  File "errorExample.py", line 2, in spam
    bacon()
  File "errorExample.py", line 5, in bacon
    raise Exception('This is the error message.')
Exception: This is the error message.
```

通过反向跟踪，可以看到错误发生在 `bacon()` 函数的第 5 行，而这次 `bacon()` 调用来自 `spam()` 函数的第 2 行，`spam()` 函数又在第 7 行被调用。

#### 获取反向跟踪信息
你可以使用 `traceback.format_exc()` 获取反向跟踪信息的字符串形式。例如：
```python
import traceback

try:
    raise Exception('This is the error message.')
except:
    errorFile = open('errorInfo.txt', 'w')
    errorFile.write(traceback.format_exc())
    errorFile.close()
    print('The traceback info was written to errorInfo.txt.')
```

这会将反向跟踪信息写入 `errorInfo.txt` 文件，并继续执行程序。

#### 断言
断言是一个心智正常的检查，确保代码没有做明显错误的事情。断言由 `assert` 语句执行。如果条件为 `False`，则会抛出异常。`assert` 语句包含以下部分：
- `assert` 关键字；
- 条件（即求值为 `True` 或 `False` 的表达式）；
- 逗号；
- 当条件为 `False` 时显示的字符串。

例如：
```python
assert condition, 'Error message'
```

希望这些优化后的文本能帮助你更好地理解和实现相关功能。