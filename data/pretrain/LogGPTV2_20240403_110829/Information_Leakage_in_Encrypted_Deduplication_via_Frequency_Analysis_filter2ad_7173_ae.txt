Figure 6(b) next shows the results of the synthetic dataset.
In ciphertext-only mode, the locality-based attack can just suc-
cessfully infer one out of about 420 thousands of ciphertext-
plaintext chunk pairs for all segment sizes. Also, as in the
FSL dataset, the inference rate increases with the leakage
rate. However, the increasing speed of the synthetic dataset
is higher than that of the FSL dataset. The reason is that
each snapshot of the synthetic dataset is of a relatively small
size (about 4.28GB) and forms fewer segments with different
minimum ﬁngerprints. This makes the frequency rank of
ciphertext chunks less disturbed by MinHash encryption. Even
so, when the leakage rate is 0.2%, the inference rate is about
7.63-7.68%, which is dramatically reduced from the previous
inference rate (about 28.32%) without MinHash encryption.
We pose it as a future work on how to further suppress the
inference rate in small-size backups.
Experiment B.2 (Storage efﬁciency): Finally, we show that
the storage efﬁciency is preserved by MinHash encryption.
We add the encrypted backups to storage in the order of
their creation times, and measure the storage saving as the
percentage of the total size of all ciphertext chunks reduced
by deduplication. We compare the storage saving of MinHash
encryption with that of exact deduplication that operates at the
chunk level and eliminates all duplicate chunks. Here, we do
not consider the metadata overhead.
Figure 7(a) shows the storage saving after storing each FSL
backup. We observe that after storing all ﬁve backups, the stor-
age saving achieves 83.61%, 83.17% and 82.69% for segment
sizes 512KB, 1MB, and 2MB, respectively. Compared to exact
deduplication, their savings are reduced by a difference of
3.12%, 3.56%, and 4.03%, respectively. Figure 7(b) shows the
storage saving after storing each synthetic snapshot (excluding
the initial snapshot). After ten backups, there is a storage sav-
)
%
(
g
n
i
v
a
S
e
g
a
r
o
t
S
 100
 80
 60
 40
 20
 0
 100
)
%
(
g
n
i
v
a
S
e
g
a
r
o
t
S
Exact
512KB
1MB
2MB
 80
 60
 40
 20
 0
Exact
512KB
1MB
2MB
Jan 22 Feb 22 Mar 22 Apr 21 May 21
 1  2  3  4  5  6  7  8  9  10
Backup
Backup
(a) FSL dataset
(b) Synthetic dataset
Fig. 7. Experiment B.2 (Storage efﬁciency).
ing of 86.28%, 86.15% and 85.88% for segment sizes 512KB,
1MB, and 2MB, respectively. The drop of the storage saving
is also small (less than 4%) compared to exact deduplication,
which achieves a storage saving of 89.15%. Overall, MinHash
encryption maintains high storage efﬁciency for both datasets.
VIII. RELATED WORK
Encrypted deduplication: Traditional encrypted deduplica-
tion systems (e.g., [4], [14], [16], [24], [43], [46]) mainly build
on convergent encryption [16], in which the encryption key is
directly derived from the cryptographic hash of the content to
be encrypted. CDStore [28] integrates convergent encryption
with secret sharing to support fault-tolerant storage. However,
convergent encryption is vulnerable to brute-force attacks (see
Section II-B). Server-aided MLE protects against brute-force
attacks by maintaining content-to-key mappings in a dedicated
key manager, and has been implemented in various storage
system prototypes [5], [8], [38], [41]. Given that the dedicated
key manager is a single-point-of-failure, Duan [17] proposes to
maintain a quorum of key managers via threshold signature for
fault-tolerant key management. Note that all the above systems
build on deterministic encryption to preserve the deduplication
capability of ciphertext chunks, and hence are vulnerable to
the inference attacks studied in this paper.
Instead of using deterministic encryption, Bellare et al. [9]
propose an MLE variant called random convergent encryp-
tion (RCE), which uses random keys for chunk encryption.
However, RCE needs to add deterministic tags into ciphertext
chunks for checking any duplicates, so that the adversary
can count
the deterministic tags to obtain the frequency
distribution. Liu et al. [31] propose to encrypt each plaintext
chunk with a random key, while the key is shared among users
via password-based key exchange. However,
the proposed
approach incurs signiﬁcant key exchange overhead, especially
when the number of chunks is huge.
From the theoretic perspective,
there are several works
that strengthen the security of encrypted deduplication and
protect the frequency distribution of original chunks. Abadi
et al. [3] propose two encrypted deduplication schemes for
the chunks that depend on public parameters, yet either of
them builds on computationally expensive non-interactive zero
knowledge (NIZK) proofs or produces deterministic ciphertext
components. Interactive MLE [7] addresses chunk correlation
and parameter dependence, yet it is impractical for the use of
fully homomorphic encryption (FHE). This paper differs from
the above works by using lightweight primitives for practical
encrypted deduplication.
Inference attacks: Frequency analysis [32] is the classical
inference attack and has been historically used to recover
plaintexts from substitution-based ciphertexts. It is also used
as a building block in recently proposed attacks. Kumar et al.
[26] use frequency-based analysis to de-anonymize query logs.
Islam et al. [23] compromise keyword privacy based on the
leakage of the access patterns in keyword search. Naveed et al.
[36] propose to conduct frequency analysis via combinatorial
optimization and present attacks against CryptDB. Kellaris
et al. [25] propose reconstruction attacks against any system
that leaks access pattern or communication volume. Pouliot
et al. [37] present the graph matching attacks on searchable
encryption. In contrast, we focus on encrypted deduplication
storage and exploit workload characteristics to construct attack
and defense approaches.
Ritzdorf et al. [40] exploit the size information of dedu-
plicated content and build an inference attack that determines
if a ﬁle has been stored. Our work is different as we focus
on inferring the content of data chunks based on chunk
frequencies. We further examine the effectiveness of MinHash
encryption in defending our proposed attack.
Some inference attacks exploit the active adversarial ca-
pability. Brekne et al. [1] construct bogus packets to de-
anonymize IP addresses. Cash et al. [13] and Zhang et al. [48]
propose ﬁle-injection attacks against searchable encryption.
Our proposed attacks do not rely on the active adversarial
capability.
IX. CONCLUSION
Encrypted deduplication has been deployed in commercial
cloud environments and extensively studied in the literature to
simultaneously achieve both data conﬁdentiality and storage
efﬁciency, yet we argue that its data conﬁdentiality remains
not fully guaranteed. In this paper, we demonstrate how the
deterministic nature of encrypted deduplication makes it sus-
ceptible to information leakage caused by frequency analysis.
We consider a locality-based attack, which exploits the chunk
locality property of backup workloads that are commonly
targeted by deduplication systems, so as to infer the content of
a large fraction of plaintext chunks from the ciphertext chunks
of the latest backup. We show how the locality-based attack
can be practically implemented, and demonstrate its severity
through trace-driven evaluation on both real-world and syn-
thetic datasets. To defend against information leakage, we con-
sider MinHash encryption, which builds on Broder’s theorem
to relax the deterministic nature of encrypted deduplication by
encrypting some identical plaintext chunks to multiple distinct
ciphertext chunks. Our trace-driven evaluation demonstrates
that MinHash encryption is robust against the locality-based
attack, while maintaining deduplication effectiveness as also
shown by previous deduplication approaches. The source code
of our attack and defense implementations is now available at
http://adslab.cse.cuhk.edu.hk/software/freqanalysis.
ACKNOWLEDGMENTS
This work was supported in part by grants by National
Natural Science Foundation of China (Grant No. 61602092),
Fundamental Research Funds for the Central Universities
(Grant No. ZYGX2016KYQD115), Key Basic Research of
Sichuan Province (Grant No. 2016JY0007),
the Research
Grants Council of Hong Kong (GRF CUHK413813 and CRF
C7036-15), and Cisco University Research Program Fund
(CG#593822) from Silicon Valley Community Foundation.
REFERENCES
[1] “Anonymization of IP trafﬁc monitoring data: Attacks on two preﬁx-
preserving anonymization schemes and some proposed remedies,” in
Proc. of PETs, 2006.
[2] “FSL traces and snapshots public archive,” http://tracer.ﬁlesystems.org/,
2014.
[3] M. Abadi, D. Boneh, I. Mironov, A. Raghunathan, and G. Segev,
“Message-locked encryption for lock-dependent messages,” in Proc. of
CRYPTO, 2013.
[4] P. Anderson and L. Zhang, “Fast and secure laptop backups with
encrypted de-duplication,” in Proc. of USENIX LISA, 2010.
[5] F. Armknecht, J.-M. Bohli, G. O. Karame, and F. Youssef, “Transparent
data deduplication in the cloud,” in Proc. of ACM CCS, 2015.
screw
Arrington,
“AOL:
[6] M.
“this
was
a
up”,”
https://techcrunch.com/2006/08/07/aol-this-was-a-screw-up/, 2006.
[7] M. Bellare and S. Keelveedhi, “Interactive message-locked encryption
and secure deduplication,” in Proc. of PKC, 2015.
[8] M. Bellare, S. Keelveedhi, and T. Ristenpart, “DupLESS: Server-aided
encryption for deduplicated storage,” in Proc. of USENIX Security, 2013.
[9] ——, “Message-locked encryption and secure deduplication,” in Proc.
of EUROCRYPT, 2013.
[10] D. Bhagwat, K. Eshghi, D. D. Long, and M. Lillibridge, “Extreme
binning: Scalable, parallel deduplication for chunk-based ﬁle backup,”
in Proc. of IEEE MASCOTS, 2009.
[11] J. Black, “Compare-by-hash: a reasoned analysis,” in Proc. of USENIX
ATC, 2006.
[26] R. Kumar, J. Novak, B. Pang, and A. Tomkins, “On anonymizing query
logs via token-based hashing,” in Proc. of ACM WWW, 2007.
[27] M.-S. Lacharit´e and K. G. Paterson, “A note on the optimality of fre-
quency analysis vs. lp-optimization,” IACR Cryptology ePrint Archive,
2015.
[28] M. Li, C. Qin, and P. P. C. Lee, “CDStore: Toward reliable, secure,
and cost-efﬁcient cloud storage via convergent dispersal,” in Proc. of
USENIX ATC, 2015.
[29] M. Lillibridge, K. Eshghi, and D. Bhagwat, “Improving restore speed
for backup systems that use inline chunk-based deduplication,” in Proc.
of USENIX FAST, 2013.
[30] M. Lillibridge, K. Eshghi, D. Bhagwat, V. Deolalikar, G. Trezise, and
P. Camble, “Sparse indexing: Large scale, inline deduplication using
sampling and locality,” in Proc. of USENIX FAST, 2009.
[31] J. Liu, N. Asokan, and B. Pinkas, “Secure deduplication of encrypted
data without additional independent servers,” in Proc. of ACM CCS,
2015.
[32] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone, “Handbook of
applied cryptography,” 2001.
[33] D. T. Meyer and W. J. Bolosky, “A study of practical deduplication,” in
Proc. of USENIX FAST, 2011.
[34] M. Mulazzani, S. Schrittwieser, M. Leithner, M. Huber, and E. Weippl,
“Dark clouds on the horizon: Using cloud storage as attack vector and
online slack space,” in Proc. of USENIX Security, 2011.
[35] M. Naveed, M. Prabhakaran, and C. Gunter, “Dynamic searchable
encryption via blind storage,” in Proc. of IEEE S&P, May 2014.
[36] M. Naveed, S. Kamara, and C. V. Wright, “Inference attacks on property-
preserving encrypted databases,” in Proc. of ACM CCS, 2015.
[37] D. Pouliot and C. V. Wright, “The shadow nemesis: Inference attacks
on efﬁciently deployable, efﬁciently searchable encryption,” in Proc. of
ACM CCS, 2016.
[38] C. Qin, J. Li, and P. P. C. Lee, “The design and implementation of a
rekeying-aware encrypted deduplication storage system,” ACM Trans.
on Storage, vol. 13, no. 1, pp. 9:1–9:30, Mar 2017.
[39] M. O. Rabin, “Fingerprinting by random polynomials,” Center for
Research in Computing Technology, Harvard University. Tech. Report
TR-CSE-03-01, 1981.
[40] H. Ritzdorf, G. Karame, C. Soriente, and S. ˇCapkun, “On Information
Leakage in Deduplicated Storage Systems,” in Proc. of ACM CCSW,
2016.
[41] P. Shah and W. So, “Lamassu: Storage-efﬁcient host-side encryption,”
[12] A. Z. Broder, “On the resemblance and containment of documents,” in
in Proc. of USENIX ATC, 2015.
Proc. of IEEE Compression and Complexity of Sequences, 1997.
[42] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li, “Oblivious RAM with
[13] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart, “Leakage-abuse attacks
o((logn)3) worst-case cost,” in Proc. of ASIACRYPT, 2011.
against searchable encryption,” in Proc. of ACM CCS, 2015.
[43] M. W. Storer, K. Greenan, D. D. Long, and E. L. Miller, “Secure data
[14] L. P. Cox, C. D. Murray, and B. D. Noble, “Pastiche: Making backup
deduplication,” in Proc. of ACM StorageSS, 2008.
[44] Z. Sun, G. Kuenning, S. Mandal, P. Shilane, V. Tarasov, N. Xiao, and
E. Zadok, “A long-term user-centric analysis of deduplication patterns,”
in Proc. of IEEE MSST, 2016.
[45] G. Wallace, F. Douglis, H. Qian, P. Shilane, S. Smaldone, M. Cham-
ness, and W. Hsu, “Characteristics of backup workloads in production
systems,” in Proc. of USENIX FAST, 2012.
[46] Z. Wilcox-O’Hearn and B. Warner, “Tahoe: The least-authority ﬁlesys-
tem,” in Proc. of ACM StorageSS, 2008.
[47] W. Xia, H. Jiang, D. Feng, and Y. Hua, “SiLo: A similarity locality
based near exact deduplication scheme with low ram overhead and high
throughput,” in Proc. of USENIX ATC, 2011.
[48] Y. Zhang, J. Katz, and C. Papamanthou, “All your queries are belong
to us: the power of ﬁle-injection attacks on searchable encryption,” in
Proc. of USENIX Security, 2016.
[49] B. Zhu, K. Li, and R. H. Patterson, “Avoiding the disk bottleneck in
the data domain deduplication ﬁle system,” in Proc. of USENIX FAST,
2008.
cheap and easy,” in Proc. of USENIX OSDI, 2002.
[15] B. Darrow, “Harvard-afﬁliate McLean hospital
loses patient data,”
http://fortune.com/2015/07/29/mclean-hospital-loses-patient-data/, 2015.
[16] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer,
“Reclaiming space from duplicate ﬁles in a serverless distributed ﬁle
system,” in Proc. of IEEE ICDCS, 2002.
[17] Y. Duan, “Distributed key generation for encrypted deduplication:
Achieving the strongest privacy,” in Proc. of ACM CCSW, 2014.
[18] K. Eshghi and H. K. Tang, “A framework for analyzing and improving
content-based chunking algorithms,” HPL-2005-30R1, 2005.
[19] S. Ghemawat and J. Dean, “LevelDB: A fast key/value storage library
by Google,” https://github.com/google/leveldb, 2014.
[20] R. Hackett, “Linkedin lost 167 million account credentials
in
data breach,” http://fortune.com/2016/05/18/linkedin-data-breach-email-
password/, 2016.
[21] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Proofs of
ownership in remote storage systems,” in Proc. of ACM CCS, 2011.
[22] D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Side channels in cloud
services: Deduplication in cloud storage,” IEEE Security & Privacy,
vol. 8, no. 6, pp. 40–47, 2010.
[23] M. S. Islam, M. Kuzu, and M. Kantarcioglu, “Access pattern disclosure
on searchable encryption: Ramiﬁcation, attack and mitigation,” in Proc.
of NDSS, 2012.
[24] M. Kallahall, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu, “Plutus:
Scalable secure ﬁle sharing on untrusted storage,” in Proc. of USENIX
FAST, 2002.
[25] G. Kellaris, G. Kollios, K. Nissim, and A. ONeill, “Generic attacks on
secure outsourced databases,” in Proc. of ACM CCS, 2016.