title:VMCrypt: modular software architecture for scalable secure computation
author:Lior Malka
VMCrypt - Modular Software Architecture for Scalable
Secure Computation
Lior Malka
Intel (work done while at UMD)
PI:EMAIL
ABSTRACT
Garbled circuits play a key role in secure computation, but
existing implementations do not scale and are not modu-
lar.
In this paper we present VMCrypt, a library for se-
cure computation. This library introduces novel algorithms
that, regardless of the circuit being garbled or its size, have
a very small memory requirement and use no disk stor-
age. By providing an API (Abstract Programming Inter-
face), VMCrypt can be integrated into existing projects and
customized without any modiﬁcations to its source code. We
measured the performance of VMCrypt on several circuits
with hundreds of millions of gates. These are the largest
scalable secure computations done to date.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
security and protection
General Terms
Security, Performance, Algorithms
Keywords
Secure Computation, Software API, Scalable
1.
INTRODUCTION
Secure computation enables parties to collaborate while
keeping their information private. Speciﬁcally, a two-party
protocol for secure computation allows a server (holding in-
put x) and a client (holding input y) to compute f (x, y) such
that either party learns nothing beyond the output of f .
Yao’s Garbled Circuits Technique [31] is central to secure
computation. The ﬁrst phase in this approach is to create
a representation of f as a boolean circuit C. Next, in the
garbling phase, the server chooses secret keys (called wire
labels) for each wire in C, encrypts a a lookup table for each
gate, and sends all lookup tables (the garbled circuit) to the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
client. The server also sends wire labels corresponding to
x. Wire labels corresponding to y require oblivious transfer
(OT). Finally, in the evaluation phase the client uses the
wire labels for x and y to decrypt the lookup tables until
the output gates are decrypted and f (x, y) is revealed.
Yao’s technique has been implemented in Fairplay [21]
and TASTY [11], but these works focused on automation
aspects of secure computation (more details in Section 1.3).
This paper, however, is concerned with software engineering
challenges.
The ﬁrst challenge is scalability. Suppose, for example,
that f computes the intersection of databases x and y. The
circuit C representing f (x, y) could easily have billions of
gates. Holding it memory would require terabytes of RAM.
Wire labels or lookup tables would require a large hard drive.
Read/write operations will paralyze the operating system.
Recompilation (needed in Fairplay and TASTY) will take a
signiﬁcant amount of time, ruling out secure computation
on the ﬂy.
The second challenge is software modularity. Consider,
for example, a scenario where garbled circuits are to be in-
tegrated into an application that already has a client and a
server, and that, in addition, a speciﬁc method of encryption
should be used for garbling. The source code of the garbled
circuit software can be modiﬁed to accommodate this inte-
gration, but this would signiﬁcantly increase development
costs and is likely to introduce bugs into the source. Ide-
ally, developers would be provided with an abstract program-
ming interface (API) so that they can customize the software
without modifying the source code. This includes customiz-
ing the client and the server, the OT protocol, garbling,
encryption, and so on. Also, modules should be designed in
such a way that developers can use them to build a protocol
with any level of security (we have implemented the curious-
but-honest protocol). Another objective would be to allow
developers to replace parts of their circuits with improved
implementations by other developers, making modular not
only the software, but also the circuits themselves. Finally,
developers must be able to test circuits for correctness au-
tomatically, without having to run the secure protocol.
1.1 Our Results
We present VMCrypt - a fully customizable Java library
for secure computation. VMCrypt introduces novel algo-
rithms that, regardless of the circuit being garbled or its
size, have a very small memory footprint and use no disk
storage. VMCrypt comes with a Developers Manual [19]
and provides tools for debugging and validation.
To describe VMCrypt, we use the example of the database
715search protocol, where the server has records ⟨xi, pi⟩, and the
client, who holds y, wants to learn all pi for which xi = y.
We denote the circuit for this protocol by DBSearch.
Unlike Fairplay programs, VMCrypt circuits (called com-
ponents) are simply Java classes. They are compiled once
and for all and receive their parameters at run time, via the
constructor. For example, DBSearch is instantiated at run
time by executing Component c = new DBSearch(ℓx, ℓp, N ),
where ℓx and ℓp denote the bit length of x and p, and N is
the number of records in the database.
In a realistic sce-
nario where the number of records in the database changes
daily, components allow us to start a VMCrypt protocol
on the ﬂy, whereas with Fairplay we need an expensive of-
ﬂine phase for recompilation (we compare with Fairplay be-
cause TASTY combines homomorphic encryption and gar-
bled circuits. However, as we later show, the same applies
to TASTY).
The second diﬀerence between VMCrypt and Fairplay re-
lates to how circuit descriptions are maintained in memory.
In earlier versions of VMCrypt, constructing a component
(e.g., new DBSearch(ℓx, ℓp, N )) would have immediately cre-
ated an instance of this object in memory. In the case of
DBSearch, the size of the object is linear in N (ℓx + ℓp).
Thus, instantiating DBSearch is worse than holding the en-
tire database in memory. This is clearly infeasible. Worse,
it excludes secure computation from consumer devices such
as laptops and cell phones. Fairplay suﬀers from the same
issue.
VMCrypt solves this problem. Intuitively, it has an under-
lying virtual machine that loads and destructs hardware de-
scriptions dynamically, during execution. This mechanism
is transparent to the developer. It works for circuits of any
size, and guarantees that the client and the server hold only
a small part of the circuit in memory. See Section 3 for
details.
To describe the third diﬀerence between VMCrypt and
Fairplay, recall that in Yao’s protocol the client evaluates the
function after receiving the garbled circuit from the server.
This requires storage (e.g., a hard drive) for wire labels or
lookup tables, which, as our tests show, can reach gigabytes
of data. Writing this much data to the hard-disk will para-
lyze the operating system and slow down execution.
VMCrypt eliminates the need for storage, which also im-
proves running time. To achieve this, we introduce a new
variant for Yao’s protocol. Informally, our protocol divides
the number n of input wires into segments of a constant
size s (e.g., s = 100). In iteration i, the server issues the
i-th segment of s wire labels to the client, following which
it garbles the part of the circuit corresponding to this seg-
ment. The lookup tables are sent directly into the network.
The client reads the lookup tables from the network and
evaluates the i-th part of the circuit. This continues until
the entire circuit is evaluated. To achieve this, we garble,
evaluate, and execute OT at the same time (rather than se-
quentially). Interleaving OT in Yao’s protocol is highly non
trivial, especially because we execute OT in bulk, which
is several orders of magnitude faster. Our new protocol is
also attractive because it can be multi-threaded, which may
further improve performance. More details, and a security
proof, are given in Section 2.
We stress that all VMCrypt mechanisms (e.g., storing
only part of the circuit in memory, or garbling the circuit
in chunks) are completely transparent to developers. VM-
Crypt developers only need to describe the circuit (what we
call a component) they want to securely compute and the
input to the circuit.
1.2 Performance
Taking DBSearch again as an example, Fairplay compila-
tion alone takes 50 seconds and 0.7 GB memory (23% of
a 3 GB RAM) when the database size is 40 records. The
Fairplay compiler crashes after 3 minutes when the number
of records is increased to 55.
With VMCrypt, when the database size is 10, 000, the
entire protocol terminates after 19 seconds. Moreover, each
party (and the Java virtual machine that executes it) uses
only 0.15 GB memory (4.8% of 3 GB). Even if we increase
the database size to 1 million (which increases the size of the
circuit to 100 million gates), the parties still use the same
amount of memory.
VMCrypt has gone through rigorous performance analy-
sis. To show that it scales on circuits with a wide structure
we tested it on the DBSearch circuit. To show that VM-
Crypt scales regardless of wiring patterns, we implemented
the set intersection circuit, which has a highly connected
structure. To show that VMCrypt scales on wide and deep
circuits, we implemented the minimum circuit. To show
VMCrypt modularity, all circuits have been developed and
tested without modifying VMCrypt source code. To show
that performance is truly linear, each circuit was tested on
inputs of increasing length (as opposed to breaking the in-
put into small pieces and modifying VMCrypt source code
to evaluate several smaller circuits). To show scalability we
evaluated circuits with hundreds of millions of gates. As our
tests show, VMCrypt would scale on any circuit with any
number of gates (e.g., billions). See Section 5.
1.3 Related Work
Secure computation has been used recently to implement
systems for privacy-preserving face recognition, ﬁngerprint
matching, and DNA processing (c.f., [13, 7, 28, 24, 1, 8]).
Other optimizations for garbled circuits, such as the free
XOR technique [15] and others [17, 14, 27, 26, 6] has been
proposed. Techniques for secure computation based on ho-
momorphic encryption (c.f., [25, 5, 10, 30, 29]) have also
been studied.
Fairplay [21, 2] demonstrated the feasibility of two-party
secure computation based on garbled circuits. Automation
and benchmarking of cryptographic protocols were studied
in, e.g., [3, 4, 18, 23].
The comparison of VMCrypt to Fairplay applies also to
TASTY [11]. TASTY combines the beneﬁts of homomor-
phic encryption and garbled circuits.
It uses a high level
language, which requires recompilation and rules out exe-
cuting secure protocols on the ﬂy. TASTY does not pro-
vide an API (indeed, this was not a design requirement),
and therefore integrating it into other applications requires
modifying TASTY source code. TASTY would run out of
memory on any large circuit. In fact, TASTY does not deal
with large circuits, except for one example where memory
consumption climbs as the circuit reaches 4.2 million gates,
and crashes thereafter.
Prior to this work, we showed that faster execution times
can be achieved by constructing circuits from Java classes [9].
The software from [9] was not designed to provide an API,
and it does not include any of the innovations presented
716in this paper. Similarly, it does not scale and it requires
the use of storage. Speciﬁcally, it crashes on large circuits
and exhibits non-linear running time, problems which we
avoided in [9] by manually instantiating many small circuits
and rewriting the source code for each circuit.
2. OVERVIEW OF VMCRYPT
This section gives a high level overview of VMCrypt. Com-
ponents are described in detail in the next section.
Once a component has been written, VMCrypt provides
the developer with a test tool to validate that the compo-
nent indeed computes the correct function. This tool, im-
plemented in class TestModule, creates an instance of Stan-
dardInput, which holds the input bits. Similarly, it creates
an instance of StandardOutput, and assigns the output bus
of the component to point at it. After the component com-
putes, its output is stored in the StandardOutput object. If
the component implements interface Testable, then the test
tool can automatically validate the component for correct-
ness. The test tool iterates over all inputs to obtain a full
functional coverage of the component. The advantage of our
tool over Fairplay is that a component can be validated on
all inputs, without having to run the secure protocol.
The preceding discussion gives the impression that the
component is a passive description of a circuit, and that the
test tool somehow processes this description. This impres-
sion is wrong. The entire work is done by the component,
and the same applies to garbling and evaluation. We de-
scribe this process in more detail.
Each VMCrypt binary gate has a method notify that
takes three arguments: a port, an object, and a function. In
the case of the test module, the function is class Calculate,
and the object, which represents an input, is a bit (0 or 1).
The port, which is 0 or 1, tells the gate which input wire
is receiving the object. Once both inputs arrive, the gate
invokes the compute method of the function, passing these
inputs as arguments. Next, the gate notiﬁes its output wire
with the output of this function. This process continues until
the entire circuit is computed. The process of garbling and
evaluating a circuit uses the same notify method, except
that diﬀerent functions and objects are passed as arguments.
VMCrypt presents a new variant for Yao’s protocol, in
which the circuit is garbled in chunks. We use a Notifier
(see Figure 1), which has a very simple task: to obtain a
segment (shown as a bracket) of pairs of wire labels, and
for each pair in the segment, notify the component with this
pair. More precisely, the notiﬁer notiﬁes the component with
an object and a function that gates pass execution to once
they have all their inputs ready. On the server side the func-
tion is Garble and the object is a WireLabelPair. On the
client side the function is Eval and the object is WireLabel.
Both functions implement abstract class Function.
Once the notiﬁcation process begins, gates receive objects
on all of their input wires and pass execution to the func-
tion. In the case of the garble function, gates receive wire
label pairs, lookup tables are written into the network, and
gates notify their output wires with a wire label pair.
In
the case of the evaluation function, gates receive wire labels,
lookup tables are decrypted, and gates notify their output
wires with wire labels. The notiﬁers repeat this, segment
by segment, until the entire component is notiﬁed. Immedi-