### 4. 常见漏洞攻防

#### 4.2. 内容安全策略 (CSP)

**内容安全策略 (Content Security Policy, CSP)** 是一种增加网站安全性的重要手段，通过定义一组规则来限制网页中可以加载的资源。以下是几种常见的 CSP 指令及其用法：

- **https:**
  - 只允许从指定的域名通过 HTTPS 加载资源。
  - 示例：`img-src https:`

- **任意域的 HTTPS 资源:**
  - 允许从任何域通过 HTTPS 加载资源。
  - 示例：`img-src https:`

- **unsafe-inline:**
  - 允许执行内联脚本和样式（例如 `style` 属性、`onclick` 事件或 `<script>` 标签中的代码）。
  - 示例：`script-src 'unsafe-inline'`

- **unsafe-eval:**
  - 允许使用一些不安全的 JavaScript 执行方式，如 `eval()`。
  - 示例：`script-src 'unsafe-eval'`

- **nonce-:**
  - 使用随机生成的 nonce，只允许具有匹配 nonce 属性的标签加载。
  - 示例：`script-src 'nonce-bm9uY2U='`

- **hash-:**
  - 允许特定哈希值匹配的代码块被执行。
  - 示例：`script-src 'sha256-'`

**配置示例**

允许执行内联 JavaScript 代码，但不允许加载外部资源：
```plaintext
Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline';
```

#### 4.2.1 预加载

预加载是浏览器为提高用户体验而引入的一种技术，它利用浏览器空闲时间提前加载指定内容并缓存起来。预加载技术包括 DNS-prefetch、subresource、prefetch、preconnect 和 prerender。

HTML5 页面可以通过 `link` 标签的 `rel` 属性进行预加载。如果 CSP 头中包含 `unsafe-inline`，则可以通过预加载的方式向外界发出请求。然而，并非所有页面都能被预加载。以下情况会阻止预加载操作：
- URL 中包含下载资源。
- 页面中包含音频、视频。
- AJAX 请求类型为 POST、PUT 或 DELETE。
- 需要 HTTP 认证。
- HTTPS 页面。
- 含有恶意软件的页面。
- 弹窗页面。
- 占用大量资源的页面。
- 打开了 Chrome 开发者工具。

#### 4.2.2 MIME 类型嗅探

MIME 类型嗅探是指当 CSP 禁止跨站读取脚本但允许跨站加载图片时，攻击者可以通过上传一个包含脚本的图片绕过 CSP 检查。如果服务器没有正确设置 MIME 类型，浏览器可能会猜测该文件类型并将其作为脚本加载。

#### 4.2.3 302 重定向

对于 302 重定向绕过 CSP 的情况，存在以下限制：
- 跳转的目标必须在允许的域内。
- 要加载的文件的主机部分必须与允许的域的主机部分一致。

#### 4.2.4 iframe 绕过

当可以执行代码时，攻击者可以创建一个源为 CSS 或 JS 等静态文件的 frame。如果配置不当，该 frame 可能不存在 CSP 限制，从而可以在该 frame 下再次创建新的 frame 来绕过 CSP。此外，使用诸如 `../../../` 或 `%2e%2e%2f` 等可能触发服务器错误的链接也可以达到类似效果。

#### 4.2.5 base-uri 绕过

当 `script-src` 为 `nonce` 或无限制且 `base-uri` 无限制时，攻击者可以通过 `base` 标签修改根 URL 来绕过 CSP。例如，可以加载 `http://evil.com/main.js`。

#### 4.2.6 其他绕过方法

- **location 绕过**
- **可上传 SVG 时，通过恶意 SVG 绕过同源站点**
- **存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析**
- **CDN Bypass**：如果网站信任某个 CDN，则可以利用该 CDN 的静态资源绕过 CSP。
- **Angular 版本 <1.5.0 存在漏洞**：可通过 Git Pull Request 进行修复。
- **jQuery sourcemap**：使用 `document.write` 注入恶意代码。
- **a 标签的 ping 属性**：仅限于 Firefox 浏览器。

#### 4.2.7 XSS 数据源

XSS 攻击的数据源主要包括：
- **URL**：`location`、`location.href`、`location.pathname`、`location.search`、`location.hash`、`document.URL`、`document.documentURI`、`document.baseURI`
- **导航**：`window.name`、`document.referrer`
- **通信**：`Ajax`、`Fetch`、`WebSocket`、`PostMessage`
- **存储**：`Cookie`、`LocalStorage`、`SessionStorage`

#### 4.2.8 Sink

Sink 是指执行恶意代码的地方，常见的 Sink 包括：
- **执行 JavaScript**：`eval(payload)`、`setTimeout(payload, 100)`、`setInterval(payload, 100)`、`Function(payload)()`
- **加载 URL**：`location=javascript:alert(/xss/)`、`location.href=javascript:alert(/xss/)`、`location.assign(javascript:alert(/xss/))`、`location.replace(javascript:alert(/xss/))`
- **执行 HTML**：`xx.innerHTML=payload`、`xx.outerHTML=payload`、`document.write(payload)`、`document.writeln(payload)`

#### 4.2.9 XSS 保护

**HTML 过滤**
- 使用白名单或黑名单过滤用户输入的 HTML，以防止 XSS 攻击。例如，DOMPurify 工具就采用了这种方式。

**X-Frame-Options**
- `DENY`：页面不能被嵌入到任何 `iframe` 或 `frame` 中。
- `SAMEORIGIN`：页面只能被本站页面嵌入到 `iframe` 或 `frame` 中。
- `ALLOW-FROM`：页面允许被指定的 `frame` 或 `frame` 加载。

**X-XSS-Protection**
- `0`：关闭浏览器的 XSS 防护机制。
- `1`：删除检测到的恶意代码（默认设置）。
- `1; mode=block`：检测到恶意代码时不渲染恶意代码。

Firefox 没有类似的保护机制，可以使用 NoScript 插件进行防护。

#### 4.2.10 WAF 绕过

WAF 绕过的方法包括：
- **利用 <> 标记**
- **利用 HTML 属性**：`href`、`lowsrc`、`bgsound`、`background`、`value`、`action`、`dynsrc`
- **关键字拆分**：利用回车符或字符串拼接绕过。
- **编码绕过**：使用 Base64、JSFuck、`String.fromCharCode`、HTML 编码、URL 编码、Hex 编码、Unicode 编码等。
- **大小写混淆**
- **标签属性值转码**
- **产生事件**
- **CSS 跨站解析**
- **长度限制绕过**：`eval(name)`、`eval(hash)`、`import`、`$.getScript`、`$.get`

#### 4.2.11 技巧

- **httponly**：即使 cookie 设置为 httponly，也可以通过 XSS 在源站完成操作，而不直接获取 cookie。
- **低版本浏览器支持 TRACE/TRACK**：可以获取敏感的 header 字段。
- **phpinfo 等页面**：可能回显信息，这些信息中包含 HTTP 头。
- **通过 XSS 劫持页面钓鱼**
- **通过 XSS 伪造 OAuth 等授权请求**：远程登录。

#### 4.2.12 CSS 注入

**基本介绍**
- 最初的 CSS 注入利用了 CSS 中的 `expression()`、`url()`、`regex()` 等函数或特性来引入外部恶意代码。随着浏览器的发展，这些方法逐渐被禁用。
- 新的攻击方式包括利用 CSS 选择器和 Unicode 范围。

**CSS 选择器**
- 利用 CSS 选择器进行攻击的示例。

**滥用 Unicode 范围**
- 当可以插入 CSS 时，可以使用 `@font-face` 结合 `unicode-range` 获取目标网页对应字符集。结合 `::first-line` 等 CSS 属性可以缩小范围，获取更精确的内容。

**Bypass Via Script Gadgets**
- 一些网站使用白名单或基于 DOM 的防御方式。Code Reuse 攻击方式可以绕过这些防御措施，类似于二进制攻防中的 Gadget，使用目标中的合法代码来达到绕过防御的目的。
- Portswigger 的一篇博文也表达了类似的想法：[abusing-javascript-frameworks-to-bypass-xss-mitigations](https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations)。

**示例**
- 使用 DOMPurify 加固，但由于引入了 `jquery.mobile.js` 导致可以被攻击。

希望以上优化后的文本能够帮助你更好地理解内容安全策略 (CSP) 和相关概念。