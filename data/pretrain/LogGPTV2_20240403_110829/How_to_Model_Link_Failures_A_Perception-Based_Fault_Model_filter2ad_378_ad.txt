Note carefully that Lemma  I  and hence the proof  of 
the relay property  would be invalidated  if symmetric 
faults  were  allowed to  come out as  omissions,  i.e., 
if omission faults were considered weaker than sym- 
metric faults. Similarly, if receive omissions were al- 
lowed to come out as symmetric faults, the unforge- 
ability proof  (sufficient evidence in U!) would be in- 
validated.  Hence, symmetric faults must not be con- 
sidered weaker than  omission  faults as  well,  which 
shows that the “fork/join”-type partial  order of fail- 
ure modes in Figure 4 makes sense. 
Definition 6 and  (6) reveal  that  link  faults are  less 
costly in terms of the fault-tolerance degree than node 
faults. For example, n 2 3fa + 1 nodes are required 
for  tolerating f a   “real” asymmetric faults, but  only 
n  2  4fea  + 1 nodes are needed to cope with  2fea 
faulty perceptions caused by  excessive reception de- 
lays.  The reason is that 2fea  link faults can produce 
only at most ft,,  (and not 2 f e a )  t i m e h l u e  faulty per- 
ceptions at either node. 
Our correctness property PI  is slightly more demand- 
ing than the corresponding one of [2 1, p.6391. Fortu- 
nately, it is not difficult to verify  that the analysis of 
the clock synchronization algorithm in  [2 I ]  actually 
needs the following: If all non-faulty nodes broadcast 
nzsg  by t, then every non-faulty node delivers msg by 
t+td,l.  This is implied by PI, however, since we have 
in  fact n not necessarily  correct nodes in the system, 
which is much more than required by our correctness 
condition. 
The unforgeability property  involves a threshold U ,  
which can be used to control the algorithm’s sensitiv- 
ity w.r.t. omission faults.  U  = 0 just guarantees that 
64 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:22 UTC from IEEE Xplore.  Restrictions apply. 
a non-faulty  node achieves  sufficient evidence after 
reception of at  least one non-timehahe-faulty mes- 
sage, U  = fo enforces reception of a message from 
at least one non-faulty node, and U  = fo+feo 
eventu- 
ally ensures that at least one of the received messages 
is also seen by  any other non-faulty node. 
Our agreement property P3 is usually better than the 
original one of  [21, p.6391, since ta  < t d e l   in most 
applications. 
For U  = 0, it is possible to reduce the worst-case to- 
tal  number of messages sent by the algorithm of Fig- 
ure 5 from 2n’  to n2. This can be done by not sending 
echomsg if initmsg has already been sent (and vice 
versa), and by  using receive initmsg 
echomsg in- 
stead of receive echomsg in  both if statements. Ac- 
tually,  initmsg  and  echomsg can  be  merged into  a 
single message here. 
By using a receive operation with programmable de- 
lay  in  the  acceptance if  of  Figure 5, our consistent 
broadcast primitive could benefit from certain E-redu- 
cing measures.  More specifically, our hardware time- 
stamping support described in detail in [ 161 basically 
allows to measure  the time t,,  a message spends on 
the sending and receiving nodehetwork interface, leav- 
ing only the pure transmission  delay 6,,  E  [?-, ?+I 
with  uncertainty E^  = i+ - ?-.  By delaying the re- 
ception of  a message by  T+  - i+ - t,,  in  our al- 
gorithm, an end-to-end computational + transmission 
delay  6:‘  E  [T+  - E^,T+]  with  uncertainty  E‘  = E^ 
could be “emulated”. 
Of course, those measures can  only reduce the vari- 
ability  of the time  difference between  acceptance at 
some node and achievement of sufficient evidence at 
all  non-faulty  nodes.  Hence, we can  improve ta  = 
T -   + 2~ at most to th = 7 -  + E + E^.  This improve- 
ment can be considerably, though: For  I O  Mb/s Eth- 
ernet, our measurements [ 161 revealed T- M 300 p s  
and T+  M 30 ms, hence E  M  30 ms without hardware 
timestamping. With the memory-based timestamping 
technique of our Network  Time Interface M-Module, 
however, we obtained E*  M  15 p ~ ! ~  
The consistent broadcast primitive of Figure 5 is the cen- 
trepiece  of  the  clock  synchronization algorithms  of  [21]. 
Figure 6 shows its basic version, which employs consistent 
broadcasting  to disseminate (round k )  messages.  Broad- 
casting (round k )  indicates that the node is ready to resyn- 
chronize and hence start the k-th resynchronization round, 
which  is done every P  seconds.  Each round k  employs a 
new  “instance” of consistent  broadcasting to ensure nearly 
simultaneous resynchronization of  all  non-faulty  nodes;  a 
suitably chosen  offset  (Y  is  used  to  ensure that  a  clock  is 
never set backwards. 
’Our  novel  MII-baed  timestamping  method  [I51 will  even  push  E^ 
down to the sub-ps range. 
65 
cob e g i n 
if C k - ‘ ( t )  = kP I* ready to start Ck *I 
-+  broadcast (round IC): 
fi 
if delivered (round k )  
-+ ck(t) := ICP + a; /* resynchronize  */ 
fi 
coend 
Figure 6. A non-authenticated clock synchronization 
algorithm for round k 
Since the original proof of correctness of  this algorithm 
only depends upon  properties Pl-P3,  all results of [21] re- 
main  valid under our perception-based  hybrid fault model. 
We  can, however,  sharpen  the  achievable synchronization 
precision due to our improved agreement property P3. More 
specifically, we only have to replace dmin  = t d e l  by dmin = 
ta in the proof of Lemma 1 in [21, p.6291 and use this value 
in  all  subsequent formulas.  For  example,  the  achievable 
synchronization precision reads 
Dmax  2 [(P - &)(I + P )  + t d e l ] d r  + d m i n ( 1  + P),  (7) 
where p i s  the worst-caseclockdriftanddr  = p(2+p)/(l+ 
P )  . 
Finally, it is not too difficult to verify that applying our 
analysis to the optimal variant of  the clock synchronization 
algorithm of  [21] renders the  appropriate results  valid  as 
well.  By just modifying the initialization value of C k ( t ) ,  a 
clock synchronization algorithm was obtained that provides 
optimal drift rate.  As before,  dmin = 2ta has to be used 
instead  of  dmin = 2 t d e l   in  the proof  of  Lemma  1  in  [21, 
p.6351 to preserve validity of the formulas. 
5  Conclusions 
We presented  a novel hybrid fault model  for clock syn- 
chronization and approximate agreement in distributed sys- 
tems, where the omniscient system-wide perception of faults 
is replaced by the local perceptions of (any) two non-faulty 
participants in the system. It accommodates both  node and 
(receiver-caused) link faults and distinguishes asymmetric, 
symmetric, omission, and crash faults. Our model is hence 
well-suited  for modern wireline and, in particular, wireless 
networked systems.  We  analyzed  an  improved  version  of 
the consistent broadcast primitive underlying the clock syn- 
chronization algorithms of Srikanth & Toueg [2 1 J  under this 
fault model and showed that R, 2 4 fen  + 3fa + 2(f, + fe,  + 
fo + fee) + fc + 1 nodesare sufficient for tolerating fa, f,, 
feo  link faults at any receiver. 
fo, fc node faults and fea,  fe,, 
There are to two primary  directions  of  further research 
in this area: First of all, one should try to analyze other dis- 
tributed  algorithms under a (generalized) perception-based 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:22 UTC from IEEE Xplore.  Restrictions apply. 
[ 121  U. Schmid. Interval-based clock synchronization with opti- 
mal precision.  Technical Report  18311-78, Vienna Univer- 
sity of Technology, Department of Automation, July  1997. 
(submitted to Information and Computation). 
[ 131  U. Schmid. How to model link failures: A perception-based 
fault model. Technical Report  183/1; 108. Vienna University 
of Technology, Department  of Automation, Oct. 2000. 
[ 141  U.  Schmid.  Orthogonal  accuracy  clock  synchroniza- 
tion.  Chicago Journal  of  Theoretical  Computer Science, 
2000(3):3-77,  2000. 
[I51  U.  Schmid,  M. Horauer,  and  N.  Kero.  How  to distribute 
GPS-time over COTS-based LANs.  In  Proceedings of  the 
31th IEEE Precise Time arid Time Interval Systerris and Ap- 
plication  Meeting  (P7T1’99). pages  545-560,  Dana  Point, 
California, Dec.  1999. 
[I61  U.  Schmid,  J.  Klasek,  T.  Mandl,  H.  Nachtnebel,  G.  R. 
Cadek, and N. Kero.  A Network Time Interface M-Module 
for distributing GPS-time over LANs. J. Real-Time Systems, 
18( 1):2&57,  Jan. 2000. 
[I71  U.  Schmid and  K. Schossmaier.  Interval-based  clock  syn- 
chronization.  J.  Real-Time Systems,  12(2): 173-228,  Mar. 
1997. 
[I81  U.  Schmid and  K.  Schossmaier.  How  to  reconcile  fault- 
tolerant  interval  intersection  with  the  Lipschitz condition. 
Distributed Computing, 14(2), May 2001.  (to appear). 
191  U. Schmid and B. Weiss.  Consensus with oral/written mes- 
sages:  Link faults revisited.  Technical  Report  183/1-1 IO, 
Department  of  Automation,  TU  Vienna,  February  2001. 
(submitted to DISC’OI). 
201  F. B. Schneider. A paradigm for reliable clock synchroniza- 
tion.  In Proceedings  Advanced Seminar of Local Area Net- 
works, pages 85-104,  Bandol, France, Apr. 1986. 
[21]  T. K. Srikanth and S. Toueg. Optimal clock synchronization. 
Journal of the ACM, 34(3):62&645, July  1987. 
[22]  P. M. Thambidurai and Y.  K. Park.  Interactive consistency 
with  multiple failure modes.  In  Proceedings  7th Reliable 
Distributed Systems Symposium, Oct.  1988. 
[23]  C. J. Walter, P. Lincoln, and N. Suri.  Formally verified on- 
line diagnosis. IEEE Transactions on SofhYare Engineering, 
23( 11):684-721,  Nov. 1997. 
[24]  C. J. Walter and N. Sun. The customizable fault/error model 
for dependable distributed systems.  Theoretical  Computer 
Science, 2000.  (Special issue on Dependable Computing, to 
appear). 
[25]  C. J. Walter, N. Suri, and M. M. Hugue.  Continual on-line 
diagnosis  of  hybrid  faults.  In  Proceedings  DCCA-4, Jan. 
1994. 
[26]  L. Zhou, F.  B.  Schneider, and R. van  Renesse.  COCA: A 
secure distributed on-line certification authority.  Technical 
Report TR2000- 1828, Computer Science Department, Cor- 
nell Univesity, December 2000. 
fault model.  There are already some encouraging results, 
most notably an analysis of the Hybrid Oral Message algo- 
rithm for consensus [6] in  [ 191 and the Fault-Tolerant In- 
terval convergence function (emulating  the Fault-Tolerant 
Midpoint algorithm  o f  [7] as  well)  in  [13].  Second, one 
could try to integrate our perception-based model with on- 
line diagnosis approaches like [23], which might prove quite 
effective to further increase the fault-tolerance  capabilities 
of certain algorithms. 
6  Acknowledgements 
We are indebted to Neeraj Suri and Sam Toueg for their 
comments on earlier versions of this paper.  The many sug- 
gestions o f  one of the anonymous reviewers of DSN’OI , in 
particular,  the ones related to  [IO],  are also gratefully ac- 
knowledged. 
References 
[I]  M.  K.  Aguilera,  W.  Chen,  and  S. Toueg.  Failure detec- 
tion and consensus in the crash-recovery model. Distributed 
Computing, 13(2):99-125,  2000. 
[2]  M. H. Azadmanesh and R. M. Kieckhafer.  New hybrid fault 
IEEE 
models  for  asynchronous approximate  agreement. 
Transactions on Computers, 45(4):439-449,  1996. 
131  D. Dolev, J. Y. Halpern, and H. R. Strong. On the possibility 
and impossibility of achieving clock synchronization. Jour- 
nal of Computer and System Sciences, 32:230-250,  1986. 
[4]  M. Fischer,  N.  Lynch,  and  M.  Merrit.  Easy  impossibility 
proofs for the distributed consensus problem.  Distributed 
Computing, 1(1):26-39,  1986. 
[5]  L. Gong, P.  Lincoln, and J. Rushby.  Byzantine  agreement 
with  authentication:  Observations and applications in tol- 
erating  hybrid  and  link  faults. 
In  Proceedings  Depend- 
able Computing for Critical Applications-5, pages  139-1 57, 
Champaign, IL, Sept. 1995. 
161  P. Lincoln and J. Rushby.  A formally verified algorithm for 
interactive consistency under a hybrid  fault model.  In Pro- 
ceedings  Fault  Tolerant Computing  Symposium  23,  pages 
402-41 1, Toulouse, France, June 1993. 
[7]  J. Lundelius-Welch and N. A. Lynch.  A new fault-tolerant 
algorithm for clock synchronization. Information and Com- 
putation, 77( 1): 1-36,  1988. 
[8]  N. Lynch. Distributed Algorithms. Morgan Kaufman,  1996. 
[Y]  F. J. Meyer and D. K. Pradhan. Consensus with dual failure 
modes. In In Digest of  Papers of the 17th htemational Sym- 
posium on  Fault-Tolerant Compuring,  pages  48-54,  Pitts- 
burgh, July 1987. 
[IO]  D. Powell.  Failure mode assumptions and assumption cov- 
erage. 
In  Proc.  22nd  IEEE Itit.  Symp.  on  Fault-Tolerant 
Computing (FTCS-22). pages 386-395,  Boston, MA, USA, 
1992. (Revised version available as LAAS-CNRS Research 
Report 91462, 1995). 
[ I  I]  J. Rushby.  A formally verified algorithm for clock sychro- 
nization under a hybrid  fault model.  In  Proceedings ACM 
Principles  of Distributed  Cornputing (PODC’94), pages 
304-3  13, Los Angeles, CA, Aug. 1994. 
66 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:22 UTC from IEEE Xplore.  Restrictions apply.