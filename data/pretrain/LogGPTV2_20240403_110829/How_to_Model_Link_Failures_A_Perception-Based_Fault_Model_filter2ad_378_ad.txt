### Analysis and Discussion

**Lemma I and the Relay Property:**
It is crucial to note that Lemma I, and consequently, the proof of the relay property, would be invalidated if symmetric faults were allowed to manifest as omissions. In other words, if omission faults were considered less severe than symmetric faults, the proof would no longer hold. Similarly, if receive omissions were allowed to appear as symmetric faults, the unforgeability proof (which requires sufficient evidence in \( U \)) would also be invalidated. Therefore, symmetric faults must not be considered weaker than omission faults. This demonstrates the logical consistency of the "fork/join" partial order of failure modes illustrated in Figure 4.

**Fault Tolerance and Cost:**
Definition 6 and Equation (6) indicate that link faults are less costly in terms of fault-tolerance degree compared to node faults. For instance, tolerating \( f_a \) "real" asymmetric faults requires \( n \geq 3f_a + 1 \) nodes, whereas only \( n \geq 4f_{ea} + 1 \) nodes are needed to handle \( 2f_{ea} \) faulty perceptions caused by excessive reception delays. The reason for this difference is that \( 2f_{ea} \) link faults can generate at most \( f_{ea} \) (and not \( 2f_{ea} \)) time-late faulty perceptions at any given node.

**Correctness Property PI:**
Our correctness property PI is slightly more stringent than the corresponding property in [21, p.639]. However, it is straightforward to verify that the analysis of the clock synchronization algorithm in [21] actually requires the following: If all non-faulty nodes broadcast a message by time \( t \), then every non-faulty node should deliver the message by \( t + t_{d,e} \). This condition is implied by PI, as we assume \( n \) nodes in the system, which is more than what our correctness condition necessitates.

**Unforgeability Property:**
The unforgeability property involves a threshold \( U \), which controls the algorithm's sensitivity to omission faults. Setting \( U = 0 \) ensures that a non-faulty node achieves sufficient evidence after receiving at least one non-time-late-faulty message. Setting \( U = f_o \) enforces the reception of a message from at least one non-faulty node. Finally, setting \( U = f_o + f_{eo} \) ensures that at least one of the received messages is also seen by any other non-faulty node.

**Agreement Property P3:**
Our agreement property P3 is generally superior to the original property in [21, p.639], as \( t_a < t_{del} \) in most applications.

**Message Reduction for \( U = 0 \):**
When \( U = 0 \), the worst-case total number of messages sent by the algorithm in Figure 5 can be reduced from \( 2n^2 \) to \( n^2 \). This can be achieved by not sending `echomsg` if `initmsg` has already been sent (and vice versa), and by using `receive initmsg echomsg` instead of `receive echomsg` in both if statements. In fact, `initmsg` and `echomsg` can be combined into a single message.

**Programmable Delay and Time-Stamping:**
By incorporating a receive operation with programmable delay in the acceptance part of Figure 5, our consistent broadcast primitive can benefit from certain \( E \)-reducing measures. Specifically, our hardware time-stamping support, detailed in [16], allows measuring the time \( t_s \) a message spends on the sending and receiving network interfaces, leaving only the pure transmission delay \( \delta_t \in [\tau_-, \tau_+] \) with uncertainty \( \hat{E} = \tau_+ - \tau_- \). By delaying the reception of a message by \( \tau_+ - \hat{E} - t_s \), an end-to-end computational + transmission delay \( \delta_t' \in [\tau_+ - \hat{E}, \tau_+] \) with uncertainty \( \hat{E}' = \hat{E} \) can be "emulated."

**Improvement in Synchronization Precision:**
These measures can reduce the variability of the time difference between acceptance at some node and the achievement of sufficient evidence at all non-faulty nodes. Consequently, \( t_a = \tau_+ + 2\hat{E} \) can be improved to \( t_h = \tau_+ + \hat{E} + \hat{E}' \). This improvement is significant: for 10 Mb/s Ethernet, our measurements [16] showed \( \tau_- \approx 300 \) ps and \( \tau_+ \approx 30 \) ms, resulting in \( E \approx 30 \) ms without hardware timestamping. With memory-based timestamping, we obtained \( \hat{E}' \approx 15 \) ps.

**Clock Synchronization Algorithm:**
The consistent broadcast primitive in Figure 5 is central to the clock synchronization algorithms in [21]. Figure 6 shows its basic version, which uses consistent broadcasting to disseminate (round \( k \)) messages. Broadcasting (round \( k \)) indicates that the node is ready to resynchronize and start the \( k \)-th resynchronization round, which occurs every \( P \) seconds. Each round \( k \) employs a new "instance" of consistent broadcasting to ensure nearly simultaneous resynchronization of all non-faulty nodes; a suitable offset \( \alpha \) is used to prevent the clock from being set backwards.

**Optimal Synchronization Precision:**
Since the original proof of correctness of this algorithm depends on properties P1-P3, all results in [21] remain valid under our perception-based hybrid fault model. We can, however, enhance the achievable synchronization precision due to our improved agreement property P3. Specifically, we replace \( d_{min} = t_{del} \) with \( d_{min} = t_a \) in the proof of Lemma 1 in [21, p.629] and use this value in all subsequent formulas. For example, the achievable synchronization precision is given by:

\[ D_{max} \geq \left[ (P - \sigma)(1 + \pi) + t_{del} \right] \frac{dr}{1 + \pi} + d_{min}(1 + \pi), \]

where \( \pi \) is the worst-case clock drift and \( dr = \pi(2 + \pi)/(1 + \pi) \).

**Conclusions:**
We have presented a novel hybrid fault model for clock synchronization and approximate agreement in distributed systems, where the omniscient system-wide perception of faults is replaced by the local perceptions of any two non-faulty participants. This model accommodates both node and (receiver-caused) link faults and distinguishes asymmetric, symmetric, omission, and crash faults. It is well-suited for modern wireline and, particularly, wireless networked systems. We analyzed an improved version of the consistent broadcast primitive underlying the clock synchronization algorithms of Srikanth & Toueg [21] under this fault model and showed that \( R \geq 4f_{en} + 3f_a + 2(f_e + f_{eo} + f_o + f_{oe}) + f_c + 1 \) nodes are sufficient for tolerating \( f_a, f_e, f_{eo}, f_o, f_{oe} \) link faults and \( f_c \) node faults.

**Future Research Directions:**
Two primary directions for further research are:
1. Analyze other distributed algorithms under a (generalized) perception-based fault model. Encouraging results include the analysis of the Hybrid Oral Message algorithm for consensus [6] in [19] and the Fault-Tolerant Interval convergence function (emulating the Fault-Tolerant Midpoint algorithm of [7]) in [13].
2. Integrate our perception-based model with online diagnosis approaches like [23], which could significantly enhance the fault-tolerance capabilities of certain algorithms.

**Acknowledgements:**
We are grateful to Neeraj Suri and Sam Toueg for their comments on earlier versions of this paper. We also thank the anonymous reviewers of DSN’OI, especially for their suggestions related to [10].

**References:**
[1] M. K. Aguilera, W. Chen, and S. Toueg. Failure detection and consensus in the crash-recovery model. Distributed Computing, 13(2):99-125, 2000.
[2] M. H. Azadmanesh and R. M. Kieckhafer. New hybrid fault models for asynchronous approximate agreement. IEEE Transactions on Computers, 45(4):439-449, 1996.
[3] D. Dolev, J. Y. Halpern, and H. R. Strong. On the possibility and impossibility of achieving clock synchronization. Journal of Computer and System Sciences, 32:230-250, 1986.
[4] M. Fischer, N. Lynch, and M. Merrit. Easy impossibility proofs for the distributed consensus problem. Distributed Computing, 1(1):26-39, 1986.
[5] L. Gong, P. Lincoln, and J. Rushby. Byzantine agreement with authentication: Observations and applications in tolerating hybrid and link faults. In Proceedings Dependable Computing for Critical Applications-5, pages 139-157, Champaign, IL, Sept. 1995.
[6] P. Lincoln and J. Rushby. A formally verified algorithm for interactive consistency under a hybrid fault model. In Proceedings Fault Tolerant Computing Symposium 23, pages 402-411, Toulouse, France, June 1993.
[7] J. Lundelius-Welch and N. A. Lynch. A new fault-tolerant algorithm for clock synchronization. Information and Computation, 77(1):1-36, 1988.
[8] N. Lynch. Distributed Algorithms. Morgan Kaufman, 1996.
[9] F. J. Meyer and D. K. Pradhan. Consensus with dual failure modes. In In Digest of Papers of the 17th International Symposium on Fault-Tolerant Computing, pages 48-54, Pittsburgh, July 1987.
[10] D. Powell. Failure mode assumptions and assumption coverage. In Proc. 22nd IEEE Int. Symp. on Fault-Tolerant Computing (FTCS-22), pages 386-395, Boston, MA, USA, 1992. (Revised version available as LAAS-CNRS Research Report 91462, 1995).
[11] J. Rushby. A formally verified algorithm for clock synchronization under a hybrid fault model. In Proceedings ACM Principles of Distributed Computing (PODC’94), pages 304-313, Los Angeles, CA, Aug. 1994.