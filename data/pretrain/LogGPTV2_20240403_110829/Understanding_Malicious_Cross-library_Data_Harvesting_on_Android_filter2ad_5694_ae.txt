### Handling of a Specific Case and Observations

In our research, we observed that certain XLDH (Cross-Library Data Harvesting) libraries, such as `com.mobiburn`, fetch a dynamic exfiltration endpoint whose value cannot be resolved statically. This dynamic behavior complicates the detection process. To ensure comprehensive coverage, XFinder reports all potential exfiltration cases, even if the endpoints cannot be resolved. Subsequently, these results are manually validated to filter out false positives. It is important to note that the percentage of false cases in our results is relatively low.

### Discussion on Potentially Missed Cases

Determining the number of missed XLDH libraries on a large scale is challenging due to the lack of ground truth. False negatives can arise from two primary reasons:
1. **Challenges in Automatic Data-Sharing Policy Analysis**: Although DPA (Data-Sharing Policy Analysis) achieved high precision and recall in analyzing Terms of Service (ToS), it struggled with vague and complicated cases, as discussed in Section 3.2. Future improvements could involve more efficient dependency parsing for long sentences.
2. **Limitations of Static Program Analysis Techniques**: XFinder shares the limitations of current static analysis techniques, particularly in taint tracking, call-graph construction, and resolving reflection calls. For instance, an XLDH library might store restricted data in the host app's datastore (e.g., Android SharedPreferences, SQLite database, or files) and later use another thread or module to retrieve and send the data. Such complex data flows are difficult to track automatically, even with state-of-the-art tools like FlowDroid. Additionally, the limited capability of DroidRA [62] to resolve reflection call targets may result in missed cross-library calls, especially if the target class name and function name are stored in variables, passed from other threads, or obfuscated.

### Performance Evaluation

Running XFinder on 1.3 million apps and 40 SDK ToSes took approximately two months. The most time-consuming component was XLA (XLDH Library Analysis), which took around two months. We utilized a set of computing resources, including one supercomputer, two servers, and 24 desktops. A 300-second timeout was configured for taint tracking, with 83.7% of the apps analyzed successfully without timeouts or decompilation errors. DPA took 2 hours to extract 1,215 (object, condition) pairs on a Mac machine, while Meta-DB construction took 4 hours to identify privacy-sensitive APIs from the top 40 SDKs' API documentations.

### Measurement Study

Based on the detected XLDH libraries and affected apps, we conducted a measurement study to understand the XLDH ecosystem. In this section, we present an overview of the real-world XLDH ecosystem discovered in our study (Section 5.1), followed by a detailed discussion on the scope and magnitude of this malicious activity, as well as the infection techniques and distribution channels of the XLDH libraries.

#### 5.1 XLDH Ecosystem

The XLDH ecosystem involves adversaries who own data brokerage platforms (e.g., OneAudience) releasing XLDH libraries to harvest data from popular SDKs like Facebook. These libraries are distributed to mobile app owners, often through monetary incentives. Once integrated, the app passes the SDK vendor's review and app store vetting, making it available for download. When users log into Facebook, the XLDH library stealthily accesses and exfiltrates user data to the adversary's backend platform. The app owner receives commissions based on the number of installations, and the brokerage platform monetizes the data by sharing it with marketing companies.

#### 5.2 Prevalence of XLDH Libraries

Our study reveals that XLDH activities are prevalent among real-world apps. We detected 42 distinct XLDH libraries integrated into more than 19,000 apps, targeting 16 SDKs. These apps span 33 categories on Google Play, with over 35% in the game and entertainment categories. The total downloads for these apps exceed 9 billion, with some highly popular apps having over 100 million downloads.

Table 8 illustrates the top-10 XLDH libraries based on the number of apps integrating them and the data harvested. `com.yandex.metrica` is the most popular XLDH library, appearing in 40% of the affected apps. This SDK, provided by Yandex for traffic analytics, uses reflection to fetch Google advertising ID and Android device ID, violating the ToS of the Google Play service SDK.

#### Historical Versions of XLDH Libraries

To understand the evolution of XLDH libraries, we collected historical versions from library websites, Maven repositories, and GitHub. We found 495 versions from October 31, 2011, to February 12, 2020, for all 42 XLDH libraries. By monitoring code changes related to malicious cross-library data harvesting, we observed that newer versions of libraries tend to include XLDH code. For example, `com.yandex.metrica` and `ru.wapstart` began releasing XLDH versions since late 2014. Interestingly, after October 2019, `io.radar` and `com.devtodev` removed XLDH functions, likely in response to our reports to Facebook, Twitter, and Google Play.

#### Longitudinal Study of XLDH Libraries

We performed a longitudinal study of Google Play apps with XLDH libraries `com.oneaudience`, `com.devtodev`, and `io.radar` from January 2015 to December 2019. Starting with 2,076 apps, we collected 936 apps with 5,732 versions, of which 1,976 were affected. Figure 8 shows the evolution of the number of newly appearing and removed apps over time. The growth of affected apps slowed down in 2019, partly due to our reports. Adversaries used app builders like AppsGeyser to quickly release and remove apps, suggesting a strategy to gather data from different users.

#### 5.3 Dissecting Infection Operations

Figure 9 shows the victim SDKs and the number of XLDH libraries (top 20 based on the number of apps integrating them) that attack them. Google Ads Service is the most commonly affected SDK, followed by Facebook and Twitter login. Among the victim SDKs, 7 are online social networks (OSNs), 2 are advertising and tracking platforms, 6 are instant messaging services, and 1 is a cloud service. The prevalence of OSNs suggests that high-profile platforms are valuable targets for data harvesting.

### Evasiveness of XLDH Libraries

In our study, all affected XLDH libraries demonstrated evasive techniques, such as dynamic exfiltration endpoints and reflection calls, making them challenging to detect and mitigate.