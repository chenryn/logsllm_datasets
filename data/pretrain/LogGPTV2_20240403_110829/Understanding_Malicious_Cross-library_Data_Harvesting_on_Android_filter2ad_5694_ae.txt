failed to handle a case. In our research, we also observed
that certain XLDH libraries such as com.mobiburn fetch a
dynamic exﬁltration endpoint whose value cannot be resolved
statically (see the evasion techniques in Section 5.3). Hence,
for a better coverage, XFinder opts to report all exﬁltration
cases even if the endpoints could not be resolved, and then
relies on a manual process to validate the results. Note that
the percentage of such false cases is low in our results.
Discussion of potentially missed cases. Due to the lack of
ground truth, determining the number of missed XLDH li-
braries on a large scale is challenging. In general, false nega-
tives can be introduced for two reasons: (1) challenges in au-
tomatic data-sharing policy analysis on ToSes; (2) limitations
of today’s static program analysis techniques, e.g., precise
taint tracking, building complete call-graphs, and resolving
reﬂection-call targets.
Speciﬁcally, although DPA achieved a high precision and
recall in ToSes analysis (see evaluation), it missed vague and
complicated cases as mentioned in Section 3.2. This can be
improved in the future by investigating efﬁcient dependency
parsing on long sentences. Second, XFinder shares the lim-
itations of current static analysis techniques. In particular,
false negatives could be introduced due to the limited capabil-
ities of taint tracking in complicated real-world apps/libraries.
For example, an XLDH library could store the restricted data
in the host app’s datastore (e.g., Android SharedPreferences,
SQLite database, ﬁles [3]) and later use another thread/module
to retrieve a speciﬁc date item and send it out. Such a com-
plicated data ﬂow could not be automatically taint-tracked by
our current approach, nor could it be handled by other state-
of-the-art tools like FlowDroid. We will leave the systematic
study of the convoluted XLDH data practices to our future
work. Furthermore, limited by the capability of DroidRA [62]
to resolve targets of reﬂection calls, our approach may not
identify all cross-library calls if the target class name and func-
tion name are stored in variables, passed from other threads,
or obfuscated. Also, since we leverage FlowDroid to build
the call graphs, which may not be complete, we may not ﬁnd
all cross-library calls based on the graphs.
USENIX Association
30th USENIX Security Symposium    4143
4.2 Performance
Running XFinder on 1.3 million apps and 40 SDK ToSes,
it took around two months to ﬁnish all the tasks including
DPA, Meta-DB construction, and XLA. Among these three
components, XLA was the most time-consuming one (around
two months). To analyze all 1.3M apps (Dg), we utilized a
set of computing resources available to us, including one su-
percomputer (shared in our organization), two servers (20
cores/251GB memory, 12 cores/62GB memory respectively),
and 24 desktops (4 cores/15GB memory each). We conﬁg-
ured a 300-second timeout for taint tracking, with 83.7%
of the apps successfully analyzed without timeouts or de-
compilation errors (11.4% and 4.9% of them with timeouts
and de-compilation errors respectively). DPA took 2 hours to
extract 1215 (ob ject, condition) pairs on a Mac machine with
processor 2.6 GHz Quad-Core Intel Core i7 and memory of 6
GB 2133 MHz LPDDR3. Meta-DB construction took 4 hours
to ﬁnd privacy-sensitive APIs from the API documentations
of the top 40 SDKs.
5 Measurement
Based on the detected XLDH libraries and affected apps,
we further conducted a measurement study to understand the
XLDH ecosystem. In this section, we ﬁrst present the overview
of the real-world XLDH ecosystem discovered in our study
(Section 5.1), and then describe the scope and magnitude of
this malicious activity, as well as the infection techniques and
distribution channels of the XLDH libraries.
5.1 XLDH Ecosystem
Before coming to the details of our measurement ﬁndings,
we ﬁrst summarize the XLDH ecosystem. As outlined in Fig-
ure 6, an adversary, who owns an XLDH based data brokerage
platform (e.g., OneAudience), releases an XLDH library that
aims to harvest data from Facebook SDK. To this end, the
adversary needs to distribute the library to a large number
of real-world mobile apps, so he reaches out to app owners,
especially those with popular apps embedding with Facebook
SDK, to provide them monetary incentive to integrate the
XLDH library (˚). The app integrated with the library and
the Facebook SDK, once passing the SDK vendor’s review
(¸) and the app store vetting ((cid:204)), is available for downloading
(˝). When innocent users install the app and log in Facebook,
the XLDH library will stealthily access the Facebook token to
harvest the user’s Facebook data (˛) and send them out to its
back-end platform (ˇ). Meanwhile, the app owner receives
commissions from the adversaries based on the number of app
installation (e.g., 0.03$ per installation for OneAudience) (—).
Finally, the brokerage platform monetizes users’ Facebook
data by sharing it with a marketing company (e.g, Nielsen
which offers political and business marketing) ((cid:209)).
Table 7: App Categories
# of apps
Proportion
5556
1296
1160
827
827
28%
7%
6%
4%
4%
Categories
Game
Entertainment
Food and Drink
Books
Business
Figure 6: XLDH ecosystem
5.2 XLDH Libraries in the Wild
Prevalence of XLDH. Our study reveals that XLDH activities
are indeed trending among the real-world apps. Altogether,
we detected 42 distinct XLDH libraries integrated in more
than 19K apps and targeting at 16 SDKs. Apps including
XLDH libraries, as discovered in our research, are found in
33 categories on Google Play. As shown in Table 7, over 35%
of apps are in the categories of game and entertainment. Those
apps have been downloaded more than 9 billion times in total
on Google Play. Among all affected apps, some are highly
popular with more than 100 million downloads (Table 8).
Table 8 illustrates the top-10 XLDH libraries based on
the number of apps integrating them and the data harvested
(we release the full list of XLDH libraries online [39]).
We found that a few XLDH libraries dominate the XLDH
ecosystem. Particularly, com:yandex:metrica is the most
popular XLDH library and appears in 40% of the affected
apps. com:yandex:metrica is the SDK provided by Yandex,
a Russian Internet corporation, for trafﬁc analytics service.
com:yandex:metrica leverages the reﬂection technique
to fetch Google advertising ID and Android device ID
from the Google play service SDK. Associating Google
advertising ID with Android device ID is privacy sensitive
since it can be used to identify a speciﬁc Android user.
However, com:yandex:metrica does not declare this activity
in its privacy policy, which violates the ToS of the Google
play service SDK [13]. Similar behavior is also found in
com:appsgeyser, which has affected more than 4 thousand
apps with 15 million downloads.
Historical versions of XLDH libraries. To understand the
evolution of XLDH libraries’ behavior, we collected their old
4144    30th USENIX Security Symposium
USENIX Association
Table 8: Top-10 XLDH libraries (integrated in the most apps)
XLDH library
# of
apps/downloads
com.yandex.metrica
com.inmobi
8,014/2B+
4,283/4B+
com.appsgeyser
4,202/15M+
com.oneaudience
1,738/100M+
Harvested data
Google Advertising ID, Android
ID
Google Activity Recognition
Google Advertising ID, Android
ID, IMEI, Mac Address
Facebook
ID/name/gender/email/link,
Twitter user data
cn.sharesdk
815/191M+
Bytedance ID/name
com.umeng.socialize 495/175M+
com.revmob
ru.mail
com.ad4screen
com.devtodev
340 /36M+
299/100M+
245/183M+
231/318M+
Facebook/Twitter/Drop-
box/Kakao/Yixin/Wechat/QQ/Si-
na/Ali-
pay/Laiwang/Vk/Line/Linkedin’s
AccessToken and user data
(ID/name/link/photo)
Facebook AccessToken
Google Advertising ID, Mac
Address, Android ID, IMEI
Facebook appid, AccessToken
Facebook user gender, birtbday
versions, and then investigated the change of their malicious
functionality. Speciﬁcally, we gathered historical versions of
XLDH libraries from the library websites, Maven repositories
[27] and GitHub [20]. In this way, we found 495 versions
from October 31, 2011 to February 12, 2020 for all the
42 XLDH libraries. After that, for each XLDH library, we
monitored the code change related to malicious cross-library
data harvesting by checking its ﬁngerprints (e.g., class names
of the reﬂections, f orName and getMethod) across different
library versions.
We
ru.wapstart,
selected 7 XLDH libraries
io.radar,
(com.ad4screen,
com.devtodev,
com.onradar,
and com.inmobi), which had at
com.yandex.metrica
least three versions recorded in our dataset, to look at their
trend individually. Figure 7 illustrates the maliciousness of
XLDH libraries across different versions. We observe that
libraries tend to have XLDH code in their newer versions.
Among them, com:yandex:metrica and ru:wapstart began
to release the XLDH versions since late 2014. Interestingly,
we found that after Oct. 2019, the versions of io:radar and
com:devtodev removed the XLDH function to steal users’
Facebook data. We believe that this is at least in part thanks to
our report to Facebook, Twitter, and Google Play (in October,
2019), which then warned the vendors of the offending
libraries. Also, in 2018, com:inmobi released the version with-
out XLDH to stop collecting Google activity recognition data.
This could result from the attempt to comply with GDPR.
To understand the presence of XLDH library in the wild,
we performed a longitude study of the Google Play apps
with XLDH libraries com:oneaudience, com:devtodev and
io:radar from January, 2015 to December, 2019. All of these
libraries stealthily access app users’ Facebook data (e.g., gen-
der, birthday, visited place, etc.). Speciﬁcally, we started from
Figure 7: Distribution of XLDH versions
the 2,076 apps (out of the 1.3 million set), which are found to
have integrated the above libraries, and fetched the historical
versions of these apps on [41] to evaluate the presence of
XLDH libraries in each version. In this way, we were able to
collect 936 apps with 5,732 versions. Among them, 1,976 of
the versions were affected.
Figure 8 illustrates the evolution of the number for the
newly-appearing apps with the XLDH libraries, compared
with the number of the apps with the libraries removed over
time. We can observe that a large number of the affected apps
came into sight from July, 2017 to December, 2019, and the
growth started to slowdown in 2019 (in part thanks to our
report to Facebook, Google Play, etc., in October, 2019). In-
terestingly, for each library, the trend of disappeared apps is
almost identical to that of newly appearing apps with the delay
of about half a year, e.g., 165 new com.oneaudience apps were
published during the second half of 2018, while 166 apps dis-
appeared half a year later. Comparing these two app sets, we
found that there were actually 159 overlapped apps generated
by an app builder appsgeyser.com – these apps share similar
package names, which we released online [39]. This indi-
cates that the adversaries were leveraging appsgeyser.com to
quickly release and then remove a bunch of com.oneaudience
apps periodically, which is likely to be a strategy for gathering
data from different users. as further evidence, we observed
that since March 2017, AppsGeyser in its privacy policy ac-
knowledged that it would include OneAudience in app gener-
ation [7]. Similarly, the technique is adopted by a game app
provider, duksel.com, to integrate com.devtodev.
5.3 Dissecting Infection Operations
Most targeted SDKs. Figure 9 shows the victim SDKs and
the number of XLDH libraries (top 20 XLDH libraries based
on the number of apps integrating them) that attack them.
Google ads service is the most commonly affected SDK, fol-
lowed by Facebook login and Twitter login. Among victim
SDKs, 7 of them are OSNs, 2 are advertising and tracking
platforms, 6 are instant messaging service, 1 is cloud service.
Given the list of victim SDKs, we observe around half of
them are in the category of online social network (OSN). It
suggests that high-proﬁle OSN platforms present an invalu-
USENIX Association
30th USENIX Security Symposium    4145
litical, health groups the users followed, timeline, etc. can be
used to create the users’ psychographic proﬁles, as suggested
by recent Facebook political scandal [85]; similarly, the data
of Twitter, LinkedIn, Amazon, including a user’s tweets, page
likes, education background, celebrities she followed, pur-
chase history, etc., can also be exploited by the adversaries
to proﬁle the user’s personality, values, opinions, attitudes,
interests, and lifestyles. The risk is especially serious since
we observed that data harvested through com:oneaudience
indeed have been shared with a political and business adver-
tising company Nielsen.
Evasiveness of XLDH libraries. In our study, all affected