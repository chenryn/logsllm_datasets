title:Emergent Structure in Unstructured Epidemic Multicast
author:Nuno Carvalho and
Jos&apos;e Pereira and
Rui Carlos Oliveira and
Lu&apos;ıs E. T. Rodrigues
Emergent Structure in Unstructured Epidemic Multicast∗
Nuno Carvalho
U. Minho
José Pereira
U. Minho
Rui Oliveira
U. Minho
Luís Rodrigues
U. Lisboa
Abstract
In epidemic or gossip-based multicast protocols, each
node simply relays each message to some random neigh-
bors, such that all destinations receive it at least once with
high probability.
In sharp contrast, structured multicast
protocols explicitly build and use a spanning tree to take ad-
vantage of efﬁcient paths, and aim at having each message
received exactly once. Unfortunately, when failures occur,
the tree must be rebuilt. Gossiping thus provides simplicity
and resilience at the expense of performance and resource
efﬁciency.
In this paper we propose a novel technique that ex-
ploits knowledge about the environment to schedule pay-
load transmission when gossiping. The resulting protocol
retains the desirable qualities of gossip, but approximates
the performance of structured multicast. In some sense, in-
stead of imposing structure by construction, we let it emerge
from the operation of the gossip protocol. Experimental
evaluation shows that this approach is effective even when
knowledge about the environment is only approximate.
1. Introduction
Epidemic multicast protocols, also known as proba-
bilistic or gossip-based, operate by having each node re-
lay every message to a set of neighbors selected at ran-
dom [2, 5, 16, 13]. The procedure is repeated for a number
of rounds such that the message is delivered to all destina-
tions with high probability. As neighbors are uniform ran-
domly chosen, the load is balanced among all nodes: Over
time, all nodes send and receive approximately the same
number of messages. This fails to take advantage of nodes
and links with higher capacity. In addition, a large num-
ber of redundant message transmissions happen, leading to
a poor latency/bandwidth tradeoff.
In sharp contrast, structured multicast protocols work
by explicitly building a dissemination structure according
to predeﬁned efﬁciency criteria [8, 3, 19, 18, 23], and then
∗This work was partially supported by project "P-SON: Probabilisti-
cally Structured Overlay Networks" (POS_C/EIA/60941/2004).
use it to convey multiple messages. Therefore, nodes with
higher capacity can offer a bigger contribution to the global
dissemination effort by having larger degrees or being as-
signed closer to the root of the tree. Nodes in the leaves of
the tree are not required to contribute to the message dis-
semination effort.
The tradeoff between gossip and structured approaches
is clear: By avoiding the need to build and maintain a span-
ning tree, epidemic multicast provides extreme simplicity.
The resulting evenly balanced load is a key factor to achieve
resilience and scalability. On the other hand, structured
multicast provides better resource usage (and thus higher
performance when the network is stable) by optimizing the
cost of the spanning tree according to efﬁciency criteria
such as network bandwidth and latency. However, struc-
tured approaches have to deal with the complexity of re-
building the tree when faults or network reconﬁguration oc-
curs.
In this paper, we aim at combining the best of both ap-
proaches, namely, the simplicity, scalability and resilience
of epidemic multicast with the performance of structured
multicast. The challenge is to incorporate efﬁciency crite-
ria in a gossip protocol without affecting its probabilistic
properties. Our current proposal builds on the ideas ﬁrst
introduced in [15], which point out that the combination of
lazy and eager push gossip can promote an asymmetrical re-
source usage in a gossip protocol. By combining this tech-
nique with knowledge about the environment, one can make
transmissions that lead to message deliveries to use prefer-
ably the nodes and links that match a target efﬁciency crite-
ria. In some sense, instead of imposing a multicast structure
by construction, we let this structure to emerge probabilis-
tically from the operation of the gossip protocol, without
altering the original gossip pattern.
The main contributions of the paper are the following:
(i) it proposes a technique to exploit knowledge about the
network topology to obtain an emergent structure that re-
sults in actual performance improvements in the data dis-
semination process, and (ii) it offers an extensive evaluation
of the proposed technique in a realistic network setting.
The rest of this paper is structured as follows. Section 2
presents the rationale underlying our proposal. Section 3
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007proposes an epidemic multicast protocol that enables emer-
gent structure according to a conﬁgurable strategy module.
Section 4 introduces several sample strategies. Section 5
presents the experimental environment, used in Section 6
to evaluate the approach. Section 7 compares our proposal
with related work. Finally, Section 8 concludes the paper.
2. Overview
2.1. Background
Gossip-based multicast protocols are often based on an
eager push gossip approach [5, 16, 13]: A gossip round is
initiated by a node that has received a message, relaying it
to a number of targets. This simple strategy has however a
large impact on bandwidth used, as the fanout required for
atomic delivery leads to multiple copies of each message
being received by each destination.
A different tradeoff can be achieved by using a lazy push
strategy, which defers the transmission of the payload. In
detail, during a gossip round a node will send only an adver-
tisement of the new message. Transmission of the payload
is initiated only if the message is unknown by the recipi-
ent. This allows message payload to be transmitted once
to each destination, at the expense of an additional round-
trip. Lazy transmission has also an impact on the reliability,
as the additional round-trip and resulting increased latency
widens the window of vulnerability to network faults. The
impact is however small for realistic omission rates and can
be compensated by a slight increase in the fanout [15]. The
net effect is still a much lower bandwidth usage.
In fact, one can mix both approaches in a single gossip-
ing round [15], thus providing different latency/bandwidth
tradeoffs depending on how many messages are eagerly
transmitted.
2.2. Approach
The approach proposed in this paper stems from the ob-
servation that, in an eager push gossip protocol, paths lead-
ing to deliveries of each message implicitly build a random
spanning tree. This tree is embedded in the underlying ran-
dom overlay. If one knew beforehand which transmissions
would lead to deliveries, one could use eager push gossip
for those paths and lazy push gossip for all others. This
would achieve exactly once transmission for each destina-
tion. Unfortunately, this is not possible, as one cannot pre-
dict which paths lead to delivery.
There is however one alternative strategy that is feasi-
ble: If one of the embedded trees is selected beforehand
for eager push gossip, one increases the likelihood that this
tree will lead to more deliveries. This happens because lazy
Figure 1. Protocol architecture overview.
push has additional latency, and paths that use it will be out-
ran by paths that use solely eager push. If one assigns nodes
and links with higher capacity to such tree, the performance
of the protocol should approach that of a structured over-
lay. Note that by keeping redundant lazy transmissions, one
retains the resilience of the gossip protocol. On the other
hand, this strategy requires the explicit maintenance of a
tree structure which imposes additional overhead and com-
plexity.
Instead of selecting a single embedded tree, in this pa-
per we aim at increasing the likelihood that implicitly cre-
ated trees in a gossip protocol include nodes and links with
higher capacity. Structure is therefore probabilistic: Nodes
and links are selected with different probabilities for pay-
load transmission. Therefore, structure emerges from the
strategy used for scheduling message payloads in a com-
bined eager/lazy push gossip protocol. The main challenge
is thus to achieve emergent structure without global coordi-
nation, while at the same time obtaining a meaningful per-
formance advantage.
3. Architecture
The architecture that we propose to implement our ap-
proach is depicted in Fig. 1. It uses an additional layer that
is inserted below a pure eager push gossip protocol. This
layer, called the Payload Scheduler, selects when to trans-
mit the message payload (by using a combination of eager
push and lazy push) in a transparent manner for the gossip
protocol above. The Payload Scheduler layer can be de-
composed into three separate components, also depicted in
Fig. 1:
• The Lazy Point-to-Point module is in charge of inter-
cepting the interaction between the gossip layer above
Payload SchedulerGossip-based MulticastLazyPoin-to-PointTransmissionStrategyL-SendL-ReceiveSendReceiveMulticastDeliverApplicationNetworkPerformanceMonitorGossipPeer SamplingService37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20071
2
3
4
5
6
7
8
9
10
11
12
13
14
initially
K = ∅
/* known messages */
proc MULTICAST(d) do
FORWARD(MKID(), d, 0)
proc FORWARD(i, d, r) do
DELIVER(d)
K = K ∪ {i}
if r < t do
P = PEERSAMPLE(f)
for each p ∈ P do
L-SEND(i, d, r + 1, p)
upon L-RECEIVE(i, d, r, s) do
if i 6∈ K then
FORWARD(i, d, r)
Figure 2. Basic gossip protocol.
and the transport protocol below. It queries the Trans-
mission Strategy module to decide whether to send the
payload immediately (in the case, the exchange is per-
formed in pure eager push mode) or to delay the pay-
load transmission until a request is received. As we
will later describe, this module is also in charge of gen-
erating and replying to payload requests.
• The Transmission Strategy module is the core compo-
nent of the Payload Scheduler. It deﬁnes the criteria
that is used to defer payload transmission at the sender
and, at the receiver, when to request a transmission.
Note that different strategies may be implemented, ac-
cording to the criteria that one wants to optimize. We
recall that, with each strategy, we aim at having the
combined protocol (push gossip plus scheduler) to ap-
proximate the behavior of a structured multicast ap-
proach.
• The last component of the Payload Scheduler is a Per-
formance Monitor. The role of the performance mon-
itor is to extract, in run-time, performance data about
the operation of the system, for instance, by comput-
ing round-trip delays. The performance data is used to
feed the Transmission Strategy module.
In the remainder of this section, we will describe each
component of our architecture in detail as well as all inter-
faces among them.
3.1. Gossip Protocol Layer
As noted before, a fundamental aspect of our approach
is that the Payload Scheduler can operate in a manner that
is transparent for the operation of the push gossip protocol
that lies above. Therefore, our approach can be applied to
different gossip protocols, such as [5, 13, 16].
Nevertheless, for self containment, we depict in Fig. 2 a
typical push gossip protocol. This implementation assumes
the availability of a peer sampling service [11] providing an
uniform sample of f other nodes with the PEERSAMPLE(f)
primitive. It assumes also an unreliable point-to-point com-
munication service, such that a message m can be sent to a
node p using the L-SEND(m, p) primitive. A message m is
received from a peer p by handling the L-RECEIVE(m, p)
up-call. The gossip protocol maintains a set K of known
messages (line 2), initially empty. This set is used to detect
and eliminate duplicates. In detail, the algorithm works as
follows.
• The application calls procedure MULTICAST(d) to
multicast a message with payload d (line 3). This
simply generates an unique identiﬁer and forwards it
(line 4). The identiﬁer chosen must be unique with
high probability, as conﬂicts will cause deliveries to be
omitted. A simple way to implement this is to generate
a random bit-string with sufﬁcient length.
• Received messages are processed in a similar manner
(line 12), with the difference that it is necessary to
check for and discard duplicates using the set of known
identiﬁers K (line 13) before proceeding.
• The forwarding procedure FORWARD(i, d, r) (line 5)
uses the message identiﬁer i, the payload d and the
number of times, or rounds, the message has already
been relayed r, which is initially 0. It starts by deliver-
ing the payload locally using the DELIVER(d) up-call.
Then the message identiﬁer is added to the set of pre-
viously known messages K (line 7). This avoids mul-
tiple deliveries, as described before. Actual forward-
ing occurs only if the message has been forwarded less
than t times (line 8) [13] and consists in querying the
peer sampling service to obtain a set of f target nodes
and then sending the message, as in lines 9 and 11.
Constants t and f are the usual gossip conﬁguration
parameters [6].
For simplicity, we do not show how identiﬁers are re-
moved from set K, preventing it from growing indeﬁnitely.
This problem has been studied before, and efﬁcient solu-
tions exist ensuring with high probability that no active mes-
sages are prematurely garbage collected [5, 13].
3.2. Payload Scheduler Layer
The Lazy Point-to-Point module is the entry point to the
Payload Scheduler. It controls the transmission of message
payload using a simple negative acknowledgment mecha-
nism. The policy used for each individual message is ob-
tained from the Transmission Strategy module using a pair
of primitives:
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007initially
15
16
17
18 Task 1:
19
20
21
22
23
24
∀i : C[i] = ⊥ /* cached data */
R = ∅
/* known messages */
proc L-SEND(i, d, r, p) do
if EAGER?(i, d, r, p) then
SEND(MSG(i, d, r, p)
else
C[i] = (d, r)
SEND(IHAVE(i), p)
25
26
27
28
29
30
31
32