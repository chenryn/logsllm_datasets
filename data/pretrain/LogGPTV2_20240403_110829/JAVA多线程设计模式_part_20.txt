Helper
---
## Page 199
仔细观察下面的程序。
Host类
调试用的消息。
方法。下面这--行语句，表示连续显示10次A字符。
Main 类
方法的部分）：
子类的实例，并使用这个实例启动线程。
负责。
了1。将上面的程序省略成下面这样，就看得出来是类声明的其中一部分（声明run
可能有些读者不习惯匿名内部类的语法，其实习惯的话，这并不会很困难。请
List 7-2 中，使用了Java 的匿名内部类（anonymous inner class），建立 Thread
Main 类（List 7-1）首先会建立出 Host 类的实例。而调用 Host 实例的 request
Host类（List 7-2）中，在 request 方法里启动新的线程。实际的操作由该线程
为了容易从结果了解线程执行的状况,程序在 main方法的最前面和最后面加上
把这行程序看作是类声明、建立实例、
new Thread() {
public class Main ↑
host.request(l0, 'A');
l.start();
4-1 1517
 public void run()f
public static void main(String[] args) {
 helper.handle(count, c);
System.out.println("main END");
host.request(30, 'c');
host,request (20, 
host.request (10,
Host host = new Hostil;
System.out.println("main BEGIN");
Main 类 (Main.java)
'B'};
'A'};
Thread-Per-Message-
、启动线程的操作写在一起，就好了解多
一这个工作交给你了
---
## Page 200
Thread.sleep 方法。
显示速度放慢（表现出handle 需要
Helper 类
声明成 final。如果 count 与c不是final，会出现编译错误。
c。像这样，当我们要在匿名内部类中，用到方法的参数或局部变量时，必须将变量
Helper类（List 7-3）提供了handle方法，用米将字符显示指定的次数。为了使
public class Helper ↑
END"};
BEGIN");
public class Host !
请注意，在匿名内部类的run 方法中，我们用到了request 方法的参数count 与
●声明一个重载 run 方法的Thread的了类：
List 7-2中，使用这个匿名内部类，进行下面的操作：
new Thread(}
而上面省略掉的部分，
.start()
List 7-3
 public void hanale(int count, char c)
List 7-2
调用这个实例的 start 方法，启动线程。
建立这个类的实例：
 private fina. Helper helper 
 System.cur-println(" 
 System.out.println("
new Thread(){
 helper,handle(count, c);
}.start();
Helper 类(Heiper.java )
public void run() f
Host 类(Host.java)
helper.hardle(count, c);
则看得出来是建立出 Thread 的实例，并启动线程：
些处理时间），在 slowly 方法里使用
request(" + count + "， " + c + ")
request (" + count + , 
7T
+c+"}
---
## Page 201
方法不会等待handle 方法执行完毕，而会马上退出。
己就结束了。无论 handle方法多花时间，都不会影响request方法的响应性。request
request 方法已经结束了。
执行 main 方法的主线程，调用完 host 的 request 方法后，就马上结束了。送出
30000000000
BCBCBCBCBCBCBCBCBCBCE
ABCABCABCABCABCABCABCACBACBA+三个线程的内容交错
main END
main BEGIN
执行范例如图7-2所示。注意看调试消息的话，会发现在 handle 方法结束前，
‘N（
"）BEGIN"};
request (30,
request (30,
request (20,
request (20,
request(l0,
request (10,
handle (30, C) END
handle(20, B) END
handle(10, A) END
handle (30,
hardle (20,
handle (10,
private void slowly() l
try 
 System.out.println("
System.out.printIn("");
for (int i = O; i < count; i++) {
 System.out.println("
图7-2
Thread.sleep(l00);
Syster.out.print(c);
 slowly();
C)END
2
A) BEGIN
C)BEGIN
B) BEGIN
A) BEGIN
BEGIN
END
BEGIN
END
执行范例（显示内容会按执行时机多少有所变化）
-handle(30，C)的操作结束
←最后—个线程的输出
-harndle(20，B)的操作结束
←两个线程的内客交错
←handle(10，A)的操作结束
+其他线程开始抗行handle(30，
←其他线程开始执行handle（20，
一其他线程开始执行handle(10，A)
—主线程在这里结束
←在handle (30，C)BEGIN 之前request (30,C)先结束了
一在handle (20, B)BEGiN 之前 request (20,B)先结束了
“在handle (10，A) BEGIN 之前 request (10，A)先结束了
Thread-Per-Message-
handle" + count + ", 
1
这个工作交给你了
+
---
## Page 202
出新的线程。
handle方法是别的线程在处理的。
范例程序的时序图则如图7-4所示。从图中可以看得出来，在 Host类里会产生
范例程序的顺序图如图 7-3所示。调用 rcquest 方法的线程会马上同到原处，
Main!
线程到这里结束
tiew
--
范例程序的顺序图
IX
Thread
T
hato
:Helper
线程在执行的
---
## Page 203
参与者会如何实现这个请求。范例程序中，Client参与者是Main 类。
的程序会出现怎样的结果，我们留在本章末的练习问题7-2实现。
附序图则如图7-5所示。比较图7-4、图7-5，应可以明显看出之间的差异。图7-5
Client（委托人）参与者
Thread-Per-Message Pattern 的所有参与者
Client 参与者会对 Host 参与者送出请求（request）。Client 参与者并不知道Host
Thread-Per-Message Pattern 的所有参与者如下:
Maif
电
图7-5Host里不建立新线程时的时序图
asanbax
request
图7-4范例程序的时序图
Thread-Per-Message-
-.-.--
+Host.
:Hokt
handle
handle
---
一这个工作交给你了
:aiper
:Helper
弹7常
---
## Page 204
建立的线程，会使用Helper 参与者。范例程序中，Helper 参与者是 Helper类（见图
熊掌不能兼得的关系。
Patterm 而言，“handle 的操作需要花的时间”与“启动线程需要花的时间”是鱼与
启动线程需要花一些时间，所以对希望用来提升响应性的Thread-Per-Message
际思考GUI应用程序的范例。
输出入（1/0）时，效果特别明显。为了感受到响应性，本章末的练习问题7-5会实
延迟时问会下降。尤其是当 handle 的操作很花时间时，或是handle 的操作需要等待
提升响应性，降低延迟时间
7-6)。
Helper（帮助者）参与者
Host参与者是Host类。
这个新的线程，会使用Helper 参与者，“处理（handle)”这个请求。范例程序中，
Host 参与者
使用 Thread-Per-MessagePatterm，Host 参与者对Client 参与者的响应性会提高，
扩展思考方向的提示
host
使用Thread-Per-Message Pattem 时，在Host参与者里，会启动新的线程。因为
"Host 参与者收到Client 参号者的请求（request），会建立新的线程并启动它。
7
为了降低启动线程所需的时间，可使用 Worker Patterm（第8章）。
Helper 参与者会对Host 参与者提供处理（handle）请求的功能。Host 参与者所
Client
会调用Helper的handl方法。
request会建立出新的线程，该线程
图 7-6 Thread-Per-Message Patterm 的类图
Requests#
1
1S0H
kUses
ihandle
Helper
---
## Page 205
Pattern"。关子 Proxy Pattern 与j Adapter Patterm，请参考附录E的[GoF]与[Yuki01]。
来实现出“多线程版的if"。
现“传送异步消息”的操作"²。这是比较宏观一点观察程序的解释。
因，但这不是惟一的说法。请注意在这里利用了调用方法与启动线程两个操作，实
的操作（显示字符串）了吗？”并不是从request方法回来，就表示字符串显示
Thread-Per-Message Pattern 里，因为 request 也是普通的方法，所以也是执行完
调用方法十启动线程→传送消息
米实现-个使用 Thread-Per-Message Pattern 的迷你Web服务器。
务器的主线程回到继续等待其他客户端请求的状态。本章末的练习问题7-6，就要
户端送达的请求，由主线程来接收。而实际处理该请求，则交给其他线程负责，服
应用在服务器的制作
结束，
只能在不需要返回值的时候使用，例如，通知事件的发生等等。
（第3章），那个Pattern也曾视为“多线程版的if”当时是使用while、wait与notifyAll
记
不需要返回值的时候
方法的顺序。所以操作顺序有意义时，不适合使用Thread-Per-Message Patterm。
适合在操作顺序无所谓时使用
注2：硬要说的话，或许可以当他它是“多线程版的Proxy Patern”或“多线程版的Adapter
在之前的章节，也有出现过这样的观点。例如请回想 Guarded Suspension Patterm
了。
这个事实我们该怎么描述呢？的确“在request 里启动了新的线程”是正确的原
而 Read-Write Lock Pattern（第6章）也出现了相似的行为。因为 synchronized
为了使服务器可以处理多数的请求，可以使用 Thread-Per-Message Pattern。
通常调用出普通方法时，会执行完方法里的所有操作，控制权才会回来。
需要得知l处理结果时，可使用Future Pattern（第9章）。
Thread-Per-Message Patterm 中，request 方法不会等待 handle 方法执行结束。也
Thread-Per-Message Pattern中，handle 方法执行的顺序，并不一定是调用 request
Thread-Per-Message
这个工作交给你了
8
---
## Page 206
建立多条的线程。
Machine，JVM）的实现方式而有所不同。不过一般而言，我们可以说-个进程里可
使在相同的平台，进程与线程之间的关系也会因为Java 虚拟机（Java Virtual
个进阶说明，就要探讨进程与线程的差异。
序的主体”。但操作系统（OS）的进程（process），也可以说是执行程序的主体。这
序的执行性能。
Worker Thread Pattern（第 8章）
回值时，才从Future参与者读取。
操作的线程结束时，会将返回值写入Future 参与者。当送出请求的线程需要用到返
会等待实际的操作完成，故无法获取处理的结果。
Future Pattern（第9章）
补充说明：Pattern与程序语言
访问的锁定与写入用的锁定”。
的“物理性”锁定欠缺可仲缩性，所以我们使用 synchronized，白己实现设计出“读
进程与线程之间的关系，会因为平台的差异（OS，硬件），有极大的不同。即
进阶说明：进程与线程
Future Pattern 会事先建立用来存放返回值的实例（Future 参与者）。当处理实际
相关Pattern
我们是利用程序语言提供的功能，来实现出Patterm。
本书所介绍的程序，充其量只能代表“以Java语言要如何实现”的范例罢了
的时候，都被Java 语言所绑住了。但是，Palterm 本来是不依存于特定语言的。
Thread-Per-Message Pattem，会启动新的线程来进行处理。但送出请求的线程不
若是依存于特定语言的，通常不称之 Palterm，而称为 idiom（惯用句）。
本书中，以Java语言为题材来介绍与多线程有关的 Patterm。于是，思考程序
这本书最前面（Introductionl“Java 语言的线程"）中，曾说过线程是“执行程
Worker Thread Pattern 则预先启动足够数量的线程，重复使用这些线程，提升程
Thread-Per-Message Patterm 中，每次提出请求时启动一条线程。
---
## Page 207
存储器的部分，
线程来调用 handle 方法。这么－米，送出请求的线程就可以很快地从 reqguest 方法
望退出。
于也不会退出 request 方法的话，会使 request 的响应性降低。
方法里又调用 handle 方法，在实际的操作处理结束之前不退出 handle 方法，结果等
程的context-switch快得多。
线程所管理的context 信息比进程要来的少"4,
作（context switch）需要花费·一些时间。
并将下一个要开始执行的进程以前所保留的context数据读回来。这个信息的切换操
线程间的 context-switch 较容易
式做到。而因为同一-个实例可由多个线程同时访问，所以需要正确地进行共享互斥。
的实例”。Java 的实例存放在内存上，而多条线程可以同时对这个实例读写。
由其他的线程来读取。在这里所说“共享相同的内存”，在Java 中就是“共享相同
程破坏的危险。
进程的内存空间。因为进程的内存空间是各自独立的，所以进程无须担心被其他进
线程间的内森是共享的
重点回顾
注3：Java的内存模型中，将内存分为士存储器与工作内存两种。可让线程共享的，只有王
注4：这只能说是一般概况，线程与进程实际的关系，与Java执行环境的实现关系性很高
所以，需要紧密地进行多项相关的工作时，线程通常会比进程来的实用。
切换执行中的线程时，线程与进程－·样，需要进行context-switch 的操作。然而，
因为线程间的内存是共享的，所以线程之间的沟通可以使用很自然、简单的方
Client 参与者会调用 Host 参与者的request 方法送出请求。实际处理该请求的
这一章我们学习了 Thread-Per-Message Pattem。
要切换执行中的进程时，进程必须将现在自己的状态（comtext信息）存储下来，
进程与线程另一个差异，在于context-switch的繁重程度。
通常每个进程所拥有的内存空间是各自独立的。进程不能擅自读取、改写其他
进程与线程最人的差异在于内存能否共亨。
详见附录B,
Thread-Per-Message-
，一般而言线程的context-switch比进
这个工作交给你了
---
## Page 208
a某个人改写了范例程序的 Host 类（List 7-2）如List 7-4 所示。这时执行结果会
请把范例程序改写成不使用 Thread-Per-Message Patterm 的版本。也就是说主线
练习问题
BFGIN"};
public class Host f
有何改变？为什么？
问题7-3（启动线程）
序的执行结果（见图7-2）加以比较。
程会连实际的操作（handle）－-起进行。并请将这个程序的执行结果与范例程
问题 7-2（不使用 Thread-Per-Message Pattern）
问题7-1（基础知识的确认）
解答请见附录 A
那么，就进入练习问题吧。
（2）符次调旧出 requesi 方法时，都会生成Helper类的实例。
答×。
这就是 Thread-Per-Message Pattern
也就是我们使用了这种方法，来实现了送出异步的消息。
（5）slowly方法中，延长 sleep 时间的话，从request方法回来的时间也会延长。
（1）每次调用出 request 方法时，都会启动新的线程。
List 7-4
（4）调用出 handle方法，显示出文字的是主线程。
public void request(final int count.
private final Helper helper = new Helper();
System.out.println("
Hew Thread()
 Systerm.out.printin ("
}.run[};
public void run() f
Host 类(Host.java)
helper.handle(count, c);
!(ONE (+3+'"+ unoo +m)sanbax
 final char c) {
+c+"}