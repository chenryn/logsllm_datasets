| ||||| | 0x004009d7 mov qword [0x006020a8], rax
; 把地址放到 [0x006020a8]
| ||||| | 0x004009de mov dword [0x006020bc], 1
; 设置 huge_flag 为 1
| ||||| | 0x004009e8 mov edi, str.Tell_me_your_secret:
1260
6.1.21 pwn HITCONCTF2016 Secret_Holder
; 0x400e80 ; "Tell me your secret: "
| ||||| | 0x004009ed call sym.imp.puts
; int puts(const char *s)
| ||||| | 0x004009f2 mov rax, qword [0x006020a8]
; [0x6020a8:8]=0
| ||||| | 0x004009f9 mov edx, 0x61a80
| ||||| | 0x004009fe mov rsi, rax
| ||||| | 0x00400a01 mov edi, 0
| ||||| | 0x00400a06 mov eax, 0
| ||||| | 0x00400a0b call sym.imp.read
; read(0, [0x006020a8], 0x61a80) 读入 huge secret
| ||||| | 0x00400a10 nop
| ||||| | ; XREFS: JMP 0x00400902 JMP 0x00400911 JMP 0x00400
95e JMP 0x0040096d JMP 0x004009ba JMP 0x004009c6
| `````-`-> 0x00400a11 mov rax, qword [local_8h]
| 0x00400a15 xor rax, qword fs:[0x28]
| ,= 0x00400a25 leave
\ 0x00400a26 ret
果然该函数使用 calloc() 为三种 secret 分别了不同大小的 chunk，small
secret 属于 small chunk，big secret 和 huge secret 属于 large chunk。在分配前，
会检查对应的 secret 是否已经存在，即每种 chunk 只能有一个，chunk 的指针放
在 .bss 段上。另外其实读入 secret 的逻辑还是有问题的，它没有处理换行符，
也没有在字符串末尾加 \x00 。
Wipe secret
[0x00400780]> pdf @ sub.Which_Secret_do_you_want_to_wipe_a27
/ (fcn) sub.Which_Secret_do_you_want_to_wipe_a27 247
| sub.Which_Secret_do_you_want_to_wipe_a27 ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
1261
6.1.21 pwn HITCONCTF2016 Secret_Holder
| ; CALL XREF from 0x00400d7a (main)
| 0x00400a27 push rbp
| 0x00400a28 mov rbp, rsp
| 0x00400a2b sub rsp, 0x20
| 0x00400a2f mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x00400a38 mov qword [local_8h], rax
| 0x00400a3c xor eax, eax
| 0x00400a3e mov edi, str.Which_Secret_do_you_wan
t_to_wipe ; 0x400e98 ; "Which Secret do you want to wipe?"
| 0x00400a43 call sym.imp.puts
; int puts(const char *s)
| 0x00400a48 mov edi, str.1._Small_secret
; 0x400e53 ; "1. Small secret"
| 0x00400a4d call sym.imp.puts
; int puts(const char *s)
| 0x00400a52 mov edi, str.2._Big_secret
; 0x400e63 ; "2. Big secret"
| 0x00400a57 call sym.imp.puts
; int puts(const char *s)
| 0x00400a5c mov edi, str.3._Huge_secret
; 0x400e71 ; "3. Huge secret"
| 0x00400a61 call sym.imp.puts
; int puts(const char *s)
| 0x00400a66 lea rax, [local_10h]
| 0x00400a6a mov edx, 4
| 0x00400a6f mov esi, 0
| 0x00400a74 mov rdi, rax
| 0x00400a77 call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x00400a7c lea rax, [local_10h]
| 0x00400a80 mov edx, 4
| 0x00400a85 mov rsi, rax
| 0x00400a88 mov edi, 0
| 0x00400a8d mov eax, 0
| 0x00400a92 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400a97 lea rax, [local_10h]
| 0x00400a9b mov rdi, rax
| 0x00400a9e call sym.imp.atoi
1262
6.1.21 pwn HITCONCTF2016 Secret_Holder
; int atoi(const char *str)
| 0x00400aa3 mov dword [local_14h], eax
| 0x00400aa6 mov eax, dword [local_14h]
| 0x00400aa9 cmp eax, 2
; 2
| ,= 0x00400ad3 mov rax, qword [0x006020a0]
; [0x6020a0:8]=0
| ||| 0x00400ada mov rdi, rax
| ||| 0x00400add call sym.imp.free
; free([0x006020a0]) 释放 big secret
| ||| 0x00400ae2 mov dword [0x006020b8], 0
; 设置 big_flag 为 0
| |||,= 0x00400aee mov rax, qword [0x006020a8]
; [0x6020a8:8]=0
| || | 0x00400af5 mov rdi, rax
| || | 0x00400af8 call sym.imp.free
; free([0x006020a8]) 释放 huge secret
| || | 0x00400afd mov dword [0x006020bc], 0
1263
6.1.21 pwn HITCONCTF2016 Secret_Holder
; 设置 huge_flag 为 0
| || | 0x00400b07 nop
| || | ; JMP XREF from 0x00400ab6 (sub.Which_Secret_do_you_
want_to_wipe_a27)
| || | ; JMP XREF from 0x00400ad1 (sub.Which_Secret_do_you_
want_to_wipe_a27)
| || | ; JMP XREF from 0x00400aec (sub.Which_Secret_do_you_
want_to_wipe_a27)
| ``-`-> 0x00400b08 mov rax, qword [local_8h]
| 0x00400b0c xor rax, qword fs:[0x28]
| ,= 0x00400b1c leave
\ 0x00400b1d ret
该函数在释放 secret 时，首先将对应的 chunk 释放掉，然后设置 flag 为 0。漏洞
很明显，就是没有将 chunk 指针清空，存在悬指针，可能导致 use-after-free，然
后在释放前，也没有检查 flag，可能导致 double-free。
Renew secret
[0x00400780]> pdf @ sub.Which_Secret_do_you_want_to_renew_b1e
/ (fcn) sub.Which_Secret_do_you_want_to_renew_b1e 330
| sub.Which_Secret_do_you_want_to_renew_b1e ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00400d86 (main)
| 0x00400b1e push rbp
| 0x00400b1f mov rbp, rsp
| 0x00400b22 sub rsp, 0x20
| 0x00400b26 mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x00400b2f mov qword [local_8h], rax
| 0x00400b33 xor eax, eax
1264
6.1.21 pwn HITCONCTF2016 Secret_Holder
| 0x00400b35 mov edi, str.Which_Secret_do_you_wan
t_to_renew ; 0x400ec0 ; "Which Secret do you want to renew?"
| 0x00400b3a call sym.imp.puts
; int puts(const char *s)
| 0x00400b3f mov edi, str.1._Small_secret
; 0x400e53 ; "1. Small secret"
| 0x00400b44 call sym.imp.puts
; int puts(const char *s)
| 0x00400b49 mov edi, str.2._Big_secret
; 0x400e63 ; "2. Big secret"
| 0x00400b4e call sym.imp.puts
; int puts(const char *s)
| 0x00400b53 mov edi, str.3._Huge_secret
; 0x400e71 ; "3. Huge secret"
| 0x00400b58 call sym.imp.puts
; int puts(const char *s)
| 0x00400b5d lea rax, [local_10h]
| 0x00400b61 mov edx, 4
| 0x00400b66 mov esi, 0
| 0x00400b6b mov rdi, rax
| 0x00400b6e call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x00400b73 lea rax, [local_10h]
| 0x00400b77 mov edx, 4
| 0x00400b7c mov rsi, rax
| 0x00400b7f mov edi, 0
| 0x00400b84 mov eax, 0
| 0x00400b89 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400b8e lea rax, [local_10h]
| 0x00400b92 mov rdi, rax
| 0x00400b95 call sym.imp.atoi
; int atoi(const char *str)
| 0x00400b9a mov dword [local_14h], eax
| 0x00400b9d mov eax, dword [local_14h]
| 0x00400ba0 cmp eax, 2
; 2
| ,= 0x00400be7 jmp 0x400c52
| || ||| ; JMP XREF from 0x00400ba3 (sub.Which_Secret_do_you_
want_to_renew_b1e)
| || ||`-> 0x00400be9 mov eax, dword [0x006020b8]
; [0x6020b8:4]=0
| || || 0x00400bef test eax, eax
| || ||,= 0x00400c1d jmp 0x400c52
| |||||| ; JMP XREF from 0x00400ba8 (sub.Which_Secret_do_you_
want_to_renew_b1e)
| |||||`--> 0x00400c1f mov eax, dword [0x006020bc]
; [0x6020bc:4]=0
| ||||| 0x00400c25 test eax, eax
| ||||| ,= 0x00400c51 nop
| ||||| ; JMP XREF from 0x00400bad (sub.Which_Secret_do_you_
want_to_renew_b1e)
| ||||| ; JMP XREF from 0x00400be5 (sub.Which_Secret_do_you_
want_to_renew_b1e)
| ||||| ; JMP XREF from 0x00400be7 (sub.Which_Secret_do_you_
want_to_renew_b1e)
1267
6.1.21 pwn HITCONCTF2016 Secret_Holder
| ||||| ; JMP XREF from 0x00400c1b (sub.Which_Secret_do_you_
want_to_renew_b1e)