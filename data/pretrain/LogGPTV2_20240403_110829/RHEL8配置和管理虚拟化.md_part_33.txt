    ```
4.  使用 `virsh secret-set-value`{.literal}
    命令，将机密分配到上一步中输出中的 UUID。这样可保证 CHAP
    用户名和密码位于由 libvirt 控制的 secret 列表中。例如：
    ``` literallayout
    # virsh secret-set-value --interactive 2d7891af-20be-4e5e-af83-190e8a922360
    Enter new value for secret:
    Secret value set
    ```
5.  使用 `virsh edit`{.literal} 命令在存储池的 XML
    文件中添加身份验证条目，并添加 ``{.literal} 元素，指定
    `身份验证类型`{.literal}、`用户名`{.literal} 和
    `secret 用法`{.literal}。
    例如：
    ``` programlisting
      iscsirhel7pool
        /dev/disk/by-path
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    ``{.literal} 子元素存在于虚拟机的 \ 和 `{.literal} XML 元素的不同位置。对于
    ``{.literal}，``{.literal} 在 ``{.literal}
    元素中指定，这描述了在哪里查找池源，因为身份验证是某些池源（iSCSI 和
    RBD）的属性。对于作为域 `子元素的 `{.literal}，对 iSCSI 或 RBD
    磁盘的身份验证是磁盘的属性。另外，磁盘的 ``{.literal}
    子元素与存储池的 \ 子元素不同。
    ``` programlisting
    ```
    :::
6.  要激活更改，激活存储池。如果池已启动，停止并重启存储池：
    ``` literallayout
    # virsh pool-destroy iscsirhel7pool
    # virsh pool-start iscsirhel7pool
    ```
:::
:::
::: section
::: titlepage
# []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-vhbas_managing-storage-for-virtual-machines}创建 vHBA {.title}
:::
虚拟主机总线适配器(vHBA)设备将主机系统连接到 SCSI 设备，需要它来创建基于
SCSI 的存储池。
您可以通过在 XML 配置文件中定义 vHBA 设备来创建它。
::: orderedlist
**流程**
1.  使用 `virsh nodedev-list --cap vports`{.literal}
    命令，在您的主机系统上查找 HBA。
    以下示例显示了支持 vHBA 的两个 HBA 的主机：
    ``` literallayout
    # virsh nodedev-list --cap vports
    scsi_host3
    scsi_host4
    ```
2.  使用 `virsh nodedev-dumpxml HBA_device 命令查看 HBA`{.literal}
    的详细信息。
    ``` literallayout
    # virsh nodedev-dumpxml scsi_host3
    ```
    命令的输出列出了用于创建 vHBA `的 `{.literal}
    `、& lt;`{.literal} wwn\> 和 \`{=html} \>
    字段。``{.literal} 显示受支持的 vHBA 的最大数量。例如：
    ``` programlisting
      scsi_host3
      /sys/devices/pci0000:00/0000:00:04.0/0000:10:00.0/host3
      pci_0000_10_00_0
        3
        0
          20000000c9848140
          10000000c9848140
          2002000573de9a81
          127
          0
    ```
    在本例中，``{.literal} 值显示 HBA 配置中总共可使用 127
    个虚拟端口。``{.literal}
    值显示当前使用的虚拟端口数。这些值在创建 vHBA 后更新。
3.  为 vHBA 主机创建类似如下的 XML 文件。在这些示例中，该文件名为
    `vhba_host3.xml`{.literal}。
    本例使用 `scsi_host3`{.literal} 来描述父 vHBA。
    ``` programlisting
      scsi_host3
    ```
    这个示例使用 WWNN/WWPN 对描述父 vHBA。
    ``` programlisting
      vhba
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    WWNN 和 WWPN 值必须与上一步中 HBA 详情中的值匹配。
    :::
    ``{.literal} 字段指定要与这个 vHBA 设备关联的 HBA
    设备。下一步中使用 ``{.literal}
    标签中的详细信息，为主机创建新的 vHBA 设备。有关 `nodedev`{.literal}
    XML 格式的更多信息，请参阅 [libvirt
    上游页面](https://libvirt.org/formatnode.html){.link}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh`{.literal} 命令不提供定义 `parent_wwn、parent_ww`{.literal}
    `pn 或 parent_`{.literal} `fabric_wwn`{.literal} 属性的方式。
    :::
4.  使用 `virsh nodev-create`{.literal} 命令，基于上一步中创建的 XML
    文件创建 VHBA。
    ``` literallayout
    # virsh nodedev-create vhba_host3
    Node device scsi_host5 created from vhba_host3.xml
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh nodedev-dumpxml`{.literal} 命令验证新的 vHBA
    详情(scsi_host5):
    ``` literallayout
    # virsh nodedev-dumpxml scsi_host5
      scsi_host5
      /sys/devices/pci0000:00/0000:00:04.0/0000:10:00.0/host3/vport-3:0-0/host5
      scsi_host3
        5
        2
          5001a4a93526d0a1
          5001a4ace3ee047d
          2002000573de9a81
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 vHBA 设备创建基于 SCSI 的存储池的详情请参考 ["通过
    CLI，创建带有 vHBA 设备的基于 SCSI
    的存储池"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-scsi-based-storage-pools-with-vhba-devices-using-the-cli_creating-storage-for-virtual-machines-using-the-cli "通过 CLI，创建带有 vHBA 设备的基于 SCSI 的存储池"){.xref}。
:::
:::
:::
[]{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html}
::: chapter
::: titlepage
# []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization}第 12 章 在虚拟机中管理 GPU 设备 {.title}
:::
要提高 RHEL 8 主机上的虚拟机(VM)的图形性能，您可以将主机 GPU
分配给虚拟机。要做到这一点：
::: itemizedlist
-   您可以将 GPU 从主机分离，并将 GPU 完全控制直接传递给虚拟机。
-   您可以从物理 GPU 创建多个介质设备，并将这些设备作为虚拟
    GPU(vGPU)分配给多个 guest。目前仅支持所选 NVIDIA
    GPU，且只能为单个客户机分配一个介质设备。
:::
::: section
::: titlepage
# []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#proc_assigning-a-gpu-to-a-virtual-machine_assembly_managing-gpu-devices-in-virtual-machines}为虚拟机分配 GPU {.title}
:::
要访问并控制附加到主机系统的 GPU，您必须将主机系统配置为将 GPU
直接控制给虚拟机(VM)。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果您要查找有关分配虚拟 GPU 的信息，[请参阅管理 NVIDIA vGPU
设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#assembly_managing-nvidia-vgpu-devices_assembly_managing-gpu-devices-in-virtual-machines){.link}。
:::
::: itemizedlist
**先决条件**
-   您必须在主机机器内核中启用 IOMMU 支持。
    ::: itemizedlist
    -   在 Intel 主机上，您必须启用 VT-d：
        ::: orderedlist
        1.  使用 `intel_iommu=on`{.literal} 参数重新生成 GRUB 配置：
            ``` literallayout
            # grubby --args="intel_iommu=on" --update-kernel DEFAULT
            ```
        2.  如果 `intel_iommu=on`{.literal}
            正常工作，您可以尝试替换它以将其 `切换`{.literal} 为
            passthrough 模式。
            ``` literallayout
            # grubby --args="iommu=pt" --update-kernel DEFAULT
            ```
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            对于在直通模式中使用的设备，`pt`{.literal} 选项只启用
            IOMMU，并提供更好的主机性能。但是，并非所有硬件都支持
            选项。如果
            `iommu= pt 选项无法在您的主机上工作，则恢复为 intel_iommu=`{.literal}
            on``{=html} 选项。
            :::
        3.  重启主机。
        :::
    -   在 AMD 主机上，您必须启用 AMD-Vi。
        请注意，在 AMD 主机中默认启用 IOMMU，您可以添加
        `iommu=pt`{.literal} 将其切换为 pass-through 模式：
        ::: orderedlist
        1.  使用 a `iommu=pt`{.literal} 参数重新生成 GRUB 配置：
            ``` literallayout
            # grubby --args="iommu=pt" --update-kernel DEFAULT
            ```
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            对于在直通模式中使用的设备，`pt`{.literal} 选项只启用
            IOMMU，并提供更好的主机性能。但是，并非所有硬件都支持
            选项。无论是否启用此选项，您仍然可以分配设备。
            :::
        2.  重启主机。
        :::
    :::
:::
::: orderedlist
**流程**
1.  防止驱动程序绑定到 GPU。
    ::: orderedlist
    1.  确定 GPU 所附加的 PCI 总线地址。