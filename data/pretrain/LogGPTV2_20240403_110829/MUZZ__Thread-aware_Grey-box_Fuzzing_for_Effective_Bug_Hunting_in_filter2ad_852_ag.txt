### Paths Over Time Among MUZZ, MAFL, AFL, and MOPT

The reason for the observed paths over time among MUZZ, MAFL, AFL, and MOPT is straightforward: we employ a separate procedure after fuzzing to determine whether the seeds cover thread-forking routines. This step is necessary because AFL and MOPT do not provide built-in solutions to discover the relevance of seeds with multithreading. Consequently, we cannot plot multithreading-relevant crashing states over time.

### Statistical Variance and Evaluation Strategy

Despite the importance of statistical variance, it is challenging to calculate comprehensively. To reduce variance among individual runs during evaluation, we adopt an ensemble strategy by sharing seeds across six runs for each specific fuzzer [63]. However, for multithreaded target programs, additional variance arises from thread scheduling (in our experiments, four working threads were specified). MUZZ and MAFL incorporate schedule-intervention instrumentation to diversify the effects, which is absent in AFL and MOPT. From our case studies in §6.5.2, we observe that the variance can be substantial across different machines and workloads. Therefore, providing fair statistical results with respect to variance remains impractical. As a result, we exclude variance metrics and focus on those that represent "overall results," such as Nmt, NmtB, Nall, Nm, Nmc, Nmv, and Nmv. The case studies and comparisons in §6.2, §6.3, and §6.4 are all based on these overall results. During the evaluation, we found that the results from MUZZ and MAFL are more stable compared to those from AFL and MOPT.

### 7. Related Work

#### 7.1 Grey-box Fuzzing Techniques

The most relevant techniques are those focused on concurrency-vulnerability detection. ConAFL [30] is a thread-aware grey-box fuzzer (GBF) designed for user-space multithreaded programs. Unlike MUZZ, which aims to reveal both Vm and Bm, ConAFL only detects a subset of concurrency-bug-induced vulnerabilities (Vcb) that cause buffer-overflows, double-free, or use-after-free. ConAFL relies heavily on thread-aware static and dynamic analyses, leading to scalability issues. In contrast, MUZZ's thread-aware analyses aim to provide runtime feedback to distinguish more execution states in multithreading contexts, thereby generating more multithreading-relevant seeds. ConAFL, on the other hand, focuses on discovering sensitive concurrency operations to capture pairs that may introduce the aforementioned vulnerabilities. Due to the complexity of its static and dynamic analyses, ConAFL has limited scalability; the largest binary it evaluated was 196K (bzip2smp), while MUZZ can handle programs up to 19.4M (im-cnvt).

In our evaluation, we did not include ConAFL because the GitHub version (https://github.com/Lawliar/ConAFL) does not work, as its static analysis is not publicly available, and implementing it ourselves would be non-trivial. Additionally, we were unable to obtain a runnable tool even after requesting it from the authors. RAZZER [24] uses a customized hypervisor to control thread interleaving deterministically to trigger data races in the Linux kernel. It is a kernel fuzzer and cannot detect multithreading-relevant bugs in user-space programs. RAZZER identifies over-approximated racing segments and tames non-deterministic behavior in the kernel to trigger a race. MUZZ, however, distinguishes more thread-interleaving states to guide fuzzing towards revealing more multithreading-relevant paths. Sequentializing thread interleavings for user-space programs is inherently challenging [64].

#### 7.2 Static Concurrency-Bug Prediction

Static concurrency-bug predictors aim to approximate the runtime behaviors of concurrent programs without actual execution. Several approaches have been proposed for analyzing Pthread and Java programs [40, 45, 50]. LOCKSMITH [40] uses existential types to correlate locks and data in dynamic heap structures for race detection. Goblint [50] employs thread-modular constant propagation and points-to analysis to detect concurrent bugs, considering conditional locking schemes. [51] scales detection to large codebases by sacrificing soundness and suppressing false alarms using heuristic filters. FSAM [45, 46] proposes a sparse flow-sensitive pointer analysis for C/C++ programs using context-sensitive thread-interleaving analysis. Currently, MUZZ relies on flow- and context-insensitive results from FSAM for thread-aware instrumentations. We are exploring ways to integrate other bug prediction techniques to further enhance MUZZ's effectiveness.

#### 7.3 Dynamic Analysis on Concurrency Bugs

There are numerous dynamic analyses for concurrency bugs, which can be categorized into two main types: modeling concurrency bugs and strategies to trigger these bugs.

The first category [12, 41, 42, 59] typically monitors memory and synchronization events. The two fundamental models are the happens-before model [12] and the lockset model [41]. The happens-before model reports a race condition when two threads access a shared memory area in a causally unordered way, with at least one thread writing to the area. The lockset model conservatively considers a potential race if two threads access a shared memory area without locking. Modern detectors like TSan [42] and Helgrind [49] often combine these models. MUZZ does not aim to improve existing concurrency violation models but rather relies on them to detect concurrency bugs using fuzzer-generated seeds.

The second category focuses on how to trigger concurrency violation conditions. This includes random testing to mimic non-deterministic program executions [4, 25, 38], regression testing [47, 60] targeting interleavings from code changes, model checking [13, 57, 62], and hybrid constraint solving [20–22] to systematically check or execute possible thread schedules, heuristically avoid fruitless executions [10, 17, 18, 66], or utilize multi-core to accelerate bug detection [37]. Our approach differs from these as we focus on generating seed files that execute multithreading-relevant paths, rather than testing schedules with a given seed file. Specifically, our goal with schedule-intervention instrumentation is to diversify actual schedules to provide feedback during fuzzing.

### 8. Conclusion

This paper introduces MUZZ, a novel technique that enhances thread-aware seed generation for grey-box fuzzers (GBFs) to fuzz multithreaded programs. Our approach performs three novel instrumentations that can distinguish execution states introduced by thread interleavings. Based on the feedback provided by these instrumentations, MUZZ optimizes dynamic strategies to stress different kinds of multithreading contexts. Experiments on 12 real-world programs demonstrate that MUZZ outperforms other grey-box fuzzers like AFL and MOPT in generating valuable seeds, detecting concurrency vulnerabilities, and revealing concurrency bugs.

### Acknowledgment

This research was supported in part by the National Research Foundation, Prime Minister's Office, Singapore, under its National Cybersecurity R&D Program (Award No. NRF2018NCR-NCR005-0001), National Satellite of Excellence in Trustworthy Software System (Award No. NRF2018NCR-NSOE003-0001), and NRF Investigatorship (Award No. NRFI06-2020-0022) administered by the National Cybersecurity R&D Directorate. The research of Dr. Xue is supported by the CAS Pioneer Hundred Talents Program.

### References

[References listed as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.