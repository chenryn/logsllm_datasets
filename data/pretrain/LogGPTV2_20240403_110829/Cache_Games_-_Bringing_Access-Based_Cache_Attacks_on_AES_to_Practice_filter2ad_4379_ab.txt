locations V accesses into, up to cache line granularity. That
is, S is able to reconstruct l = c− max(0, b− d) bits of the
secret index for a cache line size of 2b bytes. Note that l > 0
whenever the lookup table does not entirely ﬁt into a single
cache line. Starting from these l bits, we will reconstruct the
whole encryption key in our attack.
B. AES – The Advanced Encryption Standard
The Advanced Encryption Standard (AES) [17] is a sym-
metric block cipher, and has been adopted as an encryption
standard by the U.S. government [18]. For self-containment,
and to ﬁx our notation, we next recapitulate the steps of the
AES algorithm [30, §4.2].
AES always processes blocks (x0 . . . xF ) of 16 bytes at
a time by treating them as 4 × 4 matrices. We will denote
these matrices by capital letters, and its column vectors by
bold, underlined lowercase letters:
x0 x4
x8
x9
xC
x1 x5
xD
x2 x6 xA xE
x3 x7 xB xF
 = (x0 x1 x2 x3)
X =
The single bytes xi are treated as elements of GF (28). We
denote addition in this ﬁeld by ⊕ and multiplication by •.
Note that the addition equals bitwise XOR. The irreducible
polynomial for multiplication is given by x8+x4+x3+x+1,
see the standard [18] for details. We use these operations
in the usual overloaded sense to operate on matrices and
vectors.
493
Except for XORing the current state with a round key,
the single rounds of AES makes use of three operations:
ShiftRows cyclically shifts the rows of a matrix X, SubBytes
performs a bytewise substitution of each entry in a matrix
according to a ﬁxed and invertible substitution rule, and
MixColumns multiplies a matrix by a ﬁxed matrix M.
In the ﬁrst step of each round of AES, the ShiftRows
operation performs the following permutation on the rows
of a matrix X:
 x0
x4
x5
x9
xA xE
xF
x3
x8
xC
xD x1
x6
x2
x7
xB
ShiftRows(X) = ˜X =
We will denote the columns of ˜X by (˜x0 ˜x1 ˜x2 ˜x3).
In the next step, all bytes of ˜X are substituted as deﬁned
by an S-box. We denote this substitution by s(·). That is, we
have SubBytes( ˜X) = s( ˜X) with
s( ˜X) =
s(xC)
s(x1)
s(x6)
s(xB)
or s( ˜X) = (s(˜x0) s(˜x1) s(˜x2) s(˜x3)) for short.
s(x8)
s(xD)
s(x2)
s(x7)
s(x4)
s(x9)
s(xE)
s(x3)
Finally, the state matrices are multiplied by a constant
matrix M in the MixColumns operation:
 s(x0)
s(x5)
s(xA)
s(xF )
 ,
•s( ˜X)
1
1
3
2
2
1
1
3
3 1
2 3
1 2
1 1
MixColumns(s( ˜X)) = M•s( ˜X) =
As for X, we abbreviate the columns of M by bold letters.
Here and in the remainder of this document, byte values
have to be read as hexadecimal numbers.
Having said this, and denoting the round key of the ith
round by Ki, we can write AES as the following recurrence,
where X0 is the plaintext, and Xr+1 is the ciphertext:
Xi ⊕ Ki
M • s( ˜Xi) ⊕ Ki
s( ˜Xi) ⊕ Ki
i = 0,
0  6.
From (2) it is now easy to see that the following equations
are satisﬁed:
∗
i = y∗
k
0 ≤ i ≤ 3 .
⊕ (M • s(˜xi))∗
i
(4)
Each of these equations speciﬁes a set Ki ⊆ {0, 1}4l of
partial key column candidates. Namely, we deﬁne Ki to
i ∈ {0, 1}4l for which the measured
∗
consist of all elements k
˜x∗
i can be completed to a full four byte vector ˜xi satisfying
(4). These sets can be computed by enumerating all 232−4l
possible values of ˜xi.
The cardinality of Ki turns out to depend on ˜x∗
i , and
i ∈ {0, 1}4l is a
∗
so does the probability that some random k
partial key column candidate. As we need to argue about this
probability we compute the expected cardinality of the Ki
i are equally distributed in {0, 1}4l.
by assuming that the ˜x∗
|{0, 1}4l| E[|Ki|]
24
28
212
216
220
224
228
232
24
28
212
214.661...
211.884...
27.9774...
24
1
l
1
2
3
4
5
6
7
8
pl = E[|Ki|]/|{0, 1}4l|
1
1
1
0.3955 . . .
3.6063 . . . · 10−3
1.5021 . . . · 10−6
5.9604 . . . · 10−8
2.3283 . . . · 10−10
Table 1. Depending on the number l of leaked bits, only a fraction pl
of the keys in {0, 1}4l can be parts of the secret key’s ith column, if x∗
and y∗
i
are known. Here, E denotes the expectation value of the random
variable |Ki|.
i
Even though the encryption process is deterministic, this
assumption seems to be natural, as otherwise the different
states within an encryption would very likely be strongly
biased, resulting in a severe security threat to AES.
Table 1 displays the expected sizes of Ki for all possible
values of l. The last column of the table states the probability
i ∈ {0, 1}4l is a partial key column
∗
pl that a random k
i . One can see that for 1 ≤ l ≤ 3
candidate for a random ˜x∗
every ˜x∗
i can be completed to a ˜xi satisfying (4). Thus, in
this case, this approach does not yield any information about
the secret key K. On the other hand, for l = 8 the exact
entries of the lookup table accessed by the victim process
can be monitored and the key can be recovered from the
states of two consecutive rounds only. In the interesting case
where 3 < l < 8 we learn a limited amount of information
about the secret key. We will be concerned with this case in
the following.
B. Using Accesses from Continuous Streams
The observations of the previous section typically cannot
be directly exploited by an attacker. This is because for
implementations of AES using compressed tables it is hard
to precisely determine where one round ends and where
the next one starts. Rather, an attacker is able to monitor
a continuous stream of memory accesses performed by the
victim process. Consequently, we will show how the key
can be reconstructed from observations of multiple, say M,
encryptions.
We remark that the order of memory accesses within each
round is implementation dependent, but the single rounds are
always performed serially, and each round always requires
16 table lookups. Thus, as (4) puts into relation states of
consecutive rounds, it is always possible to complete all four
equations (i.e., for i = 0, . . . , 3) within the ﬁrst 31 memory
accesses after the ﬁrst access in a round.
Assume now that an attacker is able to observe 160M +
31 = N + 31 memory accesses. This means that quanti-
tatively the accesses of M full encryptions are observed,
but we do not require that the ﬁrst observed access also is
the ﬁrst access of an encryption. The 31 remaining accesses
belong to the (M + 1)st encryption. On a high level, to
circumvent the problem of not being able to identify round
ends/beginnings, we now perform the following steps:
• We treat each of the ﬁrst N observed memory accesses
as if it was the beginning of an AES round.
• For each of these potential beginnings, we compute
the sets of potential key column candidates. For each
element of {0, 1}4l we thereby count how often it lies
in these sets.
a given element of {0, 1}4l
unknown key.