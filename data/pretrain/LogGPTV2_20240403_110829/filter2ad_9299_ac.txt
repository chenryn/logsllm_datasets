     Uninit=0x0,     //结点未初始化
     NodeBeg=0x1,    //对应的结点为开始标签结点
     NodeEnd=0x2,    //对应的结点为结束标签结点
     Text=0x4,       //对应的结点保存的数据是文本
     Pointer=0x8     //对应的结点保存的数据是指针，实现一个IMarkupPointer
    };
下面枚举变量是某一个CTreePos对象在DOM树中与相连的CTreePos对象的关系，以及CTreePos对象的类型。
    // Tree Position Flags
    enum {
        TPF_ETYPE_MASK      = 0x0F,
        TPF_LEFT_CHILD      = 0x10,
        TPF_LAST_CHILD      = 0x20,
        TPF_EDGE            = 0x40,
        TPF_DATA2_POS       = 0x40,
        TPF_DATA_POS        = 0x80,
        TPF_FLAGS_MASK      = 0xFF,
        TPF_FLAGS_SHIFT     = 8
    };
下面是我经过逆向得出的IE11中CTreePos类对象的完整成员。
    //CTreePos类对象结构(大小为0x18，CTreeNode::InitBeginPos()、CTreeNode::InitEndPos())
    +0x000  DWORD _cElemLeftAndFlags，  //我的左子树中元素的个数，低9位为Flag，CTreePos::IsNode()
    +0x004  DWORD _cchLeft，            //我的左子树结构字段中的字符数(维护伸展树(Splay Tree))，CTreePos::GetCpAndMarkup()
    +0x008  CTreePos*  _pFirstChild，   //我的第一个孩子结点(有可能是左，也有可能是右)，CTreePos::LeftChild()
    +0x00C  CTreePos*  _pNext，         //我的右兄弟或者父亲结点，CTreePos::RightChild()，CTreePos::Parent()
    +0x010  CTreePos* _pLeft，          //在DOM流中,我左边的CTreePos，CTreePos::PreviousNonPtrTreePos()
    +0x014  CTreePos* _pRight，         //在DOM流中,我右边的CTreePos，CTreePos::NextNonPtrTreePos()
CTreeNode::InitBeginPos()函数用于初始化起始标签对应的CTreePos对象。
    CTreePos *__thiscall CTreeNode::InitBeginPos(CTreeNode *this, BOOL fEdge)
    {
        CTreePos *_tpBegin; // eax
        // public: class CTreePos * __thiscall CTreeNode::InitBeginPos(int)    
        _tpBegin = &this->_tpBegin;
        // (_tpBegin.GetFlags()&~(CTreePos::TPF_ETYPE_MASK|CTreePos::TPF_DATA_POS|CTreePos::TPF_EDGE)) | BOOLFLAG(fEdge, CTreePos::TPF_EDGE) | CTreePos::NodeBeg
        this->_tpBegin._cElemLeftAndFlags = this->_tpBegin._cElemLeftAndFlags & 0xFFFFFF31 | (fEdge ? 0x41 : 1);// TPF_EDGE = 0x40,NodeBeg=0x1
        return _tpBegin;
    }
CTreeNode::InitEndPos()函数用于初始化结束标签对应的CTreePos对象。
    CTreePos *__thiscall CTreeNode::InitEndPos(CTreeNode *this, BOOL fEdge)
    {
        CTreePos *_tpEnd; // eax
        // public: class CTreePos * __thiscall CTreeNode::InitEndPos(int)  
        _tpEnd = &this->_tpEnd;
        // (_tpEnd.GetFlags()&~(CTreePos::TPF_ETYPE_MASK|CTreePos::TPF_DATA_POS|CTreePos::TPF_EDGE)) | BOOLFLAG(fEdge, CTreePos::TPF_EDGE) | CTreePos::NodeEnd
        this->_tpEnd._cElemLeftAndFlags = this->_tpEnd._cElemLeftAndFlags & 0xFFFFFF32 | (fEdge ? 0x42 : 2);
        return _tpEnd;
    }
CTreePos::GetCch()函数用于获取当前CTreePos对象对应的元素所占用的字符数量。起始标签和结束标签对应的字符数量为1，文本字符串为实际拥有的字符数，指针数据字符数的获取在CTreePos::GetContentCch()中(为0或1)。前面介绍DOM流结构时，在“以文本为中心的设计”中有提到过。
    LONG __thiscall CTreePos::GetCch(CTreeDataPos *this)
    {
        DWORD cElemLeftAndFlags; // eax
        // public: long __thiscall CTreePos::GetCch(void)const
        // 功能：获取当前结点的字符数,标签结点字符数为1,文本数据按实际字符数获取,指针数据字符数的获取在CTreePos::GetContentCch()中(为0或1)
        cElemLeftAndFlags = this->_cElemLeftAndFlags;
        // BOOL IsNode() const { return TestFlag(NodeBeg|NodeEnd); }
        // BOOL IsText() const { return TestFlag(Text); }
        // long CTreePos::Cch() const { return DataThis()->t._cch; }
        // long GetCch() const { return IsNode()?1:IsText()?Cch():0; }
        if ( (this->_cElemLeftAndFlags & 3) != 0 )    // NodeBeg=0x1,NodeEnd=0x2
            // 当前结点为标签结点,标签结点字符数为1
            return (cElemLeftAndFlags >> 6) & 1;        // TPF_EDGE = 0x40
        // 当前结点不是标签结点
        if ( (cElemLeftAndFlags & 4) != 0 )           // Text=0x4,IsText()?Cch():0
            // 当前结点是文本数据
            return this->dptp.t._sid_cch & 0x1FFFFFF;   // 低25位为_cch,this->dptp->t->_cch,Cch()
        return 0;
    }
#### 6.1.4 CTreeDataPos
CTreeDataPos继承于CTreePos。CTreeDataPos类为CTreePos类的扩展，用于表示文本数据和指针数据。此漏洞所涉及到的关键类，就是该类。
    class CTreeDataPos : public CTreePos
    {
        ...
        protected:
        union
        {
            DATAPOSTEXT t;
            DATAPOSPOINTER p;
        };
        ...
    }
    struct DATAPOSTEXT
    {
        unsigned long _cch:25;    // [Text] 拥有的字符数，CTreePos::ContentCch()
        unsigned long _sid:7;     // [Text] 此运行的脚本id
        // 这个成员只有在TPF_DATA2_POS标志被打开时才有效，否则，假设lTextID为0。
        long _lTextID;   // [Text] DOM文本节点的文本ID
    };
    struct DATAPOSPOINTER
    {
        // [Pointer] my CMarkupPointer and Gravity
        // Gravity:1，Cling:2，
        DWORD_PTR _dwPointerAndGravityAndCling; 
    };
下面是我经过逆向得出的IE11中CTreeDataPos类对象的完整成员。
    //CTreeDataPos类对象结构
    //Tree::TreeWriter::AllocData1Pos()，0x28，DATAPOSPOINTER
    //Tree::TreeWriter::AllocData2Pos()，0x2C，DATAPOSTEXT
    +0x000  DWORD _cElemLeftAndFlags，//我的左子树中元素的个数，低9位为Flag，CTreePos::IsNode()
    +0x004  DWORD _cchLeft，//我的左子树结构字段中的字符数(维护伸展树(Splay Tree))，CTreePos::GetCpAndMarkup()
    +0x008  CTreePos*  _pFirstChild，//我的第一个孩子结点(有可能是左，也有可能是右)，CTreePos::LeftChild()
    +0x00C  CTreePos*  _pNext，//我的右兄弟或者父亲结点，CTreePos::RightChild()，CTreePos::Parent()
    +0x010  CTreePos* _pLeft，//在DOM流中,我左边的CTreePos，CTreePos::PreviousNonPtrTreePos()
    +0x014  CTreePos* _pRight，//在DOM流中,我右边的CTreePos，CTreePos::NextNonPtrTreePos()
    +0x018  ULONG _ulRefs_Flags，//引用计数，为0就会被释放（dword）,低6位为Flags，CTreePos::AddRef()，CTreePos::IsCData()，CTreePos::IsTextCData()，Tree::TreeWriter::AllocData1Pos()
    +0x01C  System::SmartObject *pSmartObject，//CTreePos::Release()，CTreeDataPos::SetTextBlock()
    +0x020  Tree::TextData *_pTextData，//CTreeDataPos::GetTextLength()，CTreeDataPos::SetTextData()，CTreePos::ContentPch()
    +0x024  DATAPOSTEXT t，//CTreePos::ContentCch()，CTreePos::IsCData()，CTreePos::IsTextCData()，CTreePos::IsTextInLayout()，CTreePos::IsMarkedForDeletion()，CTreePos::IncreaseCounts()，CTreePos::DecreaseCounts()
    +0x024  DATAPOSPOINTER p，//CTreePos::IsPointerInLayout()，CTreePos::MarkupPointer()
Tree::TreeWriter::AllocData1Pos()函数为指针数据类的CTreeDataPos对象分配内存,并初始化。IE8中此函数为CMarkup::AllocData1Pos()。
    CTreeDataPos *__stdcall Tree::TreeWriter::AllocData1Pos()
    {
        CTreeDataPos *pTreeDataPos; // eax
        ULONG Flags; // ecx
        // private: static class CTreePos * __stdcall Tree::TreeWriter::AllocData1Pos(void)    
        pTreeDataPos = MemoryProtection::HeapAllocClear(g_hIsolatedHeap, 0x28u);
        if ( pTreeDataPos )
        {
            Flags = pTreeDataPos->_ulRefs_Flags & 0x37; // 清除0x8,Flag
            pTreeDataPos->pSmartObject = 0;
            pTreeDataPos->_pTextData = 0;
            pTreeDataPos->_cElemLeftAndFlags |= 0x80u;  // 设置TPF_DATA_POS = 0x80
            pTreeDataPos->_ulRefs_Flags = Flags | 0x40; // 增加引用计数,低6位为Flags
            pTreeDataPos->_pNext = 0;
        }
        return pTreeDataPos;
    }
Tree::TreeWriter::AllocData2Pos()函数为文本数据类的CTreeDataPos对象分配内存,并初始化。IE8中此函数为CMarkup::AllocData2Pos()。
    CTreeDataPos *__stdcall Tree::TreeWriter::AllocData2Pos()
    {
        CTreeDataPos *pTreeDataPos; // eax
        ULONG Flags; // ecx
        // private: static class CTreePos * __stdcall Tree::TreeWriter::AllocData2Pos(void)    
        pTreeDataPos = MemoryProtection::HeapAllocClear(g_hIsolatedHeap, 0x2Cu);
        if ( pTreeDataPos )
        {
            Flags = pTreeDataPos->_ulRefs_Flags;
            pTreeDataPos->pSmartObject = 0;
            pTreeDataPos->_pTextData = 0;
            pTreeDataPos->_cElemLeftAndFlags |= 0xC0u;  // 设置TPF_DATA_POS = 0x80,TPF_DATA2_POS = 0x40
            pTreeDataPos->_ulRefs_Flags = Flags & 0x37 | 0x40;// 清除0x8,Flag,增加引用计数,低6位为Flags
        }
        return pTreeDataPos;
    }
IE11的CTreeDataPos拥有一个新的成员_pTextData，IE8及以前是没有的。以前文本数据是存在CTxtArray类中的，并通过CTxtPtr类对其进行访问。在IE11中并没有废除以前的方式，而是添加了一种新的用于存储文本数据的方式，即Tree::TextData类。
CTreeDataPos::SetTextData()函数用于设置CTreeDataPos对象中_pTextData成员存储的Tree::TextData类对象指针。
    void __thiscall CTreeDataPos::SetTextData(CTreeDataPos *this, Tree::TextData *pNewTextData)
    {
        Tree::TextData *pOldTextData; // edx
        // public: void __thiscall CTreeDataPos::SetTextData(class Tree::TextData *)   
        // 功能：设置CTreeDataPos中与其相关联的Tree::TextData数据块指针
        ++pNewTextData->_ulRefs;
        pOldTextData = this->_pTextData;
        if ( pOldTextData )
        {
            if ( pOldTextData->_ulRefs-- == 1 )
                MemoryProtection::HeapFree(g_hProcessHeap, pOldTextData);
        }
        this->_pTextData = pNewTextData;
    }
CTreeDataPos::GetTextLength()函数可以从两种存储文本字符串的结构CTxtArray和Tree::TextData中获取到文本字符串的长度。此漏洞的根本原因就在于CTreeDataPos类中DATAPOSTEXT结构体的_cch成员(25bit)与Tree::TextData类中_cch成员(32bit)的大小不同，而在使用时进行混用，从而导致了堆块的越界写。具体原因，见后面漏洞的根本原因分析。
    LONG __thiscall CTreeDataPos::GetTextLength(CTreeDataPos *this)
    {
        Tree::TextData *pTextData; // eax
        LONG TextLength; // eax
        // public: unsigned long __thiscall CTreeDataPos::GetTextLength(void)const     