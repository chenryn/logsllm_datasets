peer p
sends a request [p|paddr|ts]
Initial Step: p ∈ Q1 with Quorum Q1
every peer q ∈ Q1
=⇒
⇐=
if the request is legitimate, reply with a signature
share
Intermediate Steps: p ∈ Q1 with Quorum Qi for i = 2 to (cid:96) − 1
selected peer qi ∈ Qi
=⇒
⇐=
=⇒
⇐=
For j = i − 1 downto 2, verify P KQj−1 using
P KQj and verify M1 using P KQ1. If successful,
, the ranges in RT of Qi and
send [P K Qi−1 ]skQi
the entry-wise encrypted (signed) RT of Qi
send an OT-response back
verify and interpolate received shares to form
M1 = [p|paddr|ts1]skQ1
peer p
select peer q ∈ Qi uniformly at random without
replacement. Send Mi−1 and request an OT ini-
tiation
sends an OT-request for the index corresponding
to the searched key
If P KQi+1, RT Qi+1 (computed from the OT-
response) and P KQi−1 veriﬁes, compute Mi =
[Mi−1|[P K Qi−1 ]skQ i
] and determine the next
quorum Qi+1 from RT Qi+1 . Otherwise or if there
i ∈R Qi and repeat
is a timeout, choose q(cid:48)
Final Step: p ∈ Q1 with Quorum Q(cid:96)
D ⊆ Q(cid:96)
peer p
send M(cid:96)−1 along with its request m
=⇒
Figure 4: RCPqp-II: RCP-II with Query Privacy
performed such that a correct peer qi in Qi can give rout-
ing information for Qi+1 to peer p. For this, peer p sends
an OT initiation to peer qi along with Mi−1. Upon veriﬁ-
cation of the signature chain, qi replies with [P K Qi−1 ]skQi
,
ranges in RT of Qi, entry-wise encrypted (signed) RT of
Qi, and the OT-setup message. Note that these encryp-
tions are done locally at peers, and applied on both the
RT entires and signatures. Peer p then determines an in-
dex corresponding to the key it is searching for and sends
an OT-request for that index. Peer qi then computes and
sends an OT-response. Using this response, peer p obtains
the symmetric key corresponding to the queried index and
decrypts the appropriate entry in RT Qi , checks the signa-
ture on the resulting plaintext, and thus determines the next
quorum Qi+1.
Similar to RCPqp-I, if required, it is possible for peer p
to use OT in the ﬁnal step while communicating with the
target set D in Q(cid:96). The correctness of the protocol follows
directly from that of the original RCP-II protocol, and we
refer the readers to [53] for a detailed proof. The message
complexity of the enhanced protocol remains exactly the
same as the original protocol, which is equal to O(log n) in
expectation. We discuss the increase in computational cost
and other systems matters in Section 6.
6. ANALYSIS AND DISCUSSION
As discussed in Section 5, our protocols do not increase
the message complexity of their original counterparts RCP-
I and RCP-II. In this section, we consider the increase in
computation due to the query-privacy mechanism and ﬁnd it
to be nominal. We also analyze possible system-level attacks
on our protocols.
6.1 Additions to Computational Costs
Query privacy does not come without some additional
computation. However, for our choice of OT, this increase is
insigniﬁcant as compared to the computations already done
in the original RCP-I and RCP-II protocols.
In both the RCPqp-I and RCPqp-II protocols, a request-
ing peer p has to perform only two additional exponentia-
tions at each privacy-preserving RT entry retrieval, while
a responding peer qi in quorum Qi must perform one ad-
ditional exponentiation. Peers in Qi also have to perform
ν exponentiations for an OT setup, where ν is the size of
RT . However, they can be batch-computed and may also be
reused in ν requests. In terms of computation, our privacy-
preserving mechanism remains exactly the same in both pro-
tocols, RCPqp-I and RCPqp-II. This results from a peer p
running the same instance of OT with all peers in the quo-
rum in RCPqp-I with the help of the PRF-based technique
discussed in Section 4.3.
Timing values computed using the pairing-based cryptog-
raphy (PBC) library [28] indicate that one exponentiation
takes around 1 ms on a desktop machine. Given that the
communication time for the original RCP-I and RCP-II pro-
tocols is greater than 3 seconds (refer to Young et al. [52]
for a detailed discussion), the cost of these exponentiations
is insigniﬁcant. In terms of system load, a DKG execution
in RCP-I and RCP-II on average requires 2 CPU seconds,
and a threshold signature generation and veriﬁcation takes
about 6 CPU ms. Therefore, our OT executions do not
increase the system load by any signiﬁcant fraction. Note
that the OT protocol also involves a few group multiplica-
tions, PRF executions, symmetric encryptions and hashes.
Their computations take only a few µs, so we ignore these
computational costs in our discussion.
6.2 System-level Attacks on Query Privacy
Although OT hides the queried key completely in the cryp-
tographic sense, there can be system-level attacks that leak
some information about the key.
A range estimation attack deﬁned by Wang, Mittal and
Borisov [50] that reduces privacy provided in NISAN [35]
could be applied to our RCPqp-I protocol. This attack is
based on the fact that the Chord-like DHT ring is directed
and the requesting peer p will not query a quorum succeed-
ing the queried key except in the ﬁrst iteration. Therefore,
an adversary that can observe the peer p contacting a se-
quence of quorums can put them together into a sequence
to narrow down on the target range that peer p may reach.
In this attack, the range only extends from the last contacted
quorum having an adversarial peer to the largest jump pos-
sible at the end of ﬁrst iteration. For NISAN, Wang et al.
show that if at least 20% of nodes are under the adversary’s
control, the adversary may obtain a signiﬁcant amount of in-
formation about the queried key. As indicated in Section 3.1,
we consider the percentage of peers under the control of a
single adversary to be around 10%. Therefore, although
this range estimation attack is possible, it is not particu-
larly eﬀective in our DHT setting. On the other hand, the
curious peers in the intermediate quorums only see requests
approved by one of their neighbors. This, along with the
security provided by the OT protocol, ensures that nothing
is revealed about the queried key to the curious intermediate
quorums.
As only an expected constant number of peers are con-
tacted per intermediate quorum in our RCPqp-II protocol,
the range estimation attack by Wang et al. [50] is far less
eﬀective. However, query privacy for our RCPqp-II protocol
is slightly weaker in terms of the above mentioned curious
observer attack. This is a direct consequence of the use of
a signature chain to authorize a request from a peer p: as-
sume a peer qi from an intermediate quorum Qi. Although
qi may not be able to determine quorums from the public
keys in a chain, the length of the chain itself might give peer
qi some information about possible key values. This results
from a property of Chord-like DHTs: generally each step
brings a requester exponentially closer to its destination. As
an example, a shorter signature chain indicates that a des-
tination quorum is probably situated away from Qi in the
key (or identiﬁer) space, while a length nearly equal to log n
indicates that the destination quorum is probably nearby.
This is, however, a weak heuristic attack as path lengths of
DHT requests may vary signiﬁcantly. Further, it is possible
to mislead such a curious adversary by adding a few fake
signatures at the end of the chain. The requesting peer p
has to have this done by its quorum Q1.
6.3 Crawling Attacks towards Spam Preven-
tion
As discussed in Section 2, usage of the iterative routing ap-
proach signiﬁcantly improves robustness against spamming
attacks, since a spamming peer has to perform an equal
amount of work as the rest of the system. Young et al.
[52] add further protections against spamming in RCP-I and
RCP-II by not allowing the adversarial peer to gather a large
amount of routing information. They add the queried keys
to requests. As a result, an execution of RCP-I or RCP-II
leads to the requester p gaining information only about the
(cid:96) quorums in its path. We concentrate on query privacy in
this work and enforce that the queried key should remain
completely oblivious to every intermediate quorum Qi for
i ∈ [1, (cid:96) − 1]. This may lead to attacks, where the adver-
sary peer p obtains more routing information; we call these
attacks crawling attacks.
In our RCPqp-I protocol, a malicious peer p may try to
obtain the entire RT of Qi by querying for diﬀerent keys
(or RT indices) to diﬀerent peers in Qi. As a result, the
adversary peer p can acquire more information than allowed
by the rule set. It is possible to thwart this supposed attack
completely by adding one communication round: here, p
also has to get its OT-request message (which is the same
for all peers in Qi) signed from Qi in the exact same way
as its authorization request [p|paddr|tsi]. This ensures that
p can query the quorum for only one key (speciﬁcally, one
index in RT ), and query privacy of the key also remains
unaﬀected. This additional one round does not change the
message complexity of the protocol. We do not include this
defense mechanism in the protocol described in Figure 3, as
repercussions of this attack, if any, may vary from system
to system.
In our RCPqp-II protocol, similar crawling is possible. The
adversary peer p may query diﬀerent peers in quorum Qi for
diﬀerent indices to obtain the complete RT for Qi. However,
unlike in RCPqp-I, a malicious peer p has to increase its eﬀort
linearly to obtain the complete RT of Qi in RCPqp-II and
crawling is not an eﬀective attack for the malicious peer p.
In both protocols, it is possible for a malicious peer p to
alter the queried key while shifting from one quorum to the
next, as there is no link between signed authorizations and
the queried keys for privacy reasons. This may, however, lead
to a peer p gaining more knowledge as it can continuously
modify its key to traverse as much of the DHT as possible.
This is an even weaker crawling attack than the one men-
tioned above, as the adversary has to perform a signiﬁcant
amount of work to gain any information.
Notice that any information gained by the adversary in the
above active attacks is still substantially smaller than infor-
mation eﬀortlessly available to it when PIR or trivial PIR
are used. Finally, it may be possible to stop the adversary
p from gaining any additional information without reveal-
ing its key using computationally and communicationally
demanding cryptographic primitives such as zero-knowledge
proofs or conditional OT [15]. However, we ﬁnd that their
inclusions are not essential, and may be even impractical,
for DHT-based systems.
7. CONCLUSION
In this paper, we have introduced the concept of query
privacy in the robust DHT architecture. We have enhanced
two existing robust communication protocols (RCP-I and
RCP-II) over DHTs to preserve the privacy of keys in DHT
queries using an OT protocol. We reviewed the OT liter-
ature and chose a theoretically non-optimal but practically
eﬃcient (in terms of use over DHTs in practice) OT scheme.
Using this, we built two protocols (RCPqp-I and RCPqp-II),
which obtain query privacy without any signiﬁcant increase
in computation costs and message complexity in practice.
Our privacy-preserving mechanism does not change the un-
derlying protocols’ utility or eﬃcacy in any way, and is also
be applicable to other DHT communication architectures.
8. REFERENCES
[1] Electronic Frontier Foundation (EFF).
https://www.eff.org/, 1990. Accessed March 2012.
[2] Electronic Privacy Information Center (EPIC).
http://epic.org/, 1994. Accessed March 2012.
[3] J. Aspnes, N. Rustagi, and J. Saia. Worm versus alert:
Who Wins in a Battle for Control of a Large-Scale
Network? In Intl. Conference on Principles of
Distributed Systems, pages 443–456, 2007.
[4] B. Awerbuch and C. Scheideler. Group Spreading: A
Protocol for Provably Secure Distributed Name
Service. In ICALP, pages 183–195, 2004.
[5] B. Awerbuch and C. Scheideler. Robust Random
Number Generation for Peer-to-Peer Systems. In
OPODIS, pages 275–289, 2006.
[6] B. Awerbuch and C. Scheideler. Towards a Scalable
and Robust DHT. In Symposium on Parallelism in
Algorithms and Architectures (SPAA), pages 318–327,
2006.
[7] B. Awerbuch and C. Scheideler. Towards Scalable and
Robust Overlay Networks. In Intl. Workshop on
Peer-to-Peer Systems, 2007.
[8] I. F. Blake and V. Kolesnikov. One-round secure
comparison of integers. Journal of Mathematical