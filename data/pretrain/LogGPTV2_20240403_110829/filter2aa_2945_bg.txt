to base " +
            baseToConvertTo.ToString());
    }
}
5. Add the following statements shown in bold to the ConvertToBase
method, after the statement block that throws the ArgumentException
exception.
This code implements a well-known algorithm that converts a number
from base 10 to a different number base. (Chapter 5, “Using compound
assignment and iteration statements,” presents a version of this
algorithm for converting a decimal number to octal.)
Click here to view code image
public static int ConvertToBase(this int i, int baseToConvertTo)
{
    ...
    int result = 0;
    int iterations = 0;
    do
    {
        int nextDigit = i % baseToConvertTo;
Download from finelybook PI:EMAIL
437
        i /= baseToConvertTo;
        result += nextDigit * (int)Math.Pow(10, iterations);
        iterations++;
    }
    while (i != 0);
    return result;
}
6. Display the Program.cs file in the Code and Text Editor window.
7. Add the following using directive after the using System; directive at the
top of the file:
using Extensions;
This statement brings the namespace containing the Util class into
scope. The compiler might display the warning, “Using directive is
unnecessary.” However, the ConvertToBase extension method will not
be visible in the Program.cs file if you do not perform this task.
8. Add the following statements shown in bold to the doWork method of
the Program class, replacing the // TODO: comment:
Click here to view code image
static void doWork()
{
    int x = 591;
    for (int i = 2; i  0 if this instance is greater than obj
    ...
}
You can define an interface for collectible objects that includes the
CompareTo method and specify that the collection class can contain only
classes that implement this interface. In this way, an interface is similar to a
contract. If a class implements an interface, the interface guarantees that the
class contains all the methods specified in the interface. This mechanism
ensures that you will be able to call the CompareTo method on all objects in
the collection and sort them.
Using interfaces, you can truly separate the “what“ from the “how.” An
interface gives you only the name, return type, and parameters of the method.
Exactly how the method is implemented is not a concern of the interface. The
interface describes the functionality that a class should provide but not how
this functionality is implemented.
Defining an interface
Defining an interface is syntactically similar to defining a class, except that
you use the interface keyword instead of the class keyword. Within the
interface, you declare methods exactly as in a class or structure, except that
you never specify an access modifier (public, private, or protected).
Additionally, the methods in an interface have no implementation; they are
simply declarations, and all types that implement the interface must provide
their own implementations. Consequently, you replace the method body with
a semicolon. Here is an example:
Click here to view code image
interface IComparable
{
    int CompareTo(object obj);
}
Tip The Microsoft .NET Framework documentation recommends that
Download from finelybook PI:EMAIL
444
you preface the name of your interfaces with the capital letter I. This
convention is the last vestige of Hungarian notation in C#. Incidentally,
the System namespace already defines the IComparable interface as just
shown.
An interface cannot contain any data; you cannot add fields (not even
private ones) to an interface.
Implementing an interface
To implement an interface, you declare a class or structure that inherits from
the interface and that implements all the methods specified by the interface.
This is not really inheritance as such, although the syntax is the same and
some of the semantics that you will see later in this chapter bear many of the
hallmarks of inheritance. You should note that unlike class inheritance, a
struct can implement an interface.
For example, suppose that you are defining the Mammal hierarchy
described in Chapter 12, but you need to specify that land-bound mammals
provide a method named NumberOfLegs that returns as an int the number of
legs that a mammal has. (Sea-bound mammals do not implement this
interface.) You could define the ILandBound interface that contains this
method as follows:
Click here to view code image
interface ILandBound
{
    int NumberOfLegs();
}
You could then implement this interface in the Horse class. You inherit
from the interface and provide an implementation of every method defined by
the interface (in this case, there is just the one method, NumberOfLegs).
Click here to view code image
class Horse : ILandBound
{
    ...
    public int NumberOfLegs()
    {
Download from finelybook PI:EMAIL
445
        return 4;
    }
}
When you implement an interface, you must ensure that each method
matches its corresponding interface method exactly, according to the
following rules:
The method names and return types match exactly.
Any parameters (including ref and out keyword modifiers) match
exactly.
All methods implementing an interface must be publicly accessible.
However, if you are using an explicit interface implementation, the
method should not have an access qualifier.
If there is any difference between the interface definition and its declared
implementation, the class will not compile.
Tip The Microsoft Visual Studio integrated development environment
(IDE) can help reduce coding errors caused by failing to implement the
methods in an interface. The Implement Interface Wizard can generate
stubs for each item in an interface that a class implements. You then fill
in these stubs with the appropriate code. You will see how to use this
wizard in the exercises later in this chapter.
A class can inherit from another class and implement an interface at the
same time. In this case, C# does not distinguish between the base class and
the interface by using specific keywords as, for example, Java does. Instead,
C# uses a positional notation. The base class is always named first, followed
by a comma, followed by the interface. The following example defines Horse
as a class that is a Mammal but that additionally implements the ILandBound
interface:
Click here to view code image
interface ILandBound
Download from finelybook PI:EMAIL
446
{
    ...
}
class Mammal
{
    ...
}
class Horse : Mammal , ILandBound
{
    ...
}
Note An interface, InterfaceA, can inherit from another interface,
InterfaceB. Technically, this is known as interface extension rather than
inheritance. In this case, any class or struct that implements InterfaceA
must provide implementations of all the methods in InterfaceB and
InterfaceA.
Referencing a class through its interface
In the same way that you can reference an object by using a variable defined
as a class that is higher up the hierarchy, you can reference an object by using
a variable defined as an interface that the object’s class implements. Taking
the preceding example, you can reference a Horse object by using an
ILandBound variable, as follows:
Click here to view code image
Horse myHorse = new Horse(...);
ILandBound iMyHorse = myHorse; // legal
This works because all horses are land-bound mammals, although the
converse is not true—you cannot assign an ILandBound object to a Horse
variable without casting it first to verify that it does actually reference a
Horse object and not some other class that also happens to implement the
ILandBound interface.
Download from finelybook PI:EMAIL
447
The technique of referencing an object through an interface is useful
because you can use it to define methods that can take different types as
parameters, as long as the types implement a specified interface. For
example, the FindLandSpeed method shown here can take any argument that
implements the ILandBound interface:
Click here to view code image
int FindLandSpeed(ILandBound landBoundMammal)
{
    ...
}
You can verify that an object is an instance of a class that implements a
specific interface by using the is operator, which is demonstrated in Chapter
8, “Understanding values and references.” You use the is operator to
determine whether an object has a specified type, and it works with interfaces
as well as with classes and structs. For example, the following block of code
checks that the variable myHorse actually implements the ILandBound
interface before attempting to assign it to an ILandBound variable:
Click here to view code image
if (myHorse is ILandBound)
{
    ILandBound iLandBoundAnimal = myHorse;
}
Note that when referencing an object through an interface, you can invoke
only methods that are visible through the interface.
Working with multiple interfaces
A class can have at most one base class, but it is allowed to implement an
unlimited number of interfaces. A class must implement all the methods
declared by these interfaces.
If a structure or class implements more than one interface, you specify the
interfaces as a comma-separated list. If a class also has a base class, the
interfaces are listed after the base class. For example, suppose that you define
another interface named IGrazable that contains the ChewGrass method for
all grazing animals. You can define the Horse class like this:
Click here to view code image
Download from finelybook PI:EMAIL
448
class Horse : Mammal, ILandBound, IGrazable
{
    ...
}
Explicitly implementing an interface
The examples so far have shown classes that implicitly implement an
interface. If you revisit the ILandBound interface and the Horse class (shown
next), you’ll see that although the Horse class implements from the
ILandBound interface, nothing in the implementation of the NumberOfLegs
method in the Horse class says that it is part of the ILandBound interface:
Click here to view code image
interface ILandBound
{
     int NumberOfLegs();
}
class Horse : ILandBound
{
    ...
    public int NumberOfLegs()
    {
        return 4;
    }
}
This might not be an issue in a simple situation, but suppose the Horse
class implemented multiple interfaces. There is nothing to prevent multiple
interfaces from specifying a method with the same name, although they
might have different semantics. For example, suppose that you wanted to
implement a transportation system based on horse-drawn coaches. A lengthy
journey might be broken down into several stages, or “legs.” If you wanted to
keep track of how many legs each horse had pulled the coach for, you might
define the following interface:
Click here to view code image
interface IJourney
{
     int NumberOfLegs();
}
Now, if you implement this interface in the Horse class, you have an
Download from finelybook PI:EMAIL
449
interesting problem:
Click here to view code image
class Horse : ILandBound, IJourney
{
    ...
    public int NumberOfLegs()
    {
         return 4;
    }
}
This is legal code, but does the horse have four legs or has it pulled the
coach for four legs of the journey? The answer as far as C# is concerned is
both of these! By default, C# does not distinguish which interface the method
is implementing, so the same method actually implements both interfaces.
To solve this problem and disambiguate which method is part of which
interface implementation, you can implement interfaces explicitly. To do this,