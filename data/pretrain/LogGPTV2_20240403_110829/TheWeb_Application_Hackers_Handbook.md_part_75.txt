Automating Customized Attacks
This chapter does not introduce any new categories of vulnerabilities. Rather, it
examines one key element in an effective methodology for hacking web applica-
tions — the use of automation to strengthen and accelerate customized attacks.
The range of techniques involved can be applied throughout the application and
to every stage of the attack process, from initial mapping to actual exploitation.
Every web application is different. Attacking an application effectively involves
using various manual procedures and techniques to understand its behavior
and probe for vulnerabilities. It also entails bringing to bear your experience
and intuition in an imaginative way. Attacks typically are customized in nature,
tailored to the particular behavior you have identifi ed and to the specifi c ways in
which the application enables you to interact with and manipulate it. Performing
customized attacks manually can be extremely laborious and is prone to mistakes.
The most successful web application hackers take their customized attacks a
step further and fi nd ways to automate them to make them easier, faster, and
more effective.
This chapter describes a proven methodology for automating customized
attacks. This methodology combines the virtues of human intelligence and
computerized brute force, usually with devastating results. This chapter also
examines various potential obstacles that may hinder the use of automation,
and ways in which these obstacles can be circumvented.
571
cc1144..iinndddd 557711 88//1199//22001111 1122::1155::2200 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 572
572 Chapter 14 n Automating Customized Attacks
Uses for Customized Automation
There are three main situations in which customized automated techniques
can be employed to help you attack a web application:
n Enumerating identifi ers — Most applications use various kinds of names
and identifi ers to refer to individual items of data and resources, such as
account numbers, usernames, and document IDs. You often will need
to iterate through a large number of potential identifi ers to enumerate
which ones are valid or worthy of further investigation. In this situation,
you can use automation in a fully customized way to work through a list
of possible identifi ers or cycle through the syntactic range of identifi ers
believed to be in use by the application.
An example of an attack to enumerate identifi ers would be where an
application uses a page number parameter to retrieve specifi c content:
http://mdsec.net/app/ShowPage.ashx?PageNo=10069
In the course of browsing through the application, you discover a large
number of valid PageNo values. But to identify every valid value, you
need to cycle through the entire range — something you cannot feasibly
do manually.
n Harvesting data — Many kinds of web application vulnerabilities enable
you to extract useful or sensitive data from the application using specifi c
crafted requests. For example, a personal profi le page may display the
personal and banking details of the current user and indicate that user’s
privilege level within the application. Through an access control defect,
you may be able to view the personal profi le page of any application
user — but only one user at a time. Harvesting this data for every user
might require thousands of individual requests. Rather than working
manually, you can use a customized automated attack to quickly capture
all this data in a useful form.
An example of harvesting useful data would be to extend the enumeration
attack just described. Instead of simply confi rming which PageNo values
are valid, your automated attack could extract the contents of the HTML
title tag from each page it retrieves, enabling you to quickly scan the list
of pages for those that are most interesting.
n Web application fuzzing — As we have described the practical steps for
detecting common web application vulnerabilities, you have seen numer-
ous examples where the best approach to detection is to submit various
cc1144..iinndddd 557722 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 573
Chapter 14 n Automating Customized Attacks 573
unexpected items of data and attack strings and review the application’s
responses for any anomalies that indicate that the fl aw may be present. In
a large application, your initial mapping exercises may identify dozens of
distinct requests you need to probe, each containing numerous different
parameters. Testing each case manually would be time-consuming and
mind-numbing and could leave a large part of the attack surface neglected.
Using customized automation, however, you can quickly generate huge
numbers of requests containing common attack strings and quickly assess
the server’s responses to hone in on interesting cases that merit further
investigation. This technique is often called fuzzing.
We will examine in detail each of these three situations and the ways in
which customized automated techniques can be leveraged to vastly enhance
your attacks against an application.
Enumerating Valid Identifi ers
As we have described various common vulnerabilities and attack techniques,
you have encountered numerous situations in which the application employs
a name or identifi er for some item, and your task as an attacker is to discover
some or all of the valid identifi ers in use. Here are some examples of where this
requirement can arise:
n The application’s login function returns informative messages that dis-
close whether a failed login was the result of an unrecognized username
or incorrect password. By iterating through a list of common usernames
and attempting to log in using each one, you can narrow down the list
to those that you know to be valid. This list can then be used as the basis
for a password-guessing attack.
n Many applications use identifi ers to refer to individual resources that are
processed within the application, such as document IDs, account numbers,
employee numbers, and log entries. Often, the application exposes some
means of confi rming whether a specifi c identifi er is valid. By iterating
through the syntactic range of identifi ers in use, you can obtain a com-
prehensive list of all these resources.
n If the session tokens generated by the application can be predicted, you
may be able to hijack other users’ sessions simply by extrapolating from a
series of tokens issued to you. Depending on the reliability of this process,
you may need to test a large number of candidate tokens for each valid
value that is confi rmed.
cc1144..iinndddd 557733 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 574
574 Chapter 14 n Automating Customized Attacks
The Basic Approach
Your fi rst task in formulating a customized automated attack to enumerate
valid identifi ers is to locate a request/response pair that has the following
characteristics:
n The request includes a parameter containing the identifi er you are tar-
geting. For example, in a function that displays an application page, the
request might contain the parameter PageNo=10069.
n The server’s response to this request varies in a systematic way when you
vary the parameter’s value. For example, if a valid PageNo is requested,
the server might return a response containing the specifi ed document’s
contents. If an invalid value is requested, it might return a generic error
message.
Having located a suitable request/response pair, the basic approach involves
submitting a large number of automated requests to the application, either work-
ing through a list of potential identifi ers, or iterating through the syntactic range
of identifi ers known to be in use. The application’s responses to these requests
are monitored for “hits,” indicating that a valid identifi er was submitted.
Detecting Hits
There are numerous attributes of responses in which systematic variations may
be detected, and which may therefore provide the basis for an automated attack.
HTTP Status Code
Many applications return different status codes in a systematic way, depend-
ing on the values of submitted parameters. The values that are most commonly
encountered during an attack to enumerate identifi ers are as follows:
n 200 — The default status code, meaning “OK.”
n 301 or 302 — A redirection to a different URL.
n 401 or 403 — The request was not authorized or allowed.
n 404 — The requested resource was not found.
n 500 — The server encountered an error when processing the request.
Response Length
It is common for dynamic application pages to construct responses using a page
template (which has a fi xed length) and to insert per-response content into this
template. If the per-response content does not exist or is invalid (such as if an
incorrect document ID was requested), the application might simply return an
cc1144..iinndddd 557744 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 575
Chapter 14 n Automating Customized Attacks 575
empty template. In this situation, the response length is a reliable indicator of
whether a valid document ID has been identifi ed.
In other situations, different response lengths may point toward the occur-
rence of an error or the existence of additional functionality. In the authors’
experience, the HTTP status code and response length indicators have been
found to provide a highly reliable means of identifying anomalous responses
in the majority of cases.
Response Body
It is common for the data actually returned by the application to contain literal
strings or patterns that can be used to detect hits. For example, when an invalid
document ID is requested, the response might contain the string Invalid docu-
ment ID. In some cases, where the HTTP status code does not vary, and the
overall response length is changeable due to the inclusion of dynamic content,
searching responses for a specifi c string or pattern may be the most reliable
means of identifying hits.
Location Header
In some cases, the application responds to every request for a particular URL
with an HTTP redirection (a 301 or 302 status code), where the target of the
redirection depends on the parameters submitted in the request. For example,
a request to view a report might result in a redirection to /download.jsp if the
supplied report name is correct, or to /error.jsp if it is incorrect. The target
of an HTTP redirection is specifi ed in the Location header and can often be
used to identify hits.
Set-Cookie Header
Occasionally, the application may respond in an identical way to any set of
parameters, with the exception that a cookie is set in certain cases. For example,
every login request might be met with the same redirection, but in the case of
valid credentials, the application sets a cookie containing a session token. The
content that the client receives when it follows the redirect depends on whether
a valid session token is submitted.
Time Delays
Occasionally, the actual contents of the server’s response may be identical when
valid and invalid parameters are submitted, but the time taken to return the
response may differ subtly. For example, when an invalid username is submitted
to a login function, the application may respond immediately with a generic,
uninformative message. However, when a valid username is submitted, the
cc1144..iinndddd 557755 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 576
576 Chapter 14 n Automating Customized Attacks
application may perform various back-end processing to validate the supplied
credentials, some of which is computationally intensive, before returning the
same message if the credentials are incorrect. If you can detect this time differ-
ence remotely, it can be used as a discriminator to identify hits in your attack.
(This bug is also often found in other types of software, such as older versions
of OpenSSH.)
TIP The primary objective in selecting indicators of hits is to fi nd one that is
completely reliable or a group that is reliable when taken together. However,
in some attacks, you may not know in advance exactly what a hit looks like.
For example, when targeting a login function to try to enumerate usernames,
you may not actually possess a known valid username to determine the appli-
cation’s behavior in the case of a hit. In this situation, the best approach is to
monitor the application’s responses for all the attributes just described and to
look for any anomalies.
Scripting the Attack
Suppose that you have identifi ed the following URL, which returns a 200 status
code when a valid PageNo value is submitted and a 500 status code otherwise:
http://mdsec.net/app/ShowPage.ashx?PageNo=10069
This request/response pair satisfi es the two conditions required for you to
be able to mount an automated attack to enumerate valid page IDs.
In a simple case such as this, it is possible to create a custom script quickly
to perform an automated attack. For example, the following bash script reads a
list of potential page IDs from standard input, uses the netcat tool to request a
URL containing each ID, and logs the fi rst line of the server’s response, which
contains the HTTP status code:
#!/bin/bash
server=mdsec.net
port=80
while read id
do
echo -ne “$id\t”
echo -ne “GET/app/ShowPage.ashx?PageNo=$id HTTP/1.0\r\nHost: $server\r\n\r\n”
| netcat $server $port | head -1
done | tee outputfile
cc1144..iinndddd 557766 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 577
Chapter 14 n Automating Customized Attacks 577
Running this script with a suitable input fi le generates the following output,
which enables you to quickly identify valid page IDs:
~> ./script <IDs.txt
10060 HTTP/1.0 500 Internal Server Error
10061 HTTP/1.0 500 Internal Server Error
10062 HTTP/1.0 200 Ok
10063 HTTP/1.0 200 Ok
10064 HTTP/1.0 500 Internal Server Error
...
TIP The Cygwin environment can be used to execute bash scripts on the
Windows platform. Also, the UnxUtils suite contains Win32 ports of numerous
useful GNU utilities such as head and grep.
You can achieve the same result just as easily in a Windows batch script. The
following example uses the curl tool to generate requests and the findstr
command to fi lter the output:
for /f “tokens=1” %i in (IDs.txt) do echo %i && curl
mdsec.net/app/ShowPage.ashx?PageNo=%i -i -s | findstr /B HTTP/1.0
Simple scripts like these are ideal for performing a straightforward task such
as cycling through a list of parameter values and parsing the server’s response
for a single attribute. However, in many situations you are likely to require
more power and fl exibility than command-line scripting can readily offer. The
authors’ preference is to use a suitable high-level object-oriented language that
enables easy manipulation of string-based data and provides accessible APIs
for using sockets and SSL. Languages that satisfy these criteria include Java, C#,
and Python. We will look in more depth at an example using Java.
JAttack
JAttack is an example of a simple but versatile tool that demonstrates how anyone
with some basic programming knowledge can use customized automation to
deliver powerful attacks against an application. The full source code for this tool
can be downloaded from this book’s companion website, http://mdsec.net/
wahh. More important than the actual code, however, are the basic techniques
involved, which we will explain shortly.
Rather than just working with a request as an unstructured block of text, we
need a tool to understand the concept of a request parameter. This is a named
cc1144..iinndddd 557777 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 578
578 Chapter 14 n Automating Customized Attacks
item of data that can be manipulated and that is attached to a request in a par-
ticular way. Request parameters may appear in the URL query string, HTTP
cookies, or the body of a POST request. Let’s start by creating a Param class to
hold the relevant details:
// JAttack.java
// by Dafydd Stuttard
import java.net.*;
import java.io.*;
class Param
{
String name, value;
Type type;
boolean attack;
Param(String name, String value, Type type, boolean attack)
{
this.name = name;
this.value = value;
this.type = type;
this.attack = attack;
}
enum Type
{
URL, COOKIE, BODY
}
}
In many situations, a request contains parameters that we don’t want to modify
in a given attack, but that we still need to include for the attack to succeed. We
can use the “attack” fi eld to fl ag whether a given parameter is being subjected
to modifi cation in the current attack.
To modify the value of a selected parameter in crafted ways, we need our tool
to understand the concept of an attack payload. In different types of attacks,
we need to create different payload sources. Let’s build some fl exibility into the
tool up front and create an interface that all payload sources must implement:
interface PayloadSource
{
boolean nextPayload();
void reset();
String getPayload();
}
The nextPayload method can be used to advance the state of the source; it
returns true until all its payloads are used up. The reset method returns the
state to its initial point. The getPayload method returns the value of the cur-
rent payload.
cc1144..iinndddd 557788 88//1199//22001111 1122::1155::2211 PPMM