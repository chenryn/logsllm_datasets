repository mirror
mirror/http/hostname=192.168.201.1: Sets the hostname of the repository
mirror we created previously
mirror/http/directory=/ubuntu1804: Sets the path on the repository mirror
host that is serving the repository content
mirror/http/proxy="": Tells the installer we are not using a proxy
live-installer/net-
image=http://192.168.201.1/ubuntu1804/install/filesystem.squash
fs : The URL from where the installer disk image can be downloaded
Of course, in an unattended boot scenario, you would not want to present the server with a
choice of operating system—you simply want it to boot the one you want to install. In this
instance, simply remove the menu items that are not needed.
[ 155 ]
Custom Builds with PXE Booting Chapter 6
Let's take a look at this in action. Upon a successful network boot of a test machine, we
should be presented with the following menu, as defined previously:
1. If we select the CentOS image as our boot target, you will see the kernel and base
system load, and then ultimately, a screen asking you to connect to the installer
using a VNC client, as shown in the following screenshot:
[ 156 ]
Custom Builds with PXE Booting Chapter 6
2. Connecting with a VNC viewer, as instructed, yields the familiar interactive
CentOS 7 graphical installer, as shown in the following screenshot:
3. Thus, a complete remote installation is possible, without the need to visit the
location of the server, or connect a keyboard and mouse! The same is almost true
if we boot our Ubuntu Server image, only this time, the console is on the host
screen, rather than available over VNC, as can be seen in the following
screenshot:
[ 157 ]
Custom Builds with PXE Booting Chapter 6
This lends itself well to either redirecting the console over an SOL implementation or a
remove KVM option. Neither of these is particularly convenient, especially as the goal of
this book is automation!
Thus, in the next section, we will look at performing automated installations, using the
concept of unattended builds—that is to say, builds where no human needs to intervene for
the installation to take place.
Performing unattended builds
The ultimate goal of this process is to have a server boot over the network and configure
itself completely, rather than having to have someone interact with it. Although this is not a
process controlled by Ansible, it is still a vital component in our Standard Operating
Environment (SOE) architecture to ensure consistency of builds, and that build standards
can be well documented and version controlled.
Fortunately, both CentOS (Red Hat-based) and Ubuntu (Debian-based) installers provide
the capability for unattended installs to be completed in a programmatic manner. Sadly,
there is no common standard for this process and, as you will see in this section, the
language used for this process is wholly different between the two Linux types we are
discussing here. Nevertheless, by covering off these two technologies, we are giving a good
grounding that will enable you to perform remote, unattended installations on a wide
variety of Linux systems.
Note that the examples in this chapter are complete and working, and thus are provided as
hands-on examples—however, they are really just scratching the surface in terms of what
these unattended installation technologies can do. It is left as an exercise for you to expand
on these examples, and build them out to your own requirements.
Let's get started by looking in the next section at how we perform unattended builds on
Red Hat-based platforms such as CentOS using kickstart files.
Performing unattended builds with kickstart files
The Red Hat installer, Anaconda, uses a scripting language called kickstart to define
unattended builds. This is well documented, and there are many examples available on the
internet for you to work from—in fact, when you manually install a Red Hat derivative
such as CentOS 7, you will find a kickstart file in /root/anaconda-ks.cfg, which could
be employed to automate future builds! In the following, we will build up our own simple
kickstart file, based loosely on a minimal install of CentOS 7 from the interactive installer.
[ 158 ]
Custom Builds with PXE Booting Chapter 6
1. Let's start building up our example kickstart file for use in this chapter. Consider
this block of code:
auth --enableshadow --passalgo=sha512
url --url="http://192.168.201.1/centos7/"
graphical
firstboot --enable
ignoredisk --only-use=sda
keyboard --vckeymap=gb --xlayouts='gb'
lang en_GB.UTF-8
reboot
Much of the kickstart file is very readable—in the preceding code block, you can
see the following: we are defining sha512 for the password hashing algorithm;
our repository server is available at http://192.168.201.1/centos7/; we are
performing a graphical install, using only /dev/sda, and with some GB specific
locale settings. We also tell the installer to reboot automatically once the install
completes successfully.
2. We then build on this by setting up the network (note that you must know the
network device name in advance of creating this file, so you might find it useful
to boot into a live environment to check this first) by running the following code:
network --bootproto=dhcp --device=ens33 --ipv6=auto --activate
network --hostname=ksautomation
This sets the hostname of our newly built server to ksautomation, and enables
IPv6 and IPv4 DHCP on the network device called ens33.
3. We then define the root account password, and—optionally—any additional
accounts we want to be added as part of the build, by running the following
code:
rootpw --iscrypted
$6$cUkXdOxB$o8uxoU6arUj0g9SXqMGnigBYDH4rCkkQt9z/qYPm.lUYNwaZChCz2ep
QMUlbHUg8IVzN9lei9i/rschw1HydU.
user --groups=wheel --name=automation --
password=$6$eCIJyrjn$Vu30KX//UntsM0h..MLT6ik.m1GL8ayILBFWjbDrKSXowl
i5/hycMaiFzGI926YXEMfXXjAuwOFLIdANZ09/g1 --iscrypted --
gecos="Automation User"
[ 159 ]
Custom Builds with PXE Booting Chapter 6
Note that the password hashes must be used in this file—there are many ways to
generate these. I used the following snippet of Python to generate unique hashes
for the password string (you would obviously want to choose a more secure
password!):
$ python -c "import random,string,crypt;
pwsalt = ''.join(random.sample(string.ascii_letters,8));
print crypt.crypt('password', '\$6\$%s\$' % pwsalt)"
Running the preceding three lines of code in the shell of any Linux server that has
Python installed will generate the password hash needed for your kickstart file,
which you can copy and paste into your installation.
The preceding code is used only to generate the password hashes—do not
include it in your kickstart file!
4. Finally, we set the time zone appropriately, and enable the chrony time
synchronization service. We initialize the disk label on our chosen boot
device, sda, and make use of Anaconda's automated partitioning (designated by
the autopart directive), to set up the disk.
Note that clearpart --none does not actually clear the partition table—and if you run
through this example with the kickstart file as defined here, the installation will only
complete if there is space on the target disk to install CentOS 7. To have the kickstart file
wipe the target disk and perform a fresh installation of CentOS 7 (which may be desirable
to avoid having to manually wipe old machines before reuse), perform the following
changes to the kickstart file:
1. Insert the zerombr directive above the clearpart statement to ensure the boot
sector is cleared.
2. Change the clearpart line to read clearpart --drives=sda --initlabel
--all—be sure to only specify the drives you want clearing in the --
drives= parameter!
The fragment of following code does not include these changes as they are
destructive—however, you are free to experiment with them as you wish in your
test environment:
services --enabled="chronyd"
timezone Europe/London --isUtc
[ 160 ]
Custom Builds with PXE Booting Chapter 6
bootloader --location=mbr --boot-drive=sda
autopart --type=lvm
clearpart --none --initlabel
We then define our packages to be installed by default. Here, we are installing
the core package group, the minimal system package set, and the chrony package. We are
also disabling kdump for our test server, as shown in the following code block:
%packages
@^minimal
@core
chrony
%end
%addon com_redhat_kdump --disable --reserve-mb='auto'
%end
Finally, we can perform additional customization, such as setting a strong password
policy—the following lines are actually the defaults from the interactive installer, and
should be customized to your requirements:
%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --
notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --
emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --
notempty
%end
When you have built your complete kickstart file, it's time to test the boot process.
Remember the PXELINUX boot configuration we used in the last section? Well, that is
reused almost in its entirety, except this time, we need to tell it where to find the kickstart
file. I am storing the file we have just created in /var/www/html/centos7-
config/centos7unattended.cfg—thus, it can be downloaded from our HTTP server,
just like with the packages for the installer. In this case, our PXELINUX configuration
would look like this:
default isolinux/menu.c32
prompt 0
timeout 120
menu title --------- Enterprise Automation Boot Menu ---------
label 1
[ 161 ]
Custom Builds with PXE Booting Chapter 6
menu label ^1. Install CentOS 7.6 from local repo
kernel centos7/vmlinuz
append initrd=centos7/initrd.img
method=http://192.168.201.1/centos7 devfs=nomount ip=dhcp inst.vnc
inst.vncpassword=password
inst.ks=http://192.168.201.1/centos7-config/centos7unattended.cfg
Let's run through the installation process, and see what happens. Initially, the process will
look identical to the interactive installation we performed earlier in this chapter.
The preceding PXE boot configuration shown is identical to before, save
for the inst.ks parameter at the end, telling Anaconda where to
download our kickstart file from.
Indeed, when you connect to the VNC console of your machine as it is being built, things
will initially look the same—the graphical installer for CentOS 7 loads, as shown in the
following screenshot:
[ 162 ]
Custom Builds with PXE Booting Chapter 6
So far, everything looks like an ordinary interactive installation. However, once the installer
finishes the various tasks listed (for example, Saving storage configuration...), you will
note that you are presented with a screen that looks complete, save for the Begin
Installation button being grayed out (as shown in the following screenshot):
[ 163 ]
Custom Builds with PXE Booting Chapter 6
Note the differences here—the installation source has now been set to the HTTP server we
set up for our installation process. All other items that are usually completed manually,
such as disk selection, have been completed automatically, using the configuration in our
kickstart script. In fact, if we wait a short while longer, you will see that the installation
commences automatically, without the need to click the Begin Installation button, as
shown in the following screenshot:
The installation now proceeds, using the parameters from our kickstart file. Note that the
root password and initial user account creation has been completed, using the parameters
from the kickstart script, and so, these buttons are again grayed out. In short, although the
installation process appears very similar to a normal interactive installation, the user is not
able to interact with the process in any way.
[ 164 ]
Custom Builds with PXE Booting Chapter 6
There are only two times when a user will be expected to interact with a kickstart
installation, as follows:
1. A configuration is incomplete or incorrect—in this instance, the installer will
pause and expect the user to intervene, and (if possible) correct the issue.
2. If the reboot keyword has not been specified in the kickstart file.
In the latter case, the installation will complete, but the installer will wait for the Reboot
button to be clicked, as shown in the following screenshot:
[ 165 ]
Custom Builds with PXE Booting Chapter 6
Rebooting automatically at the end of a kickstart installation is often desirable, as it saves
the need to connect to the console. However, there are times when it is not—perhaps you
don't actually want the newly built server to be running on the network at the present time.
Or, perhaps you are building an image for templating purposes, and so don't want the first
boot to complete, as it will mean log files and other data that subsequently need to be
cleaned up.
The exact path the installation takes is up to you—the important thing to note is that you
can connect to the VNC console, as shown in the preceding screenshots, and see exactly
how the installation is going. If there are any errors or issues, you will be alerted.
Test this out, and see how the build performs for you. In the event of any issues, the
installer runs up several consoles on the physical server that contain logging
information—you can switch between these using Alt + Tab, or Alt + F, where F is
one of the function keys—each of the first six corresponds to a different console, which will
contain useful logging information. These can be queried, to debug any issues that might
arise. The instructions are actually shown at the bottom of the text mode console
screen—see the following screenshot for an example:
In the preceding screenshot, we can see we are on console 1, entitled main. Console 2 has a
shell for debugging purposes, and consoles 3 through 5 show log files specific to the
installation process.
However, if all of this goes well, you will see the installer run without any intervention
required, and then, the server will reboot and present you with a login prompt. From there,
you should be able to log in, using the password you defined via the password hash earlier.
That concludes the process of building a CentOS 7 server over the network using a kickstart
file. The same high-level process can be followed for Ubuntu and other Debian derivatives
through the use of pre-seed files, as we shall explore in the next section.
[ 166 ]
Custom Builds with PXE Booting Chapter 6
Performing unattended builds with pre-seed files
Broadly speaking, Ubuntu Server builds (and indeed, other Debian derivative operating
systems) function exactly the same way. You specify a script file to tell the installer what
actions to take, in place of a human being selecting options. With Ubuntu Server, this is
called a pre-seed file. Let's go through this now, and build one up.
The pre-seed files are very powerful, and there is lots of documentation around—however,
they can sometimes appear more complex to the naked eye. Starting with the following
lines of code, we set the appropriate locale and keyboard layout for our server:
d-i debian-installer/locale string en_GB
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/xkb-keymap select gb
We then configure the following network parameters:
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string unassigned-hostname
d-i netcfg/get_domain string unassigned-domain
d-i netcfg/hostname string automatedubuntu
d-i netcfg/wireless_wep string
Here, you will note that we don't actually need to know the interface name in
advance—rather, we can get Ubuntu to guess it, using its automated detection algorithm.
We are setting the hostname to automatedubuntu; however, note that the other
parameters are used to prevent the installer from prompting for a hostname from the user,
thus meaning the installation is not truly unattended. Next, we add some details about
where the installer can download its packages from, as shown in the following code block:
d-i mirror/country string manual
d-i mirror/http/hostname string 192.168.201.1
d-i mirror/http/directory string /ubuntu1804
d-i mirror/http/proxy string
These should naturally be adjusted to suit your network, HTTP server setup on your PXE
server, and so on.
Many of these are also set in the kernel parameters, as we saw in our
PXELINUX configuration earlier—we just need to confirm a few of them
here.
[ 167 ]
Custom Builds with PXE Booting Chapter 6
We then set up the root account password, and any additional user accounts, as follows:
d-i passwd/root-password password password
d-i passwd/root-password-again password password
d-i passwd/user-fullname string Automation User
d-i passwd/username string automation
d-i passwd/user-password password insecure
d-i passwd/user-password-again password insecure
d-i user-setup/allow-password-weak boolean true
d-i user-setup/encrypt-home boolean false
Note here that I have specified the passwords in plain text, to highlight the possibility to do
this here—there are alternative parameters you can specify that will accept a password
hash, which is far more secure when creating configuration files. Here, the root password is
set to password, and a user account called automation is set up, with the
password insecure. As before, our password policy is quite weak and could be
strengthened here, or later, using Ansible. We then set the time zone as appropriate, and
turn on NTP synchronization, as follows:
d-i clock-setup/utc boolean true
d-i time/zone string Etc/UTC
d-i clock-setup/ntp boolean true
The most complex block of code in our otherwise simplistic example is the following one,
which is used to partition and set up the disk:
d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string lvm
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true