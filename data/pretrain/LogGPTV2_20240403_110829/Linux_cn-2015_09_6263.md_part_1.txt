---
author: Gabriel Cánepa
category: 技术
comments_data:
- date: '2015-09-22 20:08:45'
  message: 应该是7了不是6
  postip: 112.65.190.122
  username: 来自上海的 Microsoft Edge 12.10536|Windows Phone 10.0 用户
- date: '2015-09-22 22:15:48'
  message: 哈哈，是笔误——还是有人仔细一篇篇读的，欣慰。。
  postip: 123.120.67.236
  username: linux [Chrome 45.0|Mac 10.10]
- date: '2020-05-08 20:39:39'
  message: 2020年还有人读呢
  postip: 106.38.4.146
  username: 来自北京的 Chrome 78.0|Windows 10 用户
count:
  commentnum: 3
  favtimes: 9
  likes: 0
  sharetimes: 0
  viewnum: 10782
date: '2015-09-22 09:07:00'
editorchoice: false
excerpt: '在上一篇文章(RHCSA 系列（六）)中，我们解释了如何使用 parted 和 ssm 来设置和配置本地系统存储。  RHCSA 系列: 配置
  ACL 及挂载 NFS/Samba 共享  Part 7 我们也讨论了如何创建和在系统启动时使用一个密码来挂载加密的卷。另外，我们告诫过你要避免在挂载的文件系统上执行危险的存储管理操作。记住了这点后，现在，我们将回顾在
  RHEL 7 中最常使用的文件系统格式，然后将涵盖有关手动或自动挂载、使用和卸载网络文件系统（CIFS 和 NFS）的话题以及在你的操作系统上实现访问控制列表（Access
  Control List）的使用。 前提条件 在进一步深'
fromurl: http://www.tecmint.com/rhcsa-exam-configure-acls-and-mount-nfs-samba-shares/
id: 6263
islctt: true
largepic: /data/attachment/album/201509/21/231058m9l58njobd5vbn6b.png
permalink: /article-6263-1.html
pic: /data/attachment/album/201509/21/231058m9l58njobd5vbn6b.png.thumb.jpg
related:
- displayorder: 0
  raid: 6257
- displayorder: 0
  raid: 6266
reviewer: ''
selector: ''
summary: '在上一篇文章(RHCSA 系列（六）)中，我们解释了如何使用 parted 和 ssm 来设置和配置本地系统存储。  RHCSA 系列: 配置
  ACL 及挂载 NFS/Samba 共享  Part 7 我们也讨论了如何创建和在系统启动时使用一个密码来挂载加密的卷。另外，我们告诫过你要避免在挂载的文件系统上执行危险的存储管理操作。记住了这点后，现在，我们将回顾在
  RHEL 7 中最常使用的文件系统格式，然后将涵盖有关手动或自动挂载、使用和卸载网络文件系统（CIFS 和 NFS）的话题以及在你的操作系统上实现访问控制列表（Access
  Control List）的使用。 前提条件 在进一步深'
tags:
- RHCSA
- ACL
thumb: false
title: 'RHCSA 系列（七）: 使用 ACL（访问控制列表) 和挂载 Samba/NFS 共享'
titlepic: false
translator: FSSlc
updated: '2015-09-22 09:07:00'
---
在上一篇文章([RHCSA 系列（六）](/article-6257-1.html))中，我们解释了如何使用 parted 和 ssm 来设置和配置本地系统存储。
![配置 ACL 及挂载 NFS/Samba 共享](/data/attachment/album/201509/21/231058m9l58njobd5vbn6b.png)
*RHCSA 系列: 配置 ACL 及挂载 NFS/Samba 共享 – Part 7*
我们也讨论了如何创建和在系统启动时使用一个密码来挂载加密的卷。另外，我们告诫过你要避免在挂载的文件系统上执行危险的存储管理操作。记住了这点后，现在，我们将回顾在 RHEL 7 中最常使用的文件系统格式，然后将涵盖有关手动或自动挂载、使用和卸载网络文件系统（CIFS 和 NFS）的话题以及在你的操作系统上实现 访问控制列表   （    Access Control List    ） 的使用。
#### 前提条件
在进一步深入之前，请确保你可使用 Samba 服务和 NFS 服务（注意在 RHEL 7 中 NFSv2 已不再被支持）。
在本次指导中，我们将使用一个IP 地址为 192.168.0.10 且同时运行着 Samba 服务和 NFS 服务的机器来作为服务器，使用一个 IP 地址为 192.168.0.18 的 RHEL 7 机器来作为客户端。在这篇文章的后面部分，我们将告诉你在客户端上你需要安装哪些软件包。
### RHEL 7 中的文件系统格式
从 RHEL 7 开始，由于 XFS 的高性能和可扩展性，它已经被作为所有的架构中的默认文件系统。根据 Red Hat 及其合作伙伴在主流硬件上执行的最新测试，当前 XFS 已支持最大为 500 TB 大小的文件系统。
另外，XFS 启用了 `user_xattr`（扩展用户属性） 和 `acl`（POSIX 访问控制列表）来作为默认的挂载选项，而不像 ext3 或 ext4（对于 RHEL 7 来说，ext2 已过时），这意味着当挂载一个 XFS 文件系统时，你不必显式地在命令行或 /etc/fstab 中指定这些选项（假如你想在后一种情况下禁用这些选项，你必须显式地使用 `no_acl` 和 `no_user_xattr`）。
请记住扩展用户属性可以给文件和目录指定，用来存储任意的额外信息如 mime 类型，字符集或文件的编码，而用户属性中的访问权限由一般的文件权限位来定义。
#### 访问控制列表
作为一名系统管理员，无论你是新手还是专家，你一定非常熟悉与文件和目录有关的常规访问权限，这些权限为所有者，所有组和“世界”（所有的其他人）指定了特定的权限（可读，可写及可执行）。但如若你需要稍微更新下你的记忆，请参考 [RHCSA 系列（三）](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/ch-acls.html).
但是，由于标准的 `ugo/rwx` 集合并不允许为不同的用户配置不同的权限，所以 ACL 便被引入了进来，为的是为文件和目录定义更加详细的访问权限，而不仅仅是这些特别指定的特定权限。
事实上， ACL 定义的权限是由文件权限位所特别指定的权限的一个超集。下面就让我们看看这个转换是如何在真实世界中被应用的吧。
1. 存在两种类型的 ACL：访问 ACL，可被应用到一个特定的文件或目录上；以及默认 ACL，只可被应用到一个目录上。假如目录中的文件没有 ACL，则它们将继承它们的父目录的默认 ACL 。
2. 从一开始， ACL 就可以为每个用户，每个组或不在文件所属组中的用户配置相应的权限。
3. ACL 可使用 `setfacl` 来设置（和移除），可相应地使用 -m 或 -x 选项。
例如，让我们创建一个名为 tecmint 的组，并将用户 johndoe 和 davenull 加入该组：
```
# groupadd tecmint
# useradd johndoe
# useradd davenull
# usermod -a -G tecmint johndoe
# usermod -a -G tecmint davenull
```
并且让我们检验这两个用户都已属于追加的组 tecmint：
```
# id johndoe
# id davenull
```
![检验用户](/data/attachment/album/201509/21/231059ucaeooip6o5sop51.png)
*检验用户*
现在，我们在 /mnt 下创建一个名为 playground 的目录，并在该目录下创建一个名为 testfile.txt 的文件。我们将设定该文件的属组为 tecmint，并更改它的默认 `ugo/rwx` 权限为 770（即赋予该文件的属主和属组可读、可写和可执行权限）：
```
# mkdir /mnt/playground
# touch /mnt/playground/testfile.txt
# chown :tecmint /mnt/playground/testfile.txt
# chmod 770 /mnt/playground/testfile.txt
```
接着，依次切换为 johndoe 和 davenull 用户，并在文件中写入一些信息：
```
# su johndoe
$ echo "My name is John Doe" > /mnt/playground/testfile.txt
$ su davenull
$ echo "My name is Dave Null" >> /mnt/playground/testfile.txt
```
到目前为止，一切正常。现在我们让用户 gacanepa 来向该文件执行写操作 – 则写操作将会失败，这是可以预料的。
```
$ su gacanepa
$ echo "My name is Gabriel Canepa" >> /mnt/playground/testfile.txt
```
![管理用户的权限](/data/attachment/album/201509/21/231100zudukugmjjultdz1.png)
*管理用户的权限*
但实际上我们需要用户 gacanepa（他不是组 tecmint 的成员）在文件 /mnt/playground/testfile.txt 上有写权限，那又该怎么办呢？首先映入你脑海里的可能是将该用户添加到组 tecmint 中。但那将使得他在所有该组具有写权限位的文件上均拥有写权限，但我们并不想这样，我们只想他能够在文件 /mnt/playground/testfile.txt 上有写权限。
现在，让我们给用户 gacanepa 在 /mnt/playground/testfile.txt 文件上有读和写权限。
以 root 的身份运行如下命令：
```
# setfacl -R -m u:gacanepa:rwx /mnt/playground
```
则你将成功地添加一条 ACL，允许 gacanepa 对那个测试文件可写。然后切换为 gacanepa 用户，并再次尝试向该文件写入一些信息：
```
$ echo "My name is Gabriel Canepa" >> /mnt/playground/testfile.txt
```
要观察一个特定的文件或目录的 ACL，可以使用 `getfacl` 命令：
```
# getfacl /mnt/playground/testfile.txt
```