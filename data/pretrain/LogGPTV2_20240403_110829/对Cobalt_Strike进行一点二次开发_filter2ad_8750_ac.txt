                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
其他地方不需要修改,然后我们将cs的jar包和该文件放置在同一文件夹中,运行命令:
    javac -encoding UTF-8 -classpath cobaltstrike.jar CrackSleeve.java
    java -classpath cobaltstrike.jar;./ CrackSleeve decode
成功解密得到对应的DLL模板文件:
之后的操作就是需要修改一系列的DLL,将异或数据用之前的`0x1e`进行替换,这里以`Beacon.x64.dll`为例,使用IDA打开后全局搜索`0x2e`发现:
修改字节然后记得`apply patches to input file`
这里需要修改的文件有如下:
    beacon.dll
    beacon.x64.dll
    dnsb.dll
    dnsb.x64.dll
    pivot.dll
    pivot.x64.dll
    extc2.dll
    extc2.x64.dll
方法都是类似,搜索`0x2e`看是否存在异或行为,出现则Patch最后apply即可,当全部修改完成后我们还需要加密回去再替换掉sleeve文件夹中的所有文件:
随后用同样的方式进行加密:
    java -classpath cobaltstrike.jar;./ CrackSleeve encode
然后我们再讲加密后的DLL全部替换到原sleeve文件夹中,然后重新Build起`cobalt strike`的jar即可
测试HTTP和HTTPS监听器是否正常工作,如果正常工作则Bypass成功,这样就成功的避免了Beacon Config的检测
现在我们在重新使用`parse_beacon_config.py`已经无法得到对应的Beacon Config配置文件
## 0x04 基于内存签名检测的绕过
由于CS的本身特性(反射注入DLL等),在内存中肯定是有或多或少的特征,这里我们以`sleep_mask`为例,在`CS 3.12版本后`推出了
**混淆与睡眠** 内存规避的功能。
我们知道在环境中查找Beacon存在的一种方法是扫描所有正在运行的进程以查找指示攻击活动的常见字符串。例如，搜索`ReflectiveLoader`字符串将找到不会更改此导出函数名称的内存驻留反射DLL,因此为了对内存扫描进行一定规避,其引入了混淆与睡眠
> 其功能可以理解为:Beacon 是（主要）单线程信标。它请求任务，执行这些任务，然后进入睡眠状态。Beacon
> 大部分时间都在休眠。当启用`obfuscate-and-> sleep`时，Beacon会在进入睡眠状态之前在内存中混淆自身。当代理醒来时，它会自己恢复到原来的状态。
在[CS官方介绍](https://www.cobaltstrike.com/blog/cobalt-strike-3-12-blink-and-youll-miss-it/)中给出了如下的使用方法:
只需要在profile文件中设置`sleep_mask="true"`即可开启睡眠混淆功能,这里我们分别来看一下开启前和开启后的内存变化,这里使用`Process
Hacker`找到对应Beacon在内存中的值,此时是开启`sleep_mask`,可以知道该数据是被加密过的  
当我们存在Sleep时,并且设置`sleep_mask=true`
> 注意这里有可能因为profile设置了`cleanup`选项，而将内存中的Stage释放掉了,导致出现没法在内存中找到对应的值的情况
当通过设置`sleep 0`为实时后会取消混淆,我们再点击`re-read`会发现会取消混淆，恢复到初始的模式:
然而在[https://www.elastic.co/cn/blog/detecting-cobalt-strike-with-memory-signatures](https://)中提到,Beacon 的 obfuscate-and-sleep
选项只会混淆字符串和数据，而负责进行加解密的代码部分不会混淆，且在内存中可以被标记出来,因此当我们拥有这一段数据时便能够在内存中进行匹配从而找到，我们利用如下的yara规则:
    rule cobaltstrike_beacon_4_2_decrypt
    {
    meta:
        author = "Elastic"
        description = "Identifies deobfuscation routine used in Cobalt Strike Beacon DLL version 4.2."
    strings:
        $a_x64 = {4C 8B 53 08 45 8B 0A 45 8B 5A 04 4D 8D 52 08 45 85 C9 75 05 45 85 DB 74 33 45 3B CB 73 E6 49 8B F9 4C 8B 03}
        $a_x86 = {8B 46 04 8B 08 8B 50 04 83 C0 08 89 55 08 89 45 0C 85 C9 75 04 85 D2 74 23 3B CA 73 E6 8B 06 8D 3C 08 33 D2}
    condition:
         any of them
    }
的确在内存中匹配到了对应的值,这意味着即使我们使用混淆与睡眠也依然可以通过某种内存签名进行检测:
因此在这里我们需要对其进行绕过,其实绕过思路也十分简单,首先我们打开`beacon.x64.dll`(这里就用之前解密好的DLL),找到特征对应的地方:  
通过Hex匹配定位到了功能代码部分:
其对应的伪代码如下所示:
因此我们想要改动Hex部分,甚至不需要对程序逻辑进行改动,只需要对赋值的先后进行调整即可,这里我们找对应函数对赋值进行顺序替换:
这里第一条指令是将[r10]赋值给r9d,对应的汇编指令为`8B 0A`,第二条指令是将[r10+4]赋值给r11d,对应的汇编指令为`8B 5A
04`,我们知道更改这两个赋值顺序是没有任何影响的,因此我们只需要稍微进行Patch即可
下面只需要替换一下即可:
32位的`beacon.dll`修改也是类似的,这里就不继续展开对`beacon.dll`的相关patch了,只是需要注意最后同样需要加密回去然后替换sleeve文件Rebuild
###  一点关于BeaconEye的疑惑
理论上修改mov指令的顺序对堆布局和分配应该不会有任何影响,但实际上会在最后笔者发现修改完后用自带的生成HTTPS的Stager并不会被BeaconEye检测到,而HTTP则会被检测,并且由其衍生spawn出来的都会被检测到,尝试动态调试但发现BeaconEye在堆查询中没有匹配到对应的规则:
而单独提取使用yara匹配时在内存中是存在的:
因此在这里比较疑惑,个人感觉不是因为对内存签名检测的绕过引起的,因为并没有影响堆布局,这里还希望其他师傅指点！
## 0x05 Bypass BeaconEye
BeaconEye的出现可以说使得很多隐匿的手段都变得无效,其主要原因归结于两点:
  * 1.将Beacon Config配置文件作为特征
  * 2.扫描的范围在内存的堆之中
Beacon虽然会加密存储在Loader中,但是怎样加密最后都会释放到堆内存当中,并且是以一种裸露的方式存在,即使在`profile`配置文件中设置`sleep_mask`,也仅是对代码段进行保护,不管何种加密最终都要进行解密,而`Beacon
Config`则会一直裸露在堆内存中,这也是BeaconEye针对堆扫描的原因所在
在探讨现有的Bypass思路之前我们先再来回顾一下`Beacon Config`在java中的数据格式是怎样的的?
在Beacon
config的生成阶段都是通过`addshort或者addint`等方式,是采取的通过追加了一个结构体的方式,并且这个结构的字段也很明显,分别对应的index、类型以及长度和最后的value值
根据这样一种结构我们便能够解析出在内存中的Beacon
Config配置,但是这和实际加载的数据结构却又有区别,让我们逆向对应的32位的`Beacon.dll`:
> 前文我们知道在Beacon
> config生成后会有异或加密密钥的操作,对应版本不同密钥分别为0x69和0x2e,因此这里在DLL中肯定会先进行解密,然后写入,因此我们只需要在DLL中搜索对应异或,找到对应的函数即可
因此在32位的DLL中其实只写入了两处数据,第一次写入type后再根据type的值写入value数据,并且注意到这里是`_WORD`类型,对应2个字节
而java中其实相当于使用addshort追加一个结构体,并且当写入Type时实际上也是2个字节
因此我的理解是`TeamServer`预先分配的2个字节用于对应的Type,而实际上DLL也只分别只用两个字节写入了type,但是并没有马上接着写入2个字节或4个字节的`Value`,结合伪码便可以清楚看到,这里预留了4个字节来表示Type,而后四个字节才写入Value
在yara规则中(以32位为例)实际上对Type的表示使用了4个字节,这会导致后两个字节实际上默认是空的,让我们看一下对应的yara规则:
>
> 也有说法认为在TeamServer的Java代码中使用长度为4个字节的Int类型来写入type,个人觉得并不是这样,在之前的图中也看到了写入Type时只write了长度为2的byte,只是在内存存储上的确使用了4个字节来存储这个Type,因此也意味着在有效Type和Data之间还存在两个字节的预留,默认被memset初始化为0
这样的差异虽然在功能上完全不影响,但是由于存在数据Gap,导致我们针对后两个字节的任意修改便能够轻松绕过BeaconEye所基于的yara规则
当然这样的修改还是同样需要基于`Beacon.dll`,这里对32位和64位的dll都进行一定的修改来达到绕过yara规则的效果:
先以32位DLL为例,用IDA打开解码后的DLL后找到对应的初始化内存位置:
其中`memset`进行初始化操作,函数原型如下:
    # include 
    void *memset(void *s, int c, unsigned long n);
> 函数的功能是：将指针变量s所指向的前n字节的内存单元用一个“整数”c替换，注意
> c是int型。s是void*型的指针变量，所以它可以为任何类型的数据进行初始化。
因此我们在这里只要修改为非0数即可,修改字节将`6A 00`修改后面的00即可
再来修改`beacon.x64.dll`,同样定位到进行内存初始化的函数处:
这里由于是用0来初始化内存,因此使用的异或:
我们将汇编指令改成`mov edx xx`即可,修改完成后我们还需要重新对解密的DLL进行加密,然后重新替换到sleeve文件中重新rebuild下:
> 注意xor edx edx只有两个字节,因此为了不破坏结构,进行修改时也尽量只使用两个字节的机器码实现修改
现在我们生成一个简单的32位的Stager然后运行再使用BeaconEye查看效果,可以看到由于我们已经修改对应的特征位,使用默认的yara规则已经匹配不到Beacon
Config配置
再来验证64位Stager发现同样BeaconEye以及之前基于签名检测的yara规则均失效
## 0x06 关于Bypass BeaconEye的其他一些说明
其实通过上述所说的修改后市面上所有的检测Beacon的工具都已经检测不到,类似[EvilEye](https://github.com/akkuman/EvilEye)、以及[CobaltStrike-scan](https://github.com/Apr4h/CobaltStrikeScan)等,其本质上只是绕过对于内存特征的检测,因为yara规则是写死的,我们只需要修改使得内存特征和yara规则稍有偏差便能够绕过
>
> 对检测而言的话原理上只需要将`00`修改为通配符即可重新检测得到,但我将`00修改为??`后还是没检测出来,使用yara也没检测出来,这里原因不详,理论上修改内存初始化的值后Type对应的预留部分的值应该会被相同值填充
但实际上yara并没有在内存中匹配如上这样的数据,所以这里我也不知道怎么检测这种绕过,有了解的师傅还请指教指教！
这其实是绕过Beaconeye的 **第一种方式** ,也就是通过绕过内存规则, **第二种方式** 已经被提及到,那就是因为 **堆遍历算法缺陷**
，因为BeaconEye是使用了`NtQueryVirtualMemory`函数进行堆的枚举。使用该函数获得的堆大小只会计算属性一致的内存页，而实际上堆段中的内存属性是不同且不连贯的,这导致BeaconEye在获取堆信息时实际只获取了堆的第一个堆段的内容,因此通过调用`SymInitialize函数`或反复调用HeapAlloc等方式,Payload分配在某个堆的第二个Segment即堆段时便无法检测到
这种方式可以使用微软提供的`HeapWalk`循环遍历所有分配的堆块的方式,相当于遍历了整个堆内存来解决
**第三种方式**
更为彻底,那就是采取堆加密的方式,大致思路就是对`sleep`进行Hook后,在Sleep后先挂起所有线程,然后对堆实现加密（例如简单的异或加密）,随后在恢复线程之前进行解密
这里并没有继续深入,可以参考原文:  
[https://www.arashparsa.com/hook-heaps-and-live-free/](https://)
## 0x07 总结
上述只是对现有的一些功能的改进和绕过,目的也是了解和熟悉整个CS的工作流程以及相关二次开发的步骤，参考了很多其他师傅们的思路和相关文章,如有不当之处还请指正！
* * *
参考文章:  
[https://www.cobaltstrike.com/blog/cobalt-strike-3-12-blink-and-youll-miss-it/](https://)  
[https://www.elastic.co/cn/blog/detecting-cobalt-strike-with-memory-signatures](https://)  
[https://www.arashparsa.com/hook-heaps-and-live-free/](https://)  
[https://www.anquanke.com/post/id/253039#h2-6](https://)  
[https://www.ctfiot.com/3969.html](https://)