# Custom Processing Unit: Tracing and Patching Intel Atom Microcode
## Black Hat USA 2022

### Authors
- **Pietro Borrello**  
  Sapienza University of Rome  
  [@borrello_pietro]
- **Martin Schwarzl**  
  Graz University of Technology  
  [@marv0x90]
- **Michael Schwarz**  
  CISPA Helmholtz Center for Information Security
- **Daniel Gruss**  
  Graz University of Technology

---

### Outline
1. Deep Dive into CPU µcode
2. µcode Software Framework
3. Reverse Engineering of the Secret µcode Update Algorithm
4. Some Bonus Content ;)
5. Disclaimer
6. How CPUs Work
7. Positive Technologies Results
8. Microcoded Instructions 101
9. Building a Ghidra µcode Decompiler
10. Control Registers Bus
11. Accessing the µcode Sequencer
12. udbgrd and udbgwr
13. Example: Writing to the CRBUS
14. Program LDAT from the CRBUS
15. Match & Patch 101
16. The First µcode Framework
17. µcode Framework
18. µcode Patches
19. µcode Patch Hello World!
20. Make RDRAND Less Boring
21. DEMO: µcode Hooks
22. Make Your Own Performance Counter
23. µcode Traces

---

### Disclaimer
- This presentation is based on our understanding of CPU microarchitecture.
- Theoretical aspects may be incorrect.
- Practical observations, however, seem to be accurate.

---

### How Do CPUs Work?
- [Insert brief explanation or diagram here]

---

### Positive Technologies Results
- **Red Unlock of Atom Goldmont (GLM) CPUs**
- **Extraction and Reverse Engineering of GLM µcode Format**
- **Discovery of Undocumented Control Instructions to Access Internal Buffers**

---

### Microcoded Instructions 101
- Example Instruction Flow:
  - `cpuid`
  - `...`
  - `XLAT`

- **µcode ROM and RAM Structure:**
  - **µcode ROM:** Stores sequences of instructions.
  - **µcode RAM:** Allows for dynamic patching and execution.
  - **Match & Patch Mechanism:** Redirects execution from µcode ROM to µcode RAM.

---

### Building a Ghidra µcode Decompiler
- [Insert details or steps here]

---

### Control Registers Bus (CRBUS)
- **CPU Interaction with Internal Components:**
  - **Control and Status Registers**
  - **SMM Configuration**
  - **Local Direct Access Test (LDAT) Access**

---

### Accessing the µcode Sequencer
- **µcode Sequencer:**
  - Manages access to µcode ROM and RAM.
  - **LDAT Access:** Can access the µcode sequencer.
  - **CRBUS Control:** If we can access the CRBUS, we can control µcode.

---

### udbgrd and udbgwr
- **Secret Instructions:**
  - **RW Access to:**
    - System agent
    - URAM
    - Staging buffer
    - I/O ports
    - Power supply unit
    - CRBUS

- **Example: Writing to the CRBUS**
  ```python
  def CRBUS_WRITE(ADDR, VAL):
      udbgwr(
          rax: ADDR,
          rbx|rdx: VAL,
          rcx: 0,
      )
  ```

---

### Program LDAT from the CRBUS
- **Decompile of U2782 (Part of µcode Update Routine):**
  ```c
  write8(crbus_06a0, (ucode_address - 0x7c00));
  MSLOOPCTR = (*(ushort *)(long)ucode_update_ptr + 3) - 1;
  syncmark();
  if ((in_ucode_ustate & 8) != 0) {
      syncfull();
      write8(crbus_06a1, 0x30400);
      ucode_ptr = (ulong *)((long)ucode_update_ptr + 5);
      do {
          ucode_qword = *ucode_ptr;
          ucode_ptr = ucode_ptr + 1;
          write8(crbus_06a4, ucode_qword);
          write8(crbus_06a5, ucode_qword >> 0x20);
          syncwait();
          MSLOOPCTR -= 1;
      } while (MSLOOPCTR > 0);
  }
  ```

- **CRBUS Configuration:**
  - **CRBUS[0x6a1] = 0 with SELECTOR:**
    - **2:** SEQW
    - **3:** MATCH & PATCH
    - **4:** UCODE PATCH RAM

---

### Match & Patch 101
- **Execution Redirection:**
  - Redirects execution from µcode ROM to µcode RAM.
  - **Patch Offset Calculation:**
    - `patch_off = (patch_addr - 0x7c00) / 2;`
  - **Entry Format:**
    ```
    +--+-----------+------------------------+----+
    |3e| patch_off | match_addr            |enbl|
    +--+-----------+------------------------+----+
    24 16 1 0
    ```

---

### The First µcode Framework
- **Leveraging udbgrd/wr:**
  - **Software-based µcode Patching:**
    - Completely observe CPU behavior.
    - Completely control CPU behavior.
    - All within a BIOS or kernel module.

---

### µcode Framework
- **Capabilities:**
  - Patch µcode
  - Hook µcode
  - Trace µcode

---

### µcode Patches
- **Changing CPU Behavior:**
  - Change microcoded instructions.
  - Add functionalities to the CPU.

- **Example: µcode Patch Hello World!**
  ```assembly
  .patch 0x0428 # RDRAND ENTRY POINT
  .org 0x7c00
  rax:= ZEROEXT_DSZ64(0x6f57206f6c6c6548) # 'Hello Wo'
  rbx:= ZEROEXT_DSZ64(0x21646c72) # 'rld!\x00'
  UEND
  ```
  - **Steps:**
    1. Assemble µcode.
    2. Write µcode at 0x7c00.
    3. Setup Match & Patch: 0x0428 → 0x7c00.
    4. `rdrand` → "Hello World!"

- **Make RDRAND Less Boring:**
  ```assembly
  .patch 0x0428 # RDRAND ENTRY POINT
  .org 0x7c00
  tmp1:= MOVEFROMCREG_DSZ64(CR_SMRR_MASK)
  tmp2:= ZEROEXT_DSZ64(0x0)
  MOVETOCREG_DSZ64(tmp2, CR_SMRR_MASK) # DISABLE SMM MEMORY RANGE
  rax:= LDPPHYS_DSZ64(0x7b000000) # SMROM ADDR
  MOVETOCREG_DSZ64(tmp1, CR_SMRR_MASK)
  UEND
  ```

---

### DEMO: µcode Hooks
- **Observing Events:**
  - **Setup Match & Patch:**
    - Execute custom µcode at certain events.
    - Resume execution.

- **Make Your Own Performance Counter:**
  ```assembly
  .patch 0xXXXX # INSTRUCTION ENTRY POINT
  .org 0x7da0
  tmp0:= ZEROEXT_DSZ64()
  tmp1:= LDPPHYSTICKLE_DSZ64_ASZ64_SC1(tmp0)
  tmp1:= ADD_DSZ64(tmp1, 0x1) # INCREMENT COUNTER
  STADPPHYSTICKLE_DSZ64_ASZ64_SC1(tmp0, tmp1)
  UJMP(0xXXXX + 1) # JUMP TO NEXT UOP
  ```

---

### µcode Traces
- **Tracing Execution:**
  - **µcode Hook:**
    1. Dump timestamp.
    2. Disable hook.
    3. Continue execution.

---

This optimized version of your text aims to make it more structured, clear, and professional. It includes headings, subheadings, and a consistent format to enhance readability and comprehension.