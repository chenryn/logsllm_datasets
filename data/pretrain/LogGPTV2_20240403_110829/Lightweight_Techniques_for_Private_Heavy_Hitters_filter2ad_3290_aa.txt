title:Lightweight Techniques for Private Heavy Hitters
author:Dan Boneh and
Elette Boyle and
Henry Corrigan-Gibbs and
Niv Gilboa and
Yuval Ishai
8
4
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Lightweight Techniques for Private Heavy Hitters
Dan Boneh
Stanford
Elette Boyle
IDC Herzliya
Henry Corrigan-Gibbs
EPFL and MIT CSAIL
Niv Gilboa
Ben-Gurion University
Yuval Ishai
Technion
Abstract. This paper presents a new protocol for solving the
private heavy-hitters problem. In this problem, there are many
clients and a small set of data-collection servers. Each client
holds a private bitstring. The servers want to recover the set
of all popular strings, without learning anything else about any
client’s string. A web-browser vendor, for instance, can use our
protocol to ﬁgure out which homepages are popular, without
learning any user’s homepage. We also consider the simpler
private subset-histogram problem, in which the servers want to
count how many clients hold strings in a particular set without
revealing this set to the clients.
Our protocols use two data-collection servers and, in a protocol
run, each client send sends only a single message to the servers.
Our protocols protect client privacy against arbitrary misbehavior
by one of the servers and our approach requires no public-
key cryptography (except for secure channels), nor general-
purpose multiparty computation. Instead, we rely on incremental
distributed point functions, a new cryptographic tool that allows
a client to succinctly secret-share the labels on the nodes of an
exponentially large binary tree, provided that the tree has a single
non-zero path. Along the way, we develop new general tools for
providing malicious security in applications of distributed point
functions.
A limitation of our heavy-hitters protocol is that it reveals to the
servers slightly more information than the set of popular strings
itself. We precisely deﬁne and quantify this leakage and explain
how to ameliorate its eﬀects. In an experimental evaluation with
two servers on opposite sides of the U.S., the servers can ﬁnd the
200 most popular strings among a set of 400,000 client-held 256-
bit strings in 54 minutes. Our protocols are highly parallelizable.
We estimate that with 20 physical machines per logical server,
our protocols could compute heavy hitters over ten million clients
in just over one hour of computation.
1 Introduction
To improve their products, manufacturers of hardware devices
and software applications collect information about how their
products perform in practice. For example, when your web
browser crashes today, it prompts you to send an error report to
the vendor with the URL that triggered the crash. For the browser-
vendor, it is important to know which URLs are responsible for
the majority of crashes. But since these crash reports contain
the URLs that you (the user) have been visiting, sending these
reports leaks information about your browsing history to the
vendor. It takes just one subsequent data breach or one malicious
insider to expose these reports—and the information they contain
about your browsing history—to the world.
This data-collection task is an instance of the private heavy-
hitters problem. In this problem, there are many clients and a
small set of data-collection servers. Each client holds a string
(e.g., a URL that caused a browser crash). For some threshold
t ∈ N, the servers want to recover every string that more than t
clients hold. In this and other applications, each client’s string
comes from a large universe (the set of all URLs), so any solution
that requires enumerating over the set of all possible strings is
infeasible.
This problem comes up in an array of private data-collection
applications: a cellphone vendor wants to learn which mobile
apps consume the most minutes of user attention per day, without
learning how much each person uses each app, an electric-car
company wants to learn on which roads its cars most often run
low on battery, without learning which car was where, and so on.
In this paper, we solve this private heavy-hitters problem using
a new suite of lightweight cryptographic techniques. These
tools are relatively simple to implement, are concretely eﬃcient,
unlike methods based on general-purpose multiparty compu-
tation [32, 47], and outperform existing approaches based on
secure aggregation [18,40]. We expect the cryptographic tools
developed in this work to be useful in other contexts.
We work in the setting in which clients communicate with
two non-colluding data-collection servers. The system protects
client privacy as long as one of the two servers is honest (the
other may deviate arbitrarily from the protocol and may collude
with an unbounded number of malicious clients). For example,
the maintainer of an app store could run one server and the app
developer could run the other. The system protects correctness
against any number of malicious clients. That is, the worst a
malicious client can do to disrupt the protocol’s execution is to
lie about its own input string.
Our protocols require no public-key cryptographic operations,
apart from those needed to establish secret channels between the
parties. In terms of communication, if each client holds an n-bit
string and we want to achieve λ-bit security, each client sends a
single message, of roughly λn bits, to the servers (ignoring low-
order terms). Since our schemes require each client to send only
a single message to the servers, our schemes naturally tolerate
unreliable clients: each client needs to stay online only long
enough to send its single message to the servers. In a deployment
with C clients, the servers communicate λnC bits with each other
(again, ignoring low-order terms). In terms of computation, the
client invokes a length-doubling pseudorandom generator, such
as AES in counter mode, O(n) times. When searching for strings
that more than a τ ∈ (0, 1] fraction of clients hold, the servers
© 2021, Dan Boneh. Under license to IEEE.
DOI 10.1109/SP40001.2021.00048
762
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
perform ≈ nC/τ evaluations of a length-doubling pseudorandom
generator.
To evaluate our heavy-hitter protocols in practice, we imple-
ment the end-to-end system and evaluate it on Amazon EC2
machines on opposite sides of the U.S. In this cross-country con-
ﬁguration, we consider a set of 400,000 clients, each holding a
256-bit string (long enough to hold a 40-character domain name).
We conﬁgure the two servers to compute the set of heavy hitters
held by more than 0.1% of these clients. The protocol between
the two servers takes 54 minutes in total and requires under 70
KB of communication per user. With this parameter setting,
our approach concretely requires over 100× less communication
(between the servers) and server-side computation compared to
approaches based on existing cryptographic tools.
Our techniques. Our ﬁrst step to solving the private heavy-hitters
problem is to study an independently useful simpler problem of
computing private subset histograms. In this problem, each client
holds an n-bit string, as before. Now, the servers have a small set
S of strings (unknown to the clients) and, for each string σ ∈ S,
the servers want to know how many clients hold string σ, without
learning anything else about any client’s string. Our starting
point is a simple protocol for this problem from prior work [11],
in which each client sends each server a single message. This
protocol relies on the cryptographic tool of distributed point
functions [10,11,31]. (A distributed point function is essentially
a compressed secret-sharing of a function that has a single non-
zero output.) The prior protocol [11] oﬀers a partial defense
against malicious clients at the expense of compromising the
privacy of clients against a malicious server.
Our ﬁrst technical contribution is to modify this protocol
to simultaneously protect correctness against malicious clients
and achieve privacy against a malicious server. To do so, we
develop a new lightweight malicious-secure protocol that the two
servers can run to check that they hold additive secret shares of a
vector that is zero everywhere except with a one in a single posi-
tion. Prior approaches either required additional non-colluding
servers [19], did not provide malicious security [11], had rel-
atively large client-to-server communication (as in Prio [18]),
or required additional rounds of interaction between the clients
and servers [28]. Applying our new building-block immediately
improves the eﬃciency of existing privacy-preserving systems
for advertising [45] and messaging [19,28,46].
Perhaps even more important, prior protocols [11] do not
defend against a subtle “double-voting” attack. In this attack, a
malicious client can cast tentative votes for a set S(cid:48) of two or more
strings. The servers only catch the cheating client if |S(cid:48) ∩ S| ≥ 2,
where S is the set of strings that the server whose counts the
To prevent this kind of attack, we leverage a reﬁned type of
distributed point functions that we term extractable distributed
point functions (“extractable DPFs”). Roughly speaking, with
an extractable DPF it is possible to extract from the actions of a
malicious client an honest strategy that would achieve a similar
eﬀect. We show that a variant of the distributed-point-function
construction of prior work [11] is extractable in this sense when
we model the underlying PRG as a random oracle.
Next, we use our protocol for private subset histograms to
construct a protocol for the t-heavy hitters problem. Our approach
follows that of prior work which uses subset-histograms protocols,
in the settings streaming and local-diﬀerential privacy, to identify
heavy hitters [3,16,17,48].
In the t-heavy hitters problem, each client i holds a string
αi ∈ {0, 1}n and the servers want to learn the set of all strings
that more than t clients hold, for some parameter t ∈ N. Our idea
is to have the client and servers run our private subset-histogram
protocol n times. After the (cid:96)th execution of the subset-histogram
protocol, the servers learn a set S(cid:96) ⊆ {0, 1}(cid:96) that contains the
(cid:96)-bit preﬁx of every t-heavy hitter. After n executions, the servers
learn the set Sn of all t-heavy hitter strings.
In more detail, the clients, for their part, participate in n
executions of the subset-histogram protocol. In the (cid:96)th execution,
for (cid:96) = 1, . . . , n, a client holding a string α ∈ {0, 1}n participates
in the protocol using the preﬁx α|(cid:96) ∈ {0, 1}(cid:96) as its input to the
protocol, where α|(cid:96) is the (cid:96)-bit preﬁx of α. These executions all
run in parallel, so each client in fact only sends a single message
to the servers.
The servers participate in the ﬁrst execution of the subset-
histogram protocol using the set of two preﬁxes S1 = {0, 1}, and