# Lightweight Techniques for Private Heavy Hitters

**Authors:**
- Dan Boneh, Stanford
- Elette Boyle, IDC Herzliya
- Henry Corrigan-Gibbs, EPFL and MIT CSAIL
- Niv Gilboa, Ben-Gurion University
- Yuval Ishai, Technion

**Publication:**
2021 IEEE Symposium on Security and Privacy (SP)

## Abstract
This paper introduces a new protocol for addressing the private heavy-hitters problem. In this scenario, multiple clients and a small set of data-collection servers are involved. Each client holds a private bitstring, and the servers aim to identify all popular strings without learning any additional information about individual client strings. For example, a web-browser vendor can use this protocol to determine popular homepages without discovering any specific user's homepage. We also address the simpler private subset-histogram problem, where servers count how many clients hold strings in a particular set without revealing this set to the clients.

Our protocols involve two data-collection servers, and each client sends only a single message to the servers during a protocol run. These protocols ensure client privacy even if one server behaves maliciously, and they do not require public-key cryptography or general-purpose multiparty computation. Instead, we introduce incremental distributed point functions, a novel cryptographic tool that allows a client to succinctly secret-share the labels on the nodes of an exponentially large binary tree, provided the tree has a single non-zero path. Additionally, we develop new tools for providing malicious security in applications of distributed point functions.

A limitation of our heavy-hitters protocol is that it reveals slightly more information to the servers than just the set of popular strings. We define and quantify this leakage and provide methods to mitigate its effects. In an experimental evaluation with two servers located on opposite sides of the U.S., the servers can identify the 200 most popular strings among 400,000 client-held 256-bit strings in 54 minutes. Our protocols are highly parallelizable, and with 20 physical machines per logical server, they could compute heavy hitters over ten million clients in just over one hour.

## 1. Introduction
To enhance their products, manufacturers of hardware devices and software applications collect data on how their products perform in practice. For instance, when a web browser crashes, it prompts the user to send an error report to the vendor, including the URL that caused the crash. While this is valuable for the vendor, it also exposes the user's browsing history. A single data breach or a malicious insider can leak this sensitive information.

This data collection task is an instance of the private heavy-hitters problem. Here, there are many clients and a small set of data-collection servers. Each client holds a string (e.g., a URL causing a browser crash). The servers aim to recover every string held by more than a threshold \( t \) number of clients. Given the large universe of possible strings (e.g., all URLs), any solution requiring enumeration of all possible strings is infeasible.

This problem arises in various private data-collection applications, such as:
- A cellphone vendor wanting to know which mobile apps consume the most user attention daily, without learning individual usage.
- An electric-car company wanting to know on which roads its cars most often run low on battery, without knowing the location of each car.

In this paper, we solve the private heavy-hitters problem using a new suite of lightweight cryptographic techniques. These tools are simple to implement, concretely efficient, and outperform existing approaches based on secure aggregation. We expect these cryptographic tools to be useful in other contexts.

We work in a setting where clients communicate with two non-colluding data-collection servers. The system protects client privacy as long as one of the two servers is honest. The system also ensures correctness against any number of malicious clients, who can only disrupt the protocol by lying about their input strings.

Our protocols require no public-key cryptographic operations, except for establishing secure channels. In terms of communication, each client holding an \( n \)-bit string and aiming for \( \lambda \)-bit security sends a single message of roughly \( \lambda n \) bits to the servers. This makes our schemes naturally tolerant of unreliable clients, who need to stay online only long enough to send their single message. With \( C \) clients, the servers communicate \( \lambda nC \) bits with each other. Computationally, the client invokes a length-doubling pseudorandom generator \( O(n) \) times. When searching for strings held by more than a \( \tau \in (0, 1] \) fraction of clients, the servers perform approximately \( nC/\tau \) evaluations of a length-doubling pseudorandom generator.

To evaluate our heavy-hitter protocols, we implemented the end-to-end system and tested it on Amazon EC2 machines on opposite sides of the U.S. In this cross-country configuration, with 400,000 clients each holding a 256-bit string, the two servers computed the set of heavy hitters held by more than 0.1% of the clients in 54 minutes, requiring under 70 KB of communication per user. Compared to existing cryptographic tools, our approach requires over 100Ã— less communication and server-side computation.

### Our Techniques
Our first step in solving the private heavy-hitters problem is to study the simpler problem of computing private subset histograms. In this problem, each client holds an \( n \)-bit string, and the servers have a small set \( S \) of strings unknown to the clients. The servers want to know how many clients hold each string in \( S \) without learning anything else about any client's string. We start with a simple protocol from prior work [11], which relies on distributed point functions [10,11,31].

Our first technical contribution is to modify this protocol to protect correctness against malicious clients and achieve privacy against a malicious server. We develop a new lightweight malicious-secure protocol that the two servers can run to check that they hold additive secret shares of a vector that is zero everywhere except for a single position. Prior approaches either required additional non-colluding servers, did not provide malicious security, had large client-to-server communication, or required additional rounds of interaction.

Additionally, prior protocols [11] do not defend against a subtle "double-voting" attack, where a malicious client can cast tentative votes for multiple strings. To prevent this, we leverage extractable distributed point functions ("extractable DPFs"), which allow extracting an honest strategy from the actions of a malicious client. We show that a variant of the distributed-point-function construction of prior work [11] is extractable when modeled as a random oracle.

Next, we use our protocol for private subset histograms to construct a protocol for the \( t \)-heavy hitters problem. Our approach follows prior work that uses subset-histograms protocols in streaming and local-differential privacy settings to identify heavy hitters [3,16,17,48].

In the \( t \)-heavy hitters problem, each client \( i \) holds a string \( \alpha_i \in \{0, 1\}^n \), and the servers want to learn the set of all strings held by more than \( t \) clients. Our idea is to have the clients and servers run our private subset-histogram protocol \( n \) times. After the \( \ell \)-th execution of the subset-histogram protocol, the servers learn a set \( S_\ell \subseteq \{0, 1\}^\ell \) that contains the \( \ell \)-bit prefix of every \( t \)-heavy hitter. After \( n \) executions, the servers learn the set \( S_n \) of all \( t \)-heavy hitter strings.

In detail, the clients participate in \( n \) executions of the subset-histogram protocol. In the \( \ell \)-th execution, for \( \ell = 1, \ldots, n \), a client holding a string \( \alpha \in \{0, 1\}^n \) participates using the prefix \( \alpha|_\ell \in \{0, 1\}^\ell \) as its input to the protocol. These executions run in parallel, so each client sends a single message to the servers.

The servers participate in the first execution of the subset-histogram protocol using the set of two prefixes \( S_1 = \{0, 1\} \), and so on.