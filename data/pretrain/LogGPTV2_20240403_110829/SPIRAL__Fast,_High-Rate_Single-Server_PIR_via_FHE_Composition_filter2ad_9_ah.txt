14 KB
20 KB
1.37 s
0.0125
196 MB/s
18 MB
14 KB
86 KB
17.69 s
0.3488
444 MB/s
47 MB
14 KB
188 KB
4.58 s
0.5307
358 MB/s
16 MB
15 MB
71 KB
0.42 s
0.0036
635 MB/s
16 MB
30 MB
96 KB
5.33 s
0.3117
1.48 GB/s
24 MB
30 MB
150 KB
1.21 s
0.6677
1.35 GB/s
TABLE II: Comparison for all four Spiral variants with the best alternative system: FastPIR [22] for the database with small
records (220 × 256B) and OnionPIR otherwise [23].
N Metric
212
216
220
Param. Size
Query Size
Rate
Throughput*
Param. Size
Query Size
Rate
Throughput*
Param. Size
Query Size
Rate
Throughput*
FastPIR
1 MB
131 KB
0.1392
23 MB/s
1 MB
2 MB
0.1392
142 MB/s
1 MB
34 MB
0.1392
201 MB/s
OnionPIR
5 MB
63 KB
0.2419
159 MB/s
5 MB
63 KB
0.2419
157 MB/s
5 MB
63 KB
0.2419
158 MB/s
SPIRAL
31 MB
14 KB
0.4348
544 MB/s
30 MB
14 KB
0.4000
433 MB/s
30 MB
14 KB
0.3902
355 MB/s
SPIRALPACK
SPIRALSTREAM
SPIRALSTREAMPACK
156 MB
14 KB
0.7143
640 MB/s
31 MB
14 KB
0.7013
614 MB/s
91 MB
14 KB
0.6857
521 MB/s
3 MB
15 MB
0.4918
1.20 GB/s
5 MB
30 MB
0.4918
1.52 GB/s
5 MB
30 MB
0.4918
1.46 GB/s
125 MB
15 MB
0.8057
1.57 GB/s
125 MB
30 MB
0.8057
1.93 GB/s
125 MB
30 MB
0.8057
1.94 GB/s
∗ This throughput measurement does not include query expansion costs, since these are amortized away in the streaming scenario.
TABLE III: Performance of FastPIR [22], OnionPIR [23], and the different SPIRAL variants in the streaming setting as a
function of the number of records N in the database. In the streaming setting, we ignore all query expansion costs (if present)
and use the optimal record size for each system.
For server computation, the cost of query expansion is mostly
ﬁxed, while the cost of processing the initial dimension and the
subsequent folding steps (Steps 2 and 3 of the Answer algorithm
in Construction IV.1, respectively) both scale linearly with the
size of the database. The parameters chosen by our parameter
generation algorithm favor those that balance the cost of the
initial dimension processing and the cost of the subsequent
folding operations.
CRT/SIMD optimizations. As noted in Section V-B, we
choose the 56-bit modulus q to be a product of two 28-
bit primes and use the Chinese remainder theorem (CRT)
in conjunction with the AVX instruction set to accelerate the
integer arithmetic. Choosing a modulus q that splits into 32-bit
primes is important for concrete efﬁciency. We observe that
using the AVX instruction sets, we can compute four 32-bit-
by-32-bit integer multiplications in the same time it takes to
compute a single 64-bit-by-64-bit integer multiplication. Thus,
using CRT with AVX gives us a factor of 2× speed-up for
arithmetic operations. Note that this is helpful primarily when
processing the ﬁrst dimension and less so for the subsequent
GSW folding operations. Indeed, if we compare against a
modiﬁed implementation where we use 64-bit-by-64-bit integer
multiplications, we observe a 2.1× slowdown in the time it
takes to process the ﬁrst dimension. As a function of the overall
computation time, using CRT provides a 1.3–1.4× speed-up
(since the ﬁrst dimension processing accounts for slightly less
than half of the total server computation).
We also note that our implementation uses AVX-512,
whereas previous systems only used AVX2. However, AVX-
512 is not the main source of speedup in our implementation.
If we disable AVX-512, we only observe moderate slowdowns
of 6–14%. AVX2 is more critical to our system’s performance;
for large databases, disabling AVX2 results in a 2× slowdown.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
17946
)
s
m
(
e
t
u
p
m
o
C
t
n
e
i
l
C
102
101
100
)
s
(
e
t
u
p
m
o
C
r
e
v
r
e
S
102
101
100
10−1
210
212
214
216
218
220
Number of Records
Setup
Query
Extract
210
212
214
216
218
220
Number of Records
First Dimension
Expansion
Folding
Fig. 4: Microbenchmarks for client and server computation in SPIRAL for processing databases with 100 KB records. The
client computation consists of the Setup, Query, and Extract algorithms while the server computation consists of the Answer
algorithm from Construction IV.1. We separately measure the costs of the query expansion (Step 1), ﬁrst dimension processing
(Step 2), and ciphertext folding (Step 3) in the Answer algorithm.
compute. This is 17× more expensive than the non-private
solution, and 9× more expensive than SPIRALSTREAMPACK.
• Private voice calls. Next, we consider the Addra application
for private voice communication [22]. In Addra, a 5-
minute voice call can be implemented with 625 rounds,
and in each round, the user downloads 96 bytes. If we
use SPIRALSTREAM to support a system with up to 220
users, a private 5-minute voice call would require a 29 MB
upload, 11 MB of download, and 112 seconds of CPU
time. The per-user server cost is $0.0016, which is a 3.9×
improvement compared to FastPIR (used for the Addra
system). On an absolute scale, running a system like Addra
using SPIRALSTREAM remains costly at over $300/minute
to support a million users.
• Private Wikipedia. We can also consider a non-streaming
setting where we use PIR to privately access a Wikipedia
article. We consider the end-to-end latency needed to retrieve
an entry from a 31 GB database (which would contain all
of the text in English Wikipedia and a subset of article
images) with a maximum article size of 30 KB. We split the
database into 16 independent partitions and process the query
in parallel on a 16-core machine with 42 GB of memory.
Running this setup would require $229 USD monthly on
AWS. We model network conditions based on a median
mobile upload speed of 8 Mbps and download speed of
29 Mbps [72]. Under these conditions, SPIRALPACK could
deliver an article in just 4.3 seconds. This is a 2.1× reduction
in the end-to-end time compared to OnionPIR. Unlike the
movie streaming setting above, the non-streaming setting
remains one where the private solution remains much slower
than non-private retrieval.
)
s
/
B
M
(
t
u
p
h
g
u
o
r
h
T
2,000
1,500
1,000
500
0
210
212
214
216
218
220
Number of Records
SPIRAL
SPIRALSTREAM
SPIRALSTREAM1/2
FastPIR
SPIRALPACK
SPIRALSTREAMPACK
SealPIR
OnionPIR
Fig. 5: Server throughput
in the streaming setting as a
function of the number of database records. In the streaming
setting, we ignore the query expansion costs (if present)
and use the optimal record size for each system. The query
sizes for SealPIR, FastPIR, SPIRAL/SPIRALPACK, SPIRAL-
STREAM/SPIRALSTREAMPACK and SPIRALSTREAM1/2, are
65 KB, 33 MB, 14 KB, 33 MB, and 16 MB, respectively.
In particular, we choose parameters for SPIRALSTREAM and
SPIRALSTREAMPACK so as to match the query size from
the FastPIR system (a PIR protocol tailored for the streaming
setting).
Application scenarios. We now estimate the concrete cost of
using SPIRAL to support various privacy-preserving applica-
tions based on PIR:
• Private video streaming. Suppose a user is interested in
privately streaming a 2 GB movie from a library of 214
movies. Using SPIRALSTREAMPACK, this would require a
30 MB upload, a 2.5 GB download, and 5.6 CPU-hours of
computation. The overall server cost using SPIRALSTREAM-
PACK is $0.33. This is just 1.9× higher than the no-privacy
baseline where the client just downloads the movie directly
($0.18). Using OnionPIR for the same task would require a
63 KB upload, an 8.3 GB download, and 59.3 CPU-hours of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
18947