title:Forgery-resilience for digital signature schemes
author:Atefeh Mashatan and
Khaled Ouafi
Forgery-Resilience for Digital Signature Schemes
Atefeh Mashatan
LASEC - EPFL
Khaled Ouaﬁ
LASEC - EPFL
Ecole Polytechnique Fédérale de Lausanne
Ecole Polytechnique Fédérale de Lausanne
CH-1015 Lausanne, Switzerland
Atefeh.Mashatan@epﬂ.ch
CH-1015 Lausanne, Switzerland
Khaled.Ouaﬁ@epﬂ.ch
ABSTRACT
We introduce the notion of forgery-resilience for digital signature
schemes, a new paradigm for digital signature schemes exhibiting
desirable legislative properties. It evolves around the idea that, for
any message, there can only be a unique valid signature, and ex-
ponentially many acceptable signatures, all but one of them being
spurious.
This primitive enables a judge to verify whether an alleged forged
signature is indeed a forgery. In particular, the scheme considers an
adversary who has access to a signing oracle and an oracle that
solves a “hard” problem, and who tries to produce a signature that
appears to be acceptable from a veriﬁer’s point of view. However,
a judge can tell apart such a spurious signature from a signature
that is produced by an honest signer. This property is referred
to as validatibility. Moreover, the scheme provides undeniability
against malicious signers who try to fabricate spurious signatures
and deny them later by showing that they are not valid. Last but not
least, trustability refers to the inability of a malicious judge trying
to forge a valid signature.
This notion for signature schemes improves upon the notion of
fail-stop signatures in different ways. For example, it is possible
to sign more than one messages with forgery-resilient signatures
and once a forgery is found, the credibility of a previously signed
signature is not under question.
A concrete instance of a forgery-resilient signature scheme is
constructed based on the hardness of extracting roots of higher
residues, which we show to be equivalent to the factoring assump-
tion. In particular, using collision-free accumulators, we present
a tight reduction from malicious signers to adversaries against the
factoring problem. Meanwhile, a secure pseudorandom function
ensures that no polynomially-bounded cheating veriﬁer, who can
still solve hard problems, is able to forge valid signatures. Security
against malicious judges is based on the RSA assumption.
Keywords
forgery-resilient signatures, digital signatures, fail-stop signatures,
higher residuosity, post-quantum cryptography.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
1.
INTRODUCTION
Digital signature schemes are designed to be the digital equiv-
alent of handwritten signatures, i.e., to authenticate a message or
data by binding it with an attachment, called the signature. A sig-
nature is thus a proof that the message has been produced by the
signer. This concept appeared as early as the invention of public-
key cryptography, by Difﬁe and Hellman [10]. Later, Goldwasser,
Micali, and Rivest [13] formally deﬁned a cryptographic digital sig-
nature scheme is.
Nowadays, digital signatures have become one of the most im-
portant primitives in cryptography and are being deployed in many
security protocols. Their signiﬁcant became even more evident as
the volume of online transactions and electronic documents seem
to be getting larger than ever. While they were developing, law-
makers have expressed underlying concerns about the legal conse-
quences of these signatures. One of the fundamental legal issues
raised is that in case of a successful forgery, how can an innocent
signer prove that he or she was not involved in producing the forged
signature.
For many cryptographers, this was not a concern because the
security of a signature scheme is based on some intractability as-
sumption stating that solving a particular computational problem
is hard, for instance. Consequently, it is infeasible to carry out a
“successful forgery” by means of cryptanalytic techniques under
that particular intractability assumption. This is the case for classi-
cal digital signatures where the security is guaranteed by the hard-
ness of factoring [3, 7], discrete logarithm [12, 20], or lattice-based
problems. Note that although non-repudiation is offered by classi-
cal digital signature schemes, it only deals with the case where a
possibly malicious signer has actually signed a signature, but later
on refutes it and claims that he or she never produced that signa-
ture. Indeed, it does not stop a successful forgery carried out by an
adversary.
From a legislative point of view, forgeries do exist, although they
are very hard to produce! Hence, dealing with the consequences of
possible, but barely occurring, forgeries remains a big concern for
legislative authorities and has fostered the felt need for accommo-
dating more powerful adversaries, who can solve a hard problem,
such as factoring. Moreover, our widely deployed intractability
assumptions are mostly considered based on our current compu-
tational capabilities. Whereas lawmakers would ideally want to
build their legislative infrastructure more robustly that would last
for a much longer period of time and not based on the computa-
tional power of computers, something that appears to be changing
every decade.
In the case of a successful forgery caused by solving an instance
of a hard problem, one could naively say that all previous signa-
tures are still valid but we should stop from signing from now on.
Unfortunately, this approach will not work unless there is a time-
stamp attached to the signatures. Otherwise, a signer with an RSA
public key published will have no means of disavowing the future
forged signatures and will be held responsible for the contents of
the messages as the signatures do not contain any information about
the date of creation. Another too easy way out of the problem is to
discredit all the signatures produced, in the past or future, under
the intractability assumption of the solved “hard” problem! In this
senario, dishonest signers will be given the opportunity to deny the
authenticity of messages they have signed, freeing themselves from
the potential responsibility their content induces.
Waidner and Pﬁtzman took a better approach and proposed the
notion of fail-stop signatures [21, 22, 32]. A fail-stop signature
protects the signers from the possibility that an adversary may be
able to forge their signature by means of cryptanalytic techniques.
The motivation behind the naming is that a signer is able to de-
tect a forgery and prove it has happened and, as a result, is able to
‘stop’ the scheme from ‘failing’, that is, being vulnerable to forg-
eries. However, fail-stop signatures inherit some limitations that
one would ideally want to alleviate. For instance, with a pair of
private and public key, a signer can only sign one message and not
more. Furthermore, once a forgery is found, the credibility of pre-
vious signatures goes under question.
We propose the notion of forgery-resilient signature schemes
which enable a judge to verify whether an alleged forged signa-
ture is indeed a forgery or a valid signature. We then instantiate the
ﬁrst forgery-resilient signature scheme.
1.1 Fail-stop signatures and their limitations
To the best our knowledge, fail-stop signatures, introduced by
Waidner and Pﬁtzman [32] and followed by other researchers [2, 9,
26, 27, 29, 30, 31], account for the only attempt to address the legal
issue of digital signature schemes when considering the possibility
of forgeries resulting from cryptanalysis. They can be considered
as variants of the one-time signature scheme [15] where, given a
key, only one message can be signed, although some compression
techniques allow us to sign more messages with one pair of keys [2,
21]. In case of a forgery, the adversary has found a solution to a
supposedly hard problem. Given this forgery, the legitimate signer
can combine his or her signature with the forged signature and pro-
duce a solution to the same instance of the hard problem. Hence,
the scheme allows a legitimate, polynomially bounded, signer to
prove that a forgery has taken place. We note that security in fail-
stop signature schemes is information-theoretic, i.e., forgers are as-
sumed to be computationally unbounded.
Fail-stop signatures are instantiated using the notion of bundling
homomorphism: a one-way function with the particularity that for
any value from its range, there are exponentially many and equally
likely elements from its domain that map to this value. To guar-
antee that the adversary does not output the signer’s signature, the
set of possible signatures computable by the signer should be small
compared to the set of all possible signatures computed by the ad-
versary. On the other hand, a dishonest signer should not be able
to produce signatures which can later be proved to be forgeries.
Note that unconditional security against both the signer and the
veriﬁer cannot be achieved for the same reason that one cannot
design a commitment scheme that is both statistically hiding and
statistically binding without requiring further interaction between
parties. Therefore, the security of the veriﬁers in fail-stop signature
schemes against a dishonest signer can only be based on a compu-
tational assumption. Concretely, it assumes that ﬁnding collisions
on the underlying bundling homomorphism leads to the solution of
a hard computational problem.
As was eluded to earlier, fail-stop signatures suffer from a num-
ber of limitations. The ﬁrst limitation concerns the credibility of
valid signatures. Although each signer is able to detect and prove
forgeries, the credibility of all previous signatures comes under
question once a forgery has taken place. Moreover, you can no
longer sign a message once there is a forgery, even if you have
never used your key to sign a message. That is, the system “col-
lapses” once a forgery is realized. Furthermore, the signer has to
generate one pair of private key and public key for each message
she wants to sign. We refer the interested reader to a complete ref-
erence on fail-stop signatures [21, 22].
1.2 Our Contribution
We propose forgery-resilient signature schemes that live up to
their name and are resilient against forgeries, that is, not only forg-
eries are detected and stopped (as in fail-stop signature schemes),
but also one can continue using the signature scheme, so the credi-
bility of previous signatures is not questioned. Moreover, we do not
limit the number of signatures to one per key. Furthermore, once
a forgery has occurred, all valid signatures produced by an honest
signer are still recognized as such, even if they were produced after
the forgery.
Then, we provide a concrete instance of a forgery-resilient signa-
ture scheme whose security is based on the assumption that factor-
ing an RSA modulus is hard when considering strong primes. Our
instantiation evolves around the idea that, for a message, there can
only be a unique valid signature, whereas there are exponentially
many acceptable signatures, all but one of them being spurious sig-
natures.
Forgery-resilient signature schemes consider an adversary who
has access to two oracles, a signing oracle and an oracle that solves
a “hard” problem, and who tries to produce a signature that appears
to be acceptable from a veriﬁer’s point of view. However, a judge
can tell apart such a spurious signature from a signature that is pro-
duced by an honest signer. We refer to this ability of the judge as
validatibility of a signature scheme. Moreover, the scheme consid-
ers malicious signers who try to fabricate spurious signatures and
refute them later by showing that they are not valid and are results
of a forgery. In a forgery-resilient signature scheme, a polynomially
bounded signer cannot do so, even with the knowledge of spurious
signatures produced by a third-party, and we refer to this property
as undeniability against a malicious signer.
We shift the ability to prove forgeries from the signer to a judge,
as in the end the matter has to be settled by a judge. Note that
this change of responsibility is the core reason why we can keep
on signing even after a forgery. Moreover, previous honestly com-
puted signatures are not questioned even after a forgery is discov-
ered. Hence, considering a judge can be thought of as the price to
pay to overcome the limitations of fail-stop signatures. In order to
be able to carry out his task, the judge is given a validation key for
each signer. Although judges, as legal authorities, can be assumed
to be honest, we still consider the unlikely scenario that a judge
tries to make use of the veriﬁcation key to forge a valid signature.
Trustability refers to the notion where a malicious judge is unable
to misuse his or her power to forge valid signatures.
It should be noted that malicious judges are not given access to
the solver oracle, i.e., we assume no collusion between the judge
and the adversary for undeniability. That is because, as it will be
discussed later, the veriﬁcation and validation keys together (al-
most) uniquely determine the secret key. Therefore, preventing
judges from computing that key requires the secret key to be “hid-
den” by another computational assumption, which can always be
broken if the judge accesses the solver oracle.
The idea behind the proof is to allow, for every message, an ex-
ponential number of acceptable signatures, i.e., signatures that are
correct with respect to the public key. However, we require that
only one of those is valid with respect to both the public key and
the validation key of the judge. In order to determine whether a
forgery has taken place, the judge not only runs the usual valida-
tion using the public key of the signer, but also runs a subroutine
using the validation key associated to the signer’s private key. This
later subroutine either asserts the validity of the signature or shows
that it is indeed a spurious signature resulted from cryptanalysis.
In fail-stop signatures, the credibility of all signatures is ques-
tioned after a forgery because the signer’s private key is not bound
to any value that correctly maps to the public key. Forgery-resilient
signature schemes bind the signer to a single possible private key
that will map to the validation key and to the public key. As a result,
even after a forgery, the judge can distinguish between a signature
produced honestly by the signer from a spurious one.
Fail-stop signature schemes consider unbounded adversaries to
be able to deal with forgeries and, consequently, can only sign one
message. It is clear that this is not an acceptable restriction when
the scheme has to deployed in real systems. We take a different ap-
proach and consider adversaries who have access to an oracle that
solves instances of hard problems, such as factoring. Indeed, the
motivation behind this line of research was to answer the question
of what happens if the underlying security assumption, factoring
or discrete logarithm for instance, of a digital signature scheme
is broken. Hence, we consider adversaries who are polynomially
bounded but can solve instances of the factoring problem, for in-
stance. Albeit this setting is close to considering unbounded al-
gorithms in practice, it still allows us to use primitives that stand
secure against powerful adversaries when some limitations like on
the number of queries that are made [1].
1.3 Overview of our Construction
For our scheme, we assign two functions for the signer that asso-
ciate the private key to the public key and to the validation key, re-
spectively. Consider the Rabin function [24], f (x) = x2 mod n,
whose invertibility is known to be equivalent to the problem of fac-
toring the modulus n. As a consequence of the Chinese Remainder
Thm (CRT), this function maps four integers to a single one. We
use a generalization of the Rabin function, f (x) = xc mod n, for
a c that divides the order of the group Z
n. Then, using a result from
number theory due to Frobenius [11], we prove that this function
actually maps c integers to a single value. Note that although fac-
toring gives the ability to compute c-th roots, the number of them
is exponential when the size of c is polynomial. Therefore, even
with knowledge of the factorization, a polynomial-time algorithm
cannot compute them all.
Our construction uses two instances of this function. In particu-
lar, two different factors of the order are employed, one will be used
to compute the public key and the other will serve for the compu-