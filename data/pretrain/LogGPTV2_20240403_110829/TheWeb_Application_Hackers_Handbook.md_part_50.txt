Stuttard c10.indd V2 - 07/05/2011 Page 373
Chapter 10 n Attacking Back-End Components 373
HACK STEPS
1. If the application function you are attacking provides read access to a file,
attempt to access a known world-readable file on the operating system in
question. Submit one of the following values as the filename parameter
you control:
../../../../../../../../../../../../etc/passwd
../../../../../../../../../../../../windows/win.ini
If you are lucky, your browser displays the contents of the file you have
requested, as shown in Figure 10-5.
2. If the function you are attacking provides write access to a file, it may be
more difficult to verify conclusively whether the application is vulnera-
ble. One test that is often effective is to attempt to write two files — one
that should be writable by any user, and one that should not be writable
even by root or Administrator. For example, on Windows platforms you
can try this:
../../../../../../../../../../../../writetest.txt
../../../../../../../../../../../../windows/system32/config/sam
On UNIX-based platforms, files that root may not write are version-
dependent, but attempting to overwrite a directory with a file should
always fail, so you can try this:
../../../../../../../../../../../../tmp/writetest.txt
../../../../../../../../../../../../tmp
For each pair of tests, if the application’s behavior is different in
response to the first and second requests (for example, if the second
returns an error message but the first does not), the application probably
is vulnerable.
3. An alternative method for verifying a traversal flaw with write access is
to try to write a new file within the web root of the web server and then
attempt to retrieve this with a browser. However, this method may not
work if you do not know the location of the web root directory or if the
user context in which the file access occurs does not have permission to
write there.
cc1100..iinndddd 337733 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 374
374 Chapter 10 n Attacking Back-End Components
Figure 10-5: A successful path traversal attack
NOTE Virtually all fi lesystems tolerate redundant traversal sequences that
appear to try to move above the root of the fi lesystem. Hence, it is usually
advisable to submit a large number of traversal sequences when probing for
a fl aw, as in the examples given here. It is possible that the starting directory
to which your data is appended lies deep within the fi lesystem, so using an
excessive number of sequences helps avoid false negatives.
Also, the Windows platform tolerates both forward slashes and backslashes
as directory separators, whereas UNIX-based platforms tolerate only the for-
ward slash. Furthermore, some web applications fi lter one version but not
the other. Even if you are certain that the web server is running a UNIX-based
operating system, the application may still be calling out to a Windows-based
back-end component. Because of this, it is always advisable to try both ver-
sions when probing for traversal fl aws.
Circumventing Obstacles to Traversal Attacks
If your initial attempts to perform a traversal attack (as just described) are
unsuccessful, this does not mean that the application is not vulnerable. Many
application developers are aware of path traversal vulnerabilities and implement
various kinds of input validation checks in an attempt to prevent them. However,
those defenses are often fl awed and can be bypassed by a skilled attacker.
The fi rst type of input fi lter commonly encountered involves checking whether
the fi lename parameter contains any path traversal sequences. If it does, the
fi lter either rejects the request or attempts to sanitize the input to remove the
sequences. This type of fi lter is often vulnerable to various attacks that use alter-
native encodings and other tricks to defeat the fi lter. These attacks all exploit
the type of canonicalization problems faced by input validation mechanisms,
as described in Chapter 2.
cc1100..iinndddd 337744 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 375
Chapter 10 n Attacking Back-End Components 375
HACK STEPS
1. Always try path traversal sequences using both forward slashes and back-
slashes. Many input filters check for only one of these, when the filesys-
tem may support both.
2. Try simple URL-encoded representations of traversal sequences using the
following encodings. Be sure to encode every single slash and dot within
your input:
n Dot — %2e
n Forward slash — %2f
n Backslash — %5c
3. Try using 16-bit Unicode encoding:
n Dot — %u002e
n Forward slash — %u2215
n Backslash — %u2216
4. Try double URL encoding:
n Dot — %252e
n Forward slash — %252f
n Backslash — %255c
5. Try overlong UTF-8 Unicode encoding:
n Dot — %c0%2e,%e0%40%ae,%c0ae, and so on
n Forward slash — %c0%af,%e0%80%af,%c0%2f, and so on
n Backslash — %c0%5c,%c0%80%5c, and so on
You can use the illegal Unicode payload type within Burp Intruder to
generate a huge number of alternate representations of any given char-
acter and submit this at the relevant place within your target parameter.
These representations strictly violate the rules for Unicode representa-
tion but nevertheless are accepted by many implementations of Unicode
decoders, particularly on the Windows platform.
6. If the application is attempting to sanitize user input by removing tra-
versal sequences and does not apply this filter recursively, it may be
possible to bypass the filter by placing one sequence within another. For
example:
....//
....\/
..../\
....\\
cc1100..iinndddd 337755 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 376
376 Chapter 10 n Attacking Back-End Components
TRY IT!
http://mdsec.net/filestore/30/
http://mdsec.net/filestore/39/
http://mdsec.net/filestore/46/
http://mdsec.net/filestore/59/
http://mdsec.net/filestore/65/
The second type of input fi lter commonly encountered in defenses against path
traversal attacks involves verifying whether the user-supplied fi lename contains
a suffi x (fi le type) or prefi x (starting directory) that the application expects. This
type of defense may be used in tandem with the fi lters already described.
HACK STEPS
1. Some applications check whether the user-supplied filename ends in
a particular file type or set of file types and reject attempts to access
anything else. Sometimes this check can be subverted by placing a URL-
encoded null byte at the end of your requested filename, followed by a
file type that the application accepts. For example:
../../../../../boot.ini%00.jpg
The reason this attack sometimes succeeds is that the file type check
is implemented using an API in a managed execution environment in
which strings are permitted to contain null characters (such as String.
endsWith() in Java). However, when the file is actually retrieved, the
application ultimately uses an API in an unmanaged environment in which
strings are null-terminated. Therefore, your filename is effectively trun-
cated to your desired value.
2. Some applications attempt to control the file type being accessed by
appending their own file-type suffix to the filename supplied by the user.
In this situation, either of the preceding exploits may be effective, for the
same reasons.
3. Some applications check whether the user-supplied filename starts with
a particular subdirectory of the start directory, or even a specific filename.
This check can, of course, be bypassed easily as follows:
filestore/../../../../../../../etc/passwd
4. If none of the preceding attacks against input filters is successful indi-
vidually, the application might be implementing multiple types of filters.
Therefore, you need to combine several of these attacks simultaneously
(both against traversal sequence filters and file type or directory filters). If
cc1100..iinndddd 337766 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 377
Chapter 10 n Attacking Back-End Components 377
HACK STEPS
possible, the best approach here is to try to break the problem into sepa-
rate stages. For example, if the request for:
diagram1.jpg
is successful, but the request for:
foo/../diagram1.jpg
fails, try all the possible traversal sequence bypasses until a variation on
the second request is successful. If these successful traversal sequence
bypasses don’t enable you to access /etc/passwd, probe whether any
file type filtering is implemented and can be bypassed by requesting:
diagram1.jpg%00.jpg
Working entirely within the start directory defined by the application,
try to probe to understand all the filters being implemented, and see
whether each can be bypassed individually with the techniques described.
5. Of course, if you have whitebox access to the application, your task is
much easier, because you can systematically work through different types
of input and verify conclusively what filename (if any) is actually reaching
the filesystem.
Coping with Custom Encoding
Probably the craziest path traversal bug that the authors have encountered
involved a custom encoding scheme for fi lenames that were ultimately handled
in an unsafe way. It demonstrated how obfuscation is no substitute for security.
The application contained some work fl ow functionality that enabled users
to upload and download fi les. The request performing the upload supplied a
fi lename parameter that was vulnerable to a path traversal attack when writing
the fi le. When a fi le had been successfully uploaded, the application provided
users with a URL to download it again. There were two important caveats:
n The application verifi ed whether the fi le to be written already existed. If
it did, the application refused to overwrite it.
n The URLs generated for downloading users’ fi les were represented using
a proprietary obfuscation scheme. This appeared to be a customized form
of Base64 encoding in which a different character set was employed at
each position of the encoded fi lename.
Taken together, these caveats presented a barrier to straightforward exploita-
tion of the vulnerability. First, although it was possible to write arbitrary fi les to
cc1100..iinndddd 337777 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 378
378 Chapter 10 n Attacking Back-End Components
the server fi lesystem, it was not possible to overwrite any existing fi le. Also, the
low privileges of the web server process meant that it was not possible to create
a new fi le in any interesting locations. Second, it was not possible to request
an arbitrary existing fi le (such as /etc/passwd) without reverse engineering
the custom encoding, which presented a lengthy and unappealing challenge.
A little experimentation revealed that the obfuscated URLs contained the
original fi lename string supplied by the user. For example:
n test.txt became zM1YTU4NTY2Y
n foo/../test.txt became E1NzUyMzE0ZjQ0NjMzND
The difference in length of the encoded URLs indicated that no path canoni-
calization was performed before the encoding was applied. This behavior gave
us enough of a toehold to exploit the vulnerability. The fi rst step was to submit
a fi le with the following name:
../../../../../.././etc/passwd/../../tmp/foo
which, in its canonical form, is equivalent to:
/tmp/foo
Therefore, it could be written by the web server. Uploading this fi le produced
a download URL containing the following obfuscated fi lename:
FhwUk1rNXFUVEJOZW1kNlRsUk5NazE2V1RKTmFrMHdUbXBWZWs1NldYaE5lb
To modify this value to return the fi le /etc/passwd, we simply needed to
truncate it at the right point, which was:
FhwUk1rNXFUVEJOZW1kNlRsUk5NazE2V1RKTmFrM
Attempting to download a fi le using this value returned the server’s passwd
fi le as expected. The server had given us suffi cient resources to be able to encode
arbitrary fi le paths using its scheme, without even deciphering the obfuscation
algorithm being used!
NOTE You may have noticed the appearance of a redundant ./ in the name
of our uploaded fi le. This was necessary to ensure that our truncated URL
ended on a 3-byte boundary of cleartext, and therefore on a 4-byte bound-
ary of encoded text, in line with the Base64 encoding scheme. Truncating an
encoded URL partway through an encoded block would almost certainly cause
an error when decoded on the server.
cc1100..iinndddd 337788 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 379
Chapter 10 n Attacking Back-End Components 379
Exploiting Traversal Vulnerabilities
Having identifi ed a path traversal vulnerability that provides read or write
access to arbitrary fi les on the server’s fi lesystem, what kind of attacks can you
carry out by exploiting these? In most cases, you will fi nd that you have the
same level of read/write access to the fi lesystem as the web server process does.
HACK STEPS
You can exploit read access path traversal fl aws to retrieve interesting fi les
from the server that may contain directly useful information or that help you
refi ne attacks against other vulnerabilities. For example:
n Password fi les for the operating system and application
n Server and application confi guration fi les to discover other vulnerabilities
or fi ne-tune a different attack
n Include fi les that may contain database credentials
n Data sources used by the application, such as MySQL database fi les or
XML fi les
n The source code to server-executable pages to perform a code review in
search of bugs (for example, GetImage.aspx?file=GetImage.aspx)
n Application log fi les that may contain usernames and session tokens and
the like
If you fi nd a path traversal vulnerability that grants write access, your main
goal should be to exploit this to achieve arbitrary execution of commands on
the server. Here are some ways to exploit this vulnerability:
n Create scripts in users’ startup folders.
n Modify fi les such as in.ftpd to execute arbitrary commands when a
user next connects.
n Write scripts to a web directory with execute permissions, and call them
from your browser.
Preventing Path Traversal Vulnerabilities
By far the most effective means of eliminating path traversal vulnerabilities is to
avoid passing user-submitted data to any fi lesystem API. In many cases, includ-
ing the original example GetFile.ashx?filename=keira.jpg, it is unnecessary
for an application to do this. Most fi les that are not subject to any access control
can simply be placed within the web root and accessed via a direct URL. If this
cc1100..iinndddd 337799 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 380
380 Chapter 10 n Attacking Back-End Components
is not possible, the application can maintain a hard-coded list of image fi les that
may be served by the page. It can use a different identifi er to specify which
fi le is required, such as an index number. Any request containing an invalid
identifi er can be rejected, and there is no attack surface for users to manipulate
the path of fi les delivered by the page.
In some cases, as with the work fl ow functionality that allows fi le uploading
and downloading, it may be desirable to allow users to specify fi les by name.
Developers may decide that the easiest way to implement this is by passing
the user-supplied fi lename to fi lesystem APIs. In this situation, the application
should take a defense-in-depth approach to place several obstacles in the way
of a path traversal attack.
Here are some examples of defenses that may be used; ideally, as many of
these as possible should be implemented together:
n After performing all relevant decoding and canonicalization of the user-
submitted fi lename, the application should check whether it contains either
of the path traversal sequences (using backslashes or forward slashes) or
any null bytes. If so, the application should stop processing the request. It
should not attempt to perform any sanitization on the malicious fi lename.
n The application should use a hard-coded list of permissible fi le types and
reject any request for a different type (after the preceding decoding and
canonicalization have been performed).
n After performing all its fi ltering on the user-supplied fi lename, the appli-
cation should use suitable fi lesystem APIs to verify that nothing is amiss
and that the fi le to be accessed using that fi lename is located in the start
directory specifi ed by the application.
In Java, this can be achieved by instantiating a java.io.File object using
the user-supplied fi lename and then calling the getCanonicalPath method
on this object. If the string returned by this method does not begin with the
name of the start directory, the user has somehow bypassed the applica-
tion’s input fi lters, and the request should be rejected.
In ASP.NET, this can be achieved by passing the user-supplied fi lename
to the System.Io.Path.GetFullPath method and checking the returned
string in the same way as described for Java.
The application can mitigate the impact of most exploitable path traversal
vulnerabilities by using a chrooted environment to access the directory contain-
ing the fi les to be accessed. In this situation, the chrooted directory is treated as
cc1100..iinndddd 338800 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 381
Chapter 10 n Attacking Back-End Components 381
if it is the fi lesystem root, and any redundant traversal sequences that attempt
to step up above it are ignored. Chrooted fi lesystems are supported natively
on most UNIX-based platforms. A similar effect can be achieved on Windows
platforms (in relation to traversal vulnerabilities, at least) by mounting the