kernel space. This includes loading existing rules into
the Prolog engine, checking for conflicts, saving the rule
locally, passing the rule to the kernel, and waiting for the
acknowledgment. As shown in Table 2, the average time
of adding a rule using USBTABLES stays at around 6 ms
in both cases, which is a negligible one-time cost.
USB Enumeration Overhead. For this test, we used
the Logitech H390 USB headset, which has 4 interfaces.
We manually plugged the headset into the host 20 times.
We then compare the results between the USBFILTER
kernel with varying numbers of rules loaded and the
stock Ubuntu kernel, where USBFILTER is fully disabled,
424  25th USENIX Security Symposium 
USENIX Association
10
Packet Filtering Min Avg Med Max Dev
2.6
Time (20 rules)
0.5
2.0
Time (100 rules) 2.0
9.7 10.0 15.0 1.0
3.0
5.0
Table 4: Packet filtering time (µs) averaged by 1500
packets.
Configuration
Stock
USBFILTER
Overhead
1K 10K 100K 1M 10M 100M
97.6 98.1
99.2 105.5 741.7 5177.7
97.7 98.2
99.6 106.3 851.5 6088.4
0.1% 0.1% 0.4% 0.8% 14.8% 17.6%
Table 5: Latency (ms) of the fileserver workload
with different mean file sizes.
as shown in Table 3. The average USB enumeration
time is 33.9 ms for the stock kernel and 34.4 ms and
34.8 ms for the USBFILTER kernel with 20 and 100 rules
preloaded respectively. Comparing to the stock kernel,
USBFILTER only introduces 1.5% and 2.7% overheads,
or less than 1 ms even with 100 rules preloaded.
Packing Filtering Overhead. The overhead of USB
enumeration introduced by USBFILTER is the result
of packet filtering and processing performed on each
USB packet, since there may be hundreds of packets
during USB enumeration, depending on the number of
interface and endpoints of the device. To capture this
packet filtering overhead, we plug in a Logitech M105
USB Optical Mouse, and move it around to generate
enough USB packets. We then measure the time used
by USBFILTER to determine whether the packet should
be filtered/dropped or not for 1500 packets, as shown
in Table 4. The average cost per packet are 2.6 µs and
9.7 µs respectively, including the time to traverse all
the 20/100 rules in the kernel, and the time used by the
benchmark itself to get the timing and print the result.
The 100-rule case shows that the overhead of USBFILTER
is quadruped when the number of rule increases by one
order of magnitude. As we mentioned before, most
common USB usages could be covered within 20 rules.
We assume it is rare for a system to have 100 rules for
different USB devices. To search in hundreds of rules
efficiently, we can setup a hash table using e.g., USB
port numbers as keys to save rules instead of a linear
array (list) currently implemented.
5.2.2 Macrobenchmark
We use filebench [37] and iperf [42] to measure through-
puts and latencies of file operations, and bandwidths
of network activities, under the stock kernel and the
USBFILTER kernel, using different USB devices. The
USBFILTER kernel is loaded with 20 rules introduced in
the case studies before benchmarking.
Filebench. We choose the fileserver workload in
filebench, with the following settings: the number of files
in operation is 20; the number of working threads is 1;
the run time for each test case is 2 minutes; the mean
file size in operation ranges from 1 KB to 100 MB; all
other settings are default provided by filebench. These
settings emulate a typical usage of USB storage devices,
where users plug in flash drives to copy or edit some files.
All file operations happen in a SanDisk Cruzer Fit 16
GB flash drive. The throughputs under the stock kernel
and the USBFILTER kernel are demonstrated in Figure 5.
When the mean file size is less than 1 MB, the through-
put of USBFILTER is close to the one of the stock kernel.
Since there is at most 20× 1 MB data involved in block
I/O operations, both the stock kernel and USBFILTER can
handle this data size smoothly. When the mean file size is
greater than 1 MB, USBFILTER shows lower throughputs
comparing to the stock kernel, as the result of rule match-
ing for each USB packet. Compared to the stock kernel,
USBFILTER imposes 14.7% and 18.4% overheads when
the mean file sizes are 10 MB and 100 MB respectively.
That is, when there is 20× 100 MB (2 GB) involved in
block I/O operations, the throughput decreases from 8.7
MB/s to 7.1 MB/s, when USBFILTER is enabled.
The corresponding latencies are shown in Table 5.
The latency of USBFILTER is higher than the stock
kernel. Following the throughput model, the latencies
between the two kernels are close when the mean file
size is less than 1 MB. The overhead introduced by
USBFILTER is less than 1.0%. When the mean file sizes
are 10 MB and 100 MB, USBFILTER imposed 14.8%
and 17.6% overheads in latency. comparing to the stock
kernel. That is, to deal with 20 × 100 MB data, users
need one more second to finish all the operations with
USBFILTER enabled, which is acceptable for most users.
iperf. We use iperf to measure bandwidths of upstream
TCP and UDP communications, where the host machine
acts as a server, providing local network access via a
Ralink RT5372 300 Mbps USB wireless adapter. The
time interval for each transmission is 10 seconds, and
each test runs 5 minutes (30 intervals). For TCP, we use
the default TCP window size 64 KB; for UDP, we use
the default available UDP bandwidth size 10 MB. The
TCP bandwidths of the two kernels are shown in Fig-
ure 6, where we aggregate each two intervals into one,
reducing the number of sampling points from 30 to 15.
and the average bandwidths are also listed in dot lines.
Though having different transmission patterns, the aver-
age bandwidths of both are close, with the stock kernel at
2.75 Mbps and USBFILTER at 2.52 Mbps. Comparing to
USENIX Association  
25th USENIX Security Symposium  425
11
the stock kernel, USBFILTER introduces 8.4% overhead.
The UDP benchmarking result closely resembles
TCP, as shown in Figure 7. Regardless of transmission
patterns, average bandwidth of the two kernels is similar,
with the stock kernel at 3.48 Mbps and USBFILTER at
3.27 Mbps. Comparing to the TCP transmission, UDP
transmission is faster due to the simpler design/imple-
mentation of UDP, and USBFILTER introduces 6.0%
overhead. In both cases, USBFILTER has demonstrated a
low impact to the original networking component.
5.3 Real-world Workloads
To better understand the performance impact of USB-
FILTER, we generate a series of real-world workloads to
measure typical USB use cases. In the KVM [24] work-
load, we create and install a KVM virtual machine au-
tomatically from the Ubuntu 14.04 ISO image file (581
MB) saved on USB storage. In the Chrome workload,
we access the web browser benchmark site [5] via a USB
wireless adapter. In the ClamAV [25] workload, we scan
the unzipped Ubuntu 14.04 ISO image saved on the USB
storage for virus using ClamAV. In the wget workload,
we download the Linux kernel 4.4 (83 MB) via the USB
wireless adapter using wget. The USB storage is the San-
Disk 16 GB flash drive, and the USB wireless adapter
is the Ralink 300 Mbps wireless card. All time mea-
surements are in seconds except the Chrome workload,
where scores are given, and are divided by 10 to fit into
the figure. Figure 8 shows the comparison between the
two kernels when running these workloads. In all work-
loads, USBFILTER either performs slightly better than the
stock kernel, or imposes a small overhead compared to
the stock kernel in our test. It is clear that USBFILTER
approximates the original system performance.
5.4 Summary
In this section, we showed how USBFILTER can help
administrators prevent access to unauthorized (and un-
known) device interfaces, restrict access to authorized
devices using application pinning, and prevent data ex-
filtration. Our system introduces between 3 and 10 µs of
latency on USB packets while checking rules, introduc-
ing minimal overhead on the USB stack.
6 Discussion
6.1 Process Table
We have successfully traced each USB packet to its orig-
inating application for USB storage devices by passing
the PID information along the software stack from the
VFS layer, through the block layer, to the USB layer
within the kernel. However, it is not always possible to
find the PID for each USB packet received by the USB
host controller. One example is HID devices, such as
keyboards and mouses. Keystrokes and mouse move-
ments happen in the interrupt (IRQ) context, where the
current stopped process has nothing to do with this USB
packet. All these packets are delivered to the Xorg server
in the user space, which then dispatches the inputs to dif-
ferent applications registered for different events. USB-
FILTER is able to make sure that only Xorg can receive
inputs from the keyboard and mouse. To guarantee the
USB packet delivered to the desired application, we can
enhance the Xorg server to understand USBFILTER rules.
The other example comes from USB networking de-
vices. Though we have enhanced the general USB wire-
line driver usbnet to pass the PID information into
each USB packet, unlike USB storage devices sharing
the same usb-storage driver, many USB Ethernet
dongles have their own drivers instead of using the gen-
eral one. Even worse, there is no general USB wire-
less driver at all. Depending of the device type and
model, one may need to instrument the corresponding
driver to have the PID information, like what we did
for rt2800usb driver. Future work will introduce a
new USB networking driver framework to be shared by
specific drivers, providing a unified interface for passing
PID information into USB packets.
Another issue of using process table in USBFILTER
rules is TOCTTOU (time-of-check-to-time-of-use) at-
tacks. A malicious process can submit a USB packet
to the kernel and exit. When the packet is finally han-
dled by the host controller, USBFILTER is no longer able
to find the corresponding process given the PID. Fortu-
nately, these attacks does not impact rules without pro-
cess tables. When process information is crucial to the
system, we recommending using USBTABLES to change
the default behavior to “drop”, make sure that no packet
would get through without an explicit matching rule.
6.2 System Caching
USBFILTER is able to completely shut down any write op-
erations to external USB storage devices, preventing any
form of data exfiltration from the host machine. Sim-
ilarly, one can also write a “block_scsi_read” LUM to
stop read operations from storage devices. Nevertheless,
this LUM may not be desired or work as expected in re-
ality. To correctly mount the filesystem in the storage
device, the kernel has to read the metadata saved in the
storage. One solution would be to delay the read block-
ing till the filesystem is mounted. However, for perfor-
mance considerations, the Linux kernel also reads ahead
some data in the storage, and brings it into the system
426  25th USENIX Security Symposium 
USENIX Association
12
cache (page cache). All following I/O operations will
happen in the memory rather than the storage. While
memory protection is out of scope for this paper, we rely
on the integrity of the kernel to enforce the MAC model
it applies. Write operations, even though in the memory,
will be flushed into the storage, where USBFILTER is able
to provide a strong and useful guarantee.
6.3 Packet Analysis From USB Devices
Because of the master-slave nature of the USB proto-
col, we do not setup USBFILTER in the response path,
which is from the device to the host, due to performance
considerations. However, enabling USBFILTER in the re-
sponse path provides new opportunities to defend against
malicious devices and users, since the response packet
could be inspected with the help of USBFILTER. For ex-
ample, one can write a LUM to limit the capability of
a HID device, such as allowing only three different key
actions from a headset’s volume control button, which
is implemented by GoodUSB as a customized keyboard
driver, or disabling sudo commands for unknown key-
boards. Another useful case is to filter the spoofing
DNS reply message embedded in the USB packet sent
by malicious smart phones or network adapters, to de-
fend against DNS cache poisoning. We are planning to
investigate these new case studies in future work.
6.4 Malicious USB Drivers and USB
Covert Channels
While BadUSB is the most prominent attack that exploits
the USB protocol, we observe that using USB communi-
cation as a side channel to steal data from host machines,
or to inject malicious code into hosts, is another tech-
nically mature and plausible threat. On the Linux plat-
form, with the development of libusb [14], more USB
drivers run within user space and can be delivered as bi-
naries. On Windows platform, PE has been a common
format of device drivers. To use these devices, users
have to run these binary files without knowing if these
drivers are doing something else in the meantime.4 For
instance, USB storage devices should use bulk packets
to transfer data per the USB spec. However, a malicious
storage driver may use control packets to stealthily ex-
filtrate data as long as the malicious storage is able to
decode the packet. This works because control transfers
are mainly used during the USB enumeration process.
With the help of USBFILTER, one can examine each USB
packet, and filter unrecognized ones without breaking the
normal functionality of the device.
4N.B. that there are ways to instrument DLL files on Windows plat-
form, though this does not appear to be commonly done with drivers.
6.5 Usability Issues
To write USBFILTER rules, one needs some knowl-
edge about the USB protocol in general, as well as
the target USB device. The lsusb command under
Linux provides a lot of useful information that can di-
rectly be mapped into rule construction. Another tool
usb-devices also helps users understand USB de-
vices. Windows has a GUI program USBView to vi-
sualize the hierarchy and configuration of USB devices
plugged into the host machine. While users can write
some simple rules, we expect that developers will pro-
vide useful LUMs, which may require deep understand-
ing of the USB protocol and domain specific knowledge
(e.g., SCSI, and will share these LUMs with the com-
munity. We wll also provide more useful LUMs in the
future.
7 Related Work
Modern operating systems implicitly approve all inter-
faces on any device that has been physically attached
to the host. Due to this, a wide range of attacks have
been built on USB including malware and data exfiltra-
tion on removable storage [15, 34, 46], tampered device
firmware [27, 7], and unauthorized devices [1]. These
attacks fall into two major categories: those that involve
data ingress and egress via removable storage and those
that involve the attachment of unknown USB interfaces.
Proposals for applying access control to USB storage
devices [12, 28, 38, 48] fall short because they cannot
guarantee that the USB write requests are blocked from
reaching the device. Likewise, defenses against unau-
thorized or malicious device interfaces [41, 33] and dis-
abling device drivers are coarse and cannot distinguish
between desired and undesired usage of a particular in-
terface. Another solution employed by the Windows Em-
bedded platform [26] binds USB port numbers with the
VID/PID/CID (device class ID) information of devices
to accept/reject the device plugged in. While CID helps
limit the usage of the device, this solution does not work
for composite devices equipped with multiple interfaces
(with different CIDs). Besides, users may have to update
the policy each time when different devices are plugged
into the same port. Given the increasing ubiquity of
USB, this is not a sustainable solution. Guardat demon-
strates a means of expressing a robust set of rules for
storage access but requires substantial new mechanisms
for operation within a host computer, such as implemen-
tation within a hybrid disk microcontroller [45].
Netfilter [40] has become the de facto network fire-
wall standard on Linux due to its ability to perform
fine-grained filtering on network packets between ap-
plications and the physical network interface. Netfilter
USENIX Association  
25th USENIX Security Symposium  427
13
can prevent compromise of a program by preventing un-
wanted packets from reaching the process. Similarly, our
system can defend processes by denying USB traffic be-
fore it reaches its destination.
Furthermore, fine-grained filtering has been applied to
the usage of filesystem objects by applications [13, 35],