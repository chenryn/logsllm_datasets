#####  获取   （    fetch    ） 
在使用 `git fetch` 时，你将从远程仓库添加更改到本地工作分支，而不提交它们。与 `git pull` 不同，提取可让你在更改提交到本地分支之前先进行审查。
#####  跟进（用户）   （    following (users)    ） 
获取关于另一个用户的贡献和活动的通知。
#####  强制推送   （    force push    ） 
一种使用本地更改覆盖远程仓库的 Git 推送，不管是否冲突。
#####  复刻   （    fork    ） 
复刻是其他用户仓库在你的帐户上的个人副本。复刻允许你自由更改项目而不影响原始上游仓库。你也可以在上游仓库中打开拉取请求，并使复刻同步最新的更改，因为两个仓库仍然互相连接。
##### gitfile
一种普通的 `.git` 文件，始终位于工作树的根部，指向 Git 目录，包含整个 Git 仓库及其元数据。你可以在命令行上使用 `git rev-parse --git-dir` 查看仓库（实际仓库）的此文件。
##### HEAD
当前分支。
#####  挂钩   （    hook    ） 
在多个 Git 命令正常执行时，对可选脚本进行标注以允许开发者添加功能或检查。通常，挂钩允许预先验证和潜在中止命令，并且允许在操作完成后再发事后通知。
#####  实例   （    instance    ） 
组织包含在其配置和控制的虚拟机中的 GitHub 私有副本。
#####  议题   （    issue    ） 
议题是提议的与仓库相关的改进、任务或问题。（对于公共仓库）任何人都可创建议题，然后由仓库协作者调解。每个议题都包含自己的讨论线程。你也可以使用标签将议题归类并分配到某人。
#####  密钥指纹   （    key fingerprint    ） 
用于识别较长公钥的简短字节系列。
#####  关键词   （    keyword    ） 
用在拉取请求中时关闭议题的特定文字。
#####  标签   （    label    ） 
议题或拉取请求的标记。仓库随附一系列默认标签，但用户也可创建自定义标签。
##### LFS
Git Large File Storage。一种开源 Git 扩展，用于对大文件进行版本控制。
#####  许可证   （    license    ） 
一种可随附于项目的文档，告知们能够对你的源代码执行哪些操作，不能执行哪些操作。
#####  行注释   （    line comment    ） 
拉取请求内特定代码行上的评论。
#####  主干   （    master    ） 
默认开发分支。只要创建 Git 仓库，就会创建一个名为 `master` 的分支，并且它会变为活动的分支。大多数情况下，这包含本地开发，但纯属惯例，而非必需。
#####  提及   （    mention    ） 
一种通过在用户名前加上 @ 符号来发送给用户的通知。GitHub 上组织中的用户也可成为可提及的团队一部分。
#####  合并   （    merge    ） 
合并是从一个分支（在相同的仓库中或来自一个分叉）提取更改，然后将其应用到另一个分支。这通常是作为“拉取请求”（可视为请求合并）或通过命令行完成。如果没有冲突的更改，可通过 GitHub.com web 界面使用拉取请求完成合并，或始终通过命令行完成。
#####  合并冲突   （    merge conflict    ） 
合并的分支之间发生的差异。当人们对同一文件的同一行进行不同的更改时，或者一个人编辑某文件而另一个人删除该文件时，就会发生合并冲突。必须解决合并冲突后才可合并分支。
#####  合并请求   （    merge request    ） 
合并请求（MR）是 GitLab 上类似于 GitHub 上的拉取请求的概念。
#####  里程碑   （    milestone    ） 
一种跟踪仓库中议题或拉取请求组进度的方式。
#####  镜像   （    mirror    ） 
仓库的新副本。
#####  非快进   （    non-fast-forward    ） 
当仓库的本地副本未与上游仓库同步时，你在推送本地更改之前需要提取上游更改。
#####  通知   （    notification    ） 
web 或电子邮件（根据你的设置）传送的更新，提供你感兴趣的活动的相关信息。
#####  外部协作者   （    outside collaborator    ） 
已被授予访问一个或多个组织的仓库但对组织没有其他访问权限的用户，且不属于组织的成员。
#####  开源   （    open source    ） 
开源软件是可供任何人自由使用、修改和共享（以修改和未修改的形式）的软件。今天，“开源”的概念通常扩展到软件以外，代表一种协作原则，其中工作材料在线供任何人分叉、修改、讨论和参与。
#####  源   （    origin    ） 
默认上游仓库。大多数项目至少有一个它们跟踪的上游项目。默认情况下，源用于该目的。
#####  所有者   （    owner    ） 
对组织有完全管理权限的组织成员。
#####  私有贡献   （    private contributions    ） 
对私有（与公共相对）仓库的贡献。
#####  私有仓库   （    private repository    ） 
私有仓库仅对仓库所有者和所有者指定的协作者可见。
#####  生产分支   （    production branch    ） 
包含可使用或部署到应用程序或站点的最终更改的分支。
#####  个人资料   （    profile    ） 
显示 GitHub 上用户活动相关信息的页面。
#####  受保护分支   （    protected branch    ） 
受保护分支在仓库管理员选择保护的分支上禁止多项 Git 功能。必要检查未通过或必需审查未批准，不能对它们执行强制推送、删除和更改合并，或者不能从 GitHub web 界面上传文件到其中。受保护分支通常是默认分支。