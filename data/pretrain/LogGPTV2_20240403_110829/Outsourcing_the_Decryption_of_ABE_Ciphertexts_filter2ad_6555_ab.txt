dedicated to determining how a policy is satisﬁed by a
key and executing the corresponding pairing computa-
tions of decryption.
In our outsourcing solution, most
of this code is pushed into the untrusted transformation
algorithm, leaving only a much smaller portion on the
user’s device. This has two advantages. First, the amount
of decryption code that needs to reside on a resource con-
strained user device will be smaller. Actually, all bilinear
map operations can be pushed outside. Second, this par-
titioning will dramatically decrease the size of the trusted
code base, removing thousands of lines of complex pars-
ing code. Even without using outsourcing, this partition-
ing of code is useful.
Related Work: Proxy Re-Encryption. In this work, we
show how to delegate (in a true ofﬂine sense) the ability
to transform an ABE ciphertext on message m into an
El Gamal-style ciphertext on the same m, without learn-
ing anything about m. This is similar to the concept of
proxy re-encryption [8, 4] where an untrusted proxy is
given a re-encryption key that allows it to transform an
encryption under Alice’s key of m into an encryption un-
der Bob’s key of the same m, without allowing the proxy
to learn anything about m.
2 Background
We ﬁrst give the security deﬁnitions for ABE with out-
sourcing. We then give background information on bi-
linear maps. Finally, we provide formal deﬁnitions for
ServerClientABE CTServerProxyClientABE CTCTaccess structures and relevant background on Linear Se-
cret Sharing Schemes (LSSS), as taken from [42].
Types of ABE. We consider two distinct varieties
of Attribute-Based Encryption: Ciphertext-Policy (CP-
ABE) and Key-Policy (KP-ABE). In CP-ABE an access
structure (policy) is embedded into the ciphertext during
encryption, and each decryption key is based an some
attribute set S. KP-ABE inverts this relationship, embed-
ding S into the ciphertext and a policy into the key.3 We
capture both paradigms in a generalized ABE deﬁnition.
2.1 Access Structures
Deﬁnition 1 (Access Structure [5]) Let {P1, P2, . . ., Pn}
be a set of parties. A collection A ⊆ 2{P1,P2,...,Pn} is mono-
tone if ∀B,C : if B ∈ A and B ⊆ C then C ∈ A. An access
structure (respectively, monotone access structure) is a
collection (resp., monotone collection) A of non-empty
subsets of {P1,P2, . . . ,Pn}, i.e., A ⊆ 2{P1,P2,...,Pn}\{/0}.
The sets in A are called the authorized sets, and the sets
not in A are called the unauthorized sets.
In our context, the role of the parties is taken by the
attributes. Thus, the access structure A will contain the
authorized sets of attributes. We restrict our attention to
monotone access structures. However, it is also possible
to (inefﬁciently) realize general access structures using
our techniques by deﬁning the “not” of an attribute as
a separate attribute altogether. Thus, the number of at-
tributes in the system will be doubled. From now on,
unless stated otherwise, by an access structure we mean
a monotone access structure.
2.2 ABE with Outsourcing
Let S represent a set of attributes, and A an access struc-
ture. For generality, we will deﬁne (Ienc,Ikey) as the in-
puts to the encryption and key generation function re-
In a CP-ABE scheme (Ienc,Ikey) = (A,S),
spectively.
while in a KP-ABE scheme we will have (Ienc,Ikey) =
(S,A). A CP-ABE (resp. KP-ABE) scheme with out-
sourcing functionality consists of ﬁve algorithms:
Setup(λ ,U). The setup algorithm takes security param-
eter and attribute universe description as input. It outputs
the public parameters PK and a master key MK.
Encrypt(PK,M,Ienc). The encryption algorithm takes
as input the public parameters PK, a message M, and an
3More intuitively, CP-ABE is often suggested as a means to imple-
ment role-based access control, where the user’s key attributes corre-
spond the long-term roles and ciphertexts carry an access policy. Key-
Policy ABE is more appropriate in applications where ciphertexts may
be tagged with attributes (e.g., relating to message content), and each
user’s access to these ciphertexts determined by a policy in their de-
cryption key. For more on applications, see e.g., [37].
access structure (resp. attribute set) Ienc. It outputs the
ciphertext CT.
KeyGenout(MK,Ikey).
The key generation algorithm
takes as input the master key MK and an attribute set
(resp. access structure) Ikey and outputs a private key SK
and a transformation key TK.
Transform(TK,CT). The ciphertext transformation al-
gorithm takes as input a transformation key TK for Ikey
and a ciphertext CT that was encrypted under Ienc. It out-
puts the partially decrypted ciphertext CT(cid:48) if S ∈ A and
the error symbol ⊥ otherwise.
Decryptout(SK,CT(cid:48)). The decryption algorithm takes as
input a private key SK for Ikey and a partially decrypted
ciphertext CT(cid:48) that was originally encrypted under Ienc.
It outputs the message M if S ∈ A and the error symbol
⊥ otherwise.4
Why RCCA security? We describe a security model for
ABE that support outsourcing. We want a very strong
notion of security. The traditional notion of security
against adaptive chosen-ciphertext attacks (CCA) is a bit
too strong since it does not allow any bit of the cipher-
text to be altered, and the purpose of our outsourcing is
to compress the size of the ciphertext. We thus adopt
a relaxation due to Canetti, Krawczyk and Nielsen [13]
called replayable CCA security, which allows modiﬁca-
tions to the ciphertext provided they cannot change the
underlying message in a meaningful way.
RCCA Security Model for ABE with Outsourcing. Fig-
ure 4 describes a generalized RCCA security game for
both KP-ABE and CP-ABE schemes with outsourcing.
We deﬁne the advantage of an adversary A in this game
as Pr[b(cid:48) = b]− 1
2.
Deﬁnition 2 (RCCA-Secure ABE with Outsourcing)
A CP-ABE or KP-ABE scheme with outsourcing is
RCCA-secure (or secure against replayable chosen-
ciphertext attacks) if all polynomial time adversaries
have at most a negligible advantage in the RCCA game
deﬁned above.
CPA Security. We say that a system is CPA-secure (or
secure against chosen-plaintext attacks) if we remove the
Decrypt oracle in both Phase 1 and 2.
Selective Security. We say that a CP-ABE (resp. KP-
ABE) system is selectively secure if we add an Init stage
before Setup where the adversary commits to the chal-
lenge value I∗
enc.
4Note that we can implement the standard (non-outsourced) ABE
Decrypt algorithm by combining Transform and Decryptout.
Setup. The challenger runs the Setup algorithm and gives the public parameters, PK to the adversary.
Phase 1. The challenger initializes an empty table T , an empty set D and an integer j = 0. Proceeding adaptively,
the adversary can repeatedly make any of the following queries:
• Create(Ikey): The challenger sets j := j +1. It runs the outsourced key generation algorithm on Ikey to obtain the
pair (SK,TK) and stores in table T the entry ( j,Ikey,SK,TK). It then returns to the adversary the transformation
key TK.
Note: Create can be repeatedly queried with the same input.
• Corrupt(i): If there exists an ith entry in table T , then the challenger obtains the entry (i,Ikey,SK,TK) and sets
D := D∪{Ikey}. It then returns to the adversary the private key SK. If no such entry exists, then it returns ⊥.
• Decrypt(i,CT): If there exists an ith entry in table T , then the challenger obtains the entry (i,Ikey,SK,TK) and
returns to the adversary the output of the decryption algorithm on input (SK,CT). If no such entry exists, then
it returns ⊥.
Challenge. The adversary submits two equal length messages M0 and M1. In addition the adversary gives a value
enc such that for all Ikey ∈ D, f (Ikey,I∗
I∗
enc. The
resulting ciphertext CT∗ is given to the adversary.
Phase 2. Phase 1 is repeated with the restrictions that the adversary cannot
enc) (cid:54)= 1. The challenger ﬂips a random coin b, and encrypts Mb under I∗
• trivially obtain a private key for the challenge ciphertext. That is, it cannot issue a Corrupt query that would
result in a value Ikey which satisﬁes f (Ikey,I∗
enc) = 1 being added to D.
• issue a trivial decryption query. That is, Decrypt queries will be answered as in Phase 1, except that if the
response would be either M0 or M1, then the challenger responds with the special message test instead.
Guess. The adversary outputs a guess b(cid:48) of b.
Figure 4: Generalized RCCA Security game for CP- and KP-ABE with outsourcing functionality. For CP-ABE we
deﬁne the function f (Ikey,Ienc) as f (S,A) and for KP-ABE it is deﬁned as f (A,S).
In either case the function f
evaluates to 1 iff S ∈ A.
2.3 Bilinear Maps
Let G and GT be two multiplicative cyclic groups of
prime order p. Let g be a generator of G and e : G×G →
GT be a bilinear map with the properties:
1. Bilinearity: for all u,v ∈ G and a,b ∈ Zp, we have
2. Non-degeneracy: e(g,g) (cid:54)= 1.
e(ua,vb) = e(u,v)ab.
We say that G is a bilinear group if the group opera-
tion in G and the bilinear map e : G× G → GT are both
efﬁciently computable.
The schemes we present in this work are provably
secure under the Decisional Parallel BDHE Assump-
tion [42] and the Decisional Bilinear Difﬁe-Hellman as-
sumption (DBDH) [9] in bilinear groups. For reasons
of space we will omit a deﬁnition of these assumptions
here, and refer the reader to the cited works.
2.4 Linear Secret Sharing Schemes
We will make essential use of linear secret-sharing
schemes. We adapt our deﬁnitions from those in [5]:
Deﬁnition 3 (Linear Secret-Sharing Schemes (LSSS) )
A secret-sharing scheme Π over a set of parties P is
called linear (over Zp) if
1. The shares of the parties form a vector over Zp.
2. There exists a matrix M with (cid:96) rows and n columns
called the share-generating matrix for Π. There ex-
ists a function ρ which maps each row of the matrix
to an associated party. That is for i = 1, . . . , (cid:96), the
value ρ(i) is the party associated with row i. When
we consider the column vector v = (s,r2, . . . ,rn),
where s ∈ Zp is the secret
to be shared, and
r2, . . . ,rn ∈ Zp are randomly chosen, then Mv is the
vector of (cid:96) shares of the secret s according to Π.
The share (Mv)i belongs to party ρ(i).
It is shown in [5] that every linear secret sharing-
scheme according to the above deﬁnition also enjoys the
linear reconstruction property, deﬁned as follows: Sup-
pose that Π is an LSSS for the access structure A. Let
S ∈ A be any authorized set, and let I ⊂ {1,2, . . . , (cid:96)} be
deﬁned as I = {i : ρ(i) ∈ S}. Then, there exist constants
{ωi ∈ Zp}i∈I such that, if {λi} are valid shares of any se-
cret s according to Π, then ∑i∈I ωiλi = s.
It is shown
in [5] that these constants {ωi} can be found in time
polynomial in the size of the share-generating matrix M.
Like any secret sharing scheme, it has the property that
for any unauthorized set S /∈ A, the secret s should be
information theoretically hidden from the parties in S.
Note on Convention. We use the convention that vector
(1,0,0, . . . ,0) is the “target” vector for any linear secret
sharing scheme. For any satisfying set of rows I in M,
we will have that the target vector is in the span of I.
For any unauthorized set of rows I the target vector is
not in the span of the rows of the set I. Moreover, there
will exist a vector w such that w· (1,0,0 . . . ,0) = −1 and
w· Mi = 0 for all i ∈ I.
Using Access Trees. Some prior ABE works (e.g., [24])
described access formulas in terms of binary trees. Using
standard techniques [5] one can convert any monotonic
boolean formula into an LSSS representation. An access
tree of (cid:96) nodes will result in an LSSS matrix of (cid:96) rows.
3 Outsourcing Decryption for Ciphertext-
Policy ABE
3.1 A CPA-secure Construction
Our CP-ABE construction is based on the “large uni-
verse” construction of Waters [42], which was proven
to be selectively CPA-secure under the Decisional q-
parallel BDHE assumption for a challenge matrix of size
(cid:96)∗ × n∗, where (cid:96)∗,n∗ ≤ q.5 The Setup, Encrypt and (non-
outsourced) Decrypt algorithms are identical to [42]. To
enable outsourcing we modify the KeyGen algorithm to
output a transformation key. We also deﬁne a new Trans-
form algorithm, and modify the decryption algorithm to
handle outputs of Encrypt as well as Transform. We
present the full construction in Figure 5.
Discussion.
For generality, we deﬁned the transfor-
mation key TK as being created by the master author-
ity. However, we observe that our outsourcing approach
above is actually backwards compatible with existing de-
ployments of the Waters system. In particular, one can
see that any existing user with her own Waters SK can
create a corresponding outsourcing pair (SK(cid:48),TK(cid:48)) by
rerandomizing with a random value z.
5By “large universe”, we mean a system that allows for a super-
polynomial number of attributes.
Theorem 3.1 Suppose the large universe construction
of Waters [42, Appendix C] is a selectively CPA-secure
CP-ABE scheme. Then the CP-ABE scheme of Figure 5
is a selectively CPA-secure outsourcing scheme.
Note that the Waters scheme of [42] was proven secure
under the Decisional q-parallel BDHE assumption. Due
to space constraints, we omit a proof of Theorem 3.1.
However, we observe that the proof techniques are quite
similar to those used for the RCCA-secure variant we
present in the next section.
3.2 An RCCA-secure Construction
We now extend our CPA-secure system to achieve the
stronger RCCA-security guarantee. To do so, we borrow
some techniques from Fujisaki and Okamoto [18], who
(roughly) showed how to transform a CPA-secure en-
cryption scheme into a CCA-secure encryption scheme
in the random oracle model. Here we relax to RCCA-
security and have the additional challenge of preserving
the decryption outsourcing capability.
The Setup and KeyGen algorithms operate exactly as
in the CPA-secure scheme, except the public key addi-
tionally includes the description of hash functions H1 :
{0,1}∗ → Zp and H2 : {0,1}∗ → {0,1}k. We now de-
scribe the remaining algorithms.
Encryptrcca(PK, M ∈ {0,1}k,(M,ρ)) The encryption
algorithm selects a random R ∈ GT and then com-
putes s = H1(R, M ) and r = H2(R). It then computes
(C1,D1), . . . ,(C(cid:96),D(cid:96)) as in the CPA-secure construction
of Figure 5 (except that s is no longer chosen randomly
as part of (cid:126)v). The ciphertext is published as CT =
C = R· e(g,g)αs, C(cid:48) = gs, C(cid:48)(cid:48) = M ⊕ r,
(C1,D1), . . . ,(C(cid:96),D(cid:96))
along with a description of access structure (M,ρ).
Transformrcca(TK,CT). The transformation algorithm
recovers the value e(g,g)sα/z as before.
It outputs the
partially decrypted ciphertext CT(cid:48) as (C,C(cid:48)(cid:48),e(g,g)sα/z).
Decryptrcca(SK,CT). The decryption algorithm takes
as input a private key SK = (z,TK) and a ciphertext CT.
If the ciphertext is not partially decrypted, then the algo-
rithm ﬁrst executes Transformout(TK,CT). If the output
is ⊥, then this algorithm outputs ⊥ as well. Otherwise, it
takes the ciphertext (T0,T1,T2) and computes R = T0/T z
2 ,
M = T1⊕H2(R), and s = H1(R, M ). If T0 = R·e(g,g)αs
and T2 = e(g,g)αs/z, it outputs M ; otherwise, it outputs
the error symbol ⊥.
Setup(λ ,U). The setup algorithm takes as input a security parameter and a universe description U. To cover the most general
case, we let U = {0,1}∗. It then chooses a group G of prime order p, a generator g and a hash function F that maps {0,1}∗
to G.a In addition, it chooses random exponents α,a ∈ Zp. The authority sets MSK = (gα ,PK) as the master secret key. It
publishes the public parameters as:
PK = g, e(g,g)α , ga, F
Encrypt(PK, M ,(M,ρ)) The encryption algorithm takes as input the public parameters PK and a message M to encrypt. In
addition, it takes as input an LSSS access structure (M,ρ). The function ρ associates rows of M to attributes. Let M be an
(cid:96) × n matrix. The algorithm ﬁrst chooses a random vector (cid:126)v = (s,y2, ...,yn) ∈ Zn
p. These values will be used to share the