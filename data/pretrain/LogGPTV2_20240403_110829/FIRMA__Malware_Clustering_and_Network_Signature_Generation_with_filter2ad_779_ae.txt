rameter value, which FIRMA currently does not support. However, FIRMA ﬁnds that
all requests for the family have a common User-Agent value, missed by the analysts.
The family for which FIRMA generates less signatures has 3 manual signatures.
The only signature generated by FIRMA matches exactly one of the manual ones. The
other manual signatures match one binary each. This is an instance of the manual an-
alysts selecting a behavior speciﬁc to a variant that does not generalize to others. We
manually classify the 20 families with the same number of signatures into 3 groups:
M alert tcp any any -> any [80] (msg:"Cluster:1"; content:"/picture.php";)
A alert tcp any any -> any [80] (msg:"Cluster:1"; content:"GET";
http_method; content:"/picture.php"; http_uri;)
17
M alert tcp any any -> any [80] (msg:"Cluster:2"; content:"POST";
http_method; content:"pcre:"/aa1020R0=[ˆ&]+%2/";)
A alert tcp any any -> any [80] (msg:"Cluster:2"; content:"POST";
http_method; content:"aa1020R0="; content:"|253344253044253041|";)
M alert tcp any any -> any [80] (msg:"Cluster:3"; content:"GET";
http_method; content:"/n09230945.asp"; http_uri;)
A alert tcp any any -> any [42633] (msg:"Cluster:3"; dsize:5;
content:"|6e65770d0a|";)
M alert tcp any any -> any any (msg:"Cluster:4";
content:"|04000001050000000007000100|";)
A alert tcp any any -> any [443,8014] (msg:"Cluster:4"; dsize:13;
content:"|04000001050000000007000100|";)
A alert tcp any any -> any [9145] (msg:"Cluster:4"; dsize:181;
content:"GNUTELLA CONNECT/0.6|0d0a|Listen-IP|3a|0.0.0.0|3a|22324|0d0a|
Remote-IP|3a| 31.35.6.6|0d0a|User-Agent|3a| Shareaza|0d0a|";)
Fig. 4. Comparison of signatures manually (M) and automatically (A) generated by FIRMA. For
simplicity, metadata has been removed and family names have been normalized.
for 12 FIRMA generates signatures that are more speciﬁc, 5 have identical signatures,
and for 3 the manual signatures are more speciﬁc. In general FIRMA produces more
speciﬁc signatures because the analysts tend to stop adding tokens when they feel the
signature is speciﬁc enough. There are two cases where the manual signatures are more
speciﬁc. For URL parameters, FIRMA generates a token set while the manual signa-
tures sometimes use a regular expression, which imposes an ordering constraint and
may limit the size of parameter values. In addition, some manual signatures capture the
lack of HTTP headers. For example, one of the cleaman signatures captures that the
requests from this family do not have a User-Agent or Accept header, which typically
appear in HTTP requests. While the automatically generated signatures are still speciﬁc
enough without these two features, we plan to support them in the future.
Figure 4 compares some manually generated signatures (M) with the corresponding
ones generated by FIRMA (A). The signatures for Cluster 1 are very similar, but the
manual one misses the GET method and the ﬁeld attributes. This illustrates inconsis-
tencies in manual signatures that FIRMA prevents. In Cluster 2 the manual signature
uses a regular expression, but the equivalent signature by FIRMA is more speciﬁc and
faster to match since it uses no regular expression. The manual signature for Cluster 3
captures trafﬁc to the whatismyip.com web service that the malware uses for checking
its public IP address. This signature can produce false positives in live trafﬁc. Instead,
the signature by FIRMA captures a 5-byte binary packet on port 42633, missed by the
analysts. Finally, Cluster 4 shows one of the families for which FIRMA ﬁnds an extra
signature that captures a new network behavior (Gnutella P2P trafﬁc).
Overall, our qualitative evaluation shows that the signatures generated by FIRMA
are of similar, and often better, quality than the ones we manually generated. Of course,
more experienced analysts would generate better manual signatures. However, FIRMA
provides a combined solution to the problems of malware clustering and network sig-
nature generation that signiﬁcantly reduces the amount of effort required of analysts.
To facilitate external review of our signatures and enable other groups to compare
their results to ours, we plan to release a new version of the MALICIA dataset that adds
the manually generated signatures and the ones produced by FIRMA.
18
7 Related Work
A number of prior works propose systems to automatically generate different types
of network signatures to identify worm trafﬁc. Honeycomb [20], Autograph [18], and
EarlyBird [32] propose signatures comprising a single contiguous string (i.e., token).
Polygraph [25] proposes more expressive token set, token subsequence, and probabilis-
tic Bayes signatures. Wang et al. extend PAYL [37] to generate token subsequence
signatures for content common to ingress and egress trafﬁc. Nemean [41] introduces
semantics-aware signatures and Hamsa [22] generates token set signatures that can han-
dle some noise in the input trafﬁc pool. Beyond worms, Botzilla [29] generates signa-
tures for the trafﬁc produced by a malware binary run multiple times in a controlled
environment. All these works assume a single malware family or small amounts of
noise in the input trafﬁc. In contrast, FIRMA handles input trafﬁc from many malware
families with multiple network behaviors.
Recently, ProVex [30] proposes signatures to detect fully polymorphic C&C trafﬁc
given the decryption function and keys used by the malware, which can be extracted
with binary analysis [6]. FIRMA can be used to quickly identify such trafﬁc but can-
not generate signatures for it. Also related are AutoRE [40], which builds URL regular
expression signatures from emails to identify spam botnets and ShieldGen [9], which
produces protocol-aware network signatures for vulnerabilities. Wurzinger et al. [38]
detect comprised hosts by monitoring the reaction from a host to a received command
using network signatures. Compared to FIRMA they do not address how to cluster traf-
ﬁc from different malware binaries. The signatures produced by FIRMA are matched
by off-the-self IDSes and techniques to improve the efﬁciency of signature matching
are also related [35].
There has also been extensive work on behavioral classiﬁcation techniques for mal-
ware using a variety of features such as system calls, system changes, network trafﬁc,
and screenshots [3–5, 12, 13, 26, 28]. Most related to FIRMA are techniques that fo-
cus on network trafﬁc. Botminer [13] clusters similar bot trafﬁc for building detection
proﬁles but does not generate network signatures. Perdisci et al. [26] cluster malware
that uses HTTP trafﬁc using sending proﬁles and features on the HTTP method and
URL. They also build token subsequence signatures that cover the request method and
the URL. In contrast, FIRMA clusters malware using all trafﬁc it produces. For HTTP
trafﬁc, in addition to the method and the URL FIRMA also analyzes the content of the
headers and the body and includes them in the signatures. Also related to our work are
techniques to reduce the dimensionality in malware clustering [16] and proposals to
evaluate malware clustering results using AV labels [27].
8 Conclusion
We have presented FIRMA, a tool that given a large pool of network trafﬁc obtained
by executing unlabeled malware binaries, generates a clustering of the malware bina-
ries into families and a set of of network signatures for each family. FIRMA produces
network signatures for each of the network behaviors of a family, regardless of the type
of trafﬁc the malware uses. It efﬁciently generates protocol-aware token-set signatures,
19
which capture distinguishing characteristics in any of the ﬁelds of the requests. We have
implemented FIRMA and evaluated it on two recent datasets comprising nearly 16,000
unique malware binaries. Our results show that the clustering produced by FIRMA has
very high precision and recall. We compare FIRMA’s signatures with manually gener-
ated ones, showing that they are of similar quality (often better), while offering large
savings in analyst resources.
Acknowledgements. We would like to thank James Newsome for providing us with
the code for Polygraph and Antonio Nappa for his help with the MALICIA dataset.
We are also thankful to Corrado Leita and the anonymous reviewers for their insightful
comments. This work was supported in part by the European Union through Grant
FP7-ICT No.256980, by the Spanish Government through Grant TIN2012-39391-C04-
01, and a Juan de la Cierva Fellowship for Juan Caballero. Opinions expressed in this
material are those of the authors and do not necessarily reﬂect the views of the sponsors.
References
1. M. I. Abouelhoda, S. Kurtz, and E. Ohlebusch. Replacing sufﬁx trees with enhanced sufﬁx
arrays. Journal of Discrete Algorithms, 2(1), 2004.
2. Anubis: Analyzing unknown binaries. http://anubis.iseclab.org/.
3. M. Bailey, J. Oberheide, J. Andersen, Z. Mao, F. Jahanian, and J. Nazario. Automated clas-
siﬁcation and analysis of internet malware. In RAID, 2007.
4. U. Bayer, P. M. Comparetti, C. Hlauschek, C. Kruegel, and E. Kirda. Scalable, behavior-
based malware clustering. In NDSS, 2009.
5. J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring pay-per-install: The commodi-
tization of malware distribution. In USENIX Security, 2011.
6. J. Caballero, N. M. Johnson, S. McCamant, and D. Song. Binary code extraction and inter-
face identiﬁcation for security applications. In NDSS, 2010.
7. J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol
message format using dynamic binary analysis. In CCS, 2007.
8. V. Chvatal. A greedy heuristic for the set-covering problem. Mathematics of Operations
Research, 4(3), 1979.
9. W. Cui, M. Peinado, H. J. Wang, and M. Locasto. ShieldGen: Automatic data patch genera-
tion for unknown vulnerabilities with informed probing. In S&P, 2007.
10. H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer. Dynamic application-layer
protocol analysis for network intrusion detection. In USENIX Security, 2006.
11. M. Graziano, C. Leita, and D. Balzarotti. Towards network containment in malware analysis
systems. In ACSAC, 2012.
12. C. Grier et al. Manufacturing compromise: The emergence of exploit-as-a-service. In CCS,
2012.
13. G. Gu, R. Perdisci, J. Zhang, and W. Lee. Botminer: Clustering analysis of network trafﬁc
for protocol and structure independent botnet detection. In USENIX Security, 2008.
14. F. Guo, P. Ferrie, and T.-C. Chiueh. A study of the packer problem and its solutions. In
RAID, 2008.
15. P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS: Automated construction of applica-
tion signatures. In MineNet, 2005.
16. J. Jang, D. Brumley, and S. Venkataraman. Bitshred: Feature hashing malware for scalable
triage and semantic analysis. In CCS, 2011.
20
17. J. P. John, A. Moshchuk, S. D. Gribble, and A. Krishnamurthy. Studying spamming botnets
using Botlab. In NSDI, 2009.
18. H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detec-
tion. In USENIX Security, 2004.
19. E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kemmerer. Behavior-based spyware
detection. In USENIX Security, 2006.
20. C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection signatures using
honeypots. In HotNets, 2003.
21. C. Kreibich, N. Weaver, C. Kanich, W. Cui, and V. Paxson. GQ: Practical containment for
measuring modern malware systems. In IMC, 2011.
22. Z. Li, M. Sanghi, B. Chavez, Y. Chen, and M.-Y. Kao. Hamsa: Fast signature generation for
zero-day polymorphic worms with provable attack resilience. In S&P, 2006.
23. The malicia project. http://malicia-project.com/.
24. A. Nappa, M. Z. Raﬁque, and J. Caballero. Driving in the cloud: An analysis of drive-by
download operations and abuse reporting. In DIMVA, 2013.
25. J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for
polymorphic worms. In S&P, 2005.
26. R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of http-based malware and
signature generation using malicious network traces. In NSDI, 2010.
27. R. Perdisci and M. U. Vamo: Towards a fully automated malware clustering validity analysis.
In ACSAC, 2012.
28. K. Rieck, T. Holz, C. Willems, P. D¨ussel, and P. Laskov. Learning and classiﬁcation of
malware behavior. In DIMVA, 2008.
29. K. Rieck, G. Schwenk, T. Limmer, T. Holz, and P. Laskov. Botzilla: Detecting the phoning
home of malicious software. In ACM Symposium on Applied Computing, 2010.
30. C. Rossow and C. J. Dietrich. Provex: Detecting botnets with encrypted command and
control channels. In DIMVA, 2013.
31. C. Rossow, C. J. Dietrich, H. Bos, L. Cavallaro, M. van Steen, F. C. Freiling, and
N. Pohlmann. Sandnet: Network trafﬁc analysis of malicious software. In BADGERS, 2011.
32. S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm ﬁngerprinting. In OSDI,
2004.
33. Snort. http://www.snort.org/.
34. Suricata. http://suricata-ids.org/.
35. N. Tuck, T. Sherwood, B. Calder, and G. Varghese. Deterministic memory-efﬁcient string
matching algorithms for intrusion detection. In INFOCOM, 2004.
36. M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C. Snoeren, G. M. Voelker, and
In
S. Savage. Scalability, ﬁdelity, and containment in the Potemkin virtual honeyfarm.
SOSP, 2005.
37. K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm detection and signature
generation. In RAID, 2005.
38. P. Wurzinger, L. Bilge, T. Holz, J. Goebel, C. Kruegel, and E. Kirda. Automatically generat-
ing models for botnet detection. In ESORICS, 2009.
39. J. Wyke.
The zeroaccess botnet, 2012.
http://www.sophos.com/en-us/
why-sophos/our-people/technical-papers/zeroaccess-botnet.
aspx.
40. Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, and I. Osipkov. Spamming botnets: Sig-
natures and characteristics. In SIGCOMM, 2008.
41. V. Yegneswaran, J. T. Gifﬁn, P. Barford, and S. Jha. An architecture for generating semantics-
aware signatures. In USENIX Security, 2005.
42. H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide
information ﬂow for malware detection and analysis. In CCS, 2007.