### 我的CS笔记之 - In-memory Evasion 3

#### 0x00 前言
在前两部分中，我们探讨了检测手法和Cobalt Strike（CS）payload的加载细节。本部分将重点讨论如何通过CS自身的C2配置文件来改变payload的加载行为，以实现逃逸。当前这些对抗手段已成为标配，攻防对抗是一个逐步升级的过程。如果连基本措施都没有做好，就去追求更高级的对抗技术，显然是不切实际的。我们应该循序渐进。

#### 0x01 普通逃逸和CS的相关配置
In-memory Evasion 3中的逃逸策略主要围绕In-memory Evasion 1中提到的三个方面展开：线程开始地址异常、内存权限异常和内存内容异常。

##### 回顾异常指标
1. **线程开始地址异常**
   - **攻击程序**：通常申请一块内存，写入恶意代码，并使用`CreateThread`执行该内存地址指针。
   - **正常程序**：创建一个函数并使用`CreateThread`执行该函数。因此，模仿这种行为可以减少异常。
   
2. **远程线程**
   - 通过劫持已存在的线程比直接修改线程开始地址更为隐蔽（如使用`SetThreadContext`）。
   - 使用`LoadLibrary`导入一个现有的DLL，然后在内存中替换为恶意代码，再使用`CreateRemoteThread`启动线程，这样看起来像是在执行硬盘上存在的正常DLL。

3. **内存权限异常**
   - 避免使用RWX权限。
   - 映射页权限应合理（如映射一个DLL并覆盖其内存）。

4. **内存内容异常**
   - 不要让内存内容看起来像一个DLL（除非这是预期的情况）。
   - 混淆和删除可能被用于分析的字符串。
   - 在代码不使用时混淆内存。

##### CS中的相关对抗方法
1. **线程开始地址异常**
   - 使用EXE或DLL artifacts。
   - 使用Process Hollowing（如x64->x86, x64->x64），CS的Post-exploitation jobs已经实现了这一点。
   - 避免注入到已存在的远程进程中。

2. **内存权限异常**
   - 避免使用artifacts（参见上一篇中的表），它们使用RWX权限。
   - 避免使用stagers（避免分阶段加载）。
   - 在C2 profile中设置`userwx`为`false`。

3. **内存内容异常**
   - 在beacon前后增加花指令。
   - 替换各种可能被作为特征的字符串。
   - 嵌入任意字符串。
   - 编辑PE头。
   - 开启混淆。

##### 检测配置效果
完成上述配置后，可以通过以下步骤检测效果：
- 使用`Attacks -> Packages -> Windows EXE(s)`，选择raw输出格式。
- 使用以下命令查看配置前后的差异：
  ```sh
  strings -e beacon.bin
  strings beacon.bin
  hexdump -C beacon.bin
  ```

以上是常规的对抗规避手法。仅靠这些措施目前来看还不足以完全逃避检测，还需要更多的其他手段才能在当前的对抗环境中生存。

#### 0x02 进程上下文和Session Prepping
进程链（也称为进程树）的异常也是防御软件常用的一种查杀手法。例如，`word.exe`启动`powershell.exe`或`cmd.exe`，这种父子进程关系容易被防御软件阻断。

##### 提升进程信誉度的方法
1. **数字证书**：使用可信的父进程。
2. **避免使用常见的攻击进程**：如`rundll32`，这个进程已经被滥用。

##### Session Prepping
Session Prepping是指派生一个新进程，并通过以下操作使其看起来正常：
- 使用`ps`命令查看当前电脑的进程情况。
- 使用`ppid`指定一个父进程。
- 使用`spawnto [arch] [path]`改变CS的模板进程。

例如，模板进程为`werfault.exe`，父进程为`explorer.exe`，可以在`spawnto`时指定模板进程参数：
```sh
spawnto x64 c:\windows\sysnative\werfault.exe -u -p
```
这考验的是对异常进程链和正常进程链的理解。即使触发拦截被杀，你还有其他session可用。这与测试WAF的思想类似，不要在漏洞点上测试WAF，选择其他地方测试，测试完毕后再利用漏洞点。

最后，作者提供了一张CS中Artifacts的异常指标图，供大家参考。

#### 0x03 总结
作者给出了使用CS的一些建议：
- 扩展PE。
- 给Beacon.dll添加NOP填充。
- 修改可能被特征化的字符串。
- 删除混淆PE中的字符串。
- 稍微改变Reflective DLL的导入方式。
- 导出raw payload进行静态分析。
- 避免线程没有模块支持。
- 避免使用RWX权限的内存页。
- 使用OPSEC的artifacts。
- 避免分阶段加载（使用不分段的方式）。
- 使用Session Prepping作为攻击进程。
- 限制使用post-ex相关功能。

Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily  
No. 1 / 4 - Welcome to www.red-team.cn  
No. 2 / 4 - Welcome to www.red-team.cn  
No. 3 / 4 - Welcome to www.red-team.cn  
No. 4 / 4 - Welcome to www.red-team.cn