我的CS笔记之- In-memory Evasion 3
0x00 前言
前2部分，讲了侦测手法、CS payload的加载细节，这一部分主要讲怎么逃逸了，主要是使用CS自身的
C2profile来改变payload的加载行为。目前看来这些对抗手段已经是标配了，攻防对抗是一个水涨船高
的过程，标配都没搞好，天天去搞更强的对抗，就有点浮夸，我们一步一步来。
0x01 普通逃逸和CS的相关配置
在In-memory Evasion 3中逃逸主要还是围绕着In-memory Evasion 1中的3个部分展开：
我们先来回顾异常指标
线程开始地址异常
当前进程
公鸡程序常常是申请一个内存，写入公鸡代码，然后使用createThread执行这个内存地
址指针
正常程序是，创建一个函数，createThread执行这个函数，因此模仿就好了
远程线程
通过劫持一个已经存在的线程、比修改线程开始地址好（SetTheadContext）
通过LoadLibrary导入一个存在的DLL，然后在内存中替换从我们的公鸡代码，使用
CreateRemoteThread启动线程，这样看起来你似乎是在执行一个硬盘存在的正常dll
内存权限异常
避免RWX
映射页权限看上去是很合理的（映射一个DLL，并且覆盖它的内存）
内存内容异常
不要看起来像一个DLL（除非这个DLL是程序预期的情况）
混淆和删除可能被用于分析的字符串
混淆内存当代码不被使用的时候
在CS中的相关对抗方法
线程开始地址异常
使用EXE、DLL artifacts
使用Process Hollowing(x64->x86, x64->x64)，CS的Post-exploitation jobs已经这样做了
避免注入到存在的远程进程
内存权限异常
避免使用artifacts（cs中哪些是artifacts，看上一篇中的表），它使用RWX权限
避免使用stagers（避免使用cs中分阶段的加载）
在C2profile中配置userwx为false
内存内容异常
在beacon的前后增加花指令
替换各种可能被作为特征的字符串
嵌入任意字符串
编辑PE头
开启混淆
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 1 / 4 - Welcome to www.red-team.cn
最后配置好了以上修改，我们怎么来检测我们配置的效果呢？Attacks -> Packages -> Windows EXE(s) 
，使用raw的输出格式。然后使用一下3种命令都可以查看，我们可以对比配置前和配置后。
以上是常规的对抗规避手法，如果仅仅只是做好以上的，目前来看是，不做一定被杀，做了也不一定能
免杀，还需要更多的其他手段，才能在目前的对抗环境下生存。
0x02 进程上文和Session Prepping
进程链（也叫进程树）的异常也是被防御软件采用的一种查杀手法。这个很多小伙伴多多少少都是听说
过的，例如word.exe起一个powershell.exe或者cmd.exe，这个父子经常就容易被防御软件阻断。
那么如何来提升进程的信誉度呢？作者给出了一下几个方法：
数字证书
一个可信的父进程
不要用一个经常在攻击行动种出现的进程，例如rundll32，这个都快被用烂了。
Session Prepping这个我也不知道怎么翻译，意思是派生一个新进程，通过以下操作，让这个新进程看
上去很正常：
使用ps命令查看当前电脑的进程情况
使用ppid指定一个父进程
使用spawnto [arch] [path] 改变cs的模板进程
这考验的就是个人对异常进程链和正常进程链的理解了，例如你模板进程是werfault.exe，父进程是
explorer.exe，我们知道了父进程的pid，在spawnto指定模板进程的使用给werfault.exe加上参数：
这样看起来就比较正常，尽量模仿正常的进程树就行了，各种细节到位。这除了伪造以外，作者还想表
达一个思想，就是用派生进程执行攻击，即使触发拦截被杀，你还有其他session，他举例了他们团队的
小伙伴就是没有派生进程，导致立柱点掉了。这个和测waf一个思想，你不要再漏洞点上测waf，选一个
其他地方测试，测试完了再去漏洞点利用。
最后作者给了一张CS里面Artifacts的异常指标图，大家使用的时候可以对照下。
strings -e |beacon.bin
strings beacon.bin
hexdump -C beacon.bin
spawnto x64 c:\windows\sysnative\werfault.exe -u -p 
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 2 / 4 - Welcome to www.red-team.cn
0x03 总结
最后作者给了一个使用cs的建议：
扩展PE
给Beacon.dll搞点前后填充用NOP
修改各种可能被特征的字符串
删除混淆PE里面的字符串
稍微改变一下Reflective DLL的导入进程的方式
OPSEC Review
导出raw playload静态分析下
避免线程没有模块支持
避免RWX权限的内存页
用CS的注意
用OPSEC的artifacts
避免分阶段加载（用不分解段）
用session prepping作为攻击进程
限制使用post-ex相关功能
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 3 / 4 - Welcome to www.red-team.cn
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 4 / 4 - Welcome to www.red-team.cn