### Improved Text

#### The `postMessage` API and Frame Communication

The browser is free to deliver a message to any principal if the sender specifies a target origin of `*`. Using this enhanced API, a frame can reply to a message with the following code:

```javascript
window.onmessage = function(e) {
  if (e.origin === "https://b.com") {
    e.source.postMessage("secret", e.origin);
  }
};
```

In this example, the API uses the same origin syntax for both sending and receiving messages. The scheme (HTTP or HTTPS) is included in the origin, allowing developers to distinguish between secure and insecure connections, thereby defending against active network attackers. We implemented this API change as patches for Safari and Firefox. Our proposal was accepted by the HTML5 Working Group [17]. The new API is now included in Firefox 3 [38], Safari [32], and Internet Explorer 8 [25].

### Related Work

#### Mitigations for Gadget Hijacking

SMash [22] mitigates gadget hijacking (referred to as "frame phishing" by the authors) without modifying the browser by carefully monitoring the frame hierarchy and browser events for signs of unexpected navigation. Neither the integrator nor the gadget can prevent these navigations, but the mashup can alert the user and refuse to function if it detects an illicit navigation. This approach allows an attacker to mount a denial-of-service attack against the mashup, but a web attacker can already mount such an attack against the entire browser by issuing a blocking `XMLHttpRequest` or entering an infinite loop.

Unfortunately, this approach can lead to false positives. SMash waits 20 seconds for a gadget to load before assuming that the gadget has been hijacked and warning the user. An attacker might be able to fool the user into entering sensitive information during this time interval. Using a shorter time interval might cause users with slow network connections to receive warnings even though no attack is in progress. We expect that the deployment of the descendant policy will obviate the need for server-enforced gadget hijacking mitigations.

#### Safe Subsets of HTML and JavaScript

One way to sidestep the security issues of frame-based mashups is to avoid using frames entirely and render the gadgets together with the integrator in a single document. This approach forgoes the protections of the browser’s security policy because all the gadgets and the integrator share a single browser security context. To maintain security, this approach requires gadgets to be written in a "safe subset" of HTML and JavaScript that prevents a malicious gadget from attacking the integrator or other gadgets. Analyzing the security and usability of these subsets is an active area of research. Several open-source [13, 4] and closed-source [31, 10] implementations are available. FBML [10] is currently the most successful of these subsets and is used by millions of users as the foundation of the Facebook Platform.

Writing programs in one of these safe subsets is often awkward because the language is highly constrained to avoid potentially dangerous features. To improve usability, the safe subsets are often accompanied by a compiler that transforms untrusted HTML and JavaScript into the subset, possibly at the cost of performance. These safe subsets will become easier to use over time as these compilers become more sophisticated and more libraries become available. However, with the deployment of `postMessage` and the descendant policy, we expect that frame-based mashup designs will continue to find wide use.

#### Other Frame Isolation Proposals

There are several other proposals for frame isolation and communication:

- **Subspace**: In Subspace [21], a multi-level hierarchy of frames coordinates their `document.domain` property to communicate directly in JavaScript. Similar to most frame-based mashups, the descendant frame navigation policy is required to prevent gadget hijacking.
- **Module Tag**: The proposed `<module>` tag [5] is similar to an `<iframe>` tag, but the module runs in an unprivileged security context, without a principal, and the browser prevents the integrator from overlaying content on top of the module. Unlike `postMessage`, the communication primitive used with the module tag is intentionally unauthenticated: it does not identify the sender of a message. It is unknown whether navigation can be used to intercept messages, as there are no implementations of the `<module>` tag.
- **Security=Restricted and Jail**: Internet Explorer supports a `security` attribute [26] of frames that can be set to `restricted`. With `security="restricted"`, the frame's content cannot run JavaScript. The proposed `<jail>` tag [8] encloses untrusted content and prevents the sandboxed content from running JavaScript. However, eliminating JavaScript prevents gadgets from offering interactive experiences.
- **MashupOS**: Our MashupOS proposal [39] includes new primitives for isolating web content while allowing secure communication. Our improvements to `postMessage` and frame navigation policies allow web authors to obtain some of the benefits of MashupOS using existing web APIs.

### Conclusions

Web browsers provide a platform for web applications. These applications rely on the browser to isolate frames from different security origins and to provide secure inter-frame communication. To provide isolation, browsers implement a number of security policies, including a frame navigation policy. The original frame navigation policy, the permissive policy, admits a number of attacks. The modern frame navigation policy, the descendant policy, prevents these attacks by permitting one frame to navigate another only if the frame could draw over the other frame’s region of the screen. The descendant policy provides an attractive trade-off between security and compatibility, is deployed in major browsers, and has been standardized in HTML5.

In existing browsers, frame navigation can be used as an inter-frame communication channel with a technique known as fragment identifier messaging. If used directly, the fragment identifier channel lacks authentication. To provide authentication, Windows.Live.Channels, SMash, and OpenAjax 1.1 use messaging protocols. These protocols are vulnerable to attacks on authentication but can be repaired in a manner analogous to Lowe’s variation of the Needham-Schroeder protocol [23].

The `postMessage` communication channel suffered the converse security vulnerability: using frame navigation, an attacker can breach the confidentiality of the channel. We propose providing confidentiality by extending the `postMessage` API to let the sender specify an intended recipient. Our proposal was adopted by the HTML5 Working Group, Internet Explorer 8, Firefox 3, and Safari.

With these improvements to the browser’s isolation and communication primitives, frames are a more attractive feature for integrating third-party web content. Two challenges remain for mashups incorporating untrusted content. First, a gadget is permitted to navigate the top-level frame and can redirect the user from the mashup to a site of the attacker’s choice. This navigation is made evident by the browser’s location bar, but many users ignore the location bar. Improving the usability of the browser’s security user interface is an important area of future work. Second, a gadget can subvert the browser’s security mechanisms if the attacker employs a browser exploit to execute arbitrary code. A browser design that provides further isolation against this threat is another important area of future work.

### Acknowledgments

We thank Mike Beltzner, Sumeer Bhola, Dan Boneh, Gabriel E. Corvera, Ian Hickson, Koji Kato, Eric Lawrence, Erick Lee, David Ross, Maciej Stachowiak, Hallvord Steen, Peleus Uhley, Jeff Walden, Sam Weinig, and Boris Zbarsky for their helpful suggestions and feedback. This work is supported by grants from the National Science Foundation and the US Department of Homeland Security.

### References

[References listed here]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.