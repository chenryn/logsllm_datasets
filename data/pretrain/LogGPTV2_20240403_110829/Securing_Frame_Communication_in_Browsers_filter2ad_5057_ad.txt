The browser is free to deliver the message to any prin-
cipal if the sender speciﬁes a target origin of *. Using
this improved API, a frame can reply to a message using
the following idiom:
window.onmessage = function(e) {
if (e.origin == "https://b.com")
e.source.postMessage(secret,
e.origin);
};
As shown in this example use, the API uses the same
origin syntax for both sending and receiving messages.
The scheme is included in the origin for those develop-
ers who wish to defend against active network attackers
by distinguishing between HTTP and HTTPS. We imple-
mented this API change as a patch for Safari and a patch
for Firefox. Our proposal was accepted by the HTML 5
working group [17]. The new API is now included in
Firefox 3 [38], Safari [32], and Internet Explorer 8 [25].
5 Related Work
Mitigations for Gadget Hijacking. SMash [22] mit-
igates gadget hijacking (which the authors refer to as
“frame phishing”) without modifying the browser by
carefully monitoring the frame hierarchy and browser
events for evidence of unexpected navigation. Neither
the integrator nor the gadget can prevent these naviga-
tions, but the mashup can alert the user and refuse to
function if it detects an illicit navigation. This approach
lets an attacker mount a denial-of-service attack against
the mashup, but a web attacker can already mount a
denial-of-service attack against the entire browser by is-
suing a blocking XMLHttpRequest or entering an in-
ﬁnite loop.
USENIX Association  
17th USENIX Security Symposium 
 7
Unfortunately, this approach can lead to false posi-
tives. SMash waits 20 seconds for a gadget to load before
assuming that the gadget has been hijacked and warning
the user. An attacker might be able to fool the user into
entering sensitive information during this time interval.
Using a shorter time interval might cause users with slow
network connections to receive warnings even though no
attack is in progress. We expect that the deployment of
the descendant policy will obviate the need for server-
enforced gadget hijacking mitigations.
Safe Subsets of HTML and JavaScript. One way to
sidestep the security issues of frame-based mashups is to
avoid using frames entirely and render the gadgets to-
gether with the integrator in a single document. This
approach forgoes the protections of the browser’s se-
curity policy because all the gadgets and the integra-
tor share a single browser security context. To main-
tain security, this approach requires gadgets to be writ-
ten in a “safe subset” of HTML and JavaScript that pre-
vents a malicious gadget from attacking the integrator or
other gadgets. Analyzing the security and usability of
these subsets is an active area of research. Several open-
source [13, 4] and closed-source [31, 10] implementa-
tions are available. FBML [10] is currently the most suc-
cessful of these subsets and is used by millions of users
as the foundation of the Facebook Platform.
Writing programs in one of these safe subsets is often
awkward because the language is highly constrained to
avoid potentially dangerous features. To improve usabil-
ity, the safe subsets are often accompanied by a com-
piler that transforms untrusted HTML and JavaScript
into the subset, possibly at the cost of performance.
These safe subsets will become easier to use over time
as these compilers become more sophisticated and more
libraries become available, but with the deployment of
postMessage and the descendant policy, we expect
that frame-based mashup designs will continue to ﬁnd
wide use as well.
Other Frame Isolation Proposals. There are several
other proposals for frame isolation and communication:
• Subspace.
In Subspace [21], we used a multi-
level hierarchy of frames that coordinated their
document.domain property to communicate di-
rectly in JavaScript. Similar to most frame-based
mashups, the descendant frame navigation policy is
required to prevent gadget hijacking.
• Module Tag. The proposed  tag [5]
is similar to an  tag, but the module
runs in an unprivileged security context, without a
principal, and the browser prevents the integrator
from overlaying content on top of the module. Un-
like postMessage, the communication primitive
used with the module tag is intentionally unauthen-
ticated: it does not identify the sender of a message.
It is unknown whether navigation can be used to in-
tercept messages as there are no implementations of
the  tag.
Similarly,
• Security=Restricted and Jail.
Internet Ex-
plorer supports a security attribute [26] of
frames that can be set to restricted. With
the frame’s con-
security="restricted",
tent cannot run JavaScript.
the pro-
posed  tag [8] encloses untrusted content
and prevents the sandboxed content from running
JavaScript. However, eliminating JavaScript pre-
vents gadgets from offering interactive experiences.
• MashupOS. Our MashupOS proposal [39] includes
new primitives for isolating web content while al-
lowing secure communication. Our improvements
to postMessage and frame navigation policies
allow web authors to obtain some of the beneﬁts of
MashupOS using existing web APIs.
6 Conclusions
Web browsers provide a platform for web applica-
tions. These applications rely on the browser to isolate
frames from different security origins and to provide se-
cure inter-frame communication. To provide isolation,
browsers implement a number of security policies, in-
cluding a frame navigation policy. The original frame
navigation policy, the permissive policy, admits a number
of attacks. The modern frame navigation policy, the de-
scendant policy, prevents these attacks by permitting one
frame to navigate another only if the frame could draw
over the other frame’s region of the screen. The descen-
dant policy provides an attractive trade-off between secu-
rity and compatibility, is deployed in the major browsers,
and has been standardized in HTML 5.
In existing browsers, frame navigation can be used as
an inter-frame communication channel with a technique
known as fragment identiﬁer messaging. If used directly,
the fragment identiﬁer channel lacks authentication. To
provide authentication, Windows.Live.Channels,
SMash, and OpenAjax 1.1 use messaging protocols.
These protocols are vulnerable to attacks on authentica-
tion but can be repaired in a manner analogous to Lowe’s
variation of the Needham-Schroeder protocol [23].
The postMessage communication channel suffered
the converse security vulnerability: using frame navi-
gation, an attacker can breach the conﬁdentiality of the
channel. We propose providing conﬁdentiality by ex-
tending the postMessage API to let the sender specify
17th USENIX Security Symposium 
USENIX Association


an intended recipient. Our proposal was adopted by the
HTML 5 working group, Internet Explorer 8, Firefox 3,
and Safari.
With these improvements to the browser’s isolation
and communication primitives, frames are a more attrac-
tive feature for integrating third-party web content. Two
challenges remain for mashups incorporating untrusted
content. First, a gadget is permitted to navigate the top-
level frame and can redirect the user from the mashup to
a site of the attacker’s choice. This navigation is made
evident by the browser’s location bar, but many users
ignore the location bar. Improving the usability of the
browser’s security user interface is an important area of
future work. Second, a gadget can subvert the browser’s
security mechanisms if the attacker employs a browser
exploit to execute arbitrary code. A browser design that
provides further isolation against this threat is another
important area of future work.
Acknowledgments
We thank Mike Beltzner, Sumeer Bhola, Dan Boneh,
Gabriel E. Corvera,
Ian Hickson, Koji Kato, Eric
Lawrence, Erick Lee, David Ross, Maciej Stachowiak,
Hallvord Steen, Peleus Uhley, Jeff Walden, Sam Weinig,
and Boris Zbarsky for their helpful suggestions and feed-
back. This work is supported by grants from the National
Science Foundation and the US Department of Home-
land Security.
References
[1] Adam Barth et al. Adopt “descendant” frame
navigation policy to prevent frame hijacking.
https://bugzilla.mozilla.org/show_
bug.cgi?id=408052.
[2] Adam Barth and Collin Jackson.
Protecting
browsers from frame hijacking attacks, Decem-
ber 2007. http://crypto.stanford.edu/
frames/.
[3] James Burke. Cross domain frame communication
with fragment identiﬁers.
http://tagneto.blogspot.com/2006/
06/cross-domain-frame-communication
-with.html.
[4] Douglas Crockford. ADsafe: Making JavaScript
safe for advertising. http://adsafe.org/.
[5] Douglas Crockford. The  tag.
http://www.json.org/module.html.
[6] Neil Daswani, Micheal Stoppelman, et al. The
anatomy of Clickbot.A. In Proc. HotBots, 2007.
[7] Rachna Dhamija, J. D. Tygar, and Marti Hearst.
Why phishing works. In CHI ’06: Proceedings of
the SIGCHI conference on human factors in com-
puting systems, 2006.
[8] Brendan Eich.
JavaScript: Mobility and ubiq-
http://kathrin.dagstuhl.de/
uity.
files/Materials/07/07091/07091.
EichBrendan.Slides.pdf.
[9] Facebook. Badges. http://www.facebook.
com/help.php?page=4.
[10] Facebook. Facebook Markup Language (FBML).
http://wiki.developers.facebook.
com/index.php/FBML.
[11] Edward W. Felten, Dirk Balfanz, Drew Dean, and
Dan S. Wallach. Web spooﬁng: An Internet con
game. In Proceedings of the 20th National Infor-
mation Systems Security Conference, 1996.
[12] Flickr API.
http://flickr.com/services/api/.
[13] Google. Caja: A source-to-source translator for
securing JavaScript-based web content. http:
//code.google.com/p/google-caja/.
[14] Google. Google Maps API.
http://code.google.com/apis/maps/.
[15] iGoogle. http://www.google.com/ig.
[16] Georgi Guninski. Frame spooﬁng using loading
two frames.
https://bugzilla.mozilla.org/show_
bug.cgi?id=13871.
[17] Ian Hickson.
Re: A potential slight security
enhancement to postMessage, Februrary 2008.
http://lists.whatwg.org/pipermail/
whatwg-whatwg.org/2008-February/
013949.html.
[18] Ian Hickson.
Re: HTML5 frame navigation
policy, April 2008. http://lists.whatwg.
org/pipermail/whatwg-whatwg.org/
2008-April/014597.html.
[19] Ian Hickson et al. HTML 5 Working Draft.
http://www.whatwg.org/specs/
web-apps/current-work/.
[20] Collin Jackson, Adam Barth, Andrew Bortz, Wei-
dong Shao, and Dan Boneh. Protecting browsers
from DNS rebinding attacks. In Proceedings of of
the 14th ACM Conference on Computer and Com-
munications Security (CCS), 2007.
USENIX Association  
17th USENIX Security Symposium 


[21] Collin Jackson and Helen J. Wang.
Sub-
space: Secure cross-domain communication for
web mashups. In Proceedings of the 16th Interna-
tional World Wide Web Conference. (WWW), 2007.
[22] Frederik De Keukelaere, Sumeer Bhola, Michael
Steiner, Suresh Chari, and Sachiko Yoshihama.
SMash: Secure cross-domain mashups on unmodi-
ﬁed browsers. In Proceedings of the 17th Interna-
tional World Wide Web Conference (WWW), 2008.
[23] Gavin Lowe. Breaking and ﬁxing the Needham-
Schroeder public-key protocol using FDR. In Pro-
ceedings of TACAS, volume 1055. Springer Verlag,
1996.
[24] Henry Mason. No support for MessageEvent in-
terface, 2007. https://bugs.webkit.org/
show_bug.cgi?id=14994.
[25] Microsoft. postMessage method.
http://msdn.microsoft.com/en-us/
library/cc197015(VS.85).aspx.
[26] Microsoft. SECURITY attribute.
http://msdn2.microsoft.com/en-us/
library/ms534622(VS.85).aspx.
[27] Microsoft.
Try the Windows Live Contacts
control. http://dev.live.com/mashups/
trypresencecontrol/.
[28] Microsoft. Windows Live.
http://home.live.com/.
[29] Roger M. Needham and Michael D. Schroeder.
Using encryption for authentication in large net-
works of computers. Communications of the ACM,
21(12):993–999, 1978.
[30] National Institute of Standards and Technology.
CVE-2007-5858, December 2007.
[31] Charlie Reis, John Dunagan, Helen J. Wang, Opher
Dubrovsky, and Saher Esmeir. BrowserShield:
Vulnerability-driven ﬁltering of dynamic HTML.
In 7th Symposium on Operating Systems Design
and Implementation (OSDI), 2006.
[32] Adam Roben
al.
postMes-
et
sage/MessageEvent
to match HTML5 wrt. ex-
posing origin vs. domain/uri. https://bugs.
webkit.org/show_bug.cgi?id=17331.
Change
[33] David Ross, 2008. Personal communication.
[34] J. Ruderman.
JavaScript Security: Same Origin.
http://www.mozilla.org/projects/
security/components/same-origin.
html.
[35] Hallvord Steen, 2008. Personal communication.
[36] Danny Thorpe. Secure cross-domain communi-
cation in the browser. The Architecture Journal,
12:14–18, July 2007.
http://msdn2.microsoft.com/en-us/
library/bb735305.aspx.
[37] Jeff Walden.
Implement HTML5’s cross-
document messaging API (postMessage), 2007–
2008. https://bugzilla.mozilla.org/
show_bug.cgi?id=387706.
[38] Jeff Walden et al.
Update postMessage and
MessageEvent
to reﬂect domain/uri being re-
placed by origin,
optional origin argument.
https://bugzilla.mozilla.org/show_
bug.cgi?id=417075.
[39] Helen J. Wang, Xiaofeng Fan, Jon Howell, and
Collin Jackson. Protection and communication ab-
stractions for web browsers in MashupOS. In Pro-
ceedings of the 21st ACM Symposium on Operating
Systems Principles (SOSP), 2007.
[40] Yahoo! My Yahoo! http://my.yahoo.com/.
 0 
17th USENIX Security Symposium 
USENIX Association