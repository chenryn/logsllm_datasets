0.28
3
QualifiedNameSyntax
System.Console
13.27
4
IdentifierNameSyntax
System
13.19
4
IdentifierNameSyntax
Console
20.27
2
NamespaceDeclarationSyntax
namespace
SyntaxTreeSample ….
32.271
3
IdentifierNameSyntax
SyntaxTreeSample
42.58
3
ClassDeclarationSyntax
public class Program…
103.268
4
MethodDeclarationSyntax
public void Hello…
179.261
5
PredefinedTypeSyntax
void
186.190
5
ParameterListSyntax
（）
196.198
5
BlockSyntax
{ WriteLine（…
208.261
6
ExpressionStatementSyntax
WriteLine（"Hello, …
223.250
7
InvocationExpressionSyntax
WriteLine（"Hello…
223.249
8
IdentifierNameSyntax
WriteLine
223.232
8
ArgumentListSyntax
（"Hello, World! "）
232.249
9
ArgumentSyntax
"Hello, World! "
233.248
10
LiteralExpressionSyntax
"Hello, World! "
233.248
语法节点并不是程序所需的所有内容。程序也需要令牌。例如，示例程序的
NamespaceDe-clarationSyntax包含3个令牌：namespace、{, 
and}。
NamspaceDeclarationSyntax的子节点Identifier-NameSyntax有一个值为SyntaxTreeSample的
令牌，即名称空间的名称。访问修饰符也用令牌定义。ClassDeclarationSyntax定义了5个
令牌：public、class、Program、{, and}。
要在WPF应用程序中显示令牌，定义SyntaxTokenViewModel类，其中包装一个
SyntaxToken（代码文件WPFSyntaxTree / ViewModels / SyntaxTokenViewModel.cs）：
    public class SyntaxTokenViewModel
    {
      public SyntaxTokenViewModel(SyntaxToken syntaxToken)
      {
        SyntaxToken = syntaxToken;
      }
      public SyntaxToken SyntaxToken { get; }
      public string TypeName => SyntaxToken.GetType().Name;
      public override string ToString() => SyntaxToken.ToString();
    }
为了编译程序，需要节点和令牌。要重建源文件，还需要trivia。trivia也定义了空白
和注释。为了显示trivia，定义了SyntaxTriviaViewModel 
（代码文件
WPFSyntaxTree/ViewModels/SyntaxTrivia-ViewModel.cs）：
    public enum TriviaKind
    {
      Leading,
      Trailing,
      Structured,
      Annotated
    }
    public class SyntaxTriviaViewModel
    {
      public SyntaxTriviaViewModel(TriviaKind kind, SyntaxTrivia syntaxTrivia)
      {
        TriviaKind = kind;
        SyntaxTrivia = syntaxTrivia;
      }
      public SyntaxTrivia SyntaxTrivia { get; }
      public TriviaKind TriviaKind { get; }
      public override string ToString() =>
        $"{TriviaKind}, Start: {SyntaxTrivia.Span.Start}, " +
        $"Length: {SyntaxTrivia.Span.Length}: {SyntaxTrivia}";
    }
当运行应用程序时，打开文件HelloWorld.cs，会看到节点树、令牌和trivia，如图18-4
所示。trivia经常包含空白，有时还有注释。
图18-4
18.3.1 使用查询节点
除了访问子节点来遍历所有节点之外，还可以创建查询来查找特定的节点。查询使用
语言集成查询（Language Integrated Query, LINQ）。
  注意： LINQ参见第13章。
示例应用程序是一个控制台应用程序。要创建一个包括NuGet包
Microsoft.CodeAnalysis的控制台应用程序，可以从Extensibility类别Stand-Alone 
Code
Analysis Tool中创建一个项目。显示查询的示例项目命名为SyntaxQuery。
.NET的规则指定，公共或受保护的成员应该以大写字母开头。示例应用程序查询源
文件的所有方法和属性，如果它们不以大写字母开头，就写入控制台。为了查看表明输出
类型的结果，把以下不相容的成员添加到Program类中。在下面的代码片段中，
foobar（）方法应该忽略，因为这个方法没有public访问修饰符，但foo（）方法和bar属性
应该匹配（代码文件SyntaxQuery /Program.cs）：
    public void foo()
    {
    }
    private void foobar()
    {
    }
    public int bar { get; set; }
与前面使用语法API的方式类似，根节点使用类CSharpSyntaxTree和SyntaxTree来检
索：
    static async Task CheckLowercaseMembers()
    {
      string code = File.ReadAllText("../../Program.cs");
      SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
      SyntaxNode root = await tree.GetRootAsync();
      // etc.
为了获得树中根节点后面的所有节点，SyntaxNode类定义了DescendantNodes（）方
法。它返回节点的所有子节点和子节点的子节点。前面例子使用的ChildNodes（）方法只
返回直接的子节点。所得到的节点用OfType（）方法过滤，只返回类型
MethodDeclarationSyntax的节点。MethodDeclarationSyntax是派生自SyntaxNode的一个
类，代表树中的一个节点，该节点是一个方法。可以使用前面的示例WPFSyntaxTree查看
现有源代码的所有节点类型。第一个Where（）方法定义了下一个过滤器。在这里，提取
方法的标识符（方法名），只检索第一个字符。char.IsLower方法用于确定第一个字符是
小写。只有这个表达式是true，过滤器才返回方法节点。这个小写字母检查不满足我们的
需求。同时，只应该返回公共成员。这个过滤器由下一个Where（）方法定义。要检查
public访问修饰符，MethodDeclarationSyntax定义了Modifiers属性。这个属性返回方法的所
有修饰符。Where（）方法检查public修饰符是否属于修饰符列表。应用所有条件的方法
写入控制台。
    // etc.
      var methods = root.DescendantNodes()
        .OfType()
        .Where(m => char.IsLower(m.Identifier.ValueText.First()))
        .Where(m => m.Modifiers.Select(t => t.Value).Contains("public"));
      WriteLine("Public methods with lowercase first character:");
      foreach (var m in methods)
      {
        WriteLine(m.Identifier.ValueText);
      }
      // etc.
检索子元素和父元素的其他方法如下：
● DescendantNodesAndSelf返回调用方法的节点和所有的后代节点。
● DescendantTokens返回所有的后代令牌
● DescendantTrivia返回trivia信息
● Ancestors检索父节点和父节点的父节点
有几个方法是前面列出的方法的组合，如DescendantNodesAndTokensAndSelf。可以
对树中的每个SyntaxNode使用这些方法。
要在相同的条件下检索属性，语法是相似的。只需要获得类型
PropertyDescriptionSyntax的语法节点：
    // etc.
      var properties = root.DescendantNodes()
        .OfType()
        .Where(p => char.IsLower(p.Identifier.ValueText.First()))
        .Where(p => p.Modifiers.Select(t => t.Value).Contains("public"));
      WriteLine("Public properties with lowercase first character:");
      foreach (var p in properties)
      {
        WriteLine(p.Identifier.ValueText);
      }
    }
运行应用程序，会看到以下结果，相应地改变源文件，来实现指导方针：
    Public methods with lowercase first character:
    foo
    Public properties with lowercase first character:
    bar
18.3.2 遍历节点
除了查询之外，另一种方法是基于特定的节点类型，高效地过滤源代码树：语法遍历
器。语法遍历器访问语法树中的所有节点。这意味着在解析语法树时，调用语法遍历器的
不同VisitXXX（）方法。
下一个示例定义了一个语法遍历器，检索所有using指令，显示从指定目录导入所有
C#文件所需的列表。
通过创建一个派生于CSharpSyntaxWalker的类，来创建语法遍历器。类UsingCollector
重写了方法VisitUsingDirective，从语法树中收集所有using指令。传递给该方法的
UsingDirectiveSyntaxNode被添加到集合中（代码文件SyntaxWalker / UsingCollector.cs）：
    class UsingCollector: CSharpSyntaxWalker
    {
      private readonly List _usingDirectives =
        new List();
      public IEnumerable UsingDirectives =>
        _usingDirectives;
      public override void VisitUsingDirective(UsingDirectiveSyntax node)
      {
        _usingDirectives.Add(node);
      }
    }
类CSharpSyntaxWalker给许多不同类型的节点定义了可以重写的虚拟方法。可以使用
VisitToken和VisitTrivia获取令牌和trivia信息。还可以收集特定源代码语句的信息，如
VisitWhileStatement、VisitWhereClause、VisitTryStatement、VisitThrowStatement、
VisitThisExpression和VisitSwitchStatement等。
Main方法检查程序参数，其中包含应该检查using声明的C#源文件的目录（代码文件
SyntaxWalker / Program.cs）:
    static void Main(string[] args)
    {
      if (args.Length ! = 1)
      {
        ShowUsage();
        return;
      }
      string path = args[0];
      if (! Directory.Exists(path))
      {
        ShowUsage();
        return;
      }
    }
    static void ShowUsage()
    {
      WriteLine("Usage: SyntaxWalker directory");
    }
方法ProcessUsingsAsync完成所有的处理。首先，创建UsingCollector实例。为了在所
传入的目录中遍历所有的文件，使用了Directory.EnumerateFiles方法，其搜索模式是*.cs，
检索所有的C#文件。然而，应该排除自动生成的C#文件——所以使用Where方法过滤掉扩
展名为.g.i.cs和.g.cs的文件。在以下的foreach语句中，建立语法树，传递给UsingCollector
实例的Visit方法：
    static async Task ProcessUsingsAsync(string path)
    {
      const string searchPattern = "＊.cs";
      var collector = new UsingCollector();
      IEnumerable fileNames =
        Directory.EnumerateFiles(path, searchPattern, SearchOption.AllDirectories
)
        .Where(fileName => ! fileName.EndsWith(".g.i.cs") &&
            !fileName.EndsWith(".g.cs"));
      foreach (var fileName in fileNames)
      {
        string code = File.ReadAllText(fileName);
        SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
        SyntaxNode root = await tree.GetRootAsync();
        collector.Visit(root);
      }
      // etc.
调用Visit方法后，在UsingCollector的UsingDirectives属性中收集using指令。using指令
写入控制台之前，需要排序，并删除在多个源文件中找到的副本。排序using指令有一些
特殊的问题，用以下LINQ查询解决：using 
static声明应该放在最后，using声明后面的分
号不应用于定义排序顺序：
    // etc.
      var usings = collector.UsingDirectives;
      var usingStatics =
        usings.Select(n => n.ToString())
        .Distinct()
        .Where(u => u.StartsWith("using static"))
        .OrderBy(u => u);
      var orderedUsings =
        usings.Select(n => n.ToString())
        .Distinct().Except(usingStatics)
        .OrderBy(u => u.Substring(0, u.Length-1));
      foreach (var item in orderedUsings.Union(usingStatics))
      {
        WriteLine(item);
      }
    }
运行应用程序，传递之前创建的WPF语法树应用程序的目录，using声明如下所示：
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.Win32;
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Resources;
    using System.Runtime.CompilerServices;