### 锁定机制与元素详解

**锁信息容器**
- 元素充当存储锁信息的容器。
- 子元素包括：
  - **:** 持有请求发送来的信息（如、等）。
  - **:** 使用称为 `opaquelocktoken` 的 URI 方案唯一标识的锁。考虑到 HTTP 天生无状态，该令牌用于在将来的请求中标识锁的所有权。
  - **:** 它是 `Depth` 首部的值的副本。
  - **:** 指明锁的超时时间。例如，在上述响应中，超时值为 180 秒。

**opaquelocktoken 方案**
- `opaquelocktoken` 是设计用来在所有时间内对所有资源提供唯一令牌的方案。
- 为了确保唯一性，WebDAV 规范建议采用 ISO-11578 中描述的 UUID 机制。
- 实际实现时，服务器可以选择为每个 `LOCK` 请求生成一个 UUID，或者生成单个 UUID 并通过附加额外字符来维护唯一性。从性能角度看，后者更为优越。然而，如果选择这种方法，必须保证附加部分永远不会重用。

**XML 元素**
- XML 元素提供了发现活跃锁的机制。
- 如果有人试图锁定已被锁定的文件，会收到包含当前拥有者信息的 XML 元素。
- 元素列出了所有未解除的锁及其相应属性。

**锁的刷新和 Timeout 首部**
- 为了刷新锁，客户端需要重新提交锁定请求，并在 `If` 首部中放入锁定令牌。返回的超时值可能与之前的值不同。
- 客户端也可以在 `LOCK` 请求中通过 `Timeout` 首部指定所需的超时值。例如：`Timeout: Infinite, Second-86400`。
- 服务器没有义务满足这些选项，但客户端必须在 XML 元素中提供锁定过期的时间。
- 锁定超时只是一个指导值，服务器不一定受其约束。管理员可以手动重设，某些异常事件也可能导致服务器重设锁。因此，客户端应避免设置过长的锁定时间。

**UNLOCK 方法**
- `UNLOCK` 方法用于解除资源上的锁。示例如下：
  ```http
  UNLOCK /ch-publish.fm HTTP/1.1
  Host: minstar.inktomi.com
  User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
  Lock-Token: opaquelocktoken:*********
  ```
- 响应示例：
  ```http
  HTTP/1.1 204 No Content
  Server: Microsoft-IIS/5.0
  Date: Fri, 10 May 2002 20:56:18 GMT
  ```

- 要使 `UNLOCK` 操作成功，需满足两个条件：
  1. 已成功完成摘要认证步骤。
  2. 在 `Lock-Token` 首部中发送的锁定令牌相匹配。

**LOCK 和 UNLOCK 方法的状态码**
| 状态码 | 定义者 | 方法 | 效果 |
|--------|--------|------|------|
| 200 OK | HTTP | LOCK | 表明锁定成功 |
| 201 Created | HTTP | LOCK | 表明通过创建该资源已成功锁定了不存在的资源 |
| 204 No Content | HTTP | UNLOCK | 表明解锁成功 |
| 207 Multi-Status | WebDAV | LOCK | 请求锁定多个资源。返回的资源状态码不完全一样，因此，这些状态码被封装在一个 207 响应中 |
| 403 Forbidden | HTTP | LOCK | 表明客户端没有权限锁定资源 |
| 412 Precondition Failed | HTTP | LOCK | 可能是随 `LOCK` 命令发送的 XML 中指明要满足某条件而服务器无法完成，也可能是无法强制执行锁定令牌 |
| 422 Unprocessable Property | WebDAV | LOCK | 语义不适用——比如为不是集合的资源指定了非 0 的 `Depth` |
| 423 Locked | WebDAV | LOCK | 已处于锁定状态 |
| 424 Failed Dependency | WebDAV | UNLOCK | `UNLOCK` 指定了其他动作，并以它们的成功作为解锁的前提条件。如果无法成功完成这些有依赖关系的动作，就返回此错误码 |

### 属性和元数据
- 属性描述了资源的信息，如作者名字、修改日期、内容分级等。
- HTML 中的元标记提供了嵌入这种信息的机制，但许多二进制资源无法嵌入元数据。
- 分布式协作系统如 WebDAV 对属性的需求更复杂。例如，文档被编辑后，应更新作者属性。WebDAV 将这种可动态修改的属性称为“活”属性，相对的是静态属性（如 `Content-Type`），称为“死”属性。

**PROPFIND 方法**
- `PROPFIND` 方法用于获取一个给定文件或一组文件（也称为“集合”）的属性。
- 支持的操作类型：
  - 请求所有属性及其值；
  - 请求一组属性及其值；
  - 请求所有属性的名称。

- 示例请求：
  ```http
  PROPFIND /ch-publish.fm HTTP/1.1
  Host: minstar.inktomi.com
  User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
  Depth: 0
  Cache-Control: no-cache
  Connection: Keep-Alive
  Content-Length: 0
  ```

- 用于 `PROPFIND` 请求的 XML 元素：
  - **:** 要求返回所有属性的名字和值。
  - **:** 指定要返回属性名字的集合。
  - **:** 指定需要返回值的属性。例如：`<prop><getcontentlength/></prop>`。

- 示例响应：
  ```http
  HTTP/1.1 207 Multi-Status
  Server: Microsoft-IIS/5.0
  ...
  <D:multistatus xmlns:D="DAV:">
    <D:response>
      <D:href>http://minstar/ch-publish.fm</D:href>
      <D:propstat>
        <D:prop>
          <D:getcontentlength>1155</D:getcontentlength>
          ...
        </D:prop>
        <D:status>HTTP/1.1 200 OK</D:status>
      </D:propstat>
    </D:response>
  </D:multistatus>
  ```

**PROPPATCH 方法**
- `PROPPATCH` 方法为对指定资源设置或删除多个属性提供了原子化机制。
- XML 基元素是 `<propertyupdate>`，容纳了需要修改的属性。
- XML 的 `<set>` 和 `<remove>` 元素用于描述操作：
  - **:** 指定要设置的属性值。含有一个或多个子元素，它们依次包含了该资源上要设置的属性的名/值对。如果属性已存在，其值会被覆盖。
  - **:** 指定要删除的属性。与 `<set>` 不同的是，在容器中只列出了属性的名称。

- 示例请求：
  ```xml
  <propertyupdate xmlns="DAV:">
    <set>
      <prop>
        <owner>Author A</owner>
      </prop>
    </set>
    <remove>
      <prop>
        <owner/>
      </prop>
    </remove>
  </propertyupdate>
  ```

- 响应与 `PROPFIND` 类似，请参阅 RFC 2518 获取更多信息。

**PROPFIND 与 PROPPATCH 方法的状态码**
| 状态码 | 定义者 | 方法 | 效果 |
|--------|--------|------|------|
| 200 OK | HTTP | PROPFIND, PROPPATCH | 命令成功 |
| 207 Multi-Status | WebDAV | PROPFIND, PROPPATCH | 作用于一个或多个资源（或者集合）时，每个对象的状态都被封装到一个 207 响应中。这是一种常见的成功响应 |
| 401 Unauthorized | HTTP | PROPATCH | 需要授权才能完成对属性的修改操作 |
| 403 Forbidden | HTTP | PROPFIND, PROPPATCH | 对于 `PROPFIND` 来说，客户端不允许访问该属性。对于 `PROPPATCH` 来说，客户端不允许修改该属性 |
| 404 Not Found | HTTP | PROPFIND | 属性不存在 |
| 409 Conflict | HTTP | PROPPATCH | 与修改语义冲突——例如，试图修改只读的属性 |
| 423 Locked | WebDAV | PROPPATCH | 目标资源被锁定，并且没有提供锁定令牌，或者锁定令牌不匹配 |
| 507 Insufficient Storage | WebDAV | PROPPATCH | 没有足够的空间登记修改的属性 |

### 集合与名字空间管理
- **集合** 是指对预定义层次结构中的资源进行逻辑或物理上的分组。典型的例子是目录。
- WebDAV 使用 XML 名字空间机制，允许精确控制结构并防止名字空间冲突。
- WebDAV 提供了五种方法对名字空间进行操作：`DELETE`、`MKCOL`、`COPY`、`MOVE` 以及 `PROPFIND`。本章前面已经讨论过 `PROPFIND`，下面讨论其他方法。

### MKCOL 方法
- `MKCOL` 方法用于创建新的集合（目录）。