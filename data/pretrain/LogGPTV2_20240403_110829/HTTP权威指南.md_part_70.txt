opaquelocktoken:*****
0
Second-180
元素充当着存储锁信息的容器。嵌入在 
元素中的子元素有 ，它持有请求发送来的信息（、
以及）。此外，中还含有以下子元素。
• 
用称为opaquelocktoken的URI方案唯一标识的锁。考虑到HTTP天生就是
无状态的，该令牌用于在将来的请求中标识锁的所有权。
454 ｜ 第19章
• 
它是Depth首部的值的副本。
• 
指明锁的超时时间。在上面的响应中，超时值是180秒。
1. opaquelocktoken方案
opaquelocktoken 是设计用来在所有时间内对所有资源提供唯一令牌的方案。为
了确保唯一性，WebDAV规范规定采用ISO-11578中描述的UUID机制。 434
在实际实现的时候，有一定的回旋余地。服务器可以选择为每个LOCK请求生成一
个UUID，或者生成单个UUID并通过在结尾附加额外的字符来维护唯一性。从性
能角度衡量，选择后面那种方法更好。不过，如果服务器选择实现后面那种方法，
就必须保证附加的扩展部分永远不会重用。
2. XML元素
XML元素提供了发现活跃的锁的机制。如果有人试图去给已
经被锁定的文件上锁，他会收到指明当前拥有者的XML元素。
元素列出了所有未解除的锁和相应的属性。
3. 锁的刷新和Timeout首部
为了刷新锁，客户端需要重新提交锁定请求，并把锁定令牌放在If首部中。返回
的超时值可能和早先的超时值不同。
除了接受服务器给定的超时值，客户端也可以在LOCK请求中指明要求的超时值。
这可以通过Timeout首部做到。Timeout首部的语法允许客户端在逗号分隔的列
表中描述一些选项。例如：
Timeout : Infinite, Second-86400
服务器没有义务必须满足这些选项。但是，客户端必须在XML元素中
提供锁定过期的时间。无论怎样，锁定超时只是一个指导值，服务器不一定受其约
束。管理员可以手工重设，某些异常事件也可能导致服务器重设锁。客户端应当避
免使锁定时间太长。
尽管有这些原语，图19-3中显示的“丢失更新问题”并没有得到完全解决。为了彻
底解决这个问题，需要带有版本控制的协作事件系统。
发布系统 ｜ 455
19.2.6 UNLOCK方法
435 UNLOCK方法用于解除资源上的锁。示例如下：
UNLOCK /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Lock-Token:
opaquelocktoken:*********
HTTP/1.1 204 OK
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 20:56:18 GMT
与大多数资源管理请求一样，要使UNLOCK操作成功，WebDAV要满足两个条件：
第一，先前已经成功完成了摘要认证步骤；第二，要与在Lock-Token首部中发送
的锁定令牌相匹配。
如果解锁成功，会向客户端发送204 No Content状态码。表19-1总结了LOCK和
UNLOCK方法可能的状态码。
表19-1 LOCK和UNLOCK方法的状态码
状 态 码 定 义 者 方 法 效 果
200 OK HTTP LOCK 表明锁定成功
201 Created HTTP LOCK 表明通过创建该资源已成功锁定了不存在的资源
204 No Content HTTP UNLOCK 表明解锁成功
207 Multi-Status WebDAV LOCK 请求锁定多个资源。返回的资源状态码不完全一
样，因此，这些状态码被封装在一个207响应中
403 Forbidden HTTP LOCK 表明客户端没有权限锁定资源
412 Precondition Failed HTTP LOCK 可能是随LOCK命令发送的XML中指明要满足
某条件而服务器无法完成，也可能是无法强制执
行锁定令牌
422 Unprocessable Property WebDAV LOCK 语义不适用——比如为不是集合的资源指定了非
0的Depth
423 Locked WebDAV LOCK 已处于锁定状态
424 Failed Dependency WebDAV UNLOCK UNLOCK指定了其他动作，并以它们的成功作
为解锁的前提条件。如果无法成功完成这些有依
赖关系的动作，就返回此错误码
19.2.7 属性和元数据
属性描述了资源的信息，包括作者的名字、修改日期、内容分级，等等。HTML中
的元标记的确提供了把这种信息嵌入在内容之中的机制，但很多种资源（比如所有
二进制数据）都无法嵌入元数据。
456 ｜ 第19章
像WebDAV这样的分布式协作系统对属性的需求就更复杂了。例如，考虑作者
属性：当文档被编辑之后，应当更新这个属性以反映新的作者。WebDAV专门把
这种可动态修改的属性称为“活”属性。与之相对的是更长久的静态属性，比如
Content-Type，称为“死”属性。
为了支持查找和修改属性，WebDAV扩展了HTTP以包括两个新方法：PROPFIND
和PROPPATCH。后面几节给出了示例并讲解了相关的XML元素。 436
19.2.8 PROPFIND方法
PROPFIND方法用于获取一个给定文件或一组文件（也称为“集合”）的属性。
PROPFIND支持3种类型的操作：
• 请求所有的属性及其值；
• 请求一组属性及其值；
• 请求所有属性的名称。
下面这个例子中，请求的是所有属性及其值：
PROPFIND /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Depth: 0
Cache-Control: no-cache
Connection: Keep-Alive
Content-Length: 0
请求元素指定了从PROPFIND方法返回的属性。下面的列表总结了用
于PROPFIND请求的一些XML元素：
• 
要求返回所有属性的名字和值。为了请求所有的属性及其值，WebDAV客户端
可以将XML子元素作为 元素的一部分发送，或提交一
个没有主体的请求。
• 
指定要返回属性名字的集合。
• 
元素的子元素。指定需要返回值的属性。例如： ...... 。
下面是对一个PROPFIND请求示例的响应： 437
发布系统 ｜ 457
HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0
...........
http://minstar/ch-publish.fm 
HTTP/1.1 200OK
1155
......................
......................
0
0
在这个例子中，服务器以207 Multi-Status状态码进行响应。WebDAV将207用在
PROPFIND和其他几个WebDAV方法上，它们同时作用在多个资源上并且每个资
源可能有不同的响应。
响应中的几个XML元素的定义如下所示。
• 
多重响应的容器。
• 
标识资源的URI。
• 
包含特定请求的HTTP状态码。
• 
将一个元素和一个元素组织在一起。元素可以包含
给定资源的一个或多个属性名/值对。
在上面列出的示例响应中，响应是针对 URI：http://minstar/ch-publish.fm 的。
元素内嵌了一个元素和一个元素。服务器为这个
URI回复了一个200 OK响应，它定义在元素中。元素中有若
干子元素，例子中只列出了一部分。
PROPFIND的实例应用是对目录列表的支持。考虑到PROPFIND请求的表达能力，
458 ｜ 第19章
单次调用就能获取集合的整个层次结构和其中各个独立实体的所有属性。
19.2.9 PROPPATCH方法
PROPPATCH方法为对指定资源设置或删除多个属性提供了原子化机制。原子化可
以保证要么所有请求都成功，要么跟所有请求都没发出一样。
PROPPATCH方法的XML基元素是。它作为一个容器使用，
容纳了需要修改的属性。XML的和元素用于描述操作。
• 
指定要设置的属性值。含有一个或多个子元素，它们依次包含了
该资源上要设置的属性的名/值对。如果属性已存在，其值就被覆盖。 438
• 
指定要删除的属性。与不同的是，在容器中只列出了属性的名称。
下面这个小例子设置并删除了owner属性：
Author A
对PROPPATCH请求的响应和对PROPFIND请求的响应非常像。参见RFC 2518以
获取更多信息。
表19-2总结了PROPFIND和PROPPATCH方法的状态码。
表19-2 PROPFIND与PROPPATCH方法的状态码
状 态 码 定 义 者 方 法 效 果
200 OK HTTP PROPFIND, PROPPATCH 命令成功
207 Multi-Status WebDAV PROPFIND, PROPPATCH 作用于一个或多个资源（或者集合）时，
每个对象的状态都被封装到一个207响
应中。这是一种常见的成功响应
401 Unauthorized HTTP PROPATCH 需要授权才能完成对属性的修改操作
发布系统 ｜ 459
（续）
状 态 码 定 义 者 方 法 效 果
403 Forbidden HTTP PROPFIND, PROPPATCH 对于PROPFIND来说，客户端不允许访
问该属性。对于PROPPATCH来说，客
户端不允许修改该属性
404 Not Found HTTP PROPFIND 属性不存在
409 Conflict HTTP PROPPATCH 与修改语义冲突——例如，试图修改只
读的属性
423 Locked WebDAV PROPPATCH 目标资源被锁定，并且没有提供锁定令
牌，或者锁定令牌不匹配
507 Insufficient WebDAV PROPPATCH 没有足够的空间登记修改的属性
Storage
19.2.10 集合与名字空间管理
集合是指对预定义的层次结构中的资源进行的逻辑或物理上的分组。集合的一个典
439 型的例子就是目录。就像文件系统中的目录一样，集合作为其他资源（也包括其他
集合，和文件系统中的目录一样）的容器使用。
WebDAV使用了XML的名字空间机制。与传统的名字空间不同，XML名字空间
的分区在阻止所有名字空间冲突的同时，还允许进行精确的结构控制。
WebDAV提供了5种方法对名字空间进行操作：DELETE、MKCOL、COPY、MOVE
以及PROPFIND。本章前面已经讨论过PROPFIND了，下面来讨论其他方法。
19.2.11 MKCOL方法