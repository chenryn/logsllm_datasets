# 编译计划xcargs: "BUILD_NUMBER=#{build_number}", 
# 版本号build_path: project.package_path, 
# 编译路径output_directory: project.package_path, #ipa 包输出地址output_name: project.ipa_name, #ipa 包的名字silent: false) 
# 编译 Actionend这段代码展示的就是，用 gym action构建一个自定义的、带参数的完整的构建过程了。我们可以看到，这里的参数是具体的一个project 对象。当然，这里还有一个叫作 output_directory的参数，你可以利用这个参数把构建的 ipa 包放到内部的下载地址。这样看，移动 App的自动化发布是不是很简单？这里还有更多相关的例子，你可以参考它们完成更加复杂的自动化发布。
## 总结今天，我和你一起分享了移动客户端持续交付流水线的几个详细点：1.  利用发布快车的发布模式，可以有效地管理客户端的版本，保证研发工作按节奏持续向前进展；2.  采用带发布分支的 GitLab Flow    配合发布快车的模型，可以使其做到物理落地；3.  发布快车本身也有一些弊端，比如对 Master    分支的合并，检查不够严格的话，会拖累项目进度，因此我们采用改造构建通道的方式，避免了这个问题的产生；4.  移动 App    的发布，有其独特的流程，通常是先内测，后正式发布；但其流程相对固定，且容易自动化。所以，我的建议是，实现发布的完全自动化，以提高研发效率。另外，我还介绍了 Fastlane 这样一个工具，能够帮助你快速完成自动化的实现。当然，我今天所分享的只是移 App持续交付流水线的一种方式。在工程实践中，不同的产品和组织，往往会存在不同的流水线。所以，关于移动 App 的流水线，并没有对错、优劣之分，合适的才是最好的。
## 思考题你所在的团队，移动 App的持续交付流水线，有哪些点与我今天分享的内容有所不同？你可以分析出是什么原因导致了这些不同吗，又是否可以进行优化呢？感谢你的收听，欢迎你给我留言。![](Images/69e5b7a8ed8eecd006aa3ce5f76f78af.png){savepage-src="https://static001.geekbang.org/resource/image/55/0a/55b7b7cb930ca733523be64e3a720d0a.jpg"}
# 33 \| 进阶，如何进一步提升移动APP的交付效率？你好，我是王潇俊。今天我和你分享的主题是：进阶，如何进一步提升移动 App的交付效率？通过我在前面分享的《了解移动 App 的持续交付生命周期》和《细谈移动 App的交付流水线（pipeline）》两个主题，你应该已经比较全面和细致地理解了移动客户端持续交付的整个过程。当然，搭建持续交付体系的最终目的是，提升研发效率。所以，仅仅能把整个流水线跑起来，肯定满足不了你的胃口。那么，今天我就再和你聊聊，如何进一步提升移动App 的交付效率。
## 提升交付效率的基本思路同其他很多问题的解决方式一样，提升移动 App持续交付的效率，也是要先有一个整体思路，再具体落实。理解了移动 App的交付流水线后，你很容易就能发现，它其实与后端服务的交付流水线十分相似。后端持续交付流水线包括了：代码管理、环境管理、集成和编译管理、测试管理，以及发布管理这五个核心过程。而与之相比，移动App 的运行形势决定了其在环境管理方面没有特别多的要求。所以，我们可以从代码管理、集成和编译管理、测试管理，以及发布管理这四个方面来考虑问题。而将这四个方面直接对应到研发流程的话，就是标准的开发、构建、测试、发布过程。因此，移动App 持续交付流水线的优化，我们只要从这四个过程中寻找优化点即可。``{=html}**我们优化移动 App持续交付体系的整体思路就是**：首先找到这四个核心过程中存在的问题或瓶颈，再进行针对性的优化，从而达到提升效率的目的。接下来，我们就逐一击破这四个核心过程中的难题吧。