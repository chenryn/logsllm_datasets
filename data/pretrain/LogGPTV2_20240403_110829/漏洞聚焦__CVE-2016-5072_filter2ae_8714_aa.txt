# 漏洞聚焦: CVE-2016-5072
**分析开源商店系统OXID中的漏洞**
* * *
本文翻译自: 
* * *
前段时间，我检查了开源商店软件“OXID eShop”中的已知漏洞，这样做在德国是很受欢迎的。激发我兴趣的问题是[OXID Security
Bulletin 2016-001 (CVE-2016-5072)](https://oxidforge.org/en/security-bulletin-2016-001.html)漏洞，主要是它的影响很大。下面是adivsory供应商发布的消息：
攻击者可以获得OXID
eShop的完全管理访问权限。这包括所有购物车选项，客户数据和数据库。他们还可以执行PHP代码或将恶意代码注入系统和商店的店面。攻击者和受害者之间不需要交互。
该供应商还在它的官方公告中发布了[针对这个漏洞的常见问题答疑](https://oxidforge.org/en/faq-oxid-security-bulletin-2016-001.html)。接下来的内容让我越发地好奇了，当我们使用常见的漏洞扫描程序来处理这个漏洞时，要发现它是非常不容易的：
是谁发现了这个问题呢？  
这个问题是由OXID的开发人员发现的，而不是第三方人员。OXID eShop之前历经了多次安全审核，但是都没有发现这个问题。
我决定深入探索存在这个漏洞的根本原因以及攻击者是怎么利用这个漏洞的。
# **基本原理**
阅读了漏洞常见问题解答之后，很显然，攻击者可以以某种方式修改管理员用户的现有数据库记录。那让我们来快速浏览一下“oxuser”数据库表。此表用于OXID所有的帐户，其中包括商店管理员和客户。“oxid”列是表格的主要关键点。默认情况下，在安装过程中创建的管理员帐户时oxid字段的值为“oxdefaultadmin”，而其他的ids是使用OXID
util方法“generateUID()”生成的MD5哈希值。
    select oxid,oxrights,oxusername from oxuser;
    +----------------------------------+-----------+----------------------+
    | oxid                             | oxrights  | oxusername           |
    +----------------------------------+-----------+----------------------+
    | oxdefaultadmin                   | malladmin | PI:EMAIL   |
    | e7af1c3b786fd02906ccd75698f4e6b9 | user      | PI:EMAIL |
    +----------------------------------+-----------+----------------------+
    2 rows in set (0.00 sec)
# **PHP数组**
为了掌握怎么利用这个问题的知识，有必要先掌握一些关于PHP数组的背景知识。我们将在这里快速介绍一下基础知识。与大多数高级语言一样，PHP本身也是支持数组的。PHP中的数组实际上是一个有序的映射。映射是一种将值与键关联起来的类型。有了密钥（可以是整数或字符串），您可以访问数组中指定的值。以下脚本提供了几个小例子，如何创建/访问该类数组：
     "value1",
        "key2" => "value2",
        "key3" => "value3",
    );
    // Accessing array values
    print ("Key: key1, value: " . $my_array['key1'] . "\n");
    // Adding additional values to the existing array
    $my_array['new_value'] = "super new value";
    // Accessing the added value:
    print ("Key: new_value, value: " . $my_array['new_value'] . "\n");
    // Create a second array, using integers as keys
    $my_int_array = array(
        0 => 'int value 0',
        1 => 'int value 1',
        2 => 'int value 3',
    );
    // It is possible to store arrays in arrays
    $my_array['array_value'] = $my_int_array;
    // Accessing arrays in arrays
    print ("Accessing arrays in arrays: " .$my_array['array_value'][1] ."\n\n");
    ?>
上面脚本的输出结果为：
    php arraytest.php 
    Key: key1, value: value1
    Key: new_value, value: super new value
    Accessing arrays in arrays: int value 1
PHP语言提供了在HTTP请求中传递数组的有趣的可能性，这是现代框架经常使用的一种功能。这是一个将数组作为URL/POST或Cookie参数的小例子：
    print("my_array['key1'] = " .$_REQUEST['my_array']['key1'] . "");
    print("my_array['key2'] = " .$_REQUEST['my_array']['key2'] . "");
数组“my_array”可以按以下方式传递给脚本：
    http://10.165.188.125/array_test.php?my_array[key1]=test&my_array[key2]=bla
下面的屏幕截图显示了在OXID商店中注册的新用户帐户。如您所见，参数`invadr`是一个在POST请求中传递的数组。这个变量对于后续理解漏洞是非常重要的。
# **漏洞分析**
在阅读了advisory供应商提供的信息以及查看了已发布的Mod-Security规则之后，显而易见，这个错误与新用户的注册存在着某种关系。分析这个漏洞的最简单方法是将[易受攻击的版本与修复后的版本](https://github.com/OXID-eSales/oxideshop_ce/compare/v4.8.11...v4.8.12)进行比对来看看相应的变化。
修复后的程序引入了两个新种新的方法，`cleanDeliveryAddress`和`cleanBillingAddress`，两者都在oxcmp_user类中由`createUser（）`来调用：
    $sPassword2 = oxConfig::getParameter( 'lgn_pwd2', true );
      $aInvAdress = oxConfig::getParameter( 'invadr', true );
      $aInvAdress = $this->cleanBillingAddress($aInvAdress);
      $aDelAdress = $this->_getDelAddressData();
      $aDelAdress = $this->cleanDeliveryAddress($aDelAdress);
      $oUser = oxNew( 'oxuser' );
这两种方法的代码非常相似。下面是“cleanDeliveryAddress”的代码：
    /**
         * Removes sensitive fields from billing address data.
         *
         * @param array $aBillingAddress
         *
         * @return array
         */
        private function cleanBillingAddress($aBillingAddress)
        {
            if (is_array($aBillingAddress)) {
                $skipFields = array('oxuser__oxid', 'oxid', 'oxuser__oxpoints', 'oxpoints', 'oxuser__oxboni', 'oxboni');
                $aBillingAddress = array_change_key_case($aBillingAddress);
                $aBillingAddress = array_diff_key($aBillingAddress, array_flip($skipFields));
            }
            return $aBillingAddress;
        }
代码对所提供的帐单地址是否是PHP数组进行基本的检查，如果是PHP数组，就删除具有某些键的元素，比如`oxuser__oxid`。那么在用户注册的过程中，billingAdress（变量`$invadr`）的值是实际上是怎么使用的呢？
# **注：**
以下代码示例选自我的测试安装（版本是oxideshop_ce-sync-p-5.2-ce-176），其他版本可能略有不同。
该值将传递给oxUser类中的两个函数，这两个函数都没有被修复后的程序更改：
  * oxuser类中的checkValues（行：449）
  * oxuser类中的changeUserData（行：463）
顾名思义，`checkValues`方法对所提供的参数进行一些基本的检查，并且如果验证失败，则返回异常。
    /**
         * Performs bunch of checks if user profile data is correct; on any
         * error exception is thrown
         *
         * @param string $sLogin      user login name
         * @param string $sPassword   user password
         * @param string $sPassword2  user password to compare
         * @param array  $aInvAddress array of user profile data
         * @param array  $aDelAddress array of user profile data
         *
         * @todo currently this method calls oxUser class methods responsible for
         * input validation. In next major release these should be replaced by direct
         * oxInputValidation calls
         *
         * @throws oxUserException, oxInputException
         */
        public function checkValues($sLogin, $sPassword, $sPassword2, $aInvAddress, $aDelAddress)
        {
            /** @var oxInputValidator $oInputValidator */
            $oInputValidator = oxRegistry::get('oxInputValidator');
            // 1. checking user name
            $sLogin = $oInputValidator->checkLogin($this, $sLogin, $aInvAddress);
            // 2. checking email
            $oInputValidator->checkEmail($this, $sLogin, $aInvAddress);
            // 3. password
            $oInputValidator->checkPassword($this, $sPassword, $sPassword2, ((int) oxRegistry::getConfig()->getRequestParameter('option') == 3));
            // 4. required fields
            $oInputValidator->checkRequiredFields($this, $aInvAddress, $aDelAddress);
            // 5. country check
            $oInputValidator->checkCountries($this, $aInvAddress, $aDelAddress);