(cid:2)) : path f actor(P
(cid:2)
(cid:2)(cid:2)) : path f actor(P
(cid:2)
Prerequisites
S.ip /∈ {Trusted IP Addresses}
$PROT EXEC$ ∈ M.f lags
∧ ∃ U ntrusted Read(?, P
$PROT EXEC$ ∈ F.mode
∧ ∃ U ntrusted Read(?, P
∧ ∃ U ntrusted Read(?, P
∃ U ntrusted Read(?, P
F.path ∈ {Command Line Utilities}
∧ ∃ Initial Compromise(P
S.ip /∈ {Trusted IP Addresses} ∧ ∃ Initial Compromise(P
(cid:2)) :
path f actor(P
F.path ∈ {SuperUser Tools} ∧ ∃ Initial Compromise(P
(cid:2)) :
path f actor(P
U.id ∈ {SuperUser Group} ∧ ∃ Initial Compromise(P
(cid:2)) :
path f actor(P
F.path ∈ {Sensitive Files}
∧ ∃ Initial Compromise(P
(cid:2)
P
∧ ∃ Initial Compromise(P
S.ip ∈ {Internal IP Range}
∧ ∃ Initial Compromise(P
S.ip /∈ {Trusted IP Addresses} ∧ ∃ Internal Reconnaissance(P
path f actor(P
∧ ∃ Initial Compromise(P
F.path ∈ {System Critical Files}
∧ ∃ Initial Compromise(P
(cid:2)) : path f actor(P
(cid:2)
, P ) <= path thres
F.path ∈ {Log Files}∧ ∃ Initial Compromise(P
(cid:2)) :
path f actor(P
∃ Internal Reconnaissance(P
(cid:2)) : path f actor(P
(cid:2)
path thres
∧ ∃ Initial Compromise(P
(cid:2)(cid:2)
∃ Initial Compromise(P
∧ ∃ Initial Compromise(P
(cid:2)) : path f actor(P
(cid:2)(cid:2)) : path f actor(P
(cid:2)) : path f actor(P
(cid:2)
(cid:2)) : path f actor(P
(cid:2)(cid:2)) : path f actor(P
(cid:2)(cid:2)) : path f actor(P
.name ∈ {Sensitive Commands}
(cid:2)(cid:2)) : path f actor(P
, P ) <= path thres
(cid:2)
, P ) <= path thres
, F ) <= path thres
, P ) <= path thres
(cid:2)(cid:2)
(cid:2)(cid:2)
, P ) <= path thres
(cid:2)
, P ) <= path thres
(cid:2)(cid:2)
, P ) <= path thres
, P ) <= path thres
, F ) <=
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
, P ) <= path thres
, P ) <= path thres
(cid:2)) :
TABLE 8.
Representative TTPs. Event family denotes a set of corresponding events in Windows, Linux, and FreeBSD. In the Severity column, L=Low,
M=Moderate, H=High, C=Critical. Entity types are shown by the characters: P=Process, F=File, S=Socket, M=Memory, U=User.
of HOLMES is shown in Table 8. To match a TTP, as the
provenance graph is being built, the policy matching engine
iterates over each rule in the rules table and its prerequisites.
A particularly challenging part of this task is to check, for
each TTP, the prerequisite conditions about previously matched
TTPs and the path factor. In fact, previously matched TTPs
may be located in a distant region of the graph and the
path factor value may depend on long paths, which must
be traversed. We note that a common practice in prior work
[22], [28], [34], [39] on attack forensics is to do backward
tracking from a TTP matching point to reach an initial compro-
mise point. Unfortunately, this is a computationally expensive
strategy in a real-time setting as the provenance graph might
contain millions of events.
To solve this challenge without backtracking, we use an
incremental matching approach that stores the results of the
previous computations and matches and propagates pointers to
those results along the graph. When a speciﬁc TTP, which may
appear as a prerequisite condition in other TTPs, is matched,
we create the corresponding node in the HSG and a pointer to
that node. The pointer is next propagated to all the low-level
entities that have dependencies on the entities of that matched
TTP.
The path factor is similarly computed. In particular, given
a matched TTP represented as a node in the HSG, a
path factor value is incrementally computed for the nodes of
the provenance graph that have dependencies on the entities
of the matched TTP. Assuming N1 as a process generating
an event matching a TTP, path f actor(N1, N1) is initially
assigned to 1. Subsequently, when an edge (N1, N2) is added
to the provenance graph, path f actor(N1, N2) will be 1 if
N2 is a non-process node or if it is a process with at least one
common ancestor with N1. Otherwise, the path f actor value
increases by 1. In cases that an information ﬂow happens from
N2 to N3 while both N2 and N3 already have a dependency
ﬂow from N1, a new version of N3 is constructed, and the
path f actor(N1, N3 new) is set to the minimum among the
path f actors calculated by both ﬂows. Note that
in the
acyclic provenance graph which is built based on this ver-
sioning system, the path f actor(N1, N2) never changes once
it is set. Finally, when an event corresponding to a TTP event
is encountered, we can reuse the pointer to the prerequisite
TTPs and the precomputed path factor immediately if they
are available.
An expected bottleneck for this pointer-based correlation
of the two layers (provenance graph and HSG) is the space
overhead and complexity it adds as the provenance graph
grows over time. Our operational observation is that, typically,
a large number of entities point to the same set of TTPs;
This phenomenon is not random and is actually the result of
the propagation of pointers in the process tree, from parent
processes to all their descendants. It is, in fact, rare that new
pointers get added as the analysis proceeds. In general, the key
implementation insight is to maintain an intermediate object
that maps entities of the provenance graph to TTPs of the HSG.
Therefore, each entity in the provenance graph has only one
pointer pointing to the intermediate mapper, and the mapper
object contains the set of pointers.
Noise Filtering and Detection Engines. The Noise Filtering
Engine identiﬁes benign TTP matches so that they can be
excluded from the HSG. It takes as input the normal behavior
model learned on benign runs. This model contains a map of
(cid:18)(cid:18)(cid:21)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
)
n
o
i
l
l
i
m
(
s
d
r
o
c
e
r
d
e
h
s
i
l
b
u
p
 10
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
Stream 1
Stream 2
Stream 3
Stream 4
Stream 5
Stream 6
Stream 7
 0
 20
 40
 60
 80
 100
trace duration (%)
)
B
M
i
(
e
z
S
c
p
o
T
i
 1400
 1200
 1000
 800
 600
 400
 200
 0
 0
Stream 1
Stream 2
Stream 3
Stream 4
Stream 5
Stream 6
Stream 7
 20
 40
 60
 80
 100
trace duration (%)
Fig. 9.
(Left): Number (millions) of published records vs. % of trace duration. (Right): Topic Size (MB) vs. % of trace duration.
the TTPs that are matched in benign runs and the threshold on
the number of bytes read from or written to system objects on
these runs. When the policy matching engine matches a new
TTP, the entities and prerequisites of that TTP are searched
in this model. If an entry exists in the model that contains
all the prerequisites and the matched event (having the same
entity names), then the total amount of transferred bytes is
checked against the benign threshold. If the total amount of
bytes transferred is lower than the benign threshold,
then
the node corresponding to the matched TTP is ﬁltered out;
otherwise, a node corresponding to it gets added to the HSG.
Finally, the detection engine computes the weighted sums of
the different HSGs and raises alarms when that value surpasses
the detection threshold.
VI. EXPERIMENTAL EVALUATION
Our experimental evaluation is done on red-team vs. blue-
team adversarial engagements organized by a government
agency (speciﬁcally, US DARPA). We ﬁrst evaluated HOLMES
on a dataset that was available to us beforehand (Sections
VI-A,VI-B,VI-C,VI-D). Using this evaluation, we calculate
the optimal threshold value for HOLMES in Section VI-E,
and measure its performance in Section VI-F. Finally,
in
Section VI-G, we explored applicability of HOLMES as a real-
world live detection system in a setting that we have no prior
knowledge of when or how red-team is conducting the attacks.
After our live experiment, this dataset has been released in the
public domain [26] to stimulate further research in this area.
Stream
No.
1
2
3
4
5
6
7
Duration
Platform
0d1h17m
2d5h8m
1d7h25m
0d1h39m
5d5h17m
2d5h17m
8d7h15m
Ubuntu 14.04
(64bit)
Ubuntu 12.04
(64bit)
Ubuntu 12.04
(64bit)
Windows 7
Pro (64bit)
Windows 7
Pro (64bit)
FreeBSD
11.0 (64bit)
FreeBSD
11.0 (64bit)
Scenario
No.
1
2
3
4
5.1
5.2
6
7.1
7.2
Scenario
Name
Drive-by
Download
Trojan
Trojan
Spyware
Eternal
Blue
RAT
Web-Shell
RAT
Password
Hijacking
Attack
Surface
Firefox
42.0
Firefox 20.0
Firefox 20.0
Firefox
44.0
Vulnerable
SMB
Firefox
44.0
Backdoored
Nginx
Backdoored
Nginx
Backdoored
Nginx
TABLE 10.
Datasets. Streams 5 and 7 contain two independent attack
vectors occurring on the same host.
A. Datasets
Attacks. The datasets we used for evaluation are summarized
in Table 10. This table shows nine APT scenarios from 7
hosts across three OS platforms. There are three scenarios for
each platform. Collectively, the streams cover 20 days’ worth
of audit logs collected using auditd, dtrace, and ETW from
Ubuntu, FreeBSD, and Microsoft Windows, respectively. Each
stream contains kernel audit logs of routine system activities
and attack activities. Attacks constitute less than 0.001% of
the audit data volume. Streams 5 and 7 each contain two
independent APT attacks, while the remaining streams contain
one APT attack each.
In a nutshell, the adversarial goals and activities in the
red team attack scenarios cover those of high-proﬁle APT
campaigns. These include typical APT activities such as
browser-induced drive-by initial compromises, backdoor injec-
tion, privilege escalation, internal reconnaissance, exﬁltration
of sensitive assets, and cleanup of attack footprints. In these
attacks, sophisticated attack vectors such as reﬂective loading,
web-shell capabilities, and in-memory module loading were
used by a red-team to evaluate the robustness of HOLMES
against APT attacks.
Benign data. To build noise reduction models, we used 4 days’
worth of benign audit data streamed from the target hosts.
These programs include browsers (e.g., Firefox), web servers
(e.g., Nginx), and various daemons (e.g., postﬁx, syslogd).
B. Setup
Before the engagement, each machine is set up with some
vulnerable software that later gets exploited. To further mix
normal and attack logs, the red-team also performed benign
activities on the target hosts in parallel with attacks. Routine
system activities include, but are not limited to, web browsing,