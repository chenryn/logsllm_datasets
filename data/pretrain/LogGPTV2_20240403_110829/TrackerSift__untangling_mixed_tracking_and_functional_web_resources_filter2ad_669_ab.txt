Labeling. We gather an authoritative source labels by applying
filter lists to the crawled websites. Filter lists are not perfect (e.g.,
they are slow to update [49] and are prone to mistakes [17]) but they
are the best available source of labels. We use two widely used filter
lists that target advertising (EasyList [6]) and tracking (EasyPrivacy
[7]). These filter lists mainly build of regular expressions that match
advertising and/or tracking network requests. As shown in Figure 2,
network requests that match EasyList or EasyPrivacy are classified
as tracking, otherwise they are classified as functional. Note that we
maintain the call stack that contains the ancestral scripts that in turn
triggered a script-initiated network request (e.g., XMLHTTPRequest
fetches). For asynchronous JavaScript, the stack track that preceded
571
the request is prepended in the stack. Thus, for script-initiated
network requests, we ensure that if a request is classified as tracking
or functional, its ancestral scripts in the stack are also classified as
such. Since network requests that are not script-initiated can not
be trivially classified as tracking or functional, we exclude them
from our analysis.
4 RESULTS
Classifying Mixed Resources. We compute the logarithmic ratio
of the number of tracking to functional network requests to quantify
the mixing of tracking and functional resources.
(cid:18) # 𝑜 𝑓 𝑡𝑟𝑎𝑐𝑘𝑖𝑛𝑔 𝑟𝑒𝑞𝑢𝑒𝑠𝑡𝑠
(cid:19)
𝑟𝑎𝑡𝑖𝑜 = log
# 𝑜 𝑓 𝑓 𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑎𝑙 𝑟𝑒𝑞𝑢𝑒𝑠𝑡𝑠
(1)
At each granularity, we classify resources with the common log-
arithmic ratio less than -2 as functional because they triggered
100× more functional requests than tracking requests. Similarly, we
classify resources with the common logarithmic ratio of more than
2 as tracking because they triggered 100× more tracking requests
than functional requests. The resources with the common logarith-
mic ratio between -2 and 2 are classified as mixed. We analyze the
suitability of the selected classification threshold using sensitivity
analysis later in Section 5.
Results Summary. Table 1 summarizes the results of our crawls
of the landing pages of 100K websites. Using the aforementioned
classification, we are able to attribute 54% of the 2.43 million script-
initiated network requests to tracking or functional domains. The
remaining 46% (1129K) of the 2.43 million requests attribute to
mixed domains that are further analyzed at the hostname-level. We
are able to attribute 24% of the requests from mixed domains to
tracking or functional hostnames. The remaining 76% (860K) of the
requests attribute to mixed hostnames that are further analyzed at
the script URL-level. We are able to attribute 84% of the requests
from mixed hostnames to tracking or functional script URLs. The
remaining 16% (135K) of the requests attribute to mixed script URLs
that are further analyzed at the script method-level. We are able to
attribute 72% of the requests from mixed script URLs to tracking or
functional script methods. This leaves us with less than 2% (37K)
requests that cannot be attributed by TrackerSift to tracking or
functional web resources and require further analysis.
Next, we analyze the distribution of the ratio of tracking to
functional requests by web resources at different granularities of
domain, hostname, script URL, and script method in Figure 3. Table
2 shows the breakdown of web resources classified as tracking,
functional, and mixed at different granularities.
Domain classification. 2451K requests in our dataset are served
from a total of 69,292 domains (eTLD+1). Figure 3a shows three dis-
tinct peaks: [2, ∞) serve tracking requests, (-∞, -2] serve functional
IMC ’21, November 2–4, 2021, Virtual Event, USA
Amjad et al.
(a) domain
(b) hostname
(c) script URL
(d) script method
Figure 3: Distribution of resources at increasingly finer granularities. Y-axis shows the count of unique (a) domains, (b) hostnames, (c) scripts,
and (d) script methods. X-axis represents the common logarithmic ratio of the number of tracking to functional requests. Interval (-∞,-2] is
classified as functional (green), (-2,2) is classified as mixed (yellow), and [2,∞) is classified as tracking (red).
requests, and (-2, 2) serve both tracking and functional requests. We
can filter 31% of the requests by classifying 6,493 domains that lie
in the [2, ∞) interval as tracking. Notable tracking domains include
google-analytics.com, doubleclick.net, and googleadservices.com,
bing.com. We can filter 23% of the requests by classifying 50,938
domains that lie in the (-∞, -2] interval as functional. Notable func-
tional domains include CDN and other content hosting domains
twimg.com, zychr.com, fbcdn.ne, w.org, and parastorage.com. How-
ever, 46% of requests are served by 11,861 mixed domains that lie in
the (-2, 2) interval. These mixed domains cannot be safely filtered
due to the risk of breaking legitimate functionality, and not filtering
them results in allowing tracking. Notable mixed domains include
gstatic.com, google.com, facebook.com, facebook.net, and wp.com.
Hostname classification. 1129K requests belonging to mixed do-
mains are served from a total of 26,060 hostnames. Figure 3b shows
three distinct peaks representing hostnames that serve tracking,
functional, or both tracking and functional requests. We can fil-
ter 14% of the requests by classifying 4,429 hostnames that lie in
the [2, ∞) interval as tracking. We can filter 9% of the requests
by classifying 9,248 hostnames that lie in the (-∞, -2] interval as
functional. However, 76% of the requests are served by 12,383 host-
names that lie in the (-2, 2) interval are classified as mixed. Again,
these mixed hostnames cannot be safely filtered due to the risk
of breaking legitimate functionality, and not filtering them results
in allowing tracking. Take the example of hostnames of a popu-
lar mixed domain wp.com. The requests from wp.com are served
from tracking hostnames such as pixel.wp.com and stats.wp.com,
functional hostnames such as widgets.wp.com and c0.wp.com, and
mixed hostnames such as i0.wp.com and i1.wp.com.
Script classification. 860K requests belonging to mixed hostnames
are served from a total of 350,050 initiator scripts. Figure 3c again
shows three distinct peaks representing scripts that serve tracking,
functional, or both tracking and functional requests. We can filter
27% of the requests by classifying 194,156 scripts that lie in the [2, ∞)
interval as tracking. We can filter 57% of the requests by classifying
134,726 scripts that lie in the (-∞, -2] interval as functional. However,
16% of the requests are served by 21,168 scripts that lie in the (-2, 2)
interval are classified as mixed. These mixed scripts cannot be safely
filtered due to the risk of breaking legitimate functionality, and not
filtering them results in allowing tracking. For example, let’s analyze
the initiator scripts of a mixed hostname i1.wp.com. The requests to
this hostname are the result of different initiator scripts on the web-
page www.ibn24.tv. Specifically, a tracking request to i1.wp.com is
initiated by the script show_ads_impl_fy2019.js and a functional
request to i1.wp.com is initiated by the script jquery.min.js. As an-
other example, on the webpage somosinvictos.com, both tracking
and functional requests to i1.wp.com are initiated by the mixed
script lazysizes.min.js. Note that the scripts classified as tracking
initiate requests to well-known advertising and tracking domains.
For example, script uc.js served by consent.cookiebot.com initiated
requests to googleadservices.com, doubleclick.net, and amazon-
adsystem.com.
Method classification. 135K requests belonging to mixed scripts
are served from a total of 64,019 script methods. Figure 3d again
shows three distinct peaks representing methods that serve track-
ing, functional, or both tracking and functional requests. We can
filter 17% of the requests by classifying 17,940 methods that lie in the
[2, ∞) interval as tracking. We can filter 55% of the requests by clas-
sifying 40,500 methods that lie in the (-∞, -2] interval as functional.
However, 28% of the requests are served by 5,579 methods that lie
in the (-2, 2) interval are classified as mixed. These mixed methods
cannot be safely filtered due to the risk of breaking legitimate func-
tionality, and not filtering them results in allowing tracking. For
example, let’s analyze script methods for a mixed script tfa.js on
the webpage hubblecontacts.com. While both tracking and func-
tional requests are initiated by the script, the tracking request was
initiated by get method, and the functional request was initiated by
X method. As another example, let’s analyze script methods for a
mixed script app.js on the webpage radioshack.com.mx. In this case,
both tracking and functional requests are initiated by the mixed
script method Pa.xhrRequest.
5 DISCUSSION
In this section, we discuss some case studies, opportunities for
future work, and limitations.
Circumvention strategies. There are two common techniques
for mixing tracking and functional resources.
(1) Script inlining: Despite potential security risks, publishers are
willing to inline external JavaScript code snippets (as opposed to
including external scripts using the src attribute) for performance
572
TrackerSift: Untangling Mixed Tracking and Functional Web Resources
IMC ’21, November 2–4, 2021, Virtual Event, USA
s
t
p
i
r
c
S
d
e
x
i
M
%
6.1
6.05
6
5.95
5.9
5.85
5.8
5.75
5.7
1
1
2
3
4
5
6
7
8
93
4
5
6
7
8
92
1
2
3
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
Classification Threshold
Figure 4: Sensitivity analysis of the classification threshold (default
is -2 and 2) by studying the proportion of mixed scripts as a function
of varying thresholds. The X-axis represents the threshold buckets.
For example, 1.5 represents (-1.5, 1.5).
reasons as well as for circumvention [35, 41]. For example, we find
that the Facebook pixel [9] is inlined on a large number of websites
to assist with targeting Facebook ad campaigns and conversion
tracking.
(2) Script Bundling: Publishers also bundle multiple external
scripts from different organizations with intertwined dependencies
for simplicity and performance reasons. JavaScript bundlers, such
as webpack [14] and browserify [5], use dependency analysis to
bundle multiple scripts into one or a handful of bundled scripts. For
example, pressl.co serves a script app.9115af433836fd824ec7.js that
is bundled using the webpack [14]. This bundled script includes
the aforementioned Facebook pixel and code to load functional
resources from a first-party hostname. Existing content blocking
tools struggle to block inlined and bundled tracking scripts with-
out the risk of breaking legitimate site functionality. Finer-grained
detection by TrackerSift presents an opportunity to handle such
scripts by localizing the methods that implement tracking.
Threshold sensitivity analysis. We set the classification thresh-
old to a symmetric value of (-2,2) for classifying mixed resources in
Equation 1. To assess our choice of the threshold, we analyze the
sensitivity of script classification results in Figure 4. Similar trends
are observed for domain, hostname, and method classification. The
plot shows the percentage of scripts classified as mixed as we vary
the threshold from 1 to 3 in increments of 0.1 Note that the curve
plateaus around our selected threshold of 2. Thus, we conclude
that our choice of the threshold is stable and reasonably separates
mixed resources from tracking and functional resources.
Breakage analysis. We conducted manual analysis to assess whether
blocking mixed resources results in breakage of legitimate function-
ality. To assess functionality breakage, we load a random sample
of websites with (treatment) and without (control) blocking mixed
scripts as classified by TrackerSift. We label breakage as: major if
the core functionality such as search bar, menu, images, and page
navigation is broken in treatment but not in control; minor: if the
secondary functionality such as comment/review sections, media
widgets, video player, and icons is broken in treatment but not in
control; and none: if the core and secondary functionalities of the
website are same in treatment and control. Note that we consider
missing ads as no breakage. Table 3 shows our breakage analysis
on a representative sample of 10 websites. We note major or mi-
nor breakage in all except one case. Thus, we conclude that mixed
web resources indeed cannot be safely blocked by existing content
blocking tools.
573
Table 3: Manual analysis of breakage caused by blocking mixed
scripts on randomly selected 10 websites.
Website
caremanagem-
entmatters.co.uk
gratis.com
forevernew.com.au
Mixed Script
jquery.min.js
main.js
require.js
flamesnation.ca
biba.in
ecomarket.ru
peachjohn.co.jp
shoobs.com
editorajusp-
odivm.com.br
resourceworld.com
player.js
MJ_Static-Built.js
2.0c9c64b2.chunk.js
jquery-1.11.2.min.js
widgets.js
jquery.js
jquery.min.js
Breakage
Minor
Major
Major
Minor
Major
Major
Major