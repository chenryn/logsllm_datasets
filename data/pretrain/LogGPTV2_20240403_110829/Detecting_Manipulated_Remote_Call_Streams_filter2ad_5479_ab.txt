line
call end
mov 1, %o0
end
close
b
nop
ret
restore
CFG EXIT
Figure 5: Control Flow Graph for main. Control transfers in
SPARC code have one delay slot. Outgoing edges of each
basic block are labeled with the name of the call in the block.
2. We convert the collection of CFGs into a collection
of local automata. Each local automaton models
the possible streams of remote system calls gener-
ated in a single procedure.
3. We compose these automata at points of function
calls internal to the application, producing an inter-
procedural automaton modeling the application as
a whole.
The interprocedural automaton is the model incorpo-
rated into the checking agent.
Figure 4(a) shows an example C language program
that writes a string to the standard output. The main
function translates to the SPARC code in Figure 4(b)
when compiled. We include the C code solely for the
reader’s ease; the remainder of this section demonstrates
analysis of the binary code that a compiler and assem-
bler produces from this source program.
3.1 From Binary Code to CFGs
We use a standard tool to read binary code and generate
CFGs. The Executable Editing Library (EEL) provides
an abstract interface to parse and edit (rewrite) SPARC
binary executables [25]. EEL builds objects representing
the binary under analysis, including the CFG for each
procedure and a call graph representing the interproce-
dural calling structure of the program. Nodes of the
CFG, or basic blocks, contain linear sequences of
instructions and edges between blocks represent control
e
e
e
e
e
main
write
main
write
write
line
end
write
line
end
line
write
line
write
close
end
close
close
close
Figure 6: Local Automata. The local automata for each of
the three functions given in Figure 4 after e -reduction.
i.e.
ﬂow;
Figure 5 shows the CFG for main from Figure 4.
the possible paths followed at branches.
3.2 From CFGs to Local Automata
For each procedure, we use its CFG to construct an NFA
representing all possible sequences of calls the proce-
dure can generate. This is a natural translation of the
CFG into an NFA that retains the structure of the CFG
and labels the outgoing edges of each basic block with
the name of the function call in that block, if such a call
exists. Outgoing edges of blocks without a function call
are labeled e . The automaton mirrors the points of con-
trol ﬂow divergence and convergence in the CFG and
the possible streams of calls that may arise when tra-
versing such ﬂow paths.
=
V E,
into an NFA given by
Formally, we convert each control ﬂow graph
)
,
, Q
G
being the set of states, S
the transi-
tion relation, q0 the unique entry state, and F the set of
accepting states; where:
,
Q S
the input alphabet, d
q0 F
A
=
(
,
,
Q
q0
F
V=
{
=
v0=
=
{
v v is a CFG exit
}
I D v V˛
,
v contains a call labeled ID
}
is the unique CFG entry
=
s
E˛
t
s
s
t
if no call at s
ID if call labeled ID at s
t
To reduce space requirements, each NFA is e -
reduced and minimized. The classical e -reduction algo-
rithm simultaneously determinizes the automaton, an
exponential process [19]. We develop a linear time e -
reduction algorithm, shown below, that does not deter-
minize the automaton. The algorithm recognizes that a
Figure 7: Final NFA Model. The automaton produced
following call site replacement. e -reduction has not been
performed. The dotted line represents a path not present in the
original program but accepted by the model.
set of states in a strongly connected component made of
e -edges are reachable from one another without consum-
ing an input symbol and collapses them to a single state.
1. Abstract the automaton to a directed graph.
2. Using only e -edges, calculate the strongly con-
nected components of the graph.
3. All states in the same strongly connected compo-
nent may reach any other by a sequence of e -transi-
tions, so the states are collapsed together. We now
have a directed acyclic graph (DAG) over the col-
lapsed states, with the remaining e -edges those that
connect strongly connected components.
4. For all non-e -edges e originating at a state n in the
DAG, add copies of e originating from all states m
such that m reaches n by a sequence of e -edges.
5. Remove the e -edges that connect strongly con-
nected components.
6. Remove unreachable states and edges from the
graph.
The resultant graph is the reduced automaton (Figure 6).
Using standard algorithms and data structures, our e -
reduction procedure runs in linear time.
Automaton minimization recognizes equivalent
states, where equivalence indicates that all sequences of
symbols accepted following the states are identical.
Such states are collapsed together, reducing the overall
size and complexity of the automaton. An O(n log n)
algorithm exists to minimize deterministic automata
[18], but it is not easily abstracted to an NFA. Our proto-
type uses an O(n2) version of the algorithm suitable for
an NFA.
Æ
æ
d
S
$
d
e
ﬁ
ﬁ
(cid:238)
(cid:237)
(cid:236)
ﬁ
¨
e
e
e
e
e
e
3.3 From Local Automata to an Interprocedural
Automaton
Constructing an Interprocedural NFA. We extend the
notion of a single procedure NFA model to a model of
the entire application. The local automata are composed
to form one global NFA by call site replacement. We
replace every edge representing a procedure call with
control ﬂow through the automaton modeling the callee,
a common technique used elsewhere to construct system
dependence graphs [20] and also used by Wagner and
Dean in their work [36,37].
1. Add an e -edge from the source state of the call
edge to the entry state of the called automaton.
2. Add e -edges from every ﬁnal state of the called
automaton back to the destination state of the call
edge.
3. Remove the original call edge.
Where there was an edge representing a called function,
control now ﬂows through the model of that function.
Recursion is handled just as any other function call. Call
site replacement reintroduces e -edges, so the automaton
is reduced as before. Figure 7 presents the ﬁnal automa-
ton, without e -reduction for clarity.
There is no replication of automata. Call site
replacement links multiple call sites to the same proce-
dure to the same local automaton. Every ﬁnal state of
the called automaton has e -edges returning to all call
sites. Impossible paths exist: control ﬂow may enter the
automaton from one call site but return on an e -edge to
another (Figure 7). Such behavior is impossible in actual
program execution, but a malicious user manipulating
the executing program may use such edges in the model
as an exploit. In applications with thousands of proce-
dures and thousands more call sites, such imprecision
must be addressed.
Constructing an Interprocedural PDA. Introduction
of impossible paths is a classical program analysis prob-
lem arising from context insensitive analysis (see e.g.
[28]). A push-down automaton eliminates impossible
paths by additionally modeling the state of the applica-
tion’s run-time stack. An executing application cannot
follow an impossible path because the return site loca-
tion is stored on its run-time stack. A PDA is context
sensitive, including a model of the stack to precisely
mirror the state of the running application.
This is an interprocedural change. We construct
local automata as before. The e -edges added during call
though, now contain an identiﬁer
site replacement,
uniquely specifying each call edge’s
return state
(Figure 8). Each e -edge linking the source of a function
call edge to the entry state of the called automaton
main
write
push B
line
end
push A
push C
write
A
pop A
pop C
C
close
write
close
B
pop B
Figure 8: PDA Model. The e -edges into and out of a called
automaton are paired so that only a return edge corresponding
to the edge traversed at call initiation can be followed.
pushes the return state identiﬁer onto the PDA stack,
just as the executing program pushes the return address
onto the run-time stack. The e -edges returning control
ﬂow from the callee pop the identiﬁer from the PDA
stack, mirroring the application’s pop of the return
address from its run-time stack. Such a pop edge is tra-
versed only when the identiﬁer on the edge matches the
symbol at the top of the stack. The identiﬁers on the e -
edges deﬁne matched sets of edges. Only return edges
that correspond to a particular entry edge may be tra-
versed when exiting the called automaton. Since a PDA
tracks this calling context,
impossible paths cannot
exist.
We link local automata using modiﬁed call site
replacement:
1. Uniquely mark each local automaton state that is
the target of a non-system call edge.
For each non-system call edge, do steps 2, 3, and 4:
2. Add an e -edge from the source state of the edge to
the entry state of the destination automaton. Label
the e -edge with push X, where X is the identiﬁer at
the target of the call edge.
3. Add an e -edge from each ﬁnal state of the destina-
tion automaton to the target of the call edge. Label
each e -edge with pop X, where X is the identiﬁer
from step 2.
4. Delete the original call edge.
=
,
,
interprocedural
Formally,
Q S
(
,
,
the
let
PDA be
, where Q is the set of states, S
,
)
,
P
q0 Z 0 F
is the input alphabet, G
is the stack alphabet, d
is the
transition relation, q0 is the unique entry state, Z0 is the
initial stack conﬁguration, and F is the set of accepting
)
,
states. Given local NFA models
i q0 i, Fi
(
,
Qi
Ai
=
,
i
,
e
e
e
e
e
e
G
d
S
d
for the procedures, the PDA P for the program is given
by:
¨=
Q
Qi
i
ID ID is the destination identifier of a call edge
}
of the initially executed automaton
 are the ﬁnal states of the initially executed
¨=
i
,
q0
Z 0
F
i
{
=
v0=
˘=
=
F0
automaton
d q a e
,
p e,(
(
remote call
,
is a procedure call with
ﬁed by ID
p e,(
,
is a procedure call with
ﬁed by ID
p ID,(
d q e
,
(
) if
) if
) if
)
=
ID
)
=
)
=
d q e
,
(
i s.t. q
pa
, for a a
i
,
i r s.t. q
=
p
ra
q0 a,
, where a
 and r is identi-
i
,
i r s.t. r
pa
q Fa
, where a
 and p is identi-
i
The initially executed automaton, here denoted by A0, is
that modeling the function to which the operating sys-
tem ﬁrst transfers control, e.g. _start or main.
Unfortunately, a PDA is not a viable model in an
operational setting. In a straightforward operation of the
automaton, the run-time stack may grow until it con-
sumes all system resources. In particular, the stack size
is inﬁnite in the presence of left recursion. To counter
left recursion challenges, Wagner and Dean operate the
PDA with an algorithm similar to the post* algorithm
used in the context of model checking of push-down
systems [10]. They demonstrate the algorithm to be pro-
hibitively expensive [36,37]. Addressing imprecision
requires a more reasonable approach.
3.4 Optimizations to Address Sources of Impre-
cision
Imprecisions in the models arise from impossible paths,
context insensitive analysis, and malicious argument
manipulation. We develop several optimizations that tar-
get these particular sources of imprecision while main-
taining efﬁciency.
3.4.1 Impossible Paths
Discarding push-down automata as not viable requires
impossible paths to be readdressed. Impossible paths
arise at the ﬁnal states of automata that are spliced into
multiple call sites. The e -return edges introduce diver-
gent control ﬂow where no such divergence exists in the
application. We have developed several NFA model
optimizations to reduce the effect of return edges upon
the paths in the model.
Dead Automata Removal. A leaf automaton is a
local automaton that contains no function call edges.
Any leaf automaton that contains no remote system call
edges is dead–it models no control ﬂow of interest. Any
other local automaton that contains a call edge to the
dead leaf may replace that call edge with an e -edge. This
continues, recursively, backward up the call chain. To
eliminate impossible paths introduced by linking to a
dead automaton, we insert this dependency calculation
step prior to call site replacement.
Automata Inlining. Recall that in call site replace-
ment, all calls to the same function are linked to the
same local automaton. Borrowing a suitable phrase from
compilers, we use automata inlining to replace each call
site with a splice to a unique copy of the called automa-
ton. Impossible paths are removed from this call site at
the expense of a larger global automaton. In theory, the
global automaton may actually be smaller and less
dense because false edges introduced by impossible
paths will not be present, however we have generally
found that
the state space of the automaton does
increase signiﬁcantly in practice.
Single-Edge Replacement. An inlining special case,
single-edge replacement is a lightweight inlining tech-
nique used when the called automaton has exactly one
edge. The function call edge is simply replaced with a
copy of the edge in the callee. This is inexpensive inlin-
ing, for no states nor e -edges are added, yet the model
realizes inlining gains.
Bounded Stack Model. Revisiting the idea of a PDA
model, we ﬁnd that both the problems of inﬁnite left
recursion and, more generally, unbounded stacks may
be solved simply by limiting the maximum size of the
run-time stack. For some N, we model only the top N
elements of the stack; all pop edges are traversed when