Mode is the travel mode, Speed_ f
is the speed fac-
tor (Speed_ f > 1.0 means a decoy may move faster
than others and vice versa), and Speed_dev depicts the
velocity stability of the decoy.
• G deﬁnes the GPS parameters of a decoy under
form of
different
[(cid:2)Modei , Accuracyi, Accuracy_devi , U pdate_ti(cid:3)]g,
where Mode is the travel mode (besides the travel modes
deﬁned above, we introduce a new mode non-moving
travel modes. G is
in
the
Fig. 3. An Example of a Social & Travel Behavior Pattern.
so as to simulate the GPS error when a decoy is not
moving), Accuracy, Accuracy_dev, and U pdate_t
are respectively the positioning accuracy, the deviation
of accuracy, and the update interval of
the decoy’s
simulated locations.
The decoys’ patterns and proﬁles are used to depict
human-like decoys with different behaviors. Here, the social
and travel behavior pattern refers to a high-level description of
daily activities and travel patterns of a group of people, while
the personalized proﬁle refers to speciﬁc places and moving
behaviors of a decoy. In particular, a social and travel behavior
pattern describes possibly different behaviors of a kind of
people on different days of a week. For example, many people
usually go to work during weekdays, but stay at home or go to
the supermarket/theater on weekends. With this type of social
pattern, at the same time of 14:00, a person’s location may be
at a company on Monday while at a supermarket on Sunday.
Another example of social behavior pattern for hospital staff
may be a little different, whereby their work schedule may
include night shifts and weekends. In addition, social and
travel patterns may also need to include other factors such
as the travel mode since some people may prefer bicycling
for short distance while some may just drive all the time.
By composing different patterns and proﬁles, we can general
different kinds of decoys. Figure 3 shows an example of a
social pattern for a decoy, and Figure 4 shows an example of
a decoy’s proﬁle.
The decoy’s patterns and proﬁles can be obtained via various
means, such as user input, common knowledge or results from
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
KANG et al.: MoveWithMe: LOCATION PRIVACY PRESERVATION FOR SMARTPHONE USERS
717
Fig. 5. An Example of the State Transition Diagram.
and the status si indicates that a decoy is staying at a place i.
As for now, the set  equals to {≥}, where “≥” indicates that
the stay time of a decoy at a status is larger or equal to the
estimated stay time t. If a decoy stays at home at the beginning
of a day, the initial state s will be home. Since we mainly use
the probabilistic automaton to simulate the transition among
different speciﬁc places (status) under different conditions
(input symbols), the ﬁnal states F in our system is set to an
empty set.
Since the probability matrices in the decoy’s pattern only
depict the transit probabilities among different types of places,
to implement the probabilistic automation, we also need to
calculate the transition probabilities among a set of speciﬁc
places. Let M(i, b, j ) denote the probability that a decoy
transits from the place (state) i
to the place j when the
input symbol is b. Equations 1 and 2 show how to calculate
M(i, b, j ).
M(i, b, j ) = (cid:2)
For any i and j (1 ≤ i, j ≤ s), we have:
b = “ ≥ ”
f (i, j )
(cid:3)
(1 ≤ i, j ≤ s,
b ∈ {≥})
f (i, j ) = Pw(t).PT ypei ,T ype j
× SP j .W sw
(1)
(2)
where T ypei and T ype j are the types of place i and j,
respectively.
Now we can use the probabilistic automaton to simulate the
transitions of places. For example, if we want to simulate the
decoy’s movement at 10am on Friday (w = 5), we ﬁrst retrieve
the transition probability matrix from its pattern in Figure 3,
which is the following:
P5(8 : 00 − 11 : 30).P =
⎡
⎣ 0.2
0.8
0.5
⎤
⎦
0.6
0.1
0.0
0.2
0.1
0.5
Given the above probability matrix which only describes
the transition probability between the place types, we fur-
ther calculate the transition probabilities between the ﬁve
exact places (as shown in Figure 4) that
the decoy may
visit. The transition probabilities are represented as M≥ and
Figure 5 illustrates the probabilistic automaton constructed
Fig. 4. An Example of a Decoy’s Proﬁle.
mining real trajectory datasets. In this work, we assume that
a set of patterns and proﬁles are already been generated, and
leave the pattern and proﬁle generation in the future work.
D. Decoy Simulator
The decoy simulator component takes a set of social and
travel behavior patterns and personalized proﬁles as the inputs
and then simulates a set of corresponding decoys. For each
decoy, there are several steps to simulate its movements:
1) Initialization:
In our system, a decoy is described
by a pair of pattern and proﬁle. For example, as shown
in Figures 3 and 4, the combination of “Pattern_student_0001”
and “Proﬁle_Alice” depicts a student Alice who is studying at
New York University (NYU). The decoy simulator will load
the pattern and proﬁle during the initialization phase.
2) State Transition: We model the movements of a decoy
as a set of state transitions. For example, if the decoy Alice
left home, went to NYU in the morning, and went to the
Subway after class at noon, the states and transitions will then
be “home,” “home → NYU,” “NYU,” “NYU → Subway,”
“Subway”. Formally, we employ the probabilistic automaton
to model the decoy’s transitions among different places:
Deﬁnition 3: A probabilistic automaton [44] is a tuple
(cid:2)S, , s, F, M(cid:3), which describes a machine that is in one of
the ﬁnite states at any given time, and whose state changes
according to the transition probabilities with respect to a
sequence of input symbols:
• S = {s1, . . . , sn} deﬁnes a ﬁnite set of states.
•  denotes a ﬁnite set of input symbols.
• s denotes an initial state.
• F deﬁnes a set of designated ﬁnal states.
• M deﬁnes the transition probability function from S × 
to [0, 1]n.
In our system, the set of status S equals to SP (a set of
speciﬁc places deﬁned by the decoy’s personalized proﬁle),
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
718
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 15, 2020
0.1, respectively, which means the decoy may be more likely
to drive than to walk.
b) Step 2 (Obtain route): Once the travel mode m is
determined, the simulator will send out a request using Google
Directions API to obtain the route from (SP i .Lat,SPi .Lng)
to (SP j .Lat,SP j .Lng) at the travel mode m. The obtained
route includes the estimated travel
time and a series of
segments and timestamps. If no result could be returned by
the Google Directions API, the simulator will try a different
travel mode such as driving until getting a route.
c) Step 3 (Speed obfuscation): Given the length and the
travel time of the segments returned by the Google Directions
API, we can further calculate the moving speeds of the
speeds obtained in
decoy at these segments. However, the
) may contain too many
this way (denoted as Speedsegi
constant speeds for a sequence of continuous road segments,
e.g., “60 km/h,” “60 km/h,” . . ., “60 km/h”. This does not
look like real human whose traveling speeds are never so
constant. Also, constant speeds form unique patterns that can
be easily caught by data mining tools. To simulate the decoy’s
moving speed in a better way, we multiply Gaussian noise
γi = Gaussian(MBm .speed_ f,MBm .speed_dev) to the
directly computed segment speed.
Decoy_Speedsegi
= Speedsegi
× γi;
(4)
d) Step 4 (Geographic position obfuscation): Not only
we cannot use the speeds directly calculated from the opti-
mal travel route as discussed above, we should not use the
exact optimal route for the decoy either. This is because
real GPS positions are never 100% accurate and trajecto-
ries formed by real GPS positions are not as smooth as
the optimal route. To mimic the real human’s trajectory,
we currently simulate the GPS accuracy rate based on the
decoy’s travel mode m, which could be extended to a
more complicated model
includes weather conditions
or other factors. For each position on the optimal
travel
route (denoted as pos = (cid:2)latitude, longitude(cid:3)), we ﬁrst
generate a GPS accuracy rate α = Gaussian(0, Gaussian
(Gm .accuracy,Gm.accuracy_dev)). Then, we randomly gen-
erate an angle β and add it to the position pos:
that
Decoy.latitudei = posi .latitude + α · sin(β)
Decoy.longitudei = posi .longitude + α · cos(β)
(5)
Finally, the decoy’s positions are published at an interval
Gm .update_t to simulate the GPS module which has different
updating rates under different circumstances.
Figure 6 (c) shows the decoy’s trajectory obtained by our
approach, where we can see that it behaves more like a real
human than the optimal route in Figure 6 (b).
E. Request Interceptor
The request interceptor component is in charge of analyzing
user’s requests, mixing the real locations and the decoys’
locations when sending out the location-based service requests
to the service providers. There are four steps to realize the
request interception:
Fig. 6. Comparison of Real Trajectories and Fake Trajectories.
based on M≥.
M≥ =
⎡
⎢⎢⎢⎢⎣
0.2
0.8
0.5
0.5
0.5
0.6
0.1
0.0
0.0
0.0
0.1
0.05
0.25
0.25
0.25
0.0
0.0
0.0
0.0
0.0
⎤
⎥⎥⎥⎥⎦
0.1
0.05
0.25
0.25
0.25
Each time the decoy arrives at a place with T ypei, the sim-
ulator will generate its stay time tstay following the Gaussian
distribution and the parameters in its pattern component T ,
as shown in Equation 3.
tstay = Gaussian(TT ypei
.mean,TT ypei
.dev)
(3)
When the decoy stays at the place equals to or longer than
tstay, the simulator will take “≥” as the input symbol to the
probabilistic automaton and ﬁnd out the next place that the
decoy may visit.
3) Movement Simulation: From the previous state transition
phase, we obtain the places that the decoy will visit. The
movement simulation will generate the detailed path between
these places. A straightforward approach is to calculate the
routes between these places (stay points) and then choose
the positions along the routes. However, such an approach
will result in constant moving speed and precise positions,
which may be easily identiﬁed as fake trajectories by attackers.
Figure 6 illustrates this problem. Figure 6 (a) is a real user’s
daily trajectory recorded obtained from a smartphone’s GPS.
Figure 6 (b) is a fake trajectory passing by the same stay points
and is obtained using the aforementioned naive approach, from
which we can see that this fake trajectory is very smooth.
In order to make the decoy’s trajectory look similar to a
real human’s trajectory, the movement simulation takes the
following steps:
a) Step 1 (Determine travel mode): The simulator will
ﬁrst calculate the distance d between the origin placei and
the destination place j , and then ﬁnd the distance range in the
travel mode matrix M (Figure 3) that satisﬁes Mk.dis_min ≤
d < Mk.dis_max or closest to d when d does not fall in any
range. Next, based on the probabilities of each travel mode
within this distance range, i.e. Mk.Pd, Mk.Pt, Mk.Pb,
and Mk.Pw, the simulator generates a travel mode for the
decoy. For example, if the distance between the decoy’s current
location to the next place is 4 km, the 2nd row in M will
be selected since its distance range is between 0.5 km and
5 km. The corresponding probabilities for driving, public
transit system, bicycling, and walking are 0.4, 0.3, 0.2 and
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
KANG et al.: MoveWithMe: LOCATION PRIVACY PRESERVATION FOR SMARTPHONE USERS
719
1) Detect the location information leakage: The inter-
ceptor checks each of the user’s service request. This
is achieved by intercepting the requesting URL. Speciﬁ-
cally, we ﬁrst override the function “shouldOverrideUrl-
Loading” of class “WebViewClient” in Android, and
the function “shouldStartLoadWith” of class “UIWe-
bView” in iOS. We deﬁne a set of regex (Regular
Expressions) rules to detect if a URL contains loca-
tion information. For example, if
the requesting URL