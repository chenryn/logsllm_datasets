Modeling and detection. If clock offsets in two mes-
sages are highly correlated (ρ > 0.8), their relationship
can be linear. So, CIDS describes them as a linear re-
gression model: OM2 [k] = αOM1[k] +e corr[k], where OMi
denotes the average clock offset of message Mi at step
k, α the regression parameter, and ecorr[k] the identiﬁca-
tion error. As per-message detection, message-pairwise
detection is also based on a linear model. Thus, we ap-
ply the same detection method, CUSUM. Since message-
pairwise detection seeks intrusions from a different per-
spective than per-message detection, it reduces false pos-
itive/negative results. Note, however,
that message-
pairwise detection is only applicable when two mes-
sages’ clock offsets are highly correlated, whereas per-
message detection is applicable to any periodic message.
Moreover, albeit effective, it requires pairwise computa-
tions. Therefore, we use message-pairwise detection as
an optional feature of CIDS. We will later show via ex-
perimental evaluations how message-pairwise detection
further improves the performance of CIDS.
4.4 Veriﬁcation
To reduce possible false positives/negatives, CIDS also
performs a veriﬁcation process. Suppose that a possible
intrusion was alarmed due to a high identiﬁcation error
when verifying message Vi, the i-th message of V . Al-
though such a high error can be due to an intrusion, it
can also be due to an incorrect computation of average
clock offset. In Section 4.1, we considered E[Δdi] =0
and could thus extract and determine the average clock
offset. Although this is true in most cases, occasionally
E[Δdi] = 0, which affects the accuracy of deriving the
true clock offset and thus the detection result. In CAN,
E[Δdi] = 0 only occurs if the transmission of Vi was de-
layed due to the bus being busy or its transmitter losing
arbitration when attempting to send Vi. Note that the lat-
ter also results in the bus being busy before the trans-
mission/reception of Vi. Thus, CIDS also checks if the
possibility of E[Δdi] = 0 is the main cause of a (possibly
false) alarm of intrusion by verifying whether the CAN
bus was busy right before receiving Vi. This way, CIDS
enhances its detection accuracy. However, as discussed
before, usually E[Δdi] =0 in an actual CAN bus due to
its high speed, its messages having short lengths, and low
bus load. In other words, the nature of CAN bus commu-
nication helps CIDS reduce false positives/negatives.
918  25th USENIX Security Symposium 
USENIX Association
(a) CAN bus prototype.
(b) The vehicle used for experiment.
(c) Connection to the vehicle.
Figure 4: Different evaluation settings: (a) CAN bus prototype; (b) Honda Accord 2013 used for experiments on real
vehicle; and (c) three prototype nodes communicating with real ECUs through the OBD-II port.
4.5 Root-cause Analysis
When an intrusion is detected for some message
ID, CIDS can also identify which compromised ECU
mounted the attack.
It can extract the clock skew for
that attacked message ID, compare it with other clock
skew values extracted from other message IDs, and ex-
ploit the comparison result in determining whether they
originated from the same transmitter. This way, CIDS can
at least reduce the scope of ECUs which may (or may
not) have mounted the attack, thus facilitating a root-
cause analysis.
5 Evaluation
We now validate that clock skews can be used as ﬁnger-
prints of transmitter ECUs, and evaluate the performance
of CIDS on a CAN bus prototype and real vehicles.
CAN bus prototype: As shown in Fig. 4(a), we built
a prototype with 3 CAN nodes, each of which consists of
an Arduino UNO board and a SeeedStudio CAN shield.
The CAN bus shield consists of a Microchip MCP2515
CAN controller, MCP2551 CAN transceiver, and a 120Ω
terminal resistor to provide CAN bus communication ca-
pabilities. This prototype was set up to operate at a
500Kbps bus speed as in typical CAN buses. The ﬁrst
node A was programmed to send messages 0x11 and
0x13 every 50ms, and the second node B to send mes-
sage 0x55 at the same frequency. The third node R was
programmed to run CIDS.
Real vehicle: A 2013 Honda Accord (Fig. 4(b)) is also
used for our experiments in an isolated and controlled
(for safety) environment. As shown in Fig. 4(c), via the
On-Board Diagnostic (OBD-II) system port [3], we con-
nected our CAN bus prototype nodes — which function
as an adversary or CIDS — to the in-vehicle network.
Through the OBD-II port, the three nodes were able to
communicate with real ECUs.
CAN log data: To further validate that CIDS’s ﬁn-
gerprinting is applicable to other vehicles, we also re-
fer to CAN trafﬁc data logged from a Toyota Camry
2010 by Ruth et al. [36] and data logged from a Dodge
Ram Pickup 2010 by Daily [11]. Both data were logged
through a Gryphon S3 and Hercules software. In the Toy-
ota Camry 2010, there were 42 distinct messages trans-
mitted on the CAN bus: 39 of them sent periodically at
intervals ranging from 10ms to 5 seconds, and 3 of them
sent sporadically. In the Dodge Ram Pickup 2010, there
were 55 distinct messages which were all sent periodi-
cally on the CAN bus.
In order to identify which messages originate from the
same real ECU and thus exploit it as a ground truth, we
used the naive method discussed in [32]. The messages,
which originate from the same ECU and have the same
preset message interval, were shown to have the same
number of transmissions on the bus, when traced for at
least a few minutes. Such a method can be an alterna-
tive to ﬁngerprinting, but it requires pairwise compar-
isons and cannot be completed in real time as required
in the design of CIDS, which is essential for intrusion de-
tection in real in-vehicle networks.
While running CIDS, we determined offsets and skews
for every 20 received samples, i.e., N = 20, and set κ = 5.
5.1 Clock Skew as a Fingerprint
We ﬁrst evaluate the validity of CIDS’s ﬁngerprinting
of the transmitter ECUs based on the estimated clock
skews. We evaluate skew estimates in microseconds per
second (μs/s) or parts per million (ppm).
CAN bus prototype. Fig. 5(a) plots our evaluation
results of CIDS’s ﬁngerprinting on the CAN bus proto-
type: accumulated clock offsets of messages 0x11, 0x13,
and 0x55. Note that the slopes in this ﬁgure represent
the estimated clock skews. All the derived accumulated
clock offsets were found to be linear in time, i.e., con-
stant estimated skews. Messages 0x11 and 0x13, both of
which were sent from node A, exhibited the same con-
stant clock skew of 13.4ppm. On the other hand, the
message 0x55 sent from a different node B showed a dif-
ferent clock skew of 27.2ppm. Thus, the clock skews
derived by CIDS can be used to differentiate ECUs.
USENIX Association  
25th USENIX Security Symposium  919
0x11 by A
0x13 by A
0x55 by B
]
s
m
[
t
e
s
f
f
]
s
m
[
t
e
s
f
f
l
O
k
c
o
C
d
e
t
a
u
m
u
c
c
A
l
10
8
6
4
2
0
l
O
k
c
o
C
d
e
t
a
u
m
u
c
c
A
l
]
s
m
[
t
e
s
f
f
l
O
k
c
o
C
d
e
t
a
u
m
u
c
c
A
l
600
500
400
300
200
100
0
0
50
40
30
20
10
0
0
0x1B0 by A
0x1D0 by A
0x1A6 by B
0x294 by C
0x295 by C
0x309 by D
200
400
600
800
1000
1200
1400
1600
1800
2000
Time [Sec]
(b) Honda Accord 2013.
0x200 by A
0x215 by B
0x300 by B
0x6F9 by C
0x3E6 by C
0x6FD by C
0x700 by C
0x101 by D
0x6FE by D
20
40
60
Time [Sec]
80
100
120
(d) Dodge Ram Pickup 2010.
0
50
100
150
Time [Sec]
200
250
300
(a) CAN bus prototype.
]
s
m
[
t
e
s
f
f
O
k
c
o
C
d
e
l
t
l
a
u
m
u
c
c
A
100
90
80
70
60
50
40
30
20
10
0
0
0x20 by A
0xB2 by A
0x223 by B
0x224 by B
0x2C1 by C
0x2C4 by D
0x3A0 by E
0x4C3 by F
0x620 by G
0x2C1
20
40
60
80
100
Time [Sec]
120
140
160
180
200
(c) Toyota Camry 2010.
Figure 5: Accumulated clock offsets derived by CIDS in different evaluation settings.
Honda Accord 2013. For CIDS’s evaluation on a
real vehicle, the CAN prototype nodes logged the in-
vehicle CAN trafﬁc of the Honda Accord 2013, and
ran CIDS on messages 0x1B0, 0x1D0, 0x1A6, 0x294,
0x295, and 0x309. The approach in [32] was adopted
to verify that messages {0x1B0, 0x1D0} were sent from
the same ECU, {0x294, 0x295} both sent from another
ECU, whereas others were sent from different ECUs.
Utilizing these facts, one can conclude from Fig. 5(b)
that the clock offsets and the skews derived in CIDS are
equivalent only for those messages sent from the same
ECU; 0x1B0 and 0x1D0 showed a skew of 78.4ppm,
0x294 and 0x295 showed a skew of 199.8ppm, while
messages 0x1A6 and 0x309 showed very different skews
of 265.7ppm and 95.78ppm, respectively. This result
again shows that clock skews between different ECUs
are distinct and can thus be used as the ﬁngerprints of
the corresponding ECUs.
Toyota Camry 2010. To show that the applicability
of CIDS’s ﬁngerprinting is not limited to the speciﬁc ve-
hicle model used, we also conducted experiments on a
different vehicle: running CIDS’s ﬁngerprinting on the
Toyota Camry logged data. Similarly to the real vehicle
evaluation in Section 5.1, the approach in [32] was used
as the ground truth. It was veriﬁed that messages {0x20,
0xB2} within the CAN log data were all sent from some
ECU A. Also, {0x223, 0x224} were both sent from some
ECU B, whereas 0x2C1, 0x2C4, 0x3A0, 0x4C3, and
0x620 were each sent from a different ECU. As shown
in Fig. 5(c), messages 0x20 and 0xB2 both showed a
clock skew of approximately 345.3ppm, whereas 0x223
and 0x224 showed a different clock skew of 276.5ppm.
0x2C4, 0x3A0, 0x4C3, and 0x620 showed very different
clock skews of 460.1ppm, 142.5ppm, 26.1ppm and 58.7
ppm, respectively.
We made an interesting observation on message
0x2C1, showing a clock skew of 334.1ppm, which was
different from the skews of messages {0x20, 0xB2} only
by 3%, despite the fact that it was sent by a different
ECU. This may confuse CIDS in determining whether
they were sent by the same ECU or not. However, in
such a case, CIDS can further examine the correlation be-
tween clock offsets and can thus ﬁngerprint with a higher
accuracy, which we will discuss and evaluate further in
Section 5.4.
For this vehicle,
Dodge Ram Pickup 2010. We also ran CIDS’s ﬁn-
gerprinting on the CAN log data of a Dodge Ram
Pickup 2010.
it was veriﬁed that
message 0x200 was sent from some ECU A, {0x215,
0x300} sent from B, {0x6F9, 0x3E6, 0x6FD, 0x700}
sent from C, and {0x101, 0x6FE} sent from D. Fig. 5(d)
shows that CIDS determined that 0x200 has a clock
skew of 351.7ppm, {0x215, 0x300} to have approxi-
mately 295.3ppm, {0x6F9, 0x3E6, 0x6FD, 0x700} to
have 24.5ppm, and {0x101, 0x6FE} to have 110.3ppm,
thus correctly ﬁngerprinting their transmitters.
These results of a Toyota Camry and a Dodge Ram
Pickup CAN log data again afﬁrm the fact that the clock
skews derived by CIDS are diverse and can indeed be
used as ﬁngerprints of in-vehicle ECUs. Moreover, they
920  25th USENIX Security Symposium 
USENIX Association
40
30
20
10
0
0
30
20
10
0
)
c
c
a
O
(
t
e
s
f
f
O
k
c
o
C
l
.
m
u
c
c
A
)
e
(
r
o
r
r
E
n
o
i
t
a
c
i
f
i
t
n
e
d
I
w/o attack
w/ attack
)
c
c
a