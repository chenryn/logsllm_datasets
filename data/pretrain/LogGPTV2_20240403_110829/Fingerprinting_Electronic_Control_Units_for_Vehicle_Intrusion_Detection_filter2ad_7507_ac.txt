### Modeling and Detection

When the clock offsets in two messages are highly correlated (with a correlation coefficient \(\rho > 0.8\)), their relationship can be approximated by a linear model. The Clock-based Intrusion Detection System (CIDS) describes this relationship using a linear regression model: 
\[ OM2[k] = \alpha \cdot OM1[k] + e_{corr}[k] \]
where \(OMi\) represents the average clock offset of message \(Mi\) at step \(k\), \(\alpha\) is the regression parameter, and \(e_{corr}[k]\) is the identification error.

For per-message detection, CIDS uses a linear model, and the same detection method, Cumulative Sum (CUSUM), is applied for message-pairwise detection. Message-pairwise detection complements per-message detection by providing a different perspective, thereby reducing false positives and negatives. However, message-pairwise detection is only applicable when the clock offsets of two messages are highly correlated, whereas per-message detection can be used for any periodic message. Although effective, message-pairwise detection requires additional pairwise computations. Therefore, it is implemented as an optional feature in CIDS. Experimental evaluations will demonstrate how message-pairwise detection enhances the performance of CIDS.

### Verification

To minimize false positives and negatives, CIDS includes a verification process. If a potential intrusion is detected due to a high identification error in verifying message \(Vi\), the i-th message of set \(V\), this high error could be due to an actual intrusion or an incorrect computation of the average clock offset. In Section 4.1, we assumed \(E[\Delta d_i] = 0\) and used this to extract and determine the average clock offset. While this assumption holds true in most cases, occasionally \(E[\Delta d_i] \neq 0\), which can affect the accuracy of the derived clock offset and the detection result.

In CAN networks, \(E[\Delta d_i] \neq 0\) occurs if the transmission of \(Vi\) was delayed due to the bus being busy or the transmitter losing arbitration. CIDS checks whether the CAN bus was busy right before receiving \(Vi\) to verify if \(E[\Delta d_i] \neq 0\) is the primary cause of a (possibly false) intrusion alarm. This verification enhances the detection accuracy. However, in a typical CAN bus, \(E[\Delta d_i] = 0\) due to its high speed, short message lengths, and low bus load, which naturally helps CIDS reduce false positives and negatives.

### Root-Cause Analysis

When an intrusion is detected for a specific message ID, CIDS can identify the compromised ECU that mounted the attack. It does this by extracting the clock skew for the attacked message ID, comparing it with clock skews from other message IDs, and using the comparison results to determine if they originated from the same transmitter. This narrows down the scope of potentially compromised ECUs, facilitating a root-cause analysis.

### Evaluation

We validate the use of clock skews as fingerprints for transmitter ECUs and evaluate the performance of CIDS on both a CAN bus prototype and real vehicles.

#### CAN Bus Prototype

As shown in Figure 4(a), we built a prototype with three CAN nodes, each consisting of an Arduino UNO board and a SeeedStudio CAN shield. The CAN shield includes a Microchip MCP2515 CAN controller, MCP2551 CAN transceiver, and a 120Ω terminal resistor. The prototype operates at a 500 Kbps bus speed. Node A sends messages 0x11 and 0x13 every 50 ms, node B sends message 0x55 at the same frequency, and node R runs CIDS.

#### Real Vehicle

A 2013 Honda Accord (Figure 4(b)) was used for experiments in a controlled environment. As shown in Figure 4(c), our CAN bus prototype nodes were connected to the in-vehicle network via the On-Board Diagnostic (OBD-II) port. The three nodes communicated with real ECUs through the OBD-II port.

#### CAN Log Data

To further validate CIDS's fingerprinting, we analyzed CAN traffic data logged from a Toyota Camry 2010 and a Dodge Ram Pickup 2010. The Toyota Camry 2010 had 42 distinct messages, 39 of which were sent periodically, and 3 sporadically. The Dodge Ram Pickup 2010 had 55 distinct periodic messages. We used a naive method to identify messages originating from the same ECU, which showed that messages with the same preset interval have the same number of transmissions over a few minutes. This method, while useful, cannot be completed in real time, unlike CIDS.

### Clock Skew as a Fingerprint

We evaluated the validity of CIDS's fingerprinting based on estimated clock skews, measured in microseconds per second (μs/s) or parts per million (ppm).

#### CAN Bus Prototype

Figure 5(a) shows the evaluation results for the CAN bus prototype, plotting the accumulated clock offsets of messages 0x11, 0x13, and 0x55. The slopes represent the estimated clock skews. Messages 0x11 and 0x13, both sent from node A, exhibited the same constant clock skew of 13.4 ppm. Message 0x55, sent from node B, showed a different skew of 27.2 ppm, confirming that clock skews can differentiate ECUs.

#### Honda Accord 2013

For the Honda Accord 2013, CIDS was run on messages 0x1B0, 0x1D0, 0x1A6, 0x294, 0x295, and 0x309. Using the approach in [32], we verified that messages {0x1B0, 0x1D0} and {0x294, 0x295} were sent from the same ECUs, while others were from different ECUs. Figure 5(b) shows that 0x1B0 and 0x1D0 had a skew of 78.4 ppm, 0x294 and 0x295 had 199.8 ppm, and 0x1A6 and 0x309 had very different skews of 265.7 ppm and 95.78 ppm, respectively. This confirms that clock skews can serve as unique fingerprints for ECUs.

#### Toyota Camry 2010

For the Toyota Camry 2010, CIDS was run on the logged data. Messages {0x20, 0xB2} and {0x223, 0x224} were verified to be from the same ECUs, while others were from different ECUs. Figure 5(c) shows that 0x20 and 0xB2 had a skew of approximately 345.3 ppm, 0x223 and 0x224 had 276.5 ppm, and 0x2C1, 0x2C4, 0x3A0, 0x4C3, and 0x620 had different skews. An interesting observation was that 0x2C1 had a skew of 334.1 ppm, close to 0x20 and 0xB2, but from a different ECU. CIDS can further examine the correlation between clock offsets to improve fingerprinting accuracy.

#### Dodge Ram Pickup 2010

For the Dodge Ram Pickup 2010, CIDS was run on the logged data. Figure 5(d) shows that 0x200 had a skew of 351.7 ppm, {0x215, 0x300} had approximately 295.3 ppm, {0x6F9, 0x3E6, 0x6FD, 0x700} had 24.5 ppm, and {0x101, 0x6FE} had 110.3 ppm, correctly fingerprinting their transmitters.

These results affirm that the clock skews derived by CIDS are diverse and can be used as fingerprints for in-vehicle ECUs.