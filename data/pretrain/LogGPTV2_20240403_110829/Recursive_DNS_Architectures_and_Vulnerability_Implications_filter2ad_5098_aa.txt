title:Recursive DNS Architectures and Vulnerability Implications
author:David Dagon and
Manos Antonakakis and
Kevin Day and
Xiapu Luo and
Christopher P. Lee and
Wenke Lee
Recursive DNS Architectures and Vulnerability Implications
David Dagon1, Manos Antonakakis1, Kevin Day2, Xiapu Luo1, Christopher P. Lee3, and Wenke Lee1
1College of Computing, Georgia Institute of Technology,
{dagon,manos,csxpluo,wenke}@cc.gatech.edu
2 your.org
PI:EMAIL
3College of Engineering, Georgia Institute of Technology,
PI:EMAIL
Abstract
DNS implementers face numerous choices in architecting
DNS resolvers, each with profound implications for security.
Absent the use of DNSSEC, there are numerous interim tech-
niques to improve DNS forgery resistance. We explore how
different resolver architectures can affect the risk of DNS poi-
soning.
The contributions of this work include: (A) We create a
comprehensive, accurate model of DNS poisoning. We show
how this model is more sensitive than other previous ex-
planations of DNS poisoning.
(B) We further catalog the
major architectural choices DNS implementers can make in
query management. We note real-world instances where these
choices have weakened the security of resolvers, and mea-
sure the impact on security using our model. Our study re-
vealed numerous, previously unknown vulnerabilities in com-
mon DNS servers.
1 Introduction
The Domain Name System (DNS) [32, 33] plays a critical
and often unexamined role in Internet communications. The
importance of DNS comes from two essential properties:
• DNS resolution happens ﬁrst, as a precursor to almost
every other protocol, and
• with few exceptions, successful DNS resolution is essen-
tial to the operation of all other protocols (mail, web,
VOIP). Without a working, secure resolution system,
other protocols are at risk.
Security problems have plagued DNS implementations for
years. One class of security ﬂaws is DNS poisoning, where
remote attackers forge DNS responses to pollute recursive re-
solvers with malicious records. DNS poisoning attacks can
transcend vendor-speciﬁc implementations. Most recently, se-
curity researcher Dan Kaminsky [23] noted a ﬂaw in the DNS
protocol that allowed quick, deterministic DNS poisoning of
nearly every RFC-compliant resolver. This required the rapid
update of millions of DNS servers, used by hundreds of mil-
lions of users—a near replacement of the existing DNS foot-
print on the Internet.
In a general sense, there are two classes of complementary
solutions to DNS poisoning: long-term improvements to resist
forgery attacks that implement cryptographic protections and
short-term solutions that help the Internet transition to more
secure architectures. Long term solutions, such technologies
as DNSSEC [6–8] and DNSCurve [13], generally require re-
placement of both the recursive and authority servers of the ex-
isting DNS tree. This has proven to be a complex, multi-year
process. By contrast, solutions that affect just the recursive
servers have proven easier to adopt. For example, source port
randomization (to mitigate the Kaminsky-class of poisoning
attacks) only requires a change to recursive server software.
Despite efforts to correct known bugs, there is a high poten-
tial for further vulnerabilities in the DNS protocol and speciﬁc
DNS server implementations. This potential has driven inter-
est in interim security solutions—technologies that fall short
of DNSSEC, but still make servers more resistant to DNS forg-
eries. DNS-0x20, for example, is an encoding technique used
by recursive domain name servers and makes it harder, but
not impossible, to poison caches [15]. By randomly ﬂipping
upper and lower case characters in domain names (e.g. ex-
ample.com transformed to ExAMpLe.CoM), and observing
the identical pattern repeated in the answer, this technique in-
troduces an extra source of entropy for the DNS transactions.
For the most part, DNS-0x20 requires only changes to the
DNS initiator’s recursive; the stub resolver is unaware of the
encoding scheme. Having DNS-0x20 functionality in recur-
sives signiﬁcantly improves the entropy for all iterative DNS
transactions. One drawback is that the entropy increases ex-
ponentially to the length of the domain name. Consequently,
small domain names (e.g ibm.com) and domain names with
few 0x20 capable characters (e.g., 163.com) will not signif-
icantly beneﬁt from DNS-0x20.
The IETF working group on DNS, DNS Extensions (DNS-
EXT) [19], has seen a tremendous number of proposals that
improve DNS security and make recursive resolution more
resistant to poisoning. The proliferation of DNS protective
solutions creates numerous options for DNS implementers:
they can choose between DNS-0x20, source port randomiza-
tion (SPR), tighter bailiwick logic [10], or other interim ﬁxes.
These solutions are described in other papers and IETF pro-
posals [2, 15].
In general, because some solutions result in
unwanted “on path” resolution failures, or come with high re-
source costs, not every vendor will pick the same mix of in-
terim technologies. Source port randomization, for example,
has proven to be resource intensive and may not be appropri-
ate for marginal platforms (e.g., embedded devices offering
DNS resolution). DNS-0x20 works in nearly every case, but
some authority servers employ non-compliant server load bal-
ancers, and some domains realize small beneﬁts. These costs
can be measured, but without a way to measure security im-
provements, the task of selecting appropriate DNS forgery re-
sistance technologies for a given platform becomes extremely
difﬁcult.
With the exception of bailiwick checking logic (which cre-
ates simple boolean conditions of cache/don’t-cache), this pa-
per provides a model of all of these security improvements to
DNS. Speciﬁcally, this paper provides the following contribu-
tions: First, we discuss in detail recent protocol vulnerabili-
ties in DNS and note how these motivate the need for interim
DNS security technologies. Second, we provide a comprehen-
sive model of DNS poisoning, so that on-path data attacks in
DNS can be fully understood, outside of any speciﬁc vendor
or technological context. Third, we survey the various interim
DNS security technologies and use our model to describe the
security beneﬁts to DNS architects. To demonstrate the util-
ity of our approach, our survey discovered several previously
unknown vulnerabilities in DNS resolvers. We further worked
with vendors to provide patches.
Section 2 provides a brief background on DNS resolution
and vulnerability vectors. Section 3 discusses our DNS poi-
soning model in detail and compares it to other previous mod-
els. In Section 4, we conduct a survey of DNS systems and
discover numerous instances of DNS poisonings along with a
large pool of DNS servers still vulnerable to trivial attack. Our
ﬁndings show the need to more short-term interim security im-
provements to DNS, ahead of DNSSEC. We use our model
of DNS poisoning to analyze options for improving selected
DNS resolvers. The appendix provides a script-based imple-
mentation of our model, so that DNS developers can evaluate
the beneﬁts of adopting speciﬁc interim security ﬁxes.
2 Background
We provide a brief overview of the Domain Name Sys-
tem (DNS), an infrastructure commonly used to map domain
names to IP addresses. We focus only on those aspects of
DNS relevant to DNS poisoning and defensive architectures.
A general and readable overview of DNS is found in [43].
DNS uses a tree structure to organize domain name-space
into a distributed database. A domain is a node in this tree,
with each label separated by a period.
A zone is a clique of nodes. The clique of nodes form a
contiguous tree structure, the top of which is called the start of
authority. Authority DNS servers answer queries about their
zones, either providing the mappings for leaf nodes or answer-
ing with referrals that indicate delegation of child zones to
other authority servers.
For our purposes,
there are four ﬁelds in any DNS
message—both queries and answers. The ﬁelds are the query,
the answer (which include RRset mappings between domains
and IPs), the authority ﬁeld, and the additional ﬁeld. The au-
thority ﬁeld is used in the case of referral answers. For exam-
ple, an authority for a zone can indicate downward delegation
of authority. With many exceptions (e.g., in the case of an
NS query), the authority ﬁeld is used to provide mappings be-
tween authorities for zones and hosts. This takes the form of
“glue records,” IP mappings of nameservers for child zones.
Ultimately, when an authority server answers directly from its
zone, it signals that the answer is “authoritative” by setting
header ﬂags.
To protect against malicious insertion of untrustworthy au-
thority records, name servers typically require answers to
be “in bailiwick.” That is,
they insist that the authority
record be in the same zone cut as the query. The rea-
soning is that a server should not be trusted to provide
answers about sibling zones—only child labels. Thus, if
one queries for host.example.com, answers that pro-
vide authority records for out-of-bailiwick zones (such as
www.google.com), are not trusted. Instead, recursive re-
solvers will iteratively re-query for the desired nameserver.
RFC 2181 [18] describes a range of trustworthiness for data
found in DNS answers. The most trustworthy information in
a DNS message (other than direct access to a zone ﬁle or an
AXFR) comes from authority data from an authority server.
The least trustworthy data, according to RFC 2181, comes
from additional information provided by authority servers.
Critically, RFC 2181 reafﬁrmed a reference in RFC 1034 4.3.4
(concerning negative caching) that the “authority section of an
authoritative answer may contain the SOA record for the zone
Figure 1. (a) Simpliﬁed DNS poisoning attack.
poison a DNS cache.
(b) Cumulative probability over time for an attacker to
from which the answer was obtained.” This property later be-
came the basis for the Kaminsky-class poisoning attack, which
is discussed below.
To help illustrate this process, Figure 1(a) shows selected
portions of a typical DNS query. A user begins with a query
(abbreviated as A?  in DNS nomenclature) from
a stub resolver to a recursive resolver. The recursive resolver
surfs the zone hierarchy to locate the appropriate authority for
the desired zone containing the domain and then iteratively
obtains the answer (noted as IN A).
2.1 DNS Poisoning Attacks
Figure 1(a) also illustrates typical attacks on DNS resolu-
tion. Of recent concern is the class of DNS attacks generally
known as DNS poisoning. These attacks, discussed in detail
in [15], generally follow a pattern:
• an attacker forces a recursive resolver to initiate a DNS
query,
• while the recursive resolver is waiting for the authority
resolver’s answer, the attacker forges numerous answers
to guess the transaction elements used in the recursive
resolver’s message. Conceptually, this is a packet race
between the correct answer and any successful guess the
attacker can send to the recursive.
With only 16-bit ID ﬁelds in the base DNS protocol, one
would expect to see more instances of DNS poisoning. Fig-
ure 1(b) illustrates why, with only 16-bits of entropy, DNS
transactions were not previously widely abused. The cumula-
tive probability of a successful poisoning is plotted on the y-
axis of Figure 1(b), from 0 to 1. Each spoofed answer has, in
65,536 chance of matching the transaction
the simplest case, a
components of the recursive’s query. As more attack packets
are sent over time, the attacker’s cumulative chance of suc-
cess improves, eventually reaching 1 when all 65, 536 possible
transactions values are guessed. But since DNS poisoning is a
1
type of packet race, often the correct answer will arrive and be
cached by the recursive server. The dimension of time, shown
on the x-axis of Figure 1(b) is critical. The time between a
recursive resolver’s query and the response from the author-
itative DNS server is about 100 milliseconds on the average
(with various local maxima, as noted in [15]). But TTL peri-
ods are (with some exceptions) typically days in length. Thus,
each time a round of spoofed packets (sent within millisec-
onds) fails to poison a recursive resolver, the attacker must
wait out the TTL period (days) before trying again. Though
they may eventually win the packet race, it may take weeks
or longer, depending on the cache period of the DNS server,
random restarts of the cache, random cache eviction events
followed by repeated queries, and other developments.
For this reason, DNS poisoning has historically proved dif-
ﬁcult, unless there were implementation errors in the DNS
server’s random number generator [25–29]. However, re-
searcher Dan Kaminsky recently observed a possible accel-
erator for simple DNS poisoning. Figure 2(a) illustrates the
operation of this attack. Instead of directly poisoning the an-
swer ﬁeld of a query, the attacker provides a malicious author-
ity ﬁeld in guessed answers. The attacker is free to query for
random child labels of a zone and, when a successful guess is
made, the meaningless answer is cached along with the mali-
cious NS record.
To poison the NS record for example.com, for exam-
ple, an attacker queries the victim recursive server for A?
$RAN DOM1.example.com, and then spoof answers that
contain two parts. The ﬁrst part has some arbitrary answer to
the query and the second part an authority answer that claims
a malicious IP is the new NS for the zone. If the attack is un-
successful and the correct answer (likely NXDOMAIN) arrives
ﬁrst, the attacker immediately asks the victim recursive for A?
$RAN DOM2.example.com, until successfully guessing
the transaction components of the recursive query. The mali-
cious component of the attack messages lies in the authority
update, not the answer ﬁeld. Superﬁcially, this is similar to
the Kashpureff poisoning attack of the 1990s, which padded
SOACacheDNS Query; ID=0xfe93A? www.google.comA?A?DNS Answer; ID=0xfe93IN A www.google.com64.233.167.99 ...IN AIN A’IN ADNS Answer; ID=0x6f12IN A www.google.com85.255.112.230 ...TimeActiveAttackActiveTTLPr[Success]AttackFigure 2. (a) Kaminsky-class poisoning where the attacker repeated uses random label within a domain
in attempt to continually spoof answers (b) Conceptual view of the Birthday Attack on DNS Resolution.
malicious “additional record” answers onto spoofed DNS an-
swers [42].
This attack strategy revolutionized DNS poisoning attacks
and reduced the time-to-success from weeks to mere seconds.
Since an attacker could always become a zone’s authority, the
consequences of such an attack were potentially more severe
than simple A-record manipulation. The attack enabled trivial
man-in-the-middle attacks, email manipulation/interception,
and VOIP tapping. Since Kaminsky-class poisonings allow
attackers to make unlimited guesses, cache manipulation is no
longer bounded by TTL parameters. Such attacks are now (ef-
fectively) bandwidth limited. In response, a multivendor patch
was released [41], which uses the general strategy of growing
the key space by using source port randomization (SPR).
The DNS birthday attack [38] (seen in Figure 2(b)) works
by convincing the recursive DNS server to make multiple, con-
current queries for the same label and then spooﬁng replies for
that label. This allows the spoofed packets to collide with any
one of the valid port and ID combinations to poison the cache.
If the recursive performs D outbound queries for the same la-
bel, then each spoofed packet from the attacker has D chances
to be right. Since this discovery, many DNS recursive server
implementations have adopted birthday protection to suppress
multiple queries for the same domain, with notable exceptions.
As a clariﬁcation point we should mention a small varia-
tion between the traditional “birthday problem” and the “DNS
birthday problem”. The traditional “birthday problem” con-
siders the probability of collision among a set uniformly ran-
dom n numbers. In the “DNS birthday problem” the set of
uniformly random numbers n is comprised from the (d, f)
combinations of the DNS transactions and their characteris-
tics, where d is the number of simultaneous queries originated
from the recursive DNS server (RDNS) and f the simultane-
ous attack packets targeting the RDNS. For the “DNS birth-
day problem” we are interested in collisions between distinct
values of d and f in all possible pairs of (di, fj), where i, j
are in the message space of d and f, respectively. Addition-
ally, the actual time window in the “DNS birthday problem”
is the period from the epoch when an RDNS sends the queries
(d) to the epoch when it receives the responses from an au-
thoritative DNS. In section 3, we conduct an in depth analysis
for various instances of f and d and their combinations. In
the same section, we consider what other defenses a host may
use to defend against DNS poisoning and provide a model to
evaluate the relative strength of each approach. While DNS-
SEC and related technologies may provide an ultimate solu-
tion, we argue that our survey of DNS attacks counsels for
an improved understanding of short-term responses. In Sec-
tion 4, we track the deployment of source port randomization
(SPR) as a response to the Kaminsky-class attack. We note
that, months after patches became available, a large number of
hosts evidently do not exhibit SPR. We further observe numer-
ous instances of DNS poisoning on the Internet and correlate
these with the release of the Kaminsky-class NS-replacement
technique. This evidence of attacks, combined with a lack of
patching, illustrates the importance of interim DNS security
measures like DNS-0x20.
SOADNS Query; ID=0xfe93A? $RANDOM.example.comA?DNS Answer; ID=0xfe93NXDOMAIN$RANDOM.example.comIN AIN A’DNS Answer; ID=0x6f12NXDOMAIN $RANDOM.example.comAuthority:ns1.example.com85.255.112.230Cachea.b.cid=0xffffOutstandingQueriesx.b.cid=0x7329a.b.cid=0x4391y.b.cid=0x5c2fa.b.cid=0x99f1a.b.cid=0x10f2a.b.c @ 1.3.3.7id=0x4c22a.b.c @ 1.3.3.7id=0x21e7SpoofedRepliesD duplicate queriesF spoofed repliesD=4, F=2 in this exampleand 4*2 chances to guess3 A Comprehensive DNS Poisoning Model
In this section, we investigate the trade-off between the
probability that a victim DNS’s cache is poisoned and the
effort that an attacker has to spend to launch a successful
Kaminsky-class attack (which is currently the worst-case at-
tack). We propose a precise model of poisoning risk and iden-
tify key parameters for calculating the risk of poisoning under
various defensive scenarios. We also note how our model im-
proves upon general models proposed by others.
3.1 Parameters Considered in the Attack Model
According to existing DNS standards (i.e. RFC 1034 [32]
and RFC 1035 [33]), the randomness in a DNS query comes
from the following sources. (Most symbols are the same as
those used in [2] for the ease of comparison.)
1. I denotes the ID ﬁeld in a DNS message’s header section.
This ﬁeld, often called the qid, is a 16 bit identiﬁer and
has 216 = 65, 536 possible values and is used to map
answers back to the request.
2. P denotes the number of UDP source ports used by the