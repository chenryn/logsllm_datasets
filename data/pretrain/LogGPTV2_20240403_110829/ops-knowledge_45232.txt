User: 如何使用bash脚本自动化备份PostgreSQL数据库？
Assistant: 1. 创建备份脚本

首先，创建一个bash脚本来备份PostgreSQL数据库。以下是一个例子：

```
#!/bin/bash

# 备份相关参数
DB_USER="postgres"  # 数据库用户名
DB_NAME="mydatabase"  # 要备份的数据库名称
BACKUP_DIR="/var/backups/postgresql"  # 备份目录
DATE=$(date +%Y-%m-%d_%H-%M-%S)  # 当前日期

# 生成备份文件名
BACKUP_FILE="${DB_NAME}_${DATE}.sql.gz"

# 执行备份
pg_dump -U "$DB_USER" "$DB_NAME" | gzip > "${BACKUP_DIR}/${BACKUP_FILE}"

# 删除旧备份文件，只保留最近7天的备份
find "$BACKUP_DIR" -type f -mtime +7 -exec rm {} \;
```

以上脚本将使用pg_dump命令备份PostgreSQL数据库，并将备份文件压缩为gzip格式。备份文件将保存到指定的备份目录，并用当前日期作为文件名。并且会自动删除旧备份文件，只保留最近7天的备份。

2. 添加计划任务

为了自动化备份，我们需要将上述备份脚本添加到计划任务中。在Linux系统中，可以使用crontab命令添加计划任务。打开终端，执行以下命令：

```
crontab -e
```

将以下行添加到文件底部，每天凌晨3点执行备份：

```
0 3 * * * /path/to/backup_script.sh
```

注意将“/path/to/backup_script.sh”更改为实际备份脚本的路径。

保存并退出文件。现在，每天凌晨3点都将自动执行备份脚本。您可以根据需要修改crontab条目来更改备份计划。

3. 测试备份

最后，您可以手动测试备份脚本是否工作正常。打开终端，切换到备份脚本所在的目录，并运行以下命令：

```
./backup_script.sh
```

如果一切正常，备份应该已经被创建并保存在指定的备份目录中。您可以检查备份文件的大小和时间戳来确认备份是否成功。