 **Describe the bug**  
Using SQLAlchemy 1.4.0b2, I'm joining one version of subquery on itself, so I
get duplicate column names. The SQL produced properly disambiguates these
column names, however the keys returned in the result set are not
disambiguated.
(I'm new to SQLAlchemy, so this may not be a bug, but I would think it would
be as I can't distinguish between the two different fields in the results.)
**Expected behavior**  
For the labels to be the same as the keys in the result set.
**To Reproduce**  
If we have two queries joined on each other, like this:
    query1 = .alias('a')
    query2 = .alias('b')
    joined_query = (
            select(query1, query2)
            .join(query1, query1.c.join_field == query2.c.join_field)
            .set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
        )
We then get SQL produced like:
    SELECT a.foo as a_foo, b.foo as b_foo
    FROM () a
    JOIN () b ON a.join_field = b.join_field
So far so good. The column names are disambiguated in SQL according to the
specific method.
However, when I try to get the results, as follows, that disambiguation
disappears:
    result = session.execute(joined_query)
    for row in result:
        print(row.keys())
I get a result that looks like: `RMKeyView(['foo', 'foo'])` which means that I
can't reference the two columns separately. I would think I could do something
like `row['a_foo']` or `row.a_foo` and `row['b_foo']` or `row.b_foo`, but
these throw an error.
(Note that this is true even using the default label disambiguation style,
which would produce something like `a.foo, b.foo AS foo_1` in the SQL, but
still return both keys as `foo` in the result set.)
**Versions.**
  * OS: macOS 11.1
  * Python: 3.9.0
  * SQLAlchemy: 1.4.0b2
  * Database: PostgreSQL
  * DBAPI: psycopg2==2.8.6
**Thank you for any and all help!**  
I have done extensive Googling about this and can't find a resolution, which
makes me think this may be a bug introduced in the new version.
If this is _not_ a bug, any recommendations about how to resolve this problem
would be appreciated!