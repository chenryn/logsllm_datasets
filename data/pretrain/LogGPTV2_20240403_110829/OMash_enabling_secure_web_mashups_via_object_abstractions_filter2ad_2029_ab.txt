Content type
Existing abstraction
Run-as Principal
1
2
3
4
5
No
No
No
Yes
Yes
No
No
Yes
No
Yes
Isolated
Access-controlled
None
Open
 (bad practice)
Unauthorized
Open
None
Provider
Provider
Integrator
None
Integrator
Table 1: The Trust Model on the Web for a provider P and an integrator I as deﬁned in MashupOS
relationships. We will show how to model each of the trust rela-
tionships listed in Table 1 as proposed by MashupOS:
• Isolated content: Declare no getPublicInterface function
(or have it return nothing). The page cannot be accessed by
other pages unless it chooses to hand out, for example, call-
backs for other pages to use.
• Access-controlled content: Provide methods for the returned
interface that only allow access to a site’s content based on
the caller’s credentials. For example, the provider could re-
turn data only if presented with a valid username and pass-
word that it veriﬁes with an asynchronous communication
with its originating server. In MashupOS, access-controlled
content is provided by the  abstraction.
• Open content: In the case that the integrator trusts the provider,
the provider can be placed in a separate page with an appro-
priate interface, and the integrator can expose whatever inter-
face to it that it sees ﬁt. However, in the case that the provider
does not trust the integrator despite the reverse being true, the
provider can demand that it be run from a page on its source
domain that provides an interface to access its functionality.
• Unauthorized content: As deﬁned in MashupOS (and pro-
vided by the  and  abstractions),
unauthorized content should run without the privileges of ei-
ther the integrator or the provider, and matches the trust re-
lationship where the provider trusts the integrator but the in-
tegrator does not trust the provider (e.g. the provider has a
script library for open use). As with the above case of open
content, the integrator can isolate the provided content within
another page on their site, or the provider can provide a page
on their site. However, in the former case, this does not ad-
dress the requirement that this type of content run with the
privileges of neither the integrator nor the provider. Even if,
for example, a script library was isolated (in terms of DOM
access) inside another page on the integrator’s web site, it
would still be able to access the resources of the domain run-
ning it, i.e. cookies and the remote store. Since it would
be able to perform actions with the authority of the domain
running it, allowing the library this authority would allow it
to steal the site’s authentication credentials or issue its own
requests with them2. To allow for this kind of trust relation-
ship, we need to change the way authentication information
is handled by the browser as discussed in the next section.
2Another concern is that the library could alter the page’s interface,
although this could be mitigated by enforcing a “set-once” property
on getPublicInterface and deﬁning it before including the un-
trusted script.
3.2 Mediate Authentication Credentials
To allow unauthorized content to run as neither the integrator nor
the provider and to combat CSRF, we continue our model of view-
ing a web page as an object with public and private data. We thus
propose that authentication credentials, be it HTTP authentication
or cookies, be considered part of a page’s private data.
However, this raises an important concern: how can pages trans-
fer this information to another page on the same site? This is an
important consideration because when, for example, after the user
clicks a link, the page ceases to exist. If the link leads to another
page on the site, the user would still want to remain logged in. Cur-
rently, this works because, in the case of cookies, authentication
information is sent for a.com regardless of the request originator.
Therefore, our proposal for handling authentication information
is as follows: When authentication information (HTTP or a cookie)
comes in, the browser associates this information with the page
that receives it, page P. This authentication information is passed
on to other pages that are loaded via an action on P (for example,
clicking a link), but only if the new page’s domain matches that of
the cookie (i.e. cookies for a.com are only sent to a.com). This is
somewhat analogous to a forked process inheriting its parent’s ﬁle
descriptors.
While this is a natural change for HTTP authentication, it be-
comes trickier when dealing with cookies; the only cookies we
want to treat this way are those that are used for authentication.
Cookies that simply store preferences may be safely shared among
pages as is currently possible.
Thus, we propose an extra attribute for cookies used for authenti-
cation named Authentication. Cookies that are marked with this
attribute will thus be handled using the above policy. This works
well for session cookies, as they are associated with a page when
they are set. For persistent cookies (which normally should not be
used for authentication), they can be associated with the ﬁrst user-
opened page. We also envision a browser setting being used to treat
all or certain cookies as authentication cookies, even if they do not
contain the Authentication attribute.
One interesting and useful consequence of this change is that it
is now possible to log into two different accounts on the same web-
site at the same time. For example, if a user has two email accounts
Alice and Bob at a website, the user can log in as Alice in one win-
dow and as Bob in another window of the same browser. As a more
important consequence of this change, we can lift the same-origin
restriction on XMLHttpRequest, as malicious sites can no longer
leverage CSRF to steal or modify data using XHR.3 By lifting this
3If an organization relies on its ﬁrewall to protect data on its inter-
nal websites that have no access control, the same-origin restriction
on XMLHttpRequest can prevent malicious web pages running on
internal computers from stealing information on internal websites
and then sending them to the external network. By contrast, our
proposed access restriction on authentication information cannot
prevent this attack. However, we argue that an internal website
restriction, we can accomplish safe cross-domain data exchange as
the proposed JSONRequest [12, 17] does (which passes messages
in the JavaScript Object Notation (JSON) [5] format and which
does not send any HTTP authentication or cookies).
In contrast
to JSONRequest, our approach works with existing web authenti-
cation mechanisms and requires no server modiﬁcation.
3.3 Backward Compatibility with the Same Ori-
gin Policy
An important consideration with our proposal is how to deal
with legacy web applications that rely on the SOP. While our ap-
proach should not affect applications that use only single frames
or incorporate frames from different domains that cannot interact
in either the SOP or our model (by default, at least), applications
that use multiple frames pose a problem. From a functionality
standpoint, the solution is simple: return any functions in the tar-
get frame needed by other frames in the application via the target
frame’s getPublicInterface function.4 From a security stand-
point, however, the solution can be more complicated.
Since in our model any page can access the public interface
of another page, a security-conscious application will need to en-
sure that the public interface provides services only to authorized
callers. If the application wishes to use the Same Origin Policy for
access control, it should ensure that the caller is from the same do-
main. The solution is straightforward: An application designer can,
as part of the process of generating a user’s page, embed a secret
key that is shared among the pages generated for that user. Figure 2
presents a code example of this. Figure 2(a) shows the code of the
provider, whose function foo authenticates the caller by checking
the secret provided by the caller against the secret embedded in
the provider. Figure 2(b) shows the code of the integrator, which
passes the shared secret as a parameter to the call to the provider
for authentication.
4. USAGE EXAMPLES
// Secret for this user generated by the server
var secret = 12345;
// In the old application, would have just
// declared this here
// function foo() { ... }
function getPublicInterface()
{
function Interface()
{
this.foo = function (providedSecret)
{
if (providedSecret != secret)
{
return;
}
// else perform requested action
}
}
return new Interface();
}
(a) inner.html. The function foo authenticates the caller by
checking the parameter providedSecret against the embedded
global variable secret.
// Secret for this user generated by the server
var secret = 12345;
..
var targetWindow =
document.getElementById("target").contentWindow;
var targetInterface =
targetWindow.getPublicInterface();
..
function targetFoo()
{
Section 3 showed the basic usage of getPublicInterface. In
this section we will show how it can be used to construct more
interesting applications.
// In the old application, would have just done
// targetWindow.foo();
targetInterface.foo(secret);
Unauthorized content.
Figure 3 shows an example of Unauthorized Content. Here, we
isolate an untrusted script library (in this example, Google’s map
service [3]).
Access-controlled content.
Figure 4 shows an example of Access-controlled Content. The
integrator a.com authenticates itself to the resource b.com using a
username and password, which the resource then veriﬁes.
Service Integration.
It would also be possible to create services in which sibling re-
sources communicate with each other, and the integrator merely
connects them by passing callbacks. Figure 5 shows an example
where the integrator connects resources from two sites, b.com and
c.com. While this is simple enough for the case where the data
being passed between services is innocuous, if the data passing be-
tween the sibling resources is sensitive, they must be able to protect
should enforce its own access control to protect its valuable data
rather than relying on the ﬁrewall for protection.
4This may get slightly more complicated if the application employs
poor information hiding in terms of software engineering, but it
should still be feasible.
}
(b) outer.html. It authenticates by providing the argument secret
in the call to the provider.
Figure 2: Backward compatibility with the same origin policy
themselves from a malicious integrator performing a man-in-the-
middle attack. For such applications, they can draw on the body
of knowledge already available to combat such problems; in this
case, a client side mutual authentication library would be needed
that operates in the same spirit as TLS/SSL. It should be noted,
however, that the private keys for this process would still need to
reside on the server, and thus the client code would in turn need to
communicate data back to its origin server, likely over SSL as well.
5.
IMPLEMENTATION
We implemented OMash as an extension to Mozilla Firefox ver-
sion 2.0. Our current implementation also requires a small change
(changes to a handful of arguments to functions) to work.
5.1 Mediating DOM Access
To allow the cross-domain access to the getPublicInterface
function getPublicInterface()
{
function Interface()
{
this.setMapCenter =
function (latitude, longitude)
{
if (!map)
{
return;
}
map.setCenter(
new GLatLng(latitude, longitude), 13);
}
}
return new Interface();
}
(a) map.html, which provides a map service.
...
var mapWindow =
document.getElementById("map").contentWindow;
var mapInterface = mapWindow.getPublicInterface();
...
// Called on a button click, for example
function changeMapCenter()
{
// Values in a textbox
var latitude =
document.getElementById("latitude").value;
var longitude =
document.getElementById("longitude").value;
function getPublicInterface() {
function Interface()
{
this.authenticate = function (username, password)
{
// Verify username and password, e.g. via an
// XMLHttpRequest to the server.
...
// Assuming authentication succeeds, give the
// caller a token to present for each operation.
// This is analogous to a file descriptor
// (although this kind of token should be
// cryptographically random to prevent guessing).
rememberToken(token);
return token;
}
this.doSomething = function (token, ...)
{
// check if the presented token is valid
if (!verifyToken(token))
{
return;
}
// else do something
...
}
}
return new Interface();
}
(a) http://b.com/resource.html, which authenticates the caller us-
ing a username and password.
}
(b) outer.html, which uses the service provided by the code in
Figure 3(a)
Figure 3: Unauthorized content example
function, we used Mozilla’s Conﬁgurable Security Policies (CAPS)
system [25].
...
var resourceWindow =
document.getElementById("resource").contentWindow;
var resourceInterface =
resourceWindow.getPublicInterface();
...
var token;
...
function authenticateToResource()
{
Although we implemented this using an extension, what it amounts
token =
to is setting the two preferences in Table 2.
resourceInterface.authenticate(username, password);
Preference Name
capability.policy.default.Window.
getPublicInterface.get
capability.policy.default.Window.
getPublicInterface.set
Value
"allAccess"
"sameOrigin"
Table 2: Setting preferences in Mozilla’s CAPS to allow cross-
domain access to the getPublicInterface function
Note that the other possible setting for one of these preferences
is "noAccess", meaning that no page can access this property, not
even the originating page. There is no built-in policy that restricts
access only to the same document. Thus, our current implementa-
tion does not remove the Same Origin Policy, but instead makes an