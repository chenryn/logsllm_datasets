### Optimized Text

#### 5.2. Security Analysis with Append-Only Policies
For a database with state \( S \) and transaction base \( P \) where the rules contain no retractions and are safely rewritable, and given a finite number of users, security analysis is decidable. It is important to note that even for a limited variation of the Harrison-Ruzzo-Ullman (HRU) model using only monotonically increasing operations, security analysis remains undecidable [17]. The key difference in our approach is that we require append-only policies to be safely rewritable, which restricts the domain from being expanded.

As in Section 5.2, the utility of this class can be extended by allowing unrestricted assertions and retractions only by trusted users and by separating write privileges on the database. While security analysis is decidable in this case, simulating every possible sequence of commands would be computationally expensive. An alternative approach is to make a conservative estimate of the possible privileges. All the semantics discussed in this paper are monotonic; if a rule can be executed under a given database state, it can still be executed under a larger database state. This allows us to use the maximal database computed for Lemma 3 to make this estimate. Although this may disallow some safe database configurations, the efficiency of computing a Datalog model makes this solution preferable.

**Theorem 5.** For a database with state \( S \) and transaction base \( P \) where the rules contain no retractions and are safely rewritable, if a given permission does not exist in the model of the Datalog database derived from the union of \( S \) and the rewritten rules from \( P \) (i.e., \( \triangleleft(P) \)), then it will not be accessible in any future state of the current database if all rules are monotonic.

#### 6. Implementation
To evaluate the proposed model, we implemented a proof-of-concept prototype query engine using SWI-Prolog version 5.6.25. The prototype provides basic database functionality, loading all data (both for base predicates and policies) into memory rather than storing it on disk and retrieving it as needed. No query optimizations are used, except for those automatically applied by the Prolog compiler. This basic design helps determine the feasibility of evaluating reflexive access policies and performing security analysis.

We tested a set of policies on two simple employee databases: one containing 100 employees and the other containing 1000 employees. The example policies are provided in the Appendix, and the results are shown in Figure 5. All tests were run on a 1.6GHz Pentium-M with 768 MB of RAM running Windows XP. The baseline query accesses the employees table directly to measure the cost of enforcing view predicates. 

- **Query (a)**: Accesses the employee table as the table owner (Rule 1 from the appendix).
- **Query (b)**: Accesses the table as a regular employee granted access to their own data and the public data of all other employees (Rules 2 and 4).
- **Query (c)**: Accesses the table as a manager, who has access to their own data, the data for employees in their department, and the public data of all other employees (Rules 2, 3, and 4).
- **Query (d)**: Accesses the table as an external insurance agent, who has access to some public data but ensures all accesses are logged (Rule 5).

These results indicate that while the RDBAC functionality incurs a cost, most of this cost is due to executing extra queries on the database.

To demonstrate the expressiveness of using Transaction Datalog (TD) as a policy language, **Query (e)** provides a baseline access to a table with 50 records in the first database and 500 records in the second. **Query (f)** defines a Chinese Wall policy on this table (Rules 6, 7, 8, 9, and 10). These policies assume that the data to be separated exists on separate tables and that both tables are accessible by a single administrator (in this case, Bob).

The final three queries perform a security analysis check, examining the policies without side effects (Rules 1, 2, 3, and 4):
- **Query (g)**: Determines which users are allowed to access the data of a single employee.
- **Query (h)**: Performs a full security analysis, enumerating all permissions available through the side-effect-free policies.

For future prototypes, we plan to test a different strategy by compiling the Datalog policies into functions that can be executed directly by the database, such as Oracle Virtual Private Database (VPD) functions. This strategy would allow us to leverage query optimizations offered by commercial databases and demonstrate that RDBAC policies can be used with existing database installations.

#### 7. Conclusion and Future Work
We have described a model for reflective database access control based on the semantics of Transaction Datalog. This model provides a clear description of how access control policies should be evaluated and under whose privileges, and can be extended to users without omniscient access to the database. The TD model also inherits the ability to effect changes to the database during policy evaluation. We have shown that formal analysis can be performed on certain classes of reflective policies to guarantee security properties.

Much work remains to establish a usable reflective access control system. Many useful policies, such as Chinese Wall policies, require removing data from the database, and formal analysis of such policies has not yet been done. Additionally, while we have shown that analysis of append-only policies is decidable, more efficient algorithms, possibly using fast model-checking techniques [19], may be desirable.

Negations in TD could provide useful policies. The rewriting algorithm from Section 5.3 does not preclude the existence of negations in the resulting Datalog rules. However, TD does not define semantics for negations, and the model does not define a basic "update" operation. Updates are effectively equivalent to a deletion followed by an insertion, but many policies are defined on the entire update operation and cannot be enforced on the deletion and insertion individually.

Finally, Example 5 showed how unsafe information flows can be prevented by only allowing policies to be executed under the definer's privilege. More thorough information flow analysis could allow us to relax this restriction and use other privileges.

#### 8. Acknowledgements
The authors would like to thank the developers at Oracle, MySQL, and PostgreSQL for their analysis of the code samples; William R. Cook for his ideas on implementing practical systems; and Anthony J. Bonner for his insights on TD semantics. This work was supported in part by NSF CNS 07-16626, NSF CNS 07-16421, NSF CNS 05-24695, ONR N00014-08-1-0248, NSF CNS 05-24516, DHS 2006-CS-001-000001, and grants from the MacArthur Foundation and Boeing Corporation. The views expressed are those of the authors only.

#### 9. References
[1] S. Abiteboul and V. Vianu. Datalog extensions for database queries and updates. Journal of Computer and System Sciences, 43(1):62–124, Aug. 1991.
[2] R. Agrawal, P. Bird, T. Grandison, J. Kiernan, S. Logan, and W. Rjaibi. Extending relational database systems to automatically enforce privacy policies. In ICDE 05, Tokyo, Japan, Apr. 2005.
[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Hippocratic databases. In VLDB 02, Hong Kong, China, Aug. 2002.
[4] M. Ancona, W. Cazzola, and E. B. Fernandez. A history-dependent access control mechanism using reflection. In MOS 99, Lisbon, Portugal, Jun. 1999.
[5] F. Bancilhon and R. Ramakrishnan. An amateur’s introduction to recursive query processing strategies. In SIGMOD 86, Washington, DC, May 1986.
[6] R. Bobba, O. Fatemieh, F. Khan, C. A. Gunter, and H. Khurana. Using attribute-based access control to enable attribute-based messaging. In ACSAC 06, Miami Beach, FL, Dec. 2006.
[7] A. J. Bonner. Transaction datalog: A compositional language for transaction programming. Lecture Notes in Computer Science, 1369:373–395, 1998.
[31] K. A. Ross. Modular stratification and magic sets for Datalog programs with negation. Journal of the ACM, 41(6):1216–1266, Nov. 1994.
[8] A. J. Bonner. Workflow, transactions, and Datalog. In PODS 99, Philadelphia, PA, Jun. 1999.
[9] D. F. C. Brewer and M. J. Nash. The Chinese Wall security policy. In IEEE Security and Privacy, Oakland, CA, May 1989.
[10] S. Chaudhuri, T. Dutta, and S. Sudarshan. Fine-grained authorization through predicated grants. In ICDE 07, Istanbul, Turkey, Apr. 2007.
[11] W. R. Cook and M. R. Gannholm. Rule-based database security system and method. United States Patent 6,820,082, Nov. 2004.
[12] S. Etalle and W. H. Winsborough. A posteriori compliance control. In SACMAT 07, Sophia Antipolis, France, Jun. 2007.
[13] H. Gallaire, J. Minker, and J.-M. Nicolas. Logic and databases: A deductive approach. ACM Computing Surveys, 16(2):153–185, Jun. 1984.
[14] R. Goodwin, S. Goh, and F. Y. Wu. Instance-level access control for business-to-business electronic commerce. IBM Systems Journal, 41(2):303–321, 2002.
[15] P. P. Griffiths and B. W. Wade. An authorization mechanism for a relational database system. In TODS, 1(3):242–255, Sep. 1976.
[16] C. A. Gunter and T. Jim. Policy-directed certificate retrieval. Software– Practice and Experience, 30(15):1609–1640, 2000.
[17] M. A. Harrison and W. L. Ruzzo. Monotonic protection systems. In Foundations of Secure Computation, pages 337–363. Academic Press, 1978.
[18] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. Protection in operating systems. Communications of the ACM, 19(8):461–471, 1976.
[19] S. Jha, N. Li, M. V. Tripunitara, Q. Wang, and W. H. Winsborough. Towards formal verification of role-based access control policies. IEEE Transactions on Dependable and Secure Computing (TDSC). Submitted, under review.
[20] T. Jim. SD3: A trust management system with certified evaluation. In IEEE Security and Privacy, Oakland, CA, May 2001.
[32] J. A. Solworth and R. H. Sloan. A layered design of discretionary access controls with decidable safety properties. In IEEE Security and Privacy, Oakland, CA, May 2004.
[33] Sybase, Inc. New security features in Sybase Adaptive Server Enterprise. Technical report, Sybase, Inc., 2003. http://www.sybase.com/content/1013009/new_security_wp.pdf.
[34] M. H. van Emden and R. A. Kowalski. The semantics of predicate logic as a programming language. Journal of the ACM, 23(4):733–742, 1976.
[35] I. Welch and F. Lu. Policy-driven reflective enforcement of security policies. In SAC 06, Dijon, France, Apr. 2006.

#### Appendix
These are the sample policies from the prototype:

1. `view_employee('alice', Person, SSN, Salary, Email, Dept, Position, Bday) :- employee(Person, SSN, Salary, Email, Dept, Position, Bday).`
2. `view_employee(User, Person, SSN, Salary, Email, Dept, Position, Bday) :- User=Person, view_employee('alice', Person, SSN, Salary, Email, Dept, Position, Bday).`
3. `view_employee(User, Person, SSN, Salary, Email, Dept, Position, Bday) :- view_employee('alice', User, _, _, _, Dept, 'manager', _), view_employee('alice', Person, SSN, Salary, Email, Dept, Position, Bday).`
4. `view_employee(User, Person, SSN, Salary, Email, Dept, Position, Bday) :- view_employee('alice', User, _, _, _, _, _, _), SSN = null, Salary = null, view_employee('alice', Person, _, _, Email, Dept, Position, Bday).`
5. `view_employee(User, Person, SSN, Salary, Email, Dept, Position, Bday) :- insurance(User), SSN = null, Salary = null, Email = null, Dept = null, Position = null, view_employee('alice', Person, _, _, _, _, _, Bday), ins.logtable(User, Person, 'birthday field').`
6. `view_cwPriv('bob', Person, Bank1Priv, Bank2Priv) :- cwPriv(Person, Bank1Priv, Bank2Priv).`
7. `view_bank1('bob', Data1, Data2) :- bank1(Data1, Data2).`
8. `view_bank1(User, Data1, Data2) :- view_cwPriv('bob', User, 1, _), del.cwPriv(User, 1, _), ins.cwPriv(User, 1, 0), view_bank1('bob', Data1, Data2).`
9. `view_bank2('bob', Data1, Data2) :- bank2(Data1, Data2).`
10. `view_bank2(User, Data1, Data2) :- view_cwPriv('bob', User, _, 1), del.cwPriv(User, _, 1), ins.cwPriv(User, 0, 1), view_bank2('bob', Data1, Data2).`