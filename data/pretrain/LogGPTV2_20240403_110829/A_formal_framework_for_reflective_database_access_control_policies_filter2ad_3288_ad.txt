with state S and transaction base P with rules that contain
no retractions and are safely rewritable, given a ﬁnite num-
ber of users.
2
It is worth noting that security analysis of a limited vari-
ation of the HRU model that uses only monotonically in-
creasing operations is still undecidable [17]. The diﬀerence
with our result is that we require the append-only policies
to be safely rewritable, which limits the domain from being
expanded.
Just as in Section 5.2, we can extend the usefulness of
this class by allowing unrestricted assertions and retractions
only by trusted users, and by separating the write privileges
on the database.
While security analysis is decidable for this case, it is clear
that simulating every possible sequence of commands would
be an expensive analysis. An alternative to this detailed
analysis would be to make a conservative estimate of what
privileges are possible. All of the semantics discussed for
this paper are monotonic; that is, if a rule can be executed
under a given database state, it can still be executed under
a larger database state. This enables us to use the maximal
database computed for Lemma 3 to make this estimate. This
may disallow some safe database conﬁgurations, but because
computing a Datalog model is very eﬃcient, this solution
may be preferable.
Theorem 5. For a database with state S and transaction
base P with rules that contain no retractions and are safely
rewritable, if a given permission does not exist in the model
of the Datalog database derived from the union of S and
the rewritten rules from P (i.e. ⊲(P )), then it will not be
accessible in any future state of the current database if all
rules are monotonic.
2
6.
IMPLEMENTATION
As a preliminary evaluation of this model, we have im-
plemented a proof-of-concept prototype query engine using
SWI-Prolog version 5.6.25. The prototype only provides
rudimentary database functionality, as it loads all of the
data (both for base predicates and for policies) into mem-
ory, rather than storing the data on the disk and retrieving
Query
Database 1 Database 2
Baseline
(a) Table owner
(b) Non-manager access
(c) Manager access
(d) Insurance access with audit
(e) Without Chinese Wall
(f) Chinese Wall
(g) Security check, one user
(h) Security check, all users
100 empl.
0.42 ms
0.43 ms
0.44 ms
0.66 ms
0.57 ms
0.12 ms
0.13 ms
1.67 ms
171.80 ms
1000 empl.
4.82 ms
4.84 ms
4.97 ms
7.51 ms
6.01 ms
1.22 ms
1.43 ms
17.27 ms
17,390.00 ms
Figure 5: Timing results from Prolog prototype
only when necessary; and no query optimizations are used,
other than any automatic optimizations applied by the Pro-
log compiler. However, this basic design is helpful in deter-
mining the feasibility of evaluating reﬂexive access policies
and performing security analysis.
Using this prototype, we tested a set of policies on two
simple employee databases, the ﬁrst containing 100 employ-
ees and the second containing 1000 employees. The example
policies are given in the Appendix, and results of running
each policy are shown in Figure 5. All tests were run on
a 1.6GHz Pentium-M with 768 MB of RAM running Win-
dows XP. The baseline query accesses the employees table
directly to provide a measure of the cost of the extra logic of
enforcing view predicates. Query (a) accesses the employee
table as the table owner (rule 1 from the appendix). Query
(b) accesses the table as a regular employee that is granted
access to his own data and to the public data of all other
employees (rules 2 and 4). Query (c) accesses the table as
a manager, who is granted access to her own data, the data
for employees in her department, and the public data of all
other employees (rules 2, 3, and 4). Query (d) accesses the
table as an external insurance agent who is granted access
to some public data, but ensures that all accesses are logged
(rule 5). These results indicate that while the RDBAC func-
tionality does incur a cost, most of this cost is inherent to
executing extra queries on the database.
In order to demonstrate the expressiveness of using TD as
a policy language, query (e) provides a baseline access to a
table with 50 records in the ﬁrst database, 500 records in the
second. Query (f) deﬁnes a Chinese Wall policy on this table
(rules 6, 7, 8, 9, and 10). These policies assume that the data
to be separated exists on separate tables. They also require
that both tables be accessible by a single administrator (in
this case, Bob).
The ﬁnal three queries perform a security analysis check.
This check only examines the policies without side eﬀects
(rules 1, 2, 3, and 4). Query (g) determines which users
are allowed to access the data of a single employee, and
query (h) performs a full security analysis, enumerating all
permissions available through the side-eﬀect-free policies.
For a future prototype, we plan on testing a diﬀerent strat-
egy by compiling the Datalog policies into functions that can
be executed directly by the database, such as Oracle VPD
functions. This strategy would give us two advantages:
it
would allow us to take advantage of any query optimizations
that a commercial database oﬀers, and it would demonstrate
that RDBAC policies can be used with existing database in-
stallations.
7. CONCLUSION AND FUTURE WORK
We have described a model for reﬂective database access
control based on the semantics of Transaction Datalog. This
model provides a clear description of how access control poli-
cies should be evaluated, and under whose privileges, and
can be extended to users that do not have omniscient access
to the database. The TD model also inherits the ability to
eﬀect changes to the database during policy evaluation. We
have shown that formal analysis may be performed on cer-
tain classes of reﬂective policies to guarantee security prop-
erties.
Much work still needs to be done to establish a usable
reﬂective access control system. Many useful policies, such
as Chinese Wall policies, require removing data from the
database. Formal analysis of such policies has not yet been
done. Additionally, while we have shown analysis of append-
only policies to be decidable, it may be more desirable to ﬁnd
other more eﬃcient algorithms, possibly using fast model-
checking based techniques [19].
Negations in TD could also provide useful policies. Indeed,
the rewriting algorithm from Section 5.3 does not preclude
the existence of negations in the resulting Datalog rules.
However, TD does not deﬁne semantics for negations. The
model also does not deﬁne a basic “update” operation. While
updates are eﬀectively equivalent to a deletion followed by
an insertion, many policies are deﬁned on the entire update
operation that cannot simply be enforced on the deletion
and insertion individually.
Finally, Example 5 showed how unsafe information ﬂows
can be prevented by only allowing policies to be executed
under the deﬁner’s privilege. More thorough information
ﬂow analysis could allow us to relax this restriction and allow
other privileges to be used.
Acknowledgements The authors would like to thank the
developers at Oracle, MySQL, and PostgreSQL for their
analysis of the code samples; William R. Cook for his ideas
on implementing practical systems; and Anthony J. Bonner
for his insights on TD semantics. This work was supported
in part by NSF CNS 07-16626, NSF CNS 07-16421, NSF
CNS 05-24695, ONR N00014-08-1-0248, NSF CNS 05-24516,
DHS 2006-CS-001-000001, and grants from the MacAruthur
Foundation and Boeing Corporation. The views expressed
are those of the authors only.
8. REFERENCES
[1] S. Abiteboul and V. Vianu. Datalog extensions for
database queries and updates. Journal of Computer and
System Sciences, 43(1):62–124, Aug. 1991.
[2] R. Agrawal, P. Bird, T. Grandison, J. Kiernan, S. Logan,
and W. Rjaibi. Extending relational database systems to
automatically enforce privacy policies. In ICDE 05, Tokyo,
Japan, Apr. 2005.
[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Hippocratic
databases. In VLDB 02, Hong Kong, China, Aug. 2002.
[4] M. Ancona, W. Cazzola, and E. B. Fernandez. A
history-dependent access control mechanism using
reﬂection. In MOS 99, Lisbon, Portugal, Jun. 1999.
[5] F. Bancilhon and R. Ramakrishnan. An amateur’s
introduction to recursive query processing strategies. In
SIGMOD 86, Washington, DC, May 1986.
[6] R. Bobba, O. Fatemieh, F. Khan, C. A. Gunter, and
H. Khurana. Using attribute-based access control to enable
attribute-based messaging. In ACSAC 06, Miami Beach,
FL, Dec. 2006.
[7] A. J. Bonner. Transaction datalog: A compositional
language for transaction programming. Lecture Notes in
Computer Science, 1369:373–395, 1998.
[31] K. A. Ross. Modular stratiﬁcation and magic sets for
datalog programs with negation. Journal of the ACM,
41(6):1216–1266, Nov. 1994.
[8] A. J. Bonner. Workﬂow, transactions, and datalog. In
[32] J. A. Solworth and R. H. Sloan. A layered design of
PODS 99, Philadelphia, PA, Jun. 1999.
[9] D. F. C. Brewer and M. J. Nash. The chinese wall security
policy. In IEEE Security and Privacy, Oakland, CA, May
1989.
[10] S. Chaudhuri, T. Dutta, and S. Sudarshan. Fine grained
authorization through predicated grants. In ICDE 07,
Istanbul, Turkey, Apr. 2007.
[11] W. R. Cook and M. R. Gannholm. Rule based database
security system and method. United States Patent
6,820,082, Nov. 2004.
[12] S. Etalle and W. H. Winsborough. A posteriori compliance
control. In SACMAT 07, Sophia Antipolis, France, Jun.
2007.
[13] H. Gallaire, J. Minker, and J.-M. Nicolas. Logic and
databases: A deductive approach. ACM Computing
Surveys, 16(2):153–185, Jun. 1984.
[14] R. Goodwin, S. Goh, and F. Y. Wu. Instance-level access
control for business-to-business electronic commerce. IBM
Systems Journal, 41(2):303–321, 2002.
[15] P. P. Griﬃths and B. W. Wade. An authorization
mechanism for a relational database system. In TODS,
1(3):242–255, Sep. 1976.
[16] C. A. Gunter and T. Jim. Policy-directed certiﬁcate
retrieval. Software– Practice and Experience,
30(15):1609–1640, 2000.
[17] M. A. Harrison and W. L. Ruzzo. Monotonic protection
systems. In Foundations of Secure Computation, pages
337–363. Academic Press, 1978.
[18] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman.
Protection in operating systems. Communications of the
ACM, 19(8):461–471, 1976.
[19] S. Jha, N. Li, M. V. Tripunitara, Q. Wang, and W. H.
Winsborough. Towards formal veriﬁcation of role-based
access control policies. IEEE Transactions on Dependable
and Secure Computing (TDSC). Submitted, under review.
[20] T. Jim. SD3: A trust management system with certiﬁed
evaluation. In IEEE Security and Privacy, Oakland, CA,
May 2001.
discretionary access controls with decidable safety
properties. In IEEE Security and Privacy, Oakland, CA,
May 2004.
[33] Sybase, Inc. New security features in Sybase Adaptive
Server Enterprise. Technical report, Sybase, Inc., 2003.
http://www.sybase.com/content/1013009/new_security_
wp.pdf.
[34] M. H. van Emden and R. A. Kowalski. The semantics of
predicate logic as a programming language. Journal of the
ACM, 23(4):733–742, 1976.
[35] I. Welch and F. Lu. Policy-driven reﬂective enforcement of
security policies. In SAC 06, Dijon, France, Apr. 2006.
APPENDIX
These are the sample policies from the prototype.
1. view_employee(‘alice’, Person, SSN, Salary, Email,
Dept, Position, Bday) :-
employee(Person, SSN, Salary, Email, Dept,
Position, Bday).
2. view_employee(User, Person, SSN, Salary, Email,
Dept, Position, Bday) :-
User=Person,
view_employee(‘alice’, Person, SSN, Salary,
Email, Dept, Position, Bday).
3. view_employee(User, Person, SSN, Salary, Email,
Dept, Position, Bday) :-
view_employee(‘alice’, User, _, _, _, Dept,
‘manager’, _),
view_employee(‘alice’, Person, SSN, Salary,
Email, Dept, Position, Bday).
4. view_employee(User, Person, SSN, Salary, Email,
Dept, Position, Bday) :-
view_employee(‘alice’, User, _, _, _, _, _, _),
SSN = null, Salary = null,
view_employee(‘alice’, Person, _, _, Email, Dept,
Position, Bday).
[21] G. Kabra, R. Ramamurthy, and S. Sudarshan. Redundancy
5. view_employee(User, Person, SSN, Salary, Email,
and information leakage in ﬁne-grained access control. In
SIGMOD 06, Chicago, IL, Jun. 2006.
[22] L. Lamport. The temporal logic of actions. ACM
Transactions on Programming Languages and Systems,
16(3):872–923, 1994.
[23] K. LeFevre, R. Agrawal, V. Ercegovac, R. Ramakrishnan,
Y. Xu, and D. J. DeWitt. Limiting disclosure in hippocratic
databases. In VLDB 04, Toronto, ON, Aug. 2004.
[24] N. Li and M. V. Tripunitara. On safety in discretionary
access control. In IEEE Security and Privacy, Oakland,
CA, May 2005.
[25] P. Maes. Concepts and experiments in computational
reﬂection. In OOPSLA 87, Orlando, FL, Oct. 1987.
[26] Oracle Corporation. Oracle Virtual Private Database.
Technical report, Oracle Corporation, Jun. 2005.
http://www.oracle.com/technology/deploy/security/db_
security/virtual-private-database/index.html.
[27] Oracle Corporation. Oracle service request number
5973395.992. Technical support communication, Jan. 2007.
[28] S. Rizvi, A. Mendelzon, S. Sudarshan, and P. Roy.
Extending query rewriting techniques for ﬁne-grained
access control. In SIGMOD 04, Paris, France, Jun. 2004.
[29] A. Rosenthal and E. Sciore. Extending SQL’s grant and
revoke operations, to limit and reactivate privileges. In
DBSec 00, Schoorl, The Netherlands, Aug. 2000.
[30] A. Rosenthal and E. Sciore. Abstracting and reﬁning
authorization in SQL. In Secure Data Management
Workshop (SDM), Toronto, ON, Aug. 2004.
Dept, Position, Bday) :-
insurance(User), SSN = null, Salary = null,
Email = null, Dept = null, Position = null,
view_employee(‘alice’, Person, _, _, _, _, _, Bday),
ins.logtable(User, Person, ‘birthday field’).
6. view_cwPriv(‘bob’, Person, Bank1Priv, Bank2Priv) :-
cwPriv(Person, Bank1Priv, Bank2Priv).
7. view_bank1(‘bob’, Data1, Data2) :-
bank1(Data1, Data2).
8. view_bank1(User, Data1, Data2) :-
view_cwPriv(‘bob’, User, 1, _),
del.cwPriv(User, 1, _), ins.cwPriv(User, 1, 0),
view_bank1(‘bob’, Data1, Data2).
9. view_bank2(‘bob’, Data1, Data2) :-
bank2(Data1, Data2).
10. view_bank2(User, Data1, Data2) :-
view_cwPriv(‘bob’, User, _, 1),
del.cwPriv(User, _, 1), ins.cwPriv(User, 0, 1),
view_bank2(‘bob’, Data1, Data2).