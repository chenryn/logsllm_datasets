### Example of IBinder Object Transformation

The following code snippet demonstrates the transformation process of an `IBinder` object. During this transformation, validation checks are performed (line 4). If the object passes these checks, it is cast to the target class (line 5). However, if the checks fail, the object is still treated as an instance of the target proxy class (line 6). Therefore, any received `IBinder` object will be considered valid.

```java
public static InstrumentationWatcher asInterface(android.os.IBinder obj) {
    if (obj == null) {
        return null;
    }
    IInstrumentation iin = (IInstrumentation) obj.queryLocalInterface(DESCRIPTOR);
    if ((iin != null) && (iin instanceof InstrumentationWatcher)) {
        return (InstrumentationWatcher) iin;
    }
    return new Stub.Proxy(obj);
}
```

### Callback Types

Callbacks can be categorized into two types:

- **Synchronous Callback**: This type is used when the caller needs to receive a return value from the callback method. The execution of the caller method is blocked until the callback method returns.
- **Asynchronous Callback**: This type is used when the caller does not need to wait for the callback to complete. The execution of the caller method continues immediately after the invocation, without waiting for the callback to return.

### 2.2 Vulnerability Overview

All the newly identified vulnerabilities are directly related to IPC-based service interfaces in the System Service (SS). These interfaces receive a callback handle as an IPC call parameter. The callback can be invoked by the SS or passed to a cooperator system app for invocation. Based on the runtime context when the callback is invoked, we have identified four hazard situations:

#### A. Inside the SS:
- **A1. Synchronized Code Block**: The callback is invoked in a synchronized code block of any service thread.
- **A2. Assistant Thread**: The callback is invoked in an assistant thread without involving any synchronized block.

#### B. Inside a Cooperator System App:
- **B1. Activity Component**: The callback is invoked in an activity component.
- **B2. Service or Broadcast Receiver Component**: The callback is invoked in a service component or a broadcast receiver component.

For situations A1 and B1, attackers can block the execution of the caller method, causing the SS or system apps to freeze. For situations A2 and B2, attackers can throw a carefully selected exception to crash the SS or system apps.

### 2.2.1 Hazard Situation A1

If a synchronous callback is invoked in a synchronized code block within any thread inside the SS, a malicious app can implement its callback method to block the caller for a controllable duration, leading to the freezing of a system service.

**How this hazard is generated:**
- When a service request arrives, the Binder mechanism starts a new thread in the SS to handle it.
- Different threads may need to operate on the same global variable concurrently, necessitating concurrency control.
- The most frequently used concurrency control mechanism in the SS is the synchronized block mechanism from the Java library, such as `synchronized { lock } { code }`.
- Threads that want to run the code in the block must acquire the lock first. Only one thread can hold the lock at a time, and other threads must wait for it to be released.
- If one thread holds the lock for a long period, other threads that need the lock will be blocked, and the SS will lose the ability to serve new requests.
- Some system services use a watchdog thread to monitor this kind of failure. The watchdog sets a timer-based monitor for the target lock. If the lock cannot be acquired within a preset period, the watchdog forces the SS to restart to recover from the failure state.

According to our findings, some service interfaces in the SS receive a synchronous callback handle as an IPC call parameter and invoke it in a synchronized block. Attackers can exploit this vulnerability by implementing a malicious callback method and injecting its handle into these interfaces. When the callback is invoked, the attacker can block the invocation, freezing the SS and potentially causing the watchdog to force a restart.

### 2.2.2 Hazard Situation A2

If a synchronous callback is invoked in an assistant thread of the SS, the attacker can choose to reply to the service request with an exception. The exception will be thrown at the invocation statement of the callback method in the context of the SS. If the exception is not handled properly, it will cause the SS to crash and the system to soft-reboot.

In Java-based programs, exceptions are commonly used to represent exceptional situations. A method can inform the caller of an exceptional situation using a `throw new Exception()` statement. The caller must use a `try-catch` block to handle the exception; otherwise, the code won't compile.

Most exceptions are forced to be handled explicitly, except for `RuntimeException`, which can be thrown by the Java Virtual Machine (VM) in Android, such as `NullPointerException`. This kind of exception is more likely to be ignored by developers because it is not required to be caught explicitly. If an exception is not handled properly, it will be caught and handled by the VM, which may choose to kill the process.

Our study reveals a new vulnerability triggered when the SS invokes a malicious callback method. When invoked, the callback method generates an instance of a subclass of `Exception` and replies it to the caller. In the context of the SS, the exception is thrown at the invocation statement of the callback. If an assistant thread invokes a malicious callback and does not handle exceptions properly, a vulnerability will occur. There are two attack measures:

- **Implement a service component inside the malicious app**: The instance of a malicious service component's proxy class is leveraged as the callback handle to conduct the attack. When the callback is invoked, the service component will reply with a well-chosen exception.
- **Leverage a system service or a service component in a normal app**: The instance of a normal service's proxy class (Servicex) is forged as the callback handle to conduct the attack. When the callback is invoked, Servicex will not handle the request and will throw a `SecurityException` back, which might not be handled properly by the callback caller.

### 2.2.3 Hazard Situation B1 & B2

Some system services expose data flow paths for a malicious app to inject malicious callback handles into system apps. A vulnerability will be triggered when the callback is invoked in the context of system apps.

System services often interact with system apps through Inter-Component Communication (ICC). According to our analysis, a system service may rely on app components to perform the following functions:

- **GUI Interaction**: Sometimes, a system service needs to interact with the device user through a graphical user interface (GUI). For example, the USB system service may need the user to decide whether an app should get permission to use USB devices.
- **Functional Module**: Some system services will implement their functions by calling the service interfaces of the service components in system apps. For example, the IMMS system service interacts with the service component in the Phone app to download or send MMS.

No matter what type of work the system service assigns to a system app, it needs to inform the client app of the handling result. Instead of working as the notifier, the system service passes a callback handle, received from the client app as an IPC call parameter, to the system app.

This design can lead to vulnerabilities. Attackers can inject a forged callback handle into a component of a system app. If a callback is invoked in an activity component of the system app (Situation B1), a malicious app can prevent the callback method from returning, freezing the GUI. If a callback is invoked in a non-activity component of the system app (Situation B2), an exception can be leveraged to crash the system app process.

### 3. Vulnerability Detection Tool

To discover "call me back" vulnerabilities, we have designed a vulnerability detection tool named KMHunter (short for "Callback(K)-Mechanism-Hunter"). The high-level idea is to implement a static taint analysis tool to identify where vulnerabilities exist: the IPC call parameters of system service interfaces are defined as the taint sources, and the callback invocation statements using the tainted callback handles are defined as the taint sinks.

KMHunter's design is based on FlowDroid, a widely used taint analysis tool for Android apps. To apply static taint analysis on the SS, KMHunter faces four challenges not addressed by FlowDroid:

- **C1. Complex Code Dependencies**: System services have more complex code (call-graph) dependencies than apps, making the original class loading scheme inappropriate.
- **C2. Multi-threaded Handling**: Some system services use assistant threads to respond to service requests, requiring KMHunter to transform the call-graph from multi-threaded to single-threaded.
- **C3. ICC/IPC Support**: ICC/IPC takes place during the handling of some service requests, requiring the generated call-graph to support ICC/IPC.
- **C4. Dormant Callback Handles**: A callback handle can remain dormant inside the SS context for a long period before its invocation is triggered by other SS operations.

To address these challenges, we have modified the implementation of FlowDroid. The framework of KMHunter consists of six components:

- **Interface Analyzer**: Summarizes the information of service interfaces in the SS.
- **Class Loader**: Loads the class files as required according to specific rules.
- **CG and CFG Generator**: Constructs the call graph and control-flow graph centered on the target system service interface.
- **Taint Analyzer**: Conducts the taint analysis based on the call graph and control-flow graph.
- **Vulnerability Alarms**: Guides the manual audit to inspect the vulnerability conditions and develop exploit code for dynamic testing.

### 3.1 Class Loading Control

The code (call-graph) dependencies for system services are more complex than those for apps, challenging the Class Loader component (C1). KMHunter will load the code of system services according to specific rules to handle this complexity.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.