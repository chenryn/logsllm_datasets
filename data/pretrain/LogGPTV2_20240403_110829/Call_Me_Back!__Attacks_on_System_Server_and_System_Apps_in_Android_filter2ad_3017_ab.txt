class as an example, the code fragment is shown as fol-
lows. We can observe that, during the transformation of
an IBinder object, there are some validation checks (line
4). Any correct object can pass the check and be cast to the
target class (line 5). However, in the event that these check-
s fail, the object is still forced to be treated as an instance
of the target proxy class in line 6. Therefore, any received
IBinder object will be regarded as correct.
Example of IBinder Object Transformation
I I n s t r u m e n t a t i o n W a t c h e r
a s I n t e r f a c e ( a n d r o i d . o s . I B i n d e r o b j )f
i f
a n d r o i d . o s . I I n t e r f a c e
( o b j==n u l l ) f r e t u r n n u l l ;g
i i n =
o b j . q u e r y L o c a l I n t e r f a c e (DESCRIPTOR ) ;
i f
( ( ( i i n != n u l l )
&&( i i n i n s t a n c e o f
r e t u r n ( ( I I n s t r u m e n t a t i o n W a t c h e r ) i i n ) ;g
I I n s t r u m e n t a t i o n W a t c h e r ) ) ) f
r e t u r n new Stub . P r o x y ( o b j ) ;
1 . p u b l i c
s t a t i c
2 .
3 .
4 .
5 .
6 .
7 .g
Callbacks can be divided into two types:
(cid:15) Synchronous callback is deﬁned when the caller needs
to get the return value from the callback method. Execu-
tion of the caller method will be blocked until the callback
method returns.
(cid:15) Asynchronous callback is deﬁned when the caller does
not care about the handling process of the callback. Exe-
cution of the caller method will continue (right after each
invocation) without waiting for the callback to return.
2.2 Vulnerability Overview
All of our newly identiﬁed vulnerabilities are directly re-
lated to the IPC-based service interfaces in the SS. These
interfaces receive a callback handle as an IPC call param-
eter. The callback can be invoked by the SS or passed to
a cooperator system app to be invoked by the system ap-
p. According to the runtime context when the callback is
invoked, we have identiﬁed four hazard situations:
A. Inside the SS:
A1. The callback is invoked in a synchronized code
block of any service thread;
A2. The callback is invoked in an assistant thread
without involving any synchronized block.
B. Inside a cooperator system app:
B1. The callback is invoked in an activity component;
B2. The callback is invoked in a service component or
a broadcast receiver component.
For the situations A1 and B1, attackers can block the
execution of the caller method to freeze the SS or system
apps. For the situations A2 and B2, attackers can throw
a carefully selected exception to the SS or system apps to
crash their processes.
In our approach, we formulate the vulnerability as follows.
A vulnerability is a controllable way (e.g., calling an inter-
face of a system service with special parameter values) for
a malicious app to let the execution of the SS or a system
app reach a vulnerability point. A vulnerability point is a
Java program statement which calls a synchronous callback
method. A vulnerability condition is the dependent condi-
tion which determines whether a vulnerability is exploitable
or not when a vulnerability point is reached.
2.2.1 Hazard Situation A1
If a synchronous callback is invoked in a synchronized code
block in any thread inside the SS, a malicious app can im-
plement its callback method to block the caller for a con-
trollable duration. This results in the hazard of the freeze
of a system service.
How this hazard is generated: When a service request ar-
rives, Binder mechanism will start a new thread in the SS to
handle it. Diﬀerent threads may need to operate on the same
global variable (value) in the context of the SS concurrent-
ly. Therefore, concurrency control is needed by the service
threads to guarantee mutual exclusion of the multi-threaded
code. The most frequently used concurrency control mech-
anism in the SS is based on the synchronized block mecha-
nism from the Java library, named java.util.concurrent.
An example is synchronized{lock}{code}. Threads that
want to run the code in the block should acquire the lock
ﬁrst. The lock is accessible for only one thread in one point
of time and other threads must wait for it to be released.
With this mechanism, developers can ensure that: only one
thread can execute the synchronized block at a time; each
thread entering the synchronized block can see the eﬀects
of previous modiﬁcations; and each thread entering the syn-
chronized block can inﬂuence later threads without conﬂicts.
Diﬀerent synchronized blocks can be protected with the
same lock. If one thread holds the lock for a long period,
other threads that want to acquire this lock will be blocked
and the system service will lose the ability to serve new-
ly arrived requests. Some system services specially start a
watchdog thread to monitor this kind of failure. The watch-
dog sets a timer-based monitor for the target lock. Once it
ﬁnds that the lock cannot be acquired in a preset period, it
will “bite” on the SS and force it to restart to recover from
a failure state [17].
According to our new ﬁndings, some service interfaces in
the SS receive a synchronous callback handle as an IPC call
parameter and actually invoke it in a synchronized block.
To exploit this vulnerability, attackers can implement a ma-
licious callback method and inject its handle to these inter-
faces. When the callback is invoked, the attacker can block
the invocation, which can freeze the SS and may ﬁnally cause
the watchdog to bite on the SS.
2.2.2 Hazard Situation A2
If a synchronous callback is invoked in an assistant thread
of the SS, the attacker can choose to reply to the service
request with an exception. The exception will be thrown
at the invocation statement of the callback method in the
94context of the SS. If the exception cannot be handled prop-
erly, it will immediately cause the crash of the SS and the
soft-reboot of the system.
For Java-based programs, Exception is commonly used to
represent the exceptional situations. A method can inform
the caller of an exceptional situation using a throw new Ex-
ception() statement. The caller must use try-catch block to
catch and handle the possibly thrown exception, otherwise
the code won’t compile.
In this way, most kinds of Exception are forced to be han-
dled explicitly by the developer, except one subclass named
RuntimeException. RuntimeException can be thrown by
the Java Virtual Machine (VM) in Android, i.e., DVM/ART.
For instance, NullPointerException will be thrown when
DVM/ART ﬁnds that a statement invokes a method of a
null object. This kind of exception is more likely to be ig-
nored by developers because it is not required to be caught
explicitly. If an exception cannot be handled properly, it will
ﬁnally be caught and handled by the code in DVM/ART.
DVM/ART will choose to kill the process.
Our study reveals a new kind of vulnerability which is
triggered when the SS invokes a malicious callback method.
When invoked, the callback method chooses a subclass of
Exception, generates one instance of the class and replies
it to the caller. In the context of the SS, the exception is
thrown at the invocation statement of the callback. As de-
scribed in Section 2.1, the assistant threads in the SS are
under the threat of uncaught exceptions.
If an assistant
thread invokes a malicious callback and does not handle ex-
ceptions properly, a vulnerability will occur. There are then
two options for attack measures:
(cid:15) Implement a service component inside the mali-
cious app. The instance of a malicious service component’s
proxy class is leveraged as the callback handle to conduct the
attack. When the callback is invoked, the service component
will reply a well-chosen exception to the caller. This kind of
attack has more alternatives on the replied exceptions.
(cid:15) Leverage a system service or a service component
in a normal app. The instance of a normal service’s proxy
class (Servicex) is forged as the callback handle to conduct
the attack. This normal service could be a system service or
a service component in an app. As described in Section 2.1,
when an instance of Servicex’s proxy class is received by
the SS as an IPC call parameter, the SS will transform it to
another service, which is believed to be the right one, such
as Servicey. However, the interface descriptors of Servicex
and Servicey do not match. When the callback is invoked,
Servicex will not handle the request. It will throw a Secu-
rityException back, which might not be handled properly
by the callback caller.
2.2.3 Hazard Situation B1 & B2
Some system services expose data ﬂow paths for a mali-
cious app to inject malicious callback handles into system
apps. A vulnerability will be triggered when the callback is
invoked in the context of system apps.
One system service is not an islanding function module.
There exists a synergic relationship between system ser-
vices and system apps. An app often consists of four types
of component, namely the activity (user interface), service
(background task), broadcast receiver (mailbox for broad-
cast), and content provider (local database server). Some
system services may interact with app components.The in-
teractions are based on ICC (Inter-Component Communica-
tion).According to our analysis, a system service may rely
on app components to perform the two following functions.
(cid:15) GUI Interaction. Sometimes, a system service needs
to interact with the device user through GUI. For example,
the usb system service which is in charge of USB device
management needs to let the user decide whether an app
should get the permission to use the USB devices.
(cid:15) Functional Module. Some system services will imple-
ment their functions by calling the service interfaces of the
service components in system apps. For example, the imms
system service will interact with the service component in
the Phone app to download/send MMS.
No matter what type of work the system service assigns
to a system app, it needs to inform the client app of the
handling result. Usually, the system service does not work
as the notiﬁer. Instead, it passes a callback handle, which
is received from the client app as an IPC call parameter, to
the system app.
This seemingly neat design results in vulnerabilities. At-
tackers can inject a forged callback handle into a component
of a system app. If a callback is invoked in an activity com-
ponent of the system app (Situation B1 ), a malicious app
can prevent the callback method from returning in order to
freeze the GUI. And if a callback is invoked in a non-activity
component of the system app (Situation B2 ), an exception
can be leveraged to crash the system app process.
3. VULNERABILITY DETECTION TOOL
In order to discover the “call me back” vulnerabilities, we
have designed a vulnerability detection tool named KMHunter
(short for “Callback(K)-Mechanism-Hunter”). The high lev-
el idea is to implement a static taint analysis tool to identify
where vulnerability exists: the IPC call parameters of sys-
tem service interfaces are deﬁned as the taint sources; and
the callback invocation statements using the tainted callback
handles are deﬁned as the taint sinks.
KMHunter ’s design is based on a widely used taint anal-
ysis tool for Android apps named FlowDroid. In order to
apply static taint analysis on the SS, KMHunter is facing
four challenges, which are not addressed by FlowDroid :
C1. Code (call-graph) dependencies of system services are
more complex than apps, which makes the original
class loading scheme inappropriate;
C2. Some system services utilize assistant threads to re-
spond to service requests, which requires KMHunter to
transform the call-graph from multi-threaded to single-
threaded;
C3. ICC/IPC takes place during the handling of some ser-
vice requests, which requires the generated call-graph
to support ICC/IPC;
C4. A callback handle can stay dormant inside the SS con-
text for a long period of time before its invocation is
triggered by some other SS operations.
In order to address the challenges, we have modiﬁed the
implementation of FlowDroid. The framework of KMHunter
is shown as Figure 1 and consists of six components: Inter-
face Analyzer is in charge of summarizing the information
of service interfaces in the SS; Class Loader loads the class
ﬁles as required according to speciﬁc rules; CG and CFG
Generator constructs the call graph and control-ﬂow graph
centering on the target system service interface; Taint An-
alyzer is in charge of conducting the taint analysis based
95Figure 1: Framework of KMHunter
Figure 2: Examples of Class Loading Control
(a) Invocation Tree (b) Invocation Graph
on the call graph and control-ﬂow graph; and Vulnerabili-
ty Alarms can guide the Manual Audit to inspect the vul-
nerability conditions and develop exploit code for Dynamic
Tester.
3.1 Class Loading Control
Code (call-graph) dependencies for system services are
more complex than apps. This challenges the Class Loader
components (C1). KMHunter will load the code of system