现代网站为了提升性能和提供更广泛的服务，通常会采用透明系统镜像供用户访问。这种攻击面往往被忽视，导致潜在的安全隐患。本文将探讨如何利用畸形请求和混淆的请求头欺骗系统，进而暴露其漏洞，并打开通往受害者网络的大门。此外，我还将分享如何结合这些技术与Bash脚本，突破防御措施，在漏洞悬赏中获得超过3万美元的奖励，并意外渗透了自己的ISP（互联网服务提供商）。

### 损害程度
本文不仅揭示了从隐藏到暴露状态的几个系统，还包括对英国最大ISP的隐蔽请求窃听、哥伦比亚可疑ISP的分析、Tor后台的困惑以及一个能够将反射型XSS升级为SSRF的系统。同时，我会介绍一些策略，用于屏蔽使用exp链和缓存机制的盲打SSRF。为了推动这些系统的发展，我发布了一个开源Burp插件——Collaborator Everywhere，通过选择最佳技术来增加你的网站流量，从而吸引更多来自合作网站的客户。

这篇文章也可以下载为[白皮书](https://portswigger.net/knowledgebase/papers/CrackingTheLens-whitepaper.pdf)。对应的BlackHat USA演讲视频预计在9月份公布。

## 介绍
无论是ShellShock、StageFright还是ImageTragick，这些在被忽视的攻击面中发现的严重漏洞背后，往往隐藏着许多类似的问题。这是因为安全测试人员的关注点不在主要攻击面中的“软肋”上。本文将展示反向代理、负载均衡器和后端分析系统带来的丰富攻击面，尽管它们多年来一直被过度忽视。我将通过一种简单的方法高效地进行大规模审计，并展示其中的一些关键漏洞。

本次研究发布了两个工具：Collaborator Everywhere是一个Burp Suite插件，可以自动将低危害的攻击载荷注入Web流量以揭露后端系统；Probe是一个分析连接客户端攻击面的网页。

## 方法论
### 善于监听
这一系列研究需要目标系统保持不可见性。过于明显的负载均衡设计是失败的，而后端分析系统的存在也应让用户一无所知。因此，我们不能依赖响应内容来识别漏洞，而是通过发送攻击载荷使系统与我们联系，并从生成的DNS查询和HTTP请求中获取信息。所有调查结果都始于pingback；没有它，这些漏洞和系统都不会被发现。我使用Burp Collaborator记录这些请求，你也可以托管自己的日志记录DNS服务器或使用Canarytokens进行探测。

### 研究线
起初，我使用简单的Burp匹配/替换将硬编码的pingback攻击载荷注入所有浏览器流量。这种方法因产生过多pingback而失败，无法将pingback与请求匹配。很快发现有些攻击载荷会引起延迟（几分钟、几小时甚至24小时）后才返回pingback。

为了有效区分pingback，我开发了Collaborator Everywhere，一个简单的Burp扩展，将包含唯一标识符的攻击载荷注入所有代理流量，并自动关联pingback与其对应的攻击。例如，下图显示Collaborator Everywhere识别出我在访问Netflix网站四小时后，Netflix访问了Referer头中指定的URL，并伪装成在x86 CPU上运行的iPhone。

### 扩大规模
对于专注的手动审计，Collaborator Everywhere非常高效。然而，我发现雅虎服务器的一个漏洞只有30%的扫描概率。原因是雅虎使用DNS循环负载均衡，三台前置服务器中只有一台存在漏洞。为了确保不遗漏任何存在漏洞的服务器，必须在目标基础设施的每个部分进行系统识别和直接攻击尝试。

最初我选择了Masscan和Burp Collaborator，但最终用Zmap/ZGrab替代了Masscan，因为它支持HTTP1.1和HTTPS。为了将pingback与目标相关联，我将目标主机名和每个payload相加。这些目标域名和IP地址来自公开或私有的漏洞悬赏名单，并映射到Rapid7的Project Sonar Forward DNS数据库。通过这种方法，我确定了几百万个IP地址，其中约50,000台主机监听80/443端口。

为了最大化覆盖率，每个IP地址我用了5个主机名，同时使用HTTP和HTTPS，并尝试使用`X-Forwarded-Proto: HTTPS`和`Max-Forwards`触发边缘情况。为了防止中间服务器破坏我的攻击载荷，我还发送了`Cache-Control: no-transform`。

## 错误路由请求
反向代理会对收到的请求进行轮询并转到适当的内部服务器。这些服务器通常处于特殊网络位置，接受公网请求并访问公司的DMZ区域，但不是整个内网。使用恰当的攻击载荷，可以操纵一些反向代理导致错误路由请求，这些请求的目的地由攻击者选择。这些错误请求相当于一道无限制访问目标内网的大门，可视为SSRF的强大变体。以下是这种攻击的简单流程图：

请注意，这种攻击通常涉及高度畸形的请求，可能会破坏诸如ZAP的工具，并可能无意中利用公司或ISP的中间网关。建议使用Burp Suite、mitmproxy和Ncat/OpenSSL等工具。

## 不正确的Host字段
触发回调函数的最简单方法是发送不正确的HTTP Host头：
```http
GET / HTTP/1.1
Host: uniqid.burpcollaborator.net
Connection: close
```
虽然这项技术已存在多年，但它仍然有效。通过此技术，我成功渗透了27个DoD服务器、我的ISP、一个哥伦比亚ISP（通过DNS投毒暴露），还有`http://ats-vm.lorax.bf1.yahoo.com`的服务器。以下是在`ats-vm.lorax.bf1.yahoo.com`发现的内部服务器示例：

初步查看，无法知道服务器运行的软件：
```http
GET / HTTP/1.1
Host: XX.X.XXX.XX:8082
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:32:50 GMT
Transfer-Encoding: chunked
Connection: close
Ok
/ HTTP/1.1 is unavailable
Ok
Unknown Command
Ok
Unknown Command
Ok
Unknown Command
Ok
```

不到一分钟，我就准确知道了服务器运行的软件及其通信方式，多亏了`HELP`命令的帮助：
```http
HELP / HTTP/1.1
Host: XX.X.XXX.XX:8082
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:33:59 GMT
Transfer-Encoding: chunked
Connection: keep-alive
Ok
  Traffic Server Overseer Port
  commands:
    get 
    set  = ""
    help
    exit
  example:
    Ok
    get proxy.node.cache.contents.bytes_free
    proxy.node.cache.contents.bytes_free = "56616048"
    Ok
  Variable lists are conf/yts/stats records, separated by commas
Ok
Unknown Command
Ok
Unknown Command
Ok
Unknown Command
Ok
```

大量的`Unknown Command`是因为服务器将请求的每一行理解为一个命令。我猜测服务器的解释器使用类换行符终止协议，这使得经典SSRF的构造变得困难。幸运的是，基于路由的SSRF更灵活，我能够构造一个包含一条命令的GET请求。