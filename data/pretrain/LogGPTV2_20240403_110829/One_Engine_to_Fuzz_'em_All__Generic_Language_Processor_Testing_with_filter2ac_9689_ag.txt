(Oakland), San Francisco, CA, May 2020.
[32] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili,
Shuang Hao, Christopher Kruegel, and Giovanni Vigna. Difuze: Interface
aware fuzzing for kernel drivers. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security.
[33] Kyle Dewey, Jared Roesch, and Ben Hardekopf. Language fuzzing using
constraint logic programming. In Proceedings of the 29th ACM/IEEE
International Conference on Automated Software Engineering, ASE ’14,
pages 725–730, New York, NY, USA, 2014. Association for Computing
Machinery.
[34] Kyle Dewey, Jared Roesch, and Ben Hardekopf. Fuzzing the rust
In 2015 30th IEEE/ACM International
typechecker using clp (t).
Conference on Automated Software Engineering (ASE), pages 482–493.
IEEE, 2015.
[35] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu
Pei, and Zuoning Chen. Collafl: Path sensitive fuzzing. In 2018 IEEE
Symposium on Security and Privacy (SP), pages 679–696. IEEE, 2018.
[36] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed
In 2009 IEEE 31st International Conference on
whitebox fuzzing.
Software Engineering, pages 474–484. IEEE, 2009.
[37] P. Godefroid, H. Peleg, and R. Singh. Learn fuzz: Machine learning for
input fuzzing. In 2017 32nd IEEE/ACM International Conference on
Automated Software Engineering (ASE), pages 50–59, 2017.
[38] Google. Honggfuzz, 2016. https://google.github.io/honggfuzz/.
[39] Rahul Gopinath, Björn Mathis, Mathias Höschele, Alexander Kampmann,
and Andreas Zeller.
Sample-free learning of input grammars for
comprehensive software fuzzing. arXiv preprint arXiv:1810.08289, 2018.
[40] Rahul Gopinath, Björn Mathis, Matthias Höschele, Alexander Kampmann,
Sample-free learning of input grammars for
and Andreas Zeller.
comprehensive software fuzzing. ArXiv, abs/1810.08289, 2018.
[41] Rahul Gopinath, Björn Mathis, and Andreas Zeller.
Inferring input
grammars from dynamic control flow. arXiv preprint arXiv:1912.05937,
2019.
[42] Samuel Groß. Fuzzil: Coverage guided fuzzing for javascript engines.
Master thesis, TU Braunschweig, 2018.
[43] HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. CodeAlchemist:
Semantics-aware code generation to find vulnerabilities in javascript
engines. 2019.
[44] Christian Holler, Kim Herzig, and Andreas Zeller. Fuzzing with code
fragments. In Proceedings of the 21st USENIX Conference on Security
Symposium, Security’12, page 38, USA, 2012. USENIX Association.
[45] Matthias Höschele and Andreas Zeller. Mining input grammars from
dynamic taints. In 2016 31st IEEE/ACM International Conference on
Automated Software Engineering (ASE), pages 720–725. IEEE, 2016.
[46] Bo Jiang, Ye Liu, and W. K. Chan. Contractfuzzer: Fuzzing smart
the 33rd
contracts for vulnerability detection.
ACM/IEEE International Conference on Automated Software Engineering,
ASE 2018, pages 259–269, New York, NY, USA, 2018. Association for
Computing Machinery.
In Proceedings of
[47] Jinho Jung, Hong Hu, Joy Arulraj, Taesoo Kim, and Woonhak Kang.
APOLLO: Automatic Detection and Diagnosis of Performance Regres-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
655
In Proceedings of the 46th
sions in Database Systems (to appear).
International Conference on Very Large Data Bases (VLDB), Tokyo,
Japan, August 2020.
[62] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Skyfire: Data-driven
seed generation for fuzzing. In 2017 IEEE Symposium on Security and
Privacy (SP), pages 579–594. IEEE, 2017.
[48] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael
In Proceedings of the 2018 ACM
Hicks. Evaluating fuzz testing.
SIGSAC Conference on Computer and Communications Security, pages
2123–2138, 2018.
[49] Caroline Lemieux and Koushik Sen. Fairfuzz: A targeted mutation
strategy for increasing greybox fuzz testing coverage. In Proceedings of
the 33rd ACM/IEEE International Conference on Automated Software
Engineering, pages 475–485, 2018.
[50] Xiao Liu, Xiaoting Li, Rupesh Prajapati, and Dinghao Wu. Deepfuzz:
Automatic generation of syntax valid c programs for fuzz testing. In
Proceedings of the AAAI Conference on Artificial Intelligence, volume 33,
pages 1044–1051, 2019.
[51] MozillaSecurity. funfuzz. https://github.com/MozillaSecurity/funfuzz,
2020.
[52] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and
In Proceedings of the
Yves Le Traon. Semantic fuzzing with zest.
28th ACM SIGSOFT International Symposium on Software Testing and
Analysis, pages 329–340, 2019.
[53] Soyeon Park, Wen Xu, Insu Yun, Daehee Jang, and Taesoo Kim. Fuzzing
JavaScript Engines with Aspect-preserving Mutation. In Proceedings
of the 41st IEEE Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2020.
[54] Van-Thuan Pham, Marcel Böhme, and Abhik Roychoudhury. Model-
based whitebox fuzzing for program binaries. In Proceedings of the 31st
IEEE/ACM International Conference on Automated Software Engineering,
ASE 2016.
[55] Van-Thuan Pham, Marcel Böhme, Andrew Edward Santosa, Alexan-
dru Razvan Caciulescu, and Abhik Roychoudhury. Smart greybox fuzzing.
IEEE Transactions on Software Engineering, 2019.
[56] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano
Giuffrida, and Herbert Bos. Vuzzer: Application-aware evolutionary
fuzzing. In NDSS, volume 17, pages 1–14, 2017.
[57] Chris Rohlf and Yan Ivnitskiy. Attacking clientside jit compilers. Black
Hat USA, 2011.
[58] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu
Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and
Giovanni Vigna. Driller: Augmenting fuzzing through selective symbolic
execution. In NDSS, volume 16, pages 1–16, 2016.
[59] Ken Thompson. Reflections on Trusting Trust. Commun. ACM, 27(8),
August 1984.
[60] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos.
Ifuzzer: An evolutionary interpreter fuzzer using genetic programming. In
European Symposium on Research in Computer Security, pages 581–601.
Springer, 2016.
[61] Joachim Viide, Aki Helin, Marko Laakso, Pekka Pietikäinen, Mika
Seppänen, Kimmo Halunen, Rauli Puuperä, and Juha Röning. Experiences
In Proceedings of the 2nd
with model inference assisted fuzzing.
Conference on USENIX Workshop on Offensive Technologies, WOOT’08,
USA, 2008. USENIX Association.
[63] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Superion: Grammar-
aware greybox fuzzing. In 2019 IEEE/ACM 41st International Conference
on Software Engineering (ICSE), pages 724–735. IEEE, 2019.
[64] T. Wang, T. Wei, G. Gu, and W. Zou. Taintscope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection. In
2010 IEEE Symposium on Security and Privacy, pages 497–512, 2010.
[65] Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng, Tiffany Bao,
Dinghao Wu, and Purui Su. Not all coverage measurements are equal:
Fuzzing by coverage accounting for input prioritization. NDSS, 2020.
[66] Wikipedia contributors. Backus-naur form — Wikipedia, the free
encyclopedia, 2020. [Online; accessed 1-September-2020].
[67] Wikipedia contributors. Mann-whitney u test — Wikipedia, the free
encyclopedia, 2020. [Online; accessed 31-August-2020].
[68] Wikipedia contributors. Rust (programming language) — Wikipedia, the
free encyclopedia, 2020. [Online; accessed 23-December-2020].
[69] Wikipedia contributors. Scope (computer science) — Wikipedia, the free
encyclopedia, 2020. [Online; accessed 23-December-2020].
[70] Wikipedia contributors. Translator (computing) — Wikipedia, the free
encyclopedia, 2020. [Online; accessed 1-September-2020].
[71] Dominik Winterer, Chengyu Zhang, and Zhendong Su. On the unusual
effectiveness of type-aware mutations for testing smt solvers. arXiv
preprint arXiv:2004.08799, 2020.
[72] Zhengkai Wu, Evan Johnson, Wei Yang, Osbert Bastani, Dawn Song,
Jian Peng, and Tao Xie. Reinam: reinforcement learning for input-
grammar inference. In Proceedings of the 2019 27th ACM Joint Meeting
on European Software Engineering Conference and Symposium on the
Foundations of Software Engineering, pages 488–498, 2019.
[73] Dingning Yang, Yuqing Zhang, and Qixu Liu. Blendfuzz: A model-based
framework for fuzz testing programs with grammatical inputs. In 2012
IEEE 11th International Conference on Trust, Security and Privacy in
Computing and Communications, pages 1070–1076. IEEE, 2012.
[74] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr.
Finding
In Proceedings of the 32nd
and understanding bugs in c compilers.
ACM SIGPLAN Conference on Programming Language Design and
Implementation, PLDI’11, New York, NY, USA, 2011.
[75] W. You, X. Liu, S. Ma, D. Perry, X. Zhang, and B. Liang. Slf:
Fuzzing without valid seed inputs. In 2019 IEEE/ACM 41st International
Conference on Software Engineering (ICSE), pages 712–723, 2019.
[76] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. Qsym:
A practical concolic execution engine tailored for hybrid fuzzing. In
Proceedings of the 27th USENIX Conference on Security Symposium,
USA, 2018.
[77] Michal Zalewski. American Fuzzy Lop (2.52b). http://lcamtuf.coredump.
cx/afl, 2019.
[78] Rui Zhong, Yongheng Chen, Hong Hu, Hangfan Zhang, Wenke Lee, and
Dinghao Wu. SQUIRREL: Testing Database Management Systems with
Language Validity and Coverage Feedback. In Proceedings of the 27th
ACM Conference on Computer and Communications Security (CCS),
Orlando, USA, November 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
656
TABLE V: Detected bugs. POLYGLOT found 173 bugs, including 6 from GCC, 24 from Clang, 4 from G++, 6 from Clang++, 3 from v8, 1
from JSCore, 9 from ChakraCore, 1 from Hermes, 1 from mujs, 4 from njs, 5 from JerryScript, 1 from DukTape, 1 from QuickJs, 4 from R,
3 from pqR, 35 from php, 27 from SQLite, 12 from Lua, 2 from LuaJit, 16 from solc, 8 from freepascal.
Bug Type: UAF: use-after-free. BOF:buffer overflow of Global (G), Heap (H), and Stack (S).
SEGV: potential exploitable vulnerability. AF: assertion failure. LEAK: memory leak.
Bug Status: ⋆: Fixed, •: Verified, ⋄: Open, †: CVE
Reference
zend_hash_packed_to_hash
ID Type Function
pqR 5c6058e, 845K LoC
• issue-43
128 SEGV Primitive
⋄ issue-44
129 SEGV do_dotcall_e
⋄ issue-45
130 SEGV plot
PHP v8.0.0, 1269K LoC
⋄ 79207
131 SBOF header callback
• 79209
132 UAF
• 79214
133 SEGV php_var_export_ex
134 SEGV zend_hash_next_index_insert ⋆ 79258
⋆ 79259
135 SBOF php_array_element_dump
136 AF
⋆ 79777
zend_dispatch_try
zend_closure_get_debug_info ⋆ 79778
137 AF
138 AF
⋆ 79779
zend_wrong_string_offset
⋄ 79781
139 HBOF zend_array_destroy
⋆ 79783
140 SEGV php_str_replace_common
141 UAF
⋆ 79784
slow_index_convert
• 79788
142 AF
zend_array_destroy
143 AF
⋆ 79790
zend_ast_evaluate
_get_zval_ptr_cv_BP_VAR_RW ⋆ 79791
144 AF
145 AF
⋆ 79792
zend_array_destroy
146 UAF
fetch imension_address
⋆ 79793
• 79813
147 AF
zend_gc_delref
148 SEGV zend_string_release_ex
⋆ 79815
• 79816
149 AF
_zend_is_inconsistent
⋆ 79817
150 SBOF zval_get_tmp_string
151 UAF
⋆ 79818
⋄ 79819
152 SEGV zend_std_write_property
⋆ 79821
153 SEGV zend_get_properties_for
⋆ 79829
154 SEGV php_pcre_replace_array
155 LEAK php_var_dump
⋆ 79830
• 79831
156 AF
157 SEGV property_info_for_slot
⋆ 79832
158 SEGV php_str_replace_in_subject ⋄ 79835
⋄ 79836
159 SEGV concat_function
⋄ 79837
160 SEGV zend_get_type_by_const
⋄ 79838
161 SEGV zend_mm_alloc_small
⋆ 79839
162 AF
⋆ 79862
163 AF
⋆ 79947
164 LEAK zend_hash
165 LEAK zend_string
⋆ 79951
freepascal v3.3.1, 405K LoC
166 AF
167 AF
168 AF
169 AF
170 AF
171 AF
172 AF
173 AF
tmoddivnode.simplify
TSparcReader.BuildOperand
get_funcretloc
tinlinenode.handle_str
replaceloadnodes
GetCopyAndTypeCheck
searchcsedomain
GetCopyAndTypeCheck
⋆ 37449
⋄ 37459
⋆ 37460
⋆ 37462
⋆ 37475
⋄ 37476
⋆ 37477
⋆ 37508
array_walk
zend_get_property_offset
ZEND_VM_HANDLER marco
increment_function
† 2020-13871
† 2020-13434
† 2020-13435
† 2020-15358
Reference
resetAccumulator
SBOF sqlite3_str_vappendf
SEGV sqlite3ExprCodeTarget
Nonlocal Reference
force_constant_size
c_expr_sizeof_expr
extended_tree
gimple_call_arg
flattenSubquery
sqlite3VdbeExec
sqlite3ExprCodeIN
selectExprDefer
Where clause
sqlite3VdbeExec
Vdbe Memory
sqlite3WhereBegin
clearSelect
OrderBy Optimize
xferOptimization
Btree Cursor
sqlite3IsLikeFunction
sqlite3VdbeExec
ID Type Function
SQLite v3.31, 300K LoC
1 UAF
2
3
4 HBOF multiSelectOrderBy
SQLite v3.32 (development), 304K LoC
⋆ da5a09b
5 UAF
sqlite3BlobCompare
⋆ 7c6d876
6 UAF
resetAccumulator
⋆ 0899cfu
SEGV sqlite3VdbeExec
7
SEGV sqlite3VdbeExec
⋆ 1f6f353
8
SEGV sqlite3VdbeCursorMoveto ⋆ e5504e9
9
⋆ f7d8908
10 SEGV moveToRoot
11 SEGV sqlite3Select
⋆ b706351
12 SEGV sqlite3VdbeCursorMoveto ⋆ 5829597
13 SEGV isAuxiliaryVtabOperator ⋆ 4374860
⋆ e367f31
14 AF