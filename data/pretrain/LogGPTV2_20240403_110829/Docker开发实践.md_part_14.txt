511136ea3c5a: Image already pushed, skipping
5b12ef8fd570: Image already pushed, skipping
...
1d07b342055c: Image successfully pushed
Pushing tag for rev [1d07b342055c] on
{https://cdn-registry-1.docker.io/v1/repositories/lqkaixin/centos-apache-php/tags/v1}
由于前面创建mysql镜像时已登录过，这里就不需要再次输入用户登录信息了。
6.3 启动容器
至此，我们已经有了mysql和apache容器，接下来启动并使用它们。
启动mysql容器：
$ sudo docker run --name test_mysql -d -P lqkaixin/centos-mysql:v1
643c9b48e9ae7c5e1796b4f90b2a31a6dea3c67f2c77d126b537a212c40711e4
查看容器中mysql的3306端口映射到的主机端口：
$ sudo docker port 643c9b48e9ae 3306
0.0.0.0:49171
可以看到，Docker将本地的49171端口映射到了test_mysql容器的3306端口。
启动apache-php容器：
$ sudo docker run --name test_apache-php -d -P -e MYSQL_ADDR=192.168.1.2:49171
lqkaixin/centos-apache-php:v1
45813120e2e77cc0a5d683f380788377e9aaaeeea3a4072d1573e4b119c6c13b
这里我们用-e重新指定了MySQL的主机地址192.168.1.2:49171，其中192.168.1.2是mysql容器
所在的主机，端口为mysql容器的3306映射到主机上的端口，我们刚查询到为49171。
Apache服务器对外暴露了其80端口，我们需要查看它映射到了主机上的哪个端口：
$ sudo docker port 45813120e2e77cc 80
0.0.0.0:49172
这里是49172。稍后通过浏览器访问该端口，即可访问容器提供的Web服务。
6.3 启动容器 81
查看我们的容器： 1
$ sudo docker ps
CONTAINER ID IMAGE COMMAND CREATED 2
STATUS PORTS NAMES
45813120e2e7 lqkaixin/centos-apache-php:v1"/bin/sh -c /root/ru 4 minutes ago
Up 4 minutes 0.0.0.0:49172->80/tcp test_apache-php 3
643c9b48e9ae lqkaixin/centos-mysql:v1"/bin/sh –c /root/ru 9 minutes ago
Up 9 minutes 0.0.0.0:49171->3306/tcp test_mysql
4
可以看到，test_mysql和test_apache-php这两个容器已经正常运行了。打开浏览器，在地址
栏中输入192.168.1.2:49172/test.php（此处IP和端口需要根据你的实际情况而定），如果显示如图
5
6-2所示的界面，即证明容器正常工作了。
6
7
9
8
图6-2 Apache+PHP+MySQL展示页面
10
10
11
13
14
15
16
17
18
82 第7章 综合案例2：DLNNM
第 7 章
综合案例2：DLNNM
本章也是一个综合案例，旨在将前面所学的内容应用到实际的开发当中。通过实例的操作，
我们将综合学习和巩固Dockerfile构建、容器连接、跨主机容器连接和分发镜像等知识，以此达
到对Docker在实际应用中拥有直观理解的目的。
本案例取名为DLNNM，分别代表要使用技术的首字母，其中D代表Docker，L代表Linux，
第一个N代表Nginx，第二个N代表Node.js，M代表MongoDB。
本案例的目标是实现一个Web应用，我们可以通过Web页面向数据库中插入一条记录，同时
也能查询所有记录并将其显示在页面上。
案例的部署结构如图7-1所示，其中包含3台主机和5个容器。主机1运行着MongoDB服务和
MongoDB代理容器，主机2运行着Node.js服务器和MongoDB访问代理容器，主机3运行着前端Web
服务程序Nginx容器。其中代理容器并不是必需的，但是拥有它，架构会变得更灵活。当然，我
们也可以完全将这3个Docker主容器（MongoDB、Node.js和Nginx）部署在同一台主机上，这由
实际的业务需求所决定。根据实际的业务需求，我们还可以在这套结构里添加多个MongoDB容
器服务或者其他种类的容器服务（如Redis、PHP等）。
本章包含以下内容：
 介绍MongoDB数据库系统，并将其制作成镜像；
 介绍Node.js开发平台，并以此开发node-web-api镜像；
 使用代理容器连接MongoDB容器和Node.js容器；
 基于Nginx服务器开发前端Web页面，并将其制作成镜像。
7.1 构建mongodb镜像 83
1
2
3
4
5
6
7
9
8
10
10
11
图7-1 Nginx+Node.js+MongoDB的部署架构
13
7.1 构建 mongodb 镜像
14
MongoDB是一款流行的开放源码的非关系型数据库系统（NoSQL），常用于大数据量、高并
15
发、弱事务的互联网应用。MongoDB的官网地址是http://www.mongodb.com/。将MongoDB数据
库系统容器化可以带来以下几个好处。
16
 更容易维护。
 启动速度快。
17
 方便与他人进行分享。
本节将讲解如何使用Dockerfile来构建mongodb镜像。 18
84 第7章 综合案例2：DLNNM
7.1.1 编写镜像Dockerfile
如果用户想要将MongoDB容器应用到自己的生产环境中，可以选择在Docker Hub的mongodb
官方镜像上进行二次开发，其网址是https://registry.hub.docker.com/u/dockerfile/mongodb/。但在本
节中，我们将手动编写Dockerfile文件来构建mongodb镜像，具体步骤如下。
(1) 创建Dockerfile文件，并且在文件开始位置添加使用#注释的描述信息：
# 名称：容器化的MongoDB
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.15
这些描述信息并不是必需的，但我们推荐写上，这样方便传播和后期维护。
(2) Dockerfile虽然很简单，也很灵活，不过仍然有一些规则需要遵守，比如开头一定是定义
根镜像的命令，这里使用ubuntu作为mongodb的根镜像：
FROM ubuntu:latest
(3) 声明维护者信息：
MAINTAINER xixihe PI:EMAIL
(4) 即使Ubuntu系统中已经有了MongoDB包索引，但可能不是最新版本。为了使用官方最新
的包进行安装，我们需要为Ubuntu包管理器导入MongoDB公共的GPG密钥：
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
RUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee
/etc/apt/sources.list.d/10gen.list
(5) 更新包索引并安装MongoDB：
RUN apt-get update && apt-get install -y mongodb-org
如果有需要，我们还可以分别为MongoDB的各个组件指定特定的版本，如下：
RUN apt-get update && apt-get install -y mongodb-org=2.6.1 mongodb-org-server=2.6.1
mongodb-org-shell=2.6.1 mongodb-org-mongos=2.6.1 mongodb-org-tools=2.6.1
(6) MongoDB默认的服务端口是27017，所以还要使用EXPOSE命令将这个端口映射到主机：
EXPOSE 27017
(7) 使用ENTRYPOINT命令告诉Docker在MongoDB容器启动时运行mongod服务:
ENTRYPOINT ["/usr/bin/mongod"]
7.1.2 构建和上传镜像
有了Dockerfile之后，进入Dockerfile文件所在的目录，然后使用build命令来构建镜像：
7.1 构建mongodb镜像 85
# docker build --tag xixihe/mongo-db:v1 .
1
Sending build context to Docker daemon 4.096 kB
Sending build context to Docker daemon
Step 0 : FROM ubuntu:latest
2
---> 8eaa4ff06b53
Step 1 : MAINTAINER xixihe PI:EMAIL
---> Running in 3f2b9923ab0b
3
---> c696d91f83af
Removing intermediate container 3f2b9923ab0b
Step 2 : RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
4
---> Running in 2bc22605302a
Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.oJW1Is5C5Q
--no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring
/etc/apt/trusted.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 5
gpg: requesting key 7F0CEB10 from hkp server keyserver.ubuntu.com
gpg: key 7F0CEB10: public key "Richard Kreuter " imported
gpg: Total number processed: 1 6
gpg: imported: 1 (RSA: 1)
---> da4588da3f6c
Removing intermediate container 2bc22605302a 7
Step 3 : RUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee
/etc/apt/sources.list.d/mongodb.list
---> Running in c31b6e026afd 9
deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen
---> 2291fe04794f
Removing intermediate container c31b6e026afd 8
Step 4 : RUN apt-get update && apt-get install -y mongodb-org
---> Running in 57c161eaf46a
...(略)
10
这里需要说明的是，我们通过tag标志为本镜像指定的命名空间是xixihe，仓库名为mongo-db，
TAG标记为v1。这里的命名空间必须与需要推送到Docker Hub上的账号保持一致。 10
当build命令执行完毕时，我们的镜像也就构建成功了。接下来，通过push命令将镜像推送
到Docker Hub上。如果还未在命令行登录过Docker Hub，Docker系统会提示我们先登录Docker 11
Hub，此时直接输入账号和密码即可：
13
# docker push xixihe/mongo-db:v1
he push refers to a repository [xixihe/mongo-db:v1] (len: 1)
Sending image list 14
Please login prior to push:
Username: xixihe
Password: 15
Email: PI:EMAIL
Login Succeeded
The push refers to a repository [xixihe/mongo-db:v1] (len: 1) 16
Sending image list
Pushing repository xixihe/node-mongo (1 tags)
511136ea3c5a: Image already pushed, skipping
17
3b363fd9d7da: Image already pushed, skipping
...(略)
18
至此，本案例的数据持久mongodb镜像就已经创建好了，并且可以从Docker Hub中自由拉取。
86 第7章 综合案例2：DLNNM
7.2 构建 Node.js 镜像
Node.js是一个基于Google V8引擎建立的使用JavaScript语言编写的服务器开发平台，可用来
快速构建易于扩展的网络应用。Node.js的非阻塞I/O的事件驱动模型机制使得它更轻量、更高效，
特别适用于处理分布式设备密集实时数据。
本节中，我们使用Node.js开发一套简单的web-api服务，这套API主要用于对MongoDB进行
增查操作，最后将其打包至安装了Node.js运行时的镜像中。
在开始之前，我们先创建工作目录node，这个目录用来存放Dockfile文件及其所依赖的项目
文件及文件夹：
# mkdir node
# cd node
# touch Dockerfile
# mkdir src
这个目录包含Dockerfile文件和src目录，其中src目录用于存放项目的Node.js项目代码。
7.2.1 项目源文件
我们将Node.js Web应用的全部源码放入到src文件夹。一个Node.js应用一般由源文件和其所
依赖的第三方模块组成。首先，在src文件夹里面建立项目的包文件package.json，这个包文件用
来添加本Web应用的描述信息，包括名称、作者、版本以及项目所依赖的第三方库等信息。下面
是包文件package.json的内容：
{
"name": "Docker Node.js Web应用",
"private": true,
"version": "0.0.1",
"description": "Docker Node.js Web应用",
"author": "xixihe ",
"dependencies": {
"express": "4.11.0",
"mongodb": "1.4.28",
"body-parser":"1.9.2"
}
}
Node.js利用包管理器NPM来管理项目依赖关系。通过npm install命令就能导入在包文件
package.json中字段dependencies声明的，第三方库到项目中。
我们的node-web应用共依赖3个包，下面简要介绍一下这3个包的作用。
 Express：Express是Node.js平台下的一个快速、灵活、极简的Web应用开发框架, 它提供
一系列强大的特性，扩展了Node.js原生的HTTP接口，帮助我们创建各种 Web 和移动设备
应用。其官方网址是http://expressjs.com/。
7.2 构建Node.js镜像 87
 MongoDB：因为我们的node-web应用需要用到MongoDB数据库，所以还需要访问数据库 1
的驱动程序，也就是mongodb，具体可参考文档：http://mongodb.github.io/ node-mongodb-
native/contents.html。
2
 body-parser：express框架下解析HTTP请求数据的一个中间件，本案例使用此模块来解析
通过POST 上传的数据内容。关于该包的更多内容，可参考它的文档和源码：
3
https://github.com/expressjs/body-parser。
接下来，在src文件夹里创建应用的入口文件index.js，其源代码如下： 4
var express = require('express');
var bodyParser = require('body-parser'); 5
var mongo = require('mongodb');
var PORT = 8080;
//var db = new mongo.Db('nginx-node-mongo', new mongo.Server('localhost', 27017)); 6
//var db = new mongo.Db('nginx-node-mongo', new mongo.Server('192.168.56.101', 27017));
var db = new mongo.Db('nginx-node-mongo', new mongo.Server('mongo', 27017));
var app = express() ; 7
app.use(bodyParser.json());
app.use(bodyParser.urlencoded());
app.use(bodyParser.raw()); 9
app.get('/node-web-api/msg/find', function(req, res){