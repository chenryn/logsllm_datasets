### 5.3 镜像推送
在推送镜像时，部分镜像已经存在，因此被跳过：
```
511136ea3c5a: Image already pushed, skipping
5b12ef8fd570: Image already pushed, skipping
...
1d07b342055c: Image successfully pushed
Pushing tag for rev [1d07b342055c] on
{https://cdn-registry-1.docker.io/v1/repositories/lqkaixin/centos-apache-php/tags/v1}
```

由于在创建MySQL镜像时已登录过Docker Hub，此处无需再次输入用户登录信息。

### 6.3 启动容器
至此，我们已经准备好了MySQL和Apache容器。接下来，我们将启动并使用它们。

#### 启动MySQL容器
```bash
$ sudo docker run --name test_mysql -d -P lqkaixin/centos-mysql:v1
643c9b48e9ae7c5e1796b4f90b2a31a6dea3c67f2c77d126b537a212c40711e4
```

查看容器中MySQL的3306端口映射到主机上的端口：
```bash
$ sudo docker port 643c9b48e9ae 3306
0.0.0.0:49171
```

可以看到，Docker将本地的49171端口映射到了`test_mysql`容器的3306端口。

#### 启动Apache-PHP容器
```bash
$ sudo docker run --name test_apache-php -d -P -e MYSQL_ADDR=192.168.1.2:49171 lqkaixin/centos-apache-php:v1
45813120e2e77cc0a5d683f380788377e9aaaeeea3a4072d1573e4b119c6c13b
```

这里我们用`-e`参数重新指定了MySQL的主机地址`192.168.1.2:49171`，其中`192.168.1.2`是MySQL容器所在的主机，端口为MySQL容器的3306端口映射到主机上的49171端口。

查看Apache服务器对外暴露的80端口映射到主机上的端口：
```bash
$ sudo docker port 45813120e2e77cc 80
0.0.0.0:49172
```

这里是49172。稍后通过浏览器访问该端口，即可访问容器提供的Web服务。

#### 查看正在运行的容器
```bash
$ sudo docker ps
CONTAINER ID   IMAGE                           COMMAND                  CREATED          STATUS          PORTS                          NAMES
45813120e2e7   lqkaixin/centos-apache-php:v1   "/bin/sh -c /root/ru"   4 minutes ago    Up 4 minutes    0.0.0.0:49172->80/tcp          test_apache-php
643c9b48e9ae   lqkaixin/centos-mysql:v1        "/bin/sh –c /root/ru"   9 minutes ago    Up 9 minutes    0.0.0.0:49171->3306/tcp        test_mysql
```

可以看到，`test_mysql`和`test_apache-php`这两个容器已经正常运行了。打开浏览器，在地址栏中输入`192.168.1.2:49172/test.php`（此处IP和端口需要根据实际情况调整），如果显示如图6-2所示的界面，即证明容器正常工作了。

### 第7章 综合案例2：DLNNM

本章是一个综合案例，旨在将前面所学的内容应用到实际开发中。通过实例操作，我们将综合学习和巩固Dockerfile构建、容器连接、跨主机容器连接和分发镜像等知识，以此达到对Docker在实际应用中拥有直观理解的目的。

本案例取名为DLNNM，分别代表要使用技术的首字母，其中D代表Docker，L代表Linux，第一个N代表Nginx，第二个N代表Node.js，M代表MongoDB。

本案例的目标是实现一个Web应用，我们可以通过Web页面向数据库中插入一条记录，同时也能查询所有记录并将其显示在页面上。

#### 案例部署结构
案例的部署结构如图7-1所示，包含3台主机和5个容器。主机1运行着MongoDB服务和MongoDB代理容器，主机2运行着Node.js服务器和MongoDB访问代理容器，主机3运行着前端Web服务程序Nginx容器。代理容器并不是必需的，但可以增加架构的灵活性。当然，我们也可以将这3个Docker主容器（MongoDB、Node.js和Nginx）部署在同一台主机上，具体取决于实际业务需求。

本章包含以下内容：
- 介绍MongoDB数据库系统，并将其制作成镜像；
- 介绍Node.js开发平台，并以此开发`node-web-api`镜像；
- 使用代理容器连接MongoDB容器和Node.js容器；
- 基于Nginx服务器开发前端Web页面，并将其制作成镜像。

### 7.1 构建MongoDB镜像

MongoDB是一款流行的开源非关系型数据库系统（NoSQL），常用于大数据量、高并发、弱事务的互联网应用。将MongoDB数据库系统容器化可以带来以下几个好处：
- 更容易维护。
- 启动速度快。
- 方便与他人分享。

#### 7.1.1 编写镜像Dockerfile

(1) 创建Dockerfile文件，并在文件开始位置添加描述信息：
```dockerfile
# 名称：容器化的MongoDB
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.15
```

这些描述信息虽然不是必需的，但推荐写上，方便传播和后期维护。

(2) 定义根镜像：
```dockerfile
FROM ubuntu:latest
```

(3) 声明维护者信息：
```dockerfile
MAINTAINER xixihe <PI:EMAIL>
```

(4) 导入MongoDB公共的GPG密钥：
```dockerfile
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
RUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list
```

(5) 更新包索引并安装MongoDB：
```dockerfile
RUN apt-get update && apt-get install -y mongodb-org
```

如果有需要，还可以分别为MongoDB的各个组件指定特定的版本：
```dockerfile
RUN apt-get update && apt-get install -y mongodb-org=2.6.1 mongodb-org-server=2.6.1 mongodb-org-shell=2.6.1 mongodb-org-mongos=2.6.1 mongodb-org-tools=2.6.1
```

(6) 映射MongoDB默认的服务端口27017到主机：
```dockerfile
EXPOSE 27017
```

(7) 设置容器启动时运行mongod服务：
```dockerfile
ENTRYPOINT ["/usr/bin/mongod"]
```

#### 7.1.2 构建和上传镜像

有了Dockerfile之后，进入Dockerfile文件所在的目录，然后使用build命令来构建镜像：
```bash
# docker build --tag xixihe/mongo-db:v1 .
```

当build命令执行完毕时，镜像也就构建成功了。接下来，通过push命令将镜像推送到Docker Hub上。如果还未在命令行登录过Docker Hub，Docker系统会提示我们先登录Docker Hub，此时直接输入账号和密码即可：
```bash
# docker push xixihe/mongo-db:v1
```

至此，本案例的数据持久化MongoDB镜像就已经创建好了，并且可以从Docker Hub中自由拉取。

### 7.2 构建Node.js镜像

Node.js是一个基于Google V8引擎建立的使用JavaScript语言编写的服务器开发平台，可用来快速构建易于扩展的网络应用。Node.js的非阻塞I/O的事件驱动模型机制使得它更轻量、更高效，特别适用于处理分布式设备密集实时数据。

本节中，我们使用Node.js开发一套简单的web-api服务，这套API主要用于对MongoDB进行增查操作，最后将其打包至安装了Node.js运行时的镜像中。

#### 准备工作目录

首先，创建工作目录`node`，这个目录用来存放Dockerfile文件及其所依赖的项目文件及文件夹：
```bash
# mkdir node
# cd node
# touch Dockerfile
# mkdir src
```

这个目录包含Dockerfile文件和src目录，其中src目录用于存放项目的Node.js项目代码。

#### 项目源文件

将Node.js Web应用的全部源码放入到src文件夹。一个Node.js应用一般由源文件和其所依赖的第三方模块组成。首先，在src文件夹里面建立项目的包文件package.json，这个包文件用来添加本Web应用的描述信息，包括名称、作者、版本以及项目所依赖的第三方库等信息。下面是包文件package.json的内容：
```json
{
  "name": "Docker Node.js Web应用",
  "private": true,
  "version": "0.0.1",
  "description": "Docker Node.js Web应用",
  "author": "xixihe",
  "dependencies": {
    "express": "4.11.0",
    "mongodb": "1.4.28",
    "body-parser": "1.9.2"
  }
}
```

Node.js利用包管理器NPM来管理项目依赖关系。通过`npm install`命令就能导入在包文件package.json中字段`dependencies`声明的第三方库到项目中。

我们的node-web应用共依赖3个包，下面简要介绍一下这3个包的作用：
- **Express**：Express是Node.js平台下的一个快速、灵活、极简的Web应用开发框架，它提供一系列强大的特性，扩展了Node.js原生的HTTP接口，帮助我们创建各种Web和移动设备应用。其官方网址是http://expressjs.com/。
- **MongoDB**：因为我们的node-web应用需要用到MongoDB数据库，所以还需要访问数据库的驱动程序，也就是mongodb，具体可参考文档：http://mongodb.github.io/node-mongodb-native/contents.html。
- **body-parser**：express框架下解析HTTP请求数据的一个中间件，本案例使用此模块来解析通过POST上传的数据内容。关于该包的更多内容，可参考它的文档和源码：https://github.com/expressjs/body-parser。

接下来，在src文件夹里创建应用的入口文件index.js，其源代码如下：
```javascript
var express = require('express');
var bodyParser = require('body-parser');
var mongo = require('mongodb');
var PORT = 8080;

// 连接到MongoDB
var db = new mongo.Db('nginx-node-mongo', new mongo.Server('mongo', 27017));
var app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded());
app.use(bodyParser.raw());

app.get('/node-web-api/msg/find', function(req, res) {
  // 处理查询请求
});
```

至此，我们已经完成了Node.js Web应用的基本设置。接下来，我们将继续构建和配置Docker镜像。