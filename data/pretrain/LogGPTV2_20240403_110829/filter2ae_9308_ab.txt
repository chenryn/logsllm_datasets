    http://subdomain.target.com/account/password?id=hash_here&another_unique_id=hash_here
    如果您有任何疑问或问题，请不要回复此电子邮件。
第一次，即使我们使用这些URL并输入密码，也不确定该帐户是否处于活动状态。但是，当我们尝试登录时，我们终于可以访问门户了。
## 3.3具有永久阻止其他帐户能力的IDOR
进入门户网站后，我们唯一可以访问的菜单就是我们自己的个人资料。在这种情况下，我们只需更新我们的常用信息（例如名字和姓氏，公司名称，职位等等）。可以看出，电子邮件是我们无法更改的参数。
通过查看这种情况，然后我们尝试进行帐户接管方案。简而言之，当我们将更新提交给服务器时，应用程序将发送带有多个参数的请求，例如：
    POST /account/user/update
    Host: subdomain.target.com
    .
    .
    .
    lang=en&id=hash_here&email=email_here&____and more____
即使他们在POST参数中添加了唯一的哈希，但我们仍然尝试将电子邮件地址更改为另一个。  
详细信息是，我们将“电子邮件”参数值从第一个帐户更改为我们也以相同方式创建的第二个帐户。
    Original: lang=en&id=hash_here&email=1stemail&____and more____
    Modify: lang=en&id=hash_here&email=2ndemail&____and more____
但是，正如预期的那样，没有发生帐户接管，因为我们无法使用为第一个帐户设置的密码登录。  
然后，我们尝试使用有效密码登录第二个帐户。结果是，我们无法登录。第一次，我们认为我们忘记了第二个帐户的密码。但是，在重置密码并输入新密码后，我们仍然无法登录。  
根据此分析，我们假设先前的活动是否阻止了该第二个帐户的访问。为了使我们的假设正确无误，然后我们用第三和第四帐户再次重现该问题。结果就是成功。我们可以阻止其他帐户（此执行也阻止了我们的帐户）。
### 3.3.1为什么会发生-第一个障碍？
好吧，我们简单地认为，因为他们数据库中的必需参数是那些包含唯一哈希的ID参数。因此，当一个唯一ID具有两个相同的电子邮件值时，应用程序将无法确定哪个是正确的。然后，应用程序“决定”同时阻止这两个帐户。
### 3.4.1 尝试注册有效的公司帐户
虽然我们对使用该级别的帐户（受限的访问权限）可以完成的事情一窍不通，但我们开始使用公司电子邮件注册新帐户。  
如前所述，在注册过程中需要填写一种交易编号。如果该用户可以通过在另一个门户网站上进行有效交易来获取此号码，则可能性很大。这是我们从此应用程序中学到的示例流程：
由于我们不知道这些唯一数字的外观，因此我们开始插入随机数字，希望我们的请求获得批准。  
提交请求3天后，突然我们收到一封非常不错的电子邮件：  
您的帐号已经建立。
_单击以下超链接激活并登录到您的帐户：  
http :
//subdomain.target.com/account/password?id=hash_here&another_unique_id=hash_here  
登录后，请尽快设置密码。_
单击这些URL并输入密码后，我们尝试登录，最后我们可以看到很多可以测试的菜单。
### 3.4.2 IDOR执行—查看其他交易数据
登录该站点后，然后我们开始测试一个菜单，该菜单正在查找交易数据。  
当我们在此菜单上访问该功能时，应用程序将发送如下请求：
    POST /transaction/report/list
    Host: subdomain.target.com
    .
    .
    .
    transactionid=31337&page=1&sort=asc&size=15
是的，您的假设是正确的。我们只需要将transactionid参数更改为另一个值，就可以访问其他客户交易。没有包含令牌的自定义标头，在POST数据中没有令牌，因此，它可以完美运行。  
从这里开始，然后我们尝试找出另一个类似的问题，并且在此门户网站上发现了大约15个IDOR问题（赏金范围从600到1,250美元）。
## 3.5 CSRF问题从低严重升级为中等
可以肯定的是，对于主动寻找漏洞的许多bug猎人/研究人员来说，这也不是一个新事物。但是，为了完成对导致第四个漏洞的前四个漏洞的解释，我们认为值得分享。
### 3.5.1 关于CSRF的一些话
通常，CSRF是一种攻击，它通过利用被授权（登录）的受害者的情况，“迫使”用户执行基于Web的应用程序中基本上“不需要的”操作。通常，可以使用这种攻击，因为在进行更改时缺少身份验证过程，或者缺少允许处理相关事件的唯一令牌（通常会给出令牌的唯一性，因此用户不会麻烦输入密码以进行不太重要的更改）。
### 3.5.2
因此，就像普通的应用程序一样，此目标也具有删除，共享和其他功能（是的，我们还在此功能上测试了IDOR）。  
例如，当我们想要删除或共享某些内容时，应用程序将发送如下请求：
    POST /transaction/report/delete
    Host: subdomain.target.com
    .
    .
    .
    numberID=31337
它也与共享功能相似。区别在于，POST数据处有一个电子邮件地址，端点处的“删除”路径已更改为“共享”。  
可以看出，这不是一件好事（至少对我们而言），因为此功能是在POST方法中执行的。原因是因为我们还不知道如何通过POST方法执行多次操作来执行CSRF（寻找一些资源，并且它不起作用）。  
在这种情况下，我们尝试将HTTP方法从POST更改为GET。（使用Burpsuite的“ 更改请求方法 ”功能可以更轻松地进行更改）。
因此，对于“删除”功能应该是这样的：
    http://subdomain.target.com/transaction/report/delete?numberId=31337
令人惊讶的是，它有效（而其他功能不适用于此功能）。然后，我们直接创建一个简单的PoC，以一次执行多个删除操作。  
例如，我们希望将numberID从31337删除为31348，然后只需将URL嵌入到无边框图像标签中即可（没有高度和宽度）。这是我们使用的示例HTML脚本：
受害者在其浏览器上打开脚本后（尽管他们仍通过身份验证），然后所有这些信息将被删除。  
报告此问题时，程序所有者已将严重性从低更改为中。
# IV 收盘
好吧，正如读者看到的那样，也许这不是一个很好的文章。同样，没有太多新的技术细节可以学习。但是我们仍会发布此文章，因为我们确定是否可以从这个故事中学到很多东西。好东西很少是
  * 注册完成后，即使没有访问权限，也请务必尝试重置自己的密码；
  * 始终尝试使用您的公司电子邮件帐户。应用程序的所有者以某种方式认为这些注册是有效的注册，并且可以提供有利可图的东西（从业务角度而言）；
  * 始终尝试记住在某个计划中获得了多少报告（查看他们在公共程序中获得的HoF也很有用）。对于我们来说，了解漏洞搜寻者/研究人员对那些程序的兴趣以及我们如何在这些目标上利用新技术可能会很有用。我记得当Andy Gill发布在Oracle EBS平台上执行[Illegal Rendered](https://blog.zsec.uk/cve-2017-3528/)的文章时（CVE-2017–3528）。他刚刚在2018年发布了该问题，我们开始使用HoF很少的公共漏洞赏金计划，并使用简单的Google Dork（网站：*。target.com和inurl：/ OA_HTML /）查找目标。在几个小时内，我们从2个程序中获得了450美元。
仅供参考，就我个人而言，我不同意这些CVE-2017–3528是否被称为开放重定向。[从PortSwigger的解释中，很可能是“带外资源负载”](https://portswigger.net/kb/issues/00100a00_out-of-band-resource-load-http)
  * 始终返回到您的旧报告，并尝试在所有者说解决该问题时重现相同的内容。在另一种情况下，我曾经在一个私有程序中的二手Jira上的Reflected XSS上报道过。对问题进行了分类，并在几个月后解决。在获得有关该问题是否已解决的信息后，我再次转到相同的目标，并使用Jira将我重定向到另一个子域。不同之处在于，当他们将数据从旧吉拉迁移到新吉拉时，他们忘记了使用身份验证来访问每张票证。结果是，我可以看到很多机密票据（包括工作凭证），这使我得到了另一个分类报告。
  * 也许还有更多我们尚不了解的事情。