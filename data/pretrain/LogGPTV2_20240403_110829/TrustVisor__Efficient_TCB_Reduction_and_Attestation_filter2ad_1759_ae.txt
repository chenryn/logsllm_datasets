### 1.62 Varying PAL Input Parameter Size

#### Parameter Marshaling
| Parameter Size (KB) | Overhead (µs) |
|---------------------|---------------|
| 4                   | 92            |
| 16                  | 279           |
| 8                   | 152           |
| 32                  | 536           |
| 0                   | 25            |

**Table 2: PAL Setup Overhead Microbenchmarks (in µs). Average of 100 runs with negligible variance.**

Most benchmarks show overheads below 10%. However, two benchmarks have overheads over 10%, and two more have overheads of 29% and 37%. This high overhead is attributed to paging operations performed with the current hardware's NPT (Nested Page Table) support. We expect this performance to improve as NPT hardware matures. For I/O application benchmarks, sequential access to very large files incurs the highest overhead, exceeding 20%. We also anticipate that this overhead will diminish with newer NPT hardware. All other benchmarks show less than 7% overhead.

### 6.3 Performance of PALs

We present both micro- and macro-benchmarks to evaluate the sources of PAL overhead and their impact at the application level, respectively.

#### 6.3.1 PAL Microbenchmarks

We evaluate the overhead when TrustVisor receives control in five cases (Tables 2 and 3):
1. When an application registers a PAL.
2. When any function inside the PAL is called.
3. When a function inside the PAL finishes execution and returns to the application.
4. When an application unregisters a PAL.
5. When a PAL calls any µTPM function.

We use microbenchmarks to measure the overhead of the TrustVisor framework in cases (a)–(d), and the overhead of µTPM operations provided by TrustVisor in case (e). We also evaluate the performance of real applications to illustrate overall performance in a practical environment.

**TrustVisor Framework Overhead:**
The overhead in TrustVisor has four primary causes:
1. **Mode Switching:** Each time TrustVisor is invoked, the CPU must switch from guest mode to host mode, which includes saving the current guest environment into the VMCB and loading the host environment from the VMCB. After TrustVisor completes its task, the CPU switches back to the guest by performing the reverse environment saving and loading. This results in a noticeable performance impact due to cache and TLB activity.
2. **NPT Protections:** When TrustVisor sets NPT protections for PALs or switches between guest legacy mode and guest secure mode, it walks the page tables in the guest, changes permissions in the NPTs, and performs some TLB operations. The larger the PAL, the greater the overhead.
3. **Integrity Measurement:** During registration, SHA-1 is used to hash the PAL pages containing executable code.
4. **Parameter Marshaling:** Memory copy overhead occurs between the untrusted application and the PAL.

**Performance Comparison (Normalized to Native Linux):**
- **Lmbench Microbenchmarks:**
  | Benchmark   | TrustVisor | Native Linux |
  |-------------|------------|--------------|
  | socket      | 0.98       | 1.00         |
  | reread      | 0.96       | 1.00         |
  | bcopy       | 0.98       | 1.00         |
  | page fault  | 0.94       | 1.00         |
  | mmap        | 0.97       | 1.00         |
  | ctxsw       | 1.00       | 1.00         |
  | exec        | 0.85       | 1.00         |
  | fork        | 0.73       | 1.00         |
  | null        | 0.66       | 1.00         |

- **SPECint 2006 Runtime:**
  | Benchmark   | TrustVisor | Native Linux |
  |-------------|------------|--------------|
  | xalancbmk   | 1.37       | 1.00         |
  | astar       | 1.15       | 1.00         |
  | omnetpp     | 1.12       | 1.00         |
  | h264ref     | 1.29       | 1.00         |
  | sjeng       | 1.01       | 1.00         |
  | libquantum  | 1.03       | 1.00         |
  | hmmer       | 1.03       | 1.00         |
  | gobmk       | 1.00       | 1.00         |
  | mcf         | 1.01       | 1.00         |
  | gcc         | 1.05       | 1.00         |
  | bzip2       | 1.03       | 1.00         |
  | perlbench   | 1.03       | 1.00         |

- **I/O Benchmarks:**
  | Benchmark   | TrustVisor | Native Linux |
  |-------------|------------|--------------|
  | Apache Server | 0.96       | 1.00         |
  | UDP         | 1.00       | 1.00         |
  | TCP         | 1.00       | 1.00         |
  | Postmark    | 0.97       | 1.00         |
  | frandom     | 1.00       | 1.00         |
  | fwrite      | 0.93       | 1.00         |
  | fread       | 0.78       | 1.00         |
  | Kernel Build | 0.75       | 1.00         |

**Figure 6: Performance Impact of TrustVisor Compared to Native Linux**

**TPM vs. µTPM Microbenchmarks:**
| Operation  | TPM (Native Linux) | µTPM (TrustVisor) |
|------------|--------------------|-------------------|
| Extend     | 24066              | 533               |
| Seal       | 358102             | 11.7              |
| UnSeal     | 1008654            | 12.6              |
| Quote      | 815654             | 21000             |

**Table 3: TPM vs. µTPM Microbenchmarks (in µs). Average of 100 runs with negligible variance.**

**HMAC and Sign Overhead:**
| Operation | Avg (ms) | Stdev (ms) |
|-----------|----------|------------|
| HMAC      | 0.059    | 0.003      |
| Sign      | 62.644   | 0.181      |

| Operation | Avg (ms) | Stdev (ms) |
|-----------|----------|------------|
| HMAC      | 5.071    | 0.018      |
| Sign      | 67.461   | 0.008      |

**Table 4: HMAC and Sign PAL Overhead Using TrustVisor vs. Flicker (in ms). Average of 100 runs.**

**PAL Registration and Unregistration Overhead:**
- **Registration Overhead:**
  - 4 KB PAL: ~31 µs
  - Larger PAL: +27 µs per 4 KB page
- **Unregistration Overhead:**
  - <1.5 µs
  - Slightly increases with PAL size

**PAL Execution Overhead:**
- **Switching Overhead:**
  - Without parameters: ~25 µs
  - With each 4 KB page of parameters: +65 µs
- **No additional penalty in secure guest mode unless µTPM operations are invoked.**

**µTPM Overhead:**
- **Hypercall to switch between guest and host.**
- **Performance of the µTPM function itself.**

**Table 3: Summary of µTPM Operations. Comparison with Native Linux and Flicker.**

### 6.3.2 PAL Macrobenchmarks

**HMAC and Sign:**
- **Tasks Requiring Secret Key:**
  - Computing message authentication codes (MACs)
  - Digital signatures
- **Implementations:**
  - HMAC-SHA-1 over a 1000-byte payload using a 512-bit key
  - Digital signature using a 1024-bit RSA key over a 20-byte hash value
- **Results:**
  - **HMAC:**
    - TrustVisor: 0.059 ms
    - Flicker: 5.071 ms
  - **Sign:**
    - TrustVisor: 62.644 ms
    - Flicker: 67.461 ms

**OpenSSH:**
- **Evaluation of Overhead Induced by TrustVisor on OpenSSH 4.3p2:**
  - Security-sensitive portions ported to run in a PAL using µTPM operations.
  - Comparison with native SSH and Flicker-induced overheads.
  - Executed on Dell PowerEdge T105.

**Flicker Modifications:**
- **Use of TPM’s Non-Volatile RAM (NV-RAM) instead of Sealed Storage:**
  - Improves Flicker’s performance (TPM NV Read: 15 ms vs. TPM Unseal: 1 second).
  - Scalability issues due to limited NV-RAM (few KB available).

**Connect-to-Prompt and Prompt-to-Shell Overhead:**
- **Time Elapsed Between TCP Connection Establishment and Prompting:**
  | Test Scenario | Connect-to-Prompt (ms) | Prompt-to-Shell (ms) |
  |---------------|------------------------|----------------------|
  | Native        | 110                    | 0                    |
  | Flicker       | 1316                   | 131                  |
  | TV            | 1260                   | 11                   |

**Table 5: SSH Server-Side Password Processing Overhead. Includes time to generate a hardware TPM Quote. Average of 100 runs.**

**Concurrent Transactions:**
- **Test Scenarios:**
  - Single
  - Prefork
  - Concurrent
- **Transactions per Second:**
  | Transactions | Vanilla | TV | Full |
  |--------------|---------|----|------|
  | 1            | 26.60   | 24.06 | 22.96 |
  | 5            | 37.91   | 37.13 | 34.57 |
  | 50           | 53.71   | 53.53 | 48.49 |
  | 100          | 57.84   | 57.31 | 51.35 |
  | 200          | 58.05   | 58.03 | 51.29 |
  | 200          | 58.04   | 58.07 | 51.08 |

**Table: Connect-to-Prompt and Prompt-to-Shell Performance.**

**DRTM and Key Operations:**
- **Key Generation, Seal, and TPM Sharing:**
  | Operation | Time (ms) | TV | Fli |
  |-----------|-----------|----|-----|
  | DRTM      | 0         | 0  |
  | Key Gen   | 14        | 14 |
  | Seal      | 199       | 196|
  | TPM sharing | 0        | 64 |

- **Unseal, Decrypt, and TPM Sharing:**
  | Operation | Time (ms) | TV | Fli |
  |-----------|-----------|----|-----|
  | DRTM      | 0         | 0  |
  | Unseal    | 14        | 14 |
  | Decrypt   | 0         | -  |
  | TPM sharing | 0        | -  |

This comprehensive evaluation provides a detailed understanding of the performance impact of TrustVisor and Flicker on various benchmarks and real-world applications.