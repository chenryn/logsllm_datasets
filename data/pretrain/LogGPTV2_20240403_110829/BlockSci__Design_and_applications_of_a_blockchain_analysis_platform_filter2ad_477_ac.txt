corresponding select function call. As demonstrated above,
where ﬁlters objects using predicates. any and all apply
predicates over a list of objects and return whether they apply
to any or all contained items, max and min select elements
with the highest (or lowest) attribute value, and a group_by
clause returns aggregates of properties. We provide a detailed
overview of available clauses in the online documentation.
The ﬂuent interface operates single-threaded. Providing the
mapreduce functionalities of the C++ interface for the ﬂuent
interface is planned for future versions. Currently, the user
can work around this limitation using Python’s multiprocess
library to parallelize the computation on subsets of blocks or
transactions.
2.6 Performance evaluation
We now report the speed and memory consumption of
BlockSci. All measurements assume that the in-memory data
structures are already loaded in memory. This takes about 4
minutes for Bitcoin and needs to be done only once per boot.
2.6.1 Basic run time statistics
We run measurements on a single r5.4xlarge EC2 instance
(16 vCPUs, 2.5 GHz Intel Xeon Platinum 8175M, 128 GiB
memory, 800 GiB EBS volume). The cost is $1.12 per hour.
The most common type of access is a mapreduce-style iter-
ation over the blockchain. A representative example is ﬁnding
transactions with anomalously high fees, because computing
the fee requires iterating over not just transactions, but also
the inputs and outputs of each transaction. In essence, this
query touches the entirety of the transactions table data.
As Table 1 shows, a single-threaded implementation of this
query completes in 11.3 seconds. Mapreduce-style queries are
embarrassingly parallel, as seen in the table. Our test machine
has 16 virtual cores, i.e., 8 physical cores with hyperthreading.
Executed in parallel, the query ﬁnishes under one second.
The table shows that iterating over only the outputs (e.g.,
ﬁnding the max output value) is faster, and iterating over
only the headers is faster still. The above queries beneﬁt
from locality of reference. Other queries, especially those
involving graph traversal, will not. To simulate this, we iterate
over transaction headers in random order. We see that there is
a 26-fold slowdown.
In Section 2.5 we presented several paradigms for query-
ing the blockchain from the Python interface: pure Python,
C++ helper functions, and the ﬂuent interface. Table 2 shows
the performance of these three paradigms on the anomalous-
fee query. The pure-Python method has unacceptable perfor-
mance (this is partially a result of a few performance traps
in the current codebase). Using the helper method is a lot
faster, but using the ﬂuent interface is preferred: it is 7–11x
faster than the helper method. Compared to implementing a
single-threaded C++ query, the ﬂuent interface is only 3-5x
slower for many practical applications (cf. Table 3).
2.6.2 Comparison with graph databases
Graph traversal is integral to many blockchain analyses, such
as inspecting speciﬁc addresses or determining change based
on properties of the spending transaction. In this section,
we compare BlockSci’s performance against three general-
purpose graph databases: Neo4j, RedisGraph, and Memgraph.
Neo4j is one of the most popular graph databases currently
available. While it is not an in-memory database, we can
load the entire dataset into the page cache before execut-
ing queries. Memgraph and RedisGraph are pure in-memory
graph databases, the latter being built on top of the key-value
database Redis.
All three databases allow to import data in CSV format
and to execute queries using the Cypher query language. This
allows us to run almost exact queries on all three databases.
We created an export tool for BlockSci that exports blockchain
data into the CSV format readable by these databases.
The graph representation of these databases is signiﬁcantly
larger than the BlockSci Data format (and thus needs more
disk space and memory), even though we choose to only
store a few properties and not all information available in
USENIX Association
29th USENIX Security Symposium    2727
Table 3: Average running time in seconds (over ﬁve consecutive runs) for graph queries on a dataset with 25 million transactions
(up to block height 262,176). Standard deviations and running times for more datasets are provided in Table 8 in the appendix.
Query
Tx locktime > 0
Max output value
Calculate fee
Satoshi Dice address
Zero-conf outputs
Locktime change
BlockSci
Neo4j
C++ (ST) C++ (MT)
0.03
0.03
0.03
N/A
0.32
0.45
0.31
0.46
0.57
0.49
5.47
7.57
Fluent interface (ST) w/o index w/ index
0.05
24.55
303.69
0.99
207.41
213.59
7.84
26.63
302.73
0.95
192.01
208.95
1.37
3.91
2.79
0.54
18.17
18.21
RedisGraph
Memgraph
1.85
4.48
–1
2.56
1488.93
–1
16.44
40.08
187.02
45.91
59.96
122.98
–1: did not ﬁnish within reasonable time (based on other queries and dataset sizes), ST = single-threaded, MT = multi-threaded
BlockSci. We deem this a reasonable compromise: while
BlockSci aims to be a general-purpose tool, analysts may
decide to ignore data irrelevant to their goals when choosing
a different database. We design the graph property model for
ﬂexibility and expressiveness of traversal queries, thus we
explicitly model blocks, transactions, outputs, and addresses
as nodes. A detailed description of the model can be found in
Appendix A.
We evaluate these databases on graphs of different sizes
(i.e. historic snapshots of the blockchain). While we intended
to run the measurements on the full transaction graph, perfor-
mance issues of the graph databases already became apparent
with data set sizes signiﬁcantly smaller than the full graph and
prevented the completion of measurements on the full graph
in a reasonable time frame (cf. Table 8 in the appendix).
We run measurements on an r5.8xlarge EC2 instance (32
vCPUs, 256GiB memory). Besides repeating the iterative
queries from the previous section (ﬁnding transactions with a
positive locktime, ﬁnding the highest output value and ﬁnding
the highest transaction fee) we also run three queries involv-
ing graph traversal (calculating the total value received by a
popular address, counting the number of outputs that have
been spent in the same block and identifying transactions
where exactly one output has been spent in a transaction that
uses a similar locktime policy).2
Table 3 shows query running times for a dataset of 25
million transactions (the current blockchain contains more
than 489 million transactions). We can see that BlockSci’s
is generally much faster than the other databases, by a factor
of 2–16 compared to the best results for graph traversal, and
hundreds times faster for many sequential queries. Results for
more data sets can be found in Table 8 in the appendix.
2The Cypher queries used are listed in Table 7 in the appendix.
Table 4: Size of the transaction graph under each of 4 possible
memory layouts. The ‘Current’ column refers to the Bitcoin
blockchain as of the end of December 2019, which has about
489 million transactions, 1.198 billion inputs and 1.302 billion
outputs (including unspent ones).
Growth (bytes)
Current
Normalized
Fee cached
64-bit
24 Ntx + 16 Nin + 16 Nout
24 Ntx + 8 Nin + 16 Nout
32 Ntx + 16 Nin + 16 Nout
24 Ntx + 24 Nin + 24 Nout
Current
50.09 GB
40.50 GB
54.00 GB
69.26 GB
2.6.3 Comparison with other open-source blockchain
analysis tools
When we initially made BlockSci publicly available, we eval-
uated its performance against other open-source blockchain
analysis tools. We found BlockSci to be 15-600x faster than
these tools [9], and its performance has improved consider-
ably since. As we attempted to repeat the comparison, we
found that these tools are no longer maintained. A few new
blockchain analysis tools are available, but we found that
they aren’t general purpose tools but only support speciﬁc use
cases.
2.6.4 Parser performance
Parsing the blockchain needs to be done only once upon instal-
lation; incremental updates are essentially instantaneous. On
our r5.4xlarge machine, parsing the Bitcoin blockchain until
end of December 2019 (block height 610,695) took 5.5 hours.
Note that it takes Bitcoin Core several hours to download the
blockchain, so initialization is slow anyway.
2.6.5 Memory
Table 4 shows the memory consumption of BlockSci as a
function of the size of the blockchain (measured by the num-
ber of transactions, inputs, outputs, and addresses). As noted
2728    29th USENIX Security Symposium
USENIX Association
earlier, for almost all analysis tasks we have encountered so
far, only the transaction table needs to be in memory to ensure
optimal performance. As of December 2019, this comes out
to about 50 GB for Bitcoin.
Recall that BlockSci’s default layout of the transaction table
is not normalized: coins are stored once as inputs and once as
outputs. The table also shows the memory consumption for
several alternate layouts. While normalizing the layout would
save 19 % space, it leads to a steep drop in performance for
typical queries such as max-fee. Alternatively, we could store
derived data about transactions, such as the fee, at the expense
of space. Finally, we also show how the space consumption
would increase if and when we need to transition to 64-bit
integers for storing transaction and address IDs.
In this section we show how multisignatures expose conﬁ-
dential information about access control on the blockchain,
as suggested by Gennaro et al [13]. We further show how the
use of multisignatures can hurt the privacy of other users. Fi-
nally, we observe patterns of multisig usage that substantially
reduce its security beneﬁts.
Conﬁdentiality. For companies or individuals that use mul-
tisig to enforce access control over their wallet, multisig pub-
licly exposes the access control structure as well as changes
to that structure. In other words, it exposes the number of total
keys and the number of keys needed to sign, the individual
(public) keys themselves, as well as changes in access control
that may correspond to events such as a loss of a device or
the departure of an employee.
3 Applications
We now present four analyses that highlight BlockSci’s ef-
fectiveness at supporting blockchain analyses. The ﬁrst two
relate to privacy and conﬁdentiality, the third and fourth to
the economics of cryptocurrencies. Table 5 shows how these
applications take advantage of the features of BlockSci’s anal-
ysis library and data sources.
3.1 Multisignatures hurt conﬁdentiality
Security conscious users or companies that store large
amounts of cryptocurrency often make use of Bitcoin’s mul-
tisignature capability. Unlike standard pay-to-public-key-hash
(P2PKH) transactions which only require one signature to
sign, multisig addresses allow one to specify n keys and a pa-
rameter m ≤ n such that any m of the speciﬁed keys must sign
in order to spend the money. This feature allows distributing
control of a Bitcoin wallet: keys can be stored on n servers or
by n different employees of a company such that m of them
must agree to authorize a transaction. Similarly, a user could
store a key on both her desktop computer and her smartphone
and require the participation of both to authorize a transaction
(a 2-of-2 multisig).
Bitcoin’s multisig implementation requires users to explic-
itly list all n keys as well as the values m and n. To make it
easier to receive funds to multisig addresses, Bitcoin imple-
ments an address format called pay-to-script-hash (P2SH),
where the sender only needs to know a hash value of the full
script. When spending from such an address, the receiver
has to provide all individual keys and the parameters m and
n along with valid signatures in the input. As of December
2019, up to 27 % of all bitcoins mined are held in multisig
addresses.3
3There is some uncertainty because we can only determine whether a
P2SH script wraps a multisig script or some other kind of script once it has
been spent. However, past data suggests that most of the value in P2SH
outputs indeed correspond to multisig.
Two characteristics indicate that a transaction might repre-
sent a change in access control:
• Single input, single output. Payment transactions typi-
cally involve multiple inputs and/or change outputs. By
contrast, a transaction with only one input and one out-
put (whether a regular or a multisig address) suggests
that both are controlled by the same entity.
• Overlapping sets of multisig keys between the input
and the output suggest a change in access control (e.g.,
the replacement or removal of a speciﬁc key), but not a
complete transfer of control.
As an example of such a transaction with these characteris-
tics, consider the transaction 96d95e...4. In this transaction,
over USD $130,000 of Bitcoin was transferred from one 2-
of-3 multisig address to a second 2-of-3 multisig address.
These addresses shared 2 keys in common, but one of the
original keys was replaced with a different key. Chainalysis5
labels both the input and output addresses as being controlled
by coinsbank.com. This publicly reveals an internal access
control change happening at a private company.
Figure 4 shows that these types of information leakage hap-
pen regularly. Every month, tens of thousands of transactions
transferring bitcoins worth millions of dollars publicly expose
conﬁdential access control structure changes in this way.
Privacy. When an output address uses the same type of
access-control policy as an input address, it is a strong indica-
tor that the output was used as a change address. This provides
a powerful heuristic to identify change addresses. We ﬁnd
that for many transactions, this heuristic allows identifying
change addresses even though previously known heuristics
(e.g., [3]) do not allow such a determination.
While Gennaro et al. mention the unfortunate privacy-
infringing side-effect of multisig [13], we provide the ﬁrst
empirical evidence for the pervasiveness of this effect. We
have implemented a generalized heuristic that identiﬁes the
change address based on it being the only output that matches
4https://blockchain.info/tx/96d95eb77ae1663ee6a6dbcebbbd4
fc7d7e49d4784ffd9f5e1f3be6cd5f3a978
5https://www.chainalysis.com/
USENIX Association
29th USENIX Security Symposium    2729
Application
Multisignature transactions (Section 3.1)
Multi-chain privacy (Section 3.2)
Fee estimation effectiveness (Section 3.3)
Velocity of cryptocurrencies (Section 3.4)
Selected papers (cf. Section 3.5)
Privacy and linkability of mining in Zcash [10]
Tracking ransomware end to end [11]
Tracing transactions across cryptocurrency ledgers [12]
When the cookie meets the blockchain [4]
•
•
•
A ddresslinkage(clustering)
Transaction graph analysis
Exchangerate data
CoinJoin detection
M ulti-chain m ode
Altcoinsupport
M e m pooldata
Scriptparsing
•
•
•
•
•
•
•