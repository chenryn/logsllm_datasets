# Title: Cookieless Monster: Exploring the Ecosystem of Web-Based Device Fingerprinting

## Authors
- Nick Nikiforakis<sup>∗</sup>
- Alexandros Kapravelos<sup>†</sup>
- Wouter Joosen<sup>∗</sup>
- Christopher Kruegel<sup>†</sup>
- Frank Piessens<sup>∗</sup>
- Giovanni Vigna<sup>†</sup>

### Affiliations
- <sup>∗</sup>iMinds-DistriNet, KU Leuven, 3001 Leuven, Belgium
- <sup>†</sup>University of California, Santa Barbara, CA, USA

### Contact
- {firstname.lastname}@cs.kuleuven.be
- {kapravel, chris, vigna}@cs.ucsb.edu

## Abstract
The web has become an essential part of our society and is currently the primary medium for information delivery. Billions of users browse the web daily, and some websites have over one billion user accounts. In this environment, the ability to track users and their online habits can be very lucrative for advertising companies but highly intrusive for user privacy.

In this paper, we examine how web-based device fingerprinting works on the Internet. By analyzing the code of three popular browser-fingerprinting code providers, we reveal the techniques that allow websites to track users without client-side identifiers. We show that current commercial fingerprinting approaches use questionable practices, such as circumventing HTTP proxies to discover a user’s real IP address and installing intrusive browser plugins.

We also demonstrate the fragility of the browser ecosystem against fingerprinting through novel browser-identifying techniques. With many different vendors involved in browser development, we show how diversions in browser implementations can distinguish not only the browser family but also specific major and minor versions. We evaluate browser extensions that help users spoof the user-agent and show that current commercial approaches can bypass these extensions and even exploit their shortcomings as additional fingerprinting features.

## I. Introduction

In 1994, Lou Montulli, while working for Netscape Communications, introduced cookies in the context of web browsers [1]. Cookies allow a web server to store a small amount of data on the computers of visiting users, which is then sent back to the web server upon subsequent requests. This mechanism enables websites to build and maintain state over the otherwise stateless HTTP protocol. Cookies were quickly adopted by browser vendors and web developers and are now a core technology for building complex, stateful web applications.

Shortly after the introduction of cookies, abuses of their stateful nature were observed. Web pages often include multiple resources, such as HTML, images, JavaScript, and CSS, which can be located on both the main web server and third-party servers. When a user's browser requests a resource from a third-party server, that server can set and read previously-set cookies. For example, if a user visits travel.com, whose homepage includes a remote image from tracking.com, the user's browser will request the image from tracking.com. The tracking.com server sends the image along with an HTTP Set-Cookie header, setting a cookie on the user's machine. Later, when the user visits other sites affiliated with tracking.com, the tracking website receives its previously-set cookies, recognizes the user, and creates a profile of the user's browsing habits. These third-party cookies, due to their impact on user privacy and their connection with online behavioral advertising, have attracted attention from the research community [2], [3], [4] and the media [5], causing public discomfort [6], [7].

Users have responded to this privacy threat in various ways. A recent study by comScore [8] showed that about one in three users delete both first-party and third-party cookies within a month of visiting a website. Multiple browser extensions are available to reveal third-party tracking [9] and hidden third-party affiliations between sites [10]. Modern browsers now support the rejection of all third-party cookies, and some even enable it by default. Additionally, a browser's "Private Mode" helps users visit sites without leaving traces on their machine.

The unavailability of cookies has motivated advertisers and trackers to find new ways to link users to their browsing histories. Mayer in 2009 [11] and Eckersley in 2010 [12] demonstrated that browser and plugin features can be fingerprinted to track users without cookies. Today, a few commercial companies use such methods to provide device identification through web-based fingerprinting. According to Mowery et al. [13], fingerprinting can be used constructively or destructively. Constructively, correctly identified devices can combat fraud, e.g., by detecting attackers who stole user credentials. Destructively, device identification can track users across sites without their knowledge and without a simple way to opt out. Additionally, device identification can be used by attackers to deliver exploits tailored for specific combinations of browsers, plugins, and operating systems [14]. The line between constructive and destructive use is artificial because the same technology is used in both cases.

Interestingly, companies offered fingerprinting services as early as 2009, and experts voiced concerns over their impact on user privacy [15]. Even when fingerprinting companies honor the "Do Not Track" (DNT) header, they still fingerprint users for fraud detection but promise not to use the information for advertising purposes [16]. Since fingerprinting scripts execute regardless of the DNT value, verifying this promise is more challenging than verifying the effect of DNT on stateful tracking, where the effects are visible in the user's cookies [17].

In this paper, we perform a four-pronged analysis of device identification through web-based fingerprinting. First, we analyze the fingerprinting code of three large, commercial companies, focusing on differences compared to Panopticlick [12], Eckersley's open-source implementation of browser fingerprinting. We identify the heavy use of Adobe Flash to retrieve sensitive information, including the ability to detect HTTP proxies and the existence of intrusive fingerprinting plugins. Second, we measure the adoption of fingerprinting on the Internet and show that dubious sites often fingerprint users for various purposes. Third, we investigate special JavaScript-accessible browser objects, such as `navigator` and `screen`, and describe novel fingerprinting techniques that can accurately identify a browser down to its minor version. Lastly, we examine and test browser extensions that users use to spoof their browser identity and show that all fail to completely hide the true identity, adding extra fingerprintable information.

Our main contributions are:
- Shedding light on current practices of device identification through web-based fingerprinting and proposing a taxonomy of fingerprintable information.
- Measuring the adoption of fingerprinting on the web.
- Introducing novel browser-fingerprinting techniques that can uncover a browser's family and version in milliseconds.
- Demonstrating that over 800,000 users using user-agent-spoofing extensions are more fingerprintable than those who do not attempt to hide their browser's identity, challenging prior research advice on the use of such extensions to increase privacy [18].

## II. Commercial Fingerprinting

While Eckersley demonstrated the principle possibility of fingerprinting a user's browser to track users without client-side stateful identifiers [12], we investigated popular, real-world implementations of fingerprinting. We analyzed the fingerprinting libraries of three large, commercial companies: BlueCava, Iovation, and ThreatMetrix. Two of these companies were chosen due to mentions in Mayer and Mitchell's web-tracking survey [19], and the third was chosen due to its high ranking on a popular search engine. To analyze the fingerprinting scripts, we first needed to discover websites that use them. We used Ghostery [9], a browser extension that lists known third-party tracking libraries, to obtain the list of domains used by the three code providers to serve their fingerprinting scripts. We then crawled popular Internet websites to find code inclusions from these domains. Once these sites were discovered, we isolated the fingerprinting code, extracted individual features, and grouped similar features together.

In this section, we present the results of our analysis in the form of a taxonomy of possible features that can be acquired through a fingerprinting library. This taxonomy covers all the features described in Panopticlick [12] and those used by the three studied fingerprinting companies. Table I lists all our categories and discovered features, along with the method used to acquire each feature. Our taxonomy views a user's fingerprintable surface as a layered system, with the "application layer" being the browser and any in-browser information. At the top, scripts seek to fingerprint and identify any browser customizations. In lower levels, scripts target user-specific information around the browser, operating system, and even the hardware and network of a user's machine.

### A. Fingerprinting through Popular Plugins

As shown in Table I, all companies use Flash, in addition to JavaScript, to fingerprint a user's environment. Adobe Flash is a proprietary browser plugin that has enjoyed wide adoption among users, providing rich media content that could not traditionally be displayed using HTML. Despite criticism for poor performance and lack of stability, and the rise of newer technologies like HTML5, Flash remains available on most desktops.

We discovered that although Flash reimplements certain APIs existing in the browser and accessible through JavaScript, its APIs do not always provide the same results as the browser-equivalent functions. For instance, for a Linux user running Firefox on a 64-bit machine, querying the platform of execution, Firefox reports "Linux x86 64". Flash, however, provides the full kernel version, e.g., Linux 3.2.0-26-generic. This additional information is undesirable from both privacy and security perspectives, as a malicious web server could launch an attack tailored to a specific kernel. Another API call that behaves differently is the one reporting the user's screen resolution. In Linux implementations of the Flash plugin (both Adobe's and Google's), when a user uses a dual-monitor setup, Flash reports the sum of the two individual screens. Combined with the browser's response, which lists the resolution of the monitor where the browser window is located, this allows a fingerprinting service to detect the presence of multiple monitors.

Surprisingly, none of the three studied fingerprinting companies utilized Java. One company had dead code suggesting past use of Java, but the function was no longer called, and the applet was no longer present. This deviation from Panopticlick, which did use Java to obtain system fonts, likely reflects the low market penetration of Java in browsers due to numerous serious vulnerabilities.

### B. Vendor-Specific Fingerprinting

Another significant difference between the code we analyzed and Panopticlick is the extensive fingerprinting of vendor-specific properties. For example, when recognizing Internet Explorer, the code would extensively fingerprint Internet-Explorer-specific properties, such as `navigator.securityPolicy` and `navigator.systemLanguage`. The code also accounted for the browser's limitations, such as using a lengthy list of pre-defined CLSIDs for Browser-Helper-Objects (BHOs) due to Internet Explorer's unwillingness to enumerate its plugins.