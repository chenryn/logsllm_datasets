title:Cookieless Monster: Exploring the Ecosystem of Web-Based Device Fingerprinting
author:Nick Nikiforakis and
Alexandros Kapravelos and
Wouter Joosen and
Christopher Kruegel and
Frank Piessens and
Giovanni Vigna
2013 IEEE Symposium on Security and Privacy
Exploring the Ecosystem of Web-based Device Fingerprinting
Cookieless Monster:
Nick Nikiforakis∗, Alexandros Kapravelos†, Wouter Joosen∗, Christopher Kruegel†, Frank Piessens∗, Giovanni Vigna†
∗iMinds-DistriNet, KU Leuven, 3001 Leuven, Belgium
†University of California, Santa Barbara, CA, USA
{ﬁrstname.lastname}@cs.kuleuven.be
{kapravel,chris,vigna}@cs.ucsb.edu
Abstract—The web has become an essential part of our
society and is currently the main medium of information
delivery. Billions of users browse the web on a daily basis, and
there are single websites that have reached over one billion
user accounts. In this environment, the ability to track users
and their online habits can be very lucrative for advertising
companies, yet very intrusive for the privacy of users.
In this paper, we examine how web-based device ﬁngerprint-
ing currently works on the Internet. By analyzing the code
of three popular browser-ﬁngerprinting code providers, we
reveal the techniques that allow websites to track users without
the need of client-side identiﬁers. Among these techniques, we
show how current commercial ﬁngerprinting approaches use
questionable practices, such as the circumvention of HTTP
proxies to discover a user’s real IP address and the installation
of intrusive browser plugins.
At the same time, we show how fragile the browser ecosystem
is against ﬁngerprinting through the use of novel browser-
identifying techniques. With so many different vendors involved
in browser development, we demonstrate how one can use
diversions in the browsers’
implementation to distinguish
successfully not only the browser-family, but also speciﬁc major
and minor versions. Browser extensions that help users spoof
the user-agent of their browsers are also evaluated. We show
that current commercial approaches can bypass the extensions,
and, in addition, take advantage of their shortcomings by using
them as additional ﬁngerprinting features.
I. INTRODUCTION
In 1994, Lou Montulli, while working for Netscape Com-
munications, introduced the idea of cookies in the context
of a web browser [1]. The cookie mechanism allows a web
server to store a small amount of data on the computers of
visiting users, which is then sent back to the web server
upon subsequent requests. Using this mechanism, a website
can build and maintain state over the otherwise stateless
HTTP protocol. Cookies were quickly embraced by browser
vendors and web developers. Today, they are one of the core
technologies on which complex, stateful web applications
are built.
Shortly after the introduction of cookies, abuses of their
stateful nature were observed. Web pages are usually com-
prised of many different resources, such as HTML, images,
JavaScript, and CSS, which can be located both on the web
server hosting the main page as well as other third-party web
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.43
541
servers. With every request toward a third-party website,
that website has the ability to set and read previously-set
cookies on a user’s browser. For instance, suppose that
a user browses to travel.com, whose homepage includes
a remote image from tracking.com. Therefore, as part of
the process of rendering travel.com’s homepage, the user’s
browser will request
the image from tracking.com. The
web server of tracking.com sends the image along with an
HTTP Set-Cookie header, setting a cookie on the user’s
machine, under the tracking.com domain. Later, when the
user browses to other websites afﬁliated with tracking.com,
e.g., buy.com, the tracking website receives its previously-
set cookies, recognizes the user, and creates a proﬁle of
the user’s browsing habits. These third-party cookies, due
to the adverse effects on a user’s privacy and their direct
connection with online behavioral advertising, captured the
attention of both the research community [2], [3], [4] and the
popular media outlets [5] and, ever since, cause the public’s
discomfort [6], [7].
The user community responded to this privacy threat in
multiple ways. A recent cookie-retention study by com-
Score [8] showed that approximately one in three users
delete both ﬁrst-party and third-party cookies within a month
after their visit to a website. Multiple browser-extensions
are available that reveal third-party tracking [9], as well as
the “hidden” third-party afﬁliations between sites [10]. In
addition, modern browsers now have native support for the
rejection of all third-party cookies and some even enable
it by default. Lastly, a browser’s “Private Mode” is also
available to assist users to visit a set of sites without leaving
traces of their visit on their machine.
This general unavailability of cookies motivated advertis-
ers and trackers to ﬁnd new ways of linking users to their
browsing histories. Mayer in 2009 [11] and Eckersley in
2010 [12] both showed that the features of a browser and its
plugins can be ﬁngerprinted and used to track users without
the need of cookies. Today, there is a small number of com-
mercial companies that use such methods to provide device
identiﬁcation through web-based ﬁngerprinting. Following
the classiﬁcation of Mowery et al. [13], ﬁngerprinting can
be used either constructively or destructively. Constructively,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
a correctly identiﬁed device can be used to combat fraud,
e.g., by detecting that a user who is trying to login to a
site is likely an attacker who stole a user’s credentials or
cookies, rather than the legitimate user. Destructively, device
identiﬁcation through ﬁngerprinting can be used to track
users between sites, without their knowledge and without
a simple way of opting-out. Additionally, device identiﬁca-
tion can be used by attackers in order to deliver exploits,
tailored for speciﬁc combinations of browsers, plugins and
operating systems [14]. The line between the constructive
and destructive use is, however, largely artiﬁcial, because
the same technology is used in both cases.
Interestingly, companies were offering ﬁngerprinting ser-
vices as early as 2009, and experts were already voicing
concerns over their impact on user privacy [15]. Even when
ﬁngerprinting companies honor the recently-proposed “Do
Not Track” (DNT) header, the user is still ﬁngerprinted for
fraud detection, but the companies promise not to use the
information for advertising purposes [16]. Note that since
the ﬁngerprinting scripts will execute regardless of the DNT
value, the veriﬁcation of this promise is much harder than
verifying the effect of DNT on stateful tracking, where the
effects are visible at the client-side, in a user’s cookies [17].
In this paper, we perform a four-pronged analysis of
device identiﬁcation through web-based ﬁngerprinting. First,
we analyze the ﬁngerprinting code of three large, commer-
cial companies. We focus on the differences of their code in
comparison to Panopticlick [12], Eckersley’s “open-source”
implementation of browser ﬁngerprinting. We identify the
heavy use of Adobe Flash as a way of retrieving more sensi-
tive information from a client, including the ability to detect
HTTP proxies, and the existence of intrusive ﬁngerprinting
plugins that users may unknowingly host in their browsers.
Second, we measure the adoption of ﬁngerprinting on the
Internet and show that, in many cases, sites of dubious
nature ﬁngerprint
their users, for a variety of purposes.
Third, we investigate special JavaScript-accessible browser
objects, such as navigator and screen, and describe
novel ﬁngerprinting techniques that can accurately identify
a browser even down to its minor version. These techniques
involve the ordering of methods and properties, detection
of vendor-speciﬁc methods, HTML/CSS functionality as
well as minor but ﬁngerprintable implementation choices.
Lastly, we examine and test browser extensions that are
available for users who wish to spoof the identity of their
browser and show that, unfortunately all fail to completely
hide the browser’s true identity. This incomplete coverage
not only voids the extensions but, ironically, also allows
ﬁngerprinting companies to detect
that user is
attempting to hide, adding extra ﬁngerprintable information.
the fact
Our main contributions are:
• We shed light into the current practices of device iden-
tiﬁcation through web-based ﬁngerprinting and propose
a taxonomy of ﬁngerprintable information.
• We measure the adoption of ﬁngerprinting on the web.
• We introduce novel browser-ﬁngerprinting techniques
that can, in milliseconds, uncover a browser’s family
and version.
• We demonstrate how over 800,000 users, who are
currently utilizing user-agent-spooﬁng extensions, are
more ﬁngerprintable than users who do not attempt to
hide their browser’s identity, and challenge the advice
given by prior research on the use of such extensions
as a way of increasing one’s privacy [18].
II. COMMERCIAL FINGERPRINTING
While Eckersley showed the principle possibility of ﬁn-
gerprinting a user’s browser in order to track users without
the need of client-side stateful identiﬁers [12], we wanted
to investigate popular, real-world implementations of ﬁnger-
printing and explore their workings. To this end, we ana-
lyzed the ﬁngerprinting libraries of three large, commercial
companies: BlueCava1, Iovation2 and ThreatMetrix3. Two of
these companies were chosen due to them being mentioned
in the web-tracking survey of Mayer and Mitchell [19],
while the third one was chosen due to its high ranking on a
popular search engine. Given the commercial nature of the
companies, in order to analyze the ﬁngerprinting scripts we
ﬁrst needed to discover websites that make use of them. We
used Ghostery [9], a browser-extension which lists known
third-party tracking libraries on websites, to obtain the list
of domains which the three code providers use to serve their
ﬁngerprinting scripts. Subsequently, we crawled popular
Internet websites, in search for code inclusions, originating
from these ﬁngerprinting-owned domains. Once these web
sites were discovered, we isolated the ﬁngerprinting code,
extracted all individual features, and grouped similar features
of each company together.
In this section, we present the results of our analysis,
in the form of a taxonomy of possible features that can
be acquired through a ﬁngerprinting library. This taxonomy
covers all the features described in Panopticlick [12] as
well as the features used by the three studied ﬁngerprinting
companies. Table I lists all our categories and discovered
features, together with the method used to acquire each
feature. The categories proposed in our taxonomy resulted
by viewing a user’s ﬁngerprintable surface as belonging
to a layered system, where the “application layer” is the
browser and any ﬁngerprintable in-browser information. At
the top of this taxonomy, scripts seek to ﬁngerprint and
identify any browser customizations that the user has directly
or indirectly performed. In lower levels, the scripts target
user-speciﬁc information around the browser, the operating
system and even the hardware and network of a user’s
1http://www.bluecava.com
2http://www.iovation.com
3http://www.threatmetrix.com
542
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
Fingerprinting Category
Browser customizations
Panopticlick
Plugin enumeration(JS)
Mime-type enumeration(JS)
ActiveX + 8 CLSIDs(JS)
BlueCava
Plugin enumeration(JS)
ActiveX + 53 CLSIDs(JS)
Google Gears Detection(JS)
Iovation
ReputationManager
Browser-level user conﬁgurations
Browser family & version
Operating System & Applications
Cookies enabled(HTTP)
Timezone(JS)
Flash enabled(JS)
User-agent(HTTP)
ACCEPT-Header(HTTP)
Partial S.Cookie test(JS)
User-agent(HTTP)
Font Detection(FLASH, JAVA)
Hardware & Network
Screen Resolution(JS)
System/Browser/User Language(JS)
Timezone(JS)
Flash enabled(JS)
Do-Not-Track User Choice(JS)
MSIE Security Policy(JS)
User-agent(JS)
Math constants(JS)
AJAX Implementation(JS)
User-agent(JS)
Font Detection(JS, FLASH)
Windows Registry(SFP)
Screen Resolution(JS)
Driver Enumeration(SFP)
IP Address(HTTP)
TCP/IP Parameters(SFP)
Browser Language(HTTP, JS)
Timezone(JS)
Flash enabled(JS)
Date & time(JS)
Proxy Detection(FLASH)
User-agent(HTTP, JS)
User-agent(HTTP, JS)
Windows Registry(SFP)
MSIE Product key(SFP)
Screen Resolution(JS)
Device Identiﬁers(SFP)
TCP/IP Parameters(SFP)
ThreatMetrix
Plugin enumeration(JS)
Mime-type enumeration(JS)
ActiveX + 6 CLSIDs(JS)
Flash Manufacturer(FLASH)
Browser Language(FLASH)
Timezone(JS, FLASH)
Flash enabled(JS)
Proxy Detection(FLASH)
User-agent(JS)
User-agent(JS)
Font Detection(FLASH)
OS+Kernel version(FLASH)
Screen Resolution(JS, FLASH)
TAXONOMY OF ALL FEATURES USED BY PANOPTICLICK AND THE STUDIED FINGERPRINTING PROVIDERS - SHADED FEATURES ARE, IN COMPARISON
TO PANOPTICLICK, EITHER SUFFICIENTLY EXTENDED, OR ACQUIRED THROUGH A DIFFERENT METHOD, OR ENTIRELY NEW
Table I
machine. In the rest of this section, we focus on all the
non-trivial
techniques used by the studied ﬁngerprinting
providers that were not previously described in Eckersley’s
Panopticlick [12].
A. Fingerprinting through popular plugins
As one can see in Table I, all companies use Flash, in
addition to JavaScript, to ﬁngerprint a user’s environment.
Adobe Flash is a proprietary browser plug-in that has
enjoyed wide adoption among users, since it provided ways
of delivering rich media content that could not traditionally
be displayed using HTML. Despite the fact that Flash has
been criticized for poor performance, lack of stability, and
that newer technologies, like HTML5, can potentially deliver
what used to be possible only through Flash,
is still
available on the vast majority of desktops.
it
We were surprised to discover that although Flash reim-
plements certain APIs existing in the browser and accessible
through JavaScript,
its APIs do not always provide the
same results compared to the browser-equivalent functions.
For instance, for a Linux user running Firefox on a 64-bit
machine, when querying a browser about the platform of
execution, Firefox reports “Linux x86 64”. Flash, on the
other hand, provides the full kernel version, e.g., Linux
3.2.0-26-generic. This additional information is not only un-
desirable from a privacy perspective, but also from a security
perspective, since a malicious web-server could launch an
attack tailored not only to a browser and architecture but to
a speciﬁc kernel. Another API call that behaves differently
is the one that reports the user’s screen resolution. In the
Linux implementations of the Flash plugin (both Adobe’s
and Google’s), when a user utilizes a dual-monitor setup,
Flash reports as the width of a screen the sum of the two
individual screens. This value, when combined with the
543
browser’s response (which lists the resolution of the monitor
were the browser-window is located), allows a ﬁngerprinting
service to detect the presence of multiple-monitor setups.
Somewhat surprisingly, none of the three studied ﬁnger-
printing companies utilized Java. One of them had some
dead code that revealed that in the past it probably did make
use of Java, however, the function was not called anymore
and the applet was no longer present on the hard-coded
location listed in the script. This is an interesting deviation
from Panopticlick, which did use Java as an alternate way
of obtaining system fonts. We consider it likely that the
companies abandoned Java due to its low market penetration
in browsers. This, in turn, is most likely caused by the fact
that many have advised the removal of the Java plugin from
a user’s browser [20], [21] due to the plethora of serious
Java vulnerabilities that were discovered and exploited over
the last few years.
B. Vendor-speciﬁc ﬁngerprinting
in
a
browser
that,
to
not
all browsers. For
Another signiﬁcant difference between the code we
the ﬁngerprinting
analyzed and Panopticlick is
operate
the
companies were
trying
instance, when
same way across
they
Internet Explorer,
as
recognizing
would extensively ﬁngerprint
Internet-Explorer-speciﬁc
properties, such as navigator.securityPolicy and
navigator.systemLanguage. At
the same time,
the code accounted for
the browser’s “short-comings,”
such as using a lengthy list of predeﬁned CLSIDs for
Browser-Helper-Objects (BHOs) due to Internet Explorer’s
unwillingness to enumerate its plugins.