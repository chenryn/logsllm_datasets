Output: [123,456,579]
Input: "123456579"
● and F[i] + F[i+1] = F[i+2] for all 0  []e => o ·
Explanation: The task is impossible.
Output: []
Input:
Input: "11235813"
func dfsvisitAllRooms(es [][]int, visited map[int]bool, from int)
F.length >= 3; 
return len(rooms) == len(visited)
dfsvisitAllRooms(es, visited, to)
visited[to] = true 
if visited[to] {
 continue 
"112358130'
---
## Page 796
代码
解题思路
返
579]。斐波那契式序列是一个非负整数列表F，且满足：
给定一个数字字符串S，比如S="123456579"，我们可以将它分成斐波那契式的序列[123,456,
题目大意
Note:
 Example 5:
·这一题是第306 题的加强版。第 306 题要求判断字符串是否满足斐波那契数列形式。这一题要求
另
package leetcode
·这一题也要特别注意剪枝条件，
·这一题思路和第 306 题基本一致，需要注意的是题目中的一个限制条件，〇= 3; 
● 0= 1= 1= 1 O { 
 return []int{}
if !*isComplete {
for secondEnd := firstEnd + l; max(firstEnd, secondEnd-firstEnd)  1 {
 break
break
*res = append(*res, 
*res = append(*res,
*iscomplete = true
findRecursivecheck(s, first, second, secondEnd+l, &res, &iscomplete)
if second >= 1 0 && !*isComplete {
*res = (*res)[:len(*res)-1] 
return
 findRecursivecheck(s, x2, x1+x2, left+len(strconv.Itoa(xl+x2)), res,
*res = append(*res, xl) 
---
## Page 799
代码
2个字符串即可。
这一题可以用栈的思想来模拟，遇到 ##字符就回退一个字符。不是 ##号就入栈一个字符。比较最终
解题思路
给2个字符串，
题目大意
Follow up:
Note:
package leetcode
● Can you solve it in O(N) time and O(1) space?
· S and T only contain lowercase letters and '#' characters.
● 1  0 { 
s = s[:len(s)-1]
如果遇到 ##号字符，就回退一个字符。问最终的2个字符串是否完全一致。
---
## Page 800
Example 2: 
 Example 1:
Return O if there is no mountain.
 Given an array A of integers, return the length of the longest mountain.
:pioy saadod umollot au j! uiesunow e ( jo) g eeqns (snonsuon) Kue lien san 
845. Longest Mountain in Array.
Note:
题目
Explanation: There is no mountain.
Output:0
'  5y  '1'4't'] 1 11 11  1x
Output: 5 
Input: [2,1,4,7,3,2,5]
●B.length >= 3 
Input: [2,2,2]
[-]a " >[]g >[og ney uons - ysul'g >!>o awos sisixa aau 
(Note that B could be any subarray of A, including the entire array A.)
B[B.length - 1] 
return string(s) == string(s2)
s2 := make([]rune, 0) 
for .
} else { 
s2 = append(s2,c)
if len(s2) >0 {
-, C := range T {
s2 = s2[:len(s2)-1]
---
## Page 801
代码
这道题解题思路也是滑动窗口，只不过在滑动的过程中多判断一个上升和下降的状态即可。
解题思路
以后，逐渐下降。
给出一个数组，要求求出这个数组里面"山"最长的长度。“山"的意思是，从一个数开始逐渐上升，到顶
这道题考察的是滑动窗口的问题。
题目大意
Follow up:
A[right+l] > A[right]） Il (right != left && A[right+1] A[left] &&
} else{
if right != left && isAscending == false {
if A[right+]] 0 { 
sat.tree[rightTreeIndex].count == 0 {
sat.tree[rightTreeIndex] .val)
0
sat.tree[rightTreeIndex].count), 0 
rightTreeIndex int) {
func (sat *SegmentAreaTree) pushup(treeIndex, leftTreeIndex,
 } else if sat.tree[leftTreeIndex].count > O &&
if sat.tree[leftTreeIndex].count > 0 && sat.tree[rightTreeIndex].count >
 newcount, newValue := sat.merge(sat.tree[leftTreeIndex] .count,
sat.tree[treeIndex] = SegmentItem{count: newcount, val: newvalue}
[0,1]
 newValue = sat.tree[rightTreeIndex].va]
 newValue = sat.tree[leftTreeIndex].val 
 newValue = sat.merge(sat.tree[leftTreeIndex].val,
[0,1]
[0,3]
[0,3]
[1,2]
Sweep line = [0,3] +1
Sweep line = [0,2] +1
[1,3]
[2,3]
[1,3]
[2,3]
5,3)
---
## Page 807
·遍历到倒数第2根扫描线的时候就能得到结果了。因为最后一根扫描线update 以后，整个线段树
全部都归为初始化状态了。
[0,1]
[0,1]
[0,1]
0,3]
0.3
0,3
[1,2]
[1,2]
Sweep line = [0,3] -1
 Sweep line = [0,2] -1
Sweep line = [0,1] +1
[1,3]
[2,3]
[1,3]
[1,3]
[2,3]
[2,3]
@halfrost
---
## Page 808
代码
·这一题是线段树扫面线解法的经典题。
func rectangleArea(rectangles [][]int) int {
import（
package leetcode
return res % 1000000007
"sort"
for i := O;i < len(posx)-l; i++ { 
for i := O; i < len(posY)-1; i++ {
sat.Init(tmp, func(i,j int) int {
for i := 0;i < len(tmp)-1; i++ 
posXMap, posX, posYMap, posY, lines := discretization850(rectangles)
sat, res := SegmentAreaTree{}， 0 
 tmp[i] = posY[i+l] - posY[i] 