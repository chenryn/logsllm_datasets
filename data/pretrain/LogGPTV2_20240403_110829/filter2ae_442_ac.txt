                    String filename = contentDisposition.substring(startIndex + key.length());
                    int endIndex;
                    if (filename.startsWith("\"")) {
                        endIndex = filename.indexOf("\"", 1);
                        if (endIndex != -1) {
                            return filename.substring(1, endIndex);
                        }
                    } else {
                        endIndex = filename.indexOf(";");
                        if (endIndex != -1) {
                            return filename.substring(0, endIndex);
                        }
                    }
                    return filename;
                }
            }
        }
这时候你的反应应该会和我一样，套中套之waf你猜猜我是谁
当然我们也可以不要双引号，让waf哭去吧
### Spring5
#### 基础构造
也是随便来个新的springboot2.6.4的，来看看spring5的，小版本间差异不测了，经过测试发现spring5和spring4之间也是有版本差异处理也有些不同，同样是在`parseRequest`
    private void parseRequest(HttpServletRequest request) {
            try {
                Collection parts = request.getParts();
                this.multipartParameterNames = new LinkedHashSet(parts.size());
                MultiValueMap files = new LinkedMultiValueMap(parts.size());
                Iterator var4 = parts.iterator();
                while(var4.hasNext()) {
                    Part part = (Part)var4.next();
                    String headerValue = part.getHeader("Content-Disposition");
                    ContentDisposition disposition = ContentDisposition.parse(headerValue);
                    String filename = disposition.getFilename();
                    if (filename != null) {
                        if (filename.startsWith("=?") && filename.endsWith("?=")) {
                            filename = StandardMultipartHttpServletRequest.MimeDelegate.decode(filename);
                        }
                        files.add(part.getName(), new StandardMultipartHttpServletRequest.StandardMultipartFile(part, filename));
                    } else {
                        this.multipartParameterNames.add(part.getName());
                    }
                }
                this.setMultipartFiles(files);
            } catch (Throwable var9) {
                this.handleParseFailure(var9);
            }
        }
很明显可以看到这一行`filename.startsWith("=?") &&
filename.endsWith("?=")`，可以看出Spring对文件名也是支持QP编码
在上面能看到还调用了一个解析的方法`org.springframework.http.ContentDisposition#parse`
，多半就是这里了,那么继续深入下
可以看到一方面是QP编码，另一方面也是支持`filename*`,同样获取值是截取`"`之间的或者没找到就直接截取`=`后面的部分
如果是`filename*`后面的处理逻辑就是else分之，可以看出和我们上面分析spring4还是有点区别就是这里只支持`UTF-8/ISO-8859-1/US_ASCII`，编码受限制
    int idx1 = value.indexOf(39);
    int idx2 = value.indexOf(39, idx1 + 1);
    if (idx1 != -1 && idx2 != -1) {
      charset = Charset.forName(value.substring(0, idx1).trim());
      Assert.isTrue(StandardCharsets.UTF_8.equals(charset) || StandardCharsets.ISO_8859_1.equals(charset), "Charset should be UTF-8 or ISO-8859-1");
      filename = decodeFilename(value.substring(idx2 + 1), charset);
    } else {
      filename = decodeFilename(value, StandardCharsets.US_ASCII);
    }
但其实仔细想这个结果是符合RFC文档要求的
接着我们继续后面会继续执行`decodeFilename`
代码逻辑很清晰字符串的解码,如果字符串是否在`RFC 5987`文档规定的Header字符就直接调用baos.write写入
     attr-char     = ALPHA / DIGIT
                       / "!" / "#" / "$" / "&" / "+" / "-" / "."
                       / "^" / "_" / "`" / "|" / "~"
                       ; token except ( "*" / "'" / "%" )
如果不在要求这一位必须是`%`然后16进制解码后两位，其实就是url解码，简单测试即可
#### "双写"绕过
来看看核心部分
        public static ContentDisposition parse(String contentDisposition) {
            List parts = tokenize(contentDisposition);
            String type = (String)parts.get(0);
            String name = null;
            String filename = null;
            Charset charset = null;
            Long size = null;
            ZonedDateTime creationDate = null;
            ZonedDateTime modificationDate = null;
            ZonedDateTime readDate = null;
            for(int i = 1; i 
* * *