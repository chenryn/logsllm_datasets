nsg_to_receive,0)±=-1){
exit (EXIT_FAILURE) :
printf("You wrote:s*,some_data,some_text);
running = 0;
if (msgct1(msgid,IPC_RMID, 0)==-1)
fprintf(stderr,*msgctl(IPC_RMID)failed\n*):
exit(&XIT_FAILURE) :
1
exit(2XIT_SUCCESS);
！
4）发送者程序与msgl.c很相似。在main函数的初始化部分，去掉对msg_to_receive的定义并
把它换为buffer[BUFSIZ]，去掉删除消息队列的语句，然后在running循环里做以下修改。最后
得到的是一个发送用户输人文本到队列的magsnd调用，如下所示：
include 
>
include 
#include 
#include 
#include 
#include 
#include 
define MAX_TExT 512
struct my_msg_st (
long int my_msg_type:
char scme_text[NAX_TEXT]:
} ;
int nain()
int running = 1;
struct my_msg_st some_data;
char buffer[BUFSIz]:
int nsgid;
msgid = msgget((key_t)1234, 0666 1 IPC_CREAT):
if(msgid e-1）（
fprintf(stderr,
“msgget failed with error: edin*. errno);
exit (EXIT_FAILURE) :
while(running){
fgets(buffer,BUFSIz，stdin);
some_data.ny_msg_type 1;
strcpy(some_data.some_cext, buffer):
if(msgsnd(msgid,(void *)some_data，
fprintf(stderr.
*nsgand failedn*):
MAX_TEXT,0)=#-1}{
exit (EXIT_FAILURE):
加入java编程群：524621833
---
## Page 432
414
Linux程序设计
if（strncmp(buffer,*end”, 3) se 0)[
running = 0;
1
exit (EXT_SUCCESS) ;
与管道例子不同的是，不再需要由进程自已来提供同步机制了。这是消息相对于管道的一
大优势
发送者按计划创建出消息队列，在队列里放上一些数据，然后在接收者启动之前就退出了。
我们先运行发送者msg2程序。下面是一些样本输出：
S m8g2
Enter scme text: How ar you today?
Enter some text: he11o
5msg1
Enter
some text: end
You wrote: How are you today?
You wrote: end
操作注释：
发送者程序用msgget函数创建了一个消息队列，然后用msgsnd往队列里放上一些消息。接
收者用msgget获得那个消息队列的标识码，然后开始接收消息，直到接收到特殊的“end”字样
出现为止。此时它将用msgctl函数来删除消息队列，打扫战场。
13.3.3消息队列总结
在两个不相关的进程之间传递数据有许多种办法，消息队列是其中比较简单同时也比较高
效的那一种。与命名管道相比，消息队列的优势在于它们既不依赖于发送进程，也不依赖于接
收进程，它们自己是可以独立存在的，这就省掉了在打开和关闭命名管道时必不可少的同步与
协调环节。
13.4应用示例
我们准备用在这一章里学到IPC功能来改造我们的CD唱盘管理软件。
我们可以通过这三种IPC功能各种不同的组合来改造我们的软件，但考虑到被传递的信息量
实在很少，所以直接使用消息队列来实现请求和响应的传递工作应该是比较合情合理的。
如果需要我们传递的数据量很大，就可以考虑用共享内存来传递实际数据，再用信号量或
消息队列省去了我们在第11章里遇到的问题，那时我们需要在数据传递过程中有两个进程
都打开着管道。面使用消息队列就不同了，即使仅有一个进程是消息队列的当前用户，消息队
列也允许它往队列里放消息。
惟一需要我们做出的重大决定是怎样向客户返回查询结果。一个简单的做法是让服务器用
一个队列，每个客户用一个队列。但如果同时运行的客户数量太大，就会因申请分配的消息队
加入jaVa编程群：524621833
---
## Page 433
第13章信号量、消息队列和共事内存
415
列数量太大而引起问题。要是把消息中的消息ID域用起来，我们就能对消息进行“编址”、我们！
的做法是：让全体消息都只使用-个队列，在每条消息里加上客户的进程ID，这样就把响应消
息和某个特定的进程联系起米了：每个客户只检索那些发送给它的消息，发送给其他进程的消
息就留在队列里吧。
要想把CD管理软件改造成使用IPC功能的，只需更换pipe_imp.c文件。在以下几页内容里，
我们将对替换文件ipc_imp.c的主要组成部分进行说明。
动手试试：修订服务器函数
1）首先，我们要包括上必要的头文件，定义一些消息队列的键字，还要定义一个用来保存
我们消息数据的结构。如下所示：
#include *cd_data.h*
#include *cliserv.h*
include 
#1nciude 
#include 
define SERVER_MQUEUE 1234
define CLIENT_MOUEUE 4321
struct msg_passed (
long int msg_key;+*used for elient pid */
message_db_t real_nessage;
 :
2）下面这两个设定了文件作用范制的变量将分别保存着msgget函数返回的两个队列标识码。
如下所示：
static int serv_qid  -1;
statie int cli_qid = -1:
3）我们决定由服务器负责创建那两个消息队列，如下所示：
int servet_starting()
#if DEBUG_7RACE
if (serv_qid = -1) return(0）;
cerv_qid = wsgget( (key_t)SERvER_MQUEUE,0666 ∣IPC_CREAT) ;
c1i_qld = msggot((key_t)CLIBNr_MQUEUE,0666 |IPC_CREAT) :
if (eli_qid == -1) return(0）;
return(1) ;
4）服务器还负责在退出时打扫战场。在服务器的扫尾工作中，我们把那两个文件范围变量
设置为非法的值；如果服务器在它自己已经调用过server_ending之后还试图发送消息，这种做法
就可以捕提到它们。
void server,ondingt1
if DEBUG_TRACE
printf t*&d :- server_ending ()\n°.
getpid()) ;
加入jaVa编程群：524621833
---
## Page 434
416
Linux程序设计
#endif
（void]msgctl(serv_qid.IPC_RHID,0）;
（void)msgetl(cli_qid,IPC_RMID,0):
serv_qid = -1;
- =b
5）服务器读函数的作用是：从队列里读一个任意类型（意思是来自任意客户）的消息，返
回消息的数据部分（忽略消息的类型）。
int read_request_from_client (message_db_t *rec_ptr)
struct msg_passed my_nsg;
if DEBUG_TRACE
printf(*&d :- read_reguest_from_elient (1\n*,getpid(1):
tendif
if (nsgrcv(serv_qid, (void *)&my_nsg. sizeof(*rec_ptr), 0, 0) -1) {
return(01;
*rec_ptr = my_msg.real_message;
return(1):
6)发送响应时要用客户的ID值对消息进行“编址”，进程ID值是客户放在自己的请求里送过
来的。如下所示：
int send_resp_to_client (const message_db_t mess_to_send)
struct meg_passed my_msg;
printf(*&d :- send_resp_to_client()\n*.
#endif
:(()pyde5
my_msg.real_message = mess_to_send;
my_asg.msg_key s mess_to_send.client_pid;
if (nsgand(cli_qid,(void *)&ny_msg.sizeof(ness_to_send), 0) xs -1)(
return(0);
return(1):
动手试试：修订客户函数
1）当客户启动的时候，它需要找到服务器和客户的队列标识码。客户本身并不创建消息队
列。如果服务器没有运行，这个函数就会因消息队列没有存在而失败。
int client_starting()
if DEBUG_TRACE
endif
printf(*d:-client_starting\n,getpid());
serv_gid =nsgget((key_t)SERVER_MQUEUE,0666):
if {serv_qid =s -11 return(0);
c1i_qid = mngget ((key_t)CL1ENr_MQUeUE, 0666):
if (eli_qid =s-11 return(0);
return(1):
加入jaVva编程群：524621833
---
## Page 435
第13章信号量、消息队列和共享内存
果客户在它自己已经调用过client_ending之后还试图发送消息，这种做法就可以捕提到它们。
void elient_ending [)
if DEBUG_TRACE
serv_qid = -1;
cli_qid = -1;
上
3）要想把消息发送给服务器，我们必须先把有关数据保存到一个结构里去。我们必须设置
消息的键字。因为“0”对键字来说是一个非法的值，而不对这个键字进行定义又意味着它可以
随机地取任意值，所以如果碰巧这个值是“0”的话，这个函数就会调用失败。因此，我们一定
要对键字进行赋值。
int send_sess_to_server(message_b_t mess_to_send)
struct asg_passed ny_msg:
if DERUG_TRACE
tendif
printE (*sd :- send_mess_to_server ()\n*,getpid()1;
ny_nsg.nsg_key = mess_to_send.client_pid;
my_nsg.real_message = meso_to_send;
perror(*Message send failed*):
return(0);
return(1):
4）当客户从服务器检索一个消息的时候，它通过自己的进程ID只接收发送给它的消息，不
理发送给其他用户的消息。
Int road_resp_fron_server (message_db_t *rec_ptr)
struct nsg_passed my_msg:
if DEBUG_TRACE
printf(*ad :- read_resp_from_server(1\n*,getpid(>);
#endif
If (msgrcv(cli_qid, (void *)kmy_msg, sizeof(*rec_ptr),. getpid(), 0) e= -1){
return(01;
*rec_ptr = my_nsg.real_message:
return(1);
5）为了实现与pipe_imp.c百分之百的兼容，我们还需要额外定义四个函数。在我们的新程序
里，这几个函数应该是空的。它们在使用管道时实现的操作现在已经用不着了。
int start_resp_to_client (const message_db_t mess_to_send)
return(1) ;
void end_resp_to_client (void)
加入jaVa编程群：524621833
---
## Page 436
418
Linux程序设计
int start_resp_from_server [void)
return(11:
void end_resp_fron_server (void)
CD唱盘管理软件面向消息队列的改造展示了IPC消息队列的强大功。我们需要使用的函
数少了，就是还在使用的也比它们以前小得多了。
13.5查看IPC功能状态的命令
虽然没有在X/OPen技术规范里得到规定，但大多数带有信号量功能的UNIX系统都提供了一
组用来从命令行上访问IPC功能的命令。它们是ipcs和ipcrm命令，在你开发程序时肯定会发挥重
要的作用。
13.5.1信号量
如果想对系统上的信号量状态进行检查，可以使用“ipcs-s”命令。如果存在着信号量，就
会给出如下格式的输出：
$ipe 
sem1d
Senaphore Arrays --
768
owmer
rick
666
perms
1
status
如果因为意外原因程序遗漏了没有清除的信号量，ipcrm命令可以帮你清除它们。清除这些
漏网信号量的（Linux）命令如下所示：
$ ipcrm sen 768
许多UNIX系统用的是：
5 ipcrm -8768