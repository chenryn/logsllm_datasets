# OCR Output
## Page 1
引言
1.1起源
首先，坦白地说，开发FiddlerWeb调试器时，并没有什么伟大的愿景或期望一要做一
个全世界最受欢迎的调试代理。它只是由具体需求触发，应运面生。我从未打算构建一个功
能如此灵活面强大的复杂平台。因为它的复杂性，我不得不花费九个月的时间来写这本书，
为的就是介绍如何充分利用Fiddler。我们真的做到了！
在深入介绍技术细节之前，首先分享一下Fiddler背后的故事。
1999年春天，我还是马里兰大学的学生，得到了微软的一个新团队的程序经理（Program
的？”我对此只是略知皮毛，因此给了个不完整也不太准确的回答，但还不至于让自己很难
堪。从那个暑假开始，我的工作是参与第一版SharePoint的开发。我偶尔会使用Microsofl
NetworkMonitor（NetMon）查看网络数据流。MicrosoftNetworkMonitor（NetMon）是一个
功能强大的数据包探器（packctsniffer），但很原始很难用。2001年暑假刚开始，我正式加
入微软公司，工作职位是OficeClipArtorganizer客户端和网站的程序经理。
当时，我所在团队的大多数开发和测试人员都不熟悉Web开发，他们之前主要是用C和
C++实现本地运行的应用。很快，调试过程过于繁项这个问题就凸显出来一很多同事都不
VisualStudio的某些变量上，查看十六进制形式的原始数据流，如图1-1所示。
---
## Page 2
第1章引言
dato,insg5tart,cbytes-iMsgS
_data,
1isReqa
0x20
Ox2f
0x.77
0x77
0x2e
图 1-1
在过去几年，我编写了一些小工具，因此有信心实现一个使得Web调试变得简单的工具。
最初的方案是基于已有的C++代理服务器，对其做些修改，从面可以把HTTP流输出到系统
控制台，如图1-2所示。
C:itoolsiproxy.exe
connectiens.
GET/HIIP/.1
Katspti
oplicati
Ho11ETCR33729N-RIPath.2:NETCsa2
711
lostimw.bing-conaip.d
图1-2
这种方案说它多差都不为过一这个代理无法处理安全数据流或认证协议。非文本形式
的内容的显示也是个问题—可笑的是，该工具还会把二进制内容当成ASCII码显示。老式
控制台用户可能还记得八进制的0x07代表的是字符“bell”，因此当控制台显示0x07时，系
统就会发出声响。因此，这个调试代理发布后，由于测试人员使用时会遇到二进制数据流，
OficeOnline团队的走廊就会不断响起像拉斯维加斯的赌场那样的声响。
虽然有烦人的缺陷，但这个工具还是很受欢迎，这激发我开始考虑下一个版本。我使用
BorlandDelphi快速实现了一个小演示程序，BorlandDelphi是我当时工作时最常用的开发工
具。其彩色UI界面是Fiddler的最终外观的基础，如图1-3所示。
2
---
## Page 3
1.1起源
图 1-3
然面，在考虑了使用本地代码编写代理服务器所涉及的安全和内存管理问题后，我决定
使用C#语言来实现新版本，该语言是由VisualStudio团队开发的，我一个很好的朋友加入了
该团队。于我而言，通过.NET从零开始实现HTTP代理服务器面临两大挑战：一是我不是很
了解HTTP是如何工作的：二是我不会用C#。
幸运的是，花钱买几本书，以及利用大量的周末闲余时间，我很快克服了这两个不足。
其中有两本书是我的良师益友：《HTTP：TheDefinitiveGuide》和《C#Cookbook》。通过一章
章的学习，我了解了HTTP是如何工作，以及如何用C#.NET编程，也开始慢慢地实现Fiddler。
大约半年后，我完成了Fiddler的第一个版本，如图1-4所示。
Fiddler-TTPDebuepogProey
SeEatBlesDoDetp
图1-4
同样，这个版本也存在很多不足（错误也是不计其数），但是同事们都积极采用了它，因
3
---
## Page 4
早豪1惠
为之前的版本不断地发出蜂鸣声，他们电脑的音箱都快崩溃了。
随后几年，Fiddler有了很大改进，它包含两个扩展模块，一是自动生成和修改响应的机
制，二是支持加密的（HTTPS）数据流、FTP和HTML5WebSockets。
关于本书
历经九年以及无数次版本更新，Fiddler已经发展成一个强大的工具和平台，可以执行各
种任务。它有一个可扩展性相当强大的模型，以及一个组件开发者社区，他们又进一步增强
了Fiddler作为性能、安全和负载测试工具的价值。从过去几年的电子邮件咨询、在线讨论小
组以及无数次的会议来看，大多数用户只是用到了Fiddler很少的一部分功能。我开始意识到
如果有关于该工具的完整指南，很多用户可以更好地利用它。本书就是由此而来。
作为Fiddler的作者，我发现写这本书既简单又具有挑战性。其简单性在于我非常了解
Fiddler，比如其底层实现，而且对于一些酶涩的细节查看源代码就可以了解。其挑战性在于
每当我选择写某个有趣的场景或功能时，将迫使我对其进行深入的思考。通常情况下，我写
着写着就“跑偏”了，转面写代码对Fiddler进行改进，改进之后，原来的主题通常只需要很
少的篇幅来介绍甚至不再需要介绍。最后，我重写了本书的大部分内容和Fiddler工具本身。
这个过程很漫长，但工具和书之间彼此也相得益彰。
本书的出版时间和Fiddler2.4.0.0版本的发布时间基本一致，大致都在2012年初夏。如
果你使用的是更高版本的Fiddler，你会发现一些细微差别，但其核心概念一致。
本书儿乎涵盖了Fiddler和FiddlerCore的每个主题，但它不是关于HTTP、SSL、HTML、
WebServices或深入了解Fiddler所需的很多其他主题的教程。如果你想深入了解网络协议，
我建议你查看以下资料，我在开发Fiddler的过程中一直在参考这些资料：
●Hypertext Transfer Protocol  HTTP/1.1,网hil为 http://www.ietf.org/rfc/rfc2616.txt;
·David Gourley 的《HTTP:The Definitive Guide》;
·Balachander Krishnamurthy 和1Jennifer Rexford 的《Web Protocols and Practice
HTTP/1.1, Networking Protocols, Caching, and Traffic Measurement):
·Stephen A.Thomas 的《SSL&TLS Essentials:Securing the Web》。
关于本书的阅读方式，你可以从头到尾阅读本书，也可以通过目录和索引来查找自已感
兴趣的话题。我建议你阅读本书的所有章节，即使其中某些章节可能和你不相关，因为每章
都包含了一些独有的建议和技巧。
---
## Page 5
1.2快速入门
我很推崇从下一节开始阅读，它介绍了一些术语和基础概念，可以帮助你更好地了解
Fiddler以及本书。
希望你喜欢本书！
1.2快速人门
本节将介绍Fiddler的一些基础知识，这些内容可帮助你入门并为本书后续的学习奠定
基础。
1.2.1基本概念
Fiddler是一款基于Windows系统的专用代理服务器软件。本地运行的程序，如Web浏
通常把这些请求转发给Web服务器。然后，服务器把这些请求的响应返回给Fiddler，Fiddler
再把这些响应转发给客户端。
几乎所有使用网络协议的程序都支持代理服务器，因此Fiddler几乎适用于所有应用。当
启动Fiddler来捕获请求和响应时，Fiddler会自动注册为WindowsIntemet（WinINET）网络服
务代理，并请求所有应用把请求发送给它，如图1-5所示。
应用
网络API
代理
（Fiddler)
网站
图1-5
有些应用不会自动识别Windows网络配置，要想让Fiddler捕获其数据流，需要手工配置
这些应用。也可以对Fiddler进行配置，使它能够支持更罕见的场景，包括服务器到服务器（如
WebServices）和设备到服务器（如iPad或Windows手机）的数据流。默认情况下，Fiddler
被设计成能够自动挂接到（chainto）先前已经部署的各种上游代理（upstreamproxy），通过
这种方式，Fiddler能够在已经使用了代理服务器的网络环境中正常工作。
Fiddler可以捕获所有的本地数据流，而且支持很多过滤器（filter）。这一特性使得用户既
可以隐藏不感兴趣的数据流，也可以高亮显示（使用颜色或字体选项）感兴趣的数据流。过
滤器的过滤条件可以是数据流的来源（如特定的客户端进程），也可以是数据流本身的某些特
征（如该数据流所绑定的主机名或服务器返回内容的类型）。
---
## Page 6
早事1赛
Fiddler的扩展模型功能丰富，既有简单的FiddlerSeript，也包含强大的功能插件
（Extensions），这些扩展可以使用任意一种.NET语言来开发。Fiddler还支持几种特殊的扩展
类型，其中最流行的是Inspector（稽查员）。顾名思义，Inspector的特点在于支持查看单个请
求或响应。Inspector可以做成支持所有响应类型（如HexViewInspector），也可以定制为只支
持特定类型（如JSONInspector）.如果你是开发人员，可以通过类库FiddlerCore把Fiddler
的核心代理引擎植入到自己的应用中。
和修改这些在网络上不可读的请求。要做到没有安全告警的无缝调试，可以把Fiddler的根证
书（rootcertificate）安装到系统或Web浏览器的受信任的证书库中。
一个Web会话（WebSession）代表客户端和服务器之间的一个事务。Fiddler界面中左侧
分别表示客户端发送给服务器的数据以及服务器返回给客户端的数据。会话对象还会维护一
组标志位（Flag），用于保存会话的元数据以及在处理该会话过程中记录的时间戳对象（Timer）。
代理服务器并非局限于查看网络流量一顾名思义，Fiddler这个名字的含义在于它可以
“随意玩弄（fiddle）”发送出去的请求和接收进来的响应。可以设置请求或响应断点以手工修
改数据流。到达设置的断点后，Fiddler会暂停会话，以使用户手工修改请求和响应。Fiddler
还支持在其内部运行脚本或扩展来改写数据流。默认情况下，Fiddler是在缓冲模式（buffering
mode）下工作的，即Fiddler是接收到服务器的完整响应之后才将响应的内容返回给客户端。
如果启用流模式（streamingmode），Fiddler会将从服务器端接收到的响应立即返回给客户端。
因此，流模式下不支持对服务器的响应进行修改。
Fiddler捕获的会话信息可以保存到会话归档（SessionArchiveZip，SAZ）文件中，以方便
后续查看。这种格式的压缩文件中包含了完整的请求和响应、标志位、时间截对象以及其他
元数据。非技术人员可以使用一个轻量级的捕获工具FiddlerCap来生成SAZ文件，再把这些
文件提供给专业人员进行分析。Fiddler支持扩展组件Exporter，它支持把捕获到的会话以其
他工具支持的格式来保存，从而保证了Fiddler和这些工具的互通性。同样，Fiddler也支持扩
展组件Importer，它支持Fiddler加载以其他格式存储的数据流，包括很多浏览器开发工具所
使用的HTTPArchive（HAR）格式。
））
6
---
## Page 7
1.2快速入门
1.2.2使用场景
我最经常遇到的一些问题类似于：“我可以使用Fiddler来完成吗”？Fiddler适用于
很多场景中。但是，对于一些场景，Fiddler是不合适的。绝大多数情况下，人们所使用的是
Fiddler的少数几个功能。以下将简单说明Fiddler所适用以及不适用的场景。
Fiddler支持功能的不完整列表
·查看几乎所有的浏览器、客户端应用或服务之间的Web数据流。
·手动或自动修改任意的请求或响应。
·解密HTTPS数据流以便查看和修改。
·归档捕获到的数据流，支持在不同的计算机上加载这些数据。
·给客户端应用“回放（playback）”先前捕获到的响应，即使当前服务器处于脱机状态。
·绝大多数PC和各种设备之间的Web数据流的调试，包括Mac/Linux系统、智能手机
和平板电脑。
·挂接到（chainto）上游代理服务器，包括TOR网络。
·作为反向代理运行，在不需要重新配置客户端计算机或设备的情况下，在服务端捕获
数据流。
·随着基于FiddlerScript或.NET可扩展模型实现的新功能的不断增加，Fiddler将变得
更加强大。
Fiddler不支持功能的不完整列表
Fiddler是一个非常灵活的工具，但某些功能目前还不支持。
·调试非网络协议数据流。
*Fiddler支持HTTP、HTTPS和FTP数据流以及相关的协议，如HTML5WebSockets
和ICY流。
*Fiddler无法监测或修改基于其他协议的数据，如SMTP、POP3、Telnet、IRC等。
·处理超大请求和响应。
译注：TOR是专门防范对流量探噢分析的软件项日，它通过由遍及全球的中维所组成的分布式网络转发通信，可以
实现服名访间网络。
7
---
## Page 8
第1章引言
*超过2GB的请求，Fiddler无法处理。
*超过2GB的响应，Fiddler的处理能力有限。
*Fiddler使用系统内存和页面文件（pagefile）来保存会话数据。保存大量的会话
或超大的请求和响应会导致性能急剧下降。
·“神奇”地修复网站的错误（bug）。
*Fiddler可以用来协助识别网络问题，但通常不能独立修复这些bug。我已经收到
过无数个电子邮件：“怎么回事？我已经安装了Fiddler，但我的网站怎么还有很
多bug？!”
好了，完成了Fiddler的入门，接下来让我们一起深入探索它吧！
8
---
## Page 9
探索Fiddler
2.1入门
Fiddler的官方网站为http://getfiddler.com，强烈建议通过站点下载Fiddler，因为有些恶
意网站对其进行了重新打包，会附带安装一些其他软件（如广告软件或浏览器工具栏）。
2.1.1系统需求
从WindowsXP到Windows 8.所有版本的Windows操作系统都支持Fiddler。安装Fiddler
唯一需要的就是预先安装Microsoft.NETFramework2.0或更高版本。WindowsVista或更高版
本的系统中已经自带安装了.NETFramework，在WindowsXP中可以使用WindowsUpdate来
安装它。如果你的系统中只安装了.NET4（以Windows8系统为例，大多没有安装.NET2.0、
3.0或3.5），需要下载Fiddler4包，它可以在.NETv4CLR上运行。和大部分.NET程序一样，
Fiddler在32位操作系统中会以32位模式运行，而在64位操作系统下会以64位模式运行。
Fiddler在64位操作系统中的运行效果最好，即使这些系统的内存小于4GB。
虽然不是必须，但是安装IntermetExplorer9或更高版本的IE后，Fiddler可以提供更多
的功能，因此强烈建议安装。特别说明一下，当安装了IE9及更高版本的浏览器时，Fiddler
的WebViewInspector可以显示媒体类型，无需配置就可以查看发送到http:/localhost的数据
流。此外，修改IE的配置之后，就可以通过http请求头中的X-Download-Initiator来查看请
求的来源。
安装Fiddler的基本功能需要5MB左右的磁盘空间，面安装最常用的插件也需要占用5MB
左右的磁盘空间。内存不低于512MB的系统就可以运行Fiddler，但当运行于内存大于2GB