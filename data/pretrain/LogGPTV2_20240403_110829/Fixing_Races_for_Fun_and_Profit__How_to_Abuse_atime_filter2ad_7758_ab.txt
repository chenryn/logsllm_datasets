again to point to the private ﬁle. By making four system
calls, access(2), open(2), access(2), open(2), the victim
has forced the attacker to win three races.
In general, the k-Race algorithm allows the setuid-root
program to make k strengthening rounds of additional
calls to access(2) and open(2), forcing the attacker to win
a total of 2k+1 races. Dean and Hu reason that, since the
adversary must win all 2k + 1 races, the security guaran-
tees scale exponentially with the number of rounds. If p
is the probability of winning one race, then the attacker
will defeat the k-Race defense with probability ≈ p2k+1.
Their measurements indicate that p ≤ 1.4 × 10−3 on
uniprocessor machines on a range of operating systems,
and p ≤ 0.12 on a multiprocessor Sun Solaris machine.
Dean and Hu suggest k = 7 as one reasonable parameter
setting, and they estimate that with this choice the prob-
ability of a successful attack should be below 10−15.
In their argument for the security of their scheme,
Dean and Hu consider a slightly modiﬁed attacker that
attempts to switch activedir back and forth between
dir0 and dir1 between each system call made by the
victim. They observe that this attack will fail for two
reasons. First, the attacker is extremely unlikely to win
any race if dir0 is in the ﬁlesystem cache. Moreover,
even if the attacker gets lucky and dir0 is out of cache
during the victim’s ﬁrst call to open(2), the victim’s call
to open(2) will bring dir0 into the cache. In this case,
dir0 will be in the cache for the victim’s second call
to open(2), so the attacker will lose that race. Dean
and Hu’s experiments support this claim. Second, they
note that this attack requires that the attacker remain syn-
chronized with the victim. Dean and Hu added random
delays between each access(2) and open(2) call to foil
any attempts by the attacker to synchronize with the vic-
tim.
Although ﬁlesystem caching and synchronization are
real problems for an attacker, we show in the next section
that it is possible to modify the attack to overcome these
difﬁculties.
4 Basic Attack
As Dean and Hu observed, an attacker must overcome
two obstacles to successfully attack their scheme. First,
ﬁlesystem caching prevents the attacker from winning
multiple races. Second, the attacker must synchronize
with the victim. We deal with each problem in turn.
Avoiding the cache. The attack analyzed by Dean
and Hu succumbs to caching effects because it re-uses
for i = 1 to 2k + 1
wait for victim’s next system call
link activedir to diri
Figure 4: Our algorithm for defeating the k-Race algo-
rithm. The algorithm forces the victim to perform I/O,
and hence yield the CPU to the attacker, by switching
among a series of directories, dir0, . . ., dir15, all
of which are out of the ﬁlesystem cache. The attacker
detects the start of each of the victim’s system calls by
monitoring the access time of symbolic links in each di-
rectory.
dir0 and dir1. To avoid ﬁlesystem caching, we create
16 separate directories, dir0, . . ., dir15, and use each
directory exactly once. The even-numbered directories
dir0, dir2, . . ., dir14 all contain symbolic links to
a publicly accessible ﬁle. The odd-numbered directories,
dir1, dir3, . . ., dir15, contain symbolic links to the
protected ﬁle we are attacking, such as /etc/shadow.
Initially, the symbolic link activedir points to dir0.
After each of the victim’s system calls,
the attacker
changes activedir to point to the next directory, as
shown in the pseudo-code in Figure 4.
Since the attacker uses each directory exactly once,
she has a much higher chance of winning all the races
against the victim. If the attack begins with none of the
directories in cache, then the victim will be forced to
sleep on I/O for each of its system calls, giving the at-
tacker time to update activedir to point to the next
directory.
This attack succeeds only when dir0, . . ., dir15 are
not in the operating system’s buffer cache. If the attacker
tries to run the attack immediately after creating these
directories, she will fail because they will all still be in
the cache. For the rest of this section, we assume the
attacker has some method to ﬂush all these directories
from cache after creating them. Section 5 describes a
more powerful attack that eliminates this assumption.
Staying in sync. To stay synchronized with the victim,
the attacker must be able to detect when the victim has
begun each call to access(2) or open(2). The key in-
sight is that Unix updates the access time on any sym-
bolic links it traverses during name resolution.2 The at-
tacker can use this to monitor the ﬁlesystem operations
performed by the victim. The attacker simply needs to
2Some NFS conﬁgurations do not update link access times, but ev-
ery local ﬁlesystem we tested exhibited this behavior. Some kernels
support a noatime mount option that disables access time updates.
Access time polling is not critical to our attack, though. The system
call distinguishers we develop in Section 7 can be used instead of ac-
cess time polling to synchronize with the basic k-Race algorithm.
306
14th USENIX Security Symposium
USENIX Association
dir0/iotrap/lnk symlink
symlink
dir0/sentry
dir1/iotrap/lnk symlink
symlink
dir1/sentry
dir2/iotrap/lnk symlink
symlink
dir2/sentry
−−−−−→ public file
−−−−−→ dir0/iotrap
−−−−−→ /etc/shadow
−−−−−→ dir1/iotrap
−−−−−→ public file
−−−−−→ dir2/iotrap
...
dir15/iotrap/lnk symlink
symlink
dir15/sentry
−−−−−→ /etc/shadow
−−−−−→ dir15/iotrap
Figure 5: The directory structure used in our basic attack
on the k-Race algorithm. The attacker synchronizes with
the victim by polling the access time of diri/sentry.
The attacker must ﬁrst ﬂush all the iotrap directories
from the ﬁlesystem cache so that the victim will sleep on
I/O when it traverses them. The attacker creates a sym-
bolic link activedir pointing to dir0 and runs the
victim with arguement activedir/sentry/lnk.
poll the access time of a symbolic link in the path it
passes to the victim. When the access time of that link
changes, the victim must have begun a call to access(2)
or open(2).
Unfortunately, there is a small hitch with this simple
approach. In Unix, the access time is recorded only to a
1-second granularity. Consequently, the attacker cannot
poll the access time of activedir because, every time
she updates activedir to point to a new directory, she
will change its access time to the current second, and
hence will not be able to detect further accesses for up to
a second. By then, the race will be over. Moreover, the
attacker cannot poll the access time on dir7/lnk since
this would pull dir7 into the ﬁlesystem cache. This
makes it a challenge to stay synchronized with the vic-
tim.
This hurdle can be surmounted with an appropriate
re-arrangement of the directory structure. See Figure 5
for the directory structure we use to enable polling with-
out disturbing the ﬁlesystem cache. Inside each direc-
tory, diri, we create another subdirectory iotrap and
a symbolic link sentry pointing to iotrap. We then
create the ﬁnal link, lnk, that points to the public or pro-
tected ﬁle inside diri/iotrap. The attacker gives the
victim the ﬁlename activedir/sentry/lnk, and
polls the access time of activedir/sentry.
Summary.
1. The attacker creates 16 directories as shown in Fig-
ure 5 and a symbolic link activedir to dir0.
2. She forces the cache entries for these directories out
of memory.
3. The attacker then executes the victim with argument
activedir/sentry/lnk.
(a) The victim calls access(2). The kernel be-
gins traversing this path and updates the ac-
cess time on dir0/sentry. After resolving
the symbolic link dir0/sentry, the vic-
tim is put to sleep while the operating system
loads the contents of dir0/iotrap. The
victim is now suspended in the middle of exe-
cuting the access(2) call.
(b) The attacker then gains the CPU, and polls
the access time on dir0/sentry. Upon
noticing that the access time has been updated,
the attacker knows that the victim has begun
its ﬁrst access(2) call. The attacker switches
activedir to point to dir1 and begins
polling the access time on dir1/sentry.
The victim’s suspended access(2) call will not
be affected by this change to activedir be-
cause it has already traversed that part of the
path.
(c) Eventually, the victim’s I/O completes and it
ﬁnishes the access(2) call successfully.
When the victim calls open(2),
the exact same se-
quence of events occurs: the kernel updates the access
time on dir1/sentry, the victim sleeps on I/O load-
ing dir1/iotrap, the attacker runs and notices the
updated access time on dir1/sentry, the attacker
switches activedir to point to dir2, and the victim
completes the open(2) successfully. This process repeats
for the victim’s remaining system calls, and the attacker
fools the victim into opening a protected ﬁle.
We implemented and tested this simple attack on sev-
eral different machines and found that the attack works
but is extremely sensitive to the target machine’s state.
For example, if the directories used in the attack happen
to be arranged close together on disk, then the attack will
often fail. In the next section, we develop a robust ver-
sion of this attack that succeeds with high probability on
all the machines we tested.
5 Full Attack
In this section, we increase the power and reliability of
our attack. The full attack is robust, succeeds with high
probability, can defeat the k-Race algorithm with over
100 rounds of strengthening, and doesn’t depend on the
attacker’s ability to perfectly ﬂush the kernel ﬁlesystem
cache.
USENIX Association
14th USENIX Security Symposium
307
sentry
relative link
chain6/d/d/d/···/d /lnk
absolute link
chain5/d/d/d/···/d /lnk
absolute link
chain4/d/d/d/···/d /lnk
absolute link
chain3/d/d/d/···/d /lnk
absolute link
chain2/d/d/d/···/d /lnk
absolute link
chain1/d/d/d/···/d /lnk
absolute link
chain0/d/d/d/···/d /lnk
absolute link
relative link to target file
exit
Figure 6: Malicious directory structure to force the vic-
tim to sleep on I/O with extremely high probability and
hence enable the attacker to win a single race. We call
this structure a maze. We place an arrow between a sym-
bolic link and the target it references in a dotted box.
I/O ampliﬁcation. We develop a tool called a maze to
slow down the I/O operations of the victim and hence
increase the chances that it will sleep. We start by cre-
ating a deep tree of nested directories. For example, in-
side dir0, the attacker creates the tree dir/dir/..
./dir/lnk instead of just dir/lnk. We call such
a deep nested directory structure a chain. The link
sentry should now point to dir/dir/.../dir,
and hence the attacker still runs the victim with the ar-
gument activedir/sentry/lnk. The victim will
be forced to sleep on I/O if at least one of the directories
in the chain is not currently in the buffer cache. Most
Unix systems impose a limit on the length of ﬁlename
paths, known as MAXPATHLEN, and this limits the depth
of chains created by the attacker. Common values for
MAXPATHLEN are 1024 and 4096 characters. Even with
these limits an attacker can create a directory tree over
500 directories deep, but the attacker can do even more.
MAXPATHLEN only limits the number of path ele-
ments that may be speciﬁed in a single system call, it
does not limit the number of directory elements that
may be traversed during a single name lookup. An at-
tacker can use symbolic links to connect two chains to-
gether as follows. First, the attacker creates a chain
procedure make maze(exit target, nchains, depth)
link exit to exit target
let top = current directory()
let target = top/exit
for i = 0 to nchains - 1
mkdir chaini
cd chaini
for j = 0 to depth
mkdir d
cd d
link lnk to target
let target = current directory()
cd top
link sentry to target
Figure 7: Algorithm to create the directory structure in
Figure 6.
chain0/dir/dir/.../dir/lnk, as above. Then
she creates another chain chain1/dir/dir/.../
dir/lnk, where the symbolic link at the bottom of this
chain points to chain0/dir/dir/.../dir. The
sentry link should now point to chain1/dir/dir/
.../dir. Now the attacker can invoke the victim, pass-
ing it the path activedir/sentry/lnk/lnk.
If
each chain is N directories deep, then the victim will
need to traverse 2N directories to resolve this ﬁlename.
This technique can be extended to create a maze of up
to C chains, chainC − 1, chainC − 2, ..., chain0,
where each chain has at its bottom a symbolic link point-
ing to the bottom of the next chain. Figure 6 shows one
such maze of directories in its entirety. For simplicity,
we create a ﬁnal link, exit, pointing to the target ﬁle, at
then end of the maze. We also use shorter names for the