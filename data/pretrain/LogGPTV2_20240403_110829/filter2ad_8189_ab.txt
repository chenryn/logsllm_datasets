        printf("%p\n", p);
        write(1, "BEFORE MALLOC #3\n", 17);
        p = malloc(1024);
        write(1, "AFTER MALLOC #3\n", 16);
        printf("%p\n", p);
        getchar();
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 4-main.c -o 4
    julien@holberton:~/holberton/w/hackthevm3$ strace ./4 
    execve("./4", ["./4"], [/* 61 vars */]) = 0
    ...
    write(1, "BEFORE MALLOC #0\n", 17BEFORE MALLOC #0
    )      = 17
    brk(0)                                  = 0x1314000
    brk(0x1335000)                          = 0x1335000
    write(1, "AFTER MALLOC #0\n", 16AFTER MALLOC #0
    )       = 16
    ...
    write(1, "0x1314010\n", 100x1314010
    )             = 10
    write(1, "BEFORE MALLOC #1\n", 17BEFORE MALLOC #1
    )      = 17
    write(1, "AFTER MALLOC #1\n", 16AFTER MALLOC #1
    )       = 16
    write(1, "0x1314420\n", 100x1314420
    )             = 10
    write(1, "BEFORE MALLOC #2\n", 17BEFORE MALLOC #2
    )      = 17
    write(1, "AFTER MALLOC #2\n", 16AFTER MALLOC #2
    )       = 16
    write(1, "0x1314830\n", 100x1314830
    )             = 10
    write(1, "BEFORE MALLOC #3\n", 17BEFORE MALLOC #3
    )      = 17
    write(1, "AFTER MALLOC #3\n", 16AFTER MALLOC #3
    )       = 16
    write(1, "0x1314c40\n", 100x1314c40
    )             = 10
    ...
    read(0,
->不是每次调用malloc，都会调用到brk。
首次调用malloc时，malloc会为程序创建一个新空间（堆）（通过增加程序间断点的位置）。之后调用malloc，malloc会使用相同的空间为我们的程序提供“新的”内存块。
那些“新的”内存块是以前使用brk分配的内存的一部分。这样，malloc就不必每次调用它时都使用系统调用（brk），运行速度更快。它还允许malloc和free优化内存的使用。
让我们确保只有唯一的一个堆，由首次调用brk分配：
    julien@holberton:/proc/4014$ ps aux | grep \ \./4$
    julien     4169  0.0  0.0   4748   688 pts/9    S+   13:33   0:00 strace ./4
    julien     4172  0.0  0.0   4336   656 pts/9    S+   13:33   0:00 ./4
    julien@holberton:/proc/4014$ cd /proc/4172
    julien@holberton:/proc/4172$ cat maps
    00400000-00401000 r-xp 00000000 08:01 176973                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/4
    00600000-00601000 r--p 00000000 08:01 176973                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/4
    00601000-00602000 rw-p 00001000 08:01 176973                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/4
    01314000-01335000 rw-p 00000000 00:00 0                                  [heap]
    7f4a3f2c4000-7f4a3f47e000 r-xp 00000000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f4a3f47e000-7f4a3f67e000 ---p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f4a3f67e000-7f4a3f682000 r--p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f4a3f682000-7f4a3f684000 rw-p 001be000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f4a3f684000-7f4a3f689000 rw-p 00000000 00:00 0 
    7f4a3f689000-7f4a3f6ac000 r-xp 00000000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f4a3f890000-7f4a3f893000 rw-p 00000000 00:00 0 
    7f4a3f8a7000-7f4a3f8ab000 rw-p 00000000 00:00 0 
    7f4a3f8ab000-7f4a3f8ac000 r--p 00022000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f4a3f8ac000-7f4a3f8ad000 rw-p 00023000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f4a3f8ad000-7f4a3f8ae000 rw-p 00000000 00:00 0 
    7ffd1ba73000-7ffd1ba94000 rw-p 00000000 00:00 0                          [stack]
    7ffd1bbed000-7ffd1bbef000 r--p 00000000 00:00 0                          [vvar]
    7ffd1bbef000-7ffd1bbf1000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
    julien@holberton:/proc/4172$
->我们只有一个[heap]，地址符合sbrk返回的地址：0x1314000和0x1335000
## 简易malloc实现
基于前面所述，并假设我们不需要释放任何内存，现在可以编写一个简易的malloc，它将在每次调用时移动程序间断点。
    #include 
    #include 
    /**                                                                                            
     * malloc - naive version of malloc: dynamically allocates memory on the heap using sbrk                         
     * @size: number of bytes to allocate                                                          
     *                                                                                             
     * Return: the memory address newly allocated, or NULL on error                                
     *                                                                                             
     * Note: don't do this at home :)                                                              
     */
    void *malloc(size_t size)
    {
        void *previous_break;
        previous_break = sbrk(size);
        /* check for error */
        if (previous_break == (void *) -1)
        {
            /* on error malloc returns NULL */
            return (NULL);
        }
        return (previous_break);
    }
## 消失的0x10字节
如果我们查看前一个程序（4-main.c）的输出，将会发现首次调用malloc返回的地址不在堆的最开始处，而是在0x10字节之后：0x1314010 VS
0x1314000。另外，当我们第二次调用malloc（1024）时，返回地址应该是0x1314010（首次调用malloc的返回值）+
1024（或十六进制的0x400，因为首次调用malloc请求分配1024字节）=0x1318010。
但第二次调用malloc的返回值是0x1314420。 我们又丢了0x10字节！后续调用malloc也是如此。  
让我们看一下那些“丢失的”0x10字节内存空间中的内容以及其是否保持不变（5-main.c）：
    #include 
    #include 
    #include 
    /**                                                                                            
     * pmem - print mem                                                                            
     * @p: memory address to start printing from                                                   
     * @bytes: number of bytes to print                                                            
     *                                                                                             
     * Return: nothing                                                                             
     */
    void pmem(void *p, unsigned int bytes)
    {
        unsigned char *ptr;
        unsigned int i;
        ptr = (unsigned char *)p;
        for (i = 0; i 
    #include 
    #include 
    /**                                                                                            
     * pmem - print mem                                                                            
     * @p: memory address to start printing from                                                   
     * @bytes: number of bytes to print                                                            
     *                                                                                             
     * Return: nothing                                                                             
     */
    void pmem(void *p, unsigned int bytes)
    {
        unsigned char *ptr;
        unsigned int i;
        ptr = (unsigned char *)p;
        for (i = 0; i < bytes; i++)
        {
            if (i != 0)
            {
                printf(" ");
            }
            printf("%02x", *(ptr + i));
        }
        printf("\n");
    }
    /**
     * main - using the 0x10 bytes to jump to next malloc'ed chunks
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        void *p;
        int i;
        void *heap_start;
        size_t size_of_the_block;
        heap_start = sbrk(0);
        write(1, "START\n", 6);
        for (i = 0; i < 10; i++)
        {