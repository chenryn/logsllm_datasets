defer un(trace("a"))
fmt.Println("in a")
}
func b() {
defer un(trace("b"))
fmt.Println("in b")
a()
}
func main() {
b()
}
prints
会打印
entering: b
in b
entering: a
in a
leaving: a
leaving: b
For programmers accustomed to block-level resource management from other languages,
defer may seem peculiar, but its most interesting and powerful applications come precisely
from the fact that it's not block-based but function-based. In the section on panic and recover
we'll see another example of its possibilities.
对于习惯其它语言中块级资源管理的程序员，defer 似乎有点怪异， 但它最有趣而强大的应用
恰恰来自于其基于函数而非块的特点。在 panic 和 recover 这两节中，我们将看到关于它可能
性的其它例子。
37
数据
Data
数据
Allocation with new
new 分配
Go has two allocation primitives, the built-in functions new and make. They do different
things and apply to different types, which can be confusing, but the rules are simple. Let's
talk about new first. It's a built-in function that allocates memory, but unlike its namesakes in
some other languages it does not initialize the memory, it only zeros it. That is, new(T)
allocates zeroed storage for a new item of type T and returns its address, a value of type
*T . In Go terminology, it returns a pointer to a newly allocated zero value of type T.
Go 提供了两种分配原语，即内建函数 new 和 make。 它们所做的事情不同，所应用的类型
也不同。它们可能会引起混淆，但规则却很简单。 让我们先来看看 new。这是个用来分配内
存的内建函数， 但与其它语言中的同名函数不同，它不会初始化内存，只会将内存置零。 也
就是说，new(T) 会为类型为 T 的新项分配已置零的内存空间， 并返回它的地址，也就是一个
类型为 *T 的值。用 Go 的术语来说，它返回一个指针， 该指针指向新分配的，类型为 T 的
零值。
Since the memory returned by new is zeroed, it's helpful to arrange when designing your
data structures that the zero value of each type can be used without further initialization.
This means a user of the data structure can create one with new and get right to work. For
example, the documentation for bytes.Buffer states that "the zero value for Buffer is an
empty buffer ready to use." Similarly, sync.Mutex does not have an explicit constructor or Init
method. Instead, the zero value for a sync.Mutex is defined to be an unlocked mutex.
既然 new 返回的内存已置零，那么当你设计数据结构时， 每种类型的零值就不必进一步初始
化了，这意味着该数据结构的使用者只需用 new 创建一个新的对象就能正常工作。例如，
bytes.Buffer 的文档中提到 “零值的 Buffer 就是已准备就绪的缓冲区。" 同样，sync.Mutex 并
没有显式的构造函数或 Init 方法， 而是零值的 sync.Mutex 就已经被定义为已解锁的互斥锁
了。
The zero-value-is-useful property works transitively. Consider this type declaration.
“零值属性” 可以带来各种好处。考虑以下类型声明。
38
数据
type SyncedBuffer struct {
lock sync.Mutex
buffer bytes.Buffer
}
Values of type SyncedBuffer are also ready to use immediately upon allocation or just
declaration. In the next snippet, both p and v will work correctly without further arrangement.
SyncedBuffer 类型的值也是在声明时就分配好内存就绪了。后续代码中， p 和 v 无需进一步
处理即可正确工作。
p := new(SyncedBuffer) // type *SyncedBuffer
var v SyncedBuffer // type SyncedBuffer
Constructors and composite literals
构造函数与复合字面
Sometimes the zero value isn't good enough and an initializing constructor is necessary, as
in this example derived from package os.
有时零值还不够好，这时就需要一个初始化构造函数，如来自 os 包中的这段代码所示。
func NewFile(fd int, name string) *File {
if fd < 0 {
return nil
}
f := new(File)
f.fd = fd
f.name = name
f.dirinfo = nil
f.nepipe = 0
return f
}
There's a lot of boiler plate in there. We can simplify it using a composite literal, which is an
expression that creates a new instance each time it is evaluated.
这里显得代码过于冗长。我们可通过复合字面来简化它， 该表达式在每次求值时都会创建新
的实例。
39
数据
func NewFile(fd int, name string) *File {
if fd < 0 {
return nil
}
f := File{fd, name, nil, 0}
return &f
}
Note that, unlike in C, it's perfectly OK to return the address of a local variable; the storage
associated with the variable survives after the function returns. In fact, taking the address of
a composite literal allocates a fresh instance each time it is evaluated, so we can combine
these last two lines.
请注意，返回一个局部变量的地址完全没有问题，这点与 C 不同。该局部变量对应的数据 在
函数返回后依然有效。实际上，每当获取一个复合字面的地址时，都将为一个新的实例分配
内存， 因此我们可以将上面的最后两行代码合并：
return &File{fd, name, nil, 0}
The fields of a composite literal are laid out in order and must all be present. However, by
labeling the elements explicitly as field:value pairs, the initializers can appear in any order,
with the missing ones left as their respective zero values. Thus we could say
复合字面的字段必须按顺序全部列出。但如果以 字段: 值 对的形式明确地标出元素，初始化
字段时就可以按任何顺序出现，未给出的字段值将赋予零值。 因此，我们可以用如下形式：
return &File{fd: fd, name: name}
As a limiting case, if a composite literal contains no fields at all, it creates a zero value for
the type. The expressions new(File) and &File{} are equivalent.
少数情况下，若复合字面不包括任何字段，它将创建该类型的零值。表达式 new(File) 和
&File{} 是等价的。
Composite literals can also be created for arrays, slices, and maps, with the field labels
being indices or map keys as appropriate. In these examples, the initializations work
regardless of the values of Enone, Eio, and Einval, as long as they are distinct.
复合字面同样可用于创建数组、切片以及映射，字段标签是索引还是映射键则视情况而定。
在下例初始化过程中，无论 Enone、Eio 和 Einval 的值是什么，只要它们的标签不同就行。
40
数据
a := [...]string {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
s := []string {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
m := map[int]string{Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
Allocation with make
make 分配
Back to allocation. The built-in function make(T, args) serves a purpose different from
new(T). It creates slices, maps, and channels only, and it returns an initialized (not zeroed)
value of type T (not *T ). The reason for the distinction is that these three types represent,
under the covers, references to data structures that must be initialized before use. A slice,
for example, is a three-item descriptor containing a pointer to the data (inside an array), the
length, and the capacity, and until those items are initialized, the slice is nil. For slices, maps,
and channels, make initializes the internal data structure and prepares the value for use. For
instance,
再回到内存分配上来。内建函数 make(T, args) 的目的不同于 new(T)。它只用于创建切片、
映射和信道，并返回类型为 T（而非 ）的一个已初始化 （而非置零）的值。 出现这种用
*T
差异的原因在于，这三种类型本质上为引用数据类型，它们在使用前必须初始化。 例如，切
片是一个具有三项内容的描述符，包含一个指向（数组内部）数据的指针、长度以及容量，
在这三项被初始化之前，该切片为 nil。对于切片、映射和信道，make 用于初始化其内部的
数据结构并准备好将要使用的值。例如，
make([]int, 10, 100)
allocates an array of 100 ints and then creates a slice structure with length 10 and a capacity
of 100 pointing at the first 10 elements of the array. (When making a slice, the capacity can
be omitted; see the section on slices for more information.) In contrast, new([]int) returns a
pointer to a newly allocated, zeroed slice structure, that is, a pointer to a nil slice value.
会分配一个具有 100 个 int 的数组空间，接着创建一个长度为 10， 容量为 100 并指向该数组
中前 10 个元素的切片结构。（生成切片时，其容量可以省略，更多信息见切片一节。） 与
此相反，new([]int) 会返回一个指向新分配的，已置零的切片结构， 即一个指向 nil 切片值的
指针。
These examples illustrate the difference between new and make.
下面的例子阐明了 new 和 make 之间的区别：
41
数据
var p *[]int = new([]int) // allocates slice structure; *p == nil; rarely useful
var v []int = make([]int, 100) // the slice v now refers to a new array of 100 ints
// Unnecessarily complex:
var p *[]int = new([]int)
*p = make([]int, 100, 100)
// Idiomatic:
v := make([]int, 100)
var p *[]int = new([]int) // 分配切片结构；*p == nil；基本没用
var v []int = make([]int, 100) // 切片 v 现在引用了一个具有 100 个 int 元素的新数组
// 没必要的复杂：
var p *[]int = new([]int)
*p = make([]int, 100, 100)
// 习惯用法：
v := make([]int, 100)
Remember that make applies only to maps, slices and channels and does not return a
pointer. To obtain an explicit pointer allocate with new or take the address of a variable
explicitly.
请记住，make 只适用于映射、切片和信道且不返回指针。若要获得明确的指针， 请使用
new 分配内存。
Arrays
数组
Arrays are useful when planning the detailed layout of memory and sometimes can help
avoid allocation, but primarily they are a building block for slices, the subject of the next
section. To lay the foundation for that topic, here are a few words about arrays.
在详细规划内存布局时，数组是非常有用的，有时还能避免过多的内存分配， 但它们主要用
作切片的构件。这是下一节的主题了，不过要先说上几句来为它做铺垫。
There are major differences between the ways arrays work in Go and C. In Go,
Arrays are values. Assigning one array to another copies all the elements.
In particular, if you pass an array to a function, it will receive a copy of the array, not a
pointer to it.
The size of an array is part of its type. The types [10]int and [20]int are distinct.
42
数据
以下为数组在 Go 和 C 中的主要区别。在 Go 中，
数组是值。将一个数组赋予另一个数组会复制其所有元素。
特别地，若将某个数组传入某个函数，它将接收到该数组的一份副本而非指针。
数组的大小是其类型的一部分。类型 [10]int 和 [20]int 是不同的。
The value property can be useful but also expensive; if you want C-like behavior and
efficiency, you can pass a pointer to the array.
数组为值的属性很有用，但代价高昂；若你想要 C 那样的行为和效率，你可以传递一个指向
该数组的指针。
func Sum(a *[3]float64) (sum float64) {
for _, v := range *a {
sum += v
}
return
}
array := [...]float64{7.0, 8.5, 9.1}
x := Sum(&array) // Note the explicit address-of operator
func Sum(a *[3]float64) (sum float64) {
for _, v := range *a {
sum += v
}
return
}
array := [...]float64{7.0, 8.5, 9.1}
x := Sum(&array) // 注意显式的取址操作
But even this style isn't idiomatic Go. Use slices instead.
但这并不是 Go 的习惯用法，切片才是。
Slices
切片
Slices wrap arrays to give a more general, powerful, and convenient interface to sequences
of data. Except for items with explicit dimension such as transformation matrices, most array
programming in Go is done with slices rather than simple arrays.
切片通过对数组进行封装，为数据序列提供了更通用、强大而方便的接口。 除了矩阵变换这
类需要明确维度的情况外，Go 中的大部分数组编程都是通过切片来完成的。
43
数据
Slices hold references to an underlying array, and if you assign one slice to another, both
refer to the same array. If a function takes a slice argument, changes it makes to the
elements of the slice will be visible to the caller, analogous to passing a pointer to the
underlying array. A Read function can therefore accept a slice argument rather than a
pointer and a count; the length within the slice sets an upper limit of how much data to read.
Here is the signature of the Read method of the File type in package os:
切片保存了对底层数组的引用，若你将某个切片赋予另一个切片，它们会引用同一个数组。
若某个函数将一个切片作为参数传入，则它对该切片元素的修改对调用者而言同样可见， 这
可以理解为传递了底层数组的指针。因此，Read 函数可接受一个切片实参 而非一个指针和
一个计数；切片的长度决定了可读取数据的上限。以下为 os 包中 File 类型的 Read 方法签
名:
func (file *File) Read(buf []byte) (n int, err error)
The method returns the number of bytes read and an error value, if any. To read into the first
32 bytes of a larger buffer buf, slice (here used as a verb) the buffer.
该方法返回读取的字节数和一个错误值（若有的话）。若要从更大的缓冲区 b 中读取前 32 个
字节，只需对其进行切片即可。
n, err := f.Read(buf[0:32])
Such slicing is common and efficient. In fact, leaving efficiency aside for the moment, the
following snippet would also read the first 32 bytes of the buffer.
这种切片的方法常用且高效。若不谈效率，以下片段同样能读取该缓冲区的前 32 个字节。
var n int
var err error
for i := 0; i < 32; i++ {
nbytes, e := f.Read(buf[i:i+1]) // Read one byte.
if nbytes == 0 || e != nil {
err = e
break
}
n += nbytes
}
44
数据
var n int
var err error