[`sec=flavors`{.literal}]{.term}
:   用于访问挂载导出上文件的安全类别。[*[flavors]{.replaceable}*]{.emphasis}
    值是一个冒号分隔的、由一个或多个安全类别组成的列表。
    默认情况下，客户端会尝试查找客户端和服务器都支持的安全类别。如果服务器不支持任何选定的类别，挂载操作将失败。
    可用类别：
    ::: itemizedlist
    -   `sec=sys`{.literal} 使用本地 UNIX UID 和 GID。它们使用
        `AUTH_SYS`{.literal} 验证 NFS 操作。
    -   `sec=krb5`{.literal} 使用 Kerberos V5 ,而不是本地 UNIX UID 和
        GID 来验证用户。
    -   `sec=krb5i`{.literal} 使用 Kerberos V5
        进行用户身份验证，并使用安全校验和执行 NFS
        操作的完整性检查，以防止数据被篡改。
    -   `sec=krb5p`{.literal} 使用 Kerberos V5
        进行用户身份验证、完整性检查，并加密 NFS
        流量以防止流量嗅探。这是最安全的设置，但它也会涉及最大的性能开销。
    :::
[`tcp`{.literal}]{.term}
:   指示 NFS 挂载使用 TCP 协议。
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
-   `nfs(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   [Linux NFS
    wiki](https://linux-nfs.org/wiki/index.php/Main_Page){.link}
-   [永久挂载 NFS
    共享](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems/index#assembly_persistently-mounting-file-systems_managing-file-systems){.link}
    。
-   [按需挂载 NFS
    共享](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems/index#assembly_mounting-file-systems-on-demand_managing-file-systems){.link}
    。
:::
:::
:::
[]{#exporting-nfs-shares_managing-file-systems.html}
::: chapter
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#exporting-nfs-shares_managing-file-systems}第 4 章 导出 NFS 共享 {.title}
:::
作为系统管理员，您可以使用 NFS 服务器来通过网络共享系统上的目录。
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#introduction-to-nfs_exporting-nfs-shares}NFS 简介 {.title}
:::
这部分解释了 NFS 服务的基本概念。
网络文件系统(NFS)允许远程主机通过网络挂载文件系统，并像它们挂载在本地那样与这些文件系统进行交互。这可让您将资源整合到网络的集中服务器中。
NFS 服务器参考 `/etc/exports`{.literal}
配置文件，来确定是否允许客户端访问任何导出的文件系统。一旦被验证，所有文件和目录操作都对用户有效。
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#supported-nfs-versions_exporting-nfs-shares}支持的 NFS 版本 {.title}
:::
这部分列出了 Red Hat Enterprise Linux 支持 NFS 版本及其特性。
目前，Red Hat Enterprise Linux 9 支持以下 NFS 主版本：
::: itemizedlist
-   与 NFSv2 相比，NFS 版本
    3（NFSv3）支持安全异步写入操作，并在处理错误时更可靠。它也支持 64
    位文件大小和偏移，允许客户端访问超过 2 GB 文件数据。
-   NFS 版本 4(NFSv4)通过防火墙，并在 Internet 上工作，不再需要
    `rpcbind`{.literal}
    服务，支持访问控制列表(ACL)，并且使用有状态操作。
:::
红帽不再支持 NFS 版本 2(NFSv2)。
### []{#exporting-nfs-shares_managing-file-systems.html#_default_nfs_version_2}默认 NFS 版本
Red Hat Enterprise Linux 9 中的默认 NFS 版本为 4.2。NFS
客户端默认试图使用 NFSv4.2 挂载，并在服务器不支持 NFSv4.2 时回退到
NFSv4.1。之后挂载会返回 NFSv4.0，然后回退到 NFSv3。
### []{#exporting-nfs-shares_managing-file-systems.html#_features_of_minor_nfs_versions_2}次要 NFS 版本的特性
以下是 Red Hat Enterprise Linux 9 中的 NFSv4.2 的功能：
::: variablelist
[服务器端复制]{.term}
:   使用 `copy_file_range()`{.literal} 系统调用，可以使 NFS
    客户端高效地复制数据，而不浪费网络资源。
[稀疏文件]{.term}
:   使文件有一个或者多个
    [*洞（hole）*]{.emphasis}，它们是不分配或者未初始化的数据块，只由 0
    组成。NFSv4.2 中的 `lseek()`{.literal} 操作支持
    `seek_hole()`{.literal} 和
    `seek_data()`{.literal}，这使得应用程序能够在稀疏文件中映射漏洞的位置。
[保留空间]{.term}
:   允许存储服务器保留空闲空间，这会防止服务器耗尽空间。NFSv4.2 支持
    `allocate()`{.literal} 操作来保留空间，支持 `deallocate()`{.literal}
    操作来释放空间，支持 `fallocate()`{.literal}
    操作来预分配和释放文件中的空间。
[标记的 NFS]{.term}
:   强制实施数据访问权限，并为 NFS
    文件系统上的各个文件在客户端和服务器之间启用 SELinux 标签。
[布局增强]{.term}
:   提供 `layoutstats()`{.literal} 操作，它可让一些并行
    NFS(pNFS)服务器收集更好的性能统计数据。
:::
以下是 NFSv4.1 的功能：
::: itemizedlist
-   增强性能和网络安全，同时包括对 pNFS 的客户端支持。
-   对于回调不再需要单独的 TCP 连接，回调允许 NFS
    服务器在无法联系客户端的情况下授予委托：例如，当 NAT
    或防火墙干扰时。
-   只提供一次语义（除重启操作外），防止出现先前的问题，即如果回复丢失，且操作被发送了两次，则某些操作有时会返回不准确的结果。
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#the-tcp-and-udp-protocols-in-nfsv3-and-nfsv4_exporting-nfs-shares}NFSv3 和 NFSv4 中的 TCP 和 UDP 协议 {.title}
:::
NFSv4 需要通过 IP 网络运行的传输控制协议（TCP）。
NFSv3 还可以使用早期 Red Hat Enterprise Linux
版本中的用户数据报协议(UDP)。在 Red Hat Enterprise Linux 9
中不再支持通过 UDP 的 NFS。默认情况下，UDP 在 NFS 服务器中被禁用。
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#services-required-by-nfs_exporting-nfs-shares}NFS 所需的服务 {.title}
:::
这部分列出了运行 NFS 服务器或挂载 NFS 共享所需的系统服务。Red Hat
Enterprise Linux 会自动启动这些服务。
Red Hat Enterprise Linux 使用内核级支持和服务流程组合提供 NFS
文件共享。所有 NFS
版本都依赖于客户端和服务器间的远程过程调用（RPC）。要共享或者挂载 NFS
文件系统，下列服务根据所使用的 NFS 版本而定：
::: variablelist
[`nfsd`{.literal}]{.term}
:   为共享 NFS 文件系统请求的 NFS 服务器内核模块。
[`rpcbind`{.literal}]{.term}
:   接受本地 RPC
    服务的端口保留。这些端口随后可用（或公布出去），这样相应的远程 RPC
    服务可以访问它们。`rpcbind`{.literal} 服务响应对 RPC
    服务的请求，并建立到请求的 RPC 服务的连接。这不能与 NFSv4 一起使用。
[`rpc.mountd`{.literal}]{.term}
:   NFS 服务器使用这个进程来处理来自 NFSv3 客户端的 `MOUNT`{.literal}
    请求。它检查所请求的 NFS 共享是否目前由 NFS
    服务器导出，并且允许客户端访问它。如果允许挂载请求，`nfs-mountd`{.literal}
    服务会回复 Success 状态，并将此 NFS 共享的文件句柄返回给 NFS
    客户端。
[`rpc.nfsd`{.literal}]{.term}
:   这个过程启用了要定义的服务器公告的显式 NFS 版本和协议。它与 Linux
    内核一起使用，来满足 NFS 客户端的动态需求，例如，在每次连接 NFS
    客户端时提供服务器线程。这个进程对应于 `nfs-server`{.literal} 服务。
[`lockd`{.literal}]{.term}
:   这是一个在客户端和服务器中运行的内核线程。它实现网络锁管理器(NLM)协议，它允许
    NFSv3 客户端锁住服务器上的文件。每当运行 NFS 服务器以及挂载 NFS
    文件系统时，它会自动启动。
[`rpc.statd`{.literal}]{.term}
:   这个进程实现网络状态监控器(NSM)RPC 协议，该协议可在 NFS
    服务器没有正常关机而重启时通知 NFS 客户端。`rpc-statd`{.literal}
    服务由 `nfs-server`{.literal} 服务自动启动，不需要用户配置。这不能与
    NFSv4 一起使用。
[`rpc.rquotad`{.literal}]{.term}
:   这个过程为远程用户提供用户配额信息。启动 `nfs-server`{.literal}
    时，用户也必须启动 `quota-rpc`{.literal} 软件包提供的
    `rpc-rquotad`{.literal} 服务。
[`rpc.idmapd`{.literal}]{.term}
:   此进程为 NFSv4 客户端和服务器提供上行调用，这些调用在线上 NFSv4
    名称（`user@domain`{.literal}形式的字符串）和本地 UID 和 GID
    之间进行映射。要使 `idmapd`{.literal} 与 NFSv4 正常工作，必须配置
    `/etc/idmapd.conf`{.literal} 文件。至少应指定 `Domain`{.literal}
    参数，该参数定义 NFSv4 映射域。如果 NFSv4 映射域与 DNS
    域名相同，可以跳过这个参数。客户端和服务器必须同意 NFSv4
    映射域才能使 ID 映射正常工作。
    只有 NFSv4 服务器使用 `rpc.idmapd`{.literal}，它由
    `nfs-idmapd`{.literal} 服务启动。NFSv4 客户端使用基于密钥环的
    `nfsidmap`{.literal} 工具，内核按需调用它来执行 ID 映射。如果
    `nfsidmap`{.literal} 有问题，客户端将退回使用
    `rpc.idmapd`{.literal}。
:::
### []{#exporting-nfs-shares_managing-file-systems.html#_the_rpc_services_with_nfsv4_2}NFSv4 的 RPC 服务
挂载和锁定协议已合并到 NFSv4 协议中。该服务器还会监听已知的 TCP 端口
2049。因此，NFSv4 不需要与 `rpcbind`{.literal}、`lockd`{.literal} 和
`rpc-statd`{.literal} 服务进行交互。NFS 服务器上仍然需要
`nfs-mountd`{.literal} 服务来设置导出，但不涉及任何线上操作。
::: itemizedlist
**其他资源**
-   [仅配置无 `rpcbind`{.literal} 的 NFSv4
    服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems/index#nfs-and-rpcbind_exporting-nfs-shares){.link}
    。
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#nfs-host-name-formats_exporting-nfs-shares}NFS 主机名格式 {.title}
:::
这部分论述了在挂载或导出 NFS 共享时用来指定主机的不同格式。
您可以使用以下格式指定主机：
::: variablelist
[单台机器]{.term}
:   以下任意一种：
    ::: itemizedlist
    -   完全限定域名（可由服务器解析）
    -   主机名（可由服务器解析）
    -   IP 地址。
    :::
:::
::: variablelist
[IP 网络]{.term}
:   以下格式之一有效：
    ::: itemizedlist
    -   [*[`a.b.c.d/z`{.literal}]{.replaceable}*]{.emphasis} ，其中
        [*[`a.b.c.d`{.literal}]{.replaceable}*]{.emphasis}
        是网络，[*[`z`{.literal}]{.replaceable}*]{.emphasis}
        是子网掩码中的位数，例如 `192.168.0.0/24`{.literal}。
    -   [*[`a.b.c.d/netmask`{.literal}]{.replaceable}*]{.emphasis}，其中
        [*[`a.b.c.d`{.literal}]{.replaceable}*]{.emphasis}
        是网络，[*[`netmask`{.literal}]{.replaceable}*]{.emphasis}
        是子网掩码；例如 `192.168.100.8/255.255.255.0`{.literal}。
    :::
[Netgroups]{.term}
:   `@group-name`{.literal} 格式，其中
    [*[`group-name`{.literal}]{.replaceable}*]{.emphasis} 是 NIS
    netgroup 名称。
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#nfs-server-configuration_exporting-nfs-shares}NFS 服务器配置 {.title}
:::
这部分论述了在 NFS 服务器中配置导出的语法和选项：
::: itemizedlist
-   手动编辑 `/etc/exports`{.literal} 配置文件
-   在命令行上使用 `exportfs`{.literal} 工具
:::
::: section
::: titlepage
## []{#exporting-nfs-shares_managing-file-systems.html#the-etc-exports-configuration-file_exporting-nfs-shares}/etc/exports 配置文件 {.title}
:::
`/etc/exports`{.literal}
文件控制哪些文件系统被导出到远程主机，并指定选项。它遵循以下语法规则：
::: itemizedlist
-   空白行将被忽略。
-   要添加注释，以井号(`#`{.literal})开始一行。
-   您可以使用反斜杠(`\`{.literal})换行长行。
-   每个导出的文件系统都应该独立。
-   所有在导出的文件系统后放置的授权主机列表都必须用空格分开。
-   每个主机的选项必须在主机标识符后直接放在括号中，没有空格分离主机和第一个括号。
:::
#### []{#exporting-nfs-shares_managing-file-systems.html#_export_entry}导出条目
导出的文件系统的每个条目都有以下结构：
``` screen
export host(options)
```
您还可以指定多个主机以及每个主机的特定选项。要做到这一点，在同一行中列出主机列表（以空格分隔），每个主机名带有其相关的选项（在括号中），如下所示：
``` screen
export host1(options1) host2(options2) host3(options3)
```
在这个结构中：
::: variablelist
[[*[export]{.replaceable}*]{.emphasis}]{.term}
:   导出的目录
[[*[主机]{.replaceable}*]{.emphasis}]{.term}
:   导出要共享的主机或网络
[[*[选项]{.replaceable}*]{.emphasis}]{.term}
:   用于主机的选项
:::
::: example
[]{#exporting-nfs-shares_managing-file-systems.html#idm139895587908592}
**例 4.1. 一个简单的 /etc/exports 文件**
::: example-contents