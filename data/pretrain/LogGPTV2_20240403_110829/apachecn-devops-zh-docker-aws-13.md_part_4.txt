  aws cloudformation deploy --template-file stack.yml --stack-name todobackend-$* \
    --parameter-overrides $$(cat $*.json | jq -r '.Parameters|to_entries[]|.key+"="+.value') \
    --capabilities CAPABILITY_NAMED_IAM
```
在前面的示例中，每当您执行`make deploy`命令时，任务名称中的`%`字符都会捕获一个通配符文本值。例如，如果您运行 make `deploy` / `dev`，则`%`字符将捕获`dev`，如果您运行 make `deploy` / `prod`，则捕获的值将为`prod`。然后，您可以通过使用`$*`变量来引用捕获的值，您可以看到我们已经在栈名称(`todobackend-$*`，使用前面的示例，它将扩展到`todobackend-dev`和`todobackend-prod`)中，以及在 cat`dev.json`或`prod.json`文件的命令中进行了替换。请注意，因为我们已经在本书中命名了我们的栈`todobackend`，所以这个命令对我们来说不太适用，但是如果您将您的栈重命名为`todobackend-dev`，这个命令将使手动部署到给定的环境变得更加容易。
在继续之前，您需要添加新的`dev.json`文件，提交并将您的更改推送到源 Git 存储库，因为我们很快会将`todobackend-aws`存储库添加为您的 CodePipeline 管道中的另一个源。
# 为云信息部署创建 IAM 角色
当您使用代码管道来部署您的云信息栈时，代码管道要求您指定一个将由云信息服务承担的 IAM 角色来部署您的栈。cloud information 支持指定 cloud information 服务将承担的 IAM 角色的能力，这是一项强大的功能，允许更高级的配置场景，例如从中央构建帐户进行跨帐户部署。该角色必须将 CloudFormation 服务指定为可以承担该角色的受信任实体；因此，您通常不能使用为人工访问创建的管理角色，例如您在本书中一直使用的管理角色。
要创建所需的角色，请导航到 IAM 控制台，从左侧菜单中选择角色，然后单击创建角色按钮。在选择服务部分，选择云信息，然后单击下一步:权限继续。在“附加权限策略”屏幕上，您可以创建或选择具有创建栈中的资源所需的各种权限的适当策略。为了简单起见，我将只选择管理员访问策略。但是，在现实场景中，您应该创建或选择一个策略，该策略只授予创建云信息栈所需的特定权限。点击下一步:审核按钮后，指定`cloudformation-deploy`的角色名称，点击创建角色按钮创建新角色:
![](img/2e5c6f9d-08b7-4abf-9aa4-8ae01e773f32.png)
# 向代码管道添加部署存储库
现在，您已经为 CodePipeline 准备好了适当的栈配置文件和 IAM 部署角色，您可以开始修改您的管道，以支持向您的目标 AWS 环境连续交付应用更改。您需要执行的第一个修改是将 todo back and-AWS 存储库作为另一个源操作添加到您的管道的源阶段。为此，请导航到管道的详细信息视图，然后单击“编辑”按钮。
在“编辑”屏幕中，您可以单击源阶段右上角的铅笔图标，这将更改视图，并允许您添加新的源操作，可以是在 todobackend 存储库的当前操作之前、之后，也可以是在同一级别:
![](img/99536673-029a-4c09-b052-0f5e5314af0f.png)
Editing a pipeline
对于我们的场景，我们可以并行下载部署存储库源代码；因此，在与另一个源存储库相同的级别添加一个新的操作，这将打开一个添加操作对话框。为“动作”类别选择“源”，配置一个`DeploymentRepository`或类似的动作名称，并在选择 GitHub 作为“源”提供者并点击“连接到 GitHub”按钮后，在`docker-in-aws/todobackend-aws`存储库中选择主分支:
![](img/2b70a550-a045-4e69-b305-4a204589bfe5.png)
Adding a deployment repository
接下来，滚动到页面底部，为这个源操作的输出工件配置一个名称。代码管道将使部署存储库中的基础架构模板和配置对管道中的其他阶段可用，您可以通过配置的输出工件名称来引用这些模板和配置:
![](img/3dfcd5c8-f127-4f80-a986-f2484d9a2254.png)
Configuring an output artifact name
在前面的截图中，您还将输出工件名称配置为`DeploymentRepository`(与源动作名称相同)，这很有帮助，因为管道详细信息视图只显示阶段和动作名称，而不显示工件名称。
# 向构建阶段添加输出工件
在添加 DeploymentRepository 操作后，编辑管道屏幕应该如下图所示:
![](img/f8faf3c3-1c42-456f-8918-12c795137764.png)
Edit pipeline screen
您需要执行的下一个管道配置任务是在构建阶段修改代码构建构建操作，这是在您创建管道时由代码管道向导为您创建的。
您可以通过单击代码构建操作框右上角的铅笔图标来实现这一点，如前面的屏幕截图所示，这将打开编辑操作对话框:
![](img/76a52a53-f5b4-48dd-99ff-14fadd367347.png)
Editing build action
在前面的截图中，请注意代码管道向导已经配置了一个输入和输出工件:
*   输入工件:CodePipeline 向导将此命名为`MyApp`，它指的是与您在创建管道时引用的源存储库相关联的输出工件(在本例中，这是 GitHub todobackend 存储库)。如果您想要重命名这个工件，您必须确保在拥有的操作上重命名输出工件名称(在这种情况下，是源阶段中的源操作)，然后更新任何使用工件作为输入的操作。
*   输出工件:默认情况下，代码管道向导将此命名为`MyAppBuild`，然后可以在管道的后续阶段引用它。输出工件由`buildspec.yml`文件中的工件属性决定，对于我们的用例，这个工件不是应用构建；相反，它只是一个捕获版本元数据的版本工件(`version.json`)，所以我们将这个工件重命名为`ApplicationVersion`。
# 向管道添加部署阶段
单击上一个屏幕截图中的“更新”按钮后，您可以通过单击构建阶段下面的“添加阶段”框来添加新阶段。对于阶段名称，输入名称`Dev`，这将表示部署到名为 Dev 的环境中，然后单击添加操作框添加新操作:
![](img/294d261f-8ecd-4942-8a13-7c8e5773895a.png)
Adding a deploy action
因为这是一个部署阶段，所以请从“操作”类别下拉菜单中选择“部署”，配置“部署”的操作名称，并选择 AWS 云信息作为部署提供程序:
![](img/6aafc914-9182-4329-881f-2c1faf719f56.png)
Configuring a CloudFormation deploy action
这将公开许多与云信息部署相关的配置参数，如前面的截图所示:
*   操作模式:选择创建或更新栈选项，如果栈不存在，将创建新栈，或者更新现有栈。
*   栈名称:引用您在前面章节中已经部署的现有 todobackend 栈。
*   模板:指应该部署的云信息模板文件。这以格式`InputArtifactName::TemplateFileName`表示，在我们的例子中是`DeploymentRepository::stack.yml`，假设我们为`DeploymentRepository`源操作配置了一个输出工件名称`DeploymentRepository`，并且我们的栈位于文件`stack.yml`中，位于存储库的根。
*   模板配置:指用于提供栈参数、标签和栈策略的配置文件。这需要引用您之前在`todobackend-aws`部署存储库中创建的新`dev.json`文件；它以与模板参数相同的格式配置，值为`DeploymentRepository::dev.json`。
配置完上一个屏幕截图中显示的属性后，进一步向下滚动并展开高级部分，如下一个屏幕截图所示:
![](img/7a23b618-6734-4918-96ab-b21350aecc7c.png)
Configuring additional CloudFormation deploy action properties
以下描述了您需要配置的每个附加参数:
*   功能:这授予云信息部署操作代表您创建 IAM 资源的权限，并且在意义上与您传递给`aws cloudformation deploy`命令的`--capabilities`标志相同。
*   角色名称:这指定了云信息部署操作用来部署云信息栈的 IAM 角色。参考您之前创建的`cloudformation-deploy`角色。
*   参数覆盖:此参数允许您覆盖通常由模板配置文件(`dev.json`)提供的输入参数值，或云信息模板中的默认值。对于我们的用例，我们需要覆盖`ApplicationImageTag`参数，因为这需要反映作为构建阶段的一部分创建的映像标签。代码管道支持两种类型的参数覆盖(参见[使用参数覆盖函数](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html)，对于我们的用例，我们使用`Fn::GetParam`覆盖，它可以用来从管道输出的工件中的 JSON 文件中提取属性值。回想一下，我们在本章前面向 todobackend 存储库添加了一个`make version`任务，该任务输出作为工件收集的文件`version.json`，作为代码构建构建规范的一部分。我们更新了构建动作，将这个工件称为`ApplicationVersion`。在前面的截图中，提供给`Fn::GetParam`调用的输入列表首先引用工件(`ApplicationVersion`)，工件中 JSON 文件的路径(`version.json`)，最后引用 JSON 文件中保存参数覆盖值的键(`Version`)。
*   输入工件:这必须指定您在部署配置中引用的任何输入工件。这里，我们添加`DeploymentRepository`(用于模板和模板配置参数)和`ApplicationVersion`(用于参数覆盖配置)。
完成后，单击添加操作按钮，然后您可以单击保存管道更改来完成管道的配置。此时，您可以通过单击 Release change 按钮来测试您的新部署操作是否有效，这将手动触发管道的新执行；在几分钟之内，您的管道应该成功地构建、测试和发布一个新的映像，作为构建阶段的一部分，然后通过开发阶段成功地将您的更改部署到 todobackend 栈:
![](img/9c4d6c8e-0bbc-47b0-85dd-6e7afdb035c0.png)
Successful CloudFormation deployment via CodePipeline
在前面的截图中，您可以在部署期间或之后单击详细信息链接，该链接会将您带到云信息控制台，并向您显示正在进行或已完成部署的详细信息。如果您展开参数选项卡，您应该会看到 ApplicationImageTag 正在引用一个格式为``的标签。``，确认我们的管道实际上已经部署了构建阶段构建的 Docker 映像:
![](img/28a8570e-e4d2-4ab4-ac45-13e6a2063286.png)
Confirming an overridden input parameter
# 使用代码管道持续交付到生产
现在我们正在非生产环境中持续部署，我们持续交付旅程的最后一步是能够以可控的方式将应用版本部署到生产环境中。CodePipeline 通过利用 CloudFormation 的一个有用特性(称为变更集)来支持这种能力。更改集描述了将应用于给定云信息栈的各种配置更改，这些更改基于可能已应用于您的栈模板文件和/或输入参数的任何更改。对于新的应用版本，您通常只更改定义新应用工件版本的输入参数。例如，我们管道的开发阶段覆盖了`ApplicationImageTag`输入参数。在某些场景中，您可以对云信息栈和输入参数进行更广泛的更改。例如，您可能需要为您的容器添加新的环境变量，或者您可能向栈添加新的基础架构组件或支持服务。这些更改通常会提交到您的部署存储库中，并且，鉴于我们的部署存储库是我们管道中的一个来源，对您的部署存储库的任何更改都将被捕获为更改。
CloudFormation 变更集为您提供了一个机会来检查将要应用到目标环境的任何变更，如果变更集被认为是安全的，那么您可以从该变更集中启动部署。CodePipeline 支持生成 CloudFormation 变更集作为部署操作，然后可以与单独的手动批准操作相结合，这允许适当的人员审查变更集，并随后批准或拒绝变更。如果变更获得批准，您就可以从变更集中触发部署，从而提供一种有效的方法，向生产环境或需要某种形式的变更控制的任何类型的环境提供受控的发布。
现在，让我们扩展我们的管道，以支持将应用版本受控部署到新的生产环境中，这需要您执行以下配置更改:
*   将新的环境配置文件添加到您的部署存储库中
*   向管道添加创建变更集操作
*   向管道添加手动批准操作
*   向管道添加部署更改集操作
*   部署到生产中
# 向部署存储库中添加新的环境配置文件
因为我们正在创建一个新的生产环境，所以我们需要向部署存储库添加一个环境配置文件，其中将包括特定于您的生产环境的输入参数。如前面的例子所示，它演示了在`todobackend-aws`存储库的根目录下添加一个名为`prod.json`的新文件:
```
{ 
  "Parameters": {
    "ApplicationDesiredCount": "1",
    "ApplicationImageId": "ami-ec957491",
    "ApplicationImageTag": "latest",
    "ApplicationSubnets": "subnet-a5d3ecee,subnet-324e246f",
    "VpcId": "vpc-f8233a80"
  }
}
```
可以看到配置文件的格式和我们之前修改的`dev.json`文件是一样的。当然，在现实场景中，您会期望配置文件有所不同。例如，我们使用相同的应用子网和 VPC 标识；您通常会有一个单独的 VPC，甚至是一个单独的生产帐户，但是为了简单起见，我们将把我们的生产环境部署到与我们的开发环境相同的 VPC 和子网中。
您还需要对我们的云信息栈文件进行一些小的更改，因为如果您试图在同一个 AWS 帐户中创建新的栈，有一些硬编码的名称会导致冲突:
```
...
...
Resources:
  ...
  ...
  ApplicationCluster:
    Type: AWS::ECS::Cluster