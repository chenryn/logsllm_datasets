title:SpecTaint: Speculative Taint Analysis for Discovering Spectre Gadgets
author:Zhenxiao Qi and
Qian Feng and
Yueqiang Cheng and
Mengjia Yan and
Peng Li and
Heng Yin and
Tao Wei
SpecTaint: Speculative Taint Analysis for
Discovering Spectre Gadgets
Zhenxiao Qi
UC Riverside
PI:EMAIL
Qian Feng
Baidu USA
PI:EMAIL
Yueqiang Cheng∗
NIO Security Research
PI:EMAIL
Mengjia Yan
MIT
PI:EMAIL
Peng Li
ByteDance
PI:EMAIL
Heng Yin
UC Riverside
PI:EMAIL
Tao Wei
Ant Group
PI:EMAIL
Abstract—Software patching is a crucial mitigation approach
against Spectre-type attacks. It utilizes serialization instructions
to disable speculative execution of potential Spectre gadgets in a
program. Unfortunately, there are no effective solutions to detect
gadgets for Spectre-type attacks. In this paper, we propose a novel
Spectre gadget detection technique by enabling dynamic taint
analysis on speculative execution paths. To this end, we simulate
and explore speculative execution at system level (within a CPU
emulator). We have implemented a prototype called SpecTaint
to demonstrate the efﬁcacy of our proposed approach. We eval-
uated SpecTaint on our Spectre Samples Dataset, and compared
SpecTaint with existing state-of-the-art Spectre gadget detection
approaches on real-world applications. Our experimental results
demonstrate that SpecTaint outperforms existing methods with
respect to detection precision and recall by large margins, and
it also detects new Spectre gadgets in real-world applications
such as Caffe and Brotli. Besides, SpecTaint signiﬁcantly reduces
the performance overhead after patching the detected gadgets,
compared with other approaches.
I.
INTRODUCTION
Spectre has now become an emerging attack vector [29]–
[31] that breaks down the isolation between processes. Spectre
attacks have prompted widespread security concerns, since
they can exploit critical vulnerabilities across the spectrum of
different processor architectures, including those from Intel,
AMD, and ARM. Any devices with these vulnerable proces-
sors could be leveraged to defeat the security protection in
operating systems (OSs) [29], browsers [21] and infrastruc-
tures [45] built on these devices.
Spectre mitigation at the hardware level is challenging.
To ensure the security of processors, SafeSpec [27] proposes
shadow hardware structures designed for speculative execution,
such that the microarchitectural state can also be discarded to
avoid leakage through side channels. InvisiSpec [46] provides
a speculative buffer that stores speculative loads. Thereby,
∗The main work was done when Yueqiang Cheng worked at Baidu Security.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24466
www.ndss-symposium.org
speculative loads are invisible to the cache line state. While
these techniques can mitigate Spectre attacks by disabling
cache side channels, they are still at the design stage.
Software patching is another way to mitigate Spectre
attacks. Software vendors cannot always assume their services
are running on patched processors, especially for these services
running on third-party cloud platforms. Fortunately, software
patching provides vendors an opportunity to take control over
the security of their products. When there is no effective
remedy applied to the hardware, software vendors can utilize
serialization instructions [13] to patch Spectre gadgets in
software and protect their products.
However,
it
is nontrivial
to ﬁnd a Spectre gadget (a
sequence of instructions that leaks information via speculative
execution). It is impossible to blindly serialize all conditional
branching instructions in a program, which will
introduce
a very high performance penalty. Many researchers propose
various solutions to strike a balance between security and per-
formance. Generally speaking, they try to ﬁnd a set of potential
Spectre gadgets in a program and only patch these gadgets
to avoid high runtime overhead. Spectre V1 Scanner from
RedHat [5] and MSCV Spectre 1 pass [41] search in binary for
gadget patterns, and only patch gadgets that match predeﬁned
patterns. Tools like SPECTECTOR [23] and oo7 [43] conduct
more advanced static analysis such as symbolic execution and
taint analysis to detect Spectre gadgets. They are more accurate
and generic than simple pattern matching. However, static anal-
ysis approaches are known to be imprecise, bringing high false
positives and sometimes false negatives when detecting Spectre
gadgets. Having realized the limitations in the static analysis,
SpecFuzz [39] takes a dynamic analysis approach. It extends
fuzzing to not only monitor the normal execution of a program
but also simulate its speculative execution paths. It simulates
speculative execution by inserting speculative execution logic
into the original program at compile time, and detects Spectre
gadgets when out-of-bound memory accesses are observed
during fuzzing. However, to ensure high fuzzing throughput
during simulation of speculative execution, its simulation logic
is oversimpliﬁed, causing both high false positives and false
negatives (see Section II-B for more detailed discussions).
In this paper, we would like to enable dynamic taint
analysis to discover Spectre gadgets. We propose to conduct
dynamic taint analysis on speculative execution paths and dis-
cover Spectre gadgets based on data ﬂow patterns. Compared
with syntax-based [5] and sanitizer-based approaches [39], our
gadget pattern can capture the semantics of Spectre gadgets.
As substantiated in the evaluation (Section VI), our semantic-
based gadget pattern produces fewer false positives, compared
with the existing works. Furthermore, static taint analysis suf-
fers from the severe over-tainting and under-tainting issues due
to imprecise memory alias analysis, incomplete control ﬂow
graph extraction, etc. As shown in our evaluation (Section VI),
oo7 has poor precision and recall rates when analyzing real-
world programs.
However, existing dynamic binary taint analysis platforms
cannot detect Spectre gadgets because speculative execution is
invisible to normal program execution. Therefore, we extend
a dynamic taint analysis platform and instrument speculative
execution logic on-the-ﬂy. As a result, we can simulate spec-
ulative execution and capture data ﬂow patterns on specula-
tive paths for Spectre gadget discovery. To the best of our
knowledge, we are the ﬁrst to enable dynamic taint analysis
on speculative paths for Spectre gadget detection.
We have implemented a prototype SpecTaint to demon-
strate the efﬁcacy of speculative taint analysis in detecting
Spectre gadgets. We evaluated the performance of SpecTaint
on our Spectre Samples Dataset and six real-world programs.
The experimental results demonstrate that SpecTaint out-
performs the baseline approaches in terms of the precision
and recall by large margins. It also has reasonable runtime
efﬁciency and reduces the performance overhead after patching
detected gadgets by 73%, compared with the conservative
hardening strategy. Besides, SpecTaint can detect new Spectre
gadgets in real-world applications like Brotli [7] and Caffe
framework [1].
We summarize our contributions as follows:
• We propose a dynamic speculative execution simulation
platform that enables dynamic taint analysis on specula-
tive execution paths. With the support of dynamic taint
analysis, we deploy a semantic-based gadget detector that
detects exploitable Spectre gadgets during the program
execution.
• We build a synthetic dataset by inserting known Spectre
gadgets into selected real-world programs. The dataset
can be considered as a benchmark to help researchers
evaluate their Spectre gadget detection tools. It will ben-
eﬁt the security community.
• We implement a prototype SpecTaint
to demonstrate
the efﬁcacy of our approach and compare SpecTaint
with state-of-the-art tools on the Spectre Samples Dataset
and real-world programs. Our evaluation indicates that
SpecTaint outperforms existing methods with respect to
precision and recall with reasonable runtime efﬁciency.
Moreover, SpecTaint discovered new Spectre gadgets
that were not detected by the other tools. Besides, it sig-
niﬁcantly reduces the execution overhead after patching
detected gadgets, compared with the other approaches.
II. OVERVIEW
In this section, we ﬁrst walk through a motivating example
to explain how a Spectre V1 gadget is exploited by attackers.
2
Then we introduce the background and limitations of state-
of-the-art tools that discover Spectre gadgets from binaries.
Furthermore, we propose our approach and show the capabil-
ities of our approach to address these limitations. Then we
give a brief introduction about the overview and mechanism
of SpecTaint. At last, we discuss the scope and assumptions
of this work.
A. Motivating Example
Listing 1 shows a code snippet that can be exploited to
launch a Spectre V1 attack [34].
1 v o i d v i c t i m f u n c t i o n ( s i z e
2 {
t u s e r
i n p u t )
. . .
i f ( u s e r
i n p u t < g e t
l e n ( a r r a y 1 ) ){
i n p u t ] ;
s e c r e t = a r r a y 1 [ u s e r
temp &= a r r a y 2 [ s e c r e t ∗ 2 5 6 ] ;
/ / RS : Read S e c r e t
/ / LS : Leak S e c r e t
}
i n t main ( )
3
4
5
6
7
8 }
10 {
9
11
12
13 }
v i c t i m f u n c t i o n ( u s e r
r e t u r n 0 ;
i n p u t ) ;
Listing 1: Code snippet containing Spectre gadgets.
In this example, the if statement is a sanity check that
ensures the following array access is within a valid range.
When evaluating the sanity check, the outcome of the branch
at line 4 may take many CPU cycles to be determined (e.g.,
due to the delay caused by a load from the main memory).
To avoid the performance penalty caused by this delay, the
branch prediction unit (BPU) will predict the branch outcome,
from where the instructions will be executed speculatively. An
attacker can poison the branch predictor by feeding crafted
inputs to the program to intentionally trick the BPU into
making an expected prediction on that branch. Then the
attacker can launch the Spectre attack by running the code with
an out-of-bounds value as input. In this case, the BPU predicts
the branch outcome to be true and the processor speculatively
executes instructions at line 5 and line 6. Consequently, an
arbitrary value can be read using an out-of-bounds index to
access array1 at line 5. Then another index related to the
loaded secret is used to access array2 and results in cache
line state changes for array2. After the processor ﬁnds out
the prediction to be wrong, it discards all architectural effects
made by speculative instructions. However, side effects (e.g.,
cache line state changes) still remain at the micro-architectural
level, and the attacker can launch a cache side-channel attack
(e.g., Flush+reload [48]) to retrieve the secret value.
B. Background and Rationale
Speculative execution is a hardware feature that is invisible
to the program execution. Therefore, to apply software-based
program analysis techniques on detecting Spectre gadgets, the
ﬁrst step is to simulate speculative execution at the software
level, which is also the principle for all related works. To this
end, existing approaches utilize different methods to simulate
speculative execution, either statically or dynamically. RH
scanner [5] (also known as Spectre V1 scanner) is a static
analysis tool. It simulates speculative execution by scanning
both targets of a conditional branch. By doing so, it at least
covers one path that is not taken during real execution, which is
considered as a speculative path. During scanning, it searches
a certain pattern in the binary to detect Spectre gadgets.
However, the syntax-based code pattern used by RH scanner
could produce a large number of unexploitable candidates,
since not all detected gadgets can be controlled by attackers.
Oo7 [43] also conducts a static binary analysis. The differ-
ence lies in that it conducts a semantic-based gadget detection.
That is, it leverages the data ﬂow analysis to construct a
semantic code pattern and identiﬁes the code snippet that not
only satisﬁes predeﬁned patterns but also can be controlled via
user inputs. The intuition behind it is that if the gadgets can
be inﬂuenced by user inputs, attackers can leverage carefully-
constructed inputs to exploit these gadgets. To this end, oo7
utilizes static taint analysis to trace information ﬂow from
inputs. However, it is well-accepted that static taint analysis
suffers from severe over-tainting and under-tainting issues due
to imprecise memory alias analysis, inaccurate control ﬂow
graphs and call graphs, etc.
The aforementioned works examine speculative execution
statically and deploy different program analysis techniques for
Spectre gadget detection. However, the detection capabilities
of these approaches inherit the limitations of static analysis
techniques. Therefore, these techniques by design suffer from
high false positives and false negatives.
SPECTECTOR [23] mathematically deﬁnes a semantic
notion of security against speculative execution and develops
an algorithm based on symbolic execution to prove the absence
of speculative leaks. However, this approach inherits the bottle-
necks of symbolic execution and has to sacriﬁce the soundness
and completeness of analysis when analyzing large programs.
SpecFuzz [39] takes a fuzzing approach to dynamically
detect Spectre gadgets. It exposes speculative execution to
fuzzing by inserting the speculative execution logic into the
program at compile time, and relies on random mutation of
program inputs to detect speculative execution errors during
program execution. To ensure high fuzzing throughput, its
gadget detection logic is oversimpliﬁed. More speciﬁcally, it
has the following limitations:
• Simplistic Gadget Modeling. To avoid high runtime
overhead during fuzzing, SpecFuzz simply leverages a
memory safety checker (e.g., AddressSanitizer) to detect
out-of-bounds memory accesses and considers all out-of-
bounds memory accesses to be potential Spectre gadgets.
This modeling is oversimpliﬁed and error-prone. An out-
of-bounds memory access during speculative execution
may not be controlled via user inputs and does not nec-
essarily constitute a Spectre V1 gadget. Our experiments
in Section VI substantiate this claim.
• Probabilistic Detection. SpecFuzz detects Spectre gad-
gets by capturing out-of-bounds memory access errors
during speculative execution. However, even if a true
Spectre gadget is indeed exercised during fuzzing, it may
or may not trigger any out-of-bounds memory access
errors. SpecFuzz relies on random mutation of program
inputs to trigger these errors. As a result, the Spectre
gadget detection of SpecFuzz is probabilistic.
• Flawed Exception Handling. Exceptions are likely to
occur during simulated speculative execution, because it
executes a path which might not be expected. To deal
with exceptions during speculative execution, again for
simplicity, SpecFuzz stops the simulation immediately
and restores the execution to a previously saved state. This
exception handling is ﬂawed, because it does not correctly
simulate how the hardware actually behaves. In reality,
when encountering an exception during speculative execu-
tion, the processor can continue the speculative execution
until it is terminated [34]. Consequently, SpecFuzz might
miss Spectre gadgets that are located after the exception-
raising instruction, thereby causing false negatives.
In this work, we would also like to take a dynamic analysis
approach to detect Spectre gadgets, to ensure high detection
accuracy. We resort to independent test case generation sys-
tems (such as fuzzing and symbolic execution) to produce
high-quality test cases to achieve high detection coverage.
In order to achieve high detection accuracy in real-world
software, we need to strike a balance between scalability and
gadget detection ﬁdelity. That is, our analysis must be able to
cope with complex real-world software, and faithful enough to
ensure high detection accuracy.
To this end, we propose to perform dynamic taint analysis
on speculative execution paths, and conduct taint-based pat-
tern checking to characterize Spectre gadgets at the semantic
level. Essentially, by performing dynamic taint analysis on
speculative execution paths, we can detect memory accesses
that are dependent on the program input (which attackers can
control) and may cause information leakage through cache
side channels. This taint-based gadget pattern checking might
not be as precise as SPECTECTOR [23], but our scheme is
designed to be scalable and practical for detecting Spectre
gadgets from real-world programs. It is more faithful than
the one used in SpecFuzz [39], as it is deterministic (once
the program inputs are determined) rather than probabilistic
(relying on random mutation of program inputs to trigger
errors). Our evaluation in Section VI shows that this taint-based
approach is able to achieve much better detection accuracy than
SpecFuzz, by paying more runtime overhead on speculative
taint analysis. In other words, our trade-off between scalability
and gadget detection ﬁdelity is justiﬁed.
C. System Overview
Architecture. As illustrated in Fig. 1, we extend a system