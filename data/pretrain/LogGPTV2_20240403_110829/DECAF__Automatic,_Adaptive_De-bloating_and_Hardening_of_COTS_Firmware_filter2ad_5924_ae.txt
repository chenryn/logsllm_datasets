### Dead Code and Security Vulnerabilities in the Code

Program slicing and software debloating mechanisms can enhance our pruning mechanism. However, two key considerations must be addressed before adopting and adapting these techniques:

1. **System Initialization**: Current research primarily focuses on trimming self-contained programs that operate independently of other system components. In contrast, UEFI firmware initializes system hardware. An error in the firmware may prevent the operating system from using certain hardware features, but the UEFI firmware itself will continue to run without issues.

2. **Assembly Code**: The problem of hand-written assembly code in UEFI firmware is not adequately addressed by most existing literature. The EDK II project, for instance, contains approximately 1.4 million lines of C/C++/Header code and 19,000 lines of assembly, which, while a small fraction, is still significant.

### Related Work

#### Dynamic Analysis for Docker Containers
Rastogi et al. [33] use dynamic analysis techniques to automatically debloat and harden Docker containers by removing unused resources and partitioning executables based on the resources they access. They employ system call logs to determine resource access, a method similar to our approach of hooking into the UEFI protocol lookup method discussed in Section 2.3.

#### Symbolic Execution for UEFI Firmware
Bazhaniuk et al. [7] use symbolic execution to find vulnerabilities within UEFI firmware by analyzing a snapshot of SMRAM. Their setup can generate 4,000 test cases in 4 hours, which can be later replicated on an actual board. Their testing environment uses a generic and open-source UEFI implementation, making it challenging to replicate on closed-source UEFI due to the difficulty in emulating non-generic hardware.

#### Debloating the Linux Kernel
The work presented in [22] takes a similar approach but focuses on debloating the Linux Kernel. The argument is that the kernel includes a large set of features, many of which are unused by specific end users. By defining usage scenarios, the researchers determine which parts of the code are reached during runtime. This is achieved by analyzing the function call graph, tracing functions back to the source code, and creating a custom configuration. The Linux Kernel has roughly 11,000 configuration options, which can be tailored to minimize the code base while maintaining necessary functionality, potentially reducing it by up to 70%.

#### RedDroid: Debloating Android Applications
RedDroid [18] targets software bloat in the Android ecosystem. Redundancy is defined as either compile-time or install-time, depending on when it can be identified. Compile-time redundancy comes from included libraries, while install-time redundancy refers to platform-dependent files. The debloating process involves static code analysis and shell scripts, resulting in an average APK size reduction of 42%. It is important to note that RedDroid's primary focus is on saving hardware resources rather than enhancing security.

#### Large-Scale Analysis of Embedded Firmware
The study in [13] conducts a large-scale experiment on embedded firmware images, including those found in various IoT devices. A large number of binaries (approximately 32,000) were collected through web crawling and processed using simple static analysis and correlation techniques. This led to the detection of known vulnerabilities in previously unaffected devices and the submission of 38 new CVEs. An interesting finding was that two different classes of products (44 surveillance camera models and 3 home router firmware images) shared the same vulnerability, attributed to the use of a common System on a Chip (SoC) from the same vendor. This scenario highlights how vulnerable software can be reused across different applications, and a pruning framework like DECAF can help remove such threats.

#### Intel Management Engine (ME)
The Intel Management Engine (ME), a co-processor integrated into almost all Intel-based motherboards since 2006, enables various Intel features but requires full access to the host systemâ€™s memory. For users not needing these advanced management features, the ME represents a poorly understood attack vector. Multiple vulnerabilities have been identified, including CVE-2017-5689 [26], which can give an attacker full access to the host system, including the ability to install persistent malware and modify firmware. The open-source project me_cleaner [12] provides scripts to patch the ME firmware and disable it on a wide variety of motherboards. In conjunction with patching and removing parts of the UEFI BIOS that depend on the ME, me_cleaner has been used to disable Intel ME in certain SuperMicro boards used in cloud data centers.

### Conclusions

DECAF is the first extensible modular platform capable of automatically pruning a wide class of commercial, off-the-shelf UEFI motherboard firmware, sometimes by over 70%, significantly limiting attack surface areas and hardening the resulting stack. DECAF is freely available for the research community to use.

### References

[References remain unchanged and are listed as provided.]

### Appendix: Pruning Results

**Motherboard:** SuperMicro A1SAi-2550F (V519)