shorten the proof. Nevertheless, having a trapdoor permutation
whose output is as large as 4096 bits of RSA modulus, for example,
in the on-chain part of the statement remains problematic.
In this section we explore another direction to make contingent
payment more practical. We observe that the proof is useful only
for the buyer’s sake. Therefore, there seems to be no strong reason
to neither keep the proof succinct nor keep the proof system itself
non-interactive, as both parties can engage in it in an off-chain way.
Our goal is to replace SNARKs by another interactive proof
system, which will be used to prove a statement of the form “I
have a preimage 𝑘 of 𝑦 under SHA and the decryption (under 𝑘) of
the ciphertext 𝑐 will satisfy predicate 𝑓 ”. This statement involves an
arithmetic function: SHA. Constructions for such type of statements
have been studied thoroughly in the literature. For instance, in [35],
the authors proposed a construction based on garbled circuit (GC)
and oblivious transfer (OT). Roughly, their protocol works as follows:
• The verifier, given as input 𝑥, will garble a circuit implementing
the function 𝑓 (𝑥, ·). The prover, given as input (𝑥, 𝑤), gets the
input labels corresponding to the bits of 𝑤 via oblivious transfer
and evaluates the garbled circuit, obtaining an output label. This
label is sent to the verifier in committed form.
• Now, the verifier reveals their coins used during the garbling
process and the OT, to convince the prover about the verifier’s
honest behaviour. Only after being convinced will the prover
open the commitment to the output label.
• Finally, the verifier will accept the proof if and only if the re-
ceived value matches the output label associated to 1.
First of all, employing the above interactive protocol will help us
avoid the burden of computing and verifying the crs, as there is no
crs anymore. In addition, various techniques towards efficient GC
and OT have been developed in the literature, e.g. in [46] or [4], that
will help the protocol run more efficiently compared to SNARKs.
We will elaborate on its integration into the information CP system
in the following subsections.
4.1 Hybrid statements
Although the protocol from [35], which we call ZK-from-GC, suits
us well as a building block for our information CP system, it can
be directly used only when the relations can be transformed effi-
ciently into arithmetic circuits. Unfortunately, some sophisticated
applications of information CP may not fall into this category. For
example, the buyer can be interested in an ECDSA signature by
some specific authority on a contract, and the information CP used
in this case could have the statement of the form: “I have a preimage
𝑘 of 𝑦 under SHA, and the ciphertext 𝑐 is an AES encryption (under
𝑘) of a valid ECDSA signature 𝑠”, where (𝑐, 𝑦) is the public input.
Roughly speaking, the arithmetic clause can be proven efficiently
using the ZK-from-GC protocol, while its algebraic counterpart can
be carried out by standard proofs of knowledge.
There are serveral works that provide proof systems for such
hybrid statements. For example, in [19] the authors combine the
method from [35] with Σ-PoKs. Their idea is to commit to the
private input by a Pedersen-like commitment, then execute the ZK-
from-GC on the arithmetic clause and finally prove the algebraic
clause on the committed inputs. As a novel contribution, we propose
a different and natural approach to link from the output labels of
the prover in ZK-from-GC to the PoKs of the algebraic part. Let 𝐺
be a group with generator 𝑃 and let 𝐴 ∈ 𝐺. Given a boolean circuit
𝑓 : {0, 1}𝑚 → {0, 1}𝑛 and given com ∈ 𝐺, in Figure 4 we propose a
zero-knowledge proof system for:
PoK {(𝑠, 𝑥, 𝑡) : com = 𝑠 𝐴 + 𝑡𝑃 ∧ 𝑓 (𝑥) = 𝑠} .
(3)
This system can be used, for example, to implement the con-
tingent-payment relation for selling ECDSA signatures. More con-
cretely, the prover may produce a commitment com of their signa-
ture 𝑠, encrypt it under a freshly generated key 𝑘, 𝑐 ← Enc𝑘(𝑠) and
compute the hash of the key, 𝑦 = SHA(𝑘). It will then send (𝑐, 𝑦)
to the verifier and run the above protocol for function 𝑓(𝑐,𝑦)(𝑘) (cid:66)
Dec𝑘(𝑐) if 𝑦 = SHA(𝑘) else ⊥. After this, the seller will perform a
zero-knowledge proof of knowledge of an opening to com that is
a valid ECDSA signature. This can be done very efficiently with a
Σ-protocol given the algebraic nature of the ECDSA verification
(see Section 5.1). Due to the binding property of the Pedersen com-
mitment, the seller can only know one opening of com and thus,
the buyer can safely assume that the value that satisfies the ECDSA
signature is an output of 𝑓(𝑐,𝑦), which is all the buyer needs to know
before performing the transaction.
4.2 Our construction
In Figure 4, we present our ZK construction for relation (3). Roughly,
the verifier will produce a garbled circuit of function 𝑓 and encrypt
field elements 𝑧(𝑖)
𝑏 using the output labels of the circuit. These ele-
ments are correlated in pairs satisfying 𝑧(𝑖)
0 = 𝛿 for some value
𝛿 ∈ Z𝑝. The authenticity of the garbled circuit scheme guarantees
that the prover can only recover one value of each pair from the
for every 𝑖 ∈ [𝑛],
evaluation of the garbled circuit (actually, 𝑧(𝑖)
𝑠∗
being 𝑠∗ = 𝑓 (𝑥∗), where 𝑥∗ is the input requested in the COT). In
order to convince the verifier, the prover will have to compute a
group element ˆ𝐵 and, after receiving 𝛿, argue knowledge (in zero-
knowledge) of a representation of com and 𝐵 in base (𝐴, 𝑃) with
1 −𝑧(𝑖)
𝑖
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA648the same 𝐴-coefficient. Here, 𝐵 is a group element defined as:
𝐵 (cid:66) 𝛿-1( ˆ𝐵 −𝑛
𝐵 (cid:66) 𝛿-1( ˆ𝐵 −𝑛
𝑖=1 2𝑖−1𝑧(𝑖)
0 = 𝑧(𝑖)
𝑖=1 2𝑖−1𝑧(𝑖)
𝑠∗
𝑖
0 𝐴) .
The prover can compute a representation of 𝐵 in base (𝐴, 𝑃) after
receiving 𝛿. Note that, for all 𝑠, 𝑧(𝑖)
𝑠𝑖 − 𝑠𝑖𝛿 and thus:
𝐴) + 𝑠∗𝐴 .
𝛿) is to choose the representation of ˆ𝐵 such that ( ˆ𝐵−𝑛
However, such representation must have the same 𝐴-coefficient as
the representation known for com, but the prover does not know 𝛿 at
the moment of choosing ˆ𝐵. Intuitively, the only way the prover can
control the representation of 𝐵 that they will know (after receiving
𝐴),
i.e., the factor that is multiplied by the inverse of 𝛿, has a zero 𝐴-
coefficient. Nevertheless, in that case the prover will know a repre-
sentation of 𝐵 where the 𝐴-coefficient is exactly 𝑠∗. Consequently,
a successful prover must have requested COT inputs for a value 𝑥∗
such that 𝑠∗ = 𝑓 (𝑥∗) is the 𝐴-coefficient of the given representation
of com, as desired. Security against malicious verifiers is achieved
because the prover verifies the garbled circuit before producing the
final PoK. We formalize the above intuition with this theorem:
𝑖=1 2𝑖−1𝑧(𝑖)
𝑠∗
𝑖
Theorem 4.1. Let GC = (Garble, Eval, Verify) be a garbled cir-
cuit scheme following the definition in Section 2.5 and FCOT be the
ideal functionality for committing oblivious transfer (as defined in
Section 2.6). Let 𝐻 : {0, 1}∗→ Z𝑝 be a random oracle. Then the pro-
tocol described in Figure 4 is a zero-knowledge proof of knowledge
system for relation (3).
Proof of Theorem 4.1. Completeness. If both parties are hon-
est, the prover will receive the labels associated to 𝑠 = 𝑓 (𝑥), i.e.,
for all 𝑖 ∈ [𝑛], due to the correctness of the garbled circuit
ˆ𝑧(𝑖)
𝑠𝑖 = 𝑧(𝑖)
𝑠𝑖
𝑠𝑖 − 𝑠𝑖𝛿, for every 𝑖 ∈ [𝑛], therefore,
scheme. Also, note that 𝑧(𝑖)
0 = 𝑧(𝑖)
𝐵 (cid:66) 𝛿-1(cid:16)ˆ𝑡 𝑃 +𝑖 2𝑖−1𝑧(𝑖)
= 𝛿-1(cid:16)ˆ𝑡 𝑃 +𝑖 2𝑖−1𝑧(𝑖)
𝑠𝑖
0 𝐴(cid:17)
𝐴 −𝑖 2𝑖−1𝑧(𝑖)
𝑠𝑖 − 𝑠𝑖𝛿)𝐴(cid:17)
𝐴 −𝑖 2𝑖−1(𝑧(𝑖)
𝑠𝑖
= 𝑠 𝐴 + 𝛿-1ˆ𝑡 𝑃 .
Consequently, given the completeness of ZK PoK at the last step of
the protocol, the verifier will accept the proof.
Zero-knowledge. For every potentially malicious verifier, we con-
struct a simulator, that (without a valid witness) simulates a real
prover. In the first step of the protocol, the simulator performs the
COT step by using an arbitrary value as chosen bits. The hiding
property of the oblivious transfer makes the simulation indistin-
guishable from the real execution so far. The simulator then runs
the code of the malicious verifier, producing a garbled circuit and
proceeds with the transfer of the COT protocol (as the malicious
verifier would do). The simulator simulates ˆ𝐵 as a uniformly chosen
group element (the simulation is perfect, given that the blinding
factor ˆ𝑡 ∈ Z𝑝 in the real execution is also chosen uniformly). The
verifier now extracts the labels {𝐿(𝑖)
1 }𝑖∈[𝑚] from the FCOT func-
tionality after open-all and, computes the values to be transmitted, 𝛿
and {𝑍 (𝑖)
1 }𝑖∈[𝑛], as the verifier. It now performs the verification
of the garbled circuit with the computed input and output labels, as
the real prover would do. If the verification of the circuit fails, the
simulator halts. Otherwise, it simulates the zero-knowledge proof
0 , 𝑍 (𝑖)
0 , 𝐿(𝑖)
of knowledge from the last step of the protocol. It is not hard to
see that, if the garbled circuit scheme is verifiable, the simulation is
indistinguishable from the interaction with a real prover, because
when the circuit passes the verification, the labels recovered by the
real prover can only take one value and (as shown in the proof of
completeness) they will lead to a valid witness (𝑠, 𝑡, 𝑡′), so the final
ZK proof of the real prover will be accepted.
dlog
Extractability. Given a potentially malicious prover, we describe
an extractor that produces a valid witness for certain statement
with a comparable probability to the probability that the prover pro-
duces an accepting transcript on that statement. Assume that the
possibly malicious prover runs in time 𝜏, makes at most 𝑞 queries to
the random oracle and succeeds with probability 𝜌. Given com, 𝐴, 𝑓 ,
run the prover and extract {𝑥∗
𝑖 }𝑖∈[𝑚] from the first step of the
protocol, by simulating (see Section 2.6) the FCOT functionality
and define 𝑠∗ (cid:66) 𝑓 (𝑥∗). Then, the extractor continues the proto-
col as an honest verifier and runs the prover as the prover’s code
indicates (computing ˆ𝐵, etc), it also simulates the random oracle
queries made by the adversary by sampling uniformly random
values from Z𝑝. Now, assume that the prover completes an ac-
cepting transcript. The extractor will run the extractor of the PoK
from the final step of the protocol, getting values (𝑠, 𝑡, 𝑡′) such that
com = 𝑠 𝐴 + 𝑡 𝑃 and ˆ𝐵 = 𝑠 𝐴 + 𝑡′𝑃. If 𝑠 =𝑝 𝑠∗, the extractor will
output the witness (𝑠∗, 𝑥∗, 𝑡). Otherwise, the extractor will halt. We
can conclude the proof by arguing that the probability that the
extractor does not halt is negligible. In particular, we will show that
if 𝜌 is non-negligible and 𝜏 is polynomial in the security param-
eter, the probability that the extractor halts is upper-bounded by
𝐺 (𝜅). To see this, we will leverage the above extractor to build
Adv
an adversary B against the discrete logarithm problem. Assume B
is given the discrete logarithm instance (𝑝, 𝐺, 𝑃, 𝐴) and must find 𝑎
such that 𝐴 = 𝑎𝑃. Adversary B will proceed as the above extractor,
but it will additionally fork its execution after ˆ𝐵 has been fixed by
the prover, by providing the prover with a different 𝛿2 (let 𝛿1 be
the value of 𝛿 provided in the first execution). Adversary B then
simulates the random oracle queries possibly made by the prover
(after receiving 𝛿2) on values 𝑍 (𝑖)¬𝑠𝑖
in order to satisfy the equations
1 − 𝑐 (𝑖)
1 ) − 𝐻(𝑍 (𝑖)
0 ), for all 𝑖 ∈ [𝑛]. Observe that,