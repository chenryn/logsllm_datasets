other has a concise set of simple instructions; one features very few general-purpose regis-
ters, while the other has so many general-purpose registers that it even uses them to store
function return addresses and stack and frame pointers.
We present the relevant features of each architecture, both to highlight their differences
and to assist in the understanding of the mechanics of each exploit implementation.
3.1 The x86 Architecture
Intel’s x86 or IA-32 architecture is a descendant of the instruction set of the 16-bit 8086
processor that (in its 8-bit–bus variant, the 8088) powered the original IBM PC. Because
of its long evolution, the x86 ISA differs from more recent and coherent designs, notably
RISC processors such as SPARC. Many of the x86’s unusual features are convenient for
return-oriented programming; as we show, however, they are not necessary.
For additional information about the x86 architecture, see Intel’s manuals online [Intel
Corporation 2011].
3.1.1 Memory. The x86’s native machine word is 32 bits. Data is stored in a little-
endian format. The x86 allows unaligned memory access. Operations are possible on
memory and some registers in 16-bit and 8-bit chunks; for example, ax names the less-
signiﬁcant half of the %eax register; %ah and %al name the less and more signiﬁcant
bytes of %ax.
3.1.2
Instruction Set. The x86 is a complex instruction register-memory machine.
Most instructions can access memory directly, by means of the ModR/M and SIB bytes
(discussed below). This is in contrast to RISC designs with dedicated load/store instruc-
tions. A variety of addressing modes are supported for operands, the most complex of
which allows the programmer to specify a register base, a register index (with a scale mul-
tiplier of 1 to 4 bytes), and an immediate offset.
3.1.3
Instruction Encoding. Instructions are variable-length and unaligned, ranging
from 1 byte to as many as 12. With some exceptions, instruction encoding is orthogo-
nalized: optional preﬁx bytes (specifying, e.g., how to repeat string instructions); a one-
or two-byte opcode; an optional ModR/M (model, register/memory) specifying the ad-
dressing mode; an optional SIB (scale, index, base) byte used in some addressing modes;
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
7
·
and up to two immediates, each up to 4 bytes, specifying displacement and immediate
values.
If we are given a byte stream and a starting offset, we can unambiguously decode the
instruction at that offset. Starting from different offsets, we will ﬁnd different instructions,
including instructions never intended by the programmer or the compiler’s code-issue mod-
ule if we start in the middle of an intended instruction. Indeed, the high density of the
x86’s instruction encodings means that a random byte stream can be interpreted as a series
of valid instructions with high probability [Barrantes et al. 2005].
3.1.4 Registers. The x86 has eight general-purpose integer registers: %eax, %ebx,
%ecx, %edx, %ebp, %esi, %edi, and %esp. Each of these is 32 bits, the native word size.
As noted above, certain portions of these registers can also be accessed as 16-bit or 8-bit
registers. In earlier iterations of the instruction set, these registers were more specialized,
but now they are mostly interchangeable. The notable exceptions are: %esp is the stack
pointer, which instructions such as push and pop manipulate; %ebp is conventionally the
frame pointer, as reﬂected in instructions like enter and leave; and %esi and %edi are the
source and destination registers for certain string operations.
In addition to the general-purpose registers, the x86 has an instruction pointer, %eip; an
%eﬂags pseudoregister used in conditional branches; and segment registers that support
segmented memory access, mostly unused in today’s typical ﬂat 32-bit memory access
model. (Segments were used by some systems to implement W⊕X before NX/XD hard-
ware support was added to x86 processors [PaX Team 2003c].)
3.1.5 The Calling Convention. In the commonly-used System V x86 ABI [The Santa
Cruz Operation 1996], function arguments and return address are passed on the stack. The
call instruction pushes the caller return address onto the stack and transfers control to the
callee; the ret instruction pops a return address off the stack and transfers control to that
address. The x86 stack grows from high to low memory. Arguments can be pushed in any
order, and different conventions specify either ﬁrst argument last on stack (C-style) or the
opposite (Pascal-style). A function’s return value is put in %eax if it is 4 bytes long, or in
a combination of registers if it is longer. Of the general-purpose registers, %ebx, %ebp,
%esi, and %edi are conventionally callee-saved; %eax, %ecx, and %edx are caller-saved.
When %ebp is used as a frame pointer, the idiomatic function prologue reads “push
%ebp; mov %esp, %ebp”; the idiomatic function epilogue reads “mov %ebp, %esp; pop
%ebp.” The enter and leave instructions are synonyms for these two sequences.
The x86 includes instructions to support ABIs that differ from the one described here.
While these instructions generally do not occur in normal programs, they can sometimes
be found in the unintentional instruction streams found by jumping into the middle of
intended instructions. Most importantly for our purposes, the x86 ISA actually includes
four opcodes that perform a return instruction: c3 (near return, the version used in the
System V ABI), c2 imm16 (near return with stack unwind), cb (far return), and ca imm16
(far return with stack unwind). The variants with stack unwind, having popped the return
address off the stack, increment the stack pointer by imm16 bytes; this is useful in calling
conventions where arguments are callee-cleaned. The far variants pop %cs off the stack as
well as %eip. All four variants can be used in return-oriented programming, though using
the three besides c3 is more difﬁcult: for the far variants, the correct code segment must
be placed on the stack; for the stack-unwind variants, a stack underﬂow must be avoided.
ACM Journal Name, Vol. V, No. N, Month 20YY.
8
·
Ryan Roemer et al.
3.1.6 Buffer Overﬂows on the x86. We have already discussed buffer overﬂow tech-
niques generally in Section 2. Because of its dominant position as the processor in general-
purpose desktop computers, the x86 has received substantial attention as the target of low-
level attacks such as buffer overﬂows. Its particularly useful architectural features, from
an attacker’s perspective, are:
the placement of activation record metadata such as the
saved return address on the stack, where it can be overwritten by a buffer overﬂow; and
the unstructured calling convention and the use of frame pointer, which makes possible
chained return-into-libc attacks [Nergal 2001]. For more information, see, e.g., the survey
by Erlingsson [Erlingsson 2007].
3.1.7 The x86 and Return-Oriented Programming. Several features of the x86 ISA
make it an attractive platform for return-oriented programming. The instruction encoding is
variable-length and unaligned, giving unintended instructions if one jumps into the middle
of certain instructions. The instruction set is large and its encoding is dense, so a variety of
instructions are available for use even in relatively small programs. There are few general-
purpose registers, so it is often possible to coordinate dataﬂow in a register between two
useful instruction sequences. The calling convention uses the stack, which an attacker can
often overwrite; and it is relatively unstructured, so instruction sequences ending in %ret
can generally be chained together.
3.2 The SPARC Architecture
The SPARC platform differs from x86 in almost every signiﬁcant architectural feature.
Many of the features of the x86 that make it attractive for return-oriented programming
are lacking on the SPARC. SPARC is a load-store RISC architecture, whereas the x86 is
memory-register CISC. SPARC instructions are ﬁxed-width (4 bytes for 32-bit programs)
and alignment is enforced on instruction reads, whereas x86 instructions are variable-
length and unaligned. The SPARC is register-rich, whereas the x86 is register-starved.
The SPARC calling convention is highly structured and based on register banks, whereas
the x86 uses the stack in a free-form way. SPARC passes function arguments and the return
address in registers, the x86 on the stack. The SPARC pipelining mechanism uses delay
slots for control transfers (e.g., branches), whereas the x86 does not.
Although the rest of this section only surveys the SPARC features relevant to stack over-
ﬂows and program control hijacking, more detailed descriptions of the SPARC architecture
are variously available [SPARC Int’l, Inc. 1994; SPARC Int’l, Inc. 1996; Paul 1999].
3.2.1 Registers. Each SPARC function has access to 32 general purpose integer reg-
isters: eight global registers %g[0-7], eight input registers %i[0-7], eight local registers
%l[0-7], and eight output registers %o[0-7]. The SPARC %g[0-7] registers are globally
available to a process, across all stack frames. The special %g0 register cannot be set and
always retains the value 0.
The remaining integer registers are available as independent sets per stack frame. Ar-
guments from a calling stack frame are passed to a called stack frame’s input registers,
%i[0-7]. Register %i6 is the frame pointer (%fp), and register %i7 contains the return
address of the call instruction of the previous stack frame. The local registers %l[0-7]
can be used to store any local values.
The output registers %o[0-7] are set by a function calling a subroutine. Registers
%o[0-5] contain function arguments, register %o6 is the stack pointer (%sp), and regis-
ter %o7 contains the address of the call instruction.
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
9
·
3.2.2 Register Banks. Although only 32 integer registers are visible within a stack
frame, SPARC hardware typically includes eight global and 128 general purpose registers.
The 128 registers form banks or sets that are activated with a register window that points
to a given set of 24 registers as the input, local, and output registers for a stack frame.
On normal SPARC subroutine calls, the save instruction slides the current window
pointer to the next register set. The register window only slides by 16 registers, as the out-
put registers (%o[0-7]) of a calling stack frame are simply remapped to the input registers
(%i[0-7]) of the called frame, thus yielding eight total register banks. When the called
subroutine ﬁnishes, the function epilogue (ret and restore instructions) slides back the
register window pointer.
SPARC also offers a leaf subroutine, which does not slide the register window. For this
paper, we focus exclusively on non-leaf subroutines and instruction sequences terminating
in a full ret and restore.
When all eight register banks ﬁll up (e.g., more than eight nested subroutine calls),
additional subroutine calls evict register banks to respective stack frames. Additionally,
all registers are evicted to the stack by a context switch event, which includes blocking
system calls (like system I/O), preemption, or scheduled time quantum expiration. Return
of program control to a stack frame restores any evicted register values from the stack to
the active register set.
3.2.3 The Stack and Subroutine Calls. The basic layout of the SPARC stack is illus-
trated in Figure 1. On a subroutine call, the caller writes the address of the call instruction
into %o7 and branches program control to the subroutine.
After transfer to the subroutine, the ﬁrst instruction is typically save, which shifts the
register window and allocates new stack space. The top stack address is stored in %sp
(%o6). The following 64 bytes (%sp - %sp+63) hold evicted local / input registers. Stor-
age for outgoing and return parameters takes up %sp+64 to %sp+91. The space from
%sp+92 to %fp is available for local stack variables and padding for proper byte align-
ment. The previous frame’s stack pointer becomes the current frame pointer %fp (%i6).
A subroutine terminates with ret and restore, which slides the register window back
down and unwinds one stack frame. Program control returns to the address in %i7 (plus
eight to skip the original call instruction and delay slot). By convention, subroutine return
values are placed in %i0 and are available in %o0 after the slide. Although there are versions
of restore that place different values in the return %o0 register, we only use %o0 values
from plain restore instructions in this paper.
3.2.4 Buffer Overﬂows and Return-into-Libc. SPARC stack buffer exploits typically
overwrite the stack save area for the %i7 register with the address of injected shell code or
an entry point into a libc function. As SPARC keeps values in registers whenever possible,
buffer exploits usually aim to force register window eviction to the stack, then overﬂow the
%i7 save area of a previous frame, and gain control from the register set restore of a stack
frame return.
In 1999, McDonald published a return-into-libc exploit of Solaris 2.6 on SPARC [Mc-
Donald 1999], modeled after Solar Designer’s original exploit. McDonald overﬂowed a
strcpy() function call into a previous stack frame with the address of a “fake” frame
stored in the environment array. On the stack return, the fake frame jumped control (via
%i7) to system() with the address of “/bin/sh” in the %i0 input register, producing a
ACM Journal Name, Vol. V, No. N, Month 20YY.
10
·
Ryan Roemer et al.
Address
Low Memory
%sp
%sp
- %sp+31
%sp+32 - %sp+63
%sp+64 - %sp+67
%sp+68 - %sp+91
%sp+92 - up
%sp+
%fp-
%fp
- %fp+31
%fp
%fp+32 - %fp+63
%fp+64 - %fp+67
%fp+68 - %fp+91
%fp+92 - up
High Memory
Storage
Top of the stack
Saved registers %l[0-7]
Saved registers %i[0-7]
Return struct for next call
Outgoing arg. 1-5 space for caller
Outgoing arg. 6+ for caller (variable)
Current local variables (variable)
Top of the frame (previous %sp)
Prev. saved registers %l[0-7]
Prev. saved registers %i[0-7]
Return struct for current call
Incoming arg. 1-5 space for callee
Incoming arg. 6+ for callee (variable)
Fig. 1. SPARC Stack Layout
Fig. 2. Layout of an ordinary program
Fig. 3. Layout of a return-oriented program
shell. Other notable exploits include Ivaldi’s [Ivaldi 2007] collection of various SPARC
return-into-libc examples ranging from pure return-into-libc attacks to hybrid techniques
for injecting shell code into executable segments outside the stack.
4. RETURN-ORIENTED PROGRAMMING
4.1 Principles of Return-Oriented Programming
In this section, we lay out the principles of return-oriented programming, comparing it to
the traditional way in which computers are programmed for legitimate purposes. While
our examples draw on x86 assembly, the principles are widely applicable.
The principles we describe are the result of working out the implications of the fol-
lowing: How should programs be constructed if the stack pointer takes the place of the
instruction pointer?
4.1.1 Program Layout. An ordinary program is made up of a series of machine in-
structions laid out in the program’s text segment. Each instruction is a byte pattern that,
interpreted by the processor, induces some change in the program’s state. The instruction
pointer governs what instruction is to be fetched next; it is automatically advanced by the
ACM Journal Name, Vol. V, No. N, Month 20YY.
insninsninsninsninsninstructionpointerstackpointerC libraryinsns … retinsns … retinsns … retinsns … retinsns … retReturn-Oriented Programming
11
·
Fig. 4. Ordinary and return-oriented nop sleds
Fig. 5. Ordinary and return-oriented immediates
processor after each instruction, so that instructions are interpreted in sequence, barring a
jump or other transfer of control ﬂow. This situation is illustrated in Figure 2.
A return-oriented program is made up of a particular layout of the stack segment. Each
return-oriented instruction is a word on the stack pointing to an instruction sequence (in
the sense of ordinary programs above) somewhere in the exploited program’s memory.
(We can think of these pointers as being byte patterns in an idiosyncratic new instruction
set.) The stack pointer governs what return-oriented instruction sequence is to be fetched
next, in the following way. The execution of a ret instruction has two effects: ﬁrst, the
word to which %esp points is read and used as the new value for %eip; second, %esp is
incremented by 4 bytes to point to the next word on the stack. If the instruction sequence
now being executed by the processor also ends in a ret, this process will be repeated, again
advancing %esp and inducing execution of another instruction sequence. This situation is
illustrated in Figure 3.
Whereas for ordinary programs the processor takes care of fetching the next instruction
and advancing the instruction pointer, in return-oriented programming it is the ret instruc-
tion at the end of each instruction sequence that induces fetch-and-decode in a return-
oriented program, like the carriage return key on a manual typewriter. (The processor still
takes care of advancing %eip within an instruction sequence, but this is now in effect an
implementation detail, the way a single x86 instruction might be implemented internally
by a series of smaller microinstructions.)
4.1.2 No-op Instructions. The simplest instruction is the no-op, which has no effect
except advancing the program counter. Instruction sets generally include such an instruc-
tion; on the x86, one can use nop. In return-oriented programming, a no-op is simply a
stack word containing the address of a ret instruction. These can be composed to form a