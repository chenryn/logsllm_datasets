### Performance Comparison and Analysis

- **Performance Overhead of BINSEC/REL:**
  - The overhead of BINSEC/REL compared to our best setting for SE (SE+FlyRow) in terms of speed (#I/s) is only 1.8 times. This indicates that the additional cost of constant-time (CT) verification is minimal when added to standard symbolic execution (SE). This is consistent with the fact that our simplifications discard most insecurity queries, leaving only the exploration queries, which are also part of SE.

- **Comparison of FlyRow and PostRow:**
  - FlyRow significantly outperforms PostRow. PostRow is not designed for relational verification and must reason about pairs of memory. Additionally, PostRow's simplifications are not propagated along the execution and must be recomputed for every query, leading to a significant overhead in simplification time. In contrast, FlyRow models a single memory containing relational values and propagates these simplifications throughout the symbolic execution process.
  - FlyRow also improves the performance of standard SE by a factor of 450, performing much better than PostRow in our experiments.

### Conclusion (RQ3, RQ4, RQ5)

- **BINSEC/REL Performance:**
  - BINSEC/REL performs significantly better than previous approaches to relational symbolic execution, achieving a 715x speedup over RelSE. The primary source of this improvement is the on-the-fly simplification provided by FlyRow, which offers a 569x speedup over RelSE and reduces the number of insecurity queries by 60%.
  - In our context, FlyRow outperforms state-of-the-art binary-level simplifications, as they are not designed to efficiently handle relational properties and introduce significant simplification overhead at every query.
  - While fault-packing and untainting are effective over RelSE, their impact is much less pronounced once FlyRow is activated. Fault-packing can still be useful when report precision is not the primary concern.
  - Finally, in our experiments, FlyRow significantly improves the performance of standard SE, providing a 450x speedup.

### Discussion

#### Implementation Limitations

- Our implementation has three main limitations commonly found in research prototypes:
  - It does not support dynamic libraries; executables must be statically linked or stubs must be provided for external function calls.
  - It does not implement predefined syscall stubs.
  - It does not support floating-point instructions.
- These issues are orthogonal to the core contribution of this paper and the first two are primarily engineering tasks. Despite these limitations, the prototype is already efficient on real-world case studies.

#### Threats to Validity in Experimental Evaluation

- We evaluated the effectiveness of our tool on several known secure and insecure real-world cryptographic binaries, many of which were taken from prior studies. All results have been cross-checked with the expected output and manually reviewed in case of deviation.
- Our prototype is implemented as part of BINSEC [55], whose efficiency and robustness have been demonstrated in prior large-scale studies on both adversarial code and managed code [61], [74]â€“[76]. The IR lifting part has been positively evaluated in external studies [53], [77], and the symbolic engine features aggressive formula optimizations [66].
- All our experiments use the same search heuristics (depth-first), and for bounded verification, smarter heuristics do not change the performance. We also tested Z3 and confirmed the better performance of Boolector.
- We compare our tool to our own versions of SC and RelSE, primarily because none of the existing tools can be easily adapted for our setting, and this allows comparing very close implementations.

### Related Work

#### Symbolic Execution for Information Flow

- **SC and RelSE:**
  - Type-based SC and RelSE techniques target different languages and scenarios. For example, RelSym [49] targets Java and C, while IF-exploit [41] and Type-SC-SE [42] focus on specific aspects of non-interference.
  - Casym [17] uses LLVM and combines SC with over-approximation, while IF-low-level [40] uses binary SC and invariants. CacheD [20] uses binary-level RelSE with simplifications.
- **BINSEC/REL:**
  - BINSEC/REL, our tool, achieves a significant speedup and handles more complex scenarios, as shown in Table VIII.

#### Relational Symbolic Execution

- **Shadow Symbolic Execution:**
  - Shadow Symbolic Execution [48], [78] aims to efficiently test evolving software by focusing on new behaviors introduced by patches. It shares formulas across two executions in the same SE instance.
- **Relational Symbolic Execution:**
  - The term "relational symbolic execution" was coined more recently [49], but this work is limited to a simple toy imperative language and does not address scalability.
- **Our Approach:**
  - We maximize sharing between pairs of executions, similar to ShadowSE, but we also develop specific optimizations tailored to binary-level CT. Experiments show that our optimizations are crucial in this context.

#### Symbolic Execution for Constant-Time

- **Previous Works:**
  - Only three previous works in this category achieve scalability, but at the cost of either precision or soundness. Wang et al. [20] and Subramanyan et al. [43] sacrifice soundness for scalability (no bounded verification). Brotzman et al. [17] sacrifice precision for scalability (no bug-finding).
- **Our Approach:**
  - We adopt a different approach and scale through heavy formula optimizations, allowing us to maintain both correct bug-finding (BF) and correct bounded verification (BV). Our method is faster than these approximated ones and is the first technique for CT verification at the binary level that is correct for BF and BV and scales on real-world cryptographic examples. Moreover, our technique is compatible with previous approximations for extra-scaling.

### Conclusion

- **Summary:**
  - We tackle the problem of designing an automatic and efficient binary-level analyzer for constant-time, enabling both bug-finding and bounded verification on real-world cryptographic implementations. Our approach is based on relational symbolic execution together with original dedicated optimizations that reduce the overhead of relational reasoning and allow for a significant speedup.
  - Our prototype, BINSEC/REL, is highly efficient compared to alternative approaches. We used it to perform extensive binary-level CT analysis for a wide range of cryptographic implementations and to automate and extend a previous study of CT preservation by compilers. We found three vulnerabilities that slipped through previous manual and automated analyses, and we discovered that `gcc -O0` and backend passes of `clang` introduce violations of CT that are out of reach of state-of-the-art CT verification tools at the LLVM or source level.