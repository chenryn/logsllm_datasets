---
## Page 180
158
第8章从Web端管理RabbitMQ
./rabbitmqctl stop
$ ./rabbitmq-server -detached
Activating RabbitMQ plugins ...
6plugins activated:
* amqp_client-2.7.0
*mochiweb-1.3-rmq2.7.0-git
* rabbitmq_management-2.7.0
*rabbitmq_management_agent-2.7.0
*rabbitmq_mochiweb-2.7.0
* webmachine-1.7.0-rmq2.7.0-hg
如果一切正常的话，你可以用浏览器访问http://localhost:55672/mgmt/，它会弹
出一个认证窗口，需要你输入用户名和密码。此时你可以输人guest作为用户名
和密码。一旦信息提交之后，你就会看到如图8.1所示的管理界面。如果你没有在
localhost上运行服务器的话，那么就需要修改URL来适应你的环境。
根据上面这些简单的步骤，插件就已经设置好并且可以运行了。现在该学习如
何使用它了。那么让我们这就进入下一节，通过敲击鼠标来管理RabbitMQ吧。
8.2从Web控制台来管理RabbitMQ
让我们重新审视图8.1。如你所见，最上面有个导航栏，在此你可以浏览
Connections、Exchanges或者Queues等项目。然后，该界面展示服务器状态的概览。
你可以看到所有的队列有多少条消息正准备投递出去，有多少条消息等待确认，以
及消息总数是多少。这些信息对调试应用程序很有帮助，举个例子来说，等待确认
的消息总数告诉你消费者消费消息的情况。如果该数字过高，那么可能就是消费者
消费消息变慢的信号了。好处是你可以在前台页面就可以看到该信息，而不需要敲
击 20次才能看到。Web控制台能做的远不止这些。在本节中，你将学会如何监控
ErlangVM，找出运行中的进程总数，同时也能看到如何将配置文件导出为JSON格
式，以及如何将配置文件导回服务器。
8.2.1监控ErlangVM
如果把页面往下拉一点的话，你会看到一些关于运行着Rabbit的Erlang节点
的有用信息。就如你在第3章看到的那样，你可以使用节点名称信息来远程连接到
RabbitMQ，并执行高级管理操作。另一个有趣的数字是Erlang进程总数：如果到
---
## Page 181
8.2从Web控制台来管理RabbitMQ
159
达上限的话，RabbitMQ将停止工作。你可以通过修改rabbitmq-server初始脚
本的SERVER_ERL_ARGS的+P选项来增加上限²。其他重要数值是安装的RabbitMQ
和Erlang的版本。当你向RabbitMQ邮件列表发送bug报告时，你应该附上这些值。
因为这样做能让那些诊断问题的人处理起来更容易，也更能帮到你。
在下一张表格里，你可以看到RabbitMQ当前正在监听哪个端口和主机。有多
少次你抓破脑袋也想不出为什么连接不上服务器，而最后才发现问题在于错误的连
接选项？在这里你可以查阅正确的选项，来避免类似的问题再次发生。
8.2.2从JSON文件导入配置
当你浏览到Overview页面的结尾处时，会发现一个有趣的功能：你可以导出当
前服务器的配置到一个JSON文件。你可以编辑之后再导回去。让我们看看当前机
器上安装的服务器配置是怎样的。单击DownloadBrokerConfiguration按钮并把文
件存储到硬盘。下列清单展示了格式化后的文件。根据你的设置，你下载的文件可
能会略有不同。
清单8.1RabbitMQJSON配置
"rabbit_version":"2.3.1",
"users":
[{"name":"guest",
"password_hash":"6r578x5zS5/8oo1acUUiebYkRiU=",
"administrator":true}],
"vhosts":[{"name":"/"}]，
"permissions":[{"user":"guest"，"vhost":"/"，"configure":".*
"write":".*"，"read"：".*"}]，
'queues":[
{"name":"smart_proxy"，"vhost":"/","durable":true
"auto_delete":false,"arguments":{}}
{"name":"control"，"vhost":"/"，"durable":true
"exchanges":[
{"name":"char_count_server"，"vhost":"/","type":"direct"
"durable":true,"auto_delete":false,"internal":false,
"arguments":{)},
2该选项所在文件的位置会因为你安装RabbitMQ方式的不同而不同。如果你按照第1章的安装指引进
行安装的话，那么rabbitmq-server就位于sbin目录中。
---
## Page 182
160
第8章从Web端管理RabbitMQ
{"name":"control"，"vhost":"/"，"type":"topic",
"durable":true,"auto_delete":false,"internal":false,
"arguments":{}},
{"name":"char_count"，"vhost":"/"，"type":"direct",
"durable":true,"auto_delete":false,"internal":false
"arguments":{}}],
"bindings":[]}
为了便于测试，我们尝试添加一个叫作book的新虚拟主机。将vhost行修改
为下列代码片段：
"vhosts": [.("name":"/"), {"name":"book"}],
保存更改之后，单击Upload按钮，选择修改过的json文件进行上传。选择该
文件之后，单击UploadBrokerConfiguration按钮。如果一切正常的话，你应该看到
如图8.2所示的确认消息。通过使用这种简单的机制，更新服务器配置变得非常方便。
同样，你可以导出配置文件，并加上版本信息。这样你可以记录不同时间点上的服
务器配置。每次你对配置进行了修改之后，就可以保存旧的配置以防万一。
让我们继续探索Management插件提供的各种功能。在本例中，让我们看看你
如何管理可以访问服务器的用户。
localhost:55672/#/import-succeeded
RabbitMQ
User:guest
Overview
Connections
ExchangesQueuesUsersVirtual Hosts
Virtual host:Al
Channels
Import succeeded
Yourdeintnsweremrtedsuccsy
HTTP APICommand ne
pdateevery5seconds
图8.2导入JSON配置
8.3从Web控制台管理用户
下一步是学习如何从Web界面管理用户。在本书中，你一直使用默认的guest
用户，对于学习目的来说这倒没什么；但是如果你想要在产品环境中运行RabbitMQ
的话，就需要采取一些预防措施，创建你自己的用户和密码。所以在本节中，你将
学习如何从Web控制台来完成简单的用户创建。用户管理并不只是用户创建；你也
---
## Page 183
8.3从Web控制台管理用户
161
需要赋予用户权限。8.3.2节会介绍这一点。
8.3.1创建用户
还记得当你第一次打开管理页面的时候，页面弹出表单让你输入用户名和密码，
随后你输人了guest：guest吗？是时候换个账户了，因为你不会想以系统默认的
用户设置来运行。单击上面导航菜单的Users 连接，然后你应该看到如图8.3所示
的对话框。
Clcalhost:55672/#/users
公品
RabbitMQ
User: guest
Overview
connection
Queues
Users
Virtual Hosts
Virtual host:All
Users
YAll users
Name
Tags
Can access virtual hosts
guest
administrator
phpamqplib
rpc_user
(7)
Add/update ause
Username: rmqinaction
Password:
Tags:aoministrator
(7)
Admin][Montorig][Man
ON]
Add user
图8.3创建新用户
页面展示了系统的当前用户列表。列表下面是一张表单，可以用来添加新用户。
如图8.3所示，创建了一个名为rmqinaction的用户并且密码也是rmqinaction。
最后，通过在Tags字段输人administrator来将用户设置成管理员。Management
插件支持用户角色的概念，用户角色决定了用户可以做什么。你的用户可以成
为management角色，这意味着他们可以登录到这个界面。如果你将用户设置成
monitoring角色，那么他们就能查看连接和节点相关的信息。rmqinaction用
户角色被设置成了administrator，那么他就被授予了访问Management插件提供
的所有功能。在图8.4中，你可以看到新用户的确认信息。
---
## Page 184
162
第8章从Web端管理RabbitMQ
k
☆品
bRabbitMQ
User:guest
Overview
Users
Virtual Host
Users
All users
Name
Tags
sano
administrator
phpamqplib_testbed
Noacces
(2)
Username:
Password
(confirm）
Tags
(?)
Adduser
图8.4新用户确认
8.3.2管理用户的权限
正如你从图8.5所看到的那样，你刚刚创建的那个用户没有权限访问任何虚拟
主机。现在我们来为他授予权限。让我们授予他服务器配置和队列读写权限。单击
用户名称，来到权限设置对话框，如图8.5所示。
使用图8.5中显示的Management插件提供的默认设置，因此只需单击 Set
permission按钮来保存变更。
作为用户管理的最后一处需要注意的地方，你可以从这张页面通过单击Delete
按钮删除用户，如图8.6所示。
用户设置好了之后，下一步是学习如何管理队列和交换器。让我们仍然从浏览
器上来完成这些操作。
---
## Page 185
8.4从Web控制台管理交换器和队列
163
RabbitMQ
User: guest
Overview
Exchanges
Queues
Users
VirtualHost
/irtualhost:Ail
User: rmqinaction
Overview
Tags
lstrato
Setpermission
Virtual Host:
Configure regexp:
Writeregexp:
Read regexp:
图8.5管理用户的权限
☆
bRabbitMQ
User:guest
Overview
Connections
Channets
Exchanges
Queues
VirtualHost
hrtualhost:A
User: rmqinaction
Overview
Tags
hinistrato
Can log in with password
Permissions
Setpermission
Delete this user
Delete
图8.6删除用户
8.4
从Web控制台管理交换器和队列
到目前为止你所做的一切都可以通过rabbitmqctl脚本来完成。但是，对于
rabbitmqctl脚本来说，如果你想要创建交换器或者队列，那么你不得不求助于
类库并编写一段脚本才行。而使用Management插件，你从浏览器就能创建交换器。
---
## Page 186
164
第8章从Web端管理RabbitMQ
在导航菜单上单击Exchanges按钮。你会得到服务器上当前交换器的列表，如图8.7