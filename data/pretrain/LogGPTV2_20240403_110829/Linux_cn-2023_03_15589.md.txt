---
author: Jim Hall
category: 软件开发
comments_data:
- date: '2023-09-10 19:07:41'
  message: 请问演示cat解析命令行的代码，8行和13行，option应该为char类型吧？
  postip: 103.1.158.229
  username: 来自香港的 Chrome 116.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2385
date: '2023-03-02 14:10:46'
editorchoice: false
excerpt: 通过使用命令行让用户告诉程序要什么，可以让程序更加灵活。
fromurl: https://opensource.com/article/21/8/short-option-parsing-c
id: 15589
islctt: true
largepic: /data/attachment/album/202303/02/141038srs54y5t4pv3r1ym.jpg
permalink: /article-15589-1.html
pic: /data/attachment/album/202303/02/141038srs54y5t4pv3r1ym.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 通过使用命令行让用户告诉程序要什么，可以让程序更加灵活。
tags:
- 参数
thumb: false
title: 在 C 语言中使用 getopt 解析命令行短选项
titlepic: true
translator: toknow-gh
updated: '2023-03-02 14:10:46'
---
> 
> 通过使用命令行让用户告诉程序要什么，可以让程序更加灵活。
> 
> 
> 
![](/data/attachment/album/202303/02/141038srs54y5t4pv3r1ym.jpg "Person programming on a laptop on a building")
在已经知道要处理什么文件和对文件进行哪些操作的情况下，编写处理文件的 C 语言程序就很容易了。如果将文件名“硬编码”在程序中，或者你的程序只以一种方式来处理文件，那么你的程序总是知道要做什么。
但是如果程序每次运行时能够对用户的输入做出反应，可以使程序更灵活。让用户告诉程序要处理什么文件，或者以不同的方式完成任务，要实现这样的功能就需要读取命令行参数。
### 读取命令行
一个 C 语言程序可以用如下声明开头：
```
int main()
```
这是启动 C 程序最简单的形式。但如果在圆括号中加入标准参数，你的程序就可以从命令行中读取选项了：
```
int main(int argc, char **argv)
```
`argc` 表示命令行中的参数个数。它总是一个至少为 1 的数。
`argv` 是一个二级指针，它指向一个字符串数组。这个数组中保存的是从命令行接收的各个参数。数组的第一个元素 `*argv[0]` 是程序的名称。`**argv` 数组的其它元素包含剩下的命令行参数。
下面我将写一个简单的示例程序，它能够回显通过命令行参数传递给它的选项。它跟 Linux 的 `echo` 命令类似，只不过我们的程序会打印出程序名。同时它还会调用 `puts` 函数将命令行选项按行打印输出。
```
#include 
int
main(int argc, char **argv)
{
  int i;
  printf("argc=%d\n", argc); /* debugging */
  for (i = 0; i 
void
copyfile(FILE *in, FILE *out)
{
  int ch;
  while ((ch = fgetc(in)) != EOF) {
    fputc(ch, out);
  }
}
int
main(int argc, char **argv)
{
  int i;
  FILE *fileptr;
  for (i = 1; i 
int getopt(int argc, char **argv, char *optstring);
```
`optstring` 是由所有合法的选项字符组成的字符串。比如你的程序允许的选项是 `-E` 和 `-n`， 那么 `optstring` 的值就是 `"En"`。
通常通过在循环中调用 `getopt` 来解析命令行选项。每次调用时 `getopt` 会返回找到的下一个短选项，如果遇到无法识别的选项则返回 `'?'`。当没有更多短选项时它返回 `-1`，并且设置全局变量 `optind` 的值指向 `**argv` 中所有段选项之后的第一个元素。
下面看一个简单的例子。这个演示程序没有实现 `cat` 命令的所有选项，但它只是能够解析命令行。每当发现一个合法的命令行选项，它就打印出相应的提示消息。在你自己的程序中，你可能会根据这些命令行选项执行变量赋值等者其它操作。
```
#include 
#include 
int
main(int argc, char **argv)
{
  int i;
  int option;
  /* parse short options */
  while ((option = getopt(argc, argv, "bEnsTv")) != -1) {
    switch (option) {
    case 'b':
      puts("Put line numbers next to non-blank lines");
      break;
    case 'E':
      puts("Show the ends of lines as $");
      break;
    case 'n':
      puts("Put line numbers next to all lines");
      break;
    case 's':
      puts("Suppress printing repeated blank lines");
      break;
    case 'T':
      puts("Show tabs as ^I");
      break;
    case 'v':
      puts("Verbose");
      break;
    default:                          /* '?' */
      puts("What's that??");
    }
  }
  /* print the rest of the command line */
  puts("------------------------------");
  for (i = optind; i 
作者：[Jim Hall](https://opensource.com/users/jim-hall) 选题：[lujun9972](https://github.com/lujun9972) 译者：[toknow-gh](https://github.com/toknow-gh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出