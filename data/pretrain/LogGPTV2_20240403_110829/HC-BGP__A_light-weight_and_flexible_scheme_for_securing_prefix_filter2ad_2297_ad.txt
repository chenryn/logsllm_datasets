### 6. Incremental Deployment

In Section 5, we demonstrated that by imposing partial ordering, the entire BGP system can reach a secure state, assuming full deployment. However, incremental deployability is a critical property for practical adoption. We enhance HC-BGP under partial deployment with two additional rules:

1. **Constructing Monitoring Barrier by Participating ASes:**
   The current design of HC-BGP under partial deployment is not guaranteed to be secure because legacy ASes might send the hash value to an attacker before the legitimate route propagates to the Tier-1 ASes. In the example shown in Figure 6, if AS1 does not deploy HC-BGP, M receives the update via AS1 at time 00:02, polluting AS3 and AS4. In this case, the value is leaked from AS1 to M.
   
   To overcome this problem, we develop an additional rule that uses all participating ASes to monitor and prevent the leaking of hash values to attackers from their legacy neighbors. We first assume that each AS knows whether its neighbor has deployed HC-BGP. Specifically, when ASi receives an updated route from its non-provider legacy neighbor ASi+1, ASi will first check if the updated value has propagated to Tier-1 ASes based on guideline (3). If not, ASi delays propagating the route from ASi+1 until the value is propagated to Tier-1 ASes. Thus, all participating ASes like ASi construct a monitoring barrier, effectively delaying the propagation of updated hash values to the attacker. This rule enables the deployed ASes to stop leaking the hash value through the legacy ASes to the attacker.

2. **Conflict Detection:**
   Even with a monitoring barrier, we cannot guarantee that all ASes are free from pollution under partial deployment. Thus, we rely on participating ASes to detect conflicting hash values. In the same example in Figure 6, AS4 receives two inconsistent routes, i.e., two different origin ASes announcing p with the same hi(s), indicating the occurrence of hijacking. There are multiple ways that AS4 can identify the attacker AS using the knowledge of the topology. For example, the presence of a link between AS1 and M but no link between AS3 and AS0 indicates that M learns the message from AS1. We leave the details of such a scheme as future work.

### 7. Discussion

We discuss two corner cases and their solutions:

1. **Resilience to Message Loss:**
   Lost messages could cause inconsistency in HC-BGP. Since BGP uses the reliable transport protocol TCP, BGP packet loss is unlikely to happen. However, routers can go down temporarily due to maintenance or failure. If any message, i.e., both initialization and hash chain update, arrives in between, then the router may miss it. Our solution is that the neighbor router temporarily caches the messages and resends them whenever the router is up. Note that after the BGP session is re-established, a neighbor needs to exchange the entire routing table, which includes the hash values.

2. **Dealing with the Ordering of the Initial Announcement:**
   Compared with previous approaches, HC-BGP does not have a central trust entity (PKI) to answer the "who can announce what" question. Therefore, at any time, the attacker can start the initialization process independently to create the initial hash value of prefix p. Assuming an attacker announces p at time t1, and the owner announces p at time t2. We analyze the outcome depending on the ordering of events:
   - If t1 ≥ t2, i.e., the attacker announces after the owner, other ASes can reject the bogus route due to mismatch in hash values.
   - If t1 ≈ t2, the partial ordering algorithm can ensure most ASes accept the valid route.
   - If t1 < t2, i.e., the attacker announces p much earlier, we discuss two cases depending on the prefix type:
     - If p is unallocated, i.e., a bogon prefix, such routes can be filtered using a bogon filter list.
     - If prefix p is allocated to the owner but is never announced, the attacker can successfully hijack it. However, since these prefixes are unused, there is no legitimate traffic destined to it, leading to minimal impact. Moreover, it is very easy for the owner to detect it since the owner will also receive the bogus route.

### 8. Evaluation

In this section, we first demonstrate that HC-BGP’s partial ordering algorithm introduces negligible propagation delays for routing updates. We then evaluate the benefit of partial deployment.

#### 8.1 Experimental Evaluation

We extend an existing simulator [24] used to study defenses against general prefix hijacking attacks, including sub-prefix hijacking. The simulator takes as input the AS-level topology from the public route repository [2], containing 23,289 ASes and 55,352 edges. The topology is labeled with the inferred AS relationship from Gao’s algorithm [9]. The simulator models route propagation with the route selection guided by the routing decision process driven by relationship-based routing policies. The simulator is able to simulate different prefix hijacking scenarios and generate a set of polluted ASes and the AS-level paths to reach hijacked prefixes.

For the cryptographic one-way hash function H[x], we choose to use AES block cipher in the hash construction [15], which is also used in SPV [11]. The hash function is computationally infeasible for the attacker to derive the key x nor to find any other x' such that H[x] = H[x']. We use the default-free routing table from one vantage point in a Tier-1 network from RouteViews. Each prefix in the table is assigned an initial hash chain value, which is propagated to other ASes. The following simulation focuses on sub-prefix hijacking because it is the most difficult to prevent and has a large impact on the Internet.

#### 8.2 Route Propagation Delay

The guidelines of partial ordering in Section 5 impose additional propagation delay to the BGP system, which we quantify here. We first conduct the analysis using 3-day BGP data from RouteViews/RIPE. For each prefix update announced by a monitor non-Tier-1 AS, we compute the additional wait time needed for Tier-1 ASes to receive the update. We first group all updates for the same prefix across multiple vantage points using a previously established method [22] and then compute the time difference between the first update from a non-Tier-1 vantage point and the last update from any Tier-1 vantage point. The time difference conservatively estimates the additional delay due to partial ordering.

Figure 8 shows that in 85% of cases, the additional latency is within 30 seconds. This study gives an accurate estimate of propagation delay increase using real-world data. We also analyze the propagation delay perceived by any AS in the Internet. To study this, we further simulate the effect of imposing partial ordering using SSFNet [1] with the topology of 830 nodes provided by SSFNet. We show the average delay increase to propagate one prefix across all ASes before and after implementing our partial ordering algorithm. Figure 9 shows that 80% of the cases are within 40 seconds. It is slightly larger in SSFNets simulation than in Figure 8, as all ASes are studied instead of just the Tier-1 ASes.

#### 8.3 Efficiency Under Partial Deployment

Quantifying the incremental benefit is important for understanding the adoptability of the protocol. We simulate the security guarantees under partial deployment. This benefit is two-fold:
1. The participating ASes construct a barrier to stop propagating the new hash value to the attacker.
2. They detect hijacking by observing conflicts.

First, we simulate the sub-prefix hijacking, which is much more difficult to prevent, by analyzing the effect of the monitoring barrier under different partial deployment scenarios. In Figure 7, we study how the degree of pollution changes with more deployed ASes. For each experiment, we first randomly select a pair of ASes as the attacker and victim. Then we select the ASes to deploy the scheme using the following strategies:
1. **Resilience:** Select the non-Tier-1 ASes which appear most times on the path from other ASes to any Tier-1 AS. These ASes are important for preventing the pollution of Tier-1 ASes.
2. **Victim-centric:** Select the ASes nearest to the victim in terms of AS path length.
3. **Random:** Select the ASes randomly.

In Figure 7, we see that the victim-centric strategy performs best as it guarantees the route propagated to ASes while preventing the hash value from leaking to the attacker.

We also simulate the likelihood of inconsistency detection. We first randomly select 50 victims. For each victim, 50 attackers are selected randomly. The attacker can perform three types of attacks. For each attack type, we define the detection as follows:
1. **The attacker modifies p’s initial value hn(sp).** An AS detects this if two routes received carry different hn values.
2. **To launch full-prefix hijacking, the attacker intercepts p, hc−1(sp) announced by the new origin, and announces it with its own origin AS.** An AS detects this if the two routes for p use the same hc−1(sp), but different origin ASes.
3. **To launch the sub-prefix hijacking, the attacker replaces the legitimate sub-prefix p1 with another sub-prefix p2.** Similarly, an AS detects it if the two routes received for two different sub-prefixes have the same hash value of the cover-prefix.

For types 1 and 2, certain ASes may not detect the inconsistency as the ASes along the propagation path may select one of them as the best route and propagate it. We focus on simulating the first two types. Type 3 can easily be detected by any ASes because p1 and p2 are disjoint prefixes so that both of them are always propagated.

We study the fraction of ASes capable of observing conflicts under partial deployment. In the simulation, the ASes observing the conflicts act as a legacy AS and propagate the best route of the two. Figure 10 shows the fraction of ASes observing the inconsistencies. The upper bound of 60% is caused by the set of single-homed ASes that never observe two routes to one destination. Once detected, the AS can trace back to the malicious AS hop-by-hop. The malicious AS is usually detected very quickly within a few hops.

### 9. Performance Evaluation

In this section, we evaluate the efficiency of our protocol in terms of computation and storage resource consumption. We compare our solution with S-BGP and its variants.

#### Computational Complexity

As stated in Section 4.3, HC-BGP is computationally efficient due to two key characteristics: the use of inexpensive cryptographic primitives (hash chains) and requiring cryptographic computations in uncommon cases. To accurately assess the computation overhead of our algorithm, we profile the CPU overhead for key generation and verification separately. For objective comparison, we also implement the generation and verification process of the address attestation in S-BGP. Note that we only compare with the first phase, address attestation of S-BGP, for fairness.

We first analyze the computational overhead of individual operations on these two protocols. For S-BGP, the computational overhead of the address attestation part is proportional to the number of updates. Its UpdateNum × Time(encrypt) for the owner and UpdateNum × Time(decrypt) for the receiver, where UpdateNum is the total number of updates per day and the Time() is the expensive asymmetric cryptographic primitive. In our scheme, the computational cost for the owner is (RateoriginChange + RatenewPrefix) × UpdateNum × Time(sign). For the receiver, the cost is (RateoriginChange + RatenewPrefix) × UpdateNum × Time(verify). The Time() here is the complexity of more efficient one-way hash chain primitives. Even without considering the complexity difference of cryptographic techniques, HC-BGP is already 1/(RateoriginChange + RatenewPrefix) times more efficient than S-BGP. From the three-month data, we estimate the benefit is 2.6 × 10^4. The verification involves only one hash operation.

### 10. Conclusion

In this paper, we propose HC-BGP, a new architecture for securing prefix ownership. HC-BGP uses an efficient cryptographic primitive, one-way hash chains, to verify that the current message is sent from the authenticated identity associated with the previous message. We demonstrate how HC-BGP can prevent both full-prefix and sub-prefix hijacking attacks. To further improve efficiency, HC-BGP only requires verification when the origin changes. Instead of requiring a centralized PKI, HC-BGP relies on the existing hop-by-hop trust relationship. It provides a partial ordering algorithm to prevent any malicious network from tampering with the messages.

### References

[1] Scalable Simulation Framework (SSF). http://www.ssfnet.org/homePage.html.
[2] University of Oregon Route Views Archive Project. http://www.routeviews.org.
[3] W. Aiello, J. Ioannidis, and P. McDaniel. Origin authentication in interdomain routing. In CCS’03: Proceedings of the 10th ACM conference on Computer and communications security, pages 165–178, New York, NY, USA, 2003. ACM.
[4] H. Ballani, P. Francis, and X. Zhang. A Study of Prefix Hijacking and Interception in the Internet. In Proc. ACM SIGCOMM, August 2007.
[5] V. J. Bono. 7007 Explanation and Apology. NANOG email on Apr 26, 1997.
[6] P. Boothe, J. Hiebert, and R. Bush. How Prevalent is Prefix Hijacking on the Internet. NANOG 36 Talk, February 2006.
[7] K. Butler, P. McDaniel, and W. Aiello. Optimizing BGP security by exploiting path stability. In Proc. CCS, New York, NY, USA, 2006. ACM.
[8] H. Chan, D. Dash, A. Perrig, and H. Zhang. Modeling Adoptability of Secure BGP Protocol. In Proc. ACM SIGCOMM, 2006.
[9] L. Gao. On Inferring Autonomous System Relationships in the Internet. In Proc. IEEE Global Internet Symposium, 2000.
[10] X. Hu and Z. M. Mao. Accurate Real-time Identification of IP Prefix Hijacking. In Proc. IEEE Security and Privacy, 2007.
[11] Y.-C. Hu, A. Perrig, and M. Sirbu. SPV: A Secure Path Vector Scheme for Securing BGP. In Proc. ACM SIGCOMM, 2004.
[12] M. Lad, D. Massey, D. Pei, Y. Wu, B. Zhang, and L. Zhang. PHAS: A Prefix Hijack Alert System. In Proc. USENIX Security Symposium, 2006.
[13] M. Lad, R. Oliveira, B. Zhang, and L. Zhang. Understanding Resiliency of Internet Topology Against Prefix Hijack Attacks. In Proc. DSN, 2007.
[14] L. Lamport. Password authentication within secure communication. Commun. ACM, 24(11):770–772, 1981.
[15] S. Matyas, C. Meyer, and J. Oseas. Generating Strong One-Way Functions with Cryptographic Algorithm, 1985.
[16] NANOG. YouTube IP Hijacking, February 2008.
[17] J. Ng. Extensions to BGP to Support Secure Origin BGP (soBGP). IETF Draft: draft-ng-sobgp-bgp-extensions-01.txt, November 2002.
[18] J. Qiu and L. Gao. Hi-BGP: A Lightweight Hijack-proof Inter-domain Routing Protocol. Technical report, University of Massachusetts Amherst, 2006.
[19] Stephen Kent, Charles Lynn, and Karen Seo. Secure Border Gateway Protocol (Secure-BGP). IEEE J. Selected Areas in Communications, 2000.
[20] L. Subramanian, V. Roth, I. Stoica, S. Shenker, and R. H. Katz. Listen and Whisper: Security Mechanisms for BGP. In Symposium on NSDI, 2004.
[21] D. Wendlandt, I. Avramopoulos, D. Andersen, and J. Rexford. Don’t Secure Routing Protocols, Secure Data Delivery. In Proc. ACM Workshop on Hot Topics in Networks (HotNets), 2006.
[22] J. Wu, Z. M. Mao, J. Rexford, and J. Wang. Finding a needle in a haystack: Pinpointing significant BGP routing changes in an IP network. In Proc. NSDI, 2005.
[23] H. Yin, B. Sheng, H. Wang, and J. Pan. Securing BGP through keychain-based signatures. In Proceedings of the 15th IWQoS’07, June 2007.
[24] Z. Zhang, Y. Zhang, Y. C. Hu, and Z. M. Mao. Practical Defenses Against BGP Prefix Hijacking. In Proc. ACM CoNEXT, 2007.
[25] X. Zhao, D. Pei, L. Wang, D. Massey, A. Mankin, S. F. Wu, and L. Zhang. An analysis of BGP multiple origin AS (MOAS) conflicts. In Proc. IMW, pages 31–35, New York, NY, USA, 2001. ACM.