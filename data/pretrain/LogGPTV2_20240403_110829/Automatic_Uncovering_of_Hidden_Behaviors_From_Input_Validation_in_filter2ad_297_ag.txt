to solve our particularly targeted problem.
Input Validation. Input validation has been well studied in the
literature. However, previous studies either focus on the web
applications [4], [9], [10], [17], [25], [28], [29], [35], [37],
including XSS and SQL injection, or primarily target security
issues on the server-side (e.g., [5], [48]). For Android mobile
apps, recently WARDroid [27] analyzed issues caused by
both the client-side and the server-side. There are also efforts
focusing on input validation in Android system services [13],
[41], [42], or IoT apps for vulnerability discovery [15], [47].
Different from these works, our study intends to recognize
hidden behaviors (or secrets) unknown to normal users in
Android mobile apps.
In addition, there is also a body of research focusing on
how to generate inputs based on UI information of the apps.
For example, AppsPlayground [31], SmartDroid [44], Dyn-
odroid [26], and SMV-Hunters [34] are capable of exploring
mobile app behaviors by recognizing UI elements and gener-
ating appropriate user input accordingly. However, this work
generates input dynamically. In our work, we leverage static
analysis and only focus on string related input generation.
User-input Analysis. There are also numerous works to detect
security issues related to user input in Android apps. For
instance, AsDroid [23] detects stealthy malicious behavior
by monitoring the differences between program behaviors
and the semantics inferred from the UI text, which includes
descriptions for user input. In addition, SUPOR [22] and
UIPicker [30] both apply NLP techniques and supervised
classiﬁcation to detect sensitive privacy data from user input.
Unlike leveraging UI text to detect malicious behaviors, our
work focus on user input in general to recognize its hidden
behaviors through carefully deﬁned validation context that is
recovered from the code of mobile apps.
Malware Detection. Prior efforts also focus on ﬁnding hidden
malware behaviors. For example, TriggerScope [19], Intel-
liDroid [39], and
[11] use symbolic execution to gener-
input (e.g., GPS, messages) for malware de-
ate external
tection. Crowdroid [12], MAMA [32], DroidAPIMiner [3],
DREBIN [6], ICCDetector [40], DroidDetector [43], as well
as
[8], [14], [20], [24], [33] use feature-based algorithms
to detect hidden malicious behaviors in Android apps that
effect the OS or servers. Unlike these works that extract their
features from system execution context (e.g., ICC, system
events, permissions), INPUTSCOPE intends to uncover hidden
behaviors are triggered by user input at the Java bytecode level
and our detection policy is built upon the execution context of
user input validation.
VIII. CONCLUSION
While input validation has been well studied in vulnerabil-
ity discovery, in this paper we have demonstrated that input
validation can also have another important application, namely
exposing input-triggered secrets such as backdoors (e.g., secret
access keys, master passwords, and secret privileged com-
mands) and blacklists of unwanted items (e.g., censorship
keywords, cyber-bulling expressions, and weak passwords). To
understand the severity of such input validations in mobile apps
at scale, we developed a tool, INPUTSCOPE, to automatically
detect both the execution context of user input validation
and the content involved in the validation to automatically
expose hidden functionality. We have tested INPUTSCOPE with
over 150,000 mobile apps and uncovered 12,706 mobile apps
containing backdoor secrets and 4,028 mobile apps containing
blacklist secrets.
13
ACKNOWLEDGMENT
This research was supported in part by National Science
Foundation (NSF) Awards 1657199, 1834215, and by the
German Federal Ministry of Education and Research (BMBF)
through funding for the CISPA-Stanford Center for Cybersecu-
rity (FKZ: 13N1S0762). Any opinions, ﬁndings, conclusions,
or recommendations expressed are those of the authors and not
necessarily of the BMBF and NSF.
REFERENCES
[1] OWASP - Input Validation Cheat Sheet. https://www.owasp.org/index.
php/Input Validation Cheat Sheet.
[2] Soot - A Java optimization framework. https://github.com/Sable/soot.
[3] Yousra Aafer, Wenliang Du, and Heng Yin. Droidapiminer: Mining
api-level features for robust malware detection in android. In Security
and Privacy in Communication Networks - 9th International ICST
Conference, SecureComm 2013, Sydney, NSW, Australia, September 25-
28, 2013, Revised Selected Papers, pages 86–103, 2013.
[4] Muath Alkhalaf, Tevﬁk Bultan, and Jose L. Gallegos. Verifying client-
side input validation functions using string analysis. In Proceedings of
the 34th International Conference on Software Engineering, ICSE ’12,
pages 947–957, Zurich, Switzerland, 2012.
[5] Omar Alrawi, Chaoshun Zuo, Ruian Duan, Ranjita Kasturi, Zhiqiang
Lin, and Brendan Saltaformaggio. The betrayal at cloud city: An
empirical analysis of cloud-based mobile backends. In 28th USENIX
Security Symposium, 2019.
[6] Daniel Arp, Michael Spreitzenbarth, Malte H¨ubner, Hugo Gascon, and
Konrad Rieck. Drebin: Effective and explainable detection of android
malware in your pocket. 02 2014.
[7] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexan-
dre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick
McDaniel. Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. In Proceedings of the
35th ACM SIGPLAN Conference on Programming Language Design
and Implementation, PLDI ’14, pages 259–269, New York, NY, USA,
2014. ACM.
[8] Zarni Aung and Win Zaw. Permission-based android malware detection.
International Journal of Scientiﬁc and Technology Research, 2:228–234,
01 2013.
[9] Davide Balzarotti, Marco Cova, Vika Felmetsger, Nenad Jovanovic, En-
gin Kirda, Christopher Kruegel, and Giovanni Vigna. Saner: Composing
static and dynamic analysis to validate sanitization in web applications.
In Proceedings of the 2008 IEEE Symposium on Security and Privacy,
SP ’08, pages 387–401, Washington, DC, USA, 2008. IEEE Computer
Society.
[10] Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, Radoslaw Bobrowicz,
and VN Venkatakrishnan. Notamper: automatic blackbox detection of
parameter tampering opportunities in web applications. In Proceedings
of the 17th ACM conference on Computer and communications security,
pages 607–618. ACM, 2010.
[11] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn
Song, and Heng Yin. Automatically Identifying Trigger-based Behavior
in Malware, volume 36, pages 65–88. 01 1970.
Iker Burguera, Urko Zurutuza, and Simin Nadjm-Tehrani. Crowdroid:
Behavior-based malware detection system for android. pages 15–26, 10
2011.
[12]
[13] Chen Cao, Neng Gao, Peng Liu, and Ji Xiang. Towards analyzing the
input validation vulnerabilities associated with android system services.
In Proceedings of the 31st Annual Computer Security Applications
Conference, ACSAC 2015, pages 361–370, New York, NY, USA, 2015.
ACM.
[14] Patrick Chan and W.-K Song. Static detection of android malware by
using permissions and api calls. Proceedings - International Conference
on Machine Learning and Cybernetics, 1:82–87, 01 2015.
[15]
Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang
Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang,
and Kehuan Zhang. Iotfuzzer: Discovering memory corruptions in iot
through app-based fuzzing. In Proceedings of the 25th Annual Network
and Distributed System Security Symposium (NDSS’18), San Diego, CA,
February 2018.
[16] Hyunwoo Choi, Jeongmin Kim, Hyunwook Hong, Yongdae Kim,
Jonghyup Lee, and Dongsu Han. Extractocol: Automatic extraction
of application-level protocol behaviors for android applications.
In
Proceedings of the 2015 ACM Conference on Special Interest Group
on Data Communication, SIGCOMM ’15, pages 593–594, New York,
NY, USA, 2015. ACM.
[17] Angelo Ciampa, Corrado Aaron Visaggio, and Massimiliano Di Penta.
A heuristic-based approach for detecting sql-injection vulnerabilities
In Proceedings of the 2010 ICSE Workshop on
in web applications.
Software Engineering for Secure Systems, SESS ’10, pages 43–49, New
York, NY, USA, 2010. ACM.
Static detection of second-
Johannes Dahse and Thorsten Holz.
order vulnerabilities in web applications. In 23rd {USENIX} Security
Symposium ({USENIX} Security 14), pages 989–1003, 2014.
[18]
[19] Yanick Fratantonio, Antonio Bianchi, William K. Robertson, Engin
Kirda, Christopher Kr¨ugel, and Giovanni Vigna. Triggerscope: Towards
detecting logic bombs in android applications. 2016 IEEE Symposium
on Security and Privacy (SP), pages 377–396, 2016.
[20] Hugo Gascon, Fabian Yamaguchi, Daniel Arp, and Konrad Rieck.
Structural detection of android malware using embedded call graphs.
10 2013.
[22]
[21] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham,
Nguyen Nguyen, and Martin C Rinard.
Information Flow Analysis
of Android Applications in DroidSafe. In Proceedings of Network and
Distributed System Security Symposium (NDSS), 2015.
Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu,
Xiangyu Zhang, and Guofei Jiang. Supor: Precise and scalable sensitive
user input detection for android apps. In USENIX Security Symposium,
pages 977–992, 2015.
Jianjun Huang, Xiangyu Zhang, Lin Tan, Peng Wang, and Bin Liang.
Asdroid: Detecting stealthy behaviors in android applications by user
In Proceedings of the
interface and program behavior contradiction.
36th International Conference on Software Engineering, ICSE 2014,
pages 1036–1046, New York, NY, USA, 2014. ACM.
[23]
[24] Takamasa Isohara, Keisuke Takemori, and Ayumu Kubota. Kernel-based
behavior analysis for android malware detection. pages 1011–1015, 12
2011.
[25] Muyang Liu, Ke Li, and Tao Chen. Security testing of web applications:
A search-based approach for detecting sql injection vulnerabilities. In
Proceedings of the Genetic and Evolutionary Computation Conference
Companion, GECCO ’19, pages 417–418, New York, NY, USA, 2019.
ACM.
[26] Aravind Machiry, Rohan Tahiliani, and Mayur Naik. Dynodroid: An
input generation system for android apps. In Proceedings of the 2013
9th Joint Meeting on Foundations of Software Engineering, pages 224–
234. ACM, 2013.
[27] Abner Mendoza and Guofei Gu. Mobile application web api re-
connaissance: Web-to-mobile inconsistencies and vulnerabilities.
In
Proceedings of the 39th IEEE Symposium on Security and Privacy
(SP’18), May 2018.
[28] Maliheh Monshizadeh, Prasad Naldurg, and V. N. Venkatakrishnan.
Mace: Detecting privilege escalation vulnerabilities in web applications.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security, CCS ’14, pages 690–701, Scottsdale,
Arizona, USA, 2014.
[29] Divya Muthukumaran, Dan O’Keeffe, Christian Priebe, David Eyers,
Brian Shand, and Peter Pietzuch. Flowwatcher: Defending against data
In Proceedings of the
disclosure vulnerabilities in web applications.
22Nd ACM SIGSAC Conference on Computer and Communications
Security, CCS ’15, pages 603–615, Denver, Colorado, USA, 2015.
[30] Yuhong Nan, Min Yang, Zhemin Yang, Shunfan Zhou, Guofei Gu, and
XiaoFeng Wang. Uipicker: User-input privacy identiﬁcation in mobile
applications. In 24th USENIX Security Symposium (USENIX Security
15), pages 993–1008, 2015.
14
[41] Kun Yang, Jianwei Zhuge, Yongke Wang, Lujue Zhou, and Haixin
Duan. Intentfuzzer: Detecting capability leaks of android applications.
In Proceedings of the 9th ACM Symposium on Information, Computer
and Communications Security, ASIA CCS ’14, pages 531–536, New
York, NY, USA, 2014. ACM.
[42] Hui Ye, Shaoyin Cheng, Lanbo Zhang, and Fan Jiang. Droidfuzzer:
In Proceedings of
Fuzzing the android apps with intent-ﬁlter tag.
International Conference on Advances in Mobile Computing &#38;
Multimedia, MoMM ’13, pages 68:68–68:74, New York, NY, USA,
2013. ACM.
[43] Zhenlong Yuan, Yongqiang Lu, and Yibo Xue. Droiddetector: Android
malware characterization and detection using deep learning. Tsinghua
Science and Technology, 21:114–123, 02 2016.
[44] Cong Zheng, Shixiong Zhu, Shuaifu Dai, Guofei Gu, Xiaorui Gong,
Xinhui Han, and Wei Zou. Smartdroid: An automatic system for reveal-
ing ui-based trigger conditions in android applications. In Proceedings
of the Second ACM Workshop on Security and Privacy in Smartphones
and Mobile Devices, SPSM ’12, pages 93–104, New York, NY, USA,
2012. ACM.
[45] Chaoshun Zuo and Zhiqiang Lin. Smartgen: Exposing server urls of
mobile apps with selective symbolic execution. In Proceedings of the
26th World Wide Web Conference (WWW’17), Perth, Australia, April
2017.
[46] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. Why does your
data leak? uncovering the data leakage in cloud from mobile apps. In
Proceedings of the 2019 IEEE Symposium on Security and Privacy, San
Francisco, CA, May 2019.
[47] Chaoshun Zuo, Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang.
Automatic ﬁngerprinting of vulnerable ble iot devices with static uuids
from mobile apps. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security, 2019.
[48] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. Authscope:
Towards automatic discovery of vulnerable authorizations in online
In Proceedings of the 24th ACM Conference on Computer
services.
and Communications Security (CCS’17), Dallas, TX, November 2017.
[31] Vaibhav Rastogi, Yan Chen, and William Enck. Appsplayground:
Automatic security analysis of smartphone applications. In Proceedings
of the Third ACM Conference on Data and Application Security and
Privacy, CODASPY ’13, pages 209–220, New York, NY, USA, 2013.
ACM.
[32] Borja Sanz, Igor Santos, Carlos Laorden, Xabier Ugarte-Pedrero, Javier
Nieves, Pablo Bringas, and Gonzalo Alvarez. Mama: Manifest analysis
for malware detection in android. Cybernetics & Systems, 44:469–488,
10 2013.
[33] A. Schmidt, R. Bye, H. Schmidt, J. Clausen, O. Kiraz, Kamer Ali
Y¨uksel, Seyit Camtepe, and Sahin Albayrak. Static analysis of exe-
cutables for collaborative malware detection on android. 06 2009.
[34] David Sounthiraraj, Justin Sahs, Garrett Greenwood, Zhiqiang Lin, and
Latifur Khan. Smv-hunter: Large scale, automated detection of ssl/tls
In Proceedings of
man-in-the-middle vulnerabilities in android apps.
the 21st Annual Network and Distributed System Security Symposium
(NDSS’14), San Diego, CA, February 2014.
[35] Zhendong Su and Gary Wassermann. The essence of command injection
attacks in web applications. In Acm Sigplan Notices, volume 41, pages
372–382. ACM, 2006.
[36] Nicolas Viennot, Edward Garcia, and Jason Nieh. A measurement study
of google play. In ACM SIGMETRICS / International Conference on
Measurement and Modeling of Computer Systems, SIGMETRICS ’14,
Austin, TX, USA - June 16 - 20, 2014, pages 221–233, 2014.
[37] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christo-
pher Kruegel, and Giovanni Vigna. Cross site scripting prevention with
In NDSS, volume 2007,
dynamic data tainting and static analysis.
page 12, 2007.
[38] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. Amandroid: A precise
and general inter-component data ﬂow analysis framework for security
In Proceedings of the 2014 ACM SIGSAC
vetting of android apps.
Conference on Computer and Communications Security, pages 1329–
1341. ACM, 2014.
[39] Michelle Wong and David Lie. Intellidroid: A targeted input generator
for the dynamic analysis of android malware. 01 2016.
[40] Ke Xu, Yingjiu Li, and Robert Deng. Iccdetector: Icc-based malware
detection on android. IEEE Transactions on Information Forensics and
Security, 11:1–1, 06 2016.
15