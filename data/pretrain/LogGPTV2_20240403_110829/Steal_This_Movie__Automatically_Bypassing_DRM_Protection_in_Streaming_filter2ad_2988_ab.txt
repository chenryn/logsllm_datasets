Encryption layer. RTMPE generates a stream key us-
ing a Difﬁe-Hellman [29] key exchange. Once this key is
agreed upon, the entire communication stream is encrypted
using RC4 [1]. No extra encryption is done on the media
itself.
Performance. Any online analyzer running against
RTMPE must be fast enough to allow the processing of the
data stream without dropping the connection.
2.3.3 Spotify
Spotify implements a custom protection scheme to pre-
vent duplication of their content. This scheme was reverse-
engineered by the Despotify Project in their attempt to cre-
ate an interoperable client [5]. The scheme uses a stream
cipher to protect its communication, and, in addition, it
encrypts each individual song.
Stream cipher. The Spotify client performs a key ex-
change with the server to create a key to be used for the
remainder of the session. After the key is generated, the
session is encrypted using a Shannon stream cipher [42].
Song encryption. Individual music ﬁles sent by Spotify
in the encrypted stream are themselves encrypted with AES.
The keys to this encryption are sent in the stream along
with the music ﬁles. Upon receipt of a music ﬁle and its
corresponding key, the Spotify client decrypts the ﬁle for
playback. For ofﬂine playback, Spotify can cache this data.
Performance. An online analysis of Spotify must be
fast enough to process the data stream without dropping
the connection. Additionally, if the Spotify client runs too
slow, it will mistakenly perceive that the connection to the
server has been lost.
2.4 Bypassing DRM
As noted above, DRM methods tend to have unique
workarounds, depending on their speciﬁc characteristics.
For non-interactive multimedia, one general approach is
called the Analog Hole [47]. The Analog Hole is a “ﬂaw”
in any DRM scheme, which is due to the fact that any
media must eventually be consumed by a human. For
example, a video will eventually have to be displayed on a
screen and seen by someone’s eyes. In the simplest setting,
a human could just record the protected music or movie
with a microphone or a camcorder. Programs [4] exist that
will even record a movie as it is playing on the screen by
scraping the screen’s pixels.
However, since all the streaming media platforms known
to us use lossy encoding for space and bandwidth-saving
reasons, this type of DRM bypassing has the downside
of a loss of quality due to the necessity to re-encode the
captured audio and video. The only way to duplicate such
content without quality loss is to capture the decrypted
content after decryption but before decoding. There are
two ways to do this: recovery of the keys used in the cryp-
tographic process and the interception of the decrypted
content. The former method requires approaches that may
vary widely based on the DRM scheme and the type of
encryption and key management used. Additionally, white-
box cryptography [24] could be used to greatly complicate
such an implementation by obscuring the usage of the cryp-
tographic keys. The latter approach, which MovieStealer
uses, allows us to intercept decrypted content irrespective
690  22nd USENIX Security Symposium 
USENIX Association
4
of the underlying encryption protocols. By doing this, it is
possible to recover the original high-quality media sent by
the media originator in a general way.
2.5 Cryptographic Function Identiﬁcation
Since the identiﬁcation of cryptographic functions is
relevant to many other ﬁelds of study, and particularly
relevant to malware analysis, other works have looked into
identifying cryptographic routines.
An early approach to detecting decryption in memory is
detailed by Noe Lutz [39]. This approach slows down the
instrumented program by a factor of 2,400, an unaccept-
able slowdown for a high-performance media streaming
application. Additionally, this approach detects encrypted
data by measuring entropy. Such a detection would be
unable to distinguish between encrypted and compressed
(or, in our case, encoded) data.
Another approach, ReFormat [46], functions by detect-
ing the ﬂow of input data from a decryption routine to a
handling routine followed by a ﬂow of output data to an
encryption routine. This approach does not work for our
application domain for two reasons. Depending on the
protocol, an analyzed media player might not necessarily
encrypt a response. For example, the actual communica-
tion protocol of Microsoft’s Silverlight streaming platform
is not encrypted. As such, the client only decrypts the
encrypted stream data, but does not have to encrypt any
responses. Furthermore, ReFormat detects the transition
from encrypted to decrypted data based on the percentage
of arithmetic and bitwise functions processing it. However,
since the decrypted stream in a media player is passed on
to the decoding step, this heuristic does not necessarily
hold true.
Dispatcher [20] is an approach that analyzes the data
ﬂow of bots to determine their communication protocol. To
ﬁnd the decrypted data, the system uses a similar method
to ReFormat. Dispatcher also functions through ofﬂine
analysis, and would be unsuitable for our application.
Another interesting approach is presented by Caballero,
et al [21]. This approach is geared toward removing the
decryption and decoding functionality in a malware pro-
gram to easier interact with it (in the paper, the authors
interacted with the malware to ﬁnd bugs). This is not appli-
cable to our case, since we gain no beneﬁt from interacting
with a media player directly. In any case, the overhead in
this approach likely makes it unfeasible for use on large
programs such as media players, although we are unable
to verify this as the authors did not publish the tool itself.
BCR [19] is a tool that implements an algorithm,
similar to MovieStealer’s buffer detection, for detecting
cryptographically-relevant loops and buffers. However,
this approach has very heavy overhead, requires several
similar executions, and relies heavily on ofﬂine analy-
sis, which makes it ineffective for our target applications.
Aside from the performance issue, this is also due to the
fact that streaming media players are not completely de-
terministic because of changes in behavior due to network
latency, user interaction, and other factors. These factors
are often hard or impossible to control between execu-
tions, especially with complicated DRM platforms such as
PlayReady. Additionally, by avoiding this requirement in
MovieStealer, we are able to simplify our approach by not
worrying about buffers being relocated by ASLR.
The approach described by Grobert, et al [32] also de-
tects cryptographic primitives, but is another ofﬂine analy-
sis and would not be performant enough for a media player.
Additionally, this approach, along with other similar ap-
proaches that check for cryptographic primitives, would be
sensitive to white-box obfuscation.
Finally, a recent result in this area of research is
Aligot [22]. Aligot works by identifying loops in programs,
identifying data ﬂow between such loops, and comparing
the result against reference implementations of crypto-
graphic primitives. However, it also functions in an ofﬂine
manner and (considering the amount of time its ofﬂine
phase requires) would be too slow for a media player to
function. Additionally, Aligot requires that the program
being analyzed utilize a standard implementation of cryp-
tographic primitives, while our approach avoids such an
assumption.
These existing approaches are not adequate for breaking
DRM in media players. Since the media services that we
analyze have real-time requirements, any approach must
have minimal overhead to function. However, these ap-
proaches were mostly designed to be run against small,
non-demanding malicious programs. In general, they have
high overhead and rely on ofﬂine analysis while Movi-
eStealer is designed to be a fast, online approach. Fur-
thermore, these approaches do not address the distinction
between encrypted and encoded/compressed data with the
regards to randomness as opposed to entropy, which is
necessary to locate the appropriate buffer from which to
extract the decrypted-but-encoded media stream.
3 Approach
Our intuition is that the authors of a media player would
reuse existing, proven codecs for ease of deployment, per-
formance, and reliability. Thus, at some point during the
processing, one should see the data decrypted and sent to
the media codec for decoding. By examining the data as it
ﬂows through the authorized media player, one can detect
the point at which the player transforms the data from an
encrypted stream to an encoded stream. Once this location
in the program is detected, the decrypted stream can be
dumped and reconstructed. Our approach leverages this
observation and provides an automatic mechanism to break
the DRM schemes of several popular streaming services.
The process of copying protected content can be divided
USENIX Association  
22nd USENIX Security Symposium  691
5
into three separate phases:
1. Analyze the way in which the authorized media player
handles the encrypted stream and identify the point at
which the stream is decrypted.
2. Dump this decrypted stream.
3. Reconstruct the original media ﬁle from the decrypted
stream.
Normally, the ﬁrst step would have to be done once per
media player (or, depending on the DRM implementation,
once per media codec), while the second and third steps
would be repeated for each dumped movie.
Given an authorized media player executable, Movi-
eStealer will execute the binary, trace its execution ﬂow,
monitor and log its data access, recover loops and buffers
(deﬁned as consecutive bytes of data), recognize the de-
cryption step, dump the decrypted data, and construct a
media ﬁle with the unprotected content.
3.1 Stream Decryption Analysis
The ﬁrst step in the copying of protected content is the
analysis of the authorized media player’s processing of the
encrypted stream. Of course, much of the code dealing
with Digital Rights Management is heavily obfuscated,
packed, or protected, and so our approach must be able to
work with countermeasures such as dynamically generated
functions. Therefore, the stream decryption detection is
based on the dynamic analysis of the player application.
A media player processes a substantial amount of data
in the course of downloading, decrypting, decoding, and
playing media. Intuitively, such data, whether encrypted or
decrypted, is stored in buffers in memory. While this data
could conceivably be stored in evasive schemes (for exam-
ple, splitting up buffers so that no two bytes are adjacent),
we have not observed such evasiveness in the real-world
applications that we have analyzed. Moreover, this would
complicate the development process and would impede
performance.
Thus, our goal in this step is to identify the location in
the program where an encrypted buffer is turned into a
decrypted buffer.
3.1.1 Loop Detection
The intuitive way to access data buffers is through a loop
(or a loop-equivalent CPU instruction). As data decryption
involves accessing the encrypted buffers, we would expect
(and, indeed, this is what we have observed) it to be done
using loops. Our intuition here is that a loop will exist
that carries out a decryption operation on a small chunk of
data. This loop (or, more precisely, its output) is what we
are looking for. Hence, the ﬁrst step of our solution is to
automatically identify loops in the program.
Subsequent parts of our analysis work on loops rather
than either functions or individual instructions for several
reasons. First, loops are more likely to access a small
.head:
mov eax, 0
mov ebx, (0x1000, eax, 4)
mov (0x2000, eax, 4), ebx
inc eax
cmp eax, 5
jne .head
Table 2: An example of a loop.
mov eax, 0xBAADF00D
xor dword ptr [esp], eax
Table 3: An example of an implicit read by a loop.
number of buffers for a single purpose, while functions
might access many buffers for several purposes. Secondly,
a single instruction might only carry out a partial operation
on the buffer. For example, a loop might carry out an entire
decryption step while a single instruction in the loop might
simply XOR two words together. Thus, by performing
our analysis at the loop level, we can better see individual
actions that a program carries out on its buffers. Thirdly,
identifying functions within a program, without symbol
tables and in the presence of obfuscation, is a complicated
and error-prone task. We bypass this problem by operating
on loops, which are more straightforward to identify. A
loop can usually be identiﬁed as long as its basic blocks
are executed at least twice.
Although we perform our analysis on loops, our ap-
proach is inspired by some basic concepts taken from func-
tion analysis. A good example is the input and output of
a loop. We mark all data that a given loop reads as its
input, and all data that it writes as its output. Table 2 gives
an example of a loop that reads 5 dwords from the buffer
starting at 0x1000 as input and writes them to the buffer at
0x2000 as output.
It is important to note that, in the x86 architecture, data
can be an input to a loop without being explicitly read by
that loop. For example, Table 3 demonstrates such a case,
where esp, despite not being explicitly read by the code in
question, is an input to the XOR operation.
Our approach assumes that the decryption process hap-
pens inside a loop. More speciﬁcally, we expect to ﬁnd a
loop in the authorized media player that has at least one en-
crypted buffer as an input and at least one decrypted buffer
as an output. We expect this decryption to be done in a loop
because such DRM schemes on media must process large
volumes of data, and the most efﬁcient way of processing
such data is through a loop or loop-like instruction.
Detecting the loops. Our approach to detecting loops
is mainly inspired by LoopProf [40]. LoopProf maintains
a Basic Block Stack (BBLStack) per thread. A BBLStack
is a stack of basic block addresses. Whenever a basic block
692  22nd USENIX Security Symposium 
USENIX Association
6
is executed, its start address is pushed to this stack, and
when the basic block exits, the start address is popped.
Our analysis routine is called every time a Basic Block
(BBL) is executed. The analysis routine attempts to ﬁnd
the same BBL by tracing back in the BBLStack. If the
same BBL is found in the BBLStack, the basic blocks
between this BBL and the top of the stack are considered
to be a loop.
Note that when using this approach, some additional
care must be taken to avoid misdetection of recursive calls
as loops.
Although the basic idea of loop detection is simple,
much attention was given to performance. We explain our
optimizations in detail in Section 4.2.
Maintaining a call stack. As described in LoopProf,
loop detection by BBLStack can cause our program to
identify loops that occur across function boundaries, which
is often the case with recursive function calls. While this
would not break our approach, we have chosen to detect
and remove these loops to improve the performance of
the analysis, given that we have not seen any example of
decryption being done in a recursive fashion.
Using our call stack, we only check BBL inside the
current frame when searching for loops. We maintain this
call stack for every thread by instrumenting every call and
return instruction. Of course, functions do not have to use
these instructions, in which case one would still detect the
blocks as a loop. In the cases we have examined cases, this
is acceptable for our approach.
Apart from aiding in loop detection, the presence of
a call stack allows us to identify loops that are used for
multiple purposes. For example, one loop could be used
both to encrypt and to decrypt buffers. In this case, if the
loop is called by one function, it behaves like a decryption
routine, and has a random input as well as a non-random
output. However, when called by a different function,
the loop might behave like an encryption routine, and
would throw off our detection if we did not differentiate
between these two cases. Table 4 illustrates this scenario.
Differentiating between these two scenarios is important
for our analysis, since we analyze all of the data read and
written by each loop in aggregate across several runs. Thus,
we must differentiate between the two execution paths of
this loop in order to distinguish the two different cases.
Therefore, a loop is identiﬁed not only by its basic blocks,
but also by the top several functions on the call stack at the
time it was called.
Detecting unrolled loops. Loops are frequently un-
rolled for increased performance. Speciﬁcally, the ﬁrst or
last few iterations are often unrolled, with the rolled loop
present in case more data needs to be processed. In order
to detect unrolled loops, we take note of the basic blocks
that were executed between any two loops. We later check
if these basic blocks do operations on the same buffer as
void crypto_loop(void *key, void *in,
void *out, int len);
void encrypt() {
crypto_loop("key", decrypted,
encrypted, len);
}
void decrypt() {
crypto_loop("key", encrypted,
decrypted, len);
}
Table 4: An example of both the encryption and decryption
being done in one loop.
either of the two loops.
3.1.2 Buffer Identiﬁcation
According to prior work in the ﬁeld of data reverse-
engineering, most buffers are accessed in loops [43]. Thus,
having identiﬁed loops, we must then identify the buffers
on which they operate. For the sake of performance, and
unlike the approaches outlined in Howard [43] and RE-
WARDS [37], which track the base pointers of and offsets
into buffers by instrumenting every instruction, our ap-
proach is based on recording and analyzing reading and
writing operations inside a loop. This is similar to what is
implemented in BCR [19]. In addition, several heuristic
methods are applied to improve the detection of the buffers.
By applying these heuristics, even complex buffers such as
the key permutation array used in RC4, which is accessed
neither consecutively nor completely in most cases, can be
identiﬁed by our approach.
Fetching memory access patterns. When Movi-
eStealer is analyzing a loop, it dynamically instruments
each read and write within that loop. For each such read
and write, we record the target memory location that it ac-
cesses, the instruction pointer where the access occurs, and
the size of the read or write. Note that some instructions,
when called with speciﬁc operands, execute both a read
and a write operation.
Whenever control ﬂow leaves the loop, we move on to
analyzing the loop’s memory access patterns.
Analyzing memory access patterns. A loop can ac-