vprintf (fnt, va)
exit (0) )
static void find_original_functions ()
if (inited)
1ibc_handle = dlopen (*1ibe,so.6*, RTLD_LAZT):
returnj
if (1ibc_hand1e=s0LL)
die (°can*t open 1ibc.so.6'n*);
open_ptr = dlsya (1ibc_handle, *open*)
---
## Page 188
664
逆向工程权威指南（下册）
If (open_ptrSULL)
f(μu\,()uodo puT 1,ueo_) p
close_ptr = dlsym (1ibe_handle, “close*);
if (close_ptr-ULL)
die (*can′t find close(1 \n*))
read_ptr = dlsym (1ibc_handle, *read*):
If (read_pt.r*8UsL)
r(μ\ (peox puTg ,ue) 9Tp
inited = true:
static int opened_fd=0;
Int open(const char *pathname, Int flags)
find_original_funct.ions (1 
if (strcep (pathnane, */proc/uptine*)=→0)
Int fd=(*open_ptr) (pathname, lags) }
opened_fd=fd; // that*s our filel cecord its file descriptor
else
return fd
0=p"pauado
[
Int close (int fd)
find_original_funetLon8(1
if (fd==opened_fd)
return (*elose,ptr)(fd);
opened_fd=0: // the fi1e is not opened anymore
ssize_t read(int fd, void *buf, size_t count)
find_original_functlons ()
If (opened_fd=0 ss fd"mopened_fd)
1
retutn snprintf (buf, oount, *ld d*, 0x7ffffrf, ox7frrreff)+1;
// thst's our file!
11
// not our file, go to real read() function
return (*read_ptr) (td, buf, count)2
我们用通用的动态库来编译它：
P↑- a*eeTdnroog og*eeradn"roog 0- Teg- pereug ordj- 22b
最后，我们通过LD_PRELOAD指令优先加载自定义的函数库：
LO_PRgLoAD=*pwd*/fool_upt.ime,so upt.ime
上述指令的输出结果为：
01:23:02 up 24855 days, 3:14, 3 users, 1oad average: 0.00, 0.01, 0.05
如果我们在系统的环境变量中设定了LD_PRELOAD、让它指向我们自定义的动态链接库，那么所
有的进程都会在启动之前加载我们自定义的动态链接库。
更多例子请参阅：
---
## Page 189
第67章Linux
665
① Very simple interoeption of the strcmpO (Yong Huang) :
https:/yurichev.com/mirrors/LD_PRELOAD/Yong%20Huang%20LD_PRELOAD.txt
②) Fun with LD_PRELOAD (Kevin Pulo): htps:/yurichev.com/mirrors/LD_PRELOAD/Ica2009.pdf,
③ File functions interception for compression/decompression:
ftp://metalab.unc.edu/pub/Linux/libs/compression
---
## Page 190
第68章
WindowsNT
68.1
CRT（Win32）
所有程序都是从mainO函数开始执行的吗？事实并非如此。如果用IDA或者HIEW打开可执行文件，
进行一些维护和准备工作。这就是所谓的启动代码/startup-code 即 CRT代码（C RunTime）。
在通过命令行指令启动程序的时候，main0函数通过外来数组获取启动参数及系统的环境变量，然而，
实际传递给程序的不是数组面是参数字符串。CRT代码会根据空格对字符串进行切割。另外，CRT代码还
会通过envp数组向mainO函数传递系统的环境变量。在Win32的GUI程序里，主函数变为了WinMainO，
并且拥有自己的参数传递规格：
int CALLBACK WinMain(
_In_ HISSTANCE hInstance,
_In_ HINSTANCE hPrevInstance,
_In_ LPSTR 1pOmdLine,
_In_ int nCndShov
上述参数同样是由CRT代码准备的。
在程序结束以后，主函数mainO会返回其退出代码。这个退出代码会被传递给CRT的ExitProcessO函
数，作为后者的一个参数。
通常来说，不同的编辑器会有不同的CRT代码。
以下列出的是MSVC2008特有的 CRT代码：
_tsainCRTStartup proc near
3
var_24 = dword ptr -24h
4 var_20 = dxord ptr -20h
5var_1C = dvord ptr -1ch
6
ms_exc = CPPE8_RSCORD ptr -18h
8
posh
14h
9
push
offset atru_4092D0
1.0
ca11
eax, 5A40h
_SEH_prolog4
11
12
cnp
MOV
ds:400000h, ax
Jnz
short 1oc_401096
14
15
nov
dvord ptr [esx+40000b], 4550b
eax, ds:40003Ch
16
cmp
Jnz
short 1oc_401096
1.8
LT
nov
[eax+400018h], cx
ecx, 10Bh
19
cp
Jnz
dvord ptr [eax+400074h], (Eh
short 1oc_401096
20
cnp
22
aqC
short 1oc_401096
23
xOr
cIp
[eax+4000EBh],, ecx
KD0*K2
24
25
setnz
c1
AOu
[ebp+var_1C], ecx
26
 jnp
sbort 1oc_40109A
27
---
## Page 191
第68章Windows NT
667
28
29
1oc_401096: : 00E x3SP: _tnainCRrStartup+18
3 3
30
_taainCRTStartup+29 ...
and
[ebp+var_1C], 0
33
1cc_40109A: : C00E XREF:
_tmainCRTStartup+50
34
push
35
ca11
ropt
_heap_init
eax, cax
ecx
8C
39
Jnz
push
short 1oe_4010AE
1Ch
40
TTPO
_fast_error_exit
41
42
pop
eCx
43
loc_4010AE:
CODE XREF:
_tnaincRTStartup+60
45
ca11
_ntinit
46
test
jnz
eax, esx
47
push
short 1oc_40108F
1.0h
48
49
ca11
_fast_error_exit
50
pop
51
Loc,
_4010BF:
1 CODE XREF:
tmainCRTStartup+71
52
ca11
[ebp*moexc.disabled], 0
sub_401F28
53
and
54
ca11
55
test
_ioinit
56
Jge
eax, e
short 1oc_401009
eax
57
push
18h
58
59
ca11
_ansg_exit
pop
eCK
60
61
_401009:
ca11
1 CODE XBEF:
ds:GetCornandLineA
_tnainCRTStartup+8B
63
mov
dword_4087F8, eax
64
ca11
_crtGetEnvironmentStringsA
65
mov
ca11
dword_40Ac60, e8x
66
_setargv
67
test
e8x, eax
68
69
ige
short 10c_4010FF
70
Push
ca11
_ansg_exit
71
72
pop
73
loc_4010FF:
: CODE XREF:
_setenvp
tmainCRTStartup+B1
74
ca11
75
test
eax,
76
1ge
short 1oc_401110
eax
77
push
78
ca11
79
pop
eCK
ansg_exit
80
81
1oc_4011101
CODE XR&F:
82
Push
mainCRTStartup+C2
83
ca11
_cinit
84
85
pop
test
eax, eax
eCK
86
L8
push
ca11
eax
88
$9
_amsg_exit
90
pop
ecx
10c_4011231/000Ex3EF:
_tmainckTStartup+D6
---
## Page 192
668
逆向工程权威指南（下册）
6
93
m09
mov
dnus rxeo
94
dvord_40AC80, eax
95
push
push
argv
esx
: envp
abse 
push
97
cal1
argc
1 argc
98
add
esp, 0Ch
_nain
99
mov
omp
[ebp+var_20], eax
Tot
100
[ebp+var_1C], 0
102
Jnz
short $1828
push
ca11
eax
$1832
1 uExitCode
COT
104
105
SLN28 :
: CODE XREF:
_tmainCRTStartup+105
106
cal11
_cexit
107
jxp
short 1oc_401186
108
110
109
$LN27:
: DATA XRgF: ,rdata:atru_409200
111
80F
eax,
[ebp+a_exc exc_ptr] : Except.ion fi1ter 0 for function 401044
112
mo
113
ecx,
[ecx]
[xee]
114
mOv
[ebp+var_24], ecx
ecx,
115
116
push
push
eax
117
ca11
_KcptFilter
eCx
118
119
pop
ecx
120
pop
ecx
121
$LN24:
123
122
retn
125
124
$LN14:
: DATA X38F: -rdata:stru_409200
127
126
nov
esp, [ebp+ns_exc,old_esp]: Exception handler 0 for funct.5ion 401044
mov
eax, [ebp+var_24]
BZT
A0U
[ebp+var_20], eax
129
130
omp
[ebp+var_1C], 0
TET
push
Jnz
eax
132
cal1
:int