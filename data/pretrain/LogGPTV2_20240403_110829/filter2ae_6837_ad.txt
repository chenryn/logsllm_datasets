        // and defines a way to store object on remote storage
        RemoteObject RemoteObject
        // Archive is the path where the artifacts archive is stored
        Archive string `json:"archive"`
        // Entry is a filename inside the archive point to file that needs to be extracted
        Entry string `json:"entry"`
        // Used to communicate channel session details
        Channel *ChannelSettings
        // GitalyServer specifies an address and authentication token for a gitaly server we should connect to.
        GitalyServer gitaly.Server
        // Repository object for making gRPC requests to Gitaly.
        Repository gitalypb.Repository
        // For git-http, does the requestor have the right to view all refs?
        ShowAllRefs bool
        // Detects whether an artifact is used for code intelligence
        ProcessLsif bool
        // Detects whether LSIF artifact will be parsed with references
        ProcessLsifReferences bool
        // The maximum accepted size in bytes of the upload
        MaximumSize int64
    }
总结下这部分的调用结构和流程：
#### gitlab-rails处理认证请求
rails部分的处理是比较关键的，只有在rails正确授权才能上传文件。rails中关于uploads接口的路由文件位于`config/routes/uploads.rb`内。其中一条路由规则为
      post ':model/authorize',
        to: 'uploads#authorize',
        constraints: { model: /personal_snippet|user/ }
请求`/uploads/user/authorize`将匹配这条规则，调用controller`uploads`中的action`authorize`。
controller定义位于`app/controllers/uploads_controller.rb`，在头部include了`UploadsActions`所在的文件。在其中摘抄出关键的代码如下：
    class UploadsController  /tmp/rce.txt`，使用curl发起请求
走到`ServeExisting`中判断`content`为nil时会调用`OpenFile`传入`/opt/gitlab/embedded/service/gitlab-rails/public`
在`OpenFile`判断传入的是目录时会返回错误
所以将走到下面的`notFoundHandler.ServeHTTP(w,
r)`，这是`ServeExisting`第三个参数传入的`DeployPage`。
之后的`DeployPage`还存在着一个判断就是读取指定根目录下的index.html文件，这里由于deployPage未正确赋值，所以走到了err的处理流程里调用`ErrorPagesUnless`
最后的调用堆栈为
文件被解析执行恶意命令
其后写入了/upload/tmp目录中
至于为什么gitlab会在匹配不到请求文件时检测上传的文件并上传到tmp目录下，个人猜测可能是一种缓存策略，用于加速访问。
经测试在最新版本的gitlab中也可以通过这种方式上传缓存文件到tmp目录，不同的是当上传处理结束时会立马删除该文件。
## 总结
在分析漏洞的过程中不断的收集了大量的资料来进行相关功能点前后逻辑调用的梳理和调试，其中容易踩坑或者无法想通点或多或少都在官方文档中有所提及，善于查询、搜索和利用官方文档或者搜索引擎，对于一些开源项目可以多翻翻issues，很有可能就能找到别人提出过跟你所想的问题。勤动手，善思考，如果你对一个东西持续的关注将会培养一种异乎寻常的敏感。
* * *