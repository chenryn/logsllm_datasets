title:Phase-based reboot: Reusing operating system execution phases for
cheap reboot-based recovery
author:Kazuya Yamakita and
Hiroshi Yamada and
Kenji Kono
Phase-based Reboot: Reusing Operating System Execution Phases
for Cheap Reboot-based Recovery
Kazuya Yamakita
Keio University
Hiroshi Yamada, and Kenji Kono
Keio University, JST CREST
3-14-1 Hiyoshi, Kohoku-ku, Yokohama, Japan
Email: PI:EMAIL
3-14-1 Hiyoshi, Kohoku-ku, Yokohama, Japan
Email: PI:EMAIL, PI:EMAIL
Abstract—Although operating systems (OSes) are crucial to
achieving high availability of computer systems, modern OSes
are far from bug-free. Rebooting the OS is simple, powerful,
and sometimes the only remedy for kernel failures. Once we
accept reboot-based recovery as a fact of life, we should try
to ensure that the downtime caused by reboots is as short
as possible. This paper presents “phase-based” reboots that
shorten the downtime caused by reboot-based recovery. The
key idea is to divide a boot sequence into phases. The phase-
based reboot reuses a system state in the previous boot if the
next boot reproduces the same state. A prototype of the phase-
based reboot was implemented on Xen 3.4.1 running para-
virtualized Linux 2.6.18. Experiments with the prototype show
that it successfully recovered from kernel transient failures
inserted by a fault injector, and its downtime was 34.3 to 93.6%
shorter than that of the normal reboot-based recovery.
Keywords-Reboot-based Recovery; Operating System Relia-
bility; Virtualization;
I. INTRODUCTION
High availability is important for all ranges of computer
systems from high-end enterprise systems to low-end con-
sumer devices. High-end enterprise systems lose millions
of dollars if their services are unavailable. Low-end device
vendors would lose their customers if their products such
as smart phones and HDD recorders were not very stable
or sometimes got hung up. Upgrading iPhoneOS 3.x to iOS
4.0 on iPhone 3G causes severe performance degradation
and makes iPhone 3G service nearly unavailable. Apple was
criticized for delivering an inferior operating system and
ﬁnally took action to investigate the series of complaints
related to performance.
Operating systems are crucial for achieving high avail-
ability of computer systems. Compared with application-
level failures, kernel-level failures are known to occur less
frequently, but they have a considerable impact on the overall
availability of software systems. Even if the applications
running on the operating system are highly available, a bug
inside the kernel may result in a failure of the entire software
stack; no application can continue to run on the crashed
kernel.
Modern operating systems are far from bug-free. Palix et
al. [1] report that the rate of introduction of bugs continues to
rise even in Linux 2.6. In addition, the average time between
when a bug is introduced and when a ﬁx is released is 1.8
years for Linux kernels. Our investigation of the change
logs of Linux 2.6.24 and 2.6.25 also revealed that there
are critical bugs inside the kernel core components. Kernel
bugs are not the sole reason for kernel failures. Soft errors
in high-density semiconductors are increasing [2], and they
cause incorrect values to be read from memory or incorrect
instruction results to be produced.
For end users of computer systems, sometimes the only
remedy for kernel failures is to reboot the operating system
(and thus the entire software stack). For example, if a smart
phone freezes due to a kernel failure, the end user reboots
it in the expectation that the reboot will recover the smart
phone; she does not have any skill or tools to diagnose
and recover from the failure. Aside from low-end consumer
devices, skillful administrators for high-end enterprise sys-
tems sometimes reboot the system to avoid or recover from
failures. A Cisco Security Advisory [3] reported that their
network products had a bug involving a memory leak, and
the reboots were necessary to recover from it until a bug ﬁx
was released. IBM Director, a cluster management system
for xSeries servers, periodically reboots (i.e., rejuvenates)
the system to counteract software aging [4].
Once we accept reboot-based recovery as a fact of life,
we need to try to reduce the downtime caused by reboots
as much as possible. This paper proposes “phase-based”
reboots that shorten the downtime caused by reboot-based
recovery. In a phase-based reboot, a boot sequence is divided
into three phases: 1) the hardware-initialization phase, 2) the
kernel-boot phase, and 3) the daemon-startup phase. The
key idea behind phase-based reboot is that a reboot repeats
the same procedure as in the previous boot and sometimes
reproduces the system state identical to the previous one;
we can reuse a system state in the previous boot if the next
boot reproduces the same state. In the phase-based reboot, a
system state is saved after each boot-phase is ﬁnished. When
a reboot is done for recovery, our system restores the saved
state to skip the boot-phases that reproduce the same states
as in the previous boot.
To save and restore a system state,
the phase-based
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:15:28 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE169reboot uses the snapshot functionality of virtual machines
(VMs). At ﬁrst glance, saving and restoring a system state
is straightforward; the entire memory image of the VM is
saved to and restored from a disk. However, this is time-
consuming, especially when the memory size assigned to a
VM is large. In the worst case, the phase-based reboot takes
a longer time to reboot than a normal reboot. To avoid this
situation, our mechanism avoids saving unnecessary memory
pages that can be reconstructed after the memory image is
restored.
Restoring a system state is much more complicated. The
memory image saved to a disk contains a disk cache that
may be updated after the snapshot is taken. In other words,
the disk cache in the saved image may be out of date. If the
saved image is simply restored, the out-of-date disk cache
is also restored and regarded as up-to-date. To solve this
problem, our mechanism refreshes in-memory ﬁle objects
with the corresponding disk blocks after it restores the saved
image.
A prototype of the phase-based reboot was implemented
on Xen 3.4.1 running para-virtualized Linux 2.6.18. Experi-
ments with the prototype showed that the phase-based reboot
successfully recovered from kernel transient failures inserted
by the kernel fault injector, and its downtime was 34.3 to
93.6% shorter than that of the normal reboot-based recovery.
The rest of this paper is organized as follows. Sec-
tion II presents the key idea of phase-based reboot and
its semantics. Section III overviews phase-based reboot.
Sections IV and V describe the design and implementation
of phase-based reboot, respectively. Section VI presents our
experimental results. Section VII discusses work related to
ours. Finally, Section VIII concludes this paper.
II. PHASE-BASED REBOOT
To reduce the downtime of reboot-based recovery, the
phase-based reboot skips some phases of a time-consuming
boot sequence. In this section, we describe the key idea
behind the phase-based reboot and its recovery semantics.
A. Key Idea
A boot sequence can be divided into three phases: 1) hard-
ware initialization, 2) kernel boot, and 3) daemon startup.
Normal reboot-based recovery executes all the boot phases
in order to reconstruct a consistent system state and restart
services. The normal reboot-based recovery repeats the same
boot sequence as in the previous boot. Most parts of the
sequence are similar to the previous boot because the system
conﬁguration is not changed in the context of reboot-based
recovery. In the reboot-based recovery, the system is not
rebooted so as to make the conﬁguration changes effective;
the boot sequence starts from the same system conﬁguration
and is thus expected to result in the same system state as
the previous boot.
Same system states
Kernel
initialization
Each daemon
initialization
Service
operations
Kernel
initialization
Each daemon
initialization
time
OS boot
Kernel crash
Same behavior
OS reboot
Figure 1. Key idea behind phase-based reboot. In most cases, the reboot
process produces the same system state as in the previous boot.
As illustrated in Fig. 1, the system starts its services after
initializing the hardware, booting the kernel, and starting up
every daemon. Through these operations, a consistent system
state is constructed from which we can start services. When
a kernel crashes, the reboot-based recovery is attempted; the
system repeats the same procedures to reconstruct the same
system state from which we can restart the services. In the
reboot-based recovery, no system conﬁguration is changed
in most cases. Therefore, the resulting system states are
expected to be the same in the previous and current boot
sequences.
The key idea behind the phased-based reboot is to save
and reuse consistent system states during the reboots. If
the next reboot always creates the same state as in the
previous one, we can simply save and restore the previous
state for reboot-based recovery instead of rebooting the
entire system. Unfortunately, this is an oversimpliﬁcation.
During service operations, an administrator may change the
conﬁguration of some daemons. In this case, we cannot
reuse the system state saved in the previous boot because
the different conﬁguration may result in a different system
state.
To address this reusability problem, the phase-based re-
boot saves system states at several points, called restartable
points, during the boot sequence. System states saved at
restartable points are called restartable candidates, from
which the user can select the appropriate point to start the
system reboot from. By default, the phase-based reboot saves
the candidates every time each boot-phase is ﬁnished. Ad-
ministrators can add more restartable points based on their
intimate knowledge of the target system. If no conﬁguration
is changed, we can use the most recent candidate from
which the system reboot starts. Note that this is the most
common case in reboot-based recovery. If a conﬁguration
is changed as in the above example, the user can select an
appropriate candidate from which to restart the system from.
In the above example, the user restarts the system just after
the kernel initialization is ﬁnished. To help the user select
an appropriate restartable point, the phase-based reboot can
determine which restartable point can be used for recovery.
B. Recovery Semantics
The phase-based reboot handles kernel transient failures
in a way similar to a normal OS reboot. Kernel transient
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:15:28 UTC from IEEE Xplore.  Restrictions apply. 
170failures include memory leaks and non-deterministic kernel
panics. By rebooting an OS, we can recover from kernel
transient failures even if their root causes are unknown.
Rebooting an OS eliminates a corrupted memory state and
returns the system state back to its initial state, which is
known to be consistent, making it possible to safely restart
services. The phase-based reboot
inherits this advantage
from the OS reboot, and it restores the system state to a
clean and consistent one at a restartable point.
Unlike normal OS reboots, the phase-based reboot cannot
recover from a failures caused by inconsistent hardware
states. To recover from inconsistency in hardware devices,
the devices must be re-initialized; the faulting machine must
be reset physically. Since the phase-based reboot skips the
hardware-initialization phase,
this type of reboot cannot
recover from hardware inconsistency. This is not a serious
shortcoming of the phase-based reboot. When a failure
occurs, the user tries the phase-based reboot ﬁrst. If the
failure cannot be recovered, the user physically resets the
entire machine. From our experience in investigating Linux
change logs, most of the bugs in Linux corrupt in-memory
kernel states, which can be recovered from the phase-based
reboot. There are only a few bugs that make hardware
devices inconsistent.
As in the normal reboot-based recovery, the phase-based
reboot cannot handle all types of failures. Since the phase-
based reboot is an optimization of the normal reboot-based
recovery, it inherits all the shortcomings of reboot-based
recovery. First, the failures that persist across reboots cannot
be recovered. For example, if a hardware device is corrupted
physically, reboot-based recovery is useless. If the persistent
data in ﬁle systems are corrupted, we have to run fsck
to repair the corruption. Second, the reboot-based recovery
cannot handle deterministic failures that can be reproduced
by executing the same path. Finally, the reboot-based re-
covery sometimes fails to restart user-level applications that
save their states to non-volatile devices. If a kernel failure
prevents an application from saving its state, the application
may be confused after the OS reboot. To correctly restart a
service, the application must perform the recovery operation.
For example, an application using a database server must
roll back the SQL transactions that were processed when
the kernel crashed.
III. OVERVIEW
The phase-based reboot leverages the snapshot function
provided by system virtualization to restart
the system
at a restartable point. System virtualization is becoming
commonplace in a computing environments. The snapshot
function enables us to save/restore a virtual machine (VM)
state including CPU registers, memory, and disks at an
arbitrary point. The phase-based reboot uses a snapshot
taken during an OS boot to restart the VM at a restartable
point. We refer to the snapshot as a restartable image. The
phase-based reboot overwrites CPU registers and memory
states preserved in the restartable image to the running VM;
the phase-based reboot never rolls back the disk state to save
updates of disks in the service operation.
In the phase-based reboot, we treat
snapshots as
restartable candidates that can be used as a restartable image.
The phase-based reboot appropriately selects a snapshot
from the restartable candidates and restores it. To prepare
restartable candidates, we take snapshots at many points
during an OS boot. Fig. 2 shows a typical example of how
restartable candidates are prepared. We can collect them
by taking a snapshot when the kernel boot is complete,
every daemon has been launched, and after a log-in prompt
appears. When a phase-based reboot is conducted, we pick
up a snapshot from the restartable candidates that has the
same state as after the normal reboot-based recovery.
The use of system virtualization allows us to prevent
kernel failures inside a VM from corrupting its restartable
candidates. If their contents are modiﬁed by the propaga-
tion of kernel failures, we cannot successfully restore the
restartable image. Since the virtual machine monitor (VMM)
isolates VMs running on it,
the kernel failures are not
propagated to the other VMs or VMM, where snapshots
are saved. Although commodity OSes offer a hibernation
mechanism that saves its memory state to disks, the saved
memory image are more easily affected by kernel failures.
This is because the hibernation mechanism saves memory
images to the disk that is not isolated from the OS. This is
not reasonable for saving restartable candidates.
However, the phase-based reboot does not come without
effort. It poses several design challenges. First, the existing
snapshot restoration takes a long time if the memory size as-
signed to the VM is large. Next, when a snapshot is restored,
the ﬁle system objects are restored as well, which leads to
eliminating the disk update in the service operation. Lastly,
we need a way to determine which restartable candidate is a
restartable image in order to help select a proper restartable
image.
IV. DESIGN
For the ﬁrst challenge, we avoid saving pages that are
unnecessary for the VM to work correctly after the snapshot
is restored. For the second challenge, we design a kernel
module that updates the ﬁle system objects. To address the
last challenge, we prepare a tool that infers application states
that will be built by the normal reboot. To do so, the tool
checks whether ﬁles accessed during the guest OS boot are
updated in the service phase.
A. Snapshot Optimization
The conventional VM snapshot function saves and re-
stores all the memory pages of a VM even if the pages
are not used for the kernel and user processes. If a VM
is assigned 1024 MB of memory, the VMM saves all the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:15:28 UTC from IEEE Xplore.  Restrictions apply. 
171Kernel boot
Daemon 1 
boot
Daemon 2 
boot
Service
operations
Starts reboot
Shutdown
Kernel boot
Daemon 1 
boot
Daemon 2 
boot
Kernel crash
Service
operations
time
time
Normal reboot
Phase-based
Reboot
Takes snapshots as
restartable candidates
Overwrites CPU registers and memory state preserved in restartable
image, keeping persistent devices’ state such as disk state
Figure 2. Comparison of Normal reboot and Phase-based reboot.
memory on the disk even if the VM uses only 128 MB. As
the assigned memory size is larger, the restoration of the
snapshot takes longer, causing many disk I/O problems.
To shorten the time for restoring a restartable image, we
shrink the size of VM memory checkpoints. Our technique
reduces disk I/O involved in saving and restoring the mem-
ory checkpoints. We borrowed this idea from the hibernation
mechanism offered by commodity OSes. Speciﬁcally, our
technique avoids saving pages that are not necessary for
the system to work correctly after the restore operation.
Such pages include a free page and ﬁle cache pages. For
example, if a VM is assigned 1024 MB of memory, and
928 MB are free pages, we save only 72 MB since free
pages are a soft state and can be reproduced from the disk.
We believe that our technique is effective because memory
usage is not heavily utilized during the boot phase where
restartable candidates are taken.
In this work, we focused on a free page and a page
containing soft-state kernel objects. Even if a VMM discards
the contents of free pages, the guest works correctly because
free pages are initialized when the kernel uses them. Soft-