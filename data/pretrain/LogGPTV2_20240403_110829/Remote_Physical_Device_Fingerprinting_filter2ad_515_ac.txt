10
30
50
total
sources
(|S|)
18335
13517
7246
4356
4016
3368
1730
1629
1489
sources with
stable skews
(|S(cid:1)|)
8225
6859
4120
2583
2446
2104
1116
1077
1009
entropy
(bits)
4.87
5.39
5.87
5.99
6.11
6.18
6.22
6.32
6.41
Table 2. Entropy estimates from BB-2004-04-
28 when pv = 1 ppm.
use of remote clock skew estimation as a physical device
ﬁngerprinting technique since they imply that an adversary
can gain (sometimes signiﬁcant) information by applying
our techniques to measure a device’s or set of devices’ clock
skews.
The novelty here is not in claiming that these proper-
ties are true. Indeed, it is well known that different com-
puter systems can have different clock skews, and others
[22, 20, 21, 26] have argued that a given device generally
has a constant clock skew. Rather, the contribution here is
showing that these properties survive our remote clock skew
estimation techniques and, in the case of our analyses of the
distribution of clock skews, measuring the bits of informa-
tion (entropy) a passive adversary might learn by passively
measuring the TSopt clock skews of ﬁngerprintees.
DISTRIBUTION OF CLOCK SKEWS: ANALYSIS OF PAS-
SIVE TRACES. Our ﬁrst experiment in this section focuses
on understanding the distribution of clock skews across de-
vices as reported by our TCP timestamps-based passive ﬁn-
gerprinting technique. For this experiment we analyzed a
passive trace of trafﬁc in both directions of a major OC-48
link; CAIDA collected the trace between 19:30 and 21:30
PDT on 2004-04-28. Since the OC-48 link runs North-
South, let BBN denote the Northbound trace, and let BBS
denote the Southbound trace (BB stands for backbone).
CAIDA obtained the traces using different Dag [11] cards in
each direction; these cards’ clocks were synchronized with
each other, but not with true time. This latter property does
not affect the following discussion because (1) the clock
skews of the Dag cards appear to be constant and therefore
only shift our skew estimates by a constant amount and (2)
here we are only interested in the general distribution of the
clock skews of the sources in the traces.
Let mp and md be positive integers. For simplicity, ﬁx
BB = BBN or BBS. Also assume for simplicity that BB
only contains TCP packets with the TCP timestamps option
turned on. Recall that the trace BB last for two hours. At
a high-level, our analysis considers the set S of sources in
BB that have ≥ mp packets in both the ﬁrst and the sec-
ond hours, and where the differences in time between the
source’s ﬁrst and last packets in each hour are ≥ md min-
utes. If mp and md are large, then the sources in S all gen-
erate a large number of packets, and over a long period of
time.
For each source in S, we apply our clock skew estima-
tion technique from Section 3 to the full trace, the ﬁrst hour
only, and the second hour only. Let pv be a positive number,
be the subset of S corresponding to the sources
and let S(cid:1)
whose skew estimates for the full trace, the ﬁrst hour, and
the second hour are all within pv ppm of each other, and
whose intended frequency Hz is one of the standard val-
ues (1, 2, 10, 100, 512, 1000). If pv is small, then we are
inclined to believe that the skew estimates for the sources
in S(cid:1)
closely approximate the true skews of the respective
sources. Table 2 shows values of |S| and |S(cid:1)| for different
values of mp and md and when pv = 1 ppm.
The value |S(cid:1)|/|S| gives an indication of the ratio of
sources of which we can accurately (within pv ppm) mea-
sure the clock skew. While useful, this value provides little
information about the actual distribution of the clock skew
estimates. Much more (visually) telling are images such as
Figure 2, which shows a histogram of the skew estimates
(for the full two hour trace) for all the sources in S(cid:1)
when
mp = 2000, md = 50 minutes, and pv = 1 ppm. (The true
histogram may be shifted horizontally based on the clock
skew of the Dag cards, but a horizontal shift does not af-
fect the general shape of the distribution.) Empirically, for
any given values for mp, md, and pv, we can compute the
entropy of the distribution of clock skews. Doing so serves
as a means of gauging how many bits of information an
adversary might learn by passively monitoring a device’s
clock skew, assuming that devices’ clock skews are con-
stant over time, which is something we address later. To
compute the entropy, we consider bins of width pv, and for
each source s in S(cid:1)
, we increment the count of the bin cor-
responding to devices with clock skews similar to the skew
of s (here we use the skew estimate computed over full two
hours). We then allocate another bin of size |S| − |S(cid:1)|; this
bin counts the number of sources that do not have consis-
tent clock skew measurements. We apply the standard en-
tropy formula [25] to compute the entropy of this distribu-
tion of bins, the results of which appear in the last column
of Table 2. As one might expect, the amount of information
available to an adversary increases as mp and md increase.
Assuming that clock skews are constant over time, our
results suggest that a passive adversary could learn at least
six bits of information about a physical device by applying
our techniques from Section 3. More bits of information
t
n
u
o
c
100
80
60
40
20
0
-300
-200
-100
100
skew estimate (ppm)
0
200
300
Figure 2. Histogram of TSopt clock skew es-
timates for sources in BBN. Trace recorded
on an OC-48 link of a U.S. Tier 1 ISP, 2004-04-
28 19:30–21:30PDT. Here mp = 2000 packets,
md = 50 minutes, and pv = 1 ppm.
should be available to an active adversary since an active
adversary might be able to force the ﬁngerprintee to send
packets more frequently or over longer periods of time.
DISTRIBUTION OF CLOCK SKEWS: EXPERIMENTS WITH
A HOMOGENEOUS LAB. One observation on the above
analysis is that we applied it to a wide variety of machines,
which likely ran a wide variety of operating systems. There-
fore, one may wonder whether the distribution shown in
Figure 2 is due to operating system differences or to ac-
tual physical differences on the devices. For example, given
only the above results, it might still be possible to argue
that if we applied our skew estimates to a large number
of (apparently) homogeneous machines, we would get back
approximately the same (i.e., indistinguishable) skew esti-
mates for all of the machines. To address this issue, we con-
ducted an experiment with 69 (apparently) homogeneous
machines in one of UCSD’s undergraduate computing lab-
oratories. All the machines were Micron PCs with 448MHz
Pentium II processors running Microsoft Windows XP Pro-
fessional Service Pack 1. Our measurer, host2, was a
Dell Precision 410 with a 448MHz Pentium III processor
and running Debian 3.0 with a recompiled 2.4.18 kernel;
host2 is located within the University’s computer science
department and is 3 hops and a half a millisecond away from
the machines in the undergraduate laboratory.
To create the requisite trace of TCP packets from these
machines, we repeatedly opened and then closed connec-
tions from host2 to each of these machines. Each open-
then-close resulted in the Windows machines sending two
packets to host2 with the TCP timestamps option turned
on (the Windows machine sent three packets for each ﬂow,
but the TCP timestamp was always zero in the ﬁrst of these
three packets). Because of our agreement with the admin-
istrators of these machines, we were only able to open and
close connections with these Windows machines at random
intervals between zero and ﬁve minutes long. Thus, on av-
erage we would expect to see each machine send host2
48 TCP packets with the TCP timestamps option turned
on per hour. The experiment lasted for 38 days, begin-
ning at 19:00PDT 2004-09-07 and ending at approximately
20:30PDT 2004-10-15.
Figure 3 shows a plot, similar to Figure 1, for the 69
Micron machines as measured by host2 but sub-sampled
to one out of every two packets. Note that the plot uses
different colors for the observed offsets for different ma-
chines (colors are overloaded). Since the slopes of the sets
of points for a machine corresponds to the machine’s skew,
this ﬁgure clearly shows that different machines in the lab
have measurably different clock skews. Thus, we can eas-
ily distinguish some devices by their clock skews (for other
devices, we cannot). Because Windows XP machines re-
set their TSopt clocks to zero when they reboot, some of
the diagonal lines seem to disappear several days into the
ﬁgure. Our algorithms handle reboots by recalibrating the
initial observed offset, though this recalibration is not vis-
ible in Figure 3. The time in Figure 3 begins on 8:30PDT
2004-09-10 (Friday) speciﬁcally because the administrators
of the lab tend to reboot machines around 8:00PDT, and
beginning the plot on Friday morning means that there are
fewer reboots in the ﬁgure. We consider this experiment in
more detail below, where our focus is on the stability of our
clock skew estimates.
STABILITY OF CLOCK SKEWS. We now consider the sta-
bility of the TSopt clock skews for the devices in the above-
mentioned undergraduate laboratory. Consider a single ma-
chine in the laboratory. We divide the trace for this machine
into 12- and 24-hour periods, discarding 12-hour periods
with less than 528 packets from the device, and discarding
24-hour periods with less than 1104 packets from the device
(doing so corresponds to discarding 12-hour periods when
the device is not up for at least approximately 11 hours, and
discarding 24-hour periods that the device is not up for at
least 23 hours). We compute the device’s clock skew for
each non-discarded period, and then compute the difference
between the maximum and minimum estimates for the non-
discarded periods. This value gives us an indication of the
stability of the device’s clock skew.
For 12-hour periods, the maximum difference for a sin-
gle device in the lab ranged between 1.29 ppm and 7.33
ppm, with a mean of 2.28 ppm. For 24-hour periods, the
maximum difference for a single device ranged between
0.01 ppm and 5.32 ppm, with a mean of 0.71 ppm.
In-
terestingly, there seems to have been some administrator
function at 8:00PDT on 2004-09-10 that slightly adjusted
16
14
12
10
8
6
4
2
0
)
s
d
n
o
c
e
s
(
t
e
s
f
f
o
d
e
v
r
e
s
b
o
-2
0
12
24
72
84
96
36
48
60
time since start of measurement (hours)
Figure 3. TSopt clock offset-sets for 69
Micron 448MHz Pentium II machines run-
ning Windows XP Professional SP1. Trace
recorded on host2, three hops away, 2004-
09-10 08:30PDT to 2004-09-14 08:30PDT.
the TSopt clock skews of some of the machines. If we con-
duct the same analysis for the trace beginning at 8:30PDT
2004-09-10 and ending on 2004-10-15, for 24-hour periods,
the range for maximum difference for each device in the lab
dropped to between 0.00 ppm and 4.05 ppm. See [15] for a
detailed table.
The current results strongly support our claim that mod-
ern processors have relatively stable clock skews. More-
over we believe that if the administrators of the lab allowed
us to exchange more packets with the 69 ﬁngerprintees, we
would have found the clock skews to be even more stable.
In Section 6 we apply our clock skew estimates to a single
computer at multiple locations and on multiple dates, and
the skew estimates again are close (Table 3); our results be-
low further support our claim of the stability of clock skews
over time.
6 Access
technology-,
topology-,
and
measurer-independent measurements
Here we consider our experiments which suggest that
clock skew estimates are relatively independent of the ﬁn-
gerprintee’s access technology, the topology between the
ﬁngerprintee and the measurer, and the measurer’s machine.
LAPTOPS IN MULTIPLE LOCATIONS. Our ﬁrst set of ex-
periments along these lines measures laptop connected to
the Internet via multiple access technologies and locations
(Table 3). For all these experiments, laptop is a Dell Lat-
itude C810 notebook with a 1.133GHz Pentium III Mobile
processor and running a default installation of Red Hat 9.0
(Linux kernel 2.4.20-8). The measurer in all these experi-
Packets Wireless
Yes, WEP
Laptop location
San Diego, CA, home cable
SD Supercomputer Center
CSE Dept, UCSD
San Diego, CA, home cable
Clinton, CT, home cable
San Diego, CA, home cable
SD Supercomputer Center
San Diego dialup, 33.6kbps
SD Public Library
Start time (PDT)
2004-07-09, 22:00
2004-07-10, 10:00
2004-07-12, 12:00
2004-07-12, 21:00
2004-07-26, 06:00
2004-09-14, 21:00
2004-09-22, 12:00
2004-10-18, 10:00
2004-10-18, 14:45
Duration
3 hours
3 hours
3 hours
3 hours
3 hours
30 min
30 min
30 min
30 min