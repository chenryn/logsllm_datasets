title:TLS-N: Non-repudiation over TLS Enablign Ubiquitous Content Signing
author:Hubert Ritzdorf and
Karl W&quot;ust and
Arthur Gervais and
Guillaume Felley and
Srdjan Capkun
TLS-N: Non-repudiation over TLS
Enabling Ubiquitous Content Signing for Disintermediation
Hubert Ritzdorf, Karl Wüst, Arthur Gervais, Guillaume Felley, Srdjan Čapkun
Department of Computer Science
ETH Zurich, Switzerland
ABSTRACT
An internet user wanting to share observed content is typically
restricted to primitive techniques such as screenshots, web caches
or share button-like solutions. These acclaimed proofs, however, are
either trivial to falsify or require trust in centralized entities (e.g.,
search engine caches). This motivates the need for a seamless and
standardized internet-wide non-repudiation mechanism, allowing
users to share data from news sources, social websites or (cid:27)nancial
data feeds in a provably secure manner.
Additionally, blockchain oracles that enable data-rich smart con-
tracts typically rely on a trusted third party (e.g., TLSNotary or
Intel SGX). A decentralized method to transfer web-based content
into a permissionless blockchain without additional trusted third
party would allow for smart contract applications to (cid:30)ourish.
In this work, we present TLS-N, the (cid:27)rst TLS extension that
provides secure non-repudiation and solves both of the mentioned
challenges. TLS-N generates non-interactive proofs about the con-
tent of a TLS session that can be e(cid:28)ciently veri(cid:27)ed by third parties
and blockchain based smart contracts. As such, TLS-N increases
the accountability for content provided on the web and enables
a practical and decentralized blockchain oracle for web content.
TLS-N is compatible with TLS 1.3 and adds a minor overhead to a
typical TLS session. When a proof is generated, parts of the TLS
session (e.g., passwords, cookies) can be hidden for privacy reasons,
while the remaining content can be veri(cid:27)ed.
Practical demonstrations can be found at https://tls-n.org/.
1 INTRODUCTION
The overwhelming adoption of TLS [42] for most HTTP tra(cid:28)c
has transformed the web into a more con(cid:27)dential and integrity
protected communication platform. Despite TLS’s adoption, an
e(cid:28)cient, secure, privacy-preserving, non-interactive and seamless
method to prove communication contents to a third party — i.e. a
standardized method for non-repudiation — that does not require an
additional trusted party is missing.
Such a non-repudiation solution and its proofs would allow more
accountability in the web and aid the construction of decentralized
blockchain oracles as we outline in the following.
Interestingly, users are currently unable to prove to a third party
the content they have observed on a particular website. One of the
most popular methods for users to document and share content they
watch on the Internet are screenshots that are trivial to falsify [21,
30]. A non-repudiation solution would remove the necessary trust
towards a user that claims to have observed a given content. Further,
currently trusted third parties, such as search engine caches or web
archives could add non-repudiable proofs about the content they
have observed and thus increase their credibility.
1
Furthermore, blockchain-based smart contracts [43] can signif-
icantly bene(cid:27)t from an e(cid:28)cient non-repudiation solution. If for
example a stock market price API provides non-repudiable data,
any user could submit veri(cid:27)ably valid stock price information to the
blockchain (e(cid:29)ectively creating a decentralized blockchain oracle).
Because the blockchain-based smart contract veri(cid:27)es the validity of
the provided data, peers would only need to trust the data provider,
not the peers that actually transmit the data to the blockchain. Gen-
erally, this would allow to seamlessly connect real world events
with a blockchain and as such enable new application scenarios for
smart contracts. Note that existing blockchain oracles either rely
on deprecated security protocols (e.g., TLS 1.1 for TLSNotary) or
introduce additional trusted third parties (e.g., TLSNotary and Intel
SGX).
In this paper, we propose TLS-N, an extension of TLS that en-
ables the seamless integration of non-repudiation between arbi-
trary parties within TLS. TLS-N allows the generation of privacy-
preserving, non-repudiable, non-interactive proofs of the contents
of a TLS session. Our solution takes into account the performance
requirements of TLS, both in computation and memory to promote
adoption and reduce the potential attack surface (e.g. against Denial-
of-Service attacks). Our design supports various proof types, that
can be shared with other parties, allowing them to verify the con-
versation contents.
The proof veri(cid:27)cation requires no additional security assump-
tions other than those of TLS, and we do not need an additional
trusted third party. Note that any non-repudiation solution based
on a higher layer (e.g., HTTP), would either require access to the
cryptographic TLS keys, violating the layer principle, or would re-
quire the deployment and authentication of additional key material,
thereby signi(cid:27)cantly increasing the complexity of the solution.
In TLS-N, by the de(cid:27)nition of non-repudiation, message authen-
tication and the identi(cid:27)cation of at least one TLS peer is guaran-
teed. We compare TLS-N to existing non-repudiation proposals and
identify properties that non-repudiation solutions must possess for
particular use cases.
We implement and evaluate TLS-N as an extension of the new
TLS 1.3 standard. As such, we implement a TLS-N-enabled web
server, web client and an Ethereum-based smart contract that can
verify TLS-N proofs.
We (cid:27)nd that our prototype implementation incurs an overhead
of less than 1.5 milliseconds on existing TLS connections per HTTP
request for responses of 10 KB or less, which is a realistic size for
an API response. Verifying our proof examples in a smart contract
costs between 0.2 and 3 USD due to the currently high gasprice.
Prices depend on the proof size and signature type. Note that, once
this proof is veri(cid:27)ed, it can be used by millions of blockchain users.
Sends Proof
Veri(cid:27)er
(third party/
blockchain)
Learns about
Trusts
CA
Veri(cid:27)es
Identity
Requester
(client)
Conversation
Provides Evidence
Generator
(server)
Generates Proof from
evidence and plaintext
Figure 1: Our view of non-repudiation. First, evidence gener-
ation (by generator), second proof generation (by requester),
third proof veri(cid:27)cation (by veri(cid:27)er). Message originator and
recipient might act as requester, generator or both.
As a summary, our contributions in this paper are as follows:
• We propose the (cid:27)rst secure non-repudiation solution that
captures privacy and performance requirements and can
be seamlessly integrated with the TLS 1.3 standard [38].
Our solution does not add new security assumptions to
those of TLS and does not rely on an additional trusted
third party.
• We implement our extension for TLS 1.3 on top of Mozillas
NSS library [32] and create an Apache module supporting
our extension. Our experimental evaluation shows that
a typical proof size as well as the proof generation and
veri(cid:27)cation times grow linear with the size of the data. The
server side processing times are low with less than 1ms for
16 KB plaintext without privacy protection and less than
8ms for 16 KB plaintext with privacy protection.
• We provide an Ethereum based smart contract implemen-
tation for TLS-N proof veri(cid:27)cation. TLS-N therefore acts
as a practical decentralized blockchain oracle that does not
require any additional trusted third party. Users can source
data from any TLS-N-enabled content provider, submit it
to the blockchain where the smart contract veri(cid:27)es the
proof. Note that only the data provider needs to be trusted,
and as such any client can submit a TLS-N proof to the
smart contract.
• We provide a structured description of non-repudiation
properties, possible attacks, requirements and use-cases
for non-repudiation solutions.
The remainder of the paper is organized as follows. In Section 2,
we de(cid:27)ne the problem statement and motivate our TLS-based ap-
proach before presenting the design of our solution TLS-N in Sec-
tion 3. In Section 4, we perform its security analysis and evaluate it
in Section 5. We overview related work and contrast it to our solu-
tion in Section 6, while highlighting attacks on previous TLS-based
work. We provide a discussion in Section 7, before concluding the
paper in Section 8.
2 PROBLEM STATEMENT
In this section we describe the main problem that we are trying to
solve and we discuss relevant use cases and their requirements.
Broadly, we address the problem of non-repudiation in online
interactions as seen in Figure 1. Given that such interactions are
mainly protected using TLS [11], we focus on the provision of non-
repudiation for services that run on top of TLS. TLS is the most
widely used security protocol suite on the Internet and provides
authentication, con(cid:27)dentiality, and integrity. Although it relies on
public-key signatures for authentication, TLS protects message
integrity and con(cid:27)dentiality of exchanged messages via shared
secret keys that are established at the beginning of the session.
Given this, TLS does not provide non-repudiation for the exchanged
messages — clearly, a sender of the message can deny having sent
the message, given that the Message Authentication Codes have
been generated using a shared, symmetric key.
More precisely, we consider the following problem: Can TLS be
extended to provide a compact evidence allowing for e(cid:28)cient proof
generation and veri(cid:27)cation so that the non-interactive proofs allow
third parties to verify the TLS conversation contents. 1
In addition, since TLS peers might exchange privacy-sensitive
content (e.g., login credentials, cookies or access tokens), the TLS
extension should provide e(cid:28)cient, privacy-protection features to
hide sensitive parts of the conversation from third parties.
Based on previous work in the area, we consider the following
non-repudiation types [1, 20, 36, 46]:
Non-repudiation of origin (NRO) provides proof that a mes-
sage has originated from the speci(cid:27)ed originator. The evi-
dence is provided by the originator and given the proof, the
originator is not able to later deny having sent the message.
Non-repudiation of receipt (NRR) provides proof that a mes-
sage was received by the speci(cid:27)ed recipient. The evidence
is provided by the recipient and given the proof, the recip-
ient is not able to later deny having received the message.
Non-repudiation of conversation (NRC) provides a proof of a
total order of messages sent and received by a party. In-
tuitively, NRC speci(cid:27)es the conversation and the party’s
role in it, from the perspective of its system. The speci(cid:27)ed
party is not able to later deny a claim of having sent and
received the message in the conversation or the order of
messages within the conversation.
Note, that non-repudiation of conversation (NRC) implies non-
repudiation of origin (NRO) for all sent messages within the con-
versation and non-repudiation of receipt (NRR) for all received
messages. Therefore, NRC is a stronger proof than NRR or NRO.
To highlight the di(cid:29)erence between NRO and NRC consider the
following example. A web service returns the current stock price
for a requested ticker symbol, e.g. for the request EXAMPLE the re-
sponse is $10. Non-repudiation of origin would ensure that the web
service answered $10. The answer by itself, however, is not useful
without the context of the conversation. Non-repudiation of con-
versation would ensure that the web service answered $10 after
being queried for EXAMPLE.
Apart from the non-repudiation type we also consider the fol-
lowing properties of a non-repudiation solution. These properties
are motivated by di(cid:29)erent use cases, as we will show in Table 1.
1Here by extended we mean that a proper TLS Extension as speci(cid:27)ed in [38] can be
created.
2
Evidence
Privacy
.
B
e
s
n
o
p
s
e
R
-
t
s
e
u
q
e
R
g
n
i
v
r
e
s
e
r
P
-
r
e
d
r
O
e
m
T
i
.
I
e
v
i
t
i
s
n
e
S
g
n
i
t
c
e
t
o
r
P
y
t
i
r
a
l
u
n
a
r
G
n
o
i
t
c
e
t
o
r
P
y
t
i
l
i
b
a
s
U
e
p
y
T
n
o
i
t
a
i
d
u
p
e
r
-
n