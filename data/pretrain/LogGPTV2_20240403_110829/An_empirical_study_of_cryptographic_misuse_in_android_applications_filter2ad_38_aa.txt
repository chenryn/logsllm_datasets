title:An empirical study of cryptographic misuse in android applications
author:Manuel Egele and
David Brumley and
Yanick Fratantonio and
Christopher Kruegel
An Empirical Study of Cryptographic Misuse
in Android Applications
Manuel Egele, David Brumley
Carnegie Mellon University
{megele,dbrumley}@cmu.edu
Yanick Fratantonio, Christopher Kruegel
University of California, Santa Barbara
{yanick,chris}@cs.ucsb.edu
ABSTRACT
Developers use cryptographic APIs in Android with the intent
of securing data such as passwords and personal information
on mobile devices. In this paper, we ask whether developers
use the cryptographic APIs in a fashion that provides typical
cryptographic notions of security, e.g., IND-CPA security. We
develop program analysis techniques to automatically check
programs on the Google Play marketplace, and ﬁnd that
10,327 out of 11,748 applications that use cryptographic APIs
– 88% overall – make at least one mistake. These numbers
show that applications do not use cryptographic APIs in a
fashion that maximizes overall security. We then suggest
speciﬁc remediations based on our analysis toward improving
overall cryptographic security in Android applications.
Categories and Subject Descriptors
D.2.7 [Software Engineering]: Distribution, Maintenance,
and Enhancement—Restructuring, reverse engineering, and
reengineering
Keywords
Software Security, Program Analysis
1
Developers use cryptographic primitives like block ciphers
and message authenticate codes (MACs) to secure data and
communications. Cryptographers know there is a right way
and a wrong way to use these primitives, where the right
way provides strong security guarantees and the wrong way
invariably leads to trouble.
Introduction
In this paper, we ask whether developers know how to use
cryptographic APIs in a cryptographically correct fashion.
In particular, given code that type-checks and compiles, does
the implemented code use cryptographic primitives correctly
to achieve typical deﬁnitions of security? We assume that
developers who use cryptography in their applications make
this choice consciously. After all, a developer would not likely
try to protect data that they did not believe needed securing.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00
http://dx.doi.org/10.1145/2508859.2516693.
We focus on two well-known security standards: security
against chosen plaintext attacks (IND-CPA) and cracking
resistance. For each deﬁnition of security, there is a generally
accepted right and wrong way to do things. For example,
electronic code book (ECB) mode should only be used by
cryptographic experts. This is because identical plaintext
blocks encrypt to identical ciphertext blocks, thus rendering
ECB non-IND-CPA secure. When creating a password hash,
a unique salt should be chosen to make password cracking
more computationally expensive.
We focus on the Android platform, which is attractive
for three reasons. First, Android applications run on smart
phones, and smart phones manage a tremendous amount of
personal information such as passwords, location, and social
network data. Second, Android is closely related to Java, and
Java’s cryptographic API is stable. For example, the Cipher
API, which provides access to various encryption schemes has
been unmodiﬁed since Java 1.4 was released in 2002. Third,
the large number of available Android applications allows
us to perform our analysis on a large dataset, thus gaining
insight into how developers use cryptographic primitives.
One approach for checking cryptographic implementations
would be to adapt veriﬁcation-based tools like the Microsoft
Crypto Veriﬁcation Kit [7], Murϕ [22], and others. The
main advantage of veriﬁcation-based approaches is that they
provide strong guarantees. However, they are also heavy-
weight, require signiﬁcant expertise, and require manual
eﬀort. The sum of these three limitations make the tools
inappropriate for large-scale experiments, or for use by day-
to-day developers who are not cryptographers.
Instead, we adopt a light-weight static analysis approach
that checks for common ﬂaws. Our tool, called CryptoLint,
is based upon the Androguard Android program analysis
framework [12]. The main new idea in CryptoLint is to
use static program slicing to identify ﬂows between crypto-
graphic keys, initialization vectors, and similar cryptographic
material and the cryptographic operations themselves. Cryp-
toLint takes a raw Android binary, disassembles it, and
checks for typical cryptographic misuses quickly and accu-
rately. These characteristics make CryptoLint appropriate
for use by developers, app store operators, and security-
conscious users.
Using CryptoLint, we performed a study on crypto-
graphic implementations in 11,748 Android applications.
Overall we ﬁnd that 10,327 programs – 88% in total – use
cryptography inappropriately. The raw scale of misuse indi-
cates a widespread misunderstanding of how to properly use
cryptography in Android development.
73We ﬁnd there are exacerbating factors, and suggest reme-
diations. First, while current developer tools can check a
number of security properties, using cryptography correctly
is not one of them. Adding light-weight checks, such as
in CryptoLint, would improve security. Second, imple-
mentations abstract away semantic assumptions about the
correct use of cryptographic primitives. For example, the
documentation for CBC encryption does not state that the
initialization vector should not be a constant. Adding a secu-
rity discussion to cryptographic API documentation would
address this problem. Third, the default behavior in crypto-
graphic libraries is often not a recommended practice. For
example, the predominant Android Java security provider
API defaults to using the ECB block cipher mode for AES
encryption. To remedy this problem, we suggest changing
the default behavior to a more secure variant.
Contributions: Overall, our contributions are:
• We propose light-weight static analysis techniques and
tools that can catch common cryptographic misuses
(§5). Application developers and app store maintainers
can use the tools to identify likely misuses in cryptog-
raphy before an end-user uses the application.
• We perform a large-scale experiment to measure cryp-
tographic misuse in Android (§6). To the best of our
knowledge, we are the ﬁrst to perform such a study at
scale, demonstrate a widespread problem, and identify
the likely culprits.
• We suggest remediation measures to help address the
widespread issues identiﬁed (§7).
2 Deﬁnitions
This section presents common cryptographic deﬁnitions for
symmetric encryption, password-based encryption, and the
respective notions of security. We adopt the notation used
by Bellare and Rogaway [6].
Block Ciphers and Symmetric Encryption Schemes A
block cipher is a function:
E : {0, 1}k × {0, 1}n → {0, 1}n
where k is the key size and n is the block size. We call
the input the plaintext, and the output the ciphertext. For
each K ∈ {0, 1}k, let EK : {0, 1}n → {0, 1}n be deﬁned as
EK (M ) = E(K, M ). A block cipher Ek(·) is a permutation,
−1
−1
with E
K (EK (M )) = M and
K (C)) = C for all M, C ∈ {0, 1}n.
−1
k
EK (E
as its inverse. Thus, E
While block ciphers encrypt ﬁxed-length messages, an
encryption scheme encrypts messages of arbitrary length. A
symmetric encryption scheme SE is a triple of algorithms
SE = (K,E,D), where:
• K is a key generation algorithm producing a key K.
We denote picking a key uniformly at random from the
key space KEY S(SE) as K $← K.
• An encryption algorithm E, which might be random-
ized or stateful, takes a plaintext {0, 1}∗, a key K
returned by the key generation algorithm, and outputs
a ciphertext C ∈ {0, 1}∗ ∪ {⊥}.
• A deterministic decryption algorithm D, which takes
a ciphertext C ∈ {0, 1}∗, a key K, and outputs M ∈
{0, 1}∗ ∪ {⊥}. That is, M ← DK (C).
• For correctness, we should be able to decrypt messages:
Dk(Ek(M )) = M
We give two examples of encryption schemes built from
block ciphers: ECB mode and CBC mode encryption.
Electronic codebook (ECB) mode is a stateless, determin-
istic encryption scheme deﬁned over a block cipher. The
encryption function (ECB) is:
1
2
3
4
5
6
ECBK (M )
M [1] . . . M [m] ← M
for i ← 1 to m do
C[i] ← EK (M [i])
C ← C[1] . . . C[m]
return C
Algorithm 1: ECB Mode
Ciphertext Block Chaining (CBC) is an encryption algo-
rithm built from a block cipher where each block of plaintext
is XORed with the previous block of ciphertext. The ﬁrst
block of plaintext is XORed with an initialization vector (IV).
As we will see, one insecure way to initialize the IV is by
using a constant. A secure version, called CBC$, initializes
the IV with a random number upon each invocation of the
algorithm, as shown below:
1
2
3
4
5
6
7
CBC$K (M )
M [1] . . . M [m] ← M
C[0] $← {0, 1}n
for i ← 1 to m do
C ← C[0] . . . C[m]
return C
C[i] ← EK (M [i] ⊕ C[i − 1])
Algorithm 2: CBC$ Mode
Encryption and IND-CPA Security The goal of an en-
cryption scheme is to provide privacy. Informally, privacy
means that an adversary should have a hard time discerning
even a single bit of information about the plaintext given
the ciphertext. This intuition is formalized in the notion of
indistinguishability under a chosen plaintext attack (IND-
CPA). We should only consider an encryption scheme to be
secure if and only if it is IND-CPA secure.
IND-CPA security can be formalized in a game where:
1. An oracle ﬂips a fair coin b = {0, 1}.
2. The adversary picks a pair of messages of equal length
(M0, M1). The adversary, who does not have access to
the secret key, gives the pair to the encryption oracle
3. The oracle for all encryption calls returns Cb = EK (Mb)
to the attacker.
4. The attacker executes steps 2 and 3 q times.
5. The attacker outputs a guess b(cid:48). The attacker wins if
b(cid:48) = b, else the attacker looses.
An encryption scheme is considered IND-CPA secure if the
probability that the attacker, after seeing the encryption of
q messages, cannot do better than guessing b.
We state as fact a well-known theorem (proven in [6]):
Theorem 1. An encryption scheme must be either proba-
bilistic or stateful to be indistinguishable under chosen plain-
text attacks (IND-CPA).
For instance, by Theorem 1 ECB mode cannot be IND-
CPA secure. In particular, the attacker can learn b using
74only two queries to the oracle. Let the underlying block
cipher length be n. The attacker constructs M1 = 02n and
M0 = 0n1n. The attacker receives back a 2n-bit ciphertext
consisting of blocks C[0] and C[1].
If C[0] = C[1], then
message M1 was encrypted, else message M0 was encrypted.
Thus, the attacker can tell whether b = 1 or b = 0. CBC$,
on the other hand, can be proven IND-CPA secure [6].
Password-based Encryption User-chosen passwords are
often vulnerable to dictionary brute-force attacks. Password-
based encryption schemes make such brute force attacks more
expensive. RFC 2898 (PKCS#5) [19] deﬁnes PBE, where
encrypting a message M using a password pw and salt sa is
deﬁned as (as described in [5]):
1
2
3
4
PBE(pw, M )
sa $← {0, 1}s
L ← KD(pw||sa)
return Ek(L, M )||sa
Algorithm 3: Password-based encryption
In PBE, E should be a IND-CPA secure encryption scheme,
and KD is the key derivation algorithm. The key derivation
algorithm is a c-fold iteration of a cryptographically secure
hash function H.
While the c-fold iteration makes brute force attacks more
expensive a random salt sa eﬀectively thwarts brute force
attacks that rely on pre-computed information, such as rain-
bow tables. Without any salt, a brute force attack with a
dictionary of size N using PBE takes at least an additional
cN iterations of H. Assuming s = |sa| is suﬃciently large
that salts are unique, the complexity rises to scN . RFC
2898 recommends using no less than 1,000 iterations and
a 64-bit salt. For example, Apple’s iOS Data Protection
Layer choses an iteration count so that generating a single
key from a password takes roughly 80ms [3]. This delay is
hardly noticeable by the user, but signiﬁcantly slows down
brute-forcing attacks.
Abadi and Warinschi [2] provide a computational analysis
of password based encryption schemes. Bellare et al. [5]
propose a theory of multi-instance security, where they show
the key-derivation functions proposed in PKCS#5 and prove
that per password salts amplify multi-instance security.
3 Common Rules in Cryptography
While cryptographic security is precisely deﬁned, this paper
asks the question whether developers who use cryptographic
APIs achieve this notion of security. Using cryptographic
primitives correctly can be challenging. In particular, any
application that violates one of the following six rules cannot
be secure.
Rule 1: Do not use ECB mode for encryption. [6]
Rule 2: Do not use a non-random IV for CBC encryption. [6,
23]
Rule 3: Do not use constant encryption keys.
Rule 4: Do not use constant salts for PBE. [2, 5]
Rule 5: Do not use fewer than 1,000 iterations for PBE. [2,
Rule 6: Do not use static seeds to seed SecureRandom(·).
5]
Rule 1 forbids the use of ECB mode because a symmetric
encryption scheme in ECB mode does not provide a general
notion of privacy (i.e., it is not IND-CPA secure). Recall that
ECB mode is deterministic and not stateful, thus cannot be
IND-CPA secure by Theorem 1. A signiﬁcant problem with
ECB mode is that identical messages encrypt to identical
ciphertexts. Such a leak of information is often intolerable.
One commonly stated exception is that ECB mode is secure
if the message is smaller than the underlying block cipher
block size and all messages are unique. However, even in
such cases an IND-CPA secure scheme would also work while
providing greater theoretic security, and would thus be a
more robust choice.
Rule 2 states that the CBC-mode construction (in Alg. 2)
should always use a random IV. In essence, CBC$ should
always be used. Unfortunately, it is common to initialize
the IV with a constant, e.g., all zeros (i.e., setting line 3
of Algorithm 2 to a constant). A constant IV results in a
deterministic, stateless cipher, which by Theorem 1 cannot
be IND-CPA secure. One can ﬁx the situation by requiring
that the ﬁrst message block is a random number (essentially
taking on the role of a randomized IV). We note that such
exceptions to CBC$ are often historically a band-aide patch
for implementations that do not follow Rule 2 initially, e.g.,