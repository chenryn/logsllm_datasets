out-of-state TCP packets. Many websites such as Facebook
and Twitter deploy such ﬁrewalls to reduce malicious trafﬁc.
For instance, iptables can be easily conﬁgured to achieve
this [8]. Note that interestingly this security feature on the
server turns out to help enable one of the TCP hijacking
attack. S2 requires the attack server’s network latency to
the victim needs to be smaller compared to the legitimate
server.
B. Attack Design
In this section, we describe in detail each attack and
the corresponding requirements. Speciﬁcally, we design
three classes of attacks for each threat model as described
earlier in §III-B: 1) On-site TCP hijacking/injection. 2)
Off-site TCP hijacking/injection. 3) Spoofed connection
351
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
establishment. Each class has several attacks with the same
goal but different requirements.
1) On-site TCP hijacking: As noted, TCP hijacking
allows packets injected right after the connection is es-
tablished. It is more powerful than the general case of
injection but with more requirements. Thus, we focus on
the hijacking attack design which also covers the general
case of injection. In total, we devise three TCP hijacking
attacks and all of which are implemented and tested against
the nation-wide cellular network, since all requirements are
satisﬁed in the network (As shown in §V).
idea is to reset
The ﬁrst TCP hijacking is Reset-the-server. The high-
level
the connection on the legitimate
server as soon as possible to allow the attacker to claim
to be the legitimate server talking to the victim. The key
is that such reset packets have to be triggered right after
the legitimate server sends SYN-ACK. To achieve this, we
leverage requirement C4 which allows an attacker to predict
the rough range of victim’s ISN and send reset packets with
sequence numbers in that range. This is helpful because
then the attacker can send much fewer spoofed RST packets
(thus with lower bandwidth requirement) compared to enu-
merating the entire 4G space. Further, after the legitimate
server is reset, requirement S1 is necessary as it helps
prevent the legitimate server from generating RST upon
receiving out-of-state data or ACK packets from the victim.
Here we focus on the design of the attack. Implementation
and feasibility analysis are covered in §V.
Figure 4 illustrates the attack sequence. Here the attacker
is off-path and not man-in-the-middle. It
is positioned
between the victim and legitimate server for ease of illus-
tration only. Starting at time 1, the victim app ﬁrst initiates
a TCP SYN. At time 2, the malware discovers the new
connection attempt by continuously monitoring the output
of “netstat”, and it immediately notiﬁes the attack server
about the new connection including the four tuples. The
malware also starts a new connection to the attack server
so that the server knows the current ISN. At time 3, the
legitimate server receives the SYN, and replies with a SYN-
ACK. At time 4, the attack server ﬂoods the legitimate
server with a number of spoofed RST packets based on the
previously gathered ISN. As discussed earlier in §III-E, the
RST packets have to arrive before the ACK/request packets
at time 5; otherwise, the legitimate server will respond
before the attacker can send any malicious content.
From there on, the legitimate server’s connection is reset.
All future packets from the victim are considered out-
of-state and silently dropped due to requirement S1. For
instance, the ACK packet received at time 5 is silently
discarded. From time 6 to 7, we omit the sequence number
inference procedure described earlier in §III-D. At time 8,
the attack server can inject data using the inferred sequence
number.
Table I
summarizes
the at-
tack. Depending on the side-channel used for feedback,
the requirements
for
the set of requirements for this attack methodology is
(C1,C2,C3,C4,N4,S1) using the packet count feedback,
and (C1,C3,C4,N2,N4,S1) using the intermediate hop IPID
feedback. Note that N4 is needed because all RST packets
need to have the correct external source port number.
idea is similar to Reset-the-server in that
The second TCP hijacking is Preemptive-SYN. The
high-level
it
also tries to prevent the legitimate server’s packets from
reaching the client. The difference is that it does so by
turning the ﬁrewall middlebox’s sequence number checking
feature against the legitimate server. Remember that the
middlebox initializes the current sequence number from
SYN and SYN-ACK packet, if an attacker can preemptively
send spoofed SYN packets before the legitimate SYN-ACK
packet (e.g., when requirement S2 is satisﬁed), the ﬁrewall
will initialize the sequence number according to the spoofed
SYN instead of the legitimate SYN-ACK. Spoofed SYN
packet is allowed due to TCP simultaneous open [25]. The
attacker cannot directly spoof a SYN-ACK packet without
the knowledge of a valid acknowledge number. Another
difference is that such an attack needs requirement N1
to allow the sequence number inference from the client’s
network. Speciﬁcally, a separate attack phone inside the
network is required to spoof the victim’s IP and infer
the sequence number of the victim’s SYN. As described
later in §V, the ﬁrewall is deployed at the Gateway GPRS
Supporting Node (GGSN) level [34] such that a single
attack phone can spoof hundreds of thousands of IPs of
other devices. As a result, the attack phone and the victim
phone can be in different cities or states as long as they go
through the same GGSN. The details are described below.
As shown in Figure 5, initially the victim app sends a
TCP SYN packet (with sequence number X) at time 1,
followed by the malware reporting the new connection. Due
to requirement S2, at time 3, the attack server receives the
notiﬁcation and immediately sends a preemptive SYN (with
sequence number Z) which reaches the ﬁrewall middlebox
before the legitimate server’s SYN-ACK. Also, note that
the preemptive SYN packet does not actually reach the
phone (easily achieved with small TTLs set deliberately
by the attacker), necessary to prevent
the phone from
replying with SYN-ACK which triggers connection reset
from the legitimate server and prevents the connection
from being established. At time 4, the legitimate server’s
SYN-ACK packet is dropped at the ﬁrewall because its
sequence number Y is now considered out-of-window of
(Z-WIN,Z+WIN), assuming that Y and Z are unlikely
close together. During time 5 and 6, the attack phone tries to
infer the sequence number of the victim’s original SYN with
the intermediate hop feedback. At time 7, after ﬁnishing
inferring the sequence number, the attack phone reports
it to the attack server which then sends a spoofed SYN-
ACK with the correct acknowledgment number. Since the
victim never actually sees any response after it sends SYN,
thinking the delay is likely due to resource issues, it happily
352
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
WŚŽŶĞ
WŚŽŶĞ
WŚŽŶĞ
sŝĐƚŝŵ
ƉƉ
hŶƉƌŝǀŝůĞŐĞĚ
ŵĂůǁĂƌĞ
&ŝƌĞǁĂůů
ŵŝĚĚůĞďŽǆ
KĨĨͲƉĂƚŚ
ĂƚƚĂĐŬĞƌ
>ĞŐŝƚ
^ĞƌǀĞƌ
ƚƚĂĐŬ
WŚŽŶĞ
sŝĐƚŝŵ
ƉƉ
ŵĂůǁĂƌĞ
hŶƉƌŝǀŝůĞŐĞĚ
&ŝƌĞǁĂůů
ŵŝĚĚůĞďŽǆ
ϭ͘^zE;ƐĞƋсyͿ
Ϯ͘EŽƚŝĨŝĐĂƚŝŽŶŽĨŶĞǁĐŽŶŶ
KĨĨͲƉĂƚŚ
ĂƚƚĂĐŬĞƌ
>ĞŐŝƚ
^ĞƌǀĞƌ
sŝĐƚŝŵ
ƉƉ
hŶƉƌŝǀŝůĞŐĞĚ
ŵĂůǁĂƌĞ
&ŝƌĞǁĂůů
ŵŝĚĚůĞďŽǆ
tŝŶĚŽǁͲ
ƐŚŝĨƚŝŶŐ
&ŝƌĞǁĂůů
KĨĨͲƉĂƚŚ
ĂƚƚĂĐŬĞƌ
>ĞŐŝƚ
^ĞƌǀĞƌ
ϭ͘^zE
Ϯ͘EŽƚŝĨŝĐĂƚŝŽŶŽĨŶĞǁĐŽŶŶ
ϯ͘^zEͲ<;ƐĞƋсzͿ
ϱ͘<ͬƌĞƋƵĞƐƚ
ϰ͘^ƉŽŽĨĞĚ
Z^dƐ
ϲ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞͲͲƐƚĂƌƚ
͘
͘
͘
ϳ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞͲͲĞŶĚ
ϴ͘DĂůŝĐŝŽƵƐƌĞƐƉŽŶƐĞ

Ž
Ŷ
Ŷ
Ğ
Đ
ƚ
ŝ
Ž
Ŷ

ƌ
Ğ
Ɛ
Ğ
ƚ
ϯ͘^zE;ƐĞƋсͿ
;
ϰ͘^zEͲ<;ƐĞƋсzͿ
Ĩ
Ğ
Ğ
Ě
ď
Ă
Đ
Ŭ
/
/
W

ϱ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞͲͲƐƚĂƌƚ
͘
͘
͘
ϲ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞͲͲĞŶĚ
ϳ͘ZĞƉŽƌƚŝŶĨĞƌƌĞĚƐĞƋŶƵŵďĞƌ
ϴ͘^zEͲ<;ƐĞƋс͕ĂĐŬсyнϭͿ
ϵ͘<;ƐĞƋсyнϭ͕ĂĐŬснϭͿ
ϭϬ͘DĂůŝĐŝŽƵƐd
ϭϭ͘Z^d;ƐĞƋснϭͿ
ϭ͘^zE
Ϯ͘EŽƚŝĨŝĐĂƚŝŽŶŽĨŶĞǁĐŽŶŶ
ϯ͘^zEͲ<;ƐĞƋсzͿ
ϰ͘^ŚŝĨƚǁŝŶĚŽǁ
ϱ͘<ͬƌĞƋƵĞƐƚ
ϲ͘ZĞƐƉŽŶƐĞ
ϳ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞ;ǁŝƚŚƐŚŝĨƚŝŶŐͿͲͲƐƚĂƌƚ
;
ϴ͘^ĞƋŶƵŵďĞƌŝŶĨĞƌĞŶĐĞ;ǁŝƚŚƐŚŝĨƚŝŶŐͿͲͲĞŶĚ
͘
͘
͘
ϵ͘DĂůŝĐŝŽƵƐƌĞƐƉŽŶƐĞ
Figure 4: Reset-the-server hijacking
Figure 5: Preemptive-SYN hijacking
Figure 6: Hit-and-run hijacking
accepts the SYN-ACK and replies with ACK to complete
the connection.
There is however still one remaining challenge — the
ACK packet at time 9 will trigger a reset once it arrives at
the legitimate server, which will terminate the connection
immediately. To get around this problem, the attack server
has to inject data packets immediately following the spoofed
SYN-ACK at time 10 so that it arrives before the RST
packet at time 11. As long as the data packet is accepted
before the connection is RST, the damage is already done.
For instance, we veriﬁed that in a HTTP session, a small
data packet containing an iframe pointing to a malicious
URL still makes the browser follow the URL and load the
content even through the connection is reset immediately
after.
The requirements are (C1,C2,C3,N1,N4,S2) using packet
count feedback, or (C1,C3,N1,N2,N4,S2) using intermedi-
ate hop IPID feedback. Here N4 is required because the
preemptive SYN packet needs to have the correct external
source port number as the destination port.
The last TCP hijacking is Hit-and-run. This attack
is possible only when the network deploys two different
ﬁrewall middleboxes, which is what we observed in the
nation-wide carrier elaborated in §V. In general, assuming
that the sequence number inference is carried out in network
external to the mobile device, the two different ﬁrewalls
have to satisfy the following: a window-shifting ﬁrewall
is deployed external to a window-advancing ﬁrewall. The
network may intentionally set up the external ﬁrewall for
general packet-ﬁltering (which is simpler and potentially
cheaper) and the internal one is for more advanced intrusion
detection (which requires packet reassembly and incurs
more overhead). The problem with this setup is that the
window-shifting ﬁrewall allows an attacker to intentionally
shift the window away from its original position which
effectively disallows packets sent from the legitimate server.
At the same time, the attacker still can shift the window
back when it is necessary to traverse the internal window-
advancing ﬁrewall to conduct the sequence number infer-
ence. This particular two-ﬁrewall setup effectively elimi-
nates the requirement C4 and S1 in the Reset-the-server
attack. We emphasize that the combined effect of the two
ﬁrewalls is still a window-advancing ﬁrewall and previous
two TCP hijacking attacks still work.
Figure 6 illustrates the attack process in detail. In this
example, we use the setup of the nation-wide network
where the internal window-advancing ﬁrewall has a left-
only window of 1G. However, in the general case, the attack
is possible as long as it is a window-advancing ﬁrewall.
Time 1–3 match that in the Reset-the-server attack. At
time 4, however, instead of resetting the connection on the
server, the attacker tries to intentionally shift the window
away from its original position. Speciﬁcally, regardless
of the original window’s position, an attacker can send
an array of spoofed packets with sequence number 4G,
4G-(WIN-1), 4G-2(WIN-1),
. . . , all the way to 0. It is
not hard to see that the center of the window will be
deterministically shifted to 0 (we show the feasibility in
§V). This way, at time 6, the legitimate server’s response is
highly likely to be dropped by the window-shifting ﬁrewall
(assuming its sequence number has a low probability of
being close to 0). Note that packets sent at time 4 do
not need to go further beyond the window-shifting ﬁrewall,
as easily achieved using a small TTL. These TTL-expired
ICMP packets are sent to the legitimate server, which may
unintentionally terminate the connection on the server side
in extremely unlucky situations. Speciﬁcally,
the ICMP
packet embeds the original TCP header which includes the
sequence number. The connection will be terminated only if
the sequence number happen to exactly match the one used
in the SYN-ACK packet. If that happens, then all client’s
packets in the future will trigger the legitimate server to
respond with RST packets and stop the attack. However,
having an exact match of the server’s SYN-ACK sequence
number is highly unlikely.
At time 7, the sequence number inference is started.
However, since the window was shifted to 0 in the sequence
number space. Now it is necessary to shift it again in order
353
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
to allow the attacker’s sequence number inference packets
to pass through the window-shifting ﬁrewall. To do so, we
can piggyback the sequence number inference packets along