title:SafeCard: A Gigabit IPS on the Network Card
author:Willem de Bruijn and
Asia Slowinska and
Kees van Reeuwijk and
Tom&apos;as Hrub&apos;y and
Li Xu and
Herbert Bos
SafeCard: A Gigabit IPS on the Network Card
Willem de Bruijn1, Asia Slowinska1, Kees van Reeuwijk1, Tomas Hruby1,
Li Xu2, and Herbert Bos1
1 Vrije Universiteit Amsterdam
2 Universiteit van Amsterdam
Abstract. Current intrusion detection systems have a narrow scope.
They target ﬂow aggregates, reconstructed TCP streams,
individual
packets or application-level data ﬁelds, but no existing solution is ca-
pable of handling all of the above. Moreover, most systems that per-
form payload inspection on entire TCP streams are unable to handle
gigabit link rates. We argue that network-based intrusion detection sys-
tems should consider all levels of abstraction in communication (packets,
streams, layer-7 data units, and aggregates) if they are to handle giga-
bit link rates in the face of complex application-level attacks such as
those that use evasion techniques or polymorphism. For this purpose,
we developed a framework for network-based intrusion prevention at the
network edge that is able to cope with all levels of abstraction and can
be easily extended with new techniques. We validate our approach by
making available a practical system, SafeCard, capable of reconstructing
and scanning TCP streams at gigabit rates while preventing polymorphic
buﬀer-overﬂow attacks, using (up to) layer-7 checks. Such performance
makes it applicable in-line as an intrusion prevention system. SafeCard
merges multiple solutions, some new and some known. We made speciﬁc
contributions in the implementation of deep-packet inspection at high
speeds and in detecting and ﬁltering polymorphic buﬀer overﬂows.
1 Introduction
Network intruders are increasingly capable of circumventing traditional Intru-
sion Detection Systems (IDS). Evasion and insertion techniques blind the IDS
by spooﬁng the datastream, while polymorphism cloaks malicious code to slip
past the ﬁlter engine [1,2]. Besides hiding the attack, however, attackers employ
another weapon to thwart network defence systems: raw speed [3]. Less sophis-
ticated attacks travelling over Gigabit links may be as diﬃcult to stop as more
complex attacks spreading more slowly. This leads to an interesting dilemma.
On the one hand, systems that handle evasion and polymorphism are either too
slow for in-line deployment (and are often host-based) or not suﬃciently accu-
rate (e.g. [4]). On the other hand, fast in-line solutions are not able to detect and
stop sophisticated attacks (e.g., [5]). Our goal is to build a network card that
can be deployed in the datastream as an Intrusion Prevention System (IPS) at
the edge of the network and that handles many forms of attack at Gigabit rates.
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 311–330, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
312
W. de Bruijn et al.
Like [6], we advocate distributed ﬁrewalls. Brieﬂy, centralised ﬁrewalls do not
protect against attacks from inside an organisation, and are less able to analyse
in detail complete TCP streams at link rate and to exploit knowledge about
speciﬁc conﬁgurations of end-hosts. Host-based solutions are problematic also,
because they depend on correct conﬁguration of users’ PCs, which has proved
elusive in the past.
As a result, we prefer network administrators to have full control and security
measures to be physically removed from users. A network device (such as a
switch, or a router) close to the users’ machines is the sweet spot for positioning
the IPS system. The ﬁrewall could even reside in the network card of an end-
host [7]. However, physically removing safety measures from the user’s machine
has the advantage that they cannot be tampered with, which from a security
viewpoint may be preferred by administrators.
Unlike much existing work on distributed ﬁrewalls, the focus of our work is on
enforcing security policies on all levels of the protocol stack, rather than spec-
iﬁcation of policies, distribution of rules, etc., for which we intend to build on
existing solutions like [6]. SafeCard provides a single IPS solution that consid-
ers many levels of abstraction in communication: packets, streams, higher-level
protocol units, and aggregates (e.g., ﬂow statistics). We selected state-of-the-art
methods for the most challenging abstractions (streams and application data
units) and demonstrate for the ﬁrst time the feasibility of a full IPS on a net-
work card containing advanced detection methods for all levels of abstraction
in digital communication. To support in-depth analysis in higher-level protocol
layers and still achieve performance at Gigabit rates, we target specialised hard-
ware as might be found in common router line cards. In particular, we aim for
a truly low-level implementation on network processors. For the same reason as
in [7] we evaluated the system on a slightly outdated processor to make it price
competitive1.
Besides combining many levels of abstraction in our IPS, we also make contri-
butions to individual components. In particular, we developed a high-performance
pattern matching language, Ruler, that oﬀers functionality similar to that of Snort
but is amenable to implementation on low-level hardware. In addition, we de-
veloped a protocol-speciﬁc detector, Prospector. Finally, we developed fast, zero-
copy TCP reassembly that proves crucial for performance.
We oﬀer a full network IPS implemented as a pipeline on a single network
card. Each stage in the pipeline drops traﬃc that it perceives as malicious. Thus,
the compound system works as a sieve, applying orthogonal detection vectors
to maximise detection rate. In stage 1, we ﬁlter packets based on header ﬁelds
(e.g., protocol, ports). Stage 2 is responsible for reconstructing and sanitising
TCP streams. In stage 3, we match the streams against Snort-like patterns us-
ing Ruler. Unmatched traﬃc is inspected further in stage 4 by Prospector, an
innovative protocol-speciﬁc detection method capable of stopping polymorphic
buﬀer overﬂow attacks. This method is superior to pattern-matching for the de-
tection of exploits in known protocols. Against other types of malicious traﬃc,
1 In terms of manufacturing costs, not necessarily in current retail prices.
SafeCard: A Gigabit IPS on the Network Card
313
such as trojans, it is ineﬀective, however. The two methods therefore complement
each other: an indication of the strength of our sieve-based approach. Stage 5
further expands this idea by taking into account behavioural aspects of traﬃc.
It generates alerts when it encounters anomalies in ﬂow aggregates (e.g., un-
usual amounts of traﬃc) and subsequently drops the streams. Stage 6, at last,
transmits the traﬃc if it is considered clean.
The conservative prevention strategy that we adopted may also drop benign
traﬃc due to false positives. We take the position that occasional dropped con-
nections outweigh the cost of even a single intrusion. That said, we have taken
care to minimise false positives in the individual ﬁltering steps.
The remainder of this paper is structured as follows: we begin with examining
the shortcomings of existing IDSs in Section 2, after which we discuss our novel
features individually in Section 3. The implementation of the complete system is
described in Section 4 and subsequently put to the test in Section 5. We discuss
limitations of our system in Section 6. Conclusions are drawn in Section 7.
2 Related Work
In this paper we address the issue of deploying a practical IPS capable of scan-
ning traﬃc at line rate. For some of our previous work on signature generation
we refer to [8]. Current solutions for stopping intrusions often focus on two layers
of defence, namely (network) intrusion detection and host-based intrusion pre-
vention (exempliﬁed by such approaches as Snort [9] and [10, 11, 12, 13], respec-
tively). We argue that both of them are lacking and propose a third approach:
application-aware network intrusion prevention.
Most network IDSs (nIDS) search for malicious code in network packets, but,
apart from simple ﬁrewalls, they are often not suitable as in-line IPS and prove
vulnerable to insertion and evasion. Even though some systems, like Snort, have
the required functionality for in-line deployment, this is hardly ever used on fast
links since both TCP stream reassembly and pattern matching are prohibitively
expensive. In previous work, CardGuard [7], we achieved 100s Mbit Ethernet
performance when scanning payloads for simple strings after TCP reassembly
on an IXP1200 network processor. Others, like EarlyBird [5] were speciﬁcally de-
signed to allow in-line deployment on high-speed links as IDS solutions, but still
do not lend themselves for prevention, because of the high ratio of false positives.
Work at Georgia Tech uses IXP1200s for TCP stream reconstruction in an
IDS for an individual host [14], using both an IXP1200 and a completely separate
FPGA board. Like [7], it limits itself to simple signature matching and achieves
similar performance. Like SafeCard these systems do not exhibit the ‘fail-open’
ﬂaw [1], because the IDS/IPS is the forwarding engine.
The inadequacy of pattern matching techniques as applied by Snort was also
demonstrated by the recent WMF exploit, for which the pattern was so costly
to inspect that IDS administrators were initially forced to let it pass or setup a
completely separate conﬁguration2. While later attempts yielded fairly reliable
2 Source: http://isc.sans.org/diary.php?storyid=992
314
W. de Bruijn et al.
(although not 100% accurate) signatures that could be handled by Snort, the
issue is symptomatic of a ﬂaw in Snort-like approaches for certain attacks. In
essence, they are too costly when they must handle huge or complex signatures
that can be applied to any traﬃc stream. As a result, nIDSs often limit them-
selves to per-packet processing, which renders them useless for detecting appli-
cation level (layer 7) attacks. Note that we do not dismiss Snort-like pattern
matching out of hand. It can be used for all sorts of malware (spyware, trojans)
that do not use protocol exploits to enter the system. Also, many Snort-like rules
exist and we can use these rules to ﬁlter out a plethora of known attacks. This
saves us from having to develop and check protocol-speciﬁc signatures for each
of these attacks. As a result, a snort-like pattern matcher is one of the pillars
that underlie the SafeCard architecture.
Pattern matching engines are also weak in the face of polymorphism. In re-
sponse, detection techniques were developed that look at aggregate information,
e.g., triggering alerts when an unusual number of outgoing connections to unique
IP addresses is detected [15] or looking at anomalies in webtraﬃc [16]. Doing
so probably incurs too many false positives to be used for IPS by itself. On the
other hand, it may detect suspect behaviour that would otherwise go unnoticed.
Host-based intrusion prevention blocks attacks based on local information.
Many diﬀerent measures fall in this category, including address space and in-
struction set randomisation (ASR and ISR [11,12]), non-executable memory [10,
17,18], systrace [19], language approaches [20,21], anti-virus software, host ﬁre-
walls, and many others. Note that simple measures (like non-executable memory)
are easy to circumvent [22,23] and may break normal code (e.g., Linux depends
on executable stacks for trampolines and signals). An advantage of host-based
protection is that knowledge about the conﬁguration can be exploited. We need
to install speciﬁc ﬁlters only for the software running on the host which in turn
makes signature generation easier. Also, all traﬃc that is classiﬁed as harmful
to the local conﬁguration can be safely dropped without worrying about hurt-
ing related applications (e.g., a request that hurts IIS, but not Apache can be
dropped on the edge if we use IIS).
Most ﬁrewalls are restricted in their cycle budget and limit themselves to
ﬂow-based detection (e.g., port-ﬁltering). This is a crude measure at best that
fails to detect many types of malicious data, such as malformed requests sent to
a vulnerable webserver, or all sorts of services deliberately implemented on top
of port 80 to bypass ﬁrewall rules. Like nIDS, most anti-virus software is good
at scanning for known patterns, but often less so at recognising polymorphic
attacks.
Host-based ﬁlters may check protocol ﬁelds up to layer 7. Recent work has
explored the use of protocol-speciﬁc approaches in detection of buﬀer overﬂow at-
tacks [24]. In this approach the address that causes an alert is traced to a speciﬁc
protocol ﬁeld by the signature generator which then determines the maximum
size M for the protocol ﬁeld. We believe this is a promising approach and we
show how we improved the method to be more accurate. Other approaches look
SafeCard: A Gigabit IPS on the Network Card
315
at executable code in traﬃc [25]. We did not opt for this method because it
seems less reliable if ﬁelds are encoded (e.g., URL encoding).
Perhaps the greatest challenge in host-based protection is the need for user
cooperation. If users are slow to update, unwilling to pay for anti-virus software,
or if they disable ﬁrewalls, host-based protection breaks down. The past has
shown that security policies that hinge on proactive users who secure and update
their systems in a timely fashion are problematic.
In summary, the problems we face are twofold: existing solutions both do not
handle many attacks and are already too slow to be able to scale to Gigabit rates.
To deal with both issues and move from weak intrusion detection to stronger
intrusion prevention we present SafeCard, a practical ﬁlter engine that (1) is
fast enough to be placed in-line as an Intrusion Prevention System (IPS), (2)
can handle polymorphism through smarter matching, (3) oﬀers (up to) layer-
7 detection of intrusions through stream reconstruction and application-level
signatures and (4) coalesces the ﬂow-based and payload-based approaches to
increase each other’s eﬀectiveness. When connected to Argos [8], a signature
generating honeypot, it can even stop (some) zero-day exploits.
Kerschbaum [26] uses in-kernel sensors to place an IDS in the datapath. An
important diﬀerence with SafeCard is that sensors require a reconﬁguration of
kernel code and are therefore more OS-speciﬁc. Paxson’s Bro [27] is another
well-known IDS. Bro focuses on event handling and policy implementation. It
relies on other libraries (e.g., libpcap) for its datapath and thus suﬀers from
their performance problems.
3 Architecture
SafeCard must process at network, transport, and application protocol levels,
as well as handle aggregates. For this reason we designed it as a compound,
pipelined IPS built from independent functions elements (FEs). Each FE takes
as input a stream of data and generates as output a stream of classiﬁcation
results. As side-eﬀect it may also generate derived data streams. For example,
an IP-header ﬁlter takes as input a stream of IP packets, and generates a binary
output stream of per-packet pass or drop instructions. More complex is the TCP
translation FE, which takes as input a stream of TCP segments and generates
a set of continuous streams of application data, while using the classiﬁcation
result for signalling to which stream data belongs.
The FEs are interconnected in a directed acyclic graph (DAG), such that an
FEs classiﬁcation results plus one or more data streams serve as input to an-
other. Each FE can have multiple such IO ports. The architecture that is used
to place, connect, instantiate and run FEs is known as Streamline, a complete
overhaul of its predecessor, the fairly fast packet ﬁlter (FFPF [28]). Stream-
line extends FFPF in many ways, for instance by adding stream reassembly,
distributed processing, packet mangling and forwarding.
Before continuing with implementational details we discuss the FEs that form
the stages in the pipeline. SafeCard combines 4 stages of defence: header-based
316
W. de Bruijn et al.
Fig. 1. Functional architecture of the intrusion prevention system
ﬁltering, payload inspection, ﬂow-based statistical processing and application
level protocol reconstruction. Supporting these methods are 3 additional stages:
packet receive, packet transmit, and TCP stream reassembly. The full 7-stage
pipeline is shown in Figure 1. FEs forward traﬃc from left to right, but each FE
can drop what it perceives as malicious data. Only safe traﬃc reaches the last
stage, where it is transmitted to its destination. The Prospector stage can only
be applied to a a limited set of protocols (currently only HTTP) and is therefore
bypassed by other traﬃc.
The ﬁrst practical stage, header-based ﬁltering, is implemented using FPL-
3 [29]. Its functionality is run-of-the-mill and roughly equivalent to pcap. We
will not discuss it further. The other FEs are explained in the order in which
they are encountered by incoming packets.
3.1 Zero-Copy TCP Stream Reassembly
Recreating a continuous stream of data from packets is expensive because in the
common case it incurs a copy of the full payload. TCP is especially diﬃcult to
reconstruct, as it allows data to overlap and has many variants. These features
have been frequently misused to evade IDSs. We have developed a version of
TCP reassembly that is both eﬃcient and secure. We reassemble in-place, i.e. in
zero-copy fashion, and take a conservative view of traﬃc by dropping overlapping
data.
In terms of performance, we win by reducing memory-access costs. In the
common case, when packets do not overlap and arrive in-order, our method
removes the cost of copying payload completely. Instead, we incur a cost for
bookkeeping of the start and length of each TCP segment. Due to the (growing)
inequality between memory and CPU speed this cost is substantially smaller.
Our TCP reassembly design is based on the insight that consumers of TCP
streams do not need access to the streams continuously. They only need to receive
blocks in consecutive order. Applications generally use the Socket read(..) call
for this. We have slightly modiﬁed this call to return a pointer to a block, whereas
it normally receives one from the caller. We exploit this change to implement
zero-copy transfer as follows. First, we never supply more data than ﬁts in a single
TCP segment. read(..) is allowed to return a smaller block than was requested.
Second, instead of allocating a transfer buﬀer and copying data into it we return
a pointer directly into the original segment. The transport architecture used
to support this is not standard. Packets are stored in one large circular packet
buﬀer. TCP streams have private circular pointer buﬀers, which store references
SafeCard: A Gigabit IPS on the Network Card
317
to the start and end of TCP segments. References are valid only as long as the
pointed-to elements in the shared packet buﬀer exist.
Our method is not just fast, but also secure, because it drops potentially harm-
ful TCP streams. IPSs are inherently more capable in dealing with malformed
TCP options than IDSs: because they work in-line they can operate as a proxy,
reassembling a stream of data as they see ﬁt, checking it, and then re-encoding
the cleansed data in a new TCP stream. Full re-encoding scrubs [30, 2] payload
from abused transport protocol features and thus protects the hosts, but is very
expensive, and incurs multiple checksum computations. The cheap alternative
that we use, dropping malicious streams, will equally deal with malformed pay-