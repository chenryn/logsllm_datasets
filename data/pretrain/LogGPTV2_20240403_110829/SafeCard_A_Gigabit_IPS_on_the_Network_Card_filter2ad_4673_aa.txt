# SafeCard: A Gigabit Intrusion Prevention System on the Network Card

**Authors:**
- Willem de Bruijn
- Asia Slowinska
- Kees van Reeuwijk
- Tomáš Hrubý
- Li Xu
- Herbert Bos

**Affiliations:**
- 1 Vrije Universiteit Amsterdam
- 2 Universiteit van Amsterdam

## Abstract
Current intrusion detection systems (IDSs) typically focus on specific aspects of network traffic, such as flow aggregates, reconstructed TCP streams, individual packets, or application-level data fields. However, no existing solution can handle all these levels simultaneously. Additionally, most systems that perform payload inspection on entire TCP streams are unable to process gigabit link rates. We argue that network-based intrusion detection and prevention systems should consider all levels of communication abstraction (packets, streams, layer-7 data units, and aggregates) to effectively handle gigabit link rates and complex application-level attacks, including those using evasion techniques or polymorphism.

To address this, we developed SafeCard, a framework for network-based intrusion prevention at the network edge. SafeCard is capable of handling all levels of abstraction and can be extended with new techniques. We validate our approach by presenting a practical system, SafeCard, which can reconstruct and scan TCP streams at gigabit rates while preventing polymorphic buffer-overflow attacks using up to layer-7 checks. This performance makes it suitable for in-line deployment as an intrusion prevention system (IPS). SafeCard integrates multiple solutions, both new and known, with specific contributions in high-speed deep-packet inspection and the detection and filtering of polymorphic buffer overflows.

## 1. Introduction
Network intruders are increasingly adept at circumventing traditional Intrusion Detection Systems (IDSs). Techniques such as evasion, insertion, and polymorphism can blind IDSs by spoofing data streams or cloaking malicious code. In addition to these sophisticated methods, attackers also leverage raw speed, making even less sophisticated attacks difficult to stop when they travel over gigabit links.

This leads to a significant challenge: systems that can handle evasion and polymorphism are often too slow for in-line deployment or not sufficiently accurate. Conversely, fast in-line solutions are often unable to detect and stop sophisticated attacks. Our goal is to develop a network card that can be deployed in the data stream as an Intrusion Prevention System (IPS) at the network edge, capable of handling various forms of attacks at gigabit rates.

Like other researchers, we advocate for distributed firewalls. Centralized firewalls do not protect against internal attacks and are limited in their ability to analyze complete TCP streams at link rate. Host-based solutions are problematic due to their dependence on correct user configuration, which has historically been unreliable.

Therefore, we prefer network administrators to have full control and security measures to be physically separated from users. A network device, such as a switch or router, close to the users' machines is ideal for positioning the IPS. The firewall could even reside on the network card of an end-host. Physically removing safety measures from the user's machine ensures they cannot be tampered with, enhancing security.

Unlike much existing work on distributed firewalls, our focus is on enforcing security policies across all levels of the protocol stack. SafeCard provides a single IPS solution that considers multiple levels of communication abstraction: packets, streams, higher-level protocol units, and aggregates. We selected state-of-the-art methods for the most challenging abstractions and demonstrate the feasibility of a full IPS on a network card with advanced detection methods for all levels of digital communication. To achieve this, we target specialized hardware, such as that found in common router line cards, and aim for a low-level implementation on network processors.

## 2. Related Work
In this paper, we address the issue of deploying a practical IPS capable of scanning traffic at line rate. Current solutions for stopping intrusions often focus on two layers of defense: network intrusion detection and host-based intrusion prevention. We argue that both are inadequate and propose a third approach: application-aware network intrusion prevention.

Most network IDSs (nIDSs) search for malicious code in network packets but are often unsuitable for in-line IPS and vulnerable to insertion and evasion. Even though some systems, like Snort, have the required functionality for in-line deployment, they are rarely used on fast links due to the high cost of TCP stream reassembly and pattern matching. In previous work, CardGuard achieved 100 Mbit Ethernet performance when scanning payloads for simple strings after TCP reassembly on an IXP1200 network processor. Other systems, like EarlyBird, were designed for in-line deployment on high-speed links but still suffer from high false positive rates.

Recent work at Georgia Tech uses IXP1200s for TCP stream reconstruction in an IDS for an individual host, achieving similar performance. Like SafeCard, these systems do not exhibit the 'fail-open' flaw because the IDS/IPS is the forwarding engine. The inadequacy of pattern matching techniques, as demonstrated by the recent WMF exploit, highlights the need for more efficient and accurate methods.

Host-based intrusion prevention blocks attacks based on local information, including address space and instruction set randomization, non-executable memory, systrace, language approaches, anti-virus software, and host firewalls. However, simple measures are easy to circumvent and may break normal code. An advantage of host-based protection is that knowledge about the configuration can be exploited, but it relies on user cooperation, which is often problematic.

In summary, existing solutions do not handle many attacks and are too slow to scale to gigabit rates. To address these issues and move from weak intrusion detection to stronger intrusion prevention, we present SafeCard, a practical filter engine that:
1. Is fast enough to be placed in-line as an IPS.
2. Can handle polymorphism through smarter matching.
3. Offers up to layer-7 detection of intrusions through stream reconstruction and application-level signatures.
4. Combines flow-based and payload-based approaches to increase effectiveness.

When connected to Argos, a signature-generating honeypot, SafeCard can even stop some zero-day exploits.

## 3. Architecture
SafeCard must process at network, transport, and application protocol levels, as well as handle aggregates. For this reason, we designed it as a compound, pipelined IPS built from independent functional elements (FEs). Each FE takes a stream of data as input and generates a stream of classification results. As a side effect, it may also generate derived data streams. For example, an IP-header filter takes a stream of IP packets and generates a binary output stream of per-packet pass or drop instructions. More complex is the TCP translation FE, which takes a stream of TCP segments and generates continuous streams of application data, using the classification result to signal to which stream the data belongs.

The FEs are interconnected in a directed acyclic graph (DAG), where an FE's classification results and one or more data streams serve as input to another. Each FE can have multiple I/O ports. The architecture used to place, connect, instantiate, and run FEs is known as Streamline, an overhaul of its predecessor, the Fairly Fast Packet Filter (FFPF). Streamline extends FFPF by adding stream reassembly, distributed processing, packet mangling, and forwarding.

Before discussing implementational details, we outline the FEs that form the stages in the pipeline. SafeCard combines four stages of defense: header-based filtering, payload inspection, flow-based statistical processing, and application-level protocol reconstruction. Supporting these methods are three additional stages: packet receive, packet transmit, and TCP stream reassembly. The full seven-stage pipeline is shown in Figure 1. FEs forward traffic from left to right, but each FE can drop what it perceives as malicious data. Only safe traffic reaches the last stage, where it is transmitted to its destination. The Prospector stage can only be applied to a limited set of protocols (currently only HTTP) and is bypassed by other traffic.

### 3.1 Zero-Copy TCP Stream Reassembly
Recreating a continuous stream of data from packets is expensive because it typically involves copying the full payload. TCP is especially challenging to reconstruct due to its allowance for overlapping data and many variants, which have been frequently misused to evade IDSs. We developed a version of TCP reassembly that is both efficient and secure. Our method reassembles in-place, i.e., in zero-copy fashion, and takes a conservative view of traffic by dropping overlapping data.

In terms of performance, we reduce memory-access costs. When packets do not overlap and arrive in order, our method eliminates the need for payload copying, instead incurring a cost for bookkeeping the start and length of each TCP segment. Due to the growing inequality between memory and CPU speed, this cost is substantially smaller.

Our TCP reassembly design is based on the insight that consumers of TCP streams do not need continuous access. They only need to receive blocks in consecutive order. Applications generally use the `Socket read(..)` call for this. We modified this call to return a pointer to a block rather than receiving one from the caller. This change allows us to implement zero-copy transfer. First, we never supply more data than fits in a single TCP segment. `read(..)` is allowed to return a smaller block than requested. Second, instead of allocating a transfer buffer and copying data into it, we return a pointer directly into the original segment. The transport architecture used to support this is not standard. Packets are stored in a large circular packet buffer, and TCP streams have private circular pointer buffers that store references to the start and end of TCP segments. References are valid only as long as the pointed-to elements in the shared packet buffer exist.

Our method is not only fast but also secure, as it drops potentially harmful TCP streams. IPSs are inherently more capable of dealing with malformed TCP options than IDSs because they can operate as a proxy, reassembling and checking the stream, and then re-encoding the cleansed data in a new TCP stream. Full re-encoding scrubs payload from abused transport protocol features, protecting hosts, but is very expensive and incurs multiple checksum computations. The cheaper alternative we use, dropping malicious streams, effectively deals with malformed payloads.