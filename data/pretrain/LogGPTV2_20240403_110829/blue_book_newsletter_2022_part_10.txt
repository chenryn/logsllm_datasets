    allocate the local port and thus relieve you from having to manage local port
    conflicts, with the slightly simpler syntax:
    ```bash
    $: kubectl port-forward deployment/mongo :27017
    Forwarding from 127.0.0.1:63753 -> 27017
    Forwarding from [::1]:63753 -> 27017
    ```
* New: [Run a command against a specific context.](kubectl.md#run-a-command-against-a-specific-context)
    If you have multiple contexts and you want to be able to run commands against
    a context that you have access to but is not your active context you can use the
    `--context` global option for all `kubectl` commands:
    ```bash
    kubectl get pods --context 
    ```
    To get a list of available contexts use `kubectl config get-contexts`
### [EKS](eks.md)
* New: [Pod limit per node.](eks.md#pod-limit-per-node)
    AWS EKS supports native VPC networking with the Amazon VPC Container Network
    Interface (CNI) plugin for Kubernetes. Using this plugin allows Kubernetes Pods
    to have the same IP address inside the pod as they do on the VPC network.
    This is a great feature but it introduces a limitation in the number of Pods per
    EC2 Node instance. Whenever you deploy a Pod in the EKS worker Node, EKS creates
    a new IP address from VPC subnet and attach to the instance.
    The formula for defining the maximum number of pods per instance is as follows:
    ```
    N * (M-1) + 2
    ```
    Where:
    * `N` is the number of Elastic Network Interfaces (ENI) of the instance type.
    * `M` is the number of IP addresses of a single ENI.
    So, for `t3.small`, this calculation is `3 * (4-1) + 2 = 11`. For a list of all
    the instance types and their limits see [this document](https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt)
### [Debugging](kubernetes_debugging.md)
* New: How to debug kubernetes network traffic.
    Sometimes you need to monitor the network traffic that goes between pods to
    solve an issue. There are different ways to see it:
    * [Using Mizu](mizu.md)
    * [Running tcpdump against a running container](kubernetes_debugging.md#running-tcpdump-against-a-running-container)
    * [Using ksniff](ksniff.md)
    * [Using ephemeral debug containers](kubernetes_debugging.md#using-ephemeral-debug-containers)
    Of all the solutions, the cleaner and easier is to use [Mizu](mizu.md)
### [WAF](aws_waf.md)
* New: How to extract information from AWS WAF.
    [AWS WAF](https://aws.amazon.com/waf/) is a web application firewall that helps
    protect your web applications or APIs against common web exploits and bots that
    may affect availability, compromise security, or consume excessive resources.
    AWS WAF gives you control over how traffic reaches your applications by enabling
    you to create security rules that control bot traffic and block common attack
    patterns, such as SQL injection or cross-site scripting. You can also customize
    rules that filter out specific traffic patterns.
    In the article there are many queries you can do on it's data and
    a workflow to understand your traffic.
## [Continuous Integration](mdformat.md)
* New: Introduce MDFormat.
    [MDFormat](https://mdformat.readthedocs.io/en/stable/) is an opinionated
    Markdown formatter that can be used to enforce a consistent style in Markdown
    files. Mdformat is a Unix-style command-line tool as well as a Python library.
    The features/opinions of the formatter include:
    * Consistent indentation and whitespace across the board
    * Always use ATX style headings
    * Move all link references to the bottom of the document (sorted by label)
    * Reformat indented code blocks as fenced code blocks
    * Use 1. as the ordered list marker if possible, also for noninitial list items.
    It's based on the
    [`markdown-it-py`](https://markdown-it-py.readthedocs.io/en/latest/index.html)
    Markdown parser, which is a Python implementation of
    [`markdown-it`](https://github.com/markdown-it/markdown-it).
* New: [Issues.](mdformat.md#issues)
    - It doesn't yet
      [support admonitions](https://github.com/executablebooks/mdformat/issues/309)
    - You can't
      [ignore some files](https://github.com/executablebooks/mdformat/issues/359),
      nor
      [some part of the file](https://github.com/executablebooks/mdformat/issues/53)
### [Drone](flakeheaven.md)
* New: Deprecate flakehell in favour of flakeheaven.
    It's a fork maintained by the community, instead of an absent code
    dictator.
* New: Introduce Flakeheaven.
    [Flakeheaven](https://github.com/flakeheaven/flakeheaven) is a [Flake8](flake8.md) wrapper
    to make it cool. The community maintained fork of
    flakehell.
* New: Introduce Drone.
    [Drone](https://www.drone.io/) is a modern Continuous Integration platform that
    empowers busy teams to automate their build, test and release workflows using
    a powerful, cloud native pipeline engine.
    Check how to install it [here](drone.md#installation)
## Automating Processes
### [cruft](cruft.md)
* New: [Unable to interpret changes between current project and cookiecutter template as unicode.](cruft.md#issues)
    Typically a result of hidden binary files in project folder. Maybe you have
    a hook that initializes the `.git` directory, don't do that.
* New: Use `skip` to avoid problems with `.git`.
    Since `2.10.0` you can add a `skip` category inside the `.cruft.json`, so that it doesn't check that
    directory:
    ```json
    {
      "template": "xxx",
      "commit": "xxx",
      "checkout": null,
      "context": {
        "cookiecutter": {
           ...
        }
      },
      "directory": null,
      "skip": [
        ".git"
      ]
    }
    ```
### [renovate](renovate.md)
* New: Introduce Renovate.
    [Renovate](https://docs.renovatebot.com/) is a program that does automated
    dependency updates. Multi-platform and multi-language.
    Why use Renovate?
    * Get pull requests to update your dependencies and lock files.
    * Reduce noise by scheduling when Renovate creates PRs.
    * Renovate finds relevant package files automatically, including in monorepos.
    * You can customize the bot's behavior with configuration files.
    * Share your configuration with ESLint-like config presets.
    * Get replacement PRs to migrate from a deprecated dependency to the community
        suggested replacement (npm packages only).
    * Open source.
    * Popular (more than 9.7k stars and 1.3k forks)
    * Beautifully integrate with main Git web applications (Gitea, Gitlab, Github).
    * It supports most important languages: Python, Docker, Kubernetes, Terraform,
        Ansible, Node, ...
## [Storage](storage.md)
* New: Introduce storage.
    I have a server at home to host some services for my closest ones. The server is
    an [Intel NUC](https://www.intel.com/content/www/us/en/products/details/nuc.html) which is
    super awesome in terms of electric consumption, CPU and RAM versus cost. The
    downside is that it has no hard drive to store the services data. It does have
    some USB ports to connect external hard drives though. As the data kept growing
    I started buying bigger drives. While it was affordable I purchased two so as to
    have one to store the backup of the data. The problem came when it became
    unaffordable for me. Then I took the *good idea* to assume that I could only have one
    drive of 16TB with my data. Obviously the inevitable happened. The hard drive
    died and those 10TB of data that were not stored in any backup were lost.
    Luckily enough, it was not unique data like personal photos. The data could
    be regenerated by manual processes at the cost of precious time (I'm still
    suffering this `:(`). But every cloud has a silver lining, this failure gave me
    the energy and motivation to improve my home architecture. To prevent this from
    happening again, the solution needs to be:
    * Robust: If disks die I will have time to replace them before data is lost.
    * Flexible: It needs to expand as the data grows.
    * Not very expensive.
    * Easy to maintain.
    There are two types of solutions to store data:
    * On one host: All disks are attached to a server and the storage capacity is
        shared to other devices by the local network.
    * Distributed: The disks are attached to many servers and they work together to
        provide the storage through the local network.
    A [NAS](nas.md) server represents the first solution, while systems like [Ceph](https://ceph.io/en/) or [GlusterFS](https://www.gluster.org/) over [Odroid HC4](https://www.odroid.co.uk/ODROID-HC4) fall into the second.
    Both are robust and flexible but I'm more inclined towards building
    a [NAS](nas.md) because it can hold the amount of data that I need, it's easier
    to maintain and the underlying technology has been more battle proven throughout
    the years.
### [NAS](nas.md)
* New: Introduce NAS.
    [Network-attached storage](https://en.wikipedia.org/wiki/Network-attached_storage) or NAS, is a computer data storage server connected to a computer network providing data access to many other devices. Basically a computer where you can attach many hard drives.
    I've done an analysis to choose what solution I'm going to build in
    terms of:
    * Software: Whether to use [TrueNAS](nas.md#truenas),
      [Unraid](nas.md#unraid) or [Debian with ZFS](nas.md#debian-with-zfs).
    * [Disks](nas.md#disks)
    More will come in the next days.
* New: [Analyze RAM to buy.](nas.md#ram)
    Most [ZFS](zfs.md) resources suggest using ECC RAM. The provider gives me two
    options:
    * Kingston Server Premier DDR4 3200MHz 16GB CL22
    * Kingston Server Premier DDR4 2666MHz 16GB CL19
    I'll go with two modules of 3200MHz CL22 because it has a smaller [RAM
    latency](ram.md#speed).
* New: [Analyze motherboard to buy.](nas.md#motherboard)
    After reading these reviews([1](https://reviewsgarage.com/best-motherboards-for-nas/), [2](https://pcper.com/2020/03/asrock-x570m-pro4-micro-atx-motherboard-review/)) I've come to the decision to purchase the [ASRock X570M Pro4](https://www.asrock.com/MB/AMD/X570M%20Pro4/index.asp) because, It
    supports:
    * 8 x SATA3 disks
    * 2 x M.2 disks
    * 4 x DDR4 RAM slots with speeds up to 4200+ and ECC support
    * 1 x AMD AM4 Socket Ryzen™ 2000, 3000, 4000 G-Series, 5000 and 5000 G-Series
        Desktop Processors
    * Supports NVMe SSD as boot disks
    * Micro ATX Form Factor.
    And it gives me room enough to grow:
    * It supports PCI 4.0 for the M.2 which is said to be capable of perform twice
        the speed compared to previous 3rd generation. the chosen M2 are of 3rd
        generation, so if I need more speed I can change them.
    * I'm only going to use 2 slots of RAM giving me 32GB, but I could grow 32 more
        easily.
* New: [Analyze CPU to buy.](nas.md#cpu)
    After doing some [basic research](cpu.md) I'm between:
    | Property        | Ryzen 7 5800x | Ryzen 5 5600x  | Ryzen 7 5700x | Ryzen 5 5600G  |
    | ---             | ---           | ---            | ---           | ---            |
    | Cores           | 8             | 6              | 8             | 6              |
    | Threads         | 16            | 12             | 16            | 12             |
    | Clock           | 3.8           | 3.7            | 3.4           | 3.9            |
    | Socket          | AM4           | AM4            | AM4           | AM4            |
    | PCI             | 4.0           | 4.0            | 4.0           | 3.0            |
    | Thermal         | Not included  | Wraith Stealth | Not included  | Wraith Stealth |
    | Default TDP     | 105W          | 65W            | 65W           | 65W            |
    | System Mem spec | >= 3200 MHz   | >= 3200 MHz    | >= 3200 MHz   | >= 3200 MHz    |
    | Mem type        | DDR4          | DDR4           | DDR4          | DDR4           |
    | Price           | 315           | 232            | 279           | 179            |
    The data was extracted from [AMD's official page](https://www.amd.com/en/products/specifications/compare/processors/10466,11826,10471,11176).
    They all support the chosen RAM and the motherboard.
    I'm ruling out Ryzen 7 5800x because it's too expensive both on monetary and
    power consumption terms. Also ruling out Ryzen 5 5600G because it has
    comparatively bad properties.
    Between Ryzen 5 5600x and Ryzen 7 5700x, after checking these comparisons
    ([1](https://nanoreview.net/en/cpu-compare/amd-ryzen-7-5700x-vs-amd-ryzen-5-5600x),
    [2](https://www.amd.com/en/products/specifications/compare/processors/10466,11826,10471,11176))
    it looks like:
    * Single core performance is similar.
    * 7 wins when all cores are involved.
    * 7 is more power efficient.
    * 7 is better rated.
    * 7 is newer (1.5 years).
    * 7 has around 3.52 GB/s (7%) higher theoretical RAM memory bandwidth
    * They have the same cache
    * 7 has 5 degrees less of max temperature
    * They both support ECC
    * 5 has a greater market share
    * 5 is 47$ cheaper
    I think that for 47$ it's work the increase on cores and theoretical RAM memory
    bandwidth.
* New: [Analyze CPU coolers to buy.](nas.md#cpu-cooler)
    It looks that the [Ryzen CPUs don't require a cooler to work well](cpu.md#quick-shopping-tips). Usually it adds another 250W to the consumption. I don't plan to overclock it and I've heard that ZFS doesn't use too much CPU, so I'll start without it and monitor the temperature.
    If I were to take one, I'd go with air cooling with something like the [Dark Rock 4](https://www.bequiet.com/en/cpucooler/1376) but I've also read that Noctua are a good provider.
* New: [Analyze server cases to buy.](nas.md#server-case)
    I'm ruling out the next ones:
    * [Fractal Design
        R6](https://www.fractal-design.com/products/cases/define/define-r6/blackout/):
        More expensive than the Node 804 and it doesn't have hot swappable disks.
    * Silverstone Technology SST-CS381: Even though it's gorgeous it's too
        expensive.
    * Silverstone DS380: It only supports Mini-ITX which I don't have.
    The remaining are:
    | Model             | Fractal Node 804         | Silverstone CS380   |
    | ---               | ---                      | ---                 |
    | Form factor       | Micro - ATX              | Mid tower           |
    | Motherboard       | Micro ATX                | Micro ATX           |
    | Drive bays        | 8 x 3.5", 2 x 2.5"       | 8 x 3.5", 2 x 5.25" |
    | Hot-swap          | No                       | yes                 |
    | Expansion Slots   | 5                        | 7                   |
    | CPU cooler height | 160mm                    | 146 mm              |
    | PSU compatibility | ATX                      | ATX                 |
    | Fans              | Front: 4, Top: 4, Rear 3 | Side: 2, Rear: 1    |
    | Price             | 115                      | 184                 |
    | Size              | 34 x 31 x 39 cm          | 35 x 28 x 21 cm     |
    I like the Fractal Node 804 better and it's cheaper.
* New: Choose the Power Supply Unit and CPU cooler.
    After doing some [basic research](cpu.md#cpu-coolers) I've chosen the [Dark Rock
    4](https://www.bequiet.com/en/cpucooler/1376) but just because the [Enermax
    ETS-T50 AXE Silent
    Edition](https://www.enermaxeu.com/products/cpu-cooling/air-cooling/ets-t50-axe/)
    doesn't fit my case :(.
    Using [PCPartPicker](https://pcpartpicker.com/list/) I've seen that with 4 disks
    it consumes approximately 264W, when I have the 8 disks, it will consume up to
    344W, if I want to increase the ram then it will reach 373W. So in theory I can go with a 400W power supply unit.
    You need to make sure that it has enough wires to connect to all the disks.
    Although that usually is not a problem as there are adapters:
    * [Molex to
        sata](https://www.amazon.com/CB-44SATA-Individually-Sleeved-Connector-Premium/dp/B0036ORCIA/ref=sr_1_13?ie=UTF8&qid=1409942557&sr=8-13&keywords=sleeved+molex+to+sata&tag=linus21-20)
    * [Sata to sata](https://www.amazon.com/dp/B0086OGN9E/ref=wl_it_dp_o_pd_nS_ttl?_encoding=UTF8&colid=2IW6VX45YF9B0&coliid=I1QUIF5VMSN2SG&psc=1&tag=linus21-20)
    After an [analysis on the different power supply units](psu.md), I've decided to
    go with [Be Quiet! Straight Power 11 450W Gold](https://www.bequiet.com/en/powersupply/1251)
### [OpenZFS](zfs.md)
* New: [Learning.](zfs.md#learning)
    I've found that learning about ZFS was an interesting, intense and time consuming task. If you want a quick overview check [this video](https://yewtu.be/watch?v=MsY-BafQgj4). If you prefer to read, head to the awesome [Aaron Toponce](https://pthree.org/2012/04/17/install-zfs-on-debian-gnulinux/) articles and read all of them sequentially, each is a jewel. The [docs](https://openzfs.github.io/openzfs-docs/) on the other hand are not that pleasant to read. For further information check [JRS articles](https://jrs-s.net/category/open-source/zfs/).
* New: [Storage planning.](zfs.md#storage-planning)
    There are many variables that affect the number and type of disks, you first
    need to have an idea of what kind of data you want to store and what use are you
    going to give to that data.
    * [Robustness](zfs.md#robustness)
    * [Preventing concurrent disk failures](zfs.md#preventing-concurrent-disk-failures)
* New: [Choosing the disks to hold data.](zfs.md#choosing-the-disks-to-hold-data)
    Analysis on how to choose the disks taking into account:
    * [Disk speed](zfs.md#data-disk-speed)
    * [Disk load](zfs.md#data-disk-load)
    * [Disk type](zfs.md#data-disk-type)
    * [Disk homogeneity](zfs.md#data-disk-homogeneity)
    * [Disk Warranty](zfs.md#data-disk-warranty)
    * [Disk Brands](zfs.md#data-disk-brand)
    The conclusions are that I'm more interested on the 5400 RPM drives, but of all the NAS disks available to
    purchase only the WD RED of 8TB use it, and they use the SMR technology, so they
    aren't a choice.
    The disk prices offered by my cheapest provider are:
    | Disk                 | Size | Price |
    | ---                  | ---  | ---   |
    | Seagate IronWolf     | 8TB  | 225$  |
    | Seagate IronWolf Pro | 8TB  | 254$  |