通过添加硬件辅助功能，加速 RFS 提升了接收流(RFS)的速度。与 RFS
一样，数据包根据使用数据包的应用程序的位置进行转发。
但是，与传统的 RFS 不同，数据包直接发送到使用数据的线程的本地 CPU：
::: itemizedlist
-   执行应用的 CPU
-   或者缓存层次结构中该 CPU 本地的 CPU
:::
只有满足以下条件时，加速的 RFS 才可用：
::: itemizedlist
-   NIC 必须支持加速的 RFS。导出 the
    `ndo_rx_flow_steer（） net_`{.literal} device``{=html}
    功能的卡支持加速 RFS。检查 NIC 的数据表，以确保是否支持此功能。
-   必须启用 `ntuple`{.literal}
    过滤。有关如何启用这些过滤器的详情，请参考 [启用 ntuple
    过滤器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance#enabling-the-ntuple-filters_configuring-an-operating-system-to-optimize-access-to-network-resources){.link}。
:::
满足这些条件后，根据传统的 RFS 配置自动停用 CPU
到队列映射。也就是说，CPU 到队列映射将根据驱动程序为每个接收队列配置的
IRQ 影响而降低。有关启用传统 RFS 的更多信息，请参阅
[启用接收流域](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance#enabling-receive-flow-steering_configuring-an-operating-system-to-optimize-access-to-network-resources){.link}。
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#enabling-the-ntuple-filters_configuring-an-operating-system-to-optimize-access-to-network-resources}启用 ntuple 过滤器 {.title}
:::
必须 `启用 Thentu`{.literal} ple 过滤。使用 `ethtool -k`{.literal}
命令启用 then `tuple 过滤器`{.literal}。
::: orderedlist
**流程**
1.  显示 casetu `ple 过滤器的当前状态`{.literal} ：
    ``` screen
    # ethtool -k enp1s0 | grep ntuple-filters
    ntuple-filters: off
    ```
2.  启用 then `tuple`{.literal} 过滤器：
    ``` screen
    # ethtool -k enp1s0 ntuple on
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果输出 isn `tuple-filters: off [fixed]`{.literal}，则禁用
`retu`{.literal} ple 过滤且您无法配置它：
``` screen
# ethtool -k enp1s0 | grep ntuple-filters
ntuple-filters: off [fixed]
```
:::
::: itemizedlist
**验证步骤**
-   确保启用了 if `ntuple`{.literal} 过滤器：
    ``` screen
    # ethtool -k enp1s0 | grep ntuple-filters
    ntuple-filters: on
    ```
:::
::: itemizedlist
**其它资源**
-   `ethtool(8)`{.literal} man page
:::
:::
:::
:::
[]{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance}第 35 章 配置操作系统以优化内存访问 {.title}
:::
这部分论述了如何配置操作系统以优化工作负载的内存访问，以及用于这样做的工具。
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#tools-for-monitoring-and-diagnosing-system-memory-issues_configuring-an-operating-system-to-optimize-memory-access}用于监控和诊断系统内存问题的工具 {.title}
:::
Red Hat Enterprise Linux 8
中提供了以下工具来监控系统性能并诊断与系统内存相关的性能问题：
::: itemizedlist
-   由 `procps-ng`{.literal} 软件包提供的 `vmstat`{.literal}
    工具可显示系统进程、内存、分页、块 I/O、陷阱、磁盘和 CPU
    活动的报告。它提供自计算机上次打开或上次报告之后平均这些事件的即时报告。
-   `Valgrind`{.literal} 框架为用户空间二进制文件提供了工具。使用
    `yum install valgrind`{.literal}
    命令安装此工具。它包含很多工具，您可以使用它们来分析和分析程序性能，例如：
    ::: itemizedlist
    -   `memcheck`{.literal} 选项是默认的 `valgrind`{.literal}
        工具。它检测并报告一些难以检测和诊断的内存错误，例如：
        ::: itemizedlist
        -   不应发生的内存访问
        -   未定义或未初始化值使用
        -   释放堆内存不正确
        -   指针重叠
        -   内存泄漏
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            memcheck 只能报告这些错误，它无法阻止它们发生。但是
            `，memcheck`{.literal} 会在出错前立即记录错误消息。
            :::
        :::
    -   `Cachegrind`{.literal}
        选项模拟应用程序与系统的缓存层次结构和分支预测器交互。它在应用执行期间收集统计信息，并将摘要输出到控制台。
    -   `massiveif`{.literal}
        选项测量指定应用使用的堆空间。它测量有用的空间和分配用于预订和调整的其他空间。
    :::
:::
::: itemizedlist
**其它资源**
-   `vmstat(8)和`{.literal} `valgrind(1)`{.literal} man page
-   `/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.literal} file
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#overview-of-a-systems-memory_configuring-an-operating-system-to-optimize-memory-access}系统内存概述 {.title}
:::
Linux
内核旨在最大限度地提高系统内存资源(RAM)的利用率。由于这些设计特征，根据工作负载的内存要求，系统部分内存正在内核中使用，代表工作负载使用，而内存的一小部分是空闲的。此可用内存保留给特殊系统分配，用于其他低优先级或高优先级系统服务。
系统内存的其余部分专用于工作负载本身，并分为以下两个类别：
::: variablelist
[`文件内存`{.literal}]{.term}
:   在此类别中添加的页面代表永久存储中文件的一部分。这些页面可以从页面缓存中映射或取消映射应用的地址空格。您可以使用应用使用
    `mmap`{.literal} 系统调用将文件映射到其地址空间，或者通过缓冲的 I/O
    读写系统调用对文件执行操作。
    缓冲的 I/O
    系统调用以及直接映射页面的应用程序可以重新利用未映射的页面。因此，这些页面由内核存储在缓存中，特别是在系统没有运行任何内存密集型任务时，以避免在同一组页面上重新发出昂贵的
    I/O 操作。
[`匿名内存`{.literal}]{.term}
:   此类别中的页面由动态分配的进程使用，或者与永久存储中的文件无关。这组页面备份每个任务的内存中控制结构，如应用堆栈和堆区域。
:::
::: figure
[]{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#idm139675426012768}
**图 35.1. 内存用量模式**
::: figure-contents
::: mediaobject
![RHEL 内存使用模式](images/RHEL_Memory_Usage_Patterns.png)
:::
:::
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#virtual-memory-parameters_configuring-an-operating-system-to-optimize-memory-access}虚拟内存参数 {.title}
:::
虚拟内存参数列在 `/proc/sys/vm`{.literal} 目录中。
以下是可用的虚拟内存参数：
::: variablelist
[`vm.dirty_ratio`{.literal}]{.term}
:   是百分比值。当修改了系统总内存的这个百分比时，系统开始使用
    `pdflush`{.literal} 操作将修改写入到磁盘。默认值为 `20%`{.literal}。
[`vm.dirty_background_ratio`{.literal}]{.term}
:   百分比值.修改系统内存总量的百分比时，系统开始在后台将修改写入磁盘。默认值为
    `10%`{.literal}。
[`vm.overcommit_memory`{.literal}]{.term}
:   定义确定大型内存请求是接受还是被拒绝的条件。默认值为 `0`{.literal}。
    默认情况下，内核通过估算可用内存量和失败的请求量来执行启发式内存过量使用处理。但是，由于内存是使用启发式而不是精确算法来分配的，因此此设置可能会造成内存过载。
    设置 `overcommit_memory`{.literal} 参数的值：
    ::: itemizedlist
    -   当此参数设置为 `1`{.literal}
        时，内核不会执行内存过量使用处理。这增加了内存过载的可能性，但提高了内存密集型任务的性能。
    -   当此参数设置为 `2`{.literal}
        `时，内核拒绝对等于或大于可用交换空间总和（overcommit_ratio`{.literal}
        中指定的物理 RAM
        百分比）的请求。这降低了过量使用内存的风险，但建议仅用于交换区域大于物理内存的系统。
    :::
[`vm.overcommit_ratio`{.literal}]{.term}
:   指定在将 `过量使用_memory`{.literal} 设置为 `2`{.literal}
    时所考虑的物理 RAM 百分比。默认值为 `50`{.literal}。
[`vm.max_map_count`{.literal}]{.term}
:   定义进程可以使用的最大内存映射区域数。默认值为
    `65530`{.literal}。如果您的应用程序需要更多内存映射区域，请提高这个值。
[`vm.min_free_kbytes`{.literal}]{.term}
:   设置保留可用页面池的大小。它还负责设置 `min_page、low`{.literal}
    `_page`{.literal} 和 `high_page`{.literal} 阈值，这些阈值管理 Linux
    内核页面回收算法的行为。它还指定了在系统中保持可用最小 KB
    的数量。这会为每个低内存区域计算一个特定值，每个区按照其大小分配一组保留的可用页面。
    设置 `vm.min_free_kbytes`{.literal} 参数的值：
    ::: itemizedlist
    -   增加参数值可有效减少应用程序的工作集合的可用内存。因此，您可能只将它用于由内核驱动的工作负载，其中驱动程序缓冲区需要在原子环境中分配。
    -   如果内存在系统中面临大量争用，则减少参数值可能会导致内核无法服务系统请求。
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        极端值可能会影响系统的性能。将 `vm.min_free_kbytes`{.literal}
        设置为非常低的值可防止系统有效地回收内存，这会导致系统崩溃，并且无法为中断或其他内核服务提供服务。但是，设置
        `vm.min_free_kbytes 太`{.literal}
        大会增加系统回收活动，从而导致分配延迟，从而导致错误直接重新声明状态。这可能会导致系统立即输入内存不足状态。
        :::
        `vm.min_free_kbytes`{.literal}
        参数还设置一个页面重新声明水位线，名为
        `min_pages`{.literal}。在确定控制页面回收算法的其他两个内存水位线（Li_pages
        和 ` high_pages`{.literal} ``{=html}
        ）时，该水位线可用作一个因素。
    :::
[`/proc/PID/oom_adj`{.literal}]{.term}
:   如果系统内存不足，并且
    `panic_on_oom 参数被设置为 0`{.literal}，oom``{=html}
    `_killer`{.literal} 功能会终止进程，从具有最高 `oom_score`{.literal}
    的进程开始，直到系统恢复为止。
    The `oom_adj`{.literal} 参数决定进程的
    `oom_score`{.literal}。这个参数是为每个进程标识符设置的。值
    `-17 可`{.literal} 禁用该进程的
    `oom_killer`{.literal}。其他有效值范围为 `-16`{.literal} 到
    `15`{.literal}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由调整后的进程创建的进程将继承该进程的 `oom_score`{.literal}。
:::
::: variablelist
[`vm.swappiness`{.literal}]{.term}
:   交换度值（范围从 `0`{.literal} `到`{.literal}
    100）控制系统首选从匿名内存池或页面缓存内存池回收内存的程度。
    设置 `swappiness`{.literal} 参数的值：
    ::: itemizedlist
    -   更高的值优先是文件映射驱动的工作负载，而交换出不太活跃访问的进程的
        RAM
        映射内存。这可用于文件服务器或流应用程序，这些应用程序依赖存储中的文件（来自存储中的文件）驻留在内存中，以减少服务请求的
        I/O 延迟。
    -   低值优先使用匿名映射的工作负载，同时回收页面缓存（文件映射内存）。此设置对于不大量依赖于文件系统信息、大量使用动态分配和私有内存的应用程序（如数学和编号阻塞应用程序）以及很少的硬件虚拟化管理器（如
        QEMU）非常有用。
        `vm.swappiness`{.literal} 参数的默认值为 `30`{.literal}。
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        将 `vm.swappiness`{.literal} 设置为 `0`{.literal}
        主动避免将匿名内存交换出到磁盘，这会增加内存或 I/O
        密集型工作负载下由 `oom_killer`{.literal} 功能终止的进程的风险。
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   `sysctl(8)`{.literal} man page
-   [设置内存相关内核参数](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance#setting-memory-related-kernel-parameters_configuring-an-operating-system-to-optimize-memory-access){.link}
:::
:::
::: section
::: titlepage