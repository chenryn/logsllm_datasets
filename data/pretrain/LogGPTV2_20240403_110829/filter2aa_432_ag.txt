#include 
main()
{
int pid,status,exit_status;
if ((pid=fork()) > 8;
exit_status &=0xFF;
printf("Exit status from %d was %d\n", pid,exit_status);
}
exit(0);
}
虽然这个过程看起来有一点复杂，但是其含义十分清除：通过 exit 返回给父进程之值
存放在 exit_status 的低位中，为了使其有意义，exit_status 的高 8 位必须为 0（注意，在整
型量中，低 8 位在前，高 8 位在后）。因此从 wait()返回后，就可以用按位与操作进行测试，
如果它们不为 0，表示该子进程是被另一个进程用一种称为信号的通信机构停止的，而不
是通过 exit()结束的。
3.2.3  进程终止的特殊情况
我们在前面讨论了用 wait()和 exit()联用来等待子进程终止的情况。但是，还有两种进
程终止情况值得讨论。这两种情况为：
1．子进程终止时，父进程并不正在执行 wait()调用。
2．当子进程尚未终止时，父进程却终止了。
在第一种情况中，要终止的进程就处于一种过渡状态（称为 zombie），处于这种状态
的进程不使用任何内核资源，但是要占用内核中的进程处理表那的一项。当其父进程执行
wait()等待子进程时，它会进入睡眠状态，然后把这种处于过渡状态的进程从系统内删除，
父进程仍将能得到该子进程的结束状态。
在第二种情况中，一般允许父进程结束，并把它的子进程（包括处于过渡状态的进程）
交归系统的初始化进程所属。
3.2.4  进程控制的实例
在这一部分，我们将利用前面介绍的进程控制的知识，来构造一个简单的命令处理程
序，取名为 smallsh。这样作有两个目的：第一，可以巩固和发展我们在这一章中介绍的概
念；第二，它展示了标准的 Linux 系统程序也没有什么特别的东西。特别是，它表明了 shell
也只是一个在用户注册时调用的普通程序。
smallsh 的基本功能是：它能在前台或后台接收命令并执行它们。它还能处理由若干个
命令组成的命令行。它还具有文件名扩展和 I/O 重定向等功能。
smallsh 的基本逻辑如下：
- 34 -
Linux网络编程
while (EOF not typed) {
从用户终端取得命令行
执行命令行
}
我们把取命令行内容用一个函数来完成，并取名为 userin。userin 能显示提示符，然后
等待用户从键盘输入一命令行信息。它接收到的输入内容应存入程序的一个缓冲区中。
我们可以忽略到一些初始化工作，但是，userin 的基本步骤是：首先显示提示符，提
示符的具体内容由用户通过参数传送给函数；然后每次从键盘读一个字符，当遇到换行符
或文件结束符（用 EOF 符号表示）时，就结束。
我们用的基本输入例程是 getchar，它实际上是标准 I/O 库中的一个宏（macro），它从
程序的标准输入读入一个字符，userin 把每个读入的字符都存入字符型数组 inpbuf 中，当
它结束时，userin 就返回读入字符的个数或 EOF(表示文件结尾)。注意，换行符也要存入
inpbuf，而不能丢弃。
函数 userin 的代码如下：
#include "smallsh.h"
/* 程序缓冲区和指针 */
static char inpbuf[MAXBUF],tokbuf[2*MAXBUF],
*ptr =inpbuf,*tok=tokbuf;
/* userin()函数 */
int userin(chat* p)
{
int c,count;
ptr=inpbuf;
tok=tokbuf;
/* 显示提示 */
printf("%s ",p);
for (count=0;;) {
if ((c=getchar())==EOF)
return(EOF);
if (count
#define EOL 1 /* 行结束 */
#define ARG 2
#define AMPERSAND 3
#define SEMICOLON 4
#define MAXARG 512 /* 命令行参数个数的最大值 */
#define MAXBUF 512 /* 输入行的最大长度 */
#define FOREGROUND 0
#define BACKGROUND 1
上述文件中定义的内容，有一些未被 userin 引用，我们将在后面的例程中引用它们。
smallsh.h 文件中还蕴涵了标准头文件 stdio.h，它为我们提供了 getchar 和 EOF 的定义。
接下来我们看一下 gettok，它从 userin 构造的命令行缓冲区中分析出命令名和参数。
gettok 的调用方法为：
toktype=gettok(&tptr);
toktype 是一个整型变量，它的值指出分析出内容之类型。它的取值范围可以从 smallsh.h
中得到，包括 EOL，SEMICOLON 等。tptr 是一个字符型指针，gettok 调用后，该指针指
向实际的析出内容。由于 gettok 要为分析出的内容分配存贮区，所以我们必须传送 tptr 的
地址，而不是它的值。
下面给出 gettok 的程序。由于它引用了字符指针 tok 和 ptr，所以它必须与 userin 放在
同一个源文件中。现在可以知道在 userin 的开头初始化 tok 和 ptr 的原因了。
gettok(char* output)
{
int type;
outptr=tok;
/* 首先去除空白字符 */
for (;*ptr==''||*ptr=='\t';ptr++);
*tok++=*ptr;
switch(*ptr++) {
case '\n':
type=EOL;break;
case '&':
type=AMPERSAND;break;
case ';':
type=SEMICOLON;break;
default:
type=ARG;
while (inarg(*ptr))
*tok++=*ptr++;
}
*tok++='\0';
- 36 -
Linux网络编程
return (type);
}
例行程序 inarg 用于确定一个字符是否可以作为参数的组成符。我们只要检查这个字符
是否是 smallsh 的特殊字符。inarg 的程序如下：
static char special[]={‘ ‘,’\t’,’*’,’;’,’\n’,’\0’};
inarg(char c)
{
char *wrk;
for (wrk=special;*wrk!=’\0’;wrk++)
if (c==*wrk)
return(0);
return(1);
}
在上面我们已经介绍了完成实际工作的几个函数。我们下面将介绍使用这些完成实际
工作的函数的例行程序。
例行程序 procline 使用函数 gettok()分析命令行，在处理过程中构造一张参数表。当它
遇到换行符或分号时，它就调用例行程序 runcommand 来执行被分析的命令行。它假定已
经用 userin 读入了一个输入行。下面给出例行程序 procline 的代码：
#include "smallsh.h"
procline()
{
char * arg[MAXARG+1];
int toktype;
int narg;
int type;
for(narg=0;;) {
switch(toktype=gettok(&arg[narg])) {
case ARG:
if (narg";
main()
{
while (userin(prompt)!=EOF)
procline();
}
3.3  进程的属性
每个 Linux 进程都具有一些属性，这些属性可以帮助系统控制和调度进程的运行，以
及维持文件系统的安全等。我们已经接触过一个进程属性，它就是进程标识符，用于在系
统内标识一个进程。另外还有一些来自环境的属性，它们确定了进程的文件系统特权。我
们在本节中还要介绍其它一些重要的进程属性。
3.3.1  进程标识符
系统给每个进程定义了一个标识该进程的非负正数，称作进程标识符。当某一进程终
止后，其标识符可以重新用作另一进程的标识符。不过，在任何时刻，一个标识符所代表
的进程是唯一的。系统把标识符 0 和 1 保留给系统的两个重要进程。进程 0 是调度进程，