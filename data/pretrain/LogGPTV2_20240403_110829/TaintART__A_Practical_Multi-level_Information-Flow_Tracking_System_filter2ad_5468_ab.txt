and “optimizing” backend. The “optimizing” backend can
perform more optimization strategies, and became the de-
fault compiler backend from Android 6.0. At runtime, ART
will mainly handle dynamic heap management such as ob-
ject allocations and garbage collections. Note that although
the original sources of Dalvik VM were removed from the
code bases, some names of tools and functions still contains
“dalvik”.
Because of the diﬀerences of the modular interpreter and
AOT compiler, the design methodologies of taint tracking
are fundamentally diﬀerent.
In addition, TaintDroid cus-
tomizes Dalvik VM and utilizes its internal stack. It dou-
bles the size of stack frame and stores taint tags for each
parameters and local variables in the extra memory slots.
This incurs two times internal memory usage for stack frame
and at least two memory accesses for each taint propagation
event. To better utilize compiler optimization, we propose
to instrument the ART compiler.
3. SYSTEM DESIGN
In this section, we ﬁrst present an overview of TaintART
and then discuss various building blocks of our taint-based
dynamic information-ﬂow tracking system.
3.1 Overview
Design We design TaintART, a compiler-instrumented
information-ﬂow tracking system. TaintART utilizes dy-
namic taint analysis technique and can track data by insert-
ing tracking logic. TaintART employs a multi-level taint
tag methodology to minimize taint storage so that tags can
be stored in processor registers for fast access. We imple-
ment TaintART by customizing the ART compiler to retain
the original ahead-of-time optimizations (which will be pre-
sented in Section 3.2). TaintART also deﬁnes multi-level
data tracking strategy which can be used for policy enforce-
ment on data leakage. Because the compiler and calling
convention are stable across versions, TaintART is durable
and can be easily updated to support future versions.
In dynamic taint analysis, sensitive data is targeted at
any sensitive function called taint source. A taint tag will
be labeled on the sensitive data for tracking. When the data
is copied or transformed to another place, its taint tag will
propagate to the new place. When the data is purged, its
taint tag will be cleared. We call taint propagation and taint
purging as taint logic and it deﬁnes the transition of taint
tag. The taint tag status for tracking data will be stored
in taint tag storage. Dynamic taint analysis will track the
tainted sensitive data and monitor if any tainted data leaves
the system at some speciﬁed functions called taint sinks,
such as sending out data via the network or save the data
in an external storage.
Figure 3 describes the overview of TaintART, which con-
sists of two components taking actions on two separate stages
respectively. They are TaintART compiler at installation
stage and TaintART runtime at runtime stage. For the in-
stallation stage, the TaintART compiler will compile apps
into native code. Note that the compiler is based on the ART
compiler with the “optimizing” backend containing three ba-
sic building blocks: builder, optimizer, and code generator.
The builder will parse app’s dex bytecode to intermediate
representations, i.e., internal control ﬂow graphs. Using this
internal control graph, the optimizer will combine logic, op-
timize register assignment, eliminate instructions, etc. Fi-
nally, the code generator will compile internal representa-
tions into machine speciﬁc native code. Before generating
the native code, the TaintART compiler will insert code
blocks to handle taint logic. For example, if a tainted vari-
able is copied to another variable, the inserted block will
help to propagate taint tags of these variables and mod-
ify tag status in the taint storage. Note that code blocks
will be injected in a fully optimized code, and this will not
only maintain the original program logic, but also preserve
performance gains by compiler’s optimizations. For the run-
time stage, the TaintART runtime can track taint tag of
sensitive data by eﬃciently accessing tag status in the taint
tag storage. When the tainted data is transported to other
channels, the TaintART runtime can report the event.
Figure 3 illustrates a simple control ﬂow graph. Each
node in the graph represents a program logic and arrows
pointing to the next logic. Node 1 contains an instruction
to get sensitive data from a taint source and save in the R0
variable. Node 2 is to empty R0 and its taint tag will be clear.
Node 3 is to assign the data in R0 to R1. This means the
taint tag in R0 will propagate to R1. For taint propagation
logic, we will insert nodes (e.g., nodes highlighted in gray)
to manage changes of taint tags. For node 4, the logic is
to send the data in R1 to other untrusted channels such
as the WiFi network, i.e., a taint sink. As shown in the
ﬁgure, there are two possible paths at runtime resulting in
diﬀerent data-ﬂow. Only the ﬁrst one (i.e., red path in solid
line) leads to information leakage. TaintART will track
the taint status of each registers (i.e., variables) so as to
determine if the data is leaked. If the runtime control ﬂow
is the blue path (in dotted line), the taint tag of R1 should
be false in the end meaning no sensitive data is leaked. We
will explain how TaintART eﬃciently stores taint tags and
handles taint logic in later sections.
3.2 Taint Tag Storage
At runtime, each taint logic may cause status change of
taint tags. Therefore, the design of taint tag storage will
largely aﬀect the runtime performance. TaintART employs
processor registers for taint tag storage to achieve the fastest
storage access. To illustrate, we consider the scenario for
recording two taint tag states only. Essentially, TaintART
can utilize m bits of a register to store a taint tag status of a
variable. If a variable is tainted, its corresponding bits in the
taint storage register will be marked as tainted, otherwise,
Figure 3: Overview of TaintART.
Figure 4: Taint tag storage using register R5.
the bits will be set to untainted. We ﬁrst use one bit to
represent two taint states, and will discuss the scenario on
multiple taint tag states in Section 4.
Speciﬁcally, the TaintART compiler will reserve registers
for taint storage. Figure 4 illustrates the basic idea of storing
taint tag in registers. Our TaintART prototype is built on
Google Nexus 5, which is a 32-bit ARM platform Android
device. There are 16 regular CPU registers and each register
has 32 bits. We reserve the register R5 for taint storage. The
register allocator of the TaintART compiler will ensure that
R5 will not be assigned for other purposes such as variable
storage. The ﬁrst sixteen bits (from bit 0 to bit 15) will
be used for storing taint tags of sixteen registers (from R0
to R15). Note that the ART runtime will also reserve stack
registers (SP/R13, LR/R14 and PC/R15), thread register (TR/
R9) and temp register (R12). Therefore, we do not need to
maintain bits for taint tag storage of these registers. Besides,
Nexus 5 contains a vector ﬂoating-point coprocessor. We use
the remaining sixteen bits for storing taint tag of ﬂoating
point registers (from S0 to S15).
Taint Tag Spilling Because a processor has a limited
number of registers and not all variables can be assigned
to registers, the register allocator will temporarily store ex-
tra variables in the main memory. The operation of moving
a variable from a register to the main memory is called reg-
ister spilling. The taint tag storage of TaintART is based
on CPU registers. If a variable in register is spilled to mem-
ory, the taint tag of this register is no longer valid. In our
design, we will store its taint tag into memory right after
the spilled variable. We call this operation taint tag spilling.
Figure 5 illustrates taint tag spilling operation. If R4 spills
into memory, its taint tag will be stored in the next slot
in the memory stack. Normally, the compiler will optimize
register allocations to minimize register spilling. Therefore,
runtime performance will not be aﬀected too much. We will
evaluate this performance overhead in Section 6.
Taint Tag of Object Fields The ART runtime maintains
a heap for storing objects. The TaintART runtime adds
Figure 5: Taint tag spills into memory.
an extra space for each ﬁeld in an object to indicate its
taint status. For array, object array and string objects, we
only store one taint tag to minimize the memory usage. We
modiﬁed the heap allocator in the ART runtime to allocate
spaces for storing taint tag. When there is an access to a ﬁeld
of an object, the TaintART compiler will load its taint tag
from the memory to the corresponding register taint storage.
We will presents taint propagation logic for ﬁeld reading and
writing in details later.
3.3 Taint Propagation Logic
TaintART provides variable-level taint tracking by in-
strumenting the Android compiler. Basically, TaintART
tracks registers used for primitive type variables and ob-
ject references. This section presents basic taint propagation
logic, taint propagation via methods calls, and propagation
between apps through binder IPC.
3.3.1 Taint Propagation Logic
The code builder of the ART compiler will transform the
original dex bytecode into an internal control ﬂow graph
(HGraph). The dex instructions will be represented as
HInstruction classes internally in the HGraph. For example,
a const/4 dex bytecode will be built as an HIntConstant
instruction. The HGraph consists of many basic blocks
(or HBasicBlocks). Then based on the HGraph, the opti-
mizer will conduct various optimization strategies such as
phi elimination,
liveness analysis, dead code elimination,
and constant folding. The ART compiler generator operates
on HGraph and transforms internal instruction representa-
tion (HInstruction) in basic blocks into native code. The
TaintART compiler instruments the original ART compiler
and inserts code blocks to handle taint propagation logic.
The taint propagation logic is a set of operations (i.e., the
HInstruction classes) which may cause variables’ taint la-
bels to change status. Table 1 shows descriptions of all types
of tracking taint propagation logic including move opera-
tions, unary/binary operations, array operations, and ﬁeld
operations. The “HInstruction” column indicates classes of
instructions. An HInstruction class contains its instruc-
tion type and related locations. The “Location” ﬁeld is an
abstraction over the potential registers containing variables
or constants. For instance, the HBinaryOperation class con-
tains a set of binary operations such as addition (HAdd), sub-
traction (HSub) and multiplication (HMul). There are three
locations related to this type of instructions which are first,
second, and out. The semantic of HBinaryOperation is to
conduct an operation (⊗) such as addition (+) on the first
location and the second location, and store (←) the ﬁnal
result in the out location. Note that because TaintART
tracks taint propagation on optimized compiled code, com-
pared to TaintDroid’s VM-based taint logic, TaintART will
Figure 6: Taint tag propagates from R1 to R0 for
the MOV R0, R1 instruction.
introduce much less instructions on handling taint status
changes. For instance, we do not need to track constant
instructions (e.g., const/4, const/16 and const/high16 in
dex bytecode) as taint logic propagation. This is because
during the optimization of the ART compiler, the optimizer
will conduct constant folding and inline the remaining con-
stants into related instructions. Therefore, the code genera-
tor will ignore this type of instructions.
Because TaintART uses CPU registers as the taint tag
storage, the logic of taint label propagation is simple and
fast. Figure 6 illustrates an example of the four steps to
propagate taint status from an R1 variable to an R0 variable
for the MOV R0, R1 instruction. There are two registers in-
volved. The R5 register is the taint storage. We also need a
temporary register for taint labels propagation. Fortunately,
the ART compiler reserves the R12 register and provides it
for temporary usage. The four steps for taint propagation
are (1) clear destination bit, (2) masking tainted bit, (3)
shifting bits, and (4) merging tainted bits. Note that the
last two steps can be combined into one instruction (3(cid:48))
in ARM architecture devices. Therefore, TaintART only
needs three data processing instructions without memory ac-
cess to eﬃciently propagate a taint label. This is important
because all instructions on taint propagation logic should be
tracked at runtime. If it is not designed properly, this will
introduce a huge impact on the runtime performance. We
will perform instruction-level microbenchmak on Section 6.
For binary operations (i.e., HBinaryOperation), we take the
maximum value of taint tags from the first location and
the second location and set it as the taint tag of the out lo-
cation so as to achieve multi-level awareness. We will discuss
the multi-level scenario in Section 4.
3.3.2 Method Invocation Taint Propagation
For the method invocation, we need to handle the taint
propagation by passing values through method parameters.
According to the method calling convention in ART environ-
ment, the R1, R2 and R3 registers are used for passing ﬁrst
three parameters.
If the number of parameters is greater
than three, the remaining parameters will be spilled into
the memory. The TaintART compiler will push the taint
storage register (i.e., R5) into the memory at the method
frame entry. Then, all bits of R5 are cleared except taint la-
bel bits for R1, R2 and R3 three passing parameters. For the
spilled parameter registers, we do not need to do extra oper-
ations. Same as the taint tag spilling method we discussed
in taint tag storage section, the system utilizes another word
Table 1: Descriptions of multi-level aware taint propagation logic.
HInstruction (Location)
HParallelMove(dest, src)
HUnaryOperation(out, in)
HBooleanNot, HNeg, HNot
Semantic
dest ← src
out ← in
Taint Propagation Logic Description
Set dest taint to src taint, if src is constant then clear dest taint
Set out taint to in taint, unary operations ∈ {!, -, ~}
HBinaryOperation(out, first, second)
HAdd, HSub, HMul, HDiv, HRem,
HShl, HShr, HAnd, HOr, HXor
HArrayGet(out, obj, index)
HArraySet(value, obj, index)
HStaticFieldGet(out, base, offset)
HStaticFieldSet(value, base, offset)
HInstanceFieldGet(out, base, offset)
HInstanceFieldSet(value, base, offset)
out ← first ⊗ second
Set out taint to max(first taint, second taint),
⊗ ∈ {+, -, *, /, %, >, &, |, ^}
out ← obj[index]
obj[index] ← value
out ← base[offset]
base[offset] ← value
out ← base[offset]
base[offset] ← value
Set out taint to obj taint
Set obj taint to value taint
Set out taint to base[offset] ﬁeld taint
Set base[offset] ﬁeld taint to value taint
Set out taint to base[offset] ﬁeld taint