### Table II: Evaluation Results for Real-World Applications

CVE-2019-0604 in SharePoint Server has two exploitable entry points in different assemblies [49]. SerialDetector identifies that both entry points, along with many others, reach the `XmlSerializer::Deserialize` call. A notable outlier is `Microsoft.SharePoint.dll`, which has 6,283 detected entry points. The high complexity is primarily due to the tight coupling of code in SharePoint Server and its main assembly, `Microsoft.SharePoint.dll`, as well as our over-approximation of virtual calls. For each vulnerable entry point, we followed the approach described in Section V to generate and validate the exploits. In our experiments, we modified the payload as reported in Table II. Further details on threat models and exploit changes are provided in Section VII-A.

### Performance
The analysis is remarkably fast for a large project like the .NET Framework. On average, the analysis for a single serializer takes 47.4 seconds. This demonstrates the advantages of our modular inter-procedural analysis. We also experimented with a whole-program dataflow analysis algorithm, which did not terminate within a few hours. Our flow-insensitive approach reduces the size of the heap graph, enabling SerialDetector to apply summaries and merge locations more efficiently, thus improving overall analysis time. Additionally, the use of lightweight context-sensitive analysis enhances scalability. Earlier versions of SerialDetector analyzed all implementations of a virtual method conservatively, which generated correct patterns for a few serializers (e.g., `BinaryFormatter`) but failed to terminate for many others. The implementation of type-sensitive analysis improved performance for all tested serializers.

### False Positives
We also identified attack triggers that are never called for a tainted object. The root cause of these false positives is the flow-insensitivity of the data flow analysis. While this approach allows us to control the heap size, it sacrifices some precision. However, our results show that the number of patterns requiring manual review by a security analyst is manageable.

### VII. In-Depth Analysis of Azure DevOps Server
To validate the practical utility of SerialDetector, we evaluated it on production software, specifically Azure DevOps Server (ADS), due to its complexity and diverse threat models. Section VII-A provides a brief summary of ADS, Section VII-B outlines the explored threat models, and Section VII-C describes the process of using SerialDetector to discover unknown vulnerabilities.

#### A. Microsoft Azure DevOps
Azure DevOps Server (ADS) is a Microsoft product offering version control, reporting, requirements management, project management, automated builds, lab management, testing, and release management capabilities. These features require integration with various data formats and serializers, making ADS an excellent target for finding Object Injection Vulnerabilities (OIVs). ADS hosts multiple projects across different organizations, grouped into isolated collections, with flexible user management. A vulnerability exposing high privileges in one project can lead to information disclosure in another. ADS stores confidential intellectual property, such as source code, making a breach highly impactful. ADS consists of many services, including the main web app, crawler, and indexer services, implying complex threat models where even internal data can be untrusted. Entry points include request handlers, documented REST APIs, plugin APIs, and internal/undocumented APIs.

#### B. Threat Models
1. **Simple Threat Model (Web Application under OS Account)**
   - ADS runs under the NETWORK SERVICE account by default.
   - The web application has access to internal network services and databases.
   - Users communicate only with the web application in the DMZ.
   - If an entry point receives user data and uses OIV-prone code, the attacker can access resources available to the OS account.

2. **Internal Data Threat Model**
   - An attacker inside the DMZ network with restricted privileges can exploit OIVs through shared files or other internal services.
   - Example: An attacker can transfer a payload through files, escalate privileges, and gain access to OS Account resources.

3. **Administrator Privileges Threat Model**
   - Only users with administrator privileges can access OIV-prone code.
   - ADS allows users to create isolated projects with their own administrator accounts.
   - An attacker can register as an administrator and exploit OIVs directly to gain access to all OS Account resources.

#### C. SerialDetector in Action
We used SerialDetector to analyze ADS for OIVs. The tool analyzed 422 assemblies, 630,251 methods, and 11,258,350 instructions, completing the analysis in 174 seconds. We detected the use of seven serializers: `BinaryFormatter`, `DataContractSerializer`, `JavaScriptSerializer`, `Newtonsoft.Json`, `XamlReader`, `XmlSerializer`, and `YamlDotNet`. We verified that `DataContractSerializer`, `JavaScriptSerializer`, `Newtonsoft.Json`, `XamlReader`, and `XmlSerializer` were used safely for untrusted data.

**RCE via BinaryFormatter**
- The `BinaryFormatter` matched the patterns generated by SerialDetector.
- We reported the vulnerability to Microsoft, who assigned CVE-2019-1306 and released a patch.
- The fix uses a look-ahead approach to control class loading, preventing OIV exploitation.

**RCE via YamlDotNet**
- ADS uses YAML for pipeline configuration.
- The Web Application deserializes YAML files, potentially leading to RCE.
- We used SerialDetector to build the call graph and found a public Web API allowing build processes with YAML configurations.
- We generated a payload and ran the build process, identifying and fixing issues.
- We also found and exploited XSS vulnerabilities to trigger RCE with minimal privileges.
- Microsoft assigned CVE-2019-0866 and CVE-2019-0872, fixing the vulnerabilities by implementing a lightweight YAML serializer.

### VIII. Related Works
This section discusses related works targeting object injection vulnerabilities and injection vulnerabilities.

**Object Injection Vulnerabilities**
- The closest related research is the work of Dahse et al. [11], [13], which implements static analysis to detect gadgets in PHP applications.
- Like us, they use static taint analysis to detect exploitable vulnerabilities.
- The key difference is that SerialDetector discovers new OIV patterns, while Dahse et al. focus on PHP.