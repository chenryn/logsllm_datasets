```
```
Locale getLocale()
基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。
```
```
Object getAttribute(String name)
以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。
```
```
ServletInputStream getInputStream()
使用 ServletInputStream，以二进制数据形式检索请求的主体。
```
```
String getAuthType()
返回用于保护 Servlet 的身份验证方案的名称，例如，“BASIC” 或 “SSL”，如果JSP没有受到保护则返回 null。
```
```
String getCharacterEncoding()
返回请求主体中使用的字符编码的名称。
```
```
String getContentType()
返回请求主体的 MIME 类型，如果不知道类型则返回 null。
```
```
String getContextPath()
返回指示请求上下文的请求 URI 部分。
```
```
String getHeader(String name)
以字符串形式返回指定的请求头的值。
```
```
String getMethod()
返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。
```
```
String getParameter(String name)
以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。
```
```
String getPathInfo()
当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。
```
```
String getProtocol()
返回请求协议的名称和版本。
```
```
String getQueryString()
返回包含在路径后的请求 URL 中的查询字符串。
```
```
String getRemoteAddr()
返回发送请求的客户端的互联网协议（IP）地址。
```
```
String getRemoteHost()
返回发送请求的客户端的完全限定名称。
```
```
String getRemoteUser()
如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。
```
```
String getRequestURI()
从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。
```
```
String getRequestedSessionId()
返回由客户端指定的 session 会话 ID。
```
```
String getServletPath()
返回调用 JSP 的请求的 URL 的一部分。
```
```
String[] getParameterValues(String name)
返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。
```
```
boolean isSecure()
返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。
```
```
int getContentLength()
以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。
```
```
int getIntHeader(String name)
返回指定的请求头的值为一个 int 值。
```
```
int getServerPort()
返回接收到这个请求的端口号。
```
下述例子使用了 HttpServletRequest 的 `getHeaderNames()` 方法来读取 HTTP 头信息。该方法返回了一个枚举，包含与当前的 HTTP 请求相关的头信息。
一旦我们得到一个枚举，我们可以以标准方式循环这个枚举，使用 `hasMoreElements()` 方法来确定何时停止循环，使用 `nextElement()` 方法来获取每个参数的名称。
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
// Extend HttpServlet class
import javax.servlet.annotation.WebServlet;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/DisplayHeader")
public class DisplayHeader extends HttpServlet {
  // Method to handle GET method request.
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html"); 
      PrintWriter out = response.getWriter();
      String title = "HTTP Header Request Example";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n"+
        "\n" +
        "" + title + "\n" +
        "\n" +
        "\n" +
        "Header NameHeader Value(s)\n"+
        "\n"); 
      Enumeration headerNames = request.getHeaderNames();
      while(headerNames.hasMoreElements()) {
         String paramName = (String)headerNames.nextElement();
         out.print("" + paramName + "\n");
         String paramValue = request.getHeader(paramName);
         out.println(" " + paramValue + "\n");
      }
      out.println("\n");
  }
  // Method to handle POST method request.
  public void doPost(HttpServletRequest request,
                     HttpServletResponse response)
      throws ServletException, IOException {
     doGet(request, response);
  }
}
```
现在，调用上述 servlet 会产生如下所示的结果：
---
## 服务器 HTTP 响应
正如在前面的章节中讨论的一样，当一个 Web 服务器对浏览器响应一个 HTTP 请求时，响应通常包括一个状态行、一些响应头信息、一个空行和文档。一个典型的响应如下所示：
```
HTTP/1.1 200 OK
Content-Type: text/html
Header2: ...
...
HeaderN: ...
  (Blank Line)
...
...
```
状态行包括 HTTP 版本（例子中的 HTTP/1.1）、一个状态码（例子中的 200）和一个对应于状态码的短消息（例子中的 OK）。
下面的方法可用于在 servlet 程序中设置 HTTP 响应头信息。通过 HttpServletResponse 对象这些方法是可用的。
```
String encodeRedirectURL(String url)
为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。
```
```
String encodeURL(String url)
对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。
```
```
boolean containsHeader(String name)
返回一个布尔值，指示是否已经设置已命名的响应头信息。
```
```
boolean isCommitted()
返回一个布尔值，指示响应是否已经提交。
```
```
void addCookie(Cookie cookie)
把指定的 cookie 添加到响应。
```
```
void addDateHeader(String name, long date)
添加一个带有给定的名称和日期值的响应头信息。
```
```
void addHeader(String name, String value)
添加一个带有给定的名称和值的响应头信息。
```
```
void addIntHeader(String name, int value)
添加一个带有给定的名称和整数值的响应头信息。
```
```
void flushBuffer()
强制任何在缓冲区中的内容被写入到客户端。
```
```
void reset()
清除缓冲区中存在的任何数据，包括状态码和头信息。
```
```
void resetBuffer()
清除响应中基础缓冲区的内容，不清除状态码和头信息。
```
```
void sendError(int sc)
使用指定的状态码发送错误响应到客户端，并清除缓冲区。
```
```
void sendError(int sc, String msg)
使用指定的状态发送错误响应到客户端。
```
```
void sendRedirect(String location)
使用指定的重定向位置 URL 发送临时重定向响应到客户端。
```
```
void setBufferSize(int size)
为响应主体设置首选的缓冲区大小。
```
```
void setCharacterEncoding(String charset)
设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。
```
```
void setContentLength(int len)
设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头信息。
```
```
void setContentType(String type)
如果响应还未被提交，设置被发送到客户端的响应的内容类型。
```
```
void setDateHeader(String name, long date)
设置一个带有给定的名称和日期值的响应头信息。
```
```
void setHeader(String name, String value)
设置一个带有给定的名称和值的响应头信息。
```
```
void setIntHeader(String name, int value)
设置一个带有给定的名称和整数值的响应头信息。
```
```
void setLocale(Locale loc)
如果响应还未被提交，设置响应的区域。
```
```
void setStatus(int sc)
为该响应设置状态码。
```
在前面的实例中你已经了解了 `setContentType()` 方法的工作方式，下面的实例也会用到同样的方法，此外，我们会用 `setIntHeader()` 方法来设置 Refresh 头信息。
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.util.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/Refresh")
public class Refresh extends HttpServlet {
  // Method to handle GET method request.
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set refresh, autoload time as 5 seconds
      response.setIntHeader("Refresh", 5);
      // Set response content type
      response.setContentType("text/html");
      // Get current time
      Calendar calendar = new GregorianCalendar();
      String am_pm;
      int hour = calendar.get(Calendar.HOUR);
      int minute = calendar.get(Calendar.MINUTE);
      int second = calendar.get(Calendar.SECOND);
      if(calendar.get(Calendar.AM_PM) == 0)
        am_pm = "AM";
      else
        am_pm = "PM"; 
      String CT = hour+":"+ minute +":"+ second +" "+ am_pm;
      PrintWriter out = response.getWriter();
      String title = "Auto Refresh Header Setting";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n"+