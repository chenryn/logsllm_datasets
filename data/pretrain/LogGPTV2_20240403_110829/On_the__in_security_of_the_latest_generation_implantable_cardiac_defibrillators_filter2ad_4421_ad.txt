### 5.2.2 Semi-Offline Key Agreement Protocol for IMDs

In this section, we describe a semi-offline key agreement protocol designed to secure communication between Implantable Medical Devices (IMDs) and device programmers. The time domain for the keys is disjoint, meaning that each IMD \( \text{id} \in \text{ID} \) stores a diversified key \( H_2(\text{id})\text{msk} \), which is provided at the time of manufacture. All operations are performed modulo \( q \).

Device programmers receive a temporal key \( H_1(t)\text{msk} \), which is valid for deriving all IMDs' diversified keys but only for a specific time period \( t \). For example, let's consider a time period of three months. In this case, every three months, the device programmer (or a healthcare employee) must contact the device manufacturer to obtain the key for the next quarter, \( H_1(t + 1)\text{msk} \), which is transmitted over a secure channel.

If a device programmer is lost, stolen, or tampered with, this can be reported to the device manufacturer, and the compromised device will no longer receive key updates, rendering it useless. Any key material extracted from the compromised device becomes obsolete after (at most) three months, and the system returns to a secure state. Figure 9 provides a detailed description of our semi-offline key agreement protocol.

This protocol requires one bilinear pairing computation on the IMD, which is computationally expensive, but this operation only needs to occur once every three months. On a daily basis, the IMD and device programmer use a standard symmetric key authentication protocol, such as the one proposed by Halperin et al., using the agreed key \( e(H_1(t), H_2(\text{id}))\text{msk} \). Note that this protocol does not provide key confirmation, but this can be easily achieved by the symmetric key authentication protocol, as demonstrated in Halperin et al.

### 5.2.3 Formal Analysis of Our Protocol

To ensure the security of our protocol, we model and analyze it using the applied pi-calculus [5] and the ProVerif checking tool [6]. The applied pi-calculus allows us to model protocols using primitives such as input, output, new name generation, and parallel composition. It also enables us to define functions and equations to model various cryptographic primitives. ProVerif can verify secrecy and correspondence properties for an arbitrary number of protocol runs using automated theorem proving, though it may not always terminate and could report false attacks.

We model an idealized version of bilinear pairings using functions and equations in the applied pi-calculus. Specifically, we define the functions `power(x, y)`, `prod(x, y)`, and `e(x, y)` to represent \( x^y \), \( xy \), and the bilinear map \( e(x, y) \), respectively. We would like to define the equation:

\[ e(\text{power}(a, x), \text{power}(b, y)) = \text{power}(e(a, b), \text{prod}(x, y)) \]

However, such an equation causes ProVerif’s proof tactics to enter an infinite loop. Therefore, we introduce an auxiliary function `powere(a, b, prod(x, y))` to represent \( e(a, b)^{xy} \). This abstract model of bilinear pairings does not include number-theoretic attacks, such as factoring the product, inverse powers, or low-entropy secrets.

Our model consists of four processes:
- **Programmer**: Models the role of the device programmer.
- **IMD**: Models the IMD.
- **CompromisedReader**: Publicly broadcasts a programmer's diversified key for a different time period.
- **CompromisedUnAuthIMD**: Models a compromised IMD by publicly broadcasting the diversified key for a medical device not accepted by the programmer.

At the end of their run, the Programmer and IMD processes broadcast a secret value encrypted with the key they have established. We test the system to see if an attacker can learn this secret, which would indicate a successful key establishment with the IMD or Programmer. The full model is provided in Appendix A.

### 5.2.4 Differentiating Between Device Programmers and Base Stations

It is important to differentiate between device programmers and base stations, as the former operate in a more controlled environment than the latter. Device programmers are available only to accredited healthcare professionals and institutions, while base stations are more accessible to patients at home. Some base stations can even be purchased on auction sites like eBay, making them relatively easy to obtain.

The usage of these devices is also different. Base stations only need read access to the IMD to forward telemetry information to healthcare practitioners. Therefore, it makes sense to have different keys for each type of device, providing different access levels. If the key of a base station is compromised, it represents a potential privacy violation but is not life-threatening.

### 6. Conclusions

In this work, we analyzed the security and privacy properties of the latest generation of ICDs. We fully reverse-engineered the proprietary protocol between the ICD and the device programmer using commercial and inexpensive equipment. Our results demonstrated that security-by-obscurity is a dangerous design approach that often conceals negligent designs. Therefore, it is crucial for the medical industry to transition from weak proprietary solutions to well-scrutinized security solutions and follow established guidelines.

Our analysis revealed serious protocol and implementation weaknesses in widely used ICDs, leading to several active and passive software radio-based attacks that we were able to perform in our laboratory. Our first attack involved keeping the ICD alive in "standby" mode by repeatedly sending messages over the long-range communication channel, aiming to drain the ICD's battery or extend the window for sending malicious messages. Our second attack targeted patient privacy by leveraging the recovery of the LFSR sequence used to "obfuscate" messages, which was constant across sessions and the same for all ICDs we studied.

We proposed short-term and long-term countermeasures. As a short-term solution, jamming can be used as a defensive mechanism. For long-term countermeasures, external devices could send a "shutdown" message to the ICD, allowing it to immediately switch to "sleep" mode after communication ends. Additionally, we designed and formally verified a semi-offline key agreement protocol between the device programmer and the ICD.

### 7. Acknowledgements

The authors would like to thank Stefaan Foulon for his support and the anonymous reviewers for their helpful comments. This work was supported in part by the Research Council KU Leuven: C16/15/058 and the Cryptacus COST Action IC1403.

### 8. References

[1] DAQ NI USB-6351. http://www.ni.com.
[2] Federal Communications Commission (FCC) ID. http://www.fcc.gov/encyclopedia/fcc-search-tools.
[3] LabVIEW. http://www.ni.com/labview.
[4] NI USRP-2920. http://www.ni.com.
[5] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In Symposium on Principles of Programming Languages (POPL), 2001.
[6] B. Blanchet, B. Smyth, and V. Cheval. ProVerif 1.88: Automatic cryptographic protocol verifier, user manual and tutorial, 2013.
[7] L. Chunxiao, A. Raghunathan, and N. Jha. Hijacking an insulin pump: Security attacks and defenses for a diabetes therapy system. In e-Health Networking Applications and Services, 13th IEEE International Conference on, pages 150–156, Jun 2011.
[8] F. D. Garcia, G. Koning Gans, R. Muijrers, P. Rossum, R. Verdult, R. W. Schreur, and B. Jacobs. Dismantling MIFARE Classic. In Proceedings of the 13th European Symposium on Research in Computer Security: Computer Security, ESORICS '08, pages 97–114, Berlin, Heidelberg, 2008. Springer-Verlag.
[9] F. D. Garcia, D. Oswald, T. Kasper, and P. Pavlidis. Lock it and still lose it —on the (in)security of automotive remote keyless entry systems. In 25th USENIX Security Symposium (USENIX Security 16), Austin, TX, Aug. 2016. USENIX Association.
[10] S. Gollakota, H. Hassanieh, B. Ransford, D. Katabi, and K. Fu. They Can Hear Your Heartbeats: Non-invasive Security for Implantable Medical Devices. SIGCOMM Comput. Commun. Rev., 41(4):2–13, Aug. 2011.
[11] T. Halevi and N. Saxena. On pairing constrained wireless devices based on secrecy of auxiliary channels: the case of acoustic eavesdropping. In Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010, pages 97–108, 2010.
[12] D. Halperin, T. S. Heydt-Benjamin, B. Ransford, S. S. Clark, B. Defend, W. Morgan, K. Fu, T. Kohno, and W. H. Maisel. Pacemakers and implantable cardiac defibrillators: Software radio attacks and zero-power defenses. In Proceedings of the 29th Annual IEEE Symposium on Security and Privacy, pages 129–142, May 2008.
[13] X. Hei, X. Du, J. Wu, and F. Hu. Defending resource depletion attacks on implantable medical devices. In Global Telecommunications Conference (GLOBECOM 2010), 2010 IEEE, pages 1–5, Dec 2010.

### APPENDIX

#### A. Formal Model of Our Proposed Protocol from Section 5.2.2

```plaintext
(* Secure IMD protocol *)
free c.

(* Bilinear pairings *)
fun power/2.
fun powere/3. (* powere(a, b, x) = e(a, b)^x *)
fun prod/2.
fun e/2.

(* prod(a, b) = a * b *)
(* e(power(a, x), power(b, y)) = powere(a, b, prod(x, y)) *)
(* power(x, y) = x^y *)

equation e(power(a, x), power(b, y)) = powere(a, b, prod(x, y)).
equation prod(x, y) = prod(y, x).

data one/0.

(* Hashes *)
fun H1/1.
fun H2/1.

(* Shared key cryptography *)
fun senc/2.
reduc sdec(y, senc(y, x)) = x.

private free sec.
private free msk.

(* Test if the attacker can learn the secret encrypted with the established key *)
query attacker:sec.

let Programmer = in (c, imdID);
if imdID = id then
  let rkey = e(rsec, power(H2(imdID), one)) in
  in(c, message);
  out(c, senc(rkey, sec)).

let IMD = let imdkey = e(power(H1(t), one), psec) in
  out(c, id);
  out(c, senc(imdkey, sec)).

let CompromisedReader = new t'; out(c, t');
out(c, power(H1(t'), msk)).

let CompromisedUnAuthIMD = new id'; out(c, id');
out(c, power(H2(id'), msk)).

process new msk;
!new t; out(c, t);
!new id; out(c, id);
let psec = power(H2(id), msk) in !IMD
| let rsec = power(H1(t), msk) in !Programmer
| !CompromisedReader | !CompromisedUnAuthIMD
```

This formal model helps in verifying the security properties of our proposed protocol.