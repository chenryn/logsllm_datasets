# Docker
---
**官网**
- https://www.docker.com
**Docker是啥**
Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。
**版本区别**
最早的时候 docker 就是一个开源项目，主要由 docker 公司维护.
- 2017年年初，docker 公司将原先的 docker 项目改名为 moby，并创建了 docker-ce 和 docker-ee.
- docker-ce 是社区版本，适用于刚刚开始 docker 和开发基于 docker 研发的应用开发者或者小型团队.
- docker-ee 是企业版，适用于企业级开发，同样也适用于开发、分发和运行商务级别的应用的 IT 团队.
- docker-io, docker-engin 是以前早期的版本.
**扩展项目**
- [Compose](https://github.com/docker/compose) - 一个部署多个容器的简单但是非常必要的工具.
    - [Docker-Compose安装使用](../../Linux/Power-Linux.md#docker-compose)
- [Portainer](https://www.portainer.io/) - Docker 一款可视化管理用具，部署简单，推荐。
    - [Docker-Portainer安装使用](../../Linux/Power-Linux.md#docker-portainer)
- [instantbox](https://github.com/instantbox/instantbox) - 脚本实现的一个 docker 虚拟化平台,快速获得开箱即用的热乎乎的虚拟机😁
- [silenceshell/docker_mirror](https://github.com/silenceshell/docker_mirror) - 查找最快的 docker 镜像
- [jesseduffield/lazydocker](https://github.com/jesseduffield/lazydocker) - 快速管理 docker
**学习教程**
- [Docker — 从入门到实践](https://yeasy.gitbook.io/docker_practice/)
---
## Docker 原理
Docker 是目前最具代表性的容器平台之一，它模糊了传统的 IaaS 和 PaaS 的边界，具有持续部署与测试、跨云平台支持等优点。在基于 Kubernetes 等容器编排工具实现的容器云环境中，通过对跨主机集群资源的调度，容器云可提供资源共享与隔离、容器编排与部署、应用支撑等功能。
Docker 容器技术以宿主机中的容器为管理单元，但各容器共用宿主机内核资源，分别通过 Linux 系统的 Namespaces 和 CGroups 机制实现资源的隔离与限制。
**相关文章**
- [Docker原理第二话--Namespace](https://blog.csdn.net/m0_37552052/article/details/78344607)
- [Docker原理第三话--CGroups](https://blog.csdn.net/m0_37552052/article/details/78480266)
**Namespaces**
为了保证容器进程之间的资源隔离，避免相互影响和干扰，Linux 内核的 Namespaces（命名空间）机制提供了 UTS、User、Mount、Network、PID、IPC 等命名空间实现了主机名、用户权限、文件系统、网络、进程号、进程间通信等六项资源隔离功能。通过调用 clone() 函数并传入相应的系统调用参数创建容器进程，可实现对应资源内容的隔离，如表所示。
| 命名空间 	  |  系统调用参数 	   |   隔离内容 	                   |  Linux内核版本 |
| - | - | - | - |
| UTS         | CLONE_NEWUTS       | 主机名和域名                    |   2.6.19 |
| IPC         | CLONE_NEWIPC       | 信号量、信息队列和共享内	       |   2.6.19 |
| PID         | CLONE_NEWPID       | 进程编号            	         |  2.6.24 |
| Network     | CLONE_NEWNET       | 网络设备、网络栈、端口等           |  2.6.29 |
| Mount       | CLONE_NEWNS        | 挂载点（文件系统）                |  2.4.19 |
| User        | CLONE_NEWUSER      | 用户和用户组                     |  3.8 |
对于某个进程而言，可通过查看 `/proc/[PID]/ns` 文件，获取该进程下的命名空间隔离情况。其中，每一项命名空间都拥有一个编号对其进行唯一标识，如果宿主机中两个进程指向的命名空间编号相同，则表示他们同在一个命名空间之下。
![](../../../assets/img/Integrated/容器/docker/1.png)
**CGroups**
CGroups（Control Groups，控制组）机制最早于 2006 年由 Google 提出，目前是 Linux 内核的一种机制，可以实现对任务组（进程组或线程组）使用的物理资源（CPU、内存、I/O等）进行限制和记录，通过多种度量标准为各个容器相对公平地分配资源，以防止资源滥用的情况。
在实际应用中，CGroups 会为每个执行任务创建一个钩子，在任务执行的过程中涉及到资源分配使用时，就会触发钩子上的函数并对相应的资源进行检测，从而对资源进行限制和优先级分配。
CGroups 提供了资源限制（Resource Limitation）、优先级分配（Prioritization）、资源统计（Accounting）、任务控制（Control）四个功能，包含 blkio、cpu、cpuacct、cpuset、devices、freezer、memory、perf_event、net_cls、net_prio、ns、hugetl b等子系统，每种子系统独立地控制一种资源，可分别实现块设备输入/输出限制、CPU 使用控制、生成 CPU 资源使用情况报告、内存使用量限制等功能。几个主要子系统的具体功能如表所示。
| 子系统 	| 功能 |
| - | - |
| blkio       | 为块设备（如磁盘、固态硬盘等物理驱动设备）设定输入/输出限制 |
| cpu         | 通过调度程序控制任务对CPU的使用 |
| cpuacct     | 生成任务对CPU资源使用情况的报告 |
| cpuset      | 为任务分配独立的CPU和内存 |
| devices     | 开启或关闭任务对设备的访问 |
| freezer     | 挂起或恢复任务 |
| memory      | 设定任务对内存的使用量限制，生成任务对内存资源使用情况的报告 |
---
## 安装与使用
- [Docker安装使用](../Linux/Power-Linux.md#docker)
---
## 容器网络管理
- [Docker](../Linux/实验/Docker.md#容器网络管理)
---
## 安全
安全部分内容来自 [[Docker容器安全性分析](https://www.freebuf.com/articles/system/221319.html)]
**相关文章**
- [Docker容器安全性分析](https://www.freebuf.com/articles/system/221319.html)
- [Docker安全第一话--镜像安全](https://blog.csdn.net/m0_37552052/article/details/78907296)
---
### 容器虚拟化安全
在传统虚拟化技术架构中，Hypervisor 虚拟机监视器是虚拟机资源的管理与调度模块。而在容器架构中，由于不含有 Hypervisor 层，因此需要依靠操作系统内核层面的相关机制对容器进行安全的资源管理。
**容器资源隔离与限制**
在资源隔离方面，与采用虚拟化技术实现操作系统内核级隔离不同，Docker 通过 Linux 内核的 Namespace 机制实现容器与宿主机之间、容器与容器之间资源的相对独立。通过为各运行容器创建自己的命名空间，保证了容器中进程的运行不会影响到其他容器或宿主机中的进程。
在资源限制方面，Docker 通过 CGroups 实现宿主机中不同容器的资源限制与审计，包括对 CPU、内存、I/O 等物理资源进行均衡化配置，防止单个容器耗尽所有资源造成其他容器或宿主机的拒绝服务，保证所有容器的正常运行。
但是，CGroups 未实现对磁盘存储资源的限制。若宿主机中的某个容器耗尽了宿主机的所有存储空间，那么宿主机中的其他容器无法再进行数据写入。Docker 提供的 --storage-opt=[] 磁盘限额仅支持 Device Mapper 文件系统，而 Linux 系统本身采用的磁盘限额机制是基于用户和文件系统的 quota 技术，难以针对 Docker 容器实现基于进程或目录的磁盘限额。因此，可考虑采用以下方法实现容器的磁盘存储限制：
- 为每个容器创建单独用户，限制每个用户的磁盘使用量；
- 选择 XFS 等支持针对目录进行磁盘使用量限制的文件系统；
- 为每个容器创建单独的虚拟文件系统，具体步骤为创建固定大小的磁盘文件，并从该磁盘文件创建虚拟文件系统，然后将该虚拟文件系统挂载到指定的容器目录。
此外，在默认情况下，容器可以使用主机上的所有内存。可以使用内存限制机制来防止一个容器消耗所有主机资源的拒绝服务攻击，具体可使用使用 -m 或 -memory 参数运行容器。
命令示例
```bash
docker run [运行参数] -memory [内存大小] [容器镜像名或ID] [命令]）
```
**容器能力限制**
Linux 内核能力表示进程所拥有的系统调用权限，决定了程序的系统调用能力。
容器的默认能力包括 CHOWN、DAC_OVERRIDE、FSETID、SETGID、SETUID、SETFCAP、NET_RAW、MKNOD、SYS_REBOOT、SYS_CHROOT、KILL、NET_BIND_SERVICE、AUDIT_WRITE 等等，具体功能如表所示。
| 容器默认能力 	    |  作用
| CHOWN	| 允许任意更改文件 UID 以及 GID |
| DAC_OVERRIDE	    | 允许忽略文件的读、写、执行访问权限检查 |
| FSETID	        | 允许文件修改后保留 setuid/setgid 标志位 |
| SETGID	        | 允许改变进程组 ID |
| SETUID	        | 允许改变进程用户 ID |
| SETFCAP	        | 允许向其他进程转移或删除能力 |
| NET_RAW	        | 允许创建 RAW 和 PACKET 套接字 |