attack could be used to drive additional trafﬁc to other mali-
1832    28th USENIX Security Symposium
USENIX Association
(a) Relay Utilization
(b) Client Performance
(c) Client Error Rate
Figure 4: Performance metrics as measured when the network is not under attack (No Attack) and when the bandwidth authorities are attacked
using different strategies (Periodic, Targeted, and Constant): (a) the distribution of aggregate Tor relay goodput per second (summed across
all relays for every second); (b) the distribution of mean download rates per client; and (c) the distribution of download failure rates per client.
cious relays, improving the ability of an adversary to conduct
attacks on anonymity, e.g., trafﬁc correlation attacks [66].
Mitigation: Since the attacks rely on stresser services, the
mitigation strategies discussed in §4 also apply here. Specif-
ically, it is possible that ISPs could render attacks against
the bandwidth authorities ineffective by ﬁltering trafﬁc en
route. For example, ISPs could discover hosts belonging
to the stresser services and ﬁlter trafﬁc originating at those
hosts, or ISPs could install custom rules to ﬁlter incoming
trafﬁc to the bandwidth authorities since they need only make
outgoing connections (in case they are not run alongside Tor
relays). However, ﬁltering attempts may be complicated by
packet spooﬁng. (Note that dropping packets on the band-
width authority is an ineffective defense since the dropped
packets already consumed bandwidth.)
Perhaps the best mitigation is to migrate to a decentral-
ized bandwidth measurement system that does not share Tor-
Flow’s security problems. For example, TorFlow’s central-
ized scanning approach can be easily detected because it uses
ﬁngerprintable trafﬁc signatures from a small set of static IP
addresses. While it may be difﬁcult to obfuscate the source,
destination, and trafﬁc signature while still providing accu-
rate results [55], a system that utilizes distributed trust may
help thwart malicious behavior. For example, a peer-based
measurement system run by existing relays would preclude
the need for centralized measurement infrastructure that is
vulnerable to DoS and could complicate scanner and mea-
surement detection [55, 78].
7 Congesting Tor Relays
In §4, §5, and §6 we evaluated the effects of using stresser
services (§3.1) to ﬂood Tor relays, Tor bridges, and Tor band-
width authorities, respectively.
In this section, we move
away from stresser services and explore the extent to which
an adversary might degrade Tor network performance by us-
ing the Tor protocol itself to congest Tor relays. The attack
strategies that we discuss in this section utilize dedicated
servers (§3.2) and modiﬁed Tor clients.
7.1 Relay Usage
All non-bridge Tor relays are publicly known and distributed
to Tor clients in network consensus documents in order to fa-
cilitate the Tor client path selection and circuit building pro-
cesses. By default, clients select 3-hop Tor paths and use
them to build circuits that are usable for 10 minutes. Clients
must use an exit relay that allows exiting the Tor network
on the desired TCP port as the last relay in their Tor cir-
cuits in order to communicate with Internet peers that are
not Tor-aware. Additionally, by default, clients use guard re-
lays as their entry into the Tor network, and guard or middle
relays (i.e., non-guard, non-exit relays) in the middle posi-
tion of their circuits. As discussed in §6, each relay is as-
signed a weight by the directory authorities corresponding
to its performance relative to all other relays as measured
by TorFlow [72]. Clients use these weights during path se-
lection to bias their choice of relays toward those providing
better performance.
7.2 Abusing Relay Bandwidth
The Tor protocol contains features that offer protocol ﬂexi-
bility, but also allow for abuse. Although exits are required to
be used in the last position of circuits exiting Tor, the Tor pro-
tocol technically allows any relay to be used in any non-exit
position. Additionally, the Tor protocol technically allows
circuits containing up to 8 relays. To utilize these features, a
client may select its own custom path of relays and build cir-
cuits through them either by modifying their Tor client code
directly, or by interacting with Tor using the Tor control in-
terface and protocol. Note that building custom circuits is al-
ready supported by existing Tor control clients like stem [8].
7.2.1 Attack Strategies
Given the above features, an adversary may conduct a con-
certed bandwidth consumption DoS attack by building cus-
tom circuits and downloading large ﬁles through them.
Long Paths: The most basic form of our Tor bandwidth DoS
attack makes use of the ability to create 8-hop Tor circuits.
USENIX Association
28th USENIX Security Symposium    1833
6080100120140160180AggregateTorRelayGoodput(MiB/s)0.00.20.40.60.81.0CumulativeFractionNoAttackPeriodicTargetedConstant100101102MeanDownloadRatePerClient(KiB/s)0.00.20.40.60.81.0CumulativeFractionNoAttackPeriodicTargetedConstant020406080100DownloadFailureRatePerClient(%)0.00.20.40.60.81.0CumulativeFractionNoAttackPeriodicTargetedConstantFor every byte of data downloaded by a client through such
a long path, relays in the Tor network will download and
upload that byte 8 times in total. This ampliﬁcation works
signiﬁcantly in favor of the adversary.
Tunneling: Tor previously allowed inﬁnite-length circuits
until it was shown that long paths (e.g., 24 hops) could be
used to congest Tor relays and deanonymize clients [31]. Al-
though the Tor protocol now restricts circuits to 8 relays in
length [27, §5.6], paths of unrestricted length are still tech-
nically possible by using multiple Tor clients and tunneling
each client’s TCP onion connection to its entry relay through
another client’s circuit4 [51].
Stop Reading: In order to decrease the cost of downloading
large ﬁles, the adversary may use a Stop Reading strategy.
Using this strategy, the adversary ﬁrst creates a new TCP
onion connection to the ﬁrst-hop relay in its chosen long
path, even if a connection to that relay already exists. The
adversary then builds an attack circuit using its chosen path
and waits for it to complete successfully, making sure to as-
sign the circuit to the new TCP connection. Once the circuit
is built, the adversary sends a request for a large data blob
from some public server (e.g., the Internet Archive), mea-
sures the time to download the ﬁrst 25 KiB, and then instructs
Tor to stop reading from the circuit’s TCP connection to the
entry relay (immediately after receiving 25 KiB). Although
the client stopped reading, it can still write: the adversary
uses the measured time to download the ﬁrst 25 KiB to esti-
mate the frequency with which it should send Tor circuit and
stream SENDME ﬂow control cells5 which instruct the exit re-
lay to continue to send data toward the client. (Estimating the
circuit throughput rate is important, because sending more
SENDME cells than is expected by the exit will cause the exit
to abort the circuit.)
A stop reading strategy was ﬁrst described and used as part
of the Sniper Attack [51], but we are the ﬁrst to observe that
each attack circuit should use a new and unique TCP connec-
tion in order to limit interference with other circuits built in
parallel. This requires minor modiﬁcations to the Tor client
code since Tor by default multiplexes circuits over existing
TCP connections. We show in §7.3 that our bandwidth DoS
attack scales to thousands of circuits using this approach.
7.2.2 Attack Targets
Single Relay: An adversary may use an 8-hop long path
to conduct a congestion attack on a target victim relay by
including the victim in the same circuit multiple times. Since
an honest relay will not extend a circuit to the same relay
that extended to it, the victim v must be placed in circuit
positions such that two distinct honest relays h1 and h2 are
placed in subsequent positions before repeating the victim
4Tor will tunnel TCP onion connections through a proxy (e.g., another
Tor client) when using the Socks4Proxy or Socks5Proxy torrc options.
5A stream SENDME cell is sent for every 50 received cells (25 KiB) and
a circuit SENDME for every 100 received cells (50 KiB).
(i.e., v(cid:33)h1(cid:33)h2(cid:33)v, etc.). Therefore, a victim may appear
in the same circuit a maximum of 3 times (either in positions
1, 4, and 7, or 2, 5, and 8).
Relay Subgroups: An adversary may also target speciﬁc
subgroups of relays that represent particularly attractive tar-
gets. Such subgroups may include the group of all exit relays
(since their resources are the most scarce), the group of all
publicly known bridges (we explored the impact of such an
attack in §5), hidden service directories, and the group of 9
directory authorities (which also serve as relays).
All Relays: An adversary may also attempt to congest the
entire Tor network with the goal of degrading performance
to the extent that Tor becomes unusable to a majority of its
user base, which would signiﬁcantly reduce Tor’s security
in addition to its performance [25]. In order to congest all
relays, the adversary makes a weighted selection of relays
following the weights published in the network consensus.
In other words, the adversary uses the same path selection
policy as honest clients do by default. This will ensure that
the adversary will choose and congest relays with the same
distribution that clients attempt to use them: the DoS attack
will cause more congestion on relays that are chosen more
often by clients, and should therefore impact more users.
7.2.3 Attack Strength
The strength of our attack can be described in terms of the
number of long path circuits φ that the adversary builds in
parallel. Each circuit should use at least 2 parallel streams
(i.e., downloads) in order to fully utilize the circuit ﬂow con-
trol mechanism (the circuit window is 1,000 cells, twice that
of the stream window). Whenever circuits close or down-
loads ﬁnish (complete or time out), circuits are replaced with
new ones in order to maintain the attack strength over time.
7.3 Evaluation
As in §6.4, we use Shadow [47] to safely measure the effects
of our DoS attacks in a private Tor network. All experiments
in this section use Shadow v1.13.0 and Tor v0.3.1.10.
Network Setup: We use the same tools and methods as de-
scribed in §6.4 to generate a Tor network containing 634 re-
lays (10% of the size and capacity of the public network),
15,000 clients (14,259 web clients, 441 bulk clients, and 300
benchmark clients), and 2,000 servers. Node behaviors are
also as described in §6.4.
We implemented our DoS attacks in a C program con-
taining 3,265 lines of code (LoC) which we compiled as a
Shadow plugin. Our attacks utilize a Tor v0.3.1.10 client
that we modiﬁed (409 LoC) to support creating new TCP
connections for attack circuits as well as commands to stop
reading and for sending SENDME cells.
Parameter Settings: Throughout our experiments, we ex-
plore the effects of the Long Path strategy across attack
strengths (number of circuits φ) on performance. We par-
allelize our attack by running φ /1,000 identical processes
on new attack hosts (i.e., 1,000 circuits per host), each of
1834    28th USENIX Security Symposium
USENIX Association
(a) Attacker Throughput
(b) Relay Goodput
(c) Client Performance
Figure 5: Performance metrics as measured throughout our network-wide DoS attack on Tor relays: (a) the distribution of attacker throughput
rates; (b) the distribution of aggregate Tor relay goodput rates (summed over all relays for each second); and (c) the distribution of benchmark
client download times to ﬁrst byte (TTFB) and last byte (TTFB) for ﬁles of sizes 50 KiB, 1 MiB, and 5 MiB (the box shows the interquartile
range, the (cid:78) shows the mean, and the lower and upper whiskers extend to the minimum and the 99th percentile values, respectively).
which is conﬁgured with a 1 Gbit/s network link to ensure
that we could measure the full bandwidth cost of the attack.
We attach 2 streams that each request 10 MiB of data to each
8-hop attack circuit whose path is chosen depending on the
target (we explore a single relay and all relays as targets). We
set each attack circuit to time out if any of its streams either
have not completed within 5 minutes, or have not received a
byte in the most recent 60 seconds. Finally, we run experi-
ments with and without the Stop Reading strategy in order to
understand the cost and impact of DoS with and without it.
(We did not evaluate the Tunneling strategy or a strategy that
targets Relay Subgroups.)
Single Relay Attack: We evaluated the Long Path strategy
in a Single Relay attack against the most highly weighted
middle relay in our network. We evaluated attack strengths
of 100, 500, and 1,000 circuits.
In all cases, the attacker
required less than 2.6 MiB/s of throughput to conduct the
attack. The victim relay’s throughput increased from 978
KiB/s with no attack to 3.8 MiB/s with 100 attack circuits
and 5 MiB/s with both 500 and 1,000 attack circuits (in the
medians). Interestingly, 500 circuits was enough to consume
all of the victim’s 5 MiB/s capacity. In the medians, the time
to download 1 MiB through the victim increased from 3.3
seconds with no attack to 28 seconds with 1,000 circuits,
while the download failure rate increased from 0% with no
attack to 63% with 1,000 attack circuits. Our results indicate
that the attack has a clear effect on both relay throughput and
client performance on a small scale.
All Relays Attack: We evaluated the Long Path strategy in
an All Relays attack using φ = 1k, 5k, 10k, and 20k attack
circuits. The performance measured during the attacks and
compared to a no attack baseline experiment is shown in Fig-
ure 5. Figure 5(a) shows the cumulative distribution of the
total attacker throughput used during each attack. Intuitively,
the throughput used by the adversary increases with the num-
ber of attack circuits: from a median of 61 MiB/s in a φ=1k
circuit attack to a median of 197 MiB/s in a φ=20k circuit
attack. Note that the increase in attacker throughput is not
linear in φ, indicating that we may be reaching relay band-
width resource limits. Figure 5(b) supports this claim, show-
ing the distribution over each second of Tor network goodput
(summed over all relays). In the medians, aggregate relay
goodput increases from 802 MiB/s with no attack to 1,297
MiB/s for φ=1k (an increase of 495 MiB/s) and 2,120 MiB/s
for φ=20k (an increase of 1,318 MiB/s). Interestingly, we
can see from these results that the effect of φ=10k circuits is
much greater than the effect of doubling the attack strength to
φ=20k circuits, suggesting diminishing returns. Finally, the
effect of our attack on client performance is shown in Fig-
ure 5(c) across a range of download time metrics. Generally,
the time to complete downloads of various sizes increases
signiﬁcantly with the attack strength (e.g., TTFB increases
by 138% and TTLB increases by 120% in the medians across
all downloads for φ=20k), and the variance in performance
also increases as attack circuits are added to the network.
Figure 6 shows the effect of the Stop Reading strategy on
performance. Compared to the regular Long Path strategy
in the φ=20k attack, Figure 6(a) shows that the Stop Read-
ing strategy consumed only 36 MiB/s of attacker bandwidth
in the median while Figure 6(b) shows that the attack was
still able to consume 1,755 MiB/s of total relay bandwidth
in the median (an increase of 953 MiB/s over no attack).
Figure 6(c) shows that the effect on client performance is
also slightly less pronounced (TTFB increases by 48% and
TTLB increases by 47% in the medians across all down-
loads), which is to be expected given that relays are less
congested. We expect that we could further increase conges-
tion by scaling up the Stop Reading attack at relatively little
bandwidth cost to the attacker. A summary of our results in
Table 4 shows that the Stop Reading strategy achieved the
highest bandwidth ampliﬁcation factor of 26 primarily due
to the reduction in attacker bandwidth usage.
USENIX Association
28th USENIX Security Symposium    1835
050100150200AttackerThroughput(MiB/s)0.00.20.40.60.81.0CumulativeFraction1kCirc.5kCirc.10kCirc.20kCirc.0.81.01.21.41.61.82.0AggregateTorRelayGoodput(GiB/s)0.00.20.40.60.81.0CumulativeFractionNoAttack1kCirc.5kCirc.10kCirc.20kCirc.NoAttack1kCirc.5kCirc.10kCirc.20kCirc.TTFBAll0246810DownloadTime(s)NoAttack1kCirc.5kCirc.10kCirc.20kCirc.TTLB50KiB051015NoAttack1kCirc.5kCirc.10kCirc.20kCirc.TTLB1MiB01020304050NoAttack1kCirc.5kCirc.10kCirc.20kCirc.TTLB5MiB0204060(a) Attacker Throughput
(b) Relay Goodput
(c) Client Performance
Figure 6: The effects of the Stop Reading attack on the performance metrics as measured throughout our network-wide 20,000 circuit DoS
attacks on Tor relays: (a) the distribution of attacker throughput rates; (b) the distribution of aggregate Tor relay goodput rates (summed over
all relays for each second); and (c) the distribution of benchmark client download times to ﬁrst byte (TTFB) and last byte (TTFB) for ﬁles of
sizes 50 KiB, 1 MiB, and 5 MiB (the box shows the interquartile range, the (cid:78) shows the mean, and the lower and upper whiskers extend to
the minimum and the 99th percentile values, respectively).
Table 4: Summary of the total increase in relay bandwidth usage
our attack achieved with the given attacker bandwidth usage (all in
MiB/s) and the resulting bandwidth ampliﬁcation factors.
φ=20k
1,318
197
Relay Bandwidth
Attacker Bandwidth
Ampliﬁcation Factor
∗ Stop is a φ=20k attack using the Stop Reading strategy.
φ=10k
1,221
177
φ=5k
1,035
143
7.2
φ=1k
495