### 4. Mitigation Strategies for Bandwidth Authority Attacks

Attacks on bandwidth authorities can be used to drive additional traffic to malicious relays, thereby enhancing an adversary's ability to conduct anonymity attacks, such as traffic correlation attacks [66]. 

#### 4.1. Filtering Traffic
Since these attacks rely on stresser services, the mitigation strategies discussed in §4 also apply here. Specifically, ISPs could mitigate attacks against the bandwidth authorities by filtering traffic en route. For example, ISPs could:
- Identify and filter traffic originating from hosts belonging to stresser services.
- Install custom rules to filter incoming traffic to the bandwidth authorities, as they only need to make outgoing connections (unless they are run alongside Tor relays).

However, filtering attempts may be complicated by packet spoofing. Dropping packets at the bandwidth authority is ineffective because the dropped packets have already consumed bandwidth.

#### 4.2. Decentralized Bandwidth Measurement
A more robust mitigation strategy is to migrate to a decentralized bandwidth measurement system that does not share TorFlow’s security issues. For instance, TorFlow’s centralized scanning approach is easily detectable due to its use of fingerprintable traffic signatures from a small set of static IP addresses. While it may be challenging to obfuscate the source, destination, and traffic signature while still providing accurate results [55], a system that utilizes distributed trust can help thwart malicious behavior. A peer-based measurement system run by existing relays would eliminate the need for centralized infrastructure, which is vulnerable to DoS and complicates scanner and measurement detection [55, 78].

### 5. Congesting Tor Relays Using the Tor Protocol

In previous sections, we evaluated the effects of using stresser services to flood Tor relays, bridges, and bandwidth authorities. In this section, we explore how an adversary might degrade Tor network performance by using the Tor protocol itself to congest Tor relays. The attack strategies discussed here utilize dedicated servers (§3.2) and modified Tor clients.

#### 5.1. Relay Usage
All non-bridge Tor relays are publicly known and distributed to Tor clients via network consensus documents to facilitate path selection and circuit building. By default, clients select 3-hop Tor paths, which are usable for 10 minutes. Clients must use an exit relay that allows exiting the Tor network on the desired TCP port as the last relay in their circuits. Additionally, clients use guard relays as entry points and guard or middle relays in the middle positions. Each relay is assigned a weight by the directory authorities based on its performance relative to other relays, as measured by TorFlow [72]. Clients use these weights to bias their choice toward better-performing relays.

#### 5.2. Abusing Relay Bandwidth
The Tor protocol offers flexibility but also potential for abuse. Although exits are required for the last position in circuits, any relay can technically be used in any non-exit position. Additionally, the Tor protocol allows circuits containing up to 8 relays. Clients can build custom circuits by modifying their Tor client code or using the Tor control interface, as supported by tools like stem [8].

##### 5.2.1. Attack Strategies
An adversary can conduct a concerted bandwidth consumption DoS attack by building custom circuits and downloading large files through them.

- **Long Paths**: The most basic form of the attack involves creating 8-hop Tor circuits. For every byte downloaded by a client, relays in the Tor network will download and upload that byte 8 times, significantly amplifying the attack.
  
- **Tunneling**: Previously, Tor allowed infinite-length circuits, but now restricts them to 8 relays. However, paths of unrestricted length are still possible by using multiple Tor clients and tunneling each client’s TCP onion connection through another client’s circuit [51].
  
- **Stop Reading**: To decrease the cost of downloading large files, the adversary can use a Stop Reading strategy. This involves creating a new TCP onion connection to the first-hop relay, building an attack circuit, and then stopping reading after receiving a small amount of data (e.g., 25 KiB). The adversary then sends SENDME flow control cells to keep the exit relay sending data, even though the client has stopped reading. This strategy was first described in the Sniper Attack [51], but we modify it to use new and unique TCP connections for each circuit to limit interference with other circuits built in parallel.

##### 5.2.2. Attack Targets
- **Single Relay**: An adversary can target a single victim relay by including it multiple times in an 8-hop circuit. The victim can appear a maximum of three times in the same circuit.
  
- **Relay Subgroups**: Specific subgroups, such as all exit relays, publicly known bridges, hidden service directories, and the 9 directory authorities, can be targeted.
  
- **All Relays**: An adversary can attempt to congest the entire Tor network by making a weighted selection of relays following the weights published in the network consensus. This ensures that the attack impacts relays in the same distribution that clients use them, thus affecting more users.

##### 5.2.3. Attack Strength
The strength of the attack is determined by the number of long-path circuits φ built in parallel. Each circuit should use at least 2 parallel streams to fully utilize the circuit flow control mechanism. Circuits are replaced with new ones to maintain the attack strength over time.

### 6. Evaluation

We use Shadow [47] to measure the effects of our DoS attacks in a private Tor network. Our experiments use Shadow v1.13.0 and Tor v0.3.1.10.

#### 6.1. Network Setup
We generate a Tor network with 634 relays, 15,000 clients, and 2,000 servers. Node behaviors are as described in §6.4. We implemented our DoS attacks in a C program compiled as a Shadow plugin, modifying a Tor v0.3.1.10 client to support new TCP connections and commands for the Stop Reading strategy.

#### 6.2. Parameter Settings
We explore the effects of the Long Path strategy across different attack strengths (number of circuits φ). Each attack host runs φ /1,000 identical processes, each configured with a 1 Gbit/s network link. We attach 2 streams requesting 10 MiB of data to each 8-hop attack circuit, with a timeout of 5 minutes or 60 seconds without receiving a byte. Experiments are conducted with and without the Stop Reading strategy.

#### 6.3. Results
- **Single Relay Attack**: We evaluated the Long Path strategy against the most highly weighted middle relay. With 1,000 attack circuits, the victim relay’s throughput increased from 978 KiB/s to 5 MiB/s, and the download failure rate increased to 63%.
  
- **All Relays Attack**: We evaluated the Long Path strategy with φ = 1k, 5k, 10k, and 20k attack circuits. The attacker throughput increased from 61 MiB/s (φ=1k) to 197 MiB/s (φ=20k), and the aggregate relay goodput increased from 802 MiB/s (no attack) to 2,120 MiB/s (φ=20k). The Stop Reading strategy achieved the highest bandwidth amplification factor of 26, primarily due to reduced attacker bandwidth usage.

### Figures and Tables
- **Figure 4**: Performance metrics under different attack conditions.
- **Figure 5**: Performance metrics during network-wide DoS attacks.
- **Figure 6**: Effects of the Stop Reading strategy on performance.
- **Table 4**: Summary of total increase in relay bandwidth usage and amplification factors.

This structured and detailed approach provides a clear and professional overview of the attack strategies, targets, and evaluation results.