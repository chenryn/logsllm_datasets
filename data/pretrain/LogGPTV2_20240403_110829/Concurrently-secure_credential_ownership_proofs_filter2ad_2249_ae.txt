cop-imp-ca
IBE-COP,A (k) .
Denoting the cop-imp-ca adversary achieving the highest
advantage by A∗ and the corresponding owe-id-cca adver-
Protocol:
[GQ.P (skGQ) ↔ GQ.V] (pkGQ)
StP ← (skGQ, pkGQ)
StV ← pkGQ
GQ.P (ε, StP)
y $← Z∗
N , Y N← ye
StP ← (skGQ, y)
(Y, StP) ←|
GQ.P (c, StP)
z N← y · xc
z ←|
Y−−−(cid:16)
c(cid:17)−−−
z−−−(cid:16)
GQ.V (Y, StV)
c $← {0, 1}‘(k)
StV ← (pkGQ, Y, c)
(c, StV) ←|
d ←(cid:16)
ze N= Y · X c(cid:17)
GQ.V (z, StV)
d ←|
B. DEFINITION OF SECURITY AGAINST
IMPERSONATION
The widely accepted formal security notion for identiﬁca-
tion schemes is security against impersonation under pas-
sive, active, and concurrent attacks. We rephrase the deﬁ-
nition of [5] for security under concurrent attacks here.
Deﬁnition 5. For an adversary AID and an identiﬁcation
scheme ID, the following experiment is deﬁned:
Exptimp-ca
ID
(AID, k)
(pkID, skID) ← ID.K (k)
(StAID ) ← AID.ˆV
Interact(·,·)
AID.ˆP (StAID ) ↔ ID.V
b ←h
i
(k, pk)
(pk)
in which
b ←|
Interact (sid, Min)
Then Stsid ← (pkID, skID)
If sid new
(Mout, Stsid) ← P (Min, Stsid)
Mout ←|
The advantage of AID in a imp-ca attack on ID and the imp-
ca insecurity of ID are respectively deﬁned as:
Adv
imp-ca
ID,AID (k)
and
Insec
imp-ca
ID
(k)
4
= Pr(cid:2)Expt
(cid:2)Adv
4
= max
imp-ca
ID,AID
(k) = 1(cid:3)
ID,AID (k)(cid:3) .
imp-ca
AID∈Poly(k)
ID is said to be imp-ca-secure if Insec
in k.
imp-ca
ID
(k) is negligible
C. THE RSA-FDH SIGNATURE SCHEME
The scheme assumes oracle access to a full-domain hash
function H : {0, 1}∗ → Z∗
N , where N = pq is an RSA mod-
ulus.
RSA-FDH.KeyGen (k)
(N, e, d) ← GenRSA (k)
pk ← (N, e)
sk ← (N, d)
(pk, sk) ←|
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
RSA-FDH.Sign (sk, m)
σ N← [H(m)]d
σ ←|
170
2. On the other hand, if X is embedded in the hash of
m (i.e. H(m) = X · re mod N ), AGQ uses its ability
to request interaction with GQ.P to simulate the in-
teraction with an honest RSA-COP prover, as follows.
If (m, sid) is new (i.e. A.ˆV is asking for the clone to
begin the interaction), AGQ issues an interaction query
(ε, m||sid) to its GQ interaction oracle and receives a
Y as response.
It simply outputs Y as the response
to A.ˆV’s query. On the other hand, if (m, sid) is not
new (i.e. A.ˆV is asking for the clone to respond to a
challenge c = Min), AGQ issues an interaction query
(Min, m||sid) to its GQ interaction oracle and receives
a z as response, such that
ze = Y · X c mod N .
AGQ then outputs ζ ← rc
i · z mod N as the response to
A.ˆV’s query. Using the above equation and considering
the fact that H(m) = X · re mod N we will have:
ζ e = rce · ze = rce · Y · X c
= Y · (X · re)c = Y · [H(m)]c mod N ,
which means that ζ is the convincing response with
respect to the commitment Y given previously to A.ˆV
by the clone with ID (m, sid) and the challenge c = Min
received from A.ˆV. This, in turn means that AGQ has
simulated the interaction for A.ˆV correctly.
AGQ continues to simulate the responses to the signing and
interaction requests of A.ˆV as above until at some point A.ˆV
halts and outputs a pair ( ˙m, StA). Similar to what Coron
had in [12], here AGQ will be able to impersonate the GQ
prover in the next phase if X is embedded in the hash value
of
˙m and fails otherwise.
In the second phase, AGQ must play the role of a GQ prover
and convince an honest GQ veriﬁer that it knows the GQ se-
cret key. To achieve this goal, AGQ uses A.ˆP as a subroutine.
AGQ runs A.ˆP on input StA, simulating A.ˆP’s signing and
interaction oracle queries as in phase one. At some point,
A.ˆP outputs a commitment Y . AGQ simply sends Y as the
ﬁrst message to the honest veriﬁer. The honest veriﬁer then
chooses a challenge c and sends it back. AGQ relays this c as
challenge to A.ˆP. Then A.ˆP will output a ζ such that:
ζ e = Y · [H( ˙m)]c mod N .
AGQ calculates z ← ζ/ ˙rc mod N and sends it to the honest
veriﬁer as the ﬁnal message. Considering that X is embed-
ded in the hash value of ˙m (i.e. H( ˙m) = X · ˙re mod N ), We
have:
ze =
=
Y · [H( ˙m)]c
ζ e
˙rce =
˙rce
Y · (X c · ˙rce)
˙rce
= Y · X c mod N ,
which means that the honest veriﬁer will be convinced with
the response z. Hence, whenever A.ˆV selects an ˙m, in hash
of which X is embedded, AGQ will be able to impersonate.
It can be easily seen that if A is a poly-time algorithm,
then so is AGQ. In fact, AGQ’s running time is equal to that
of A plus at most an exponentiation for each hash, sign, and
interaction query. Moreover, a similar analysis to [12] for
calculating the success probability of the constructed adver-
sary can be carried out as follows. AGQ succeeds if A never
asks a sign oracle query on a message in the hash of which X
sary constructed from A∗ by A∗
IBE we get
Insec
cop-imp-ca
IBE-COP
(k) = Adv
cop-imp-ca
IBE-COP,A∗ (k)
owe-id-cca
IBE,A∗
(k)
owe-id-cca
IBE
IBE
(k) ,
= Adv
≤ Insec
which completes the proof.
E. PROOF OF THEOREM 3
Proof. We prove that if a successful cop-imp-ca ad-
versary A for RSA-COP exists, then, in the random oracle
model, a successful imp-ca (in the sense of [5]) adversary
AGQ for GQ can be constructed. Description of such a con-
struction follows.
Our assumption, i.e. the existence of a successful cop-
imp-ca adversary A for RSA-COP, means that there exists a
pair of algorithms A = A.(cid:0)ˆV, ˆP(cid:1), which is able to carry out
a successful cop-imp-ca attack on RSA-COP protocol. AGQ
uses these algorithms to mount an imp-ca attack on GQ.
Besides, working in the random oracle model implies that
AGQ must also simulate hash oracle query responses.
In the ﬁrst phase of the imp-ca attack, AGQ is given pkGQ
and can request to interact concurrently with diﬀerent clones
of honest prover GQ.P.
In the second phase, AGQ is sup-
posed to play the role of a prover and convince an honest
veriﬁerGQ.V in an interaction.
To answer new hash oracle queries, AGQ follows the well-
known Coron’s method [12], i.e. to answer the ith new query
mi, it picks a random value ri from Z∗
N and answers with
hash value re
i mod N with probability p0 and with hash
i mod N with probability (1 − p0). In the former
value X · re
case we say X is not embedded in the hash of mi and in the
latter case we say X is embedded in the hash of mi. Note
that p0 is a ﬁxed probability which will be determined later,
X is a value obtained from parsing pkGQ, and all repeated
queries will be answered the same as was answered before.
In the ﬁrst phase of the attack, AGQ must play the role of
a cheating veriﬁer AGQ.ˆV to extract needed information out
of concurrent interactions with clones of honest GQ prover.
AGQ does this using the cheating veriﬁer A.ˆV as a subrou-
tine. Given the public key pkGQ = (N, e, X), AGQ runs A.ˆV
on input pk = (N, e). A.ˆV will then adaptively make two
kinds of requests: requests to have RSA-FDH signature on
an arbitrary message (Sign oracle queries) and requests to
interact concurrently with clones of RSA-COP prover. We
describe bellow how to properly respond to these requests
(Interact oracle queries).
On a Sign oracle query mi, AGQ again follows Coron’s
method, i.e. is only able to answer the queries, in the hash
of which X is not embedded, with simulated signature ri
(because σ = [H(mi)]d = (re
i )d = ri mod N ) . Otherwise,
i.e. if X is embedded in the hash of mi, AGQ will not be able
to answer the query and fails as a result.
On an Interact oracle query (m, sid, Min), AGQ simulates
the interaction as follows. First, it queries the hash oracle
on m, and then, distinguishes the following two cases:
1. If X is not embedded in the hash of m (i.e. H(m) = re
mod N ), AGQ has an easy work ahead. The signature
on m is r (because σ = [H(m)]d = (re)d = r mod N ).
So AGQ can play the role of a prover in possession of the
signature by just running the algorithm RSA-COP.P.
171
is embedded, chooses the target message ˙m such that in the
hash of it X is embedded, and succeeds in impersonating a
COP prover. The ﬁrst condition happens with probability at
least pqs
0 , where qs is the total number of issued credentials
(which is in turn bigger that the total number of signing or-
acle queries). The second condition is met with probability
at least (1 − p0), which in turn leads us to the equation:
cop-imp-ca
RSA-COP,A (k) .
0 · (1 − p0) · Adv
GQ,AGQ (k) ≥ pqs
imp-ca
Adv
The optimum p0 which maximizes the success probability of
AGQ is then calculated as
which in turn yields the following equation:
0 = 1 − 1
∗
p
,
(cid:18)
qs + 1
(cid:19)qs+1 · Adv
(cid:17)qs+1 = O (qs) ,
qs + 1
·
1 − 1
Adv
imp-ca
GQ,AGQ (k) ≥ 1
qs
(cid:16)
Considering the fact that
qs
1 − 1
qs+1
cop-imp-ca
RSA-COP,A (k) .
we will obtain:
Adv
cop-imp-ca
RSA-COP,A (k) ≤ O (qs) · Adv
imp-ca
GQ,AGQ (k) .
We have shown that for any COP adversary A, a GQ ad-
versary AGQ exists, such that the above equation holds. De-
noting the COP adversary with the highest advantage by A∗
and the corresponding constructed GQ adversary by A∗
GQ we
get
Insec
cop-imp-ca
RSA-COP
(k) = Adv
cop-imp-ca
RSA-COP,A∗ (k)
imp-ca
GQ,A∗
GQ
imp-ca
GQ
≤ O (qs) · Adv
≤ O (qs) · Insec
(k)
which proves the claimed bound.
(k) ,
172