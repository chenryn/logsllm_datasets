# K-Nearest Neighbour Search for PostgreSQL

**Presenters: Oleg Bartunov, Teodor Sigaev**  
**Affiliation: Moscow University**  
**Event: PGCon-2010, Ottawa, May 20-21, 2010**

## Introduction to K-Nearest Neighbour (KNN) Search

### Problem Definition
K-Nearest Neighbour (KNN) search is a fundamental problem in many applications. Some examples include:
- **Geospatial Queries:** Finding interesting points near the Royal Oak pub in Ottawa.
- **Temporal Queries:** Identifying the closest events to May 20, 2009, in Ottawa.
- **Image Similarity:** Using feature extraction and Hamming distance to find similar images.
- **Classification:** Applying majority voting to classify data.
- **High-Dimensional Data:** Handling GIS and scientific data with high-dimensional attributes.

### Existing Solutions and Their Limitations
#### Example Query
```sql
knn=# SELECT id, date, event FROM events ORDER BY date - '1957-10-04'::date ASC LIMIT 10;
```
**Results:**
| id   | date       | event                                                                 |
|------|------------|-----------------------------------------------------------------------|
| 58137| 1957-10-04 | U.S.S.R. launches Sputnik I, 1st artificial Earth satellite           |
| 58136| 1957-10-04 | "Leave It to Beaver," debuts on CBS                                   |
| 117062| 1957-10-04 | Gregory T Linteris, Demarest, New Jersey, astronaut, sk: STS 83       |
| 117061| 1957-10-04 | Christina Smith, born in Miami, Florida, playmate, Mar, 1978          |
| 102670| 1957-10-05 | Larry Saumell, jockey                                                  |
| 31456| 1957-10-03 | Willy Brandt elected mayor of West Berlin                             |
| 58291| 1957-10-05 | 12th Ryder Cup: Britain-Ireland, 7 -4 at Lindrick GC, England         |
| 58290| 1957-10-05 | 11th NHL All-Star Game: All-Stars beat Montreal 5-3 at Montreal      |
| 58292| 1957-10-05 | Yugoslav dissident Milovan Djilos sentenced to 7 years                |
| 102669| 1957-10-05 | Jeanne Evert, tennis player, Chris' sister                            |

**Execution Time:** 115.548 ms

**Limitations:**
- **Full Table Scan:** The query performs a full table scan, which is inefficient.
- **Sorting:** The entire table is sorted, which is time-consuming.
- **Index Ineffectiveness:** A classic B-tree index on the `date` column does not help in this scenario.

### Traditional Speedup Techniques
- **Range Search:** Constrain the data space using a range search, which can utilize an index.
- **Incremental Search:** Perform multiple queries, but this requires knowing the neighborhood size in advance, which can be challenging (e.g., 1 km is suitable for Paris but too small for Siberia).
- **Density Map:** Maintain a density map to handle varying neighborhood sizes.

### Desired Features for KNN Search
- **Avoid Full Table Scan:** Read only the necessary tuples.
- **Index Support:** Use an index to speed up the search.
- **Avoid Sorting:** Retrieve tuples in the desired order without sorting.
- **Special Index Traversal Strategy:** Implement a strategy to traverse the index efficiently.
- **Tuple Visibility:** Support visibility of tuples and resume index traversal as needed.
- **Support Multiple Data Types:** Modify the GiST (Generalized Search Tree) to support various data types.

## R-Tree Index for KNN Search

### Visualization of R-Tree Index
- **R-Tree Structure:** An R-Tree is a spatial indexing method that organizes data into a hierarchical structure.
- **Visualization:** The R-Tree index can be visualized using tools like Gevel, as shown in the example of Greece's geographic data.

### R-Tree Index Example
```sql
SELECT * FROM events WHERE events.coord <@> '(0.0, 0.0)'::point LIMIT k;
```
- **Distance Operator:** The `<@>` operator calculates the distance between the point and the coordinate, and it should be provided for the data type.

### Modifying GiST for KNN Search
- **GiST Overview:** GiST is a Generalized Search Tree that provides an API to build custom disk-based search trees, supports recovery and concurrency, and is widely used in GIS and text search.
- **Current Traverse Strategy:** The current strategy is Depth-First Search (DFS), which is not optimal for KNN search.
- **Best First Search (BFS):** Add a Best First Search strategy to GiST for KNN search while retaining API compatibility.

### KNN Search Syntax
- **Query Example:**
  ```sql
  SELECT … FROM … WHERE … ORDER BY p <@> '(0.0, 0.0)'::point LIMIT k;
  ```
  - **Distance Operator:** The `<@>` operator should be defined for the data type.

### GiST Interface Changes
- **Consistent Method:**
  ```c
  double consistent(Datum key, Datum query, StrategyNumber strategy, Oid subtype, bool *recheck);
  ```
  - **Return Value:** The method returns a double value representing the distance for the `ORDER BY` clause.
  - **Wrapper for Old Method:** If the old method returns `false`, the new method returns `-1`; if `true`, it returns `0`.

### Consistent Interface
- **Uniform Treatment:** GiST treats `WHERE` and `ORDER BY` clauses uniformly.
- **Data Type Awareness:** The `consistent` method knows the data types of the query and `WHERE/ORDER BY` clauses.
- **Recheck Handling:** The `consistent` method should not return `recheck = true` for `ORDER BY` clauses.

### Handling NULL Values
- **Recognition of ORDER BY Operators:** Differentiate between `WHERE` and `ORDER BY` operators, especially for handling NULL values.
- **Options:**
  - **Option 1:** Add a flag to `pg_amop` to indicate if the operator is used in the `ORDER BY` clause.
  - **Option 2:** If the operator returns a `DOUBLE`, it is assumed to be a KNN search.

### GiST + Depth First Search (DFS)
- **Algorithm:**
  1. Push the root block number into the stack.
  2. While the stack is not empty:
     - Pop the block number.
     - If it is a leaf, return all matched entries.
     - Otherwise, push all matched and read page block numbers into the stack.

### KNN Search: GiST + Priority Queue
- **Algorithm:**
  1. Push the root block number and distance `0` into the priority queue.
  2. While the queue is not empty:
     - Pop the (pointer, distance) pair.
     - If the pointer is to the heap, return the pointer.
     - Otherwise, read the index page and push matched pairs into the queue.

### Technical Details
- **Priority Queue Implementation:** The priority queue is implemented as a Red-Black tree (RB-tree).
- **Node Structure:** Each node in the RB-tree contains a list of pointers to internal pages and heap pointers.

### Conclusion
By modifying the GiST interface and implementing a Best First Search strategy, we can efficiently perform K-Nearest Neighbour searches in PostgreSQL, avoiding full table scans and unnecessary sorting. This approach supports various data types and provides a flexible and efficient solution for KNN queries.