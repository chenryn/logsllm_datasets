# Filter与Listener
---
在一些登录点或者是登录后才能使用的一些功能点里面，需要该用户登录后才去才能去访问或使用这些功能。但我们如果每个 servlet 都去进行一个判断是否登录，这些会有很多重复代码，而且效率也比较低。那么我们可以把这些代码都放到 Filter 过滤器里面去进行编写。
web 里面有三大组件：servlet、Filter、Listener。
---
## Filter 过滤器
filter 作用：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。
在一个比较复杂的 Web 应用程序中，通常都有很多 URL 映射，对应的，也会有多个 Servlet 来处理 URL。
我们考察这样一个论坛应用程序：
```
            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
               /             ┌──────────────┐
            │ ┌─────────────>│ IndexServlet │ │
              │              └──────────────┘
            │ │/signin       ┌──────────────┐ │
              ├─────────────>│SignInServlet │
            │ │              └──────────────┘ │
              │/signout      ┌──────────────┐
┌───────┐   │ ├─────────────>│SignOutServlet│ │
│Browser├─────┤              └──────────────┘
└───────┘   │ │/user/profile ┌──────────────┐ │
              ├─────────────>│ProfileServlet│
            │ │              └──────────────┘ │
              │/user/post    ┌──────────────┐
            │ ├─────────────>│ PostServlet  │ │
              │              └──────────────┘
            │ │/user/reply   ┌──────────────┐ │
              └─────────────>│ ReplyServlet │
            │                └──────────────┘ │
             ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
```
各个 Servlet 设计功能如下：
- IndexServlet：浏览帖子；
- SignInServlet：登录；
- SignOutServlet：登出；
- ProfileServlet：修改用户资料；
- PostServlet：发帖；
- ReplyServlet：回复。
其中，ProfileServlet、PostServlet 和 ReplyServlet 都需要用户登录后才能操作，否则，应当直接跳转到登录页面。
我们可以直接把判断登录的逻辑写到这 3 个 Servlet 中，但是，同样的逻辑重复 3 次没有必要，并且，如果后续继续加 Servlet 并且也需要验证登录时，还需要继续重复这个检查逻辑。
为了把一些公用逻辑从各个 Servlet 中抽离出来，JavaEE 的 Servlet 规范还提供了一种 Filter 组件，即过滤器，它的作用是，在 HTTP 请求到达 Servlet 之前，可以被一个或多个 Filter 预处理，类似打印日志、登录检查等逻辑，完全可以放到 Filter 中。
我们编写一个最简单的 EncodingFilter，它强制把输入和输出的编码设置为 UTF-8：
```java
@WebFilter(urlPatterns = "/*")
public class EncodingFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        System.out.println("EncodingFilter:doFilter");
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        chain.doFilter(request, response);
    }
}
```
编写 Filter 时，必须实现 Filter 接口，在 `doFilter()` 方法内部，要继续处理请求，必须调用 `chain.doFilter()`。最后，用 `@WebFilter` 注解标注该 Filter 需要过滤的 URL。这里的 `/*` 表示所有路径。
添加了 Filter 之后，整个请求的处理架构如下：
```
            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
                                   /             ┌──────────────┐
            │                     ┌─────────────>│ IndexServlet │ │
                                  │              └──────────────┘
            │                     │/signin       ┌──────────────┐ │
                                  ├─────────────>│SignInServlet │
            │                     │              └──────────────┘ │
                                  │/signout      ┌──────────────┐
┌───────┐   │   ┌──────────────┐  ├─────────────>│SignOutServlet│ │
│Browser│──────>│EncodingFilter├──┤              └──────────────┘
└───────┘   │   └──────────────┘  │/user/profile ┌──────────────┐ │
                                  ├─────────────>│ProfileServlet│
            │                     │              └──────────────┘ │
                                  │/user/post    ┌──────────────┐
            │                     ├─────────────>│ PostServlet  │ │
                                  │              └──────────────┘
            │                     │/user/reply   ┌──────────────┐ │
                                  └─────────────>│ ReplyServlet │
            │                                    └──────────────┘ │
```
还可以继续添加其他 Filter，例如 LogFilter：
```java
@WebFilter("/*")
public class LogFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        System.out.println("LogFilter: process " + ((HttpServletRequest) request).getRequestURI());
        chain.doFilter(request, response);
    }
}
```
多个 Filter 会组成一个链，每个请求都被链上的 Filter 依次处理：
```
                                        ┌────────┐
                                     ┌─>│ServletA│
                                     │  └────────┘
    ┌──────────────┐    ┌─────────┐  │  ┌────────┐
───>│EncodingFilter│───>│LogFilter│──┼─>│ServletB│
    └──────────────┘    └─────────┘  │  └────────┘
                                     │  ┌────────┐
                                     └─>│ServletC│
                                        └────────┘
```
有多个 Filter 的时候，Filter 的顺序如何指定？多个 Filter 按不同顺序处理会造成处理结果不同吗？
答案是 Filter 的顺序确实对处理的结果有影响。但遗憾的是，Servlet 规范并没有对 `@WebFilter` 注解标注的 Filter 规定顺序。如果一定要给每个 Filter 指定顺序，就必须在 `web.xml` 文件中对这些 Filter 再配置一遍。
注意到上述两个 Filter 的过滤路径都是 `/*`，即它们会对所有请求进行过滤。也可以编写只对特定路径进行过滤的 Filter，例如 AuthFilter：
```java
@WebFilter("/user/*")
public class AuthFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        System.out.println("AuthFilter: check authentication");
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse resp = (HttpServletResponse) response;
        if (req.getSession().getAttribute("user") == null) {
            // 未登录，自动跳转到登录页:
            System.out.println("AuthFilter: not signin!");
            resp.sendRedirect("/signin");
        } else {
            // 已登录，继续处理:
            chain.doFilter(request, response);
        }
    }
}
```
注意到 AuthFilter 只过滤以 `/user/` 开头的路径，因此：
* 如果一个请求路径类似 `/user/profile`，那么它会被上述 3 个 Filter 依次处理；
* 如果一个请求路径类似 `/test`，那么它会被上述 2 个 Filter 依次处理（不会被 `AuthFilter` 处理）。
再注意观察 `AuthFilter`，当用户没有登录时，在 `AuthFilter` 内部，直接调用 `resp.sendRedirect()` 发送重定向，且没有调用 `chain.doFilter()`，因此，当用户没有登录时，请求到达 `AuthFilter` 后，不再继续处理，即后续的 Filter 和任何 Servlet 都没有机会处理该请求了。
可见，Filter 可以有针对性地拦截或者放行 HTTP 请求。
如果一个 Filter 在当前请求中生效，但什么都没有做：
```java
@WebFilter("/*")
public class MyFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        // TODO
    }
}
```
那么，用户将看到一个空白页，因为请求没有继续处理，默认响应是 200 + 空白输出。
如果 Filter 要使请求继续被处理，就一定要调用 `chain.doFilter()` ！
---
定义步骤：
1. 定义一个类，实现接口Filter
2. 复写方法
3. 配置拦截路径
配置拦截路径有 2 种方式，分别是 web.xml 和注解进行配置。
### 注解配置拦截路径
```java
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import java.io.IOException;
@WebFilter("/*")
public class FilerDemo1 implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.out.println("filterdemo执行");
        filterChain.doFilter(servletRequest, servletResponse);  //放行
    }
    @Override
    public void destroy() {
    }
}
```
### web.xml 配置拦截路径
```xml
        demo1  //声明名字
        cn.test.web.filter.FilerDemo1 //声明对应的filter过滤器
        demo1
        /*     //声明filter拦截资源
```
这里可以看到 filter 类，需要重写 3 个方法，这里的三个方法的作用分别是：
1. init: 在服务器启动后，会创建 Filter 对象，然后调用 init 方法。只执行一次。用于加载资源
2. doFilter: 每一次请求被拦截资源时，会执行。执行多次
3. destroy: 在服务器关闭后，Filter 对象被销毁。如果服务器是正常关闭，则会执行 destroy 方法。只执行一次。用于释放资源
服务器会先执行过滤器，再执行过滤器放行的资源，最好再执行过滤器放行后面的代码。
上面的代码直接拦截了所有的资源，定义的时候过滤器有多种的定义方式
1. 具体资源路径： /index.jsp   只有访问 index.jsp 资源时，过滤器才会被执行
2. 拦截目录： /user/*	访问 / user 下的所有资源时，过滤器都会被执行
3. 后缀名拦截： *.jsp		访问所有后缀名为 jsp 资源时，过滤器都会被执行
4. 拦截所有资源：/*		访问所有资源时，过滤器都会被执行
我们可以将后台的一些功能 servlet 定义为 amdin/addUserserlvlet, 定义多一层目录，拦截器可以直接定义拦截路径为 admin/* 这样，如果携带了登录的 session 后，才选择放行。
### 定义拦截方式
注解里面定义拦截路径，默认是 REQUEST 方式，也就是浏览器直接访问，使用转发或者或者是其他这些方式访问一样是会被拦截器给拦截的。
如果我们需要使用转发访问资源不被拦截器拦截，可以在注解中配置 dispatcherTypes 属性的值。
dispatcherTypes 五种属性：
1. REQUEST：默认值。浏览器直接请求资源
2. FORWARD：转发访问资源
3. INCLUDE：包含访问资源
4. ERROR：错误跳转资源
5. ASYNC：异步访问资源
代码：
```java
package cn.test.web.filter;
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import java.io.IOException;
@WebFilter(value = "/*",dispatcherTypes = {DispatcherType.REQUEST,DispatcherType.FORWARD})  //定义浏览器请求和转发拦截器被执行
public class FilerDemo1 implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.out.println("filterdemo执行");
        filterChain.doFilter(servletRequest, servletResponse);  //放行
    }
    @Override
    public void destroy() {
    }
}
```
如果是在 web.xml 里面进行配置，那么我们只需要加入
REQUEST
web.xml 配置：
```xml
        demo1
        cn.test.web.filter.FilerDemo1
        demo1
        /*
        REQUEST
```
登陆过滤器案例：
```java
package cn.test.web.filter;
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
@WebFilter("/*")
public class loginFilter implements Filter {
    public void destroy() {
    }
    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {
            System.out.println(req);
            //强制转换成 HttpServletRequest
            HttpServletRequest request = (HttpServletRequest) req;
            //获取资源请求路径
            String uri = request.getRequestURI();
            //判断是否包含登录相关资源路径,排除掉 css/js/图片/验证码等资源
            if(uri.contains("/login.jsp") || uri.contains("/loginServlet") || uri.contains("/css/") || uri.contains("/js/") || uri.contains("/fonts/") || uri.contains("/checkCodeServlet")  ){
                //包含，用户就是想登录。放行
                chain.doFilter(req, resp);
            }else{
                //不包含，需要验证用户是否登录
                //从获取session中获取user
                Object user = request.getSession().getAttribute("user");
                if(user != null){
                    //登录了。放行
                    chain.doFilter(req, resp);
                }else{
                    //没有登录。跳转登录页面
                    request.setAttribute("login_msg","您尚未登录，请登录");
                    request.getRequestDispatcher("/login.jsp").forward(request,resp);
                }
            }
            // chain.doFilter(req, resp);
        }
    public void init(FilterConfig config) throws ServletException {
    }
}