## 前言
仅以本文记录暑假这些天在学习代码审计过程中遇到的一些知识点，以及一些代码审计常用的方法，如果有什么不对的地方，也欢迎师傅们斧正，在下面讲解常见漏洞时，我会举一些例子，其中包括部分小0day，如果有其他好玩的漏洞点，也希望师傅们能ddw。
## 代码审计是什么
由于我现在接触到的只有WEB层的代码审计，所以我个人的理解是对网站源码进行分析，从而找出攻击者可以利用的点。
## 代码审计基本步骤
当我拿到一份源码时，我一般会先从入口文件开始审。
  * 入口文件
一般是index.php，这个文件里会给你定义一大堆常量，包括根目录路径/核心文件路径/表前缀之类，这些我认为是我们不需要管的，我们需要审的点是网站与用户交互的点。入口文件一般会先判断你是否存在安装锁或者配置文件，如果不存在就跳到安装目录，开始安装整个网站。
  * 文件监控
我会粗略的先看一遍安装文件(setup/install.php)，如果确定没洞了我就会把文件监控打开，然后把安装的流程走一遍，开文件监控有助于我们观察整个网站目录的变化，日志敏感信息泄露，日志记录等这些点都是可以看得到的。
  * 正式审计
我把审计分为安装前和安装后两个部分，安装前审完了之后我们就可以开始看网站的其他文件是否存在漏洞了，这个时候一般分为两种审计方式：
1.通过危险函数逆推是否用户可控  
2.通读所有代码  
3.黑盒+白盒
我一般都会用第一种或者第二种方式，第一种方式能够快速的找到漏洞但是漏的可能会多，第二种方式一般用在规模比较小的cms，因为文件较少，所以代码全看了也花不了多少功夫，第三种我很少用，我觉得这是新手审计的缺点，其实更应该黑盒+白盒一起用的，因为在黑盒里我们可能可以发现一些看代码的时候不注意的漏洞，比如越权/逻辑等漏洞。
  * 分析源码目录
我们在这个步骤只需要对源码目录有个大概的了解，知道每个目录里放的是什么文件就行了，比如install目录放的安装文件，admin目录放的后台管理相关的文件，function目录放的网站运行时需要用到的方法的相关文件等。
  * 分析过滤情况
在这个步骤我们要对源码的过滤情况进行分析，看看是全局过滤还是单独写某个函数用于对输入点一个个的过滤。
全局过滤一般只会对XSS/SQL进行过滤，比如网站可能会写一个函数，对`$_GET/$_POST/$_COOKIE`进行过滤。
例：
    function zc_check($string){
        if(!is_array($string)){
            if(get_magic_quotes_gpc()){
            return htmlspecialchars(trim($string));
            }else{
            return addslashes(htmlspecialchars(trim($string)));
            }
         }
        foreach($string as $k => $v) $string[$k] = zc_check($v);
        return $string;
    }
    if($_REQUEST){
        $_POST =zc_check($_POST);
        $_GET =zc_check($_GET);
        $_COOKIE =zc_check($_COOKIE);
        @extract($_POST);
        @extract($_GET);    
    }
这种就是全局过滤，一般会在某个文件里，然后每个文件都会包含这个文件。
比如在zzcms里，这是inc/stopsqli.php：
然后可以看到index.php里包含了conn.php：
而conn.php里又会包含这个stopsqli.php：
这样只要包含了conn.php的文件，就会对用户输入的参数进行全局过滤。
第二种就是针对性过滤，程序员可能会写一个函数，不会直接把全局变量放进去过滤，而是针对性的过滤。
例：
    function sqlchecks($StrPost){
    $StrPost=str_replace("'","’",$StrPost);
    $StrPost=str_replace('"','“',$StrPost);
    $StrPost=str_replace("(","（",$StrPost);
    $StrPost=str_replace(")","）",$StrPost);
    $StrPost=str_replace("@","#",$StrPost);
    $StrPost=str_replace("/*","",$StrPost);
    $StrPost=str_replace("*/","",$StrPost);
    return $StrPost;
    }
程序的正常过滤情况：
    $currentpage=UsualToolCMS::curPageURL();
    $l=UsualToolCMS::sqlcheck($_GET["l"]);
    $id=UsualToolCMS::sqlcheck($_GET["i"]);
    $t=UsualToolCMS::sqlcheck($_GET["t"]);
这种我把他称为局部过滤，即点对点的过滤。
如果看不明白过滤情况，可以直接在网站随便一个文件内写一个内容：
    var_dump($_GET);
    exit();
这样写了之后就可以看到是否对单引号进行转义以及过滤了，注意这里需要在包含完所有文件后再写这段代码。
## 常见漏洞挖掘
### 重装漏洞
我把代码审计分为安装前和安装后两个部分，这样比较容易区分开漏洞，重装漏洞导致的原因有这么几个：
    1.代码中并未判断安装锁程序是否存在就进入了安装程序
    2.代码中判断了安装锁是否存在，但是没有用exit或die退出PHP程序，只是用了header函数来指定location，这样实际上是没有效果的，依旧存在重装漏洞。
    3.代码中判断了安装锁是否存在，使用了exit或die函数退出PHP程序，但只在某个步骤例如step1判断了，而安装程序是分开进行的，也就是说我们可以直接跳过step1进入step2/3/4等。
    4.代码中判断了安装锁是否存在，并且是在开头判断的，如果存在就使用exit或die退出PHP程序，这时候如果我们想重装只有一个办法，就是删除/修改安装锁文件，具体看代码是怎么写的，如果是判断存在我们就要找一个文件删除漏洞，如果是判断文件内容我们可以找一个修改文件内容的点，这时也算是组合拳导致重装漏洞，不算是单纯的重装漏洞了。
以上就是我总结的重装漏洞经常出现的几个场景。
例：
5isns重装漏洞：
install/index.php：
 $_v)
        {
            ${$_k} = replace($_v);
        }
    }
这就是程序的一个过滤并注册变量的函数，会把_GET/_POST/_COOKIE中的键对值经过过滤后注册变量。
现在我们可以来看看过滤函数，一个很简单的过滤，把union/select这些关键字替换为空，现在我们要想绕过这个过滤函数的办法，既然替换为空，那么我们可以这么构造：ununionon，这样经过过滤之后值就变为union了，也就是师傅们常说的双写绕过，绕过了过滤函数之后，注入就变得很简单了。
但大多数CMS都不会使用对关键字进行过滤这种方式而是使用转义的方式，即使用addslashes函数。
由于addslashes函数会将单引号/双引号/NULL等字符前面自动加上一个\作为转义，所以正常情况下我们的单引号或者双引号是无法闭合的。
所以在这种情况下如果想挖SQL注入我们得观察以下几个点：
  * 数据库编码
如果数据库使用的不是UTF-8编码而是GBK，我们就可以直接无视掉这个过滤，使用宽字节注入。
  * 数字型注入
所谓数字型注入，即未用引号包裹就代入查询，那么既然没有引号包裹，我们想要注入自然也就不需要闭合引号。
  * 注入前对参数进行解码
常见的如urldecode/base64decode等，如果在注入前对参数进行了解码，我们就可以使用二次编码进行注入。
  * 未包含过滤文件
有的程序没有包含过滤文件也进行了数据库相关操作，这种情况我们就可以直接无视全局过滤进行注入。
  * 二次注入
由于二次注入还没挖到过，也就不在这里班门弄斧了。
  * LIMIT注入
这算是比较鸡肋的点把，实际上也可以归类未数字型注入那一块，因为LIMIT后是可以注入的，而LIMIT后的变量一般都是数字，所以不会进行过滤，直接代入数据库查询，这样也是可以造成SQL注入的，但由于MYSQL高版本在LIMIT后无法使用select，所以说这是一个比较鸡肋的点。
  * 未使用过滤函数的全局变量
比如程序只对GET/POST使用了全局过滤，而COOKIE没使用，这时候我们就可以找哪个地方代入COOKIE中的变量进入数据库进行查询。
最常见的其实是XFF注入，因为大多数情况全局过滤都不会过滤`$_SERVER`，而如果程序获取用户IP的情况是可控的，比如`$_SERVER['HTTP_X_FORWARDED']`，并将IP代入数据库操作中，那么就可以直接无视全局过滤进行注入。
#### 局部过滤
如果程序使用的是局部过滤，那么除了全局过滤以上的几种方法我们可以考虑之外，还可以考虑他哪些输入点没有使用过滤函数。
例：
  * UsualToolCMS最新版前台注入
首先程序写了一个过滤函数进行局部过滤：
    function sqlchecks($StrPost){
    $StrPost=str_replace("'","’",$StrPost);
    $StrPost=str_replace('"','“',$StrPost);
    $StrPost=str_replace("(","（",$StrPost);
    $StrPost=str_replace(")","）",$StrPost);
    $StrPost=str_replace("@","#",$StrPost);
    $StrPost=str_replace("/*","",$StrPost);
    $StrPost=str_replace("*/","",$StrPost);
    return $StrPost;
    }
程序的正常过滤情况：
    $currentpage=UsualToolCMS::curPageURL();
    $l=UsualToolCMS::sqlcheck($_GET["l"]);
    $id=UsualToolCMS::sqlcheck($_GET["i"]);
    $t=UsualToolCMS::sqlcheck($_GET["t"]);
这种情况如果我们想找一个SQL注入，最简单的办法就是找哪个变量是我们可控的且没有使用过滤函数的，而刚好我也找到了一处：
/paypal/index.php：
    require "config.php";
    $no=trim($_GET["no"]);
    $myorder=$mysqli->query("select ordernum,summoney,unit from `cms_order` WHERE ordernum='$no'");
可以看到，这里的$no变量没有使用过滤函数就直接代入了数据库进行查询，从而导致了SQL注入，我们可以验证一下：
这里由于数据无回显，且程序默认关闭了报错显示，所以我用的延时注入，在此也感谢蝴蝶刀师傅教了我一种新的延时技巧。
### XSS
XSS也分为反射型、存储型以及DOM型。
#### 反射型XSS
当我们想挖掘这类漏洞时，需要重点关注程序的输出，比如echo/print等，当程序直接将未经过滤的用户输入输出除了，就会造成反射型XSS。
而这类漏洞我挖的最多的情况是：
    echo $_GET['callback'].(...);
也就是JSONP处，其实大多数反射型的XSS都一样，在PHP中一般都是使用echo这类代码将输入直接输出出来。
下面举几个反射型XSS的例子：
  * phpwcms最新版反射型XSS
/image_zoom.php：
    $img = base64_decode($_GET["show"]);
       # echo base64_encode('?onerror="alert(1)"');
       # exit();
        list($img, $width_height)   = explode('?', $img);
       # echo $width_height;
       # exit();
        $img = str_replace(array('http://', 'https://', 'ftp://'), '', $img);
        $img = strip_tags($img);
        $width_height = strip_tags($width_height);
        $img = urlencode($img);
    }
    ?>
        Image