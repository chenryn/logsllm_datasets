new account for the (unknown) user in its internal database and 
stores  each  of  the  returned  attribute  types  in  the  user’s  card  for 
this IdP. These attribute types are used to dynamically determine 
which IdPs are selectable at service provision time. When the LIS 
receives an existing PId, it locates the (unknown) user’s existing 
account in its database. If the user wishes to link additional IdP 
accounts to her existing LIS account then she submits or chooses 
another IdP card and is redirected to that IdP. The LIS requests 
another PId and set of attribute types from this IdP and adds these 
to the same LIS account.  
We have also built support for the NIST Level of Assurance (LoA) 
[3]  into  our  conceptual  model,  as  described  in  [4],  but  space 
limitations prevent us from detailing it here. 
2.2  Service Provision 
In  order  to  provide  a  web  based  Identity  Selector  that  is 
interoperable  with  existing  CardSpace  SPs  we  introduce  a  thin 
client module that is pluggable into the user’s web browser. This 
module  is  used  to  discover  the  user’s  LIS,  to  redirect  the  user 
there, and finally to return the (possibly aggregated) claims to the 
SP as in the existing CardSpace system. The only difference with 
current  systems  is  that  multiple  cryptographically  linked  claims 
from multiple IdPs may now be provided to the SP.  
n
r   A u t h
e
5 .  U s
Credit 
Card IdP
8.
9.
4. 
6. 
3.
7. Select Cards 
Self
8.
Asserted
Idp
Linking
Identity
Selector
9.
8.
9.
Freq Flyer 
IdP
1.
2.
Service 
Provider
1 0 .   C o m p l e t e   s e t   o f   a t t r i b u t e s
9.
8.
Hotel
IdP
Figure 1. Service Provision Protocol Interactions 
The  user  navigates  to  an  InfoCard  enabled  HTML  page  at  the 
SP’s site and clicks on the InfoCard icon using their browser (step 
1).  The  returned  page  (step  2)  contains  an  embedded  InfoCard 
MIME object that causes the browser to invoke our new plug-in 
module rather than the fat Identity Selector from Microsoft. The 
module  downloads  the  SP’s  security  policy  which  is  parsed  to 
determine the set of attribute types required to access the service. 
We have defined an enhanced security policy that allows multiple 
IdPs  with  different  attribute  claims  to  be  specified.  This  is  a 
significant  enhancement  to  the  CardSpace  framework.  The 
module next discovers the location of the user’s LIS in one of two 
ways.  The  user  may  bookmark  the  home  page  of  her  LIS  in  a 
658reserved  bookmarks  folder  that  can  be  accessed  by  the  module. 
The module can then display this/these bookmarks to the user and 
let  her  choose  her  preferred  LIS.  Alternatively  the  user  can 
directly enter a URL into the module (see Figure 2). This allows 
our  system  to  be  used  on  any  Internet  café  computer  without 
releasing  personal  information  to  other  users.  Our  system 
prevents  phishing  attacks  since  a  fraudulent  SP  is  not  able  to 
redirect the user to a LIS of its own choosing.  
Figure 2. The LIS Discovery Mechanism 
When the user has selected their LIS, the module establishes an 
SSL  connection  with  it  to  protect  all  future  communications 
between  the  browser  and  the  LIS  (step  3). The module requests 
the set of claims required by the SP from the LIS and asks that the 
attributes be returned encrypted for the SP. When the LIS receives 
this message it acts as a Where Are You From (WAYF) service 
and displays a page to the user showing her a list of all the IdPs 
that it has trust relationships with. The user chooses one of these 
IdPs (at which she has an account) and is redirected there (step 4). 
In our case the user chooses her credit card IdP. 
The  user  is  now  invited  to  authenticate  to  the  IdP  using  its 
supported  mechanism(s)  (step  5).  In  the  IdP  we  are  developing, 
the user enters her email address to this page, the IdP looks this 
up in its database, then rings the registered mobile phone number 
and asks her to speak a phrase. The voice biometrics used by our 
IdP strongly authenticate the user.  
The  IdP  responds  to  the  LIS  by  returning  an  authentication 
assertion containing a random session ID and a “referral” attribute 
which contains the user’s PId encrypted for the LIS (step 6).  The 
LIS  is  able  to  decrypt  the  PId  and  access  the  user’s  account.  It 
displays all the user’s cards in an Identity Selector like page (step 
7).  The  page  comprises  three  windows,  the  bottom  two  being 
similar 
Identity  Selector,  and  having  similar 
functionality.  The  top  window  contains  cards  that  have  already 
been  selected,  the  middle  window  shows  cards  that  have 
previously been sent to this SP (but not yet selected), whilst the 
bottom window shows cards that have never been sent to this SP. 
This tells the user to exercise extra care if she decides to send any 
of  these  cards  to  this  SP.  Those  cards  that  match  the  SP’s 
requirements are lit up and those that don’t are greyed out (and 
not selectable). The top window initially only contains one card, 
that of the authenticating IdP. As the user clicks on cards in either 
of the two lower windows two things happen. Firstly the card is 
removed  from  the  lower  window  and  displayed  in  the  top 
window. Secondly any cards which are no longer needed to fulfil 
the  SP’s  policy  are  greyed  out  in  the  lower  windows.  For 
example, if the SP’s policy says that it needs a credit card from 
either Visa, Mastercard or Amex, and the user clicks on her Visa 
today’s 
to 
card, her other credit card icons will be greyed out in the lower 
windows. Until the combined set of selected cards match the full 
set  of  attribute  types  requested  by  the  SP  the  “Use  Selected 
Cards”  button  is  disabled  to  prevent  the  user from incompletely 
authorising  herself.  Once  the  user  has  selected  sufficient  cards, 
the button is enabled and the LIS remembers this selection so that 
they can appear in the middle window the next time the same SP 
is  contacted.  Because  the  LIS  is  in  the  cloud  and  not  on  the 
desktop, when the user moves from device to device she will not 
keep being told she has not sent cards previously to an SP when 
in fact she has, as in the current CardSpace system. 
The LS will query each of the chosen IdPs for the user’s attributes 
(step 8.). All the chosen IdPs, including the self asserted IdP and 
the authenticating IdP, are contacted in the same way. The query 
comprises:  an  attribute  query  requesting  the  chosen  subset  of 
attributes required by the SP, a referral containing a PId encrypted 
to the recipient IdP, which points to the user’s account at the IdP, 
and  the  original  authentication  token  containing  the  random 
session ID. The recipient IdP uses the latter to determine whether 
it trusts the initial act of authentication by the authenticating IdP. 
If it does not, the recipient IdP returns an error to the LIS. If it 
does  trust  the  authenticating  IdP  then  it  generates  a  claim 
containing the user’s attributes encrypted to the SP (step 9). The 
user is identified in this assertion by the random session identifier 
contained in the authentication token. The LIS stores the returned 
claim until all the queried IdPs have replied. 
Once all the attribute assertions have been collected by the LIS it 
generates a response to the original request made by the browser 
plug-in  module.  This  response  contains 
the  authentication 
assertion and each of the encrypted attribute claims returned from 
the  IdPs.  When  the  browser  receives  the  response  it  returns  the 
enclosed claims to the SP (step 10). The SP receives a message 
containing  a  single  authentication  token  and  multiple  attribute 
claims  from  multiple  IdPs  which  all  contain  the  same  random 
session  identifier.  Since  the  SP  trusts  all  the  IdPs  as  being 
authoritative  for  their  attributes,  it  can  be  assured  that  the  same 
user  possesses  all  of  the  returned  attributes,  and  has  been 
successfully authenticated to a particular level of assurance. 
3.  ACKNOWLEDGMENTS 
The  research  leading  to  these  results  has  received  funding  from 
the EC's FP7 programme under grant agreement n° 216287 (TAS³ 
- Trusted Architecture for Securely Shared Services). 
4.  REFERENCES 
[1]  David Chappell. “Introducing Windows CardSpace”. 
MSDN. April 2006. Available from 
http://msdn.microsoft.com/en-us/library/aa480189.aspx 
[2]  OASIS. “Assertions and Protocol for the OASIS Security 
Assertion Markup Language (SAML) V2.0”, OASIS 
Standard, 15 March 2005 
[3]  William E. Burr, Donna F. Dodson, Ray A. Perlner, W. 
Timothy Polk, Sarbari Gupta, Emad A. Nabbus. “Electronic 
Authentication Guideline”, NIST Special Publication NIST 
Special Publication 800-63-1, Feb 2008 
[4]  David W Chadwick, George Inman. “Attribute Aggregation 
in Federated Identity Management”. IEEE Computer, May 
2009, pp 46-53 
659