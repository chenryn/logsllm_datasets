180
163
6275
FP
0
0
0
0
0
0
0
0
0
TP
64
17
128
48
2
0
3
4
3
Table IV: Evaluation results using the LRU model; the table
shows results for an access based attacker on the left and a
trace based attacker on the right.
of pinned cache entries. The ages at the beginning are the
ages at the end for the pinned entries, preventing CaSym
from reporting them as causes of side channels.
D. Abstract vs. Concrete Cache Models
In order to show the effectiveness of the inﬁnite cache
model and the age model, we implemented the following
features as described in Section VI-D: the LRU replacement
policy, cache lines, and cache associativity.
LRU replacement policy: Table IV shows the evaluation
results on our cryptography benchmarks, based on the LRU
cache model with 2k cache slots. We note that the LRU
model takes a signiﬁcant amount of time to ﬁnish (the SMT
solver even timed out with a limit of 3 hours for three tests).
Despite the signiﬁcantly longer execution time, for all tests
that ﬁnish, we note that it reports exactly the same results
as the age model, and very similar results as the inﬁnite
cache model. This result demonstrates that our abstract cache
models offer better balance between precision and efﬁciency,
when compared to more concrete cache models.
Cache line size and cache associativity: We also im-
plemented cache models with various cache line sizes and
cache associativity, as discussed in Section VI-D. We tested
our benchmarks using common cache associativity values
and cache line sizes. The results reported were the same as
without specifying associativity or cache line size7.
X. LIMITATIONS AND FUTURE WORK
As mentioned before, the symbolic execution of CaSym
does not
track array contents. That is, reading from an
array returns an arbitrary value. This in theory can cause
false positives, but has not caused problems during our
experiments. The implementation also does not support
dynamic allocation and deallocation of memory. Array sizes
must be statically declared. Our support of pointers is also
limited. We require that a pointer variable must be initialized
7This does not mean different associativity or cache line sizes will never
impact the result; it just means that typical values for associativity and
cache line sizes have no impact on the benchmarks we evaluated.
(cid:22)(cid:18)(cid:26)
to the base address of some array. Pointer arithmetic on
the pointer is allowed, but the pointer can only reference
locations inside the array it was initialized to for the entire
lifetime of the pointer. This reﬂects how pointers are used in
crypto applications, but it is not the case for general C/C++
applications. Finally, CaSym inlines all functions before
performing symbolic evaluation. We plan to gradually lift
these restrictions so that CaSym can support more general
applications beyond crypto applications.
XI. CONCLUSIONS
In this paper, we present CaSym for identifying and mit-
igating cache-based side channels. We show that CaSym’s
symbolic execution and cache models are effective at iden-
tifying cache-based side channels in realistic benchmarks,
including cryptography implementation and database sys-
tems. CaSym was able to detect new side channels as well as
known ones in multiple functions used to handle conﬁdential
data frequently. The novel abstract cache models are shown
to provide good balance between precision and efﬁciency.
Furthermore, CaSym produces accurate and helpful error re-
ports when side channels are identiﬁed. The reports are used
to strategically place mitigation mechanisms to eliminate the
side channels in programs.
ACKNOWLEDGMENT
The authors would like to thank anonymous reviewers
for their constructive feedback. This work was partially
supported by NSF grants CCF-1822923, CCF-1439021,
CCF-1629915,
CNS-
1702760, CNS-1816282, CCF-1723571, CNS-1408826,
CNS-1801534, ONR grant N00014-17-1-2539, as well as a
gift from Intel Corporation.
CCF-1629129,
CCF-1626251,
REFERENCES
[1] D. J. Bernstein, “Cache-timing attacks on aes,” cr.yp.to/
papers.html\#cachetiming, 2005.
[2] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and
countermeasures: the case of AES,” Topics in Cryptology–
CT-RSA 2006, pp. 1–20, Jan. 2006.
[3] C. Percival, “Cache missing for fun and proﬁt,” in BSDCan,
2005.
[4] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and
R. Schlichting, “An exploration of l2 cache covert channels
in virtualized environments,” in Proceedings of the 3rd ACM
Workshop on Cloud Computing Security Workshop, 2011, pp.
29–40.
[5] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-
space: High-speed covert channel attacks in the cloud,” in
Proceedings of
the 21st USENIX Conference on Security
Symposium. Berkeley, CA, USA: USENIX Association,
2012, pp. 9–9. [Online]. Available: http://dl.acm.org/citation.
cfm?id=2362793.2362802
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
[6] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey,
you, get off of my cloud: Exploring information leakage
in third-party compute clouds,” in Proceedings of the 16th
ACM Conference on Computer and Communications Security,
2009, pp. 199–212.
[7] Y. Xiao, M. Li, S. Chen, and Y. Zhang, “Stacco: Differ-
traces for detecting ssl/tls
entially analyzing side-channel
vulnerabilities in secure enclaves,” in Proceedings of
the
ACM Conference on Computer and Communications Security
(CCS), 2017, pp. 859–874.
[8] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-
vm side channels and their use to extract private keys,” in
Proceedings of the 2012 ACM Conference on Computer and
Communications Security, 2012, pp. 305–316.
[9] Y. Yarom and K. Falkner, “Flush+reload: A high resolution,
low noise, l3 cache side-channel attack,” in Proceedings of
the 23rd USENIX Conference on Security Symposium, 2014,
pp. 719–732.
[10] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. Lee, “Last-
level cache side-channel attacks are practical,” in Security
and Privacy (S&P), 2015 IEEE Symposium on, May 2015,
pp. 605–622.
[11] S. Wang, P. Wang, X. Liu, D. Zhang, and D. Wu, “CacheD:
Identifying cache-based timing channels in production soft-
ware,” in Proceedings of
the the 26th USENIX Security
Symposium (USENIX Security), 2017, pp. 235–252.
[12] G. Doychev, D. Feld, B. Kopf, L. Mauborgne, and J. Reineke,
“Cacheaudit: A tool for the static analysis of cache side
channels,” in Proceedings of the the 22nd USENIX Security
Symposium (USENIX Security), 2013, pp. 431–446.
[13] G. Doychev and B. K¨opf, “Rigorous analysis of software
countermeasures against cache attacks,” in Proceedings of
the ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI). ACM, 2017, pp. 406–
421.
[14] D. Gullasch, E. Bangerter, and S. Krenn, “Cache games—
bringing access-based cache attacks on AES to practice,” in
Proceedings of the IEEE Symposium on Security and Privacy
(S&P), 2011, pp. 490–505.
[15] E. Tromer, D. Osvik, and A. Shamir, “Efﬁcient cache attacks
on aes, and countermeasures,” Journal of Cryptology, vol. 23,
no. 1, pp. 37–71, 2010.
[16] C. S. Pasareanu, Q.-S. Phan, and P. Malacaria, “Multi-run
side-channel analysis using symbolic execution and max-
smt,” in Proceedings of the IEEE Computer Security Foun-
dations (CSF).
IEEE, 2016, pp. 387–400.
[18] T. Antonopoulos, P. Gazzillo, M. Hicks, E. Koskinen,
T. Terauchi, and S. Wei, “Decomposition instead of self-
composition for proving the absence of timing channels,”
in Proceedings of
the 38th ACM SIGPLAN Conference
on Programming Language Design and Implementation,
ser. PLDI 2017. New York, NY, USA: ACM, 2017,
pp. 362–375. [Online]. Available: http://doi.acm.org/10.1145/
3062341.3062378
[19] J. Chen, Y. Feng, and I. Dillig, “Precise detection of
side-channel vulnerabilities using quantitative cartesian hoare
logic,” in Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’17.
New York, NY, USA: ACM, 2017, pp. 875–890. [Online].
Available: http://doi.acm.org/10.1145/3133956.3134058
[20] D. Page, “Partitioned cache architecture as a side-channel
defense mechanism,” in Cryptology ePrint Archive, Report
2005/280, 2005. [Online]. Available: http://eprint.iacr.org/
2005/280.pdf
[21] J. Bonneau and I. Mironov, “Cache-collision timing attacks
against AES,” in Cryptographic Hardware and Embedded
Systems - CHES 2006, ser. Lecture Notes in Computer
Science, L. Goubin and M. Matsui, Eds.
Springer Berlin
Heidelberg, 2006, vol. 4249, pp. 201–215.
[22] A. Bogdanov, T. Eisenbarth, C. Paar, and M. Wienecke,
“Differential cache-collision timing attacks on AES with
applications to embedded cpus,” in Topics in Cryptology–
CT-RSA 2010, ser. Lecture Notes in Computer Science,
J. Pieprzyk, Ed., 2010, vol. 5985, pp. 235–251.
[23] J. Agat, “Transforming out timing leaks,” in Proceedings
the ACM Symposium on Principles of Programming
[Online].
of
Languages
Available: http://dl.acm.org/citation.cfm?id=325694.325702
(POPL),
Jan. 2000, pp. 40–53.
[24] D. Hedin and D. Sands, “Timing aware information ﬂow
security for a JavaCard-like bytecode,” Electronic Notes in
Theoretical Computer Science, vol. 141, no. 1, pp. 163–182,
2005.
[25] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner, “The
program counter security model: automatic detection and
removal of control-ﬂow side channel attacks,” in Proceedings
of the 8th International Conference on Information Security
and Cryptology, 2006, pp. 156–168.
[26] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D.
Sutter, “Practical mitigations for timing-based side-channel
attacks on modern x86 processors,” in Proceedings of the
30th IEEE Symposium on Security and Privacy (S&P), 2009,
pp. 45–60. [Online]. Available: http://ieeexplore.ieee.org/xpl/
freeabs all.jsp?arnumber=5207636
[27] D. Zhang, A. Askarov, and A. C. Myers, “Language-based
control and mitigation of timing channels,” in Proceedings of
the ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), 2012, pp. 99–110.
[Online]. Available: http://www.cs.cornell.edu/andru/papers/
pltiming.html
[17] Q.-S. Phan, L. Bang, C. S. Pasareanu, P. Malacaria, and
T. Bultan, “Synthesis of adaptive side-channel attacks,” in
Computer Security Foundations Symposium (CSF), 2017
IEEE 30th.
IEEE, 2017, pp. 328–342.
[28] H. Raj, R. Nathuji, A. Singh, and P. England, “Resource
management for isolation enhanced cloud services,” in Pro-
ceedings of the 2009 ACM Workshop on Cloud Computing
Security, 2009, pp. 77–84.
(cid:22)(cid:19)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
[42] R. Baldoni, E. Coppa, D. C. D’Elia, C. Demetrescu, and
I. Finocchi, “A survey of symbolic execution techniques,”
ACM Comput. Surv., vol. 51, no. 3, 2018.
[43] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efﬁcient
state merging in symbolic execution,” SIGPLAN Not.,
vol. 47, no. 6, pp. 193–204, Jun. 2012. [Online]. Available:
http://doi.acm.org/10.1145/2345156.2254088
symbolic
veritesting,”
[44] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley,
in
“Enhancing
Proceedings of
the 36th International Conference on
Software Engineering, ser. ICSE 2014. New York, NY,
USA: ACM, 2014, pp. 1083–1094.
[Online]. Available:
http://doi.acm.org/10.1145/2568225.2568293
execution with
[45] E. Brickell, G. Graunke, M. Neve, and J.-P. Seifert, “Software
mitigations to hedge AES against cache-based software side
channel vulnerabilities.” IACR Cryptology ePrint Archive, vol.
2006, p. 52, 2006.
[46] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and
M. Costa, “Strong and efﬁcient cache side-channel protection
using hardware transactional memory,” in Proceedings of the
26th USENIX Security Symposium (USENIX Security 17),
2017, pp. 217–233.
[47] C. Lattner and V. Adve, “Llvm: A compilation framework for
lifelong program analysis & transformation,” in Proceedings
of
the International Symposium on Code Generation and
Optimization: Feedback-directed and Runtime Optimization,
ser. CGO ’04. Washington, DC, USA: IEEE Computer
Society, 2004, pp. 75–. [Online]. Available: http://dl.acm.
org/citation.cfm?id=977395.977673
[48] L. D. Moura and N. Bjørner, “Z3: An efﬁcient SMT solver,”
in Proceedings of the Conf. on Tools and Algorithms for the
Construction and Analysis of Systems (TACAS), 2008.
[49] A. J. Menezes, S. A. Vanstone, and P. C. V. Oorschot,
Handbook of Applied Cryptography, 1st ed. Boca Raton,
FL, USA: CRC Press, Inc., 1996.
[29] J. Shi, X. Song, H. Chen, and B. Zang, “Limiting cache-
based side-channel in multi-tenant cloud using dynamic page
coloring,” in Proceedings of the 2011 IEEE/IFIP 41st Inter-
national Conference on Dependable Systems and Networks
Workshops, 2011, pp. 194–199.
[30]
´U. Erlingsson and M. Abadi, “Operating system protection
against side-channel attacks that exploit memory latency,”
Microsoft Research, Tech. Rep. MSR-TR-2007-117, August
2007. [Online]. Available: http://research.microsoft.com/apps/
pubs/default.aspx?id=64367
[31] T. Kim, M. Peinado, and G. Mainar-Ruiz, “Stealthmem:
System-level protection against cache-based side channel
attacks in the cloud,” in Proceedings of the 21st USENIX
Conference on Security Symposium, 2012, pp. 189–204.
[32] Z. Wang and R. B. Lee, “New cache designs for thwarting
software cache-based side channel attacks,” in Proceedings
of
International Symposium on Computer
Architecture (ISCA), 2007, pp. 494–505. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1250723
the Annual
[33] X. Li, V. Kashyap, J. K. Oberg, M. Tiwari, V. R. Rajarathi-
nam, R. Kastner, T. Sherwood, B. Hardekopf, and F. T.
Chong, “Sapper: A language for hardware-level security pol-
icy enforcement,” in Proceedings of the 19th Int’l Conference
on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2014, pp. 97–112.
[34] D. Zhang, Y. Wang, G. E. Suh, and A. C. Myers, “A
hardware design language for timing-sensitive information-
ﬂow security,” in Proceedings of the 20th Int’l Conference
on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2015, pp. 503–516.
[35] Y. Zhang and M. K. Reiter, “D¨uppel: Retroﬁtting commodity
operating systems to mitigate cache side channels in the
cloud,” in Proceedings of the ACM Conference on Computer
and Communications Security (CCS), 2013, pp. 827–838.
[36] Z. Wang and R. B. Lee, “A novel cache architecture with
enhanced performance and security,” in Proceedings of the
41st Annual IEEE/ACM Int’l Symposium on Microarchitecture
(MICRO), 2008, pp. 83–93.
[37] F. Liu and R. B. Lee, “Random ﬁll cache architecture,” in
Proceedings of the 47th Annual IEEE/ACM Int’l Symposium
on Microarchitecture (MICRO), 2014, pp. 203–215.
[38] J. A. Goguen and J. Meseguer, “Security policies and security
models,” in IEEE Symposium on Security and Privacy (S&P),
Apr. 1982, pp. 11–20.
[39] M. Gordon and H. Collavizza, “Forward with Hoare,” 2010,
pp. 101–121.
[40] E. W. Dijkstra, “Guarded commands, nondeterminacy and
formal derivation of programs,” Commun. ACM, vol. 18,
no. 8, pp. 453–457, Aug. 1975.
[41] D. Babic and A. J. Hu, “Calysto: scalable and precise
extended static checking,” in ICSE ’08: Proceedings of the
30th international conference on Software engineering. New
York, NY, USA: ACM, 2008, pp. 211–220.
(cid:22)(cid:19)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply.