title:mCarve: Carving Attributed Dump Sets
author:Ton van Deursen and
Sjouke Mauw and
Sasa Radomirovic
mCarve: Carving Attributed Dump Sets
Ton van Deursen∗
Sjouke Mauw
Saˇsa Radomirovi´c
University of Luxembourg
University of Luxembourg
University of Luxembourg
Abstract
Carving is a common technique in digital forensics to
recover data from a memory dump of a device. In con-
trast to existing approaches, we investigate the carving
problem for sets of memory dumps. Such a set can, for
instance, be obtained by dumping the memory of a num-
ber of smart cards or by regularly dumping the memory
of a single smart card during its lifetime. The problem
that we deﬁne and investigate is to determine at which
location in the dumps certain attributes are stored. By
studying the commonalities and dissimilarities of these
dumps, one can signiﬁcantly reduce the collection of
possible locations for such attributes. We develop algo-
rithms that support in this process, implement them in a
prototype, and apply this prototype to reverse engineer
the data structure of a public transportation card.
1 Introduction
In digital forensics, the process of recovering data from
a memory dump of a device is called carving. The main
objective of current ﬁle carving approaches is to recon-
struct (partially) deleted, damaged or fragmented ﬁles. A
typical example is the analysis of memory dumps from
cell phones [1]. Because a ﬁle can be permuted in many
possible ways, the process of reassembling ﬁles is very
labor intensive. Therefore, fully and semi-automatic ﬁle
carving tools have been developed that aid the human in-
spection process.
Traditional carving approaches aim to analyze a single
memory dump. In some cases, however, one may have
access to a series of similarly structured dumps. This
may result from observing a system that progresses in
time, while making memory dumps at regular time in-
tervals, or from dumping the memory of a collection of
similar systems. An example is the analysis of the data
∗Ton van Deursen was supported by a grant from the Fonds National
de la Recherche (Luxembourg).
encoded on a public transportation card. It is possible to
collect dumps of several cards after each usage. This will
be the running example throughout this paper.
We will investigate the problem of carving sets of
dumps under two simplifying assumptions. The ﬁrst as-
sumption is that we can observe certain relevant proper-
ties of the system at the moment of dumping its memory.
In this way, we can collect the values of a number of at-
tributes that characterize part of the state of the system,
and link that information to the memory dump. An ex-
ample of such an attribute is the number of rides left on a
public transportation card, which can be easily observed
from the display of the card reader when validating the
card. The carving problem for such attributed dump sets
is then described as the problem of ﬁnding at which lo-
cation in the memory dump the attributes are stored.
The second assumption is that the memory layout is
either static or semi-dynamic. A memory layout is static
if the attributes are stored at the same location in every
dump and the dumps have the same length. An attribute
is stored semi-dynamically if it is stored alternatingly in
a number of different locations. This will allow us to
develop algorithms to identify such possible locations in
dumps.
Carving dump sets allows one to reverse engineer the
memory layout of a system and understand or even ma-
nipulate the system’s functioning. Several applications
can be thought of. A ﬁrst example is the analysis of the
data collected in systems using smartcards, such as the
transportation card mentioned above. One can e.g. ver-
ify privacy concerns by inspecting which travel informa-
tion is stored on the card. Another example is the analy-
sis of the data structures of an obfuscated piece of soft-
ware (e.g. malware) or of a piece of software of which
the speciﬁcations have been lost (e.g. legacy code).
The problem of carving attributed dump sets is differ-
ent from the traditional ﬁle carving problem. While tra-
ditional ﬁle carving tools can be used to obtain informa-
tion about each dump in a set, the dump set’s evolution
and known attributes provide additional information not
available in traditional ﬁle carving.
Our paper is concerned with the problem of extracting
this additional information. The main contributions of
this paper are: (1) to deﬁne the problem of carving dump
sets (Section 3); (2) to develop and analyze a method-
ology for carving dump sets based on two simple oper-
ations (Sections 3 and 5); (3) to develop a prototype
carving tool, called mCarve (Section 7); and (4) to apply
this tool to reverse engineer the data structure of the e-go
system (Section 8).
2 Related work
Closest to our work are ﬁle carving approaches that try
to recover ﬁles from raw data. These approaches try to
recover the data of a single dump whereas we focus on
recovering data (and data structures) of a set of dumps.
Garﬁnkel [7] describes several carving algorithms that
recover ﬁles by searching for headers of known ﬁle for-
mats. These algorithms reconstruct ﬁles based on their
raw data, rather than using the metadata that points to
the content. Cohen [2] formalizes ﬁle carving as a con-
struction of a mapping function between raw data bytes
and image bytes. Based on this formalization, he de-
rives a carving algorithm and applies it to PDF and ZIP
ﬁle carving.
In recent work, Sencar and Memon [10]
describe an approach to identify and recover JPEG ﬁles
with missing fragments. Common to these ﬁle carving
approaches is that they are designed for one (or a small
set of) known ﬁle format(s).
More general, but perhaps less powerful are the ap-
proaches that analyze binary data by visual inspection.
Conti et al. [3] describe a tool that allows analysts to vi-
sually reverse engineer binary data and ﬁles. Their tool
supports simple techniques such as displaying bytes as
pixels, but also more complicated techniques that visu-
alize self-similarity in binary data. Helfman [8] ﬁrst vi-
sualized self-similarity in binary data using dotplot pat-
terns. Using dotplot patterns he revealed redundancy in
various encodings of information.
Some information in a memory dump may be con-
structed using CRCs, cryptographic hashes, or encryp-
tion. Since the entropy of these pieces of data is higher
than of structured data, they can be detected using en-
tropy analysis. Several methods to efﬁciently ﬁnd cryp-
tographic keys are described in [11]. Some of these tech-
niques are based on trial-and-error, while others identify
possible keys by measuring entropy. Testing whether a
given string is random has been studied extensively. See
e.g. [9] for an overview and implementation of the most
important algorithms.
3 Carving attributed dump sets
The concept that is central to our research is the concept
of a dump. A dump consists of raw binary data that is
captured from a system, for instance, from a computer’s
memory, a data carrier or a communication transcript.
An example of a dump is the contents of a public trans-
portation card’s memory.
We assume that the process of creating a dump can be
repeated, allowing us access to a number of dumps of the
same system. We call such a collection of dumps a dump
set. One can, e.g., consider dumps of a number of public
transportation cards, both before and after their use. We
assume that different dumps of the same system have the
same length. If we denote the bit strings of length n ∈ N
by Bn and bit strings of arbitrary, ﬁnite length by B∗,
then a set of dumps of length n is denoted by S ⊆ Bn.
The length n of bit string s ∈ Bn is denoted by |s| and
the number of elements in set S is denoted by |S|. In
this paper, the closed interval [i, j] will denote the set of
integers z such that i ≤ z ≤ j and the half-open interval
[i, j) will denote the set of integers z such that i ≤ z < j.
For i ∈ [0, |s|) we denote the i-th bit of s by si. For
I ⊆ [0, |s|), we denote the subsequence of s that consists
of all elements with index in I by s|I . The subsequence
operator extends to sets of dumps in the obvious way.
A dump contains information about the state of the
system, e.g., the number of rides left on a public trans-
portation card or the last time that it was used. We call
such state properties attributes. For each dump set we
consider a set A of attributes. The function type : A →
D assigns to every attribute a ﬁnite value domain, where
D denotes the set of all ﬁnite value domains. The value
of attribute a ∈ A expressed in dump s is denoted by
vala : S → type(a). For instance, the type of the at-
tribute rides-left can be [0, 15] and a particular dump s of
a card can have 5 rides left, so valrides-left(s) = 5. The
type of the attribute last-used is the set of all dates be-
tween 1/1/2000 and 1/1/2050, extended with the time of
day in hh:mm:ss format.
A dump contains the system’s attribute values in a bi-
nary representation. The mapping from an attribute do-
main to its binary representation is called an encoding.
We assume that for a given attribute a ∈ A the length of
an encoding is ﬁxed, so an encoding of a is a function
from type(a) to Bn for some n ∈ N. This function is re-
quired to be injective. For the public transportation card,
a sample encoding of the rides-left attribute is the (5-bit)
binary representation and a possible encoding of the last-
used attribute is the number of seconds since 1/1/2000,
00:00 hrs modulo 232 expressed in binary format. The
set of all encodings of D ∈ D is denoted by ED.
We start with the assumption that an attribute is always
stored at the same location in all dumps of the system. In
Section 5 we will extend this to semi-dynamic attributes.
With this assumption we can identify which bits of the
dump are related to a given attribute. This is captured in
the notion of an attribute mapping. Here we denote the
powerset of a set X by P(X).
Deﬁnition 1. Let S ⊆ Bn be a dump set with dumps
of length n. An attribute mapping for S is a function
f : A → P([0, n)), such that
∀a ∈A ∃e ∈Etype(a) ∀s ∈ S : s|f (a) = e(vala(s)).
An attribute mapping is non-overlapping if
∀a1, a2 ∈A : a1 6= a2 =⇒ f (a1) ∩ f (a2) = ∅.
An attribute mapping is contiguous if
∀a ∈A ∃i, j ≤ n : f (a) = [i, j).
Given a dump set S and all attribute values for each
dump in S, the carving problem for attributed dump sets
is the problem of ﬁnding an attribute mapping for S.
The existence of such a mapping does not imply that
the attributes are indeed encoded in the dump, but merely
that they could have been encoded at the indicated po-
sitions in the dumps. Conversely, if an attribute can-
not be mapped in S, it means that this attribute is not
present through a deterministic, injective encoding. Of
course, this does not rule out the possibility that a non-
deterministic encoding is used, such as a probabilistic
encryption, or that the attribute is stored dynamically,
i.e. not always at the same location. We consider the
search for high-entropy information and semi-dynamic
attributes later in this paper.
The notion of an attribute mapping is illustrated in Fig-
ure 1. This example consists of ﬁve dumps, s1, . . . s5, of
length n = 18. We look at the attribute rides-left (rl)
with the values as given in the ﬁgure and we consider
two possible encodings enc1 and enc2. The ﬁrst encod-
ing is the standard binary encoding of natural numbers.
It can be found in the dumps at two different (contigu-
ous) positions: [5, 8] and [12, 15]. The second encoding,
which is not standard, occurs at positions [3, 6]. Each of
these three cases deﬁnes a contiguous attribute mapping
for rides-left. There might be more candidate encodings.
4 Commonalities and dissimilarities
Given the values of an attribute for the dumps in a dump
set S, we can use the commonalities and dissimilarities
of these dumps to derive restrictions on the possible at-
tribute mappings for S. Such restrictions are derived in
two steps. In the ﬁrst step we look at dumps that have
the same attribute value. In this case, we can derive those
rl dump
enc1
enc2
s1 4 010100100111010000 0100 1001
s2 4 001100100001010010 0100 1001
s3 5 101110101011010100 0101 1101
s4 6 001010110111011011 0110 0101
s5 6 111010110011011001 0110 0101
Figure 1: Example of a dump set with three possible at-
tribute mappings.
positions in the bit strings that cannot occur in the encod-
ing of the attribute. In the second step we look at dumps
of which the attribute values differ, allowing us to deter-
mine positions in the bit strings that should occur in the
encoding of the attribute.
For the ﬁrst step, we start by observing that an attribute
a ∈ A induces a partition
bundles(a, S) =
{{s ∈ S | vala(s) = d} | d ∈ type(a)}
on a dump set S. An element of this partition is called a
bundle. Thus, a bundle is a set of dumps with the same
attribute value. For instance, Figure 1 shows three bun-
dles for attribute rides-left (rl), namely {s1, s2}, {s3},
and {s4, s5}.
The common set determines which bits in the dumps
of a dump set are equal if the attribute values are equal.
Deﬁnition 2. Let a ∈ A be an attribute and S ⊆ Bn
be a dump set. The common set of S with respect to a,
denoted by comm(a, S) ⊆ [0, n), is deﬁned by
comm(a, S) =
\b∈bundles(a,S)
{i ∈ [0, n) | ∀s, s′ ∈ b : si = s′
i}.
An example is given in Figure 3. The elements from
the common set are marked with an asterisk.
Given that the encoding of an attribute value is deter-
ministic, this gives an upper bound on the bits used for
this attribute.
Lemma 1. Let A be an attribute set and let f be an at-
tribute mapping for dump set S ⊆ Bn, then
1. ∀a ∈ A : f (a) ⊆ comm(a, S),
2. if Ia ⊆ [0, n) is a family of sets for a ∈ A, such
that f (a) ⊆ Ia ⊆ comm(a, S), then the function
f ′ : A → P([0, n)), deﬁned by f ′(a) 7→ Ia, is an
attribute mapping.
The ﬁrst property states that every possible attribute
mapping is enclosed in the common set, so one can re-
strict the search for attribute mappings to the locations in
the common set. The second property expresses that ev-
ery extension of an attribute mapping is also an attribute
mapping, provided that it does not extend beyond the
common set.
Next we look at dumps with different attribute values.
Injectivity of the encoding function implies that the en-
coding of two different values must differ at least in one
bit. This is captured in the notion of a dissimilarity set.
This set consists of all intervals that, for each pair of
dumps with a different attribute value, contain at least
one location where the two dumps differ.
Deﬁnition 3. Let a ∈ A be an attribute and S ⊆ Bn be
a dump set. The dissimilarity set of S with respect to a,
denoted by diss(a, S) ⊆ P([0, n)), is deﬁned by
diss(a, S) = {I ⊆ [0, n) |
∀s, s′ ∈ S : (vala(s) 6= vala(s′) =⇒
∃i ∈ I : si 6= s′
i)}
An example of the dissimilarity set is given in Fig-
ure 4. The next lemma expresses that every attribute
mapping is an element of the dissimilarity set. Conse-
quently, we can restrict the search for possible attribute
mappings to the elements of the dissimilarity set.
Lemma 2. Let A be an attribute set and let f be an
attribute mapping for dump set S ⊆ Bn, then ∀a ∈
A : f (a) ∈ diss(a, S).
An encoding of an attribute value a must at least con-
tain the indexes from one of the sets in diss(a, S). This
implies that we are mainly interested in the smallest sets
in diss(a, S), i.e. those sets of which no proper subset is
in diss(a, S). In order to make this precise, we introduce
some notation.
Let F be a set and let P ⊆ P(F ). We deﬁne the
superset closure of P , notation P , by P = {p ⊆ F |
∃p′ ∈ P : p′ ⊆ p}. A set P is superset closed if P = P .
We observe from its deﬁnition that diss(a, S) is superset
closed.
Given P ⊆ P(F ), we say that P is subset minimal
if for every p, p′ ∈ P , p′ ⊆ p =⇒ p′ = p. Thus, a
collection of sets is subset-minimal, if no set is a strict
subset of any other set in the collection.
Lemma 3. Let F be a ﬁnite set and let P ⊆ P(F ).
Then there exists a unique subset-minimal set Q such that
Q = P .
Given P as in Lemma 3, we denote the unique subset-
minimal set by smin(P ). Then, in order to determine
whether an encoding of an attribute contains at least the
indexes from one of the sets in diss(a, S), it sufﬁces