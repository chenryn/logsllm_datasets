_Noreturn的目的是告诉用户和编译器，这个特殊的函数不会把控制返回
主调程序。告诉用户以免滥用该函数，通知编译器可优化一些代码。
1248
16.9 C库
最初，并没有官方的C库。后来，基于UNIX的C实现成为了标准。ANSI
C委员会主要以这个标准为基础，开发了一个官方的标准库。在意识到C语
言的应用范围不断扩大后，该委员会重新定义了这个库，使之可以应用于其
他系统。
我们讨论过一些标准库中的 I/O 函数、字符函数和字符串函数。本章将
介绍更多函数。不过，首先要学习如何使用库。
16.9.1 访问C库
如何访问C库取决于实现，因此你要了解当前系统的一般情况。首先，
可以在多个不同的位置找到库函数。例如，getchar()函数通常作为宏定义在
stdio.h头文件中，而strlen()通常在库文件中。其次，不同的系统搜索这些函
数的方法不同。下面介绍3种可能的方法。
1.自动访问
在一些系统中，只需编译程序，就可使用一些常用的库函数。
记住，在使用函数之前必须先声明函数的类型，通过包含合适的头文件
即可完成。在描述库函数的用户手册中，会指出使用某函数时应包含哪个头
文件。但是在一些旧系统上，可能必须自己输入函数声明。再次提醒读者，
用户手册中指明了函数类型。另外，附录B“参考资料”中根据头文件分组，
总结了ANSI C库函数。
过去，不同的实现使用的头文件名不同。ANSI 
C标准把库函数分为多
个系列，每个系列的函数原型都放在一个特定的头文件中。
2.文件包含
如果函数被定义为宏，那么可以通过#include 指令包含定义宏函数的文
件。通常，类似的宏都放在合适名称的头文件中。例如，许多系统（包括所
1249
有的ANSI C系统）都有ctype.h文件，该文件中包含了一些确定字符性质（如
大写、数字等）的宏。
3.库包含
在编译或链接程序的某些阶段，可能需要指定库选项。即使在自动检查
标准库的系统中，也会有不常用的函数库。必须通过编译时选项显式指定这
些库。注意，这个过程与包含头文件不同。头文件提供函数声明或原型，而
库选项告诉系统到哪里查找函数代码。虽然这里无法涉及所有系统的细节，
但是可以提醒读者应该注意什么。
16.9.2 使用库描述
篇幅有限，我们无法讨论完整的库。但是，可以看几个具有代表性的示
例。首先，了解函数文档。
可以在多个地方找到函数文档。你所使用的系统可能有在线手册，集成
开发环境通常都有在线帮助。C实现的供应商可能提供描述库函数的纸质版
用户手册，或者把这些材料放在CD-ROM中或网上。有些出版社也出版C库
函数的参考手册。这些材料中，有些是一般材料，有些则是针对特定实现
的。本书附录B中提供了一个库函数的总结。
阅读文档的关键是看懂函数头。许多内容随时间变化而变化。下面是旧
的UNIX文档中，关于fread()的描述：
#include 
fread(ptr, sizeof(*ptr), nitems, stream)
FILE *stream;
首先，给出了应该包含的文件，但是没有给出fread()、ptr、sizeof(*ptr)
或nitems的类型。过去，默认类型都是int，但是从描述中可以看出ptr是一个
指针（在早期的C中，指针被作为整数处理）。参数stream声明为指向FILE
1250
的指针。上面的函数声明中的第2个参数看上去像是sizeof运算符，而实际上
这个参数的值应该是ptr所指向对象的大小。虽然用sizeof作为参数没什么问
题，但是用int类型的值作为参数更符合语法。
后来，上面的描述变成了：
#include 
int fread(ptr, size, nitems, stream;)
char *ptr;
int size, nitems;
FILE *stream;
现在，所有的类型都显式说明，ptr作为指向char的指针。
ANSI C90标准提供了下面的描述：
#include 
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
首先，使用了新的函数原型格式。其次，改变了一些类型。size_t 类型
被定义为 sizeof 运算符的返回值类型——无符号整数类型，通常是unsigned
int或unsigned long。stddef.h文件中包含了size_t类型的typedef或#define定义。
其他文件（包括stdio.h）通过包含stddef.h来包含这个定义。许多函数（包括
fread()）的实际参数中都要使用sizeof运算符，形式参数的size_t类型中正好
匹配这种常见的情况。
另外，ANSI C把指向void的指针作为一种通用指针，用于指针指向不同
类型的情况。例如，fread()的第1个参数可能是指向一个double类型数组的指
针，也可能是指向其他类型结构的指针。如果假设实际参数是一个指向内含
20个double类型元素数组的指针，且形式参数是指向void的指针，那么编译
1251
器会选用合适的类型，不会出现类型冲突的问题。
C99/C11标准在以上的描述中加入了新的关键字restric：
#include 
size_t fread(void * restrict ptr, size_t size,size_t nmemb, FILE * restrict
stream);
接下来，我们讨论一些特殊的函数。
1252
16.10 数学库
数学库中包含许多有用的数学函数。math.h头文件提供这些函数的原
型。表16.2中列出了一些声明在 math.h 中的函数。注意，函数中涉及的角度
都以弧度为单位（1 弧度=180/π=57.296 度）。参考资料 V“新增C99和C11标
准的ANSI C库”列出了C99和C11标准的所有函数。
表16.2 ANSI C标准的一些数学函数
16.10.1 三角问题
我们可以使用数学库解决一些常见的问题：把x/y坐标转换为长度和角
度。例如，在网格上画了一条线，该线条水平穿过了4个单元（x的值），垂
直穿过了3个单元（y的值）。那么，该线的长度（量）和方向是什么？根据
数学的三角公式可知：
大小 =square root (x2+y2)
1253
角度 = arctan(y/x)
数学库提供平方根函数和一对反正切函数，所以可以用C程序表示这个
问题。平方根函数是sqrt()，接受一个double类型的参数，并返回参数的平方
根，也是double类型。
atan()函数接受一个double类型的参数（即正切值），并返回一个角度
（该角度的正切值就是参数值）。但是，当线的x值和y值均为-5时，atan()
函数产生混乱。因为(-5)/(-5)得1，所以atan()返回45°，该值与x和y均为5时的
返回值相同。也就是说，atan()无法区分角度相同但反向相反的线（实际
上，atan()返回值的单位是弧度而不是度，稍后介绍两者的转换）。
当然，C库还提供了atan2()函数。它接受两个参数：x的值和y的值。这
样，通过检查x和y的正负号就可以得出正确的角度值。atan2()和 atan()均返
回弧度值。把弧度转换为度，只需将弧度值乘以180，再除以pi即可。pi的
值通过计算表达式4*atan(1)得到。程序清单16.13演示了这些步骤。另外，学
习该程序还复习了结构和typedef相关的知识。
程序清单16.14 rect_pol.c程序
/* rect_pol.c -- 把直角坐标转换为极坐标 */
#include 
#include 
#define RAD_TO_DEG (180/(4 * atan(1)))
typedef struct polar_v {
double magnitude;
double angle;
} Polar_V;
1254
typedef struct rect_v {
double x;
double y;
} Rect_V;
Polar_V rect_to_polar(Rect_V);
int main(void)
{
Rect_V input;
Polar_V result;
puts("Enter x and y coordinates; enter q to quit:");
while (scanf("%lf %lf", &input.x, &input.y) == 2)
{
result = rect_to_polar(input);
printf("magnitude = %0.2f, angle = %0.2f\n",
result.magnitude, result.angle);
}
puts("Bye.");
return 0;
}
1255
Polar_V rect_to_polar(Rect_V rv)
{
Polar_V pv;
pv.magnitude = sqrt(rv.x * rv.x + rv.y * rv.y);
if (pv.magnitude == 0)
pv.angle = 0.0;
else
pv.angle = RAD_TO_DEG * atan2(rv.y, rv.x);
return pv;
}
下面是运行该程序后的一个输出示例：
Enter x and y coordinates; enter q to quit:
10 10
magnitude = 14.14, angle = 45.00
-12 -5
magnitude = 13.00, angle = -157.38
q
Bye.
如果编译时出现下面的消息：
1256
Undefined: _sqrt
或
'sqrt': unresolved external
或者其他类似的消息，表明编译器链接器没有找到数学库。UNIX系统
会要求使用-lm标记（flag）指示链接器搜索数学库：
cc rect_pol.c –lm
注意，-lm标记在命令行的末尾。因为链接器在编译器编译C文件后才开
始处理。在Linux中使用GCC编译器可能要这样写：
gcc rect_pol.c -lm
16.10.2 类型变体
基本的浮点型数学函数接受double类型的参数，并返回double类型的
值。当然，也可以把float或 long double 类型的参数传递给这些函数，它们仍
然能正常工作，因为这些类型的参数会被转换成double类型。这样做很方
便，但并不是最好的处理方式。如果不需要双精度，那么用float类型的单精
度值来计算会更快些。而且把long double类型的值传递给double类型的形参
会损失精度，形参获得的值可能不是原来的值。为了解决这些潜在的问题，
C标准专门为float类型和long 
double类型提供了标准函数，即在原函数名前
加上f或l前缀。因此，sqrtf()是sqrt()的float版本，sqrtl()是sqrt()的long double
版本。
利用C11 新增的泛型选择表达式定义一个泛型宏，根据参数类型选择最
合适的数学函数版本。程序清单16.15演示了两种方法。
程序清单16.15 generic.c程序
// generic.c -- 定义泛型宏
1257
#include 
#include 
#define RAD_TO_DEG (180/(4 * atanl(1)))
// 泛型平方根函数
#define SQRT(X) _Generic((X),\
long double: sqrtl, \
default: sqrt, \
float: sqrtf)(X)
// 泛型正弦函数，角度的单位为度
#define SIN(X) _Generic((X),\
long double: sinl((X)/RAD_TO_DEG),\
default:  sin((X)/RAD_TO_DEG),\
float:   sinf((X)/RAD_TO_DEG)\
)
int main(void)
{
float x = 45.0f;
double xx = 45.0;
long double xxx = 45.0L;
1258
long double y = SQRT(x);
long double yy = SQRT(xx);
long double yyy = SQRT(xxx);
printf("%.17Lf\n", y);   // 匹配 float
printf("%.17Lf\n", yy);  // 匹配 default
printf("%.17Lf\n", yyy);  // 匹配 long double
int i = 45;
yy = SQRT(i);        // 匹配 default
printf("%.17Lf\n", yy);
yyy = SIN(xxx);       // 匹配 long double
printf("%.17Lf\n", yyy);
return 0;
}
下面是该程序的输出：
6.70820379257202148
6.70820393249936942
6.70820393249936909
6.70820393249936942
0.70710678118654752
1259
如上所示，SQRT(i)和SQRT(xx)的返回值相同，因为它们的参数类型分
别是int和double，所以只能与default标签对应。
有趣的一点是，如何让_Generic 
宏的行为像一个函数。SIN()的定义也
许提供了一个方法：每个带标号的值都是函数调用，所以_Generic表达式的
值是一个特定的函数调用，如sinf((X)/RAD_TO_DEG)，用传入SIN()的参数
替换X。
SQRT()的定义也许更简洁。_Generic表达式的值就是函数名，如sinf。
函数的地址可以代替该函数名，所以_Generic表达式的值是一个指向函数的
指针。然而，紧随整个_Generic表达式之后的是(X)，函数指针(参数)表示函
数指针。因此，这是一个带指定的参数的函数指针。
简而言之，对于 
SIN()，函数调用在泛型选择表达式内部；而对于
SQRT()，先对泛型选择表达式求值得一个指针，然后通过该指针调用它所
指向的函数。
16.10.3 tgmath.h库（C99）
C99标准提供的tgmath.h头文件中定义了泛型类型宏，其效果与程序清单
16.15类似。如果在math.h中为一个函数定义了3种类型（float、double和long
double）的版本，那么tgmath.h文件就创建一个泛型类型宏，与原来 
double
版本的函数名同名。例如，根据提供的参数类型，定义 
sqrt()宏展开为
sqrtf()、sqrt()或 sqrtl()函数。换言之，sqrt()宏的行为和程序清单 16.15 中的
SQRT()宏类似。
如果编译器支持复数运算，就会支持complex.h头文件，其中声明了与
复数运算相关的函数。例如，声明有 csqrtf()、csqrt()和 csqrtl()，这些函数
分别返回 float complex、double complex和long double complex类型的复数平
方根。如果提供这些支持，那么tgmath.h中的sqrt()宏也能展开为相应的复数