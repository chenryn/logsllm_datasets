by Trace. Note that the security of the construction is not impacted (the same security proofs still
apply almost verbatim).
Construction 24 (Inc. system from Pointcheval Sanders signatures). Let (KeyGenPS, CommitPS,
BlindSignPS, BlindRcvPS, VrfyPS) denote the Pointcheval Sanders signature scheme [PS16].
G(1λ) → pp generates and outputs a type 3 bilinear group pp = (G1, G2, GT, p, e) of prime order p.
Setup(pp) → ispp and chooses a random w ← G1 as a shared base for ElGamal encryption Πenc
and g, h ← G1 for the malleable commitment Πcmt (also ElGamal). Setup also generates a
Pedersen commitment key gDamg˚ard, hDamg˚ard ← G1 and a collision-resistant hash function H,
both for Damg˚ard’s technique [Dam00], enabling eﬃcient simulation of ZKAK protocols. We
omit these values in the following. It outputs ispp = (pp, w, g, h). The maximum point score is
vmax = p − 1.
KeyGen(ispp) → (upk, usk) generates an encryption key pair by choosing a random usk ← Zp and
computing upk = wusk. It outputs (upk, usk).
IssuerKeyGen(ispp) → (pk, sk) generates (pkPS, skPS) ← KeyGenPS(pp, 1n=4). We write the keys as
IssuerKeyGen outputs
skPS = (x, y1, . . . , y4) and pkPS = (g, gy1, . . . , gy4, ˜g, ˜gx, ˜gy1, . . . , ˜gy4).
pk = pkPS and sk = skPS.
Issue(ispp, pk, upk, sk) ↔ Join(ispp, pk, upk, usk) → (token, dsid) works as follows:
• The user chooses random dsidusr ← Zp and computes the commitment Cusr = (gdsid
usr
hopen, gopen) for a random open ← Zp. It sends Cusr to the issuer.
· hopen · gdsid
• The issuer replies with a random dsidprvdr ← Zp. Both issuer and user compute Cdsid =
(gdsid
usr
• The user sets dsid = dsidusr + dsidprvdr and chooses random dsrnd, r ← Zp, computes
Dsid = wdsid and sends c = (gy1)usk · (gy2)dsid · (gy3)dsrnd · gr to the issuer.
prvdr, gopen).
• The user proves ZKAK[(usk, dsid, dsrnd, r, open); c = (gy1)usk · (gy2)dsid · (gy3)dsrnd · gr ∧
·
1) = (gr0
, (c · gx)r0) for a random
upk = wusk ∧ Cdsid = (gdsid · hopen, gopen)].
• If the proof is accepted, the issuer sends σ0
r0 ← Z∗
p to the user.
PS = (σ0
0, σ0
1 · (σ0
0, σ0
• The user unblinds the signature as σPS = (σ0
• The user checks VrfyPS(pp, pkPS, (usk, dsid, dsrnd, 0), σPS) != 1. If the checks succeed, it
outputs token = (dsid, dsrnd, v = 0, σPS) and Dsid, otherwise it outputs ⊥.
0)−r).
Credit(ispp, pk, k, sk) ↔ Earn(ispp, pk, k, usk, token) → token∗ where token = (dsid, dsrnd, v, σPS =
(σ0, σ1)) works as follows:
He sends σ0
0, σ0
1 to the issuer.
1 · (σ0
σ0
0)−r0)) = 1]
• The user computes randomized signatures (σ0
0, σ0
1) = (σr0, (σ1 · σr0
0 )r) for r ← Z∗
p, r0 ← Zp.
• The user proves ZKAK[(usk, dsid, dsrnd, v, r0); VrfyPS(pp, pkPS, (usk, dsid, dsrnd, v), (σ0
0,
31
• If the proof accepts, the issuer sends (σ00
0 , σ00
1) = ((σ0
0)r00
, ((σ0
1) · (σ0
0)y4·k)r00) for a random
r00 ← Z∗
p to the user.
• The user unblinds the signature as σ = (σ∗
!= 1.
pkPS, (usk, dsid, dsrnd, v + k), σ∗
(dsid, dsrnd, v + k, σ∗
PS), otherwise it outputs ⊥.
PS)
0)−r0) and checks VrfyPS(pp,
1) = (σ00
0, σ∗
If the check succeeds, it outputs token∗ =
1 · (σ00
0 , σ00
(token∗, Dsid∗) ← Spend(ispp, pk, k, dsid, usk, token) ↔ Deduct(ispp, pk, k, dsid, sk) → (b, dstag) where
token = (dsid, dsrnd, v, cred) works as follows:
• The user chooses random dsid∗
usr ← Zp and computes the commitment Cusr
∗ = (gdsid∗
usr ·
hopen∗
, gopen∗) for a random open∗ ← Zp. It sends Cusr
∗ to the issuer.
issuer and user compute Cdsid
• The issuer replies with a random dsid∗
∗ = (gdsid∗
dsid∗
prvdr and dsrnd∗ ← Zp for his next
token and computes Dsid∗ = wdsid∗ and C = (gy1)usk ·(gy2)dsid∗ ·(gy3)dsrnd∗ ·(gy4)v−k · grC
for a random rC ← Zp.
prvdr ← Zp and a random challenge γ ← Zp. Both
usr · hopen∗ · g
usr + dsid∗
• The user prepares new values dsid∗ = dsid∗
prvdr, gopen∗).
• The user computes c = usk · γ + dsrnd.
• The user encrypts Dsid∗ as ctrace = (wr, (wr)usk · Dsid∗) for a random r ← Zp.
• The user randomizes his credential (σ0
• The user sends C, c, ctrace, σ0
0 , (σ1 · σr0
1 to the issuer and proves
0 )r00) for r00 ← Z∗
1) = (σr00
0, σ0
0, σ0
p, r0 ← Zp
∧VrfyPS(pp, pkPS, (usk, dsid, dsrnd, v), (σ0
ZKAK[(usk, dsrnd, v, dsid∗, dsrnd∗, r0, r, rC, open∗);
c = usk · γ + dsrnd
0, σ0
0)−r0)) = 1
∧v ≥ k
∧ctrace = (wr, (wr)usk · wdsid∗)
∧C = (gy1)usk · (gy2)dsid∗ · (gy3)dsrnd∗ · (gy4)v−k · grC
, gopen∗)]
∗ = (gdsid∗ · hopen∗
1 · (σ0
∧Cdsid
If the proof fails, the issuer aborts and outputs (0,⊥).
r0000 ← Z∗
• If the proof accepts, the issuer sends σ00
1) = (gr0000
p to the user and outputs (1, dstag = (c, γ, ctrace)).
• The user unblinds the signature as σ∗
0)−rC).
• The user checks VrfyPS(pp, pkPS, (usk, dsid∗, dsrnd∗, v−k), σ∗
0 , σ00
1 · (σ00
PS = (σ00
PS = (σ00
it outputs token∗ = (dsid∗, dsrnd∗, v − k, σ∗
0 , σ00
PS) != 1. If the check succeeds,
PS) and Dsid∗, otherwise it outputs ⊥.
, (C · gx)r0000) for a random
Link(ispp, dstag, dstag0) → (upk, dslink) given dstag = (c, γ, ctrace) and dstag0 = (c0, γ0, ctrace0), out-
puts dslink = (c − c0)/(γ − γ0) and upk = wdslink.
Trace(ispp, dslink, dstag) → Dsid∗ for dstag = (c, γ, (ctrace0, ctrace1)) computes Dsid∗ = ctrace1 ·
ctrace−dslink
.
0
VrfyDs(ispp, dslink, upk) → b outputs 1 iﬀ wdslink = upk.
32
F Security Proofs for the Incentive System
F.1 Correctness in the Presence of Adversarial Users
For completeness, we deﬁne correctness in the presence of adversarial users, which rules out that
adversarial users can interfere with operations between honest users and an honest provider.
Deﬁnition 25 (Correctness in the presence of adversarial users). Let Π be an incentive system.
Consider the following experiment Expadv-corr(Π,A, λ):
• The experiment sets up ispp ← Setup(G(1λ)) and calls the oracle pk ← IssuerKeyGen(). It
hands ispp and pk to A.
• A may query the following oracles
– Issue(·)
– Credit(·)
– Deduct(·)
– DBsync(·)
– Keygen()
– u 7→ Join(u, pk) ↔ Issue(upku)
– (u, k) 7→ Earn(u, k) ↔ Credit(k)
– (u, k) 7→ Spend(u, k) ↔ Deduct(k)
• Eventually, A halts.
• The experiment outputs 1 iﬀ DB contains some current dsid u of some honest user u (i.e. user
u’s next spend operation would be detected double-spending as dsid u is already in DB).
We say that Π has correctness in the presence of adversarial users if for all ppt A, there exists a
negligible function negl s.t. Pr[Expadv-corr(Π,A, λ) = 1] ≤ negl(λ) for all λ.
Note that correctness in the presence of adversarial users is not implied by correctness, soundness
and framing resistance. Correctness does not imply anything for the case in which there are
adversarial users. Framing resistance implies that u cannot be blamed for the double-spending (it
may still happen that the online double-spending prevention prevents u from spending his coins).
Soundness implies that after u spends his coin, someone can be blamed for it. This does not rule
out that a corrupted user is able to inject u’s dsid into DB while taking the blame. However, this
would essentially constitute a denial of service attack on u, which is why correctness in the presence
of adversarial users is a desirable property.
Theorem 26. If Zp is super-poly, then Πinsy (Construction 23) is correct in the presence of adversarial
users (Deﬁnition 25).
Proof. Assume there are k dsid entries in DB and ‘ honest users u at the point where A halts. For
honest users, dsid u is uniformly random in Zp by construction. Furthermore, A’s view is independent
of the current (dsid u)u honest as none of the oracles output any information about them. So the
probability that some dsid u is one of the k dsid in DB is at most ‘ · k/|Zp|, which is negligible as ‘
and k are polynomial and |Zp| is super-poly.
F.2 Incentive System Anonymity
In the following we proof Theorem 14. For the proof of the theorem we have to look at the experiment
Expano-X (Fig. 4) instantiated for the incentive system Πinsy. On a high level, in Πinsy the important
information for anonymity are the user speciﬁc values. Ignoring the commitments and ciphertexts,
we could solely rely on the simulatability of the protocols to proof the theorem. However, the
commitment and encryption scheme only guarantees computationally hiding and key-ind. CPA
security.
33
1
0