# Title: Transparency Overlays and Applications
# Authors: Melissa Chase and Sarah Meiklejohn
# Full version of an extended abstract published in ACM CCS 2016.

## Abstract
In this paper, we initiate a formal study of transparency, which has become increasingly critical for systems that people trust. We introduce the concept of a transparency overlay, which can be applied to any system to provide provable transparency guarantees. We then apply this overlay to two settings: Certificate Transparency (CT) and Bitcoin. In the Bitcoin setting, our transparency overlay eliminates the need for mining and allows users to store a single small value instead of the entire blockchain. Our transparency overlay is constructed using a signature scheme and a new primitive called a dynamic list commitment, which can be instantiated with a collision-resistant hash function.

## 1. Introduction
Over the past decade, the trust placed in centralized mechanisms run by governments, network operators, and financial institutions has eroded, with various incidents demonstrating that high integrity cannot be achieved solely through trust in one or a few parties. As a response to this erosion, two alternative architectures have emerged: decentralized systems where no central point of trust exists, and increased pressure on central entities to provide more openness and accountability.

A prominent example of a decentralized system is Bitcoin, launched in January 2009. Bitcoin is a monetary system not backed by any government, managed through a consensus mechanism over a peer-to-peer network. There is no single entity that issues bitcoins or validates transactions, and users operate using pseudonyms. Bitcoin's success is evident: its market capitalization exceeds $8 billion, and it has inspired numerous alternative cryptocurrencies. Payment gateways like Bitpay and Coinbase allow thousands of vendors to accept Bitcoin, and major financial institutions such as JPMorgan Chase and Nasdaq have announced plans to develop Bitcoin-based technologies.

While Bitcoin and similar systems have achieved significant success, their rejection of all forms of central authority limits their potential for widespread adoption. Consequently, technological solutions have emerged to provide more visibility into currently centralized systems. One such solution is Certificate Transparency (CT), which addresses shortcomings in SSL certificate authorities (CAs). CT empowers users to verify the correct functioning of systems they interact with daily, such as secure websites. Unlike Bitcoin, CT does not substantially alter the underlying infrastructure but provides a way to monitor and audit CAs, ensuring bad certificates are detected quickly and misbehaving authorities are identified and excluded.

Both Bitcoin and CT rely on transparency to achieve integrity. In Bitcoin, the blockchain is transparent, making all transactions globally visible. Similarly, CT maintains a globally visible log of issued certificates. Both systems adopt a distributed approach to avoid placing trust in a single entity, providing public auditability and allowing users to detect misbehavior.

### 1.1 Our Contributions
Systems like Bitcoin and CT offer important transparency benefits, but the similarities and differences between these benefits are not well understood. No formal analysis has demonstrated the level of transparency they provide or how this transparency delivers the intended benefits. In this paper, we initiate a formal study to compare the guarantees provided by these systems and to create an abstract transparency overlay that can be used in various applications beyond financial transactions and certificate issuance.

To analyze these protocols and construct a transparency overlay, we first formalize a primitive called a dynamic list commitment (DLC). A DLC generalizes rolling hash chains and hash trees and serves as the foundation for our transparency overlay. After defining this primitive, we present transparency overlays in Section 4, inspired by the design of CT. We begin with a formal model for transparency overlays, followed by an abstract transparency overlay and a proof of its security.

With this secure transparency overlay, we demonstrate in Section 5 that CT is a secure transparency overlay. We also show that our formal notion of security implies more intuitive notions of security in this setting and discuss practical considerations.

In Section 6, we turn our attention to the Bitcoin protocol. We do not use the protocol directly, as it cannot satisfy our notions of security, but instead plug crucial components into our abstract transparency overlay. This allows us to achieve a provably secure transparency overlay for Bitcoin and enables regular users to operate more efficiently by outsourcing some trust to a distributed set of parties. This result shows that full decentralization is not necessary if users are willing to trust a distributed set of parties, and the same goals can be achieved with a CT-like structure, eliminating the need for extensive mining.

### 1.2 Related Work
We consider related research on the applications of Bitcoin and CT, and the underlying primitives used to construct our transparency overlay.

Recent work has formalized properties of the Bitcoin network and used Bitcoin to obtain provably secure guarantees in other settings. For example, Garay et al. [17] analyzed the backbone protocol of Bitcoin, and Bentov and Kumaresan [8] provided a two-party computation built on top of Bitcoin. Andrychowicz et al. [3] used Bitcoin to build a provably fair system for multi-party computation, and Andrychowicz and Dziembowski [2] formalized fairness properties from Bitcoin to construct a broadcast protocol. On the privacy side, the Zerocash project [6] provides a cryptocurrency with provable anonymity, and Garman et al. [18] adapted Bitcoin to achieve anonymous credentials. To our knowledge, this is the first paper to focus on the transparency property of Bitcoin rather than its privacy or fairness guarantees.

Aside from CT, other solutions exist for changing how we interact with CAs. Many of these require a ground-up redesign of the CA ecosystem, which is why we chose to examine CT and use it as inspiration for our overlay system. Fromknecht et al. [16] propose a decentralized PKI based on Bitcoin and Namecoin, while CONIKS [24] provides a privacy-preserving solution for logging user certificates. The Accountable Key Infrastructure [20] and ARPKI [4] focus on preventing rather than just detecting misbehavior. Ryan [33] extended CT to handle certificate revocation, and Dowling et al. [15] provided a different security model for CT, showing that if certain properties of Merkle trees are satisfied, CT is provably secure in their model.

The main primitive underlying our transparency overlay, a dynamic list commitment, is a generalization of a Merkle tree [26] and is similar to the tamper-evident log defined by Crosby and Wallach [13]. It is also related to authenticated data structures (ADSs) [1, 32, 31] and cryptographic accumulators [7, 12, 11, 23]. Dynamic list commitments differ in terms of the security model, allowing more efficient constructions while still satisfying a notion of provable security.

## 2. Background

### 2.1 Certificate Transparency
Certificate Transparency (CT) was proposed in 2011 by Ben Laurie and Adam Langley to increase transparency in the process of issuing certificates. CT introduces three additional actors: a log server, an auditor, and a monitor. The log server keeps track of issued certificates, the auditor verifies whether given certificates are in the log, and the monitor checks the quality of the certificates in the log. In Section 4, we will see how our design of a transparency overlay is heavily inspired by the CT design.

### 2.2 Bitcoin
Bitcoin is a decentralized cryptocurrency introduced in 2008 and deployed in January 2009. Bitcoin operates as follows: a sender, identified by a pseudonym or address, creates a transaction to transfer bitcoins to a receiver. The transaction is signed to ensure only the sender can give away their bitcoins. The sender broadcasts the transaction to the Bitcoin network, where a miner seals it into a block and broadcasts the block to the network. The receiver can then confirm the transaction and its position in the blockchain, verifying ownership.

Because the Bitcoin blockchain is globally visible, it already provides a higher degree of transparency compared to traditional financial transactions. In Section 6, we apply a transparency overlay to Bitcoin, demonstrating a more efficient way for users to participate in transactions and eliminate the need for hashing.

## 3. Definitions and Notation

### 3.1 Preliminaries
- \( |x| \) denotes the bit length of a binary string \( x \).
- \( |S| \) denotes the size of a finite set \( S \), and \( x \leftarrow S \) denotes sampling a member uniformly from \( S \) and assigning it to \( x \).
- \( \lambda \in \mathbb{N} \) denotes the security parameter, and \( 1^\lambda \) denotes its unary representation.
- \( \varepsilon \) denotes the null value.
- Algorithms are randomized unless explicitly noted otherwise. "PT" stands for "polynomial-time."
- \( y \leftarrow A(x_1, \ldots, x_n; R) \) denotes running algorithm \( A \) on inputs \( x_1, \ldots, x_n \) and random coins \( R \) and assigning its output to \( y \).
- \( y \leftarrow A(x_1, \ldots, x_n) \) denotes \( y \leftarrow A(x_1, \ldots, x_n; R) \) for coins \( R \) sampled uniformly at random.
- \( [A(x_1, \ldots, x_n)] \) denotes the set of values that have positive probability of being output by \( A \) on inputs \( x_1, \ldots, x_n \).
- Adversaries are algorithms.
- For interactive protocols, we use the notation of Bellare and Keelveedhi [5].
- We use games in security definitions and proofs. A game \( G \) has a main procedure whose output is the output of the game. \( \Pr[G] \) denotes the probability that this output is true.

### 3.2 Dynamic List Commitments
We define a dynamic list commitment (DLC), which allows committing to a list of elements such that:
1. The list can only be updated by appending new elements to the end.
2. Given the list commitment, one can efficiently prove both the append-only property and that a given element is in the list.

A common example of a DLC is a Merkle tree, where the root hash acts as the commitment. Our basic formalization is similar to the definition of a tamper-evident history system [13], but we also include an augmented version for ordered lists.

#### 3.2.1 Basic Formalization for General Lists
We define a dynamic list commitment (DLC) as a collection of the following algorithms:
- \( c \leftarrow \text{Com}(list) \) creates the commitment \( c \) and \( 0/1 \leftarrow \text{CheckCom}(c, list) \) checks that \( c \) is a commitment to \( list \).
- \( c_{\text{new}} \leftarrow \text{Append}(list_\Delta, c_{\text{old}}) \) updates the commitment to account for new elements in \( list_\Delta \).
- \( \pi \leftarrow \text{ProveAppend}(c_{\text{old}}, c_{\text{new}}, list) \) proves that \( c_{\text{new}} \) was obtained from \( c_{\text{old}} \) by appending elements to an earlier version of \( list \), and \( 0/1 \leftarrow \text{CheckAppend}(c_{\text{old}}, c_{\text{new}}, \pi) \) checks this proof.
- \( \pi \leftarrow \text{ProveIncl}(c, elmt, list) \) proves that \( elmt \) is in \( list \) (as represented by \( c \)), and \( 0/1 \leftarrow \text{CheckIncl}(c, elmt, \pi) \) checks this proof.

**Definition 3.1.** A DLC is correct if the following properties are satisfied for all lists \( list \) and \( list_\Delta \), for all \( elmt \in list \), and for \( c \leftarrow \text{Com}(list) \):
- \( \text{CheckCom}(c, list) = 1 \)
- \( \text{CheckIncl}(c, elmt, \text{ProveIncl}(c, elmt, list)) = 1 \)
- \( \text{Append}(list_\Delta, c) = \text{Com}(list \parallel list_\Delta) \)
- \( \text{CheckAppend}(c, \text{Append}(list_\Delta, c), \text{ProveAppend}(c, \text{Append}(list_\Delta, c), list)) = 1 \)

A DLC is compact if \( |\text{Com}(list)| \ll |list| \) for all sufficiently long lists \( list \). For security, intuitively, a DLC should prevent adversaries from creating valid commitments to lists that were not created by the honest party.