### 3.17.1 BIND_VARIABLE

The `BIND_VARIABLE` procedure allows you to associate a value with an IN or IN OUT bind variable in a SQL command.

#### Syntax
```sql
BIND_VARIABLE(
    c INTEGER,
    name VARCHAR2,
    value { BLOB | CLOB | DATE | FLOAT | INTEGER | NUMBER | TIMESTAMP | VARCHAR2 },
    [out_value_size INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor for the SQL command with bind variables.
- **name**: Name of the bind variable in the SQL command.
- **value**: Value to be assigned.
- **out_value_size**: (Optional) If `name` is an IN OUT variable, defines the maximum length of the output value. If not specified, the length of `value` is assumed.

#### Examples
The following anonymous block uses bind variables to insert a row into the `emp` table.

```sql
DECLARE
    curid INTEGER;
    v_sql VARCHAR2(150) := 'INSERT INTO emp VALUES (:p_empno, :p_ename, :p_job, :p_mgr, :p_hiredate, :p_sal, :p_comm, :p_deptno)';
    v_empno emp.empno%TYPE := 9001;
    v_ename emp.ename%TYPE := 'JONES';
    v_job emp.job%TYPE := 'SALESMAN';
    v_mgr emp.mgr%TYPE := 7369;
    v_hiredate emp.hiredate%TYPE := TO_DATE('13-DEC-07', 'DD-MON-YY');
    v_sal emp.sal%TYPE := 8500.00;
    v_comm emp.comm%TYPE := 1500.00;
    v_deptno emp.deptno%TYPE := 40;
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    
    DBMS_SQL.BIND_VARIABLE(curid, ':p_empno', v_empno);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_ename', v_ename);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_job', v_job);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_mgr', v_mgr);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_hiredate', v_hiredate);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_sal', v_sal);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_comm', v_comm);
    DBMS_SQL.BIND_VARIABLE(curid, ':p_deptno', v_deptno);
    
    v_status := DBMS_SQL.EXECUTE(curid);
    DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
```
**Output:**
```
Number of rows processed: 1
```

### 3.17.2 BIND_VARIABLE_CHAR

The `BIND_VARIABLE_CHAR` procedure associates a CHAR value with an IN or IN OUT bind variable in a SQL command.

#### Syntax
```sql
BIND_VARIABLE_CHAR(
    c INTEGER,
    name VARCHAR2,
    value CHAR,
    [out_value_size INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor for the SQL command with bind variables.
- **name**: Name of the bind variable in the SQL command.
- **value**: Value of type CHAR to be assigned.
- **out_value_size**: (Optional) If `name` is an IN OUT variable, defines the maximum length of the output value. If not specified, the length of `value` is assumed.

### 3.17.3 BIND_VARIABLE_RAW

The `BIND_VARIABLE_RAW` procedure associates a RAW value with an IN or IN OUT bind variable in a SQL command.

#### Syntax
```sql
BIND_VARIABLE_RAW(
    c INTEGER,
    name VARCHAR2,
    value RAW,
    [out_value_size INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor for the SQL command with bind variables.
- **name**: Name of the bind variable in the SQL command.
- **value**: Value of type RAW to be assigned.
- **out_value_size**: (Optional) If `name` is an IN OUT variable, defines the maximum length of the output value. If not specified, the length of `value` is assumed.

### 3.17.4 CLOSE_CURSOR

The `CLOSE_CURSOR` procedure closes an open cursor, releasing the resources allocated to it and making it unusable.

#### Syntax
```sql
CLOSE_CURSOR(c IN OUT INTEGER)
```

#### Parameters
- **c**: Cursor ID of the cursor to be closed.

#### Examples
The following example closes a previously opened cursor:

```sql
DECLARE
    curid INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    -- Other operations...
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
```

### 3.17.5 COLUMN_VALUE

The `COLUMN_VALUE` procedure defines a variable to receive a value from a cursor.

#### Syntax
```sql
COLUMN_VALUE(
    c INTEGER,
    position INTEGER,
    value OUT { BLOB | CLOB | DATE | FLOAT | INTEGER | NUMBER | TIMESTAMP | VARCHAR2 },
    [column_error OUT NUMBER],
    [actual_length OUT INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor returning data to the variable being defined.
- **position**: Position within the cursor of the returned data. The first value in the cursor is position 1.
- **value**: Variable receiving the data returned in the cursor by a prior fetch call.
- **column_error**: (Optional) Error number associated with the column, if any.
- **actual_length**: (Optional) Actual length of the data prior to any truncation.

#### Examples
The following example shows the portion of an anonymous block that receives the values from a cursor using the `COLUMN_VALUE` procedure.

```sql
DECLARE
    curid INTEGER;
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    v_hiredate DATE;
    v_sal NUMBER(7,2);
    v_comm NUMBER(7,2);
    v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, comm FROM emp';
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    
    LOOP
        v_status := DBMS_SQL.FETCH_ROWS(curid);
        EXIT WHEN v_status = 0;
        
        DBMS_SQL.COLUMN_VALUE(curid, 1, v_empno);
        DBMS_SQL.COLUMN_VALUE(curid, 2, v_ename);
        DBMS_SQL.COLUMN_VALUE(curid, 3, v_hiredate);
        DBMS_SQL.COLUMN_VALUE(curid, 4, v_sal);
        DBMS_SQL.COLUMN_VALUE(curid, 5, v_comm);
        
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename, 10) || ' ' ||
                             TO_CHAR(v_hiredate, 'yyyy-mm-dd') || ' ' ||
                             TO_CHAR(v_sal, '9,999.99') || ' ' ||
                             TO_CHAR(NVL(v_comm, 0), '9,999.99'));
    END LOOP;
    
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
```

### 3.17.6 COLUMN_VALUE_CHAR

The `COLUMN_VALUE_CHAR` procedure defines a variable to receive a CHAR value from a cursor.

#### Syntax
```sql
COLUMN_VALUE_CHAR(
    c INTEGER,
    position INTEGER,
    value OUT CHAR,
    [column_error OUT NUMBER],
    [actual_length OUT INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor returning data to the variable being defined.
- **position**: Position within the cursor of the returned data. The first value in the cursor is position 1.
- **value**: Variable of data type CHAR receiving the data returned in the cursor by a prior fetch call.
- **column_error**: (Optional) Error number associated with the column, if any.
- **actual_length**: (Optional) Actual length of the data prior to any truncation.

### 3.17.7 COLUMN_VALUE_RAW

The `COLUMN_VALUE_RAW` procedure defines a variable to receive a RAW value from a cursor.

#### Syntax
```sql
COLUMN_VALUE_RAW(
    c INTEGER,
    position INTEGER,
    value OUT RAW,
    [column_error OUT NUMBER],
    [actual_length OUT INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor returning data to the variable being defined.
- **position**: Position within the cursor of the returned data. The first value in the cursor is position 1.
- **value**: Variable of data type RAW receiving the data returned in the cursor by a prior fetch call.
- **column_error**: (Optional) Error number associated with the column, if any.
- **actual_length**: (Optional) Actual length of the data prior to any truncation.

### 3.17.8 DEFINE_COLUMN

The `DEFINE_COLUMN` procedure defines a column or expression in the SELECT list that is to be returned and retrieved in a cursor.

#### Syntax
```sql
DEFINE_COLUMN(
    c INTEGER,
    position INTEGER,
    column { BLOB | CLOB | DATE | FLOAT | INTEGER | NUMBER | TIMESTAMP | VARCHAR2 },
    [column_size INTEGER]
)
```

#### Parameters
- **c**: Cursor ID of the cursor associated with the SELECT command.
- **position**: Position of the column or expression in the SELECT list that is being defined.
- **column**: A variable that is of the same data type as the column or expression in position `position` of the SELECT list.
- **column_size**: (Optional) The maximum length of the returned data. `column_size` must be specified only if `column` is VARCHAR2. Returned data exceeding `column_size` is truncated to `column_size` characters.

#### Examples
The following shows how the `empno`, `ename`, `hiredate`, `sal`, and `comm` columns of the `emp` table are defined with the `DEFINE_COLUMN` procedure.

```sql
DECLARE
    curid INTEGER;
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    v_hiredate DATE;
    v_sal NUMBER(7,2);
    v_comm NUMBER(7,2);
    v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, comm FROM emp';
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    
    DBMS_SQL.DEFINE_COLUMN(curid, 1, v_empno);
    DBMS_SQL.DEFINE_COLUMN(curid, 2, v_ename, 10);
    DBMS_SQL.DEFINE_COLUMN(curid, 3, v_hiredate);
    DBMS_SQL.DEFINE_COLUMN(curid, 4, v_sal);
    DBMS_SQL.DEFINE_COLUMN(curid, 5, v_comm);
    
    -- Other operations...
END;
```

### 3.17.9 DEFINE_COLUMN_CHAR

The `DEFINE_COLUMN_CHAR` procedure defines a CHAR column or expression in the SELECT list that is to be returned and retrieved in a cursor.

#### Syntax
```sql
DEFINE_COLUMN_CHAR(
    c INTEGER,
    position INTEGER,
    column CHAR,
    column_size INTEGER
)
```

#### Parameters
- **c**: Cursor ID of the cursor associated with the SELECT command.
- **position**: Position of the column or expression in the SELECT list that is being defined.
- **column**: A CHAR variable.
- **column_size**: The maximum length of the returned data. Returned data exceeding `column_size` is truncated to `column_size` characters.

### 3.17.10 DEFINE_COLUMN_RAW

The `DEFINE_COLUMN_RAW` procedure defines a RAW column or expression in the SELECT list that is to be returned and retrieved in a cursor.

#### Syntax
```sql
DEFINE_COLUMN_RAW(
    c INTEGER,
    position INTEGER,
    column RAW,
    column_size INTEGER
)
```

#### Parameters
- **c**: Cursor ID of the cursor associated with the SELECT command.
- **position**: Position of the column or expression in the SELECT list that is being defined.
- **column**: A RAW variable.
- **column_size**: The maximum length of the returned data. Returned data exceeding `column_size` is truncated to `column_size` characters.

### 3.17.11 DESCRIBE_COLUMNS

The `DESCRIBE_COLUMNS` procedure describes the columns returned by a cursor.

#### Syntax
```sql
DESCRIBE_COLUMNS(
    c INTEGER,
    col_cnt OUT INTEGER,
    desc_t OUT DESC_TAB
)
```

#### Parameters
- **c**: Cursor ID of the cursor.
- **col_cnt**: The number of columns in the cursor result set.
- **desc_t**: The table that contains a description of each column returned by the cursor. The descriptions are of type `DESC_REC`, and contain the following values:
  - **col_type**: INTEGER
  - **col_max_len**: INTEGER
  - **col_name**: VARCHAR2(128)
  - **col_name_len**: INTEGER
  - **col_schema_name**: VARCHAR2(128)
  - **col_schema_name_len**: INTEGER
  - **col_precision**: INTEGER
  - **col_scale**: INTEGER
  - **col_charsetid**: INTEGER
  - **col_charsetform**: INTEGER
  - **col_null_ok**: BOOLEAN

### 3.17.12 EXECUTE

The `EXECUTE` function executes a parsed SQL command or SPL block.

#### Syntax
```sql
status INTEGER EXECUTE(c INTEGER)
```

#### Parameters
- **c**: Cursor ID of the parsed SQL command or SPL block to be executed.
- **status**: Number of rows processed if the SQL command was DELETE, INSERT, or UPDATE. `status` is meaningless for all other commands.

#### Examples
The following anonymous block inserts a row into the `dept` table.

```sql
DECLARE
    curid INTEGER;
    v_sql VARCHAR2(50) := 'INSERT INTO dept VALUES (50, ''HR'', ''LOS ANGELES'')';
    v_status INTEGER;
BEGIN
    curid := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
    v_status := DBMS_SQL.EXECUTE(curid);
    DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
    DBMS_SQL.CLOSE_CURSOR(curid);
END;
```
**Output:**
```
Number of rows processed: 1
```

### 3.17.13 EXECUTE_AND_FETCH

The `EXECUTE_AND_FETCH` function executes a parsed SELECT command and fetches one row.

#### Syntax
```sql
status INTEGER EXECUTE_AND_FETCH(
    c INTEGER,
    [exact BOOLEAN]
)
```

#### Parameters
- **c**: Cursor ID of the cursor for the SELECT command to be executed.
- **exact**: (Optional) If set to TRUE, an exception is thrown if the number of rows in the result set is not exactly equal to 1. If set to FALSE, no exception is thrown. The default is FALSE. A `NO_DATA_FOUND` exception is thrown if `exact` is TRUE and there are no rows in the result set. A `TOO_MANY_ROWS` exception is thrown if `exact` is TRUE and there is more than one row in the result set.
- **status**: Returns 1 if a row was successfully fetched, 0 if no rows to fetch. If an exception occurs, it is raised.