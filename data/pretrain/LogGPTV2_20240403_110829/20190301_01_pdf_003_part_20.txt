or IN OUT bind variable in a SQL command.
BIND_VARIABLE(c INTEGER, name VARCHAR2,
value { BLOB | CLOB | DATE | FLOAT | INTEGER | NUMBER |
TIMESTAMP | VARCHAR2 }
[, out_value_size INTEGER ])
Parameters
c
Cursor ID of the cursor for the SQL command with bind variables.
name
Name of the bind variable in the SQL command.
value
Value to be assigned.
out_value_size
If name is an IN OUT variable, defines the maximum length of the output value.
If not specified, the length of value is assumed.
Examples
The following anonymous block uses bind variables to insert a row into the emp table.
DECLARE
curid INTEGER;
v_sql VARCHAR2(150) := 'INSERT INTO emp VALUES ' ||
'(:p_empno, :p_ename, :p_job, :p_mgr, ' ||
':p_hiredate, :p_sal, :p_comm, :p_deptno)';
v_empno emp.empno%TYPE;
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
v_mgr emp.mgr%TYPE;
v_hiredate emp.hiredate%TYPE;
v_sal emp.sal%TYPE;
v_comm emp.comm%TYPE;
v_deptno emp.deptno%TYPE;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 210
Database Compatibility for Oracle® Developers
Built-in Package Guide
v_status INTEGER;
BEGIN
curid := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(curid,v_sql,DBMS_SQL.native);
v_empno := 9001;
v_ename := 'JONES';
v_job := 'SALESMAN';
v_mgr := 7369;
v_hiredate := TO_DATE('13-DEC-07','DD-MON-YY');
v_sal := 8500.00;
v_comm := 1500.00;
v_deptno := 40;
DBMS_SQL.BIND_VARIABLE(curid,':p_empno',v_empno);
DBMS_SQL.BIND_VARIABLE(curid,':p_ename',v_ename);
DBMS_SQL.BIND_VARIABLE(curid,':p_job',v_job);
DBMS_SQL.BIND_VARIABLE(curid,':p_mgr',v_mgr);
DBMS_SQL.BIND_VARIABLE(curid,':p_hiredate',v_hiredate);
DBMS_SQL.BIND_VARIABLE(curid,':p_sal',v_sal);
DBMS_SQL.BIND_VARIABLE(curid,':p_comm',v_comm);
DBMS_SQL.BIND_VARIABLE(curid,':p_deptno',v_deptno);
v_status := DBMS_SQL.EXECUTE(curid);
DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
DBMS_SQL.CLOSE_CURSOR(curid);
END;
Number of rows processed: 1
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 211
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.2 BIND_VARIABLE_CHAR
The BIND_VARIABLE_CHAR procedure provides the capability to associate a CHAR value
with an IN or IN OUT bind variable in a SQL command.
BIND_VARIABLE_CHAR(c INTEGER, name VARCHAR2, value CHAR
[, out_value_size INTEGER ])
Parameters
c
Cursor ID of the cursor for the SQL command with bind variables.
name
Name of the bind variable in the SQL command.
value
Value of type CHAR to be assigned.
out_value_size
If name is an IN OUT variable, defines the maximum length of the output value.
If not specified, the length of value is assumed.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 212
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.3 BIND VARIABLE RAW
The BIND_VARIABLE_RAW procedure provides the capability to associate a RAW value
with an IN or IN OUT bind variable in a SQL command.
BIND_VARIABLE_RAW(c INTEGER, name VARCHAR2, value RAW
[, out_value_size INTEGER ])
Parameters
c
Cursor ID of the cursor for the SQL command with bind variables.
name
Name of the bind variable in the SQL command.
value
Value of type RAW to be assigned.
out_value_size
If name is an IN OUT variable, defines the maximum length of the output value.
If not specified, the length of value is assumed.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 213
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.4 CLOSE_CURSOR
The CLOSE_CURSOR procedure closes an open cursor. The resources allocated to the
cursor are released and it can no longer be used.
CLOSE_CURSOR(c IN OUT INTEGER)
Parameters
c
Cursor ID of the cursor to be closed.
Examples
The following example closes a previously opened cursor:
DECLARE
curid INTEGER;
BEGIN
curid := DBMS_SQL.OPEN_CURSOR;
.
.
.
DBMS_SQL.CLOSE_CURSOR(curid);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 214
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.5 COLUMN_VALUE
The COLUMN_VALUE procedure defines a variable to receive a value from a cursor.
COLUMN_VALUE(c INTEGER, position INTEGER, value OUT { BLOB |
CLOB | DATE | FLOAT | INTEGER | NUMBER | TIMESTAMP | VARCHAR2 }
[, column_error OUT NUMBER [, actual_length OUT INTEGER ]])
Parameters
c
Cursor id of the cursor returning data to the variable being defined.
position
Position within the cursor of the returned data. The first value in the cursor is
position 1.
value
Variable receiving the data returned in the cursor by a prior fetch call.
column_error
Error number associated with the column, if any.
actual_length
Actual length of the data prior to any truncation.
Examples
The following example shows the portion of an anonymous block that receives the values
from a cursor using the COLUMN_VALUE procedure.
DECLARE
curid INTEGER;
v_empno NUMBER(4);
v_ename VARCHAR2(10);
v_hiredate DATE;
v_sal NUMBER(7,2);
v_comm NUMBER(7,2);
v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, ' ||
'comm FROM emp';
v_status INTEGER;
BEGIN
.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 215
Database Compatibility for Oracle® Developers
Built-in Package Guide
.
.
LOOP
v_status := DBMS_SQL.FETCH_ROWS(curid);
EXIT WHEN v_status = 0;
DBMS_SQL.COLUMN_VALUE(curid,1,v_empno);
DBMS_SQL.COLUMN_VALUE(curid,2,v_ename);
DBMS_SQL.COLUMN_VALUE(curid,3,v_hiredate);
DBMS_SQL.COLUMN_VALUE(curid,4,v_sal);
DBMS_SQL.COLUMN_VALUE(curid,4,v_sal);
DBMS_SQL.COLUMN_VALUE(curid,5,v_comm);
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || RPAD(v_ename,10) || ' ' ||
TO_CHAR(v_hiredate,'yyyy-mm-dd') || ' ' ||
TO_CHAR(v_sal,'9,999.99') || ' ' ||
TO_CHAR(NVL(v_comm,0),'9,999.99'));
END LOOP;
DBMS_SQL.CLOSE_CURSOR(curid);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 216
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.6 COLUMN_VALUE_CHAR
The COLUMN_VALUE_CHAR procedure defines a variable to receive a CHAR value from a
cursor.
COLUMN_VALUE_CHAR(c INTEGER, position INTEGER, value OUT CHAR
[, column_error OUT NUMBER [, actual_length OUT INTEGER ]])
Parameters
c
Cursor id of the cursor returning data to the variable being defined.
position
Position within the cursor of the returned data. The first value in the cursor is
position 1.
value
Variable of data type CHAR receiving the data returned in the cursor by a prior
fetch call.
column_error
Error number associated with the column, if any.
actual_length
Actual length of the data prior to any truncation.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 217
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.7 COLUMN VALUE RAW
The COLUMN_VALUE_RAW procedure defines a variable to receive a RAW value from a
cursor.
COLUMN_VALUE_RAW(c INTEGER, position INTEGER, value OUT RAW
[, column_error OUT NUMBER [, actual_length OUT INTEGER ]])
Parameters
c
Cursor id of the cursor returning data to the variable being defined.
position
Position within the cursor of the returned data. The first value in the cursor is
position 1.
value
Variable of data type RAW receiving the data returned in the cursor by a prior fetch
call.
column_error
Error number associated with the column, if any.
actual_length
Actual length of the data prior to any truncation.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 218
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.8 DEFINE_COLUMN
The DEFINE_COLUMN procedure defines a column or expression in the SELECT list that
is to be returned and retrieved in a cursor.
DEFINE_COLUMN(c INTEGER, position INTEGER, column { BLOB |
CLOB | DATE | FLOAT | INTEGER | NUMBER | TIMESTAMP | VARCHAR2 }
[, column_size INTEGER ])
Parameters
c
Cursor id of the cursor associated with the SELECT command.
position
Position of the column or expression in the SELECT list that is being defined.
column
A variable that is of the same data type as the column or expression in position
position of the SELECT list.
column_size
The maximum length of the returned data. column_size must be specified only
if column is VARCHAR2. Returned data exceeding column_size is truncated to
column_size characters.
Examples
The following shows how the empno, ename, hiredate, sal, and comm columns of the
emp table are defined with the DEFINE_COLUMN procedure.
DECLARE
curid INTEGER;
v_empno NUMBER(4);
v_ename VARCHAR2(10);
v_hiredate DATE;
v_sal NUMBER(7,2);
v_comm NUMBER(7,2);
v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, ' ||
'comm FROM emp';
v_status INTEGER;
BEGIN
curid := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(curid,v_sql,DBMS_SQL.native);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 219
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_SQL.DEFINE_COLUMN(curid,1,v_empno);
DBMS_SQL.DEFINE_COLUMN(curid,2,v_ename,10);
DBMS_SQL.DEFINE_COLUMN(curid,3,v_hiredate);
DBMS_SQL.DEFINE_COLUMN(curid,4,v_sal);
DBMS_SQL.DEFINE_COLUMN(curid,5,v_comm);
.
.
.
END;
The following shows an alternative to the prior example that produces the exact same
results. Note that the lengths of the data types are irrelevant – the empno, sal, and comm
columns will still return data equivalent to NUMBER(4) and NUMBER(7,2), respectively,
even though v_num is defined as NUMBER(1) (assuming the declarations in the
COLUMN_VALUE procedure are of the appropriate maximum sizes). The ename column
will return data up to ten characters in length as defined by the length parameter in the
DEFINE_COLUMN call, not by the data type declaration, VARCHAR2(1) declared for
v_varchar. The actual size of the returned data is dictated by the COLUMN_VALUE
procedure.
DECLARE
curid INTEGER;
v_num NUMBER(1);
v_varchar VARCHAR2(1);
v_date DATE;
v_sql VARCHAR2(50) := 'SELECT empno, ename, hiredate, sal, ' ||
'comm FROM emp';
v_status INTEGER;
BEGIN
curid := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(curid,v_sql,DBMS_SQL.native);
DBMS_SQL.DEFINE_COLUMN(curid,1,v_num);
DBMS_SQL.DEFINE_COLUMN(curid,2,v_varchar,10);
DBMS_SQL.DEFINE_COLUMN(curid,3,v_date);
DBMS_SQL.DEFINE_COLUMN(curid,4,v_num);
DBMS_SQL.DEFINE_COLUMN(curid,5,v_num);
.
.
.
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 220
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.9 DEFINE_COLUMN_CHAR
The DEFINE_COLUMN_CHAR procedure defines a CHAR column or expression in the
SELECT list that is to be returned and retrieved in a cursor.
DEFINE_COLUMN_CHAR(c INTEGER, position INTEGER, column
CHAR, column_size INTEGER)
Parameters
c
Cursor id of the cursor associated with the SELECT command.
position
Position of the column or expression in the SELECT list that is being defined.
column
A CHAR variable.
column_size
The maximum length of the returned data. Returned data exceeding
column_size is truncated to column_size characters.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 221
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.10 DEFINE COLUMN RAW
The DEFINE_COLUMN_RAW procedure defines a RAW column or expression in the
SELECT list that is to be returned and retrieved in a cursor.
DEFINE_COLUMN_RAW(c INTEGER, position INTEGER, column RAW,
column_size INTEGER)
Parameters
c
Cursor id of the cursor associated with the SELECT command.
position
Position of the column or expression in the SELECT list that is being defined.
column
A RAW variable.
column_size
The maximum length of the returned data. Returned data exceeding
column_size is truncated to column_size characters.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 222
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.11 DESCRIBE COLUMNS
The DESCRIBE_COLUMNS procedure describes the columns returned by a cursor.
DESCRIBE_COLUMNS(c INTEGER, col_cnt OUT INTEGER, desc_t OUT
DESC_TAB);
Parameters
c
The cursor ID of the cursor.
col_cnt
The number of columns in cursor result set.
desc_tab
The table that contains a description of each column returned by the cursor. The
descriptions are of type DESC_REC, and contain the following values:
Column Name Type
col_type INTEGER
col_max_len INTEGER
col_name VARCHAR2(128)
col_name_len INTEGER
col_schema_name VARCHAR2(128)
col_schema_name_len INTEGER
col_precision INTEGER
col_scale INTEGER
col_charsetid INTEGER
col_charsetform INTEGER
col_null_ok BOOLEAN
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 223
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.12 EXECUTE
The EXECUTE function executes a parsed SQL command or SPL block.
status INTEGER EXECUTE(c INTEGER)
Parameters
c
Cursor ID of the parsed SQL command or SPL block to be executed.
status
Number of rows processed if the SQL command was DELETE, INSERT, or
UPDATE. status is meaningless for all other commands.
Examples
The following anonymous block inserts a row into the dept table.
DECLARE
curid INTEGER;
v_sql VARCHAR2(50);
v_status INTEGER;
BEGIN
curid := DBMS_SQL.OPEN_CURSOR;
v_sql := 'INSERT INTO dept VALUES (50, ''HR'', ''LOS ANGELES'')';
DBMS_SQL.PARSE(curid, v_sql, DBMS_SQL.native);
v_status := DBMS_SQL.EXECUTE(curid);
DBMS_OUTPUT.PUT_LINE('Number of rows processed: ' || v_status);
DBMS_SQL.CLOSE_CURSOR(curid);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 224
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.13 EXECUTE_AND_FETCH
Function EXECUTE_AND_FETCH executes a parsed SELECT command and fetches one
row.
status INTEGER EXECUTE_AND_FETCH(c INTEGER
[, exact BOOLEAN ])
Parameters
c
Cursor id of the cursor for the SELECT command to be executed.
exact
If set to TRUE, an exception is thrown if the number of rows in the result set is not
exactly equal to 1. If set to FALSE, no exception is thrown. The default is FALSE.
A NO_DATA_FOUND exception is thrown if exact is TRUE and there are no rows
in the result set. A TOO_MANY_ROWS exception is thrown if exact is TRUE and
there is more than one row in the result set.
status
Returns 1 if a row was successfully fetched, 0 if no rows to fetch. If an exception