Using either vulnerability, a malicious CA can use a victim
CA’s attestation key to sign attestation blobs containing
the IMEI and MAC of another, compromised device. These
blobs can then be moved onto the compromised devices. This
832    29th USENIX Security Symposium
USENIX Association
Table 4: HPE-attack vectors identiﬁed in each TZOS. For each TA category row the columns present HPE attack vectors identiﬁed through one or
more HPE vulnerabilities. Multiple HPE attack vectors also stem from a single vulnerability.
HPE attack
Data
Decryption
Encryption
compromise
oracle
oracle
TA Category
DRM
Key Management
Attestation
DRM
Key Management
Attestation
DRM
Key Management
Attestation
Data
leakage
2
3
1
2
3
1
2
3
1
Kinibi
QSEE
Teegris
2
3
0
2
3
0
2
3
0
Signing
oracle
2
0
5
2
0
5
2
0
5
Total
12
6
9
12
6
9
9
6
9
2
0
1
2
0
1
1
0
1
3
0
2
3
0
2
2
0
2
enables any application running on the compromised device
to circumvent remote attestations by spooﬁng the victim CA’s
identity using the previously generated attestation blob. The
applications would appear to the remote party as the victim
CA running on the uncompromised device.
4.4.3 Case C: Leaking & altering other CA keys
We refer to TA’s designed to protect CA provided information
from unauthorized Normal World access as Key Manage-
ment TAs. These TAs are typically responsible for generating
key material, protecting it on behalf of the CAs and using
it to perform cryptographic operations (e.g., encryption,
decryption, signing) inside the Secure World. Most also enable
CAs to provide them with keys for safekeeping, allowing them
to retrieve them when needed.
Listing 3 presents two APIs provided by such a Key
Management TA. A CA can request the TA to protect its
cryptographic keys using the store_key API and retrieve
them back when needed using the load_key API.
1 void
2
8 }
store_key ( CA_struct input , CA_struct output ) {
output . encrypted_key = wrap ( input .
plaintext_key );
}
3
4 }
5
6 void load_key ( CA_struct input , CA_struct output ) {
7
output . plaintext_key = unwrap ( input .
encrypted_key );
unwrap function exposed by the TA as the load_key API. In
practice, each API in Listing 3 contains a Storage-Hijacking
vulnerability that enables performing an HPE attack:
(1) The load_key API decrypts at Line 7 any CA provided
ciphertext, without verifying if the respective CA should be
allowed to access the contents within. This API enables a
malicious CA to obtain the keys within any Key Management
TA-generated ciphertext, provided they have permissions to
read its corresponding ﬁle.
(2) The wrap function used by the store_key API at
Line 2 enciphers any CA provided data using the same Key
Management TA-speciﬁc key. A malicious CA can use this
API to replace CA ciphertexts with its own enciphered keys,
provided it has permissions to alter the ciphertext ﬁles.
Depending on the key’s purpose, vulnerability (1) can
enable attackers to sign or encrypt data using a victim CA’s
key or decipher any CA encrypted information. Similarly,
vulnerability (2) can be used to trick CAs into performing their
own cryptographic operations using attacker provided keys.
Similar vulnerabilities have been discovered inside Key
Management TA that rely on RPMB protected storage to pro-
tect CA provided keys. A key difference is that instead of pro-
viding the ciphertext to the CAs, these TA’s rely on the TZOS to
write and read chunks of RPMB blocks. The vulnerabilities in-
side these TAs stem from the reliance of data inside RPMB stor-
age, which is only protected by a coarse-grained access control.
Under this access control, malicious CAs can use the Key Man-
agement TA APIs to leak or modify keys stored inside RPMB
storage, without even requiring access to their ciphertexts.
Listing 3: Vulnerable Key Management TA code
The TA has to persist the received keys for an undeﬁned
amount of time. Thus, the keys cannot be maintained in
memory, where they would be lost when the TA process is
killed or the device is rebooted. Instead, the Key Management
TAs uses the wrap function at Line 2 to encrypt keys received
from the CA using a Key Management TA-speciﬁc key and
provides the resulting ciphertext back to the CA, relying on
the CA to maintain it on the ﬂash drive until needed.
In the intended scenario, a CA’s key integrity should be
maintained inside the Normal World ﬁlesystem and only
the respective CA should be able to recover it using the
5 HOOPER: Automating HPE detection
TA API interface security is not uniform across all devices.
Even devices operating under the latest TEE coding standards
speciﬁed in the GlobalPlatform’s TEE Internal Core API
Speciﬁcation [10] contain TAs vulnerable to HPE attacks.
Moreover, mobile devices are not patched uniformly, so some
run older TA versions that might be still vulnerable to such
attacks. Inspecting all deployed TAs on all devices requires
either the development of automatic HPE attack detection
tools or manually inspecting each TA binary version manually.
USENIX Association
29th USENIX Security Symposium    833
In this section, we present the design of HOOPER, an
angr [28]-based tool designed to detect the HPE categories
presented in Section 3. HOOPER uses symbolic execution
to locate paths where CA data is persisted across invocations.
Figure 3 illustrates the HOOPER’s analysis process. This
analysis consists of three phases:
Phase 1: Track TA’s internal handling of CA provided data
though each of its execution paths. At the end of this process,
a set of path semantics is obtained. These path semantics
capture all events in which CA data is stored in TA memory,
external resource or information loaded within these locations
is returned CAs.
Phase 2: Identify potential ﬂows of CA data across multiple
TA execution paths by analyzing cross-invocation data ﬂows
through TA global variables and external resources.
Phase 3: Analyze the obtained CA data ﬂows, identifying
the sequences of TA API invocations that lead to TA data
processed data to be leaked or corrupted.
The rest of this section details the inner-workings of each
described phase and how they were implemented to analyze
TA binaries under the Teegris TZOS.
5.1 Phase 1: Inner-invocation data ﬂows
Phase 1 identiﬁes execution paths that write or read CA data to
or from global namespaces. This implies that ﬁrst we have to
identify how TAs receive data from CAs and then emulate its
processing. Data can be passed to TAs from the Normal World
only though a set of standardized API interfaces. These API
interfaces only allow TAs to send or receive data through a set
of predeﬁned input/output buffers. Tracking CA data received
by TAs implies ﬁrst marking the TA API’s input buffer
contents at the beginning of each CA request processing.
To simulate all possible processing of CA data, we symbol-
ize the data within TA API input buffers and provide it with
a semantically meaningful name, indicating the respective
data represents data provided by the CA. We then build our
analysis on top of the angr [28] symbolic execution engine
to simulate its processing.
The names placed on symbolic data are preserved during
the symbolic execution of TA binary code, propagating
automatically through arithmetic operations. However, TA
instances also rely on external functions (e.g., kernel APIs,
IPCs) and libraries in their data processing ﬂows.
As it is impractical to symbolically execute all library and
IPC dependencies of a given TA, we leverage angr’s simulated
procedures (SimProcedures) as lightweight replacements. To
ensure that semantically meaningful symbols are preserved,
we carefully construct the SimProcedures to propagate the
input symbols to the output. For example, the SimProcedure
for AES encipherment performs no cryptography on symbolic
data, as this can lead to constraint explosion. Instead, it
produces a symbolic ciphertext consisting of new symbols
that inherit names derived from the plaintext input’s symbols.
For each execution path, we record path semantics cor-
responding to (1) data being written to TA global variables,
external resources and TA API output buffers; (2) data being
read from TA global variables and external resources; (3) data
used as keys for cryptographic operations.
The path semantics of the recorded events pertaining to CA
data or uninitialized global variables are then forwarded for
further processing.
5.2 Phase 2: Cross-invocation data ﬂows
In the second phase, we identify data that ﬂows across
sequences of TA API invocations. For example, during an
API invocation data might be stored in a global variable.
This global variable could then be read and used during a
subsequent API invocation.
The path semantics recorded during Phase 1 provide the
required information that enable identifying these cross-
invocation data ﬂows, missed during symbolic execution.
Each path semantic retains the execution path, data being
read/written and its size alongside with the source of data
reads and data write destinations.
In this phase, HOOPER correlates read/write pairs of
semantic paths. Figure 4 illustrates the 2 types of data matching
performed in this phase: (1) every data copied into global
variables on one execution path is paired with all uninitialized
reads from the respective global variable, encountered on
the other execution paths; (2) any data provided to a TZOS
storage location (e.g., RPMB block) on one execution path is
paired with all attempts to read data from the respective TZOS
storage location encountered on other execution paths.
At the end of the second phase the detection tool produces
a set of paired execution paths, each representing an API call.
These paths are linked together by the data ﬂowing between
them. For example, in Figure 4 the path writing data into X
is linked together with the paths reading from X. Similarly, the
paths loading and storing Y are paired together.
5.3 Phase 3: Identifying exploitable TA execu-
tion data ﬂows
In this phase the execution paths paired during Phase 1 are
examined for the HPE attacks detailed in Section 3.3. For
each pair, the CA data provided as input is tracked and the
HOOPER determines if this information can be used for
performing HPE attacks using two rules: (1) Data leakage or
compromise: CA data read during one execution path ﬂows
through other execution paths back to the CA unencrypted.
(2) Cryptographic oracle: CA data read during one execution
path is used in other execution paths as the cryptographic key
for decrypting, signing or encrypting CA information.
Information maintained inside the TA binary (e.g., TA con-
ﬁguration) is used to prune out any execution paths that cannot
be reproduced on real devices. For example, under Teegris and
Kinibi, the execution paths paired through global variables
have to be discarded in the case of single-tenant conﬁgured TAs.
Such TAs would not be to multi-tenancy related vulnerabilities.
At the end of this phase, the set of execution paths that can
be used as cryptographic oracles or enable either data leakage
834    29th USENIX Security Symposium
USENIX Association
Figure 3: Automatic stateful TA vulnerability detection process
through TZOS APIs and thus have been SimProcedures. Each
corresponding SimProcedure collects the path semantics and
details regarding the operation performed. For example, when
an execution path writes to an RPMB block, the corresponding
SimProcedure collects details regarding the data written, its
length, the RPMB block offset and basic blocks leading to
this operation. In the case of global variables, reads and writes
Global variable data read and write semantics are tracked by
hooking a set of logging methods into operations performed
on the .bss ELF segment mapped into memory. These logging
methods also collect similar path semantics details.
By tracking the start and end of each data read and
written, HOOPER identiﬁes each cross-invocation data
ﬂows. Cross-invocation data ﬂows are represented as the data
contained within the intersection of bit arrays written with
bit array read. For example, an execution path that writes ten
bits on RPMB at offset 50 is only paired with those reading
any data from the RPMB blocks between 50 and 60 and others