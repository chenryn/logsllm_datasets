  cdcom1:
    db 0 ; truncating
    align 40h, db 0 ; to align EoCD1 for first collision
  cdcom1.len equ $ - cdcom1
CD1.len equ $ - CD1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EoCD1:
istruc endlocator
  at endlocator.elSignature,          db "PK", 5, 0x06
  at endlocator.elEntriesOnDisk,      db 1
  at endlocator.elEntriesInDirectory, db 1
  at endlocator.elDirectorySize,      dd CD1.len
  at endlocator.elDirectoryOffset,    dd CD1
  at endlocator.elCommentLength,      dw EoCD1com.len
iend
EoCD1com:
  db 0 ; truncating
  align 4, db 'M' ; UniColl prefix
  align 40h, db 0 ; end of first collision block
  ; second collision block
  db 0
  align 40h, db 0
                                                             cdcom2.len equ $ - cdcom2
                                                           CD2.len equ $ - CD2
                                                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                           EoCD2:
                                                           istruc endlocator
                                                             at endlocator.elSignature,          db "PK", 5, 0x86 ; 0x06/0x86 because of UniColl
                                                             at endlocator.elEntriesOnDisk,      db 1
                                                             at endlocator.elEntriesInDirectory, db 1
                                                             at endlocator.elDirectorySize,      dd CD2.len
                                                             at endlocator.elDirectoryOffset,    dd CD2
                                                             at endlocator.elCommentLength,      dw EoCD2com.len
                                                           iend
                                                           EoCD2com:
                                                             db 0 ; truncating
                                                             align 4, db 'M' ; Unicoll prefix
                                                             align 40h, db 0 ; end of first collision block
                                                             ; second collision block
                                                             db 0
                                                             align 40h, db 0
                                                           EoCD2com.len equ $ - EoCD2com
EoCD1com.len equ $ - EoCD1com
```
The only things we need to change here are the contents of the two files (first one changes to `ls -al`, second one changes to `cat flag.txt`) and the matching CRC32 values. We can then build the zip file using `nasm`:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls/workspace]
└─$ ls
zip.asm  zip.inc
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls/workspace]
└─$ nasm -o zip.zip zip.asm
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls/workspace]
└─$ xxd -g 1 zip.zip
00000000: 50 4b 03 04 0a 00 00 00 00 00 00 00 00 00 17 0d  PK..............
00000010: d9 f5 0d 00 00 00 0d 00 00 00 07 00 2f 00 62 79  ............/.by
00000020: 65 2e 74 78 74 00 00 2b 00 50 4b 03 04 0a 00 00  e.txt..+.PK.....
00000030: 00 00 00 00 00 00 00 c5 b2 dd af 07 00 00 00 07  ................
00000040: 00 00 00 09 00 47 00 68 65 6c 6c 6f 2e 74 78 74  .....G.hello.txt
00000050: 00 00 43 00 63 61 74 20 66 6c 61 67 2e 74 78 74  ..C.cat flag.txt
00000060: 0a 50 4b 01 02 00 00 0a 00 00 00 00 00 00 00 00  .PK.............
00000070: 00 17 0d d9 f5 0d 00 00 00 0d 00 00 00 07 00 00  ................
00000080: 00 ea 00 00 00 00 00 00 00 00 00 00 00 00 00 62  ...............b
00000090: 79 65 2e 74 78 74 00 6c 73 20 2d 61 6c 0a 50 4b  ye.txt.ls -al.PK
000000a0: 01 02 00 00 0a 00 00 00 00 00 00 00 00 00 c5 b2  ................
000000b0: dd af 07 00 00 00 07 00 00 00 09 00 00 00 2b 00  ..............+.
000000c0: 00 00 00 00 00 00 00 00 29 00 00 00 68 65 6c 6c  ........)...hell
000000d0: 6f 2e 74 78 74 00 00 00 00 00 00 00 00 00 00 00  o.txt...........
000000e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000100: 50 4b 05 06 00 00 00 00 01 00 01 00 62 00 00 00  PK..........b...
00000110: 9e 00 00 00 ea 00 00 4d 00 00 00 00 00 00 00 00  .......M........
00000120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000180: 50 4b 05 86 00 00 00 00 01 00 01 00 1f 01 00 00  PK..............
00000190: 61 00 00 00 6a 00 00 4d 00 00 00 00 00 00 00 00  a...j..M........
000001a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls/workspace]
└─$ file zip.zip
zip.zip: Zip archive data, at least v1.0 to extract
```
The next thing we need to do is clone [HashClash](https://github.com/cr-marcstevens/hashclash) and edit the UniColl script `scripts/poc_no.sh`. We just have to change the `N=1` to `N=2` as instructed by the *corkami* tutorial:
> Another approach could be to just merge both archives, with their merged layers, and using UniColl - but with N=2, which introduces a difference on the 4th byte - to kill the magic signature of the `End of Central Directory`.
What this does is instruct `poc_no.sh` to run the second PoC out of the following three:
```sh
# Note that positive message bit differences are given with bit indices 1,...,32
# and with -1,...,-32 for a negative bit difference
case $N in
	1)
	diff="--diffm2 9"
	tmid=32
	;;
	2)
	diff="--diffm13 28 --diffm0 32 --diffm6 32"
	tmid=32
	;;
	3)
	diff="--diffm6 9 --diffm9 32 --diffm15 32"
	tmid=32
	tconnect=10
	datalower=500000
	dataupper=500000
	;;
esac
```
`N` essentially controls which bits get changed as part of the collision process. Since the `diff` syntax is a bit unclear, we'll explain: Each PoC finds a collision by changing some bits in the provided prefix.
```sh
case $N in
	1)
	diff="--diffm2 9" #  This means one could collide two arbitrary ZIP with a single UniColl and 24 bytes of set prefix.
We need to change the byte at offset `0x183` from `86` to `06` and delete everything from `0x198` onwards, to get:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls/workspace]
└─$ xxd -g 1 prefix.bin
00000000: 50 4b 03 04 0a 00 00 00 00 00 00 00 00 00 17 0d  PK..............
00000010: d9 f5 0d 00 00 00 0d 00 00 00 07 00 2f 00 62 79  ............/.by