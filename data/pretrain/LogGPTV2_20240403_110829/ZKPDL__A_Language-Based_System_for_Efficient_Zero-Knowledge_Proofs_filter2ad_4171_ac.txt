cl-issuer-proof.zkp
given:
compute:
1 computation:
2
3
4
5
6
7
8
9
10
11
12
13 proof:
14
15
16
17
18
19
20
21
such that:
given:
group: pkGroup = 
element in pkGroup: C
exponents in pkGroup: x[1:k+L]
integers: stat, modSize, lx
random integer in [0,2^(modSize+lx+stat)): vpp
random prime of length lx+2: e
einverse := 1/e
A := (f*C*h^vpp * for(i,L+1:k+L,*,g_i^x_i))^einverse
group: pkGroup = 
elements in pkGroup: A, C
exponents in pkGroup: e, vpp, x[L+1:k]
prove knowledge of:
exponents in pkGroup: einverse
A = (f*C*h^vpp * for(i,L+1:k+L,*,g_i^x_i))^einverse
Once the recipient obtains the partial signature, she
can unblind it to obtain a full signature; this step com-
pletes the issuing phase.
Now, the owner of a CL signature needs a way to prove
that she has a signature, without revealing either the sig-
nature or the values. To accomplish this, the prover ﬁrst
randomizes the CL signature and then attaches a zero-
knowledge proof of knowledge that the randomized sig-
nature corresponds to the original signature on the com-
mitted message.
cl-possession-proof.zkp
given:
given:
compute:
1 computation:
2
3
4
5
6
7
8
9
10
11
12
13
14
15 proof:
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
such that:
group: pkGroup = 
element in pkGroup: A
exponents in pkGroup: e, v, x[1:L]
integers: modSize, stat
random integers in [0,2^(modSize+stat)): r, r_C
vprime := v + r*e
Aprime := A * hprime^r
C := h^r_C * for(i, 1:L, *, gprime_i^x_i)
D := for(i, L+1:L+k, *, gprime_i^x_i)
fCD := f * C * D
group: pkGroup = 
group: comGroup = 
elements in pkGroup: C, D, Aprime, fCD
elements in comGroup: c[1:L]
for(i, 1:L, commitment to x_i: c_i=g^x_i*h^r_i)
exponents in pkGroup: x[L+1:L+k]
integer: l_x
prove knowledge of:
integers: x[1:L]
exponents in comGroup: r[1:L]
exponents in pkGroup: e, vprime, r_C
for(i, 1:L, range: (-(2^l_x - 1)) 
group: RSAGroup
modulus: N
group: G
group: cashGroup = 
exponents in G: x[1:m]
elements in G: u[1:m], v, w
random integer in [0,N/4): s
random exponents in secondGroup: r[1:m]
for(i, 1:m, c_i := g_1^x_i * g_2^r_i)
Xprime := for(i, 1:m, *, g_i^x_i) * h^s
vsquared := v^2
wsquared := w^2
for(i, 1:m, usquared_i := u_i^2)
given:
given:
compute:
1 computation:
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 proof:
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
such that:
group: secondGroup = 
group: G
group: RSAGroup
modulus: N
group: cashGroup = 
element in cashGroup: X
elements in secondGroup: Xprime, c[1:m]
for(i,1:m,commitment to x_i: c_i=g_1^x_i*g_2^r_i)
elements in G: a[1:m], b, d, e, f, usquared[1:m],
vsquared, wsquared
prove knowledge of:
integers: x[1;M], r
exponent in G: hash
exponents in secondGroup: r[1:m], s
for(i, 1:m, range: -N/2 + 1 
elements in cashGroup: A, pk_u
commitment to sk_u: A = g^sk_u * h^r_u
prove knowledge of:
exponents in cashGroup: sk_u, r_u
such that:
pk_u = g^sk_u
A = g^sk_u * h^r_u
Once the bank has veriﬁed this proof, the user and the
bank will run a protocol to obtain a CL signature (us-
ing the programs we saw in Section 5.1) on the user’s
identity and two pseudo-random function seeds. These
private values and the signature on them deﬁne a wallet
that contains W coins (where W is a system-wide public
parameter).
When a user wishes to spend one of her coins, she
splits it up into its unendorsed part and the endorsement.
She then sends the unendorsed component to a merchant
and proves it is valid. If the merchant then sends her what
she wanted to buy, she will follow up with the endorse-
ment to complete the coin and the transaction is com-
plete. The following program is used for proving the va-
lidity of a coin.
coin-proof.zkp
given:
1 computation:
2
3
4
5
6
7
8
9
10
11
compute:
alpha := 1 / (s + J)
beta := 1 / (t + J)
C := g^s * h^r_C
group: cashGroup = 
exponents in cashGroup: s, t, sk_u
integer: J
random exponents in cashGroup: r_B, r_C, r_D, x1,
x2, r_y, R
D := g^t * h^r_D
y := h1^x1 * h2^x2 * f^r_y
B := g^sk_u * h^r_B
S := g^alpha * g^x1
T := g^sk_u * (g^R)^beta * g^x2
group: cashGroup = 
elements in cashGroup: y, S, T, B, C, D
commitment to sk_u: B = g^sk_u * h^r_B
commitment to s: C = g^s * h^r_C
commitment to t: D = g^t * h^r_D
integer: J
prove knowledge of:
given:
12
13
14
15
16
17
18 proof:
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
exponents in cashGroup: x1, x2, r_y, sk_u, alpha,
beta, s, t, r_B, r_C, r_D, R
such that:
y = h1^x1 * h2^x2 * f^r_y
S = g^alpha * g^x1
T = g^sk_u * (g^R)^beta * g^x2
g = (g^J * C)^alpha * h^(-r_C / (s+J))
g = (g^J * D)^beta * h^(-r_D / (t+J))
5.4 Performance
Here we measure the communication and computa-
tional resources used by our system when running each
of the programs above. The benchmarks presented in Ta-
ble 1 were collected on a MacBook Pro with a 2.53GHz
Intel Core 2 Duo processor and 4GB of RAM running
OS X 10.6; we therefore expect that these results will
reﬂect those of a typical home user with no special cryp-
tographic hardware support.
As for speed, caching exponents of ﬁxed bases re-
sults in a signiﬁcant performance increase, making it
an important optimization for applications that require
repeated protocol executions. The only caveat is that