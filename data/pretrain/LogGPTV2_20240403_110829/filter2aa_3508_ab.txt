# WinAFL Patch (netAFL) Overview

## Components
- **WinAFL Patch (netAFL)**
  - **Malware (Main Module)**
  - **Malware in Memory**
  - **DynamoRIO Shared Library**
  - **winafl Shared Library**
  - **AFL Fuzzer**
  - **Fuzzer in Memory**
  - **User-defined Encryption**
  - **Client/Server Module**

### Process Flow
1. **Coverage Bitmap**
2. **Shared Memory**
3. **Encrypt**
4. **Update Bitmap**
5. **Estimate Coverage, Generate New Test Case**
6. **Restart Target Routine**

## Usage
```bash
afl-fuzz.exe –usage
```

### Fake Server Settings
- `-s` - Server port to listen for incoming connections

### Network Fuzzing Settings
- `-a` - IP address to send data to
- `-U` - Use UDP (default is TCP)
- `-p` - Port to send data to
- `-w` - Delay in milliseconds before sending data

### User-defined Cryptographic Library Settings
- `-L` - Path to library with user-defined crypto

### User-defined CnC Server Settings
- `-l` - Path to library with user-defined CnC server

## User-defined Encryption & CnC
### Custom Encryption Function Prototypes
- `char* APIENTRY encrypt_buffer(char *buf, int buf_size)` - to encrypt
- `void APIENTRY free_buffer(char *buf)` - to free memory used for encrypted data

### Custom CnC Function Prototypes
- `int APIENTRY cnc_init(char *port)` - to initialize CnC
- `int APIENTRY cnc_run(char *data)` - to send AFL’s test case

### Example
An example is distributed with the winAFL patch (netAFL).

## Tool Demo
- 4 hours after setup

## Case Studies

### Case Study I: Mirai
- **Overview**
  - IoT-based botnet DDoS
  - Most disruptive DDoS cyber-attack in history
    - 2016 Dyn DDoS (1.2Tb/s)
    - Krebs on Security (620 Gb/s)
    - OVH DDoS (1TB/s)
  - Hundreds of thousands of devices across 164 countries
  - Some elements of SDLC

- **HTTP-response Parser**
- **Seed File**
  ```http
  GET / HTTP/1.1
  User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
  Host: localhost
  Connection: keep-alive
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Accept-Language: en-US,en;q=0.8
  Content-Type: application/x-www-form-urlencoded
  content-length: 3
  ```

- **Fuzzing Statistics**
- **Vulnerability**
- **Crash Case**
  ```http
  GET / HTTP/1.1
  User-Agent: Mozilla/5.0 (Wndows NT 10.0; WOW64) AppleWeQKit/537.36 (KHTML, like Geckt) Chrome/51.0.2704.103 Safari/537.36
  Host: location:/keep-alive
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,imagv/*;q=0.8
  Accept-Language: =0.8
  Content-Type: applicat n/x-www-form-urlencoded
  content-length: 3
  LOL
  ```

- **Exploitation Demo**

### Case Study II: Dexter v2
- **Overview**
  - Point-of-sales (PoS) malware targeted at Microsoft Windows terminals
  - Steals credit/debit card details
  - First known botnet targeting POS terminals (mostly in the US)

- **Target**
- **Vulnerability**

### Case Study III: TinyNuke
- **Overview**
  - Man-in-the-browser Trojan with common features: WebInjects, SOCKS, Proxy, JSON parsers, etc.
  - Distributed over a trojanized PDF Reader

- **Target**
- **Seed File**
  ```json
  {
    "expand": "attributes",
    "link": {
      "rel": "self",
      "href": "http://localhost:8095/crowd/rest/usermanagement/1/user?username=my_username"
    },
    "name": "my_username",
    "first-name": "My",
    "last-name": "Username",
    "display-name": "My Username",
    "email": "PI:EMAIL",
    "password": {
      "link": {
        "rel": "edit",
        "href": "http://localhost:8095/crowd/rest/usermanagement/1/user/password?username=my_username"
      }
    },
    "active": true,
    "attributes": {
      "link": {
        "rel": "self",
        "href": "http://localhost:8095/crowd/rest/usermanagement/1/user/attribute?username=my_username"
      },
      "attributes": []
    }
  }
  ```

- **Statistics**
- **Vulnerability**
- **Crash Case**

### Case Study IV: KINS
- **Overview**
  - Banking trojan implemented on top of Zeus source code
  - Used to attack major financial institutions in Germany and the Netherlands
  - Contains rootkit module, HTTP-protocol parser, and web-injection capabilities

- **Seed File**
  ```http
  HTTP/1.1 200 OK
  Date: Sun, 18 Oct 2009 08:56:53 GMT
  Server: Apache/2.2.14 (Win32)
  Transfer-Encoding: chunked
  Last-Modified: Sat, 20 Nov 2004 07:16:26 GMT
  ETag: "10000000565a5-2c-3e94b66c2e680"
  Accept-Ranges: bytes
  Content-Length: 44
  Connection: close
  Content-Type: text/html
  X-Pad: avoid browser bug
  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  It works!
  ```

- **Target**
- **Statistics**
- **Vulnerability**
- **Crash Case**
  ```http
  HTTP/1.1 200 OK
  Date: Sun, 18 Oct 2009 08:56:53 GMT
  Server: Ap32)
  Transfer-Encoding: chunked
  Lasdified: Sat, 20 Nov 2004 07:16:26 GMT
  ETag: "10000000565a5-2c-3e94b66c2e680"
  Accept-Ranges: bytes
  Content-Length:
  Connection: close
  Content-Type: text/html
  X-Pad: avoid browser bug
  AAAAAAAy>It works!
  ```

## Challenges and Issues
- Preliminary reverse engineering required
- Need to find/trigger target function
- Bugs in DynamoRIO/WinAFL
- Seed file selection
- Traffic encryption
- Stability

## Drltrace
- **Overview**
  - Open-source API calls tracer for Windows (similar to ltrace for Linux)
  - Command: `drltrace.exe –logdir . –print_ret_addr – malware.exe`
  - GitHub: [drltrace](https://github.com/mxmssh/drltrace)

## Future Work
- Automatically find target function
- Increase stability
- Code-coverage visualization

## Conclusion
- Bugs in malware exist and can be used to defend against them
- Coverage-guided fuzzing was able to find bugs in each malware selected for the experiment within 24 hours
- Two bugs lead to RCE, one bug can be used to defend against DDoS
- This technique can also be used to find bugs in network-based applications (probably the most useful application)

## Contact
- GitHub: [mxmssh/netafl](https://github.com/mxmssh/netafl), [mxmssh](https://github.com/mxmssh)
- LinkedIn: [Mikhail Shudrak](https://www.linkedin.com/in/mshudrak)

Thank you!