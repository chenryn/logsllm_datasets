### USB Host Controller Interfaces

- **eHCI (Enhanced Host Controller Interface)**
- **uHCI (Universal Host Controller Interface)**
- **xHCI (Extensible Host Controller Interface)**

### USB Stack Components

1. **Host Controller Driver**:
   - Provides a hardware abstraction layer, enabling the host to communicate with the hardware through the controller interface.

2. **USB Core**:
   - Manages core functionalities such as device enumeration.

3. **Class Drivers**:
   - Once the enumeration is complete and control is passed to the appropriate USB class driver, the class driver processes communication specific to the connected device.

4. **Application Software**:
   - When a USB device is inserted, the host may launch an application specific to the device's class (e.g., a photo viewer for a camera).

### Identifying Supported Devices

For USB host vulnerability assessment via fuzzing, it is crucial to determine which device classes are supported. This is because USB fuzzing is a slow process, with each test case requiring the virtual device to be "inserted" and "removed" via software, leading to repeated enumeration. The USB protocol is designed for human interaction, so timing delays make each test case take several seconds to complete. Fuzzing unsupported functionality can waste significant testing time.

#### 6.1 USB Device Classes

There are several high-level USB device classes, as shown in Table 9.

**Table 9: USB Device Classes**

- **bDeviceClass**: High-level device class (e.g., mass storage)
- **bDeviceSubClass**: Specific information about the device (e.g., SCSI command set)
- **bDeviceProtocol**: Protocol used (e.g., bulk transport (BBB))

**Example: Mass Storage Class Sub-Classes**

- De facto use
- RPC
- MMC-5 (ATAPI)
- Base Class
- Descriptor Usage
- Description
- 0x00: Use class information in the Interface Descriptors
- 0x01: Audio
- 0x02: CDC (Communication and Device Control)
- 0x03: HID (Human Interface Device)
- 0x05: Physical
- 0x06: Image
- 0x07: Printer
- 0x08: Mass Storage
- 0x09: Hub
- 0x0a: CDC-Data
- 0x0b: Smart Card
- 0x0d: Content Security
- 0x0e: Video
- 0x0f: Personal Healthcare
- 0x10: Audio/Video Devices
- 0xdc: Diagnostic Device
- 0xe0: Wireless Controller
- 0xef: Miscellaneous
- 0xfe: Application Specific

**Mass Storage Protocols**

- CBI with command completion interrupt
- CBI without command completion interrupt
- BBB
- UAS
- Vendor specific

The potential attack surface of a USB host is vast, making it essential to establish which functionalities are supported before active fuzz testing.

#### 6.2 Enumerating Installed Class Drivers

To identify supported device classes, emulated (class-specific) virtual devices need to be presented to the host, iterating through each device class, sub-class, and protocol while monitoring the enumeration process. If a device is not supported, the enumeration phase will stop at the "Set Configuration" command. If supported, class-specific communication starts after the "Set Configuration" command.

**Table 12: VID and PID Information in a Device Descriptor**

- New VID and PID values must be registered with the USB Implementers Forum (USBIF) and are maintained in public repositories. This information can be used to perform brute-force attacks to identify specific drivers, but this process is very slow.

#### 6.3 Other Devices Already Connected

When testing a host with other devices (e.g., an HSPA modem) connected internally to the USB bus, these can be detected by sniffing the USB bus and looking for devices communicating using different addresses than the attached device.

### Fingerprinting Techniques

#### 7.1 Operating System Identification

By observing USB stack interactions and using active techniques, operating system and application information can be identified. Different operating systems exhibit unique behaviors during the enumeration and class-specific communication phases.

#### 7.2 Application Identification

Applications that use USB devices for input (e.g., photo management applications) can also reveal useful information. For example, the "Photos" Metro app on Windows 8 sends a "Device Property" command containing specific OS version information.

#### 7.3 Timing Information

The Packet-master analyzer can differentiate between events on the USB bus down to the microsecond. By measuring the time between specific requests, more consistent patterns can be observed, potentially revealing information about the host's speed.

#### 7.4 Descriptor Types Requested

Some operating systems have implemented their own USB descriptors, such as Microsoft OS descriptors (MODs). These descriptors are stored at a fixed string index and must be correctly handled by the device.

#### 7.5 Responses to Invalid Data

Sending invalid data (e.g., maximum and minimum values, logically incorrect values, missing data) can help identify how the host handles errors. This is useful for identifying bugs and potential security vulnerabilities.

### Umap

A tool called Umap was developed to demonstrate the techniques described and to perform targeted fuzzing. Umap is written in Python and builds on the sample code provided with the Facedancer board.

### Conclusions

This research aimed to identify ways to reveal configuration information about a connected USB host. By emulating specific USB device classes, it was possible to identify supported generic and non-generic class drivers. Various techniques were developed to identify the host, including analyzing descriptor request order, number of descriptor requests, and class-specific communication. A tool called Umap was developed to demonstrate these techniques and perform targeted fuzzing.

### References and Further Reading

- Davis, Undermining Security Barriers, media.blackhat.com
- Dominguez Vega, USB Attacks: Fun with Plug and 0wn, labs.mwrinfosecurity.com
- GoodFET, GoodFET â€“ Facedancer21, goodfet.sourceforge.net
- Goodspeed, Writing a thumbdrive from scratch: Prototyping active disk antiforensics, www.youtube.com
- Larimer, Beyond Autorun: Exploiting vulnerabilities with removable storage, media.blackhat.com
- MOD, Microsoft OS Descriptors, msdn.microsoft.com
- MQP, Packet-Master USB500 AG, www.mqp.com
- USBIF, USB Implementers Forum, www.usb.org

### Glossary

- **ATAPI**: AT Attachment Packet Interface
- **BBB**: Bulk-only transport (also called BOT)
- **CBI**: Control/Bulk/Interrupt
- **CDC**: Communication and Device Control
- **eHCI**: Enhanced Host Controller Interface
- **HID**: Human Interface Device
- **HSPA**: High Speed Packet Access
- **IEE 1667**: Protocol for Authentication in Host Attachments of Transient Storage Devices
- **LSD FS**: Lockable Storage Devices Feature Specification
- **MOD**: Microsoft OS descriptor
- **oHCI**: Open Host Controller Interface
- **PID**: Product ID
- **QIC-157**: Quarter Inch Cartridge (standard for streaming tape)
- **RPC**: Remote Procedure Call
- **SCSI**: Small Computer System Interface
- **SFF-8070i**: ATAPI specification for floppy disks
- **UAS**: USB Attached SCSI
- **UFI**: USB Floppy Interface
- **uHCI**: Universal Host Controller Interface
- **USBIF**: Universal Serial Bus Implementers Forum
- **USB**: Universal Serial Bus
- **VID**: Vendor ID
- **xHCI**: Extensible Host Controller Interface

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.