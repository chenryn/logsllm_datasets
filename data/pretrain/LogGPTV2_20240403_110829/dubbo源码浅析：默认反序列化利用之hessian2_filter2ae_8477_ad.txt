接着，跟进请求消息体的解码实现：
    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {
        //...
        if ((flag & FLAG_REQUEST) == 0) {
            //...
        } else {
            //...
            try {
                //...
                if (req.isHeartbeat()) {
                    //...
                } else if (req.isEvent()) {
                    //...
                } else {
                    //...
                    if (channel.getUrl().getParameter(
                            Constants.DECODE_IN_IO_THREAD_KEY,
                            Constants.DEFAULT_DECODE_IN_IO_THREAD)) {
                        inv = new DecodeableRpcInvocation(channel, req, is, proto);
                        inv.decode();
                    } else {
                        //...
                    }
                    //...
                }
                //...
            } catch (Throwable t) {
                //...
            }
            return req;
        }
    }
DecodeableRpcInvocation.decode：
    @Override
    public void decode() throws Exception {
        if (!hasDecoded && channel != null && inputStream != null) {
            try {
                decode(channel, inputStream);
            } catch (Throwable e) {
                if (log.isWarnEnabled()) {
                    log.warn("Decode rpc invocation failed: " + e.getMessage(), e);
                }
                request.setBroken(true);
                request.setData(e);
            } finally {
                hasDecoded = true;
            }
        }
    }
     @Override
    public Object decode(Channel channel, InputStream input) throws IOException {
        ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType)
                .deserialize(channel.getUrl(), input);
        //读取dubbo版本号
        String dubboVersion = in.readUTF();
        //设置dubbo版本号到请求对象中
        request.setVersion(dubboVersion);
        setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion);
        setAttachment(Constants.PATH_KEY, in.readUTF());
        setAttachment(Constants.VERSION_KEY, in.readUTF());
        //设置方法名到RpcInvocation中，用于指定调用的方法
        setMethodName(in.readUTF());
        try {
            Object[] args;
            Class[] pts;
            //读取方法描述
            String desc = in.readUTF();
            if (desc.length() == 0) {
                pts = DubboCodec.EMPTY_CLASS_ARRAY;
                args = DubboCodec.EMPTY_OBJECT_ARRAY;
            } else {
                //根据方法描述，加载入参class，存储成数组
                pts = ReflectUtils.desc2classArray(desc);
                args = new Object[pts.length];
                for (int i = 0; i  map = (Map) in.readObject(Map.class);
            if (map != null && map.size() > 0) {
                Map attachment = getAttachments();
                if (attachment == null) {
                    attachment = new HashMap();
                }
                attachment.putAll(map);
                setAttachments(attachment);
            }
            //decode argument ,may be callback
            for (int i = 0; i )：
    @Override
    @SuppressWarnings("unchecked")
    public  T readObject(Class cls) throws IOException,
            ClassNotFoundException {
        return (T) mH2i.readObject(cls);
    }
readObject对mH2这个对象进行了封装，看Hessian2ObjectInput构造方法：
    private final Hessian2Input mH2i;
    public Hessian2ObjectInput(InputStream is) {
        mH2i = new Hessian2Input(is);
        mH2i.setSerializerFactory(Hessian2SerializerFactory.SERIALIZER_FACTORY);
    }
封装的类对象为Hessian2Input，跟进Hessian2Input的readObject方法实现：
    public Object readObject(Class cl) throws IOException {
        return this.readObject(cl, null, null);
    }
    @Override
    public Object readObject(Class expectedClass, Class... expectedTypes) throws IOException {
        if (expectedClass == null || expectedClass == Object.class)
            return readObject();
        int tag = _offset = 0)
            _offset--;
        // hessian/3b2i vs hessian/3406
        // return readObject();
        Object value = findSerializerFactory().getDeserializer(expectedClass).readObject(this);
        return value;
    }
可以看到，其实现代码非常长，但是不难理解，hessian2的readObject反序列化，都是根据读到约定的字符tag，从而进行约定的数据读取处理
这样，根据我们抓包得到的序列化数据，我们就不难理解其结构组成了：
    ...           .G.2.0.20,com.threedr3am.learn.server.boot.DemoService.1.0.hello0$Lcom/threedr3am/learn/server/boot/A;C0"com.threedr3am.learn.server.boot.A..name`.xxxxH.path0,com.threedr3am.learn.server.boot.DemoService.activelimit_filter_start_time 1577081623564 interface0,com.threedr3am.learn.server.boot.DemoService.version.1.0.timeout.3000Z
  * .G.2.0.20：dubbo版本
  * com.threedr3am.learn.server.boot.DemoService：path
  * 1.0：version
  * hello0：方法名
  * Lcom/threedr3am/learn/server/boot/A;：方法描述
hessian-tag：
  * C：类定义
  * H：键值对
  * …具体细节也不详细描述
其实，我们只要知道了dubbo协议请求的数据结构组成，那么，我们就能随意创建数据包，去进行反序列化攻击。
但是，对hessian2反序列化，有一个关键的细节，就是对于类的反射构造实例化，会有比较大的限制：
    case 'C': {
        readObjectDefinition(expectedClass);
        return readObject(expectedClass);
    }
    private void readObjectDefinition(Class cl)
            throws IOException {
        String type = readString();
        int len = readInt();
        String[] fieldNames = new String[len];
        for (int i = 0; i < len; i++)
            fieldNames[i] = readString();
        ObjectDefinition def = new ObjectDefinition(type, fieldNames);
        if (_classDefs == null)