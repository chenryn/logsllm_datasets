nication between the C&C repository and the attacker’s
host is invisible to the victim. We visualize an abbreviated
pruned provenance subgraph of the attack in Figure 2(a).
We will continue to use this attack as a running example
throughout the rest of the paper.
3.2 Challenges
Satisfying both the accuracy and the efficiency for cross-
host data flow tracking are challenging. Existing prove-
nance systems that support cross-host accurate data flow
capturing [50, 67] rely on performing DIFT at the runtime,
which naturally propagates the tags from the execution
of a program to another host without losing any tags and
their dependencies. Unfortunately, such systems suffer
from 10×–30× runtime overhead, making them impracti-
cal in production systems. Instead, to ensure both runtime
efficiency and accurate data flow tracking, refinable sys-
tems [25, 35] record the execution of every process in the
system, and selectively replay some of them related to
1708    27th USENIX Security Symposium
USENIX Association
git:ssh:0GTKgit:ssh:1024res:0:v1GTVres:0:v2git pushgit packsshresultsgit commitclient-hook/etc/group/etc/passwd.ssh/id_rsasshdClientServergit unpackobjectsserver-hookAttacker's hostscp5.5.5.5:22id_rsa GTKgroupGTKpasswdGTKres:0:v1GTKres:0:v2GTVpasswdid_rsassh:sshd:0GTKGTVssh:sshd:1git:ssh:0git:ssh:1obj:0GTKGTVssh:sshd:05.5.5.5:0GTKGTVobj:5obj:05.5.5.5:0ssh:sshd:1obj:5.ssh/id_rsa/etc/passwdresultsobjects5.5.5.5:22readreadreadwriteclonecloneclonereadpiperecvsendclonecloneclonereadsendAttacker's hostServerClient(b) Data Flow Overlay(a) Provenance Graph & Tagspipessh:sshd:0GTKGTVssh:sshd:1git:ssh:0git:ssh:1ssh:sshd:0GTKGTVssh:sshd:1git:ssh:0git:ssh:1024writeclone Versioningthe attack with DIFT instrumentation. However, existing
refinable systems are subject to a tag-dependency chal-
lenge that requires the replay and DIFT of every process
to be performed in the same order as the recording if a
dependency exists in tags involved in different replayed
processes. The enforcement of the order requires the
DIFT tasks to wait for their upstream DIFTs to update the
tag values that they depend on. Although the record-and-
replay function can faithfully re-construct the program
states at replay time, it still takes non-trivial (and error-
prone) efforts to serialize and orchestrate the replays of
different processes to re-establish the dependencies for
tag propagation between different hosts.
The tag-dependency challenge becomes outstanding
when we aim to replay processes on multiple hosts to
investigate cross-host attacks. This is because the interac-
tive two-way communication (for the purpose of network
or application-level protocol) demands the replays to be
paused and waiting iteratively for enforcing the same tag
dependency as the recording, which further lengthens
the waiting time (i.e., analysis time consumption), and
increases the complexity of replay orchestration.
Let us look into one example of replay from the Gitp-
wnd attack [32] (detailed in §3.1) for the communication
between the client-side ssh and the server-side sshd in
Figure 1(a). At the server side, the replay of sshd needs
to be paused to wait for the replay of ssh-client at
the client side to fulfill the propagation results in the tag
map for the traffic. Furthermore, this traffic will be used
by sshd to respond to ssh as an ssh protocol response,
which means the replay of ssh needs to be paused and
wait for sshd as well.
This challenge is exacerbated when many parties are in-
volved in group communication. For example, to enforce
the tag dependencies for the operation of searching and
downloading a file from a peer-to-peer (P2P) file sharing
network (e.g., Gnutella [7]), we need to orchestrate the
replays of P2P clients on each node, in which case the
approach becomes infeasible particularly when we are
faced with hundreds or thousands of nodes. §8 shows the
DIFT time cost and compares it with RTAG in Table 1.
To systematically overcome the tag-dependency chal-
lenge, we propose RTAG that decouples the tag depen-
dencies from the replays by using symbolized tags with
optimal size for each independent DIFT. We show RTAG
effectively solves the challenge while significantly speed-
ing up DIFT tasks and reducing their memory consump-
tion.
4 Overview
We propose a tagging system, RTAG, that decouples the
tag dependency from the analysis (i.e., DIFT tasks), which
previously was inlined along with the program execu-
tion or its replayed DIFT, and enables DIFT to be in-
dependent of any required order—allowing performing
DIFT for different processes on multiple hosts in parallel.
Such independence spares the complex enforcement of
orders during the offline analysis. Note that our parallel
DIFT concerns inter-process (or host) DIFT, which is
orthogonal to the intra-process parallel DIFT techniques
in [46, 47, 55].
RTAG maintains a tagging overlay on top of a con-
ventional provenance graph, enabling independent and
accurate tag management. First, when DIFT is to be per-
formed, RTAG uses a tag switch technique to interchange
a global tag that is unique across hosts and a local tag that
is unique for a DIFT instance. Using a local tag for each
DIFT disentangles the coupling of tags shared by different
DIFT tasks. After the DIFT is complete, RTAG switches
the local symbol back to its original global tag. Second,
to ensure no tag as well as their propagation to other tags
is lost when the tag of a piece of data is updated more
than once, RTAG keeps track of each change (version)
of the data according to system-wide write operations.
Each data version has its own tag(s) and each version of
tag values can be correctly propagated to other pieces
of data. Figure 1(b) depicts how RTAG facilitates the
independent replay and DIFT for the cross-host ssh dae-
mon and client example with the tag overlay and a set of
techniques (i.e., tag switch, allocation, and association).
RTAG not only speeds up the analysis by enabling inde-
pendent DIFT, but also reduces the memory consumption
when DIFT is performed. We allocate local symbols of
each DIFT with the optimal symbol size that is sufficient
to represent the entropy of data involved in the memory
overlap (i.e., “interference”) in each DIFT (§6.5). For
tracking the data communication across hosts, RTAG ap-
plies a tag association method (§6.6) to map the data that
are sent from one host and the ones that are received at an-
other host at byte level, which facilitates the identification
of tag propagation across hosts.
5 Threat Model and Assumptions
In this section, we discuss our threat model and assump-
tions. The goal of our work is to provide a system for
refinable cross-host attack investigation through DIFT.
This work is under a threat model in which an adver-
sary has a chance to gain remote access to a network of
hosts, and will attempt to exfiltrate sensitive data from
the hosts or to propagate misinformation (i.e., manipu-
late data) across the hosts. Our trusted computing base
(TCB) consists of the kernel in which RTAG is running,
and the storage and network infrastructure used by RTAG
to analyze the information collected from the hosts under
USENIX Association
27th USENIX Security Symposium    1709
analysis. Our TCB surface is similar to the one assumed
by other studies [19, 35, 45, 48].
We make the following assumptions. First, attacks will
happen only after RTAG is initiated (for collecting the
information about attacks from the beginning to the end).
Note that partial information about attacks can still be
collected even if this assumption is not in place. Second,
attacks relying on hardware trojans and side/covert chan-
nels are outside the scope of this paper. Although RTAG
does not yet consider these attacks, we believe a record-
and-replay approach has the potential to detect similar
attacks as presented in related work [21, 65]. Third, we
assume that although an attacker could compromise the
OS or RTAG itself, the analysis for previous executions
is still reliable. That is, we assume the attacker cannot
tamper with the data collected and stored from program
executions of the past. This can be realized by leveraging
secure logging mechanisms [18, 68] or by managing the
provenance data in a remote analysis server. Finally, we
assume that the attacker cannot propagate misinformation
by changing the payload of network packets while they
are being transferred between two hosts (i.e., there is no
man-in-the-middle attack).
6 Tagging System
We present the design of RTAG tagging system in this
section. First, we describe the design of the tag overlay
and how it represents and tracks the data provenance in
the cross-host scope §6.1. Second, in §6.2, we recall
the reachability analysis from RAIN [35] and how it is
extended for the cross-host case and benefits the tag al-
location. Third, we explain how RTAG decouples the tag
dependencies from the replays (§6.3), and the tag switch
technique (§6.4). Fourth, we explain how we optimize
the local tag size in pursuit of memory cost reduction in
the DIFT. Fifth, we describe how to associate tags in the
cross-host communication §6.6. Finally, we present the
investigation query interface in §6.7.
6.1 Representing Data Flow and Causality
To track the data flow between files and network flow
across different hosts, we build the model of tags as an
overlay graph on top of an existing provenance graph
(such as RAIN [35]). Within the overlay graph, RTAG as-
sociates globally unique tags with interesting files to track
their origin and flows at byte-level granuality. The tags
allow RTAG to trace back to the origin of a file including
from a remote host and to track the impacts of a file in
the forward direction even to a remote host. With this
capability, RTAG extends the coverage of the refinable at-
tack investigation [35] to multiple hosts. The provenance
graph is still necessary to track the data flows: 1) from
a process to a file; 2) from a process to another process;
and 3) from a file to a process. An edge indicates an event
between two nodes (e.g., a system call such as one that a
process node reads from a file node).
In the overlay tag graph, each byte of a file corresponds
to a tag key, which uniquely identifies this byte. Each tag
key is associated with a vector of origin value for this key
(i.e., this byte). By recursively retrieving the value of a
key, one obtains all of the upstream origins starting from
this byte of data in a tree shape extending to the ones at a
remote host. Reversely, by recursively retrieving the tag
key of a value, the analyst is able to find all the impacts
in a tree shape including the ones at a remote host (see
Figure 2(b) as an example).
As we log the system-wide executions, RTAG needs
to uniquely identify each byte of data in the file sys-
tem on each host as a “global tag.” For this require-
ment, RTAG uses a physical hardware address (i.e.,
mac address) to identify a host,
identifiers such as
inode, dev, crtime to identify a file, and an offset
value to indicate the byte-level offset in the file. For exam-
ple, the physical hardware address (i.e., mac address) is
48 bits long. The inode, dev, crtime are 64 bits,
32 bits, and 32 bits consecutively. The offset is 32-bits
long, which supports a file as large as 4GB. Thus, in total,
the size of a global tag can be 208 bits.
6.2 Cross-host Reachability Analysis
RTAG follows the design of reachability analysis in
RAIN [35], and extends it to cope with the cross-host sce-
narios. Given a starting point(s), RTAG prunes the original
system-wide provenance graph to extract a subgraph re-
lated to the designated attack investigation that contains
the causal relations between processes and file/network
flow. RTAG relies on the coarse-level data flows in this
subgraph to maintain the tag overlay while performing
tag switch and optimal allocation. The reachability anal-
ysis first follows the time-based data flow to understand
the potential processes involved in the attack. Next, it
captures the memory overlap of file or network inputs/out-
puts inside each process and labels them as “interference,”
to be resolved by DIFT. With accurate interference infor-
mation, the replay and DIFT are fast forwarded to the
beginning of the interference (e.g., a read syscall) and
early terminated at the end (e.g., a write syscall).
For the network communication crossing different
hosts, RTAG links the data flow from one host to another
by identifying and monitoring the socket session. As
we present in §6.6, RTAG tracks the session by match-
ing the IP and port pairing between two hosts. RTAG
further tracks the data transfer at byte level via socket
communication for both TCP and UDP protocols, which
enables the extension of tag propagation across hosts.
1710    27th USENIX Security Symposium
USENIX Association
Unlike the runtime DIFT system, RTAG has the compre-
hensive knowledge of source and sink from the recorded
file/network IO system-call trace, thus is able to allocate
an optimal size of tag for each individual DIFT task. We
show in §6.5 that this optimization significantly reduces
the memory consumption of DIFT tasks. In addition, to
avoid losing any intermediate tag updates to the same
resource performed by different processes, RTAG partic-
ularly monitors the “overwrite” operations to the same
offset of a file and tracks this versioning info, so it accu-
rately knows which version of the tag should be used in
the propagation.
6.3 Decoupling Tag Dependency
As a refinable provenance system, RTAG aims to per-
form DIFT at the offline replay time without adding high
overhead to the runtime of the program. The replay recon-
structs the same program status as the recording time by
enforcing the recorded non-determinism to the replay of
process execution. The non-determinism includes the file,
network, and IPC inputs which are saved and maintained
with a B-tree [25]. Such enforcement enables the program
to be faithfully replay-able at process level.
To extend this approach to capture the end-to-end data
flow across multiple hosts, we need to figure out how to
coordinate replay programs on different hosts to track
tag dependencies between them. One possible method
is decoupling tag dependencies from each replay of the
process, so it can be performed independently with no
dependency on other replays. We achieve the decoupling
by using local (i.e., symbolized) tags for each DIFT. Such
symbolization needs to distinguish the change of a tag be-
fore and after the write operation on it, and synchronize
the change to other related tags as well. In other words,
RTAG needs to track the dynamic change of origin(s) of
each tag after each IO operation (i.e., multiple versions
of the tag are tracked).
Let us illustrate with the data exfiltration in the Gitp-
wnd attack example in Figure 2(a). The client-hook
daemon keeps reading data from different files (e.g.,
/etc/passwd, id_rsa) and saves them into a
results file which is recycled over a period of time.
Meanwhile the git pack application copies from the
results file whenever the victim does git commit
operation, and shares data with ssh via the pipe IPC,
which will be shipped off the host. To correctly differ-
entiate the two data flows, id_rsa→results→pipe
and /etc/passwd→results→pipe, RTAG needs
to maintain two versions of the tags for results.
The DIFT on client-hook stores the origin of
results.v1 to be id_rsa, and the origin of
results.v2 to be /etc/passwd (circled with red
dash line), while the DIFT on git pack is able to
discriminate the source of the IPC traffic git:ssh at
offset 0 from results.v1 and further from id_rsa,
and the source of the IPC traffic at offset 1024 from
results.v2 and further from /etc/passwd. Most
importantly, now the client-hook and git pack
DIFT tasks can be performed independently without los-
ing intermediate tag values because of the overwriting on
results.
To facilitate the versioning, we append a 32-bit “ver-
sion” field to indicate the version of the data in the file
with regards to the file IO operation. According to the
sequential system-call trace, the version is incremented
at every event in which there is a write operation against
this certain byte (e.g., write(), writev()). In the
case of memory mapped file operation (e.g., mmap()),
the version is incremented at the mmap() if the prot
argument is set to be PROT_WRITE. The version field is
only used when this tag is included in the data interfer-
ence determined by the reachability analysis. We assign
32 bits for this field that can pinpoint a file IO syscall in
around 500 days based on our desktop experiment.
6.4 Switching Global and Local Tags
The entropy of the global tag defined in §6.1 is sufficient
enough to identify a byte of a file at a certain version
across multiple hosts. However, using the global tag for
each DIFT task is a waste of memory because each DIFT
task of RTAG only covers a process group such that a local
tag ensuring process-group-level uniqueness is enough.
Thus, for each DIFT task, we use a different tag size based
on the entropy of its source symbols. RTAG switches the
tags from global to local before doing DIFT, and switches
them back when the DIFT is done. The tag for DIFT is
local because it only needs to uniquely identify every byte
of the source in the current in-process DIFT, rather than
identify a single byte of data across multiple hosts.
Further, the number of sources in each DIFT depends
on the reachability analysis result, which is usually largely
reduced by data pruning. In other words, the local tag
size depends on the interference situation. Therefore, the
entropy for the local tag is much lower than the global tag.
For example, if the program reads only 10 bytes from a
file marked as a source in DIFT, in fact as low as four bits
are sufficient to represent each of these bytes. Compared
against the global tag size (i.e., 208 bits §6.1), the switch
brings 52× reduction in tag size (in practice, the reduction
can be as large as 26× capped by the compiler-enforced
byte-level granuality, which we discuss in detail in §7).
Moreover, the tag size affects not only the symbols for the
source and sink, but also all the intermediate memory lo-
cations and registers because the tags are copied, unioned,
or updated along with the execution of each instruction ac-
cording to the propagation policy of DIFT. Therefore, the