type takes 12 bytes). Therefore, the overall trafﬁc load on
Operator for each session is ≈ 1000 bytes.
4https://httpd.apache.org/docs/2.4/programs/ab.html
3) Size of the Webpage Database: The Operator maintains
a database containing information on how to browse different
censored websites supported by the Buddies. While the number
of such unique domains for every website could be high, the
database stores the domains in regex format, combining groups
of similar domains with identical censorship information into
single entries. The majority of the websites have at most 50
entries in Operator’s database; given that each entry is around
1KB, each website will use at most 50KB in the database.
Based on these factors, we estimate Operator’s operational
costs, which is hosted over the Amazon AWS.
Cost of Running the Operator Servers: We estimated every
user to request 20 sessions per day. For 10M users this
requires 200M requests which would amount to an average of
2000 requests per second. Four AWS EC2 a1.metal instances,
costing at about $0.408 an hour (at the time of writing), will
be sufﬁcient for handling this load of requests generated by
10,000,000 users. The monthly cost will amount to $0.00011
per user.
Cost of Deploying on CDNs: We have hosted the Operator
on the Amazon Cloudfront CDN. Amazon Cloudfront charges
based on the volume of trafﬁc, and the locations of the CDN
edge servers used. Note that Operator’s communications with
Clients are not latency sensitive; therefore, it sufﬁces for the
Operator to use a cheap CDN service (we use a service with
$0.01 per GB). As estimated above, each user will request 600
sessions per month, for which the Operator will need to send
600 KB of control data to the Clients; this costs $0.00006
per user each month. The user will also need to synchronize
her local database with Operator, resulting in a one-time 50
KB data transfer for each supported website, which costs
$0.0000005 per user for every website.
Comparing costs with meek: Meek [45] is a Tor pluggable
transport that relays Tor trafﬁc through domain fronted proxies
to evade censorship. In order to operate, meek must proxy all
of the users’ trafﬁc through CDN servers. As a result, unlike
MassBrowser the costs of operating meek is proportional to
the client’s bandwidth usage. As we saw in the previous
analysis, we estimate the cost for a MassBrowser user with
600 sessions per month to be $0.00006 each month using
Amazon Cloudfront CDN, regardless of
the
websites browsed (e.g., video streaming, news, etc.). If we
assume each session to be just for one website load and each
website to have an average of 2.4 MB (as we measured), then
the same client using meek over Amazon Cloudfront CDN
will cost 600 ∗ 0.0024 ∗ 0.01 = $0.014, which is over 200
times the cost of the user on MassBrowser. Note that in real
life each session will be used to browse multiple websites and
may require higher trafﬁc (e.g., for video streaming), therefore,
the cost gap will be even greater in favor of MassBrowser.
the types of
D. MassBrowser as a Tor Transport
As mentioned before, MassBrowser can be used as a Tor
pluggable transport, i.e., a Client who needs anonymity can
connect to a Buddy who whitelists Tor trafﬁc. We measured the
time to load the top 100 Alexa websites with Tor, using Mass-
Browser as a bridge for Tor, and using MassBrowser without
Tor (experiments were performed from the same vanatge points
13
TABLE IV.
AVERAGE PAGE LOAD LATENCIES FOR DIFFERENT
WEBSITE OVER TOR, MASSBROWSER AS A TOR BRIDGE, AND
Website
+ Tor (s)
MASSBROWSER ALONE.
Tor (s) MassBrowser
19.6
27.3
27.4
7.5
Wikipedia.com 29.5
Google.com
Youtube.com
Facebook.com
20.3
25.6
30.4
10.1
22.3
Baidu.com
MassBrowser
(s)
2.6
6.3
6.6
1.7
1.1
in Iran). We browsed each website 50 times over each setting
and computed the average time to load the websites. Table IV
presents the load times for different websites. On average
loading each website on Tor takes more than 16 seconds longer
than using MassBrowser. Using MassBrowser as a Tor bridge
does not signiﬁcantly change the load times compared to using
therefore, MassBrowser’s
Tor with no pluggable transport;
added latency on Tor is negligible, making MassBrowser a
suitable plug for Tor bridges.
E. Effect of Churn
We expect MassBrowser to be resistant to Buddy churn.
This is because each Buddy runs a stand-alone software
application (as opposed to web sessions in systems like
FlashProxy [19]), and therefore the churn times are in the
order of several hours5 (e.g., when the users restart) rather
than minutes. Since the primary use of MassBrowser is web
browsing, such long churn times will have little impact on
short-lived HTTP/HTTPS sessions.
VII. DISCUSSION OF SECURITY AND PRIVACY
GUARANTEES
In this section, we discuss the privacy guarantees of Mass-
Browser’s components.
A. Client Privacy
A. Privacy against Buddies A MassBrowser Buddy imposes
the same privacy threats to its Clients as a network observer,
e.g., an ISP, on regular Internet users.
Anonymity against Buddies: As discussed earlier, providing
client anonymity is not a design goal for MassBrowser based
on the SoP principle. Therefore, a Buddy can learn the
destinations being accessed by her connected Clients —this
is similar to how a typical network observer (like an ISP or
a transit AS) can learn browsing patterns of typical Internet
users. Note that, like a normal Internet user, a MassBrowser
client needing anonymity can use an anonymity system like
Tor—through MassBrowser —(i.e., by connecting to Buddies
that support Tor).
Conﬁdentiality from Buddies: A Buddy will not be able to see
its Clients’ communication content for HTTPS destinations,
which includes the majority of services hosting sensitive user
data like social networking websites and search engines. A
Buddy, however, will be able to see a Client’s communication
content to an HTTP destination, similar to how an ISP observes
5https://www.statista.com/statistics/736727/
worldwide-teen-average-online-time-devices/
14
the HTTP trafﬁc of its users. A MassBrowser Client can opt
to use MassBrowser for HTTPS websites.
Surveillance by censor-run Buddies: A powerful organization
that runs numerous Buddies for user surveillance is not dif-
ferent than a nation state or ISP wiretapping through Internet
routers. Real-world observations over the years have shown
that censoring governments tend to not penalize their users for
the sole act of circumventing censorship. The risk is much
less for MassBrowser Clients as, by design, MassBrowser
Buddies do not allow connection to controversial websites with
potential legal consequences (for such websites, the clients will
need to use Tor through MassBrowser).
Identiﬁcation by censors who know Buddies: The Buddies
obtained by a censoring client from Operator can not be used to
learn any information about the Clients who use these Buddies.
This is because different Clients connecting to the same Buddy
will make connections through different IP address and port
combinations due to NAT.
B. Privacy against Operator Unlike traditional circumven-
tion tools like Psiphon, Anonymizer, and Lantern, in Mass-
Browser the Operator of the circumvention system is separate
from the proxying parties. Therefore, the Operator is not able
to observe Client trafﬁc. The Operator can only learn the
categories of content a Client is willing to access.
B. Buddy Privacy
Privacy against Clients A Client using a Buddy will only
learn the (ephemeral) NATed IP address of that Buddy, but no
other information. As Client-Buddy assignments are performed
by the Operator, a Client can not choose the Buddy to connect.
Privacy against Operator The Operator will have access to a
Buddy’s preferences such as her whitelisted content types and
speciﬁed bandwidth limits. A Buddy’s IP address will also be
exposed to the Operator, however similar to the Clients, this
is the NAT IP address of the Buddy, which is also visible to
any other web service the Buddy connects to on the Internet.
C. Security and Reliability
Outright blocking of large IP domains
If the censors are
willing to disrupt unknown network protocols, they can block
all suspected/unknown IP addresses, which will signiﬁcantly
impact the operation of any proxy-based circumvention system
like MassBrowser.
Taking over the Operator Like other centralized circum-
vention systems, if the censors are able to take control of the
Operator, the will be able to shut it down and learn the IP
addresses of the active Clients and Buddies.
Blocking the Operator’s IP In MassBrowser, the Operator
has the same protection against IP blocking as domain fronting
systems. That is, being run on public CDNs, the censors will
have to block a whole CDN in order to block the Operator.
Blocking the Buddies’ IP The IP enumeration techniques that
censors practice against traditional circumvention systems like
Tor [81], [16] will not work against MassBrowser Buddies.
This is because the censors can only obtain the NAT IPs of
the Buddies; blacklisting such IPs will have similar collateral
damage as blocking domain fronting systems.
Trafﬁc ﬁngerprinting All MassBrowser communications
between Clients and Buddies are obfuscated (and encrypted)
using a tailored variant of obfsproxy [53] to prevent known
trafﬁc ﬁngerprinting attacks [31], [24], [76]. The key difference
of our tailored protocol with obfsproxy is that we omit the
handshaking process of obfsproxy, since the Operator com-
municates the information needed to bootstrap the sessions
(through the session data tokens in Figure 7) to the Clients
and Buddies. Removing the handshaking process improves
resilience to known ﬁngerprinting attacks on obfsproxy [76].
All Client trafﬁc to the Operator is protected with domain
fronting.
DoS attacks through censor Sybils As discussed in Sec-
tion IV-A, a censor who obtains a Buddy from the Operator can
not block that Buddy, nor can he identify the Buddy’s clients.
However, a resourceful censor may overload the obtained
Buddies to consume their available circumvention capacities.
Note that such an attack is not a strong DoS attack, as the load
on the attacker and victim is symmetric (asymmetry is the key
property of real-world DoS attacks). Nonetheless, our Operator
deploys standard Sybil protection mechanisms as explained
earlier.
TLS interception by the censors If the censors are able to
intercept the TLS communications, all circumvention systems
including MassBrowser will be insecure.
Compromising a Client’s local certiﬁcate As described
before, each Client will use a locally created certiﬁcate to inter-
cept and optimize MassBrowser connections. If an adversary
is able to somehow obtain the private key of this certiﬁcate
for a speciﬁc Client (e.g., through installing a malware on the
target device), he will be able to intercept all connections or
disrupt communications of that speciﬁc Client.
Faulty Buddies A large number of faulty/misbehaving Bud-
dies will negatively impact the usability of MassBrowser to
the clients. A Buddy can be faulty due to various reasons such
as changes in ﬁrewall ﬁlters or NAT mappings that are not yet
synced with the Operator, poor network connectivity, or being
owned by malicious parties. To prevent this, our measurement
backend periodically establishes connections through the Bud-
dies to assess their reachability and remove faulty Buddies
from the system.
VIII. CONCLUSIONS
In this paper, we presented the design and deployment
of the MassBrowser censorship circumvention system. Mass-
Browser is a volunteer-run circumvention system, and its
goal is to provide effective censorship circumvention to a
large mass of censored users, with a high quality of service
(QoS), low cost of operation, and adjustable privacy protec-
tion. Towards this, MassBrowser separates circumvention from
privacy protection, allowing it to optimize the system around
circumvention. MassBrowser has been deployed as a fully
operational system with end-user GUI software for major op-
erating systems, and it is currently available to early-adopters
through invitations. The code and software are available online
https://massbrowser.cs.umass.edu/.
ACKNOWLEDGEMENTS
We would like to thank our shepherd Carmela Troncoso
and anonymous reviewers for their extremely helpful com-
ments. We also would like to thank many people who provided
feedback on this project since it started, in particular, Roger
Dingledine, Philipp Winter, and Matthew Finkel (Tor project),
Nicholas Merlino (UMass Amherst), Matthew Wright (RIT),
and others who preferred to remain anonymous.
The MassBrowser project has been under active develop-
ment since 2017. During this time, many people have sup-
ported the project by contributing to its code at different levels
or by testing our software. Specially, we are extremely thankful
to (and proud of) several UMass undergraduate students who
helped the project by contributing to the development or testing
of the project (but no substantial technical contributions); this
includes (alphabetically) Derek Costigan (Undergraduate Hon-
ors Thesis, 2016), Joseph Lew (Undergraduate Honors Thesis,
2017), Matthew Hickey (Undergraduate Honors Thesis, 2019),
Matthias Didong (Undergraduate exchange student, 2019), and
Milo Cason-Snow (Undergraduate Honors Thesis, 2020).
The project has been generously supported by the National
Science Foundation (NSF CAREER grant CNS-1553301) and
the Open Technology Fund. Milad Nasr has been supported
by a Google PhD Fellowship in Security and Privacy.
REFERENCES
[1] Akamai, “State of the Internet Connectivity Report, Q1 2017,” https://
www.akamai.com/us/en/about/our-thinking/state-of-the-internet-report/
global-state-of-the-internet-connectivity-reports.jsp.
[2] Alexa, “Top Websites,” https://www.alexa.com/topsites.
[3]
“Amazon threatens to suspend Signal’s AWS account over censor-
ship circumvention,” https://signal.org/blog/looking-back-on-the-front/,
May 2018.
“Dark net raids were overblown by police,” http://www.bbc.com/news/
technology-29987379.
[4]
[5] M. Azali, “Infographic: Facebook Usage Statistics in Iran,” http://
techrasa.com/2017/08/16/infographic-facebook-usage-statistics-iran/.
“Access Now and EFF Condemn the Arrest of Tor Node Operator
Dmitry Bogatov in Russia,” https://goo.gl/nNmP86.
[6]
[7] C. Brubaker, A. Houmansadr, and V. Shmatikov, “CloudTransport:
Using Cloud Storage for Censorship-Resistant Networking,” in Privacy
Enhancing Technologies, 2014.
[8] S. Burnett, N. Feamster, and S. Vempala, “Chipping Away at Censorship
[9]
[10]
[11]
[12]
Firewalls with User-Generated Content,” in USENIX Security, 2010.
“China’s GitHub Censorship Dilemma,” http://mobile.informationweek.
com/80269/show/72e30386728f45f56b343ddfd0fdb119/.
“Penalties For Using VPN In Various Countries,” https://www.
vpnunlimitedapp.com/blog/penalties-for-using-vpn/.
“Everyone’s Guide to By-Passing Internet Censorship for Citizens
Worldwide,” http://www.nartv.org/mirror/circ guide.pdf.
“Another Strike Against Domain Fronting,” https://wills.co.tt/1746/
another-strike-against-domain-fronting, February 2017.
“Amazon Cloudfront CDN,” https://aws.amazon.com/cloudfront.
a Blocking-
Resistant Anonymity System,” https://svn.torproject.org/svn/projects/
design-paper/blocking.html.
and N. Mathewson,
“Design of
[13]
[14] R. Dingledine
[15] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The Second-
Generation Onion Router,” in USENIX Security, 2004.