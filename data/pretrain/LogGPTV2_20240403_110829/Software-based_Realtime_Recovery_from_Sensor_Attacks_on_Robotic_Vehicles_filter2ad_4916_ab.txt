data is then processed to obtain the angles (i.e., internal state
values) which are returned at line 30.
The sensor attack on the gyroscope compromises the an-
gular rate measurements at line 19. Since attitude_con-
troller() generates motor inputs based on the angles from
read_AHRS(), any compromised gyroscope reading would
disrupt the entire control loop. For example, in a stable hover-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    351
Preparing Attack ...Attack OnAttack OnAttack OnAttack OnAttack Oning operation, errors between the current and target angles are
minimal. However, the attack compromises the current angles
causing an instant increase in the errors. The controller then
generates motor input to reduce these fake errors, and conse-
quently introduces unwanted maneuvers. Since the compro-
mised sensor cannot provide the actual valid measurements,
the error accumulates over loop iterations.
Our Recovery Approach. Motivated by the sample attack,
we propose a software sensor based defense technique. We
Ô¨Årst construct a system model that models the behaviors of the
controller, actuators, vehicle physics and dynamics. Specif-
ically, it predicts the next physical state given the system
input (i.e., reference) and the current state. Software sensors
do not interact with the physical environment such that they
are immune to physical attacks. Instead, they ‚Äúmeasure‚Äù the
states produced by the system model. In the closed feedback
loop as shown in Figure 4, the software sensors are used as
standbys: they work in synchrony with the real sensors, and
are prepared to take over any time. The recovery switch de-
termines an attack by monitoring the difference between the
real and the software sensors measurements, and replaces the
real sensors with the corresponding software sensors in the
event of an attack. Additionally, if an attack is transient, the
switch determines when the attack ends by continuously mon-
itoring the difference, and switches back to the real sensors.
Our design is particularly suitable for handling diverse attack
scenarios, e.g., attacking one sensor, two sensors (of the same
kind), all sensors (of the same kind), and multiple sensors of
different kinds, because it detects the ones that misbehave
and replaces them with the software version. In contrast, tra-
ditional sensor fusion based fault tolerance techniques [4, 16]
(e.g., Extended Kalman Filter (EKF) [27]) rely on real physi-
cal sensors, including the compromised ones. Therefore, they
have difÔ¨Åculties dealing with attacks that corrupt majority
sensors of the same kind.
(a) Attack without recovery
(b) Attack with recovery
Figure 5: Roll changes under the attack
from the attack. Figure 5 shows the changes of roll angle
(one of the attitude angles) under the attack with and with-
out the recovery modules during the same mission. The red
(star marker) and blue (circle marker) line show the real and
software sensor reading, respectively. Before the attack is
launched (green area), both are almost identical. However, af-
ter the attack, the roll angle is dramatically increased without
any recovery action in Figure 5a, whereas with the recovery
module in Figure 5b, the software sensor masks and replaces
the compromised real sensor measurement. Thus, the recovery
modules enable the quadrotor to maintain stable attitude.
Technical Challenges. We should address several prominent
technical challenges to use the approach in practice on multi-
sensor vehicles: we need to (1) efÔ¨Åciently generate multiple
sensor predictions to recover from multi-sensor attacks; (2)
consider intrinsic errors such as model inaccuracy and exter-
nal disturbances (wind, noises, etc.); (3) isolate the speciÔ¨Åc
sensor under attack in time not to propagate corrupted mea-
surements to the vehicle‚Äôs internal; (4) set proper recovery
parameters such as the recovery switch threshold.
3 Design
Figure 4: Feedback control loop with our recovery modules
To describe how the recovery modules work, we inserted
the attack recovery code at lines 22-23 in Figure 3. The code
is placed right after the real sensors readings. At runtime, the
code checks if the difference exceeds a pre-deÔ¨Åned threshold
k, and if so, uses the software sensor measurements instead.
The details of software sensor generation and how we distin-
guish attacks from non-deterministic environmental condition
changes will be described in Section 3.2 and Section 4.2.2.
With our recovery modules, the quadrotor can be recovered
Figure 6: Overview of our recovery framework
Figure 6 presents a high level work-Ô¨Çow of our proposed
recovery framework. Each kind of RV, such as quadrotor,
hexrotor, and rover, has the same system model template, for
example, a polynomial with a speciÔ¨Åc order and unknown
coefÔ¨Åcients. The system models of different vehicles (of the
same kind) can be considered as various concrete instan-
tiations of the template, that is, polynomials with concrete
coefÔ¨Åcients. Hence, as the Ô¨Årst step of our technique (Sec-
tion 3.1), given a model template and operation data (i.e., state
logs) for a target RV, we leverage system identiÔ¨Åcation [32],
a widely used technique to derive system models for the RV.
Intuitively, one can consider that it is a training procedure
to derive the unknown coefÔ¨Åcients such that the model be-
haviors have minimal errors with the operation log. These
352    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Œ£Controller-ReferenceActuatorsDisturbance+NoiseRecoverySwitchSensor FusionInputSignalSystem ModelSoftware SensorsSensorsSensorsSensorsRecovery ModulesAttackReal measurementSoftware sensorAttackReal measurementSoftware sensorOperation DataModel templateSystemIdentificationùë®ùíô+ùë©ùíñùë™ùíô+ùë´ùíñSoftware SensorGenerationRecovery Parameter SelectionProgram Patch / DeployRecoveryMonitoringOperation DatacoefÔ¨Åcients are jointly determined by the RV‚Äôs physical at-
tributes (e.g. weight and shapes), its control algorithm, and the
laws of physics. Once the system model is derived, the frame-
work constructs software sensors (Section 3.2) that operate
on model responses. Mathematically, these software sensors
are also polynomials that take the physical states predicted
by the model as input and produce the corresponding sensor
readings. For example, the framework employs the model‚Äôs
angular velocity states to predict the gyroscope sensor‚Äôs mea-
surements, thus creating a software-based gyroscope sensor;
the reading of air pressure sensor is derived from the altitude
prediction of the system model. Software sensor is an approx-
imation and has inherent errors (Section 3.3). Such errors
accumulate over time (drifting). Hence, we synchronize the
predicted states with the real states periodically. Also, our
recovery switch utilizes the historical (i.e., accumulated) er-
rors to prevent false alarms and to limit the impact of stealthy
attacks by using a small time window. In the next step, we
determine the appropriate time window size. The window size
is RV speciÔ¨Åc and hence requires analysis. In addition, we
determine the threshold for the recovery switch, which is RV
speciÔ¨Åc and sensor speciÔ¨Åc. Finally, the framework patches
the original control program by inserting the recovery code
(Section 3.4) right after sensor reading acquisition.
3.1 System Model Generation
Operation Data Pre-processing. To generate a system
model, i.e., a mathematical model reÔ¨Çecting RV‚Äôs behavior,
we Ô¨Årst collect a large corpus of input and output data of the
target RV under normal operations; where inputs are the tar-
get states, and outputs are the perceived states for the given
inputs over time. For the derivation of accurate model, we
collect and pre-process the data as follows: First, the data
is collected under different maneuvers to appropriately cap-
ture various control properties and dynamics. Our mission
generator produces random missions systematically based on
Mavlink [35] commands. However, since we constrain the
model with a template known a priori, the amount of data
needed by our approach is much less than an ML-based learn-
ing approach [26,46] ‚Äì only those involved in the template are
needed. Second, the data is collected at a high sampling rate
to adequately reÔ¨Çect the highly reactive behavior of the RV to
the surrounding physical environment. However, as the log
system uses substantial system resources for saving values
to memory (e.g., Ô¨Çash card or disk), the typical log update
rates are lower than the control loop frequency with a limited
number of variables. SpeciÔ¨Åcally, various RV components
have different update frequencies - e.g., 400Hz sampling rate
for critical sensors, 100Hz sampling rate for non-critical sen-
sors and RC modules, and 10Hz update rate for the RV‚Äôs own
log module. As such, aligning these different data streams
is a prominent challenge. To address the problem, we con-
vert various data streams to the same target frequency us-
Figure 7: System model in closed loop
ing a resampling technique. It interpolates new data points
within the range of existing sample points by minimizing
overall curvature, resulting in a smooth line that passes the
existing samples. Here, we use spline interpolation, to avoid
Runges‚Äô phenomenon [3] which causes oscillation in high
degree polynomials. OfÔ¨Çine resampling enables us to obtain
high frequency data without additional runtime overhead.
Model Construction. The template of an RV‚Äôs system model
consists of the state and output equations, i.e., Eq. (1) and
Eq. (2), respectively:
x(cid:48) = Ax(t) + Bu(t)
y(t) = Cx(t) + Du(t)
(1)
(2)
where u(t) is system input (i.e., the target state as shown in
Figure 7), and y(t) is system output. Output y(t) is measured
by sensors. The model speciÔ¨Åes how the physical states x(t)
of the system respond to external inputs and control signals
with the underlying control algorithm and system dynamics.
As shown in Figure 7, the system model (in the blue box)
can be considered a counterpart of the combination of control
algorithm, actuators, and vehicle dynamics (in the red box).
We leverage the system identiÔ¨Åcation (SI) technique [32] for
deriving the system model, which is widely used in different
applications [5, 56]. Given the model template (Eq. (1), (2))
and a large set of collected operation data, SI instantiates the
A, B, C, D matrices so that the resulting equations produce the
best Ô¨Åt for the data. We use the SI Toolbox by MATLAB [34].
Note that the system model is not a software sensor. The
output of the model should be accordingly converted to the
individual sensors with our on-the-Ô¨Çy operation and error
correction technique.
Example. For a quadrotor system, we can generate the models
for individual state variables, deÔ¨Åned by the following:
p q r(cid:3)
x =(cid:2)x
y
z œÜ Œ∏ œà Àôx
Àôy
Àôz
(3)
where [x y z] is the position vector, [œÜ Œ∏ œà] is the attitude an-
gles (roll, pitch, yaw), [ Àôx Àôy Àôz] is the vehicle velocity, and [p q r]
is the vehicle angular velocity. For each variable, we Ô¨Årst de-
termine the state and output template equations. SpeciÔ¨Åcally,
we use a discrete-time state-space model template, encoding a
PID controller and dynamics equations known a priori for the
family of the subject RV. Then, for each variable, we specify
a model order (i.e., the degree of polynomial equations). We
then employ SI to instantiate the unknown coefÔ¨Åcients of
the template using an iterative prediction error minimization
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    353
Œ£Controller-ReferenceActuatorsDisturbance+Sensor FusionSignalSystem ModelSensorsx(t)y(t)u(t)algorithm [32]. SI in our technique is not limited to the linear
state-space modeling. A non-linear model can also be derived
from the known template. However, for our purpose (e.g.,
rigid body RVs), the linear-model is sufÔ¨Åcient to approximate
the actual higher-order close-loop dynamic, since the domi-
nating system dynamic is a second-order system. Even for an
advanced non-linear control algorithm, the control effort is
mainly from the linear portion, namely proportion, derivative,
and integral [24, 55].
We note that our model construction is generic, since the
same model template can be used to instantiate the models for
a family of vehicles with a similar physical structure. Besides,
our methodology is efÔ¨Åcient. Given the proÔ¨Åle data and known
model template, SI can optimize the coefÔ¨Åcients and derive
a state-space model that accurately predicts the next states
with reasonable computation time (Section 4.2). Our model
construction is different from most SI applications in control
systems, which often focus on modeling the vehicle dynamics,
whereas ours models both dynamics and control algorithm.
3.2 Software Sensor Construction
Software sensor is a software-based virtual sensor which gen-
erates the prediction of the corresponding real sensor mea-
surement. It predicts real sensor reading based on the system
model output, i.e., the predicted new physical state. Since
the physical state prediction is completely model-based, soft-
ware sensors are independent of real sensor measurements
that are vulnerable to physical attacks. SpeciÔ¨Åcally, at run-
time, software sensor readings are compared with real sensor
measurements. Once an attack is detected on some physical
sensor (i.e., its real measurement differs signiÔ¨Åcantly from
the predicted one), the corresponding software sensor is used
to replace the real one. An RV often has many kinds of phys-
ical sensors. Their software version may require non-trivial
derivation from the system model outputs. In the following,
we explain the mathematical conversions entailed by software
sensors.
Conversion Operation. We provide the conversion opera-
tions for various sensors (accelerometer, gyroscope, barome-
ter, magnetometer, GPS).
An accelerometer measures linear acceleration of the vehi-
cle. However, the outputs of our example model contain only
12 states that do not directly include acceleration information.
Therefore, a conversion operation (Eq. (4)) is required.
a(t) = ck
v(t)‚àí v(t ‚àí k)
k¬∑ ‚àÜt
(4)
where v is the velocity, ‚àÜt is the sampling time interval (tempo-
ral distance between two samples), ck is a constant coefÔ¨Åcient
and k is the number of equidistant sample points; k is usu-
ally much larger than 1 to tolerate the noise induced by high
frequency sampling.
A gyroscope measures angular velocities which are critical
in maintaining stable movement, especially for aerial vehi-
cles. To obtain accurate measurements, the gyroscope in IMU
operates with a high sampling rate. Other sensors further help
to correct gyroscope sensor errors to estimate accurate orien-
tation state (i.e., attitude angles). Gyroscope intrinsically has
drift error over time due to an integration operation over angu-
lar velocities for obtaining angles. In the recoverability test of
our approach under the different combinations of attacks on
multiple sensors (see Section 4.2.2), gyroscope sensor is the
most sensitive and requires accurate prediction for recovery.
In this case, it turns out that using software gyroscope alone is
not sufÔ¨Åcient (leading to reduced stability and operation time)
when all the physical gyros are compromised. As such, we
introduce a compensation approach to improve accuracy by
leveraging other types of real sensors. The details are shown
in Section 3.3.
A barometer measures atmospheric pressure, which is nec-
essary to determine altitude. We use Eq. (5) to calculate air
pressure from altitude (position z in the system model states).
(cid:20)‚àíg0 ¬∑ M ¬∑ (z‚àí h0)
(cid:21)
R¬∑ T0
Ph = P0 ¬∑ exp
(5)
where P0 is the base air pressure (Pa), g0 is the gravitational
acceleration (9.87m/s2), M is the molar mass of Earth‚Äôs air
(0.02896kg/mol), h0 is the base altitude, R is the universal
gas constant (8.3143N¬∑m/mol¬∑K), T0 is the base temperature
(K), and z is the current altitude from the model states.
A magnetometer, also known as compass, measures the
strength of the Earth‚Äôs magnetic Ô¨Åelds in 3-axis, which is used
to calculate orientation (heading) information. The following
equation shows the transformation of the magnetic Ô¨Åelds to
orientation status (i.e., the heading direction of the RV):
H = atan2(‚àímy ¬∑ cosœÜ + mz ¬∑ sinœÜ,
mx ¬∑ cosŒ∏ + my ¬∑ sinŒ∏¬∑ sinœÜ + mz ¬∑ sinŒ∏¬∑ cosœÜ)
(6)
where H is the heading direction yaw, and mx,my,mz are
the magnetic Ô¨Åeld measurements along each axis. Control
systems do not directly use the magnetic Ô¨Åeld measurements,
but rather rely on the extracted orientation. Therefore, instead
of converting the system model responses to raw magnetic
Ô¨Åeld sensor measurements, we directly use the orientation
states from the system model.
Global Position System (GPS) measures geometric posi-
tions and velocities which collectively enhance the position
and attitude estimation along with other sensors. GPS mea-
surements can be directly acquired from the system model.
Coordinate System Transformation. Based on the system
model responses and conversion equations, we can approxi-
mate sensor measurements. Note that internal state variables
and sensor measurements may be aligned with different refer-
ence frames. Intuitively, each frame can be considered a dif-
ferent coordinate system. Information can be exchanged/ag-
gregated only after they are projected to the same coordinate
354    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association