= "Host" ": " IP_ADDR CRLF
IP_ADDR
= (TEXT)+
"."
(TEXT)+
"."
(TEXT)+
"."
(TEXT)+
UNUSEDHDR
= (TEXT)+ CRLF
CONHDR
= "Connection"
": "
"keep-alive" | "close"
CRLF
ACCEPTHDR
= "Accept" (TEXT)+ CRLF
XACCEPTHDR =
"Accept-" (TEXT)+ CRLF
CRLF = "\r\n"
TEXT = printable ASCII character (no delimiter)
IRC
USERMSG
= "USER"
" "
(TEXT)+
" "
(TEXT)+
" "
(TEXT)+
" "
(TEXT)+
CRLF
TEXT = printable ASCII character
CRLF = "\r\n"
SMTP MAIL Command
MESSAGE
= "MAIL "
FROMLINE
CRLF
FROMLINE = "FROM:"
EMAIL
EMAIL
= ""
PATH
= "."
(TEXT)+
CRLF = "\r\n"
TEXT = printable ASCII character
DNS
QUERY = TRANSACTION_ID
FLAGS
QUESTIONS
ANSWER_RRS
AUTHORITY_RRS
ADDITIONAL_RRS
NAME
TYPE
CLASS
TRANSACTION_ID = BYTE{2}
FLAGS
= BYTE
"0x00"
= "0x0100"
QUESTIONS
= "0x0000"
ANSWER_RRS
AUTHORITY_RRS
= "0x0000"
ADDITIONAL_RRS = "0x0000"
NAME
= NAMEPART (NAMEPART)+
"0x00"
NAMEPART
= LENGTH
BODY
LENGTH
= BYTE
BODY
= TEXT{N}
TYPE
CLASS
= "0x0001"
= "0x0001"
TEXT = printable ASCII character
BYTE = any byte
RPC-NFS
LOOKUP_CALL
= XID
MESSAGE_TYPE
RPC_VERSION
PROGRAM
PROGRAM_VERSION
CREDENTIALS
VERIFIER
NFS_PAYLOAD
XID
= BYTE{4}
MESSAGE_TYPE
RPC_VERSION
PROGRAM
PROGRAM_VERSION
PROCEDURE
= CALL
= "0x00000002"
= NFS
= "0x00000002"
= LOOKUP
CREDENTIALS
= FLAVOUR
CREDENTIALS_LENGTH
CREDENTIALS_BODY
VERIFIER
= VERIFIER_FLAVOUR
VERIFIER_LENGTH
NFS_PAYLOAD
= DIRECTORY_HANDLE
FILE_NAME_LENGTH
FILE_NAME
[PADDING]
CREDENTIALS_LENGTH
= BYTE{4}
CREDENTIALS_BODY = STAMP
MACHINE_NAME_LENGTH
MACHINE_NAME
[PADDING]
UID
GID
AUXILIARY_GIDS
STAMP
= "0X0000" BYTE{2}
MACHINE_NAME_LENGTH
= BYTE{4}
MACHINE_NAME
= TEXT{N}
UID
= "0X0000"
BYTE{2}
GID
= "0X0000"
BYTE{2}
AUXILIARY_GIDS = AG_LENGTH
AG_BODY
AG_LENGTH
= BYTE{4}
AG_BODY
= BYTE{N}
DIRECTORY_HANDLE
= BYTE{8}
"0x00"{23}
FILE_NAME_LENGHT
= BYTE{4}
FILE_NAME
= BYTE{N}
PADDING = BYTE{1,3}
CALL = "0x00000000"
NFS= "0x000186a3"
LOOKUP = "0x00000004"
FLAVOUR = AUTH_UNIX
AUTH_UNIX = "0x00000001"
VERIFIER_FLAVOUR = "0x00000000"
VERIFIER_LENGTH = "0x00000000"
TEXT = printable ASCII character
BYTE = any byte
SMB Tree connect AndX Request
MESSAGE = NETBIOS_HDR SMB
NETBIOS_HDR = MESSAGE_TYPE LENGTH
MESSAGE_TYPE = SESSION_MESSAGE
SESSION_MESSAGE = "0x00"
LENGTH
= BYTE{3}
SMB = SMB_HDR TREE_CONNECT
SMB_HDR = SERVER_COMPONENT
SMB_COMMAND
NT_STATUS
FLAGS
FLAGS2
PROCESS_ID_HIGH
SIGNATURE
RESERVED
TREE_ID
PROCESS_ID
USER_ID
MULTIPLEX_ID
SERVER_COMPONENT = "0xff" "SMB"
SMB_COMMAND = TREE_CONNECT_ANDX
TREE_CONNECT_ANDX = "0x75"
NT_STATUS = STATUS_SUCCESS
STATUS_SUCCESS = BYTE{4}
FLAGS = "0x08"
FLAGS2 = "0x01c8"
PROCESS_ID_HIGH = BYTE{2}
SIGNATURE = BYTE{8}
RESERVED = BYTE{2}
TREE_ID = BYTE{2}
PROCESS_ID = BYTE{2}
USER_ID = BYTE "0x00"
MULTIPLEX_ID = BYTE "0x00"
TREE_CONNECT = WORD_COUNT
ANDX_COMMAND
RESERVED2
ANDX_OFFSET
FLAGS3
PASSWORD_LENGTH
BYTE_COUNT
PASSWORD
PATH
SERVICE
WORD_COUNT = BYTE
ANDX_COMMAND = NO_FURTHER_COMMANDS
NO_FURTHER_COMMANDS = "0xff"
RESERVED2 = BYTE
ANDX_OFFSET = BYTE{2}
FLAGS = "0x0000"
PASSWORD_LENGTH = BYTE{2}
BYTE_COUNT = BYTE "0x00"
PASSWORD = BYTE{N}
PATH = (UNICODE_CHAR)+ "0x0000"
SERVICE = ("IPC" | "?????") "0x00"
UNICODE_CHAR = BYTE{2}
Appendix B: Dynamic data tainting
The section discusses the used taint propagation ap-
proach in more detail. When monitoring an application,
we taint (i.e., tag) each input byte that is introduced into
the address space of the application process by being read
from the protocol message. Each byte receives a unique
label. This label establishes a relationship between a par-
ticular input byte and a location in memory and allows us
to determine the location in the message that certain in-
structions operate on. Then, we keep track of each labeled
value as the program execution progresses. To this end,
the output of every instruction that uses a labeled value as
input is tagged with the same label as well.
In addition to tracking direct dependencies, we also
consider address dependencies. Such dependencies occur
when a tainted operand is used to determine the location
from which a value is loaded. In this case, the outcome of
the load operation depends not only on the loaded value it-
self (a direct dependency) but also on the memory address
where this value is taken from. A typical example for an
address dependency is the use of tainted data as an index
into a table. In this case, the result of a table lookup does
not directly depend on the input value, but is indirectly in-
ﬂuenced by the selection of the respective table element.
Here, it is important that address dependencies are tracked
as well. Otherwise, the simple transformation of a string
contained in the message into its uppercase representation
(e.g., using the toupper() function) could break the de-
pendencies between the resulting string and the original in-
put. This is because toupper() relies on a table that
stores the mappings of all 255 possible input characters to
their corresponding uppercase representations.
Figure 4. Alignment of two complex messages.
and thus, are properly aligned. At the ﬁrst level, the sec-
ond nodes are both slash-delimited scope ﬁelds. However,
in one case, this ﬁeld holds a keyword and a token ﬁeld,
while in the other case, only a single token ﬁeld is present.
Because the alignment algorithm proceeds recursively, it
aligns the two token ﬁelds at the second level, and inserts a
gap for the keyword ﬁeld of the ﬁrst message. Finally, the
third ﬁelds hold two different keywords, and are aligned
with a penalty.
The regular expression generated for the generalized
tree is shown at the bottom of the ﬁgure. Note that the
token ﬁeld is replaced with a sequence of bytes (as we do
not know which and how many bytes will be present in the
actual messages). Also, appropriate optional and alterna-
tive keyword ﬁelds have been introduced. Similar to the
grammars shown in Appendix A, keyword and delimiter
values are enclosed by quotes.
As a result of the dynamic data tainting process, an exe-
cution trace is produced for each message. This trace con-
tains all operations that have one or more tainted operands.
In these execution traces, we are particularly interested in
control ﬂow decisions that depend on tainted input bytes.
That is, we check for conditional branch instructions (i.e.,
comparison operations) that operate on tainted bytes. The
reason is that in such cases, values taken from the mes-
sage drive the control ﬂow of the application, and thus, are
likely to hold information that is relevant and related to the
protocol speciﬁcation. Note that when looking for com-
parisons, we do not only take into account the standard op-
erations such as test and cmp, but also sub or bit-wise
and instructions that are often used by compilers as fast
alternatives. An interesting technical detail is related to
the fact that the Intel x86 instruction set does not contain
conditional branch instructions that use register or mem-
ory operands. Instead, these branch instructions evaluate
a number of ﬂag bits, which are usually set by preceding
compare or test instructions. As a consequence, our dy-
namic analysis has to retain the label sets of operands of
compare and test operations until a subsequent conditional
branch operation is encountered.
Appendix C: Message alignment example
An example of an alignment between two messages is
shown in Figure 4 below. In this ﬁgure, the algorithm has
determined that the ﬁrst ﬁelds contain the same keyword,
Msg #1Keyword: XKeyword: YDelimiter: "/"Keyword: KTokenMsg #2Keyword: XKeyword: ZDelimiter: "/"TokenMsg #1Keyword: XAlternative:Keyword: Y | ZDelimiter: "/"Optional:Keyword: KTokenAlignmentGeneralizeFinal regular expression:"X"["K""/"](byte)+("Y"|"Z")