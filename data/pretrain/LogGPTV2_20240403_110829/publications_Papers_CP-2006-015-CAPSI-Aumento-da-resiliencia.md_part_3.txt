interface WSDL. A implementação deste serviço é feita introduzindo código com a lógica do
serviço, usando por exemplo ferramentas como java2WSDL que permitem compor facilmente o
Web service.
Na tecnologia JXTA os serviços são definidos geralmente através de três tipos de anúncios na
rede: o module class advertisement, module specification advertisement e o module
implementation advertisement. Esta estrutura foi desenhada para a implementação de
funcionalidade de uma forma extensível na rede JXTA. O module class advertisement não
fornece informação sobre a implementação do serviço, a sua função é apenas anunciar a
existência de uma classe que é um módulo de funcionalidade. Entre a informação que contém
destaca-se o MCID (module class ID), um nome e uma descrição do modulo. O module
specification advertisement existe como camada intermédia para especificar compatibilidade
entre um conjunto de módulos. Entre os atributos do module specification advertisement
destacam-se o MSID, que contém o MCID já referido acima, informação sobre a versão da
especificação e parâmetros da especificação. Finalmente, o module implementation
advertisement contém informação sobre a implementação. Para isso este documento XML
contém como elementos o MSID da especificação implementada, contém também informação
necessária para correr o código, podendo até fornecer o próprio código, ou informação sobre um
local de onde código pode ser descarregado. O código pode ser um ficheiro JAR ou um ficheiro
class. A especificação JXTA para a descrição de serviços foi feita em três níveis para facilitar a
interoperabilidade entre plataformas distintas. Uma determinada funcionalidade anunciada em
abstracto pelo module class advertisement, poderá ter várias implementações anunciadas na
rede pelo module implementation advertisement. Num nível intermédio o module specification
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
advertisement contém informação que garante compatibilidade entre estas diferentes
implementações, que podem ser efectuadas em linguagens e plataformas diferentes e por vezes
incompatíveis.
Implementação do Algoritmo Bully
O algoritmo Bully tem por objectivo a eleição de um peer, de entre os peers de grupo, que
deverá responder ao pedido do serviço. Todos os peers que fornecem serviços implementam e
participam no algoritmo no âmbito de um grupo. O proxy quando invocado deve saber que peer
está a responder a pedidos. O proxy não participa no algoritmo e pode não ter informação
actualizada sobre alterações que tenham ocorrido nos períodos em que nenhum serviço é
invocado. Perante isto duas soluções surgiram. i) A implementação de um listener que
acompanhe o início do servidor do Web service e que receba mensagens de alterações do
coordenador, ou ii) o armazenamento de informações sobre o coordenador o pedido, por
exemplo num ficheiro. As informações são obtidas sempre que um serviço é invocado, e um
pedido de serviço ao coordenador corrente é feito. Se o coordenador não responde o proxy envia
a todos os peers na rede um pedido de informação até receber uma resposta. Se não recebe uma
resposta, entra em espera e volta a tentar após um período de tempo até que haja um
coordenador. A solução i) é melhor pois promove a performance do sistema uma vez que o
proxy não precisa de perguntar por uma eventual mudança de peer fornecedor do serviço. A
solução ii) é de mais fácil implementação.
As redes Peer-to-Peer caracterizam-se pelo seu dinamismo. Um nó de rede pode entrar e sair da
rede de uma forma imprevisível. Um peer pode sair da rede originando alterações em caminhos
de rede e alterando a conectividade da rede. Para abordar o problema da eleição de um
coordenador em redes Peer-to-Peer, foi proposta a plataforma ACE (Adaptative Cordinator
Election) [Yoshinaga et al 2004]. Esta plataforma usa um algoritmo de eleição que tem em
consideração métricas que para a escolha de um coordenador. Além de um Id, um nó de rede
pode ser avaliado por condições ambientais como largura de banda, características próprias
como capacidade de processamento, memória etc, ou histórico, como número de crashes num
determinado período.
Benchmarking
Nesta secção apresentamos conclusões das medições da escalabilidade do algoritmo e dos
tempos de latência de invocação do Web service
O Benchmarking para este tipo de sistemas estuda normalmente características como a
performance e escalabilidade. Para a tecnologia JXTA são apresentadas análises de performance
e escalabilidade em [JXTA bench]. A nossa infra-estrutura JXTA implementa um algoritmo
distribuído de troca de mensagens pelo que interessa saber a linearidade na variação do número
de mensagens com o número de peers no algoritmo. Para a medição do número de mensagens
introduzidas pelo algoritmo usámos uma rede Ethernet 100Mb/s com 15 computadores
1GHz/128Mb e o sistema operativo Windows XP. Foi usada a versão 2.3.2 da implementação
Java da tecnologia JXTA para desenvolver o sistema. Na figura 2 é apresentada uma
representação gráfica do número de mensagens com o número de peers de grupo. Foram
injectadas falhas para diminuir o número de peers sistema de uma forma controlada.
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
Figura 2 – Variação do número de mensagens com o número de peers de grupo.
Verificou-se que a taxa de crescimento de mensagens (mensagens de funcionamento da
tecnologia JXTA + mensagens do sistema) é linear com o aumento de peers fornecedores.
Para medir os tempos de latência de invocação do Web service usámos Round-Trip Time (RTT).
O RTT pode ser definido simplesmente como o tempo entre o envio de um pedido e recepção de
um resultado. Verificámos que o tempo de latência médio é da ordem dos 0,5 segundos.
Contudo na pior situação de alterações do algoritmo o RTT pode chegar às várias unidades de
segundo. Na pior situação há uma falha no fornecedor corrente do serviço que é detectada pelo
peer com menor Id, o qual envia mensagens de eleição para todos o peers com Id superior. A
fraca performance para este caso deve-se, por um lado ao tempo necessário para a eleição de um
novo peer fornecedor serviços, e por outro à operação de binding para criação de um novo pipe
entre o proxy e o novo fornecedor.
5 TRABALHO RELACIONADO
Esta secção apresenta referências a trabalhos de investigação sobre mecanismos de tolerância a
falhas em Web services.
[Dialani et al 2002] propõe uma arquitectura padrão para o desenvolvimento de Web services
tolerantes a falhas. O mecanismo de tolerância a falhas é apresentado como uma faixa vertical
na arquitectura dos Web services e criadores de um Web service devem implementar uma
interface de checkpoint e rollback. Checkpoint para armazenar um último estado correcto do
sistema, e rollback para, em caso de falha, repor o sistema nesse último estado correcto. O
mecanismo estende dinamicamente a interface de definição de serviço (WSDL) com métodos
para tolerância a falhas e os Web services devem declarar as suas interdependências para que o
mecanismo possa controlar a recuperação de falhas de composições de Web services.
Em [Looker e tal, 2005] é proposto o WS-FTM (Web Service-Fault Tolerance Mechanism) que
é uma implementação, para Web Services, do modelo N-version para tolerância a falhas em
sistemas distribuidos. O modelo N-version é um padrão de desenho que permite que as falhas
sejam tratadas por redundância. Como na maioria dos sistemas de tolerância a falhas, no modelo
N-version é usada replicação, mas, cada réplica é implementada numa versão diferente para
evitar erros comuns, resultantes de características comuns a uma dada implementação. Todas as
implementações correm em paralelo e existe um mecanismo de votação para garantir um nível
de integridade nos resultados obtidos de cada uma das N versões de implementação do serviço.
Outro artigo [Tartanoglu 2003] apresenta uma recolha sobre a forma como implementar
sistemas de tolerância a falhas em Web services. Este artigo aborda os mecanismos backward
error recovery e forward error recovery. Usando backward error recovery o sistema é reposto
num último estado correcto. Na forward error recovery o sistema é conduzido de um estado
erróneo para um estado válido. Neste artigo é concluído que os mecanismos de forward error
recovery são mais adequados para implementação de mecanismos de tolerância a falhas em Web
services num contexto de composição de Web services. A forward error recovery seria mais
adequada aos mecanismos de tolerância a falhas em sistemas distribuídos fechados.
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
Como método de resiliência a falhas este trabalho situa-se a montante da problemática da
tolerância a falhas de Web services. O contributo do nosso método é explorar as características
das redes Peer-to-Peer como base para o desenvolvimento um método transparente, simples e
escalável de resiliência a falhas para Web services no sistema sob o qual os Web services são
desenvolvidos.
6 CONCLUSÕES
Os Web services são hoje uma tecnologia reconhecida para o desenvolvimento de sistemas B2B
e integração de aplicações Web.
A computação Peer-to-Peer representa a próxima revolução na era da computação. Este novo
método de desenvolvimento de sistemas distribuídos vai alterar dramaticamente a forma como
as aplicações comunicam, colaboram e trocam dados pela Internet. Contudo a computação Peer-
to-Peer está ainda na sua infância e muito trabalho será necessário até à sua adopção por um
número significativo de organizações, assim como será necessária a consolidação de padrões e
especificações que sejam uniformemente seguidas.
As duas tecnologias exploradas, Web Services e Peer-to-Peer, podem efectivamente ser
integradas e usadas para aumentar a resiliência de sistemas distribuídos.
7 REFERÊNCIAS
W3c SOAP standards, 2001
W3C wsdl sepcification, http://www.w3c.org/TR/wsdl
UDDI standards, http://www.uddi.org
Projecto JXTA, http://www.jxta.org
Wilson, J., "Inside JXTA: Programming peer-to-peer Using the JXTA Platform", New Riders, 2002.
JXTA Programmers Guide, http://www.jxta.org/docs/JxtaProgGuide_v2.3.pdf
JXTA Bench, http://bench.jxta.org/
O'Hearne, B. S., artigo opinião: Web Services and JXTA: Companion Technologies, 2001
Mamun Q., Masun S., Mustafa M., Modified Bully Algorithm for Election Coordination in Distributed
Systems, 2004
Stoller S., Leader Election in Distributed Systems with Crash Failures, 1997
Garcia-Molina, H., "Elections in a Distributed Computing System, IEEE Trans. on Computers, Vol. C-
31, No. 1, Janeiro de 1982, páginas 48-59
H. Yoshinaga, T. Tsuchiya, K. Koyanagi, "A Coordinator Election Using the Object Model in Peer-to-
Peer Networks", Third International Workshop on Agents and Peer-to-Peer Computing, Nova
Iorque, Julho, 2004
V. Dialani, S. Miles, L. Moreau, D. D. Roure, M. Luck. Transparent fault tolerance for web services
based architectures. In Eighth International Europar Conference (EUROPAR '02), Padeborn,
Germany, Agosto de 2002. Springer-Verlag.
Looker N., Munro M.,WS-FTM: A Fault Tolerance Mechanism for Web Services.
http://www.dur.ac.uk/computer.science/research/technical-reports/2005/A Fault Tolerance
Mechanism.pdf.
F. Tartanoglu, V. Issarny, N. Levy, A. Romanovsky. Dependability in the Web Service Architecture. In
Architecting Dependable Systems, LNCS 2677, páginas 89-108. SpringerVerlag, 2003.
Dejan S. Milojicic, Vana Kalogeraki, Rajan Lukose, Kiran Nagaraja, Jim Pruyne, Bruno Richard, Sami
Rollins, and Zhichen Xu. Peer-to-Peer Computing. Relatório técnico HPL-2002-57, HP Labs,
Março de 2002. http://www.hpl.hp.com/techreports/2002/HPL-2002-57.pdf