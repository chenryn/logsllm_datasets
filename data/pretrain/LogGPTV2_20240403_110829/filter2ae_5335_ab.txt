### 优化后的文本

#### 调用堆栈分析
```
18: RMIConnectionImpl.unwrap(MarshalledObject, ClassLoader, Class) line: 1505
20: RMIConnectionImpl.access$500(MarshalledObject, ClassLoader, Class) line: 72
22: RMIConnectionImpl$7.run() line: 1548
23: AccessController.doPrivileged(PrivilegedExceptionAction) line: not available [native method]
25: RMIConnectionImpl.unwrap(MarshalledObject, ClassLoader, ClassLoader, Class) line: 1544
27: RMIConnectionImpl.createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject) line: 376
29: Exploit.exploit() line: 79
30: Exploit(BypassExploit).run_exploit() line: 24
31: ExploitBase.run(ExploitBase) line: 20
32: Exploit.main(String[]) line: 19
```

我们注意到，反序列化是在特权上下文中进行的（在第16行和第23行的`doPrivileged()`方法内）。请注意，调用的是`ClassLoader`类（可信代码）的构造函数，而不是`S`类（不可信代码）的构造函数。如果`S`已经位于堆栈中，`ClassLoader`构造函数中的权限检查会抛出安全异常，因为不受信任的代码没有相应的权限。

为什么`S`不在调用堆栈中呢？答案请参考序列化协议的相关文档：被调用的构造函数是没有实现`Serializable`接口的类层次结构的第一个构造函数。在我们的示例中，由于`S`已经实现了`Serializable`，因此不会调用其构造函数。然而，`S`扩展自`ClassLoader`，而`ClassLoader`并没有实现`Serializable`。因此，反序列化系统代码会回调`ClassLoader`的空构造函数。因此，堆栈跟踪仅在特权上下文中包含受信任的系统类（在`doPrivileged()`之后可能存在不受信任的代码，因为在检查调用堆栈时，权限检查将在`doPrivileged()`方法处停止）。所以，`ClassLoader`中的权限检查将会成功通过。

但是，后来在系统代码中，`S`的实例被强制转换为既非`S`也非`ClassLoader`类型的实例。那么，安全分析人员如何找到这个实例呢？

一种方法是向`S`添加静态字段，并在`S`类中添加方法以在静态字段中保存`S`实例的引用：
```java
public class S extends ClassLoader implements Serializable {
    public static S myCL = null;

    private void readObject(java.io.ObjectInputStream in) throws Throwable {
        S.myCL = this;
    }
}
```
`readObject()`方法是在反序列化期间（通过上面调用堆栈中第8行的`readOrdinaryObject()`）调用的一个特殊方法。调用它的时候，还没有进行权限检查，因此不受信任的代码（即`S.readObject()`方法）可以出现在调用堆栈中。这时，安全分析人员可以访问`S`的实例。由于`S`是`ClassLoader`的子类，分析人员可以定义一个带有全部权限的新类来禁用安全管理器（类似于3.1.1节中的方法）。这样的话，沙箱就会被禁用，安全分析人员就可以执行任意代码了。

该漏洞影响到14个Java 1.6版本（从版本1.6.0_01到1.6.0_18），直到版本1.6.0_24发布时才得到修复。

以下“功能”的组合使安全分析人员能够绕过沙箱：
1. 可信代码允许对不受信任的代码控制的数据进行反序列化。
2. 在特权上下文中进行反序列化。
3. 通过反序列化的方法创建对象，这与常规对象实例化过程不同。

漏洞CVE-2010-0094已在Java 1.6.0更新24中得到了修复。对`doPrivileged()`的两次调用已从代码中删除。在修复后的版本中，当初始化`ClassLoader`时，权限检查将会失败，因为现在将检查整个调用堆栈（请参阅下面的新的调用堆栈内容）。第21行及其后不受信任的代码不再具有`CREATE_CLASSLOADER`权限。

#### 新的调用堆栈
```
1: Thread [main] (Suspended (breakpoint at line 226 in ClassLoader))
2: MyClassLoader(ClassLoader).() line: 226 [local variables unavailable]
4: GeneratedSerializationConstructorAccessor1.newInstance(Object[]) line: not available
6: Constructor.newInstance(Object...) line: 513
7: ObjectStreamClass.newInstance() line: 924
8: MarshalledObject$MarshalledObjectInputStream (ObjectInputStream).readOrdinaryObject(boolean) line: 1736
10: MarshalledObject$MarshalledObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1328
12: MarshalledObject$MarshalledObjectInputStream(ObjectInputStream).readObject() line: 350
14: MarshalledObject.get() line: 142
15: RMIConnectionImpl.unwrap(MarshalledObject, ClassLoader, Class) line: 1523
17: RMIConnectionImpl.unwrap(MarshalledObject, ClassLoader, ClassLoader, Class) line: 1559
19: RMIConnectionImpl.createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject) line: 376
21: Exploit.exploit() line: 79
22: Exploit(BypassExploit).run_exploit() line: 24
23: ExploitBase.run(ExploitBase) line: 20
24: Exploit.main(String[]) line: 19
```

### 讨论
该漏洞表明，攻击者可以利用序列化协议的特性（仅调用特定构造函数）与易受攻击的系统代码，在特权上下文中对攻击者控制的数据进行反序列化，从而绕过沙箱并运行任意代码。此外，为了保持向后兼容，序列化协议修改起来非常困难。因此，安全人员已经对易受攻击的系统代码进行了相应的修改，从而修复了这里的漏洞。

### 结束语
本文着重介绍了Java平台的复杂安全模型，该模型已经饱受攻击20年。我们不仅展示了平台包含的本机组件（如Java虚拟机）以及各种Java系统类（JCL），还全面介绍了针对系统的两个组成部分的攻击，包括低级攻击（例如内存损坏漏洞）和针对安全策略执行的Java级攻击（例如受信任的方法链攻击）。希望这篇Java漏洞历史总结能够加深大家对系统安全的理解，有助于将来设计更加安全的系统。

### 参考资料
[1] Aleph One. "Smashing The Stack For Fun And Profit." Phrack 49 1996  
[2] Oracle. "The History of Java Technology."  
[3] Drew Dean, Edward W. Felten, Dan S. Wallach. "Java security: From HotJava to Netscape and beyond." In Security & Privacy, IEEE, 1996  
[4] Joshua J. Drake. "Exploiting memory corruption vulnerabilities in the java runtime." 2011  
[5] Esteban Guillardoy. "Java 0day analysis (CVE-2012-4681)." 2012  
[6] Jeong Wook Oh. "Recent Java exploitation trends and malware." Presentation at Black Hat Las Vegas, 2012  
[7] Security Explorations. "Oracle CVE ID Mapping SE - 2012 - 01, Security vulnerabilities in Java SE." 2012  
[8] Brian Gorenc, Jasiel Spelman. "Java every-days exploiting software running on 3 billion devices." In Proceedings of BlackHat security conference, 2013  
[9] Xiao Lee and Sen Nie. "Exploiting JRE - JRE Vulnerability: Analysis & Hunting." Hitcon, 2013  
[10] Matthias Kaiser. "Recent Java Exploitation Techniques." HackPra, 2013  
[11] Google. "The Final Countdown for NPAPI." 2014  
[12] Mozilla. "NPAPI Plugins in Firefox." 2015  
[13] Alexandre Bartel, Jacques Klein, Yves Le Traon. "Exploiting CVE-2017-3272." In Multi-System & Internet Security Cookbook (MISC), May 2018  
[14] Red Hat. "CVE-2017-3272 OpenJDK: insufficient protected field access checks in atomic field updaters (Libraries, 8165344)." Bugzilla - Bug 1413554 2017  
[15] Norman Maurer. "Lesser known concurrent classes - Atomic*FieldUpdater."  
[16] Jeroen Frijters. "Arraycopy HotSpot Vulnerability Fixed in 7u55 (CVE-2014-0456)." In IKVM.NET Weblog, 2014  
[17] NIST. "CVE-2016-3587."  
[18] Vincent Lee. "When Java throws you a Lemon, make Limenade: Sandbox escape by type confusion."  
[19] Red Hat. "CVE-2015-4843 OpenJDK: java.nio Buffers integer overflow issues (Libraries, 8130891)." Bugzilla - Bug 1273053, 2015  
[20] Alexandre Bartel. "Exploiting CVE-2015-4843." In Multi-System & Internet Security Cookbook (MISC), January 2018  
[21] Oracle. "The Java Virtual Machine Specification, Java SE 7 Edition: 4.10.2.4. Instance initialization methods and newly created objects."  
[22] National Vulnerability Database. "Vulnerability summary for cve-2017-3289."  
[23] Redhat. "Bug 1413562 - (cve-2017-3289) cve-2017-3289 openjdk: insecure class construction (hotspot, 8167104)."  
[24] OpenJDK. "Openjdk changeset 8202:02a3d0dcbedd jdk8u121-b08 8167104: Additional class construction refinements."  
[25] Oracle. "The java virtual machine specification, java se 7 edition: 4.7.4. the stackmaptable attribute."  
[26] "Request for review (s): 7020118."  
[27] Philipp Holzinger, Stephan Triller, Alexandre Bartel, and Eric Bodden. "An in-depth study of more than ten years of java exploitation." In Proceedings of the 23rd ACM Conference on Computer and Communications  
[28] Eric Bruneton. "ASM, a Java bytecode engineering library."  
[29] LSD Research Group et al.. "Java and java virtual machine security, vulnerabilities and their exploitation techniques." In Black Hat Briefings, 2002  
[30] Drew Dean, Edward W Felten, and Dan S Wallach. "Java security: From hotjava to netscape and beyond." In Proceedings, IEEE Symposium on Security and Privacy, 1996, pages 190-200  
[31] Cristina Cifuentes, Nathan Keynes, John Gough, Diane Corney, Lin Gao, Manuel Valdiviezo, and Andrew Gross. "Translating java into llvm ir to detect security vulnerabilities." In LLVM Developer Meeting, 2014  
[32] Sami Koivu. "Java Trusted Method Chaining (CVE-2010-0840/ZDI-10-056)."  
[33] Oracle. "JList."  
[34] Oracle. "Interface Serializable."  
[35] Sami Koivu, Matthias Kaiser. "CVE-2010-0094."