0.11
Punstrip
ùëÖ
ùëÉ
0.99
0.84
0.52
0.97
0.997
0.98
0.96
0.98
0.85
0.61
0.37
0.87
0.90
0.87
0.82
0.83
ùêπ1
0.91
0.70
0.44
0.92
0.94
0.92
0.82
0.84
We build pairwise relationships up to the third degree and store
factors involving up to three functions. To improve our our tool‚Äôs
accuracy, we could trivially increase the dimensions of relationships
stored between functions however we were limited in our compu-
tational and storage resources for our large scale experiments.
7 LIMITATIONS
Throughout our approach, we rely on previous work [2] on function
boundary detection to justify the conditions for function boundaries
to be known. In real world environments, further errors may be
introduced in the function boundary extraction stage which could
have undesired effects in probabilistic inference due to the incorrect-
ness of the recovered graphical structure. We believe that sufficient
randomization of belief updates during loopy belief propagation
would minimize the impact on inference as we aim to maximize
the joint likelihood across all unknown nodes simultaneously.
Our probabilistic fingerprint may succeed when faced with small
changes to machine code; however there are often large unknown
functions in previously unseen or obfuscated binaries. It is highly
likely that punstrip would perform poorly on executables that are
highly obfuscated or contain hand written assembly code. Punstrip
is limited by the correctness of binary analysis; we make use of pro-
gram analysis to recover features and relationships between data
and code. Techniques which aim to mislead or impede program anal-
ysis are out of scope, however trivial obfuscation techniques such
as junk code insertion should overcome by the VEX IR optimization
step. Punstrip may be combined with existing reverse engineering
software suites or debuggers to analyze regions of memory contain-
ing unlabeled code; the prime example being recognizing functions
during software unpacking at runtime.
8 RELATED WORK
We examine related work across probabilistic models for computer
programs (¬ß8.1) and function fingerprinting (¬ß8.2). Finally we look
at previous work using NLP (¬ß8.3) for matching function names.
8.1 Probabilistic Models
The seminal work of Bichsel et al. [6] in building probabilistic
models is closely related to this work. They describe the process
of building linear chain condition random fields for sections of
Java bytecode based on a program dependency graph and utilize
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder
high-level information such as types, method operations and class
inheritance to build relationships for inference. When applying a
similar technique to machine code, the problem is exacerbated by
the lack of access to concrete information on which to build features
or known relationships to describe the semantics of code. The work
was built on the Javascript deobfuscation framework, JSNice [42],
which infers local variable names for Javascript programs using
CRFs. Other works utilize probabilistic graphical models to infer
properties of programs, e.g. specification [5] [32], verification [22]
and bug finding [22]. The closest work to ours that labels functions
in stripped binaries is Debin [23] which infers names of DWARF
debugging information and function names simultaneously.
Recent advances in function boundary detection in stripped
binary executables form a foundation of this work. We utilize Nu-
cleus [2] when inferring function names without known function
boundaries; a tool which uses spectral clustering to group basic
blocks into function boundaries and results are an improvement
over work by Rosenblum et al. [43] and Shin et al. [45], the former
uses a CRF and the later use neural networks to detect function
boundaries in binaries; however neither performs the task of func-
tion naming.
8.2 Function Fingerprinting
Work in binary function identification predominantly focuses on
the problems of clone or exact function detection. Code clone detec-
tion focuses on the recognition of previously seen functions [27].
Punstrip infers semantically similar names for previously unseen
functions based on modified known examples.
Unstrip [25] aims to identify functions in stripped binaries and
focuses on labeling wrapper functions around dynamic imports.
BinSlayer [7], BinGold [1] and BinShape [46] identify and label func-
tions in stripped binaries. They collect large numbers of features
such as system calls, control flow graphs and statistical proper-
ties in order to fingerprint functions. Static approaches such as
Genius [19] and discovRE [16] extract features from a binary‚Äôs Con-
trol Flow Graph (CFG) and rank the similarity of functions based
on the graph isomorphism problem. In contrast, punstrip utilizes
a probabilistic graphical model that uses higher-level features to
infer structure in stripped binaries; combined with Symbol2Vec and
our NLP analysis we suggest semantically similar function names.
Structural Comparison of Executable Objects [20] finds vulnera-
bilities through analyzing security patches. Gemini [51] creates
a feature embedding based on Structure2vec [12] for code clone
detection.
Dynamic approaches such as BLEX [15] and Expos√© [38] use
symbolic execution and a theorem prover to rank the similarity
between pairs of individual functions. Egele et al. [15] employ
symbolic execution and compare dynamic traces from functions
to detect similar components. Others such as BinGo [9] and Multi-
MH [24, 41] try to describe a functions behavior by sampling each
function with random inputs to match known vulnerabilities across
architectures and operating systems. Gupta et al. [37] use a dynamic
matching algorithm for comparing control flow and callgraphs.
8.3 Symbol2Vec
Independently of us, Daniel De Freez et. al. [13] implemented path-
based function embeddings in a similar manner to Symbol2Vec.
Ding et. al. [14] built a vector embedding of features from a func-
tions assembly code in Asm2Vec and use it to perform code clone
detection.
9 CONCLUSION
We have presented punstrip, a novel approach for naming functions
in stripped executables that combines program analysis and ma-
chine learning to infer symbol information. We have demonstrated
that punstrip is a viable approach to learn a function fingerprint
that is capable of inferring symbols between multiple compilers
and optimization levels. Secondly we combine our fingerprint with
structure learning to predict symbol information in binaries using
all known relationships simultaneously rather than considering
each function in isolation. We carry out an extensive 10‚Äìfold cross
validated evaluation against C ELF binaries built from different
environments and compilers in the Debian Sid repositories and
make this dataset available.
We explore the subjective problem of evaluating the similarity
of previously unseen symbol names from different software reposi-
tories and develop both an NLP pipeline and Symbol2Vec model to
aid this comparison which we release to the community. We have
shown that it is possible to learn intrinsic relationships between
functions and transpose that information to other previously unseen
stripped binaries and suggest meaningful names for functions in
order to aid the reverse engineering process.
ACKNOWLEDGMENTS
James Patrick-Evans was supported by the EPSRC and the UK
government as part of the Centre for Doctoral Training in Cyber
Security at Royal Holloway, University of London (EP/K035584/1).
REFERENCES
[1] Saed Alrabaee, Lingyu Wang, and Mourad Debbabi. 2016. BinGold: Towards
robust binary analysis by extracting the semantics of binary code as semantic
flow graphs (SFGs). Digital Investigation 18 (2016), S11‚ÄìS22.
[2] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-Agnostic
Function Detection in Binaries.. In 2017 IEEE European Symposium on Security
and Privacy, EuroS&P 2017, Paris, France, April 26-28, 2017. 177‚Äì189.
[3] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David Brumley.
2014. Byteweight: Learning to Recognize Functions in Binary Code.. In Proceed-
ings of the 23rd USENIX Security Symposium, San Diego, CA, USA, August 20-22,
2014. 845‚Äì860.
[4] Eli Bendersky. 2018. PyELFTools - A Python Library for parsing ELF files. https:
//github.com/eliben/pyelftools.
[5] Brian N. Bershad and Jeffrey C. Mogul (Eds.). 2006. Operating Systems Design
and Implementation (OSDI). USENIX Association.
[6] Benjamin Bichsel, Veselin Raychev, Petar Tsankov, and Martin T. Vechev. 2016.
Statistical Deobfuscation of Android Applications.. In Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security, Vienna, Austria,
October 24-28, 2016. 343‚Äì355.
[7] Martial Bourquin, Andy King, and Edward Robbins. 2013. BinSlayer: accurate
comparison of binary executables.. In Program Protection and Reverse Engineering
Workshop. ACM, 4.
[8] Richard H. Byrd, Peihuang Lu, Jorge Nocedal, and Ciyou Zhu. 1995. A Limited
Memory Algorithm for Bound Constrained Optimization. SIAM J. Scientific
Computing 16, 5 (1995), 1190‚Äì1208.
[9] Mahinthan Chandramohan, Yinxing Xue, Zhengzi Xu, Yang Liu, Chia Yuan Cho,
and Hee Beng Kuan Tan. 2016. BinGo: cross-architecture cross-OS binary search.
In Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations
of Software Engineering, FSE 2016, Seattle, WA, USA, November 13-18, 2016. 678‚Äì
689.
12
Probabilistic Naming of Functions in Stripped Binaries
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
[10] UC Santa Barbra Computer Security Lab and Arizona State University SEFCOM.
2020. Claripy: An abstraction layer for constraint solvers. (2020). https://github.
com/angr/claripy
[11] Marco Cova, Viktoria Felmetsger, Greg Banks, and Giovanni Vigna. 2006. Static
Detection of Vulnerabilities in x86 Executables. In 22nd Annual Computer Security
Applications Conference (ACSAC 2006), 11-15 December 2006, Miami Beach, Florida,
USA. 269‚Äì278.
[12] Hanjun Dai, Bo Dai, and Le Song. 2016. Discriminative Embeddings of Latent
Variable Models for Structured Data.. In Proceedings of the 33nd International
Conference on Machine Learning, ICML 2016, New York City, NY, USA, June 19-24,
2016. 2702‚Äì2711.
[13] Daniel DeFreez, Aditya V Thakur, and Cindy Rubio-Gonz√°lez. 2018. Path-based
function embedding and its application to error-handling specification mining.
In Joint Meeting on European Software Engineering Conference and Symposium on
the Foundations of Software Engineering. 423‚Äì433.
[14] Steven H. H. Ding, Benjamin C. M. Fung, and Philippe Charland. 2019. Asm2Vec:
Boosting Static Representation Robustness for Binary Clone Search against Code
Obfuscation and Compiler Optimization. In 2019 IEEE Symposium on Security
and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019. IEEE, 472‚Äì489.
[15] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. 2014. Blanket
Execution: Dynamic Similarity Testing for Program Binaries and Components. In
Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, USA, August
20-22, 2014. 303‚Äì317.
[16] Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. 2016. dis-
covRE: Efficient Cross-Architecture Identification of Bugs in Binary Code. In
23rd Annual Network and Distributed System Security Symposium, NDSS 2016, San
Diego, California, USA, February 21-24, 2016.
[17] Mart√≠n Abadi et al. 2016. TensorFlow: A System for Large-Scale Machine Learn-
ing.. In 12th USENIX Symposium on Operating Systems Design and Implementation,
OSDI 2016, Savannah, GA, USA, November 2-4, 2016. 265‚Äì283.
[18] Mohammad Reza Farhadi, Benjamin C. M. Fung, Philippe Charland, and Mourad
Debbabi. 2014. BinClone: Detecting Code Clones in Malware. In Eighth Interna-
tional Conference on Software Security and Reliability, SERE 2014, San Francisco,
California, USA, June 30 - July 2, 2014. 78‚Äì87.
[19] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng
Yin. 2016. Scalable Graph-based Bug Search for Firmware Images. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security,
Vienna, Austria, October 24-28, 2016. 480‚Äì491.
[20] Halvar Flake. 2004. Structural Comparison of Executable Objects. In Detection
of Intrusions and Malware & Vulnerability Assessment, GI SIG SIDAR Workshop,
Ulrich Flegel and Michael Meier (Eds.), Vol. P-46. 161‚Äì173.
[21] Teresa Gon√ßalves and Paulo Quaresma. 2004. The impact of nlp techniques in
the multilabel text classification problem. In Intelligent Information Processing
and Web Mining. Springer, 424‚Äì428.
[22] Sumit Gulwani and Nebojsa Jojic. 2007. Program verification as probabilistic
inference.. In Proceedings of the 34th ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, POPL 2007, Nice, France, January 17-19,
2007. 277‚Äì289.
[23] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin T. Vechev.
2018. Debin: Predicting Debug Information in Stripped Binaries. In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and Communications Security,
CCS 2018, Toronto, ON, Canada, October 15-19, 2018.
[24] Yikun Hu, Yuanyuan Zhang, Juanru Li, Hui Wang, Bodong Li, and Dawu Gu.
2018. BinMatch: A Semantics-Based Hybrid Approach on Binary Code Clone
Analysis. In 2018 IEEE International Conference on Software Maintenance and
Evolution, ICSME 2018, Madrid, Spain, September 23-29, 2018. 104‚Äì114.
[25] Emily R. Jacobson, Nathan E. Rosenblum, and Barton P. Miller. 2011. Labeling
library functions in stripped binaries.. In Proceedings of the 10th ACM SIGPLAN-
SIGSOFT workshop on Program analysis for software tools, PASTE‚Äô11. 1‚Äì8.
[26] James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder. 2020. Feature
Embeddings for Binary Symbols with Symbol2Vec. https://www.github.com/
punstrip/symbol2vec.
[27] Toshihiro Kamiya, Shinji Kusumoto, and Katsuro Inoue. 2002. CCFinder: A
Multilinguistic Token-Based Code Clone Detection System for Large Scale Source
Code. IEEE Trans. Software Eng. 28, 7 (2002), 654‚Äì670.
[28] Soomin Kim, Markus Faerevaag, Minkyu Jung, SeungIl Jung, DongYeop Oh,
JongHyup Lee, and Sang Kil Cha. 2017. Testing intermediate representations for
binary analysis. In Proceedings of the 32nd IEEE/ACM International Conference on
Automated Software Engineering, ASE 2017, Urbana, IL, USA, October 30 - November
03, 2017. 353‚Äì364.
[29] Daphne Koller and Nir Friedman. 2010. Probabilistic Graphical Models: Principles
and Techniques. MIT Press.
[30] Yujian Li and Bi Liu. 2007. A Normalized Levenshtein Distance Metric. IEEE
Trans. Pattern Anal. Mach. Intell. 29, 6 (2007), 1091‚Äì1095.
[31] Chao Liu, Chen Chen, Jiawei Han, and Philip S. Yu. 2006. GPLAG: detection of
software plagiarism by program dependence graph analysis. In Proceedings of
the Twelfth ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining, Philadelphia, PA, USA, August 20-23, 2006. 872‚Äì881.
[32] V. Benjamin Livshits, Aditya V. Nori, Sriram K. Rajamani, and Anindya Banerjee.
2009. Merlin: specification inference for explicit information flow problems..
In Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI 2009, Dublin, Ireland, June 15-21, 2009. 75‚Äì86.
[33] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient
Estimation of Word Representations in Vector Space. CoRR abs/1301.3781 (2013).
[34] Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jeffrey Dean.
2013. Distributed Representations of Words and Phrases and their Composition-
ality.. In Advances in Neural Information Processing Systems. 3111‚Äì3119.
[35] George A. Miller. 1995. WordNet: A Lexical Database for English.. In Communi-
cations of the ACM, Vol. Vol. 38, No. 11:. 39‚Äì41.
[36] Kevin P. Murphy, Yair Weiss, and Michael I. Jordan. 2013. Loopy Belief Prop-
agation for Approximate Inference: An Empirical Study. CoRR abs/1301.6725
(2013).
[37] Vijayanand Nagarajan, Rajiv Gupta, Matias Madou, Xiangyu Zhang, and Bjorn De
Sutter. 2007. Matching Control Flow of Program Versions.. In 23rd IEEE Interna-
tional Conference on Software Maintenance (ICSM 2007), October 2-5, 2007, Paris,
France. 84‚Äì93.
[38] Beng Heng Ng and Atul Prakash. 2013. Expose: Discovering Potential Binary
Code Re-use. In 37th Annual IEEE Computer Software and Applications Conference,
COMPSAC 2013, Kyoto, Japan, July 22-26, 2013. 492‚Äì501.
[39] Coseinc Nguyen Anh Quynh. 2014. Capstone: Next-Gen Disassembly Framework..
In BlackHat USA.
[40] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M.
Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cour-
napeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine
Learning in Python. Journal of Machine Learning Research 12 (2011), 2825‚Äì2830.
[41] Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and Thorsten
Holz. 2015. Cross-Architecture Bug Search in Binary Executables. In 2015 IEEE
Symposium on Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015.
709‚Äì724.
[42] Veselin Raychev, Martin Vechev, and Andreas Krause. 2015. Predicting Program
Properties from ‚ÄúBig Codea.". In Proceedings of the 42Nd Annual ACM SIGPLAN-
SIGACT Symposium on Principles of Programming Languages (Mumbai, India)
(POPL ‚Äô15). ACM, New York, NY, USA, 111‚Äì124. https://doi.org/10.1145/2676726.
2677009
[43] Nathan E. Rosenblum, Xiaojin Zhu, Barton P. Miller, and Karen Hunt. 2008.
Learning to Analyze Binary Computer Code.. In Proceedings of the Twenty-Third
AAAI Conference on Artificial Intelligence, AAAI 2008, Chicago, Illinois, USA, July
13-17, 2008. 798‚Äì804.
[44] Nino Shervashidze, Pascal Schweitzer, Erik Jan van Leeuwen, Kurt Mehlhorn,
and Karsten M. Borgwardt. 2011. Weisfeiler-Lehman Graph Kernels. Journal of
Machine Learning Research 12 (2011), 2539‚Äì2561.
[45] Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing
Functions in Binaries with Neural Networks.. In 24th USENIX Security Symposium
(USENIX Security 15). USENIX Association, Washington, D.C., 611‚Äì626.
[46] Paria Shirani, Lingyu Wang, and Mourad Debbabi. 2017. BinShape: Scalable
and Robust Binary Library Function Identification Using Function Shape.. In
International Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment. Springer, 301‚Äì324.
[47] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and Giovanni Vigna. 2015. SoK: (State of) The Art of War: Offensive Techniques
in Binary Analysis. (2015).
[48] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques
in Binary Analysis. In IEEE Symposium on Security and Privacy.
[49] Charles A. Sutton and Andrew McCallum. 2012. An Introduction to Conditional
Random Fields. Foundations and Trends in Machine Learning 4, 4 (2012), 267‚Äì373.
[50] Andre Nikolaevich Tikhonov, A Goncharsky, VV Stepanov, and Anatoly G Yagola.
2013. Numerical methods for the solution of ill-posed problems. Vol. 328. Springer
Science & Business Media.
[51] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017.
Neural Network-based Graph Embedding for Cross-Platform Binary Code Simi-
larity Detection.. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November
03, 2017. 363‚Äì376.
[52] Zynamics. 2019. Using BinDiff v1.6 for Malware analysis. (2019). https://www.
zynamics.com/downloads/bindiff_malware-1.pdf
13