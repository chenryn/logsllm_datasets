# Probabilistic Naming of Functions in Stripped Binaries

## Abstract
We present **Punstrip**, a novel approach for naming functions in stripped executables. Punstrip combines program analysis and machine learning to infer symbol information. We demonstrate that Punstrip is capable of inferring symbols across multiple compilers and optimization levels. By integrating our fingerprint with structure learning, we predict symbol information in binaries using all known relationships simultaneously. We evaluate Punstrip on C ELF binaries from the Debian Sid repositories and release the dataset.

## 1. Introduction
Punstrip leverages pairwise relationships up to the third degree and stores factors involving up to three functions. To enhance accuracy, we could increase the dimensions of relationships stored between functions, but this is limited by computational and storage resources in large-scale experiments.

## 2. Methodology
### 2.1 Relationship Storage
We build pairwise relationships up to the third degree and store factors involving up to three functions. Increasing the dimensions of relationships stored between functions could improve accuracy, but we are constrained by computational and storage resources for large-scale experiments.

### 2.2 Limitations
Our approach relies on previous work [2] for function boundary detection. In real-world environments, errors in function boundary extraction can introduce inaccuracies in probabilistic inference due to the incorrectness of the recovered graphical structure. We believe that sufficient randomization of belief updates during loopy belief propagation would minimize these impacts, as we aim to maximize the joint likelihood across all unknown nodes simultaneously.

Punstrip may succeed with small changes to machine code but performs poorly on highly obfuscated or hand-written assembly code. It is limited by the correctness of binary analysis, which recovers features and relationships between data and code. Trivial obfuscation techniques such as junk code insertion can be mitigated by the VEX IR optimization step. Punstrip can be combined with existing reverse engineering software suites or debuggers to analyze regions of memory containing unlabeled code, particularly during software unpacking at runtime.

## 3. Related Work
### 3.1 Probabilistic Models
The seminal work of Bichsel et al. [6] on building probabilistic models for Java bytecode is closely related to ours. They use linear chain conditional random fields (CRFs) based on a program dependency graph and high-level information like types, method operations, and class inheritance. Applying similar techniques to machine code is more challenging due to the lack of concrete information. The JSNice [42] framework uses CRFs to infer local variable names for JavaScript programs. Other works use probabilistic graphical models for specification [5, 32], verification [22], and bug finding [22]. Debin [23] is the closest work to ours, inferring DWARF debugging information and function names simultaneously.

### 3.2 Function Fingerprinting
Most work in binary function identification focuses on clone or exact function detection. Code clone detection aims to recognize previously seen functions [27]. Punstrip infers semantically similar names for previously unseen functions based on modified known examples.

Unstrip [25] identifies functions in stripped binaries, focusing on labeling wrapper functions around dynamic imports. BinSlayer [7], BinGold [1], and BinShape [46] identify and label functions in stripped binaries by collecting features such as system calls, control flow graphs, and statistical properties. Static approaches like Genius [19] and discovRE [16] extract features from a binary’s Control Flow Graph (CFG) and rank function similarity based on the graph isomorphism problem. Punstrip uses a probabilistic graphical model with higher-level features to infer structure in stripped binaries, combined with Symbol2Vec and NLP analysis to suggest semantically similar function names.

### 3.3 Symbol2Vec
Independently, Daniel De Freez et al. [13] implemented path-based function embeddings similar to Symbol2Vec. Ding et al. [14] built a vector embedding of features from a function's assembly code in Asm2Vec for code clone detection.

## 4. Conclusion
We have presented Punstrip, a novel approach for naming functions in stripped executables. Punstrip combines program analysis and machine learning to infer symbol information. We demonstrated that Punstrip can infer symbols across multiple compilers and optimization levels. By integrating our fingerprint with structure learning, we predict symbol information in binaries using all known relationships simultaneously. We conducted an extensive 10-fold cross-validated evaluation on C ELF binaries from the Debian Sid repositories and released the dataset.

We explored the subjective problem of evaluating the similarity of previously unseen symbol names from different software repositories and developed an NLP pipeline and Symbol2Vec model to aid this comparison, which we release to the community. Our results show that it is possible to learn intrinsic relationships between functions and transpose that information to other previously unseen stripped binaries, suggesting meaningful names for functions to aid the reverse engineering process.

## 5. Acknowledgments
James Patrick-Evans was supported by the EPSRC and the UK government as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London (EP/K035584/1).

## 6. References
[1] Saed Alrabaee, Lingyu Wang, and Mourad Debbabi. 2016. BinGold: Towards robust binary analysis by extracting the semantics of binary code as semantic flow graphs (SFGs). Digital Investigation 18 (2016), S11–S22.
[2] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-Agnostic Function Detection in Binaries. In 2017 IEEE European Symposium on Security and Privacy, EuroS&P 2017, Paris, France, April 26-28, 2017. 177–189.
...
[52] Zynamics. 2019. Using BinDiff v1.6 for Malware analysis. (2019). https://www.zynamics.com/downloads/bindiff_malware-1.pdf

---

This version of the text is more structured, coherent, and professional, making it easier to understand and follow.