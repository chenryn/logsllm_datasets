00 00001100 11010000
Float1
Tine:
1ou 4.59626e-042 high 0
Thu 3an1 08:54:40 1970
Double:
1.62054e-320
Fig, 6.39 Get the PTE
---
## Page 527
514
6PWN
e:kd>1dq ex323deee+excde
323dcde ccccccccccccc3cc000e00eeo841fof
#323dce0 8b66c28b 44c88b45 0001b808498b4811
#323dcfe ccccc3cc2dcd0o0e 00401fofcccccccc
# 323ddee 428b4ce2^ 4a8b4466 08498b48° 118b6608
# 323dd1e cc2dcdeeeeeee2b8 90ccccccccccccc3
323dd20 ccc3cc2dcdce8b41cccccccccccccccc
323dd30 6666cccccccccccc0000000000841fof
#323dd4e ccc3fe24e8418b48 001fefcccccccccc
fffff8e149247cde
0:kd> dq 0xFFFFF80149247CD0
ccccccccccccc3cc e000000o00841fef
fffff8e149247cfo
fffff8e149247cee
8b66c28b44c88b45 0001b808498b4811
fffff8e1²49247dee
ccccc3cc2dcde0ee 00401fofcccccccc
fffff8e1°49247d10
cc2dcdee000ee2b8 90ccccccccccccc3
fffff8e1²49247d2e
ccc3cc2dcdce8b41 cccccccccccccccc
fffff8e1°49247d30
6666cccccccccccc00000000e0841fof
fffff80149247d4eccc3fe24@8418b48 001fefcccccccccc
Fig, 6.40 Use “dq and “!dq° get PTE value
data results, see Fig. 6.40. We can find that the data is completely the same, which
indicates that the virtual axddress 0xFFFFF80149247CD0 points to the physical
address 0x323dcd0. After understanding the memory paging process, let's see
how the permission ring idea is reflected in memory paging. The U/S bit is used to
describe the access rights to the memory space represented by the table entry, if U/S
is 0, the code with permission ring 3 cannot access this memory space. Therefore,
Windows divides memory into two parts, user space, and kermel space, through this
mechanism.
6.9.1.3 Windows OS Architecture
Through the memory segmentation and paging mechanism, the Windows system
divides memory into user space and system space. Each process has its own
independent virtual memory space, and the virtual memory space of each process
is independent and equal, and the sum of the virtual memory space of the process can
be much larger than the physical memory space. The corresponding virtual address
space is mapped to the actual physical memory only when the process’s virtual
 dnuau aed ussu e qno pusdooe st yom passaoe st ro
virtual memory space within a process is also divided into two parts: user space and
kermel space. The user space of each process is mapped to a separate area of physical
memory, but the kemel space is shared by all processes; in other words, the kermel
space of each process is mapped to the same area of physical memory.
o q se sssd s se qns soax aos ae a sso o
kermel space and are containers for all kernel threads. Figure 6.41 shows the overall
---
## Page 528
6.9 Windows Kemel PWN
515
System Processes
Applications
Erwiro
Subsyster
control mgr
Service
Wi
LSASS
O5/2
Winlegon
Spoc
Session
ervices
User
applicatior
POSIX
manager
sub
DLLs
Windows DLLs
NTDLLDLL
System Service Dispatcher
(Kernel mode callable interfaces)
6WO/
USER
GD
File Sys
Kernel
Hardware Abstraction Layer (HAL)
Hardware interlaces (buses, VO devices interrupt)
nterval timers, DMA, memory cache control, etc]
architecture of a Windows operating system, parts running in user space contain user
processes, subsystems, system services, and system processes. Of course, the divi-
sions overlap, but the end-user state code depends on ntdl1.dlI for access to the kermel
state. ntdll.dll provides a set of system calls for user-state programs to use the system
kemel’s functions. These calls are called Native APIs, which are implemented in a
similar way to UNIX-like operating systems, with switching to the kermel state via
interrupts or quick system calls (sysenter) and subsequent calls distributed via the
System Service Dispatcher Table (SSDT).
The Windows kernel is composed of two parts: the kermel executor and the kermel
core, as defined by Microsoft. The kermel executor refers to the upper level of the
---
## Page 529
516
6PWN
Windows kernel, including the I/O manager, process manager, memory manager,
etc., but in reality, these “*managers" are just a series of functions in the NT module.
The core of the kemel is composed of some lower-level support functions of the NT
module. Unlike the UNIX-like kernel, the graphic part of the Windows operating
system is also implemented in the kernel space, and Windows provides Shadow
SSDT for distributing graphic calls, which are independent of the NT module and
stored in modules such as win32k.sys and dxgkml.sys.
Another important component of the kermel space is the driver. For Windows
ampq ue Xq uapun Xpdo oq uo aup pax e sss Suado
which just means that the code runs in the kermel state. The kemel driver includes
third-party drivers and system-owned drivers, and the I/O manager in the Windows
kermel executable is responsible for interacting with the kermel driver. The kermel
driver interaction design is similar to the messaging mechanism of the Windows
user-state GUI, which provides a message packet called IRP. The kemel driver
sequentially processes the IRP message packet through a stack of device objects and
interacts with the kernel executable’s I/O manager for feedback. When a user-state
application wants to accessthe kemel driver and pass data it needs to invoke ause
state-related Native API, which will call the corresponding function in the kermel
executable I/O manager. These functions are responsible for processing the user-
state request and generating IRP packets to be passed to the kemel driver.
The botom layer of the Windows kernel is the HAL hardware abstraction layer,
d mpq   o  s  r sis po 
to isolate hardware differences from the top layer and allow the top layer to use a
unified interface.
6.9.1.4 Windows Kernel Debugging Environment
The following is a description of how to build a kernel debugging environment.
represented by Softice, and the other is the dual kemel debugging represented by
Windbg. The local kernel debugging represented by softice has been around for a
long time, and it used to be done by icesoft. As softice is no longer updated, Windbg
dual kermel debugging has become the official debugging tool of WDK (Windows
Driver Kit). More importantly, native kemel debugging has many limitations, so
now Windows kernel debugging is usually done by Windbg dual debugging.
To configure Windbg for dual debugging, you need to configure the host and the
client separately. Windbg supports serial port, firewire, and USB connections, and
the client can also use either a virtual machine or a real physical machine.
Here is a demonstration of the VMware virtual machine serial port. First, set the
boot configuration of the virtual machine. Before Windows 7, the boot configuration
was set via boot.ini. Since Windows 7, the startup configuration is managed by the
bcdedit command. The client virtual machine version here is Windows 10, although
you can also set the debug boot via bcdedit, the easier way is to use msconfig.
---
## Page 530
6.9 Windows Kemel PWN
517
BootServices Startup Tools
ooppeps dnress
O Normal startup
sostkstartup
 Seletve startup
toed startup itens
use onginal beet configuratt
Hep
Fig, 6.42 msconfig window
BOOT Advanced Optior
ofpro
dows 10 (C
rcttedk
Global debug setings
Adyonced op
Debug port:
Boot options
USI
sae boo
Minin
Actv
Ater
USB terget name
Metr
AM
OK
Cancel
Fig, 6.43 Boot advanced options
---
## Page 531
518
6PWN
Device
Sum
30yeyhis
ed Dok (SCSr
40.G8.
ct/DV (SATA)
Mdaptt
re Type
p punes rp
Dqlretos
Asdd + sel pot
VDDN
k.Adagte
d fer gaphic
Fig, 6.44 Add hardware wizard
Open the “Run" dialog box with the Win+R key combination, type “msconfig,
the dialog box shown in Fig. 6.42 will appear, select “Boot". tab, select the startup
suondo paoueapv xp pue dneis 3nqap se 1as o1 tuem no le 1ofosd
In the dialog box that appears (see Fig. 6.43), check the “Debug” checkbox, and
in the “Global debug settings" section, select select “COM1° (serial port 1) in the
“"Debug port" drop-down list. In the “Baud rate” drop-down list, select the baud rate
of “115200°". At this point, the client is set up, and the next step is to set up the
VMware virtual machine to add a serial port.
Serial Port in the dialog box that appears (see Fig. 6.44), and then click the “Finish
Open Virtual Machine Settings, click the Add button to add new hardware, select
button.
Our operation creates a new serial port named Serial Port 2 (see Fig. 6.45)
because the virtual printer that comes with VMware occupies Serial Port 1. Select
“Printer” and click the “Remove” button to remove the virtual printer. Repeat the
above operation to successfully create serial port 1.
Select *Use named pipe” on the right side of the Serial Port (see Fig. 6.46) to use
the named pipe. Named pipes are a means of process communication in Windows,
and can be thought of simply as two processes mapping a shared piece of memory
---
## Page 532
6.9  Windows Kemel PWN
519
Device
Delce statos
2GI
Catnecle
erdoiRt (scs)
40 G9
Uey fle E/vsel
MAT
hy
se Co
Ads detad
Ths 4nd isith4 sene
The cther and isa wtua madue
/0-mofe
reld OR e μ4
sesedtn
Fig, 6.45 New a Serial Port 2
together. In short, VMware provides a means to emulate a serial port using a named
pipe. Selec *This end is the server"” and *The other end is an application
We need to set up Windbg on the host side. Select “Attach to kernel" and choose 
“COM" on the right side (see Fig. 6.47); select Pipe and fill in the baud rate and port, 
which should be the same as the one in the VMware virtual machine.
After starting debugging, Windbg waits for the client to connect. After a success-
ful connection, Windbg gives the breakpoints shown in Figs. 6.48 and 6.49, which
are breakpoints thrown by the debugger on its initiative. You can then use Windbg to
debug the kemel.
---
## Page 533
520
6PWN
Deice statos
4 GI
Camed
ad Dek (SCS)
60 G8
C(SATA)
Ou+sye
Tesen
Auts deted
Ou tptfle
Wupeem_1
Ths end is the sener.
The ether end s an apicaon
1/0mode
reld ORen pel
oedteinter
Fig, 6.46 Set *"Use named pipe”
6.9.2WindowsKernelVulnerabilities
Kermel vulnerabilities are often more valuable than user-level vulnerabilities due to
the specificity of kermel code privileges. Depending on the attack path, kemel
vulnerabilities can be classified as either local access or remote access. For local
access, the attacker needs to log in to the target computer, which is always done with
a low-privilege account. Therefore, locally accessible kernel vulnerabilities are
generally used for privilege escalation, which is common in post-penetration testing
for privilege maintenance. The kernel vulnerabilities that can be accessed remotely
are more dangerous, such as the famous CVE-2017-0144 (MS-07-010), CVE-2019.
0708, etc. These are powerful vulnerabilities that can be used to remotely obtain the
highest system privileges.
---
## Page 534
6.9 Windows Kemel PWN
521
Start debugging
?
Fig, 6.47 Choose "Attach to kernel"
Flow Control
End
Microsoft (R) Windows Debugger Version 10.0.18869.1002 AMD64
Copyright (c) Microsoft corporation. All rights reserved.
Opened \\.\pipe\com_1
Waiting to reconnect..
Fig, 6.48 Windbg wait to reconnect
You are seeing this message because you pressed either
CTRL+C（if you run console kernel debugger)or,
on your debugger machine*s keyboard.
THIS IS NOT A BUG OR A SYSTEM CRASH
If you did not intend to break into the debugger, press the “g” key, then
* press the "Enter* key now.
does, press “g” and *Enter” again.
This message might imediately reappear.
If it *
nt lobgBreakPointwithstatus+0x1:
....................................
fffff801 49247cd1 c3
ret
Fig, 6.49 Windbg gives the breakpoints
---
## Page 535
522
6PWN
However, not all kernel vulnerabilities can be effectively exploited. Generally
speaking, there is a term °character” for vulnerabilities, and some vulnerabilities that
are not of good character can be triggered but are difficult or even theoretically
possible to exploit. These vulnerabilities are often only able to achieve a denial of
service. By MSRC standards, local denial of service is no longer accepted as a
vulnerability.
Generally remotely triggered kermel vulnerabilities are located in kemel drivers
for various network protocol stacks, such as the CVE-2017-0144 vulnerability in
srv.sys, a kernel driver for the SMB protocol, and the CVE-2019-0708 vulnerability
in termdd.sys, a kermel driver for the RDP protocol. Kernel vulnerabilities for
escalation of privilege are often found in kernel modules such as the Windows
GDI/GUI kemel module win32k.sys, the Windows kernel core module ntoskrnl.exe,
and so on. Vulnerabilities in these modules need to be triggered locally in the form of
a Native APL. In addition, vulnerabilities in the system’s own or third-party drivers
need to be triggered by calling the DeviceloControl function, in the form of IRP.
This book is not a book specifically about Windows kemel vulnerabilities, so the
content is arranged as an introductory text without going into too much technical
detail. At the same time, vulnerability exploitation techniques change rapidly in the
real world, and what may be new and unknown at the time of writing may be old
news by the time it is printed and put into the reader's hands. Briefly, Microsoft adds
Windows. For example, to address the high incidence of the Win32k.sys vulnera-
bility, a Win32k Filter is added to the sandbox process to prevent common GDI/GUI
calls from being executed; an Object Header Cookie is added to the hijacked kermel
object TypeIndex technology; SMEP is enabled for kemel-state execution of user-
state shellcode; The pool feng shui layout introduces LFH, a new allocation algo-
rithm; memory isolation is introduced for GDI object abuse, and so on. Thus, attack
and defense is a dynamic process.
6.9.2.1 A Simple Introduction to Windows Driver Development
According to the timeline, Microsoft provides three models for driver development:
driver development environment
NT-style, WDM, and WDF. The following describes how to configure an NT-style
First of all, you need to install Visual Studio, which is the officially recommended
IDE for Windows driver development by Microsoft, and since the driver debugging
environment involves Windows 10, it is recommended to use Visual Studio 2015
and above for development, and Windows 10 and above should be installed as well.
The Windows Driver Kit (WDK) provides the header files, library files, and
toolchains needed by the development of drivers. The WDK is available in
Microsoft's Hardware Dev Center and provides information on how to install and
configure it, so I won’t go into detail on how to install the WDK.
After a successful installation of WDK, open Visual Studio and select Create
New Project. Because WDK 10 uses the WDF driver model by default, the WDF
---
## Page 536
6.9 Windows Kemel PWN
523
Fig, 6.50 The format of
driver entry point
NTSTATUS
DriverEntry(
In_
PDRIVER_OBJECT
DriverObject,
_In_PUNICODE_STRING RegistryPath
）
Device 1
Driver A
g 
Device 2
Device 1
Driver C
Fig, 6.51 The structure of a stack of device objects
driver model divides the driver into a kemel-mode driver and a user-mode driver and
introduces the concepts of KMD and UMD. Microsoft intends to extract the old
kemel driver code, which has little to do with the kemel and hardware, into user
mode to increase efficiency and reduce the attack surface. If you just want to write a
simple NT-style driver, selet “Kemel Mode Driver, Empty (UMDF V2)".
Once the project is created, you can start writing the vulnerability program. The
first step is to write an entry function for the driver. Because a program, whether it is
a regular Win32 program or a DLL, needs a function as an entry point, this entry