in the tree, ε is a set of tuples of the form (ai,gate) where
gate ∈ [AND− gate,OR− gate], a0 ∈ A is the root node and
ni ∈ N is a node in all upper layer HARM nodes N.
Based on the virtualized system (as shown in Figure 1),
we generate a two-layer HARM, where the upper layer
captures the reachability of VMs using an AG, and the lower
layer captures the vulnerability of each VM information
using ATs. The generation of AG and AT can be done
by using tools, such as MulVAL [44] for AGs, and logic
reduction techniques [45] for ATs respectively. We assume
the attacker is located outside the virtualized system (i.e.,
the attacker is located on the Internet). An attacker inside
the virtualized system can be modelled as well, as in [38].
The HARM of the virtualized system is shown in Figure 2.
the virtualized system (VS)
Example 1. Upper and Lower Layers Mapping:
The
is HV S =
HARM of
(GV S,T NV S
,CV S), where GV S is an AG in the upper layer
V S
HARM, T NV S
is a set of ATs in the lower layer of the HARM
for each upper layer node NV S, and CV S = NV S → T NV S
V S
V S
is a one-to-one mapping of upper layer nodes NV S to
corresponding lower layer ATs T NV S
V S .
Example 2. Upper Layer: The AG shown in Figure 2 of
the virtualized system (VS), is a directed graph GV S =
(NV S,EV S), where NV S ={attacker,V M1,V M2,V M3,V M4,
V M5}, and EV S ={(attacker,V M1),(attacker,V M2),(V M1,
V M3),(V M1, V M4),(V M2,V M3),(V M3,V M4),(V M3,V M5),
(V M4,V M5)}.
Example 3. Lower Layer: The AT shown in Figure 2 for
V M1 (as shown in Table I) is an AT TW 7 = (AW 7,BW 7,εW 7,
), where AW 7 = {W 71,W 72,W 73,W 74,W 75} is
W 70,nV M1
a set of attacks, BW 7 ={(W 71,ORW 7
),(W 73,
,W 70)} is a set
ORW 7
of edges in the tree, and a set of tuples εW 7 ={(W 71,ORW 7
)}.
),(W 75,ORW 7
(W 72,ORW 7
1
1
),(W 73,ORW 7
1
),(W 74,ORW 7
1
),(W 75,ORW 7
1
),(W 74,ORW 7
1
),
1
),(W 72,ORW 7
1
1
),(ORW 7
1
1
C. Categorizing the MTD techniques
In this subsection, we categorize the available MTD tech-
niques implemented in various layers. The MTD techniques
are mainly categorized as Shufﬂe, Diversity and Redundancy,
which are summarized in Table IV. Shufﬂe has been studied
in various domains at different system layers (e.g., IP shuf-
ﬂing, VM live migrations, application migrations, random-
ized HTML elements, instruction set randomizations, data
randomizations, and proxy relocations). Many studies have
focused in the application layer for Diversity (e.g., software
implementations, compiler based diversity, software mix,
data diversity, address space partitioning and instruction
set tagging), as well as in the topology layer (e.g., path
diversity). There are many Redundancy techniques, but we
do not cover them in this paper.
517
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:31 UTC from IEEE Xplore.  Restrictions apply. 
Upper Layer
Internet
Attacker
VM1
VM2
VM3
VM4
VM5
W7 
Compromised
O
R
1
W71
W72
W73
W74
W75
W7 
Compromised
REL 
Compromised
O
R
1
REL1
REL2
REL3
REL4
REL5
REL6
REL 
W71
W72
W73
W74
W75
W7 
Compromi
sed
O
R
1
OR1
Compromised
W71 W72 W73 W74 W75
OR1
Lower Layer
REL1 REL2 REL3 REL4 REL5 REL6
Figure 2. HARM of the Virtualized System
CATEGORIES OF THE MTD TECHNIQUES
Table IV
Subcategory
Shufﬂe
Diversity
Redundancy
Layers
TCP/IP
Infrastructure
Application
Topology
Application
Application
references
[10], [11]
[12]–[14]
[15], [16]
[17], [18]
[19]–[24]
[25]
MTD
D. Security Analysis of the MTD Techniques in the HARM
In this subsection, we describe how to incorporate the
MTD techniques in the HARM. Prior to our work, a few
researches used ARMs to analyze the security [2], [3],
[7]. However, their focus was on the deployment of the
MTD techniques on the weak points in the networked
system. Our focus is to analyze how the security is changed
(either improved or deteriorated) by deploying the MTD
techniques in order to decide which is the most effective
MTD technique available. Therefore, we capture possible
changes to the network prior to the deployment of the MTD
techniques. To do this, we incorporate the MTD techniques
into the HARM.
1) Incorporating only the Shufﬂe based MTD Techniques
in the HARM: Shufﬂe does not change vulnerability infor-
mation in the system, so only the upper layer of the HARM
is affected. To demonstrate the effectiveness of Shufﬂe, we
chose a VM live migration method as an example. We
believe that other Shufﬂe based MTD techniques can be
modelled in a similar way. A VM live migration is performed
and it may cause a service disruption, but
the system
performance is not considered. Computing all migration
scenarios (and for any Shufﬂe based MTD techniques) has
an exponential computational complexity (i.e., computing
all possible combination cases). To deal with the scalability
problem we only model the next available migration step
(i.e., only one VM is migrated) and analyze the change in
security, because other possible cases of migration cannot
be achieved without these previous steps.
,EV M1
V S
= (NV M1
V S
), where NV M1
V S
= NV S and EV M1
V S
Deﬁnition 4. Given an Attack Graph G = (N,E) in the
upper layer HARM, an allowable shufﬂe method S ∈ E∗ is
any subset of the set E∗ ⊆ N × N.
Example 4. The AG shown in Figure 3(b), is a trans-
formation from a directed graph GV S = (NV S,EV S) to
GV M1
=
EV S ∪{(V M1,V M2), (V M1,V M5), (V M2,V M4)}
V S
There are three available migration steps from the initial
state, where two of them are shown in Figure 3. V M1 or
V M2 can migrate from Host1 to Host2, or V M4 can migrate
from Host3 to Host2, but V M3 cannot migrate to other
hosts from the initial state due to the system constraints (see
subsection II-A). Changes in the HARM are highlighted by
a dotted rectangle for migrated VMs, and dotted arrows for
changes in reachability. Figure 3(b) shows the migration of
V M1 with an addition of two new reachability connections.
The same result is obtained when V M2 is migrated. It also
shows that other non-migrating nodes are updated (e.g., a
new connection between V M2 and V M4). Migration of V M4
has one new reachability connection added, as shown in
Figure 3(c). These changes can be updated using the HARM
in the worst case of O(N) computational complexity, where
N is the number of upper layer hosts (e.g., the total number
of VM nodes in our example). The security analysis on each
migration scenario is shown in Section III.
2) Incorporating only the Diversity based MTD Tech-
niques in the HARM: We assume the Diversity does not
affect the reachability of the networked system (i.e., only
changes the vulnerability information). A new set of vulner-
abilities means the attacker needs different exploits to attack
the VMs (or hosts). This results in changes in the lower layer
of the HARM. For example, if we apply Diversity on V M1 at
the OS layer, then the AT in the lower layer for V M1 needs
to be updated. Two different models are shown in Figure 4.
V M1 can have an AT with an attack goal to compromise W7
(see Figure 4(a)), or an attack goal to compromise WV (see
Figure 4(b)). Since only one OS is operational at a time,
these ATs cannot be combined but must be updated when
diversity comes into effect.
Deﬁnition 5. Given an Attack Tree T = (A,B,E,ε,a0,ni)
in the lower layer HARM, an allowable diversity method
T∗ = (A∗,B∗,E∗,ε∗,a∗
,ni) is a transformation from T to
T∗, where A∗ is a ﬁnite set of attacks, B∗ is a set of edges,
(cid:6)= a0) is the root
ε∗ is a set of tuples, and (a∗
node. Components in the set of attacks, edges and tuples
of T∗ may overlap with components in T (e.g., ai ∈ A and
ai ∈ A∗).
∈ A∗ | a∗
0
0
0
518
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:31 UTC from IEEE Xplore.  Restrictions apply. 
Internet
VM1
VM2
Host2
VM3
W7 Compromised
OR1
VM4
(a) Attack Goal to Compromise W7
W71
W72
W73
W74
W75
Host1
VM5
WV Compromised
Host3
OR1
(a) Initial State of the HARM Upper Layer
Host2
WV1
WV2
WV9
WV10
(b) Attack Goal to Compromise WV
VM1
VM3
Figure 4. Possible Lower Layer ATs for V M1 with OS Diversity method
Internet
VM2
VM4
Host1
VM5
(b) Migration of V M1
Host3
Host2
VM3
VM4
Internet
VM1
VM2
Host1
VM5
Host3
(c) Migration of V M4
Figure 3. Next Step Migration on the HARM Upper Layer
Example 5. The AT shown in Figure 4(b) is a transforma-
tion of an AT TW 7 = (AW 7,BW 7,EW 7,εW 7,W 70,nV M1
TWV = (AWV ,BWV ,EWV ,εWV ,WV0,nV M1
{WV1,WV2,··· ,WV10}, BWV ={(WV1,ORWV
,··· ,(WV10,ORWV
)}.
),(WV2,ORWV
ORWV
) to
), where AWV =
,WV0)}, and εWV = {(WV1,
1
The security analysis may not show any difference de-
pending on the security metrics used (e.g., risk of W7 and
), (WV2,ORWV
)(ORWV
),··· , (WV10,ORWV
1
1
1
1
1
)
1
WV are the same). However, the Diversity changes the attack
surface by forcing the attacker to use different exploits for