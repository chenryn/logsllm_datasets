.TH IP 7 "1999年5月11日" "Linux 手册页" "Linux 程序员手册"
.SH NAME (名称)
ip \- Linux IPv4 协议实现
.SH SYNOPSIS(总览)
.B #include 
.br
.B #include 
.sp
.IB tcp_socket " = socket(PF_INET, SOCK_STREAM, 0);"
.br
.IB raw_socket " = socket(PF_INET, SOCK_RAW, " protocol ");"
.br
.IB udp_socket " = socket(PF_INET, SOCK_DGRAM, " protocol ");"
.SH DESCRIPTION(描述)
Linux 实现描述于 RFC791 和 RFC1122 中的 Internet 协议,版本4.
.B ip
包括遵循 RFC1112 的第二层的多信道广播技术的实现.它也包括含包过滤器的IP路由器.
.\" XXX:有没有人验证了2.1确实是与1812兼容的?
.PP
程序员的接口与 BSD 的套接字(socket)兼容．
要获得关于套接字的更多信息,参见
.BR socket (7)
.PP
创建一个IP套接字是通过以
.BR "socket(PF_INET, socket_type, protocol)"
方式调用
.BR socket (2)
函数来实现的．
有效的套接字类型（socket_type）有：
.B SOCK_STREAM
用来打开一个
.BR tcp (7)
套接字，
.B SOCK_DGRAM
用来打开一个
.BR udp (7)
套接字，或者是
.B SOCK_RAW
用来打开一个
.BR raw (7)
套接字用来直接访问 IP 协议．
.I protocol
指的是要接收或者发送出去的包含在 IP 头标识(header)中的 IP 协议．
对于TCP套接字而言,唯一的有效
.I protocol
值是
.B 0
和
.B IPPROTO_TCP
对于UDP套接字而言,唯一的有效
.I protocol
值是
.B 0
和
.B IPPROTO_UDP.
而对于
.B SOCK_RAW
你可以指定一个在 RFC1700 中定义的有效 IANA IP 协议代码来赋值.
.PP
.\" XXX ip当前在监听中会自动绑定,但是我不能确定这是否应该列在文档中
当一个进程希望接受新的来访包或者连接时,它应该使用
.BR bind (2)
绑定一个套接字到一个本地接口地址．
任意给定的本地(地址,端口)对只能绑定一个IP套接字．
当调用 bind 时中声明了
.B INADDR_ANY
时,套接字将会绑定到
.I 所有
本地接口．当在未绑定的套接字上调用
.BR listen (2)
或者
.BR connect (2)
时,套接字会自动绑定到一个本地地址设置为
.BR INADDR_ANY
的随机的空闲端口上．
除非你设置了
.B S0_REUSEADDR 
标识，否则一个已绑定的 TCP 本地套接字地址在关闭后的一段时间内不可用．
使用该标识的时候要小心，因为它会使 TCP 变得不可靠．
.SH ADDRESS FORMAT(地址格式)
一个 IP 套接字地址定义为一个 IP 接口地址和一个端口号的组合．
基本 IP 协议不会提供端口号,它们通过更高层次的协议如
.BR udp (7)
和
.BR tcp (7)
来实现．
对于raw套接字，
.B sin_port
设置为IP协议．
.PP
.RS
.nf
.ta 4n 19n 31n
struct sockaddr_in {
sa_family_t sin_family; /* 地址族: AF_INET */
u_int16_t sin_port; /* 按网络字节次序的端口 */
struct in_addr sin_addr; /* internet地址 */
};
/* Internet地址. */
struct in_addr {
u_int32_t s_addr; /* 按网络字节次序的地址 */
};
.ta
.fi
.RE
.PP
.I sin_family
总是设置为
.BR AF_INET .
这是必需的；在 Linux 2.2 中，如果该设置缺失，大多数联网函数会返回
.B EINVAL
.I sin_port
包含按网络字节排序的端口号．端口号在1024以下的称为
.IR "保留端口"．
只有那些有效用户标识为 0 或者
.B CAP_NET_BIND_SERVICE
有功能的进程才可以
.BR bind (2)
到这些套接字．注意原始的（raw）IPv4协议没有这样的端口概念,它们只通过更高的协议如
.BR tcp (7)
和
.BR udp (7)
来实现．
.PP
.I sin_addr
指的是 IP 主机地址.
在
.B struct in_addr
中的
.I addr
部分包含按网络字节序的主机接口地址．
.B in_addr
应该只能通过使用
.BR inet_aton (3),
.BR inet_addr (3),
.BR inet_makeaddr (3)
库函数或者直接通过名字解析器（参见
.BR gethostbyname (3)）
来访问．
IPv4 地址分成单点广播，广播传送和多点广播地址．
单点广播地址指定了一台主机的单一接口，广播地址指
定了在一个网段上的所有主机，
而多点广播地址则在一个多点传送组中寻址所有主机.
只有当设置了套接字标识
.B SO_BROADCAST 
时，
才能收发数据报到广播地址．
在当前的实现中，面向连接的套接字只允许使用单点传送地址．
.\" 为XTP留下了一个漏洞 @)
注意地址和端口总是按照网络字节序存储的．
这意味着你需要对分配给端口的号码调用
.BR htons (3) ．
所有在标准库中的地址/端口处理函数都是按网络字节序运行的．
有几个特殊的地址：
.B INADDR_LOOPBACK
(127.0.0.1)
总是代表经由回环设备的本地主机；
.B INADDR_ANY
(0.0.0.0)
表示任何可绑定的地址；
.B INADDR_BROADCAST
(255.255.255.255)
表示任何主机，由于历史的原因，这与绑定为
.B INADDR_ANY
有同样的效果.
.SH SOCKET OPTIONS(套接字选项)
IP 支持一些与协议相关的套接字选项，这些选项可以通过
.BR setsockopt (2)
设置，并可以通过
.BR getsockopt (2)
读取．
IP 的套接字选项级别为
.B SOL_IP
这是一个布尔整型标识,当值为0时为假,否则则为真.
.TP
.B IP_OPTIONS
设置或者获取将由该套接字发送的每个包的 IP 选项．
该参数是一个指向包含选项和选项长度的存储缓冲区的指针．
.BR setsockopt (2)
系统调用设置与一个套接字相关联的 IP 选项.
IPv4 的最大选项长度为 40 字节．
参阅 RFC791 获取可用的选项．
如果一个
.B SOCK_STREAM
套接字收到的初始连接请求包包含 IP 选项时，
IP 选项自动设置为来自初始包的选项，同时反转路由头．
在连接建立以后将不允许来访的包修改选项．
缺省情况下是关闭对所有来访包的源路由选项的，你可以用
.B accept_source_route
sysctl 来激活．仍然处理其它选项如时间戳（timestamp）．
对于数据报套接字而言，IP 选项只能由本地用户设置．调用带
.I IP_OPTIONS
的
.BR getsockopt (2)
会把当前用于发送的 IP 选项放到你提供的缓冲区中．
.TP
.B IP_PKTINFO
传递一条包含
.B pktinfo
结构(该结构提供一些来访包的相关信息)的
.I IP_PKTINFO
辅助信息.
这个选项只对数据报类的套接字有效．
.IP
.RS
.ta 4n 19n 33n
.nf
struct in_pktinfo
{
unsigned int ipi_ifindex; /* 接口索引 */
struct in_addr ipi_spec_dst; /* 路由目的地址 */
struct in_addr ipi_addr; /* 头标识目的地址 */
};
.fi
.RE
.IP
.\" XXX 详细阐述这些．
.B ipi_ifindex
指的是接收包的接口的唯一索引．
.\" XXX 这对吗?
.B ipi_spec_dst
指的是路由表记录中的目的地址，而
.B ipi_addr
指的是包头中的目的地址．
如果给 sendmsg (2)传递了
.I IP_PKTINFO，
那么外发的包会通过在
.B ipi_ifindex
中指定的接口
发送出去，同时把
.B ipi_spec_dst
设置为目的地址．
.TP
.B IP_RECVTOS
如果打开了这个选项，则
.I IP_TOS ,
辅助信息会与来访包一起传递．
它包含一个字节用来指定包头中的服务/优先级字段的类型．
该字节为一个布尔整型标识．
.TP
.B IP_RECVTTL
当设置了该标识时，
传送一条带有用一个字节表示的接收包生存时间（time to live）字段的
.I IP_RECVTTL
控制信息．
此选项还不支持
.B SOCK_STREAM
套接字．
.TP
.B IP_RECVOPTS
用一条
.I IP_OPTIONS
控制信息传递所有来访的 IP 选项给用户．
路由头标识和其它选项已经为本地主机填好．
此选项还不支持
.I SOCK_STREAM
套接字．
.TP
.B IP_RETOPTS
等同于
.I IP_RECVOPTS
但是返回的是带有时间戳的未处理的原始选项和在这段路由中未填入的路由记录项目．
.TP
.B IP_TOS
设置或者接收源于该套接字的每个IP包的 Type-Of-Service
（TOS 服务类型）字段．它被用来在网络上区分包的优先级．
TOS 是单字节的字段．定义了一些的标准 TOS 标识：
.B IPTOS_LOWDELAY
用来为交互式通信最小化延迟时间，
.B IPTOS_THROUGHPUT
用来优化吞吐量，
.B IPTOS_RELIABILITY
用来作可靠性优化，
.B IPTOS_MINCOST
应该被用作"填充数据"，对于这些数据，低速传输是无关紧要的．
至多只能声明这些 TOS 值中的一个．其它的都是无效的，应当被清除．
缺省时,Linux首先发送
.B IPTOS_LOWDELAY
数据报,
但是确切的做法要看配置的排队规则而定.
.\" XXX 详细阐述这些
一些高优先级的层次可能会要求一个有效的用户标识 0 或者
.B CAP_NET_ADMIN
能力.
优先级也可以以于协议无关的方式通过(
.B SOL_SOCKET, SO_PRIORITY
)套接字选项(参看
.BR socket (7)
)来设置.
.TP
.B IP_TTL
设置或者检索从此套接字发出的包的当前生存时间字段.
.TP
.B IP_HDRINCL
如果打开的话,
那么用户可在用户数据前面提供一个 ip 头.
这只对
.B SOCK_RAW
有效.参看
.BR raw (7)
以获得更多信息.当激活了该标识之后,其值由
.IR IP_OPTIONS
设定,并且
.I IP_TOS
被忽略.
.TP
.B IP_RECVERR
允许传递扩展的可靠的错误信息.
如果在数据报上激活了该标识,
那么所有产生的错误会在每套接字一个的错误队列中排队等待.
当用户从套接字操作中收到错误时,就可以通过调用设置了
.B MSG_ERRQUEUE
标识的
.BR recvmsg (2)
来接收.
描述错误的
.B sock_extended_err
结构将通过一条类型为
.I IP_RECVERR ,
级别为
.BR SOL_IP的辅助信息进行传递.
这个选项对在未连接的套接字上可靠地处理错误很有用.
错误队列的已收到的数据部分包含错误包.
.IP
IP 按照下面的方法使用
.B sock_extended_err
结构：
ICMP 包接收的错误
.I ee_origin
设为
.B SO_EE_ORIGIN_ICMP ,
对于本地产生的错误则设为
.B SO_EE_ORIGIN_LOCAL .
.I ee_type
和
.I ee_code
设置为 ICMP 头标识的类型和代码字段.
.I ee_info
包含用于
.B EMSGSIZE
时找到的 MTU.
.I ee_data
目前没有使用.
当错误来自于网络时,该套接字上所有IP选项都被激活
.RI ( IP_OPTIONS ", " IP_TTL ", "
等．)并且当做控制信息包含错误包中传递.引发错误的包的有效载荷会以正常数据返回.
.IP
.\" XXX:把这些列入文档是个好主意吗?它还是一个不确定的特性.
在
.B SOCK_STREAM
套接字上，
.I IP_RECVERR
会有细微的语义不同.它并不保存下次超时的错误,而是立即传递所有进来的错误给用户.
这对 TCP 连接时间很短的情况很有用,因为它要求快速的错误处理.
使用该选项要小心:因为不允许从路由转移和其它正
常条件下正确地进行恢复,它使得TCP变得不可靠,并且破坏协议的规范.
注意TCP没有错误队列;
.B MSG_ERRQUEUE
对于
.B SOCK_STREAM
套接字是非法的.
因此所有错误都会由套接字函数返回,或者只返回
.B SO_ERROR .
.IP
对于原始(raw)套接字而言,
.I IP_RECVERR
允许传递所有接收到的ICMP错误给应用程序,否则错误只在连接的套接字上报告出来.
.IP
它设置或者检索一个整型布尔标识.
.I IP_RECVERR
缺省设置为off(关闭).
.TP
.B IP_PMTU_DISCOVER
为套接字设置或接收Path MTU Discovery setting(路径MTU发现设置).
当允许时,Linux会在该套接字上执行定
义于RFC1191中的Path MTU Discovery(路径MTU发现).
don't 段标识会设置在所有外发的数据报上.
系统级别的缺省值是这样的：
.B SOCK_STREAM
套接字由
.B ip_no_pmtu_disc
sysctl 控制，而对其它所有的套接字都被都屏蔽掉了，对于非