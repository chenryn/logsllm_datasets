小灰，我再考考你，链表的插入和删
除操作，时间复杂度分别是多少？
---
## Page 75
如果不考虑插入、删除操作之前
查找元素的过程，只考虑纯粹的插入和删除操作，时间复杂度都
是0(1)。
很好，接下来看一看实现链表的完整
代码。
1.//头节点指针
2. private Node head;
3.//尾节点指针
4. private Node last;
5.//链表实际长度
6. private int size;
7.
8./**
9.*链表插入元素
10.
*@param data
插入元素
11.
*@paramindex插入位置
---
## Page 76
12.
*/
13. public void insert(int data, int index) throws Exception {
14.
if (indexsize）{
范围！");
15.
thrownewIndexOutofBoundsException（"超出链表节点
16.
17.
Node insertedNode =new Node(data);
18.
if(size == θ){
19.
//空链表
20.
head = insertedNode;
21.
last = insertedNode;
22.
} else if(index == 0){
23.
//插入头部
24.
insertedNode.next = head;
25.
head =insertedNode;
26.
}else if(size == index){
27.
//插入尾部
28.
last.next = insertedNode;
29.
last = insertedNode;
30.
}else{
31.
//插入中间
32.
Node prevNode = get(index-1);
33.
insertedNode.next = prevNode.next;
34.
prevNode.next = insertedNode;
---
## Page 77
35.
36.
size++;
37.}
38.
39.
/ **
40.
*
链表删除元素
41.
*
@paramindex删除的位置
42.
*/
43.
public Node remove(int index) throws Exception {
44.
if (index=size){
范围！")；
45.
thrownewIndexOutofBoundsException（"超出链表节点
46.
47.
Node removedNode = null;
48.
if(index == θ){
49.
//删除头节点
50.
removedNode =head;
51.
head = head.next;
52.
}else if(index == size-1){
53.
//删除尾节点
54.
Node prevNode = get(index-1);
55.
removedNode =prevNode.next;
56.
prevNode.next = null;
57.
last = prevNode;
58.
}else{
---
## Page 78
59.
//删除中间节点
60.
Node prevNode = get(index-1);
61.
Node nextNode = prevNode.next.next;
62.
removedNode = prevNode.next;
63.
prevNode.next = nextNode;
64.
65.
size--;
66.
return removedNode;
67.}
68.
69.
/ **
70.
链表查找元素
71.
*
@paramindex查找的位置
72.
*/
73.
public Node get(int index) throws Exception {
74.
if （index=size）{
75.
throw new IndexOutofBoundsException（"超出链表节点
范围！");
76.
3
77.
Node temp = head;
78.
for(int i=0; i<index; i++){
79.
temp =temp.next;
80.
81.
return temp;
---
## Page 79
82.}
83.
84./
/**
85.
输出链表
86.
*/
87.
public void output(){
88.
Node temp = head;
89.
while (temp!=null) {
90.
System.out.println(temp.data);
91.
temp = temp.next;
92.
93.
94.
95.
/**
96.
链表节点
97.
*/
98.
private static class Node {
99.
int data;
100.
Node next;
101.
Node(int data){
102.
this.data = data;
103.
104.}
105.
---
## Page 80
106.public static void main(String[] args) throws Exception {
107.
MyLinkedList myLinkedList = new MyLinkedList();
108.
myLinkedList.insert(3,0) ;
109.
myLinkedList.insert(7,1);
110.
myLinkedList.insert(9, 2);
111.
myLinkedList.insert(5, 3) ;
112.
myLinkedList.insert(6, 1) ;
113.
myLinkedList.remove(0);
114.
myLinkedList.output();
115.}
以上是对单链表相关操作的代码实现。为了尾部插入的方便，代码中额
外增加了指向链表尾节点的指针last。
2.2.3
数组VS链表
链表的基本知识我懂了。数组和
链表都属于线性的数据结构，用哪一个更好呢？
---
## Page 81
数据结构没有绝对的好与坏，数组和
链表各有千秋。下面我总结了数组和链表相关操作的性能，我们来
对比一下。
查找
更新
插入
删除
数组
0(1)
0(1)
O(n)
O(n)
链表
O(n)
0(1)
0(1)
0(1)
从表格可以看出，数组的优势在于能
够快速定位元素，对于读操作多、写操作少的场景来说，用数组更
合适一些。
相反地，链表的优势在于能够灵活地
---
## Page 82
进行插入和删除操作，如果需要在尾部频繁插入、删除元素，用链
表更合适一些。
关于链表的知识我们就介绍到这里，
咱们下一节再见！
2.3
栈和队列
2.3.1
物理结构和逻辑结构
---
## Page 83
大黄。除数组和链表
外，还有哪些常用的
数据结构呢？
常用的数据结构有很多
但大多数都以数组或链表
作为存储方式。数组和链
表可以被看作数据存储的
“物理结构”，
哦，什么物理结构、化学结构
的？这又是什么鬼？
什么是数据存储的物理结构呢？
如果把数据结构比作活生生的人，那么物理结构就是人的血肉和骨骼，
看得见，摸得着，实实在在。例如我们刚刚学过的数组和链表，都是内
存中实实在在的存储结构。
而在物质的人体之上，还存在着人的思想和精神，它们看不见、摸不
着。看过电影《阿凡达》吗？男主角的思想意识从一个瘦弱残疾的人
类身上被移植到一个高大威猛的蓝皮肤外星人身上，虽然承载思想意识
的肉身改变了，但是人格却是唯一的。
---
## Page 84
如果把物质层面的人体比作数据存储的物理结构，那么精神层面的人格
则是数据存储的逻辑结构。逻辑结构是抽象的概念，它依赖于物理结
构而存在。
线性结构
逻辑
非线性结构
结构
举例：
举例：
顺序表、栈、队列树、图
顺序存储结构
物理
链式存储结构
结构
举例：
举例：
数组
下面我们来讲解两个常用数据结构：栈和队列。这两者都属于逻辑结
构，它们的物理实现既可以利用数组，也可以利用链表来完成。
在后面的章节中，我们会学习到二叉树，这也是一种逻辑结构。同样
地，二叉树也可以依托于物理上的数组或链表来实现。
2.3.2
什么是栈
要弄明白什么是栈，我们需要先举一个生活中的例子。
假如有一个又细又长的圆筒，圆筒一端封闭，另一端开口。往圆筒里放
入乒乓球，先放入的靠近圆筒底部，后放入的靠近圆筒入口。
那么，要想取出这些乒乓球，则只能按照和放入顺序相反的顺序来取，
先取出后放入的，再取出先放入的，而不可能把最里面最先放入的乒乓
球优先取出。
---
## Page 85
栈（stack）是一种线性数据结构，它就像一个上图所示的放入乒乓球的
圆筒容器，栈中的元素只能先入后出（FirstInLastOut，简称FILO
）。最早进入的元素存放的位置叫作栈底（bottom），最后进入的元素
存放的位置叫作栈顶（top）。
栈这种数据结构既可以用数组来实现，也可以用链表来实现。
栈的数组实现如下。
栈底
栈项
3
5149
6
栈的链表实现如下。
项
5
→1
→4
→9
NUL
那么，栈可以进行哪些操作呢？
---
## Page 86
栈的最基本操作是入栈和出栈，下面
让我们来看一看。
2.3.3
栈的基本操作
1.入栈
入栈操作（push）就是把新元素放入栈中，只允许从栈顶一侧放入元
素，新元素的位置将会成为新的栈顶。
这里我们以数组实现为例。
技项
3
2.出栈
出栈操作（pop）就是把元素从栈中弹出，只有栈顶元素才允许出栈，
出栈元素的前一个元素将会成为新的栈顶。
这里我们以数组实现为例。
---
## Page 87
城底
找项
3
5
6
栈项
4
6
由于栈操作的代码实现比较简单，这里就不再展示代码了，有兴趣的读
者可以自己写写看。
小灰，你说说，入栈和出栈操作，时
间复杂度分别是多少？
入栈和出栈只会影响到最后一个元
素，不涉及其他元素的整体移动，所以无论是以数组还是以链表实
现，入栈、出栈的时间复杂度都是0(1)。
2.3.4什么是队列
要弄明白什么是队列，我们同样可以用一个生活中的例子来说明。
假如公路上有一条单行隧道，所有通过隧道的车辆只允许从隧道入口驶
入，从隧道出口驶出，不允许逆行。
---
## Page 88
1
因此，要想让车辆驶出隧道，只能按照它们驶入隧道的顺序，先驶入的
车辆先驶出，后驶入的车辆后驶出，任何车辆都无法跳过它前面的车辆
提前驶出。
队列（queue）是一种线性数据结构，它的特征和行驶车辆的单行隧道
很相似。不同于栈的先入后出，队列中的元素只能先入先出（FirstIn
FirstOut，简称FIFO）。队列的出口端叫作队头（front），队列的入
口端叫作队尾（rear）。
与栈类似，队列这种数据结构既可以用数组来实现，也可以用链表来实
现。
用数组实现时，为了入队操作的方便，把队尾位置规定为最后入队元素
的下一个位置。
队列的数组实现如下。
队头
队尾
3
5
1
4
6
队列的链表实现如下。
5→1→→9
NULI
---
## Page 89
那么，队列可以进行哪些操作
呢？
和栈操作相对应，队列的最基本操作
是入队和出队。
2.3.5
队列的基本操作
对于链表实现方式，队列的入队、出队操作和栈是大同小异的。但对于
数组实现方式来说，队列的入队和出队操作有了一些有趣的变化。怎么
有趣呢？我们后面会看到。