Connected to a transient in-memory database.    
Use ".open FILENAME" to reopen on a persistent database.    
D set s3_access_key_id='LTAI5t6eUHtPZiFKLCNQro8n';     
D set s3_secret_access_key='5wHLZXCbTpNbwUUeqRBqr7vGyirFL5';     
D set s3_endpoint='s3.oss-cn-shanghai.aliyuncs.com';     
将parquet文件映射为view   
D create or replace view test_duckdb1 as     
  SELECT * FROM read_parquet('s3://adc-oss-labs01969/ECSOSS/u-bimcc3ei/test_duckdb1.parquet');    
D select count(*) from test_duckdb1;    
┌──────────────┐    
│ count_star() │    
│    int64     │    
├──────────────┤    
│      1000000 │    
└──────────────┘    
D select * from main."test_duckdb1" limit 10;    
100% ▕████████████████████████████████████████████████████████████▏     
┌───────┬──────────────────────────────────┬────────────────────────────┐    
│  id   │               info               │             ts             │    
│ int64 │             varchar              │  timestamp with time zone  │    
├───────┼──────────────────────────────────┼────────────────────────────┤    
│     0 │ 87a144c45874838dbcd3255c215ababc │ 2023-03-08 17:28:12.902+08 │    
│     1 │ cce8d1f5d58e72e9f34a36ccd87188ed │ 2023-03-08 17:28:12.902+08 │    
│     2 │ 0ea50d2769b01c26537e09902dc5f732 │ 2023-03-08 17:28:12.902+08 │    
│     3 │ 70a6c5f594def5d1d1bbb993260a2fd7 │ 2023-03-08 17:28:12.902+08 │    
│     4 │ 5a7924f417b480210601508e2c144a2f │ 2023-03-08 17:28:12.902+08 │    
│     5 │ d1fde1c1dc8f268d9eb9fce477653bb0 │ 2023-03-08 17:28:12.902+08 │    
│     6 │ 1aac9556fd1b259c56ecef3ef4636a66 │ 2023-03-08 17:28:12.902+08 │    
│     7 │ 04181693f9b6c8576bb251612ffbe318 │ 2023-03-08 17:28:12.902+08 │    
│     8 │ 332b9bb9d00e8fa53a5661804bd1b41a │ 2023-03-08 17:28:12.902+08 │    
│     9 │ f0189d662187cc436662a458577a7ed2 │ 2023-03-08 17:28:12.902+08 │    
├───────┴──────────────────────────────────┴────────────────────────────┤    
│ 10 rows                                                     3 columns │    
└───────────────────────────────────────────────────────────────────────┘    
Run Time (s): real 9.773 user 1.121633 sys 0.928902    
D .timer on    
D select max(id) from test_duckdb1;    
┌─────────┐    
│ max(id) │    
│  int64  │    
├─────────┤    
│  999999 │    
└─────────┘    
Run Time (s): real 0.482 user 0.087439 sys 0.065868    
```    
### 在postgresql中使用duckdb_fdw访问oss内的parquet文件    
你可以创建duckdb内存数据库, 也可以指定为一个持久化文件, 使用持久化文件的话可以拥有一些元数据存储的能力, 不用每次都创建映射和配置.     
下面用的是内存存储(非持久化)例子:    
在psql内执行    
```    
postgres=# CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database ':memory:');      
CREATE SERVER      
-- 设置为保持连接(会话内保持)    
postgres=# alter server duckdb_server options ( keep_connections 'true');    
ALTER SERVER    
```    
接下来创建一个duckdb视图, 用以查询parquet.    
一定要分开执行:     
```    
SELECT duckdb_execute('duckdb_server',     
$$    
set s3_access_key_id='LTAI5t6eUHtPZiFKLCNQro8n';     
$$);    
SELECT duckdb_execute('duckdb_server',     
$$    
set s3_secret_access_key='5wHLZXCbTpNbwUUeqRBqr7vGyirFL5';     
$$);    
SELECT duckdb_execute('duckdb_server',     
$$    
set s3_endpoint='s3.oss-cn-shanghai.aliyuncs.com';     
$$);    
SELECT duckdb_execute('duckdb_server',     
$$    
create or replace view test_duckdb1 as     
SELECT * FROM read_parquet('s3://adc-oss-labs01969/ECSOSS/u-bimcc3ei/test_duckdb1.parquet');    
$$);    
```    
检查是否保持连接    
```    
postgres=# select * from duckdb_fdw_get_connections();    
  server_name  | valid     
---------------+-------    
 duckdb_server | t    
(1 row)    
```    
创建duckdb_fdw外部表, 指向刚才创建的duckdb视图:    
```    
create foreign TABLE ft_test_duckdb1(    
id int,    
info text,    
ts timestamp)    
SERVER duckdb_server OPTIONS (table 'test_duckdb1');     
```    
我们查看一下duckdb_fdw的下推能力, 非常帮, 过滤、limit、排序、distinct等都进行了下推, 详细参考duckdb_fdw开源项目:    
```    
postgres=# explain verbose select id from ft_test_duckdb1 limit 1;    
                                QUERY PLAN                                    
--------------------------------------------------------------------------    
 Foreign Scan on public.ft_test_duckdb1  (cost=1.00..1.00 rows=1 width=4)    
   Output: id    
   SQLite query: SELECT "id" FROM main."test_duckdb1" LIMIT 1    
(3 rows)    
postgres=# explain verbose select * from ft_test_duckdb1 where id<100;    
                                       QUERY PLAN                                            
-----------------------------------------------------------------------------------------    
 Foreign Scan on public.ft_test_duckdb1  (cost=10.00..401.00 rows=401 width=44)    
   Output: id, info, ts    
   SQLite query: SELECT "id", "info", "ts" FROM main."test_duckdb1" WHERE (("id" < 100))    
(3 rows)    
postgres=# explain verbose select * from ft_test_duckdb1 where id<100 order by ts limit 100;    
                                                           QUERY PLAN                                                               
--------------------------------------------------------------------------------------------------------------------------------    
 Foreign Scan on public.ft_test_duckdb1  (cost=1.00..1.00 rows=1 width=44)    
   Output: id, info, ts    
   SQLite query: SELECT "id", "info", "ts" FROM main."test_duckdb1" WHERE (("id" < 100)) ORDER BY "ts" ASC NULLS LAST LIMIT 100    
(3 rows)    
postgres=# explain verbose select count(distinct id) from ft_test_duckdb1;    
                              QUERY PLAN                                  
----------------------------------------------------------------------    
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)    
   Output: (count(DISTINCT id))    
   SQLite query: SELECT count(DISTINCT "id") FROM main."test_duckdb1"    
(3 rows)    
```    
```    
postgres=# select * from ft_test_duckdb1 limit 1;    
 id |               info               |           ts                
----+----------------------------------+-------------------------    
  0 | 87a144c45874838dbcd3255c215ababc | 2023-03-08 09:28:12.902    
(1 row)    
```    
执行查询, 看看性能如何. 以下对比pg本地表、parquet(实验环境在公网, 如果是内网还不好说谁快谁慢.)    
```    
postgres=# create table t as select * from ft_test_duckdb1 ;    
SELECT 1000000    
Time: 21196.441 ms (00:21.196)    
```    
```    
postgres=# \timing    
Timing is on.    
postgres=# select count(distinct id) from ft_test_duckdb1;    
  count      
---------    
 1000000    
(1 row)    
Time: 1281.537 ms (00:01.282)    
postgres=# select count(distinct id) from t;    
  count      
---------    
 1000000    
(1 row)    
Time: 260.007 ms    
postgres=# select count(*) from ft_test_duckdb1 where id<100;    
 count     
-------    
   100    
(1 row)    
Time: 806.976 ms    
postgres=# select count(*) from t where id<100;    
 count     
-------    
   100    
(1 row)    
Time: 60.254 ms    
```    
### 多个会话同时访问相同server, 相同foreign table  
使用同一个server, 每次建立连接都会新建一个duckdb inmemory进程. 每次都需要设置oss配置, 创建duckdb view. 然后就能通过ft读取数据.  
session a:  
- 访问正常  
```  
postgres=# select * from ft_test_duckdb1 limit 1;  
 id |               info               |           ts              
----+----------------------------------+-------------------------  
  0 | 77e736e2033e489f3134607dcfd63d05 | 2023-03-09 05:45:25.506  
(1 row)  
```  
session b:  
- 访问正常  
```  
postgres=# select * from ft_test_duckdb1 limit 1;  
 id |               info               |           ts              
----+----------------------------------+-------------------------  
  0 | 77e736e2033e489f3134607dcfd63d05 | 2023-03-09 05:45:25.506  
(1 row)  
```  
### 通过duckdb_fdw将历史数据写入oss, 实现历史数据归档操作  
准备工作, 配置需要密码连接postgresql.   