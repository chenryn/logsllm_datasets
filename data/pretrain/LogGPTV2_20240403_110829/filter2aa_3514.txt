智能合约消息调用攻防
隐形人真忙 [at] 百度安全
关于作者
ID：隐形人真忙
Title：百度安全工程师
Work：从事攻防技术研究 & 安全产品研发
Weibo：https://weibo.com/alivexploitcat
微博关注
以太坊架构与
攻击面介绍
EVM消息调
用原理剖析
消息调用攻防
议题总结
以太坊架构与攻击面介绍
以太坊架构以各个攻击面
Web3.js
传统Web安全漏洞
去中心化应用
智能合约层
EVM虚拟机
RPC层
Block Chain
Block
共
识
算
法
PoW
PoS
Miner
Network
P2P
Crypto
Solidity
…
Transaction
Database
Agent
CPU/GPU
Worker
Peer
Protocol
Sync
智能合约代码漏洞
EVM机制特性、缺陷
RPC未授权访问、DoS漏洞等
共识协议缺陷 51%攻击
P2P网络漏洞 Eclipse攻击
Miner算法、逻辑漏洞
钱包漏洞、密钥泄露等
EVM消息调用原理剖析
什么是消息调用（Message Call）
• 是一种从一个以太坊账户向另一个账户发送消息的行为
• 可以用于转账、跨合约方法调用
• 一次消息调用可以携带数据
• data：
全部的calldata
• gas：
执行交易携带的gas
• sender：
发送者的地址
• sig：
calldata的前四个字节
• value：
以太币数额
基本概念
msg结构
跨合约方法调用原理
ABI规范
合约1
合约2
gas
调用发起方
调用执行方
value
data
• 调用发起合约：
Client
• 调用执行合约：
Server
• ABI：
HTTP协议
• Gas/value/data：
HTTP Data
Web
Database
Contract
Block chain
msg
跨合约方法调用原理
• .call(方法选择器, arg1, arg2, …)
• .call(bytes)
调用形式
call参数详解
• 方法选择器（4 bytes）
• 方法摘要：test(uint256,uint256)
• bytes4(bytes32(sha3(“test(uint256,uint256)”)))
• 参数列表（N bytes）
• 按照一定的格式对不同类型的参数进行编排
• 32字节一个单位，不够的高位补0
• 方法选择器
• 0xeb8ac921
• 参数1
• 0x0000000000000000000000000000000000000
000000000000000000000000001
• 参数2
• 0x0000000000000000000000000000000000000
000000000000000000000000002
Calldata：
0xeb8ac921000000000000000000000000000
0000000000000000000000000000000000001
0000000000000000000000000000000000000
000000000000000000000000002
调用 test(1, 2)
ABI
规
范
跨合约方法调用原理
智能合约消息调用攻防
消息调用的一些特性
• 外部方法调用深度最大为1024，超过1024则调用失败
• 即使调用过程中出现异常，但是call本身不会抛出异常
• 获取不到执行方法的返回值，只返回true和false
• call调用链中，msg.sender是按照最近一次发起对象来确定的
• EVM分解参数时存在参数填充和参数截断的特性
Reentrancy漏洞
Bank Contract
contract Bank{
function withdraw(){
uint amountToWithdraw = balances[msg.sender] ;
if(msg.sender.call.value(amountToWithdraw)() == false){
throw ;
}
balances[msg.sender] = 0 ;
}
}
• .send(ethValue)
• 2300 gas
• .transfer(ethValue)
• 2300 gas
• .call.value(ethValue)()
• 所有可用gas
User Contract
contract User{
function money(address addr){
Bank(addr).withdraw() ;
}
function () payable{
//some log codes
}
}
contract Attacker{
function money(address addr){
Bank(addr).withdraw() ;
}
function () payable{
Bank(addr).withdraw() ;
}
}
Attack Contract
①
②
③
④
发送所有gas
Reentrancy漏洞
Bank Contract
contract Bank{
function withdraw(){
uint amountToWithdraw = balances[msg.sender] ;
if(msg.sender.call.value(amountToWithdraw)() == false){
throw ;
}
balances[msg.sender] = 0 ;
}
}
contract Attacker{
function money(address addr){
Bank(addr).withdraw() ;
}
function () payable{
Bank(addr).withdraw() ;
}
}
Attack Contract
防护手段
• 使用sender/transfer代替call
• 对状态变量操作要尽量提前
• 对转账操作失败的情况进行throw
TheDAO事件
5000多万美元
被盗
……
10 ether
withdraw
10 ether
withdraw
短地址攻击
EVM获取参数的方式
calldataload指令
• calldataload(position)
• 从position开始的位置截取32字节数据
• 调用了两次calldataload
短地址攻击
• Method Id
• a9059cbb    transfer(address,uint256)
• Address
• 0000000000000000000000003f54699F7991023Cd4F7Bf2
C89369dA6bc95b500
• Value
• 0000000000000000000000000000000000000000000000
000000000000000002
Transfer(3f54699F7991023Cd4F7Bf2C89369dA6bc95b500, 2)
msg.data
攻击过程
ETH靓号地址：
3f54699F7991023Cd4F7Bf2C89369dA6bc95b5  00
3f54699F7991023Cd4F7Bf2C89369dA6bc95b5 _ _
不满32字节
0000000000000000000000003f54699F7991023Cd
4F7Bf2C89369dA6bc95b5 00
00 00000000000000000000000000000000000
000000000000000000000000002 00
RightPadBytes
000000000000000000000000000000000000000
0000000000000000000000200
短地址攻击
Transfer(3f54699F7991023Cd4F7Bf2C89369dA6bc95b500, 0x2)
Transfer(3f54699F7991023Cd4F7Bf2C89369dA6bc95b5, 0x200)
Value被放大256倍
modifier onlyPayloadSize(uint256 size) {
if(msg.data.length .call(bytes4 selection, arg1, arg2, ...)
 可以直接传入bytes：
.call(bytes data)
 在被调用方法中的msg.sender是调用发起的一方
Address(A)
Message call
方法B
msg.sender == Address(A)
新场景：call注入漏洞
 攻击模型
• 参数列表可控
• .call(bytes4 selection, arg1, arg2, ...)
• 方法选择器可控
• .call(bytes4 selection, arg1, arg2, ...)
• Bytes可控
• .call(bytes data)
• .call(msg.data)
 Sender转换
• 利用合约中的call注入调用合约内部方法
• Sender为合约的地址，而不再是最开始发起者
的地址
敏感操作
合约内部call
Sender转换
发起恶意调用
Contract A{
function pwn(address addr, bytes data){
B(addr).info(data) ;
}
}
Contract B{
function info(bytes data){
this.call(data) ;
}
function secret() public{
require(this == msg.sender);
// secret operations
}
}
Call B.secret();
新场景：call注入漏洞
直接注入bytes
transfer
正常用户
Contract
• transfer的msg.sender是用户自身
• 修改余额是用户本身的余额
Contract
注入
approveAndCallcode(
addressOfContract, 
0, 
hex"0xa9059cbb…….000000000000000000a“)
攻击者
transfer
approveAndCallcode
• transfer的msg.sender是合约账户
• 修改余额是合约账户的余额
token失窃
transfer
approveAndCallcode
新场景：call注入漏洞
进一步拓宽攻击面——EVM参数截断问题
EVM具体行为
•
call调用方法不检测参数个数
•
参数个数不一致，编译不会报错
•
如果给定参数个数大于被调用方法
的个数，则截断处理
新场景：call注入漏洞
方法选择器可控拓宽攻击面
approve
正常用户
Contract
• approve的msg.sender是用户
Contract
注入
logAndCall(addressOfContract, 10, hex"0a", 
"approve(address,uint256)")
攻击者
approve
logAndCall
• approve的msg.sender是合约
function logAndCall(address _to, uint _value, bytes data, string _fallback){
// some code
// …..
assert(_to.call(bytes4(keccak256(_fallback)), msg.sender,
_value, _data)) ;
//……
} 
新场景：call注入漏洞
call注入使权限校验失效
新场景：call注入漏洞
ERC223支持Token交易的callback
• ERC223是ERC20的升级版
• ERC223支持某些方法的回调
• 很多ERC223标准的实现中带入call注入
新场景：call注入漏洞
modifier banContractSelf() {
if(msg.sender == address(this)) {
throw;
}
_;
}
function approve(address _to, uint256 _value) banContractSelf{
// some codes
}
修复方案
• 对于敏感操作，检查sender是否为this
• 使用private和internal限制访问
议题总结
议题总结
应用流行
安全漏洞
特性
漏洞
一切只是刚刚开始
以太坊
其他公链
暴涨的市值
专业的猎手
更多攻击面
经济价值
Thanks