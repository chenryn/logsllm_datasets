# 智能合约消息调用攻防
## 作者简介
- **ID**: 隐形人真忙
- **职位**: 百度安全工程师
- **工作内容**: 从事攻防技术研究及安全产品研发
- **微博**: [https://weibo.com/alivexploitcat](https://weibo.com/alivexploitcat)

## 以太坊架构与攻击面介绍
### 以太坊架构
- **Web3.js**
- **传统Web安全漏洞**
- **去中心化应用 (DApps)**
- **智能合约层**
- **EVM虚拟机**
- **RPC层**
- **区块链 (Block Chain)**
- **共识算法 (Consensus Algorithm)**
  - **PoW (Proof of Work)**
  - **PoS (Proof of Stake)**
- **矿工 (Miner)**
- **网络 (Network)**
  - **P2P网络**
- **密码学 (Crypto)**
- **Solidity编程语言**
- **交易 (Transaction)**
- **数据库 (Database)**
- **代理 (Agent)**
- **CPU/GPU**
- **Worker**
- **Peer**
- **协议 (Protocol)**
- **同步 (Sync)**

### 攻击面
- **智能合约代码漏洞**
- **EVM机制特性与缺陷**
- **RPC未授权访问、DoS漏洞等**
- **共识协议缺陷**（例如51%攻击）
- **P2P网络漏洞**（例如Eclipse攻击）
- **矿工算法和逻辑漏洞**
- **钱包漏洞、密钥泄露等**

## EVM消息调用原理剖析
### 什么是消息调用 (Message Call)
- 消息调用是从一个以太坊账户向另一个账户发送消息的行为。
- 可用于转账和跨合约方法调用。
- 一次消息调用可以携带数据。

#### 基本概念
- **data**: 全部的calldata
- **gas**: 执行交易所需的gas
- **sender**: 发送者的地址
- **sig**: calldata的前四个字节
- **value**: 以太币数额

### 跨合约方法调用原理
- **调用发起方 (Client)**
- **调用执行方 (Server)**
- **ABI (Application Binary Interface) 规范**

#### 示例
- **合约1 (Client)**
- **合约2 (Server)**
- **Gas/value/data**: 类似于HTTP Data

#### 调用形式
- `.call(方法选择器, arg1, arg2, ...)`
- `.call(bytes)`

#### call参数详解
- **方法选择器 (4 bytes)**
- **方法摘要**: `test(uint256,uint256)`
- **bytes4(bytes32(sha3("test(uint256,uint256)")))`
- **参数列表 (N bytes)**
- **按一定格式对不同类型的参数进行编排**
- **32字节一个单位，不够的高位补0**

#### 示例
- **方法选择器**: `0xeb8ac921`
- **参数1**: `0x0000000000000000000000000000000000000000000000000000000000000001`
- **参数2**: `0x0000000000000000000000000000000000000000000000000000000000000002`
- **Calldata**: `0xeb8ac92100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002`

### 消息调用的一些特性
- **外部方法调用深度最大为1024**，超过则调用失败。
- **即使调用过程中出现异常，call本身不会抛出异常**。
- **无法获取执行方法的返回值**，只返回true或false。
- **在call调用链中，msg.sender是最近一次发起对象**。
- **EVM分解参数时存在参数填充和截断的特性**。

## Reentrancy漏洞
### 示例
```solidity
contract Bank {
    function withdraw() {
        uint amountToWithdraw = balances[msg.sender];
        if (msg.sender.call.value(amountToWithdraw)() == false) {
            throw;
        }
        balances[msg.sender] = 0;
    }
}

contract Attacker {
    function money(address addr) {
        Bank(addr).withdraw();
    }

    function () payable {
        Bank(addr).withdraw();
    }
}
```

### 防护手段
- **使用sender/transfer代替call**
- **对状态变量操作要尽量提前**
- **对转账操作失败的情况进行throw**

## TheDAO事件
- **损失金额**: 5000多万美元

## 短地址攻击
### EVM获取参数的方式
- **calldataload指令**
  - `calldataload(position)`：从position开始的位置截取32字节数据

### 示例
- **Method Id**: `a9059cbb` (transfer(address,uint256))
- **Address**: `0000000000000000000000003f54699F7991023Cd4F7Bf2C89369dA6bc95b500`
- **Value**: `0000000000000000000000000000000000000000000000000000000000000002`

### 攻击过程
- **ETH靓号地址**: `3f54699F7991023Cd4F7Bf2C89369dA6bc95b500`
- **不满32字节**: `3f54699F7991023Cd4F7Bf2C89369dA6bc95b5_ _`
- **RightPadBytes**: `0000000000000000000000003f54699F7991023Cd4F7Bf2C89369dA6bc95b500`
- **Value被放大256倍**: `Transfer(3f54699F7991023Cd4F7Bf2C89369dA6bc95b5, 0x200)`

## 新场景：call注入漏洞
### 攻击模型
- **参数列表可控**
- **方法选择器可控**
- **Bytes可控**

### Sender转换
- **利用合约中的call注入调用合约内部方法**
- **Sender为合约的地址，而不再是最开始发起者的地址**

### 示例
```solidity
contract A {
    function pwn(address addr, bytes data) {
        B(addr).info(data);
    }
}

contract B {
    function info(bytes data) {
        this.call(data);
    }

    function secret() public {
        require(this == msg.sender);
        // 敏感操作
    }
}

// 调用B.secret()
```

### 进一步拓宽攻击面——EVM参数截断问题
- **call调用方法不检测参数个数**
- **如果给定参数个数大于被调用方法的个数，则截断处理**

### 方法选择器可控拓宽攻击面
- **approve方法示例**

### ERC223支持Token交易的callback
- **ERC223是ERC20的升级版**
- **支持某些方法的回调**
- **很多ERC223标准的实现中带入call注入**

### 修复方案
- **对于敏感操作，检查sender是否为this**
- **使用private和internal限制访问**

## 议题总结
- **应用流行**
- **安全漏洞**
- **特性与漏洞**
- **一切只是刚刚开始**
- **以太坊及其他公链**
- **暴涨的市值**
- **专业的猎手**
- **更多攻击面**
- **经济价值**

感谢您的关注！