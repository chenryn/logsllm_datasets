    r11=00000000033ae088 r12=00000000059f912c r13=0000000000000001
    0: kd> dt _GUID @rcx
    //查看这个参数
    ole32!_GUID
     {55e3ea25-55cb-4650-8887-18e8d30bb4bc}=传入iid是IID_InterfaceFake
     //下这个断点
    1: kd> bp OLEAUT32!LoadTypeLibEx
    1: kd> g
    Breakpoint 3 hit
    OLEAUT32!LoadTypeLibEx:
    0033:000007fe`feb6a550 fff3            push    rbx
    //第一次加载的是目标TypeLib
    1: kd> dc @rcx L50
    00000000`02c8e070  003a0043 0057005c 006e0069 006f0064  C.:..W.i.n.d.o.
    00000000`02c8e080  00730077 004d005c 00630069 006f0072  w.s..M.i.c.r.o.
    00000000`02c8e090  006f0073 00740066 004e002e 00540045  s.o.f.t...N.E.T.
    00000000`02c8e0a0  0046005c 00610072 0065006d 006f0077  .F.r.a.m.e.w.o.
    00000000`02c8e0b0  006b0072 0076005c 002e0034 002e0030  r.k..v.4...0...
    00000000`02c8e0c0  00300033 00310033 005c0039 00790053  3.0.3.1.9..S.y.
    00000000`02c8e0d0  00740073 006d0065 0045002e 0074006e  s.t.e.m...E.n.t.
    00000000`02c8e0e0  00720065 00720070 00730069 00530065  e.r.p.r.i.s.e.S.
    00000000`02c8e0f0  00720065 00690076 00650063 002e0073  e.r.v.i.c.e.s...
    00000000`02c8e100  006c0074 00000062 001e6e38 00000000  t.l.b...8n......
    00000000`02c8e110  059f92e0 00000000 02c8e180 00000000  ................
    0: kd> kv
     # Child-SP          RetAddr           : Args to Child                                                           : Call Site
    00 00000000`0391d828 000007fe`febf00eb : 00000000`00000ed8 00000000`00000000 00000000`0391d9a0 00000000`0391d870 : OLEAUT32!LoadTypeLibEx
    01 00000000`0391d830 000007fe`febf0f4f : 000007fe`ff6c71c0 000007fe`ff661889 00000000`0371f310 00000000`00000000 : OLEAUT32!GetTypeInfoOfIIDFwd+0x3fb
    02 00000000`0391dbe0 000007fe`febf1149 : 00000000`00284210 00000000`0371f310 00000000`00284240 00000000`00284248 : OLEAUT32!FilterReferencedTypeInfos+0x3df
    03 00000000`0391dc40 000007fe`ff51e46a : 00000000`00000000 00000000`03715ea0 00000000`00284210 00000000`00284210 : OLEAUT32!CProxyWrapper::Connect+0x79
    04 00000000`0391dc90 000007fe`ff51e233 : 00000000`0371f310 00000000`00000000 00000000`0378aaf8 00000000`00284210 : ole32!CStdMarshal::ConnectCliIPIDEntry+0x1ca [d:w7rtmcomole32comdcomremmarshal.cxx @ 2368] 
    05 00000000`0391dd00 000007fe`ff51e114 : 00000000`0391df50 00000000`0391e618 00000000`0378aaf8 00000000`00000000 : ole32!CStdMarshal::MakeCliIPIDEntry+0xc3 [d:w7rtmcomole32comdcomremmarshal.cxx @ 2189] 
    06 00000000`0391dd90 000007fe`ff5211ec : 00000000`03715ea0 00000000`0391df68 00000000`0391e618 0000113b`9a2802cf : ole32!CStdMarshal::UnmarshalIPID+0x70 [d:w7rtmcomole32comdcomremmarshal.cxx @ 1734] 
    07 00000000`0391dde0 000007fe`ff5210b7 : 00000000`00000000 00000000`059e7610 00000000`00000000 00000000`00000000 : ole32!CStdMarshal::UnmarshalObjRef+0x10c [d:w7rtmcomole32comdcomremmarshal.cxx @ 1618] 
    08 00000000`0391de80 000007fe`ff52106c : 00000000`0378aaf8 00000000`0391df50 00000000`00000001 00000000`037daf90 : ole32!UnmarshalSwitch+0x2b [d:w7rtmcomole32comdcomremmarshal.cxx @ 1279] 
    09 00000000`0391deb0 000007fe`ff64a0c5 : 00000000`0378aaf8 00000000`00000000 00000000`0365efb0 00000018`00000000 : ole32!UnmarshalObjRef+0xc0 [d:w7rtmcomole32comdcomremmarshal.cxx @ 1406] 
    //使用的是标准反序列化模式
    0a 00000000`0391df30 000007fe`ff5232a6 : 00000000`037daf90 000007fe`fee64366 00000000`001cf840 000007fe`fedec704 : ole32!CStdMarshal::UnmarshalInterface+0x45 [d:w7rtmcomole32comdcomremmarshal.cxx @ 1238] 
    0b 00000000`0391dfd0 000007fe`ff523542 : 000007fe`00000002 00000000`0391e340 00000000`0391db00 00000000`00000000 : ole32!CoUnmarshalInterface+0x19c [d:w7rtmcomole32comdcomremcoapi.cxx @ 957] 
    0c 00000000`0391e0b0 000007fe`fedf523e : 00000000`0363fdd4 00000000`0391e340 000007fe`00000001 00000000`0029f880 : ole32!NdrExtInterfacePointerUnmarshall+0x162 [d:w7rtmcomrpcndroleoleaux.cxx @ 1354] 
    0d 00000000`0391e120 000007fe`fedff6cf : 000007fe`00000000 00000000`0391e4f0 00000000`0391e618 00000000`00000000 : RPCRT4!IUnknown_AddRef_Proxy+0x19e
    0e 00000000`0391e190 000007fe`fede6e1c : 00000000`0391e340 000007fe`fede78d7 00000000`0391e4f0 00000000`0023e760 : RPCRT4!NdrPointerUnmarshall+0x2f
    0f 00000000`0391e1d0 000007fe`fede68e3 : 00000000`00000020 000007fe`faac1342 00000000`0391e618 000007fe`faac1af0 : RPCRT4!NdrStubCall2+0x73c
    10 00000000`0391e240 000007fe`fede7967 : 00000000`0391e9b0 000007fe`fb63a250 00000000`0391e9b0 000007fe`fb63a250 : RPCRT4!NdrStubCall2+0x203
    11 00000000`0391e860 000007fe`ff660883 : 00000000`00000000 00000000`00000000 00000000`0391ec60 00000000`03715ff0 : RPCRT4!I_RpcGetBuffer+0xc7
    12 00000000`0391e8c0 000007fe`ff660ccd : 00000000`00000000 00000000`00000000 000007fe`fb63a201 00000000`00000000 : ole32!CStdStubBuffer_Invoke+0x5b [d:w7rtmcomrpcndrolestub.cxx @ 1586] 
    13 00000000`0391e8f0 000007fe`ff660c43 : 00000000`0023e760 00000000`0378a994 00000000`036ce6a0 000007fe`ec046040 : ole32!SyncStubInvoke+0x5d [d:w7rtmcomole32comdcomremchannelb.cxx @ 1187] 
    14 00000000`0391e960 000007fe`ff51a4f0 : 00000000`0023e760 00000000`037daf90 00000000`0023e760 00000000`0391ecd0 : ole32!StubInvoke+0xdb [d:w7rtmcomole32comdcomremchannelb.cxx @ 1396] 
    15 00000000`0391ea10 000007fe`ff6614d6 : 00000000`00000000 00000018`00000010 00000000`037958a0 00000000`03715ff0 : ole32!CCtxComChnl::ContextInvoke+0x190 [d:w7rtmcomole32comdcomremctxchnl.cxx @ 1262] 
    16 00000000`0391eba0 000007fe`ff66122b : 00000000`d0908070 00000000`037daf90 00000000`01d93e30 00000000`03769be0 : ole32!AppInvoke+0xc2 [d:w7rtmcomole32comdcomremchannelb.cxx @ 1086] 
    17 00000000`0391ec10 000007fe`ff65fd6d : 00000000`037daf90 00000000`037daf90 00000000`03715ff0 00000000`00070005 : ole32!ComInvokeWithLockAndIPID+0x52b [d:w7rtmcomole32comdcomremchannelb.cxx @ 1727] 
    18 00000000`0391eda0 000007fe`fede50f4 : 000007fe`ff6c9930 00000000`00000000 00000000`037241b0 000007fe`fedde8f7 : ole32!ThreadInvoke+0x30d [d:w7rtmcomole32comdcomremchannelb.cxx @ 4751] 
    19 00000000`0391ee40 000007fe`fede4f56 : 000007fe`ff670ab0 00000000`00000001 00000000`0391f0b0 000007fe`ff4f8ffc : RPCRT4!NdrServerCall2+0x1d84
    1a 00000000`0391ee70 000007fe`fede775b : 00000000`0378a970 00000000`00000000 00000000`0391f194 00000000`0378a970 : RPCRT4!NdrServerCall2+0x1be6
    1b 00000000`0391ef90 000007fe`fede769b : 00000000`00000000 00000000`0391f0b0 00000000`0391f0b0 00000000`037241b0 : RPCRT4!I_RpcBindingInqTransportType+0x32b
    1c 00000000`0391efd0 000007fe`fede7632 : 00000000`0378a970 00000000`0378a970 00000000`0378a970 000007fe`fede6140 : RPCRT4!I_RpcBindingInqTransportType+0x26b
    1d 00000000`0391f050 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : RPCRT4!I_RpcBindingInqTransportType+0x202
    //第二次加载的就是嵌套的TypeLib对应Script Moniker的script:xxx.sct脚本文件
    1: kd> g
    Breakpoint 3 hit
    OLEAUT32!LoadTypeLibEx:
    0033:000007fe`feb6a550 fff3            push    rbx
    1: kd> dc @rcx L50
    00000000`02c8dd70  00630073 00690072 00740070 0043003a  s.c.r.i.p.t.:.C.
    00000000`02c8dd80  005c003a 006c0064 0074005c 00730065  :..d.l..t.e.s.
    00000000`02c8dd90  005c0074 006b006f 0072005c 006e0075  t..o.k..r.u.n.
    00000000`02c8dda0  0073002e 00740063 01e50000 00000000  ..s.c.t.........
    00000000`02c8ddb0  037efc30 00000000 feb6733c 000007fe  0.~.....CreateStub建立一个接口存根对象.相应的在Com组件的客户端套间上都维护着代理(proxy)对象列表,在对OBJREF进行Unmarshal时搜索匹配存根对象的[oxid,oid,ipid]调用IPSFactoryBuffer->CreateProxy创建对应代理,通过接口IDL文件中定义函数申明构建出物理栈,然后再通过RPCRT4.dll中实现IRpcChannel通道调用真实的接口函数与存根进行通信,从而实现Com远程过程(RPC)调用.
代理的创建IPSFactoryBuffer->CreateProxy默认被封装成CreateProxyFromTypeInfo函数实现,这个函数的调用过程和TypeLib中的TypeInfo的相关,原因是其中TypeInfo在TypeLib中定义了接口的相关类型信息.因此这个过程中实际上必定需要调用LoadTypeLib函数来加载TypeLib和其中的TypeInfo,这也是触发漏洞最关键的一点.通过逆向分析LoadTypeLib函数调用过程,发现其具体是通过操作注册表实现.对于每个接口信息位于注册表HKEY_CLASSES_ROOTInterface[接口IID],其中子键TypeLib对应接口的TypeLib_GUID,接下来对应的TypeLib位于HKEY_CLASSES_ROOTTypeLib[TypeLib_GUID],其中对应版本的子键值就是TypeLib路径.由于一个接口可能存在多个对应版本的TypeLib子键,而反序列化时默认只加载其中一个.笔者通过逆向还原oleaut32.dll中的实现,在漏洞利用工具中实现自动匹配对应TypeLib文件并利用,具体逆向结果如下:
    wchar_t *__stdcall GetTypeInfoOfIIDFwd(GUID *rguid, struct ITypeInfo **a2, int a3)
    {
      wchar_t *result; // eax
      unsigned __int16 versionLookUp; // bx
      unsigned __int16 versionLookUpNext; // ax
      DWORD v6; // ebx
      LSTATUS i; // eax
      HRESULT v8; // eax
      wchar_t *v9; // ebx
      HRESULT v10; // eax
      int foundDotted; // [esp+8h] [ebp-31Ch]
      GUID *v12; // [esp+Ch] [ebp-318h]
      struct ITypeInfo **v13; // [esp+10h] [ebp-314h]
      struct ITypeInfo *v14; // [esp+14h] [ebp-310h]
      wchar_t *EndPtr; // [esp+18h] [ebp-30Ch]
      LONG cbData; // [esp+1Ch] [ebp-308h]
      ITypeLib *pptlib; // [esp+20h] [ebp-304h]
      unsigned __int16 SubVersion[2]; // [esp+24h] [ebp-300h]
      DWORD dwIndex; // [esp+28h] [ebp-2FCh]
      unsigned __int16 Version[2]; // [esp+2Ch] [ebp-2F8h]
      HKEY v21; // [esp+30h] [ebp-2F4h]
      HKEY v22; // [esp+34h] [ebp-2F0h]
      HKEY phkResult; // [esp+38h] [ebp-2ECh]
      HKEY hKey; // [esp+3Ch] [ebp-2E8h]
      CLSID pclsid; // [esp+40h] [ebp-2E4h]
      WCHAR Data; // [esp+50h] [ebp-2D4h]
      wchar_t Dst; // [esp+258h] [ebp-CCh]
      unsigned __int16 tempData; // [esp+268h] [ebp-BCh]
      OLECHAR sz; // [esp+26Ch] [ebp-B8h]
      wchar_t SubKey; // [esp+2E8h] [ebp-3Ch]
      WCHAR Name; // [esp+304h] [ebp-20h]
      v12 = rguid;
      v13 = a2;
      if ( a3 >= 16 )
        return (wchar_t *)-2147319779;
      result = (wchar_t *)MapIIDToFusionTypeInfo(rguid, a2);
      if ( (signed int)result = 0 )
        {
        //打开ClassesRoot根节点
          if ( OpenClassesRootKeyW(&Dst, &hKey) )
          {
            result = (wchar_t *)-2147319779;
          }
          else
          {
            SubKey = 0;
            //查找子健,枚举版本号
            for ( dwIndex = 0; !RegEnumKeyW(hKey, dwIndex, &Name, 0xDu); ++dwIndex )
            {
              versionLookUp = _wcstoul(&Name, &EndPtr, 16);
              if ( *EndPtr == '.' )
              {
                if ( (versionLookUpNext = _wcstoul(EndPtr + 1, 0, 16), !foundDotted) && versionLookUp > Version[0]
                  || versionLookUp == Version[0] && versionLookUpNext >= SubVersion[0] )
                {
                  *(_DWORD *)SubVersion = versionLookUpNext;