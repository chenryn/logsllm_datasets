title:Building better passwords using probabilistic techniques
author:Shiva Houshmand and
Sudhir Aggarwal
Building Better Passwords using Probabilistic Techniques 
Shiva Houshmand 
Florida State University 
Department of Computer Science 
Tallahassee, FL 32306-4530 
1 (850) 645-7339 
PI:EMAIL
Sudhir Aggarwal 
Florida State University 
Department of Computer Science 
Tallahassee, FL 32306-4530 
1 (850) 644-0164 
PI:EMAIL 
and 
system 
cracking 
to  model  a 
ABSTRACT 
Password  creation policies  attempt  to  help  users  generate  strong 
passwords  but  are  generally  not  very  effective  and  tend  to 
frustrate  users.  The  most  popular  policies  are  rule  based  which 
have  been  shown  to  have  clear  limitations.  In  this  paper  we 
consider a new approach that we term analyze-modify that ensures 
strong  user  passwords  while  maintaining  usability.  In  our 
approach  we  develop  a  software  system  called  AMP  that  first 
analyzes whether a user proposed password is weak or strong by 
estimating  the  probability  of  the  password  being  cracked. AMP 
then modifies the password slightly (to maintain usability) if it is 
weak to create a strengthened password. We are able to estimate 
the  strength  of  the  password  appropriately  since  we  use  a 
associated 
probabilistic  password 
probabilistic  context-free  grammar 
realistic 
distribution of user passwords. In our experiments we were able to 
distinguish strong passwords from weak ones with an error rate of 
1.43%.  In  one  of  a  series  of  experiments,  our  analyze-modify 
system was able to strengthen a set of weak passwords, of which 
53% could be easily cracked to a set of strong passwords of which 
only  0.27%  could  be  cracked  with  only  a  slight  modification  to 
the  passwords.  In  our  work,  we  also  show  how  to  compute  and 
use  various  entropy  measures  from  the  grammar  and  show  that 
our  system  remains  effective  with  continued  use  through  a 
dynamic updating capability. 
Categories and Subject Descriptors 
K.6.5 [Management of Computing and Information Systems]: 
Security and Protection – authentication; K.4.4 [Computers and 
Society]: Electronic Commerce—security 
General Terms 
Security, Design, Experimentation, Human Factors 
Keywords 
Password  checking,  Password  creation  policies,  Information 
security, Strong authentication 
1.  INTRODUCTION 
Internet  based  systems  such  as  online  banking  and  online 
commerce  continue 
for 
authentication security. Human  memorable passwords are thus a 
key element in the security of such systems. However, most users 
do not have the information to ensure that they are in fact using a 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies bear  this  notice  and the  full citation  on  the  first  page.  To  copy 
otherwise,  to  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA  
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00. 
rely  heavily  on  passwords 
to 
“strong” password rather than one that can easily be broken. This 
limitation has led to the use and advocacy of password creation 
policies  that  purport  to  help  the  user  in  ensuring  that  the  user 
chosen  password  is  not  easily  breakable.  The  most  prevalent 
password  creation  policy  is  the  rule-based  approach  wherein 
users are given rules such as minimum length of eight characters 
and must contain an upper case letter and a special symbol. It has 
been shown by several authors that this approach by itself is not 
very effective [1, 2].  A second type of password creation policy 
can be termed the random approach where an effectively random 
string  is  given  by  a  system  to  the  user.  Clearly  the  random 
approach has the problem that the given string is in general non-
memorable so the purpose of having a password that can easily be 
remembered is defeated. 
We  advocate  a  third  approach  which  is  to  have  a  system  that 
analyzes  a  user  proposed  password  and  then  modifies  it  if  it  is 
weak  to  make  it  strong,  yet  preserves  enough  of  the  original 
password so that the new password is still memorable. We do this 
by changing the original password by only an edit distance of one. 
We term this approach analyze-modify. It can be viewed as having 
a reject function that rejects a weak password and then a modify 
function that changes that weak password somewhat to one which 
is appropriately strong. 
We  show  that  empirical  analysis  based  on  trying  to  crack 
passwords  using  probabilistic  techniques  [3]  can  be  adapted  to 
analyzing the strength of passwords. We show how the associated 
probabilistic context-free grammar can be used to build a realistic 
reject  function  that  can  distinguish  between  strong  and  weak 
passwords  based  on  a 
threshold  probability.  An  obvious 
component of an empirical analysis might be to have a dictionary 
of popular passwords and ensure that the modified password is not 
one of these. But a more important consideration is to show that 
the  modified  password  is  not  likely  to  be  cracked  using  any 
technique  as  we  are  able  to  do.  The  black-listing  approach  is 
automatically subsumed by our approach simply by the choice of 
dictionaries. Note that we are interested in protecting against off-
line  attacks  where  an  attacker  has  obtained  a  set  of  hashes  (and 
likely  user  names)  and  desires  to  break  as  many  passwords  as 
possible in a reasonable amount of time.  
We  illustrate  the  effectiveness  of  our  prototype  system,  called 
Analyzer and Modifier for Passwords (AMP), through a series of 
experiments on three lists of disclosed passwords. AMP was able 
to  modify  weak  passwords  and  strengthen  them  to  strong 
passwords that were within an edit distance of one from the user 
passwords.  Using  the popular  password  cracker  John  the  Ripper 
[4],  AMP-designated  weak  passwords  were  broken  at  levels  of 
48%,  39%  and  53%  respectively  from  the  three  lists.  The 
strengthened passwords could only be broken at levels of 0.10%, 
0.51%  and  0.27%  respectively  from  the  three  lists.  We  further 
develop  a  dynamic  update  system  for  AMP  that  continually 
changes how it proposes the modified passwords. We show that 
109
continual  use  of  our  system  will  continue  to  generate  strong 
passwords,  even  if  attackers  are  aware  of  the  probabilistic 
distribution of passwords. We discuss the use of various entropy 
measures that help to substantiate this claim. 
In  section  2  we  discuss  previous  approaches  to  the  problem  of 
ensuring  that  users  have  strong  and  memorable  passwords, 
classical  entropy  measures  and 
the  probabilistic  password 
cracking system we use. In section 3 we develop our approach for 
analyzing the strength of passwords and in section 4 we discuss 
our password modification component. In section 5 we discuss the 
update system of AMP. In section 6 we illustrate the effectiveness 
of  our  system  using  attacks  by  two  different  password  cracking 
systems on real user passwords collected from a variety of sites. 
We briefly discuss some future work and conclusions in section 7. 
2.  BACKGROUND & PREVIOUS WORK  
2.1  Previous Work on Password Checking  
Although  not  really  an  analysis  of  password  strength,  many 
studies attempt to determine various aspects of how users choose 
passwords.  Riley  [5]  reports  that  in  a  study  of  315  participants, 
about 75% of them reported that they have a set of predetermined 
passwords that they use frequently. Almost 60% reported that they 
don’t change the complexity of their password depending on the 
nature  of  the  website  they  use.  Stone-Gross  et  al.  [6]  collected 
around  298  thousands  passwords  from  the  Torpig  botnet.  They 
found that almost 28% of users reused their passwords and they 
managed  to  crack  over  40%  of  the  passwords  in  less  than  75 
minutes.  This  illustrates  that  having  strong  passwords  for  less 
important websites such as social networking websites is likely to 
be as necessary as for websites such as online banking. 
Most organizations and websites follow a rule-based approach in 
recommending or enforcing password policies. A study by Shay et 
al.  [7]  showed  that  users  were  not  happy  about  changing  the 
password  creation  policy  to  a  stricter  one  and  that  it  took  on 
average  1.77  tries  to  create  a  new  password  accepted  by  the 
system  based  on  a  new  password  creation  policy  recently 
instituted.  Riley  [5]  also  reports  that  the  average  length  of  time 
users  maintained  their  primary  password  was  reported  as  31 
months and 52% of them never change their password at all.  
Rule-based advice is confusing as there is no consistency across 
systems  and  websites  in  the  requirements,  with  differing  advice 
about  length,  number  of  symbols  and  digits,  and  even  in  the 
symbols that can be used. In [8] it is shown that inconsistent and 
even contradictory recommendations make such advice unreliable 
for  users.  The  U.S.  NIST  guideline  [9],  the  basis  for  most  rule-
based  policies,  proposed  a  rule-based  approach  that  used  the 
notion of Shannon entropy for estimating password strength based 
on suggested values of the components of the password. However, 
Weir  et  al.  [1]  performed  password  cracking  attacks  against 
multiple  sets  of  real  life  passwords  and  showed  that  the  use  of 
Shannon entropy as defined in NIST is not an effective metric for 
gauging password strength and it does not give a sufficient model 
to decide on the strength of a given password.  
Password  expiration  policies  are  designed  to  ensure  stronger 
passwords over time. However, Zhang et al. [10] showed that an 
attacker  can  easily  get  access  to  an  account  by  capturing  the 
account’s previous passwords. They suggest that at least 41% of 
passwords  can  be  broken  offline  from  a  previous  password  in  a 
matter of seconds and only five online password guesses suffices 
to break 17% of accounts. A more recent study [11] reports that 
although  nowadays  users  understand  the  importance  of  secure 
behavior,  they  still  find  it  too  difficult  to  cope  with  password 
creation  policies,  and  they  rarely  change  their  passwords  due  to 
the  frustration  of  creating  a  new  password  along  with  the 
difficulty of memorizing it. In studies by Charoen et al. [12] and 
Adams  and  Sasse  [13],  it  was  found  that  users  are  not  even 
unanimous  about  the necessity  of  having  a  strong  password and 
the  reason  users  choose  insecure  passwords  is  because  they 
usually do not know how to create secure ones. Studies [14] show 
that even restrictive password creation policies do not have impact 
on  the  use  of  meaningful  information  in  passwords,  nor  does  it 
reduces  reusing  the  password.  Reuse  can  subject  users  to  other 
types of attacks such as phishing, key-logging and targeted attacks 
[15]. A study by Shay et al. [16] shows that the more restrictive 
and complicated the policy, the less user-friendly it is. 
There  have  been  some  studies  [17,  18]  exploring  the  use  of  the 
random password generation approach. The major problem is the 
usability of the password for the user since such a password has 
typically  no  context  for  the  user  and  is  naturally  hard  to 
remember.  Forget  et  al.  [19]  studied  the  memorability  of 
passwords  by  randomly  inserting  or  replacing  fixed  number  of 
characters in a user chosen password. They showed that once the 
users confirmed their changed passwords, they  could recall it as 
easily as the control group (passwords without change). However, 
they did not develop a methodology for analyzing the strength of 
these passwords. 
Generating  secure  passwords  is  a  tradeoff  between  creating  a 
password  that  is  hard  to  crack  and  usable.  Some  studies  of 
passwords [15, 18] try to provide an understanding of how various 
policy  factors  make  creating  passwords  easier,  memorable,  and 
usable, but none of them seem to have been applied in practice.  
The  work  by  Verheul  [2]  is  an  excellent  example  of  trying  to 
understand the relationship of various entropy measures in order 
to  build  better  passwords.  Verheul  showed  how  to  build 
reasonable  short  secure  passwords  based  on  calculating  the 
Shannon  entropy  with  assumptions  on  the  min  entropy  and 
guessing entropy. However, there was no attempt in this paper to 
consider the usability or memorability of the passwords or how to 
modify a user suggested password.  
 The analyze-modify approach also has some related history. The 
analysis  is  usually  a  simple  way  to  determine  if  a  password  is 
weak  such  as  checking  against  a  dictionary.  Note  that  in  reality 
this is not really a sufficient condition for a password to be strong. 
Current  proactive  password  checkers  generally  follow  such  a 
black-listing  approach.  See  for  example  Yan  [20]  and  Spafford 
[21].  However,  simple  black-listing  approaches  generally  have 
problems with any sophisticated dictionary based attack. 
Perhaps  the  most  relevant  study  related  to  our  approach  is 
Schechter et al. [22] in a study on popularity of passwords.  They 
propose  to  build  an  oracle  for  existing  passwords  that  are 
available  to  the  Internet-scale  authentication  systems.  They 
recommend  that  such  popular  passwords  be  disallowed  and  the 
main thrust of their work is to devise a way to efficiently store the 
large number of popular passwords that would be prohibited. An 
open question posed in their study is how to use the oracle without 
revealing the actual password to attackers while querying online. 
We show that our technique gets around this problem as well as 
their storage problem.  More recently [23] explores measuring the 
strength of passwords using a Markov approach. 
Our approach was  first hinted at in Weir et al. [1] where it was 
suggested  that  a  probabilistic  password  attack  system  could  be 
110
used to determine if a proposed password was weak and should be 
rejected. We show in this paper how such a probabilistic cracking 
system can in fact be used for analyzing passwords. Once such an 