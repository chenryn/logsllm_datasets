漏洞原理：当开启了分片上传功能时，fastadmin 会根据传入的 chunkid  ，结合硬编码后缀来命名和
保存文件，攻击者可预测文件上传路径；此后攻击者提交 "分片合并" 请求时，fastadmin 将会根据传入
的 chunkid  ，去除了上一步操作中文件名的硬编码后保存新文件，导致任意文件上传。
前期准备
1. 该接口至少需要普通用户权限，我们可以先在前台注册一个用户然后登录
2. 需要修改默认配置 才能使用分片上传功能。设置 application/extra/upload.php  下的 
chunking  项为 true
3. 可使用 application/index/controller/Ajax  下的 upload()  方法作为入口点。根据 tp5 的路
由，访问该入口点的 url 为 index.php?s=index/ajax/upload
漏洞分析
该漏洞位于 application/api/controller/Common.php  下的 upload()  方法中。
上传分片
根据下文的代码得知，我们需要POST传入以下参数才能调用到上传分片文件处（第25行）：
1. chunkid
2. chunkindex
3. chunkcount
4. file
public function upload()
{
    $chunkid = $this->request->post("chunkid");
    //分片上传
    if ($chunkid) {
        //需要配置 upload.chunking 为 true 才能使用分片上传功能
        if (!Config::get('upload.chunking')) {
            $this->error(__('Chunk file disabled'));
        }
        //获取分片上传必要的参数
        $action = $this->request->post("action");
        $chunkindex = $this->request->post("chunkindex/d");
        $chunkcount = $this->request->post("chunkcount/d");
        $filename = $this->request->post("filename");
        $method = $this->request->method(true);
        //合并分片文件
        if ($action == 'merge') {
            ......
            $upload = new Upload();
            //调用合并文件方法
            $attachment = $upload->merge($chunkid, $chunkcount, $filename);
            ......
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
跟进 chunk()  方法，发现：
1. Request 的 Content-Type  必须为 application/octet-stream
2. 命名文件时将 chunkid  和 chunkindex  变量用 "-" 连接，最后硬编码了后缀 .part
3. 最终将文件保存至 /runtime/chunks  下
其中，上面的代码 $chunkid  和 $chunkindex  是我们可控的，上传路径也是确定的。所以我们可以预
测我们上传文件路径。
发送请求：
ps：这里 chunkid  传入的是 xx.php ，这个 .php  在后面有奇效
        }
        //!! 上传分片文件 !!
        else {
            //获取上传文件
            $file = $this->request->file('file');
            try {
                $upload = new Upload($file);
                //调用上传分片文件方法
                $upload->chunk($chunkid, $chunkindex, $chunkcount);
            }
        ......
    }
    ......
23
24
25
26
27
28
29
30
31
32
33
34
35
public function chunk($chunkid, $chunkindex, $chunkcount, $chunkfilesize = 
null, $chunkfilename = null, $direct = false)
{
    //1. 需要修改 Request 的 Content-Type
    if ($this->fileInfo['type'] != 'application/octet-stream') {
        throw new UploadException(__('Uploaded file format is limited'));
    }
    $destDir = RUNTIME_PATH . 'chunks';
    //2. 重命名上传文件
    $fileName = $chunkid . "-" . $chunkindex . '.part';
    $destFile = $destDir . DS . $fileName;
    if (!is_dir($destDir)) {
        @mkdir($destDir, 0755, true);
    }
    //3. 保存文件至 /runtime/chunks/ 下
    if (!move_uploaded_file($this->file->getPathname(), $destFile)) {
        throw new UploadException(__('Chunk file write error'));
    }
    ......
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
生成文件：
合并文件
上传分片文件完毕后，我们来看看和分片文件相关的方法 merge() ，
调用点： application/api/controller/Common.php  下的 upload()  方法（第16行）：
public function upload()
{
    $chunkid = $this->request->post("chunkid");
    //分片上传
    if ($chunkid) {
        //需要配置 upload.chunking 为 true 才能使用分片上传功能
        if (!Config::get('upload.chunking')) {
            $this->error(__('Chunk file disabled'));
        }
        //获取分片上传必要的参数
        $action = $this->request->post("action");
        $chunkindex = $this->request->post("chunkindex/d");
        $chunkcount = $this->request->post("chunkcount/d");
        $filename = $this->request->post("filename");
        $method = $this->request->method(true);
        //!! 合并分片文件 !!
        if ($action == 'merge') {
            ......
            $upload = new Upload();
            //调用合并文件方法
            $attachment = $upload->merge($chunkid, $chunkcount, $filename);
            ......
        }
        //上传分片文件
        else {
            //获取上传文件
            $file = $this->request->file('file');
            try {
                $upload = new Upload($file);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
根据上面的代码可知，我们需要传入以下POST参数：
1. chunkid
2. action
3. chunkcount
跟进 merge()  方法，该方法代码简写如下：
上面代码 $chunkid 、 $chunkcount  是我们可控的。
其中：
                //调用上传分片文件方法
                $upload->chunk($chunkid, $chunkindex, $chunkcount);
            }
        ......
    }
    ......
30
31
32
33
34
35
public function merge($chunkid, $chunkcount, $filename)
{
    //分片整合文件，所有分片的内容都会通过循环，写入这一个文件中
    //该路径是通过 $chunkid 来控制的，$chunkid 是我们可控的值
    $filePath = $this->chunkDir . DS . $chunkid;
    $completed = true;
    //被读取的分片文件路径 必须正确，否则将会被抛出错误
    //被读取的分片文件路径 由 $chunkid 和 $chunkcount 进行控制
    for ($i = 0; $i clean($chunkid);
        throw new UploadException(__('Chunk file info error'));
    }
    $uploadPath = $filePath;
    $destFile = @fopen($uploadPath, "wb");
    //基于我们传入的 $chunkid
    //从0开始拼接字符串，循环读取分片文件，
    for ($i = 0; $i < $chunkcount; $i++) {
        $partFile = "{$filePath}-{$i}.part";
        if (!$handle = @fopen($partFile, "rb")) {
            break;
        }
        while ($buff = fread($handle, filesize($partFile))) {
            //将分片写入。保存的 $destFile 实际上就是 $filePath
            //根据该方法开头的代码， $filePath中字符串末尾 由 $chunkid 控制
            fwrite($destFile, $buff);
        }
        @fclose($handle);
        @unlink($partFile); //删除原始分片
        ....
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
$chunkid  和 $chunkcount  共同控制 被读取的分片文件名
$chunkid  还单独控制着 "整合文件" 的文件名
总结：
在上传分片时，我们最终分片文件名为  xx.php-0.part 。而在合并分片函数 merge()  中，假设我们传
入了 chunkid=xx.php & chunkcount=1 ，则 merge()  函数会读取 xx.php-0.part  的内容，并保存
为 xx.php 。这样，我们便可在 runtime/chunks  下创建一个 .php  文件了。
发送请求：
虽然报错了，但是 php文件还是成功生成了
访问之，成功RCE：