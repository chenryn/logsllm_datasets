## Page 279
第8章开发工具
267
$ make important
coinportant.c,v inportant.c
important.c.v
revision 1.3
->important.c
done
ce
-c important.c -o inportant.o
rm inportant,o inpurtant .c
操作注释：
make有这样一条缺省规则：如果当前子目录里有一个“e”后缓名的文件，在对它进行编
译的时候就不再需要从RCS里解封并取出同名的文件。而第二条缺省规则则允许make通过RCS
系统从important.c，v里创建出important.c来。既然没有名为important.c的文件存在着，就需要
make创建该“.e”文件，而它会用co命令解封并取出其最新版本。在编译完成后，它还会删除
important.c文件，把现场清理干净。
7.ident命令
我们可以通过ident命令找出那个包含着一个“SIdS”字符串的文件版本。因为我们是把字
符串保存到一个变量里去的，所以它也会出现在可执行的结果文件里。有时候，如果我们在程
序里加上了特殊的字符串却又没有在代码里访问过它们，有的编译器就会把它们优化掉。这个
问题一般这样来解决：在代码里增加一些对这些字符串的“假”访问；但随着编译器越来越好，
这种做法也越来越难了！
动手试试：ident命令
S important
7his file is under RCS control. It's ID is
This is an extra line added later
sId:inportant.e.v 1.3 1999/02/11 16:55:04rick Exp $
Sident important
inportant:
$Id: ixportant.c,v 1.3 1999/02/11 16:55:04 r1ck Kxp $
$
操作注释：
通过执行程序，我们看到字符串确实已经结合到可执行代码里去了。接着，我们用ident命
令从可执行文件里提取出了“SIdS”字符串。
RCS系统和出现在可执行文件里的“SIdS”字符串的这种用法可以在用户报告软件出现了问
题时帮助我们确定它是文件的一个版本。我们可以把RCS（或SCCS）系统用做项目调试工具
的组成部分，让它来记录汇报上来的问题和问题的补教措施。如果读者做的是软件销售工作，
或者哪怕是赠送软件，了解不同版本之间的改动情况也是很重要的。
如果读者还想进一步了解这方面的资料，那除了标准的RCS章节以外，使用手册中的rcsinfo
章节还给出了更多RCS系统方面的介绍。ci、co等命令也有它们各自的使用手册页。
8.3.2 SCCS系统
SCCS系统所提供的功能与RCS很相似。SCCS系统的优势在于它已经在X/Open技术规范里
加入jaVa编程群：524621833
---
## Page 280
262Limux程序设计
得到了认可，因此，一切正规的UNIX版本都应该支持它，但比较现实的情况是：RCS的可移植
性非常好，并且可以自由发行。因此，如果读者有一个UNIX系列的系统，不管它是否符合
X/Open技术规范，就总是可以设法弄到并为它安装上RCS系统。基于这个原因，我们就不在这
里对SCCS系统做进一步讲解了。我们只把这两个系统各自使用的命令在下表里做一些比较，这
部分内容是为部些打算切换使用这两个系统的人们准备的。
RCS系统和SCCS系统的比较
对两个系统各自使用的命令提供比较是困难的，所以下面那个表格只能做为一个快速指南
性质的东西。这里列出的命令在完成同一项工作时并不-定会采用同样的选项。如果读者不得
不使用SCCS系统，就必须自已去核对正确的选项是哪些，但至少你现在知道应该从哪里开始去
查找了（见表8-2）
麦8-2
RCS系统
SCCS系统
rcs
admi.n
ci
deita
co
get
rcsdiff
sccsdiff
ident
what
除上面列出的那些命令以外，SCCS系统中的sccs命令与RCS系统中的rcs和co命令还有一些
8.3.3CVS系统
用RCS系统来管理文件中的改动情况固然不错，但CVS（Concurrent VersionsSystem，共发
版本系统）系统也完全能够胜任这一工作。与RCS系统相比.CVS系统有一个明显的优点，也
许正是这个原因使它变得越来越流行：人们能够在因特网上使用CVS，不象RCS那样只能用在
本地的共享子目录里。CCVS还支持并行开发技术，即多名程序员能够同时用同一个文件开展工
作，而RCS任一时间只允许一个用户使用一个文件进行工作。CVS系统的命令与RCS系统的很相
似，因为CVS最初就是做为RCS的一个操作前端面开发出来的。
CVS能够以灵活的方式跨网络运作，如果软件开发人员之间的网络联系只能通过因特网的
话，它就是当之无愧的候选。许多Linux和GNU项目利用CVS来帮助程序员协调他们各自的工作
进度。在正常情况下，通过CVS对远端文件进行操作与用它处理本地文件并没有太大的区别。
在这一章里，我们将简单地介绍一下CVS系统的基本原理，希望大家在两方面有所收获：
一是能够开始对本地文件进行开发管理；二是当CVS服务器位于因特网上的时候，知道这样才
能获得项目最新源文件的拷贝。详细资料请参考CVS的使用手册，该手册由PerCederqvist撰写，
版权属于SignumSupportAB公司，但它却是在GNU一般公众许可证条款的约定下发行的，在许
多Web站点上都可以找到，在那些站点上还可以找到FAQ（常见问题答疑）文件和各种其他的帮
助文件。
加入jaVa编程群：524621833
---
## Page 281
第8章开发工具
CVS系统使用入门
我们首先要创建一个文件库，CVS系统把它的控制文件和被管理文件的主拷贝保存在这个
文件库里。文件库的结构呈树状，所以用户不仅能够把一个项目的子目录结构整个保存在一
个文件库里，还可以在同一个文件库里保存许多个项目，用彼此独立的文件库来保存被此没
有联系的项目当然也是可以的。我们将在下面看到如何告诉CVS系统我们打算使用的文件库
是哪一个。
（1)CVS的本地使用方法
我们从创建-一个文件库开始人于。为了使于讲解，我们使用了一个本地的文件库；又因为
我们将只使用这一个文件库，所以我们把它放在/usr/local子目录下。在大多数Linux发行版本上，
一切普通用户都是users分组的成员，所以我们把文件库的分组情况也设置为users，这样所有用
户就都能够访问它了。
以超级用户身份执行下面的操作，为文件库建立一个子日录：
mkdir/usr/1ocal/repository
 chgrp users /usr/local/repository
恢复为普通用户的身份，把它初始化为一个CVS文件库。执行这一操作需要用户有子目录
/usr/locai/repository的写权限。如下所示：
$ cvs -d /usr/local/repository init
"-d”选项告诉CVS我们想在哪儿建立这个文件库：
文件库建立好以后，我们就可以把项目的初始版本保存到CVS系统里去了。在做这项工作
的时候有个小技巧可以让我们少打一些字。cvs命令在查找CVS子目录的时候可以使用两个办法：
（）>
选项，它就会去查看环境变量CVSROOT。我们不想反复输人“-d”选项，所以我们采用后个
办法：对CVSROOT环境变量进行设置。如果读者使用的shell是bash，这条命令就该是如下所示
的样子：
$ export Cvs8ooT = /usr/local/regository
先把路径切换到软件项目所在的子目录，然后让cvs把所有文件都导人到这个子目录里来。
$ l cvs ·sp
$ cvs inport -n*Initial version of Sinple Pioject* wrox/chape-cvs wrox start
这两条命令告诉CVS要导人当前子目录里的所有文件，同时还给它加上了一条记录消息。
选项“wrox/chap8-cvs”的作用是告诉CVS需要把这个新项目保存到里去，这是一个相对
于CVS树根的路径。别忘了只要我们愿意，就可以让CVS在一个文件库里保存多个项目。选项
“wrox”的作用类似于厂家的名牌，它标识着被导入文件的初始版本是由谁提供的；选项“start”
的作用是充当发行号标签。发行号标签可以用来以组为单位标识多个文件—比如构成一个软件
某个特定发行版的那些文件。CVS响应出以下内容：
N wrox/chap8~evs/Makefi1e
N wrox/chap8-cvs/he11o.c
No conflicte created by this isport
加入jaVa编程群：524621833
---
## Page 282
264
Linux程序设计
告诉我们它正确地导人了两个文件。
现在来看看我们能否从CVS系统里检索出我们的文件。先建立一个名为“junk”的子目录，
然后解封并取出我们的文件，看看是否一切顺利。
5mkdir junk
$cvs checkout wrox/chap8-cvs
$ cd junk
我们提供给CVS的路径名与我们封存文件时使用的一样。CVS在当前子目录里创建了一个
wrox/chap8-cvs子目录，并把文件放到了里面。
现在可以对我们的项目做一些改动了。让我们在hello.c文件里做点儿小修改。我们在文件里
添上下面这一行：
printf (*Have a nice day\n*1:
重新编译并运行程序以保证一切顺利。
我们可以查问CVS项目里出现了些改动。不必告诉CVS我们想对哪个文件进行检查，它
能够一次完成对整个子目录的检查。
$ cvs diff
CVS响应出以下内容：
cvs diff:Diffing
Index: hello.c
RCs file:/usr/1ocal/repository/wrcx/chap8-cvs/he11o.c.v
diff -r1.i.1.1 hello.c
retrieving revision 1.1.1.1
6c6
printf(*Have a nice day\n*):
我们对自己所做的改动很满意，决定把它提交给CVS。
当我们把改动提交给CVS系统的时候，它会启动一个编辑器让我们输人一个记录消息。在
执行commit命令之前，我们可以把环境变量CVSEDITOR强制性地设置为自已准备使用的编
辑器。
S cvs commit
CVS的响应将告诉我们它正在检查什么东西：
/ust/local/repository/wrox/chap8-cvs/hello.c.v<-hello.c
Checking in hello.c;
newrevision: 1.2;previous revision: 1.1
done
把新改动封存起来之后，我们就能向CVS系统查问该项目已经出现了些改动。我们查问
的是项目wrox/chap8-cvs自修订版1.1（即初始版本）以来的所有改动。
$ cvs rdiff -r1.1 wrox/chap8-cvs
CVS给出如下所示的详细报告：
cvs rdiff: Diffing wrox/chap8-cvs
加入jaVa编程群：524621833
---
## Page 283
第8章开发工具
265
Index: wrox/chap8-cvs/he11o.c
daff -c wrox/chap8-cvs/he1lo,c:1.1 wrox/chapa-cvs 'hello,c:1 .2
**wrox/chap8-cve/helle.c:1.1Tue Aug
***3.7 ***.
main(int argc, char* argv[]) (
printf(*Hello World\n");
printf(*Have a nice day\n*);
}
假设用户在CVS系统以外的一个本地子目录里还有一份代码的拷贝，其中有些文件虽然用
户本人没有编辑，但已经被其他人通过CVS修改过了。现在用户想刷新这个本地子目录里的文
件。CVS系统的update命令能够替用户完成这一工作，移动到项目路径的上一级，在本例中就是
包含着wrox的那个子目录，然后执行下面的命令：
S cvs update -Pd wrox/chape-cvs
CVS将开始刷新有关的文件：它把其他人通过CVS系统修改过的文件从文件库里提取出来，
再放到用户的本地子目录里去。其他人做的修改当然有可能与你做的修改“撞车”，但这个问题
要靠你白已去解决。CVS是好东西，可它并不会变魔术呀！
讲到这里，大家应该看出CVS的用法和RCS的用法其实是很接近的。但它们两者之间有一个
我们尚未论及的重要区别，CVS具备跨网络操作的能力、并且不需要事先对文件系统进行挂装
(2)CVS的网络使用方法
我们前面已经介绍过，在向CVS系统提供文件库的存放地点时既可以使用命令行上的“-d”
选项，也可以对环境变量CVSROOT进行设置。如果想跨网络操作，就需要使用这个参数更高级
的语法。给大家举个例子，在编写GNOME（英文“GNUNetworkObjectModelEnviroment”的
字头缩写，意思是GNU网络对象模型环境，它是-个比较流行的开放源代码图形化桌面系统）
的时候，其开发源代码就能用CVS系统在因特网上查到。只要在CVS文件库的路径名前添上正
确的网络信息，CVS系统就能找到正确的CVS文件库，需要用户做的事情只是多敲几个字符那
么简单。
接着刚才的GNOME例子往下说，如果读者把自已机器中的环境变量CVSROOT设置为
"pserver:PI:EMAIL:/cvs/gnoms"，就可以把自己机器上的CVS系统指向
GNOME源代码的CVS文件库。这个设置告诉CVS系统：该文件库要求对口令字进行核查
（pserver），它位于服务器anoncvs.gnome.org上。
在访问源代码之前，我们必须先进行登录，如下所示：
S cvs login
在提示输人口令字的时候直接按下回车键。
现在就可以使用各种cvs命令了，命令的用法和我们对本地文件库进行操作时的情况差不多，
的带宽。
假设我们想取回ORBit的源代码，相应的命令是：
加入java编程群：524621833
---
## Page 284
266Linux程序设计
$cvcz3checkouORB1t
如果我们想把自己的文件库设置为也能通过网络来访问的情况，就必须在我们自已的机器
上启动一个CVS服务器。启动服务器的工作可以通过inetd命令来完成，我们只需在
/etc/inetd.conf文件里加上如下所示的一行语句，再重新启动inetd就行了。这条语句是：
2401 stream tcp nowait root /usr/bincvs cvs -b usr/bin --allow-root =
/usr/lLocal/repositorypserver
它的作用是指令inetd为连接到2401号端口的客户白动启动一个CVS任务、这个端门是CVS
服务器的标准端口，通过inetd启动网络服务的详细资料请参考inetd和inetd.conf的使用于册页，
这--小节简短的篇幅使我们只能肤浅地涉及到CVS系统强大功能的一点皮毛。如果读者真
的需要使用CVS系统，我们强烈建议你先设置一个本地文件库多加实践，读懂CVS系统庞杂的
文档，并预祝你成功！记住，CVS的源代码是开放的，所以当你实在摘不懂代码的作用和目的，
或者（虽然不太可能，但确实有可能！）认为自已发现了一只“臭虫”（程序缺陷或漏洞）的时
候，你总是可以弄到并亲自分析其源代码的
为自己没有Linux机器的人们提供了一个Java客户版本，这使它的可移植性更加广泛了。
8.4编写使用手册
在编写一个新命令的时候，必须把为它编写使用手册页的工作当做整个开发过程的任务之
一。大家可能都已经注意到了，大部分的使用于册页其排版格式都很相似，它们基本上都是由
以下几部分组成的：
·Header（标题）。
·Name（名称）。
·Synopsis（语法格式）。
·Description（说明）。
·Options（选项）。
·Files（有关文件）。
·See also（其他参考）。
·“Bugs"（已知程序漏洞）。
无关部分可以不出现在使用手册里。Linux程序的使用手册里还经常会多出一个“Author
（作者）部分。