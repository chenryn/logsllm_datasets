## Page 279
### 第8章 开发工具

#### 267
```sh
$ make important
Updating coinportant.c,v
inportant.c.v
revision 1.3
done
cc -c important.c -o inportant.o
rm inportant.o important.c
```

**操作注释：**
`make` 工具有一条默认规则：如果当前子目录中存在一个扩展名为 `.e` 的文件，在编译时就不再需要从 RCS 中解封并取出同名文件。第二条默认规则允许 `make` 通过 RCS 系统从 `important.c,v` 创建出 `important.c`。由于没有名为 `important.c` 的文件存在，`make` 将创建该 `.e` 文件，并使用 `co` 命令解封并取出其最新版本。编译完成后，它还会删除 `important.c` 文件以清理现场。

#### 7. ident 命令
我们可以通过 `ident` 命令找出包含特定字符串（如 `$Id$`）的文件版本。这些字符串通常存储在变量中，因此也会出现在可执行文件中。有时，如果程序中添加了特殊字符串但未被实际访问，某些编译器可能会优化掉这些字符串。解决这个问题的一种方法是在代码中增加对这些字符串的“假”访问；然而，随着编译器的不断改进，这种方法变得越来越困难。

**动手试试：ident 命令**
```sh
$ cat important.c
This file is under RCS control. It's ID is
This is an extra line added later
$Id: inportant.c,v 1.3 1999/02/11 16:55:04 rick Exp $
$ ident important
inportant:
$Id: ixportant.c,v 1.3 1999/02/11 16:55:04 r1ck Kxp $
$
```

**操作注释：**
通过执行程序，我们看到字符串确实已经结合到可执行代码中。接着，我们用 `ident` 命令从可执行文件中提取出了 `$Id$` 字符串。RCS 系统和出现在可执行文件中的 `$Id$` 字符串可以帮助我们在用户报告软件问题时确定文件的具体版本。RCS 或 SCCS 系统可以作为项目调试工具的一部分，记录报告的问题和修复措施。对于从事软件销售或分发的人来说，了解不同版本之间的改动情况非常重要。

如果读者想进一步了解这方面的资料，除了标准的 RCS 章节外，手册中的 `rcsinfo` 章节还提供了更多关于 RCS 系统的信息。`ci` 和 `co` 等命令也有各自的使用手册页。

#### 8.3.2 SCCS 系统
SCCS 系统提供的功能与 RCS 非常相似。SCCS 的优势在于它已经在 X/Open 技术规范中得到了认可，因此所有正规的 UNIX 版本都应该支持它。然而，RCS 具有更好的可移植性并且可以自由发行。因此，如果你有一个 UNIX 系统，无论它是否符合 X/Open 规范，都可以设法安装 RCS 系统。基于这个原因，我们不会在这里详细介绍 SCCS 系统。我们将仅比较两个系统各自使用的命令，以帮助那些打算切换使用这两个系统的用户（见表 8-2）。

| RCS 系统 | SCCS 系统 |
|----------|-----------|
| rcs      | admin     |
| ci       | delta     |
| co       | get       |
| rcsdiff  | sccsdiff  |
| ident    | what      |

除上述命令外，SCCS 系统中的 `sccs` 命令与 RCS 系统中的 `rcs` 和 `co` 命令也有一些相似之处。

#### 8.3.3 CVS 系统
虽然 RCS 系统可以很好地管理文件中的更改，但 CVS（Concurrent Versions System，并发版本系统）也能胜任这一工作。CVS 相对于 RCS 的主要优点是它可以在互联网上使用，而不仅仅是本地共享子目录。此外，CVS 支持并行开发技术，允许多个程序员同时在同一文件上工作，而 RCS 在任何时间只允许一个用户使用一个文件进行工作。CVS 的命令与 RCS 的非常相似，因为 CVS 最初是作为 RCS 的前端开发的。

CVS 能够灵活地跨网络运作，非常适合网络联系只能通过互联网的情况。许多 Linux 和 GNU 项目使用 CVS 来帮助程序员协调工作进度。在正常情况下，通过 CVS 对远程文件进行操作与处理本地文件没有太大区别。在这一章中，我们将简要介绍 CVS 系统的基本原理，希望读者能够开始对本地文件进行开发管理，并且当 CVS 服务器位于互联网上时，知道如何获取项目的最新源文件副本。详细信息请参考 Per Cederqvist 编写的 CVS 手册，该手册根据 GNU 通用公共许可证条款发布，在许多 Web 站点上都可以找到，这些站点还提供 FAQ 和其他帮助文件。

---

## Page 281
### 第8章 开发工具

#### CVS 系统使用入门
首先，我们需要创建一个文件库，CVS 系统将在此文件库中保存控制文件和被管理文件的主副本。文件库的结构呈树状，因此用户不仅可以将一个项目的整个子目录结构保存在一个文件库中，还可以在同一个文件库中保存多个项目。我们将在下面看到如何告诉 CVS 系统我们打算使用的文件库是哪一个。

##### (1) CVS 的本地使用方法
我们从创建一个文件库开始。为了便于讲解，我们使用了一个本地文件库，并将其放在 `/usr/local` 子目录下。大多数 Linux 发行版中，所有普通用户都是 `users` 组的成员，所以我们把文件库的组设置为 `users`，这样所有用户都可以访问它。

以超级用户身份执行以下操作，为文件库创建一个子目录：
```sh
mkdir /usr/local/repository
chgrp users /usr/local/repository
```
恢复为普通用户的身份，初始化该子目录为 CVS 文件库。执行此操作需要用户具有 `/usr/local/repository` 子目录的写权限：
```sh
$ cvs -d /usr/local/repository init
```
`-d` 选项告诉 CVS 我们想在哪里建立文件库。

文件库建立好后，我们可以将项目的初始版本保存到 CVS 系统中。为了避免反复输入 `-d` 选项，我们可以设置环境变量 `CVSROOT`。例如，如果你使用的是 `bash` shell，可以这样做：
```sh
$ export CVSROOT=/usr/local/repository
```
切换到软件项目所在的子目录，然后让 CVS 导入所有文件：
```sh
$ cd /path/to/project
$ cvs import -m "Initial version of Simple Project" wrox/chap8-cvs start
```
这两条命令告诉 CVS 导入当前子目录中的所有文件，并附带一条记录消息。`wrox/chap8-cvs` 选项告诉 CVS 将新项目保存到相对于 CVS 树根的路径。`wrox` 选项类似于厂商标识，表示导入文件的初始版本由谁提供；`start` 选项充当发行号标签，用于标识一组文件（如某个特定发行版的文件）。CVS 会响应如下内容：
```sh
N wrox/chap8-cvs/Makefile
N wrox/chap8-cvs/hello.c
No conflicts created by this import
```
这表明文件已正确导入。

现在看看我们能否从 CVS 系统中检索文件。先创建一个名为 `junk` 的子目录，然后检出我们的文件，检查一切是否顺利：
```sh
$ mkdir junk
$ cd junk
$ cvs checkout wrox/chap8-cvs
```
我们提供给 CVS 的路径名与我们存档文件时使用的相同。CVS 在当前子目录中创建了一个 `wrox/chap8-cvs` 子目录，并将文件放入其中。

现在可以对项目做一些修改。让我们在 `hello.c` 文件中添加一行：
```c
printf("Have a nice day\n");
```
重新编译并运行程序以确保一切顺利。

我们可以查询 CVS 项目中的更改。不必告诉 CVS 我们想检查哪个文件，它可以一次性完成对整个子目录的检查：
```sh
$ cvs diff
```
CVS 会响应如下内容：
```sh
Index: hello.c
RCS file: /usr/local/repository/wrox/chap8-cvs/hello.c,v
diff -r1.1.1.1 hello.c
retrieving revision 1.1.1.1
6c6
< printf("Hello World\n");
---
> printf("Have a nice day\n");
```
我们对自己所做的更改感到满意，决定将其提交给 CVS。当我们向 CVS 提交更改时，它会启动一个编辑器让我们输入记录消息。在执行 `commit` 命令之前，我们可以强制设置环境变量 `CVSEDITOR` 为我们准备使用的编辑器。
```sh
$ cvs commit
```
CVS 会告诉我们它正在检查的内容：
```sh
/usr/local/repository/wrox/chap8-cvs/hello.c,v  <-  hello.c
Checking in hello.c;
new revision: 1.2; previous revision: 1.1
done
```
提交新更改后，我们可以询问 CVS 该项目自修订版 1.1（即初始版本）以来的所有更改：
```sh
$ cvs rdiff -r1.1 wrox/chap8-cvs
```
CVS 会给出详细的报告：
```sh
Index: wrox/chap8-cvs/hello.c
diff -c wrox/chap8-cvs/hello.c:1.1 wrox/chap8-cvs/hello.c:1.2
*** wrox/chap8-cvs/hello.c:1.1
--- wrox/chap8-cvs/hello.c:1.2
***************
*** 6,7 ****
  main(int argc, char *argv[]) {
!   printf("Hello World\n");
  }
--- 6,8 ----
  main(int argc, char *argv[]) {
!   printf("Have a nice day\n");
  }
```

假设用户在 CVS 系统之外的一个本地子目录中还有一份代码副本，其中一些文件尽管用户本人没有编辑，但已被其他人通过 CVS 修改。现在用户想刷新本地子目录中的文件。CVS 的 `update` 命令可以完成这项工作。移动到项目路径的上一级，在本例中就是包含 `wrox` 的子目录，然后执行以下命令：
```sh
$ cvs update -Pd wrox/chap8-cvs
```
CVS 将开始刷新相关文件：它会从文件库中提取其他人通过 CVS 修改过的文件，并将其放入用户的本地子目录中。其他人做的修改可能与你的修改发生冲突，但这需要你自己解决。CVS 是一个强大的工具，但它并不会变魔术！

到这里，你应该看出 CVS 的用法与 RCS 非常接近。不过，它们之间有一个重要区别：CVS 具有跨网络操作的能力，并且不需要预先挂载文件系统。

##### (2) CVS 的网络使用方法
前面提到，向 CVS 提供文件库位置时，既可以使用命令行上的 `-d` 选项，也可以设置环境变量 `CVSROOT`。如果要跨网络操作，就需要使用更高级的语法。例如，在开发 GNOME 时，其源代码可以通过 CVS 在互联网上查到。只需在 CVS 文件库路径前添加正确的网络信息，CVS 就能找到正确的文件库。

继续上面的 GNOME 例子，如果将机器中的环境变量 `CVSROOT` 设置为 `pserver:anoncvs@anoncvs.gnome.org:/cvs/gnome`，就可以将机器上的 CVS 指向 GNOME 源代码的 CVS 文件库。这个设置告诉 CVS 该文件库要求密码验证（`pserver`），并位于 `anoncvs.gnome.org` 服务器上。

在访问源代码之前，必须先登录：
```sh
$ cvs login
```
在提示输入密码时直接按回车键。

现在可以使用各种 CVS 命令，用法与对本地文件库的操作类似。假设我们想取回 ORBit 的源代码，相应的命令是：
```sh
$ cvs checkout ORBit
```

如果我们想将自己的文件库设置为可通过网络访问，就必须在自己的机器上启动一个 CVS 服务器。可以通过 `inetd` 命令来完成，只需在 `/etc/inetd.conf` 文件中添加以下一行并重启 `inetd`：
```sh
cvspserver stream tcp nowait root /usr/bin/cvs cvs -f --allow-root=/usr/local/repository pserver
```
这条语句指示 `inetd` 为连接到标准端口 2401 的客户端自动启动一个 CVS 任务。有关通过 `inetd` 启动网络服务的详细信息，请参阅 `inetd` 和 `inetd.conf` 的手册页。

这一小节简短的篇幅只能浅显地介绍 CVS 系统的强大功能。如果读者真的需要使用 CVS 系统，强烈建议你先设置一个本地文件库多加实践，阅读 CVS 庞大的文档，并预祝你成功！记住，CVS 的源代码是开放的，当你无法理解代码的作用和目的，或者认为自己发现了一个 bug 时，总是可以获取并分析其源代码。

---

## Page 284
### 8.4 编写使用手册

在编写一个新命令时，必须将其使用手册页的编写视为整个开发过程的一部分。大多数使用手册页的排版格式都很相似，基本上由以下几部分组成：

- **Header（标题）**
- **Name（名称）**
- **Synopsis（语法格式）**
- **Description（说明）**
- **Options（选项）**
- **Files（相关文件）**
- **See also（其他参考）**
- **Bugs（已知程序漏洞）**

无关部分可以省略。Linux 程序的使用手册页中还经常包含一个 “Author（作者）” 部分。