### 优化后的文本

通过使用 `file` 命令，可以确定解压后的 `.xz` 数据是一个 CPIO 归档文件。进一步检查后确认该文件是我们需要修改的 `root_fs` 文件。

#### 确认解压后的文件类型
```bash
file root_fs
```
输出：
```
root_fs: ASCII cpio archive (SVR4 with no CRC)
```

#### 使用 `cpio` 命令查看归档文件列表
```bash
cpio -tv -F root_fs | more
```
输出示例：
```
drwxrwxr-x 2 541 541 0 Aug 24 19:30 /sys
drwxrwxr-x 2 541 541 0 Aug 24 19:30 /mnt
drwxrwxr-x 2 541 541 0 Aug 24 19:30 /dev
crw--w--w- 1 root 541 240, 0 Aug 24 19:30 /dev/ac0
crw-rw---- 1 root 541 90, 8 Aug 24 19:30 /dev/mtd4
...
```

接下来，我们需要从 CPIO 归档中提取文件。

#### 提取 CPIO 归档中的文件
```bash
# 创建目录并进入
mkdir rootfs
cd rootfs

# 解压 root_fs 归档中的文件到 rootfs 目录
cat ../root_fs | cpio -idmvH newc --no-absolute-filenames

# 查看解压后的文件
ls -la
```
输出示例：
```
total 64
drwxr-xr-x 16 hack hack 4096 1月 16 11:55 .
drwxr-xr-x 4 hack hack 4096 1月 16 11:55 ..
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 bin
drwxrwxr-x 3 hack hack 4096 1月 16 11:55 dev
drwxrwxr-x 2 hack hack 4096 1月 16 11:55 etc
...
```

现在可以在 `rootfs` 目录中对原始文件进行任意修改或添加新文件。需要注意的是，DIR-816 A2 路由器使用的闪存容量为 4MB，原始镜像几乎占满了所有空间，因此很难再添加大文件。

### 重打包 Linux Kernel Image

重打包的方法是将解开和分析 `rootfs` 的过程反向执行。在进行 CPIO 归档时会遇到一个小问题：CPIO 归档无法修改文件路径信息。为此，我们可以使用 `pax` 命令行工具来解决这个问题。

#### 使用 `pax` 进行重打包
```bash
# 进入 rootfs 目录
cd rootfs

# 使用 pax 归档 rootfs 下的所有文件，并替换路径名
pax -w -x sv4cpio -s '/rootfs//' . > ../root_fs.cpio

# 查看归档结果
cpio -tv -F ../root_fs.cpio | more
```
输出示例：
```
drwxrwxr-x 2 hack hack 0 Jan 16 11:55 /sbin
-rwxr-xr-x 1 hack hack 29541 Aug 24 19:29 /sbin/internet.sh
-rwxr-xr-x 1 hack hack 3073 Aug 24 19:29 /sbin/config-powersave.sh
...
```

完成上述准备工作后，可以使用以下 Python 脚本进行重打包：

```python
#!/usr/bin/env python2
# coding=utf-8
import sys
import os

original_image_file = open("kernel_image", 'rb')
original_image_data = original_image_file.read()
original_xz_root_fs_start_offset = 0x48b000
original_root_fs_end_offset = 0x6d138c
original_root_fs_size = original_root_fs_end_offset - original_xz_root_fs_start_offset
working_folder = '/home/hack/IoT/D-Link_image'
root_fs_folder_name = 'rootfs'
xz_path = '/home/hack/IoT/tool/bin/xz'
lzma_path = '/home/hack/IoT/tool/bin/lzma'

# 归档 rootfs
cpio_archive_cmd = "cd %s ; pax -w -x sv4cpio -s '/%s//' %s > root_fs.cpio" % (working_folder, root_fs_folder_name, root_fs_folder_name)
print("execute: %s" % cpio_archive_cmd)
os.popen(cpio_archive_cmd)

# 压缩 rootfs
xz_cmd = "cd %s ; %s --check=crc32 -z -c root_fs.cpio > root_fs.cpio.xz" % (working_folder, xz_path)
print("execute: %s" % xz_cmd)
os.popen(xz_cmd)

# 重新打包镜像
new_image_name = 'kernel_image_hacked.img'
new_image = open(new_image_name, 'wb')
new_xz_root_fs_path = 'root_fs.cpio.xz'
new_xz_root = open(new_xz_root_fs_path, 'rb')
new_xz_root_data = new_xz_root.read()

if len(new_xz_root_data) > original_root_fs_size:
    print("new image is too big, exit")
    sys.exit()

new_image_data = original_image_data[:original_xz_root_fs_start_offset]
new_image_data += new_xz_root_data + ('\x00' * (original_root_fs_size - len(new_xz_root_data)))
new_image_data += original_image_data[original_root_fs_end_offset:]
new_image.write(new_image_data)

# 压缩镜像
lzma_cmd = "cd %s ; rm kernel_image_hacked.img.lzma; %s -z kernel_image_hacked.img" % (working_folder, lzma_path)
print("execute: %s" % lzma_cmd)
os.popen(lzma_cmd)

# 生成 uimage
mkimg_cmd = 'cd %s; mkimage -A MIPS -O Linux -T kernel -C lzma -n "Linux Kernel Image" -a 80000000 -e 8000C2F0 -d kernel_image_hacked.img.lzma kernel_image_hacked.uimg' % (working_folder)
os.popen(mkimg_cmd)
```

至此，一个新的重新打包过的 Linux Kernel 镜像就制作完成了。可以通过 U-Boot 刷写 Linux Kernel 功能或利用漏洞将文件上传到服务器后结合命令执行漏洞直接调用 `mtd_write` 命令进行 Linux Kernel 镜像的覆写操作。作为实验，我改写了 `hw_nat.sh` 文件，添加了从远端下载 shell 脚本自动执行的功能。这样在路由器启动时就会从 TFTP 服务器中下载 shell 脚本并执行，从而不再需要每次都手工上传 `gdbserver` 和 `busybox`。

### 总结

本文主要分享了我对 D-Link DIR-816 A2 路由器的研究过程及遇到的一些问题，希望这篇文章能够帮助那些对 IoT 安全研究感兴趣或无从下手的同学。这款路由器存在多个安全问题，我们已于今年 1 月提交给了 D-Link 厂商。此外，设备中还存在疑似后门的开启 Telnet 服务的特殊代码。

本文由 Galaxy Lab 作者 [小黑猪](http://galaxylab.com.cn/author/64/) 发表，其版权均为 Galaxy Lab 所有。文章内容系作者个人观点，不代表 Galaxy Lab 对观点赞同或支持。如需转载，请注明文章来源。