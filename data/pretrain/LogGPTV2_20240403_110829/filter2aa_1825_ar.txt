*
Bugcheck Analysis
*
*
*
*******************************************************************************
DRIVER_IRQL_NOT_LESS_OR_EQUAL (d1)
An attempt was made to access a pageable (or completely invalid) address at an
interrupt request level (IRQL) that is too high.
This is usually
caused by drivers using improper addresses.
If kernel debugger is available get stack backtrace.
Arguments:
Arg1: ffffd907b0dc7660, memory referenced
Arg2: 0000000000000002, IRQL
Arg3: 0000000000000000, value 0 = read operation, 1 = write operation
Arg4: fffff80375261530, address which referenced memory
Chapter 6: Kernel Mechanisms
152
Debugging Details:
------------------
(truncated)
DUMP_TYPE:
1
BUGCHECK_P1: ffffd907b0dc7660
BUGCHECK_P2: 2
BUGCHECK_P3: 0
BUGCHECK_P4: fffff80375261530
READ_ADDRESS: Unable to get offset of nt!_MI_VISIBLE_STATE.SpecialPool
Unable to get value of nt!_MI_VISIBLE_STATE.SessionSpecialPool
ffffd907b0dc7660 Paged pool
CURRENT_IRQL:
2
FAULTING_IP:
myfault+1530
fffff803`75261530 8b03
mov
eax,dword ptr [rbx]
(truncated)
ANALYSIS_VERSION: 10.0.18317.1001 amd64fre
TRAP_FRAME:
fffff98853b0f7f0 -- (.trap 0xfffff98853b0f7f0)
NOTE: The trap frame does not contain all registers.
Some register values may be zeroed or incorrect.
rax=0000000000000000 rbx=0000000000000000 rcx=ffffd90797400340
rdx=0000000000000880 rsi=0000000000000000 rdi=0000000000000000
rip=fffff80375261530 rsp=fffff98853b0f980 rbp=0000000000000002
r8=ffffd9079c5cec10
r9=0000000000000000 r10=ffffd907974002c0
r11=ffffd907b0dc1650 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0
nv up ei ng nz na po nc
myfault+0x1530:
fffff803`75261530 8b03
mov
eax,dword ptr [rbx] ds:00000000`00000\
000=????????
Resetting default scope
Chapter 6: Kernel Mechanisms
153
LAST_CONTROL_TRANSFER:
from fffff80370c8a469 to fffff80370c78810
STACK_TEXT:
fffff988`53b0f6a8 fffff803`70c8a469 : 00000000`0000000a ffffd907`b0dc7660 00000\
000`00000002 00000000`00000000 : nt!KeBugCheckEx
fffff988`53b0f6b0 fffff803`70c867a5 : ffff8788`e4604080 ffffff4c`c66c7010 00000\
000`00000003 00000000`00000880 : nt!KiBugCheckDispatch+0x69
fffff988`53b0f7f0 fffff803`75261530 : ffffff4c`c66c7000 00000000`00000000 fffff\
988`53b0f9e0 00000000`00000000 : nt!KiPageFault+0x465
fffff988`53b0f980 fffff803`75261e2d : fffff988`00000000 00000000`00000000 ffff8\
788`ec7cf520 00000000`00000000 : myfault+0x1530
fffff988`53b0f9b0 fffff803`75261f88 : ffffff4c`c66c7010 00000000`000000f0 00000\
000`00000001 ffffff30`21ea80aa : myfault+0x1e2d
fffff988`53b0fb00 fffff803`70ae3da9 : ffff8788`e6d8e400 00000000`00000001 00000\
000`83360018 00000000`00000001 : myfault+0x1f88
fffff988`53b0fb40 fffff803`710d1dd5 : fffff988`53b0fec0 ffff8788`e6d8e400 00000\
000`00000001 ffff8788`ecdb6690 : nt!IofCallDriver+0x59
fffff988`53b0fb80 fffff803`710d172a : ffff8788`00000000 00000000`83360018 00000\
000`00000000 fffff988`53b0fec0 : nt!IopSynchronousServiceTail+0x1a5
fffff988`53b0fc20 fffff803`710d1146 : 00000054`344feb28 00000000`00000000 00000\
000`00000000 00000000`00000000 : nt!IopXxxControlFile+0x5ca
fffff988`53b0fd60 fffff803`70c89e95 : ffff8788`e4604080 fffff988`53b0fec0 00000\
054`344feb28 fffff988`569fd630 : nt!NtDeviceIoControlFile+0x56
fffff988`53b0fdd0 00007ff8`ba39c147 : 00000000`00000000 00000000`00000000 00000\
000`00000000 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x25
00000054`344feb48 00000000`00000000 : 00000000`00000000 00000000`00000000 00000\
000`00000000 00000000`00000000 : 0x00007ff8`ba39c147
(truncated)
FOLLOWUP_IP:
myfault+1530
fffff803`75261530 8b03
mov
eax,dword ptr [rbx]
FAULT_INSTR_CODE:
8d48038b
SYMBOL_STACK_INDEX:
3
SYMBOL_NAME:
myfault+1530
FOLLOWUP_NAME:
MachineOwner
Chapter 6: Kernel Mechanisms
154
MODULE_NAME: myfault
IMAGE_NAME:
myfault.sys
(truncated)
Every crash dump code can have up to 4 numbers that provide more information about the crash. In this
case, we can see the code is DRIVER_IRQL_NOT_LESS_OR_EQUAL (0xd1) and the next four numbers
named Arg1 through Arg4 mean (in order): memory referenced, the IRQL at the time of the call, read vs.
write operation and the accessing address.
The command clearly recognizes myfault.sys as the faulting module (driver). That’s because this is an easy
crash - the culprit is on the call stack as can be seen in the STACK TEXT section above (you can also simply
use the k command to see it again).
The !analyze -v command is extensible and it’s possible to add more analysis to that
command using an extension DLL. You may be able to find such extensions on the web. Consult
the debugger API documentation for more information on how to add your own analysis code
to this command.
More complex crash dumps may show calls from the kernel only on the call stack of the offending thread.
Before you conclude that you found a bug in the Windows kernel, consider this more likely scenario: A
driver did something that was not fatal in itself, such as experience a buffer overflow - wrote data beyond
its allocated buffer, but unfortunately ,the memory following that buffer was allocated by some other
driver or the kernel, and so nothing bad happened at that time. Some time later, the kernel accessed that
memory and got bad data and caused a system crash. But the faulting driver is nowhere to be found on
any call stack; this is much harder to diagnose.
One way to help diagnose such issues is using Driver Verifier. We’ll look at the basics of Driver
Verifier in module 12.
Once you get the crash dump code, it’s helpful to look in the debugger documentation at the
topic “Bugcheck Code Reference”, where common bugcheck codes are explained more fully
with typical causes and ideas on what to investigate next.
Analyzing a Dump File
A dump file is a snapshot of a system’s memory. Other than that, it’s the same as any other kernel
debugging session. You just can’t set breakpoints, and certainly cannot use any go command. All other
commands are available as usual. Commands such as !process, !thread, lm, k can be used normally.
Here are some other commands and tips:
• The prompt indicates the current processor. Switching processors can be done with the command
∼ns where n is the CPU index (it looks like switching threads in user mode).
Chapter 6: Kernel Mechanisms
155
• The !running command can be used to list the threads that were running on all processors at the
time of the crash. Adding -t as an option shows the call stack for each thread. Here is an example
with the above crash dump:
2: kd> !running -t
System Processors:
(000000000000000f)
Idle Processors:
(0000000000000002)
Prcbs
Current
(pri) Next
(pri) Idle
0
fffff8036ef3f180
ffff8788e91cf080 ( 8)
fffff80371\
048400
................
# Child-SP
RetAddr
Call Site
00 00000094`ed6ee8a0 00000000`00000000 0x00007ff8`b74c4b57
2
ffffb000c1944180
ffff8788e4604080 (12)
ffffb000c1\
955140
................
# Child-SP
RetAddr
Call Site
00 fffff988`53b0f6a8 fffff803`70c8a469 nt!KeBugCheckEx
01 fffff988`53b0f6b0 fffff803`70c867a5 nt!KiBugCheckDispatch+0x69
02 fffff988`53b0f7f0 fffff803`75261530 nt!KiPageFault+0x465
03 fffff988`53b0f980 fffff803`75261e2d myfault+0x1530
04 fffff988`53b0f9b0 fffff803`75261f88 myfault+0x1e2d
05 fffff988`53b0fb00 fffff803`70ae3da9 myfault+0x1f88
06 fffff988`53b0fb40 fffff803`710d1dd5 nt!IofCallDriver+0x59
07 fffff988`53b0fb80 fffff803`710d172a nt!IopSynchronousServiceTail+0x1a5
08 fffff988`53b0fc20 fffff803`710d1146 nt!IopXxxControlFile+0x5ca
09 fffff988`53b0fd60 fffff803`70c89e95 nt!NtDeviceIoControlFile+0x56
0a fffff988`53b0fdd0 00007ff8`ba39c147 nt!KiSystemServiceCopyEnd+0x25
0b 00000054`344feb48 00000000`00000000 0x00007ff8`ba39c147
3
ffffb000c1c80180
ffff8788e917e0c0 ( 5)
ffffb000c1\
c91140
................
# Child-SP
RetAddr
Call Site
00 fffff988`5683ec38 fffff803`70ae3da9 Ntfs!NtfsFsdClose
01 fffff988`5683ec40 fffff803`702bb5de nt!IofCallDriver+0x59
02 fffff988`5683ec80 fffff803`702b9f16 FLTMGR!FltpLegacyProcessingAfterPreCallb\
acksCompleted+0x15e
03 fffff988`5683ed00 fffff803`70ae3da9 FLTMGR!FltpDispatch+0xb6
Chapter 6: Kernel Mechanisms
156
04 fffff988`5683ed60 fffff803`710cfe4d nt!IofCallDriver+0x59
05 fffff988`5683eda0 fffff803`710de470 nt!IopDeleteFile+0x12d
06 fffff988`5683ee20 fffff803`70aea9d4 nt!ObpRemoveObjectRoutine+0x80
07 fffff988`5683ee80 fffff803`723391f5 nt!ObfDereferenceObject+0xa4
08 fffff988`5683eec0 fffff803`72218ca7 Ntfs!NtfsDeleteInternalAttributeStream+0\
x111
09 fffff988`5683ef00 fffff803`722ff7cf Ntfs!NtfsDecrementCleanupCounts+0x147
0a fffff988`5683ef40 fffff803`722fe87d Ntfs!NtfsCommonCleanup+0xadf
0b fffff988`5683f390 fffff803`70ae3da9 Ntfs!NtfsFsdCleanup+0x1ad
0c fffff988`5683f6e0 fffff803`702bb5de nt!IofCallDriver+0x59
0d fffff988`5683f720 fffff803`702b9f16 FLTMGR!FltpLegacyProcessingAfterPreCallb\
acksCompleted+0x15e
0e fffff988`5683f7a0 fffff803`70ae3da9 FLTMGR!FltpDispatch+0xb6
0f fffff988`5683f800 fffff803`710ccc38 nt!IofCallDriver+0x59
10 fffff988`5683f840 fffff803`710d4bf8 nt!IopCloseFile+0x188
11 fffff988`5683f8d0 fffff803`710d9f3e nt!ObCloseHandleTableEntry+0x278
12 fffff988`5683fa10 fffff803`70c89e95 nt!NtClose+0xde
13 fffff988`5683fa80 00007ff8`ba39c247 nt!KiSystemServiceCopyEnd+0x25
14 000000b5`aacf9df8 00000000`00000000 0x00007ff8`ba39c247
The command gives a pretty good idea of what was going on at the time of the crash.
• The !stacks command lists all thread stacks for all threads by default. A more useful variant is a
search string that lists only threads where a module or function containing this string appears. This
allows locating driver’s code throughout the system (because it may not have been running at the
time of the crash, but it’s on some thread’s call stack). Here’s an example for the above dump:
2: kd> !stacks
Proc.Thread
.Thread
Ticks
ThreadState Blocker
[fffff803710459c0 Idle]
0.000000
fffff80371048400 0000003 RUNNING
nt!KiIdleLoop+0x15e
0.000000
ffffb000c17b1140 0000ed9 RUNNING
hal!HalProcessorIdle+0xf
0.000000
ffffb000c1955140 0000b6e RUNNING
nt!KiIdleLoop+0x15e
0.000000
ffffb000c1c91140 000012b RUNNING
nt!KiIdleLoop+0x15e
[ffff8788d6a81300 System]
4.000018
ffff8788d6b8a080 0005483 Blocked
nt!PopFxEmergencyWorker+0x3e
4.00001c
ffff8788d6bc5140 0000982 Blocked
nt!ExpWorkQueueManagerThread+0x\
127
4.000020
ffff8788d6bc9140 000085a Blocked
nt!KeRemovePriQueue+0x25c
(truncated)
Chapter 6: Kernel Mechanisms
157
2: kd> !stacks 0 myfault
Proc.Thread
.Thread
Ticks
ThreadState Blocker
[fffff803710459c0 Idle]
[ffff8788d6a81300 System]
(truncated)
[ffff8788e99070c0 notmyfault64.exe]
af4.00160c
ffff8788e4604080 0000006 RUNNING
nt!KeBugCheckEx
(truncated)
The address next to each line is the thread’s ETHREAD address that can be fed to the !thread command.
System Hang
A system crash is the most common type of dump that is typically investigated. However, there is yet
another type of dump that you may need to work with: a hung system. A hung system is a non-responsive
or near non-responsive system. Things seem to be halted or deadlocked in some way - the system does
not crash, so the first issue to deal with is how to get a dump of the system.
A dump file contains some system state, it does not have to be related to a crash or any other bad state.
There are tools (including the kernel debugger) that can generate a dump file at any time.
If the system is still responsive to some extent, the Sysinternals NotMyFault tool can force a system crash
and so force a dump file to be generated (this is in fact the way the dump in the previous section was
generated). Figure 6-8 shows a screenshot of NotMyFault. Selecting the first (default) option and clicking
Crash immediately crashes the system and will generate a dump file (if configured to do so).
Chapter 6: Kernel Mechanisms
158
Figure 6-8: NotMyFault
NotMyFault uses a driver, myfault.sys that is actually responsible for the crash.
NotMyFault has 32 and 64 bit versions (the later file name ends with “64”). Remember to use
the correct one for the system at hand, otherwise its driver will fail to load.
If the system is completely unresponsive, and you can attach a kernel debugger (the target was configured
for debugging), then debug normally or generate a dump file using the .dump command.
If the system is unresponsive and a kernel debugger cannot be attached, it’s possible to generate a crash
manually if configured in the Registry beforehand (this assumes the hang was somehow expected). When
a certain key combination is detected, the keyboard driver will generate a crash. Consult this link¹ to get
the full details. The crash code in this case is 0xe2 (MANUALLY_INITIATED_CRASH).
¹https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/forcing-a-system-crash-from-the-keyboard
Chapter 6: Kernel Mechanisms
159
Thread Synchronization
Threads sometimes need to coordinate work. A canonical example is a driver using a linked list to gather
data items. The driver can be invoked by multiple clients, coming from many threads in one or more
processes. This means manipulating the linked list must be done atomically, so it’s not corrupted. If multiple
threads access the same memory where at least one is a writer (making changes), this is referred to as a
data race. If a data race occurs, all bets are off and anything can happen. Typically, within a driver, a
system crash occurs sooner or later; data corruption is practically guaranteed.
In such a scenario, it’s essential that while one thread manipulates the linked list, all other threads back
off the linked list, and wait in some way for the first thread to finish its work. Only then another thread
(just one) can manipulate the list. This is an example of thread synchronization.
The kernel provides several primitives that help in accomplishing proper synchronization to protect
data from concurrent access. The following discussed various primitives and techniques for thread
synchronization.
Interlocked Operations
The Interlocked set of functions provide convenient operations that are performed atomically by utilizing
the hardware, which means no software objects are involved. If using these functions gets the job done,
then they should be used, as these are as efficient as they can possibly be.
Technically, these Interlocked-family of functions are called compiler intrinsincs, as they are
instructions to the processor, disguised as functions.
The same functions (intrinsics) are available in user-mode as well.
A simple example is incrementing an integer by one. Generally, this is not an atomic operation. If two (or
more) threads try to perform this at the same time on the same memory location, it’s possible (and likely)