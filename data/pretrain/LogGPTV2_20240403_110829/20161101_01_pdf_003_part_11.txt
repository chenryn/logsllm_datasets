 A STABLE function cannot modify the database and is guaranteed to return the same results
given the same arguments for all rows within a single statement. This category allows the
optimizer to optimize multiple calls of the function to a single call. In particular, it is safe to
use an expression containing such a function in an index scan condition. (Since an index scan
will evaluate the comparison value only once, not once at each row, it is not valid to use a
VOLATILE function in an index scan condition.)
 An IMMUTABLE function cannot modify the database and is guaranteed to return the same
results given the same arguments forever. This category allows the optimizer to pre-evaluate
the function when a query calls it with constant arguments. For example, a query like
SELECT ... WHERE x = 2 + 2 can be simplified on sight to SELECT ... WHERE x = 4,
because the function underlying the integer addition operator is marked IMMUTABLE.
函数三态简介
 Stable和immutable的不同之处 :
 Stable函数在execute时执行.
 Immutable函数在plan时执行.
 所以stable和immutable仅仅当使用planed query时才有区别.
 Planed query属于一次plan, 多次execute. Immutable在planed query中也只会执行一次. 而stable函数在这
种场景中是会执行多次的.
 Immutable稳定性> stable> volatile
函数三态简介
 另一些需要注意的 :
 函数内有多条SQL时, 例如
 digoal=# Create or replace function f1() returns setof int as $$
 declare
 v_id int;
 begin
 For v_id in select id from t loop
 return next v_id;
 End loop;
 -- 在这之间如果t发生了变更并提交了, volatile函数能看到这个变更.
 perform pg_sleep(10);
 For v_id in select id from t loop
 return next v_id;
 End loop;
 Return;
 End;
 $$ language plpgsql strict volatile;
 volatile处理每个SQL都是一个新的snapshot. Stable和immutable将调用函数时作为这个snapshot. (演示)
函数三态简介
 对于大运算量的函数, 且一条SQL如果返回多值, 并且传入的参数一致的情况下. 调用一次
显然比调用多次耗费小.
 实际使用过程中选择好三态是非常重要的.
WITH(Common Table Expressions)
 WITH regional_sales AS (
 SELECT region, SUM(amount) AS total_sales
 FROM orders
 GROUP BY region
 ), top_regions AS (
 SELECT region
 FROM regional_sales
 WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)
 )
 SELECT region,
 product,
 SUM(quantity) AS product_units,
 SUM(amount) AS product_sales
 FROM orders
 WHERE region IN (SELECT region FROM top_regions)
 GROUP BY region, product;
WITH(Common Table Expressions)
 WITH RECURSIVE t(n) AS (
 VALUES (1) 非递归子句
 UNION ALL UNION [ALL]
 SELECT n+1 FROM t WHERE n < 100 递归子句
 )
 SELECT sum(n) FROM t;
TEMP Working
TABLE
WITH语句的
OUTPUT,
通过LIMIT可以
跳出循环
"递归"SQL
WITH(Common Table Expressions)
 UNION ALL 去重复(去重复时NULL 视为等同)
 图中所有输出都涉及UNION [ALL]的操作, 包含以往返回的记录和当前返回的记录
1输出 2读取
递归子句
非递归子句 OUTPUT
4无,结束递归
开
始 TWT有 3输出
无数据
4有,递归
6输出 5读取
TEMP Working
递归子句
TABLE
6同时输出
7 TWT清空并被替换
循环
TEMP Intermediate TABLE
(替换掉TWT的内容后清空自己)
WITH(Common Table Expressions)
 TEMP Working Table 没有ctid, cmin, cmax, xmin, xmax, tableoid字段
 postgres=# create table test (id int,name text);
 postgres=# insert into test values (1,'digoal1'),(2,'digoal2');
 postgres=# begin;
 postgres=# with t1 as (update test set name='DIGOAL2' where id=2 returning *)
 select ctid from t1;
 ERROR: column "ctid" does not exist
 LINE 2: select ctid from t1;
 ^
 postgres=# rollback;
 其他字段(cmin,cmax,xmin,xmax,tableoid)同样错误
WITH(Common Table Expressions)
 递归查询输出产品部以及该部门的所有子部门信息.
 然后输出各个子部门以及各个子部门的人数
 WITH RECURSIVE included_parts(sub_part, part, quantity) AS (
 SELECT sub_part, part, quantity FROM parts WHERE part = '产品部'
 UNION ALL
 SELECT p.sub_part, p.part, p.quantity 初始输出
 FROM included_parts pr, parts p
第一步时读取的是初始输出,
 WHERE p.part = pr.sub_part
后面都是TEMP Working
 ) TABLE
 SELECT sub_part, SUM(quantity) as total_quantity
 FROM included_parts
 GROUP BY sub_part
WITH(Common Table Expressions)
 死循环
 WITH RECURSIVE search_graph(id, link, data, depth) AS (
 SELECT g.id, g.link, g.data, 1
 FROM graph g
 UNION ALL
 SELECT g.id, g.link, g.data, sg.depth + 1
 FROM graph g, search_graph sg
 WHERE g.id = sg.link
每次递归输出的记录与以往的记录都不一样,
 ) TEMP Working Table 永远都有记录,
因此无限循环.
 SELECT * FROM search_graph;
WITH(Common Table Expressions)
 规避上一个死循环的方法
 让递归SQL有机会没记录输出
 WITH RECURSIVE search_graph(id, link, data, depth, path, cycle) AS (
 SELECT g.id, g.link, g.data, 1,
 ARRAY[g.id],
 false
 FROM graph g
 UNION ALL
 SELECT g.id, g.link, g.data, sg.depth + 1,
 path || g.id,
 g.id = ANY(path)
 FROM graph g, search_graph sg
 WHERE g.id = sg.link AND NOT cycle
 )
 SELECT * FROM search_graph;
WITH(Common Table Expressions)
 多值比较需使用ROW类型的ARRAY.
 WITH RECURSIVE search_graph(id, link, data, depth, path, cycle) AS (
 SELECT g.id, g.link, g.data, 1,
 ARRAY[ROW(g.f1, g.f2)],
 false
 FROM graph g
 UNION ALL
 SELECT g.id, g.link, g.data, sg.depth + 1,
 path || ROW(g.f1, g.f2),
 ROW(g.f1, g.f2) = ANY(path)
 FROM graph g, search_graph sg
 WHERE g.id = sg.link AND NOT cycle
 )
 SELECT * FROM search_graph;
WITH(Common Table Expressions)
 还有什么情况可以跳出循环
 WITH RECURSIVE t(n) AS (
 SELECT 1
 UNION ALL
 SELECT n+1 FROM t
 )
 SELECT n FROM t LIMIT 100;
 注意如果t表在外围被join了然后再limit的. 还死循环
 使用递归查询注意防止死循环
WITH(Common Table Expressions)
 把属于产品部以及它的子部门的记录删除.
 WITH RECURSIVE included_parts(sub_part, part) AS (
 SELECT sub_part, part FROM parts WHERE part = '产品部'
 UNION ALL
 SELECT p.sub_part, p.part
 FROM included_parts pr, parts p
 WHERE p.part = pr.sub_part
 )
 DELETE FROM parts
 WHERE part IN (SELECT part FROM included_parts);
WITH(Common Table Expressions)
 WITH的所有子句包括MAIN子句查看到的是一个SNAPSHOT.
 各个子句对记录的变更相互看不到, 如果要看到变更的数据需使用RETURNING子句.
 WITH t AS (
 UPDATE products SET price = price * 1.05 WHERE id = 10
 RETURNING *
 )
 SELECT * FROM products WHERE id = 10;
 WITH t AS (
 UPDATE products SET price = price * 1.05 WHERE id = 10
 RETURNING *
 )
 SELECT * FROM t;
WITH(Common Table Expressions)
 测试表
 postgres=# create table test (id int,name text);
 CREATE TABLE
 postgres=# insert into test values(1,'digoal1'),(2,'digoal2');
这样会看到老数据
 postgres=# with t1 as (update test set name='NEW' where id=2 returning *)
 postgres-# select * from test where name='NEW';
 id | name
 (0 rows)
这样才能看到新数据
 postgres=# with t1 as (update test set name='NEWNEW' where id=2 returning *)
 postgres-# select * from t1 where name='NEWNEW';
 id | name
 2 | NEWNEW
 (1 row)
WITH(Common Table Expressions)
 避免类似SQL:
 postgres=# with t1 as (update test set name='digoal1' where id=1)
 postgres-# delete from test where id=1;
 DELETE 1 这段测试和手册不符,
手册上表示update和delete子句同
 postgres=# select * from test where id=1;
时针对一条记录操作时, delete子
 id | name
句不会执行.
 (0 rows)
 避免类似SQL:
 postgres=# with t1 as (update test set name='DIGOAL2' where id=2)
 postgres-# update test set name='NEW' WHERE id=2;
 UPDATE 1
 postgres=# select * from test where id=2;
 id | name
 2 | NEW
练习
 psql的使用熟悉
 数据库基本操作练习, 例如建表, 表的操作, 建立测试模型, 使用pgbench测试.