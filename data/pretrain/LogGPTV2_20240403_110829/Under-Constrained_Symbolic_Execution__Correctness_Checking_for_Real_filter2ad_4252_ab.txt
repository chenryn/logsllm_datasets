### 24th USENIX Security Symposium

#### 3. Patch Checking
To determine whether a patch introduces new crashing bugs, UC-KLEE symbolically executes two compiled versions of a function: \( P \), the unpatched version, and \( P' \), the patched version. If UC-KLEE finds any execution paths where \( P' \) crashes but \( P \) does not (given the same symbolic inputs), it reports a potential bug in the patch.

It is important to note that due to missing input preconditions, we cannot assume that all crashes are bugs. Instead, UC-KLEE looks for paths that exhibit differing crash behavior between \( P \) and \( P' \), which typically share an identical set of preconditions. Even if UC-KLEE does not know these preconditions, real code often shows error equivalence [43], meaning that both \( P \) and \( P' \) will crash (or neither will crash) on illegal inputs. For example, if a precondition requires a pointer to be non-null and both versions dereference the pointer, then both \( P \) and \( P' \) will crash when given a null pointer as an argument.

In previous work, UC-KLEE [43] verified the equivalence of small library routines in terms of crashes and outputs. While detecting differences in functionality may point to interesting bugs, these discrepancies are typically meaningful only to developers of the checked code. This paper evaluates our framework on large, complex systems developed by third parties, so we limit our discussion to crashes, which objectively indicate bugs.

To check patches, UC-KLEE automatically generates a test harness that sets up under-constrained inputs and invokes \( P \) and \( P' \). Figure 3 shows a representative test harness.

```c
1: int main() {
2:   node *n;
3:   ucklee_make_uc(&n);
4:   fooB(n); /* run P' */
5:   ucklee_reset_address_space();
6:   fooA(n); /* run P */
7:   return 0;
8: }
```

**Figure 3: Test Harness**

If a path through \( P' \) (fooB) crashes, UC-KLEE unwinds the stack and resumes execution at line 5. If \( P \) (fooA) also crashes on this path, the two functions are considered crash equivalent, and no error is reported. However, if \( P \) returns from line 6 without crashing, we report an error to the user as a possible bug in \( P' \). We do not report errors where \( P \) crashes but \( P' \) does not, as these suggest bugs fixed by the patch.

#### 3.1 Path Pruning
UC-KLEE employs several path pruning techniques to target errors and avoid uninteresting paths. The underlying UC-KLEE system includes a static cross-checker that walks over the LLVM [29] control flow graph, conservatively marking regions of basic blocks that differ between the original function \( P \) and the patched function \( P' \). This algorithm is straightforward, and we omit the details for brevity. UC-KLEE soundly prunes paths that:

1. Have never executed a "differing" basic block.
2. Cannot reach a differing basic block from their current program counter and call stack.

The second condition uses an inter-procedural reachability analysis from the baseline UC-KLEE system. Paths meeting both criteria are safe to prune because they will execute identical instruction sequences.

Additionally, UC-KLEE introduces pruning techniques specifically aimed at detecting errors introduced by a patch. As the system executes \( P' \) (fooB in Figure 3), it prunes paths that either:

1. Return from \( P' \) without triggering an error.
2. Trigger an error without reaching differing blocks.

In the first case, we are only concerned with errors introduced by the patch. In the second case, both \( P \) and \( P' \) would trigger the error.

**Error Uniquing:** Our system aggressively uniques errors by associating each path executing \( P \) with the program counter (PC) of the error that occurred in \( P' \). Once the system executes a non-error path that returns from \( P \) (and reports the error in \( P' \)), it prunes all current and future paths that hit the same error (PC and type) in \( P' \). In practice, this enabled our system to prune thousands of redundant error paths.

#### 3.2 Evaluation
We evaluated UC-KLEE on hundreds of patches from BIND and OpenSSL, two widely-used, security-critical systems. Each codebase contains about 400,000 lines of C code, making them reasonable measures of UC-KLEE’s scalability and robustness. For this experiment, we used a maximum symbolic object size of 25,000 bytes and a maximum symbolic data structure depth of 9 objects.

##### 3.2.1 Patch Selection and Code Modifications
To avoid selection bias, we used two complete sets of patches from the git repositories for recent stable branches: BIND 9.9 from 1/2013 to 3/2014 and OpenSSL 1.0.1 from 1/2012 to 4/2014. Many patches modified more than one function; this section uses "patch" to refer to changes to a single function and "commit" to refer to a complete changeset.

We excluded all patches that:
- Only changed copyright information.
- Had build errors.
- Modified build infrastructure only.
- Removed dead functions only.
- Applied only to disabled features (e.g., win32).
- Patched only BIND contrib features.
- Only touched regression/unit tests.
- Used variadic functions.
- Yielded identical code after compiler optimizations.

Because of tool limitations, we excluded patches that changed input datatypes (§ 2.2). Finally, to avoid inflating our verification numbers, we excluded three BIND commits that patched 200-300 functions each by changing a pervasive linked-list macro and/or replacing all uses of `memcpy` with `memmove`. Neither of these changes introduced any errors and, given their near-trivial modifications, shed little additional light on our tool’s effectiveness. This yielded 487 patches from BIND and 324 patches from OpenSSL, both from 177 distinct commits to BIND and OpenSSL (purely by coincidence).

We compiled patched and unpatched versions of the codebase for each revision using an LLVM 2.7 toolchain. We then ran UC-KLEE over each patch for one hour. Each run was allocated a single Intel Xeon E5645 2.4GHz core and 4GB of memory on a compute cluster running 64-bit Fedora Linux 14. For these runs, we configured UC-KLEE to target crashes only in patched routines or routines they call. While this approach allows UC-KLEE to focus on the most likely source of errors, it does not detect bugs caused by the outputs of a function, which may trigger crashes elsewhere in the system (e.g., if the function unexpectedly returns null). UC-KLEE can report such differences, but we omit that feature in this paper.

**Code Modifications:**
In BIND and OpenSSL, we canonicalized several macros that introduced spurious code differences, such as `VERSION`, `SRCID`, `DATE`, and `OPENSSL_VERSION_NUMBER` macros. To support function-call annotations (§ 3.2.5) in BIND, we converted four preprocessor macros to function calls.

For BIND, we disabled expensive assertion-logging code and much of its debug malloc functionality, which UC-KLEE already provided. For OpenSSL, we added a new build target that disabled reference counting and address alignment. Reference counting caused many false positives; UC-KLEE reported double free errors due to unknown preconditions on an object’s reference count.

##### 3.2.2 Bugs Found
From the patches we tested, UC-KLEE uncovered three previously unknown bugs in BIND and eight bugs in OpenSSL, six of which were previously unknown. These bugs are summarized in Figure 4.

**Figure 4: Summary of Bugs Reported by UC-KLEE**

| Codebase | Function | Type | Cause | New Vulnerability |
|----------|----------|------|-------|------------------|
| BIND     | receive secure db | assert fail | double lock acquisition | ✓ CVE-2014-0198 |
| BIND     | save nsec3param | assert fail | uninitialized struct | ✓ CVE-2015-0292 |
| BIND     | configure zone acl | assert fail | inconsistent null argument handling | ✓ |
| BIND     | isc lex gettoken | assert fail | input parsing logic | ✓ |
| OpenSSL  | PKCS5 PBKDF2 HMAC | uninitialized pointer dereference | uninitialized struct | ✓ |
| OpenSSL  | dtls1 process record | assert fail | inconsistent null check | ✓ |
| OpenSSL  | tls1 final finish mac | null pointer dereference | unchecked return value | ✓ |
| OpenSSL  | do ssl3 write | null pointer dereference | callee side effect after null check | ✓ |
| OpenSSL  | PKCS7 dataDecode | null pointer dereference | unchecked return value | ✓ |
| OpenSSL  | EVP DecodeUpdate | out-of-bounds array access | negative count passed to memcpy | ✓ |
| OpenSSL  | dtls1 buffer record | use-after-free | improper error handling | ✓ |
| OpenSSL  | pkey ctrl gost | uninitialized pointer dereference | improper error handling | ✓ |

**Figure 5: BIND Locking Bug in `receive_secure_db`**

```c
1: LOCK_ZONE(zone);
2: if (DNS_ZONE_FLAG(zone, DNS_ZONEFLG_EXITING)
3:    || !inline_secure(zone)) {
4:   result = ISC_R_SHUTTINGDOWN;
5:   goto unlock;
6: }
7: dns_zone_idetach(&zone);
8: ...
9: if (result != ISC_R_SUCCESS)
10:   goto failure; /* ← bypasses UNLOCK_ZONE */
11: ...
12: unlock:
13: UNLOCK_ZONE(zone);
14: failure:
15:
```

Figure 5 shows a representative double-lock bug in BIND found by cross-checking. The patch moved the `LOCK_ZONE` earlier in the function (line 1), causing existing error handling code that jumped to `failure` (line 9) to bypass the `UNLOCK_ZONE` (line 12). In this case, the subsequent call to `dns_zone_idetach` (line 14) reacquires the already-held lock, which triggers an assertion failure. This bug was one of several we found that involved infrequently-executed error handling code. Worse, BIND often hides `goto failure` statements inside a `CHECK` macro, which was responsible for a bug we discovered in the `save_nsec3param` function (not shown). We reported the bugs to the BIND developers, who promptly confirmed and fixed them. These examples demonstrate a key benefit of UC-KLEE: it explores non-obvious execution paths that would likely be missed by a human developer, either because the code is obfuscated or an error condition is overlooked.

UC-KLEE is not limited to finding new bugs introduced by the patches; it can also find old bugs in patched code. We added a new mode where UC-KLEE flags errors that occur in both \( P \) and \( P' \) if the error must occur for all input values following that execution path (must-fail error described in § 3.2.5). This approach allowed us to find one new bug in BIND and four in OpenSSL. It also re-confirmed a number of bugs found by cross-checking above. This mode could be used to find bugs in functions that have not been patched, but we did not use it for that purpose in this paper.

**Figure 6: Must-Fail Bug in OpenSSL's `do_ssl3_write`**

```c
1: if (wb->buf == NULL) /* ← null pointer check */
2:   if (!ssl3_setup_write_buffer(s))
3:     return -1;
4: ...
5: /* If we have an alert to send, let's send it */
6: if (s->s3->alert_dispatch) {
7:   i = s->method->ssl_dispatch_alert(s);
8:   /* call sets wb->buf to NULL */
9: }
10: ...
11: unsigned char *p = wb->buf; /* ← p = NULL */
12: *(p++) = type & 0xff; /* ← null pointer dereference */
```

Figure 6 shows a representative must-fail bug, a previously unknown null pointer dereference (denial-of-service) vulnerability we discovered in OpenSSL’s `do_ssl3_write`. On line 1, the code checks if `wb->buf` is null. If the pointer is null, `ssl3_setup_write_buffers` allocates a new buffer (line 2). The code then handles any pending alerts [20] by calling `ssl_dispatch_alert` (line 7). This call has the subtle side effect of freeing the write buffer when the common `SSL_MODE_RELEASE_BUFFERS` flag is set. After freeing the buffer, `wb->buf` is set to null (not shown), triggering a null pointer dereference on line 12.

This bug would be hard to find with other approaches. The write buffer is freed by a chain of function calls that includes a recursive call to `do_ssl3_write`, which one maintainer described as “sneaky” [44]. In contrast to static techniques that could not reason precisely about the recursion, UC-KLEE proved that under the circumstances when both an alert is pending and the release flag is set, a null pointer dereference will occur. This example also illustrates the weaknesses of regression testing. While a developer may write tests to make sure this function works correctly when an alert is pending or when the release flag is set, it is unlikely that a test would exercise these conditions simultaneously. Perhaps as a direct consequence, this vulnerability was nearly six years old.

##### 3.2.3 Patches Verified
In addition to finding new bugs, UC-KLEE exhaustively verified all execution paths for 67 (13.8%) of the patches in BIND and 48 (14.8%) of the patches in OpenSSL. Our system effectively verified that, up to the given input bound and with the usual caveats, these patches did not introduce any new crashes. This strong result is not possible with imprecise static analysis or testing.

The median instruction coverage (§ 3.2.4) for the exhaustively verified patches was 90.6% for BIND and 100% for OpenSSL, suggesting that these patches were thoroughly tested. Only six of the patches in BIND and one in OpenSSL achieved very low (0-2%) coverage. We determined that UC-KLEE achieved low coverage on these patches due to dead code (2 patches) and insufficient constraints (other patches).

---

This revised text is more structured, clear, and professional, with improved readability and coherence.