24th USENIX Security Symposium  51
ever, our current system does not support this, and we
excluded such patches from our experiments.
3 Patch checking
To check whether a patch introduces new crashing bugs,
UC-KLEE symbolically executes two compiled versions
of a function: P, the unpatched version, and P′, the
patched version.
If it ﬁnds any execution paths along
which P′ crashes but P does not (when given the same
symbolic inputs), it reports a potential bug in the patch.
Recall that due to missing input preconditions, we can-
not simply assume that all crashes are bugs. Instead, UC-
KLEE looks for paths that exhibit differing crash behav-
ior between P and P′, which usually share an identical
set of preconditions. Even if UC-KLEE does not know
these preconditions, in practice, real code tends to show
error equivalence [43], meaning that P and P′ both crash
(or neither crashes) on illegal inputs. For example, if a
precondition requires a pointer to be non-null and both
versions dereference the pointer, then P and P′ will both
crash when fed a null pointer as an argument.
In prior work, UC-KLEE [43] veriﬁed the equivalence
of small library routines, both in terms of crashes and
outputs. While detecting differences in functionality may
point to interesting bugs, these discrepancies are typi-
cally meaningful only to developers of the checked code.
Because this paper evaluates our framework on large,
complex systems developed by third parties, we limit our
discussion to crashes, which objectively point to bugs.
To check patches, UC-KLEE automatically generates
a test harness that sets up the under-constrained inputs
and invokes P and P′. Figure 3 shows a representa-
tive test harness. Lines 2–3 create an under-constrained
input n. Line 4 calls fooB (P′). Note that UC-KLEE
invokes P′ before P to facilitate path pruning (§ 3.1).
Line 5 discards any writes
performed by fooB but pre-
serves the path constraints so
that fooA (P) will see the
same initial memory contents
and follow the corresponding
path. Line 6 invokes fooA.
1 :int main() {
node *n;
2 :
ucklee make uc(&n);
3 :
fooB(n); /* run P′ */
4 :
ucklee reset address space();
5 :
fooA(n); /* run P */
6 :
return 0;
7 :
8 :}
Figure 3: Test harness.
If a path through fooB crashes, UC-KLEE unwinds
the stack and resumes execution at line 5. If fooA also
crashes on this path, then the two functions are crash
equivalent and no error is reported. However, if fooA
returns from line 6 without crashing, we report an error
to the user as a possible bug in fooB. For this use case,
we do not report errors in which fooA (P) crashes but
fooB (P′) does not, which suggest bugs ﬁxed by a patch.
3.1 Path pruning
UC-KLEE employs several path pruning techniques to
target errors and avoid uninteresting paths. The underly-
ing UC-KLEE system includes a static cross-checker that
walks over the LLVM [29] control ﬂow graph, conserva-
tively marking regions of basic blocks that differ between
the original function P and the patched function P′. This
algorithm is fairly straightforward, and we elide details
for brevity. UC-KLEE soundly prunes paths that:
1. have never executed a “differing” basic block, and
2. cannot reach a differing basic block from their cur-
rent program counter and call stack.
The second condition uses an inter-procedural reachabil-
ity analysis from the baseline UC-KLEE system. Paths
meeting both of these criteria are safe to prune because
they will execute identical instruction sequences.
In addition, UC-KLEE introduces pruning techniques
aimed speciﬁcally at detecting errors introduced by a
patch. As our system executes P′ (fooB in Figure 3),
it prunes paths that either:
1. return from P′ without triggering an error, or
2. trigger an error without reaching differing blocks.
In the ﬁrst case, we are only concerned with errors intro-
duced by the patch. In the second case, P and P′ would
both trigger the error.
Error uniquing. Our system aggressively uniques er-
rors by associating each path executing P with the pro-
gram counter (PC) of the error that occurred in P′. Once
our system executes a non-error path that returns from P
(and reports the error in P′), it prunes all current and fu-
ture paths that hit the same error (PC and type) in P′. In
practice, this enabled our system to prune thousands of
redundant error paths.
3.2 Evaluation
We evaluated UC-KLEE on hundreds of patches from
BIND and OpenSSL, two widely-used, security critical
systems. Each codebase contains about 400,000 lines of
C code, making them reasonable measures of UC-KLEE’s
scalability and robustness. For this experiment, we used
a maximum symbolic object size of 25,000 bytes and a
maximum symbolic data structure depth of 9 objects.
3.2.1 Patch selection and code modiﬁcations
We tried to avoid selection bias by using two complete
sets of patches from the git repositories for recent sta-
ble branches: BIND 9.9 from 1/2013 to 3/2014 and
OpenSSL 1.0.1 from 1/2012 to 4/2014. Many of the
patches we encountered modiﬁed more than one func-
tion; this section uses patch to refer to changes to a single
function, and commit to refer to a complete changeset.
We excluded all patches that: only changed copyright
information, had build errors, modiﬁed build infrastruc-
ture only, removed dead functions only, applied only
to disabled features (e.g., win32), patched only BIND
contrib features, only touched regression/unit tests, or
used variadic functions. We also eliminated all patches
52  24th USENIX Security Symposium 
USENIX Association
Codebase
BIND
BIND
BIND
BIND
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
OpenSSL
Function
receive secure db
save nsec3param
configure zone acl
isc lex gettoken
PKCS5 PBKDF2 HMAC
dtls1 process record
tls1 final finish mac
do ssl3 write
PKCS7 dataDecode
EVP DecodeUpdate
dtls1 buffer record
pkey ctrl gost
Type
assert fail
assert fail
assert fail
assert fail
uninitialized pointer dereference
assert fail
null pointer dereference
null pointer dereference
null pointer dereference
out-of-bounds array access
use-after-free
uninitialized pointer dereference
Cause
double lock acquisition
uninitialized struct
inconsistent null argument handling
input parsing logic
uninitialized struct
inconsistent null check
unchecked return value
callee side effect after null check
unchecked return value
negative count passed to memcpy
improper error handling
improper error handling
New
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Vulnerability
CVE-2014-0198
CVE-2015-0292
Figure 4: Summary of bugs UC-KLEE reported while checking patches. New indicates that the bug was previously unknown.
that yielded identical code after compiler optimizations.
Because of tool limitations, we excluded patches that
changed input datatypes (§ 2.2). Finally, to avoid inﬂat-
ing our veriﬁcation numbers, we excluded three BIND
commits that patched 200-300 functions each by chang-
ing a pervasive linked-list macro and/or replacing all uses
of memcpy with memmove. Neither of these changes in-
troduced any errors and, given their near-trivial modiﬁ-
cations, shed little additional light on our tool’s effec-
tiveness. This yielded 487 patches from BIND and 324
patches from OpenSSL, both from 177 distinct commits
to BIND and OpenSSL (purely by coincidence).
We compiled patched and unpatched versions of the
codebase for each revision using an LLVM 2.7 toolchain.
We then ran UC-KLEE over each patch for one hour. Each
run was allocated a single Intel Xeon E5645 2.4GHz
core and 4GB of memory on a compute cluster running
64-bit Fedora Linux 14. For these runs, we conﬁgured
UC-KLEE to target crashes only in patched routines or
routines they call. While this approach allows UC-KLEE
to focus on the most likely source of errors, it does not
detect bugs caused by the outputs of a function, which
may trigger crashes elsewhere in the system (e.g., if the
function unexpectedly returns null). UC-KLEE can report
such differences, but we elide that feature in this paper.
Code modiﬁcations. In BIND and OpenSSL, we canon-
icalized several macros that introduced spurious code
differences such as the
, VERSION, SRCID,
DATE, and OPENSSL VERSION NUMBER macros. To sup-
port function-call annotations (§ 3.2.5) in BIND, we con-
verted four preprocessor macros to function calls.
For BIND, we disabled expensive assertion-logging
code and much of its debug malloc functionality, which
UC-KLEE already provided. For OpenSSL, we added a
new build target that disabled reference counting and ad-
dress alignment. The reference counting caused many
false positives; UC-KLEE reported double free errors due
to unknown preconditions on an object’s reference count.
3.2.2 Bugs found
From the patches we tested, UC-KLEE uncovered three
previously unknown bugs in BIND and eight bugs in
OpenSSL, six of which were previously unknown. These
bugs are summarized in Figure 4.
LINE
LOCK ZONE(zone);
if (DNS ZONE FLAG(zone, DNS ZONEFLG EXITING)
| | !inline secure(zone)) {
result = ISC R SHUTTINGDOWN;
goto unlock;
dns zone idetach(&zone);
}
. . .
if (result != ISC R SUCCESS)
goto failure; /* ← bypasses UNLOCK ZONE */
. . .
1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10:
11: unlock:
12: UNLOCK ZONE(zone);
13: failure:
14:
Figure 5: BIND locking bug found in receive secure db.
Figure 5 shows a representative double-lock bug in
BIND found by cross-checking. The patch moved the
LOCK ZONE earlier in the function (line 1), causing exist-
ing error handling code that jumped to failure (line 9)
to bypass the UNLOCK ZONE (line 12). In this case, the
subsequent call to dns zone idetach (line 14) reac-
quires the already-held lock, which triggers an asser-
tion failure. This bug was one of several we found
that involved infrequently-executed error handling code.
Worse, BIND often hides goto failure statements in-
side a CHECK macro, which was responsible for a bug
we discovered in the save nsec3param function (not
shown). We reported the bugs to the BIND developers,
who promptly conﬁrmed and ﬁxed them. These exam-
ples demonstrate a key beneﬁt of UC-KLEE: it explores
non-obvious execution paths that would likely be missed
by a human developer, either because the code is obfus-
cated or an error condition is overlooked.
UC-KLEE is not limited to ﬁnding new bugs introduced
by the patches; it can also ﬁnd old bugs in patched code.
We added a new mode where UC-KLEE ﬂags errors that
occur in both P and P′ if the error must occur for all
input values following that execution path (must-fail er-
ror described in § 3.2.5). This approach allowed us to
ﬁnd one new bug in BIND and four in OpenSSL. It also
re-conﬁrmed a number of bugs found by cross-checking
above. This mode could be used to ﬁnd bugs in functions
that have not been patched, but we did not use it for that
purpose in this paper.
Figure 6 shows a representative must-fail bug, a
previously unknown null pointer dereference (denial-
of-service) vulnerability we discovered in OpenSSL’s
USENIX Association  
24th USENIX Security Symposium  53
(wb−>buf == NULL) /* ← null pointer check */
if (!ssl3 setup write buffer(s))
return −1;
1 :if
2 :
3 :
4 : . . .
5 :/* If we have an alert to send, lets send it */
6 :if
7 :
8 :
9 :
10:
11:
12: }
13: . . .
14: unsigned char *p = wb−>buf; /* ← p = NULL */
15: *(p++)=type&0xﬀ; /* ← null pointer dereference */
(s−>s3−>alert dispatch) {
/* call sets wb→buf to NULL */
i=s−>method−>ssl dispatch alert(s);
if (i buf is null (line 1).
If the pointer is null, ssl3 setup write buffers
allocates a new buffer (line 2).
the
code then handles any pending alerts [20] by calling
ssl dispatch alert (line 8). This call has the subtle
side effect of freeing the write buffer when the common
SSL MODE RELEASE BUFFERS ﬂag is set. After freeing
the buffer, wb->buf is set to null (not shown), triggering
a null pointer dereference on line 15.
On line 6,
This bug would be hard to ﬁnd with other approaches.
The write buffer is freed by a chain of function calls that
includes a recursive call to do ssl3 write, which one
maintainer described as “sneaky” [44].
In contrast to
static techniques that could not reason precisely about the
recursion, UC-KLEE proved that under the circumstances
when both an alert is pending and the release ﬂag is set,
a null pointer dereference will occur. This example also
illustrates the weaknesses of regression testing. While
a developer may write tests to make sure this function
works correctly when an alert is pending or when the re-
lease ﬂag is set, it is unlikely that a test would exercise
these conditions simultaneously. Perhaps as a direct con-
sequence, this vulnerability was nearly six years old.
3.2.3 Patches veriﬁed
In addition to ﬁnding new bugs, UC-KLEE exhaustively
veriﬁed all execution paths for 67 (13.8%) of the patches
in BIND, and 48 (14.8%) of the patches in OpenSSL.
Our system effectively veriﬁed that, up to the given in-
put bound and with the usual caveats, these patches did
not introduce any new crashes. This strong result is not
possible with imprecise static analysis or testing.
The median instruction coverage (§ 3.2.4) for the ex-
haustively veriﬁed patches was 90.6% for BIND and
100% for OpenSSL, suggesting that these patches were
thoroughly tested. Only six of the patches in BIND and
one in OpenSSL achieved very low (0-2%) coverage.
We determined that UC-KLEE achieved low coverage on
these patches due to dead code (2 patches); an insufﬁ-
)
%
(
e
g
a
r
e