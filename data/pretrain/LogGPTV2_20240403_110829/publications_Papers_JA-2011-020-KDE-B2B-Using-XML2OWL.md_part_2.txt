inourscenario,bothexternalandinternalrepresentationsrelyonXMLfordata
serialization.
8
SincewehaveselectedbothlanguagestoberepresentedinXML(theexternal
data model is represented with XML and the internal domain model is repre-
sentedwithXML/OWL),thereisnoambiguityonhowthelanguagesshouldbe
parsed since the grammar of both is the same. Nonetheless, a different view on
syntactic can be taken. Since the OWL ontology language is based on graphs as
theunderlyingdatamodelandXMLisinessenceatreedatamodel,thesyntac-
tic mismatch of the underlying data models can occur as more than one XML
representationofanOWLgraphcanexist.Inourwork,wetaketheformerview
on syntactic heterogeneity.
System heterogeneity has long been solved with interoperable operating sys-
tems and infrastructures. As for structural and semantic heterogeneity, the fol-
lowing elements need to be considered in B2B integration:
• Structural heterogeneity. External and internal data representations store
their terms and expressions in different document layouts and formats, data
models, data structures and schemas [40].
• Semantic heterogeneity. External and internal data representations can be
expressed semantically in different ways leading to heterogeneity. Seman-
tic heterogeneity considers the content of representations and its intended
meaning [42].
Semantic heterogeneity has been identified as one of the most important
andpressingchallengesininformationsharing[42].Sinceschemastructuresand
themeaningofXMLschemaisdefinedbyprogrammersordatadesigners,itbe-
comesdifficulttoautomaticallyorsemi-automaticallyachievethestructuraland
semantic integration of data among organizations participating in B2B transac-
tions.
Approaches to the problems of structural and semantic heterogeneity should
equip B2B platforms aggregating business networks with heterogeneous, au-
tonomous, and distributed systems with the ability to share and exchange busi-
nesstransactionsinasemanticallyconsistentway.Therefore,thefollowingprob-
lems need to be tackled:
i) Tradingpartnershavetodealwithseveraltransactionstandardsatthesame
time. To ensure a correct understanding and interpretation, mappings are
required which leads in great expenses for organizations [30].
ii) B2B integration through programming does not scale, because of the high
complexity of the interactions of B2B standards [7].
iii) The problem of semantic heterogeneity still applies when data is exchanged
using XML according to standard specifications for transactions [6].
ThesethreechallengesneedtobeaddressedtocreatebetterB2Bintegration
platforms. Section 4 will present the B2BISS system and will explain how each
of these points are addressed.
While in our research we create mappings between two different data rep-
resentation languages with a distinct level of expressiveness to enable the B2B
integrationoforganizations,thesametypeofchallengesoccurswhentwoormore
9
informationsystemsusedifferentontologiesandneedto”talk”toeachother.In
such a scenario, there is also the need to find and represent the correspondences
between concepts in these ontologies. For example, given two ontologies, map-
ping one ontology with another means that for each concept in one ontology,
we establish a mapping to find a corresponding concept in the other ontology
which has the same or similar semantics (and vice verse). The process of find-
ing correspondences is called ontology mapping, ontology matching, or ontology
alignment[25]andusuallyreliesondefiningadistancemeasurebetweenentities
[16]. The work presented in this paper can be extended to include the notion of
distance measures, as described in [16] and [9], to find and suggest to the user
whichmappingscanconstitutepotentialcandidatesbetweenanXMLentityand
an OWL concept.
3.2 Approaches to enable integration
When external and internal data representations exist, an important decision
foranorganizationoperatinginaspecifictradingindustrydomainiswhetherto
useacommonschema(i.e.,astandard)ortouseaprivatecustommadeinternal
schema.Inotherwords,theorganizationsparticipatinginB2Binteractionshave
to adopt one of the following alternatives:
• Agree on a common schema for external and internal data representations.
• Create mappings between external and internal data representations.
The decision on whether to use the first or the second approach depends
on various factors which have been well described in [31]. Some of the more
important decision factors for our research scenario include the cost, reliability,
adequacy, and competitive advantage that a new system or approach can bring
to an organization:
– Cost. Since a common schema can be sold and distributed to thousands of
organizations it means that the price per unit is significantly lower when
compared to developing a private internal schema.
– Reliability. A common schema with thousands of users has been tested sev-
eral time and the probability of inconsistencies or errors is relatively low.
The same cannot be said with respect to private custom made schema.
– Adequacy. A common schema typically has more features that a custom
schema since it is designed to satisfy a large base of customers. However,
numerous functions are not important for a particular private business and
it is not likely to acquire a common schema that fully satisfies all business
requirements.
– Competitive advantage. By having a custom made schema with specific key
features,anorganizationcangainadvantageovercompetitors.Thiswillnot
easilyhappenifalltheindustryplayersareusingthesamecommonschema.
Ourworkisdirectedatorganizationsthatdonotfeelcomfortableinagreeing
to structure their internal data representations based on a particular external
10
representation for communication since this alternative restricts their ability to
innovate and differentiate from the competition. Therefore, B2BISS is directed
at organizations that favor the creation of private schema to represent their
internal data. We are not stating that, in the future, the notion of ontological
commitment reflectingtheagreementamongbusinessexpertsandindustrieswill
not happen, we are putting forward an intermediate stage where external and
internal data representations coexist.
3.3 One solution: heterogeneous mappings
OneconceptualsolutionthatallowsorganizationstoparticipateinB2Bintegra-
tion using external syntactic XML-based transactions while structuring internal
data representations semantically using OWL relies on the use of heterogeneous
mappings. An heterogeneous mapping is defined as a mapping that transforms
instances of a schema into instances of another schema that has a different level
of expressiveness.
When the B2BISS system uses a mapping to place a syntactic entity from
anXMLtransactionintoanontology,theentityistransparently,andbydesign,
associatedwithaconceptinaproperontologicalcontextwhichhasrelationships
(e.g. transitive, symmetric and inverse relations) with other concepts from the
domainofdiscourse.Inthisaspect,afterthetransformation,theentityacquiresa
higherlevelofclarityandexpressivenessbybeingassociatedwithanontological
concept.
Onceanorganizationreceivesasyntacticexternaltransactionitisallowedto
create heterogeneous mappings between the elements from the transaction and
the concepts of the ontology that describes the domain of discourse of the orga-
nization. The organization that receives the transaction can create any number
of mappings. The mappings are stored in a local repository and can be reused
when new, previously unseen, syntactic transactions arrive. When a new syn-
tactic transaction is received by an organization, the repository is queried to
determine if some of the syntactic elements have already been mapped to on-
tological concepts in the past. If all the syntactic elements have already been
mappedpreviously,thenitispossibletoachieveanautomatictransaction-based
integration.
While in our scenario we use a local repository, mappings could also be used
and shared by different organizations trading in the same business value chain.
Since we use well-established languages and tools (such as XSLT languages and
parsers), a central repository of shared mappings accessible to various organi-
zations (as described in [20]) would enable a stronger reuse of mappings across
organizations and over time it would increase the adoption of the B2BISS ap-
proach.
The reuse of mappings is a very important topic. This is for many reasons.
First, it increases the reliability of the quality of the mapping as already tested
and proven mappings are reused and not developed all over again. Second, the
speed of establishing mappings increases as reusing a mapping means that the
workdoesnothavetobedoneagain.Thisissignificantasmappingstakealong
11
time to achieve. Thirdly, if a transaction format changes, a mapping has to be
changedonlyonceandthechangethenisappliedtoallreusecasesautomatically,
making the change process very efficient. The reuse of mappings has not been
explored to the greatest possible extent.
4 The B2BISS System
To enable the (semi-)automatic integration of external and internal data rep-
resentations of organizations participating in B2B networks, we have developed
theB2BISSsystem(B2BIntegrationusingSyntactic-to-Semanticheterogeneous
mappings). B2BISS addresses the challenges i), ii) and iii) presented in 3.1 with
the management and reuse of mappings which are not programmed but graph-
ically defined by users and encoded with a standard transformation language.
Semantic heterogeneity is achieved since the mappings are initially specified
graphically by the end user. Later, they can be reused yielding a time and cost
reduction in their use and management.
The system uses XSLT [43] language and programs to transform external
XML-based transactions to internal OWL instances. The main user interface
of the system is shown in Figure 3 and operates in the following way. XML-
basedstandardtransactions(definedforexamplewithcXML,CIDXorebXML)
are sent to the organization and are monitored and recorded by the B2BISS
monitor (1). When a transaction is received, B2BISS will classify it in one of
three categories (see Figure 4): (a) complete match, (b) partial match, and (c)
no match.
In case a), B2BISS has found in its repository a mapping or set of mappings
that can transform the incoming syntactic transaction to a semantic internal
data representation. Figure 3 shows this first case. We can see an XML-based
transaction (2) and the set of XSLT transformations (3) that has been found in
therepositorytotransformanXMLinstancetoanOWLinstance.Onemapping
represented with a XSLT transformation is shown (4). In case b), the set of
transformations found can only partially transform the XML-based transaction
to a semantic representation. In such a case, user intervention will be needed to
manually create the missing mappings (5). The application to manually create
mappings (called JXML2OWL [41]) is described in Section 4.2. Finally, in case
c), no transformations have been found in the B2BISS repository. As a result,
new mappings need to be manually created (5). Once they are created they will
be stored in the repository for future (re)use.
4.1 Classification algorithm
The algorithm that determines if an incoming syntactic transaction is classified
as:(a)completematch,(b)partialmatch,or(c)nomatch makesoneassumption:
an XML-based incoming transaction is completely matched and can be trans-
formed if a set of XSLT transformations (corresponding to a set of mappings)
is found for all the XPaths [43] present in the transaction. Having this basis,
12
Fig.3. Processing XML-based transactions using B2BISS
we can say that an XML-based transaction (with a set of XPaths S ) and a
xml
set of XSLT transformations (with a set of XPaths S ) are a complete match
xslt
when for each XPath in the XML-based transaction there exists an equivalent
XPath in a XSLT transformation, i.e., S ⊆ S . This relation is shown in
xml xslt
Figure 4.a). This means that for each XPath there is a XSLT transformation,
and therefore, a mapping already exists in the repository and a complete and
automatic transformation can be executed.
There is a partial match between an XML-based transaction and a set of
XSLT transformations if and only if a proper subset of the XML’s XPaths exist
in the set of XSLT’s XPaths, i.e., S ∩S ⊂S (or S ∩S (cid:54)=∅ and
xslt xml xml xml xslt
S \S (cid:54)= ∅). This case is shown in Figure 4.b). When there is a partial
xml xslt
match, the user is asked to manually create the missing mappings. Finally, in
the case shown in Figure 4.c), an XML-based transaction and a set of XSLT
transformations do not have any XPaths in common, i.e., S ∩S = ∅. In
xml xslt
this case there is no match, and all the required mappings need to be creates
manually by the end user. The pseudo code for the classification algorithm is
shown in Algorithm 1. The engine that performs the automatic transformations
is presented in Section 4.4.
A partial match can be further refined. One idea is to use not only an abso-
luteXSLTpathtoidentifyXMLnodesbuttoalsousecontextinformation.The
context information can be represented by taking into account adjacent nodes
13
Fig.4. (a) Complete match, (b) partial match, or (c) no match
ofatargetXMLnode(i.e.anodeforwhichamappingisneeded).Basedonthis
information, the B2BISS system can generate a probabilistic model indicating
the estimated validity of a potential mapping. In [40], a large number of alter-
natives are described to find potential mappings between schemas which can be
reused within the B2BISS platform. Examples include internal structure com-
parison (i.e. accounting for the internal structure of entities, their value range
and cardinality) and taxonomical structure (i.e. accounting for the position of
the nodes within a taxonomy). These approaches are fundamental to make the
discovery of mappings assisted by software applications. Since our work has an
emphasisonthetransformationofXMLentitiesintoOWLconcepts,wewillnot
dwell further on this topic.
Algorithm 1 Classification of incoming XML-based transactions
if S ⊆S then
xml xslt
Perform a fully automatic transformation
else
if S ∩S ⊂S then
xslt xml xml
Ask the user to create the missing mappings
else
Ask the user to create all mappings
end if
Store the new mappings in the repository
Perform an automatic transformation
end if
4.2 Creating heterogeneous mappings with JXML2OWL
When it is necessary to establish a new mapping between an external XML-
based transaction and the semantic definition of an OWL-based internal data
14
representation, the user relies on the JXML2OWL (Java XML to OWL) appli-
cation. The objective of JXML2OWL is to provide a user-friendly, interactive,
manual mapping tool. Figure 5 shows the application with the cXML purchase
order from Listing 3 on the left side and the ontology from Listing 4 and Figure
2 on the right side of the application.
Fig.5. Creating heterogeneous mappings using JXML2OWL
WhileXSLTtransformationsforsmalltransactionscanbewrittenquiteeas-
ily, the complexity and error rate increase dramatically with the size of trans-
actions. Additionally, it is also difficult to maintain and modify existing XSLT
programs. Therefore, JXML2OWL is an indispensable application to manage
andcreateheterogeneousmappingsanditisdividedintotwomainparts.Inthe
left side of Figure 5, an XML schema of an external transaction is represented
(1). In the right side, the OWL schema defined by an internal data representa-
tion is shown (2). In between, there is the mapping zone (3), it is possible to
drag-and-drop elements between the two schema to easily create heterogeneous
mappings. The application allows exporting transformation rules, generated ac-
cording to the mapping performed, as an XSLT document (4). B2BISS stores
well tested and reusable transformation between XML-based transactions and
15
OWLinstancesinitsrepository.TheseXSLTmappingsarethenusedbyB2BISS
transformation engine.
JXML2OWL is divided into two sub applications: the JXML2OWL API
and the JXML2OWL Mapper. The architecture of the application is shown in
Figure 6. The API 4 is a generic and reusable open source library for mapping
XML schema to OWL ontologies for the Java platform while the Mapper is an
application with a graphical user interface developed in Java Swing that uses
the API and eases the management of mappings.
The mapping tool supports mappings between any XML schema (XSD and
DTD) to concepts (classes and properties) of any OWL ontology. According to
the mapping performed, the tool generates mapping rules as an XSL document
that allows the automatic transformation of any XML data, that is, any XML
document validating against the mapped schema, into instances of the mapped
ontology. Generated mapping rules are wrapped in an XSL document to easily