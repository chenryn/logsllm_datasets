where L is the length of the key chain. The storage overhead
at each node, therefore, is O(n × log(L)) measured by the
number of stored key-chain keys while ignoring the buﬀered
messages (or O(n) if measured by the number of buﬀered
messages while ignoring the buﬀering of key chains).
The proposed protocol also imposes heavy computation
overhead on each node. A node has to decrypt every re-
ceived message using its private key. It also has to verify
the digital signature of each received message and generate
a digital signature for every forwarded message (by signing
the whole message batch instead of each individual message,
the computation overhead caused by this part can be signif-
icantly reduced). As the message batch contains exactly
one message from each node in the ring, the computation
overhead at each node is O(n), measured by the number of
public key operations.
5.4
Implementation Evaluation
We have implemented the basic communication module
of the proposed protocol in C on Linux in order to validate
the feasibility, assuming the rings have been constructed and
the nodes know each other’s public key. We adopted RSA
public key encryption algorithm with 1024-bit key size and
Blowﬁsh secret key encryption in CBC mode with 160-bit
key size and 64-bit initialization vector. We did not use
one-way key chains in this implementation. The crypto-
graphic operations were implemented by the OpenSSL [1]
library and no assembly language was used. We tested this
basic component on the PlanetLab [2].
In our tests, the
nodes establish TCP connections. The sender and the re-
cipient are located in diﬀerent rings, where each ring has
variant number of nodes. The broadcast is simulated by
unicast, i.e., the local super node unicasts the data message
to the recipient directly. Table 2 shows the average pro-
cessing time of a message batch, the estimated maximum
bandwidth for anonymous communication, and the average
end-to-end communication delay, for 100 rounds of test.
As shown, the proposed protocol provides reasonable per-
formance. Its throughput slightly degrades as the number
of nodes in the ring increases. We notice that such a perfor-
54
Number of Nodes Payload Size
in the Ring
4
5
6
Message Batch
Processing Time† Maximum Bandwidth
Table 2: Processing Time of Message Batch and Latency (Across Rings)
End-to-End
Latency††
62.39ms
71.09ms
76.73ms
85.90ms
97.16ms
104.81ms
128Bytes
512Bytes
128Bytes
512Bytes
128Bytes
512Bytes
Estimated
42.9Kbps
171.4Kbps
34.3Kbps
135.8Kbps
28.5Kbps
113.8Kbps
23.31ms
23.34ms
29.17ms
29.46ms
35.12ms
35.14ms
† Run on a P4 2.2Ghz machine with 512M memory under Redhat Fedora 2.
†† The sender is one-hop away from its super node, i.e., total 3 hops between the sender and the recipient.
mance is not as good as the one of low-latency anonymous
communication services like Freedom [9] or Tarzan [15]. Fur-
thermore, like the previous DC-net family protocols, a node
in the proposed protocol has to wait (i.e., until receiving a
message batch) before being able to send a data message out,
while the previous mixnet-liked protocols allow a sender to
independently decide its activity of message sending. They
are tradeoﬀs between performance and anonymity.
6. CONCLUSIONS AND FUTURE WORK
The privacy has become a critical issue in electrical com-
munication. In this paper, we introduce a k-anonymity com-
munication protocol. This protocol is based on the construc-
tion of logical rings and the deployment of multicast. It en-
sures the sender and the recipient are indistinguishable from
the other k − 1 honest nodes and also hides them from each
other. Future research will focus on the full implementation
and qualitative evaluation of the proposed protocol.
7. REFERENCES
[1] Openssl. http://www.openssl.org.
[2] Planetlab. http://www.planet-lab.org.
[3] The homepage of Gnutella.
http://gnutella.wego.com.
[4] The homepage of KaZaa. http://www.kazza.com.
[5] L. Ahn, A. Bortz, and N. Hopper. K-anonymous
message transmission. In Proceedings of the 10th ACM
conference on Computer and Communications
Security, pages 122–130, Washington D.C., USA, 2003.
[6] A. Back, U. M¨oller, and A. Stiglic. Traﬃc Analysis
Attacks and Trade-Oﬀs in Anonymity Providing
Systems. In Procings of 4th Information Hiding
Workshop, Pittsburgh, PA, 2001.
[7] A. Beimel and S. Dolev. Buses for Anonymous
Message Delivery. J. Cryptology, 16:25–39, 2003.
[8] O. Berthold, H. Federrath, and S. K¨opsell. Web
MIXes: A System for Anonymous and Unobservable
Internet Access. Lecture Notes in Computer Science,
pages 115–129, 2001.
[9] P. Boucher, A. Shostack, and I. Goldberg. Freedom
systems 2.0 architecture. White paper, Zero
Knowledge Systems, Inc., December 2000.
[10] M. Castro and B. Liskov. Practical Byzantine Fault
Tolerance and Proactive Recovery. ACM Trans.
Comput. Syst., 20(4):398–461, 2002.
[11] D. Chaum. Untraceable Electrical Mail, Retrun
Address, and Digital Pseudonyms. Communications of
the ACM, 24(2):84–88, 1981.
[12] D. Chaum. The Dining Cryptographers Problem:
Unconditional Sender and Recipient Untraceability. J.
Cryptology, 1:65–75, 1988.
[13] D. Coppersmith and M. Jakobsson. Almost Optimal
Hash Sequence Traversal. In Proceedings of
International Conference on Financial Cryptography,
Southampton, Bermuda, 2002.
[14] G. Danezis, R. Dingledine, and N. Mathewson.
Mixminion: Design of a Type III Anonymous Remailer
Protocol. In Proceedings of the IEEE Symposium on
Security and Privacy, Oakland, CA, 2003.
[15] M. Freedman and R. Morris. Tarzan: A Peer-to-Peer
Anonymizing Network Layer. In Proceedings of the 9th
ACM Conference on Computer and Communications
Security, Washington, D.C, USA, 2002.
[16] S. Goel, M. Robson, M. Polte, and E. Sirer. Herbivore:
A Scalable and Eﬃcient Protocol for Anonymous
Communication. Technical Report 2003-1890, Cornell
University, Ithaca, NY, February 2003.
[17] P. Golle and A. Juels. Parallel Mixing. In Proceedings
of the 11th ACM Conference on Computer and
Communications Security, Washingto D.C, USA, 2004.
[18] C. G¨ulc¨u and G. Tsudik. Mixing email with babel. In
Proceedings of the Symposium on Network and
Distributed System Security, San Diego, CA, 1996.
[19] M. Jakobsson. Fractal Hash Sequence Representation
and Traversal. In Proceedings of the IEEE
International Symposium on Information Theory,
Lausanne, Switzerland, 2002.
[20] S. Kent and R. Atkinson. IP Authentication Header.
RFC 2402, IETF, 1998.
[21] S. Kent and R. Atkinson. IP Encapsulating Security
Payload (ESP). RFC 2406, IETF, 1998.
[22] S. Kent and R. Atkinson. Security Architecture for
the Internet Protocol. RFC 2401, IETF, 1998.
[23] D. Kesdogan, J. Egner, and R. B¨uschkes. Stop-and-Go
MIXes: Providing Probabilistic Anonymity in an
Open System. In Proceedings of Information Hiding
Workshop, Portland, OR, 1998.
[24] L. Lamport. Password Authentication with Insecure
Communication. Communications of the ACM,
24(11):770–772, November 1981.
[25] V. Lo, D. Zhou, Y. Liu, and et al. Scalable Supernode
Selection in Peer-to-Peer Overlay Networks. In
Proceedings of the 2nd International Workshop on Hot
Topics in Peer-to-Peer Systems, La Jolla, CA, 2005.
[26] B. M¨oller. Provably Secure Public-Key Encryption for
Length-Preserving Chaumian Mixes. Proceedings of
CT-RSA 2003, LNCS 2612:244–262, April 2003.
55
it sends a reply message to a local super node along the ring
anonymously. This reply message includes the sender’s ring
ID, the query ID, the recipient’s ring ID, and a random reply
ID generated by the recipient. The super node forwards the
reply message to a corresponding super node based on the
sender’s ring ID in the reply message. The latter broadcasts
the reply message in its local ring. The ﬁle requester thus
receives the (broadcast) reply message without disclosing its
identity and knowing the identity of ﬁle provider.
B. TRANSMISSION RATE ADJUSTMENT
A node may want to change the transmission rate, once
it has an amount of data to transmit or after it ﬁnishes the
data transmission. The proposed protocol supports such a
transmission rate adjustment.
To increase the transmission rate, a node ﬁrst anony-
mously sends a request to the local super node that is re-
sponsible for transmission initiation. This request contains a
random request ID (e.g., r). The anonymous message trans-
mission mechanism in the ring ensures only the node and
the corresponding super node know this random ID. Once
receiving the request, the super node buﬀers the request ID
r and initiates another message batch, if the number of mes-
sage batches in the ring does not reach a (predetermined)
maximum value. As a result, the transmission rate increases.
Once the node ﬁnishes data transmission, it sends an-
other request to the corresponding super node to decrease
the transmission rate. This request contains the previous
random ID r. After receiving the request, the super node
checks whether the received r matches with the previously
buﬀered one. Such a checking prevents other nodes from
maliciously decreasing the transmission rate. If the checking
result proves correct, the super node broadcasts a message
to stop one message batch. The transmission rate thus de-
creases. The super node can actively decrease the transmis-
sion rate, if it ﬁnds no data message forwarded/broadcasted
in the local ring for a while, e.g., the node may forget to
decrease the transmission rate after ﬁnishing data transmis-
sion. Noting that the node may leave the network abruptly
without sending a request to decrease the transmission rate.
In this scenario, as the remaining nodes will start a new ses-
sion due to the change of ring structure, the transmission
rate will be reset to the default value in the new session.
Analogously, the message size in a ring can also be adjusted
dynamically at a cost of increased communication overhead.
[27] U. M¨oller, L. Cottrell, P. Palfrader, and L. Sassaman.
Mixmaster Protocol — Version 2, July 2003.
[28] A. Pﬁtzmann and M. K¨ohntopp. Anonymity,
Unobservability, and Pseudonymity - A Proposal for
Terminology. In Proceedings of Workshop on Design
Issues in Anonymity and Unobservability, pages 1–9,
Berkeley, CA, 2000.
[29] A. Pﬁtzmann, B. Pﬁtzmann, and M. Waidner.
ISDN-mixes: Untraceable Communication with Very
Small Bandwidth Overhead. In Proceedings of the
GI/ITG Conference on Communication in Distributed
Systems, pages 451–463, Mannheim, Germany, 1991.
[30] A. Pﬁtzmann and M. Waidner. Networks without
User Observability. Computers & Security,
2(6):158–166, 1987.
[31] J. Raymond. Traﬃc Analysis: Protocols, Attacks,
Design Issues and Open Problems. In Proceedings of
Privacy Enhancing Technologies Workshop, pages
10–29, Berkeley, CA, 2000.
[32] M. Reed, P. Syverson, and D. Goldschlag. Anonymous
Connections and Onion Routing. IEEE J. on Selected
Areas in Coomunications, Special Issue on Copyright
and Privacy Protection, 16(4):482–494, 1998.
[33] M. Reiter and A. Rubin. Crowds: Anonymity for Web
Transaction. ACM Transactions on Information and
System Security, 1(1):66–92, 1998.
[34] R. Rodrigues, B. Liskov, and L. Shrira. The Design of
a Robust Peer-to-Peer System. In Proceedings of the
10th ACM SIGOPS European Workshop, Saint
Emilion, France, 2002.
[35] C. Shields and B. Levine. A Protocol for Anonymous
Communication over the Internet. In Proceedings of
the 7th ACM Conference on Computer and
Communications Security, pages 33–42, Athens,
Greece, 2000.
[36] I. Stoica, R. Morris, D. Karger, and et. al. Chord: A
Scalable Peer-To-Peer Lookup Service for Internet
Applications. In Proceedings of ACM SIGCOMM,
pages 149–160, San Diego, CA, 2001.
[37] M. Waidner. Unconditional Sender and Recipient
Untraceability in Spite of Active Attacks. Advances in
Cryptology: EUROCRYPT’89, LNCS 434:302–319,
1989.
[38] M. Wright, M. Adler, B. Levine, and C. Shields. An
Analysis of the Degradation of Anonymous Protocols.
In Proceedings of the Network and Distributed Security
Symposium, San Diego, CA, 2002.
APPENDIX
A. ANONYMOUS FILE SHARING
The sender, i.e., ﬁle requester, sends its query to a local
super node using the anonymous message transmission de-
scribed above. This query contains the information about
the desired ﬁle, the sender’s ring ID and a random query ID.
Once upon receiving the query, the local super node broad-
casts this query in its local ring. It also forwards the query
to all other super nodes in the network. The other super
nodes broadcast the received query in their local rings. As
the result, all nodes in the network receive the query. But
they cannot link this query with a speciﬁc node.
When the recipient, i.e., ﬁle provider, receives the query,
56