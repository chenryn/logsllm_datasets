### Storage and Computation Overhead

The storage overhead at each node is \(O(n \times \log(L))\) when measured by the number of stored key-chain keys, where \(L\) is the length of the key chain. If we ignore the buffered messages, the storage overhead is \(O(n)\) when measured by the number of buffered messages.

The proposed protocol also imposes significant computational overhead on each node. Each node must decrypt every received message using its private key, verify the digital signature of each received message, and generate a digital signature for every forwarded message. By signing the entire message batch instead of individual messages, the computational overhead can be significantly reduced. Since the message batch contains exactly one message from each node in the ring, the computational overhead at each node is \(O(n)\), measured by the number of public key operations.

### Implementation Evaluation

To validate the feasibility of the proposed protocol, we implemented the basic communication module in C on a Linux system, assuming that the rings have been constructed and nodes know each other's public keys. We used RSA public key encryption with a 1024-bit key size and Blowfish secret key encryption in CBC mode with a 160-bit key size and a 64-bit initialization vector. One-way key chains were not used in this implementation. The cryptographic operations were performed using the OpenSSL library, and no assembly language was utilized. We tested this basic component on the PlanetLab platform.

In our tests, nodes established TCP connections, and the sender and recipient were located in different rings, each with a varying number of nodes. The broadcast was simulated via unicast, where the local super node directly unicasts the data message to the recipient. Table 2 summarizes the average processing time of a message batch, the estimated maximum bandwidth for anonymous communication, and the average end-to-end communication delay over 100 rounds of testing.

| Number of Nodes in the Ring | Payload Size (Bytes) | Message Batch Processing Time† (ms) | Maximum Bandwidth (Kbps) | End-to-End Latency†† (ms) |
|-----------------------------|----------------------|-------------------------------------|---------------------------|----------------------------|
| 4                           | 128                  | 62.39                               | 42.9                      | 23.31                      |
| 4                           | 512                  | 71.09                               | 171.4                     | 23.34                      |
| 5                           | 128                  | 76.73                               | 34.3                      | 29.17                      |
| 5                           | 512                  | 85.90                               | 135.8                     | 29.46                      |
| 6                           | 128                  | 97.16                               | 28.5                      | 35.12                      |
| 6                           | 512                  | 104.81                              | 113.8                     | 35.14                      |

† Run on a P4 2.2Ghz machine with 512M memory under Redhat Fedora 2.
†† The sender is one-hop away from its super node, i.e., total 3 hops between the sender and the recipient.

As shown, the proposed protocol provides reasonable performance, though throughput slightly degrades as the number of nodes in the ring increases. This performance is not as good as low-latency anonymous communication services like Freedom [9] or Tarzan [15]. Additionally, similar to previous DC-net family protocols, a node in the proposed protocol must wait until receiving a message batch before sending out a data message, whereas mixnet-like protocols allow senders to independently decide their message-sending activity. These are trade-offs between performance and anonymity.

### Conclusions and Future Work

Privacy has become a critical issue in electronic communication. In this paper, we introduce a k-anonymity communication protocol based on the construction of logical rings and the deployment of multicast. This protocol ensures that the sender and recipient are indistinguishable from the other \(k - 1\) honest nodes and also hides them from each other. Future research will focus on the full implementation and qualitative evaluation of the proposed protocol.

### References

[1] OpenSSL. http://www.openssl.org.
[2] PlanetLab. http://www.planet-lab.org.
[3] The homepage of Gnutella. http://gnutella.wego.com.
[4] The homepage of KaZaa. http://www.kazza.com.
[5] L. Ahn, A. Bortz, and N. Hopper. K-anonymous message transmission. In Proceedings of the 10th ACM conference on Computer and Communications Security, pages 122–130, Washington D.C., USA, 2003.
[6] A. Back, U. Moller, and A. Stiglic. Traffic Analysis Attacks and Trade-Offs in Anonymity Providing Systems. In Proceedings of the 4th Information Hiding Workshop, Pittsburgh, PA, 2001.
[7] A. Beimel and S. Dolev. Buses for Anonymous Message Delivery. J. Cryptology, 16:25–39, 2003.
[8] O. Berthold, H. Federrath, and S. Kopsell. Web MIXes: A System for Anonymous and Unobservable Internet Access. Lecture Notes in Computer Science, pages 115–129, 2001.
[9] P. Boucher, A. Shostack, and I. Goldberg. Freedom systems 2.0 architecture. White paper, Zero Knowledge Systems, Inc., December 2000.
[10] M. Castro and B. Liskov. Practical Byzantine Fault Tolerance and Proactive Recovery. ACM Trans. Comput. Syst., 20(4):398–461, 2002.
[11] D. Chaum. Untraceable Electronic Mail, Return Address, and Digital Pseudonyms. Communications of the ACM, 24(2):84–88, 1981.
[12] D. Chaum. The Dining Cryptographers Problem: Unconditional Sender and Recipient Untraceability. J. Cryptology, 1:65–75, 1988.
[13] D. Coppersmith and M. Jakobsson. Almost Optimal Hash Sequence Traversal. In Proceedings of International Conference on Financial Cryptography, Southampton, Bermuda, 2002.
[14] G. Danezis, R. Dingledine, and N. Mathewson. Mixminion: Design of a Type III Anonymous Remailer Protocol. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, 2003.
[15] M. Freedman and R. Morris. Tarzan: A Peer-to-Peer Anonymizing Network Layer. In Proceedings of the 9th ACM Conference on Computer and Communications Security, Washington, D.C, USA, 2002.
[16] S. Goel, M. Robson, M. Polte, and E. Sirer. Herbivore: A Scalable and Efficient Protocol for Anonymous Communication. Technical Report 2003-1890, Cornell University, Ithaca, NY, February 2003.
[17] P. Golle and A. Juels. Parallel Mixing. In Proceedings of the 11th ACM Conference on Computer and Communications Security, Washington D.C, USA, 2004.
[18] C. Gulcu and G. Tsudik. Mixing email with babel. In Proceedings of the Symposium on Network and Distributed System Security, San Diego, CA, 1996.
[19] M. Jakobsson. Fractal Hash Sequence Representation and Traversal. In Proceedings of the IEEE International Symposium on Information Theory, Lausanne, Switzerland, 2002.
[20] S. Kent and R. Atkinson. IP Authentication Header. RFC 2402, IETF, 1998.
[21] S. Kent and R. Atkinson. IP Encapsulating Security Payload (ESP). RFC 2406, IETF, 1998.
[22] S. Kent and R. Atkinson. Security Architecture for the Internet Protocol. RFC 2401, IETF, 1998.
[23] D. Kesdogan, J. Egner, and R. Buschkes. Stop-and-Go MIXes: Providing Probabilistic Anonymity in an Open System. In Proceedings of Information Hiding Workshop, Portland, OR, 1998.
[24] L. Lamport. Password Authentication with Insecure Communication. Communications of the ACM, 24(11):770–772, November 1981.
[25] V. Lo, D. Zhou, Y. Liu, and et al. Scalable Supernode Selection in Peer-to-Peer Overlay Networks. In Proceedings of the 2nd International Workshop on Hot Topics in Peer-to-Peer Systems, La Jolla, CA, 2005.
[26] B. Moller. Provably Secure Public-Key Encryption for Length-Preserving Chaumian Mixes. Proceedings of CT-RSA 2003, LNCS 2612:244–262, April 2003.
[27] U. Moller, L. Cottrell, P. Palfrader, and L. Sassaman. Mixmaster Protocol — Version 2, July 2003.
[28] A. Pfitzmann and M. Kohntopp. Anonymity, Unobservability, and Pseudonymity - A Proposal for Terminology. In Proceedings of Workshop on Design Issues in Anonymity and Unobservability, pages 1–9, Berkeley, CA, 2000.
[29] A. Pfitzmann, B. Pfitzmann, and M. Waidner. ISDN-mixes: Untraceable Communication with Very Small Bandwidth Overhead. In Proceedings of the GI/ITG Conference on Communication in Distributed Systems, pages 451–463, Mannheim, Germany, 1991.
[30] A. Pfitzmann and M. Waidner. Networks without User Observability. Computers & Security, 2(6):158–166, 1987.
[31] J. Raymond. Traffic Analysis: Protocols, Attacks, Design Issues and Open Problems. In Proceedings of Privacy Enhancing Technologies Workshop, pages 10–29, Berkeley, CA, 2000.
[32] M. Reed, P. Syverson, and D. Goldschlag. Anonymous Connections and Onion Routing. IEEE J. on Selected Areas in Communications, Special Issue on Copyright and Privacy Protection, 16(4):482–494, 1998.
[33] M. Reiter and A. Rubin. Crowds: Anonymity for Web Transactions. ACM Transactions on Information and System Security, 1(1):66–92, 1998.
[34] R. Rodrigues, B. Liskov, and L. Shrira. The Design of a Robust Peer-to-Peer System. In Proceedings of the 10th ACM SIGOPS European Workshop, Saint Emilion, France, 2002.
[35] C. Shields and B. Levine. A Protocol for Anonymous Communication over the Internet. In Proceedings of the 7th ACM Conference on Computer and Communications Security, pages 33–42, Athens, Greece, 2000.
[36] I. Stoica, R. Morris, D. Karger, and et. al. Chord: A Scalable Peer-To-Peer Lookup Service for Internet Applications. In Proceedings of ACM SIGCOMM, pages 149–160, San Diego, CA, 2001.
[37] M. Waidner. Unconditional Sender and Recipient Untraceability in Spite of Active Attacks. Advances in Cryptology: EUROCRYPT’89, LNCS 434:302–319, 1989.
[38] M. Wright, M. Adler, B. Levine, and C. Shields. An Analysis of the Degradation of Anonymous Protocols. In Proceedings of the Network and Distributed Security Symposium, San Diego, CA, 2002.

### Appendix

#### A. Anonymous File Sharing

The file requester sends its query to a local super node using the anonymous message transmission described above. The query includes information about the desired file, the sender’s ring ID, and a random query ID. Upon receiving the query, the local super node broadcasts it in its local ring and forwards it to all other super nodes in the network. These super nodes then broadcast the query in their local rings, ensuring that all nodes in the network receive the query but cannot link it to a specific node.

When the file provider (recipient) receives the query, it sends a reply message to a local super node along the ring anonymously. This reply message includes the sender’s ring ID, the query ID, the recipient’s ring ID, and a random reply ID generated by the recipient. The super node forwards the reply message to the corresponding super node based on the sender’s ring ID in the reply message. The latter then broadcasts the reply message in its local ring. The file requester thus receives the (broadcast) reply message without disclosing its identity and without knowing the identity of the file provider.

#### B. Transmission Rate Adjustment

A node may want to change its transmission rate after it has a certain amount of data to transmit or after it finishes the data transmission. The proposed protocol supports such transmission rate adjustments.

To increase the transmission rate, a node first anonymously sends a request to the local super node responsible for transmission initiation. This request contains a random request ID (e.g., \(r\)). The anonymous message transmission mechanism in the ring ensures that only the node and the corresponding super node know this random ID. Once the super node receives the request, it buffers the request ID \(r\) and initiates another message batch if the number of message batches in the ring does not reach a predetermined maximum value. As a result, the transmission rate increases.

Once the node finishes data transmission, it sends another request to the corresponding super node to decrease the transmission rate. This request contains the previous random ID \(r\). After receiving the request, the super node checks whether the received \(r\) matches the previously buffered one. This check prevents other nodes from maliciously decreasing the transmission rate. If the check proves correct, the super node broadcasts a message to stop one message batch, thereby decreasing the transmission rate. The super node can also actively decrease the transmission rate if it finds no data messages being forwarded or broadcasted in the local ring for a while, e.g., if the node forgets to decrease the transmission rate after finishing data transmission. Note that the node may leave the network abruptly without sending a request to decrease the transmission rate. In this scenario, the remaining nodes will start a new session due to the change in ring structure, and the transmission rate will be reset to the default value in the new session.

Analogously, the message size in a ring can also be adjusted dynamically, albeit at the cost of increased communication overhead.