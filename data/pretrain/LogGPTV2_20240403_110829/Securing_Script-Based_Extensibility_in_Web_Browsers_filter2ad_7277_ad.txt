Compilation
Code execution through javascript: favicons
Compilation
Showing blocked javascript: pop-up uses wrong privilege context Compilation
Compilation
Arbitrary code execution from Firefox sidebar panel
javascript: Livefeed bookmarks can steal private data
Compilation
Embargoed, or exploit not available
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Privilege escalation using crypto.generateCRMFRequest
Localstore.rdf XML injection through XULDocument.persist()
Firefox 1.0.7 / Mozilla Suite 1.7.12 Vulnerability Fixes
Content-generated event vulnerabilities
Plugins can be used to load privileged content
N/A
N/A
N/A
N/A
N/A
Table 2: Vulnerability Coverage.
N/A
N/A
N/A
N/A
N/A
The user’s testing caused one alarm.
MR Tech Toolkit and FLST. A user, who is not as-
sociated with the project, browsed the Web for 5
hours, speciﬁcally visiting the top 100 most heav-
ily visited web sites, as ranked by Alexa [2]. The
user interacted extensively both with the web sites
as well as with the extensions (e.g., directly invok-
ing extension functionality by setting preferences).
This
alarm was caused by Forecastfox, which dis-
plays the current weather forecast for a city of
the user’s choice. When a user searches for
his city while setting his preferences, Forecastfox
queries accuweather.com for cities matching
the search string. When the user selects his city
from the search results, Forecastfox concatenates
several strings together including the full city name
fetched from the web site and eval’s this expres-
sion to set the city option. Since the city name
string originates from an untrusted web page, and
the expression is evaluated in a privileged context,
the alarm is raised. This code is unsafe because if
the web site were compromised, the browsers of all
Forecastfox users could be exploited. After seeing
this alarm, we researched and found that Forecast-
fox for Firefox 3.0 has removed the eval state-
ment.
We also performed automated testing by writing
a Web crawler extension for Firefox. The crawler
extension takes as input a list of web sites to visit
and directs Firefox to load any HTML or JavaScript
links found in the web site in depth-ﬁrst order and
interacts with each loaded page in Firefox to mimic
the behavior of a human user. On each page, the
crawler chooses multiple events to send to the page
(e.g. mouse clicks, key strokes) and ﬁlls out and
submits any HTML forms. The crawler exercises
the JavaScript in the browser UI by performing one
of several scripted GUI actions such as viewing the
web page’s HTML source code. We also installed
AdBlock and Flashblock extensions and had the
crawler randomly add and remove AdBlock ﬁlters
on each page visited. The full crawler test visited
100 pages from each website in the Alexa Top 200.
The automated testing resulted in the discov-
triggered by selecting
ery of one false positive,
“Page Source” from Firefox’s “View” menu. The
offending UI JavaScript retrieves a (tainted) refer-
ence to a window object from the content names-
pace. The window object implements multiple in-
terfaces and some of these are sensitive interfaces
inaccessible to web page scripts. The UI script casts
the reference to the window object to a sensitive
interface, further propagating the taint. When the
privileged code calls a sensitive method of this in-
terface through the tainted reference, our detectors
ﬂag it as a luring attack. This is not likely an ex-
ploitable vulnerability, but it would be safer if priv-
ileged JavaScript obtained references to sensitive
interfaces without going through a content names-
pace.
While our testing is limited to heavily visited web
sites, we believe that our system will not gener-
ate many false positives with other web sites. We
ﬁnd that privileged scripts are careful when operat-
ing on untrusted data and they are selective about
the strings they compile in their privileged context
(i.e., compilation false positives). Second, names-
pace isolation works well enough in non-malicious
environments, and thus it is difﬁcult for privileged
function references to become tainted (i.e., luring
false positives). Similarly, web pages don’t expect
to have access to privileged references and thus are
unlikely to access them legitimately (i.e., reference
leak false positives).
5.3 Performance
During regular browsing, we did not notice any
degradation in page load times or responsiveness.
We also conducted experiments to quantify the per-
formance overhead of our system. We ran the Dro-
maeo JavaScript Tests and the DOM Core Tests
from Mozilla’s performance test suite [3]. These
tests are micro-benchmarks that measure 1) the per-
formance of basic operations of the script inter-
preter, and 2) the performance of common DOM op-
erations. Our experiments were run on Ubuntu 8.04
Linux on an Intel Core 2 Duo 2.4 GHz processor,
with 2 GB of memory. Our browser had 28% over-
head for the JavaScript tests and 32% overhead for
the DOM tests. Although the overhead witnessed in
these micro-benchmarks does not visibly inﬂuence
the browsing experience, the overhead may become
an impediment to the adoption of our system at a
time when JavaScript performance is becoming a
competitive feature for modern browsers. One pos-
sible research direction would be to investigate how
to efﬁciently integrate our tainting system with the
just-in-time compilation systems present in modern
JavaScript engines.
5.4 Security Analysis
Our system effectively detects nearly all available
proof-of-concept attacks with few false positives.
Admittedly, these proof-of-concept attacks were not
designed with our detection system in mind. In or-
der to defeat our defenses, an attacker would need
to ﬁnd a means of removing taint from untrusted
objects.
It would be difﬁcult to remove taint in
the JavaScript interpreter as the tainting rules are
straightforward. The most likely target for launder-
ing taint would be the native XPCOM methods.
One possible way for the browser to lose taint
is to store tainted objects outside the browser. For
example, if a user saves a malicious URL string
from a web page as a bookmark, the bookmark is
stored in a bookmarks ﬁle and the URI’s taint is
no longer present when the browser is restarted. A
second, more involved method may be to launder
taint through XPCOM method arguments. The at-
tack begins by tricking an extension into passing a
tainted, privileged object (a luring target) to an XP-
COM function. If this function then natively calls
a privileged native method of the tainted argument,
our system would not detect this as a luring attack.
This is because the extension JavaScript did not di-
rectly invoke a privileged method through a tainted
reference. Similarly, if an XPCOM function were to
accept a tainted object as an argument but then re-
turn a different, but related untainted object, it may
be accurate to say the taint was laundered. Note that
in these examples, the arguments and return values
could not be strings as taint is always propagated
during XPCOM string operations.
Although laundering taint is theoretically possi-
ble within our system, our system greatly raises
the bar for potential attackers. The attackers now
not only need to ﬁnd a privilege escalation vul-
nerability in the browser, they also require exten-
sion JavaScript that interacts with speciﬁc XPCOM
methods in such a way as to launder taint from cru-
cial attack variables.
6 Related Work
This work focuses on securely executing untrusted
scripts by using taint-based stack inspection. Stack
inspection is widely used by modern component-
based systems, such as Java and Microsoft .NET
Common Language Runtime, to ensure that remote
code is sufﬁciently authorized to perform a security-
sensitive operation. Wallach et al. [20] provide in-
structive background on stack inspection.
Taint analysis helps determine whether untrusted
data may inﬂuence data that is trusted by the sys-
tem. Newsome and Song [16] use dynamic taint
analysis to taint data originating or derived from
untrusted network sources. An attack is detected
when tainted data is used in a dangerous way, such
as overwriting a return address. We use a similar
approach to ensure that dirty data is not executed in
a trusted context. Vogt et al. [19] use script tainting
in a browser to track sensitive browser data, such as
browser cookies or the URLs of visited pages.
The same origin policy is the basic sandboxing
method used by web browsers. An effective method
for implementing the same origin policy is script
accenting [12], which uses simple XOR encryption
to ensure that code is loaded and run, and data is
created and accessed, by the same principal. Sev-
eral recent projects [22, 17] attempt to enforce the
same origin policy by separating different origins
into different processes. In order to adopt this archi-
tecture, the extension model needs to be redesigned
to accommodate extensions’ interactions with pages
from different principals [10]. The same origin pol-
icy is too strict for mashup web applications. For
such applications, Mashup OS provides abstractions
to allow limited communication while protecting
the different principals associated with mashup con-
tent [21]. Interestingly, Mashup OS introduces the
same set of problems as privileged extensions inter-
acting with untrusted content and thus would beneﬁt
from our solution.
In concurrent work, Barth et al [10] propose a
new browser extension model for Google Chrome.
Extensions and web page scripts are isolated us-
ing processes and “isolated worlds” so that they
never exchange JavaScript pointers. This architec-
ture raises the bar for perpetrating a successful priv-
ilege escalation attack as multiple components now
need to be compromised. Their design has obvious
advantages, but the threat of privilege escalation at-
tacks has not been completely eliminated. For ex-
ample, Google recently ﬁxed a vulnerability that in-
correctly allowed JavaScript to be executed in the
context of a Chrome extension [7].
Since browser extensions typically run with unre-
stricted privileges, a malicious extension can serve
as a powerful attack vector. Louw et al. [15] pro-
pose access control for limiting extension privi-
leges. For example, certain extensions may not be
allowed access to the password manager. Dhawan
and Ganapathy [13] propose adding an information-
ﬂow tracking system to Firefox to assist in deter-
mining whether a JavaScript extension maliciously
compromises browser conﬁdentiality or integrity.
Although we are also interested in misuses of low-
integrity data, their system is not an online attack
detector and it requires human analysis.
Recent versions of Firefox use security wrap-
pers (e.g., XPCNativeWrappers, XPCChromeOb-
jectWrappers, etc.)
to regulate interactions be-
tween JavaScript and XPCOM objects from differ-
ent namespaces [8]. Unfortunately, implementa-
tion bugs in creating and manipulating wrappers are
fairly common. Our system adds another layer of
security on top of wrapper techniques by effectively
second guessing wrapper security decisions.
7 Conclusion
Script-based privilege escalation attacks are a se-
rious and recurring threat for extensible browsers
such as Firefox.
In this paper, we describe the
pitfalls of script-based extensibility in Firefox and
show that the privilege escalation vulnerabilities are
similar to arbitrary code injection and execution
control vulnerabilities found in unsafe code. Then,
we propose a tainting-based system that speciﬁcally
targets each class of vulnerability. We implemented
such a system for the Firefox 1.0 browser and our
evaluation shows that it detects the vast majority of
attacks in the Firefox bug database with almost no
false alarms and moderate overhead.
Our vulnerability classiﬁcation and our proposed
defense system are inevitably linked to the Fire-
fox browser. However, one-way namespace isola-
tion must exist in browser extension architectures
because extensions need access to restricted APIs
and they also need to read and modify untrusted
web pages. As such, we expect our analysis and
results to be applicable to other script-extensible
browsers.We plan to test the generality of our vul-
nerability classiﬁcation and defenses against other
browsers, especially Google Chrome as it also pro-
vides powerful script extension functionality.
Acknowledgments
We would like to thank our shepherd, Helen Wang,
and the anonymous reviews for their insightful com-
ments on the paper.
References
[1] Adblock.
http://en.wikipedia.org/
[2] Alexa the web information company. http://
wiki/Adblock.
www.alexa.com.
[3] Dromaeo JavaScript performance
test
suite.
https://wiki.mozilla.org/Dromaeo.
[4] Greasemonkey.
http://en.wikipedia.
org/wiki/Greasemonkey.
[5] Return-to-libc
attack.
http:
//en.wikipedia.org/wiki/
Return-to-libc_attack.
[6] setTimeout loses XPCNativeWrappers, July 2009.
http://www.mozilla.org/security/
announce/2009/mfsa2009-39.html.
JavaScript
execution
[7] Incorrect
of
context,
extension
the
May
http://googlechromereleases.
blogspot.com/2010/05/
stable-channel-update.html.
in
2010.
[8] XPConnect wrappers, May 2010.
https:
//developer.mozilla.org/en/
XPConnect_wrappers.
[9] D. Balzarotti, M. Cova, V. Felmetsger, N. Jo-
vanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner:
Composing static and dynamic analysis to validate
In Proceedings
sanitization in web applications.
of the IEEE Symposium on Security and Privacy,
pages 387–401, 2008.
[10] A. Barth, A. P. Felt, P. Saxena, and A. Boodman.
Protecting browsers from extension vulnerabilities.
In Proceedings of the Network and Distributed Sys-
tem Security Symposium, 2010.
[11] A. Barth, J. Weinberger, and D. Song. Cross-origin
JavaScript capability leaks: Detection, exploita-
tion, and defense. In Proceedings of the USENIX
Security Symposium, Aug. 2009.
[12] S. Chen, D. Ross, and Y.-M. Wang. An analysis of
browser domain-isolation bugs and a light-weight
transparent defense mechanism. In Proceedings of
the ACM Conference on Computer and Communi-
cations Security, pages 2–11, 2007.
[13] M. Dhawan and V. Ganapathy. Analyzing informa-
tion ﬂow in Javascript-based browser extensions. In
Proceedings of the Annual Computer Security Ap-
plications Conference, 2010.
[14] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch.
Leveraging legacy code to deploy desktop applica-
tions on the web. In Proceedings of the Operating
Systems Design and Implementation (OSDI), pages
339–354, 2008.
[15] M. T. Louw, J. S. Lim, and V. N. Venkatakrish-
nan. Enhancing web browser security against mal-
ware extensions. Journal in Computer Virology,
4(3):179–195, Aug. 2008.
[16] J. Newsome and D. Song. Dynamic taint analy-
sis for automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the Network and Distributed System
Security Symposium, Feb. 2005.
[17] C. Reis and S. D. Gribble. Isolating web programs
in modern browser architectures. In Proceedings of
the EuroSys conference, 2009.
[18] A. Slowinska and H. Bos. Pointless Tainting? Eval-
uating the Practicality of Pointer Tainting. In Pro-
ceedings of the EuroSys conference, Apr. 2009.
[19] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross-site scripting pre-
vention with dynamic data tainting and static analy-
sis. In Proceedings of the Network and Distributed
System Security Symposium, 2007.
[20] D. S. Wallach, D. Balfanz, D. Dean, and E. W. Fel-
ten. Extensible security architectures for Java. In
Proceedings of the Symposium on Operating Sys-
tems Principles (SOSP), pages 116–128, 1997.
[21] H. J. Wang, X. Fan, J. Howell, and C. Jackson.
Protection and communication abstractions for web
browsers in MashupOS. In Proceedings of the Sym-
posium on Operating Systems Principles (SOSP),
pages 1–16, 2007.
[22] H. J. Wang, C. Grier, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The multi-principal
OS construction of the Gazelle web browser.
In
Proceedings of the USENIX Security Symposium,
2009.
[23] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth,
T. Ormandy, S. Okasaka, N. Narula, and N. Ful-
lagar. Native client: A sandbox for portable, un-
trusted x86 native code. In Proceedings of the IEEE
Symposium on Security and Privacy, pages 79–93,
2009.