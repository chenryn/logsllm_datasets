will see in the next section that a double has a bigger range and greater
precision than a float. It you want to assign the value 0.42 to a float, you
should apply the “F” suffix (the C# compiler actually insists on this):
myVar = 0.42F;
Download from finelybook PI:EMAIL
93
C# has other numeric types; long integers, which have a bigger range than
integers, and decimals, which hold exact decimal values (floats and doubles
can be subject to rounding and other approximations when they are involved
in calculations). You should use the “L” suffix to assign a numeric literal
value to a long, and the “M” suffix to assign a numeric literal value to a
decimal.
This might seem to be a trivial point, but it is surprising how many subtle
errors can creep into a program by accidentally assigning a value of the
wrong type to a variable. Consider what might happen if you attempt to
perform a calculation that involves a large number of significant decimal
places and store the results in a float. In the worst case, this could lead to
truncating data, causing errors in calculations, and ensuring that your
guidance application causes your space probe to completely miss Mars and to
head off to the deeper depths of the solar system instead!
Working with primitive data types
The numeric types of C#, together with other common types for holding
strings, characters, and Boolean values, are collectively known as the
primitive data types. The following table lists the most commonly used
primitive data types and the range of values that you can store in each.
Data
type
Description
Size
(bits)
Range
Sample usage
int
Whole numbers
(integers)
32
–231 through
231 – 1
int count;
count = 42;
long
Whole numbers
(bigger range)
64
–263 through
263 – 1
long wait;
wait = 42L;
float
Floating-point
numbers
32
–3.4 × 10–38
through 3.4
× 1038
float away;
away =
0.42F;
double
Double-precision
64
±5.0 ×
double
Download from finelybook PI:EMAIL
94
(more accurate)
floating-point
numbers
10–324
through
±1.7 × 10308
trouble;
trouble =
0.42;
decimal Monetary values
128
28
significant
figures
decimal
coin; coin
= 0.42M;
string
Sequence of
characters
16 bits
per
character
Not
applicable
string vest
vest =
"forty
two";
char
Single character
16
A single
character
char grill;
grill =
'x';
bool
Boolean
8
True or false bool teeth;
teeth =
false;
Unassigned local variables
When you declare a variable, it contains a random value until you assign a
value to it. This behavior was a rich source of bugs in C and C++ programs
that created a variable and accidentally used it as a source of information
before giving it a value. C# does not allow you to use an unassigned variable.
You must assign a value to a variable before you can use it; otherwise, your
program will not compile. This requirement is called the definite assignment
rule. For example, the following statements generate the compile-time error
message, “Use of unassigned local variable ‘age’” because the
Console.WriteLine statement attempts to display the value of an uninitialized
variable:
Click here to view code image
int age; Console.WriteLine(age); // compile-time error
Download from finelybook PI:EMAIL
95
Displaying primitive data type values
In the following exercise, you use a C# program named PrimitiveDataTypes
to demonstrate how several primitive data types work.
Display primitive data type values
1. Start Visual Studio 2017 if it is not already running.
2. On the File menu, point to Open, and then click Project/Solution.
The Open Project dialog box appears.
3. Move to the \Microsoft Press\VCSBS\Chapter 2\PrimitiveDataTypes
folder in your Documents folder.
4. Select the PrimitiveDataTypes solution file, and then click Open.
The solution loads, and Solution Explorer displays the
PrimitiveDataTypes project.
Note Solution file names have the .sln suffix, such as
PrimitiveDataTypes.sln. A solution can contain one or more
projects. Visual C# project files have the .csproj suffix. If you open
a project rather than a solution, Visual Studio 2017 automatically
creates a new solution file for it. This situation can be confusing if
you are not aware of this feature because it can result in you
accidentally generating multiple solutions for the same project.
5. On the Debug menu, click Start Debugging.
You might see some warnings in Visual Studio. You can safely ignore
them. (You will correct them in the next exercise.)
Download from finelybook PI:EMAIL
96
6. In the Choose A Data Type list, click string.
The text “forty-two” appears in the Sample Value box.
7. Again, in the Choose A Data Type list, click the int type.
The text “to do” appears in the Sample Value box, indicating that the
statements to display an int value still need to be written.
8. Click each data type in the list. Confirm that the code for the double and
bool types is not yet implemented; the application displays the results as
“to do.”
9. Return to Visual Studio 2017 and then, on the Debug menu, click Stop
Debugging.
You can also close the window to stop debugging.
Use primitive data types in code
Download from finelybook PI:EMAIL
97
1. In Solution Explorer, expand the PrimitiveDataTypes project (if it is not
already expanded), and then double-click MainPage.xaml.
The the application form appears in the Design View window.
Hint If your screen is not big enough to display the entire form,
you can zoom in and out in the Design View window by using
Ctrl+Alt+= and Ctrl+Alt+– or by selecting the size from the Zoom
drop-down list in the lower-left corner of the Design View
window.
2. In the XAML pane, scroll down to locate the markup for the ListBox
control. This control displays the list of data types in the left part of the
form, and it looks like this (some of the properties have been removed
from this text):
Click here to view code image
   int
   long
   float
   double
   decimal
   string
   char
   bool
The ListBox control displays each data type as a separate ListBoxItem.
When the application is running, if a user clicks an item in the list, the
SelectionChanged event occurs (this is a little bit like the Click event
that occurs when the user clicks a button, which is demonstrated in
Chapter 1). You can see that in this case, the ListBox invokes the
typeSelectionChanged method. This method is defined in the
MainPage.xaml.cs file.
3. On the View menu, click Code.
Download from finelybook PI:EMAIL
98
The Code and Text Editor window opens, displaying the
MainPage.xaml.cs file.
Note Remember that you can also use Solution Explorer to access
the code. Click the arrow to the left of the MainPage.xaml file to
expand the node, and then double-click MainPage.xaml.cs.
4. In the Code and Text Editor window, find the typeSelectionChanged
method.
Tip To locate an item in your project, on the Edit menu, point to
Find And Replace, and then click Quick Find. A menu opens in the
upper-right corner of the Code and Text Editor window. In the text
box on this shortcut menu, type the name of the item you’re
looking for, and then click Find Next (the right-arrow symbol next
to the text box):
Download from finelybook PI:EMAIL
99
By default, the search is not case-sensitive. If you want to perform a
case-sensitive search, click the Match Case button (Aa) below the text
for which you are searching.
Instead of using the Edit menu, you can also press Ctrl+F to display the
Quick Find dialog box. Similarly, you can press Ctrl+H to display the
Quick Replace dialog box.
As an alternative to using the Quick Find functionality, you can also
locate the methods in a class by using the class members drop-down list
box above the Code and Text Editor window, on the right.
Download from finelybook PI:EMAIL
100
The class members drop-down list box displays all the methods in the
class, together with the variables and other items that the class contains.
(You will learn more about these items in later chapters.) In the drop-
down list, click the typeSelectionChanged method, and the cursor will
move directly to the typeSelectionChanged method in the class.
If you have programmed using another language, you can probably
guess how the typeSelectionChanged method works; if not, Chapter 4,
“Using decision statements,” makes this code clear. At present, all you
need to understand is that when the user clicks an item in the ListBox
control, the details of the item are passed to this method, which then
uses this information to determine what happens next. For example, if
the user clicks the float value, this method calls another method named
showFloatValue.
5. Scroll down through the code and find the showFloatValue method,
Download from finelybook PI:EMAIL
101
which looks like this:
Click here to view code image
private void showFloatValue()
{
 float floatVar;
 floatVar = 0.42F;
 value.Text = floatVar.ToString();
}
The body of this method contains three statements. The first statement
declares a variable named floatVar of type float.
The second statement assigns floatVar the value 0.42F.
Important Remember that the F is a type suffix specifying that
0.42 should be treated as a float value. If you forget the F, the
value 0.42 is treated as a double, and your program will not
compile because you cannot assign a value of one type to a
variable of a different type without writing additional code. C# is
very strict in this respect.
The third statement displays the value of this variable in the value text
box on the form. This statement requires your attention. As is illustrated
in Chapter 1, the way you display an item in a text box is to set its Text
property (you did this by using XAML in Chapter 1). You can also
perform this task programmatically, which is what is going on here.
Notice that you access the property of an object by using the same dot
notation that you saw for running a method. (Remember
Console.WriteLine from Chapter 1?) Also, the data that you put in the
Text property must be a string and not a number. If you try to assign a
number to the Text property, your program will not compile.
Fortunately, the .NET Framework provides some help in the form of the
ToString method.
Every data type in the .NET Framework has a ToString method. The
Download from finelybook PI:EMAIL
102
purpose of ToString is to convert an object to its string representation.
The showFloatValue method uses the ToString method of the float
variable floatVar object to generate a string version of the value of this
variable. You can then safely assign this string to the Text property of
the value text box. When you create your own data types and classes,
you can define your own implementation of the ToString method to
specify how your class should be represented as a string. You learn more
about creating your own classes in Chapter 7, “Creating and managing
classes and objects.”
6. In the Code and Text Editor window, locate the showIntValue method:
Click here to view code image
private void showIntValue()
{
 value.Text = "to do";
}
The showIntValue method is called when you click the int type in the list
box.
7. At the start of the showIntValue method, on a new line after the opening
brace, type the following two statements shown in bold:
Click here to view code image
private void showIntValue()
{
   int intVar;
   intVar = 42;
 value.Text = "to do";
}
The first statement creates a variable called intVar that can hold an int
value. The second statement assigns the value 42 to this variable.
8. In the original statement in this method, change the string “to do” to
intVar.ToString();
The method should now look exactly like this:
Click here to view code image
private void showIntValue()
{
 int intVar;
Download from finelybook PI:EMAIL
103
 intVar = 42;
   value.Text = intVar.ToString();
}
9. On the Debug menu, click Start Debugging.
The form appears again.
10. In the Choose A Data Type list, select the int type. Confirm that the
value 42 is displayed in the Sample Value text box.
11. Return to Visual Studio and then, on the Debug menu, click Stop
Debugging.
12. In the Code and Text Editor window, find the showDoubleValue
method.
13. Edit the showDoubleValue method exactly as shown in bold type in the
following code:
Click here to view code image
private void showDoubleValue()
{
   double doubleVar;
   doubleVar = 0.42;
   value.Text = doubleVar.ToString();
}
This code is similar to the showIntValue method, except that it creates a
variable called doubleVar that holds double values and is assigned the
value 0.42.
14. In the Code and Text Editor window, locate the showBoolValue method.
15. Edit the showBoolValue method exactly as follows:
Click here to view code image
private void showBoolValue()
{
   bool boolVar;
   boolVar = false;
   value.Text = boolVar.ToString();
 }
Again, this code is similar to the previous examples, except that boolVar
can only hold a Boolean value, true or false. In this case, the value
Download from finelybook PI:EMAIL
104
assigned is false.
16. On the Debug menu, click Start Debugging.
17. In the Choose A Data Type list, select the float, double, and bool types.
In each case, verify that the correct value is displayed in the Sample
Value text box.
18. Return to Visual Studio and then, on the Debug menu, click Stop
Debugging.
Using arithmetic operators
C# supports the regular arithmetic operations you learned in your childhood:
the plus sign (+) for addition, the minus sign (–) for subtraction, the asterisk
(*) for multiplication, and the forward slash (/) for division. The symbols +,
–, *, and / are called operators because they “operate” on values to create
new values. In the following example, the variable moneyPaidToConsultant
ends up holding the product of 750 (the daily rate) and 20 (the number of
days the consultant was employed):
Click here to view code image
long moneyPaidToConsultant;
moneyPaidToConsultant = 750 * 20;
Note The values on which an operator performs its function are called
operands. In the expression 750 * 20, the * is the operator, and 750 and
20 are the operands.
Operators and types
Not all operators apply to all data types. The operators that you can use on a
value depend on the value’s type. For example, you can use all the arithmetic
operators on values of type char, int, long, float, double, or decimal.
Download from finelybook PI:EMAIL
105
However, except for the plus operator (+), you can’t use the arithmetic
operators on values of type string, and you cannot use any of them with
values of type bool. So, the following statement is not allowed because the
string type does not support the minus operator (subtracting one string from
another is meaningless):
Click here to view code image
// compile-time error
Console.WriteLine("Gillingham" - "Forest Green Rovers");
However, you can use the + operator to concatenate string values. You
need to be careful because this can have unexpected results. For example, the
following statement writes “431” (not “44”) to the console:
Click here to view code image
Console.WriteLine("43" + "1");
Tip The .NET Framework provides a method called Int32.Parse that
you can use to convert a string value to an integer if you need to
perform arithmetic computations on values held as strings.
String interpolation
A feature added recently to C# is string interpolation, which renders
many uses of the  + operator obsolete for concatenating strings.
A common use of string concatenation is to generate string values
that include variable values. You saw an example of this in the
exercises in Chapter 1 that created a graphical application. In the
okClick method you added the following line of code:
Click here to view code image
MessageDialog msg = new MessageDialog("Hello " + userName.Text);
String interpolation lets you use the following syntax instead:
Download from finelybook PI:EMAIL
106
Click here to view code image
MessageDialog msg = new MessageDialog($"Hello {userName.Text}");
The $ symbol at the start of the string indicates that it is an
interpolated string and that any expressions between the { and }
characters should be evaluated and the result substituted in their place.
Without the leading $ symbol, the string {username.Text} would be
treated literally.
String interpolation is more efficient than using the + operator; string
concatenation using the + operator can be memory hungry by virtue of
the way in which strings are handled by the .NET Framework. String
interpolation is also arguably more readable and less error-prone.
You should also be aware that the type of the result of an arithmetic
operation depends on the type of the operands used. For example, the value
of the expression 5.0/2.0 is 2.5; the type of both operands is double, so the
type of the result is also double. (Remember that in C#, literal numbers with
decimal points are always double, not float, to maintain as much accuracy as
possible.) However, the value of the expression 5/2 is 2. In this case, the type
of both operands is int, so the type of the result is also int. C# always rounds
toward zero in circumstances like this. The situation gets a little more
complicated if you mix the types of the operands. For example, the
expression 5/2.0 consists of an int and a double. The C# compiler detects the
mismatch and generates code that converts the int into a double before
performing the operation. The result of the operation is, therefore, a double
(2.5). However, although this works, it is considered poor practice to mix
types in this way.
C# also supports a less-familiar arithmetic operator: the remainder, or
modulus, operator, which is represented by the percent sign (%). The result of
x % y is the integer remainder after dividing the integer value x by the integer
value y. So, for example, 9 % 2 is 1 because 9 divided by 2 is 4, remainder 1.
Download from finelybook PI:EMAIL