Most virtual machines and debuggers create telltale drivers
that are specific to the tool being used and generally do
not appear otherwise. For virtual systems, these drivers are
needed to adapt the guest as to the host as. For debuggers,
these drivers are needed to communicate with the rest ofthe
system. The SoftICE kernel debugger, for example, uses
virtual drivers to communicate with the kernel. These are
identifiable as files with names such as S ICE, NTI CE, and
SIWVID. Software can look for these drivers to determine
that it is in a suspicious environment.
3.2 Execution Environment
The execution environment of a process is altered when
it is in a virtual machine or running under a debugger
when compared to a native machine under normal condi(cid:173)
tions. Kernel space memory values, for example, are usu(cid:173)
ally slightly different between native and virtual systems.
Furthermore, debuggers have to perturb process and some(cid:173)
times kernel memory to instrument the process for inspec-
tion. In both cases, these differences can be used to mark an
environment as "instrumented" to a malware process.
3.2.1 Memory Artifacts
VMWare creates a "ComChannel" channel between the
host and guest as, allowing for inspection and control be(cid:173)
tween the two systems. VMware and Virtual PC hooks
work similarly [18, 2], and programs like checkvm [6] can
look for these VMware hooks. Another VMWare feature
that qualifies as a memory artifact is the interrupt descrip(cid:173)
tor table (IDT), whose presence is detected by tools such as
"Red Pill" [5]. This table reliably resides at a well-known
memory address that is different from a native Windows
value. For debuggers, the Windows API sets a flag that is
detectable using the IsDebuggerPresent() and CheckRemot(cid:173)
eDebugger() API calls, helping to prevent debugger attach(cid:173)
ment loops, as well as software breakpoints. In both cases
these are intentional markers and alterations to provide fea(cid:173)
tures, and often can be masked by the system with the right
tools. Because these are accessible to any process with the
right minimum permissions, the process can look for these
markers and assume a modified environment.
3.2.2 Execution Artifacts
OS-level changes that are the results of bugs in the im(cid:173)
plementation are inadvertent artifacts and just as useful to
the attacker as specific markers. These can include CPU
instruction bugs in the virtual machine and how they are
handled by the guest as. Debuggers may also leave unin(cid:173)
tentional traces in the execution path and modify the call(cid:173)
stack, such as altering the UnhandledExceptionFilter or sin(cid:173)
gle byte instructions in the case of OllyDbg. These can be
significantly harder to thwart for the honeypot or sandbox
operator because they are often poorly defined and systemic
flaws in the implementations.
3.3 Application
Some of the easiest methods to detect the presence of
an instrumented environment is through the tools that are
installed and executed on the system. Both virtual machines
and debuggers usually have external applications that are
visible to the process checking the environment.
1-4244-2398-9/08/$20.00 ©2008 IEEE
179
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
3.3.1 Installation
Even if the processes associated with the sandbox environ(cid:173)
ment are not executing, if the tools are installed with well(cid:173)
known names and in a well-known location, they can be
used to mark a system as "suspicious" to a malicious exe(cid:173)
cutable. Both registry keys (in the case of Windows) and
files on disks can be enumerated by the application to look
for VMWare Tools, for example, or debuggers. These de(cid:173)
tection techniques are usually reliable to qualify a host as
an instrumented environment, and are also easy to mask
through simple, non-default installations.
3.3.2 Execution
The running processes, services, and windows associated
with debuggers and virtual machine management can also
be used to identify their presence to a suspicious process.
Unless their names have been altered, the malware can enu(cid:173)
merate processes, services and window titles to look for
names associated with well-known virtual machine man(cid:173)
agement software or debuggers. For instance, malware can
assume that only a virtual machine would have a service
named "VMtools," or that a window with the title "OLLY(cid:173)
DBG" is associated with a debugger. This detection can be
trivially defeated by renaming processes or through API call
hooking.
3.4 Behavior
An artifact more difficult to conceal is the timing dif(cid:173)
ferences between two environments. When single-stepping
a process through a debugger, for instance, the wall clock
differences between any two points will grow dramatically
when compared to a native execution. Malware can per(cid:173)
form two time checks and infer that it is running under such
conditions ifunusual difference is seen. Similarly, some in(cid:173)
structions take much longer to finish in virtual machine than
in a normal machine due to virtualization overhead. A pro(cid:173)
gram continuously executing these instruction can soon tell
VMs apart from plain machines.
3.5 Limitations of This Taxonomy
The taxonomy of monitoring environments described
above is by no means a complete listing of all of the meth(cid:173)
ods by which malcode could detect that it is running in
an analysis environment. Techniques that we omit include
those suggested by Zhou and Cunningham, for example,
describing complex infection propagation mechanisms that
are hard to defeat without the honeypot becoming a risk
source [30]. Also, this taxonomy omits any detection of
AV processes that may influence malcode behavior. Instead,
this taxonomy focuses on commonly-found evasion mecha(cid:173)
nisms that we routinely observe in actual malware samples.
4 Application of Malware Evasion Taxonomy
In this section, we introduce three interesting applica(cid:173)
tions ofthe malware evasion taxonomy. In §4.1, we attempt
to develop an understanding ofhow recent malware behaves
under different execution environments by characterizing
the actual differences in terms ofmalicious behavior. So far,
existing techniques of malware evasion all require access to
the target host. We have developed a novel technique to re(cid:173)
motely determine suspicious execution environment without
any local host access. We outline this network-based finger(cid:173)
printing technique in §4.2. Given the observed gap between
the malware behavior under plain-machine execution and
suspicious execution environments, we developed a novel
technique to imitate suspicious environment fingerprints on
production systems with low overhead to help deter mal(cid:173)
ware. We describe this technique, its implementation and
evaluation in §4.3.
4.1 Malware Characterization
To better understand the prevalence of the techniques
used by malware to evade monitoring systems, in this sec(cid:173)
tion we characterize the difference of malware runtime be(cid:173)
havior by running malware samples under three different
environments (for Windows) -
in plain machines, in vir(cid:173)
tual machines, and with a debugger attached. We execute
6,900 distinct malware samples1 collected from September
3rd, 2006 to September 9th, 2007, using a variety of sources
including Web page crawling, spam traps, and honeypot
systems. When executed in Norman Sandbox and under
a variety of anti-virus software, 99% of them are reported
to be known malware [25].
4.1.1 Execution Environments and Results
We set up three standard Windows environments to exe(cid:173)
cute malware samples. For plain-machine execution, we
install Windows directly on a plain machine and automat(cid:173)
ically execute each malware sample after system booting
finishes. For virtual-machine execution, we install Win(cid:173)
dows inside VMware Server running on Linux. For de(cid:173)
bugger execution, we install Windows on a plain machine,
but execute samples with WinDbg attached, using the com(cid:173)
mand line: cdb. exe -0 -9 -G malware. exe. We
studied Windows XP SP2 without applying any additional
1For interested readers, the scanning results from various anti-virus
software can be downloaded from http://www.eecs.umich. edu/
robustnet/malware/avdetails.tar.gz.
1-4244-2398-9/08/$20.00 ©2008 IEEE
180
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
patches in our analysis, given the time frame in which the
malware samples are obtained.
Only one malware sample is executed during each itera(cid:173)
tion to prevent potential interference, after which the whoIe
system is rolled back to a clean state to prevent disrup(cid:173)
tion across executions. No network traffic, except for DNS
query, is permitted, to prevent spreading infection to other
hosts. For each malware sample, we execute it for two min(cid:173)
utes to capture most, if not all, of its behavior. We believe
two minutes is sufficiently long for most malware samples
to exhibit malicious behavior. We execute malware samples
that behave differently across environments for a slightly
longer duration to ensure that we capture their key behav(cid:173)
ior.
We use the Backtracker system [20] to capture the
system-level behavior ofmalware samples and compare ex(cid:173)
ecution traces across environments. This includes program
execution events related to every malware execution, in(cid:173)
cluding disk read/write, registry table read/write, memory
mapped read/write, process fork, inode update, file execu(cid:173)
tion of the malware process and its child processes. We
treat the events that cause persistent state changes and sys(cid:173)
tem state changes to be malicious, including file/registry
key/named pipe modification and process fork/execution.
Some malware samples cause the system to crash or to
reboot so that we cannot collect complete execution traces.
To ensure fair comparisons, we ignore 217 (3.1°ib) sam(cid:173)
ples with missing data in at least one of the execution se(cid:173)
tups. Further investigation shows that some of these mal(cid:173)
ware samples directly cause Windows to reboot, even under
a freshly-installed system. Some samples only reboot Win(cid:173)
dows under VM execution, which we will discuss later. It is
also possible that some malware programs crashed because
of our instrumented Backtracker system.
We ignore another 461 (6.7%) samples that do not ex(cid:173)
hibit any malicious behavior under plain-execution, mostly
due to an incompatible Windows version or lack of user in(cid:173)
teraction.
evade VM-based analysis.
4.1.3 Impact of Debuggers
For the same 6,222 malware samples, 3,662 (58.5%) of
them exhibit the same behavior with debuggers attached as
plain execution. Quite surprisingly, 2,481 (39.9%) of them
have fewer malicious behaviors, reducing the number offile
modifications or creations by 8,406, that for registry key
modifications by 57,510, named pipe read/writes by 3,201,
and file execution by 2,150. Another 28 samples seem to
have additional process execution behavior in the debug(cid:173)
ging environment, but further investigation shows that a fil e,
removeMeXXXX. bat, is created on the disk and then ex(cid:173)
ecuted to remove the malware executable and the bat file
itself. We suspect that these malware samples try to elim(cid:173)
inate their traces upon detecting debugging environments.
Overall, around 40% of malware samples exhibit less mali(cid:173)
cious behavior in debugging environments.
4.1.4 Popularity of Environment-aware Malware
Our malware dataset only records the first day when a par(cid:173)
ticular sample was observed, without any indication ofpop(cid:173)
ularity. Fortunately, mwcollect.org [1] keeps a detailed log
of when and which malware sample is observed by their
honeypot machines. We obtain the hit log from mwcol(cid:173)
lect.org and correlate it with our malware samples.
Only 101 samples appear in both data sets during the
overlapping time period. These samples account for a total
of68912 hits in the mwcollect database. Among these sam(cid:173)
ples, 20 ofthem have less malicious behavior under VM and
account for 11928 (17.3 %
) ofthe total hits. 69 ofthem have
less malicious behavior with debugger attached and account
for 64719 (93.90/0) of the total hits. This result might be bi(cid:173)
ased because of the small number of overlapping samples.
However, it clearly demonstrates the tremendous popularity
ofenvironment checks present in modem malware samples.
4.1.2 Impact of Virtual Machines
4.1.5 A Malware Case Study: Storm Worm
Among the remaining 6,222 samples, 5,929 (95.3%) of
them exhibit the same behavior under VM execution as
under plain execution. 167 (2.7%) samples exhibit fewer
malicious behaviors. In those cases, the VM environment
prevented 225 file modifications, 188 process creation at(cid:173)
tempts, 203 named pipe read/writes and 5,102 registry mod(cid:173)
ifications. 75 (1.2%) samples crashed and caused Doctor
Watson to start. Overall, at least 4% (1~~t~5) of the mal(cid:173)
ware samples exhibit less malicious behavior under VM ex(cid:173)
ecutions. Further analysis shows that 60 malware samples
directly reboot Windows under VM, which results in miss(cid:173)
ing execution traces for them. We suspect these cases are
caused by malware intentionally rebooting the system to
to
the
illustrate
We take a particular malware sample as an inter(cid:173)
behavioral differ(cid:173)
esting example
ence across environments. We compare the execu(cid:173)
tion traces for a malware program with MD5 hash
6dOe98688ec3ce3147ge02dad96882eO, a known
variant of the currently prevalent Storm Worm.
Under plain execution, the malware extracts two files,
dNVeHk3 . exe and wincom32 . sys, and then executes
dNVeHk3 . exe. During the execution, a registry key is
modified to disable the Windows Firewall/Internet Connec(cid:173)
tion Sharing (ICS) service. Under VM execution, no files
are extracted or executed, but the registry key is modi(cid:173)
fied. Interestingly, under debugger execution, it terminates
1-4244-2398-9/08/$20.00 ©2008 IEEE
181
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
quickly without modifying any system state. This again
confinns our observation that current malwares are increas(cid:173)
ingly more intelligent at avoiding debugger and VM-like
environments.
4.2 Fingerprint Remote Virtualized Hosts
To the best of our knowledge, all the current evasion
techniques happen after the executable is uploaded and ex(cid:173)
ecuted on the target host, which could very well be a moni(cid:173)
toring system. From the attacker's point of view, they may
not want their programs to even land on those monitoring
systems, in order to delay detection and signature genera(cid:173)