# 自动发布 Docker 映像
要自动化发布工作流，您可以向 Makefile 添加一个名为`publish`的新任务，它只需为标记的`release`和`app`服务调用`docker-compose push`命令:
```
.PHONY: test release clean login logout publish
export APP_VERSION ?= $(shell git rev-parse --short HEAD)
version:
  @ echo '{"Version": "$(APP_VERSION)"}'
...
...
release:
    docker-compose up --abort-on-container-exit migrate
    docker-compose run app python3 manage.py collectstatic --no-input
    docker-compose up --abort-on-container-exit acceptance
    @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)
publish:
 docker-compose push release app
clean:
    docker-compose down -v
    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f ARGS
```
Automating publishing to ECR
有了这个配置，您的 Docker 映像现在将被标记提交散列和最新标记，然后您可以通过简单地运行`make publish`命令将其发布到 ECR。
现在让我们提交您的更改，并运行完整的 Make 工作流来测试、构建和发布您的 Docker 映像，如下例所示。请注意，标记有`97e4abf`提交散列的映像被发布到 ECR:
```
> git commit -a -m "Add publish tasks"
[master 97e4abf] Add publish tasks
 2 files changed, 12 insertions(+), 1 deletion(-)
> make login
$(aws ecr get-login --no-include-email)
Login Succeeded
> make test && make release
docker-compose build --pull release
Building release
...
...
todobackend_db_1 is up-to-date
Creating todobackend_app_1 ... done
App running at http://localhost:32774
$ make publish
docker-compose push release app
Pushing release (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
53ca7006d9e4: Layer already exists
ca208f4ebc53: Layer already exists
1702a4329d94: Layer already exists
e2aca0d7f367: Layer already exists
c3e0af9081a5: Layer already exists
20ae2e176794: Layer already exists
cd7100a72410: Layer already exists
latest: digest: sha256:d64e1771440208bde0cabe454f213d682a6ad31e38f14f9ad792fabc51008888 size: 1787
Pushing app (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:97e4abf)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
53ca7006d9e4: Layer already exists
ca208f4ebc53: Layer already exists
1702a4329d94: Layer already exists
e2aca0d7f367: Layer already exists
c3e0af9081a5: Layer already exists
20ae2e176794: Layer already exists
cd7100a72410: Layer already exists
97e4abf: digest: sha256:d64e1771440208bde0cabe454f213d682a6ad31e38f14f9ad792fabc51008888 size: 1787
> make clean
docker-compose down -v
Stopping todobackend_app_1 ... done
Stopping todobackend_db_1 ... done
...
...
> make logout
docker logout https://385605022855.dkr.ecr.us-east-1.amazonaws.com
Removing login credentials for 385605022855.dkr.ecr.us-east-1.amazonaws.com
```
Running the updated Make workflow
# 从 ECR 中提取 Docker 映像
现在，您已经学习了如何将 Docker 映像发布到 ECR，让我们关注在各种场景下运行的 Docker 客户端如何从 ECR 中提取您的 Docker 映像。回想一下本章开头对 ECR 的介绍，客户端访问 ECR 存在多种场景，现在我们将在 ECS 容器实例作为您的 Docker 客户端的上下文中重点介绍这些场景:
*   ECS 容器实例运行在与您的 ECR 存储库相同的帐户中
*   ECS 容器实例在 ECR 存储库中的不同帐户中运行
*   需要访问您的 ECR 存储库的 AWS 服务
# ECS 容器实例从同一帐户访问 ECR
当您的 ECS 容器实例在与 ECR 存储库相同的帐户中运行时，建议启用在 ECS 容器实例内部运行的 ECS 代理从 ECR 中提取 Docker 映像的方法是使用与应用于作为 ECS 容器实例运行的 EC2 实例的 IAM 实例角色相关联的 IAM 策略。您已经在上一章中看到了这种方法，其中 AWS 提供的 ECS 集群向导将一个名为`AmazonEC2ContainerServiceforEC2Role`的托管策略附加到集群中 ECS 容器实例的 IAM 实例角色，并注意到该策略中包含以下 ECR 权限:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
 "ecr:BatchCheckLayerAvailability",
 "ecr:GetDownloadUrlForLayer",
 "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}
```
AmazonEC2ContainerServiceforEC2Role policy
在前面的示例中，您可以看到授予了四个 ECR 权限，这四个权限共同允许 ECS 代理登录 ECR 并拉取 Docker 映像:
*   `ecr:GetAuthorizationToken`:允许检索有效期为 12 小时的认证令牌，该令牌可用于使用 Docker CLI 登录 ECR。
*   `ecr:BatchCheckLayerAvailability`:检查给定存储库中多个映像层的可用性。
*   `ecr:GetDownloadUrlForLayer`:检索 Docker 映像中给定图层的预签名 S3 下载网址。
*   `ecr:BatchGetImage`:重试给定存储库中 Docker 映像的详细信息。
这些权限足以登录 ECR 并拉取映像，但请注意，前面示例中的`Resource`属性允许访问您帐户中的所有存储库。
根据组织的安全要求，对所有存储库的这种广泛访问可能是可接受的，也可能是不可接受的-如果不是，那么您需要创建自定义 IAM 策略来限制对特定存储库的访问，如下所示:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ecr:GetAuthorizationToken",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
      ],
      "Resource": [
        "arn:aws:ecr:us-east-1:385605022855:repository/docker-in-aws/todobackend"
      ]
    }
  ]
}
```
Granting ECR login and pull permissions to specific repositories
在前面的示例中，请注意`ecr:GetAuthorizationToken`权限的范围仍然是所有资源，因为您没有登录到特定的 ECR 存储库，而是登录到给定区域中您的帐户的 ECR 注册表。然而，提取 Docker 映像所需的其他权限可以应用于单个存储库，您可以看到这些权限只允许用于您的 ECR 存储库的 ARN。
请注意，如果您还想在前面的示例中授予对 ECR 存储库的推送访问权限，则需要额外的 ECR 权限:
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ecr:GetAuthorizationToken",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecr:PutImage",         
        "ecr:InitiateLayerUpload",         
        "ecr:UploadLayerPart",         
        "ecr:CompleteLayerUpload"
      ],
      "Resource": [
        "arn:aws:ecr:us-east-1:385605022855:repository/docker-in-aws/todobackend"
      ]
    }
  ]
}
```
Granting ECR push permissions to specific repositories
# ECS 容器实例从不同的帐户访问 ECR
在较大的组织中，资源和用户被拆分到多个帐户是非常常见的，一种常见的模式是拥有一个中央构建帐户，应用工件(如 Docker 映像)集中存储在该帐户中。
下图说明了这种情况，其中您可能有几个运行 ECS 容器实例的帐户需要提取存储在中央存储库中的 Docker 映像:
![](img/5cf82ce0-1580-4267-aa6d-c6bf66054e75.png)
Multiple accounts requiring access to central ECR repositories
当您需要授予其他帐户访问您的 ECR 存储库的权限时，需要执行两项配置任务:
1.  在托管存储库的帐户中配置 ECR *资源策略*，这允许您定义策略的范围并将其应用到单个 ECR 存储库(这是*资源*)并定义*谁可以访问存储库(例如，AWS 帐户)以及*他们可以执行哪些*操作(例如，登录、推送和/或拉取映像)。这种定义*谁*可以访问给定存储库的能力允许通过资源策略启用和控制跨帐户访问。例如，在上图中，存储库被配置为允许从帐户`333333444444`和`555555666666`访问。*
 *2.  远程帐户中的管理员需要以 IAM 策略的形式分配权限，以便从您的 ECR 存储库中提取映像。这是一种委托访问的形式，只要通过 IAM 策略明确授予访问权限，托管 ECR 存储库的帐户就信任来自远程帐户的访问。例如，在上图中，ECS 容器实例分配了一个 IAM 策略，允许它们访问帐户`111111222222`中的 myorg/app-a 存储库。
# 使用 AWS 控制台配置 ECR 资源策略
您可以通过 ECS 控制台配置 ECR 资源策略，方法是打开相应的 ECR 存储库，选择**权限**选项卡，然后单击**添加**添加一组新的权限:
![](img/4dc40247-49ee-463d-ab22-2800808bfd0d.png)
Configuring ECR resource policies
在上图中，请注意，您可以通过主体设置将 AWS 帐户标识配置为主体，然后通过选择**仅拉操作**选项轻松允许拉访问。通过这种配置，您可能允许与远程帐户相关联的任何实体从该存储库中提取 Docker 映像。
![](img/c0f530e0-0975-491a-8e31-390eedb7a484.png)
Configuring ECR resource policies
请注意，如果您试图保存上图和上图中显示的配置，您将收到一个错误，因为我使用了无效的帐户。假设您确实使用了有效的帐户标识并保存了策略，将为配置生成以下策略文档:
```
{
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "RemoteAccountAccess",