on a MacBook Pro (2.4 GHz Intel, 4.0 GB RAM).
5.1 Effectiveness
Experiments. We ran our tool to analyze the effectiveness of
MACE on a suite of seven small to large PHP free and open-source
Web applications. As shown in Table 2, the applications range from
approximately 1k to 89k source lines of code (SLOC). These appli-
cations were used as benchmarks in previous research studies [28,
8, 24]. The results of our evaluation fall under the following cate-
gories: (1) vulnerabilities identiﬁed by MACE and detailed statis-
tics about the vulnerabilities identiﬁed in our experiments, (2) per-
formance, scalability of MACE and (3) the annotation effort re-
quired from the developers. We have veriﬁed by hand all of the au-
thorization vulnerabilities in the applications, which were reported
by the tool.
For each application, we annotate the authorization tuple vari-
ables and then run MACE with given annotations and the source
code. MACE then lists all of the conﬂicts, the vulnerabilities, their
locations in the source code and the values, which cause the incon-
sistencies.
Results summary. Table 3 presents the summary of our exper-
iments. The table lists the number of conﬂict reports, and also
shows how many of these were indeed vulnerabilities (true posi-
tives - TP) and how many of them were reported incorrectly (false
positives -FP) by our tool. Furthermore, the breakdown of the vul-
nerabilities (true positives) between the two types of privilege es-
calations namely HPEs and VPEs is presented in columns 4 and 5.
The last column in this table gives the breakdown of the identiﬁed
vulnerabilities were known (i.e. previously reported in CVEs or by
previous studies) versus unknown (i.e. zero-day vulnerabilities).
As reported in the last column of the table, MACE is able iden-
tify zero-day authorization vulnerabilities in the following appli-
cations: phpns, DCPportal, mybloggie and SCARF. In the
following subsection, we will go through the details of these vul-
nerabilities.
5.2 Vulnerabilities Identiﬁed
phpns The phpns application is an open-source news system. The
application allows three roles in the system for the users: 1) guest
users (unauthenticated users) who can only view the news articles;
2) normal users who must be logged into the system and use the
article management panels and 3) admin user who also must be
logged into the system and can access both article and user man-
agement panels. Basic permissions such as adding, deleting and
updating articles are set by default for the new users of the system.
$new_res = general_query(’INSERT INTO articles
(article_title, artcle_sbtitle,
article_author, article_cat,
article_text,...)
VALUES(’.$data[’article_title’].’,’
.$data[’article_subtitle’].’,’
.$_SESSION[’username’].’,’
.$data[’article_cat’].’,’
.$data[’article_text’]’’);
Listing 8: Inserting an article item in in inc/function.php, phpns
$items = $_POST; //get vars
...
$sql = general_query("DELETE FROM
".$databaseinfo[’prefix’]."".’articles’." WHERE id
IN (".$items.")");
Listing 9: Deleting an article item in article.php, phpns
Using MACE, we found seven vulnerabilities in this application,
all of which are previously unknown, two of which we describe be-
low. Consider the actual code for the inserting and deleting users,
shown in Listings 8 and 9 respectively. The ﬁrst vulnerability al-
lows an unauthenticated user can delete any comment without any
authorization checks. MACE was able to identify this because the
relevant authorization context is not consulted at the delete opera-
tion. The implication of this vulnerability is that an outside attacker
(who has no credentials in a given installation of phpns) can delete
any comment item in the application. This is an example of a verti-
1
2
3
4
5
6
7
8
9
1
2
3
Table 4: Details of Warnings
Number of violations
insert-update
5
21
0
3
0
8
0
insert-delete
2
25
0
3
1
3
0
Application
phpns
DCPPortal
DNScript
myBloggie
miniBloggie
SCARF
WeBid
insert-insert
0
0
0
0
0
1
0
cal privilege escalation attack (VPE). Another detected vulnerabil-
ity is found in manage.php that allows for an authenticated user
to delete other users’ news articles by providing arbitrary article
IDs (which are available to all users through inspection of URLs).
This vulnerability is a horizontal privilege escalation (HPE). We
have reported these and other vulnerabilities in phpns.
dcp-portal The dcp-portal application is an open-source con-
tent management system. This application allows two authenti-
cated roles: admin user and non-admin user (normal user). Con-
sider Listings 10, 11, and 12, which refer to the authorization op-
eration, insertion and deletion of agenda items in a calendar table.
Variable $_COOKIE["dcp5_member_admin"] is being used
to determine whether the user is an admin user or not. While insert-
ing an item in the agenda, this variable is consulted, and the agenda
item is entered in the table t_agenda. However, while deleting
the item, while the authorization function is consulted, the deletion
is based on a (user supplied) value $_REQUEST["agid"], thus
making the requests inconsistent. The implication of this vulnera-
bility is that it allows any user in the system to delete another user’s
agenda entries, thus making it a HPE, which was a previously un-
known vulnerability.
if (UserValid($_COOKIE["dcp5_member_id"])) {
...}
Listing 10: Authorization function in lib.php, dcp-portal
if ((isset($_REQUEST["action"])) && ($_REQUEST["action"]
== "add") && ($_REQUEST["mode"] == "write")) {
$sql = "INSERT INTO $t_agenda (user_id,
subject, message, date) VALUES
($_COOKIE[’dcp5_member_id’] ," .
htmlspclchars($_REQUEST[’subject’]).",".
htmlspclchars($_REQUEST[’aktivite’]).",
$date)";
$result = mysql_query($sql);}
Listing 11: Inserting an agenda in calendar.php, dcp-portal
if ((isset($_REQUEST["action"])) &&
($_REQUEST["action"]=="delete")) {
$sql = "DELETE FROM $t_agenda WHERE id =
’".$_REQUEST["agid"]."’";
$result = mysql_query($sql);}
1
2
1
2
3
4
5
6
7
1
2
3
this
function takes
Listing 12: Deleting an agenda in calendar.php, dcp-portal
We also found 44 other VPEs due to the incorrect implemen-
tation of UserStillStillAdmin function in dcp-portal.
The ﬁrst argument of
the value of
$_COOKIE["dcp5_member_id"] and determines whether the
user with this userID is an admin. The value for the userID comes
from a cookie variable and not from an established authorization
state at the server side, which makes all 44 distinct queries in the
admin path vulnerable to VPE.
myBloggie The MyBloggie application is an open-source blog-
ging software. When we ran MACE on this application, we found
six privilege escalation vulnerabilities. In three of these vulnera-
bilities, the validity of a session is not checked in many instances
as the check shown in Listing 13 does not appear in del.php, del-
cat.php, deluser.php ﬁles. Even in the ﬁles that do check this con-
straint, MACE found horizontal escalation attacks. The parame-
ters used to delete rows do not check for authorization informa-
tion. For instance, the parameter used to access and delete the
rows in POST_TBL is coming from user-supplied values such as
GET["post_id"] and is prune to HPE. MACE found three such
unreported vulnerabilities in this application.
1
if (!isset($_SESSION[’username’]) &&
!isset($_SESSION[’passwd’])) //go to login;
Listing 13: authorization Check in addcat.php, MyBloggie
miniBloggie The miniBloggie application is also a blogging
Web application. In this application, there is no role or privilege
level deﬁned for the users. Thus, users are either authenticated
($_SESSION[’user’] is set) or not. Even with this simple au-
thorization rule, the application is vulnerable to privilege escalation
as detected by MACE. These scenarios involved missing checks
that need to be present in order to ensure the user is a valid one
before access to table rows is granted. In del.php (Listing 15),
function verifyuser() is omitted, making way for the vulner-
ability, which was previously unknown.
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
1
2
3
session_start();
if (!verifyuser()){
header( "Location: ./login.php" );
}else {...
if (isset($_POST["submit"])) {
$sql = "INSERT INTO blogdata SET
user_id=’$id’,
subject=’$subject’,
message=’$message’"...";
Listing 14: Inserting a blog user in add.php, miniBloggie
session_start();
if (isset($_GET[’post_id’])) $post_id = $_GET[’post_id’];
if (isset($_GET[’confirm’])) $confirm = $_GET[’confirm’];
if ($confirm=="yes") {
dbConnect();
$sql = "DELETE FROM blogdata WHERE
post_id=$post_id";
Listing 15: Deleting a blog user in del.php, miniBloggie
SCARF The SCARF application is an open-source conference
management software which helps the user to submit and review
papers. The possible roles in SCARF are admin and normal user.
Both roles must be authenticated to interact with the software. Vari-
able $_SESSION[’privilege’] indicates whether a user is
an admin or not.
MACE detects several
types of authentication and autho-
rization bypass vulnerabilities in SCARF. For example,
in
generaloptions.php, the admin can delete users and mod-
ify the option table. The page has no authorization check be-
fore it proceeds to performing admin tasks. As a result of this
vulnerability, a normal user of the system who is legitimately au-
thenticated can delete other users. To ﬁx the problem this method,
require_admin(), should be added at the beginning of the ﬁle
which veriﬁes whether the current session is the admin session or
not. If it is not the admin session, the program exits.
if (isset($_GET[’delete_email’])) {
query("DELETE FROM users WHERE email=’" .
escape_str($_GET[’delete_email’]) . "’");
}
Listing 16: Deleting a user in generaloptions.php, SCARF
Table 5: Analysis of Queries
# query-path pairs
update
insert
222
2564
60
56
2
8
0
5
3
9
26
4
131
22
delete
920
58
13
2
1
12
7
# query-authzInfo
pairs
78
158
26
40
3
19
323
Application
phpns
DCPPortal
DNScript
myBloggie
miniBloggie
SCARF
WeBid
1
2
3
4
5
6
7
8
function require_admin() {
if (!is_admin()) {
die ("...");}
}
function is_admin() {
if ($_SESSION[’privilege’] == ’admin’) return TRUE;
else return FALSE;
}
Listing 17: Missing Authorization in generaloptions.php, SCARF
Ten other vulnerabilities reported by MACE in this applica-
tion can be attributed to a single reason. The reason for these
vulnerabilities being reported is that the constraining parameter
used in certain UPDATE or DELETE queries derives it value from
$_GET[’session_id’], which is an untrusted source (i.e.,
the HTTP client). The corresponding INSERT query uses the
$_SESSION[’user_id’] which is an authorization variable as
shown in the following code snippets. The column session_id
in table sessions is an auto-increment key. Since untrusted val-
ues are never part of server authorization state, the authorization
contexts for these queries were reported empty. Since the param-
eter $_GET[’session_id’] is provided by the user, and the
values are guessable (auto-incremented value), an attacker can im-
pose himself on any guessable session.
INSERT INTO sessions (name, user_id, starttime,
duration) VALUES
(mysql_real_escape_string($_POST[’name’]),
$_SESSION[’user_id’], $date, $duration)
Listing 18: Inserting a session addsession.php, SCARF
UPDATE sessions SET user_id=$_POST[’chair’] WHERE
session_id=$_GET[’session_id’]
Listing 19: Updating a session in editsession.php, SCARF
Webid and DNScript MACE did not report any conﬂicts in these
two applications.
Vulnerability & Inconsistency Reports. Table 4 shows the break-
down of the number of inconsistencies reported by our tool. The