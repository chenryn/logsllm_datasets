## PostgreSQL JOB 插件 pg_timetable
### 作者  
digoal  
### 日期  
2021-01-21   
### 标签  
PostgreSQL , pg_timetable , cron , job 
----  
## 背景  
https://github.com/cybertec-postgresql/pg_timetable  
[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)
![](https://github.com/cybertec-postgresql/pg_timetable/workflows/Go%20Build%20&%20Test/badge.svg)
[![Coverage Status](https://coveralls.io/repos/github/cybertec-postgresql/pg_timetable/badge.svg?branch=master&service=github)](https://coveralls.io/github/cybertec-postgresql/pg_timetable?branch=master)
[![Go Report Card](https://goreportcard.com/badge/github.com/cybertec-postgresql/pg_timetable)](https://goreportcard.com/report/github.com/cybertec-postgresql/pg_timetable)
[![Release](https://img.shields.io/github/release/cybertec-postgresql/pg_timetable.svg)](https://github.com/cybertec-postgresql/pg_timetable/releases/latest)
[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go)
[![Docker Pulls](https://img.shields.io/docker/pulls/cybertecpostgresql/pg_timetable)](https://hub.docker.com/r/cybertecpostgresql/pg_timetable)
[![Dependabot Status](https://api.dependabot.com/badges/status?host=github&repo=cybertec-postgresql/pg_timetable)](https://dependabot.com)
pg_timetable: Advanced scheduling for PostgreSQL
================================================
**pg_timetable** is an advanced job scheduler for PostgreSQL, offering many advantages over traditional schedulers such as **cron** and others.
It is completely database driven and provides a couple of advanced concepts.
```terminal
# ./pg_timetable
Application Options:
  -c, --clientname=               Unique name for application instance
  -v, --verbose                   Show verbose debug information [$PGTT_VERBOSE]
  -h, --host=                     PG config DB host (default: localhost) [$PGTT_PGHOST]
  -p, --port=                     PG config DB port (default: 5432) [$PGTT_PGPORT]
  -d, --dbname=                   PG config DB dbname (default: timetable) [$PGTT_PGDATABASE]
  -u, --user=                     PG config DB user (default: scheduler) [$PGTT_PGUSER]
  -f, --file=                     SQL script file to execute during startup
      --password=                 PG config DB password (default: somestrong) [$PGTT_PGPASSWORD]
      --sslmode=[disable|require] What SSL priority use for connection (default: disable)
      --pgurl=                    PG config DB url [$PGTT_URL]
      --init                      Initialize database schema and exit. Can be used with --upgrade
      --upgrade                   Upgrade database to the latest version
      --no-program-tasks            Disable executing of PROGRAM tasks [$PGTT_NOPROGRAMTASKS]
```      
## Table of Contents
  - [1. Main features](#1-main-features)
  - [2. Installation](#2-installation)
    - [2.1. Official release packages](#21-official-release-packages)
    - [2.2. Docker](#22-docker)
    - [2.3. Build from sources](#23-build-from-sources)
  - [3. Features and advanced functionality](#3-features-and-advanced-functionality)
    - [3.1. Base task](#31-base-task)
    - [3.2. Task chain](#32-task-chain)
    	- [3.2.1. Chain execution configuration](#321-chain-execution-configuration)
    	- [3.2.2. Chain execution parameters](#322-chain-execution-parameters)
    - [3.3. Example usages](#33-example-usages)
  - [4. Database logging and transactions](#4-database-logging-and-transactions)
  - [5. Runtime information](#5-runtime-information)
  - [6. Schema diagram](#6-schema-diagram)
  - [7. Contributing](#7-contributing)
  - [8. Support](#8-support)
  - [9. Authors](#9-authors)
## 1. Main features
- Tasks can be arranged in chains
- A chain can consist of SQL and executables
- Parameters can be passed to chains
- Missed tasks (possibly due to downtime) can be retried automatically
- Support for configurable repetitions
- Builtin tasks such as sending emails, etc.
- Fully database driven configuration
- Full support for database driven logging
- Cron-style scheduling
- Optional concurrency protection
## 2. Installation
pg_timetable is compatible with the latest supported [PostgreSQL versions](https://www.postgresql.org/support/versioning/): 11, 12 and 13. 
  If you want to use pg_timetable with older versions (9.5, 9.6 and 10)...
please, execute this SQL script before running pg_timetable:
```sql
CREATE OR REPLACE FUNCTION starts_with(text, text)
RETURNS bool AS 
$$
SELECT 
	CASE WHEN length($2) > length($1) THEN 
		FALSE 
	ELSE 
		left($1, length($2)) = $2 
	END
$$
LANGUAGE SQL
IMMUTABLE STRICT PARALLEL SAFE
COST 5;
```
### 2.1 Official release packages
You may find binary package for your platform on the official [Releases](https://github.com/cybertec-postgresql/pg_timetable/releases) page. Right now `Windows`, `Linux` and `macOS` packages are available.
### 2.2 Docker
The official docker image can be found here: https://hub.docker.com/r/cybertecpostgresql/pg_timetable
The `latest` tag is up to date with the `master` branch thanks to [this github action](https://github.com/cybertec-postgresql/pg_timetable/blob/master/.github/workflows/docker.yml).
CLI:
```sh
docker run --rm \
  cybertecpostgresql/pg_timetable:latest \
  -h 10.0.0.3 -p 54321 -c worker001
```
Environment variables:
```sh
docker run --rm \
  -e PGTT_PGHOST=10.0.0.3 \
  -e PGTT_PGPORT=54321 \
  cybertecpostgresql/pg_timetable:latest \
  -c worker001
```
### 2.3 Build from sources
1. Download and install [Go](https://golang.org/doc/install) on your system.
2. Clone **pg_timetable** using `go get`:
```sh
$ env GIT_TERMINAL_PROMPT=1 go get github.com/cybertec-postgresql/pg_timetable/
Username for 'https://github.com': 
Password for 'https://PI:EMAIL': 
```
3. Run `pg_timetable`:
```sh
$ cd ~/go/src/github.com/cybertec-postgresql/pg_timetable/
$ go run main.go --dbname=dbname --clientname=worker001 --user=scheduler --password=strongpwd
```
Alternatively, build a binary and run it:
```sh
$ go build
$ ./pg_timetable --dbname=dbname --clientname=worker001 --user=scheduler --password=strongpwd
```
4. (Optional) Run tests in all sub-folders of the project:
```sh
$ cd ~/go/src/github.com/cybertec-postgresql/pg_timetable/
$ go get github.com/stretchr/testify/
$ go test ./...
```
Alternatively, run tests using postgres docker image:
```sh
$ RUN_DOCKER=true go test ./...
```
## 3. Features and advanced functionality
The scheduling in **pg_timetable** encompasses *three* different stages to facilitate the reuse with other parameters or additional schedules.