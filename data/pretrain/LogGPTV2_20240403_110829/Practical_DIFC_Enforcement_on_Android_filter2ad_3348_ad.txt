### Security Label Changes and Intent Labeling in Weir

#### Explicit Label Changes and Their Implications

When a component instance changes its security label, it must adhere to the policy for the security classes involved, as detailed in Section 2.3. For example, to read secret data labeled with {L1}, a component instance may raise its label to {L1} if it has the necessary authorization (e.g., a capability) from the owner of {L1} (see Section 5.1 for the policy syntax).

**Problem of Explicit Label Change:**
A component instance may establish Binder connections with other instances through the Activity Manager and use direct Binder RPC. When an instance changes its label, its existing Binder RPC connections (established via indirect communication, see Section 2.4) may be affected. Specifically, the new label may be higher or lower relative to the labels of the connected instances. This can result in the inability to send or receive data on existing connections due to strict DIFC checks on Binder transactions. Additionally, explicit label changes can cause inconsistencies between the component instance's context and its attached storage layer. Despite these issues, explicit label changes are sometimes unavoidable in applications that use Weir.

**Our Solution:**
Weir provides an intent labeling mechanism, allowing components to label calls (i.e., intent messages) before they are sent to the Activity Manager service. This ensures that the target component is instantiated with the label set on the intent. A component can also instantiate itself with the desired secrecy label by specifying itself as the intent's target. This mechanism eliminates the need for explicit label changes.

**Security of Intent Labeling:**
Weir does not blindly trust the label set on the intent, as applications could abuse this mechanism for unauthorized declassification. For example, a malicious component with the label {L1} might add secret data to an intent and set an empty label (i.e., {}) on the intent before calling itself with it. To prevent such misuse, Weir checks if the calling application would be authorized to explicitly change its current label to the label on the intent, according to the policy (see Section 5.1). Only if the caller passes this check can the call proceed.

While we have not encountered use cases that cannot be expressed using intent labeling, our implementation still allows explicit label changes, primarily for expert developers who may need to make temporary changes to their instance labels. However, explicit label changes should be used with caution, as our design does not address problems arising from label changes after instantiation (e.g., dropped Binder calls), since labels do not propagate to existing Binder connections and files to prevent label explosion (explained in Section 3).

### Domain Declassification in Weir

#### Traditional Network Declassification Issues

Traditional network declassification often involves declaring trust in the exporting subject, which can be problematic in an internet-driven environment. It is more practical to enforce data secrecy based on the destination rather than the exporter. Weir introduces domain declassification, allowing data owners to specify trust in terms of the receiver, i.e., the target Web domain. Data owners can associate a set of network domains (tD) with their security class (t). When data in context {t} is exported to the network, Weir implicitly declassifies t if the destination domain is in tD. This approach does not require the data owner to explicitly declassify or trust the exporting application.

**Example Use Case:**
In Section 8, we discuss an example where an enterprise wants data to be exported only to a set of enterprise domains, regardless of the exporting application. This policy allows users to use the same email application for both personal and work accounts while preventing accidental export of work data to a personal SMTP server. Domain declassification not only addresses the goal of practical declassification in a network-driven environment but also prevents accidental data export to untrusted servers.

**Comparison with Other Systems:**
Weir is not the first IFC system to use domains for declassification, but most prior systems consider domains as security principals (e.g., COWL [41], Bauer et al. [5]). For instance, COWL confines JavaScript using a declassification policy similar to the same-origin policy (SOP), where code executes in the context of its origin and possesses declassification privileges for export to the origin's Web domain. In COWL, the origin Web domain is a first-class security principal because it has a physical presence on the device in the form of running code. On Android, there is no direct correlation between Web domains and applications; thus, Web domains are not security principals. Weir's approach of expressing trust in the receiver (i.e., the Web domain) rather than the sender is unique among OS-level DIFC systems.

**Hails Comparison:**
Hails [15], an IFC web framework for user privacy, is closer to Weir’s approach, as it allows users to declassify their data for specific domains. Hails prompts users to explicitly declassify when network requests to disallowed domains are first made, which may not be feasible on Android (see Section 3).

**Limitations:**
Weir's enforcement is limited to the device and may not defeat an adversary controlling the network. While this aspect is relaxed in our threat model, DNSSEC or IPsec could be used in such scenarios.

### Implementation Details

#### Weir on Android

We implemented Weir on Android v5.0.1 and the Android Kernel v3.4. The source code is available at http://wspr.csc.ncsu.edu/weir/.

**5.1 Weir’s DIFC Policy:**
Weir derives its policy structure from the Flume DIFC model [21], which consists of tags and labels. A data owner (O) defines a security class for sensitive data as a secrecy tag (t). A set of tags forms a secrecy label (S). Weir enforces the IFC secrecy guarantee, "no read up, no write down" [6]. Information can flow from one label to another only if the latter dominates, i.e., is a superset of the former. Weir applies this strict DIFC check to direct Binder communication and file accesses.

Each tag t has associated capabilities, namely t+ (for reading) and t− (for declassification), which data owners delegate to specific apps or all other apps (i.e., the global capability set G). At any point, a process P has an effective capability set composed of the capabilities delegated to its application (CP) and the capabilities in G. P can change its label SP to SP+ by adding a tag t if and only if t+ ∈ CP ∪ G. Similarly, P can change its label SP to SP− by removing a tag t if and only if t− ∈ CP ∪ G. The network interface has an empty label, i.e., SN = {}. Thus, a process P must have an empty label (i.e., SP = {}) or the ability to change its label to SP = {} to create a network connection, i.e., ∀t ∈ SP, t− ∈ CP ∪ G. Additionally, Weir extends Flume’s syntax with the domain declassification capability tD, a set of trusted Web domains for tag t specified by the owner O. For a network export to a domain d ∈ tD, t is implicitly declassified.

**5.2 Component Polyinstantiation:**
When a component calls (sends an intent message or queries a content provider), the Activity Manager resolves the target component using the static information in the application manifest. Weir does not interfere with this intent resolution process. The Activity Manager then chooses the actual runtime instance of the resolved component, where Weir’s polyinstantiation takes effect. Weir controls component instantiation without modifying the components themselves, making it compatible with all developer manifest options except those that control instantiation. Section 7.2 provides a compatibility evaluation for such options. For a detailed explanation of Android’s component startup workflow and Weir’s component instantiation logic, see Appendix A.

**5.3 File-system Layering:**
We chose OverlayFS [29] over alternatives (e.g., aufs) because it is included in the Linux kernel (since v3.18). As the current OverlayFS patch is incompatible with SELinux, we set SELinux to monitoring mode. This is a temporary limitation, as OverlayFS developers are working towards full integration [45], which is on SELinux’s Kernel ToDo list [10]. Alternatively, we could use a fine-grained block-level copy-on-write file system (e.g., BTRFS [32]), which has advantages described in the trade-offs (Section 9). However, while we could compile the Android Linux kernel with BTRFS, the build system support tools required to build Android’s sparse-images for BTRFS (e.g., ext4 utils for ext4) are missing. Therefore, our prototype uses OverlayFS, as it does not require user-space support.

**5.4 Process Initialization:**
On Android, the zygote process forks and prepares new processes for applications. When a new process is forked, Weir sets its secrecy label in the kernel and uses zygote to mount the appropriate storage layer to the process’s mount namespace based on its label. If the process has a non-empty label, Weir separates the process’s mount namespace from the global mount namespace using the unshare system call and mounts the appropriate OverlayFS copy-on-write layer based on the label on top of the unlabeled file system. New layers are allocated when new labels are first encountered. Weir maintains the mapping between a label, its assigned layer, and the specific copy-on-write directories used for it.

**5.5 Kernel Enforcement:**
Weir uses a Linux security module (LSM) to track the security contexts of processes and files in the kernel. We integrated the multi-LSM patch [35] to enable concurrent SELinux and Weir enforcement. The security context of a process contains its secrecy label and capabilities, while that of a file only contains a secrecy label. We now describe the enforcement for file access, Binder communication, and network access:

1. **Files:** Weir uses the file permission LSM hook to mediate each file read and write access. The secrecy label of a file (stored in the xattrs) is initialized from the label of the process that first writes it.
2. **Binder:** Weir mediates Binder transactions in the kernel using the Binder LSM hooks. For compatibility, Weir whitelists Binder communication with Android system services in the kernel. To prevent apps from misusing whitelisted services as implicit data channels, we manually analyzed all system service APIs and modified APIs that could be misused, e.g., the Clipboard Manager service provides label-specific clipboards in Weir.
3. **Network:** Weir mediates the socket connect and bind operations in the kernel. The tags in the calling process’s label that cannot be declassified using its capability set are sent to Weir’s system service in the userspace via a synchronous upcall, along with the IP address of the destination server. Weir’s system service then resolves the domain name from the IP address, which can be challenging as a reverse DNS lookup may not always resolve to the same domain used in the initial request. Fortunately, Android proxies all DNS lookups from applications to a separate system daemon. We modify the daemon to notify Weir when a process performs a DNS lookup, including the domain name and the IP address returned. During the domain declassification upcall, this mapping is referenced to identify the destination domain. Weir allows the connection only if all the tags in the upcall can be declassified for that domain.

### Security of Polyinstantiation

Floating labels were first predicted to be prone to information leaks by Denning [8]. While language-level floating label IFC models (e.g., COWL [41] and LIO [40,42]) can mitigate such leaks, securely using floating labels remains a challenge for OS-level DIFC systems (e.g., IX [23] and Asbestos [44]). We discuss an attack on an OS-level floating label DIFC system, as described in Krohn and Tromer’s paper on the non-interference of Flume [20], and show how Weir is resistant to such data leaks. We use Android’s terminology to describe the attack.

We describe the attack twice: once in a floating label system without polyinstantiation (Figure 5) and once in Weir (Figure 6). Figure 5a shows the initial state of the malicious component, and subsequent figures illustrate the attack progression and how Weir mitigates it.