security properties:
Unforgeability:
It must be unfeasible for an adversarial user
to convince an honest veriﬁer that they are in possession
of a credential if they are in fact not (i.e., if they have not
received valid partial credentials from at least t authorities).
It must be unfeasible for an adversarial authority
to learn any information about the attribute m during the
execution of the IssueCred protocol, except for the fact
that m satisﬁes φ.
Blindness:
Unlinkability / Zero-knowledge:
It must be unfeasible for
an adversarial veriﬁer (potentially working with an adversar-
ial authority) to learn anything about the attribute m, except
that it satisﬁes φ(cid:48), or to link the execution of ProveCred
with either another execution of ProveCred or with the
execution of IssueCred (for a given attribute m).
C. Foundations of Coconut
Before giving the full Coconut construction, we ﬁrst
recall the credentials scheme proposed by Pointcheval and
Sanders [43]; their construction has the same properties as
CL-signatures [16] but is more efﬁcient. The scheme works in
a bilinear group (G1, G2, GT ) of type 3, with a bilinear map
e : G1 × G2 → GT as described in Section III-A.
O P.Setup(1λ) → (params): Choose
a bilinear group
(G1, G2, GT ) with order p, where p is a λ-bit prime number.
Let g1 be a generator of G1, and g2 a generator of G2. The
system parameters are params = (G1, G2, GT , p, g1, g2).
O P.KeyGen(params) → (sk, vk): Choose a random se-
cret key sk = (x, y) ∈ F2
p. Parse params =
(G1, G2, GT , p, g1, g2), and publish the veriﬁcation key
vk = (g2, α, β) = (g2, gx
2 , gy
2 ).