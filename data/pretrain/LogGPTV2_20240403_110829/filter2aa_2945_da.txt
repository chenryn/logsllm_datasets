In this chapter, you will turn your attention to the model aspect of the
MVVM pattern. In particular,  you will see how to implement a model that a
UWP app can use to retrieve and update data in a remote database.
Download from finelybook PI:EMAIL
1013
Retrieving data from a database
So far, the data you have used has been confined to a simple collection
embedded in the ViewModel of the app. In the real world, the data displayed
and maintained by an app is more likely to be stored in a data source such as
a relational database.
UWP apps cannot directly access a relational database by using
technologies provided by Microsoft (although some third-party database
solutions are available). This might sound like a severe restriction, but there
are sensible reasons for this limitation. Primarily, it eliminates dependencies
that a UWP app might have on external resources, making the app a
standalone item that can be easily packaged and downloaded from the
Windows Store without requiring users to install and configure a database-
management system on their computer. Additionally, many Windows 10
devices are resource constrained and don’t have the memory or disk space
available to run a local database-management system. However, many
business apps will still have a requirement to access a database; to address
this scenario, you can use a web service.
Web services can implement a variety of functions, but one common
scenario is to provide an interface with which an app can connect to a remote
data source to retrieve and update data. A web service can be located almost
anywhere, from the computer on which the app is running to a web server
hosted on a computer on a different continent. As long as you can connect to
the web service, you can use it to provide access to the repository of your
information. Microsoft Visual Studio provides templates and tools with
which you can build a web service very quickly and easily. The simplest
strategy is to base the web service on an entity model generated by using the
Entity Framework, as shown in the following diagram:
Download from finelybook PI:EMAIL
1014
The Entity Framework is a powerful technology with which you can
connect to a relational database. It can reduce the amount of code that most
developers need to write to add data access capabilities to an app. This is
where you will start, but first, you need to set up the AdventureWorks
database, which contains the details of AdventureWorks customers.
Note There is not sufficient space in this book to go into great detail on
how to use the Entity Framework, and the exercises in this section walk
you through only the most essential steps to get started. If you want
more information, look at “Entity Framework” on the Microsoft website
at http://msdn.microsoft.com/data/aa937723.
To make the scenario more realistic, the exercises in this chapter show
you how to create the database in the cloud by using Microsoft Azure SQL
Database and how to deploy the web service to Azure. This architecture is
common to many commercial apps, including e-commerce applications,
Download from finelybook PI:EMAIL
1015
mobile banking services, and even video streaming systems.
Note The exercises require that you have an Azure account and
subscription. If you don’t already have an Azure account, you can sign
up for a free trial account at https://azure.microsoft.com/pricing/free-
trial/. Additionally, Azure requires that you have a valid Microsoft
account with which it can associate your Azure account. You can sign
up for a Microsoft account at https://signup.live.com/.
Create an Azure SQL Database server and install the AdventureWorks
sample database
1. Using a web browser, connect to the Azure portal at
https://portal.azure.com. Sign in using your Microsoft account.
2. In the toolbar on the left of the portal, click New.
3. On the New page, click Databases, and then click SQL Database.
4. In the SQL Database pane, perform the following tasks:
a. In the Name box, type AdventureWorks.
b. Leave the Subscription box set to the name of your Azure
subscription
c. In the Resource group box, click Create New, and type awgroup.
d. In the Select source drop-down list box, click
Sample(AdventureWorksLT).
e. In the Server section, click Configure required settings. In the New
Server pane, type a unique name for your server. (Use your company
name or even your own name; I used csharpstepbystep2017. If the
name you enter has been used by someone else, you will be alerted, in
which case enter another name.) Enter a name and password for the
administrator login (make a note of these items; I used JohnSharp,
but I am not going to tell you my password), select the location
closest to you, and then click Select to return to the SQL Database
Download from finelybook PI:EMAIL
1016
pane.
f. Under the prompt “Want to use SQL elastic pool?” click Not now.
g. Click Pricing Tier. In the Choose Your Pricing Tier pane, click Basic
and then click Apply. (This is the cheapest option if you are paying
for the database yourself, and it will suffice for the exercises in this
chapter. If you are building a large-scale commercial app, you will
probably need to use a Premium pricing tier, which provides much
more space and higher performance but at a higher cost.)
Important Do not select any pricing tier other than Basic, and do
not enable SQL elastic pool, unless you want to receive a
potentially significant bill at the end of the month. For information
about SQL Database pricing, see https://azure.microsoft.com/en-
us/pricing/details/sql-database/.
Download from finelybook PI:EMAIL
1017
h. Click Create, and wait while the database server and database are
created. You can monitor progress by clicking Notifications in the
toolbar.
5. In the toolbar on the left of the Azure portal, click All resources.
6. On the Browse page, in the All Resources pane, click your SQL server
(not the AdventureWorks SQL database).
Download from finelybook PI:EMAIL
1018
7. In the toolbar on the left of the pane, click Firewall/Virtual Networks.
8. In the Firewall/Virtual Networks pane, click Add client IP:
9. Click Save. Verify that the message “Successfully updated server
firewall rules” appears, and then click OK.
Note These steps are important. Without them, you will not be able
to connect to the database from applications running on your
computer. You can also create firewalls that span a range of IP
addresses if you need to open access to a set of computers.
The sample AdventureWorks database contains a table named Customer
in the SalesLT schema. This table includes the columns containing the data
presented by the Customers UWP app and also several others. Using the
Entity Framework, you can choose to ignore columns that are not relevant,
but you will not be able to create new customers if any of the columns you
ignore do not allow nulls and do not have default values. In the Customer
Download from finelybook PI:EMAIL
1019
table, this restriction applies to the NameStyle, PasswordHash, and
PasswordSalt columns (used for encrypting users’ passwords). To avoid
complications and to enable you to focus on the functionality of the app
itself, in the next exercise you will remove these columns from the Customer
table.
Remove unneeded columns from the AdventureWorks database
1. In the Azure portal, in the left pane, click All Resources, and then click
the AdventureWorks database.
2. In the toolbar above the AdventureWorks SQL Database pane, click
Tools, and then click Open In Visual Studio.
3. In the Open In Visual Studio pane, click Open In Visual Studio.
4. If the Did You Mean To Switch Applications? message appears, click
Yes.
Visual Studio will start up and prompt you to connect to the database.
5. In the Connect dialog box, enter the administrator password that you
specified earlier, and then click Connect.
Download from finelybook PI:EMAIL
1020
Visual Studio connects to the database, which appears in the SQL Server
Object Explorer window on the left side of the Visual Studio IDE.
6. In the SQL Server Object Explorer pane, expand the AdventureWorks
database, expand Tables, expand SalesLT.Customer, and then expand
Columns.
The columns in the table are listed. The three columns that are not used
by the application and that disallow null values must be removed.
Download from finelybook PI:EMAIL
1021
7. Click the NameStyle column, press the Ctrl key, and then click the
PasswordHash and PasswordSalt columns. Right-click the PasswordSalt
column, and then click Delete.
8. Visual Studio analyzes these columns. In the Preview Database Updates
dialog box, it displays a list of warnings and other issues that could
occur if the columns are removed.
Download from finelybook PI:EMAIL
1022
9. In the Preview Database Updates dialog box, click Update Database.
10. Close the SQL Server Object Explorer pane, but leave Visual Studio
2017 open.
Creating an entity model
Now that you have created the AdventureWorks database in the cloud, you
can use the Entity Framework to create an entity model that an app can use to
query and update information in this database. If you have worked with
databases in the past, you might be familiar with technologies such as
ADO.NET, which provides a library of classes that you can use to connect to
a database and run SQL commands. ADO.NET is useful, but it requires that
you have a decent understanding of SQL, and if you are not careful, it can
force you into structuring your code around the logic necessary to perform
SQL commands instead of focusing on the business operations of your app.
The Entity Framework provides a level of abstraction that reduces the
dependencies that your apps have on SQL.
Essentially, the Entity Framework implements a mapping layer between a
relational database and your app; it generates an entity model that consists of
collections of objects that your app can use just as it would any other
collection. A collection typically corresponds to a table in the database, and
each row in a table corresponds to an item in the collection. You perform
queries by iterating through the items in a collection, usually with Language-
Integrated Query (LINQ). Behind the scenes, the entity model converts your
queries into SQL SELECT commands that fetch the data. You can modify the
data in the collection, and then you can arrange for the entity model to
generate and perform the appropriate SQL INSERT, UPDATE, and DELETE
commands to perform the equivalent operations in the database. In short, the
Entity Framework is an excellent vehicle for connecting to a database and
retrieving and managing data without requiring you to embed SQL
commands in your code.
In the following exercise, you will create a very simple entity model for
the Customer table in the AdventureWorks database. You will follow what is
known as the database-first approach to entity modeling. In this approach,
the Entity Framework generates classes based on the definitions of tables in
the database. The Entity Framework also provides a code-first approach; that
Download from finelybook PI:EMAIL
1023
strategy can generate a set of tables in a database based on classes that you
have implemented in your app.
Note If you want more information about the code-first approach to
creating an entity model, see “Code First to an Existing Database” on
the Microsoft website at http://msdn.microsoft.com/data/jj200620.
Create the AdventureWorks entity model
1. In Visual Studio, open the Customers solution, located in the \Microsoft
Press\VCSBS\  Chapter 27\Web Service folder in your Documents
folder.
This project contains a modified version of the Customers app from
Chapter 26. The ViewModel implements additional commands, which
let a user navigate to the first or last customer in the customers
collection, and the command bar contains First and Last buttons that
invoke these commands. Additionally, the Cortana search functionality
has been removed to enable you to focus on the tasks at hand. (You are
more than welcome to add this feature back if you want a voice-
activated version of the app.)
2. In Solution Explorer, right-click the Customers solution (not the
Customers project), point to Add, and then click New Project.
3. In the Add New Project dialog box, in the left pane, click the Web node.
In the middle pane, click the ASP.NET Web Application template (make
sure that you don’t accidentally select the ASP.NET Core Web
Application template). In the Name box, type
AdventureWorksService, and then click OK.
4. In the New ASP.NET Web Application - AdventureWorksService
dialog box, click Azure API App, verify that the Web API check box is
selected, and then click OK:
Download from finelybook PI:EMAIL
1024
As mentioned at the start of this section, you cannot access a relational
database directly from a UWP app, including when you use the Entity
Framework. Instead, you have created an Azure API app (this is not a
UWP app), and you will host the entity model that you create in this
app. Azure API App template enables you to build a web service that
you can host by using Azure, and enable client applications to connect
quickly and easily. The Web API elements provide additional wizards
and tools with which you can quickly create the code for the web
service, which is what you will do in the next exercise. This web service
will provide remote access to the entity model for the Customers UWP
app.
5. In Solution Explorer, right-click the AdventureWorksService project,
and then click Properties.
6. On the Properties page, click the Web tab in the left column.
7. On the Web page, click “Don’t open a page. Wait for a request from an
external application.”
Normally, when you run a web app from Visual Studio, the web browser
(Microsoft Edge) opens and attempts to display the home page for the
Download from finelybook PI:EMAIL
1025
app. But the AdventureWorksService app does not have a home page;
the purpose of this app is to host the web service to which client apps
can connect and retrieve data from the AdventureWorks database.
8. In the Project Url box, change the address of the web app to
http://localhost:50000/, and then click Create Virtual Directory. In the
Microsoft Visual Studio message box that appears, verify that the virtual
directory was created successfully, and then click OK.
By default, the ASP.NET project template creates a web app that is
hosted with IIS Express, and it selects a random port for the URL. This
configuration sets the port to 50000 so that the subsequent steps in the
exercises in this chapter can be described more easily.
9. On the File menu, click Save All, and then close the Properties page.
10. In Solution Explorer, in the AdventureWorksService project, right-click
the Models folder, point to Add, and then click New Item.
11. In the Add New Item - AdventureWorksService dialog box, in the left
column, click the Data node. In the middle pane, click the ADO.NET
Entity Data Model template. In the Name box, type
AdventureWorksModel, and then click Add.
Download from finelybook PI:EMAIL
1026
The Entity Data Model Wizard starts. You can use this wizard to
generate an entity model from an existing database.
12. On the Choose Model Contents page of the wizard, click EF Designer
From Database, and then click Next.
13. On the Choose Your Data Connection page, click New Connection.
14. If the Choose Data Source dialog box appears, select Microsoft SQL
Server in the Data Source box, and then click Continue.
Note The Choose Data Source dialog box appears only if you have
not previously used the Data Connection wizard and selected a
data source.
In the Connection Properties dialog box, in the Server Name box, type
Download from finelybook PI:EMAIL
1027
the following: tcp:.database.windows.net,1433, where
 is the unique name of the Azure SQL Database server
that you created in the previous exercise. Click Use SQL Server
Authentication and enter the name and password that you specified for
the administrator login in the previous exercise. Click Save my
Password. In the Select Or Enter A Database Name box, type
AdventureWorks, and then click OK.
This action creates a connection to the AdventureWorks database
Download from finelybook PI:EMAIL
1028
running in Azure.
15. On the Choose Your Data Connection page, click No, Exclude Sensitive
Data From The Connection String. I Will Set It In My Application
Code. Verify that Save Connection Settings In Web.Config As is
selected, and then confirm that the name of the connection string is
AdventureWorksEntities. Click Next.
16. On the Choose Your Version page, select Entity Framework 6.x, and
then click Next.
17. On the Choose Your Database Objects And Settings page, expand
Tables, expand SalesLT, and then select Customer. Verify that the
Pluralize Or Singularize Generated Object Names check box is selected.
(The other two options on this page will also be selected by default.)
Observe that the Entity Framework generates the classes for the entity
Download from finelybook PI:EMAIL
1029
model in the AdventureWorksModel namespace, and then click Finish.
The Entity Data Model Wizard generates an entity model for the
Customer table and displays a graphical representation in the Entity
Model editor on the screen, like this:
Download from finelybook PI:EMAIL
1030
If the following Security Warning message box appears, select the Do
Not Show This Message Again check box, and then click OK. This
security warning appears because the Entity Framework uses a
technology known as T4 templates to generate the code for your entity
model, and it has downloaded these templates from the web by using
NuGet. The Entity Framework templates have been verified by
Microsoft and are safe to use.
18. In the Entity Model editor, right-click the MiddleName column and then
click Delete From Model. Using the same process, delete the Suffix,
CompanyName, and SalesPerson columns from the entity model.
Download from finelybook PI:EMAIL
1031
The Customers app does not use these columns, and there is no need to
retrieve them from the database. They allow null values, so they can
safely be left as part of the database table. However, you should not
remove the rowguid and ModifiedDate columns. These columns are
used by the database to identify rows in the Customer table and track
changes to these rows in a multiuser environment. If you remove these
columns, you will not be able to save data back to the database correctly.
19. On the Build menu, click Build Solution.
20. In Solution Explorer, in the AdventureWorksService project, expand the
Models folder, expand AdventureWorksModel.edmx, expand
AdventureWorksModel.tt, and then double-click Customer.cs.
This file contains the class that the Entity Data Model Wizard generates
to represent a customer. This class contains automatic properties for
each of the columns in the Customer table that you have included in the
entity model:
Click here to view code image
public partial class Customer
{
    public int CustomerID { get; set; }
    public string Title { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string EmailAddress { get; set; }
    public string Phone { get; set; }
    public System.Guid rowguid { get; set; }
    public System.DateTime ModifiedDate { get; set; }
}
21. In Solution Explorer, under the entry for AdventureWorksModel.edmx,
expand AdventureWorksModel.Context.tt, and then double-click
AdventureWorksModel.Context.cs.
This file contains the definition of a class called
AdventureWorksEntities. (It has the same name as you used when you
generated the connection to the database in the Entity Data Model
Wizard.)
Click here to view code image
public partial class AdventureWorksEntities : DbContext
Download from finelybook PI:EMAIL
1032
{
    public AdventureWorksEntities()
        : base("name=AdventureWorksEntities")
    {
    }
    protected override void OnModelCreating(DbModelBuilder
modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }
    public DbSet Customers { get; set; }
}
The AdventureWorksEntities class is descended from the DbContext
class, and this class provides the functionality that an app uses to
connect to the database. The default constructor passes a parameter to
the base-class constructor that specifies the name of the connection
string to use to connect to the database. If you look in the web.config
file, you will find this string in the  section. It
contains the parameters (among other things) that you specified when
you ran the Entity Data Model Wizard. However, this string does not
contain the password information required to authenticate the
connection because you elected to provide this data at runtime. You will
handle this in the following steps.
You can ignore the OnModelCreating method in the
AdventureWorksEntities class. The only other item is the Customers
collection. This collection has the type DbSet. The DbSet
generic type provides methods with which you can add, insert, delete,
and query objects in a database. It works in conjunction with the
DbContext class to generate the appropriate SQL SELECT commands
necessary to fetch customer information from the database and populate
the collection. It is also used to create the SQL INSERT, UPDATE, and
DELETE commands that run if Customer objects are added, modified,
or removed from the collection. A DbSet collection is frequently
referred to as an entity set.
22. In Solution Explorer, right-click the Models folder, click Add, and then
click Class.
23. In the Add New Item - AdventureWorksService dialog box, ensure that
Download from finelybook PI:EMAIL
1033
the Class template is selected. In the Name box, type
AdventureWorksEntities, and then click Add.
A new class named AdventureWorksEntities is added to the project and
is displayed in the Code and Text Editor window. This class currently
conflicts with the existing class of the same name generated by the
Entity Framework, but you will use this class to augment the Entity
Framework code by converting it to a partial class. A partial class is a
class in which the code is split across one or more source files. This
approach is useful for tools such as the Entity Framework because it
enables you to add your own code without the risk of having it
accidentally overwritten if the Entity Framework code is regenerated at
some point in the future.
24. In the Code and Text editor window, modify the definition of the
AdventureWorksEntities class to make it partial, as shown in bold in the
following.
Click here to view code image
public partial class AdventureWorksEntities
{
}
25. In the AdventureWorksEntities class, add a constructor that takes a string
parameter named password. The constructor should invoke the base-
class constructor with the name of the connection string previously
written to the web.config file by the Entity Data Model Wizard
(specified on the Choose Data Connection page).
Click here to view code image
public partial class AdventureWorksEntities
{
    public AdventureWorksEntities(string password)
        : base("name=AdventureWorksEntities")
    {
    }
}
26. Add the code shown below in bold to the constructor. This code
modifies the connection string used by the Entity Framework to include
the password. The Customers app will call this constructor and provide