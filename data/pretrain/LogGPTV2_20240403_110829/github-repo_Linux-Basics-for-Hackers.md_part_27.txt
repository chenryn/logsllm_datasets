Summary: SNMP library for Python
Home­page:
https://github.com/etingof/pysnmp Author:
Ilya Etingof \
Author­email: etingof\@gmail.com
License: BSD
Location: usr/local/lib/python3.6/dist­packages
Requires: ptsmi, pyansl, pycryptodomex
你可以看到这给了你很多关于包的信息，包括包所在的目录。
作为使用pip的替代，你可以直接从网站上下载包（注意要下载到合适的目录），解压它（如果解压软件参见第九章），然后运行下面的命令：
kali \>python setup.py install
这会安装任何已解压但是没安装的包。
#### *安装第三方模块*
要想安装其他Python社区成员开发的第三方模块（和官方发布的Python包相反），你可以简单地用wget从储存它的网站上下载它，解压模组，然后运行python
setup.py install命令。
作为示范，让我们从网站https://xael.org下载和安装我们在第八章使用过的端口扫描工具，nmap，的Python模组。
首先，我们需要从xael.org下载模块。
kali \>wget http://xael.org/norman/python/python-nmap/python-nmap-0.3.4.tar.gz
­­2014­12­28 17:48:32­­
http://xael.org/norman/python/python­nmap/python­nmap­ 0.3.4.tar.gz
Resolving xael.org (xael.org)...194.36.166.10
Connecting to xael.org (xael.org)\|194.36.166.10\|:80...connected.
­­snip­­
2018­21­28 17.48:34 (113 KB/s) ­ 'python­nmap­0.3.4.tar.gz' saved [40307/40307]
你可以看到我们使用wget命令和整个URL下载包。当包被下载好后，你需要用tar命令解压它，就像你在第九章学到的那样：
kali \>tar -xzf python-nmap-0.3.4.tar.gz
然后进入新的目录：
kali \>cd python-nmap-.03.4/
最后，在那个目录，使用下面的命令安装新的模块：
kali \>\~/python-nmap-0.3.4 \>python setup.py install
running install running build
running build_py creating build
­­snip­­
running install_egg_info
writing /usr/local/lib/python2.7/dist­packages/python_nmap­0.3.4.egg.info
其他无数的模块也可以使用这个方法。当你安装了这个nmap模块后，你可以通过导入模块在你的Python脚本中使用它。这个之后再说，现在让我们开始编写一些脚本。
### 开始使用*Python*编写脚本
现在你知道了如何在Python中安装模块，我希望概况一些Python基本的概念和术语，然后是基本语法。在这之后，你将编写一些对黑客有用的脚本，希望这展示Python的强大。
就像bash或其他脚本一样，我们可以使用任何文本编辑器创建Python脚本。在本章，为了使事情变得简单，我建议你使用一个简单地文本编辑器，例如Leafpad，但要知道Python有集成开发环境
IDE。一个IDE就像一个有内置功的文本编辑器，比如代码颜色，
故障排除，和编译。Kali内置 IDE PyCrust
，不过还有很多IDE可以下载，最好的就是富有争议的JetBrain的PyCharm。这是一个很好的IDE，它有很多让学校Python变得更容易和快捷的增强功能。它有一个付费的专业版本和一个免费的社区版本。你可以在https://www.jetbrains.com/pycharm/找到它。
当你完成这一章时，如果你想继续学习Python，PyCharm
将会是一个会在你开发时帮助你的绝佳工具。现在，为了让事情变得简单，我们将使用像Leafpad一样的基本文本编辑器。
注意学习任何编程语言会花费时间和大量精力。你需要在继续之前有耐心地掌握我提供的每一个小脚本。
#### *变量*
现在，开始讲一些更实用的Python概念。一个变量is是编程中最基本的数据形式，并且你在第八章bash脚本编程中遇到过它。简单来说，一个变量是一个名字关联着一个特定的值，当你在任何时间在程序里使用哪个名字，它会调用那个关联的值。
它的原理是变量名指向内存中的数据，它们可以包含任何种类的值，例如整数，实数，字符串，浮点数，布尔值（true或false），列表，或字典。我们将在本章节简要的概括这些。
为了熟悉基础，让我们用Leafpad创建一个简单地脚本，如代码清单17-1，并保存为hackers­arise_greetings.py。
\#! /usr/bin/python3 name="OccupyTheWeb"
print ("Greetings to " + name + " from Hackers­Arise. The Best Place to Learn
Hacking!")
*清单17­1: 你第一个Python程序*
第一行就是告诉你的系统你希望它使用Python解释器运行这个程序，而不是其他任何语言。第二行定义了一个变量叫name并且给它赋值（在这里是
"OccupyTheWeb"），你应该把这个值改成你自己的名字。这个变量的值是string
数据格式,，意味着其内容需要被引号包起来，然后以处理文本的方式处理它。你也可以把数字放进字符串，然后它们也会被处理文本的方式处理，也就是说你不能在数字运算中使用它们。
第三行创建了一个print()声明将Greetings to和name变量的值连起来，紧随其后的文本“
from Hackers-Arise. The Best Place to Learn Hacking! ”，一个
print()声明将在屏幕上显示任何你放入其圆括号里的东西。
现在，在你开始运行脚本之前，你需要授权你执行它的权限。我们需要chmod命令完成这件事。（更多Linux权限相关信息参见第五章）
kali \>chmod 755 hackers-arise_greetings.py
就像你第8章对bash脚本所做的，要想运行你的脚本，在脚本名前加上句号和斜杠。由于安全原因你当前目录不在\$PATH变量中，所以我们需要在脚本名前加上./
来告诉系统查看当前目录来找到文件并执行它。
输入下面的命令运行这个脚本：
kali \>./hackers-arise_greetings.py
Greetings to OccupyTheWeb from Hackers­Arise. The Best Place to Learn Hacking!
在Python中，每个变量类型会被当成一个类。一个类是一种创建对象的模板。详情请查看《bject­Oriented
Programming
(OOP)》第92页。在下面的脚本中，我展示了一些变量类型。变量可不只容纳字符串。清单清单
17-2展示了一些含有不同变量类型的变量。
\#! /usr/bin/python3
HackersAriseStringVariable = "Hackers­Arise Is the Best Place to Learn Hacking"
HackersAriseIntegerVariable = 12
HackersAriseFloatingPointVariable = 3.1415
HackersAriseList = [1,2,3,4,5,6]
HackersAriseDictionary = {'name' : 'OccupyTheWeb', 'value' : 27)
print (HackersAriseStringVariable)
print (HackersAriseIntegerVariable)
print (HackersAriseFloatingPointVariable)
*清单 17­2: 一系列被变量关联的数据结构*
这个脚本创建了五个含有不同数据结构的变量：一个字符串，被当作文本；一个整数，是没有小数，可以被用来进行数字运算的数字；一个浮点数，是一个有小数，可以被用来进行数字运算的数字；一个列表，是一系列存到一起的值；和一个字典，是一个无序的数据集，每个值对应一个键，意思是字典中的每个值有一个唯一的键。当你希望查询或更改一个键对应的值时，这就很方便。例如，比方说你有个叫fruit_color的字典，如下所示：
fruit_color = {'apple' : 'red', 'grape' : 'green', orange : 'orange'}
如果之后你希望获得fruit_color的grape，你只需要使用他的键调用它：
print (fruit_color['grape'])
你也可以更改键对应的值，例如，我们在这更改apple的颜色：
fruit_color['apple'] : 'green'
我们将在之后讨论列表和字典。
使用任何文本编辑器创建脚本，保存为secondpythonscript.py，然后授予你执行的权限，像这样：
kali \>chmod 755 secondpythonscript.py
当你运行这个脚本时，它会打印字符串变量，整数变量和浮点数变量的值，像这样：
kali \>./secondpythonscript.py
Hackers­Arise Is the Best Place to Learn Hacking 12
3.1415
![](media/dbe9da136b68e46a69a46917a5877cf1.png)
#### *注释*
与任何其他编程和脚本语言一样，Python也可以添加注释。注释是代码的一部分—单词，句子甚至段落—用来解释代码作用。
Python将识别代码中的注释并忽略它们。尽管不需要注释，但是当你两年后回到代码中并且不记得它应该做什么时，注释会非常有用。程序员经常使用注释来解释某个代码块是用来做什么的，或者解释选择特定方法背后的逻辑。
注释会被解释器忽略。这意味着任何注释行会被解释器跳过，直到遇到合法行。Python使用\#符号表示单行注释的开头。如果你想要编写多行注释，你可以在注释段的开头和结尾使用三个双引号（"""）。
你可以看到下面的脚本，我已经在我们的hackers­arise_greetings.py脚本中添加了简短的多行注释。
\#! /usr/bin/python3
"""
This is my first Python script with comments. Comments are used to help explain
code to ourselves and fellow programmers. In this case, this simple script
creates a greeting for the user.
"""
name = "OccupyTheWeb"
print ("Greetings to "+name+" from Hackers­Arise. The Best Place to Learn
Hacking!")
当我们再次执行脚本时，与上次执行脚本相比没有任何变化，你可以看到：
kali \>./hackers-arise_greetings.py
Greetings to OccupyTheWeb from Hackers­Arise. The Best Place to Learn Hacking!
它和清单17­1运行一模一样，但当我们之后回来看代码的时候，我们有了些关于我们脚本的信息。
#### *函数*
Python中的函数是执行特定操作的代码。例如之前使用的print()就是一个显示任何你给予的值的函数。python有许多内置函数，您可以立即导入和使用。绝大多数函数存在于Kali
Linux默认安装的Python中，尽管更多的函数可以从下载的库中获取。让我们来看一下可以使用的数千个函数中的几个：
-   exit() 退出程序。
-   float() 以浮点数的形式返回其参数。例如，float（1）将返回1.0。
-   help() 显示由其参数指定的对象的帮助。
-   int() 返回其参数的整数部分（截断小数部分）
-   len() 返回列表或字典中的元素数。
-   max() 返回其参数（列表）的最大值。
-   open() 以其参数指定的模式打开文件。
-   range() 返回由其参数指定的两个值之间的整数列表。
-   sorted() 将列表作为参数，并返回排好序的列表。
-   type() 返回其参数的类型（例如int、file、method、function）。
您也可以创建自己的函数来执行自定义任务。由于语言中已经内置了如此多的函数，所以在您自己构建函数之前，检查函数是否已经存在总是值得的。检查的方法有很多种，其中一个是查看https://docs.python.org的Python官方文档。选择你正在使用的版本选择任何参考库。
#### *列表*
许多编程语言使用数组存储多个独立对象。数组是一个值列表，可以通过引用数组中的特定值在列表中的位置（称为其索引）实现检索、删除、替换或处理这些值。
值得注意的是，与许多其他编程环境一样，python从0开始计算索引，因此列表中的第一个元素是索引0，第二个元素是索引1，第三个元素是索引2，依此类推。所以，如果我们想要获取第三个值，我们可以使用array[2]。在Python中，几乎没有数组的实现，但最常见的实现可能是lists。