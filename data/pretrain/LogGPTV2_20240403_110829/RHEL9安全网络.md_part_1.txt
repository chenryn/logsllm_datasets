[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [9]{.productnumber}
:::
# []{#index.html#idm140631436348896}安全网络 {.title}
## 配置安全网络和网络通信 {.subtitle}
::: abstract
**摘要**
本标题帮助管理员保护网络、连接的计算机和网络通信免受各种攻击。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}让开源更具包容性 {.title}
:::
红帽致力于替换我们的代码、文档和 Web
属性中存在问题的语言。我们从这四个术语开始：master、slave、黑名单和白名单。由于此项工作十分艰巨，这些更改将在即将推出的几个发行版本中逐步实施。详情请查看
[CTO Chris Wright
的信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_securing-networks.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_securing-networks.html#proc_providing-feedback-on-red-hat-documentation_securing-networks}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
:::
::: itemizedlist
-   要通过 Bugzilla 提交反馈，请创建一个新的 ticket：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%209){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html}
::: chapter
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks}第 1 章 使用 OpenSSH 的两个系统间使用安全通讯 {.title}
:::
SSH(Secure
Shell)是一种协议，它使用客户端-服务器架构在两个系统之间提供安全通信，并允许用户远程登录到服务器主机系统。和其它远程沟通协议，如
FTP 或 Telnet 不同，SSH
会加密登录会话，它会阻止入侵者从连接中收集未加密的密码。
Red Hat Enterprise Linux 包括基本的 `OpenSSH`{.literal} 软件包：通用的
`openssh`{.literal} 软件包、`openssh-server`{.literal} 软件包以及
`openssh-clients`{.literal} 软件包。请注意，`OpenSSH`{.literal}
软件包需要 `OpenSSL`{.literal} 软件包
`openssl-libs`{.literal}，它会安装几个重要的加密库来启用
`OpenSSH`{.literal} 对通讯进行加密。
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#ssh-and-openssh_assembly_using-secure-communications-between-two-systems-with-openssh}SSH 和 OpenSSH {.title}
:::
SSH（安全 Shell）是一个登录远程机器并在该机器上执行命令的程序。SSH
协议通过不安全的网络在两个不可信主机间提供安全加密的通讯。您还可以通过安全频道转发
X11 连接和任意 TCP/IP 端口。
当使用 SSH 协议进行远程 shell 登录或文件复制时，SSH
协议可以缓解威胁，例如，拦截两个系统之间的通信和模拟特定主机。这是因为
SSH
客户端和服务器使用数字签名来验证其身份。另外，所有客户端和服务器系统之间的沟通都是加密的。
主机密钥验证使用 SSH 协议的主机。当首次安装 `OpenSSH`{.literal}
或主机第一次引导时，主机密钥是自动生成的加密密钥。
`OpenSSH`{.literal} 是 Linux、UNIX 和类似操作系统支持的 SSH
协议的实现。它包括 OpenSSH 客户端和服务器需要的核心文件。OpenSSH
组件由以下用户空间工具组成：
::: itemizedlist
-   `ssh`{.literal} 是一个远程登录程序（SSH 客户端）。
-   `sshd`{.literal} 是一个 `OpenSSH`{.literal} SSH 守护进程。
-   `scp`{.literal} 是一个安全的远程文件复制程序。
-   `sftp`{.literal} 是一个安全的文件传输程序。
-   `ssh-agent`{.literal} 是用于缓存私钥的身份验证代理。
-   `ssh-add`{.literal} 为 `ssh-agent`{.literal} 添加私钥身份。
-   `ssh-keygen`{.literal} 生成、管理并转换 `ssh`{.literal} 验证密钥。
-   `ssh-copy-id`{.literal} 是一个将本地公钥添加到远程 SSH 服务器上的
    `authorized_keys`{.literal} 文件的脚本。
-   `ssh-keyscan`{.literal} 收集 SSH 公共主机密钥。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 RHEL 9 中，安全复制协议(SCP)默认替换为 SSH
文件传输协议(SFTP)。这是因为 SCP 已经引起了安全问题，例如
[CVE-2020-15778](https://access.redhat.com/security/cve/CVE-2020-15778){.link}。
如果您的场景中无法使用 SFTP 或不兼容的情况，您可以使用 `-O`{.literal}
选项强制使用原始 SCP/RCP 协议。
如需更多信息，请参阅 [Red Hat Enterprise Linux 9 中的 OpenSSH SCP
协议弃用](https://access.redhat.com/articles/6955319){.link} 。
:::
现有两个 SSH 版本： 版本 1 和较新的版本 2。RHEL 中的 `OpenSSH`{.literal}
套件只支持 SSH 版本 2。它具有增强的键交换算法，这些算法不受版本 1
中已知的漏洞的影响。
`OpenSSH`{.literal} 作为 RHEL
的核心加密子系统之一，使用系统范围的加密策略。这样可确保在默认配置中禁用弱密码套件和加密算法。要修改策略，管理员必须使用
`update-crypto-policies`{.literal}
命令来调整设置，或者手动选择不使用系统范围的加密策略。
`OpenSSH`{.literal} 套件使用两组配置文件：一个用于客户端程序（即
`ssh`{.literal}、`scp`{.literal} 和 `sftp`{.literal}）以及服务器（
`sshd`{.literal} 守护进程）的另一个配置文件。
系统范围的 SSH 配置信息保存在 `/etc/ssh/`{.literal} 目录中。用户特定的
SSH 配置信息保存在用户主目录中的 `~/.ssh/`{.literal} 中。有关 OpenSSH
配置文件的详细列表，请查看 `sshd(8)`{.literal} man page 中的
`FILES`{.literal} 部分。
::: itemizedlist
**其他资源**
-   使用 `man -k ssh`{.literal} 命令列出的 man page
-   [使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#configuring-and-starting-an-openssh-server_assembly_using-secure-communications-between-two-systems-with-openssh}配置并启动 OpenSSH 服务器 {.title}
:::
使用以下步骤进行您的环境以及启动 `OpenSSH`{.literal}
服务器所需的基本配置。请注意，在默认 RHEL 安装后，`sshd`{.literal}
守护进程已经启动，服务器主机密钥会自动被创建。
::: itemizedlist
**先决条件**
-   已安装 `openssh-server`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  在当前会话中启动 `sshd`{.literal} 守护进程，并在引导时自动启动：
    ``` screen
    # systemctl start sshd
    # systemctl enable sshd
    ```
2.  指定不同于默认的 `0.0.0.0`{.literal} (IPv4)或 `::`{.literal}(IPv6)
    `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `ListenAddress`{.literal} 指令并使用较慢的动态网络配置，将
    `network-online.target`{.literal} 目标单元的依赖关系添加到
    `sshd.service`{.literal} 单元文件中。要做到这一点，使用以下内容创建
    `/etc/systemd/system/sshd.service.d/local.conf`{.literal} 文件：
    ``` screen
    [Unit]
    Wants=network-online.target
    After=network-online.target
    ```
3.  查看 `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `OpenSSH`{.literal} 服务器设置是否满足您的情况要求。
4.  另外，还可通过编辑 `/etc/issue`{.literal} 文件来更改您的
    `OpenSSH`{.literal} 服务器在客户端验证前显示的欢迎信息，例如：
    ``` screen
    Welcome to ssh-server.example.com
    Warning: By accessing this server, you agree to the referenced terms and conditions.
    ```
    确保 `/etc/ssh/sshd_config`{.literal} 中未注释掉 `Banner`{.literal}
    选项，并且其值包含 `/etc/issue`{.literal} ：
    ``` screen
    # less /etc/ssh/sshd_config | grep Banner
    Banner /etc/issue
    ```
    请注意：要在成功登录后改变显示的信息，您必须编辑服务器上的
    `/etc/motd`{.literal} 文件。详情请查看 `pam_motd`{.literal} man
    page。
5.  重新载入 `systemd`{.literal} 配置，并重启 `sshd`{.literal}
    以应用修改：
    ``` screen
    # systemctl daemon-reload
    # systemctl restart sshd
    ```
:::
::: orderedlist
**验证**
1.  检查 `sshd`{.literal} 守护进程是否正在运行：
    ``` screen
    # systemctl status sshd
    ● sshd.service - OpenSSH server daemon
       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
       Active: active (running) since Mon 2019-11-18 14:59:58 CET; 6min ago
         Docs: man:sshd(8)
               man:sshd_config(5)
     Main PID: 1149 (sshd)
        Tasks: 1 (limit: 11491)
       Memory: 1.9M
       CGroup: /system.slice/sshd.service
               └─1149 /usr/sbin/sshd -D -oCiphers=aes128-ctr,aes256-ctr,aes128-cbc,aes256-cbc -oMACs=hmac-sha2-256,>
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Starting OpenSSH server daemon...
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on 0.0.0.0 port 22.
    Nov 18 14:59:58 ssh-server-example.com sshd[1149]: Server listening on :: port 22.
    Nov 18 14:59:58 ssh-server-example.com systemd[1]: Started OpenSSH server daemon.
    ```
2.  使用 SSH 客户端连接到 SSH 服务器。
    ``` screen
    # ssh PI:EMAIL
    ECDSA key fingerprint is SHA256:dXbaS0RG/UzlTTku8GtXSz0S1++lPegSy31v3L/FAEc.
    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
    Warning: Permanently added 'ssh-server-example.com' (ECDSA) to the list of known hosts.
    PI:EMAIL's password:
    ```
:::
::: itemizedlist
**其他资源**
-   `sshd(8)`{.literal} 和 `sshd_config(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#setting-an-openssh-server-for-key-based-authentication_assembly_using-secure-communications-between-two-systems-with-openssh}为基于密钥的身份验证设置 OpenSSH 服务器 {.title}
:::