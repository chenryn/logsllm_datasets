cept for HomNOT perform bootstrapping in their evaluation.
HomNOT only negates the coefﬁcients of its input TLWE
ciphertext, so the noise variances remain the same for its input
and output ciphertexts.
USENIX Association
30th USENIX Security Symposium    4009
HomMUX without SE and IKS: This is MUX of Ho-
momorphic Gates (HomMUX) without SE and IKS in its
Bootstrapping. By deﬁnition, HomMUX without SE and IKS
maps three TLWE ciphertexts to a TRLWE ciphertext. Hom-
MUX without SE and IKS is used in the construction of our
CMUX Memory.
Circuit Bootstrapping: This is a function which converts
a TLWE ciphertext into TRGSW ciphertext proposed in [11].
The noise variance is always the same between the input and
output of Circuit Bootstrapping, as bootstrapping is performed
during the process.
Parameters of TFHE: Parameters of TFHE are one of the
most important things in security analysis of VSP since they
determine the security level of TFHE. In our PoC implemen-
tation, we adopt parameters recommended in [13, 16]. The
estimated security of the parameter set is 80-bit [11].
2.2 Terms for Security Analysis
2.2.1 Deﬁnitions for Protocols
The main protocol we treat in this paper is two-party Secure
Computation Ofﬂoading (SCO). Two-party SCO is a special
case of Private Function Evaluation (PFE) [17]. To clarify
the difference between VSP and GarbledCPU or TinyGarble,
we also explain Private Function Secure Function Evaluation
(PF-SFE).
Deﬁnition of Alice and Bob: In this paper, Bob is some-
one who provides most of computational resource, like cloud
vendors, and Alice is someone who is the user of the cloud
service and possesses the secret key. Both of them are inter-
ested in learning as much private information as possible from
the other party.
Two-party SCO: In this protocol, only Alice has private
information, which is a function to be evaluated along with
the inputs. Furthermore, only Alice learns the result of the
evaluation.
Two-party PF-SFE: In this protocol, Bob has a function
to be evaluated and Alice has its input, but only Alice learns
the result of the function.
2.2.2 Security Assumptions
There are two assumptions in our security analysis: the 1-
circular security deﬁned in [18], which relates to security of
the TFHE scheme, and the honest-but-curious model, which
limits the behavior of the adversary.
1-circular security: Circular security is classiﬁed into Key-
Dependent-Message (KDM) security [18, 19]. 1-circular se-
curity means that encryption of a secret key using the secret
key itself is secure. This is assumed in [11] to simplify the
implementation.
Honest-but-curious model: A honest-but-curious adver-
sary is a legitimate participant in a communication protocol
who will not deviate from the deﬁned protocol but will attempt
(a) Circuit representation
(b) Graph representation
Figure 1: The (a) circuit and (b) graph representation of a
half adder.
to learn all possible information from legitimately received
messages [20].
2.3 Terms for Processor Design
We use a half adder as an example for explaining circuit-
related vocabulary in this paper. A half-adder can be repre-
sented as Figure 1a. To simplify the explanation, we only use
NAND and NOT gates here. We denote its input bits by A
and B, and its output bits by S and C. A half adder computes a
1-bit addition. For example, if A = B = 1, then S = 0,C = 1,
which calculates one plus one equals two. Let e,d, f denote
intermediate outputs of the gates. If we represent a NAND
gate by function NAND(·,·) and NOT gate by NOT(·), we
can interpret this circuit as a series of equations like the fol-
lowing:
d = NAND(A,B)
e = NAND(A,d)
f = NAND(d,B)
S = NAND(e, f )
C = NOT(d)
(1)
Boolean Circuits over TFHE: The main idea for evaluat-
ing Boolean circuits over TFHE is replacing each logic gate
in the Boolean circuit by a Homomorphic Gate from TFHE.
In the half-adder circuit shown in Figure 1a, this means re-
placing NAND(·,·) and NOT(·) in Equation (1) by equivalent
TFHE operations, that is, HomNAND(·,·) and HomNOT(·).
Let Enc(·) denote encryption function of TFHE. Then, we
can reinterpret Figure 1a by using the idea as follows:
Enc(d) = HomNAND(Enc(A),Enc(B))
Enc(e) = HomNAND(Enc(A),Enc(d))
Enc( f ) = HomNAND(Enc(d),Enc(B))
Enc(S) = HomNAND(Enc(e),Enc( f ))
Enc(C) = HomNOT(Enc(d))
This interpretation enables us to evaluate single-bit addition
over TFHE with encrypted inputs and outputs. We can formu-
late, in a similar way, an entire processor circuit over TFHE.
Pipeline: Pipeline is a mechanism to increase the number
of gates that can be evaluated in parallel (g) by dividing the
4010    30th USENIX Security Symposium
USENIX Association
ABSCdefNANDINPUT(A)INPUT(B)NANDNANDNANDNOTOUTPUT(S)OUTPUT(C)(a) Unpipelined
(b) Pipelined
Figure 2: Examples of (a) unpipelined and (b) pipelined cir-
cuits.
circuit into several stages with registers. The registers hold
the inputs to and outputs from the stages for synchronization.
Figure 2 shows the unpiplined and pipelined circuits. In
the unpipelined circuit, g = 2 because only NAND(A,B) and
NAND(C,D) can be evaluated simultaneously. Meanwhile,
in the pipelined circuit, g = 3 because the register feeds the
value to the NAND gate, such that NAND(Reg(e),Reg( f )),
NAND(A,B) and NAND(C,D) can be evaluated in parallel.
That is how the pipelining increases the parallelism of the pro-
cessor. Lastly, we emphasize an important point that pipelin-
ing adds considerable costs to physical processor designs as
physical registers need to be added to the processor circuit to
enable pipelining. However, for FHE-based processors, we
do not need to implement these pipeline registers using Ho-
momorphic Gates. The intermediate ciphertexts can simply
be stored into the physical memory, acting as a “pipeline reg-
ister.” This reasoning holds true for all sequential elements
(e.g., ﬂip-ﬂops) in the VSP processor architecture.
3 Related Works
There are some previous works which enable one to run en-
crypted programs by implementing a Boolean circuit of a
processor over SMPC protocols. We only provide a brief sum-
mary on the most relevant works, and more works can be
found in Appendix A.
3.1 Processor over HE
There have been a few works that have attempted to imple-
ment processors over HE to run encrypted instructions [21–
24]. However, only FURISC [8, 25] represents the processor
as a Boolean circuit. FURISC uses Smart-Vercauteren Cryp-
tosystem [9, 26] to represent its processor. Smart-Vercauteren
Cryptosystem is an FHE which supports XOR and AND
over the ciphertexts. FURISC theoretically can be solutions
for two-party SCO although it is not discussed in their pa-
per [8]. FURISC implements an One Instruction Set Com-
puter (OISC) processor which supports only one instruction,
SBN. This means modifying modern compilers like Clang or
GCC to work for it is not an easy task because it is far dif-
ferent from current mainstream instruction sets. In fact, there
is no high-level language compiler available for FURISC. In
the experiments in Section 9, we show that VSP runs nearly
1,600× faster than the estimated runtime of FURISC.
3.2 Garbled Processor
Garbled Processor is the name for the processor over Garbled
Circuit (GC). There are three works, ARM2GC [27], TinyGar-
ble [6], and GarbledCPU [7]. ARM2GC emulates an ARM
processor, but it assumes the function to be evaluated as pub-
lic. TinyGable and GarbledCPU emulate a MIPS processor
and enable to use conventional programming representation
for two-party PF-SFE [6, 7]. The most critical weakness of
Garbled Processors is that, in theory, such constructions can-
not achieve two-party SCO. If Garbled Processor is used in
SCO, Alice needs to generate a table of ciphertexts for all
of the outputs of each gate for each clock cycle. This means
Alice has to do more computationally intensive tasks than
directly evaluating the function with the inputs.
4 Abstract Protocol Flow in Two-party SCO
In this section, we explain how VSP works in the two-
party SCO protocol. Two-party PF-SFE can be theoretically
achieved by modifying two-party SCO. See Appendix B.
Public/Private Data: The parameters of TFHE, Bootstrap-
ping Key, the circuit of the processor, the upper-bound of the
number of processor evaluation, the ciphertexts of ROM and
RAM, and the sizes of ROM and RAM are public to all par-
ties. The plaintext data of ROM and RAM data, the result of
the evaluated function and the secret key are private for Alice.
4.1 Abstract Protocol Flow
The protocol ﬂow of VSP can be divided into seven phases,
and a visual depiction is shown in Figure 3. The phases are
discussed as follows.
1. Key Generation: Alice generates a secret key.
2. Registration: Alice generates a Bootstrapping Key from
the secret key and sends the Bootstrapping Key to Bob.
3. Compilation: Alice compiles the source code of the
function to be evaluated into executable (instructions)
for the processor using an ordinary compiler.
4. Encryption: Alice combines the executable with inputs,
and encrypts them as ROM and RAM. The executable
has a RAM part because of the initialization of global
variables. In this phase, Alice also decides how many
clock cycles Bob has to evaluate.
5. Evaluation: Bob evaluates the encrypted ROM and
RAM by repeatedly evaluating the processor circuit us-
ing the TFHE ciphertexts from Alice for the designated
USENIX Association
30th USENIX Security Symposium    4011
ABCDGfeABCDGfeReg(e)Reg(f)RegisterClient-Side Computation and Outsourcing: Here, we
brieﬂy show why VSP is able to provide a meaningful com-
putation outsourcing scheme. To outsource a program in a
meaningful way, the cost of client-side (i.e., Alice-side) com-
putations for setting up the outsourcing protocol must be less
than that of locally evaluating the program to be outsourced.
In VSP, the client-side costs almost entirely depend on the se-
curity parameter and the size of the memory m, but not on the
number of clock cycles n required to evaluate the compiled
program. Therefore, for any program where k· m ≤ o(n) for
some constant k (k only depends on the security parameter),
it holds that the client-side computation costs are a less than
that of directly evaluating the program.
5 Security Analysis
In this section, we analyze security of VSP. We also describe
the termination problem, which is one of the reasons why we
assume honest-but-curious adversary model. In this paper, we
also assume 1-circular security as assumed in TFHE.
5.1 Security Analysis in Two-party SCO
In this paper, we assume that Bob has physical access to
the computational resource. More precisely, the assumption
is that Bob can read even electric signals in the CPU dies
between transistors. Therefore, any private information which
is decrypted in the computational resource leaks to Bob.
Bob tries to guess Bootstrapping Key, ROM, RAM, regis-
ters, wires, etc. However, since we assume honest-but-curious
adversary model, this can be reduced to the hardness of de-
cryption of ciphertexts of TFHE in Chosen-plaintext Attack
(CPA) setting. As LWE-based FHE schemes are generally
based on well-established hardness assumptions, the security
of VSP can be easily guaranteed.
5.2 The Termination Problem
In VSP, it is obvious that Bob cannot know if the evaluated
program is halted or not, without run-time communication
with Alice, as the state of the processor is entirely encrypted.
The termination problem is also discussed in FURISC pa-
per [8]. The protocol which is claimed to be a solution for
the problem in the paper can be interpreted as the following
procedures in VSP:
1. Bob sends to Alice a TLWE ciphertext of the termination
ﬂag. Here, the termination ﬂag indicates if the function
evaluation is ﬁnished or not.
2. Alice decrypts the termination ﬂag and tells Bob to ter-
minate or continue the evaluation.
3. If Alice decided to terminate the evaluation in step 2,
Bob sends back the evaluation results of the function to
Figure 3: The proposed protocol ﬂow of two-party SCO.
number of clock cycles. In this phase, what we refer to
as the snapshot is also generated. A snapshot contains
all necessary information for the Resumption phase, in-
cluding ciphertexts of current register values, ROM and
RAM.
6. Decryption: Alice decrypts the encrypted result using
her secret key.
7. Resumption: Alice checks the termination ﬂag which
is included in the result. If the ﬂag indicates that the
evaluation of the function has ﬁnished, the protocol is
terminated. If not, Alice re-generates the number of clock
cycles Bob needs to additionally evaluate the processor
circuits. Then, Bob executes the evaluation for the des-
ignated clock cycles using the information contained in
the snapshot and returns to Decryption phase.
In the above procedures, 1. and 2. are needed only once.
If Alice wants to evaluate multiple sets of functions and (or)
inputs, the secret key and the Bootstrapping Key can be reused.
Therefore, the computational and communication costs for
them are negligible.
4012    30th USENIX Security Symposium
USENIX Association
Alice1. Key GenerationSeceret KeyBootstrappingKey2. RegistrationBob3. CompilationRAMROMSourceCodeResult6. DecryptionInput5. EvaluationExecutable7. Resumption4. EncryptionSnapshotAlice. If Alice decided to continue, Alice re-generates
the number of clock cycles and sends it to Bob. Then,
Bob performs the evaluation and goes back to step 1.
This protocol is included in step 5 to 7 of the protocol ﬂow
of two-party SCO, since the ciphertext of the termination ﬂag
is included in the encrypted result. In our PoC implementation
of VSP, the termination ﬂag is (homomorphically) generated
by the Instruction Decode stage of the processor.
Note that if the adversary model is not honest, Bob can try
to send the Bootstrapping Key, which includes the encrypted
secret key, or arbitrary ciphertexts to Alice for decryption,
pretending that the TLWE ciphertext is encrypting the termi-
nation ﬂag. As a result, to extend the threat model of VSP
into a malicious setting, we need to ensure the existence of a
decryption oracle and the malleability of the underlying FHE
schemes are overcame. We point out that adopting IND-CCA1
FHE [28, 29] in combined with Veriﬁable Computation [30]
can be a candidate solution for VSP in a malicious setting,
and is one of our future works.
6 Design and Implementation of VSP
In this section, we explain how we designed and implemented
VSP [31].
6.1 Design Goals
The following three design goals are prioritized during the
design of VSP.
(i) C compatibility
Since it is obviously difﬁcult to actually adopt a secure
framework if the framework is inconvenient to use, we de-
cided to support high-level program representations so that
users can use VSP with ease. There are two reasons why we
chose the C language as our high-level representation. First,
C is one of the most widely used programming languages.
Second, the C language is designed to be fast, where extensive
optimizations have been devoted into the optimization of C-
based programs, e.g., the LLVM framework [32]. Therefore,
with C support, users of VSP can have easy access to efﬁcient
programs.
(ii) ISA Optimization
Due to the high computational demand, the number of
logic gates that can be evaluated in parallel (g) over TFHE is
limited by the number of parallel processing capacity of the
physical machine. In VSP, the evaluation time of the circuit
is proportional to the total number of gate count (t), as g of a
processor generally exceeds the parallel processing capacity
of an ordinary desktop computer. Since the ISA plays a key
role in determining t of the processor, we decided to design