运动T恤 | A：衣服
菜刀 | C：厨房用具
高压锅 | C：厨房用具
叉子 | C：厨房用具
擦菜板 | C：厨房用具
圆珠笔 | B：办公用品
6行CASE表达式代码最后只相当于1列（abc_product_type）
而已，大家也许有点吃惊吧！与商品种类（product_type）的名称相
KEYWORD 对应，CASE表达式中包含了3条WHEN子句分支。最后的ELSE NULL
●ELSE NULL
是“上述情况之外时返回NULL”的意思。ELSE子句指定了应该如何处
理不满足WHEN子句中的条件的记录，NULL之外的其他值或者表达式
也都可以写在ELSE子句之中。但由于现在表中包含的商品种类只有3种，
因此实际上有没有ELSE子句都是一样的。
ELSE子句也可以省略不写，这时会被默认为ELSE NULL。但为了
防止有人漏读，还是希望大家能够显示地写出ELSE子句。
6-3 CASE表达式 217 ●
法则6-3
虽然CASE表达式中的ELSE子句可以省略，但还是希望大家不要省略。
此外，CASE表达式最后的“END”是不能省略的，请大家特别注意
不要遗漏。忘记书写END会发生语法错误，这也是初学时最容易犯的错误。
法则6-4
CASE表达式中的END不能省略。
■CASE表达式的书写位置
CASE表达式的便利之处就在于它是一个表达式。之所以这么说，是
因为表达式可以书写在任意位置，也就是像“1 + 1”这样写在什么位
置都可以的意思。例如，我们可以利用CASE表达式将下述SELECT语
句结果中的行和列进行互换。
执行结果
sum_price_clothes | sum_price_kitchen | sum_price_office
------------------+-------------------+-----------------
5000 | 11180 | 600
上述结果是根据商品种类计算出的销售单价的合计值，通常我们将商
品种类列作为GROUP BY子句的聚合键来使用，但是这样得到的结果会
以“行”的形式输出，而无法以列的形式进行排列（代码清单6-42）。
代码清单6-42 通常使用GROUP BY也无法实现行列转换
SELECT product_type,
SUM(sale_price) AS sum_price
FROM Product
GROUP BY product_type;
执行结果
product_type | sum_price
--------------+----------
衣服 | 5000
办公用品 | 600
厨房用具 | 11180
● 218 第6章 函数、谓词、CASE表达式
我们可以像代码清单6-43那样在SUM函数中使用CASE表达式来获
得一个3列的结果。
代码清单6-43 使用CASE表达式进行行列转换
-- 对按照商品种类计算出的销售单价合计值进行行列转换
SELECT SUM(CASE WHEN product_type = '衣服'
THEN sale_price ELSE 0 END) AS sum_price_clothes,
SUM(CASE WHEN product_type = '厨房用具'
THEN sale_price ELSE 0 END) AS sum_price_kitchen,
SUM(CASE WHEN product_type = '办公用品'
THEN sale_price ELSE 0 END) AS sum_price_office
FROM Product;
在满足商品种类（product_type）为“衣服”或者“办公用品”
等特定值时，上述CASE表达式输出该商品的销售单价（sale_price），
不满足时输出0。对该结果进行汇总处理，就能够得到特定商品种类的销
售单价合计值了。
在对SELECT语句的结果进行编辑时，CASE表达式能够发挥较大
作用。
专 栏
简单 表达式
CASE
CASE表达式分为两种，一种是本节学习的“搜索CASE表达式”，另一种就
是其简化形式——“简单CASE表达式”。
简单CASE表达式比搜索CASE表达式简单，但是会受到条件的约束，因此通
常情况下都会使用搜索CASE表达式。在此我们简单介绍一下其语法结构。
简单CASE表达式的语法如下所示。
语法6-A 简单CASE表达式
CASE 
WHEN  THEN 
WHEN  THEN 
WHEN  THEN 
.
.
.
ELSE 
END
6-3 CASE表达式 219 ●
与搜索CASE表达式一样，简单CASE表达式也是从最初的WHEN子句开始
进行，逐一判断每个WHEN子句直到返回真值为止。此外，没有能够返回真值的
WHEN子句时，也会返回ELSE子句指定的表达式。两者的不同之处在于，简单
CASE表达式最初的“CASE”也会作为求值的对象。
下面就让我们来看一看搜索CASE表达式和简单CASE表达式是如何实现相同
含义的SQL语句的。将代码清单6-41中的搜索CASE表达式的SQL改写为简单
CASE表达式，结果如下所示（代码清单6-A）。
代码清单6-A 使用CASE表达式将字符串A～C添加到商品种类中
-- 使用搜索CASE表达式的情况（重写代码清单6-41）
SELECT product_name,
CASE WHEN product_type = '衣服'
THEN 'A：' ||product_type
WHEN product_type = '办公用品'
THEN 'B：' ||product_type
WHEN product_type = '厨房用具'
THEN 'C：' ||product_type
ELSE NULL
END AS abc_product_type
FROM Product;
-- 使用简单CASE表达式的情况
SELECT product_name,
CASE product_type
WHEN '衣服' THEN 'A：' || product_type
WHEN '办公用品' THEN 'B：' || product_type
WHEN '厨房用具' THEN 'C：' || product_type
ELSE NULL
END AS abc_product_type
FROM Product;
像“CASE product_type”这样，简单CASE表达式在将想要求值的表
达式（这里是列）书写过一次之后，就无需在之后的WHEN子句中重复书写
“product_type”了。虽然看上去简化了书写，但是想要在WHEN子句中指定不
同列时，简单CASE表达式就无能为力了。
● 220 第6章 函数、谓词、CASE表达式
专 栏
特定的 表达式
CASE
由于CASE表达式是标准SQL所承认的功能，因此在任何DBMS中都可以
执行。但是，有些DBMS还提供了一些特有的CASE表达式的简化函数，例如
KEYWORD Oracle中的DECODE、MySQL中的IF等。
●DECODE函数（Oracle） 使用Oracle中的DECODE和MySQL中的IF将字符串A～C添加到商品种
●IF函数（MySQL）
类（product_type）中的SQL语句请参考代码清单6-B。
代码清单6-B 使 用CASE表达式的特定语句将字符串A～C添加到商品种
类中
Oracle
-- Oracle中使用DECODE代替CASE表达式
SELECT product_name,
DECODE(product_type,
'衣服', 'A：' || product_type,
'办公用品', 'B：' || product_type,
'厨房用具', 'C：' || product_type,
NULL) AS abc_product_type
FROM Product;
MySQL
-- MySQL中使用IF代替CASE表达式
SELECT product_name,
IF( IF( IF(product_type = '衣服',
CONCAT('A：', product_type), NULL)
IS NULL AND product_type = '办公用品',
CONCAT('B：', product_type),
IF(product_type = '衣服',
CONCAT('A：', product_type), NULL))
IS NULL AND product_type = '厨房用具',
CONCAT('C：', product_type),
IF( IF(product_type = '衣服',
CONCAT('A：', product_type), NULL)
IS NULL AND product_type = '办公用品',
CONCAT('B：', product_type),
IF(product_type = '衣服',
CONCAT('A：', product_type),
NULL))) AS abc_product_type
FROM Product;
但上述函数只能在特定的DBMS中使用，并且能够使用的条件也没有CASE
表达式那么丰富，因此并没有什么优势。希望大家尽量不要使用这些特定的SQL
语句。
6-3 CASE表达式 221 ●
练习题
6.1 对本章中使用的Product（商品）表执行如下2条SELECT语句，能够得
到什么样的结果呢？
①
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price NOT IN (500, 2800, 5000);
②
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price NOT IN (500, 2800, 5000, NULL);
6.2 按照销售单价（sale_price）对练习6.1中的Product（商品）表中的商
品进行如下分类。
● 低档商品：销售单价在1000日元以下（T恤衫、办公用品、叉子、擦菜
板、圆珠笔）
● 中档商品：销售单价在1001日元以上3000日元以下（菜刀）
● 高档商品：销售单价在3001日元以上（运动T恤、高压锅）
请编写出统计上述商品种类中所包含的商品数量的SELECT语句，结果如
下所示。
执行结果
low_price | mid_price | high_price
----------+----------+----------
5 | 1 | 2
6-3 CASE表达式 223 ●
第7章 集合运算
表的加减法
联结（以列为单位对表进行联结）
本章重点
前面几章我们学习了使用一张表的SQL语句的书写方法，本章将会和大家
一起学习使用2张以上的表的SQL语句。通过以行方向（竖）为单位的集合运
算符和以列方向（横）为单位的联结，就可以将分散在多张表中的数据组合成
为期望的结果。
7-1 表的加减法
■什么是集合运算
■表的加法——UNION
■集合运算的注意事项
■包含重复行的集合运算——ALL选项
■选取表中公共部分——INTERSECT
■记录的减法——EXCEPT
7-2 联结（以列为单位对表进行联结）
■什么是联结
■内联结——INNER JOIN
■外联结——OUTER JOIN
■3张以上的表的联结
■交叉联结——CROSS JOIN
■联结的特定语法和过时语法
7-1 表的加减法 225 ●
第7章 集合运算
7-1
表的加减法
● 集合运算就是对满足同一规则的记录进行的加减等四则运算。
学习重点
● 使用UNION（并集）、INTERSECT（交集）、EXCEPT（差集）等集合运
算符来进行集合运算。
● 集合运算符可以去除重复行。
● 如果希望集合运算符保留重复行，就需要使用ALL选项。
什么是集合运算
KEYWORD 本章将会和大家一起学习集合运算操作。集合在数学领域表示“（各
●集合运算
种各样的）事物的总和”，在数据库领域表示记录的集合。具体来说，表、
●集合
●记录的集合 视图和查询的执行结果都是记录的集合。
●集合运算符
截至目前，我们已经学习了从表中读取数据以及插入数据的方法。所
谓集合运算，就是对满足同一规则的记录进行的加减等四则运算。通过集
合运算，可以得到两张表中记录的集合或者公共记录的集合，又或者其中
某张表中的记录的集合。像这样用来进行集合运算的运算符称为集合运
算符。
本节将会为大家介绍表的加减法，下一节将会和大家一起学习进行“表
联结”的集合运算符及其使用方法。
表的加法——
UNION
KEYWORD 首先为大家介绍的集合运算符是进行记录加法运算的UNION（并集）。
●UNION（并集）
在学习具体的使用方法之前，我们首先添加一张表，该表的结构与
之前我们使用的Product（商品）表相同，只是表名变为Product2
（商品2）（代码清单7-1）。
● 226 第7章 集合运算
代码清单7-1 创建表 （商品2）
Product2
CREATE TABLE Product2
(product_id CHAR(4) NOT NULL,
product_name VARCHAR(100) NOT NULL,
product_type VARCHAR(32) NOT NULL,
sale_price INTEGER ,
purchase_price INTEGER ,
regist_date DATE ,
PRIMARY KEY (product_id));
接下来，我们将代码清单7-2中的5条记录插入到Product2表中。
商品编号（product_id）为“0001”~“0003”的商品与之前Product
表中的商品相同，而编号为“0009”的“手套”和“0010”的“水壶”
是Product表中没有的商品。
代码清单7-2 将数据插入到表 （商品2）中
Product2
SQL Server PostgreSQL
BEGIN TRANSACTION; ①