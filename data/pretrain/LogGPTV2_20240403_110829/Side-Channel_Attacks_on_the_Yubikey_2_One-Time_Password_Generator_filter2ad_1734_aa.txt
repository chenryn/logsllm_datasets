title:Side-Channel Attacks on the Yubikey 2 One-Time Password Generator
author:David F. Oswald and
Bastian Richter and
Christof Paar
Side-Channel Attacks on the Yubikey 2
One-Time Password Generator
David Oswald, Bastian Richter, and Christof Paar
Horst Görtz Institute for IT Security
Ruhr-University Bochum, Germany
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract. The classical way of authentication with a username-password
pair is often insuﬃcient: an adversary can choose from a multitude of
methods to obtain the credentials, e.g., by guessing passwords using a
dictionary, by eavesdropping on network traﬃc, or by installing malware
on the system of the target user. To overcome this problem, numerous so-
lutions incorporating a second factor in the authentication process have
been proposed. A particularly wide-spread approach provides each user
with a hardware token that generates a One-Time Password (OTP) in
addition to the traditional credentials. The token itself comprises a secret
cryptographic key that, together with timestamps and counters, is used
to derive a fresh OTP for each authentication. A relatively new yet wide-
spread example for an OTP token is the Yubikey 2 produced by Yubico.
This device employs an open-source protocol based on the mathemat-
ically secure AES and emulates a USB keyboard to enter the OTP in
a platform-independent manner. In this paper, we analyse the suscepti-
bility of the Yubikey 2 to side-channel attacks. We show that by non-
invasively measuring the power consumption and the electro-magnetic
emanation of the device, an adversary is able to extract the full 128-bit
AES key with approximately one hour of access to the Yubikey 2. The
attack leaves no physical traces on the device and can be performed us-
ing low-cost equipment. In consequence, an adversary is able to generate
valid OTPs, even after the Yubikey 2 has been returned to the owner.
Keywords: Yubikey, side-channel analysis, one-time passwords, hardware to-
ken, implementation attack, embedded systems security, hardware vulnerabilities
1
Introduction
Considering the steadily increasing risk due to, e.g., phishing and malware,
normal authentication schemes like username and password are not suﬃcient
anymore for high-security online, especially cloud-based services. Therefore, ad-
ditional means to strengthen the authentication by introducing an additional
“factor” are mandatory. A popular example of these techniques are OTPs gener-
ated by a hardware token. These tokens are common in high-security commercial
applications, but not for private use, often because of their high price and the
need for additional sever infrastructure.
Attacks on two-factor authentication systems, most prominently the breach
of RSA’s SecurID system [5, 2], were until now mostly based on weaknesses in
the cryptographic design of the protocol or the backend network. In contrast, at-
tacks on the actual (hardware) implementation are assumed to have much higher
requirements with respect to the capabilities of an adversary. Indeed, “classical”
invasive attacks on modern devices use expensive equipment, e.g., microprobes
or a Focused Ion Beam (FIB) that can only be operated by an experienced semi-
conductor engineer. However, in the past few years, side-channel attacks have
been shown to be an eﬀective method to non-invasively extract secrets from em-
bedded cryptographic devices. Side-Channel Analysis (SCA) utilises information
leaked via channels that were not intended by the developer, for example, via
the power consumption or the electro-magnetic (EM) emanation. Often, these
attacks can be carried out with relatively cheap equipment and without the need
for a highly sophisticated lab.
Therefore, the question arises if OTP tokens are susceptible to these meth-
ods. In this paper, we use the example of the Yubikey 2, a USB-based device
manufactured by Yubico Inc. [32]. As a side note, the reason why we chose the
Yubikey 2 as our target is that we were contacted by a member of a large com-
puter user’s group that employs the Yubikey 2 for two-factor authentication. We
are currently in the process of evaluating tokens of other vendors with respect
to similar physical attacks
The Yubikey 2 diﬀers from most other OTP tokens with its focus on sim-
plicity and an open-source software backend. The question arises if high-security
requirements can be fulﬁlled by such a low-cost device and how well the token
protects the 128-bit AES key used for the OTP generation. . Yubico has several
security-sensitive reference customers (that use the Yubikey, e.g., for securing
remote access) listed on their website [27], for example, Novartis, Agfa, and U.S.
Department of Defense Contractors. The U.S. Department of Defense Contrac-
tors even switched from RSA’s SecureID system to the Yubikey [30], even though
the Yubikey 2 is not certiﬁed for governmental standards.
1.1 Two-Factor Authentication
As mentioned above, the “normal” way of authentication by means of username
and password is not suﬃcient in many cases. The credentials can often be ob-
tained, e.g., by social engineering or due to protocol weaknesses (cf. [21] for a
recent example). Thus, an additional security factor is needed. An established
solution for this problem are OTPs. An OTP is generated by a hardware (or
sometimes software) token and provided in addition to the normal credentials.
The token generates a value which is valid for a single use, sometimes also only
for a short period of time. Now, the user has to know the username and password
and additionally has to own the token to successfully perform an authentication.
The OTP is usually derived based on usage counters, timestamps, and a secret
key securely stored on the token, by, e.g., hashing or encrypting the respective
values.
Fig. 1: Authentication with two factors
Of course, if an adversary manages to obtain both the physical token and
the credentials of the user, he is able to gain unauthorised access. However, as
soon as the token is, for instance, returned to the owner in order to conceal the
attack, the adversary is no longer able to impersonate the rightful user.
1.2 Adversary Model
In this paper, we assume an adversary gaining physical access to the token
for a limited amount of time (in the range of a few hours), e.g., when a user
left his token at his desk. Besides, a token could also be stolen and returned
without the owner noticing. Especially in the light of, for example, the attack
on Lockheed Martin presumably being the motivation for the intrusion into
RSA’s network [5], this scenario is less hypothetical than it initially sounds.
Organisations specialised in industrial espionage go to great lengths to overcome
protection mechanisms, and obtaining a user’s token for a limited amount of time
seems conceivable.
In contrast to just using the token to login and then returning it, we focus on
an attack that actually extracts the cryptographic secret from the device. This
allows an adversary to create indistinguishable clones of the original device,
usable for an unlimited amount of time. Apart from having direct access to the
device, no modiﬁcations or invasive steps, e.g., the decapsulation of the token,
are required. The SCA described in this paper is based on the non-invasive,
passive observation of the token’s behaviour and hence does not leave physical
traces that can be detected later.
1.3 Side-Channel Attacks
A side-channel attack is usually performed in two steps. First, the adversary
has physical access to the target device and acquires a side-channel signal (e.g.,
UsernamePassword1. Factor:Know the secretOTP2. Factor:Own the tokenAuthenticationthe power consumption or the EM emanation) during the cryptographic com-
putation. This is repeated N times with diﬀerent input data Mi, yielding N
time-discrete waveforms xi (t) called traces. To recover the cryptographic key,
the traces are then statistically processed in the evaluation phase, e.g., using
the Pearson correlation coeﬃcient when performing a Correlation Power Anal-
ysis (CPA) [4]. The adversary ﬁxes a (small) subset Kcand ⊆ K (e.g., the 256
possible 8-bit subkeys entering one S-box of the AES) and considers all key can-
didates k ∈ Kcand. Then, for each k ∈ Kcand and for each i ∈ {0, . . . , N − 1}, a
hypothesis Vk, i on the value of some intermediate (e.g., the output of one 8-bit
AES S-box) is computed. Using a power model f, this value is then mapped to
hk, i = f (Vk, i) to describe the process that causes the side-channel leakage. In
practice, a Hamming Weight (HW) or Hamming Distance (HD) power model
is often suitable for CMOS devices like Microcontrollers (µCs) [15]. In order to
detect the dependency between hk, i and xi (t), the correlation coeﬃcient ρk (t)
(for each point in time t and each key candidate k ∈ Kcand) is given as
ρk (t) =
pvar (x (t)) var (hk)
cov (x (t) , hk)
with var (·) indicating the sample variance and cov (·, ·) the sample covariance
according to the standard deﬁnitions [26]. The key candidate ˆk with the maxi-
mum correlation ˆk = arg maxk, t ρk (t) is assumed to be the correct secret key.
When for instance attacking an implementation of the AES, this process is per-
formed for each S-box separately, yielding the full 128-bit key with a much lower
complexity of O(cid:0)16 · 28(cid:1) compared to O(cid:0)2128(cid:1) for an exhaustive search.
1.4 Related Work
Beginning with the ﬁrst paper on Diﬀerential Power Analysis (DPA) published
in 1999 [12], a multitude of methods for SCA has been introduced, for example,
CPA [4] or the use of the EM emanation instead of the power consumption [1].
A comprehensive overview on the ﬁeld of side-channel attacks is given in [15].
However, until 2008, there was no report of a successful side-channel attack
on a real-world system. This changed with the break of the KeeLoq hopping
code scheme [8]. Subsequently, several wide-spread products were attacked by
means of SCA, e.g., the Mifare DESFire MF3ICD40 contactless smartcard [19]
or the bitstream encryption schemes of Xilinx and Altera Field Programmable
Gate Arrays (FPGAs) [16–18].
The security of–today heavily outdated–USB tokens was analysed in [11],
describing hardware and software weaknesses but not covering side-channel at-
tacks. In [10], it is stated that newer devices are harder to attack and that a
“lunchtime attack [is] likely not possible”. For the SecurID tokens manufactured
by RSA, there are reports on both attacks on the backend [5] and ﬂaws on the
protocol level [2]. However, the real-world relevance of the latter attack is denied
by RSA [7].
The cryptanalytical security of parts of the protocol used for the Yubikey
was analysed in [25], and no severe formal vulnerabilities were found. Yubico
mentions the threat of side-channel attacks in a security evaluation on their
website [31], however, apparently did not further investigate this issue.
1.5 Contribution and Outline
The remainder of this paper is organised as follows: in Sect. 2, we describe the
OTP generation scheme and analyse the underlying hardware of the Yubikey 2.
The measurement setup for automatically acquiring power consumption and EM
traces for our SCA is presented in Sect. 3. In Sect. 4, we detail on the initial
side-channel proﬁling of the Yubikey 2, leading to the full-key recovery attack
shown in Sect. 5. We conclude in Sect. 6, discussing suitable countermeasures
and describing the reaction of the vendor Yubico, which we informed ahead of
time as part of a responsible disclosure process.
The novelty of this paper is the practical application of side-channel attacks
in the context of authentication tokens. We demonstrate that physical attacks
on such tokens can be used to extract secret keys and thus allow an adversary
to duplicate the second authentication factor. Since the attacks in this paper
were conducted with a relatively low-cost setup and mainly required experience
in the ﬁeld of SCA, it is likely that well-funded organisations could reproduce
(or have already developed) similar techniques. Thus, we emphasize the need for
additional countermeasures in the backend and system design, e.g., the use of
key diversiﬁcation et cetera.
2 The Yubikey 2
In this paper, we analyse the current version 2 of the Yubikey Standard (in the
following sometimes referred to as Device Under Test (DUT)) with the ﬁrmware
version 2.2.3. The predecessor Yubikey 1 (cf. Fig. 2a) was introduced in 2008
but already replaced by the current Yubikey 2 (Fig. 2b) in 2009 [32]. Apart
from the Yubico-speciﬁc OTP generation, the Yubikey 2 can also be used to
store a static password. Besides, the Yubikey 2 can be used as a token for gen-
erating HMAC-based One Time Password (HOTP) speciﬁed by the Initiative of
Open Authentication (OATH) [27]. However, we do not further examine these
additional features in this paper and focus on the default OTP mechanism.
2.1 Typical Use
Both the Yubikey 1 and the Yubikey 2 appear as a normal USB keyboard to
the user’s computer to enable direct input of the OTP. An advantage of this
technique is that it does not require an extra driver installation and works with
default keyboard drivers available on virtually every relevant operating system.
When the user presses the button on top of the DUT, the token generates a
OTP, encodes it in a speciﬁc format described in Sect. 2.2, and enters it using
(a) Yubikey 1
(b) Yubikey 2
Fig. 2: The two versions of the Yubikey Standard
simulated keyboard inputs. The intended way of using the OTP is depicted in
Fig. 3. The user ﬁrst enters his credentials and then gives focus to an additional
input ﬁeld on the login form before pressing the Yubikey’s button.
Fig. 3: Typical Yubikey login form.
2.2 OTP Structure
The OTP generated by the Yubikey 2 is based on several counters, random
bytes, a secret ID, and a checksum which are concatenated to a 16-byte value
and subsequently encrypted using the AES with a 128-bit key.
UID The private ID is 6 byte long and kept secret. It can be used as another
secret parameter or to distinguish users when a common encryption key is
used.
useCtr The non-volatile usage counter is 2 byte long and increased at the ﬁrst
OTP generation after power-up. Additionally, the counter is incremented
when the session usage counter wraps from 0xff to 0x00.
tstp The 3-byte timestamp is initialized with random data on startup. After
this, the timestamp is incremented with a frequency of approximately 8 Hz.
sessionCtr The 1-byte session counter starts with 0x00 at power-up and is
incremented on every OTP generation.
rnd 2 additional byte of random data.
crc A 2-byte CRC16 checksum computed over all previous data ﬁelds.
Fig. 4: Structure of a Yubikey OTPs
Figure 4 gives an overview of the structure of the OTPs and indicates which
ﬁelds are static, predictable, or random.
All data ﬁelds are concatenated and then AES-encrypted using the secret
128-bit key programmed into the Yubikey 2. Usually, this key is set once by,
e.g., the system administrator using the conﬁguration utility [28] before the
Yubikey 2 is handed to the user. The resulting ciphertext of the AES encryption
is encoded using a special encoding called “Modhex” to avoid problems with
diﬀerent keyboard layouts by limiting the simulated keypresses to alphanumeric
characters that have the same keycode in most locales. To identify the Yubikey,
a Modhex-encoded 6-byte public ID is prepended to the encoded ciphertext.
To verify the OTP, the server-side software, e.g., the open-source validation
server provided by Yubico, undoes the Modhex encoding, retrieves the AES key
stored for the respective public ID, decrypts the OTP, and validates the resulting
data. More precisely, the following steps are performed for the veriﬁcation of an
OTP:
1. Identify the Yubikey by the public ID and retrieve the corresponding AES
key
2. Decrypt the OTP with the corresponding AES key