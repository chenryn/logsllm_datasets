建它们。
上的描述。那些更简单的对象是称为点对单元（conscell）的成对的值，使用函数coNs可以创
12.1“没有列表”
如何适时地使用它们有更好的认识。
风格，而这种编程风格也是Lisp传统的另一个重要方面。
表是用于表达任何异构和层次数据的极佳数据结构。另外，它们相当轻量并且支持函数式的编程
于Lisp的，这就可以解释为什么其他语言没有因缺少Lisp式列表所带来的不便。更一般地讲，列
比如有这样一个问题：如何将代码表示成数据，从而支持代码转换和生成代码的宏。它就是特定
程序员可能会使用向量、哈希表、用户自定义的类或者结构体来代替列表。
CONS接受两个实参并返回一个含有两个值的新点对单元。这些值可以是对任何类型对象的
因此，你需要更加深入地理解列表。一旦对列表的工作方式有了更加深刻的理解，你将会对
从实践上来讲，由于列表对特定问题提供了极佳的解决方案，因此它们仍然能留在语言之中，
②cONs最初是动词construct（构造）的简称。
①改编自《黑客帝国》（http://us.imdb.com/Quotes?0133093）。
理解列表的关键在于，要理解它们在很大程度上是一种构建在更基本数据类型实例对象之
SpoonBoy：你会发现，
Neo：没有列表？
Spoon Boy：没有列表。
Neo：什么真相？
SpoonBoy：不要试图弯曲列表，那是不可能的。你要试着看清真相。
第12章
弯曲的不是列表，而只是你自己。
LISP名字的由来：列表处理
www.TopSage.com
大家网
---
## Page 141
所组成的图例可以像下面这样将点对单元表示成一对方框。
状的点对单元打印成括号列表而不是用点分隔的数对。
着其他的列表，这有可能是另一个点对单元或NIL。Lisp打印器可以理解这种约定并能将这种链
对单元的引用。该点对单元的CAR就是该列表的第一个元素，而CDR则包含着其余元素，它引用
对这种低微的数据类型提供如此广泛的支持。
提到的那样，它同时代表空列表和布尔值false。
CAR中，而对后续点对的链接则被保存在CDR中。链上最后一个单元的CDR为NIL，正如第4章所
造出更大型的结构。列表是通过将点对以链状连接在一起而构成的。列表的元素被保存在点对的
的任何一个值。
的没有任何特别语义的任意数对。因此：
名字稍显缺乏意义也并不是件很坏的事情。当考虑单独的点对单元时，最好将它们想象成是简单
来说是这样的。但即便在那时，它们也只被看作是用来实现这些操作的汇编助记符。然而，这些
们刚出现的年代，这些名字是有意义的，至少对于那些在IBM 704计算机上最早实现Lisp的人们
因此当我讲一个特定的值是一个列表时，其实真正的意思是说它要么是NIL要么是对一个点
这一安排毫无疑问是Lisp所独有的，它被称为单链表。不过，很少有Lisp家族之外的语言会
124
① 当给定SETF的位置是CAR或CDR时，它将展开成一个对函数RPLACA或RPLACD的调用。和那些仍然使用SETQ的
左边的方框代表CAR，而右边的则代表CDR。保存在一个特定点对单元中的值要么画在适当
CAR和CDR也都能够支持SETF的位置，即给定一个已有的点对单元，有可能将新的值赋给它
当谈论构建在点对单元之上的结构时，一些图例可以很好地帮助我们理解它们。方框和箭头
由于点对中的值可以是对任何类型对象的引用，因此可以通过将点对连接在一起，用它们构
(setf (car *cons*) 10) → 10
(defparameter *cons* (cons 1 2))
(car (cons 1 2)) →1
点对单元中的两个值分别称为CAR和CDR，它们同时也是用来访问这两个值的函数名。在它
cons
(cons
cons*
(setf (cdr *cons*） 20） →
cons*
cons
(cons 1 2)→(1.2)
一样，一些守旧的LiSP程序员仍然直接使用RPLACA和RPLACD，但现代风格是使用CAR或CDR的SETF。
第 12章LISP 名字的由来：列表处理
.nil)
(cons 2 nil))
→(10.20)
→（10
：20
www.TopSage.com
.2)
---
## Page 142
要的这类函数。但利用取自函数式编程的一些观点来考虑，这些函数将更容易被理解。
来表示其他数据结构。
编写一个HTML生成库，其中使用列表的列表来表示被生成的HTML。第13章将介绍如何用点对
XML文档表示成列表。另一个明显的树型结构数据的例子就是Lisp代码本身。第30章和第31章将
们可以成为任何异构和层次数据的极佳表示方式。例如，基于Lisp的XML处理器通常在内部将
类型的对象。
REST分别是CAR和CDR的同义词，当处理作为列表的点对时应该使用它们。
LIST表达式等价于前面的CONS表达式：
你做这些事。例如，LIST函数可以在背后为你构建一些点对单元并将它们链接在一起。下面的
个点对单元通过它们的CDR链接在一起所构成的，如下所示：
的方框之内，要么通过一个从方框指向其所引用值的箭头来表示。“例如，列表(123)是由三
① 在一般情况下，诸如数字这类简单对象画在相应方框的内部，而更复杂的对象画在方框的外部并带有一个来自方
CommonLisp为处理列表提供了一个相当大的函数库。在12.5节和12.6节里将介绍一些更重
由于列表可以将其他列表作为元素，因此可以用它们来表示任意深度与复杂度的树。由此它
(list "foo" (list 1 2) 10)→("foo" (1 2） 10)
因为点对单元可以保存任何类型的值，所以它也可以保存列表。并且单一列表可以保存不同
类似地，当从列表的角度考虑问题时，并不需要使用没有意义的名字CAR和CDR，FIRST和
该列表的结构如下所示：
(list 1)
尽管如此，一般在使用列表时并不需要处理单独的点对单元一
框的箭头以指示该引用。这实际上很好地反映了许多Common Lisp实现的工作方式。从概念上来讲，尽管所有对
(first (rest *list*)）→ 2
(rest *list*)
first *list*)
(defparameter *1ist* (list 1 2 3 4))
(list
象都是按引用保存的，但特定的简单不可修改的对象可以被直接保存在点对单元里。
(list
2 3)→(1 2 3)
2）
→
→(1)
(12)
(234)
www.TopSage.com
2
1
10NIL
3
INIL
12.1
-创建和管理列表的函数将为
“没有列表”
125
---
## Page 143
一美中不足的是，APPEND返回的列表与列表（34)共享了-
的那个新生成的点对单元。原先的点对单元都未被修改过，并且结果确实是列表(123 4）。唯
一起，并把第2个点对单元的CDR指向最后一个实参—列表（3 4)——的头部。然后它返回含有1
样做并无必要。相反，APPEND实际上只用两个新的点对单元来持有值1或2，然后将它们连接在
中的任何点对单元。显然，为了实现该目标，可以创建由四个新的点对单元组成的新列表。但这
所有元素的新列表。例如：
果。举一个具体的例子，函数APPEND可接受任意数量的列表实参并返回一个含有其参数列表的
格和其他编码风格混合在一起使用，但首先应当理解函数式风格应用在列表上的一些微妙之处。
待，接受它们作为实参或是返回它们作为结果。
12.6节里讨论的函数式编程的另一个方面即是对高阶函数的使用：函数将其他函数作为数据来对
1)。但由函数式等价的列表作为实参的不同REVERSE调用将返回函数式等价的结果列表。我将在
可以认为是函数式的。例如，当给定列表(1 2 34)时，序列函数REVERSE总是返回列表(4 3 2
么点对单元。并且，任何接受一个列表作为实参且其返回值完全依赖于列表内容的函数，也同样
任何列表在函数式意义上就将等价于任何其他含有这四个值的列表，无论实际表示该列表的是什
类型来对待，只要将其值视为是由它们包含的元素所决定的即可。这样，形式(12 3 4)表示的
到的那样，通过SETF构成点对单元的CAR和CDR，列表是可改变的。但列表可以当作函数式数据
以及值3和4。你不需要担心程序执行以前发生的事，因为没有什么可以改变该表达式的求值结果。
和测试。例如，当看到像（+34)这样的表达式时，你知道其结果完全取决于“+”函数的定义
了所有超距作用的可能。并且由于函数的结果仅取决于其参数的值，因此它的行为更容易被理解
数的值来计算结果。函数式风格的好处在于它使得程序更易于理解。在消除副作用的同时也消除
12.2
126
多数列表函数之所以会用函数式编写，是因为这能使它们返回与其实参共享点对单元的结
多数Common Lisp的列表操作函数都以函数式风格写成的。我将在后面讨论如何将函数式风
处理数字的函数天生就是函数式的，因为数字都是不可改变的对象。另一方面，如同刚刚看
函数式编程的本质在于，程序完全由没有副作用的函数组成，也就是说，函数完全基于其参
从函数式观点来看，APPEND的工作是返回列表(1234)而无需修改列表(12)和(34)
(append (1ist 1 2)(list 3 4)) →(1 2 3 4)
函数式编程和列表
第12章
新的点对单元
1
1
LISP名字的由来：列表处理
www.TopSage.com
2 NIL
3
一些点对单元。产生的结构如下所示：
+
 4NIL
---
## Page 144
CAR部分的值，从而影响了两个列表。
列表那样共享了一些结构。
享结果的函数混合使用，那么就需要小心不要疏忽地修改了共享的结构。例如，考虑下面三个定义：
码中，因此你不该用函数式术语来描述它们。但如果将非函数式的副作用性操作和那些返回结构共
数。但是将这些操作描述成是破坏性的有一点不公平一
的，此外还包括诸如VECTOR-PUSH或VECTOR-POP这类在底层使用SETF来修改已有对象状态的函
坏性操作，即副作用性（for-side-effect）操作和回收性（recycling）操作。
使用同样的术语来描述所有的状态修改操作会在一定程度上产生误解，因为存在两种相当不同破
程中，改变一个对象的状态相当于“破坏”了它，因为它不再代表相同的那个值了。尽管如此，
用是如何跟结构共享混合的。
点对单元被创建之后有可能通过对其CAR或CDR进行SETF操作来修改它，所以你需要想一想副作
12.3
返回以特定方式共享结构的结果。其他函数则被简单地允许根据具体实现来返回共享的结构。
会与其最后一个实参共享结构。
① for-side-effect是被语言标准所采用的短语，而recycling则是我自己的发明。多数Lisp著作简单地将术语“破坏性”
由于Lisp的函数式传统，修改已有对象的操作被称作是破坏性的（destructive）。在函数式编
其他一些函数也相似地利用了列表共享结构的能力。一些像APPEND这样的函数被指定总是
而另一种破坏性操作，即回收性操作，其本来就是用于函数式代码中的。它们的副作用仅是
在共享的结构中，由于*list-2*中的第一个点对单元也是*list-3*中的第三个点对单元,
现在看看当修改了*list-2*时会发生什么：
*list-1*
在对这些形式求值之后，你有了三个列表，但是*list-3*和*list-2*就像前面的图示中的
副作用性操作是那些专门利用其副作用的操作。就此而言，所有对SETF的使用都是破坏性
如果CommonLisp只是一门纯函数式语言，那么故事就应该到此为止了。不过，因为在一个
*list-3*
(setf(first *list-2*）0）→ 0
*list-3*
*list-2*
{defparameter *list-3*
(defparameter *list-1*
一般而言，APPEND必须复制除最后一个实参以外的所有其他实参，但它的返回结果却总是
统用在这两类操作上，从而产生了我正试图消除的误解。
list-2
(defparameter *list-2*
“破坏性”操作
(append *list-1* *list-2*))
(list 3
(list 1 2))
（1204）；你可能并不想要这种结果
(04)
(1234)
(12)
www.TopSage.com
41）
V
：如你所愿
一它们没打算被用于以函数式风格编写的代
12.3“破坏性”操作
---
## Page 145
结果如下所示：
空列表的第一个点对单元。然后它返回第一个列表，后者现在是拼接在一起的结果的开始部分。
函数SUBSTITUTE及其变体的回收性版本。
NCONC，即APPEND的回收性版本，以及NSUBSTITUTE和它的-IF和-IF-NOT变体，这些是序列
足以信赖的程度。
在函数返回之后不再被使用时，才能安全地使用它们。多数回收性函数的副作用说明并未严格到