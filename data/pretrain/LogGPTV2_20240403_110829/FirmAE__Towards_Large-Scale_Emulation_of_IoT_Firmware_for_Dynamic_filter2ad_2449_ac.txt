of the machines supported by QEMU, by following the approach
employed in a previous study [17]. This performs well for several
FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis
ACSAC 2020, December 7–11, 2020, Austin, USA
firmware images; however, it fails to emulate ARM firmware images
with multiple network interfaces. Firmadyne attempts to address
this multi-interface problem by preparing a fixed number (four)
of dummy interfaces. Its basic assumption is that the number of
interfaces should be more than or equal to the suffix of the interface
name, which is extracted from kernel logs. For example, if eth1 is
logged, it is highly likely that eth0 exists as well. However, almost
all ARM images are still not emulated.
We carefully investigated these cases, but we could not identify
the exact cause. Nevertheless, we could address the failure with
a high-level intervention that forcibly sets up only one Ethernet
interface. More specifically, our intervention forcibly sets up an
Ethernet interface, eth0, and avoids setting the other interfaces.
Thus, we set a bridge network interface and link it to the host if
necessary. With this intervention, a large portion of ARM firmware
images could be emulated.
Insufficient VLAN setup. VLAN is a typical feature of routers, as
it provides an isolated network environment, logically grouping sub
networks. A VLAN interface has different characteristics compared
to other network interfaces, such as Ethernet or WLAN, and thus
it must be set with additional options. To support VLAN, the type
of TAP interface should be set to VLAN, and an appropriate VLAN
id should be assigned to it.
Another failure occurs in firmware images with VLAN interfaces.
When emulating these images, even though Ethernet interfaces
were properly configured with independent IP addresses, the guest
network was unreachable. Firmadyne attempts to address this by
running a command when setting the host TAP interface; however,
their configuration is insufficient to handle it. In particular, the
VLAN should be set to group the host and guest networks with
the same VLAN id. However, Firmadyne dismissed setting the host
network. FirmAE arbitrates this by properly configuring the VLAN.
Filtering rules in iptables. Numerous routers set a firewall to pre-
vent unauthorized remote access by design. Otherwise, an attacker
could access administration interfaces. Some firmware images in
our dataset also implement this policy by using iptables. Conse-
quently, the guest kernel drops all packets from the host. We found
most of these cases in TP-Link, where the guest is not reachable,
even though host and guest networks are configured properly.
This does not represent an emulation failure, since setting ipta-
bles mimics the original behavior of real devices. However, such
filtering prevents the analysis of their potential vulnerabilities and
threats. Evidently, identified vulnerabilities during the analysis
might not be remotely exploitable. Nevertheless, numerous device
owners or administrators mistakenly change these rules, making
the device publicly accessible [14, 15, 51].
FirmAE arbitrates this by checking filtering rules in the guest
system and removing them if they exist. This could be done simply
by flushing all policies in the iptables and setting the default policy
to accept all incoming packets. Then, the guest network becomes
reachable from the host, and dynamic analysis can be conducted.
used in embedded devices to store configuration data. Internal pro-
grams in embedded devices often store/fetch necessary information
in/from it. These programs often crash unless NVRAM is supported.
Firmadyne implements a custom NVRAM library to emulate
NVRAM-related functions. This custom library is loaded in advance
to include other libraries by setting the environmental variable
called LD_PRELOAD. This intercepts NVRAM-related functions such
as nvram_get() and nvram_set(), and emulates an NVRAM without
physical access. Specifically, when nvram_set() is called, a key-value
pair is stored in a file, and it is later fetched when nvram_get() is
called. For these cases, where nvram_get() is called before the call
of nvram_set(), Firmadyne initializes key-value pairs using default
files in the given firmware, which typically exist for the factory
reset functionality of a device. Firmadyne has a list of few hard-
coded paths of default files to extract key-value pairs. However,
many firmware images in our dataset are still not emulated.
Supporting custom NVRAM default files. We found numerous
cases, where the paths of default file differ depending on each device,
and even their key-value pairs have different patterns. For example,
in some D-Link images, default files are located at /etc/nvram.default
or /mnt/nvram_rt.default. Furthermore, default files in some NET-
GEAR images are found at /usr/etc/default. The key-value pairs in
these files are separated with a diverse delimiter, such as a carriage
return or NULL byte. Some default files even have vendor specific
formats, such as OBJ or ELM.
To develop a scalable approach, FirmAE prepares arbitration
during the pre-emulation. Specifically, FirmAE records all the key-
value pairs accessed with the nvram_get() and nvram_set() func-
tions during the pre-emulation. Then, it scans the filesystem of the
target firmware and searches files that contain multiple instances
of the recorded key names, whose values are unknown. FirmAE
extracts the key-value pairs from the files (if they exist) and utilizes
them in the final emulation.
No NVRAM default file. Unfortunately, not all firmware images
have default NVRAM files. Even if a default file exists, it may not
contain the requested key-value pairs. One simple approach to
address this issue is to return the NULL value for uninitialized keys,
as Firmadyne does. However, we observed many cases that crash
with a segmentation fault after nvram_get() returns NULL. By reverse
engineering the crashed programs, we found that, surprisingly,
many programs do not verify the return value of nvram_get(). They
just pass the return value into string-related functions, such as
strcpy() or strtok() and crash with a NULL pointer dereference.
FirmAE handles this by arbitrating the behavior of the nvram_get()
function. Instead of returning the NULL value when accessing unini-
tialized keys, FirmAE returns a pointer to an empty string. This
simple change significantly decreases crashes, particularly in NET-
GEAR images. Because we cannot obtain real key-value pairs with-
out physical devices, this would be one of the most optimal ap-
proaches to avoid crashes caused by deficient error handling in
many internal programs.
4.3 NVRAM arbitrations
Emulating peripherals similar to the real environment is one of the
most challenging parts in firmware emulation (§2.3). An NVRAM,
which is essentially a flash memory, is one of the peripherals widely
4.4 Kernel arbitrations
Many programs in an embedded device co-operate with peripherals
through device drivers in the kernel. Typically, they communicate
ACSAC 2020, December 7–11, 2020, Austin, USA
Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and Yongdae Kim
with peripherals using ioctl commands. Unfortunately, emulat-
ing this procedure is not a simple task, as each device driver has
distinctive characteristics depending on its developers and a corre-
sponding device. Although Firmadyne implemented a few dummy
kernel modules, which support /dev/nvram and /dev/acos_nat_cli,
it could not cover diverse characteristics of firmware images in
practical scenarios. Many firmware images in our dataset also crash
due to this problem.
Insufficient support of kernel module. Since Firmadyne imple-
mented dummy modules with hard-coded device names and ioctl
commands, some programs fail when accessing kernel modules
with a different configuration. For example, numerous NETGEAR
images utilize a module called acos_nat, which is used to commu-
nicate with a peripheral device mounted on /dev/acos_nat_cli. In
those images, a Firmadyne module returns incorrect values and
causes an infinite loop on the web services of httpd. Furthermore,
we found that ioctl commands vary depending on firmware archi-
tectures, thus this should be considered as well.
FirmAE’s high-level approach takes advantage of emulating a
specific kernel module. The key intuition here is that numerous
kernel modules are accessed through shared libraries, which have
functions that send corresponding ioctl commands. Thus, FirmAE
intercepts library function calls similarly to handling NVRAM is-
sues (§4.3). When a program calls library functions, FirmAE returns
a pre-defined value. Hence, each ioctl command does not need to
be emulated depending on the device architecture. In this example,
we only focused on acos_nat, whereas other peripheral accesses
via shared libraries can be handled in the same manner.
Improper kernel version. We found some firmware images fac-
ing issues with the kernel version. Firmadyne customized Linux
kernel v2.6.32 in the firmware emulation. However, recent embed-
ded devices use a newer version of the kernel. Upgrading the kernel
version seems like a trivial solution to this problem. Indeed, we
experimentally tested Linux kernel v4.1.17 and successfully em-
ulated more firmware images. However, some firmware images,
particularly older ones, were not emulated with the new version of
the kernel. These images failed with a crash in the libc library.
We investigated these cases and determined that the address
space layout randomization of Linux kernel v4.1.17 is not com-
patible with the old versions of libc. To resolve this, we used the
compatibility option when compiling the new kernel. Specifically,
we set the CONFIG_COMPAT_BRK option, which excludes randomizing
brk area in heap memory. With this new kernel, FirmAE was able
to handle the above cases. Other compatibility issues may exist that
were not detected in our experiment. To address these, multiple
kernel versions with various compiling options should be tested
further, which is one of the aims of our future studies.
4.5 Other arbitrations
Some failure cases are addressed by other minor interventions.
Unexecuted web servers. For the dynamic analysis of the web
service, we need to achieve both network reachability and web
service availability. In some images, a web server does not run even
after the network is configured successfully. We could not find the
exact root cause of this phenomenon. However, an intervention that
forcibly executes a web server could address the issue. Specifically,
it searches a widely used web server such as httpd, lighttpd, boa,
or goahead in the filesystem of the target firmware, along with their
corresponding configuration files, and executes it.
Timeout issues. Emulating firmware images that do not respond
for a long time should be forcibly stopped. Thus, setting a suitable
timeout is necessary. Firmadyne applied use a 60 s timeout; however,
firmware images, particularly from NETGEAR, take a long time
to complete their booting procedure, whereby their emulation is
eventually blocked. We investigated such cases and empirically
found a suitable timeout of 240 s. Although this change was simple,
more than 60 firmware images were successfully emulated.
Lack of tools for emulation. Embedded device developers often
omit unnecessary functionalities to save storage. Thus, a firmware
image may not have the appropriate tools to emulate itself. As the
emulated environment does not have any storage limitation, we
can add several required tools. For successful emulation, several
Linux commands such as mount or ln should be prepared in the
filesystem. We resolve this by adding the latest version of busybox
into the filesystem of the target firmware. This simple addition
enables essential commands, and leads to successful emulation.
5 EVALUATION
From the investigation on AnalysisSet, we found several arbitration
points (§4). In this section, we evaluate each arbitration with our
prototype FirmAE (§3.3) on our datasets. For this, we implement a
total of 3671 LoC in Python and shell scripts. We also introduce the
vulnerabilities identified during the dynamic analysis with FirmAE.
5.1 Firmware emulation result
We compare the emulation rates of FirmAE and Firmadyne on each
dataset (§3.4). The total emulation time of all datasets was less
than four hours (14289 s), as FirmAE supports full automation and
parallelization (§3.3).
Overall result. As our goal is to emulate the web services for dy-
namic analysis (§3.1), we verify the network reachability and web
service availability of each emulated firmware. Henceforth, we re-
fer to the web service availability as the emulation rate. The final
results are listed in Table 1. Overall, the emulation rate significantly
increased from 16.28% to 79.36% (by 487%). Because our investiga-
tion is based on AnalysisSet, it shows the highest rate of 91.83%.
The rates of LatestSet and CamSet also show a large improvement
compared to those obtained by Firmadyne, and we could identify
vulnerabilities in them (§5.3). In AnalysisSet, the emulation rate
of NETGEAR images increased the most, from 10.95% to 93.80%
(by 857%), owing to the intervention that addresses ARM network
issues, as majority of the NETGEAR images are ARM-based. The
emulation rates of TRENDnet, ASUS, Belkin, and Zyxel in LatestSet
are under 60%; these lower rates are attributed to the larger number
of kernel modules in these images and the use of custom hardware
interfaces. We describe this in detail in §5.2.
The emulation rates of CamSet indicate that addressing failure
issues of wireless routers can also help emulate IP cameras. In par-
ticular, none of the D-Link images were emulated with Firmadyne,
whereas FirmAE could emulate more than 65% of the images. Never-
theless, FirmAE fails to emulate all TP-Link images. We investigated
these failed cases and found that they do not contain web servers.
FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis
ACSAC 2020, December 7–11, 2020, Austin, USA
Table 1: Emulation rate of network and web services
Firmadyne
Web
FirmAE
Web
LatestSet
CamSet
D-Link
TP-Link
TRENDnet
Dataset
AnalysisSet
Vendor
D-Link
TP-Link
NETGEAR
Sub Total
Net
55
26
86
167
18
33
30
35
27
2
13
3
161
0
0
2
2
Net
177
73
259
509
54
69
92
91
63
30
48
18
465
19
6
10
35
Images
179
73
274
526
58
69
101
106
107
37
55
20
553
26
6
13
45
1124
D-Link
TP-Link
NETGEAR
TRENDnet
ASUS
Belkin
Linksys
Zyxel
Sub Total
54 (30.17%)
5 ( 6.85%)
30 (10.95%)
89 (16.92%)
17 (29.31%)
10 (14.49%)
7 ( 6.93%)
23 (21.70%)
25 (23.36%)
2 ( 5.41%)
8 (14.55%)
0 ( 0.00%)
92 (16.64%)
0 ( 0.00%)
0 ( 0.00%)
2 (15.38%)
2 ( 4.44%)
330 183 (16.28%)
167 (93.30%)
59 (80.82%)
257 (93.80%)
483 (91.83%)
48 (82.76%)