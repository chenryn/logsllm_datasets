                if ((hs.opcode & 0xF0) == 0x70      // Jcc
                    || (hs.opcode & 0xFC) == 0xE0)  // LOOPNZ/LOOPZ/LOOP/JECXZ
                    dest += (INT8)hs.imm.imm8;
                else
                    dest += (INT32)hs.imm.imm32;
                // Simply copy an internal jump.
                if ((ULONG_PTR)ct->pTarget pTarget + sizeof(JMP_REL)))
                {
                    if (jmpDest = jmpDest);
            }
            // Can't alter the instruction length in a branch.
            if (pOldInst  TRAMPOLINE_MAX_SIZE)
                return FALSE;
            // Trampoline function has too many instructions.
            if (ct->nIP >= ARRAYSIZE(ct->oldIPs))
                return FALSE;
            ct->oldIPs[ct->nIP] = oldPos;
            ct->newIPs[ct->nIP] = newPos;
            ct->nIP++;
            // Avoid using memcpy to reduce the footprint.
    #ifndef _MSC_VER
            memcpy((LPBYTE)ct->pTrampoline + newPos, pCopySrc, copySize);
    #else
            __movsb((LPBYTE)ct->pTrampoline + newPos,(LPBYTE)pCopySrc, copySize);
    #endif
            newPos += copySize;
            oldPos += hs.len;
        }
        while (!finished);
  1. 接下来就是还需要在`pTrampoline`的末尾写上一个长跳转指令，跳转到被Hook函数的指定位置开始执行(注意不是被Hook函数的开始，因为被Hook函数的开始部分已经在pTrampoline指向的buffer的前五个字节中已经被执行了)。（其实这部分代码是在do-while循环中完成的）
    JMP_ABS jmp = {
            0xFF, 0x25, 0x00000000, // FF25 00000000: JMP [RIP+6]
            0x0000000000000000ULL   // Absolute destination address
        }; 
        // 0xff25的一个长跳转
    if (oldPos >= sizeof(JMP_REL))
            {
                // The trampoline function is long enough.
                // Complete the function with the jump to the target function.
    #if defined(_M_X64) || defined(__x86_64__)
                jmp.address = pOldInst; // x64模式写， 0xFF25 disp64进行jmp
    #else
                jmp.operand = (UINT32)(pOldInst - (pNewInst + sizeof(jmp)));
    #endif
                pCopySrc = &jmp;
                copySize = sizeof(jmp);
                finished = TRUE;
    }
### 0x3 安装钩子
钩子函数已经初始化成功了，接下来就需要开始安装了，调用`MH_EnableHook`函数。核心操作在函数`EnableHookLL`中：
    static MH_STATUS EnableHookLL(UINT pos, BOOL enable)
    {
        PHOOK_ENTRY pHook = &g_hooks.pItems[pos];
        DWORD  oldProtect;
        SIZE_T patchSize    = sizeof(JMP_REL);
        LPBYTE pPatchTarget = (LPBYTE)pHook->pTarget;
        if (pHook->patchAbove)
        {
            pPatchTarget -= sizeof(JMP_REL);
            patchSize    += sizeof(JMP_REL_SHORT);
        }
        if (!VirtualProtect(pPatchTarget, patchSize, PAGE_EXECUTE_READWRITE, &oldProtect))
            return MH_ERROR_MEMORY_PROTECT;
        if (enable)
        {
            PJMP_REL pJmp = (PJMP_REL)pPatchTarget;
            pJmp->opcode = 0xE9;
            pJmp->operand = (UINT32)((LPBYTE)pHook->pDetour - (pPatchTarget + sizeof(JMP_REL)));
            if (pHook->patchAbove)
            {
                PJMP_REL_SHORT pShortJmp = (PJMP_REL_SHORT)pHook->pTarget;
                pShortJmp->opcode = 0xEB;
                pShortJmp->operand = (UINT8)(0 - (sizeof(JMP_REL_SHORT) + sizeof(JMP_REL)));
            }
        }
        else
        {
            if (pHook->patchAbove)
                memcpy(pPatchTarget, pHook->backup, sizeof(JMP_REL) + sizeof(JMP_REL_SHORT));
            else
                memcpy(pPatchTarget, pHook->backup, sizeof(JMP_REL));
        }
        VirtualProtect(pPatchTarget, patchSize, oldProtect, &oldProtect);
        // Just-in-case measure.
        FlushInstructionCache(GetCurrentProcess(), pPatchTarget, patchSize);
        pHook->isEnabled   = enable;
        pHook->queueEnable = enable;
        return MH_OK;
    }
核心代码就下面三行：
    PJMP_REL pJmp = (PJMP_REL)pPatchTarget;
            pJmp->opcode = 0xE9;
            pJmp->operand = (UINT32)((LPBYTE)pHook->pDetour - (pPatchTarget + sizeof(JMP_REL)));
在被Hook的函数的前五个字节写上`0xe9+跳转地址`,跳转到我们创建假的函数地址的位置。
但是再执行`EnableHookLL`还要执行一个操作，就是先暂停本进程出去本线程之外的所有线程,调用`freeze`函数实现操作：
    static VOID Freeze(PFROZEN_THREADS pThreads, UINT pos, UINT action)
    {
        pThreads->pItems   = NULL;
        pThreads->capacity = 0;
        pThreads->size     = 0;
        EnumerateThreads(pThreads);
        if (pThreads->pItems != NULL)
        {
            UINT i;
            for (i = 0; i size; ++i)
            {
                HANDLE hThread = OpenThread(THREAD_ACCESS, FALSE, pThreads->pItems[i]);
                if (hThread != NULL)
                {
                    SuspendThread(hThread);
                    ProcessThreadIPs(hThread, pos, action);
                    CloseHandle(hThread);
                }
            }
        }
    }
跟踪一下`ProcessThreadIPs`函数的操作：
    static void ProcessThreadIPs(HANDLE hThread, UINT pos, UINT action)
    {
        // If the thread suspended in the overwritten area,
        // move IP to the proper address.
        CONTEXT c;
    #if defined(_M_X64) || defined(__x86_64__)
        DWORD64 *pIP = &c.Rip;
    #else
        DWORD   *pIP = &c.Eip;
    #endif
        UINT count;
        c.ContextFlags = CONTEXT_CONTROL;
        if (!GetThreadContext(hThread, &c))
            return;
        if (pos == ALL_HOOKS_POS)
        {
            pos = 0;
            count = g_hooks.size;
        }
        else
        {
            count = pos + 1;
        }
        for (; pos queueEnable;
                break;
            }
            if (pHook->isEnabled == enable)
                continue;
            if (enable)
                ip = FindNewIP(pHook, *pIP);
            else
                ip = FindOldIP(pHook, *pIP);
            if (ip != 0)
            {
                *pIP = ip;
                SetThreadContext(hThread, &c);
            }
        }
    }
emm，这里直接修改了其他线程的Eip，操作有点秀啊。。。。。
接下来就是恢复线程的操作了,不在细说。
### 0x4 Hook之后的调用过程
就以实例代码中的Hook`MessageBoxW`的调用过程为例，以下图展示：
    DetourMessageBoxW
                                              ^------------>+------------------ --- --+
            +--------------------+            |             |    push ebp             |
            |  // user code      |            |             |    mov ebp,esp          |
          +-+   call MessageBoxW |            |             |    ......               |
          | +--------------------+            |             |    ;your code           |
          |                                   |             |    .....                |
          |                                   |             |    call fpMessage oxW   +--+
          |                                   |             +------------------ --- --+  |
          |                                   |                                          |
          v        origin MessageBoxW         |                   fpMessageBoxW          |
    +-----+------------------------------+    |            +--------------------------+<-+
    |    0xe9 address_D tourMessageBoxW  +----+            |                          |
    |          .......other code......   |                 |    ; origin 5 bytes      |
    +------------------------------------+                 |    ; of MesageBoxW       |
                                                           |                          |
                                                           |    jmp MessageBoxW+5     |
                                                           +--------------------------+
### 0x5 需要改进的地方
因为想做不被执行程序感知的Hook，这里明显的问题是，被Hook的系统API的第一条指令都是`0xe9...`很容易被发现。另外一个问题是这里没有对栈做处理，导致也可以通过`unblance
stack`技巧轻易发现API被Hook过。
所以接下来的工作就是修改这个两个地方。