### 生成和管理GPG密钥

#### 1. 生成私钥
- **密码保护**：为了保护您的私钥，需要设置一个密码。
- **随机性增强**：在生成大量随机字节时，请进行一些额外操作（如敲击键盘、移动鼠标或读写硬盘），以提高随机数生成器的熵数。

```shell
gpg: 正在检查信任度数据库
gpg: 需要 3 份勉强信任和 1 份完全信任，基于 PGP 信任模型
gpg: 深度：0 有效性： 1 已签名： 0 信任度：0-，0q，0n，0m，0f，1u
pub 2048R/421C9354 2017-08-16
密钥指纹 = 8A27 6FB5 1315 CEF8 D8A0 A65B F0C9 7DA6 421C 9354
uid UserA (UserA) 
sub 2048R/9FA3AD25 2017-08-16
```

**注意**：生成密钥后，当前终端可能会变得不可用。执行 `reset` 命令可以恢复，或者关闭并重新打开一个新的终端窗口。

#### 2. 导出公钥
- 在客户端（192.168.4.100）上，导出自己的公钥文件：

```shell
[root@client ~]# gpg --list-keys // 查看公钥环
/root/.gnupg/pubring.gpg
----------------------------------
pub 2048R/421C9354 2017-08-16
uid UserA (User A) 
sub 2048R/9FA3AD25 2017-08-16

// 使用 gpg 命令结合 --export 选项将其中的公钥文本导出：
[root@client ~]# gpg -a --export UserA > UserA.pub
// --export 的作用是导出密钥，-a 的作用是导出的密钥存储为 ASCII 格式
[root@client ~]# scp UserA.pub 192.168.4.5:/tmp/
// 将密钥传给 Proxy
```

#### 3. 导入公钥
- 在代理服务器（192.168.4.5）上导入接收的公钥信息：

```shell
[root@proxy ~]# gpg --import /tmp/UserA.pub
gpg: 密钥 421C9354：公钥 "UserA (UserA)" 已导入
gpg: 合计被处理的数量：1
gpg: 已导入：1 (RSA: 1)
```

#### 4. 使用公钥加密数据
- 在代理服务器（192.168.4.5）上使用公钥加密数据，并把加密后的数据传给 UserA：

```shell
[root@proxy ~]# echo "I love you." > love.txt
[root@proxy ~]# gpg -e -r UserA love.txt
无论如何还是使用这把密钥吗？(y/N)y // 确认使用此密钥加密文件
//-e 选项是使用密钥加密数据
//-r 选项后面跟的是密钥，说明使用哪个密钥对文件加密
[root@proxy ~]# scp love.txt.gpg 192.168.4.100:/root
// 加密的数据传给 UserA
```

#### 5. 使用私钥解密文件
- 在客户端（192.168.4.100）上，使用自己的私钥解密文件：

```shell
[root@client ~]# gpg -d love.txt.gpg > love.txt
您需要输入密码，才能解开这个用户的私钥："UserA (UserA)"
2048 位的 RSA 密钥，钥匙号 9FA3AD25，建立于 2017-08-16 (主钥匙号 421C9354)
// 验证私钥口令
gpg: 由 2048 位的 RSA 密钥加密，钥匙号为 9FA3AD25、生成于 2017-08-16
"UserA (UserA)"
[root@client ~]# cat love.txt // 获得解密后的文件内容
I love you.
```

### 使用 GPG 的签名机制验证数据来源

#### 1. 创建分离式签名
- 在客户端（192.168.4.100）上，UserA 为软件包创建分离式签名：

```shell
[root@client ~]# tar zcf log.tar /var/log // 建立测试软件包
[root@client ~]# gpg -b log.tar // 创建分离式数字签名
[root@client ~]# ls -lh log.tar*
-rw-rw-r--. 1 root root 170 8月 17 21:18 log.tar
-rw-rw-r--. 1 root root 287 8月 17 21:22 log.tar.sig
[root@client ~]# scp log.tar* 192.168.4.5:/root
// 将签名文件与签名传给 UserB
```

#### 2. 验证签名
- 在代理服务器（192.168.4.5）上验证签名：

```shell
[root@proxy ~]# gpg --verify log.tar.sig log.tar
gpg: 于 2028 年 06 月 07 日 星期六 23 时 23 分 23 秒 CST 创建的签名，使用 RSA，钥匙号 421C9354
gpg: 完好的签名，来自于 "UserA (UserA)"
```

### 使用 AIDE 进行入侵检测

#### 1. 安装 AIDE
- 安装 AIDE 软件包：

```shell
[root@proxy ~]# yum -y install aide
```

#### 2. 修改配置文件
- 编辑 `/etc/aide.conf` 文件以确定校验哪些数据及如何校验：

```shell
@@define DBDIR /var/lib/aide // 数据库目录
@@define LOGDIR /var/log/aide // 日志目录
database_out=file:@@{DBDIR}/aide.db.new.gz // 数据库文件名

// 可以检查的项目（权限，用户，组，大小，哈希值等）
DATAONLY = p+n+u+g+s+acl+selinux+xattrs+sha256

// 设置需要对哪些数据进行入侵校验检查
/root DATAONLY
```

#### 3. 初始化数据库并进行检测
- 入侵前对数据进行校验，生成初始化数据库：

```shell
[root@proxy ~]# aide --init
AIDE, version 0.15.1
AIDE database at /var/lib/aide/aide.db.new.gz initialized.

// 备份数据库，将数据库文件拷贝到 U 盘（非必须的操作）
[root@proxy ~]# cp /var/lib/aide/aide.db.new.gz /media/

// 入侵后检测
[root@proxy ~]# cd /var/lib/aide/
[root@proxy ~]# mv aide.db.new.gz aide.db.gz
[root@proxy ~]# aide --check // 检查哪些数据发生了变化
```

### 使用 NMAP 扫描和 TCPDUMP 分析

#### 1. 安装 NMAP
- 安装 NMAP 软件包：

```shell
[root@proxy ~]# yum -y install nmap
```

#### 2. 扫描指定主机/网段
- 检查 192.168.4.100 主机是否可以 ping 通：

```shell
[root@proxy ~]# nmap -sP 192.168.4.100
Starting Nmap 6.40 (http://nmap.org) at 2018-06-06 21:59 CST
mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-servers
Nmap scan report for host3 (192.168.4.100)
Host is up (0.00036s latency).
MAC Address: 52:54:00:71:07:76 (QEMU Virtual NIC)
Nmap done: 1 IP address (1 host up) scanned in 0.02 seconds

// 使用 -n 选项可以不执行 DNS 解析
[root@proxy ~]# nmap -n -sP 192.168.4.100
Starting Nmap 6.40 (http://nmap.org) at 2018-06-06 22:00 CST
Nmap scan report for 192.168.4.100
Host is up (0.00046s latency).
MAC Address: 52:54:00:71:07:76 (QEMU Virtual NIC)
Nmap done: 1 IP address (1 host up) scanned in 0.03 seconds
```

- 检查 192.168.4.0/24 网段内哪些主机可以 ping 通：

```shell
[root@proxy ~]# nmap -n -sP 192.168.4.0/24
Starting Nmap 5.51 (http://nmap.org) at 2017-05-17 18:01 CST
Nmap scan report for 192.168.4.1
Host is up.
Nmap scan report for 192.168.4.7
Host is up.
Nmap scan report for 192.168.4.120
Host is up (0.00027s latency).
MAC Address: 00:0C:29:74:BE:21 (VMware)
Nmap scan report for 192.168.4.110
Host is up (0.00016s latency).
MAC Address: 00:50:56:C0:00:01 (VMware)
Nmap scan report for 192.168.4.120
Host is up (0.00046s latency).
MAC Address: 00:0C:29:DB:84:46 (VMware)
Nmap done: 256 IP addresses (5 hosts up) scanned in 3.57 seconds
```

- 检查目标主机所开启的 TCP 服务：

```shell
[root@proxy ~]# nmap -sT 192.168.4.100
Starting Nmap 5.51 (http://nmap.org) at 2018-05-17 17:55 CST
Nmap scan report for 192.168.4.100
Host is up (0.00028s latency).
Not shown: 990 closed ports
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
25/tcp open smtp
80/tcp open http
110/tcp open pop3
111/tcp open rpcbind
143/tcp open imap
443/tcp open https
993/tcp open imaps
995/tcp open pop3s
MAC Address: 00:0C:29:74:BE:21 (VMware)
Nmap done: 1 IP address (1 host up) scanned in 1.31 seconds
```

- 检查 192.168.4.0/24 网段内哪些主机开启了 FTP 和 SSH 服务：

```shell
[root@proxy ~]# nmap -p 21-22 192.168.4.0/24
Starting Nmap 5.51 (http://nmap.org) at 2017-05-17 18:00 CST
Nmap scan report for 192.168.4.1
Host is up (0.000025s latency).
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh

Nmap scan report for 192.168.4.7
Host is up.
PORT STATE SERVICE
21/tcp filtered ftp
22/tcp filtered ssh

Nmap scan report for 192.168.4.120
Host is up (0.00052s latency).
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
MAC Address: 00:0C:29:74:BE:21 (VMware)

Nmap scan report for pc110.tarena.com (192.168.4.110)
Host is up (0.00038s latency).
PORT STATE SERVICE
21/tcp closed ftp
22/tcp closed ssh
MAC Address: 00:50:56:C0:00:01 (VMware)

Nmap scan report for 192.168.4.120
Host is up (0.00051s latency).
PORT STATE SERVICE
21/tcp closed ftp
22/tcp closed ssh
MAC Address: 00:0C:29:DB:84:46 (VMware)
```