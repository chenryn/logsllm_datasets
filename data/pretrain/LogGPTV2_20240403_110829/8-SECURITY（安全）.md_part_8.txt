//输入大写O确认
您需要一个密码来保护您的私钥。
我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。
gpg: 正在检查信任度数据库
gpg: 需要 3 份勉强信任和 1 份完全信任，PGP 信任模型
gpg: 深度：0 有效性： 1 已签名： 0 信任度：0-，0q，0n，0m，0f，1u
pub 2048R/421C9354 2017-08-16
密钥指纹 = 8A27 6FB5 1315 CEF8 D8A0 A65B F0C9 7DA6 421C 9354
uid UserA (UserA) \
sub 2048R/9FA3AD25 2017-08-16
注意：生产密钥后当前终端可能会变的无法使用，执行reset命令即可，或者关闭后再开一个终端。
2）UserA导出自己的公钥文件(在192.168.4.100操作)
用户的公钥、私钥信息分别保存在pubring.gpg和secring.gpg文件内：
\[root@client \~\]# gpg \--list-keys //查看公钥环
/root/.gnupg/pubring.gpg
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
pub 2048R/421C9354 2017-08-16
uid UserA (User A) \
sub 2048R/9FA3AD25 2017-08-16
使用gpg命令结合\--export选项将其中的公钥文本导出：
\[root@client \~\]# gpg -a \--export UserA \> UserA.pub
//\--export的作用是导出密钥，-a的作用是导出的密钥存储为ASCII格式
\[root@client \~\]# scp UserA.pub 192.168.4.5:/tmp/
//将密钥传给Proxy
3）UserB导入接收的公钥信息（在192.168.4.5操作）
使用gpg命令结合\--import选项导入发送方的公钥信息，以便在加密文件时指定对应的公钥。
\[root@proxy \~\]# gpg \--import /tmp/UserA.pub
gpg: 密钥 421C9354：公钥"UserA (UserA) \"已导入
gpg: 合计被处理的数量：1
gpg: 已导入：1 (RSA: 1)
4\)
UserB使用公钥加密数据，并把加密后的数据传给UserA（在192.168.4.5操作）
\[root@proxy \~\]# echo \"I love you .\" \> love.txt
\[root@proxy \~\]# gpg -e -r UserA love.txt
无论如何还是使用这把密钥吗？(y/N)y //确认使用此密钥加密文件
//-e选项是使用密钥加密数据
//-r选项后面跟的是密钥，说明使用哪个密钥对文件加密
\[root@proxy \~\]# scp love.txt.gpg 192.168.4.100:/root
//加密的数据传给UserA
4）UserA以自己的私钥解密文件（在192.168.4.100操作）
\[root@client \~\]# gpg -d love.txt.gpg \> love.txt
您需要输入密码，才能解开这个用户的私钥："UserA (UserA)
\"
2048 位的 RSA 密钥，钥匙号 9FA3AD25，建立于 2017-08-16 (主钥匙号
421C9354)
//验证私钥口令
gpg: 由 2048 位的 RSA 密钥加密，钥匙号为 9FA3AD25、生成于 2017-08-16
"UserA (UserA) \"
\[root@client \~\]# cat love.txt //获得解密后的文件内容
I love you.
步骤四：使用GPG的签名机制，检查数据来源的正确性
使用私钥签名的文件，是可以使用对应的公钥验证签名的，只要验证成功，则说明这个文件一定是出自对应的私钥签名，除非私钥被盗，否则一定能证明这个文件来自于某个人！
1）在client(192.168.4.100)上，UserA为软件包创建分离式签名
将软件包、签名文件、公钥文件一起发布给其他用户下载。
\[root@client \~\]# tar zcf log.tar /var/log //建立测试软件包
\[root@client \~\]# gpg -b log.tar //创建分离式数字签名
\[root@client \~\]# ls -lh log.tar\*
-rw-rw-r\--. 1 root root 170 8月 17 21:18 log.tar
-rw-rw-r\--. 1 root root 287 8月 17 21:22 log.tar.sig
\[root@client \~\]# scp log.tar\* 192.168.4.5:/root
//将签名文件与签名传给UserB
2）在192.168.4.5上验证签名
\[root@proxy \~\]# gpg \--verify log.tar.sig log.tar
gpg:于2028年06月07日 星期六 23时23分23秒 CST 创建的签名，使用
RSA，钥匙号 421C9354
gpg: 完好的签名，来自于"UserA (UserA) \"
.. ..
2 案例2：使用AIDE做入侵检测
2.1 问题
本案例要求熟悉Linux主机环境下的常用安全工具，完成以下任务操作：
安装aide软件
执行初始化校验操作，生成校验数据库文件
备份数据库文件到安全的地方
使用数据库执行入侵检测操作
2.2 方案
Aide通过检查数据文件的权限、时间、大小、哈希值等，校验数据的完整性。
使用Aide需要在数据没有被破坏前，对数据完成初始化校验，生成校验数据库文件，在被攻击后，可以使用数据库文件，快速定位被人篡改的文件。
2.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：部署AIDE入侵检测系统
1）安装软件包
\[root@proxy \~\]# yum -y install aide
2\) 修改配置文件
确定对哪些数据进行校验，如何校验数据
\[root@proxy \~\]# vim /etc/aide.conf
@@define DBDIR /var/lib/aide //数据库目录
@@define LOGDIR /var/log/aide //日志目录
database_out=file:@@{DBDIR}/aide.db.new.gz //数据库文件名
//一下内容为可以检查的项目（权限，用户，组，大小，哈希值等）
#p: permissions
#i: inode:
#n: number of links
#u: user
#g: group
#s: size
#md5: md5 checksum
#sha1: sha1 checksum
#sha256: sha256 checksum
DATAONLY = p+n+u+g+s+acl+selinux+xattrs+sha256
//以下内容设置需要对哪些数据进行入侵校验检查
//注意：为了校验的效率，这里将所有默认的校验目录与文件都注释
//仅保留/root目录，其他目录都注释掉
/root DATAONLY
#/boot NORMAL //对哪些目录进行什么校验
#/bin NORMAL
#/sbin NORMAL
#/lib NORMAL
#/lib64 NORMAL
#/opt NORMAL
#/usr NORMAL
#!/usr/src //使用\[!\]，设置不校验的目录
#!/usr/tmp
步骤二：初始化数据库，入侵后检测
1）入侵前对数据进行校验，生成初始化数据库
\[root@proxy \~\]# aide \--init
AIDE, version 0.15.1
AIDE database at /var/lib/aide/aide.db.new.gz initialized.
//生成校验数据库，数据保存在/var/lib/aide/aide.db.new.gz
2）备份数据库，将数据库文件拷贝到U盘（非必须的操作）
\[root@proxy \~\]# cp /var/lib/aide/aide.db.new.gz /media/
3）入侵后检测
\[root@proxy \~\]# cd /var/lib/aide/
\[root@proxy \~\]# mv aide.db.new.gz aide.db.gz
\[root@proxy \~\]# aide \--check //检查哪些数据发生了变化
3 案例3：扫描与抓包分析
3.1 问题
本案例要求熟悉Linux主机环境下的常用安全工具，完成以下任务操作：
使用NMAP扫描来获取指定主机/网段的相关信息
使用tcpdump分析FTP访问中的明文交换信息
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：使用NMAP扫描来获取指定主机/网段的相关信息
1）安装软件
\[root@proxy \~\]# yum -y install nmap
//基本用法：
\# nmap \[扫描类型\] \[选项\] \
//常用的扫描类型
// -sS，TCP SYN扫描（半开）
// -sT，TCP 连接扫描（全开）
// -sU，UDP扫描
// -sP，ICMP扫描
// -A，目标系统全面分析
2）检查192.168.4.100主机是否可以ping通
\[root@proxy \~\]# nmap -sP 192.168.4.100
Starting Nmap 6.40 ( http://nmap.org ) at 2018-06-06 21:59 CST
mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is
disabled. Try using \--system-dns or specify valid servers with
\--dns-servers
Nmap scan report for host3 (192.168.4.100)
Host is up (0.00036s latency).
MAC Address: 52:54:00:71:07:76 (QEMU Virtual NIC)
Nmap done: 1 IP address (1 host up) scanned in 0.02 seconds
使用-n选项可以不执行DNS解析
\[root@proxy \~\]# nmap -n -sP 192.168.4.100
Starting Nmap 6.40 ( http://nmap.org ) at 2018-06-06 22:00 CST
Nmap scan report for 192.168.4.100
Host is up (0.00046s latency).
MAC Address: 52:54:00:71:07:76 (QEMU Virtual NIC)
Nmap done: 1 IP address (1 host up) scanned in 0.03 seconds
3）检查192.168.4.0/24网段内哪些主机可以ping通
\[root@proxy \~\]# nmap -n -sP 192.168.4.0/24
Starting Nmap 5.51 ( http://nmap.org ) at 2017-05-17 18:01 CST
Nmap scan report for 192.168.4.1
Host is up.
Nmap scan report for 192.168.4.7
Host is up.
Nmap scan report for 192.168.4.120
Host is up (0.00027s latency).
MAC Address: 00:0C:29:74:BE:21 (VMware)
Nmap scan report for 192.168.4.110
Host is up (0.00016s latency).
MAC Address: 00:50:56:C0:00:01 (VMware)
Nmap scan report for 192.168.4.120
Host is up (0.00046s latency).
MAC Address: 00:0C:29:DB:84:46 (VMware)
Nmap done: 256 IP addresses (5 hosts up) scanned in 3.57 seconds
4）检查目标主机所开启的TCP服务
\[root@proxy \~\]# nmap -sT 192.168.4.100
Starting Nmap 5.51 ( http://nmap.org ) at 2018-05-17 17:55 CST
Nmap scan report for 192.168.4.100
Host is up (0.00028s latency).
Not shown: 990 closed ports
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
25/tcp open smtp
80/tcp open http
110/tcp open pop3
111/tcp open rpcbind
143/tcp open imap
443/tcp open https
993/tcp open imaps
995/tcp open pop3s
MAC Address: 00:0C:29:74:BE:21 (VMware)
Nmap done: 1 IP address (1 host up) scanned in 1.31 seconds
5）检查192.168.4.0/24网段内哪些主机开启了FTP、SSH服务
\[root@proxy \~\]# nmap -p 21-22 192.168.4.0/24
Starting Nmap 5.51 ( http://nmap.org ) at 2017-05-17 18:00 CST
Nmap scan report for 192.168.4.1
Host is up (0.000025s latency).
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
Nmap scan report for 192.168.4.7
Host is up.
PORT STATE SERVICE
21/tcp filtered ftp
22/tcp filtered ssh
Nmap scan report for 192.168.4.120
Host is up (0.00052s latency).
PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
MAC Address: 00:0C:29:74:BE:21 (VMware)
Nmap scan report for pc110.tarena.com (192.168.4.110)
Host is up (0.00038s latency).
PORT STATE SERVICE
21/tcp closed ftp
22/tcp closed ssh
MAC Address: 00:50:56:C0:00:01 (VMware)
Nmap scan report for 192.168.4.120
Host is up (0.00051s latency).
PORT STATE SERVICE
21/tcp closed ftp
22/tcp closed ssh
MAC Address: 00:0C:29:DB:84:46 (VMware)