Input
Touch Event
User
Figure 2: The workﬂow when using an IME app.
Contributions. In short, we make the following contri-
butions:
• New Problem. This is the ﬁrst attempt to systemat-
ically understand the threat caused by the leakage of
private sensitive keystrokes in third-party IME apps.
Our discovery shows the pervasive presence of such
attacks, and the seriousness of the problem.
• New Technique. We introduce oblivious sand-
boxing for IME apps that embraces both security
and usability and quiescent points based check-
point/restore that signiﬁcantly simpliﬁes the design
and implementation of I-BOX.
• New System. We demonstrate a working prototype
of the techniques and a set of evaluations conﬁrming
the security threat of commercial IME apps and the
effectiveness of I-BOX.
2 BACKGROUND AND MOTIVATION
In this section, we ﬁrst describe the necessary back-
ground on IME architecture in Android, and then discuss
why commercial IME apps have the incentive to collect
a user’s data, followed by the case studies showing how
IME apps can leak users’ sensitive data to remote parties.
2.1
Input Method Editor
Though Android provides a default IME app for each
language, many end users prefer using third-party IME
apps for better user experiences, such as changing the
screen layout for faster input, generating personalized
phrases to provide intelligently associational input, and
providing more accurate translation from keystrokes to
the target languages. As a result, mobile operating sys-
tems such as Android provide an extensible IME infras-
tructure to allow third-party vendors to develop their own
IME apps.
Figure 2 gives an overview of the involved IME com-
ponents when entering text in a client app. Speciﬁcally,
third-party IME apps must conform to the IME frame-
work so that the Android Input Method Management
Service (IMMS) can recognize and manage them. For
example, every IME app contains a class that extends
from InputMethodService, which helps Android
recognize it as an input service and add it into the sys-
tem as an IME app. When an end user clicks a textbox
to invoke an IME app, Android IMMS will start the de-
fault IME activity and build an InputConnection
between the IME app and the client app that helps the
IME app to commit the user input to the client app. In
particular, the IME app ﬁrst gets the touch event con-
taining the position data and translates it to meaningful
characters or words based on its keyboard layout and in-
ternal logic. Then it sends the keystrokes to the client
app through InputConnection.
The IME architecture is clean with well-deﬁned
classes.
This not only signiﬁcantly saves pro-
grammer’s effort
in developing a new IME app,
but also makes
to locate
it easy for attackers
key points of a victim IME app.
instance,
our study found that simply hooking the function
BaseInputConnection.commitText can inter-
cept all the user’s input in many IME apps. This
can be done by simply searching for the keyword
BaseInputConnection.commitText in the de-
compiled code to locate all of its occurrences.
For
2.2 Why IME Apps Collect Users’ Input
Third-party IME apps usually extend the standard IME
apps with lots of rich features to provide a better user ex-
perience. Such features usually require collecting users’
input data to learn users’ habits to allow personalizing
IME apps. Further, such data may also collectively be
used to improve experiences of other users, i.e., push-
ing phrases learned from a set of users to others. In fact,
there are many features that require collecting user input
data. The following lists a few of them:
• Personal dictionary. Commercial IME apps usu-
ally remember the words and phrases from user
input to speed up follow-up input (especially for
non-Latin languages) by prompting potential results
when input is not ﬁnished. To achieve this, they
need to maintain a personal dictionary for each user
to save frequently typed or self-made words.
• Cloud input. As users usually have multiple de-
vices and need to synchronize personal dictionary
among them, IME apps utilize cloud-based services
to store the dictionary and to synchronize the dic-
tionary and personal settings between different de-
vices.
Meanwhile, some non-Latin languages such as
those eastern languages differ from English in that
IMEs need to translate users’ keystrokes to words
in those languages. To accelerate input speed, IMEs
USENIX Association  
24th USENIX Security Symposium  677
may usually need to leverage cloud services to ana-
lyze and predict users’ intended words based on the
current input.
In addition, for some latin-based languages, some
IME apps provide a feature that leverages the cur-
rent input to predict the intended phrases and adjust
the layout of the soft keyboard to make the soft key
of the next character close to users’ current ﬁgure.
To better predict user intent, some IME apps usually
leverage the abundant resources in cloud to analyze
and predict user input. Meanwhile, they also collect
users’ habits to improve the accuracy of prediction.
• Search mediation. Some IME apps have a new
feature named “search mediation”, which intercepts
user input and returns some search result back to the
user. However, this means that user inputs will be
unrestrictedly sent to the search engine.
Note that due to the unstable network connectivity of
mobile devices, almost all IME apps can work properly
with and without network connections. When network is
disconnected, an IME app may store current input (like
frequently used phrases) for later use when the network
connection is on. Besides, Android’s conﬁgurable per-
mission model indicates that an IME app usually works
normally even without grants of certain permissions.
2.3 Possible Threats Posed by IME Apps
While third-party IME apps do offer useful features and
better user experiences, they may unduly collect user
data or be repackaged to be malicious. Next, we study
the possible threats an IME app could impose.
Privacy leakage in “benign” IME apps. Conventional
wisdom is to trust a respected service provider, in the
hope that the provider will enforce policies in the cloud
to faithfully provide user secrecy [30]. Unfortunately,
this exposes users’ sensitive keystrokes from two threats.
First, a curious or malicious operator may stealthily steal
such data [47, 41], which has been evidenced by numer-
ous insider data theft incidents even from reputed compa-
nies [40]. Second, even reputed cloud providers provide
no guarantee on the security of user data, which is evi-
denced by their user agreements. Hence, it is reasonable
to not trust an IME app to securely protect users’ data.
More speciﬁcally, a severe threat from “benign” IME
apps is that they may have unduly collected user data
without users’ awareness. Given that we do not have
their source code and they often use proprietary proto-
cols with encryption, it thus remains opaque to end users
how the IME apps really handle the sensitive input data.
At a high level, since they have been collecting user data
for better experiences (especially the personal dictionary
and cloud input), it is highly likely that much of a user’s
sensitive input has been leaked to these IME providers.
To conﬁrm our hypothesis, we conducted an experi-
mental study by performing a man-in-the-middle attack
on a popular IME app, namely TouchPal Keyboard (in
version chubao 5.5.5.67049, cootek). This IME app
provides multiple rich functionalities such as cloud in-
put and a personal dictionary and has been installed
more than 7.09 million times from a third-party market.
By intercepting its network packages using Wireshark1,
we found that its cloud input is implemented using an
HTTP POST command which carries several parameters
in plain text. Therefore, we are able to see how it works
without any protocol reverse engineering and packet de-
cryption. A deep investigation revealed that these param-
eters include a userid, the keycode that a user just
entered, and the existing words of the target input con-
trol that user is focusing on. This contradicts its privacy
statement of “No collection of personal information that
you type” in a prior statement2, and thus poses a serious
threat to user privacy.
We suspect there may be many other commercial IME
apps that also leak users’ sensitive input. Currently,
we only used side-channel analysis [11] to analyze the
packet size between the IME apps and their servers. We
did notice there are notable differences in the number of
packets (as reported in §5.2).
Privacy leakage in malicious IME apps. Even if all
third-party IME apps did not leak any user’s private data,
there are still other attack vectors such as repackaging
attacks. In fact, a prior study uncovers that repackaged
malware samples account for 86% of all malware [49].
Moreover, there are also trojans that serve as key loggers
but masquerade as IME apps [29]. Finally, IME apps
may also be vulnerable to component-hijacking attacks.
It has been shown that input methods have been a popu-
lar means to inject malicious code [29]. While currently
we are not aware of any repackaged malicious IME apps
in Android, we envision that there will be such malware
given the large popularity of the ofﬁcial apps and the eas-
iness of repackaging them as shown below.
To understand the repackaging threat of IME apps,
we conducted an attack study by repackaging a popu-
lar commercial IME app called Baidu IME, which has
been downloaded more than 100 million times in a third-
party market. In this study, we repackage the IME app by
inserting a malicious payload into the original program.
The payload records all user input and sends them to a
speciﬁc server.
While the core logic of the Baidu IME app is written
1http://www.wireshark.org/
2We noted that the newer versions of TouchPal changed their pri-
vacy statement indicating that they will collect user privacy data.
678  24th USENIX Security Symposium 
USENIX Association
the other components are written in Java
using C,
which enables an easy reverse engineering of
the
bytecode especially with existing tools. Speciﬁcally,
we used baksmali [2], a popular Dalvik disassem-
bler to reverse classes.dex into an intermediate
representation in the form of smali ﬁles. Then we
directly modiﬁed smali code to insert our payload,
which captures the text committed by the function
BaseInputConnection.commitText and then
sends the data out. A caveat in this study is that we found
it would not work if we simply repackaged the app be-
cause the IME app has a checksum protection. However,
the protection mechanism is rather simple, as it just calls
a self-crash function when detecting repackaging. How-
ever, the self-crash function is not self-protected and thus
we rewrote it to return directly to disable the protection.
We conducted our experiment in a contained environ-
ment and did not upload this repackaged IME app to any
third-party Android market, but attackers can easily do
this, as reported before [49, 48]. We installed this repack-
aged IME app on our test smartphone and all data we
input through it was divulged. Our attack study shows
all critical data that a user inputs will be compromised if
the IME app is malicious. The popularity of third-party
markets aggravates this problem, especially considering
that 5% to 13% of apps are repackaged in a number of
third-party markets [48].
3 OVERVIEW
The goal of I-BOX is to protect users’ sensitive input,
while still preserving the usability of (curious or mali-
cious) IME apps such that users can still beneﬁt from
the rich features. One possible approach might be let-
ting users switch to a trusted IME app when they want
to type some sensitive information. While this may work
for simple sensitive data like passwords, some users’ sen-
sitive input (like addresses and diseases) is scattered in a
long conversation.
It is cumbersome for users to con-
stantly keep this in mind and do the switch. Another
intuitive approach would be to block all network con-
nections during user input, but doing so will negatively
affect the user experience. Besides, there are also other
channels like third-party content providers and external
storages that an IME app may temporally store input data
to be leaked later. Therefore, we have to look for new ap-
proaches.
Approach overview. As discussed, the key challenges
of securely using third-party IME apps are that such apps
are usually closed-source and they may do arbitrary pro-
cessing and transformation of users’ input data before
sending it out. It is thus hard to model or predict their
behavior. Hence, I-BOX instead treats an IME app as a
black box and makes it oblivious to users’ sensitive in-
put data. To achieve this, I-BOX borrows the idea from
execution transactions by running an IME app transac-
tionally. Consequently, if an IME app touches users’
sensitive input data, I-BOX will roll back the IME app’s
states to make it oblivious to what it has observed so as to
address the problem where an IME app stores and trans-
forms users’ input data.
I-BOX regards the user input process as a transaction,
which begins when a user starts to enter the input and
ends when the input session ends. A clean snapshot of an
IME app will be saved before an input transaction starts.
For normal input transactions without touching sensitive
input data, I-BOX will commit the IME app’s state such
that the IME app can use these data to improve the user
experience. To prevent malicious IME apps from send-
ing private data out during the input transaction, the net-
work connection of the IME app will be restricted when
the current transaction is marked as sensitive. When an
input session ends and thus the client app has received
all user input, I-BOX will abort the input transaction from
the view of the IME app, by restoring the IME app’s state
to a most-recent checkpoint. This makes the IME app
oblivious to the sensitive data it observed. Hence, even if
the IME app locally saves a user’s input to be sent later,
the input data will be swiped during restoring.
As input data is provided in a streaming fashion by a
user, there is no general way to know the input stream
in advance. Because the IME app gets the input data
prior to I-BOX, it would be too late to stop an IME app’s
leaking channels like network connection after it gets the
whole input since it may have sent it out or store it lo-
cally. Hence, it is generally impossible for an approach
not leaking any user input before I-BOX can determine if
the current input stream is sensitive or not.
As a result, I-BOX chooses to use a combination of
context-based and policy-driven approaches based on the
state of the IME app, with the goal of striking a balance
between user experience and privacy. For speciﬁc input
such as passwords, which I-BOX can determine through
input context, I-BOX can immediately know they are
sensitive and thus constrains IME app’s behavior (like
blocking networking for the app). For general input,
I-BOX uses a state-machine based policy engine to
predict whether the current input transaction is sensitive.
This is done continuously during the input process,
where I-BOX uses the current partial input stream to
determine if the next string is sensitive or not.
An architectural overview of I-BOX is presented in
Figure 3.
I-BOX consists of an isolated user-level pol-
icy engine that decides whether I-BOX shall commit or
roll back the execution of an IME app’s state. The sand-
box module is implemented as a kernel module, which
saves and restores the states of an IME app as needed.
USENIX Association  
24th USENIX Security Symposium  679
IME App
My mail is
PI:EMAIL
Client App
Sandbox
IME
App
I-BOX
Deamon
I-Box
K-Module
IMMS
Client
App
Network 