the analyzed kits are based on one another. They are able
to produce combinations of both User-Agents and GET
parameters such that an infection is more likely to occur.
Grier et al. [12] have conducted an analysis into the
eﬀects exploit kits have on the malware ecosystem, ﬁnding
that the analyzed kits are used to deliver several diﬀerent
families of malware. They show that exploit kits are an
integral part of that ecosystem, putting additional empha-
sis of eﬀective countermeasures. Allodi et al. conducted
experiments with the server-side code of exploit kits to
determine how resilient kits are to changes of targeted
systems. In doing so, they found that while some exploit
kits aim for a lower, yet steadier infection rate over time,
other kits are designed to deliver a small number of
the latest exploits, achieving a higher infection rate [1].
Eshete et al. conducted an analysis of the ﬂaws contained
in server-side components of exploit kits, showing that
half of the investigated back-ends contained exploitable
vulnerabilities [10]. Our focus is on more readily observable
client-side components of EKs.
Bilge et al. show that exploits, which were later on also
used in exploit kits, could be found in the wild as zero-days
before the disclosure of the targeted vulnerability by the
vendor [3]. They show that even with AV that can react to
known threats, the window of exposure to zero-days is of-
ten longer than expected. Dan Guido presents a case study
highlighting the fact that exploit kits encountered by his
customers typically incorporated exploits from whitehats
or APTs, rather than using a zero-day [14].
Drive-by attacks: Drive-by downloads or drive-by attack
have received much attention [5, 12, 24, 29]. Many stud-
ies [29, 30, 35, 41] rely on a combination of high- and low-
interaction client honeypots to visit a large number of
sites, detecting suspicious behavior in environment state
after being compromised. Below we mention some of the
more closely related projects. Apart from the work that
speciﬁcally investigates issues related to exploit kits, re-
searchers have also focused on drive-by downloads. In Zoz-
zle, Curtsinger et al. develop a solution that can detect
JavaScript malware in the browser using static analysis
techniques [7]. This system uses a na¨ıve Bayes classiﬁer to
ﬁnding instances of known, malicious JavaScript. As we
have shown in this paper, exploit kits are changing rapidly.
Thus, continuously ﬁnding suitable training samples for
Zozzle is a challenge; additionally, Zozzle did not gen-
erate AV signatures. A similar approach was followed by
Rieck et al. for CUJO, in which the detection and preven-
tion components were deployed in a proxy rather than the
browser [33]. Cova et al. describe JSAND [6] for analyzing
and classifying web content based on static and dynamic
features. Their system provides a framework to emulate
JavaScript code and determine characteristics that are
typically found in malicious code. Ratanaworabhan et al.
describe Nozzle, a dynamic system that uses a global
heap health metric to detect heap-spraying, a common
technique used in modern browser exploits [32].
Researchers have also analyzed ways to mitigate the
eﬀects of drive-by download attacks. Egele et al. check
strings that are allocated during runtime for patterns that
resemble shellcode and ensure that this code is never
executed [9]. Lu et al. propose a system called BLADE, to
ensure that all executable ﬁles that are downloaded via the
browser are automatically sandboxed such that they can
only be executed with explicit user consent [22]. Kaprav-
elos et al. present Revolver, a system that leverages the
fact that to avoid detection by emulators or honey clients,
authors of exploits use small syntactic changes to throw of
such detection tools. To ﬁnd such evasive malware, they
compare the structure of two pieces of JavaScript, allowing
them to determine these minor changes [16].
Signature generation: Automated signature generation
has been used to counter both network-based attacks and
generate AV-like signatures for malicious ﬁles. Singh et al.
proposed an automated method to detect previously un-
known worms based on traﬃc characteristics and subse-
quently create content-based signatures [36]. Two other
research groups present similar works, generating signa-
tures from honeypot [20] and DMZ traﬃc [18]. Additional
research has focused on improving false positive rates of
such systems [26], enabling privacy-preserving exchange
of signatures to quickly combat detected attacks [40]
and shifting the detection towards commonalities between
attacks against a single vulnerable service [21, 25].
Work by Brumley et al. proposes a deeper analysis of
the vulnerabilities rather than exploits to detect malicious
packets and subsequently create matching signatures [4].
The concept of clustering HTTP traﬃc was then used
in 2010 by Perdisci et al. to ﬁnd similar patterns in
diﬀerent packets to improve the quality of generated signa-
tures [28]. While much focus has been on the detection of
network-based attacks, research into automatic generation
of virus signatures dates back to 1994, when Kephart and
Arnold propose a system that leverages a large base of
benign software to infer which byte sequences in malicious
binaries are unlikely to cause false positives if used a
signature [17]. In recent years, this idea was picked up
when Griﬃn et al. presented Hancock, which determines
the probability that an arbitrary byte sequence occurs
in a random ﬁle and improves the selection of signature
candidates by automatically identifying library code in
malicious ﬁles. This allows them to achieve a false positive
rate of 0.1% [13]. FIRMA clusters unlabeled malware
based on captured network traﬃc, using them to produce
network signatures with a high precision and recall [31].
In summary, although previous research has been con-
ducted both in EK detection and analysis, as well as the
automated generation of signatures, no work has made
the connection between the two ﬁelds. In contrast, Kizzle
leverages insights gathered by us as well as previous work
to tailor-make a solution which is allows fully automated
detection of Exploit Kits.
VII. Conclusions
This paper proposes Kizzle, a malware signature com-
piler that targets exploit kits. Kizzle automatically identi-
ﬁes malware clusters as they evolve over time and produces
signatures that can be applied to detect malware with a
lower false negative and similar false positive rates, when
compared to hand-written anti-virus signatures.
While we have seen a great deal of consolidation in
the space of Web malware, which leads to sophisticated
attacks being accessible to a broad range of attackers, we
believe that Kizzle can tip the balance in favor of the
defender as it lowers the required eﬀort for the defender,
while simultaneously increasing the work load for the
attacker. Kizzle is designed to run in the cloud and scale
to large volumes of streaming code samples, allowing for
a quick response time to changes in the detected EKs.
Our longitudinal evaluation shows that Kizzle produces
signatures of high accuracy. When evaluated over a four-
week period in August 2014, false positive rates for Kizzle
are under 0.03%, while the false negative rates are un-
der 5%, rivalling manually-crafted AV signatures in both
categories.
Acknowledgements
We greatly appreciate the cooperation and help we
received from Dennis Batchelder, Edgardo Diaz, Jonathon
Green, and Scott Molenkamp in the course of working on
this project. This work was partially supported by the
German Ministry for Education and Research (BMBF)
through funding for the Center for IT-Security, Privacy
and Accountability (CISPA).
References
[1] L. Allodi, V. Kotov, and F. Massacci. Malwarelab: Experimen-
In Workshop on Cyber
tation with cybercrime attack tools.
Security Experimentation and Test, 2013.
[2] D. Angluin. Learning regular sets from queries and counterex-
amples. Information and Computation, 75(2), 1987.
[3] L. Bilge and T. Dumitras. Before we knew it: An empirical study
of zero-day attacks in the real world. In CCS, 2012.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha.
Towards automatic generation of vulnerability-based signatures.
In IEEE S&P, 2006.
[5] J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring
pay-per-install: The commoditization of malware distribution.
In USENIX Security, 2011.
[6] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis of
In
drive-by-download attacks and malicious JavaScript code.
WWW, 2010.
[7] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. Zozzle:
Low-overhead mostly static JavaScript malware detection. In
USENIX Security, 2011.
[8] G. De Maio, A. Kapravelos, Y. Shoshitaishvili, C. Kruegel, and
G. Vigna. Pexy: The other side of exploit kits. In DIMVA, 2014.
[9] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending
browsers against drive-by downloads: Mitigating heap-spraying
code injection attacks. In Detection of Intrusions and Malware,
and Vulnerability Assessment. 2009.
[10] B. Eshete, A. Alhuzali, M. Monshizadeh, P. Porras,
V. Venkatakrishnan, and V. Yegneswaran.
Ekhunter: A
counter-oﬀensive toolkit for exploit kit inﬁltration. In NDSS,
2015.
[11] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu. A density-based
algorithm for discovering clusters in large spatial databases with
noise. In International Conference on Knowledge Discovery and
Data Mining, 1996.
[12] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich,
K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pit-
sillidis, et al. Manufacturing compromise: the emergence of
exploit-as-a-service. In CCS, 2012.
[13] K. Griﬃn, S. Schneider, X. Hu, and T.-C. Chiueh. Automatic
generation of string signatures for malware detection. In RAID,
2009.
[14] D. Guido. A case study of intelligence-driven defense. IEEE
Security and Privacy, 2011.
[15] J. Jones. The state of Web exploit kits. In BlackHat, 2012.
[16] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and
G. Vigna. Revolver: An automated approach to the detection
of evasive web-based malware. In USENIX Security, 2013.
[17] J. O. Kephart and W. C. Arnold. Automatic extraction of
In Virus Bulletin International
computer virus signatures.
Conference, 1994.
[18] H.-A. Kim and B. Karp. Autograph: Toward automated, dis-
tributed worm signature detection. In USENIX Security, 2004.
[19] V. Kotov and F. Massacci. Anatomy of exploit kits: Preliminary
analysis of exploit kits as software artefacts. In International
Conference on Engineering Secure Software and Systems, 2013.
[20] C. Kreibich and J. Crowcroft. Honeycomb: creating intrusion
detection signatures using honeypots. Workshop on Hot Topics
in Networks, 2003.
[21] Z. Li, M. Sanghi, Y. Chen, M.-Y. Kao, and B. Chavez. Hamsa:
Fast signature generation for zero-day polymorphic worms with
provable attack resilience. In IEEE S&P, 2006.
[22] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an attack-
agnostic approach for preventing drive-by malware infections. In
CCS, 2010.
[23] C. Nachenberg. Computer virus-antivirus coevolution. Com-
munications of the ACM, 40(1):46–51, Jan. 1997.
[24] A. Nappa, M. Z. Raﬁque, and J. Caballero. Driving in the Cloud:
An Analysis of Drive-by Download Operations and Abuse Re-
porting. In DIMVA, Berlin, Germany, July 2013.
[25] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically
generating signatures for polymorphic worms. In IEEE S&P,
2005.
[26] J. Newsome and D. Song. Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on
commodity software. In NDSS, 2005.
[27] M. Payer. Embracing the new threat: Towards automatically
In The Symposium on Security for
self-diversifying malware.
Asia Network, 2014.
[28] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of
http-based malware and signature generation using malicious
network traces. In USENIX NSDI, 2010.
[29] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All
your iFRAMEs point to us. In USENIX Security, 2008.
[30] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and
N. Modadugu. The ghost in the browser: Analysis of web-based
malware. In Workshop on Hot Topics in Understanding Botnets,
2007.
[31] M. Z. Raﬁque and J. Caballero. FIRMA: Malware Clustering
and Network Signature Generation with Mixed Network Behav-
iors. In RAID, St. Lucia, October 2013.
[32] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle: A de-
fense against heap-spraying code injection attacks. In USENIX
Security, 2009.
[33] K. Rieck, T. Krueger, and A. Dewald. Cujo: eﬃcient detection
and prevention of drive-by-download attacks. In ACSAC, 2010.
[34] S. Schleimer, D. S. Wilkerson, and A. Aiken. Winnowing:
Local algorithms for document ﬁngerprinting. In International
Conference on Management of Data, 2003.
[35] C. Seifert, V. Delwadia, P. Komisarczuk, D. Stirling, and
I. Welch. Measurement study on malicious web servers in the
.nz domain. In Australasian Conference on Information Security
and Privacy, 2009.
[36] S. Singh, C. Estan, G. Varghese, and S. Savage. Earlybird
system for real-time detection of unknown worms. Technical
report, 2003.
[37] SpiderLabs Blog. Rig exploit kit - diving deeper into the
infrastructure. online, https://goo.gl/Ke8t8K.
[38] B. Stock, B. Livshits, and B. Zorn. Kizzle: A signature compiler
for exploit kits. Technical Report MSR-TR-2015-12, February
2015.
[39] TrendLabs Security Intelligence. Exploit kits in 2015: Scale and
distribution. online, http://goo.gl/SlU5sA.
[40] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based
worm detection and signature generation. In RAID, 2006.
[41] J. Zhuge, T. Holz, C. Song, J. Guo, X. Han, and W. Zou. Study-
ing malicious websites and the underground economy on the
Chinese web. Managing Information Risk and the Economics
of Security, 2008.
[42] ZScaler ThreatLab. Malvertising, exploit kits, clickfraud and
ransomware: A thriving underground economy. http://goo.gl/
ozDmZX, 2015.