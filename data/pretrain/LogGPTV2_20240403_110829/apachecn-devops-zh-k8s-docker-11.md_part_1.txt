# 十一、使用开放策略代理扩展安全性
到目前为止，我们已经介绍了 Kubernetes 内置的认证和授权功能，这有助于保护集群。虽然这将涵盖大多数用例，但并没有涵盖所有用例。Kubernetes 无法处理的几个安全最佳实践是预先授权容器注册中心，并确保资源请求在所有 **Pod** 对象上。
这些任务留给外部系统，称为动态准入控制器。**开放策略代理** ( **OPA** )及其 Kubernetes 本地子项目，gateway，是处理这些用例最流行的方法之一。本章将详细介绍 OPA 和 gateway 的部署、其架构以及策略的制定。
在本章中，我们将涵盖以下主题:
*   验证 webhooks 简介
*   什么是 OPA，它是如何工作的？
*   利用减压阀来制定策略
*   实现内存限制
*   使用 OPA 实现 Pod 安全策略
# 技术要求
要完成本章的实践练习，您将需要一台 Ubuntu 18.04 服务器，运行一个 KinD 集群，其配置来自 [*第 8 章*](08.html#_idTextAnchor228)*RBAC 策略和审核*。
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter 11。](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter11 )
# 动态准入控制器介绍
有两种方法可以扩展 Kubernetes:
*   建立一个自定义的资源定义，这样你就可以定义自己的对象和 API。
*   实现一个网络钩子，监听来自应用编程接口服务器的请求，并用必要的信息进行响应。您可能还记得，在 [*第 7 章*](07.html#_idTextAnchor203)*将认证集成到您的集群*中，我们解释了使用自定义网络钩子来验证令牌。
从 Kubernetes 1.9 开始，一个 webhook 可以定义为动态准入控制器，到了 1.16，动态准入控制器 API 变成了**通用** ( **GA** )。
协议非常简单。一旦为特定的对象类型注册了动态准入控制器，每当创建或编辑该类型的对象时，就会用 HTTP post 调用 webhook。然后，webhook 将返回表示它是否被允许的 JSON。
重要说明
从 1.16 开始，`admission.k8s.io/v1`处于 GA。所有示例都将使用应用编程接口的正式版。
提交给 webhook 的请求由几个部分组成:
*   **对象标识符**:属性`resource`和`subResource`标识对象、应用编程接口和组。如果对象的版本正在升级，则指定`requestKind`、`requestResource`和`requestSubResource`。另外，提供`namespace`和`operation`来知道对象在哪里，以及它是`CREATE`、`UPDATE`、`DELETE`还是`CONNECT`操作。
*   **提交者标识符**:对象`userInfo`标识提交者的用户和组。提交者和创建原始请求的用户并不总是相同的。例如，如果一个用户创建了一个`Deployment`，那么`userInfo`对象将不会是创建原始`Deployment`的用户；这将用于`ReplicaSet`控制器的服务帐户，因为`Deployment`创建一个`ReplicaSet`来创建`Pod`。
*   **对象** : `object`表示正在提交的对象的 JSON，其中`oldObject`表示如果这是更新，正在替换什么。最后，`options`为请求指定了附加选项。
来自网络钩子的响应将简单地有两个属性，来自请求的原始`uid`和`allowed`，它们可以是**真**或**假**。
`userInfo`对象可以快速创建复杂。由于 Kubernetes 经常使用多层控制器来创建对象，因此很难根据与 API 服务器交互的用户来跟踪使用创建情况。基于 Kubernetes 中的对象授权要好得多，例如命名空间标签或其他对象。
一个常见的用例是允许开发人员拥有一个他们是管理员的“沙箱”，但是这个沙箱的容量非常有限。不要试图验证特定用户没有试图请求太多内存的事实，而是用一个限制来注释一个个人名称空间，这样准入控制器就有具体的东西可以参考，而不管用户提交的是`Pod`还是`Deployment`。这样，策略将检查`namespace`上的`annotation`而不是单个用户。为了确保只有拥有命名空间的用户才能在其中创建东西，请使用 RBAC 来限制访问。
关于通用验证 webhooks 的最后一点:没有办法指定密钥或密码。这是匿名请求。虽然理论上，验证性的网络钩子可以用来实现更新，但不建议这样做。
既然我们已经介绍了 Kubernetes 如何实现动态访问控制器，我们将看看 OPA 中最流行的选项之一。
# 什么是 OPA，它是如何工作的？
OPA 是一个轻量级的授权引擎，非常适合 Kubernetes。它不是从 Kubernetes 开始的，但它肯定在那里找到了家。在 OPA 中没有构建动态准入控制器的要求，但是它非常擅长，有大量的资源和现有的策略可以用来启动你的策略库。
本节提供了 OPA 及其组件的高级概述，本章的其余部分将详细介绍在 Kubernetes 中的 OPA 实现。
## OPA 架构
OPA 由三个组件组成 HTTP 侦听器、策略引擎和数据库:
![Figure 11.1 – OPA architecture ](img/Fig_11.1_B15514.jpg)
图 11.1–OPA 架构
OPA 使用的数据库在内存中，而且是短暂的。它不会保存用于决策的信息。一方面，这使得 OPA 非常具有可扩展性，因为它本质上是一个授权微服务。另一方面，这意味着 OPA 的每个实例都必须独立维护，并且必须与权威数据保持同步:
![Figure 11.2 – OPA in Kubernetes ](img/Fig_11.2_B15514.jpg)
图 11.2-祖父在库伯内斯
当在 Kubernetes 中使用时，OPA 使用名为 *kube-mgmt* 的边车填充其数据库，该边车在您想要导入到 OPA 中的对象上设置手表。随着对象的创建、删除或更改， *kube-mgmt* 会更新其 OPA 实例中的数据。这意味着 OPA 与 API 服务器“最终是一致的”，但它不一定是 API 服务器中对象的实时表示。由于整个 etcd 数据库基本上是一次又一次地复制，因此需要非常小心，以避免复制 OPA 数据库中的敏感数据，如`Secrets`。
## 减压阀，OPA 策略语言
我们将在下一节详细介绍减压阀的细节。这里要提到的要点是减压阀是一种策略评估语言，不是通用编程语言。对于习惯于 Golang、Java 或 JavaScript 等语言的开发人员来说，这可能很困难，这些语言支持迭代器和循环等复杂逻辑。减压阀旨在评估策略，因此是精简的。例如，如果您想用 Java 编写代码来检查一个`Pod`中的所有容器映像都是从注册表列表中的一个开始的，那么它看起来如下所示:
```
public boolean validRegistries(List containers,List allowedRegistries) {
  for (Container c : containers) {
      boolean imagesFromApprovedRegistries = false;
	for (String allowedRegistry : allowedRegistries) {
        imagesFromApprovedRegistries =  imagesFromApprovedRegistries  || c.getImage().startsWith(allowedRegistry);		
   	}
      if (! imagesFromApprovedRegistries) {
	  return false;
     }
   }
   return true;
}
```
这段代码遍历每个容器和每个允许的注册表，以确保所有映像符合正确的策略。减压阀的相同代码要小得多:
```
invalidRegistry {
  ok_images = [image | startswith(input_images[j],input.parameters.registries[_]) ; image = input_images[j] ]
  count(ok_images) != count(input_images)
}
```
如果容器上的任何映像来自未经授权的注册中心，上述规则将评估为`true`。我们将在本章的后面部分详细介绍这段代码是如何工作的。理解为什么这段代码如此紧凑的关键在于，循环和测试的样板文件大部分是在减压阀推断出来的。第一行生成符合映像的列表，第二行确保符合映像的数量与总映像的数量相匹配。如果它们不匹配，则一个或多个映像必须来自无效的注册表。能够编写简洁的策略代码是减压阀非常适合准入控制的原因。
## 守门人
到目前为止，讨论的所有内容都是针对 OPA 的。章节开头提到 OPA 在 Kubernetes 没有起步。早期的实现有一个 sidecar，它使 OPA 数据库与 API 服务器保持同步，但是您必须手动创建策略作为`ConfigMap`对象，并手动为 webhooks 生成响应。2018 年，微软推出了网守[https://github.com/open-policy-agent/gatekeeper](https://github.com/open-policy-agent/gatekeeper)，提供 Kubernetes 斯本地体验。
除了从`ConfigMap`对象转移到适当的定制资源之外，GateWay 还增加了一个审计功能，允许您针对现有对象测试策略。如果某个对象违反了策略，则会创建一个违规条目来跟踪它。通过这种方式，您可以获得集群中现有策略违规的快照，或者知道在 GateWay 停机期间是否因为升级而遗漏了什么。
网守和通用 OPA 的一个主要区别是，在网守中，OPA 的功能不是通过任何人都可以调用的 API 公开的。OPA 是嵌入式的，gateway 直接调用 OPA 来执行策略并保持数据库最新。只能根据 Kubernetes 中的数据或通过在评估时提取数据来做出决定。
### 部署网守
将使用的示例将假设使用网守而不是通用 OPA 部署。根据 GateWay 项目的指示，使用以下命令:
```
$ kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml
```
这将启动 GateWay 命名空间`Pods`，并创建验证 webhook。部署完成后，进入下一部分。在本章的剩余部分，我们将讨论使用 GateWay 的细节。
## 自动化测试框架
OPA 为您的策略提供了内置的自动化测试框架。这是 OPA 最有价值的方面之一。能够在部署前一致地测试策略可以为您节省数小时的调试时间。当写入策略时，有一个与您的策略文件同名的文件，但名称中有`_test`。例如，让测试用例与`mypolicies.rego`相关联，让`mypolicies_test.rego`中的测试用例在同一个目录中。运行`opa test`将运行您的测试用例。我们将在下一节展示如何使用它来调试您的代码。
已经介绍了 OPA 的基础知识以及它是如何构建的，下一步是学习如何使用减压阀来编写策略。
# 用减压阀写策略
减压阀是一种专门为策略写作设计的语言。它不同于你可能用其编写代码的大多数语言。典型的授权代码如下所示:
```
//assume failure
boolean allowed = false;
//on certain conditions allow access
if (someCondition) {
  allowed = true;
}
//are we authorized?
if (allowed) {
  doSomething();
}
```
授权代码通常默认为未授权，必须发生特定的情况才能授权最终操作。减压阀采取了不同的方法。减压阀通常被写为授权一切，除非一组特定的条件发生。
减压阀和更通用的编程语言的另一个主要区别是没有显式的“`if` / `then` / `else`”控制语句。当减压阀的一行要做决定时，代码被解释为“如果这一行是假的，就停止执行。”例如，减压阀的以下代码表示“如果映像以`myregistry.lan/`开头，则停止执行策略并通过该检查，否则会生成错误消息”:
```
not startsWith(image,"myregistry.lan/")
msg := sprintf("image '%v' comes from untrusted registry", [image])
```
Java 中的相同代码可能如下所示:
```
if (! image.startsWith("myregistry.lan/")) {
   throw new Exception("image " + image + " comes from untrusted registry");	
}
```
在学习减压阀时，推断控制语句和明确控制语句之间的差异通常是学习曲线中最陡的部分。这可能会产生比其他语言更陡峭的学习曲线，而减压阀通过让测试和构建策略变得更容易以自动化和可管理的方式来弥补这一点。
OPA 可用于自动测试策略。当编写集群安全性所依赖的代码时，这非常重要。自动化您的测试将有助于加快您的开发速度，并通过捕获任何通过新的工作代码引入到先前工作代码中的错误来提高您的安全性。接下来，让我们完成编写 OPA 策略、测试它并将其部署到我们的集群的生命周期。
## 制定 OPA 策略
使用 OPA 的一个常见例子是限制 Pod 可以来自哪些注册中心。这是集群中常见的安全措施，有助于限制哪些 Pods 可以在集群上运行。例如，我们多次提到比特币矿工。如果集群不接受`Pods`除了从你自己的内部注册表，那么这是一个坏演员滥用你的集群需要采取的又一个步骤。首先，让我们写下我们的策略，摘自 OPA 文档网站(https://www . open policy agent . org/docs/latest/kubernetes-introduction/):
```
package k8sallowedregistries
invalidRegistry {