with the packets for shifting the window. For instance, an
attacker can infer if the sequence number is in [0,2G) by
trying 0, WIN-1, 2(WIN-1), . . . up to 2G, which not only
can shift the window from 0 to 2G, but also tested the [0,2G)
range. Since the internal ﬁrewall has a 1G window, only 0
and 1G needs to be sent with a large TTL to go through it.
All other packets can have a small TTL so that they only
pass through the external ﬁrewalle. If either 0 or 1G passes
through the internal ﬁrewall, then the sequence number falls
in [0,2G). Otherwise, it falls in [2G,4G). One additional
challenge is that the legitimate server may retransmit its
“lost” response packet during the inference. As a result,
the attacker has to shift the window back to a “safe” spot
to prevent the retransmitted packets from passing through.
For instance, one simple way is to shift the window to 0
every time after an iteration (which is what we did in our
implementation). Such “position-reset” happens so fast that
it is very unlikely the retransmitted packets can catch the
“shifting” window.
The requirements are (C1,C2,C3,N4,N5) using packet
count feedback, or (C1,C3,N2,N4,N5) using intermediate
hop IPID feedback.
2) Off-site TCP injection/hijacking: Off-site attacks do
not require the unprivileged malware but they are generally
harder to carry out given the challenge to obtain target four-
tuple.
However, URL phishing is a special case where an
attacker can also acquire target four tuples by luring a user
to visit a malicious webpage that subsequently redirects the
user to a legitimate target website. A successful attack can
replace the content of the target website, or if the user
is previously logged in, the attacker can inject malicious
Javascript to steal authentication cookies or perform actions
on behalf of the user.
Here is how it works: assuming the user visited the
malicious webpage, the attacker can obtain the client IP.
It is also easy to obtain the legitimate website’s IP given
the common use of only a few load-balancing IPs. The
remaining missing information is the source port number
used in the next connection to the legitimate website. If
the attacker can predict that, he can hijack the connection
using the preemptive-SYN technique introduced earlier,
i.e.,, start sending preemptive SYN packet right after the
client is about to be redirected to the legitimate website (i.e.,
make a connection to the legitimate server). However, many
browsers seem to always assign a random local port number
for different web pages which makes the port prediction
very difﬁcult. To overcome the challenge, we design a
simple strategy to intentionally occupy as many local ports
as possible so that the next port used is selected from a
much smaller pool.
Speciﬁcally, the malicious website can instruct the client
to open many connections to the malicious site (or any
other server) to consume a large number of local ports. In
addition, the occupied port numbers tend to be contiguous
according to our experiment likely due to the origination
from the same Javascript. One challenge is that the OS
may limit the total number of ports that an application
can occupy, thus preventing the attacker from opening too
many concurrent connections. Nevertheless, we found such
limit can be bypassed if the established connections are
immediately closed (which no longer counts towards the
limit). The local port numbers are still not released since
the closed connections enter the TCP TIME WAIT state
for a duration of 1–2 minutes. If an attacker can manage to
open enough connections, he can easily use brute force the
remaining ports by sending many preemptive SYN packets
simultaneously. The rest of the attack works exactly the
same as in the preemptive-SYN hijacking. Here the on-
device malware is not required since the attacker already
knows the target four-tuple.
Long-lived connection inference. Besides URL phish-
ing, another type of off-site injection is to target long-lived
connections. Instead of guessing the target four tuples, we
discover that it is possible to “query” a network and check
if a particular four-tuple is active through a single ICMP
packet. If the attack targets at popular services, the server
IP and port are typically known, thus the search space is
reduced to only different client IP/port combinations. Since
many popular services using unencrypted long-lived HTTP
connections to implement PUSH services [5], the attack
would basically allow remote scanning and injection of
HTTP-based exploits.
This attack is possible because NAT boxes maintain state
about active or in-session TCP connections, identiﬁed by
four tuples. Out-of-session packets are denied access. Such
behavior can leak information about existing/active sessions
(similar to the reason why sequence number can be leaked).
For instance, one approach is to use the intermediate hop
IPID side-channel again to infer if packets with spoofed
target four-tuple can go through. Note that such spoofed
packets should not reach far enough to the ﬁrewall mid-
dlebox, so it does not matter what sequence number the
spoofed TCP packets have. In total, the attacker has to
send at least three packets (two to get the IPID before and
after the spoofed probing and one is the probing packet) to
query a single four-tuple, and the results may not be always
reliable due to possible IPID noise.
A more efﬁcient and reliable approach we discover is
through sending a single ICMP error message (e.g., network
or port unreachable) to query a four-tuple. Speciﬁcally,
since many NAT boxes check the embedded TCP four
tuples inside ICMP packets and allow them through only
when the four tuples match existing sessions, an attacker
can easily craft ICMP packets embedding target four tuples
and check if they can go through. More importantly, the
source IP address of the ICMP packets themselves do not
354
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
KĨĨͲƉĂƚŚ
ĂƚƚĂĐŬĞƌ
>ĞŐŝƚ
^ĞƌǀĞƌ
&ŝƌĞǁĂůů
ŵŝĚĚůĞďŽǆ
ŚŽƉ
ϭ͘^ƉŽŽĨĞĚ^zE;ƐĞƋсyͿ
Ϯ͘^zEͲ<;ƐĞƋсz͕ĂĐŬсyнϭͿ
ϯ͘^ĞƋƵĞŶĐĞŶƵŵďĞƌ
ŝŶĨĞƌĞŶĐĞͲͲƐƚĂƌƚ
͙
ŝŶĨĞƌĞŶĐĞͲͲĞŶĚ
ϰ͘^ĞƋƵĞŶĐĞŶƵŵďĞƌ
EŽŶͲ
ƌĞƐƉŽŶƐŝǀĞ
/ŶͲŶĞƚǁŽƌŬ
ĂƚƚĂĐŬĞƌ
/ŶƚĞƌŵĞĚŝĂƚĞ
ϱ͘ZĞƉŽƌƚŝŶŐƚŚĞƐĞƋƵĞŶĐĞŶƵŵďĞƌz
ϲ͘^ƉŽŽĨĞĚ<;ƐĞƋсyнϭ͕ĂĐŬсzнϭͿ
Figure 7: Establish TCP connection using spoofed IPs
have to be spoofed. This is because ICMP packets are often
sent by IPs other than the two communicating parties such
as a gateway. This allows the attacker to receive direct
response in the form of a TTL-expired message from the
intermediate hop.
3) Establish spoofed connections: The goal of this attack
is to establish TCP connections to a legitimate server from
an attacker using spoofed IPs. It closely resembles the
traditional TCP sequence number prediction attack where
an attacker can guess the sequence number of the legitimate
server’s SYN-ACK and establish connections using spoofed
IPs. We are essentially launching the same attack, but here
we are “inferring” instead of randomly “guessing” the se-
quence number. As elaborated in §VII-C, this attack can be
a useful building block of DDoS attack or spamming where
each connection has a distinct source IP, thus overcoming
IP-based blocking.
The attack sequence diagram is fairly simple as shown in
Figure 7. At time 1, an in-network attacker sends a spoofed
SYN with an unresponsive source IP (more discussion be-
low). At time 2, the server replies with a SYN-ACK back to
the spoofed IP. However, as the spoofed IP is unresponsive,
the packet does not trigger any response packet. The attack
server then performs the sequence number inference during
time 3 and 4. Upon completion, it reports the inferred
sequence number to the in-network attacker at time 5, which
in turn sends the spoofed ACK packet using the inferred
sequence number to complete the TCP handshake with the
victim server at time 6.
Here unresponsive IPs are either IPs that may not be
currently used by any device, or they drop out-of-state TCP
packets on their own (e.g., by host-based ﬁrewalls). We
found that there are many such unresponsive IPs in the
nation-wide cellular network that we tested. The require-
ments of this attack are (N1,N2,N4).
V. ATTACK IMPLEMENTATION AND EXPERIMENTAL
RESULTS
We have implemented the complete end-to-end attacks
for all three threat models. Below is our experiment setup.
Client platform. We use Android smartphones because
it ﬁts the ﬁrst threat model well and it can easily connect
to the nation-wide cellular network with sequence-number-
checking ﬁrewalls. Other smartphones such as iPhone could
also be used since it also satisﬁes all
the client-side
355
experiments
Network. The
requirements. We implement the malware that spawns a
service to run in the background and monitors new target
connections to attack. To prevent from being scanning
the active target connections too aggressively, the malware
stops running whenever the screen is off. In fact, it can
start the scanning activity only when detecting the target
app is at the foreground. We tested the attacks ourselves on
three different controlled Android phones (no other people
is attacked by the malware) with OS versions of Android
2.2 and 2.3.4 and from three vendors (HTC, Samsung, and
Motorola). The default window scaling option is 2 and 4
for Android 2.2 is 2.3.4 respectively.
are
conducted on an
anonymized nation-wide carrier that widely deploys ﬁrewall
middleboxes at the GGSN-level. The carrier satisﬁed all
the network-side requirements (N1 to N4), which allows
us to realistically test all attacks except for URL phishing.
However, different GGSNs [34] may have slightly different
network policy. For instance, some GGSNs prevent inter-
nal hops from replying with TTL-expired messages, thus
violating requirement N2. IP spooﬁng is however allowed
in every GGSN which enables an attacker to spoof a large
range of IPs (many /16), potentially affecting many users.
Firewall. We found ﬁrewalls are deployed in all of the
carrier’s GGSNs. There are two main types: the ﬁrst has
a ﬁxed window size (i.e., W IN = 1G) with window-
advancing behavior, the second computes the window size
based on the window scaling factor (as mentioned in §III-A)
with window-shifting behavior. The ﬁrst one also has a left-
only window since it buffers out-of-order packets. In certain
GGSNs, only the ﬁrst ﬁrewall is deployed. In others, both
are deployed with the second one external to the ﬁrst one
(which enables the hit-and-run hijacking).
Proxy setting. We found that if the proxy is enabled
through the Access Point Name (APN) conﬁguration [10],
then the ﬁrewall middlebox is no longer visible, which we
suspect is due to the speciﬁc network topology setup and
is a special case. In general, a proxy is similar to NAT
that essentially rewrites the external IP and port. Only the
browsers seem to be affected by the proxy setting and thus
attacks on mobile apps are not affected. We do not have
complete data on how many phones by default have the
proxy enabled, but we do know that the Motorola Android
phone by default does not use the proxy.
In summary, the diversity of the network and ﬁrewall
setup implies that carriers may not be fully aware of
the potential impact of various network conﬁgurations on
security.
A. Side-channel
So far we have introduced the two side-channels —
packet counter and intermediate hop IPID, now we discuss
them in more details. For the packet counter, we found that
Android has all the standard and advanced Linux packet
counters accessible through publicly-readable procfs. The
following is a list of relevant counters identiﬁed.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
/proc/net/snmp: InSegs. This is a basic counter that sim-
ply records the number of incoming TCP packets received
by the OS, regardless if the packet contains error (e.g.,
wrong checksum). It is the most straightforward counter but
may be noisy as there can be background trafﬁc received
by the client during the sequence number inference.
It turns out that it is possible to ﬁnd other much less noisy
counters. The idea is to leverage the mismatch in the logic
of identifying error packets between the ﬁrewall middlebox
and the client. For instance, we can craft packets that look
erroneous to the client but perfectly legitimate to the ﬁre-
wall. The result is that the ﬁrewall still checks the sequence
number, but when the packet reaches the client, it will be
dropped and the corresponding error packet counter will
be incremented. Note that these error packet counters are
much less noisy because they are rarely incremented caused
by naturally occurring packet corruption. Speciﬁcally, we
found the following promising counters on Android.
/proc/net/netstat: InErrs. This counter should be incre-
mented every time when, among other things, a packet with
wrong checksum is received. If the ﬁrewall lets packets with
wrong checksum through, then an attacker can craft such
packets and make use of this counter. However, we veriﬁed
that the ﬁrewall in the nation-wide cellular network already
drops packets with incorrect checksum.
/proc/net/netstat: PAWSEstab. This counter is increment-
ed when a TCP packet with an old timestamp is received.
PAWS, or Protect Against Wrapped Sequences, is a mech-
anism that relies on timestamp to prevent old packets with
wrapped-around sequence numbers from being mistakenly
received, a TCP extension standardized in RFC 1323 [20].
All Android phones that we tested have this counter enabled
and the ﬁrewall does not check the timestamp at all (likely
due to overhead concerns). As a result, our implementation
uses this counter for all on-site attacks.
For the intermediate hop IPID side-channel, we found
that the noise level is quite tolerable. Speciﬁcally, the IPID
of the intermediate hop increments only when the hop
(e.g., router) itself is originating packets (e.g., TTL-expired
messages or packets generated for routing protocols). In
contrast, packets passing through the hop do not affect
its IPID. That means that the IPID should not increment
very often. Moreover, since the probing packets are back-
to-back, the window for observing such noise is very small.
In practice, we found that sending 1–4 packets per window
range is usually enough to overcome the IPID noise.
B. Sequence Number Inference
Theoretically, the time to complete a binary-search-like
probing is 32 × RT T . Assuming a cellular RTT of 200ms,
the total time should be about 6.4 seconds. However, as
observed in our experiments, it also takes time to send a
large number of packets to cover the large sequence number
space. In addition, we also add padding time during the
probing to prevent packets arrive out-of-order. In practice,
the binary-search-like probing can take up to 10 seconds to
356
complete with an RTT of 200ms, which can be too long
since a user may be able to notice the delay. To speed up
the probing, we implement a number of optimizations.
The ﬁrst optimization is that instead of inferring the
exact sequence number, we can stop the inference once we
know the sequence number is within a range (e.g., of 256
possible numbers). Later, it will not be difﬁcult to simply
brute force all 256 sequence numbers simultaneously. In a
binary search, this can reduce log2 256 = 8 RTTs, which is
signiﬁcant.
The second optimization is based on the observation that
the sequence number inference is heavily round-trip-bound
instead of bandwidth-bound. As a result, we devise an
algorithm that reduces the number of network round trips
signiﬁcantly. The idea is that instead of eliminating half of
the sequence number space each iteration, we can eliminate
N−1
N of the search space by simultaneously probing N-
1 of N equally-partitioned bins. We could send different
number of packets in different bins. As an example where
N = 4, we could send 1 packet each window in the ﬁrst
bin, 2 packets each window in the second bin, and 4 packets
each window in the third bin. This way, an attacker could
tell which bin the sequence number falls in by looking at
the increment of the packet counter. We name the probing
technique “N-way search”. It is not hard to see the resulting
number of iterations can be computed as logN 4G. For
instance, if N = 4, logN 4G = 16, which is only half
of that the original binary search needs.
At a glance,
it seems that
the bigger N,
the better.
However, we also note that by increasing N,
the total
number of probing packets also increases (since it requires
more packets for each bin) and so is the inference time.
In practice, we use a small N=2 (i.e., binary search) at the
beginning few iterations, and use larger N (e.g., N = 4)
towards the end, which turns out to work very well. When