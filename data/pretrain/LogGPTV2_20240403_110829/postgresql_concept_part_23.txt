test=> SELECT getstatename(’AL’);
getstatename
--------------------------------
Alabama
(1 row)
Figure18.5: SQLgetstatenamefunction
Ifthetaxrateorshippingchargeschange,youcaneasilymodifythefunctiontoreflectthenew
rates. Simply use DROP FUNCTION to remove the function and then recreate it with new values.
Alluserapplicationswillautomaticallybeginusingthenewversionbecausethecomputationsare
embeddedinthedatabase,notintheuserapplications.
Server-sidefunctionscanalsoaccessdatabasetables. Figure 18.5showsanSQLfunctionthat
internally accesses the statename table. It looks up the proper state name for the state code
suppliedtothefunction.
Figure18.6showstwoquerieswhichyieldidenticalresults,thoughusingdifferentapproaches.
The first query joins the customer and statename tables. The second query does a SELECT on
customer; for eachrow, getstatename() is then calledto find the customer’s statename. The two
queriesyieldthesameresultonlyifeachcustomerrowjoinstoexactlyonestatenamerow. Ifany
customerrowsdidnotjointoastatenameroworjoinedtomanystatenamerows,theresultswould
bedifferent. Also,becausethesecondqueryexecutestheSQLfunctionforeveryrowincustomer,
itworksmoreslowlythanthefirstquery.
18.3 PL/PGSQL Functions
PL/PGSQLisanotherlanguageintendedforserver-sidefunctions.Itisatrueprogramminglanguage.
WhileSQLfunctionsallowonlyargumentsubstitution,PL/PGSQLincludesfeaturessuchasvariables,
conditionalevaluation,andlooping.
PL/PGSQLisnotinstalledineachdatabasebydefault. Touseitindatabasetest,youmustinstall
itbyrunningcreatelang plpgsql testfromtheoperatingsystemprompt.
Figure 18.7 shows a PL/PGSQL version of the SQL function getstatename from Figure 18.5. It
illustratesseveralPL/PGSQLfeatures:
18.3. PL/PGSQLFUNCTIONS 209
test=> SELECT customer.name, statename.name
test-> FROM customer, statename
test-> WHERE customer.state = statename.code
test-> ORDER BY customer.name;
name | name
--------------------------------+--------------------------------
Fleer Gearworks, Inc. | Alabama
Mark Middleton | Indiana
Mike Nichols | Florida
(3 rows)
test=> SELECT customer.name, getstatename(customer.state)
test-> FROM customer
test-> ORDER BY customer.name;
name | getstatename
--------------------------------+--------------------------------
Fleer Gearworks, Inc. | Alabama
Mark Middleton | Indiana
Mike Nichols | Florida
(3 rows)
Figure18.6: Gettingstatenameusingajoinandafunction
test=> CREATE FUNCTION getstatename2(text)
test-> RETURNS text
test-> AS ’DECLARE ret TEXT;
test’> BEGIN
test’> SELECT INTO ret CAST(name AS TEXT)
test’> FROM statename
test’> WHERE code = $1;
test’> RETURN ret;
test’> END;’
test’> LANGUAGE ’plpgsql’;
CREATE
Figure18.7: PL/PGSQLversionofgetstatename
210 CHAPTER18. FUNCTIONSANDTRIGGERS
DECLARE Definesvariablesusedinthefunction.
SELECTINTO A special form of SELECT that allows query results to be placed into variables. It
shouldnotbeconfusedwithSELECT*INTO.
RETURN Exitsandreturnsavaluefromthefunction.
Figure 18.8 showsamorecomplicatedPL/PGSQLfunction. Itacceptsatextargumentandreturns
the argument in uppercase, with a space between each character. The next SELECT uses this
resulttodisplayareportheading. ThisfunctionillustratestheuseofvariablesandWHILEloopsin
PL/PGSQL.
Figure 18.9 shows an even more complicated PL/PGSQL function. It takes a state name as a
parameterandfindstheproperstatecode. Becausestatenamesarelongerthanstatecodes,they
areoftenmisspelled. Thisfunctiondealswithmisspellingsbyperforminglookupsinseveralways.
First,itattemptstofindanexactmatch. Ifthatattemptfails,itsearchesforauniquestatename
thatmatchesthefirst2,4,or6characters,uptothelengthofthesuppliedstring. Ifauniquestate
is notfound, thefunction returnsanempty string(’’). Figure 18.10 showsseveralgetstatecode()
functioncalls. Thegetstatecode()functionillustratesthreenewPL/PGSQLfeatures:
%TYPE Datatypethatmatchesadatabasecolumn.
RECORD DatatypethatstorestheresultofaSELECT.
FOUND ApredefinedBOOLEANvariablethatrepresentsthestatusofthepreviousSELECTINTO.
ManyotherPL/PGSQLfeaturesarecoveredintheUser’sManualmentionedinAppendixA.2.
Figure18.11showsaPL/PGSQLfunctionthatprovidesaserver-sideinterfaceformaintainingthe
statenametable. Thefunctionchange_statenameperformsINSERT,UPDATE,andDELETEoperations
onthestatenametable. Thefunctioniscalledwithastatecodeandstatename. Ifthestatecode
is not in the table, it is inserted. If it already exists, the state name is updated. If the function
iscalledwithanemptystatename(’’),thestateisdeletedfromthetable. Thefunctionreturns
true(’t’)ifstatenamewaschanged,andfalse(’f’)ifstatenamewasunmodified. Figure18.12shows
examplesofitsuse.
18.4 Triggers
RulesallowSQLqueriestobeexecutedwhenatableisaccessed(seeSection13.6). Triggersoffer
analternativewaytoperformactionsonINSERT,UPDATE,orDELETE. Theyareidealforchecking
ormodifyingacolumnvaluebeforeitisaddedtothedatabase.
Triggers and rules are implemented differently, however. Triggers call server-sidefunctions
for each modified row, whereas rules rewrite user queries or add queries. The former are ideal
for checkingormodifyingarow beforeitisaddedtothedatabase. Thelatterareidealwhenthe
actionaffectsothertables.
18.4. TRIGGERS 211
test=> CREATE FUNCTION spread(text)
test-> RETURNS text
test-> AS ’DECLARE
test’> str text;
test’> ret text;
test’> i integer;
test’> len integer;
test’>
test’> BEGIN
test’> str := upper($1);
test’> ret := ’’’’; -- start with zero length
test’> i := 1;
test’> len := length(str);
test’> WHILE i  ret := ret || substr(str, i, 1) || ’’ ’’;
test’> i := i + 1;
test’> END LOOP;
test’> RETURN ret;
test’> END;’
test-> LANGUAGE ’plpgsql’;
CREATE
test=> SELECT spread(’Major Financial Report’);
spread
----------------------------------------------
M A J O R F I N A N C I A L R E P O R T
(1 row)
Figure18.8: PL/PGSQLspreadfunction
212 CHAPTER18. FUNCTIONSANDTRIGGERS
test=> CREATE FUNCTION getstatecode(text)
test-> RETURNS text
test-> AS ’DECLARE
test’> state_str statename.name%TYPE;
test’> statename_rec record;
test’> i integer;
test’> len integer;
test’> matches record;
test’> search_str text;
test’>
test’> BEGIN
test’> state_str := initcap($1); -- capitalization match column
test’> len := length(trim($1));
test’> i := 2;
test’>
test’> SELECT INTO statename_rec * -- first try for an exact match
test’> FROM statename
test’> WHERE name = state_str;
test’> IF FOUND
test’> THEN RETURN statename_rec.code;
test’> END IF;
test’>
test’> WHILE i  search_str = trim(substr(state_str, 1, i)) || ’’%’’;
test’> SELECT INTO matches COUNT(*)
test’> FROM statename
test’> WHERE name LIKE search_str;
test’>
test’> IF matches.count = 0 -- no matches, failure
test’> THEN RETURN NULL;
test’> END IF;
test’> IF matches.count = 1 -- exactly one match, return it
test’> THEN
test’> SELECT INTO statename_rec *
test’> FROM statename
test’> WHERE name LIKE search_str;
test’> IF FOUND
test’> THEN RETURN statename_rec.code;
test’> END IF;
test’> END IF;
test’> i := i + 2; -- >1 match, try 2 more chars
test’> END LOOP;
test’> RETURN ’’’’ ;
test’> END;’
test-> LANGUAGE ’plpgsql’;
Figure18.9: PL/PGSQLgetstatecodefunction
18.4. TRIGGERS 213
test=> SELECT getstatecode(’Alabama’);
getstatecode
--------------
AL
(1 row)
test=> SELECT getstatecode(’ALAB’);
getstatecode
--------------
AL
(1 row)
test=> SELECT getstatecode(’Al’);
getstatecode
--------------
AL
(1 row)
test=> SELECT getstatecode(’Ail’);
getstatecode
--------------
(1 row)
Figure18.10: Callstogetstatecodefunction
214 CHAPTER18. FUNCTIONSANDTRIGGERS
test=> CREATE FUNCTION change_statename(char(2), char(30))
test-> RETURNS boolean
test-> AS ’DECLARE
test’> state_code ALIAS FOR $1;
test’> state_name ALIAS FOR $2;
test’> statename_rec RECORD;
test’>
test’> BEGIN
test’> IF length(state_code) = 0 -- no state code, failure
test’> THEN RETURN ’’f’’;
test’> ELSE
test’> IF length(state_name) != 0 -- is INSERT or UPDATE?
test’> THEN
test’> SELECT INTO statename_rec *
test’> FROM statename
test’> WHERE code = state_code;
test’> IF NOT FOUND -- is state not in table?
test’> THEN INSERT INTO statename
test’> VALUES (state_code, state_name);
test’> ELSE UPDATE statename
test’> SET name = state_name
test’> WHERE code = state_code;
test’> END IF;
test’> RETURN ’’t’’;
test’> ELSE -- is DELETE
test’> SELECT INTO statename_rec *
test’> FROM statename
test’> WHERE code = state_code;
test’> IF FOUND
test’> THEN DELETE FROM statename
test’> WHERE code = state_code;
test’> RETURN ’’t’’;
test’> ELSE RETURN ’’f’’;
test’> END IF;
test’> END IF;
test’> END IF;
test’> END;’
test-> LANGUAGE ’plpgsql’;
Figure18.11: PL/PGSQLchange_statenamefunction
18.4. TRIGGERS 215
test=> DELETE FROM statename;
DELETE 1
test=> SELECT change_statename(’AL’,’Alabama’);
change_statename
------------------
t
(1 row)
test=> SELECT * FROM statename;
code | name
------+--------------------------------
AL | Alabama
(1 row)
test=> SELECT change_statename(’AL’,’Bermuda’);
change_statename
------------------
t
(1 row)
test=> SELECT * FROM statename;
code | name
------+--------------------------------
AL | Bermuda
(1 row)
test=> SELECT change_statename(’AL’,’’);
change_statename
------------------
t
(1 row)
test=> SELECT change_statename(’AL’,’’); -- row was already deleted
change_statename
------------------
f
(1 row)
Figure18.12: Examplesusingchange_statename()
216 CHAPTER18. FUNCTIONSANDTRIGGERS
Withtriggers,specialserver-sidefunctionscanbecalledeverytimearowismodified. These
specialfunctionscanbe writteninanyserver-sidelanguageexceptSQL. Theycontroltheaction
takenbythequery. Forexample,theycanrejectcertainvaluesormodifyvaluesbeforetheyare
addedtothedatabase. TriggersthatreturnNULLcausetheoperationthatcausedthetriggertobe
ignored.
Server-side trigger functions are special because they have predefined variables to access
the row that caused the trigger. For INSERT triggers, the variable new represents the row being
inserted. ForDELETE,thevariableoldrepresentstherowbeingdeleted. ForUPDATE,triggerscan
accessthepre-UPDATErowusingoldandthepost-UPDATErowusingnew. Thesevariablesarethe
sameastheoldandnewvariablesemployedinrules.
Figure18.13showsthecreationofaspecialserver-sidetriggerfunctioncalledtrigger_insert_-
update_statename. ThisfunctionusesthenewRECORDvariabletoperformthefollowingactions:
• Rejectastatecodethatisnotexactlytwoalphabeticcharacters
• Rejectastatenamethatcontainsnonalphabeticcharacters
• Rejectastatenamelessthanthreecharactersinlength
• Uppercasethestatecode
• Capitalizethestatename
Ifauserentersinvaliddata,RAISEEXCEPTIONabortsthecurrentqueryanddisplaysanappropriate
errormessage. ValiditycheckscanalsobeperformedusingCHECKconstraints(seeSection14.5).
Uppercaseandcapitalizationoccurbysimplyassigningvaluestothenewvariable. Thefunction
returntypeisopaquebecausenewisreturnedbythefunction.
CREATE TRIGGER causes trigger_insert_update_statename() to be called every time a row is
inserted or updated in statename. The remaining queries in Figure 18.13 show three rejected
INSERTsaswellasasuccessfulINSERTthatisproperlyuppercasedandcapitalizedbythefunction.
Trigger functions can be quite complicated. They can perform loops, SQL queries, and any
operationsupportedinserver-sidefunctions. SeetheCREATE_TRIGGERandDROP_TRIGGERmanual
pagesforadditionalinformation.
18.5 Summary
Server-sidefunctionsallowprogramstobeembeddedintothedatabase. Theseprogramscanbe
accessedfromclientapplicationsandusedindatabasequeries. Movingcodeintotheserverallows
forincreasedefficiency,maintainability,andconsistency. Triggersarespecialserver-sidefunctions
thatarecalledwhenatableismodified.
18.5. SUMMARY 217
test=> CREATE FUNCTION trigger_insert_update_statename()
test-> RETURNS opaque