   +0x9d0 MitigationFlags  : Uint4B
   +0x9d0 MitigationFlagsValues : 
   +0x9d4 MitigationFlags2 : Uint4B
   +0x9d4 MitigationFlags2Values : 
   +0x9d8 PartitionObject  : Ptr64 Void
   +0x9e0 SecurityDomain   : Uint8B
   +0x9e8 ParentSecurityDomain : Uint8B
   +0x9f0 CoverageSamplerContext : Ptr64 Void
   +0x9f8 MmHotPatchContext : Ptr64 Void
   +0xa00 DynamicEHContinuationTargetsTree : _RTL_AVL_TREE
   +0xa08 DynamicEHContinuationTargetsLock : _EX_PUSH_LOCK
   +0xa10 DynamicEnforcedCetCompatibleRanges : 
_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
   +0xa20 DisabledComponentFlags : Uint4B
lkd> dt nt!_kprocess
   +0x000 Header           : _DISPATCHER_HEADER
   +0x018 ProfileListHead  : _LIST_ENTRY
   +0x028 DirectoryTableBase : Uint8B
   +0x030 ThreadListHead   : _LIST_ENTRY
   +0x040 ProcessLock      : Uint4B
   +0x044 ProcessTimerDelay : Uint4B
   +0x048 DeepFreezeStartTime : Uint8B
   +0x050 Affinity         : _KAFFINITY_EX
   +0x0f8 AffinityPadding  : [12] Uint8B
   +0x158 ReadyListHead    : _LIST_ENTRY
   +0x168 SwapListEntry    : _SINGLE_LIST_ENTRY
   +0x170 ActiveProcessors : _KAFFINITY_EX
   +0x218 ActiveProcessorsPadding : [12] Uint8B
   +0x278 AutoAlignment    : Pos 0, 1 Bit
   +0x278 DisableBoost     : Pos 1, 1 Bit
   +0x278 DisableQuantum   : Pos 2, 1 Bit
   +0x278 DeepFreeze       : Pos 3, 1 Bit
   +0x278 TimerVirtualization : Pos 4, 1 Bit
   +0x278 CheckStackExtents : Pos 5, 1 Bit
   +0x278 CacheIsolationEnabled : Pos 6, 1 Bit
   +0x278 PpmPolicy        : Pos 7, 3 Bits
   +0x278 VaSpaceDeleted   : Pos 10, 1 Bit
   +0x278 ReservedFlags    : Pos 11, 21 Bits
   +0x278 ProcessFlags     : Int4B
   +0x27c ActiveGroupsMask : Uint4B
   +0x280 BasePriority     : Char
   +0x281 QuantumReset     : Char
   +0x282 Visited          : Char
   +0x283 Flags            : _KEXECUTE_OPTIONS
   +0x284 ThreadSeed       : [20] Uint2B
   +0x2ac ThreadSeedPadding : [12] Uint2B
   +0x2c4 IdealProcessor   : [20] Uint2B
   +0x2ec IdealProcessorPadding : [12] Uint2B
   +0x304 IdealNode        : [20] Uint2B
   +0x32c IdealNodePadding : [12] Uint2B
   +0x344 IdealGlobalNode  : Uint2B
   +0x346 Spare1           : Uint2B
   +0x348 StackCount       : _KSTACK_COUNT
   +0x350 ProcessListEntry : _LIST_ENTRY
   +0x360 CycleTime        : Uint8B
   +0x368 ContextSwitches  : Uint8B
   +0x370 SchedulingGroup  : Ptr64 _KSCHEDULING_GROUP
   +0x378 FreezeCount      : Uint4B
   +0x37c KernelTime       : Uint4B
   +0x380 UserTime         : Uint4B
   +0x384 ReadyTime        : Uint4B
   +0x388 UserDirectoryTableBase : Uint8B
   +0x390 AddressPolicy    : UChar
   +0x391 Spare2           : [71] UChar
   +0x3d8 InstrumentationCallback : Ptr64 Void
   +0x3e0 SecureState      : 
   +0x3e8 KernelWaitTime   : Uint8B
   +0x3f0 UserWaitTime     : Uint8B
   +0x3f8 EndPadding       : [8] Uint8B
dt也可查看一个或多个字段的内容，比如：
也支持使用.进程递归：
lkd> dt nt!_eprocess UniqueProcessId
   +0x440 UniqueProcessId : Ptr64 Void
lkd> dt nt!_eprocess Pcb.
   +0x000 Pcb  : 
      +0x000 Header : _DISPATCHER_HEADER
      +0x018 ProfileListHead : _LIST_ENTRY
      +0x028 DirectoryTableBase : Uint8B
      +0x030 ThreadListHead : _LIST_ENTRY
      +0x040 ProcessLock : Uint4B
      +0x044 ProcessTimerDelay : Uint4B
      +0x048 DeepFreezeStartTime : Uint8B
      +0x050 Affinity : _KAFFINITY_EX
      +0x0f8 AffinityPadding : [12] Uint8B
      +0x158 ReadyListHead : _LIST_ENTRY
      +0x168 SwapListEntry : _SINGLE_LIST_ENTRY
      +0x170 ActiveProcessors : _KAFFINITY_EX
      +0x218 ActiveProcessorsPadding : [12] Uint8B
      +0x278 AutoAlignment : Pos 0, 1 Bit
      +0x278 DisableBoost : Pos 1, 1 Bit
      +0x278 DisableQuantum : Pos 2, 1 Bit
      +0x278 DeepFreeze : Pos 3, 1 Bit
      +0x278 TimerVirtualization : Pos 4, 1 Bit
      +0x278 CheckStackExtents : Pos 5, 1 Bit
      +0x278 CacheIsolationEnabled : Pos 6, 1 Bit
      +0x278 PpmPolicy : Pos 7, 3 Bits
      +0x278 VaSpaceDeleted : Pos 10, 1 Bit
      +0x278 ReservedFlags : Pos 11, 21 Bits
      +0x278 ProcessFlags : Int4B
      +0x27c ActiveGroupsMask : Uint4B
      +0x280 BasePriority : Char
      +0x281 QuantumReset : Char
      +0x282 Visited : Char
      +0x283 Flags : _KEXECUTE_OPTIONS
      +0x284 ThreadSeed : [20] Uint2B
      +0x2ac ThreadSeedPadding : [12] Uint2B
      +0x2c4 IdealProcessor : [20] Uint2B
      +0x2ec IdealProcessorPadding : [12] Uint2B
      +0x304 IdealNode : [20] Uint2B
      +0x32c IdealNodePadding : [12] Uint2B
      +0x344 IdealGlobalNode : Uint2B
      +0x346 Spare1 : Uint2B
      +0x348 StackCount : _KSTACK_COUNT
      +0x350 ProcessListEntry : _LIST_ENTRY
      +0x360 CycleTime : Uint8B
      +0x368 ContextSwitches : Uint8B
      +0x370 SchedulingGroup : Ptr64 _KSCHEDULING_GROUP
现在我们可知道在进程的 +0x550处为PEB，那么我们可以将我们的windbg附加到我们想要查看PEB的
进程上，然后查看它的_PEB结构在它内存的+0x550处：
在新版的windbg中，附加之后直接!peb即可查看其详细内容：
      +0x378 FreezeCount : Uint4B
      +0x37c KernelTime : Uint4B
      +0x380 UserTime : Uint4B
      +0x384 ReadyTime : Uint4B
      +0x388 UserDirectoryTableBase : Uint8B
      +0x390 AddressPolicy : UChar
      +0x391 Spare2 : [71] UChar
      +0x3d8 InstrumentationCallback : Ptr64 Void
      +0x3e0 SecureState : 
      +0x3e8 KernelWaitTime : Uint8B
      +0x3f0 UserWaitTime : Uint8B
      +0x3f8 EndPadding : [8] Uint8B
PEB结构
PEB结构是一个十分复杂的结构，且部分结构微软并未公开，我在网上找到了一个相对来说不错的图，
可以参考一下：
下面是一些PEB结构的利用手法，这里都以windbg作为主要的调试工具。
进程操控
我们先来看一下该进程的PEB内容：
在0x00007ff6`5b420000处为我们的ImageBaseAddress，我们查看其内容：
确实为我们的PE内容，我们来更改这个进程的命令行参数，用到的是ProcessParameters ：
其结构为_RTL_USER_PROCESS_PARAMETERS：
其中的Commandline就是我们需要更改的项，其为一个_UNICODE_STRING结构：
可以看到在0x00000209`4b3f2c08 处就是我们需要更改的内容，使用db查看也可以验证我们的说法：
0:006> dt _UNICODE_STRING 0x00000209`4b3f2580+0x070
ntdll!_UNICODE_STRING
 ""C:\WINDOWS\system32\notepad.exe""
   +0x000 Length           : 0x42
   +0x002 MaximumLength    : 0x44
   +0x008 Buffer           : 0x00000209`4b3f2c08  
""C:\WINDOWS\system32\notepad.exe""
编辑它：
此时使用Process Hacker等工具查看，其命令行参数已被修改。
查看调用的dll
这里用到的是我们的LDR结构体，其本质为一个_PEB_LDR_DATA的结构体：
我们用到的是其中的InMemoryOrderModuleList ，由上面的思维导图可知其在LIST_ENTRY 与
LDR_DATA_TABLE_ENTRY 之中：
0:001> dt _PEB_LDR_DATA 0x00007fff`ff43a4c0
ntdll!_PEB_LDR_DATA
   +0x000 Length           : 0x58
   +0x004 Initialized      : 0x1 ''
   +0x008 SsHandle         : (null) 
   +0x010 InLoadOrderModuleList : _LIST_ENTRY [ 0x00000209`4b3f2f50 - 
0x00000209`4b42a3f0 ]
   +0x020 InMemoryOrderModuleList : _LIST_ENTRY [ 0x00000209`4b3f2f60 - 
0x00000209`4b42a400 ]
   +0x030 InInitializationOrderModuleList : _LIST_ENTRY [ 0x00000209`4b3f2de0 - 
0x00000209`4b42aec0 ]
   +0x040 EntryInProgress  : (null) 
   +0x048 ShutdownInProgress : 0 ''
   +0x050 ShutdownThreadId : (null) 
因为其是一个内存区域我们可以用循环的方式来遍历它,输出类似如下：
0:001> !list -x "dt _LDR_DATA_TABLE_ENTRY" 0x00000209`4b3f2f60
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000209`4b3f2dd0 - 
0x00007fff`ff43a4e0 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000000`00000000 - 
0x00000000`00000000 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00007ff6`5b420000 - 
0x00007ff6`5b445a30 ]
   +0x030 DllBase          : 0x00000000`0003a000 Void
   +0x038 EntryPoint       : 0x00000000`0040003e Void
   +0x040 SizeOfImage      : 0x4b3f2bc8
   +0x048 FullDllName      : _UNICODE_STRING "notepad.exe"
   +0x058 BaseDllName      : _UNICODE_STRING "檰𩠇ȉ"
   +0x068 FlagGroup        : [4]  "???"
   +0x068 Flags            : 0xff43a190
   +0x068 PackagedBinary   : 0y0
   +0x068 MarkedForRemoval : 0y0
   +0x068 ImageDll         : 0y0
   +0x068 LoadNotificationsSent : 0y0
   +0x068 TelemetryEntryProcessed : 0y1
   +0x068 ProcessStaticImport : 0y0
   +0x068 InLegacyLists    : 0y0
   +0x068 InIndexes        : 0y1
   +0x068 ShimDll          : 0y1
   +0x068 InExceptionTable : 0y0
   +0x068 ReservedFlags1   : 0y00
   +0x068 LoadInProgress   : 0y0
   +0x068 LoadConfigProcessed : 0y1
   +0x068 EntryProcessed   : 0y0
   +0x068 ProtectDelayLoad : 0y1
   +0x068 ReservedFlags3   : 0y11
   +0x068 DontCallForThreads : 0y0
   +0x068 ProcessAttachCalled : 0y0
   +0x068 ProcessAttachFailed : 0y0
   +0x068 CorDeferredValidate : 0y0
   +0x068 CorImage         : 0y1
   +0x068 DontRelocate     : 0y0
   +0x068 CorILOnly        : 0y1
   +0x068 ChpeImage        : 0y1
   +0x068 ReservedFlags5   : 0y11
   +0x068 Redirected       : 0y1
   +0x068 ReservedFlags6   : 0y11
   +0x068 CompatDatabaseProcessed : 0y1
   +0x06c ObsoleteLoadCount : 0x7fff
   +0x06e TlsIndex         : 0
   +0x070 HashLinks        : _LIST_ENTRY [ 0x00000000`f57e80d4 - 
0x00000000`00000000 ]
   +0x080 TimeDateStamp    : 0
   +0x088 EntryPointActivationContext : 0x00000209`4b3f3080 _ACTIVATION_CONTEXT
   +0x090 Lock             : 0x00000209`4b3f3080 Void
   +0x098 DdagNode         : 0x00000209`4b3f3080 _LDR_DDAG_NODE
   +0x0a0 NodeModuleLink   : _LIST_ENTRY [ 0x00000000`00000000 - 
0x00000000`00000000 ]
   +0x0b0 LoadContext      : 0x00007fff`ff3ec3a4 _LDRP_LOAD_CONTEXT
   +0x0b8 ParentDllBase    : (null) 
   +0x0c0 SwitchBackContext : (null) 
   +0x0c8 BaseAddressIndexNode : _RTL_BALANCED_NODE
   +0x0e0 MappingInfoIndexNode : _RTL_BALANCED_NODE
   +0x0f8 OriginalBase     : 0x00000004`4c900b25
   +0x100 LoadTime         : _LARGE_INTEGER 0x00000002`00000000
   +0x108 BaseNameHashValue : 0
   +0x10c LoadReason       : 0 ( LoadReasonStaticDependency )
   +0x110 ImplicitPathOptions : 0
   +0x114 ReferenceCount   : 0
   +0x118 DependentLoadFlags : 0xfdf023f0
   +0x11c SigningLevel     : 0x66 'f'
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000209`4b3f34f0 - 