As we pointed out, current decentralized payment systems
achieve consistent replication by executing a consensus pro-
tocol [8], [48], [62], while also tackling broader problems
(e.g., implementing smart contracts). In many cases, consen-
sus poses a performance bottleneck and is the usual suspect in
problems regarding correctness or complexity [1], [21], [26],
a
b
r2
a
b
r3
t
s
a
c
d
a
o
r
b
xlogs
Alice Bob
0
1
2
0
1
b
a
a
submit
r1
a
b
Alice
sk
Fig. 2: Payment protocol overview in Astro. When Alice wants
to make a payment a, she simply submits a to her representative
replica r1. This replica handles the broadcasting of Alice’s payment.
Eventually, all correct replicas deliver a, append this payment to
Alice’s xlog (on position 2), and update client balances accordingly
to reﬂect this payment.
given its numerous impossibilities and inherent tradeoffs [9],
[34], [60], [75].
In Astro, we replace the consensus building block with a
broadcast layer. Formally, Astro builds on Byzantine reliable
broadcast (BRB). This should not be confused with classic
Byzantine Agreement (BA), which is unsolvable in the asyn-
chronous model we assume [34]. The BRB primitive is not
novel, appearing in the literature for over 30 years, starting
with Bracha & Toueg [15], [16]. The crucial difference
to BA that allows asynchronous implementations of BRB
is termination: BA always guarantees termination, whereas
BRB does not guarantee this property if the spender is
faulty [42]. Stated differently, if the spender client proposes
two conﬂicting payments (double-spending) under BRB, it is
possible that no payment will ever execute.
III. PAYMENTS IN ASTRO
Astro is a replicated system running on N replicas of an
asynchronous network. The replicas implement a broadcast-
based replication layer and maintain the full system state,
which they update consistently to reﬂect client payments.
Both clients and replicas hold an identifying public/secret
key-pair. We assume that (1) replica key-pairs are distributed
in advance among all replicas, which makes Astro a permis-
sioned payment system, and (2) the mapping of clients to
their representative replicas is publicly known. We assume
less than N/3 of replicas to be Byzantine. This is a standard
assumption, but we revisit this aspect later, when we intro-
duce partial replication via sharding (§V). We now describe
the basic payment protocol.
At a high level, payment execution comprises three steps:
1) The client submits a payment a to her representative.
2) The representative broadcasts a to all replicas.
3) Replicas locally approve payment a and append it to
their local copy of the corresponding client’s xlog.
If the client and representative replica are both correct, each
of these three steps is guaranteed to terminate. A correct
client, however, is unaffected by other Byzantine clients.
Speciﬁcally, no client will ever be able to double-spend or
prevent any other client from performing payments, as long
as less than 1/3 of replicas are malicious.
We now describe the three aforementioned steps in detail.
For presentation simplicity, we use pseudocode inspired by
Golang which we assume to execute atomically.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:09 UTC from IEEE Xplore.  Restrictions apply. 
28
Submitting a Payment. In Listing 1 we describe the algo-
rithm a client Alice implements to submit a payment. First,
she creates a payment message comprising the identity of
the spender (herself), the sequence number she assigns to
this payment, as well as the identity of the beneﬁciary, and
the amount. Alice then increments her sequence number,
and ﬁnally sends the payment to her representative replica
through an authenticated channel (line 7).
1 @executes at spender Alice
2 @local state: Client Alice;
3
4 func Pay(Client b, Amount x):
5
6
7
a :=(cid:2)Alice,
mySN += 1 // Increment our sequence number.
Send(a) // Submit the payment to her representative.
mySN, b, x(cid:3)
Sequence number mySN;
Listing 1: Client Alice submits a new payment.
Broadcasting a Payment. When the representative receives
Alice’s payment, it broadcasts this payment among the repli-
cas using the underlying Byzantine reliable broadcast (BRB)
layer. BRB ensures that all correct replicas will eventually
deliver Alice’s message if her representative replica is correct.
This layer implements a consistency check ensuring that no
two correct replicas deliver a different message for the same
sequence number of a certain client. We discuss the broadcast
layer in more detail later (§IV).
Approving a Payment. Upon delivery of a payment mes-
sage from the broadcast layer, each replica locally approves
Alice’s payment, and then settles it (see lines 13, 14 in List-
ing 2).
sn[..] // last SN per client
BalancesMap bal[..] // balances per client
xlogs[..] // xlogs of clients
XLogMap
8 @executes at all system replicas
9 @local state: SeqNrMap
10
11
12 callback Deliver(a)
13
14
Listing 2: A payment a is ready. Each correct replica runs this
callback upon delivering a from the underlying broadcast layer.
approve(a) // Blocks waiting for approval of this payment
settle(a) // Apply the payment locally
Approval. The approval procedure is described in Listing 3.
Each replica in Astro executes this procedure with the goal
of ensuring two important properties:
1) All Alice’s preceding payments are approved (line 17).
2) Alice has sufﬁcient funds for her payment, as reﬂected
by her balance (line 18).
If both Alice and her representative are correct,
these
conditions may be unfulﬁlled at replica q only if q has not
yet approved either:
1) Alice’s preceding payment, or
2) Some other payment crediting Alice.
In such a case, q simply waits until both conditions are satis-
ﬁed. Under normal conditions, correct clients would initiate
payments which they can fulﬁll straight away. Nevertheless,
it can be useful to allow Alice to initiate payments despite
not having enough funds to settle them right away. Such
payments (and all subsequent ones) will not be approved until
Alice has sufﬁcient balance.
let a be(cid:2)Alice, n, _, x(cid:3)
wait until sn[Alice] = n - 1 // Approval criterion (1)
wait until bal[Alice] ≥ x // Approval criterion (2)
15 func approve(a)
16
17
18
Listing 3: Payment approval. Every replica executes this to
approve a payment a, assuming spender Alice.
Settling. As the ﬁnal step in payment execution, each replica
settles this payment (Listing 4), i.e., updates the balances of
the spender and beneﬁciary, updates the sequence number of
the spender client, and records the payment in the spender’s
xlog. Note that maintaining the whole history of payments in
the xlog is not strictly necessary for the safety of the basic
payment protocol. In a static system, storing the balances
and sequence numbers for each client sufﬁces. Yet, having
this log enables auditability and supports a system where the
set of replicas may change for growth, repair or reconﬁgura-
tion [27, Appendix A].
let a be(cid:2)Alice, n, b, x(cid:3)
bal[Alice] -= x // Withdraw from Alice’s balance
bal[b] += x // Deposit to beneﬁciary
sn[Alice] += 1
xlogs[Alice].append(a)
19 func settle(a)
20
21
22
23
24
Listing 4: Payment settling procedure. Each replica executes this
protocol to transition a payment a to the ﬁnal, settled state.
Client notiﬁcation. By default, we assume clients to be
lightweight and intermittently connected, so we omit a spe-
ciﬁc step of notifying clients that their transaction settled
(or is cleared in the system). It
to
achieve end-to-end notiﬁcation, by having the client query
her representative for the status of the payment. The latter
can reply after it has ﬁnished with the settle step.
Checking the Balance. A client can check her balance by
querying her representative r. To obtain the balance, replica
r simply returns the value from the bal state (deﬁned on
line 10, Listing 2).
is simple, however,
IV. A TALE OF TWO VERSIONS
We now turn our attention to the broadcast
layer in
Astro. Replicas use this layer to replicate client payments
consistently, and it is implemented using a BRB protocol.
The BRB interface has two methods. First, a replica r can
use Broadcast(a) to reliably send payment a to all replicas
in the system. Second, the Deliver(a) callback triggers at any
correct replica to notify about the delivery of payment a. The
broadcast layer is aware of the payload a, which speciﬁes:
the spender s; sequence number n; beneﬁciary b; and amount
x. We denote the pair (s,n) to be the identiﬁer of payment a.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:09 UTC from IEEE Xplore.  Restrictions apply. 
29
We now deﬁne the properties of the broadcast layer, inspired
by [55], where payment identiﬁers are particularly important:
• Agreement. If a correct replica delivers a payment a
with identiﬁer (s, n), then no correct replica delivers
a payment a’ (cid:2)= a with the same identiﬁer.
• Integrity. A correct replica delivers a payment a at most
once, and under the condition that a is broadcast by a
replica r.
• Reliability. If the broadcaster replica of payment a is
correct, then all correct replicas eventually deliver a.
• Totality (optional). If a correct replica delivers payment
a, then every correct replica eventually delivers a.
There is a rich history of protocols implementing BRB [15],
[18], [19], [57]. We mark totality property as optional because
there exist BRB protocols which in fact do not offer this
property by default. Such protocols are appealing because
they are more efﬁcient. If totality is missing, however, an
adversary can mount a partial payments attack against our
payment protocol, as follows. Suppose Alice issues a pay-
ment to Bob, who initially has $0. Let Alice’s representative
rA be malicious, whereas the representative rB of Bob is
correct. In the absence of totality, since rA is malicious,
only rB would deliver and settle Alice’s payment, while
Bob’s xlog in any other replica still has a balance of $0.
Bob cannot spend the $10 he received, because there are no
2f + 1 replicas with the updated version of Bob’s xlog.
We implement and evaluate two versions of BRB, and
thus obtain two versions of our system: Astro I and Astro II.
Astro I uses a BRB protocol [15] that has a similar communi-
cation pattern to our consensus-based baseline and allows for
a fair performance robustness comparison (§VI-D). Astro II,
on the other hand, uses stronger cryptographic primitives
to reduce communication complexity, achieve higher perfor-
mance, and enable sharding. Additionally, Astro II lacks the
totality property, so we compensate for that with an additional
mechanism to prevent the attack we mentioned above.
Both BRB protocols underlying Astro I and Astro II as-
sume less than a third of replicas to be Byzantine and offer
the API we speciﬁed earlier. We now describe the broadcast
protocols in our systems; to respect space limits, we provide
the full pseudocode in [27, Appendix B].
A. Broadcast Protocols & Astro Versions
Astro I implements BRB based on Bracha’s algorithm [16].
Let a be a payment with identiﬁer (s, n) that the representative
replica r is broadcasting on behalf of spender client s.
This protocol relies on authenticated links, e.g., via message
authentication codes (MACs), and comprises three phases.
(1) PREPARE. To broadcast payment a, correct replica r
simply sends a to all replicas in the system.
(2) ECHO. The ﬁrst time a replica q receives a payment with
identiﬁer (s, n), it sends an ECHO message for this payment
to all replicas in the system.
(3) READY. In this last phase of the protocol, every replica q
waits to collect a Byzantine quorum [56] of ECHO messages
for tuple (s,n) and then q sends a READY message. Alterna-
tively, replica q may send a READY after observing f + 1
READY messages. A correct replica delivers payment a after
gathering 2f + 1 matching READY messages for a and after
having delivered the previous payment of client s, i.e., the
payment with identiﬁer (s, n-1).
Observe that Bracha’s protocol entails two phases (ECHO
and READY) of all-to-all communication, i.e., has message
complexity of O(N 2). On the plus side, this protocol uses
MACs, thus it is not computationally intensive.
Astro II implements the broadcast layer using a BRB proto-
col with linear (O(N )) message complexity. At a high-level,
this protocol employs digital signatures, and also comprises
three phases. The ﬁrst phase, called PREPARE, is identical to
the ﬁrst phase of the broadcast protocol of Astro I. The other
two phases of this protocol are as follows:
(2) ACK. Upon receiving payment a from replica r, every
replica q veriﬁes whether there exists a’ (cid:2)= a previously
received for identiﬁer (s, n). If this is not the case, then q
sends a signed ACK message (i.e., a signed hash) of a directly
to replica r. Otherwise, replica q does nothing.
(3) COMMIT. Upon gathering a Byzantine quorum [56] of
matching acknowledgments for payment a, replica r sends
to all other replicas a COMMIT message, comprising the
gathered acknowledgments. Each correct replica delivers a
after receiving a correct commit message for a.
To prevent
the partial payments attack, we introduce
dependencies in Astro II. A correct replica that approved
Alice’s payment, unicasts the signed approval called CREDIT
message to Bob’s representative, and allows Bob to prove
the existence of a payment crediting his account unequiv-
ocably with f + 1 such CREDIT messages. To this end,