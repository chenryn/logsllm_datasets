and the library as stated earlier in this section. Hence, even if you never intend to run
OpenSCAP using the oscap CLI tool, the libraries that these packages contain could still be
required for your given use case (for example, performing remote scans using SCAP
Workbench).
[ 401 ]
Auditing Security Policy with OpenSCAP Chapter 15
As a result, it is important to consider deploying these packages using Ansible, and it may
even be desirable to include them in your standard build image so that you know that you
can remotely scan any given Linux server for compliance without needing to perform any
prerequisite steps. We will look at how to run scans with the oscap tool in a subsequent
section, entitled Scanning the enterprise with OpenSCAP—however, for now, it is sufficient to
understand what this package is and why it might be required.
In the next section, we will look at installing the OpenSCAP Daemon, another part of the
OpenSCAP toolset.
Installing the OpenSCAP Daemon
Security auditing is not a one-time task—given administrator-level (that is, root) access in a
Linux environment, someone could make a Linux server non-compliant at any given time,
either deliberately or through a well-meaning change. Hence, the results of a security scan
really only guarantee that the server being scanned was compliant (or not) at the time of the
scan itself.
Hence, regular scanning of the environment is extremely important. There is a myriad of
ways to achieve this, and you could even run the oscap command-line tool using a
scheduler such as cron or via a scheduled Ansible playbook in AWX or Ansible Tower.
However, the OpenSCAP Daemon is a native tool provided as part of the suite of
OpenSCAP tools. Its purpose is to run in the background and perform scheduled scans
against a given target or set of targets. This might be the local machine running the
daemon, or it might be a set of remote machines, all accessed over SSH.
The process of installation is again extremely simple—if you were to do this manually, you
would, on an EL7 system (for example, RHEL7 or CentOS 7), run the following:
$ sudo yum -y install openscap-daemon
On Ubuntu systems, the package name is identical, so you would run the following to
install it:
$ sudo apt -y install openscap-daemon
Although you could set up every machine in your Linux environment with this daemon
and configure a job for each to scan itself regularly, this is prone to abuse as it would be
easy for someone with root access to disable or otherwise tamper with the scan. As a result,
we recommend that you consider setting up a centralized scanning architecture, with one
central secure server performing remote scans across your network.
[ 402 ]
Auditing Security Policy with OpenSCAP Chapter 15
It is upon such a server that you would install the OpenSCAP Daemon and, once
completed, you can use the oscapd-cli utility to configure your regular scans. We will
take a more detailed look at this later in this chapter, in the section entitled Scanning the
enterprise with OpenSCAP.
Although both of the tools we have considered so far are extremely powerful and can
perform all of your auditing needs, they are entirely command-line-based and so might not
be suited to users who are not comfortable in a shell environment or who are responsible
for auditing scan results but not necessarily running them. This requirement is fulfilled by
another tool in the OpenSCAP armory—SCAP Workbench. We shall look at installing this
in the next section.
Running SCAP Workbench
SCAP Workbench is a graphical user interface to the SCAP toolset that is designed to
provide users with an easy, intuitive way of performing common scanning tasks. Hence, it
is well suited to less technical users or those who are more comfortable in a graphical
environment.
One thing of consideration is that SCAP Workbench is a graphical tool, and in many
environments, Linux servers are run headless and without the graphical X environment
installed. Hence, if you install it on an ordinary Linux server without a graphical
environment, you will see an error such as the one shown in the following screenshot:
Thankfully there are several ways to run SCAP Workbench. First of all, it is worth noting
that it is a true cross-platform application, with downloads available for Windows, macOS,
and most common Linux platforms, and as a result, the easiest path for most users will be
to run it in their native operating system.
If, for consistency, you wish to run SCAP Workbench on Linux, you would either need to
set up a remote X11 session or set up a dedicated scanning host that includes the graphical
desktop environment. There is no right or wrong approach here—it really is up to you to
decide which path suits your environment and working patterns best.
[ 403 ]
Auditing Security Policy with OpenSCAP Chapter 15
If you choose to run from Linux, the installation of SCAP Workbench is no more difficult
than for any of the other OpenSCAP tools we have considered:
1. To install it on RHEL7/CentOS 7, you would run the following:
$ sudo yum -y install scap-workbench
On Ubuntu Server, you would run this:
$ sudo apt -y install scap-workbench
2. Once this is complete, you can then open SCAP Workbench using the
appropriate method for your chosen operating system. If you are running it on a
Linux server using a remote X session, it is as simple as running this command:
$ scap-workbench &
We will explore how to set up and run a scan from this graphical environment later in this
chapter, in the section entitled Scanning the enterprise with OpenSCAP. Before we complete
this part of this chapter, though, we will discuss two of the other tools on offer from the
OpenSCAP project—SCAPTimony and the Anaconda Addon.
Considering other OpenSCAP tools
So far in this chapter, we have considered a variety of OpenSCAP tools for scanning and
auditing your infrastructure. There are, however, two further tools available to you that we
have not yet considered, though neither are truly interactive tools in the way that the ones
we have considered so far are, and so they are not within the scope of this book.
Nonetheless, they deserve a mention as you may choose to integrate them into your
environment in the future.
One of these tools is called SCAPTimony. Rather than being an end user application such
as SCAP Workbench or oscap, this is a middleware, Ruby-on-Rails engine that is designed
for you to integrate into your own Rails-based application. The benefit that SCAPTimony
brings is that it provides both a database and storage platform for your SCAP scan results.
Hence, if you do decide to write your own Rails application to handle your OpenSCAP
scanning, this can be written to provide centralized reporting on OpenSCAP scans. It also
enables your Rails application to manipulate and aggregate the data gathered and so is an
incredibly powerful tool in managing your scan data.
[ 404 ]
Auditing Security Policy with OpenSCAP Chapter 15
Although developing a Rails application to make use of SCAPTimony is beyond the scope
of this book, it is worth considering that the Katello project (and hence Red Hat Satellite 6)
already makes use of SCAPTimony and so would form a good basis for you to make use of
this tool without the need to create your own application.
The final tool available at the time of writing is the OSCAP Anaconda Addon. For those
who are not familiar, Anaconda is the installation environment used by Linux distributions
such as CentOS and Red Hat Enterprise Linux. Although this add-on cannot help us with
our Ubuntu-based servers, it does provide a way to build Red Hat-based servers that are
compliant from the point of installation.
As we have already considered ways to apply security policy using Ansible (see Chapter
14, CIS Hardening with Ansible) and have heavily advocated the use of standard images for
your Linux environment, which we created in Chapter 5, Using Ansible to Build Virtual
Machine Templates for Deployment, and Chapter 6, Custom Builds with PXE Booting, we will
not be exploring this add-on as it duplicates functionality we have already provided cross-
platform solutions for elsewhere.
By now, you should hopefully have a good feel for the OpenSCAP tools, and which might
be the best fit for your environment. Before we can proceed with our first scan, however,
we need an OpenSCAP security policy to utilize. In the next section, we will look at where
to download these policies and how to select the right one for your environment.
Evaluating and selecting policies
OpenSCAP and its related tools are by themselves engines—they cannot actually help you
to audit your environment without a security policy against which to scan. As we explored
in Chapter 13, Using CIS Benchmarks, there are numerous security standards for Linux, and
in this book, we have considered in depth the CIS Benchmarks. Sadly, this standard is not
currently available for audit through OpenSCAP, though many other security policies are
that would be well suited to securing your infrastructure. Also, as OpenSCAP and its
policies are entirely open source, there is nothing to stop you from creating your own
policy for whatever requirements you have.
There are plenty of security standards available for you to freely download and audit your
infrastructure against, and in the next section, we will look at the primary one that you will
most likely wish to consider—SCAP Security Guide.
[ 405 ]
Auditing Security Policy with OpenSCAP Chapter 15
Installing SCAP Security Guide
Some of the most comprehensive, ready-made security policies can be found as part of the
SCAP Security Guide (SSG) project, and you will often find reference to the
ssg acronym in the directory and sometimes even package names. These policies, just like
the CIS Benchmark we explored previously, cover many facets of Linux security and offer
remediation steps. Hence, OpenSCAP can be used not just for auditing, but also for
enforcing a security policy. However, it must be stated that given its nature, it is my
opinion that Ansible is best suited for this task, and it is notable that, in recent upstream
releases of SCAP Security Guide, Ansible playbooks are now being provided alongside the
XML formatted SCAP policies themselves.
OpenSCAP policies, like any security definition, will evolve and change over time as new
vulnerabilities and attacks are discovered. Hence, when considering which version of SSG
you wish to work with, you will need to take into account how up to date the copy you are
using is and whether this meets your needs. It might seem obvious to state that you should
always use the latest version, but there are exceptions as we shall see shortly.
This decision requires careful consideration, and it is not as obvious as it might at first seem
to state, just go and download the latest copy. Although the versions that are included with
most major Linux distributions tend to lag behind the versions available from the SSG
project's GitHub page (see https:/​/​github.​com/​ComplianceAsCode/​content/​releases), in
some cases (especially on Red Hat Enterprise Linux), they have been tested and are known
to work on the Linux distribution they are provided with.
On other distributions, however, your mileage may vary. For example, at the time of
writing, the latest publicly available version of the SSG policies is 0.1.47, while the version
included with Ubuntu Server 18.04.3 is 0.1.31. This version of SSG does not even support
Ubuntu 18.04, and if you attempt to run a scan against Ubuntu Server 18.04 using the
Ubuntu 16.04 policy, all of the scan results will be notapplicable. All scans validate the
host on which they are run and ensure it matches the one they were intended to be run
against, and so if they detect a mismatch, they will report notapplicable rather than
applying the tests.
There is also a bug in the libopenscap8 package on Ubuntu 18.04, which
results in errors regarding the /usr/share/openscap/cpe/openscap-
cpe-dict.xml file as missing. It is hoped that, in due course, the Ubuntu
OpenSCAP packages are updated and fixed so that they can be used
reliably.
[ 406 ]
Auditing Security Policy with OpenSCAP Chapter 15
Users of Red Hat Enterprise Linux will need to find that Red Hat will only support users
with their OpenSCAP scanning if they are using the SSG policies that ship with RHEL, and
so in this scenario, it is even more important to make use of the vendor-provided policy
files.
As with any open source environment, the beauty is that the choice is up to you—if you
wish to evaluate the newer policies available, then you are free to do so, and for Ubuntu
18.04, you must do this or the scans will not work! However, if you wish to take advantage
of a commercially-supported environment, then that is available too, especially if you use
RHEL.
To install the vendor-provided SSG packages on CentOS 7 or RHEL 7, you would run this
command:
$ sudo yum -y install scap-security-guide
This package contains the SSG policies for all operating systems and applications that Red
Hat directly supports (bearing in mind that CentOS is based on RHEL). Hence, you will
only find policies for RHEL 6 and 7, CentOS 6 and 7, the Java Runtime Environment (JRE),
and Firefox when you install this package. At the time of writing, this installs version 0.1.43
of the SSG.
On Ubuntu Server, SSG is split across multiple packages but offers cross-platform support.
To install the complete set of SSG packages on Ubuntu Server 18.04, you would run the
following:
$ sudo apt -y install ssg-base ssg-debderived ssg-debian ssg-nondebian ssg-
applications
These packages provide policies for the following systems:
ssg-base SSG Base content and documentation files
SSG policies for Debian-derived operating systems such as Ubuntu
ssg-debderived
Server
ssg-debian SSG policies for Debian operating systems
SSG policies for other Linux operating systems such as RHEL and
ssg-nondebian
SuSE Enterprise Linux
SSG policies for securing applications such as the Java Runtime
ssg-applications
Environment (JRE), Firefox, and Webmin
Hence, it is fair to say that, at the time of writing, although Ubuntu Server ships a much
older package version (0.1.13), it offers support for a wider range of platforms.
[ 407 ]
Auditing Security Policy with OpenSCAP Chapter 15
The choice of which SSG you wish to install is up to you, or if you are feeling bold, you may
even choose to write your own! The most important thing is that you make an informed
choice and retain support from your operating system vendor if that is a requirement for
you. Before we proceed to explore other policies you might also download, it is worth
looking in greater detail at two of the security policy file formats you may come across
when you are searching for and implementing your OpenSCAP auditing architecture. We
shall proceed with this in the next section.
Understanding the purpose of XCCDF and OVAL
policies
When you download policies, you will often find that you see the terms Open
Vulnerability and Assessment Language (OVAL) and eXtensible Configuration
Checklist Description Format (XCCDF). Some security policies you will come across are
only available in OVAL format. Hence, we must take a moment to consider these different
file types.
First of all, it is important to state that they are not interchangeable—instead, they should
be thought of as hierarchical in nature. At the lower level in the hierarchy is the OVAL file,
which in essence describes all of the system-level checks that the OpenSCAP scanning
engine should perform. This might, for example, consist of checking whether a given
package is newer than a given version as a known vulnerability might exist in the older
one. Or it might be a check to ensure that an important system file such as /etc/passwd is
owned by root.
These checks are all incredibly valuable when it comes to auditing a system's compliance
against your security policy, but they might not be very readable for managers or security
teams. They would be more interested in a high-level security policy, such as Verify
Permissions on Important Files and Directories. Indeed, this check would almost certainly
encompass the check on the ownership of /etc/passwd, along with a whole set of other
vital system files such as /etc/group and /etc/shadow.
This is where the XCCDF format becomes relevant—this can be thought of as the next level
in the hierarchy as it provides a set of human-readable security policies (along with
valuable documentation and references) that would be useful to an audience such as a
manager or information security team. These describe the state of a system in reference to
the checks performed by the OVAL definition. The XCCDF files do not contain any check
definitions for the scanning engine (for example, oscap)—instead, they reference the
checks that have been written in the OVAL file and hence can be thought of as sitting on
top of the OVAL files in the hierarchy.
[ 408 ]
Auditing Security Policy with OpenSCAP Chapter 15
Therefore, an OVAL file can be used for auditing purposes in isolation, but an XCCDF file
cannot be used unless its corresponding OVAL file is present.
XCCDF files also contain a selection of scanning profiles that tell the scanning engine what
your policy looks like, and hence what it should scan for. This will almost certainly mean
only scanning for a subset of the checks that are present in the OVAL file.
The profiles available can easily be listed using the graphical SCAP Workbench tool or on
the command line by using the oscap info command. An example of this command run
against SSG for CentOS 7 is shown in the following screenshot:
[ 409 ]
Auditing Security Policy with OpenSCAP Chapter 15
Although the output has been truncated in the interests of space, you can clearly see the
wide array of security profiles available for CentOS 7. You will notice in the screenshot that
(for example) there are different profiles for CentOS 7 servers that run graphical user
interfaces and for those that don't. This is because additional security measures are
required on a graphical system to ensure that the X Windows subsystem is properly
secured. There is a profile suitable for Payment Card Industry (PCI) environments and at
the top, the most basic profile, which should be the minimum viable security policy suitable
for just about any CentOS 7 server.
Once you know which profile you wish to use from your XCCDF policy file, you will
specify it when you run the scan, and we shall explore this in greater detail in a later
section, entitled Scanning the enterprise with OpenSCAP.
Before we conclude this section, it is important to state that OVAL files do not have profiles,
and if you run an OVAL scan, you will automatically run all tests defined in the OVAL file
on your system regardless of its purpose. This may be problematic because, taking the
CentOS 7 SSG OVAL file as an example, this contains tests for the security of the X
Windows graphical subsystem. These tests will fail on a system that does not have a GUI
installed, and so might present false positives in your scan results.
It is important to note that SCAP Workbench only supports scanning with
XCCDF policies, and so if you are using a profile that only includes an
OVAL file, you will need to use a different scanning tool.
Now that we understand more about the file formats of the various security policies you
might download, let's take a look at some of the other security profiles you may wish to
download.
Installing other OpenSCAP policies
It is highly possible that the SSG security policies will form the core of your auditing
framework with OpenSCAP—however, given the open source nature of OpenSCAP, it is
entirely possible for anyone, including you, to write a policy file.
The most likely policies you would wish to supplement your SSG ones with are ones that
can check the patch level of your servers. Given the frequent nature at which patches are
released for Linux operating systems, integrating such policies with SSG would create a
headache for the maintainers, and so they are generally kept separate.
[ 410 ]
Auditing Security Policy with OpenSCAP Chapter 15
For example, on your CentOS 7 server, you can download the following security policy
(note that it is available in OVAL format only):
$ wget
https://www.redhat.com/security/data/oval/com.redhat.rhsa-RHEL7.xml.bz2
$ bunzip2 com.redhat.rhsa-RHEL7.xml.bz2
This contains checks for all CentOS 7 (and RHEL 7) package vulnerabilities that have been
found to date and checks the installed versions to ensure that they are newer than the
versions where known vulnerabilities existed. Hence, this can very easily generate a report
that can show you whether you need to patch your CentOS 7 or RHEL 7 systems urgently.
A similar list is available from Canonical for Ubuntu Server 18.04, which can be
downloaded as follows:
$ wget
https://people.canonical.com/~ubuntu-security/oval/com.ubuntu.bionic.cve.ov
al.xml.bz2
$ bunzip2 com.ubuntu.bionic.cve.oval.xml.bz2
Once again, this contains a list of all packages vulnerabilities that have been found on
Ubuntu Server 18.04 and again checks to ensure that the package versions installed on your