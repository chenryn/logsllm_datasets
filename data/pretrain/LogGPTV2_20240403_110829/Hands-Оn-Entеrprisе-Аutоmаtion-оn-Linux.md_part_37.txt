### Optimized Text

#### Understanding the Role of the Library
As mentioned earlier in this section, even if you do not intend to use the `oscap` CLI tool, the libraries provided by these packages may still be necessary for your specific use case. For example, they are essential for performing remote scans using SCAP Workbench.

#### Importance of Deploying the Packages
It is crucial to consider deploying these packages using Ansible. It may even be beneficial to include them in your standard build image. This ensures that any Linux server can be remotely scanned for compliance without requiring additional setup steps. In a subsequent section, we will cover how to run scans with the `oscap` tool. For now, it is important to understand what these packages are and why they might be required.

#### Installing the OpenSCAP Daemon
Security auditing is an ongoing task. With root access in a Linux environment, someone could make a server non-compliant at any time, either intentionally or through well-meaning changes. Therefore, the results of a security scan only guarantee that the server was compliant (or not) at the time of the scan. Regular scanning is thus essential.

There are multiple ways to achieve regular scanning, such as using a scheduler like `cron` or a scheduled Ansible playbook in AWX or Ansible Tower. However, the OpenSCAP Daemon is a native tool designed to run in the background and perform scheduled scans against a given target or set of targets, which can be the local machine or remote machines accessed over SSH.

**Installation on EL7 Systems:**
```bash
$ sudo yum -y install openscap-daemon
```

**Installation on Ubuntu Systems:**
```bash
$ sudo apt -y install openscap-daemon
```

While you could set up each machine with this daemon, it is more secure to have a centralized scanning architecture. A single, central, secure server can perform remote scans across your network, reducing the risk of tampering by individuals with root access.

#### Running SCAP Workbench
SCAP Workbench is a graphical user interface for the SCAP toolset, designed to provide an easy and intuitive way to perform common scanning tasks. It is suitable for less technical users or those who prefer a graphical environment.

**Considerations:**
- SCAP Workbench is a graphical tool, and many Linux servers run headless without a graphical X environment.
- If installed on a headless server, you will encounter errors.

**Running SCAP Workbench:**
- **Cross-Platform:** Available for Windows, macOS, and most Linux platforms. The easiest option for most users is to run it on their native operating system.
- **Linux Environment:** You can set up a remote X11 session or a dedicated scanning host with a graphical desktop environment.

**Installation on RHEL7/CentOS 7:**
```bash
$ sudo yum -y install scap-workbench
```

**Installation on Ubuntu Server:**
```bash
$ sudo apt -y install scap-workbench
```

**Running SCAP Workbench on Linux:**
```bash
$ scap-workbench &
```

We will explore setting up and running a scan from this graphical environment in a later section.

#### Other OpenSCAP Tools
In addition to the tools discussed, there are two other tools available from the OpenSCAP project: SCAPTimony and the OSCAP Anaconda Addon.

**SCAPTimony:**
- A middleware, Ruby-on-Rails engine for integrating into your own Rails-based application.
- Provides a database and storage platform for SCAP scan results.
- Enables centralized reporting and data manipulation.
- Used by the Katello project and Red Hat Satellite 6.

**OSCAP Anaconda Addon:**
- An add-on for the Anaconda installation environment used by CentOS and Red Hat Enterprise Linux.
- Not applicable for Ubuntu-based servers.
- Provides a way to build Red Hat-based servers that are compliant from the point of installation.

#### Evaluating and Selecting Policies
OpenSCAP and its related tools require a security policy to audit your environment. While the CIS Benchmarks are not currently available for audit through OpenSCAP, many other security policies are suitable for securing your infrastructure. You can also create your own policies.

**SCAP Security Guide (SSG):**
- Comprehensive, ready-made security policies.
- Covers many facets of Linux security and offers remediation steps.
- Available for various operating systems and applications.
- Versions evolve over time; careful consideration is needed when choosing a version.

**Installation on CentOS 7/RHEL 7:**
```bash
$ sudo yum -y install scap-security-guide
```

**Installation on Ubuntu Server 18.04:**
```bash
$ sudo apt -y install ssg-base ssg-debderived ssg-debian ssg-nondebian ssg-applications
```

**Understanding XCCDF and OVAL Policies:**
- **OVAL (Open Vulnerability and Assessment Language):** Describes system-level checks.
- **XCCDF (eXtensible Configuration Checklist Description Format):** Provides human-readable security policies and references OVAL files.
- **Profiles:** Define what the scanning engine should scan for. Profiles are listed using `scap info` or SCAP Workbench.

**Other OpenSCAP Policies:**
- **Patch Level Checks:** Policies to check the patch level of your servers.
- **CentOS 7/RHEL 7:**
  ```bash
  $ wget https://www.redhat.com/security/data/oval/com.redhat.rhsa-RHEL7.xml.bz2
  $ bunzip2 com.redhat.rhsa-RHEL7.xml.bz2
  ```
- **Ubuntu Server 18.04:**
  ```bash
  $ wget https://people.canonical.com/~ubuntu-security/oval/com.ubuntu.bionic.cve.oval.xml.bz2
  $ bunzip2 com.ubuntu.bionic.cve.oval.xml.bz2
  ```

These policies check for known vulnerabilities and ensure that the installed package versions are up-to-date.

By now, you should have a good understanding of the OpenSCAP tools and which ones might be the best fit for your environment. Before proceeding with your first scan, you need an OpenSCAP security policy. In the next section, we will look at where to download these policies and how to select the right one for your environment.