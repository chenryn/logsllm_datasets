We now present some simple techniques that the framework
employs for stealthness.
The framework PFH (see Section 3.2) the GPFH (see Sec-
tion 3.3) apply a clock patch during their processing. On the
IA-32 (and compatible) processors, the processor maintains
a time-stamp counter which is representative of the actual
amount of clock cycles that have elapsed since system boot-
up. The RDTSC instruction can be used to obtain the cur-
rent processor time-stamp counter reading. A malware could
use this to detect if its code is being run under any debugger
since single-stepping or breakpoints will result in increased
latency which is not present during normal execution. De-
pending on the system VAMPiRE is run under, the frame-
work applies a clock patch resetting the time-stamp counter
to a value that mimics the latency close to that of a normal
handler. The framework also performs the same reset on the
real-time clock since a malware could use the real-time clock
to perform a similar latency detection.
VAMPiRE employs a single-step handler for breakpoint
persistence. The single-step handler makes use of the proces-
sor trap-ﬂag for its functioning (see Section 3.4). The pro-
cessor usually has instructions which aid in its manipula-
tion. A malware could, for example, on the IA-32 (and com-
patible) processors use instructions like PUSHF and POP to
check for the trap-ﬂag being active which signiﬁes that its
being debugged. In some cases a malware could also em-
ploy the single-step exception to perform its functionality.
VAMPiRE resolves such issues by masking out the effect
of the trap-ﬂag. The framework maintains a per-thread vir-
tual trap-ﬂag status and can simulate a single-step exception
by chaining to the original handler in cases where the tar-
get malware uses single-stepping. The framework PFH and
GPFH install the single-step handler on demand, ensuring
that VAMPiRE’s single-step handler is always always the
ﬁrst to get control even if a malware installs its own single-
step handler in kernel-mode. Note that a malware can install
its own PFH and GPFH too, but will have to chain to the de-
fault handlers (in this case, VAMPiRE’s) since these handlers
form the backbone of the host OS.
Another detection scheme against VAMPiRE could em-
ploy checking the interrupt vector address range of the PFH
and the GPFH (which fall within a constant range for certain
OSs regardless of their version), by comparing them with the
system default values. Note that a detection scheme cannot
check the vector address of the single-step handler since it is
installed on demand (see Section 3.4). VAMPiRE uses a re-
targetable code instrumentation technique [24], to install the
exception handlers behind the default handlers. Thus, even
though the vector addresses for the various exception han-
dlers will still point towards the system default values, the
actual code at these addresses will be modiﬁed to execute the
frameworks exception handlers. The basic idea behind the in-
strumentation technique is to alter the target code, in binary,
at runtime, in a way so as to execute a replacement code. The
replacement code can in turn execute the original target code,
if required, in its unaltered form. VAMPiRE employs a ran-
dom version of the instrumentation technique within the sys-
tem default handlers such that a malware cannot search for
a speciﬁc instruction in the code stream of the default han-
dlers to detect the framework (an example would be to de-
tect a branch instruction right at the start of the system han-
dler code or at a speciﬁc offset). A debugger using VAM-
PiRE would ideally load a resident part of itself and initial-
ize the framework right at the boot-stage of the OS, before
any device drivers are loaded.
The framework also employs a polymorphic/metamorphic
engine to ensure that every instance of its deployment is dif-
ferent in the form of any privileged modules, environment
variables, conﬁguration ﬁles and code streams. Thus, no mal-
ware can detect VAMPiRE by searching these elements for a
pattern.
A point to be noted is, though VAMPiRE is completely
stealth, a debugger incorporating VAMPiRE might not be.
For example, if one were to plug VAMPiRE into a debugger
such as Windbg [23] or Softice [6], a malware might still be
able to detect that it is being analysed. However, this detec-
tion is that of the Windbg or Softice and not of VAMPiRE.
The authors are currently developing a full ﬂedged stealth
debugger codenamed WiLDCAT, which makes use of VAM-
PiRE to provide features such as selective malware code
stream tracing, real-time reverse debugging, memory mon-
itoring and a host of other features in both user- and kernel-
mode, making it an indispensable tool for microscopic mal-
ware analysis.
3.7. Framework API and Source Organization
and
The main interface to VAMPiRE is provided in the form
of three easy to use API functions: vampire init,
vampire bpremove.
vampire bpsetup
vampire init is responsible for installing the frame-
work page-fault and the GPF handlers and is invoked only
once to initialize the framework. vampire bpsetup
is used for setting up a breakpoint at the desired mem-
ory or
I/O location with a corresponding callback.
vampire bpremove is used to remove or deactivate a pre-
viously set breakpoint. The API’s vampire bpsetup
and vampire bpremove rely on the breakpoint
ta-
ble (see Section 3.5), to maintain the current list of break-
points.
VAMPiRE depends on the host OS to install exception
handlers for the page-fault, GPF and the single-step excep-
tions. This dependency is isolated in the framework source
code, through an OS backend that masks the OS dependent
aspects so that it is easy to port VAMPiRE to other OSs with
ease. Similarly, the disassembler used by the PFH and the
GPFH forms the processor backend that masks the architec-
ture dependent aspects of the framework. Thus, it becomes
easy to port VAMPiRE to other architectures as well.
4. Experience and Performance Evaluation
This section will discuss our experience with VAM-
PiRE and also present the framework’s performance mea-
surements. The performance of a breakpoint framework such
as VAMPiRE depends on a number of factors, chief among
them being the nature of the code being debugged, the de-
pendency of the code on the data accessed, and the style
of debugging employed by an individual in terms of set-
ting breakpoints. These factors are not easy to characterize
and hence it is difﬁcult to come up with a representa-
tive debugging session for performance measurements. This
is further complicated by the fact that the same individ-
ual can adopt a different style of debugging at any given time
for a given code fragment. Therefore, we will concentrate on
presenting the performance of VAMPiRE based on debug-
ging sessions with a Windows based virus, W32.HIV [18].
The performance of the framework for other debugging ses-
sions can be estimated in a similar fashion. We chose the
W32.HIV virus for our analysis and discussion since it con-
tains a variety of anti-analysis tricks that one would typically
encounter in a malware.
Before we proceed to discuss our experience with the
W32.HIV virus, a few words regarding the test-bench are in
order. To validate VAMPiRE, we have implemented a proto-
type debugger. The current version of our debugger runs un-
der the Windows OS (9x and XP) on the IA-32 (and compati-
ble) processors. It makes use of VAMPiRE and also has sup-
port for traditional hardware and software breakpoints. For
test purposes, an AMD Athlon XP 1.8 GHz processor with
512 MB of memory was used. Readings were taken at var-
ious points within our debugger after a breakpoint was set
and before the triggering of a breakpoint and its processing.
We used processor clock cycles as the performance metric
for comparison. This metric is chosen, as it does not vary
across processor speeds and also since it is a standard in lit-
erature related to micro benchmarks. The RDTSC instruction
was used to measure the clock cycles.
The W32.HIV is a dangerous per-process memory resi-
dent Win32 subsystem virus that infects Windows executa-
bles and MSI (install) archives and corrupts certain impor-
tant system ﬁles. The virus has a unique technique of upgrad-
ing itself from the internet and also possesses e-mail spread-
ing abilities. Besides employing a stock encryption and poly-
morphic /metamorphic engine, the virus uses anti-debugging
tricks to prevent itself from being analysed. It also has mech-
anisms of halting the machine completely if a debugger (e.g.
Softice, Windbg etc.) is detected in use.
The W32.HIV virus and modiﬁed strains cannot be anal-
ysed using traditional software breakpoints as we describe in
the following paragraphs. Even hardware breakpoints fail to
help in the complete analysis of the virus. The ﬁrst part of this
section will present the analysis of the virus and the perfor-
mance measurements of VAMPiRE when compared to hard-
ware breakpoints. This analysis is for code fragments of the
virus where both VAMPiRE and hardware breakpoints can
be used. The second part of this section will then present an
analysis of the virus and the performance measurements of
VAMPiRE for code fragments where hardware breakpoints
cannot be used thereby showing the utility of the framework.
For purposes of discussion, we will proceed to look at
some simpliﬁed code fragments of the W32.HIV under dif-
ferent debugging sessions with our prototype debugger. The
code fragments are shown in the 32-bit assembly language
syntax of the IA-32 (and compatible) processors. We have
removed details from the code fragments that are not perti-
nent to our discussion. Consider a code fragment as shown in
Figure 6. This code fragment might not look interesting at a
ﬁrst glance. However, after quite a bit of tinkering, it is found
that this, and other similar code fragments are in fact exam-
ples of the virus polymorphic/metamorphic engine kicking
into action. More speciﬁcally, during our ﬁrst encounter with
debugging and tracing this code fragment, we had our suspi-
cions on the section of the code fragment with the compare
(CMP) instructions (lines 13–16, Figure 6), to have some-
thing to do with the main branch logic handling the function-
ality of the virus.
Figure 6. Self-Modifying Code Fragment
However, when we set a traditional software breakpoint
on the second CMP instruction (line 13, Figure 6) and let the
code fragment execute, the breakpoint is not triggered. Trac-
ing back a few instructions manually, we ﬁnd the problem
to be the section of the code fragment (lines 6–11, Figure
6), that generates new code (at runtime) overwriting existing
code starting from the second CMP instruction (line 13, Fig-
ure 6). This explains why the traditional software breakpoint
was not triggered, as it was overwritten by the newly gener-
ated code. A manual workaround to this problem is achieved
by tracing through the REP MOVSB instruction (line 11, Fig-
ure 6) one step at a time and inserting a traditional software
breakpoint after the new code is generated. However, since
a majority of the virus code is littered with such code frag-
    ... 1. xor eax, esi 2. and eax, 38567fffh 3. add eax, ecx 4. cmp eax, edi 5. jbe 10015000 6. mov edi, eax 7. mov ecx, [esi+3ch] 8. xor ecx, [esi+30h] 9. mov [esi+3ch], ecx10. mov esi, [esi+40h]11. rep movsb12. mov eax, edi13. cmp eax, 514. je 1001F0F015. cmp eax, 1016. je 1001F1F017. cmp eax, 4F18. je 1001F4F0    ...... 1. xor eax, esi 2. and eax, 38567fffh 3. add eax, ecx 4. cmp eax, edi 5. jbe 10015000 6. mov edi, eax 7. mov ecx, [esi+3ch] 8. xor ecx, [esi+30h] 9. mov [esi+3ch], ecx10. mov esi, [esi+40h]11. rep movsb12. mov eax, edi13. cmp eax, 514. je 1001F0F015. cmp eax, 1016. je 1001F1F017. cmp eax, 4F18. je 1001F4F0Breakpointments, this process soon becomes a tedious task.
Now, consider the code fragment as shown in Figure 7,
which will be used to demonstrate the self-checking nature
of the virus. The W32.HIV has self-checking abilities. This
means that the virus has the capability to detect any kind
of modiﬁcation done to its code and will act in a way that
will confuse the individual debugging the virus. The code
fragment shown in Figure 7 is very well constructed to mis-
lead someone who is trying to study the behaviour of the
virus. Though, at a ﬁrst glance it is very similar to the self-
modifying code fragment as shown in Figure 6, it is just a
plain sequence of instructions. In any case, when we set a
traditional software breakpoint on the second CMP instruc-
tion (line 19, Figure 7) — to study the branching in detail
— and let the code execute, the breakpoint triggers success-
fully. Everything appears normal, and there is no sign of any
code changes etc. However, when we trace further, we ar-
rive at a section of code that is garbage and leads to spuri-
ous faults. The problem is traced back to the section of the
code fragment as shown in lines 11–18, Figure 7.
Figure 7. Self-Checking Code Fragment
Here we see an integrity check being attempted on the
code starting from the CMP instruction on line 19, Figure 7.
Setting a traditional software breakpoint on this CMP instruc-
tion causes the instruction to be overwritten with a break-
point instruction. However, this behaviour of traditional soft-
ware breakpoints causes the code fragment to compute a
wrong checksum during the integrity check (lines 11–18,
Figure 7). Further, the virus is very intelligent in that, it does
not terminate or branch to any location upon a failed integrity
check. Instead, the checksum is the branch variable (stored in
register EAX) itself. In other words, the virus uses the check-
sum as a representative of the target address of a branch that
performs some processing pertaining to the functionality of
the virus. Thus, on an incorrect checksum, it branches to a lo-
cation where the code is nothing but garbage and on a valid
checksum the code fragment performs the function it was de-
signed for.
The manual workaround in this case is achieved by pre-
computing the checksum and adjusting the value in the EAX
register and tracing on. But, as with the self-modifying code