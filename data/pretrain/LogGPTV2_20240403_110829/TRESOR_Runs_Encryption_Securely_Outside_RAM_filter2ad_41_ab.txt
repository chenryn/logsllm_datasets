• It is highly efﬁcient.
The four AES instructions mentioned above work on
two operands, the AES state and an AES round key; the
round key is used to scramble the state. Instead of using
memory locations for these operands, the AES instruc-
tions work on SSE registers. On 64-bit systems there
are sixteen 128-bit SSE registers xmm0 to xmm15. AES
states and AES round keys exactly ﬁt into one SSE reg-
ister as they encompass 128 bits, too.
pxor
aesenc
aesenc
aesenc
aesenc
aesenc
aesenc
aesenc
aesenc
aesenc
aesenclast
%xmm0, %xmm15
%xmm1, %xmm15
%xmm2, %xmm15
%xmm3, %xmm15
%xmm4, %xmm15
%xmm5, %xmm15
%xmm6, %xmm15
%xmm7, %xmm15
%xmm8, %xmm15
%xmm9, %xmm15
%xmm10,%xmm15
Figure 1: AES-128 encryption using AES-NI
Figure 1 shows assembly code of the AES-128 encryp-
tion algorithm. Each line performs one of the ten encryp-
tion rounds. The second parameter (xmm15) represents
the AES state and the ﬁrst ten (xmm1 to xmm10) the AES
round keys. Writing a plaintext block into xmm15, the
secret key into xmm0, and the round keys into their re-
spective registers xmm1 to xmm10, these ten lines of as-
sembly code sufﬁce to generate an AES encrypted output
block in xmm15.
The decryption algorithm of AES-128 basically looks
the same, just utilizing aesdec instead of aesenc and
applying the round keys in reverse order. The imple-
mentations of AES-192 and AES-256 basically look the
same, too, just performing twelve or 14 rounds instead of
ten.
Round key generation
The difﬁculty to implement AES completely within the
microprocessor stems from the structure of the AES al-
gorithm. As shown in Figure 1, encryption works with
round keys which we assumed to be stored in xmm1 to
xmm10.
In conventional AES implementations, these
round keys are calculated once and then stored inside
RAM over the entire lifetime of the system. Only when
needed, they are copied from RAM into SSE registers to
be used in combination with AES-NI.
In TRESOR we cannot calculate the AES key sched-
ule beforehand and store it inside RAM as this would
obviously violate our security policy. On the other hand,
we cannot store the entire key schedule in CPU registers
either, because debug registers are too small to hold it and
we do not want to occupy further registers for TRESOR.
Consequently, we have to use an on-the-ﬂy key schedule
that recalculates the round keys each time when enter-
ing the atomic section. This means the round keys must
be recalculated for each input block. Inside the atomic
section we can safely store the round keys inside SSE
registers as they are known not to be swapped out during
this period.
Fortunately, the AES-NI extensions comprise an in-
struction for hardware accelerated round key generation,
namely aeskeygenassist. Apparently, recomput-
ing the entire key schedule again and again is a signiﬁ-
cant performance drawback compared to standard imple-
mentations of AES. By using this specialized instruction,
key generation is relatively efﬁcient, as we show later in
this paper.
key_schedule last next rcon
.macro
pxor
movdqu
shufps
pxor
shufps
pxor
aeskeygenassist $\rcon,\last,%xmm14
$0xff,%xmm14,%xmm14
shufps
pxor
%xmm14,\next
%xmm14,%xmm14
\last,\next
$0x1f,\next,%xmm14
%xmm14,\next
$0x8c,\next,%xmm14
%xmm14,\next
.endm
Figure 2: AES-128 round key generation
Figure 2 lists assembly code to generate the next
round key of AES-128. As each round key computa-
tion is based on slightly different parameters, we de-
ﬁne a macro called key schedule awaiting these pa-
rameters: last is an SSE register containing the pre-
vious round key, next is one that is free to store
the next round key and rcon is an immediate byte,
the round constant.
Inside this macro xmm14 is uti-
lized as temporary helping register. To generate the
ten round keys of AES-128, key schedule has to
be called ten times: key schedule %xmm0 %xmm1
0x1, key schedule %xmm1 %xmm2 0x2, and so
on. Initially the secret key has to be copied from debug
registers into xmm0.3
Using AES-NI it is more complex to generate round
keys than to actually scramble or unscramble blocks, be-
cause with aeskeygenassist Intel provides an in-
struction to assist the programmer in key generation, but
none to perform it autonomously. We conjecture that
this is because key generation of the three AES variants
AES-128, AES-192, and AES-256 differs slightly (for
details see the original standard on AES [12]).
2.4 Kernel patch
Many operating system issues have to be solved when
implementing encryption solely on processor registers.
3A full source code listing including all steps can be found in Ap-
pendix A.1.
5
As mentioned above, we have to patch the OS kernel for
two reasons: First, we have to run parts of AES atomi-
cally in order to ensure that no intermediate state leaks
into memory during context switches. Second, only in
kernel space we can protect the debug registers from be-
ing overwritten or read out by unprivileged user space
threads. We chose the most recent Linux kernel at that
time (version 2.6.36) to implement these changes.
Key protection
For the security of TRESOR it is essential to protect the
key storage against malicious user access. Even if no lo-
cal attacker would read the debug registers on purpose,
the risk remains that a debugger is started accidentally
and pollutes the key storage. With a disk encryption sys-
tem being active in parallel, such a situation would im-
mediately lead to data corruption. Hence, the kernel must
be patched in a way that it denies any attempt to access
debug registers from user space.
int ptrace_set_debugreg
(tsk_struct *t,int n,long v)
thread_struct *thread = &(t->thread);
int rc = 0;
if (n == 4 || n == 5)
return -EIO;
#ifdef CONFIG_CRYPTO_TRESOR
else if (n == 6 || n == 7)
return -EPERM;
else
return -EBUSY;
#endif
if (n == 6) {
thread->debugreg6 = v;
goto ret_path;
}
if (n ptrace_dr7 = v;
}
ret_path: return rc;
{
+
+
+
+
+
+
}
Figure 3: Patched setter for debug registers
The debug registers can only be accessed from priv-
ilege level 0, i.e., from kernel space but not from user
space. Only the ptrace system call allows user space
applications like GDB to read from and write to them in
order to debug a traced child. This makes it effectively
possible to control access to debug registers centrally,
i.e., on system call level. Running an unpatched Linux
kernel, user space threads can access debug registers via
ptrace; running a TRESOR patched kernel, we ﬁlter
this access.
of
the
ptrace
implementation
Figures 3 and 4 list patches we applied to
functions
in
/arch/x86/kernel/ptrace.c: ptrace set
debugreg and ptrace get debugreg. The ﬁrst
patch returns -EBUSY whenever the user space attempts
to write into breakpoint registers and -EPERM whenever
it tries to write into debug control registers. The second
patch returns just 0 for any read access to debug
registers.
long ptrace_get_debugreg(tsk_struct *t, int n)
{
thread_struct *thread = &(t->thread);
unsigned long val = 0;
#ifndef CONFIG_CRYPTO_TRESOR
if (n ptrace_bps[n];
if (!bp) return 0;
val = bp->hw.info.address;
}
else if (n == 6)
val = thread->debugreg6;
else if (n == 7)
val = thread->ptrace_dr7;
#endif
return val;
+
+
}
Figure 4: Patched getter for debug registers
Additionally, we patched elementary functions in
/arch/x86/include/asm/processor.h to pre-
vent kernel internals other than ours from accessing
the debug registers: native set debugreg and
native get debugreg. While the ptrace patches
prevent user space threads from accessing debug regis-
ters, these patches prevent the kernel itself from access-
ing them, e.g., during context switching and ACPI sus-
pend.
Atomicity
The operating system regularly performs context
switches where processor contents are written out to
main memory. When TRESOR is active, the CPU con-
text encompasses sensitive information because our im-
plementation uses SSE and general purpose registers to
store round keys and intermediate states. These registers
are not holding sensitive data persistently, like the debug
registers do, but they hold them temporarily for the pe-
riod of encrypting one block. Thus, although our AES
implementation runs solely on registers and although we
have patched the kernel to protect debug registers, sen-
sitive data may still be written to RAM whenever the
6
scheduler decides to preempt AES in the middle of an
encryption phase.
We solved this challenge by making the encryption of
individual blocks atomic. Resetting the contents of SSE
and general purpose registers before leaving the atomic
section is an effective method to keep their contents away
from context switching. Our atomicity does not only
concern scheduling, but interrupt handling, too, because
interrupt handlers, spontaneously called by the hardware,
can write the CPU context into RAM as well.
Hence, to set up an atomic section we have to disable
interrupts. On multi-core systems it is sufﬁcient to dis-
able interrupts locally, i.e., on the CPU the encryption
task actually takes place on. Other CPUs can proceed
with their tasks as a context switch on one CPU does not
affect registers of another.
preempt_disable();
local_irq_save(*irq_flags);
// ... (encrypt block)
local_irq_restore(*irq_flags);
preempt_enable();
Figure 5: AES block encryption runs atomically
Figure 5 illustrates how to set up an atomic sec-
tion in the Linux kernel that meets our needs. First
preempt disable is called to pause kernel pre-
emption, meaning that running kernel code cannot
be interrupted by scheduling anymore.
Second,
local irq save is called to save the local IRQ
state and to disable interrupts locally. Next we are
safe to encrypt an AES block as we are inside the
atomic section.
SSE and general purpose registers
are only allowed to contain sensitive data within this
section and must be reset before it
is left. Once
they are reset, local interrupts can be re-enabled (by
local irq restore) and kernel preemption can be
continued (by preempt enable).
Crypto API
We integrated TRESOR into the Linux kernel Crypto-
API, an interface for cryptographic ciphers, hash func-
tions and compression algorithms. Besides a coherent
design for cryptographic primitives, the Crypto-API pro-
vides us with several advantages:
• It allows ciphers to be dynamically (un)loaded as
kernel modules. We left support for the standard
AES module untouched and inserted TRESOR as a
completely new cipher module. This enables end
users to choose between TRESOR and standard
AES, to run them in parallel, to compare their per-
formance, etc.
7
• We do not have to implement cipher modes of op-
eration, like ECB and CBC, ourselves since the
Crypto-API handles them automatically. We have
to provide the code to encrypt a single input block
only and encrypting larger messages is done by the
API.
• Existing software, most notably the disk encryption
solution dm-crypt, is based on the Crypto-API and
open to new cipher modules. That is, we do not have
to patch dm-crypt to support TRESOR, but it is sup-
ported out-of-the-box. (Only third party encryption
systems which do not rely on the Crypto-API, like
TrueCrypt, cannot beneﬁt from TRESOR without
further ado.)
All in all, integrating TRESOR into the Crypto-API
simpliﬁes design. However, there is also a little draw-
back of the Crypto-API: It comes with its own key man-
agement which is too insecure for our security policy
because it stores keys and key schedules inside RAM.
To overcome this difﬁculty without changing the Crypto-
API, we pass on a dummy key and look after the real key
ourselves. Setting up an encryption system, the end user
can pass on an arbitrary bit sequence as dummy key, but
for apparent reasons it should not be equal to the real key.
3 Compatibility
We evaluated TRESOR regarding its compatibility with
existing software (Section 3.1) and hardware (Sec-
tion 3.2).
3.1 Software compatibility
Running on a 64-bit CPU, TRESOR is compatible with
all three variants of AES, i.e., with AES-128, AES-192,
and AES-256. To verify that no mistake slipped into
the implementation we show its compatibility to standard
AES: First of all we used ofﬁcial test vectors as deﬁned in
FIPS-197 [12]. TRESOR is integrated into the Crypto-
API in such a way that a test manager proves its cor-
rectness based on these vectors each time the TRESOR
module is loaded. Second, we scrambled a partition
with TRESOR, unscrambled it with standard AES and
vice versa. Along with structured data like text ﬁles and
the ﬁlesystem itself, we created large random ﬁles and
compared both plaintext versions, i.e., before scrambling
with AES and after unscrambling with TRESOR. We
compared these ﬁles and found them to be equal. This in-
dicated the correctness of our implementation – not only
in terms of single, predeﬁned blocks (as test vectors do)
but also regarding a great amount of random data.
Thanks to the Crypto-API, TRESOR is compatible
with all kernel and user space applications relying on
> cryptsetup create tr /dev/sdb1 -c tresor
Enter passphrase: ******
> mkfs.ext2 /dev/mapper/tr
> mount /dev/mapper/tr /media/tresor/
Figure 6: Create TRESOR partition using cryptsetup
this API. Among others these are the kernel-based disk
encryption solution dm-crypt and all its user space fron-
tends, e.g., cryptsetup and cryptmount. Figure 6
lists shell instructions to set up a TRESOR encrypted par-
tition on the device /dev/sdb1. The password can be
any arbitrary string as it is only used to create the dummy
key; it has no effect on the actual encryption process.
Consequently, a partition can be encrypted with the pass-
word “foobar” and decrypted with the password “magic”
(as long as the TRESOR key stays the same).
TRESOR is expected to be compatible with all Linux
distributions, meaning that all prepackaged user mode
binaries are expected to run on top of the TRESOR ker-
nel. For “normal” user mode applications like a shell,
the desktop environment, your web browser, etc., this is
pretty much self-evident – for a debugger it is not. But
even for debuggers like GDB, binary compatibility is not
broken because access to debug registers is handled via
ptrace and we intercept this system call to inform the
user space that all breakpoint registers are busy – a sit-
uation which could occur without TRESOR as well. To
be more precise, we have to distinguish breakpoints and
watchpoints:
1. Breakpoints: Calling break, GDB does not use
hardware breakpoints by default.