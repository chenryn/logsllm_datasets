instances do not apply.
• Class 3—Data is exposed only for the default logical system. The same set of data is returned for all
routing instances that belong to the default logical system. If you specify another logical system (not
the default), no data is returned. Typically this class applies to objects implemented in subagents that
do not monitor logical system changes and register their objects using only the default context (for
example, Chassis MIB objects).
• Class 4—Data is not segregated by routing instance. The same data is returned for all routing
instances. Typically, this applies to objects implemented in subagents that monitor logical system
changes and register or deregister all their objects for each logical system change. Objects whose
values cannot be segregated by routing instance fall into this class.
See "SNMP MIBs Supported for Routing Instances" on page 413 for a list of the objects associated with
each class.
SNMP Traps Supported for Routing Instances
You can restrict the trap receivers from receiving traps that are not related to the logical system
networks to which they belong. To do this, include the logical-system-trap-filter statement at the [edit
snmp] hierarchy level:
[edit snmp]
logical-system-trap-filter;
427
If the logical-system-trap-filter statement is not included in the SNMP configuration, all traps are
forwarded to the configured routing instance destinations. However, even when this statement is
configured, the trap receiver associated with the default routing instance will receive all SNMP traps.
When configured under the trap-group object, all v1 and v2c traps that apply to routing instances (or
interfaces belonging to a routing instance) have the routing instance name encoded in the community
string. The encoding is identical to that used in request PDUs.
For traps configured under the v3 framework, the routing instance name is carried in the context field
when the v3 message processing model has been configured. For other message processing models (v1
or v2c), the routing instance name is not carried in the trap message header (and not encoded in the
community string).
Identify a Routing Instance
With this feature, routing instances are identified by either the context field in v3 requests or encoded in
the community string in v1 or v2c requests.
When encoded in a community string, the routing instance name appears first and is separated from the
actual community string by the @ character.
To avoid conflicts with valid community strings that contain the @ character, the community is parsed
only if typical community string processing fails. For example, if a routing instance named RI is
configured, an SNMP request with RI@public is processed within the context of the RI routing instance.
Access control (views, source address restrictions, access privileges, and so on) is applied according to
the actual community string (the set of data after the @ character—in this case public). However, if the
community string RI@public is configured, the protocol data unit (PDU) is processed according to that
community and the embedded routing instance name is ignored.
Logical systems perform a subset of the actions of a physical router and have their own unique routing
tables, interfaces, policies, and routing instances. When a routing instance is defined within a logical
system, the logical system name must be encoded along with the routing instance using a slash ( / ) to
separate the two. For example, if the routing instance RI is configured within the logical system LS, that
routing instance must be encoded within a community string as LS/RI@public. When a routing instance is
configured outside a logical system (within the default logical system), no logical system name (or /
character) is needed.
Also, when a logical system is created, a default routing instance (named default) is always created within
the logical system. This name should be used when querying data for that routing instance (for example,
LS/default@public). For v3 requests, the name logical system/routing instance should be identified directly
in the context field.
428
NOTE: To identify a virtual LAN (VLAN) spanning-tree instance (VSTP on MX Series 5G Universal
Routing Platforms), specify the routing instance name followed by a double colon (::) and the
VLAN ID. For example, to identify VSTP instance for VLAN 10 in the global default routing
instance, include default::10@public in the context (SNMPv3) or community (SNMPv1 or v2) string.
Enable SNMP Access over Routing Instances
To enable SNMP managers in routing instances other than the default routing instance to access SNMP
information, include the routing-instance-access statement at the [edit snmp] hierarchy level.
If this statement is not included in the SNMP configuration, SNMP managers from routing instances
other than the default routing instance cannot access SNMP information. This setting applies to
requests for any version of SNMP (SNMP v1, v2, or v3).
Specify a Routing Instance in an SNMPv1 or SNMPv2c Community
You can specify the routing instance along with the client information when you add a client to an
SNMP community. To specify the routing instance to which a client belongs, include the routing-instance
statement followed by the routing instance name and client information in the SNMP configuration.
The following example shows the configuration statement to add routing instance test-ri to SNMP
community community1.
NOTE: Routing instances specified at the [edit snmp community community-name] hierarchy level are
added to the default logical system in the community.
[edit snmp]
community community1 {
clients {
10.209.152.33/32;
}
routing-instance test-ri {
clients {
10.19.19.1/32;
429
}
}
}
If the routing instance is defined within a logical system, include the routing-instance statement at the
[edit snmp community community-name logical-system logical-system-name] hierarchy level, as in the following
example:
[edit snmp]
community community1 {
clients {
10.209.152.33/32;
}
logical-system test-LS {
routing-instance test-ri {
clients {
10.19.19.1/32;
}
}
}
}
Example: Configure Interface Settings for a Routing Instance
This example shows an 802.3ad ae0 interface configuration allocated to a routing instance named
INFrtd:
[edit chassis]
aggregated-devices {
ethernet {
device-count 5;
}
}
[edit interfaces ae0]
vlan-tagging;
aggregated-ether-options {
minimum-links 2;
link-speed 100m;
430
}
unit 0 {
vlan-id 100;
family inet {
address 10.1.0.1/24;
}
}
[edit interfaces fe-1/1/0]
fastether-options {
802.3ad ae0;
}
[edit interfaces fe-1/1/1]
fastether-options {
802.3ad ae0;
}
[edit routing-instances]
INFrtd {
instance-type virtual-router;
interface fe-1/1/0.0;
interface fe-1/1/1.0;
interface fe-1/1/5.0;
interface ae0.0;
protocols {
ospf {
area 0.0.0.0 {
interface all;
}
}
}
}
The following snmpwalk command shows how to retrieve SNMP-related information from router1 and the
802.3ae bundle interface belonging to routing instance INFrtd with the SNMP community public:
router# snmpwalk -Os router1 INFrtd@public dot3adAggTable
dot3adAggMACAddress.59 = 0:90:69:92:93:f0
dot3adAggMACAddress.65 = 0:90:69:92:93:f0
dot3adAggActorSystemPriority.59 = 0
dot3adAggActorSystemPriority.65 = 0
dot3adAggActorSystemID.59 = 0:0:0:0:0:0
dot3adAggActorSystemID.65 = 0:0:0:0:0:0
dot3adAggAggregateOrIndividual.59 = true(1)
431
dot3adAggAggregateOrIndividual.65 = true(1)
dot3adAggActorAdminKey.59 = 0
dot3adAggActorAdminKey.65 = 0
dot3adAggActorOperKey.59 = 0
dot3adAggActorOperKey.65 = 0
dot3adAggPartnerSystemID.59 = 0:0:0:0:0:0
dot3adAggPartnerSystemID.65 = 0:0:0:0:0:0
dot3adAggPartnerSystemPriority.59 = 0
dot3adAggPartnerSystemPriority.65 = 0
dot3adAggPartnerOperKey.59 = 0
dot3adAggPartnerOperKey.65 = 0
dot3adAggCollectorMaxDelay.59 = 0
dot3adAggCollectorMaxDelay.65 = 0
Configure Access Lists for SNMP Access over Routing Instances
You can create and maintain access lists to manage access to SNMP information. Access list
configuration enables you to allow or deny SNMP access to clients of a specific routing instance, and
applies to requests for any version of SNMP.
The following example shows how to create an access list:
[edit snmp]
routing-instance-access {
access-list {
ri1 restrict;
ls1/default;
ls1/ri2;
ls1*;
}
}
The configuration given in the example:
• Restricts clients in ri1 from accessing SNMP information.
• Allows clients in ls1/default, ls1/ri2, and all other routing instances with names starting with ls1 to
access SNMP information.
You can use the wildcard character (*) to represent a string in the routing instance name.
432
NOTE: You cannot restrict the SNMP manager of the default routing instance from accessing
SNMP information.
Configure SNMP Remote Operations
IN THIS SECTION
SNMP Remote Operations Overview | 432
Use the Ping MIB for Remote Monitoring Devices Running Junos OS | 436
Start a Ping Test | 437
Monitor a Running Ping Test | 438
Gather Ping Test Results | 442
Stop a Ping Test | 444
Interpret Ping Variables | 444
Use the Traceroute MIB for Remote Monitoring Devices Running Junos OS | 445
Start a Traceroute Test | 445
Monitor a Running Traceroute Test | 446
Monitor Traceroute Test Completion | 450
Gather Traceroute Test Results | 451
Stop a Traceroute Test | 453
Interpret Traceroute Variables | 453
SNMP Remote Operations Overview
IN THIS SECTION
SNMP Remote Operation Requirements | 433
433
Set SNMP Views | 433
Set Trap Notification for Remote Operations | 435
Use Variable-Length String Indexes | 435
Enable Logging | 436
A SNMP remote operation is any process on the router that can be controlled remotely using SNMP.
Junos OS currently provides support for two SNMP remote operations: the Ping MIB and Traceroute
MIB, defined in RFC 2925. Using these MIBs, an SNMP client in the network management system
(NMS) can:
• Start a series of operations on a router
• Receive notification when the operations are complete
• Gather the results of each operation
Junos OS also provides extended functionality to these MIBs in the Juniper Networks enterprise-
specific extensions jnxPingMIB and jnxTraceRouteMIB. For more information about jnxPingMIB and
jnxTraceRouteMIB, see PING MIB and Traceroute MIB.
This topic covers the following sections:
SNMP Remote Operation Requirements
To use SNMP remote operations, you should be experienced with SNMP conventions. You must also
configure Junos OS to allow the use of the remote operation MIBs.
Before starting the Ping MIB, see "Starting a Ping Test" on page 437.
Before starting the Traceroute MIB, see "Starting a Traceroute Test" on page 445.
Set SNMP Views
All remote operation MIBs supported by Junos OS require that the SNMP clients have read-write
privileges. The default SNMP configuration of Junos OS does not provide clients with a community
string with such privileges.
434
To set read-write privileges for an SNMP community string, include the following statements at the [edit
snmp] hierarchy level:
[edit snmp]
community community-name {
authorization authorization;
view view-name;
}
view view-name {
oid object-identifier (include | exclude);
}
Example: Set SNMP Views
To create a community named remote-community that grants SNMP clients read-write access to the Ping
MIB, jnxPing MIB, Traceroute MIB, and jnxTraceRoute MIB, include the following statements at the [edit
snmp] hierarchy level:
snmp {
view remote-view {
oid 1.3.6.1.2.1.80 include; # pingMIB
oid 1.3.6.1.4.1.2636.3.7 include; # jnxPingMIB
oid 1.3.6.1.2.1.81 include; # traceRouteMIB
oid 1.3.6.1.4.1.2636.3.8 include; # jnxTraceRouteMIB
}
community remote-community {
view remote-view;
authorization read-write;
}
}
For more information about the community statement, see Configure SNMP Communities and community
(SNMP).
For more information about the view statement, see Configure MIB Views, view (SNMP Community), and
view (Configuring a MIB View).
435
Set Trap Notification for Remote Operations
In addition to configuring the remote operations MIB for trap notification, you must also configure Junos
OS. You must specify a target host for remote operations traps.
To configure trap notification for SNMP remote operations, include the categories and targets statements
at the [edit snmp trap-group group-name] hierarchy level:
[edit snmp trap-group group-name]
categories {
category;
}
targets {
address;
}
}
Example: Set Trap Notification for Remote Operations
Specify 172.17.12.213 as a target host for all remote operation traps:
snmp {
trap-group remote-traps {
categories remote-operations;
targets {
172.17.12.213;
}
}
}
For more information about trap groups, see Configure SNMP Trap Groups.
Use Variable-Length String Indexes
All tabular objects in the remote operations MIBs supported by Junos OS are indexed by two variables
of type SnmpAdminString. For more information about SnmpAdminString, see RFC 2571.
Junos OS does not handle SnmpAdminString any differently from the octet string variable type. However,
the indexes are defined as variable length. When a variable length string is used as an index, the length
of the string must be included as part of the object identifier (OID).
436
Example: Set Variable-Length String Indexes
To reference the pingCtlTargetAddress variable of a row in pingCtlTable where pingCtlOwnerIndex is bob and
pingCtlTestName is test, use the following object identifier (OID):
pingMIB.pingObjects.pingCtlTable.pingCtlEntry.pingCtlTargetAddress."bob"."test"
1.3.6.1.2.1.80.1.2.1.4.3.98.111.98.4.116.101.115.116
For more information about the definition of the Ping MIB, see RFC 2925.
Enable Logging
The SNMP error code returned in response to SNMP requests can only provide a generic description of
the problem. The error descriptions logged by the remote operations process can often provide more
detailed information about the problem and help you to solve the problem faster. This logging is not
enabled by default. To enable logging, include the flag general statement at the [edit snmp traceoptions]
hierarchy level:
[edit]
snmp {
traceoptions {
flag general;
}
}
If the remote operations process receives an SNMP request that it cannot accommodate, the error is
logged in the /var/log/rmopd file. To monitor this log file, issue the monitor start rmopd command in
operational mode of the command-line interface (CLI).
Use the Ping MIB for Remote Monitoring Devices Running Junos OS
A ping test is used to determine whether packets sent from the local host reach the designated host and
are returned. If the designated host can be reached, the ping test provides the approximate round-trip
time for the packets. Ping test results are stored in pingResultsTable and pingProbeHistoryTable.
RFC 2925 is the authoritative description of the Ping MIB in detail and provides the ASN.1 MIB
definition of the Ping MIB.
437
Start a Ping Test
IN THIS SECTION
Before You Begin | 437
Start a Ping Test | 437
Use Multiple Set PDUs | 438
Use a Single Set PDU | 438
Use this topic to launch an ICMP ping test. There are two ways to start a ping test: using multiple Set
protocol data units (PDUs) or using a single Set PDU.
Before You Begin
Before you start a ping test, configure a Ping MIB view. This allows SNMP Set requests on pingMIB. For
more information, see Configure MIB Views.
Starting in Junos OS Release 17.2X75-D100, you must configure RPM before starting an ICMP ping.
Configure RPM using the edit services rpm command.
Start a Ping Test
To start a ping test, create a row in pingCtlTable and set pingCtlAdminStatus to enabled. The minimum
information that must be specified before setting pingCtlAdminStatus to enabled is:
• pingCtlOwnerIndexSnmpAdminString
• pingCtlTestNameSnmpAdminString
• pingCtlTargetAddressInetAddress
• pingCtlTargetAddressTypeInetAddressType
• pingCtlRowStatusRowStatus
For all other values, defaults are chosen unless otherwise specified. pingCtlOwnerIndex and pingCtlTestName
are used as the index, so their values are specified as part of the object identifier (OID). To create a row,
set pingCtlRowStatus to createAndWait or createAndGo on a row that does not already exist. A value of active for
pingCtlRowStatus indicates that all necessary information has been supplied and the test can begin;
pingCtlAdminStatus can be set to enabled. An SNMP Set request that sets pingCtlRowStatus to active will fail if
the necessary information in the row is not specified or is inconsistent.
438
For information about how to configure a view, see "Setting SNMP Views" on page 446.
Read the following sections for how to order the variables.
Use Multiple Set PDUs
You can use multiple Set request PDUs (multiple PDUs, with one or more varbinds each) and set the
following variables in this order to start the test:
• pingCtlRowStatus to createAndWait
• All appropriate test variables
• pingCtlRowStatus to active
Junos OS now verifies that all necessary information to run a test has been specified.
• pingCtlAdminStatus to enabled
Use a Single Set PDU
You can use a single Set request PDU (one PDU, with multiple varbinds) to set the following variables to
start the test:
• pingCtlRowStatus to createAndGo
• All appropriate test variables
• pingCtlAdminStatus to enabled