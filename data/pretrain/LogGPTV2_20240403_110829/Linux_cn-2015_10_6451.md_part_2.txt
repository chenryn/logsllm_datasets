```
# ip addr add 192.168.0.19 dev enp0s3
```
最后，我们需要启用包转发：
```
# echo "1" > /proc/sys/net/ipv4/ip_forward
```
并停用/取消防火墙（从现在开始，直到下一篇文章中我们介绍了包过滤）：
```
# systemctl stop firewalld
# systemctl disable firewalld
```
回到我们的 RHEL 7（192.168.0.18），让我们配置一个通过 192.168.0.19（2号路由器的 enp0s3）到 10.0.0.0/24 的路由：
```
# ip route add 10.0.0.0/24 via 192.168.0.19
```
之后，路由表看起来像下面这样：
```
# ip route show
```
![显示网络路由表](/data/attachment/album/201510/22/123751znezexl1eddx0j51.png)
*确认网络路由表*
同样，在你尝试连接的 10.0.0.0/24 网络的机器中添加对应的路由：
```
# ip route add 192.168.0.0/24 via 10.0.0.18
```
你可以使用 ping 测试基本连接：
在 RHEL 7 中运行：
```
# ping -c 4 10.0.0.20
```
10.0.0.20 是 10.0.0.0/24 网络中一个 web 服务器的 IP 地址。
在 web 服务器（10.0.0.20）中运行
```
# ping -c 192.168.0.18
```
192.168.0.18 也就是我们的 RHEL 7 机器的 IP 地址。
另外，我们还可以使用 [tcpdump](http://www.tecmint.com/12-tcpdump-commands-a-network-sniffer-tool/)（需要通过 `yum install tcpdump` 安装）来检查我们 RHEL 7 和 10.0.0.20 中 web 服务器之间的 TCP 双向通信。
首先在第一台机器中启用日志：
```
# tcpdump -qnnvvv -i enp0s3 host 10.0.0.20
```
在同一个系统上的另一个终端，让我们通过 telnet 连接到 web 服务器的 80 号端口（假设 Apache 正在监听该端口；否则应在下面命令中使用正确的监听端口）：
```
# telnet 10.0.0.20 80
```
tcpdump 日志看起来像下面这样：
![检查服务器之间的网络连接](/data/attachment/album/201510/22/123752m3uuqld1cvf4k1qp.png)
*检查服务器之间的网络连接*
通过查看我们 RHEL 7（192.168.0.18）和 web 服务器（10.0.0.20）之间的双向通信，可以看出已经正确地初始化了连接。
请注意你重启系统后会丢失这些更改。如果你想把它们永久保存下来，你需要在我们运行上面的命令的相同系统中编辑（如果不存在的话就创建）以下的文件。
尽管对于我们的测试例子不是严格要求，你需要知道 /etc/sysconfig/network 包含了一些系统范围的网络参数。一个典型的 `/etc/sysconfig/network` 看起来类似下面这样：
```
# Enable networking on this system?
NETWORKING=yes
# Hostname. Should match the value in /etc/hostname
HOSTNAME=yourhostnamehere
# Default gateway
GATEWAY=XXX.XXX.XXX.XXX
# Device used to connect to default gateway. Replace X with the appropriate number.
GATEWAYDEV=enp0sX
```
当需要为每个网卡设置特定的变量和值时（正如我们在2号路由器上面做的），你需要编辑 `/etc/sysconfig/network-scripts/ifcfg-enp0s3` 和 `/etc/sysconfig/network-scripts/ifcfg-enp0s8` 文件。
下面是我们的例子，
```
TYPE=Ethernet
BOOTPROTO=static
IPADDR=192.168.0.19
NETMASK=255.255.255.0
GATEWAY=192.168.0.1
NAME=enp0s3
ONBOOT=yes
```
以及
```
TYPE=Ethernet
BOOTPROTO=static
IPADDR=10.0.0.18
NETMASK=255.255.255.0
GATEWAY=10.0.0.1
NAME=enp0s8
ONBOOT=yes
```
其分别对应 enp0s3 和 enp0s8。
由于要为我们的客户端机器(192.168.0.18)进行路由，我们需要编辑 `/etc/sysconfig/network-scripts/route-enp0s3`：
```
10.0.0.0/24 via 192.168.0.19 dev enp0s3
```
现在`reboot`你的系统，就可以在路由表中看到该路由规则。
### 总结
在这篇文章中我们介绍了红帽企业版 Linux 7 的静态路由。尽管场景可能不同，这里介绍的例子说明了所需的原理以及进行该任务的步骤。结束之前，我还建议你看一下    Linux 文档项目    （    The Linux Documentation Project    ） 网站上的《   安全加固和优化 Linux    （    Securing and Optimizing Linux    ） 》的[第四章](http://www.tldp.org/LDP/solrhe/Securing-Optimizing-Linux-RH-Edition-v1.3/net-manage.html)，以了解这里介绍主题的更详细内容。
在下篇文章中我们会介绍数据包过滤和网络地址转换，结束 RHCE 验证需要的网络基本技巧。
如往常一样，我们期望听到你的回复，用下面的表格留下你的疑问、评论和建议吧。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[ictlyh](https://github.com/ictlyh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出