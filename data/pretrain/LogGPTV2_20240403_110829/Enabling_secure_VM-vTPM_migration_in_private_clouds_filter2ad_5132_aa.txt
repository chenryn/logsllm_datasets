title:Enabling secure VM-vTPM migration in private clouds
author:Boris Danev and
Ramya Jayaram Masti and
Ghassan Karame and
Srdjan Capkun
Enabling Secure VM-vTPM Migration
in Private Clouds
Boris Danev, Ramya Jayaram Masti, Ghassan O. Karame and Srdjan Capkun
{bdanev, rmasti, karameg, capkuns}@inf.ethz.ch
Department of Computer Science
ETH Zurich, Switzerland
ABSTRACT
The integration of Trusted Computing technologies into vir-
tualized computing environments enables the hardware-ba-
sed protection of private information and the detection of
malicious software. Their use in virtual platforms, however,
requires appropriate virtualization of their main component,
the Trusted Platform Module (TPM) by means of virtual
TPMs (vTPM). The challenge here is that the use of TPM
virtualization should not impede classical platform processes
such as virtual machine (VM) migration.
In this work, we consider the problem of enabling se-
cure migration of vTPM-based virtual machines in private
clouds. We detail the requirements that a secure VM-vTPM
migration solution should satisfy in private virtualized en-
vironments and propose a vTPM key structure suitable for
VM-vTPM migration. We then leverage on this structure
to construct a secure VM-vTPM migration protocol. We
show that our protocol provides stronger security guarantees
when compared to existing solutions for VM-vTPM migra-
tion. We evaluate the feasibility of our scheme via an imple-
mentation on the Xen hypervisor and we show that it can
be directly integrated within existing hypervisors. Our Xen-
based implementation can be downloaded as open-source
software. Finally, we discuss how our scheme can be ex-
tended to support live-migration of vTPM-based VMs.
1.
INTRODUCTION
Trusted Computing [1] is a set of technologies that pro-
vide hardware and software support for secure storage and
software integrity protection. Its integration into virtualized
computing systems [2] enables the hardware-based protec-
tion of private (sensitive) information and the detection of
malicious software that aims to subvert the operation of vir-
tualized environments. While these enhancements add an
additional layer of security to the underlying data and ap-
plications [3], the use of Trusted Computing in virtual plat-
forms raises several challenges with respect to virtualization
of its hardware root of trust, the Trusted Platform Module
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
(TPM), which provides secure storage and cryptographic op-
erations.
In fact, there is typically a single TPM module per hard-
ware platform. Therefore, its functionality has to be ef-
ﬁciently shared by the virtual machines (VM) running on
the same hardware. This is typically achieved by virtual
TPMs (vTPMs) that mimic the interface and functionality
of the hardware TPM. One important challenge is to real-
ize vTPMs that comply with TPM speciﬁcations while not
impeding platform processes such as VM migration.
Although a number of realizations of vTPMs have been
proposed [4–7], several issues remain unresolved with re-
spect to the application of these realizations to the migra-
tion of vTPMs and their corresponding VMs (VM-vTPM).
In this respect, current schemes for secure VM-vTPM mi-
gration protocols either increase the virtualized platform de-
pendence on Privacy CA [4, 7, 8] or violate TPM usage re-
strictions [5]. Moreover, as far as we are aware, there is no
implementation of a secure VM-vTPM migration protocol.
In this work, we consider the problem of enabling secure
vTPM-based VM (VM-vTPM) migration in virtualized en-
vironments. We ﬁrst extend and detail the requirements
that a secure VM-vTPM migration protocol should satisfy in
private cloud environments. In these environments, a central
provider owns a number of virtualized servers and wishes to
transfer VMs along with their corresponding vTPMs across
these servers (e.g., for load balancing purposes). Given this,
we identify three security requirements related to the au-
thenticity of the migration initiator, the preservation of the
trust chain among entities during migration and the con-
ﬁdentiality of the migration process. We argue that these
requirements are suﬃcient to support secure VM-vTPM mi-
gration in private cloud environments.
Second, we discuss the implications of current vTPM key
hierarchy designs on the eﬃciency and performance of the
VM-vTPM migration process. More speciﬁcally, we show
that existent vTPM key structures are either decoupled from
their corresponding hardware TPM keys or are tightly bound
to the hardware TPM. The former approaches do not ben-
eﬁt from the security guarantees of TPM, while the latter
make the vTPM keys non-migratable according to the TPM
speciﬁcation and therefore required costly key regeneration
at the destination after the VM-vTPM migration process.
Based on these observations, we derive a novel vTPM key
hierarchy that introduces an intermediate layer of keys be-
tween the TPM and vTPM and provides a logical separation
of the vTPM keys according to their usage in the VM. Our
proposed key hierarchy also enables vTPM key migration
(cid:1)(cid:3)(cid:2)
according to the TPM usage restrictions and minimizes the
dependence of vTPM keys on Privacy CA.
In addition, we propose and analyze a secure VM-vTPM
migration protocol that leverages on our vTPM key hier-
archy. Our proposed protocol provides stronger security
guarantees when compared to existing solutions for VM-
vTPM migration. Furthermore, we implement a prelimi-
nary Xen-based prototype of our protocol and we evaluate
its performance. Our implementation demonstrates that our
secure VM-vTPM migration solution can be directly inte-
grated with the open-source hypervisor Xen [9]. We note
that our implementation is open source and is available for
download at [10]. Finally, we discuss how our scheme can be
extended to support live-migration of vTPM-based VMs.
We point out that while prior work has addressed diﬀerent
aspects of secure VM migration, including vTPM migration,
to the best of our knowledge, this work is the ﬁrst to explic-
itly deﬁne the requirements, propose a suitable vTPM key
hierarchy and design and implement a complete VM-vTPM
migration protocol.
The rest of this paper is organized as follows. In Section 2,
we detail our system and attacker models and derive the cor-
responding security requirements. We then present a novel
vTPM key hierarchy and we describe a secure migration
protocol in Section 3. In Section 4, we present a feasibility
study and preliminary performance results extracted from
a preliminary prototype implementation using the Xen hy-
pervisor. Finally, we overview the related work in Section 5
and conclude in Section 6.
2. PROBLEM AND SECURITY REQUIRE-
MENTS
2.1 System Model
In this paper, we consider a setting where a cloud provider
P possesses several (> 2) virtualized servers that are equip-
ped with physical TPMs and wishes to securely migrate
virtual machines (VM) among these servers (e.g., for load-
balancing purposes). Here, each virtual machine interfaces
with the physical TPM through a software-based virtual
TPM (vTPM) (refer to Section 3.1 for further details). We
assume that vTPMs do not contain hardware and hyper-
visor conﬁguration information; this information (stored in
the TPM) is obtained by querying the TPM. Similarly, the
hardware TPM does not include any VM speciﬁc informa-
tion. This procedure decouples the vTPM from hardware-
speciﬁc characteristics and enables its migration.
We assume that P wishes to migrate a virtual machine
from a source server S to a destination server D. We as-
sume that S and D are equipped with public/private key
1
pairs that are persistently stored on their respective TPMs
.
During the migration process, we assume that the virtual
machine can be suspended on S before it is transferred to
D; once the transfer is completed, the virtual machine is
resumed on D.
Given this setting, we consider the problem of enabling se-
cure migration of a VM along with its vTPM from S to D.
Here, several challenges need to be overcome to ensure the
liveliness and soundness of the migration process, namely:
(i) only trusted servers should execute correct VMs, (ii) no
to migrate a virtual machine from a virtualized source
Figure 1: System model: a service provider P wishes
server S to a virtualized destination server D given some
security constraints. Here, both S and D are equipped
with hardware TPMs.
external entity should be able to modify/learn the contents
of the VM during the migration process and (iii) the migra-
tion can only be initiated by trusted parties (e.g., P or S in
our case). Furthermore, this entire process should not vio-
late the trusted computing standards [1] and should be easy
to integrate with current vTPM platforms/architectures.
In what follows, we detail the attacker model and the se-
curity properties that a migration protocol should satisfy.
2.2 Attacker Model
We assume the presence of an attacker A that can eaves-
drop, modify, insert or delete messages in the network. We
assume that A is interested in abusing the migration proto-
col to increase her beneﬁt in the network (e.g., starting her
own VM, acquiring information about the transferred VM,
etc.). We further assume that A is capable of exploiting
software vulnerabilities of remote servers.
However, we point out that A does not have physical ac-
cess to any server in the network managed by P. In addi-
tion, we assume that A is computationally bounded, in the
sense that she cannot forge signatures, break authentication
schemes, without possessing the correct credentials.
Thus, we can safely assume that the TPM embedded in
the various virtualized servers can be trusted. This trust as-
sumption also extends to the software tool (e.g., IMA [12],
HyperSafe [13]) that measures the system state for attesta-
tion using a (dynamic) root of trust (e.g., Intel TXT [14],
Flicker [15]). Otherwise, little can be done to ensure that
the software hosted on a given server is “authentic” and can
be trusted. For simplicity and without loss of generality, we
assume here that A cannot compromise or modify the state
of software on the source and/or destination server during
the migration protocol. That is, A can only compromise the
software hosted by S and/or D, either before the start or
after the end of the migration process.
2.3 Requirements for Secure VM-vTPM Mi-
gration Protocols
1
Alternatively, the private keys could be sealed with TPM-
speciﬁc keys and stored on disk.
We now present the requirements that any secure VM-
vTPM migration protocol should satisfy. These require-
(cid:1)(cid:2)(cid:2)
ments are suﬃcient for secure VM-vTPM migration and
concern the parties involved in the migration as well as the
communication channel over which the migration occurs. In
Section 3, we also describe a protocol that fulﬁlls them.
Requirement 1. (VM-vTPM Conﬁdentiality and
Integrity)
An untrusted entity should not be able to learn any meaning-
ful information about the VM-vTPM during the migration
process. This includes the suspension, transfer and resump-
tion of the VM-vTPM from the source to the destination.
Furthermore, any modiﬁcation to the VM-vTPM during the
migration process should be detectable.
In addition to the basic conﬁdentiality property, preserv-
ing the integrity of the vTPM during the migration process
emerges as an important requirement for any secure VM-
vTPM migration protocol. Otherwise, an adversary can
convince D to accept a diﬀerent VM image by modifying
the contents of its vTPM.
Requirement 2. (Initiation Authenticity)
An untrusted entity should not be able to migrate any VM-
vTPM. Only P should be allowed to initiate the VM-vTPM
migration process.
Restricting the initiation of the migration process solely to
those authorized entities prevents an adversary from contin-
uously migrating VMs across servers, thus alleviating Denial
of Service (DoS) attacks against the entire system. Ensur-
ing that only trusted parties can initiate the migration also
prevents collocation attacks, where the attacker places the
target VM on the same physical server together with another
VM that it controls; this would create a covert-channel that
might leak information about the target VM [11].
Although the initiation authenticity notion is important
to prevent abuse of the migration process, it is has not been
addressed, as far as we are aware, in prior work.
Requirement 3. (Preserving the Trust Chain)
Only trusted servers can receive correct VMs. More specif-
ically, (i) trusted servers should not hold incorrect VMs-
vTPMs and (ii) untrusted servers should not acquire correct
VMs-vTPMs.
By a correct VM, we refer to a VM which is found to be
correct according to a trusted integrity measurement module
(e.g., TPM-based attestation).
Ensuring the integrity of the software hosted on both S
and D prior to the migration process is of paramount im-
portance. A correct VM running in a trusted environment
should not be transferred to a server that might be compro-
mised (e.g., the VM might contain sensitive data). Similarly,
a trusted server should not accept to run an incorrect VM
that might have been compromised. For instance, if the hy-
pervisor in S was compromised, then D cannot trust any
protocol it establishes with S. Note that this requirement
does not address the case where an untrusted server executes
incorrect VMs.
3. A SECURE VM-VTPM MIGRATION
PROTOCOL
In this section, we outline an eﬃcient solution that enables
secure VM-vTPM migration. We start by providing the
necessary background on TPM and vTPM keys.
3.1 vTPM Key Hierarchy
The design of the vTPM key hierarchy should provide
the same functionality as the original TPM key hierarchy,
i.e., allow proof of authenticity, attestation and secure stor-
age [16]. In addition, it should comply with the TPM key us-
age restrictions and introduce minimal overhead during VM-