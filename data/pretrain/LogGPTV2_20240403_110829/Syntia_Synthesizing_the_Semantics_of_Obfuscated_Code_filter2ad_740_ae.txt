dlers. This includes both the high-level semantics with
regard to input and output variables as well as the indi-
vidual unblinding routines. In his paper, Rolles discusses
how this type of attack requires complete understanding
of the VM and therefore has to be repeated for each virtu-
alization obfuscator [44]. Thus, we note that this attack
does not lend itself easily to full automation. Another ap-
proach is to perform analyses on the bytecode level. The
idea is that while an attacker cannot learn the full seman-
tics of the original code, the analysis of the interaction
of handlers itself reveals enough information about the
underlying code. This allows the attacker to skip details
like bytecode blinding as she only requires the high-level
semantics of a handler. Sharif et al. successfully mounted
such an attack to recover the CFG of the virtualized func-
tion [53], but do not take semantics other than virtual
instruction pointer updates into account.
We recognize the latter approach as promising and note
how Syntia allows us to automatically extract the high-
level semantics of arithmetical and logical instruction
handlers. This is achieved by operating on an execution
trace through the interpreter and simplify its individual
handlers—as distinguished by trace window boundaries—
using program synthesis. Especially, we highlight how ob-
taining the semantics of one handler automatically yields
information about the underlying native code at all points
of the trace where this speciﬁc handler is used to encode
equivalent virtualized semantics.
Evaluation Setup. We evaluated Syntia to learn the
semantics of arithmetic and logical VM instruction han-
dlers in recent versions of VMProtect [58] (v3.0.9) and
Themida [38] (v2.4.5.0). To this end, we built a program
that covers bit-vector arithmetic for operand widths of 8,
16, 32, and 64 bit. Since we are interested in analyzing ef-
fects of the VM itself, using a synthetic program does not
distort our results. For veriﬁcation, we manually reverse
engineered the VM layouts of VMProtect and Themida.
Note that the commercial versions of both protection sys-
tems have been used to obfuscate the program. These are
known to provide better obfuscation strength compared
to the evaluation versions.
We argue that our evaluation program is representative
of any program obfuscated with the respective VM-based
obfuscating scheme. As seen in Section 2.1.1, common
instructions map to a plethora of VM handlers. Conse-
quently, if we succeed in recovering the semantics of these
integral building blocks, we are at the same time able to
recover other variations of native instructions using these
handlers as well.
This motivates the design of our evaluation program,
which aims to have a wide coverage of all possible arith-
metic and logical operations. We note that this may not be
the case for real-world test cases, which may not trigger
all interesting VM handlers. To this extent, our evalua-
tion program is, in fact, more representative than, e. g.,
malware samples.
6.3.1 VMProtect
In its current version, VMProtect follows the Direct
Threaded Code design principle (cf. Section 2.1.1). Each
handler directly invokes the next handler based on the
address encoded directly in the instruction’s bytecode.
Hence, reconstructing the handlers requires an instruction
trace. Also, this impacts trace dissection: since VM han-
dlers dispatch the next handler, they end with an indirect
jump. Unsurprisingly, Syntia could automatically dissect
the instruction trace into trace windows that represent a
single VM handler. As evident from Table 3, there are
449 unique trace windows out of a total of 12,577 in the
instruction trace.
Further, VMProtect employs handler duplication. For
example, the 449 instruction handlers contain 12 instances
performing 8-bit addition, 11 instances for each of addi-
tion (for each ﬂavor of 16-, 32-, 64-bit), nor (8-, 64-bit),
left and right shift (32-, 64-bit); amongst multiple others.
If Syntia is able to learn one instance in each group, it is
safe to assume that it will successfully synthesize the full
group, as supported by our results.
Similarly, the execution trace is made up of all possible
handlers and some of them occur multiple times. Hence,
if we correctly synthesize semantics for, e. g., a 64-bit
addition, this immediately yields semantics for 772 trace
windows (6.2% of the full trace, 32.0% of all arithmetic
and logical trace windows in the trace). Equivalent rea-
soning applies to 16-bit nor operations in our trace (3.6%
of the full trace, 18.8% of all arithmetic and logical trace
windows). In total, our results reveal semantics for 19.7%
of the full execution trace (2,482 out of 12,577 trace win-
654    26th USENIX Security Symposium
USENIX Association
dows). Manual analysis suggests that the remaining trace
semantics mostly consists of control-ﬂow handling and
stack operations. These are especially used when switch-
ing from the native to the VM context and amount for a
large part of the execution trace.
On average, an individual instruction handler consists
of 49 instructions. As VMProtect’s VM is stack-based,
binary arithmetic handlers pop two arguments from the
stack and push the result onto the stack. This tremen-
dously eases identiﬁcation of inputs and outputs. There-
fore, we mark memory operands as inputs and outputs
and use the conﬁguration vector (1.5,30000,20,0) for the
synthesis. The sampling phase ﬁnished in less than two
minutes. Overall, the 1,123 synthesis tasks completed
in less than an hour, which amounts to merely 3.7 sec-
onds per task. In total, in our ﬁrst run, we automatically
identiﬁed 190 out of 196 arithmetical and logical han-
dlers (96.9%). The remaining 6 handlers implement 8-bit
divisions and shifts. Due to their representation in x86
assembly code, Syntia needs to synthesize more complex
expressions with nested data type conversions. As the
analysis is probabilistic in nature, we scheduled ﬁve more
runs which yielded 4 new handlers. Thus, we are able to
automatically pinpoint 98.9% of all arithmetic and logical
instruction handlers in VMProtect.
6.3.2 Themida
The protection solution Themida supports three basic VM
ﬂavors, namely, Tiger, Fish, and Dolphin. Each ﬂavor
can further be customized to use one of three obfuscation
levels, in increasing complexity: White, Red, and Black.
We note that related work on deobfuscation does not di-
rectly mention the exact conﬁguration used for Themida.
In hopes to be comparable, we opted to use the default
ﬂavor Tiger, using level White, in our evaluation. Unlike
VMProtect, Tiger White uses an explicit handler table
while inlining the dispatcher routine; i. e., it follows the
Threaded Code design principle (cf. Section 2.1.1). Con-
sequently, trace dissection again yields one trace window
per instruction handler. Even though the central handler
table lists 1,111 handlers, we identiﬁed 106 unique trace
windows along the concrete execution trace.
Themida implements a register-based architecture and
stores intermediate computations in one of many register
available in the VM context. This, in turn, affects the
identiﬁcation of input and output variables. While in the
case of VMProtect, inputs and outputs are directly taken
from two slots on the stack, Themida has a signiﬁcantly
higher number of potential inputs and outputs (i. e., all
virtual registers in the VM context, 10 to 15 in our case).
Tiger White supports handlers for addition, subtraction,
multiplication, logical left and right shift, bitwise oper-
ations and unary subtraction; each for different operand
widths. In contrast to VMProtect, handlers are neither
duplicated nor do they occur multiple times in the execu-
tion trace. Hence, the trace itself is much more compact,
spanning 2,448 trace windows in total; roughly 5 times
shorter than VMProtect’s. Still, Themida’s handlers are
much longer, with 258 instructions on average.
We ran the analysis using the conﬁguration vector
(1.8,50000,20,0). Due to the higher number of in-
puts, this conﬁguration—in comparison to the previous
section—sets a much higher focus on exploration as indi-
cated by higher values chosen for the ﬁrst two parameters.
Sampling ﬁnished in one minute, whereas the synthesis
phase took around 166 minutes. At 1,092 synthesis tasks,
this amounts to roughly 9.1 seconds per task. Eventually,
we automatically learned the semantics of 34 out of 36
arithmetic and logical handlers (94.4%). The remaining
handlers (8-bit subtraction and logical or) were not found
as we were unable to complete the sampling phase due to
crashes in Unicorn engine.
6.4 ROP Gadget Analysis
We further evaluated Syntia on ROP gadgets, speciﬁcally,
on four samples that were thankfully provided by De-
bray [62]. They implement bubble sort, factorials, Fi-
bonacci, and matrix multiplication in ROP. To have a
larger set of samples, we also used a CTF challenge [41]
that has been generated by the ROP compiler Q [51] and
another Fibonacci implementation that has been generated
with ROPC [39].
Syntia automatically dissected the instruction traces
into 156 individual gadgets. Since many gadgets use
exactly the same instructions, we uniﬁed them into 78
unique gadgets. On average, a gadget consists of 3 instruc-
tions with 3 inputs and 2 outputs (register and memory
locations).
Due to the small numbers of inputs and synthesis tasks,
we chose the conﬁguration vector (1.5,100000,50,0) that
sets a very strong focus on exploration while accepting
a higher running time. Especially, we experienced both
effects for the maximum number of MCTS iterations.
Syntia synthesized partial semantics for 97.4% of the
gadgets in less than 14 minutes; in total, we were suc-
cessful in 163 out of the 178 (91.5%) synthesis tasks.
Our synthesis results include 58 assignments, 17 binary
additions, 5 ternary additions, 4 unary minus, 4 binary
subtractions, 4 register increments/decrements, 2 binary
multiplications and 1 bitwise and. In addition, we found
68 stack pointer increments due to ret statements. The
results do not include larger constants or operations such
as ror as they are not part of our grammar.
USENIX Association
26th USENIX Security Symposium    655
7 Discussion
In the following, we discuss different aspects of program
synthesis for trace simpliﬁcation and MCTS-based pro-
gram synthesis. Furthermore, we point out limitations of
our approach as well as future work.
Program Synthesis for Trace Simpliﬁcation. Current
research on deobfuscation [13, 53, 61, 62] operates on
instruction traces and uses a mixed approach consisting
of symbolic execution [61] and taint analysis [60]; two
approaches that require a precise analysis of the under-
lying code. While techniques exist that defeat taint anal-
ysis [6, 48], recent work shows that symbolic execution
can similarly be attacked [2].
Program synthesis is an orthogonal approach that oper-
ates on a purely semantical level as opposed to (binary)
code analysis; it is oblivious to the underlying code con-
structs. As a result, syntactical aspects of code complexity
such as obfuscation or instruction count do not inﬂuence
program synthesis negatively. It is merely concerned with
the complexity of the code’s semantics. The only excep-
tion where code-level artifacts matter is the generation
of I/O samples; however, this can be realized with small
overhead compared to regular execution time using dy-
namic binary instrumentation [37, 40].
Commonly, instruction traces contain repetitions of
unique trace windows that can be caused by loops or
repeated function calls to the same function. By synthe-
sizing these trace windows, the synthesized semantics
pertain for all appearances on the instruction trace; the
more frequently these trace windows occur in the trace,
the higher the percentage of known semantics in the in-
struction trace. We stress how VM-based obfuscation
schemes do this to the extreme: a relatively small number
of unique trace windows are used over the whole trace.
In general, the synthesis results may not be precise se-
mantics since we approximate them based on I/O samples.
If these do not reﬂect the full semantics, the synthesis
misses edge cases. For instance, we sometimes cannot
distinguish between an arithmetic and a logical right shift
if the random inputs are no distinguishing inputs. We
point out that this is not necessarily a limitation, since a
human analyst might still get valuable insights from the
approximated semantics.
As future work, we consider improving trace simpliﬁ-
cation by a stratiﬁed synthesis approach [23]. The main
idea is to incrementally synthesize larger parts of the in-
struction trace based on previous results and successively
approximate high-level semantics of the entire trace. Fur-
ther, we note that the work by Sharif et al. [53] is comple-
mentary to our synthesis approach and would also allow
us to identify control ﬂow. Likewise, extending the gram-
mar by control-ﬂow operations is another viable approach
to tackle this limitation.
MCTS-based Program Synthesis. Compared to SMT-
based program synthesis, we obtain candidate solutions,
even if the synthesizer does not ﬁnd an exact result. This
is particularly beneﬁcial for applications such as deob-
fuscation, since a human analyst can sometimes infer the
full semantics. We decided to utilize MCTS for program
synthesis since it has been proven very effective when
operating on large search trees without domain knowl-
edge. However, our approach is not limited to MCTS,
other stochastic algorithms are also applicable.
Drawn from the observations made in Section 6, we
infer that the MCTS approach is much more effective
with a conﬁguration that focuses on exploration instead of
exploitation. The SA-UCT parameter ensures that paths
with a higher reward are explored in-depth in later stages
of the algorithm. We still try to improve exploration
strategies, for instance with Nested Monte Carlo Tree
Search [35] and Monte Carlo Beam Search [7].
Limitations.
In general, limits of program synthesis
apply to our approach as well. Non-determinism and point
functions—Boolean functions that return 1 for exactly one
input out of a large input domain—cannot be synthesized
practically. This also holds for semantics that have strong
confusion and diffusion properties, such as cryptographic
algorithms. These are inherently very complex, non-linear
expressions with a deep nesting level. Our approach is
also limited by the choice of trace window boundaries;
ending a trace window in intermediate computation steps
may produce formulas that are not meaningful at all.
8 Related Work
We now review related work for program synthesis, Monte
Carlo Tree Search and deobfuscation. Furthermore, we
describe how our work ﬁts into these research areas.
Program Synthesis. Gulwani et al. [22] introduced an
SMT-based program synthesis approach for loop-free pro-
grams that requires a logical speciﬁcation of the desired
program behavior. Building on this, Jha et al. [24] re-
placed the speciﬁcation with an I/O oracle. Upon gener-
ation of multiple valid program candidates, they derive
distinguishing inputs that are used for subsequent oracle
queries. They demonstrated their use case by simplifying
a string obfuscation routine of MyDoom. Godfroid and
Taly [18] used an SMT-based approach to learn the formal
semantics of CPU instruction sets; for this, they use the
CPU as I/O oracle.
656    26th USENIX Security Symposium
USENIX Association
Schkufza et al. [50] proved that stochastic program
synthesis often outperforms SMT-based approaches. This
is mostly due to the fact that common SMT-based ap-
proaches effectively enumerate all programs of a given
size or prove their non-existence. On the other hand,
stochastic approaches focus on promising parts of the
search space without searching exhaustively. Schkufza
et al. use this technique for stochastic superoptimization
on the basis of their tool STOKE. Recent work by Heule
et al. [23] demonstrates a stratiﬁed approach to learn the
semantics of the x86-64 instruction set, based on STOKE.
Their main idea is to re-use synthesis results to synthe-
size more complex instructions in an iterative manner.
To the best of our knowledge, STOKE is the only other