title:Efficient Implementation of ECDH Key Exchange for MSP430-Based Wireless
Sensor Networks
author:Zhe Liu and
Hwajeong Seo and
Zhi Hu and
Xinyi Huang and
Johann Großsch&quot;adl
Efﬁcient Implementation of ECDH Key Exchange for
MSP430-Based Wireless Sensor Networks
Zhe Liu
University of Luxembourg,
Luxembourg
PI:EMAIL
Hwajeong Seo
Pusan National University,
Republic of Korea
Zhi Hu
Central South University,
P.R. China
PI:EMAIL
PI:EMAIL
Xinyi Huang
Fujian Normal University,
P.R. China
Johann Großschädl
University of Luxembourg,
Luxembourg
PI:EMAIL
PI:EMAIL
ABSTRACT
Public-Key Cryptography (PKC) is an indispensable build-
ing block of modern security protocols, and, thus, essential
for secure communication over insecure networks. Despite a
signiﬁcant body of research devoted to making PKC more
“lightweight,” it is still commonly perceived that software
implementations of PKC are computationally too expensive
for practical use in ultra-low power devices such as wireless
sensor nodes. In the present paper we aim to challenge this
perception and present a highly-optimized implementation
of Elliptic Curve Cryptography (ECC) for the TI MSP430
series of 16-bit microcontrollers. Our software is inspired
by MoTE-ECC and supports scalar multiplication on two
families of elliptic curves, namely Montgomery and twisted
Edwards curves. However, in contrast to MoTE-ECC, we
use pseudo-Mersenne prime ﬁelds as underlying algebraic
structure to facilitate inter-operability with existing ECC
implementations. We introduce a novel “zig-zag” technique
for multiple-precision squaring on the MSP430 and assess
its execution time. Similar to MoTE-ECC, we employ the
Montgomery model for variable-base scalar multiplications
and the twisted Edwards model if the base point is ﬁxed
(e.g. to generate an ephemeral key pair). Our experiments
show that the two scalar multiplications needed to perform
an ephemeral ECDH key exchange can be accomplished in
4.88 million clock cycles altogether (using a 159-bit prime
ﬁeld), which sets a new speed record for ephemeral ECDH
on a 16-bit processor. We also describe the curve generation
process and analyze the execution time of various ﬁeld and
point arithmetic operations on curves over a 159-bit and a
191-bit pseudo-Mersenne prime ﬁeld.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore.
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714608.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption—Public Key Cryptosystems;
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Algorithms, Experimentation, Performance, Security
Keywords
Wireless sensor networks, Ephemeral ECDH key exchange,
Multi-precision arithmetic, Pseudo-Mersenne prime
1.
INTRODUCTION
In recent years, the security of Wireless Sensor Networks
(WSNs) has been an active area of research, mainly due to
the widespread deployment of WSN technology in critical
application domains like medical monitoring, traﬃc control
or disaster detection [1]. The wireless nature of communica-
tion among sensor nodes implies that WSNs face the same
security threats as other wireless networks; for example, an
attacker may eavesdrop on the communication, inject false
messages, or replay old messages [17]. In addition, WSNs
can be subject to many other, very speciﬁc attacks that are
diﬃcult to defend against [17]. Deploying sensor nodes in
an unattended environment exposes them to attackers who
could tamper with individual nodes or even capture a node
with the goal of extracting sensitive information stored on
it. Strong cryptography is essential to protect stored data
against unauthorized access or to thwart eavesdropping on
the communication between nodes. However, sophisticated
cryptographic algorithms introduce signiﬁcant overheads in
terms of execution time and energy consumption, which is
undesirable for resource-restricted devices such as wireless
sensor nodes. A state-of-the-art sensor node features an 8
or 16-bit microcontroller clocked at a frequency of less than
10 MHz and is equipped with a few kB of RAM and up to
256 kB of ﬂash memory for storing program code. Despite
these computational constraints, the (by far) most precious
resource of a wireless sensor node is energy. Once deployed
in the ﬁeld, the sensor nodes are expected to work several
months, or even years, with the energy of two AA batteries
that can not be easily recharged or replaced.
A prerequisite for secure (i.e. encrypted) communication
between two sensor nodes is the establishment of a shared
secret key. Standardized security protocols like SSL or TLS
utilize Public-Key Cryptography (PKC) to set up a shared
key between a client and a server, either through key trans-
port based on RSA or by means of key agreement based on
the Diﬃe-Hellman scheme. However, due to the restricted
resources of wireless sensor nodes, it was generally believed
that PKC is not feasible for WSNs [1]. Therefore, a large
body of research has been devoted to ﬁnd more lightweight
approaches for establishing shared keys between nodes, see
e.g. [17] and [12, Section 1.1] for a brief overview. A simple
idea is random key pre-distribution, where, prior to deploy-
ment, each sensor node is loaded with a set of keys chosen
randomly from a large key pool so that any two nodes will
share (at least) one key with a certain probability. While
this approach is fairly easy to implement and preserves the
scarce resources of the nodes (since no costly cryptographic
operations are involved), it has limitations with respect to
scalability and resilience to node capture. Another method
to obtain pairwise secret keys in a WSN is to use a trusted
third party (e.g. the base station) as a key distribution cen-
ter that generates, upon request, a unique “link key” for a
pair of nodes. This approach requires each node to share
a long-term key with the trusted third party, which is used
to transfer the link key securely (i.e. encrypted) to the two
nodes. However, key establishment techniques relying on a
key distribution center require communication among three
parties, possibly over large distances, which is expensive in
terms of energy.
In 2004, Gura et al [7] published a now-classical paper in
which they demonstrated that, in contrast to conventional
wisdom, strong PKC is feasible for small battery-powered
sensor nodes. In particular, they showed that Elliptic Curve
Cryptography (ECC) [8], when carefully implemented and
optimized, is computationally less costly than was believed
at that time. For example, a scalar multiplication (which is
the major operation of an ECC cryptosystem) in a 160-bit
elliptic curve group (providing a similar level of security as
1024-bit RSA) can be executed in only 0.81 seconds on an
8-bit ATmega128 microcontroller clocked at 8.0 MHz. The
feasibility of ECC on such resource-restricted sensor nodes
paved the way to another option for key establishment in a
WSN, namely the well-known Elliptic Curve Diﬃe-Hellman
(ECDH) key exchange protocol. ECDH is quite similar to
the traditional Diﬃe-Hellman protocol, but operates in an
elliptic curve group E(Fq) instead of Z∗
p [8]. As mentioned
before, the computationally expensive part of virtually all
ECC schemes, including ECDH, is scalar multiplication, an
operation of the form k · P whereby P is a point of prime
order n on an elliptic curve, and k is simply an integer in
the range [1, n − 1]. There exist two major variants of the
ECDH protocol, namely static and ephemeral ECDH. The
latter yields a unique secret key in each run of the protocol
and, hence, can provide forward secrecy, but this comes at
the cost of an additional scalar multiplication. Ephemeral
ECDH requires each node to execute two scalar multiplica-
tions; one by a ﬁxed base point (to generate an ephemeral
key pair) and the other by a variable base point (to obtain
the shared secret key).
though ECDH has clear advantages over other techniques
for key establishment with respect to communication ener-
gy cost, it is still widely believed that scalar multiplication
is too computation-intensive and, therefore, consuming too
much energy for “real-word” WSN applications. To address
this critique, a large body of research has been devoted to
improve the performance of scalar multiplication on 8 and
16-bit microcontrollers with the goal of making ECC more
attractive for resource-restricted environments. Besides the
8-bit ATmega128, also Texas Instruments’ MSP430 series
of low-power microcontrollers [24] has been frequently used
as experimental platform since it can be found in a range
of sensor nodes (e.g. the Tmote Sky). One of the ﬁrst ECC
software implementations for the TI MSP430 was reported
by Wang et al [25], who achieved an execution time of 25.0
and 28.1 million cycles for a ﬁxed-base and a variable-base
scalar multiplication, respectively, using a Weierstraß curve
over a 160-bit prime ﬁeld. The by far most important ECC
software for MSP430-based WSNs is TinyECC [13], whose
source code is openly available and has been incorporated
into numerous WSN research projects. TinyECC supports
elliptic curves over 128, 160, and 192-bit primes ﬁelds and
is highly scalable and conﬁgurable. In the past 5 years, the
majority of research focussed on improving the execution
time of the arithmetic operations in the underlying prime
ﬁeld, in particular the multiplication; examples for this line
of research are [5, 9, 18, 20, 23, 27]. Only very recently, a
second approach to speed up ECC on the MSP430 platform
has been investigated, namely the use of “special” families
of curves (e.g. Montgomery curves [19] or twisted Edwards
curves [3]) to improve the point arithmetic; representative
papers in this context are [10, 14]. A scalar multiplication
on Curve25519 (a Montgomery curve over a 255-bit prime
ﬁeld [2]) can be executed in only 9,14 million clock cycles
on an MSP430 with a (16 × 16)-bit multiplier [10].
In this paper, we describe an eﬃcient ECC implementa-
tion that achieves record-setting execution times for ﬁxed-
base and variable-base scalar multiplication on an MSP430
processor. We managed to push the performance envelope
through the right selection of curve models (and associated
domain parameters) combined with a careful optimization
of the point/ﬁeld arithmetic. All previous implementations
of ECC for MSP430 processors used either a conventional
Weierstraß curve (e.g. [20, 23, 27]) or a Montgomery curve
of unreasonably large order (e.g. [10]), both of which wastes
execution time and, thus, energy. In contrast, our software
supports Montgomery and Edwards curves over a 159 and
a 191-bit prime ﬁeld, which represents a good compromise
between performance and security. Our implementation is
inspired by MoTE-ECC [16], but we use pseudo-Mersenne
prime ﬁelds instead of the so-called Optimal Prime Fields
(OPFs) [15] to facilitate inter-operability with other ECC
implementations. We implemented and optimized all ﬁeld
operations from scratch in Assembly language, whereby we
paid particular attention to the squaring since it was often
ignored in related work. Thanks to our special combination
of curve parameters and eﬃcient point/ﬁeld arithmetic, we
managed to signiﬁcantly improve the state-of-the-art.
2. ELLIPTIC CURVES
The feasibility of performing ECC on resource-restricted
sensor nodes does not necessarily imply that ECDH is an
attractive option for key establishment in a WSN [23]. Even
Ephemeral ECDH requires each of the two sensor nodes
involved in the key exchange to carry out two scalar multi-
plications; one to generate an ephemeral key pair and the
other to get the shared key. The ﬁrst scalar multiplication
uses a ﬁxed and a-priori-known point as input, namely the
generator G of the elliptic-curve group, whereas the second
scalar multiplication has to be carried out with a random
point not known in advance. Consequently, each of the two
nodes has to perform both a ﬁxed-base and a variable-base
scalar multiplication [8]. Recently, Liu et al [16] introduced
MoTE-ECC, an optimized software library for ECC on the
8-bit AVR platform that allows for very eﬃcient execution
of ephemeral ECDH key exchange in a WSN. MoTE-ECC
uses both the Montgomery model and the twisted Edwards
model, whereby solely the x-coordinates of the public keys
are transferred, as in [2], which reduces the communication
energy cost and makes point compression [8] obsolete. The
ﬁxed-base scalar multiplication is performed on a twisted
Edwards curve, and the variable-base scalar multiplication
on the birationally-equivalent Montgomery curve. In this
way, MoTE-ECC is able to combine the individual compu-
tational advantages of the twisted Edwards model and the
Montgomery model. Our implementation for the MSP430
follows this approach and, thus, we also support both curve
models. In the rest of this section, we ﬁrst recap the basics
of Montgomery and twisted Edwards curves, and then we
elaborate on the curve generation process.
2.1 Montgomery & Twisted Edwards Curves
In 1987, Peter Montgomery [19] presented a special class
of elliptic curves with unique implementation properties. In
formal terms, a so-called Montgomery curve EM over Fp is
deﬁned through an equation of the form
EM : By2 = x3 + Ax2 + x,
(1)
where A ∈ Fp \ {−2, 2} and B ∈ Fp \ {0}. A characteristic
feature of such curves is that a scalar multiplication can be
executed using only the x-coordinate of the base point and
all intermediate points. The so-called Montgomery ladder is
a special technique for computing Q = k · P that performs
a diﬀerential point addition (i.e. an addition of two points
P1, P2 whose diﬀerence P1 − P2 is known) and a doubling
in each step. Since the y-coordinate is not involved in the
computation, a diﬀerential point addition can be executed
very eﬃciently with three multiplications (i.e. 3M) and two
squarings (i.e. 2S) in the underlying ﬁnite ﬁeld. Doubling a
point requires two multiplications (i.e. 2M), two squarings
(i.e. 2S), as well as a multiplication by (A − 4)/2, which is
normally a cheap operation when the curve parameter A is
chosen properly [2]. For each bit of the scalar k, the Mont-
gomery ladder has to execute a “ladder step” consisting of a
point addition and a point doubling; both costs 5M and 4S
altogether. Besides eﬃciency, the Montgomery ladder also
features a highly regular execution pattern, which helps to
thwart certain implementation attacks.
Twisted Edwards curves were introduced by Bernstein et
al in 2008 [3] and are currently considered to be one of the
fastest means to implement ECC. A twisted Edwards curve
ET over a prime ﬁeld Fp can be deﬁned as
ET : ax2 + y2 = 1 + dx2y2,
(2)
where a, d ∈ Fp and ad(a − d) (cid:54)= 0. These curves possess a
remarkable addition law that can be complete when a is a
square in Fp and d a non-square. Completeness means the
addition produces the correct result for any two points on
the curve ET , without exception, even if one of the points
is the neutral element O = (0, 1) [3]. Similar to most of the
previous implementations, we adopt the so-called extended
twisted Edwards coordinates introduced in [11], which are