the current value of the associated control-sensitive data
structure with its original image to determine whether it
has been modiﬁed via buffer overﬂowing. Current ver-
sion of the DIRA compiler protects only return addresses
and function pointers as they are the most common attack
targets. In particular, the DIRA compiler instruments an
input program as follows:
• At the function prologue, the return address is stored
in the return address buffer. At the function epilogue,
the return address on the stack is compared with the
stored value in the return address buffer. If there is a
mismatch, the return address has been tampered with
and a control-hijacking attack is detected.
• Every time a function pointer is modiﬁed in the pro-
gram, its newest value is stored in an existing or new
entry of the function pointer buffer. This includes the
case when a function pointer is passed as an input ar-
gument into a function. There are also other ways to
modify a function pointer, for example by overwrit-
ing it using memcpy() function. The current version
of the DIRA compiler supports only simplest kind
of function pointer modiﬁcation when it is updated
through a direct assignment. Each entry of the func-
tion pointer buffer contains two ﬁelds: the address of
a function pointer variable and its value. Every time
a function pointer is about to be used in a function
call, its current value is checked against the function
pointer’s stored value. The mismatch of the two val-
ues is the indication of an attack taking place.
Because the return address buffer and the function pointer
buffer are supposed to contain the ground truth, they
should be well protected such that tampering via buffer
overﬂowing is impossible. Otherwise, if an attacker can
overﬂow both a control-sensitive data structure and its as-
sociated duplicate buffer, she can defeat this attack detec-
tion method. Towards this end, both the return address
buffer and the function pointer buffer are sandwiched in-
side a pair of read-only pages. Any attempts to modify
these two buffers via overﬂowing will result in protection
faults. An attacker might try to compromise the system
by guessing the address of such a buffer and writing to it
directly without having to go through the protected pages.
In order to reduce signiﬁcantly the likelihood of a suc-
cessful attack, such a buffer can be allocated at a random
memory location. This technique is not implemented yet
in the current version of DIRA.
In theory, the DIRA compiler can also protect jump
tables in the same way as function pointers. However,
because there have never been any real control-hijacking
attacks that tamper with jump tables, for simplicity we
chose to ignore jump table protection in the current proto-
type.
3.2.
Memory Updates Logging
The purpose of memory updates logging is to make it
possible to trace back incoming packets that are responsi-
ble for the detected attack, and to restore the victim pro-
gram back to the state before the attack packets were re-
ceived. Keeping a copy of a control-sensitive data struc-
ture for attack detection can be seen as a special form of
memory updates logging. To associate corrupted control-
sensitive data structures with incoming packets, for each
incoming packet it is necessary to compute all data vari-
ables that directly or indirectly depend on the incoming
packet. If a corrupted control-sensitive data structure is
data-dependent on an incoming packet, the packet is con-
sidered an attack packet and its contents will be used for
content ﬁltering.
To allow a program to be rolled back to the state it
was in before receiving an attack packet, a snapshot of
the program’s state should be checkpointed every time
it receives a packet.
However, the performance over-
head of this approach is too high to be feasible. Instead,
DIRA uses a ﬁne-grained asynchronous checkpointing ap-
proach, which logs updates only to global or static vari-
ables, and performs these logging operations in an incre-
mental fashion rather than in one batch. When choos-
ing this approach, DIRA assumes that during the inter-
val between when a control-hijacking attack is detected
and when the corresponding attack packet is received, the
program will not be able to undo any ﬁle or network I/O
operations. Therefore, memory updates logging can only
erase attack’s side effects on the memory state of the pro-
gram, but not on its ﬁle system state.
Each record of the memory update log has four ﬁelds:
read_addr, write_addr, len, and data. We will de-
scribe the meaning of each ﬁeld below.
Most if not all control-hijacking attacks use one or mul-
tiple network packets to overrun a buffer in the victim pro-
gram and eventually overwrite some control-sensitive data
structures. Therefore, the content of the corrupted control-
sensitive data structure is derived from the attack packets
through a series of memory copying operations. Memory
image of a program can be changed by either the program
itself or by a library function call made by the program. To
handle the updates of the former type, DIRA logs the ef-
fects of assignment statements of the following form: X =
Y, where X and Y are directly referenced variables, array
references (e.g., a[i]) or de-referenced variables (e.g.,
*(a+1)). The read address ﬁeld contains the address of
the right-hand-side variable of the assignment operation,
in this case Y’s address. The write address ﬁeld holds the
address of the left-hand-side variable being modiﬁed, in
this case X’s address. The length ﬁeld is the size of the
modiﬁed variable, size of X in this case. The data ﬁeld is
not used when DIRA operates in DI-mode. In DIR-mode,
this ﬁeld stores the pre-image of X, the variable being writ-
ten to. It is not always possible to uniquely identify the
read address, for instance if Y is a complex expression
containing a number of variables or a function call. In this
case the read address is set to “-1,” which indicates that
the data origin of this assignment is unknown.
The second source of memory image changes are stan-
dard library calls such as memcpy().
DIRA proxies
several libc functions that can change program’s mem-
ory state. Whenever a function that is proxied is called,
the corresponding proxy function also produces a mem-
ory updates log record that summarizes the side effects of
the function call. The ﬁelds of the memory updates log en-
try are set differently for different proxied functions. We
will discuss all the functions proxied by DIRA below.
Some programs provide an alternative implementation
of standard libc functions. Such functions will be com-
piled by DIRA thus providing necessary support for attack
detection, identiﬁcation and repair as long as these func-
tions are written in standard C. If, however, the new libc
functions are implemented using inline assembly (for per-
formance reasons, for example), then DIRA will not be
able to instrument them.
The above memory update logging algorithm imple-
ments both state checkpointing and data dependency
tracking. Moreover, the DIRA compiler inserts logging
code for each assignment operation of the form speciﬁed
above without performing any sophisticated data or con-
trol ﬂow analysis. As a result, the implementation com-
plexity of the DIRA compiler is greatly simpliﬁed.
To
reduce
memory
updates
logging
overhead,
DIRA tries to avoid unnecessary logging operations.
In its default mode, DIRA does not log updates of the
form X=Y if X is a local variable referenced directly. The
reason behind this is the assumption that local variables
referenced directly are usually used as temp variables (for
example, as loop variables) and do not contain any data
coming from external sources. Although in general this
approach can miss certain dependencies, it turns out that
quite often enough information is logged to identify the
malicious input.
Figure 1 shows the abbreviated source code of a simpli-
ﬁed network service application containing a buffer over-
ﬂow vulnerability. To ensure that omitting local updates
logging is usually harmless, let us consider the logging
operations performed by the program compiled in DIR-
mode and determine that this information is sufﬁcient to
identify the attack packet. Function do_packet() calls
function get_packet(), which receives a packet by call-
ing recv().
This is one of the functions proxied by
DIRA. The corresponding proxy function logs the pre-
image of buf by setting the write_addr ﬁeld to the
value of buf. Then the control ﬂow goes back to function
do_packet(). The assignment of the returned value to
variable last is not logged because last is a local vari-
able referenced directly. Function process_packet()
is called next taking last as its only argument. The as-
signment of buf to packet is not logged either because
packet is also a local variable referenced directly. Next
there is a call to function strcpy() which is also proxied
by DIRA. This function copies some data from packet
into a limited-space buffer name without checking the
length of packet->name, and thus represents an attack
target. The read_addr ﬁeld of the corresponding log
record is set to the address of packet->name. To summa-
rize, the memory update log contains two entries relevant
to the packet being processed. None of the intermediate
assignment operations are logged. Nevertheless, it is still
possible to identify the packet that should be held respon-
sible when an attack is detected. Indeed, variable packet
of function process_packet() contains the same ad-
dress as variable buf of function get_packet(). All in-
termediate assignments transfer the value of the pointer
that points to the buffer containing the attack packet.
Memory updates log contains additional information
when DIRA works in the DIR-mode. This mode requires
storing additional information in the log such as marks
that indicate function boundaries and potential restart
points. We call such records tags. There are several types
of tags. The tag type is stored in the ﬁeld read_addr.
The remaining ﬁelds are used differently for each tag. We
will describe each tag type one by one in Section 3.4.
3.3.
Attack Identiﬁcation
Upon detecting a control-hijacking attack, we assume
that the corrupted control-sensitive data structure is com-
promised by some data that might have been read from the
console by a gets() call or from a network socket by a
recv() call. In these cases, it is important to identify the
source of corruption and take proper measures to prevent
the same compromise from happening again. Of course,
it is also possible that the control-sensitive data structure
was actually overwritten due to a mistake in the program’s
internal logic. In this case, the program should be just ter-
minated since no automatic repairing can stop the same
compromise from recurring.
To identify the data item read from the network or a
ﬁle that is responsible for the corruption of a control-
sensitive data structure, we need to trace back the depen-
dency graph, starting from the corrupted control-sensitive
data structure. This tracing relies on the read address and
write address ﬁelds of the memory updates log entries.
Let MA (modiﬁed address) be the address of a corrupted
control-sensitive data structure, i.e., a return address or a
function pointer. In most cases, it was tampered with as a
result of an unchecked array-to-array copy operation such
as strcpy(). Each of such modiﬁcations leaves a record
in the memory updates log. Therefore, the tracing begins
with the most recent memory updates log entry whose
write address is equal to MA, and uses the read address
ﬁeld of this entry as a key to search the memory updates
log to ﬁnd the most recent log entry whose write address
matches it, etc. This process continues iteratively until
reaching a memory updates log entry whose read address
is set to one of the special values described below, which
means that the data written to the write address of that en-
try comes from an external source. The above trace-back
algorithm is formally described in Figure 2.
To support attack identiﬁcation, the following classes
of
libc
functions
need
to
be
“proxied”:
copy-
ing/concatenation functions such as strcpy(), network
I/O functions such as recv(), ﬁle I/O functions such as
read() (which can also read data from network), and
format string functions such as sprintf(). The com-
plete list of functions proxied by DIRA including those
required for post-attack recovery only is presented in Ta-
ble 2.
Copying/concatenation Functions. Each proxy func-
tion from this group generates a log record. For instance,
a log record for a strcpy(a, b) function call contains
the address of b in its read_addr ﬁeld, the address of
a in its write_addr ﬁeld, strlen(b) in its len ﬁeld.
The data ﬁeld is set to NULL as no data is required for
the traceback algorithm. After generating a log record the
proxy function calls the corresponding libc function and
returns its result.
Network I/O and File I/O Functions. These proxy
functions also generate one log record each time they are
called. The read_addr ﬁeld of these records is set to a
special value indicating the external source of the data be-
ing logged. In addition, they make use of data ﬁeld of the
log record. This ﬁeld stores the post-image of the mem-
ory buffer, that is, the data that was actually read from the
network or a ﬁle. This data is the malicious network or
ﬁle data that can lead to a buffer overﬂow attack. It is pre-
sented as the result of the traceback algorithm if a buffer
overﬂow attack is detected. This data can be sent to a
front-end intrusion-detection system, which can then use
it to prevent the same attack from reaching internal hosts
again. This automatic attack packets extraction capabil-
ity protects an enterprise from worm-like attacks, where
attacking or compromised hosts tend to send out attack
packets that are largely the same.
void do_packet() {
packet_t *get_packet() {
void process_packet(char *buf) {
packet_t *last;
char *buf=malloc(PACKSZ);
char name[10];
last=get_packet();
recv(sock, buf, PACKSZ, 0);
packet_t *packet;
process_packet(last);
return buf;
packet=(packet_t*)buf;
}
}
strcpy(name, packet->name);
}
Figure 1. An example of a program vulnerable to a buffer overﬂow attack.
cur_addr=MA;
while (more_log_entries && cur_addr̸=0)
ent=get_prev_log_entry();
if ent.write_addr ≤cur_addr && ent.write_addr+ent.len>cur_addr
then cur_addr=ent.read_addr+(cur_addr-ent.write_addr);
end;
if (cur_addr̸=0)
{ printf(“Can’t ﬁnd source of attack\n”); exit(0); }
/* ent is the required log entry */
Figure 2. The traceback algorithm used to locate the source of a buffer overﬂow attack based on
a corrupted control-sensitive data structure.
3.4.
Attack Repair
Although DIRA’s attack detection mechanism can suc-
cessfully prevent a control-hijacking attack from taking
over a victim application, the application itself may need
to be terminated as a result of such an attack. This “ter-
minate and restart” approach to recover from a control-
hijacking attack is not always desirable. Instead, it is bet-
ter if the victim application can simply erase the effects
of the attack packets as if these packets never happened.
There are two issues involved in this program state repair
process: (1) From which state should a victim program
restart? (2) How to restart a victim program without spe-
cial OS support?
Because DIRA logs only updates to global and array-
like variables, it can only restart a program from the en-
try point of a function. The proper function f_restart
turns out to be the least common ancestor of the function
in which the attack was detected and the function in which
the malicious external data was read in. We will call the
function called from f_restart, which eventually led to
malicious data read operation f_read and the function
that eventually led to the attack f_attack (both can be
the same function or even f_restart). The reason be-
hind choosing f_restart the way we described it above
is the fact that the stack frame of the dynamic parent of
f_restart has not changed between the point when the
malicious data was read in and the point when an attack
was detected whereas the stack frame of any other func-
tion called after f_restart as well as f_restart itself
might have changed between the two moments. Since we
do not track any local variable updates we will not be
able to bring the program back to a consistent state older
than the state in which it was right before f_restart was
called. There is an exception from this rule, however. If
there are no local variable updates in f_restart between
the point after f_read returns and before f_attack be-
gins, we can safely restart the execution from f_read in-
stead of f_restart.
Sometimes, it is still possible that the whole pro-
gram will need to be restarted. Indeed, this happens if
f_restart turns out to be function main() and there are
some local variable updates made between when f_read
returns and f_attack begins. While evaluating DIRA we
have encountered one such program. One way to avoid
this problem is to track all variable updates including lo-
cal ones, but that may signiﬁcantly increase the run-time
overhead. If the repair algorithm ﬁnds that the program
needs to be restarted from the beginning, the program is
simply terminated and restarted afterwards.
Identifying the function that reads in the malicious ex-
ternal data is a part of attack identiﬁcation process and
therefore does not incur any extra run-time overhead while
the program is running normally. Figure 3 illustrates how
the restart point is chosen with a typical buffer overﬂow
attack scenario. In this case, either f2() or f1() can be
chosen as the new restart point. The decision depends on
whether there are any local variable updates in f1() after