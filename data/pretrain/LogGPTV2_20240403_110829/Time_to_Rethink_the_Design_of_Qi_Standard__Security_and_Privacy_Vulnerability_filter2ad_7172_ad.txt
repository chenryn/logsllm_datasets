time-frequency features for each activity segment.
Feature Selection & Classification. To identify each activity,
we apply a hierarchical classification scheme. Specifically, we first
perform activity category classification to identify the type of the
activity (i.e., calling, messaging, or the screen turned on by the
user manually). Then we conduct app classification to identify the
specific involved app if it’s a calling or messaging activity. To mini-
mize the adversary’s attacking efforts and make our work devel-
opable/exploitable in the real world, we use a standard classifier
to differentiate these activities. We have tried Linear Discriminant
Analysis (LDA), Random Forest, Support Vector Machine (SVM),
and a 2-dense-layer Deep Neural Network (DNN) with 50 neurons
in each layer. We find that Random Forest outperforms other classi-
fiers. Additionally, we observe that not all of the 128 time-frequency
features are unique enough to make different activities distinguish-
able from each other. To further improve the performance, we first
train the random forest classifier on the complete dataset with 128
features, and calculate the overall contribution of each feature to
the decision made by the classifier. The prediction function of a
forest is the average of the prediction of its child trees, which can
be decomposed into a sum of each feature [21]:
J
j=1
K
( 1
k =1
J
J
j=1
F(x) =
1
J
cjf ull
+
contrib(x, k)),
(3)
where F(x) is the predict outcome for the instance x of the random
forest classifier and J is the number of decision trees. cjf ull
is the
value at the root of the node for the jth decision tree, which is
determined during the training phase. K is the number of features
and contrib(x, k) is the contribution of the feature k in the instance
x. We only preserve a subset of features that have relatively larger
contributions than the average of all the features. By applying this
feature selection method, the number of features being used is
reduced to around 30-40. These selected features through training
are used in the following test phase.
7.3 Experimental Methodology
Experimental Setup. The experimental setup is similar to the
setup shown in Figure 9. A smartphone is placed on the charger
(i.e., an EVALSTWBC-EP board [31]), and the adversarial coil is
stuck underneath the table and connected to a Tektronix TBS2102
digital oscilloscope. The table has a thickness of 3.2 cm, and the
horizontal distance between the charger and the adversarial coil
is around 2 cm. In the experiment, we use 3 different commodity
smartphones including a Samsung Galaxy Note 5, a Samsung Galaxy
S7, and a LG G7.
Data Collection. While the smartphone is being charged, we
manually send messages to it from 10 commonly used social apps
(i.e., SMS, WhatsApp, Viber, WeChat, QQ, Skype, Tumblr, Twitter,
Instagram, and Messenger). 50 messages are send to each app on
each phone. We also deliver phone calls to each smartphone using 4
common calling apps (i.e., cellular phone call, WhatsApp, Skype and
WeChat), and 50 phone calls are made to each app on each phone.
Additionally, we manually turn on the screen of each smartphone
50 times by pressing the power button, which indicates the user
manually operates the phone. In total, we collect 2250 activities
Table 2: Activity classification performance among 3 types
of activities.
10-fold cross-validation
Train & Test (2 : 1)
Note 5
S7
G7
Accuracy
95.00%
98.00%
95.33%
Precision
95.85%
97.33%
96.67%
Recall Accuracy
95.00%
95.83%
97.33%
98.00%
96.00%
96.67%
Precision
92.59%
98.33%
96.29%
Recall
95.23%
97.78%
96.49%
Table 3: Phone call classification performance of 4 com-
monly used calling apps.
10-fold cross-validation
Accuracy
90.00 %
98.00%
95.20%
Precision
89.38%
97.65%
93.95%
Recall
89.37 %
97.99%
94.00%
Note 5
S7
G7
Train & Test (2 : 1)
Accuracy
96.22%
98.78%
95.18%
Precision
96.77%
98.81%
95.65%
Recall
95.56%
98.53%
95.65%
T Pk
T Pk
T Pk +F Nk
from these phones and the whole experiment is conducted over a
two-month time period. During the experiment, the battery levels
of these phones were between 5% to 100% without manual controls.
Evaluation Method & Metrics. We use both 10-fold cross-
validation and training & testing for classification. Specifically,
10-fold cross-validation divides the whole dataset randomly into
10 disjoint subsets, using 9 subsets for training and the retaining
1 subset for testing. For training & testing, we divide the whole
dataset into a training set and a testing set, with a size ratio of 2:1.
In addition, we use Accuracy, Precision and Recall to evaluate our
attack. Specifically, the accuracy is defined as the percentage of the
correctly identified activities among all the triggered activities. The
precision of identifying the class k is defined as Pk =
,
T Pk +F Pk
where T Pk and F Pk are the true positive rate and the false positive
rate for the class k, respectively. The recall of identifying the class k
is defined as Rk =
, where F Nk is the false negative rate
for the class k.
7.4 Attack Performance
Activity Category Classification. As shown in Table 2, we ob-
serve that our attack is able to distinguish different types of activ-
ities with a substantial degree of accuracy. For the 10-fold cross-
validation setup, the accuracy for all smartphones reach at least
95%, in which the S7 achieves the best accuracy of 97.33% preci-
sion/recall. Although there is no app being triggered for the class
“screen turned on manually by user”, our attack can still distinguish
this activity. As a baseline, a random guess attack could only achieve
33.3% which is significantly worse than our attack.
Calling App Classification. As shown in Table 3, the reported
classification accuracy, precision, and recall for all three phone
models achieve more than 89% in both the 10-fold cross-validation
and train & test models. The attack on the Samsung Galaxy S7
phone achieves the best accuracy with over 98.00% and 98.78% for
the 10-fold cross-validation and train & test models, respectively.
These results are much higher than a random guess attack (25% in
distinguishing 4 calling apps), leading to the conclusion that the pri-
vacy threat of our attack is indeed serious. The results demonstrate
the adversary’s ability to detect and identify these calling activities
by merely relying on the inductive adversarial coil voltage.
Messaging App Classification. As shown in Table 4, even if
these types of activities are the same, we still achieve a very high
performance for the Samsung S7 and LG G7 phones with the ac-
curacy over 84% and 89%, and precision/recall over 86% and 90%,
925Security and Privacy Vulnerability Analysis of Qi Wireless Charging
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 4: Message classification performance of 10 commonly
used messaging apps.
10-fold cross-validation
Train & Test (2 : 1)
Accuracy
82.50%
86.81%
90.48%
Precision
82.17%
86.27%
90.83%
Recall Accuracy
81.94%
80.67%
84.57%
83.35%
90.83%
89.80%
Precision
84.05%
86.34%
90.06%
Recall
83.63%
86.34%
90.06%
Note 5
S7
G7
respectively, in both 10-fold cross-validation and train & test mod-
els. For the Note 5, we also have a relatively good result of over 80%
accuracy, which is still much higher than a random guess (i.e., 10%
in distinguishing 10 messaging apps). These experimental results
showed that all these activities triggered by different apps exhibit
unique and distinguishable patterns in the adversarial coil voltage
and its derived Qi control error sequence, which can put people’s
privacy at risk while recharging their smartphones wirelessly.
8 DEFENSE STRATEGIES
Defense Against Hijacking Attack. When there is an alternat-
ing current flowing in the adversarial coil, the primary coil volt-
age will exhibit a different pattern due to the generated inductive
power. Therefore, it’s feasible to defend against the hijacking attack
through detecting this external energy and swiftly terminate the
charging process or reject the incoming messages once it’s detected.
Figure 15 (a) and 15 (b) show the power spectrogram of the pri-
mary coil voltage with and without malicious message injection,
respectively. We can observe from Figure 15(a) that only the fre-
quency response of the primary coil voltage is displayed, while
the frequency response of the 80kHz sine wave, which serves as
the carrier wave of the injected Qi messages in our implementa-
tion, is revealed on Figure 15(b). We thus propose the following
sliding-window based automatic anomaly detection mechanism:
the transmitter shall calculate the FFT of the primary coil voltage in
each sliding window and use a peak detection algorithm to detect
the number of peaks in the FFT spectrum. If there’s an extra peak
detected in addition to the operating frequency, it’s highly likely
there’s an ongoing hijacking attack. To prove the feasibility of such
a defense mechanism, we use the peak detection algorithm pro-
vided by the Scipy toolkit [45] and collect the primary coil voltage
traces under two different scenarios: the first is where the smart-
phone is charging at a normal state while the other is under an
overcharging attack, with the frequency of the adversarial signal
set as 80kHz. Although we choose 80kHz as the carrier frequency
in our implementation, there would always be an extra peak on
the FFT spectrum even if the adversary uses other frequencies. We
set the sliding window size as 20ms, with each scenario having a
total of 32 seconds trace with 1600 samples. The anomaly-detection
algorithm reaches a 100% true positive rate and a 0% false positive
rate. This promising result demonstrate the effectiveness of the pro-
posed mechanism, which can be used as a reference in the future
design of Qi standard.
If the adversary sets the frequency exactly the same as the oper-
ating frequency of the primary coil, a legitimate charging profile
containing a FFT spectrum collected from normal charging pro-
cesses, would be created. The spectrum with message injection
can thus be detected using outlier detection algorithms, such as
1-class SVM [40], isolation forest [26], and local outlier factor [36].
Defense Against Eavesdropping Attack. For the eavesdropping
(a) Normal charging state
(b) Under hijacking attack
Figure 15: Spectrogram of the primary coil voltage at normal
charging state and under hijacking attack.
attack, adding noises to the primary coil voltage would directly
introduce additional distortion on the inductive voltage of a nearby
adversarial coil, making its correlation between the smartphone
activities tampered, further downgrade the classification accuracy.
To validate our thoughts, we collect 500 traces of the primary coil
voltage while the smartphone (i.e., Note 5) is triggered by 10 mes-
sage apps (50 times each) in our eavesdropping attack setting. We
further perform the same classification methods as aforementioned
and achieve a 10-fold cross-validation accuracy of 91.98% serving
as the baseline accuracy. We then add random noises to parts of the
collected primary coil voltage traces where there are no modulated
communication packets. Specifically, for each gap between two
adjacent packets, we add a Gaussian white noise with a random
mean and standard deviation. This approach cause the 10-fold cross-
validation accuracy to drop from 91.98% to 44.37%, indicating that
adding random noises can indeed thwart eavesdropping attack.
In our current approach, we add noises to the collected voltage
traces from the software side. We would also like to try some ex-
isting hardware based approaches, such as masking the voltage
signal via a randomizer [3] and the DES encryption algorithm [39].
Dynamically switching the frequency and amplitude of the coil
voltage [52] and duplication methods [14] may also be helpful on
perturbing the integrity of the collected voltage traces. This would
be considered for our future work.
Other Potential Approaches. In addition to the anomaly detec-
tion algorithm, another possible approach to defend against the
hijacking attack is to detect the in-correlation between the con-
trol error message and the sudden rise of primary coil voltage.
The adversarial alternating current will cause a sudden rise on
the amplitude of the primary coil voltage, however, the transmit-
ter will not receive a corresponding control error message at that
moment. Thus, this conflict could be used for anomaly detection.