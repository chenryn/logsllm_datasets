### Entanglement Generation Protocol (EGP)

#### E.3 Entanglement Generation Protocol

The Entanglement Generation Protocol (EGP) is responsible for generating the required entanglement between two end nodes or declaring a failure if it cannot be achieved.

#### E.3.1 Entanglement Generation Scheduler

The EGP scheduler manages the creation of entangled pairs and handles the following functions:

- **GET_QUEUE(creq)**: This function deterministically assigns a CREATE request `creq` to a specific queue `Qj`. The assignment may depend on request details such as `tmax`, `Fmin`, purpose ID, and priority.
- **NEXT**: This function selects the next request from the local set of queues `Q` to serve. It returns:
  - **Flag**: Set to true when a request is ready to be served.
  - **Absolute queue ID**: The ID and corresponding request details of the request to be served.
  - **Parameters**: Parameters to use in the MHP based on the number and type of outstanding requests.
  - **Communication and storage qubits**: Determined in cooperation with the Quantum Memory Manager (QMM).

#### E.3.2 EGP Sequence Diagrams

- **Figure 29**: Timeline of multiplexing photon emission in the MHP. Multiple GEN messages are sent one by one, and any reply (ERR(QM), ERR(NCO), or REPLY) is possible.
- **Figure 30**: 
  - **Left**: Timeline of request expiration within EGP.
  - **Right**: Timeline of memory advertisement requests within EGP.

#### E.3.3 EGP Packet Formats

- **Figure 31**: CREATE message format. Fields include Remote Node ID, Minimum Fidelity, Purpose ID, Max Time, Number, Priority, T (type of request), A (atomic flag), and C (consecutive flag).
- **Figure 32**: EXPIRE message format. Fields include Origin ID, Create ID, SEQ, and (QID, QSEQ) representing the absolute queue ID.
- **Figure 33**: ACK message format. Fields include (QID, QSEQ) and SEQ.
- **Figure 34**: REQ(E)/ACK(E) message format for EGP memory requests. Fields include Type, CMS (number of available communication qubits), and STRG (number of available storage qubits).
- **Figure 35**: POLLEGP message format from EGP to MHP. Fields include GEN (emit photon flag), PSEQ (pulse sequence identifier), and parameters.
- **Figure 36**: Message format from MHP to EGP. Fields include OT (measurement outcome), ERR (error codes), and (QID, QSEQ).
- **Figure 37**: OK message format for create and keep requests. Fields include Type, Create ID, LQID (Logical Qubit ID), D (directionality flag), Sequence Number, Purpose ID, Remote Node ID, Goodness, and Goodness Time.
- **Figure 38**: OK message format for measure directly requests. Fields include Type, Create ID, M (measurement outcome), Basis, and other fields explained in Figure 37.
- **Figure 39**: ERR message format containing errors from EGP. Fields include Type, ERR (error that occurred), S (specifies whether a range of sequence numbers should be expired), Sequence Number Low/High, and Origin Node ID.

#### Protocol 2: EGP - Node A (B analogous, exchanging A and B)

**Definition of Functions and Variables:**
- **Node ID**: The ID of the peer to create entanglement with.
- **n**: The number of entangled pairs to create.
- **Fmin**: The minimum acceptable fidelity for the generated pairs.
- **tmax**: The maximum time the higher layer is willing to wait for entanglement.
- **Purpose ID**: Port/application ID for forwarding OK messages to the appropriate application.
- **priority**: The priority of the request.
- **seqexpected**: The expected sequence number from the midpoint, initially set to 1.
- **j = GET_QUEUE(cr)**: Call to the scheduler to obtain the queue ID `Qj`.
- **(ij, ok) = ADD(j, creq)**: Call to add the create request `cr` to `Qj`. `ij` is the unique ID within `Qj`, and `ok` is the status code (success, timeout, or reject).
- **ERR_NOTIME**: Error issued upon receiving OK=timeout.
- **ERR_REJECT**: Error issued upon receiving OK=reject.
- **Trigger pair**: Equivalent to the POLLEGP call within the MHP protocol.
- **(flag, (j, ij), PSEQ, params) = NEXT()**: Call to the scheduler to get information for the next entanglement generation attempt.
- **proto_err**: Status of the entanglement attempt, encoding mhperr if an error occurred.
- **create_time**: Timestamp of when the entanglement was generated.
- **Fest**: Estimate of the fidelity of the entangled qubits.
- **logical_id**: Storage qubit ID where the entangled qubit is stored.
- **tGoodness**: Timestamp of when `Fest` was recorded.
- **tCreate**: Timestamp of when the entanglement was created.
- **k**: The number of pairs left to generate for the request.

**Protocol Steps:**

1. **Adding to Queue:**
   - (a) Determine the queue for the request: `j = GET_QUEUE(cr)`.
   - (b) Add the request to the queue: `(ij, ok) = ADD(j, cr)`.
   - (c) If `ok = timeout`, issue `ERR_NOTIME` and stop.
   - (d) If `ok = reject`, issue `ERR_REJECTED` and stop.
   - (e) Otherwise, the request has been added to the Distributed Queue.

2. **Trigger Pair (polled by MHP):**
   - (a) Ask the scheduler for the next request: `NEXT = (flag, (j, ij) ≡ req, param, PSEQ)`.
   - (b) If there is a generation waiting:
     - (i) Construct the response for MHP: `POLLEGP() = (flag, (j, ij), PSEQ, params)`.
     - (ii) Provide the response to the MHP.
   - (c) If no generations to perform: `POLLEGP() = (flag=False, aID, local=null, PSEQ=null, params=null)`.

3. **Handle Reply (message from MHP):**
   - (a) Retrieve the message from MHP including result `r`, `seqMHP`, absolute queue ID `(j, ij)`, and protocol.
   - (b) If the absolute queue ID is not found locally, handle the error:
     - (i) Free the reserved communication/storage qubit in the QMM.
     - (ii) Update `seqexpected` with `seqMHP + 1` and stop handling the reply.
   - (c) If the absolute queue ID is found:
     - (i) If `proto_err` is not OK, update `seqexpected` and stop.
     - (ii) If `r = 0`, no entanglement was produced; stop handling the reply.
     - (iii) Process `seqMHP`:
       - (A) If `seqMHP` is larger than `seqexpected`, partially expire the request.
       - (B) If `seqMHP` is smaller, ignore the reply.
       - (C) Update `seqexpected` (increment current one modulo 2^16).
     - (iv) If `r = 2` and we are the origin, apply correction information to transform state `|Ψ−⟩` to `|Ψ+⟩`. If we are the peer, suspend subsequent generation attempts.
     - (v) Look up the queue item `(j, ij)`:
       - (A) If `create_time + tmax > current time` or the request is not stored, issue `ERR_TIMEOUT` and remove the item from the queue.
       - (B) Get `Fest` from the Fidelity Estimation Unit.
       - (C) Issue OK with Entanglement ID: `(A, B, seqMHP)`, `logical_id`, `Fest`, and `tGoodness = tCreate = now`.
       - (D) If `k = 1`, remove the item from the queue.
       - (E) If `k > 2`, decrement `k` on the queue item.

This document provides a comprehensive overview of the EGP, including its scheduler, sequence diagrams, and packet formats, ensuring clear and professional communication.