0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Header
QID
QSEQ
(reserved)
Figure 27: GEN packet format (used in MHP) sent by end stations to heralding station (midpoint). The pair (QID,
QSEQ) represents the absolute queue ID, in other words they map to (j, ij)—see Section E.1.1.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Header
OT
SEQ
QID
QSEQ
QIDP
QSEQP
(reserved)
Figure 28: REPLY/ERR packet format (used in MHP) for replies by midpoint with no error. OT: outcome/error
reported by midpoint; SEQ: sequence number; QIDP: QID Peer; QSEQP: QSEQ Peer; QID and QSEQ are defined the
same as in for GEN message—see Figure 27. Error codes include (001: QUEUE_MISMATCH: 010: TIME_MISMATCH,
100: NO_MESSAGE_OTHER, (refer to Protocol E.2 for the above error description).
E.3 Entanglement Generation Protocol
The role of the Entanglement Generation Protocol (EGP) is to produce the required entanglement between two end nodes or
otherwise declare failure.
E.3.1 Entanglement Generation Scheduler. We now proceed with the description of the scheduler—refer to Protocol E.3.1 for
details. The EGP scheduler fulfills the following arbitrage functions, where we remark that for CREATE requests that demand
multiple EPR pairs, only one request is added to the queue, and hence NEXT (function to select the next request from the local
set of queues, see below) will return multiple pairs to be produced for the same request when called successively.
• GET_QUEUE(creq): Once a request has been submitted, GET_QUEUE deterministically chooses which queue Qj to
assign the CREATE request creq to. This may depend on the details of the request, such as for example tmax, or Fmin as
well as the purpose ID and priority.
• NEXT: Selects the next request from the local set of queues Q to serve, if any. Specifically, NEXT will determine:
– Flag, set to true when a request is ready to be served;
– Absolute queue ID (and corresponding request details) of request to be served;
– Parameters to use in the MHP depending on the number of type of outstanding requests;
– Communication and storage qubits, determined in cooperation with QMM.
51
Protocol 2 EGP - Node A (B analogous exchanging A and B)
Dahlberg, Skrzypczyk, et al.
Definition of functions and variables.
• Node ID: the ID of the peer we want to create entanglement with;
• n: the number of entangled pairs we wish to create;
• Fmin: the minimum acceptable fidelity required for the generated pairs;
• tmax: the maximum amount of time the higher layer is willing to wait for the entanglement to be created
• Purpose ID: port/application ID the requested this entanglement—used for forwarding OK messages to the appropriate
application;
• priority: The priority of the request;
• seqexpected: The expected sequence number from the midpoint. Initially set to 1;
• j =GET_QUEUE(cr ): The call to the scheduler to obtain the queue ID of Qj where the request should be placed in the
distributed queue.
• (ij , ok)=ADD(j, creq): The call to the distributed queue to add the create request cr to Qj. ij is the unique ID of the request
within Qj and ok is a status code of performing the ADD to the distributed queue. Can take the values success (item
added), timeout (communication timeout with peer while adding), or reject (the peer rejected adding the item to the
queue);
• ERR_NOTIME: Error issued to higher layers by the EGP upon receiving OK=timeout from adding item to queue;
• ERR_REJECT: Error issued to higher layers by the EGP upon receiving OK=reject from adding item to queue;
• Trigger pair: equivalent to the POLLEGP call within the MHP protocol outline;
• (f laд,(j, ij), PSEQ, params) =NEXT(): The call to the scheduler to obtain information for the next entanglement gen-
eration attempt where flag=True/False indicates whether entanglement should be attempted (same in MHP outline),
(j, ij) is the absolute queue ID of the create request being served, PSEQ is a pulse sequence identifier encoding the
communication and storage qubit information to use for entanglement attempts, and params encodes the parameters to
use for entanglement attempts (same as params in MHP outline);
• proto_err: Status of the attempt at entanglement, encodes the mhperr from the MHP outline if an error occurred, 0 if no
errors happened;
• create_time: timestamp of when the entanglement was generated;
• Fest: the goodness passed in the frame, the estimate of the fidelity of the entangled qubits;
• logical_id: The storage qubit ID where the entangled qubit is stored, for use by higher layers;
• tGoodness - A timestamp of when Fest was record.
• tCreate - A timestamp of when the entanglement was created.
• k: the number of pairs left to generate for the request.
(1) Adding to Queue:
(a) Ask scheduler which queue this request should be added to: j = GET_QUEUE(cr ).
(b) Try to add request to the queue using the DQP: (ij , ok) = ADD(j, cr ).
(c) If ok = timeout error, issue ERR_NOTIME and stop.
(d) If ok = reject error, issue ERR_REJECTED and stop.
(e) Otherwise the request has been added to the Distributed Queue.
(2) Trigger pair (polled by MHP):
(a) Ask the scheduler whether entanglement should be made and for which request: NEXT = (flag, (j,ij) ≡ req, param,
PSEQ). For this end, the scheduler will employ its priority policy, as well as perform flow control depending on
whether B is likely to produce entanglement.
(b) If there is a generation waiting to be satisfied:
(i) Construct response for MHP POLLEGP()=(flag, (j,ij), PSEQ, params).
(ii) Provide the response to the MHP.
(c) Otherwise if there are no generations to perform provide POLLEGP()=(flag=False, aID,local=null, PSEQ=null,
params=null).
52
A Link Layer Protocol for Quantum Networks
Protocol 2 (cont.) EGP - Node A (B analogous exchanging A and B)
(3) Handle reply (message from MHP):
(a) Retrieve message from MHP including: result of generation r ∈ {0, 1, 2}, seqMHP, absolute queue id (j, ij), and protocol
(b) If the specified absolute queue ID is not found locally then the request may have timed out or expired:
error flag proto_err.
(i) Free the reserved communication/storage qubit in the Quantum Memory Manager.
(ii) Update seqexpected with seqMHP+1 and stop handling reply.
(c) Otherwise there is an absolute queue ID included in the response that is associated with an active request:
(i) If proto_err is not OK, a non quantum error occurred and no entanglement was produced. Update expected sequence
(ii) If r = 0 we failed to produce entanglement, stop handling reply.
(iii) Process seqMHP:
(A) If the seqMHP is larger than the expected sequence number, (partially) ERR_EXPIRE the request to higher layer
(B) Else. if seqMHP is smaller than the expected sequence number, ignore reply. Stop handling reply.
(C) Else, update next expected seqMHP sequence number (increment current one modulo 216).
(iv) A pair is established. If r = 2 and we are the origin of this request, apply correction information to transform state
|Ψ−⟩ to state |Ψ+⟩, if we are the peer then we instruct the scheduler to suspend subsequent generation attempts
until we believe the request originator has completed correction.
number with seqMHP and stop handling reply.
and send EXPIRE message to peer. Stop handling reply.
(v) Look up queue item (j, ij):
(A) If create_time + tmax > current time or the request is not stored locally anymore, issue ERR_TIMEOUT to higher
layer and remove item from queue. Stop handling reply.
(B) Get fidelity estimate Fest from Fidelity Estimation Unit.
(C) Issue OK with Entanglement ID: (A, B, seqMHP), logical_id, Goodness Fest, and tGoodness = tCreate = now.
(D) If k = 1, i.e. this was the last pair to be produced for this request, remove item from queue.
(E) If k > 2, decrement k on queue item.
E.3.2 EGP Sequence Diagrams. We proceed with the introduction of all message passing sequence diagrams for the EGP.
Figure 29 presents a sequence diagram for the EGP operation when performing emission multiplexing. In some cases (such
as the CM use case) it is not necessary to wait for the REPLY message from the midpoint before attempting entanglement
generation again if one simply desires to generate correlated bit streams.
Figure 30 shows a sequence diagram detailing the message flow should station A obtain information that it is behind as well
as a timeline of the message exchange when EGP processes at both nodes exchange available quantum memory information.
Sharing this information allows both nodes to know whether there are available resources in order to proceed with satisfying
an entanglement request. In the absence of resources of either peer there is no use in photon emission. Simply, both nodes
must be able to emit photons for the protocol to operate properly.
Imperfect message transmission may cause any of the GEN, REPLY, EXPIRE, REQ(E), and ACK messages to become lost
or corrupted in transit between nodes. Depending on which messages are lost in the protocol, different actions are taken to
prevent deadlock. A lost EXPIRE or corresponding ACK results in a retransmission of the EXPIRE to ensure that OK messages
are properly revoked at the peer node. Loss of a REQ(E) message or its corresponding ACK results in a retransmission of the
REQ(E) to make sure that both nodes have up-to-date information of available resources.
Losing a GEN message is handled by the midpoint heralding station when only one GEN message arrives from an end node.
In this case the REPLY message containing NO_CLASSICAL_OTHER (see Protocol E.2) is issued to alert the nodes of the
failure. In this case no attempt at entanglement is made and the sequence number at the midpoint remains the same.
Losing a REPLY message from the midpoint that contains an outcome of 0 has no impact on A or B as seqexpected is only
updated when a successful attempt at entanglement occurs. When a REPLY message containing an outcome of 1 or 2 (for
successful entanglement) is lost, the end node(s) that lost the message will continue attempting entanglement generation in
subsequent polls by the MHP as there are outstanding pairs to be generated for the request. Upon successful receipt of any
53
message from the midpoint (REPLY), the included SEQ will be ahead of the receiving node(s) seqexpected and the loss will be
detected. The detecting node will then transmit an EXPIRE message to its peer containing the old seqexpected that did not agree
with the SEQ received from the midpoint along with its new seqexpected, so that any OK messages containing the missing set of
sequence numbers are revoked at the peer.
Dahlberg, Skrzypczyk, et al.
Station A
Heralding Station M
Station B
GEN,p
GEN,p
...
GEN,p
GEN,p
...
ERR(QM)/ERR(NCO)/REPLY
ERR(QM)/ERR(NCO)/REPLY
...
ERR(QM)/ERR(NCO)/REPLY
ERR(QM)/ERR(NCO)/REPLY
...
Figure 29: Timeline of multiplexing photon emission in the MHP: multiple GEN,p messages are sent one by one for
which any reply messages (ERR(QM), ERR(NCO) or REPLY) is possible. Compare this with the sequence diagram
presented in Figure 26 and Figure 25 for the MHP.
Station A
Station B
Station A
Station B
EXPIRE
ACK
REQ(E)
ACK(E)
Figure 30: (Left) Timeline of request expiration within EGP. Definitions of EXPIRE and ACK message are given in
Figure 32 and Figure 33, respectively. (Right) Timeline of memory advertisement requests within EGP. Definition
of REQ(E) and ACK(E) message is given in Figure 34.
E.3.3 EGP Packet Formats. Finally, we present the definitions of all messages being used by the EGP. Figure 35 describes the
information passed from the EGP to the MHP during each periodic cycle, while Figure 36 shows the packet format for replies
from the physical layer MHP to the EGP. Figure 32 and Figure 33, define EXPIRE and ACK messages, respectively, exchanged
in entanglement request expiration sequence diagram described in Figure 30. Figure 34 shows the REQ(E) and ACK(E) packet
formats exchanged by memory advertisement requests made by the EGP sequence diagram described in Figure 30.Figure 37
and Figure 38 present the format of OK messages passed from the EGP to higher layers, in case of create and keep request and
measure directly request, respectively.
54
A Link Layer Protocol for Quantum Networks
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Remote Node ID
Minimum Fidelity
Purpose ID
Max Time
Number
Priority T A C
reserved
Figure 31: Packet format for CREATE message to EGP. Explanation of the message fields—Remote Node ID: Used
if the node is directly connected to multiple nodes. Indicates which node to generate entanglement with; Mini-
mum Fidelity—The desired minimum fidelity, between 0 and 1, of the generated entangled pair; Max Time—The
maximum time in seconds the higher layer is willing to wait for the request to be fulfilled; Purpose ID—Allows
the higher layer to tag the request for a specific purpose; Number—The number of entangled pairs to generate;
Priority—Can be used to indicate if this request is of high priority and should ideally be fulfilled early; T—the
type of request, Either create and keep (K) or measure directly (M), where K stores the generated entanglement in
memory and M measures the entanglement directly; A—atomic flag, indicates that the request should be satisfied
as a whole, i.e. that all entangled pairs are available in memory at the same time; C—consecutive flag, indicates
that the entangled pairs of the request should be generated close in time.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Header
QID
QSEQ
(reserved)
Origin ID
Create ID
SEQ
Figure 32: Packet format for EXPIRE message. Explanation of the message fields—Origin ID: ID of the node the
request originated from; Create ID: creation ID of the request. SEQ: up-to-date expected MHP sequence number
at the node the EXPIRE originates from. Recall that (QID, QSEQ) represent the absolute queue ID.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Header
SEQ
QID
QSEQ
(reserved)
(reserved)
Figure 33: Packet format for ACK message. Recall that (QID, QSEQ) is the absolute queue ID and SEQ is the
acknowledger’s up-to-date expected MHP sequence number (the same as in the case of EXPIRE message, see
Figure 32).
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
Header
e
p
y
T
S STRG
M
C
(reserved)
Figure 34: REQ(E)/ACK(E) Packet format for EGP memory requests. Explanation of the message fields—Type:
message type (0: REQ(E), 1: ACK); CMS: the number of available communication qubits, STRG: the number of
available storage qubits.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
Header
N QID
E
G
QSEQ
PSEQ
(reserved)
Parameters
CRC
Figure 35: Packet format of POLLEGP messages sent from EGP to MHP. Explanation of the message fields—GEN:
emit photon flag; PSEQ: pulse sequence identifier which instructs the underlying quantum communication device
of the parameters to use when emitting the photon. See figure 5.
55
Dahlberg, Skrzypczyk, et al.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Header
T
O
SEQ
(rsvd)
QID
QSEQ
ERR QIDP
QSEQP
(reserved)
CRC
Figure 36: Packet format of messages from MHP to EGP. Explanation of the message fields—OT: measurement
outcome (the same field as in REPLY message define in Figure 28). Error codes in ERR field encode the errors
described in the MHP protocol (refer to Protocol E.2). See figure 5.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Type
Create ID
Sequence Number
LQID D reserved
Purpose ID
Remote Node ID
Goodness
Goodness Time
Figure 37: Packet format for OK message corresponding to a create and keep request. Explanation of the message
fields—Type: Indicates that this is a create and keep OK; Create ID: The same as the Create ID returned to the
requester; LQID: Logical Qubit ID where the entanglement is stored; D: Directionality flag indicating the source
of the request; Sequence Number: A sequence number for identifying the entangled pair; Purpose ID: The purpose
ID of the request; Remove Node ID: Used if connected to multiple nodes; Goodness: An estimate of the fidelity of
the generated pair; Goodness Time: Time of the goodness estimate. See figure 5.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Type
Create ID
MBasis D reserved
Sequence Number
Purpose ID
Remote Node ID
Goodness
(reserved)
Figure 38: Packet format for OK message corresponding to a measure directly request. Explanation of the message
fields—Type: Indicates this is an OK for a measure direclty request; Create ID: The same Create ID given to the
requester; M: Outcome of the measurement performed on the entangled pair; Basis: Which basis the entangled
pair was measured in, used if the basis is random. The remainder of the fields are explained in Figure 37. See
figure 5.
Type
Create ID
ERR S
reserved
Sequence Number Low
Sequence Number High
Origin Node ID
Figure 39: Packet format for ERR messages containing errors from EGP. Explanation of the message fields—Type:
Indicates this is an ERR message; ERR: The error that occurred in the EGP, may be any of the errors described
in Section E.3; S: Used by ERR_EXPIRE, to specify whether a range of sequence numbers should be expired (S=1)
or all sequence numbers associated with the given Create ID and Origin Node (S=0); Sequence Number Low/High:
Use together to specify a range of sequence numbers to expire. The remaining fields are explained in figure 37.
56