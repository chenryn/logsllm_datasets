title:Scalable on-demand media streaming with packet loss recovery
author:Anirban Mahanti and
Derek L. Eager and
Mary K. Vernon and
David Sundaram-Stukel
Scalable On-Demand Media Streaming
with Packet Loss Recovery ∗
Anirban Mahanti
Derek L. Eager
Mary K. Vernon
David Sundaram-Stukel
Dept. of Computer Science
University of Saskatchewan
{mahanti, eager}@cs.usask.ca
Saskatoon, SK S7N 5A9 Canada
Computer Sciences Dept.
University of Wisconsin
Madison, WI 53706-1685 USA
{vernon, sundaram}@cs.wisc.edu
ABSTRACT
Inspired by recent techniques for reliable bulk data distri-
bution, this paper develops scalable protocols for reliable
on-demand delivery of streaming media. Models are devel-
oped that quantify the best possible scalability for given
client characteristics. The results of the models are used
to guide the design and assess the performance of the pro-
posed streaming techniques. The new protocols, RPB and
RBS, are relatively simple to implement and achieve nearly
the best possible scalability and eﬃciency for a given set of
client characteristics and desirable/feasible media quality.
1.
INTRODUCTION
An important problem for a number of existing and future
Internet applications is that of delivering streaming media
on-demand, in a scalable and reliable manner, to potentially
large numbers of concurrent clients that receive the data
over lossy and possibly heterogeneous channels. This prob-
lem has been addressed eﬀectively for bulk data distribu-
tion [28, 31, 5], such as large software updates. However,
adequate solutions do not currently exist for streaming me-
dia content, as would be required in applications such as
video-on-demand.
The digital fountain [5] approach [28, 31, 5] is designed to
deliver bulk data over channels that have signiﬁcant packet
loss, including IP multicast on the Internet, satellite trans-
mission, and wireless transmission channels. The approach
uses erasure codes to construct a stream of packets, such
that a receiver can reconstruct the object from any subset
of the packets of size equal to or just slightly greater than
the number of packets in the source data. Thus, each client
can begin listening to the (multicast) stream at a time of
∗
This work was partially supported by the Natural Sciences
and Engineering Research Council of Canada under Grant
OGP-0000264 and by the National Science Foundation un-
der Grant CCR 9975044.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA..
Copyright 2001 ACM 1-58113-411-8/01/0008 ...$5.00.
their own choosing, and simply keep listening until the re-
quired number of packets have been correctly received. The
method is fully scalable because the required server trans-
mission bandwidth is independent of the number of clients
actively acquiring the data. The method is eﬃcient because
(1) no feedback channels are required for clients to recover
lost packets, (2) the amount of data each client needs to re-
ceive in order to obtain the full object is (nearly) minimal,
and (3) the amount of processing time required for a client
to reconstruct the original data is small.
The digital fountain described above is inapplicable to
streaming media, however, since in general a client would
be unable to reconstruct the portion of the object at which
playback is to begin until after receiving most or all of the
data needed to reconstruct the entire object. Other recent
approaches for reliable live or scheduled broadcast delivery
of streaming media [33, 13, 7, 23, 4, 21, 30, 9] do not address
the problem of providing scalable on-demand delivery.
Conversely, recently proposed protocols for scalable on-
demand media streaming, such as periodic broadcast proto-
cols [32, 1, 17, 20, 14, 25, 16], patching [8, 18, 6, 15, 29],
and bandwidth skimming [12], do not address the issue of
providing reliable delivery over lossy channels. Moreover, it
is not straightforward to extend these streaming protocols
to include redundant data for recovering lost packets. For
example, in most protocols, each transmitted media packet
is needed for (nearly) immediate playback by at least one of
the clients receiving the packet. In all other cases, and in all
previous periodic broadcast protocols, clients must be able
to receive multiple streams that have an aggregate transmis-
sion rate equal to two or more times the minimum rate re-
quired for real-time playback. Such aggregate transmission
rates may be infeasible for a given desired media quality and
transmission path. Even if the transmission rates are feasi-
ble, they may be suboptimal for environments where higher
transmission rate implies higher probability of packet loss
(e.g., due to congestion) in the transmission path. When
applying these scalable streaming methods in environments
where packet loss is relatively rare, local error concealment
(e.g., interpolating lost video frames from frames that are
received correctly) may be adequate. However, in environ-
ments that have frequent and bursty packet loss, local error
concealment is inadequate for many applications [26].
This paper develops new scalable periodic broadcast and
bandwidth skimming protocols for reliable, on-demand de-
livery of streaming media content over lossy and possibly
97heterogeneous channels. First, models are developed that
quantify the best possible scalability for given client char-
acteristics. The models are used to guide the design and
assess the performance of the proposed new protocols. The
new protocols are relatively simple to implement and achieve
nearly the best possible scalability and eﬃciency for a given
set of client characteristics and desirable/feasible media qual-
ity. The paper also proposes using the new protocols to al-
low clients who arrive late to a live or scheduled multicast
to request the earlier media content that they missed, with
only a very modest increase in server bandwidth.
The new Reliable Periodic Broadcast (RPB) protocols are
fully scalable,
include eﬃcient transmission of redundant
data for clients with heterogeneous packet loss rates, require
minimal client feedback, and have a tunable latency for be-
ginning the media playback. The RPB protocols also assume
that the maximum aggregate transmission rate to any client
is equal to a parameter that can be set to a small percent-
age (e.g., 25%) greater than the minimum transmission rate
required for real-time playback.
The new Reliable Bandwidth Skimming (RBS) protocols
require limited feedback from the clients (i.e., primarily the
client requests that initiate new streams) and are not as
eﬃcient as the RPB protocols with respect to the amount of
data that is received by a client. However, the RBS protocols
have minimal startup latency for playback, fully support
interactive client requests, and operate more eﬃciently than
the RPB protocols when fewer clients request the media.
The remainder of the paper is organized as follows. Sec-
tion 2 reviews previous periodic broadcast and bandwidth
skimming protocols, and previously developed lower bounds
on the required server bandwidth for each of these two classes
of protocols. Section 3 compares alternative packet loss re-
covery strategies, both qualitatively, and through the deriva-
tion of simple lower bounds on the required server band-
width. Sections 4 and 5 develop the proposed new RPB
and RBS protocols, respectively, and provide qualitative and
quantitative assessments of the new protocols. Conclusions
are presented in Section 6.
2. BACKGROUND
The new protocols proposed in this paper use the previ-
ously developed concepts of periodic broadcast and band-
width skimming for scalable on-demand delivery of stream-
ing media. Previous periodic broadcast and bandwidth skim-
ming protocols are brieﬂy reviewed in Sections 2.1 and 2.2,
respectively. Section 2.3 reviews a previous analytic model [3,
10] that provides a lower bound on the server bandwidth re-
quired for each class of protocol. This model serves as a basis
for the new bounds that are developed in Section 3 for eval-
uating the bandwidth requirements of alternative strategies
for packet loss recovery in the context of scalable on-demand
streaming. Finally, Section 2.4 summarizes the goals of the
new protocols developed in Sections 4 and 5 of the paper.
2.1 Previous Periodic Broadcast Protocols
Previous periodic broadcast schemes divide a media ﬁle
into K segments, with a progression of relative segment
lengths, l1, l2, ..., lK . In the simplest case, each segment is re-
peatedly broadcast (or multicast) on its own channel (e.g.,
multicast group) at the media playback rate. Although a
number of such protocols have been proposed, for the pur-
poses of this paper it suﬃces to describe just a single ex-
ample. The skyscraper broadcast protocol [17] has segment
length progression 1, 2, 2, 5, 5, 12, 12, 25, 25, ... and a broad-
cast schedule as depicted in Figure 1 for K = 6.
A client arriving at an arbitrary point in time obtains a
schedule for tuning in to each channel to receive each of the
segments, starting at the beginning of the next segment 1
broadcast on channel 1. For example, a client who arrives
at the time indicated by the arrow is given the schedule of
shaded segment broadcasts. The periodic broadcast sched-
ule ensures that, for any segment 1 broadcast, the client can
receive each other media segment at or before the time it is
needed for playback. Since segments are increasing in size,
clients that initially start listening to diﬀerent segment 1
broadcasts often listen to the same broadcasts of later seg-
ments. The small ﬁrst segment permits low startup laten-
cies while the larger later segments keep the total number
of channels needed for the broadcast small.
Channel  1
Channel  2
Channel  3
Channel  4
Channel  5
Channel  6
.....
.....
.....
.....
.....
.....
Figure 1: Skyscraper Broadcasts (K = 6)
Skyscraper systems have the key property that clients
listen to at most two playback rate channels concurrently.
Clients must have buﬀer space equal to lK to store data until
it is needed for playback. Furthermore, the maximum time
(cid:1)K
a client waits to begin receiving a media stream of duration
k=1 lk; e.g., if K = 10, the maximum latency is
T is T /
0.007T .
Other periodic broadcast protocols have been devised that
reduce the amount of server bandwidth required for a given
maximum startup latency, often at the cost of increasing
the required aggregate transmission rate to each client and
in some cases also more complex broadcast schedules [32, 1,
20, 14, 25, 16]. For example, the recent work by Hu [16]
derives the optimal segment sizes and transmission rates as-
suming (1) a ﬁxed number of segments, (2) each segment is
completely received prior to beginning its playout, and (3)
each client can receive all segments concurrently. No algo-
rithm is presented for determining segment sizes and trans-
mission rates in other cases. For the special case that clients
can listen to at most two play-rate streams, Hu brieﬂy sug-
gests a Fibonacci series segment size progression with holes
in the transmission schedule. Hu also brieﬂy discusses how
periodic broadcast protocols can support a limited form of
client fast-forward requests.
2.2 Previous Bandwidth Skimming Protocols
Bandwidth skimming protocols [12] initiate a new multi-
cast transmission of the media ﬁle for each new client re-
quest. In the simplest case, each client also listens to the
closest earlier stream that is still active [10, 11], so that
its own stream can terminate after transmitting the data
that was missed in the earlier stream, as illustrated in Fig-
ure 2(a).
In the ﬁgure, clients A through D request the
media object at times T0, T1, T3, and T4, respectively. At
stream for
clients A, B, C, D
t
c
e
j
b
O
n
i
n
o
i
t
i
s
o
P
stream for
client A
stream for
clients A, B
stream for
client C
stream for
client B
T0
T1
T2
T3
T4
T5
Time
stream for
clients C, D
stream for
client D
T6
(a) Hierarchical Multicast Stream Merging
t
c
e
j
b
O
n
i
n
o
i
t
i
s
o
P
(3)
(1)
(2)
(2)
(1)
(3)
T3
T4
Time
(b) Partition
T5
Figure 2: Bandwidth Skimming Example
Table 1: Notation for Scalability Bounds
Symbol Deﬁnition
λ
T
N
d
B
average client request rate for a media object
media object playback duration
average number of requests for the object that arrive during a period of length T (N = λT )
maximum start-up delay for object playback
required server bandwidth (in units of the object playback bit rate)
time T4, client D listens to the stream that starts at T4 as
well as the stream that was initiated for client C at time
T3. At time T5, the stream for client D can be terminated,
and clients C and D are “merged”. When clients merge,
they begin listening to the closest earlier stream that is still
active, and so on.
An important feature of the bandwidth skimming pro-
tocols is that the hierarchical merging illustrated in Fig-
ure 2(a) can be implemented when the aggregate transmis-
sion rate to the client is less than twice the media playback
rate. For example, in one version of the protocol (called
Partition in [12]), each stream is transmitted at the play-
back rate, but on k channels, where k is a parameter of
the protocol. Each channel carries 1/k of the stream data
using a deterministic ﬁne-grained interleaving of the data
packets. Figure 2(b) illustrates how client D merges with
client C when each stream is transmitted on three channels
(i.e., k = 3), and client D can listen to at most four chan-
nels for a maximum client data rate of 1.33 times the media
playback rate. Client D goes through three distinct periods
between arriving at time T4 and merging with client C at
time T5. During each period, client D listens to the number
of channels from each stream indicated in parentheses near
the stream. For example, in the ﬁrst period, client D listens
to one of the channels of client C’s stream. In the second
period, client D has already received the data that will be
delivered on one of its own channels, so client D listens to
two channels of its own stream and two channels of client
C’s stream.
Results in [12, 10] show that the server transmission band-
width used for the bandwidth skimming protocols increases
only logarithmically (with a small constant factor) as the
client request rate increases. Those results show that band-
width skimming is more eﬃcient than periodic broadcast
protocols at low to moderate client request rates (e.g., un-
der 100 requests per time T ). The results also show that
even with client data rate only 1.25 times the media play-
back rate, bandwidth skimming yields similar or (for high
request rates) substantially better performance than the op-
timized patching technique [6, 15], which requires client data
rate equal to twice the media playback rate. Furthermore,
in contrast to both optimized patching and periodic broad-
cast, bandwidth skimming naturally allows each client to
start at an arbitrary point in the media stream, and thus
only very simple extensions to the protocol are required to
support client interactive requests including general “fast
forward” requests [10]. Adding a maximum startup delay
to the bandwidth skimming protocol can further decrease
server transmission bandwidth, as shown in [12].
2.3 Maximum Achievable Scalability
In [10] a tight lower bound is derived on the required server
bandwidth1 for any protocol that provides immediate on-
demand streaming of multimedia content, with no packet
loss recovery. Assuming the notation in Table 1, the lower
bound is as follows:
(cid:2) T
0
Bimmed−service
minimum
=
dx
x + 1