# 高级SQL提升生产力

## 目录
- 物化视图
- 实时数据清洗与转换
- 数据采样
- 数据加密
- 数据脱敏
- 数据去重
- 字段范围加速查询
- 行级安全（VPD/RLS）
- WITH ORDINALITY
- LATERAL
- GROUPING SETS, CUBE, ROLLUP, 和 GROUPING
- 窗口函数
- 公共表表达式 (CTE) 与递归
- UPDATE/DELETE LIMIT
- SKIP LOCKED
- 动态 SQL 在函数中的应用
- DISTINCT ON
- 秒杀
- 批量 SQL
- 数据分析
- 流计算
- 规则和异步消息
- 线性回归与预测
- 机器学习
- 化学分析

## 物化视图
物化视图是一种预计算的视图，支持索引，可以显著提高查询性能。

**创建物化视图:**
```sql
CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] table_name
[ (column_name [, ...] ) ]
[ WITH ( storage_parameter [= value] [, ... ] ) ]
[ TABLESPACE tablespace_name ]
AS query
[ WITH [ NO ] DATA ];
```

**刷新物化视图:**
```sql
REFRESH MATERIALIZED VIEW [ CONCURRENTLY ] name
[ WITH [ NO ] DATA ];
```

## 实时数据清洗与转换
通过规则或触发器实现数据的实时清洗与转换。

### 示例1：将非结构化数据转换为结构化数据
**创建源表:**
```sql
CREATE TABLE nt (id int, c1 numeric, c2 numeric);
```

**创建目标表:**
```sql
CREATE TABLE nt_geo (id int, geo geometry);
```

**创建规则:**
```sql
CREATE RULE r1 AS ON INSERT TO nt DO INSTEAD INSERT INTO nt_geo VALUES (NEW.id, ST_MakePoint(NEW.c1, NEW.c2));
```

**插入数据:**
```sql
INSERT INTO nt VALUES (1, 1, 1);
```

### 示例2：JSONB 数据转换
**创建源表:**
```sql
CREATE TABLE t1 (id int, info text, j jsonb);
```

**创建目标表:**
```sql
CREATE TABLE t2 (id int, info text, c1 int, c2 int, c3 text);
```

**创建规则:**
```sql
CREATE RULE r1 AS ON INSERT TO t1 DO INSTEAD INSERT INTO t2 VALUES (NEW.ID, NEW.INFO, ((NEW.J)->>'c1')::int, ((NEW.j)->>'c2')::int, (NEW.j)->>'c3');
```

**插入数据:**
```sql
INSERT INTO t1 VALUES (1, 'test', '{"c1":1, "c2":2, "c3":"text"}'::jsonb);
```

**查询结果:**
```sql
SELECT * FROM t2;
-- 输出
-- id | info | c1 | c2 | c3
-- ----+------+----+----+------
-- 1 | test | 1 | 2 | text
```

## 数据采样
使用采样算法进行行级或块级随机采样。

**行级随机采样:**
```sql
SELECT * FROM test TABLESAMPLE bernoulli (1);
```

**块级随机采样:**
```sql
SELECT * FROM test TABLESAMPLE system (1);
```

## 数据加密
使用 `pgcrypto` 模块进行数据加密。

**安装扩展:**
```sql
CREATE EXTENSION pgcrypto;
```

**可逆加密:**
```sql
CREATE TABLE userpwd (userid int8 PRIMARY KEY, pwd text);
INSERT INTO userpwd (userid, pwd) VALUES (1, crypt('this is a pwd source', gen_salt('bf', 10)));
```

**不可逆加密:**
请参考相关文档和示例代码。

## 数据脱敏
请参考相关文档和示例代码。

## 数据去重
使用窗口函数和数组操作进行数据去重。

**删除重复数据:**
```sql
DELETE FROM tbl WHERE ctid = ANY (
    ARRAY(
        SELECT ctid FROM (
            SELECT ctid, ROW_NUMBER() OVER (PARTITION BY c1 ORDER BY ts DESC) AS rn FROM tbl
        ) t WHERE t.rn <> 1
    )
);
```

## 字段范围加速查询
使用 `range` 类型和 GIST 索引加速范围查询。

**创建表:**
```sql
CREATE TABLE a (
    sid int,
    ts timestamp[],
    s1_val float4[],
    s2_val float4[],
    tsr tsrange
);
```

## 行级安全（VPD/RLS）
使用行级安全策略控制数据访问。

**创建表:**
```sql
CREATE TABLE test (id int, r name, info text, crt_time timestamp);
INSERT INTO test VALUES (1, 'digoal', 'test', now());
INSERT INTO test VALUES (2, 'r3', 'test123', now());

CREATE ROLE r3 LOGIN;
GRANT SELECT ON test TO r3;
ALTER TABLE test ENABLE ROW LEVEL SECURITY;

\c postgres r3
EXPLAIN VERBOSE SELECT * FROM test;
```

## WITH ORDINALITY
用于生成行号。

**示例:**
```sql
SELECT * FROM unnest(array[100, 200, 111, 333]) WITH ORDINALITY AS t (v, i);
```

## LATERAL
用于在子查询中引用外部查询的列。

**示例:**
```sql
SELECT t1.i, t1.v, t2.v FROM
(SELECT * FROM unnest(array[100, 200, 111, 333]) WITH ORDINALITY AS t (v, i)) t1
JOIN
(SELECT * FROM unnest(array['b', 'c', 'd', 'e']) WITH ORDINALITY AS t (v, i)) t2
USING (i);
```

## GROUPING SETS, CUBE, ROLLUP, 和 GROUPING
用于多维度透视。

**示例:**
```sql
SELECT id, first_value(score) OVER (PARTITION BY sub ORDER BY score DESC) - score, score, sub FROM t ORDER BY sub, id;
```

## 窗口函数
用于定义计算的数据区间。

**示例:**
```sql
SELECT id, class, score, AVG(score) OVER (PARTITION BY class ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) FROM t ORDER BY class, id;
```

## 公共表表达式 (CTE) 与递归
用于复杂查询和递归查询。

**示例:**
```sql
WITH RECURSIVE cte AS (
    SELECT * FROM t WHERE id = 1
    UNION ALL
    SELECT t.* FROM t JOIN cte ON t.parent_id = cte.id
)
SELECT * FROM cte;
```

## UPDATE/DELETE LIMIT
限制更新或删除操作的影响行数。

**示例:**
```sql
UPDATE t SET col = 'new_value' LIMIT 1;
```

## SKIP LOCKED
跳过被锁定的行。

**示例:**
```sql
DELETE FROM t WHERE id = 1 SKIP LOCKED;
```

## 动态 SQL 在函数中的应用
在函数中使用动态 SQL。

**示例:**
```sql
CREATE OR REPLACE FUNCTION dynamic_sql() RETURNS void AS $$
BEGIN
    EXECUTE format('UPDATE t SET col = %L WHERE id = 1', 'new_value');
END;
$$ LANGUAGE plpgsql;
```

## DISTINCT ON
用于获取每个分组的第一条记录。

**示例:**
```sql
SELECT DISTINCT ON (col1) * FROM t ORDER BY col1, col2;
```

## 秒杀
处理高并发下的秒杀场景。

**示例:**
```sql
BEGIN;
SELECT * FROM products WHERE id = 1 FOR UPDATE SKIP LOCKED;
UPDATE products SET stock = stock - 1 WHERE id = 1;
COMMIT;
```

## 批量 SQL
批量执行 SQL 语句。

**示例:**
```sql
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN SELECT * FROM t LOOP
        EXECUTE format('UPDATE t SET col = %L WHERE id = %s', 'new_value', r.id);
    END LOOP;
END;
$$ LANGUAGE plpgsql;
```

## 数据分析
使用 SQL 进行数据分析。

**示例:**
```sql
SELECT date, (# hll_union_agg(users) OVER two_days) - (# lag(users) OVER (ORDER BY date ASC)) AS new_uniques
FROM daily_uniques WINDOW two_days AS (ORDER BY date ASC ROWS 1 PRECEDING);
```

## 流计算
处理实时数据流。

**示例:**
请参考相关文档和示例代码。

## 规则和异步消息
使用规则和异步消息进行数据处理。

**示例:**
请参考相关文档和示例代码。

## 线性回归与预测
使用 SQL 进行线性回归和预测。

**示例:**
请参考相关文档和示例代码。

## 机器学习
使用 SQL 进行机器学习。

**示例:**
请参考相关文档和示例代码。

## 化学分析
使用 SQL 进行化学数据分析。

**示例:**
请参考相关文档和示例代码。