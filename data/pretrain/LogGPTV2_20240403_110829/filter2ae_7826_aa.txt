**作者：知道创宇404区块链安全研究团队  
时间：2018/09/13  
English version：**
### 一、背景
2018年9月7日早上1点左右，许多以太坊钱包账户都收到了一种名为`blockwell.ai KYC Casper Token`代币转进/出账消息：
令人奇怪的是这些账号均表示之前对这个Token的“一无所知”，当这些收到消息用户并没有真正收到提示的那100个代币，而那些提示有100代币转出的用户在之前也并没有拥有过这种代币，这一切都显得“莫名其妙”！更加让一部分人奇怪和担心的是，这些“转进/出账”的操作，都不需要钱包拥有者的的任何密码私钥输入，于是很多不明真相的用户担心自己的钱包是不是被人恶意攻击
...
### 二、事件跟踪
首先我们从`blockwell.ai KYC Casper Token`
    https://etherscan.io/token/0x212d95fccdf0366343350f486bda1ceafc0c2d63
交易页面，看到的交易记录都是转出100代币的记录，没有任何转入记录。
再看看实际转账到账户的交易信息
    https://etherscan.io/token/0x212d95fccdf0366343350f486bda1ceafc0c2d63?a=0xa3fe2b9c37e5865371e7d64482a3e1a347d03acd
可以看到通过调用这个合约，发起了一笔代币转账，在event logs里可以看到实际的交易
然后具体的交易地址为
    https://etherscan.io/tx/0x3230f7326ab739d9055e86778a2fbb9af2591ca44467e40f7cd2c7ba2d7e5d35
整笔交易花费了244w的gas，价值2.28美元，有针对的从500个用户转账给了500个用户。
![
](https://images.seebug.org/content/images/2018/09/fdf67ae1-bb1a-459b-a7b0-3c9085f2b004.png-w331s)
继续跟踪到转账的from地址：
    https://etherscan.io/address/0xeb7a58d6938ed813f04f36a4ea51ebb5854fa545#tokentxns
![
](https://images.seebug.org/content/images/2018/09/d15c8a40-08b1-4234-8b4c-63164f95b271.png-w331s)
正如文章开头提到的那样：所有的来源账户本身都是不持有这种代币的，跟踪一下也可以发现，无论是发起交易者还是接受交易者，都没有发生实际代币的变化。
但是 **这些交易记录确实被保存在链上** ，那么这个事件的核心问题就在于：“这些记录是怎么被产生并记录的？”
### 三、事件原理
我们从合约分析入手
    https://etherscan.io/address/0x212d95fccdf0366343350f486bda1ceafc0c2d63#code
不出所料，这种事件型的合约代码并不会直接给你开放源代码，通过利用我们404自主研发的智能合约OPCODE逆向工具，反编译后得到如下代码：
源码如下
    contract 0x212D95FcCdF0366343350f486bda1ceAfC0C2d63 {
        mapping(address => uint256) balances;
        uint256 public totalSupply;
        mapping (address => mapping (address => uint256)) allowance;
        address public owner;
        string public name;
        string public symbol;
        uint8 public decimals;
        event Approval(address indexed _owner, address indexed _spender, uint256 _value);
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        event OwnershipRenounced(address indexed previousOwner);
        event TransferOwnership(address indexed old, address indexed new);
        function approve(address _spender, uint256 _value) public returns (bool success) {        
            allowance[msg.sender][_spender] = _value;        
            Approval(msg.sender, _spender, _value);        
            return true;    
        }  
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
            // 0x841
            require(to != address(0));   
            require(balances[_from] >= _value);
            require(allowance[_from][msg.sender] >= _value);
            balances[_from] = balances[_from].sub(_value);
            balances[_to] = balances[_to].add(_value);
            allowance[_from][msg.sender] =  allowance[_from][msg.sender].sub(_value); 
            Transfer(_from, _to, _value);
            return true;
        }
        function decreaseApproval(address _spender, uint256 _subtractedValue) {
            // 0xc0e
            uint oldValue = allowance[msg.sender][_spender];
            if (_subtractedValue > oldValue) {      
                allowance[msg.sender][_spender] = 0;    
            } else {
                allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);    
            }    
            Approval(msg.sender, _spender, allowance[msg.sender][_spender]);    
            return true;  
        }
        function balanceOf(address _owner) constant returns (uint256 balance) {       
            // 0xe9f 
            return balances[_owner];    
        }    
        function renounceOwnership() {
            // 0xee7
            require(owner == msg.sender);
            emit OwnershipRenounced(owner);
            owner = address(0);
        }
        function x_975ef7df(address[] arg0, address[] arg1, uint256 arg2) {
            require(owner == msg.sender);
            require(arg0.length > 0, "Address arrays must not be empty");
            require(arg0.length == arg1.length, "Address arrays must be of equal length");
            for (i=0; i  arg1);
            balances[mag.sender] = balances[msg.sender].sub(arg1);
            balances[arg0] = balances[arg0].add(arg1);
            emit Transfer(msg.sender, arg0, arg1)
            return arg1
        }
        function increaseApproval(address arg0,uint256 arg1) {
            allowance[msg.sender][arg0] = allowance[msg.sender][arg0].add(arg1)
            emit Approval(msg.sender, arg0, arg1)
            return true;
        }
        function transferOwnership(address arg0) {