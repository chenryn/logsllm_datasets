title:PRISM: Program Replication and Integration for Seamless MILS
author:Chris A. Owen and
Duncan A. Grove and
Tristan Newby and
Alex Murray and
Chris J. North and
Michael Pope
2011 IEEE Symposium on Security and Privacy
PRISM: Program Replication and Integration for Seamless MILS
Chris Owen, Duncan Grove, Tristan Newby, Alex Murray, Chris North and Michael Pope
C3I Division, Defence Science and Technology Organisation, Edinburgh, Australia
Email: {Chris.Owen, Duncan.Grove, Tristan.Newby, Alex.Murray, Chris.North, Michael.Pope}@dsto.defence.gov.au
Abstract—We describe how to combine a minimal Trusted
Computing Base (TCB) with polyinstantiated and slightly aug-
mented Commercial Off The Shelf (COTS) software programs
in separate Single Level Secure (SLS) partitions to create Multi
Level Secure (MLS) applications. These MLS applications
can coordinate ﬁne grained (intra-document) Bell LaPadula
(BLP) [6] separation between information at multiple security
levels. The untrusted COTS programs in the SLS partitions
send at-level ﬁle edits as diff transactions to the TCB. The
TCB veriﬁes that BLP semantics will be observed and then
patches these transactions into its canonical representation of
the ﬁle. Finally, it releases appropriately ﬁltered versions back
to each SLS partition for re-assembly into the COTS program’s
standard ﬁle format. Furthermore, by judiciously restricting
how the user can interact with the system the multiple SLS
instantiations of the COTS program can be made to appear
as if they are a single MLS instantiation. We demonstrate the
utility of this approach using Microsoft Word and DokuWiki.
Keywords-Computer security, Data security, Information se-
curity, Multilevel systems, Software architecture, Application
virtualization, Military computing, Data storage systems, File
systems, Information entropy
I. INTRODUCTION
Traditional Multi-Level Secure (MLS) information sys-
tems have labelled individual ﬁles with the highest secu-
rity level of information they contain, or relied on MLS
databases. The latter requires the entire database engine to
be trusted, which is well beyond the state of the art to prove
with any degree of formal credibility. The former precludes
trusted, ﬁne grained (intra-document) labelling of content.
For example, Starlight [3] enforces strictly separate en-
claves for information at different security levels but then
provides mechanisms to access that
information in the
isolated domains. Although highly secure, this stymies users
from combining information from different classiﬁcations,
thus discouraging ﬁne grained information management and
inducing a fragmented user experience. The MYSEA ar-
chitecture [14] demonstrates a more integrated albeit much
less trustworthy approach using a wiki environment, but the
granularity for different security levels is still limited to a
page; a commercial MLS operating system is used to apply
a mandatory separation policy using security labelled pro-
cesses and ﬁles. Still other approaches like Compartmented
Mode Workstation (CMW) [5], [18] apply a high-water mark
model and “ﬂoat” ﬁles up to the highest security level of
other processes that touch them. Unfortunately this over
classiﬁcation quickly ratchets everything to the highest level,
constraining the availability of data and forcing users into
frustrating and risky upgrade/downgrade cycles.
Unlike these approaches, the system which we present in
this paper, PRISM, uses a minimal cross domain component
to provide trustworthy separation of security levels while
maintaining cross domain structure within individual ﬁles,
providing much ﬁner-grained partitioning of MLS data.
In this respect our approach is similar to Galois’ Trusted
Services Engine (TSE) [12], although little detail has been
published about
to
understand exactly how it works and determine its useability
and security properties.
this system which makes it difﬁcult
Notwithstanding this, the TSE is described as implement-
ing a trusted “read down” mechanism whereby low-level
data can be accessed from higher-level domains. A high
side user can then make high-level modiﬁcations to the
data, presumably using some form of copy-on-write seman-
tics. Separate TCB-mediated disks are used to store the
information at different security levels. Additional untrusted
“DocServer” software on the high side monitors the low
side ﬁle for modiﬁcations and merges those changes onto
the high-level version of the document – although no details
of how this is achieved are provided.
Using this approach, high-level edits that alter low-level
content (but within the high-level domain) are implicitly
allowed. This is clearly demonstrated in the TSE’s main
articulated use case, where high-level users are allowed
to edit both low- and high-level wiki content from the
same high-level workstation. This in turn drives the need to
introduce a fallible downgrading process into a user’s typical
workﬂow, where ostensibly low-level information entered
at a high security level needs to be examined, ﬁltered and
resynchronised downwards to the low level.
Conversely, our PRISM system provides the user with a
simple mechanism for always editing MLS content at the
appropriate security level, thereby avoiding the need for
risky downgrade procedures. Furthermore, PRISM generates
ﬁne grained edit transactions and “pushes” them, through
a TCB, to higher levels. In addition to providing the user
with the apparent synchronisation of data between security
levels, frequent, ﬁne grained edit transactions help PRISM
avoid merge conﬂicts that are inevitable when using an
occasional heavyweight difﬁng process. Our interposed TCB
is also able to provide additional value adding steps. In
particular, it maintains a trusted, canonical MLS version of
1081-6011/11 $26.00 © 2011 Crown Copyright
DOI 10.1109/SP.2011.15
281
the ﬁle. This assists with the trusted labelling and tracking of
MLS information, which in turn simpliﬁes release checking
procedures, and also allows our MLS documents to be
cryptographically sealed and exported for off-line use.
Section II lays out the architecture of our solution. Sec-
tion III explains the underlying MLS ﬁle format and Sec-
tion IV describes the trusted processing that it requires. For
completeness, Section V brieﬂy presents the cross-domain
infrastructure that we relied on to develop our prototypes.
Sections VI and VIII demonstrate how we augmented Mi-
crosoft Word and DokuWiki to make them compatible with
our approach. Section VII shows how we built upon these
platforms to deliver a seamless user experience. Section IX
analyses the security properties of our solution, including
an analysis of potential covert channels and susceptibility to
other threats. We conclude with possible avenues for further
work.
II. THE PRISM ARCHITECTURE
[23] provides a robust
The Multiple Independent Levels of Security (MILS)
architecture [2],
framework for
separating untrusted code (typically Commercial Off The
Shelf (COTS) software) from trusted, security-critical code.
This enables complex yet highly assured applications to
be constructed by placing the large and complex parts of
applications in untrusted system-high partitions, while secu-
rity critical functions are separated out into small, trusted
components. This minimises the Trusted Computing Base
(TCB) comprising the security critical functionality and
greatly eases evaluation and certiﬁcation effort. For example,
it substantially reduces the amount of formal mathematical
modelling required to achieve Common Criteria (CC) certiﬁ-
cations of Evaluation Assurance Level (EAL) 6+ and above,
transforming an intractable problem to a manageable one.
The Annex Minisec device (versions 2 and 3) – on
which we aim to publish details soon [10] – applies the
MILS concept at both coarse and ﬁne grained levels. At
the macroscopic level, a Minisec is composed of multiple
self-contained computing systems (including CPU, RAM,
storage, etc.) for running complete system-high COTS oper-
ating systems and associated software stacks. Each of these
self-contained systems – called a partition – is typically
associated with a distinct security level, and may also form
part of a wider network at that level – called an enclave. At
the microscopic level the Minisec’s dedicated Trusted Com-
puting Base (TCB) CPU runs an Annex Object Capability
Reference Monitor (OCRM), which is an updated version
of the Annex TCB described in [9] that we will describe
more fully in [13]. Layered on top of this is a suite of
objects implementing Multi-Level Security critical functions
that, in conjunction with the Minisec’s labelled networking
mechanism, dynamically mediate each partition’s access to:
(1) local I/O devices such as a screen, keyboard, mouse and
Figure 1. The PRISM Architecture.
audio; (2) partitioned networking services for communicat-
ing with corresponding partitions in the same enclave on
remote devices; and (3) between partitions (of inherently
different security levels) on the same device. This paper
focuses on interactions of the third kind.
As shown in Figure 1, our PRISM architecture uses
Program Replication and Integration for Seamless MILS
(PRISM). It combines a minimal TCB with polyinstan-
tiated and augmented COTS programs (rather than data)
in separate Single-Level Secure (SLS) partitions to create
MLS applications. The untrusted COTS applications in the
separate system-high partitions are augmented with un-
trusted PRISM add-in modules that facilitate communication
and synchronisation with trusted components in the TCB,
allowing coordinated ﬁne grained (intra-document) editing
of MLS documents with Bell LaPadula (BLP) [6] separation
by single or multiple users operating at multiple security
levels.
This fusion of COTS software running in MILS domains
under the policy control of a true MLS TCB delivers the best
of all worlds: the power of COTS, the security properties
of MILS and the usability of native MLS. While this
style of composition was clearly anticipated in early MILS
publications [2], [23], the modern concept of MILS appears
to have degenerated to Multiple SLS (MSLS) type systems
aimed at consolidating what are currently “air-gapped” guest
operating systems. We suggest that our ﬁne grained PRISM
architecture is returning to MILS’ original roots, but propose
that “Multiple Integrated Levels of Security” might better
explain this type of architecture.
Figure 2 shows how an untrusted COTS Application in the
SLS partitions creates or edits a ﬁle. An untrusted but MLS-
aware Differ applies delta compression [11] to translate any
at-level modiﬁcations into diff transactions. These are com-
municated to the TCB where a tiny MLS Veriﬁer trivially
checks whether BLP security semantics will be preserved by
282
Figure 2. Editing information with PRISM.
Figure 3. Conceptual ﬁle structure
the modiﬁcations, and if so, the Patcher merges the changes
into the canonical version of the ﬁle. The canonical version
of the ﬁle may be maintained within the TCB partition,
stored in a dedicated MLS storage partition, or hosted in
what we term system-low mode as a TCB-encrypted ﬁle
on one of the untrusted partitions. A tiny MLS Releaser
then creates sanitised versions of the canonical ﬁle at each
security level, trivially stripping any higher-level content.
Each of these sanitised versions is communicated back to
the appropriate SLS partition, where an untrusted Assembler
uses the ﬁltered canonical representation to reconstruct the
ﬁle into the COTS application’s standard ﬁle format.
This enables trusted separation of information at different
security levels without needing to trust the COTS appli-
cations or the operating system partitions in which they
reside. Our key insight was to combine program replication
with a delta compression interface in a MILS framework to
separate the untrusted editing application(s) from a minimal,
trustworthy update and coordination mechanism.
Furthermore, all data is permanently classiﬁed at
the
security level of the edit session that created it. However,
by making data easily accessible from any security level
dominating partition, the need to upgrade and downgrade
information is completely avoided in everyday use. Instead,
upgrade and downgrade operations become rare, necessary
only when explicitly re-grading data to a different level.
III. THE MLSDOC FILE FORMAT
Our canonical container ﬁle format for storing MLS data,
called MLSDoc, prescribes a sequence of objects, each of
which is simply a byte sequence at a particular security level.
Where consecutive objects at the same classiﬁcation occur –
due to at-level additions, or deletions of intervening higher-
level content – these become merged into a single object.
Consequently, each data byte of an MLSDoc is permanently
linked within a data structure at the security level of the
edit session that created it, resulting in strongly associated
security labels at byte-level granularity.
Conceived with hierarchically arranged national security
classiﬁcations in mind, the MLSDoc ﬁle format is ideally
suited to storing application layer ﬁles that contain nested
collections of objects in a tree structure, like XML ﬁles.
Figure 3 depicts a conceptual example of such a ﬁle.
In general, we require that the root object be at the lowest
security level of the document, as it is required to place other
objects in context. Higher-level objects will exist near the
leaves of the tree, for example as annotations or additional
paragraphs, etc. At the byte level of the underlying canonical
representation these higher-level objects should appear to be
embedded within low-level neighbours.
Figure 4 shows the MLSDoc ﬁle structure for the con-
ceptual example in Figure 3. Data from each security level
is segregated into different Sections, with an Object Table
containing the information required to assemble the various
pieces from each section into the application ﬁle format.
Each row of the section table contains a pointer to the
start of data associated with that classiﬁcation, the length of
that data and a version ﬁeld. The version ﬁeld, along with
the UUID contained in the header, is used to ensure that
patches are applied to the correct version of an underlying
MLSDoc. The rows of the object table indicate the sequence
of objects,
the pointers
shown in Figure 4 are implicit, as any object follows straight
after the previous one within any single security level.
their classiﬁcations and lengths;
Using a section based structure allows layered encryption
to be applied, safely and easily embedding higher-level
data within a single ﬁle. It also assists with storing the
information associated with any particular security level in
separate memory pages or disk blocks if desired.
IV. TRUSTED PROCESSING
We required the code on the TCB that maintains sep-
aration to be minimal to allow assurance to a high level.
Hence the trusted patching process does not have any
application ﬁle speciﬁc awareness. The TCB simply treats
each MLSDoc ﬁle as a sequence of objects, each represented
as a byte string, where each object belongs to a single
security level.
As indicated in Figure 2, several distinct components work
in concert to provide the trusted functionality within PRISM.
283
Because the underlying MLSDoc ﬁle format separates the
classiﬁcation structure of the document from the data itself,
trusted release to any particular security level is simple: the
TCB simply strips the sections and object table entries of
any higher-level objects. This mode, which we call paranoid
mode, permits coordinated MLS ﬁle editing with zero bit-
rate downwards covert channels. It provides at-level editors
with read-only visibility of lower-level content and keeps
them oblivious to higher-level content.
Although very usable, paranoid mode does leave the user
open to making ordering errors with higher-level content.
Instead, where security requirements are less stringent, the
trusted release mechanism can export ﬁles in convenience
mode, where higher-level content is instead replaced by in-
line markers indicating the presence of higher-level content.
This helps prompt the user to avoid damaging – or assists
them to mend – any higher-level structures altered by lower-
level edits. While these markers can introduce potential
covert channels or may draw unwanted attention to otherwise
innocuous statements, Section IX shows that the former can
be managed, while protective brieﬁngs could be useful where
the latter is of concern.
Lastly, the trusted releaser can export MLSDoc ﬁles in
what we call system-low mode. Here a signed and encrypted
copy of the entire canonical MLSDoc is coupled with a para-
noid mode ﬁle, potentially by embedding it in an application-
ﬁle speciﬁc comment ﬁeld. This allows the document to
be hosted within the enclave, transported to and imported
through another TCB, or sent for off-line processing by
legacy systems elsewhere within the enclave. For example, a
system-low ﬁle may be emailed or even transferred via CD
or memory stick to someone else for editing on a system
not equipped with PRISM capability. When the MLSDoc
returns to a PRISM capable environment any changes can be
merged via the TCB into the embedded system-low version
of the canonical ﬁle.
In order to explain the trusted veriﬁcation and patching
components it is necessary to ﬁrst understand the structure
of the MLS-aware patches these components are designed
to receive from the untrusted difﬁng modules hosted in the
SLS partitions.
We have adopted BSDiff [15] as a base for our PRISM
patch format, since it matched our needs very well. BSDiff
provides a simple representation for encoding XOR based
differences (and hence copies in the degenerative case) and
insertions to binary executable ﬁles. To further reduce the
size of the trusted codebase, however, we constrained the
existing speciﬁcation to disallow differences and permit only
copies and insertions.
Figure 5 shows the binary form including human readable
transliteration of the BSDiff formatted patch corresponding
to the delta between the Unclassiﬁed and Secret documents
depicted in Figure 6. The patch consists of a header section
identifying the MLSDoc and section version that the patch