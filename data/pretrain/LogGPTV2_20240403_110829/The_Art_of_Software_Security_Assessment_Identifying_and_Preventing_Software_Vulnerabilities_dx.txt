was probably a bad move. Figure 14-5 shows an example of overlapping fragments. 
Figure 14-5. Overlapping fragments 
[View full size image] 
So are overlapping fragments a potential security issue? Absolutely! They add a 
degree of complexity to the requirements that might not seem important at first, but 
they have actually led to dozens of security vulnerabilities. Two main problems come 
into play when dealing with overlapping fragments, which are: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
868 
Implementation flaws in fragment queue maintenance, leading to crashes or 
potentially memory corruption 
Ambiguity about which data should be honored 
As discussed in Chapter 7(? [????.]), "Program Building Blocks," a lot of simple errors 
based on managing lists are quite relevant to IP fragmentation because lists are used 
in nearly all IP implementations to track fragments for a datagram. In Chapter 7(? 
[????.]), you saw a famous example of a vulnerability (dubbed "teardrop") that 
existed in a number of host IP stacks. The basis of this vulnerability was a logic error 
in which two fragments are sent. The first provides some arbitrary part of the 
datagram, and the second provides data at the same offset as the first (or at some 
offset partway through the data that was provided in the first one), but finishing 
before the end of the first one (that is, the second datagram was completely 
encompassed by the first). This error leads to a size calculation error that results in 
attempting to access memory out of bounds. 
The IP RFC (RFC 791) isn't much help in understanding how to deal with data overlaps. 
It gives a sample algorithm for handling reassembly and indicates that if two or more 
overlapping fragments contain the same data, the algorithm uses the "more recently 
arrived data." However, it doesn't specify which data an IP stack should favor: data 
received in the original fragment or data supplied in successive fragments. So 
software vendors have implemented the algorithm in different ways. 
Consequently, if a firewall or IDS/IPS interprets the data stream differently from the 
destination host, this difference opens the potential to sneak data past a security 
device that should detect or block it. This is especially critical when the data being 
overlapped includes protocol headers because they might affect whether a packet 
filter or firewall decides to block or forward the packet. To help you understand this 
problem, here's a quick outline of the key differences in major fragmentation 
implementations. Figure 14-6 shows a nuance of the BSD reassembly code. 
Figure 14-6. BSD overlap semantics 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
869 
Table 14-1 shows the results of reassembling the packet set in Figure 14-6. 
Table 14-1. BSD Overlap Semantics 
Result 
OS 
Result 
BSD 
GET /cgi-bin/phf 
Linux 
GET XXXXXXXXXXXXXXXX 
Windows GET /cgi-binXXXXXXXXXXXX 
Solaris 
GET /cgi-binXXXXXXXXXXXX 
BSD ostensibly honors data it receives first, but this isn't what happens in practice. 
When BSD receives a new fragment, it left-trims the beginning of the fragment to 
honor previously received data, but after doing that, it accepts all the data from the 
new fragment. Windows and Solaris appear to honor the chronologically first data 
properly, but this isn't quite what occurs behind the scenes. Linux behaves similarly 
to BSD, but it honors a new fragment in favor of an old one if the new fragment has 
the same offset as the old one. Figure 14-7 shows a set of packets that isolate the 
Linux behavior. 
Figure 14-7. Linux overlap semantics 
[View full size image] 
Table 14-2 shows the results of the Linux reassembly code. It performs similarly to 
BSD reassembly algorithms, except it honors the data in a new fragment at the same 
offset as a previously received one. 
Table 14-2. Linux Overlap Semantics Result 
OS 
Result 
BSD 
GET XXXXXXXXXXXXXXXX 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
870 
Table 14-2. Linux Overlap Semantics Result 
OS 
Result 
Linux 
GET /cgi-bin/phf 
Windows 
GET XXXXXXXXXXXXXXXX 
Solaris 
GET XXXXXXXXXXXXXXXX 
Figure 14-8 shows one more test case that isolates Windows behavior. 
Figure 14-8. Windows overlap semantics 
[View full size image] 
Table 14-3 shows that most implementations actually discard a fragment that's 
completely subsumed by a following fragment because they attempt to preserve old 
data by adjusting the beginning and end of fragments as they come in. As you can see, 
because there's some variation in reassembly algorithms, any device doing virtual 
reassembly interprets overlapped data segments the same way as a destination host 
in some situations but not in others. 
Table 14-3. Windows Overlap Semantics Result 
OS 
Result 
BSD 
GET XXXXXXXX/phf HTTP/1.0 
Linux 
GET XXXXXXXX/phf HTTP/1.0 
Windows 
GET /cgi-bin/phf HTTP/1.0 
Solaris 
GET /cgi-binXXXXXXXXP/1.0 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
871 
You might think that because of this discrepancy, devices doing reassembly for 
security analysis are guaranteed to not work correctly when dealing with different 
kinds of hosts, but this isn't necessarily the case. Some implementations emulate the 
protocol stack of the OS for which they're reassembling traffic. Others might 
authoritatively rewrite packets into an unambiguous set of fragments or simply 
reassemble the datagram. Others might reject fragment queues containing any sort 
of overlap, which is usually a sign of foul play. This is exactly what Checkpoint 
Firewall-1's virtual reassembly layer does. 
Idiosyncrasies 
There are many subtle differences in how implementations handle the corner cases of 
fragmentation reassembly. For example, some hosts require every fragment except 
the last to be a multiple of 8 bytes. Some hosts accept 0-length fragments and queue 
them, and some don't. You've seen that hosts handle overlapping of fragmentation in 
different ways, and you could come up with creative test cases that just about every 
implementation reassembles slightly differently. Another big point of variation is the 
choice of timeouts and the design of data structures necessary to temporarily hold on 
to fragments until they are collected and ready to be reassembled. 
These small differences add up to potential vulnerabilities when there's a security 
device between the attacker and the end host. Say you have an IDS watching the 
network for signs of attack. An attacker could send a strange set of fragments that the 
IDS sees as innocuous, but the end host reassembles them into a real attack. As you 
discover in Chapter 15(? [????.]), the same kind of ambiguity can come into play 
when attacking firewalls, although the attacks are less straightforward. 
8.1.3 User Datagram Protocol 
User Datagram Protocol (UDP) is a connectionless transport-layer protocol that 
rests on top of IP. As you can probably tell from the header shown in Figure 14-9, it's 
intended to be a lightweight protocol. It adds the abstraction of ports, which allows 
multiple clients and servers to multiplex data using the same client-server IP address 
pair, and adds optional checksums for UDP data to verify that a packet hasn't been 
corrupted en route. Beyond that, it provides none of the services that TCP does, such 
as flow control and reliable delivery. UDP is typically used for protocols that require 
low latency but can tolerate losses. The most popular use of UDP is for Domain Name 
System (DNS), which provides name resolution for the Internet. 
Figure 14-9. UDP header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
872 
The following list describes the header fields in a UDP packet: 
Source port (16 bits) This field is the client source port. The source port, 
destination port, source IP address, and destination IP address combine to 
uniquely identify a connection. 
Note 
UDP is really a connectionless protocol and each UDP record is unassociated 
from any other previously sent records at the transport layer. However, many 
IP processing applications (such as firewalls) need to associate UDP packets 
with each other in order to make accurate policy decisions. 
Destination port (16 bits) This field is the port the packet is destined for. It's 
combined with the source port, source IP address, and destination IP address 
to uniquely identify a connection. 
Checksum (16 bits) This field is a checksum of the UDP header and all data 
contained in the UDP datagram. Several other fields are combined to calculate 
the checksum, including the source and destination IP addresses from the IP 
header. This field can optionally be set to the special value 0 to indicate that a 
checksum hasn't been calculated. 
Length (16 bits) This field is the length of the UDP header and data. 
Basic UDP Header Validation 
The UDP header is fairly straightforward, but there's still room for processing code to 
misstep, as described in the following sections. 
Is the UDP Length Field Correct? 
The length field specifies the length of the UDP header and the data in the datagram. 
You've seen situations in which processing code ignores this field and instead honors 
lengths coming from the IP header or device driver. If the length field is too large, it 
could lead to numeric overflow or underflow situations. Likewise, the minimum value 
for the UDP length field is 8 bytes. If the field is below 8 bytes and it's honored, a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
873 
numeric underflow situation could occur. A length of 8 bytes means there's no UDP 
data in the packet. 
Is the UDP Checksum Correct? 
The UDP checksum is optional. If it's set to zero, the checksum is not calculated. 
However, if it's set and the checksum is incorrect, end hosts likely disregard the 
packet. Any system attempting to interpret UDP packets should be aware of these 
possible outcomes. 
UDP Issues 
UDP can be spoofed easily, unlike TCP, where establishing a connection with a forged 
source IP address is much harder. UDP data can also be sent over broadcast and 
multicast addresses that aren't appropriate for TCP data. The bottom line is that 
sensitive code shouldn't rely on source IP addresses for purposes of authentication 
with UDP. Firewalls and packet filters can find UDP particularly troublesome for this 
reason. 
8.1.4 Transmission Control Protocol 
Transmission Control Protocol (TCP) is a transport-layer protocol that sits on top 
of IP. It's a mechanism for ensuring reliable and accurate delivery of data from one 
host to the other, based on the concept of connections. A connection is a 
bidirectional communication channel between an application on one host and an 
application on another host. Connections are established and closed by exchanging 
special TCP packets. 
The endpoints see the TCP data traversing the connection as streams: ordered 
sequences of contiguous 8-bit bytes of data. The TCP stack is responsible for breaking 
this data up into packet-sized pieces, known as segments. It's also responsible for 
making sure the data is transferred successfully. The data sent by a TCP endpoint is 
acknowledged when it's received. If a TCP endpoint doesn't receive an 
acknowledgement for a chunk of data, it retransmits that data after a certain time 
interval. 
TCP endpoints keep a sliding window of expected data, so they temporarily store 
segments that aren't the immediate next piece of data but closely follow the expected 
segment. This window allows TCP to handle out-of-order data segments and handle 
lost or corrupted segments more efficiently. TCP also uses checksums to ensure data 
integrity. 
Auditing TCP code can be a daunting task, as the internals of TCP are quite complex. 
This section starts with the basic structure of TCP packet headers and the general 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
874 
design of the protocol, and then gives you a few examples that should illustrate where 
things can go wrong. The TCP header structure is shown in Figure 14-10. 
Figure 14-10. TCP header 
The following list describes the fields in more detail: 
Source port (16 bits) This field indicates the TCP source port. It is used in 
conjunction with the destination port, source IP address, and destination IP 
address to uniquely identify a connection. 
Destination port (16 bits) This field is the port the packet is destined for. This 
field combined with the source port, source IP address, and destination IP 
address to uniquely identify a connection. 
Sequence number (32 bits) This field identifies where in the stream the data in 
this packet belongs, starting at the first byte in the segment. The sequence 
number is randomly seeded during connection establishment, and then 
incremented by the amount of data sent in each packet. 
Acknowledgement number (32 bits) This field contains the sequence number 
the endpoint expects to receive from its peer. It's the sequence number of the 
last byte of data received from the remote host plus one. It indicates to the 
remote peer which data has been received successfully so that data lost en 
route is noticed and retransmitted. 
Data offset (4 bits) This field indicates the size of the TCP header. Like IP, a 
TCP header can contain a series of options after the basic header, and so a 
similar header size field exists within the TCP header to account for these 
options. Its value is 5 if there are no options specified. 
Reserved (4 bits) This field is not used. 
Flags (8 bits) Several flags can be set in TCP connections to indicate 
information about the TCP packet: whether it's high priority, whether to ignore 
certain fields in the TCP header, and whether the sender wants to change the 
connection state. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
875 
Window (16 bits) This field indicates the size of the window, which is an 
indicator of how many bytes the host accepts from its peer. It's resized 
dynamically as the buffer fills up and empties and is used for flow control. This 
size is specific to the connection that the TCP packet is associated with. 
Checksum (16 bits) This field is a checksum of the TCP header and all data 
contained in the TCP segment. Several other fields are combined to calculate 
the checksum, including the source and destination IP addresses from the IP 
header. 
Urgent pointer (16 bits) This field is used to indicate the location of urgent data, 
if any (discussed in "URG Pointer Processing"). 
Interested readers should familiarize themselves with TCP by reading the RFC 793, as 
well as Stevens's discussion on TCP in TCP/IP Illustrated, Volume 1 (Addison-Wesley, 
1994(? [????.])). 
Basic TCP Header Validation 
Naturally, every field in the TCP header has properties that have some relevance in 
terms of security. To start, a few basic attributes of the TCP packet, explained in the 
following sections, should be verified before the packet is processed further. Failure to 
do so adequately can lead to serious security consequences, with problems ranging 
from memory corruption to security policy violation. 
Is the TCP Data Offset Field Too Large? 
The TCP header contains a field indicating its length, which is known as the data offset 
field. As with IP header validation, this field has an invariant relationship with the 
packet size: 
TCP header length <= data available 
20 <= TCP header length <= 
The TCP processing code must ensure that there's enough data in the packet to hold 
the header. Failure to do so could result in processing uninitialized memory and 
potentially even integer-related vulnerabilities, when calculations such as this are 
performed: 
data_size = packet_size  tcp_header_size; 
If the tcp_header_size variable hasn't been validated sufficiently, underflowing the 
data_size variable might be possible. This will invariably result in out-of-bounds 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
876 
memory accesses or possibly even memory corruption later during processing, most 
likely when validating the checksum or dealing with TCP options. 
Is the TCP Header Length Too Small? 
The minimum size of a TCP header is 20 bytes, making certain values for the TCP data 
offset field too small. As with IP headers, if code analyzing TCP packets fails to ensure 
that the header length is at least 5 (again, it's multiplied by four to get the header's 
actual size in bytes), length calculations can result in integer underflows. 
Is the TCP Checksum Correct? 
The TCP stack must verify the checksum in the TCP header to ensure that the packet 
is valid. This check is particularly important for software that monitors network traffic. 
If an application is trying to determine how TCP packets are processed on an end host, 
it must be sure validate the checksum. If it fails to do so, it can easily be 
desynchronized in its processing and become hopelessly confused. This is a classic 
technique for evading IDSs. 
TCP Options Processing 
TCP packets can contain a variable number of options after the basic header, just like 
IP packets. However, IP options are rarely used in practice, whereas TCP options are 
used extensively. TCP options are structured similarly to IP options; they are 
composed of an option byte, a length byte, and a variable-length data field. The 
structure is as follows: 
struct tcp_option { 
    unsigned char option; 
    unsigned char optlen; 
    char data[0]; 
}; 
When auditing code that processes TCP options, you can look for the same types of 
problems you did for IP options. The following sections briefly recap the potential 
issues from the discussion of IP options processing: 
Is the Option Length Field Sign Extended? 
Sign extension of the option length byte can be dangerous and lead to memory 
corruption or neverending process loops. For example, two Polish researchers named 
Adam Osuchowski and Tomasz Dubinski discovered a signed vulnerability in 
processing TCP options was present in the 2.6 Netfilter implementation of the iptables 
TCP option matching rule in the Linux 2.6 kernel (documented at 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
877 
www.netfilter.org/security/2004-06-30-2.6-tcpoption.html). The following is an 
excerpt of that code: 
char opt[60 - sizeof(struct tcphdr)]; 
... 
   for (i = 0; i < optlen; ) { 