## Page 512
用USING语句简化查询
thereareno
DumbQuestions
的行约束JOIN查询的结果？
mismatch_category表吗？
会应用到原表，而不是应用到查询结果。所以，对于
一个表来限制查询结果。举个例子，WHERE子句可以修改为
Mismatch这个例子，查询根据两个不同表中都出现的
只查找一个特定的类别，如下：
某一列（category_id）从这两个表中获取数据，然
后只选择mismatch_topic表中name列等于某个特定值
.. WHERE mismatch_category.nar
（HorrOr movies"）的行。所vINNERJOIN的依据
这个WHERE子句将结果限制为只包含属于娱乐
是两个表中都有category_id列，而WHERE子句只是使用
（Entertainment）类别的主题。所以wHERE子句不会影响表
mismatch_topic表中的name列来限制结果。
联接的方式，不过确实会影响查询返回的具体数据行。
使用USING简化ON
用USING重写ON，
应该记得，我们的目标是使用INNERJOINT简化麻烦的Mismatch查
可以得到基于一
询。内联接包含同名的匹配列时，可以在USING语句的帮助下进一步
个共同列匹配的
简化这个查询。USING语句在INNERJOIN查询中要取代ON的位置，
需要为之提供匹配中使用的列名。不过要确保两个表中这个列的列名
更为简洁的内联
必须完全相同。举个例子，还是看这个Mismatch查询：
接查询。
SELECT mismatch_topic.topic_id, mismatch_category.name
FROM mismatch_topic
各个列的列名是相同的，
只是表不同。
INNER JOIN mismatch_category
ON(mismatch_topic.category_id-mismatch_category.category_id)
WHERE mismatch_topic.name = 'Horror movies'
列名必须相同
由于查询的oN部分依赖于同名的列（category_id），因此可以利
才能在内联接
用一个USING语句简化
SELECT mismatch_topic.topic_id, mismatch_category.name
中使用USING语
FROM mismatch_topic
句。
INNER JOIN mismatch_category
所需要的只是列名…….不再需
要用二指定相等性。
USING (category_id)
WHERE mismatch_topic.name = *Horror movies
476
第8章
---
## Page 513
控制你的数据，世界在你手中
表和列的别名
我们的INNERJOIN查询越来越简洁！下面再更进一步。对于SQL查
利用别名充许在
询，标准做法是按数据库中出现的名指示表和列。不过在较大的查询
查询中重命名一
中，如果涉及到多个表，这种做法可能很笨拙，这些名会让查询很难
个表或列从而有
读。有时有必要采用一个别名，也就是在查询中用来指示一个表或列
的临时名。下面使用别名重写Mismatch查询。
助于从某种程度
通过将表名压综为更筒短的别
简化查询。
名，代码变得更易读。
K
SELECT mt.topic_id, mc.name
FROM mismatch_topic AS mt
SQL中的AS关键字创建一个别名，在这里就
INNER JOIN mismatch category AS mc
是为mismatch_topic表创建别名。
USING (category_id)
八
WHERE mt.name ='Horror movies
对mismatch_topic表
借助这个别名，mismatch_categovy现在可
的所有引用现在都
以简单地用“mc”来指示。
简写为“mt”。
miomaich_topie
mt
别名是不是只适合编写更简洁的查询？并非如此，在某些情况下别
名会非常重要！Mismatch应用中可能有一个方便的联接，它要获取对
topic_id
应一个给定主题ID的主题名和类别名。不过mismatch_topic中的
Cname
主题名和mismatch_category表中的类别名都使用了相同的列名
categor
（name）。这就带来了问题，因为结合这两列的结果会给出有二义性
category_id0
的列名。不过，可以用别名对结果列重命名，来增强其描述性。
name
在一个联接中选择这两个列会
SELECTmt.name AS topic_name,
mc.name As category_name
得到同名的结果列…·这可不
FROM mismatch_topic AS mt
?
现在用更具描述性的名
好！
INNER JOIN mismatch_category AS mc
对所选的列建立别名。
用别名对一个列重命
USING (category_id)
名时，查询结果中会
WHERE mt.topic_id = '11'
结果列现在有了唯
的更具描述性的名。
出现这个别名。
egory
Sushi
Food
你现在的位置
477
---
## Page 514
用联接重写查询
联接更高效，而
救兵来了：联接
且比嵌套查询需
利用联接，一个查询中可以涉及多个表，并有效地从多个位置抽取数
要的代码更少。
据放在一个结果表中。构建响应数组的Mismatch查询就非常适合采用
联接，因为它包含3个以上嵌套查询来处理多个表。下面先来看原来
的代码：
// Grab the response data from the database to generate the form
$query = "sELECT response_id, topic_id, response FROM mismatch_response
"WHERE user_id =*".$_SESSION['user_id'].""";
$data = mysqli_query($dbc, $query);
$responses = array() ;
while ($row = mysqli_fetch_array($data)){
代码中最后两个童询负责从相应
//Look up the topic name for the response from the topic table
$query2="SELECT name,category_id FROM mismatch_topic“
的表中得到主题名和类别名，每
"WHERE topic_id=".$row['topic_id']."";
个表需要一个查询。
$data2 = mysq1i_query($dbc, $query2);
if (mysqli_num_rows ($data2) == 1) {
$row2 = mysqli_fetch_array($data2);
$row['topic_name']=$row2[name*];
//Look up the category name for the topic from the category table
Squery3="SELECT name FROMmismatch_category
"WHERE category_id-Srow2[category_id'].;
$data3 = mysq1i_query (Sdbc, Squery3) ;
if (mysqli_num_rows($data3) == 1)(
Srow3 = mysqli_fetch_array($data3);
Srow['category_name']=$row3['name′];
array_push($responses, $row) ;
1
利用联接，可以在一个壹询中同
时获取主题名和类别名。
以下是使用联接的新版本的代码：
// Grab the response data from the database to generate the form
Squery = "sELECT response_id,topic_id,response FROM mismatch_response
$data = mysqli_query($dbc, $query) ;
Sresponses = array();
while ($row = mysqli_fetch_array($data)) (
Squery2="SELECT mt.name AS topic_name,mc.name AS category_name
"FROM mismatch_topic AS mt"
"INNER JOIN mismatch_category AS mc USING (category_id)
"WHERE mt.topic_id=".$row['topic_id'].
$data2 = mysqli_query($dbc,$query2);
用别名帮助简化代码
if (mysqli_num_rows ($data2) == 1)(
Srow2 =mysqli_fetch_array($data2);
$row['topic_name']=$row2['topic_name'];
$row['category_name']=$row2['category_name'];
主题D作为主壹询的基础
array_push(Sresponses, $row);
不过由类别加控制联接。
478
第8章
---
## Page 515
控制你的数据，世界在你手中
我不明白，你还是要有一个额外的查
询查找类别名。既然联接这么好，为
什么还需要两个查询呢？
我们并不需要两个查询，至少如果充分使用联接的话是不需要的。
可以联接多于两个表，这才是Mismatch响应数组代码真正需要的。
我们需要一个查询来完成以下三件事：获取用户的所有响应，得到
每个响应的主题名，然后得到各个响应的类别名。前一页上改进的
新代码用一个查询完成了后两步，其中涉及mismatch_topic和
mismatch_category表之间的一个联接。理想情况下，如果一个
查询包含两个联接，就可以利用联接达到“一石三鸟”的目的。
通过灵活地使用联接，以下代码利用一个查询就能够从数据库获取响应数据。希望
ExeRciSe
聪明的你编写出这个SQL查询，完成mismatch_response、mismatch_topic和
mismatch_category表之间的联接。
// Grab the response data from the database to generate the form
$query=
好
$data = mysqli_query ($dbc, Squery) ;
Sresponses = array() ;
while ($row = mysqli_fetch_array($data)){
array_push($responses, $row);
你现在的位置
479
---
## Page 516
练习答案与没有傻问题
通过灵活地使用联接，以下代码利用一个查询就能够从数据库获取响应数据。希望
ExeRciSe
聪明的你编写出这个SQL查询，完成mismatch_response、mismatch_topic和
SoLUtiON
mismatch_category表之间的联接。
// Grab the response data from the database to generate the form
Squery "
"SELECTmt.tesponse_id.mt.topicid..mt.tesponse...
第一个联接将主题
表引入奎询，从而可
以使用主题加得到
主题名。
使用别名帮助筒
化叠询，并使之
更易读。
S_SESSJON
‘user_id']个
$data = mysqli_query($dbc, Squery);
$responses = array() ;
第二个联接使用类别10将类别表
while ($row = mysqli_fetch_array($data)) {
加入叠询，从而可以访问类别名。
array_push($responses, $row);
将所有查询结果数据存储在
Stesponses数组中。
thereareno
DumbQuestions
(equijoin）、非相等联接（non-equijoin）和自然联接
联接统称为外联接（outerjoin），有多种不同类型的联接
（naturaljoin）。相等联接和非相等联接分别根据一个相等
都认为是外联接。有左外联接、右外联接、完全外联接，
性比较或不相等性比较来完成一个内联接。你在Mismatch
还有较少使用但很让人惊叹的“三螺旋双面连接”。必须
查询中已经看到一些检查topic_id和category_id列是
承认，最后一个并不是真正的联接，但确实应该有这样一
否匹配的相等联接例子。由于这些匹配需要查找“相等”
个联接！外联接的基本思想是，并不要求所联接的表中的
的列（相同的ID），所以认为这些查询是相等联接。
行必须匹配才能进入联接结果。所以有可能构建这样一些
另一种内联接是自然联接，这需要比较两个表中所有同名
外联接，它们总能得到所选表中的行而不论有什么匹配条
的列。所以自然联接实际上就是一个相等联接，只是其中
件。
用来确定联接的列是自动选择的。自然联接的这个自动特
外联接可以像内联接一样方便，这取决于数据库应用的特
性使之相对于常规内联接来说描述性有所减弱，因为查看
定需要。要更多地了解不同类型的联接及其如何使用，可
这种联接时无法明显地看出发生了什么，必须查看数据库
以参考《HeadFirst SQL》。
结构才能知道联接中使用了哪些列。
480
第8章
---
## Page 517
控制你的数据，世界在你手中
运行测试
改造Questionnaire脚本，利用一个查询来获取用户的响应。
使用内联接修改questionnaire.php脚本，从而利用一个查询就可以获取用户的响
应数据。将新脚本上传到你的Web服务器，然后在Web浏览器中导航到问卷。如果一切
顺利，你不会注意到任何差别.…不过你很清楚现在的脚本代码更棒！
借助于这个新的类别表，规
哈，我真是迫不及待想
范化Mismatch数据库不邵公容
要完成这个问卷，那些
易出错了。
奇慢的类别都不见了！
P
topie_id
esponse
user_id
topie_id
AOO.
How do you foel about each topic?
Appearance
Tattoos1
Leve Hatc
Gold chains:
Love Harte
Body piercings:
Love Hat
Cowboy boots:
Love (Hae
Long hair:
Love Hae
Mismatch问卷在后台的两个联接
Entertai
Realty TV:
Love Rate
的帮助下由响应，主题和类别表
Professional
动态生成。
wrestlng:
) Love  Hasc
现在数据库中
Horror movies:
CLove @Hatc
不再有重复数
Easy lisening music:  Love Hase
据，表单更为
The opera:
Love CHare
一致，用户不
Food
再感到困惑。
Sushi:
 Love Hate
Spam:
Love Hate
Spicy food:
Love (Hate
PDG
Peaeut butter &
Love  Hate
Martinis
Love Ha
你现在的位置
481
---
## Page 518
该配对了
我已经填完了问卷，我的互
补配对在哪里？我还在等
10
Sidney的问卷已
Food
经填完并已存储
Sushi:
Lov Hase
准备用来建立互
Spam:
(Lone H
补配对。
Spicy food:
Pranut butler &
Love Ha
Martinis
Love Hae
Leve Hae
Poopl
Howard Stere:
Bial Gates:
Lovt Hn
Love Ha
Barhara Streis
Levt Re
logh ilefner
Leve Rase
Leve Hate
Lose Hate
)Love Hatc
Leve ()Hate
1kiag
Leve @Hate
Leve ()Hac
Mismatch现在可以记住用户的响应，但是它对这些响应还没有任何处
理比如说为用户找到一个互补配对！
尽管已经有了用户响应数据集合，但在得到成功互补配对的道路上这只
完成了一半。Mismatch应用还缺少一种机制，能够将丘比特的爱情神箭
射人数据库来找到爱的“红线”。这需要以某种方式检查数据库中所有
PDG
用户的响应，查看谁是最理想的互补配对。
482
第8章
---
## Page 519
控制你的数据，世界在你手中
根据所有这些类别、主题和响应找出一
个理想的互补配对，这听起来相当复聚。
你确信这确实可行吗？
当然是可以的：我们只需要一种一致的方式计算两个用户之间
共有多少互补配对的主题。
如果提出一种简单的方法来计算两个用户之间的互补配对主题
数，就可以循环处理用户数据库完成用户的比较。对于给定用
户，互补配对数最高的那个人就是这个用户的最佳配对！
=互补配对！
补配对度”：