mations are relevant; namely the discretization interval length
of the spatial dimensions, the discretization interval for the
time step, and the truncation bounds. If a differential equation
solver like RKF or BDF is used, the time step is set adaptively
(for details see [25]). For uniformization, Poisson probabilities
are truncated instead which can be done a priori (for details
see [25]). The other values are set manually.
0.8
0.7
0.6
0.5
1
c
x
0.4
0.3
0.2
0.1
0.0
Function 1
Function 2
Function 3
0.0
1.0
2.0
3.0
4.0
5.0
t
Fig. 3. Filling of place c1 with the different ﬂow functions.
Example.(continued) The simple example is analyzed for
n1 = n2 = 1000 which implies that the resulting discrete
model has 2 million states. This value is sufﬁcient since a
further increase of ni changes the results only marginally. A
coarser discretization using n1 = n2 = 100 is not sufﬁcient
in particular for the third ﬂow function which introduces
a dependency between the ﬁlling of both ﬂuid places. The
relative difference in the time dependent ﬁlling of place c1
(and also c2) between the discretization with ni = 100 and
ni = 1000 goes up to 22%. This shows that a ﬁne discretiza-
tion is important but results in huge matrices and vectors.
Fig. 3 shows the time dependent ﬁlling of place c1 under the
different ﬂow functions. The results have been computed with
uniformization using the (exact) Kronecker representation of
the matrices, with a ﬂat vector and a truncation bound of 10−6
for the Poisson probabilities.
We analyze the small example with two variants of uni-
formization and two versions of RKF. For the ﬁrst version
of uniformization (unif) we set the truncation bound for the
Poisson probabilities to 10−3 and the truncation bound of the
HTD structure for the vector to 10−6. In the second version
(unif2) we choose truncation error 10−3 for the Poisson
probabilities and truncation bound 10−7 for the HTD structure.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:40 UTC from IEEE Xplore.  Restrictions apply. 

B(1234)


````````````

B(12)


HHHHHH
U(1)
U(2)
B(34)
!!!!!!!

HHHHHH
U(4)


U(3)
Fig. 2. HTD representation
Method mean
Func. 1
Func. 2
Func. 3
max mean
max mean
max
2.9% 9.9% 3.2% 9.7% 3.0% 9.4%
0.1% 0.5% 0.1% 0.3% 0.2% 0.6%
2.8% 9.4% 1.0% 5.0% 1.8% 4.8%
0.2% 0.8% 0.0% 0.0% 0.0% 0.1%
unif
unif2
rk
rk2
MEAN AND MAXIMAL RELATIVE ERRORS OF THE METHODS WITH HTD
VECTOR REPRESENTATION.
TABLE I
Func. 1 unif2
Func. 1 rk2
Func. 2 unif2
Func. 2 rk2
Func. 3 unif2
Func. 3 rk2
200000.0
150000.0
e
z
s
i
100000.0
50000.0
For RKF we use the explicit variant RKDP4(5) and choose the
local error bound and HTD truncation error equal to 10−4 for
the ﬁrst variant (RK) and local error and HTD truncation error
10−5 for the second variant (RK2). As a rule of thumb one
should choose similar values for the local error bound and the
truncation error in RKF, whereas in uniformization, where a
global truncation error is deﬁned for the Poisson probabilities,
the truncation bound for the HTD structure should be smaller
than the truncation bound for the Poisson probabilities divided
by α ∈ [0.01, 0.1] times the number of iterations necessary to
reach the Poisson truncation bound, which can be computed a
priori from the Poisson probabilities. Recall that the truncation
bound for the HTD structure translates to a truncation error
measured in the 2-norm of the vector approximation.
100000.0
80000.0
e
z
s
i
60000.0
40000.0
20000.0
0.0
0.0
Func. 1 unif
Func. 1 rk
Func. 2 unif
Func. 2 rk
Func. 3 unif
Func. 3 rk
1.0
2.0
3.0
4.0
5.0
Fig. 4. Memory requirements for the methods unif and rk.
t
With the four different methods we analyze the three versions
of the example for the interval [0, 5] and compute the ﬁlling
of the ﬂuid places at 100 equidistant
time points. Tab. I
includes the mean and maximal difference of the relative
error between the approximate solution with the HTD vector
299
0.0
0.0
1.0
2.0
3.0
4.0
5.0
Fig. 5. Memory requirements for the methods unif2 and rk2.
t
representation and the exact solution with the ﬂat vector. It
can be seen that for the variants unif and rk the relative errors
are all below 10%, whereas the other two variants yield very
good approximations. All results are much better than the
results one would obtain from a coarse discretization with
only 100 intervals. Memory requirements for the HTD vector
representation are shown in Fig. 4 for unif and rk and in Fig. 5
for unif2 and rk2. The ﬁrst two solution approaches with the
larger truncation bounds for the HTD structure have very low
memory requirements. RKF requires only about 20000 ﬂoating
point values to represent the vector with 2 million entries for
the ﬁrst two ﬂow functions. The third ﬂow function is more
complex such that the vector representation needs slightly
more memory. Uniformization with smaller HTD truncation
bound requires slightly more memory. In general the memory
requirements are in the range of the requirement of a ﬂat vector
representation for ni = 100. The methods unif2 and rk2 need
slightly more memory but it can be seen that for this small
example memory requirements are reduced by more than an
order of a magnitude even for these methods that compute
results with an accuracy that is sufﬁcient for most applications.
(cid:2)
V. NUMERICAL RESULTS
We also consider a relatively more complicated model
from [1]. It is that of the degrading software system with
rejuvenation, restart, and replication illustrated in Fig. 6. In
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:40 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 6. FSPN model of a degrading software system.
addition to the features of our running example, this model has
immediate transitions, and an arc multiplicity of K4 > 0. The
semantics of the triangles which are connected to transitions
is as follows. If a triangle is connected to a bidirectional
arc having two arrows, then the transition is enabled if each
place in the triangle contains at
is
connected by an inhibitor arc (that is, an arc with a small
circle), then the transition is enabled if none of the places in
the triangle contains a token. Firing of a transition does not
modify the marking of the places in connected triangles. The
FPSN has twelve discrete and two continuous places. The set
of immediate transitions is given by Ti = {t2,3, t3,3, t4,8}.
Upon ﬁring, transitions t3,1 and t4,1 ﬂush out both continuous
places, transitions t2,1, t4,4, and t4,8 ﬂush out continuous place
c2, and transition t4,6 ﬂushes out the discrete place p4,6.
least one token. If it
We assume that the ﬂuid upper bounds of the continuous
places c1 and c2 are normalized to 1. As in our running
example, we assume a ﬁring rate of 1 for the transitions
tf1 and tf2. However, contrary to the running example, these
transitions can be disabled due to the inhibitor arcs, yet the
ﬁring still does not modify the discrete marking. Transitions
t1,2, t2,2, t4,1, and t4,4 have marking dependent ﬁring rates
F (t1,2, M ) = 1/(mp1,1
(cid:8)
F (t2,2, M ) =
(x1 + 1)(x2 + 1)),
if x2 > 0.75
otherwise
100
0.0001
,
F (t4,1, M ) =m p1,1 (8x1 + 1)/2400,
F (t4,4, M ) =m p1,1 (8x2 + 1)/1920.
The remaining ﬁring rates given by
λ1,1 = λ3,1 = 0.2,
λ2,1 = λ4,2 = 1,
λ3,2 = 1/360,
λ4,3 = 0.1,
λ4,5 = 2,
λ4,6 = 0.32,
λ4,7 = 0.08
are constant. Transitions tf1 and tf2 ﬁll the adjacent continu-
ous places c1 and c2 respectively with ﬂow rate functions
R((tf1 , c1), M ) = mp1,1 /128
R((tf2 , c1), M ) = mp1,1 (x1 + 1)/96.
and
We use the following partition of the places
P (1) = {p1,1, p2,1, p2,2, p3,1, p3,2, p4,1, . . . , p4,6},
P (2) = {c1}, P (3) = {c2}
resulting in
T (1) = T ,
T (3) = {t2,1, t3,1, t4,1, t4,4, tf2
T (2) = {t3,1, t4,1, t4,8, tf1},
}.
Thus, we have one subnet with twelve discrete places and two
subnets with one continuous place each.
From our 5th assumption, for transitions
t1,1, t2,1, t3,1, t3,2, t4,2, t4,3, t4,5, t4,6, t4,7
with constant ﬁring rates, we have
F (tk, M ) = λtk g
(1)(tk, M
(1))g
(2)(tk, M
(2))g
(3)(tk, M
(3)),
where
λtk
= λk
and
(j)(tk, M
g
(j)) = 1
for j = 1, 2, 3.
For the marking dependent ﬁring rates, we have
(1)(t1,2, M
(2)(t1,2, M
(3)(t1,2, M
(1)(t2,2, M
(2)(t2,2, M
(3)(t2,2, M
λ1,2 = 1,
(1)) = 1/mp1,1 ,
(2)) = 1/(x1 + 0.5),
(3)) = 1/(x2 + 0.5),
λ2,2 = 1,
(1)) = 1,
(cid:8)
(2)) = 1,
(3)) =
100
0.0001
λ4,1 = 1/2400,
(1)) =m p1,1 ,
(2)) = 8x1 + 1,
(1)(t4,1, M
(2)(t4,1, M
g
g
g
g
g
g
g
g
300
if x2 > 0.75
otherwise
,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:40 UTC from IEEE Xplore.  Restrictions apply. 
(3)(t4,1, M
(1)(t4,4, M
(2)(t4,4, M
(3)(t4,4, M
(3)) = 1,
λ4,4 = 1/1920,
(1)) = mp1,1 ,
(2)) = 1,
(3)) = 8x2 + 1.
g
g
g
g
Regarding assumption 6, for i = 1, 2 we can write
R((tfi , ci), M ) = λtfi f
(1)
in ((tfi , ci), M (1))
(3)
in ((tfi , ci), M (3)),
(2)
in ((tfi , ci), M (2))f
f
In both cases, 7 macro states are necessary to represent the
reachable state space in compositional form. For the discretiza-
tion of the ﬂuid places we choose ni ∈ {50, 500, 5000}
(i = 1, 2). The example is analyzed in the interval [0, 100]
starting with the discrete marking shown in Fig. 6 and empty
ﬂuid places. For the analysis uniformization is applied, Poisson
probabilities are truncated with bound 0.001. Experiments are
performed on a PC with 16GB main memory, Intel i7 3.6Ghz
CPU with 8 cores. However, the algorithms use only one core
currently.
Measure
states
non-zeros
nz struct
nz htd 0.1
nz htd 0.01
time ﬂat
time struct
time htd 0.1
time htd 0.01
50/50
30,606
184,250