1e6
Traffic Above Recursive DNS Servers
4.5
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
e
m
u
o
V
l
1e7
Traffic Below Recursive DNS Servers
8
7
6
5
4
3
2
1
e
m
u
o
V
l
0.0
D e c 0 1 2 0 1 1
D e c 0 2 2 0 1 1
D e c 0 3 2 0 1 1
D e c 0 4 2 0 1 1
D e c 0 5 2 0 1 1
D e c 0 6 2 0 1 1
All
NXDOMAIN
Akamai
Google
0
D e c 0 1 2 0 1 1
D e c 0 2 2 0 1 1
D e c 0 3 2 0 1 1
D e c 0 4 2 0 1 1
D e c 0 5 2 0 1 1
D e c 0 6 2 0 1 1
All
NXDOMAIN
Akamai
Google
Figure 2: Trafﬁc proﬁle of fpDNS dataset, from 12/01/2011 to 12/06/2011.
s
t
s
e
u
q
e
R
f
o
r
e
b
m
u
N
108
107
106
105
104
103
102
101
100
Lookup Volume Distribution 02/01
0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8
1e7
Sorted Resource Records
1.00
0.98
0.96
F
D
C
0.94
0.92
0.90
0.88
Domain Hit Rate of All RRs 02/01
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Domain Hit Rate
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
CHR of 11/10/2011
Cache Hit Rate Estimate of 2011
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Cache Hit Rate
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Cache Hit Rate
(a) Lookup Volume
(b) Domain Hit Rate
Figure 3: Long tail of lookup volume and domain hit rate.
popular 2LD zones, Google and Akamai 1, and placed them
alongside the overall numbers. Google reﬂects user-driven
behavior, such as checking emails or web searches. Zones
from Akamai reﬂect the DNS activity for the largest content
delivery network. These two popular zones collectively
account for less than half of the total DNS trafﬁc, which
clearly shows that
there are other zones contributing a
non-negligible portion of trafﬁc to our fpDNS dataset.
Additionally we plot in Figure 2 the unsuccessful DNS
resolutions (NXDOMAIN). The NXDOMAIN trafﬁc con-
stitutes almost 40% of the trafﬁc above the RDNS servers,
and only 6% of trafﬁc below the RDNS servers. This is
likely because the resolvers in the monitored networks were
not honoring the negative cache, ignoring RFC2308 [23].
We consider the long tail of lookup volume to be domain
names that receive fewer than 10 lookups per day. In fact,
more than 90% of all RRs have lookup volumes lower than
10 on 02/01/2011 (Figure 3a). Moreover, the long tail of
lookup volume increased from 90% to 94% in 2011.
2) DNS Cache Hit Rates: In order to present the cache
hit rate (CHR) observations from the fpDNS dataset, we
ﬁrst deﬁne domain hit rate. We consider the domain hit rate
of an object in the following way:
DHR(object) = N umber of Cache Hits in a Day
N umber of T otal Queries in a Day (1)
We consider a resource record to be the storage object
in the cache. Every cache hit corresponds to an answer
1Google: google.com. Akamai: akamai.com, akamai.net, akamaiedge.net,
akamaihd.net, edgesuite.net, akamaitech.net, akadns.net, akam.net.
601
(a) CHR of 11/10/2011
(b) CHR of 2011
Figure 4: Cache hit rate distribution from fpDNS.
issued from the RDNSs observed below the recursive DNS
servers that does not trigger a cache miss. Every cache miss
corresponds to an answer issued to the RDNSs observed
above the recursive DNS servers. The number of all queries
is simply the sum of the answers seen below the recursive
DNS servers.
The domain hit
rate distribution shows the caching
performance of all distinct RRs. For example, Figure 3b
presents the cumulative distribution of DHR for 02/01/2011.
We can see that 89% of all RRs have domain hit rate of
0%, as part of the DNS long tail phenomenon. Here, we
consider the long tail of domain hit rate to be domain
names with domain hit rate of 0%. Also, we observe that
the percentage of RRs with zero domain hit rate increased
from 89% to 93% in 2011.
Based on domain hit rate, we deﬁne cache hit rate. Given
our visibility above and below the recursive DNS servers,
and our inability to gain access to the actual recursive DNS
software, we choose to treat the recursive DNS servers as a
“black box”. In the renewal counting process [21], we are
interested in the number of cache hits every time an object
is updated in the cache, i.e., every time there is a cache
miss. However, we are unable to track the exact hits per
cache miss, so we simplify all the hit rates for the same RR
as the domain hit rate for the day. For instance, an object
can trigger one cache miss with three queries, and another
cache miss with two queries, resulting in 0.66 and 0.5 cache
hit rate values, respectively. However, what we can measure
is that the object triggered 2 cache misses and there were
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:42 UTC from IEEE Xplore.  Restrictions apply. 
Number of New RRs Observed Each Day
108
107
106
105
e
m
u
o
V
l
104
1 1 - 2 8
1 1 - 3 0
1 2 - 0 2
All
1 2 - 0 4
Akamai
1 2 - 0 6
1 2 - 0 8
1 2 - 1 0
Google
Figure 5: Deduplicated new resource records per day in the
rpDNS Datasets from 11/28/2011 until 12/10/2011.
5 total queries for the object in a day, so we consider the
cache hit rate to be 0.6 for all 2 misses. More formally, we
deﬁne the cache hit rate of an object as following:
CHRi(object) = DHR(object) (i = 1, 2, 3, ...n) (2)
n = Number of Cache Misses in a Day.
The cache hit
rate distribution is
the cumulative
distribution of all CHRi values for all RRs. Figure 4a
presents the distribution of CHR for 11/10/2011. The CDF
looks like a slightly skewed linear line. The ﬁgure shows that
58% cache hit rates are lower than 50%. We also measured
the CHR distribution from 13 days (in 2011), which can be
seen in Figure 4b. The long-term cache hit rate distribution
also follows a similar skewed linear line. Although the dis-
tribution approximates each cache hit rate value by the same
domain hit rate in the day, we show in Section IV-B that this
type of distribution can distinguish between disposable zones
and non-disposable zones accurately. Since the distribution
reﬂects the effect of query volume, domain hit rate, and
implicitly the TTL, we are able to capture all the information
in our classiﬁcation process by using this distribution.
3) DNS Deduplication: We built a reduced passive DNS
dataset from our full passive DNS dataset, using 13 days of
trafﬁc from 11/28/2011 until 12/10/2011. We deduplicated
all the resource records seen during these 13 days, yielding
413,753,934 unique resource records in total.
The volume distribution of newly observed RRs for each
day in the rpDNS dataset is shown in Figure 5. It is worth
noting that the number of new RRs observed every day
decreased by 13,614,102 (30%) on the 13th consecutive
day. Looking at the new Akamai RRs, we also observed a
slight decrease by 128,957 (69%) records on the 13th day.
An important 2LD zone we explicitly examine here is
google.com. Despite what we saw as trends from Akamai
and the overall rpDNS dataset, Google increases its daily
new RRs by 4,264,585 (25%) on the 13th consecutive day.
In fact, Google went from 17,015,510 new unique RRs the
ﬁrst day to 21,280,095 new unique RRs the 13th day.
An even more interesting observation is that Google
operates 58% of all the RRs in the overall rpDNS dataset.
Looking into the actual percentage of unique RRs every day,
Google is responsible for the 37% of the unique RRs on the
ﬁrst day. However, it is responsible for 66% of unique new
RRs on the 13th day. It means that Google is constantly
producing new RRs as part of its normal DNS operation and
these RRs are not reused, effectively making them temporary
or “one-time”. In Section V-C, we will elaborate on this DNS
phenomenon. We will see that Google utilizes a large num-
ber of disposable domains, for what appears to be a measure-
ment experiment over DNS. Below in Section VI, we argue
that such use is disposable when the cache hit rate is low
or zero, and the TTL is nonetheless non-zero (i.e., placing
records in cache that will never be re-queried). In the fol-
lowing section, we will precisely deﬁne disposable domains.
IV. DEFINING DISPOSABLE DOMAINS
In this section, we deﬁne disposable domain names and
elaborate on two key properties: the structure of the DNS
zone that facilitates resolutions for disposable domain names
and the cache hit rates observed from disposable resource
records. Disposable domain names are successfully resolved
domain names that have the following two properties:
1. Their name
strings
automatically generated.
Namely, some software generates them in bulk using
an algorithm.
are
2. The RRs under a given zone are only observed once,
or a handful of times, when they are in the recursive
DNS servers’ cache. More formally, the RRs of child
domains under the zone have a low or close to zero
median value in cache hit rate distribution 2.
The ﬁrst property helps us focus on domain names
generated automatically. However, being automatically
generated is a necessary but
insufﬁcient condition to
characterize a domain as disposable. In order to fully
capture the notion of disposable domains, we must examine
their caching properties. An automatically generated domain
should be marked as disposable when the cache hit rate of
its resource record is very low, and all RRs under the same
zone, that are effectively generated by the same algorithm,
share similarly low cache hit rates.
Note that because of the deﬁnition of the cache hit rate,
domains under a zone could be disposable in one network
but not another. Since we focused on discovering disposable
zones in our network’s trafﬁc,
this deﬁnition allows us
to ﬁnd these zones and does not preclude our approach
from generalizing to other networks. Comparing disposable
zones among different networks can help discover globally
disposable zones. Due to the coverage of our ISP, however,
we expect many of the disposable zones discovered in our
network to be disposable in other networks as well.
A. Motivating the DNS Zone Structure
In this subsection we provide three real world examples
of zones that facilitate resolutions of disposable domain
2Cache hit rate distribution is deﬁned in Section III-C2.
602
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:42 UTC from IEEE Xplore.  Restrictions apply. 
147!77#77"( 4 4
147!77#77"( 4 4
147!77#77"( 4 4
147!77#77"( 4 4
147!77#77"( 4 4
+7 :#!":4
!:+'&1":4
.::++  . ."":4