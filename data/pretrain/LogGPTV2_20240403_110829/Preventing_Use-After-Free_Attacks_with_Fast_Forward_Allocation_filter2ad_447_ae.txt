clear what the correct behavior would be for more complex in-
vocations of mmap. For example, how should FFmalloc handle
a request that contained the MAP_FIXED flag? If the specified
region was not previously used, FFmalloc could allow the call
to succeed and then remember to not re-use that range in the
future. But, if the desired address range overlapped with a
region previously returned by mmap or was previously used
by FFmalloc, should FFmalloc fail the call? Blocking the call
and returning a failure code could break perfectly legitimate
functionality and would negate the ability of FFmalloc to be a
drop-in replacement for the glibc allocator. Allowing the call
to succeed risks a bypass of its protection which calls into
question the value of wrapping mmap at all.
Randomization. Address space layout randomization
(ASLR) is widely deployed on modern systems to provide
probabilistic protection against various attacks. One can be
concerned that FFmalloc may diminish the effectiveness of
ASLR due to its sequential allocation scheme. However, such
concern does not exist for FFmalloc. ASLR randomizes mem-
ory on the module granularity, which contains a large number
of pages, including code and data. FFmalloc allocates its first
pool offset from the randomly assigned default heap. In this
way, FFmalloc is fully compatible with ASLR and delivers the
security benefits of ASLR to its users. Different from ASLR,
the deterministic allocation could be a weakness in case the
attack abuses relative heap layout. For example, in case of a
heap buffer overflow attack, crafting an exploit would become
easier if the adjacent heap chunks affected by the overflow
stay at a deterministic relative location. We note that with
a small modification to the allocation algorithm, FFmalloc
could render the relative heap layout in a non-deterministic
way without conflicting our original design goals. We leave
the changes to future work.
USENIX Association
30th USENIX Security Symposium    2465
-7-5051015Timeoverhead(%)45.063.249.854.848.457.2Free32,UFree32,AFree8,UFree8,AFree2,UFree2,Aperlbenchbzip2gccmcfmilcnamdgobmkdealIIsoplexpovrayhmmersjenglibquantumh264reflbmomnetppastarsphinx3xalancbmkGEOMEAN01x2x3x4x5x6x7xMemory7.6x7.6x7.6x8.6x199.5x199.5x199.5x47.3x79.2x17.0x79.2x79.2x9.0x111.0x111.0x111.0x7.2 Suitability
While FFmalloc is only a prototype of an OTA allocator, its
success at running all SPEC and PARSEC benchmarks, unlike
many of the other tested systems, demonstrates the feasibility
of using it with real workloads. However, the results of tests
like gcc and dedup indicate that it may not be appropriate for
all applications.
Strengths. Compared to many other systems, FFmalloc pro-
vides a hard, rather than probabilistic, guarantee that it can
prevent use-after-free exploitation unless the entire applica-
tion address space is used. This guarantee is useful in remotely
accessible applications since an attacker may have repeated
opportunities to trigger an exploit. In many cases, this protec-
tion comes with one of the lowest CPU overheads relative to
alternate systems.
FFmalloc should also be a good choice for use in embedded
systems with limited CPU resources, provided they utilize a
64-bit address space. Unlike multiple other systems, FFmalloc
does not require an auxiliary thread, typically assumed to be
running on a different core than the main application thread,
for garbage collection or similar pointer analysis to achieve
its performance level.
Weaknesses. Admittedly, the performance of FFmalloc suf-
fers significantly under certain scenarios. FFmalloc batches
calls to munmap by waiting until a configurable number of con-
secutive pages have been freed before returning them to the
operating system. Necessarily, this means that applications
that free larger allocations will require more munmap calls than
those with small allocations. For example, given the default
8-page threshold, a minimum of 2048 16-byte allocations
would need to be freed before munmap was called versus only
32 freed 1KB allocations.
Additionally, applications that very frequently allocate and
deallocate objects of similar sizes will be slower than with
glibc. In this case, glibc can recycle the same few alloca-
tion sites repeatedly which reduces cache line misses and
avoids system calls for additional address space. In contrast,
FFmalloc, will be slowed down by significantly higher num-
ber of system calls, even with the batching mechanisms in
place.
In addition to the above, FFmalloc can struggle to scale on
multi-threaded applications. Even if FFmalloc eliminated all
locks from its design, calls to mmap or munmap get serialized
within the kernel. Applications that frequently allocate and
deallocate objects across threads will end up getting serialized
as a result. Proposed revisions to break up the mmap-sem lock
in the kernel [17] will likely strongly benefit FFmalloc in this
scenario if implemented.
In terms of memory overhead, FFmalloc is weakest when
applications allocate objects with different lifetimes simulta-
neously. When a long lived object is allocated alongside short
lived objects it could eventually become the lone allocation
preventing unmapping an otherwise unused page or even run
of pages. The smaller the object, the higher the impact on
memory overhead will be.
Finally, as currently implemented, FFmalloc only provides
protection against use-after-free, double-free, and invalid-free
vulnerabilities. Protecting against various overflow, overread,
or underread type attacks was intentionally omitted to focus
on engineering a solution to the OTA problem.
Comparision with Alternatives. FFmalloc compares favor-
ably to other use-after-free focused solutions. By focusing on
attack prevention rather than detecting vulnerable pointers,
FFmalloc’s design is simpler and results in generally higher
performance.
Most competitive with FFmalloc is MarkUs. It incorpo-
rates garbage collection techniques to verify that there are
no dangling pointers to freed allocations. As discussed ear-
lier, in our test environment MarkUs has broadly better mem-
ory overhead but somewhat worse performance overhead
than FFmalloc, though the gap can be narrowed by having
FFmalloc return pages more frequently
In contrast to use-after-free specific solutions, FreeGuard
provides tunable probablistic protection against a broad range
of attack types. Its strong performance characteristics and
breadth of claimed defended attacks on the surface make it an
attractive alternative to glibc or single focus secure allocators.
However, this probablistic protection could often be of limited
value. For example, FreeGuard protects against buffer over-
reads via use of randomly placed guard pages. In their paper,
the authors note that under default settings, FreeGuard only
terminated execution of a vulnerable OpenSSL server when
attacked by Heartbleed ten percent of the time. Additionally,
they claim to mitigate against certain heap overflow attacks
by virtue of not placing heap metadata inline as with glibc.
This is essentially standard practice by secure allocators in
the literature. By this standard, FFmalloc could also claim
limited protection against heap overflow. Instead we consider
this metadata segregation to be for the security of the allocator
rather than the heap.
8 Related work
Secure Allocators. Object-per-page allocators such as
Archipelago [30] and Electic Fence [39] place each object
on an individual page to detect memory safety issues. They
can prevent buffer overflows by placing inaccessible pages be-
tween objects and can limit use-after-free exploitation by ran-
domizing the reuse of freed pages. However, these approaches
are limited to an application that has few live objects or as
debugging tools due to their large overhead resulting from the
page-granularity of an object.
DieHarder [37] is the security-focused evolution of
DieHard [14], which was designed to prevent programs from
crashing due to memory corruption bugs. DieHarder simu-
lates an infinite heap where no allocations adjoin each other.
2466    30th USENIX Security Symposium
USENIX Association
The gaps between allocations resist buffer overflow attacks,
and randomized allocation can guarantee address space not
being reused probabilistically. FreeGuard [43] provides better
performance than DieHarder by adopting techniques from
performance-oriented allocators (e.g., free lists per size class).
As a result, FreeGuard can achieve similar performance to the
default Linux allocator with significant security improvement,
but failed to reach a similar security level to DieHarder’s.
Recently, Guarder [44] is proposed to bridge this gap as an
evolved version of FreeGuard. It substantially increases its
randomization entropy, but has similar performance overhead
compared to FreeGuard by introducing new techniques to
manage small objects and adjusting tradeoffs between perfor-
mance and security. Unlike these approaches that probabilis-
tically prevent use-after-free bugs, OTA can completely stop
them by guaranteeing one-time allocation. However, OTA is
more modest in only attempting to prevent use-after-free bugs
and its variations such as invalid free and double free.
Cling [13] restricts memory reuse within objects of the
same type rather than completely disabling it. It argues that
this design severely limits an attacker on exploiting use-after-
free vulnerabilities while retaining efficient memory usage.
However, this does not completely block use-after-free ex-
ploitation. Rather, it requires the attacker to control a new
matching type object rather than any suitably sized one. Sim-
ilar to OTA, Oscar [18] also prevents use-after-free by em-
ploying a forward only allocation principal. It simulates the
object-per-page style allocator using shadow memory to over-
come the high memory overhead of placing each object on
discrete pages. Despite its improvement on earlier work [19],
it still imposes significant overhead in the form of expensive
memory mapping system calls compared to OTA.
Pointer Invalidation. An alternative approach to preventing
use-after-free attacks is to invalidate dangling pointers when
the object is freed. DangNull [27] keeps track of all point-
ers to all allocated objects, and explicitly nullifies pointers
once the pointed-to object is freed. FreeSentry [49] takes a
similar approach as DangNull, except that it flips the top-bit
of the pointer to make it an invalid address. This helps pre-
serve context when reviewing crash dumps. DangSan [47]
improves the performance of this technique on multi-thread
applications, with the help of an append-only per-thread log.
pSweeper [29] avoids live tracking of pointers by concur-
rently scanning memory to find dangling pointers. Instead
of proactively destroying dangling pointers, CRCount [42]
waits for the program to reset all such pointers; it frees an
object only if the reference counter for the pointer becomes
zero. MarkUs [12] is similar to CRCount, except that it starts
scanning from the stack, global memory and registers. These
schemes usually impose significant CPU and memory over-
head due to the difficulty of tracking pointers in C code.
Use-After-Free Detection. CETS [35] inserts additional
metadata at the program runtime, a lock for each object and
a key for each pointer. During the object creation, it initial-
izes the lock for the object and assigns the corresponding
key to the pointer. During the program execution, the key
is propagated together with the pointer and the lock is reset
when its corresponding object is freed. Thus, any memory
access with a dangling pointer will be detected and blocked
by checking its key. Since CETS needs to maintain a key for
each pointer and to compare key and lock for each memory
access, it introduces substantial overhead.
Undangle [16] utilizes dynamic taint analysis to track the
propagation of pointers, and detects the use-after-free bug if
the source of the pointer has been freed. Due to the heavy
runtime overhead of taint analysis, Undangle is impractical
for real-world deployment.
Valgrind [36] and AddressSanitizer [40] can detect memory
errors including use-after-free by checking the validity of
memory accesses. Since they are designed for debugging,
not for security, an advanced attacker can easily bypass their
mechanisms. For example, researchers already have shown
that use-after-free is still exploitable under AddressSanitizer
by exhausting its fixed-size quarantine for freed memory [27].
Project Snowflake [38] adds manual memory management
to a garbage-collected runtime. It introduces the notion of a
shield which tracks references to unmanaged memory and
can only be created by the reference owner. Even after the
owning reference is deleted, the memory will not be reused
until all shields have been destroyed as well.
9 Conclusion
We designed and implemented a memory allocator based on
the one-time allocation (OTA) principal, aiming to prevent
exploitation of use-after-free bugs. OTA provides a distinct
memory chunk for each memory request, where attackers can-
not reclaim the freed memory and thus cannot overwrite the
content for exploitation. We explored several design choices
and found the optimal ones to reduce the overhead of our
prototype. The evaluation shows that OTA can prevent real-
world use-after-free exploits effectively and efficiently.
Acknowledgment
We thank the anonymous reviewers, and our shepherd, An-
drea Lanzi, for their helpful feedback. This research was
supported, in part, by the NSF award CNS-1563848, CNS-
1704701, CRI-1629851 and CNS-1749711 ONR under grant
N00014-18-1-2662, N00014-15-1-2162, N00014-17-1-2895,
DARPA AIMEE, and ETRI IITP/KEIT[2014-3-00035], and
gifts from Facebook, Mozilla, Intel, VMware and Google.
References
[1] CODEGATE 2018 CTF. https://codegate.org.
[2] CVE-2015-6835.
CVE-2015-6835.
https://nvd.nist.gov/vuln/detail/
USENIX Association
30th USENIX Security Symposium    2467
[3] Exploit Database. https://www.exploit-db.com/.
[4] Hacker One Community. https://www.hackerone.com/.
[5] PHP 5.4.44 Use-After-Free Vulnerability.
https://www.
exploit-db.com/exploits/38123.
[6] PHP 5.5.14 Use-After-Free Vulnerability. https://hackerone.com/
reports/73235.
[7] PHP 7.0.7 Use-After-Free Vulnerability. https://hackerone.com/
reports/73235.
[8] pwnable.kr wargame. https://pwnable.kr.
[9] pwnable.tw wargame. https://pwnable.tw.
[10] SECUINSIDE 2017 CTF. https://secuinside.com.
[11] Muhammad Abid.
Raytrace running infinitely.
https:
//lists.cs.princeton.edu/pipermail/parsec-users/
2010-January/000620.html.
[12] Sam Ainsworth and Timothy Jones. MarkUs: Drop-in Use-after-free
Prevention for Low-level Languages. In Proceedings of the 41st IEEE
Symposium on Security and Privacy (Oakland), May 2020.
[13] Periklis Akritidis. Cling: A Memory Allocator to Mitigate Dangling
Pointers. In Proceedings of the 19th USENIX Security Symposium
(Security), Washington, DC, August 2010.
[14] Emery D. Berger and Benjamin G. Zorn. DieHard: Probabilistic Mem-
ory Safety for Unsafe Languages. In Proceedings of the 2006 ACM
SIGPLAN Conference on Programming Language Design and Imple-
mentation (PLDI), Ottawa, Canada, June 2006.
[15] Jeremy Brown. Libmimedir VCF Memory Corruption Proof Of
Concept. https://packetstormsecurity.com/files/132257/
Libmimedir-VCF-Memory-Corruption-Proof-Of-Concept.
html.
[16] Juan Caballero, Gustavo Grieco, Mark Marron, and Antonio Nappa.
Undangle: Early Detection of Dangling Pointers in Use-After-Free
and Double-Free Vulnerabilities. In Proceedings of the International
Symposium on Software Testing and Analysis (ISSTA), Minneapolis,
MN, July 2012.
[17] Jonathan Corbet. How to get rid of mmap_sem. https://lwn.net/
Articles/787629/.
[18] Thurston H.Y. Dang, Petros Maniatis, and David Wagner. Oscar: A
Practical Page-Permissions-Based Scheme for Thwarting Dangling
Pointers. In Proceedings of the 26th USENIX Security Symposium
(Security), Vancouver, BC, Canada, August 2017.
[19] Dinakar Dhurjati and Vikram Adve. Efficiently Detecting All Dangling
Pointer Uses in Production Servers. In Proceedings of International
Conference on Dependable Systems and Networks (DSN’06), 2006.
[20] Yu Ding, Tao Wei, TieLei Wang, Zhenkai Liang, and Wei Zou. Heap
Taichi: Exploiting Memory Allocation Granularity in Heap-spraying
Attacks. In Proceedings of the Annual Computer Security Applications
Conference (ACSAC), 2010.
[21] Jason Evans. jemalloc: Memory Allocator. http://jemalloc.net/.
[22] Antonio Franques. Can anyone provide detailed steps to fix Host x264?
https://github.com/cirosantilli/parsec-benchmark/
issues/3.
[23] Dinko Galetic and Denis Kasak. Use-After-Free Leading to An Invalid
Pointer Dereference. https://hackerone.com/reports/213261,
2017.
[24] Sanjay Ghemawat. TCMalloc : Thread-Caching Malloc. https:
//gperftools.github.io/gperftools/tcmalloc.html.
[25] Wolfram Gloger. Wolfram Gloger’s Malloc Homepage. http://www.
malloc.de/en/.
[26] Will Glozer. wrk - A HTTP Benchmarking Tool. https://github.
com/wg/wrk, 2019.
[27] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Tae-
soo Kim, Long Lu, and Wenke Lee. Preventing Use-after-free with
Dangling Pointers Nullification. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, February 2015.
[28] John Leitch.
Issue 24613: array.fromstring use after free. https:
//bugs.python.org/issue24613.
[29] Daiping Liu, Mingwei Zhang, and Haining Wang. A Robust and Effi-
cient Defense Against Use-after-Free Exploits via Concurrent Pointer
Sweeping. In Proceedings of the 25th ACM Conference on Computer
and Communications Security (CCS), Toronto, ON, Canada, October
2018.
[30] V Lvin, G. Novark, E. Berger, and B Zorn. Archipelago: Trading
Address Space for Reliability and Security. In ACM SIGPLAN Notices,
volume 43, 2008.
[31] Matt Miller.
the
Trends, Challenges, and Strategic Shifts
Landscape.pdf.
Software Vulnerability Mitigation
in
https://msrnd-cdn-stor.azureedge.net/bluehat/
bluehatil/2019/assets/doc/Trends%2C%20Challenges%
2C%20and%20Strategic%20Shifts%20in%20the%20Software%
20Vulnerability%20Mitigation%20Landscape.pdf,
BlueHat IL.
2019.
[32] mruby Organization. mruby: Lightweight Ruby. https://mruby.
org/, 2019.
[33] Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. Watch-
dog: Hardware for Safe and Secure Manual Memory Management and
Full Memory Safety. In Proceedings of the 39th Annual International
Symposium on Computer Architecture (ISCA), 2012.
[34] Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. Watch-
dogLite: Hardware-Accelerated Compiler-Based Pointer Checking. In
Proceedings of Annual IEEE/ACM International Symposium on Code
Generation and Optimization (CGO), 2014.
[35] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve
Zdancewic. CETS: Compiler Enforced Temporal Safety for C. In
Proceedings of the 2010 International Symposium on Memory Man-
agement (ISMM), Toronto, Canada, June 2010.