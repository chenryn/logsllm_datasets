---
## Page 231
接受单一参数，这是walk-directory所要求的，但该函数还用到了由外围LET所引入的变量
例如，在下面的函数中（你在第25章里还会再次看到它)，FLeT所定义的函数count-version
数带有更少参数的形式。这在你需要传递一个只接受单一参数作为函数参数的函数时尤为方便。
所以这些函数可能是闭包。
函数对象，并且因为一个FLET或LABELS可以定义在其他诸如LET这样的绑定形式的作用域内，
括使用FUNCTION特殊操作符。由于可以使用FUNCTION来获得代表FLET或LABELS所定义函数的
个局部函数。
局部函数也是有用的，被调用的同名函数可能是一个全局定义的函数或是来自外围作用域的另一
Common Lisp同时提供了FLET和LABELS，这是因为有时能够编写出一个调用另一个同名函数的
来定义递归函数，而FLET就不行。FLET不能用来定义递归函数虽然看起来是一种限制，但
LABELS所引I入的名字却可以立即使用，包括LABELS所定义的函数本身。这样，LABELS可以用
其中每个function-definition具有下面的形式:
以及
用。两者具有相同的基本形式，看起来像下面这样：
LAMBDA表达式更复杂的局部函数，或是将多次使用的局部函数时，这些特殊操作符将会非常有
定义一个函数，使其只能在FLET或LABELS形式的作用域内被访问。在你需要一个比内联定义的
以及通过SYMBOL-MACROLET创建一种特殊类型的宏，称为符号宏（symbol macro）。
局定义的，但也可能通过特殊操作符FLET和LABELS创建局部函数，通过MACROLET创建局部宏，
所创建的绑定。
SETQ特殊操作符是一种用来访问词法环境的特殊操作符，因为可以用它设置那些由LET和LET*
量绑定。任何诸如DO或DOTIMES这类绑定了词法变量的构造都将被展开成一个LET或LET*?。
前面已经讨论的LET和LET*就是用于维护词法环境的特殊操作符，因为它们可以引人新的词法变
versions:
因为局部函数可以引用来自其外围作用域的变量，所以它们通常可以书写成比等价的辅助函
在一个FLET或LABELS的主体内，你可以像任何其他函数那样使用这些局部函数的名字，包
LET允许你引人一个词法变量，其作用域是LET形式的主体；同样，FLET和LABEL可以让你
不过，变量并不是唯一可以在词法作用域里命名的东西。虽然大多数函数都是通过DEFUN全
214
①从技术上来讲，这些构造也可以展开成一个LAMBDA表达式，正如我在第6章里所提到的，因为LET可以被定义成
FLET与LABELS之间的区别在于，由FLET所定义的函数名只能在FLET的主体中使用，而由
(name (parameter*) form*)
(labels (function-definition*)
(flet (function-definition*)
一个展开成对匿名函数调用的宏，而在一些早期的Lisp实现里确实就是这样做的。
body-form*)
body-form*)
第 20章
特殊操作符
www.TopSage.com
---
## Page 232
值的位置上对该符号的任何使用将被展开，由此产生的形式将在该位置上进行求值。这就是诸如
只能用单个符号而非列表的形式来引用它。换句话说，当定义了一个特定名字的符号宏以后，在
号宏（symbol macro）的特殊类型的宏。符号宏和常规的宏相似，只是不能接受任何参数，并且
种用法。
只用于这些代码中的构造，或是覆盖一个全局定义的宏。你将在第31章里看到MACROLET的后-
也适用于宏生成的代码——通过将一些用户提供的代码包装进一个MACROLET，一个宏可以提供
宏定义，或是来自外围形式的局部定义。与FLET和LABELS一样，MACROLET可以被直接使用，
的工作方式与DEFMACRO定义的全局宏一样，只是并不作用在全局名字空间上。求值一个MACROLET
CALL-NEXT-METHOD这种只能在一个方法的定义内使用的函数的原因。
也可以只作为一种组织宏所生成的代码的方式。举个例子，这就是为什么能够定义出像
或LABELS，用来创建可在宏主体中使用的函数。这个技术既可用来引入宏的用户要调用的函数，
要再次注意，在walk函数里可以引用变量leaves，它是由外围的LEr引人的。
逆以后）由collect-leaves返回：
用递归的辅助函数wa1k来遍历一棵树，并把树中所有的原子收集到一个列表里，该列表（在求
递归的辅助函数定义成全局函数时，可以使用LABELS。例如，下面的函数collect-leaves使
--个有意义的名字更易于阅读它。
最后，还有一个定义宏的特殊操作符SYMBOL-MACROLET，它定义了一种名副其实的称为符
FLET和LABELS在用于宏展开时也是相当有用的一
①听起来可能令人惊讶，但确实有可能使匿名函数成为递归的。不过，你必须使用一种称为“Y组合器”(Y combinator)
一个与FLET和LABELS紧密相关的特殊操作符是MACROLET，它可以用来定义局部宏。局部宏
另外，当一个辅助函数需要进行递归时，使用匿名函数不可能做到这点。“当你不想把一个
(defun collect-leaves (tree)
这个函数也可以写成在FLET定义的count-version位置上使用一个匿名函数，给这个函数
(defun count-versions (dir)
的古怪手法。Y组合器属于一种有趣的理论结果，并非实用的编程工具，因此完全在本书的讨论范围之外。
(let ((leaves ()))
(let
(nreverse leaves)))
(labels ((walk (tree)
versions))
(walk-directory dir #'count-version :test #'mp3-p))
(walk tree))
({versions
(incf (cdr (assoc (major-version (read-id3 file)) versions)))))
(cond
((null tree))
(atom tree)
(walk (cdr tree)))/))
(walk
(car
#'(lambda (x)(cons x 0))'(2 3 4))))
(push tree leaves))
www.TopSage.com
tree))
一个宏的展开代码里可以含有一个FLET
20.2维护词法环境
215
---
## Page 233
其中的name是一个符号，而form是一些Lisp形式。这些形式按顺序进行求值，最后那个形式的
构，这种结构是目前你所见到的所有更上层循环结构的基础。
中立即返回的方式，但它还有更一般的用途。另外的TAGBODY和GO提供了一种相当底层的goto结
一起使用时，可以立即从一段代码中返回我在第5章里讨论过的将RETURN-FROM作为一种从函数
而非定义新的函数和宏。我曾经提到过这四个特殊操作符，因为它们提供了其他语言特性用到的
20.3
SYMBOL-MACRO来定义全局的符号宏。
#:g149 'x)。
可以展开成使用SYMBOL-MACROLET的下列代码：
态的。例如，下面的WITH-SLOTS形式：
值作为整个BLOCK的值返回，除非有一个RETURN-FROM用来从块结构中提前返回。如同你在第5
底层机制。它们是BLOCK、RETURN-FROM、TAGBODY和GO。前两个操作符BLOCK和RETURN-FROM
符号宏通常都是局部的，由SYMBOL-MACROLET定义，CommonLisp也提供了一个宏DEFINE-
216
①WITH-SLOTS不一定非要用SYMBOL-MACROLET来实现。在某些实现里，WITH-SLOTS可能会遍历提供给它的代
BLOCK形式的基本结构如下所示：
接下来将讨论的四个特殊操作符也会在词法环境中创建并使用名字，目的是为了调整控制流
当表达式(list xY z)被求值时,符号x,y和z将被替换成它们的展开式,例如(slot-value
(let ((#:g149 foo))
(with-slots (x y z) foo (list xY z)))
码，并生成一个带有x、y和z的，已经被替换成对应的SLOT-VALUE形式的展开式。你可以通过求值下面的形式
(block name
数部分之一。
值位置上的那些符号。Lisp实现本身显然带有它自己的一个代码遍历器，但这是Lisp中没有暴露给语言用户的少
不过，遍历形式体这件事由Lisp实现来做比用户代码更容易一些。要想让x、y和z仅在作为值出现时才被替换掉，
(((z  x 2st) [qo (z  x) sots-utm)， I-puedxaoxoeu)
来查看你所用的实现是怎样做的：
form*)
(symbol-macrolet 
局部控制流
(list xy z)))
第 20章特殊操作符
(x (slot-value #:g149 'x))
(slot-value
www.TopSage.com
'y)
一个由 SYMBOL-MACROLET定义的符号宏将覆盖由
---
## Page 234
这样：
循环：
符却可以出现在TAGBODY作用域的任何位置上。这意味着可以像下面这样编写一个随机次数的
式开始继续进行。例如，你可以像下面这样使用TAGBODY和GO编写一个简单的无限循环：
位置，你可以使用GO特殊操作符立即跳转到任何标记上，而求值过程将从紧跟着该标记的那个形
TAGBODY的最后一个形式被求值以后，整个TAGBODY返回NIL。在TAGBODY的词法作用域的任何
形式。这些列表形式按顺序进行求值，而那些标记将被忽略，除了我即将讨论的一种情况。当
其中每个tag-or-compound-form要么是一个称为标记（tag）的符号，要么是一个非空的列表
个上下文，其中定义的名字可被GO使用。一个TAGBODY形式的模板如下所示：
一个与该函数同名的BLOCK中。这就是你可以用RETURN-FROM来从一个函数中返回的原因。
并在首次遇到大于50的数字时立即停下来：
DOLIST，都会生成一个含有名为NIL的BLOCK的扩展。这允许你使用RETURN宏来从这些循环中
用RETURN-FROM时带有返回值，那么BLOCK将返回该值；否则整个BLOCK将求值为NIL。
回值的形式所组成。当一个RETURN-FROM被求值时，它会导致该命名的BLOCK立即返回。如果调
TAGBODY和GO之间的关系类似于BLOCK和RETURN-FROM的关系：一个TAGBODY形式定义了一
还有一个更无聊的TAGBODY示例，它表明你可以在单个TAGBODY里使用多个标记，看起来像
注意，尽管标记名必须出现在TAGBODY的最顶层，而不能内嵌到其他形式中，但GO特殊操作
一个块的名字可以是任何符号，包括NIL在内。许多标准控制构造宏，诸如DO、DOTIMES和
(tagbody
(tagbody
(tagbody
b (print 
top
(tagbody
(dotimes (i 10)
a
top
tag-or-compound-form*)
(print 'a) (if (zerop (random 2))
(when (piusp (random 10)) (go top)))
(print 'he1lo)
(let ((answer (random 1o0)))
(print 'hello)
(print answer)
(if (zerop (random 2))
(if (zerop (random 2))
www.TopSage.com
(go b)))
(go c))
(go a))
20.3局部控制流
217.
---
## Page 235
结束，算法终止。
入记录的总数。）
描述了算法S，该算法将在第27章里用到：
程序设计艺术，卷2：半数值算法》第3版（Addison-Wesley,1998）的第142页，他以下面的形式
算法：第一步，做这个；第二步，做那个；第三步，回到第二步；诸如此类。比如，在《计算机
Knut不朽的经典系列著作《计算机程序设计艺术》中，他使用了一种“菜谱”式的格式来描述
单地将那些跳转语句转译成带有适当TAGBODY的GO语句。?
FORTRAN库写于结构化编程革命以前，所以代码里有很多跳转（goto）语句。f2cl编译器可以简
CommonLisp，从而允许CommonLisp程序员得以使用各种各样的FORTRAN库。由于许多
转译工具的例子是从FORTRAN到CommonLisp的转译器f2cl，它将FORTRAN源代码转译成
在将来自其他语言的算法转译成CommonLisp时会很有用，无论是自动的还是手工的。一个自动
然返回了1并且控制落到了TAGBODY的结尾。
类似地，TAGBODY和GO在转译那些以文字或框图描述的算法时也很有用。例如，在Donald
很少直接使用TAGBODY，因为使用已有的循环宏来编写迭代控制构造往往更方便。不过，它
218
①某个版本的f2cl现在是CommonLisp Open CodeCollection(CLOCC)的一部分，请查阅http://locc.sourceforge.net。
这些描述可以轻易转译成一个CommonLisp函数，在重命名了一些变量以后，如下所示：
S5.[跳过]跳过下一个记录（不将它选作样本），将递增1，然后回到步骤S2。
S4.[选择]选择下一个记录，并将m和递增1。如果m<n，那么转向步骤S2；否则取样过程
S3.[测试]如果（N-t)U≥n-m，那么转向步骤S5。
S2.[生成U]生成一个随机数U，它平均分布在0和1之间。
S1.[初始化]设t<0，m<0。（在本算法中，m表示已选出的记录数，t表示已经处理的输
(defun algorithm-s (n max);max is N in Knuth's algorithm
算法S（选择取样技术）：从有N个记录的集合里随机选出n个记录，其中0<n≤N。
译成IVM层面的字节码。这是很聪明的做法，但是太折磨人了。
那些对代表标签和跳转的空类的调用的合法Java源代码，然后对产生的字节码进行后期处理，把那些空调用再转
转指令，但它没有直接暴露给Java。因此为了编译FORTRAN的跳转语句，他们首先将FORTRAN代码编译成带有
相比之下，看看f2j（FORTRAN到Java的转译器）的作者被迫采取的方法吧。尽管Java虚拟机（JVM）支持一个跳
(let(seen
(tagbody
s3
s2
第20章特殊操作符
（setfu(random1.0))
(setfselected 0)
(setf
(records()))
selected
seen0)