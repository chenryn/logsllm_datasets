```  
digoal=# set join_collapse_limit=1;  
digoal=# explain select t1.info, t5.info from   
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)  
join tbl_join_3 t3 on (t2.id=t3.id)  
join tbl_join_4 t4 on (t3.id=t4.id)  
join tbl_join_5 t5 on (t4.id=t5.id)  
join tbl_join_6 t6 on (t5.id=t6.id)  
join tbl_join_7 t7 on (t6.id=t7.id)  
join tbl_join_8 t8 on (t7.id=t8.id)  
join tbl_join_9 t9 on (t8.id=t9.id)  
where t9.id=10000;  
                                                              QUERY PLAN                                                                
--------------------------------------------------------------------------------------------------------------------------------------  
 Nested Loop  (cost=2.72..25.99 rows=1 width=65)  
   ->  Nested Loop  (cost=2.29..22.93 rows=1 width=69)  
         ->  Nested Loop  (cost=1.86..19.87 rows=1 width=69)  
               ->  Nested Loop  (cost=1.43..16.82 rows=1 width=69)  
                     ->  Nested Loop  (cost=1.00..13.76 rows=1 width=69)  
                           ->  Nested Loop  (cost=0.71..10.84 rows=1 width=36)  
                                 ->  Nested Loop  (cost=0.43..7.93 rows=1 width=36)  
                                       ->  Nested Loop  (cost=0.15..5.03 rows=1 width=36)  
                                             ->  Index Scan using tbl_join_1_pkey on tbl_join_1 t1  (cost=0.15..2.77 rows=1 width=36)  
                                                   Index Cond: (id = 10000)  
                                             ->  Seq Scan on tbl_join_2 t2  (cost=0.00..2.25 rows=1 width=4)  
                                                   Filter: (id = 10000)  
                                       ->  Index Only Scan using tbl_join_3_pkey on tbl_join_3 t3  (cost=0.28..2.89 rows=1 width=4)  
                                             Index Cond: (id = 10000)  
                                 ->  Index Only Scan using tbl_join_4_pkey on tbl_join_4 t4  (cost=0.29..2.90 rows=1 width=4)  
                                       Index Cond: (id = 10000)  
                           ->  Index Scan using tbl_join_5_pkey on tbl_join_5 t5  (cost=0.29..2.91 rows=1 width=37)  
                                 Index Cond: (id = 10000)  
                     ->  Index Only Scan using tbl_join_6_pkey on tbl_join_6 t6  (cost=0.42..3.04 rows=1 width=4)  
                           Index Cond: (id = 10000)  
               ->  Index Only Scan using tbl_join_7_pkey on tbl_join_7 t7  (cost=0.43..3.04 rows=1 width=4)  
                     Index Cond: (id = 10000)  
         ->  Index Only Scan using tbl_join_8_pkey on tbl_join_8 t8  (cost=0.43..3.05 rows=1 width=4)  
               Index Cond: (id = 10000)  
   ->  Index Only Scan using tbl_join_9_pkey on tbl_join_9 t9  (cost=0.43..3.05 rows=1 width=4)  
         Index Cond: (id = 10000)  
(26 rows)  
Time: 0.829 ms  
```  
设置join_collapse_limit=1后, 按照SQL写法进行关联. 执行计划的时间也缩短了.  
### 6. 外连接  
#### 左外连接  
左边的表，即使没有匹配，也输出  
```  
postgres=# create table tab1(id int, info text, crt_time timestamp);  
CREATE TABLE  
Time: 26.056 ms  
postgres=# create table tab2(id int, info text, crt_time timestamp);  
CREATE TABLE  
Time: 36.215 ms  
postgres=# insert into tab1 values (1,'test',now());  
INSERT 0 1  
Time: 0.520 ms  
postgres=# insert into tab1 values (2,'test',now());  
INSERT 0 1  
Time: 0.297 ms  
postgres=# insert into tab2 values (2,'test',now());  
INSERT 0 1  
Time: 11.325 ms  
postgres=# insert into tab2 values (3,'test',now());  
INSERT 0 1  
Time: 0.352 ms  
postgres=# select * from tab1;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | test | 2017-04-11 17:48:29.37083  
  2 | test | 2017-04-11 17:48:32.742795  
(2 rows)  
Time: 0.506 ms  
postgres=# select * from tab2;  
 id | info |          crt_time            
----+------+----------------------------  
  2 | test | 2017-04-11 17:48:39.722821  
  3 | test | 2017-04-11 17:48:41.901834  
(2 rows)  
Time: 0.335 ms  
```  
右表没有被匹配时，输出NULL  
```  
postgres=# select * from tab1 left join tab2 on (tab1.id=tab2.id);  
 id | info |          crt_time          | id | info |          crt_time            
----+------+----------------------------+----+------+----------------------------  
  1 | test | 2017-04-11 17:48:29.37083  |    |      |   
  2 | test | 2017-04-11 17:48:32.742795 |  2 | test | 2017-04-11 17:48:39.722821  
(2 rows)  
```  
过滤在A表但是不在B表的记录。  
```  
postgres=# select tab1.* from tab1 left join tab2 on (tab1.id=tab2.id) where tab2.* is null;  
 id | info |         crt_time            
----+------+---------------------------  
  1 | test | 2017-04-11 17:48:29.37083  
(1 row)  
postgres=# select * from tab1 where id in (select id from tab1 except select id from tab2);  
 id | info |         crt_time            
----+------+---------------------------  
  1 | test | 2017-04-11 17:48:29.37083  
(1 row)  
```  
通过外部where filter，可以过滤连接=false的记录  
```  
postgres=# select * from tab1 left join tab2 on (tab1.id=tab2.id) where tab1.id=1;  
 id | info |         crt_time          | id | info | crt_time   
----+------+---------------------------+----+------+----------  
  1 | test | 2017-04-11 17:48:29.37083 |    |      |   
(1 row)  
postgres=# explain select * from tab1 left join tab2 on (tab1.id=tab2.id) where tab1.id=1;  
                            QUERY PLAN                              
------------------------------------------------------------------  
 Nested Loop Left Join  (cost=0.00..48.81 rows=36 width=88)  
   Join Filter: (tab1.id = tab2.id)  
   ->  Seq Scan on tab1  (cost=0.00..24.12 rows=6 width=44)  
         Filter: (id = 1)  
   ->  Materialize  (cost=0.00..24.16 rows=6 width=44)  
         ->  Seq Scan on tab2  (cost=0.00..24.12 rows=6 width=44)  
               Filter: (id = 1)  
(7 rows)  
```  
join内的条件，不会过滤未连接的记录  
```  
postgres=# select * from tab1 left join tab2 on (tab1.id=tab2.id and tab1.id=1);  
 id | info |          crt_time          | id | info | crt_time   
----+------+----------------------------+----+------+----------  
  1 | test | 2017-04-11 17:48:29.37083  |    |      |   
  2 | test | 2017-04-11 17:48:32.742795 |    |      |   
(2 rows)  
postgres=# explain select * from tab1 left join tab2 on (tab1.id=tab2.id and tab1.id=1);  
                             QUERY PLAN                                
---------------------------------------------------------------------  
 Hash Left Join  (cost=35.42..298.96 rows=1130 width=88)  
   Hash Cond: (tab1.id = tab2.id)  
   Join Filter: (tab1.id = 1)  
   ->  Seq Scan on tab1  (cost=0.00..21.30 rows=1130 width=44)  
   ->  Hash  (cost=21.30..21.30 rows=1130 width=44)  
         ->  Seq Scan on tab2  (cost=0.00..21.30 rows=1130 width=44)  
(6 rows)  
```  
#### 右外连接  
左表没有被匹配时，输出NULL  
```  
postgres=# select * from tab1 right join tab2 on (tab1.id=tab2.id);  
 id | info |          crt_time          | id | info |          crt_time            
----+------+----------------------------+----+------+----------------------------  
  2 | test | 2017-04-11 17:48:32.742795 |  2 | test | 2017-04-11 17:48:39.722821  
    |      |                            |  3 | test | 2017-04-11 17:48:41.901834  
(2 rows)  
```  
#### 全外连接  
没有被匹配时，输出NULL  
```  
postgres=# select * from tab1 full join tab2 on (tab1.id=tab2.id);  
 id | info |          crt_time          | id | info |          crt_time            
----+------+----------------------------+----+------+----------------------------  
  1 | test | 2017-04-11 17:48:29.37083  |    |      |   
  2 | test | 2017-04-11 17:48:32.742795 |  2 | test | 2017-04-11 17:48:39.722821  
    |      |                            |  3 | test | 2017-04-11 17:48:41.901834  
(3 rows)  
```  
### 7. 窗口查询  
https://www.postgresql.org/docs/9.6/static/functions-window.html  
常用窗口函数  
Function|       Return Type|    Description  
---|---|---  
row_number()|   bigint| number of the current row within its partition, counting from 1  
rank()| bigint| rank of the current row with gaps; same as row_number of its first peer  
dense_rank()|   bigint| rank of the current row without gaps; this function counts peer groups  
percent_rank()| double precision|       relative rank of the current row: (rank - 1) / (total rows - 1)  
cume_dist()|    double precision|       relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)  
ntile(num_buckets integer)|     integer|        integer ranging from 1 to the argument value, dividing the partition as equally as possible  
lag(value anyelement [, offset integer [, default anyelement ]])|       same type as value|     returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null  
lead(value anyelement [, offset integer [, default anyelement ]])|      same type as value|     returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null  
first_value(value any)| same type as value|     returns value evaluated at the row that is the first row of the window frame  
last_value(value any)|  same type as value|     returns value evaluated at the row that is the last row of the window frame  
nth_value(value any, nth integer)|      same type as value|     returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row  
其他函数也可用在窗口语法中  
例子  
```  
CREATE TABLE window_test(id int, name text, subject text, score numeric);  
INSERT INTO window_test VALUES(1,'digoal','数学',99.5),  
(2,'digoal','语文',89.5),  
(3,'digoal','英语',79.5),  
(4,'digoal','物理',99.5),  
(5,'digoal','化学',98.5),  
(6,'刘德华','数学',89.5),  
(7,'刘德华','语文',99.5),  
(8,'刘德华','英语',79.5),  
(9,'刘德华','物理',89.5),  
(10,'刘德华','化学',69.5),  
(11,'张学友','数学',89.5),  
(12,'张学友','语文',91.5),  
(13,'张学友','英语',92.5),  
(14,'张学友','物理',93.5),  
(15,'张学友','化学',94.5);  
```  
-- 取出每门课程的第一名.  
```  
SELECT id,name,subject,score FROM   
  (SELECT row_number() OVER (PARTITION BY subject ORDER BY score DESC) AS rn,* FROM window_test) AS t   
WHERE rn=1 ORDER BY SUBJECT;  
 id |  name  | subject | score   
----+--------+---------+-------  
  5 | digoal | 化学    |  98.5  
  1 | digoal | 数学    |  99.5  
  4 | digoal | 物理    |  99.5  
 13 | 张学友 | 英语    |  92.5  
  7 | 刘德华 | 语文    |  99.5  
```  
每个人每门成绩与第一名的差距，第一名，排名  
```  
postgres=# SELECT row_number() over(partition by subject order by score desc) as ord,
id,name,subject,score,max(score) over (partition by subject) as top1, 
max(score) over (partition by subject) - score as diff from window_test ;  
 ord | id |  name  | subject | score | top1 | diff   
-----+----+--------+---------+-------+------+------  
   1 |  5 | digoal | 化学    |  98.5 | 98.5 |  0.0  
   2 | 15 | 张学友 | 化学    |  94.5 | 98.5 |  4.0  
   3 | 10 | 刘德华 | 化学    |  69.5 | 98.5 | 29.0  
   1 |  1 | digoal | 数学    |  99.5 | 99.5 |  0.0  
   2 | 11 | 张学友 | 数学    |  89.5 | 99.5 | 10.0  
   3 |  6 | 刘德华 | 数学    |  89.5 | 99.5 | 10.0  
   1 |  4 | digoal | 物理    |  99.5 | 99.5 |  0.0  
   2 | 14 | 张学友 | 物理    |  93.5 | 99.5 |  6.0  
   3 |  9 | 刘德华 | 物理    |  89.5 | 99.5 | 10.0  
   1 | 13 | 张学友 | 英语    |  92.5 | 92.5 |  0.0  
   2 |  3 | digoal | 英语    |  79.5 | 92.5 | 13.0  
   3 |  8 | 刘德华 | 英语    |  79.5 | 92.5 | 13.0  
   1 |  7 | 刘德华 | 语文    |  99.5 | 99.5 |  0.0  
   2 | 12 | 张学友 | 语文    |  91.5 | 99.5 |  8.0  
   3 |  2 | digoal | 语文    |  89.5 | 99.5 | 10.0  
(15 rows)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")