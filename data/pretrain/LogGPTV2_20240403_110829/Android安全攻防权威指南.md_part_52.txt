216
第8章用户态软件的漏洞利用
)
+ifdef NETLINK_DEBUG
if (ihit) (
SLOGW(*No volumes handled block event for 'ks'*, devpath) :
tendif
DirectVolume类包含了处理分区添加的代码。当一个NETLINK消息的参数DEVTYPE 非
disk时，这段代码就会执行。下面的代码片段摘自AOSP中的 system/vold/DirecrVolume.cpp，
包含了DirectVolume类中handlePartitionAdded函数的实现。
●vold中未修复的handlePartitionAdded函数代码，commit8509494
void DirectVolume: thandlePartitionAdded (const char *devpath,
NetlinkEvent *evt) (
int major = atoi(evt->findParan(*MAJoR*)):
Int minor = atoi(evt->findParam(*HINoR*)):
Int part_num;
↓从NETLINK消息中获取PARTN参数
if (tmp)(
: (dua) roxe = unu"zed
)else(
part_nun = 1;
)
↓检查动态增长的成员变量，但是并没有定义绝对数组边界
if (part_num > mDiskNumParts) (
mDiskNumParts * part_nun;
if (major != mDiskMajor)(
SLOGE(*Partition *ls′ has a different major than its disk!*,
return;
devpath) ;
)
↓将用户控制的值存入用户控制的下标所对应的数组元素中，只检查了上界
---
## Page 233
8.2公开的漏洞利用
217
if (part_num > MAX_PARTITIONS) (
SLOGE(*Dv:partAdd: ignoring part_nun = ld (nax: d) \n*,
part_mum, MAX_FARTITIONS) :
}else {
mParttinors[part_nun -1] = minor;
/ / 
这个函数没有正确地检查part_num变量的边界，攻击者可以通过NETLINK消息中的
PARTN参数来传人part_num变量的值。在上述比较语句中，part_num变量被解释为有符号整
数，并且被用作数组下标来访问整数数组。函数没有检查下标是否为负数，这导致了程序访问
mPartMinors数组（位于堆上）之前的元素。
攻击者可以覆盖数组mPartMinors内存之前任意的32比特字为任意可控值。这个漏洞在
Android2.3.4中得到了修复：只是添加了负数下标值的检查。下面代码是通过gitdiff 命令得
到的相关修复
●handlePartitionAdded函数忽略边界检查补T，commitf3d3ce5
98 -186,6 +186,11 99 void DirectVolume::handlePartitionAdded
++
b/DirectVolume.cpp
(conat char *devpath, MetlinkEvent *evt)
part_num = 1;
↓以下是新增的边界检查
if (part_num > MAX_PARTITIONs 11 part_num  nDiskNumParts) (
这是一个经典的原语，被称为“写四个字节”（write-four）。这个原语描述的场景是攻击者可
以控制任意地址的32比特。SebastianKrahmer编写的公开利用并不需要目标进程泄露信息，面
是使用了Android的前溃日志记录工具。由于这个利用用于root自已的设备，所以假设使用ADB
shell来运行，从而可以读取系统日志里的一些崩溃信息，如第7章所述。普通应用程序的用户可
能不在log组中，因此无法读取系统日志和运行利用。
GingerBreak首先需要得到全局偏移表（GOT）到DirectVolume类mPartMinors数组的
偏移。由于受影响的Android版本还未引人ASLR，因此vold进程无论如何重启，这个偏移都会
保持不变，而且vold前溃后会自动重启。利用会首先使用无效的偏移来让它崩溃，然后读取前
溃日志信息，获取地址信息。这样GOT距离mPartMinor数组的偏移就可以很容易地计算出来。
---
## Page 234
218第8章用户态软件的漏洞利用
GOT的地址可以通过解析磁盘上vold的ELF可执行文件头来得到。这些方法使利用无需进一步
修改就可以在不同编译版本的vold上工作。图8-7显示了如何使用负的数组索引来覆盖GOT。
低地址
text
GOT
.data
heap
高地址：
图8-7获取GOT表到堆的偏移
为了实现有效代码执行，漏洞利用把GOT表中的strcmp函数项覆盖为libc中的system
函数。同样，系统没有开启ASLR，所以也可以使用当前进程libc中system函数的地址，这和目
标进程中的system地址是相同的。当vold进程下一次调用strcmp时，就会执行system函数。
利用发送了一个NETLINK请求，请求包含一个用来作比较的参数字符串。因为strcmp已
经被指向了system，所以利用只需在传人的参数字符串中提供一个二进制程序的路径。这样，
当vold对字符串进行比较时，就会运行这个二进制程序。可以看到，无需使用原生代码的载荷
或者是第9章所提到的ROP就可以写出这个利用，使其非常优雅且不依赖于目标环境。在漏洞
利用中，简单往往意味着可靠。
8.2.2zergRush
GingerBreak 利用了vold 代码中的漏洞，面 zergRush 则利用了 libsysutils 库中的漏洞。
libsystutils库提供了Framework套接字的通用接口，实际上就是传统的UNIX城套接字。程序从
套接字收到的消息中抽取出的文本命令会导致栈缓冲区溢出。这个漏洞在Android4.0中得到了
修复。它的攻击面非常有限，只有root用户和mount用户组可以访间UNIX域套接字，如下所示。
·vold枢架套接宇文件属性
 18 -1 /dev/socket./vo1d
srw-rw---- root
mount
20130221 1.6:08 V01.d
本地的ADBshell以用户shell来运行，而shell用户在mount用户组中，因此可以通过ADB
shell使用这个漏洞来root设备。然面，非mount组的其他用户是无法访问这个套接字的，例如测
览器。当然，如果其他进程也使用了包含漏洞的 FrameworkListener代码，就可以利用对应
的套接字漏洞并获得相应的权限。
包含漏润的函数会把收到的UNIX域套接字消息解析成不同的（以空格划分的）参数，代码
如下所示。
---
## Page 235
8.2公开的漏洞利用
219
●包含漏润的dispatchCommand函数
void FramevorkLiatener : :dispatchComm
and(SocketClient *cli, char *data) (
FrameworkCommandCo1lection::iterator 1:
int argc = 0:
。在栈上临时分配一个局部缓冲区
resep = 6, xego
char tmp[2551:
将指针q指向这个临时缓冲区
bool esc = falsej
char *q = tnp:
bool quote = false;
Int k;
memset (argv, 0, sizeof (argv) ) :
memset(tnp, 0, sizeof(tmp)):
！下面的循环遍历输入中的所有宇符，直到遇到一个结尾的0
vhile(*p)(
将用户输入复制到缓冲区，参数放入数组，但是没有检查边界
if (1quote 6k *q == **)(
*q = *p++}
*q-'\0′;
argv[axgc++] - strdup (tnp) 
memset (tmp, 0, sizeof (tmp) ):
如果引用的字符串外面还有一个空格，则将q重置到tmp的起始位置
du = b
continue;
---
## Page 236
220
第8章用户态较件的漏洞利用
增加目标指针，但是没有检查边界
q++ ;
argv[argc++] = strdup (tmp) ;
for
( = 0; 5 < arge: 5++)
free (argv[51) :
return;
这个漏洞的补丁在AOSP当中core目录的commitc6b0def中引入。补丁增加了一个新的局部
变量qlimit来指向tmp的结尾。在向q写人数据之前，开发者检查了q是否大于等于qlimit。
因为返回地址保存在栈上，所以漏洞利用非常简单，只需要覆盖溢出tmp缓冲区直到覆盖
返回地址，并把返回地址指向攻击者的原生代码载荷。图8-8展示了这个简单的情形。
sp 
其他局部变量
[o]A5ue
argv[1]
！
argv[15]
tmp[0.255]
栈cokie
溢出方向
保存的程序计数器
图8-8覆盖tmp缓冲区，返同地址的栈缓冲区溢出
由于程序中启用了栈cookie保护，所以需要更复杂的利用技巧。在先前的漏洞代码片段中可
以看到，程序也没有检查argv数组的边界。zergRush利用使用16个空的元素来增加argc变量，
让argv数组越界到与tmp缓冲区重合的位置。接下来，利用往tuap写人一些稍后会被程序释
放的指针，这样就可以人为地产生堆上释放后重用的情形。利用释放后重用和虚函数表指针，利
---
## Page 237
8.2公开的漏洞利用
221
用就可以劫持控制流。溢出后的栈顿如图8-9所示。
其他局部变量
argv[0]
十
[1]A6ure
溢出方向
[S]Abue
argv(16]
tmp[0..255]
argv(17]
cookie
保存的程序计数器
图8-9覆盖tmp缓冲区，保留cookie的栈数组溢出
由于Android2.3系列引l人了XN保护机制，不允许攻击者直接执行任意代码，zergRush利用
使用了一个非常简单的ROP链来为system设置参数。利用这个技术，利用就可以用root权限
运行任意二进制程序（与GingerBreak利用一样）。第9章会详细介绍ROP技术。
8.2.3Mempodroid
Linux内核2.6.39到3.0版本中包含一个漏洞，可以让用户在某种限制下写入其他进程的内
存。这个漏润在2012年1月份被披露，Android4.0使用了这个版本的Linux内核，所以也受到
了影响。
Linux通过一个特殊的字符设备/proc/$pid/mem把每个进程的虚拟内存暴露为一个文件。
出于安全考虑，读写这个文件的权限被严格限制，拥有写人权限的只有内存的所属进程。感谢
UNIX“万物即文件”的设计哲学，攻击者可以打开目标进程的mem设备，把它复制到进程的stdout
和stderr。要利用这个漏洞，还需要绕过一些检查。Jason A.Donenfeld在博客中进行了详细说明：