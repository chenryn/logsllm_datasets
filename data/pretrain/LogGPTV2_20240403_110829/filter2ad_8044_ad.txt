    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String input1 = req.getParameter("input1");
        [...]
        resp.getWriter().write(input1);
    }
解决方案：
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String input1 = req.getParameter("input1");
        [...]
        resp.getWriter().write(Encode.forHtml(input1));
    }
抵御xss最好的方式是像上面在输出中编码特殊的字符。有4种环境类型要考虑：HTML, JavaScript, CSS (styles),
和URLs.请遵守OWASP XSS Prevention备忘录中定义的xss保护规则，里面会介绍一些防御的细节。  
注意Servlet中的xss规则看着都很类似，但是要用不同的规则寻找‘XSS：Servlet反射型xss’和‘xss:在Servlet错误页面中反射型xss’
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting
(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)  
[OWASP Java Encoder](https://code.google.com/p/owasp-java-encoder/)
# XMLDecoder的使用
漏洞规则：XML_DECODER  
不应该用XMLDecoder解析不受信任的数据。反序列化用户输入数据会导致代码执行。这是因为XMLDecoder
支持任意的方法调用。这个功能旨在调用setter方法，但是实际上，这个功能什么方法都能调用。  
恶意的xml
        /tmp/Hacked.txt
          Hello World!
上面这个xml代码可能会在服务器中创建一个内容为"Hello World!".的文件。
有漏洞的代码：
    XMLDecoder d = new XMLDecoder(in);
    try {
        Object result = d.readObject();
    }
    [...]
解决方案：  
解决方案是避免使用XMLDecoder去解析不受信任的用户输入数据
引用：  
[Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an
Restlet application](http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html)  
[RedHat blog : Java deserialization flaws: Part 2, XML
deserialization](https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/)  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 固定IV
漏洞规则：STATIC_IV  
每一条消息都应该为它初始化生成一个新的加密向量  
有漏洞的代码：
    private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};
    public void encrypt(String message) throws Exception {
        IvParameterSpec ivSpec = new IvParameterSpec(IV);
    [...]
解决方案:
    public void encrypt(String message) throws Exception {
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
    [...]
引用：  
[Wikipedia: Initialization
vector](http://en.wikipedia.org/wiki/Initialization_vector)  
[CWE-329: Not Using a Random IV with CBC
Mode](http://cwe.mitre.org/data/definitions/329.html)  
[Encryption - CBC Mode IV: Secret or Not?](https://defuse.ca/cbcmodeiv.htm)
# ECB模式是不安全的
漏洞规则： ECB_MODE
提供了最好机密性的授权加密模式应该替换电码本模式(Electronic Codebook Book
(ECB))，因为ecb没有提供很好的机密性。尤其，在ecb模式下，输入相同的数据，每一次的输出也是相同的。所以，如果用户发送一个密码，它的加密值每次都是相同的。这允许攻击者可以去拦截并且也可也重放这些数据  
为了修复这个。一些像Galois/Counter Mode (GCM)也应该被替换  
有漏洞的代码
    Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
解决方案：
    Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
引用：  
[Wikipedia: Authenticated
encryption](http://en.wikipedia.org/wiki/Authenticated_encryption)  
[NIST: Authenticated Encryption
Modes](http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01)  
[Wikipedia: Block cipher modes of
operation](http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29)  
[NIST: Recommendation for Block Cipher Modes of
Operation](http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf)
# 加密容易受到Padding Oracle的影响
漏洞特征：PADDING_ORACLE  
具有PKCS5Padding的CBC特定模式容易受到padding
oracle攻击。如果系统暴露了的明文数据与有效padding或无效padding之间的差异。那么攻击者就可能会解密数据。有效padding和无效padding的差别通常可以通过每一次返回的报错信息来揭露。  
有漏洞的代码：
    Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
解决方案：
    Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
引用：  
[Padding Oracles for the masses (by Matias
Soler)](http://www.infobytesec.com/down/paddingoracle_openjam.pdf)  
[Wikipedia: Authenticated
encryption](http://en.wikipedia.org/wiki/Authenticated_encryption)  
[NIST: Authenticated Encryption
Modes](http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01/)  
[CAPEC: Padding Oracle Crypto
Attack](http://capec.mitre.org/data/definitions/463.html)  
[CWE-696: Incorrect Behavior
Order](http://cwe.mitre.org/data/definitions/696.html)
# 密码没有完整性
漏洞特征：CIPHER_INTEGRITY  
产生的密文容易被对手改变。这就意味着，加密提供者没法发现数据是否遭到篡改。如果加密数据被攻击者控制，那么它可能会被偷偷改掉。  
解决方案通常是加密数据通常包含基本的身份验证hash(HMAC)
去签名数据。把HMAC方法和现有的加密方式结合容易出错。尤其，推荐你要首先去验证HMAC，并且如果数据没有被篡改，你才能执行所有的解密操作。  
如果没有提供HMAC，下面的模式都是有漏洞的：
  * CBC
  * OFB
  * CTR
  * ECB  
下面的片段是一些有漏洞的代码:  
有漏洞的代码  
aes的cbc模式
        Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
三次DES的ECB模式
        Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
解决方案：
        Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
    c.init(Cipher.ENCRYPT_MODE, k, iv);
    byte[] cipherText = c.doFinal(plainText);
在上面这个例子中，GCM模式把HMAC引入到加密数据的结果之中，提供了结果的完整性  
引用：  
[Wikipedia: Authenticated
encryption](http://en.wikipedia.org/wiki/Authenticated_encryption)  
[NIST: Authenticated Encryption
Modes](http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01)  
[Moxie Marlinspike's blog: The Cryptographic Doom
Principle](http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/)  
[CWE-353: Missing Support for Integrity
Check](http://cwe.mitre.org/data/definitions/353.html)
# 使用ESAPI加密
漏洞规则：ESAPI_ENCRYPTOR  
ESAPI的加密组件在历史上有一些小的漏洞。这里有一个能够快速验证的列表，以保证授权的加密是以期望的方式运行的。
  1. 库的版本 
这个问题在2.1.0这个版本被修正。在2.0.1版本以下有漏洞可以绕过MAC（CVE-2013-5679）  
对于Maven使用者，使用下面的命令可以查看插件的版本。有效的ESAPI将会被输出
    $ mvn versions:display-dependency-updates
输出：
    [...]
    [INFO] The following dependencies in Dependencies have newer versions:
    [INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -> 1.7.7
    [INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -> 2.1.0
    [...]
或者可以直接查看配置
        org.owasp.esapi
        esapi
        2.1.0
对于Ant使用者，应该使用
[esapi-2.1.0.jar](http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar)
这个jar。
2.配置  
在2.1.0这个版本中，在密文定义中，密钥的改变会导致漏洞(CVE-2013-5960)。需要使用一些预防措施。  
如果存在以下任何元素，那么ESAPI的加密算法就是有问题的  
不安全的配置：
    Encryptor.CipherText.useMAC=false
    Encryptor.EncryptionAlgorithm=AES
    Encryptor.CipherTransformation=AES/CBC/PKCS5Padding
    Encryptor.cipher_modes.additional_allowed=CBC
安全的配置：
    #Needed
    Encryptor.CipherText.useMAC=true
    #Needed to have a solid auth. encryption
    Encryptor.EncryptionAlgorithm=AES
    Encryptor.CipherTransformation=AES/GCM/NoPadding
    #CBC mode should be removed to avoid padding oracle
    Encryptor.cipher_modes.additional_allowed=
引用：  
[ESAPI Security bulletin 1 (CVE-2013-5679)](http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf)  
[Vulnerability Summary for
CVE-2013-5679](http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679)  
[Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric
encryption](http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf)  
[CWE-310: Cryptographic
Issues](http://cwe.mitre.org/data/definitions/310.html)  
[ESAPI-dev mailing list: Status of
CVE-2013-5960](http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html)