#### RPM Architecture
`rpm` executable
RPM packages \-- Files to install + SPEC file (metadata)
Local RPM database \-- retains metadata from all installed packages
> Database is kept in /var/lib/rpm
#### RPM Package Naming
-   name-version-release.architecture\*.rpm
-   Version is the version of the \"upstream\" open source code
-   Release refers to Red Hat internal patches to the source code
-   Architecture is one of:
    > -   i386,i686 \-- 32 bit x86 compatible
    > -   x86_64 \-- Intel/AMD 64 bit
    > -   ppc64 \-- Power PC 64 bit
    > -   ia64 \-- Intel Itanium 64 bit
    > -   noarch \-- Arch-independent code (scripts, docs, images, etc)
    > -   src \-- Source code
#### Package Naming Example
bash-4.1.2-8.el6.x86_64
+--------+-----------------+------------+--------+
| Name   | Project Version | RH Release | Arch   |
+========+=================+============+========+
| > bash | > 4.1.2         | > 8.el6    | x86_64 |
+--------+-----------------+------------+--------+
This package starts with version 4.1.2 of bash (from
ftp.gnu.org/gnu/bash), applies a RH patch identified as 8.el6 to it, and
is then built to run on an Intel/AMD 64 bit processor.
#### Installing and Upgrading Packages
`# rpm -i[v,h] name-ver-rel.arch.rpm`
:   Installs a package
`# rpm -U[v,h] name-ver-rel.arch.rpm`
:   Upgrades a package if an older version was previously installed.
    Otherwise, simply installs the new version.
`# rpm -F[v,h] name-ver-rel.arch.rpm`
:   Upgrades a package if an older version is installed. Otherwise, does
    nothing \-- **does not install new packages if no older version was
    installed.**
#### Upgrading a Kernel
-   Always use `#rpm -i ...`
-   This leaves the previously installed kernel on the system and in the
    GRUB menu as a fall-back in case the new version has problems.
#### RPM and Modified Config Files
Scenario: niftyapp-1.0-1.el5.rpm uses a config file, `/etc/nifty.conf`.
You tweaked `/etc/nifty.conf` to fit your system. Now
niftyapp-2.0-1.el5.rpm is available with new features that require
changes in the .conf file and provides a new default config file. What
to do?
-   If the previous version provided a default config file, the changes
    are detected. Your modified version of the .conf file is saved as
    `/etc/nifty.conf.rpmsave` and the new default config is installed.
    You can compare the files and modify as needed.
-   If the previous version did NOT provide a default config file, your
    version of the .conf file is saved as `/etc/nifty.conf.rpmorig` and
    the new default config is installed. You can compare the files and
    modify as needed.
#### Uninstalling
`# rpm -e name[-ver][-rel]`
-   Package removal is never verbose, never shows progress ( -v, -h have
    not effect)
-   Package removal only needs the name (or when multiple versions of
    the same package are installed, sometimes the version or release)
    but not the architecture or the .rpm extension.
#### RPM over a Network
`# rpm -ivh ftp://{Host}/path/to/packagename-ver-rel.arch.rpm`
`# rpm -ivh http://{Host}/path/to/packagename-ver-rel.arch.rpm`
And wildcard \"globbing\" is allowed:
`# rpm -ivh http://{Host}/path/to/packagename*`
#### Common RPM Queries
+--------------------+--------------------------------------------------------+
| Query              | Result                                                 |
+====================+========================================================+
| rpm -qa            | > lists all installed packages.                        |
+--------------------+--------------------------------------------------------+
| rpm -q pkg         | > Reports the version of the package.                  |
+--------------------+--------------------------------------------------------+
| rpm -qf /path/file | > Reports which package provided the file.             |
+--------------------+--------------------------------------------------------+
| rpm -qc pkg        | > Lists all configuration files of the package.        |
+--------------------+--------------------------------------------------------+
| rpm -qd pkg        | > Lists all documentation of the package.              |
+--------------------+--------------------------------------------------------+
| rpm -qi pkg        | > Reports a description of the package.                |
+--------------------+--------------------------------------------------------+
| rpm -ql pkg        | > Lists all files contained in the package.            |
+--------------------+--------------------------------------------------------+
| rpm -qR pkg        | > Lists all dependencies.                              |
+--------------------+--------------------------------------------------------+
| rpm -q \--scripts  | > Lists the scripts that run when installing/removing. |
+--------------------+--------------------------------------------------------+
rpm -q{ciR}p /path/to/packagename-ver-rel-arch.rpm
:   Reports the same info as above, but pulls info from the .rpm file
    instead of the rpm database.
#### RPM Verification
The RPM system satisfies two types of security concerns:
1.  Is this package *authentic*? How do I know it came from Red Hat?
2.  Has this package retained *integrity*? How do I know they haven\'t
    been modified?
Authenticity and integrity of packages can be confirmed prior to
installation with GPG signing and MD5 checksums of the RPM packages.
Integrity of files can be confirmed after installation with verification
of installed files against the recorded metadata in the package.
#### Validate Package Signatures
1.  Import the Red Hat GPG public key (It can be found on the
    installation CD or in the /etc/pki/rpm-gpg/ directory):
    >     # rpm --import /media/disk/RPM-GPG-KEY-redhat-release
    >
    > or:
    >
    >     # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
2.  Check the signature of the package in question:
        # rpm --checksig /path/to/package-ver-rel.arch.rpm
#### RPM Checksig Sample Output
    $ rpm --checksig ftp://linuxlib.us.dell.com/pub/Distros/RedHat/RHEL5/5.3/Server/x86_64/
    install-x86_64/Server/ImageMagick-6.2.8.0-4.el5_1.1.i386.rpm
    ftp://linuxlib.us.dell.com/pub/Distros/RedHat/RHEL5/5.3/Server/x86_64/install-x86_64/Server
    /ImageMagick-6.2.8.0-4.el5_1.1.i386.rpm: (sha1) dsa sha1 md5 gpg OK
#### Verify Installed Files
`rpm -V` (or `--verify`) will compare existing files on the system to
their pristine state in the packages they came from.
There are 8 points of comparison as shown in the following table, in the
Michael Jang book and in the rpm man page:
#### Change Codes from rpm \--verify
+-------------+---------------------+
| Change Code | Meaning             |
+=============+=====================+
| 5           | > MD5 checksum      |
+-------------+---------------------+
| S           | > File size         |
+-------------+---------------------+
| L           | > Symbolic Link     |
+-------------+---------------------+
| T           | > Modification time |
+-------------+---------------------+
| D           | > Device            |
+-------------+---------------------+
| U           | > User              |
+-------------+---------------------+
| G           | > Group             |
+-------------+---------------------+
| M           | > Mode              |
+-------------+---------------------+
#### RPM Verify Sample Output
    #rpm -Va
    ...
    S.5....T  c /etc/ntp.conf
    ..?.....  c /etc/ntp/keys
    S.5....T    /usr/bin/aspell
    .......T    /usr/share/ImageMagick-6.2.8/config/magic.xml
    .......T  d /usr/share/doc/ImageMagick-6.2.8/images/arc.png
    .......T  d /usr/share/doc/ImageMagick-6.2.8/images/background.jpg
    ...
#### Identifying Installed Packages
View a list of the packages originally installed on the system:
    # less /root/install.log
View a list of the packages installed through yum:
    # less /var/log/yum.log
Query the RPM database for the packages installed right now:
    # rpm -qa 
#### Managing Software: Building RPMs
As of this writing, Red Hat provides little documentation on their own
site about RPM creation. Instead, they provide pointers to the following
resources:
-   [The RPM.org site]()
-   [The Fedora RMP Guide]()
The RPM.org site, in turn, links to a PDF available from Gurulabs:
-   [GuruLabs RPM Guide]()
#### Inside an RPM package
-   files
-   scripts
-   metadata
The package is defined by a \"build specification file\" or *spec file*.
A good example of a spec file can be obtained from the source rpm for
redhat-release.
::: tip
::: title
Tip
:::
Open .spec files in vim for color highlighting
:::
#### Main contents of a .spec file
-   Introduction or preamble: Contains metadata about the package
-   Build instructions on how to compile the source code or otherwise
    prepare the package payload.
-   Scriptlets that perform the installation, uninstallation, or
    upgrade.
-   Manifest of files to be installed, along with their permissions.
-   Changelog recording the changes made to the package with each
    revision.
#### Format of the .spec file
Preamble (aka \"Header\")
:   Optional macro definitions and directives that define the package
Stanzas
:   Sections that perform specific functions, identified by tokens like
    `%prep` and `%build`.
#### Preamble directives
Name
:   Name of the package. Should not include whitespace.
Version
:   Version identifier. Should not include dashes.
Release
:   Indicates incremental changes within a version.
Group
:   The package group that should include this package. This can come
    from the list at `/usr/share/doc/rpm-*/GROUPS` or can be unique to
    you. Not related to yum package groups.
License
:   Short License Identifier as described at
Summary
:   Short (\`
:   Builds through the `%prep` section \-- unpacks sources and applies
    patches.
`$ rpmbuild -bc `
:   Builds through compile \-- processes the `%prep` and `%build`
    sections.
`$ rpmbuild -bi `
:   Builds through `%install` \-- processes `%prep`, `%build`, and
    `%install`.
`$ rpmbuild -bb `
:   Builds only the binary rpm file.
`$ rpmbuild -bs `
:   Builds only the source rpm file.
`$ rpmbuild -ba `
:   Builds both the binary and source rpm files.
Use `rpmbuild --help` or `man rpmbuild` for other options.
#### Exercise: Building a Custom RPM
As root, install rpm-build, rpmlint, rpmdevtools:
    # yum -y install rpm-build rpmdevtools rpmlint
As a non-privileged user, create a project directory, named according to
the convention: \-\.\:
    $ mkdir ~/hello-1.0
Create bash script: \~/hello-1.0/hello.sh
    #!/bin/bash
    # hello.sh
    echo 'hello'
    exit 0
Create a tarball of the project directory:
    $ tar cvzf hello-1.0.tar.gz hello-1.0/
Create an rpm development environment:
    $ rpmdev-setuptree
Move the tarball to the SOURCES directory:
    $ mv hello-1.0.tar.gz rpmbuild/SOURCES/
Create a .spec file in the SPECS directory:
    $ vim rpmbuild/SPECS/hello-1.0.spec
or:
    $ rpmdev-newspec -o rpmbuild/SPECS/hello-1.0.spec
Insert a name (Match the pkgname on the tarball and directory):
    Name:           hello
Insert a version (Match the version):
    Version:        1.0
Leave the release alone
Insert a summary (one line):
    Summary:        Simple Hello script created as a test package
Insert a group (package group):
    Group:          Applications/Text 
Insert a license:
    License:        Public Domain
Insert a URL or delete the line:
    URL:            http://www.example.com/hello-1.0/
Insert on the Source0 line, the name of your tarball:
    Source0:        hello-1.0.tar.gz
Leave the BuildRoot line alone
Unless your package has prerequisites needed before it can be compiled,
delete the BuildRequires line
Unless your package has prerequisites needed before it can work, delete
the Requires line
On a blank line below %description, insert a brief description of your
package
Leave the %prep and %setup lines alone
If your package does not need to be \"built\" (compiled), delete the
%build, %configure, and make lines.
Leave the %install section header alone.
Under the %install section, leave the rm line alone.
If your package does not need to be built, modify the make install line
to something like this:
    install -D hello.sh $RPM_BUILD_ROOT/usr/local/bin/hello.sh
Leave the %clean and the rm -rf lines alone.
Under %files, use the following syntax to list each of the files your
package will place on the target system:
    %attr(777,root,root)/usr/local/bin/hello.sh
Use the following syntax to list each of the directories your package
will place on the target system:
    %dir /usr/local/bin
The changelog section can be deleted or left alone.
Save and exit the .spec file and then test your build with:
    $ rpmbuild -ba rpmbuild/SPECS/hello-1.0.spec 
If it fails, troubleshoot using the various partial invocations of
rpmbuild (described on a previous page) and using the tree command to
see what is actually being placed on your system.
#### Signing Your RPMs
Your RPMs can be digitally signed to protect users from the possibility
of forged packages (any RPM package can execute scripts w/ root
privileges when installed!). To implement this, first generate and
identify a gpg key:
    $ gpg --gen-key
    gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.