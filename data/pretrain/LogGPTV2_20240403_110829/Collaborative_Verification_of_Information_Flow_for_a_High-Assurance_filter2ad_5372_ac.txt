perform a whole-program type inference, but such an
approach would be heavier-weight, would need to be
cognizant of cooperating or communicating applications,
and would provide fewer documentation beneﬁts.
2.6.2 Determining sources from sinks and vice versa
If a type contains only a ﬂow source or only a ﬂow sink,
the other qualiﬁer is ﬁlled in with the most general value
that is consistent with the policy ﬁle. If the programmer
writes @Source(α), IFC defaults this to @Source(α) @Sink(ω)
where ω is the set of ﬂow sinks that all sources in α can
ﬂow to. Similarly, @Sink(ω) is defaulted to @Source(α)
@Sink(ω) where α is the set of ﬂow sources allowed to
ﬂow to all sinks in ω. Defaults are not applied if the
programmer writes both a source and a sink qualiﬁer.
Suppose the ﬂow policy contains the following:
A -> X,Y
B -> Y
C -> Y
Then these pairs are equivalent:
@Source(B,C) = @Source(B,C) @Sink(Y)
@Sink(Y) = @Source(A,B,C) @Sink(Y)
This mechanism is useful because oftentimes a pro-
grammer thinks about a computation in terms of only its
sources or only its sinks. The programmer should not
have to consider the rest of the program that provides
context indicating the other end of the ﬂow.
This defaulting mechanism is essential for annotating
libraries. IFC ships with manual annotations for 10,470
methods of the Android standard library. Only .0007%
of methods use both a @Source and a @Sink annotation.
An example of a method that uses only a @Source annota-
tion is the File constructor: a newly-created readable ﬁle
should be annotated with @Source(FILESYSTEM), but there
is no possible @Sink annotation that would be correct for
all programs. Instead, the @Sink annotation is omitted,
and our defaulting mechanism provides the correct value
based on the application’s ﬂow policy.
This mechanism can be viewed as another application
of type polymorphism.
2.6.3 Defaults for unannotated types
Table 2 shows the default qualiﬁers for completely unan-
notated types. When the default is only a source or only a
sink, the other qualiﬁer is inferred from the policy ﬁle as
explained in Sect. 2.6.2.
Most unannotated types (including ﬁeld types, return
types, generic type arguments, and non-null literals) are
given the qualiﬁer @Source(LITERAL). This is so that simple
computation involving manifest literals, but not depend-
ing on Android permissions, does not require annotations.
As is standard, the null literal is given the bottom
type qualiﬁer, which allows it to be assigned to any vari-
able. For IFC, the bottom type qualiﬁer is @Source({})
@Sink(ANY).
The bytecode indicates whether a library method was
given no @Source annotation and no @Sink annotation (in
Table 2: Default ﬂow qualiﬁers for unannotated types.
Location
Default ﬂow qualiﬁer
Method parameters
Method receivers
Return types
Fields
null
Other literals
Type arguments
Local variables
Upper bounds
Resource variables
@Sink(CONDITIONAL)
@Sink(CONDITIONAL)
@Source(LITERAL)
@Source(LITERAL)
@Source({}) @Sink(ANY)
@Source(LITERAL)
@Source(LITERAL)
@Source(ANY) @Sink({})
@Source(ANY) @Sink({})
@Source(ANY) @Sink({})
which case it is defaulted exactly as above) or has not yet
been examined by a human to write a summary. Unex-
amined methods are conservatively given a special type
that guarantees a type-checking error, thus signaling to
the developer the need to annotate that library method.
IFC allows a developer to choose different default qual-
iﬁers for a particular method, class, or package, and for
speciﬁc locations as in Table 2.
2.7 Trusted assumptions to suppress false
positive warnings
Every sound static analysis is conservative: that is, there
exists source code that never misbehaves at run time, but
the static analysis cannot prove that fact and issues a
warning about possible misbehavior. Every cast in a Java
program is an example of such conservatism in the Java
type system. For example, application invariants might
guarantee a speciﬁc property about some datum that is
stored in a heterogeneous container. IFC, being conserva-
tive, assumes that information is implicitly leaked in this
case and issues a warning, which might be a false positive.
In 11 Android apps (9437 LOC), IFC suffered 26 false
positives, or fewer than 3 per KLOC (see Sect. 3.10).
A programmer who determines that one of IFC’s
warnings is a false positive can disable the warning
by writing a trusted assumption using Java’s standard
@SuppressWarnings mechanism. The vendor is expected to
write a justiﬁcation for each trusted assumption.
The app store auditor manually uses other (non-IFC)
techniques to verify each trusted assumption. The auditor
validates the vendor’s claim that the code is well-behaved
for some reason that is beyond the precision of the type
checker. Such a step is required for any static analysis,
not just IFC.
7
2.8
Indirect control ﬂow: reﬂection, intents
Indirect control ﬂow, for example in reﬂection and intents,
is challenging for a static analysis. IFC soundly handles
these constructs.
2.8.1 Reﬂection
IFC analyses Java reﬂection to determine the target
method of a reﬂective call. This enables a downstream
analysis, such as IFC’s information-ﬂow type-checking,
to treat the reﬂective code as a direct method call, which
has a much more precise annotated signature than does
Method.invoke. The library’s conservative annotations en-
sure that any unresolved reﬂective call is treated soundly.
The reﬂection analysis ﬁrst performs constant folding
and propagation for string, integer, and array types, and
also for classes such as Class and Method. The constant
folding handles not only basic computations like addition
and string concatenation, but also method calls, even into
program code, whose results depend only on constant
arguments.
The analysis resolves the reﬂective call to a single con-
crete method in 96% of cases in our experiments, includ-
ing malicious examples where reﬂection is used inten-
tionally as a form of code obfuscation. Additionally, the
constant analysis automatically determined the value of
an obfuscated phone number in an app that used Base64
encoding to hide the value from other forms of static
analysis.
In our experiments, 17 out of 72 apps accessed a sensi-
tive API using reﬂection.
2.8.2 Intents
Intents are an Android mechanism for interprocess com-
munication, and they can also create processes (Android
activities). An intent carries a payload of data to some
other process. An activity can register to receive arbitrary
intents.
To handle intents, we extended IFC with map types
(similar to record types) that represent the mappings of
data in an intent payload. Type inference makes annota-
tions unnecessary at most intent-sending operations.
In order to type-check communication, an interface
speciﬁcation is necessary. The overriding implementation
of intent-receiving methods acts as this interface and per-
mits modular checking. Even if new apps are added to the
app store later, previous apps need not be re-checked. We
leverage previous work to determine the possible targets
for an intent-sending method [34].
In our experiments, 3 apps exploited the ACTION_VIEW
intent to access a URL without the INTERNET permission.
Implementation
2.9
IFC is implemented as a pluggable type system built on
top of the Checker Framework [8]. The implementation
of IFC consists of 3731 lines of Java, plus annotations
for 10,470 library methods. IFC’s source code is avail-
able at http://types.cs.washington.edu/sparta/
release/.
2.10 Limitations
IFC is focused on Trojans that cause an undesired infor-
mation ﬂow, as indicated by the threat model of Sect. 1.3.
This section discusses further limitations. IFC should be
used in conjunction with complementary techniques that
address other security properties.
As with any static analysis, IFC’s soundness guarantee
only extends to code that is analyzed at compile time. Use
of native code and un-analyzed Android activities requires
a different analysis or trusted annotations that describe
the information ﬂows enabled by those components. IFC
forbids dynamic code loading.
Our cooperative veriﬁcation model means that the ven-
dor knows one of the techniques that the app store will
use to verify an app. This knowledge might permit a ma-
licious developer to design Trojans that are beyond the
capabilities of IFC or that exploit IFC’s limitations.
As with many security mechanisms, human judgment
can be a weak link. A malicious developer could write
a misleading explanation for an information ﬂow in the
ﬂow policy or for a trusted assumption in the code, in an
effort to convince the auditor to approve malware. Our
work also does not address how to decide upon an app
store’s policies (Fig. 1) nor whether an app is worthy of
inclusion in the app store.
Despite these limitations, use of IFC increases the dif-
ﬁculty of hiding Trojans in source code, and the require-
ment that code be accepted by IFC may also make the
Trojan more likely to be detected using other tools or
manual veriﬁcation.
3 Empirical study
3.1 Methodology
The sponsor of our research wished to evaluate our tools
and approach. To this end, they hired ﬁve development
companies (in the following referred to as Red Teams) to
create Android applications with and without Trojans. We
had neither control over the Red Teams nor any knowl-
edge of the malware they were creating. While they were
creating the malware, the Red Teams had access to a
current version of IFC, including source code, documen-
tation, and our own analysis of IFC’s vulnerabilities. A
8
total of 20 people worked on the Red Teams. On average
they had more than 2 years of Android experience. Other
than two interns, they hold BS or MS degrees and work
full-time as computer security analysts. Most have been
exposed to information ﬂow theory, with the maximum
experience being 6 years working with information ﬂow.
The Red Teams created both malware and non-malware
apps. The malware had to be written in Java. The Red
Teams started out by surveying real-world mobile mal-
ware. They tried to produce diverse malware, including
malware that is representative of that found in the wild,
novel malware that they devised, and malware speciﬁcally
targeting the limitations of IFC. They had two goals: to
evaluate how well IFC might work in practice, and to see
how IFC could be defeated.
Overall, the Red Teams created 72 Java applications.
Our sponsor provided us with the apps in ﬁve batches over
an eight-month period from December 2012 to July 2013.
For each batch, we were given a limited amount of time to
analyze the applications with our tools. We wrote a report
stating whether each application was malware or not, and
describing the malware (including its trigger and effect)
or justifying our conclusion that there was no malware.
The Red Teams were given our results for the ﬁrst three
batches, and they used this information to create malware
that was harder for our tools to ﬁnd.
We received the applications in source code form. IFC
does not run the applications. The applications were
not obfuscated, but they were also not well-documented,
and the Red Teams had no motivation to make them un-
derstandable. The user documentation was only a few
sentences stating the general purpose of the app, but usu-
ally omitting signiﬁcant details about the functionality —
considerably less than a typical app has in an app store.
The code documentation was just as bad: the source code
often used poor style; code comments and design docu-
mentation were absent; and the apps contained neither
ﬂow policies nor the information ﬂow annotations used
by our tools (Sect. 2). Thus, we spent most of our time
reverse-engineering the apps to understand their purpose,
operation, and implementation, and relatively less time
searching for malware.
3.2 Summary of results
IFC detected 96% of the 47 apps that contain malicious
information ﬂow. The 72 total apps produced by the Red
Teams were as follows.
cation’s description; see Sect. 3.3.
• 15 are non-malicious.
• 18 use a source or sink that is at odds with the appli-
• 11 use an information ﬂow between Android permis-
sions that is at odds with the application’s descrip-
tion; see Sect. 3.4.
9
• 8 use an information ﬂow involving our new sources
or sinks (Sect. 2.2.2) that is at odds with the applica-
tion’s description; see Sect. 3.5.
• 10 use an information ﬂow involving parameterized
sources or sinks (Sect. 2.2.1) that is at odds with the
application’s description; see Sect. 3.6.
• 10 are not detected by IFC because the malware is
not related to information ﬂow; see Sect. 3.7.
Table 5 describes the 57 apps that contain malware.
3.3 Unjustiﬁed permissions
Of the 57 malicious applications, 18 applications use
a permission that cannot be justiﬁed for the applica-
tion, based on its description. These unjustiﬁed permis-
sions are grounds for rejection from a high-assurance
app store. For example, the SMS Backup app lists
READ_BROWSER_HISTORY in the Android manifest ﬁle,
but the description of the app does not explain why.
Not all of this malware is apparent from the Android
manifest. For example, the SMS Notiﬁcation app’s un-
justiﬁed permission is WRITE_LOGS, one of the new sinks
that IFC adds.
3.4 Unjustiﬁed information ﬂows
For 11 apps, all the Android permissions requested are
justiﬁed based on the description of the app. Malicious in-
formation ﬂow becomes apparent only after a ﬂow policy
is written and veriﬁed using IFC.
For example, 2D Game has a malicious ﬂow, READ_EX-
TERNAL_STORAGE→INTERNET. The app is allowed to ac-
cess the external storage to load photos in the game, so
READ_EXTERNAL_STORAGE is justiﬁed. The app descrip-
tion states that the app sends high scores to a leaderboard
on a server, so INTERNET is justiﬁed. The description
says nothing about uploading the photos directly to the
server, nor would user expect a simple game to do so.
Therefore, READ_EXTERNAL_STORAGE→INTERNET is a
malicious ﬂow.
The writer of Calculator 1 tried to hide use of the INTER-
NET by stating that the application automatically checks
for updates. IFC still caught the malware due to an unjus-
tiﬁed information ﬂow USER_INPUT→FILESYSTEM.
3.5 Information ﬂows using new sources/sinks
For 8 apps, the malicious information ﬂow is apparent
only via use of the additional permissions listed in Ta-
ble 1. For example, RSS Reader has a malicious ﬂow of
RANDOM→VIBRATE. The description of the app gives no
valid reason to use a random number, but because RAN-
DOM is not an Android permission, the manifest ﬁle does
not list it. The app is supposed to vibrate the phone when