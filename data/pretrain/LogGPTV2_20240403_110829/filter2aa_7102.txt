### 程序加载概述

程序加载过程是指系统创建或扩充进程镜像的过程。这一过程主要依据特定规则，将文件中的各个段复制到虚拟内存中。只有当进程在执行过程中实际访问了某个逻辑页面时，才会申请相应的物理页面。通常情况下，进程中存在许多未被引用的页面，因此延迟物理读写可以显著提升系统性能。为了实现这种效率，可执行文件及共享目标文件中的各段必须具有合适的文件偏移量和虚拟地址，即这些值应当是页大小的整数倍。

在Intel架构下，虚拟地址和文件偏移量需为4KB（或更大且为2的幂次）的整数倍。尽管代码段与数据段在模4KB的意义上可能相等，但最多仍有四个页面可能包含混合的数据或代码。具体而言：
- 代码段的第一个页面包含了ELF头、程序头部表及其他信息。
- 代码段的最后一个页面可能含有数据段起始部分的副本。
- 数据段的最后一个页面可能包括代码段末尾的部分内容。
- 数据段的最后一部分可能包含与程序运行无关的信息。

从逻辑上看，系统会对内存权限进行严格控制，确保每个段的权限独立；段地址会被调整，以保证内存中每个逻辑页仅具有一组权限。如上例所示，文件代码段的一部分和数据段的起始部分会被映射两次：一次在数据段的虚拟地址上，另一次在代码段的虚拟地址上。

处理数据段结尾处未初始化的数据时，通常要求它们以0填充。若文件最后一页包含不在逻辑页内的信息，则剩余空间须初始化为0。除开这部分外，其余三个页面中的杂项数据理论上不属于进程镜像的一部分，系统可以选择删除它们。假设每页大小为4KB，该文件对应的虚拟内存布局如下：

在加载段时，可执行文件与共享目标文件之间存在差异。可执行文件通常包含绝对地址代码，这意味着其各段应位于构建文件时所用的虚拟地址处。因此，系统直接采用`p_vaddr`作为虚拟地址。

相比之下，共享目标文件则包含地址无关代码。这允许同一段在不同进程中拥有不同的虚拟地址而不影响程序行为。虽然系统会为不同进程分配各异的虚拟地址，但保持了段之间的相对地址不变。由于地址无关代码使用相对寻址方式，在虚拟内存中各段间的距离必定与其在文件中相应位置的距离相同。以下示例展示了针对同一共享目标文件的不同进程情况，以及基地址的计算方法。