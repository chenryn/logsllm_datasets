launch the attack on the same Dapp again. It might be because
the attacker wants to test the original exploit on the patched
Dapp.
3.2 Analyzing Exploit Transactions
Our data collection and derivation method reconstructs 42
real-world Dapp attack incidents, consisting of 126 semantic-
similar transaction clusters with 58,555 transactions. Based
on these transaction clusters, we manually annotated them
and further performed a measurement study to understand the
criminal footprints and operational intents of Dapp attacks.
Overview: attack footprints. Before coming to the details
of our ﬁndings, we here ﬁrst summarize the footprints of a
typical Dapp attack discovered in our research, which con-
sists of four stages: attack preparation, exploitation, attack
propagation and mission completion, as illustrated in Fig-
ure 3. In the attack preparation stage, a Dapp attack starts
Attack 
Operotor
Exploit
 Developer
1
Test 
Test 
Contract
4
Transfer
Ⅲ
Transfer
Ⅱ
Withdraw
Ⅰ 
Destruct
ⅰ
Call 
a
Call 
2
Launch 
1
b
c
Preparation
Exploitation
Propagation
Completion
Exchange 
Service
Money 
Manager
ETH 
Dapp
Money 
Mule
Ⅲ
3
4
Exploit 
Contract
ⅲ 
ⅱ 
ⅱ 
ⅲ 
ⅱ 
ⅲ 
Attack
ⅱ 
Gain 
profit
ⅲ 
ETH Dapp
Figure 3: Example of Dapp criminal footprints, which consists
of a four-stage attack lifecycle: attack preparation (➊-➍);
exploitation ( a - c ); attack propagation ( i - iii ) and mission
completion ( I - III ).
with several transactions for calling the victim Dapp from ex-
ploit developers to test their exploit codes (➊) before the full
attack is launched on the target (➋). Meanwhile, we observe
several transactions through which money managers transfer
attack cost (gas fee or ticket fee) into the exploit contracts (➌).
This is done through money mules to conceal the managers’
EOAs (➍). Then, in the exploitation stage, multiple attack
operators from different EOAs invoke the exploit contracts
( a ) to attack the victim Dapp ( b ) and gain proﬁt ( c ). After
the attack, in the attack propagation stage, we found that the
operators either reuse or further adjust the exploit contract
(through update) ( i ) to exploit other similar Dapps ( ii ) to
gain more proﬁt ( iii). During the mission completion stage,
the attack operators destruct the exploit contracts ( I ) and
withdraw attack proﬁt ( II ). The proﬁt is then transferred from
the attack operators or the exploit contract to the exchange ser-
vice through several money mules ( III). Below we elaborate
on our measurement study and forensic analysis on real-world
Dapp attacks.
Attack preparation. We ﬁrst analyzed how the attacker boot-
straps an attack. To this end, for each attack incident, we
looked at all transaction clusters executed before the attacker
continuously gains proﬁt. More speciﬁcally, for each transac-
tion, we evaluated whether the attacker proﬁts by calculating
the difference between his attack cost (i.e., money transferred
from the attacker EOA or the exploit contract to the Dapp)
and his attack gain (i.e., money transferred from the Dapp
to the attacker EOA or the exploit contract). If the attacker
continuously made proﬁts from all of the transactions in a
cluster, we considered that he has successfully launched an
attack. Meanwhile, the clusters of the transactions executed
before the attack were marked as being associated with attack
preparation. In this way, we found the presence of such a
preparation stage in 85% of attack incidents with the average
number of transactions being 23. Also, the related prepara-
tion transactions were discovered within 81 days after the
target Dapp was released. Surprisingly, we found that the
weak randomness attacks were prepared in just 9 days after
Figure 4: Balance of victim Dapps when miscreants started
the attacks. The bar in the ﬁgure indicated the time difference
between the Dapp launch time and the attack launch time.
the appearance of the target Dapps. This might be because
those Dapps usually share a similar vulnerable PRNG (see
Section 2), and can thus be easily attacked once the PRNG
has been exploited in one Dapp. Such attacks can be prepared
by the miscreants once the target Dapp has some balance after
launched (3461.5 Eths on average as observed in our study).
Figure 4 illustrates the balance of the victim Dapps.
When manually investigating operational intents of the
transactions in the preparation stage, we found that the at-
tacker’s transactions mainly serve two purposes: (1) testing
their exploit contracts and (2) transferring fund to bootstrap
their attacks (e.g., paying the gas fee). As an example, before
attacking the vulnerabilities in the two Fomo3D functions
isHuman() and airdrop() through an exploit contract (0x7d*),
the attacker 0x85* created two test contracts 0x56* and 0x80*
to evaluate these functions repeatedly. Apparently, the ad-
versary performed his own software integration testing to
ensure that all attack components worked smoothly together
before executing the attack. In total, we found that 78% of
the transactions at the attack preparation stage were used for
such integration testing, with 8 testing contracts deployed
and 96 transactions executed for this purpose in an attack
incident. Furthermore, from the execution traces of these
transactions, we identiﬁed 36 Dapp functions being tested.
79% of them were later attacked at the exploitation or the
attack propagation stage. This indicates that by identifying
the preparation stage, we could predict the vulnerable func-
tions to be exploited and stop an attack before it occurs (see
Section 4).
Attacks on Dapps come at a cost. For example, the attacker
may need to purchase a ticket for playing a game Dapp before
he can exploit its vulnerable functions, or pay a gas fee to
launch exploit transactions. In our research, 324 transactions
were discovered to transfer Ethers from EOAs or Ethereum
exchange services to exploit contract addresses or attacker
EOAs. As an example, in the attacks on Fomo3D, some at-
tacker EOAs got inﬂows of Ethers from one EOA 0xbf*,
through a set of intermediary EOAs (such as 0x2c*, 0xa7*
fomo4dfomogameb4bpoohmofomo lightningsouhafomo shortfomo3ddice for slicelastwinnerratscamfomofiveinfinitydice2.winproof-of-communityDapp010203040506070Time(days)Time delta101100101102103104105Balance(ETH)Balance on attack dayHighest Balanceand 0x4c*) that were sequentially linked together to form
money ﬂow chains. Note that those intermediary EOAs as-
sociated with only two types of transactions, either receiving
fund from a source or transferring it to another address. Al-
though acting as a money mule, intermediary EOA shows
a poor characteristic regarding anonymity, which is aligned
with the ﬁndings in the Bitcoin laundry [20].
Exploitation. As mentioned before, we determine the trans-
actions executed at the exploitation stage when the attacker
continuously makes proﬁts from one Dapp. On average 1,394
exploit transactions from 6 attacker EOAs were observed
per incident. These transactions were used to either directly
invoke vulnerable Dapp functions, or deploy or trigger an
exploit contract to automate an attack. In total, we found
from our dataset 232 transactions for calling vulnerable func-
tions, and 22,269 transactions for triggering exploit contracts.
Particularly, attacks on weak randomness and improper au-
thentication, along with DoS, tend to utilize exploit contracts,
since in these attacks, each exploit transaction call only brings
in a small proﬁt (e.g., prize per one guess), so the adversary
needs to run an exploit contract to continuously invoke the
target Dapp. On the other hand, in a reentrancy or an inte-
ger overﬂow/underﬂow attack, attacker EOAs usually directly
exploit the vulnerable functions in the target.
To better understand the operational intents of the attackers
at the exploitation stage, we analyzed the execution traces
of their transactions. Of particular interest is the observation
that the adversary tends to rapidly evolve his strategies during
an attack, to improve its effectiveness (e.g., more revenue or
less cost). Speciﬁcally, attackers were found to update their
exploits via delegatecall(), or creating new contracts. For ex-
ample, in the bad randomness attack on Fomo3D, as shown in
Figure 5, we observed the presence of three exploit contract
versions: since the airdrop function in Fomo3D heavily relies
on the calling contract’s block information (such as times-
tamp) to determine the winner, the ﬁrst exploit version simply
creates many new contracts to predict the function’s output
using the block information and the public logic of airdrop
before invoking it; improving on the ﬁrst version, the second
one evaluates existing contracts’ blocks through nonce(), and
utilizes the contract on the winning block to generate a tem-
porary contract (which still use its creator contract’s block) to
trigger airdrop, so as to save the cost for contract creation; the
last version collects all information from existing contracts
and makes the prediction off-chain before commanding the
most promising contract to invoke airdrop. With the evolution,
our research shows that the execution traces of these attack
versions turn out to be similar (average T G distance = 0.4).
This allows our tool DEFIER to uncover a new exploit version
never reported before (Figure 5(d)).
Attack propagation. Given the existence of many copycat
Dapps sharing the same vulnerabilities, our research shows
that attackers tend to reuse their exploit on one target to infect
(a) Execution of calling exploit con-
tract version 1
(b) Execution of calling exploit con-
tract version 2
(c) Execution of calling exploit con-
tract version 3
(d) Execution of calling exploit con-
tract version 4
Figure 5: Exploit contract evolution at the exploitation stage.
#: exploit contract, (cid:22): contract generated in execution,  :
Dapp, 3: EOA.
: function call ﬂow;
: data ﬂow.
other similar Dapps. In particular, for the transaction clusters
that ran after the exploitation stage, we discovered the trans-
actions associated with the attack (i.e., continuously makes
proﬁts) but involved in the Dapps different from the one at
the exploitation stage.
Looking into these transactions, we found that the adver-
sary reuses his exploit contract through either creating a new
contract with most its content copied from the old one or del-
egatecall() to invoke external code to run in the original con-
tract’s context. delegatecall() allows the adversary to simply
adjust the external code to aim the exploit contact at different
targets. For instance, at the propagation stage of the Fomo3D
attack, the attacker EOA 0x82* deployed a new contract (the
external code) to feed new vulnerable Dapp addresses to an
existing exploit contract through delegatecall(). In this way,
the attacker was able to reuse the exploit against 8 more Dapps
simultaneously, including Fomo Lightning, Fomo Short, etc.
This attack propagation stage is found to come right after
the exploitation stage, just 3.5 days apart on average. The
bad randomness attack and integer overﬂow/underﬂow attack
tend to have an aggressive propagation stage, with at least
four more Dapps victimized per attack incident. For example,
an integer overﬂow attack on Rocket Coin was propagated to
another 17 Dapps.
Also we found that the adversary could scan Dapps’ func-
tion names or runtime codes for the new targets carrying the
same vulnerability as the victim Dapp. This is based upon the
observation that 51% of the Dapps exploited at the propaga-
tion stage share the exactly same vulnerable function name
or function bytecode with the Dapp attacked at the exploita-
tion stage. Table 4 and 5 list the functions and the variables
TransferCall0.1906 EtherDapp Related Smart ContractbuyXid0.1 Etherexecute0.1 EtherairDropPotairDropTracker0.1 Etherexecute0.1 EtherContractCreationTransfer0.1121 EtherDapp Related Smart ContractbuyXid0.1 EthernoncenoncenoncenonceairDropPotairDropTrackerCallnonce0.1 Ether0.1 Etherexecute0.1 EtherContractCreationTransferCall0.1121 EtherDapp Related Smart ContractbuyXidexecute0.1 Ether0.1 EtherairDropPotairDropTracker0.1 Etherexecute0.1 EtherContractCreationCall0.2543 EtherDapp Related Smart Contractwithdraw0.1 Eth0.19 Eth0.1 EthTransferairDropPotairDropTrackernoncenoncegetContractTable 4: List of vulnerable functions
Functions
#Dapp
Attack type
Jaccard sim.
transferFrom
airDrop
transfer
transferProxy
batchTransfer
16
8
7
6
5
Integer overﬂow/underﬂow
Bad randomness
Integer overﬂow/underﬂow
Integer overﬂow/underﬂow
Integer overﬂow/underﬂow
0.64
0.99
0.78
0.83
0.82
Table 5: List of vulnerable variables.
Function
transferFrom
airDrop
transfer
transferProxy
batchTransfer
Vulnerable variable
value
airDropPot
airDropTracker
value
value
v
r
s
value
# attacks
16
8
8
7
6
6
6
6
5
(a) CDF of the money ﬂow chains
(b) Exchange distribution
Figure 6: Mission completion.
(under a given function) most commonly appearing in the
attack incidents we collected. In particular, we observed that
the function transferFrom(), which is used for transferring
tokens between accounts, was exploited by the same integer
overﬂow attack in 16 different Dapps.
Mission completion. After a successful attack, our research
shows that the attacker often withdraws all the proﬁts he made
and tries to remove attack traces by destructing all his exploit
contracts. Speciﬁcally, our dataset includes the transactions to
destruct exploit contracts by calling selfdestruct() or custom
destruct functions. Actually, 35.6% of the exploit contracts in
all attack incidents we studied were destroyed. Note that the
destruction of a contract automatically transfers its winnings
to the contract’s creator EOAs.
Interestingly, once an EOA receives the fund from its con-
tract, it tends to further transfer the winnings to another ad-
dress. In our study, we identiﬁed 198 transfer transactions
at the mission completion stage, and constructed the money
ﬂow chains on them in the same way as did when analyzing
attack preparation. Figure 6(a) shows the cumulative distribu-