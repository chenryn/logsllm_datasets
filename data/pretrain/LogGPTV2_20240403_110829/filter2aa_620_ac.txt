# Automated Discovery of Deserialization Gadget Chains
## Ian Haken

### Step 5: BFS on Call Graph for Chains

**Sources:**
- `AbstractTableModel$ff19274a.hashCode() @ 0`

**Call Graph:**
- `AbstractTableModel$ff19274a.hashCode()`
  - `0 -> IFn.invoke() @ 1`
  - `0 -> IFn.invoke() @ 0` (FnCompose.invoke())
  - `1 -> IFn.invoke() @ 1`
  - `0 -> IFn.invoke() @ 0`
  - `0 -> IFn.invoke() @ 1` (FnEval.invoke())
  - `1 -> Runtime.exec() @ 1`

**Chain:**
- `AbstractTableModel...hashCode() @ 0`
- `FnCompose.invoke() @ 0`
- `FnEval @ 1`
- `Runtime.exec() @ 1`

**Assumption #3:**
- Any method implementation can be jumped to, as long as its class is "serializable."

### Limitation #2:
- Chain discovery relies on a list of known "interesting" sinks.

### Gadget Inspector Customization
- **Serializable Classes:**
  - For JRE deserialization: Anything implementing `java.lang.Serializable`.
  - For XStream: Depends on the enabled convertors.
  - For Jackson: Any class with a no-arg constructor.
- **Deserialization Sources (Magic Methods):**
  - For Jackson: Only constructors.
- **Method Implementations:**
  - For JRE deserialization: All implementations in a serializable class.
  - For Jackson: Depends on annotations and configuration.

### OSS Library Results
- **Commons-Collections:**
  - 38th most popular Maven dependency.
  - Known gadget chains rediscovered.
- **Clojure:**
  - 6th most popular Maven dependency.
  - New gadget chain discovered:
    1. `clojure.inspector.proxy$javax.swing.table.AbstractTableModel$ff19274a.hashCode() (0)`
    2. `clojure.main$load_script.invoke(Object) (1)`
    3. `clojure.main$load_script.invokeStatic(Object) (0)`
    4. `clojure.lang.Compiler.loadFile(String) (0)`
    5. `FileInputStream.(String) (1)`
  - Reported to Clojure-dev in July 2017, affecting versions 1.8.0 and earlier. Serialization of `AbstractTableModel$ff19274a` disabled in 1.9.0 release (Dec 2017).
- **Scala:**
  - 3rd most popular Maven dependency.
  - New gadget chain discovered:
    1. `scala.math.Ordering$$anon$5.compare(Object, Object) (0)`
    2. `scala.PartialFunction$OrElse.apply(Object) (0)`
    3. `scala.sys.process.processInternal$$anonfun$onIOInterrupt$1.applyOrElse(Object, scala.Function1) (0)`
    4. `scala.sys.process.ProcessBuilderImpl$FileOutput$$anonfun$$lessinit$greater$3.apply() (0)`
    5. `java.io.FileOutputStream.(File, boolean) (1)`
  - Allows writing/overwriting a file with 0 bytes, potentially causing a DoS or zeroing out a blacklist.

### Netflix App Results
- **Netflix Internal Webapp 1:**
  - Potentially dangerous use of Jackson deserialization:
    ```java
    public void doSomething(String body, String queryParam) {
       Object requestObject = objectMapper.readValue(
               body, Class.forName(queryParam));
    }
    ```
  - Can only deserialize classes with no-arg constructors.
  - The app has a ~200MB classpath, but no significant findings. Remediation is a low priority.
- **Netflix Internal Webapp 2:**
  - Uses a non-standard deserialization library with unique constraints:
    - Invokes `readResolve()` but not `readObject()`.
    - Serialized objects do not need to implement `Serializable`.
    - Member fields of serialized objects cannot have a `$` in the name.
    - No serialization support for arrays or generic maps.
    - No null member values.
  - Discovered gadget chain:
    1. `com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper.readResolve() (0)`
    2. `org.apache.commons.configuration.ConfigurationMap$ConfigurationSet.iterator() (0)`
    3. `org.apache.commons.configuration.ConfigurationMap$ConfigurationSet$ConfigurationSetIterator.() (0)`
    4. `org.apache.commons.configuration.CompositeConfiguration.getKeys() (0)`
    5. `clojure.lang.APersistentMap$KeySeq.iterator() (0)`
    6. `com.netflix.internal.utils.collections.IteratorWrapper$CallableWrapper.iterator() (0)`
    7. `java.util.concurrent.Executors$RunnableAdapter.call() (0)`
    8. `org.apache.commons.exec.StreamPumper.run() (0)`
    9. `org.eclipse.core.internal.localstore.SafeFileOutputStream.close() (0)`
    10. `org.eclipse.core.internal.localstore.SafeFileOutputStream.commit() (0)`
    11. `org.eclipse.core.internal.localstore.SafeFileOutputStream.copy(File, File) (2)`
    12. `java.io.FileOutputStream.(File) (1)`

### Room for Improvement
- **Reflection:**
  - Most reflection calls are treated as interesting, leading to false positives.
  - Blind spots in call graph enumeration.
- **Assumptions:**
  - Minor improvements in condition satisfiability and virtual method call resolution can reduce false positives.
- **Limitations:**
  - Entry points are enumerated using known tricks; original research can help discover more ways to construct gadget chains.
  - Sinks with "interesting behavior" are hard-coded, leaving room for discovering and adding more sinks.

### Final Thoughts
- Automatic discovery of gadget chains is a new field.
- Gadget Inspector is a functional prototype with room for improvement.
- Gadget Inspector is open-source and available at [GitHub](https://github.com/JackOfMostTrades/gadgetinspector).
- Deserialization vulnerabilities will continue to evolve, and better tools will help us understand and mitigate these risks.

**Contact:**
- @ianhaken
- [GitHub](https://github.com/JackOfMostTrades)