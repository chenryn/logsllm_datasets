well-deﬁned by the standard, but the overﬂow may result in
the allocation of a memory chunk of invalid (smaller) size,
and consequently, to a heap overﬂow. An eﬀective arith-
metic error checker should be able to identify such poten-
tially exploitable vulnerabilities as it is clear that the devel-
oper did not intend for this behavior.
3. APPROACH
The security community is still unsuccessful in completely
eliminating the problem of integer errors even after years of
2According to the C99 and C11 standards. The C89 and
C90 (ANSI C) standards deﬁne this behavior.
eﬀort [10, 17, 25, 23]. One of the main reasons is the dif-
ﬁculty in distinguishing critical errors, which may lead to
reliability issues or security ﬂaws, from uses of undeﬁned
constructs stemming from certain programming practices.
The latter are regarded as errors by rigorous static checkers
like IOC, as they strictly follow the language standard and
report all violations found. In this work, we attempt to pin-
point critical, possibly exploitable arithmetic errors among
all arithmetic violations, which include numerous less criti-
cal and often developer-intended uses of undeﬁned behavior.
Although many programming choices deviate from the lan-
guage speciﬁcation, IntFlow examines the conditions under
which such constructs signify critical bugs, by focusing only
on detecting errors that might break the functionality of the
program or lead to a security ﬂaw.
Before describing IntFlow’s design, we ﬁrst provide a con-
crete deﬁnition of what we consider critical arithmetic errors.
Deﬁnition 1. An arithmetic error is potentially critical if
it satisﬁes any of the following conditions:
1. At least one of the operands in an erroneous arithmetic
operation originates from an untrusted source.
2. The result of an erroneous operation propagates to a
sensitive program location.
As capturing the intention of developers is a hard prob-
lem, IntFlow focuses on the detection of arithmetic errors
that might constitute exploitable vulnerabilities or cause re-
liability issues. This is achieved not only by focusing on
the identiﬁcation of violations according to the language
standard, which in itself is a tractable problem, but also
by considering the information ﬂows that aﬀect the erro-
neous code. The rationale behind this deﬁnition is that (1)
arithmetic errors inﬂuenced by external and potentially un-
trusted sources, such as sockets, ﬁles, and environment vari-
ables, may be exploited through carefully crafted inputs, and
(2) arithmetic errors typically result in severe vulnerabilities
when they aﬀect sensitive library and system operations,
such as memory allocation and string handling functions.
The two conditions of Deﬁnition 1 are reﬂected in IntFlow
by two diﬀerent modes of operation, blacklisting and sensi-
tive (in addition to a third whitelisting mode), discussed in
Section 4.3. Although the existence of either condition is an
indication of a critical error, arithmetic violations for which
both conditions hold are more severe, as they can potentially
allow input from untrusted sources to misuse critical sys-
tem functions—IntFlow’s diﬀerent modes of operation can
be combined to detect such errors.
Figure 1 visualizes the deﬁnition with diﬀerent types of
information ﬂows that may involve erroneous arithmetic op-
erations. Critical errors are related to information ﬂows that
originate from untrusted inputs, or that eventually reach
sensitive operations, such as system calls, through value
propagation. In cases where the input of an arithmetic op-
eration is untrusted (Deﬁnition 1.1) or a sensitive sink is
reached (Deﬁnition 1.2), the error is ﬂagged as critical. In
contrast, arithmetic errors inﬂuenced only by benign inputs
are considered less likely to be used in exploitation attempts.
The information ﬂow based approach enables us to handle
cases similar to the examples presented in Section 2.2. Int-
Flow can also silence error reports caused by statements sim-
ilar to those presented in Listing 1, since it can trace that the
metic operations is a major source of false positives, while
IntFlow’s active provisioning allows it to reduce false posi-
tives by eliminating checks for non-critical violations. IOC
is a major component of our architecture, as it provides as-
surance that all potentially serious arithmetic errors can be
checked. It is then up to the information ﬂow analysis to
identify and report only the critical ones.
For IntFlow’s information tracking mechanism we em-
ploy llvm-deps [18], an LLVM compiler pass implementing
static information ﬂow tracking in a manner similar to clas-
sic data ﬂow analysis [5]. It is designed as a context sensi-
tive (inter-procedural) analysis tool that allows forward and
backward slicing on source and sink pairs of our choice using
the DSA [15] algorithm. DSA performs context-sensitive,
uniﬁcation-based points-to analysis that allows us to track
data ﬂows among variables referred by pointer aliases.
It
is important to note that the analysis scope of llvm-deps
is limited to a single object ﬁle, as it is implemented as a
compile-time optimization pass and not as a link-time opti-
mization pass. Finally, due to the use of llvm-deps, Int-
Flow only examines explicit ﬂows during its IFT analysis
and ignores possible implicit ﬂows.
4.2 Putting It All Together
Figure 2 illustrates the overall architecture of IntFlow:
IOC adds checks to the integer operations that are exposed
by Clang in the AST and then llvm-deps performs static
IFT analysis on the LLVM intermediate representation (IR).
To reduce unnecessary checks that may lead to false pos-
itives, IntFlow uses llvm-deps to examine only certain
ﬂows of interest. As discussed in the previous section, Int-
Flow examines only ﬂows stemming from untrusted sources,
or ending to sensitive sinks.
Initially, IntFlow performs
forward slicing: starting from a particular source used in
a potentially erroneous arithmetic operation, it examines
whether the result of the operation ﬂows into sinks of in-
terest. Once such a source is found, IntFlow performs back-
ward slicing, to verify that the sink is actually aﬀected by it.
Since the ﬂow tracking mechanism does not oﬀer full code
coverage, we employ this two-step process to gain conﬁdence
on the accuracy of the ﬂow and verify its validity. Once the
source is reached when using backward slicing starting from
the sink, the ﬂow is considered established.
After compiling and linking the IR, the resulting binary
is exercised to identify critical errors, since the error check-
ing mechanism triggers dynamically. Developers should ex-
ecute the augmented binary with a broad range of inputs to
exercise as many execution paths as possible, and identify
whether they cause critical errors that can potentially lead
to exploitable vulnerabilities.
4.3 Modes of Operation
As discussed in Section 3, IntFlow uses two diﬀerent types
of information ﬂow to pinpoint errors. The ﬁrst associates
untrusted inputs with integer operations while the second
associates the result of integer operations with its use in
sensitive system functions. Once IOC inserts checks in all
arithmetic operations that may lead to an error, IntFlow
eliminates unnecessary checks by operating in one of the
following modes:
• In blacklisting mode, IntFlow only maintains checks for
operations whose operands originate from untrusted
sources and removes all other checks.
Figure 1: Information ﬂows to and from the location of an
arithmetic error.
origin of the value that leads to the undeﬁned behavior is a
constant initialization which is de facto developer-intended.
The code snippet in Listing 2, contains two diﬀerent types
of ﬂows. The ﬁrst one connects get_num_imgs() (line 3)
with the multiplication operation (line 5) while the second
one connects the result of the multiplication with a memory
allocation function (line 7), which is considered a sensitive
program location. The former is a Type 1 ﬂow because the
value of the multiplication operand originates from an un-
trusted input, while the latter is a Type 2 ﬂow since the
result of the operation aﬀects a sensitive function call. Int-
Flow would detect and report arithmetic errors caused by
maliciously crafted inputs in both cases.
4. DESIGN AND IMPLEMENTATION
In this section we present the design and implementation
of IntFlow, a tool that combines information ﬂow tracking
(IFT) [18] with a popular integer error checking tool [10]
to improve the accuracy of arithmetic error detection. The
main goal of IntFlow is to reduce the number of false pos-
itives produced by other static arithmetic error checkers.
In this context, the term “false positive” refers to reporting
developer-intended violations as critical errors. Although
from the perspective of the language standard these corre-
spond to erroneous code, the prevalence of such constructs
makes reports of such issues a burden for security analysts,
who are interested only in critical errors that may form ex-
ploitable vulnerabilities.
4.1 Main Components
IOC operates at the abstract syntax tree (AST) level pro-
duced by Clang [1], a C/C++ front-end of LLVM [14]. It in-
struments all arithmetic operations, as well as most of unary,
casting, and type conversion operations. In contrast to pre-
vious tools that focus on a subset of integer errors (typically
overﬂows and underﬂows), IOC provides protection against
a broader range of integer errors. Even though it focuses
mainly on errors with undeﬁned behavior based on the lan-
guage standards, it can also protect against errors that do
not fall into this category, covering most of the integer error
classes presented in Table 1.
IOC instruments all arithmetic operations that may lead
to an erroneous result, and inserts checks accordingly. Es-
sentially, for each integer operation inside a basic block, ad-
ditional basic blocks that implement the error-checking logic
are added and users are allowed to register callback functions
for error handling. Similarly to other integer error detection
systems, the fact that IOC instruments blindly all arith-
Untrusted Inputsread(), recv() ...Trusted Inputsgettimeofday(), CONSTANT ...Flow 1Arithmetic OperationsSensitive locationsmalloc(), strcpy() ...X, %, +, -, >Flow 2Figure 2: Overall architecture of IntFlow.
• In sensitive mode, IntFlow only maintains checks for
operations whose results may propagate to sensitive
sinks.
• In whitelisting mode, all checks for operations whose
arguments come from trusted sources are removed.
4.3.1 Trusted and Untrusted Inputs
For each operation that may result in an arithmetic error,
IntFlow’s IFT analysis determines the origin of the involved
operands. IntFlow then classiﬁes the origin as either trusted
or untrusted, and handles it accordingly, using one of the
following two modes of operation.
Blacklisting: Input sources that can be aﬀected by exter-
nal sources are considered untrusted, since carefully crafted
inputs may lead to successful exploitation.
If any of the
operands has a value aﬀected by such a source, IntFlow
retains the error checking instrumentation. System and li-
brary calls that read from untrusted sources, such as read()
and recv(), are examples of this type of sources.
Whitelisting: Erroneous arithmetic operations for which
all operands originate from trusted sources are unlikely to
be exploitable. Thus, for those cases, IntFlow safely re-
moves the error checks inserted by IOC at the instrumenta-
tion phase. Before an operation is veriﬁed as safe, IntFlow
needs to examine the origin of all data ﬂowing to that opera-
tion. Values derived from constant assignments or from safe
system calls and library functions, e.g., gettimeofday()
or uname(), are typical examples of sources that can be
trusted, and thus white-listed.
Following either of the above two approaches, IntFlow se-
lects the unsafe integer operations that will be instrumented
with protection checks. These modes of operation can be
complemented by IntFlow’s third mode, which reﬁnes the
analysis results for the surviving checks.
4.3.2 Sensitive Operations
In this mode, IntFlow reports ﬂows that originate from
integer error locations and propagate to sensitive sinks, such
as memory-related functions and system calls. Moreover, in
contrast to the previous modes, whenever an integer error
occurs, the error is not reported at the time of its occurrence,
but only once it propagates as input into one of the sensitive
sinks. This is very eﬀective in suppressing false positives,
since errors that do not ﬂow to a sensitive operation are not
generally exploitable.
To report errors at sensitive sink locations, IntFlow per-
forms the following operations:
• Initially, the tool identiﬁes all integer operations whose
results may propagate into a sensitive sink at runtime.
Any checks that do not lead to sensitive sinks are not
exploitable and thus are eliminated. A global array is
created for each sensitive sink, holding one entry per
arithmetic operation aﬀecting it.
• Whenever an integer operation generates an erroneous
result, its respective entries in the aﬀected global ar-
rays are set to true. If the operation is reached again
but without generating an erroneous result, before reach-
ing a sensitive location, the respective entry is set to
false, denoting that the result of the sensitive oper-
ation will not be aﬀected by this operation.
• If the execution reaches a sensitive function, the re-
spective global array is examined. Execution is inter-
rupted if one or more entries are set to true, as an
erroneous value from any previous integer operation
may aﬀect its outcome.
Implementation
Essentially, IntFlow keeps track of all the locations in the
code that may introduce errors aﬀecting a sensitive sink at
compilation time. Once a sensitive sink is reached during
runtime, IntFlow examines whether any of the error loca-
tions associated with the sink triggered an error in the cur-
rent execution ﬂow and in that case terminates the pro-
gram. Although it is better to combine the two modes to
establish end-to-end monitoring and detection of suspicious
ﬂows, each mode can also be used independently: the ﬁrst
mode to generally reduce the number of false positives, and
the second mode to detect exploitable vulnerabilities.
4.4
IntFlow is implemented as an LLVM [14] pass written in
∼3,000 lines of C++ code. Brieﬂy, it glues together its two
main components (IOC and llvm-deps) and supports ﬁne-
tuning of its core engine through custom conﬁguration ﬁles.
IntFlow can be invoked by simply passing the appropriate
ﬂags to the compiler, without any further action needed from
the side of the developer. Although IOC has been integrated
into the LLVM main branch since version 3.3, for the current
prototype of IntFlow we used an older branch of IOC that
supports a broader set of error classes than the latest one.
IntFlow’s pass is placed at the earliest stage of the LLVM
pass dependency tree to prevent subsequent optimization
passes from optimizing away any critical integer operations.
During compilation, arithmetic error checks are inserted by
IOC, and then selectively ﬁltered by IntFlow. Subsequent
compiler optimizations remove the ﬁltered IOC basic blocks.
Clang ASTC/C++LLVM-IRCompile, LinkArith. Operations InstrumentedIntFlow BinaryIFT IntegrationTrusted / UntrustedInput TrackingSensitive OperationTrackingRuntimeExecutionInteger error reportInput setIntFlow oﬀers developers the option to explicitly specify
arithmetic operations or sources that need to be whitelisted
or blacklisted. In addition, it can be conﬁgured to exclude
any speciﬁc ﬁle from its analysis or ignore speciﬁc lines of
code. Developers can also specify the mode of operation that
IntFlow will use, as well as override or extend the default
set of sources and sinks that will be considered during in-
formation ﬂow analysis. Finally, they can specify particular
callback actions that will be triggered upon the discovery of
an error, such as activating runtime logging or exiting with
a suitable return value. These features oﬀer great ﬂexibil-
ity to developers, enabling them to ﬁne-tune the granularity