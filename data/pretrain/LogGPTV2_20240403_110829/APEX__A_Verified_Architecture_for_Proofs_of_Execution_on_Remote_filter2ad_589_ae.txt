mate on the memory overhead required by the sequential logic
in APEX FSMs. APEX hardware overhead is small compared
to the baseline VRASED; it requires 2% and 12% additional
registers and LUTs, respectively. In absolute numbers, it adds
44 registers and 302 Look-Up Tables (LUTs) to the underlying
MCU. In terms of memory, APEX needs 9 extra bytes of RAM
for storing METADATA. This overhead corresponds to 0.01%
of MSP430 16-bit address space.
Run-time. We do not observe any overhead for software’s
execution time on the APEX-enabled P rv since APEX does
not introduce new instructions or modiﬁcations to the MSP430
ISA. APEX hardware runs in parallel with the original MSP430
CPU. Run-time to produce a proof of S execution includes:
(1) time to execute S (XAtomicExec), and (2) time to compute
an attestation token (XProve). The former only depends on
S behavior itself (e.g., SW-Att can be a small sequence of
instructions or have long loops). As mentioned earlier, APEX
does not affect S run time. XProve’s run-time is linear in the
size of ER + OR. In the worst-case scenario where these re-
gions occupy the entire program 8kBytes memory, XProve
takes around 900ms on an 8MHz device.
Veriﬁcation Cost. We verify APEX on an Ubuntu 16.04 ma-
chine running at 3.40GHz. Results are shown in Table 2. APEX
veriﬁcation requires checking 10 extra invariants (shown in
Deﬁnition 6) in addition to existing VRASED invariants. It also
consumes signiﬁcantly higher run-time and memory usage than
VRASED veriﬁcation. This is because additional invariants in-
troduce ﬁve additional variables (ERmin, ERmax, ORmin, ORmax
and EXEC), potentially resulting in an exponential increase in
complexity of the model checking process. Nonetheless, the
overall veriﬁcation process is still reasonable for a commodity
desktop – it takes around 3 minutes and consumes 280MB of
memory.
7.2 Comparison with CFA
To the best of our knowledge, APEX is the ﬁrst of its kind
and thus there are no other directly comparable PoX archi-
tectures. However, to provide a (performance and overhead)
point of reference and a comparison, we contrast APEX over-
head with that state-of-the-art CFA architectures. As discussed
in Section 2, even though CFA is not directly applicable for
producing proofs of execution with authenticated outputs, we
consider it to be the closest-related service, since it reports on
the exact execution path of a program.
We consider three recent CFA architectures: Atrium [44],
LiteHAX [16], and LO-FAT [17]. Figure 4.a compares APEX
to these architectures in terms of number of additional LUTs.
In this ﬁgure, the black dashed line represents the total cost of
the MSP430 MCU: 1904 LUTs. Figure 4.b presents a similar
comparison for the amount of additional registers required by
these architectures. In this case, the total cost of the MSP430
MCU itself is of 691 registers. Finally, Figure 4.c presents
the amount of dedicated RAM required by these architectures
(APEX’s dedicated RAM corresponds to the exclusive access
stack implemented by VRASED).
As expected, APEX incurs much lower overhead. According
to our results, the cheapest CFA architecture, LiteHAX, would
entail an overhead of nearly 100% LUTs and 300% registers,
on MSP430. In addition, LiteHAX would require 150 kB of
dedicated RAM. This amount far exceeds entire addressable
memory (64 kB) of 16-bit processors, such as MSP430. Results
support our claim that CFA is not applicable to this class of low-
782    29th USENIX Security Symposium
USENIX Association
end devices. Meanwhile, APEX needs a total of 12% additional
LUTs and 2% additional registers. VRASED requires about 2
kB of reserved RAM, which is not increased by APEX PoX
support.
7.3 Proof of Concept: Authenticated Sensing
and Actuation
As discussed in Section 1 an important functionality attainable
with PoX is authenticated sensing/actuation. In this section, we
demonstrate how to use APEX to build sensors and actuators
that “can not lie”.
As a running example we use a ﬁre sensor: a safety-critical
low-end embedded device commonly present in households
and workplaces. It consists of an MCU equipped with analog
hardware for measuring physical/chemical quantities, e.g., tem-
perature, humidity, and CO2 level. It is also usually equipped
with actuation-capable analog hardware, such as a buzzer. Ana-
log hardware components are directly connected to MCU Gen-
eral Purpose Input/Output (GPIO) ports. GPIO ports are physi-
cal wires directly mapped to ﬁxed memory locations in MCU
memory. Therefore, software running on the MCU can read
physical quantities directly from GPIO memory.
In this example, we consider that MCU software periodically
reads these values and transmits them to a remote safety author-
ity, e.g., a ﬁre department, which then decides whether to take
action. The MCU also triggers the buzzer actuator whenever
sensed values indicate a ﬁre. Given the safety-critical nature
of this application, the safety authority must be assured that
reported values are authentic and were produced by execution
of expected software. Otherwise, malware could spoof such
values (e.g., by not reading them from the proper GPIO). PoX
guarantees that reported values were read from the correct
GPIO port (since the memory address is speciﬁed by instruc-
tions in the ER executable), and produced output (stored in OR)
was indeed generated by execution of ER and was unmodiﬁed
thereafter. Thus, upon receiving sensed values accompanied by
a PoX, the safety authority is assured that the reported sensed
value can be trusted.
As a proof of concept, we use APEX to implement a sim-
ple ﬁre sensor that operates with temperature and humidity
quantities. It communicates with a remote V rf (e.g., the ﬁre
department) using a low-power ZigBee radio3 typically used by
low-end CPS/IoT devices. Temperature and humidity analog
devices are connected to a APEX-enabled MSP430 MCU run-
ning at 8MHz and synthesized using a Basys3 Artix-7 FPGA
board. As shown in Figure 5, MCU GPIO ports connected to
the temperature/humidity sensor and to the buzzer. APEX is
used to prove execution of the ﬁre sensor software. This soft-
ware is shown in Figure 8a in Appendix C. It consists of two
main functions: ReadSensor and SoundAlarm. Proofs of
execution are requested by the safety authority via XRequest
to issue commands to execute these functions. ReadSensor
reads and processes the value generated by temperature/humid-
ity analog device memory-mapped GPIO, and copies this value
to OR. The SoundAlarm function turns the buzzer on for 2
seconds, i.e., it writes “1” to the memory address mapped to
the buzzer, busy-waits for 2 seconds, and then writes “0” to
the same memory location. This implementation corresponds
to the one in the open-source repository 4 and was ported to
a APEX-enabled MCU. The porting effort was minimal: it
involved around 30 additional lines of C code, mainly for re-
implementing sub-functions originally implemented as shared
APIs, e.g., digitalRead/Write. Finally, we transformed
ported code to be compatible with APEX’s PoX architecture.
Details can be found in Appendix C.
8 Limitations & Future Directions
In the following we discuss some limitations in APEX current
approach and directions for future work.
Shared libraries. In order to produce a valid proof, V rf
must ensure that execution of S does not depend on external
code located outside the executable range ER (e.g., shared
libraries). A call to such code would violate LTL 4, resulting in
EXEC = 0 during the attestation computation. To support this
type of executable one can transform it into a self-contained
executable by statically linking all dependencies during the
compilation time.
Self-modifying code (SMC). SMC is a type of executable
that alters itself while executing. Clearly, this executable type
violates LTL 3 that requires code in ER to remain unchanged
during ER’s execution. It is unclear how APEX can be adapted
to support SMC; however, we are unaware of any legitimate
and realistic use-case of SMC in our targeted platforms.
Atomic Execution & Interrupts. The notion of successful
execution, deﬁned in Section 5.1, prohibits interruptions during
S’s execution. This limitation can be problematic especially
on systems with strict real-time constraints. In this case, the
PoX executable might be interrupted by a higher priority task
and, in order to provide a valid proof of execution, execution
must start over. On the other hand, simply resuming S exe-
cution after an interrupt may result in attacks where malware
modiﬁes intermediate execution results, in data memory, con-
sequently inﬂuencing the correctness of this execution’s output.
One possible way to remedy this issue is to allow interrupts
as long as all interrupt handlers are: (1) themselves immutable
and uninterruptible from the start of execution until the end of
attestation; and (2) included in the attested memory range dur-
ing the attestation process. V rf could then use the PoX result
H to determine whether an interrupt that may have happened
during the execution is malicious. This idea needs to be ex-
amined carefully, because even the accurate deﬁnition of PoX
correctness and security in this case becomes challenging. The
3https://www.zigbee.org/
4https://github.com/Seeed-Studio/LaunchPad_Kit
USENIX Association
29th USENIX Security Symposium    783
(a) % extra HW overhead: # Look-Up Tables
(b) % extra HW overhead: # Registers
(c) Dedicated RAM
Figure 4: Overhead comparison between APEX and CFA architectures. Dashed lines represent total hardware cost of MSP430.
PoX, where one large PoX code could be broken down into
multiple smaller pieces of atomic code and secure interruptions
are allowed in between the execution of two pieces.
9 Conclusion
This paper introduces APEX, a novel and formally veriﬁed se-
curity service targeting low-end embedded devices. It allows
a remote untrusted prover to generate unforgeable proofs of
remote software execution. We envision APEX’s use in many
IoT application domains, such as authenticated sensing and
actuation. Our implementation of APEX is realized on a real
embedded system platform, MSP430, synthesized on an FPGA,
and the veriﬁed implementation is publicly available. Our eval-
uation shows that APEX has low overhead for both hardware
footprint and time for generating proofs of execution.
Acknowledgements: The authors thank the designated shep-
herd (Dr. Sven Bugiel) for his guidance, and the anonymous
reviewers for their valuable feedback. UC Irvine authors’ work
was supported by Army Research Ofﬁce (ARO), under contract
W911NF-16-1-0536 and Semiconductor Research Corporation
(SRC), under contract 2019-TS-2907.
References
[1] APEX source code.
apex, 2020.
https://github.com/sprout-uci/
[2] Tigist Abera et al. C-ﬂat: Control-ﬂow attestation for embedded systems
software. In CCS ’16, 2016.
[3] Daniel J Bernstein, Tanja Lange, and Peter Schwabe. The security
impact of a new cryptographic library. In International Conference on
Cryptology and Information Security in Latin America, 2012.
[4] Karthikeyan Bhargavan, Cédric Fournet, Markulf Kohlweiss, Alfredo
Pironti, and Pierre-Yves Strub. Implementing TLS with veriﬁed crypto-
graphic security. In SP, 2013.
[5] Barry Bond, Chris Hawblitzel, Manos Kapritsos, K Rustan M Leino,
Jacob R Lorch, Bryan Parno, Ashay Rane, Srinath Setty, and Laure
Thompson. Vale: Verifying high-performance cryptographic assembly
code. In USENIX, 2017.
[6] Ferdinand Brasser, Ahmad-Reza Sadeghi, and Gene Tsudik. Remote
attestation for low-end embedded devices: the prover’s perspective. In
DAC, 2016.
Figure 5: Hardware setup for a ﬁre sensor using APEX
practicality and formal security analysis of such an approach
also remain an open problem that we defer to future work.
Future Directions. There is a number of interesting future
directions related to PoX. Developing formally veriﬁed PoX
architectures for high-end devices is an interesting challenge.
While architectures based on Flicker [34] and SGX [25] can
provide PoX on high-end devices, the trusted components in
these architectures (i.e., TPM and processor’s architectural
support) are not yet veriﬁed. It would also be interesting to
investigate whether APEX can be designed and implemented
as a standalone device (e.g., a tiny veriﬁed TPM-alike device)
that can be plugged into legacy low-end devices. Feasibility
and cost-effectiveness of this approach require further investi-
gation; this is because hybrid-architectures (such as SMART,
VRASED, and APEX) monitor internal MCU signals (e.g., PC,
or DMA signals) that are not exposed to external devices via
communication/IO channels. It would also be interesting to
see what kinds of trusted applications can be bootstrapped and
built on top of a PoX service for low-end devices. Finally, in
the near-future, we plan to look into techniques that can auto-
matically transform legacy code into PoX-compatible software
(see Appendix C) and to investigate how to enable stateful
784    29th USENIX Security Symposium
USENIX Association
APEXAtriumLiteHAXLO−FATNumber of Additional Look−Up Tables0200040006000800010000APEXAtriumLiteHAXLO−FATNumber of Additional Registers050001000015000APEXAtriumLiteHAXLO−FATAdditional Dedicated RAM (kB)050100150200[7] F. Brasser et al. Tytan: Tiny trust anchor for tiny devices. In DAC, 2015.
[8] Xavier Carpent, Karim Eldefrawy, Norrathep Rattanavipanon, and Gene
Tsudik. Temporal consistency of integrity-ensuring computations and
applications to embedded systems security. In ASIACCS, 2018.
[9] Xavier Carpent, Karim Eldefrawy, Norrathep Rattanavipanon, and Gene
Tsudik. Temporal consistency of integrity-ensuring computations and
applications to embedded systems security. In Proceedings of the 2018
on Asia Conference on Computer and Communications Security, pages
313–327. ACM, 2018.
[10] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang
Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang,
and Kehuan Zhang. Iotfuzzer: Discovering memory corruptions in iot
through app-based fuzzing. In NDSS, 2018.
[11] Alessandro Cimatti, Edmund Clarke, Enrico Giunchiglia, Fausto
Giunchiglia, Marco Pistore, Marco Roveri, Roberto Sebastiani, and Ar-
mando Tacchella. NuSMV 2: An opensource tool for symbolic model
checking. In International Conference on Computer Aided Veriﬁcation,
pages 359–364. Springer, 2002.
[12] Alessandro Cimatti, Edmund Clarke, Enrico Giunchiglia, Fausto
Giunchiglia, Marco Pistore, Marco Roveri, Roberto Sebastiani, and Ar-
mando Tacchella. Nusmv 2: An opensource tool for symbolic model
checking. In International Conference on Computer Aided Veriﬁcation,
pages 359–364. Springer, 2002.
[13] Victor Costan, Ilia Lebedev, and Srinivas Devadas. Sanctum: Minimal
hardware extensions for strong software isolation. In 25th {USENIX}
Security Symposium ({USENIX} Security 16), 2016.
[14] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide
Balzarotti. A large-scale analysis of the security of embedded ﬁrmwares.
In 23rd {USENIX} Security Symposium ({USENIX} Security 14), pages
95–110, 2014.
[15] Ivan De Oliveira Nunes, Karim Eldefrawy, Norrathep Rattanavipanon,
Michael Steiner, and Gene Tsudik. VRASED: A veriﬁed hardware/soft-
ware co-design for remote attestation. USENIX Security’19, 2019.
[16] Ghada Dessouky, Tigist Abera, Ahmad Ibrahim, and Ahmad-Reza
Sadeghi. Litehax: lightweight hardware-assisted attestation of program
execution. In 2018 IEEE/ACM International Conference on Computer-
Aided Design (ICCAD), pages 1–8. IEEE, 2018.
[17] Ghada Dessouky, Shaza Zeitouni, Thomas Nyman, Andrew Paverd, Lu-
cas Davi, Patrick Koeberl, N Asokan, and Ahmad-Reza Sadeghi. Lo-fat:
Low-overhead control ﬂow attestation in hardware. In Proceedings of
the 54th Annual Design Automation Conference 2017, page 24. ACM,
2017.
[18] Alexandre Duret-Lutz, Alexandre Lewkowicz, Amaury Fauchille,
Thibaud Michaud, Etienne Renault, and Laurent Xu. Spot 2.0—a frame-
work for ltl and ω-automata manipulation. In International Symposium
on Automated Technology for Veriﬁcation and Analysis, pages 122–129.
Springer, 2016.
[19] Karim Eldefrawy, Norrathep Rattanavipanon, and Gene Tsudik. HY-
DRA: hybrid design for remote attestation (using a formally veriﬁed
microkernel). In Wisec. ACM, 2017.
[20] Karim Eldefrawy, Gene Tsudik, Aurélien Francillon, and Daniele Perito.