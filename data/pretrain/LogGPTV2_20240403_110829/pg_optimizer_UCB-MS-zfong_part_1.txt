1
1. INTRODUCTION
Relational database management systems arewidely available inthecommercial market. Currently
available systemsrunonavarietyofhardware,rangingfromDECminicomputers (e.g.,Informix,Oracle,
Unify) to IBM mainframes (e.g., Adabas, Datacom/DB, DB2, IDMS/R). These systems have been suc-
cessful because of the merits of the relational model, as first illustrated by two research prototypes,
INGRES[STON76]andSYSTEM-R[ASTR76]. INGRESandSYSTEM-Rnotonlyillustrated thefeasi-
bility of the relational model, but their respective query languages, QUEL [HELD75b] and SQL
[CHAM76],also showed that it is possible to ask querieswithout explicitly specifying accesspaths. The
ability to support these non-procedural query languages is a result of sophisticated query optimization
algorithms. INGRES introduced a technique known as query decomposition [WONG76], while
SYSTEM-R employed an exhaustive search algorithm [SELI79]. Largely due to the success of these
algorithms, relationalsystemsweremadeefficient. Therefore,coupledwiththesimplicityanduniformity
of the relational model, it is not surprising that relational databases have established a formidable pres-
enceinthecommercialmarket.
The relational model, however, has been criticized for its impoverished semantics [KENT79],
[ZANI83] and inability to provide strong support for non-business applications [HASK82]. In recent
years, researchers have been investigating the possibility of extending query languages in relational sys-
temstosupportnewapplicationareasaswellasbettersemantics. Examplesinclude:
g aproposaltosupportabstractdatatypes(ADTs)andoperatorsinINGREStoimprovethesemantics
ofapplications[FOGG82],[ONG82]
g a new language, QUEL*, to support the transitive closure operations required in artificial intelli-
genceapplications[KUNG84]
g a proposal to support QUEL as a data type to increase the data modeling power of relational sys-
tems[STON84],[STON85b]
2
g a proposal to support rules and triggers in a relational system to provide inference and forward
chainingneededinexpertsystemapplications[STON85a].
The ideas behind these proposals are being incorporated into POSTGRES (‘‘POSTinGRES’’), a
next-generation relational database system being built at the University of California, Berkeley
[STON86b]. Providing better support for engineering design and artificial intelligence applications are
among the goals of POSTGRES. To meet these goals, POSTGRES will support extendible and user-
defined access methods [STON86a] as well as abstract data types, transitive closure queries, procedural
datafields,triggers,andrules. Thequerylanguageforthesystemwillbecalled‘‘POSTQUEL.’’
POSTGRES is still in its preliminary implementation phase. However, a query optimizer for the
system has been built. Although the basic optimization algorithm is modeled after the SYSTEM-R
approach, there are many other issues that the optimizer must contend with given the novel features of
POSTGRES. Section 2 will introduce these features. Section 3 will then discuss design decisions that
were made in formulating optimization algorithms. Section 4 will discuss implementation decisions
made, and finally section 5 will evaluate the performance of the POSTGRES optimizer by comparing it
withthequeryoptimizerofanotherrelationalsystem.
2. POSTQUEL
The next twosubsectionswill motivate thedifferentissuesthat theoptimizer mustconsiderthrough
severalexamples. Then,itwillindicatehowthesenewfeaturesaffecttheoptimizer.
2.1. AnExtendible TypeSystem
One of the features that POSTGRES supports are abstract data types (ADTs). An ADT facility
allow usersto definetheir owndata types,simplifying representationofcomplexinformation. Forexam-
ple, a user who must store box coordinates in his database can define a data type called ‘‘boxcoordi-
nates.’’ From here, he can define a relation BOX with a coordinates field of type ‘‘boxcoordinates.’’ The
unit square box shown in figure 2.1, therefore, would be represented as shown in figure 2.2. This is in
3
contrasttofigure2.3.
POSTGRES also allows users to define operators to be used in conjunction with user-defined data
types. By defining an operator ‘‘AREA,’’ a query to compute the area of the above box would be
expressedas:
retrieve(a=AREA(BOX.coordinates))whereBOX.boxid=1
ratherthan:
retrieve(a=sqrt(sqr(BOX.x1-BOX.x2)+sqr(BOX.y1-BOX.y2))+
sqrt(sqr(BOX.x1-BOX.x4)+sqr(BOX.y1-BOX.y4)))
whereBOX.boxid=1.
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
(0,1)
(-1,0) (1,0)
(0,-1)
Figure2.1
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
cciiBiOiiXiicic ibioixiiidiiic iiiiiiicioioirdiiiniaiteisiiiiiiiic
cc c c
icic iii1iiiiic i(i(-i1i,i0i),i(i0i,1i)i,i(i1i,0i)i,i(i0i,-i1i))iic
Figure2.2
Relationwithuser-definedtype‘‘boxcoordinates’’
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
cciiBiiOiXiiiccibioixiiidiiciixi1iiciiyi1iiciixi2iiciiyi2iiciixi3iiciiyi3iiciixi4iiciiyi4iic
cc c c c c c c c c c
icciii1iiiiic i-i1iiic i0iiiic i0iiiic i1iiiic i1iiiic i0iiiic i0iiiic i-i1iic
Figure2.3
Relationwithoutuser-definedtypes
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
4
Inaddition, anoperator‘‘AREAEQ’’(areaequals)canbedefinedto find all boxeswhoseareaisequalto
somedesiredvalue. Forexample,
retrieve(BOX.all)whereBOX.coordinateAREAEQ10
finds all boxes whose area equals ten. Similarly, operators like ‘‘AREALT’’ (area less than) and
‘‘AREAGT’’(areagreaterthan)canalsobedefined.
The operators, AREAEQ, AREAGT, and AREALT, are quite similar to the conventional relational
operators,=, >, and’’ order, a user has an
access method that provides efficient access to queries whose restrictions contain the AREAEQ,
AREAGT, or AREALT operators. Another example is a hash table that can be constructed using the
operator‘‘AREAEQ’’ratherthan‘‘=.’’
The technique just described is suitable provided there exists an appropriate access method upon
which extensions can be made. However, suppose a user defines an operator contained-in, ‘‘<<,’’ that
returns true if the left operand is spatially contained within the right operand. To provide efficient access
to thisoperator,two-dimensional accessmethodsarerequired,e.g. anR-tree[GUTT84]oraK-D-BTree
[ROBI81]. Since conventional databases do not support two-dimensional access methods, an extension
of an existing access method is not possible. To alleviate this problem, POSTGRES allows users to
definetheirownaccessmethods. Detailsonuser-definedaccessmethodsarediscussedin[STON86a].
In summary, with an extendible type system, users can build data types to suit their application
needs, operators to manipulate the new types, and access methods to provide efficient access to queries
containingthesenewoperators.
5
2.2. Procedural DataFields
Existing relational databases do not provide good support for storage of complex objects. For
example, if a complex object consists of a single box, circle, and triangle, this information would be
represented as shown in figure 2.4. As a result, three join queries must be executed to retrieve all infor-
mation about subobjects within this complex object. In the more general case where a complex object is
composedofuptondifferentsubobjecttypes,auserwouldhavetoexecutenjoinqueries. Withoutextra
information indicating which subobject types are actually contained within a desired object, the user has
no choice but to execute all n queries. This is quite inefficient, particularly when n is large, because as
indicatedintheprevioussentence,manyofthejoinqueriesareunnecessarilyexecuted.
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
BOX(bid,bdata)
CIRCLE(cid,cdata)
TRIANGLE(tid,tdata)
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
cciiCiOiiBiJiEiCiiTiicic icioiidiiic ioibijityipieiiic ioiiidiic
cc c c c
1 box 2
cc c c c
1 circle 3
cc c c c
icic ii1iiiic itiriiainigilieiic ii4iiic
retrieve(BOX.all)where
BOX.bid=COBJECT.oidand
COBJECT.objtype=‘‘box’’and
COBJECT.coid=1
retrieve(CIRCLE.all)where
CIRCLE.cid=COBJECT.oidand
COBJECT.objtype=‘‘circle’’and
COBJECT.coid=1
retrieve(TRIANGLE.all)where
TRIANGLE.tid=COBJECT.oidand
COBJECT.objtype=‘‘triangle’’and
COBJECT.coid=1
Figure2.4
Storageofcomplexobjectsinarelationalsystem
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
6
The basic problem here is that the relational model is not well-suited for representing hierarchical
relationships. As a solution, Stonebraker has proposed embedding queries within data fields and using
these queries to express the hierarchical relationship between the corresponding tuple and information
elsewhere in the database [STON84]. Using this idea, which POSTGRES supports, our complex object
example is now represented as shown in figure 2.5. To retrieve information executed by the queries
embeddedwithinthisdatafield,theuserwouldissuethefollowingquery:
execute(COBJECT.components)whereCOBJECT.coid=1.
Thus, n join queries reduce to a single execute query. Inaddition, userscanselectively retrieve informa-
tion linked through these hierarchies by nesting attributes in a manner similar to the proposal in GEM
[ZANI83]. For example, to retrieve triangle information for a particular complex object, a user would
nest‘‘tdata’’within‘‘components’’asshownbelow:
retrieve(COBJECT.components.tdata)whereCOBJECT.coid=1.
Ingeneral,attributescanbenestedtoanarbitrarynumberoflevels.
2.3. ThePOSTGRESOptimizer
Query optimization decisions aremade basedupon the characteristics ofoperatorsappearing within
queries as well as the index types defined on relations. In a conventional optimizer, information about
operators and access methods can be ‘‘hardwired’’ into the optimization code because there are only a
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
cciiCiOiiBiJiEiCiTiiicciicioiidiiic iiiiiiiiiiiiiiiiiicioimipioinieinitisiiiiiiiiiiiiiiiiiic
cc c c
1 retrieve(BOX.all)whereBOX.bid=2
cc c c
retrieve(CIRCLE.all)whereCIRCLE.cid=3
cc c c
icciiiiiiic irieitiriieiviei(iTiRiIiAiiNiGiLiiEi.ailil)iiwihieirieiTiRiiIAiiNiGiiLiEi.itiidi=ii4iic
Figure2.5
Storageofcomplexobjectswithproceduraldatafields
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
7
fixed number of operators and access methods within the system. Such a solution would not suffice in a
systemlike POSTGRESwhereanarbitrarynumberofoperatorsandaccessmethodsareatauser’sdispo-
sal. Consequently,thiswasanissuethathadtobeconsideredwhendesigningthePOSTGRESoptimizer.
The optimizer also must consider queries containing nested attributes. Assection 3.5 will describe,
thereisacleanandsimple solution tothisproblem,whichonlyrequiresthattheoptimizerapplythebasic
planningalgorithmonceforeachnestinglevel.
Rules and triggers will be processed using query modification [STON75]. This aspect of
POSTGRES will not be discussed in this report because query modification is being implemented in a
moduleseparatefromtheoptimizer. Fordetails,see[STON86d].
Sophisticated algorithms havebeenproposedtooptimize transitive closurequeriesaswellassetsof
queries. This is done by transforming sequencesofdatabase operations to equivalent sequencesthat exe-
cute more efficiently. This report, however, will not discuss these techniques any further because the
topicisoutsidethescopeofthisproject. Fordetails,see[SELL85],[SELL86].
3. DESIGNOF THE OPTIMIZER
This section will first describe the optimization algorithm chosen for POSTGRES, focusing on
featuresspecifically incorporated to handle extendibilityin POSTGRES. Therestofthesectionwill then
indicate how this algorithm is used in optimizing nested-attribute queries. Algorithms are described in
high-level detail with special attention given to the design rationale behind various features. Plans pro-
duced by these algorithms are also described to indicate how the query processor interprets optimizer
plans.
3.1. Choice ofOptimization Algorithm
In selecting an optimization algorithm to work with, there were two choices — query decomposi-
tion [WONG76] or exhaustive search. Query decomposition is a heuristic ‘‘greedy’’ algorithm that
proceeds in a stepwise fashion. If a query has three or more variables, heuristics are first used to subdi-
8
vide the query into two smaller subqueries. This process is applied recursively to any subqueries that
contain at least three variables. For subqueries containing less than three variables, tuple substitution is
used to process the join, while a component known as the one-variable query processor determines the
pathusedtoscanindividual relations.
Oncethefirststepofaqueryplanhasbeenconstructedusingthisdecompositionalgorithm,thestep
is executed. By doing this, the optimizer has information on the sizes of intermediate results, which can
be used to its advantage in making subsequent decisions. Furthermore, the search space is reduced sub-
stantially because only a single path is considered. However, as a result, potentially good plans are
ignoredduringearlystagesofthealgorithm.
The SYSTEM-R designers took a dramatically different approach by essentially doing an exhaus-
tive search of the plan space. All possible ways of scanning each relation appearing within a query are
found. Using these paths, all plans for processing two-way joins are considered. Then, single relations
are joined to form three-way joins, and fromhere,the algorithm iterates in asimilar manner. The cost of
executingeachofthesepathsisestimated,andthecheapestisselectedasthedesiredplan.
Although exhaustive search inevitably requires more planning time, good plans are not overlooked.
Thisisespecially important whenoptimizing complicatedqueriesbecauseforthesequeriesthedifference
intheamount ofprocessingrequiredbytwoplanscanbequitesignificant. Thus,theextraplanningover-
head is more than compensated by savings that result from executing a better plan. For simple queries,
although the selected plan may not be significantly better than another, the extra overhead is likely to be
inconsequential. For queries embedded within data fields, the extra overhead of enumerative planning is
especially unimportant because these queries will be preexecuted in background mode and POSTGRES
will cachetheexecutionresultsaswellasthecompiled queryplans. Inthesecases,thetimespentoptim-
izingwillbeamortizedoverseveralexecutions.
TheSYSTEM-Roptimizeronlyconsiderslinearjoins,e.g.,
((AjoinB)joinC)joinD
9
for a 4-way join. The optimizer could be improved to consider joins between pairs of composite rela-
tions,e.g.,
(AjoinB)join(CjoinD).
This would allow the optimizer to examine further plans, and on occasion, these plans may be
significantlybetterthanplansthatonlyutilize linearjoins.
Anotherenhancement to the SYSTEM-Roptimizer is to considerplans that will dynamically create
indices on join attributes if they are not already available. If the cost of building the index is small com-
paredtothesavingsthatresultfromusingtheindexinajoin,suchastrategycanbeadvantageous.
The POSTGRES optimizer does not consider these enhancements either. Although they would
undoubtedly result in abetter optimizer, the main goal ofPOSTGRESis to illustrate the feasibility ofthe
novel features that it will support. Therefore, for simplicity,the POSTGRESoptimizer will adherefairly
closelytothealgorithmasdescribedin[SELI79].
3.2. Pipelining of Tuples
Ignoring nested attributes for the moment, the query plan created by the optimizer is a tree of scan
and join nodes. Relations are either scanned sequentially or via primary or secondary indices. Joins are
processed using nested iteration, merge-sorts, or hash-joins. Each of these join strategies will be dis-