        print("Your ticket:%s" % ct.hex())
        print("With my Auth:%s" % te.hex())
    def check_ticket():
        ct = bytes.fromhex(input("Ticket:"))
        te = bytes.fromhex(input("Auth:"))
        msg = ae.decrypt(ct, te)
        assert msg
        uid, uname, token, cmd, appendix = unpack(msg)
        if uname == b"Administrator" and cmd == b"Give_Me_Flag":
            print(FLAG)
            exit(0)
        else:
            print("Nothing happend.")
    def menu():
        print("Menu:")
        print("[1] Apply Ticket")
        print("[2] Check Ticket")
        print("[3] Exit")
        op = int(input("Your option:"))
        assert op in range(1, 4)
        if op == 1:
            apply_ticket()
        elif op == 2:
            check_ticket()
        else:
            print("Bye!")
            exit(0)
    if __name__ == "__main__":
        ae = Toy_AE()
        if not proof_of_work():
            exit(-1)
        for _ in range(4):
            try:
                menu()
            except:
                exit(-1)
可恶，果然是这样吗。。不只代码长，甚至附件都有俩。害，慢慢啃咯。。。先不管这个加密的具体是啥，来看看功能是啥叭。程序有俩功能，提供ticket，和检查ticket，获取flag的点在检查ticket，
    def decrypt(self, ct, _te):
        msg, te = self.A_DF(ct)
        return msg if _te == te else None
    msg = ae.decrypt(ct, te)
    assert msg
    uid, uname, token, cmd, appendix = unpack(msg)
    if uname == b"Administrator" and cmd == b"Give_Me_Flag":
        print(FLAG)
要求你的这个ticket代表的信息是，用户名是Administrator，要执行的命令是Give_Me_Flag，并且还要提供这个ticket的签名Auth来保证他的合法性。
再来看看这个提供ticket有啥，
    def apply_ticket():
        uid = int(input("Set up your user id:")[:5])
        uname = input("Your username:").encode("ascii")[:16]
        if uname == b"Administrator":
            print("Sorry, preserved username.")
            #return
        token = sha256(uname).hexdigest()[:max(8, uid % 16)].encode("ascii")
        cmd = input("Your command:").encode("ascii")[:16]
        if cmd == b"Give_Me_Flag":
            print("Not allowed!")
            #return
        appendix = input("Any Appendix?").encode("ascii")[:16]
        msg = pack(uid, uname, token, cmd, appendix)
他要求你提供，uid，用户名，cmd，和额外的可选择的信息。其中，用户名不能等于Administrator，cmd不能等于Give_Me_Flag。（不然这题直接就没了。）然后他会生成一个你的用户名的sha256的摘要，至于存多少长读进你的message呢，由你的uid来决定。
`token = sha256(uname).hexdigest()[:max(8, uid % 16)].encode("ascii")`
然后一些限制是，除了uid最大为5位数字之外，其余输入最多只能16个字符，并且每个字符的ascii都得在0-128之间（由decode(‘ascii’)限制）。（不然你要是输入\xff，这题也直接就没了）
所以题目意思很明确，你要伪造密文，并且还要能够构造对应的签名来通过合法性验证。让他解密信息后用户名为Administrator，cmd为Give_Me_Flag。然后由于对输入做的诸多限制，（甚至一次连接只能交互4次，除去一次来获取flag，只能交互三次，下一次连接就生成新的Toy_AE对象，生成新的key了）导致漏洞点大概率不会出现在这个task文件中，，那就要找这个Toy_AE算法的洞了。（啊，好长，不想看）
一点点啃叭，先大致随便看看，然后我们有目的性的先来看看生成Auth的过程。（单独拎出来会清晰些）
    self.Sigma = b'\x00' * self.n_size
    self.Sigma = strxor(M_list[2*i +1], self.Sigma)
    if 组数为偶数：
        Z = self.cipher.encrypt(strxor(self.L, M_list[-2]))
        Cm  =  strxor(Z[:len(M_list[-1])], M_list[-1])
        self.Sigma = strxor(self.Sigma, strxor(Z, self.pad(Cm, self.block_size)))
    else:
        self.Sigma = strxor(self.Sigma, self.pad(M_list[-1], self.n_size))
        TE = self.cipher.encrypt(strxor(self.Sigma, multer))
    TE = self.cipher.encrypt(strxor(self.Sigma, multer))
可以看到，如果组数为偶数，就会多生成一个Z，而且生成的密文方式也会比较麻烦，那么我们就先利用那个附加信息来控制组数，尽量避免这个麻烦的东西。
这样子的话Sigma第2块、第4块明文、填充后的第5块明文的异或，然后和multer
    if len(M_list[-1]) == self.n_size:
        multer = strxor(long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size)), self.delta)
    else:
        multer = long_to_bytes(self.GF2_mul(3, bytes_to_long(self.L), self.n_size))
（multer和L有关，不可知，那就不管了）异或，最后AES加密，返回密文。
由于AES的key也不可知，所以我们想要拿到Auth，没别的方法了。只能在传明文获取Auth时，让我们的msg的第二块和第四块和第五块和真正的能拿到FLAG的msg的明文保持一致了。
这里一个做法就是，本地跑这个程序，把那些麻烦的PoW啥的去去掉，一些限制（比如用户名不能是Administrator）也去去掉，然后打印一些方便我们审计的信息，（当然，熟用那种自带debug编译器的大佬可以忽略，IDLE选手还是比较喜欢print
debug大法）
那就是怎么伪造密文了。
先看看密文的生成
    C1, C2 = self.feistel_enc_2r(M_list[2*i], M_list[2*i +1])
    def feistel_enc_2r(self, M1, M2):
            C1 = strxor(self.cipher.encrypt(strxor(M1, self.L)), M2)
            C2 = strxor(self.cipher.encrypt(strxor(C1, strxor(self.L, self.delta))), M1)
            return C1, C2
我们把明文和密文看成16字节一块，两块一组，两块明文对自己这组生成的密文有影响，但每组明文间的加密是独立的。也就是第一组（第一二块）明文不影响第二组（第三四块）明文生成的第二块密文。
那么，如果我们的uid是1，用户名是Administrator，cmd是Give_Me_Flag，不加信息，
（本地起这个程序，把用户名和cmd的限制给取消掉，然后打印一下M_list）
我们会生成4块明文，`[b'Uid=1\xffUserName=A', b'dministrator\xffT=e',
b'7d3e769\xffCmd=Give', b'_Me_Flag\xff']`
前面说了，为了让生成的Auth便于计算，我们要加入附加信息（Appendix）来控制明文组数。
但这里先看看M_list叭，如果我们想要得到Auth，那么我们就得保证我们构造的用户名和cmd在不等于限定值的情况下，M_list的第二组和第四组与用户名为Administrator和cmd为Give_Me_Flag时的M_list的相应分组相同。
这样子看过去，对于我们目前得到的这个M_list是很好构造的，由于Administrator的A在第一组，那么我们注册Bdministrator；由于Give_Me_Flag的Give在第三组，那么我们注册give_Me_Flag就好了。然后加一加Appendix控制下组数。但是注意到第二组最后一位是sha256的首位，而我们要是动了用户名，这个值大概率也有变，所以我们还得控制这个用户名的首位，可能不能是B，我们就在ascii
为0到128之间找一个字符*，让*dministrator的sha256的首位为e就可以了。经过测试，字符‘P’就是一个合适的值
看，上面是目标Auth，下面是我们伪造的用户名和cmd获取的Auth，他们是一致的。所以Auth这一关过了。那就只剩下密文的伪造了。
对于第一组，是由uid和用户名决定的。其中uid不用伪造，问题不大，但是用户名的密文咋办，我们用户名不能等于Administrator，但是又要搞到的Administrator的密文。
这里用到的第一技巧就是，增加uid的长度，反正uid最后模16了，我们控制uid长度为5，用户名为Administratorr（多了一个r），这样子对照一下，
可以发现，多出来的那个r正好被挤到第三组去了，这样子我们的用户名既没有等于Administrator，但是又获得了前两块属于Administrator的msg的密文。
ok。一半的工作完成。
第二组，由于uid那么构造了，那么第二组明文就是这样子的，`b'r\xffT=ab86207b\xffCmd',
b'=Give_Me_Flag\xff`由hash和cmd和组成（这里只是测试，附加信息就先不加了）。
这里我们要的是cmd=Give_Me_Flag的密文，怎么伪造cmd呢？我们不能改变任何一个字符，不然由于AES的存在，密文整个就不一样了。但是输入的cmd又不能等于Give_Me_Flag。这里我们还是用前面的方法，由于这里分组加密的特性，我们把cmd顶到第二块的末尾，大概就是让第二组的第二块明文是这样子，
`'Cmd=Give_Me_Flag'`
刚好16个字节，然后我们的命令就可以改成Give_Me_Flagg，多的g到第五块去了，咱们就不用管了。至于怎么顶，这里就要利用uid了，在uid长度仍然保持为5的情况下，进行加减，控制hash的长度为12就好了，11111%16
= 7，那就用11116，
可以看到这样`\xffT=4110a98d23fc\xff`刚好占满了第二组第一块的16字节，`'Cmd=Give_Me_Flag`占了另一块。而我们输入的cmd命令是Give_Me_Flagg，是能过验证的。这样交互，让他加密，就能得到明文：`b'\xffT=4110a98d23fc\xff',
b'Cmd=Give_Me_Flag'`生成的密文了。但是这里还有个问题，hash由用户名控制，用户名为Administrator的12位hash是e7d3e769f3f5，然而我们又不能注册用户为Administrator，那一个想法就是，碰撞，找一个由可见字符串组成的13位字符串（Administrator的长度），sha256后前12位为e7d3e769f3f5就可以了。然而这显然不现实，12位是96bit，有这算力，比特币不是随便挖？所以这题有解的一个原因就是，这个系统并没有验证用户名的hash，所以你随便整个用户名就好。
但是新问题产生了，Auth的获取怎么办？现在我们的uid=11116，我们来看看用户名为Administrator，cmd为Give_Me_Flag的情况
想要得到Auth，就得构造同样的第二块、第四块明文，第二块明文还好说，用户名我们多打一个字符就能绕过检查了，而这个字符也会被顶到第三块，对Auth没有影响，并且我们也可以uid相应的减1，让第四块密文不受到影响。但是第四块的明文本身就不好操作啊，这里要是也多打一个字符绕过的话，第五组就多了一个字符，这样产生的Auth就完全对不上了。
所以要把证获取到正确的Auth，我们需要第二块，第四块，第五块分别为：`b'me=Administrator', b'Cmd=Give_Me_Flag',
b'\xff'`
这里我的做法是，缩短uid为两位长，构造用户名为：me=Administrator，控制uid%16为8，构造cmd为Cmd=Give_Me_Flag
可以看到是完全一致的。如果此时打印出来了C_list的话，也会发现，此时这两组产生的C_list的最后一组也是一致的，因为我们这里M_list的到数两组是一致的。
####  解题流程
所以这道题的整个解题流程：（交互可以直接手撸）
  1. uid：24，name：me=Administrator，cmd：Cmd=Give_Me_Flag 获取Auth和第三段密文
  2. uid：11116，name：me=Administratorr，后面随意 获取第一段密文
  3. uid：11116，name：Administratos，cmd：Give_Me_Flagg 获取第二段密文
  4. 发送Auth和三段密文的拼接，获取flag
exp
    from pwn import *
    sh=remote("123.57.4.93","45216")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    context.log_level = 'debug'
    def proof_of_work(sh):
        sh.recvuntil("XXXX+b\'")
        suffix = sh.recvuntil("\'").decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== b\'")
        cipher = sh.recvuntil("\'").decode("utf8")[:-1]
        print(suffix)
        print(cipher)
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Give me XXXX:", proof)
    proof_of_work(sh)
    sh.recvuntil("option:")
    sh.sendline('1')
    sh.recvuntil("id:")
    sh.sendline('24')
    sh.recvuntil("name:")
    sh.sendline("me=Administrator")
    sh.recvuntil("and:")
    sh.sendline("Cmd=Give_Me_Flag")
    sh.recvuntil("?")
    sh.sendline("")
    sh.recvuntil("ket:")
    ticket=sh.recvuntil("\n")[:-1]
    sh.recvuntil("Auth:")
    Auth=sh.recvuntil("\n")[:-1]
    sh.recvuntil("option:")
    sh.sendline("1")
    sh.recvuntil("id:")
    sh.sendline("65548")
    sh.recvuntil("name:")
    sh.sendline("Administratorr")
    sh.recvuntil("and:")
    sh.sendline("Give_Me_Flagg")
    sh.recvuntil("?")
    sh.sendline("")
    sh.recvuntil("ket:")
    ticket1=sh.recvuntil("\n")[:-1]
    sh.recvuntil("option:")
    sh.sendline('1')
    sh.recvuntil("id:")
    sh.sendline('65548')
    sh.recvuntil("name:")
    sh.sendline("Administratos")
    sh.recvuntil("and:")
    sh.sendline("Give_Me_Flagg")
    sh.recvuntil("?")
    sh.sendline("")
    sh.recvuntil("ket:")
    ticket2=sh.recvuntil("\n")[:-1]
    sh.recvuntil("option:")
    sh.sendline('2')
    sh.recvuntil("Ticket:")
    sh.sendline(ticket1[:64]+ticket2[64:64*2]+ticket[-2:])
    sh.recvuntil("Auth:")
    sh.sendline(Auth)
    sh.interactive()
不得不说这一题出的很精妙，精妙到连输入字符的长度都卡的很死又恰到好处，uid的功能也很灵活，最后的突破点在一个hash未验证。解题花了快一个晚上，除了啃了好久的代码，主要是各种试错。想了很多种构造的方法，包括字节翻转绕过之类的，最后都被一一否决。
但最后构造出来了并拿到flag还是很开心的，虽然再一次认识到了自己和大佬们间的差距。（队伍最后只解出来了两道密码学和一道逆向，差了2名与决赛资格失之交臂，还是挺可惜的）
## 总结
这两场比赛的四道题目的质量算是比较高叭，byte是两道公钥密码，一个是CRT和脸，一个sm2，。x-nuca是一个奇异爱德华曲线，和一个不知道是不是自创的分组密码。（要是验证hash的话这样的算法系统应该没别的漏洞了，叭？）然后X-NUCA还有一道我没解出来的是LWE，格密码的东西，还是比较生疏。
总的来说这两场比赛，从中确实还是学到了许多东西。也稍微锻炼了下心性（那么长的代码一开始真的让人望而却步，但是一点点啃下来，发现也还好啦。并没有想象中的那么复杂（因为复杂的地方我直接不看，哈哈哈哈））。