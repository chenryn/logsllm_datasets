        à¡µà¡µHA
    except:
        pass
    if len(inval) == 0 or False:
        return False
    if not inval.startswith('TMCTF{'):
        return False
    if not inval.endswith('}'):
        return False
        inval = inval.replace('TMCTF{')
    else:
        l = len(inval)
        inval = inval.split('TMCTF{', 1)[-1].rsplit('}', 1)[0]
        try:
            assert len(inval) + 7 == l
        except:
            return False
        10
    if inval == ('ReadEaring').replace('adEa', 'dHer'):
        return False
    inval = map(ord, inval)
    l = len(inval)
    if l != 24:
        return False
    s = sum(inval)
    if s % l != 9:
        return False
    sdl = s / l
    if chr(sdl) != 'h':
        return False
    inval = [ x ^ sdl for x in inval ]
    ROFL = list(reversed(inval))
    KYRYK = [0] * 5
    QQRTQ = [0] * 5
    KYRYJ = [0] * 5
    QQRTW = [0] * 5
    KYRYH = [0] * 5
    QQRTE = [0] * 5
    KYRYG = [0] * 5
    QQRTR = [0] * 5
    KYRYF = [0] * 5
    QQRTY = [0] * 5
    for i in xrange(len(KYRYK)):
        for j in xrange(len(QQRTQ) - 1):
            KYRYK[i] ^= inval[i + j]
            if QQRTQ[i] + inval[i + j] > 255:
                return False
            QQRTQ[i] += inval[i + j]
            KYRYJ[i] ^= inval[i * j]
            if QQRTW[i] + inval[i * j] > 255:
                return False
            QQRTW[i] += inval[i * j]
            KYRYH[i] ^= inval[8 + i * j]
            if QQRTE[i] + inval[8 + i * j] > 255:
                return False
            QQRTE[i] += inval[8 + i * j]
            KYRYG[i] ^= ROFL[8 + i * j]
            if QQRTR[i] + ROFL[8 + i * j] > 255:
                return False
            QQRTR[i] += ROFL[8 + i * j]
            KYRYF[i] ^= ROFL[i + j]
            if QQRTY[i] + ROFL[i + j] > 255:
                return False
            QQRTY[i] += ROFL[i + j]
        KYRYK[i] += 32
        KYRYJ[i] += 32
        KYRYH[i] += 32
        KYRYG[i] += 32
        KYRYF[i] += 32
        QQRTE[i] += 8
        QQRTY[i] += 1
    for ary in [KYRYK, KYRYJ, KYRYH, KYRYG, KYRYF, QQRTW, QQRTE, QQRTR, QQRTY]:
        for x in ary:
            if x > 255:
                return False
    if ('').join(map(chr, KYRYK)) != 'R) +6':
        return False
    try:
        if ('').join(map(chr, QQRTQ)) != 'l1:C(':
            return False
    except ValueError:
        return False
    if ('').join(map(chr, KYRYJ)) != ' RP%A':
        return False
    if tuple(QQRTW) != (236, 108, 102, 169, 93):
        return False
    if ('').join(map(chr, KYRYH)) != ' L30Z':
        print 'X2'
        return False
    if ('').join(map(chr, QQRTE)) != ' j36~':
        print 's2'
        return False
    if ('').join(map(chr, KYRYG)) != ' M2S+':
        print 'X3'
        return False
    if ('').join(map(chr, QQRTR)) != '4e\x9c{E':
        print 'S3'
        return False
    if ('').join(map(chr, KYRYF)) != '6!2$D':
        print 'X4'
        return False
    if ('').join(map(chr, QQRTY)) != ']PaSs':
        print 'S4'
        return False
    return True
By reversing the decompiled code, we realized that it is very easy to get the
flag by z3 solver.
    from z3 import *
    flag = []
    constraints = []
    sum_flag=2505
    for i in range(24):
       flag.append(BitVec('x%d' % i, 16))
       constraints.append(flag[i]0x20)
       sum_flag-=flag[i]
    constraints.append(sum_flag==0)
    flag_enc = [x ^ 104 for x in flag]
    flag_enc_rev = list(reversed(flag_enc))
    aa = [0] * 5
    bb = [0] * 5
    cc = [0] * 5
    dd = [0] * 5
    ee = [0] * 5
    ff = [0] * 5
    gg = [0] * 5
    hh = [0] * 5
    ii = [0] * 5
    jj = [0] * 5
    for i in range(len(aa)):
       for j in range(len(bb) - 1):
           aa[i] ^= flag_enc[i + j]
           #if bb[i] + flag_enc[i + j] > 255:
           #    return False
           bb[i] += flag_enc[i + j]
           cc[i] ^= flag_enc[i * j]
           #if dd[i] + flag_enc[i * j] > 255:
           #    return False
           dd[i] += flag_enc[i * j]
           ee[i] ^= flag_enc[8 + i * j]
           #if ff[i] + flag_enc[8 + i * j] > 255:
           #    return False
           ff[i] += flag_enc[8 + i * j]
           gg[i] ^= flag_enc_rev[8 + i * j]
           #if hh[i] + flag_enc_rev[8 + i * j] > 255:
           #    return False
           hh[i] += flag_enc_rev[8 + i * j]
           ii[i] ^= flag_enc_rev[i + j]
           #if jj[i] + flag_enc_rev[i + j] > 255:
           #    return False
           jj[i] += flag_enc_rev[i + j]
       aa[i] += 32
       cc[i] += 32
       ee[i] += 32