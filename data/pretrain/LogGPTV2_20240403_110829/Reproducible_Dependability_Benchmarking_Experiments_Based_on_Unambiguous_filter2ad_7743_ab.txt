ieth_int
s
u
b
h
t
e
eth
ofault
ofault
ifault
ifault
type
interface
component
type
name
bus (VHDL−signal)
name
name
VHDL−process
direction of  communication
Figure 4. Graphical Representation of the VHDL Code in Figure 3
architecture block in VHDL (as is the case with the
processes ifault and ofault in ﬁgure 3) are concurrent. Ac-
tions within a single process are sequential. Whenever data
arrives on the eth interface of ethcard the process ifault
becomes active. Depending on the current value of the ifault
fault-signal, the data is or is not forwarded on the ieth sig-
nal. Unlike the signals which represent physical buses or
network connections, the fault signals are not connected to
anything in the VHDL hardware description. When imple-
menting the VHDL-model, they must be accessible to the
entity responsible for running the hardware faultload.
The single important aspect of our approach is the se-
mantic unambiguity of the VHDL-description, which is due
to the fact, that VHDL is a syntactically and semantically
very well deﬁned standard. The VHDL model can then be
evaluated using real hardware or a simulation environment.
In [13] a special compiler automatically transforms the
VHDL gate-level component descriptions including their
failure behavior and links it to a simulation library to gener-
ate an executable suitable for simulation. This approach is
very general and could be used as is for our purposes — if
the VHDL-models of the off-the-shelf components we use
are available. Of course it would be possible (but requires a
disproportionate amount of work) to design our own hard-
ware components at gate level. Whereas in [13] the trans-
formation from VHDL-description to executable for simu-
lation is done automatically, this step is not automized in our
prototype implementation. The VHDL description is both
the documentation and model of the component behavior
including its high-level failure behavior.
Figure 5 shows how send and receive failures can be ac-
tivated in the behavioral VHDL description of a faultload.
The fault is triggered by ﬁrst attaching a VHDL signal to
a fault signal. Fault signals (fail recv and fail send
in ﬁgure 5) are bound to a receive failure of the eth0 inter-
1 hd_fail: process
2 begin
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18 end process hd_fail;
fail_recv <= false;
fail_send <= false;
fail_recv’attach("/node01/eth0/ifault");
fail_send’attach("/node01/eth0/ofault");
wait for 5 min;
fail_recv <= true;
wait for 3 sec;
fail_send <= true;
wait for 3 sec;
fail_recv <= false;
wait for 4 sec;
fail_send <= false;
fail_recv’detach("/node01/eth0/ifault");
fail_send’detach("/node01/eth0/ofault");
wait;
Figure 5. Part of a Faultload Speciﬁed in Be-
havioral VHDL
face of a machine called node01 (line 5) and a send failure
on the same interface (line 6) respectively. The receive fail-
ure is activated ﬁrst (line 8). While the receive failure is
still active, the send failure is activated, too (line 10). Af-
ter three seconds the receive failure is deactivated (line 11
and 12), after another four seconds the send failure is deacti-
vated (line 13 and 14). As far as we know, our dependability
benchmarking environment is one of the very few tools that
can handle interleaved faults such as the scenario shown in
ﬁgure 5.
The choice of the hardware faultload is closely depen-
dent on the fault model embedded in each component. Only
those faults included in a components fault model can be
part of the fault load. The faultload is applied by simply
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:26:06 UTC from IEEE Xplore.  Restrictions apply. 
activating or deactivating a given fault at the appropriate
time (as given in the VHDL-description). If the system is
set up using real hardware, the activation of a fault may be
done with human supervision using specialized fault injec-
tion equipment. If the system is set up as a simulation, the
faults can be activated automatically by a program reading
and executing the VHDL-instructions. Just as the hardware
fault injection equipment must be customized to work with
the available hardware, the program must be customized to
work with the simulation.
3. User Interaction
Every system exists within an environment and interacts
with this environment. Depending on the system, the en-
vironment will be very different. If the system is an em-
bedded controller, the environment with which the system
interacts may consist of sensors and actuators. If the system
is a webserver, it will interact with administrators (usually
human) and client machines. The requests issued from the
client machines will often be initiated by humans interact-
ing with a web-browser. Even though we will use the term
user in the following discussion, everything said also ap-
plies to other environments.
Section 3.1 discusses the actions necessary to prepare the
system with the software needed to deliver the required ser-
vices. This is usually done only once and before the sys-
tem is released for production use. Section 3.2 describes
the workload which the system must be prepared to han-
dle during production use. For dependability benchmarking
a faultload must be speciﬁed in addition to the workload.
The faultload described in section 3.3 may be applied in
addition to the hardware faultload which was the topic of
section 2.2. When running a benchmark, we want to obtain
some measures so as to compare the benchmarked system
to other similar systems. Section 3.4 therefore explains how
it is possible to observe the system and collect the data nec-
essary to compute the measures.
3.1. Software Installation and Conﬁguration
Hardware alone is usually not enough to make a system
useful. As a ﬁrst step towards using the hardware, some sort
of operating system must be installed. This is the case for
desktop machines, servers and embedded controllers. For
the latter, the operating system and the application provid-
ing the required services may be fused together.
The software conﬁguration of a node is deﬁned unam-
biguously by naming the input software necessary (e.g.
”SuSE 8.1 Professional”, ”Windows XP Home Edition”)
and the actions necessary to install this software onto the
system. The following list includes some of the actions
which may be necessary during this part of software instal-
lation:
• understand output of the system (most often screen
output)
• provide input to the system, e.g. by typing on the key-
board or pointing the mouse to a certain area on screen
and clicking a mouse button
• insert and eject storage media such as DVD, CD-ROM,
ﬂoppy
• pressing the power or reset button of the system (e.g.
to reboot the system if necessary)
The bulk of the setup information, such as the exact version
(including patches) of the software installed is contained in
the information, which installation medium is chosen. This
part is static. The dynamic part, which is under direct con-
trol of the user, is the installation procedure. The necessary
install actions can be described in behavioral VHDL. Fig-
ure 6 shows a part of such an installation description. For
most software there are less than 50 actions to take during
installation if the defaults are accepted most of the time.
Two fragments of a graphical installation procedure are
shown in ﬁgure 6.
In the ﬁrst, the keyboard layout must
be selected from a list, then the OK button must be clicked
(lines 5 to 10). Later during installation, a root password
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
graphic_setup : process
variable result : boolean;
begin
setup_done <= false;
...
waitX_text(display, x, y,
"Select Keyboard Layout");
move_mouse(mouse, x, y);
click_mouse(mouse, 1);
waitX_button(display, x, y, "OK");
move_mouse(mouse, x, y);
click_mouse(mouse, 1);
...
waitX_text(display, x, y,
"Enter root password");
move_mouse(mouse, x, y);
click_mouse(mouse, 1);
send_keyboard(keyboard, "secret" & lf);
waitX_text(display, x, y,
"Repeat root password");
send_keyboard(keyboard, "secret" & lf);
...
setup_done <= true;
end process graphic_setup;
Figure 6. Part of a Setup Speciﬁed in Behav-
ioral VHDL
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:26:06 UTC from IEEE Xplore.  Restrictions apply. 
must be entered twice (lines 11 to 16). The library functions
waitX button and waitX text used in the example in
ﬁgure 6 take the expected output as a parameter and observe
the actual output until either a timeout or the expected out-
put occurs. In the case of waitX text the expected output
is a text appearing on the given display at the given coordi-
nates. waitX button waits for a button with a given la-
bel appearing on the given display at the given coordinates.
move mouse moves the mouse to the given coordinates
(simulating a user moving the mouse), click mouse sim-
ulates the user pressing and releasing the given mousebut-
ton. send keyboard simulates the user typing the given
characters on the keyboard.
After the operating system is functional, the application
software necessary to provide the required services must be
installed and/or conﬁgured. The actions the user must take
are similar to those explained above.
Software installation and conﬁguration must be ﬁnished
before the system is deployed for production use.
3.2. Workload
Once the system is in production use and provides the
required services, it responds to requests from its environ-
ment. When conducting a benchmark, the environment is
different from a real-world environment and the stream of
requests is usually generated artiﬁcially in some way.
The benchmarking world distinguishes several different
types of workloads, real and artiﬁcial workloads, where the
latter are again split into realistic and synthetic workloads.
Real workloads are applications or suites of applications
that the end-user is running, for example, a suite of numer-
ical applications.
Realistic workloads are artiﬁcial but still reﬂect real situ-
ations. For example, for benchmarking a transactional sys-
tem, one may stochastically simulate the behavior of clients
accessing a model database.
Synthetic workloads have little relation to the real world.
They can consist of random queries in a database table or
a random sequence of system calls. A synthetic workload
may be needed in case the application is known but not
yet coded. Synthetic client workloads certainly make sense
since they are easy to generate and to modify. Moreover,
they can be adapted to a statistical mix of applications.
In a benchmark, the workload is the request stream ar-
riving at the system interface and exercising the services
the system provides.
The workload conﬁguration is also described in behav-
ioral VHDL. Figure 7 shows the small fraction of a work-
load for a database benchmark, which logs into the applica-
tion server with the username alfred (lines 7 and 8 in ﬁg-
ure 7) and starts the application server software (lines 9 and
10 in ﬁgure 7). An attempt to login and start the application
server software is only made, if the software has not already
been started and both the database server and the applica-
tion servers are already booted (line 5). send string and
wait string are two of our library functions, which sim-
ulate a user typing something on the keyboard and reading
something from the console respectively. wait string
can be given a timeout. If the string waited for is not found
before the timeout occurs, result is set to false.
After the system has been setup, the workload can be
applied. In this paper, we assume, that the system has in-
terfaces, be they keyboard, mouse and monitor or network
connection, which enable it to communicate with the out-
side world. The workload can in theory be applied by a
human (carrying a precise watch), reading through the be-
havioral VHDL and executing the VHDL-instructions at the
right times. More likely, to automize the benchmarking pro-
cess, the VHDL is handcrafted into program code, which
can be compiled and run. This is very easy for workload
applied through a network interface, such as requests for a
webserver. Another possibility is to have a program, which
can read and interpret the VHDL instructions and execute
them (much like the human mentioned above). Since mere
software cannot operate physical devices (e.g. press keys
on a keyboard) a virtualization environment must then be
provided.
3.3. Faultload
Apart from the hardware faultload in section 2.2 and the
software faultload described above, a faultload can also be
applied to the system through its interface with the envi-
ronment. All interaction faults can be applied in this way.
Interaction faults are very diverse and may include opera-
tor faults (if the system of interest is a complex server), user
input (for application programs), non-existent assembler in-
structions (for a CPU benchmark) or faulty input from sen-
sors (if the system of interest is an embedded controller).
Some examples are given in [6, 10, 11, 18].
The software faultload, too, is described in behavioral
VHDL. It is applied in the same way as the workload.
3.4. Observer and Measures
It is, moreover, possible to describe the expected output
in behavioral VHDL and also to compare it to the actual
output observed (or even not observed) in the current exper-
iment. The functions waitX button, waitX text and
wait string from the examples in ﬁgures 6 and 7 take
the expected output as a parameter and observe the actual
output until either a timeout or the expected output occurs.
The expected output in this case is the required output, but
it can also be a known error message, for example. Since
the behavioral VHDL model already describes how to ob-
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:26:06 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
start_as : process (booted_as, booted_db)
variable started : boolean := false;
variable result : boolean;
begin
if (not started) and (booted_db = true) and (booted_as = true) then
started := true;
send_string(serial_recv_as0, "alfred" & lf);
wait_string(result, serial_send_as0, "Last login:", 1 min);
send_string(serial_recv_as0, "export TWO_TASK=db1.linux" & lf);
send_string(serial_recv_as0, "/opt/bin/db/server" & lf);
started_as <= true;
end if;
end process start_as;
Figure 7. Part of a Workload Speciﬁed in Behavioral VHDL
serve the output and control the workload, it can also de-
scribe when to collect the data necessary for calculating the
measures. For a dependability benchmark based on SPEC
WEB99 [14], the VHDL model could contain statements to
count the number of requests initiated, the number of suc-
cessful requests and the number of aborted requests, for ex-
ample.
4. Dependability Benchmark Implementation
To validate our approach, we have conducted the TPC-C
[16] benchmark with an Oracle 9i database server [7] on top
of a Linux 2.4.19 kernel.
The details of this experiment have been made available
in an internal report [4].
The VHDL model of the complete system is less than 60
kilobytes in size. The model was evaluated using UMLinux
[17].
For details concerning implementation of UMLinux
please refer to [9, 12]. [5] has put UMLinux into perspec-
tive among existing fault injection tools (be they VHDL-
simulation based, hardware or software) and virtual ma-
chines. In summary, UMLinux is a virtual machine on top
of which the Linux operating system is run. The hardware
of this virtual machine may be intact or faulty. In addition to
UMLinux, which provides virtual hardware, we have devel-
oped Expect, which basically provides virtual humans able
to operate this hardware. Expect reads and executes the be-
havioral parts of the VHDL model. Expect can also attach
to the fault signals of the virtual components and, once at-
tached, turn the fault signals on and off. This is necessary
to run a hardware faultload automatically.
4.1. Hard- and Software Conﬁguration
The system under test (SUT) is a client-server system as
shown in [16], clause 6.1, example 3. The system descrip-
tion is modeled in structural VHDL (as was suggested in
[3]). We have implemented a library of VHDL-components
to model the off-the-shelf components usually found in-