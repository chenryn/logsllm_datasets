LIST_ENTRY(proc) p_list; // list of all processes
struct pcred *p_cred; // process owner's credentials
struct filedesc *p_fd; // open files structure
struct pstats *p_stats; // accounting/statistics
struct plimit *p_limits; // process limits
struct sigacts *p_sigacts; // signal actions, state
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 46 of 107
pid_t p_pid; // process identifier
LIST_ENTRY(proc) p_pglist; // list of processes in process group
struct proc *p_pptr; // parent process
LIST_ENTRY(proc) p_sibling; // list of siblings
LIST_HEAD(, proc) p_children; // list of children
...
void *p_wchan; // sleep address
...
struct vnode *p_textvp; // vnode of the executable
...
// various signal-management fields
...
void *task; // corresponding task
...
};
As we saw earlier, each Mach thread in a BSD process has an associated utHRead structure to maintain
thread-specific Unix information. For example, the uthread structure is used for holding system call
parameters and results, miscellaneous state for system calls that use continuations, per-thread signal
information, and per-thread credentials. In this sense, the uthread structure is to the thread structure
what the proc structure is to the task structure. Figure 724 shows an excerpt from the uthread structure.
Figure 724. The BSD utHRead structure
// bsd/sys/user.h
struct uthread {
int *uu_ar0; // address of user's saved R0
int uu_arg[8]; // arguments to the current system call
int *uu_ap; // pointer to the system call argument list
int uu_rval[2]; // system call return values
// thread exception handling
int uu_code; // exception code
char uu_cursig; // p_cursig for exception
...
// space for continuations:
// - saved state for select()
// - saved state for nfsd
// - saved state for kevent_scan()
// - saved state for kevent()
int (* uu_continuation)(int);
...
struct proc *uu_proc; // our proc structure
...
// various pieces of signal information
sigset_t uu_siglist; // signals pending for the thread
sigset_t uu_sigmask; // signal mask for the thread
...
thread_act_t uu_act; // our activation
...
// list of uthreads in the process
TAILQ_ENTRY(uthread) uu_list;
...
};
7.3.2.1. The fork() System Call: User-Space Implementation
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 47 of 107
Let us now look at the implementation of the fork() system call in Mac OS X. Figure 725 shows the
user-space processing of fork()that is, within the system library.
Figure 725. User-space processing of the fork() system call
[View full size image]
When a user program calls fork(), the system library stub invokes several internal functions in
preparation for the system call. The dynamic version (which is the default) of the library also invokes
fork()-time hooks implemented by the dynamic link editor. The _cthread_fork_prepare() internal
function runs any pre-fork() handlers that may have been registered through pthread_atfork(3).
Figure 726 shows an example depicting the use of pthread_atfork(3). _cthread_fork_prepare() also
acquires library-level critical section locks and prepares the malloc module for a fork() by ensuring that
no thread is in a malloc critical section.
Figure 726. Registering handlers to be run before and after a fork() system call invocation
// pthread_atfork.c
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 48 of 107
#include 
#include 
// handler to be called before fork()
void
prepare(void)
{
printf("prepare\n");
}
// handler to be called after fork() in the parent
void
parent(void)
{
printf("parent\n");
}
// handler to be called after fork() in the child
void
child(void)
{
printf("child\n");
}
int
main(void)
{
(void)pthread_atfork(prepare, parent, child);
(void)fork();
_exit(0);
}
$ gcc -Wall -o pthread_atfork pthread_atfork.c
$ ./pthread_atfork
prepare
child
parent
Thereafter, the stub looks up the address of a pre-fork() prepare functionif anyimplemented by dyld. If
the function is found, the stub runs it. Next, the stub invokes the fork() system call. The stub handles
three types of returns from the system call: a failed return to the parent, a successful return to the parent,
and a successful return to the child.
If the system call returned an error, the stub looks up and calls a post-fork() parent functionif
anyimplemented by dyld. Then it calls cerror(), a library-internal function that sets the value of the per-
thread errno variable. In the case of detached pthreads,[14] the thread-local errno variable resides as a
field of the pthread data structure (struct _pthread).[15] The stub then arranges for a -1 to be returned
to the caller. After this point, the processing of an erroneous return is similar to a successful return to the
parent. In the latter case, on return from the system call, the stub would have arranged for the child's
process ID to be returned to the caller. Both types of return to the parent finally call
_cthread_fork_parent(), which releases locks taken before the system call and runs any post-fork()
handlers that may be registered for running in the parent.
[14] If a pthread is not detached, the global errno variable is used instead.
[15] This is the per-pthread structure internally maintained by the Pthreads library.
The stub performs substantially more work while returning to the child. It first calls a post-fork() child
functionif anyimplemented by dyld and then calls _cthread_fork_child(), which calls several
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 49 of 107
functions to perform operations such as the following.
Invoke the fastpath system call to set the "self" value for the pthread.
 Set various fields of the pthread structurefor example, set the kernel_thread and reply_port
fields to the values returned by mach_thread_self() and mach_reply_port(), respectively.
Release locks taken before the system call.
Cache the values of system constants (such as the page size), and the thread's key Mach ports (such
as those for the host and the containing task).
Initialize special ports for the thread (such as the bootstrap port and the system clock's service port).
Reserve page 0 by mapping a page of zero-filled memory at address 0x0, with a protection value of
VM_PROT_NONE, which disallows all access to the memory region.
Insert the current pthreadthe only one in the process at this pointat the head of the library-
maintained list of pthreads for the process, while setting the thread count to 1.
Run any post-fork() handlers that may be registered for running in the child.
7.3.2.2. The fork() System Call: Kernel Implementation
Let us now look at how the fork() system call is processed in the kernel. Figure 727 provides an
overview of the kernel functions involved in fork()'s handling, starting from fork()
[bsd/kern/kern_fork.c], the system call handler.
Figure 727. Kernel-space processing of the fork() system call
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 50 of 107
fork1() [bsd/kern/kern_fork.c] calls cloneproc() [bsd/kern/kern_fork.c], which creates a new
process from the given process. cloneproc() first calls forkproc() [bsd/kern/kern_fork.c], which
allocates a new proc structure and several of its constituent structures. forkproc() then finds a free
process ID, wrapping around if the next available process ID is higher than PID_MAX (defined to be 30,000
in bsd/sys/proc_internal.h).
When process IDs wrap around, the search for the next available ID starts at 100and not 0since low-
numbered process IDs are likely to be in use by forever-running daemons.
forkproc() initializes various fields of the proc structure and implements several Unix aspects of fork
(), such as inheriting the parent's credentials, open file descriptors, and shared memory descriptors. On
return from forkproc(), which returns the child proc structure, cloneproc() calls procdup()
[bsd/kern/kern_fork.c], passing it the proc structures of the parent and the child. procdup() calls
task_create_internal() [osfmk/kern/task.c] to create a new Mach task. The new task structure's
bsd_info field is set to point to the child proc structure. procdup() then calls thread_create()
[osfmk/kern/thread.c] to create a Mach thread within the new task. thread_create() calls
thread_create_internal() [osfmk/kern/thread.c], which allocates a tHRead structure and a
uthread structure. Moreover, tHRead_create_internal() initializes various aspects of the new thread,
including its machine-dependent state. thread_create() passes a continuation function to
tHRead_create_internal(). The function is set as the thread's continuationthat is, the location where
the thread will continue when dispatched. The continuation function arranges for the new thread to return
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 51 of 107
to user mode as if the thread were trapping after being interrupted.
The newly created thread is returned by procdup() to cloneproc(). On return from procdup(),
cloneproc() places the child's proc structure on various liststhe list of its parent's children, the list of all
processes, and the process ID hash table. It marks the child as runnable and returns the child thread to
fork1(), which now calls tHRead_dup() [osfmk/kern/thread_act.c]. tHRead_dup() calls
machine_thread_dup() [osfmk/ppc/status.c] to duplicate the context of the parent (current) thread
into the child thread. fork1() calls tHRead_resume() on the child thread and finally returns to the parent.
The kernel returns 1 and 0 to the child and parent, respectively, in GPR4. Moreover, the child's process ID
is returned in GPR3 in both cases. The system library returns a 0 to the child process and the child's
process ID to the parent process.
Figure 728 shows a program that directly invokes the fork() system call, after which it writes the values
of GPR3 and GPR4 to the standard output. Since we bypass the system library, none of the pre- and post-
fork() work normally performed by the system library will be performed in this case. Consequently, we
will be unable to use most of the system library functions in the child process. For example, even printf
(3) will not work. Therefore, we will use write(2) to display raw, unformatted values of GPR3 and
GPR4 on the standard output, which we can pipe to a program such as hexdump.
Figure 728. Verifying the values returned by the kernel in the case of a raw fork() system call
// fork_demo.c
#include 
#include 
int
main(void)
{
long r3_r4[] = { -1, -1 };
int syscallnum = SYS_fork;
__asm__ volatile(
"lwz r0,%2 ; load GPR0 with SYS_fork\n"
"sc ; invoke fork(2)\n"
"nop ; this will be skipped in the case of no error\n"
"mr %0,r3 ; save GPR3 to r3_r4[0]\n"
"mr %1,r4 ; save GPR4 to r3_r4[1]\n"
: "=r"(r3_r4[0]), "=r"(r3_r4[1])
: "g" (syscallnum)
);
// write GPR3 and GPR4
write(1, r3_r4, sizeof(r3_r4)/sizeof(char));
// sleep for 30 seconds so we can check process IDs using 'ps'
sleep(30);
return 0;
}
$ gcc -Wall -o fork_demo fork_demo.c
$ ./fork_demo | hexdump -d
0000000 00000 14141 00000 00000 00000 14141 00000 00001
...
$ ps
...
14139 p9 S+ 0:00.01 ./fork_demo
14140 p9 S+ 0:00.00 hexdump -d
14141 p9 S+ 0:00.00 ./fork_demo
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 52 of 107
In Figure 728, the first two 32-bit words in hexdump's output correspond to the GPR3 and GPR4 values
returned to the parent, whereas the last two words correspond to the child. Note that GPR3 contains the
child's process ID in both cases.
and Mach Ports: Caveat
fork()
Only certain Mach ports are inherited by the child task from the parent task during a fork()
call. These include registered ports, exception ports, the host port, and the bootstrap port.
Other than the inherited ports, any other Mach ports are invalidated in the child. Since the
child's address space is inherited from the parent, the child will have bogus port names for the
invalidated ports, but no rights to such ports. Although the system library reinitializes several
key ports in the child process after fork(), not every library or framework performs such
cleaning. If you run into the latter situation, one solution is to execute the same binary again
through execve(). The program may have to explicitly accommodate this solution.
Every BSD process begins life with one Mach task, one Mach thread, a BSD proc structure associated
with the task structure, a uthread structure associated with the thread structure, and a pthread
implemented within the user-space system library. As we saw in Chapter 6, the pid_for_task() Mach
routine can be used to retrieve the BSD process ID of a Mach taskprovided it has one. Conversely,
task_for_pid() retrieves the task port for the specified BSD process ID.
...
kern_return_t kr;
pid_t pid;
mach_port_t task;
...
// get BSD process ID for the task with the specified port
kr = pid_for_task(task, &pid);
...
// get task port for task on the same host as the given task,
// and one with the given BSD process ID
kr = task_for_pid(mach_task_self(), pid, &task);
7.3.2.3. The vfork() System Call
The vfork() system call is a variant of fork() that can be used to create a new process without fully
copying the address space of the parent process. It is an optimized version of fork() intended for the case
when the new process is being created for calling execve(). The following aspects describe the
implementation and usage of vfork() on Mac OS X.
The parent process is blocked while the child process executes using the parent's resources.
 The expectedand correctuse of vfork() requires the child process to either call execve() or to exit.
Thereafter, the parent resumes execution.
 Calling vfork() creates a new BSD proc structure for the child process, but no task or thread is
created. Therefore, in this case, two BSD proc structures refer to the same task structure.
The task and the initial thread for the child process are eventually created during the processing of
the execve() system call.
During its execution, the child must be careful not to cause undesirable alterations to the parent's
stack or other memory.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 53 of 107
Figure 729 shows the processing of vfork() in the kernel.
Figure 729. Kernel-space processing of the vfork() system call
[View full size image]
Let us look at an example to show that the child process borrows the parent's resources temporarily. The
program in Figure 730 prints the task and thread portsas returned by mach_task_self() and
mach_thread_self(), respectivelyin the parent and the child. When run with no arguments, the program
calls vfork(). Otherwise, it calls fork(). Moreover, the child modifies the value of an automatic variable
declared in the parent. In the case of vfork(), the change is reflected in the parent after the parent
resumes.
Figure 730. Verifying that the child borrows the parent's resources during a vfork() system call
// vfork_demo.c
#include 
#include 
#include 
#include 
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 54 of 107
int
main(int argc, char **argv)
{
int ret, i = 0;