6
7 end
8 else if SignerC1 == SignerC2 then
// Components from the same vendor trust each other
return TRUE;
9
10 end
11 else if SignerC1 ∈ TVListC2 then
if SignerC2 ∈ TVListC1 then
12
// SignerC1 and SignerC2 trust each other
return TRUE;
end
else
end
13
14
15
16
17
18 end
19 else
20
21 end
return FALSE;
return FALSE;
calculation so as to assure its integrity. If the vendor wants only
to trust itself, this list is empty, and no additional information is
required for our mechanism. First the operating system checks
whether C2 has a valid digital signature. C1’s digital signature
is not veriﬁed during this check, because it has already passed
this veriﬁcation when it was previously loaded or executed.
When this test is successful, the trust relationship between
C1 and C2 is evaluated. This evaluation succeeds when the
two components’ vendor is identical. Otherwise, component
C1’s signer has to be included in the trusted vendor list of
C2 and vice versa. Software vendors can cooperate to provide
components with appropriate trusted vendor list. For instance,
Microsoft can request Adobe to build a Flash plugin that has
Microsoft in its trusted vendor list. This Flash plugin is still
signed by Adobe, but Microsoft Internet Explorer can use it
because Microsoft is included in the trusted vendor list of the
plugin.
D. Attacks Mitigated by the Proposed Mechanism
It is important to note that our cross veriﬁcation mecha-
nism can block various types of attacks including malicious
component
loading and drive-by download attack, even if
malware binaries are signed with legitimate digital signatures.
Representative examples are as the following:
1) DLL hijacking
2) DLL side-loading
3) Binary hijacking
4) Infected, modiﬁed or replaced ﬁles intended to be loaded
by benign software. Trampoline-style malware payload
belongs to this category as well.
5) A typical DLL injection method that
is based on
CreateRemoteThread() and LoadLibrary() [1]
TABLE I: Notations
{C}A
[C]V
T V LC = {V1, ..., Vn}
[{C}A]V1 (T LV C )
{C1, ..., Cn}A
C1 → C2
Component C of application A
Component C signed by vendor V
Trusted vendor list of C
Component C of application A
with trusted vendor list T LV C, and
signed by vendor V1
n components of application A
Component C1 loads or executes C2
6) Creation of malware processes via general software ex-
ploitation such as drive-by download attack
7) Unauthorised use of proprietary components. Examples
include malware that abuses benign software components
for malicious activities (e.g. Stuxnet uses Siemens STEP7
DLL to infect target PLCs [9]), and cracker software that
uses original software or components to crack its target
application.
8) Loading of untrusted components such as newly installed
malware components and unsafe web browser plugins.
How these attacks are thwarted by our cross veriﬁcation
mechanism is described next in Section IV.
IV.
INVESTIGATION ON DYNAMIC COMPONENT LOADING
CASES
Most software dynamically loads other software compo-
nents or executes other applications. There are several cases
involved with application calling and dynamic component
loading when we consider the relationship between the caller
and the callee. In this section, we investigate each case along
with the relevant attacks. Three parameters (component, appli-
cation, and vendor/signer) and notations used in this section are
given in Table I. We assume that all the benign and malicious
binaries used in the examples in this section have valid digital
signatures, since invalid signature cannot pass the conventional
digital signature veriﬁcation; in the case of malicious binaries,
they are signed with stolen private keys typically from small
vendors.
)
]V1
(T V LC1
]V1
(T V LC2
) → [{C2}A1
A. Components from the Same Vendor
Example 1: [{C1}A1
This case would be the most widely used case in software
in which a component of an application
development,
({C1}A1) loads another component of the same application
({C2}A1). Both components are signed by vendor V1. Caller
C1 can be the main executable ﬁle (e.g. App.EXE) of the
application or a dynamic component (e.g. Lib.DLL). Since
the vendor information of the two components is the same,
the cross veriﬁcation is successful. In this case, trusted vendor
list is not used during the veriﬁcation.
Example 2: [{C1}A1 ]V1 (T V LC1 ) → [{C2}A2 ]V1 (T V LC2 )
As long as the signer (i.e. vendor) is same (V1 in this
load each other’s
example), different applications can still
components.
117117
B. Mutual Trust Case
Example: [{C1}A1
]V1
) → [{C2}A2
V1 ∈ T V LC2 and V2 ∈ T V LC1
(T V LC1
]V2
(T V LC2
)
When an application from vendor V1 uses a proprietary
software component from another vendor V2, trusted vendor
list is utilised for cross veriﬁcation. In this example, V2 is
included in the trusted vendor list of C1, and V1 is in that
of C2. Hence the cross veriﬁcation succeeds, and the loading
of C2 by C1 is allowed. As seen from this case, software
extensibility is preserved under the proposed cross veriﬁcation
mechanism.
Application execution: Application launch is a particular
case of dynamic component loading. When a user launches an
application by double-clicking its icon or actual executable ﬁle,
the operating system’s ﬁle manager (e.g. Explorer on Microsoft
Windows) becomes the caller. Therefore,
the ﬁle manager
and the application cross-verify their trust relationship. For
instance, the following shows the execution of a web browser,
Firefox, on Microsoft Windows:
[{Explorer.exe}W indows]M S(Adobe, ..., M ozilla)
→ [{Firefox.exe}F iref ox]M ozilla(M S)
In general, when an application executes another appli-
cation, the parent process becomes the caller and the child
becomes the callee, and our mechanism is applied to this
caller and callee relationship in the same way as in the case
of dynamic component loading.
It is possible for malware to modify both the main ex-
ecutable ﬁle (e.g. A.exe) and a component of the target
application, thus making the two trust each other. In this case,
the application can fail to launch with high probability as the
modiﬁed main executable ﬁle cannot load other components
that do not trust the modiﬁed main executable ﬁle.
C. One-way Trust Case 1 (Callee Trusted)
Example: [{C1}A1 ]V1 (T V LC1 ) → [{C2}A2 ]V2 (T V LC2 )
V1 /∈ T V LC2 and V2 ∈ T V LC1
Malware using benign components: Malware often uses
benign software components to perform its malicious activities.
As an example, Stuxnet’s PLC infection routine used one
of Siemens STEP 7 DLL in order to reprogram its target
PLCs [9]. Shamoon malware used innocent third-party ﬁlesys-
tem driver so as to wipe its target hosts [31]. In these cases,
the target DLLs themselves were not modiﬁed/infected (even
though Stuxnet renamed it for a different reason) since this
is not the adversary wanted. What they wanted to do was
loading and utilising normal software components to achieve
their goals. However, as seen from the above example, this is
prohibited by the proposed mechanism even after the adversary
builds its malicious components with an appropriate trusted
vendor list. The benign component (C2) does not have the
adversary’s vendor (V1) in its trusted vendor list, and hence
the loading fails.
Besides malware, some cracker applications execute or
load their target application’s original components. This is not
allowed under our mechanism since the original components
refuse to be loaded by the cracker.
Protection for proprietary components: In this case, vendor
V2 does not want its component C2 to be used by any other
vendors’ software. C1 tries to load or execute C2, but it fails
although V2 is in the trusted vendor list of C1 because V1
is not in the list of C2. It shows how a software vendor can
protect its core code from being used in an unauthorised way.
Of course, as soon as vendor V1 gets authorised C2 that has
V1 in its trust list from vendor V2, the dynamic component
loading is permitted.
D. One-way Trust Case 2 (Caller Trusted)
Example: [{C1}A1 ]V1 (T V LC1 ) → [{C2}A2 ]V2 (T V LC2 )
V1 ∈ T V LC2 and V2 /∈ T V LC1
This case includes most of malicious component loading
attacks such as DLL hijacking, DLL side-loading, binary
hijacking, existing ﬁle infection, typical DLL injection, and
trampoline-style malware payloads as well as drive-by down-
load and DLL-based malware. We brieﬂy summarise how these
attacks work and abuse trusted programs, and then explain why
they fail under our mechanism.
DLL hijacking: This offensive technique happens during
dynamic component resolution. Microsoft Windows applica-
tions search for their components based on certain rules, and
the default rule can be exploited by malware. For instance,
suppose an application tries to load A.dll. If malware puts
A.dll in the folder of the application loaded (current working
path), this malicious A.dll can be loaded instead of the
original A.dll. Even remote attacks are possible when it is
combined with carpet-bomb or shared folder access [2].
Binary hijacking: This attack is similar to DLL hijacking;
hence it has almost identical attack vectors as DLL hijack-
ing [4]. Applications vulnerable to binary hijacking perform
CreateProcess() on .cmd or .bat ﬁle irrespective of
the location of the ﬁle. As a result, attackers can hijack
cmd.exe with a malicious one, without controlling the .cmd
or .bat ﬁle themselves.
DLL side-loading: DLL side-loading is an increasingly
popular cyber attack technique that abuses the way Microsoft
Windows applications handle DLL ﬁles. Malware places a
malicious DLL in a Microsoft Windows’ WinSxS path so that
the operating system loads it instead of a legitimate ﬁle [5].
It exploits Microsoft Windows’ side-by-side assembly feature
that helps manage conﬂicting and duplicate DLL versions by
loading them on demand from a common directory. Upon a
successful attack, the malicious DLL is loaded, compromising
its target system.
DLL injection: DLL injection is an offensive technique
that loads malicious component in the context of a running
process. One method of this attack is creating a remote
thread in the target process, and making it load one or more
malicious components [1]. A typical implementation invokes
LoadLibrary() API in the remote thread of a running
process so that the malicious ﬁle is loaded by the thread.
118118
DLL-based malware: Modern malware commonly uses
system executables to bypass security mechanisms such as
application whitelisting, Egress ﬁltering and anti-virus detec-
tion. Typically, the adversary develops malicious DLLs that
will be loaded by svchost.exe or dllhost.exe. Since
these two executables are trusted, application whitelisting
and process-based Egress ﬁltering are circumvented; many
Windows networking services utilise svchost.exe so it
must be allowed in Egress ﬁltering rules.