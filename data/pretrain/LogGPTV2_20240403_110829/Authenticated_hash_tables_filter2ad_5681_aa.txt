title:Authenticated hash tables
author:Charalampos Papamanthou and
Roberto Tamassia and
Nikos Triandopoulos
Authenticated Hash Tables
Charalampos Papamanthou
Roberto Tamassia
Dept. of Computer Science
Dept. of Computer Science
Nikos Triandopoulos
Dept. of Computer Science
Brown University
Providence RI, USA
Brown University
Providence RI, USA
University of Aarhus
Aarhus, Denmark
ABSTRACT
Hash tables are fundamental data structures that optimally
answer membership queries. Suppose a client stores n ele-
ments in a hash table that is outsourced at a remote server
so that the client can save space or achieve load balancing.
Authenticating the hash table functionality, i.e., verifying
the correctness of queries answered by the server and ensur-
ing the integrity of the stored data, is crucial because the
server, lying outside the administrative control of the client,
can be malicious.
We design eﬃcient and secure protocols for optimally au-
thenticating membership queries on hash tables: for any
ﬁxed constants 0  1/ǫ, the server can pro-
vide a proof of integrity of the answer to a (non-)membership
query in constant time, requiring O (cid:0)nǫ/ logκǫ−1 n(cid:1) time to
treat updates, yet keeping the communication and veriﬁca-
tion costs constant. This is the ﬁrst construction for authen-
ticating a hash table with constant query cost and sublinear
update cost. Our solution employs the RSA accumulator in
a nested way over the stored data, strictly improving upon
previous accumulator-based solutions. Our construction ap-
plies to two concrete data authentication models and lends
itself to a scheme that achieves diﬀerent trade-oﬀs—namely,
constant update time and O(nǫ/ logκǫ n) query time for ﬁxed
ǫ > 0 and κ > 0. An experimental evaluation of our solution
shows very good scalability.
Categories and Subject Descriptors
C.2.4 [Communication Networks]: Distributed Systems;
E.1 [Data Structures]; H.3.4 [Information Storage and
Retrieval]: Systems and Software
General Terms
Algorithms, Security, Theory, Veriﬁcation
Keywords
Hash tables, Authentication, Veriﬁcation, RSA accumulator
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08 October 27–31, 2008, Alexandria, Virginia, USA
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
1.
INTRODUCTION
Recently, there has been an increasing interest in remote
storage of information and data, where people outsource
their personal ﬁles at service providers that oﬀer huge stor-
age space and fast network connections (e.g., Amazon S3). In
this way, clients create virtual hard drives consisting of on-
line storage units that are operated by remote and geograph-
ically dispersed servers. In addition to a convenient solution
to space-shortage, data-archiving or back-up issues, remote
storage allows for load-balanced distributed data manage-
ment (e.g., database outsourcing). Indeed, large data vol-
umes can become available to end applications through high-
bandwidth connections to the data-hosting servers, which
can rapidly answer queries arriving at high rates. Hence,
data sources need to be online only when they wish to up-
date their published data.
In such settings, the ability to check the integrity of re-
motely stored data is an important security property, or oth-
erwise a malicious server can easily tamper with a client’s
data (e.g., delete or modify a ﬁle). Also, without some kind of
veriﬁcation mechanisms, this attack can never be detected,
no matter what trust relations the client and the server may
a priori share. Thus, it is always desirable that operations
on remote data be authenticated. In particular, answers to
client queries should be veriﬁed and either validated to be
correct or rejected because they do not reﬂect the true state
of the client’s outsourced data.
In this paper, we study the simplest, but very important,
form of this data authentication problem, where we wish to
authenticate (non-)membership queries over a dynamic set
of n data elements that is stored at an untrusted server with
the use of a hash table. Used widely by numerous applica-
tions, hash tables are fundamental data structures for an-
swering set-membership queries optimally, in expected con-
stant time; it is, therefore, important in practice and also
theoretically interesting to authenticate their functionality.
Following a standard approach, we augment the hash table
with an authentication structure that uses a cryptographic
primitive to deﬁne a succinct (e.g., few bytes long) secure di-
gest, a “ﬁngerprint” of the entire stored set. Computed on the
correct data, this digest will serve as a secure set description
subject to which the answer to a (non-)membership query
will be veriﬁed at the client by means of a corresponding
proof provided by the server. Our main goal is to design
protocols that implement this methodology both securely,
against a computationally bounded server, and eﬃciently,
with respect to any communication and computation over-
heads incurred due to the hash table authentication.
In particular, we wish to minimize the amount of informa-
tion communicated (after an update—insertion in/deletion
from the set) from the data source to the server, and also
the size of the proof sent (after a client’s query) from the
server to the client, ideally keeping both complexities con-
stant. Analogously, since client-side applications usually con-
nect to the servers from mobile devices with limited comput-
ing power and slow connectivity (e.g., cell-phones), we wish
that all computations (due to veriﬁcations) performed at the
clients are as eﬃcient as possible, ideally constant. More im-
portantly, we wish to preserve the optimal query complexity
of the hash table, while keeping the costs due to set updates
sublinear in the set’s size: ideally, the server should authen-
ticate (non-)membership queries in constant time, or other-
wise we lose the optimal property that hash tables oﬀer!
Developing secure protocols for hash tables that authenti-
cate (non-)membership queries in constant time has been a
long-standing open problem [25]. Using cryptographic (col-
lision resistant) hashing and Merkle’s tree construction [23]
to produce the set’s digest, (non-)membership queries in sets
can be authenticated with logarithmic costs (e.g., [4, 15, 25,
28, 34]), which is optimal for any hash-based approach, as
it has been shown in [33]. Breaking this logarithmic barrier,
therefore, requires employing an alternative cryptographic
primitive. One-way accumulators and their dynamic exten-
sions [2, 3, 6, 26] are constructions for accumulating a set
of n elements into a short value, subject to which each ac-
cumulated element has a short witness (proof) that can be
used to verify in constant time its membership in the set.
Although this property, along with precomputed element wit-
nesses, clearly allows for set-membership veriﬁcation in O(1)
time, it has not been known how this can lead to practical
schemes: indeed, straightforward techniques for recomput-
ing the correct witnesses after element updates require at
least linear costs (O(n) or O(n log n) depending on the ac-
cumulator), thus incurring high update cost at the server.
In our main result we show how to use the RSA accumula-
tor (e.g., [6]) in a hierarchical way over the set and the under-
lying hash table, to securely authenticate both membership
and non-membership queries and fully achieve our complex-
ity goals. That is, in our authentication scheme communi-
cation and veriﬁcation costs are constant, the query cost is
constant and the update cost is sublinear, realizing the ﬁrst
authenticated hash table with this performance. Our scheme
strictly improves upon previous schemes based on accumu-
lators. We base the security of our protocols on the security
of the RSA accumulator, which holds under the, currently
standard, strong RSA assumption.
Moreover, aiming at authentication solutions that cover a
wide application area, we instantiate our core authentication
scheme—without sacriﬁcing its performance guarantees—to
two concrete, widely-used data authentication models, which
we call the three-party and two-party authentication models,
both closely related to our remote-storage setting.
The three-party model has been used to deﬁne the con-
cept of authenticated data structures [25, 32] and involves
a trusted source that replicates a data set to one or more
untrusted servers, as well as one or more clients that access
the data set by querying one of the servers. Along with the
answer to a query, the server provides the client with a proof
that when combined with the (authentic) data-set digest can
verify the correctness of the answer. This digest is, periodi-
cally or after any update, produced, time-stamped (to defeat
replay attacks) and signed by the source (a PKI is assumed),
and is forwarded to the server(s) to be included in any an-
swer sent to a client. This model oﬀers load-balancing and
computation outsourcing for data publication applications,
therefore the source typically keeps the same data set and
authentication structure as the server; this can potentially
allow the source to facilitate the server’s task by communi-
cating appropriate update authentication information after
set updates.
The two-party model, instead, involves a client that, be-
ing simultaneously the data source and the data consumer,
fully outsources the data set to an untrusted server, keeping
locally only the data-set digest (of constant size), subject
to which any operation (update or query, executed by the
server) on the remotely stored data is veriﬁed, again using
a corresponding proof provided by the server. This model
oﬀers both storage and computation outsourcing, but only
the data owner has access to the stored set. Here, the main
challenge is to maintain at all times a state (digest) that
is consistent with the history of updates, typically requir-
ing more involved authentication structures. This model is
related to the memory-checking model [4]. For a detailed
description of the models we refer to [13, 15, 28].
Finally, to meet the needs of diﬀerent data-access pat-
terns, we extend our three-party authentication scheme to
achieve a reverse performance, i.e., sublinear query cost, but
constant update cost. Also, aiming at practical solutions, we
perform a detailed evaluation and performance analysis of
our authentication schemes, discussing many implementa-
tion details and showing that, under concrete scenarios and
certain assumptions, our protocols achieve very good perfor-
mance, scalability and a high degree of practicality.
1.1 Our Contributions
1. We propose a new cryptographic construction for set-
membership veriﬁcation that is based on combining
the RSA accumulator in a nested way over a tree of
constant depth. We formally prove the security of the
new scheme based only on the widely accepted and
used strong RSA assumption.
2. We introduce authenticated hash tables and we show
how to exploit the eﬃciency of hash tables to develop
an authenticated data structure supporting both mem-
bership and non-membership queries on sets drawn
from general universes. We give solutions for authen-
ticating a hash table both in the two-party and three-
party authentication models.
3. We improve the complexity bounds of previous work
while still being provably secure. Namely, we reduce
the query time and the size of the update authentica-
tion information from O(nǫ) [14] (at present, the best
known upper bound for authenticating set-membership
queries using RSA accumulators) to O(1), and also the
update time from O(nǫ) to O (cid:0)nǫ/ logκǫ−1 n(cid:1) for any
ﬁxed constants κ > 0, 0  1.
This answers an open problem posed in [25]. Also, we
extend our scheme to get a diﬀerent trade-oﬀ between
query and update costs, namely constant update time
with O(nǫ/ logκǫ n) query time for constants 0  0 (see Table 1).
Table 1: Comparison of existing schemes for authenticating set-membership queries in a set of size n w.r.t.
used techniques and various complexity measures. Here, 0  1/ǫ are ﬁxed constants, NA stands
for “not applicable”, DH for “Diﬃe-Hellman”, exp for “exponentiation” and BM for “bilinear mapping”. All
complexity measures refer to n (not to the security parameter) and are asymptotic expected values. Our
main scheme maintains O(1) communication, veriﬁcation and query costs, still achieving sublinear update
cost (O (cid:0)nǫ/ logκǫ−1 n(cid:1)), thus outperforming existing accumulation-based schemes; it also uses a standard cryp-
tographic assumption. Conﬁned to the 3-party model, our extended scheme achieves a diﬀerent trade-oﬀ
between update and query costs. Update costs in our schemes are amortized expected values. In all schemes,
the server uses O(n) space and the client uses O(1) space. In the 3-party model an additional signature cost
is incurred (signed digest).
reference
model
assumption
[4, 15, 22, 25, 28]
[1]
[6, 30]
[26]
[14]
both
2-party
both
both
collision resistance
strong RSA
strong RSA
strong DH
3-party
strong RSA
main scheme
both
strong RSA
extension
3-party
strong RSA
proof