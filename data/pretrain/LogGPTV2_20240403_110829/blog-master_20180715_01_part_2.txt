    insert into abc values (new.*) on conflict(id) do update set info=excluded.info,crt_time=excluded.crt_time;     
    return null;       
end;      
$$ language plpgsql strict set client_min_messages = error;      
-- 保护函数，防止数据写入主表  
create or replace function public.abc_tg2() returns trigger as $$      
declare      
begin      
  RAISE EXCEPTION 'Do not insert direct to parent persistence table.';     
  return null;       
end;      
$$ language plpgsql strict set client_min_messages = error;      
4、新建stage.abc的insert before触发器  
create trigger tg1 before insert on stage.abc for each row execute function public.abc_tg1();       
create trigger tg2 after insert on stage.abc for each row execute function public.abc_tg2();    
5、压测高并发upsert  
vi test.sql  
\set id random(1,100000000)  
insert into stage.abc values (:id, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 120  
性能结果  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 120 s  
number of transactions actually processed: 21935134  
latency average = 0.350 ms  
latency stddev = 0.314 ms  
tps = 182790.428805 (including connections establishing)  
tps = 182806.536786 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.001  \set id random(1,100000000)  
         0.347  insert into stage.abc values (:id, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=exclud  
等待事件  
postgres=# select count(*),wait_event_type,wait_event,query from pg_stat_activity where wait_event is not null group by 2,3,4 order by 1 desc;  
 count | wait_event_type |      wait_event      |                                                                   query                                                                      
-------+-----------------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------  
    25 | IPC             | ProcArrayGroupUpdate | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
    13 | Client          | ClientRead           | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     1 | LWLock          | XidGenLock           | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     1 | LWLock          | wal_insert           |   
     1 | Activity        | LogicalLauncherMain  |   
     1 | Activity        | BgWriterHibernate    |   
     1 | Activity        | AutoVacuumMain       |   
     1 | Activity        | CheckpointerMain     |   
(8 rows)  
本地表性能对比测试：  
drop table if exists stage.abc cascade;      
create table if not exists stage.abc (id int primary key, info text, crt_time timestamptz);      
等待事件  
postgres=# select count(*),wait_event_type,wait_event,query from pg_stat_activity where wait_event is not null group by 2,3,4 order by 1 desc;  
 count | wait_event_type |      wait_event      |                                                                   query                                                                      
-------+-----------------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------  
    17 | Client          | ClientRead           | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
    15 | IPC             | ProcArrayGroupUpdate | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     8 | Lock            | extend               | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     2 | LWLock          | lock_manager         | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     1 | Activity        | LogicalLauncherMain  |   
     1 | Activity        | AutoVacuumMain       |   
     1 | LWLock          | ProcArrayLock        | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
     1 | Activity        | CheckpointerMain     |   
     1 | Activity        | BgWriterMain         |   
     1 | LWLock          | wal_insert           | insert into stage.abc values ($1, md5(random()::text),now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
(10 rows)  
```  
以上高并发upsert场景的性能测试数据  
表 | QPS  
---|---  
全局临时表 | 18万  
本地表 | 21万  
## 方法2、用临时表时提前创建        
1、创建临时表模板（一次性创建）      
```    
-- 临时表模板    
create table tmp1_template(xxxx);      
```    
2、以后每次使用某临时表之前，使用这个模板表创建临时表。       
```        
create temp table if not exists tmp_xxx (like tmp1_template including all) ON COMMIT DELETE ROWS;        
```       
3、以后要修改临时表的结果，直接修改模板表    
```    
alter table tmp_xxx add column c1 int;    
```    
例子      
```    
-- 创建临时表模板表    
create table tmp1_template (id int8 primary key, info text, crt_time timestamp);      
-- 每次使用临时表前，先使用模板创建      
create temp table if not exists tbl_tmp (like tmp1_template including all) ON COMMIT DELETE ROWS;       
-- 以后要修改临时表的结果，直接修改模板表    
alter table tmp1_template add column c1 int;    
```    
## 方法3、plpgsql中，可以使用方法1，也可以使用ARRAY代替临时表          
创建普通表（默认会创建对应的复合类型），        
使用复合类型数组代替临时表        
例子        
```        
do language plpgsql $$        
declare        
  res tbl[]; x tbl;        
begin        
  select array_agg(t::tbl) into res from (select id, random()::text, clock_timestamp() from generate_series(1,10) t(id)) t;        
  raise notice 'res: %', res;         
  foreach x in array res loop         
    raise notice 'x: %', x;         
  end loop;          
end;        
$$;        
NOTICE:  res: {"(1,0.0940282950177789,\"2018-07-15 23:14:44.060389\")","(2,0.922331794165075,\"2018-07-15 23:14:44.060404\")","(3,0.857550186105072,\"2018-07-15 23:14:44.060406\")","(4,0.373486907221377,\"2018-07-15 23:14:44.060408\")","(5,0.973780393600464,\"2018-07-15 23:14:44.060409\")","(6,0.502839601133019,\"2018-07-15 23:14:44.060411\")","(7,0.217925263568759,\"2018-07-15 23:14:44.060412\")","(8,0.733274032827467,\"2018-07-15 23:14:44.060413\")","(9,0.62150136847049,\"2018-07-15 23:14:44.060416\")","(10,0.241393140517175,\"2018-07-15 23:14:44.060418\")"}        
NOTICE:  x: (1,0.0940282950177789,"2018-07-15 23:14:44.060389")        
NOTICE:  x: (2,0.922331794165075,"2018-07-15 23:14:44.060404")        
NOTICE:  x: (3,0.857550186105072,"2018-07-15 23:14:44.060406")        
NOTICE:  x: (4,0.373486907221377,"2018-07-15 23:14:44.060408")        
NOTICE:  x: (5,0.973780393600464,"2018-07-15 23:14:44.060409")        
NOTICE:  x: (6,0.502839601133019,"2018-07-15 23:14:44.060411")        
NOTICE:  x: (7,0.217925263568759,"2018-07-15 23:14:44.060412")        
NOTICE:  x: (8,0.733274032827467,"2018-07-15 23:14:44.060413")        
NOTICE:  x: (9,0.62150136847049,"2018-07-15 23:14:44.060416")        
NOTICE:  x: (10,0.241393140517175,"2018-07-15 23:14:44.060418")        
DO        
```       
## 方法4、预创建表结构，使用起来比较复杂，不推荐        
创建父表        
预创建一些继承表        
使用时，使用advisory lock保护，挑选其中一个继承表使用        
例子        
```        
-- 创建父表        
create table tmp1(id int, info text, crt_time timestamp);        
-- 创建100个子表        
do language plpgsql $$        
declare        
begin        
  for i in 1..100 loop        
    execute format('create unlogged table tmp1_%s (like tmp1 including all) inherits (tmp1)', i);        
  end loop;        
end;        
$$;        
```        
创建加锁函数，返回值即后缀        
```        
create or replace function get_lock() returns int as $$        
declare        
begin        
  for i in 1..100 loop        
    if pg_try_advisory_lock(i) then        
      return i;        
    end if;        
  end loop;        
  return '-1';        
end;        
$$ language plpgsql strict;        
```        
加锁，返回1则使用后缀为1的临时表        
```        
postgres=# select get_lock();        
 get_lock         
----------        
        1        
(1 row)        
```        
使用临时表        
```        
truncate tmp1_1;        
... 使用 tmp1_1        
```        
释放锁        
```        
postgres=# select pg_advisory_unlock(1);        
 pg_advisory_unlock         
--------------------        
 t        
(1 row)        
```        
### 可以精细化        
1、维护1张表，后缀ID为PK，这样的话advisory lock id在全局都不会冲突        
```        
create table catalog_tmp (        
  tmp_tbl name,        
  prefix name,        
  suffix int primary key        
);        
create index idx_catalog_tmp_1 on catalog_tmp(tmp_tbl);        
```        
```        
insert into catalog_tmp select 'tmp1','tmp1',generate_series(1,100);        
```        
2、申请临时表锁时，使用一个函数，从前面的表中获取前后缀，直接返回表名。        
```        
create or replace function get_tmp(name) returns text as $$        
declare        
  i int;        
  v name;        
begin        
  for i,v in select suffix,prefix from catalog_tmp where tmp_tbl=$1         
  loop        
    if pg_try_advisory_lock(i) then        
      return v||'_'||i;        
    end if;        
  end loop;        
end;        
$$ language plpgsql strict;        
```        
3、申请临时表，返回的就是当前会话可以使用的临时表名        
```        
postgres=# select get_tmp('tmp1');        
 get_tmp         
---------        
 tmp1_1        
(1 row)        
```        
4、释放临时表的函数。       
```        
create or replace function release_tmp(name) returns void as $$      
declare      
begin      
  loop      
    if not pg_advisory_unlock(substring($1,'_(\d*)$')::int) then      
      return;      
    end if;      
  end loop;      
end;      
$$ language plpgsql strict;      
```        
释放临时表(注意，不释放的话，其他会话就不可用使用这个临时表)        
```      
select release_tmp('tmp1_1');      
```      
## 方法5、其他，内核层面支持临时表       
https://postgrespro.com/roadmap/56516        
## 参考        
https://postgrespro.com/roadmap/56516          
https://www.codeproject.com/Articles/1176045/Oracle-style-global-temporary-tables-for-PostgreSQL      
视图+触发器方法，效率没有方法1 好。  
https://github.com/yallie/pg_global_temp_tables   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")