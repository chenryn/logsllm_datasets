### Describe your issue.
This may be a duplicate of gh-15072, but 1) I don't have a big array (50
values), and 2) this method did not return any NaN's, just unexpected large
(negative or positive) values.
I finally caught the issue when I realized I had switched from scipy==1.4.1 to
scipy==1.7.3 (before, it was working)
I'm attaching two plots made with the same code example, but each with a
different scipy version. In the 1.4.1 one, the decimate result is correct and
independent of the type of array, and in the 1.7.3, it's wrong for the float32
array:
![scipy1](https://user-
images.githubusercontent.com/33642154/148854466-45337928-ee14-4f75-a977-21e32278a9f5.png)  
![scipy2](https://user-
images.githubusercontent.com/33642154/148854486-6cd0f9bf-
de69-427a-ba98-add71b779041.png)
### Reproducing Code Example
    import scipy.signal as ssi
    import matplotlib.pyplot as plt
    import numpy as np
    np.random.seed(1)
    n = 50
    p = np.random.rand(n)
    q = 20
    p_d1 = ssi.decimate(np.asarray(p, dtype='float32'), q)
    p_d2 = ssi.decimate(np.asarray(p, dtype='float64'), q)
    print('max p_d1 (float32): ', max(p_d1))  # scipy==1.4.1: 0.526 / scipy==1.7.3: 5279   decimated', 'float64 > decimated'], loc='upper right')
    plt.title('scipy==1.4.1')  # scipy==1.4.1 / scipy==1.7.3 (latest to date)
    plt.show()
### Error message
    None!!
### SciPy/NumPy/Python version information
No issue with scipy==1.4.1; Issue with scipy==1.7.3