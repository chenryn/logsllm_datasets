It would be great if the C# null-conditional operator `?.` could be included
in TypeScript.
Actually it might be more accurate to call it undefined-or-null-conditional
operator in TypeScript.
The expected behavior for `a?.b` is to return `a` when `a` is `undefined` or
`null` else `a.b`.
**Typescript**
    var n1: number = 5;
    var n2: number = undefined;
    var b: boolean = false;
    console.log(n1?.toString() || ''); // '5'
    console.log(n2?.toString() || ''); // ''
    console.log(b?.toString() || ''); // 'false'
**Javascript**
    var n1 = 5;
    var n2 = undefined;
    var b = false;
    console.log(n1 == null ? n1 : n1.toString() || ''); // '5'
    console.log(n2 == null ? n2 : n2.toString() || ''); // ''
    console.log(b == null ? b : b.toString() || ''); // 'false'
See this thread for the null checking explanation.
It should be possible to chain null-conditional operators:
**Typescript**
    var x1 = null;
    var x2 = {};
    var x3 = { v: undefined };
    var x4 = { v: 5 };
    console.log(x1?.v?.toString() || ''); // ''
    console.log(x2?.v?.toString() || ''); // ''
    console.log(x3?.v?.toString() || ''); // ''
    console.log(x4?.v?.toString() || ''); // '5'
    console.log(x4?.v?.w?.toString() || ''); // ''