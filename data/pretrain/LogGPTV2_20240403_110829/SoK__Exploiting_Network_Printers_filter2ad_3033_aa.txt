# Title: SoK: Exploiting Network Printers
# Authors: Jens Müller, Vladislav Mladenov, Juraj Somorovsky, Jörg Schwenk
# Affiliation: Horst Görtz Institute for IT-Security, Ruhr University Bochum
# Contact: [PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL]
# Conference: 2017 IEEE Symposium on Security and Privacy
# DOI: 10.1109/SP.2017.47

## Abstract
The concept of a paperless office has been envisioned for over three decades. However, printers remain essential in daily work and are commonly used by internet users. Instead of being phased out, printers have evolved into complex networked systems, often integrated directly into corporate networks and handling significant amounts of confidential data. This makes them an attractive target for attackers.

In this paper, we conduct a large-scale analysis of printer attacks and systematize our findings by developing a general methodology for the security analysis of printers. Based on this methodology, we developed an open-source tool called PRinter Exploitation Toolkit (PRET). Using PRET, we evaluated 20 printer models from various vendors and found that all were vulnerable to at least one of the tested attacks. These attacks ranged from simple Denial-of-Service (DoS) attacks to more sophisticated ones, such as extracting print jobs and system files.

Our systematic analysis also revealed new insights that enable attacks from the Internet using advanced cross-site printing techniques combined with printer Cross-Origin Resource Sharing (CORS) spoofing. Finally, we demonstrate how these attacks can be applied to systems beyond traditional printers, such as Google Cloud Print and document processing websites.

## 1. Introduction
Printers are often considered unremarkable devices, primarily used for printing documents, which is still necessary even in today's digital world. Printers and multifunction printers (MFPs) are ubiquitous in households, offices, companies, governmental, medical, and educational institutions. From a security research perspective, these machines have been overlooked, despite their direct access to sensitive information like confidential reports, contracts, and patient records.

### Security of Printers
In recent years, printer security has gained some attention. In 1996, Silbert et al. highlighted the potential dangers of PostScript file I/O primitives [52]. In 2002, Phenoelit published a proof-of-concept application for Printer Job Language (PJL) file system access [26]. Crenshaw provided an overview of potentially harmful PJL commands for network printers in 2005 [20]. Weaver discovered the cross-site printing technique in 2007, which forces web browsers to print arbitrary payloads on a network printer [62]. A comprehensive discussion of printer security, including a survey of malicious PJL and PostScript commands, was given by Costin et al. [16], [17], and [18].

However, there has been no systematic effort to exploit PostScript and PJL functions, combine existing attack techniques, and summarize all attacks to bypass printer security.

### Existing Gaps
During our research, we identified several gaps:
1. Despite known proof-of-concept attacks and techniques, corresponding countermeasures have not been implemented, leaving devices and systems vulnerable.
2. There is no comprehensive study summarizing all existing attacks or a general methodology for performing a security evaluation of printers.
3. The classification of relevant attacker models for printers is missing.
4. There are no tools to facilitate the security evaluation of printers.

To address these issues, we conducted the first comprehensive study on printer security, contributing to systematic penetration testing. Our research questions (RQ) are:
1. What is the current state of printer security?
2. Do security gaps exist, and what are their causes?
3. Can our findings be applied to new technologies?

### RQ1: Current State
Although printers are an important attack target, security threats and scenarios are rarely covered in research papers. Many security issues are described in various Common Vulnerabilities and Exposures (CVEs) and security blogs. The main challenge was to analyze known attacks and find a generic approach to apply them to different printers.

Figure 1 shows a typical printer with its interfaces. Printers support many communication protocols like IPP, LPD, and raw port 9100 printing. Most attacks use these protocols as carriers rather than targets, focusing on the interpreters processing the actual print jobs. We determined a generic way to carry out different attacks independent of the supported communication protocols. Our attacks concentrate on two widely used interpreters: PostScript and PJL. We also extended cross-site printing techniques with a novel attack called CORS spoofing, allowing web attackers to establish a backchannel from the printer to read attack results.

We implemented a semi-automated tool, PRinter Exploitation Toolkit (PRET), to facilitate our analysis. The results were alarming: each of the 20 tested printers was susceptible to multiple attacks, ranging from simple DoS attacks to complex cross-site printing attacks, leading to the leakage of printed documents and stored system files.

### RQ2: Existing Gaps
Printer languages like PJL and PostScript offer security-sensitive features, such as file system access. Even though many security issues are known, they have not been addressed by vendors. Our analysis revealed a gap in the security of PostScript and PJL. There is no survey of existing risks and corresponding countermeasures. Even if a vendor is aware of the risks, there is no document summarizing Best Common Practices (BCP). BCPs are crucial for reducing security risks in technologies like TLS [51], OAuth [23], and Web Application Security [1].

### RQ3: New Research Directions
Based on our findings, we explored whether our attacks could be applied to other systems, such as cloud printing services, online PostScript interpreters, and 3D printers. Our goal is to determine which systems should be the focus of future security research and to document possible attack scenarios.

We provide a practical analysis of Google Cloud Print and websites converting PostScript files to PDF, revealing existing security issues leading to information leakage. Due to the complexity and feature diversity of these systems, we do not provide a comprehensive analysis.

### Contributions
Our contributions include:
- A comprehensive study of attacks applicable to printing devices, systematizing findings, establishing a generic methodology, and defining attacker models.
- Development of the semi-automated open-source tool PRET, capable of carrying out multiple attacks in different printing languages like PostScript and PJL.
- An evaluation of 20 different printers, revealing serious security flaws, from efficient DoS to attacks leaking sensitive information.
- Proof of the applicability of our methodology and findings by evaluating systems beyond printers, such as Google Cloud Print, and addressing future research directions.

### Responsible Disclosure
We responsibly disclosed all security vulnerabilities to printer manufacturers and administrators responsible for vulnerable interpreter processing websites. Google rewarded our findings with $3133.70.

### Ethical Considerations
We evaluated online websites and their PostScript processors using a carefully chosen set of commands for fingerprinting and directory traversal. We did not execute any malicious commands that could lead to DoS attacks or endanger the server.

## 2. Foundations
Data can be sent to a printer via USB/parallel cable or over a network. We focus on network printing, but most attacks can also be performed against local printers.

### 2.1. Device Control Protocols
Device control protocols change settings for the entire device, such as TCP/IP settings. One approach to standardize printer device management is the Network Printing Alliance Protocol (NPAP), supported only by Lexmark. Other manufacturers use Simple Network Management Protocol (SNMP).

#### SNMP
SNMP is a UDP-based protocol designed to manage various network components. Information is defined in Management Information Bases (MIBs). Listing 1 shows an example of retrieving the device description.

```bash
# snmpget -v1 -c public [printer] 1.3.6.1.2.1.25.3.2.1.3.1
"hp LaserJet 4250"
```

While SNMP is not printer-specific, many manufacturers have published MIBs for their network printer models. We use SNMP to reset the device to factory defaults and can embed it into PJL for arbitrary print jobs.

### 2.2. Printing Channel
Common network printing protocols include Internet Printing Protocol (IPP), Line Printer Daemon (LPD), Server Message Block (SMB), and raw port 9100 printing. We do not attack these protocols directly but use them as channels to deploy malicious PostScript and PJL code.

Raw port 9100 printing is the default method used by CUPS and Microsoft Windows, considered the simplest, fastest, and most reliable network protocol for printers. It provides a bidirectional channel, useful for debugging and accessing results of PostScript and PJL commands. Raw port 9100 printing is supported by almost any network printer and is the primary channel in our security analysis.

### 2.3. Job/Printer Control Language
A job control language manages settings for the current print job. Examples include Xerox Job Control Language (XJCL), Epson Job Language (EJL), Canon Common Peripheral Controlling Architecture (CPCA), and PJL, which is supported by many printers.

#### Printer Job Language (PJL)
PJL, introduced by HP, became a de-facto standard for print job control. It can change settings like paper tray and size and is not limited to the current print job. PJL can also change the printer’s display and read/write files on the device. Listing 2 shows typical PJL commands.

```pjl
@PJL SET PAPER=A4
@PJL SET COPIES=10
@PJL ENTER LANGUAGE=POSTSCRIPT
```

In this work, PJL is used to damage physical storage and gain access to the printer’s memory and file system.

#### Printer Management Language (PML)
PML is a proprietary language to control HP printers, combining features of PJL and SNMP. Documentation is limited, but parts of the standard were leaked by the LPRng project.