In this section, we illustrate how the similarity can be encoded
as a runtime check within the program.
The basic idea is as follows: the statically inferred branch
similarity behavior among threads is consistent with the actual
runtime branch behavior similarity in an error-free execution.
However, if a hardware error propagates to the branch condi-
tion data of one thread and causes the branch’s outcome to ﬂip,
BRANCH CONDITION SIMILARITY CATEGORY DEFINITION
TABLE I
Similarity
Cate-
gory
shared
Static character-
istics of control
data
All operands of
instruction
the
are
shared
variables among
threads, such as
global
variables
and constants
threadID One
operand
on
depends
and
thread ID,
remaining
the
operands
are
shared variables
partial
none
these
Local
variables,
but
local
variables are as-
signed with one
of a small sub-
set of shared vari-
ables
variables
Local
that
be
statically inferred
to
similar
across threads
cannot
be
Branch runtime behav-
ior similarity
threads
take
All
same decision at
branch.
the
the
of
branch
threads
IDs
take
decision.
The
decision
is related to thread ID
-
certain
the
thread
same
For
example, if the condition
comparison statement is
an equality comparison
between thread ID and
one
shared
thread
one
path and the remaining
threads follow the other
path at run time.
The threads which are
assigned to the same
shared variabl
take the
same decision.
variables,
follows
No known similarity in
branch runtime behavior
among the threads.
the program will deviate from the statically inferred behavior.
BLOCKWATCH detects the deviation and stops the program.
As an example, we use branch 1 in Figure 1 to explain the
runtime checks. As we show in Section II-C, branch 1 belongs
to category threadID according to the classiﬁcation in Table I.
This means that no more than one thread (thread 0 in this case)
takes the branch. To check this constraint, we insert a call to
the checking code immediately after the branch decision to
record its status. Assume that a hardware error propagates to
procid variable in thread 2, thus causing it to take the branch.
This violates the constraint that no more than one thread takes
the branch, and is hence detected by the check.
III. IMPLEMENTATION
The implementation of BLOCKWATCH consists of two
steps. The ﬁrst step is to infer the branches’ similarity category
through static analysis at compile time, and is described in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:23 UTC from IEEE Xplore.  Restrictions apply. 
Section III-A. The second step is to compare the actual runtime
behaviors’ of the branches with the inferred behavior accord-
ing to the branches’ similarity categories using a runtime
monitor, and is described in Section III-B.
A. Similarity Category Identiﬁcation
In this section, we introduce an algorithm to identify the
branches’ similarity categories. Our algorithm is implemented
as part of an optimizing compiler. The algorithm assumes that
the program has been translated into a low-level intermediate
representation (IR) by the compiler’s front-end. Therefore, all
the branches in the program, including those in loops, have
been explicitly represented as branch instructions prior to the
algorithm. Further, we assume that the IR uses Static Single
Assignment (SSA) form [14], which requires that a variable
be assigned exactly once in the program i.e., every variable in
the program has a unique instruction that assigns to it.
As we show in Section II, the similarity category of a branch
depends upon the nature of the variables used in the branch
condition i.e., whether they are shared, dependent on the thread
ID or local to the thread. Therefore, in order to infer the
similarity category of a branch, we need to ﬁnd the similarity
categories of the operands used in the branch instruction.
However, the operands may themselves be produced by other
instructions, and hence we need to determine the operand type
of all instructions in the program. This determination is based
on whether each operand is derived from a shared variable
(shared), a variable containing the thread ID4 (threadID), or
from a local variable that can only take one of a small number
of shared variables (partial).
Initially, all
instructions in the program are assigned a
classiﬁcation of “NA”, or “Not Assigned”. Then instructions
that are directly assigned from the thread ID variable are
assigned to the category threadID. Similarly, instructions that
are directly assigned from a shared variable are assigned to
the category shared. After this step, the similarity categories
are propagated to other instructions in the program as follows:
(1) if it is a unary instruction, the similarity category of the
instruction is the same as that of its (only) operand, (2) if it
is a binary or ternary instruction, we consider each operand
separately and update the similarity category of the instruction
based on the rules in Table II.
Propagation Rules: Before we present the overall algo-
rithm, we ﬁrst explain Table II. The rows of Table II corre-
spond to the current instruction’s similarity category, while the
columns correspond to the operand’s similarity category. The
entries in the table indicate the similarity category to which
the instruction should be assigned after processing the operand.
Because we process each operand separately and update the
instruction’s similarity category after doing so, the same table
applies for both binary and ternary instructions.
We explain the rationale behind Table II with an example.
Assume that the current instruction’s similarity category is
partial. This corresponds to the ﬁfth row in Table II. If the
next operand belongs to category NA, then the instruction’s
category is set to NA and the inferring process ends for this
instruction (the instruction will be revisited later). If the next
operand is shared or partial, the instruction’s category is set to
partial because the instruction continues to depend on local
4We look for common code patterns that compute the thread ID. These can
be customized for different libraries.
RULES TO INFER INSTRUCTION’S SIMILARITY CATEGORY FROM ITS
CURRENT CATEGORY AND THE OPERAND’S CATEGORY
TABLE II
curr ins
NA
shared
threadID
partial
none
operand
NA shared
threadID partial none
NA shared
NA shared
NA threadID threadID none
NA partial
NA none
threadID partial none
threadID partial none
none
partial none
none
none
none
none
variables that may come from one of the shared variables.
If the next operand belongs to threadID,
the instruction’s
category is set to none because the instruction depends neither
exclusively on one of several shared variables nor the thread
ID, and hence does not satisfy either category. If the next
operand belongs to none, then the instruction’s category also
becomes none as it depends on private variables. Note that
the inference rules are conservative: even if a single operand
belongs to category none, the instruction is updated to this
category (see optimizations for how to mitigate this effect).
One case where we deviate from the rules in Table II is
when a local variable is assigned with a shared value in one
path of an if-else branch but not assigned in another, or is
assigned different shared values in both paths. We update its
category to partial instead of shared at the convergence point
of the branch (i.e., the phi instruction in the SSA form). This
is because the shared value is only one possible value that the
variable may take at runtime. An example of this case occurs
in the variable private in Figure 1, which is assigned to one
of the two different constants 1 and −1 in the two outcomes
of branch 3. Hence, its category is assigned to partial.
Multiple Instances: Because a static branch in the program
may be executed multiple times e.g., if it is inside a loop or
the function containing it is called multiple times, its similarity
category may vary depending on the way we group the runtime
instances to check. We illustrate this case with an example
in Figure 2, which is adapted from FFT in the SPLASH-2
Benchmark Suite [13].
In Figure 2, there are two functions slave() and foo() that
are executed by each thread. The slave() function calls foo()
in two different places. Consider branch 1 which is inside
function foo(). The function is called at two different places
in slave(), each time with a different local variable. However,
in each invocation of the function, the local variable used in
the branch condition is the same, namely arg.
There are two ways to classify the similarity of this branch.
We can classify it as shared in which case we need to track
the value at each call site separately and ensure that we are
comparing the values from each call site separately. Another
possibility is to merge the values across the call sites, and treat
the branch as belonging to category partial, as it is derived
from multiple shared variables. In this case, we need not track
each invocation separately. We adopt the former policy in spite
of the additional performance overhead it entails, as it allows
us to perform tighter checks on the branch.
Algorithm: We now present
the overall algorithm for
inferring each instruction’s similarity category in Figure 3.
The algorithm iterates over all instructions in the program and
updates the similarity category of each instruction by calling
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:23 UTC from IEEE Xplore.  Restrictions apply. 
...
foo (1);
...
if ( test ) {
foo (2);
}
...
1 bool test;
2 void slave() {
3
4
5
6
7
8
9
10
11 void foo(int arg) {
12
13
14
15
16
17
18
19
// Branch 2
for (int i = 0;
// Branch 1
if ( i < arg) {
}
...
}
}
}
i < 5; i = i + 1) {
Fig. 2. Example code of multiple runtime instances of the same branch
in program) {
changed = visitInst ( inst )
|| changed;
}
for (branch in program) {
if (branch in categorymap) {
branchcategory =
categorymap[branch];
branchcategory = ‘‘none’’;
}
}
} else {
}
int main() {
bool changed = true;
while (changed) {
changed = false;
for ( inst
}
1 map categorymap;
2
3
4
5
6
7
8
9
10
11
12
13
14