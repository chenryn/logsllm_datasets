在上一节中介绍过的多选结构操作符（alternationoperator）在所有正则操作符中拥有最
低的优先级。如果你写的是\bMary|Jane|Sue\b)，那么三个选择分支分别是bMary)、
Jane>和Sue\b>。这个正则式会匹配在HernameisJanet中的Jane。
如果想要正则表达式中的一些内容不受替代操作影响的话，那么你就需要把这些选择
分支进行分组。分组是通过圆括号来实现的。它们拥有在所有正则操作符中的最高优
先级，这与绝大多数编程语言都是一致的。（\b(MaryJaneSueb拥有三个选择分支
《Mary>、(Jane>和，匹配失败。第二个选择分支，
电
Jane），则匹配成功。然后引擎就会退出该分组。接下来需要匹配的就只剩下了\b。然
而单词分界符无法匹配这里的e与目标结尾处的：之间的位置。在了位置开始的匹配，
其最后的结果是失败。
一组圆括号不仅仅是一个分组；它还是一个捕获分组（capturinggroup）。对于前面的
Mary-Jane-Sue的正则表达式来说，捕获并不是很有用，因为它只是简单地匹配这个正
则表达式。当需要覆盖正则表达式的子串的时候，捕获才会有用，就像在正则式
b(dddd)-(dd)-(da)\b中
这个正则表达式匹配一个yyyy-mm-dd格式的日期。正则表达式\b\d\d\d\d-\d\d-\d\d\b）
也会匹配完全一样的内容。因为这个正则式没有使用任何替代或者重复，因此圆括号
的分组功能就没必要存在。但是捕获功能用起来是很方便的。
正则表达式是1号分组。是2号。第二个是3号分组。
在匹配过程中，当正则表达式引擎到达右括号而退出分组的时候，它会把该捕获分组
所匹配的文本的子串存储起来。当我们的正则式匹配2008-05-24的时候，2008被存储
到第一个捕获中，05在第2个捕获，而24则在第3个捕获中。
使用捕获的文本可以有3种方式。本章中的实例2.10会讲解如何在同一个正则匹配中
正则表达式的基本技巧
55
www.TopSage.com
---
## Page 72
在此匹配所捕获的文本。实例2.21会展示在执行查找和替换的时候，如何把捕获到的
文本添加到替代文本中。下一章中的实例3.9会介绍在你的应用程序中如何使用正则匹
配的子串。
变体
非捕获分组
在正则式\b(MaryJane|Sue\b>中，我们使用圆括号只是为了分组的目的。与其使用一
个捕获分组，我们也可以使用非捕获分组：
\b(?:MaryIJane|Sue)\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
由三个字符?:作为起始的是一个非捕获分组。右括号遇到2008-08-08的时候，第-个会匹配20。接
着根据目标文本中到达的位置，正则引擎会进人捕获分组。
在捕获分组中的d\d会匹配08，然后引擎会到达分组的右括号。在这个点上，部分
正则表达式的基本技巧
57
www.TopSage.com
---
## Page 74
匹配08会被保存到1号捕获分组中。下一个记号是连字符，它会按照字面进行匹配。
接着就遇到了反向引用。正则引擎会检查第一个捕获分组的内容：08。然后引擎会试
图按照字面来匹配这个文本。如果该正则表达式是不区分大小写的，那么捕获分组也
会按照这种方式进行匹配。在这里，反向引用会匹配成功。下一个连字符和反向引用
也会匹配成功。最终，单词分界符会匹配目标文本的结尾，这样就找到了一个整体匹
配：2008-08-08。现在捕获分组中依然保存的是08。
如果一个捕获分组被重复的话，这可以通过一个量词（实例2.12）或者是回溯（实例
2.13）来实现，保存的匹配会在每次捕获分组匹配成功的时候被覆盖。一个对该分组的
反向引用只会匹配该分组最后一次捕获到的文本。
如果同一个正则表达式遇到2008-05-242007-07-07的时候，当\bld\d（dd)>匹配到2008
的时候，该分组第一次捕获到的内容08，会被保存到第一个（也是唯一一个）捕获分
组中。接下来，连字符会匹配它自身。反向引用在试图用05来匹配08>的时候，匹配
会产生失败。
由于在该正则表达式中不存在其他的选择分支，引擎会放弃匹配尝试。这包括清除所
有的捕获分组。当引擎再次尝试的时候，从目标文本中的第一个0开始，不再存有
任何文本内容。
接下来继续处理2008-05-242007-07-07，该分组下一次会捕获到内容是当。这次匹配是成功的，接着下一个连字符、反向引用以及单词边界都匹
配成功。结果是找到了2007-07-07。
因为正则引擎是从前向后处理的，因此应当把捕获括号放到反向引用的前面。正则表达
式lb\dd\1-(d\d)-\1>和永远不可能匹配到任何东西。因为这里的反
向引用是在捕获分组之前出现的，因此它还没有捕获到任何东西。除非你使用的是
JavaScript，那么如果反向引用指向一个还没有进行匹配尝试的分组，它总是会匹配失败。
一个还没有参与匹配的分组，并不等同于-一个捕获到长度为0匹配的分组。对一个长
度为0的捕获分组的反向引用总是会匹配成功。当\1>匹配字符串的开始的时候，
第一个捕获分组会捕获到号的长度为0的匹配，从而1>会匹配成功。在实践中，这会
发生在当所有捕获分组的内容都不是必需的情况下。
提示
JavaScript是我们所知道的唯一与正则表达式中几十年反向引l用的传统相
对一个还没有参与匹配的分组的反向引用总是会匹配成功，这同捕获了
长度为0的匹配的分组的反向引用是一样的。因此，在JavaScript中，
（\b\d\d\1-\1-(\d\d）\b>会成功匹配12--34
58第2章
www.TopSage.com
---
## Page 75
参见
实例2.9、2.11、2.21和3.9。
2.11
捕获和命名匹配子串
问题描述
创建一个正则表达式，匹配以yyyy-mm-dd格式的任意日期，并且分别捕获年、月和日。
这样做的目的是为了在处理匹配的代码中可以更容易处理这些分别捕获的值。为了更
好地实现这个目标，向每个捕获的文本添加描述性的名称：“year”、“month”和“day”。
再创建一个正则表达式来匹配按照yyyy-mm-dd格式的“神奇”日期。一个神奇日期指
的是如果年减去世纪、月份和该月的天数都是相同的数字。例如，2008-8-8就是一个神
奇日期。把神奇日期捕获下来（在这个例子中是08），并把给它打上标签“magic”。
你可以假设目标文本中的所有日期都是合法的。正则表达式不必考虑去掉像9999-99-99
这样的非法数据，因为它们根本不可能出现在目标文本中。
解决方案
命名捕获
\b(?\d\d\d\d)-(?\d\d)-(?\d\d)\b
正则选项：无
正则流派：.NET、PCRE 7、Per15.10、Ruby 1.9
\b(？'year'\d\d\d\d)-(?'month'\d\d)-(?'day'\d\d)\b
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
\b(?P\d\d\d\d)-(?P\d\d)-(?P\d\d)\b
正则选项：无
正则流派：PCRE4或更新版本、Per15.10、Python
命名反向引用
\b\d\d(?\d\d)-\k-\k\b
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
\b\d\d(?'magic'\d\d)-\k'magic'-\k'magic'\b
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
\b\d\d(?P\d\d)-(?P=magic)-(?P=magic)\b
正则选项：无
正则流派：PCRE4或更新版本、Per15.10、Python
正则表达式的基本技巧
59
www.TopSage.com
---
## Page 76
讨论
命名捕获
实例2.9和2.10讲解了捕获分组和反向引用。更加准确地来讲：这两个实例中使用的
是编号的捕获分组和编号的反向引用。每个分组会自动获得一个编号，你可以使用这
些编号来进行反向引用。
除了编号分组之外，现代的正则表达式流派还支持命名捕获分组。在命名和编号分组
之间的唯一区别是你可以给分组指派一个描述性的名称，而不是被限制为只能使用自
动分配的编号。命名分组可以使正则表达式更加容易阅读，更加容易维护。把一个捕
获分组添加到一个已有的正则表达式中可能会修改之前指派给所有捕获分组的编号。
而你指派的名称则依然是保持不变的。
Python是第一个支持命名捕获的正则表达式流派。它使用的语法是（?Pregex）。
名称中包含的必须是可以被w>匹配的单词字符。?P是该分组的起始括号，
而regex)模仿了Python的语法，但是却去掉了其中的P。这里的名
称必须包含可以被匹配的单词字符。(?是该分组的起始括号，而<)则是
分组的结束括号。
当你使用XML编码，或是像我们这样在DocBookXML中撰写本书的时候，在命名捕
获语法中的尖括号会让人感到厌烦。这也正是.NET中提供了另一种可替代的命名捕获
语法的原因：《(?'name'regex)。这里的尖括号被替换为了单引号。你可以出于自已的方
便来选择使用哪种记法。它们的功能是完全等价的。
可能是基于.NET的流行超过了Python的原因，.NET语法似乎成为了其他正则库开发
人员更乐于沿用的语法。Perl5.10使用的是它，而在Ruby1.9的Oniguruma引擎中也
是如此。
PCRE在很早的时候就沿用了的Python的语法，在那个时候Perl还根本没有提供对于
命名捕获的支持。PCRE7的版本中添加了Perl5.10中添加的新功能，它同时提供
对.NET语法和Python语法的支持。可能是基于PCRE成功的考虑，Perl5.10采取了反
向兼容的举动，也提供了对Python语法的支持。在PCRE和Perl5.10中，用于命名捕
获的.NET语法和Python语法的功能是完全一样的。
读者应当选择对你来说最为有用的语法。如果在PHP中编码的话，你会希望代码能够
用于老版本的PHP，由于它采用的是PCRE的老版本，你应该使用Python语法。如果
不需要与老版本的兼容性，而且也采用的是.NET和Ruby，那么在这些语言之间进行复
制和粘贴的话，采用.NET语法更为容易。如果你不是很确定，那么可以使用PHP/PCRE
60第2章
www.TopSage.com