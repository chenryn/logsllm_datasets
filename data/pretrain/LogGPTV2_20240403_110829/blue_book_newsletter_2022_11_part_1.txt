# [Introduction](index.md)
* New: Add the donation information.
# Activism
## [Environmentalism](environmentalism.md)
* New: Introduce carbon fingerprint calculation tools.
    Measure the carbon footprint of your travels
    https://www.carbonfootprint.com/
    There are also some calculators for events itself:
    https://co2.myclimate.org/en/event_calculators/new
    https://psci.princeton.edu/events-emissions-calculator
* New: [Saving water.](environmentalism.md#saving-water)
    Here are some small things I'm doing to save some water each day:
    - Use the watering can or a bucket to gather the shower water until it's warm
      enough. I use this water to flush the toilet. It would be best if it were
      possible to fill up the toilet's deposit, but it's not easy.
    - Use a glass of water to wet the toothbrush and rinse my mouth instead of using
      running water.
# Life Management
## Task Management
### [OpenProject](task_tools.md)
* New: Introduce OpenProject.
    [OpenProject](https://www.openproject.org/) is an Open source project management
    software.
    The benefits over other [similar software
    are](task_tools.md#web-based-task-manager):
    * It's popular: More than 6.2k stars on github, 1.7k forks.
    * [It's development is active](https://github.com/opf/openproject/pulse): in the
        last week they've merged 44 merged pull requests by 16 people.
    * They use their own software to [track their bugs](https://community.openproject.org/projects/openproject/)
    * [Easy to install](https://github.com/opf/openproject-deploy)
    * Easy to use
    * The community version is flexible enough to adapt to different workflows.
    * [Good installation and operation's documentation](https://www.openproject.org/docs/installation-and-operations/).
    * Very good API documentation.
    * Supports LDAP
    The things I don't like are:
    * Data can be exported as XML or CSV but it doesn't export everything. You have
        access to the database though, so if you'd like a better extraction of the
        data you in theory can do a selective dump of whatever you need.
    * It doesn't yet have [tag support](https://community.openproject.org/projects/openproject/work_packages/32181/activity).
        You can meanwhile add the strings you would use as tags in the description,
        and then filter by text in description.
    * There is no demo instance where you can try it. It's easy though to launch
        a [Proof of Concept environment yourself](#proof-of-concept) if you already
        know `docker-compose`.
    * Even thought the [Community (free) version has many features](https://www.openproject.org/pricing/#features) the next aren't:
        * [Status boards](https://www.openproject.org/docs/user-guide/agile-boards/#status-board):
            you can't have Kanban boards that show the state of the issues as
            columns. You can make it yourself through a Basic board and with the
            columns as the name of the state. But when you transition an issue from
            state, you need to move the issue and change the property yourself. I've
            thought of creating a script that works with the API to do this
            automatically, maybe through the webhooks of the openproject, but it
            would make more sense to spend time on `pydo`.
        * [Version boards](https://www.openproject.org/docs/user-guide/agile-boards/#version-board):
            Useful to transition issues between sprints when you didn't finish them
            in time. Probably this is easily solved through bulk editing the issues.
        * [Custom actions](https://www.openproject.org/docs/system-admin-guide/manage-work-packages/custom-actions/)
            looks super cool, but as this gives additional value compared with the
            competitors, I understand it's a paid feature.
        * [Display relations in the work package list](https://www.openproject.org/docs/user-guide/work-packages/work-package-relations-hierarchies/#display-relations-in-work-package-list-premium-feature):
            It would be useful to quickly see which tasks are blocked, by whom and
            why. Nothing critical though.
        * [Multiselect custom fields](https://www.openproject.org/docs/system-admin-guide/custom-fields/#create-a-multi-select-custom-field-premium-feature):
            You can only do single valued fields. Can't understand why this is
            a paid feature.
        * 2FA authentication is only an Enterprise feature.
        * [OpenID and SAML](https://www.openproject.org/docs/system-admin-guide/authentication/openid-providers/)
            are an enterprise feature.
    Also included:
    * [How to install it](openproject.md#installation)
    * [How to operate it](openproject.md#operation)
    * [Tips](openproject.md#tips)
* New: [Web based task manager.](task_tools.md#web-based-task-manager)
    Life happened and the development of [pydo](https://lyz-code.github.io/pydo) has
    fallen behind in my priority list. I've also reached a point where [simplest
    one](#the-simplest-task-manager) is no longer suitable for my workflow because:
    * I loose a lot of time in the reviews.
    * I loose a lot of time when doing the different plannings (year, trimester,
        month, week, day).
    * I find it hard to organize and refine the backlog.
    As `pydo` is not ready yet and I need a solution that works *today* better than
    the simplest task manager, I've done an analysis of the state of the art of
    [self-hosted applications](https://github.com/awesome-selfhosted/awesome-selfhosted#software-development---project-management)
    of all of them the two that were more promising were [Taiga](task_tools.md#taiga) and
    [OpenProject](task_tools.md#openproject).
    Finally I chose [OpenProject](openproject.md).
* New: [Deal with big number of tasks.](openproject.md#deal-with-big-number-of-tasks)
    As the number of tasks increase, the views of your work packages starts becoming
    more cluttered. As you
    [can't fold the hierarchy trees](https://community.openproject.org/projects/openproject/work_packages/31918/activity)
    it's difficult to efficiently manage your backlog.
    I've tried setting up a work package type that is only used for the subtasks so
    that they are filtered out of the view, but then you don't know if they are
    parent tasks unless you use the details window. It's inconvenient but having to
    collapse the tasks every time it's more cumbersome. You'll also need to reserve
    the selected subtask type (in my case `Task`) for the subtasks.
* New: [Sorting work package views.](openproject.md#sorting-work-package-views)
    They are sorted alphabetically, so the only way to sort them is by prepending a
    number. You can do `0. Today` instead of `Today`. It's good to do big increments
    between numbers, so the next report could be `10. Backlog`. That way if you
    later realize you want another report between Today and Backlog, you can use
    `5. New Report` and not rename all the reports.
* New: [Pasting text into the descriptions.](openproject.md#pasting-text-into-the-descriptions)
    When I paste the content of the clipboard in the description, all new lines are
    removed (`\n`), the workaround is to paste it inside a `code snippet`.
# Coding
## Languages
### [PDM](pdm.md)
* Correction: [Solve circular dependencies by manual constraining.](pdm.md#solve-circular-dependencies)
    It also helps to run `pdm update` with the `-v` flag, that way you see which are
    the candidates that are rejected, and you can put the constrain you want. For
    example, I was seeing the next traceback:
    ```
    pdm.termui: Conflicts detected:
      pyflakes>=3.0.0 (from )
      pyflakes=2.4.0 (from )
    ```
    So I added a new dependency to pin it:
    ```
    [tool.pdm.dev-dependencies]
    dependencies = [
        # Until flakeheaven supports flake8 5.x
        # https://github.com/flakeheaven/flakeheaven/issues/132
        "flake8>=4.0.1,=3.10"
    ```
* New: Suggest to use pydeps.
    If you get lost in understanding your dependencies, you can try using
    [`pydeps`](https://github.com/thebjorn/pydeps) to get your head around it.
### [Configure Docker to host the application](docker.md)
* New: [Attach a docker to many networks.](docker.md#attach-a-docker-to-many-networks)
    You can't do it through the `docker run` command, there you can only specify one
    network. However, you can attach a docker to a network with the command:
    ```bash
    docker network attach network-name docker-name
    ```
### [Click](click.md)
* New: [File System Isolation.](click.md#file-system-isolation)
    For basic command line tools with file system operations, the
    `CliRunner.isolated_filesystem()` method is useful for setting the current
    working directory to a new, empty folder.
    ```python
    from click.testing import CliRunner
    from cat import cat
    def test_cat():
        runner = CliRunner()
        with runner.isolated_filesystem():
            with open("hello.txt", "w") as f:
                f.write("Hello World!")
            result = runner.invoke(cat, ["hello.txt"])
            assert result.exit_code == 0
            assert result.output == "Hello World!\n"
    ```
    Pass `temp_dir` to control where the temporary directory is created. The
    directory will not be removed by Click in this case. This is useful to integrate
    with a framework like Pytest that manages temporary files.
    ```python
    def test_keep_dir(tmp_path):
        runner = CliRunner()
        with runner.isolated_filesystem(temp_dir=tmp_path) as td:
            ...
    ```
### [Pytest](pytest.md)
* New: [The tmp_path fixture.](pytest.md#the-tmp_path-fixture)
    You can use the `tmp_path` fixture which will provide a temporary directory
    unique to the test invocation, created in the base temporary directory.
    `tmp_path` is a `pathlib.Path` object. Here is an example test usage:
    ```python
    def test_create_file(tmp_path):
        d = tmp_path / "sub"
        d.mkdir()
        p = d / "hello.txt"
        p.write_text(CONTENT)
        assert p.read_text() == CONTENT
        assert len(list(tmp_path.iterdir())) == 1
        assert 0
    ```
* Correction: [Deprecate the tmpdir fixture.](pytest.md#the-tmpdir-fixture)
    Warning: Don't use `tmpdir` use `tmp_path` instead because `tmpdir` uses `py`
    which is unmaintained and has unpatched vulnerabilities.
### [Python Snippets](python_snippets.md)
* Correction: Deprecate tmpdir in favour of tmp_path.
* New: [Pad integer with zeros.](python_snippets.md#pad-integer-with-zeros)
    ```python
    >>> length = 1
    >>> print(f'length = {length:03}')
    length = 001
    ```
* New: [Pathlib make parent directories if they don't exist.](python_snippets.md#pathlib-make-parent-directories-if-they-don't-exist)
    ```python
    pathlib.Path("/tmp/sub1/sub2").mkdir(parents=True, exist_ok=True)
    ```
    From the
    [docs](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir):
    - If `parents` is `true`, any missing parents of this path are created as
      needed; they are created with the default permissions without taking mode into
      account (mimicking the POSIX `mkdir -p` command).
    - If `parents` is `false` (the default), a missing parent raises
      `FileNotFoundError`.
    - If `exist_ok` is `false` (the default), `FileExistsError` is raised if the
      target directory already exists.
    - If `exist_ok` is `true`, `FileExistsError` exceptions will be ignored (same
      behavior as the POSIX `mkdir -p` command), but only if the last path component
      is not an existing non-directory file.
* New: [Pathlib touch a file.](python_snippets.md#pathlib-touch-a-file)
    Create a file at this given path.
    ```python
    pathlib.Path("/tmp/file.txt").touch(exist_ok=True)
    ```
    If the file already exists, the function succeeds if `exist_ok` is `true` (and
    its modification time is updated to the current time), otherwise
    `FileExistsError` is raised.
    If the parent directory doesn't exist you need to create it first.
    ```python
    global_conf_path = xdg_home / "autoimport" / "config.toml"
    global_conf_path.parent.mkdir(parents=True)
    global_conf_path.touch(exist_ok=True)
    ```
* New: [Pad a string with spaces.](python_snippets.md#pad-a-string-with-spaces)
    ```python
    >>> name = 'John'
    >>> name.ljust(15)
    'John           '
    ```
* New: [Get hostname of the machine.](python_snippets.md#get-hostname-of-the-machine)
    Any of the next three options:
    ```python
    import os
    os.uname()[1]
    import platform
    platform.node()
    import socket
    socket.gethostname()
    ```
### [pythonping](pythonping.md)
* New: Introduce pythonping.
    [pythonping](https://github.com/alessandromaggio/pythonping) is simple way to
    ping in Python. With it, you can send ICMP Probes to remote devices like you
    would do from the terminal.
    Warning: Since using `pythonping` requires root permissions or granting
    `cap_net_raw` capability to the python interpreter, try to measure the latency
    to a server by other means such as using `requests`.
### [Selenium](selenium.md)
* New: [Disable loading of images.](selenium.md#disable-loading-of-images)
    You can pass `options` to the initialization of the chromedriver to tweak how