n 401 Unauthorized or 403 Forbidden — This usually indicates that
the requested resource exists but may not be accessed by any user,
cc0044..iinndddd 8844 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 85
Chapter 4 n Mapping the Application 85
regardless of authentication status or privilege level. It often occurs when
directories are requested, and you may infer that the directory exists.
n 500 Internal Server Error — During content discovery, this usually
indicates that the application expects certain parameters to be submitted
when requesting the resource.
The various possible responses that may indicate the presence of interesting
content mean that is diffi cult to write a fully automated script to output a list-
ing of valid resources. The best approach is to capture as much information as
possible about the application’s responses during the brute-force exercise and
manually review it.
HACK STEPS
1. Make some manual requests for known valid and invalid resources, and
identify how the server handles the latter.
2. Use the site map generated through user-directed spidering as a basis for
automated discovery of hidden content.
3. Make automated requests for common filenames and directories within
each directory or path known to exist within the application. Use Burp
Intruder or a custom script, together with wordlists of common files and
directories, to quickly generate large numbers of requests. If you have iden-
tified a particular way in which the application handles requests for invalid
resources (such as a customized “file not found” page), configure Intruder
or your script to highlight these results so that they can be ignored.
4. Capture the responses received from the server, and manually review
them to identify valid resources.
5. Perform the exercise recursively as new content is discovered.
Inference from Published Content
Most applications employ some kind of naming scheme for their content and
functionality. By inferring from the resources already identifi ed within the
application, it is possible to fi ne-tune your automated enumeration exercise to
increase the likelihood of discovering further hidden content.
In the EIS application, note that all resources in /auth start with a capital letter.
This is why the wordlist used in the fi le brute forcing in the previous section
was deliberately capitalized. Furthermore, since we have already identifi ed a
page called ForgotPassword in the /auth directory, we can search for similarly
named items, such as the following:
http://eis/auth/ResetPassword
cc0044..iinndddd 8855 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 86
86 Chapter 4 n Mapping the Application
Additionally, the site map created during user-directed spidering identifi ed
these resources:
http://eis/pub/media/100
http://eis/pub/media/117
http://eis/pub/user/11
Other numeric values in a similar range are likely to identify further resources
and information.
TIP Burp Intruder is highly customizable and can be used to target any por-
tion of an HTTP request. Figure 4-7 shows Burp Intruder being used to per-
form a brute-force attack on the fi rst half of a fi lename to make the requests:
http://eis/auth/AddPassword
http://eis/auth/ForgotPassword
http://eis/auth/GetPassword
http://eis/auth/ResetPassword
http://eis/auth/RetrievePassword
http://eis/auth/UpdatePassword
...
Figure 4-7: Burp Intruder being used to perform a customized brute-force attack on
part of a filename
cc0044..iinndddd 8866 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 87
Chapter 4 n Mapping the Application 87
HACK STEPS
1. Review the results of your user-directed browsing and basic brute-force
exercises. Compile lists of the names of all enumerated subdirectories, file
stems, and file extensions.
2. Review these lists to identify any naming schemes in use. For example, if
there are pages called AddDocument.jsp and ViewDocument.jsp, there
may also be pages called EditDocument.jsp and RemoveDocument.jsp.
You can often get a feel for developers’ naming habits just by reading a
few examples. For example, depending on their personal style, develop-
ers may be verbose (AddANewUser.asp), succinct (AddUser.asp), use
abbreviations (AddUsr.asp), or even be more cryptic (AddU.asp). Getting
a feel for the naming styles in use may help you guess the precise names
of content you have not already identified.
3. Sometimes, the naming scheme used for different content employs
identifiers such as numbers and dates, which can make inferring hidden
content easy. This is most commonly encountered in the names of static
resources, rather than dynamic scripts. For example, if a company’s web-
site links to AnnualReport2009.pdf and AnnualReport2010.pdf,
it should be a short step to identifying what the next report will be called.
Somewhat incredibly, there have been notorious cases of companies
placing files containing financial reports on their web servers before they
were publicly announced, only to have wily journalists discover them
based on the naming scheme used in earlier years.
4. Review all client-side code such as HTML and JavaScript to identify any
clues about hidden server-side content. These may include HTML com-
ments related to protected or unlinked functions, HTML forms with dis-
abledSUBMIT elements, and the like. Often, comments are automatically
generated by the software that has been used to generate web content,
or by the platform on which the application is running. References to
items such as server-side include files are of particular interest. These
files may actually be publicly downloadable and may contain highly sensi-
tive information such as database connection strings and passwords. In
other cases, developers’ comments may contain all kinds of useful tidbits,
such as database names, references to back-end components, SQL query
strings, and so on. Thick-client components such as Java applets and
ActiveX controls may also contain sensitive data that you can extract. See
Chapter 15 for more ways in which the application may disclose informa-
tion about itself.
Continued
cc0044..iinndddd 8877 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 88
88 Chapter 4 n Mapping the Application
HACK STEPS (continued)
5. Add to the lists of enumerated items any further potential names con-
jectured on the basis of the items that you have discovered. Also add to
the file extension list common extensions such as txt,bak,src,inc,
andold, which may uncover the source to backup versions of live pages.
Also add extensions associated with the development languages in use,
such as .java and .cs, which may uncover source files that have been
compiled into live pages. (See the tips later in this chapter for identifying
technologies in use.)
6. Search for temporary files that may have been created inadvertently by
developer tools and file editors. Examples include the .DS_Store file,
which contains a directory index under OS X, file.php~1, which is a
temporary file created when file.php is edited, and the .tmp file exten-
sion that is used by numerous software tools.
7. Perform further automated exercises, combining the lists of directories,
file stems, and file extensions to request large numbers of potential
resources. For example, in a given directory, request each file stem com-
bined with each file extension. Or request each directory name as a subdi-
rectory of every known directory.
8. Where a consistent naming scheme has been identified, consider perform-
ing a more focused brute-force exercise. For example, if AddDocument
.jsp and ViewDocument.jsp are known to exist, you may create
a list of actions (edit, delete, create) and make requests of the form
XxxDocument.jsp. Alternatively, create a list of item types (user, account,
file) and make requests of the form AddXxx.jsp.
9. Perform each exercise recursively, using new enumerated content and
patterns as the basis for further user-directed spidering and further auto-
mated content discovery. You are limited only by your imagination, time
available, and the importance you attach to discovering hidden content
within the application you are targeting.
NOTE You can use the Content Discovery feature of Burp Suite Pro to auto-
mate most of the tasks described so far. After you have manually mapped an
application’s visible content using your browser, you can select one or more
branches of Burp’s site map and initiate a content discovery session on those
branches.
Burp uses the following techniques when attempting to discover new
content:
n Brute force using built-in lists of common fi le and directory names
n Dynamic generation of wordlists based on resource names observed
within the target application
n Extrapolation of resource names containing numbers and dates
cc0044..iinndddd 8888 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 89
Chapter 4 n Mapping the Application 89
n Testing for alternative fi le extensions on identifi ed resources
n Spidering from discovered content
n Automatic fi ngerprinting of valid and invalid responses to reduce false
positives
All exercises are carried out recursively, with new discovery tasks being
scheduled as new application content is discovered. Figure 4-8 shows a con-
tent discovery session in progress against the EIS application.
Figure 4-8: A content discovery session in progress against the EIS application
TIP The DirBuster project from OWASP is also a useful resource when per-
forming automated content discovery tasks. It includes large lists of directory
names that have been found in the wild, ordered by frequency of occurrence.
Use of Public Information
The application may contain content and functionality that are not presently linked
from the main content but that have been linked in the past. In this situation,
it is likely that various historical repositories will still contain references to the
hidden content. Two main types of publicly available resources are useful here:
n Search engines such as Google, Yahoo, and MSN. These maintain a fi ne-
grained index of all content that their powerful spiders have discovered,
and also cached copies of much of this content, which persists even after
the original content has been removed.
n Web archives such as the WayBack Machine, located at www.archive.org/.
These archives maintain a historical record of a large number of websites.
In many cases they allow users to browse a fully replicated snapshot of a
given site as it existed at various dates going back several years.
cc0044..iinndddd 8899 88//1199//22001111 1122::0044::4433 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 90
90 Chapter 4 n Mapping the Application
In addition to content that has been linked in the past, these resources are
also likely to contain references to content that is linked from third-party sites,
but not from within the target application itself. For example, some applications
contain restricted functionality for use by their business partners. Those part-
ners may disclose the existence of the functionality in ways that the application
itself does not.
HACK STEPS
1. Use several different search engines and web archives (listed previously)
to discover what content they indexed or stored for the application you
are attacking.
2. When querying a search engine, you can use various advanced techniques
to maximize the effectiveness of your research. The following suggestions
apply to Google. You can find the corresponding queries on other engines
by selecting their Advanced Search option.
n site:www.wahh-target.com returns every resource within the target
site that Google has a reference to.
n site:www.wahh-target.com login returns all the pages containing the
expression login. In a large and complex application, this technique can
be used to quickly home in on interesting resources, such as site maps,
password reset functions, and administrative menus.
n link:www.wahh-target.com returns all the pages on other websites
and applications that contain a link to the target. This may include links
to old content, or functionality that is intended for use only by third par-
ties, such as partner links.
n related:www.wahh-target.com returns pages that are “similar” to the
target and therefore includes a lot of irrelevant material. However, it may
also discuss the target on other sites, which may be of interest.
3. Perform each search not only in the default Web section of Google, but
also in Groups and News, which may contain different results.
4. Browse to the last page of search results for a given query, and select
Repeat the Search with the Omitted Results Included. By default, Google
attempts to filter out redundant results by removing pages that it believes
are sufficiently similar to others included in the results. Overriding this
behavior may uncover subtly different pages that are of interest to you
when attacking the application.
5. View the cached version of interesting pages, including any content that is
no longer present in the actual application. In some cases, search engine
caches contain resources that cannot be directly accessed in the applica-
tion without authentication or payment.
cc0044..iinndddd 9900 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 91
Chapter 4 n Mapping the Application 91
6. Perform the same queries on other domain names belonging to the same
organization, which may contain useful information about the application
you are targeting.
If your research identifi es old content and functionality that is no longer
linked to within the main application, it may still be present and usable. The
old functionality may contain vulnerabilities that do not exist elsewhere
within the application.
Even where old content has been removed from the live application, the
content obtained from a search engine cache or web archive may contain
references to or clues about other functionality that is still present within the
live application and that can be used to attack it.
Another public source of useful information about the target application is
any posts that developers and others have made to Internet forums. There are
numerous such forums in which software designers and programmers ask
and answer technical questions. Often, items posted to these forums contain
information about an application that is of direct benefi t to an attacker, including
the technologies in use, the functionality implemented, problems encountered
during development, known security bugs, confi guration and log fi les submit-
ted to assist in troubleshooting, and even extracts of source code.
HACK STEPS
1. Compile a list containing every name and e-mail address you can discover
relating to the target application and its development. This should include
any known developers, names found within HTML source code, names found
in the contact information section of the main company website, and any
names disclosed within the application itself, such as administrative staff.
2. Using the search techniques described previously, search for each identi-
fied name to find any questions and answers they have posted to Internet
forums. Review any information found for clues about functionality or vul-
nerabilities within the target application.
Leveraging the Web Server
Vulnerabilities may exist at the web server layer that enable you to discover
content and functionality that are not linked within the web application itself.
For example, bugs within web server software can allow an attacker to list the
contents of directories or obtain the raw source for dynamic server-executable
pages. See Chapter 18 for some examples of these vulnerabilities and ways in
which you can identify them. If such a bug exists, you may be able to exploit it to
directly obtain a listing of all pages and other resources within the application.
cc0044..iinndddd 9911 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 92
92 Chapter 4 n Mapping the Application
Many application servers ship with default content that may help you attack
them. For example, sample and diagnostic scripts may contain known vul-
nerabilities or functionality that may be leveraged for a malicious purpose.
Furthermore, many web applications incorporate common third-party com-
ponents for standard functionality, such as shopping carts, discussion forums,
or content management system (CMS) functions. These are often installed to a
fi xed location relative to the web root or to the application’s starting directory.
Automated tools lend themselves naturally to this type of task, and many
issue requests from a large database of known default web server content, third-
party application components, and common directory names. While these tools
do not rigorously test for any hidden custom functionality, they can often be
useful in discovering other resources that are not linked within the application
and that may be of interest in formulating an attack.
Wikto is one of the many free tools that performs these types of scans, addi-
tionally containing a confi gurable brute-force list for content. As shown in
Figure 4-9, when used against the Extreme Internet Shopping site, it identifi es
some directories using its internal wordlist. Because it has a large database of
common web application software and scripts, it has also identifi ed the fol-
lowing directory, which an attacker would not discover through automated or
user-driven spidering:
http://eis/phpmyadmin/
Figure 4-9: Wikto being used to discover content and some known vulnerabilities
Additionally, although the /gb directory had already been identifi ed via
spidering, Wikto has identifi ed the specifi c URL:
/gb/index.php?login=true
Wikto checks for this URL because it is used in the gbook PHP application,
which contains a publicly known vulnerability.
cc0044..iinndddd 9922 88//1199//22001111 1122::0044::4444 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 93
Chapter 4 n Mapping the Application 93
WARNING Like many commercial web scanners, tools such as Nikto and
Wikto contain vast lists of default fi les and directories and consequently appear
to be industrious at performing a huge number of checks. However, a large
number of these checks are redundant, and false positives are common. Worse
still, false negatives may occur regularly if a server is confi gured to hide a ban-