When combining the *DeviceNetworkEvents* and the *DeviceLogonEvents* we
get some interesting results. We created a query that joins all logon
actions from the compromised device with the network events (query after
image). Furthermore, we calculate the time difference between the
*InboundConnectionAccepted* and the login action.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
| extend TimeDifference = datetime_diff('second', LogonTime, Timestamp)
```
:::
If a succesful login is performed shortly after the
*InboundConnectionAccepted* with a RemoteInteractive logon type, we can
conclude that the logon originated from the IPs we saw in the network
traffic. Based on the file analysis we have now tracked the source of
our alerts!
![Successful login actions combined
with](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/LoginActions.png"
data-srcset="/images/kql-incident-response/LoginActions.png, /images/kql-incident-response/LoginActions.png 1.5x, /images/kql-incident-response/LoginActions.png 2x"
data-sizes="auto"}
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
// Add the device you are investigating in the CompromisedDevice variable
let CompromisedDevice = "testmachine3";
let SearchWindow = 10d; //Customizable h = hours, d = days
DeviceNetworkEvents
| where Timestamp > ago(SearchWindow)
| where DeviceName == CompromisedDevice
// Only list accepted inbound connections
| where ActionType == "InboundConnectionAccepted"
| join kind=inner (
    DeviceLogonEvents
    | where DeviceName == CompromisedDevice
    | where Timestamp > ago(SearchWindow)
    | where ActionType == "LogonSuccess"
    | project-rename LogonTime = Timestamp)
    on $left.DeviceId == $right.DeviceId
| extend TimeDifference = datetime_diff('second', LogonTime, Timestamp)
| where TimeDifference between (0 .. 150)
| project Timestamp, LogonTime, TimeDifference, DeviceName, RemoteIP, LogonType, 
          AccountDomain, AccountName, ActionType1
```
:::
> **KQL Query** [(Public) Inbound connections to a compromised
> device](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20InboundConnectionsCompromisedDevice.md){target="_blank"
> rel="noopener noreffer"}
# File Analysis
One of the alerts that was also related to this incident is shown below.
The actions seem to be triggered from the commandline execution:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
cmd.exe /c ""C:\Users\administrator1\Desktop\VeryCoolScript.cmd" "
```
:::
![Alert: Password stealing from files](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/PasswordStealing.png"
data-srcset="/images/kql-incident-response/PasswordStealing.png, /images/kql-incident-response/PasswordStealing.png 1.5x, /images/kql-incident-response/PasswordStealing.png 2x"
data-sizes="auto"}
From the alert it seems that only the find string process has started as
subprocess of the *VeryCoolScript.cmd* file, but based on previous
experience we want to confirm this by running a query that lists all
subprocesses of a file. The query is too long to share here, but is
listed at the end of this section. The query takes either a SHA1 hash or
filename as input and lists all the associated Subprocesses, FileNames,
FileLocations and SHA1 hashes that the file has had.
In our case the hash of the bat file *VeryCoolScript.cmd* is used as
input. The first information that has been returned is related to the
name, location and hashes (only if the filename is used as input
multiple can exist). In this case, the file has two names
*VeryCoolScript.cmd* & VeryCoolScript.txt\*. But what is more
interesting are all the subprocesses that this file has created, which
way more than first anticipated based on the alert. It seems that the
adversary has automated various discovery activities within this script.
This proved that executing KQL for the enrichment of your alerts can be
very useful! The query will return the subprocesses of any file, in this
case, we used a cmd file, but any file extension will work.
![Processes created by file](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/FileProcesses2.png"
data-srcset="/images/kql-incident-response/FileProcesses2.png, /images/kql-incident-response/FileProcesses2.png 1.5x, /images/kql-incident-response/FileProcesses2.png 2x"
data-sizes="auto"}
> **KQL Query** [Find all the processes a file has created and the
> associated FileNames, FileLocations and SHA1 hashes that the file has
> had.](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20AllProcessesCreatedByMaliciousFile.md){target="_blank"
> rel="noopener noreffer"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
KQL CAFE
:::
::: details-content
::: admonition-content
Last year I was invited to do a session [\@KQL
Cafe](https://kqlcafe.github.io/website/){target="_blank"
rel="noopener noreffer"} and I have discussed some of the queries
mentioned in this blog. If you are interested you can use this
[link](https://www.youtube.com/watch?v=XB_VXKCS0Kk){target="_blank"
rel="noopener noreffer"} to view it (my part starts around minute 13.)
:::
:::
:::
# Registry Run Key Forensics
Registry Run Keys can be abused by adversaries to get persistence, as
mentioned in
[T1547.001](https://attack.mitre.org/techniques/T1547/001/){target="_blank"
rel="noopener noreffer"}. The incident that was triggered also generated
a *Anomaly detected in ASEP registry* alert. The Defender For Endpoint
description of this alert is: A process registered a suspicious command
or file in ASEP registry key, where it will be run after a reboot. *An
attacker may place a malicious piece of software in such a location to
prevent losing access if a machine is turned off.*
![Anomaly detected in ASEP registry
alert](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/ASEPRegistry.png"
data-srcset="/images/kql-incident-response/ASEPRegistry.png, /images/kql-incident-response/ASEPRegistry.png 1.5x, /images/kql-incident-response/ASEPRegistry.png 2x"
data-sizes="auto"}
To investigate this a query is used that first defines all the registry
run keys to search on. To optimize the results, a search can be
performed on multiple devices at once. Once we hit shift + enter we get
the results, this includes all run key changes from the compromised
devices as seen below. For each device an entry is made, this will
return the count of runkey changes and by clicking on the returned row
all details are shared. Now it is up to you again to investigate if
those new values are suspicious or benign.
![KQL Registry Run Key Forensics](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/ASEPResult.png"
data-srcset="/images/kql-incident-response/ASEPResult.png, /images/kql-incident-response/ASEPResult.png 1.5x, /images/kql-incident-response/ASEPResult.png 2x"
data-sizes="auto"}
> **KQL Query** [Registry Run Key
> Forensics](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20Registry-Run-Keys-Forensics.md){target="_blank"
> rel="noopener noreffer"}
# More IR Queries
Only a subsection of the available KQL queries has been shared in this
blog, but there are many more available for a variety of different
incidents. All the other queries are shared in the GitHub repository in
the DFIR category: [DFIR
Queries](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/tree/main/DFIR){target="_blank"
rel="noopener noreffer"}. Some ideas of queries that are listed:
-   [Show the last 100 Powershell executions from a compromised
    device](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20MostRecentPowershellExecutionsByCompromisedDevice.md){target="_blank"
    rel="noopener noreffer"}
-   [Find all the executed LDAP queries from a compromised
    device](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDI%20-%20LDAPQueriesByCompromisedDevice.md){target="_blank"
    rel="noopener noreffer"}
-   [Office activities performed by a compromised
    account](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/OfficeActivity%20-%20OfficeActivitiesCompromisedAccount.md){target="_blank"
    rel="noopener noreffer"}
-   [Show all successful SMB connections of a compromised
    device](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20Open-SMB-Connections-By-Compromised-Device.md){target="_blank"
    rel="noopener noreffer"}
I hope that this blog has shown the importance of preparation in order
to effectively and efficiently respond to security incidents. In the
case of a critical incident, you will most often not have the time to
create such queries to quickly search or list malicious activities, the
recommendation would be to prepare KQL queries for common response
steps. From my perpective, the queries can add some quick value to an
incident by adding context, details and combining data.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Automation?
:::
::: details-content
::: admonition-content
Yes! You can automate the DFIR queries with Playbooks/logic apps and
automation triggers in Sentinel. I do recommend the following blog if
you are interested in automating (a part of) this:
Defender For Endpoint Automation:
[Link](https://jeffreyappel.nl/microsoft-defender-for-endpoint-series-automation-via-logic-apps-and-sentinel-part9/){target="_blank"
rel="noopener noreffer"}
If you want to query data in Sentinel you can replace the *Advanced
Hunting* action with the *Run query and list results* from the Azure
Monitor connector.
:::
:::
:::
# MDE Settings
If you have Defender For Endpoint the Automated investigation and
remediation (AIR) capabilities are configurable (Microsoft Defender for
Business is not configurable). Those settings can save you from a nasty
breach if they are properly configured. Automatic attack disruption in
Microsoft 365 Defender does similar work for identities and devices and
is also configurable.
What settings do I recommend? Aim for full automation if possible, if
not possible put all your DeviceGroups that contain cattle in full
automation and pets in semi-automation. Full automation means that
remediation actions are taken automatically on artefacts determined to
be malicious, this is also the default in Defender For Business.
Semi-automation requires manual approval before action is taken.
Especially if you do not have the manpower to respond to cyber attacks
24/7 it is recommended to fully automate the remediation process. If you
cannot perform this, build a group that is excluded and automate all
other devices. A similar approach should be taken for identities to put
most accounts in automation, but exclude some if needed (or if it is a
break glass account).
Documentation on Automation levels in automated investigation and
remediation capabilities:
[Link](https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/automation-levels?view=o365-worldwide){target="_blank"
rel="noopener noreffer"} Documenation on Automatic attack disruption in
Microsoft 365 Defender:
[Link](https://learn.microsoft.com/en-us/microsoft-365/security/defender/automatic-attack-disruption?view=o365-worldwide){target="_blank"
rel="noopener noreffer"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 2: What about the other
    logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 3: Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-09-29
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/kql-incident-response/"
data-title="Incident Response Part 1: IR on Microsoft Security Incidents (KQL edition)"
via="BertJanCyber"
hashtags="KQL"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/kql-incident-response/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/kql-incident-response/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/kql-incident-response/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[Threat Hunting: Encoded
PowerShell](/posts/hunting-encoded-powershell/ "Threat Hunting: Encoded PowerShell"){.prev
rel="prev"} [Incident Response Part 2: What about the other
logs?](/posts/kql-incident-response-everything-else/ "Incident Response Part 2: What about the other logs?"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::