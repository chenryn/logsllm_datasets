# Title: New Results for Timing-Based Attestation

## Authors
Xeno Kovah, Corey Kallenberg, Chris Weathers, Amy Herzog, Matthew Albin, John Butterworth  
The MITRE Corporation  
{xkovah, ckallenberg, cweathers, aherzog, malbin, butterworth}@mitre.org  
Bedford, MA, USA

## Abstract
In this paper, we present a comprehensive timing-based attestation system suitable for typical enterprise use, along with performance evidence. This system, similar to Pioneer [20] but built with relaxed assumptions, successfully detects attacks on code integrity over 10 links of an enterprise network, despite an average of just 1.7% time overhead for the attacker. We also introduce the first implementation and evaluation of a Trusted Platform Module (TPM) hardware timing-based attestation protocol. Our experiments demonstrate the effectiveness of our timing-based system, providing further evidence of its practicality in real-world settings.

While system measurement is a valuable goal, and timing-based attestation systems can provide measurements as trustworthy as hardware-based attestation systems, we highlight that Time Of Check, Time Of Use (TOCTOU) attacks have not received adequate attention in the literature. To address this, we identify the three conditions required to execute such an attack and discuss how past attacks and defenses relate to these conditions.

**Keywords:** remote attestation, software-based attestation, timing-based attestation, trusted platform module, TOCTOU attack

## I. Introduction
Despite the availability of numerous commercial security products, most do not leverage existing academic work on remote attestation. Instead, they rely on access control mechanisms like file permissions, sandboxes, user-kernel separation, or OS-hypervisor separation. The ineffectiveness of these approaches is evident from the long history of successful techniques for bypassing access controls.

To ensure security software continues to function correctly even in the presence of an equally-privileged attacker, new mechanisms are needed. Previous work on timing-based attestation [20, 17, 16] attempted to address this need but lacked experimental data for typical enterprise systems. In this paper, we present a comprehensive view of a timing-based attestation system designed for typical enterprise use, along with experimental evidence of its performance.

Our system, implemented within the Checkmate tool suite, offers several contributions:
1. A functional timing-based attestation system in typical enterprise environments.
2. Performance comparable to previous research [20], despite relaxed assumptions and additional checks.
3. Compatibility with open-source network drivers, Address Space Layout Randomization (ASLR)-like kernel module loading in Windows XP, and real ASLR in Windows 7.
4. Effective operation over 10 network links (6 switches, 3 routers).
5. Implementation of a self-check timing measurement based on the TPMâ€™s tickstamp counter.

Section III details the system, and Section IV discusses the experimental setup and results, demonstrating the effectiveness of timing-based attestation for code integrity in an enterprise setting. Throughout the paper, we address potential attacks on timing-based attestation and the often misunderstood problem of TOCTOU attacks against code integrity.

Based on our experimental data and early deployment experience, we believe that timing-based attestation systems like Checkmate can provide strong code integrity guarantees today and, with further work, strong control flow integrity guarantees.

## II. Related Work
This work aims to determine whether timing-based attestation systems, such as Pioneer [20] and PioneerNG [17], behave as described when adapted to different environments. Pioneer runs on x86-64 Linux and is implemented by inserting attestation code into an open-source network driver kernel module. PioneerNG operates in System Management Mode (SMM), uses 16-bit x86 assembly, and attests via USB. Our implementation, however, runs on 32-bit Windows XP and leverages the existing network driver abstraction layer. We did not implement DMA protection, as it is one of many TOCTOU attacks requiring more generic countermeasures, discussed in Section V.

Timing-based attestation has also been applied to embedded systems, starting with SWATT [21] and expanding to areas like verifying peripherals [10, 9], wireless sensors [18, 23, 4], and SCADA systems [22].

Recent work by Jakobsson & Johansson [7] demonstrates the practicality of software-based attestation on mobile phones. However, their memory printing technique would be impractical on desktops due to increased RAM, leading to computation times of tens of seconds. We aim to keep attestation runtime under 100ms to avoid noticeable delays for users.

For attacks on timing-based attestation, Castelluccia et al. [3] describe a control flow-based attack using return-oriented programming and a compression attack. Wurster et al. [27] and Shankar et al. [24] suggest attacks with TOCTOU characteristics, changing virtual to physical mappings during measurement. Yan et al. [28] propose an attack exploiting pipeline parallelism and suggest introducing backward data dependency within checksum loops as a countermeasure. They also propose a TOCTOU attack based on control flow integrity violation.

## III. Self-Checking Implementation
### A. Networking
Checkmate Attestation (CMA) is implemented as a kernel module for 32-bit Windows XP/7 (with a 64-bit Windows 7 port underway). It is built as an NDIS version 5.1 Intermediate Driver (IM), sometimes called a network filter driver. Figure 1 illustrates the NDIS architecture, showing how CMA can intercept and process network traffic without being NIC-specific, an important improvement for practicality.

### B. Self-Check Assembly
Our attestation system, part of the Checkmate project, performs both attestation and Windows kernel integrity measurement. We refer to the attestation system as CMA and the measurement system as CMM. This paper focuses on CMA, while CMM is described in a separate submission.

CMA consists of a server/verifier that requests attestations based on a nonce and a client that responds by computing a self-checksum. The server/client use the Pioneer Protocol [20]. If an attacker modifies any checked memory, the checksum will be incorrect, and the verifier will detect the system as untrustworthy. A sophisticated attacker can alter the checksum computation, but the self-checksum function is designed to make forged checksums take longer to compute.

The self-check function incorporates multiple pieces of system state:
1. **EIP DST**: Indicates the expected memory range of the next block.
2. **EIP SRC**: Indicates the location of the calling block, preventing precomputation.
3. **DP**: Ensures the memory being read exists in the expected range.
4. ***DP**: Reads 4 bytes of data from memory, ensuring the final checksum changes with any code integrity attacks.
5. **PRN**: A pseudo-random number derived from the server's nonce.
6. **EFLAGS**: Ensures any flag changes must be fixed by the attacker.
7. **DR7**: Disables hardware breakpoints, making it harder for attackers to use them.
8. **PARENT RET & GRANDPARENT RET**: Pseudo-randomly includes return addresses to prevent hardcoding.

Table I shows the structure of our self-check function, which includes eight block variants. The use of a minichecksum, borrowed from PioneerNG, optimizes cache behavior and ensures the primary checksum reads only within the self-check function's memory range.

The checksum is treated as an array of six 4-byte values stored on the stack below local variables. This design prevents precomputation and requires recomputation after each reboot, making TOCTOU and proxy attacks more effective.

Table II and Table III detail the overall structure and sub-blocks of our self-check function, maintaining a strongly ordered checksum property as described in Pioneer.

---

This optimized text provides a clearer, more professional, and coherent presentation of the research, making it easier to understand and follow.