### Controllable Data via an Out-of-Band Channel

- **Web Mail Application**: Processes and renders email messages received via SMTP.
- **Publishing Application**: Contains a function to retrieve content via HTTP from another server.
- **Intrusion Detection Application**: Gathers data using a network sniffer and presents it through a web application interface.
- **API-Enabled Applications**: Any application that provides an API for non-browser user agents (e.g., cell phone apps) and shares the processed data with the primary web application.

### Identifying Server-Side Technologies

#### Banner Grabbing
Web servers often disclose detailed version information about the software and its components. For example, the `Server` header in an HTTP response can reveal extensive details:

```
Server: Apache/1.3.31 (Unix) mod_gzip/1.3.26.1a mod_auth_passthrough/1.8 mod_log_bytes/1.2 mod_bwlimited/1.4 PHP/4.3.9 FrontPage/5.0.2.2634a mod_ssl/2.8.20 OpenSSL/0.9.7a
```

Other locations where version information may be disclosed include:
- HTML page templates
- Custom HTTP headers
- URL query string parameters

#### HTTP Fingerprinting
While administrators can configure or falsify the `Server` header, other aspects of the web server's behavior can still be used to determine the software in use. The HTTP specification includes many optional and discretionary elements, and many web servers deviate from or extend the specification. Tools like `Httprecon` can perform various tests to fingerprint a web server's software.

#### File Extensions
File extensions in URLs can indicate the platform or programming language used:
- `.asp`: Microsoft Active Server Pages
- `.aspx`: Microsoft ASP.NET
- `.jsp`: Java Server Pages
- `.cfm`: ColdFusion
- `.php`: PHP
- `.d2w`: WebSphere
- `.pl`: Perl
- `.py`: Python
- `.dll`: Compiled native code (C or C++)
- `.nsf`, `.ntf`: Lotus Domino

Even if an application does not use a specific file extension, you can verify if the technology is supported on the server by requesting a non-existent file. For example, requesting a non-existent `.aspx` file on a server with ASP.NET installed will return a customized error page generated by the ASP.NET framework.

#### Directory Names
Subdirectory names can also indicate the presence of associated technologies:
- `servlet`: Java servlets
- `pls`: Oracle Application Server PL/SQL gateway
- `cfdocs`, `cfide`: ColdFusion
- `SilverStream`: SilverStream web server
- `WebObjects`, `{function}.woa`: Apple WebObjects
- `rails`: Ruby on Rails

#### Session Tokens
Session token names can provide information about the underlying technology:
- `JSESSIONID`: Java Platform
- `ASPSESSIONID`: Microsoft IIS server
- `ASP.NET_SessionId`: Microsoft ASP.NET
- `CFID/CFTOKEN`: ColdFusion
- `PHPSESSID`: PHP

#### Third-Party Code Components
Many web applications use third-party code components for common functionalities such as shopping carts, login mechanisms, and message boards. These components may have known vulnerabilities. By inspecting other applications using the same components, you can identify additional features and potential vulnerabilities.

### Hack Steps

1. **Identify Entry Points**: Locate all entry points for user input, including URLs, query string parameters, POST data, cookies, and HTTP headers.
2. **Examine Query String Format**: Understand how parameters are transmitted via the URL.
3. **Identify Out-of-Band Channels**: Determine any channels through which user-controllable or third-party data is introduced into the application.
4. **View HTTP Server Banner**: Note that different areas of the application may use different back-end components, resulting in different `Server` headers.
5. **Check for Software Identifiers**: Look for identifiers in custom HTTP headers and HTML source code comments.
6. **Run Fingerprinting Tool**: Use tools like `httprint` to fingerprint the web server.
7. **Research Vulnerabilities**: If detailed information about the web server and components is obtained, research for known vulnerabilities.
8. **Review URLs**: Identify interesting file extensions, directories, or subsequences that may provide clues about the technologies in use.
9. **Review Session Tokens**: Identify the technologies being used based on session token names.
10. **Use Lists and Google**: Establish which technologies may be in use and discover other websites and applications employing the same technologies.
11. **Search for Unusual Elements**: Use Google to find other applications using the same components and review them for additional functionality and parameters.
12. **Analyze Components**: Download and install the component if possible to fully understand its capabilities and discover any vulnerabilities.

### Identifying Server-Side Functionality

By observing the application's behavior, you can infer a lot about its server-side functionality and structure.

#### Dissecting Requests
Consider the following URL for a search function:
```
https://wahh-app.com/calendar.jsp?name=new%20applicants&isExpired=0&startDate=22%2F09%2F2010&endDate=22%2F03%2F2011&OrderBy=name
```
- **File Extension**: `.jsp` indicates Java Server Pages.
- **Parameters**:
  - `name`: Search term.
  - `isExpired`: Boolean flag for expired content.
  - `StartDate` and `EndDate`: Date range.
  - `OrderBy`: Suggests a back-end database with potential SQL injection vulnerability.

Another example for a content management system:
```
https://wahh-app.com/workbench.aspx?template=NewBranch.tpl&loc=/default&ver=2.31&edit=false
```
- **File Extension**: `.aspx` indicates ASP.NET.
- **Parameters**:
  - `template`: Likely a filename.
  - `loc`: Likely a directory.
  - `edit`: Boolean flag for edit mode.
  - `ver`: Version number.

Finally, a request to submit a question to administrators:
```
POST /feedback.php HTTP/1.1
Host: wahh-app.com
Content-Length: 389
from=PI:EMAIL&to=PI:EMAIL&subject=Problem+logging+in&message=Please+help...
```
- **File Extension**: `.php` indicates PHP.
- **Parameters**:
  - `from`, `to`, `subject`, `message`: User-controllable fields, potentially vulnerable to email header injection.

#### Extrapolating Application Behavior
Applications often behave consistently across their functionalities. You can draw conclusions about one area and apply them to others. For example, global input validation checks, custom obfuscation schemes, and error handling can provide insights into the application's behavior.

### Hack Steps

1. **Review Parameters**: Examine the names and values of all parameters in the context of the functionality they support.
2. **Think Like a Programmer**: Imagine the server-side mechanisms and technologies likely used to implement the observed behavior.
3. **Draw Conclusions**: Extrapolate findings from one area to another, considering consistent behaviors and shared components.

By following these steps, you can effectively map and understand the application's server-side technologies and functionalities.