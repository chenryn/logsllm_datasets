title:Mitigating Active Attacks Towards Client Networks Using the Bitmap
Filter
author:Chun-Ying Huang and
Kuan-Ta Chen and
Chin-Laung Lei
Mitigating Active Attacks Towards Client Networks Using the Bitmap Filter∗
Chun-Ying Huang, Kuan-Ta Chen, and Chin-Laung Lei
No.1, Sec. 4, Roosevelt Road, Taipei, Taiwan 106
{huangant,jethro}@fractal.ee.ntu.edu.tw, PI:EMAIL
National Taiwan University
Department of Electrical Engineering
Abstract
With the emergence of active worms, the targets of at-
tacks have been moved from well-known Internet servers to
generic Internet hosts, and since the rate at which patches
can be applied is always much slower than the spread of a
worm, an Internet worm can usually attack or infect mil-
lions of hosts in a short time.
It is difﬁcult to eliminate
Internet attacks globally; thus, protecting client networks
from being attacked or infected is a relatively critical issue.
In this paper, we propose a method that protects client
networks from being attacked by people who try to scan, at-
tack, or infect hosts in local networks via unpatched vulner-
abilities. Based on the symmetry of network trafﬁc in both
temporal and spatial domains, a bitmap ﬁlter is installed at
the entry point of a client network to ﬁlter out possible at-
tack trafﬁc. Our evaluation shows that with a small amount
of memory (less than 1 megabyte), more than 95% of attack
trafﬁc can be ﬁltered out in a small- or medium-scale client
network.
1 Introduction
An active attack is behavior that deliberately scans,
probes, or intrudes on certain hosts or networks with mali-
cious intent. Due to the popularity of Internet worms, there
is always active attack trafﬁc on the Internet. Attacks usu-
ally adopt a random IP scanning technique and infect hosts
through one or more known vulnerabilities. Thus, com-
pared with traditional Internet attacks, the victims are not
limited to well-known Internet servers. Instead, anonymous
client hosts have become targets for attackers. As client ma-
chines now have wider bandwidth and more computation
power, recent studies [6, 13, 21] have shown that an active
∗This work was supported in part by the Ministry of Economic Affairs
under the Grants 94-EC-17-A-02-S1-049, and by the Taiwan Information
Security Center (TWISC), National Science Council under the Grants No.
NSC 94-3114-P-001-001Y and NSC 94-3114-P-011-001.
worm can efﬁciently spread among millions of hosts in a
short period of time. Even if a network does not have vul-
nerable hosts, a huge number of random scanning packets
from infected hosts can occupy precious network resources.
Furthermore, vulnerable hosts may be infected by malicious
intruders and then form a larger attack group.
A simple way to prevent a network being attacked or
infected is to limit illegal trafﬁc entering the network by
installing a bandwidth throttling mechanism and/or an in-
trusion prevention mechanism at the entry point of the net-
work. Since the bottleneck bandwidth usually lies on the
link between the client network and the ISP, these mecha-
nisms must be installed at the ISP side, not the client net-
work side in order to better utilize the bottleneck bandwidth.
However, there are three major problems with a band-
width throttling mechanism. First, since attack packets may
use spoofed source IP addresses, a throttling mechanism
may be not able to effectively identify attack trafﬁc through
aggregates. Second, even if an aggregate can be identiﬁed,
only rate-limiting an aggregate at the edge may completely
shutdown all connections depending on the aggregate. Fi-
nally, an attacker may not send a large volume of trafﬁc,
especially in the early stages of the attack so that the throt-
tling mechanism would not be activated.
Intrusion prevention mechanisms also have drawbacks.
In general, such solutions can be classiﬁed as either
anomaly or misuse mechanisms. An anomaly solution mon-
itors current network behavior and compares it with normal
behavior. Any deviation from normal activity is treated as
suspicious and possibly indicative of a hitherto unknown
attack. However, this approach can generate both false
positives and false negatives so that normal behavior may
be treated as an attack or vice versa.
In contrast, a mis-
use solution collects the signatures of well-known attacks
and checks if any trafﬁc matches patterns in the signature
database. Although these solutions are more precise than
anomaly mechanisms, they cannot detect unknown attacks.
Given the shortcomings of the above mechanisms, we
must seek a better solution to make client networks robust
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
against malicious attacks. A good candidate may be to in-
stall a stateful packet inspection (SPI) ﬁlter at the entry
point of a client network to maintain the per-ﬂow state of all
outgoing connections. Thus, an intentionally active probe
or intrusion that the packet ﬁlter has not encountered before
would be dropped. However, installing such a mechanism at
the ISP side incurs a high computational cost as the required
storage space and computation complexity depends linearly
on the number of concurrent active connections, which may
be in the order of tens of thousands or even millions. Thus,
we need a more lightweight and efﬁcient solution.
In this paper, we propose a bitmap ﬁlter mechanism that
mitigates active attacks, either DoS-like bandwidth attacks
or active worm-like intrusions. The effectiveness of the
bitmap ﬁlter is similar to that of an SPI ﬁlter, but it requires
much less storage space and computational resources.
The remainder of this paper is organized as follows. In
Section 2, we review related works. In Section 3, we dis-
cuss the usage model, client network trafﬁc characteristics,
and the detailed design of the bitmap ﬁlter.
In Section 4
and Section 5, respectively, we evaluate the performance of
the bitmap ﬁlter and discuss issues related to the proposed
solution in detail. Finally, in Section 6, we present our con-
clusions.
2 Related Works
A great deal of research effort has been devoted to de-
velop defenses against malicious attacks. While Internet
users cannot tolerate high false positive rates, most imple-
mentations [4,7,16] of intrusion detection or prevention sys-
tems are misuse (also known as rule-based) mechanisms.
The major differences among these implementations are the
database lookup engine, the backend database, and the sup-
port service. Research in this area focuses on improving the
performance of signature lookup, reducing the number of
false positives and false negatives, and automatic signature
generation [18]. The major problem with rule-based intru-
sion/prevention systems is that they cannot detect unknown
attacks. Since generating and propagating new signatures
is always slower than the spread of new types of attack, a
network will be at risk until a patch or a signature for a new
attack is released to the public.
Distributed denial of service (DDoS) counter-attack
mechanisms can also be considered as solutions. However,
they may not be suitable for attacks against a client net-
work. An ingress ﬁltering approach [8] is good for ﬁlter-
ing outgoing packets with spoofed source addresses, but it
may be not suitable for ﬁltering incoming packets. Trace-
back mechanisms [14, 15], overlay networks [10, 17], and
capability-based packet ﬁltering [1,20] solutions are expen-
sive computationally for a client network, since they require
global deployment, cross-ISP cooperation, or modiﬁcation
of existing network architecture and usage models.
Bandwidth throttling mechanisms, such as those pro-
posed in [5, 9, 11], adopt quality-of-service (QoS) mecha-
nisms to rate-limit incoming packets. Before doing so, how-
ever, these mechanisms have to know that an attack is in
progress, identify aggregates, and then apply rate-limiters
to the identiﬁed aggregates. An aggregate is a common
characteristic extracted from packets. For example, all UDP
packets with a destination port of 445 is one type of aggre-
gates.
However, there are a number of problems when deploy-
ing bandwidth throttling mechanisms in client networks.
First, if attack packets sent to different clients in the same
network contain random source IP addresses and destina-
tion ports, the aggregate is difﬁcult to identify. In addition,
if all trafﬁc for a given port is rate-limited, normal trafﬁc
sent to the same destination port are also limited. This may
result in denial of service for certain applications. Finally,
if an attack is launched at a slow rate, the bandwidth throt-
tling mechanism may not be triggered. The study in [5]
concludes that a bandwidth throttling mechanism is suitable
for a network that holds the following conditions: 1) The
target to be attacked is clear; 2) there are several up-links
for the network and attacks only come from some of these
up-links; and 3) it would be better if the deployment of rate-
limiters is closer to attackers. Although it may be easy for a
server network to meet these conditions, it may be difﬁcult
for a client network, since a client network usually holds
only one or two up-links, the attack target is often a group
of random hosts, and the rate-limiters can only be installed
close to the client network.
Compared to all the above solutions, we believe that an
SPI-based mechanism is a better choice for client networks.
However, since an SPI mechanism has to keep all per-ﬂow
states, adopting it incurs high cost for an ISP. Take a pop-
ular SPI implementation in the Linux open-source operat-
ing system [19] as an example. The required storage space
grows linearly according to the number of kept ﬂows. Be-
sides, the data structures used to maintain these states are
basically link-lists with an indexed hash table that reduces
the length of a link-list. Obviously, both the storage and
computation complexities are O(n), which is not affordable
for a larger ISP containing several client networks.
3 The Bitmap Filter
By deﬁnition, a client network should have only client
hosts, such as a business enterprise customer, a group of
DSL users, a wireless network, or a building on a cam-
pus. Usually client hosts only initiate requests, and sel-
dom receive requests from the Internet. The bitmap ﬁlter
is a lightweight and efﬁcient method designed to mitigate
active attacks, including bandwidth-attacks, intrusions, and
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
worms. In this section, we introduce the usage model, the
client trafﬁc characteristics, and the detailed design of our
solution.
3.1 The Usage Model
Bitmap ﬁlters should be installed in an ISP network. As
shown in Figure 1, an ISP usually has edge routers (black
nodes) and core routers (white nodes). The bitmap ﬁlter can
be installed on an edge router directly connected to a client
network or a core router, which is an aggregate of two or
more client networks. In Figure 1, the nodes with an out-
lined circle are possible locations to install the bitmap ﬁlter.
Actually, the bitmap ﬁlter can be installed at any location
through which trafﬁc from client networks must pass.
o r k
C lie n t n et w
s
r
u t e
o
e   r
g
d
E
Client network
Core routers
ISP 
network
Peer ISP
Client network
Possible 
Installations
Figure 1. An ISP network with bitmap ﬁlters.
3.2 The Client Network Traﬃc Charac-
teristics
The design of the bitmap ﬁlter leverages certain client
network trafﬁc characteristics to improve the ﬁlter perfor-
mance. Thus, before constructing our solution, we make an
observation about several client networks. A 6-hour TCP
and UDP packet trace was collected on a core router be-
tween 10AM and 4PM on a weekday. The router aggregates
the up-links of six class C client networks on a campus.
In the 6-hour trace, 96.25% were TCP packets and 3.75%
were UDP packets. The average packet rate was 24.63K per
second, the average bandwidth utilization was 138.55Mbps,
and the average packet size was 720 bytes. First, we exam-
ine the connection lifetime of TCP connections in the trace
data. The lifetime of a connection is counted from the ap-
pearance of the ﬁrst TCP-SYN packet to the appearance of
a TCP-FIN or TCP-RST packet. The connection lifetime
varies widely from a minimum of several milliseconds to
a maximum of six hours, as shown in Figure 2-a (data ex-
ceeding the 12000th second are removed, since there are
no more peaks). However, the lifetime of most connec-
tions is short. The statistics show that 90% of connections
are under 76 seconds, 95% are under 6 minutes, and less
than one percent last for more than 515 seconds. Although
the lifetime for each connection varies greatly, an interest-
ing phenomenon is that the out-in packet delay is always
short. Before introducing out-in packet delay, we deﬁne
two types of packet. An outgoing packet is a packet sent
from a client network, while incoming packet is a packet re-
ceived by a client network. A packet always contains its ad-
dress information in a tuple τ of {source-address, source-
port, destination-address, destination-port}. Thus, for
an outgoing packet with an address tuple of τout =
{saddr , sport, daddr , dport}, the address tuple of its cor-
responding incoming packet should be in an inverse form,
that is τin = {daddr , dport, saddr , sport}. Note that for
an outgoing packet and its corresponding incoming packet,
τ−1
in , which is the inverse of the tuple τin, and τout should
be the same. Based on these deﬁnitions, the out-in packet
delay is then obtained as follows:
1. On receipt of an outgoing packet with an address tu-
ple τout = {saddr , sport, daddr , dport} on an edge
router at timestamp t, the router checks if the tuple has
been recorded previously. If the tuple is new, it is as-
sociated with the timestamp t and stored in the edge
router’s memory. Otherwise, the existing tuple is up-
dated with the timestamp t.
2. On receipt of an incoming packet with an address tu-
ple τin = {daddr , dport, saddr , sport} at timestamp
t, the edge router checks if the inverse tuple τ−1
in has
been recorded before. If it already exists, the times-
tamp associated the inverse tuple τ−1
in is read as t0 and
the out-in packet delay is computed as t − t0.
3. To avoid the problem of port-reuse, which affects the
accuracy of computing the out-in packet delay, an
expiry timer Te deletes existing address tuples when
t − t0 > Te.
The out-in packet delay may be caused by network propa-
gation delay, processing delay, queueing delay, or mecha-
nisms like delayed-ACK [3]. However, they should not be
too long. The statistics of out-in packet delay are shown in
Figure 2-b. Since we use a large timer, Te = 600 seconds,
to handle expired address tuples, in Figure 2-b, the effect of
port-reuse can be observed roughly at the peaks. Although
the port-reuse timer varies in different implementations, we
ﬁnd that most of them are in multiples of 60 seconds. The
statistics also show that most out-in packet delays are very
short. In Figure 2-c, 99% of out-in packet delays are under
2.8 seconds. The result also implies that the most Internet
trafﬁc is bi-directional.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
a. Connection Lifetime
319
99% connections
are shorter than
515 seconds
76
515
0
2000
4000
6000
8000 10000
Lifetime (in seconds)
b. Out−In Packet Delay
60
30
Peaks are interleaved with
120
intervals of roughly 30 or 60 seconds
100
160
220
290
350
420
480
540
150
190
0
100
200
300
400
500
600
Delay (in seconds)
c. Out−In Packet Delay (CDF)
99% out−in packet delays
are shorter than
2.8 seconds
95% out−in packet delays
are shorter than
0.8 seconds
s
n
o
i
t
c
e
n
n
o
c
f
o
r
e
b
m
u
N
t
n
u
o
C
t
e
k
c
a
P
F
D
C
6
0
+
e
1
4
0
+
e
1
2
0
+
e
1
0
0
+