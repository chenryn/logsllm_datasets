1.  添加包含`nginx`图表版本的稳定 GitHub Pages 存储库。
2.  将`nginx`图部署到开发环境中。
3.  将`nginx`图表部署到**质量保证** ( **质量保证**)环境中。
4.  等待用户批准管道以继续生产部署。
5.  将`nginx`图表部署到生产环境中。
光盘工作流程包含在先前为配置项管道创建的文件的单独`Jenkinsfile`文件中。在我们创建`Jenkinsfile`文件之前，让我们更新 Minikube 和 Jenkins 环境，以便我们可以执行光盘过程。
## 更新环境
开发、质量保证和生产环境将由本地 Minikube 集群中的不同名称空间建模。虽然我们通常会阻止您允许非生产(开发和质量保证)和生产环境在同一个集群中共存，但我们将这三个环境放在一起，只是为了演示我们的示例光盘过程。
创建`dev`、`qa`和`prod`名称空间来表示这些环境中的每一个:
```
$ kubectl create ns dev
$ kubectl create ns qa
$ kubectl create ns prod
```
您还应该删除您在上一节中创建的`chapter7`分支。应该删除这个分支，因为当创建新的光盘管道时，Jenkins 将尝试对您的存储库的每个分支运行它。为了简单和避免资源限制，我们建议只推进主分支。
使用以下命令从存储库中删除`chapter7`分支:
```
$ git push -d origin chapter7
$ git branch -D chapter7
```
最后，您需要升级您的 Jenkins 实例来设置一个名为`GITHUB_PAGES_SITE_URL`的环境变量。这是您的图表存储库在 GitHub Pages 中的位置，它具有[https://$ GitHub _ USERNAME . GitHub . io/Learn-Helm-Chart-Repository/stable](https://$GITHUB_USERNAME.github.io/Learn-Helm-Chart-Repository/stable)格式。环境变量在光盘管道中被引用，以添加带有`helm repo add`的`stable` GitHub 页面图表存储库。要添加此变量，您可以重用以前使用`--reuse-values`标志应用的值，同时也可以使用`--set`指定一个名为`githubPagesSiteUrl`的附加值。
执行以下命令升级您的 Jenkins 实例:
```
$ helm upgrade jenkins codecentric/jenkins \
  -n chapter7 --version 1.5.1 \
  --reuse-values --set githubPagesSiteUrl=$GITHUB_PAGES_SITE_URL
```
此升级将导致您的詹金斯实例重新启动。您可以通过在`chapter7`命名空间的 Pod 上运行一个手表来等待詹金斯 Pod 准备就绪:
```
$ kubectl get Pods -n chapter7 -w
```
当詹金斯 Pod 指示`1/1`容器准备就绪时，它可用。
一旦 Jenkins 准备好了，使用上一节中的相同 URL 访问 Jenkins 实例。你应该再找一份工作，叫`Deploy NGINX Chart`，代表 CD 流水线:
![Figure 7.14 – The Jenkins front page after upgrading the Jenkins release ](img/Figure_7.14.jpg)
图 7.14–升级 Jenkins 版本后的 Jenkins 首页
当 GITHUB_PAGES_SITE_URL 设置为时，在要创建的`values.yaml`文件中配置该作业(帮助改进本章的流程)。
请注意，与配置项管道一样，光盘管道也是自动启动的，因为它是第一次被检测到。在我们查看这个管道的日志之前，让我们检查一下组成光盘管道的过程。
## 了解管道
在这一节中，我们将仅仅回顾管道的关键区域，但是完整的光盘管道已经写好，位于[https://github . com/PacktPublishing/-Learn-Helm/blob/master/nginx-CD/Jenkinsfile](https://github.com/PacktPublishing/-Learn-Helm/blob/master/nginx-cd/Jenkinsfile)。
与之前的 CI 管道一样，为了测试和发布 Helm 图表，CD 管道从动态创建一个新的 Jenkins 代理作为运行图表测试映像的 Kubernetes Pod 开始:
```
agent { label 'chart-testing-agent' }
```
虽然我们没有在这个管道中使用`ct`工具，但是图表测试映像包含执行`nginx`部署所需的 Helm CLI，因此该映像足以满足这个示例 CD 管道。但是，也可以创建一个较小的映像来删除未使用的工具。
一旦创建了代理，Jenkins 会隐式克隆您的分叉，就像它之前在 CI 管道中所做的那样。
管道的第一个明确定义的阶段称为`Setup`，它将托管在 GitHub Pages 中的`stable`图表存储库添加到 Jenkins 代理上的本地 Helm 客户端:
```
sh "helm repo add learnhelm ${env.GITHUB_PAGES_SITE_URL}"
```
一旦添加了存储库，管道就可以开始将 NGINX 部署到不同的环境中。下一阶段称为`Deploy to Dev`，将 NGINX 图表部署到您的`dev`命名空间:
```
dir('nginx-cd') {
  sh "helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values dev/values.yaml -n dev --wait"
}
```
关于这个阶段，你可能注意到的第一个细节是`dir('nginx-cd')`结束。这是`Jenkinsfile`语法，用于设置包含在其中的命令的工作目录。我们将很快详细解释`nginx-cd`文件夹。
您还可以看到，该阶段使用提供的`--install`标志运行`helm upgrade`命令。`helm upgrade`通常针对已经存在的版本执行，如果试图针对不存在的版本执行，则会失败。然而，如果一个版本还不存在，则`--install`标志将安装图表。如果某个版本已经存在，则`helm upgrade`命令升级该版本。`--install`标志便于用于自动化过程，如本节中描述的光盘流水线，因为它可以防止您需要执行检查来确定版本的存在。
关于这个`helm upgrade`命令的另一个有趣的细节是它使用了两次`--values`标志——一次针对一个名为`common-values.yaml`的文件，一次针对一个名为`dev/values.yaml`的文件。这两个文件都位于`nginx-cd`文件夹中。文件夹中有以下内容:
```
nginx-cd/
  dev/
    values.yaml
  qa/
    values.yaml
  prod/
    values.yaml
  common-values.yaml
  Jenkinsfile
```
当将应用部署到不同的环境时，您可能需要稍微修改应用的配置，以允许它与环境中的其他服务集成。`dev`、`qa`和`prod`文件夹下的每个`values`文件都包含一个环境变量，该变量是在 NGINX 部署上设置的，具体取决于部署到的环境。例如，`dev/values.yaml`文件内容如下所示:
```
env:
 - name: ENVIRONMENT
   value: dev
```
类似地，`qa/values.yaml`文件内容如下所示:
```
env:
 - name: ENVIRONMENT
   value: qa
```
`prod/values.yaml`文件内容如下:
```
env:
 - name: ENVIRONMENT
   value: prod
```
虽然本例中部署的 NGINX 图表很简单，并不严格要求指定这些值，但是您会发现使用此处所示的方法在单独的`values`文件中分离特定于环境的配置对于复杂和现实世界的用例是有帮助的。然后，通过将相应的值文件传递给带有`--values ${env}/values.yaml`的`helm upgrade --install`命令，可以将其应用于安装，其中`${env}`代表`dev`、`qa`或`prod`。
顾名思义，`common-values.yaml`文件用于所有部署环境中通用的值。本例的`common-values.yaml`文件编写如下:
```
service:
 type: NodePort
```
该文件表示在图表安装过程中创建的每个 NGINX 服务都应该有一个`NodePort`类型。在 NGINX 图表的`values.yaml`文件中设置的所有其他默认值也适用于每个环境，因为它们没有在`common-values.yaml`文件或单个`values.yaml`环境文件中被覆盖。
需要注意的一点是，您的应用应该在每个部署环境中尽可能相同地部署。任何改变正在运行的 Pods 或容器的物理属性的值都应该在`common-values.yaml`文件中指定。这些配置包括但不限于以下内容:
*   副本计数
*   资源请求和限制
*   服务类型
*   映像名称
*   映像标签
*   `ImagePullPolicy`
*   音量增大
更改配置以与特定于环境的服务集成的值可以在单个环境`values`文件中修改。这些配置可能包括以下内容:
*   度量或监控服务的位置
*   数据库或后端服务的位置
*   应用/入口网址
*   通知服务
循环回到 CD 管道的`Deploy to Dev`阶段中使用的 Helm 命令，`--values common-values.yaml`和`--values dev/values.yaml`标志的组合合并了这两个`values`文件，以在`dev`中安装`nginx`图表。该命令还使用`-n dev`标志来指示部署应该在`dev`命名空间中执行。此外，`--wait`标志用于暂停`nginx`Pod ，直到报告为`ready`。
继续管道，部署到`dev`后的下一阶段是烟度测试。此阶段运行以下命令:
```
sh 'helm test nginx -n dev'
```
NGINX 图表包含一个测试钩，用于检查 NGINX Pod 的连接。如果`test`挂钩能够验证可以连接到 Pod，则测试返回成功。虽然`helm test`命令通常被保留用于图表测试，但它也可以作为在光盘过程中执行基本烟雾测试的一种好方法。冒烟测试是为确保应用的关键功能在部署后按设计工作而执行的测试。由于 NGINX 图表测试不会以任何方式干扰正在运行的应用或部署环境的其余部分，`helm test`命令是确保成功部署 NGINX 图表的合适方法。
烟雾测试后，示例光盘管道运行下一阶段，称为`Deploy to QA`。此阶段包含一个条件，用于评估管道正在执行的当前分支是否是主分支，如图所示:
```
when {
  expression {
    return env.BRANCH_NAME == 'master'
  }
}
```
该条件允许您使用功能分支来测试包含在`values.yaml`文件中的部署代码，而无需将其提升到更高的环境。这意味着只有包含在主分支中的 Helm 值应该是生产就绪的，尽管这不是您在 CD 管道中发布应用时可以采取的唯一策略。另一个常见的策略是允许在以`release/`前缀开头的发布分支上进行更高级别的升级。
在`Deploy to QA`阶段使用的掌舵命令显示如下:
```
dir('nginx-cd') {
    sh "helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values qa/values.yaml -n qa --wait"
}
```
鉴于您对`Deploy to Dev`阶段的了解以及公共值和环境特定值的分离，`Deploy to QA`的代码是可预测的。它引用质量保证特定值的`qa/values.yaml`文件，并传递`-n qa`标志以部署到`qa`名称空间。