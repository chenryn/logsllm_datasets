title:Machine-checked ZKP for NP relations: Formally Verified Security
Proofs and Implementations of MPC-in-the-Head
author:Jos&apos;e Bacelar Almeida and
Manuel Barbosa and
Manuel L. Correia and
Karim Eldefrawy and
St&apos;ephane Graham-Lengrand and
Hugo Pacheco and
Vitor Pereira
Machine-checked ZKP for NP relations: Formally Verified
Security Proofs and Implementations of MPC-in-the-Head
Jos√© Bacelar Almeida
University of Minho and INESC TEC
Braga, Portugal
Manuel Barbosa
Manuel L Correia
University of Porto (FCUP) and
INESC TEC
Porto, Portugal
Karim Eldefrawy
St√©phane Graham-Lengrand
SRI International
Menlo Park, California, United States
Hugo Pacheco
University of Porto (FCUP) and
INESC TEC
Porto, Portugal
Vitor Pereira
SRI International
Menlo Park, California, United States
ABSTRACT
MPC-in-the-Head (MitH) is a general framework that enables con-
structing efficient zero-knowledge (ZK) protocols for NP relations
from secure multiparty computation (MPC) protocols. In this paper
we present the first machine-checked implementations of MitH. We
begin with an EasyCrypt formalization that preserves the modu-
lar structure of the original construction and can be instantiated
with arbitrary MPC protocols, and secret sharing and commitment
schemes satisfying standard notions of security. We then formalize
various suitable components, which we use to obtain full-fledged
ZK protocols for general relations. We compare two approaches
for obtaining verified executable implementations. The first uses
a fully automated extraction from EasyCrypt to OCaml. The sec-
ond reduces the trusted computing base (TCB) and provides better
performance by combining code extraction with formally verified
manual low-level components implemented in the Jasmin language.
We conclude with a discussion of the trade-off between the for-
mal verification effort and the performance of resulting executables,
and how our approach opens the way for fully verified implemen-
tations of state-of the-art optimized protocols based on MitH.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography; ‚Ä¢ Theory of compu-
tation ‚Üí Logic and verification.
KEYWORDS
Zero-Knowledge; Secure Multiparty Computation; Formal Verifica-
tion; Implementation
ACM Reference Format:
Jos√© Bacelar Almeida, Manuel Barbosa, Manuel L Correia, Karim Elde-
frawy, St√©phane Graham-Lengrand, Hugo Pacheco, and Vitor Pereira. 2021.
Machine-checked ZKP for NP relations: Formally Verified Security Proofs
and Implementations of MPC-in-the-Head. In Proceedings of the 2021 ACM
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of the United States
government. As such, the Government retains a nonexclusive, royalty-free right to
publish or reproduce this article, or to allow others to do so, for Government purposes
only.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484771
SIGSAC Conference on Computer and Communications Security (CCS ‚Äô21),
November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3460120.3484771
1 INTRODUCTION
The MPC-in-the-Head (MitH) paradigm was introduced by Ishai,
Kushilevitz, Ostrovsky and Sahai [25] (IKOS) as a new foundational
bridge between secure multi-party computation (MPC) and zero-
knowledge proof (ZK) protocols. A ZK protocol for an NP relation1
ùëÖ(ùë•, ùë§) can be seen as a two party computation where a prover P
with input (ùë•, ùë§) and a verifier V with input ùë• jointly compute the
boolean function ùëì (ùë•, ùë§) that accepts the proof if and only if ùëÖ(ùë•, ùë§)
holds. The MitH paradigm shows that there exists an efficiency
advantage in considering MPC protocols for ùëõ > 2 and using a
commit-challenge-response transformation to obtain a ZK protocol.
This efficiency gain stems from two important observations: 1) that
ùúã only needs to satisfy a weak notion of security that allows for
extremely efficient instantiations and, 2) that the round complexity
of ùúã has no impact in the final protocol, since ùúã is evaluated ‚Äúin-
the-head‚Äù. A series of follow-up works [5, 9, 10, 13, 16, 18, 20, 22,
26] demonstrated the efficiency and flexibility of the MitH core
ideas, by exploring adaptations of this principle to specific MPC
protocols (e.g., with preprocessing and different trust models) and
different ZK protocols (e.g., with additional rounds). One notable
takeaway of these works is that MitH allows for instantiations that
can efficiently handle relations expressed as either arithmetic or
boolean circuits. Moreover, the MitH paradigm has been used to
create a new generation of post-quantum secure signatures such as
Picnic, a notable candidate to the NIST post-quantum competition.2
In this work we explore the elegant simplicity and modularity
of the MitH paradigm to obtain an end-to-end machine-checked
development, including security proofs and formally-verified im-
plementations, for ZK protocols supporting general relations. We
focus on the MitH variant that can be instantiated with passively se-
cure secret-sharing-based MPC protocols that tolerate two corrupt
(i.e., semi-honest) parties. This allowed us to build on an existing
development that already provides a suitable instantiation for the
underlying MPC protocol, secret sharing and commitment schemes.
1Intuitively: ùëÖ is efficiently computable and s.t. solutions, if they exist, are short.
2https://microsoft.github.io/Picnic/
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2587Our work paves the way for formally verified implementations
of more recent and optimized applications of the MitH paradigm.
To illustrate this, we show that our development is flexible enough
to allow for another instantiation based on (the passively secure
variant of) the secret sharing based protocol given by Maurer [27],
for which we also develop an optimized and formally verified im-
plementation. Our optimizations cover both simplifications of the
MitH construction and integration of verified high-speed assembly
code. We further discuss the implications of our work at the end of
this section. In more detail, our contributions are as follows:
‚Ä¢ We formally specify and verify the IKOS foundational MitH re-
sult [25] and potential instantiations in EasyCrypt. The formaliza-
tion is modular and relies on standard components, such as MPC
protocols, secret sharing schemes and commitment schemes.
‚Ä¢ We present two verified implementations for two different MPC
protocols. The first is an extension of the formalization of the
BGW protocol given in [19], fully automatically extracted to an
OCaml implementation. The second is a new machine-checked
EasyCrypt formalization of Maurer‚Äôs protocol [27], from which
we obtain a verified implementation by combining extracted
OCaml code with verified high-speed assembly developed us-
ing the Jasmin framework [2]. This simultaneously reduces the
trusted computing base (TCB) and improves performance.
‚Ä¢ As the main innovations, we highlight that our work: 1) is the first
end-to-end machine-checked implementation of a ZK protocol for
general relations; 2) gives the first formalization of foundational
ZK results such as reduction of soundness error by sequential
composition and simulation by rejection sampling; and 3) is the
first to integrate verified assembly generated using the Jasmin
framework with extracted verified code.
This version of the paper omits some details and discussions; the
full version is available at https://eprint.iacr.org/2021/1149.
Limitations. The formal proofs of security and correctness for
the various constructions are complete, but the functional correct-
ness proof for the Jasmin implementation covers only the addition
and multiplication gates; it is being extended to the other gates. The
TCB for the implementation based on BGW includes EasyCrypt and
the extraction mechanism, as well as unverified OCaml libraries
for multi-precision integers and cryptographic operations. For the
implementation based on Maurer‚Äôs protocol, the TCB includes Easy-
Crypt (we rely less on the extraction mechanism), unverified OCaml
libraries for basic data structures, and a thin layer of unverified
hand-written C code connecting the extracted OCaml code to the
Jasmin code. This layer handles memory allocation and randomness
generation (not existing in Jasmin), as well as C wrappers for the
assembly generated by the Jasmin compiler. In contrast to the first
implementation, all the low-level cryptographic code is verified.
Implications. The MitH paradigm has received a lot of attention
since the seminal IKOS paper [25], which we formalize in this paper.
A natural question to ask is therefore: why not consider more recent
and more efficient protocols? Our choice was motivated by 1) the
goal of formally replicating the modular structure of the original
IKOS construction; 2) a pragmatic approach to build on an exist-
ing development of the BGW protocol, which fits the foundational
view of [25]; and 3) the fact that the proofs of the soundness and
(malicious verifier) zero-knowledge properties formalized in [25]
posed an interesting challenge for machine-checking in EasyCrypt.
Nevertheless, we believe that the complexity of the protocols, im-
plementations and proofs we give here are representative of the
challenges posed by more recent applications of MitH.
This is immediate for the part of our work that focuses on verified
implementations: code extraction and connection to verified Jasmin
implementations can be performed in essentially the same way, with
the caveat that additional (non-cryptographic) verification effort is
required to deal with implementation-specific optimizations such
as compact view representations, parallel processing, etc.
Security proofs would require specific execution models that
go beyond our syntax for MPC and ZK protocols (e.g., to capture
preprocessing, probabilistic-checkable proofs, etc.), but we do not
anticipate difficulties in formalizing proofs that can be expressed as
standard game hopping arguments‚Äîthis includes special soundness
and honest-verifier ZK, which are also tackled in [30], and malicious
security for MPC, which are tackled in [19, 23]. Two exceptions are
the general Fiat-Shamir transformation and post-quantum security
proofs (e.g., those relying on the QROM), which we believe are very
interesting directions for future work.
As pointed out in [30], when it comes to EasyCrypt formalization,
many recent protocols [9, 16, 17, 26, 29] (and indeed our own) fall
into the same general category as ZKBoo [20] as given there. For
example, to handle the ZKBoo security proof similarly to the proof
in [30], we would need to redefine views as intermediate states
instead of messages exchanged ‚Äî our intermediate passive security
notions for MPC would remain the same ‚Äî and adapt the notion of
consistency in the same way. Additional standard game hops would
be needed to deal with the use of a PRF to compress randomness.
When moving to witness-independent preprocessing as in [26], we
would need to modify the syntax of our ZK protocols to deal with
5-rounds and formalize a simple cut-and-choose argument.
Access to the development. Our EasyCrypt formalizations,
proofs, and extracted executable software are available in the follow-
ing repository: https://github.com/SRI-CSL/high-assurance-crypto.
2 PRELIMINARIES
This section provides the formal cryptographic definitions used in
our formalization, which are all standard, and an overview of the
MitH framework. We follow closely the original MitH work [25],
and defer definitions for commitment and secret sharing schemes
to the full version. The section concludes with a short overview of
the EasyCrypt and Jasmin features most relevant for our work.
2.1 Zero-Knowledge
A NP relation ùëÖ(ùë•, ùë§) is an efficiently decidable and polynomially
bounded binary relation, which we see as a boolean function. A ZK
protocol for a NP relation ùëÖ(ùë•, ùë§) is defined by two probabilistic
polynomial time (ppt) interactive algorithms, a prover P and a
verifier V: P takes a NP statement ùë• and a witness ùë§; V is only
given the statement ùë•. The prover and the verifier interact‚Äîin
this paper we consider only three-pass commit-challenge-response
protocols‚Äîuntil eventually the verifier outputs 1 or 0 indicating
success or failure, respectively. The view of V is defined as its input
ùë•, its coin tosses and all the messages that it receives.
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2588Definition 2.1 (Zero-knowledge proof). A protocol (P,V) is a ZK
protocol for the relation ùëÖ if it satisfies the following requirements:
‚Ä¢ Completeness: In an honest execution, if ùëÖ(ùë•, ùë§) = 1, then the
verifier accepts with probability 1.
‚Ä¢ Soundness: For every malicious and computationally unbounded
prover P‚àó, there is a negligible function ùúñ(¬∑) such that, if ùëÖ(ùë•, ùë§) =
0 for all ùë§ ‚àà {0, 1}ùëù(|ùë• |), then P‚àó can make V accept with prob-
ability at most ùúñ(|ùë•|).
‚Ä¢ Zero-Knowledge: For any malicious ppt verifierV‚àó, there exists
a ppt simulator S‚àó, such that the view of V‚àó when interacting
with P on inputs (ùë•, ùë§) for which ùëÖ(ùë•, ùë§) = 1, is computationally
indistinguishable from the output of S‚àó on input ùë•.3
We do not consider the proof-of-knowledge (PoK) property, which
imposes that a witness can be extracted from any successful prover.
The PoK property is not proved in [25], so we leave it for future
work. We will also consider ZK protocols that have a constant (non-
negligible) soundness error ùúñ, in which cases the soundness error
will be specified. In this case, the soundness error can be reduced
to match the definition above by repeating the protocol multiple
times, as discussed in Section 3.4.
2.2 Secure Multiparty Computation
The MitH paradigm builds on MPC protocols that assume synchro-