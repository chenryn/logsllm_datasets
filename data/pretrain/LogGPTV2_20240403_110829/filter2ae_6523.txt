## 0x01介绍
最近在看如何执行shellcode的方法，发现了一种叫做代码注入的方式可以使用，查了下资料，技术很久就在用了，但现在还是有很多apt组织在使用，比如APT37,Backdoor.Oldrea,AuditCred,于是学习一下。木马和病毒的好坏很大程度上取决于它的隐蔽性，木马和病毒本质上也是在执行程序代码，如果采用独立进程的方式需要考虑隐藏进程否则很容易被发现，在编写这类程序的时候可以考虑将代码注入到其他进程中，而进程注入是一种在单独的进程的地址空间中执行任意代码的方法。本文将介绍代码注入的原理以及如何使用。
## 0x02常见函数
为了实现代码注入，微软提供了一个邪恶的函数`CreateRemoteThread`,想要执行用户代码，在Windows中最常见的就是使用回调的方式，Windows采用的是事件驱动的方式，只要发生了某些事件就会调用回调，在众多使用回调的场景中，线程的回调是最简单的，它不会干扰到目标进程的正常执行，也就不用考虑最后还原EIP的问题。最常见的就是使用`CreateRemoteThread`创建一个远程线程。
### OpenProcess
要对进程执行内存操作，我们必须能够访问它。可以通过使用`OpenProcess`函数获得
    HANDLE OpenProcess(
      DWORD dwDesiredAccess,//对进程对象的请求访问权限
      BOOL  bInheritHandle,//布尔值，指示此进程创建的进程是否将继承此句柄。
      DWORD dwProcessId//这是受害者进程的进程标识符
    );
### VirtualAllocEx
一旦我们获得受害者进程的句柄，我们继续为受害者进程内存中的shellcode分配空间。这是通过使用`VirtualAllocEx` 调用完成的。
    LPVOID VirtualAllocEx(
      HANDLE hProcess,//我们想要分配内存的进程
      LPVOID lpAddress,//受害者进程内存中指定地址的指针
      SIZE_T dwSize,//分配的内存区域的大小
      DWORD  flAllocationType,//指定要分配的内存类型
      DWORD  flProtect//它指定分配的内存保护,我们将其设置为PAGE_EXECUTE_READWRITE。
    );
### WriteProcessMemory
`WriteProcessMemory`是一个将数据写入指定进程的内存区域的函数。需要注意的是整个内存区域必须是可写的，否则会失败，所以我们将内存分配为可写，并与可读和可执行文件一起分配。
    BOOL WriteProcessMemory(
      HANDLE  hProcess,//我们想要写入数据的进程
      LPVOID  lpBaseAddress,//我们想要写入数据的地址
      LPCVOID lpBuffer,//指向必须写入的数据的指针
      SIZE_T  nSize,//写入的数据量
      SIZE_T  *lpNumberOfBytesWritten//指向SIZE_T的指针，它将存储写入该目标的字节数。
    );
### CreateRemoteThread
`CreateRemoteThread`是一个用于创建在另一个进程的虚拟空间中运行的线程的函数。
    HANDLE CreateRemoteThread(
      HANDLE                 hProcess,// 目标进程句柄
      LPSECURITY_ATTRIBUTES  lpThreadAttributes,// 安全属性
      SIZE_T                 dwStackSize, // 进程堆栈大小
      LPTHREAD_START_ROUTINE lpStartAddress,  // 进程函数
      LPVOID                 lpParameter, // 进程参数
      DWORD                  dwCreationFlags, // 创建标志
      LPDWORD                lpThreadId // 参数返回ID
    );
## 0x03大概流程
通过`CreateRemoteThread` API 实现代码注入
  1. 选择一个受害者进程。
  2. 使用`OpenProcess`函数获取对进程的访问权限，以便能够执行所需的操作。
  3. 使用`VirtualAllocEx`函数在进程空间中分配内存。
  4. 将`shellcode`写入`VirtualAllocEx`分配的内存位置。
  5. 调用`CreateRemoteThread`。
## 0x04 写代码
有了思路，就是写代码了，参考大佬的[代码](https://github.com/thepwnrip/code-injection)
    VOID injectShellcode(DWORD dwPID) {
        BOOL    bWriteSuccess;
        DWORD   dwThreadId;
        HANDLE  hProcess;
        HANDLE  hRemoteThread;
        SIZE_T  numBytes;
        SIZE_T  payloadSize;
        LPVOID  lpRemoteMem;
        cout 