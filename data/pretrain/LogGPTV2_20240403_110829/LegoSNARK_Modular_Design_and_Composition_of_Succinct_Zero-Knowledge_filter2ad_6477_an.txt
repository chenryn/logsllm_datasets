∗
R )b∈{0,1})
Z )b∈{0,1})
:= (πb)b∈{0,1})
∧
R0,R1 ),
R )b∈{0,1}, (aux(b)
Z )b∈{0,1}(cid:1)
(aux(b)
Z ) :
E∗(ck, ((crsb)b∈{0,1}, R∧
R := (R1−b, (aux(b)
Z := (crs1−b, (aux(b)
aux(b)
aux(b)
R , aux(b)
R0,R1 ), aux(b)
R )b∈{0,1}) for b ∈ {0, 1}
Z )b∈{0,1}) for b ∈ {0, 1}
(cid:0)(x0, u0, u2), (o0, o2), ω0
(cid:1) ← E0(ck, (crs0, R0), aux(0)
(cid:0)(x1, u1, u
(cid:1) ← E1(ck, (crs1, R1), aux(1)
return(cid:0)(xb)b∈{0,1}, (uj)j∈[:3], (oj)j∈[:3], (ωb)b∈{0,1}(cid:1)
(cid:48)
2), (o1, o
(cid:48)
2), ω1
R , aux(0)
Z )
R , aux(1)
Z )
return (xb, cb, c2, πb)
Figure 11: Adversary and Extractor for Proof of Lemma A.1
49
A.2 Proof of Zero-Knowledge
We state the following lemma.
Lemma A.2. If CPb is zero-knowledge for Com and RGb for b ∈ {0, 1}, then the scheme CP∧ in
Figure ?? is a zero-knowledge CP-SNARK for Com and RG∗ (where relation generators are deﬁned
in Figure 10).
Proof We construct the following two simulators for RG∗ from simulators for CP0, CP1. Then
ZK follows through a standard hybrid argument.
S∗
prv((crsb)b∈{0,1}, (td(b)
for b ∈ {0, 1} : πb ← S (b)
return (πb)b∈{0,1}
k )b∈{0,1}, (xb)b∈{0,1}, (cj)j∈[:3])
prv (crsb, td(b)
S∗
kg(ck, R∧
for b ∈ {0, 1} : (crsb, td(b)
∗
return (crs
k ) ← S (b)
kg (ck, Rb)
∗
k := (td(b)
:= (crsb)b∈{0,1}, td
, xb, (cb, c2))
R0,R1
)
k )b∈{0,1})
k
(cid:3)
B Proofs for the General Compiler
Theorem B.1. Let CP.RG be a relation generator such that CP..RGλ ⊆ Rλ, and let CP.Z be
an auxiliary input distribution. Then the scheme CP in Table 2 is KSND(CP.RG, CP.Z) and com-
posable zero-knowledge for CP.RG whenever: (i) ccΠ is ccKSND(ccΠ.RG, ccΠ.Z) and composable
zero-knowledge for ccΠ.RG, (ii) CPlink is KSND(CPlink.RG, CPlink.Z) and composable zero-knowledge
for CPlink.RG, where the relation generators and auxiliary input distributions ccΠ.RG, ccΠ.Z,
CPlink.RG, CPlink.Z are the ones in Figure 12. This result also holds when ccΠ is a cc-SNARK
with weak binding (Deﬁnition 3.3).
CPlink.RG(1λ) :
(R, auxR) ← CP.RG(1λ)
) ← ccΠ.KeyGen(R)
(cid:48)
(cid:48)
(cid:48)
(ck
, vk
, ek
x ,Dlink
,Dlink
(cid:48)
Rlink := (ck
(cid:48)
(cid:48)
auxlink
, vk
return (Rlink, auxlink
R )
u ,Dlink
ω )
, R, auxR
R :=(cid:0)ek
(cid:1)
CPlink.Z((ck, Rlink), auxlink
R , crslink) :
R as(cid:0)ek
Parse auxlink
Get ck
return auxlink
(cid:48) from Rlink
(cid:1) ; Parse crslink as (eklink, vklink)
(cid:48)
(cid:48)
, eklink) ; vk := (vk
, vklink)
, ek
(cid:48)
(cid:48)
, vk
; ek := (ck
, R, auxR
(cid:48)
Z ← CP.Z((ck, R), auxR, (ek, vk))
ccΠ.RG(1λ) :
ccΠ.Z(R, aux(cid:48)
R, crs(cid:48)) :
(R, auxR) ← CP.RG(1λ)
ck ← CP.Setup(1λ)
(cid:48)
return (R, aux
R := (ck, auxR))
(cid:48)
R as (ck, auxR) ; Rlink := (ck
) and aux
(cid:48) as (ck
(cid:48)
(cid:48)
, ek
(cid:48)
, vk
Parse crs
(eklink, vklink) ← CPlink.KeyGen(ck, Rlink) ; ek := (ck
(cid:48)
auxZ ← CP.Z((ck, R), auxR, (ek, vk))
(cid:48)
Z := (eklink, vklink, auxZ )
return aux
(cid:48)
,Dlink
x ,Dlink
(cid:48)
, eklink) ; vk := (vk
u ,Dlink
ω )
, vklink)
(cid:48)
, ek
Figure 12: Relation and Auxiliary Input Generators for Theorem B.1
B.1 Proof of Knowledge Soundness
Proof First, recall that proving the knowledge soundness of a CP-SNARK scheme CP for relation
generator CP.RG means proving the knowledge soundness of CP as a SNARK for the corresponding
50
relation generator CP.RGCom that, we recall, honestly generates the commitment key ck ← Setup(1λ)
and generates (R, auxR) using CP.RG and outputs ((ck, R), auxR).
Our proof proceeds in the following steps.
First, assume there exists an adversary CP.A against scheme CP that runs in the experiment
CP.RGCom,CP.Z and outputs a tuple (x, (cj)j∈[(cid:96)], π) such that CP.VerProof(vk, x, (cj)j∈[(cid:96)], π) = 1.
GameKSND
Then, from such CP.A we can build:
1. an adversary ccΠ.A against ccΠ that runs in the experiment GameccKSND
2. an adversary CPlink.A against CPlink that runs in the experiment GameKSND
and auxiliary input generators ccΠ.RG, ccΠ.Z deﬁned in Fig. 12), and outputs (x, c(cid:48), π(cid:48));
CPlink.RGCom,CPlink.Z (with
the relation and auxiliary input generators CPlink.RGCom, CPlink.Z deﬁned in Fig. 12), and that
outputs (c(cid:48), (cj)j∈[(cid:96)], πlink);
The two adversaries ccΠ.A, CPlink.A are deﬁned below. By looking at the way their inputs are sam-
CPlink.RGCom,CPlink.Z, and how the relation
pled in their respective games GameccKSND
and auxiliary input generators are deﬁned, the input received by CP.A in both simulations (the one
by ccΠ.A and the one by CPlink.A) is distributed identically as the input CP.A would receive in
GameKSND
ccΠ.RG,ccΠ.Z (with the relation
ccΠ.RG,ccΠ.Z and GameKSND
CP.RGCom,CP.Z.
(cid:48)
(cid:48)
Z as (eklink,vklink, auxZ ) ; crs
R as (ck, auxR) ; aux
Parse aux
(cid:48)
(cid:48)
, eklink) ; vk := (vk
ek := (ck
(cid:48)
(cid:48)
, ek
(cid:48)
, vk
(cid:48)(cid:17)(cid:1)← CP. A(cid:0)(ck, R),(ek, vk),auxR,auxZ
)
(cid:1)
, πlink, π
ccΠ.A(R, crs(cid:48), aux(cid:48)
R, aux(cid:48)
Z ) :
CPlink.A((ck,Rlink),crslink,auxlink
R ,auxlink
Z ) :
, ek
(cid:48)
(cid:48)
)
, π
return (x, c
(cid:48)
(cid:48)
, vk
R as(cid:0)ek
, (cj)j∈[(cid:96)], πlink(cid:1)
, ek
(cid:48)
(cid:48)
Parse auxlink
(cid:48)
ek := (ck
return(cid:0)c
, R, auxR
(cid:48)
, eklink) ; vk := (vk
(cid:16)
(cid:48)
c
(cid:48) as (ck
(cid:48)
, vklink) ; (cid:0)x,(cj)j∈[(cid:96)], π :=
(cid:1) ; crslink as (eklink, vklink) ; auxlink
, vklink) ; (cid:0)x, (cj)j∈[(cid:96)], π :=
(cid:16)
(cid:48)
c
(cid:48)
Z as auxZ ; Rlink as (ck
, πlink, π
(cid:48)(cid:17)(cid:1) ← CP. A((ck, R), (ek, vk), auxR, auxZ )
u ,Dlink
ω )
x ,Dlink
,Dlink
Second, observe that:
– If ccΠ is ccKSND(ccΠ.RG, ccΠ.Z) then for every ccΠ.A there exists an extractor ccΠ.E that
j)j∈[(cid:96)], o(cid:48), w(cid:48)) such that