                            kernel.function("sys32_open").return ?,  
                            kernel.function("sys_open").return ?  
{  
        name = "open"  
        retstr = return_str(1, $return)  
}  
# read _______________________________________________________  
# ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)  
probe syscall.read = kernel.function("sys_read").call  
{  
        name = "read"  
        fd = $fd  
        buf_uaddr = $buf  
        count = $count  
        argstr = sprintf("%d, %p, %d", $fd, $buf, $count)  
}  
probe syscall.read.return = kernel.function("sys_read").return  
{  
        name = "read"  
        retstr = return_str(1, $return)  
}  
# write ______________________________________________________  
#  
# ssize_t sys_write(unsigned int fd,  
#            const char __user * buf,  
#            size_t count)  
#  
probe syscall.write = kernel.function("sys_write").call  
{  
        name = "write"  
        fd = $fd  
        buf_uaddr = $buf  
        count = $count  
        argstr = sprintf("%d, %s, %d", $fd, text_strn(user_string($buf), syscall_string_trunc, 1), $count)  
}  
probe syscall.write.return = kernel.function("sys_write").return  
{  
        name = "write"  
        retstr = return_str(1, $return)  
}  
/usr/share/systemtap/tapset/syscalls.stp  
# close ______________________________________________________  
# long sys_close(unsigned int fd)  
probe syscall.close = kernel.function("sys_close").call  
{  
        name = "close"  
        fd = $fd  
        argstr = sprint(fd)  
}  
probe syscall.close.return = kernel.function("sys_close").return  
{  
        name = "close"  
        retstr = return_str(1, $return)  
}  
这几个函数的源码位置信息: (源码这里就不贴出来了)  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("compat_sys_open").call'  
kernel.function("compat_sys_open@fs/compat.c:1343").call $filename:char const* $flags:int $mode:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys32_open").call'  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_open").call'  
kernel.function("sys_open@fs/open.c:913").call $filename:char const* $flags:int $mode:int $ret:long int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_read").call'  
kernel.function("sys_read@fs/read_write.c:389").call $fd:unsigned int $buf:char* $count:size_t $fput_needed:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_write").call'  
kernel.function("sys_write@fs/read_write.c:407").call $fd:unsigned int $buf:char const* $count:size_t $fput_needed:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_close").call'  
kernel.function("sys_close@fs/open.c:982").call $fd:unsigned int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("compat_sys_open").return'  
kernel.function("compat_sys_open@fs/compat.c:1343").return $return:long int $filename:char const* $flags:int $mode:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys32_open").return'  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_open").return'  
kernel.function("sys_open@fs/open.c:913").return $return:long int $filename:char const* $flags:int $mode:int $ret:long int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_read").return'  
kernel.function("sys_read@fs/read_write.c:389").return $return:long int $fd:unsigned int $buf:char* $count:size_t $fput_needed:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_write").return'  
kernel.function("sys_write@fs/read_write.c:407").return $return:long int $fd:unsigned int $buf:char const* $count:size_t $fput_needed:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.function("sys_close").return'  
kernel.function("sys_close@fs/open.c:982").return $return:long int $fd:unsigned int  
```  
## 参考  
1\. https://sourceware.org/systemtap/SystemTap_Beginners_Guide/mainsect-disk.html  
2\. https://sourceware.org/systemtap/examples/  
3\. /usr/share/systemtap/testsuite/systemtap.examples  
4\. systemtap-testsuite  
5\. /usr/share/systemtap/testsuite/systemtap.examples/index.txt  
6\. /usr/share/systemtap/testsuite/systemtap.examples/keyword-index.txt  
7\. /usr/share/systemtap/tapset  
8\. https://sourceware.org/systemtap/tapsets/API-ctime.html  
9\. https://sourceware.org/systemtap/tapsets/API-gettimeofday-s.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")