      };
      locator.StatusChanged += (sender1, e1) =>
      {
        // status changed
      };
    }
  注意： 用位置的变化来调试应用程序时，并不需要用户现在就钻进一辆汽
车，边开车边调试应用程序。模拟器是一个很有帮助的工具。
33.9 传感器
Windows运行库可以直接访问许多传感器。名称空间Windows.Devices.Sensors包含了
用于几个传感器的类，这些传感器可以通过不同的设备使用。
在介绍代码之前，先在表33-1中概述不同的传感器及其用途。一些传感器的功能非常
明确，但其他传感器需要一些解释。Windows提供了一些新的传感器。
表33-1
传感器
功能
光线
光线传感器返回单位为勒克斯的光线。这个信息由Windows
本身用于设置屏幕亮度
罗盘
罗盘提供了用磁力计测量出的设备偏离北方的角度。这个传
感器区分磁力北方和地理北方
加速计
加速计测量x、y和z设备轴上的重力值。应用程序可以使用
这个传感器显示在屏幕上滚过的钢珠
陀螺仪
陀螺仪测量沿着x、y和z设备轴上的角速度。如果应用程序
关注设备的旋转，就可以使用这个传感器。但是，移动设备
也会影响陀螺仪的值。可能需要用加速计的值来补偿陀螺仪
的值，以去除设备的移动，只处理实际的角速度
倾斜计
倾斜计给出了设备绕x轴（倾斜）、y轴（滚动）和z轴（偏
航）的角度值。应用程序显示匹配倾斜、滚动和偏航的飞机
时，可以使用这个传感器
气压计
气压计测量大气的压力（Windows 10新增的）
高度计
高度计测量相对高度（Windows 10新增的）
磁力计
磁力计测量磁场的强度和方向
步数计
步数计测量走过的步数。通常人们走路时不会带着PC, PC没
有传感器，但步数计在许多Windows 10手机上都有
（Windows 10新增的）
近距离传感器
近距离传感器测量临近对象的距离。它使用电磁场或红外探
测器来测量距离（Windows 10新增的）
根据设备，只有少数传感器是可用的。这些传感器只用在移动设备上。例如，用桌面
电脑计算步数，可能不会得到某人一天行走的步数。
传感器数据的一个重要方面是，传感器返回的坐标并不是Windows应用程序使用的坐
标系统方向。而使用设备的方向，这与基于设备的方向不同。例如，Surface Pro默认用水
平定位，其x轴指向右，y轴指向上，z轴从用户指向外部。
使用传感器的示例应用程序以两种方式显示几个传感器的结果：可以得到一次传感器
值，也可以不断使用事件读取它。使用这个应用程序可以看出，哪些传感器数据可以用于
设备，移动设备时会返回哪些数据。
对于应用程序所示的每个传感器，在主页中添加一个RelativePanel，其中包含两个按
钮和两个Textblock控件。下面的代码片段定义了光传感器的控件（代码文件
SensorSampleApp/MainPage.xaml）：
33.9.1 光线
知道如何使用一种传感器后，其他传感器的用法是非常相似的。下面先看看
LightSensor。首先，调用静态方法GetDefault访问一个对象。调用GetCurrentReading方法
可以获得传感器的实际值。对于LightSensor, GetCurrentReading返回LightSensorReading对
象。这个读数对象定义了IlluminanceInLux属性，它返回单位为勒克斯的照明度（代码文
件SensorSample/ViewModels/LightViewModel.cs）：
      public class LightViewModel: BindableBase
      {
        public void OnGetLight()
        {
          LightSensor sensor = LightSensor.GetDefault();
          if (sensor ! = null)
          {
          LightSensorReading reading = sensor.GetCurrentReading();
          Illuminance = $"Illuminance: {reading? .IlluminanceInLux}";
          }
          else
          {
          Illuminance = "Light sensor not found";
          }
        }
        private string _illuminance;
        public string Illuminance
        {
          get { return _illuminance; }
          set { SetProperty(ref _illuminance, value); }
        }
        // etc.
      }
要获得连续更新的值，应触发ReadingChanged事件。指定ReportInterval就指定了用于
触发事件的时间段。它不能低于MinimumReportInterval。对于该事件，第二个参数e的类
型是LightSensorReadingChangedEventArgs，用Reading属性指定LightSensorReading：
    public class LightViewModel: BindableBase
    {
      // etc
      public void OnGetLightReport()
      {
        LightSensor sensor = LightSensor.GetDefault();
        if (sensor ! = null)
        {
        sensor.ReportInterval = Math.Max(sensor.MinimumReportInterval, 1000);
        sensor.ReadingChanged += async (s, e) =>
        {
          LightSensorReading reading = e.Reading;
          await CoreApplication.MainView.Dispatcher.RunAsync(
            CoreDispatcherPriority.Low, () =>
          {
            IlluminanceReport =
              $"{reading.IlluminanceInLux} {reading.Timestamp:T}";
          });
        };
      }
    }
    private string _illuminanceReport;
    public string IlluminanceReport
    {
      get { return _illuminanceReport; }
      set { SetProperty(ref _illuminanceReport, value); }
    }
    }
33.9.2 罗盘
罗盘的用法非常类似。GetDefault方法返回Compass对象，GetCurrentReading检索表示
罗盘当前值的CompassReading。CompassReading定义了属性HeadingAccuracy、
HeadingMagneticNorth和HeadingTrueNorth。
如果HeadingAccuracy返回MagnometerAccuracy.Unknown或Unreliable，罗盘就需要校
正（代码文件SensorSampleApp/ViewModels/CompassviewModel.cs）：
      public class CompassViewModel: BindableBase
      {
        public void OnGetCompass()
        {
          Compass sensor = Compass.GetDefault();
          if (sensor ! = null)
          {
          CompassReading reading = sensor.GetCurrentReading();
          CompassInfo = $"magnetic north: {reading.HeadingMagneticNorth} " +
            $"real north: {reading.HeadingTrueNorth} " +
            $"accuracy: {reading.HeadingAccuracy}";
          }
          else
          {
          CompassInfo = "Compass not found";
          }
        }
        private string _compassInfo;
        public string CompassInfo
        {
          get { return _compassInfo; }
          set { SetProperty(ref _compassInfo, value); }
        }
        // etc.
      }
罗盘也可以持续更新：
    public class CompassViewModel: BindableBase
    {
      // etc.
      public void OnGetCompassReport()
      {
        Compass sensor = Compass.GetDefault();
        if (sensor ! = null)
        {
          sensor.ReportInterval = Math.Max(sensor.MinimumReportInterval, 1000);
          sensor.ReadingChanged += async (s, e) =>
          {
          CompassReading reading = e.Reading;
          await CoreApplication.MainView.Dispatcher.RunAsync(
            CoreDispatcherPriority.Low, () =>
          {
            CompassInfoReport =
              $"magnetic north: {reading.HeadingMagneticNorth} " +
              $"real north: {reading.HeadingTrueNorth} " +
              $"accuracy: {reading.HeadingAccuracy} {reading.Timestamp:T}";
          });
          };
        }
      }
      private string _compassInfoReport;
      public string CompassInfoReport
      {
        get { return _compassInfoReport; }
        set { SetProperty(ref _compassInfoReport, value); }
      }
    }
33.9.3 加速计
加速计给出了x、y和z设备轴上的重力值。对于景观设备，x轴是水平的，y轴是垂直
的，z轴从用户指向外部。如果设备底部的Windows按钮面对桌面，x的值就是-1。如果旋
转设备，使Windows按钮在顶部，x的值就是+1。
与前面介绍的传感器类似，GetDefault静态方法返回Accelerometer, GetCurrentReading
通过AccelerometerReading对象给出了加速计的实际值。AccelerationX、AccelerationY和
AccelerationZ是可以读取的值（代码文件
SensorSampleApp/ViewModels/AccelerometerViewModel.cs）：
    public class AccelerometerViewModel: BindableBase
    {
      public void OnGetAccelerometer()
      {
        Accelerometer sensor = Accelerometer.GetDefault();
        if (sensor ! = null)
        {
        AccelerometerReading reading = sensor.GetCurrentReading();
        AccelerometerInfo = $"X: {reading.AccelerationX} " +
          $"Y: {reading.AccelerationY} Z: {reading.AccelerationZ}";
        }
        else
        {
        AccelerometerInfo = "Compass not found";
        }
      }
      private string _accelerometerInfo;
      public string AccelerometerInfo
      {
        get { return _accelerometerInfo; }
        set { SetProperty(ref _accelerometerInfo, value); }
      }
      // etc.
    }
与其他传感器类似，给ReadingChanged事件指定处理程序，就可以获得加速计的连续
更新值。这与前面介绍的传感器完全相同，这里不再列出其代码。但使用本章的下载代码
可以获得该功能。可以测试设备，不断地移动它，读取加速计的值。
33.9.4 倾斜计
倾斜计用于高级方向，它给出了相对于重力的偏航、倾斜和滚动值（角度）。得到的
值用PitchDegrees、RollDegrees和YawDegrees属性指定（代码文件
SensorSampleApp/ViewModels/Inclino-meterView Model.cs）：
      public class InclinometerViewModel: BindableBase
      {
        public void OnGetInclinometer()
        {
          Inclinometer sensor = Inclinometer.GetDefault();
          if (sensor ! = null)
          {
          InclinometerReading reading = sensor.GetCurrentReading();
          InclinometerInfo = $"pitch degrees: {reading.PitchDegrees} " +
            $"roll degrees: {reading.RollDegrees} " +
            $"yaw accuracy: {reading.YawAccuracy} " +
            $"yaw degrees: {reading.YawDegrees}";
          }
          else
          {
          InclinometerInfo = "Inclinometer not found";
          }
        }
        private string _inclinometerInfo;
        public string InclinometerInfo
        {
          get { return _inclinometerInfo; }
          set { SetProperty(ref _inclinometerInfo, value); }
        }
        // etc.
      }
33.9.5 陀螺仪
Gyrometer给出了x、y和z设备轴的角速度值（代码文件
SensorSampleApp/ViewModels/GyrometerViewModel.cs）：
      public class GyrometerViewModel: BindableBase
      {
        public void OnGetGyrometer()
        {
          Gyrometer sensor = Gyrometer.GetDefault();
          if (sensor ! = null)
          {
          GyrometerReading reading = sensor.GetCurrentReading();
          GyrometerInfo = $"X: {reading.AngularVelocityX} " +
            $"Y: {reading.AngularVelocityY} Z: {reading.AngularVelocityZ}";
          }
          else
          {
          GyrometerInfo = "Gyrometer not found";
          }
        }
        private string _gyrometerInfo;
        public string GyrometerInfo
        {
          get { return _gyrometerInfo; }
          set { SetProperty(ref _gyrometerInfo, value); }
        }