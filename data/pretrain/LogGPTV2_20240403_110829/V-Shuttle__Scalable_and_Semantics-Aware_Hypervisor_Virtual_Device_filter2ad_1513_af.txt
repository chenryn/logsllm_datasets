[34] Andrew Henderson, Heng Yin, Guang Jin, Hao Han, and Hongmei Deng. 2017.
Vdf: Targeted evolutionary fuzz testing of virtual devices. In International Sym-
posium on Research in Attacks, Intrusions, and Defenses. Springer, 3–25.
[35] Kyriakos Ispoglou, Daniel Austin, Vishwath Mohan, and Mathias Payer. 2020.
Fuzzgen: Automatic fuzzer generation. In 29th {USENIX} Security Symposium
({USENIX} Security 20). 2271–2287.
[36] Dae R Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung Lee, and Insik
Shin. 2019. Razzer: Finding kernel race bugs through fuzzing. In 2019 IEEE
Symposium on Security and Privacy (SP). IEEE, 754–768.
[37] Kyungtae Kim, Dae R Jeong, Chung Hwan Kim, Yeongjin Jang, Insik Shin, and
Byoungyoung Lee. 2020. HFL: Hybrid Fuzzing on the Linux Kernel.. In NDSS.
[38] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. 2018.
Evaluating fuzz testing. In Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. 2123–2138.
[39] Yuwei Li, Shouling Ji, Yuan Chen, Sizhuang Liang, Wei-Han Lee, Yueyao Chen,
Chenyang Lyu, Chunming Wu, Raheem Beyah, Peng Cheng, et al. 2021. Unifuzz:
A holistic and pragmatic metrics-driven platform for evaluating fuzzers. In 30th
USENIX Security Symposium (USENIX Security 21). USENIX Association.
[40] Yuekang Li, Yinxing Xue, Hongxu Chen, Xiuheng Wu, Cen Zhang, Xiaofei Xie,
Haijun Wang, and Yang Liu. 2019. Cerebro: context-aware adaptive fuzzing
for effective vulnerability detection. In Proceedings of the 2019 27th ACM Joint
Meeting on European Software Engineering Conference and Symposium on the
Foundations of Software Engineering. 533–544.
[41] Chenyang Lyu, Shouling Ji, Chao Zhang, Yuwei Li, Wei-Han Lee, Yu Song, and
Raheem Beyah. 2019. {MOPT}: Optimized mutation scheduling for fuzzers. In
28th {USENIX} Security Symposium ({USENIX} Security 19). 1949–1966.
[42] Valentin Jean Marie Manès, HyungSeok Han, Choongwoo Han, Sang Kil Cha,
Manuel Egele, Edward J Schwartz, and Maverick Woo. 2019. The art, science,
and engineering of fuzzing: A survey. IEEE Transactions on Software Engineering
(2019).
[43] Tavis Ormandy. 2007. An empirical study into the security exposure to hosts of
hostile virtualized environments.
[44] Sebastian Österlund, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2020.
Parmesan: Sanitizer-guided greybox fuzzing. In 29th {USENIX} Security Sympo-
sium ({USENIX} Security 20). 2289–2306.
[45] Shankara Pailoor, Andrew Aday, and Suman Jana. 2018. Moonshine: Optimizing
{OS} fuzzer seed selection with trace distillation. In 27th {USENIX} Security
Symposium ({USENIX} Security 18). 729–743.
[46] Gaoning Pan, Xingwei Lin, Xinlei Ying, Jiashui Wang, and Chunming Wu. 2021.
Scavenger: Misuse Error Handling Leading To QEMU/KVM Escape. Black Hat
Asia (2021).
[47] Hui Peng and Mathias Payer. 2020. USBFuzz: A Framework for Fuzzing {USB}
Drivers by Device Emulation. In 29th {USENIX} Security Symposium ({USENIX}
Security 20). 2559–2575.
[48] Aaron Portnoy and Pedram Amini. 2021. Sulley. https://github.com/OpenRCE/
sulley.
[49] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida,
and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing.. In
NDSS, Vol. 17. 1–14.
[50] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten
Holz. 2020. HYPER-CUBE: High-Dimensional Hypervisor Fuzzing. In 27th Annual
Network and Distributed System Security Symposium, NDSS. 23–26.
[51] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten
Holz. 2021. Nyx: Greybox hypervisor fuzzing using fast snapshots and affine
types. In 30th {USENIX} Security Symposium ({USENIX} Security 21).
[52] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kafl: Hardware-assisted feedback fuzzing for {OS} kernels.
In 26th {USENIX} Security Symposium ({USENIX} Security 17). 167–182.
[53] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy
Vyukov. 2012. AddressSanitizer: A fast address sanity checker. In Presented as
part of the 2012 {USENIX} Annual Technical Conference ({USENIX}{ATC} 12).
309–318.
[54] Zhijian Shao, Jian Weng, and Yue Zhang. 2020. A Guest-to-Host Escape on
QEMU/KVM Virtio Device. Black Hat Asia (2020).
[55] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn
Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael
Franz. 2019. Periscope: An effective probing and fuzzing framework for the
hardware-os boundary. In NDSS.
[56] Dokyung Song, Felicitas Hetzelt, Jonghwan Kim, Brent Byunghoon Kang, Jean-
Pierre Seifert, and Michael Franz. 2020. Agamotto: Accelerating Kernel Driver
Fuzzing with Lightweight Virtual Machine Checkpoints. In 29th {USENIX} Secu-
rity Symposium ({USENIX} Security 20). 2541–2557.
[57] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In
NDSS, Vol. 16. 1–16.
Europe (2016).
[58] Jack Tang and Moony Li. 2016. When virtualization encounter AFL. Black Hat
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2210[59] Peach Tech. 2021. Peach. http://www.peachfuzzer.com/.
[60] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. 2010. TaintScope: A checksum-
aware directed fuzzing tool for automatic software vulnerability detection. In
2010 IEEE Symposium on Security and Privacy. IEEE, 497–512.
[61] Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng, Tiffany Bao, Dinghao Wu, and
Purui Su. 2020. Not all coverage measurements are equal: Fuzzing by coverage
accounting for input prioritization. NDSS.
[62] Cheng Wen, Haijun Wang, Yuekang Li, Shengchao Qin, Yang Liu, Zhiwu Xu,
Hongxu Chen, Xiaofei Xie, Geguang Pu, and Ting Liu. 2020. Memlock: Mem-
ory usage guided fuzzing. In Proceedings of the ACM/IEEE 42nd International
Conference on Software Engineering. 765–777.
[63] Meng Xu, Sanidhya Kashyap, Hanqing Zhao, and Taesoo Kim. 2020. Krace: Data
Race Fuzzing for Kernel File Systems. In 2020 IEEE Symposium on Security and
Privacy (SP). IEEE, 1643–1660.
[64] Wen Xu, Hyungon Moon, Sanidhya Kashyap, Po-Ning Tseng, and Taesoo Kim.
2019. Fuzzing file systems via two-dimensional input space exploration. In 2019
IEEE Symposium on Security and Privacy (SP). IEEE, 818–834.
[65] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. {QSYM}: A
practical concolic execution engine tailored for hybrid fuzzing. In 27th {USENIX}
Security Symposium ({USENIX} Security 18). 745–761.
[66] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. 2019. Send Hardest Problems
My Way: Probabilistic Path Prioritization for Hybrid Fuzzing.. In NDSS.
[67] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and
Limin Sun. 2019. FIRM-AFL: high-throughput greybox fuzzing of iot firmware via
augmented process emulation. In 28th {USENIX} Security Symposium ({USENIX}
Security 19). 1099–1114.
10 APPENDIX
queue.setup();
Algorithm 1 Main semantics-aware fuzzing loop of V-Shuttle
Input: Initial seeds queues Seedpool[], Target Hypervisor H
1: // setup each basic seed queues and global information ;
2: for all queue of the Seedpool[] do
3:
4: end for
5: GlobalMap.init();
6: repeat
7:
8:
9:
10:
11:
12:
13: until timeout or abort-signal;
Output: Crashing seeds crashes
id = H.request()
seed = Mutate(Seedpool[id]);
Cover = H.feed(seed);
if Cover.haveNewCoverage() then
Seedpool[id].push(seed)
end if
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2211Figure 9: An example presenting the semantics-aware fuzzing via seedpools. Here qh, td, last_td refer to three different DMA objects, respectively (td and
last_td are the same type of data structure, but in different contexts. We still treat them as different DMA objects.). Each of them will be organized into an
independent seed queue.
1.  void uhci_process_frame( … ) {2.      UHCI_QH qh;3.      …4.      if (is_qh) {5.          pci_dma_read(&qh, sizeof(qh));6.      }7.      UHCI_TD td;8.      …9.      uhci_read_td(&td);10.     uhci_handle_td(…);11.     …12. }1.  void uhci_read_td(UHCI_TD *td){2.      pci_dma_read(td, sizeof(*td));3.      …4.  }1.  void uhci_handle_td( … ){2.      UHCI_TD last_td;3.      …4.      uhci_read_td(&last_td);5.      …6.  }123Seed Pool…Control-FlowBackward Data-Flowlast_td1last_td2…td1td2…qh1qh2…Queue1Queue2Queue3FuzzerSeedpool-Based FuzzingSession 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2212Table 6: List of 35 previously unknown vulnerabilities in QEMU and VirtualBox discovered by V-Shuttle. The remaining issues marked as requested are
still under investigation. Issue-ID indicates the assertion failures we reported through launchpad.net.
Hypervisor
Description
Device Type
Heap buffer overflow (write) in ohci_copy_iso_td
Stack buffer overflow (read) in ohci_service_iso_td
Heap buffer overflow (read) in ohci_service_td
Infinite loop in e1000e_write_packet_to_guest
OOB access in ati_2d_blt
Reachable assert failure via eth_get_gso_type
Divide by zero in dwc2_handle_packet
Integer Overflow in sm501_2d_operation
Infinite loop in xhci_ring_chain_length
Heap-use-after-free in nic_reset
Heap buffer overflow (write) in dp8393x_do_transmit_packets
Failed malloc in omap_rfbi_transfer_start
Infinite loop in allwinner_sun8i_emac_get_desc
Divide by zero in exynos4210_ltick_cnt_get_cnto
Divide by zero in zynq_slcr_compute_pll
Failed malloc in vmxnet3_activate_device
NULL pointer derefence in fdctrl_read
Heap-use-after-free in ehci_flush_qh
NULL pointer derefence in lsi53c895a
NULL pointer derefence in vmport_ioport_read
NULL pointer derefence in a9_gtimer_get_current_cpu
Assertion in usb_msd_send_status
Assertion in usb_ep_get
Assertion in ohci_frame_boundary
Assertion in vmxnet3_io_bar1_write
Assertion in lsi_do_dma
Heap buffer overflow (write) in xhciR3WriteEvent
Heap buffer overflow (write) in xhciR3WriteEvent
OOB Read in ehciR3ServiceQHD
Divide by zero in e1kTxDLoadMore
Integer overflow in e1kGetTxLen
Heap buffer overflow (write) in buslogicRegisterWrite
Divide by zero in ataR3SetSector
NULL pointer derefence in blk_read
Unintialized stack object in LsiLogicSCSI
QEMU
VirtualBox
USB
USB
USB
Network
Graphics
Network
Graphics
USB
USB
Network
Network
Graphics
Network
Timer
Misc
Network
Storage
USB
Storage
Core
Timer
USB
USB
USB
Network
Storage
USB
USB
USB
Network
Network
Storage
Storage
Storage
Storage
CVE/Issue-ID
CVE-2020-25624
confirmed
confirmed
CVE-2020-25707
CVE-2020-27616
CVE-2020-27617
CVE-2020-27661
requested
CVE-2020-14394
CVE-2021-20203
CVE-2021-20196
requested
confirmed
requested
confirmed
confirmed
confirmed
requested
requested
requested
requested
#1901981
#1907042
#1917216
#1913923
#1905521
CVE-2020-2905
CVE-2020-14872
CVE-2020-14889
CVE-2020-14892
CVE-2021-2073
CVE-2021-2074
CVE-2021-2086
CVE-2021-2130
CVE-2021-2123
CVSS Score
Impact
5.0
-
-
2.5
2.8
3.8
3.8
-
3.2
-
-
-
-
-
-
3.2
3.2
-
-
-
-
-
-
-
-
-
8.2
8.2
6.0
5.5
4.4
8.2
6.0
4.4
3.2
Exploitable
Exploitable
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
DoS
Exploitable
Exploitable
Info leak
Exploitable
Info leak
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2213