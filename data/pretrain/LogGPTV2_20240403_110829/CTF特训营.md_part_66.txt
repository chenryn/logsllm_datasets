为什么ARM要设计两种状态？下面以一个实例来介绍一下ARM
处理器的指令集。
例如有这样的简单函数：
int func(int i, int j){
int x=i+j-i/j*3;
printf(%d\n", x);
returnx;
}
---
## Page 811
CTF特训营：技术详解、解题方法与
23.3ARM架构基础知识
811/1144
使用ARM交叉编译工具编译后，汇编代码为：
=>0x2a0008ec:
push
{r4,Ir}
0x2a0008ee:
adds
r4,r0,r1
0x2a0008f0:
blx
0x2a00090c
0x2a0008f4:
sub.w
r0,r0,r0,lsl#2
0x2a0008f8:
add
r4,r0
0x2a0008fa:
JPI
r0,[pc,#12]
：（0x2a000908)
0x2a0008fc
mov
r1,r4
0x2a0008fe:
add
r0,pc
0x2a000900:
blx
0x2a0006c0
0x2a000904:
mov
r0,r4
0x2a000906:
pop
{r4,pc}
可以看出，ARM的汇编代码与Intelx86的汇编代码非常相似，参
数都是采用从目标到源的方式，汇编指令也比较相似，熟悉lntelx86
汇编的读者应该一下子就能看懂大部分的指令，下面挑选几个比较特
殊的知识点进行讲解。
---
## Page 812
CTF特训营：技术详解、解题方法与
23.3.1函数调用/跳转指令812/1144
23.3.1函数调用/跳转指令
在ARM汇编中，函数调用和跳转指令都可以使用b系列指令，常
见的有b、bx、bl、blx。其中，带"x”的指令表示根据地址的最后一
位进行Thumb模式和ARM模式的切换，当地址最后一位为1时切换至
Thumb模式，为O时切换至ARM模式（寄存器PC的值的最后一位总为
0)；带T”的指令表示处理器跳转的时候，会将当前指令的下一条
指令地址存入寄存器LR中，这样当子程序需要跳转回来时，只需要
把LR的值存入PC即可。
在ARM处理器中，寄存器PC是可以直接修改的，既可以直接赋
值，也可以使用出栈操作修改寄存器PC的值。因此直接将LR的值赋
给PC是可行的，但这只在子程序和调用者都处在ARM模式时才可以
如果模式不同，则需要bxi指令（想一想这是为什么？）。
在函数调用的时候，按照约定，函数的前4个参数会依次存储在
寄存器R0-R3中，剩余的参数（如果有）则会依次保存在栈里
---
## Page 813
CTF特训营：技术详解、解题方法与
23.3.2出找入栈指令
813/1144
23.3.2出栈入栈指令
ARM汇编的出栈入栈指令与lntelx86的指令很像，都是使用push
和pop指令，不同的是ARM汇编的push和pop指令后面可以接多个单
数，例如上面的“push{r4,Ir}”。
---
## Page 814
CTF特训营：技术详解、解题方法与
23.3.3保存/恢复高存器的值
814/1144
23.3.3保存/恢复寄存器的值
ARM汇编提供了LDR、STR、LDM、STM系列指令用于将寄存器
的值存入内存以及将寄存器的值从内存中读出，其中LDR、STR用于
处理单个寄存器，LDM、STM用于一次性保存或恢复多个内存器，因
此有时候我们也会看见使用LDM、STM系列指令执行出栈入栈操作。
例如，指令“stmdbsp!{r4,r5,r6,r7,r8,r9,r10,r11,lr}”，它其实相当于
push{r4,r5,r6,r7,r8,r9,r10,r11,r}
---
## Page 815
CTF特训营：技术详解、解题方法与
23.4 adb
815/1144
23.4adb
adb（androiddebugbridge）是谷歌官方提供的命令行工具，用
来连接真机或者模拟器，只要在相应的Android系统设置中打开USB
调试，即可使用adb连接手机。adb最主要的功能是查看连接的手
机、打开一个shell、查看日志、上传与下载文件，相关命令如下。
1）查看连接的手机或模拟器：adbdevices。
2）安装APK:adbinstall。
3）卸载APP:adbuninstall
4）打开shell:adb shell。
5）查看日志：adblogcat
6）上传文件：adbpushxxx/data/local/tmp。
7）下载文件：adbpull/data/local/tmp/some_file some_location。
8）将本地端口转发到远程设备的端口：adbforward[--no
rebindJLOCALREMOTE。
---
## Page 816
CTF特训营：技术详解、解题方法与，
23.4 adb
816/1144
9）列出所有的转发端口adbforward-list。
10将远程设备的端口转发到本地：adbreverse[--no
rebindJREMOTELOCAL。
11）列出所有反向端口转发：adbreverse--list。
12）终止ADBServer:adbkill-server。
13）启动ADBServer:adbstart-server。
14）以root权限重启ADBDAEMON：adbroot
15）重启设备：adbreboot。
16）重启并进入bootloader：adbrebootbootloader。
17）重启并进入recovery：adbrebootrecovery。
18）将system分区重新挂载为可读写分区：adbremount
19）通过TCP/IP连接设备（默认端口5555）：adbconnect
HOST[:PORT]
Windows系统可以从谷歌的Android官网上下载AndroidSDK，其
中包含了adb；Linux与Mac系统可以从官网上下载AndroidSDK，也
---
## Page 817
CTF特训营：技术详解、解题方法与
23.4adb
817/1144
可以直接使用包管理工具下载android-platform-tools。
在Linux系统中，如果adb无法正常连接，比如使用“adb
devices”列出手机时显示”nopermissions”，这时可以使用“adb
kill-server”命令结束adb进程，然后使用root权限重新运行“adb
devices"；一次性的解决办法可以参考http://source.android.com
节，将所使用手机的iD写入系统的udev规则中。
---
## Page 818
CTF特训营：技术详解、解题方法与
23.5APK文件格式
818/1144
23.5APK文件格式
这里简单介绍一下APK的文件格式。APK文件其实是一个zip压缩
文件，使用unzip可以直接解压，例如，下面是某个APK解压后的第
一层目录：
AndroidManifest.xml
META-INF
assets
classes.dex
libs
res
resources.arso
其中，AndroidManifest.xml是这个APK的属性文件，所有的APK
都需要包含这个文件，这个文件中写明了该APK所具有的Activity、所
需要的函数、启动类是哪一个等信息。当然，直接打开解压后的该文
件将会是乱码，需要使用工具去解析。
META-INF是编译过程中自动生成的文件夹，尽量不要去手动修
改。
assets文件夹比较有意思，存放在这个文件夹里面的文件将会原
---
## Page 819
CTF特训营：技术详解、解题方法与
23.5APK文件格式
819/1144
封不动地打包到APK里，因此这个文件夹里经常会存放一些程序中会
使用的文件，例如解密秘钥或者加密后的密文等。
classes.dex是存放Dalvik字节码的DEx文件，若用编辑器直接打
开会看到一堆乱码，如何去解析DEX文件将在第24章讨论的内容。
libs文件夹包含Native层所需的lib库，一般为libxxx.so格式，libs
文件夹中可以包含多个ib文件。
res文件夹存放与资源相关的文件，例如位图。
resources.arsc文件里面存放着APK中所使用资源的名字、ID
类型等信息，若用编辑器直接打开，看到的也会是乱码，如何解析会
在第24章进行讨论。
---
## Page 820
CTF特训营：技术详解、解题方法与
第24章Dalvik层逆向分析
820/1144
第24章Dalvik层逆向分析
本章主要介绍Dalvik层逆向的相关知识与解题方法。学习本章时
需要熟练掌握Java、BakSmali的基础知识，以及命令行的基本操作方
法。逆向Android程序的时候，推荐使用Linux/Mac平台，以获取更好
的命令行支持。
在Dalvik层分析的时候，理解原理很重要，选择一款合适的工具
也很重要，有时候一款合适的工具，能够达到事半功倍的效果
本章首先介绍在逆向分析的过程中所需的基础知识，以及会使用
到的几种优秀工具，随后会探讨目前Dalvik层中使用到的混淆及加固
技术。
---
## Page 821
CTF特训营：技术详解、解题方法与
24.1Dalvik基础知识
821/1144
24.1Dalvik基础知识
目前，主流的DEx文件反汇编工具为BakSmali和Dedexer，两者
在语法上有很多相似之处，而我们在比赛中经常会用到的工具是
BakSmali。下面通过一个例子来了解BakSmali的语法。
例如这样一个简单的Java方法：
public String func(inti,int j）{
returnString.valueOf(i+j-i/j*3);
编译成DEX文件，再反汇编成BakSmali，代码如下：
#virtualmethods
.methodpublic func(ll)Ljava/lang/String;
locals 2
-param p1,“ #1
param p2, " #1
.prologue
.line54
add-int v0,p1,p2
div-intv1,p1,p2
mul-int/lit8v1,v1,0x3
sub-int/2addr v0,v1
invoke-static{vo),Ljava/lang/String;->valueOf(l)Ljava/lang/String;
move-result-objectvo
return-objectv0
.end method
---
## Page 822
CTF特训营：技术详解、解题方法与
24.1Dalvik基础知识
822/1144
下面通过几个关键点阐述一下。
---
## Page 823
CTF特训营：技术详解、解题方法与
24.1.1存器823/1144
24.1.1寄存器
Dalvik虚拟机与Java虚拟机的一个最大的不同之处就是Dalvik虚
拟机是基于寄存器架构的，它在代码中使用了大量的寄存器。这种设
计可以将一部分虚拟机寄存器映射到处理器寄存器上，从而提高运算
速度；另一部分寄存器则是通过调用栈进行模拟。Dalvik虚拟机中的
每个寄存器都是32位，支持任何类型。Davik虚拟机最多可使用
65536个寄存器，但是，自前笔者还没有遇到可以用这么多寄存器的
函数。
法，在前文BakSmali语法中采取的是p命名法。在该代码中，以p
开头的寄存器表示的是传入的参数，例如，p0代表第一个参数，p1
代表第二个参数，以此类推；以””并头的寄存器表示的是局部变
量，v0代表第一个局部变量，v1代表第二个局部变量，以此类推。而
命名法是将所有参数变量和局部变量都以“√”打买，并没有对参数
变量和局部变量进行区分，这么来看，p命名法似乎更符合使用习惯。
在BakSmali语法中，在函数的开始会使用"locals”字段描述该
---
## Page 824
CTF特训营：技术详解、解题方法与
24.1.1寄存器
824/1144
函数使用的局部变量的个数，使用”param”字段描述函数参数变
量。
---
## Page 825
CTF特训营：技术详解、解题方法与
24.1.2类型
825/1144
24.1.2类型
Dalvik虚拟机中只有11种变量类型，这些类型可用来表示Java中
的所有类型。在BakSmali语法中并不写出类型的全称，而是使用如表
24-1所示的语法。
表24-1Dalvik虚拟机的变量类型及其说明
语法
含义
语法
含义
V
void，只用于返回值类型
long
N
boolcan
F
float
B
byte
D
double
short
L
Java类类型
char
[
数组类型
1
int
对于32位的变量类型，用一个寄存器就可以储存；而对于64位
的变量类型，例如J、D，则需要使用两个连续的寄存器来存储，例
如v0、v1。
上述11个类型中，除去L类型和[类型为引用类型，其余类型都是
基本类型。
L类型可用来表示Java中的类，例如Java中的类java.lang.String
对应的L类型是“Ljava/lang/String:”的形式。字母L后直接跟包的绝
---
## Page 826
CTF特训营：技术详解、解题方法与
24.1.2类型
826/1144
对路径，Java表示中的“”替换为“"，最后用分号“”表示对象
名结束。
类型可用来表示基本类型和Java类型的数组。一般表示为[后面
紧跟基本类型描述符。例如[表示int切，[表示int切，[表示int切
以此类推，注意多维数组的维数最多为255个。[类型也可以与L类型
结合使用，例如“[Ljava/lang/String：”表示Java中的String。
---
## Page 827
CTF特训营：技术详解、解题方法与
24.1.3方法827/1144
24.1.3方法
method”指令结束。对于不同类型的方法，BakSmali会用”#”注释
该方法的类型，“#virtualmethods”表示该方法是一个虚方法
“#directmethods”表示该方法是一个普通方法。
Dalvik虚拟机使用方法名、参数类型和返回值来详细描述一个方
法。例如上面的“func(ll)Ljava/lang/String:："，“func"是方法名，括
号里的“ll”表示两个整型，最后的"Ljava/lang/String:”表示返回值
符号“->”的含义与C++类似，例如“Ljava/lang/String；
---
## Page 828
CTF特训营：技术详解、解题方法与
24.1.4指令特点828/1144
24.1.4指令特点
Dalvik指令集与lntelx86的汇编指令有很大的相似性，参数都是
采用从目标到源的方式。
Dalvik指令集相当于一种变长指令。之前说过，Dalvik指令集具
有65535个寄存器，显然要表示这么多寄存器需要16位的空间，但是
一般的函数普遍用不到这么多数量的寄存器，如果均采用16位空间
存储寄存器编号，会使指令的体积增大，因此Dalvik指令通过“7”后
缀来表明寄存器编号的范围（有时也会用来表示常量的取值范围）。
常见的后缀有16、from16等，例如movevAvB”表示将vB寄存器
的值赋给vA，其中A和B的值都占用4位（即0-15），默认没有后缀是
4位；“move/from16vAvB”表示A的值占用8位，B的值占用16位
而“move/16vA，vB”中，A和B的值都占16位，以此来节省空间。为
了方便阅读，也有的参考文档会将上面三个指令分别写成“move