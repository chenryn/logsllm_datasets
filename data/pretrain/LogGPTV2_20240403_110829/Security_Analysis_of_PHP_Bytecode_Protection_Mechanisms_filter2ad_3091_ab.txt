4147; (octal)
print message
?>
binary data
fallback check Adler32
data encoding custom Base64/raw
n/a
n/a
@"SourceGuardian";
try to load extension
print message
sg load(‘binary data’)
?>
32 bit BSD
Base64
header 1
ionCube
Zend Guard
SourceGuardian
header info
version, PRNG seed
version
version, protection ﬂags
header 2
ionCube
Zend Guard
SourceGuardian
XOR with PRNG
n/a
custom GZIP
encryption
encoding
checksum
header info
MD4, custom Adler32 n/a
license info
restriction rules
fallback checksum
license info
restriction rules
license checksum fallback checksum
Blowﬁsh CBC mode
Lempel Ziv (lzo1x)
32 bit BSD
license info
restriction rules
bytecode
ionCube
Zend Guard
SourceGuardian
encryption
encoding
checksum
obfuscation
XOR with PRNG
GZIP
custom Adler32
forged opcode nr
n/a
custom GZIP
n/a
forged opcode nr n/a
Blowﬁsh CBC mode
Lempel Ziv (lzo1x)
32 bit BSD
license ﬁle
XOR, Blowﬁsh
DSA signature
Blowﬁsh encryption
information regarding license information, expiry time and environment restric-
tions. Some of these information can be outsourced to an external license ﬁle. In
this case, the second header also stores information regarding this ﬁle’s protec-
tion. Finally, the PHP bytecode follows in a proprietary format (3). If the license
is not expired and the runtime environment matches the restriction rules, the
PHP bytecode is executed by passing it to the PHP VM (4). In the following, we
introduce product speciﬁc details. We reverse engineered each loader extension’s
process of extracting the bytecode from the binary data step by step. Surpris-
ingly, very little obfuscation is used within the extensions itself. This would at
least hinder the reverse engineering process and require more eﬀort, but not
prevent it. An overview of the identiﬁed core features is given in Table 2.
500
D. Weißer et al.
3.2
IonCube
The ionCube loader is compiled with multiple optimizations and without debug
symbols. All internal function names are obfuscated. Internal strings, such as
error messages, are XOR’ed with a static 16 bytes key, while a preﬁxed character
in the string denotes the oﬀset for the XOR operation to start. Other protection
mechanisms against reverse engineering are not present.
The loader hooks zend compile file() and tests for the string > 5) | (md4_sum[i] next() & 0xFF);
}
Security Analysis of PHP Bytecode Protection Mechanisms
501
At the end, the integrity of the header’s data is veriﬁed by calculating and
comparing its MD4 checksum. The second header contains the conﬁguration val-
ues of the ionCube protection. For example, a version number allows the loader
to determine if the ﬁle’s PHP version matches the system’s PHP version and to
ﬁnd the corresponding decoding routine. A checksum of the native fallback code
allows to validate its integrity. Furthermore, licensing information and environ-
ment restriction rules are found. For optional name obfuscation, a salt is found
that is used to hash names of variables, functions, and classes with MD4. If the
restriction rules are outsourced to a license ﬁle, the ﬁle path and decryption key
is provided.
After the second header and its checksum, two integers and the encrypted
PHP data follow. The ﬁrst integer seeds a PRNG in order to generate a byte
sequence that is the XOR key for the encrypted PHP data. After successful
decryption, the data is decompressed using GZIP. At this point, the opcode
numbers within the bytecode are still encrypted. A new PRNG is seeded with
the second integer. In combination with a static value from the second header,
a new byte sequence is generated in order to decrypt the opcode numbers and
to perform a runtime obfuscation. We explain this process in Sect. 4.2 in detail.
In contrast to Zend Guard and SourceGuardian, ionCube does not send the
bytecode to PHP’s native execution function in order to run the code. Instead,
slightly modiﬁed parts of the native PHP interpreter are compiled into the loader
extension and are used as a proprietary VM with further obfuscation.
3.3 Zend Guard
Zend Guard’s loader extension is not protected against reverse engineering,
except for the obfuscation of its verbose error messages. These are XOR’ed using
the four bytes \xF8\x43\x69\x2E. Moreover, Zend Guard leaks its compile infor-
mation which helps to exclude library code from reverse engineering, while the
latest loader version even includes debug symbols.
In order to detected encoded ﬁles, Zend Guard replaces PHP VM’s function
zend compile file(). If the string <?php @Zend; is not found at the beginning
of the ﬁle, it will be passed back to the original compile function. Otherwise, the
ﬁle is processed by Zend Guard. It reads the octal number in the second line
and skips the amount of bytes of the fallback routine in order to reach the raw
binary data at the end of the ﬁle.
To retrieve the data, a parser iterates over the byte stream. The data blocks
are stored using a simple binary format which basically consists of four diﬀerent
data types: bytes, bools, numbers, and strings. When a single byte or bool is
requested from the stream, the parser reads one character. Numeric values consist
of a single byte which deﬁnes the length of the number followed by the actual
integer (e. g., [\x05][2015\x00]). Strings extend the integer type with a byte
sequence and its length (e. g., [\x02][5\x00][RAID\x00]). Both, numbers and
strings, are terminated with a null byte.
The binary data consists of two parts: a minimalistic header followed by com-
pressed data. There are four values stored within the ﬁrst header. The ﬁrst value
502
D. Weißer et al.
indicates the version of Zend Guard and the second value identiﬁes the PHP ver-
sion the script was compiled for. Then, two numeric values specify the size of the
compressed and the uncompressed data. The then following data is compressed
using GZIP and a custom compression dictionary. This dictionary lists words
that occur frequently in PHP code in order to improve the compression rate. It
is required to decompress the data and stored within the Zend Guard loader.
The decompressed data contains a second header and the PHP bytecode.
In the second header, license information, such as the license owner’s name,
and conﬁguration ﬂags, such as if the license is attached as a ﬁle, is stored.
It also provides an expiration timestamp. If the current time is ahead of the
timestamp, or if the license is invalid, Zend Guard denies executing the ﬁle. The
license is validated by calculating an Adler32 checksum of the owner’s name and
comparing it to a checksum in the header. For this purpose, a slightly modiﬁed
Adler32 algorithm is used that lacks the modulo operation.
Once the second header is completely decoded and veriﬁed, the compiled
PHP data is parsed. For this purpose, Zend Guard uses the previously intro-
duced stream format to parse the data. Opcodes, literals, and variables are the
main part of this structure but also meta information, such as line numbers or
comments, is available if it was not explicitly disabled during encoding. More-
over, Zend Guard scrambles the opcode numbers. For recovery, a substitution
table is created using constant values from two arrays and the license owner
checksum from the second header. With the help of the substitution table and
the current opcode index, the original opcode number can be calculated.
Furthermore, Zend Guard is able to obfuscate function and variable names.
Here, the lowercased name is XOR’ed with the MD5 hash of the name, such
that the original name is lost. However, the name can be brute-forced with a
dictionary. Also, the key space is reduced because the original name is lowercased
ﬁrst and the obfuscated name has the same length as the original one.
3.4 SourceGuardian
The process of reverse engineering SourceGuardian is comforted by available
debug symbols within its loader extension. Almost all function and symbol names
are intact and ease the understanding of internal processes. A PHP ﬁle’s pro-
tection is indicated in the ﬁrst line with the identiﬁer @"SourceGuardian" (or
@"phpSHIELD" for older versions). Instead of hooking the zend compile file()
function, SourceGuardian adds a new native function sg load() to the PHP
core which parses a proprietary binary format.
<?php @"SourceGuardian";
if(!function_exists(’sg_load’)){ // fallback code
} return sg_load(’12345678CHECKSUM/BASE64/BASE64/BASE64/BASE64=’);
The argument of sg load() is a concatenation of 16 hexadecimal charac-
ters and base64 encoded binary data. First, a checksum is calculated over the
characters ranging from the opening PHP tag <?php to the 8th character of
Security Analysis of PHP Bytecode Protection Mechanisms
503
the sg load() argument. This checksum is then compared to the next eight
characters of the argument in order to verify the fallback code’s integrity. The
checksum algorithm appears to be a 32bit version of the BSD checksum.
The base64 encoded binary data is decoded and reveals a binary format
with four data types. The type char is used to represent single characters, small
numbers, and boolean values. Integers are stored using four bytes in little endian
format (type int) and strings can either be zero terminated (type zstr) or have
a preﬁxed length (type lstr).
At the beginning, a ﬁrst header is parsed that contains a version number and
protection settings, in case the ﬁle is locked to a speciﬁc IP address or hostname.
The ﬁrst byte of a data block in the ﬁrst header decides upon the purpose of the
upcoming bytes, until a 0xFF byte is found. For example, the value 0x2 indicates
that execution is restricted to a hostname and the value 0x4 indicates that the
length of the second header follows.
Once the oﬀset of the encrypted second header is obtained from the ﬁrst
header, it is decrypted using the block cipher Blowﬁsh in CBC mode. For this
purpose, SourceGuardian’s loader comes with multiple static keys that belong to
three diﬀerent groups. Depending on the ﬁle version, it iterates over the appro-
priate group’s keys until the decryption succeeds (checksum matches). Multiple
keys exist because of backwards compatibility and the phpShield aggregation:
NTdkNGQ1ZGQxNWY0ZjZhMjc5OGVmNjhiOGMzMjQ5YWY= // public key
MmU1NDRkMGYyNDc1Y2Y0MjU5OTlmZDExNDYwMzcwZDk= // public key
NzkxNThhZDhkOThjYTk3ZDE5NzY4OTRkYzZkYzM3MzU= // license file key
ODI0YzI2YmMyODQ2MWE4MDY3YjgzODQ2YjNjZWJiMzY= // phpShield pub key
YTJmNjc2MDQ3MWU5YzAxMjkxNTkxZGEzMzk2ZWI1ZTE= // phpShield pub key
In case the execution of the protected ﬁle is restricted to a server’s IP address
or hostname, this value is appended to the decryption key of the second header
and body. Hence, the loader will not be able to decrypt the binary block in
other environments and the execution fails. By default, an attacker can perform
decryption by using the static keys. We believe that the additional key data (IP
or hostname) does not add any further security because the origin of a stolen
source code ﬁle is most likely known to the attacker or can be brute-forced.
Each successfully decrypted block contains three integers and the actual data.
The ﬁrst integer is a checksum calculated over the plain data. The second inte-
ger contains the length of the unencrypted data and the third integer is the size
of the data after decompression. The checksums are calculated with the previ-
ously mentioned 32bit BSD checksum. If the ﬁrst integer matches the calculated
checksum, the decryption was successful.
At this point the data is decrypted, but still compressed with the Lempel
Ziv algorithm. SourceGuardian uses the lzo1x implementation and lzss for ﬁles
encoded with an older version of SourceGuardian. The second header and the
PHP data blocks are compressed and encrypted using this technique.
Similar to the ﬁrst header, a parser iterates over the data and retrieves the
values of the second header. It contains information about the environment
504
D. Weißer et al.
restrictions, such as the license owner, license number, ﬁle creation, and ﬁle expi-
ration date. After the second header, the PHP data follows. SourceGuardian is
able to store multiple versions of it for compatibility with diﬀerent PHP versions.
One data block is used for each version. Each block consists of two integers that
note the compatible PHP version and the size of the encrypted data, as well
as the actual PHP data. If a compatible data block for the currently running
PHP version is found, the block is decrypted. No further obfuscation, such as
of variable names, is performed and the deobfuscated opcode array is passed to