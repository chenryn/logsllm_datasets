send (compute, π, ct) to G(Blockchainhawk)
decrypt (s(cid:8)$val) := SDECk(ct)
store (s, $val, coin) in Wallet
output (finalize, $val)
, and k to use later (in compute)
Finalize: Receive (finalize, coin, ct) from G(Blockchainhawk):
Compute: On input (compute) as party P:
Protocol for manager PM:
Compute: On receive (compute,Pi, ct) from G(Blockchainhawk):
decrypt and store ($vali(cid:8)ini(cid:8)ki(cid:8)si) := DEC(esk, ct)
store cmi := Commsi ($vali(cid:8)ini(cid:8)ki)
output (Pi, $vali, ini)
If this is the last compute received:
for i ∈ [N ] such that Pi has not called compute,
($vali, ini, ki, si, cmi) := (0,⊥,⊥,⊥,⊥)
i}i∈[N ], out) := φpriv({$vali, ini}i∈[N ], inM)
({$val
(cid:2)
store and output ({$val
i}i∈[N ], out)
(cid:2)
Finalize: On input (finalize, inM, out):
assert current time T ≥ T2
for i ∈ [N ]:
sample a commitment randomness s(cid:2)
(cid:2)
(cid:2)
i := Comms(cid:2)
i)
($val
coin
i(cid:8)$val
cti := SENCki (s(cid:2)
(cid:2)
i)
statement := (inM, out,{cmi, coin
i, cti}i∈[N ])
(cid:2)
witness := {si, $vali, ini, s(cid:2)
i, ki}i∈[N ]
π := NIZK.Prove(statement, witness)
send (finalize, π, inM, out,{coin
i, cti})
(cid:2)
i
i
to G(Blockchainhawk)
UserPcash: include UserPcash.
Fig. 6. Blockchainhawk and UserPhawk construction.
848848
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
When a corrupted party P∗ pours to an honest party P, even
though the adversary knows the opening of the coin, it cannot
spend the coin (P, coin) once the transaction takes effect by
the Blockchaincash, since P∗ cannot demonstrate knowledge
of P’s secret key. We stress that since the contract binds the
owner’s nym P to the coin, only the owner can spend it even
when the opening of coin is disclosed.
Technical subtleties. Our Blockchaincash uses a modiﬁed ver-
sion of Zerocash to achieve stronger security in the simulation
paradigm. In comparison, Zerocash adopts a strictly weaker,
indistinguishability-based privacy notion called ledger indis-
tinguishability. In multi-party protocols, indistinguishability-
based security notions are strictly weaker than simulation
security. Not only so, the particular ledger indistinguishability
notion adopted by Zerocash [11] appears subtly questionable
upon scrutiny, which we elaborate on in the online ver-
sion [37]. This does not imply that the Zerocash construction
is necessarily insecure – however, there is no obvious path
to proving their scheme secure under a simulation based
paradigm.
B. Binding Privacy and Programmable Logic
So far, Blockchaincash, similar to Zerocash [11], only sup-
ports direct money transfers between users. We allow transac-
tional privacy and programmable logic simutaneously.
Freeze. We support a new operation called freeze, that does
not spend directly to a user, but commits the money as well
as an accompanying private input to a smart contract. This is
done using a pour-like protocol:
• The user P chooses a private coin (P, coin) ∈ Coins, where
coin := Comms($val). Using its secret key, P computes the
serial number sn for coin – to be disclosed with the freeze
operation to prevent double-spending.
• The user P computes a commitment (val||in||k) to the
contract where in denotes its input, and k is a symmetric
encryption key that is introduced due to a practical opti-
mization explained later in Section V.
• The user P now makes a zero-knowledge proof attesting to
similar statements as in a pour operation, i.e., that the spent
coin exists in the pool Coins, the sn is correctly constructed,
and that the val committed to the contract equals the value
of the coin being spent. See LFREEZE in Figure 6 for details
of the NP statement being proven.
Compute. Next, computation takes place off-chain to compute
the payout distribution {val
i}i∈[n] and a proof of correctness.
(cid:3)
In Hawk, we rely on a minimally trusted manager PM to
perform computation. All parties would open their inputs to
the manager PM, and this is done by encrypting the opening
to the manager’s public key:
ct := ENC(PM.epk, r, ($val(cid:4)in(cid:4)k(cid:4)s(cid:3)))
The ciphertext ct is submitted to the smart contract along with
appropriate zero-knowledge proofs of correctness. While the
user can also directly send the opening to the manager off-
chain, passing the ciphertext ct through the smart contract
would make any aborts evident such that the contract can
ﬁnancially punish an aborting user.
After obtaining the openings, the manager now computes
the payout distribution {val
i}i∈[n] and public output out by
(cid:3)
applying the private contract φpriv. The manager also constructs
a zero-knowledge proof attesting to the outcomes.
Finalize. When the manager submits the outcome of φpriv
and a zero-knowledge proof of correctness to Blockchainhawk,
Blockchainhawk veriﬁes the proof and redistributes the frozen
money accordingly. Here Blockchainhawk also passes the man-
ager’s public input inM and public output out to the public
Hawk contract φpub. The public contract φpub can be invoked
to check the validity of the manager’s input, as well as
redistribute public collateral deposit.
Theorem 1. Assuming that the hash function in the Merkle
tree is collision resistant,
the commitment scheme Comm
is perfectly binding and computationally hiding, the NIZK
scheme is computationally zero-knowledge and simulation
sound extractable, the encryption schemes ENC and SENC
are perfectly correct and semantically secure, the PRF scheme
PRF is secure, then, our protocols in Figures 5 and 6 securely
emulates the ideal functionality F(IdealPhawk) against a ma-
licious adversary in the static corruption model.
Proof. Deferred to our online version [37].
C. Extensions and Discussions
Refunding frozen coins to users.
In our implementation,
we extend our basic scheme to allow the users to reclaim
their frozen money after a timeout T3 > T2. To achieve this,
user P simply sends the contract a newly constructed coin
(P, coin := Comms($val)) and proves in zero-knowledge that
its value $val is equal to that of the frozen coin. In this case,
the user can identify the previously frozen coin in the clear,
i.e., there is no need to compute a zero-knowledge proof of
membership within the frozen pool as is needed in a pour
transaction.
Instantiating the manager with trusted hardware. In some
applications, it may be a good idea to instantiate the manager
using trusted hardware such as the emerging Intel SGX. In this
case, the off-chain computation can take place in a secret SGX
enclave that is not visible to any untrusted software or users.
Alternatively, in principle, the manager role can also be split
into two or more parties that jointly run a secure computation
protocol – although this approach is likely to incur higher
overhead.
We stress that our model is fundamentally different from
placing full trust in any centralized node. Trusted hardware
cannot serve as a replacement of the blockchain. Any off-
chain only protocol that does not interact with the blockchain
cannot offer ﬁnancial fairness in the presence of aborts – even
when trusted hardware is employed.
Furthermore, even the use of SGX does not obviate the need
for our cryptographic protocol. If the SGX is trusted only by
a subset of parties (e.g., just the parties to a particular private
contact), rather than globally, then those users can beneﬁt from
849849
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
the efﬁciency of an SGX-managed private contract, while still
utilizing the more widely trusted underlying currency.
Pouring anonymously to long-lived pseudonyms. In our
basic formalism of IdealPcash, the pour operation discloses
the recipient’s pseudonyms to the adversary. This means that
IdealPcash only retains full privacy if the recipient generates
a fresh, new pseudonym every time. In comparison, Zero-
cash [11] provides an option of anonymously spending to a
long-lived pseudonym (in other words, having IdealPcash not
reveal recipients’ pseudonyms to the adversary).
the transfer is subsequent
It would be straightforward to add this feature to Hawk as
well (at the cost of a constant factor blowup in performance);
however, in most applications (e.g., a payment made after
receiving an invoice),
to some
interaction between the recipient and sender.
Open enrollment of pseudonyms. In our current formalism,
parties’ pseudonyms are hardcoded and known a priori. We can
easily relax this to allow open enrollment of any pseudonym
that joins the contract (e.g., in an auction). Our implementation
supports open enrollment. Due to SNARK’s preprocessing,
right now, each contract
instance must declare an upper-
bound on the number of participants. An enrollment fee
can potentially be adopted to prevent a DoS attack where
the attacker joins the contract with many pseudonyms thus
preventing legitimate users from joining. How to choose the
correct fee amount to achieve incentive compatibility is left as
an open research challenge. The a priori upper bound on the
number of participants can be avoided if we adopt recursively
composable SNARKs [18], [25] or alternative proofs that do
not require circuit-dependent setup [16].
V. ADOPTING SNARKS IN UC PROTOCOLS AND
PRACTICAL OPTIMIZATIONS
A. Using SNARKs in UC Protocols
Succinct Non-interactive ARguments of Knowledge [12],
[33], [49] provide succinct proofs for general computation
tasks, and have been implemented by several systems [12],
[49], [56]. We would like to use SNARKs to instantiate the
NIZK proofs in our protocols — unfortunately, SNARK’s
security is too weak to be directly employed in UC protocols.
Speciﬁcally, SNARK’s knowledge extractor is non-blackbox
and cannot be used by the UC simulator to extract witnesses
from statements sent by the adversary and environment —
doing so would require that the extractor be aware of the
environment’s algorithm, which is inherently incompatible
with UC security.
UC protocols often require the NIZKs to have simulation
extractability. Although SNARKs do not satisfy simulation
extractability, Kosba et al. show that it is possible to apply
efﬁcient SNARK-lifting transformations to construct simula-
tion extractable proofs from SNARKs [38]. Our implementa-
tions thus adopt the efﬁcient SNARK-lifting transformations
proposed by Kosba et al. [38].
850850
B. Practical Considerations
Efﬁcient SNARK circuits. A SNARK prover’s performance
is mainly determined by the number of multiplication gates
in the algebraic circuit to be proven [12], [49]. To achieve
efﬁciency, we designed optimized circuits through two ways:
1) using cryptographic primitives that are SNARK-friendly,
i.e. efﬁciently realizable as arithmetic circuits under a speciﬁc
SNARK parametrization. 2) Building customized circuit gen-
erators to produce SNARK-friendly implementations instead
of relying on compilers to translate higher level implementa-
tion.
The main cryptographic building blocks in our system are:
collision-resistant hash function for the Merkle trees, pseudo-
random function, commitment, and encryption. Our imple-
mentation supports both 80-bit and 112-bit security levels. To
instantiate the CRH efﬁciently, we use an Ajtai-based SNARK-
friendly collision-resistant hash function that is similar to the
one used by Ben-Sasson et al. [14]. In our implementation, the
modulus q is set to be the underlying SNARK implementation
254-bit ﬁeld prime, and the dimension d is set to 3 for the 80-
bit security level, and to 4 for the 112-bit security level based
on the analysis in [38]. For PRFs and commitments, we use
a hand-optimized implementation of SHA-256. Furthermore,
we adopt the SNARK-friendly primitives for encryption used
in the study by Kosba et al. [38], in which an efﬁcient circuit
for hybrid encryption in the case of 80-bit security level was
proposed. The circuit performs the public key operations in a
prime-order subgroup of the Galois ﬁeld extension Fpμ, where
μ = 4, p is the underlying SNARK ﬁeld prime (typically 254-
bit prime, i.e. pμ is over 1000-bit ), and the prime order of the
subgroup used is 398-bit prime. This was originally inspired
by Pinocchio coin [26]. The circuit then applies a lightweight
cipher like Speck [10] or Chaskey-LTS [47] with a 128-bit key
to perform symmetric encryption in the CBC mode, as using
the standard AES-128 instead will result in a much higher
cost [38]. For the 112-bit security, using the same method for
public key operations requires intensive factorization to ﬁnd
suitable parameters, therefore we use a manually optimized
RSA-OAEP encryption circuit with a 2048-bit key instead.
In the next section, we will illustrate how using SNARK-
friendly implementations can lead to 2.0-3.7× savings in the
size of the circuits at the 80-bit security level, compared to
the case when naive straightforward implementation are used.
We will also illustrate that the performance is also practical
in the higher security level case.
Optimizations for finalize.
In addition to the SNARK-
friendly optimizations, we focus on optimizing the O(N )-
sized finalize circuit since this is our main performance
bottleneck. All other SNARK proofs in our scheme are for
O(1)-sized circuits. Two key observations allow us to greatly
improve the performance of the proof generation during
finalize.
Optimization 1: Minimize SSE-secure NIZKs. First, we ob-
serve that in our proof, the simulator need not extract any new
witnesses when a corrupted manager submits proofs during a
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
finalize operation. All witnesses necessary will have been
learned or extracted by the simulator at this point. Therefore,
we can employ an ordinary SNARK instead of a stronger
simulation sound extractable NIZK during finalize. For
freeze and compute, we still use the stronger NIZK. This
optimization reduces our SNARK circuit sizes by 1.5× as can
be inferred from Figure 9 of Section VI, after SNARK-friendly
optimizations are applied.
Optimization 2: Minimize public-key encryption in SNARKs.
Second, during finalize, the manager encrypts each party
Pi’s output coins to Pi’s key, resulting in a ciphertext cti.
The ciphertexts {cti}i∈[N ] would then be submitted to the
contract along with appropriate SNARK proofs of correctness.
Here,
if a public-key encryption is employed to generate
the cti’s, it would result in relatively large SNARK circuit
size. Instead, we rely on a symmetric-key encryption scheme
denoted SENC in Figure 6. This requires that the manager
and each Pi perform a key exchange to establish a symmetric
key ki. During an compute, the user encrypts this ki to the
manager’s public key PM.epk, and prove that the k encrypted
is consistent with the k committed to earlier in cmi. The
SNARK proof during finalize now only needs to include
commitments and symmetric encryptions instead of public key
encryptions in the circuit – the latter much more expensive.
This second optimization additionally gains us a factor of
1.9× as shown in Figure 9 of Section VI after applying the
previous optimizations. Overall, all optimizations will lead to
a gain of more than 10× in the finalize circuit.
Remarks about the common reference string. SNARK
schemes require the generation of a common reference string
(CRS) during a pre-processing step. This common reference
string consists of an evaluation key for the prover, and a
veriﬁcation key for the veriﬁer. Unless we employ recursively
composed SNARKs [18], [25] whose costs are signiﬁcantly
higher, the evaluation key is circuit-dependent, and its size