RUN echo "hello DQS Guide" > /myvol/greeting
RUN ["chmod", "664", "/myvol/greeting"]
RUN ["chown", "dev:dev", "/myvol/greeting"]
VOLUME /myvol
USER dev
CMD ["/bin/bash"]
```
There is a fun and useful `RUN` instruction you can add when you know your image will include bash. This idea was shared with me by my colleague *Marcello de Sales* after he learned of it at Dockercon 16. You can use the following code to create a custom prompt displayed when you shell into your containers. If you don't like the whale graphic, you can switch it up and use anything you like better. I've included some of my favorite options. Here's the code:
```
# RUN instruction Dockerfile for Docker Quick Start
FROM ubuntu
RUN useradd --create-home -m -s /bin/bash dev
# Add a fun prompt for dev user of my-app
# whale: "\xF0\x9F\x90\xB3"
# alien:"\xF0\x9F\x91\xBD"
# fish:"\xF0\x9F\x90\xA0"
# elephant:"\xF0\x9F\x91\xBD"
# moneybag:"\xF0\x9F\x92\xB0"
RUN echo 'PS1="\[$(tput bold)$(tput setaf 4)\]my-app $(echo -e "\xF0\x9F\x90\xB3") \[$(tput sgr0)\] [\\u@\\h]:\\W \\$ "' >> /home/dev/.bashrc && \
 echo 'alias ls="ls --color=auto"' >> /home/dev/.bashrc
USER dev
CMD ["/bin/bash"]
```
结果提示如下所示:
![](img/2d0c1502-1539-4012-9e25-d472c87bea18.png)
# CMD 指令
`CMD`指令用于定义当容器从用其 Dockerfile 构建的映像运行时采取的默认操作。虽然可以在一个 Dockerfile 中包含多个`CMD`指令，但只有最后一个指令才是重要的。本质上，最终的`CMD`指令为映像提供了默认操作。这允许您覆盖或使用 Dockerfile 的`FROM`指令中使用的映像中的`CMD`。这里有一个例子，一个普通的 Dockerfile 不包含`CMD`指令，并且依赖于在`FROM`指令中使用的 ubuntu 映像中找到的指令:
![](img/2c1f6b2e-a069-432c-a891-fb4eb69f7bab.png)
从 history 命令的输出可以看到 ubuntu 映像中包含了`CMD ["/bin/bash"]`指令。您还会看到，我们的 Dockerfile 没有自己的`CMD`指令。当我们运行容器时，默认操作是运行`"/bin/bash"`。
`CMD`指令有三种形式。第一种是壳形式。第二种是 exec 表单，这是使用的最佳实践表单。第三种是特殊的 exec 形式，正好有两个参数，它与`ENTRYPOINT`指令结合使用，我们将在*ENTRYPOINT*T5 指令部分讨论。以下是`CMD`指令的语法。
```
# CMD instruction syntax
CMD command param1 param2 (shell form)
CMD ["executable","param1","param2"] (exec form)
CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
```
这里有几个`CMD`指令的例子供你欣赏:
```
# CMD instruction examples
CMD ["/bin/bash"]
CMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done
CMD echo "How many words are in this echo command" | wc -
CMD tail -f /dev/null
CMD ["-latr", "/var/opt"]
```
与`RUN`指令一样，`CMD`指令的 shell 形式默认使用`["/bin/sh", "-c"]` shell 命令(或 Windows 的`["cmd", "/S", "/C"]`)，除非被`SHELL`指令覆盖。然而，与`RUN`指令不同的是，`CMD`指令在构建映像期间不执行任何操作，而是在运行从映像构建的容器时执行。如果正在构建的容器映像没有 shell，那么可以使用指令的 exec 形式，因为它不调用 shell。`CMD`指令将零字节大小的图层添加到映像中。
# ENTRYPOINT 指令
`ENTRYPOINT`指令用于将 docker 映像配置为像应用或命令一样运行。例如，我们可以使用`ENTRYPOINT`指令制作一个显示`curl`命令帮助的映像。考虑这个 Dockerfile:
```
# ENTRYPOINT instruction Dockerfile for Docker Quick Start
FROM alpine
RUN apk add curl
ENTRYPOINT ["curl"]
CMD ["--help"]
```
我们可以在不覆盖`CMD`参数的情况下运行容器映像，它将显示`curl`命令的帮助。然而，当我们运行带有`CMD`覆盖参数的容器时，在这种情况下，是一个 URL，响应将是`curl`URL。看一看:
![](img/71810ef5-9fe0-439d-963f-7a03c6b758df.png)
当运行参数被提供给具有`ENTRYPOINT`命令执行形式的容器时，这些参数将被附加到`ENTRYPOINT`指令中，覆盖`CMD`指令中提供的任何内容。在本例中，`--help`被`google.com`运行参数覆盖，因此得到的指令是`curl google.com`。以下是`ENTRYPOINT`指令的实际语法:
```
# ENTRYPOINT instruction syntax
ENTRYPOINT command param1 param2 (shell form)
ENTRYPOINT ["executable", "param1", "param2"] (exec form, best practice)
```
和`CMD`指令一样，只有最后一条`ENTRYPOINT`指令才是有意义的。同样，这允许您使用或覆盖所使用的`FROM`映像中的`ENTRYPOINT`指令。像`RUN`和`CMD`指令一样，使用外壳形式将调用一个外壳作为`["/bin/sh", "-c"]`(或在 Windows 上的`["cmd", "/S", "/C"]`)。当使用指令的 exec 形式时，情况并非如此。如果您有一个没有外壳的映像，或者如果外壳对于活动用户上下文不可用，这是关键。但是，您不会得到 shell 处理，因此在使用指令的 exec 形式时，任何 shell 环境变量都不会被替换。通常认为最佳做法是尽可能使用`ENTRYPOINT`指令的执行形式。
# CMD 和 ENTRYPOINT 的区别
这里，我们有两个表面上看起来非常相似的指令。的确，两者在功能上有些重叠。这两条指令都提供了一种定义默认应用的方法，该应用在容器运行时执行。然而，它们各自服务于自己独特的目的，在某些情况下，它们共同提供比单独的指令更大的功能。
最佳实践是，当您希望容器作为应用执行时，使用`ENTRYPOINT`指令，提供特定的(开发人员)定义的函数，当您希望给用户更多的灵活性来决定容器将提供什么功能时，使用`CMD`。
这两个指令都有两种形式:shell 形式和 exec 形式。最佳做法是尽可能使用任一的 exec 形式。这样做的原因是，根据定义，shell 表单将运行`["/bin/sh", "-c"]`(或 Windows 上的`["cmd", "/S", "/C"]`)来启动指令参数中的应用。因此，容器中运行的主要进程不是应用。相反，它是外壳。这会影响容器的退出方式，影响信号的处理方式，还会给不包含`"/bin/sh"`的映像带来问题。您可能需要使用 shell 形式的一个用例是，如果您需要 shell-环境-变量替换。
在 Dockerfile 中使用这两个指令还有一个用例。当两者都使用时，您可以定义一个在容器运行时执行的特定应用，并允许用户轻松地提供与定义的应用一起使用的参数。在这种情况下，您可以使用`ENTRYPOINT`指令来设置正在执行的应用，并使用`CMD`指令为应用提供一组默认参数。通过这种配置，容器的用户可以受益于`CMD`指令中提供的默认参数，或者他们可以通过在`container run`命令中提供这些参数作为参数来轻松覆盖应用中使用的那些参数。强烈建议您在同时使用这两个指令时，使用它们的 exec 形式。
# 健康检查说明
`HEALTHCHECK`指令是 Dockerfile 的一个相当新的补充，用于定义在容器内部运行的命令，以测试容器的应用运行状况。当一个容器有一个`HEALTHCHECK`时，它会得到一个特殊的状态变量。最初，该变量将被设置为`starting`。只要`HEALTHCHECK`执行成功，状态将设置为`healthy`。当执行`HEALTHCHECK`并失败时，失败计数值将增加，然后对照重试值进行检查。如果失败计数等于或超过重试值，状态将设置为`unhealthy`。`HEALTHCHECK`指令的语法如下:
```
# HEALTHCHECK instruction syntax
HEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container)
HEALTHCHECK NONE (disable any HEALTHCHECK inherited from the base image)
```
设置`HEALTHCHECK`时可以使用四个选项，这些选项如下:
```
# HEALTHCHECK CMD options
--interval=DURATION (default: 30s)
--timeout=DURATION (default: 30s)
--start-period=DURATION (default: 0s)
--retries=N (default: 3)
```
`--interval`选项允许您定义`HEALTHCHECK`测试之间的时间间隔。`--timeout`选项允许您定义对于`HEALTHCHECK`测试来说被认为太长的时间量。如果超过超时时间，测试将自动被视为失败。`--start-period`选项允许在容器启动期间定义无故障时间段。最后，`--retries`选项允许您定义将`HEALTHCHECK`状态更新为`unhealthy`所需的连续故障次数。
`HEALTHCHECK`指令的`CMD`部分遵循与`CMD`指令相同的规则。有关完整的详细信息，请查看前面关于`CMD`说明的部分。所使用的`CMD`将在退出时提供一个状态，该状态要么为 0 表示成功，要么为 1 表示失败。下面是一个使用`HEALTHCHECK`指令的 Dockerfile 示例:
```
# HEALTHCHECK instruction Dockerfile for Docker Quick Start
FROM alpine
RUN apk add curl
EXPOSE 80/tcp
HEALTHCHECK --interval=30s --timeout=3s \
 CMD curl -f http://localhost/ || exit 1
CMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done
```
从用前面的 Dockerfile 构建的映像运行容器如下所示:
![](img/5a4d6561-c20e-4f21-94d0-0de027616a41.png)
可以看到`HEALTHCHECK`最初上报的状态为`starting`，但是`HEALTHCHECK` `CMD`上报成功后，状态更新为`healthy`。
# ONBUILD 指令
`ONBUILD`指令是创建映像时使用的工具，该映像将成为另一个 Dockerfile 中`FROM`指令的参数。`ONBUILD`指令只是将元数据添加到您的映像中，特别是存储在映像中的触发器，否则不会使用。但是，当您的映像作为另一个 Dockerfile 的`FROM`命令中的参数提供时，元数据触发器确实会被使用。以下是`ONBUILD`指令语法:
```
# ONBUILD instruction syntax
ONBUILD [INSTRUCTION]
```
`ONBUILD`指令有点像用来向未来发送指令的 Docker 时光机。(如果你知道我刚打了多少次*医生时光机*你可能会笑！)让我们用一个简单的例子来演示`ONBUILD`指令的使用。首先，我们将使用以下文件构建一个名为`my-base`的映像:
```
# my-base Dockerfile
FROM alpine
LABEL maintainer="Earl Waud "
ONBUILD LABEL version="1.0"
ONBUILD LABEL support-email="PI:EMAIL" support-phone="(123) 456-7890"
CMD ["sh"]
```